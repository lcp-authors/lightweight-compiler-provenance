
../repos/coreutils/src/head:     file format elf32-littlearm


Disassembly of section .init:

00010cb0 <.init>:
   10cb0:	push	{r3, lr}
   10cb4:	bl	10fa0 <__assert_fail@plt+0x48>
   10cb8:	pop	{r3, pc}

Disassembly of section .plt:

00010cbc <calloc@plt-0x14>:
   10cbc:	push	{lr}		; (str lr, [sp, #-4]!)
   10cc0:	ldr	lr, [pc, #4]	; 10ccc <calloc@plt-0x4>
   10cc4:	add	lr, pc, lr
   10cc8:	ldr	pc, [lr, #8]!
   10ccc:	andeq	r8, r1, r4, lsr r3

00010cd0 <calloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #24, 20	; 0x18000
   10cd8:	ldr	pc, [ip, #820]!	; 0x334

00010cdc <fputs_unlocked@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #24, 20	; 0x18000
   10ce4:	ldr	pc, [ip, #812]!	; 0x32c

00010ce8 <raise@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #24, 20	; 0x18000
   10cf0:	ldr	pc, [ip, #804]!	; 0x324

00010cf4 <strcmp@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #24, 20	; 0x18000
   10cfc:	ldr	pc, [ip, #796]!	; 0x31c

00010d00 <read@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #24, 20	; 0x18000
   10d08:	ldr	pc, [ip, #788]!	; 0x314

00010d0c <fflush@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #24, 20	; 0x18000
   10d14:	ldr	pc, [ip, #780]!	; 0x30c

00010d18 <free@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #24, 20	; 0x18000
   10d20:	ldr	pc, [ip, #772]!	; 0x304

00010d24 <_exit@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #24, 20	; 0x18000
   10d2c:	ldr	pc, [ip, #764]!	; 0x2fc

00010d30 <memcpy@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #24, 20	; 0x18000
   10d38:	ldr	pc, [ip, #756]!	; 0x2f4

00010d3c <__strtoull_internal@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #24, 20	; 0x18000
   10d44:	ldr	pc, [ip, #748]!	; 0x2ec

00010d48 <mbsinit@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #24, 20	; 0x18000
   10d50:	ldr	pc, [ip, #740]!	; 0x2e4

00010d54 <fwrite_unlocked@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #24, 20	; 0x18000
   10d5c:	ldr	pc, [ip, #732]!	; 0x2dc

00010d60 <memcmp@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #24, 20	; 0x18000
   10d68:	ldr	pc, [ip, #724]!	; 0x2d4

00010d6c <fputc_unlocked@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #24, 20	; 0x18000
   10d74:	ldr	pc, [ip, #716]!	; 0x2cc

00010d78 <dcgettext@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #24, 20	; 0x18000
   10d80:	ldr	pc, [ip, #708]!	; 0x2c4

00010d84 <realloc@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #24, 20	; 0x18000
   10d8c:	ldr	pc, [ip, #700]!	; 0x2bc

00010d90 <textdomain@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #24, 20	; 0x18000
   10d98:	ldr	pc, [ip, #692]!	; 0x2b4

00010d9c <rawmemchr@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #24, 20	; 0x18000
   10da4:	ldr	pc, [ip, #684]!	; 0x2ac

00010da8 <iswprint@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #24, 20	; 0x18000
   10db0:	ldr	pc, [ip, #676]!	; 0x2a4

00010db4 <__fxstat64@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #24, 20	; 0x18000
   10dbc:	ldr	pc, [ip, #668]!	; 0x29c

00010dc0 <fwrite@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #24, 20	; 0x18000
   10dc8:	ldr	pc, [ip, #660]!	; 0x294

00010dcc <lseek64@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #24, 20	; 0x18000
   10dd4:	ldr	pc, [ip, #652]!	; 0x28c

00010dd8 <__ctype_get_mb_cur_max@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #24, 20	; 0x18000
   10de0:	ldr	pc, [ip, #644]!	; 0x284

00010de4 <__fpending@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #24, 20	; 0x18000
   10dec:	ldr	pc, [ip, #636]!	; 0x27c

00010df0 <mbrtowc@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #24, 20	; 0x18000
   10df8:	ldr	pc, [ip, #628]!	; 0x274

00010dfc <error@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #24, 20	; 0x18000
   10e04:	ldr	pc, [ip, #620]!	; 0x26c

00010e08 <open64@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #24, 20	; 0x18000
   10e10:	ldr	pc, [ip, #612]!	; 0x264

00010e14 <malloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #24, 20	; 0x18000
   10e1c:	ldr	pc, [ip, #604]!	; 0x25c

00010e20 <__libc_start_main@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #24, 20	; 0x18000
   10e28:	ldr	pc, [ip, #596]!	; 0x254

00010e2c <__freading@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #24, 20	; 0x18000
   10e34:	ldr	pc, [ip, #588]!	; 0x24c

00010e38 <__gmon_start__@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #24, 20	; 0x18000
   10e40:	ldr	pc, [ip, #580]!	; 0x244

00010e44 <getopt_long@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #24, 20	; 0x18000
   10e4c:	ldr	pc, [ip, #572]!	; 0x23c

00010e50 <__ctype_b_loc@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #24, 20	; 0x18000
   10e58:	ldr	pc, [ip, #564]!	; 0x234

00010e5c <exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #24, 20	; 0x18000
   10e64:	ldr	pc, [ip, #556]!	; 0x22c

00010e68 <strlen@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #24, 20	; 0x18000
   10e70:	ldr	pc, [ip, #548]!	; 0x224

00010e74 <strchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #24, 20	; 0x18000
   10e7c:	ldr	pc, [ip, #540]!	; 0x21c

00010e80 <memrchr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #24, 20	; 0x18000
   10e88:	ldr	pc, [ip, #532]!	; 0x214

00010e8c <__errno_location@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #24, 20	; 0x18000
   10e94:	ldr	pc, [ip, #524]!	; 0x20c

00010e98 <__cxa_atexit@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #24, 20	; 0x18000
   10ea0:	ldr	pc, [ip, #516]!	; 0x204

00010ea4 <memset@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #24, 20	; 0x18000
   10eac:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb0 <__printf_chk@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #24, 20	; 0x18000
   10eb8:	ldr	pc, [ip, #500]!	; 0x1f4

00010ebc <fileno@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #24, 20	; 0x18000
   10ec4:	ldr	pc, [ip, #492]!	; 0x1ec

00010ec8 <__fprintf_chk@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #24, 20	; 0x18000
   10ed0:	ldr	pc, [ip, #484]!	; 0x1e4

00010ed4 <memchr@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #24, 20	; 0x18000
   10edc:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee0 <fclose@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #24, 20	; 0x18000
   10ee8:	ldr	pc, [ip, #468]!	; 0x1d4

00010eec <fseeko64@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #24, 20	; 0x18000
   10ef4:	ldr	pc, [ip, #460]!	; 0x1cc

00010ef8 <setlocale@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #24, 20	; 0x18000
   10f00:	ldr	pc, [ip, #452]!	; 0x1c4

00010f04 <strrchr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #24, 20	; 0x18000
   10f0c:	ldr	pc, [ip, #444]!	; 0x1bc

00010f10 <nl_langinfo@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #24, 20	; 0x18000
   10f18:	ldr	pc, [ip, #436]!	; 0x1b4

00010f1c <clearerr_unlocked@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #24, 20	; 0x18000
   10f24:	ldr	pc, [ip, #428]!	; 0x1ac

00010f28 <bindtextdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #24, 20	; 0x18000
   10f30:	ldr	pc, [ip, #420]!	; 0x1a4

00010f34 <strncmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #24, 20	; 0x18000
   10f3c:	ldr	pc, [ip, #412]!	; 0x19c

00010f40 <abort@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #24, 20	; 0x18000
   10f48:	ldr	pc, [ip, #404]!	; 0x194

00010f4c <close@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #24, 20	; 0x18000
   10f54:	ldr	pc, [ip, #396]!	; 0x18c

00010f58 <__assert_fail@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #24, 20	; 0x18000
   10f60:	ldr	pc, [ip, #388]!	; 0x184

Disassembly of section .text:

00010f64 <.text>:
   10f64:	mov	fp, #0
   10f68:	mov	lr, #0
   10f6c:	pop	{r1}		; (ldr r1, [sp], #4)
   10f70:	mov	r2, sp
   10f74:	push	{r2}		; (str r2, [sp, #-4]!)
   10f78:	push	{r0}		; (str r0, [sp, #-4]!)
   10f7c:	ldr	ip, [pc, #16]	; 10f94 <__assert_fail@plt+0x3c>
   10f80:	push	{ip}		; (str ip, [sp, #-4]!)
   10f84:	ldr	r0, [pc, #12]	; 10f98 <__assert_fail@plt+0x40>
   10f88:	ldr	r3, [pc, #12]	; 10f9c <__assert_fail@plt+0x44>
   10f8c:	bl	10e20 <__libc_start_main@plt>
   10f90:	bl	10f40 <abort@plt>
   10f94:	andeq	r7, r1, ip, lsl #4
   10f98:	andeq	r1, r1, r4, ror #28
   10f9c:	andeq	r7, r1, ip, lsr #3
   10fa0:	ldr	r3, [pc, #20]	; 10fbc <__assert_fail@plt+0x64>
   10fa4:	ldr	r2, [pc, #20]	; 10fc0 <__assert_fail@plt+0x68>
   10fa8:	add	r3, pc, r3
   10fac:	ldr	r2, [r3, r2]
   10fb0:	cmp	r2, #0
   10fb4:	bxeq	lr
   10fb8:	b	10e38 <__gmon_start__@plt>
   10fbc:	andeq	r8, r1, r0, asr r0
   10fc0:	andeq	r0, r0, r8, ror #1
   10fc4:	ldr	r0, [pc, #24]	; 10fe4 <__assert_fail@plt+0x8c>
   10fc8:	ldr	r3, [pc, #24]	; 10fe8 <__assert_fail@plt+0x90>
   10fcc:	cmp	r3, r0
   10fd0:	bxeq	lr
   10fd4:	ldr	r3, [pc, #16]	; 10fec <__assert_fail@plt+0x94>
   10fd8:	cmp	r3, #0
   10fdc:	bxeq	lr
   10fe0:	bx	r3
   10fe4:	andeq	r9, r2, r0, asr #2
   10fe8:	andeq	r9, r2, r0, asr #2
   10fec:	andeq	r0, r0, r0
   10ff0:	ldr	r0, [pc, #36]	; 1101c <__assert_fail@plt+0xc4>
   10ff4:	ldr	r1, [pc, #36]	; 11020 <__assert_fail@plt+0xc8>
   10ff8:	sub	r1, r1, r0
   10ffc:	asr	r1, r1, #2
   11000:	add	r1, r1, r1, lsr #31
   11004:	asrs	r1, r1, #1
   11008:	bxeq	lr
   1100c:	ldr	r3, [pc, #16]	; 11024 <__assert_fail@plt+0xcc>
   11010:	cmp	r3, #0
   11014:	bxeq	lr
   11018:	bx	r3
   1101c:	andeq	r9, r2, r0, asr #2
   11020:	andeq	r9, r2, r0, asr #2
   11024:	andeq	r0, r0, r0
   11028:	push	{r4, lr}
   1102c:	ldr	r4, [pc, #24]	; 1104c <__assert_fail@plt+0xf4>
   11030:	ldrb	r3, [r4]
   11034:	cmp	r3, #0
   11038:	popne	{r4, pc}
   1103c:	bl	10fc4 <__assert_fail@plt+0x6c>
   11040:	mov	r3, #1
   11044:	strb	r3, [r4]
   11048:	pop	{r4, pc}
   1104c:	andeq	r9, r2, ip, asr r1
   11050:	b	10ff0 <__assert_fail@plt+0x98>
   11054:	str	r4, [sp, #-8]!
   11058:	str	lr, [sp, #4]
   1105c:	sub	sp, sp, #24
   11060:	mov	r4, r1
   11064:	cmp	r0, #0
   11068:	mov	r2, #5
   1106c:	movwne	r1, #29460	; 0x7314
   11070:	movtne	r1, #1
   11074:	movweq	r1, #29484	; 0x732c
   11078:	movteq	r1, #1
   1107c:	mov	r0, #0
   11080:	bl	10d78 <dcgettext@plt>
   11084:	mov	r3, #0
   11088:	str	r3, [sp, #16]
   1108c:	str	r0, [sp, #12]
   11090:	movw	r3, #29508	; 0x7344
   11094:	movt	r3, #1
   11098:	str	r3, [sp, #8]
   1109c:	mvn	r2, #0
   110a0:	mvn	r3, #0
   110a4:	strd	r2, [sp]
   110a8:	mov	r2, #0
   110ac:	mov	r3, #0
   110b0:	mov	r0, r4
   110b4:	bl	1631c <__assert_fail@plt+0x53c4>
   110b8:	add	sp, sp, #24
   110bc:	ldr	r4, [sp]
   110c0:	add	sp, sp, #4
   110c4:	pop	{pc}		; (ldr pc, [sp], #4)
   110c8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   110cc:	strd	r6, [sp, #8]
   110d0:	strd	r8, [sp, #16]
   110d4:	str	sl, [sp, #24]
   110d8:	str	lr, [sp, #28]
   110dc:	sub	sp, sp, #32
   110e0:	mov	r8, r2
   110e4:	mov	r9, r3
   110e8:	ldr	r6, [sp, #64]	; 0x40
   110ec:	str	r6, [sp]
   110f0:	bl	10dcc <lseek64@plt>
   110f4:	mov	r4, r0
   110f8:	mov	r5, r1
   110fc:	cmp	r0, #0
   11100:	sbcs	r3, r1, #0
   11104:	blt	1112c <__assert_fail@plt+0x1d4>
   11108:	mov	r0, r4
   1110c:	mov	r1, r5
   11110:	add	sp, sp, #32
   11114:	ldrd	r4, [sp]
   11118:	ldrd	r6, [sp, #8]
   1111c:	ldrd	r8, [sp, #16]
   11120:	ldr	sl, [sp, #24]
   11124:	add	sp, sp, #28
   11128:	pop	{pc}		; (ldr pc, [sp], #4)
   1112c:	bl	10e8c <__errno_location@plt>
   11130:	ldr	r7, [r0]
   11134:	movw	r1, #29524	; 0x7354
   11138:	movt	r1, #1
   1113c:	movw	r3, #29556	; 0x7374
   11140:	movt	r3, #1
   11144:	mov	r2, #5
   11148:	cmp	r6, #0
   1114c:	movne	r1, r3
   11150:	mov	r0, #0
   11154:	bl	10d78 <dcgettext@plt>
   11158:	mov	r6, r0
   1115c:	ldr	r2, [sp, #68]	; 0x44
   11160:	mov	r1, #3
   11164:	mov	r0, #0
   11168:	bl	154e8 <__assert_fail@plt+0x4590>
   1116c:	mov	sl, r0
   11170:	add	r2, sp, #8
   11174:	mov	r0, r8
   11178:	mov	r1, r9
   1117c:	bl	13234 <__assert_fail@plt+0x22dc>
   11180:	str	r0, [sp]
   11184:	mov	r3, sl
   11188:	mov	r2, r6
   1118c:	mov	r1, r7
   11190:	mov	r0, #0
   11194:	bl	10dfc <error@plt>
   11198:	b	11108 <__assert_fail@plt+0x1b0>
   1119c:	strd	r4, [sp, #-16]!
   111a0:	str	r6, [sp, #8]
   111a4:	str	lr, [sp, #12]
   111a8:	subs	r4, r1, #0
   111ac:	beq	111d0 <__assert_fail@plt+0x278>
   111b0:	movw	r3, #37204	; 0x9154
   111b4:	movt	r3, #2
   111b8:	ldr	r3, [r3]
   111bc:	mov	r2, r4
   111c0:	mov	r1, #1
   111c4:	bl	10d54 <fwrite_unlocked@plt>
   111c8:	cmp	r4, r0
   111cc:	bhi	111e0 <__assert_fail@plt+0x288>
   111d0:	ldrd	r4, [sp]
   111d4:	ldr	r6, [sp, #8]
   111d8:	add	sp, sp, #12
   111dc:	pop	{pc}		; (ldr pc, [sp], #4)
   111e0:	movw	r3, #37204	; 0x9154
   111e4:	movt	r3, #2
   111e8:	ldr	r0, [r3]
   111ec:	bl	10f1c <clearerr_unlocked@plt>
   111f0:	bl	10e8c <__errno_location@plt>
   111f4:	ldr	r4, [r0]
   111f8:	mov	r2, #5
   111fc:	movw	r1, #29596	; 0x739c
   11200:	movt	r1, #1
   11204:	mov	r0, #0
   11208:	bl	10d78 <dcgettext@plt>
   1120c:	mov	r5, r0
   11210:	movw	r1, #29616	; 0x73b0
   11214:	movt	r1, #1
   11218:	mov	r0, #4
   1121c:	bl	153c4 <__assert_fail@plt+0x446c>
   11220:	mov	r3, r0
   11224:	mov	r2, r5
   11228:	mov	r1, r4
   1122c:	mov	r0, #1
   11230:	bl	10dfc <error@plt>
   11234:	strd	r4, [sp, #-20]!	; 0xffffffec
   11238:	strd	r6, [sp, #8]
   1123c:	str	lr, [sp, #16]
   11240:	sub	sp, sp, #8192	; 0x2000
   11244:	sub	sp, sp, #4
   11248:	mov	r4, r2
   1124c:	mov	r5, r3
   11250:	orrs	r3, r4, r5
   11254:	beq	112c4 <__assert_fail@plt+0x36c>
   11258:	mov	r6, r0
   1125c:	mov	r7, #8192	; 0x2000
   11260:	mov	r2, r4
   11264:	cmp	r5, #0
   11268:	cmpeq	r4, #8192	; 0x2000
   1126c:	movhi	r2, r7
   11270:	mov	r1, sp
   11274:	mov	r0, r6
   11278:	bl	156d4 <__assert_fail@plt+0x477c>
   1127c:	cmn	r0, #1
   11280:	beq	112cc <__assert_fail@plt+0x374>
   11284:	subs	r4, r4, r0
   11288:	sbc	r5, r5, #0
   1128c:	orrs	r3, r4, r5
   11290:	movne	r3, #1
   11294:	moveq	r3, #0
   11298:	cmp	r0, #0
   1129c:	movne	r3, #0
   112a0:	cmp	r3, #0
   112a4:	bne	112e8 <__assert_fail@plt+0x390>
   112a8:	mov	r1, r0
   112ac:	mov	r0, sp
   112b0:	bl	1119c <__assert_fail@plt+0x244>
   112b4:	orrs	r3, r4, r5
   112b8:	bne	11260 <__assert_fail@plt+0x308>
   112bc:	mov	r0, #0
   112c0:	b	112d0 <__assert_fail@plt+0x378>
   112c4:	mov	r0, #0
   112c8:	b	112d0 <__assert_fail@plt+0x378>
   112cc:	mov	r0, #1
   112d0:	add	sp, sp, #8192	; 0x2000
   112d4:	add	sp, sp, #4
   112d8:	ldrd	r4, [sp]
   112dc:	ldrd	r6, [sp, #8]
   112e0:	add	sp, sp, #16
   112e4:	pop	{pc}		; (ldr pc, [sp], #4)
   112e8:	mov	r0, #2
   112ec:	b	112d0 <__assert_fail@plt+0x378>
   112f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   112f4:	strd	r6, [sp, #8]
   112f8:	strd	r8, [sp, #16]
   112fc:	str	sl, [sp, #24]
   11300:	str	lr, [sp, #28]
   11304:	sub	sp, sp, #8256	; 0x2040
   11308:	sub	sp, sp, #48	; 0x30
   1130c:	mov	r6, r2
   11310:	mov	r7, r3
   11314:	orrs	r3, r6, r7
   11318:	beq	11498 <__assert_fail@plt+0x540>
   1131c:	mov	sl, r0
   11320:	mov	r5, r1
   11324:	mov	r9, #8192	; 0x2000
   11328:	movw	r8, #37213	; 0x915d
   1132c:	movt	r8, #2
   11330:	b	11460 <__assert_fail@plt+0x508>
   11334:	bl	10e8c <__errno_location@plt>
   11338:	ldr	r4, [r0]
   1133c:	mov	r2, #5
   11340:	movw	r1, #29632	; 0x73c0
   11344:	movt	r1, #1
   11348:	mov	r0, #0
   1134c:	bl	10d78 <dcgettext@plt>
   11350:	mov	r5, r0
   11354:	mov	r1, sl
   11358:	mov	r0, #4
   1135c:	bl	153c4 <__assert_fail@plt+0x446c>
   11360:	mov	r3, r0
   11364:	mov	r2, r5
   11368:	mov	r1, r4
   1136c:	mov	r0, #0
   11370:	bl	10dfc <error@plt>
   11374:	mov	r0, #0
   11378:	add	sp, sp, #8256	; 0x2040
   1137c:	add	sp, sp, #48	; 0x30
   11380:	ldrd	r4, [sp]
   11384:	ldrd	r6, [sp, #8]
   11388:	ldrd	r8, [sp, #16]
   1138c:	ldr	sl, [sp, #24]
   11390:	add	sp, sp, #28
   11394:	pop	{pc}		; (ldr pc, [sp], #4)
   11398:	add	r2, sp, #8
   1139c:	mov	r1, r5
   113a0:	mov	r0, #3
   113a4:	bl	10db4 <__fxstat64@plt>
   113a8:	cmp	r0, #0
   113ac:	bne	113c0 <__assert_fail@plt+0x468>
   113b0:	ldr	r3, [sp, #24]
   113b4:	and	r3, r3, #61440	; 0xf000
   113b8:	cmp	r3, #32768	; 0x8000
   113bc:	bne	11438 <__assert_fail@plt+0x4e0>
   113c0:	str	sl, [sp, #4]
   113c4:	mov	r3, #1
   113c8:	str	r3, [sp]
   113cc:	mov	r2, r6
   113d0:	mov	r3, r7
   113d4:	mov	r0, r5
   113d8:	bl	110c8 <__assert_fail@plt+0x170>
   113dc:	b	11438 <__assert_fail@plt+0x4e0>
   113e0:	cmp	r0, r4
   113e4:	beq	1144c <__assert_fail@plt+0x4f4>
   113e8:	add	r4, r4, #1
   113ec:	ldrb	r2, [r3], #1
   113f0:	cmp	r2, r1
   113f4:	bne	113e0 <__assert_fail@plt+0x488>
   113f8:	subs	r6, r6, #1
   113fc:	sbc	r7, r7, #0
   11400:	orrs	r2, r6, r7
   11404:	bne	113e0 <__assert_fail@plt+0x488>
   11408:	sub	r0, r0, r4
   1140c:	rsbs	r6, r0, #0
   11410:	sbc	r7, r7, r7
   11414:	mov	r3, #1
   11418:	str	r3, [sp]
   1141c:	mov	r2, r6
   11420:	mov	r3, r7
   11424:	mov	r0, r5
   11428:	bl	10dcc <lseek64@plt>
   1142c:	cmp	r0, #0
   11430:	sbcs	r3, r1, #0
   11434:	blt	11398 <__assert_fail@plt+0x440>
   11438:	mov	r1, r4
   1143c:	add	r0, sp, #112	; 0x70
   11440:	bl	1119c <__assert_fail@plt+0x244>
   11444:	mov	r0, #1
   11448:	b	11378 <__assert_fail@plt+0x420>
   1144c:	mov	r1, r4
   11450:	add	r0, sp, #112	; 0x70
   11454:	bl	1119c <__assert_fail@plt+0x244>
   11458:	orrs	r3, r6, r7
   1145c:	beq	11490 <__assert_fail@plt+0x538>
   11460:	mov	r2, r9
   11464:	add	r1, sp, #112	; 0x70
   11468:	mov	r0, r5
   1146c:	bl	156d4 <__assert_fail@plt+0x477c>
   11470:	cmn	r0, #1
   11474:	beq	11334 <__assert_fail@plt+0x3dc>
   11478:	cmp	r0, #0
   1147c:	beq	114a0 <__assert_fail@plt+0x548>
   11480:	ldrb	r1, [r8]
   11484:	add	r3, sp, #112	; 0x70
   11488:	mov	r4, #0
   1148c:	b	113e8 <__assert_fail@plt+0x490>
   11490:	mov	r0, #1
   11494:	b	11378 <__assert_fail@plt+0x420>
   11498:	mov	r0, #1
   1149c:	b	11378 <__assert_fail@plt+0x420>
   114a0:	mov	r0, #1
   114a4:	b	11378 <__assert_fail@plt+0x420>
   114a8:	strd	r4, [sp, #-28]!	; 0xffffffe4
   114ac:	strd	r6, [sp, #8]
   114b0:	strd	r8, [sp, #16]
   114b4:	str	lr, [sp, #24]
   114b8:	sub	sp, sp, #8192	; 0x2000
   114bc:	sub	sp, sp, #4
   114c0:	mov	r4, r2
   114c4:	mov	r5, r3
   114c8:	orrs	r3, r4, r5
   114cc:	beq	11594 <__assert_fail@plt+0x63c>
   114d0:	mov	r9, r0
   114d4:	mov	r8, r1
   114d8:	mov	r7, #8192	; 0x2000
   114dc:	mov	r3, #0
   114e0:	cmp	r3, r5
   114e4:	cmpeq	r7, r4
   114e8:	movhi	r7, r4
   114ec:	mov	r2, r7
   114f0:	mov	r1, sp
   114f4:	mov	r0, r8
   114f8:	bl	156d4 <__assert_fail@plt+0x477c>
   114fc:	mov	r6, r0
   11500:	cmn	r0, #1
   11504:	beq	11534 <__assert_fail@plt+0x5dc>
   11508:	cmp	r0, #0
   1150c:	beq	1159c <__assert_fail@plt+0x644>
   11510:	mov	r1, r0
   11514:	mov	r0, sp
   11518:	bl	1119c <__assert_fail@plt+0x244>
   1151c:	subs	r4, r4, r6
   11520:	sbc	r5, r5, #0
   11524:	orrs	r3, r4, r5
   11528:	bne	114dc <__assert_fail@plt+0x584>
   1152c:	mov	r0, #1
   11530:	b	11578 <__assert_fail@plt+0x620>
   11534:	bl	10e8c <__errno_location@plt>
   11538:	ldr	r4, [r0]
   1153c:	mov	r2, #5
   11540:	movw	r1, #29632	; 0x73c0
   11544:	movt	r1, #1
   11548:	mov	r0, #0
   1154c:	bl	10d78 <dcgettext@plt>
   11550:	mov	r5, r0
   11554:	mov	r1, r9
   11558:	mov	r0, #4
   1155c:	bl	153c4 <__assert_fail@plt+0x446c>
   11560:	mov	r3, r0
   11564:	mov	r2, r5
   11568:	mov	r1, r4
   1156c:	mov	r0, #0
   11570:	bl	10dfc <error@plt>
   11574:	mov	r0, #0
   11578:	add	sp, sp, #8192	; 0x2000
   1157c:	add	sp, sp, #4
   11580:	ldrd	r4, [sp]
   11584:	ldrd	r6, [sp, #8]
   11588:	ldrd	r8, [sp, #16]
   1158c:	add	sp, sp, #24
   11590:	pop	{pc}		; (ldr pc, [sp], #4)
   11594:	mov	r0, #1
   11598:	b	11578 <__assert_fail@plt+0x620>
   1159c:	mov	r0, #1
   115a0:	b	11578 <__assert_fail@plt+0x620>
   115a4:	strd	r4, [sp, #-16]!
   115a8:	str	r6, [sp, #8]
   115ac:	str	lr, [sp, #12]
   115b0:	mov	r4, r1
   115b4:	cmp	r0, #1
   115b8:	beq	1160c <__assert_fail@plt+0x6b4>
   115bc:	cmp	r0, #2
   115c0:	bne	1165c <__assert_fail@plt+0x704>
   115c4:	bl	10e8c <__errno_location@plt>
   115c8:	ldr	r5, [r0]
   115cc:	mov	r2, #5
   115d0:	movw	r1, #29652	; 0x73d4
   115d4:	movt	r1, #1
   115d8:	mov	r0, #0
   115dc:	bl	10d78 <dcgettext@plt>
   115e0:	mov	r6, r0
   115e4:	mov	r2, r4
   115e8:	mov	r1, #3
   115ec:	mov	r0, #0
   115f0:	bl	154e8 <__assert_fail@plt+0x4590>
   115f4:	mov	r3, r0
   115f8:	mov	r2, r6
   115fc:	mov	r1, r5
   11600:	mov	r0, #0
   11604:	bl	10dfc <error@plt>
   11608:	b	1164c <__assert_fail@plt+0x6f4>
   1160c:	bl	10e8c <__errno_location@plt>
   11610:	ldr	r5, [r0]
   11614:	mov	r2, #5
   11618:	movw	r1, #29632	; 0x73c0
   1161c:	movt	r1, #1
   11620:	mov	r0, #0
   11624:	bl	10d78 <dcgettext@plt>
   11628:	mov	r6, r0
   1162c:	mov	r1, r4
   11630:	mov	r0, #4
   11634:	bl	153c4 <__assert_fail@plt+0x446c>
   11638:	mov	r3, r0
   1163c:	mov	r2, r6
   11640:	mov	r1, r5
   11644:	mov	r0, #0
   11648:	bl	10dfc <error@plt>
   1164c:	ldrd	r4, [sp]
   11650:	ldr	r6, [sp, #8]
   11654:	add	sp, sp, #12
   11658:	pop	{pc}		; (ldr pc, [sp], #4)
   1165c:	bl	10f40 <abort@plt>
   11660:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11664:	strd	r6, [sp, #8]
   11668:	strd	r8, [sp, #16]
   1166c:	strd	sl, [sp, #24]
   11670:	str	lr, [sp, #32]
   11674:	sub	sp, sp, #8192	; 0x2000
   11678:	sub	sp, sp, #44	; 0x2c
   1167c:	mov	fp, r0
   11680:	mov	r7, r1
   11684:	str	r1, [sp, #20]
   11688:	mov	r8, r2
   1168c:	mov	r9, r3
   11690:	add	r3, sp, #8256	; 0x2040
   11694:	add	r3, r3, #24
   11698:	ldrd	r2, [r3]
   1169c:	add	r1, sp, #8256	; 0x2040
   116a0:	add	r1, r1, #16
   116a4:	ldr	r1, [r1]
   116a8:	subs	lr, r2, r1
   116ac:	add	r1, sp, #8256	; 0x2040
   116b0:	add	r1, r1, #20
   116b4:	ldr	r1, [r1]
   116b8:	sbc	ip, r3, r1
   116bc:	asr	ip, ip, #31
   116c0:	mov	r0, ip
   116c4:	asr	r1, ip, #31
   116c8:	strd	r0, [sp, #8]
   116cc:	eor	r1, lr, ip
   116d0:	ldr	lr, [sp, #8]
   116d4:	subs	r1, r1, lr
   116d8:	ubfx	r1, r1, #0, #13
   116dc:	eor	r6, r1, ip
   116e0:	cmp	r6, lr
   116e4:	subne	r6, r6, lr
   116e8:	moveq	r6, #8192	; 0x2000
   116ec:	subs	r0, r2, r6
   116f0:	sbc	r1, r3, #0
   116f4:	strd	r0, [sp, #24]
   116f8:	str	fp, [sp, #4]
   116fc:	mov	r3, #0
   11700:	str	r3, [sp]
   11704:	mov	r2, r0
   11708:	mov	r3, r1
   1170c:	mov	r0, r7
   11710:	bl	110c8 <__assert_fail@plt+0x170>
   11714:	cmp	r0, #0
   11718:	sbcs	r3, r1, #0
   1171c:	movlt	r0, #0
   11720:	blt	11918 <__assert_fail@plt+0x9c0>
   11724:	mov	r2, r6
   11728:	add	r1, sp, #40	; 0x28
   1172c:	mov	r0, r7
   11730:	bl	156d4 <__assert_fail@plt+0x477c>
   11734:	mov	r6, r0
   11738:	cmn	r0, #1
   1173c:	beq	117b0 <__assert_fail@plt+0x858>
   11740:	orrs	r3, r8, r9
   11744:	movne	r3, #1
   11748:	moveq	r3, #0
   1174c:	cmp	r0, #0
   11750:	moveq	r3, #0
   11754:	cmp	r3, #0
   11758:	moveq	r4, r8
   1175c:	moveq	r5, r9
   11760:	beq	1178c <__assert_fail@plt+0x834>
   11764:	add	r3, sp, #40	; 0x28
   11768:	add	r2, r3, r0
   1176c:	movw	r3, #37213	; 0x915d
   11770:	movt	r3, #2
   11774:	ldrb	r2, [r2, #-1]
   11778:	ldrb	r3, [r3]
   1177c:	cmp	r2, r3
   11780:	beq	117f8 <__assert_fail@plt+0x8a0>
   11784:	subs	r4, r8, #1
   11788:	sbc	r5, r9, #0
   1178c:	movw	r7, #37213	; 0x915d
   11790:	movt	r7, #2
   11794:	add	sl, sp, #40	; 0x28
   11798:	str	sl, [sp, #8]
   1179c:	mov	r2, r6
   117a0:	str	fp, [sp, #32]
   117a4:	str	r7, [sp, #36]	; 0x24
   117a8:	ldrd	r6, [sp, #24]
   117ac:	b	119c4 <__assert_fail@plt+0xa6c>
   117b0:	bl	10e8c <__errno_location@plt>
   117b4:	ldr	r4, [r0]
   117b8:	mov	r2, #5
   117bc:	movw	r1, #29632	; 0x73c0
   117c0:	movt	r1, #1
   117c4:	mov	r0, #0
   117c8:	bl	10d78 <dcgettext@plt>
   117cc:	mov	r5, r0
   117d0:	mov	r1, fp
   117d4:	mov	r0, #4
   117d8:	bl	153c4 <__assert_fail@plt+0x446c>
   117dc:	mov	r3, r0
   117e0:	mov	r2, r5
   117e4:	mov	r1, r4
   117e8:	mov	r0, #0
   117ec:	bl	10dfc <error@plt>
   117f0:	mov	r0, #0
   117f4:	b	11918 <__assert_fail@plt+0x9c0>
   117f8:	mov	r4, r8
   117fc:	mov	r5, r9
   11800:	b	1178c <__assert_fail@plt+0x834>
   11804:	sub	r2, r0, sl
   11808:	subs	r1, r4, #1
   1180c:	sbc	r3, r5, #0
   11810:	orrs	r0, r4, r5
   11814:	beq	1184c <__assert_fail@plt+0x8f4>
   11818:	cmp	r2, #0
   1181c:	beq	11948 <__assert_fail@plt+0x9f0>
   11820:	mov	r4, r1
   11824:	mov	r5, r3
   11828:	orrs	r3, r8, r9
   1182c:	subeq	r2, r2, #1
   11830:	beq	11808 <__assert_fail@plt+0x8b0>
   11834:	mov	r1, fp
   11838:	ldr	r0, [sp, #8]
   1183c:	bl	10e80 <memrchr@plt>
   11840:	cmp	r0, #0
   11844:	bne	11804 <__assert_fail@plt+0x8ac>
   11848:	b	11950 <__assert_fail@plt+0x9f8>
   1184c:	mov	r4, r6
   11850:	mov	r5, r7
   11854:	strd	r4, [sp, #24]
   11858:	mov	r6, r2
   1185c:	ldr	fp, [sp, #32]
   11860:	add	r3, sp, #8256	; 0x2040
   11864:	add	r3, r3, #16
   11868:	ldrd	r2, [r3]
   1186c:	cmp	r2, r4
   11870:	sbcs	r3, r3, r7
   11874:	bge	118dc <__assert_fail@plt+0x984>
   11878:	str	fp, [sp, #4]
   1187c:	mov	r3, #0
   11880:	str	r3, [sp]
   11884:	add	r3, sp, #8256	; 0x2040
   11888:	add	r3, r3, #16
   1188c:	ldrd	r2, [r3]
   11890:	ldr	r7, [sp, #20]
   11894:	mov	r0, r7
   11898:	bl	110c8 <__assert_fail@plt+0x170>
   1189c:	cmp	r0, #0
   118a0:	sbcs	r3, r1, #0
   118a4:	movlt	r0, #0
   118a8:	blt	11918 <__assert_fail@plt+0x9c0>
   118ac:	add	r3, sp, #8256	; 0x2040
   118b0:	add	r3, r3, #16
   118b4:	ldr	r3, [r3]
   118b8:	subs	r2, r4, r3
   118bc:	add	r3, sp, #8256	; 0x2040
   118c0:	add	r3, r3, #20
   118c4:	ldr	r3, [r3]
   118c8:	sbc	r3, r5, r3
   118cc:	mov	r0, r7
   118d0:	bl	11234 <__assert_fail@plt+0x2dc>
   118d4:	cmp	r0, #0
   118d8:	bne	11938 <__assert_fail@plt+0x9e0>
   118dc:	add	r1, r6, #1
   118e0:	add	r0, sp, #40	; 0x28
   118e4:	bl	1119c <__assert_fail@plt+0x244>
   118e8:	ldrd	r0, [sp, #24]
   118ec:	adds	r0, r0, r6
   118f0:	adc	r1, r1, #0
   118f4:	str	fp, [sp, #4]
   118f8:	mov	r3, #0
   118fc:	str	r3, [sp]
   11900:	adds	r2, r0, #1
   11904:	adc	r3, r1, r3
   11908:	ldr	r0, [sp, #20]
   1190c:	bl	110c8 <__assert_fail@plt+0x170>
   11910:	mvn	r0, r1
   11914:	lsr	r0, r0, #31
   11918:	add	sp, sp, #8192	; 0x2000
   1191c:	add	sp, sp, #44	; 0x2c
   11920:	ldrd	r4, [sp]
   11924:	ldrd	r6, [sp, #8]
   11928:	ldrd	r8, [sp, #16]
   1192c:	ldrd	sl, [sp, #24]
   11930:	add	sp, sp, #32
   11934:	pop	{pc}		; (ldr pc, [sp], #4)
   11938:	mov	r1, fp
   1193c:	bl	115a4 <__assert_fail@plt+0x64c>
   11940:	mov	r0, #0
   11944:	b	11918 <__assert_fail@plt+0x9c0>
   11948:	mov	r4, r1
   1194c:	mov	r5, r3
   11950:	add	r3, sp, #8256	; 0x2040
   11954:	add	r3, r3, #16
   11958:	ldrd	r2, [r3]
   1195c:	cmp	r7, r3
   11960:	cmpeq	r6, r2
   11964:	beq	11a2c <__assert_fail@plt+0xad4>
   11968:	subs	r6, r6, #8192	; 0x2000
   1196c:	sbc	r7, r7, #0
   11970:	ldr	r3, [sp, #32]
   11974:	str	r3, [sp, #4]
   11978:	mov	r3, #0
   1197c:	str	r3, [sp]
   11980:	mov	r2, r6
   11984:	mov	r3, r7
   11988:	ldr	fp, [sp, #20]
   1198c:	mov	r0, fp
   11990:	bl	110c8 <__assert_fail@plt+0x170>
   11994:	cmp	r0, #0
   11998:	sbcs	r3, r1, #0
   1199c:	blt	11a34 <__assert_fail@plt+0xadc>
   119a0:	mov	r2, #8192	; 0x2000
   119a4:	ldr	r1, [sp, #8]
   119a8:	mov	r0, fp
   119ac:	bl	156d4 <__assert_fail@plt+0x477c>
   119b0:	mov	r2, r0
   119b4:	cmn	r0, #1
   119b8:	beq	119d8 <__assert_fail@plt+0xa80>
   119bc:	cmp	r0, #0
   119c0:	beq	11a24 <__assert_fail@plt+0xacc>
   119c4:	cmp	r2, #0
   119c8:	beq	11950 <__assert_fail@plt+0x9f8>
   119cc:	ldr	r3, [sp, #36]	; 0x24
   119d0:	ldrb	fp, [r3]
   119d4:	b	11828 <__assert_fail@plt+0x8d0>
   119d8:	ldr	fp, [sp, #32]
   119dc:	bl	10e8c <__errno_location@plt>
   119e0:	ldr	r4, [r0]
   119e4:	mov	r2, #5
   119e8:	movw	r1, #29632	; 0x73c0
   119ec:	movt	r1, #1
   119f0:	mov	r0, #0
   119f4:	bl	10d78 <dcgettext@plt>
   119f8:	mov	r5, r0
   119fc:	mov	r1, fp
   11a00:	mov	r0, #4
   11a04:	bl	153c4 <__assert_fail@plt+0x446c>
   11a08:	mov	r3, r0
   11a0c:	mov	r2, r5
   11a10:	mov	r1, r4
   11a14:	mov	r0, #0
   11a18:	bl	10dfc <error@plt>
   11a1c:	mov	r0, #0
   11a20:	b	11918 <__assert_fail@plt+0x9c0>
   11a24:	mov	r0, #1
   11a28:	b	11918 <__assert_fail@plt+0x9c0>
   11a2c:	mov	r0, #1
   11a30:	b	11918 <__assert_fail@plt+0x9c0>
   11a34:	mov	r0, #0
   11a38:	b	11918 <__assert_fail@plt+0x9c0>
   11a3c:	push	{lr}		; (str lr, [sp, #-4]!)
   11a40:	sub	sp, sp, #60	; 0x3c
   11a44:	subs	r4, r0, #0
   11a48:	beq	11a90 <__assert_fail@plt+0xb38>
   11a4c:	movw	r3, #37200	; 0x9150
   11a50:	movt	r3, #2
   11a54:	ldr	r5, [r3]
   11a58:	mov	r2, #5
   11a5c:	movw	r1, #29692	; 0x73fc
   11a60:	movt	r1, #1
   11a64:	mov	r0, #0
   11a68:	bl	10d78 <dcgettext@plt>
   11a6c:	movw	r3, #37228	; 0x916c
   11a70:	movt	r3, #2
   11a74:	ldr	r3, [r3]
   11a78:	mov	r2, r0
   11a7c:	mov	r1, #1
   11a80:	mov	r0, r5
   11a84:	bl	10ec8 <__fprintf_chk@plt>
   11a88:	mov	r0, r4
   11a8c:	bl	10e5c <exit@plt>
   11a90:	mov	r2, #5
   11a94:	movw	r1, #29732	; 0x7424
   11a98:	movt	r1, #1
   11a9c:	mov	r0, #0
   11aa0:	bl	10d78 <dcgettext@plt>
   11aa4:	movw	r3, #37228	; 0x916c
   11aa8:	movt	r3, #2
   11aac:	ldr	r2, [r3]
   11ab0:	mov	r1, r0
   11ab4:	mov	r0, #1
   11ab8:	bl	10eb0 <__printf_chk@plt>
   11abc:	mov	r2, #5
   11ac0:	movw	r1, #29768	; 0x7448
   11ac4:	movt	r1, #1
   11ac8:	mov	r0, #0
   11acc:	bl	10d78 <dcgettext@plt>
   11ad0:	mov	r2, #10
   11ad4:	mov	r1, r0
   11ad8:	mov	r0, #1
   11adc:	bl	10eb0 <__printf_chk@plt>
   11ae0:	mov	r2, #5
   11ae4:	movw	r1, #29904	; 0x74d0
   11ae8:	movt	r1, #1
   11aec:	mov	r0, #0
   11af0:	bl	10d78 <dcgettext@plt>
   11af4:	movw	r5, #37204	; 0x9154
   11af8:	movt	r5, #2
   11afc:	ldr	r1, [r5]
   11b00:	bl	10cdc <fputs_unlocked@plt>
   11b04:	mov	r2, #5
   11b08:	movw	r1, #29960	; 0x7508
   11b0c:	movt	r1, #1
   11b10:	mov	r0, #0
   11b14:	bl	10d78 <dcgettext@plt>
   11b18:	ldr	r1, [r5]
   11b1c:	bl	10cdc <fputs_unlocked@plt>
   11b20:	mov	r2, #5
   11b24:	movw	r1, #30036	; 0x7554
   11b28:	movt	r1, #1
   11b2c:	mov	r0, #0
   11b30:	bl	10d78 <dcgettext@plt>
   11b34:	mov	r2, #10
   11b38:	mov	r1, r0
   11b3c:	mov	r0, #1
   11b40:	bl	10eb0 <__printf_chk@plt>
   11b44:	mov	r2, #5
   11b48:	movw	r1, #30436	; 0x76e4
   11b4c:	movt	r1, #1
   11b50:	mov	r0, #0
   11b54:	bl	10d78 <dcgettext@plt>
   11b58:	ldr	r1, [r5]
   11b5c:	bl	10cdc <fputs_unlocked@plt>
   11b60:	mov	r2, #5
   11b64:	movw	r1, #30568	; 0x7768
   11b68:	movt	r1, #1
   11b6c:	mov	r0, #0
   11b70:	bl	10d78 <dcgettext@plt>
   11b74:	ldr	r1, [r5]
   11b78:	bl	10cdc <fputs_unlocked@plt>
   11b7c:	mov	r2, #5
   11b80:	movw	r1, #30632	; 0x77a8
   11b84:	movt	r1, #1
   11b88:	mov	r0, #0
   11b8c:	bl	10d78 <dcgettext@plt>
   11b90:	ldr	r1, [r5]
   11b94:	bl	10cdc <fputs_unlocked@plt>
   11b98:	mov	r2, #5
   11b9c:	movw	r1, #30680	; 0x77d8
   11ba0:	movt	r1, #1
   11ba4:	mov	r0, #0
   11ba8:	bl	10d78 <dcgettext@plt>
   11bac:	ldr	r1, [r5]
   11bb0:	bl	10cdc <fputs_unlocked@plt>
   11bb4:	mov	r2, #5
   11bb8:	movw	r1, #30736	; 0x7810
   11bbc:	movt	r1, #1
   11bc0:	mov	r0, #0
   11bc4:	bl	10d78 <dcgettext@plt>
   11bc8:	ldr	r1, [r5]
   11bcc:	bl	10cdc <fputs_unlocked@plt>
   11bd0:	movw	r0, #29236	; 0x7234
   11bd4:	movt	r0, #1
   11bd8:	ldr	r1, [r0]
   11bdc:	ldr	r3, [r0, #4]
   11be0:	str	r1, [sp]
   11be4:	str	r3, [sp, #4]
   11be8:	ldrd	r2, [r0, #8]
   11bec:	strd	r2, [sp, #8]
   11bf0:	ldrd	r2, [r0, #16]
   11bf4:	strd	r2, [sp, #16]
   11bf8:	ldrd	r2, [r0, #24]
   11bfc:	strd	r2, [sp, #24]
   11c00:	ldrd	r2, [r0, #32]
   11c04:	strd	r2, [sp, #32]
   11c08:	ldrd	r2, [r0, #40]	; 0x28
   11c0c:	strd	r2, [sp, #40]	; 0x28
   11c10:	ldrd	r2, [r0, #48]	; 0x30
   11c14:	strd	r2, [sp, #48]	; 0x30
   11c18:	cmp	r1, #0
   11c1c:	moveq	r5, sp
   11c20:	beq	11c4c <__assert_fail@plt+0xcf4>
   11c24:	mov	r5, sp
   11c28:	movw	r6, #29684	; 0x73f4
   11c2c:	movt	r6, #1
   11c30:	mov	r0, r6
   11c34:	bl	10cf4 <strcmp@plt>
   11c38:	cmp	r0, #0
   11c3c:	beq	11c4c <__assert_fail@plt+0xcf4>
   11c40:	ldr	r1, [r5, #8]!
   11c44:	cmp	r1, #0
   11c48:	bne	11c30 <__assert_fail@plt+0xcd8>
   11c4c:	ldr	r5, [r5, #4]
   11c50:	cmp	r5, #0
   11c54:	beq	11db0 <__assert_fail@plt+0xe58>
   11c58:	mov	r2, #5
   11c5c:	movw	r1, #30948	; 0x78e4
   11c60:	movt	r1, #1
   11c64:	mov	r0, #0
   11c68:	bl	10d78 <dcgettext@plt>
   11c6c:	movw	r3, #30972	; 0x78fc
   11c70:	movt	r3, #1
   11c74:	movw	r2, #31012	; 0x7924
   11c78:	movt	r2, #1
   11c7c:	mov	r1, r0
   11c80:	mov	r0, #1
   11c84:	bl	10eb0 <__printf_chk@plt>
   11c88:	mov	r1, #0
   11c8c:	mov	r0, #5
   11c90:	bl	10ef8 <setlocale@plt>
   11c94:	cmp	r0, #0
   11c98:	beq	11cb4 <__assert_fail@plt+0xd5c>
   11c9c:	mov	r2, #3
   11ca0:	movw	r1, #31028	; 0x7934
   11ca4:	movt	r1, #1
   11ca8:	bl	10f34 <strncmp@plt>
   11cac:	cmp	r0, #0
   11cb0:	bne	11d30 <__assert_fail@plt+0xdd8>
   11cb4:	mov	r2, #5
   11cb8:	movw	r1, #31104	; 0x7980
   11cbc:	movt	r1, #1
   11cc0:	mov	r0, #0
   11cc4:	bl	10d78 <dcgettext@plt>
   11cc8:	movw	r6, #29684	; 0x73f4
   11ccc:	movt	r6, #1
   11cd0:	mov	r3, r6
   11cd4:	movw	r2, #30972	; 0x78fc
   11cd8:	movt	r2, #1
   11cdc:	mov	r1, r0
   11ce0:	mov	r0, #1
   11ce4:	bl	10eb0 <__printf_chk@plt>
   11ce8:	mov	r2, #5
   11cec:	movw	r1, #31132	; 0x799c
   11cf0:	movt	r1, #1
   11cf4:	mov	r0, #0
   11cf8:	bl	10d78 <dcgettext@plt>
   11cfc:	mov	r1, r0
   11d00:	movw	r2, #31444	; 0x7ad4
   11d04:	movt	r2, #1
   11d08:	movw	r3, #29764	; 0x7444
   11d0c:	movt	r3, #1
   11d10:	cmp	r5, r6
   11d14:	moveq	r3, r2
   11d18:	mov	r2, r5
   11d1c:	mov	r0, #1
   11d20:	bl	10eb0 <__printf_chk@plt>
   11d24:	b	11a88 <__assert_fail@plt+0xb30>
   11d28:	movw	r5, #29684	; 0x73f4
   11d2c:	movt	r5, #1
   11d30:	mov	r2, #5
   11d34:	movw	r1, #31032	; 0x7938
   11d38:	movt	r1, #1
   11d3c:	mov	r0, #0
   11d40:	bl	10d78 <dcgettext@plt>
   11d44:	movw	r3, #37204	; 0x9154
   11d48:	movt	r3, #2
   11d4c:	ldr	r1, [r3]
   11d50:	bl	10cdc <fputs_unlocked@plt>
   11d54:	b	11cb4 <__assert_fail@plt+0xd5c>
   11d58:	mov	r2, #5
   11d5c:	movw	r1, #31104	; 0x7980
   11d60:	movt	r1, #1
   11d64:	mov	r0, #0
   11d68:	bl	10d78 <dcgettext@plt>
   11d6c:	movw	r5, #29684	; 0x73f4
   11d70:	movt	r5, #1
   11d74:	mov	r3, r5
   11d78:	movw	r2, #30972	; 0x78fc
   11d7c:	movt	r2, #1
   11d80:	mov	r1, r0
   11d84:	mov	r0, #1
   11d88:	bl	10eb0 <__printf_chk@plt>
   11d8c:	mov	r2, #5
   11d90:	movw	r1, #31132	; 0x799c
   11d94:	movt	r1, #1
   11d98:	mov	r0, #0
   11d9c:	bl	10d78 <dcgettext@plt>
   11da0:	mov	r1, r0
   11da4:	movw	r3, #31444	; 0x7ad4
   11da8:	movt	r3, #1
   11dac:	b	11d18 <__assert_fail@plt+0xdc0>
   11db0:	mov	r2, #5
   11db4:	movw	r1, #30948	; 0x78e4
   11db8:	movt	r1, #1
   11dbc:	mov	r0, #0
   11dc0:	bl	10d78 <dcgettext@plt>
   11dc4:	movw	r3, #30972	; 0x78fc
   11dc8:	movt	r3, #1
   11dcc:	movw	r2, #31012	; 0x7924
   11dd0:	movt	r2, #1
   11dd4:	mov	r1, r0
   11dd8:	mov	r0, #1
   11ddc:	bl	10eb0 <__printf_chk@plt>
   11de0:	mov	r1, #0
   11de4:	mov	r0, #5
   11de8:	bl	10ef8 <setlocale@plt>
   11dec:	cmp	r0, #0
   11df0:	beq	11d58 <__assert_fail@plt+0xe00>
   11df4:	mov	r2, #3
   11df8:	movw	r1, #31028	; 0x7934
   11dfc:	movt	r1, #1
   11e00:	bl	10f34 <strncmp@plt>
   11e04:	cmp	r0, #0
   11e08:	bne	11d28 <__assert_fail@plt+0xdd0>
   11e0c:	mov	r2, #5
   11e10:	movw	r1, #31104	; 0x7980
   11e14:	movt	r1, #1
   11e18:	mov	r0, #0
   11e1c:	bl	10d78 <dcgettext@plt>
   11e20:	movw	r5, #29684	; 0x73f4
   11e24:	movt	r5, #1
   11e28:	mov	r3, r5
   11e2c:	movw	r2, #30972	; 0x78fc
   11e30:	movt	r2, #1
   11e34:	mov	r1, r0
   11e38:	mov	r0, #1
   11e3c:	bl	10eb0 <__printf_chk@plt>
   11e40:	mov	r2, #5
   11e44:	movw	r1, #31132	; 0x799c
   11e48:	movt	r1, #1
   11e4c:	mov	r0, #0
   11e50:	bl	10d78 <dcgettext@plt>
   11e54:	mov	r1, r0
   11e58:	movw	r3, #31444	; 0x7ad4
   11e5c:	movt	r3, #1
   11e60:	b	11d18 <__assert_fail@plt+0xdc0>
   11e64:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11e68:	strd	r6, [sp, #8]
   11e6c:	strd	r8, [sp, #16]
   11e70:	strd	sl, [sp, #24]
   11e74:	str	lr, [sp, #32]
   11e78:	sub	sp, sp, #252	; 0xfc
   11e7c:	mov	r8, r0
   11e80:	mov	r6, r1
   11e84:	ldr	r0, [r1]
   11e88:	bl	133b8 <__assert_fail@plt+0x2460>
   11e8c:	movw	r1, #29764	; 0x7444
   11e90:	movt	r1, #1
   11e94:	mov	r0, #6
   11e98:	bl	10ef8 <setlocale@plt>
   11e9c:	movw	r4, #31016	; 0x7928
   11ea0:	movt	r4, #1
   11ea4:	movw	r1, #31188	; 0x79d4
   11ea8:	movt	r1, #1
   11eac:	mov	r0, r4
   11eb0:	bl	10f28 <bindtextdomain@plt>
   11eb4:	mov	r0, r4
   11eb8:	bl	10d90 <textdomain@plt>
   11ebc:	movw	r0, #12352	; 0x3040
   11ec0:	movt	r0, #1
   11ec4:	bl	17210 <__assert_fail@plt+0x62b8>
   11ec8:	movw	r3, #37213	; 0x915d
   11ecc:	movt	r3, #2
   11ed0:	mov	r2, #0
   11ed4:	strb	r2, [r3, #1]
   11ed8:	strb	r2, [r3, #2]
   11edc:	mov	r2, #10
   11ee0:	strb	r2, [r3]
   11ee4:	cmp	r8, #1
   11ee8:	ble	12270 <__assert_fail@plt+0x1318>
   11eec:	ldr	r1, [r6, #4]
   11ef0:	ldrb	r3, [r1]
   11ef4:	cmp	r3, #45	; 0x2d
   11ef8:	beq	11f18 <__assert_fail@plt+0xfc0>
   11efc:	mov	r3, #1
   11f00:	str	r3, [sp, #28]
   11f04:	mov	r2, #10
   11f08:	mov	r3, #0
   11f0c:	strd	r2, [sp, #16]
   11f10:	mov	r5, #0
   11f14:	b	12288 <__assert_fail@plt+0x1330>
   11f18:	ldrb	r3, [r1, #1]
   11f1c:	sub	r3, r3, #48	; 0x30
   11f20:	cmp	r3, #9
   11f24:	bhi	122a4 <__assert_fail@plt+0x134c>
   11f28:	add	r1, r1, #1
   11f2c:	mov	r0, r1
   11f30:	ldrb	r3, [r0, #1]!
   11f34:	sub	r2, r3, #48	; 0x30
   11f38:	cmp	r2, #9
   11f3c:	bls	11f30 <__assert_fail@plt+0xfd8>
   11f40:	cmp	r3, #0
   11f44:	beq	13004 <__assert_fail@plt+0x20ac>
   11f48:	mov	r4, r0
   11f4c:	mov	r9, #0
   11f50:	mov	sl, #10
   11f54:	mov	r7, r9
   11f58:	mov	r2, #1
   11f5c:	str	r2, [sp, #28]
   11f60:	mov	r5, r9
   11f64:	mov	lr, r2
   11f68:	mov	ip, r9
   11f6c:	str	r9, [sp, #16]
   11f70:	mov	fp, #2
   11f74:	b	12004 <__assert_fail@plt+0x10ac>
   11f78:	mov	r7, r3
   11f7c:	str	ip, [sp, #28]
   11f80:	b	11ff8 <__assert_fail@plt+0x10a0>
   11f84:	mov	r5, fp
   11f88:	b	11ff8 <__assert_fail@plt+0x10a0>
   11f8c:	mov	r5, lr
   11f90:	b	11ff8 <__assert_fail@plt+0x10a0>
   11f94:	mov	r9, lr
   11f98:	mov	sl, ip
   11f9c:	b	11ff8 <__assert_fail@plt+0x10a0>
   11fa0:	cmp	r9, #0
   11fa4:	beq	11fb4 <__assert_fail@plt+0x105c>
   11fa8:	movw	r3, #37213	; 0x915d
   11fac:	movt	r3, #2
   11fb0:	strb	sl, [r3]
   11fb4:	mov	r2, #5
   11fb8:	movw	r1, #31212	; 0x79ec
   11fbc:	movt	r1, #1
   11fc0:	mov	r0, #0
   11fc4:	bl	10d78 <dcgettext@plt>
   11fc8:	ldrb	r3, [r4]
   11fcc:	mov	r2, r0
   11fd0:	mov	r1, #0
   11fd4:	mov	r0, r1
   11fd8:	bl	10dfc <error@plt>
   11fdc:	mov	r0, #1
   11fe0:	bl	11a3c <__assert_fail@plt+0xae4>
   11fe4:	mov	r7, ip
   11fe8:	ldr	r3, [sp, #16]
   11fec:	str	r3, [sp, #28]
   11ff0:	b	11ff8 <__assert_fail@plt+0x10a0>
   11ff4:	str	lr, [sp, #28]
   11ff8:	ldrb	r3, [r4, #1]!
   11ffc:	cmp	r3, #0
   12000:	beq	12078 <__assert_fail@plt+0x1120>
   12004:	sub	r2, r3, #98	; 0x62
   12008:	cmp	r2, #24
   1200c:	ldrls	pc, [pc, r2, lsl #2]
   12010:	b	11fa0 <__assert_fail@plt+0x1048>
   12014:	andeq	r1, r1, r8, ror pc
   12018:	andeq	r1, r1, r4, ror #31
   1201c:	andeq	r1, r1, r0, lsr #31
   12020:	andeq	r1, r1, r0, lsr #31
   12024:	andeq	r1, r1, r0, lsr #31
   12028:	andeq	r1, r1, r0, lsr #31
   1202c:	andeq	r1, r1, r0, lsr #31
   12030:	andeq	r1, r1, r0, lsr #31
   12034:	andeq	r1, r1, r0, lsr #31
   12038:	andeq	r1, r1, r8, ror pc
   1203c:	strdeq	r1, [r1], -r4
   12040:	andeq	r1, r1, r8, ror pc
   12044:	andeq	r1, r1, r0, lsr #31
   12048:	andeq	r1, r1, r0, lsr #31
   1204c:	andeq	r1, r1, r0, lsr #31
   12050:	andeq	r1, r1, r4, lsl #31
   12054:	andeq	r1, r1, r0, lsr #31
   12058:	andeq	r1, r1, r0, lsr #31
   1205c:	andeq	r1, r1, r0, lsr #31
   12060:	andeq	r1, r1, r0, lsr #31
   12064:	andeq	r1, r1, ip, lsl #31
   12068:	andeq	r1, r1, r0, lsr #31
   1206c:	andeq	r1, r1, r0, lsr #31
   12070:	andeq	r1, r1, r0, lsr #31
   12074:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12078:	cmp	r9, #0
   1207c:	beq	1208c <__assert_fail@plt+0x1134>
   12080:	movw	r3, #37213	; 0x915d
   12084:	movt	r3, #2
   12088:	strb	sl, [r3]
   1208c:	strb	r7, [r0]
   12090:	cmp	r7, #0
   12094:	movne	r3, #0
   12098:	strbne	r3, [r0, #1]
   1209c:	ldr	r0, [sp, #28]
   120a0:	bl	11054 <__assert_fail@plt+0xfc>
   120a4:	strd	r0, [sp, #16]
   120a8:	ldr	r3, [r6]
   120ac:	str	r3, [r6, #4]!
   120b0:	sub	r8, r8, #1
   120b4:	b	12288 <__assert_fail@plt+0x1330>
   120b8:	cmn	r0, #2
   120bc:	beq	121e0 <__assert_fail@plt+0x1288>
   120c0:	cmp	r0, #99	; 0x63
   120c4:	beq	1215c <__assert_fail@plt+0x1204>
   120c8:	mov	r4, r0
   120cc:	cmn	r0, #3
   120d0:	beq	121e8 <__assert_fail@plt+0x1290>
   120d4:	sub	r3, r4, #48	; 0x30
   120d8:	cmp	r3, #9
   120dc:	bls	12244 <__assert_fail@plt+0x12ec>
   120e0:	mov	r0, #1
   120e4:	bl	11a3c <__assert_fail@plt+0xae4>
   120e8:	cmp	r0, #113	; 0x71
   120ec:	bne	12154 <__assert_fail@plt+0x11fc>
   120f0:	mov	r5, #2
   120f4:	mov	r3, #0
   120f8:	str	r3, [sp]
   120fc:	mov	r3, r9
   12100:	mov	r2, r7
   12104:	mov	r1, r6
   12108:	mov	r0, r8
   1210c:	bl	10e44 <getopt_long@plt>
   12110:	cmn	r0, #1
   12114:	beq	122c8 <__assert_fail@plt+0x1370>
   12118:	cmp	r0, #110	; 0x6e
   1211c:	beq	12194 <__assert_fail@plt+0x123c>
   12120:	ble	120b8 <__assert_fail@plt+0x1160>
   12124:	cmp	r0, #118	; 0x76
   12128:	beq	122c0 <__assert_fail@plt+0x1368>
   1212c:	ble	120e8 <__assert_fail@plt+0x1190>
   12130:	cmp	r0, #122	; 0x7a
   12134:	beq	121cc <__assert_fail@plt+0x1274>
   12138:	cmp	r0, #256	; 0x100
   1213c:	bne	1223c <__assert_fail@plt+0x12e4>
   12140:	movw	r3, #37213	; 0x915d
   12144:	movt	r3, #2
   12148:	mov	r2, #1
   1214c:	strb	r2, [r3, #3]
   12150:	b	120f4 <__assert_fail@plt+0x119c>
   12154:	mov	r4, r0
   12158:	b	120d4 <__assert_fail@plt+0x117c>
   1215c:	ldr	r3, [sl]
   12160:	ldrb	r2, [r3]
   12164:	cmp	r2, #45	; 0x2d
   12168:	moveq	fp, #1
   1216c:	movne	fp, #0
   12170:	addeq	r3, r3, #1
   12174:	streq	r3, [sl]
   12178:	ldr	r1, [sl]
   1217c:	mov	r0, #0
   12180:	bl	11054 <__assert_fail@plt+0xfc>
   12184:	strd	r0, [sp, #16]
   12188:	mov	r3, #0
   1218c:	str	r3, [sp, #28]
   12190:	b	120f4 <__assert_fail@plt+0x119c>
   12194:	ldr	r3, [sl]
   12198:	ldrb	r2, [r3]
   1219c:	cmp	r2, #45	; 0x2d
   121a0:	moveq	fp, #1
   121a4:	movne	fp, #0
   121a8:	addeq	r3, r3, #1
   121ac:	streq	r3, [sl]
   121b0:	ldr	r1, [sl]
   121b4:	mov	r0, #1
   121b8:	bl	11054 <__assert_fail@plt+0xfc>
   121bc:	strd	r0, [sp, #16]
   121c0:	mov	r3, #1
   121c4:	str	r3, [sp, #28]
   121c8:	b	120f4 <__assert_fail@plt+0x119c>
   121cc:	movw	r3, #37213	; 0x915d
   121d0:	movt	r3, #2
   121d4:	mov	r2, #0
   121d8:	strb	r2, [r3]
   121dc:	b	120f4 <__assert_fail@plt+0x119c>
   121e0:	mov	r0, #0
   121e4:	bl	11a3c <__assert_fail@plt+0xae4>
   121e8:	movw	r3, #37112	; 0x90f8
   121ec:	movt	r3, #2
   121f0:	movw	r0, #37204	; 0x9154
   121f4:	movt	r0, #2
   121f8:	mov	r4, #0
   121fc:	str	r4, [sp, #8]
   12200:	movw	r2, #31244	; 0x7a0c
   12204:	movt	r2, #1
   12208:	str	r2, [sp, #4]
   1220c:	movw	r2, #31260	; 0x7a1c
   12210:	movt	r2, #1
   12214:	str	r2, [sp]
   12218:	ldr	r3, [r3]
   1221c:	movw	r2, #31012	; 0x7924
   12220:	movt	r2, #1
   12224:	movw	r1, #29684	; 0x73f4
   12228:	movt	r1, #1
   1222c:	ldr	r0, [r0]
   12230:	bl	15c48 <__assert_fail@plt+0x4cf0>
   12234:	mov	r0, r4
   12238:	bl	10e5c <exit@plt>
   1223c:	mov	r4, r0
   12240:	b	120d4 <__assert_fail@plt+0x117c>
   12244:	mov	r2, #5
   12248:	movw	r1, #31212	; 0x79ec
   1224c:	movt	r1, #1
   12250:	mov	r0, #0
   12254:	bl	10d78 <dcgettext@plt>
   12258:	mov	r3, r4
   1225c:	mov	r2, r0
   12260:	mov	r1, #0
   12264:	mov	r0, r1
   12268:	bl	10dfc <error@plt>
   1226c:	b	120e0 <__assert_fail@plt+0x1188>
   12270:	mov	r3, #1
   12274:	str	r3, [sp, #28]
   12278:	mov	r2, #10
   1227c:	mov	r3, #0
   12280:	strd	r2, [sp, #16]
   12284:	mov	r5, #0
   12288:	mov	fp, #0
   1228c:	ldr	r9, [pc, #3460]	; 13018 <__assert_fail@plt+0x20c0>
   12290:	movw	r7, #31276	; 0x7a2c
   12294:	movt	r7, #1
   12298:	movw	sl, #37208	; 0x9158
   1229c:	movt	sl, #2
   122a0:	b	120f4 <__assert_fail@plt+0x119c>
   122a4:	mov	r3, #1
   122a8:	str	r3, [sp, #28]
   122ac:	mov	r2, #10
   122b0:	mov	r3, #0
   122b4:	strd	r2, [sp, #16]
   122b8:	mov	r5, #0
   122bc:	b	12288 <__assert_fail@plt+0x1330>
   122c0:	mov	r5, #1
   122c4:	b	120f4 <__assert_fail@plt+0x119c>
   122c8:	cmp	r5, #1
   122cc:	beq	122f0 <__assert_fail@plt+0x1398>
   122d0:	cmp	r5, #0
   122d4:	bne	12300 <__assert_fail@plt+0x13a8>
   122d8:	sub	r3, r8, #1
   122dc:	movw	r2, #37192	; 0x9148
   122e0:	movt	r2, #2
   122e4:	ldr	r2, [r2]
   122e8:	cmp	r3, r2
   122ec:	ble	12300 <__assert_fail@plt+0x13a8>
   122f0:	movw	r3, #37213	; 0x915d
   122f4:	movt	r3, #2
   122f8:	mov	r2, #1
   122fc:	strb	r2, [r3, #2]
   12300:	ldr	r3, [sp, #28]
   12304:	eor	r3, r3, #1
   12308:	tst	fp, r3
   1230c:	beq	12320 <__assert_fail@plt+0x13c8>
   12310:	ldrd	r2, [sp, #16]
   12314:	cmp	r2, #0
   12318:	sbcs	r3, r3, #0
   1231c:	blt	12388 <__assert_fail@plt+0x1430>
   12320:	movw	r3, #37192	; 0x9148
   12324:	movt	r3, #2
   12328:	ldr	r3, [r3]
   1232c:	cmp	r3, r8
   12330:	bge	123cc <__assert_fail@plt+0x1474>
   12334:	add	r2, r6, r3, lsl #2
   12338:	ldr	r3, [r6, r3, lsl #2]
   1233c:	mov	lr, r3
   12340:	cmp	r3, #0
   12344:	bne	123dc <__assert_fail@plt+0x1484>
   12348:	mov	r3, #1
   1234c:	str	r3, [sp, #36]	; 0x24
   12350:	movw	r3, #37213	; 0x915d
   12354:	movt	r3, #2
   12358:	ldrb	r3, [r3, #1]
   1235c:	cmp	r3, #0
   12360:	bne	12fdc <__assert_fail@plt+0x2084>
   12364:	ldr	r3, [sp, #36]	; 0x24
   12368:	eor	r0, r3, #1
   1236c:	add	sp, sp, #252	; 0xfc
   12370:	ldrd	r4, [sp]
   12374:	ldrd	r6, [sp, #8]
   12378:	ldrd	r8, [sp, #16]
   1237c:	ldrd	sl, [sp, #24]
   12380:	add	sp, sp, #32
   12384:	pop	{pc}		; (ldr pc, [sp], #4)
   12388:	mov	r2, #5
   1238c:	movw	r1, #29484	; 0x732c
   12390:	movt	r1, #1
   12394:	mov	r0, #0
   12398:	bl	10d78 <dcgettext@plt>
   1239c:	mov	r4, r0
   123a0:	add	r2, sp, #144	; 0x90
   123a4:	ldrd	r0, [sp, #16]
   123a8:	bl	1332c <__assert_fail@plt+0x23d4>
   123ac:	bl	156b4 <__assert_fail@plt+0x475c>
   123b0:	str	r0, [sp]
   123b4:	mov	r3, r4
   123b8:	movw	r2, #31296	; 0x7a40
   123bc:	movt	r2, #1
   123c0:	mov	r1, #75	; 0x4b
   123c4:	mov	r0, #1
   123c8:	bl	10dfc <error@plt>
   123cc:	ldr	r2, [pc, #3144]	; 1301c <__assert_fail@plt+0x20c4>
   123d0:	movw	r3, #31184	; 0x79d0
   123d4:	movt	r3, #1
   123d8:	mov	lr, r3
   123dc:	ldrd	r0, [sp, #16]
   123e0:	str	r0, [sp, #88]	; 0x58
   123e4:	ubfx	r3, r0, #0, #13
   123e8:	str	r3, [sp, #108]	; 0x6c
   123ec:	rsb	r3, r3, #8192	; 0x2000
   123f0:	str	r3, [sp, #112]	; 0x70
   123f4:	add	r3, r3, r0
   123f8:	lsr	r3, r3, #13
   123fc:	str	r3, [sp, #68]	; 0x44
   12400:	add	r3, r3, #1
   12404:	str	r3, [sp, #104]	; 0x68
   12408:	lsr	r3, r3, #1
   1240c:	str	r3, [sp, #92]	; 0x5c
   12410:	str	r2, [sp, #40]	; 0x28
   12414:	mov	r3, #1
   12418:	str	r3, [sp, #36]	; 0x24
   1241c:	movw	r3, #37213	; 0x915d
   12420:	movt	r3, #2
   12424:	str	r3, [sp, #32]
   12428:	adds	r3, r0, #8192	; 0x2000
   1242c:	str	r3, [sp, #72]	; 0x48
   12430:	adc	r3, r1, #0
   12434:	str	r3, [sp, #76]	; 0x4c
   12438:	mov	sl, lr
   1243c:	str	fp, [sp, #64]	; 0x40
   12440:	b	12f04 <__assert_fail@plt+0x1fac>
   12444:	mov	r1, #0
   12448:	mov	r0, sl
   1244c:	bl	10e08 <open64@plt>
   12450:	subs	r3, r0, #0
   12454:	str	r3, [sp, #24]
   12458:	bge	12f44 <__assert_fail@plt+0x1fec>
   1245c:	bl	10e8c <__errno_location@plt>
   12460:	ldr	r4, [r0]
   12464:	mov	r2, #5
   12468:	movw	r1, #31320	; 0x7a58
   1246c:	movt	r1, #1
   12470:	mov	r0, #0
   12474:	bl	10d78 <dcgettext@plt>
   12478:	mov	r5, r0
   1247c:	mov	r1, sl
   12480:	mov	r0, #4
   12484:	bl	153c4 <__assert_fail@plt+0x446c>
   12488:	mov	r3, r0
   1248c:	mov	r2, r5
   12490:	mov	r1, r4
   12494:	mov	r0, #0
   12498:	bl	10dfc <error@plt>
   1249c:	mov	r4, #0
   124a0:	b	12ee4 <__assert_fail@plt+0x1f8c>
   124a4:	movw	r3, #37108	; 0x90f4
   124a8:	movt	r3, #2
   124ac:	ldrb	r0, [r3]
   124b0:	movw	r2, #29764	; 0x7444
   124b4:	movt	r2, #1
   124b8:	movw	r1, #31360	; 0x7a80
   124bc:	movt	r1, #1
   124c0:	mov	r3, sl
   124c4:	cmp	r0, #0
   124c8:	moveq	r2, r1
   124cc:	movw	r1, #31348	; 0x7a74
   124d0:	movt	r1, #1
   124d4:	mov	r0, #1
   124d8:	bl	10eb0 <__printf_chk@plt>
   124dc:	movw	r3, #37108	; 0x90f4
   124e0:	movt	r3, #2
   124e4:	mov	r2, #0
   124e8:	strb	r2, [r3]
   124ec:	b	12f54 <__assert_fail@plt+0x1ffc>
   124f0:	add	r2, sp, #144	; 0x90
   124f4:	ldr	r1, [sp, #24]
   124f8:	mov	r0, #3
   124fc:	bl	10db4 <__fxstat64@plt>
   12500:	cmp	r0, #0
   12504:	bne	1259c <__assert_fail@plt+0x1644>
   12508:	ldr	r3, [sp, #32]
   1250c:	ldrb	r4, [r3, #3]
   12510:	cmp	r4, #0
   12514:	bne	12528 <__assert_fail@plt+0x15d0>
   12518:	ldr	r3, [sp, #160]	; 0xa0
   1251c:	and	r3, r3, #53248	; 0xd000
   12520:	cmp	r3, #32768	; 0x8000
   12524:	beq	125e4 <__assert_fail@plt+0x168c>
   12528:	ldr	r3, [sp, #28]
   1252c:	cmp	r3, #0
   12530:	bne	12674 <__assert_fail@plt+0x171c>
   12534:	mvn	r2, #0
   12538:	mvn	r3, #0
   1253c:	strd	r2, [sp, #56]	; 0x38
   12540:	ldrd	r2, [sp, #56]	; 0x38
   12544:	strd	r2, [sp, #48]	; 0x30
   12548:	mvn	r2, #0
   1254c:	mov	r3, #0
   12550:	ldrd	r0, [sp, #72]	; 0x48
   12554:	cmp	r1, r3
   12558:	cmpeq	r0, r2
   1255c:	bhi	12ae8 <__assert_fail@plt+0x1b90>
   12560:	ldr	r3, [sp, #88]	; 0x58
   12564:	cmp	r3, #1048576	; 0x100000
   12568:	bls	12b20 <__assert_fail@plt+0x1bc8>
   1256c:	mov	r3, #0
   12570:	mov	r5, r3
   12574:	str	r3, [sp, #84]	; 0x54
   12578:	mov	r7, #1
   1257c:	mov	r8, r3
   12580:	mov	r9, r3
   12584:	mov	fp, r3
   12588:	ldr	r3, [sp, #64]	; 0x40
   1258c:	str	r3, [sp, #80]	; 0x50
   12590:	str	sl, [sp, #116]	; 0x74
   12594:	ldr	r6, [sp, #104]	; 0x68
   12598:	b	12d78 <__assert_fail@plt+0x1e20>
   1259c:	bl	10e8c <__errno_location@plt>
   125a0:	ldr	r4, [r0]
   125a4:	mov	r2, #5
   125a8:	movw	r1, #31364	; 0x7a84
   125ac:	movt	r1, #1
   125b0:	mov	r0, #0
   125b4:	bl	10d78 <dcgettext@plt>
   125b8:	mov	r5, r0
   125bc:	mov	r1, sl
   125c0:	mov	r0, #4
   125c4:	bl	153c4 <__assert_fail@plt+0x446c>
   125c8:	mov	r3, r0
   125cc:	mov	r2, r5
   125d0:	mov	r1, r4
   125d4:	mov	r0, #0
   125d8:	bl	10dfc <error@plt>
   125dc:	mov	r4, #0
   125e0:	b	12ed8 <__assert_fail@plt+0x1f80>
   125e4:	str	sl, [sp, #4]
   125e8:	mov	r3, #1
   125ec:	str	r3, [sp]
   125f0:	mov	r2, #0
   125f4:	mov	r3, #0
   125f8:	ldr	r0, [sp, #24]
   125fc:	bl	110c8 <__assert_fail@plt+0x170>
   12600:	mov	r2, r0
   12604:	mov	r3, r1
   12608:	strd	r2, [sp, #56]	; 0x38
   1260c:	cmp	r0, #0
   12610:	sbcs	r3, r3, #0
   12614:	blt	12ed8 <__assert_fail@plt+0x1f80>
   12618:	ldr	r3, [sp, #28]
   1261c:	cmp	r3, #0
   12620:	beq	12a4c <__assert_fail@plt+0x1af4>
   12624:	ldrd	r0, [sp, #192]	; 0xc0
   12628:	ldr	r3, [sp, #32]
   1262c:	ldrb	r3, [r3, #3]
   12630:	cmp	r3, #0
   12634:	bne	12680 <__assert_fail@plt+0x1728>
   12638:	ldr	r2, [sp, #200]	; 0xc8
   1263c:	sub	r3, r2, #1
   12640:	cmp	r3, #536870912	; 0x20000000
   12644:	movcs	r2, #512	; 0x200
   12648:	asr	r3, r2, #31
   1264c:	cmp	r2, r0
   12650:	sbcs	r3, r3, r1
   12654:	bge	12680 <__assert_fail@plt+0x1728>
   12658:	ldrd	r2, [sp, #56]	; 0x38
   1265c:	cmp	r2, r0
   12660:	sbcs	r3, r3, r1
   12664:	movge	r0, #1
   12668:	blt	12a2c <__assert_fail@plt+0x1ad4>
   1266c:	and	r4, r0, #1
   12670:	b	12ed8 <__assert_fail@plt+0x1f80>
   12674:	mvn	r2, #0
   12678:	mvn	r3, #0
   1267c:	strd	r2, [sp, #56]	; 0x38
   12680:	ldrd	r2, [sp, #56]	; 0x38
   12684:	strd	r2, [sp, #48]	; 0x30
   12688:	movw	r0, #8208	; 0x2010
   1268c:	bl	15d20 <__assert_fail@plt+0x4dc8>
   12690:	mov	r9, r0
   12694:	add	r3, r0, #8192	; 0x2000
   12698:	mov	r5, #0
   1269c:	str	r5, [r3, #8]
   126a0:	str	r5, [r3, #4]
   126a4:	str	r5, [r3, #12]
   126a8:	movw	r0, #8208	; 0x2010
   126ac:	bl	15d20 <__assert_fail@plt+0x4dc8>
   126b0:	mov	r8, r0
   126b4:	mov	fp, r9
   126b8:	str	sl, [sp, #80]	; 0x50
   126bc:	b	126dc <__assert_fail@plt+0x1784>
   126c0:	ldrd	r2, [sp, #48]	; 0x30
   126c4:	adds	r2, r2, r0
   126c8:	adc	r3, r3, #0
   126cc:	strd	r2, [sp, #48]	; 0x30
   126d0:	mov	r1, r0
   126d4:	mov	r0, r8
   126d8:	bl	1119c <__assert_fail@plt+0x244>
   126dc:	mov	sl, r8
   126e0:	mov	r2, #8192	; 0x2000
   126e4:	mov	r1, r8
   126e8:	ldr	r0, [sp, #24]
   126ec:	bl	156d4 <__assert_fail@plt+0x477c>
   126f0:	sub	r3, r0, #1
   126f4:	cmn	r3, #3
   126f8:	bhi	12828 <__assert_fail@plt+0x18d0>
   126fc:	ldrd	r2, [sp, #16]
   12700:	orrs	r3, r2, r3
   12704:	beq	126c0 <__assert_fail@plt+0x1768>
   12708:	add	r3, r8, #8192	; 0x2000
   1270c:	str	r0, [r3, #4]
   12710:	mov	r2, #0
   12714:	str	r2, [r3, #8]
   12718:	str	r2, [r3, #12]
   1271c:	add	r7, r8, r0
   12720:	ldr	r3, [sp, #32]
   12724:	ldrb	r6, [r3]
   12728:	strb	r6, [r8, r0]
   1272c:	mov	r0, r8
   12730:	add	r4, r8, #8192	; 0x2000
   12734:	b	12748 <__assert_fail@plt+0x17f0>
   12738:	add	r0, r0, #1
   1273c:	ldr	r3, [r4, #8]
   12740:	add	r3, r3, #1
   12744:	str	r3, [r4, #8]
   12748:	mov	r1, r6
   1274c:	bl	10d9c <rawmemchr@plt>
   12750:	cmp	r7, r0
   12754:	bhi	12738 <__assert_fail@plt+0x17e0>
   12758:	add	r3, r8, #8192	; 0x2000
   1275c:	ldr	r2, [r3, #8]
   12760:	add	r5, r5, r2
   12764:	ldr	r2, [r3, #4]
   12768:	add	r3, fp, #8192	; 0x2000
   1276c:	ldr	r0, [r3, #4]
   12770:	add	r3, r2, r0
   12774:	cmp	r3, #8192	; 0x2000
   12778:	bcc	127dc <__assert_fail@plt+0x1884>
   1277c:	add	fp, fp, #8192	; 0x2000
   12780:	str	r8, [fp, #12]
   12784:	add	r3, r9, #8192	; 0x2000
   12788:	ldr	r2, [r3, #8]
   1278c:	sub	r2, r5, r2
   12790:	mov	r3, #0
   12794:	ldrd	r0, [sp, #16]
   12798:	cmp	r1, r3
   1279c:	cmpeq	r0, r2
   127a0:	bcs	12814 <__assert_fail@plt+0x18bc>
   127a4:	add	r4, r9, #8192	; 0x2000
   127a8:	ldr	r1, [r4, #4]
   127ac:	ldrd	r2, [sp, #48]	; 0x30
   127b0:	adds	r2, r2, r1
   127b4:	adc	r3, r3, #0
   127b8:	strd	r2, [sp, #48]	; 0x30
   127bc:	mov	r0, r9
   127c0:	bl	1119c <__assert_fail@plt+0x244>
   127c4:	ldr	r3, [r4, #8]
   127c8:	sub	r5, r5, r3
   127cc:	mov	fp, r8
   127d0:	mov	r8, r9
   127d4:	ldr	r9, [r4, #12]
   127d8:	b	126dc <__assert_fail@plt+0x1784>
   127dc:	mov	r1, sl
   127e0:	add	r0, fp, r0
   127e4:	bl	10d30 <memcpy@plt>
   127e8:	add	r3, fp, #8192	; 0x2000
   127ec:	add	r1, r8, #8192	; 0x2000
   127f0:	ldr	r2, [r3, #4]
   127f4:	ldr	r0, [r1, #4]
   127f8:	add	r2, r2, r0
   127fc:	str	r2, [r3, #4]
   12800:	ldr	r2, [r3, #8]
   12804:	ldr	r1, [r1, #8]
   12808:	add	r2, r2, r1
   1280c:	str	r2, [r3, #8]
   12810:	b	126dc <__assert_fail@plt+0x1784>
   12814:	movw	r0, #8208	; 0x2010
   12818:	bl	15d20 <__assert_fail@plt+0x4dc8>
   1281c:	mov	fp, r8
   12820:	mov	r8, r0
   12824:	b	126dc <__assert_fail@plt+0x1784>
   12828:	ldr	sl, [sp, #80]	; 0x50
   1282c:	mov	r4, r0
   12830:	mov	r0, r8
   12834:	bl	13150 <__assert_fail@plt+0x21f8>
   12838:	cmn	r4, #1
   1283c:	beq	12930 <__assert_fail@plt+0x19d8>
   12840:	add	r3, fp, #8192	; 0x2000
   12844:	ldr	r3, [r3, #4]
   12848:	cmp	r3, #0
   1284c:	beq	1287c <__assert_fail@plt+0x1924>
   12850:	add	r3, fp, r3
   12854:	ldrb	r2, [r3, #-1]
   12858:	ldr	r3, [sp, #32]
   1285c:	ldrb	r3, [r3]
   12860:	cmp	r2, r3
   12864:	beq	1287c <__assert_fail@plt+0x1924>
   12868:	add	fp, fp, #8192	; 0x2000
   1286c:	ldr	r3, [fp, #8]
   12870:	add	r3, r3, #1
   12874:	str	r3, [fp, #8]
   12878:	add	r5, r5, #1
   1287c:	add	r3, r9, #8192	; 0x2000
   12880:	ldr	r2, [r3, #8]
   12884:	sub	r2, r5, r2
   12888:	mov	r3, #0
   1288c:	ldrd	r0, [sp, #16]
   12890:	cmp	r1, r3
   12894:	cmpeq	r0, r2
   12898:	movcc	r0, r9
   1289c:	ldrdcc	r6, [sp, #48]	; 0x30
   128a0:	movcc	r4, r9
   128a4:	ldrdcc	r8, [sp, #16]
   128a8:	bcs	12978 <__assert_fail@plt+0x1a20>
   128ac:	add	fp, r0, #8192	; 0x2000
   128b0:	ldr	r1, [fp, #4]
   128b4:	adds	r6, r6, r1
   128b8:	adc	r7, r7, #0
   128bc:	bl	1119c <__assert_fail@plt+0x244>
   128c0:	ldr	r3, [fp, #8]
   128c4:	sub	r5, r5, r3
   128c8:	ldr	r0, [fp, #12]
   128cc:	add	r3, r0, #8192	; 0x2000
   128d0:	ldr	r2, [r3, #8]
   128d4:	sub	r2, r5, r2
   128d8:	mov	r3, #0
   128dc:	cmp	r9, r3
   128e0:	cmpeq	r8, r2
   128e4:	bcc	128ac <__assert_fail@plt+0x1954>
   128e8:	strd	r6, [sp, #48]	; 0x30
   128ec:	mov	r9, r4
   128f0:	mov	r3, #0
   128f4:	ldrd	r6, [sp, #16]
   128f8:	cmp	r7, r3
   128fc:	cmpeq	r6, r5
   12900:	ldrcs	r4, [sp, #64]	; 0x40
   12904:	bcs	129d0 <__assert_fail@plt+0x1a78>
   12908:	ldr	r3, [sp, #88]	; 0x58
   1290c:	sub	r5, r5, r3
   12910:	mov	r8, r0
   12914:	add	r3, r0, #8192	; 0x2000
   12918:	ldr	r6, [r3, #4]
   1291c:	add	r6, r0, r6
   12920:	ldr	r3, [sp, #32]
   12924:	ldrb	r7, [r3]
   12928:	add	r4, r0, #8192	; 0x2000
   1292c:	b	12994 <__assert_fail@plt+0x1a3c>
   12930:	bl	10e8c <__errno_location@plt>
   12934:	ldr	r4, [r0]
   12938:	mov	r2, #5
   1293c:	movw	r1, #29632	; 0x73c0
   12940:	movt	r1, #1
   12944:	mov	r0, #0
   12948:	bl	10d78 <dcgettext@plt>
   1294c:	mov	r5, r0
   12950:	mov	r1, sl
   12954:	mov	r0, #4
   12958:	bl	153c4 <__assert_fail@plt+0x446c>
   1295c:	mov	r3, r0
   12960:	mov	r2, r5
   12964:	mov	r1, r4
   12968:	mov	r0, #0
   1296c:	bl	10dfc <error@plt>
   12970:	mov	r4, #0
   12974:	b	129d0 <__assert_fail@plt+0x1a78>
   12978:	mov	r0, r9
   1297c:	b	128f0 <__assert_fail@plt+0x1998>
   12980:	add	r0, r0, #1
   12984:	ldr	r3, [r4, #8]
   12988:	add	r3, r3, #1
   1298c:	str	r3, [r4, #8]
   12990:	sub	r5, r5, #1
   12994:	cmp	r5, #0
   12998:	beq	129b0 <__assert_fail@plt+0x1a58>
   1299c:	sub	r2, r6, r0
   129a0:	mov	r1, r7
   129a4:	bl	10ed4 <memchr@plt>
   129a8:	cmp	r0, #0
   129ac:	bne	12980 <__assert_fail@plt+0x1a28>
   129b0:	sub	r1, r0, r8
   129b4:	ldrd	r2, [sp, #48]	; 0x30
   129b8:	adds	r2, r2, r1
   129bc:	adc	r3, r3, r1, asr #31
   129c0:	strd	r2, [sp, #48]	; 0x30
   129c4:	mov	r0, r8
   129c8:	bl	1119c <__assert_fail@plt+0x244>
   129cc:	ldr	r4, [sp, #64]	; 0x40
   129d0:	cmp	r9, #0
   129d4:	movne	r0, r9
   129d8:	beq	129f4 <__assert_fail@plt+0x1a9c>
   129dc:	add	r3, r0, #8192	; 0x2000
   129e0:	ldr	r5, [r3, #12]
   129e4:	bl	13150 <__assert_fail@plt+0x21f8>
   129e8:	mov	r0, r5
   129ec:	cmp	r5, #0
   129f0:	bne	129dc <__assert_fail@plt+0x1a84>
   129f4:	ldrd	r2, [sp, #56]	; 0x38
   129f8:	cmp	r2, #0
   129fc:	sbcs	r3, r3, #0
   12a00:	blt	12ed8 <__assert_fail@plt+0x1f80>
   12a04:	str	sl, [sp, #4]
   12a08:	mov	r3, #0
   12a0c:	str	r3, [sp]
   12a10:	ldrd	r2, [sp, #48]	; 0x30
   12a14:	ldr	r0, [sp, #24]
   12a18:	bl	110c8 <__assert_fail@plt+0x170>
   12a1c:	cmp	r0, #0
   12a20:	sbcs	r3, r1, #0
   12a24:	movlt	r4, #0
   12a28:	b	12ed8 <__assert_fail@plt+0x1f80>
   12a2c:	strd	r0, [sp, #8]
   12a30:	ldrd	r2, [sp, #56]	; 0x38
   12a34:	strd	r2, [sp]
   12a38:	ldrd	r2, [sp, #16]
   12a3c:	ldr	r1, [sp, #24]
   12a40:	mov	r0, sl
   12a44:	bl	11660 <__assert_fail@plt+0x708>
   12a48:	b	1266c <__assert_fail@plt+0x1714>
   12a4c:	ldr	r3, [sp, #32]
   12a50:	ldrb	r4, [r3, #3]
   12a54:	ldr	r3, [sp, #60]	; 0x3c
   12a58:	orrs	r4, r4, r3, lsr #31
   12a5c:	bne	12540 <__assert_fail@plt+0x15e8>
   12a60:	ldr	r2, [sp, #200]	; 0xc8
   12a64:	sub	r3, r2, #1
   12a68:	cmp	r3, #536870912	; 0x20000000
   12a6c:	movcs	r2, #512	; 0x200
   12a70:	ldrd	r0, [sp, #192]	; 0xc0
   12a74:	asr	r3, r2, #31
   12a78:	cmp	r2, r0
   12a7c:	sbcs	r3, r3, r1
   12a80:	bge	12540 <__assert_fail@plt+0x15e8>
   12a84:	ldrd	r2, [sp, #56]	; 0x38
   12a88:	subs	ip, r0, r2
   12a8c:	str	ip, [sp, #96]	; 0x60
   12a90:	sbc	r3, r1, r3
   12a94:	str	r3, [sp, #100]	; 0x64
   12a98:	ldrd	r2, [sp, #96]	; 0x60
   12a9c:	cmp	r2, #0
   12aa0:	sbcs	r3, r3, #0
   12aa4:	blt	12eb4 <__assert_fail@plt+0x1f5c>
   12aa8:	ldrd	r0, [sp, #16]
   12aac:	ldrd	r6, [sp, #96]	; 0x60
   12ab0:	cmp	r1, r7
   12ab4:	cmpeq	r0, r6
   12ab8:	ldrcs	r4, [sp, #64]	; 0x40
   12abc:	bcs	12ed8 <__assert_fail@plt+0x1f80>
   12ac0:	subs	r2, r6, r0
   12ac4:	sbc	r3, r7, r1
   12ac8:	ldr	r0, [sp, #24]
   12acc:	bl	11234 <__assert_fail@plt+0x2dc>
   12ad0:	cmp	r0, #0
   12ad4:	ldreq	r4, [sp, #64]	; 0x40
   12ad8:	beq	12ed8 <__assert_fail@plt+0x1f80>
   12adc:	mov	r1, sl
   12ae0:	bl	115a4 <__assert_fail@plt+0x64c>
   12ae4:	b	12ed8 <__assert_fail@plt+0x1f80>
   12ae8:	mov	r2, #5
   12aec:	movw	r1, #31380	; 0x7a94
   12af0:	movt	r1, #1
   12af4:	mov	r0, #0
   12af8:	bl	10d78 <dcgettext@plt>
   12afc:	mov	r4, r0
   12b00:	add	r2, sp, #120	; 0x78
   12b04:	ldrd	r0, [sp, #16]
   12b08:	bl	1332c <__assert_fail@plt+0x23d4>
   12b0c:	mov	r3, r0
   12b10:	mov	r2, r4
   12b14:	mov	r1, #0
   12b18:	mov	r0, #1
   12b1c:	bl	10dfc <error@plt>
   12b20:	mov	r4, r3
   12b24:	add	r9, r3, #8192	; 0x2000
   12b28:	mov	r1, r9
   12b2c:	mov	r0, #2
   12b30:	bl	15ea0 <__assert_fail@plt+0x4f48>
   12b34:	mov	fp, r0
   12b38:	str	r0, [sp, #120]	; 0x78
   12b3c:	add	r3, r0, r9
   12b40:	str	r3, [sp, #124]	; 0x7c
   12b44:	ldr	r7, [sp, #64]	; 0x40
   12b48:	mov	r6, #0
   12b4c:	str	sl, [sp, #80]	; 0x50
   12b50:	mov	sl, r4
   12b54:	b	12bc0 <__assert_fail@plt+0x1c68>
   12b58:	ldr	sl, [sp, #80]	; 0x50
   12b5c:	mov	r2, #5
   12b60:	movw	r1, #29632	; 0x73c0
   12b64:	movt	r1, #1
   12b68:	mov	r0, #0
   12b6c:	bl	10d78 <dcgettext@plt>
   12b70:	mov	r5, r0
   12b74:	mov	r1, sl
   12b78:	mov	r0, #4
   12b7c:	bl	153c4 <__assert_fail@plt+0x446c>
   12b80:	mov	r3, r0
   12b84:	mov	r2, r5
   12b88:	mov	r1, r4
   12b8c:	mov	r0, #0
   12b90:	bl	10dfc <error@plt>
   12b94:	mov	r4, #0
   12b98:	b	12c70 <__assert_fail@plt+0x1d18>
   12b9c:	mov	r4, #0
   12ba0:	cmp	r7, #0
   12ba4:	beq	12c18 <__assert_fail@plt+0x1cc0>
   12ba8:	cmp	sl, r5
   12bac:	bcc	12c4c <__assert_fail@plt+0x1cf4>
   12bb0:	eor	r6, r6, #1
   12bb4:	mov	r7, r4
   12bb8:	cmp	r4, #0
   12bbc:	bne	12c6c <__assert_fail@plt+0x1d14>
   12bc0:	add	r3, sp, #248	; 0xf8
   12bc4:	add	r3, r3, r6, lsl #2
   12bc8:	ldr	r8, [r3, #-128]	; 0xffffff80
   12bcc:	mov	r2, r9
   12bd0:	mov	r1, r8
   12bd4:	ldr	r0, [sp, #24]
   12bd8:	bl	131b0 <__assert_fail@plt+0x2258>
   12bdc:	mov	r5, r0
   12be0:	cmp	r9, r0
   12be4:	bls	12b9c <__assert_fail@plt+0x1c44>
   12be8:	bl	10e8c <__errno_location@plt>
   12bec:	ldr	r4, [r0]
   12bf0:	cmp	r4, #0
   12bf4:	bne	12b58 <__assert_fail@plt+0x1c00>
   12bf8:	cmp	sl, r5
   12bfc:	movcs	r4, r7
   12c00:	orrcc	r4, r7, #1
   12c04:	ands	r4, r4, #255	; 0xff
   12c08:	subeq	r1, sl, r5
   12c0c:	ldreq	r4, [sp, #64]	; 0x40
   12c10:	bne	12ba0 <__assert_fail@plt+0x1c48>
   12c14:	b	12c1c <__assert_fail@plt+0x1cc4>
   12c18:	mov	r1, #0
   12c1c:	sub	r1, sl, r1
   12c20:	ldrd	r2, [sp, #48]	; 0x30
   12c24:	adds	r2, r2, r1
   12c28:	adc	r3, r3, #0
   12c2c:	strd	r2, [sp, #48]	; 0x30
   12c30:	eor	r3, r6, #1
   12c34:	add	r2, sp, #248	; 0xf8
   12c38:	add	r3, r2, r3, lsl #2
   12c3c:	ldr	r0, [r3, #-128]	; 0xffffff80
   12c40:	add	r0, r0, #8192	; 0x2000
   12c44:	bl	1119c <__assert_fail@plt+0x244>
   12c48:	b	12ba8 <__assert_fail@plt+0x1c50>
   12c4c:	sub	r1, r5, sl
   12c50:	ldrd	r2, [sp, #48]	; 0x30
   12c54:	adds	r2, r2, r1
   12c58:	adc	r3, r3, #0
   12c5c:	strd	r2, [sp, #48]	; 0x30
   12c60:	mov	r0, r8
   12c64:	bl	1119c <__assert_fail@plt+0x244>
   12c68:	b	12bb0 <__assert_fail@plt+0x1c58>
   12c6c:	ldr	sl, [sp, #80]	; 0x50
   12c70:	mov	r0, fp
   12c74:	bl	13150 <__assert_fail@plt+0x21f8>
   12c78:	b	12e7c <__assert_fail@plt+0x1f24>
   12c7c:	cmp	fp, #0
   12c80:	bne	12ca8 <__assert_fail@plt+0x1d50>
   12c84:	cmp	r6, #16
   12c88:	movcc	fp, r6
   12c8c:	movcs	fp, #16
   12c90:	mov	r2, #4
   12c94:	mov	r1, fp
   12c98:	mov	r0, r9
   12c9c:	bl	15df8 <__assert_fail@plt+0x4ea0>
   12ca0:	mov	r9, r0
   12ca4:	b	12d80 <__assert_fail@plt+0x1e28>
   12ca8:	ldr	r3, [sp, #92]	; 0x5c
   12cac:	cmp	r3, fp
   12cb0:	lslcs	fp, fp, #1
   12cb4:	movcc	fp, r6
   12cb8:	b	12c90 <__assert_fail@plt+0x1d38>
   12cbc:	mov	r0, #8192	; 0x2000
   12cc0:	bl	15d20 <__assert_fail@plt+0x4dc8>
   12cc4:	str	r0, [r9, r5, lsl #2]
   12cc8:	add	r3, r5, #1
   12ccc:	str	r3, [sp, #84]	; 0x54
   12cd0:	b	12d88 <__assert_fail@plt+0x1e30>
   12cd4:	ldr	sl, [sp, #116]	; 0x74
   12cd8:	mov	r2, #5
   12cdc:	movw	r1, #29632	; 0x73c0
   12ce0:	movt	r1, #1
   12ce4:	mov	r0, #0
   12ce8:	bl	10d78 <dcgettext@plt>
   12cec:	mov	r5, r0
   12cf0:	mov	r1, sl
   12cf4:	mov	r0, #4
   12cf8:	bl	153c4 <__assert_fail@plt+0x446c>
   12cfc:	mov	r3, r0
   12d00:	mov	r2, r5
   12d04:	mov	r1, r4
   12d08:	mov	r0, #0
   12d0c:	bl	10dfc <error@plt>
   12d10:	mov	r4, #0
   12d14:	mov	r5, r9
   12d18:	ldr	r3, [sp, #84]	; 0x54
   12d1c:	add	r6, r9, r3, lsl #2
   12d20:	b	12e6c <__assert_fail@plt+0x1f14>
   12d24:	mov	r4, #0
   12d28:	ldr	r3, [sp, #68]	; 0x44
   12d2c:	cmp	r3, r5
   12d30:	beq	12d3c <__assert_fail@plt+0x1de4>
   12d34:	cmp	r8, #0
   12d38:	beq	12d5c <__assert_fail@plt+0x1e04>
   12d3c:	ldrd	r2, [sp, #48]	; 0x30
   12d40:	adds	r2, r2, sl
   12d44:	adc	r3, r3, #0
   12d48:	strd	r2, [sp, #48]	; 0x30
   12d4c:	mov	r1, sl
   12d50:	ldr	r0, [r9, r7, lsl #2]
   12d54:	bl	1119c <__assert_fail@plt+0x244>
   12d58:	ldr	r8, [sp, #80]	; 0x50
   12d5c:	add	r2, r7, #1
   12d60:	udiv	r3, r2, r6
   12d64:	mls	r3, r6, r3, r2
   12d68:	mov	r5, r7
   12d6c:	cmp	r4, #0
   12d70:	bne	12dbc <__assert_fail@plt+0x1e64>
   12d74:	mov	r7, r3
   12d78:	cmp	r5, fp
   12d7c:	beq	12c7c <__assert_fail@plt+0x1d24>
   12d80:	cmp	r8, #0
   12d84:	beq	12cbc <__assert_fail@plt+0x1d64>
   12d88:	mov	r2, #8192	; 0x2000
   12d8c:	ldr	r1, [r9, r5, lsl #2]
   12d90:	ldr	r0, [sp, #24]
   12d94:	bl	131b0 <__assert_fail@plt+0x2258>
   12d98:	mov	sl, r0
   12d9c:	cmp	r0, #8192	; 0x2000
   12da0:	bcs	12d24 <__assert_fail@plt+0x1dcc>
   12da4:	bl	10e8c <__errno_location@plt>
   12da8:	ldr	r4, [r0]
   12dac:	cmp	r4, #0
   12db0:	bne	12cd4 <__assert_fail@plt+0x1d7c>
   12db4:	ldr	r4, [sp, #64]	; 0x40
   12db8:	b	12d28 <__assert_fail@plt+0x1dd0>
   12dbc:	mov	ip, sl
   12dc0:	ldr	sl, [sp, #116]	; 0x74
   12dc4:	mov	r6, r3
   12dc8:	cmp	r8, #0
   12dcc:	beq	12e34 <__assert_fail@plt+0x1edc>
   12dd0:	rsb	r1, ip, #8192	; 0x2000
   12dd4:	ldrd	r2, [sp, #48]	; 0x30
   12dd8:	ldr	r0, [sp, #112]	; 0x70
   12ddc:	adds	r2, r2, r0
   12de0:	adc	r3, r3, #0
   12de4:	strd	r2, [sp, #48]	; 0x30
   12de8:	mov	r3, r0
   12dec:	cmp	r0, r1
   12df0:	bcs	12e0c <__assert_fail@plt+0x1eb4>
   12df4:	ldr	r0, [r9, r7, lsl #2]
   12df8:	mov	r1, r3
   12dfc:	add	r0, r0, ip
   12e00:	bl	1119c <__assert_fail@plt+0x244>
   12e04:	mov	r4, r8
   12e08:	b	12d14 <__assert_fail@plt+0x1dbc>
   12e0c:	ldr	r0, [r9, r7, lsl #2]
   12e10:	mov	r4, ip
   12e14:	add	r0, r0, ip
   12e18:	bl	1119c <__assert_fail@plt+0x244>
   12e1c:	ldr	r2, [sp, #108]	; 0x6c
   12e20:	sub	r1, r4, r2
   12e24:	ldr	r0, [r9, r6, lsl #2]
   12e28:	bl	1119c <__assert_fail@plt+0x244>
   12e2c:	mov	r4, r8
   12e30:	b	12d14 <__assert_fail@plt+0x1dbc>
   12e34:	ldr	r3, [sp, #68]	; 0x44
   12e38:	cmp	r3, r7
   12e3c:	bne	12d14 <__assert_fail@plt+0x1dbc>
   12e40:	ldr	r2, [sp, #108]	; 0x6c
   12e44:	sub	r1, ip, r2
   12e48:	ldrd	r2, [sp, #48]	; 0x30
   12e4c:	adds	r2, r2, r1
   12e50:	adc	r3, r3, #0
   12e54:	strd	r2, [sp, #48]	; 0x30
   12e58:	ldr	r0, [r9, r6, lsl #2]
   12e5c:	bl	1119c <__assert_fail@plt+0x244>
   12e60:	b	12d14 <__assert_fail@plt+0x1dbc>
   12e64:	ldr	r0, [r5], #4
   12e68:	bl	13150 <__assert_fail@plt+0x21f8>
   12e6c:	cmp	r5, r6
   12e70:	bne	12e64 <__assert_fail@plt+0x1f0c>
   12e74:	mov	r0, r9
   12e78:	bl	13150 <__assert_fail@plt+0x21f8>
   12e7c:	ldrd	r2, [sp, #56]	; 0x38
   12e80:	cmp	r2, #0
   12e84:	sbcs	r3, r3, #0
   12e88:	blt	12ed8 <__assert_fail@plt+0x1f80>
   12e8c:	str	sl, [sp, #4]
   12e90:	mov	r3, #0
   12e94:	str	r3, [sp]
   12e98:	ldrd	r2, [sp, #48]	; 0x30
   12e9c:	ldr	r0, [sp, #24]
   12ea0:	bl	110c8 <__assert_fail@plt+0x170>
   12ea4:	cmp	r0, #0
   12ea8:	sbcs	r3, r1, #0
   12eac:	movlt	r4, #0
   12eb0:	b	12ed8 <__assert_fail@plt+0x1f80>
   12eb4:	mov	r2, #0
   12eb8:	mov	r3, #0
   12ebc:	strd	r2, [sp, #96]	; 0x60
   12ec0:	b	12aa8 <__assert_fail@plt+0x1b50>
   12ec4:	ldrd	r2, [sp, #16]
   12ec8:	ldr	r1, [sp, #24]
   12ecc:	mov	r0, sl
   12ed0:	bl	114a8 <__assert_fail@plt+0x550>
   12ed4:	mov	r4, r0
   12ed8:	ldr	r3, [sp, #44]	; 0x2c
   12edc:	cmp	r3, #0
   12ee0:	bne	12f84 <__assert_fail@plt+0x202c>
   12ee4:	ldr	r3, [sp, #36]	; 0x24
   12ee8:	and	r3, r3, r4
   12eec:	str	r3, [sp, #36]	; 0x24
   12ef0:	ldr	r3, [sp, #40]	; 0x28
   12ef4:	ldr	sl, [r3, #4]!
   12ef8:	str	r3, [sp, #40]	; 0x28
   12efc:	cmp	sl, #0
   12f00:	beq	12350 <__assert_fail@plt+0x13f8>
   12f04:	movw	r1, #31184	; 0x79d0
   12f08:	movt	r1, #1
   12f0c:	mov	r0, sl
   12f10:	bl	10cf4 <strcmp@plt>
   12f14:	subs	r4, r0, #0
   12f18:	str	r4, [sp, #44]	; 0x2c
   12f1c:	bne	12444 <__assert_fail@plt+0x14ec>
   12f20:	mov	r3, #1
   12f24:	ldr	r2, [sp, #32]
   12f28:	strb	r3, [r2, #1]
   12f2c:	mov	r2, #5
   12f30:	movw	r1, #31304	; 0x7a48
   12f34:	movt	r1, #1
   12f38:	bl	10d78 <dcgettext@plt>
   12f3c:	mov	sl, r0
   12f40:	str	r4, [sp, #24]
   12f44:	ldr	r3, [sp, #32]
   12f48:	ldrb	r3, [r3, #2]
   12f4c:	cmp	r3, #0
   12f50:	bne	124a4 <__assert_fail@plt+0x154c>
   12f54:	ldr	r3, [sp, #64]	; 0x40
   12f58:	cmp	r3, #0
   12f5c:	bne	124f0 <__assert_fail@plt+0x1598>
   12f60:	ldr	r3, [sp, #28]
   12f64:	cmp	r3, #0
   12f68:	beq	12ec4 <__assert_fail@plt+0x1f6c>
   12f6c:	ldrd	r2, [sp, #16]
   12f70:	ldr	r1, [sp, #24]
   12f74:	mov	r0, sl
   12f78:	bl	112f0 <__assert_fail@plt+0x398>
   12f7c:	mov	r4, r0
   12f80:	b	12ed8 <__assert_fail@plt+0x1f80>
   12f84:	ldr	r0, [sp, #24]
   12f88:	bl	10f4c <close@plt>
   12f8c:	cmp	r0, #0
   12f90:	beq	12ee4 <__assert_fail@plt+0x1f8c>
   12f94:	bl	10e8c <__errno_location@plt>
   12f98:	ldr	r4, [r0]
   12f9c:	mov	r2, #5
   12fa0:	movw	r1, #31416	; 0x7ab8
   12fa4:	movt	r1, #1
   12fa8:	mov	r0, #0
   12fac:	bl	10d78 <dcgettext@plt>
   12fb0:	mov	r5, r0
   12fb4:	mov	r1, sl
   12fb8:	mov	r0, #4
   12fbc:	bl	153c4 <__assert_fail@plt+0x446c>
   12fc0:	mov	r3, r0
   12fc4:	mov	r2, r5
   12fc8:	mov	r1, r4
   12fcc:	mov	r0, #0
   12fd0:	bl	10dfc <error@plt>
   12fd4:	mov	r4, #0
   12fd8:	b	12ee4 <__assert_fail@plt+0x1f8c>
   12fdc:	mov	r0, #0
   12fe0:	bl	10f4c <close@plt>
   12fe4:	cmp	r0, #0
   12fe8:	bge	12364 <__assert_fail@plt+0x140c>
   12fec:	bl	10e8c <__errno_location@plt>
   12ff0:	movw	r2, #31184	; 0x79d0
   12ff4:	movt	r2, #1
   12ff8:	ldr	r1, [r0]
   12ffc:	mov	r0, #1
   13000:	bl	10dfc <error@plt>
   13004:	mov	r5, #0
   13008:	strb	r5, [r0]
   1300c:	mov	r3, #1
   13010:	str	r3, [sp, #28]
   13014:	b	1209c <__assert_fail@plt+0x1144>
   13018:	andeq	r7, r1, r4, ror r2
   1301c:	andeq	r7, r1, ip, ror #4
   13020:	movw	r3, #37220	; 0x9164
   13024:	movt	r3, #2
   13028:	str	r0, [r3]
   1302c:	bx	lr
   13030:	movw	r3, #37220	; 0x9164
   13034:	movt	r3, #2
   13038:	strb	r0, [r3, #4]
   1303c:	bx	lr
   13040:	strd	r4, [sp, #-16]!
   13044:	str	r6, [sp, #8]
   13048:	str	lr, [sp, #12]
   1304c:	sub	sp, sp, #8
   13050:	movw	r3, #37204	; 0x9154
   13054:	movt	r3, #2
   13058:	ldr	r0, [r3]
   1305c:	bl	16ae0 <__assert_fail@plt+0x5b88>
   13060:	cmp	r0, #0
   13064:	beq	1308c <__assert_fail@plt+0x2134>
   13068:	movw	r3, #37220	; 0x9164
   1306c:	movt	r3, #2
   13070:	ldrb	r3, [r3, #4]
   13074:	cmp	r3, #0
   13078:	beq	130b8 <__assert_fail@plt+0x2160>
   1307c:	bl	10e8c <__errno_location@plt>
   13080:	ldr	r3, [r0]
   13084:	cmp	r3, #32
   13088:	bne	130b8 <__assert_fail@plt+0x2160>
   1308c:	movw	r3, #37200	; 0x9150
   13090:	movt	r3, #2
   13094:	ldr	r0, [r3]
   13098:	bl	16ae0 <__assert_fail@plt+0x5b88>
   1309c:	cmp	r0, #0
   130a0:	bne	13140 <__assert_fail@plt+0x21e8>
   130a4:	add	sp, sp, #8
   130a8:	ldrd	r4, [sp]
   130ac:	ldr	r6, [sp, #8]
   130b0:	add	sp, sp, #12
   130b4:	pop	{pc}		; (ldr pc, [sp], #4)
   130b8:	mov	r2, #5
   130bc:	movw	r1, #31652	; 0x7ba4
   130c0:	movt	r1, #1
   130c4:	mov	r0, #0
   130c8:	bl	10d78 <dcgettext@plt>
   130cc:	mov	r4, r0
   130d0:	movw	r3, #37220	; 0x9164
   130d4:	movt	r3, #2
   130d8:	ldr	r5, [r3]
   130dc:	cmp	r5, #0
   130e0:	beq	13120 <__assert_fail@plt+0x21c8>
   130e4:	bl	10e8c <__errno_location@plt>
   130e8:	ldr	r6, [r0]
   130ec:	mov	r0, r5
   130f0:	bl	154b0 <__assert_fail@plt+0x4558>
   130f4:	str	r4, [sp]
   130f8:	mov	r3, r0
   130fc:	movw	r2, #31296	; 0x7a40
   13100:	movt	r2, #1
   13104:	mov	r1, r6
   13108:	mov	r0, #0
   1310c:	bl	10dfc <error@plt>
   13110:	movw	r3, #37116	; 0x90fc
   13114:	movt	r3, #2
   13118:	ldr	r0, [r3]
   1311c:	bl	10d24 <_exit@plt>
   13120:	bl	10e8c <__errno_location@plt>
   13124:	mov	r3, r4
   13128:	movw	r2, #31300	; 0x7a44
   1312c:	movt	r2, #1
   13130:	ldr	r1, [r0]
   13134:	mov	r0, #0
   13138:	bl	10dfc <error@plt>
   1313c:	b	13110 <__assert_fail@plt+0x21b8>
   13140:	movw	r3, #37116	; 0x90fc
   13144:	movt	r3, #2
   13148:	ldr	r0, [r3]
   1314c:	bl	10d24 <_exit@plt>
   13150:	strd	r4, [sp, #-12]!
   13154:	str	lr, [sp, #8]
   13158:	sub	sp, sp, #12
   1315c:	mov	r5, r0
   13160:	bl	10e8c <__errno_location@plt>
   13164:	mov	r4, r0
   13168:	ldr	r3, [r0]
   1316c:	str	r3, [sp]
   13170:	str	r3, [sp, #4]
   13174:	mov	r3, #0
   13178:	str	r3, [r0]
   1317c:	mov	r0, r5
   13180:	bl	10d18 <free@plt>
   13184:	ldr	r3, [r4]
   13188:	clz	r3, r3
   1318c:	lsr	r3, r3, #5
   13190:	add	r2, sp, #8
   13194:	add	r3, r2, r3, lsl #2
   13198:	ldr	r3, [r3, #-8]
   1319c:	str	r3, [r4]
   131a0:	add	sp, sp, #12
   131a4:	ldrd	r4, [sp]
   131a8:	add	sp, sp, #8
   131ac:	pop	{pc}		; (ldr pc, [sp], #4)
   131b0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   131b4:	strd	r6, [sp, #8]
   131b8:	str	r8, [sp, #16]
   131bc:	str	lr, [sp, #20]
   131c0:	subs	r4, r2, #0
   131c4:	beq	1322c <__assert_fail@plt+0x22d4>
   131c8:	mov	r7, r0
   131cc:	mov	r5, r1
   131d0:	mov	r6, #0
   131d4:	mov	r2, r4
   131d8:	mov	r1, r5
   131dc:	mov	r0, r7
   131e0:	bl	156d4 <__assert_fail@plt+0x477c>
   131e4:	cmn	r0, #1
   131e8:	beq	13214 <__assert_fail@plt+0x22bc>
   131ec:	cmp	r0, #0
   131f0:	beq	13208 <__assert_fail@plt+0x22b0>
   131f4:	add	r6, r6, r0
   131f8:	add	r5, r5, r0
   131fc:	subs	r4, r4, r0
   13200:	bne	131d4 <__assert_fail@plt+0x227c>
   13204:	b	13214 <__assert_fail@plt+0x22bc>
   13208:	bl	10e8c <__errno_location@plt>
   1320c:	mov	r3, #0
   13210:	str	r3, [r0]
   13214:	mov	r0, r6
   13218:	ldrd	r4, [sp]
   1321c:	ldrd	r6, [sp, #8]
   13220:	ldr	r8, [sp, #16]
   13224:	add	sp, sp, #20
   13228:	pop	{pc}		; (ldr pc, [sp], #4)
   1322c:	mov	r6, r4
   13230:	b	13214 <__assert_fail@plt+0x22bc>
   13234:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13238:	strd	r6, [sp, #8]
   1323c:	strd	r8, [sp, #16]
   13240:	str	sl, [sp, #24]
   13244:	str	lr, [sp, #28]
   13248:	mov	r4, r0
   1324c:	mov	r5, r1
   13250:	add	r6, r2, #20
   13254:	mov	r3, #0
   13258:	strb	r3, [r2, #20]
   1325c:	cmp	r0, #0
   13260:	sbcs	r3, r1, #0
   13264:	movge	r8, #10
   13268:	movge	r9, #0
   1326c:	movlt	r8, #10
   13270:	movlt	r9, #0
   13274:	blt	132d8 <__assert_fail@plt+0x2380>
   13278:	mov	r2, r8
   1327c:	mov	r3, r9
   13280:	mov	r0, r4
   13284:	mov	r1, r5
   13288:	bl	16f64 <__assert_fail@plt+0x600c>
   1328c:	add	r2, r2, #48	; 0x30
   13290:	strb	r2, [r6, #-1]!
   13294:	mov	r2, r8
   13298:	mov	r3, r9
   1329c:	mov	r0, r4
   132a0:	mov	r1, r5
   132a4:	bl	16f64 <__assert_fail@plt+0x600c>
   132a8:	mov	r4, r0
   132ac:	mov	r5, r1
   132b0:	orrs	r3, r4, r5
   132b4:	bne	13278 <__assert_fail@plt+0x2320>
   132b8:	mov	r0, r6
   132bc:	ldrd	r4, [sp]
   132c0:	ldrd	r6, [sp, #8]
   132c4:	ldrd	r8, [sp, #16]
   132c8:	ldr	sl, [sp, #24]
   132cc:	add	sp, sp, #28
   132d0:	pop	{pc}		; (ldr pc, [sp], #4)
   132d4:	mov	r6, r7
   132d8:	sub	r7, r6, #1
   132dc:	mov	r2, r8
   132e0:	mov	r3, r9
   132e4:	mov	r0, r4
   132e8:	mov	r1, r5
   132ec:	bl	16f64 <__assert_fail@plt+0x600c>
   132f0:	rsb	r2, r2, #48	; 0x30
   132f4:	strb	r2, [r6, #-1]
   132f8:	mov	r2, r8
   132fc:	mov	r3, r9
   13300:	mov	r0, r4
   13304:	mov	r1, r5
   13308:	bl	16f64 <__assert_fail@plt+0x600c>
   1330c:	mov	r4, r0
   13310:	mov	r5, r1
   13314:	orrs	r3, r4, r5
   13318:	bne	132d4 <__assert_fail@plt+0x237c>
   1331c:	sub	r6, r6, #2
   13320:	mov	r3, #45	; 0x2d
   13324:	strb	r3, [r7, #-1]
   13328:	b	132b8 <__assert_fail@plt+0x2360>
   1332c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13330:	str	r6, [sp, #8]
   13334:	strd	r8, [sp, #12]
   13338:	str	lr, [sp, #20]
   1333c:	mov	r4, r0
   13340:	mov	r5, r1
   13344:	add	r6, r2, #20
   13348:	mov	r3, #0
   1334c:	strb	r3, [r2, #20]
   13350:	mov	r8, #10
   13354:	mov	r9, #0
   13358:	b	13364 <__assert_fail@plt+0x240c>
   1335c:	mov	r4, r0
   13360:	mov	r5, r1
   13364:	mov	r2, r8
   13368:	mov	r3, r9
   1336c:	mov	r0, r4
   13370:	mov	r1, r5
   13374:	bl	17038 <__assert_fail@plt+0x60e0>
   13378:	add	r2, r2, #48	; 0x30
   1337c:	strb	r2, [r6, #-1]!
   13380:	mov	r2, r8
   13384:	mov	r3, r9
   13388:	mov	r0, r4
   1338c:	mov	r1, r5
   13390:	bl	17038 <__assert_fail@plt+0x60e0>
   13394:	cmp	r5, #0
   13398:	cmpeq	r4, #9
   1339c:	bhi	1335c <__assert_fail@plt+0x2404>
   133a0:	mov	r0, r6
   133a4:	ldrd	r4, [sp]
   133a8:	ldr	r6, [sp, #8]
   133ac:	ldrd	r8, [sp, #12]
   133b0:	add	sp, sp, #20
   133b4:	pop	{pc}		; (ldr pc, [sp], #4)
   133b8:	strd	r4, [sp, #-16]!
   133bc:	str	r6, [sp, #8]
   133c0:	str	lr, [sp, #12]
   133c4:	subs	r4, r0, #0
   133c8:	beq	13464 <__assert_fail@plt+0x250c>
   133cc:	mov	r1, #47	; 0x2f
   133d0:	mov	r0, r4
   133d4:	bl	10f04 <strrchr@plt>
   133d8:	subs	r5, r0, #0
   133dc:	beq	1343c <__assert_fail@plt+0x24e4>
   133e0:	add	r6, r5, #1
   133e4:	sub	r3, r6, r4
   133e8:	cmp	r3, #6
   133ec:	ble	1343c <__assert_fail@plt+0x24e4>
   133f0:	mov	r2, #7
   133f4:	movw	r1, #31720	; 0x7be8
   133f8:	movt	r1, #1
   133fc:	sub	r0, r5, #6
   13400:	bl	10f34 <strncmp@plt>
   13404:	cmp	r0, #0
   13408:	bne	1343c <__assert_fail@plt+0x24e4>
   1340c:	mov	r2, #3
   13410:	movw	r1, #31728	; 0x7bf0
   13414:	movt	r1, #1
   13418:	mov	r0, r6
   1341c:	bl	10f34 <strncmp@plt>
   13420:	cmp	r0, #0
   13424:	movne	r4, r6
   13428:	bne	1343c <__assert_fail@plt+0x24e4>
   1342c:	add	r4, r5, #4
   13430:	movw	r3, #37184	; 0x9140
   13434:	movt	r3, #2
   13438:	str	r4, [r3]
   1343c:	movw	r3, #37228	; 0x916c
   13440:	movt	r3, #2
   13444:	str	r4, [r3]
   13448:	movw	r3, #37188	; 0x9144
   1344c:	movt	r3, #2
   13450:	str	r4, [r3]
   13454:	ldrd	r4, [sp]
   13458:	ldr	r6, [sp, #8]
   1345c:	add	sp, sp, #12
   13460:	pop	{pc}		; (ldr pc, [sp], #4)
   13464:	movw	r3, #37200	; 0x9150
   13468:	movt	r3, #2
   1346c:	ldr	r3, [r3]
   13470:	mov	r2, #55	; 0x37
   13474:	mov	r1, #1
   13478:	movw	r0, #31664	; 0x7bb0
   1347c:	movt	r0, #1
   13480:	bl	10dc0 <fwrite@plt>
   13484:	bl	10f40 <abort@plt>
   13488:	mov	r2, #0
   1348c:	mov	r3, #0
   13490:	strd	r2, [r0]
   13494:	strd	r2, [r0, #8]
   13498:	strd	r2, [r0, #16]
   1349c:	strd	r2, [r0, #24]
   134a0:	strd	r2, [r0, #32]
   134a4:	strd	r2, [r0, #40]	; 0x28
   134a8:	cmp	r1, #10
   134ac:	beq	134b8 <__assert_fail@plt+0x2560>
   134b0:	str	r1, [r0]
   134b4:	bx	lr
   134b8:	str	r4, [sp, #-8]!
   134bc:	str	lr, [sp, #4]
   134c0:	bl	10f40 <abort@plt>
   134c4:	strd	r4, [sp, #-16]!
   134c8:	str	r6, [sp, #8]
   134cc:	str	lr, [sp, #12]
   134d0:	mov	r5, r0
   134d4:	mov	r6, r1
   134d8:	mov	r2, #5
   134dc:	mov	r1, r0
   134e0:	mov	r0, #0
   134e4:	bl	10d78 <dcgettext@plt>
   134e8:	mov	r4, r0
   134ec:	cmp	r5, r0
   134f0:	beq	13508 <__assert_fail@plt+0x25b0>
   134f4:	mov	r0, r4
   134f8:	ldrd	r4, [sp]
   134fc:	ldr	r6, [sp, #8]
   13500:	add	sp, sp, #12
   13504:	pop	{pc}		; (ldr pc, [sp], #4)
   13508:	bl	16d58 <__assert_fail@plt+0x5e00>
   1350c:	ldrb	r3, [r0]
   13510:	bic	r3, r3, #32
   13514:	cmp	r3, #85	; 0x55
   13518:	bne	1359c <__assert_fail@plt+0x2644>
   1351c:	ldrb	r3, [r0, #1]
   13520:	bic	r3, r3, #32
   13524:	cmp	r3, #84	; 0x54
   13528:	bne	13560 <__assert_fail@plt+0x2608>
   1352c:	ldrb	r3, [r0, #2]
   13530:	bic	r3, r3, #32
   13534:	cmp	r3, #70	; 0x46
   13538:	bne	13560 <__assert_fail@plt+0x2608>
   1353c:	ldrb	r3, [r0, #3]
   13540:	cmp	r3, #45	; 0x2d
   13544:	bne	13560 <__assert_fail@plt+0x2608>
   13548:	ldrb	r3, [r0, #4]
   1354c:	cmp	r3, #56	; 0x38
   13550:	bne	13560 <__assert_fail@plt+0x2608>
   13554:	ldrb	r3, [r0, #5]
   13558:	cmp	r3, #0
   1355c:	beq	1357c <__assert_fail@plt+0x2624>
   13560:	movw	r4, #31816	; 0x7c48
   13564:	movt	r4, #1
   13568:	movw	r3, #31836	; 0x7c5c
   1356c:	movt	r3, #1
   13570:	cmp	r6, #9
   13574:	movne	r4, r3
   13578:	b	134f4 <__assert_fail@plt+0x259c>
   1357c:	ldrb	r2, [r4]
   13580:	movw	r4, #31832	; 0x7c58
   13584:	movt	r4, #1
   13588:	movw	r3, #31820	; 0x7c4c
   1358c:	movt	r3, #1
   13590:	cmp	r2, #96	; 0x60
   13594:	movne	r4, r3
   13598:	b	134f4 <__assert_fail@plt+0x259c>
   1359c:	cmp	r3, #71	; 0x47
   135a0:	bne	13560 <__assert_fail@plt+0x2608>
   135a4:	ldrb	r3, [r0, #1]
   135a8:	bic	r3, r3, #32
   135ac:	cmp	r3, #66	; 0x42
   135b0:	bne	13560 <__assert_fail@plt+0x2608>
   135b4:	ldrb	r3, [r0, #2]
   135b8:	cmp	r3, #49	; 0x31
   135bc:	bne	13560 <__assert_fail@plt+0x2608>
   135c0:	ldrb	r3, [r0, #3]
   135c4:	cmp	r3, #56	; 0x38
   135c8:	bne	13560 <__assert_fail@plt+0x2608>
   135cc:	ldrb	r3, [r0, #4]
   135d0:	cmp	r3, #48	; 0x30
   135d4:	bne	13560 <__assert_fail@plt+0x2608>
   135d8:	ldrb	r3, [r0, #5]
   135dc:	cmp	r3, #51	; 0x33
   135e0:	bne	13560 <__assert_fail@plt+0x2608>
   135e4:	ldrb	r3, [r0, #6]
   135e8:	cmp	r3, #48	; 0x30
   135ec:	bne	13560 <__assert_fail@plt+0x2608>
   135f0:	ldrb	r3, [r0, #7]
   135f4:	cmp	r3, #0
   135f8:	bne	13560 <__assert_fail@plt+0x2608>
   135fc:	ldrb	r2, [r4]
   13600:	movw	r4, #31828	; 0x7c54
   13604:	movt	r4, #1
   13608:	movw	r3, #31824	; 0x7c50
   1360c:	movt	r3, #1
   13610:	cmp	r2, #96	; 0x60
   13614:	movne	r4, r3
   13618:	b	134f4 <__assert_fail@plt+0x259c>
   1361c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13620:	strd	r6, [sp, #8]
   13624:	strd	r8, [sp, #16]
   13628:	strd	sl, [sp, #24]
   1362c:	str	lr, [sp, #32]
   13630:	sub	sp, sp, #116	; 0x74
   13634:	str	r0, [sp, #64]	; 0x40
   13638:	mov	r8, r1
   1363c:	str	r2, [sp, #48]	; 0x30
   13640:	str	r3, [sp, #24]
   13644:	ldr	r7, [sp, #152]	; 0x98
   13648:	bl	10dd8 <__ctype_get_mb_cur_max@plt>
   1364c:	str	r0, [sp, #76]	; 0x4c
   13650:	ldr	r3, [sp, #156]	; 0x9c
   13654:	ubfx	r3, r3, #1, #1
   13658:	str	r3, [sp, #32]
   1365c:	mov	r3, #1
   13660:	str	r3, [sp, #40]	; 0x28
   13664:	mov	r3, #0
   13668:	str	r3, [sp, #68]	; 0x44
   1366c:	str	r3, [sp, #36]	; 0x24
   13670:	str	r3, [sp, #28]
   13674:	str	r3, [sp, #52]	; 0x34
   13678:	str	r3, [sp, #60]	; 0x3c
   1367c:	str	r3, [sp, #72]	; 0x48
   13680:	movw	r3, #31840	; 0x7c60
   13684:	movt	r3, #1
   13688:	str	r3, [sp, #80]	; 0x50
   1368c:	mov	r9, r8
   13690:	mov	sl, r7
   13694:	cmp	sl, #10
   13698:	ldrls	pc, [pc, sl, lsl #2]
   1369c:	b	13860 <__assert_fail@plt+0x2908>
   136a0:	andeq	r3, r1, r0, lsl #14
   136a4:	ldrdeq	r3, [r1], -r4
   136a8:	andeq	r3, r1, r8, lsr r8
   136ac:	andeq	r3, r1, ip, asr #13
   136b0:	andeq	r3, r1, ip, ror #15
   136b4:	andeq	r3, r1, r0, lsl r7
   136b8:	ldrdeq	r4, [r1], -ip
   136bc:	andeq	r3, r1, r4, ror #16
   136c0:	andeq	r3, r1, ip, asr #14
   136c4:	andeq	r3, r1, ip, asr #14
   136c8:	andeq	r3, r1, ip, asr #14
   136cc:	mov	r3, #1
   136d0:	str	r3, [sp, #28]
   136d4:	mov	r3, #1
   136d8:	str	r3, [sp, #32]
   136dc:	str	r3, [sp, #52]	; 0x34
   136e0:	movw	r3, #31836	; 0x7c5c
   136e4:	movt	r3, #1
   136e8:	str	r3, [sp, #60]	; 0x3c
   136ec:	mov	fp, #0
   136f0:	mov	sl, #2
   136f4:	mov	r6, #0
   136f8:	ldr	r8, [sp, #64]	; 0x40
   136fc:	b	13f74 <__assert_fail@plt+0x301c>
   13700:	mov	fp, sl
   13704:	mov	r3, #0
   13708:	str	r3, [sp, #32]
   1370c:	b	136f4 <__assert_fail@plt+0x279c>
   13710:	ldr	r3, [sp, #32]
   13714:	cmp	r3, #0
   13718:	bne	13878 <__assert_fail@plt+0x2920>
   1371c:	cmp	r9, #0
   13720:	beq	1389c <__assert_fail@plt+0x2944>
   13724:	mov	r3, #34	; 0x22
   13728:	ldr	r2, [sp, #64]	; 0x40
   1372c:	strb	r3, [r2]
   13730:	mov	fp, #1
   13734:	str	fp, [sp, #28]
   13738:	str	fp, [sp, #52]	; 0x34
   1373c:	movw	r3, #31816	; 0x7c48
   13740:	movt	r3, #1
   13744:	str	r3, [sp, #60]	; 0x3c
   13748:	b	136f4 <__assert_fail@plt+0x279c>
   1374c:	cmp	sl, #10
   13750:	bne	13784 <__assert_fail@plt+0x282c>
   13754:	ldr	r3, [sp, #32]
   13758:	cmp	r3, #0
   1375c:	movne	fp, #0
   13760:	beq	137ac <__assert_fail@plt+0x2854>
   13764:	ldr	r0, [sp, #168]	; 0xa8
   13768:	bl	10e68 <strlen@plt>
   1376c:	str	r0, [sp, #52]	; 0x34
   13770:	ldr	r3, [sp, #168]	; 0xa8
   13774:	str	r3, [sp, #60]	; 0x3c
   13778:	mov	r3, #1
   1377c:	str	r3, [sp, #28]
   13780:	b	136f4 <__assert_fail@plt+0x279c>
   13784:	mov	r1, sl
   13788:	ldr	r0, [sp, #80]	; 0x50
   1378c:	bl	134c4 <__assert_fail@plt+0x256c>
   13790:	str	r0, [sp, #164]	; 0xa4
   13794:	mov	r1, sl
   13798:	movw	r0, #31836	; 0x7c5c
   1379c:	movt	r0, #1
   137a0:	bl	134c4 <__assert_fail@plt+0x256c>
   137a4:	str	r0, [sp, #168]	; 0xa8
   137a8:	b	13754 <__assert_fail@plt+0x27fc>
   137ac:	ldr	r3, [sp, #164]	; 0xa4
   137b0:	ldrb	r3, [r3]
   137b4:	cmp	r3, #0
   137b8:	beq	137e4 <__assert_fail@plt+0x288c>
   137bc:	ldr	r2, [sp, #164]	; 0xa4
   137c0:	mov	fp, #0
   137c4:	ldr	r1, [sp, #64]	; 0x40
   137c8:	cmp	r9, fp
   137cc:	strbhi	r3, [r1, fp]
   137d0:	add	fp, fp, #1
   137d4:	ldrb	r3, [r2, #1]!
   137d8:	cmp	r3, #0
   137dc:	bne	137c8 <__assert_fail@plt+0x2870>
   137e0:	b	13764 <__assert_fail@plt+0x280c>
   137e4:	mov	fp, #0
   137e8:	b	13764 <__assert_fail@plt+0x280c>
   137ec:	ldr	r3, [sp, #32]
   137f0:	cmp	r3, #0
   137f4:	bne	136d4 <__assert_fail@plt+0x277c>
   137f8:	mov	r3, #1
   137fc:	str	r3, [sp, #28]
   13800:	cmp	r9, #0
   13804:	beq	138b8 <__assert_fail@plt+0x2960>
   13808:	mov	r3, #39	; 0x27
   1380c:	ldr	r2, [sp, #64]	; 0x40
   13810:	strb	r3, [r2]
   13814:	mov	r3, #0
   13818:	str	r3, [sp, #32]
   1381c:	mov	fp, #1
   13820:	str	fp, [sp, #52]	; 0x34
   13824:	movw	r3, #31836	; 0x7c5c
   13828:	movt	r3, #1
   1382c:	str	r3, [sp, #60]	; 0x3c
   13830:	mov	sl, #2
   13834:	b	136f4 <__assert_fail@plt+0x279c>
   13838:	ldr	r3, [sp, #32]
   1383c:	cmp	r3, #0
   13840:	beq	13800 <__assert_fail@plt+0x28a8>
   13844:	mov	r3, #1
   13848:	str	r3, [sp, #52]	; 0x34
   1384c:	movw	r3, #31836	; 0x7c5c
   13850:	movt	r3, #1
   13854:	str	r3, [sp, #60]	; 0x3c
   13858:	mov	fp, #0
   1385c:	b	136f4 <__assert_fail@plt+0x279c>
   13860:	bl	10f40 <abort@plt>
   13864:	mov	fp, #0
   13868:	str	fp, [sp, #32]
   1386c:	mov	r3, #1
   13870:	str	r3, [sp, #28]
   13874:	b	136f4 <__assert_fail@plt+0x279c>
   13878:	ldr	r3, [sp, #32]
   1387c:	str	r3, [sp, #28]
   13880:	mov	r3, #1
   13884:	str	r3, [sp, #52]	; 0x34
   13888:	movw	r3, #31816	; 0x7c48
   1388c:	movt	r3, #1
   13890:	str	r3, [sp, #60]	; 0x3c
   13894:	mov	fp, #0
   13898:	b	136f4 <__assert_fail@plt+0x279c>
   1389c:	mov	fp, #1
   138a0:	str	fp, [sp, #28]
   138a4:	str	fp, [sp, #52]	; 0x34
   138a8:	movw	r3, #31816	; 0x7c48
   138ac:	movt	r3, #1
   138b0:	str	r3, [sp, #60]	; 0x3c
   138b4:	b	136f4 <__assert_fail@plt+0x279c>
   138b8:	mov	r3, #0
   138bc:	str	r3, [sp, #32]
   138c0:	mov	fp, #1
   138c4:	str	fp, [sp, #52]	; 0x34
   138c8:	movw	r3, #31836	; 0x7c5c
   138cc:	movt	r3, #1
   138d0:	str	r3, [sp, #60]	; 0x3c
   138d4:	mov	sl, #2
   138d8:	b	136f4 <__assert_fail@plt+0x279c>
   138dc:	mov	r3, r2
   138e0:	add	r4, r6, r2
   138e4:	ldr	r2, [sp, #24]
   138e8:	cmp	r3, #1
   138ec:	movls	r3, #0
   138f0:	movhi	r3, #1
   138f4:	cmn	r2, #1
   138f8:	movne	r3, #0
   138fc:	cmp	r3, #0
   13900:	beq	13910 <__assert_fail@plt+0x29b8>
   13904:	ldr	r0, [sp, #48]	; 0x30
   13908:	bl	10e68 <strlen@plt>
   1390c:	str	r0, [sp, #24]
   13910:	ldr	r3, [sp, #24]
   13914:	cmp	r4, r3
   13918:	bhi	14b04 <__assert_fail@plt+0x3bac>
   1391c:	ldr	r3, [sp, #48]	; 0x30
   13920:	add	r4, r3, r6
   13924:	ldr	r2, [sp, #52]	; 0x34
   13928:	ldr	r1, [sp, #60]	; 0x3c
   1392c:	mov	r0, r4
   13930:	bl	10d60 <memcmp@plt>
   13934:	cmp	r0, #0
   13938:	bne	14b04 <__assert_fail@plt+0x3bac>
   1393c:	ldr	r3, [sp, #32]
   13940:	cmp	r3, #0
   13944:	bne	13b54 <__assert_fail@plt+0x2bfc>
   13948:	ldrb	r4, [r4]
   1394c:	cmp	r4, #126	; 0x7e
   13950:	ldrls	pc, [pc, r4, lsl #2]
   13954:	b	14408 <__assert_fail@plt+0x34b0>
   13958:	muleq	r1, r8, fp
   1395c:	andeq	r4, r1, r8, lsl #8
   13960:	andeq	r4, r1, r8, lsl #8
   13964:	andeq	r4, r1, r8, lsl #8
   13968:	andeq	r4, r1, r8, lsl #8
   1396c:	andeq	r4, r1, r8, lsl #8
   13970:	andeq	r4, r1, r8, lsl #8
   13974:			; <UNDEFINED> instruction: 0x000142b0
   13978:	andeq	r3, r1, r4, lsr lr
   1397c:	ldrdeq	r4, [r1], -r8
   13980:	andeq	r4, r1, r4, lsl #5
   13984:	andeq	r4, r1, ip, ror #3
   13988:	andeq	r3, r1, r8, asr #28
   1398c:	andeq	r3, r1, ip, asr lr
   13990:	andeq	r4, r1, r8, lsl #8
   13994:	andeq	r4, r1, r8, lsl #8
   13998:	andeq	r4, r1, r8, lsl #8
   1399c:	andeq	r4, r1, r8, lsl #8
   139a0:	andeq	r4, r1, r8, lsl #8
   139a4:	andeq	r4, r1, r8, lsl #8
   139a8:	andeq	r4, r1, r8, lsl #8
   139ac:	andeq	r4, r1, r8, lsl #8
   139b0:	andeq	r4, r1, r8, lsl #8
   139b4:	andeq	r4, r1, r8, lsl #8
   139b8:	andeq	r4, r1, r8, lsl #8
   139bc:	andeq	r4, r1, r8, lsl #8
   139c0:	andeq	r4, r1, r8, lsl #8
   139c4:	andeq	r4, r1, r8, lsl #8
   139c8:	andeq	r4, r1, r8, lsl #8
   139cc:	andeq	r4, r1, r8, lsl #8
   139d0:	andeq	r4, r1, r8, lsl #8
   139d4:	andeq	r4, r1, r8, lsl #8
   139d8:	andeq	r4, r1, r4, lsr #6
   139dc:	andeq	r4, r1, r8, asr #6
   139e0:	andeq	r4, r1, r8, asr #6
   139e4:	andeq	r4, r1, r0, ror #5
   139e8:	andeq	r4, r1, r8, asr #6
   139ec:	andeq	r4, r1, r8, ror #16
   139f0:	andeq	r4, r1, r8, asr #6
   139f4:	andeq	r4, r1, r8, ror #6
   139f8:	andeq	r4, r1, r8, asr #6
   139fc:	andeq	r4, r1, r8, asr #6
   13a00:	andeq	r4, r1, r8, asr #6
   13a04:	andeq	r4, r1, r8, ror #16
   13a08:	andeq	r4, r1, r8, ror #16
   13a0c:	andeq	r4, r1, r8, ror #16
   13a10:	andeq	r4, r1, r8, ror #16
   13a14:	andeq	r4, r1, r8, ror #16
   13a18:	andeq	r4, r1, r8, ror #16
   13a1c:	andeq	r4, r1, r8, ror #16
   13a20:	andeq	r4, r1, r8, ror #16
   13a24:	andeq	r4, r1, r8, ror #16
   13a28:	andeq	r4, r1, r8, ror #16
   13a2c:	andeq	r4, r1, r8, ror #16
   13a30:	andeq	r4, r1, r8, ror #16
   13a34:	andeq	r4, r1, r8, ror #16
   13a38:	andeq	r4, r1, r8, ror #16
   13a3c:	andeq	r4, r1, r8, ror #16
   13a40:	andeq	r4, r1, r8, ror #16
   13a44:	andeq	r4, r1, r8, asr #6
   13a48:	andeq	r4, r1, r8, asr #6
   13a4c:	andeq	r4, r1, r8, asr #6
   13a50:	andeq	r4, r1, r8, asr #6
   13a54:	andeq	r3, r1, r8, asr #25
   13a58:	andeq	r4, r1, r8, lsl #8
   13a5c:	andeq	r4, r1, r8, ror #16
   13a60:	andeq	r4, r1, r8, ror #16
   13a64:	andeq	r4, r1, r8, ror #16
   13a68:	andeq	r4, r1, r8, ror #16
   13a6c:	andeq	r4, r1, r8, ror #16
   13a70:	andeq	r4, r1, r8, ror #16
   13a74:	andeq	r4, r1, r8, ror #16
   13a78:	andeq	r4, r1, r8, ror #16
   13a7c:	andeq	r4, r1, r8, ror #16
   13a80:	andeq	r4, r1, r8, ror #16
   13a84:	andeq	r4, r1, r8, ror #16
   13a88:	andeq	r4, r1, r8, ror #16
   13a8c:	andeq	r4, r1, r8, ror #16
   13a90:	andeq	r4, r1, r8, ror #16
   13a94:	andeq	r4, r1, r8, ror #16
   13a98:	andeq	r4, r1, r8, ror #16
   13a9c:	andeq	r4, r1, r8, ror #16
   13aa0:	andeq	r4, r1, r8, ror #16
   13aa4:	andeq	r4, r1, r8, ror #16
   13aa8:	andeq	r4, r1, r8, ror #16
   13aac:	andeq	r4, r1, r8, ror #16
   13ab0:	andeq	r4, r1, r8, ror #16
   13ab4:	andeq	r4, r1, r8, ror #16
   13ab8:	andeq	r4, r1, r8, ror #16
   13abc:	andeq	r4, r1, r8, ror #16
   13ac0:	andeq	r4, r1, r8, ror #16
   13ac4:	andeq	r4, r1, r8, asr #6
   13ac8:	andeq	r4, r1, r0, lsl #4
   13acc:	andeq	r4, r1, r8, ror #16
   13ad0:	andeq	r4, r1, r8, asr #6
   13ad4:	andeq	r4, r1, r8, ror #16
   13ad8:	andeq	r4, r1, r8, asr #6
   13adc:	andeq	r4, r1, r8, ror #16
   13ae0:	andeq	r4, r1, r8, ror #16
   13ae4:	andeq	r4, r1, r8, ror #16
   13ae8:	andeq	r4, r1, r8, ror #16
   13aec:	andeq	r4, r1, r8, ror #16
   13af0:	andeq	r4, r1, r8, ror #16
   13af4:	andeq	r4, r1, r8, ror #16
   13af8:	andeq	r4, r1, r8, ror #16
   13afc:	andeq	r4, r1, r8, ror #16
   13b00:	andeq	r4, r1, r8, ror #16
   13b04:	andeq	r4, r1, r8, ror #16
   13b08:	andeq	r4, r1, r8, ror #16
   13b0c:	andeq	r4, r1, r8, ror #16
   13b10:	andeq	r4, r1, r8, ror #16
   13b14:	andeq	r4, r1, r8, ror #16
   13b18:	andeq	r4, r1, r8, ror #16
   13b1c:	andeq	r4, r1, r8, ror #16
   13b20:	andeq	r4, r1, r8, ror #16
   13b24:	andeq	r4, r1, r8, ror #16
   13b28:	andeq	r4, r1, r8, ror #16
   13b2c:	andeq	r4, r1, r8, ror #16
   13b30:	andeq	r4, r1, r8, ror #16
   13b34:	andeq	r4, r1, r8, ror #16
   13b38:	andeq	r4, r1, r8, ror #16
   13b3c:	andeq	r4, r1, r8, ror #16
   13b40:	andeq	r4, r1, r8, ror #16
   13b44:	andeq	r4, r1, r0, asr #5
   13b48:	andeq	r4, r1, r8, asr #6
   13b4c:	andeq	r4, r1, r0, asr #5
   13b50:	andeq	r4, r1, r0, ror #5
   13b54:	mov	r8, r9
   13b58:	mov	r7, sl
   13b5c:	b	14a5c <__assert_fail@plt+0x3b04>
   13b60:	ldr	r3, [sp, #28]
   13b64:	cmp	r3, #0
   13b68:	bne	13b88 <__assert_fail@plt+0x2c30>
   13b6c:	ldr	r3, [sp, #156]	; 0x9c
   13b70:	tst	r3, #1
   13b74:	bne	13f70 <__assert_fail@plt+0x3018>
   13b78:	ldr	r3, [sp, #28]
   13b7c:	str	r3, [sp, #44]	; 0x2c
   13b80:	mov	r5, r3
   13b84:	b	13e90 <__assert_fail@plt+0x2f38>
   13b88:	ldr	r3, [sp, #32]
   13b8c:	cmp	r3, #0
   13b90:	bne	14a0c <__assert_fail@plt+0x3ab4>
   13b94:	str	r3, [sp, #44]	; 0x2c
   13b98:	ldr	r3, [sp, #36]	; 0x24
   13b9c:	eor	r3, r3, #1
   13ba0:	cmp	sl, #2
   13ba4:	movne	r3, #0
   13ba8:	andeq	r3, r3, #1
   13bac:	cmp	r3, #0
   13bb0:	beq	13c08 <__assert_fail@plt+0x2cb0>
   13bb4:	cmp	r9, fp
   13bb8:	movhi	r2, #39	; 0x27
   13bbc:	strbhi	r2, [r8, fp]
   13bc0:	add	r2, fp, #1
   13bc4:	cmp	r9, r2
   13bc8:	movhi	r1, #36	; 0x24
   13bcc:	strbhi	r1, [r8, r2]
   13bd0:	add	r2, fp, #2
   13bd4:	cmp	r9, r2
   13bd8:	movhi	r1, #39	; 0x27
   13bdc:	strbhi	r1, [r8, r2]
   13be0:	add	r2, fp, #3
   13be4:	cmp	r9, r2
   13be8:	bls	14ac8 <__assert_fail@plt+0x3b70>
   13bec:	mov	r1, #92	; 0x5c
   13bf0:	strb	r1, [r8, r2]
   13bf4:	add	fp, fp, #4
   13bf8:	str	r3, [sp, #36]	; 0x24
   13bfc:	mov	r5, #0
   13c00:	mov	r4, #48	; 0x30
   13c04:	b	13edc <__assert_fail@plt+0x2f84>
   13c08:	cmp	r9, fp
   13c0c:	bhi	13c34 <__assert_fail@plt+0x2cdc>
   13c10:	add	r1, fp, #1
   13c14:	ldr	r2, [sp, #56]	; 0x38
   13c18:	cmp	r2, #0
   13c1c:	bne	13c5c <__assert_fail@plt+0x2d04>
   13c20:	mov	r3, r5
   13c24:	ldr	r5, [sp, #56]	; 0x38
   13c28:	mov	fp, r1
   13c2c:	mov	r4, #48	; 0x30
   13c30:	b	13e90 <__assert_fail@plt+0x2f38>
   13c34:	mov	r2, #92	; 0x5c
   13c38:	strb	r2, [r8, fp]
   13c3c:	add	r1, fp, #1
   13c40:	ldr	r2, [sp, #56]	; 0x38
   13c44:	cmp	r2, #0
   13c48:	moveq	r3, r5
   13c4c:	moveq	r5, r2
   13c50:	moveq	fp, r1
   13c54:	moveq	r4, #48	; 0x30
   13c58:	beq	13edc <__assert_fail@plt+0x2f84>
   13c5c:	add	r2, r6, #1
   13c60:	ldr	r0, [sp, #24]
   13c64:	cmp	r2, r0
   13c68:	bcs	13c84 <__assert_fail@plt+0x2d2c>
   13c6c:	ldr	r0, [sp, #48]	; 0x30
   13c70:	ldrb	r2, [r0, r2]
   13c74:	sub	r2, r2, #48	; 0x30
   13c78:	uxtb	r2, r2
   13c7c:	cmp	r2, #9
   13c80:	bls	13c9c <__assert_fail@plt+0x2d44>
   13c84:	mov	r2, r3
   13c88:	mov	r3, r5
   13c8c:	mov	r5, r2
   13c90:	mov	fp, r1
   13c94:	mov	r4, #48	; 0x30
   13c98:	b	13eb4 <__assert_fail@plt+0x2f5c>
   13c9c:	cmp	r9, r1
   13ca0:	movhi	r2, #48	; 0x30
   13ca4:	strbhi	r2, [r8, r1]
   13ca8:	add	r2, fp, #2
   13cac:	cmp	r9, r2
   13cb0:	movhi	r1, #48	; 0x30
   13cb4:	strbhi	r1, [r8, r2]
   13cb8:	add	r1, fp, #3
   13cbc:	b	13c84 <__assert_fail@plt+0x2d2c>
   13cc0:	mov	r3, #0
   13cc4:	str	r3, [sp, #44]	; 0x2c
   13cc8:	cmp	sl, #2
   13ccc:	beq	13ce8 <__assert_fail@plt+0x2d90>
   13cd0:	cmp	sl, #5
   13cd4:	beq	13d00 <__assert_fail@plt+0x2da8>
   13cd8:	mov	r5, #0
   13cdc:	mov	r3, r5
   13ce0:	mov	r4, #63	; 0x3f
   13ce4:	b	13e90 <__assert_fail@plt+0x2f38>
   13ce8:	ldr	r3, [sp, #32]
   13cec:	cmp	r3, #0
   13cf0:	bne	14a18 <__assert_fail@plt+0x3ac0>
   13cf4:	mov	r5, r3
   13cf8:	mov	r4, #63	; 0x3f
   13cfc:	b	143f8 <__assert_fail@plt+0x34a0>
   13d00:	ldr	r3, [sp, #156]	; 0x9c
   13d04:	tst	r3, #4
   13d08:	beq	14830 <__assert_fail@plt+0x38d8>
   13d0c:	add	r2, r6, #2
   13d10:	ldr	r3, [sp, #24]
   13d14:	cmp	r2, r3
   13d18:	bcs	14840 <__assert_fail@plt+0x38e8>
   13d1c:	ldr	r3, [sp, #48]	; 0x30
   13d20:	add	r3, r3, r6
   13d24:	ldrb	r4, [r3, #1]
   13d28:	cmp	r4, #63	; 0x3f
   13d2c:	movne	r5, #0
   13d30:	movne	r3, r5
   13d34:	movne	r4, #63	; 0x3f
   13d38:	bne	13e90 <__assert_fail@plt+0x2f38>
   13d3c:	ldr	r3, [sp, #48]	; 0x30
   13d40:	ldrb	r1, [r3, r2]
   13d44:	sub	r3, r1, #33	; 0x21
   13d48:	cmp	r3, #29
   13d4c:	ldrls	pc, [pc, r3, lsl #2]
   13d50:	b	14850 <__assert_fail@plt+0x38f8>
   13d54:	andeq	r3, r1, ip, asr #27
   13d58:	andeq	r4, r1, r0, asr r8
   13d5c:	andeq	r4, r1, r0, asr r8
   13d60:	andeq	r4, r1, r0, asr r8
   13d64:	andeq	r4, r1, r0, asr r8
   13d68:	andeq	r4, r1, r0, asr r8
   13d6c:	andeq	r3, r1, ip, asr #27
   13d70:	andeq	r3, r1, ip, asr #27
   13d74:	andeq	r3, r1, ip, asr #27
   13d78:	andeq	r4, r1, r0, asr r8
   13d7c:	andeq	r4, r1, r0, asr r8
   13d80:	andeq	r4, r1, r0, asr r8
   13d84:	andeq	r3, r1, ip, asr #27
   13d88:	andeq	r4, r1, r0, asr r8
   13d8c:	andeq	r3, r1, ip, asr #27
   13d90:	andeq	r4, r1, r0, asr r8
   13d94:	andeq	r4, r1, r0, asr r8
   13d98:	andeq	r4, r1, r0, asr r8
   13d9c:	andeq	r4, r1, r0, asr r8
   13da0:	andeq	r4, r1, r0, asr r8
   13da4:	andeq	r4, r1, r0, asr r8
   13da8:	andeq	r4, r1, r0, asr r8
   13dac:	andeq	r4, r1, r0, asr r8
   13db0:	andeq	r4, r1, r0, asr r8
   13db4:	andeq	r4, r1, r0, asr r8
   13db8:	andeq	r4, r1, r0, asr r8
   13dbc:	andeq	r4, r1, r0, asr r8
   13dc0:	andeq	r3, r1, ip, asr #27
   13dc4:	andeq	r3, r1, ip, asr #27
   13dc8:	andeq	r3, r1, ip, asr #27
   13dcc:	ldr	r3, [sp, #32]
   13dd0:	cmp	r3, #0
   13dd4:	bne	14abc <__assert_fail@plt+0x3b64>
   13dd8:	cmp	r9, fp
   13ddc:	movhi	r3, #63	; 0x3f
   13de0:	strbhi	r3, [r8, fp]
   13de4:	add	r3, fp, #1
   13de8:	cmp	r9, r3
   13dec:	movhi	r0, #34	; 0x22
   13df0:	strbhi	r0, [r8, r3]
   13df4:	add	r3, fp, #2
   13df8:	cmp	r9, r3
   13dfc:	movhi	r0, #34	; 0x22
   13e00:	strbhi	r0, [r8, r3]
   13e04:	add	r3, fp, #3
   13e08:	cmp	r9, r3
   13e0c:	movhi	r0, #63	; 0x3f
   13e10:	strbhi	r0, [r8, r3]
   13e14:	add	fp, fp, #4
   13e18:	ldr	r3, [sp, #32]
   13e1c:	mov	r5, r3
   13e20:	mov	r4, r1
   13e24:	mov	r6, r2
   13e28:	b	13e90 <__assert_fail@plt+0x2f38>
   13e2c:	mov	r3, #0
   13e30:	str	r3, [sp, #44]	; 0x2c
   13e34:	mov	r4, #8
   13e38:	mov	r3, #98	; 0x62
   13e3c:	b	13e7c <__assert_fail@plt+0x2f24>
   13e40:	mov	r3, #0
   13e44:	str	r3, [sp, #44]	; 0x2c
   13e48:	mov	r4, #12
   13e4c:	mov	r3, #102	; 0x66
   13e50:	b	13e7c <__assert_fail@plt+0x2f24>
   13e54:	mov	r3, #0
   13e58:	str	r3, [sp, #44]	; 0x2c
   13e5c:	mov	r4, #13
   13e60:	mov	r3, #114	; 0x72
   13e64:	ldr	r2, [sp, #32]
   13e68:	cmp	sl, #2
   13e6c:	movne	r2, #0
   13e70:	andeq	r2, r2, #1
   13e74:	cmp	r2, #0
   13e78:	bne	1429c <__assert_fail@plt+0x3344>
   13e7c:	ldr	r2, [sp, #28]
   13e80:	cmp	r2, #0
   13e84:	bne	14884 <__assert_fail@plt+0x392c>
   13e88:	mov	r5, r2
   13e8c:	mov	r3, r2
   13e90:	ldr	r2, [sp, #28]
   13e94:	eor	r2, r2, #1
   13e98:	cmp	sl, #2
   13e9c:	orreq	r2, r2, #1
   13ea0:	eor	r2, r2, #1
   13ea4:	ldr	r1, [sp, #32]
   13ea8:	orr	r2, r1, r2
   13eac:	tst	r2, #255	; 0xff
   13eb0:	beq	13edc <__assert_fail@plt+0x2f84>
   13eb4:	ldr	r2, [sp, #160]	; 0xa0
   13eb8:	cmp	r2, #0
   13ebc:	beq	13edc <__assert_fail@plt+0x2f84>
   13ec0:	ubfx	r1, r4, #5, #8
   13ec4:	and	r2, r4, #31
   13ec8:	ldr	r0, [sp, #160]	; 0xa0
   13ecc:	ldr	r1, [r0, r1, lsl #2]
   13ed0:	lsr	r2, r1, r2
   13ed4:	tst	r2, #1
   13ed8:	bne	13ee8 <__assert_fail@plt+0x2f90>
   13edc:	ldr	r2, [sp, #44]	; 0x2c
   13ee0:	cmp	r2, #0
   13ee4:	beq	1423c <__assert_fail@plt+0x32e4>
   13ee8:	ldr	r3, [sp, #32]
   13eec:	cmp	r3, #0
   13ef0:	bne	14a3c <__assert_fail@plt+0x3ae4>
   13ef4:	ldr	r3, [sp, #36]	; 0x24
   13ef8:	eor	r3, r3, #1
   13efc:	cmp	sl, #2
   13f00:	movne	r3, #0
   13f04:	andeq	r3, r3, #1
   13f08:	cmp	r3, #0
   13f0c:	beq	13f44 <__assert_fail@plt+0x2fec>
   13f10:	cmp	r9, fp
   13f14:	movhi	r2, #39	; 0x27
   13f18:	strbhi	r2, [r8, fp]
   13f1c:	add	r2, fp, #1
   13f20:	cmp	r9, r2
   13f24:	movhi	r1, #36	; 0x24
   13f28:	strbhi	r1, [r8, r2]
   13f2c:	add	r2, fp, #2
   13f30:	cmp	r9, r2
   13f34:	movhi	r1, #39	; 0x27
   13f38:	strbhi	r1, [r8, r2]
   13f3c:	add	fp, fp, #3
   13f40:	str	r3, [sp, #36]	; 0x24
   13f44:	cmp	r9, fp
   13f48:	movhi	r3, #92	; 0x5c
   13f4c:	strbhi	r3, [r8, fp]
   13f50:	add	fp, fp, #1
   13f54:	cmp	fp, r9
   13f58:	strbcc	r4, [r8, fp]
   13f5c:	add	fp, fp, #1
   13f60:	cmp	r5, #0
   13f64:	ldr	r3, [sp, #40]	; 0x28
   13f68:	moveq	r3, r5
   13f6c:	str	r3, [sp, #40]	; 0x28
   13f70:	add	r6, r6, #1
   13f74:	ldr	r3, [sp, #24]
   13f78:	cmn	r3, #1
   13f7c:	beq	148ac <__assert_fail@plt+0x3954>
   13f80:	ldr	r3, [sp, #24]
   13f84:	subs	r5, r3, r6
   13f88:	movne	r5, #1
   13f8c:	cmp	r5, #0
   13f90:	beq	148c0 <__assert_fail@plt+0x3968>
   13f94:	ldr	r3, [sp, #28]
   13f98:	cmp	sl, #2
   13f9c:	moveq	r3, #0
   13fa0:	andne	r3, r3, #1
   13fa4:	str	r3, [sp, #56]	; 0x38
   13fa8:	ldr	r2, [sp, #52]	; 0x34
   13fac:	adds	r7, r2, #0
   13fb0:	movne	r7, #1
   13fb4:	ands	r3, r3, r7
   13fb8:	str	r3, [sp, #44]	; 0x2c
   13fbc:	bne	138dc <__assert_fail@plt+0x2984>
   13fc0:	ldr	r3, [sp, #48]	; 0x30
   13fc4:	ldrb	r4, [r3, r6]
   13fc8:	cmp	r4, #126	; 0x7e
   13fcc:	ldrls	pc, [pc, r4, lsl #2]
   13fd0:	b	14408 <__assert_fail@plt+0x34b0>
   13fd4:	andeq	r3, r1, r0, ror #22
   13fd8:	andeq	r4, r1, r8, lsl #8
   13fdc:	andeq	r4, r1, r8, lsl #8
   13fe0:	andeq	r4, r1, r8, lsl #8
   13fe4:	andeq	r4, r1, r8, lsl #8
   13fe8:	andeq	r4, r1, r8, lsl #8
   13fec:	andeq	r4, r1, r8, lsl #8
   13ff0:	andeq	r4, r1, r8, lsr #5
   13ff4:	andeq	r3, r1, r4, lsr lr
   13ff8:	ldrdeq	r4, [r1], -r8
   13ffc:	andeq	r4, r1, ip, ror r2
   14000:	andeq	r4, r1, ip, ror #3
   14004:	andeq	r3, r1, r8, asr #28
   14008:	andeq	r3, r1, ip, asr lr
   1400c:	andeq	r4, r1, r8, lsl #8
   14010:	andeq	r4, r1, r8, lsl #8
   14014:	andeq	r4, r1, r8, lsl #8
   14018:	andeq	r4, r1, r8, lsl #8
   1401c:	andeq	r4, r1, r8, lsl #8
   14020:	andeq	r4, r1, r8, lsl #8
   14024:	andeq	r4, r1, r8, lsl #8
   14028:	andeq	r4, r1, r8, lsl #8
   1402c:	andeq	r4, r1, r8, lsl #8
   14030:	andeq	r4, r1, r8, lsl #8
   14034:	andeq	r4, r1, r8, lsl #8
   14038:	andeq	r4, r1, r8, lsl #8
   1403c:	andeq	r4, r1, r8, lsl #8
   14040:	andeq	r4, r1, r8, lsl #8
   14044:	andeq	r4, r1, r8, lsl #8
   14048:	andeq	r4, r1, r8, lsl #8
   1404c:	andeq	r4, r1, r8, lsl #8
   14050:	andeq	r4, r1, r8, lsl #8
   14054:	andeq	r4, r1, r4, lsr #6
   14058:	andeq	r4, r1, r0, lsr #6
   1405c:	andeq	r4, r1, r0, lsr #6
   14060:	andeq	r4, r1, r0, ror #5
   14064:	andeq	r4, r1, r0, lsr #6
   14068:	andeq	r4, r1, r8, lsr #16
   1406c:	andeq	r4, r1, r0, lsr #6
   14070:	andeq	r4, r1, r8, ror #6
   14074:	andeq	r4, r1, r0, lsr #6
   14078:	andeq	r4, r1, r0, lsr #6
   1407c:	andeq	r4, r1, r0, lsr #6
   14080:	andeq	r4, r1, r8, lsr #16
   14084:	andeq	r4, r1, r8, lsr #16
   14088:	andeq	r4, r1, r8, lsr #16
   1408c:	andeq	r4, r1, r8, lsr #16
   14090:	andeq	r4, r1, r8, lsr #16
   14094:	andeq	r4, r1, r8, lsr #16
   14098:	andeq	r4, r1, r8, lsr #16
   1409c:	andeq	r4, r1, r8, lsr #16
   140a0:	andeq	r4, r1, r8, lsr #16
   140a4:	andeq	r4, r1, r8, lsr #16
   140a8:	andeq	r4, r1, r8, lsr #16
   140ac:	andeq	r4, r1, r8, lsr #16
   140b0:	andeq	r4, r1, r8, lsr #16
   140b4:	andeq	r4, r1, r8, lsr #16
   140b8:	andeq	r4, r1, r8, lsr #16
   140bc:	andeq	r4, r1, r8, lsr #16
   140c0:	andeq	r4, r1, r0, lsr #6
   140c4:	andeq	r4, r1, r0, lsr #6
   140c8:	andeq	r4, r1, r0, lsr #6
   140cc:	andeq	r4, r1, r0, lsr #6
   140d0:	andeq	r3, r1, r8, asr #25
   140d4:	andeq	r4, r1, r8, lsl #8
   140d8:	andeq	r4, r1, r8, lsr #16
   140dc:	andeq	r4, r1, r8, lsr #16
   140e0:	andeq	r4, r1, r8, lsr #16
   140e4:	andeq	r4, r1, r8, lsr #16
   140e8:	andeq	r4, r1, r8, lsr #16
   140ec:	andeq	r4, r1, r8, lsr #16
   140f0:	andeq	r4, r1, r8, lsr #16
   140f4:	andeq	r4, r1, r8, lsr #16
   140f8:	andeq	r4, r1, r8, lsr #16
   140fc:	andeq	r4, r1, r8, lsr #16
   14100:	andeq	r4, r1, r8, lsr #16
   14104:	andeq	r4, r1, r8, lsr #16
   14108:	andeq	r4, r1, r8, lsr #16
   1410c:	andeq	r4, r1, r8, lsr #16
   14110:	andeq	r4, r1, r8, lsr #16
   14114:	andeq	r4, r1, r8, lsr #16
   14118:	andeq	r4, r1, r8, lsr #16
   1411c:	andeq	r4, r1, r8, lsr #16
   14120:	andeq	r4, r1, r8, lsr #16
   14124:	andeq	r4, r1, r8, lsr #16
   14128:	andeq	r4, r1, r8, lsr #16
   1412c:	andeq	r4, r1, r8, lsr #16
   14130:	andeq	r4, r1, r8, lsr #16
   14134:	andeq	r4, r1, r8, lsr #16
   14138:	andeq	r4, r1, r8, lsr #16
   1413c:	andeq	r4, r1, r8, lsr #16
   14140:	andeq	r4, r1, r0, lsr #6
   14144:	andeq	r4, r1, r0, lsl #4
   14148:	andeq	r4, r1, r8, lsr #16
   1414c:	andeq	r4, r1, r0, lsr #6
   14150:	andeq	r4, r1, r8, lsr #16
   14154:	andeq	r4, r1, r0, lsr #6
   14158:	andeq	r4, r1, r8, lsr #16
   1415c:	andeq	r4, r1, r8, lsr #16
   14160:	andeq	r4, r1, r8, lsr #16
   14164:	andeq	r4, r1, r8, lsr #16
   14168:	andeq	r4, r1, r8, lsr #16
   1416c:	andeq	r4, r1, r8, lsr #16
   14170:	andeq	r4, r1, r8, lsr #16
   14174:	andeq	r4, r1, r8, lsr #16
   14178:	andeq	r4, r1, r8, lsr #16
   1417c:	andeq	r4, r1, r8, lsr #16
   14180:	andeq	r4, r1, r8, lsr #16
   14184:	andeq	r4, r1, r8, lsr #16
   14188:	andeq	r4, r1, r8, lsr #16
   1418c:	andeq	r4, r1, r8, lsr #16
   14190:	andeq	r4, r1, r8, lsr #16
   14194:	andeq	r4, r1, r8, lsr #16
   14198:	andeq	r4, r1, r8, lsr #16
   1419c:	andeq	r4, r1, r8, lsr #16
   141a0:	andeq	r4, r1, r8, lsr #16
   141a4:	andeq	r4, r1, r8, lsr #16
   141a8:	andeq	r4, r1, r8, lsr #16
   141ac:	andeq	r4, r1, r8, lsr #16
   141b0:	andeq	r4, r1, r8, lsr #16
   141b4:	andeq	r4, r1, r8, lsr #16
   141b8:	andeq	r4, r1, r8, lsr #16
   141bc:	andeq	r4, r1, r8, lsr #16
   141c0:	andeq	r4, r1, r0, asr #5
   141c4:	andeq	r4, r1, r0, lsr #6
   141c8:	andeq	r4, r1, r0, asr #5
   141cc:	andeq	r4, r1, r0, ror #5
   141d0:	mov	r3, #0
   141d4:	str	r3, [sp, #44]	; 0x2c
   141d8:	mov	r4, #9
   141dc:	mov	r3, #116	; 0x74
   141e0:	b	13e64 <__assert_fail@plt+0x2f0c>
   141e4:	mov	r3, #0
   141e8:	str	r3, [sp, #44]	; 0x2c
   141ec:	mov	r4, #11
   141f0:	mov	r3, #118	; 0x76
   141f4:	b	13e7c <__assert_fail@plt+0x2f24>
   141f8:	mov	r3, #0
   141fc:	str	r3, [sp, #44]	; 0x2c
   14200:	cmp	sl, #2
   14204:	beq	14228 <__assert_fail@plt+0x32d0>
   14208:	ldr	r3, [sp, #28]
   1420c:	ldr	r2, [sp, #32]
   14210:	and	r3, r3, r2
   14214:	tst	r7, r3
   14218:	bne	1489c <__assert_fail@plt+0x3944>
   1421c:	mov	r4, #92	; 0x5c
   14220:	mov	r3, r4
   14224:	b	13e7c <__assert_fail@plt+0x2f24>
   14228:	ldr	r3, [sp, #32]
   1422c:	cmp	r3, #0
   14230:	bne	14a24 <__assert_fail@plt+0x3acc>
   14234:	mov	r5, r3
   14238:	mov	r4, #92	; 0x5c
   1423c:	eor	r3, r3, #1
   14240:	ldr	r2, [sp, #36]	; 0x24
   14244:	and	r3, r3, r2
   14248:	tst	r3, #255	; 0xff
   1424c:	beq	13f54 <__assert_fail@plt+0x2ffc>
   14250:	cmp	r9, fp
   14254:	movhi	r3, #39	; 0x27
   14258:	strbhi	r3, [r8, fp]
   1425c:	add	r3, fp, #1
   14260:	cmp	r9, r3
   14264:	movhi	r2, #39	; 0x27
   14268:	strbhi	r2, [r8, r3]
   1426c:	add	fp, fp, #2
   14270:	mov	r3, #0
   14274:	str	r3, [sp, #36]	; 0x24
   14278:	b	13f54 <__assert_fail@plt+0x2ffc>
   1427c:	mov	r3, #110	; 0x6e
   14280:	b	13e64 <__assert_fail@plt+0x2f0c>
   14284:	mov	r3, #110	; 0x6e
   14288:	b	13e64 <__assert_fail@plt+0x2f0c>
   1428c:	mov	r3, #0
   14290:	str	r3, [sp, #44]	; 0x2c
   14294:	mov	r3, #110	; 0x6e
   14298:	b	13e64 <__assert_fail@plt+0x2f0c>
   1429c:	mov	r8, r9
   142a0:	mov	r7, #2
   142a4:	b	14a44 <__assert_fail@plt+0x3aec>
   142a8:	mov	r3, #97	; 0x61
   142ac:	b	13e7c <__assert_fail@plt+0x2f24>
   142b0:	mov	r3, #97	; 0x61
   142b4:	b	13e7c <__assert_fail@plt+0x2f24>
   142b8:	mov	r3, #0
   142bc:	str	r3, [sp, #44]	; 0x2c
   142c0:	ldr	r3, [sp, #24]
   142c4:	cmn	r3, #1
   142c8:	beq	142f4 <__assert_fail@plt+0x339c>
   142cc:	ldr	r3, [sp, #24]
   142d0:	subs	r3, r3, #1
   142d4:	movne	r3, #1
   142d8:	cmp	r3, #0
   142dc:	bne	1485c <__assert_fail@plt+0x3904>
   142e0:	cmp	r6, #0
   142e4:	beq	14324 <__assert_fail@plt+0x33cc>
   142e8:	mov	r5, #0
   142ec:	mov	r3, r5
   142f0:	b	13e90 <__assert_fail@plt+0x2f38>
   142f4:	ldr	r3, [sp, #48]	; 0x30
   142f8:	ldrb	r3, [r3, #1]
   142fc:	adds	r3, r3, #0
   14300:	movne	r3, #1
   14304:	b	142d8 <__assert_fail@plt+0x3380>
   14308:	mov	r3, #0
   1430c:	str	r3, [sp, #44]	; 0x2c
   14310:	b	142e0 <__assert_fail@plt+0x3388>
   14314:	mov	r3, #0
   14318:	str	r3, [sp, #44]	; 0x2c
   1431c:	b	14324 <__assert_fail@plt+0x33cc>
   14320:	ldr	r5, [sp, #44]	; 0x2c
   14324:	ldr	r3, [sp, #32]
   14328:	cmp	sl, #2
   1432c:	movne	r3, #0
   14330:	andeq	r3, r3, #1
   14334:	cmp	r3, #0
   14338:	beq	13e90 <__assert_fail@plt+0x2f38>
   1433c:	mov	r8, r9
   14340:	mov	r7, #2
   14344:	b	14a44 <__assert_fail@plt+0x3aec>
   14348:	ldr	r5, [sp, #32]
   1434c:	b	14324 <__assert_fail@plt+0x33cc>
   14350:	mov	r3, #0
   14354:	str	r3, [sp, #44]	; 0x2c
   14358:	mov	r5, r3
   1435c:	b	14324 <__assert_fail@plt+0x33cc>
   14360:	mov	r3, #0
   14364:	str	r3, [sp, #44]	; 0x2c
   14368:	cmp	sl, #2
   1436c:	strne	r5, [sp, #68]	; 0x44
   14370:	movne	r3, #0
   14374:	movne	r4, #39	; 0x27
   14378:	bne	13e90 <__assert_fail@plt+0x2f38>
   1437c:	ldr	r3, [sp, #32]
   14380:	cmp	r3, #0
   14384:	bne	14a30 <__assert_fail@plt+0x3ad8>
   14388:	ldr	r3, [sp, #72]	; 0x48
   1438c:	clz	r3, r3
   14390:	lsr	r3, r3, #5
   14394:	cmp	r9, #0
   14398:	moveq	r3, #0
   1439c:	cmp	r3, #0
   143a0:	movne	r3, #0
   143a4:	bne	143cc <__assert_fail@plt+0x3474>
   143a8:	cmp	r9, fp
   143ac:	movhi	r3, #39	; 0x27
   143b0:	strbhi	r3, [r8, fp]
   143b4:	add	r3, fp, #1
   143b8:	cmp	r9, r3
   143bc:	movhi	r2, #92	; 0x5c
   143c0:	strbhi	r2, [r8, r3]
   143c4:	mov	r3, r9
   143c8:	ldr	r9, [sp, #72]	; 0x48
   143cc:	add	r2, fp, #2
   143d0:	cmp	r2, r3
   143d4:	movcc	r1, #39	; 0x27
   143d8:	strbcc	r1, [r8, r2]
   143dc:	add	fp, fp, #3
   143e0:	str	r5, [sp, #68]	; 0x44
   143e4:	ldr	r2, [sp, #32]
   143e8:	str	r2, [sp, #36]	; 0x24
   143ec:	str	r9, [sp, #72]	; 0x48
   143f0:	mov	r9, r3
   143f4:	mov	r4, #39	; 0x27
   143f8:	mov	r3, #0
   143fc:	b	13edc <__assert_fail@plt+0x2f84>
   14400:	mov	r3, #0
   14404:	str	r3, [sp, #44]	; 0x2c
   14408:	ldr	r7, [sp, #76]	; 0x4c
   1440c:	cmp	r7, #1
   14410:	bne	14448 <__assert_fail@plt+0x34f0>
   14414:	bl	10e50 <__ctype_b_loc@plt>
   14418:	ldr	r2, [r0]
   1441c:	lsl	r3, r4, #1
   14420:	ldrh	r5, [r2, r3]
   14424:	ubfx	r5, r5, #14, #1
   14428:	mov	ip, r7
   1442c:	eor	r3, r5, #1
   14430:	ldr	r2, [sp, #28]
   14434:	and	r3, r3, r2
   14438:	ands	r3, r3, #255	; 0xff
   1443c:	beq	13e90 <__assert_fail@plt+0x2f38>
   14440:	mov	r5, #0
   14444:	b	146a4 <__assert_fail@plt+0x374c>
   14448:	mov	r2, #0
   1444c:	mov	r3, #0
   14450:	strd	r2, [sp, #104]	; 0x68
   14454:	ldr	r3, [sp, #24]
   14458:	cmn	r3, #1
   1445c:	beq	14480 <__assert_fail@plt+0x3528>
   14460:	mov	r3, #0
   14464:	str	r4, [sp, #88]	; 0x58
   14468:	str	fp, [sp, #92]	; 0x5c
   1446c:	str	r8, [sp, #56]	; 0x38
   14470:	mov	r8, r3
   14474:	str	r9, [sp, #84]	; 0x54
   14478:	ldr	r9, [sp, #48]	; 0x30
   1447c:	b	145cc <__assert_fail@plt+0x3674>
   14480:	ldr	r0, [sp, #48]	; 0x30
   14484:	bl	10e68 <strlen@plt>
   14488:	str	r0, [sp, #24]
   1448c:	b	14460 <__assert_fail@plt+0x3508>
   14490:	mov	r1, fp
   14494:	ldr	r4, [sp, #88]	; 0x58
   14498:	mov	r2, r8
   1449c:	mov	ip, r8
   144a0:	ldr	fp, [sp, #92]	; 0x5c
   144a4:	ldr	r8, [sp, #56]	; 0x38
   144a8:	ldr	r9, [sp, #84]	; 0x54
   144ac:	ldr	r0, [sp, #24]
   144b0:	cmp	r7, r0
   144b4:	bcs	1466c <__assert_fail@plt+0x3714>
   144b8:	ldrb	r3, [r1]
   144bc:	cmp	r3, #0
   144c0:	beq	14674 <__assert_fail@plt+0x371c>
   144c4:	mov	r3, r1
   144c8:	add	r2, r2, #1
   144cc:	add	r1, r6, r2
   144d0:	cmp	r0, r1
   144d4:	bls	1467c <__assert_fail@plt+0x3724>
   144d8:	ldrb	r1, [r3, #1]!
   144dc:	cmp	r1, #0
   144e0:	bne	144c8 <__assert_fail@plt+0x3570>
   144e4:	mov	ip, r2
   144e8:	mov	r5, #0
   144ec:	b	1469c <__assert_fail@plt+0x3744>
   144f0:	ldr	r3, [sp, #56]	; 0x38
   144f4:	str	r3, [sp, #64]	; 0x40
   144f8:	ldr	r8, [sp, #84]	; 0x54
   144fc:	mov	r7, #2
   14500:	b	14a44 <__assert_fail@plt+0x3aec>
   14504:	cmp	r2, r7
   14508:	beq	145a8 <__assert_fail@plt+0x3650>
   1450c:	ldrb	r3, [r2], #1
   14510:	sub	r3, r3, #91	; 0x5b
   14514:	cmp	r3, #33	; 0x21
   14518:	ldrls	pc, [pc, r3, lsl #2]
   1451c:	b	14504 <__assert_fail@plt+0x35ac>
   14520:	strdeq	r4, [r1], -r0
   14524:	strdeq	r4, [r1], -r0
   14528:	andeq	r4, r1, r4, lsl #10
   1452c:	strdeq	r4, [r1], -r0
   14530:	andeq	r4, r1, r4, lsl #10
   14534:	strdeq	r4, [r1], -r0
   14538:	andeq	r4, r1, r4, lsl #10
   1453c:	andeq	r4, r1, r4, lsl #10
   14540:	andeq	r4, r1, r4, lsl #10
   14544:	andeq	r4, r1, r4, lsl #10
   14548:	andeq	r4, r1, r4, lsl #10
   1454c:	andeq	r4, r1, r4, lsl #10
   14550:	andeq	r4, r1, r4, lsl #10
   14554:	andeq	r4, r1, r4, lsl #10
   14558:	andeq	r4, r1, r4, lsl #10
   1455c:	andeq	r4, r1, r4, lsl #10
   14560:	andeq	r4, r1, r4, lsl #10
   14564:	andeq	r4, r1, r4, lsl #10
   14568:	andeq	r4, r1, r4, lsl #10
   1456c:	andeq	r4, r1, r4, lsl #10
   14570:	andeq	r4, r1, r4, lsl #10
   14574:	andeq	r4, r1, r4, lsl #10
   14578:	andeq	r4, r1, r4, lsl #10
   1457c:	andeq	r4, r1, r4, lsl #10
   14580:	andeq	r4, r1, r4, lsl #10
   14584:	andeq	r4, r1, r4, lsl #10
   14588:	andeq	r4, r1, r4, lsl #10
   1458c:	andeq	r4, r1, r4, lsl #10
   14590:	andeq	r4, r1, r4, lsl #10
   14594:	andeq	r4, r1, r4, lsl #10
   14598:	andeq	r4, r1, r4, lsl #10
   1459c:	andeq	r4, r1, r4, lsl #10
   145a0:	andeq	r4, r1, r4, lsl #10
   145a4:	strdeq	r4, [r1], -r0
   145a8:	ldr	r0, [sp, #100]	; 0x64
   145ac:	bl	10da8 <iswprint@plt>
   145b0:	cmp	r0, #0
   145b4:	moveq	r5, #0
   145b8:	add	r8, r8, r4
   145bc:	add	r0, sp, #104	; 0x68
   145c0:	bl	10d48 <mbsinit@plt>
   145c4:	cmp	r0, #0
   145c8:	bne	14638 <__assert_fail@plt+0x36e0>
   145cc:	add	r7, r6, r8
   145d0:	add	fp, r9, r7
   145d4:	add	r3, sp, #104	; 0x68
   145d8:	ldr	r2, [sp, #24]
   145dc:	sub	r2, r2, r7
   145e0:	mov	r1, fp
   145e4:	add	r0, sp, #100	; 0x64
   145e8:	bl	16d9c <__assert_fail@plt+0x5e44>
   145ec:	subs	r4, r0, #0
   145f0:	beq	14688 <__assert_fail@plt+0x3730>
   145f4:	cmn	r4, #1
   145f8:	beq	14650 <__assert_fail@plt+0x36f8>
   145fc:	cmn	r4, #2
   14600:	beq	14490 <__assert_fail@plt+0x3538>
   14604:	ldr	r3, [sp, #32]
   14608:	cmp	sl, #2
   1460c:	movne	r3, #0
   14610:	andeq	r3, r3, #1
   14614:	cmp	r3, #0
   14618:	beq	145a8 <__assert_fail@plt+0x3650>
   1461c:	cmp	r4, #1
   14620:	bls	145a8 <__assert_fail@plt+0x3650>
   14624:	add	r2, r7, #1
   14628:	add	r2, r9, r2
   1462c:	add	r3, r9, r4
   14630:	add	r7, r3, r7
   14634:	b	1450c <__assert_fail@plt+0x35b4>
   14638:	ldr	r4, [sp, #88]	; 0x58
   1463c:	mov	ip, r8
   14640:	ldr	fp, [sp, #92]	; 0x5c
   14644:	ldr	r8, [sp, #56]	; 0x38
   14648:	ldr	r9, [sp, #84]	; 0x54
   1464c:	b	1469c <__assert_fail@plt+0x3744>
   14650:	ldr	r4, [sp, #88]	; 0x58
   14654:	mov	ip, r8
   14658:	ldr	fp, [sp, #92]	; 0x5c
   1465c:	ldr	r8, [sp, #56]	; 0x38
   14660:	ldr	r9, [sp, #84]	; 0x54
   14664:	mov	r5, #0
   14668:	b	1469c <__assert_fail@plt+0x3744>
   1466c:	mov	r5, #0
   14670:	b	1469c <__assert_fail@plt+0x3744>
   14674:	mov	r5, #0
   14678:	b	1469c <__assert_fail@plt+0x3744>
   1467c:	mov	ip, r2
   14680:	mov	r5, #0
   14684:	b	1469c <__assert_fail@plt+0x3744>
   14688:	ldr	r4, [sp, #88]	; 0x58
   1468c:	mov	ip, r8
   14690:	ldr	fp, [sp, #92]	; 0x5c
   14694:	ldr	r8, [sp, #56]	; 0x38
   14698:	ldr	r9, [sp, #84]	; 0x54
   1469c:	cmp	ip, #1
   146a0:	bls	1442c <__assert_fail@plt+0x34d4>
   146a4:	add	lr, r6, ip
   146a8:	ldr	r3, [sp, #48]	; 0x30
   146ac:	add	r1, r3, r6
   146b0:	mov	r3, #0
   146b4:	eor	r0, r5, #1
   146b8:	ldr	r2, [sp, #28]
   146bc:	and	r0, r0, r2
   146c0:	uxtb	r0, r0
   146c4:	str	r0, [sp, #56]	; 0x38
   146c8:	mov	r7, #92	; 0x5c
   146cc:	ldr	ip, [sp, #36]	; 0x24
   146d0:	str	r5, [sp, #84]	; 0x54
   146d4:	ldr	r2, [sp, #44]	; 0x2c
   146d8:	b	14748 <__assert_fail@plt+0x37f0>
   146dc:	cmp	r2, #0
   146e0:	beq	146f0 <__assert_fail@plt+0x3798>
   146e4:	cmp	r9, fp
   146e8:	strbhi	r7, [r8, fp]
   146ec:	add	fp, fp, #1
   146f0:	add	r5, r6, #1
   146f4:	cmp	r5, lr
   146f8:	bcs	14804 <__assert_fail@plt+0x38ac>
   146fc:	eor	r2, r3, #1
   14700:	and	r2, r2, ip
   14704:	ands	r2, r2, #255	; 0xff
   14708:	beq	14820 <__assert_fail@plt+0x38c8>
   1470c:	cmp	r9, fp
   14710:	movhi	r2, #39	; 0x27
   14714:	strbhi	r2, [r8, fp]
   14718:	add	r2, fp, #1
   1471c:	cmp	r9, r2
   14720:	movhi	ip, #39	; 0x27
   14724:	strbhi	ip, [r8, r2]
   14728:	add	fp, fp, #2
   1472c:	ldr	ip, [sp, #56]	; 0x38
   14730:	mov	r2, ip
   14734:	mov	r6, r5
   14738:	cmp	r9, fp
   1473c:	strbhi	r4, [r8, fp]
   14740:	add	fp, fp, #1
   14744:	ldrb	r4, [r1, #1]!
   14748:	cmp	r0, #0
   1474c:	beq	146dc <__assert_fail@plt+0x3784>
   14750:	ldr	r3, [sp, #32]
   14754:	cmp	r3, #0
   14758:	bne	149ec <__assert_fail@plt+0x3a94>
   1475c:	eor	r3, ip, #1
   14760:	cmp	sl, #2
   14764:	movne	r3, #0
   14768:	andeq	r3, r3, #1
   1476c:	cmp	r3, #0
   14770:	beq	147a8 <__assert_fail@plt+0x3850>
   14774:	cmp	r9, fp
   14778:	movhi	ip, #39	; 0x27
   1477c:	strbhi	ip, [r8, fp]
   14780:	add	ip, fp, #1
   14784:	cmp	r9, ip
   14788:	movhi	r5, #36	; 0x24
   1478c:	strbhi	r5, [r8, ip]
   14790:	add	ip, fp, #2
   14794:	cmp	r9, ip
   14798:	movhi	r5, #39	; 0x27
   1479c:	strbhi	r5, [r8, ip]
   147a0:	add	fp, fp, #3
   147a4:	mov	ip, r3
   147a8:	cmp	r9, fp
   147ac:	strbhi	r7, [r8, fp]
   147b0:	add	r3, fp, #1
   147b4:	cmp	r9, r3
   147b8:	bls	147c8 <__assert_fail@plt+0x3870>
   147bc:	lsr	r5, r4, #6
   147c0:	add	r5, r5, #48	; 0x30
   147c4:	strb	r5, [r8, r3]
   147c8:	add	r3, fp, #2
   147cc:	cmp	r9, r3
   147d0:	bls	147e0 <__assert_fail@plt+0x3888>
   147d4:	ubfx	r5, r4, #3, #3
   147d8:	add	r5, r5, #48	; 0x30
   147dc:	strb	r5, [r8, r3]
   147e0:	add	fp, fp, #3
   147e4:	and	r4, r4, #7
   147e8:	add	r4, r4, #48	; 0x30
   147ec:	add	r5, r6, #1
   147f0:	cmp	r5, lr
   147f4:	bcs	14810 <__assert_fail@plt+0x38b8>
   147f8:	ldr	r3, [sp, #56]	; 0x38
   147fc:	mov	r6, r5
   14800:	b	14738 <__assert_fail@plt+0x37e0>
   14804:	str	ip, [sp, #36]	; 0x24
   14808:	ldr	r5, [sp, #84]	; 0x54
   1480c:	b	1423c <__assert_fail@plt+0x32e4>
   14810:	str	ip, [sp, #36]	; 0x24
   14814:	ldr	r5, [sp, #84]	; 0x54
   14818:	mov	r3, r0
   1481c:	b	1423c <__assert_fail@plt+0x32e4>
   14820:	mov	r6, r5
   14824:	b	14738 <__assert_fail@plt+0x37e0>
   14828:	ldr	r3, [sp, #44]	; 0x2c
   1482c:	b	13e90 <__assert_fail@plt+0x2f38>
   14830:	mov	r5, #0
   14834:	mov	r3, r5
   14838:	mov	r4, #63	; 0x3f
   1483c:	b	13e90 <__assert_fail@plt+0x2f38>
   14840:	mov	r5, #0
   14844:	mov	r3, r5
   14848:	mov	r4, #63	; 0x3f
   1484c:	b	13e90 <__assert_fail@plt+0x2f38>
   14850:	mov	r5, #0
   14854:	mov	r3, r5
   14858:	b	13e90 <__assert_fail@plt+0x2f38>
   1485c:	mov	r5, #0
   14860:	mov	r3, r5
   14864:	b	13e90 <__assert_fail@plt+0x2f38>
   14868:	ldr	r5, [sp, #44]	; 0x2c
   1486c:	ldr	r3, [sp, #32]
   14870:	b	13e90 <__assert_fail@plt+0x2f38>
   14874:	ldr	r5, [sp, #44]	; 0x2c
   14878:	mov	r3, #0
   1487c:	str	r3, [sp, #44]	; 0x2c
   14880:	b	13e90 <__assert_fail@plt+0x2f38>
   14884:	mov	r4, r3
   14888:	mov	r5, #0
   1488c:	b	13ee8 <__assert_fail@plt+0x2f90>
   14890:	mov	r5, #0
   14894:	mov	r4, #97	; 0x61
   14898:	b	13ee8 <__assert_fail@plt+0x2f90>
   1489c:	mov	r5, #0
   148a0:	mov	r3, r5
   148a4:	mov	r4, #92	; 0x5c
   148a8:	b	1423c <__assert_fail@plt+0x32e4>
   148ac:	ldr	r3, [sp, #48]	; 0x30
   148b0:	ldrb	r5, [r3, r6]
   148b4:	adds	r5, r5, #0
   148b8:	movne	r5, #1
   148bc:	b	13f8c <__assert_fail@plt+0x3034>
   148c0:	cmp	sl, #2
   148c4:	movne	r3, #0
   148c8:	moveq	r3, #1
   148cc:	ldr	r1, [sp, #32]
   148d0:	cmp	fp, #0
   148d4:	andeq	r2, r3, r1
   148d8:	movne	r2, #0
   148dc:	cmp	r2, #0
   148e0:	bne	14a00 <__assert_fail@plt+0x3aa8>
   148e4:	eor	r2, r1, #1
   148e8:	uxtb	r2, r2
   148ec:	and	r3, r3, r2
   148f0:	ldr	r1, [sp, #68]	; 0x44
   148f4:	ands	r3, r1, r3
   148f8:	beq	1498c <__assert_fail@plt+0x3a34>
   148fc:	ldr	r2, [sp, #40]	; 0x28
   14900:	cmp	r2, #0
   14904:	bne	1493c <__assert_fail@plt+0x39e4>
   14908:	ldr	r2, [sp, #72]	; 0x48
   1490c:	adds	r2, r2, #0
   14910:	movne	r2, #1
   14914:	cmp	r9, #0
   14918:	movne	r2, #0
   1491c:	str	r2, [sp, #68]	; 0x44
   14920:	mov	sl, #2
   14924:	ldr	r1, [sp, #40]	; 0x28
   14928:	str	r1, [sp, #32]
   1492c:	cmp	r2, #0
   14930:	beq	14980 <__assert_fail@plt+0x3a28>
   14934:	ldr	r9, [sp, #72]	; 0x48
   14938:	b	13694 <__assert_fail@plt+0x273c>
   1493c:	ldr	r3, [sp, #168]	; 0xa8
   14940:	str	r3, [sp, #16]
   14944:	ldr	r3, [sp, #164]	; 0xa4
   14948:	str	r3, [sp, #12]
   1494c:	ldr	r3, [sp, #160]	; 0xa0
   14950:	str	r3, [sp, #8]
   14954:	ldr	r3, [sp, #156]	; 0x9c
   14958:	str	r3, [sp, #4]
   1495c:	mov	r3, #5
   14960:	str	r3, [sp]
   14964:	ldr	r3, [sp, #24]
   14968:	ldr	r2, [sp, #48]	; 0x30
   1496c:	ldr	r1, [sp, #72]	; 0x48
   14970:	ldr	r0, [sp, #64]	; 0x40
   14974:	bl	1361c <__assert_fail@plt+0x26c4>
   14978:	mov	fp, r0
   1497c:	b	14a9c <__assert_fail@plt+0x3b44>
   14980:	mov	r8, r9
   14984:	mov	r2, r3
   14988:	b	14990 <__assert_fail@plt+0x3a38>
   1498c:	mov	r8, r9
   14990:	ldr	r3, [sp, #60]	; 0x3c
   14994:	cmp	r3, #0
   14998:	moveq	r2, #0
   1499c:	andne	r2, r2, #1
   149a0:	cmp	r2, #0
   149a4:	beq	149d4 <__assert_fail@plt+0x3a7c>
   149a8:	mov	r2, r3
   149ac:	ldrb	r3, [r3]
   149b0:	cmp	r3, #0
   149b4:	beq	149d4 <__assert_fail@plt+0x3a7c>
   149b8:	ldr	r1, [sp, #64]	; 0x40
   149bc:	cmp	r8, fp
   149c0:	strbhi	r3, [r1, fp]
   149c4:	add	fp, fp, #1
   149c8:	ldrb	r3, [r2, #1]!
   149cc:	cmp	r3, #0
   149d0:	bne	149bc <__assert_fail@plt+0x3a64>
   149d4:	cmp	r8, fp
   149d8:	bls	14a9c <__assert_fail@plt+0x3b44>
   149dc:	mov	r3, #0
   149e0:	ldr	r2, [sp, #64]	; 0x40
   149e4:	strb	r3, [r2, fp]
   149e8:	b	14a9c <__assert_fail@plt+0x3b44>
   149ec:	mov	r8, r9
   149f0:	mov	r7, sl
   149f4:	ldr	r3, [sp, #32]
   149f8:	str	r3, [sp, #28]
   149fc:	b	14a44 <__assert_fail@plt+0x3aec>
   14a00:	mov	r8, r9
   14a04:	mov	r7, #2
   14a08:	b	14a44 <__assert_fail@plt+0x3aec>
   14a0c:	mov	r8, r9
   14a10:	mov	r7, sl
   14a14:	b	14a44 <__assert_fail@plt+0x3aec>
   14a18:	mov	r8, r9
   14a1c:	mov	r7, sl
   14a20:	b	14a44 <__assert_fail@plt+0x3aec>
   14a24:	mov	r8, r9
   14a28:	mov	r7, sl
   14a2c:	b	14a44 <__assert_fail@plt+0x3aec>
   14a30:	mov	r8, r9
   14a34:	mov	r7, sl
   14a38:	b	14a44 <__assert_fail@plt+0x3aec>
   14a3c:	mov	r8, r9
   14a40:	mov	r7, sl
   14a44:	ldr	r3, [sp, #28]
   14a48:	cmp	r7, #2
   14a4c:	movne	r3, #0
   14a50:	andeq	r3, r3, #1
   14a54:	cmp	r3, #0
   14a58:	movne	r7, #4
   14a5c:	ldr	r3, [sp, #168]	; 0xa8
   14a60:	str	r3, [sp, #16]
   14a64:	ldr	r3, [sp, #164]	; 0xa4
   14a68:	str	r3, [sp, #12]
   14a6c:	mov	r3, #0
   14a70:	str	r3, [sp, #8]
   14a74:	ldr	r3, [sp, #156]	; 0x9c
   14a78:	bic	r3, r3, #2
   14a7c:	str	r3, [sp, #4]
   14a80:	str	r7, [sp]
   14a84:	ldr	r3, [sp, #24]
   14a88:	ldr	r2, [sp, #48]	; 0x30
   14a8c:	mov	r1, r8
   14a90:	ldr	r0, [sp, #64]	; 0x40
   14a94:	bl	1361c <__assert_fail@plt+0x26c4>
   14a98:	mov	fp, r0
   14a9c:	mov	r0, fp
   14aa0:	add	sp, sp, #116	; 0x74
   14aa4:	ldrd	r4, [sp]
   14aa8:	ldrd	r6, [sp, #8]
   14aac:	ldrd	r8, [sp, #16]
   14ab0:	ldrd	sl, [sp, #24]
   14ab4:	add	sp, sp, #32
   14ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   14abc:	mov	r8, r9
   14ac0:	mov	r7, sl
   14ac4:	b	14a5c <__assert_fail@plt+0x3b04>
   14ac8:	add	fp, fp, #4
   14acc:	str	r3, [sp, #36]	; 0x24
   14ad0:	mov	r5, #0
   14ad4:	mov	r4, #48	; 0x30
   14ad8:	b	13e90 <__assert_fail@plt+0x2f38>
   14adc:	mov	r3, #1
   14ae0:	str	r3, [sp, #32]
   14ae4:	str	r3, [sp, #28]
   14ae8:	str	r3, [sp, #52]	; 0x34
   14aec:	movw	r3, #31816	; 0x7c48
   14af0:	movt	r3, #1
   14af4:	str	r3, [sp, #60]	; 0x3c
   14af8:	mov	fp, #0
   14afc:	mov	sl, #5
   14b00:	b	136f4 <__assert_fail@plt+0x279c>
   14b04:	ldr	r3, [sp, #48]	; 0x30
   14b08:	ldrb	r4, [r3, r6]
   14b0c:	cmp	r4, #126	; 0x7e
   14b10:	ldrls	pc, [pc, r4, lsl #2]
   14b14:	b	14400 <__assert_fail@plt+0x34a8>
   14b18:	andeq	r3, r1, r8, lsl #23
   14b1c:	andeq	r4, r1, r0, lsl #8
   14b20:	andeq	r4, r1, r0, lsl #8
   14b24:	andeq	r4, r1, r0, lsl #8
   14b28:	andeq	r4, r1, r0, lsl #8
   14b2c:	andeq	r4, r1, r0, lsl #8
   14b30:	andeq	r4, r1, r0, lsl #8
   14b34:	muleq	r1, r0, r8
   14b38:	andeq	r3, r1, ip, lsr #28
   14b3c:	ldrdeq	r4, [r1], -r0
   14b40:	andeq	r4, r1, ip, lsl #5
   14b44:	andeq	r4, r1, r4, ror #3
   14b48:	andeq	r3, r1, r0, asr #28
   14b4c:	andeq	r3, r1, r4, asr lr
   14b50:	andeq	r4, r1, r0, lsl #8
   14b54:	andeq	r4, r1, r0, lsl #8
   14b58:	andeq	r4, r1, r0, lsl #8
   14b5c:	andeq	r4, r1, r0, lsl #8
   14b60:	andeq	r4, r1, r0, lsl #8
   14b64:	andeq	r4, r1, r0, lsl #8
   14b68:	andeq	r4, r1, r0, lsl #8
   14b6c:	andeq	r4, r1, r0, lsl #8
   14b70:	andeq	r4, r1, r0, lsl #8
   14b74:	andeq	r4, r1, r0, lsl #8
   14b78:	andeq	r4, r1, r0, lsl #8
   14b7c:	andeq	r4, r1, r0, lsl #8
   14b80:	andeq	r4, r1, r0, lsl #8
   14b84:	andeq	r4, r1, r0, lsl #8
   14b88:	andeq	r4, r1, r0, lsl #8
   14b8c:	andeq	r4, r1, r0, lsl #8
   14b90:	andeq	r4, r1, r0, lsl #8
   14b94:	andeq	r4, r1, r0, lsl #8
   14b98:	andeq	r4, r1, r4, lsl r3
   14b9c:	andeq	r4, r1, r0, asr r3
   14ba0:	andeq	r4, r1, r0, asr r3
   14ba4:	andeq	r4, r1, r8, lsl #6
   14ba8:	andeq	r4, r1, r0, asr r3
   14bac:	andeq	r4, r1, r4, ror r8
   14bb0:	andeq	r4, r1, r0, asr r3
   14bb4:	andeq	r4, r1, r0, ror #6
   14bb8:	andeq	r4, r1, r0, asr r3
   14bbc:	andeq	r4, r1, r0, asr r3
   14bc0:	andeq	r4, r1, r0, asr r3
   14bc4:	andeq	r4, r1, r4, ror r8
   14bc8:	andeq	r4, r1, r4, ror r8
   14bcc:	andeq	r4, r1, r4, ror r8
   14bd0:	andeq	r4, r1, r4, ror r8
   14bd4:	andeq	r4, r1, r4, ror r8
   14bd8:	andeq	r4, r1, r4, ror r8
   14bdc:	andeq	r4, r1, r4, ror r8
   14be0:	andeq	r4, r1, r4, ror r8
   14be4:	andeq	r4, r1, r4, ror r8
   14be8:	andeq	r4, r1, r4, ror r8
   14bec:	andeq	r4, r1, r4, ror r8
   14bf0:	andeq	r4, r1, r4, ror r8
   14bf4:	andeq	r4, r1, r4, ror r8
   14bf8:	andeq	r4, r1, r4, ror r8
   14bfc:	andeq	r4, r1, r4, ror r8
   14c00:	andeq	r4, r1, r4, ror r8
   14c04:	andeq	r4, r1, r0, asr r3
   14c08:	andeq	r4, r1, r0, asr r3
   14c0c:	andeq	r4, r1, r0, asr r3
   14c10:	andeq	r4, r1, r0, asr r3
   14c14:	andeq	r3, r1, r0, asr #25
   14c18:	andeq	r4, r1, r0, lsl #8
   14c1c:	andeq	r4, r1, r4, ror r8
   14c20:	andeq	r4, r1, r4, ror r8
   14c24:	andeq	r4, r1, r4, ror r8
   14c28:	andeq	r4, r1, r4, ror r8
   14c2c:	andeq	r4, r1, r4, ror r8
   14c30:	andeq	r4, r1, r4, ror r8
   14c34:	andeq	r4, r1, r4, ror r8
   14c38:	andeq	r4, r1, r4, ror r8
   14c3c:	andeq	r4, r1, r4, ror r8
   14c40:	andeq	r4, r1, r4, ror r8
   14c44:	andeq	r4, r1, r4, ror r8
   14c48:	andeq	r4, r1, r4, ror r8
   14c4c:	andeq	r4, r1, r4, ror r8
   14c50:	andeq	r4, r1, r4, ror r8
   14c54:	andeq	r4, r1, r4, ror r8
   14c58:	andeq	r4, r1, r4, ror r8
   14c5c:	andeq	r4, r1, r4, ror r8
   14c60:	andeq	r4, r1, r4, ror r8
   14c64:	andeq	r4, r1, r4, ror r8
   14c68:	andeq	r4, r1, r4, ror r8
   14c6c:	andeq	r4, r1, r4, ror r8
   14c70:	andeq	r4, r1, r4, ror r8
   14c74:	andeq	r4, r1, r4, ror r8
   14c78:	andeq	r4, r1, r4, ror r8
   14c7c:	andeq	r4, r1, r4, ror r8
   14c80:	andeq	r4, r1, r4, ror r8
   14c84:	andeq	r4, r1, r0, asr r3
   14c88:	strdeq	r4, [r1], -r8
   14c8c:	andeq	r4, r1, r4, ror r8
   14c90:	andeq	r4, r1, r0, asr r3
   14c94:	andeq	r4, r1, r4, ror r8
   14c98:	andeq	r4, r1, r0, asr r3
   14c9c:	andeq	r4, r1, r4, ror r8
   14ca0:	andeq	r4, r1, r4, ror r8
   14ca4:	andeq	r4, r1, r4, ror r8
   14ca8:	andeq	r4, r1, r4, ror r8
   14cac:	andeq	r4, r1, r4, ror r8
   14cb0:	andeq	r4, r1, r4, ror r8
   14cb4:	andeq	r4, r1, r4, ror r8
   14cb8:	andeq	r4, r1, r4, ror r8
   14cbc:	andeq	r4, r1, r4, ror r8
   14cc0:	andeq	r4, r1, r4, ror r8
   14cc4:	andeq	r4, r1, r4, ror r8
   14cc8:	andeq	r4, r1, r4, ror r8
   14ccc:	andeq	r4, r1, r4, ror r8
   14cd0:	andeq	r4, r1, r4, ror r8
   14cd4:	andeq	r4, r1, r4, ror r8
   14cd8:	andeq	r4, r1, r4, ror r8
   14cdc:	andeq	r4, r1, r4, ror r8
   14ce0:	andeq	r4, r1, r4, ror r8
   14ce4:	andeq	r4, r1, r4, ror r8
   14ce8:	andeq	r4, r1, r4, ror r8
   14cec:	andeq	r4, r1, r4, ror r8
   14cf0:	andeq	r4, r1, r4, ror r8
   14cf4:	andeq	r4, r1, r4, ror r8
   14cf8:	andeq	r4, r1, r4, ror r8
   14cfc:	andeq	r4, r1, r4, ror r8
   14d00:	andeq	r4, r1, r4, ror r8
   14d04:			; <UNDEFINED> instruction: 0x000142b8
   14d08:	andeq	r4, r1, r0, asr r3
   14d0c:			; <UNDEFINED> instruction: 0x000142b8
   14d10:	andeq	r4, r1, r8, lsl #6
   14d14:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14d18:	strd	r6, [sp, #8]
   14d1c:	strd	r8, [sp, #16]
   14d20:	strd	sl, [sp, #24]
   14d24:	str	lr, [sp, #32]
   14d28:	sub	sp, sp, #52	; 0x34
   14d2c:	mov	r5, r0
   14d30:	str	r1, [sp, #24]
   14d34:	str	r2, [sp, #28]
   14d38:	mov	r4, r3
   14d3c:	bl	10e8c <__errno_location@plt>
   14d40:	str	r0, [sp, #32]
   14d44:	ldr	r3, [r0]
   14d48:	str	r3, [sp, #36]	; 0x24
   14d4c:	movw	r3, #37120	; 0x9100
   14d50:	movt	r3, #2
   14d54:	ldr	r6, [r3]
   14d58:	cmn	r5, #-2147483647	; 0x80000001
   14d5c:	movne	r3, #0
   14d60:	moveq	r3, #1
   14d64:	orrs	r3, r3, r5, lsr #31
   14d68:	bne	14ecc <__assert_fail@plt+0x3f74>
   14d6c:	movw	r3, #37120	; 0x9100
   14d70:	movt	r3, #2
   14d74:	ldr	r2, [r3, #4]
   14d78:	cmp	r2, r5
   14d7c:	bgt	14dec <__assert_fail@plt+0x3e94>
   14d80:	str	r2, [sp, #44]	; 0x2c
   14d84:	add	r3, r3, #8
   14d88:	cmp	r6, r3
   14d8c:	beq	14ed0 <__assert_fail@plt+0x3f78>
   14d90:	sub	r2, r5, r2
   14d94:	mov	r3, #8
   14d98:	str	r3, [sp]
   14d9c:	mvn	r3, #-2147483648	; 0x80000000
   14da0:	add	r2, r2, #1
   14da4:	add	r1, sp, #44	; 0x2c
   14da8:	mov	r0, r6
   14dac:	bl	15f6c <__assert_fail@plt+0x5014>
   14db0:	mov	r6, r0
   14db4:	movw	r3, #37120	; 0x9100
   14db8:	movt	r3, #2
   14dbc:	str	r0, [r3]
   14dc0:	movw	r7, #37120	; 0x9100
   14dc4:	movt	r7, #2
   14dc8:	ldr	r0, [r7, #4]
   14dcc:	ldr	r2, [sp, #44]	; 0x2c
   14dd0:	sub	r2, r2, r0
   14dd4:	lsl	r2, r2, #3
   14dd8:	mov	r1, #0
   14ddc:	add	r0, r6, r0, lsl #3
   14de0:	bl	10ea4 <memset@plt>
   14de4:	ldr	r3, [sp, #44]	; 0x2c
   14de8:	str	r3, [r7, #4]
   14dec:	add	fp, r6, r5, lsl #3
   14df0:	ldr	r8, [r6, r5, lsl #3]
   14df4:	ldr	r7, [fp, #4]
   14df8:	ldr	r3, [r4, #4]
   14dfc:	orr	r9, r3, #1
   14e00:	add	sl, r4, #8
   14e04:	ldr	r3, [r4, #44]	; 0x2c
   14e08:	str	r3, [sp, #16]
   14e0c:	ldr	r3, [r4, #40]	; 0x28
   14e10:	str	r3, [sp, #12]
   14e14:	str	sl, [sp, #8]
   14e18:	str	r9, [sp, #4]
   14e1c:	ldr	r3, [r4]
   14e20:	str	r3, [sp]
   14e24:	ldr	r3, [sp, #28]
   14e28:	ldr	r2, [sp, #24]
   14e2c:	mov	r1, r8
   14e30:	mov	r0, r7
   14e34:	bl	1361c <__assert_fail@plt+0x26c4>
   14e38:	cmp	r8, r0
   14e3c:	bhi	14ea0 <__assert_fail@plt+0x3f48>
   14e40:	add	r8, r0, #1
   14e44:	str	r8, [r6, r5, lsl #3]
   14e48:	movw	r3, #37232	; 0x9170
   14e4c:	movt	r3, #2
   14e50:	cmp	r7, r3
   14e54:	beq	14e60 <__assert_fail@plt+0x3f08>
   14e58:	mov	r0, r7
   14e5c:	bl	13150 <__assert_fail@plt+0x21f8>
   14e60:	mov	r0, r8
   14e64:	bl	15d68 <__assert_fail@plt+0x4e10>
   14e68:	mov	r7, r0
   14e6c:	str	r0, [fp, #4]
   14e70:	ldr	r3, [r4, #44]	; 0x2c
   14e74:	str	r3, [sp, #16]
   14e78:	ldr	r3, [r4, #40]	; 0x28
   14e7c:	str	r3, [sp, #12]
   14e80:	str	sl, [sp, #8]
   14e84:	str	r9, [sp, #4]
   14e88:	ldr	r3, [r4]
   14e8c:	str	r3, [sp]
   14e90:	ldr	r3, [sp, #28]
   14e94:	ldr	r2, [sp, #24]
   14e98:	mov	r1, r8
   14e9c:	bl	1361c <__assert_fail@plt+0x26c4>
   14ea0:	ldr	r3, [sp, #32]
   14ea4:	ldr	r2, [sp, #36]	; 0x24
   14ea8:	str	r2, [r3]
   14eac:	mov	r0, r7
   14eb0:	add	sp, sp, #52	; 0x34
   14eb4:	ldrd	r4, [sp]
   14eb8:	ldrd	r6, [sp, #8]
   14ebc:	ldrd	r8, [sp, #16]
   14ec0:	ldrd	sl, [sp, #24]
   14ec4:	add	sp, sp, #32
   14ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ecc:	bl	10f40 <abort@plt>
   14ed0:	sub	r2, r5, r2
   14ed4:	mov	r3, #8
   14ed8:	str	r3, [sp]
   14edc:	mvn	r3, #-2147483648	; 0x80000000
   14ee0:	add	r2, r2, #1
   14ee4:	add	r1, sp, #44	; 0x2c
   14ee8:	mov	r0, #0
   14eec:	bl	15f6c <__assert_fail@plt+0x5014>
   14ef0:	mov	r6, r0
   14ef4:	movw	r3, #37120	; 0x9100
   14ef8:	movt	r3, #2
   14efc:	str	r0, [r3]
   14f00:	ldrd	r2, [r3, #8]
   14f04:	strd	r2, [r0]
   14f08:	b	14dc0 <__assert_fail@plt+0x3e68>
   14f0c:	strd	r4, [sp, #-16]!
   14f10:	str	r6, [sp, #8]
   14f14:	str	lr, [sp, #12]
   14f18:	mov	r4, r0
   14f1c:	bl	10e8c <__errno_location@plt>
   14f20:	mov	r5, r0
   14f24:	ldr	r6, [r0]
   14f28:	cmp	r4, #0
   14f2c:	ldr	r3, [pc, #32]	; 14f54 <__assert_fail@plt+0x3ffc>
   14f30:	moveq	r4, r3
   14f34:	mov	r1, #48	; 0x30
   14f38:	mov	r0, r4
   14f3c:	bl	160dc <__assert_fail@plt+0x5184>
   14f40:	str	r6, [r5]
   14f44:	ldrd	r4, [sp]
   14f48:	ldr	r6, [sp, #8]
   14f4c:	add	sp, sp, #12
   14f50:	pop	{pc}		; (ldr pc, [sp], #4)
   14f54:	andeq	r9, r2, r0, ror r2
   14f58:	subs	r3, r0, #0
   14f5c:	ldr	r2, [pc, #8]	; 14f6c <__assert_fail@plt+0x4014>
   14f60:	moveq	r3, r2
   14f64:	ldr	r0, [r3]
   14f68:	bx	lr
   14f6c:	andeq	r9, r2, r0, ror r2
   14f70:	subs	r3, r0, #0
   14f74:	ldr	r2, [pc, #8]	; 14f84 <__assert_fail@plt+0x402c>
   14f78:	moveq	r3, r2
   14f7c:	str	r1, [r3]
   14f80:	bx	lr
   14f84:	andeq	r9, r2, r0, ror r2
   14f88:	push	{lr}		; (str lr, [sp, #-4]!)
   14f8c:	subs	r3, r0, #0
   14f90:	ldr	r0, [pc, #44]	; 14fc4 <__assert_fail@plt+0x406c>
   14f94:	moveq	r3, r0
   14f98:	add	r3, r3, #8
   14f9c:	lsr	lr, r1, #5
   14fa0:	and	r1, r1, #31
   14fa4:	ldr	ip, [r3, lr, lsl #2]
   14fa8:	lsr	r0, ip, r1
   14fac:	eor	r2, r2, r0
   14fb0:	and	r2, r2, #1
   14fb4:	eor	r1, ip, r2, lsl r1
   14fb8:	str	r1, [r3, lr, lsl #2]
   14fbc:	and	r0, r0, #1
   14fc0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc4:	andeq	r9, r2, r0, ror r2
   14fc8:	subs	r3, r0, #0
   14fcc:	ldr	r2, [pc, #12]	; 14fe0 <__assert_fail@plt+0x4088>
   14fd0:	moveq	r3, r2
   14fd4:	ldr	r0, [r3, #4]
   14fd8:	str	r1, [r3, #4]
   14fdc:	bx	lr
   14fe0:	andeq	r9, r2, r0, ror r2
   14fe4:	subs	r3, r0, #0
   14fe8:	ldr	r0, [pc, #44]	; 1501c <__assert_fail@plt+0x40c4>
   14fec:	moveq	r3, r0
   14ff0:	mov	r0, #10
   14ff4:	str	r0, [r3]
   14ff8:	cmp	r2, #0
   14ffc:	cmpne	r1, #0
   15000:	beq	15010 <__assert_fail@plt+0x40b8>
   15004:	str	r1, [r3, #40]	; 0x28
   15008:	str	r2, [r3, #44]	; 0x2c
   1500c:	bx	lr
   15010:	str	r4, [sp, #-8]!
   15014:	str	lr, [sp, #4]
   15018:	bl	10f40 <abort@plt>
   1501c:	andeq	r9, r2, r0, ror r2
   15020:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15024:	strd	r6, [sp, #8]
   15028:	strd	r8, [sp, #16]
   1502c:	str	sl, [sp, #24]
   15030:	str	lr, [sp, #28]
   15034:	sub	sp, sp, #24
   15038:	mov	r7, r0
   1503c:	mov	r8, r1
   15040:	mov	r9, r2
   15044:	mov	sl, r3
   15048:	ldr	r4, [sp, #56]	; 0x38
   1504c:	cmp	r4, #0
   15050:	ldr	r3, [pc, #104]	; 150c0 <__assert_fail@plt+0x4168>
   15054:	moveq	r4, r3
   15058:	bl	10e8c <__errno_location@plt>
   1505c:	mov	r5, r0
   15060:	ldr	r6, [r0]
   15064:	ldr	r3, [r4, #44]	; 0x2c
   15068:	str	r3, [sp, #16]
   1506c:	ldr	r3, [r4, #40]	; 0x28
   15070:	str	r3, [sp, #12]
   15074:	add	r3, r4, #8
   15078:	str	r3, [sp, #8]
   1507c:	ldr	r3, [r4, #4]
   15080:	str	r3, [sp, #4]
   15084:	ldr	r3, [r4]
   15088:	str	r3, [sp]
   1508c:	mov	r3, sl
   15090:	mov	r2, r9
   15094:	mov	r1, r8
   15098:	mov	r0, r7
   1509c:	bl	1361c <__assert_fail@plt+0x26c4>
   150a0:	str	r6, [r5]
   150a4:	add	sp, sp, #24
   150a8:	ldrd	r4, [sp]
   150ac:	ldrd	r6, [sp, #8]
   150b0:	ldrd	r8, [sp, #16]
   150b4:	ldr	sl, [sp, #24]
   150b8:	add	sp, sp, #28
   150bc:	pop	{pc}		; (ldr pc, [sp], #4)
   150c0:	andeq	r9, r2, r0, ror r2
   150c4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150c8:	strd	r6, [sp, #8]
   150cc:	strd	r8, [sp, #16]
   150d0:	strd	sl, [sp, #24]
   150d4:	str	lr, [sp, #32]
   150d8:	sub	sp, sp, #44	; 0x2c
   150dc:	mov	r8, r0
   150e0:	mov	sl, r1
   150e4:	mov	r6, r2
   150e8:	subs	r4, r3, #0
   150ec:	ldr	r3, [pc, #200]	; 151bc <__assert_fail@plt+0x4264>
   150f0:	moveq	r4, r3
   150f4:	bl	10e8c <__errno_location@plt>
   150f8:	mov	r7, r0
   150fc:	ldr	fp, [r0]
   15100:	ldr	r5, [r4, #4]
   15104:	cmp	r6, #0
   15108:	orreq	r5, r5, #1
   1510c:	add	r9, r4, #8
   15110:	ldr	r3, [r4, #44]	; 0x2c
   15114:	str	r3, [sp, #16]
   15118:	ldr	r3, [r4, #40]	; 0x28
   1511c:	str	r3, [sp, #12]
   15120:	str	r9, [sp, #8]
   15124:	str	r5, [sp, #4]
   15128:	ldr	r3, [r4]
   1512c:	str	r3, [sp]
   15130:	str	sl, [sp, #36]	; 0x24
   15134:	mov	r3, sl
   15138:	str	r8, [sp, #32]
   1513c:	mov	r2, r8
   15140:	mov	r1, #0
   15144:	mov	r0, r1
   15148:	bl	1361c <__assert_fail@plt+0x26c4>
   1514c:	mov	sl, r0
   15150:	add	r8, r0, #1
   15154:	mov	r0, r8
   15158:	bl	15d68 <__assert_fail@plt+0x4e10>
   1515c:	str	r0, [sp, #28]
   15160:	ldr	r3, [r4, #44]	; 0x2c
   15164:	str	r3, [sp, #16]
   15168:	ldr	r3, [r4, #40]	; 0x28
   1516c:	str	r3, [sp, #12]
   15170:	str	r9, [sp, #8]
   15174:	str	r5, [sp, #4]
   15178:	ldr	r3, [r4]
   1517c:	str	r3, [sp]
   15180:	ldr	r3, [sp, #36]	; 0x24
   15184:	ldr	r2, [sp, #32]
   15188:	mov	r1, r8
   1518c:	bl	1361c <__assert_fail@plt+0x26c4>
   15190:	str	fp, [r7]
   15194:	cmp	r6, #0
   15198:	strne	sl, [r6]
   1519c:	ldr	r0, [sp, #28]
   151a0:	add	sp, sp, #44	; 0x2c
   151a4:	ldrd	r4, [sp]
   151a8:	ldrd	r6, [sp, #8]
   151ac:	ldrd	r8, [sp, #16]
   151b0:	ldrd	sl, [sp, #24]
   151b4:	add	sp, sp, #32
   151b8:	pop	{pc}		; (ldr pc, [sp], #4)
   151bc:	andeq	r9, r2, r0, ror r2
   151c0:	str	r4, [sp, #-8]!
   151c4:	str	lr, [sp, #4]
   151c8:	mov	r3, r2
   151cc:	mov	r2, #0
   151d0:	bl	150c4 <__assert_fail@plt+0x416c>
   151d4:	ldr	r4, [sp]
   151d8:	add	sp, sp, #4
   151dc:	pop	{pc}		; (ldr pc, [sp], #4)
   151e0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   151e4:	strd	r6, [sp, #8]
   151e8:	str	r8, [sp, #16]
   151ec:	str	lr, [sp, #20]
   151f0:	movw	r3, #37120	; 0x9100
   151f4:	movt	r3, #2
   151f8:	ldr	r7, [r3]
   151fc:	ldr	r3, [r3, #4]
   15200:	cmp	r3, #1
   15204:	ble	15230 <__assert_fail@plt+0x42d8>
   15208:	mov	r4, #1
   1520c:	add	r6, r7, #4
   15210:	movw	r5, #37120	; 0x9100
   15214:	movt	r5, #2
   15218:	ldr	r0, [r6, r4, lsl #3]
   1521c:	bl	13150 <__assert_fail@plt+0x21f8>
   15220:	add	r4, r4, #1
   15224:	ldr	r3, [r5, #4]
   15228:	cmp	r3, r4
   1522c:	bgt	15218 <__assert_fail@plt+0x42c0>
   15230:	ldr	r0, [r7, #4]
   15234:	movw	r3, #37232	; 0x9170
   15238:	movt	r3, #2
   1523c:	cmp	r0, r3
   15240:	beq	15264 <__assert_fail@plt+0x430c>
   15244:	bl	13150 <__assert_fail@plt+0x21f8>
   15248:	movw	r3, #37120	; 0x9100
   1524c:	movt	r3, #2
   15250:	mov	r2, #256	; 0x100
   15254:	str	r2, [r3, #8]
   15258:	movw	r2, #37232	; 0x9170
   1525c:	movt	r2, #2
   15260:	str	r2, [r3, #12]
   15264:	ldr	r3, [pc, #64]	; 152ac <__assert_fail@plt+0x4354>
   15268:	cmp	r7, r3
   1526c:	beq	15288 <__assert_fail@plt+0x4330>
   15270:	mov	r0, r7
   15274:	bl	13150 <__assert_fail@plt+0x21f8>
   15278:	movw	r3, #37120	; 0x9100
   1527c:	movt	r3, #2
   15280:	add	r2, r3, #8
   15284:	str	r2, [r3]
   15288:	movw	r3, #37120	; 0x9100
   1528c:	movt	r3, #2
   15290:	mov	r2, #1
   15294:	str	r2, [r3, #4]
   15298:	ldrd	r4, [sp]
   1529c:	ldrd	r6, [sp, #8]
   152a0:	ldr	r8, [sp, #16]
   152a4:	add	sp, sp, #20
   152a8:	pop	{pc}		; (ldr pc, [sp], #4)
   152ac:	andeq	r9, r2, r8, lsl #2
   152b0:	str	r4, [sp, #-8]!
   152b4:	str	lr, [sp, #4]
   152b8:	ldr	r3, [pc, #16]	; 152d0 <__assert_fail@plt+0x4378>
   152bc:	mvn	r2, #0
   152c0:	bl	14d14 <__assert_fail@plt+0x3dbc>
   152c4:	ldr	r4, [sp]
   152c8:	add	sp, sp, #4
   152cc:	pop	{pc}		; (ldr pc, [sp], #4)
   152d0:	andeq	r9, r2, r0, ror r2
   152d4:	str	r4, [sp, #-8]!
   152d8:	str	lr, [sp, #4]
   152dc:	ldr	r3, [pc, #12]	; 152f0 <__assert_fail@plt+0x4398>
   152e0:	bl	14d14 <__assert_fail@plt+0x3dbc>
   152e4:	ldr	r4, [sp]
   152e8:	add	sp, sp, #4
   152ec:	pop	{pc}		; (ldr pc, [sp], #4)
   152f0:	andeq	r9, r2, r0, ror r2
   152f4:	str	r4, [sp, #-8]!
   152f8:	str	lr, [sp, #4]
   152fc:	mov	r1, r0
   15300:	mov	r0, #0
   15304:	bl	152b0 <__assert_fail@plt+0x4358>
   15308:	ldr	r4, [sp]
   1530c:	add	sp, sp, #4
   15310:	pop	{pc}		; (ldr pc, [sp], #4)
   15314:	str	r4, [sp, #-8]!
   15318:	str	lr, [sp, #4]
   1531c:	mov	r2, r1
   15320:	mov	r1, r0
   15324:	mov	r0, #0
   15328:	bl	152d4 <__assert_fail@plt+0x437c>
   1532c:	ldr	r4, [sp]
   15330:	add	sp, sp, #4
   15334:	pop	{pc}		; (ldr pc, [sp], #4)
   15338:	strd	r4, [sp, #-12]!
   1533c:	str	lr, [sp, #8]
   15340:	sub	sp, sp, #52	; 0x34
   15344:	mov	r4, r0
   15348:	mov	r5, r2
   1534c:	mov	r0, sp
   15350:	bl	13488 <__assert_fail@plt+0x2530>
   15354:	mov	r3, sp
   15358:	mvn	r2, #0
   1535c:	mov	r1, r5
   15360:	mov	r0, r4
   15364:	bl	14d14 <__assert_fail@plt+0x3dbc>
   15368:	add	sp, sp, #52	; 0x34
   1536c:	ldrd	r4, [sp]
   15370:	add	sp, sp, #8
   15374:	pop	{pc}		; (ldr pc, [sp], #4)
   15378:	strd	r4, [sp, #-16]!
   1537c:	str	r6, [sp, #8]
   15380:	str	lr, [sp, #12]
   15384:	sub	sp, sp, #48	; 0x30
   15388:	mov	r4, r0
   1538c:	mov	r5, r2
   15390:	mov	r6, r3
   15394:	mov	r0, sp
   15398:	bl	13488 <__assert_fail@plt+0x2530>
   1539c:	mov	r3, sp
   153a0:	mov	r2, r6
   153a4:	mov	r1, r5
   153a8:	mov	r0, r4
   153ac:	bl	14d14 <__assert_fail@plt+0x3dbc>
   153b0:	add	sp, sp, #48	; 0x30
   153b4:	ldrd	r4, [sp]
   153b8:	ldr	r6, [sp, #8]
   153bc:	add	sp, sp, #12
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	str	r4, [sp, #-8]!
   153c8:	str	lr, [sp, #4]
   153cc:	mov	r2, r1
   153d0:	mov	r1, r0
   153d4:	mov	r0, #0
   153d8:	bl	15338 <__assert_fail@plt+0x43e0>
   153dc:	ldr	r4, [sp]
   153e0:	add	sp, sp, #4
   153e4:	pop	{pc}		; (ldr pc, [sp], #4)
   153e8:	str	r4, [sp, #-8]!
   153ec:	str	lr, [sp, #4]
   153f0:	mov	r3, r2
   153f4:	mov	r2, r1
   153f8:	mov	r1, r0
   153fc:	mov	r0, #0
   15400:	bl	15378 <__assert_fail@plt+0x4420>
   15404:	ldr	r4, [sp]
   15408:	add	sp, sp, #4
   1540c:	pop	{pc}		; (ldr pc, [sp], #4)
   15410:	strd	r4, [sp, #-12]!
   15414:	str	lr, [sp, #8]
   15418:	sub	sp, sp, #52	; 0x34
   1541c:	mov	r4, r0
   15420:	mov	r5, r1
   15424:	mov	r1, r2
   15428:	ldr	r0, [pc, #92]	; 1548c <__assert_fail@plt+0x4534>
   1542c:	ldrd	r2, [r0]
   15430:	strd	r2, [sp]
   15434:	ldrd	r2, [r0, #8]
   15438:	strd	r2, [sp, #8]
   1543c:	ldrd	r2, [r0, #16]
   15440:	strd	r2, [sp, #16]
   15444:	ldrd	r2, [r0, #24]
   15448:	strd	r2, [sp, #24]
   1544c:	ldrd	r2, [r0, #32]
   15450:	strd	r2, [sp, #32]
   15454:	ldrd	r2, [r0, #40]	; 0x28
   15458:	strd	r2, [sp, #40]	; 0x28
   1545c:	mov	r2, #1
   15460:	mov	r0, sp
   15464:	bl	14f88 <__assert_fail@plt+0x4030>
   15468:	mov	r3, sp
   1546c:	mov	r2, r5
   15470:	mov	r1, r4
   15474:	mov	r0, #0
   15478:	bl	14d14 <__assert_fail@plt+0x3dbc>
   1547c:	add	sp, sp, #52	; 0x34
   15480:	ldrd	r4, [sp]
   15484:	add	sp, sp, #8
   15488:	pop	{pc}		; (ldr pc, [sp], #4)
   1548c:	andeq	r9, r2, r0, ror r2
   15490:	str	r4, [sp, #-8]!
   15494:	str	lr, [sp, #4]
   15498:	mov	r2, r1
   1549c:	mvn	r1, #0
   154a0:	bl	15410 <__assert_fail@plt+0x44b8>
   154a4:	ldr	r4, [sp]
   154a8:	add	sp, sp, #4
   154ac:	pop	{pc}		; (ldr pc, [sp], #4)
   154b0:	str	r4, [sp, #-8]!
   154b4:	str	lr, [sp, #4]
   154b8:	mov	r1, #58	; 0x3a
   154bc:	bl	15490 <__assert_fail@plt+0x4538>
   154c0:	ldr	r4, [sp]
   154c4:	add	sp, sp, #4
   154c8:	pop	{pc}		; (ldr pc, [sp], #4)
   154cc:	str	r4, [sp, #-8]!
   154d0:	str	lr, [sp, #4]
   154d4:	mov	r2, #58	; 0x3a
   154d8:	bl	15410 <__assert_fail@plt+0x44b8>
   154dc:	ldr	r4, [sp]
   154e0:	add	sp, sp, #4
   154e4:	pop	{pc}		; (ldr pc, [sp], #4)
   154e8:	strd	r4, [sp, #-12]!
   154ec:	str	lr, [sp, #8]
   154f0:	sub	sp, sp, #100	; 0x64
   154f4:	mov	r4, r0
   154f8:	mov	r5, r2
   154fc:	mov	r0, sp
   15500:	bl	13488 <__assert_fail@plt+0x2530>
   15504:	ldrd	r2, [sp]
   15508:	strd	r2, [sp, #48]	; 0x30
   1550c:	ldrd	r2, [sp, #8]
   15510:	strd	r2, [sp, #56]	; 0x38
   15514:	ldrd	r2, [sp, #16]
   15518:	strd	r2, [sp, #64]	; 0x40
   1551c:	ldrd	r2, [sp, #24]
   15520:	strd	r2, [sp, #72]	; 0x48
   15524:	ldrd	r2, [sp, #32]
   15528:	strd	r2, [sp, #80]	; 0x50
   1552c:	ldrd	r2, [sp, #40]	; 0x28
   15530:	strd	r2, [sp, #88]	; 0x58
   15534:	mov	r2, #1
   15538:	mov	r1, #58	; 0x3a
   1553c:	add	r0, sp, #48	; 0x30
   15540:	bl	14f88 <__assert_fail@plt+0x4030>
   15544:	add	r3, sp, #48	; 0x30
   15548:	mvn	r2, #0
   1554c:	mov	r1, r5
   15550:	mov	r0, r4
   15554:	bl	14d14 <__assert_fail@plt+0x3dbc>
   15558:	add	sp, sp, #100	; 0x64
   1555c:	ldrd	r4, [sp]
   15560:	add	sp, sp, #8
   15564:	pop	{pc}		; (ldr pc, [sp], #4)
   15568:	strd	r4, [sp, #-20]!	; 0xffffffec
   1556c:	strd	r6, [sp, #8]
   15570:	str	lr, [sp, #16]
   15574:	sub	sp, sp, #52	; 0x34
   15578:	mov	r4, r0
   1557c:	mov	r5, r3
   15580:	ldr	r3, [pc, #92]	; 155e4 <__assert_fail@plt+0x468c>
   15584:	ldrd	r6, [r3]
   15588:	strd	r6, [sp]
   1558c:	ldrd	r6, [r3, #8]
   15590:	strd	r6, [sp, #8]
   15594:	ldrd	r6, [r3, #16]
   15598:	strd	r6, [sp, #16]
   1559c:	ldrd	r6, [r3, #24]
   155a0:	strd	r6, [sp, #24]
   155a4:	ldrd	r6, [r3, #32]
   155a8:	strd	r6, [sp, #32]
   155ac:	ldrd	r6, [r3, #40]	; 0x28
   155b0:	strd	r6, [sp, #40]	; 0x28
   155b4:	mov	r0, sp
   155b8:	bl	14fe4 <__assert_fail@plt+0x408c>
   155bc:	mov	r3, sp
   155c0:	ldr	r2, [sp, #72]	; 0x48
   155c4:	mov	r1, r5
   155c8:	mov	r0, r4
   155cc:	bl	14d14 <__assert_fail@plt+0x3dbc>
   155d0:	add	sp, sp, #52	; 0x34
   155d4:	ldrd	r4, [sp]
   155d8:	ldrd	r6, [sp, #8]
   155dc:	add	sp, sp, #16
   155e0:	pop	{pc}		; (ldr pc, [sp], #4)
   155e4:	andeq	r9, r2, r0, ror r2
   155e8:	push	{lr}		; (str lr, [sp, #-4]!)
   155ec:	sub	sp, sp, #12
   155f0:	mvn	ip, #0
   155f4:	str	ip, [sp]
   155f8:	bl	15568 <__assert_fail@plt+0x4610>
   155fc:	add	sp, sp, #12
   15600:	pop	{pc}		; (ldr pc, [sp], #4)
   15604:	str	r4, [sp, #-8]!
   15608:	str	lr, [sp, #4]
   1560c:	mov	r3, r2
   15610:	mov	r2, r1
   15614:	mov	r1, r0
   15618:	mov	r0, #0
   1561c:	bl	155e8 <__assert_fail@plt+0x4690>
   15620:	ldr	r4, [sp]
   15624:	add	sp, sp, #4
   15628:	pop	{pc}		; (ldr pc, [sp], #4)
   1562c:	push	{lr}		; (str lr, [sp, #-4]!)
   15630:	sub	sp, sp, #12
   15634:	str	r3, [sp]
   15638:	mov	r3, r2
   1563c:	mov	r2, r1
   15640:	mov	r1, r0
   15644:	mov	r0, #0
   15648:	bl	15568 <__assert_fail@plt+0x4610>
   1564c:	add	sp, sp, #12
   15650:	pop	{pc}		; (ldr pc, [sp], #4)
   15654:	str	r4, [sp, #-8]!
   15658:	str	lr, [sp, #4]
   1565c:	ldr	r3, [pc, #12]	; 15670 <__assert_fail@plt+0x4718>
   15660:	bl	14d14 <__assert_fail@plt+0x3dbc>
   15664:	ldr	r4, [sp]
   15668:	add	sp, sp, #4
   1566c:	pop	{pc}		; (ldr pc, [sp], #4)
   15670:	andeq	r9, r2, r0, lsl r1
   15674:	str	r4, [sp, #-8]!
   15678:	str	lr, [sp, #4]
   1567c:	mov	r2, r1
   15680:	mov	r1, r0
   15684:	mov	r0, #0
   15688:	bl	15654 <__assert_fail@plt+0x46fc>
   1568c:	ldr	r4, [sp]
   15690:	add	sp, sp, #4
   15694:	pop	{pc}		; (ldr pc, [sp], #4)
   15698:	str	r4, [sp, #-8]!
   1569c:	str	lr, [sp, #4]
   156a0:	mvn	r2, #0
   156a4:	bl	15654 <__assert_fail@plt+0x46fc>
   156a8:	ldr	r4, [sp]
   156ac:	add	sp, sp, #4
   156b0:	pop	{pc}		; (ldr pc, [sp], #4)
   156b4:	str	r4, [sp, #-8]!
   156b8:	str	lr, [sp, #4]
   156bc:	mov	r1, r0
   156c0:	mov	r0, #0
   156c4:	bl	15698 <__assert_fail@plt+0x4740>
   156c8:	ldr	r4, [sp]
   156cc:	add	sp, sp, #4
   156d0:	pop	{pc}		; (ldr pc, [sp], #4)
   156d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   156d8:	strd	r6, [sp, #8]
   156dc:	strd	r8, [sp, #16]
   156e0:	str	sl, [sp, #24]
   156e4:	str	lr, [sp, #28]
   156e8:	mov	r8, r0
   156ec:	mov	r7, r1
   156f0:	mov	r9, r2
   156f4:	mov	r5, #0
   156f8:	movt	r5, #32752	; 0x7ff0
   156fc:	b	15704 <__assert_fail@plt+0x47ac>
   15700:	mov	r9, r5
   15704:	mov	r2, r9
   15708:	mov	r1, r7
   1570c:	mov	r0, r8
   15710:	bl	10d00 <read@plt>
   15714:	subs	r6, r0, #0
   15718:	bge	15764 <__assert_fail@plt+0x480c>
   1571c:	bl	10e8c <__errno_location@plt>
   15720:	ldr	r3, [r0]
   15724:	cmp	r3, #4
   15728:	beq	15704 <__assert_fail@plt+0x47ac>
   1572c:	cmp	r9, r5
   15730:	movls	r4, #0
   15734:	movhi	r4, #1
   15738:	cmp	r3, #22
   1573c:	movne	r4, #0
   15740:	cmp	r4, #0
   15744:	bne	15700 <__assert_fail@plt+0x47a8>
   15748:	mov	r0, r6
   1574c:	ldrd	r4, [sp]
   15750:	ldrd	r6, [sp, #8]
   15754:	ldrd	r8, [sp, #16]
   15758:	ldr	sl, [sp, #24]
   1575c:	add	sp, sp, #28
   15760:	pop	{pc}		; (ldr pc, [sp], #4)
   15764:	mov	r0, r6
   15768:	b	1574c <__assert_fail@plt+0x47f4>
   1576c:	strd	r4, [sp, #-16]!
   15770:	str	r6, [sp, #8]
   15774:	str	lr, [sp, #12]
   15778:	sub	sp, sp, #32
   1577c:	mov	r4, r0
   15780:	ldr	r5, [sp, #48]	; 0x30
   15784:	ldr	r6, [sp, #52]	; 0x34
   15788:	cmp	r1, #0
   1578c:	beq	15858 <__assert_fail@plt+0x4900>
   15790:	str	r3, [sp, #4]
   15794:	str	r2, [sp]
   15798:	mov	r3, r1
   1579c:	movw	r2, #31944	; 0x7cc8
   157a0:	movt	r2, #1
   157a4:	mov	r1, #1
   157a8:	bl	10ec8 <__fprintf_chk@plt>
   157ac:	mov	r2, #5
   157b0:	movw	r1, #31964	; 0x7cdc
   157b4:	movt	r1, #1
   157b8:	mov	r0, #0
   157bc:	bl	10d78 <dcgettext@plt>
   157c0:	movw	r3, #2022	; 0x7e6
   157c4:	str	r3, [sp]
   157c8:	mov	r3, r0
   157cc:	movw	r2, #32692	; 0x7fb4
   157d0:	movt	r2, #1
   157d4:	mov	r1, #1
   157d8:	mov	r0, r4
   157dc:	bl	10ec8 <__fprintf_chk@plt>
   157e0:	mov	r1, r4
   157e4:	mov	r0, #10
   157e8:	bl	10d6c <fputc_unlocked@plt>
   157ec:	mov	r2, #5
   157f0:	movw	r1, #31968	; 0x7ce0
   157f4:	movt	r1, #1
   157f8:	mov	r0, #0
   157fc:	bl	10d78 <dcgettext@plt>
   15800:	movw	r3, #32140	; 0x7d8c
   15804:	movt	r3, #1
   15808:	mov	r2, r0
   1580c:	mov	r1, #1
   15810:	mov	r0, r4
   15814:	bl	10ec8 <__fprintf_chk@plt>
   15818:	mov	r1, r4
   1581c:	mov	r0, #10
   15820:	bl	10d6c <fputc_unlocked@plt>
   15824:	cmp	r6, #9
   15828:	ldrls	pc, [pc, r6, lsl #2]
   1582c:	b	15b30 <__assert_fail@plt+0x4bd8>
   15830:	muleq	r1, ip, r8
   15834:	andeq	r5, r1, r4, ror r8
   15838:			; <UNDEFINED> instruction: 0x000158b0
   1583c:	andeq	r5, r1, r4, ror #17
   15840:	andeq	r5, r1, r0, lsr #18
   15844:	andeq	r5, r1, r4, ror #18
   15848:			; <UNDEFINED> instruction: 0x000159b0
   1584c:	andeq	r5, r1, r4, lsl #20
   15850:	andeq	r5, r1, r0, ror #20
   15854:	andeq	r5, r1, r4, asr #21
   15858:	str	r3, [sp]
   1585c:	mov	r3, r2
   15860:	movw	r2, #31956	; 0x7cd4
   15864:	movt	r2, #1
   15868:	mov	r1, #1
   1586c:	bl	10ec8 <__fprintf_chk@plt>
   15870:	b	157ac <__assert_fail@plt+0x4854>
   15874:	mov	r2, #5
   15878:	movw	r1, #32176	; 0x7db0
   1587c:	movt	r1, #1
   15880:	mov	r0, #0
   15884:	bl	10d78 <dcgettext@plt>
   15888:	ldr	r3, [r5]
   1588c:	mov	r2, r0
   15890:	mov	r1, #1
   15894:	mov	r0, r4
   15898:	bl	10ec8 <__fprintf_chk@plt>
   1589c:	add	sp, sp, #32
   158a0:	ldrd	r4, [sp]
   158a4:	ldr	r6, [sp, #8]
   158a8:	add	sp, sp, #12
   158ac:	pop	{pc}		; (ldr pc, [sp], #4)
   158b0:	mov	r2, #5
   158b4:	movw	r1, #32192	; 0x7dc0
   158b8:	movt	r1, #1
   158bc:	mov	r0, #0
   158c0:	bl	10d78 <dcgettext@plt>
   158c4:	ldr	r3, [r5, #4]
   158c8:	str	r3, [sp]
   158cc:	ldr	r3, [r5]
   158d0:	mov	r2, r0
   158d4:	mov	r1, #1
   158d8:	mov	r0, r4
   158dc:	bl	10ec8 <__fprintf_chk@plt>
   158e0:	b	1589c <__assert_fail@plt+0x4944>
   158e4:	mov	r2, #5
   158e8:	movw	r1, #32216	; 0x7dd8
   158ec:	movt	r1, #1
   158f0:	mov	r0, #0
   158f4:	bl	10d78 <dcgettext@plt>
   158f8:	ldr	r3, [r5, #8]
   158fc:	str	r3, [sp, #4]
   15900:	ldr	r3, [r5, #4]
   15904:	str	r3, [sp]
   15908:	ldr	r3, [r5]
   1590c:	mov	r2, r0
   15910:	mov	r1, #1
   15914:	mov	r0, r4
   15918:	bl	10ec8 <__fprintf_chk@plt>
   1591c:	b	1589c <__assert_fail@plt+0x4944>
   15920:	mov	r2, #5
   15924:	movw	r1, #32244	; 0x7df4
   15928:	movt	r1, #1
   1592c:	mov	r0, #0
   15930:	bl	10d78 <dcgettext@plt>
   15934:	ldr	r3, [r5, #12]
   15938:	str	r3, [sp, #8]
   1593c:	ldr	r3, [r5, #8]
   15940:	str	r3, [sp, #4]
   15944:	ldr	r3, [r5, #4]
   15948:	str	r3, [sp]
   1594c:	ldr	r3, [r5]
   15950:	mov	r2, r0
   15954:	mov	r1, #1
   15958:	mov	r0, r4
   1595c:	bl	10ec8 <__fprintf_chk@plt>
   15960:	b	1589c <__assert_fail@plt+0x4944>
   15964:	mov	r2, #5
   15968:	movw	r1, #32276	; 0x7e14
   1596c:	movt	r1, #1
   15970:	mov	r0, #0
   15974:	bl	10d78 <dcgettext@plt>
   15978:	ldr	r3, [r5, #16]
   1597c:	str	r3, [sp, #12]
   15980:	ldr	r3, [r5, #12]
   15984:	str	r3, [sp, #8]
   15988:	ldr	r3, [r5, #8]
   1598c:	str	r3, [sp, #4]
   15990:	ldr	r3, [r5, #4]
   15994:	str	r3, [sp]
   15998:	ldr	r3, [r5]
   1599c:	mov	r2, r0
   159a0:	mov	r1, #1
   159a4:	mov	r0, r4
   159a8:	bl	10ec8 <__fprintf_chk@plt>
   159ac:	b	1589c <__assert_fail@plt+0x4944>
   159b0:	mov	r2, #5
   159b4:	movw	r1, #32312	; 0x7e38
   159b8:	movt	r1, #1
   159bc:	mov	r0, #0
   159c0:	bl	10d78 <dcgettext@plt>
   159c4:	ldr	r3, [r5, #20]
   159c8:	str	r3, [sp, #16]
   159cc:	ldr	r3, [r5, #16]
   159d0:	str	r3, [sp, #12]
   159d4:	ldr	r3, [r5, #12]
   159d8:	str	r3, [sp, #8]
   159dc:	ldr	r3, [r5, #8]
   159e0:	str	r3, [sp, #4]
   159e4:	ldr	r3, [r5, #4]
   159e8:	str	r3, [sp]
   159ec:	ldr	r3, [r5]
   159f0:	mov	r2, r0
   159f4:	mov	r1, #1
   159f8:	mov	r0, r4
   159fc:	bl	10ec8 <__fprintf_chk@plt>
   15a00:	b	1589c <__assert_fail@plt+0x4944>
   15a04:	mov	r2, #5
   15a08:	movw	r1, #32352	; 0x7e60
   15a0c:	movt	r1, #1
   15a10:	mov	r0, #0
   15a14:	bl	10d78 <dcgettext@plt>
   15a18:	ldr	r3, [r5, #24]
   15a1c:	str	r3, [sp, #20]
   15a20:	ldr	r3, [r5, #20]
   15a24:	str	r3, [sp, #16]
   15a28:	ldr	r3, [r5, #16]
   15a2c:	str	r3, [sp, #12]
   15a30:	ldr	r3, [r5, #12]
   15a34:	str	r3, [sp, #8]
   15a38:	ldr	r3, [r5, #8]
   15a3c:	str	r3, [sp, #4]
   15a40:	ldr	r3, [r5, #4]
   15a44:	str	r3, [sp]
   15a48:	ldr	r3, [r5]
   15a4c:	mov	r2, r0
   15a50:	mov	r1, #1
   15a54:	mov	r0, r4
   15a58:	bl	10ec8 <__fprintf_chk@plt>
   15a5c:	b	1589c <__assert_fail@plt+0x4944>
   15a60:	mov	r2, #5
   15a64:	movw	r1, #32396	; 0x7e8c
   15a68:	movt	r1, #1
   15a6c:	mov	r0, #0
   15a70:	bl	10d78 <dcgettext@plt>
   15a74:	ldr	r3, [r5, #28]
   15a78:	str	r3, [sp, #24]
   15a7c:	ldr	r3, [r5, #24]
   15a80:	str	r3, [sp, #20]
   15a84:	ldr	r3, [r5, #20]
   15a88:	str	r3, [sp, #16]
   15a8c:	ldr	r3, [r5, #16]
   15a90:	str	r3, [sp, #12]
   15a94:	ldr	r3, [r5, #12]
   15a98:	str	r3, [sp, #8]
   15a9c:	ldr	r3, [r5, #8]
   15aa0:	str	r3, [sp, #4]
   15aa4:	ldr	r3, [r5, #4]
   15aa8:	str	r3, [sp]
   15aac:	ldr	r3, [r5]
   15ab0:	mov	r2, r0
   15ab4:	mov	r1, #1
   15ab8:	mov	r0, r4
   15abc:	bl	10ec8 <__fprintf_chk@plt>
   15ac0:	b	1589c <__assert_fail@plt+0x4944>
   15ac4:	mov	r2, #5
   15ac8:	movw	r1, #32444	; 0x7ebc
   15acc:	movt	r1, #1
   15ad0:	mov	r0, #0
   15ad4:	bl	10d78 <dcgettext@plt>
   15ad8:	ldr	r3, [r5, #32]
   15adc:	str	r3, [sp, #28]
   15ae0:	ldr	r3, [r5, #28]
   15ae4:	str	r3, [sp, #24]
   15ae8:	ldr	r3, [r5, #24]
   15aec:	str	r3, [sp, #20]
   15af0:	ldr	r3, [r5, #20]
   15af4:	str	r3, [sp, #16]
   15af8:	ldr	r3, [r5, #16]
   15afc:	str	r3, [sp, #12]
   15b00:	ldr	r3, [r5, #12]
   15b04:	str	r3, [sp, #8]
   15b08:	ldr	r3, [r5, #8]
   15b0c:	str	r3, [sp, #4]
   15b10:	ldr	r3, [r5, #4]
   15b14:	str	r3, [sp]
   15b18:	ldr	r3, [r5]
   15b1c:	mov	r2, r0
   15b20:	mov	r1, #1
   15b24:	mov	r0, r4
   15b28:	bl	10ec8 <__fprintf_chk@plt>
   15b2c:	b	1589c <__assert_fail@plt+0x4944>
   15b30:	mov	r2, #5
   15b34:	movw	r1, #32496	; 0x7ef0
   15b38:	movt	r1, #1
   15b3c:	mov	r0, #0
   15b40:	bl	10d78 <dcgettext@plt>
   15b44:	ldr	r3, [r5, #32]
   15b48:	str	r3, [sp, #28]
   15b4c:	ldr	r3, [r5, #28]
   15b50:	str	r3, [sp, #24]
   15b54:	ldr	r3, [r5, #24]
   15b58:	str	r3, [sp, #20]
   15b5c:	ldr	r3, [r5, #20]
   15b60:	str	r3, [sp, #16]
   15b64:	ldr	r3, [r5, #16]
   15b68:	str	r3, [sp, #12]
   15b6c:	ldr	r3, [r5, #12]
   15b70:	str	r3, [sp, #8]
   15b74:	ldr	r3, [r5, #8]
   15b78:	str	r3, [sp, #4]
   15b7c:	ldr	r3, [r5, #4]
   15b80:	str	r3, [sp]
   15b84:	ldr	r3, [r5]
   15b88:	mov	r2, r0
   15b8c:	mov	r1, #1
   15b90:	mov	r0, r4
   15b94:	bl	10ec8 <__fprintf_chk@plt>
   15b98:	b	1589c <__assert_fail@plt+0x4944>
   15b9c:	strd	r4, [sp, #-12]!
   15ba0:	str	lr, [sp, #8]
   15ba4:	sub	sp, sp, #12
   15ba8:	ldr	r5, [sp, #24]
   15bac:	ldr	ip, [r5]
   15bb0:	cmp	ip, #0
   15bb4:	beq	15bec <__assert_fail@plt+0x4c94>
   15bb8:	mov	lr, r5
   15bbc:	mov	ip, #0
   15bc0:	add	ip, ip, #1
   15bc4:	ldr	r4, [lr, #4]!
   15bc8:	cmp	r4, #0
   15bcc:	bne	15bc0 <__assert_fail@plt+0x4c68>
   15bd0:	str	ip, [sp, #4]
   15bd4:	str	r5, [sp]
   15bd8:	bl	1576c <__assert_fail@plt+0x4814>
   15bdc:	add	sp, sp, #12
   15be0:	ldrd	r4, [sp]
   15be4:	add	sp, sp, #8
   15be8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bec:	mov	ip, #0
   15bf0:	b	15bd0 <__assert_fail@plt+0x4c78>
   15bf4:	strd	r4, [sp, #-12]!
   15bf8:	str	lr, [sp, #8]
   15bfc:	sub	sp, sp, #52	; 0x34
   15c00:	ldr	r5, [sp, #64]	; 0x40
   15c04:	add	r4, sp, #8
   15c08:	mov	ip, #0
   15c0c:	ldr	lr, [r5], #4
   15c10:	str	lr, [r4], #4
   15c14:	cmp	lr, #0
   15c18:	beq	15c28 <__assert_fail@plt+0x4cd0>
   15c1c:	add	ip, ip, #1
   15c20:	cmp	ip, #10
   15c24:	bne	15c0c <__assert_fail@plt+0x4cb4>
   15c28:	str	ip, [sp, #4]
   15c2c:	add	ip, sp, #8
   15c30:	str	ip, [sp]
   15c34:	bl	1576c <__assert_fail@plt+0x4814>
   15c38:	add	sp, sp, #52	; 0x34
   15c3c:	ldrd	r4, [sp]
   15c40:	add	sp, sp, #8
   15c44:	pop	{pc}		; (ldr pc, [sp], #4)
   15c48:	push	{r3}		; (str r3, [sp, #-4]!)
   15c4c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c50:	sub	sp, sp, #16
   15c54:	add	r3, sp, #24
   15c58:	str	r3, [sp, #12]
   15c5c:	str	r3, [sp]
   15c60:	ldr	r3, [sp, #20]
   15c64:	bl	15bf4 <__assert_fail@plt+0x4c9c>
   15c68:	add	sp, sp, #16
   15c6c:	pop	{lr}		; (ldr lr, [sp], #4)
   15c70:	add	sp, sp, #4
   15c74:	bx	lr
   15c78:	str	r4, [sp, #-8]!
   15c7c:	str	lr, [sp, #4]
   15c80:	movw	r3, #37204	; 0x9154
   15c84:	movt	r3, #2
   15c88:	ldr	r1, [r3]
   15c8c:	mov	r0, #10
   15c90:	bl	10d6c <fputc_unlocked@plt>
   15c94:	mov	r2, #5
   15c98:	movw	r1, #32556	; 0x7f2c
   15c9c:	movt	r1, #1
   15ca0:	mov	r0, #0
   15ca4:	bl	10d78 <dcgettext@plt>
   15ca8:	movw	r2, #32576	; 0x7f40
   15cac:	movt	r2, #1
   15cb0:	mov	r1, r0
   15cb4:	mov	r0, #1
   15cb8:	bl	10eb0 <__printf_chk@plt>
   15cbc:	mov	r2, #5
   15cc0:	movw	r1, #32600	; 0x7f58
   15cc4:	movt	r1, #1
   15cc8:	mov	r0, #0
   15ccc:	bl	10d78 <dcgettext@plt>
   15cd0:	movw	r3, #30972	; 0x78fc
   15cd4:	movt	r3, #1
   15cd8:	movw	r2, #31012	; 0x7924
   15cdc:	movt	r2, #1
   15ce0:	mov	r1, r0
   15ce4:	mov	r0, #1
   15ce8:	bl	10eb0 <__printf_chk@plt>
   15cec:	mov	r2, #5
   15cf0:	movw	r1, #32620	; 0x7f6c
   15cf4:	movt	r1, #1
   15cf8:	mov	r0, #0
   15cfc:	bl	10d78 <dcgettext@plt>
   15d00:	movw	r2, #32660	; 0x7f94
   15d04:	movt	r2, #1
   15d08:	mov	r1, r0
   15d0c:	mov	r0, #1
   15d10:	bl	10eb0 <__printf_chk@plt>
   15d14:	ldr	r4, [sp]
   15d18:	add	sp, sp, #4
   15d1c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d20:	str	r4, [sp, #-8]!
   15d24:	str	lr, [sp, #4]
   15d28:	bl	16a48 <__assert_fail@plt+0x5af0>
   15d2c:	cmp	r0, #0
   15d30:	beq	15d40 <__assert_fail@plt+0x4de8>
   15d34:	ldr	r4, [sp]
   15d38:	add	sp, sp, #4
   15d3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d40:	bl	161b4 <__assert_fail@plt+0x525c>
   15d44:	str	r4, [sp, #-8]!
   15d48:	str	lr, [sp, #4]
   15d4c:	bl	16a48 <__assert_fail@plt+0x5af0>
   15d50:	cmp	r0, #0
   15d54:	beq	15d64 <__assert_fail@plt+0x4e0c>
   15d58:	ldr	r4, [sp]
   15d5c:	add	sp, sp, #4
   15d60:	pop	{pc}		; (ldr pc, [sp], #4)
   15d64:	bl	161b4 <__assert_fail@plt+0x525c>
   15d68:	str	r4, [sp, #-8]!
   15d6c:	str	lr, [sp, #4]
   15d70:	bl	15d20 <__assert_fail@plt+0x4dc8>
   15d74:	ldr	r4, [sp]
   15d78:	add	sp, sp, #4
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	strd	r4, [sp, #-16]!
   15d84:	str	r6, [sp, #8]
   15d88:	str	lr, [sp, #12]
   15d8c:	mov	r5, r0
   15d90:	mov	r4, r1
   15d94:	bl	16a84 <__assert_fail@plt+0x5b2c>
   15d98:	cmp	r0, #0
   15d9c:	beq	15db0 <__assert_fail@plt+0x4e58>
   15da0:	ldrd	r4, [sp]
   15da4:	ldr	r6, [sp, #8]
   15da8:	add	sp, sp, #12
   15dac:	pop	{pc}		; (ldr pc, [sp], #4)
   15db0:	adds	r4, r4, #0
   15db4:	movne	r4, #1
   15db8:	cmp	r5, #0
   15dbc:	moveq	r4, #1
   15dc0:	cmp	r4, #0
   15dc4:	beq	15da0 <__assert_fail@plt+0x4e48>
   15dc8:	bl	161b4 <__assert_fail@plt+0x525c>
   15dcc:	str	r4, [sp, #-8]!
   15dd0:	str	lr, [sp, #4]
   15dd4:	cmp	r1, #0
   15dd8:	orreq	r1, r1, #1
   15ddc:	bl	16a84 <__assert_fail@plt+0x5b2c>
   15de0:	cmp	r0, #0
   15de4:	beq	15df4 <__assert_fail@plt+0x4e9c>
   15de8:	ldr	r4, [sp]
   15dec:	add	sp, sp, #4
   15df0:	pop	{pc}		; (ldr pc, [sp], #4)
   15df4:	bl	161b4 <__assert_fail@plt+0x525c>
   15df8:	strd	r4, [sp, #-16]!
   15dfc:	str	r6, [sp, #8]
   15e00:	str	lr, [sp, #12]
   15e04:	mov	r4, r0
   15e08:	mov	r6, r1
   15e0c:	mov	r5, r2
   15e10:	bl	16e0c <__assert_fail@plt+0x5eb4>
   15e14:	cmp	r0, #0
   15e18:	beq	15e2c <__assert_fail@plt+0x4ed4>
   15e1c:	ldrd	r4, [sp]
   15e20:	ldr	r6, [sp, #8]
   15e24:	add	sp, sp, #12
   15e28:	pop	{pc}		; (ldr pc, [sp], #4)
   15e2c:	cmp	r4, #0
   15e30:	beq	15e40 <__assert_fail@plt+0x4ee8>
   15e34:	cmp	r6, #0
   15e38:	cmpne	r5, #0
   15e3c:	beq	15e1c <__assert_fail@plt+0x4ec4>
   15e40:	bl	161b4 <__assert_fail@plt+0x525c>
   15e44:	str	r4, [sp, #-8]!
   15e48:	str	lr, [sp, #4]
   15e4c:	bl	15df8 <__assert_fail@plt+0x4ea0>
   15e50:	ldr	r4, [sp]
   15e54:	add	sp, sp, #4
   15e58:	pop	{pc}		; (ldr pc, [sp], #4)
   15e5c:	str	r4, [sp, #-8]!
   15e60:	str	lr, [sp, #4]
   15e64:	mov	ip, r1
   15e68:	mov	r3, r2
   15e6c:	cmp	r2, #0
   15e70:	cmpne	r1, #0
   15e74:	moveq	r3, #1
   15e78:	moveq	ip, r3
   15e7c:	mov	r2, r3
   15e80:	mov	r1, ip
   15e84:	bl	16e0c <__assert_fail@plt+0x5eb4>
   15e88:	cmp	r0, #0
   15e8c:	beq	15e9c <__assert_fail@plt+0x4f44>
   15e90:	ldr	r4, [sp]
   15e94:	add	sp, sp, #4
   15e98:	pop	{pc}		; (ldr pc, [sp], #4)
   15e9c:	bl	161b4 <__assert_fail@plt+0x525c>
   15ea0:	str	r4, [sp, #-8]!
   15ea4:	str	lr, [sp, #4]
   15ea8:	mov	r2, r1
   15eac:	mov	r1, r0
   15eb0:	mov	r0, #0
   15eb4:	bl	15df8 <__assert_fail@plt+0x4ea0>
   15eb8:	ldr	r4, [sp]
   15ebc:	add	sp, sp, #4
   15ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ec4:	str	r4, [sp, #-8]!
   15ec8:	str	lr, [sp, #4]
   15ecc:	mov	r2, r1
   15ed0:	mov	r1, r0
   15ed4:	mov	r0, #0
   15ed8:	bl	15e5c <__assert_fail@plt+0x4f04>
   15edc:	ldr	r4, [sp]
   15ee0:	add	sp, sp, #4
   15ee4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ee8:	strd	r4, [sp, #-16]!
   15eec:	str	r6, [sp, #8]
   15ef0:	str	lr, [sp, #12]
   15ef4:	mov	r5, r1
   15ef8:	ldr	r4, [r1]
   15efc:	cmp	r0, #0
   15f00:	beq	15f30 <__assert_fail@plt+0x4fd8>
   15f04:	lsr	r3, r4, #1
   15f08:	add	r3, r3, #1
   15f0c:	adds	r4, r4, r3
   15f10:	bcs	15f4c <__assert_fail@plt+0x4ff4>
   15f14:	mov	r1, r4
   15f18:	bl	15df8 <__assert_fail@plt+0x4ea0>
   15f1c:	str	r4, [r5]
   15f20:	ldrd	r4, [sp]
   15f24:	ldr	r6, [sp, #8]
   15f28:	add	sp, sp, #12
   15f2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f30:	cmp	r4, #0
   15f34:	bne	15f14 <__assert_fail@plt+0x4fbc>
   15f38:	mov	r4, #64	; 0x40
   15f3c:	udiv	r4, r4, r2
   15f40:	cmp	r2, #64	; 0x40
   15f44:	addhi	r4, r4, #1
   15f48:	b	15f14 <__assert_fail@plt+0x4fbc>
   15f4c:	bl	161b4 <__assert_fail@plt+0x525c>
   15f50:	str	r4, [sp, #-8]!
   15f54:	str	lr, [sp, #4]
   15f58:	mov	r2, #1
   15f5c:	bl	15ee8 <__assert_fail@plt+0x4f90>
   15f60:	ldr	r4, [sp]
   15f64:	add	sp, sp, #4
   15f68:	pop	{pc}		; (ldr pc, [sp], #4)
   15f6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15f70:	strd	r6, [sp, #8]
   15f74:	str	r8, [sp, #16]
   15f78:	str	lr, [sp, #20]
   15f7c:	mov	r5, r1
   15f80:	ldr	lr, [sp, #24]
   15f84:	ldr	ip, [r1]
   15f88:	asr	r4, ip, #1
   15f8c:	adds	r4, ip, r4
   15f90:	movvs	r1, #1
   15f94:	movvc	r1, #0
   15f98:	cmp	r1, #0
   15f9c:	mvnne	r4, #-2147483648	; 0x80000000
   15fa0:	mvn	r8, r3
   15fa4:	lsr	r8, r8, #31
   15fa8:	cmp	r3, r4
   15fac:	movge	r1, #0
   15fb0:	andlt	r1, r8, #1
   15fb4:	cmp	r1, #0
   15fb8:	movne	r4, r3
   15fbc:	smull	r6, r7, r4, lr
   15fc0:	asr	r1, r6, #31
   15fc4:	cmp	r1, r7
   15fc8:	bne	15fe0 <__assert_fail@plt+0x5088>
   15fcc:	mov	r1, r6
   15fd0:	cmp	r6, #63	; 0x3f
   15fd4:	movle	r1, #64	; 0x40
   15fd8:	ble	15fe4 <__assert_fail@plt+0x508c>
   15fdc:	b	15ff0 <__assert_fail@plt+0x5098>
   15fe0:	mvn	r1, #-2147483648	; 0x80000000
   15fe4:	sdiv	r4, r1, lr
   15fe8:	mls	r6, lr, r4, r1
   15fec:	sub	r1, r1, r6
   15ff0:	cmp	r0, #0
   15ff4:	moveq	r6, #0
   15ff8:	streq	r6, [r5]
   15ffc:	sub	r6, r4, ip
   16000:	cmp	r6, r2
   16004:	bge	1603c <__assert_fail@plt+0x50e4>
   16008:	adds	r2, ip, r2
   1600c:	mov	r4, r2
   16010:	bvs	16058 <__assert_fail@plt+0x5100>
   16014:	cmp	r2, r3
   16018:	movle	r3, #0
   1601c:	andgt	r3, r8, #1
   16020:	cmp	r3, #0
   16024:	bne	16058 <__assert_fail@plt+0x5100>
   16028:	smull	r2, r3, r2, lr
   1602c:	asr	ip, r2, #31
   16030:	mov	r1, r2
   16034:	cmp	ip, r3
   16038:	bne	16058 <__assert_fail@plt+0x5100>
   1603c:	bl	15d80 <__assert_fail@plt+0x4e28>
   16040:	str	r4, [r5]
   16044:	ldrd	r4, [sp]
   16048:	ldrd	r6, [sp, #8]
   1604c:	ldr	r8, [sp, #16]
   16050:	add	sp, sp, #20
   16054:	pop	{pc}		; (ldr pc, [sp], #4)
   16058:	bl	161b4 <__assert_fail@plt+0x525c>
   1605c:	str	r4, [sp, #-8]!
   16060:	str	lr, [sp, #4]
   16064:	bl	169d4 <__assert_fail@plt+0x5a7c>
   16068:	cmp	r0, #0
   1606c:	beq	1607c <__assert_fail@plt+0x5124>
   16070:	ldr	r4, [sp]
   16074:	add	sp, sp, #4
   16078:	pop	{pc}		; (ldr pc, [sp], #4)
   1607c:	bl	161b4 <__assert_fail@plt+0x525c>
   16080:	str	r4, [sp, #-8]!
   16084:	str	lr, [sp, #4]
   16088:	mov	r1, #1
   1608c:	bl	1605c <__assert_fail@plt+0x5104>
   16090:	ldr	r4, [sp]
   16094:	add	sp, sp, #4
   16098:	pop	{pc}		; (ldr pc, [sp], #4)
   1609c:	str	r4, [sp, #-8]!
   160a0:	str	lr, [sp, #4]
   160a4:	bl	169d4 <__assert_fail@plt+0x5a7c>
   160a8:	cmp	r0, #0
   160ac:	beq	160bc <__assert_fail@plt+0x5164>
   160b0:	ldr	r4, [sp]
   160b4:	add	sp, sp, #4
   160b8:	pop	{pc}		; (ldr pc, [sp], #4)
   160bc:	bl	161b4 <__assert_fail@plt+0x525c>
   160c0:	str	r4, [sp, #-8]!
   160c4:	str	lr, [sp, #4]
   160c8:	mov	r1, #1
   160cc:	bl	1609c <__assert_fail@plt+0x5144>
   160d0:	ldr	r4, [sp]
   160d4:	add	sp, sp, #4
   160d8:	pop	{pc}		; (ldr pc, [sp], #4)
   160dc:	strd	r4, [sp, #-16]!
   160e0:	str	r6, [sp, #8]
   160e4:	str	lr, [sp, #12]
   160e8:	mov	r5, r0
   160ec:	mov	r4, r1
   160f0:	mov	r0, r1
   160f4:	bl	15d20 <__assert_fail@plt+0x4dc8>
   160f8:	mov	r2, r4
   160fc:	mov	r1, r5
   16100:	bl	10d30 <memcpy@plt>
   16104:	ldrd	r4, [sp]
   16108:	ldr	r6, [sp, #8]
   1610c:	add	sp, sp, #12
   16110:	pop	{pc}		; (ldr pc, [sp], #4)
   16114:	strd	r4, [sp, #-16]!
   16118:	str	r6, [sp, #8]
   1611c:	str	lr, [sp, #12]
   16120:	mov	r5, r0
   16124:	mov	r4, r1
   16128:	mov	r0, r1
   1612c:	bl	15d44 <__assert_fail@plt+0x4dec>
   16130:	mov	r2, r4
   16134:	mov	r1, r5
   16138:	bl	10d30 <memcpy@plt>
   1613c:	ldrd	r4, [sp]
   16140:	ldr	r6, [sp, #8]
   16144:	add	sp, sp, #12
   16148:	pop	{pc}		; (ldr pc, [sp], #4)
   1614c:	strd	r4, [sp, #-16]!
   16150:	str	r6, [sp, #8]
   16154:	str	lr, [sp, #12]
   16158:	mov	r5, r0
   1615c:	mov	r4, r1
   16160:	add	r0, r1, #1
   16164:	bl	15d44 <__assert_fail@plt+0x4dec>
   16168:	mov	r2, #0
   1616c:	strb	r2, [r0, r4]
   16170:	mov	r2, r4
   16174:	mov	r1, r5
   16178:	bl	10d30 <memcpy@plt>
   1617c:	ldrd	r4, [sp]
   16180:	ldr	r6, [sp, #8]
   16184:	add	sp, sp, #12
   16188:	pop	{pc}		; (ldr pc, [sp], #4)
   1618c:	str	r4, [sp, #-8]!
   16190:	str	lr, [sp, #4]
   16194:	mov	r4, r0
   16198:	bl	10e68 <strlen@plt>
   1619c:	add	r1, r0, #1
   161a0:	mov	r0, r4
   161a4:	bl	160dc <__assert_fail@plt+0x5184>
   161a8:	ldr	r4, [sp]
   161ac:	add	sp, sp, #4
   161b0:	pop	{pc}		; (ldr pc, [sp], #4)
   161b4:	str	r4, [sp, #-8]!
   161b8:	str	lr, [sp, #4]
   161bc:	movw	r3, #37116	; 0x90fc
   161c0:	movt	r3, #2
   161c4:	ldr	r4, [r3]
   161c8:	mov	r2, #5
   161cc:	movw	r1, #32740	; 0x7fe4
   161d0:	movt	r1, #1
   161d4:	mov	r0, #0
   161d8:	bl	10d78 <dcgettext@plt>
   161dc:	mov	r3, r0
   161e0:	movw	r2, #31300	; 0x7a44
   161e4:	movt	r2, #1
   161e8:	mov	r1, #0
   161ec:	mov	r0, r4
   161f0:	bl	10dfc <error@plt>
   161f4:	bl	10f40 <abort@plt>
   161f8:	strd	r4, [sp, #-16]!
   161fc:	str	r6, [sp, #8]
   16200:	str	lr, [sp, #12]
   16204:	sub	sp, sp, #16
   16208:	mov	r6, r0
   1620c:	mov	r4, r2
   16210:	mov	r5, r3
   16214:	ldr	r3, [sp, #40]	; 0x28
   16218:	str	r3, [sp]
   1621c:	add	r3, sp, #8
   16220:	mov	r2, r1
   16224:	mov	r1, #0
   16228:	bl	16484 <__assert_fail@plt+0x552c>
   1622c:	cmp	r0, #0
   16230:	bne	162a8 <__assert_fail@plt+0x5350>
   16234:	ldrd	r0, [sp, #8]
   16238:	ldrd	r2, [sp, #32]
   1623c:	cmp	r1, r3
   16240:	cmpeq	r0, r2
   16244:	movhi	r3, #1
   16248:	movls	r3, #0
   1624c:	cmp	r1, r5
   16250:	cmpeq	r0, r4
   16254:	orrcc	r3, r3, #1
   16258:	cmp	r3, #0
   1625c:	bne	16274 <__assert_fail@plt+0x531c>
   16260:	add	sp, sp, #16
   16264:	ldrd	r4, [sp]
   16268:	ldr	r6, [sp, #8]
   1626c:	add	sp, sp, #12
   16270:	pop	{pc}		; (ldr pc, [sp], #4)
   16274:	mvn	r2, #-1073741824	; 0xc0000000
   16278:	mov	r3, #0
   1627c:	cmp	r1, r3
   16280:	cmpeq	r0, r2
   16284:	bls	16298 <__assert_fail@plt+0x5340>
   16288:	bl	10e8c <__errno_location@plt>
   1628c:	mov	r3, #75	; 0x4b
   16290:	str	r3, [r0]
   16294:	b	162b8 <__assert_fail@plt+0x5360>
   16298:	bl	10e8c <__errno_location@plt>
   1629c:	mov	r3, #34	; 0x22
   162a0:	str	r3, [r0]
   162a4:	b	162b8 <__assert_fail@plt+0x5360>
   162a8:	cmp	r0, #1
   162ac:	beq	162fc <__assert_fail@plt+0x53a4>
   162b0:	cmp	r0, #3
   162b4:	beq	1630c <__assert_fail@plt+0x53b4>
   162b8:	ldr	r3, [sp, #48]	; 0x30
   162bc:	cmp	r3, #0
   162c0:	moveq	r3, #1
   162c4:	str	r3, [sp, #48]	; 0x30
   162c8:	bl	10e8c <__errno_location@plt>
   162cc:	ldr	r4, [r0]
   162d0:	cmp	r4, #22
   162d4:	moveq	r4, #0
   162d8:	mov	r0, r6
   162dc:	bl	156b4 <__assert_fail@plt+0x475c>
   162e0:	str	r0, [sp]
   162e4:	ldr	r3, [sp, #44]	; 0x2c
   162e8:	movw	r2, #31296	; 0x7a40
   162ec:	movt	r2, #1
   162f0:	mov	r1, r4
   162f4:	ldr	r0, [sp, #48]	; 0x30
   162f8:	bl	10dfc <error@plt>
   162fc:	bl	10e8c <__errno_location@plt>
   16300:	mov	r3, #75	; 0x4b
   16304:	str	r3, [r0]
   16308:	b	162b8 <__assert_fail@plt+0x5360>
   1630c:	bl	10e8c <__errno_location@plt>
   16310:	mov	r3, #0
   16314:	str	r3, [r0]
   16318:	b	162b8 <__assert_fail@plt+0x5360>
   1631c:	strd	r4, [sp, #-12]!
   16320:	str	lr, [sp, #8]
   16324:	sub	sp, sp, #28
   16328:	ldr	r1, [sp, #56]	; 0x38
   1632c:	str	r1, [sp, #16]
   16330:	ldr	r1, [sp, #52]	; 0x34
   16334:	str	r1, [sp, #12]
   16338:	ldr	r1, [sp, #48]	; 0x30
   1633c:	str	r1, [sp, #8]
   16340:	ldrd	r4, [sp, #40]	; 0x28
   16344:	strd	r4, [sp]
   16348:	mov	r1, #10
   1634c:	bl	161f8 <__assert_fail@plt+0x52a0>
   16350:	add	sp, sp, #28
   16354:	ldrd	r4, [sp]
   16358:	add	sp, sp, #8
   1635c:	pop	{pc}		; (ldr pc, [sp], #4)
   16360:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16364:	strd	r6, [sp, #8]
   16368:	strd	r8, [sp, #16]
   1636c:	strd	sl, [sp, #24]
   16370:	str	lr, [sp, #32]
   16374:	sub	sp, sp, #12
   16378:	str	r0, [sp, #4]
   1637c:	cmp	r2, #0
   16380:	beq	1647c <__assert_fail@plt+0x5524>
   16384:	sub	ip, r2, #1
   16388:	ldrd	r2, [r0]
   1638c:	mov	r0, #0
   16390:	mov	r8, r1
   16394:	asr	r9, r1, #31
   16398:	str	r1, [sp]
   1639c:	b	163ec <__assert_fail@plt+0x5494>
   163a0:	orrs	r4, r2, r3
   163a4:	movne	lr, #1
   163a8:	b	163fc <__assert_fail@plt+0x54a4>
   163ac:	mov	sl, r3
   163b0:	ldr	fp, [sp]
   163b4:	umull	r6, r7, r1, r2
   163b8:	mov	r4, r7
   163bc:	mov	r5, #0
   163c0:	umlal	r4, r5, sl, fp
   163c4:	cmp	r5, #0
   163c8:	bne	16430 <__assert_fail@plt+0x54d8>
   163cc:	cmp	lr, #0
   163d0:	bne	16448 <__assert_fail@plt+0x54f0>
   163d4:	mov	r2, r6
   163d8:	mov	r3, r4
   163dc:	orr	r0, r0, lr
   163e0:	sub	ip, ip, #1
   163e4:	cmn	ip, #1
   163e8:	beq	16458 <__assert_fail@plt+0x5500>
   163ec:	mov	lr, #0
   163f0:	cmp	r8, #0
   163f4:	sbcs	r4, r9, #0
   163f8:	blt	163a0 <__assert_fail@plt+0x5448>
   163fc:	cmp	r9, #0
   16400:	bne	1641c <__assert_fail@plt+0x54c4>
   16404:	cmp	r3, #0
   16408:	bne	163ac <__assert_fail@plt+0x5454>
   1640c:	umull	r2, r3, r1, r2
   16410:	mov	r6, r2
   16414:	mov	r4, r3
   16418:	b	163cc <__assert_fail@plt+0x5474>
   1641c:	cmp	r3, #0
   16420:	bne	16430 <__assert_fail@plt+0x54d8>
   16424:	mov	sl, r9
   16428:	mov	fp, r2
   1642c:	b	163b4 <__assert_fail@plt+0x545c>
   16430:	mul	r4, r1, r3
   16434:	mla	r4, r2, r9, r4
   16438:	umull	r6, r7, r1, r2
   1643c:	add	r4, r4, r7
   16440:	mov	lr, #1
   16444:	b	163cc <__assert_fail@plt+0x5474>
   16448:	mvn	r2, #0
   1644c:	mvn	r3, #0
   16450:	mov	lr, #1
   16454:	b	163dc <__assert_fail@plt+0x5484>
   16458:	ldr	r1, [sp, #4]
   1645c:	strd	r2, [r1]
   16460:	add	sp, sp, #12
   16464:	ldrd	r4, [sp]
   16468:	ldrd	r6, [sp, #8]
   1646c:	ldrd	r8, [sp, #16]
   16470:	ldrd	sl, [sp, #24]
   16474:	add	sp, sp, #32
   16478:	pop	{pc}		; (ldr pc, [sp], #4)
   1647c:	mov	r0, #0
   16480:	b	16460 <__assert_fail@plt+0x5508>
   16484:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16488:	strd	r6, [sp, #8]
   1648c:	strd	r8, [sp, #16]
   16490:	str	lr, [sp, #24]
   16494:	sub	sp, sp, #20
   16498:	cmp	r2, #36	; 0x24
   1649c:	bhi	164f0 <__assert_fail@plt+0x5598>
   164a0:	mov	r5, r0
   164a4:	mov	r6, r1
   164a8:	mov	r7, r2
   164ac:	mov	r9, r3
   164b0:	cmp	r1, #0
   164b4:	addeq	r6, sp, #12
   164b8:	bl	10e8c <__errno_location@plt>
   164bc:	mov	r8, r0
   164c0:	mov	r3, #0
   164c4:	str	r3, [r0]
   164c8:	ldrb	r4, [r5]
   164cc:	bl	10e50 <__ctype_b_loc@plt>
   164d0:	ldr	r1, [r0]
   164d4:	mov	r2, r5
   164d8:	lsl	r3, r4, #1
   164dc:	ldrh	r3, [r1, r3]
   164e0:	tst	r3, #8192	; 0x2000
   164e4:	beq	16510 <__assert_fail@plt+0x55b8>
   164e8:	ldrb	r4, [r2, #1]!
   164ec:	b	164d8 <__assert_fail@plt+0x5580>
   164f0:	movw	r3, #32760	; 0x7ff8
   164f4:	movt	r3, #1
   164f8:	mov	r2, #85	; 0x55
   164fc:	movw	r1, #32772	; 0x8004
   16500:	movt	r1, #1
   16504:	movw	r0, #32788	; 0x8014
   16508:	movt	r0, #1
   1650c:	bl	10f58 <__assert_fail@plt>
   16510:	cmp	r4, #45	; 0x2d
   16514:	moveq	r4, #4
   16518:	beq	166ac <__assert_fail@plt+0x5754>
   1651c:	mov	r3, #0
   16520:	mov	r2, r7
   16524:	mov	r1, r6
   16528:	mov	r0, r5
   1652c:	bl	10d3c <__strtoull_internal@plt>
   16530:	strd	r0, [sp]
   16534:	ldr	r7, [r6]
   16538:	cmp	r7, r5
   1653c:	beq	16560 <__assert_fail@plt+0x5608>
   16540:	ldr	r3, [r8]
   16544:	cmp	r3, #0
   16548:	beq	16684 <__assert_fail@plt+0x572c>
   1654c:	cmp	r3, #34	; 0x22
   16550:	moveq	r4, #1
   16554:	beq	16688 <__assert_fail@plt+0x5730>
   16558:	mov	r4, #4
   1655c:	b	166ac <__assert_fail@plt+0x5754>
   16560:	ldr	r3, [sp, #48]	; 0x30
   16564:	cmp	r3, #0
   16568:	beq	169c4 <__assert_fail@plt+0x5a6c>
   1656c:	ldrb	r1, [r5]
   16570:	cmp	r1, #0
   16574:	moveq	r4, #4
   16578:	beq	166ac <__assert_fail@plt+0x5754>
   1657c:	mov	r0, r3
   16580:	bl	10e74 <strchr@plt>
   16584:	cmp	r0, #0
   16588:	beq	169cc <__assert_fail@plt+0x5a74>
   1658c:	mov	r2, #1
   16590:	mov	r3, #0
   16594:	strd	r2, [sp]
   16598:	ldrb	r5, [r7]
   1659c:	mov	r4, #0
   165a0:	mov	r1, r5
   165a4:	ldr	r0, [sp, #48]	; 0x30
   165a8:	bl	10e74 <strchr@plt>
   165ac:	cmp	r0, #0
   165b0:	beq	166c8 <__assert_fail@plt+0x5770>
   165b4:	sub	r3, r5, #69	; 0x45
   165b8:	cmp	r3, #47	; 0x2f
   165bc:	ldrls	pc, [pc, r3, lsl #2]
   165c0:	b	16814 <__assert_fail@plt+0x58bc>
   165c4:	ldrdeq	r6, [r1], -r8
   165c8:	andeq	r6, r1, r4, lsl r8
   165cc:	ldrdeq	r6, [r1], -r8
   165d0:	andeq	r6, r1, r4, lsl r8
   165d4:	andeq	r6, r1, r4, lsl r8
   165d8:	andeq	r6, r1, r4, lsl r8
   165dc:	ldrdeq	r6, [r1], -r8
   165e0:	andeq	r6, r1, r4, lsl r8
   165e4:	ldrdeq	r6, [r1], -r8
   165e8:	andeq	r6, r1, r4, lsl r8
   165ec:	andeq	r6, r1, r4, lsl r8
   165f0:	ldrdeq	r6, [r1], -r8
   165f4:	andeq	r6, r1, r4, lsl r8
   165f8:	andeq	r6, r1, r4, lsl r8
   165fc:	andeq	r6, r1, r4, lsl r8
   16600:	ldrdeq	r6, [r1], -r8
   16604:	andeq	r6, r1, r4, lsl r8
   16608:	andeq	r6, r1, r4, lsl r8
   1660c:	andeq	r6, r1, r4, lsl r8
   16610:	andeq	r6, r1, r4, lsl r8
   16614:	ldrdeq	r6, [r1], -r8
   16618:	ldrdeq	r6, [r1], -r8
   1661c:	andeq	r6, r1, r4, lsl r8
   16620:	andeq	r6, r1, r4, lsl r8
   16624:	andeq	r6, r1, r4, lsl r8
   16628:	andeq	r6, r1, r4, lsl r8
   1662c:	andeq	r6, r1, r4, lsl r8
   16630:	andeq	r6, r1, r4, lsl r8
   16634:	andeq	r6, r1, r4, lsl r8
   16638:	andeq	r6, r1, r4, lsl r8
   1663c:	andeq	r6, r1, r4, lsl r8
   16640:	andeq	r6, r1, r4, lsl r8
   16644:	andeq	r6, r1, r4, lsl r8
   16648:	andeq	r6, r1, r4, lsl r8
   1664c:	ldrdeq	r6, [r1], -r8
   16650:	andeq	r6, r1, r4, lsl r8
   16654:	andeq	r6, r1, r4, lsl r8
   16658:	andeq	r6, r1, r4, lsl r8
   1665c:	ldrdeq	r6, [r1], -r8
   16660:	andeq	r6, r1, r4, lsl r8
   16664:	ldrdeq	r6, [r1], -r8
   16668:	andeq	r6, r1, r4, lsl r8
   1666c:	andeq	r6, r1, r4, lsl r8
   16670:	andeq	r6, r1, r4, lsl r8
   16674:	andeq	r6, r1, r4, lsl r8
   16678:	andeq	r6, r1, r4, lsl r8
   1667c:	andeq	r6, r1, r4, lsl r8
   16680:	ldrdeq	r6, [r1], -r8
   16684:	mov	r4, #0
   16688:	ldr	r3, [sp, #48]	; 0x30
   1668c:	cmp	r3, #0
   16690:	strdeq	r0, [r9]
   16694:	beq	166ac <__assert_fail@plt+0x5754>
   16698:	ldrb	r5, [r7]
   1669c:	cmp	r5, #0
   166a0:	bne	165a0 <__assert_fail@plt+0x5648>
   166a4:	ldrd	r2, [sp]
   166a8:	strd	r2, [r9]
   166ac:	mov	r0, r4
   166b0:	add	sp, sp, #20
   166b4:	ldrd	r4, [sp]
   166b8:	ldrd	r6, [sp, #8]
   166bc:	ldrd	r8, [sp, #16]
   166c0:	add	sp, sp, #24
   166c4:	pop	{pc}		; (ldr pc, [sp], #4)
   166c8:	ldrd	r2, [sp]
   166cc:	strd	r2, [r9]
   166d0:	orr	r4, r4, #2
   166d4:	b	166ac <__assert_fail@plt+0x5754>
   166d8:	mov	r1, #48	; 0x30
   166dc:	ldr	r0, [sp, #48]	; 0x30
   166e0:	bl	10e74 <strchr@plt>
   166e4:	cmp	r0, #0
   166e8:	beq	16820 <__assert_fail@plt+0x58c8>
   166ec:	ldrb	r3, [r7, #1]
   166f0:	cmp	r3, #68	; 0x44
   166f4:	beq	1682c <__assert_fail@plt+0x58d4>
   166f8:	cmp	r3, #105	; 0x69
   166fc:	beq	167fc <__assert_fail@plt+0x58a4>
   16700:	cmp	r3, #66	; 0x42
   16704:	moveq	r7, #2
   16708:	movne	r7, #1
   1670c:	moveq	r1, #1000	; 0x3e8
   16710:	movne	r1, #1024	; 0x400
   16714:	sub	r5, r5, #66	; 0x42
   16718:	cmp	r5, #53	; 0x35
   1671c:	ldrls	pc, [pc, r5, lsl #2]
   16720:	b	16990 <__assert_fail@plt+0x5a38>
   16724:	andeq	r6, r1, r0, lsl #17
   16728:	muleq	r1, r0, r9
   1672c:	muleq	r1, r0, r9
   16730:	andeq	r6, r1, r8, asr #17
   16734:	muleq	r1, r0, r9
   16738:	ldrdeq	r6, [r1], -r8
   1673c:	muleq	r1, r0, r9
   16740:	muleq	r1, r0, r9
   16744:	muleq	r1, r0, r9
   16748:	andeq	r6, r1, r8, ror #17
   1674c:	muleq	r1, r0, r9
   16750:	strdeq	r6, [r1], -r8
   16754:	muleq	r1, r0, r9
   16758:	muleq	r1, r0, r9
   1675c:	andeq	r6, r1, r8, lsl #18
   16760:	muleq	r1, r0, r9
   16764:	muleq	r1, r0, r9
   16768:	muleq	r1, r0, r9
   1676c:	andeq	r6, r1, r8, lsl r9
   16770:	muleq	r1, r0, r9
   16774:	muleq	r1, r0, r9
   16778:	muleq	r1, r0, r9
   1677c:	muleq	r1, r0, r9
   16780:	andeq	r6, r1, r0, ror r9
   16784:	andeq	r6, r1, r0, lsl #19
   16788:	muleq	r1, r0, r9
   1678c:	muleq	r1, r0, r9
   16790:	muleq	r1, r0, r9
   16794:	muleq	r1, r0, r9
   16798:	muleq	r1, r0, r9
   1679c:	muleq	r1, r0, r9
   167a0:	muleq	r1, r0, r9
   167a4:	andeq	r6, r1, r8, lsr r8
   167a8:	andeq	r6, r1, r0, lsr #19
   167ac:	muleq	r1, r0, r9
   167b0:	muleq	r1, r0, r9
   167b4:	muleq	r1, r0, r9
   167b8:	ldrdeq	r6, [r1], -r8
   167bc:	muleq	r1, r0, r9
   167c0:	muleq	r1, r0, r9
   167c4:	muleq	r1, r0, r9
   167c8:	andeq	r6, r1, r8, ror #17
   167cc:	muleq	r1, r0, r9
   167d0:	strdeq	r6, [r1], -r8
   167d4:	muleq	r1, r0, r9
   167d8:	muleq	r1, r0, r9
   167dc:	muleq	r1, r0, r9
   167e0:	muleq	r1, r0, r9
   167e4:	muleq	r1, r0, r9
   167e8:	muleq	r1, r0, r9
   167ec:	andeq	r6, r1, r8, lsl r9
   167f0:	muleq	r1, r0, r9
   167f4:	muleq	r1, r0, r9
   167f8:	andeq	r6, r1, r8, lsr #18
   167fc:	ldrb	r3, [r7, #2]
   16800:	cmp	r3, #66	; 0x42
   16804:	movne	r7, #1
   16808:	moveq	r7, #3
   1680c:	mov	r1, #1024	; 0x400
   16810:	b	16714 <__assert_fail@plt+0x57bc>
   16814:	mov	r7, #1
   16818:	mov	r1, #1024	; 0x400
   1681c:	b	16714 <__assert_fail@plt+0x57bc>
   16820:	mov	r7, #1
   16824:	mov	r1, #1024	; 0x400
   16828:	b	16714 <__assert_fail@plt+0x57bc>
   1682c:	mov	r7, #2
   16830:	mov	r1, #1000	; 0x3e8
   16834:	b	16714 <__assert_fail@plt+0x57bc>
   16838:	ldr	r3, [sp]
   1683c:	ldr	ip, [sp, #4]
   16840:	lsl	r2, ip, #9
   16844:	orr	r2, r2, r3, lsr #23
   16848:	lsl	r3, r3, #9
   1684c:	mov	r0, #0
   16850:	mov	r1, r0
   16854:	lsr	r0, ip, #23
   16858:	orrs	r1, r0, r1
   1685c:	streq	r3, [sp]
   16860:	streq	r2, [sp, #4]
   16864:	moveq	r0, #0
   16868:	beq	169a4 <__assert_fail@plt+0x5a4c>
   1686c:	mvn	r2, #0
   16870:	mvn	r3, #0
   16874:	strd	r2, [sp]
   16878:	mov	r0, #1
   1687c:	b	169a4 <__assert_fail@plt+0x5a4c>
   16880:	ldr	r3, [sp]
   16884:	ldr	ip, [sp, #4]
   16888:	lsl	r2, ip, #10
   1688c:	orr	r2, r2, r3, lsr #22
   16890:	lsl	r3, r3, #10
   16894:	mov	r0, #0
   16898:	mov	r1, r0
   1689c:	lsr	r0, ip, #22
   168a0:	orrs	r1, r0, r1
   168a4:	streq	r3, [sp]
   168a8:	streq	r2, [sp, #4]
   168ac:	moveq	r0, #0
   168b0:	beq	169a4 <__assert_fail@plt+0x5a4c>
   168b4:	mvn	r2, #0
   168b8:	mvn	r3, #0
   168bc:	strd	r2, [sp]
   168c0:	mov	r0, #1
   168c4:	b	169a4 <__assert_fail@plt+0x5a4c>
   168c8:	mov	r2, #6
   168cc:	mov	r0, sp
   168d0:	bl	16360 <__assert_fail@plt+0x5408>
   168d4:	b	169a4 <__assert_fail@plt+0x5a4c>
   168d8:	mov	r2, #3
   168dc:	mov	r0, sp
   168e0:	bl	16360 <__assert_fail@plt+0x5408>
   168e4:	b	169a4 <__assert_fail@plt+0x5a4c>
   168e8:	mov	r2, #1
   168ec:	mov	r0, sp
   168f0:	bl	16360 <__assert_fail@plt+0x5408>
   168f4:	b	169a4 <__assert_fail@plt+0x5a4c>
   168f8:	mov	r2, #2
   168fc:	mov	r0, sp
   16900:	bl	16360 <__assert_fail@plt+0x5408>
   16904:	b	169a4 <__assert_fail@plt+0x5a4c>
   16908:	mov	r2, #5
   1690c:	mov	r0, sp
   16910:	bl	16360 <__assert_fail@plt+0x5408>
   16914:	b	169a4 <__assert_fail@plt+0x5a4c>
   16918:	mov	r2, #4
   1691c:	mov	r0, sp
   16920:	bl	16360 <__assert_fail@plt+0x5408>
   16924:	b	169a4 <__assert_fail@plt+0x5a4c>
   16928:	ldr	r3, [sp]
   1692c:	ldr	r2, [sp, #4]
   16930:	adds	r3, r3, r3
   16934:	adc	r2, r2, r2
   16938:	mov	r1, #0
   1693c:	mov	r0, r1
   16940:	ldr	r1, [sp, #4]
   16944:	lsr	r1, r1, #31
   16948:	orrs	r1, r1, r0
   1694c:	streq	r3, [sp]
   16950:	streq	r2, [sp, #4]
   16954:	moveq	r0, #0
   16958:	beq	169a4 <__assert_fail@plt+0x5a4c>
   1695c:	mvn	r2, #0
   16960:	mvn	r3, #0
   16964:	strd	r2, [sp]
   16968:	mov	r0, #1
   1696c:	b	169a4 <__assert_fail@plt+0x5a4c>
   16970:	mov	r2, #8
   16974:	mov	r0, sp
   16978:	bl	16360 <__assert_fail@plt+0x5408>
   1697c:	b	169a4 <__assert_fail@plt+0x5a4c>
   16980:	mov	r2, #7
   16984:	mov	r0, sp
   16988:	bl	16360 <__assert_fail@plt+0x5408>
   1698c:	b	169a4 <__assert_fail@plt+0x5a4c>
   16990:	ldrd	r2, [sp]
   16994:	strd	r2, [r9]
   16998:	orr	r4, r4, #2
   1699c:	b	166ac <__assert_fail@plt+0x5754>
   169a0:	mov	r0, #0
   169a4:	orr	r4, r4, r0
   169a8:	ldr	r3, [r6]
   169ac:	add	r2, r3, r7
   169b0:	str	r2, [r6]
   169b4:	ldrb	r3, [r3, r7]
   169b8:	cmp	r3, #0
   169bc:	orrne	r4, r4, #2
   169c0:	b	166a4 <__assert_fail@plt+0x574c>
   169c4:	mov	r4, #4
   169c8:	b	166ac <__assert_fail@plt+0x5754>
   169cc:	mov	r4, #4
   169d0:	b	166ac <__assert_fail@plt+0x5754>
   169d4:	strd	r4, [sp, #-16]!
   169d8:	str	r6, [sp, #8]
   169dc:	str	lr, [sp, #12]
   169e0:	cmp	r1, #0
   169e4:	cmpne	r0, #0
   169e8:	beq	16a24 <__assert_fail@plt+0x5acc>
   169ec:	mov	r2, r0
   169f0:	mov	r3, r1
   169f4:	umull	r4, r5, r0, r1
   169f8:	adds	r1, r5, #0
   169fc:	movne	r1, #1
   16a00:	cmp	r4, #0
   16a04:	movlt	r1, #1
   16a08:	cmp	r1, #0
   16a0c:	beq	16a2c <__assert_fail@plt+0x5ad4>
   16a10:	bl	10e8c <__errno_location@plt>
   16a14:	mov	r3, #12
   16a18:	str	r3, [r0]
   16a1c:	mov	r0, #0
   16a20:	b	16a38 <__assert_fail@plt+0x5ae0>
   16a24:	mov	r3, #1
   16a28:	mov	r2, r3
   16a2c:	mov	r1, r3
   16a30:	mov	r0, r2
   16a34:	bl	10cd0 <calloc@plt>
   16a38:	ldrd	r4, [sp]
   16a3c:	ldr	r6, [sp, #8]
   16a40:	add	sp, sp, #12
   16a44:	pop	{pc}		; (ldr pc, [sp], #4)
   16a48:	str	r4, [sp, #-8]!
   16a4c:	str	lr, [sp, #4]
   16a50:	cmp	r0, #0
   16a54:	beq	16a70 <__assert_fail@plt+0x5b18>
   16a58:	bge	16a74 <__assert_fail@plt+0x5b1c>
   16a5c:	bl	10e8c <__errno_location@plt>
   16a60:	mov	r3, #12
   16a64:	str	r3, [r0]
   16a68:	mov	r0, #0
   16a6c:	b	16a78 <__assert_fail@plt+0x5b20>
   16a70:	mov	r0, #1
   16a74:	bl	10e14 <malloc@plt>
   16a78:	ldr	r4, [sp]
   16a7c:	add	sp, sp, #4
   16a80:	pop	{pc}		; (ldr pc, [sp], #4)
   16a84:	str	r4, [sp, #-8]!
   16a88:	str	lr, [sp, #4]
   16a8c:	cmp	r0, #0
   16a90:	beq	16ab4 <__assert_fail@plt+0x5b5c>
   16a94:	cmp	r1, #0
   16a98:	beq	16ac0 <__assert_fail@plt+0x5b68>
   16a9c:	cmp	r1, #0
   16aa0:	blt	16acc <__assert_fail@plt+0x5b74>
   16aa4:	bl	10d84 <realloc@plt>
   16aa8:	ldr	r4, [sp]
   16aac:	add	sp, sp, #4
   16ab0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ab4:	mov	r0, r1
   16ab8:	bl	16a48 <__assert_fail@plt+0x5af0>
   16abc:	b	16aa8 <__assert_fail@plt+0x5b50>
   16ac0:	bl	13150 <__assert_fail@plt+0x21f8>
   16ac4:	mov	r0, #0
   16ac8:	b	16aa8 <__assert_fail@plt+0x5b50>
   16acc:	bl	10e8c <__errno_location@plt>
   16ad0:	mov	r3, #12
   16ad4:	str	r3, [r0]
   16ad8:	mov	r0, #0
   16adc:	b	16aa8 <__assert_fail@plt+0x5b50>
   16ae0:	strd	r4, [sp, #-16]!
   16ae4:	str	r6, [sp, #8]
   16ae8:	str	lr, [sp, #12]
   16aec:	mov	r5, r0
   16af0:	bl	10de4 <__fpending@plt>
   16af4:	mov	r6, r0
   16af8:	ldr	r4, [r5]
   16afc:	and	r4, r4, #32
   16b00:	mov	r0, r5
   16b04:	bl	16b6c <__assert_fail@plt+0x5c14>
   16b08:	cmp	r4, #0
   16b0c:	bne	16b40 <__assert_fail@plt+0x5be8>
   16b10:	cmp	r0, #0
   16b14:	beq	16b30 <__assert_fail@plt+0x5bd8>
   16b18:	cmp	r6, #0
   16b1c:	bne	16b5c <__assert_fail@plt+0x5c04>
   16b20:	bl	10e8c <__errno_location@plt>
   16b24:	ldr	r0, [r0]
   16b28:	subs	r0, r0, #9
   16b2c:	mvnne	r0, #0
   16b30:	ldrd	r4, [sp]
   16b34:	ldr	r6, [sp, #8]
   16b38:	add	sp, sp, #12
   16b3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16b40:	cmp	r0, #0
   16b44:	bne	16b64 <__assert_fail@plt+0x5c0c>
   16b48:	bl	10e8c <__errno_location@plt>
   16b4c:	mov	r3, #0
   16b50:	str	r3, [r0]
   16b54:	mvn	r0, #0
   16b58:	b	16b30 <__assert_fail@plt+0x5bd8>
   16b5c:	mvn	r0, #0
   16b60:	b	16b30 <__assert_fail@plt+0x5bd8>
   16b64:	mvn	r0, #0
   16b68:	b	16b30 <__assert_fail@plt+0x5bd8>
   16b6c:	strd	r4, [sp, #-16]!
   16b70:	str	r6, [sp, #8]
   16b74:	str	lr, [sp, #12]
   16b78:	sub	sp, sp, #8
   16b7c:	mov	r4, r0
   16b80:	bl	10ebc <fileno@plt>
   16b84:	cmp	r0, #0
   16b88:	blt	16c00 <__assert_fail@plt+0x5ca8>
   16b8c:	mov	r0, r4
   16b90:	bl	10e2c <__freading@plt>
   16b94:	cmp	r0, #0
   16b98:	beq	16bcc <__assert_fail@plt+0x5c74>
   16b9c:	mov	r0, r4
   16ba0:	bl	10ebc <fileno@plt>
   16ba4:	mov	r3, #1
   16ba8:	str	r3, [sp]
   16bac:	mov	r2, #0
   16bb0:	mov	r3, #0
   16bb4:	bl	10dcc <lseek64@plt>
   16bb8:	mvn	r2, #0
   16bbc:	mvn	r3, #0
   16bc0:	cmp	r1, r3
   16bc4:	cmpeq	r0, r2
   16bc8:	beq	16c0c <__assert_fail@plt+0x5cb4>
   16bcc:	mov	r0, r4
   16bd0:	bl	16c28 <__assert_fail@plt+0x5cd0>
   16bd4:	cmp	r0, #0
   16bd8:	beq	16c0c <__assert_fail@plt+0x5cb4>
   16bdc:	bl	10e8c <__errno_location@plt>
   16be0:	mov	r5, r0
   16be4:	ldr	r6, [r0]
   16be8:	mov	r0, r4
   16bec:	bl	10ee0 <fclose@plt>
   16bf0:	cmp	r6, #0
   16bf4:	strne	r6, [r5]
   16bf8:	mvnne	r0, #0
   16bfc:	b	16c14 <__assert_fail@plt+0x5cbc>
   16c00:	mov	r0, r4
   16c04:	bl	10ee0 <fclose@plt>
   16c08:	b	16c14 <__assert_fail@plt+0x5cbc>
   16c0c:	mov	r0, r4
   16c10:	bl	10ee0 <fclose@plt>
   16c14:	add	sp, sp, #8
   16c18:	ldrd	r4, [sp]
   16c1c:	ldr	r6, [sp, #8]
   16c20:	add	sp, sp, #12
   16c24:	pop	{pc}		; (ldr pc, [sp], #4)
   16c28:	str	r4, [sp, #-8]!
   16c2c:	str	lr, [sp, #4]
   16c30:	sub	sp, sp, #8
   16c34:	subs	r4, r0, #0
   16c38:	beq	16c4c <__assert_fail@plt+0x5cf4>
   16c3c:	mov	r0, r4
   16c40:	bl	10e2c <__freading@plt>
   16c44:	cmp	r0, #0
   16c48:	bne	16c64 <__assert_fail@plt+0x5d0c>
   16c4c:	mov	r0, r4
   16c50:	bl	10d0c <fflush@plt>
   16c54:	add	sp, sp, #8
   16c58:	ldr	r4, [sp]
   16c5c:	add	sp, sp, #4
   16c60:	pop	{pc}		; (ldr pc, [sp], #4)
   16c64:	ldr	r3, [r4]
   16c68:	tst	r3, #256	; 0x100
   16c6c:	bne	16c7c <__assert_fail@plt+0x5d24>
   16c70:	mov	r0, r4
   16c74:	bl	10d0c <fflush@plt>
   16c78:	b	16c54 <__assert_fail@plt+0x5cfc>
   16c7c:	mov	r3, #1
   16c80:	str	r3, [sp]
   16c84:	mov	r2, #0
   16c88:	mov	r3, #0
   16c8c:	mov	r0, r4
   16c90:	bl	16c98 <__assert_fail@plt+0x5d40>
   16c94:	b	16c70 <__assert_fail@plt+0x5d18>
   16c98:	str	r4, [sp, #-16]!
   16c9c:	strd	r6, [sp, #4]
   16ca0:	str	lr, [sp, #12]
   16ca4:	sub	sp, sp, #8
   16ca8:	mov	r4, r0
   16cac:	mov	r6, r2
   16cb0:	mov	r7, r3
   16cb4:	ldr	r2, [r0, #8]
   16cb8:	ldr	r3, [r0, #4]
   16cbc:	cmp	r2, r3
   16cc0:	beq	16cf0 <__assert_fail@plt+0x5d98>
   16cc4:	ldr	r3, [sp, #24]
   16cc8:	str	r3, [sp]
   16ccc:	mov	r2, r6
   16cd0:	mov	r3, r7
   16cd4:	mov	r0, r4
   16cd8:	bl	10eec <fseeko64@plt>
   16cdc:	add	sp, sp, #8
   16ce0:	ldr	r4, [sp]
   16ce4:	ldrd	r6, [sp, #4]
   16ce8:	add	sp, sp, #12
   16cec:	pop	{pc}		; (ldr pc, [sp], #4)
   16cf0:	ldr	r2, [r0, #20]
   16cf4:	ldr	r3, [r0, #16]
   16cf8:	cmp	r2, r3
   16cfc:	bne	16cc4 <__assert_fail@plt+0x5d6c>
   16d00:	ldr	r3, [r0, #36]	; 0x24
   16d04:	cmp	r3, #0
   16d08:	bne	16cc4 <__assert_fail@plt+0x5d6c>
   16d0c:	bl	10ebc <fileno@plt>
   16d10:	ldr	r3, [sp, #24]
   16d14:	str	r3, [sp]
   16d18:	mov	r2, r6
   16d1c:	mov	r3, r7
   16d20:	bl	10dcc <lseek64@plt>
   16d24:	mvn	r2, #0
   16d28:	mvn	r3, #0
   16d2c:	cmp	r1, r3
   16d30:	cmpeq	r0, r2
   16d34:	beq	16d50 <__assert_fail@plt+0x5df8>
   16d38:	ldr	r3, [r4]
   16d3c:	bic	r3, r3, #16
   16d40:	str	r3, [r4]
   16d44:	strd	r0, [r4, #80]	; 0x50
   16d48:	mov	r0, #0
   16d4c:	b	16cdc <__assert_fail@plt+0x5d84>
   16d50:	mvn	r0, #0
   16d54:	b	16cdc <__assert_fail@plt+0x5d84>
   16d58:	str	r4, [sp, #-8]!
   16d5c:	str	lr, [sp, #4]
   16d60:	mov	r0, #14
   16d64:	bl	10f10 <nl_langinfo@plt>
   16d68:	cmp	r0, #0
   16d6c:	beq	16d90 <__assert_fail@plt+0x5e38>
   16d70:	ldrb	r2, [r0]
   16d74:	movw	r3, #32828	; 0x803c
   16d78:	movt	r3, #1
   16d7c:	cmp	r2, #0
   16d80:	moveq	r0, r3
   16d84:	ldr	r4, [sp]
   16d88:	add	sp, sp, #4
   16d8c:	pop	{pc}		; (ldr pc, [sp], #4)
   16d90:	movw	r0, #32828	; 0x803c
   16d94:	movt	r0, #1
   16d98:	b	16d84 <__assert_fail@plt+0x5e2c>
   16d9c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16da0:	strd	r6, [sp, #8]
   16da4:	str	lr, [sp, #16]
   16da8:	sub	sp, sp, #12
   16dac:	mov	r7, r1
   16db0:	mov	r5, r2
   16db4:	subs	r6, r0, #0
   16db8:	addeq	r6, sp, #4
   16dbc:	mov	r0, r6
   16dc0:	bl	10df0 <mbrtowc@plt>
   16dc4:	mov	r4, r0
   16dc8:	cmp	r5, #0
   16dcc:	cmnne	r0, #3
   16dd0:	bhi	16dec <__assert_fail@plt+0x5e94>
   16dd4:	mov	r0, r4
   16dd8:	add	sp, sp, #12
   16ddc:	ldrd	r4, [sp]
   16de0:	ldrd	r6, [sp, #8]
   16de4:	add	sp, sp, #16
   16de8:	pop	{pc}		; (ldr pc, [sp], #4)
   16dec:	mov	r0, #0
   16df0:	bl	16e48 <__assert_fail@plt+0x5ef0>
   16df4:	cmp	r0, #0
   16df8:	bne	16dd4 <__assert_fail@plt+0x5e7c>
   16dfc:	ldrb	r3, [r7]
   16e00:	str	r3, [r6]
   16e04:	mov	r4, #1
   16e08:	b	16dd4 <__assert_fail@plt+0x5e7c>
   16e0c:	str	r4, [sp, #-8]!
   16e10:	str	lr, [sp, #4]
   16e14:	umull	r2, r3, r1, r2
   16e18:	cmp	r3, #0
   16e1c:	bne	16e34 <__assert_fail@plt+0x5edc>
   16e20:	mov	r1, r2
   16e24:	bl	16a84 <__assert_fail@plt+0x5b2c>
   16e28:	ldr	r4, [sp]
   16e2c:	add	sp, sp, #4
   16e30:	pop	{pc}		; (ldr pc, [sp], #4)
   16e34:	bl	10e8c <__errno_location@plt>
   16e38:	mov	r3, #12
   16e3c:	str	r3, [r0]
   16e40:	mov	r0, #0
   16e44:	b	16e28 <__assert_fail@plt+0x5ed0>
   16e48:	push	{lr}		; (str lr, [sp, #-4]!)
   16e4c:	sub	sp, sp, #268	; 0x10c
   16e50:	movw	r2, #257	; 0x101
   16e54:	add	r1, sp, #4
   16e58:	bl	16ea4 <__assert_fail@plt+0x5f4c>
   16e5c:	cmp	r0, #0
   16e60:	movne	r0, #0
   16e64:	bne	16e9c <__assert_fail@plt+0x5f44>
   16e68:	movw	r1, #32836	; 0x8044
   16e6c:	movt	r1, #1
   16e70:	add	r0, sp, #4
   16e74:	bl	10cf4 <strcmp@plt>
   16e78:	cmp	r0, #0
   16e7c:	beq	16e98 <__assert_fail@plt+0x5f40>
   16e80:	movw	r1, #32840	; 0x8048
   16e84:	movt	r1, #1
   16e88:	add	r0, sp, #4
   16e8c:	bl	10cf4 <strcmp@plt>
   16e90:	adds	r0, r0, #0
   16e94:	movne	r0, #1
   16e98:	and	r0, r0, #1
   16e9c:	add	sp, sp, #268	; 0x10c
   16ea0:	pop	{pc}		; (ldr pc, [sp], #4)
   16ea4:	strd	r4, [sp, #-16]!
   16ea8:	str	r6, [sp, #8]
   16eac:	str	lr, [sp, #12]
   16eb0:	mov	r6, r1
   16eb4:	mov	r4, r2
   16eb8:	mov	r1, #0
   16ebc:	bl	10ef8 <setlocale@plt>
   16ec0:	subs	r5, r0, #0
   16ec4:	beq	16f08 <__assert_fail@plt+0x5fb0>
   16ec8:	mov	r0, r5
   16ecc:	bl	10e68 <strlen@plt>
   16ed0:	cmp	r4, r0
   16ed4:	bhi	16f24 <__assert_fail@plt+0x5fcc>
   16ed8:	cmp	r4, #0
   16edc:	moveq	r0, #34	; 0x22
   16ee0:	beq	16f38 <__assert_fail@plt+0x5fe0>
   16ee4:	sub	r4, r4, #1
   16ee8:	mov	r2, r4
   16eec:	mov	r1, r5
   16ef0:	mov	r0, r6
   16ef4:	bl	10d30 <memcpy@plt>
   16ef8:	mov	r3, #0
   16efc:	strb	r3, [r6, r4]
   16f00:	mov	r0, #34	; 0x22
   16f04:	b	16f38 <__assert_fail@plt+0x5fe0>
   16f08:	cmp	r4, #0
   16f0c:	moveq	r0, #22
   16f10:	beq	16f38 <__assert_fail@plt+0x5fe0>
   16f14:	mov	r3, #0
   16f18:	strb	r3, [r6]
   16f1c:	mov	r0, #22
   16f20:	b	16f38 <__assert_fail@plt+0x5fe0>
   16f24:	add	r2, r0, #1
   16f28:	mov	r1, r5
   16f2c:	mov	r0, r6
   16f30:	bl	10d30 <memcpy@plt>
   16f34:	mov	r0, #0
   16f38:	ldrd	r4, [sp]
   16f3c:	ldr	r6, [sp, #8]
   16f40:	add	sp, sp, #12
   16f44:	pop	{pc}		; (ldr pc, [sp], #4)
   16f48:	str	r4, [sp, #-8]!
   16f4c:	str	lr, [sp, #4]
   16f50:	mov	r1, #0
   16f54:	bl	10ef8 <setlocale@plt>
   16f58:	ldr	r4, [sp]
   16f5c:	add	sp, sp, #4
   16f60:	pop	{pc}		; (ldr pc, [sp], #4)
   16f64:	cmp	r3, #0
   16f68:	cmpeq	r2, #0
   16f6c:	bne	16f90 <__assert_fail@plt+0x6038>
   16f70:	cmp	r1, #0
   16f74:	movlt	r1, #-2147483648	; 0x80000000
   16f78:	movlt	r0, #0
   16f7c:	blt	16f8c <__assert_fail@plt+0x6034>
   16f80:	cmpeq	r0, #0
   16f84:	mvnne	r1, #-2147483648	; 0x80000000
   16f88:	mvnne	r0, #0
   16f8c:	b	17074 <__assert_fail@plt+0x611c>
   16f90:	sub	sp, sp, #8
   16f94:	push	{sp, lr}
   16f98:	cmp	r1, #0
   16f9c:	blt	16fbc <__assert_fail@plt+0x6064>
   16fa0:	cmp	r3, #0
   16fa4:	blt	16ff0 <__assert_fail@plt+0x6098>
   16fa8:	bl	17084 <__assert_fail@plt+0x612c>
   16fac:	ldr	lr, [sp, #4]
   16fb0:	add	sp, sp, #8
   16fb4:	pop	{r2, r3}
   16fb8:	bx	lr
   16fbc:	rsbs	r0, r0, #0
   16fc0:	sbc	r1, r1, r1, lsl #1
   16fc4:	cmp	r3, #0
   16fc8:	blt	17014 <__assert_fail@plt+0x60bc>
   16fcc:	bl	17084 <__assert_fail@plt+0x612c>
   16fd0:	ldr	lr, [sp, #4]
   16fd4:	add	sp, sp, #8
   16fd8:	pop	{r2, r3}
   16fdc:	rsbs	r0, r0, #0
   16fe0:	sbc	r1, r1, r1, lsl #1
   16fe4:	rsbs	r2, r2, #0
   16fe8:	sbc	r3, r3, r3, lsl #1
   16fec:	bx	lr
   16ff0:	rsbs	r2, r2, #0
   16ff4:	sbc	r3, r3, r3, lsl #1
   16ff8:	bl	17084 <__assert_fail@plt+0x612c>
   16ffc:	ldr	lr, [sp, #4]
   17000:	add	sp, sp, #8
   17004:	pop	{r2, r3}
   17008:	rsbs	r0, r0, #0
   1700c:	sbc	r1, r1, r1, lsl #1
   17010:	bx	lr
   17014:	rsbs	r2, r2, #0
   17018:	sbc	r3, r3, r3, lsl #1
   1701c:	bl	17084 <__assert_fail@plt+0x612c>
   17020:	ldr	lr, [sp, #4]
   17024:	add	sp, sp, #8
   17028:	pop	{r2, r3}
   1702c:	rsbs	r2, r2, #0
   17030:	sbc	r3, r3, r3, lsl #1
   17034:	bx	lr
   17038:	cmp	r3, #0
   1703c:	cmpeq	r2, #0
   17040:	bne	17058 <__assert_fail@plt+0x6100>
   17044:	cmp	r1, #0
   17048:	cmpeq	r0, #0
   1704c:	mvnne	r1, #0
   17050:	mvnne	r0, #0
   17054:	b	17074 <__assert_fail@plt+0x611c>
   17058:	sub	sp, sp, #8
   1705c:	push	{sp, lr}
   17060:	bl	17084 <__assert_fail@plt+0x612c>
   17064:	ldr	lr, [sp, #4]
   17068:	add	sp, sp, #8
   1706c:	pop	{r2, r3}
   17070:	bx	lr
   17074:	push	{r1, lr}
   17078:	mov	r0, #8
   1707c:	bl	10ce8 <raise@plt>
   17080:	pop	{r1, pc}
   17084:	cmp	r1, r3
   17088:	cmpeq	r0, r2
   1708c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17090:	mov	r4, r0
   17094:	movcc	r0, #0
   17098:	mov	r5, r1
   1709c:	ldr	lr, [sp, #36]	; 0x24
   170a0:	movcc	r1, r0
   170a4:	bcc	171a0 <__assert_fail@plt+0x6248>
   170a8:	cmp	r3, #0
   170ac:	clzeq	ip, r2
   170b0:	clzne	ip, r3
   170b4:	addeq	ip, ip, #32
   170b8:	cmp	r5, #0
   170bc:	clzeq	r1, r4
   170c0:	addeq	r1, r1, #32
   170c4:	clzne	r1, r5
   170c8:	sub	ip, ip, r1
   170cc:	sub	sl, ip, #32
   170d0:	lsl	r9, r3, ip
   170d4:	rsb	fp, ip, #32
   170d8:	orr	r9, r9, r2, lsl sl
   170dc:	orr	r9, r9, r2, lsr fp
   170e0:	lsl	r8, r2, ip
   170e4:	cmp	r5, r9
   170e8:	cmpeq	r4, r8
   170ec:	movcc	r0, #0
   170f0:	movcc	r1, r0
   170f4:	bcc	17110 <__assert_fail@plt+0x61b8>
   170f8:	mov	r0, #1
   170fc:	subs	r4, r4, r8
   17100:	lsl	r1, r0, sl
   17104:	orr	r1, r1, r0, lsr fp
   17108:	lsl	r0, r0, ip
   1710c:	sbc	r5, r5, r9
   17110:	cmp	ip, #0
   17114:	beq	171a0 <__assert_fail@plt+0x6248>
   17118:	lsr	r6, r8, #1
   1711c:	orr	r6, r6, r9, lsl #31
   17120:	lsr	r7, r9, #1
   17124:	mov	r2, ip
   17128:	b	1714c <__assert_fail@plt+0x61f4>
   1712c:	subs	r3, r4, r6
   17130:	sbc	r8, r5, r7
   17134:	adds	r3, r3, r3
   17138:	adc	r8, r8, r8
   1713c:	adds	r4, r3, #1
   17140:	adc	r5, r8, #0
   17144:	subs	r2, r2, #1
   17148:	beq	17168 <__assert_fail@plt+0x6210>
   1714c:	cmp	r5, r7
   17150:	cmpeq	r4, r6
   17154:	bcs	1712c <__assert_fail@plt+0x61d4>
   17158:	adds	r4, r4, r4
   1715c:	adc	r5, r5, r5
   17160:	subs	r2, r2, #1
   17164:	bne	1714c <__assert_fail@plt+0x61f4>
   17168:	lsr	r3, r4, ip
   1716c:	orr	r3, r3, r5, lsl fp
   17170:	lsr	r2, r5, ip
   17174:	orr	r3, r3, r5, lsr sl
   17178:	adds	r0, r0, r4
   1717c:	mov	r4, r3
   17180:	lsl	r3, r2, ip
   17184:	orr	r3, r3, r4, lsl sl
   17188:	lsl	ip, r4, ip
   1718c:	orr	r3, r3, r4, lsr fp
   17190:	adc	r1, r1, r5
   17194:	subs	r0, r0, ip
   17198:	mov	r5, r2
   1719c:	sbc	r1, r1, r3
   171a0:	cmp	lr, #0
   171a4:	strdne	r4, [lr]
   171a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   171ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   171b0:	mov	r7, r0
   171b4:	ldr	r6, [pc, #72]	; 17204 <__assert_fail@plt+0x62ac>
   171b8:	ldr	r5, [pc, #72]	; 17208 <__assert_fail@plt+0x62b0>
   171bc:	add	r6, pc, r6
   171c0:	add	r5, pc, r5
   171c4:	sub	r6, r6, r5
   171c8:	mov	r8, r1
   171cc:	mov	r9, r2
   171d0:	bl	10cb0 <calloc@plt-0x20>
   171d4:	asrs	r6, r6, #2
   171d8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   171dc:	mov	r4, #0
   171e0:	add	r4, r4, #1
   171e4:	ldr	r3, [r5], #4
   171e8:	mov	r2, r9
   171ec:	mov	r1, r8
   171f0:	mov	r0, r7
   171f4:	blx	r3
   171f8:	cmp	r6, r4
   171fc:	bne	171e0 <__assert_fail@plt+0x6288>
   17200:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17204:	andeq	r1, r1, r0, asr sp
   17208:	andeq	r1, r1, r8, asr #26
   1720c:	bx	lr
   17210:	ldr	r3, [pc, #12]	; 17224 <__assert_fail@plt+0x62cc>
   17214:	mov	r1, #0
   17218:	add	r3, pc, r3
   1721c:	ldr	r2, [r3]
   17220:	b	10e98 <__cxa_atexit@plt>
   17224:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

00017228 <.fini>:
   17228:	push	{r3, lr}
   1722c:	pop	{r3, pc}
