
../repos/coreutils/src/libstdbuf.so:     file format elf32-littlearm


Disassembly of section .init:

00000400 <.init>:
 400:	push	{r3, lr}
 404:	bl	784 <__fprintf_chk@plt+0x2f8>
 408:	pop	{r3, pc}

Disassembly of section .plt:

0000040c <__cxa_finalize@plt-0x14>:
 40c:	push	{lr}		; (str lr, [sp, #-4]!)
 410:	ldr	lr, [pc, #4]	; 41c <__cxa_finalize@plt-0x4>
 414:	add	lr, pc, lr
 418:	ldr	pc, [lr, #8]!
 41c:	andeq	r0, r1, r4, ror #23

00000420 <__cxa_finalize@plt>:
 420:	add	ip, pc, #0, 12
 424:	add	ip, ip, #16, 20	; 0x10000
 428:	ldr	pc, [ip, #3044]!	; 0xbe4

0000042c <free@plt>:
 42c:	add	ip, pc, #0, 12
 430:	add	ip, ip, #16, 20	; 0x10000
 434:	ldr	pc, [ip, #3036]!	; 0xbdc

00000438 <dcgettext@plt>:
 438:	add	ip, pc, #0, 12
 43c:	add	ip, ip, #16, 20	; 0x10000
 440:	ldr	pc, [ip, #3028]!	; 0xbd4

00000444 <getenv@plt>:
 444:	add	ip, pc, #0, 12
 448:	add	ip, ip, #16, 20	; 0x10000
 44c:	ldr	pc, [ip, #3020]!	; 0xbcc

00000450 <malloc@plt>:
 450:	add	ip, pc, #0, 12
 454:	add	ip, ip, #16, 20	; 0x10000
 458:	ldr	pc, [ip, #3012]!	; 0xbc4

0000045c <__gmon_start__@plt>:
 45c:	add	ip, pc, #0, 12
 460:	add	ip, ip, #16, 20	; 0x10000
 464:	ldr	pc, [ip, #3004]!	; 0xbbc

00000468 <setvbuf@plt>:
 468:	add	ip, pc, #0, 12
 46c:	add	ip, ip, #16, 20	; 0x10000
 470:	ldr	pc, [ip, #2996]!	; 0xbb4

00000474 <fileno@plt>:
 474:	add	ip, pc, #0, 12
 478:	add	ip, ip, #16, 20	; 0x10000
 47c:	ldr	pc, [ip, #2988]!	; 0xbac

00000480 <strtoumax@plt>:
 480:	add	ip, pc, #0, 12
 484:	add	ip, ip, #16, 20	; 0x10000
 488:	ldr	pc, [ip, #2980]!	; 0xba4

0000048c <__fprintf_chk@plt>:
 48c:	add	ip, pc, #0, 12
 490:	add	ip, ip, #16, 20	; 0x10000
 494:	ldr	pc, [ip, #2972]!	; 0xb9c

Disassembly of section .text:

00000498 <.text>:
 498:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 49c:	mov	sl, r0
 4a0:	mov	r8, r1
 4a4:	ldrb	r3, [r1]
 4a8:	ldr	r9, [pc, #496]	; 6a0 <__fprintf_chk@plt+0x214>
 4ac:	cmp	r3, #48	; 0x30
 4b0:	add	r9, pc, r9
 4b4:	beq	66c <__fprintf_chk@plt+0x1e0>
 4b8:	cmp	r3, #76	; 0x4c
 4bc:	moveq	r4, #0
 4c0:	moveq	r2, #1
 4c4:	beq	674 <__fprintf_chk@plt+0x1e8>
 4c8:	mov	r2, #10
 4cc:	add	r1, sp, #12
 4d0:	mov	r0, r8
 4d4:	bl	480 <strtoumax@plt>
 4d8:	mov	r4, r0
 4dc:	mov	r5, r1
 4e0:	orrs	r3, r4, r5
 4e4:	beq	4f8 <__fprintf_chk@plt+0x6c>
 4e8:	ldr	r3, [sp, #12]
 4ec:	ldrb	r6, [r3]
 4f0:	cmp	r6, #0
 4f4:	beq	588 <__fprintf_chk@plt+0xfc>
 4f8:	ldr	r3, [pc, #420]	; 6a4 <__fprintf_chk@plt+0x218>
 4fc:	mov	r2, #5
 500:	mov	r0, #0
 504:	ldr	r1, [pc, #412]	; 6a8 <__fprintf_chk@plt+0x21c>
 508:	ldr	r3, [r9, r3]
 50c:	add	r1, pc, r1
 510:	ldr	r4, [r3]
 514:	bl	438 <dcgettext@plt>
 518:	mov	r5, r0
 51c:	mov	r0, sl
 520:	bl	474 <fileno@plt>
 524:	cmp	r0, #1
 528:	beq	564 <__fprintf_chk@plt+0xd8>
 52c:	cmp	r0, #2
 530:	beq	570 <__fprintf_chk@plt+0xe4>
 534:	cmp	r0, #0
 538:	beq	57c <__fprintf_chk@plt+0xf0>
 53c:	ldr	r3, [pc, #360]	; 6ac <__fprintf_chk@plt+0x220>
 540:	add	r3, pc, r3
 544:	mov	r2, r5
 548:	mov	r1, #1
 54c:	str	r3, [sp]
 550:	mov	r0, r4
 554:	mov	r3, r8
 558:	bl	48c <__fprintf_chk@plt>
 55c:	add	sp, sp, #16
 560:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 564:	ldr	r3, [pc, #324]	; 6b0 <__fprintf_chk@plt+0x224>
 568:	add	r3, pc, r3
 56c:	b	544 <__fprintf_chk@plt+0xb8>
 570:	ldr	r3, [pc, #316]	; 6b4 <__fprintf_chk@plt+0x228>
 574:	add	r3, pc, r3
 578:	b	544 <__fprintf_chk@plt+0xb8>
 57c:	ldr	r3, [pc, #308]	; 6b8 <__fprintf_chk@plt+0x22c>
 580:	add	r3, pc, r3
 584:	b	544 <__fprintf_chk@plt+0xb8>
 588:	mov	r3, #0
 58c:	mvn	r2, #0
 590:	cmp	r1, r3
 594:	cmpeq	r0, r2
 598:	bls	5d4 <__fprintf_chk@plt+0x148>
 59c:	ldr	r3, [pc, #256]	; 6a4 <__fprintf_chk@plt+0x218>
 5a0:	mov	r2, #5
 5a4:	mov	r0, #0
 5a8:	ldr	r1, [pc, #268]	; 6bc <__fprintf_chk@plt+0x230>
 5ac:	ldr	r3, [r9, r3]
 5b0:	add	r1, pc, r1
 5b4:	ldr	r6, [r3]
 5b8:	bl	438 <dcgettext@plt>
 5bc:	mov	r2, r0
 5c0:	mov	r1, #1
 5c4:	strd	r4, [sp]
 5c8:	mov	r0, r6
 5cc:	bl	48c <__fprintf_chk@plt>
 5d0:	b	55c <__fprintf_chk@plt+0xd0>
 5d4:	bl	450 <malloc@plt>
 5d8:	subs	r7, r0, #0
 5dc:	movne	r2, r6
 5e0:	beq	59c <__fprintf_chk@plt+0x110>
 5e4:	mov	r3, r4
 5e8:	mov	r1, r7
 5ec:	mov	r0, sl
 5f0:	bl	468 <setvbuf@plt>
 5f4:	cmp	r0, #0
 5f8:	beq	55c <__fprintf_chk@plt+0xd0>
 5fc:	ldr	r3, [pc, #160]	; 6a4 <__fprintf_chk@plt+0x218>
 600:	mov	r2, #5
 604:	mov	r0, #0
 608:	ldr	r1, [pc, #176]	; 6c0 <__fprintf_chk@plt+0x234>
 60c:	ldr	r3, [r9, r3]
 610:	add	r1, pc, r1
 614:	ldr	r4, [r3]
 618:	bl	438 <dcgettext@plt>
 61c:	mov	r5, r0
 620:	mov	r0, sl
 624:	bl	474 <fileno@plt>
 628:	cmp	r0, #1
 62c:	beq	67c <__fprintf_chk@plt+0x1f0>
 630:	cmp	r0, #2
 634:	beq	688 <__fprintf_chk@plt+0x1fc>
 638:	cmp	r0, #0
 63c:	beq	694 <__fprintf_chk@plt+0x208>
 640:	ldr	r3, [pc, #124]	; 6c4 <__fprintf_chk@plt+0x238>
 644:	add	r3, pc, r3
 648:	mov	r2, r5
 64c:	mov	r1, #1
 650:	str	r8, [sp]
 654:	mov	r0, r4
 658:	bl	48c <__fprintf_chk@plt>
 65c:	mov	r0, r7
 660:	add	sp, sp, #16
 664:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
 668:	b	42c <free@plt>
 66c:	mov	r4, #0
 670:	mov	r2, #2
 674:	mov	r7, #0
 678:	b	5e4 <__fprintf_chk@plt+0x158>
 67c:	ldr	r3, [pc, #68]	; 6c8 <__fprintf_chk@plt+0x23c>
 680:	add	r3, pc, r3
 684:	b	648 <__fprintf_chk@plt+0x1bc>
 688:	ldr	r3, [pc, #60]	; 6cc <__fprintf_chk@plt+0x240>
 68c:	add	r3, pc, r3
 690:	b	648 <__fprintf_chk@plt+0x1bc>
 694:	ldr	r3, [pc, #52]	; 6d0 <__fprintf_chk@plt+0x244>
 698:	add	r3, pc, r3
 69c:	b	648 <__fprintf_chk@plt+0x1bc>
 6a0:	andeq	r0, r1, r8, asr #22
 6a4:	andeq	r0, r0, ip, lsr r0
 6a8:			; <UNDEFINED> instruction: 0x000003b8
 6ac:	andeq	r0, r0, r8, ror #6
 6b0:	andeq	r0, r0, r5, asr r3
 6b4:	andeq	r0, r0, r2, asr #6
 6b8:	andeq	r0, r0, r0, lsr r3
 6bc:	andeq	r0, r0, r6, lsr r3
 6c0:	andeq	r0, r0, r3, lsl #6
 6c4:	andeq	r0, r0, r4, ror #4
 6c8:	andeq	r0, r0, sp, lsr r2
 6cc:	andeq	r0, r0, sl, lsr #4
 6d0:	andeq	r0, r0, r8, lsl r2
 6d4:	ldr	r0, [pc, #140]	; 768 <__fprintf_chk@plt+0x2dc>
 6d8:	push	{r4, r5, r6, r7, r8, lr}
 6dc:	ldr	r4, [pc, #136]	; 76c <__fprintf_chk@plt+0x2e0>
 6e0:	add	r0, pc, r0
 6e4:	bl	444 <getenv@plt>
 6e8:	mov	r7, r0
 6ec:	ldr	r0, [pc, #124]	; 770 <__fprintf_chk@plt+0x2e4>
 6f0:	add	r4, pc, r4
 6f4:	add	r0, pc, r0
 6f8:	bl	444 <getenv@plt>
 6fc:	mov	r6, r0
 700:	ldr	r0, [pc, #108]	; 774 <__fprintf_chk@plt+0x2e8>
 704:	add	r0, pc, r0
 708:	bl	444 <getenv@plt>
 70c:	cmp	r7, #0
 710:	mov	r5, r0
 714:	beq	72c <__fprintf_chk@plt+0x2a0>
 718:	ldr	r3, [pc, #88]	; 778 <__fprintf_chk@plt+0x2ec>
 71c:	mov	r1, r7
 720:	ldr	r3, [r4, r3]
 724:	ldr	r0, [r3]
 728:	bl	498 <__fprintf_chk@plt+0xc>
 72c:	cmp	r6, #0
 730:	beq	748 <__fprintf_chk@plt+0x2bc>
 734:	ldr	r3, [pc, #64]	; 77c <__fprintf_chk@plt+0x2f0>
 738:	mov	r1, r6
 73c:	ldr	r3, [r4, r3]
 740:	ldr	r0, [r3]
 744:	bl	498 <__fprintf_chk@plt+0xc>
 748:	cmp	r5, #0
 74c:	popeq	{r4, r5, r6, r7, r8, pc}
 750:	mov	r1, r5
 754:	ldr	r3, [pc, #36]	; 780 <__fprintf_chk@plt+0x2f4>
 758:	ldr	r3, [r4, r3]
 75c:	pop	{r4, r5, r6, r7, r8, lr}
 760:	ldr	r0, [r3]
 764:	b	498 <__fprintf_chk@plt+0xc>
 768:	andeq	r0, r0, sp, asr r2
 76c:	andeq	r0, r1, r8, lsl #18
 770:	andeq	r0, r0, r3, asr r2
 774:	andeq	r0, r0, sp, asr #4
 778:	andeq	r0, r0, ip, lsr r0
 77c:	andeq	r0, r0, r4, asr #32
 780:	andeq	r0, r0, r8, asr #32
 784:	ldr	r3, [pc, #20]	; 7a0 <__fprintf_chk@plt+0x314>
 788:	ldr	r2, [pc, #20]	; 7a4 <__fprintf_chk@plt+0x318>
 78c:	add	r3, pc, r3
 790:	ldr	r2, [r3, r2]
 794:	cmp	r2, #0
 798:	bxeq	lr
 79c:	b	45c <__gmon_start__@plt>
 7a0:	andeq	r0, r1, ip, ror #16
 7a4:	andeq	r0, r0, r0, asr #32
 7a8:	ldr	r0, [pc, #44]	; 7dc <__fprintf_chk@plt+0x350>
 7ac:	ldr	r3, [pc, #44]	; 7e0 <__fprintf_chk@plt+0x354>
 7b0:	add	r0, pc, r0
 7b4:	add	r3, pc, r3
 7b8:	cmp	r3, r0
 7bc:	ldr	r3, [pc, #32]	; 7e4 <__fprintf_chk@plt+0x358>
 7c0:	add	r3, pc, r3
 7c4:	bxeq	lr
 7c8:	ldr	r2, [pc, #24]	; 7e8 <__fprintf_chk@plt+0x35c>
 7cc:	ldr	r3, [r3, r2]
 7d0:	cmp	r3, #0
 7d4:	bxeq	lr
 7d8:	bx	r3
 7dc:	muleq	r1, ip, r8
 7e0:	muleq	r1, r8, r8
 7e4:	andeq	r0, r1, r8, lsr r8
 7e8:	andeq	r0, r0, r8, lsr r0
 7ec:	ldr	r0, [pc, #56]	; 82c <__fprintf_chk@plt+0x3a0>
 7f0:	ldr	r3, [pc, #56]	; 830 <__fprintf_chk@plt+0x3a4>
 7f4:	add	r0, pc, r0
 7f8:	add	r3, pc, r3
 7fc:	sub	r1, r3, r0
 800:	ldr	r3, [pc, #44]	; 834 <__fprintf_chk@plt+0x3a8>
 804:	asr	r1, r1, #2
 808:	add	r3, pc, r3
 80c:	add	r1, r1, r1, lsr #31
 810:	asrs	r1, r1, #1
 814:	bxeq	lr
 818:	ldr	r2, [pc, #24]	; 838 <__fprintf_chk@plt+0x3ac>
 81c:	ldr	r3, [r3, r2]
 820:	cmp	r3, #0
 824:	bxeq	lr
 828:	bx	r3
 82c:	andeq	r0, r1, r8, asr r8
 830:	andeq	r0, r1, r4, asr r8
 834:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
 838:	andeq	r0, r0, ip, asr #32
 83c:	ldr	r3, [pc, #76]	; 890 <__fprintf_chk@plt+0x404>
 840:	ldr	r2, [pc, #76]	; 894 <__fprintf_chk@plt+0x408>
 844:	add	r3, pc, r3
 848:	add	r2, pc, r2
 84c:	ldrb	r3, [r3]
 850:	cmp	r3, #0
 854:	bxne	lr
 858:	ldr	r3, [pc, #56]	; 898 <__fprintf_chk@plt+0x40c>
 85c:	push	{r4, lr}
 860:	ldr	r3, [r2, r3]
 864:	cmp	r3, #0
 868:	beq	878 <__fprintf_chk@plt+0x3ec>
 86c:	ldr	r3, [pc, #40]	; 89c <__fprintf_chk@plt+0x410>
 870:	ldr	r0, [pc, r3]
 874:	bl	420 <__cxa_finalize@plt>
 878:	bl	7a8 <__fprintf_chk@plt+0x31c>
 87c:	ldr	r3, [pc, #28]	; 8a0 <__fprintf_chk@plt+0x414>
 880:	mov	r2, #1
 884:	add	r3, pc, r3
 888:	strb	r2, [r3]
 88c:	pop	{r4, pc}
 890:	andeq	r0, r1, r8, lsl #16
 894:			; <UNDEFINED> instruction: 0x000107b0
 898:	andeq	r0, r0, r4, lsr r0
 89c:	ldrdeq	r0, [r1], -r8
 8a0:	andeq	r0, r1, r8, asr #15
 8a4:	b	7ec <__fprintf_chk@plt+0x360>

Disassembly of section .fini:

000008a8 <.fini>:
 8a8:	push	{r3, lr}
 8ac:	pop	{r3, pc}
