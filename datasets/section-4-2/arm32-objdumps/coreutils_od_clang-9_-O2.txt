
../repos/coreutils/src/od:     file format elf32-littlearm


Disassembly of section .init:

00011050 <.init>:
   11050:	push	{r3, lr}
   11054:	bl	1137c <__assert_fail@plt+0x48>
   11058:	pop	{r3, pc}

Disassembly of section .plt:

0001105c <calloc@plt-0x14>:
   1105c:	push	{lr}		; (str lr, [sp, #-4]!)
   11060:	ldr	lr, [pc, #4]	; 1106c <calloc@plt-0x4>
   11064:	add	lr, pc, lr
   11068:	ldr	pc, [lr, #8]!
   1106c:	muleq	r1, r4, pc	; <UNPREDICTABLE>

00011070 <calloc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #106496	; 0x1a000
   11078:	ldr	pc, [ip, #3988]!	; 0xf94

0001107c <fputs_unlocked@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #106496	; 0x1a000
   11084:	ldr	pc, [ip, #3980]!	; 0xf8c

00011088 <raise@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #106496	; 0x1a000
   11090:	ldr	pc, [ip, #3972]!	; 0xf84

00011094 <strcmp@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #106496	; 0x1a000
   1109c:	ldr	pc, [ip, #3964]!	; 0xf7c

000110a0 <fflush@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #106496	; 0x1a000
   110a8:	ldr	pc, [ip, #3956]!	; 0xf74

000110ac <free@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #106496	; 0x1a000
   110b4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b8 <ferror@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #106496	; 0x1a000
   110c0:	ldr	pc, [ip, #3940]!	; 0xf64

000110c4 <_exit@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #106496	; 0x1a000
   110cc:	ldr	pc, [ip, #3932]!	; 0xf5c

000110d0 <memcpy@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #106496	; 0x1a000
   110d8:	ldr	pc, [ip, #3924]!	; 0xf54

000110dc <__strtoull_internal@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #106496	; 0x1a000
   110e4:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e8 <mbsinit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #106496	; 0x1a000
   110f0:	ldr	pc, [ip, #3908]!	; 0xf44

000110f4 <strtold@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #106496	; 0x1a000
   110fc:	ldr	pc, [ip, #3900]!	; 0xf3c

00011100 <dcgettext@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #106496	; 0x1a000
   11108:	ldr	pc, [ip, #3892]!	; 0xf34

0001110c <realloc@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #106496	; 0x1a000
   11114:	ldr	pc, [ip, #3884]!	; 0xf2c

00011118 <textdomain@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #106496	; 0x1a000
   11120:	ldr	pc, [ip, #3876]!	; 0xf24

00011124 <iswprint@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #106496	; 0x1a000
   1112c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011130 <__fxstat64@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #106496	; 0x1a000
   11138:	ldr	pc, [ip, #3860]!	; 0xf14

0001113c <fwrite@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #106496	; 0x1a000
   11144:	ldr	pc, [ip, #3852]!	; 0xf0c

00011148 <lseek64@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #106496	; 0x1a000
   11150:	ldr	pc, [ip, #3844]!	; 0xf04

00011154 <__ctype_get_mb_cur_max@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #106496	; 0x1a000
   1115c:	ldr	pc, [ip, #3836]!	; 0xefc

00011160 <__fpending@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #106496	; 0x1a000
   11168:	ldr	pc, [ip, #3828]!	; 0xef4

0001116c <mbrtowc@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #106496	; 0x1a000
   11174:	ldr	pc, [ip, #3820]!	; 0xeec

00011178 <error@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #106496	; 0x1a000
   11180:	ldr	pc, [ip, #3812]!	; 0xee4

00011184 <strtof@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #106496	; 0x1a000
   1118c:	ldr	pc, [ip, #3804]!	; 0xedc

00011190 <malloc@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #106496	; 0x1a000
   11198:	ldr	pc, [ip, #3796]!	; 0xed4

0001119c <__libc_start_main@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #106496	; 0x1a000
   111a4:	ldr	pc, [ip, #3788]!	; 0xecc

000111a8 <__vfprintf_chk@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #106496	; 0x1a000
   111b0:	ldr	pc, [ip, #3780]!	; 0xec4

000111b4 <__freading@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #106496	; 0x1a000
   111bc:	ldr	pc, [ip, #3772]!	; 0xebc

000111c0 <__gmon_start__@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #106496	; 0x1a000
   111c8:	ldr	pc, [ip, #3764]!	; 0xeb4

000111cc <getopt_long@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #106496	; 0x1a000
   111d4:	ldr	pc, [ip, #3756]!	; 0xeac

000111d8 <__ctype_b_loc@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #106496	; 0x1a000
   111e0:	ldr	pc, [ip, #3748]!	; 0xea4

000111e4 <exit@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #106496	; 0x1a000
   111ec:	ldr	pc, [ip, #3740]!	; 0xe9c

000111f0 <bcmp@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #106496	; 0x1a000
   111f8:	ldr	pc, [ip, #3732]!	; 0xe94

000111fc <strlen@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #106496	; 0x1a000
   11204:	ldr	pc, [ip, #3724]!	; 0xe8c

00011208 <strchr@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #106496	; 0x1a000
   11210:	ldr	pc, [ip, #3716]!	; 0xe84

00011214 <__errno_location@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011220 <__sprintf_chk@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3700]!	; 0xe74

0001122c <__cxa_atexit@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3692]!	; 0xe6c

00011238 <setvbuf@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3684]!	; 0xe64

00011244 <memset@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011250 <fgetc@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3668]!	; 0xe54

0001125c <__printf_chk@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3660]!	; 0xe4c

00011268 <strtod@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3652]!	; 0xe44

00011274 <fileno@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3644]!	; 0xe3c

00011280 <__fprintf_chk@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3636]!	; 0xe34

0001128c <fclose@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3628]!	; 0xe2c

00011298 <fseeko64@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3620]!	; 0xe24

000112a4 <__overflow@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3612]!	; 0xe1c

000112b0 <setlocale@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3604]!	; 0xe14

000112bc <strrchr@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c8 <nl_langinfo@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3588]!	; 0xe04

000112d4 <localeconv@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3580]!	; 0xdfc

000112e0 <clearerr_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3572]!	; 0xdf4

000112ec <fopen64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3564]!	; 0xdec

000112f8 <bindtextdomain@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3556]!	; 0xde4

00011304 <fread_unlocked@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3548]!	; 0xddc

00011310 <strncmp@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3540]!	; 0xdd4

0001131c <abort@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3532]!	; 0xdcc

00011328 <__snprintf_chk@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3524]!	; 0xdc4

00011334 <__assert_fail@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3516]!	; 0xdbc

Disassembly of section .text:

00011340 <.text>:
   11340:	mov	fp, #0
   11344:	mov	lr, #0
   11348:	pop	{r1}		; (ldr r1, [sp], #4)
   1134c:	mov	r2, sp
   11350:	push	{r2}		; (str r2, [sp, #-4]!)
   11354:	push	{r0}		; (str r0, [sp, #-4]!)
   11358:	ldr	ip, [pc, #16]	; 11370 <__assert_fail@plt+0x3c>
   1135c:	push	{ip}		; (str ip, [sp, #-4]!)
   11360:	ldr	r0, [pc, #12]	; 11374 <__assert_fail@plt+0x40>
   11364:	ldr	r3, [pc, #12]	; 11378 <__assert_fail@plt+0x44>
   11368:	bl	1119c <__libc_start_main@plt>
   1136c:	bl	1131c <abort@plt>
   11370:	andeq	r9, r1, r0, asr #25
   11374:	andeq	r1, r1, ip, asr #15
   11378:	andeq	r9, r1, r0, ror #24
   1137c:	ldr	r3, [pc, #20]	; 11398 <__assert_fail@plt+0x64>
   11380:	ldr	r2, [pc, #20]	; 1139c <__assert_fail@plt+0x68>
   11384:	add	r3, pc, r3
   11388:	ldr	r2, [r3, r2]
   1138c:	cmp	r2, #0
   11390:	bxeq	lr
   11394:	b	111c0 <__gmon_start__@plt>
   11398:	andeq	sl, r1, r4, ror ip
   1139c:	strdeq	r0, [r0], -ip
   113a0:	ldr	r0, [pc, #24]	; 113c0 <__assert_fail@plt+0x8c>
   113a4:	ldr	r3, [pc, #24]	; 113c4 <__assert_fail@plt+0x90>
   113a8:	cmp	r3, r0
   113ac:	bxeq	lr
   113b0:	ldr	r3, [pc, #16]	; 113c8 <__assert_fail@plt+0x94>
   113b4:	cmp	r3, #0
   113b8:	bxeq	lr
   113bc:	bx	r3
   113c0:	andeq	ip, r2, r8, asr r1
   113c4:	andeq	ip, r2, r8, asr r1
   113c8:	andeq	r0, r0, r0
   113cc:	ldr	r0, [pc, #36]	; 113f8 <__assert_fail@plt+0xc4>
   113d0:	ldr	r1, [pc, #36]	; 113fc <__assert_fail@plt+0xc8>
   113d4:	sub	r1, r1, r0
   113d8:	asr	r1, r1, #2
   113dc:	add	r1, r1, r1, lsr #31
   113e0:	asrs	r1, r1, #1
   113e4:	bxeq	lr
   113e8:	ldr	r3, [pc, #16]	; 11400 <__assert_fail@plt+0xcc>
   113ec:	cmp	r3, #0
   113f0:	bxeq	lr
   113f4:	bx	r3
   113f8:	andeq	ip, r2, r8, asr r1
   113fc:	andeq	ip, r2, r8, asr r1
   11400:	andeq	r0, r0, r0
   11404:	push	{r4, lr}
   11408:	ldr	r4, [pc, #24]	; 11428 <__assert_fail@plt+0xf4>
   1140c:	ldrb	r3, [r4]
   11410:	cmp	r3, #0
   11414:	popne	{r4, pc}
   11418:	bl	113a0 <__assert_fail@plt+0x6c>
   1141c:	mov	r3, #1
   11420:	strb	r3, [r4]
   11424:	pop	{r4, pc}
   11428:	andeq	ip, r2, ip, ror r1
   1142c:	b	113cc <__assert_fail@plt+0x98>
   11430:	push	{fp, lr}
   11434:	mov	fp, sp
   11438:	sub	sp, sp, #64	; 0x40
   1143c:	mov	r4, r0
   11440:	cmp	r0, #0
   11444:	bne	11788 <__assert_fail@plt+0x454>
   11448:	movw	r1, #40211	; 0x9d13
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	11100 <dcgettext@plt>
   1145c:	mov	r1, r0
   11460:	movw	r0, #49720	; 0xc238
   11464:	movt	r0, #2
   11468:	ldr	r2, [r0]
   1146c:	mov	r0, #1
   11470:	mov	r3, r2
   11474:	str	r2, [sp]
   11478:	bl	1125c <__printf_chk@plt>
   1147c:	movw	r1, #40374	; 0x9db6
   11480:	mov	r0, #0
   11484:	mov	r2, #5
   11488:	movt	r1, #1
   1148c:	bl	11100 <dcgettext@plt>
   11490:	movw	r7, #49524	; 0xc174
   11494:	movt	r7, #2
   11498:	ldr	r1, [r7]
   1149c:	bl	1107c <fputs_unlocked@plt>
   114a0:	movw	r1, #43854	; 0xab4e
   114a4:	mov	r0, #0
   114a8:	mov	r2, #5
   114ac:	movt	r1, #1
   114b0:	bl	11100 <dcgettext@plt>
   114b4:	ldr	r1, [r7]
   114b8:	bl	1107c <fputs_unlocked@plt>
   114bc:	movw	r1, #40556	; 0x9e6c
   114c0:	mov	r0, #0
   114c4:	mov	r2, #5
   114c8:	movt	r1, #1
   114cc:	bl	11100 <dcgettext@plt>
   114d0:	ldr	r1, [r7]
   114d4:	bl	1107c <fputs_unlocked@plt>
   114d8:	movw	r1, #43910	; 0xab86
   114dc:	mov	r0, #0
   114e0:	mov	r2, #5
   114e4:	movt	r1, #1
   114e8:	bl	11100 <dcgettext@plt>
   114ec:	ldr	r1, [r7]
   114f0:	bl	1107c <fputs_unlocked@plt>
   114f4:	movw	r1, #40947	; 0x9ff3
   114f8:	mov	r0, #0
   114fc:	mov	r2, #5
   11500:	movt	r1, #1
   11504:	bl	11100 <dcgettext@plt>
   11508:	ldr	r1, [r7]
   1150c:	bl	1107c <fputs_unlocked@plt>
   11510:	movw	r1, #41234	; 0xa112
   11514:	mov	r0, #0
   11518:	mov	r2, #5
   1151c:	movt	r1, #1
   11520:	bl	11100 <dcgettext@plt>
   11524:	ldr	r1, [r7]
   11528:	bl	1107c <fputs_unlocked@plt>
   1152c:	movw	r1, #41786	; 0xa33a
   11530:	mov	r0, #0
   11534:	mov	r2, #5
   11538:	movt	r1, #1
   1153c:	bl	11100 <dcgettext@plt>
   11540:	ldr	r1, [r7]
   11544:	bl	1107c <fputs_unlocked@plt>
   11548:	movw	r1, #41831	; 0xa367
   1154c:	mov	r0, #0
   11550:	mov	r2, #5
   11554:	movt	r1, #1
   11558:	bl	11100 <dcgettext@plt>
   1155c:	ldr	r1, [r7]
   11560:	bl	1107c <fputs_unlocked@plt>
   11564:	movw	r1, #41885	; 0xa39d
   11568:	mov	r0, #0
   1156c:	mov	r2, #5
   11570:	movt	r1, #1
   11574:	bl	11100 <dcgettext@plt>
   11578:	ldr	r1, [r7]
   1157c:	bl	1107c <fputs_unlocked@plt>
   11580:	movw	r1, #42200	; 0xa4d8
   11584:	mov	r0, #0
   11588:	mov	r2, #5
   1158c:	movt	r1, #1
   11590:	bl	11100 <dcgettext@plt>
   11594:	ldr	r1, [r7]
   11598:	bl	1107c <fputs_unlocked@plt>
   1159c:	movw	r1, #42474	; 0xa5ea
   115a0:	mov	r0, #0
   115a4:	mov	r2, #5
   115a8:	movt	r1, #1
   115ac:	bl	11100 <dcgettext@plt>
   115b0:	ldr	r1, [r7]
   115b4:	bl	1107c <fputs_unlocked@plt>
   115b8:	movw	r1, #42640	; 0xa690
   115bc:	mov	r0, #0
   115c0:	mov	r2, #5
   115c4:	movt	r1, #1
   115c8:	bl	11100 <dcgettext@plt>
   115cc:	ldr	r1, [r7]
   115d0:	bl	1107c <fputs_unlocked@plt>
   115d4:	movw	r1, #42889	; 0xa789
   115d8:	mov	r0, #0
   115dc:	mov	r2, #5
   115e0:	movt	r1, #1
   115e4:	bl	11100 <dcgettext@plt>
   115e8:	ldr	r1, [r7]
   115ec:	bl	1107c <fputs_unlocked@plt>
   115f0:	movw	r1, #43133	; 0xa87d
   115f4:	mov	r0, #0
   115f8:	mov	r2, #5
   115fc:	movt	r1, #1
   11600:	bl	11100 <dcgettext@plt>
   11604:	ldr	r1, [r7]
   11608:	bl	1107c <fputs_unlocked@plt>
   1160c:	movw	r1, #43227	; 0xa8db
   11610:	mov	r0, #0
   11614:	mov	r2, #5
   11618:	movt	r1, #1
   1161c:	bl	11100 <dcgettext@plt>
   11620:	ldr	r1, [r7]
   11624:	bl	1107c <fputs_unlocked@plt>
   11628:	movw	r0, #45416	; 0xb168
   1162c:	mov	r2, #48	; 0x30
   11630:	add	r6, sp, #8
   11634:	movw	r5, #43459	; 0xa9c3
   11638:	movt	r0, #1
   1163c:	movt	r5, #1
   11640:	add	r1, r0, #32
   11644:	add	r3, r0, #16
   11648:	vld1.64	{d18-d19}, [r0], r2
   1164c:	vld1.64	{d16-d17}, [r1]
   11650:	vld1.64	{d20-d21}, [r3]
   11654:	vldr	d22, [r0]
   11658:	add	r1, r6, #32
   1165c:	add	r0, r6, #16
   11660:	vst1.64	{d16-d17}, [r1]
   11664:	movw	r1, #43985	; 0xabd1
   11668:	vst1.64	{d20-d21}, [r0]
   1166c:	mov	r0, r6
   11670:	movt	r1, #1
   11674:	vst1.64	{d18-d19}, [r0], r2
   11678:	vstr	d22, [r0]
   1167c:	mov	r0, r5
   11680:	bl	11094 <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	ldrne	r1, [r6, #8]!
   1168c:	cmpne	r1, #0
   11690:	bne	1167c <__assert_fail@plt+0x348>
   11694:	movw	r1, #44080	; 0xac30
   11698:	ldr	r6, [r6, #4]
   1169c:	mov	r0, #0
   116a0:	mov	r2, #5
   116a4:	movt	r1, #1
   116a8:	bl	11100 <dcgettext@plt>
   116ac:	movw	r2, #43619	; 0xaa63
   116b0:	movw	r3, #44103	; 0xac47
   116b4:	mov	r1, r0
   116b8:	mov	r0, #1
   116bc:	movt	r2, #1
   116c0:	movt	r3, #1
   116c4:	bl	1125c <__printf_chk@plt>
   116c8:	cmp	r6, #0
   116cc:	mov	r0, #5
   116d0:	mov	r1, #0
   116d4:	moveq	r6, r5
   116d8:	bl	112b0 <setlocale@plt>
   116dc:	cmp	r0, #0
   116e0:	beq	11718 <__assert_fail@plt+0x3e4>
   116e4:	movw	r1, #44143	; 0xac6f
   116e8:	mov	r2, #3
   116ec:	movt	r1, #1
   116f0:	bl	11310 <strncmp@plt>
   116f4:	cmp	r0, #0
   116f8:	beq	11718 <__assert_fail@plt+0x3e4>
   116fc:	movw	r1, #44147	; 0xac73
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	11100 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	1107c <fputs_unlocked@plt>
   11718:	movw	r1, #44218	; 0xacba
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	11100 <dcgettext@plt>
   1172c:	movw	r2, #44103	; 0xac47
   11730:	mov	r1, r0
   11734:	mov	r0, #1
   11738:	mov	r3, r5
   1173c:	movt	r2, #1
   11740:	bl	1125c <__printf_chk@plt>
   11744:	movw	r1, #44245	; 0xacd5
   11748:	mov	r0, #0
   1174c:	mov	r2, #5
   11750:	movt	r1, #1
   11754:	bl	11100 <dcgettext@plt>
   11758:	mov	r1, r0
   1175c:	movw	r0, #44013	; 0xabed
   11760:	movw	r3, #44295	; 0xad07
   11764:	cmp	r6, r5
   11768:	mov	r2, r6
   1176c:	movt	r0, #1
   11770:	movt	r3, #1
   11774:	moveq	r3, r0
   11778:	mov	r0, #1
   1177c:	bl	1125c <__printf_chk@plt>
   11780:	mov	r0, r4
   11784:	bl	111e4 <exit@plt>
   11788:	movw	r0, #49512	; 0xc168
   1178c:	movw	r1, #40172	; 0x9cec
   11790:	mov	r2, #5
   11794:	movt	r0, #2
   11798:	movt	r1, #1
   1179c:	ldr	r5, [r0]
   117a0:	mov	r0, #0
   117a4:	bl	11100 <dcgettext@plt>
   117a8:	mov	r2, r0
   117ac:	movw	r0, #49720	; 0xc238
   117b0:	mov	r1, #1
   117b4:	movt	r0, #2
   117b8:	ldr	r3, [r0]
   117bc:	mov	r0, r5
   117c0:	bl	11280 <__fprintf_chk@plt>
   117c4:	mov	r0, r4
   117c8:	bl	111e4 <exit@plt>
   117cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   117d0:	add	fp, sp, #28
   117d4:	sub	sp, sp, #148	; 0x94
   117d8:	sub	sp, sp, #8192	; 0x2000
   117dc:	mov	r6, r0
   117e0:	ldr	r0, [r1]
   117e4:	mov	r5, r1
   117e8:	bl	15e28 <__assert_fail@plt+0x4af4>
   117ec:	movw	r1, #44295	; 0xad07
   117f0:	mov	r0, #6
   117f4:	mov	sl, #6
   117f8:	movt	r1, #1
   117fc:	bl	112b0 <setlocale@plt>
   11800:	movw	r4, #43623	; 0xaa67
   11804:	movw	r1, #43462	; 0xa9c6
   11808:	movt	r4, #1
   1180c:	movt	r1, #1
   11810:	mov	r0, r4
   11814:	bl	112f8 <bindtextdomain@plt>
   11818:	mov	r0, r4
   1181c:	bl	11118 <textdomain@plt>
   11820:	movw	r0, #22404	; 0x5784
   11824:	movt	r0, #1
   11828:	bl	19cc4 <__assert_fail@plt+0x8990>
   1182c:	movw	r4, #49536	; 0xc180
   11830:	vmov.i32	q8, #0	; 0x00000000
   11834:	movw	r1, #49612	; 0xc1cc
   11838:	mov	r8, #0
   1183c:	mov	r3, #32
   11840:	mov	r7, #2
   11844:	mov	r9, #1
   11848:	movt	r4, #2
   1184c:	movt	r1, #2
   11850:	add	r0, r4, #16
   11854:	str	r8, [r1]
   11858:	movw	r1, #49620	; 0xc1d4
   1185c:	vst1.64	{d16-d17}, [r0]
   11860:	movw	r0, #49576	; 0xc1a8
   11864:	movt	r1, #2
   11868:	movt	r0, #2
   1186c:	str	r8, [r1]
   11870:	movw	r1, #49624	; 0xc1d8
   11874:	add	r2, r0, #16
   11878:	movt	r1, #2
   1187c:	vst1.64	{d16-d17}, [r2]
   11880:	movw	r2, #49616	; 0xc1d0
   11884:	str	sl, [r0, #16]
   11888:	movw	sl, #45125	; 0xb045
   1188c:	vst1.64	{d16-d17}, [r0], r3
   11890:	movt	r2, #2
   11894:	movt	sl, #1
   11898:	str	r8, [r2]
   1189c:	movw	r2, #13512	; 0x34c8
   118a0:	movt	r2, #1
   118a4:	str	r2, [r1]
   118a8:	movw	r1, #49628	; 0xc1dc
   118ac:	mov	r2, #8
   118b0:	movt	r1, #2
   118b4:	str	r2, [r1]
   118b8:	movw	r1, #49632	; 0xc1e0
   118bc:	mov	r2, #7
   118c0:	movt	r1, #2
   118c4:	str	r2, [r0]
   118c8:	mov	r0, #0
   118cc:	str	r0, [sp, #32]
   118d0:	str	r2, [r1]
   118d4:	movw	r1, #49636	; 0xc1e4
   118d8:	movt	r1, #2
   118dc:	strb	r8, [r1]
   118e0:	mov	r1, r4
   118e4:	vst1.64	{d16-d17}, [r1], r3
   118e8:	str	r9, [r4, #4]
   118ec:	str	r7, [r4, #8]
   118f0:	mov	r7, #4
   118f4:	str	r7, [r4, #16]
   118f8:	mov	r7, #5
   118fc:	str	r7, [r1]
   11900:	movw	r7, #45160	; 0xb068
   11904:	movt	r7, #1
   11908:	b	1191c <__assert_fail@plt+0x5e8>
   1190c:	movw	r0, #43616	; 0xaa60
   11910:	movt	r0, #1
   11914:	bl	13620 <__assert_fail@plt+0x22ec>
   11918:	and	r9, r9, r0
   1191c:	mvn	r0, #0
   11920:	mov	r1, r5
   11924:	mov	r2, sl
   11928:	mov	r3, r7
   1192c:	str	r0, [sp, #36]	; 0x24
   11930:	add	r0, sp, #36	; 0x24
   11934:	str	r0, [sp]
   11938:	mov	r0, r6
   1193c:	bl	111cc <getopt_long@plt>
   11940:	add	r0, r0, #3
   11944:	cmp	r0, #260	; 0x104
   11948:	bhi	13294 <__assert_fail@plt+0x1f60>
   1194c:	add	r1, pc, #0
   11950:	ldr	pc, [r1, r0, lsl #2]
   11954:	muleq	r1, ip, r2
   11958:	andeq	r3, r1, r4, ror #5
   1195c:	andeq	r2, r1, r8, lsr #2
   11960:	muleq	r1, r4, r2
   11964:	muleq	r1, r4, r2
   11968:	muleq	r1, r4, r2
   1196c:	muleq	r1, r4, r2
   11970:	muleq	r1, r4, r2
   11974:	muleq	r1, r4, r2
   11978:	muleq	r1, r4, r2
   1197c:	muleq	r1, r4, r2
   11980:	muleq	r1, r4, r2
   11984:	muleq	r1, r4, r2
   11988:	muleq	r1, r4, r2
   1198c:	muleq	r1, r4, r2
   11990:	muleq	r1, r4, r2
   11994:	muleq	r1, r4, r2
   11998:	muleq	r1, r4, r2
   1199c:	muleq	r1, r4, r2
   119a0:	muleq	r1, r4, r2
   119a4:	muleq	r1, r4, r2
   119a8:	muleq	r1, r4, r2
   119ac:	muleq	r1, r4, r2
   119b0:	muleq	r1, r4, r2
   119b4:	muleq	r1, r4, r2
   119b8:	muleq	r1, r4, r2
   119bc:	muleq	r1, r4, r2
   119c0:	muleq	r1, r4, r2
   119c4:	muleq	r1, r4, r2
   119c8:	muleq	r1, r4, r2
   119cc:	muleq	r1, r4, r2
   119d0:	muleq	r1, r4, r2
   119d4:	muleq	r1, r4, r2
   119d8:	muleq	r1, r4, r2
   119dc:	muleq	r1, r4, r2
   119e0:	muleq	r1, r4, r2
   119e4:	muleq	r1, r4, r2
   119e8:	muleq	r1, r4, r2
   119ec:	muleq	r1, r4, r2
   119f0:	muleq	r1, r4, r2
   119f4:	muleq	r1, r4, r2
   119f8:	muleq	r1, r4, r2
   119fc:	muleq	r1, r4, r2
   11a00:	muleq	r1, r4, r2
   11a04:	muleq	r1, r4, r2
   11a08:	muleq	r1, r4, r2
   11a0c:	muleq	r1, r4, r2
   11a10:	muleq	r1, r4, r2
   11a14:	muleq	r1, r4, r2
   11a18:	muleq	r1, r4, r2
   11a1c:	muleq	r1, r4, r2
   11a20:	muleq	r1, r4, r2
   11a24:	muleq	r1, r4, r2
   11a28:	muleq	r1, r4, r2
   11a2c:	muleq	r1, r4, r2
   11a30:	muleq	r1, r4, r2
   11a34:	muleq	r1, r4, r2
   11a38:	muleq	r1, r4, r2
   11a3c:	muleq	r1, r4, r2
   11a40:	muleq	r1, r4, r2
   11a44:	muleq	r1, r4, r2
   11a48:	muleq	r1, r4, r2
   11a4c:	muleq	r1, r4, r2
   11a50:	muleq	r1, r4, r2
   11a54:	muleq	r1, r4, r2
   11a58:	muleq	r1, r4, r2
   11a5c:	muleq	r1, r4, r2
   11a60:	muleq	r1, r4, r2
   11a64:	strdeq	r1, [r1], -r0
   11a68:	andeq	r1, r1, r4, ror sp
   11a6c:	muleq	r1, r4, r2
   11a70:	andeq	r1, r1, r8, asr #29
   11a74:	muleq	r1, r4, r2
   11a78:	andeq	r1, r1, r0, lsl #27
   11a7c:	muleq	r1, r4, r2
   11a80:	andeq	r1, r1, ip, lsl #27
   11a84:	andeq	r1, r1, r8, ror #26
   11a88:	muleq	r1, r4, r2
   11a8c:	muleq	r1, r4, r2
   11a90:	andeq	r1, r1, r8, ror #26
   11a94:	muleq	r1, r4, r2
   11a98:	andeq	r1, r1, r8, lsr #30
   11a9c:	andeq	r1, r1, ip, asr #27
   11aa0:	muleq	r1, r4, r2
   11aa4:	muleq	r1, r4, r2
   11aa8:	muleq	r1, r4, r2
   11aac:	andeq	r1, r1, ip, ror lr
   11ab0:	muleq	r1, r4, r2
   11ab4:	muleq	r1, r4, r2
   11ab8:	muleq	r1, r4, r2
   11abc:	muleq	r1, r4, r2
   11ac0:	andeq	r1, r1, ip, lsl #27
   11ac4:	muleq	r1, r4, r2
   11ac8:	muleq	r1, r4, r2
   11acc:	muleq	r1, r4, r2
   11ad0:	muleq	r1, r4, r2
   11ad4:	muleq	r1, r4, r2
   11ad8:	muleq	r1, r4, r2
   11adc:	muleq	r1, r4, r2
   11ae0:	muleq	r1, r4, r2
   11ae4:			; <UNDEFINED> instruction: 0x00011db4
   11ae8:	andeq	r1, r1, r0, ror #29
   11aec:	ldrdeq	r1, [r1], -r8
   11af0:	andeq	r1, r1, r4, ror #27
   11af4:	andeq	r1, r1, r0, lsl #27
   11af8:	ldrdeq	r1, [r1], -r4
   11afc:	muleq	r1, r4, r2
   11b00:	andeq	r1, r1, ip, lsl #18
   11b04:	andeq	r1, r1, r0, ror lr
   11b08:	andeq	r1, r1, ip, ror #29
   11b0c:	muleq	r1, r4, r2
   11b10:	andeq	r1, r1, r8, ror #26
   11b14:	muleq	r1, r4, r2
   11b18:	muleq	r1, r4, r2
   11b1c:	andeq	r1, r1, r4, ror sp
   11b20:	muleq	r1, r4, r2
   11b24:	muleq	r1, r4, r2
   11b28:	muleq	r1, r4, r2
   11b2c:	andeq	r1, r1, r0, asr #27
   11b30:	muleq	r1, r8, sp
   11b34:	muleq	r1, r4, r2
   11b38:	andeq	r1, r1, ip, ror #31
   11b3c:	andeq	r2, r1, r0
   11b40:	andeq	r1, r1, ip, lsl #18
   11b44:	muleq	r1, r4, r2
   11b48:	muleq	r1, r4, r2
   11b4c:	muleq	r1, r4, r2
   11b50:	muleq	r1, r4, r2
   11b54:	muleq	r1, r4, r2
   11b58:	muleq	r1, r4, r2
   11b5c:	muleq	r1, r4, r2
   11b60:	muleq	r1, r4, r2
   11b64:	muleq	r1, r4, r2
   11b68:	muleq	r1, r4, r2
   11b6c:	muleq	r1, r4, r2
   11b70:	muleq	r1, r4, r2
   11b74:	muleq	r1, r4, r2
   11b78:	muleq	r1, r4, r2
   11b7c:	muleq	r1, r4, r2
   11b80:	muleq	r1, r4, r2
   11b84:	muleq	r1, r4, r2
   11b88:	muleq	r1, r4, r2
   11b8c:	muleq	r1, r4, r2
   11b90:	muleq	r1, r4, r2
   11b94:	muleq	r1, r4, r2
   11b98:	muleq	r1, r4, r2
   11b9c:	muleq	r1, r4, r2
   11ba0:	muleq	r1, r4, r2
   11ba4:	muleq	r1, r4, r2
   11ba8:	muleq	r1, r4, r2
   11bac:	muleq	r1, r4, r2
   11bb0:	muleq	r1, r4, r2
   11bb4:	muleq	r1, r4, r2
   11bb8:	muleq	r1, r4, r2
   11bbc:	muleq	r1, r4, r2
   11bc0:	muleq	r1, r4, r2
   11bc4:	muleq	r1, r4, r2
   11bc8:	muleq	r1, r4, r2
   11bcc:	muleq	r1, r4, r2
   11bd0:	muleq	r1, r4, r2
   11bd4:	muleq	r1, r4, r2
   11bd8:	muleq	r1, r4, r2
   11bdc:	muleq	r1, r4, r2
   11be0:	muleq	r1, r4, r2
   11be4:	muleq	r1, r4, r2
   11be8:	muleq	r1, r4, r2
   11bec:	muleq	r1, r4, r2
   11bf0:	muleq	r1, r4, r2
   11bf4:	muleq	r1, r4, r2
   11bf8:	muleq	r1, r4, r2
   11bfc:	muleq	r1, r4, r2
   11c00:	muleq	r1, r4, r2
   11c04:	muleq	r1, r4, r2
   11c08:	muleq	r1, r4, r2
   11c0c:	muleq	r1, r4, r2
   11c10:	muleq	r1, r4, r2
   11c14:	muleq	r1, r4, r2
   11c18:	muleq	r1, r4, r2
   11c1c:	muleq	r1, r4, r2
   11c20:	muleq	r1, r4, r2
   11c24:	muleq	r1, r4, r2
   11c28:	muleq	r1, r4, r2
   11c2c:	muleq	r1, r4, r2
   11c30:	muleq	r1, r4, r2
   11c34:	muleq	r1, r4, r2
   11c38:	muleq	r1, r4, r2
   11c3c:	muleq	r1, r4, r2
   11c40:	muleq	r1, r4, r2
   11c44:	muleq	r1, r4, r2
   11c48:	muleq	r1, r4, r2
   11c4c:	muleq	r1, r4, r2
   11c50:	muleq	r1, r4, r2
   11c54:	muleq	r1, r4, r2
   11c58:	muleq	r1, r4, r2
   11c5c:	muleq	r1, r4, r2
   11c60:	muleq	r1, r4, r2
   11c64:	muleq	r1, r4, r2
   11c68:	muleq	r1, r4, r2
   11c6c:	muleq	r1, r4, r2
   11c70:	muleq	r1, r4, r2
   11c74:	muleq	r1, r4, r2
   11c78:	muleq	r1, r4, r2
   11c7c:	muleq	r1, r4, r2
   11c80:	muleq	r1, r4, r2
   11c84:	muleq	r1, r4, r2
   11c88:	muleq	r1, r4, r2
   11c8c:	muleq	r1, r4, r2
   11c90:	muleq	r1, r4, r2
   11c94:	muleq	r1, r4, r2
   11c98:	muleq	r1, r4, r2
   11c9c:	muleq	r1, r4, r2
   11ca0:	muleq	r1, r4, r2
   11ca4:	muleq	r1, r4, r2
   11ca8:	muleq	r1, r4, r2
   11cac:	muleq	r1, r4, r2
   11cb0:	muleq	r1, r4, r2
   11cb4:	muleq	r1, r4, r2
   11cb8:	muleq	r1, r4, r2
   11cbc:	muleq	r1, r4, r2
   11cc0:	muleq	r1, r4, r2
   11cc4:	muleq	r1, r4, r2
   11cc8:	muleq	r1, r4, r2
   11ccc:	muleq	r1, r4, r2
   11cd0:	muleq	r1, r4, r2
   11cd4:	muleq	r1, r4, r2
   11cd8:	muleq	r1, r4, r2
   11cdc:	muleq	r1, r4, r2
   11ce0:	muleq	r1, r4, r2
   11ce4:	muleq	r1, r4, r2
   11ce8:	muleq	r1, r4, r2
   11cec:	muleq	r1, r4, r2
   11cf0:	muleq	r1, r4, r2
   11cf4:	muleq	r1, r4, r2
   11cf8:	muleq	r1, r4, r2
   11cfc:	muleq	r1, r4, r2
   11d00:	muleq	r1, r4, r2
   11d04:	muleq	r1, r4, r2
   11d08:	muleq	r1, r4, r2
   11d0c:	muleq	r1, r4, r2
   11d10:	muleq	r1, r4, r2
   11d14:	muleq	r1, r4, r2
   11d18:	muleq	r1, r4, r2
   11d1c:	muleq	r1, r4, r2
   11d20:	muleq	r1, r4, r2
   11d24:	muleq	r1, r4, r2
   11d28:	muleq	r1, r4, r2
   11d2c:	muleq	r1, r4, r2
   11d30:	muleq	r1, r4, r2
   11d34:	muleq	r1, r4, r2
   11d38:	muleq	r1, r4, r2
   11d3c:	muleq	r1, r4, r2
   11d40:	muleq	r1, r4, r2
   11d44:	muleq	r1, r4, r2
   11d48:	muleq	r1, r4, r2
   11d4c:	muleq	r1, r4, r2
   11d50:	muleq	r1, r4, r2
   11d54:	muleq	r1, r4, r2
   11d58:	muleq	r1, r4, r2
   11d5c:	muleq	r1, r4, r2
   11d60:	andeq	r1, r1, r0, ror pc
   11d64:	andeq	r1, r1, ip, ror pc
   11d68:	movw	r0, #43604	; 0xaa54
   11d6c:	movt	r0, #1
   11d70:	b	11914 <__assert_fail@plt+0x5e0>
   11d74:	movw	r0, #43610	; 0xaa5a
   11d78:	movt	r0, #1
   11d7c:	b	11914 <__assert_fail@plt+0x5e0>
   11d80:	movw	r0, #43592	; 0xaa48
   11d84:	movt	r0, #1
   11d88:	b	11914 <__assert_fail@plt+0x5e0>
   11d8c:	movw	r0, #43598	; 0xaa4e
   11d90:	movt	r0, #1
   11d94:	b	11914 <__assert_fail@plt+0x5e0>
   11d98:	movw	r0, #49528	; 0xc178
   11d9c:	movt	r0, #2
   11da0:	ldr	r0, [r0]
   11da4:	bl	13620 <__assert_fail@plt+0x22ec>
   11da8:	and	r9, r9, r0
   11dac:	mov	r8, #1
   11db0:	b	1191c <__assert_fail@plt+0x5e8>
   11db4:	movw	r0, #44888	; 0xaf58
   11db8:	movt	r0, #1
   11dbc:	b	11914 <__assert_fail@plt+0x5e0>
   11dc0:	movw	r0, #43613	; 0xaa5d
   11dc4:	movt	r0, #1
   11dc8:	b	11914 <__assert_fail@plt+0x5e0>
   11dcc:	movw	r0, #43607	; 0xaa57
   11dd0:	movt	r0, #1
   11dd4:	b	11914 <__assert_fail@plt+0x5e0>
   11dd8:	movw	r0, #44909	; 0xaf6d
   11ddc:	movt	r0, #1
   11de0:	b	11914 <__assert_fail@plt+0x5e0>
   11de4:	movw	r0, #43589	; 0xaa45
   11de8:	movt	r0, #1
   11dec:	b	11914 <__assert_fail@plt+0x5e0>
   11df0:	movw	r4, #49528	; 0xc178
   11df4:	movt	r4, #2
   11df8:	ldr	r0, [r4]
   11dfc:	ldrb	r0, [r0]
   11e00:	sub	r0, r0, #100	; 0x64
   11e04:	cmp	r0, #20
   11e08:	bhi	132ec <__assert_fail@plt+0x1fb8>
   11e0c:	add	r1, pc, #0
   11e10:	ldr	pc, [r1, r0, lsl #2]
   11e14:	andeq	r1, r1, r8, ror #28
   11e18:	andeq	r3, r1, ip, ror #5
   11e1c:	andeq	r3, r1, ip, ror #5
   11e20:	andeq	r3, r1, ip, ror #5
   11e24:	andeq	r3, r1, ip, ror #5
   11e28:	andeq	r3, r1, ip, ror #5
   11e2c:	andeq	r3, r1, ip, ror #5
   11e30:	andeq	r3, r1, ip, ror #5
   11e34:	andeq	r3, r1, ip, ror #5
   11e38:	andeq	r3, r1, ip, ror #5
   11e3c:	andeq	r2, r1, r8, asr #1
   11e40:	andeq	r2, r1, ip, ror #1
   11e44:	andeq	r3, r1, ip, ror #5
   11e48:	andeq	r3, r1, ip, ror #5
   11e4c:	andeq	r3, r1, ip, ror #5
   11e50:	andeq	r3, r1, ip, ror #5
   11e54:	andeq	r3, r1, ip, ror #5
   11e58:	andeq	r3, r1, ip, ror #5
   11e5c:	andeq	r3, r1, ip, ror #5
   11e60:	andeq	r3, r1, ip, ror #5
   11e64:	muleq	r1, ip, r0
   11e68:	mov	r0, #10
   11e6c:	b	120f0 <__assert_fail@plt+0xdbc>
   11e70:	movw	r0, #43601	; 0xaa51
   11e74:	movt	r0, #1
   11e78:	b	11914 <__assert_fail@plt+0x5e0>
   11e7c:	movw	r4, #49528	; 0xc178
   11e80:	movt	r4, #2
   11e84:	ldr	r0, [r4]
   11e88:	cmp	r0, #0
   11e8c:	beq	12050 <__assert_fail@plt+0xd1c>
   11e90:	movw	r1, #45112	; 0xb038
   11e94:	add	r3, sp, #40	; 0x28
   11e98:	mov	r2, #0
   11e9c:	movt	r1, #1
   11ea0:	str	r1, [sp]
   11ea4:	mov	r1, #0
   11ea8:	bl	18b0c <__assert_fail@plt+0x77d8>
   11eac:	cmp	r0, #0
   11eb0:	bne	13318 <__assert_fail@plt+0x1fe4>
   11eb4:	ldr	r0, [sp, #44]	; 0x2c
   11eb8:	cmp	r0, #0
   11ebc:	bne	13388 <__assert_fail@plt+0x2054>
   11ec0:	ldr	r0, [sp, #40]	; 0x28
   11ec4:	b	12054 <__assert_fail@plt+0xd20>
   11ec8:	movw	r0, #43586	; 0xaa42
   11ecc:	movt	r0, #1
   11ed0:	b	11914 <__assert_fail@plt+0x5e0>
   11ed4:	movw	r0, #43595	; 0xaa4b
   11ed8:	movt	r0, #1
   11edc:	b	11914 <__assert_fail@plt+0x5e0>
   11ee0:	movw	r0, #43583	; 0xaa3f
   11ee4:	movt	r0, #1
   11ee8:	b	11914 <__assert_fail@plt+0x5e0>
   11eec:	movw	r4, #49528	; 0xc178
   11ef0:	movw	r1, #45112	; 0xb038
   11ef4:	movw	r3, #49640	; 0xc1e8
   11ef8:	mov	r2, #0
   11efc:	movt	r4, #2
   11f00:	movt	r1, #1
   11f04:	movt	r3, #2
   11f08:	ldr	r0, [r4]
   11f0c:	str	r1, [sp]
   11f10:	mov	r1, #0
   11f14:	bl	18b0c <__assert_fail@plt+0x77d8>
   11f18:	mov	r8, #1
   11f1c:	cmp	r0, #0
   11f20:	beq	1191c <__assert_fail@plt+0x5e8>
   11f24:	b	13334 <__assert_fail@plt+0x2000>
   11f28:	movw	r0, #49648	; 0xc1f0
   11f2c:	movw	r4, #49528	; 0xc178
   11f30:	mov	r8, #1
   11f34:	movw	r1, #45112	; 0xb038
   11f38:	movw	r3, #49656	; 0xc1f8
   11f3c:	mov	r2, #0
   11f40:	movt	r0, #2
   11f44:	movt	r4, #2
   11f48:	movt	r1, #1
   11f4c:	movt	r3, #2
   11f50:	strb	r8, [r0]
   11f54:	ldr	r0, [r4]
   11f58:	str	r1, [sp]
   11f5c:	mov	r1, #0
   11f60:	bl	18b0c <__assert_fail@plt+0x77d8>
   11f64:	cmp	r0, #0
   11f68:	beq	1191c <__assert_fail@plt+0x5e8>
   11f6c:	b	13350 <__assert_fail@plt+0x201c>
   11f70:	movw	r0, #49669	; 0xc205
   11f74:	movt	r0, #2
   11f78:	b	11fe0 <__assert_fail@plt+0xcac>
   11f7c:	movw	r0, #49528	; 0xc178
   11f80:	movw	r4, #45352	; 0xb128
   11f84:	mov	r3, #4
   11f88:	mov	r2, #1
   11f8c:	movt	r0, #2
   11f90:	str	r3, [sp]
   11f94:	movt	r4, #1
   11f98:	ldr	r1, [r0]
   11f9c:	movw	r0, #49420	; 0xc10c
   11fa0:	mov	r3, r4
   11fa4:	movt	r0, #2
   11fa8:	ldr	r0, [r0]
   11fac:	stmib	sp, {r0, r2}
   11fb0:	movw	r0, #43574	; 0xaa36
   11fb4:	movw	r2, #45360	; 0xb130
   11fb8:	movt	r0, #1
   11fbc:	movt	r2, #1
   11fc0:	bl	154f0 <__assert_fail@plt+0x41bc>
   11fc4:	ldr	r0, [r4, r0, lsl #2]
   11fc8:	cmp	r0, #0
   11fcc:	beq	12088 <__assert_fail@plt+0xd54>
   11fd0:	cmp	r0, #1
   11fd4:	bne	1191c <__assert_fail@plt+0x5e8>
   11fd8:	movw	r0, #49670	; 0xc206
   11fdc:	movt	r0, #2
   11fe0:	mov	r1, #1
   11fe4:	strb	r1, [r0]
   11fe8:	b	1191c <__assert_fail@plt+0x5e8>
   11fec:	movw	r0, #49668	; 0xc204
   11ff0:	mov	r8, #1
   11ff4:	movt	r0, #2
   11ff8:	strb	r8, [r0]
   11ffc:	b	1191c <__assert_fail@plt+0x5e8>
   12000:	movw	r4, #49528	; 0xc178
   12004:	mov	r8, #1
   12008:	movt	r4, #2
   1200c:	ldr	r0, [r4]
   12010:	cmp	r0, #0
   12014:	beq	12074 <__assert_fail@plt+0xd40>
   12018:	movw	r1, #44295	; 0xad07
   1201c:	sub	r3, fp, #136	; 0x88
   12020:	mov	r2, #10
   12024:	movt	r1, #1
   12028:	str	r1, [sp]
   1202c:	mov	r1, #0
   12030:	bl	18b0c <__assert_fail@plt+0x77d8>
   12034:	cmp	r0, #0
   12038:	bne	1336c <__assert_fail@plt+0x2038>
   1203c:	ldr	r0, [fp, #-132]	; 0xffffff7c
   12040:	cmp	r0, #0
   12044:	bne	13388 <__assert_fail@plt+0x2054>
   12048:	ldr	r0, [fp, #-136]	; 0xffffff78
   1204c:	b	12078 <__assert_fail@plt+0xd44>
   12050:	mov	r0, #3
   12054:	movw	r1, #49636	; 0xc1e4
   12058:	mov	r8, #1
   1205c:	movt	r1, #2
   12060:	strb	r8, [r1]
   12064:	movw	r1, #49664	; 0xc200
   12068:	movt	r1, #2
   1206c:	str	r0, [r1]
   12070:	b	1191c <__assert_fail@plt+0x5e8>
   12074:	mov	r0, #32
   12078:	str	r0, [sp, #24]
   1207c:	mov	r0, #1
   12080:	str	r0, [sp, #32]
   12084:	b	1191c <__assert_fail@plt+0x5e8>
   12088:	movw	r0, #49670	; 0xc206
   1208c:	mov	r1, #0
   12090:	movt	r0, #2
   12094:	strb	r1, [r0]
   12098:	b	1191c <__assert_fail@plt+0x5e8>
   1209c:	movw	r1, #49628	; 0xc1dc
   120a0:	mov	r0, #16
   120a4:	movt	r1, #2
   120a8:	str	r0, [r1]
   120ac:	movw	r0, #49624	; 0xc1d8
   120b0:	movw	r1, #13512	; 0x34c8
   120b4:	movt	r0, #2
   120b8:	movt	r1, #1
   120bc:	str	r1, [r0]
   120c0:	mov	r0, #6
   120c4:	b	12114 <__assert_fail@plt+0xde0>
   120c8:	movw	r1, #49632	; 0xc1e0
   120cc:	mov	r0, #0
   120d0:	movt	r1, #2
   120d4:	str	r0, [r1]
   120d8:	movw	r0, #13852	; 0x361c
   120dc:	movw	r1, #49624	; 0xc1d8
   120e0:	movt	r0, #1
   120e4:	movt	r1, #2
   120e8:	b	1211c <__assert_fail@plt+0xde8>
   120ec:	mov	r0, #8
   120f0:	movw	r1, #49628	; 0xc1dc
   120f4:	movt	r1, #2
   120f8:	str	r0, [r1]
   120fc:	movw	r0, #49624	; 0xc1d8
   12100:	movw	r1, #13512	; 0x34c8
   12104:	movt	r0, #2
   12108:	movt	r1, #1
   1210c:	str	r1, [r0]
   12110:	mov	r0, #7
   12114:	movw	r1, #49632	; 0xc1e0
   12118:	movt	r1, #2
   1211c:	str	r0, [r1]
   12120:	mov	r8, #1
   12124:	b	1191c <__assert_fail@plt+0x5e8>
   12128:	mov	r0, #1
   1212c:	tst	r9, #1
   12130:	beq	13190 <__assert_fail@plt+0x1e5c>
   12134:	movw	r0, #49636	; 0xc1e4
   12138:	movt	r0, #2
   1213c:	ldrb	r0, [r0]
   12140:	cmp	r0, #1
   12144:	bne	1215c <__assert_fail@plt+0xe28>
   12148:	movw	r0, #49612	; 0xc1cc
   1214c:	movt	r0, #2
   12150:	ldr	r0, [r0]
   12154:	cmp	r0, #0
   12158:	bne	133dc <__assert_fail@plt+0x20a8>
   1215c:	movw	sl, #49504	; 0xc160
   12160:	movw	r7, #49671	; 0xc207
   12164:	tst	r8, #1
   12168:	movt	sl, #2
   1216c:	movt	r7, #2
   12170:	ldr	r0, [sl]
   12174:	sub	r6, r6, r0
   12178:	beq	12190 <__assert_fail@plt+0xe5c>
   1217c:	movw	r1, #49669	; 0xc205
   12180:	movt	r1, #2
   12184:	ldrb	r1, [r1]
   12188:	cmp	r1, #1
   1218c:	bne	12438 <__assert_fail@plt+0x1104>
   12190:	cmp	r6, #3
   12194:	beq	1220c <__assert_fail@plt+0xed8>
   12198:	cmp	r6, #2
   1219c:	beq	121d8 <__assert_fail@plt+0xea4>
   121a0:	cmp	r6, #1
   121a4:	bne	1241c <__assert_fail@plt+0x10e8>
   121a8:	ldr	r4, [r5, r0, lsl #2]
   121ac:	movw	r1, #49669	; 0xc205
   121b0:	movt	r1, #2
   121b4:	ldrb	r1, [r1]
   121b8:	ldrb	r0, [r4]
   121bc:	cmp	r1, #0
   121c0:	beq	122c0 <__assert_fail@plt+0xf8c>
   121c4:	cmp	r0, #0
   121c8:	beq	123d0 <__assert_fail@plt+0x109c>
   121cc:	cmp	r0, #43	; 0x2b
   121d0:	addeq	r4, r4, #1
   121d4:	b	122cc <__assert_fail@plt+0xf98>
   121d8:	add	r0, r5, r0, lsl #2
   121dc:	movw	r8, #49669	; 0xc205
   121e0:	movt	r8, #2
   121e4:	ldr	r4, [r0, #4]
   121e8:	ldrb	r1, [r8]
   121ec:	ldrb	r0, [r4]
   121f0:	cmp	r1, #0
   121f4:	beq	12278 <__assert_fail@plt+0xf44>
   121f8:	cmp	r0, #0
   121fc:	beq	1241c <__assert_fail@plt+0x10e8>
   12200:	cmp	r0, #43	; 0x2b
   12204:	addeq	r4, r4, #1
   12208:	b	12284 <__assert_fail@plt+0xf50>
   1220c:	movw	r1, #49669	; 0xc205
   12210:	movt	r1, #2
   12214:	ldrb	r1, [r1]
   12218:	cmp	r1, #1
   1221c:	bne	1241c <__assert_fail@plt+0x10e8>
   12220:	add	r0, r5, r0, lsl #2
   12224:	ldr	r4, [r0, #4]
   12228:	ldrb	r0, [r4]
   1222c:	cmp	r0, #0
   12230:	beq	1241c <__assert_fail@plt+0x10e8>
   12234:	cmp	r0, #43	; 0x2b
   12238:	mov	r1, #46	; 0x2e
   1223c:	addeq	r4, r4, #1
   12240:	mov	r0, r4
   12244:	bl	11208 <strchr@plt>
   12248:	mov	r2, #10
   1224c:	cmp	r0, #0
   12250:	bne	123f8 <__assert_fail@plt+0x10c4>
   12254:	ldrb	r0, [r4]
   12258:	cmp	r0, #48	; 0x30
   1225c:	bne	123f4 <__assert_fail@plt+0x10c0>
   12260:	ldrb	r0, [r4, #1]
   12264:	mov	r2, #16
   12268:	orr	r0, r0, #32
   1226c:	cmp	r0, #120	; 0x78
   12270:	movne	r2, #8
   12274:	b	123f8 <__assert_fail@plt+0x10c4>
   12278:	cmp	r0, #43	; 0x2b
   1227c:	bne	12308 <__assert_fail@plt+0xfd4>
   12280:	add	r4, r4, #1
   12284:	mov	r0, r4
   12288:	mov	r1, #46	; 0x2e
   1228c:	bl	11208 <strchr@plt>
   12290:	mov	r2, #10
   12294:	cmp	r0, #0
   12298:	bne	1231c <__assert_fail@plt+0xfe8>
   1229c:	ldrb	r0, [r4]
   122a0:	cmp	r0, #48	; 0x30
   122a4:	bne	12318 <__assert_fail@plt+0xfe4>
   122a8:	ldrb	r0, [r4, #1]
   122ac:	mov	r2, #16
   122b0:	orr	r0, r0, #32
   122b4:	cmp	r0, #120	; 0x78
   122b8:	movne	r2, #8
   122bc:	b	1231c <__assert_fail@plt+0xfe8>
   122c0:	cmp	r0, #43	; 0x2b
   122c4:	bne	123d0 <__assert_fail@plt+0x109c>
   122c8:	add	r4, r4, #1
   122cc:	mov	r0, r4
   122d0:	mov	r1, #46	; 0x2e
   122d4:	bl	11208 <strchr@plt>
   122d8:	mov	r2, #10
   122dc:	cmp	r0, #0
   122e0:	bne	123a8 <__assert_fail@plt+0x1074>
   122e4:	ldrb	r0, [r4]
   122e8:	cmp	r0, #48	; 0x30
   122ec:	bne	123a4 <__assert_fail@plt+0x1070>
   122f0:	ldrb	r0, [r4, #1]
   122f4:	mov	r2, #16
   122f8:	orr	r0, r0, #32
   122fc:	cmp	r0, #120	; 0x78
   12300:	movne	r2, #8
   12304:	b	123a8 <__assert_fail@plt+0x1074>
   12308:	sub	r1, r0, #48	; 0x30
   1230c:	cmp	r1, #9
   12310:	bls	121f8 <__assert_fail@plt+0xec4>
   12314:	b	1241c <__assert_fail@plt+0x10e8>
   12318:	mov	r2, #8
   1231c:	movw	r9, #44927	; 0xaf7f
   12320:	sub	r3, fp, #136	; 0x88
   12324:	mov	r0, r4
   12328:	mov	r1, #0
   1232c:	movt	r9, #1
   12330:	str	r9, [sp]
   12334:	bl	18b0c <__assert_fail@plt+0x77d8>
   12338:	cmp	r0, #0
   1233c:	bne	1241c <__assert_fail@plt+0x10e8>
   12340:	ldrb	r0, [r8]
   12344:	cmp	r0, #1
   12348:	bne	131bc <__assert_fail@plt+0x1e88>
   1234c:	ldr	r0, [sl]
   12350:	ldr	r4, [r5, r0, lsl #2]
   12354:	ldrb	r0, [r4]
   12358:	cmp	r0, #0
   1235c:	beq	131bc <__assert_fail@plt+0x1e88>
   12360:	cmp	r0, #43	; 0x2b
   12364:	mov	r1, #46	; 0x2e
   12368:	addeq	r4, r4, #1
   1236c:	mov	r0, r4
   12370:	bl	11208 <strchr@plt>
   12374:	mov	r2, #10
   12378:	cmp	r0, #0
   1237c:	bne	1319c <__assert_fail@plt+0x1e68>
   12380:	ldrb	r0, [r4]
   12384:	cmp	r0, #48	; 0x30
   12388:	bne	13198 <__assert_fail@plt+0x1e64>
   1238c:	ldrb	r0, [r4, #1]
   12390:	mov	r2, #16
   12394:	orr	r0, r0, #32
   12398:	cmp	r0, #120	; 0x78
   1239c:	movne	r2, #8
   123a0:	b	1319c <__assert_fail@plt+0x1e68>
   123a4:	mov	r2, #8
   123a8:	movw	r0, #44927	; 0xaf7f
   123ac:	add	r3, sp, #40	; 0x28
   123b0:	mov	r1, #0
   123b4:	mov	r6, #0
   123b8:	movt	r0, #1
   123bc:	str	r0, [sp]
   123c0:	mov	r0, r4
   123c4:	bl	18b0c <__assert_fail@plt+0x77d8>
   123c8:	cmp	r0, #0
   123cc:	beq	123d8 <__assert_fail@plt+0x10a4>
   123d0:	mov	r6, #1
   123d4:	b	12438 <__assert_fail@plt+0x1104>
   123d8:	ldr	r0, [sp, #40]	; 0x28
   123dc:	ldr	r1, [sp, #44]	; 0x2c
   123e0:	movw	r2, #49640	; 0xc1e8
   123e4:	add	r4, r5, #4
   123e8:	movt	r2, #2
   123ec:	strd	r0, [r2]
   123f0:	b	1243c <__assert_fail@plt+0x1108>
   123f4:	mov	r2, #8
   123f8:	movw	r8, #44927	; 0xaf7f
   123fc:	add	r3, sp, #40	; 0x28
   12400:	mov	r0, r4
   12404:	mov	r1, #0
   12408:	movt	r8, #1
   1240c:	str	r8, [sp]
   12410:	bl	18b0c <__assert_fail@plt+0x77d8>
   12414:	cmp	r0, #0
   12418:	beq	12f84 <__assert_fail@plt+0x1c50>
   1241c:	movw	r0, #49669	; 0xc205
   12420:	movt	r0, #2
   12424:	ldrb	r0, [r0]
   12428:	cmp	r0, #1
   1242c:	bne	12438 <__assert_fail@plt+0x1104>
   12430:	cmp	r6, #2
   12434:	bge	133e8 <__assert_fail@plt+0x20b4>
   12438:	mov	r4, r5
   1243c:	ldrb	r0, [r7]
   12440:	cmp	r0, #1
   12444:	bne	124a4 <__assert_fail@plt+0x1170>
   12448:	movw	r0, #49624	; 0xc1d8
   1244c:	movw	r1, #13852	; 0x361c
   12450:	movt	r0, #2
   12454:	movt	r1, #1
   12458:	ldr	r0, [r0]
   1245c:	cmp	r0, r1
   12460:	beq	12470 <__assert_fail@plt+0x113c>
   12464:	movw	r0, #15916	; 0x3e2c
   12468:	movt	r0, #1
   1246c:	b	12498 <__assert_fail@plt+0x1164>
   12470:	movw	r1, #49632	; 0xc1e0
   12474:	mov	r0, #7
   12478:	movt	r1, #2
   1247c:	str	r0, [r1]
   12480:	movw	r1, #49628	; 0xc1dc
   12484:	mov	r0, #8
   12488:	movt	r1, #2
   1248c:	str	r0, [r1]
   12490:	movw	r0, #15768	; 0x3d98
   12494:	movt	r0, #1
   12498:	movw	r1, #49624	; 0xc1d8
   1249c:	movt	r1, #2
   124a0:	str	r0, [r1]
   124a4:	movw	r0, #49648	; 0xc1f0
   124a8:	movt	r0, #2
   124ac:	ldrb	r0, [r0]
   124b0:	cmp	r0, #1
   124b4:	bne	124f4 <__assert_fail@plt+0x11c0>
   124b8:	movw	r0, #49640	; 0xc1e8
   124bc:	movw	r2, #49656	; 0xc1f8
   124c0:	movw	r5, #49672	; 0xc208
   124c4:	movt	r0, #2
   124c8:	movt	r2, #2
   124cc:	movt	r5, #2
   124d0:	ldrd	r0, [r0]
   124d4:	ldrd	r2, [r2]
   124d8:	adds	r0, r2, r0
   124dc:	adcs	r1, r3, r1
   124e0:	strd	r0, [r5]
   124e4:	mov	r0, #0
   124e8:	adc	r0, r0, #0
   124ec:	cmp	r0, #1
   124f0:	beq	13458 <__assert_fail@plt+0x2124>
   124f4:	movw	r0, #49612	; 0xc1cc
   124f8:	movt	r0, #2
   124fc:	ldr	r0, [r0]
   12500:	cmp	r0, #0
   12504:	bne	12514 <__assert_fail@plt+0x11e0>
   12508:	movw	r0, #43791	; 0xab0f
   1250c:	movt	r0, #1
   12510:	bl	13620 <__assert_fail@plt+0x22ec>
   12514:	ldr	r0, [sl]
   12518:	movw	r1, #45372	; 0xb13c
   1251c:	cmp	r6, #0
   12520:	movt	r1, #1
   12524:	addgt	r1, r4, r0, lsl #2
   12528:	movw	r0, #49680	; 0xc210
   1252c:	movt	r0, #2
   12530:	str	r1, [r0]
   12534:	bl	14148 <__assert_fail@plt+0x2e14>
   12538:	movw	r9, #49684	; 0xc214
   1253c:	mov	r8, r0
   12540:	movt	r9, #2
   12544:	ldr	r0, [r9]
   12548:	cmp	r0, #0
   1254c:	beq	13160 <__assert_fail@plt+0x1e2c>
   12550:	movw	sl, #49640	; 0xc1e8
   12554:	movt	sl, #2
   12558:	ldrd	r4, [sl]
   1255c:	orrs	r1, r4, r5
   12560:	beq	12728 <__assert_fail@plt+0x13f4>
   12564:	sub	r1, fp, #136	; 0x88
   12568:	str	r8, [sp, #20]
   1256c:	add	r6, sp, #40	; 0x28
   12570:	mov	r8, #0
   12574:	mov	sl, #1
   12578:	add	r1, r1, #48	; 0x30
   1257c:	str	r1, [sp, #28]
   12580:	b	125e0 <__assert_fail@plt+0x12ac>
   12584:	bl	11214 <__errno_location@plt>
   12588:	ldr	r7, [r0]
   1258c:	movw	r0, #49704	; 0xc228
   12590:	mov	r1, #3
   12594:	mov	sl, #0
   12598:	movt	r0, #2
   1259c:	ldr	r2, [r0]
   125a0:	mov	r0, #0
   125a4:	bl	177d0 <__assert_fail@plt+0x649c>
   125a8:	movw	r2, #46034	; 0xb3d2
   125ac:	mov	r3, r0
   125b0:	mov	r0, #0
   125b4:	mov	r1, r7
   125b8:	movt	r2, #1
   125bc:	bl	11178 <error@plt>
   125c0:	mov	r0, r8
   125c4:	bl	14d00 <__assert_fail@plt+0x39cc>
   125c8:	and	r7, sl, r0
   125cc:	bl	14148 <__assert_fail@plt+0x2e14>
   125d0:	and	sl, r7, r0
   125d4:	ldr	r0, [r9]
   125d8:	cmp	r0, #0
   125dc:	beq	12714 <__assert_fail@plt+0x13e0>
   125e0:	bl	11274 <fileno@plt>
   125e4:	mov	r1, r0
   125e8:	mov	r0, #3
   125ec:	sub	r2, fp, #136	; 0x88
   125f0:	bl	11130 <__fxstat64@plt>
   125f4:	cmp	r0, #0
   125f8:	bne	12584 <__assert_fail@plt+0x1250>
   125fc:	ldr	r0, [fp, #-120]	; 0xffffff88
   12600:	and	r0, r0, #53248	; 0xd000
   12604:	orr	r0, r0, #8192	; 0x2000
   12608:	cmp	r0, #40960	; 0xa000
   1260c:	bne	12670 <__assert_fail@plt+0x133c>
   12610:	ldr	r2, [fp, #-80]	; 0xffffffb0
   12614:	mov	r3, #0
   12618:	subs	r0, r2, #536870913	; 0x20000001
   1261c:	rscs	r0, r3, r2, asr #31
   12620:	mov	r0, #0
   12624:	movwcc	r0, #1
   12628:	rsbs	r1, r2, #0
   1262c:	sbcs	r1, r3, r2, asr #31
   12630:	mov	r1, #0
   12634:	movwlt	r1, #1
   12638:	ands	r3, r1, r0
   1263c:	ldr	r0, [sp, #28]
   12640:	asrne	r3, r2, #31
   12644:	moveq	r2, #512	; 0x200
   12648:	ldrd	r0, [r0]
   1264c:	subs	r2, r2, r0
   12650:	sbcs	r2, r3, r1
   12654:	bge	12690 <__assert_fail@plt+0x135c>
   12658:	subs	r2, r0, r4
   1265c:	sbcs	r2, r1, r5
   12660:	bcs	12738 <__assert_fail@plt+0x1404>
   12664:	subs	r4, r4, r0
   12668:	sbc	r5, r5, r1
   1266c:	b	12708 <__assert_fail@plt+0x13d4>
   12670:	ldr	r0, [r9]
   12674:	mov	r1, #1
   12678:	mov	r2, r4
   1267c:	mov	r3, r5
   12680:	str	r1, [sp]
   12684:	bl	15ae0 <__assert_fail@plt+0x47ac>
   12688:	cmp	r0, #0
   1268c:	beq	1275c <__assert_fail@plt+0x1428>
   12690:	orrs	r0, r4, r5
   12694:	beq	12700 <__assert_fail@plt+0x13cc>
   12698:	mov	r7, #8192	; 0x2000
   1269c:	b	126a8 <__assert_fail@plt+0x1374>
   126a0:	orrs	r0, r4, r5
   126a4:	beq	12700 <__assert_fail@plt+0x13cc>
   126a8:	subs	r0, r4, r7
   126ac:	ldr	r3, [r9]
   126b0:	mov	r1, #1
   126b4:	sbcs	r0, r5, #0
   126b8:	mov	r0, r6
   126bc:	movcc	r7, r4
   126c0:	mov	r2, r7
   126c4:	bl	11304 <fread_unlocked@plt>
   126c8:	subs	r4, r4, r0
   126cc:	sbc	r5, r5, #0
   126d0:	cmp	r0, r7
   126d4:	beq	126a0 <__assert_fail@plt+0x136c>
   126d8:	ldr	r0, [r9]
   126dc:	ldr	r0, [r0]
   126e0:	tst	r0, #32
   126e4:	bne	126f4 <__assert_fail@plt+0x13c0>
   126e8:	tst	r0, #16
   126ec:	beq	126a0 <__assert_fail@plt+0x136c>
   126f0:	b	12708 <__assert_fail@plt+0x13d4>
   126f4:	bl	11214 <__errno_location@plt>
   126f8:	ldr	r8, [r0]
   126fc:	mov	sl, #0
   12700:	mov	r4, #0
   12704:	mov	r5, #0
   12708:	orrs	r0, r4, r5
   1270c:	bne	125c0 <__assert_fail@plt+0x128c>
   12710:	b	1275c <__assert_fail@plt+0x1428>
   12714:	orrs	r0, r4, r5
   12718:	bne	134a4 <__assert_fail@plt+0x2170>
   1271c:	ldr	r8, [sp, #20]
   12720:	and	r8, r8, sl
   12724:	b	13160 <__assert_fail@plt+0x1e2c>
   12728:	ldr	ip, [sp, #32]
   1272c:	mov	r0, #0
   12730:	mov	r1, #0
   12734:	b	12788 <__assert_fail@plt+0x1454>
   12738:	ldr	r0, [r9]
   1273c:	mov	r1, #1
   12740:	mov	r2, r4
   12744:	mov	r3, r5
   12748:	str	r1, [sp]
   1274c:	bl	15ae0 <__assert_fail@plt+0x47ac>
   12750:	clz	r0, r0
   12754:	lsr	r0, r0, #5
   12758:	and	sl, sl, r0
   1275c:	ldr	r8, [sp, #20]
   12760:	ldr	r0, [r9]
   12764:	and	r8, r8, sl
   12768:	cmp	r0, #0
   1276c:	beq	13160 <__assert_fail@plt+0x1e2c>
   12770:	movw	sl, #49640	; 0xc1e8
   12774:	ldr	ip, [sp, #32]
   12778:	movw	r7, #49671	; 0xc207
   1277c:	movt	sl, #2
   12780:	movt	r7, #2
   12784:	ldrd	r0, [sl]
   12788:	ldr	r2, [sp, #16]
   1278c:	movw	r3, #49688	; 0xc218
   12790:	movw	lr, #45380	; 0xb144
   12794:	movt	r3, #2
   12798:	movt	lr, #1
   1279c:	subs	r0, r2, r0
   127a0:	ldr	r2, [sp, #12]
   127a4:	sbc	r1, r2, r1
   127a8:	ldrb	r2, [r7]
   127ac:	cmp	r2, #0
   127b0:	moveq	r1, r2
   127b4:	moveq	r0, r2
   127b8:	strd	r0, [r3]
   127bc:	movw	r0, #49612	; 0xc1cc
   127c0:	movt	r0, #2
   127c4:	ldr	r0, [r0]
   127c8:	cmp	r0, #0
   127cc:	beq	128a0 <__assert_fail@plt+0x156c>
   127d0:	movw	r1, #49620	; 0xc1d4
   127d4:	mov	r5, #1
   127d8:	mov	r2, #0
   127dc:	movt	r1, #2
   127e0:	ldr	r1, [r1]
   127e4:	add	r3, r1, r2, lsl #5
   127e8:	mov	r4, r5
   127ec:	ldr	r3, [r3, #4]
   127f0:	ldr	r6, [lr, r3, lsl #2]
   127f4:	mov	r7, r6
   127f8:	mov	r3, r7
   127fc:	udiv	r7, r4, r7
   12800:	mls	r7, r7, r3, r4
   12804:	mov	r4, r3
   12808:	cmp	r7, #0
   1280c:	bne	127f8 <__assert_fail@plt+0x14c4>
   12810:	udiv	r3, r6, r3
   12814:	add	r2, r2, #1
   12818:	cmp	r2, r0
   1281c:	mul	r5, r3, r5
   12820:	bne	127e4 <__assert_fail@plt+0x14b0>
   12824:	tst	ip, #1
   12828:	beq	128ac <__assert_fail@plt+0x1578>
   1282c:	ldr	r4, [sp, #24]
   12830:	cmp	r4, #0
   12834:	beq	12848 <__assert_fail@plt+0x1514>
   12838:	udiv	r1, r4, r5
   1283c:	mls	r1, r1, r5, r4
   12840:	cmp	r1, #0
   12844:	beq	12f68 <__assert_fail@plt+0x1c34>
   12848:	movw	r1, #43794	; 0xab12
   1284c:	mov	r0, #0
   12850:	mov	r2, #5
   12854:	mov	r6, lr
   12858:	movt	r1, #1
   1285c:	bl	11100 <dcgettext@plt>
   12860:	mov	r2, r0
   12864:	mov	r0, #0
   12868:	mov	r1, #0
   1286c:	mov	r3, r4
   12870:	str	r5, [sp]
   12874:	bl	11178 <error@plt>
   12878:	movw	r0, #49696	; 0xc220
   1287c:	mov	lr, r6
   12880:	movt	r0, #2
   12884:	str	r5, [r0]
   12888:	movw	r0, #49612	; 0xc1cc
   1288c:	movt	r0, #2
   12890:	ldr	r0, [r0]
   12894:	cmp	r0, #0
   12898:	bne	128d4 <__assert_fail@plt+0x15a0>
   1289c:	b	1294c <__assert_fail@plt+0x1618>
   128a0:	mov	r5, #1
   128a4:	tst	ip, #1
   128a8:	bne	1282c <__assert_fail@plt+0x14f8>
   128ac:	cmp	r5, #15
   128b0:	bgt	128c0 <__assert_fail@plt+0x158c>
   128b4:	mov	r1, #16
   128b8:	sdiv	r1, r1, r5
   128bc:	mul	r5, r1, r5
   128c0:	movw	r1, #49696	; 0xc220
   128c4:	movt	r1, #2
   128c8:	str	r5, [r1]
   128cc:	cmp	r0, #0
   128d0:	beq	1294c <__assert_fail@plt+0x1618>
   128d4:	movw	r1, #49620	; 0xc1d4
   128d8:	mov	r3, #0
   128dc:	movt	r1, #2
   128e0:	ldr	r2, [r1]
   128e4:	mov	r1, #0
   128e8:	add	r7, r2, r3, lsl #5
   128ec:	add	r3, r3, #1
   128f0:	ldr	r6, [r7, #4]
   128f4:	ldr	r7, [r7, #24]
   128f8:	ldr	r6, [lr, r6, lsl #2]
   128fc:	add	r7, r7, #1
   12900:	udiv	r6, r5, r6
   12904:	mul	r7, r7, r6
   12908:	cmp	r1, r7
   1290c:	movcc	r1, r7
   12910:	cmp	r3, r0
   12914:	bcc	128e8 <__assert_fail@plt+0x15b4>
   12918:	movw	r2, #49620	; 0xc1d4
   1291c:	movt	r2, #2
   12920:	ldr	r2, [r2]
   12924:	add	r2, r2, #24
   12928:	ldr	r3, [r2, #-20]	; 0xffffffec
   1292c:	ldr	r7, [r2]
   12930:	subs	r0, r0, #1
   12934:	ldr	r3, [lr, r3, lsl #2]
   12938:	udiv	r3, r5, r3
   1293c:	mls	r3, r7, r3, r1
   12940:	str	r3, [r2, #4]
   12944:	add	r2, r2, #32
   12948:	bne	12928 <__assert_fail@plt+0x15f4>
   1294c:	movw	r0, #49636	; 0xc1e4
   12950:	str	r8, [sp, #20]
   12954:	movt	r0, #2
   12958:	ldrb	r0, [r0]
   1295c:	cmp	r0, #1
   12960:	bne	12d84 <__assert_fail@plt+0x1a50>
   12964:	movw	r6, #49664	; 0xc200
   12968:	movt	r6, #2
   1296c:	ldr	r0, [r6]
   12970:	cmp	r0, #100	; 0x64
   12974:	movls	r0, #100	; 0x64
   12978:	str	r0, [sp, #40]	; 0x28
   1297c:	bl	18280 <__assert_fail@plt+0x6f4c>
   12980:	ldr	r5, [sl, #4]
   12984:	ldr	sl, [sl]
   12988:	mov	r4, #1
   1298c:	str	r0, [sp, #32]
   12990:	movw	r7, #49672	; 0xc208
   12994:	movt	r7, #2
   12998:	movw	r0, #49648	; 0xc1f0
   1299c:	movt	r0, #2
   129a0:	ldrb	r0, [r0]
   129a4:	cmp	r0, #0
   129a8:	beq	129d0 <__assert_fail@plt+0x169c>
   129ac:	ldr	r1, [r6]
   129b0:	ldrd	r2, [r7]
   129b4:	subs	r2, r2, r1
   129b8:	sbcs	r3, r3, #0
   129bc:	bcc	1327c <__assert_fail@plt+0x1f48>
   129c0:	subs	r2, sl, r2
   129c4:	sbcs	r2, r5, r3
   129c8:	bcc	129d4 <__assert_fail@plt+0x16a0>
   129cc:	b	1327c <__assert_fail@plt+0x1f48>
   129d0:	ldr	r1, [r6]
   129d4:	cmp	r1, #0
   129d8:	beq	12aa8 <__assert_fail@plt+0x1774>
   129dc:	mov	r8, r5
   129e0:	mov	r3, #0
   129e4:	ldr	r0, [r9]
   129e8:	mov	r7, r6
   129ec:	mov	r6, r4
   129f0:	cmp	r0, #0
   129f4:	beq	13144 <__assert_fail@plt+0x1e10>
   129f8:	mov	r4, #1
   129fc:	str	r3, [sp, #28]
   12a00:	bl	11250 <fgetc@plt>
   12a04:	cmn	r0, #1
   12a08:	bne	12a34 <__assert_fail@plt+0x1700>
   12a0c:	bl	11214 <__errno_location@plt>
   12a10:	ldr	r0, [r0]
   12a14:	bl	14d00 <__assert_fail@plt+0x39cc>
   12a18:	and	r4, r4, r0
   12a1c:	bl	14148 <__assert_fail@plt+0x2e14>
   12a20:	and	r4, r4, r0
   12a24:	ldr	r0, [r9]
   12a28:	cmp	r0, #0
   12a2c:	bne	12a00 <__assert_fail@plt+0x16cc>
   12a30:	b	13148 <__assert_fail@plt+0x1e14>
   12a34:	and	r6, r6, r4
   12a38:	adds	sl, sl, #1
   12a3c:	mov	r5, r0
   12a40:	adc	r8, r8, #0
   12a44:	mov	r4, r6
   12a48:	cmn	r0, #1
   12a4c:	ble	13150 <__assert_fail@plt+0x1e1c>
   12a50:	bl	111d8 <__ctype_b_loc@plt>
   12a54:	ldr	r0, [r0]
   12a58:	add	r0, r0, r5, lsl #1
   12a5c:	ldrb	r0, [r0, #1]
   12a60:	tst	r0, #64	; 0x40
   12a64:	beq	12bbc <__assert_fail@plt+0x1888>
   12a68:	ldr	r0, [sp, #32]
   12a6c:	ldr	r3, [sp, #28]
   12a70:	mov	r6, r7
   12a74:	strb	r5, [r0, r3]
   12a78:	add	r3, r3, #1
   12a7c:	ldr	r0, [r7]
   12a80:	cmp	r3, r0
   12a84:	bcc	129e4 <__assert_fail@plt+0x16b0>
   12a88:	movw	r0, #49648	; 0xc1f0
   12a8c:	mov	r5, r8
   12a90:	ldr	r8, [sp, #20]
   12a94:	movw	r7, #49672	; 0xc208
   12a98:	movt	r0, #2
   12a9c:	movt	r7, #2
   12aa0:	ldrb	r0, [r0]
   12aa4:	b	12aac <__assert_fail@plt+0x1778>
   12aa8:	mov	r3, #0
   12aac:	ldm	r7, {r2, r7}
   12ab0:	subs	r1, sl, r2
   12ab4:	sbcs	r1, r5, r7
   12ab8:	bcc	12ac4 <__assert_fail@plt+0x1790>
   12abc:	cmp	r0, #0
   12ac0:	bne	12bd8 <__assert_fail@plt+0x18a4>
   12ac4:	ldr	r0, [sp, #40]	; 0x28
   12ac8:	mov	r7, sl
   12acc:	mov	sl, r6
   12ad0:	str	r3, [sp, #28]
   12ad4:	cmp	r3, r0
   12ad8:	bne	12aec <__assert_fail@plt+0x17b8>
   12adc:	ldr	r0, [sp, #32]
   12ae0:	add	r1, sp, #40	; 0x28
   12ae4:	bl	183b4 <__assert_fail@plt+0x7080>
   12ae8:	str	r0, [sp, #32]
   12aec:	ldr	r0, [r9]
   12af0:	mov	r6, r4
   12af4:	mov	r4, #1
   12af8:	cmp	r0, #0
   12afc:	beq	13148 <__assert_fail@plt+0x1e14>
   12b00:	bl	11250 <fgetc@plt>
   12b04:	cmn	r0, #1
   12b08:	bne	12b34 <__assert_fail@plt+0x1800>
   12b0c:	bl	11214 <__errno_location@plt>
   12b10:	ldr	r0, [r0]
   12b14:	bl	14d00 <__assert_fail@plt+0x39cc>
   12b18:	and	r4, r4, r0
   12b1c:	bl	14148 <__assert_fail@plt+0x2e14>
   12b20:	and	r4, r4, r0
   12b24:	ldr	r0, [r9]
   12b28:	cmp	r0, #0
   12b2c:	bne	12b00 <__assert_fail@plt+0x17cc>
   12b30:	b	13148 <__assert_fail@plt+0x1e14>
   12b34:	and	r6, r6, r4
   12b38:	adds	r7, r7, #1
   12b3c:	mov	r8, r0
   12b40:	adc	r5, r5, #0
   12b44:	mov	r4, r6
   12b48:	cmn	r0, #1
   12b4c:	ble	13150 <__assert_fail@plt+0x1e1c>
   12b50:	cmp	r8, #0
   12b54:	mov	r6, sl
   12b58:	beq	12bcc <__assert_fail@plt+0x1898>
   12b5c:	bl	111d8 <__ctype_b_loc@plt>
   12b60:	ldr	r0, [r0]
   12b64:	mov	sl, r7
   12b68:	movw	r7, #49672	; 0xc208
   12b6c:	movt	r7, #2
   12b70:	add	r0, r0, r8, lsl #1
   12b74:	ldrb	r0, [r0, #1]
   12b78:	tst	r0, #64	; 0x40
   12b7c:	beq	12bb4 <__assert_fail@plt+0x1880>
   12b80:	ldr	r0, [sp, #32]
   12b84:	ldr	r3, [sp, #28]
   12b88:	strb	r8, [r0, r3]
   12b8c:	ldr	r8, [sp, #20]
   12b90:	add	r3, r3, #1
   12b94:	ldrd	r0, [r7]
   12b98:	subs	r0, sl, r0
   12b9c:	sbcs	r0, r5, r1
   12ba0:	bcc	12ac4 <__assert_fail@plt+0x1790>
   12ba4:	movw	r0, #49648	; 0xc1f0
   12ba8:	movt	r0, #2
   12bac:	ldrb	r0, [r0]
   12bb0:	b	12abc <__assert_fail@plt+0x1788>
   12bb4:	ldr	r8, [sp, #20]
   12bb8:	b	12998 <__assert_fail@plt+0x1664>
   12bbc:	mov	r5, r8
   12bc0:	ldr	r8, [sp, #20]
   12bc4:	mov	r6, r7
   12bc8:	b	12990 <__assert_fail@plt+0x165c>
   12bcc:	ldr	r8, [sp, #20]
   12bd0:	ldr	r3, [sp, #28]
   12bd4:	mov	sl, r7
   12bd8:	mov	r7, r4
   12bdc:	ldr	r4, [sp, #32]
   12be0:	movw	r2, #49624	; 0xc1d8
   12be4:	mov	r0, #0
   12be8:	movt	r2, #2
   12bec:	strb	r0, [r4, r3]
   12bf0:	mvn	r0, r3
   12bf4:	ldr	r3, [r2]
   12bf8:	adds	r0, sl, r0
   12bfc:	mov	r2, #32
   12c00:	sbc	r1, r5, #0
   12c04:	blx	r3
   12c08:	b	12c28 <__assert_fail@plt+0x18f4>
   12c0c:	movw	r0, #49524	; 0xc174
   12c10:	movt	r0, #2
   12c14:	ldr	r1, [r0]
   12c18:	movw	r0, #44893	; 0xaf5d
   12c1c:	movt	r0, #1
   12c20:	bl	1107c <fputs_unlocked@plt>
   12c24:	add	r4, r4, #1
   12c28:	ldrb	r1, [r4]
   12c2c:	cmp	r1, #13
   12c30:	bhi	12cd4 <__assert_fail@plt+0x19a0>
   12c34:	add	r0, pc, #0
   12c38:	ldr	pc, [r0, r1, lsl #2]
   12c3c:	andeq	r2, r1, r0, asr #26
   12c40:	ldrdeq	r2, [r1], -r4
   12c44:	ldrdeq	r2, [r1], -r4
   12c48:	ldrdeq	r2, [r1], -r4
   12c4c:	ldrdeq	r2, [r1], -r4
   12c50:	ldrdeq	r2, [r1], -r4
   12c54:	ldrdeq	r2, [r1], -r4
   12c58:	andeq	r2, r1, r4, ror ip
   12c5c:	andeq	r2, r1, ip, lsl #25
   12c60:	andeq	r2, r1, r4, lsr #25
   12c64:	andeq	r2, r1, r4, lsl #26
   12c68:	andeq	r2, r1, ip, lsl sp
   12c6c:	andeq	r2, r1, ip, lsl #24
   12c70:			; <UNDEFINED> instruction: 0x00012cbc
   12c74:	movw	r0, #49524	; 0xc174
   12c78:	movt	r0, #2
   12c7c:	ldr	r1, [r0]
   12c80:	movw	r0, #44887	; 0xaf57
   12c84:	movt	r0, #1
   12c88:	b	12c20 <__assert_fail@plt+0x18ec>
   12c8c:	movw	r0, #49524	; 0xc174
   12c90:	movt	r0, #2
   12c94:	ldr	r1, [r0]
   12c98:	movw	r0, #44890	; 0xaf5a
   12c9c:	movt	r0, #1
   12ca0:	b	12c20 <__assert_fail@plt+0x18ec>
   12ca4:	movw	r0, #49524	; 0xc174
   12ca8:	movt	r0, #2
   12cac:	ldr	r1, [r0]
   12cb0:	movw	r0, #44902	; 0xaf66
   12cb4:	movt	r0, #1
   12cb8:	b	12c20 <__assert_fail@plt+0x18ec>
   12cbc:	movw	r0, #49524	; 0xc174
   12cc0:	movt	r0, #2
   12cc4:	ldr	r1, [r0]
   12cc8:	movw	r0, #44899	; 0xaf63
   12ccc:	movt	r0, #1
   12cd0:	b	12c20 <__assert_fail@plt+0x18ec>
   12cd4:	movw	r0, #49524	; 0xc174
   12cd8:	movt	r0, #2
   12cdc:	ldr	r0, [r0]
   12ce0:	ldr	r2, [r0, #20]
   12ce4:	ldr	r3, [r0, #24]
   12ce8:	cmp	r2, r3
   12cec:	bcs	12d34 <__assert_fail@plt+0x1a00>
   12cf0:	add	r3, r2, #1
   12cf4:	add	r4, r4, #1
   12cf8:	str	r3, [r0, #20]
   12cfc:	strb	r1, [r2]
   12d00:	b	12c28 <__assert_fail@plt+0x18f4>
   12d04:	movw	r0, #49524	; 0xc174
   12d08:	movt	r0, #2
   12d0c:	ldr	r1, [r0]
   12d10:	movw	r0, #44896	; 0xaf60
   12d14:	movt	r0, #1
   12d18:	b	12c20 <__assert_fail@plt+0x18ec>
   12d1c:	movw	r0, #49524	; 0xc174
   12d20:	movt	r0, #2
   12d24:	ldr	r1, [r0]
   12d28:	movw	r0, #44905	; 0xaf69
   12d2c:	movt	r0, #1
   12d30:	b	12c20 <__assert_fail@plt+0x18ec>
   12d34:	bl	112a4 <__overflow@plt>
   12d38:	add	r4, r4, #1
   12d3c:	b	12c28 <__assert_fail@plt+0x18f4>
   12d40:	movw	r0, #49524	; 0xc174
   12d44:	movt	r0, #2
   12d48:	ldr	r0, [r0]
   12d4c:	ldr	r1, [r0, #20]
   12d50:	ldr	r2, [r0, #24]
   12d54:	cmp	r1, r2
   12d58:	bcs	12d74 <__assert_fail@plt+0x1a40>
   12d5c:	add	r2, r1, #1
   12d60:	mov	r4, r7
   12d64:	str	r2, [r0, #20]
   12d68:	mov	r0, #10
   12d6c:	strb	r0, [r1]
   12d70:	b	12990 <__assert_fail@plt+0x165c>
   12d74:	mov	r1, #10
   12d78:	bl	112a4 <__overflow@plt>
   12d7c:	mov	r4, r7
   12d80:	b	12990 <__assert_fail@plt+0x165c>
   12d84:	mov	r0, #2
   12d88:	mov	r1, r5
   12d8c:	bl	18350 <__assert_fail@plt+0x701c>
   12d90:	movw	r4, #49696	; 0xc220
   12d94:	mov	r7, r0
   12d98:	str	r0, [sp, #40]	; 0x28
   12d9c:	ldrd	r8, [sl]
   12da0:	movt	r4, #2
   12da4:	str	r7, [sp, #32]
   12da8:	ldr	r0, [r4]
   12dac:	add	r1, r7, r0
   12db0:	str	r1, [sp, #44]	; 0x2c
   12db4:	movw	r1, #49648	; 0xc1f0
   12db8:	movt	r1, #2
   12dbc:	ldrb	r1, [r1]
   12dc0:	cmp	r1, #0
   12dc4:	movw	r1, #49672	; 0xc208
   12dc8:	movt	r1, #2
   12dcc:	beq	12ec4 <__assert_fail@plt+0x1b90>
   12dd0:	ldm	r1, {r2, r5}
   12dd4:	mov	r6, #0
   12dd8:	mov	sl, #1
   12ddc:	subs	r3, r8, r2
   12de0:	sbcs	r3, r9, r5
   12de4:	bcs	12f60 <__assert_fail@plt+0x1c2c>
   12de8:	subs	r2, r2, r8
   12dec:	sbc	r1, r5, r9
   12df0:	subs	r3, r2, r0
   12df4:	sbcs	r1, r1, #0
   12df8:	mov	r1, r7
   12dfc:	movcc	r0, r2
   12e00:	sub	r2, fp, #136	; 0x88
   12e04:	bl	14e18 <__assert_fail@plt+0x3ae4>
   12e08:	mov	sl, r0
   12e0c:	mov	r0, r7
   12e10:	ldr	r7, [r4]
   12e14:	ldr	r5, [fp, #-136]	; 0xffffff78
   12e18:	mov	r4, #0
   12e1c:	cmp	r5, r7
   12e20:	bcc	12fec <__assert_fail@plt+0x1cb8>
   12e24:	mov	r4, #0
   12e28:	cmp	r5, r7
   12e2c:	bne	13490 <__assert_fail@plt+0x215c>
   12e30:	eor	r4, r4, #1
   12e34:	add	r2, sp, #40	; 0x28
   12e38:	str	r0, [sp]
   12e3c:	mov	r0, r8
   12e40:	uxtb	r1, r4
   12e44:	ldr	r6, [r2, r1, lsl #2]
   12e48:	mov	r1, r9
   12e4c:	mov	r2, r7
   12e50:	mov	r3, r6
   12e54:	bl	14f10 <__assert_fail@plt+0x3bdc>
   12e58:	movw	r0, #49672	; 0xc208
   12e5c:	adds	r8, r8, r7
   12e60:	movt	r0, #2
   12e64:	adc	r9, r9, #0
   12e68:	ldrd	r0, [r0]
   12e6c:	subs	r2, r8, r0
   12e70:	sbcs	r2, r9, r1
   12e74:	bcs	12fe0 <__assert_fail@plt+0x1cac>
   12e78:	subs	r2, r0, r8
   12e7c:	movw	r0, #49696	; 0xc220
   12e80:	movt	r0, #2
   12e84:	sbc	r1, r1, r9
   12e88:	mov	r5, r0
   12e8c:	ldr	r0, [r0]
   12e90:	subs	r3, r2, r0
   12e94:	sbcs	r1, r1, #0
   12e98:	mov	r1, r6
   12e9c:	movcc	r0, r2
   12ea0:	sub	r2, fp, #136	; 0x88
   12ea4:	bl	14e18 <__assert_fail@plt+0x3ae4>
   12ea8:	ldr	r7, [r5]
   12eac:	ldr	r5, [fp, #-136]	; 0xffffff78
   12eb0:	and	sl, sl, r0
   12eb4:	mov	r0, r6
   12eb8:	cmp	r5, r7
   12ebc:	bcs	12e28 <__assert_fail@plt+0x1af4>
   12ec0:	b	12fec <__assert_fail@plt+0x1cb8>
   12ec4:	sub	r2, fp, #136	; 0x88
   12ec8:	mov	r1, r7
   12ecc:	bl	14e18 <__assert_fail@plt+0x3ae4>
   12ed0:	ldr	r6, [r4]
   12ed4:	ldr	r5, [fp, #-136]	; 0xffffff78
   12ed8:	mov	sl, r0
   12edc:	mov	r4, #0
   12ee0:	cmp	r5, r6
   12ee4:	bcc	12ffc <__assert_fail@plt+0x1cc8>
   12ee8:	mov	r4, #0
   12eec:	mov	r0, r7
   12ef0:	cmp	r5, r6
   12ef4:	bne	133bc <__assert_fail@plt+0x2088>
   12ef8:	eor	r4, r4, #1
   12efc:	add	r2, sp, #40	; 0x28
   12f00:	str	r0, [sp]
   12f04:	mov	r0, r8
   12f08:	and	r1, r4, #1
   12f0c:	ldr	r7, [r2, r1, lsl #2]
   12f10:	mov	r1, r9
   12f14:	mov	r2, r6
   12f18:	mov	r3, r7
   12f1c:	bl	14f10 <__assert_fail@plt+0x3bdc>
   12f20:	movw	r0, #49696	; 0xc220
   12f24:	adds	r8, r8, r6
   12f28:	mov	r1, r7
   12f2c:	sub	r2, fp, #136	; 0x88
   12f30:	movt	r0, #2
   12f34:	adc	r9, r9, #0
   12f38:	mov	r5, r0
   12f3c:	ldr	r0, [r0]
   12f40:	bl	14e18 <__assert_fail@plt+0x3ae4>
   12f44:	ldr	r6, [r5]
   12f48:	ldr	r5, [fp, #-136]	; 0xffffff78
   12f4c:	and	sl, sl, r0
   12f50:	mov	r0, r7
   12f54:	cmp	r5, r6
   12f58:	bcs	12ef0 <__assert_fail@plt+0x1bbc>
   12f5c:	b	12ffc <__assert_fail@plt+0x1cc8>
   12f60:	mov	r4, #0
   12f64:	b	12fe4 <__assert_fail@plt+0x1cb0>
   12f68:	movw	r1, #49696	; 0xc220
   12f6c:	mov	r5, r4
   12f70:	movt	r1, #2
   12f74:	str	r4, [r1]
   12f78:	cmp	r0, #0
   12f7c:	bne	128d4 <__assert_fail@plt+0x15a0>
   12f80:	b	1294c <__assert_fail@plt+0x1618>
   12f84:	ldr	r0, [sl]
   12f88:	add	r0, r5, r0, lsl #2
   12f8c:	ldr	r4, [r0, #8]
   12f90:	ldrb	r0, [r4]
   12f94:	cmp	r0, #0
   12f98:	beq	1241c <__assert_fail@plt+0x10e8>
   12f9c:	cmp	r0, #43	; 0x2b
   12fa0:	mov	r1, #46	; 0x2e
   12fa4:	addeq	r4, r4, #1
   12fa8:	mov	r0, r4
   12fac:	bl	11208 <strchr@plt>
   12fb0:	mov	r2, #10
   12fb4:	cmp	r0, #0
   12fb8:	bne	13220 <__assert_fail@plt+0x1eec>
   12fbc:	ldrb	r0, [r4]
   12fc0:	cmp	r0, #48	; 0x30
   12fc4:	bne	1321c <__assert_fail@plt+0x1ee8>
   12fc8:	ldrb	r0, [r4, #1]
   12fcc:	mov	r2, #16
   12fd0:	orr	r0, r0, #32
   12fd4:	cmp	r0, #120	; 0x78
   12fd8:	movne	r2, #8
   12fdc:	b	13220 <__assert_fail@plt+0x1eec>
   12fe0:	mov	r6, #0
   12fe4:	mov	r5, #0
   12fe8:	str	r6, [fp, #-136]	; 0xffffff78
   12fec:	uxtb	r4, r4
   12ff0:	and	sl, sl, #1
   12ff4:	cmp	r4, #0
   12ff8:	movwne	r4, #1
   12ffc:	cmp	r5, #0
   13000:	beq	130d0 <__assert_fail@plt+0x1d9c>
   13004:	movw	r0, #49612	; 0xc1cc
   13008:	mov	r2, #1
   1300c:	movt	r0, #2
   13010:	ldr	ip, [r0]
   13014:	cmp	ip, #0
   13018:	beq	13078 <__assert_fail@plt+0x1d44>
   1301c:	movw	r0, #49620	; 0xc1d4
   13020:	mov	r2, #1
   13024:	mov	r3, #0
   13028:	movt	r0, #2
   1302c:	ldr	lr, [r0]
   13030:	add	r0, lr, r3, lsl #5
   13034:	movw	r1, #45380	; 0xb144
   13038:	movt	r1, #1
   1303c:	ldr	r0, [r0, #4]
   13040:	ldr	r0, [r1, r0, lsl #2]
   13044:	mov	r1, r2
   13048:	mov	r6, r0
   1304c:	mov	r7, r6
   13050:	udiv	r6, r1, r6
   13054:	mls	r6, r6, r7, r1
   13058:	mov	r1, r7
   1305c:	cmp	r6, #0
   13060:	bne	1304c <__assert_fail@plt+0x1d18>
   13064:	udiv	r0, r0, r7
   13068:	add	r3, r3, #1
   1306c:	cmp	r3, ip
   13070:	mul	r2, r0, r2
   13074:	bne	13030 <__assert_fail@plt+0x1cfc>
   13078:	add	r0, r5, r2
   1307c:	add	r6, sp, #40	; 0x28
   13080:	sub	r0, r0, #1
   13084:	udiv	r1, r0, r2
   13088:	mls	r1, r1, r2, r0
   1308c:	add	r1, r1, r5
   13090:	sub	r2, r0, r1
   13094:	and	r0, r4, #1
   13098:	mov	r1, #0
   1309c:	ldr	r7, [r6, r0, lsl #2]
   130a0:	add	r0, r7, r5
   130a4:	bl	11244 <memset@plt>
   130a8:	mov	r0, #1
   130ac:	mov	r1, r9
   130b0:	mov	r2, r5
   130b4:	str	r7, [sp]
   130b8:	bic	r0, r0, r4
   130bc:	ldr	r3, [r6, r0, lsl #2]
   130c0:	mov	r0, r8
   130c4:	bl	14f10 <__assert_fail@plt+0x3bdc>
   130c8:	adds	r8, r8, r5
   130cc:	adc	r9, r9, #0
   130d0:	movw	r0, #49624	; 0xc1d8
   130d4:	mov	r1, r9
   130d8:	mov	r2, #10
   130dc:	movt	r0, #2
   130e0:	ldr	r3, [r0]
   130e4:	mov	r0, r8
   130e8:	blx	r3
   130ec:	movw	r0, #49672	; 0xc208
   130f0:	ldr	r5, [sp, #32]
   130f4:	mov	r4, sl
   130f8:	movt	r0, #2
   130fc:	ldrd	r0, [r0]
   13100:	subs	r0, r8, r0
   13104:	sbcs	r0, r9, r1
   13108:	bcc	13134 <__assert_fail@plt+0x1e00>
   1310c:	movw	r0, #49648	; 0xc1f0
   13110:	ldr	r8, [sp, #20]
   13114:	movt	r0, #2
   13118:	ldrb	r0, [r0]
   1311c:	cmp	r0, #0
   13120:	beq	13138 <__assert_fail@plt+0x1e04>
   13124:	mov	r0, #0
   13128:	bl	14d00 <__assert_fail@plt+0x39cc>
   1312c:	and	r4, r4, r0
   13130:	b	13138 <__assert_fail@plt+0x1e04>
   13134:	ldr	r8, [sp, #20]
   13138:	mov	r0, r5
   1313c:	bl	15ab8 <__assert_fail@plt+0x4784>
   13140:	b	1315c <__assert_fail@plt+0x1e28>
   13144:	mov	r4, #1
   13148:	and	r6, r6, r4
   1314c:	mov	r4, r6
   13150:	ldr	r0, [sp, #32]
   13154:	bl	15ab8 <__assert_fail@plt+0x4784>
   13158:	ldr	r8, [sp, #20]
   1315c:	and	r8, r8, r4
   13160:	movw	r0, #49700	; 0xc224
   13164:	movt	r0, #2
   13168:	ldrb	r0, [r0]
   1316c:	cmp	r0, #1
   13170:	bne	1318c <__assert_fail@plt+0x1e58>
   13174:	movw	r0, #49520	; 0xc170
   13178:	movt	r0, #2
   1317c:	ldr	r0, [r0]
   13180:	bl	159c0 <__assert_fail@plt+0x468c>
   13184:	cmn	r0, #1
   13188:	beq	13464 <__assert_fail@plt+0x2130>
   1318c:	eor	r0, r8, #1
   13190:	sub	sp, fp, #28
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13198:	mov	r2, #8
   1319c:	add	r3, sp, #40	; 0x28
   131a0:	mov	r0, r4
   131a4:	mov	r1, #0
   131a8:	str	r9, [sp]
   131ac:	mov	r6, #0
   131b0:	bl	18b0c <__assert_fail@plt+0x77d8>
   131b4:	cmp	r0, #0
   131b8:	beq	131e8 <__assert_fail@plt+0x1eb4>
   131bc:	ldr	r0, [fp, #-136]	; 0xffffff78
   131c0:	ldr	r1, [fp, #-132]	; 0xffffff7c
   131c4:	movw	r2, #49640	; 0xc1e8
   131c8:	add	r4, r5, #4
   131cc:	mov	r6, #1
   131d0:	movt	r2, #2
   131d4:	strd	r0, [r2]
   131d8:	ldr	r0, [sl]
   131dc:	ldr	r0, [r5, r0, lsl #2]!
   131e0:	str	r0, [r5, #4]
   131e4:	b	1243c <__assert_fail@plt+0x1108>
   131e8:	mov	r0, #1
   131ec:	ldr	r1, [sp, #44]	; 0x2c
   131f0:	movw	r2, #49640	; 0xc1e8
   131f4:	add	r4, r5, #8
   131f8:	strb	r0, [r7]
   131fc:	ldr	r0, [sp, #40]	; 0x28
   13200:	movt	r2, #2
   13204:	strd	r0, [r2]
   13208:	ldr	r0, [fp, #-136]	; 0xffffff78
   1320c:	str	r0, [sp, #16]
   13210:	ldr	r0, [fp, #-132]	; 0xffffff7c
   13214:	str	r0, [sp, #12]
   13218:	b	1243c <__assert_fail@plt+0x1108>
   1321c:	mov	r2, #8
   13220:	sub	r3, fp, #136	; 0x88
   13224:	mov	r0, r4
   13228:	mov	r1, #0
   1322c:	str	r8, [sp]
   13230:	bl	18b0c <__assert_fail@plt+0x77d8>
   13234:	cmp	r0, #0
   13238:	bne	1241c <__assert_fail@plt+0x10e8>
   1323c:	ldr	r0, [sp, #40]	; 0x28
   13240:	ldr	r1, [sp, #44]	; 0x2c
   13244:	movw	r2, #49640	; 0xc1e8
   13248:	mov	r6, #1
   1324c:	add	r4, r5, #8
   13250:	movt	r2, #2
   13254:	strb	r6, [r7]
   13258:	strd	r0, [r2]
   1325c:	ldr	r0, [sl]
   13260:	ldr	r1, [fp, #-136]	; 0xffffff78
   13264:	str	r1, [sp, #16]
   13268:	ldr	r1, [fp, #-132]	; 0xffffff7c
   1326c:	ldr	r0, [r5, r0, lsl #2]!
   13270:	str	r1, [sp, #12]
   13274:	str	r0, [r5, #8]
   13278:	b	1243c <__assert_fail@plt+0x1108>
   1327c:	ldr	r0, [sp, #32]
   13280:	bl	15ab8 <__assert_fail@plt+0x4784>
   13284:	mov	r0, #0
   13288:	bl	14d00 <__assert_fail@plt+0x39cc>
   1328c:	and	r4, r4, r0
   13290:	b	1315c <__assert_fail@plt+0x1e28>
   13294:	mov	r0, #1
   13298:	bl	11430 <__assert_fail@plt+0xfc>
   1329c:	movw	r0, #49416	; 0xc108
   132a0:	movw	r2, #43633	; 0xaa71
   132a4:	mov	r1, #0
   132a8:	movt	r0, #2
   132ac:	movt	r2, #1
   132b0:	str	r1, [sp, #4]
   132b4:	movw	r1, #43459	; 0xa9c3
   132b8:	movt	r1, #1
   132bc:	ldr	r3, [r0]
   132c0:	movw	r0, #49524	; 0xc174
   132c4:	str	r2, [sp]
   132c8:	movw	r2, #43619	; 0xaa63
   132cc:	movt	r0, #2
   132d0:	movt	r2, #1
   132d4:	ldr	r0, [r0]
   132d8:	bl	1804c <__assert_fail@plt+0x6d18>
   132dc:	mov	r0, #0
   132e0:	bl	111e4 <exit@plt>
   132e4:	mov	r0, #0
   132e8:	bl	11430 <__assert_fail@plt+0xfc>
   132ec:	movw	r1, #43486	; 0xa9de
   132f0:	mov	r0, #0
   132f4:	mov	r2, #5
   132f8:	movt	r1, #1
   132fc:	bl	11100 <dcgettext@plt>
   13300:	mov	r2, r0
   13304:	ldr	r0, [r4]
   13308:	mov	r1, #0
   1330c:	ldrb	r3, [r0]
   13310:	mov	r0, #1
   13314:	bl	11178 <error@plt>
   13318:	ldr	r2, [r4]
   1331c:	ldr	r1, [sp, #36]	; 0x24
   13320:	movw	r3, #45160	; 0xb068
   13324:	movt	r3, #1
   13328:	str	r2, [sp]
   1332c:	mov	r2, #83	; 0x53
   13330:	bl	18a48 <__assert_fail@plt+0x7714>
   13334:	ldr	r2, [r4]
   13338:	ldr	r1, [sp, #36]	; 0x24
   1333c:	movw	r3, #45160	; 0xb068
   13340:	movt	r3, #1
   13344:	str	r2, [sp]
   13348:	mov	r2, #106	; 0x6a
   1334c:	bl	18a48 <__assert_fail@plt+0x7714>
   13350:	ldr	r2, [r4]
   13354:	ldr	r1, [sp, #36]	; 0x24
   13358:	movw	r3, #45160	; 0xb068
   1335c:	movt	r3, #1
   13360:	str	r2, [sp]
   13364:	mov	r2, #78	; 0x4e
   13368:	bl	18a48 <__assert_fail@plt+0x7714>
   1336c:	ldr	r2, [r4]
   13370:	ldr	r1, [sp, #36]	; 0x24
   13374:	movw	r3, #45160	; 0xb068
   13378:	movt	r3, #1
   1337c:	str	r2, [sp]
   13380:	mov	r2, #119	; 0x77
   13384:	bl	18a48 <__assert_fail@plt+0x7714>
   13388:	movw	r1, #43558	; 0xaa26
   1338c:	mov	r0, #0
   13390:	mov	r2, #5
   13394:	movt	r1, #1
   13398:	bl	11100 <dcgettext@plt>
   1339c:	mov	r5, r0
   133a0:	ldr	r0, [r4]
   133a4:	bl	17a7c <__assert_fail@plt+0x6748>
   133a8:	mov	r3, r0
   133ac:	mov	r0, #1
   133b0:	mov	r1, #0
   133b4:	mov	r2, r5
   133b8:	bl	11178 <error@plt>
   133bc:	movw	r0, #44981	; 0xafb5
   133c0:	movw	r1, #44415	; 0xad7f
   133c4:	movw	r3, #45013	; 0xafd5
   133c8:	movw	r2, #1418	; 0x58a
   133cc:	movt	r0, #1
   133d0:	movt	r1, #1
   133d4:	movt	r3, #1
   133d8:	bl	11334 <__assert_fail@plt>
   133dc:	movw	r1, #43646	; 0xaa7e
   133e0:	movt	r1, #1
   133e4:	b	134ac <__assert_fail@plt+0x2178>
   133e8:	movw	r1, #43692	; 0xaaac
   133ec:	mov	r0, #0
   133f0:	mov	r2, #5
   133f4:	movt	r1, #1
   133f8:	bl	11100 <dcgettext@plt>
   133fc:	mov	r4, r0
   13400:	ldr	r0, [sl]
   13404:	add	r0, r5, r0, lsl #2
   13408:	ldr	r0, [r0, #4]
   1340c:	bl	17a7c <__assert_fail@plt+0x6748>
   13410:	mov	r3, r0
   13414:	mov	r0, #0
   13418:	mov	r1, #0
   1341c:	mov	r2, r4
   13420:	bl	11178 <error@plt>
   13424:	movw	r1, #43709	; 0xaabd
   13428:	mov	r0, #0
   1342c:	mov	r2, #5
   13430:	movt	r1, #1
   13434:	bl	11100 <dcgettext@plt>
   13438:	movw	r2, #46034	; 0xb3d2
   1343c:	mov	r3, r0
   13440:	mov	r0, #0
   13444:	mov	r1, #0
   13448:	movt	r2, #1
   1344c:	bl	11178 <error@plt>
   13450:	mov	r0, #1
   13454:	bl	11430 <__assert_fail@plt+0xfc>
   13458:	movw	r1, #43754	; 0xaaea
   1345c:	movt	r1, #1
   13460:	b	134ac <__assert_fail@plt+0x2178>
   13464:	bl	11214 <__errno_location@plt>
   13468:	movw	r1, #43839	; 0xab3f
   1346c:	ldr	r4, [r0]
   13470:	mov	r0, #0
   13474:	mov	r2, #5
   13478:	movt	r1, #1
   1347c:	bl	11100 <dcgettext@plt>
   13480:	mov	r2, r0
   13484:	mov	r0, #1
   13488:	mov	r1, r4
   1348c:	bl	11178 <error@plt>
   13490:	movw	r0, #44981	; 0xafb5
   13494:	movw	r1, #44415	; 0xad7f
   13498:	movw	r3, #45013	; 0xafd5
   1349c:	movw	r2, #1404	; 0x57c
   134a0:	b	133cc <__assert_fail@plt+0x2098>
   134a4:	movw	r1, #44930	; 0xaf82
   134a8:	movt	r1, #1
   134ac:	mov	r0, #0
   134b0:	mov	r2, #5
   134b4:	bl	11100 <dcgettext@plt>
   134b8:	mov	r2, r0
   134bc:	mov	r0, #1
   134c0:	mov	r1, #0
   134c4:	bl	11178 <error@plt>
   134c8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134cc:	add	fp, sp, #24
   134d0:	sub	sp, sp, #32
   134d4:	mov	r5, r0
   134d8:	mov	r0, #0
   134dc:	add	r9, sp, #7
   134e0:	mov	r4, r1
   134e4:	strb	r0, [sp, #31]
   134e8:	movw	r0, #49632	; 0xc1e0
   134ec:	add	r6, r9, #23
   134f0:	movt	r0, #2
   134f4:	mov	r7, r6
   134f8:	ldr	r8, [r0]
   134fc:	movw	r0, #49628	; 0xc1dc
   13500:	movt	r0, #2
   13504:	ldr	r0, [r0]
   13508:	strb	r2, [r7], -r8
   1350c:	cmp	r0, #8
   13510:	beq	13558 <__assert_fail@plt+0x2224>
   13514:	cmp	r0, #10
   13518:	beq	13590 <__assert_fail@plt+0x225c>
   1351c:	cmp	r0, #16
   13520:	bne	13584 <__assert_fail@plt+0x2250>
   13524:	movw	r1, #44296	; 0xad08
   13528:	add	r0, r9, #22
   1352c:	movt	r1, #1
   13530:	and	r2, r5, #15
   13534:	ldrb	r2, [r1, r2]
   13538:	strb	r2, [r0], #-1
   1353c:	lsr	r2, r5, #4
   13540:	orr	r5, r2, r4, lsl #28
   13544:	orr	r2, r5, r4, lsr #4
   13548:	lsr	r4, r4, #4
   1354c:	cmp	r2, #0
   13550:	bne	13530 <__assert_fail@plt+0x21fc>
   13554:	b	13580 <__assert_fail@plt+0x224c>
   13558:	add	r0, r9, #22
   1355c:	mov	r1, #6
   13560:	lsr	r2, r5, #3
   13564:	bfi	r5, r1, #3, #29
   13568:	strb	r5, [r0], #-1
   1356c:	orr	r5, r2, r4, lsl #29
   13570:	orr	r2, r5, r4, lsr #3
   13574:	lsr	r4, r4, #3
   13578:	cmp	r2, #0
   1357c:	bne	13560 <__assert_fail@plt+0x222c>
   13580:	add	r6, r0, #1
   13584:	cmp	r7, r6
   13588:	bcc	135d8 <__assert_fail@plt+0x22a4>
   1358c:	b	13600 <__assert_fail@plt+0x22cc>
   13590:	add	r6, r9, #22
   13594:	mov	r0, r5
   13598:	mov	r1, r4
   1359c:	mov	r2, #10
   135a0:	mov	r3, #0
   135a4:	bl	19aec <__assert_fail@plt+0x87b8>
   135a8:	add	r2, r0, r0, lsl #2
   135ac:	sub	r2, r5, r2, lsl #1
   135b0:	orr	r2, r2, #48	; 0x30
   135b4:	strb	r2, [r6], #-1
   135b8:	rsbs	r2, r5, #9
   135bc:	mov	r5, r0
   135c0:	rscs	r2, r4, #0
   135c4:	mov	r4, r1
   135c8:	bcc	13594 <__assert_fail@plt+0x2260>
   135cc:	add	r6, r6, #1
   135d0:	cmp	r7, r6
   135d4:	bcs	13600 <__assert_fail@plt+0x22cc>
   135d8:	sub	r1, r8, r9
   135dc:	sub	r0, r9, r8
   135e0:	add	r1, r1, r6
   135e4:	add	r0, r0, #23
   135e8:	sub	r2, r1, #23
   135ec:	mov	r1, #48	; 0x30
   135f0:	bl	11244 <memset@plt>
   135f4:	sub	r6, r6, #1
   135f8:	cmp	r7, r6
   135fc:	bcc	135f4 <__assert_fail@plt+0x22c0>
   13600:	movw	r0, #49524	; 0xc174
   13604:	movt	r0, #2
   13608:	ldr	r1, [r0]
   1360c:	mov	r0, r6
   13610:	bl	1107c <fputs_unlocked@plt>
   13614:	sub	sp, fp, #24
   13618:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1361c:	bx	lr
   13620:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13624:	add	fp, sp, #28
   13628:	sub	sp, sp, #20
   1362c:	cmp	r0, #0
   13630:	beq	13d80 <__assert_fail@plt+0x2a4c>
   13634:	ldrb	r1, [r0]
   13638:	cmp	r1, #0
   1363c:	beq	13c58 <__assert_fail@plt+0x2924>
   13640:	movw	r1, #49612	; 0xc1cc
   13644:	mov	r8, r0
   13648:	str	r0, [sp, #12]
   1364c:	movt	r1, #2
   13650:	ldr	r4, [r1]
   13654:	movw	r1, #49616	; 0xc1d0
   13658:	movt	r1, #2
   1365c:	ldr	r0, [r1]
   13660:	cmp	r0, r4
   13664:	bls	13678 <__assert_fail@plt+0x2344>
   13668:	movw	r0, #49620	; 0xc1d4
   1366c:	movt	r0, #2
   13670:	ldr	sl, [r0]
   13674:	b	136a4 <__assert_fail@plt+0x2370>
   13678:	movw	r0, #49620	; 0xc1d4
   1367c:	mov	r2, #32
   13680:	movt	r0, #2
   13684:	mov	r5, r0
   13688:	ldr	r0, [r0]
   1368c:	bl	1842c <__assert_fail@plt+0x70f8>
   13690:	mov	sl, r0
   13694:	str	r0, [r5]
   13698:	movw	r0, #49612	; 0xc1cc
   1369c:	movt	r0, #2
   136a0:	ldr	r4, [r0]
   136a4:	add	r9, sl, r4, lsl #5
   136a8:	cmp	r9, #0
   136ac:	beq	13d28 <__assert_fail@plt+0x29f4>
   136b0:	ldrb	r0, [r8]
   136b4:	sub	r1, r0, #97	; 0x61
   136b8:	cmp	r1, #23
   136bc:	bhi	13c98 <__assert_fail@plt+0x2964>
   136c0:	add	r2, pc, #4
   136c4:	str	r8, [sp, #16]
   136c8:	ldr	pc, [r2, r1, lsl #2]
   136cc:	andeq	r3, r1, r0, ror #15
   136d0:	muleq	r1, r8, ip
   136d4:	muleq	r1, r8, r7
   136d8:	andeq	r3, r1, ip, lsr #14
   136dc:	muleq	r1, r8, ip
   136e0:			; <UNDEFINED> instruction: 0x000137b4
   136e4:	muleq	r1, r8, ip
   136e8:	muleq	r1, r8, ip
   136ec:	muleq	r1, r8, ip
   136f0:	muleq	r1, r8, ip
   136f4:	muleq	r1, r8, ip
   136f8:	muleq	r1, r8, ip
   136fc:	muleq	r1, r8, ip
   13700:	muleq	r1, r8, ip
   13704:	andeq	r3, r1, ip, lsr #14
   13708:	muleq	r1, r8, ip
   1370c:	muleq	r1, r8, ip
   13710:	muleq	r1, r8, ip
   13714:	muleq	r1, r8, ip
   13718:	muleq	r1, r8, ip
   1371c:	andeq	r3, r1, ip, lsr #14
   13720:	muleq	r1, r8, ip
   13724:	muleq	r1, r8, ip
   13728:	andeq	r3, r1, ip, lsr #14
   1372c:	mov	r6, r8
   13730:	ldrb	r2, [r6, #1]!
   13734:	sub	r1, r2, #67	; 0x43
   13738:	cmp	r1, #16
   1373c:	bhi	13814 <__assert_fail@plt+0x24e0>
   13740:	add	r3, pc, #0
   13744:	ldr	pc, [r3, r1, lsl #2]
   13748:	strdeq	r3, [r1], -ip
   1374c:	andeq	r3, r1, r4, lsl r8
   13750:	andeq	r3, r1, r4, lsl r8
   13754:	andeq	r3, r1, r4, lsl r8
   13758:	andeq	r3, r1, r4, lsl r8
   1375c:	andeq	r3, r1, r4, lsl r8
   13760:	andeq	r3, r1, ip, lsl #15
   13764:	andeq	r3, r1, r4, lsl r8
   13768:	andeq	r3, r1, r4, lsl r8
   1376c:	andeq	r3, r1, ip, lsl #15
   13770:	andeq	r3, r1, r4, lsl r8
   13774:	andeq	r3, r1, r4, lsl r8
   13778:	andeq	r3, r1, r4, lsl r8
   1377c:	andeq	r3, r1, r4, lsl r8
   13780:	andeq	r3, r1, r4, lsl r8
   13784:	andeq	r3, r1, r4, lsl r8
   13788:	andeq	r3, r1, r8, lsl #16
   1378c:	add	r6, r8, #2
   13790:	mov	r7, #4
   13794:	b	1387c <__assert_fail@plt+0x2548>
   13798:	movw	r0, #19440	; 0x4bf0
   1379c:	add	r3, r8, #1
   137a0:	mov	r7, #3
   137a4:	mov	r5, #1
   137a8:	mov	r8, #6
   137ac:	movt	r0, #1
   137b0:	b	13bf0 <__assert_fail@plt+0x28bc>
   137b4:	mov	r1, r8
   137b8:	ldrb	r0, [r1, #1]!
   137bc:	cmp	r0, #68	; 0x44
   137c0:	beq	137d4 <__assert_fail@plt+0x24a0>
   137c4:	cmp	r0, #70	; 0x46
   137c8:	beq	13aec <__assert_fail@plt+0x27b8>
   137cc:	cmp	r0, #76	; 0x4c
   137d0:	bne	13af8 <__assert_fail@plt+0x27c4>
   137d4:	add	r1, r8, #2
   137d8:	mov	r7, #8
   137dc:	b	13b60 <__assert_fail@plt+0x282c>
   137e0:	movw	r0, #19228	; 0x4b1c
   137e4:	add	r3, r8, #1
   137e8:	mov	r7, #3
   137ec:	mov	r5, #1
   137f0:	mov	r8, #5
   137f4:	movt	r0, #1
   137f8:	b	13bf0 <__assert_fail@plt+0x28bc>
   137fc:	add	r6, r8, #2
   13800:	mov	r7, #1
   13804:	b	1387c <__assert_fail@plt+0x2548>
   13808:	add	r6, r8, #2
   1380c:	mov	r7, #2
   13810:	b	1387c <__assert_fail@plt+0x2548>
   13814:	sub	r3, r2, #48	; 0x30
   13818:	mov	r7, #4
   1381c:	cmp	r3, #9
   13820:	bhi	1387c <__assert_fail@plt+0x2548>
   13824:	add	r1, r8, #2
   13828:	mov	r7, #0
   1382c:	movw	r5, #52429	; 0xcccd
   13830:	rsb	r2, r2, #47	; 0x2f
   13834:	movt	r5, #52428	; 0xcccc
   13838:	umull	r2, r5, r2, r5
   1383c:	cmp	r7, r5, lsr #3
   13840:	bhi	13c60 <__assert_fail@plt+0x292c>
   13844:	add	r2, r7, r7, lsl #2
   13848:	add	r7, r3, r2, lsl #1
   1384c:	ldrb	r2, [r1], #1
   13850:	sub	r3, r2, #48	; 0x30
   13854:	cmp	r3, #10
   13858:	bcc	1382c <__assert_fail@plt+0x24f8>
   1385c:	cmp	r7, #8
   13860:	bhi	13ce4 <__assert_fail@plt+0x29b0>
   13864:	movw	r2, #49536	; 0xc180
   13868:	movt	r2, #2
   1386c:	ldr	r2, [r2, r7, lsl #2]
   13870:	cmp	r2, #0
   13874:	beq	13ce4 <__assert_fail@plt+0x29b0>
   13878:	sub	r6, r1, #1
   1387c:	sub	r0, r0, #100	; 0x64
   13880:	cmp	r0, #20
   13884:	bhi	13d24 <__assert_fail@plt+0x29f0>
   13888:	movw	r1, #49536	; 0xc180
   1388c:	movt	r1, #2
   13890:	ldr	r5, [r1, r7, lsl #2]
   13894:	add	r1, pc, #0
   13898:	ldr	pc, [r1, r0, lsl #2]
   1389c:	strdeq	r3, [r1], -r0
   138a0:	andeq	r3, r1, r4, lsr #26
   138a4:	andeq	r3, r1, r4, lsr #26
   138a8:	andeq	r3, r1, r4, lsr #26
   138ac:	andeq	r3, r1, r4, lsr #26
   138b0:	andeq	r3, r1, r4, lsr #26
   138b4:	andeq	r3, r1, r4, lsr #26
   138b8:	andeq	r3, r1, r4, lsr #26
   138bc:	andeq	r3, r1, r4, lsr #26
   138c0:	andeq	r3, r1, r4, lsr #26
   138c4:	andeq	r3, r1, r4, lsr #26
   138c8:	andeq	r3, r1, r0, lsr #19
   138cc:	andeq	r3, r1, r4, lsr #26
   138d0:	andeq	r3, r1, r4, lsr #26
   138d4:	andeq	r3, r1, r4, lsr #26
   138d8:	andeq	r3, r1, r4, lsr #26
   138dc:	andeq	r3, r1, r4, lsr #26
   138e0:	strdeq	r3, [r1], -ip
   138e4:	andeq	r3, r1, r4, lsr #26
   138e8:	andeq	r3, r1, r4, lsr #26
   138ec:	andeq	r3, r1, r4, asr #18
   138f0:	movw	r1, #44679	; 0xae87
   138f4:	movw	r0, #43837	; 0xab3d
   138f8:	cmp	r5, #4
   138fc:	movw	r3, #44672	; 0xae80
   13900:	mov	r2, #9
   13904:	movt	r1, #1
   13908:	movt	r0, #1
   1390c:	movt	r3, #1
   13910:	moveq	r0, r1
   13914:	movw	r1, #44678	; 0xae86
   13918:	cmp	r5, #5
   1391c:	movt	r1, #1
   13920:	moveq	r0, r1
   13924:	mov	r1, #1
   13928:	str	r0, [sp]
   1392c:	add	r0, r9, #12
   13930:	bl	11220 <__sprintf_chk@plt>
   13934:	movw	r0, #45472	; 0xb1a0
   13938:	mov	r8, #0
   1393c:	movt	r0, #1
   13940:	b	13a4c <__assert_fail@plt+0x2718>
   13944:	movw	r1, #44700	; 0xae9c
   13948:	movw	r0, #44336	; 0xad30
   1394c:	cmp	r5, #4
   13950:	movw	r3, #44682	; 0xae8a
   13954:	mov	r2, #9
   13958:	movt	r1, #1
   1395c:	movt	r0, #1
   13960:	movt	r3, #1
   13964:	moveq	r0, r1
   13968:	movw	r1, #44699	; 0xae9b
   1396c:	cmp	r5, #5
   13970:	movt	r1, #1
   13974:	moveq	r0, r1
   13978:	mov	r1, #1
   1397c:	str	r0, [sp, #4]
   13980:	movw	r0, #45676	; 0xb26c
   13984:	movt	r0, #1
   13988:	ldr	r7, [r0, r7, lsl #2]
   1398c:	add	r0, r9, #12
   13990:	str	r7, [sp]
   13994:	bl	11220 <__sprintf_chk@plt>
   13998:	mov	r8, #3
   1399c:	b	13a50 <__assert_fail@plt+0x271c>
   139a0:	movw	r1, #44692	; 0xae94
   139a4:	movw	r0, #44914	; 0xaf72
   139a8:	cmp	r5, #4
   139ac:	movw	r3, #44682	; 0xae8a
   139b0:	mov	r2, #9
   139b4:	movt	r1, #1
   139b8:	movt	r0, #1
   139bc:	movt	r3, #1
   139c0:	moveq	r0, r1
   139c4:	movw	r1, #44691	; 0xae93
   139c8:	cmp	r5, #5
   139cc:	movt	r1, #1
   139d0:	moveq	r0, r1
   139d4:	mov	r1, #1
   139d8:	str	r0, [sp, #4]
   139dc:	movw	r0, #45540	; 0xb1e4
   139e0:	movt	r0, #1
   139e4:	ldr	r7, [r0, r7, lsl #2]
   139e8:	add	r0, r9, #12
   139ec:	str	r7, [sp]
   139f0:	bl	11220 <__sprintf_chk@plt>
   139f4:	mov	r8, #2
   139f8:	b	13a50 <__assert_fail@plt+0x271c>
   139fc:	movw	r1, #44696	; 0xae98
   13a00:	movw	r0, #44697	; 0xae99
   13a04:	cmp	r5, #4
   13a08:	movw	r3, #44672	; 0xae80
   13a0c:	mov	r2, #9
   13a10:	mov	r8, #1
   13a14:	movt	r1, #1
   13a18:	movt	r0, #1
   13a1c:	movt	r3, #1
   13a20:	moveq	r0, r1
   13a24:	movw	r1, #44695	; 0xae97
   13a28:	cmp	r5, #5
   13a2c:	movt	r1, #1
   13a30:	moveq	r0, r1
   13a34:	mov	r1, #1
   13a38:	str	r0, [sp]
   13a3c:	add	r0, r9, #12
   13a40:	bl	11220 <__sprintf_chk@plt>
   13a44:	movw	r0, #45608	; 0xb228
   13a48:	movt	r0, #1
   13a4c:	ldr	r7, [r0, r7, lsl #2]
   13a50:	add	r0, r9, #12
   13a54:	bl	111fc <strlen@plt>
   13a58:	cmp	r0, #9
   13a5c:	bcs	13d60 <__assert_fail@plt+0x2a2c>
   13a60:	sub	r1, r5, #1
   13a64:	cmp	r1, #4
   13a68:	bhi	13d24 <__assert_fail@plt+0x29f0>
   13a6c:	movw	r0, #17724	; 0x453c
   13a70:	add	r2, pc, #8
   13a74:	mov	r3, r6
   13a78:	movt	r0, #1
   13a7c:	ldr	pc, [r2, r1, lsl #2]
   13a80:	muleq	r1, r4, sl
   13a84:	andeq	r3, r1, r0, asr #21
   13a88:	strdeq	r3, [r1], -r0
   13a8c:	andeq	r3, r1, r0, ror #21
   13a90:			; <UNDEFINED> instruction: 0x00013ab4
   13a94:	movw	r1, #17040	; 0x4290
   13a98:	movw	r0, #17184	; 0x4320
   13a9c:	cmp	r8, #0
   13aa0:	mov	r5, #1
   13aa4:	movt	r1, #1
   13aa8:	movt	r0, #1
   13aac:	moveq	r0, r1
   13ab0:	b	13bf0 <__assert_fail@plt+0x28bc>
   13ab4:	movw	r0, #18148	; 0x46e4
   13ab8:	movt	r0, #1
   13abc:	b	13bf0 <__assert_fail@plt+0x28bc>
   13ac0:	movw	r1, #17328	; 0x43b0
   13ac4:	movw	r0, #17528	; 0x4478
   13ac8:	cmp	r8, #0
   13acc:	mov	r5, #2
   13ad0:	movt	r1, #1
   13ad4:	movt	r0, #1
   13ad8:	moveq	r0, r1
   13adc:	b	13bf0 <__assert_fail@plt+0x28bc>
   13ae0:	movw	r0, #17936	; 0x4610
   13ae4:	movt	r0, #1
   13ae8:	b	13bf0 <__assert_fail@plt+0x28bc>
   13aec:	add	r1, r8, #2
   13af0:	mov	r7, #4
   13af4:	b	13b60 <__assert_fail@plt+0x282c>
   13af8:	sub	r2, r0, #48	; 0x30
   13afc:	mov	r7, #8
   13b00:	cmp	r2, #9
   13b04:	bhi	13b60 <__assert_fail@plt+0x282c>
   13b08:	add	r1, r8, #2
   13b0c:	mov	r7, #0
   13b10:	movw	r3, #52429	; 0xcccd
   13b14:	rsb	r0, r0, #47	; 0x2f
   13b18:	movt	r3, #52428	; 0xcccc
   13b1c:	umull	r0, r3, r0, r3
   13b20:	cmp	r7, r3, lsr #3
   13b24:	bhi	13c60 <__assert_fail@plt+0x292c>
   13b28:	add	r0, r7, r7, lsl #2
   13b2c:	add	r7, r2, r0, lsl #1
   13b30:	ldrb	r0, [r1], #1
   13b34:	sub	r2, r0, #48	; 0x30
   13b38:	cmp	r2, #10
   13b3c:	bcc	13b10 <__assert_fail@plt+0x27dc>
   13b40:	cmp	r7, #8
   13b44:	bhi	13cf4 <__assert_fail@plt+0x29c0>
   13b48:	movw	r0, #49576	; 0xc1a8
   13b4c:	movt	r0, #2
   13b50:	ldr	r0, [r0, r7, lsl #2]
   13b54:	cmp	r0, #0
   13b58:	beq	13cf4 <__assert_fail@plt+0x29c0>
   13b5c:	sub	r1, r1, #1
   13b60:	movw	r0, #49576	; 0xc1a8
   13b64:	mov	r6, r1
   13b68:	movt	r0, #2
   13b6c:	ldr	r5, [r0, r7, lsl #2]
   13b70:	bl	112d4 <localeconv@plt>
   13b74:	ldr	r0, [r0]
   13b78:	ldrb	r1, [r0]
   13b7c:	cmp	r1, #0
   13b80:	beq	13b8c <__assert_fail@plt+0x2858>
   13b84:	bl	111fc <strlen@plt>
   13b88:	b	13b90 <__assert_fail@plt+0x285c>
   13b8c:	mov	r0, #1
   13b90:	cmp	r5, #8
   13b94:	mov	r3, r6
   13b98:	beq	13bdc <__assert_fail@plt+0x28a8>
   13b9c:	cmp	r5, #7
   13ba0:	beq	13bc4 <__assert_fail@plt+0x2890>
   13ba4:	cmp	r5, #6
   13ba8:	bne	13d24 <__assert_fail@plt+0x29f0>
   13bac:	add	r7, r0, #14
   13bb0:	movw	r0, #18396	; 0x47dc
   13bb4:	mov	r5, #6
   13bb8:	mov	r8, #4
   13bbc:	movt	r0, #1
   13bc0:	b	13bf0 <__assert_fail@plt+0x28bc>
   13bc4:	add	r7, r0, #23
   13bc8:	movw	r0, #18652	; 0x48dc
   13bcc:	mov	r5, #7
   13bd0:	mov	r8, #4
   13bd4:	movt	r0, #1
   13bd8:	b	13bf0 <__assert_fail@plt+0x28bc>
   13bdc:	add	r7, r0, #23
   13be0:	movw	r0, #18940	; 0x49fc
   13be4:	mov	r5, #8
   13be8:	mov	r8, #4
   13bec:	movt	r0, #1
   13bf0:	str	r8, [sl, r4, lsl #5]!
   13bf4:	str	r5, [sl, #4]
   13bf8:	str	r0, [sl, #8]
   13bfc:	str	r7, [sl, #24]
   13c00:	mov	r0, r3
   13c04:	ldrb	r1, [r0], #1
   13c08:	subs	r1, r1, #122	; 0x7a
   13c0c:	clz	r1, r1
   13c10:	movne	r0, r3
   13c14:	lsr	r1, r1, #5
   13c18:	strb	r1, [sl, #21]
   13c1c:	ldr	r1, [sp, #16]
   13c20:	cmp	r1, r0
   13c24:	beq	13d40 <__assert_fail@plt+0x2a0c>
   13c28:	movw	r1, #49612	; 0xc1cc
   13c2c:	mov	r8, r0
   13c30:	movt	r1, #2
   13c34:	mov	r2, r1
   13c38:	ldr	r1, [r1]
   13c3c:	add	r4, r1, #1
   13c40:	str	r4, [r2]
   13c44:	ldrb	r1, [r0]
   13c48:	cmp	r1, #0
   13c4c:	movw	r1, #49616	; 0xc1d0
   13c50:	movt	r1, #2
   13c54:	bne	1365c <__assert_fail@plt+0x2328>
   13c58:	mov	r5, #1
   13c5c:	b	13cd8 <__assert_fail@plt+0x29a4>
   13c60:	movw	r1, #44572	; 0xae1c
   13c64:	mov	r0, #0
   13c68:	mov	r2, #5
   13c6c:	mov	r5, #0
   13c70:	movt	r1, #1
   13c74:	bl	11100 <dcgettext@plt>
   13c78:	mov	r6, r0
   13c7c:	ldr	r0, [sp, #12]
   13c80:	bl	17a7c <__assert_fail@plt+0x6748>
   13c84:	mov	r3, r0
   13c88:	mov	r0, #0
   13c8c:	mov	r1, #0
   13c90:	mov	r2, r6
   13c94:	b	13cd4 <__assert_fail@plt+0x29a0>
   13c98:	movw	r1, #44835	; 0xaf23
   13c9c:	mov	r0, #0
   13ca0:	mov	r2, #5
   13ca4:	mov	r5, #0
   13ca8:	movt	r1, #1
   13cac:	bl	11100 <dcgettext@plt>
   13cb0:	mov	r6, r0
   13cb4:	ldr	r0, [sp, #12]
   13cb8:	ldrb	r7, [r8]
   13cbc:	bl	17a7c <__assert_fail@plt+0x6748>
   13cc0:	str	r0, [sp]
   13cc4:	mov	r0, #0
   13cc8:	mov	r1, #0
   13ccc:	mov	r2, r6
   13cd0:	mov	r3, r7
   13cd4:	bl	11178 <error@plt>
   13cd8:	mov	r0, r5
   13cdc:	sub	sp, fp, #28
   13ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ce4:	movw	r1, #44595	; 0xae33
   13ce8:	mov	r5, #0
   13cec:	movt	r1, #1
   13cf0:	b	13d00 <__assert_fail@plt+0x29cc>
   13cf4:	movw	r1, #44752	; 0xaed0
   13cf8:	mov	r5, #0
   13cfc:	movt	r1, #1
   13d00:	mov	r0, #0
   13d04:	mov	r2, #5
   13d08:	bl	11100 <dcgettext@plt>
   13d0c:	mov	r6, r0
   13d10:	ldr	r0, [sp, #12]
   13d14:	bl	17a7c <__assert_fail@plt+0x6748>
   13d18:	mov	r3, r0
   13d1c:	str	r7, [sp]
   13d20:	b	13c88 <__assert_fail@plt+0x2954>
   13d24:	bl	1131c <abort@plt>
   13d28:	movw	r0, #44475	; 0xadbb
   13d2c:	movw	r1, #44415	; 0xad7f
   13d30:	movw	r3, #44489	; 0xadc9
   13d34:	mov	r2, #648	; 0x288
   13d38:	movt	r0, #1
   13d3c:	b	13d74 <__assert_fail@plt+0x2a40>
   13d40:	movw	r0, #44465	; 0xadb1
   13d44:	movw	r1, #44415	; 0xad7f
   13d48:	movw	r3, #44424	; 0xad88
   13d4c:	movw	r2, #997	; 0x3e5
   13d50:	movt	r0, #1
   13d54:	movt	r1, #1
   13d58:	movt	r3, #1
   13d5c:	bl	11334 <__assert_fail@plt>
   13d60:	movw	r0, #44703	; 0xae9f
   13d64:	movw	r1, #44415	; 0xad7f
   13d68:	movw	r3, #44489	; 0xadc9
   13d6c:	movw	r2, #747	; 0x2eb
   13d70:	movt	r0, #1
   13d74:	movt	r1, #1
   13d78:	movt	r3, #1
   13d7c:	bl	11334 <__assert_fail@plt>
   13d80:	movw	r0, #44405	; 0xad75
   13d84:	movw	r1, #44415	; 0xad7f
   13d88:	movw	r3, #44424	; 0xad88
   13d8c:	movw	r2, #985	; 0x3d9
   13d90:	movt	r0, #1
   13d94:	b	13d54 <__assert_fail@plt+0x2a20>
   13d98:	push	{r4, r5, r6, r7, fp, lr}
   13d9c:	add	fp, sp, #16
   13da0:	movw	r7, #49524	; 0xc174
   13da4:	mov	r6, r0
   13da8:	mov	r4, r2
   13dac:	mov	r5, r1
   13db0:	movt	r7, #2
   13db4:	ldr	r0, [r7]
   13db8:	ldr	r1, [r0, #20]
   13dbc:	ldr	r2, [r0, #24]
   13dc0:	cmp	r1, r2
   13dc4:	bcs	13e14 <__assert_fail@plt+0x2ae0>
   13dc8:	add	r2, r1, #1
   13dcc:	str	r2, [r0, #20]
   13dd0:	mov	r0, #40	; 0x28
   13dd4:	strb	r0, [r1]
   13dd8:	mov	r0, r6
   13ddc:	mov	r1, r5
   13de0:	mov	r2, #41	; 0x29
   13de4:	bl	134c8 <__assert_fail@plt+0x2194>
   13de8:	cmp	r4, #0
   13dec:	beq	13e10 <__assert_fail@plt+0x2adc>
   13df0:	ldr	r0, [r7]
   13df4:	ldr	r1, [r0, #20]
   13df8:	ldr	r2, [r0, #24]
   13dfc:	cmp	r1, r2
   13e00:	bcs	13e20 <__assert_fail@plt+0x2aec>
   13e04:	add	r2, r1, #1
   13e08:	str	r2, [r0, #20]
   13e0c:	strb	r4, [r1]
   13e10:	pop	{r4, r5, r6, r7, fp, pc}
   13e14:	mov	r1, #40	; 0x28
   13e18:	bl	112a4 <__overflow@plt>
   13e1c:	b	13dd8 <__assert_fail@plt+0x2aa4>
   13e20:	mov	r1, r4
   13e24:	pop	{r4, r5, r6, r7, fp, lr}
   13e28:	b	112a4 <__overflow@plt>
   13e2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e30:	add	fp, sp, #28
   13e34:	sub	sp, sp, #36	; 0x24
   13e38:	mov	r9, r0
   13e3c:	movw	r0, #49632	; 0xc1e0
   13e40:	add	r6, sp, #11
   13e44:	mov	r8, r1
   13e48:	str	r2, [sp, #4]
   13e4c:	movt	r0, #2
   13e50:	add	r7, r6, #23
   13e54:	mov	r4, r7
   13e58:	ldr	sl, [r0]
   13e5c:	mov	r0, #32
   13e60:	strh	r0, [r4], -sl
   13e64:	movw	r0, #49628	; 0xc1dc
   13e68:	movt	r0, #2
   13e6c:	ldr	r0, [r0]
   13e70:	cmp	r0, #8
   13e74:	beq	13ec4 <__assert_fail@plt+0x2b90>
   13e78:	cmp	r0, #10
   13e7c:	beq	13fec <__assert_fail@plt+0x2cb8>
   13e80:	cmp	r0, #16
   13e84:	bne	13ef8 <__assert_fail@plt+0x2bc4>
   13e88:	movw	r1, #44296	; 0xad08
   13e8c:	add	r0, r6, #22
   13e90:	mov	r2, r9
   13e94:	mov	r3, r8
   13e98:	movt	r1, #1
   13e9c:	and	r7, r2, #15
   13ea0:	lsr	r2, r2, #4
   13ea4:	ldrb	r7, [r1, r7]
   13ea8:	orr	r2, r2, r3, lsl #28
   13eac:	strb	r7, [r0], #-1
   13eb0:	orr	r7, r2, r3, lsr #4
   13eb4:	lsr	r3, r3, #4
   13eb8:	cmp	r7, #0
   13ebc:	bne	13e9c <__assert_fail@plt+0x2b68>
   13ec0:	b	13ef4 <__assert_fail@plt+0x2bc0>
   13ec4:	add	r0, r6, #22
   13ec8:	mov	r1, #6
   13ecc:	mov	r2, r9
   13ed0:	mov	r3, r8
   13ed4:	lsr	r7, r2, #3
   13ed8:	bfi	r2, r1, #3, #29
   13edc:	strb	r2, [r0], #-1
   13ee0:	orr	r2, r7, r3, lsl #29
   13ee4:	orr	r7, r2, r3, lsr #3
   13ee8:	lsr	r3, r3, #3
   13eec:	cmp	r7, #0
   13ef0:	bne	13ed4 <__assert_fail@plt+0x2ba0>
   13ef4:	add	r7, r0, #1
   13ef8:	cmp	r4, r7
   13efc:	bcs	13f28 <__assert_fail@plt+0x2bf4>
   13f00:	sub	r1, sl, r6
   13f04:	sub	r0, r6, sl
   13f08:	add	r1, r1, r7
   13f0c:	add	r0, r0, #23
   13f10:	sub	r2, r1, #23
   13f14:	mov	r1, #48	; 0x30
   13f18:	bl	11244 <memset@plt>
   13f1c:	sub	r7, r7, #1
   13f20:	cmp	r4, r7
   13f24:	bcc	13f1c <__assert_fail@plt+0x2be8>
   13f28:	movw	sl, #49524	; 0xc174
   13f2c:	mov	r0, r7
   13f30:	movt	sl, #2
   13f34:	ldr	r1, [sl]
   13f38:	bl	1107c <fputs_unlocked@plt>
   13f3c:	movw	r0, #49688	; 0xc218
   13f40:	movt	r0, #2
   13f44:	ldrd	r0, [r0]
   13f48:	adds	r6, r0, r9
   13f4c:	ldr	r0, [sl]
   13f50:	adc	r5, r1, r8
   13f54:	ldr	r1, [r0, #20]
   13f58:	ldr	r2, [r0, #24]
   13f5c:	cmp	r1, r2
   13f60:	bcs	14130 <__assert_fail@plt+0x2dfc>
   13f64:	add	r2, r1, #1
   13f68:	str	r2, [r0, #20]
   13f6c:	mov	r0, #40	; 0x28
   13f70:	strb	r0, [r1]
   13f74:	movw	r0, #49632	; 0xc1e0
   13f78:	add	r3, sp, #11
   13f7c:	movt	r0, #2
   13f80:	add	r7, r3, #23
   13f84:	mov	r4, r7
   13f88:	ldr	r8, [r0]
   13f8c:	mov	r0, #41	; 0x29
   13f90:	strh	r0, [r4], -r8
   13f94:	movw	r0, #49628	; 0xc1dc
   13f98:	movt	r0, #2
   13f9c:	ldr	r0, [r0]
   13fa0:	cmp	r0, #8
   13fa4:	beq	14044 <__assert_fail@plt+0x2d10>
   13fa8:	cmp	r0, #10
   13fac:	beq	140e0 <__assert_fail@plt+0x2dac>
   13fb0:	cmp	r0, #16
   13fb4:	bne	14070 <__assert_fail@plt+0x2d3c>
   13fb8:	movw	r1, #44296	; 0xad08
   13fbc:	add	r0, r3, #22
   13fc0:	movt	r1, #1
   13fc4:	and	r2, r6, #15
   13fc8:	ldrb	r2, [r1, r2]
   13fcc:	strb	r2, [r0], #-1
   13fd0:	lsr	r2, r6, #4
   13fd4:	orr	r6, r2, r5, lsl #28
   13fd8:	orr	r2, r6, r5, lsr #4
   13fdc:	lsr	r5, r5, #4
   13fe0:	cmp	r2, #0
   13fe4:	bne	13fc4 <__assert_fail@plt+0x2c90>
   13fe8:	b	1406c <__assert_fail@plt+0x2d38>
   13fec:	add	r6, r6, #22
   13ff0:	mov	r7, r9
   13ff4:	mov	r5, r8
   13ff8:	mov	r0, r7
   13ffc:	mov	r1, r5
   14000:	mov	r2, #10
   14004:	mov	r3, #0
   14008:	bl	19aec <__assert_fail@plt+0x87b8>
   1400c:	add	r2, r0, r0, lsl #2
   14010:	sub	r2, r7, r2, lsl #1
   14014:	orr	r2, r2, #48	; 0x30
   14018:	strb	r2, [r6], #-1
   1401c:	rsbs	r2, r7, #9
   14020:	mov	r7, r0
   14024:	rscs	r2, r5, #0
   14028:	mov	r5, r1
   1402c:	bcc	13ff8 <__assert_fail@plt+0x2cc4>
   14030:	add	r7, r6, #1
   14034:	add	r6, sp, #11
   14038:	cmp	r4, r7
   1403c:	bcc	13f00 <__assert_fail@plt+0x2bcc>
   14040:	b	13f28 <__assert_fail@plt+0x2bf4>
   14044:	add	r0, r3, #22
   14048:	mov	r1, #6
   1404c:	lsr	r2, r6, #3
   14050:	bfi	r6, r1, #3, #29
   14054:	strb	r6, [r0], #-1
   14058:	orr	r6, r2, r5, lsl #29
   1405c:	orr	r2, r6, r5, lsr #3
   14060:	lsr	r5, r5, #3
   14064:	cmp	r2, #0
   14068:	bne	1404c <__assert_fail@plt+0x2d18>
   1406c:	add	r7, r0, #1
   14070:	cmp	r4, r7
   14074:	bcs	140a0 <__assert_fail@plt+0x2d6c>
   14078:	sub	r1, r8, r3
   1407c:	sub	r0, r3, r8
   14080:	add	r1, r1, r7
   14084:	add	r0, r0, #23
   14088:	sub	r2, r1, #23
   1408c:	mov	r1, #48	; 0x30
   14090:	bl	11244 <memset@plt>
   14094:	sub	r7, r7, #1
   14098:	cmp	r4, r7
   1409c:	bcc	14094 <__assert_fail@plt+0x2d60>
   140a0:	ldr	r1, [sl]
   140a4:	mov	r0, r7
   140a8:	bl	1107c <fputs_unlocked@plt>
   140ac:	ldr	r1, [sp, #4]
   140b0:	cmp	r1, #0
   140b4:	beq	140d8 <__assert_fail@plt+0x2da4>
   140b8:	ldr	r0, [sl]
   140bc:	ldr	r3, [r0, #20]
   140c0:	ldr	r2, [r0, #24]
   140c4:	cmp	r3, r2
   140c8:	bcs	1413c <__assert_fail@plt+0x2e08>
   140cc:	add	r2, r3, #1
   140d0:	str	r2, [r0, #20]
   140d4:	strb	r1, [r3]
   140d8:	sub	sp, fp, #28
   140dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140e0:	add	r7, r3, #22
   140e4:	mov	r0, r6
   140e8:	mov	r1, r5
   140ec:	mov	r2, #10
   140f0:	mov	r3, #0
   140f4:	bl	19aec <__assert_fail@plt+0x87b8>
   140f8:	add	r2, r0, r0, lsl #2
   140fc:	sub	r2, r6, r2, lsl #1
   14100:	orr	r2, r2, #48	; 0x30
   14104:	strb	r2, [r7], #-1
   14108:	rsbs	r2, r6, #9
   1410c:	mov	r6, r0
   14110:	rscs	r2, r5, #0
   14114:	mov	r5, r1
   14118:	bcc	140e4 <__assert_fail@plt+0x2db0>
   1411c:	add	r7, r7, #1
   14120:	add	r3, sp, #11
   14124:	cmp	r4, r7
   14128:	bcc	14078 <__assert_fail@plt+0x2d44>
   1412c:	b	140a0 <__assert_fail@plt+0x2d6c>
   14130:	mov	r1, #40	; 0x28
   14134:	bl	112a4 <__overflow@plt>
   14138:	b	13f74 <__assert_fail@plt+0x2c40>
   1413c:	bl	112a4 <__overflow@plt>
   14140:	sub	sp, fp, #28
   14144:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1414c:	add	fp, sp, #28
   14150:	sub	sp, sp, #4
   14154:	movw	sl, #49680	; 0xc210
   14158:	movw	r8, #49704	; 0xc228
   1415c:	movw	r4, #47126	; 0xb816
   14160:	movw	r9, #49684	; 0xc214
   14164:	movw	r6, #44900	; 0xaf64
   14168:	mov	r7, #1
   1416c:	movt	sl, #2
   14170:	movt	r8, #2
   14174:	movt	r4, #1
   14178:	movt	r9, #2
   1417c:	movt	r6, #1
   14180:	b	141c4 <__assert_fail@plt+0x2e90>
   14184:	movw	r1, #43839	; 0xab3f
   14188:	mov	r0, #0
   1418c:	mov	r2, #5
   14190:	movt	r1, #1
   14194:	bl	11100 <dcgettext@plt>
   14198:	movw	r1, #49700	; 0xc224
   1419c:	str	r0, [r8]
   141a0:	mov	r0, #1
   141a4:	movt	r1, #2
   141a8:	strb	r0, [r1]
   141ac:	movw	r0, #49520	; 0xc170
   141b0:	movt	r0, #2
   141b4:	ldr	r0, [r0]
   141b8:	str	r0, [r9]
   141bc:	cmp	r0, #0
   141c0:	bne	1424c <__assert_fail@plt+0x2f18>
   141c4:	ldr	r0, [sl]
   141c8:	ldr	r5, [r0]
   141cc:	cmp	r5, #0
   141d0:	str	r5, [r8]
   141d4:	beq	14284 <__assert_fail@plt+0x2f50>
   141d8:	add	r0, r0, #4
   141dc:	mov	r1, r4
   141e0:	str	r0, [sl]
   141e4:	mov	r0, r5
   141e8:	bl	11094 <strcmp@plt>
   141ec:	cmp	r0, #0
   141f0:	beq	14184 <__assert_fail@plt+0x2e50>
   141f4:	mov	r0, r5
   141f8:	mov	r1, r6
   141fc:	bl	112ec <fopen64@plt>
   14200:	cmp	r0, #0
   14204:	str	r0, [r9]
   14208:	bne	1424c <__assert_fail@plt+0x2f18>
   1420c:	bl	11214 <__errno_location@plt>
   14210:	ldr	r2, [r8]
   14214:	ldr	r5, [r0]
   14218:	mov	r0, #0
   1421c:	mov	r1, #3
   14220:	mov	r7, #0
   14224:	bl	177d0 <__assert_fail@plt+0x649c>
   14228:	movw	r2, #46034	; 0xb3d2
   1422c:	mov	r3, r0
   14230:	mov	r0, #0
   14234:	mov	r1, r5
   14238:	movt	r2, #1
   1423c:	bl	11178 <error@plt>
   14240:	ldr	r0, [r9]
   14244:	cmp	r0, #0
   14248:	beq	141c4 <__assert_fail@plt+0x2e90>
   1424c:	movw	r1, #49648	; 0xc1f0
   14250:	movt	r1, #2
   14254:	ldrb	r1, [r1]
   14258:	cmp	r1, #1
   1425c:	bne	14284 <__assert_fail@plt+0x2f50>
   14260:	movw	r1, #49636	; 0xc1e4
   14264:	movt	r1, #2
   14268:	ldrb	r1, [r1]
   1426c:	cmp	r1, #0
   14270:	bne	14284 <__assert_fail@plt+0x2f50>
   14274:	mov	r1, #0
   14278:	mov	r2, #2
   1427c:	mov	r3, #0
   14280:	bl	11238 <setvbuf@plt>
   14284:	and	r0, r7, #1
   14288:	sub	sp, fp, #28
   1428c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14294:	add	fp, sp, #28
   14298:	sub	sp, sp, #12
   1429c:	cmp	r0, r1
   142a0:	str	r3, [sp, #4]
   142a4:	str	r0, [sp, #8]
   142a8:	bls	14318 <__assert_fail@plt+0x2fe4>
   142ac:	ldr	r4, [fp, #12]
   142b0:	ldr	r7, [sp, #8]
   142b4:	mov	r5, r2
   142b8:	mov	r9, r1
   142bc:	mov	sl, #0
   142c0:	asr	r8, r4, #31
   142c4:	ldr	r0, [fp, #12]
   142c8:	subs	r7, r7, #1
   142cc:	mov	r3, #0
   142d0:	sbc	sl, sl, #0
   142d4:	mov	r2, r0
   142d8:	umull	r0, r1, r7, r0
   142dc:	mla	r1, r7, r8, r1
   142e0:	mla	r1, sl, r2, r1
   142e4:	ldr	r2, [sp, #8]
   142e8:	bl	19aec <__assert_fail@plt+0x87b8>
   142ec:	mov	r6, r0
   142f0:	ldr	r0, [fp, #8]
   142f4:	ldrsb	r2, [r5], #1
   142f8:	add	r0, r4, r0
   142fc:	sub	r1, r0, r6
   14300:	ldr	r0, [sp, #4]
   14304:	bl	18800 <__assert_fail@plt+0x74cc>
   14308:	subs	r0, r9, r7
   1430c:	mov	r4, r6
   14310:	rscs	r0, sl, #0
   14314:	bcc	142c4 <__assert_fail@plt+0x2f90>
   14318:	sub	sp, fp, #28
   1431c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14324:	add	fp, sp, #28
   14328:	sub	sp, sp, #12
   1432c:	cmp	r0, r1
   14330:	str	r3, [sp, #4]
   14334:	str	r0, [sp, #8]
   14338:	bls	143a8 <__assert_fail@plt+0x3074>
   1433c:	ldr	r4, [fp, #12]
   14340:	ldr	r7, [sp, #8]
   14344:	mov	r5, r2
   14348:	mov	r9, r1
   1434c:	mov	sl, #0
   14350:	asr	r8, r4, #31
   14354:	ldr	r0, [fp, #12]
   14358:	subs	r7, r7, #1
   1435c:	mov	r3, #0
   14360:	sbc	sl, sl, #0
   14364:	mov	r2, r0
   14368:	umull	r0, r1, r7, r0
   1436c:	mla	r1, r7, r8, r1
   14370:	mla	r1, sl, r2, r1
   14374:	ldr	r2, [sp, #8]
   14378:	bl	19aec <__assert_fail@plt+0x87b8>
   1437c:	mov	r6, r0
   14380:	ldr	r0, [fp, #8]
   14384:	ldrb	r2, [r5], #1
   14388:	add	r0, r4, r0
   1438c:	sub	r1, r0, r6
   14390:	ldr	r0, [sp, #4]
   14394:	bl	18800 <__assert_fail@plt+0x74cc>
   14398:	subs	r0, r9, r7
   1439c:	mov	r4, r6
   143a0:	rscs	r0, sl, #0
   143a4:	bcc	14354 <__assert_fail@plt+0x3020>
   143a8:	sub	sp, fp, #28
   143ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b4:	add	fp, sp, #28
   143b8:	sub	sp, sp, #12
   143bc:	cmp	r0, r1
   143c0:	stm	sp, {r1, r3}
   143c4:	bls	14470 <__assert_fail@plt+0x313c>
   143c8:	ldr	r4, [fp, #12]
   143cc:	mov	r5, r2
   143d0:	mov	r9, r0
   143d4:	mov	sl, #0
   143d8:	mov	r7, r0
   143dc:	asr	r8, r4, #31
   143e0:	b	1440c <__assert_fail@plt+0x30d8>
   143e4:	ldrh	r0, [r5]
   143e8:	sxth	r2, r0
   143ec:	ldr	r0, [sp, #4]
   143f0:	bl	18800 <__assert_fail@plt+0x74cc>
   143f4:	ldr	r0, [sp]
   143f8:	add	r5, r5, #2
   143fc:	mov	r4, r6
   14400:	subs	r0, r0, r7
   14404:	rscs	r0, sl, #0
   14408:	bcs	14470 <__assert_fail@plt+0x313c>
   1440c:	ldr	r0, [fp, #12]
   14410:	subs	r7, r7, #1
   14414:	mov	r3, #0
   14418:	sbc	sl, sl, #0
   1441c:	mov	r2, r0
   14420:	umull	r0, r1, r7, r0
   14424:	mla	r1, r7, r8, r1
   14428:	mla	r1, sl, r2, r1
   1442c:	mov	r2, r9
   14430:	bl	19aec <__assert_fail@plt+0x87b8>
   14434:	mov	r6, r0
   14438:	ldr	r0, [fp, #8]
   1443c:	add	r0, r4, r0
   14440:	sub	r1, r0, r6
   14444:	movw	r0, #49670	; 0xc206
   14448:	movt	r0, #2
   1444c:	ldrb	r0, [r0]
   14450:	cmp	r0, #1
   14454:	bne	143e4 <__assert_fail@plt+0x30b0>
   14458:	ldrb	r0, [r5, #1]
   1445c:	strb	r0, [sp, #8]
   14460:	ldrb	r0, [r5]
   14464:	strb	r0, [sp, #9]
   14468:	ldrh	r0, [sp, #8]
   1446c:	b	143e8 <__assert_fail@plt+0x30b4>
   14470:	sub	sp, fp, #28
   14474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14478:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1447c:	add	fp, sp, #28
   14480:	sub	sp, sp, #12
   14484:	cmp	r0, r1
   14488:	stm	sp, {r1, r3}
   1448c:	bls	14534 <__assert_fail@plt+0x3200>
   14490:	ldr	r4, [fp, #12]
   14494:	mov	r5, r2
   14498:	mov	r9, r0
   1449c:	mov	sl, #0
   144a0:	mov	r7, r0
   144a4:	asr	r8, r4, #31
   144a8:	b	144d0 <__assert_fail@plt+0x319c>
   144ac:	ldrh	r2, [r5]
   144b0:	ldr	r0, [sp, #4]
   144b4:	bl	18800 <__assert_fail@plt+0x74cc>
   144b8:	ldr	r0, [sp]
   144bc:	add	r5, r5, #2
   144c0:	mov	r4, r6
   144c4:	subs	r0, r0, r7
   144c8:	rscs	r0, sl, #0
   144cc:	bcs	14534 <__assert_fail@plt+0x3200>
   144d0:	ldr	r0, [fp, #12]
   144d4:	subs	r7, r7, #1
   144d8:	mov	r3, #0
   144dc:	sbc	sl, sl, #0
   144e0:	mov	r2, r0
   144e4:	umull	r0, r1, r7, r0
   144e8:	mla	r1, r7, r8, r1
   144ec:	mla	r1, sl, r2, r1
   144f0:	mov	r2, r9
   144f4:	bl	19aec <__assert_fail@plt+0x87b8>
   144f8:	mov	r6, r0
   144fc:	ldr	r0, [fp, #8]
   14500:	add	r0, r4, r0
   14504:	sub	r1, r0, r6
   14508:	movw	r0, #49670	; 0xc206
   1450c:	movt	r0, #2
   14510:	ldrb	r0, [r0]
   14514:	cmp	r0, #1
   14518:	bne	144ac <__assert_fail@plt+0x3178>
   1451c:	ldrb	r0, [r5, #1]
   14520:	strb	r0, [sp, #8]
   14524:	ldrb	r0, [r5]
   14528:	strb	r0, [sp, #9]
   1452c:	ldrh	r2, [sp, #8]
   14530:	b	144b0 <__assert_fail@plt+0x317c>
   14534:	sub	sp, fp, #28
   14538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1453c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14540:	add	fp, sp, #28
   14544:	sub	sp, sp, #12
   14548:	cmp	r0, r1
   1454c:	stm	sp, {r1, r3}
   14550:	bls	14608 <__assert_fail@plt+0x32d4>
   14554:	ldr	r4, [fp, #12]
   14558:	mov	r5, r2
   1455c:	mov	r9, r0
   14560:	mov	sl, #0
   14564:	mov	r7, r0
   14568:	asr	r8, r4, #31
   1456c:	b	14594 <__assert_fail@plt+0x3260>
   14570:	ldr	r2, [r5]
   14574:	ldr	r0, [sp, #4]
   14578:	bl	18800 <__assert_fail@plt+0x74cc>
   1457c:	ldr	r0, [sp]
   14580:	add	r5, r5, #4
   14584:	mov	r4, r6
   14588:	subs	r0, r0, r7
   1458c:	rscs	r0, sl, #0
   14590:	bcs	14608 <__assert_fail@plt+0x32d4>
   14594:	ldr	r0, [fp, #12]
   14598:	subs	r7, r7, #1
   1459c:	mov	r3, #0
   145a0:	sbc	sl, sl, #0
   145a4:	mov	r2, r0
   145a8:	umull	r0, r1, r7, r0
   145ac:	mla	r1, r7, r8, r1
   145b0:	mla	r1, sl, r2, r1
   145b4:	mov	r2, r9
   145b8:	bl	19aec <__assert_fail@plt+0x87b8>
   145bc:	mov	r6, r0
   145c0:	ldr	r0, [fp, #8]
   145c4:	add	r0, r4, r0
   145c8:	sub	r1, r0, r6
   145cc:	movw	r0, #49670	; 0xc206
   145d0:	movt	r0, #2
   145d4:	ldrb	r0, [r0]
   145d8:	cmp	r0, #1
   145dc:	bne	14570 <__assert_fail@plt+0x323c>
   145e0:	ldrb	r0, [r5, #3]
   145e4:	strb	r0, [sp, #8]
   145e8:	ldrb	r0, [r5, #2]
   145ec:	strb	r0, [sp, #9]
   145f0:	ldrb	r0, [r5, #1]
   145f4:	strb	r0, [sp, #10]
   145f8:	ldrb	r0, [r5]
   145fc:	strb	r0, [sp, #11]
   14600:	ldr	r2, [sp, #8]
   14604:	b	14574 <__assert_fail@plt+0x3240>
   14608:	sub	sp, fp, #28
   1460c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14614:	add	fp, sp, #28
   14618:	sub	sp, sp, #12
   1461c:	cmp	r0, r1
   14620:	stm	sp, {r1, r3}
   14624:	bls	146dc <__assert_fail@plt+0x33a8>
   14628:	ldr	r4, [fp, #12]
   1462c:	mov	r5, r2
   14630:	mov	r9, r0
   14634:	mov	sl, #0
   14638:	mov	r7, r0
   1463c:	asr	r8, r4, #31
   14640:	b	14668 <__assert_fail@plt+0x3334>
   14644:	ldr	r2, [r5]
   14648:	ldr	r0, [sp, #4]
   1464c:	bl	18800 <__assert_fail@plt+0x74cc>
   14650:	ldr	r0, [sp]
   14654:	add	r5, r5, #4
   14658:	mov	r4, r6
   1465c:	subs	r0, r0, r7
   14660:	rscs	r0, sl, #0
   14664:	bcs	146dc <__assert_fail@plt+0x33a8>
   14668:	ldr	r0, [fp, #12]
   1466c:	subs	r7, r7, #1
   14670:	mov	r3, #0
   14674:	sbc	sl, sl, #0
   14678:	mov	r2, r0
   1467c:	umull	r0, r1, r7, r0
   14680:	mla	r1, r7, r8, r1
   14684:	mla	r1, sl, r2, r1
   14688:	mov	r2, r9
   1468c:	bl	19aec <__assert_fail@plt+0x87b8>
   14690:	mov	r6, r0
   14694:	ldr	r0, [fp, #8]
   14698:	add	r0, r4, r0
   1469c:	sub	r1, r0, r6
   146a0:	movw	r0, #49670	; 0xc206
   146a4:	movt	r0, #2
   146a8:	ldrb	r0, [r0]
   146ac:	cmp	r0, #1
   146b0:	bne	14644 <__assert_fail@plt+0x3310>
   146b4:	ldrb	r0, [r5, #3]
   146b8:	strb	r0, [sp, #8]
   146bc:	ldrb	r0, [r5, #2]
   146c0:	strb	r0, [sp, #9]
   146c4:	ldrb	r0, [r5, #1]
   146c8:	strb	r0, [sp, #10]
   146cc:	ldrb	r0, [r5]
   146d0:	strb	r0, [sp, #11]
   146d4:	ldr	r2, [sp, #8]
   146d8:	b	14648 <__assert_fail@plt+0x3314>
   146dc:	sub	sp, fp, #28
   146e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146e8:	add	fp, sp, #28
   146ec:	sub	sp, sp, #20
   146f0:	cmp	r0, r1
   146f4:	stm	sp, {r1, r3}
   146f8:	bls	147d4 <__assert_fail@plt+0x34a0>
   146fc:	ldr	r4, [fp, #12]
   14700:	mov	r5, r2
   14704:	mov	r9, r0
   14708:	mov	sl, #0
   1470c:	mov	r7, r0
   14710:	asr	r8, r4, #31
   14714:	b	1473c <__assert_fail@plt+0x3408>
   14718:	ldrd	r2, [r5]
   1471c:	ldr	r0, [sp, #4]
   14720:	bl	18800 <__assert_fail@plt+0x74cc>
   14724:	ldr	r0, [sp]
   14728:	add	r5, r5, #8
   1472c:	mov	r4, r6
   14730:	subs	r0, r0, r7
   14734:	rscs	r0, sl, #0
   14738:	bcs	147d4 <__assert_fail@plt+0x34a0>
   1473c:	ldr	r0, [fp, #12]
   14740:	subs	r7, r7, #1
   14744:	mov	r3, #0
   14748:	sbc	sl, sl, #0
   1474c:	mov	r2, r0
   14750:	umull	r0, r1, r7, r0
   14754:	mla	r1, r7, r8, r1
   14758:	mla	r1, sl, r2, r1
   1475c:	mov	r2, r9
   14760:	bl	19aec <__assert_fail@plt+0x87b8>
   14764:	mov	r6, r0
   14768:	ldr	r0, [fp, #8]
   1476c:	add	r0, r4, r0
   14770:	sub	r1, r0, r6
   14774:	movw	r0, #49670	; 0xc206
   14778:	movt	r0, #2
   1477c:	ldrb	r0, [r0]
   14780:	cmp	r0, #1
   14784:	bne	14718 <__assert_fail@plt+0x33e4>
   14788:	ldrb	r0, [r5, #7]
   1478c:	strb	r0, [sp, #8]
   14790:	ldrb	r0, [r5, #6]
   14794:	strb	r0, [sp, #9]
   14798:	ldrb	r0, [r5, #5]
   1479c:	strb	r0, [sp, #10]
   147a0:	ldrb	r0, [r5, #4]
   147a4:	strb	r0, [sp, #11]
   147a8:	ldrb	r0, [r5, #3]
   147ac:	strb	r0, [sp, #12]
   147b0:	ldrb	r0, [r5, #2]
   147b4:	strb	r0, [sp, #13]
   147b8:	ldrb	r0, [r5, #1]
   147bc:	strb	r0, [sp, #14]
   147c0:	ldrb	r0, [r5]
   147c4:	strb	r0, [sp, #15]
   147c8:	ldr	r2, [sp, #8]
   147cc:	ldr	r3, [sp, #12]
   147d0:	b	1471c <__assert_fail@plt+0x33e8>
   147d4:	sub	sp, fp, #28
   147d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147e0:	add	fp, sp, #28
   147e4:	sub	sp, sp, #44	; 0x2c
   147e8:	cmp	r0, r1
   147ec:	str	r1, [sp, #8]
   147f0:	bls	148d4 <__assert_fail@plt+0x35a0>
   147f4:	ldr	r7, [fp, #12]
   147f8:	mov	r9, r0
   147fc:	mov	r4, r2
   14800:	mov	r8, #0
   14804:	add	sl, sp, #12
   14808:	mov	r6, r9
   1480c:	asr	r0, r7, #31
   14810:	str	r0, [sp, #4]
   14814:	b	1485c <__assert_fail@plt+0x3528>
   14818:	vldr	s0, [r4]
   1481c:	mov	r0, sl
   14820:	mov	r1, #31
   14824:	mov	r2, #0
   14828:	mov	r3, #0
   1482c:	bl	15b88 <__assert_fail@plt+0x4854>
   14830:	movw	r0, #44876	; 0xaf4c
   14834:	mov	r1, r7
   14838:	mov	r2, sl
   1483c:	movt	r0, #1
   14840:	bl	18800 <__assert_fail@plt+0x74cc>
   14844:	ldr	r0, [sp, #8]
   14848:	add	r4, r4, #4
   1484c:	mov	r7, r5
   14850:	subs	r0, r0, r6
   14854:	rscs	r0, r8, #0
   14858:	bcs	148d4 <__assert_fail@plt+0x35a0>
   1485c:	ldr	r0, [fp, #12]
   14860:	ldr	r3, [sp, #4]
   14864:	subs	r6, r6, #1
   14868:	sbc	r8, r8, #0
   1486c:	mov	r2, r0
   14870:	umull	r0, r1, r6, r0
   14874:	mla	r1, r6, r3, r1
   14878:	mov	r3, #0
   1487c:	mla	r1, r8, r2, r1
   14880:	mov	r2, r9
   14884:	bl	19aec <__assert_fail@plt+0x87b8>
   14888:	mov	r5, r0
   1488c:	ldr	r0, [fp, #8]
   14890:	add	r0, r7, r0
   14894:	sub	r7, r0, r5
   14898:	movw	r0, #49670	; 0xc206
   1489c:	movt	r0, #2
   148a0:	ldrb	r0, [r0]
   148a4:	cmp	r0, #1
   148a8:	bne	14818 <__assert_fail@plt+0x34e4>
   148ac:	ldrb	r0, [r4, #3]
   148b0:	strb	r0, [sp, #12]
   148b4:	ldrb	r0, [r4, #2]
   148b8:	strb	r0, [sp, #13]
   148bc:	ldrb	r0, [r4, #1]
   148c0:	strb	r0, [sp, #14]
   148c4:	ldrb	r0, [r4]
   148c8:	strb	r0, [sp, #15]
   148cc:	vldr	s0, [sp, #12]
   148d0:	b	1481c <__assert_fail@plt+0x34e8>
   148d4:	sub	sp, fp, #28
   148d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148e0:	add	fp, sp, #28
   148e4:	sub	sp, sp, #52	; 0x34
   148e8:	cmp	r0, r1
   148ec:	str	r1, [sp, #4]
   148f0:	bls	149f4 <__assert_fail@plt+0x36c0>
   148f4:	ldr	r7, [fp, #12]
   148f8:	mov	r9, r0
   148fc:	mov	r4, r2
   14900:	mov	r8, #0
   14904:	add	sl, sp, #8
   14908:	mov	r6, r9
   1490c:	asr	r0, r7, #31
   14910:	str	r0, [sp]
   14914:	b	1495c <__assert_fail@plt+0x3628>
   14918:	vldr	d0, [r4]
   1491c:	mov	r0, sl
   14920:	mov	r1, #40	; 0x28
   14924:	mov	r2, #0
   14928:	mov	r3, #0
   1492c:	bl	15870 <__assert_fail@plt+0x453c>
   14930:	movw	r0, #44876	; 0xaf4c
   14934:	mov	r1, r7
   14938:	mov	r2, sl
   1493c:	movt	r0, #1
   14940:	bl	18800 <__assert_fail@plt+0x74cc>
   14944:	ldr	r0, [sp, #4]
   14948:	add	r4, r4, #8
   1494c:	mov	r7, r5
   14950:	subs	r0, r0, r6
   14954:	rscs	r0, r8, #0
   14958:	bcs	149f4 <__assert_fail@plt+0x36c0>
   1495c:	ldr	r0, [fp, #12]
   14960:	ldr	r3, [sp]
   14964:	subs	r6, r6, #1
   14968:	sbc	r8, r8, #0
   1496c:	mov	r2, r0
   14970:	umull	r0, r1, r6, r0
   14974:	mla	r1, r6, r3, r1
   14978:	mov	r3, #0
   1497c:	mla	r1, r8, r2, r1
   14980:	mov	r2, r9
   14984:	bl	19aec <__assert_fail@plt+0x87b8>
   14988:	mov	r5, r0
   1498c:	ldr	r0, [fp, #8]
   14990:	add	r0, r7, r0
   14994:	sub	r7, r0, r5
   14998:	movw	r0, #49670	; 0xc206
   1499c:	movt	r0, #2
   149a0:	ldrb	r0, [r0]
   149a4:	cmp	r0, #1
   149a8:	bne	14918 <__assert_fail@plt+0x35e4>
   149ac:	ldrb	r0, [r4, #7]
   149b0:	strb	r0, [sp, #8]
   149b4:	ldrb	r0, [r4, #6]
   149b8:	strb	r0, [sp, #9]
   149bc:	ldrb	r0, [r4, #5]
   149c0:	strb	r0, [sp, #10]
   149c4:	ldrb	r0, [r4, #4]
   149c8:	strb	r0, [sp, #11]
   149cc:	ldrb	r0, [r4, #3]
   149d0:	strb	r0, [sp, #12]
   149d4:	ldrb	r0, [r4, #2]
   149d8:	strb	r0, [sp, #13]
   149dc:	ldrb	r0, [r4, #1]
   149e0:	strb	r0, [sp, #14]
   149e4:	ldrb	r0, [r4]
   149e8:	strb	r0, [sp, #15]
   149ec:	vldr	d0, [sp, #8]
   149f0:	b	1491c <__assert_fail@plt+0x35e8>
   149f4:	sub	sp, fp, #28
   149f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a00:	add	fp, sp, #28
   14a04:	sub	sp, sp, #52	; 0x34
   14a08:	cmp	r0, r1
   14a0c:	str	r1, [sp, #4]
   14a10:	bls	14b14 <__assert_fail@plt+0x37e0>
   14a14:	ldr	r7, [fp, #12]
   14a18:	mov	r9, r0
   14a1c:	mov	r4, r2
   14a20:	mov	r8, #0
   14a24:	add	sl, sp, #8
   14a28:	mov	r6, r9
   14a2c:	asr	r0, r7, #31
   14a30:	str	r0, [sp]
   14a34:	b	14a7c <__assert_fail@plt+0x3748>
   14a38:	vldr	d0, [r4]
   14a3c:	mov	r0, sl
   14a40:	mov	r1, #40	; 0x28
   14a44:	mov	r2, #0
   14a48:	mov	r3, #0
   14a4c:	bl	15cd8 <__assert_fail@plt+0x49a4>
   14a50:	movw	r0, #44876	; 0xaf4c
   14a54:	mov	r1, r7
   14a58:	mov	r2, sl
   14a5c:	movt	r0, #1
   14a60:	bl	18800 <__assert_fail@plt+0x74cc>
   14a64:	ldr	r0, [sp, #4]
   14a68:	add	r4, r4, #8
   14a6c:	mov	r7, r5
   14a70:	subs	r0, r0, r6
   14a74:	rscs	r0, r8, #0
   14a78:	bcs	14b14 <__assert_fail@plt+0x37e0>
   14a7c:	ldr	r0, [fp, #12]
   14a80:	ldr	r3, [sp]
   14a84:	subs	r6, r6, #1
   14a88:	sbc	r8, r8, #0
   14a8c:	mov	r2, r0
   14a90:	umull	r0, r1, r6, r0
   14a94:	mla	r1, r6, r3, r1
   14a98:	mov	r3, #0
   14a9c:	mla	r1, r8, r2, r1
   14aa0:	mov	r2, r9
   14aa4:	bl	19aec <__assert_fail@plt+0x87b8>
   14aa8:	mov	r5, r0
   14aac:	ldr	r0, [fp, #8]
   14ab0:	add	r0, r7, r0
   14ab4:	sub	r7, r0, r5
   14ab8:	movw	r0, #49670	; 0xc206
   14abc:	movt	r0, #2
   14ac0:	ldrb	r0, [r0]
   14ac4:	cmp	r0, #1
   14ac8:	bne	14a38 <__assert_fail@plt+0x3704>
   14acc:	ldrb	r0, [r4, #7]
   14ad0:	strb	r0, [sp, #8]
   14ad4:	ldrb	r0, [r4, #6]
   14ad8:	strb	r0, [sp, #9]
   14adc:	ldrb	r0, [r4, #5]
   14ae0:	strb	r0, [sp, #10]
   14ae4:	ldrb	r0, [r4, #4]
   14ae8:	strb	r0, [sp, #11]
   14aec:	ldrb	r0, [r4, #3]
   14af0:	strb	r0, [sp, #12]
   14af4:	ldrb	r0, [r4, #2]
   14af8:	strb	r0, [sp, #13]
   14afc:	ldrb	r0, [r4, #1]
   14b00:	strb	r0, [sp, #14]
   14b04:	ldrb	r0, [r4]
   14b08:	strb	r0, [sp, #15]
   14b0c:	vldr	d0, [sp, #8]
   14b10:	b	14a3c <__assert_fail@plt+0x3708>
   14b14:	sub	sp, fp, #28
   14b18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b20:	add	fp, sp, #28
   14b24:	sub	sp, sp, #12
   14b28:	cmp	r0, r1
   14b2c:	str	r1, [sp, #4]
   14b30:	bls	14be8 <__assert_fail@plt+0x38b4>
   14b34:	ldr	r7, [fp, #12]
   14b38:	mov	r4, r2
   14b3c:	mov	r8, r0
   14b40:	mov	r6, r0
   14b44:	mov	r9, #0
   14b48:	asr	sl, r7, #31
   14b4c:	b	14b88 <__assert_fail@plt+0x3854>
   14b50:	mov	r1, #0
   14b54:	add	r2, sp, #10
   14b58:	strb	r1, [sp, #11]
   14b5c:	strb	r0, [sp, #10]
   14b60:	ldr	r0, [fp, #8]
   14b64:	add	r0, r5, r0
   14b68:	sub	r1, r0, r7
   14b6c:	movw	r0, #44876	; 0xaf4c
   14b70:	movt	r0, #1
   14b74:	bl	18800 <__assert_fail@plt+0x74cc>
   14b78:	ldr	r0, [sp, #4]
   14b7c:	subs	r0, r0, r6
   14b80:	rscs	r0, r9, #0
   14b84:	bcs	14be8 <__assert_fail@plt+0x38b4>
   14b88:	ldr	r0, [fp, #12]
   14b8c:	subs	r6, r6, #1
   14b90:	mov	r3, #0
   14b94:	mov	r5, r7
   14b98:	sbc	r9, r9, #0
   14b9c:	mov	r2, r0
   14ba0:	umull	r0, r1, r6, r0
   14ba4:	mla	r1, r6, sl, r1
   14ba8:	mla	r1, r9, r2, r1
   14bac:	mov	r2, r8
   14bb0:	bl	19aec <__assert_fail@plt+0x87b8>
   14bb4:	mov	r7, r0
   14bb8:	ldrb	r0, [r4], #1
   14bbc:	movw	r2, #44880	; 0xaf50
   14bc0:	movt	r2, #1
   14bc4:	and	r0, r0, #127	; 0x7f
   14bc8:	cmp	r0, #127	; 0x7f
   14bcc:	beq	14b60 <__assert_fail@plt+0x382c>
   14bd0:	cmp	r0, #32
   14bd4:	bhi	14b50 <__assert_fail@plt+0x381c>
   14bd8:	movw	r1, #45744	; 0xb2b0
   14bdc:	movt	r1, #1
   14be0:	add	r2, r1, r0, lsl #2
   14be4:	b	14b60 <__assert_fail@plt+0x382c>
   14be8:	sub	sp, fp, #28
   14bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14bf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14bf4:	add	fp, sp, #28
   14bf8:	sub	sp, sp, #20
   14bfc:	cmp	r0, r1
   14c00:	str	r1, [sp, #12]
   14c04:	bls	14cf8 <__assert_fail@plt+0x39c4>
   14c08:	ldr	r7, [fp, #12]
   14c0c:	mov	sl, r0
   14c10:	mov	r4, r2
   14c14:	mov	r8, #0
   14c18:	mov	r6, sl
   14c1c:	asr	r0, r7, #31
   14c20:	str	r0, [sp, #8]
   14c24:	b	14c98 <__assert_fail@plt+0x3964>
   14c28:	bl	111d8 <__ctype_b_loc@plt>
   14c2c:	ldr	r0, [r0]
   14c30:	movw	r3, #44908	; 0xaf6c
   14c34:	mov	r1, #1
   14c38:	mov	r2, #4
   14c3c:	movt	r3, #1
   14c40:	add	r0, r0, r5, lsl #1
   14c44:	ldrh	r0, [r0]
   14c48:	str	r5, [sp]
   14c4c:	add	r5, sp, #16
   14c50:	tst	r0, #16384	; 0x4000
   14c54:	movw	r0, #44911	; 0xaf6f
   14c58:	movt	r0, #1
   14c5c:	moveq	r3, r0
   14c60:	mov	r0, r5
   14c64:	bl	11220 <__sprintf_chk@plt>
   14c68:	mov	r2, r5
   14c6c:	ldr	r0, [fp, #8]
   14c70:	add	r0, r7, r0
   14c74:	sub	r1, r0, r9
   14c78:	movw	r0, #44876	; 0xaf4c
   14c7c:	movt	r0, #1
   14c80:	bl	18800 <__assert_fail@plt+0x74cc>
   14c84:	ldr	r0, [sp, #12]
   14c88:	mov	r7, r9
   14c8c:	subs	r0, r0, r6
   14c90:	rscs	r0, r8, #0
   14c94:	bcs	14cf8 <__assert_fail@plt+0x39c4>
   14c98:	ldr	r0, [fp, #12]
   14c9c:	ldr	r3, [sp, #8]
   14ca0:	subs	r6, r6, #1
   14ca4:	sbc	r8, r8, #0
   14ca8:	mov	r2, r0
   14cac:	umull	r0, r1, r6, r0
   14cb0:	mla	r1, r6, r3, r1
   14cb4:	mov	r3, #0
   14cb8:	mla	r1, r8, r2, r1
   14cbc:	mov	r2, sl
   14cc0:	bl	19aec <__assert_fail@plt+0x87b8>
   14cc4:	mov	r9, r0
   14cc8:	ldrsb	r0, [r4], #1
   14ccc:	uxtb	r5, r0
   14cd0:	cmp	r5, #14
   14cd4:	bcs	14c28 <__assert_fail@plt+0x38f4>
   14cd8:	movw	r1, #16257	; 0x3f81
   14cdc:	mov	r2, #1
   14ce0:	tst	r2, r1, lsr r5
   14ce4:	beq	14c28 <__assert_fail@plt+0x38f4>
   14ce8:	movw	r1, #45876	; 0xb334
   14cec:	movt	r1, #1
   14cf0:	ldr	r2, [r1, r0, lsl #2]
   14cf4:	b	14c6c <__assert_fail@plt+0x3938>
   14cf8:	sub	sp, fp, #28
   14cfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d00:	push	{r4, r5, r6, sl, fp, lr}
   14d04:	add	fp, sp, #16
   14d08:	movw	r6, #49684	; 0xc214
   14d0c:	movt	r6, #2
   14d10:	ldr	r5, [r6]
   14d14:	cmp	r5, #0
   14d18:	beq	14dac <__assert_fail@plt+0x3a78>
   14d1c:	ldr	r1, [r5]
   14d20:	lsl	r1, r1, #26
   14d24:	and	r4, r0, r1, asr #31
   14d28:	movw	r0, #49680	; 0xc210
   14d2c:	movw	r1, #47126	; 0xb816
   14d30:	movt	r0, #2
   14d34:	movt	r1, #1
   14d38:	ldr	r0, [r0]
   14d3c:	ldr	r0, [r0, #-4]
   14d40:	bl	11094 <strcmp@plt>
   14d44:	cmp	r0, #0
   14d48:	beq	14db4 <__assert_fail@plt+0x3a80>
   14d4c:	mov	r0, r5
   14d50:	bl	159c0 <__assert_fail@plt+0x468c>
   14d54:	cmp	r4, #0
   14d58:	bne	14d6c <__assert_fail@plt+0x3a38>
   14d5c:	cmp	r0, #0
   14d60:	beq	14d6c <__assert_fail@plt+0x3a38>
   14d64:	bl	11214 <__errno_location@plt>
   14d68:	ldr	r4, [r0]
   14d6c:	cmp	r4, #0
   14d70:	beq	14dc4 <__assert_fail@plt+0x3a90>
   14d74:	movw	r0, #49704	; 0xc228
   14d78:	mov	r1, #3
   14d7c:	mov	r5, #0
   14d80:	movt	r0, #2
   14d84:	ldr	r2, [r0]
   14d88:	mov	r0, #0
   14d8c:	bl	177d0 <__assert_fail@plt+0x649c>
   14d90:	movw	r2, #46034	; 0xb3d2
   14d94:	mov	r3, r0
   14d98:	mov	r0, #0
   14d9c:	mov	r1, r4
   14da0:	movt	r2, #1
   14da4:	bl	11178 <error@plt>
   14da8:	b	14dc8 <__assert_fail@plt+0x3a94>
   14dac:	mov	r5, #1
   14db0:	b	14dd0 <__assert_fail@plt+0x3a9c>
   14db4:	mov	r0, r5
   14db8:	bl	112e0 <clearerr_unlocked@plt>
   14dbc:	cmp	r4, #0
   14dc0:	bne	14d74 <__assert_fail@plt+0x3a40>
   14dc4:	mov	r5, #1
   14dc8:	mov	r0, #0
   14dcc:	str	r0, [r6]
   14dd0:	movw	r0, #49524	; 0xc174
   14dd4:	movt	r0, #2
   14dd8:	ldr	r0, [r0]
   14ddc:	ldrb	r0, [r0]
   14de0:	tst	r0, #32
   14de4:	beq	14e10 <__assert_fail@plt+0x3adc>
   14de8:	movw	r1, #44969	; 0xafa9
   14dec:	mov	r0, #0
   14df0:	mov	r2, #5
   14df4:	mov	r5, #0
   14df8:	movt	r1, #1
   14dfc:	bl	11100 <dcgettext@plt>
   14e00:	mov	r2, r0
   14e04:	mov	r0, #0
   14e08:	mov	r1, #0
   14e0c:	bl	11178 <error@plt>
   14e10:	mov	r0, r5
   14e14:	pop	{r4, r5, r6, sl, fp, pc}
   14e18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e1c:	add	fp, sp, #28
   14e20:	sub	sp, sp, #4
   14e24:	mov	r9, r0
   14e28:	movw	r0, #49696	; 0xc220
   14e2c:	mov	r8, r1
   14e30:	movt	r0, #2
   14e34:	sub	r1, r9, #1
   14e38:	ldr	r0, [r0]
   14e3c:	cmp	r1, r0
   14e40:	bcs	14ef0 <__assert_fail@plt+0x3bbc>
   14e44:	movw	sl, #49684	; 0xc214
   14e48:	mov	r0, #0
   14e4c:	mov	r4, r2
   14e50:	mov	r7, #1
   14e54:	movt	sl, #2
   14e58:	str	r0, [r2]
   14e5c:	ldr	r3, [sl]
   14e60:	cmp	r3, #0
   14e64:	beq	14ee4 <__assert_fail@plt+0x3bb0>
   14e68:	mov	r0, r8
   14e6c:	mov	r1, #1
   14e70:	mov	r2, r9
   14e74:	bl	11304 <fread_unlocked@plt>
   14e78:	ldr	r1, [r4]
   14e7c:	cmp	r0, r9
   14e80:	add	r1, r1, r0
   14e84:	str	r1, [r4]
   14e88:	beq	14ee4 <__assert_fail@plt+0x3bb0>
   14e8c:	mov	r7, #1
   14e90:	bl	11214 <__errno_location@plt>
   14e94:	mov	r5, r0
   14e98:	ldr	r0, [r5]
   14e9c:	bl	14d00 <__assert_fail@plt+0x39cc>
   14ea0:	and	r6, r7, r0
   14ea4:	bl	14148 <__assert_fail@plt+0x2e14>
   14ea8:	ldr	r3, [sl]
   14eac:	and	r7, r6, r0
   14eb0:	cmp	r3, #0
   14eb4:	beq	14ee4 <__assert_fail@plt+0x3bb0>
   14eb8:	ldr	r1, [r4]
   14ebc:	sub	r6, r9, r1
   14ec0:	add	r0, r8, r1
   14ec4:	mov	r1, #1
   14ec8:	mov	r2, r6
   14ecc:	bl	11304 <fread_unlocked@plt>
   14ed0:	ldr	r1, [r4]
   14ed4:	cmp	r0, r6
   14ed8:	add	r1, r1, r0
   14edc:	str	r1, [r4]
   14ee0:	bne	14e98 <__assert_fail@plt+0x3b64>
   14ee4:	mov	r0, r7
   14ee8:	sub	sp, fp, #28
   14eec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ef0:	movw	r0, #45030	; 0xafe6
   14ef4:	movw	r1, #44415	; 0xad7f
   14ef8:	movw	r3, #45060	; 0xb004
   14efc:	movw	r2, #1293	; 0x50d
   14f00:	movt	r0, #1
   14f04:	movt	r1, #1
   14f08:	movt	r3, #1
   14f0c:	bl	11334 <__assert_fail@plt>
   14f10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f14:	add	fp, sp, #28
   14f18:	sub	sp, sp, #20
   14f1c:	str	r0, [sp, #12]
   14f20:	movw	r0, #49668	; 0xc204
   14f24:	mov	r4, r2
   14f28:	str	r1, [sp, #16]
   14f2c:	movt	r0, #2
   14f30:	ldrb	r0, [r0]
   14f34:	cmp	r0, #0
   14f38:	movw	r0, #49708	; 0xc22c
   14f3c:	movt	r0, #2
   14f40:	bne	14f7c <__assert_fail@plt+0x3c48>
   14f44:	ldrb	r0, [r0]
   14f48:	cmp	r0, #1
   14f4c:	bne	14f7c <__assert_fail@plt+0x3c48>
   14f50:	movw	r0, #49696	; 0xc220
   14f54:	movt	r0, #2
   14f58:	ldr	r0, [r0]
   14f5c:	cmp	r0, r4
   14f60:	bne	14f7c <__assert_fail@plt+0x3c48>
   14f64:	ldr	r1, [fp, #8]
   14f68:	mov	r0, r3
   14f6c:	mov	r2, r4
   14f70:	bl	111f0 <bcmp@plt>
   14f74:	cmp	r0, #0
   14f78:	beq	15198 <__assert_fail@plt+0x3e64>
   14f7c:	movw	r0, #49709	; 0xc22d
   14f80:	mov	r9, #0
   14f84:	movt	r0, #2
   14f88:	strb	r9, [r0]
   14f8c:	movw	r0, #49612	; 0xc1cc
   14f90:	movt	r0, #2
   14f94:	ldr	r0, [r0]
   14f98:	cmp	r0, #0
   14f9c:	beq	151c4 <__assert_fail@plt+0x3e90>
   14fa0:	movw	r5, #49620	; 0xc1d4
   14fa4:	movw	r6, #49524	; 0xc174
   14fa8:	movt	r5, #2
   14fac:	movt	r6, #2
   14fb0:	ldr	r0, [r5]
   14fb4:	movw	r1, #45380	; 0xb144
   14fb8:	cmp	r9, #0
   14fbc:	movt	r1, #1
   14fc0:	add	r0, r0, r9, lsl #5
   14fc4:	ldr	r0, [r0, #4]
   14fc8:	ldr	r0, [r1, r0, lsl #2]
   14fcc:	movw	r1, #49696	; 0xc220
   14fd0:	movt	r1, #2
   14fd4:	ldr	r1, [r1]
   14fd8:	sub	r2, r1, r4
   14fdc:	udiv	r8, r1, r0
   14fe0:	udiv	sl, r2, r0
   14fe4:	beq	15010 <__assert_fail@plt+0x3cdc>
   14fe8:	movw	r0, #49632	; 0xc1e0
   14fec:	movw	r1, #44876	; 0xaf4c
   14ff0:	movw	r3, #44295	; 0xad07
   14ff4:	movt	r0, #2
   14ff8:	movt	r1, #1
   14ffc:	movt	r3, #1
   15000:	ldr	r2, [r0]
   15004:	mov	r0, #1
   15008:	bl	1125c <__printf_chk@plt>
   1500c:	b	1502c <__assert_fail@plt+0x3cf8>
   15010:	movw	r0, #49624	; 0xc1d8
   15014:	ldr	r1, [sp, #16]
   15018:	mov	r2, #0
   1501c:	movt	r0, #2
   15020:	ldr	r3, [r0]
   15024:	ldr	r0, [sp, #12]
   15028:	blx	r3
   1502c:	ldr	r0, [r5]
   15030:	add	r0, r0, r9, lsl #5
   15034:	ldr	r1, [r0, #24]
   15038:	ldr	r7, [r0, #8]
   1503c:	ldr	r2, [r0, #28]
   15040:	add	r3, r0, #12
   15044:	mov	r0, r8
   15048:	stm	sp, {r1, r2}
   1504c:	ldr	r2, [fp, #8]
   15050:	mov	r1, sl
   15054:	blx	r7
   15058:	ldr	r0, [r5]
   1505c:	add	r0, r0, r9, lsl #5
   15060:	ldrb	r1, [r0, #21]
   15064:	cmp	r1, #0
   15068:	beq	15140 <__assert_fail@plt+0x3e0c>
   1506c:	ldr	r1, [r0, #24]
   15070:	ldr	r0, [r0, #28]
   15074:	movw	r3, #44295	; 0xad07
   15078:	movt	r3, #1
   1507c:	mul	r0, r0, sl
   15080:	sdiv	r0, r0, r8
   15084:	mla	r2, r1, sl, r0
   15088:	movw	r1, #44876	; 0xaf4c
   1508c:	mov	r0, #1
   15090:	movt	r1, #1
   15094:	bl	1125c <__printf_chk@plt>
   15098:	ldr	r1, [r6]
   1509c:	movw	r0, #45106	; 0xb032
   150a0:	movt	r0, #1
   150a4:	bl	1107c <fputs_unlocked@plt>
   150a8:	mov	r8, r4
   150ac:	cmp	r4, #0
   150b0:	beq	15110 <__assert_fail@plt+0x3ddc>
   150b4:	bl	111d8 <__ctype_b_loc@plt>
   150b8:	ldr	r5, [fp, #8]
   150bc:	mov	r7, r0
   150c0:	mov	r4, r8
   150c4:	ldrb	r1, [r5], #1
   150c8:	ldr	r0, [r7]
   150cc:	add	r0, r0, r1, lsl #1
   150d0:	ldrb	r0, [r0, #1]
   150d4:	tst	r0, #64	; 0x40
   150d8:	ldr	r0, [r6]
   150dc:	movweq	r1, #46	; 0x2e
   150e0:	ldr	r2, [r0, #20]
   150e4:	ldr	r3, [r0, #24]
   150e8:	cmp	r2, r3
   150ec:	bcs	15108 <__assert_fail@plt+0x3dd4>
   150f0:	add	r3, r2, #1
   150f4:	str	r3, [r0, #20]
   150f8:	strb	r1, [r2]
   150fc:	subs	r4, r4, #1
   15100:	bne	150c4 <__assert_fail@plt+0x3d90>
   15104:	b	15110 <__assert_fail@plt+0x3ddc>
   15108:	bl	112a4 <__overflow@plt>
   1510c:	b	150fc <__assert_fail@plt+0x3dc8>
   15110:	ldr	r0, [r6]
   15114:	ldr	r1, [r0, #20]
   15118:	ldr	r2, [r0, #24]
   1511c:	cmp	r1, r2
   15120:	bcs	1518c <__assert_fail@plt+0x3e58>
   15124:	add	r2, r1, #1
   15128:	str	r2, [r0, #20]
   1512c:	mov	r0, #60	; 0x3c
   15130:	strb	r0, [r1]
   15134:	movw	r5, #49620	; 0xc1d4
   15138:	mov	r4, r8
   1513c:	movt	r5, #2
   15140:	ldr	r0, [r6]
   15144:	ldr	r1, [r0, #20]
   15148:	ldr	r2, [r0, #24]
   1514c:	cmp	r1, r2
   15150:	bcs	15180 <__assert_fail@plt+0x3e4c>
   15154:	add	r2, r1, #1
   15158:	str	r2, [r0, #20]
   1515c:	mov	r0, #10
   15160:	strb	r0, [r1]
   15164:	movw	r0, #49612	; 0xc1cc
   15168:	add	r9, r9, #1
   1516c:	movt	r0, #2
   15170:	ldr	r0, [r0]
   15174:	cmp	r9, r0
   15178:	bcc	14fb0 <__assert_fail@plt+0x3c7c>
   1517c:	b	151c4 <__assert_fail@plt+0x3e90>
   15180:	mov	r1, #10
   15184:	bl	112a4 <__overflow@plt>
   15188:	b	15164 <__assert_fail@plt+0x3e30>
   1518c:	mov	r1, #60	; 0x3c
   15190:	bl	112a4 <__overflow@plt>
   15194:	b	15134 <__assert_fail@plt+0x3e00>
   15198:	movw	r4, #49709	; 0xc22d
   1519c:	movt	r4, #2
   151a0:	ldrb	r0, [r4]
   151a4:	cmp	r0, #0
   151a8:	bne	151c4 <__assert_fail@plt+0x3e90>
   151ac:	movw	r1, #45103	; 0xb02f
   151b0:	mov	r0, #1
   151b4:	mov	r5, #1
   151b8:	movt	r1, #1
   151bc:	bl	1125c <__printf_chk@plt>
   151c0:	strb	r5, [r4]
   151c4:	movw	r1, #49708	; 0xc22c
   151c8:	mov	r0, #1
   151cc:	movt	r1, #2
   151d0:	strb	r0, [r1]
   151d4:	sub	sp, fp, #28
   151d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151dc:	mov	r0, #1
   151e0:	b	11430 <__assert_fail@plt+0xfc>
   151e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151e8:	add	fp, sp, #28
   151ec:	sub	sp, sp, #12
   151f0:	mov	r4, r3
   151f4:	mov	r6, r2
   151f8:	mov	r5, r1
   151fc:	mov	sl, r0
   15200:	bl	111fc <strlen@plt>
   15204:	ldr	r8, [r5]
   15208:	cmp	r8, #0
   1520c:	beq	152cc <__assert_fail@plt+0x3f98>
   15210:	mov	r7, r0
   15214:	mov	r0, #0
   15218:	add	r9, r5, #4
   1521c:	mov	r5, #0
   15220:	str	r6, [sp, #4]
   15224:	str	r0, [sp]
   15228:	mvn	r0, #0
   1522c:	str	r0, [sp, #8]
   15230:	b	1524c <__assert_fail@plt+0x3f18>
   15234:	str	r5, [sp, #8]
   15238:	ldr	r8, [r9, r5, lsl #2]
   1523c:	add	r6, r6, r4
   15240:	add	r5, r5, #1
   15244:	cmp	r8, #0
   15248:	beq	152b4 <__assert_fail@plt+0x3f80>
   1524c:	mov	r0, r8
   15250:	mov	r1, sl
   15254:	mov	r2, r7
   15258:	bl	11310 <strncmp@plt>
   1525c:	cmp	r0, #0
   15260:	bne	15238 <__assert_fail@plt+0x3f04>
   15264:	mov	r0, r8
   15268:	bl	111fc <strlen@plt>
   1526c:	cmp	r0, r7
   15270:	beq	152d0 <__assert_fail@plt+0x3f9c>
   15274:	ldr	r0, [sp, #8]
   15278:	cmn	r0, #1
   1527c:	beq	15234 <__assert_fail@plt+0x3f00>
   15280:	ldr	r0, [sp, #4]
   15284:	cmp	r0, #0
   15288:	beq	152a8 <__assert_fail@plt+0x3f74>
   1528c:	ldr	r1, [sp, #8]
   15290:	mov	r2, r4
   15294:	mla	r0, r1, r4, r0
   15298:	mov	r1, r6
   1529c:	bl	111f0 <bcmp@plt>
   152a0:	cmp	r0, #0
   152a4:	beq	15238 <__assert_fail@plt+0x3f04>
   152a8:	mov	r0, #1
   152ac:	str	r0, [sp]
   152b0:	b	15238 <__assert_fail@plt+0x3f04>
   152b4:	ldr	r0, [sp]
   152b8:	tst	r0, #1
   152bc:	ldr	r0, [sp, #8]
   152c0:	mvnne	r0, #1
   152c4:	sub	sp, fp, #28
   152c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152cc:	mvn	r5, #0
   152d0:	mov	r0, r5
   152d4:	sub	sp, fp, #28
   152d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152dc:	push	{r4, r5, r6, r7, fp, lr}
   152e0:	add	fp, sp, #16
   152e4:	mov	r5, r0
   152e8:	ldr	r0, [r1]
   152ec:	mvn	r4, #0
   152f0:	cmp	r0, #0
   152f4:	beq	15320 <__assert_fail@plt+0x3fec>
   152f8:	add	r7, r1, #4
   152fc:	mov	r6, #0
   15300:	mov	r1, r5
   15304:	bl	11094 <strcmp@plt>
   15308:	cmp	r0, #0
   1530c:	beq	15328 <__assert_fail@plt+0x3ff4>
   15310:	ldr	r0, [r7, r6, lsl #2]
   15314:	add	r6, r6, #1
   15318:	cmp	r0, #0
   1531c:	bne	15300 <__assert_fail@plt+0x3fcc>
   15320:	mov	r0, r4
   15324:	pop	{r4, r5, r6, r7, fp, pc}
   15328:	mov	r0, r6
   1532c:	pop	{r4, r5, r6, r7, fp, pc}
   15330:	push	{r4, r5, r6, sl, fp, lr}
   15334:	add	fp, sp, #16
   15338:	sub	sp, sp, #8
   1533c:	mov	r5, r0
   15340:	movw	r0, #45947	; 0xb37b
   15344:	mov	r4, r1
   15348:	movw	r1, #45974	; 0xb396
   1534c:	cmn	r2, #1
   15350:	mov	r2, #5
   15354:	movt	r0, #1
   15358:	movt	r1, #1
   1535c:	moveq	r1, r0
   15360:	mov	r0, #0
   15364:	bl	11100 <dcgettext@plt>
   15368:	mov	r6, r0
   1536c:	mov	r0, #0
   15370:	mov	r1, #8
   15374:	mov	r2, r4
   15378:	bl	174ac <__assert_fail@plt+0x6178>
   1537c:	mov	r4, r0
   15380:	mov	r0, #1
   15384:	mov	r1, r5
   15388:	bl	17a6c <__assert_fail@plt+0x6738>
   1538c:	str	r0, [sp]
   15390:	mov	r0, #0
   15394:	mov	r1, #0
   15398:	mov	r2, r6
   1539c:	mov	r3, r4
   153a0:	bl	11178 <error@plt>
   153a4:	sub	sp, fp, #16
   153a8:	pop	{r4, r5, r6, sl, fp, pc}
   153ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153b0:	add	fp, sp, #28
   153b4:	sub	sp, sp, #4
   153b8:	mov	sl, r1
   153bc:	movw	r1, #46003	; 0xb3b3
   153c0:	mov	r4, r2
   153c4:	mov	r6, r0
   153c8:	mov	r0, #0
   153cc:	mov	r2, #5
   153d0:	mov	r8, #0
   153d4:	movt	r1, #1
   153d8:	bl	11100 <dcgettext@plt>
   153dc:	movw	r1, #49512	; 0xc168
   153e0:	movt	r1, #2
   153e4:	ldr	r1, [r1]
   153e8:	bl	1107c <fputs_unlocked@plt>
   153ec:	ldr	r7, [r6]
   153f0:	cmp	r7, #0
   153f4:	beq	154b0 <__assert_fail@plt+0x417c>
   153f8:	add	r0, r6, #4
   153fc:	mov	r9, #0
   15400:	mov	r6, #0
   15404:	str	r0, [sp]
   15408:	cmp	r9, #0
   1540c:	bne	15464 <__assert_fail@plt+0x4130>
   15410:	mov	r5, #0
   15414:	movw	r0, #49512	; 0xc168
   15418:	movt	r0, #2
   1541c:	ldr	r6, [r0]
   15420:	mov	r0, r7
   15424:	bl	17a7c <__assert_fail@plt+0x6748>
   15428:	movw	r2, #46024	; 0xb3c8
   1542c:	mov	r3, r0
   15430:	mov	r0, r6
   15434:	mov	r1, #1
   15438:	movt	r2, #1
   1543c:	bl	11280 <__fprintf_chk@plt>
   15440:	add	r6, sl, r5
   15444:	ldr	r0, [sp]
   15448:	add	r8, r8, r4
   1544c:	ldr	r7, [r0, -r9, lsl #2]
   15450:	sub	r9, r9, #1
   15454:	cmp	r7, #0
   15458:	beq	154b0 <__assert_fail@plt+0x417c>
   1545c:	cmp	r9, #0
   15460:	beq	15410 <__assert_fail@plt+0x40dc>
   15464:	add	r1, sl, r8
   15468:	mov	r0, r6
   1546c:	mov	r2, r4
   15470:	bl	111f0 <bcmp@plt>
   15474:	cmp	r0, #0
   15478:	mov	r5, r8
   1547c:	bne	15414 <__assert_fail@plt+0x40e0>
   15480:	movw	r0, #49512	; 0xc168
   15484:	movt	r0, #2
   15488:	ldr	r5, [r0]
   1548c:	mov	r0, r7
   15490:	bl	17a7c <__assert_fail@plt+0x6748>
   15494:	movw	r2, #46032	; 0xb3d0
   15498:	mov	r3, r0
   1549c:	mov	r0, r5
   154a0:	mov	r1, #1
   154a4:	movt	r2, #1
   154a8:	bl	11280 <__fprintf_chk@plt>
   154ac:	b	15444 <__assert_fail@plt+0x4110>
   154b0:	movw	r0, #49512	; 0xc168
   154b4:	movt	r0, #2
   154b8:	ldr	r0, [r0]
   154bc:	ldr	r1, [r0, #20]
   154c0:	ldr	r2, [r0, #24]
   154c4:	cmp	r1, r2
   154c8:	addcc	r2, r1, #1
   154cc:	strcc	r2, [r0, #20]
   154d0:	movcc	r0, #10
   154d4:	strbcc	r0, [r1]
   154d8:	subcc	sp, fp, #28
   154dc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154e0:	mov	r1, #10
   154e4:	sub	sp, fp, #28
   154e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154ec:	b	112a4 <__overflow@plt>
   154f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154f4:	add	fp, sp, #28
   154f8:	sub	sp, sp, #20
   154fc:	mov	r9, r0
   15500:	ldr	r0, [fp, #16]
   15504:	mov	r8, r3
   15508:	mov	sl, r2
   1550c:	mov	r7, r1
   15510:	cmp	r0, #0
   15514:	beq	155d4 <__assert_fail@plt+0x42a0>
   15518:	mov	r0, r7
   1551c:	str	r9, [sp, #8]
   15520:	str	r8, [sp, #16]
   15524:	bl	111fc <strlen@plt>
   15528:	ldr	r9, [sl]
   1552c:	cmp	r9, #0
   15530:	beq	15644 <__assert_fail@plt+0x4310>
   15534:	str	sl, [sp, #4]
   15538:	add	r8, sl, #4
   1553c:	ldr	sl, [sp, #16]
   15540:	mov	r4, r0
   15544:	mov	r0, #0
   15548:	mvn	r6, #0
   1554c:	mov	r5, #0
   15550:	str	r0, [sp, #12]
   15554:	b	15574 <__assert_fail@plt+0x4240>
   15558:	mov	r6, r5
   1555c:	ldr	r9, [r8, r5, lsl #2]
   15560:	ldr	r0, [fp, #8]
   15564:	add	r5, r5, #1
   15568:	add	sl, sl, r0
   1556c:	cmp	r9, #0
   15570:	beq	15614 <__assert_fail@plt+0x42e0>
   15574:	mov	r0, r9
   15578:	mov	r1, r7
   1557c:	mov	r2, r4
   15580:	bl	11310 <strncmp@plt>
   15584:	cmp	r0, #0
   15588:	bne	1555c <__assert_fail@plt+0x4228>
   1558c:	mov	r0, r9
   15590:	bl	111fc <strlen@plt>
   15594:	cmp	r0, r4
   15598:	beq	156c8 <__assert_fail@plt+0x4394>
   1559c:	cmn	r6, #1
   155a0:	beq	15558 <__assert_fail@plt+0x4224>
   155a4:	ldr	r0, [sp, #16]
   155a8:	cmp	r0, #0
   155ac:	beq	155c8 <__assert_fail@plt+0x4294>
   155b0:	ldr	r2, [fp, #8]
   155b4:	mov	r1, sl
   155b8:	mla	r0, r6, r2, r0
   155bc:	bl	111f0 <bcmp@plt>
   155c0:	cmp	r0, #0
   155c4:	beq	1555c <__assert_fail@plt+0x4228>
   155c8:	mov	r0, #1
   155cc:	str	r0, [sp, #12]
   155d0:	b	1555c <__assert_fail@plt+0x4228>
   155d4:	ldr	r0, [sl]
   155d8:	movw	r4, #45947	; 0xb37b
   155dc:	movt	r4, #1
   155e0:	cmp	r0, #0
   155e4:	beq	15654 <__assert_fail@plt+0x4320>
   155e8:	add	r5, sl, #4
   155ec:	mov	r6, #0
   155f0:	mov	r1, r7
   155f4:	bl	11094 <strcmp@plt>
   155f8:	cmp	r0, #0
   155fc:	beq	1562c <__assert_fail@plt+0x42f8>
   15600:	ldr	r0, [r5, r6, lsl #2]
   15604:	add	r6, r6, #1
   15608:	cmp	r0, #0
   1560c:	bne	155f0 <__assert_fail@plt+0x42bc>
   15610:	b	15654 <__assert_fail@plt+0x4320>
   15614:	ldr	r0, [sp, #12]
   15618:	ldr	r8, [sp, #16]
   1561c:	ldr	sl, [sp, #4]
   15620:	ldr	r9, [sp, #8]
   15624:	tst	r0, #1
   15628:	bne	15638 <__assert_fail@plt+0x4304>
   1562c:	cmn	r6, #1
   15630:	bgt	156bc <__assert_fail@plt+0x4388>
   15634:	beq	1564c <__assert_fail@plt+0x4318>
   15638:	movw	r4, #45974	; 0xb396
   1563c:	movt	r4, #1
   15640:	b	15654 <__assert_fail@plt+0x4320>
   15644:	ldr	r8, [sp, #16]
   15648:	ldr	r9, [sp, #8]
   1564c:	movw	r4, #45947	; 0xb37b
   15650:	movt	r4, #1
   15654:	ldr	r6, [fp, #12]
   15658:	mov	r0, #0
   1565c:	mov	r1, r4
   15660:	mov	r2, #5
   15664:	bl	11100 <dcgettext@plt>
   15668:	mov	r4, r0
   1566c:	mov	r0, #0
   15670:	mov	r1, #8
   15674:	mov	r2, r7
   15678:	bl	174ac <__assert_fail@plt+0x6178>
   1567c:	mov	r5, r0
   15680:	mov	r0, #1
   15684:	mov	r1, r9
   15688:	bl	17a6c <__assert_fail@plt+0x6738>
   1568c:	str	r0, [sp]
   15690:	mov	r0, #0
   15694:	mov	r1, #0
   15698:	mov	r2, r4
   1569c:	mov	r3, r5
   156a0:	bl	11178 <error@plt>
   156a4:	ldr	r2, [fp, #8]
   156a8:	mov	r0, sl
   156ac:	mov	r1, r8
   156b0:	bl	153ac <__assert_fail@plt+0x4078>
   156b4:	blx	r6
   156b8:	mvn	r6, #0
   156bc:	mov	r0, r6
   156c0:	sub	sp, fp, #28
   156c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156c8:	ldr	r8, [sp, #16]
   156cc:	ldr	sl, [sp, #4]
   156d0:	ldr	r9, [sp, #8]
   156d4:	mov	r6, r5
   156d8:	cmn	r6, #1
   156dc:	bgt	156bc <__assert_fail@plt+0x4388>
   156e0:	b	15634 <__assert_fail@plt+0x4300>
   156e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   156e8:	add	fp, sp, #24
   156ec:	ldr	r6, [r1]
   156f0:	cmp	r6, #0
   156f4:	beq	15758 <__assert_fail@plt+0x4424>
   156f8:	mov	r8, r1
   156fc:	mov	r7, r2
   15700:	mov	r1, r2
   15704:	mov	r2, r3
   15708:	mov	r4, r3
   1570c:	mov	r9, r0
   15710:	bl	111f0 <bcmp@plt>
   15714:	cmp	r0, #0
   15718:	beq	15750 <__assert_fail@plt+0x441c>
   1571c:	add	r7, r7, r4
   15720:	add	r5, r8, #4
   15724:	ldr	r6, [r5]
   15728:	cmp	r6, #0
   1572c:	beq	15758 <__assert_fail@plt+0x4424>
   15730:	mov	r0, r9
   15734:	mov	r1, r7
   15738:	mov	r2, r4
   1573c:	bl	111f0 <bcmp@plt>
   15740:	add	r7, r7, r4
   15744:	add	r5, r5, #4
   15748:	cmp	r0, #0
   1574c:	bne	15724 <__assert_fail@plt+0x43f0>
   15750:	mov	r0, r6
   15754:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15758:	mov	r6, #0
   1575c:	mov	r0, r6
   15760:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15764:	movw	r1, #49712	; 0xc230
   15768:	movt	r1, #2
   1576c:	str	r0, [r1]
   15770:	bx	lr
   15774:	movw	r1, #49716	; 0xc234
   15778:	movt	r1, #2
   1577c:	strb	r0, [r1]
   15780:	bx	lr
   15784:	push	{r4, r5, r6, sl, fp, lr}
   15788:	add	fp, sp, #16
   1578c:	sub	sp, sp, #8
   15790:	movw	r0, #49524	; 0xc174
   15794:	movt	r0, #2
   15798:	ldr	r0, [r0]
   1579c:	bl	19884 <__assert_fail@plt+0x8550>
   157a0:	cmp	r0, #0
   157a4:	beq	157cc <__assert_fail@plt+0x4498>
   157a8:	movw	r0, #49716	; 0xc234
   157ac:	movt	r0, #2
   157b0:	ldrb	r0, [r0]
   157b4:	cmp	r0, #0
   157b8:	beq	157ec <__assert_fail@plt+0x44b8>
   157bc:	bl	11214 <__errno_location@plt>
   157c0:	ldr	r0, [r0]
   157c4:	cmp	r0, #32
   157c8:	bne	157ec <__assert_fail@plt+0x44b8>
   157cc:	movw	r0, #49512	; 0xc168
   157d0:	movt	r0, #2
   157d4:	ldr	r0, [r0]
   157d8:	bl	19884 <__assert_fail@plt+0x8550>
   157dc:	cmp	r0, #0
   157e0:	subeq	sp, fp, #16
   157e4:	popeq	{r4, r5, r6, sl, fp, pc}
   157e8:	b	1585c <__assert_fail@plt+0x4528>
   157ec:	movw	r1, #44969	; 0xafa9
   157f0:	mov	r0, #0
   157f4:	mov	r2, #5
   157f8:	movt	r1, #1
   157fc:	bl	11100 <dcgettext@plt>
   15800:	mov	r4, r0
   15804:	movw	r0, #49712	; 0xc230
   15808:	movt	r0, #2
   1580c:	ldr	r6, [r0]
   15810:	bl	11214 <__errno_location@plt>
   15814:	ldr	r5, [r0]
   15818:	cmp	r6, #0
   1581c:	bne	15838 <__assert_fail@plt+0x4504>
   15820:	movw	r2, #46034	; 0xb3d2
   15824:	mov	r0, #0
   15828:	mov	r1, r5
   1582c:	mov	r3, r4
   15830:	movt	r2, #1
   15834:	b	15858 <__assert_fail@plt+0x4524>
   15838:	mov	r0, r6
   1583c:	bl	176f4 <__assert_fail@plt+0x63c0>
   15840:	movw	r2, #46037	; 0xb3d5
   15844:	mov	r3, r0
   15848:	str	r4, [sp]
   1584c:	mov	r0, #0
   15850:	mov	r1, r5
   15854:	movt	r2, #1
   15858:	bl	11178 <error@plt>
   1585c:	movw	r0, #49424	; 0xc110
   15860:	movt	r0, #2
   15864:	ldr	r0, [r0]
   15868:	bl	110c4 <_exit@plt>
   1586c:	andeq	r0, r0, r0
   15870:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15874:	add	fp, sp, #28
   15878:	sub	sp, sp, #4
   1587c:	vpush	{d8}
   15880:	sub	sp, sp, #40	; 0x28
   15884:	mov	sl, r0
   15888:	movw	r0, #11557	; 0x2d25
   1588c:	add	r8, sp, #29
   15890:	mov	r5, r1
   15894:	mov	r1, #43	; 0x2b
   15898:	mov	r9, r3
   1589c:	mov	r3, #32
   158a0:	vneg.f64	d17, d0
   158a4:	vcmpe.f64	d0, #0.0
   158a8:	vldr	d16, [pc, #264]	; 159b8 <__assert_fail@plt+0x4684>
   158ac:	tst	r2, #16
   158b0:	vmov.f64	d18, d0
   158b4:	mov	r6, #15
   158b8:	vmov.f64	d8, d0
   158bc:	strh	r0, [sp, #29]
   158c0:	and	r0, r2, #1
   158c4:	add	r0, r8, r0
   158c8:	strb	r1, [r0, #1]!
   158cc:	ubfx	r1, r2, #1, #1
   158d0:	strb	r3, [r0, r1]!
   158d4:	ubfx	r1, r2, #2, #1
   158d8:	mov	r3, #48	; 0x30
   158dc:	strb	r3, [r0, r1]!
   158e0:	ubfx	r1, r2, #3, #1
   158e4:	movw	r3, #11818	; 0x2e2a
   158e8:	mov	r2, #1
   158ec:	strh	r3, [r0, r1]!
   158f0:	mov	r1, #0
   158f4:	mvn	r3, #0
   158f8:	strb	r1, [r0, #4]
   158fc:	mov	r1, #71	; 0x47
   15900:	movweq	r1, #103	; 0x67
   15904:	vmrs	APSR_nzcv, fpscr
   15908:	vmovmi.f64	d18, d17
   1590c:	strb	r1, [r0, #3]
   15910:	mov	r1, #42	; 0x2a
   15914:	strb	r1, [r0, #2]
   15918:	mov	r0, sl
   1591c:	mov	r1, r5
   15920:	vstr	d0, [sp, #16]
   15924:	stm	sp, {r8, r9}
   15928:	vcmpe.f64	d18, d16
   1592c:	vmrs	APSR_nzcv, fpscr
   15930:	movwmi	r6, #1
   15934:	str	r6, [sp, #8]
   15938:	bl	11328 <__snprintf_chk@plt>
   1593c:	mov	r7, r0
   15940:	cmp	r0, #0
   15944:	bmi	159a4 <__assert_fail@plt+0x4670>
   15948:	cmp	r7, r5
   1594c:	bcs	15968 <__assert_fail@plt+0x4634>
   15950:	mov	r0, sl
   15954:	mov	r1, #0
   15958:	bl	11268 <strtod@plt>
   1595c:	vcmp.f64	d0, d8
   15960:	vmrs	APSR_nzcv, fpscr
   15964:	beq	159a4 <__assert_fail@plt+0x4670>
   15968:	add	r4, r6, #1
   1596c:	mov	r0, sl
   15970:	mov	r1, r5
   15974:	mov	r2, #1
   15978:	mvn	r3, #0
   1597c:	vstr	d8, [sp, #16]
   15980:	stm	sp, {r8, r9}
   15984:	str	r4, [sp, #8]
   15988:	bl	11328 <__snprintf_chk@plt>
   1598c:	mov	r7, r0
   15990:	cmp	r6, #15
   15994:	bhi	159a4 <__assert_fail@plt+0x4670>
   15998:	cmn	r7, #1
   1599c:	mov	r6, r4
   159a0:	bgt	15948 <__assert_fail@plt+0x4614>
   159a4:	mov	r0, r7
   159a8:	sub	sp, fp, #40	; 0x28
   159ac:	vpop	{d8}
   159b0:	add	sp, sp, #4
   159b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159b8:	andeq	r0, r0, r0
   159bc:	andseq	r0, r0, r0
   159c0:	push	{r4, r5, r6, sl, fp, lr}
   159c4:	add	fp, sp, #16
   159c8:	sub	sp, sp, #8
   159cc:	mov	r4, r0
   159d0:	bl	11274 <fileno@plt>
   159d4:	cmn	r0, #1
   159d8:	ble	15a4c <__assert_fail@plt+0x4718>
   159dc:	mov	r0, r4
   159e0:	bl	111b4 <__freading@plt>
   159e4:	cmp	r0, #0
   159e8:	beq	15a14 <__assert_fail@plt+0x46e0>
   159ec:	mov	r0, r4
   159f0:	bl	11274 <fileno@plt>
   159f4:	mov	r1, #1
   159f8:	mov	r2, #0
   159fc:	mov	r3, #0
   15a00:	str	r1, [sp]
   15a04:	bl	11148 <lseek64@plt>
   15a08:	and	r0, r0, r1
   15a0c:	cmn	r0, #1
   15a10:	beq	15a4c <__assert_fail@plt+0x4718>
   15a14:	mov	r0, r4
   15a18:	bl	15a5c <__assert_fail@plt+0x4728>
   15a1c:	cmp	r0, #0
   15a20:	beq	15a4c <__assert_fail@plt+0x4718>
   15a24:	bl	11214 <__errno_location@plt>
   15a28:	ldr	r6, [r0]
   15a2c:	mov	r5, r0
   15a30:	mov	r0, r4
   15a34:	bl	1128c <fclose@plt>
   15a38:	cmp	r6, #0
   15a3c:	strne	r6, [r5]
   15a40:	mvnne	r0, #0
   15a44:	sub	sp, fp, #16
   15a48:	pop	{r4, r5, r6, sl, fp, pc}
   15a4c:	mov	r0, r4
   15a50:	sub	sp, fp, #16
   15a54:	pop	{r4, r5, r6, sl, fp, lr}
   15a58:	b	1128c <fclose@plt>
   15a5c:	push	{r4, sl, fp, lr}
   15a60:	add	fp, sp, #8
   15a64:	sub	sp, sp, #8
   15a68:	mov	r4, r0
   15a6c:	cmp	r0, #0
   15a70:	beq	15aa8 <__assert_fail@plt+0x4774>
   15a74:	mov	r0, r4
   15a78:	bl	111b4 <__freading@plt>
   15a7c:	cmp	r0, #0
   15a80:	beq	15aa8 <__assert_fail@plt+0x4774>
   15a84:	ldrb	r0, [r4, #1]
   15a88:	tst	r0, #1
   15a8c:	beq	15aa8 <__assert_fail@plt+0x4774>
   15a90:	mov	r0, #1
   15a94:	mov	r2, #0
   15a98:	mov	r3, #0
   15a9c:	str	r0, [sp]
   15aa0:	mov	r0, r4
   15aa4:	bl	15ae0 <__assert_fail@plt+0x47ac>
   15aa8:	mov	r0, r4
   15aac:	sub	sp, fp, #8
   15ab0:	pop	{r4, sl, fp, lr}
   15ab4:	b	110a0 <fflush@plt>
   15ab8:	push	{r4, r5, r6, sl, fp, lr}
   15abc:	add	fp, sp, #16
   15ac0:	mov	r4, r0
   15ac4:	bl	11214 <__errno_location@plt>
   15ac8:	ldr	r6, [r0]
   15acc:	mov	r5, r0
   15ad0:	mov	r0, r4
   15ad4:	bl	110ac <free@plt>
   15ad8:	str	r6, [r5]
   15adc:	pop	{r4, r5, r6, sl, fp, pc}
   15ae0:	push	{r4, r5, r6, r7, fp, lr}
   15ae4:	add	fp, sp, #16
   15ae8:	sub	sp, sp, #8
   15aec:	mov	r4, r0
   15af0:	ldr	r0, [r0, #4]
   15af4:	mov	r5, r3
   15af8:	mov	r6, r2
   15afc:	ldr	r1, [r4, #8]
   15b00:	cmp	r1, r0
   15b04:	bne	15b20 <__assert_fail@plt+0x47ec>
   15b08:	ldrd	r0, [r4, #16]
   15b0c:	cmp	r1, r0
   15b10:	bne	15b20 <__assert_fail@plt+0x47ec>
   15b14:	ldr	r0, [r4, #36]	; 0x24
   15b18:	cmp	r0, #0
   15b1c:	beq	15b38 <__assert_fail@plt+0x4804>
   15b20:	mov	r0, r4
   15b24:	mov	r2, r6
   15b28:	mov	r3, r5
   15b2c:	sub	sp, fp, #16
   15b30:	pop	{r4, r5, r6, r7, fp, lr}
   15b34:	b	11298 <fseeko64@plt>
   15b38:	ldr	r7, [fp, #8]
   15b3c:	mov	r0, r4
   15b40:	bl	11274 <fileno@plt>
   15b44:	mov	r2, r6
   15b48:	mov	r3, r5
   15b4c:	str	r7, [sp]
   15b50:	bl	11148 <lseek64@plt>
   15b54:	and	r2, r0, r1
   15b58:	cmn	r2, #1
   15b5c:	beq	15b7c <__assert_fail@plt+0x4848>
   15b60:	strd	r0, [r4, #80]	; 0x50
   15b64:	ldr	r0, [r4]
   15b68:	bic	r0, r0, #16
   15b6c:	str	r0, [r4]
   15b70:	mov	r0, #0
   15b74:	sub	sp, fp, #16
   15b78:	pop	{r4, r5, r6, r7, fp, pc}
   15b7c:	mvn	r0, #0
   15b80:	sub	sp, fp, #16
   15b84:	pop	{r4, r5, r6, r7, fp, pc}
   15b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b8c:	add	fp, sp, #28
   15b90:	sub	sp, sp, #4
   15b94:	vpush	{d8-d9}
   15b98:	sub	sp, sp, #40	; 0x28
   15b9c:	mov	sl, r0
   15ba0:	movw	r0, #11557	; 0x2d25
   15ba4:	vmov.f32	s16, s0
   15ba8:	add	r8, sp, #29
   15bac:	mov	r5, r1
   15bb0:	mov	r1, #43	; 0x2b
   15bb4:	mov	r9, r3
   15bb8:	mov	r3, #32
   15bbc:	vcvt.f64.f32	d9, s0
   15bc0:	vldr	s0, [pc, #268]	; 15cd4 <__assert_fail@plt+0x49a0>
   15bc4:	tst	r2, #16
   15bc8:	mov	r6, #6
   15bcc:	strh	r0, [sp, #29]
   15bd0:	and	r0, r2, #1
   15bd4:	add	r0, r8, r0
   15bd8:	strb	r1, [r0, #1]!
   15bdc:	ubfx	r1, r2, #1, #1
   15be0:	vneg.f32	s2, s16
   15be4:	vcmpe.f32	s16, #0.0
   15be8:	vmov.f32	s4, s16
   15bec:	strb	r3, [r0, r1]!
   15bf0:	ubfx	r1, r2, #2, #1
   15bf4:	mov	r3, #48	; 0x30
   15bf8:	strb	r3, [r0, r1]!
   15bfc:	ubfx	r1, r2, #3, #1
   15c00:	movw	r3, #11818	; 0x2e2a
   15c04:	mov	r2, #1
   15c08:	strh	r3, [r0, r1]!
   15c0c:	mov	r1, #0
   15c10:	mvn	r3, #0
   15c14:	strb	r1, [r0, #4]
   15c18:	mov	r1, #71	; 0x47
   15c1c:	movweq	r1, #103	; 0x67
   15c20:	vmrs	APSR_nzcv, fpscr
   15c24:	vmovmi.f32	s4, s2
   15c28:	strb	r1, [r0, #3]
   15c2c:	mov	r1, #42	; 0x2a
   15c30:	strb	r1, [r0, #2]
   15c34:	mov	r0, sl
   15c38:	mov	r1, r5
   15c3c:	vstr	d9, [sp, #16]
   15c40:	stm	sp, {r8, r9}
   15c44:	vcmpe.f32	s4, s0
   15c48:	vmrs	APSR_nzcv, fpscr
   15c4c:	movwmi	r6, #1
   15c50:	str	r6, [sp, #8]
   15c54:	bl	11328 <__snprintf_chk@plt>
   15c58:	mov	r7, r0
   15c5c:	cmp	r0, #0
   15c60:	bmi	15cc0 <__assert_fail@plt+0x498c>
   15c64:	cmp	r7, r5
   15c68:	bcs	15c84 <__assert_fail@plt+0x4950>
   15c6c:	mov	r0, sl
   15c70:	mov	r1, #0
   15c74:	bl	11184 <strtof@plt>
   15c78:	vcmp.f32	s0, s16
   15c7c:	vmrs	APSR_nzcv, fpscr
   15c80:	beq	15cc0 <__assert_fail@plt+0x498c>
   15c84:	add	r4, r6, #1
   15c88:	mov	r0, sl
   15c8c:	mov	r1, r5
   15c90:	mov	r2, #1
   15c94:	mvn	r3, #0
   15c98:	vstr	d9, [sp, #16]
   15c9c:	stm	sp, {r8, r9}
   15ca0:	str	r4, [sp, #8]
   15ca4:	bl	11328 <__snprintf_chk@plt>
   15ca8:	mov	r7, r0
   15cac:	cmp	r6, #7
   15cb0:	bhi	15cc0 <__assert_fail@plt+0x498c>
   15cb4:	cmn	r7, #1
   15cb8:	mov	r6, r4
   15cbc:	bgt	15c64 <__assert_fail@plt+0x4930>
   15cc0:	mov	r0, r7
   15cc4:	sub	sp, fp, #48	; 0x30
   15cc8:	vpop	{d8-d9}
   15ccc:	add	sp, sp, #4
   15cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15cd4:	addeq	r0, r0, r0
   15cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cdc:	add	fp, sp, #28
   15ce0:	sub	sp, sp, #4
   15ce4:	vpush	{d8}
   15ce8:	sub	sp, sp, #40	; 0x28
   15cec:	mov	sl, r0
   15cf0:	movw	r0, #11557	; 0x2d25
   15cf4:	add	r8, sp, #29
   15cf8:	mov	r5, r1
   15cfc:	mov	r1, #43	; 0x2b
   15d00:	mov	r9, r3
   15d04:	mov	r3, #32
   15d08:	vneg.f64	d17, d0
   15d0c:	vcmpe.f64	d0, #0.0
   15d10:	vldr	d16, [pc, #264]	; 15e20 <__assert_fail@plt+0x4aec>
   15d14:	tst	r2, #16
   15d18:	vmov.f64	d18, d0
   15d1c:	mov	r6, #15
   15d20:	vmov.f64	d8, d0
   15d24:	strh	r0, [sp, #29]
   15d28:	and	r0, r2, #1
   15d2c:	add	r0, r8, r0
   15d30:	strb	r1, [r0, #1]!
   15d34:	ubfx	r1, r2, #1, #1
   15d38:	strb	r3, [r0, r1]!
   15d3c:	ubfx	r1, r2, #2, #1
   15d40:	mov	r3, #48	; 0x30
   15d44:	strb	r3, [r0, r1]!
   15d48:	movw	r3, #11818	; 0x2e2a
   15d4c:	ubfx	r1, r2, #3, #1
   15d50:	mov	r2, #1
   15d54:	movt	r3, #19498	; 0x4c2a
   15d58:	str	r3, [r0, r1]!
   15d5c:	mov	r1, #0
   15d60:	mvn	r3, #0
   15d64:	strb	r1, [r0, #5]
   15d68:	mov	r1, #71	; 0x47
   15d6c:	movweq	r1, #103	; 0x67
   15d70:	vmrs	APSR_nzcv, fpscr
   15d74:	vmovmi.f64	d18, d17
   15d78:	strb	r1, [r0, #4]
   15d7c:	mov	r0, sl
   15d80:	mov	r1, r5
   15d84:	vstr	d0, [sp, #16]
   15d88:	stm	sp, {r8, r9}
   15d8c:	vcmpe.f64	d18, d16
   15d90:	vmrs	APSR_nzcv, fpscr
   15d94:	movwmi	r6, #1
   15d98:	str	r6, [sp, #8]
   15d9c:	bl	11328 <__snprintf_chk@plt>
   15da0:	mov	r7, r0
   15da4:	cmp	r0, #0
   15da8:	bmi	15e08 <__assert_fail@plt+0x4ad4>
   15dac:	cmp	r7, r5
   15db0:	bcs	15dcc <__assert_fail@plt+0x4a98>
   15db4:	mov	r0, sl
   15db8:	mov	r1, #0
   15dbc:	bl	110f4 <strtold@plt>
   15dc0:	vcmp.f64	d0, d8
   15dc4:	vmrs	APSR_nzcv, fpscr
   15dc8:	beq	15e08 <__assert_fail@plt+0x4ad4>
   15dcc:	add	r4, r6, #1
   15dd0:	mov	r0, sl
   15dd4:	mov	r1, r5
   15dd8:	mov	r2, #1
   15ddc:	mvn	r3, #0
   15de0:	vstr	d8, [sp, #16]
   15de4:	stm	sp, {r8, r9}
   15de8:	str	r4, [sp, #8]
   15dec:	bl	11328 <__snprintf_chk@plt>
   15df0:	mov	r7, r0
   15df4:	cmp	r6, #15
   15df8:	bhi	15e08 <__assert_fail@plt+0x4ad4>
   15dfc:	cmn	r7, #1
   15e00:	mov	r6, r4
   15e04:	bgt	15dac <__assert_fail@plt+0x4a78>
   15e08:	mov	r0, r7
   15e0c:	sub	sp, fp, #40	; 0x28
   15e10:	vpop	{d8}
   15e14:	add	sp, sp, #4
   15e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e1c:	nop	{0}
   15e20:	andeq	r0, r0, r0
   15e24:	andseq	r0, r0, r0
   15e28:	push	{r4, r5, fp, lr}
   15e2c:	add	fp, sp, #8
   15e30:	cmp	r0, #0
   15e34:	beq	15ec8 <__assert_fail@plt+0x4b94>
   15e38:	mov	r1, #47	; 0x2f
   15e3c:	mov	r4, r0
   15e40:	bl	112bc <strrchr@plt>
   15e44:	cmp	r0, #0
   15e48:	mov	r5, r4
   15e4c:	addne	r5, r0, #1
   15e50:	sub	r0, r5, r4
   15e54:	cmp	r0, #7
   15e58:	blt	15eac <__assert_fail@plt+0x4b78>
   15e5c:	movw	r1, #46100	; 0xb414
   15e60:	sub	r0, r5, #7
   15e64:	mov	r2, #7
   15e68:	movt	r1, #1
   15e6c:	bl	11310 <strncmp@plt>
   15e70:	cmp	r0, #0
   15e74:	bne	15eac <__assert_fail@plt+0x4b78>
   15e78:	movw	r1, #46108	; 0xb41c
   15e7c:	mov	r0, r5
   15e80:	mov	r2, #3
   15e84:	movt	r1, #1
   15e88:	bl	11310 <strncmp@plt>
   15e8c:	cmp	r0, #0
   15e90:	beq	15e9c <__assert_fail@plt+0x4b68>
   15e94:	mov	r4, r5
   15e98:	b	15eac <__assert_fail@plt+0x4b78>
   15e9c:	movw	r0, #49496	; 0xc158
   15ea0:	add	r4, r5, #3
   15ea4:	movt	r0, #2
   15ea8:	str	r4, [r0]
   15eac:	movw	r0, #49500	; 0xc15c
   15eb0:	movt	r0, #2
   15eb4:	str	r4, [r0]
   15eb8:	movw	r0, #49720	; 0xc238
   15ebc:	movt	r0, #2
   15ec0:	str	r4, [r0]
   15ec4:	pop	{r4, r5, fp, pc}
   15ec8:	movw	r0, #49512	; 0xc168
   15ecc:	mov	r1, #55	; 0x37
   15ed0:	mov	r2, #1
   15ed4:	movt	r0, #2
   15ed8:	ldr	r3, [r0]
   15edc:	movw	r0, #46044	; 0xb3dc
   15ee0:	movt	r0, #1
   15ee4:	bl	1113c <fwrite@plt>
   15ee8:	bl	1131c <abort@plt>
   15eec:	push	{r4, r5, r6, sl, fp, lr}
   15ef0:	add	fp, sp, #16
   15ef4:	mov	r4, r0
   15ef8:	movw	r0, #49728	; 0xc240
   15efc:	movt	r0, #2
   15f00:	cmp	r4, #0
   15f04:	moveq	r4, r0
   15f08:	bl	11214 <__errno_location@plt>
   15f0c:	ldr	r6, [r0]
   15f10:	mov	r5, r0
   15f14:	mov	r0, r4
   15f18:	mov	r1, #48	; 0x30
   15f1c:	bl	186e0 <__assert_fail@plt+0x73ac>
   15f20:	str	r6, [r5]
   15f24:	pop	{r4, r5, r6, sl, fp, pc}
   15f28:	movw	r1, #49728	; 0xc240
   15f2c:	cmp	r0, #0
   15f30:	movt	r1, #2
   15f34:	movne	r1, r0
   15f38:	ldr	r0, [r1]
   15f3c:	bx	lr
   15f40:	movw	r2, #49728	; 0xc240
   15f44:	cmp	r0, #0
   15f48:	movt	r2, #2
   15f4c:	movne	r2, r0
   15f50:	str	r1, [r2]
   15f54:	bx	lr
   15f58:	movw	r3, #49728	; 0xc240
   15f5c:	cmp	r0, #0
   15f60:	and	r2, r2, #1
   15f64:	movt	r3, #2
   15f68:	movne	r3, r0
   15f6c:	ubfx	r0, r1, #5, #3
   15f70:	and	r1, r1, #31
   15f74:	add	ip, r3, r0, lsl #2
   15f78:	mov	r0, #1
   15f7c:	ldr	r3, [ip, #8]
   15f80:	and	r0, r0, r3, lsr r1
   15f84:	eor	r2, r0, r2
   15f88:	eor	r1, r3, r2, lsl r1
   15f8c:	str	r1, [ip, #8]
   15f90:	bx	lr
   15f94:	movw	r2, #49728	; 0xc240
   15f98:	cmp	r0, #0
   15f9c:	movt	r2, #2
   15fa0:	movne	r2, r0
   15fa4:	ldr	r0, [r2, #4]
   15fa8:	str	r1, [r2, #4]
   15fac:	bx	lr
   15fb0:	push	{fp, lr}
   15fb4:	mov	fp, sp
   15fb8:	movw	r3, #49728	; 0xc240
   15fbc:	cmp	r0, #0
   15fc0:	movt	r3, #2
   15fc4:	movne	r3, r0
   15fc8:	cmp	r1, #0
   15fcc:	mov	r0, #10
   15fd0:	cmpne	r2, #0
   15fd4:	str	r0, [r3]
   15fd8:	bne	15fe0 <__assert_fail@plt+0x4cac>
   15fdc:	bl	1131c <abort@plt>
   15fe0:	str	r1, [r3, #40]	; 0x28
   15fe4:	str	r2, [r3, #44]	; 0x2c
   15fe8:	pop	{fp, pc}
   15fec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ff0:	add	fp, sp, #28
   15ff4:	sub	sp, sp, #20
   15ff8:	mov	r7, r0
   15ffc:	ldr	r0, [fp, #8]
   16000:	movw	r5, #49728	; 0xc240
   16004:	mov	r8, r3
   16008:	mov	r9, r2
   1600c:	mov	sl, r1
   16010:	movt	r5, #2
   16014:	cmp	r0, #0
   16018:	movne	r5, r0
   1601c:	bl	11214 <__errno_location@plt>
   16020:	ldr	r2, [r5, #40]	; 0x28
   16024:	ldr	r3, [r5, #44]	; 0x2c
   16028:	mov	r4, r0
   1602c:	ldm	r5, {r0, r1}
   16030:	add	r5, r5, #8
   16034:	ldr	r6, [r4]
   16038:	stm	sp, {r0, r1, r5}
   1603c:	mov	r0, r7
   16040:	mov	r1, sl
   16044:	str	r2, [sp, #12]
   16048:	str	r3, [sp, #16]
   1604c:	mov	r2, r9
   16050:	mov	r3, r8
   16054:	bl	16064 <__assert_fail@plt+0x4d30>
   16058:	str	r6, [r4]
   1605c:	sub	sp, fp, #28
   16060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16064:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16068:	add	fp, sp, #28
   1606c:	sub	sp, sp, #156	; 0x9c
   16070:	mov	r5, r0
   16074:	add	r0, r2, #1
   16078:	mov	r6, r1
   1607c:	mov	sl, r3
   16080:	str	r2, [fp, #-80]	; 0xffffffb0
   16084:	str	r0, [sp, #72]	; 0x48
   16088:	ldr	r0, [fp, #12]
   1608c:	and	r1, r0, #1
   16090:	str	r1, [sp, #36]	; 0x24
   16094:	and	r1, r0, #4
   16098:	str	r1, [sp, #32]
   1609c:	ubfx	r9, r0, #1, #1
   160a0:	bl	11154 <__ctype_get_mb_cur_max@plt>
   160a4:	str	r0, [sp, #40]	; 0x28
   160a8:	ldr	r0, [fp, #24]
   160ac:	ldr	r7, [fp, #8]
   160b0:	mov	r1, #0
   160b4:	str	r5, [fp, #-84]	; 0xffffffac
   160b8:	str	r1, [fp, #-56]	; 0xffffffc8
   160bc:	mov	r1, #0
   160c0:	str	r1, [sp, #60]	; 0x3c
   160c4:	mov	r1, #1
   160c8:	str	r1, [fp, #-48]	; 0xffffffd0
   160cc:	str	r0, [sp, #80]	; 0x50
   160d0:	ldr	r0, [fp, #20]
   160d4:	str	r0, [sp, #76]	; 0x4c
   160d8:	mov	r0, #0
   160dc:	str	r0, [sp, #56]	; 0x38
   160e0:	mov	r0, #0
   160e4:	str	r0, [fp, #-88]	; 0xffffffa8
   160e8:	mov	r0, #0
   160ec:	str	r0, [fp, #-72]	; 0xffffffb8
   160f0:	mov	r0, #0
   160f4:	cmp	r7, #10
   160f8:	bhi	1708c <__assert_fail@plt+0x5d58>
   160fc:	add	r1, pc, #24
   16100:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16104:	mov	r4, r6
   16108:	mov	r8, #0
   1610c:	mov	r2, #1
   16110:	mov	r3, #0
   16114:	mov	lr, sl
   16118:	ldr	pc, [r1, r7, lsl #2]
   1611c:	andeq	r6, r1, r0, ror #3
   16120:	andeq	r6, r1, r4, lsr r2
   16124:	strdeq	r6, [r1], -r4
   16128:	ldrdeq	r6, [r1], -r8
   1612c:	andeq	r6, r1, r8, lsr #4
   16130:	andeq	r6, r1, ip, asr r2
   16134:	andeq	r6, r1, r4, lsl #4
   16138:	andeq	r6, r1, r0, ror #5
   1613c:	andeq	r6, r1, r8, asr #2
   16140:	andeq	r6, r1, r8, asr #2
   16144:	andeq	r6, r1, r0, ror r1
   16148:	movw	r0, #46190	; 0xb46e
   1614c:	mov	r1, r7
   16150:	movt	r0, #1
   16154:	bl	17a94 <__assert_fail@plt+0x6760>
   16158:	str	r0, [sp, #76]	; 0x4c
   1615c:	movw	r0, #47153	; 0xb831
   16160:	mov	r1, r7
   16164:	movt	r0, #1
   16168:	bl	17a94 <__assert_fail@plt+0x6760>
   1616c:	str	r0, [sp, #80]	; 0x50
   16170:	mov	r8, #0
   16174:	tst	r9, #1
   16178:	bne	161b0 <__assert_fail@plt+0x4e7c>
   1617c:	ldr	r0, [sp, #76]	; 0x4c
   16180:	ldrb	r0, [r0]
   16184:	cmp	r0, #0
   16188:	beq	161b0 <__assert_fail@plt+0x4e7c>
   1618c:	ldr	r1, [sp, #76]	; 0x4c
   16190:	mov	r8, #0
   16194:	add	r1, r1, #1
   16198:	cmp	r8, r4
   1619c:	strbcc	r0, [r5, r8]
   161a0:	ldrb	r0, [r1, r8]
   161a4:	add	r8, r8, #1
   161a8:	cmp	r0, #0
   161ac:	bne	16198 <__assert_fail@plt+0x4e64>
   161b0:	ldr	r6, [sp, #80]	; 0x50
   161b4:	mov	r0, r6
   161b8:	bl	111fc <strlen@plt>
   161bc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   161c0:	str	r0, [fp, #-72]	; 0xffffffb8
   161c4:	str	r6, [fp, #-88]	; 0xffffffa8
   161c8:	mov	r2, #1
   161cc:	mov	r3, r9
   161d0:	mov	lr, sl
   161d4:	b	162e0 <__assert_fail@plt+0x4fac>
   161d8:	mov	r0, #1
   161dc:	b	16234 <__assert_fail@plt+0x4f00>
   161e0:	mov	r7, #0
   161e4:	mov	r8, #0
   161e8:	mov	r2, r0
   161ec:	mov	r3, #0
   161f0:	b	162e0 <__assert_fail@plt+0x4fac>
   161f4:	tst	r9, #1
   161f8:	bne	16234 <__assert_fail@plt+0x4f00>
   161fc:	mov	r2, r0
   16200:	b	1628c <__assert_fail@plt+0x4f58>
   16204:	mov	r0, #1
   16208:	mov	r8, #0
   1620c:	mov	r7, #5
   16210:	mov	r2, #1
   16214:	str	r0, [fp, #-72]	; 0xffffffb8
   16218:	movw	r0, #46188	; 0xb46c
   1621c:	movt	r0, #1
   16220:	str	r0, [fp, #-88]	; 0xffffffa8
   16224:	b	16254 <__assert_fail@plt+0x4f20>
   16228:	mov	r2, #1
   1622c:	tst	r9, #1
   16230:	beq	1628c <__assert_fail@plt+0x4f58>
   16234:	mov	r1, #1
   16238:	mov	r8, #0
   1623c:	mov	r7, #2
   16240:	mov	r2, r0
   16244:	str	r1, [fp, #-72]	; 0xffffffb8
   16248:	movw	r1, #47153	; 0xb831
   1624c:	movt	r1, #1
   16250:	str	r1, [fp, #-88]	; 0xffffffa8
   16254:	mov	r3, #1
   16258:	b	162e0 <__assert_fail@plt+0x4fac>
   1625c:	tst	r9, #1
   16260:	beq	162b0 <__assert_fail@plt+0x4f7c>
   16264:	mov	r0, #1
   16268:	mov	r8, #0
   1626c:	mov	r2, #1
   16270:	mov	r3, #1
   16274:	mov	r7, #5
   16278:	str	r0, [fp, #-72]	; 0xffffffb8
   1627c:	movw	r0, #46188	; 0xb46c
   16280:	movt	r0, #1
   16284:	str	r0, [fp, #-88]	; 0xffffffa8
   16288:	b	162e0 <__assert_fail@plt+0x4fac>
   1628c:	cmp	r4, #0
   16290:	mov	r8, #1
   16294:	mov	r3, #0
   16298:	mov	r7, #2
   1629c:	movne	r0, #39	; 0x27
   162a0:	strbne	r0, [r5]
   162a4:	movw	r0, #47153	; 0xb831
   162a8:	movt	r0, #1
   162ac:	b	162d4 <__assert_fail@plt+0x4fa0>
   162b0:	cmp	r4, #0
   162b4:	mov	r8, #1
   162b8:	mov	r2, #1
   162bc:	mov	r7, #5
   162c0:	mov	r3, #0
   162c4:	movne	r0, #34	; 0x22
   162c8:	strbne	r0, [r5]
   162cc:	movw	r0, #46188	; 0xb46c
   162d0:	movt	r0, #1
   162d4:	str	r0, [fp, #-88]	; 0xffffffa8
   162d8:	mov	r0, #1
   162dc:	str	r0, [fp, #-72]	; 0xffffffb8
   162e0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   162e4:	eor	r6, r3, #1
   162e8:	str	r7, [fp, #-68]	; 0xffffffbc
   162ec:	str	r3, [fp, #-76]	; 0xffffffb4
   162f0:	str	r2, [sp, #84]	; 0x54
   162f4:	str	r6, [sp, #92]	; 0x5c
   162f8:	cmp	r0, #0
   162fc:	movwne	r0, #1
   16300:	and	r1, r0, r3
   16304:	and	r1, r2, r1
   16308:	str	r1, [sp, #48]	; 0x30
   1630c:	sub	r1, r7, #2
   16310:	clz	r1, r1
   16314:	lsr	r1, r1, #5
   16318:	and	r1, r1, r3
   1631c:	str	r1, [sp, #64]	; 0x40
   16320:	subs	r1, r7, #2
   16324:	mov	r7, #0
   16328:	movwne	r1, #1
   1632c:	orr	r6, r1, r6
   16330:	and	r1, r1, r2
   16334:	and	r0, r0, r1
   16338:	str	r6, [sp, #68]	; 0x44
   1633c:	str	r0, [fp, #-60]	; 0xffffffc4
   16340:	orr	r0, r1, r3
   16344:	ldr	r1, [fp, #16]
   16348:	eor	r0, r0, #1
   1634c:	clz	r1, r1
   16350:	lsr	r1, r1, #5
   16354:	orr	r0, r1, r0
   16358:	str	r0, [fp, #-64]	; 0xffffffc0
   1635c:	eor	r0, r2, #1
   16360:	str	r0, [sp, #52]	; 0x34
   16364:	cmn	lr, #1
   16368:	beq	16378 <__assert_fail@plt+0x5044>
   1636c:	cmp	r7, lr
   16370:	bne	16384 <__assert_fail@plt+0x5050>
   16374:	b	16ecc <__assert_fail@plt+0x5b98>
   16378:	ldrb	r0, [ip, r7]
   1637c:	cmp	r0, #0
   16380:	beq	16ed4 <__assert_fail@plt+0x5ba0>
   16384:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16388:	mov	sl, #0
   1638c:	cmp	r0, #0
   16390:	beq	163c8 <__assert_fail@plt+0x5094>
   16394:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16398:	add	r5, r7, r0
   1639c:	cmp	r0, #2
   163a0:	bcc	163bc <__assert_fail@plt+0x5088>
   163a4:	cmn	lr, #1
   163a8:	bne	163bc <__assert_fail@plt+0x5088>
   163ac:	mov	r0, ip
   163b0:	bl	111fc <strlen@plt>
   163b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   163b8:	mov	lr, r0
   163bc:	cmp	r5, lr
   163c0:	bls	163d0 <__assert_fail@plt+0x509c>
   163c4:	ldr	r5, [fp, #-84]	; 0xffffffac
   163c8:	mov	r0, #0
   163cc:	b	1641c <__assert_fail@plt+0x50e8>
   163d0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   163d4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   163d8:	add	r0, ip, r7
   163dc:	mov	r6, r4
   163e0:	mov	r4, lr
   163e4:	bl	111f0 <bcmp@plt>
   163e8:	ldr	r2, [sp, #92]	; 0x5c
   163ec:	cmp	r0, #0
   163f0:	ldr	r5, [fp, #-84]	; 0xffffffac
   163f4:	mov	r1, r0
   163f8:	movwne	r1, #1
   163fc:	orr	r1, r1, r2
   16400:	tst	r1, #1
   16404:	beq	16f5c <__assert_fail@plt+0x5c28>
   16408:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1640c:	clz	r0, r0
   16410:	mov	lr, r4
   16414:	mov	r4, r6
   16418:	lsr	r0, r0, #5
   1641c:	str	r0, [fp, #-52]	; 0xffffffcc
   16420:	ldrb	r6, [ip, r7]
   16424:	cmp	r6, #126	; 0x7e
   16428:	bhi	16958 <__assert_fail@plt+0x5624>
   1642c:	add	r3, pc, #16
   16430:	mov	r9, #1
   16434:	mov	r2, #110	; 0x6e
   16438:	mov	r0, #97	; 0x61
   1643c:	mov	r1, #0
   16440:	ldr	pc, [r3, r6, lsl #2]
   16444:			; <UNDEFINED> instruction: 0x000167b8
   16448:	andeq	r6, r1, r8, asr r9
   1644c:	andeq	r6, r1, r8, asr r9
   16450:	andeq	r6, r1, r8, asr r9
   16454:	andeq	r6, r1, r8, asr r9
   16458:	andeq	r6, r1, r8, asr r9
   1645c:	andeq	r6, r1, r8, asr r9
   16460:	andeq	r6, r1, r4, lsr sl
   16464:	muleq	r1, r8, r7
   16468:	muleq	r1, r0, r7
   1646c:	andeq	r6, r1, r4, lsr #15
   16470:	andeq	r6, r1, r0, asr #17
   16474:	andeq	r6, r1, r8, lsl #15
   16478:	andeq	r6, r1, r0, lsr #15
   1647c:	andeq	r6, r1, r8, asr r9
   16480:	andeq	r6, r1, r8, asr r9
   16484:	andeq	r6, r1, r8, asr r9
   16488:	andeq	r6, r1, r8, asr r9
   1648c:	andeq	r6, r1, r8, asr r9
   16490:	andeq	r6, r1, r8, asr r9
   16494:	andeq	r6, r1, r8, asr r9
   16498:	andeq	r6, r1, r8, asr r9
   1649c:	andeq	r6, r1, r8, asr r9
   164a0:	andeq	r6, r1, r8, asr r9
   164a4:	andeq	r6, r1, r8, asr r9
   164a8:	andeq	r6, r1, r8, asr r9
   164ac:	andeq	r6, r1, r8, asr r9
   164b0:	andeq	r6, r1, r8, asr r9
   164b4:	andeq	r6, r1, r8, asr r9
   164b8:	andeq	r6, r1, r8, asr r9
   164bc:	andeq	r6, r1, r8, asr r9
   164c0:	andeq	r6, r1, r8, asr r9
   164c4:	andeq	r6, r1, ip, lsr r7
   164c8:	andeq	r6, r1, r0, asr #14
   164cc:	andeq	r6, r1, r0, asr #14
   164d0:	andeq	r6, r1, r8, lsr #14
   164d4:	andeq	r6, r1, r0, asr #14
   164d8:	andeq	r6, r1, r0, asr #12
   164dc:	andeq	r6, r1, r0, asr #14
   164e0:	andeq	r6, r1, r8, asr #17
   164e4:	andeq	r6, r1, r0, asr #14
   164e8:	andeq	r6, r1, r0, asr #14
   164ec:	andeq	r6, r1, r0, asr #14
   164f0:	andeq	r6, r1, r0, asr #12
   164f4:	andeq	r6, r1, r0, asr #12
   164f8:	andeq	r6, r1, r0, asr #12
   164fc:	andeq	r6, r1, r0, asr #12
   16500:	andeq	r6, r1, r0, asr #12
   16504:	andeq	r6, r1, r0, asr #12
   16508:	andeq	r6, r1, r0, asr #12
   1650c:	andeq	r6, r1, r0, asr #12
   16510:	andeq	r6, r1, r0, asr #12
   16514:	andeq	r6, r1, r0, asr #12
   16518:	andeq	r6, r1, r0, asr #12
   1651c:	andeq	r6, r1, r0, asr #12
   16520:	andeq	r6, r1, r0, asr #12
   16524:	andeq	r6, r1, r0, asr #12
   16528:	andeq	r6, r1, r0, asr #12
   1652c:	andeq	r6, r1, r0, asr #12
   16530:	andeq	r6, r1, r0, asr #14
   16534:	andeq	r6, r1, r0, asr #14
   16538:	andeq	r6, r1, r0, asr #14
   1653c:	andeq	r6, r1, r0, asr #14
   16540:	muleq	r1, r0, r8
   16544:	andeq	r6, r1, r8, asr r9
   16548:	andeq	r6, r1, r0, asr #12
   1654c:	andeq	r6, r1, r0, asr #12
   16550:	andeq	r6, r1, r0, asr #12
   16554:	andeq	r6, r1, r0, asr #12
   16558:	andeq	r6, r1, r0, asr #12
   1655c:	andeq	r6, r1, r0, asr #12
   16560:	andeq	r6, r1, r0, asr #12
   16564:	andeq	r6, r1, r0, asr #12
   16568:	andeq	r6, r1, r0, asr #12
   1656c:	andeq	r6, r1, r0, asr #12
   16570:	andeq	r6, r1, r0, asr #12
   16574:	andeq	r6, r1, r0, asr #12
   16578:	andeq	r6, r1, r0, asr #12
   1657c:	andeq	r6, r1, r0, asr #12
   16580:	andeq	r6, r1, r0, asr #12
   16584:	andeq	r6, r1, r0, asr #12
   16588:	andeq	r6, r1, r0, asr #12
   1658c:	andeq	r6, r1, r0, asr #12
   16590:	andeq	r6, r1, r0, asr #12
   16594:	andeq	r6, r1, r0, asr #12
   16598:	andeq	r6, r1, r0, asr #12
   1659c:	andeq	r6, r1, r0, asr #12
   165a0:	andeq	r6, r1, r0, asr #12
   165a4:	andeq	r6, r1, r0, asr #12
   165a8:	andeq	r6, r1, r0, asr #12
   165ac:	andeq	r6, r1, r0, asr #12
   165b0:	andeq	r6, r1, r0, asr #14
   165b4:	andeq	r6, r1, r8, ror #14
   165b8:	andeq	r6, r1, r0, asr #12
   165bc:	andeq	r6, r1, r0, asr #14
   165c0:	andeq	r6, r1, r0, asr #12
   165c4:	andeq	r6, r1, r0, asr #14
   165c8:	andeq	r6, r1, r0, asr #12
   165cc:	andeq	r6, r1, r0, asr #12
   165d0:	andeq	r6, r1, r0, asr #12
   165d4:	andeq	r6, r1, r0, asr #12
   165d8:	andeq	r6, r1, r0, asr #12
   165dc:	andeq	r6, r1, r0, asr #12
   165e0:	andeq	r6, r1, r0, asr #12
   165e4:	andeq	r6, r1, r0, asr #12
   165e8:	andeq	r6, r1, r0, asr #12
   165ec:	andeq	r6, r1, r0, asr #12
   165f0:	andeq	r6, r1, r0, asr #12
   165f4:	andeq	r6, r1, r0, asr #12
   165f8:	andeq	r6, r1, r0, asr #12
   165fc:	andeq	r6, r1, r0, asr #12
   16600:	andeq	r6, r1, r0, asr #12
   16604:	andeq	r6, r1, r0, asr #12
   16608:	andeq	r6, r1, r0, asr #12
   1660c:	andeq	r6, r1, r0, asr #12
   16610:	andeq	r6, r1, r0, asr #12
   16614:	andeq	r6, r1, r0, asr #12
   16618:	andeq	r6, r1, r0, asr #12
   1661c:	andeq	r6, r1, r0, asr #12
   16620:	andeq	r6, r1, r0, asr #12
   16624:	andeq	r6, r1, r0, asr #12
   16628:	andeq	r6, r1, r0, asr #12
   1662c:	andeq	r6, r1, r0, asr #12
   16630:	strdeq	r6, [r1], -ip
   16634:	andeq	r6, r1, r0, asr #14
   16638:	strdeq	r6, [r1], -ip
   1663c:	andeq	r6, r1, r8, lsr #14
   16640:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16644:	tst	r0, #1
   16648:	bne	16674 <__assert_fail@plt+0x5340>
   1664c:	ldr	r1, [fp, #16]
   16650:	ubfx	r0, r6, #5, #3
   16654:	mov	r2, #1
   16658:	ldr	r0, [r1, r0, lsl #2]
   1665c:	and	r1, r6, #31
   16660:	tst	r0, r2, lsl r1
   16664:	beq	16674 <__assert_fail@plt+0x5340>
   16668:	mov	r0, r6
   1666c:	mov	r1, r9
   16670:	b	16688 <__assert_fail@plt+0x5354>
   16674:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16678:	mov	r1, r9
   1667c:	cmp	r0, #0
   16680:	mov	r0, r6
   16684:	beq	169c8 <__assert_fail@plt+0x5694>
   16688:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1668c:	tst	r2, #1
   16690:	bne	16f98 <__assert_fail@plt+0x5c64>
   16694:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16698:	ldr	r3, [fp, #-56]	; 0xffffffc8
   1669c:	subs	r2, r2, #2
   166a0:	movwne	r2, #1
   166a4:	orr	r2, r2, r3
   166a8:	tst	r2, #1
   166ac:	bne	166e8 <__assert_fail@plt+0x53b4>
   166b0:	cmp	r8, r4
   166b4:	movcc	r2, #39	; 0x27
   166b8:	strbcc	r2, [r5, r8]
   166bc:	add	r2, r8, #1
   166c0:	cmp	r2, r4
   166c4:	movcc	r3, #36	; 0x24
   166c8:	strbcc	r3, [r5, r2]
   166cc:	add	r2, r8, #2
   166d0:	add	r8, r8, #3
   166d4:	cmp	r2, r4
   166d8:	movcc	r3, #39	; 0x27
   166dc:	strbcc	r3, [r5, r2]
   166e0:	mov	r2, #1
   166e4:	str	r2, [fp, #-56]	; 0xffffffc8
   166e8:	cmp	r8, r4
   166ec:	movcc	r2, #92	; 0x5c
   166f0:	strbcc	r2, [r5, r8]
   166f4:	add	r8, r8, #1
   166f8:	b	16a0c <__assert_fail@plt+0x56d8>
   166fc:	cmp	lr, #1
   16700:	beq	16728 <__assert_fail@plt+0x53f4>
   16704:	mov	r9, #0
   16708:	cmn	lr, #1
   1670c:	bne	16734 <__assert_fail@plt+0x5400>
   16710:	ldrb	r0, [ip, #1]
   16714:	cmp	r0, #0
   16718:	beq	16728 <__assert_fail@plt+0x53f4>
   1671c:	mvn	lr, #0
   16720:	mov	sl, #0
   16724:	b	16640 <__assert_fail@plt+0x530c>
   16728:	mov	r9, #0
   1672c:	cmp	r7, #0
   16730:	beq	1673c <__assert_fail@plt+0x5408>
   16734:	mov	sl, #0
   16738:	b	16640 <__assert_fail@plt+0x530c>
   1673c:	mov	r1, #1
   16740:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16744:	cmp	r0, #2
   16748:	bne	16760 <__assert_fail@plt+0x542c>
   1674c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16750:	mov	r9, r1
   16754:	tst	r0, #1
   16758:	beq	16640 <__assert_fail@plt+0x530c>
   1675c:	b	16f98 <__assert_fail@plt+0x5c64>
   16760:	mov	r9, r1
   16764:	b	16640 <__assert_fail@plt+0x530c>
   16768:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1676c:	cmp	r0, #2
   16770:	bne	169ac <__assert_fail@plt+0x5678>
   16774:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16778:	tst	r0, #1
   1677c:	bne	16f98 <__assert_fail@plt+0x5c64>
   16780:	mov	sl, #0
   16784:	b	169c0 <__assert_fail@plt+0x568c>
   16788:	mov	r0, #102	; 0x66
   1678c:	b	16a34 <__assert_fail@plt+0x5700>
   16790:	mov	r2, #116	; 0x74
   16794:	b	167a4 <__assert_fail@plt+0x5470>
   16798:	mov	r0, #98	; 0x62
   1679c:	b	16a34 <__assert_fail@plt+0x5700>
   167a0:	mov	r2, #114	; 0x72
   167a4:	ldr	r0, [sp, #68]	; 0x44
   167a8:	tst	r0, #1
   167ac:	mov	r0, r2
   167b0:	bne	16a34 <__assert_fail@plt+0x5700>
   167b4:	b	16f98 <__assert_fail@plt+0x5c64>
   167b8:	ldr	r0, [sp, #84]	; 0x54
   167bc:	tst	r0, #1
   167c0:	beq	16a50 <__assert_fail@plt+0x571c>
   167c4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   167c8:	tst	r0, #1
   167cc:	bne	17084 <__assert_fail@plt+0x5d50>
   167d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   167d4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   167d8:	subs	r0, r0, #2
   167dc:	movwne	r0, #1
   167e0:	orr	r0, r0, r1
   167e4:	tst	r0, #1
   167e8:	bne	16824 <__assert_fail@plt+0x54f0>
   167ec:	cmp	r8, r4
   167f0:	movcc	r0, #39	; 0x27
   167f4:	strbcc	r0, [r5, r8]
   167f8:	add	r0, r8, #1
   167fc:	cmp	r0, r4
   16800:	movcc	r1, #36	; 0x24
   16804:	strbcc	r1, [r5, r0]
   16808:	add	r0, r8, #2
   1680c:	add	r8, r8, #3
   16810:	cmp	r0, r4
   16814:	movcc	r1, #39	; 0x27
   16818:	strbcc	r1, [r5, r0]
   1681c:	mov	r0, #1
   16820:	str	r0, [fp, #-56]	; 0xffffffc8
   16824:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16828:	cmp	r8, r4
   1682c:	mov	r9, #0
   16830:	mov	sl, #1
   16834:	mov	r6, #48	; 0x30
   16838:	movcc	r0, #92	; 0x5c
   1683c:	strbcc	r0, [r5, r8]
   16840:	add	r0, r8, #1
   16844:	cmp	r1, #2
   16848:	beq	16c18 <__assert_fail@plt+0x58e4>
   1684c:	add	r1, r7, #1
   16850:	cmp	r1, lr
   16854:	bcs	16c18 <__assert_fail@plt+0x58e4>
   16858:	ldrb	r1, [ip, r1]
   1685c:	sub	r1, r1, #48	; 0x30
   16860:	uxtb	r1, r1
   16864:	cmp	r1, #9
   16868:	bhi	16c18 <__assert_fail@plt+0x58e4>
   1686c:	cmp	r0, r4
   16870:	movcc	r1, #48	; 0x30
   16874:	strbcc	r1, [r5, r0]
   16878:	add	r0, r8, #2
   1687c:	add	r8, r8, #3
   16880:	cmp	r0, r4
   16884:	movcc	r1, #48	; 0x30
   16888:	strbcc	r1, [r5, r0]
   1688c:	b	16640 <__assert_fail@plt+0x530c>
   16890:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16894:	mov	sl, #0
   16898:	mov	r6, #63	; 0x3f
   1689c:	cmp	r0, #5
   168a0:	beq	16c20 <__assert_fail@plt+0x58ec>
   168a4:	cmp	r0, #2
   168a8:	bne	16cc8 <__assert_fail@plt+0x5994>
   168ac:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168b0:	mov	r9, #0
   168b4:	tst	r0, #1
   168b8:	beq	16640 <__assert_fail@plt+0x530c>
   168bc:	b	16f98 <__assert_fail@plt+0x5c64>
   168c0:	mov	r0, #118	; 0x76
   168c4:	b	16a34 <__assert_fail@plt+0x5700>
   168c8:	mov	r0, #1
   168cc:	mov	r6, #39	; 0x27
   168d0:	str	r0, [sp, #60]	; 0x3c
   168d4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   168d8:	cmp	r0, #2
   168dc:	bne	16a6c <__assert_fail@plt+0x5738>
   168e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   168e4:	tst	r0, #1
   168e8:	bne	16f98 <__assert_fail@plt+0x5c64>
   168ec:	ldr	r2, [sp, #56]	; 0x38
   168f0:	clz	r1, r4
   168f4:	mov	sl, #0
   168f8:	mov	r9, #1
   168fc:	lsr	r1, r1, #5
   16900:	cmp	r2, #0
   16904:	mov	r0, r2
   16908:	movwne	r0, #1
   1690c:	orrs	r0, r0, r1
   16910:	moveq	r2, r4
   16914:	moveq	r4, r0
   16918:	cmp	r8, r4
   1691c:	str	r2, [sp, #56]	; 0x38
   16920:	movcc	r0, #39	; 0x27
   16924:	strbcc	r0, [r5, r8]
   16928:	add	r0, r8, #1
   1692c:	cmp	r0, r4
   16930:	movcc	r1, #92	; 0x5c
   16934:	strbcc	r1, [r5, r0]
   16938:	add	r0, r8, #2
   1693c:	add	r8, r8, #3
   16940:	cmp	r0, r4
   16944:	movcc	r1, #39	; 0x27
   16948:	strbcc	r1, [r5, r0]
   1694c:	mov	r0, #0
   16950:	str	r0, [fp, #-56]	; 0xffffffc8
   16954:	b	16640 <__assert_fail@plt+0x530c>
   16958:	ldr	r0, [sp, #40]	; 0x28
   1695c:	str	r4, [sp, #88]	; 0x58
   16960:	cmp	r0, #1
   16964:	bne	16a74 <__assert_fail@plt+0x5740>
   16968:	str	lr, [sp, #28]
   1696c:	bl	111d8 <__ctype_b_loc@plt>
   16970:	ldr	r0, [r0]
   16974:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16978:	mov	r2, #1
   1697c:	add	r0, r0, r6, lsl #1
   16980:	ldrb	r0, [r0, #1]
   16984:	ubfx	r9, r0, #6, #1
   16988:	ldr	r0, [sp, #52]	; 0x34
   1698c:	cmp	r2, #1
   16990:	orr	r0, r9, r0
   16994:	bhi	16cd0 <__assert_fail@plt+0x599c>
   16998:	tst	r0, #1
   1699c:	beq	16cd0 <__assert_fail@plt+0x599c>
   169a0:	ldr	lr, [sp, #28]
   169a4:	ldr	r4, [sp, #88]	; 0x58
   169a8:	b	16640 <__assert_fail@plt+0x530c>
   169ac:	ldr	r1, [sp, #48]	; 0x30
   169b0:	mov	sl, #0
   169b4:	mov	r0, #92	; 0x5c
   169b8:	cmp	r1, #0
   169bc:	beq	16a34 <__assert_fail@plt+0x5700>
   169c0:	mov	r6, #92	; 0x5c
   169c4:	mov	r9, #0
   169c8:	cmp	sl, #0
   169cc:	bne	16a04 <__assert_fail@plt+0x56d0>
   169d0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   169d4:	tst	r0, #1
   169d8:	beq	16a04 <__assert_fail@plt+0x56d0>
   169dc:	cmp	r8, r4
   169e0:	movcc	r0, #39	; 0x27
   169e4:	strbcc	r0, [r5, r8]
   169e8:	add	r0, r8, #1
   169ec:	add	r8, r8, #2
   169f0:	cmp	r0, r4
   169f4:	movcc	r1, #39	; 0x27
   169f8:	strbcc	r1, [r5, r0]
   169fc:	mov	r0, #0
   16a00:	str	r0, [fp, #-56]	; 0xffffffc8
   16a04:	mov	r1, r9
   16a08:	mov	r0, r6
   16a0c:	cmp	r8, r4
   16a10:	strbcc	r0, [r5, r8]
   16a14:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16a18:	add	r8, r8, #1
   16a1c:	and	r0, r0, r1
   16a20:	str	r0, [fp, #-48]	; 0xffffffd0
   16a24:	add	r7, r7, #1
   16a28:	cmn	lr, #1
   16a2c:	bne	1636c <__assert_fail@plt+0x5038>
   16a30:	b	16378 <__assert_fail@plt+0x5044>
   16a34:	ldr	r1, [sp, #84]	; 0x54
   16a38:	mov	sl, #0
   16a3c:	mov	r9, #0
   16a40:	tst	r1, #1
   16a44:	mov	r1, #0
   16a48:	beq	16640 <__assert_fail@plt+0x530c>
   16a4c:	b	16688 <__assert_fail@plt+0x5354>
   16a50:	ldr	r0, [sp, #36]	; 0x24
   16a54:	mov	r6, #0
   16a58:	mov	sl, #0
   16a5c:	mov	r9, #0
   16a60:	cmp	r0, #0
   16a64:	beq	16640 <__assert_fail@plt+0x530c>
   16a68:	b	16a24 <__assert_fail@plt+0x56f0>
   16a6c:	mov	r9, #1
   16a70:	b	16640 <__assert_fail@plt+0x530c>
   16a74:	mov	r0, #0
   16a78:	cmn	lr, #1
   16a7c:	sub	r4, fp, #40	; 0x28
   16a80:	str	r0, [fp, #-36]	; 0xffffffdc
   16a84:	str	r0, [fp, #-40]	; 0xffffffd8
   16a88:	bne	16a9c <__assert_fail@plt+0x5768>
   16a8c:	mov	r0, ip
   16a90:	bl	111fc <strlen@plt>
   16a94:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16a98:	mov	lr, r0
   16a9c:	ldr	r0, [sp, #72]	; 0x48
   16aa0:	mov	r9, #1
   16aa4:	mov	r2, #0
   16aa8:	str	lr, [sp, #28]
   16aac:	add	r0, r0, r7
   16ab0:	str	r0, [sp, #20]
   16ab4:	b	16af8 <__assert_fail@plt+0x57c4>
   16ab8:	ldr	r5, [sp, #44]	; 0x2c
   16abc:	add	r5, r0, r5
   16ac0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16ac4:	bl	11124 <iswprint@plt>
   16ac8:	cmp	r0, #0
   16acc:	sub	r4, fp, #40	; 0x28
   16ad0:	movwne	r0, #1
   16ad4:	and	r9, r9, r0
   16ad8:	mov	r0, r4
   16adc:	bl	110e8 <mbsinit@plt>
   16ae0:	mov	r2, r5
   16ae4:	ldr	lr, [sp, #28]
   16ae8:	ldr	r5, [fp, #-84]	; 0xffffffac
   16aec:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16af0:	cmp	r0, #0
   16af4:	bne	16988 <__assert_fail@plt+0x5654>
   16af8:	add	r0, r2, r7
   16afc:	str	r2, [sp, #44]	; 0x2c
   16b00:	mov	r3, r4
   16b04:	add	r1, ip, r0
   16b08:	str	r0, [sp, #24]
   16b0c:	sub	r2, lr, r0
   16b10:	sub	r0, fp, #44	; 0x2c
   16b14:	bl	19940 <__assert_fail@plt+0x860c>
   16b18:	cmp	r0, #0
   16b1c:	beq	16ec0 <__assert_fail@plt+0x5b8c>
   16b20:	cmn	r0, #1
   16b24:	beq	16e7c <__assert_fail@plt+0x5b48>
   16b28:	ldr	lr, [sp, #28]
   16b2c:	cmn	r0, #2
   16b30:	beq	16e84 <__assert_fail@plt+0x5b50>
   16b34:	ldr	r2, [sp, #64]	; 0x40
   16b38:	ldr	r4, [sp, #88]	; 0x58
   16b3c:	ldr	ip, [sp, #84]	; 0x54
   16b40:	cmp	r0, #2
   16b44:	mov	r1, #0
   16b48:	movwcc	r1, #1
   16b4c:	eor	r2, r2, #1
   16b50:	orrs	r1, r2, r1
   16b54:	bne	16ab8 <__assert_fail@plt+0x5784>
   16b58:	ldr	r1, [sp, #44]	; 0x2c
   16b5c:	ldr	r2, [sp, #20]
   16b60:	add	r1, r2, r1
   16b64:	sub	r2, r0, #1
   16b68:	b	16b78 <__assert_fail@plt+0x5844>
   16b6c:	add	r1, r1, #1
   16b70:	subs	r2, r2, #1
   16b74:	beq	16ab8 <__assert_fail@plt+0x5784>
   16b78:	ldrb	r3, [r1]
   16b7c:	sub	r3, r3, #91	; 0x5b
   16b80:	cmp	r3, #33	; 0x21
   16b84:	bhi	16b6c <__assert_fail@plt+0x5838>
   16b88:	add	r5, pc, #0
   16b8c:	ldr	pc, [r5, r3, lsl #2]
   16b90:	andeq	r6, r1, r4, ror pc
   16b94:	andeq	r6, r1, r4, ror pc
   16b98:	andeq	r6, r1, ip, ror #22
   16b9c:	andeq	r6, r1, r4, ror pc
   16ba0:	andeq	r6, r1, ip, ror #22
   16ba4:	andeq	r6, r1, r4, ror pc
   16ba8:	andeq	r6, r1, ip, ror #22
   16bac:	andeq	r6, r1, ip, ror #22
   16bb0:	andeq	r6, r1, ip, ror #22
   16bb4:	andeq	r6, r1, ip, ror #22
   16bb8:	andeq	r6, r1, ip, ror #22
   16bbc:	andeq	r6, r1, ip, ror #22
   16bc0:	andeq	r6, r1, ip, ror #22
   16bc4:	andeq	r6, r1, ip, ror #22
   16bc8:	andeq	r6, r1, ip, ror #22
   16bcc:	andeq	r6, r1, ip, ror #22
   16bd0:	andeq	r6, r1, ip, ror #22
   16bd4:	andeq	r6, r1, ip, ror #22
   16bd8:	andeq	r6, r1, ip, ror #22
   16bdc:	andeq	r6, r1, ip, ror #22
   16be0:	andeq	r6, r1, ip, ror #22
   16be4:	andeq	r6, r1, ip, ror #22
   16be8:	andeq	r6, r1, ip, ror #22
   16bec:	andeq	r6, r1, ip, ror #22
   16bf0:	andeq	r6, r1, ip, ror #22
   16bf4:	andeq	r6, r1, ip, ror #22
   16bf8:	andeq	r6, r1, ip, ror #22
   16bfc:	andeq	r6, r1, ip, ror #22
   16c00:	andeq	r6, r1, ip, ror #22
   16c04:	andeq	r6, r1, ip, ror #22
   16c08:	andeq	r6, r1, ip, ror #22
   16c0c:	andeq	r6, r1, ip, ror #22
   16c10:	andeq	r6, r1, ip, ror #22
   16c14:	andeq	r6, r1, r4, ror pc
   16c18:	mov	r8, r0
   16c1c:	b	16640 <__assert_fail@plt+0x530c>
   16c20:	ldr	r0, [sp, #32]
   16c24:	cmp	r0, #0
   16c28:	beq	16cc8 <__assert_fail@plt+0x5994>
   16c2c:	add	r0, r7, #2
   16c30:	cmp	r0, lr
   16c34:	bcs	16cc8 <__assert_fail@plt+0x5994>
   16c38:	add	r1, r7, ip
   16c3c:	ldrb	r1, [r1, #1]
   16c40:	cmp	r1, #63	; 0x3f
   16c44:	bne	16cc8 <__assert_fail@plt+0x5994>
   16c48:	ldrb	r9, [ip, r0]
   16c4c:	sub	r2, r9, #33	; 0x21
   16c50:	cmp	r2, #29
   16c54:	bhi	16cc8 <__assert_fail@plt+0x5994>
   16c58:	movw	r1, #20929	; 0x51c1
   16c5c:	mov	r3, #1
   16c60:	movt	r1, #14336	; 0x3800
   16c64:	tst	r1, r3, lsl r2
   16c68:	beq	16cc8 <__assert_fail@plt+0x5994>
   16c6c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16c70:	tst	r1, #1
   16c74:	bne	16f98 <__assert_fail@plt+0x5c64>
   16c78:	cmp	r8, r4
   16c7c:	add	r2, r8, #1
   16c80:	mov	r6, r9
   16c84:	mov	r7, r0
   16c88:	mov	r9, #0
   16c8c:	movcc	r1, #63	; 0x3f
   16c90:	strbcc	r1, [r5, r8]
   16c94:	cmp	r2, r4
   16c98:	movcc	r1, #34	; 0x22
   16c9c:	strbcc	r1, [r5, r2]
   16ca0:	add	r2, r8, #2
   16ca4:	cmp	r2, r4
   16ca8:	movcc	r1, #34	; 0x22
   16cac:	strbcc	r1, [r5, r2]
   16cb0:	add	r2, r8, #3
   16cb4:	add	r8, r8, #4
   16cb8:	cmp	r2, r4
   16cbc:	movcc	r1, #63	; 0x3f
   16cc0:	strbcc	r1, [r5, r2]
   16cc4:	b	16640 <__assert_fail@plt+0x530c>
   16cc8:	mov	r9, #0
   16ccc:	b	16640 <__assert_fail@plt+0x530c>
   16cd0:	ldr	lr, [sp, #28]
   16cd4:	ldr	r4, [fp, #-56]	; 0xffffffc8
   16cd8:	add	r1, r2, r7
   16cdc:	mov	r2, #0
   16ce0:	str	r1, [sp, #44]	; 0x2c
   16ce4:	tst	r0, #1
   16ce8:	bne	16e04 <__assert_fail@plt+0x5ad0>
   16cec:	ldr	r1, [fp, #-76]	; 0xffffffb4
   16cf0:	tst	r1, #1
   16cf4:	bne	16f94 <__assert_fail@plt+0x5c60>
   16cf8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16cfc:	subs	r2, r1, #2
   16d00:	movwne	r2, #1
   16d04:	orr	r2, r2, r4
   16d08:	tst	r2, #1
   16d0c:	bne	16d50 <__assert_fail@plt+0x5a1c>
   16d10:	ldr	r1, [sp, #88]	; 0x58
   16d14:	add	r2, r8, #1
   16d18:	mov	r4, #1
   16d1c:	cmp	r8, r1
   16d20:	movcc	r1, #39	; 0x27
   16d24:	strbcc	r1, [r5, r8]
   16d28:	ldr	r1, [sp, #88]	; 0x58
   16d2c:	cmp	r2, r1
   16d30:	movcc	r1, #36	; 0x24
   16d34:	strbcc	r1, [r5, r2]
   16d38:	ldr	r1, [sp, #88]	; 0x58
   16d3c:	add	r2, r8, #2
   16d40:	add	r8, r8, #3
   16d44:	cmp	r2, r1
   16d48:	movcc	r1, #39	; 0x27
   16d4c:	strbcc	r1, [r5, r2]
   16d50:	ldr	r1, [sp, #88]	; 0x58
   16d54:	add	r2, r8, #1
   16d58:	cmp	r8, r1
   16d5c:	movcc	r1, #92	; 0x5c
   16d60:	strbcc	r1, [r5, r8]
   16d64:	ldr	r1, [sp, #88]	; 0x58
   16d68:	cmp	r2, r1
   16d6c:	bcs	16d80 <__assert_fail@plt+0x5a4c>
   16d70:	uxtb	r3, r6
   16d74:	mov	r1, #48	; 0x30
   16d78:	orr	r3, r1, r3, lsr #6
   16d7c:	strb	r3, [r5, r2]
   16d80:	ldr	r1, [sp, #88]	; 0x58
   16d84:	add	r2, r8, #2
   16d88:	add	r8, r8, #3
   16d8c:	cmp	r2, r1
   16d90:	lsrcc	r3, r6, #3
   16d94:	movcc	r1, #6
   16d98:	bficc	r3, r1, #3, #29
   16d9c:	mov	r1, #6
   16da0:	bfi	r6, r1, #3, #29
   16da4:	strbcc	r3, [r5, r2]
   16da8:	mov	r2, #1
   16dac:	b	16e2c <__assert_fail@plt+0x5af8>
   16db0:	ldr	r1, [sp, #88]	; 0x58
   16db4:	ldr	r5, [fp, #-84]	; 0xffffffac
   16db8:	ldr	r4, [sp, #88]	; 0x58
   16dbc:	cmp	r8, r1
   16dc0:	movcc	r1, #39	; 0x27
   16dc4:	strbcc	r1, [r5, r8]
   16dc8:	add	r1, r8, #1
   16dcc:	add	r8, r8, #2
   16dd0:	cmp	r1, r4
   16dd4:	movcc	r4, #39	; 0x27
   16dd8:	strbcc	r4, [r5, r1]
   16ddc:	mov	r4, #0
   16de0:	ldr	r1, [sp, #88]	; 0x58
   16de4:	cmp	r8, r1
   16de8:	ldr	r1, [sp, #72]	; 0x48
   16dec:	strbcc	r6, [r5, r8]
   16df0:	add	r8, r8, #1
   16df4:	ldrb	r6, [r1, r7]
   16df8:	mov	r7, r3
   16dfc:	tst	r0, #1
   16e00:	beq	16cec <__assert_fail@plt+0x59b8>
   16e04:	ldr	r1, [fp, #-52]	; 0xffffffcc
   16e08:	tst	r1, #1
   16e0c:	beq	16e24 <__assert_fail@plt+0x5af0>
   16e10:	ldr	r1, [sp, #88]	; 0x58
   16e14:	cmp	r8, r1
   16e18:	movcc	r1, #92	; 0x5c
   16e1c:	strbcc	r1, [r5, r8]
   16e20:	add	r8, r8, #1
   16e24:	mov	r1, #0
   16e28:	str	r1, [fp, #-52]	; 0xffffffcc
   16e2c:	ldr	r1, [sp, #44]	; 0x2c
   16e30:	add	r3, r7, #1
   16e34:	and	sl, r2, #1
   16e38:	cmp	r1, r3
   16e3c:	bls	16e60 <__assert_fail@plt+0x5b2c>
   16e40:	cmp	sl, #0
   16e44:	mvn	r5, r4
   16e48:	movwne	sl, #1
   16e4c:	orr	r5, r5, sl
   16e50:	tst	r5, #1
   16e54:	beq	16db0 <__assert_fail@plt+0x5a7c>
   16e58:	ldr	r5, [fp, #-84]	; 0xffffffac
   16e5c:	b	16de0 <__assert_fail@plt+0x5aac>
   16e60:	str	r4, [fp, #-56]	; 0xffffffc8
   16e64:	ldr	r4, [sp, #88]	; 0x58
   16e68:	cmp	sl, #0
   16e6c:	movwne	sl, #1
   16e70:	cmp	sl, #0
   16e74:	beq	169d0 <__assert_fail@plt+0x569c>
   16e78:	b	16a04 <__assert_fail@plt+0x56d0>
   16e7c:	mov	r9, #0
   16e80:	b	16ec0 <__assert_fail@plt+0x5b8c>
   16e84:	ldr	r0, [sp, #24]
   16e88:	mov	r9, #0
   16e8c:	cmp	lr, r0
   16e90:	bls	16ec0 <__assert_fail@plt+0x5b8c>
   16e94:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16e98:	ldr	r2, [sp, #44]	; 0x2c
   16e9c:	add	r0, ip, r7
   16ea0:	ldrb	r1, [r0, r2]
   16ea4:	cmp	r1, #0
   16ea8:	beq	16988 <__assert_fail@plt+0x5654>
   16eac:	add	r2, r2, #1
   16eb0:	add	r1, r7, r2
   16eb4:	cmp	r1, lr
   16eb8:	bcc	16ea0 <__assert_fail@plt+0x5b6c>
   16ebc:	b	16988 <__assert_fail@plt+0x5654>
   16ec0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16ec4:	ldr	r2, [sp, #44]	; 0x2c
   16ec8:	b	16988 <__assert_fail@plt+0x5654>
   16ecc:	mov	lr, r7
   16ed0:	b	16ed8 <__assert_fail@plt+0x5ba4>
   16ed4:	mvn	lr, #0
   16ed8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   16edc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16ee0:	eor	r0, r1, #2
   16ee4:	orr	r0, r0, r8
   16ee8:	clz	r0, r0
   16eec:	lsr	r0, r0, #5
   16ef0:	tst	r2, r0
   16ef4:	bne	16f98 <__assert_fail@plt+0x5c64>
   16ef8:	subs	r0, r1, #2
   16efc:	movwne	r0, #1
   16f00:	orr	r0, r2, r0
   16f04:	tst	r0, #1
   16f08:	ldreq	r0, [sp, #60]	; 0x3c
   16f0c:	eoreq	r0, r0, #1
   16f10:	tsteq	r0, #1
   16f14:	bne	1702c <__assert_fail@plt+0x5cf8>
   16f18:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16f1c:	mov	sl, lr
   16f20:	tst	r0, #1
   16f24:	bne	16ff8 <__assert_fail@plt+0x5cc4>
   16f28:	ldr	r6, [sp, #56]	; 0x38
   16f2c:	mov	r9, #0
   16f30:	cmp	r6, #0
   16f34:	beq	17024 <__assert_fail@plt+0x5cf0>
   16f38:	ldr	r0, [sp, #84]	; 0x54
   16f3c:	mov	r1, #0
   16f40:	mov	r7, #2
   16f44:	cmp	r4, #0
   16f48:	str	r1, [fp, #-48]	; 0xffffffd0
   16f4c:	mov	r1, #0
   16f50:	str	r1, [fp, #-76]	; 0xffffffb4
   16f54:	beq	160f4 <__assert_fail@plt+0x4dc0>
   16f58:	b	1702c <__assert_fail@plt+0x5cf8>
   16f5c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16f60:	ldr	r1, [fp, #12]
   16f64:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16f68:	mov	lr, r4
   16f6c:	mov	r4, r6
   16f70:	b	16fb8 <__assert_fail@plt+0x5c84>
   16f74:	tst	ip, #1
   16f78:	ldr	r5, [fp, #-84]	; 0xffffffac
   16f7c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16f80:	ldr	r1, [fp, #12]
   16f84:	mov	r0, #2
   16f88:	movwne	r0, #4
   16f8c:	mov	r2, r0
   16f90:	b	16fb8 <__assert_fail@plt+0x5c84>
   16f94:	ldr	r4, [sp, #88]	; 0x58
   16f98:	ldr	r1, [sp, #84]	; 0x54
   16f9c:	mov	r0, #2
   16fa0:	tst	r1, #1
   16fa4:	movwne	r0, #4
   16fa8:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16fac:	ldr	r1, [fp, #12]
   16fb0:	cmp	r2, #2
   16fb4:	moveq	r2, r0
   16fb8:	mov	r0, #0
   16fbc:	bic	r1, r1, #2
   16fc0:	str	r2, [sp]
   16fc4:	mov	r2, ip
   16fc8:	mov	r3, lr
   16fcc:	str	r0, [sp, #8]
   16fd0:	ldr	r0, [sp, #76]	; 0x4c
   16fd4:	str	r1, [sp, #4]
   16fd8:	mov	r1, r4
   16fdc:	str	r0, [sp, #12]
   16fe0:	ldr	r0, [sp, #80]	; 0x50
   16fe4:	str	r0, [sp, #16]
   16fe8:	mov	r0, r5
   16fec:	bl	16064 <__assert_fail@plt+0x4d30>
   16ff0:	mov	r8, r0
   16ff4:	b	17078 <__assert_fail@plt+0x5d44>
   16ff8:	mov	r0, #5
   16ffc:	ldr	r1, [sp, #56]	; 0x38
   17000:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17004:	mov	r3, sl
   17008:	str	r0, [sp]
   1700c:	ldr	r0, [fp, #12]
   17010:	str	r0, [sp, #4]
   17014:	ldr	r0, [fp, #16]
   17018:	str	r0, [sp, #8]
   1701c:	ldr	r0, [sp, #76]	; 0x4c
   17020:	b	16fdc <__assert_fail@plt+0x5ca8>
   17024:	mov	r0, #0
   17028:	str	r0, [fp, #-76]	; 0xffffffb4
   1702c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   17030:	cmp	r1, #0
   17034:	beq	1706c <__assert_fail@plt+0x5d38>
   17038:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1703c:	tst	r0, #1
   17040:	bne	1706c <__assert_fail@plt+0x5d38>
   17044:	ldrb	r0, [r1]
   17048:	cmp	r0, #0
   1704c:	beq	1706c <__assert_fail@plt+0x5d38>
   17050:	add	r1, r1, #1
   17054:	cmp	r8, r4
   17058:	strbcc	r0, [r5, r8]
   1705c:	add	r8, r8, #1
   17060:	ldrb	r0, [r1], #1
   17064:	cmp	r0, #0
   17068:	bne	17054 <__assert_fail@plt+0x5d20>
   1706c:	cmp	r8, r4
   17070:	movcc	r0, #0
   17074:	strbcc	r0, [r5, r8]
   17078:	mov	r0, r8
   1707c:	sub	sp, fp, #28
   17080:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17084:	mov	r0, #4
   17088:	b	16fa8 <__assert_fail@plt+0x5c74>
   1708c:	bl	1131c <abort@plt>
   17090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17094:	add	fp, sp, #28
   17098:	sub	sp, sp, #28
   1709c:	movw	r5, #49728	; 0xc240
   170a0:	cmp	r2, #0
   170a4:	mov	r4, r1
   170a8:	mov	r7, r0
   170ac:	str	r0, [sp, #20]
   170b0:	movt	r5, #2
   170b4:	movne	r5, r2
   170b8:	bl	11214 <__errno_location@plt>
   170bc:	mov	sl, r0
   170c0:	ldr	r2, [r5, #40]	; 0x28
   170c4:	ldr	r3, [r5, #44]	; 0x2c
   170c8:	ldm	r5, {r0, r1}
   170cc:	orr	r8, r1, #1
   170d0:	add	r9, r5, #8
   170d4:	mov	r1, #0
   170d8:	ldr	r6, [sl]
   170dc:	stm	sp, {r0, r8, r9}
   170e0:	mov	r0, #0
   170e4:	str	r2, [sp, #12]
   170e8:	str	r3, [sp, #16]
   170ec:	mov	r2, r7
   170f0:	mov	r3, r4
   170f4:	str	r6, [sp, #24]
   170f8:	mov	r6, r4
   170fc:	bl	16064 <__assert_fail@plt+0x4d30>
   17100:	add	r7, r0, #1
   17104:	mov	r0, r7
   17108:	bl	182b0 <__assert_fail@plt+0x6f7c>
   1710c:	mov	r4, r0
   17110:	ldr	r0, [r5]
   17114:	ldr	r2, [r5, #44]	; 0x2c
   17118:	ldr	r1, [r5, #40]	; 0x28
   1711c:	mov	r3, r6
   17120:	stm	sp, {r0, r8, r9}
   17124:	str	r2, [sp, #16]
   17128:	ldr	r2, [sp, #20]
   1712c:	str	r1, [sp, #12]
   17130:	mov	r0, r4
   17134:	mov	r1, r7
   17138:	bl	16064 <__assert_fail@plt+0x4d30>
   1713c:	ldr	r0, [sp, #24]
   17140:	str	r0, [sl]
   17144:	mov	r0, r4
   17148:	sub	sp, fp, #28
   1714c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17154:	add	fp, sp, #28
   17158:	sub	sp, sp, #36	; 0x24
   1715c:	movw	r8, #49728	; 0xc240
   17160:	cmp	r3, #0
   17164:	mov	r4, r2
   17168:	str	r2, [sp, #24]
   1716c:	mov	r5, r1
   17170:	mov	r6, r0
   17174:	str	r0, [sp, #20]
   17178:	movt	r8, #2
   1717c:	movne	r8, r3
   17180:	bl	11214 <__errno_location@plt>
   17184:	str	r0, [sp, #28]
   17188:	ldr	r1, [r8, #40]	; 0x28
   1718c:	ldr	r2, [r8, #44]	; 0x2c
   17190:	ldr	r7, [r0]
   17194:	cmp	r4, #0
   17198:	add	sl, r8, #8
   1719c:	mov	r0, #0
   171a0:	ldm	r8, {r3, r9}
   171a4:	orreq	r9, r9, #1
   171a8:	stm	sp, {r3, r9, sl}
   171ac:	str	r1, [sp, #12]
   171b0:	str	r2, [sp, #16]
   171b4:	mov	r1, #0
   171b8:	mov	r2, r6
   171bc:	mov	r3, r5
   171c0:	str	r7, [sp, #32]
   171c4:	mov	r7, r5
   171c8:	bl	16064 <__assert_fail@plt+0x4d30>
   171cc:	add	r4, r0, #1
   171d0:	mov	r5, r0
   171d4:	mov	r0, r4
   171d8:	bl	182b0 <__assert_fail@plt+0x6f7c>
   171dc:	mov	r6, r0
   171e0:	ldr	r0, [r8]
   171e4:	ldr	r2, [r8, #44]	; 0x2c
   171e8:	ldr	r1, [r8, #40]	; 0x28
   171ec:	mov	r3, r7
   171f0:	stm	sp, {r0, r9, sl}
   171f4:	str	r2, [sp, #16]
   171f8:	ldr	r2, [sp, #20]
   171fc:	str	r1, [sp, #12]
   17200:	mov	r0, r6
   17204:	mov	r1, r4
   17208:	bl	16064 <__assert_fail@plt+0x4d30>
   1720c:	ldr	r0, [sp, #24]
   17210:	ldr	r1, [sp, #32]
   17214:	ldr	r2, [sp, #28]
   17218:	cmp	r0, #0
   1721c:	str	r1, [r2]
   17220:	strne	r5, [r0]
   17224:	mov	r0, r6
   17228:	sub	sp, fp, #28
   1722c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17230:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   17234:	add	fp, sp, #24
   17238:	movw	r5, #49436	; 0xc11c
   1723c:	movw	r8, #49432	; 0xc118
   17240:	movt	r5, #2
   17244:	movt	r8, #2
   17248:	ldr	r0, [r5]
   1724c:	ldr	r4, [r8]
   17250:	cmp	r0, #2
   17254:	blt	17280 <__assert_fail@plt+0x5f4c>
   17258:	add	r7, r4, #12
   1725c:	mov	r6, #0
   17260:	ldr	r0, [r7, r6, lsl #3]
   17264:	bl	15ab8 <__assert_fail@plt+0x4784>
   17268:	ldr	r1, [r5]
   1726c:	add	r2, r6, #2
   17270:	add	r0, r6, #1
   17274:	mov	r6, r0
   17278:	cmp	r2, r1
   1727c:	blt	17260 <__assert_fail@plt+0x5f2c>
   17280:	ldr	r0, [r4, #4]
   17284:	movw	r9, #49776	; 0xc270
   17288:	movw	r7, #49440	; 0xc120
   1728c:	movt	r9, #2
   17290:	movt	r7, #2
   17294:	cmp	r0, r9
   17298:	beq	172a8 <__assert_fail@plt+0x5f74>
   1729c:	bl	15ab8 <__assert_fail@plt+0x4784>
   172a0:	mov	r0, #256	; 0x100
   172a4:	stm	r7, {r0, r9}
   172a8:	cmp	r4, r7
   172ac:	beq	172bc <__assert_fail@plt+0x5f88>
   172b0:	mov	r0, r4
   172b4:	bl	15ab8 <__assert_fail@plt+0x4784>
   172b8:	str	r7, [r8]
   172bc:	mov	r0, #1
   172c0:	str	r0, [r5]
   172c4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   172c8:	movw	r3, #49728	; 0xc240
   172cc:	mvn	r2, #0
   172d0:	movt	r3, #2
   172d4:	b	172d8 <__assert_fail@plt+0x5fa4>
   172d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172dc:	add	fp, sp, #28
   172e0:	sub	sp, sp, #44	; 0x2c
   172e4:	mov	r7, r3
   172e8:	str	r2, [sp, #36]	; 0x24
   172ec:	str	r1, [sp, #32]
   172f0:	mov	r5, r0
   172f4:	bl	11214 <__errno_location@plt>
   172f8:	cmp	r5, #0
   172fc:	bmi	1746c <__assert_fail@plt+0x6138>
   17300:	cmn	r5, #-2147483647	; 0x80000001
   17304:	beq	1746c <__assert_fail@plt+0x6138>
   17308:	movw	r8, #49436	; 0xc11c
   1730c:	movw	r4, #49432	; 0xc118
   17310:	str	r0, [sp, #28]
   17314:	ldr	r0, [r0]
   17318:	movt	r8, #2
   1731c:	movt	r4, #2
   17320:	ldr	r1, [r8]
   17324:	ldr	r6, [r4]
   17328:	str	r0, [sp, #24]
   1732c:	cmp	r1, r5
   17330:	ble	1733c <__assert_fail@plt+0x6008>
   17334:	mov	sl, r6
   17338:	b	173a8 <__assert_fail@plt+0x6074>
   1733c:	movw	r9, #49440	; 0xc120
   17340:	mov	r0, #8
   17344:	str	r1, [fp, #-32]	; 0xffffffe0
   17348:	sub	r1, r5, r1
   1734c:	mvn	r3, #-2147483648	; 0x80000000
   17350:	movt	r9, #2
   17354:	str	r0, [sp]
   17358:	add	r2, r1, #1
   1735c:	sub	r1, fp, #32
   17360:	subs	r0, r6, r9
   17364:	movne	r0, r6
   17368:	bl	184b0 <__assert_fail@plt+0x717c>
   1736c:	mov	sl, r0
   17370:	cmp	r6, r9
   17374:	str	r0, [r4]
   17378:	bne	17384 <__assert_fail@plt+0x6050>
   1737c:	ldrd	r0, [r9]
   17380:	stm	sl, {r0, r1}
   17384:	ldr	r1, [r8]
   17388:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1738c:	add	r0, sl, r1, lsl #3
   17390:	sub	r1, r2, r1
   17394:	lsl	r2, r1, #3
   17398:	mov	r1, #0
   1739c:	bl	11244 <memset@plt>
   173a0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   173a4:	str	r0, [r8]
   173a8:	mov	r9, sl
   173ac:	ldm	r7, {r0, r1}
   173b0:	orr	r8, r1, #1
   173b4:	add	r1, r7, #8
   173b8:	ldr	r2, [r7, #40]	; 0x28
   173bc:	ldr	r3, [r7, #44]	; 0x2c
   173c0:	ldr	r6, [r9, r5, lsl #3]!
   173c4:	str	r1, [sp, #20]
   173c8:	ldr	r4, [r9, #4]!
   173cc:	stm	sp, {r0, r8}
   173d0:	add	r0, sp, #8
   173d4:	stm	r0, {r1, r2, r3}
   173d8:	ldr	r2, [sp, #32]
   173dc:	ldr	r3, [sp, #36]	; 0x24
   173e0:	mov	r1, r6
   173e4:	mov	r0, r4
   173e8:	bl	16064 <__assert_fail@plt+0x4d30>
   173ec:	cmp	r6, r0
   173f0:	bhi	17454 <__assert_fail@plt+0x6120>
   173f4:	add	r6, r0, #1
   173f8:	movw	r0, #49776	; 0xc270
   173fc:	movt	r0, #2
   17400:	str	r6, [sl, r5, lsl #3]
   17404:	cmp	r4, r0
   17408:	beq	17414 <__assert_fail@plt+0x60e0>
   1740c:	mov	r0, r4
   17410:	bl	15ab8 <__assert_fail@plt+0x4784>
   17414:	mov	r0, r6
   17418:	bl	182b0 <__assert_fail@plt+0x6f7c>
   1741c:	str	r0, [r9]
   17420:	mov	r4, r0
   17424:	add	r3, sp, #8
   17428:	ldr	r0, [r7]
   1742c:	ldr	r1, [r7, #40]	; 0x28
   17430:	ldr	r2, [r7, #44]	; 0x2c
   17434:	stm	sp, {r0, r8}
   17438:	ldr	r0, [sp, #20]
   1743c:	stm	r3, {r0, r1, r2}
   17440:	ldr	r2, [sp, #32]
   17444:	ldr	r3, [sp, #36]	; 0x24
   17448:	mov	r0, r4
   1744c:	mov	r1, r6
   17450:	bl	16064 <__assert_fail@plt+0x4d30>
   17454:	ldr	r0, [sp, #28]
   17458:	ldr	r1, [sp, #24]
   1745c:	str	r1, [r0]
   17460:	mov	r0, r4
   17464:	sub	sp, fp, #28
   17468:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1746c:	bl	1131c <abort@plt>
   17470:	movw	r3, #49728	; 0xc240
   17474:	movt	r3, #2
   17478:	b	172d8 <__assert_fail@plt+0x5fa4>
   1747c:	movw	r3, #49728	; 0xc240
   17480:	mov	r1, r0
   17484:	mov	r0, #0
   17488:	mvn	r2, #0
   1748c:	movt	r3, #2
   17490:	b	172d8 <__assert_fail@plt+0x5fa4>
   17494:	movw	r3, #49728	; 0xc240
   17498:	mov	r2, r1
   1749c:	mov	r1, r0
   174a0:	mov	r0, #0
   174a4:	movt	r3, #2
   174a8:	b	172d8 <__assert_fail@plt+0x5fa4>
   174ac:	push	{fp, lr}
   174b0:	mov	fp, sp
   174b4:	sub	sp, sp, #48	; 0x30
   174b8:	vmov.i32	q8, #0	; 0x00000000
   174bc:	mov	ip, #32
   174c0:	mov	r3, sp
   174c4:	mov	lr, r2
   174c8:	cmp	r1, #10
   174cc:	add	r2, r3, #16
   174d0:	vst1.64	{d16-d17}, [r3], ip
   174d4:	vst1.64	{d16-d17}, [r2]
   174d8:	vst1.64	{d16-d17}, [r3]
   174dc:	beq	174fc <__assert_fail@plt+0x61c8>
   174e0:	str	r1, [sp]
   174e4:	mov	r3, sp
   174e8:	mov	r1, lr
   174ec:	mvn	r2, #0
   174f0:	bl	172d8 <__assert_fail@plt+0x5fa4>
   174f4:	mov	sp, fp
   174f8:	pop	{fp, pc}
   174fc:	bl	1131c <abort@plt>
   17500:	push	{r4, sl, fp, lr}
   17504:	add	fp, sp, #8
   17508:	sub	sp, sp, #48	; 0x30
   1750c:	vmov.i32	q8, #0	; 0x00000000
   17510:	mov	ip, r3
   17514:	mov	r3, sp
   17518:	mov	lr, #32
   1751c:	cmp	r1, #10
   17520:	add	r4, r3, #16
   17524:	vst1.64	{d16-d17}, [r3], lr
   17528:	vst1.64	{d16-d17}, [r4]
   1752c:	vst1.64	{d16-d17}, [r3]
   17530:	beq	17550 <__assert_fail@plt+0x621c>
   17534:	str	r1, [sp]
   17538:	mov	r1, r2
   1753c:	mov	r3, sp
   17540:	mov	r2, ip
   17544:	bl	172d8 <__assert_fail@plt+0x5fa4>
   17548:	sub	sp, fp, #8
   1754c:	pop	{r4, sl, fp, pc}
   17550:	bl	1131c <abort@plt>
   17554:	push	{fp, lr}
   17558:	mov	fp, sp
   1755c:	sub	sp, sp, #48	; 0x30
   17560:	vmov.i32	q8, #0	; 0x00000000
   17564:	mov	r3, sp
   17568:	mov	ip, #32
   1756c:	cmp	r0, #10
   17570:	add	r2, r3, #16
   17574:	vst1.64	{d16-d17}, [r3], ip
   17578:	vst1.64	{d16-d17}, [r2]
   1757c:	vst1.64	{d16-d17}, [r3]
   17580:	beq	175a0 <__assert_fail@plt+0x626c>
   17584:	str	r0, [sp]
   17588:	mov	r3, sp
   1758c:	mov	r0, #0
   17590:	mvn	r2, #0
   17594:	bl	172d8 <__assert_fail@plt+0x5fa4>
   17598:	mov	sp, fp
   1759c:	pop	{fp, pc}
   175a0:	bl	1131c <abort@plt>
   175a4:	push	{fp, lr}
   175a8:	mov	fp, sp
   175ac:	sub	sp, sp, #48	; 0x30
   175b0:	vmov.i32	q8, #0	; 0x00000000
   175b4:	mov	r3, sp
   175b8:	mov	ip, #32
   175bc:	cmp	r0, #10
   175c0:	add	lr, r3, #16
   175c4:	vst1.64	{d16-d17}, [r3], ip
   175c8:	vst1.64	{d16-d17}, [lr]
   175cc:	vst1.64	{d16-d17}, [r3]
   175d0:	beq	175ec <__assert_fail@plt+0x62b8>
   175d4:	str	r0, [sp]
   175d8:	mov	r3, sp
   175dc:	mov	r0, #0
   175e0:	bl	172d8 <__assert_fail@plt+0x5fa4>
   175e4:	mov	sp, fp
   175e8:	pop	{fp, pc}
   175ec:	bl	1131c <abort@plt>
   175f0:	push	{r4, sl, fp, lr}
   175f4:	add	fp, sp, #8
   175f8:	sub	sp, sp, #48	; 0x30
   175fc:	mov	lr, r0
   17600:	movw	r0, #49728	; 0xc240
   17604:	mov	ip, r1
   17608:	mov	r1, #32
   1760c:	mov	r4, #1
   17610:	movt	r0, #2
   17614:	add	r3, r0, #16
   17618:	vld1.64	{d16-d17}, [r0], r1
   1761c:	vld1.64	{d20-d21}, [r0]
   17620:	vld1.64	{d18-d19}, [r3]
   17624:	mov	r3, sp
   17628:	add	r0, r3, #32
   1762c:	add	r1, r3, #16
   17630:	vst1.64	{d20-d21}, [r0]
   17634:	mov	r0, #28
   17638:	vst1.64	{d18-d19}, [r1]
   1763c:	mov	r1, r3
   17640:	and	r0, r0, r2, lsr #3
   17644:	and	r2, r2, #31
   17648:	vst1.64	{d16-d17}, [r1], r0
   1764c:	ldr	r0, [r1, #8]
   17650:	bic	r4, r4, r0, lsr r2
   17654:	eor	r0, r0, r4, lsl r2
   17658:	mov	r2, ip
   1765c:	str	r0, [r1, #8]
   17660:	mov	r0, #0
   17664:	mov	r1, lr
   17668:	bl	172d8 <__assert_fail@plt+0x5fa4>
   1766c:	sub	sp, fp, #8
   17670:	pop	{r4, sl, fp, pc}
   17674:	push	{fp, lr}
   17678:	mov	fp, sp
   1767c:	sub	sp, sp, #48	; 0x30
   17680:	mov	ip, r0
   17684:	movw	r0, #49728	; 0xc240
   17688:	mov	r2, #32
   1768c:	movt	r0, #2
   17690:	add	r3, r0, #16
   17694:	vld1.64	{d16-d17}, [r0], r2
   17698:	vld1.64	{d20-d21}, [r0]
   1769c:	vld1.64	{d18-d19}, [r3]
   176a0:	mov	r3, sp
   176a4:	add	r0, r3, #32
   176a8:	add	r2, r3, #16
   176ac:	vst1.64	{d20-d21}, [r0]
   176b0:	mov	r0, #28
   176b4:	vst1.64	{d18-d19}, [r2]
   176b8:	mov	r2, r3
   176bc:	and	r0, r0, r1, lsr #3
   176c0:	and	r1, r1, #31
   176c4:	vst1.64	{d16-d17}, [r2], r0
   176c8:	mov	r0, #1
   176cc:	ldr	lr, [r2, #8]
   176d0:	bic	r0, r0, lr, lsr r1
   176d4:	eor	r0, lr, r0, lsl r1
   176d8:	mov	r1, ip
   176dc:	str	r0, [r2, #8]
   176e0:	mov	r0, #0
   176e4:	mvn	r2, #0
   176e8:	bl	172d8 <__assert_fail@plt+0x5fa4>
   176ec:	mov	sp, fp
   176f0:	pop	{fp, pc}
   176f4:	push	{fp, lr}
   176f8:	mov	fp, sp
   176fc:	sub	sp, sp, #48	; 0x30
   17700:	mov	r1, r0
   17704:	movw	r0, #49728	; 0xc240
   17708:	mov	r3, #32
   1770c:	movt	r0, #2
   17710:	add	r2, r0, #16
   17714:	vld1.64	{d16-d17}, [r0], r3
   17718:	mov	r3, sp
   1771c:	vld1.64	{d18-d19}, [r2]
   17720:	vld1.64	{d20-d21}, [r0]
   17724:	add	r2, r3, #16
   17728:	add	r0, r3, #32
   1772c:	vst1.64	{d18-d19}, [r2]
   17730:	vst1.64	{d20-d21}, [r0]
   17734:	mov	r0, #12
   17738:	mov	r2, r3
   1773c:	vst1.64	{d16-d17}, [r2], r0
   17740:	ldr	r0, [r2]
   17744:	orr	r0, r0, #67108864	; 0x4000000
   17748:	str	r0, [r2]
   1774c:	mov	r0, #0
   17750:	mvn	r2, #0
   17754:	bl	172d8 <__assert_fail@plt+0x5fa4>
   17758:	mov	sp, fp
   1775c:	pop	{fp, pc}
   17760:	push	{fp, lr}
   17764:	mov	fp, sp
   17768:	sub	sp, sp, #48	; 0x30
   1776c:	mov	ip, r1
   17770:	mov	r1, r0
   17774:	movw	r0, #49728	; 0xc240
   17778:	mov	r2, #32
   1777c:	movt	r0, #2
   17780:	add	r3, r0, #16
   17784:	vld1.64	{d16-d17}, [r0], r2
   17788:	vld1.64	{d18-d19}, [r3]
   1778c:	vld1.64	{d20-d21}, [r0]
   17790:	mov	r3, sp
   17794:	add	r2, r3, #16
   17798:	add	r0, r3, #32
   1779c:	vst1.64	{d18-d19}, [r2]
   177a0:	vst1.64	{d20-d21}, [r0]
   177a4:	mov	r0, #12
   177a8:	mov	r2, r3
   177ac:	vst1.64	{d16-d17}, [r2], r0
   177b0:	ldr	r0, [r2]
   177b4:	orr	r0, r0, #67108864	; 0x4000000
   177b8:	str	r0, [r2]
   177bc:	mov	r0, #0
   177c0:	mov	r2, ip
   177c4:	bl	172d8 <__assert_fail@plt+0x5fa4>
   177c8:	mov	sp, fp
   177cc:	pop	{fp, pc}
   177d0:	push	{r4, sl, fp, lr}
   177d4:	add	fp, sp, #8
   177d8:	sub	sp, sp, #96	; 0x60
   177dc:	vmov.i32	q8, #0	; 0x00000000
   177e0:	mov	ip, r2
   177e4:	mov	r2, sp
   177e8:	mov	r4, #28
   177ec:	cmp	r1, #10
   177f0:	mov	r3, r2
   177f4:	add	lr, r2, #16
   177f8:	vst1.64	{d16-d17}, [r3], r4
   177fc:	vst1.64	{d16-d17}, [lr]
   17800:	vst1.32	{d16-d17}, [r3]
   17804:	beq	17854 <__assert_fail@plt+0x6520>
   17808:	vld1.64	{d16-d17}, [r2], r4
   1780c:	vld1.64	{d18-d19}, [lr]
   17810:	add	r3, sp, #48	; 0x30
   17814:	vld1.32	{d20-d21}, [r2]
   17818:	add	r2, r3, #20
   1781c:	add	r4, r3, #4
   17820:	vst1.32	{d18-d19}, [r2]
   17824:	add	r2, r3, #32
   17828:	vst1.32	{d16-d17}, [r4]
   1782c:	vst1.32	{d20-d21}, [r2]
   17830:	str	r1, [sp, #48]	; 0x30
   17834:	mvn	r2, #0
   17838:	ldr	r1, [sp, #60]	; 0x3c
   1783c:	orr	r1, r1, #67108864	; 0x4000000
   17840:	str	r1, [sp, #60]	; 0x3c
   17844:	mov	r1, ip
   17848:	bl	172d8 <__assert_fail@plt+0x5fa4>
   1784c:	sub	sp, fp, #8
   17850:	pop	{r4, sl, fp, pc}
   17854:	bl	1131c <abort@plt>
   17858:	push	{r4, r5, r6, sl, fp, lr}
   1785c:	add	fp, sp, #16
   17860:	sub	sp, sp, #48	; 0x30
   17864:	mov	ip, r3
   17868:	movw	r3, #49728	; 0xc240
   1786c:	mov	r6, #32
   17870:	cmp	r1, #0
   17874:	mov	r4, sp
   17878:	movt	r3, #2
   1787c:	cmpne	r2, #0
   17880:	add	r5, r4, #16
   17884:	add	lr, r3, #16
   17888:	vld1.64	{d16-d17}, [r3], r6
   1788c:	vld1.64	{d18-d19}, [lr]
   17890:	vld1.64	{d20-d21}, [r3]
   17894:	mov	r3, #10
   17898:	vst1.64	{d16-d17}, [r4], r6
   1789c:	vst1.64	{d18-d19}, [r5]
   178a0:	vst1.64	{d20-d21}, [r4]
   178a4:	str	r3, [sp]
   178a8:	bne	178b0 <__assert_fail@plt+0x657c>
   178ac:	bl	1131c <abort@plt>
   178b0:	str	r2, [sp, #44]	; 0x2c
   178b4:	str	r1, [sp, #40]	; 0x28
   178b8:	mov	r3, sp
   178bc:	mov	r1, ip
   178c0:	mvn	r2, #0
   178c4:	bl	172d8 <__assert_fail@plt+0x5fa4>
   178c8:	sub	sp, fp, #16
   178cc:	pop	{r4, r5, r6, sl, fp, pc}
   178d0:	push	{r4, r5, r6, sl, fp, lr}
   178d4:	add	fp, sp, #16
   178d8:	sub	sp, sp, #48	; 0x30
   178dc:	mov	lr, r3
   178e0:	movw	r3, #49728	; 0xc240
   178e4:	mov	r6, #32
   178e8:	cmp	r1, #0
   178ec:	mov	r4, sp
   178f0:	movt	r3, #2
   178f4:	cmpne	r2, #0
   178f8:	add	r5, r4, #16
   178fc:	add	ip, r3, #16
   17900:	vld1.64	{d16-d17}, [r3], r6
   17904:	vld1.64	{d18-d19}, [ip]
   17908:	vld1.64	{d20-d21}, [r3]
   1790c:	mov	r3, #10
   17910:	vst1.64	{d16-d17}, [r4], r6
   17914:	vst1.64	{d18-d19}, [r5]
   17918:	vst1.64	{d20-d21}, [r4]
   1791c:	str	r3, [sp]
   17920:	bne	17928 <__assert_fail@plt+0x65f4>
   17924:	bl	1131c <abort@plt>
   17928:	ldr	ip, [fp, #8]
   1792c:	str	r2, [sp, #44]	; 0x2c
   17930:	str	r1, [sp, #40]	; 0x28
   17934:	mov	r3, sp
   17938:	mov	r1, lr
   1793c:	mov	r2, ip
   17940:	bl	172d8 <__assert_fail@plt+0x5fa4>
   17944:	sub	sp, fp, #16
   17948:	pop	{r4, r5, r6, sl, fp, pc}
   1794c:	push	{r4, sl, fp, lr}
   17950:	add	fp, sp, #8
   17954:	sub	sp, sp, #48	; 0x30
   17958:	movw	r3, #49728	; 0xc240
   1795c:	mov	lr, #32
   17960:	mov	ip, r2
   17964:	cmp	r0, #0
   17968:	movt	r3, #2
   1796c:	cmpne	r1, #0
   17970:	add	r2, r3, #16
   17974:	vld1.64	{d16-d17}, [r3], lr
   17978:	vld1.64	{d20-d21}, [r3]
   1797c:	vld1.64	{d18-d19}, [r2]
   17980:	mov	r2, sp
   17984:	add	r4, r2, #16
   17988:	vst1.64	{d16-d17}, [r2], lr
   1798c:	vst1.64	{d20-d21}, [r2]
   17990:	mov	r2, #10
   17994:	vst1.64	{d18-d19}, [r4]
   17998:	str	r2, [sp]
   1799c:	bne	179a4 <__assert_fail@plt+0x6670>
   179a0:	bl	1131c <abort@plt>
   179a4:	str	r1, [sp, #44]	; 0x2c
   179a8:	str	r0, [sp, #40]	; 0x28
   179ac:	mov	r3, sp
   179b0:	mov	r0, #0
   179b4:	mov	r1, ip
   179b8:	mvn	r2, #0
   179bc:	bl	172d8 <__assert_fail@plt+0x5fa4>
   179c0:	sub	sp, fp, #8
   179c4:	pop	{r4, sl, fp, pc}
   179c8:	push	{r4, r5, fp, lr}
   179cc:	add	fp, sp, #8
   179d0:	sub	sp, sp, #48	; 0x30
   179d4:	mov	ip, r3
   179d8:	movw	r3, #49728	; 0xc240
   179dc:	mov	r4, #32
   179e0:	mov	lr, r2
   179e4:	cmp	r0, #0
   179e8:	movt	r3, #2
   179ec:	cmpne	r1, #0
   179f0:	add	r2, r3, #16
   179f4:	vld1.64	{d16-d17}, [r3], r4
   179f8:	vld1.64	{d20-d21}, [r3]
   179fc:	vld1.64	{d18-d19}, [r2]
   17a00:	mov	r2, sp
   17a04:	add	r5, r2, #16
   17a08:	vst1.64	{d16-d17}, [r2], r4
   17a0c:	vst1.64	{d20-d21}, [r2]
   17a10:	mov	r2, #10
   17a14:	vst1.64	{d18-d19}, [r5]
   17a18:	str	r2, [sp]
   17a1c:	bne	17a24 <__assert_fail@plt+0x66f0>
   17a20:	bl	1131c <abort@plt>
   17a24:	str	r1, [sp, #44]	; 0x2c
   17a28:	str	r0, [sp, #40]	; 0x28
   17a2c:	mov	r3, sp
   17a30:	mov	r0, #0
   17a34:	mov	r1, lr
   17a38:	mov	r2, ip
   17a3c:	bl	172d8 <__assert_fail@plt+0x5fa4>
   17a40:	sub	sp, fp, #8
   17a44:	pop	{r4, r5, fp, pc}
   17a48:	movw	r3, #49448	; 0xc128
   17a4c:	movt	r3, #2
   17a50:	b	172d8 <__assert_fail@plt+0x5fa4>
   17a54:	movw	r3, #49448	; 0xc128
   17a58:	mov	r2, r1
   17a5c:	mov	r1, r0
   17a60:	mov	r0, #0
   17a64:	movt	r3, #2
   17a68:	b	172d8 <__assert_fail@plt+0x5fa4>
   17a6c:	movw	r3, #49448	; 0xc128
   17a70:	mvn	r2, #0
   17a74:	movt	r3, #2
   17a78:	b	172d8 <__assert_fail@plt+0x5fa4>
   17a7c:	movw	r3, #49448	; 0xc128
   17a80:	mov	r1, r0
   17a84:	mov	r0, #0
   17a88:	mvn	r2, #0
   17a8c:	movt	r3, #2
   17a90:	b	172d8 <__assert_fail@plt+0x5fa4>
   17a94:	push	{r4, r5, fp, lr}
   17a98:	add	fp, sp, #8
   17a9c:	mov	r5, r0
   17aa0:	mov	r4, r1
   17aa4:	mov	r0, #0
   17aa8:	mov	r2, #5
   17aac:	mov	r1, r5
   17ab0:	bl	11100 <dcgettext@plt>
   17ab4:	cmp	r0, r5
   17ab8:	popne	{r4, r5, fp, pc}
   17abc:	bl	19908 <__assert_fail@plt+0x85d4>
   17ac0:	ldrb	r1, [r0]
   17ac4:	and	r1, r1, #223	; 0xdf
   17ac8:	cmp	r1, #71	; 0x47
   17acc:	beq	17b34 <__assert_fail@plt+0x6800>
   17ad0:	cmp	r1, #85	; 0x55
   17ad4:	bne	17b8c <__assert_fail@plt+0x6858>
   17ad8:	ldrb	r1, [r0, #1]
   17adc:	and	r1, r1, #223	; 0xdf
   17ae0:	cmp	r1, #84	; 0x54
   17ae4:	bne	17b8c <__assert_fail@plt+0x6858>
   17ae8:	ldrb	r1, [r0, #2]
   17aec:	and	r1, r1, #223	; 0xdf
   17af0:	cmp	r1, #70	; 0x46
   17af4:	bne	17b8c <__assert_fail@plt+0x6858>
   17af8:	ldrb	r1, [r0, #3]
   17afc:	cmp	r1, #45	; 0x2d
   17b00:	bne	17b8c <__assert_fail@plt+0x6858>
   17b04:	ldrb	r1, [r0, #4]
   17b08:	cmp	r1, #56	; 0x38
   17b0c:	bne	17b8c <__assert_fail@plt+0x6858>
   17b10:	ldrb	r0, [r0, #5]
   17b14:	cmp	r0, #0
   17b18:	bne	17b8c <__assert_fail@plt+0x6858>
   17b1c:	ldrb	r1, [r5]
   17b20:	movw	r2, #46192	; 0xb470
   17b24:	movw	r0, #46196	; 0xb474
   17b28:	movt	r2, #1
   17b2c:	movt	r0, #1
   17b30:	b	17bbc <__assert_fail@plt+0x6888>
   17b34:	ldrb	r1, [r0, #1]
   17b38:	and	r1, r1, #223	; 0xdf
   17b3c:	cmp	r1, #66	; 0x42
   17b40:	bne	17b8c <__assert_fail@plt+0x6858>
   17b44:	ldrb	r1, [r0, #2]
   17b48:	cmp	r1, #49	; 0x31
   17b4c:	bne	17b8c <__assert_fail@plt+0x6858>
   17b50:	ldrb	r1, [r0, #3]
   17b54:	cmp	r1, #56	; 0x38
   17b58:	bne	17b8c <__assert_fail@plt+0x6858>
   17b5c:	ldrb	r1, [r0, #4]
   17b60:	cmp	r1, #48	; 0x30
   17b64:	bne	17b8c <__assert_fail@plt+0x6858>
   17b68:	ldrb	r1, [r0, #5]
   17b6c:	cmp	r1, #51	; 0x33
   17b70:	bne	17b8c <__assert_fail@plt+0x6858>
   17b74:	ldrb	r1, [r0, #6]
   17b78:	cmp	r1, #48	; 0x30
   17b7c:	bne	17b8c <__assert_fail@plt+0x6858>
   17b80:	ldrb	r0, [r0, #7]
   17b84:	cmp	r0, #0
   17b88:	beq	17ba8 <__assert_fail@plt+0x6874>
   17b8c:	movw	r1, #46188	; 0xb46c
   17b90:	movw	r0, #47153	; 0xb831
   17b94:	cmp	r4, #9
   17b98:	movt	r1, #1
   17b9c:	movt	r0, #1
   17ba0:	moveq	r0, r1
   17ba4:	pop	{r4, r5, fp, pc}
   17ba8:	ldrb	r1, [r5]
   17bac:	movw	r2, #46200	; 0xb478
   17bb0:	movw	r0, #46204	; 0xb47c
   17bb4:	movt	r2, #1
   17bb8:	movt	r0, #1
   17bbc:	cmp	r1, #96	; 0x60
   17bc0:	moveq	r0, r2
   17bc4:	pop	{r4, r5, fp, pc}
   17bc8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17bcc:	add	fp, sp, #24
   17bd0:	sub	sp, sp, #32
   17bd4:	ldr	r6, [fp, #12]
   17bd8:	ldr	r7, [fp, #8]
   17bdc:	mov	r4, r2
   17be0:	mov	r8, r0
   17be4:	cmp	r1, #0
   17be8:	beq	17c10 <__assert_fail@plt+0x68dc>
   17bec:	movw	r2, #46292	; 0xb4d4
   17bf0:	mov	r5, r1
   17bf4:	str	r3, [sp, #4]
   17bf8:	str	r4, [sp]
   17bfc:	mov	r0, r8
   17c00:	mov	r1, #1
   17c04:	movt	r2, #1
   17c08:	mov	r3, r5
   17c0c:	b	17c28 <__assert_fail@plt+0x68f4>
   17c10:	movw	r2, #46304	; 0xb4e0
   17c14:	str	r3, [sp]
   17c18:	mov	r0, r8
   17c1c:	mov	r1, #1
   17c20:	mov	r3, r4
   17c24:	movt	r2, #1
   17c28:	bl	11280 <__fprintf_chk@plt>
   17c2c:	movw	r1, #46311	; 0xb4e7
   17c30:	mov	r0, #0
   17c34:	mov	r2, #5
   17c38:	movt	r1, #1
   17c3c:	bl	11100 <dcgettext@plt>
   17c40:	movw	r2, #47029	; 0xb7b5
   17c44:	mov	r3, r0
   17c48:	movw	r0, #2022	; 0x7e6
   17c4c:	mov	r1, #1
   17c50:	movt	r2, #1
   17c54:	str	r0, [sp]
   17c58:	mov	r0, r8
   17c5c:	bl	11280 <__fprintf_chk@plt>
   17c60:	movw	r4, #44294	; 0xad06
   17c64:	mov	r1, r8
   17c68:	movt	r4, #1
   17c6c:	mov	r0, r4
   17c70:	bl	1107c <fputs_unlocked@plt>
   17c74:	movw	r1, #46315	; 0xb4eb
   17c78:	mov	r0, #0
   17c7c:	mov	r2, #5
   17c80:	movt	r1, #1
   17c84:	bl	11100 <dcgettext@plt>
   17c88:	movw	r3, #46486	; 0xb596
   17c8c:	mov	r2, r0
   17c90:	mov	r0, r8
   17c94:	mov	r1, #1
   17c98:	movt	r3, #1
   17c9c:	bl	11280 <__fprintf_chk@plt>
   17ca0:	mov	r0, r4
   17ca4:	mov	r1, r8
   17ca8:	bl	1107c <fputs_unlocked@plt>
   17cac:	cmp	r6, #9
   17cb0:	bhi	17cec <__assert_fail@plt+0x69b8>
   17cb4:	add	r0, pc, #0
   17cb8:	ldr	pc, [r0, r6, lsl #2]
   17cbc:	andeq	r7, r1, r4, ror #25
   17cc0:	strdeq	r7, [r1], -r8
   17cc4:	andeq	r7, r1, r8, lsr #26
   17cc8:	andeq	r7, r1, r0, asr sp
   17ccc:	andeq	r7, r1, r8, ror sp
   17cd0:	andeq	r7, r1, r0, lsr #27
   17cd4:	andeq	r7, r1, r8, asr #27
   17cd8:	andeq	r7, r1, r0, lsl #28
   17cdc:	andeq	r7, r1, r0, lsr #29
   17ce0:	andeq	r7, r1, r8, asr #28
   17ce4:	sub	sp, fp, #24
   17ce8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17cec:	movw	r1, #46839	; 0xb6f7
   17cf0:	movt	r1, #1
   17cf4:	b	17e50 <__assert_fail@plt+0x6b1c>
   17cf8:	movw	r1, #46520	; 0xb5b8
   17cfc:	mov	r0, #0
   17d00:	mov	r2, #5
   17d04:	movt	r1, #1
   17d08:	bl	11100 <dcgettext@plt>
   17d0c:	ldr	r3, [r7]
   17d10:	mov	r2, r0
   17d14:	mov	r0, r8
   17d18:	mov	r1, #1
   17d1c:	sub	sp, fp, #24
   17d20:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   17d24:	b	11280 <__fprintf_chk@plt>
   17d28:	movw	r1, #46536	; 0xb5c8
   17d2c:	mov	r0, #0
   17d30:	mov	r2, #5
   17d34:	movt	r1, #1
   17d38:	bl	11100 <dcgettext@plt>
   17d3c:	mov	r2, r0
   17d40:	ldr	r3, [r7]
   17d44:	ldr	r0, [r7, #4]
   17d48:	str	r0, [sp]
   17d4c:	b	17e3c <__assert_fail@plt+0x6b08>
   17d50:	movw	r1, #46559	; 0xb5df
   17d54:	mov	r0, #0
   17d58:	mov	r2, #5
   17d5c:	movt	r1, #1
   17d60:	bl	11100 <dcgettext@plt>
   17d64:	mov	r2, r0
   17d68:	ldr	r3, [r7]
   17d6c:	ldmib	r7, {r0, r1}
   17d70:	stm	sp, {r0, r1}
   17d74:	b	17e3c <__assert_fail@plt+0x6b08>
   17d78:	movw	r1, #46587	; 0xb5fb
   17d7c:	mov	r0, #0
   17d80:	mov	r2, #5
   17d84:	movt	r1, #1
   17d88:	bl	11100 <dcgettext@plt>
   17d8c:	ldr	r3, [r7]
   17d90:	mov	r2, r0
   17d94:	ldmib	r7, {r0, r1, r7}
   17d98:	stm	sp, {r0, r1, r7}
   17d9c:	b	17e3c <__assert_fail@plt+0x6b08>
   17da0:	movw	r1, #46619	; 0xb61b
   17da4:	mov	r0, #0
   17da8:	mov	r2, #5
   17dac:	movt	r1, #1
   17db0:	bl	11100 <dcgettext@plt>
   17db4:	ldr	r3, [r7]
   17db8:	mov	r2, r0
   17dbc:	ldmib	r7, {r0, r1, r6, r7}
   17dc0:	stm	sp, {r0, r1, r6, r7}
   17dc4:	b	17e3c <__assert_fail@plt+0x6b08>
   17dc8:	movw	r1, #46655	; 0xb63f
   17dcc:	mov	r0, #0
   17dd0:	mov	r2, #5
   17dd4:	movt	r1, #1
   17dd8:	bl	11100 <dcgettext@plt>
   17ddc:	mov	r2, r0
   17de0:	ldr	r3, [r7]
   17de4:	ldmib	r7, {r0, r1, r6}
   17de8:	ldr	r5, [r7, #16]
   17dec:	ldr	r7, [r7, #20]
   17df0:	stm	sp, {r0, r1, r6}
   17df4:	str	r5, [sp, #12]
   17df8:	str	r7, [sp, #16]
   17dfc:	b	17e3c <__assert_fail@plt+0x6b08>
   17e00:	movw	r1, #46695	; 0xb667
   17e04:	mov	r0, #0
   17e08:	mov	r2, #5
   17e0c:	movt	r1, #1
   17e10:	bl	11100 <dcgettext@plt>
   17e14:	mov	r2, r0
   17e18:	ldr	r3, [r7]
   17e1c:	ldmib	r7, {r0, r1, r6}
   17e20:	ldr	r5, [r7, #16]
   17e24:	ldr	r4, [r7, #20]
   17e28:	ldr	r7, [r7, #24]
   17e2c:	stm	sp, {r0, r1, r6}
   17e30:	str	r5, [sp, #12]
   17e34:	str	r4, [sp, #16]
   17e38:	str	r7, [sp, #20]
   17e3c:	mov	r0, r8
   17e40:	mov	r1, #1
   17e44:	b	17ef0 <__assert_fail@plt+0x6bbc>
   17e48:	movw	r1, #46787	; 0xb6c3
   17e4c:	movt	r1, #1
   17e50:	mov	r0, #0
   17e54:	mov	r2, #5
   17e58:	bl	11100 <dcgettext@plt>
   17e5c:	mov	ip, r0
   17e60:	ldr	r3, [r7]
   17e64:	ldr	r0, [r7, #4]
   17e68:	ldr	r1, [r7, #8]
   17e6c:	ldr	r6, [r7, #12]
   17e70:	ldr	r5, [r7, #16]
   17e74:	ldr	r4, [r7, #20]
   17e78:	ldr	r2, [r7, #24]
   17e7c:	ldr	lr, [r7, #28]
   17e80:	ldr	r7, [r7, #32]
   17e84:	stm	sp, {r0, r1, r6}
   17e88:	str	r5, [sp, #12]
   17e8c:	str	r4, [sp, #16]
   17e90:	str	r2, [sp, #20]
   17e94:	str	lr, [sp, #24]
   17e98:	str	r7, [sp, #28]
   17e9c:	b	17ee4 <__assert_fail@plt+0x6bb0>
   17ea0:	movw	r1, #46739	; 0xb693
   17ea4:	mov	r0, #0
   17ea8:	mov	r2, #5
   17eac:	movt	r1, #1
   17eb0:	bl	11100 <dcgettext@plt>
   17eb4:	mov	ip, r0
   17eb8:	ldr	r3, [r7]
   17ebc:	ldmib	r7, {r0, r1, r6}
   17ec0:	ldr	r5, [r7, #16]
   17ec4:	ldr	r4, [r7, #20]
   17ec8:	ldr	r2, [r7, #24]
   17ecc:	ldr	r7, [r7, #28]
   17ed0:	stm	sp, {r0, r1, r6}
   17ed4:	str	r5, [sp, #12]
   17ed8:	str	r4, [sp, #16]
   17edc:	str	r2, [sp, #20]
   17ee0:	str	r7, [sp, #24]
   17ee4:	mov	r0, r8
   17ee8:	mov	r1, #1
   17eec:	mov	r2, ip
   17ef0:	bl	11280 <__fprintf_chk@plt>
   17ef4:	sub	sp, fp, #24
   17ef8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17efc:	push	{r4, sl, fp, lr}
   17f00:	add	fp, sp, #8
   17f04:	sub	sp, sp, #8
   17f08:	ldr	ip, [fp, #8]
   17f0c:	mov	lr, #0
   17f10:	ldr	r4, [ip, lr, lsl #2]
   17f14:	add	lr, lr, #1
   17f18:	cmp	r4, #0
   17f1c:	bne	17f10 <__assert_fail@plt+0x6bdc>
   17f20:	sub	r4, lr, #1
   17f24:	str	ip, [sp]
   17f28:	str	r4, [sp, #4]
   17f2c:	bl	17bc8 <__assert_fail@plt+0x6894>
   17f30:	sub	sp, fp, #8
   17f34:	pop	{r4, sl, fp, pc}
   17f38:	push	{fp, lr}
   17f3c:	mov	fp, sp
   17f40:	sub	sp, sp, #48	; 0x30
   17f44:	ldr	ip, [fp, #8]
   17f48:	ldr	lr, [ip]
   17f4c:	cmp	lr, #0
   17f50:	str	lr, [sp, #8]
   17f54:	beq	17ff0 <__assert_fail@plt+0x6cbc>
   17f58:	ldr	lr, [ip, #4]
   17f5c:	cmp	lr, #0
   17f60:	str	lr, [sp, #12]
   17f64:	beq	17ff8 <__assert_fail@plt+0x6cc4>
   17f68:	ldr	lr, [ip, #8]
   17f6c:	cmp	lr, #0
   17f70:	str	lr, [sp, #16]
   17f74:	beq	18000 <__assert_fail@plt+0x6ccc>
   17f78:	ldr	lr, [ip, #12]
   17f7c:	cmp	lr, #0
   17f80:	str	lr, [sp, #20]
   17f84:	beq	18008 <__assert_fail@plt+0x6cd4>
   17f88:	ldr	lr, [ip, #16]
   17f8c:	cmp	lr, #0
   17f90:	str	lr, [sp, #24]
   17f94:	beq	18010 <__assert_fail@plt+0x6cdc>
   17f98:	ldr	lr, [ip, #20]
   17f9c:	cmp	lr, #0
   17fa0:	str	lr, [sp, #28]
   17fa4:	beq	18018 <__assert_fail@plt+0x6ce4>
   17fa8:	ldr	lr, [ip, #24]
   17fac:	cmp	lr, #0
   17fb0:	str	lr, [sp, #32]
   17fb4:	beq	18020 <__assert_fail@plt+0x6cec>
   17fb8:	ldr	lr, [ip, #28]
   17fbc:	cmp	lr, #0
   17fc0:	str	lr, [sp, #36]	; 0x24
   17fc4:	beq	18028 <__assert_fail@plt+0x6cf4>
   17fc8:	ldr	lr, [ip, #32]
   17fcc:	cmp	lr, #0
   17fd0:	str	lr, [sp, #40]	; 0x28
   17fd4:	beq	18030 <__assert_fail@plt+0x6cfc>
   17fd8:	ldr	lr, [ip, #36]	; 0x24
   17fdc:	mov	ip, #10
   17fe0:	cmp	lr, #0
   17fe4:	str	lr, [sp, #44]	; 0x2c
   17fe8:	movweq	ip, #9
   17fec:	b	18034 <__assert_fail@plt+0x6d00>
   17ff0:	mov	ip, #0
   17ff4:	b	18034 <__assert_fail@plt+0x6d00>
   17ff8:	mov	ip, #1
   17ffc:	b	18034 <__assert_fail@plt+0x6d00>
   18000:	mov	ip, #2
   18004:	b	18034 <__assert_fail@plt+0x6d00>
   18008:	mov	ip, #3
   1800c:	b	18034 <__assert_fail@plt+0x6d00>
   18010:	mov	ip, #4
   18014:	b	18034 <__assert_fail@plt+0x6d00>
   18018:	mov	ip, #5
   1801c:	b	18034 <__assert_fail@plt+0x6d00>
   18020:	mov	ip, #6
   18024:	b	18034 <__assert_fail@plt+0x6d00>
   18028:	mov	ip, #7
   1802c:	b	18034 <__assert_fail@plt+0x6d00>
   18030:	mov	ip, #8
   18034:	add	lr, sp, #8
   18038:	str	ip, [sp, #4]
   1803c:	str	lr, [sp]
   18040:	bl	17bc8 <__assert_fail@plt+0x6894>
   18044:	mov	sp, fp
   18048:	pop	{fp, pc}
   1804c:	push	{fp, lr}
   18050:	mov	fp, sp
   18054:	sub	sp, sp, #56	; 0x38
   18058:	add	ip, fp, #8
   1805c:	str	ip, [sp, #12]
   18060:	ldr	lr, [fp, #8]
   18064:	cmp	lr, #0
   18068:	str	lr, [sp, #16]
   1806c:	beq	18108 <__assert_fail@plt+0x6dd4>
   18070:	ldr	lr, [ip, #4]
   18074:	cmp	lr, #0
   18078:	str	lr, [sp, #20]
   1807c:	beq	18110 <__assert_fail@plt+0x6ddc>
   18080:	ldr	lr, [ip, #8]
   18084:	cmp	lr, #0
   18088:	str	lr, [sp, #24]
   1808c:	beq	18118 <__assert_fail@plt+0x6de4>
   18090:	ldr	lr, [ip, #12]
   18094:	cmp	lr, #0
   18098:	str	lr, [sp, #28]
   1809c:	beq	18120 <__assert_fail@plt+0x6dec>
   180a0:	ldr	lr, [ip, #16]
   180a4:	cmp	lr, #0
   180a8:	str	lr, [sp, #32]
   180ac:	beq	18128 <__assert_fail@plt+0x6df4>
   180b0:	ldr	lr, [ip, #20]
   180b4:	cmp	lr, #0
   180b8:	str	lr, [sp, #36]	; 0x24
   180bc:	beq	18130 <__assert_fail@plt+0x6dfc>
   180c0:	ldr	lr, [ip, #24]
   180c4:	cmp	lr, #0
   180c8:	str	lr, [sp, #40]	; 0x28
   180cc:	beq	18138 <__assert_fail@plt+0x6e04>
   180d0:	ldr	lr, [ip, #28]
   180d4:	cmp	lr, #0
   180d8:	str	lr, [sp, #44]	; 0x2c
   180dc:	beq	18140 <__assert_fail@plt+0x6e0c>
   180e0:	ldr	lr, [ip, #32]
   180e4:	cmp	lr, #0
   180e8:	str	lr, [sp, #48]	; 0x30
   180ec:	beq	18148 <__assert_fail@plt+0x6e14>
   180f0:	ldr	lr, [ip, #36]	; 0x24
   180f4:	mov	ip, #10
   180f8:	cmp	lr, #0
   180fc:	str	lr, [sp, #52]	; 0x34
   18100:	movweq	ip, #9
   18104:	b	1814c <__assert_fail@plt+0x6e18>
   18108:	mov	ip, #0
   1810c:	b	1814c <__assert_fail@plt+0x6e18>
   18110:	mov	ip, #1
   18114:	b	1814c <__assert_fail@plt+0x6e18>
   18118:	mov	ip, #2
   1811c:	b	1814c <__assert_fail@plt+0x6e18>
   18120:	mov	ip, #3
   18124:	b	1814c <__assert_fail@plt+0x6e18>
   18128:	mov	ip, #4
   1812c:	b	1814c <__assert_fail@plt+0x6e18>
   18130:	mov	ip, #5
   18134:	b	1814c <__assert_fail@plt+0x6e18>
   18138:	mov	ip, #6
   1813c:	b	1814c <__assert_fail@plt+0x6e18>
   18140:	mov	ip, #7
   18144:	b	1814c <__assert_fail@plt+0x6e18>
   18148:	mov	ip, #8
   1814c:	add	lr, sp, #16
   18150:	str	ip, [sp, #4]
   18154:	str	lr, [sp]
   18158:	bl	17bc8 <__assert_fail@plt+0x6894>
   1815c:	mov	sp, fp
   18160:	pop	{fp, pc}
   18164:	push	{fp, lr}
   18168:	mov	fp, sp
   1816c:	movw	r0, #49524	; 0xc174
   18170:	movt	r0, #2
   18174:	ldr	r1, [r0]
   18178:	movw	r0, #44294	; 0xad06
   1817c:	movt	r0, #1
   18180:	bl	1107c <fputs_unlocked@plt>
   18184:	movw	r1, #46899	; 0xb733
   18188:	mov	r0, #0
   1818c:	mov	r2, #5
   18190:	movt	r1, #1
   18194:	bl	11100 <dcgettext@plt>
   18198:	movw	r2, #46919	; 0xb747
   1819c:	mov	r1, r0
   181a0:	mov	r0, #1
   181a4:	movt	r2, #1
   181a8:	bl	1125c <__printf_chk@plt>
   181ac:	movw	r1, #46941	; 0xb75d
   181b0:	mov	r0, #0
   181b4:	mov	r2, #5
   181b8:	movt	r1, #1
   181bc:	bl	11100 <dcgettext@plt>
   181c0:	movw	r2, #43619	; 0xaa63
   181c4:	movw	r3, #44103	; 0xac47
   181c8:	mov	r1, r0
   181cc:	mov	r0, #1
   181d0:	movt	r2, #1
   181d4:	movt	r3, #1
   181d8:	bl	1125c <__printf_chk@plt>
   181dc:	movw	r1, #46961	; 0xb771
   181e0:	mov	r0, #0
   181e4:	mov	r2, #5
   181e8:	movt	r1, #1
   181ec:	bl	11100 <dcgettext@plt>
   181f0:	movw	r2, #47000	; 0xb798
   181f4:	mov	r1, r0
   181f8:	mov	r0, #1
   181fc:	movt	r2, #1
   18200:	pop	{fp, lr}
   18204:	b	1125c <__printf_chk@plt>
   18208:	push	{r4, r5, r6, sl, fp, lr}
   1820c:	add	fp, sp, #16
   18210:	mov	r4, r2
   18214:	mov	r5, r1
   18218:	mov	r6, r0
   1821c:	bl	199a4 <__assert_fail@plt+0x8670>
   18220:	cmp	r0, #0
   18224:	popne	{r4, r5, r6, sl, fp, pc}
   18228:	cmp	r6, #0
   1822c:	beq	18240 <__assert_fail@plt+0x6f0c>
   18230:	cmp	r5, #0
   18234:	cmpne	r4, #0
   18238:	bne	18240 <__assert_fail@plt+0x6f0c>
   1823c:	pop	{r4, r5, r6, sl, fp, pc}
   18240:	bl	187bc <__assert_fail@plt+0x7488>
   18244:	push	{r4, r5, r6, sl, fp, lr}
   18248:	add	fp, sp, #16
   1824c:	mov	r4, r2
   18250:	mov	r5, r1
   18254:	mov	r6, r0
   18258:	bl	199a4 <__assert_fail@plt+0x8670>
   1825c:	cmp	r0, #0
   18260:	popne	{r4, r5, r6, sl, fp, pc}
   18264:	cmp	r6, #0
   18268:	beq	1827c <__assert_fail@plt+0x6f48>
   1826c:	cmp	r5, #0
   18270:	cmpne	r4, #0
   18274:	bne	1827c <__assert_fail@plt+0x6f48>
   18278:	pop	{r4, r5, r6, sl, fp, pc}
   1827c:	bl	187bc <__assert_fail@plt+0x7488>
   18280:	push	{fp, lr}
   18284:	mov	fp, sp
   18288:	bl	19800 <__assert_fail@plt+0x84cc>
   1828c:	cmp	r0, #0
   18290:	popne	{fp, pc}
   18294:	bl	187bc <__assert_fail@plt+0x7488>
   18298:	push	{fp, lr}
   1829c:	mov	fp, sp
   182a0:	bl	19800 <__assert_fail@plt+0x84cc>
   182a4:	cmp	r0, #0
   182a8:	popne	{fp, pc}
   182ac:	bl	187bc <__assert_fail@plt+0x7488>
   182b0:	push	{fp, lr}
   182b4:	mov	fp, sp
   182b8:	bl	19800 <__assert_fail@plt+0x84cc>
   182bc:	cmp	r0, #0
   182c0:	popne	{fp, pc}
   182c4:	bl	187bc <__assert_fail@plt+0x7488>
   182c8:	push	{r4, r5, fp, lr}
   182cc:	add	fp, sp, #8
   182d0:	mov	r4, r1
   182d4:	mov	r5, r0
   182d8:	bl	19830 <__assert_fail@plt+0x84fc>
   182dc:	cmp	r0, #0
   182e0:	popne	{r4, r5, fp, pc}
   182e4:	cmp	r5, #0
   182e8:	beq	182f8 <__assert_fail@plt+0x6fc4>
   182ec:	cmp	r4, #0
   182f0:	bne	182f8 <__assert_fail@plt+0x6fc4>
   182f4:	pop	{r4, r5, fp, pc}
   182f8:	bl	187bc <__assert_fail@plt+0x7488>
   182fc:	push	{fp, lr}
   18300:	mov	fp, sp
   18304:	cmp	r1, #0
   18308:	orreq	r1, r1, #1
   1830c:	bl	19830 <__assert_fail@plt+0x84fc>
   18310:	cmp	r0, #0
   18314:	popne	{fp, pc}
   18318:	bl	187bc <__assert_fail@plt+0x7488>
   1831c:	push	{fp, lr}
   18320:	mov	fp, sp
   18324:	clz	r3, r2
   18328:	lsr	ip, r3, #5
   1832c:	clz	r3, r1
   18330:	lsr	r3, r3, #5
   18334:	orrs	r3, r3, ip
   18338:	movwne	r1, #1
   1833c:	movwne	r2, #1
   18340:	bl	199a4 <__assert_fail@plt+0x8670>
   18344:	cmp	r0, #0
   18348:	popne	{fp, pc}
   1834c:	bl	187bc <__assert_fail@plt+0x7488>
   18350:	push	{fp, lr}
   18354:	mov	fp, sp
   18358:	mov	r2, r1
   1835c:	mov	r1, r0
   18360:	mov	r0, #0
   18364:	bl	199a4 <__assert_fail@plt+0x8670>
   18368:	cmp	r0, #0
   1836c:	popne	{fp, pc}
   18370:	bl	187bc <__assert_fail@plt+0x7488>
   18374:	push	{fp, lr}
   18378:	mov	fp, sp
   1837c:	mov	r2, r1
   18380:	mov	r1, r0
   18384:	clz	r0, r2
   18388:	clz	r3, r1
   1838c:	lsr	r0, r0, #5
   18390:	lsr	r3, r3, #5
   18394:	orrs	r0, r3, r0
   18398:	mov	r0, #0
   1839c:	movwne	r1, #1
   183a0:	movwne	r2, #1
   183a4:	bl	199a4 <__assert_fail@plt+0x8670>
   183a8:	cmp	r0, #0
   183ac:	popne	{fp, pc}
   183b0:	bl	187bc <__assert_fail@plt+0x7488>
   183b4:	push	{r4, r5, r6, sl, fp, lr}
   183b8:	add	fp, sp, #16
   183bc:	ldr	r5, [r1]
   183c0:	mov	r4, r1
   183c4:	mov	r6, r0
   183c8:	cmp	r0, #0
   183cc:	beq	183e4 <__assert_fail@plt+0x70b0>
   183d0:	mov	r0, #1
   183d4:	add	r0, r0, r5, lsr #1
   183d8:	adds	r5, r5, r0
   183dc:	bcc	183ec <__assert_fail@plt+0x70b8>
   183e0:	b	18428 <__assert_fail@plt+0x70f4>
   183e4:	cmp	r5, #0
   183e8:	movweq	r5, #64	; 0x40
   183ec:	mov	r0, r6
   183f0:	mov	r1, r5
   183f4:	mov	r2, #1
   183f8:	bl	199a4 <__assert_fail@plt+0x8670>
   183fc:	cmp	r5, #0
   18400:	mov	r1, r5
   18404:	movwne	r1, #1
   18408:	cmp	r0, #0
   1840c:	bne	18420 <__assert_fail@plt+0x70ec>
   18410:	clz	r2, r6
   18414:	lsr	r2, r2, #5
   18418:	orrs	r1, r2, r1
   1841c:	bne	18428 <__assert_fail@plt+0x70f4>
   18420:	str	r5, [r4]
   18424:	pop	{r4, r5, r6, sl, fp, pc}
   18428:	bl	187bc <__assert_fail@plt+0x7488>
   1842c:	push	{r4, r5, r6, r7, fp, lr}
   18430:	add	fp, sp, #16
   18434:	ldr	r5, [r1]
   18438:	mov	r6, r2
   1843c:	mov	r4, r1
   18440:	mov	r7, r0
   18444:	cmp	r0, #0
   18448:	beq	18460 <__assert_fail@plt+0x712c>
   1844c:	mov	r0, #1
   18450:	add	r0, r0, r5, lsr #1
   18454:	adds	r5, r5, r0
   18458:	bcc	18478 <__assert_fail@plt+0x7144>
   1845c:	b	184ac <__assert_fail@plt+0x7178>
   18460:	cmp	r5, #0
   18464:	bne	18478 <__assert_fail@plt+0x7144>
   18468:	mov	r0, #64	; 0x40
   1846c:	cmp	r6, #64	; 0x40
   18470:	udiv	r5, r0, r6
   18474:	addhi	r5, r5, #1
   18478:	mov	r0, r7
   1847c:	mov	r1, r5
   18480:	mov	r2, r6
   18484:	bl	199a4 <__assert_fail@plt+0x8670>
   18488:	cmp	r0, #0
   1848c:	bne	184a4 <__assert_fail@plt+0x7170>
   18490:	cmp	r7, #0
   18494:	beq	184ac <__assert_fail@plt+0x7178>
   18498:	cmp	r6, #0
   1849c:	cmpne	r5, #0
   184a0:	bne	184ac <__assert_fail@plt+0x7178>
   184a4:	str	r5, [r4]
   184a8:	pop	{r4, r5, r6, r7, fp, pc}
   184ac:	bl	187bc <__assert_fail@plt+0x7488>
   184b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   184b4:	add	fp, sp, #24
   184b8:	mov	r8, r1
   184bc:	ldr	r1, [r1]
   184c0:	mov	r5, r0
   184c4:	add	r0, r1, r1, asr #1
   184c8:	cmp	r0, r1
   184cc:	mvnvs	r0, #-2147483648	; 0x80000000
   184d0:	cmp	r0, r3
   184d4:	mov	r7, r0
   184d8:	movgt	r7, r3
   184dc:	cmn	r3, #1
   184e0:	movle	r7, r0
   184e4:	ldr	r0, [fp, #8]
   184e8:	cmn	r0, #1
   184ec:	ble	18514 <__assert_fail@plt+0x71e0>
   184f0:	cmp	r0, #0
   184f4:	beq	18568 <__assert_fail@plt+0x7234>
   184f8:	cmn	r7, #1
   184fc:	ble	1853c <__assert_fail@plt+0x7208>
   18500:	mvn	r4, #-2147483648	; 0x80000000
   18504:	udiv	r6, r4, r0
   18508:	cmp	r6, r7
   1850c:	bge	18568 <__assert_fail@plt+0x7234>
   18510:	b	18578 <__assert_fail@plt+0x7244>
   18514:	cmn	r7, #1
   18518:	ble	18558 <__assert_fail@plt+0x7224>
   1851c:	cmn	r0, #1
   18520:	beq	18568 <__assert_fail@plt+0x7234>
   18524:	mov	r6, #-2147483648	; 0x80000000
   18528:	mvn	r4, #-2147483648	; 0x80000000
   1852c:	sdiv	r6, r6, r0
   18530:	cmp	r6, r7
   18534:	bge	18568 <__assert_fail@plt+0x7234>
   18538:	b	18578 <__assert_fail@plt+0x7244>
   1853c:	beq	18568 <__assert_fail@plt+0x7234>
   18540:	mov	r6, #-2147483648	; 0x80000000
   18544:	mvn	r4, #-2147483648	; 0x80000000
   18548:	sdiv	r6, r6, r7
   1854c:	cmp	r6, r0
   18550:	bge	18568 <__assert_fail@plt+0x7234>
   18554:	b	18578 <__assert_fail@plt+0x7244>
   18558:	mvn	r4, #-2147483648	; 0x80000000
   1855c:	sdiv	r6, r4, r0
   18560:	cmp	r7, r6
   18564:	blt	18578 <__assert_fail@plt+0x7244>
   18568:	mul	r6, r7, r0
   1856c:	mov	r4, #64	; 0x40
   18570:	cmp	r6, #63	; 0x3f
   18574:	bgt	18580 <__assert_fail@plt+0x724c>
   18578:	sdiv	r7, r4, r0
   1857c:	mul	r6, r7, r0
   18580:	cmp	r5, #0
   18584:	moveq	r4, #0
   18588:	streq	r4, [r8]
   1858c:	sub	r4, r7, r1
   18590:	cmp	r4, r2
   18594:	bge	18640 <__assert_fail@plt+0x730c>
   18598:	add	r7, r1, r2
   1859c:	mov	r6, #0
   185a0:	mov	r2, #0
   185a4:	cmp	r7, r3
   185a8:	movwgt	r6, #1
   185ac:	cmn	r3, #1
   185b0:	movwgt	r2, #1
   185b4:	cmp	r7, r1
   185b8:	bvs	18674 <__assert_fail@plt+0x7340>
   185bc:	ands	r1, r2, r6
   185c0:	bne	18674 <__assert_fail@plt+0x7340>
   185c4:	cmn	r0, #1
   185c8:	ble	185f0 <__assert_fail@plt+0x72bc>
   185cc:	cmp	r0, #0
   185d0:	beq	1863c <__assert_fail@plt+0x7308>
   185d4:	cmn	r7, #1
   185d8:	ble	18614 <__assert_fail@plt+0x72e0>
   185dc:	mvn	r1, #-2147483648	; 0x80000000
   185e0:	udiv	r1, r1, r0
   185e4:	cmp	r1, r7
   185e8:	bge	1863c <__assert_fail@plt+0x7308>
   185ec:	b	18674 <__assert_fail@plt+0x7340>
   185f0:	cmn	r7, #1
   185f4:	ble	1862c <__assert_fail@plt+0x72f8>
   185f8:	cmn	r0, #1
   185fc:	beq	1863c <__assert_fail@plt+0x7308>
   18600:	mov	r1, #-2147483648	; 0x80000000
   18604:	sdiv	r1, r1, r0
   18608:	cmp	r1, r7
   1860c:	bge	1863c <__assert_fail@plt+0x7308>
   18610:	b	18674 <__assert_fail@plt+0x7340>
   18614:	beq	1863c <__assert_fail@plt+0x7308>
   18618:	mov	r1, #-2147483648	; 0x80000000
   1861c:	sdiv	r1, r1, r7
   18620:	cmp	r1, r0
   18624:	bge	1863c <__assert_fail@plt+0x7308>
   18628:	b	18674 <__assert_fail@plt+0x7340>
   1862c:	mvn	r1, #-2147483648	; 0x80000000
   18630:	sdiv	r1, r1, r0
   18634:	cmp	r7, r1
   18638:	blt	18674 <__assert_fail@plt+0x7340>
   1863c:	mul	r6, r7, r0
   18640:	mov	r0, r5
   18644:	mov	r1, r6
   18648:	bl	19830 <__assert_fail@plt+0x84fc>
   1864c:	cmp	r6, #0
   18650:	movwne	r6, #1
   18654:	cmp	r0, #0
   18658:	bne	1866c <__assert_fail@plt+0x7338>
   1865c:	clz	r1, r5
   18660:	lsr	r1, r1, #5
   18664:	orrs	r1, r1, r6
   18668:	bne	18674 <__assert_fail@plt+0x7340>
   1866c:	str	r7, [r8]
   18670:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18674:	bl	187bc <__assert_fail@plt+0x7488>
   18678:	push	{fp, lr}
   1867c:	mov	fp, sp
   18680:	mov	r1, #1
   18684:	bl	197ac <__assert_fail@plt+0x8478>
   18688:	cmp	r0, #0
   1868c:	popne	{fp, pc}
   18690:	bl	187bc <__assert_fail@plt+0x7488>
   18694:	push	{fp, lr}
   18698:	mov	fp, sp
   1869c:	bl	197ac <__assert_fail@plt+0x8478>
   186a0:	cmp	r0, #0
   186a4:	popne	{fp, pc}
   186a8:	bl	187bc <__assert_fail@plt+0x7488>
   186ac:	push	{fp, lr}
   186b0:	mov	fp, sp
   186b4:	mov	r1, #1
   186b8:	bl	197ac <__assert_fail@plt+0x8478>
   186bc:	cmp	r0, #0
   186c0:	popne	{fp, pc}
   186c4:	bl	187bc <__assert_fail@plt+0x7488>
   186c8:	push	{fp, lr}
   186cc:	mov	fp, sp
   186d0:	bl	197ac <__assert_fail@plt+0x8478>
   186d4:	cmp	r0, #0
   186d8:	popne	{fp, pc}
   186dc:	bl	187bc <__assert_fail@plt+0x7488>
   186e0:	push	{r4, r5, fp, lr}
   186e4:	add	fp, sp, #8
   186e8:	mov	r5, r0
   186ec:	mov	r0, r1
   186f0:	mov	r4, r1
   186f4:	bl	19800 <__assert_fail@plt+0x84cc>
   186f8:	cmp	r0, #0
   186fc:	beq	18710 <__assert_fail@plt+0x73dc>
   18700:	mov	r1, r5
   18704:	mov	r2, r4
   18708:	pop	{r4, r5, fp, lr}
   1870c:	b	110d0 <memcpy@plt>
   18710:	bl	187bc <__assert_fail@plt+0x7488>
   18714:	push	{r4, r5, fp, lr}
   18718:	add	fp, sp, #8
   1871c:	mov	r5, r0
   18720:	mov	r0, r1
   18724:	mov	r4, r1
   18728:	bl	19800 <__assert_fail@plt+0x84cc>
   1872c:	cmp	r0, #0
   18730:	beq	18744 <__assert_fail@plt+0x7410>
   18734:	mov	r1, r5
   18738:	mov	r2, r4
   1873c:	pop	{r4, r5, fp, lr}
   18740:	b	110d0 <memcpy@plt>
   18744:	bl	187bc <__assert_fail@plt+0x7488>
   18748:	push	{r4, r5, fp, lr}
   1874c:	add	fp, sp, #8
   18750:	mov	r5, r0
   18754:	add	r0, r1, #1
   18758:	mov	r4, r1
   1875c:	bl	19800 <__assert_fail@plt+0x84cc>
   18760:	cmp	r0, #0
   18764:	beq	18780 <__assert_fail@plt+0x744c>
   18768:	mov	r1, #0
   1876c:	mov	r2, r4
   18770:	strb	r1, [r0, r4]
   18774:	mov	r1, r5
   18778:	pop	{r4, r5, fp, lr}
   1877c:	b	110d0 <memcpy@plt>
   18780:	bl	187bc <__assert_fail@plt+0x7488>
   18784:	push	{r4, r5, fp, lr}
   18788:	add	fp, sp, #8
   1878c:	mov	r4, r0
   18790:	bl	111fc <strlen@plt>
   18794:	add	r5, r0, #1
   18798:	mov	r0, r5
   1879c:	bl	19800 <__assert_fail@plt+0x84cc>
   187a0:	cmp	r0, #0
   187a4:	beq	187b8 <__assert_fail@plt+0x7484>
   187a8:	mov	r1, r4
   187ac:	mov	r2, r5
   187b0:	pop	{r4, r5, fp, lr}
   187b4:	b	110d0 <memcpy@plt>
   187b8:	bl	187bc <__assert_fail@plt+0x7488>
   187bc:	push	{fp, lr}
   187c0:	mov	fp, sp
   187c4:	movw	r0, #49424	; 0xc110
   187c8:	movw	r1, #47076	; 0xb7e4
   187cc:	mov	r2, #5
   187d0:	movt	r0, #2
   187d4:	movt	r1, #1
   187d8:	ldr	r4, [r0]
   187dc:	mov	r0, #0
   187e0:	bl	11100 <dcgettext@plt>
   187e4:	movw	r2, #46034	; 0xb3d2
   187e8:	mov	r3, r0
   187ec:	mov	r0, r4
   187f0:	mov	r1, #0
   187f4:	movt	r2, #1
   187f8:	bl	11178 <error@plt>
   187fc:	bl	1131c <abort@plt>
   18800:	sub	sp, sp, #12
   18804:	push	{r4, r5, r6, sl, fp, lr}
   18808:	add	fp, sp, #16
   1880c:	sub	sp, sp, #4
   18810:	movw	r5, #49524	; 0xc174
   18814:	mov	r4, r0
   18818:	add	r0, fp, #8
   1881c:	movt	r5, #2
   18820:	stm	r0, {r1, r2, r3}
   18824:	add	r3, fp, #8
   18828:	mov	r1, #1
   1882c:	mov	r2, r4
   18830:	str	r3, [sp]
   18834:	ldr	r0, [r5]
   18838:	bl	111a8 <__vfprintf_chk@plt>
   1883c:	mov	r4, r0
   18840:	cmn	r0, #1
   18844:	bgt	18890 <__assert_fail@plt+0x755c>
   18848:	ldr	r0, [r5]
   1884c:	bl	110b8 <ferror@plt>
   18850:	cmp	r0, #0
   18854:	bne	18890 <__assert_fail@plt+0x755c>
   18858:	movw	r0, #49424	; 0xc110
   1885c:	movt	r0, #2
   18860:	ldr	r5, [r0]
   18864:	bl	11214 <__errno_location@plt>
   18868:	movw	r1, #47093	; 0xb7f5
   1886c:	ldr	r6, [r0]
   18870:	mov	r0, #0
   18874:	mov	r2, #5
   18878:	movt	r1, #1
   1887c:	bl	11100 <dcgettext@plt>
   18880:	mov	r2, r0
   18884:	mov	r0, r5
   18888:	mov	r1, r6
   1888c:	bl	11178 <error@plt>
   18890:	mov	r0, r4
   18894:	sub	sp, fp, #16
   18898:	pop	{r4, r5, r6, sl, fp, lr}
   1889c:	add	sp, sp, #12
   188a0:	bx	lr
   188a4:	push	{r4, r5, r6, sl, fp, lr}
   188a8:	add	fp, sp, #16
   188ac:	movw	r5, #49524	; 0xc174
   188b0:	mov	r2, r0
   188b4:	mov	r3, r1
   188b8:	mov	r1, #1
   188bc:	movt	r5, #2
   188c0:	ldr	r0, [r5]
   188c4:	bl	111a8 <__vfprintf_chk@plt>
   188c8:	mov	r4, r0
   188cc:	cmn	r0, #1
   188d0:	bgt	188e4 <__assert_fail@plt+0x75b0>
   188d4:	ldr	r0, [r5]
   188d8:	bl	110b8 <ferror@plt>
   188dc:	cmp	r0, #0
   188e0:	beq	188ec <__assert_fail@plt+0x75b8>
   188e4:	mov	r0, r4
   188e8:	pop	{r4, r5, r6, sl, fp, pc}
   188ec:	movw	r0, #49424	; 0xc110
   188f0:	movt	r0, #2
   188f4:	ldr	r5, [r0]
   188f8:	bl	11214 <__errno_location@plt>
   188fc:	movw	r1, #47093	; 0xb7f5
   18900:	ldr	r6, [r0]
   18904:	mov	r0, #0
   18908:	mov	r2, #5
   1890c:	movt	r1, #1
   18910:	bl	11100 <dcgettext@plt>
   18914:	mov	r2, r0
   18918:	mov	r0, r5
   1891c:	mov	r1, r6
   18920:	bl	11178 <error@plt>
   18924:	mov	r0, r4
   18928:	pop	{r4, r5, r6, sl, fp, pc}
   1892c:	sub	sp, sp, #8
   18930:	push	{r4, r5, r6, sl, fp, lr}
   18934:	add	fp, sp, #16
   18938:	sub	sp, sp, #8
   1893c:	mov	r4, r1
   18940:	str	r2, [fp, #8]
   18944:	str	r3, [fp, #12]
   18948:	add	r3, fp, #8
   1894c:	mov	r1, #1
   18950:	mov	r5, r0
   18954:	mov	r2, r4
   18958:	str	r3, [sp, #4]
   1895c:	bl	111a8 <__vfprintf_chk@plt>
   18960:	mov	r4, r0
   18964:	cmn	r0, #1
   18968:	bgt	189b4 <__assert_fail@plt+0x7680>
   1896c:	mov	r0, r5
   18970:	bl	110b8 <ferror@plt>
   18974:	cmp	r0, #0
   18978:	bne	189b4 <__assert_fail@plt+0x7680>
   1897c:	movw	r0, #49424	; 0xc110
   18980:	movt	r0, #2
   18984:	ldr	r5, [r0]
   18988:	bl	11214 <__errno_location@plt>
   1898c:	movw	r1, #47093	; 0xb7f5
   18990:	ldr	r6, [r0]
   18994:	mov	r0, #0
   18998:	mov	r2, #5
   1899c:	movt	r1, #1
   189a0:	bl	11100 <dcgettext@plt>
   189a4:	mov	r2, r0
   189a8:	mov	r0, r5
   189ac:	mov	r1, r6
   189b0:	bl	11178 <error@plt>
   189b4:	mov	r0, r4
   189b8:	sub	sp, fp, #16
   189bc:	pop	{r4, r5, r6, sl, fp, lr}
   189c0:	add	sp, sp, #8
   189c4:	bx	lr
   189c8:	push	{r4, r5, r6, sl, fp, lr}
   189cc:	add	fp, sp, #16
   189d0:	mov	r3, r2
   189d4:	mov	r2, r1
   189d8:	mov	r1, #1
   189dc:	mov	r5, r0
   189e0:	bl	111a8 <__vfprintf_chk@plt>
   189e4:	mov	r4, r0
   189e8:	cmn	r0, #1
   189ec:	bgt	18a00 <__assert_fail@plt+0x76cc>
   189f0:	mov	r0, r5
   189f4:	bl	110b8 <ferror@plt>
   189f8:	cmp	r0, #0
   189fc:	beq	18a08 <__assert_fail@plt+0x76d4>
   18a00:	mov	r0, r4
   18a04:	pop	{r4, r5, r6, sl, fp, pc}
   18a08:	movw	r0, #49424	; 0xc110
   18a0c:	movt	r0, #2
   18a10:	ldr	r5, [r0]
   18a14:	bl	11214 <__errno_location@plt>
   18a18:	movw	r1, #47093	; 0xb7f5
   18a1c:	ldr	r6, [r0]
   18a20:	mov	r0, #0
   18a24:	mov	r2, #5
   18a28:	movt	r1, #1
   18a2c:	bl	11100 <dcgettext@plt>
   18a30:	mov	r2, r0
   18a34:	mov	r0, r5
   18a38:	mov	r1, r6
   18a3c:	bl	11178 <error@plt>
   18a40:	mov	r0, r4
   18a44:	pop	{r4, r5, r6, sl, fp, pc}
   18a48:	push	{fp, lr}
   18a4c:	mov	fp, sp
   18a50:	sub	sp, sp, #8
   18a54:	movw	ip, #49424	; 0xc110
   18a58:	movt	ip, #2
   18a5c:	ldr	ip, [ip]
   18a60:	str	ip, [sp, #4]
   18a64:	ldr	ip, [fp, #8]
   18a68:	str	ip, [sp]
   18a6c:	bl	18a74 <__assert_fail@plt+0x7740>
   18a70:	bl	1131c <abort@plt>
   18a74:	push	{r4, r5, r6, r7, fp, lr}
   18a78:	add	fp, sp, #16
   18a7c:	sub	sp, sp, #16
   18a80:	sub	r0, r0, #1
   18a84:	cmp	r0, #4
   18a88:	bcs	18b08 <__assert_fail@plt+0x77d4>
   18a8c:	mov	r5, r1
   18a90:	movw	r1, #47224	; 0xb878
   18a94:	ldr	r4, [fp, #12]
   18a98:	ldr	r6, [fp, #8]
   18a9c:	movt	r1, #1
   18aa0:	cmn	r5, #1
   18aa4:	ldr	r1, [r1, r0, lsl #2]
   18aa8:	ble	18abc <__assert_fail@plt+0x7788>
   18aac:	ldr	r7, [r3, r5, lsl #4]
   18ab0:	movw	r5, #47125	; 0xb815
   18ab4:	movt	r5, #1
   18ab8:	b	18ad8 <__assert_fail@plt+0x77a4>
   18abc:	mov	r0, #0
   18ac0:	add	r7, sp, #14
   18ac4:	strb	r0, [sp, #15]
   18ac8:	movw	r0, #47125	; 0xb815
   18acc:	strb	r2, [sp, #14]
   18ad0:	movt	r0, #1
   18ad4:	sub	r5, r0, r5
   18ad8:	mov	r0, #0
   18adc:	mov	r2, #5
   18ae0:	bl	11100 <dcgettext@plt>
   18ae4:	mov	r2, r0
   18ae8:	mov	r0, r4
   18aec:	mov	r1, #0
   18af0:	mov	r3, r5
   18af4:	str	r7, [sp]
   18af8:	str	r6, [sp, #4]
   18afc:	bl	11178 <error@plt>
   18b00:	sub	sp, fp, #16
   18b04:	pop	{r4, r5, r6, r7, fp, pc}
   18b08:	bl	1131c <abort@plt>
   18b0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b10:	add	fp, sp, #28
   18b14:	sub	sp, sp, #44	; 0x2c
   18b18:	cmp	r2, #37	; 0x25
   18b1c:	bcs	1978c <__assert_fail@plt+0x8458>
   18b20:	ldr	sl, [fp, #8]
   18b24:	mov	r6, r2
   18b28:	mov	r7, r1
   18b2c:	mov	r4, r0
   18b30:	str	r3, [sp, #36]	; 0x24
   18b34:	bl	11214 <__errno_location@plt>
   18b38:	mov	r5, r0
   18b3c:	mov	r0, #0
   18b40:	str	r0, [r5]
   18b44:	bl	111d8 <__ctype_b_loc@plt>
   18b48:	ldr	r1, [r0]
   18b4c:	mov	r2, r4
   18b50:	ldrb	r0, [r2], #1
   18b54:	add	r3, r1, r0, lsl #1
   18b58:	ldrb	r3, [r3, #1]
   18b5c:	tst	r3, #32
   18b60:	bne	18b50 <__assert_fail@plt+0x781c>
   18b64:	cmp	r7, #0
   18b68:	sub	r9, fp, #32
   18b6c:	mov	r8, #4
   18b70:	movne	r9, r7
   18b74:	cmp	r0, #45	; 0x2d
   18b78:	beq	19780 <__assert_fail@plt+0x844c>
   18b7c:	mov	r0, r4
   18b80:	mov	r1, r9
   18b84:	mov	r2, r6
   18b88:	mov	r3, #0
   18b8c:	bl	110dc <__strtoull_internal@plt>
   18b90:	mov	r7, r1
   18b94:	ldr	r1, [r9]
   18b98:	cmp	r1, r4
   18b9c:	beq	18bc8 <__assert_fail@plt+0x7894>
   18ba0:	mov	r6, r0
   18ba4:	ldr	r0, [r5]
   18ba8:	cmp	r0, #0
   18bac:	beq	18c04 <__assert_fail@plt+0x78d0>
   18bb0:	cmp	r0, #34	; 0x22
   18bb4:	bne	19780 <__assert_fail@plt+0x844c>
   18bb8:	mov	r8, #1
   18bbc:	cmp	sl, #0
   18bc0:	bne	18c10 <__assert_fail@plt+0x78dc>
   18bc4:	b	19778 <__assert_fail@plt+0x8444>
   18bc8:	cmp	sl, #0
   18bcc:	beq	19780 <__assert_fail@plt+0x844c>
   18bd0:	mov	r5, r1
   18bd4:	ldrb	r1, [r4]
   18bd8:	cmp	r1, #0
   18bdc:	beq	19780 <__assert_fail@plt+0x844c>
   18be0:	mov	r0, sl
   18be4:	bl	11208 <strchr@plt>
   18be8:	cmp	r0, #0
   18bec:	beq	19780 <__assert_fail@plt+0x844c>
   18bf0:	mov	r1, r5
   18bf4:	mov	r8, #0
   18bf8:	mov	r6, #1
   18bfc:	mov	r7, #0
   18c00:	b	18c10 <__assert_fail@plt+0x78dc>
   18c04:	mov	r8, r0
   18c08:	cmp	sl, #0
   18c0c:	beq	19778 <__assert_fail@plt+0x8444>
   18c10:	ldrb	r4, [r1]
   18c14:	cmp	r4, #0
   18c18:	beq	19778 <__assert_fail@plt+0x8444>
   18c1c:	str	r1, [sp, #32]
   18c20:	mov	r0, sl
   18c24:	mov	r1, r4
   18c28:	bl	11208 <strchr@plt>
   18c2c:	cmp	r0, #0
   18c30:	beq	18ef8 <__assert_fail@plt+0x7bc4>
   18c34:	sub	r0, r4, #69	; 0x45
   18c38:	mov	r1, #1
   18c3c:	mov	r3, #0
   18c40:	mov	r5, #1024	; 0x400
   18c44:	cmp	r0, #47	; 0x2f
   18c48:	str	r1, [sp, #28]
   18c4c:	bhi	18d50 <__assert_fail@plt+0x7a1c>
   18c50:	add	r1, pc, #0
   18c54:	ldr	pc, [r1, r0, lsl #2]
   18c58:	andeq	r8, r1, r8, lsl sp
   18c5c:	andeq	r8, r1, r0, asr sp
   18c60:	andeq	r8, r1, r8, lsl sp
   18c64:	andeq	r8, r1, r0, asr sp
   18c68:	andeq	r8, r1, r0, asr sp
   18c6c:	andeq	r8, r1, r0, asr sp
   18c70:	andeq	r8, r1, r8, lsl sp
   18c74:	andeq	r8, r1, r0, asr sp
   18c78:	andeq	r8, r1, r8, lsl sp
   18c7c:	andeq	r8, r1, r0, asr sp
   18c80:	andeq	r8, r1, r0, asr sp
   18c84:	andeq	r8, r1, r8, lsl sp
   18c88:	andeq	r8, r1, r0, asr sp
   18c8c:	andeq	r8, r1, r0, asr sp
   18c90:	andeq	r8, r1, r0, asr sp
   18c94:	andeq	r8, r1, r8, lsl sp
   18c98:	andeq	r8, r1, r0, asr sp
   18c9c:	andeq	r8, r1, r0, asr sp
   18ca0:	andeq	r8, r1, r0, asr sp
   18ca4:	andeq	r8, r1, r0, asr sp
   18ca8:	andeq	r8, r1, r8, lsl sp
   18cac:	andeq	r8, r1, r8, lsl sp
   18cb0:	andeq	r8, r1, r0, asr sp
   18cb4:	andeq	r8, r1, r0, asr sp
   18cb8:	andeq	r8, r1, r0, asr sp
   18cbc:	andeq	r8, r1, r0, asr sp
   18cc0:	andeq	r8, r1, r0, asr sp
   18cc4:	andeq	r8, r1, r0, asr sp
   18cc8:	andeq	r8, r1, r0, asr sp
   18ccc:	andeq	r8, r1, r0, asr sp
   18cd0:	andeq	r8, r1, r0, asr sp
   18cd4:	andeq	r8, r1, r0, asr sp
   18cd8:	andeq	r8, r1, r0, asr sp
   18cdc:	andeq	r8, r1, r0, asr sp
   18ce0:	andeq	r8, r1, r8, lsl sp
   18ce4:	andeq	r8, r1, r0, asr sp
   18ce8:	andeq	r8, r1, r0, asr sp
   18cec:	andeq	r8, r1, r0, asr sp
   18cf0:	andeq	r8, r1, r8, lsl sp
   18cf4:	andeq	r8, r1, r0, asr sp
   18cf8:	andeq	r8, r1, r8, lsl sp
   18cfc:	andeq	r8, r1, r0, asr sp
   18d00:	andeq	r8, r1, r0, asr sp
   18d04:	andeq	r8, r1, r0, asr sp
   18d08:	andeq	r8, r1, r0, asr sp
   18d0c:	andeq	r8, r1, r0, asr sp
   18d10:	andeq	r8, r1, r0, asr sp
   18d14:	andeq	r8, r1, r8, lsl sp
   18d18:	mov	r0, sl
   18d1c:	mov	r1, #48	; 0x30
   18d20:	bl	11208 <strchr@plt>
   18d24:	cmp	r0, #0
   18d28:	beq	18d4c <__assert_fail@plt+0x7a18>
   18d2c:	ldr	r1, [sp, #32]
   18d30:	ldrb	r0, [r1, #1]
   18d34:	cmp	r0, #66	; 0x42
   18d38:	cmpne	r0, #68	; 0x44
   18d3c:	bne	18f04 <__assert_fail@plt+0x7bd0>
   18d40:	mov	r5, #1000	; 0x3e8
   18d44:	mov	r0, #2
   18d48:	str	r0, [sp, #28]
   18d4c:	mov	r3, #0
   18d50:	sub	r0, r4, #66	; 0x42
   18d54:	cmp	r0, #53	; 0x35
   18d58:	bhi	18ef8 <__assert_fail@plt+0x7bc4>
   18d5c:	add	r1, pc, #0
   18d60:	ldr	pc, [r1, r0, lsl #2]
   18d64:	andeq	r9, r1, r0, lsl #5
   18d68:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d6c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d70:	andeq	r9, r1, r8, lsr #5
   18d74:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d78:	andeq	r8, r1, ip, lsr lr
   18d7c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d80:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d84:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d88:	andeq	r8, r1, r8, lsr #30
   18d8c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d90:	andeq	r8, r1, r0, ror pc
   18d94:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d98:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18d9c:	andeq	r9, r1, r0, lsl #8
   18da0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18da4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18da8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dac:	strdeq	r8, [r1], -ip
   18db0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18db4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18db8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dbc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dc0:	andeq	r9, r1, r8, lsr #10
   18dc4:	andeq	r9, r1, r4, ror #1
   18dc8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dcc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dd0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dd4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18dd8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ddc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18de0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18de4:	andeq	r9, r1, r0, lsl #14
   18de8:	andeq	r9, r1, r8, asr r7
   18dec:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18df0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18df4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18df8:	andeq	r8, r1, ip, lsr lr
   18dfc:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e00:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e04:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e08:	andeq	r8, r1, r8, lsr #30
   18e0c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e10:	andeq	r8, r1, r0, ror pc
   18e14:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e18:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e1c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e20:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e24:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e28:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e2c:	strdeq	r8, [r1], -ip
   18e30:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e34:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18e38:	andeq	r9, r1, r4, lsr r7
   18e3c:	mvn	r0, #0
   18e40:	mvn	r1, #0
   18e44:	mov	r2, r5
   18e48:	mov	sl, r3
   18e4c:	bl	19aec <__assert_fail@plt+0x87b8>
   18e50:	subs	r3, r0, r6
   18e54:	umull	r4, r2, r6, r5
   18e58:	mov	lr, #0
   18e5c:	str	r1, [sp, #20]
   18e60:	sbcs	r3, r1, r7
   18e64:	movwcc	lr, #1
   18e68:	mla	ip, r6, sl, r2
   18e6c:	mov	r2, r1
   18e70:	mov	r2, #0
   18e74:	cmp	lr, #0
   18e78:	mla	r7, r7, r5, ip
   18e7c:	mvnne	r4, #0
   18e80:	mvnne	r7, #0
   18e84:	subs	r6, r0, r4
   18e88:	sbcs	r6, r1, r7
   18e8c:	umull	r3, r6, r4, r5
   18e90:	movwcc	r2, #1
   18e94:	cmp	r2, #0
   18e98:	mvnne	r3, #0
   18e9c:	cmp	r2, #0
   18ea0:	str	r6, [sp, #16]
   18ea4:	umull	r6, ip, r3, r5
   18ea8:	mla	r1, r3, sl, ip
   18eac:	ldr	ip, [sp, #16]
   18eb0:	str	r1, [sp, #12]
   18eb4:	mla	r4, r4, sl, ip
   18eb8:	mla	r4, r7, r5, r4
   18ebc:	mvnne	r4, #0
   18ec0:	subs	r0, r0, r3
   18ec4:	ldr	r0, [sp, #20]
   18ec8:	ldr	r7, [sp, #12]
   18ecc:	sbcs	r0, r0, r4
   18ed0:	mov	r0, #0
   18ed4:	mla	r7, r4, r5, r7
   18ed8:	movwcc	r0, #1
   18edc:	cmp	r0, #0
   18ee0:	mov	r1, r0
   18ee4:	orr	r0, lr, r2
   18ee8:	mvnne	r7, #0
   18eec:	mvnne	r6, #0
   18ef0:	orr	r3, r0, r1
   18ef4:	b	19758 <__assert_fail@plt+0x8424>
   18ef8:	ldr	r0, [sp, #36]	; 0x24
   18efc:	orr	r8, r8, #2
   18f00:	b	1977c <__assert_fail@plt+0x8448>
   18f04:	cmp	r0, #105	; 0x69
   18f08:	mov	r3, #0
   18f0c:	bne	18d50 <__assert_fail@plt+0x7a1c>
   18f10:	ldrb	r0, [r1, #2]
   18f14:	mov	r1, #1
   18f18:	cmp	r0, #66	; 0x42
   18f1c:	movweq	r1, #3
   18f20:	str	r1, [sp, #28]
   18f24:	b	18d50 <__assert_fail@plt+0x7a1c>
   18f28:	mvn	r0, #0
   18f2c:	mvn	r1, #0
   18f30:	mov	r2, r5
   18f34:	mov	r4, r3
   18f38:	bl	19aec <__assert_fail@plt+0x87b8>
   18f3c:	subs	r0, r0, r6
   18f40:	mov	r2, #0
   18f44:	sbcs	r0, r1, r7
   18f48:	umull	r0, r1, r6, r5
   18f4c:	movwcc	r2, #1
   18f50:	cmp	r2, #0
   18f54:	mla	r1, r6, r4, r1
   18f58:	mov	r3, r2
   18f5c:	mvnne	r0, #0
   18f60:	mla	r7, r7, r5, r1
   18f64:	mvnne	r7, #0
   18f68:	mov	r6, r0
   18f6c:	b	19758 <__assert_fail@plt+0x8424>
   18f70:	mvn	r0, #0
   18f74:	mvn	r1, #0
   18f78:	mov	r2, r5
   18f7c:	str	r3, [sp, #24]
   18f80:	bl	19aec <__assert_fail@plt+0x87b8>
   18f84:	subs	r3, r0, r6
   18f88:	mov	ip, r0
   18f8c:	umull	r4, r0, r6, r5
   18f90:	mov	sl, #0
   18f94:	sbcs	r3, r1, r7
   18f98:	mov	r3, #0
   18f9c:	movwcc	r3, #1
   18fa0:	cmp	r3, #0
   18fa4:	str	r0, [sp, #20]
   18fa8:	ldr	r0, [sp, #24]
   18fac:	mvnne	r4, #0
   18fb0:	cmp	r3, #0
   18fb4:	umull	lr, r2, r4, r5
   18fb8:	mla	r2, r4, r0, r2
   18fbc:	str	r2, [sp, #16]
   18fc0:	ldr	r2, [sp, #20]
   18fc4:	mla	r6, r6, r0, r2
   18fc8:	ldr	r0, [sp, #16]
   18fcc:	mla	r6, r7, r5, r6
   18fd0:	mvnne	r6, #0
   18fd4:	mla	r7, r6, r5, r0
   18fd8:	subs	r0, ip, r4
   18fdc:	sbcs	r0, r1, r6
   18fe0:	movwcc	sl, #1
   18fe4:	cmp	sl, #0
   18fe8:	orr	r3, r3, sl
   18fec:	mvnne	lr, #0
   18ff0:	mvnne	r7, #0
   18ff4:	mov	r6, lr
   18ff8:	b	19758 <__assert_fail@plt+0x8424>
   18ffc:	mvn	r0, #0
   19000:	mvn	r1, #0
   19004:	mov	r2, r5
   19008:	mov	sl, r3
   1900c:	bl	19aec <__assert_fail@plt+0x87b8>
   19010:	subs	r3, r0, r6
   19014:	mov	ip, r1
   19018:	umull	r2, lr, r6, r5
   1901c:	str	r0, [sp, #20]
   19020:	sbcs	r3, r1, r7
   19024:	mov	r1, #0
   19028:	str	ip, [sp, #16]
   1902c:	movwcc	r1, #1
   19030:	mla	r6, r6, sl, lr
   19034:	mov	lr, #0
   19038:	cmp	r1, #0
   1903c:	mla	r7, r7, r5, r6
   19040:	mvnne	r2, #0
   19044:	cmp	r1, #0
   19048:	umull	r3, r4, r2, r5
   1904c:	mvnne	r7, #0
   19050:	mla	r4, r2, sl, r4
   19054:	subs	r2, r0, r2
   19058:	sbcs	r2, ip, r7
   1905c:	mla	r4, r7, r5, r4
   19060:	mov	r2, #0
   19064:	movwcc	lr, #1
   19068:	cmp	lr, #0
   1906c:	mvnne	r3, #0
   19070:	mvnne	r4, #0
   19074:	subs	r7, r0, r3
   19078:	mov	r0, r5
   1907c:	sbcs	r7, ip, r4
   19080:	umull	r5, r7, r3, r5
   19084:	movwcc	r2, #1
   19088:	cmp	r2, #0
   1908c:	mla	r3, r3, sl, r7
   19090:	mvnne	r5, #0
   19094:	cmp	r2, #0
   19098:	mla	r3, r4, r0, r3
   1909c:	umull	r6, ip, r5, r0
   190a0:	mvnne	r3, #0
   190a4:	mla	ip, r5, sl, ip
   190a8:	mla	r7, r3, r0, ip
   190ac:	ldr	r0, [sp, #20]
   190b0:	subs	r0, r0, r5
   190b4:	ldr	r0, [sp, #16]
   190b8:	sbcs	r0, r0, r3
   190bc:	mov	r0, #0
   190c0:	movwcc	r0, #1
   190c4:	cmp	r0, #0
   190c8:	mov	r3, r0
   190cc:	orr	r0, r1, lr
   190d0:	orr	r0, r0, r2
   190d4:	mvnne	r7, #0
   190d8:	mvnne	r6, #0
   190dc:	orr	r3, r0, r3
   190e0:	b	19758 <__assert_fail@plt+0x8424>
   190e4:	mvn	r0, #0
   190e8:	mvn	r1, #0
   190ec:	mov	r2, r5
   190f0:	mov	r4, r3
   190f4:	str	r3, [sp, #24]
   190f8:	bl	19aec <__assert_fail@plt+0x87b8>
   190fc:	umull	r3, r2, r6, r5
   19100:	mla	r2, r6, r4, r2
   19104:	subs	r6, r0, r6
   19108:	sbcs	r6, r1, r7
   1910c:	mov	r6, #0
   19110:	mla	ip, r7, r5, r2
   19114:	ldr	r2, [sp, #24]
   19118:	movwcc	r6, #1
   1911c:	cmp	r6, #0
   19120:	str	r6, [sp, #20]
   19124:	mov	r6, #0
   19128:	mvnne	r3, #0
   1912c:	mvnne	ip, #0
   19130:	subs	r4, r0, r3
   19134:	umull	r7, lr, r3, r5
   19138:	sbcs	r4, r1, ip
   1913c:	movwcc	r6, #1
   19140:	mla	r3, r3, r2, lr
   19144:	cmp	r6, #0
   19148:	str	r6, [sp, #16]
   1914c:	mvnne	r7, #0
   19150:	cmp	r6, #0
   19154:	umull	sl, r4, r7, r5
   19158:	mla	r4, r7, r2, r4
   1915c:	mla	r2, ip, r5, r3
   19160:	mvnne	r2, #0
   19164:	subs	r3, r0, r7
   19168:	mov	ip, #0
   1916c:	mla	r6, r2, r5, r4
   19170:	sbcs	r2, r1, r2
   19174:	mov	r4, r0
   19178:	mov	r0, #0
   1917c:	movwcc	r0, #1
   19180:	mov	r3, r4
   19184:	cmp	r0, #0
   19188:	str	r0, [sp, #12]
   1918c:	mov	r0, r1
   19190:	str	r3, [sp, #4]
   19194:	mvnne	sl, #0
   19198:	mvnne	r6, #0
   1919c:	str	r0, [sp, #8]
   191a0:	subs	r2, r4, sl
   191a4:	ldr	r4, [sp, #24]
   191a8:	sbcs	r2, r1, r6
   191ac:	umull	r7, r2, sl, r5
   191b0:	movwcc	ip, #1
   191b4:	cmp	ip, #0
   191b8:	mvnne	r7, #0
   191bc:	mla	r2, sl, r4, r2
   191c0:	cmp	ip, #0
   191c4:	mov	sl, #0
   191c8:	umull	r1, lr, r7, r5
   191cc:	mla	r2, r6, r5, r2
   191d0:	mvnne	r2, #0
   191d4:	subs	r6, r3, r7
   191d8:	mla	lr, r7, r4, lr
   191dc:	mla	lr, r2, r5, lr
   191e0:	sbcs	r2, r0, r2
   191e4:	mov	r2, #0
   191e8:	movwcc	sl, #1
   191ec:	cmp	sl, #0
   191f0:	mvnne	r1, #0
   191f4:	mvnne	lr, #0
   191f8:	subs	r6, r3, r1
   191fc:	ldr	r3, [sp, #24]
   19200:	sbcs	r6, r0, lr
   19204:	umull	r0, r7, r1, r5
   19208:	movwcc	r2, #1
   1920c:	cmp	r2, #0
   19210:	mvnne	r0, #0
   19214:	mla	r1, r1, r3, r7
   19218:	cmp	r2, #0
   1921c:	umull	r6, r4, r0, r5
   19220:	mla	r1, lr, r5, r1
   19224:	mvnne	r1, #0
   19228:	mla	r4, r0, r3, r4
   1922c:	ldr	r3, [sp, #4]
   19230:	mla	r7, r1, r5, r4
   19234:	ldr	r5, [sp, #16]
   19238:	subs	r0, r3, r0
   1923c:	ldr	r0, [sp, #8]
   19240:	sbcs	r0, r0, r1
   19244:	mov	r0, #0
   19248:	movwcc	r0, #1
   1924c:	cmp	r0, #0
   19250:	mov	r1, r0
   19254:	ldr	r0, [sp, #20]
   19258:	mvnne	r7, #0
   1925c:	mvnne	r6, #0
   19260:	orr	r0, r0, r5
   19264:	ldr	r5, [sp, #12]
   19268:	orr	r0, r0, r5
   1926c:	orr	r0, r0, ip
   19270:	orr	r0, r0, sl
   19274:	orr	r0, r0, r2
   19278:	orr	r0, r0, r1
   1927c:	b	196f8 <__assert_fail@plt+0x83c4>
   19280:	mov	r1, #0
   19284:	lsl	r2, r7, #10
   19288:	lsl	r0, r6, #10
   1928c:	lsr	r3, r7, #22
   19290:	cmp	r1, r7, lsr #22
   19294:	orr	r2, r2, r6, lsr #22
   19298:	mvnne	r0, #0
   1929c:	movwne	r3, #1
   192a0:	cmp	r1, r7, lsr #22
   192a4:	b	19724 <__assert_fail@plt+0x83f0>
   192a8:	mvn	r0, #0
   192ac:	mvn	r1, #0
   192b0:	mov	r2, r5
   192b4:	mov	sl, r3
   192b8:	bl	19aec <__assert_fail@plt+0x87b8>
   192bc:	subs	r2, r0, r6
   192c0:	mov	ip, r0
   192c4:	mov	r0, #0
   192c8:	sbcs	r2, r1, r7
   192cc:	umull	r4, r2, r6, r5
   192d0:	movwcc	r0, #1
   192d4:	cmp	r0, #0
   192d8:	mla	r2, r6, sl, r2
   192dc:	str	r0, [sp, #20]
   192e0:	mvnne	r4, #0
   192e4:	cmp	r0, #0
   192e8:	mla	r2, r7, r5, r2
   192ec:	mov	r0, #0
   192f0:	umull	lr, r3, r4, r5
   192f4:	mvnne	r2, #0
   192f8:	mla	r3, r4, sl, r3
   192fc:	mla	r6, r2, r5, r3
   19300:	subs	r3, ip, r4
   19304:	mov	r3, r1
   19308:	sbcs	r2, r1, r2
   1930c:	str	r3, [sp, #8]
   19310:	movwcc	r0, #1
   19314:	cmp	r0, #0
   19318:	str	r0, [sp, #16]
   1931c:	mov	r0, ip
   19320:	mvnne	lr, #0
   19324:	mvnne	r6, #0
   19328:	str	r0, [sp, #12]
   1932c:	subs	r2, ip, lr
   19330:	umull	r7, r4, lr, r5
   19334:	sbcs	r2, r1, r6
   19338:	mov	r2, #0
   1933c:	movwcc	r2, #1
   19340:	mla	r4, lr, sl, r4
   19344:	cmp	r2, #0
   19348:	mla	r6, r6, r5, r4
   1934c:	mov	r4, #0
   19350:	mvnne	r7, #0
   19354:	cmp	r2, #0
   19358:	umull	r1, ip, r7, r5
   1935c:	mvnne	r6, #0
   19360:	mla	ip, r7, sl, ip
   19364:	subs	r7, r0, r7
   19368:	sbcs	r7, r3, r6
   1936c:	mla	lr, r6, r5, ip
   19370:	mov	ip, #0
   19374:	movwcc	ip, #1
   19378:	cmp	ip, #0
   1937c:	mvnne	r1, #0
   19380:	mvnne	lr, #0
   19384:	subs	r7, r0, r1
   19388:	sbcs	r7, r3, lr
   1938c:	umull	r0, r7, r1, r5
   19390:	movwcc	r4, #1
   19394:	cmp	r4, #0
   19398:	mla	r1, r1, sl, r7
   1939c:	mvnne	r0, #0
   193a0:	cmp	r4, #0
   193a4:	mla	r1, lr, r5, r1
   193a8:	umull	r6, r3, r0, r5
   193ac:	mvnne	r1, #0
   193b0:	mla	r3, r0, sl, r3
   193b4:	mla	r7, r1, r5, r3
   193b8:	ldr	r3, [sp, #12]
   193bc:	subs	r0, r3, r0
   193c0:	ldr	r0, [sp, #8]
   193c4:	ldr	r3, [sp, #16]
   193c8:	sbcs	r0, r0, r1
   193cc:	mov	r0, #0
   193d0:	movwcc	r0, #1
   193d4:	cmp	r0, #0
   193d8:	mov	r1, r0
   193dc:	ldr	r0, [sp, #20]
   193e0:	mvnne	r7, #0
   193e4:	mvnne	r6, #0
   193e8:	orr	r0, r0, r3
   193ec:	orr	r0, r0, r2
   193f0:	orr	r0, r0, ip
   193f4:	orr	r0, r0, r4
   193f8:	orr	r3, r0, r1
   193fc:	b	19758 <__assert_fail@plt+0x8424>
   19400:	mvn	r0, #0
   19404:	mvn	r1, #0
   19408:	mov	r2, r5
   1940c:	mov	sl, r3
   19410:	bl	19aec <__assert_fail@plt+0x87b8>
   19414:	umull	r3, r2, r6, r5
   19418:	mov	lr, r1
   1941c:	mov	r1, r0
   19420:	mla	r2, r6, sl, r2
   19424:	subs	r6, r0, r6
   19428:	mov	r0, #0
   1942c:	sbcs	r6, lr, r7
   19430:	mla	r2, r7, r5, r2
   19434:	movwcc	r0, #1
   19438:	cmp	r0, #0
   1943c:	str	r0, [sp, #20]
   19440:	mov	r0, r1
   19444:	mvnne	r3, #0
   19448:	mvnne	r2, #0
   1944c:	str	r0, [sp, #16]
   19450:	subs	r4, r1, r3
   19454:	umull	r7, ip, r3, r5
   19458:	sbcs	r4, lr, r2
   1945c:	mov	r4, #0
   19460:	movwcc	r4, #1
   19464:	mla	r3, r3, sl, ip
   19468:	mov	ip, #0
   1946c:	cmp	r4, #0
   19470:	mla	r2, r2, r5, r3
   19474:	mvnne	r7, #0
   19478:	cmp	r4, #0
   1947c:	umull	r1, r6, r7, r5
   19480:	mvnne	r2, #0
   19484:	mla	r6, r7, sl, r6
   19488:	mla	r3, r2, r5, r6
   1948c:	subs	r6, r0, r7
   19490:	sbcs	r2, lr, r2
   19494:	mov	r2, #0
   19498:	movwcc	ip, #1
   1949c:	cmp	ip, #0
   194a0:	mvnne	r1, #0
   194a4:	mvnne	r3, #0
   194a8:	subs	r6, r0, r1
   194ac:	sbcs	r6, lr, r3
   194b0:	umull	r0, r6, r1, r5
   194b4:	movwcc	r2, #1
   194b8:	cmp	r2, #0
   194bc:	mvnne	r0, #0
   194c0:	cmp	r2, #0
   194c4:	str	r6, [sp, #12]
   194c8:	umull	r6, r7, r0, r5
   194cc:	mla	r7, r0, sl, r7
   194d0:	str	r7, [sp, #8]
   194d4:	ldr	r7, [sp, #12]
   194d8:	mla	r1, r1, sl, r7
   194dc:	mla	r1, r3, r5, r1
   194e0:	ldr	r3, [sp, #8]
   194e4:	mvnne	r1, #0
   194e8:	mla	r7, r1, r5, r3
   194ec:	ldr	r3, [sp, #16]
   194f0:	subs	r0, r3, r0
   194f4:	sbcs	r0, lr, r1
   194f8:	mov	r0, #0
   194fc:	movwcc	r0, #1
   19500:	cmp	r0, #0
   19504:	mov	r1, r0
   19508:	ldr	r0, [sp, #20]
   1950c:	mvnne	r7, #0
   19510:	mvnne	r6, #0
   19514:	orr	r0, r0, r4
   19518:	orr	r0, r0, ip
   1951c:	orr	r0, r0, r2
   19520:	orr	r3, r0, r1
   19524:	b	19758 <__assert_fail@plt+0x8424>
   19528:	mvn	r0, #0
   1952c:	mvn	r1, #0
   19530:	mov	r2, r5
   19534:	mov	sl, r3
   19538:	bl	19aec <__assert_fail@plt+0x87b8>
   1953c:	mov	lr, r0
   19540:	subs	r0, r0, r6
   19544:	mov	r2, #0
   19548:	mov	ip, r1
   1954c:	str	sl, [sp, #24]
   19550:	sbcs	r0, r1, r7
   19554:	umull	r3, r1, r6, r5
   19558:	str	lr, [sp, #4]
   1955c:	movwcc	r2, #1
   19560:	cmp	r2, #0
   19564:	mla	r6, r6, sl, r1
   19568:	mov	r1, #0
   1956c:	str	r2, [sp, #20]
   19570:	mvnne	r3, #0
   19574:	cmp	r2, #0
   19578:	mla	r7, r7, r5, r6
   1957c:	mov	r2, #0
   19580:	umull	r0, r4, r3, r5
   19584:	mvnne	r7, #0
   19588:	mla	r4, r3, sl, r4
   1958c:	subs	r3, lr, r3
   19590:	sbcs	r3, ip, r7
   19594:	mla	r4, r7, r5, r4
   19598:	movwcc	r1, #1
   1959c:	cmp	r1, #0
   195a0:	str	r1, [sp, #16]
   195a4:	mvnne	r0, #0
   195a8:	mvnne	r4, #0
   195ac:	subs	r3, lr, r0
   195b0:	sbcs	r3, ip, r4
   195b4:	umull	r6, r3, r0, r5
   195b8:	movwcc	r2, #1
   195bc:	cmp	r2, #0
   195c0:	mla	r0, r0, sl, r3
   195c4:	str	r2, [sp, #12]
   195c8:	mvnne	r6, #0
   195cc:	cmp	r2, #0
   195d0:	mla	r0, r4, r5, r0
   195d4:	ldr	r4, [sp, #24]
   195d8:	umull	r1, r7, r6, r5
   195dc:	mvnne	r0, #0
   195e0:	subs	r3, lr, r6
   195e4:	mov	r3, ip
   195e8:	str	r3, [sp]
   195ec:	mla	r7, r6, sl, r7
   195f0:	mla	r7, r0, r5, r7
   195f4:	sbcs	r0, ip, r0
   195f8:	mov	r0, #0
   195fc:	movwcc	r0, #1
   19600:	cmp	r0, #0
   19604:	str	r0, [sp, #8]
   19608:	mvnne	r1, #0
   1960c:	mvnne	r7, #0
   19610:	subs	r0, lr, r1
   19614:	sbcs	r0, ip, r7
   19618:	mov	ip, #0
   1961c:	umull	r6, r0, r1, r5
   19620:	movwcc	ip, #1
   19624:	cmp	ip, #0
   19628:	mla	r1, r1, r4, r0
   1962c:	mov	r0, lr
   19630:	mvnne	r6, #0
   19634:	cmp	ip, #0
   19638:	mla	r1, r7, r5, r1
   1963c:	umull	r2, sl, r6, r5
   19640:	mvnne	r1, #0
   19644:	mla	sl, r6, r4, sl
   19648:	subs	r6, lr, r6
   1964c:	mov	lr, #0
   19650:	mla	r7, r1, r5, sl
   19654:	sbcs	r1, r3, r1
   19658:	ldr	r1, [sp, #24]
   1965c:	movwcc	lr, #1
   19660:	cmp	lr, #0
   19664:	mvnne	r2, #0
   19668:	mvnne	r7, #0
   1966c:	subs	r6, r0, r2
   19670:	umull	r0, sl, r2, r5
   19674:	sbcs	r6, r3, r7
   19678:	mov	r3, #0
   1967c:	movwcc	r3, #1
   19680:	mla	r2, r2, r1, sl
   19684:	cmp	r3, #0
   19688:	mla	r2, r7, r5, r2
   1968c:	mvnne	r0, #0
   19690:	cmp	r3, #0
   19694:	umull	r6, r4, r0, r5
   19698:	mvnne	r2, #0
   1969c:	mla	r4, r0, r1, r4
   196a0:	ldr	r1, [sp, #4]
   196a4:	mla	r7, r2, r5, r4
   196a8:	ldr	r5, [sp, #16]
   196ac:	subs	r0, r1, r0
   196b0:	ldr	r0, [sp]
   196b4:	sbcs	r0, r0, r2
   196b8:	mov	r0, #0
   196bc:	movwcc	r0, #1
   196c0:	cmp	r0, #0
   196c4:	mov	r2, r0
   196c8:	ldr	r0, [sp, #20]
   196cc:	mvnne	r7, #0
   196d0:	mvnne	r6, #0
   196d4:	orr	r0, r0, r5
   196d8:	ldr	r5, [sp, #12]
   196dc:	orr	r0, r0, r5
   196e0:	ldr	r5, [sp, #8]
   196e4:	orr	r0, r0, r5
   196e8:	orr	r0, r0, ip
   196ec:	orr	r0, r0, lr
   196f0:	orr	r0, r0, r3
   196f4:	orr	r0, r0, r2
   196f8:	and	r3, r0, #1
   196fc:	b	19758 <__assert_fail@plt+0x8424>
   19700:	mov	r1, #0
   19704:	lsl	r2, r7, #9
   19708:	lsl	r0, r6, #9
   1970c:	lsr	r3, r7, #23
   19710:	cmp	r1, r7, lsr #23
   19714:	orr	r2, r2, r6, lsr #23
   19718:	mvnne	r0, #0
   1971c:	movwne	r3, #1
   19720:	cmp	r1, r7, lsr #23
   19724:	mvnne	r2, #0
   19728:	mov	r6, r0
   1972c:	mov	r7, r2
   19730:	b	19758 <__assert_fail@plt+0x8424>
   19734:	lsl	r1, r7, #1
   19738:	cmp	r7, #0
   1973c:	lsl	r0, r6, #1
   19740:	lsr	r3, r7, #31
   19744:	orr	r1, r1, r6, lsr #31
   19748:	mvnmi	r0, #0
   1974c:	mvnmi	r1, #0
   19750:	mov	r6, r0
   19754:	mov	r7, r1
   19758:	ldr	r1, [sp, #32]
   1975c:	ldr	r2, [sp, #28]
   19760:	orr	r8, r3, r8
   19764:	add	r0, r1, r2
   19768:	str	r0, [r9]
   1976c:	ldrb	r0, [r1, r2]
   19770:	cmp	r0, #0
   19774:	orrne	r8, r8, #2
   19778:	ldr	r0, [sp, #36]	; 0x24
   1977c:	strd	r6, [r0]
   19780:	mov	r0, r8
   19784:	sub	sp, fp, #28
   19788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1978c:	movw	r0, #47240	; 0xb888
   19790:	movw	r1, #47278	; 0xb8ae
   19794:	movw	r3, #47294	; 0xb8be
   19798:	mov	r2, #85	; 0x55
   1979c:	movt	r0, #1
   197a0:	movt	r1, #1
   197a4:	movt	r3, #1
   197a8:	bl	11334 <__assert_fail@plt>
   197ac:	clz	r2, r1
   197b0:	clz	r3, r0
   197b4:	lsr	r2, r2, #5
   197b8:	lsr	r3, r3, #5
   197bc:	orrs	r2, r3, r2
   197c0:	movwne	r1, #1
   197c4:	movwne	r0, #1
   197c8:	cmp	r1, #0
   197cc:	beq	197fc <__assert_fail@plt+0x84c8>
   197d0:	mvn	r2, #-2147483648	; 0x80000000
   197d4:	udiv	r2, r2, r1
   197d8:	cmp	r2, r0
   197dc:	bcs	197fc <__assert_fail@plt+0x84c8>
   197e0:	push	{fp, lr}
   197e4:	mov	fp, sp
   197e8:	bl	11214 <__errno_location@plt>
   197ec:	mov	r1, #12
   197f0:	str	r1, [r0]
   197f4:	mov	r0, #0
   197f8:	pop	{fp, pc}
   197fc:	b	11070 <calloc@plt>
   19800:	cmp	r0, #0
   19804:	movweq	r0, #1
   19808:	cmn	r0, #1
   1980c:	ble	19814 <__assert_fail@plt+0x84e0>
   19810:	b	11190 <malloc@plt>
   19814:	push	{fp, lr}
   19818:	mov	fp, sp
   1981c:	bl	11214 <__errno_location@plt>
   19820:	mov	r1, #12
   19824:	str	r1, [r0]
   19828:	mov	r0, #0
   1982c:	pop	{fp, pc}
   19830:	push	{fp, lr}
   19834:	mov	fp, sp
   19838:	cmp	r0, #0
   1983c:	beq	19858 <__assert_fail@plt+0x8524>
   19840:	cmp	r1, #0
   19844:	beq	19864 <__assert_fail@plt+0x8530>
   19848:	cmn	r1, #1
   1984c:	ble	19870 <__assert_fail@plt+0x853c>
   19850:	pop	{fp, lr}
   19854:	b	1110c <realloc@plt>
   19858:	mov	r0, r1
   1985c:	pop	{fp, lr}
   19860:	b	19800 <__assert_fail@plt+0x84cc>
   19864:	bl	15ab8 <__assert_fail@plt+0x4784>
   19868:	mov	r0, #0
   1986c:	pop	{fp, pc}
   19870:	bl	11214 <__errno_location@plt>
   19874:	mov	r1, #12
   19878:	str	r1, [r0]
   1987c:	mov	r0, #0
   19880:	pop	{fp, pc}
   19884:	push	{r4, r5, r6, sl, fp, lr}
   19888:	add	fp, sp, #16
   1988c:	mov	r4, r0
   19890:	bl	11160 <__fpending@plt>
   19894:	ldr	r6, [r4]
   19898:	mov	r5, r0
   1989c:	mov	r0, r4
   198a0:	bl	159c0 <__assert_fail@plt+0x468c>
   198a4:	tst	r6, #32
   198a8:	bne	198e0 <__assert_fail@plt+0x85ac>
   198ac:	cmp	r0, #0
   198b0:	mov	r4, r0
   198b4:	mvnne	r4, #0
   198b8:	cmp	r5, #0
   198bc:	bne	198ec <__assert_fail@plt+0x85b8>
   198c0:	cmp	r0, #0
   198c4:	beq	198ec <__assert_fail@plt+0x85b8>
   198c8:	bl	11214 <__errno_location@plt>
   198cc:	ldr	r0, [r0]
   198d0:	subs	r4, r0, #9
   198d4:	mvnne	r4, #0
   198d8:	mov	r0, r4
   198dc:	pop	{r4, r5, r6, sl, fp, pc}
   198e0:	mvn	r4, #0
   198e4:	cmp	r0, #0
   198e8:	beq	198f4 <__assert_fail@plt+0x85c0>
   198ec:	mov	r0, r4
   198f0:	pop	{r4, r5, r6, sl, fp, pc}
   198f4:	bl	11214 <__errno_location@plt>
   198f8:	mov	r1, #0
   198fc:	str	r1, [r0]
   19900:	mov	r0, r4
   19904:	pop	{r4, r5, r6, sl, fp, pc}
   19908:	push	{fp, lr}
   1990c:	mov	fp, sp
   19910:	mov	r0, #14
   19914:	bl	112c8 <nl_langinfo@plt>
   19918:	movw	r1, #44295	; 0xad07
   1991c:	cmp	r0, #0
   19920:	movt	r1, #1
   19924:	movne	r1, r0
   19928:	movw	r0, #47373	; 0xb90d
   1992c:	ldrb	r2, [r1]
   19930:	movt	r0, #1
   19934:	cmp	r2, #0
   19938:	movne	r0, r1
   1993c:	pop	{fp, pc}
   19940:	push	{r4, r5, r6, r7, fp, lr}
   19944:	add	fp, sp, #16
   19948:	sub	sp, sp, #8
   1994c:	cmp	r0, #0
   19950:	add	r5, sp, #4
   19954:	mov	r7, r2
   19958:	mov	r4, r1
   1995c:	movne	r5, r0
   19960:	mov	r0, r5
   19964:	bl	1116c <mbrtowc@plt>
   19968:	mov	r6, r0
   1996c:	cmp	r7, #0
   19970:	beq	19998 <__assert_fail@plt+0x8664>
   19974:	cmn	r6, #2
   19978:	bcc	19998 <__assert_fail@plt+0x8664>
   1997c:	mov	r0, #0
   19980:	bl	199e0 <__assert_fail@plt+0x86ac>
   19984:	cmp	r0, #0
   19988:	bne	19998 <__assert_fail@plt+0x8664>
   1998c:	ldrb	r0, [r4]
   19990:	mov	r6, #1
   19994:	str	r0, [r5]
   19998:	mov	r0, r6
   1999c:	sub	sp, fp, #16
   199a0:	pop	{r4, r5, r6, r7, fp, pc}
   199a4:	cmp	r2, #0
   199a8:	beq	199d8 <__assert_fail@plt+0x86a4>
   199ac:	mvn	r3, #0
   199b0:	udiv	r3, r3, r2
   199b4:	cmp	r3, r1
   199b8:	bcs	199d8 <__assert_fail@plt+0x86a4>
   199bc:	push	{fp, lr}
   199c0:	mov	fp, sp
   199c4:	bl	11214 <__errno_location@plt>
   199c8:	mov	r1, #12
   199cc:	str	r1, [r0]
   199d0:	mov	r0, #0
   199d4:	pop	{fp, pc}
   199d8:	mul	r1, r2, r1
   199dc:	b	19830 <__assert_fail@plt+0x84fc>
   199e0:	push	{r4, sl, fp, lr}
   199e4:	add	fp, sp, #8
   199e8:	sub	sp, sp, #264	; 0x108
   199ec:	add	r1, sp, #7
   199f0:	movw	r2, #257	; 0x101
   199f4:	bl	19a4c <__assert_fail@plt+0x8718>
   199f8:	mov	r4, #0
   199fc:	cmp	r0, #0
   19a00:	bne	19a40 <__assert_fail@plt+0x870c>
   19a04:	movw	r1, #47379	; 0xb913
   19a08:	add	r0, sp, #7
   19a0c:	mov	r2, #2
   19a10:	movt	r1, #1
   19a14:	bl	111f0 <bcmp@plt>
   19a18:	cmp	r0, #0
   19a1c:	beq	19a40 <__assert_fail@plt+0x870c>
   19a20:	movw	r1, #47381	; 0xb915
   19a24:	add	r0, sp, #7
   19a28:	mov	r2, #6
   19a2c:	movt	r1, #1
   19a30:	bl	111f0 <bcmp@plt>
   19a34:	cmp	r0, #0
   19a38:	mov	r4, r0
   19a3c:	movwne	r4, #1
   19a40:	mov	r0, r4
   19a44:	sub	sp, fp, #8
   19a48:	pop	{r4, sl, fp, pc}
   19a4c:	push	{r4, r5, r6, r7, fp, lr}
   19a50:	add	fp, sp, #16
   19a54:	mov	r4, r1
   19a58:	mov	r1, #0
   19a5c:	mov	r6, r2
   19a60:	bl	112b0 <setlocale@plt>
   19a64:	cmp	r0, #0
   19a68:	beq	19a98 <__assert_fail@plt+0x8764>
   19a6c:	mov	r7, r0
   19a70:	bl	111fc <strlen@plt>
   19a74:	cmp	r0, r6
   19a78:	bcs	19ab4 <__assert_fail@plt+0x8780>
   19a7c:	add	r2, r0, #1
   19a80:	mov	r0, r4
   19a84:	mov	r1, r7
   19a88:	bl	110d0 <memcpy@plt>
   19a8c:	mov	r5, #0
   19a90:	mov	r0, r5
   19a94:	pop	{r4, r5, r6, r7, fp, pc}
   19a98:	mov	r5, #22
   19a9c:	cmp	r6, #0
   19aa0:	beq	19adc <__assert_fail@plt+0x87a8>
   19aa4:	mov	r0, #0
   19aa8:	strb	r0, [r4]
   19aac:	mov	r0, r5
   19ab0:	pop	{r4, r5, r6, r7, fp, pc}
   19ab4:	mov	r5, #34	; 0x22
   19ab8:	cmp	r6, #0
   19abc:	beq	19adc <__assert_fail@plt+0x87a8>
   19ac0:	sub	r6, r6, #1
   19ac4:	mov	r0, r4
   19ac8:	mov	r1, r7
   19acc:	mov	r2, r6
   19ad0:	bl	110d0 <memcpy@plt>
   19ad4:	mov	r0, #0
   19ad8:	strb	r0, [r4, r6]
   19adc:	mov	r0, r5
   19ae0:	pop	{r4, r5, r6, r7, fp, pc}
   19ae4:	mov	r1, #0
   19ae8:	b	112b0 <setlocale@plt>
   19aec:	cmp	r3, #0
   19af0:	cmpeq	r2, #0
   19af4:	bne	19b0c <__assert_fail@plt+0x87d8>
   19af8:	cmp	r1, #0
   19afc:	cmpeq	r0, #0
   19b00:	mvnne	r1, #0
   19b04:	mvnne	r0, #0
   19b08:	b	19b28 <__assert_fail@plt+0x87f4>
   19b0c:	sub	sp, sp, #8
   19b10:	push	{sp, lr}
   19b14:	bl	19b38 <__assert_fail@plt+0x8804>
   19b18:	ldr	lr, [sp, #4]
   19b1c:	add	sp, sp, #8
   19b20:	pop	{r2, r3}
   19b24:	bx	lr
   19b28:	push	{r1, lr}
   19b2c:	mov	r0, #8
   19b30:	bl	11088 <raise@plt>
   19b34:	pop	{r1, pc}
   19b38:	cmp	r1, r3
   19b3c:	cmpeq	r0, r2
   19b40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b44:	mov	r4, r0
   19b48:	movcc	r0, #0
   19b4c:	mov	r5, r1
   19b50:	ldr	lr, [sp, #36]	; 0x24
   19b54:	movcc	r1, r0
   19b58:	bcc	19c54 <__assert_fail@plt+0x8920>
   19b5c:	cmp	r3, #0
   19b60:	clzeq	ip, r2
   19b64:	clzne	ip, r3
   19b68:	addeq	ip, ip, #32
   19b6c:	cmp	r5, #0
   19b70:	clzeq	r1, r4
   19b74:	addeq	r1, r1, #32
   19b78:	clzne	r1, r5
   19b7c:	sub	ip, ip, r1
   19b80:	sub	sl, ip, #32
   19b84:	lsl	r9, r3, ip
   19b88:	rsb	fp, ip, #32
   19b8c:	orr	r9, r9, r2, lsl sl
   19b90:	orr	r9, r9, r2, lsr fp
   19b94:	lsl	r8, r2, ip
   19b98:	cmp	r5, r9
   19b9c:	cmpeq	r4, r8
   19ba0:	movcc	r0, #0
   19ba4:	movcc	r1, r0
   19ba8:	bcc	19bc4 <__assert_fail@plt+0x8890>
   19bac:	mov	r0, #1
   19bb0:	subs	r4, r4, r8
   19bb4:	lsl	r1, r0, sl
   19bb8:	orr	r1, r1, r0, lsr fp
   19bbc:	lsl	r0, r0, ip
   19bc0:	sbc	r5, r5, r9
   19bc4:	cmp	ip, #0
   19bc8:	beq	19c54 <__assert_fail@plt+0x8920>
   19bcc:	lsr	r6, r8, #1
   19bd0:	orr	r6, r6, r9, lsl #31
   19bd4:	lsr	r7, r9, #1
   19bd8:	mov	r2, ip
   19bdc:	b	19c00 <__assert_fail@plt+0x88cc>
   19be0:	subs	r3, r4, r6
   19be4:	sbc	r8, r5, r7
   19be8:	adds	r3, r3, r3
   19bec:	adc	r8, r8, r8
   19bf0:	adds	r4, r3, #1
   19bf4:	adc	r5, r8, #0
   19bf8:	subs	r2, r2, #1
   19bfc:	beq	19c1c <__assert_fail@plt+0x88e8>
   19c00:	cmp	r5, r7
   19c04:	cmpeq	r4, r6
   19c08:	bcs	19be0 <__assert_fail@plt+0x88ac>
   19c0c:	adds	r4, r4, r4
   19c10:	adc	r5, r5, r5
   19c14:	subs	r2, r2, #1
   19c18:	bne	19c00 <__assert_fail@plt+0x88cc>
   19c1c:	lsr	r3, r4, ip
   19c20:	orr	r3, r3, r5, lsl fp
   19c24:	lsr	r2, r5, ip
   19c28:	orr	r3, r3, r5, lsr sl
   19c2c:	adds	r0, r0, r4
   19c30:	mov	r4, r3
   19c34:	lsl	r3, r2, ip
   19c38:	orr	r3, r3, r4, lsl sl
   19c3c:	lsl	ip, r4, ip
   19c40:	orr	r3, r3, r4, lsr fp
   19c44:	adc	r1, r1, r5
   19c48:	subs	r0, r0, ip
   19c4c:	mov	r5, r2
   19c50:	sbc	r1, r1, r3
   19c54:	cmp	lr, #0
   19c58:	strdne	r4, [lr]
   19c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19c64:	mov	r7, r0
   19c68:	ldr	r6, [pc, #72]	; 19cb8 <__assert_fail@plt+0x8984>
   19c6c:	ldr	r5, [pc, #72]	; 19cbc <__assert_fail@plt+0x8988>
   19c70:	add	r6, pc, r6
   19c74:	add	r5, pc, r5
   19c78:	sub	r6, r6, r5
   19c7c:	mov	r8, r1
   19c80:	mov	r9, r2
   19c84:	bl	11050 <calloc@plt-0x20>
   19c88:	asrs	r6, r6, #2
   19c8c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19c90:	mov	r4, #0
   19c94:	add	r4, r4, #1
   19c98:	ldr	r3, [r5], #4
   19c9c:	mov	r2, r9
   19ca0:	mov	r1, r8
   19ca4:	mov	r0, r7
   19ca8:	blx	r3
   19cac:	cmp	r6, r4
   19cb0:	bne	19c94 <__assert_fail@plt+0x8960>
   19cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19cb8:	muleq	r1, r4, r2
   19cbc:	andeq	r2, r1, ip, lsl #5
   19cc0:	bx	lr
   19cc4:	ldr	r3, [pc, #12]	; 19cd8 <__assert_fail@plt+0x89a4>
   19cc8:	mov	r1, #0
   19ccc:	add	r3, pc, r3
   19cd0:	ldr	r2, [r3]
   19cd4:	b	1122c <__cxa_atexit@plt>
   19cd8:	andeq	r2, r1, r0, lsr r4

Disassembly of section .fini:

00019cdc <.fini>:
   19cdc:	push	{r3, lr}
   19ce0:	pop	{r3, pc}
