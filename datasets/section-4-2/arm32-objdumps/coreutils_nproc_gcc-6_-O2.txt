
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c44 <.init>:
   10c44:	push	{r3, lr}
   10c48:	bl	110e8 <__assert_fail@plt+0x22c>
   10c4c:	pop	{r3, pc}

Disassembly of section .plt:

00010c50 <calloc@plt-0x14>:
   10c50:	push	{lr}		; (str lr, [sp, #-4]!)
   10c54:	ldr	lr, [pc, #4]	; 10c60 <calloc@plt-0x4>
   10c58:	add	lr, pc, lr
   10c5c:	ldr	pc, [lr, #8]!
   10c60:	andeq	r5, r1, r0, lsr #7

00010c64 <calloc@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #928]!	; 0x3a0

00010c70 <fputs_unlocked@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #920]!	; 0x398

00010c7c <raise@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #912]!	; 0x390

00010c88 <strcmp@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #904]!	; 0x388

00010c94 <fflush@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #896]!	; 0x380

00010ca0 <free@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #888]!	; 0x378

00010cac <_exit@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #880]!	; 0x370

00010cb8 <memcpy@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #872]!	; 0x368

00010cc4 <__strtoull_internal@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #864]!	; 0x360

00010cd0 <mbsinit@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #856]!	; 0x358

00010cdc <__sched_cpucount@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #848]!	; 0x350

00010ce8 <memcmp@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #840]!	; 0x348

00010cf4 <fputc_unlocked@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #832]!	; 0x340

00010d00 <dcgettext@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #824]!	; 0x338

00010d0c <sysconf@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #816]!	; 0x330

00010d18 <realloc@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #808]!	; 0x328

00010d24 <textdomain@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #800]!	; 0x320

00010d30 <iswprint@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #792]!	; 0x318

00010d3c <fwrite@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #784]!	; 0x310

00010d48 <lseek64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #776]!	; 0x308

00010d54 <__ctype_get_mb_cur_max@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #768]!	; 0x300

00010d60 <__fpending@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #760]!	; 0x2f8

00010d6c <mbrtowc@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #752]!	; 0x2f0

00010d78 <error@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #744]!	; 0x2e8

00010d84 <getenv@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #736]!	; 0x2e0

00010d90 <malloc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #728]!	; 0x2d8

00010d9c <__libc_start_main@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #720]!	; 0x2d0

00010da8 <__freading@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #712]!	; 0x2c8

00010db4 <__gmon_start__@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #704]!	; 0x2c0

00010dc0 <getopt_long@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #696]!	; 0x2b8

00010dcc <__ctype_b_loc@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #688]!	; 0x2b0

00010dd8 <exit@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #680]!	; 0x2a8

00010de4 <strtoul@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #672]!	; 0x2a0

00010df0 <strlen@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #664]!	; 0x298

00010dfc <strchr@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #656]!	; 0x290

00010e08 <__errno_location@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #648]!	; 0x288

00010e14 <__cxa_atexit@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #640]!	; 0x280

00010e20 <memset@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #632]!	; 0x278

00010e2c <__printf_chk@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #624]!	; 0x270

00010e38 <fileno@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #616]!	; 0x268

00010e44 <__fprintf_chk@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #608]!	; 0x260

00010e50 <fclose@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #600]!	; 0x258

00010e5c <fseeko64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #592]!	; 0x250

00010e68 <setlocale@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #584]!	; 0x248

00010e74 <strrchr@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #576]!	; 0x240

00010e80 <nl_langinfo@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #568]!	; 0x238

00010e8c <sched_getaffinity@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #560]!	; 0x230

00010e98 <bindtextdomain@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #552]!	; 0x228

00010ea4 <strncmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #544]!	; 0x220

00010eb0 <abort@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #536]!	; 0x218

00010ebc <__assert_fail@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #528]!	; 0x210

Disassembly of section .text:

00010ec8 <.text>:
   10ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ecc:	mov	r6, r0
   10ed0:	sub	sp, sp, #36	; 0x24
   10ed4:	ldr	r0, [r1]
   10ed8:	mov	r5, r1
   10edc:	bl	117d0 <__assert_fail@plt+0x914>
   10ee0:	ldr	r1, [pc, #388]	; 1106c <__assert_fail@plt+0x1b0>
   10ee4:	mov	r0, #6
   10ee8:	bl	10e68 <setlocale@plt>
   10eec:	ldr	r9, [pc, #376]	; 1106c <__assert_fail@plt+0x1b0>
   10ef0:	ldr	r1, [pc, #376]	; 11070 <__assert_fail@plt+0x1b4>
   10ef4:	ldr	r0, [pc, #376]	; 11074 <__assert_fail@plt+0x1b8>
   10ef8:	bl	10e98 <bindtextdomain@plt>
   10efc:	ldr	r8, [pc, #372]	; 11078 <__assert_fail@plt+0x1bc>
   10f00:	ldr	r0, [pc, #364]	; 11074 <__assert_fail@plt+0x1b8>
   10f04:	ldr	sl, [pc, #368]	; 1107c <__assert_fail@plt+0x1c0>
   10f08:	bl	10d24 <textdomain@plt>
   10f0c:	mov	r7, r9
   10f10:	ldr	r0, [pc, #360]	; 11080 <__assert_fail@plt+0x1c4>
   10f14:	mov	fp, #0
   10f18:	bl	1540c <__assert_fail@plt+0x4550>
   10f1c:	mov	r3, #2
   10f20:	str	r3, [sp, #28]
   10f24:	mov	r4, #0
   10f28:	str	r4, [sp]
   10f2c:	mov	r3, r8
   10f30:	mov	r2, r7
   10f34:	mov	r1, r5
   10f38:	mov	r0, r6
   10f3c:	bl	10dc0 <getopt_long@plt>
   10f40:	cmn	r0, #1
   10f44:	beq	11030 <__assert_fail@plt+0x174>
   10f48:	cmn	r0, #2
   10f4c:	beq	11028 <__assert_fail@plt+0x16c>
   10f50:	ble	10fb4 <__assert_fail@plt+0xf8>
   10f54:	cmp	r0, #256	; 0x100
   10f58:	beq	10fac <__assert_fail@plt+0xf0>
   10f5c:	cmp	r0, sl
   10f60:	bne	11020 <__assert_fail@plt+0x164>
   10f64:	ldr	r3, [pc, #280]	; 11084 <__assert_fail@plt+0x1c8>
   10f68:	mov	r2, #5
   10f6c:	ldr	r1, [pc, #276]	; 11088 <__assert_fail@plt+0x1cc>
   10f70:	mov	r0, #0
   10f74:	ldr	fp, [r3]
   10f78:	bl	10d00 <dcgettext@plt>
   10f7c:	mvn	r2, #0
   10f80:	mov	r3, #0
   10f84:	str	r4, [sp, #16]
   10f88:	strd	r2, [sp]
   10f8c:	str	r9, [sp, #8]
   10f90:	mov	r2, #0
   10f94:	mov	r3, #0
   10f98:	str	r0, [sp, #12]
   10f9c:	mov	r0, fp
   10fa0:	bl	1428c <__assert_fail@plt+0x33d0>
   10fa4:	mov	fp, r0
   10fa8:	b	10f24 <__assert_fail@plt+0x68>
   10fac:	str	r4, [sp, #28]
   10fb0:	b	10f28 <__assert_fail@plt+0x6c>
   10fb4:	cmn	r0, #3
   10fb8:	bne	11020 <__assert_fail@plt+0x164>
   10fbc:	ldr	r1, [pc, #200]	; 1108c <__assert_fail@plt+0x1d0>
   10fc0:	ldr	r3, [pc, #200]	; 11090 <__assert_fail@plt+0x1d4>
   10fc4:	ldr	r2, [pc, #200]	; 11094 <__assert_fail@plt+0x1d8>
   10fc8:	str	r4, [sp, #4]
   10fcc:	ldr	r0, [r1]
   10fd0:	ldr	r3, [r3]
   10fd4:	ldr	r1, [pc, #188]	; 11098 <__assert_fail@plt+0x1dc>
   10fd8:	str	r2, [sp]
   10fdc:	ldr	r2, [pc, #184]	; 1109c <__assert_fail@plt+0x1e0>
   10fe0:	bl	13acc <__assert_fail@plt+0x2c10>
   10fe4:	mov	r0, #0
   10fe8:	bl	10dd8 <exit@plt>
   10fec:	mov	r2, #5
   10ff0:	ldr	r1, [pc, #168]	; 110a0 <__assert_fail@plt+0x1e4>
   10ff4:	mov	r0, #0
   10ff8:	bl	10d00 <dcgettext@plt>
   10ffc:	ldr	r3, [r4]
   11000:	mov	r6, r0
   11004:	ldr	r0, [r5, r3, lsl #2]
   11008:	bl	13690 <__assert_fail@plt+0x27d4>
   1100c:	mov	r1, #0
   11010:	mov	r2, r6
   11014:	mov	r3, r0
   11018:	mov	r0, r1
   1101c:	bl	10d78 <error@plt>
   11020:	mov	r0, #1
   11024:	bl	111d4 <__assert_fail@plt+0x318>
   11028:	mov	r0, #0
   1102c:	bl	111d4 <__assert_fail@plt+0x318>
   11030:	ldr	r4, [pc, #108]	; 110a4 <__assert_fail@plt+0x1e8>
   11034:	ldr	r3, [r4]
   11038:	cmp	r6, r3
   1103c:	bne	10fec <__assert_fail@plt+0x130>
   11040:	ldr	r0, [sp, #28]
   11044:	bl	116fc <__assert_fail@plt+0x840>
   11048:	ldr	r1, [pc, #88]	; 110a8 <__assert_fail@plt+0x1ec>
   1104c:	cmp	fp, r0
   11050:	subcc	r2, r0, fp
   11054:	movcs	r2, #1
   11058:	mov	r0, #1
   1105c:	bl	10e2c <__printf_chk@plt>
   11060:	mov	r0, #0
   11064:	add	sp, sp, #36	; 0x24
   11068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1106c:	strdeq	r5, [r1], -r4
   11070:	andeq	r5, r1, ip, asr #14
   11074:	andeq	r5, r1, r4, lsr #13
   11078:	andeq	r5, r1, r8, ror #8
   1107c:	andeq	r0, r0, r1, lsl #2
   11080:	ldrdeq	r1, [r1], -r8
   11084:	andeq	r6, r2, r8, asr #2
   11088:	andeq	r5, r1, r8, ror r7
   1108c:	andeq	r6, r2, r4, asr #2
   11090:	andeq	r6, r2, r4, ror #1
   11094:	andeq	r5, r1, r4, ror #14
   11098:			; <UNDEFINED> instruction: 0x000154b8
   1109c:	andeq	r5, r1, r0, lsr #13
   110a0:	andeq	r5, r1, r8, lsl #15
   110a4:	andeq	r6, r2, r8, lsr r1
   110a8:	muleq	r1, ip, r7
   110ac:	mov	fp, #0
   110b0:	mov	lr, #0
   110b4:	pop	{r1}		; (ldr r1, [sp], #4)
   110b8:	mov	r2, sp
   110bc:	push	{r2}		; (str r2, [sp, #-4]!)
   110c0:	push	{r0}		; (str r0, [sp, #-4]!)
   110c4:	ldr	ip, [pc, #16]	; 110dc <__assert_fail@plt+0x220>
   110c8:	push	{ip}		; (str ip, [sp, #-4]!)
   110cc:	ldr	r0, [pc, #12]	; 110e0 <__assert_fail@plt+0x224>
   110d0:	ldr	r3, [pc, #12]	; 110e4 <__assert_fail@plt+0x228>
   110d4:	bl	10d9c <__libc_start_main@plt>
   110d8:	bl	10eb0 <abort@plt>
   110dc:	andeq	r5, r1, r8, lsl #8
   110e0:	andeq	r0, r1, r8, asr #29
   110e4:	andeq	r5, r1, r8, lsr #7
   110e8:	ldr	r3, [pc, #20]	; 11104 <__assert_fail@plt+0x248>
   110ec:	ldr	r2, [pc, #20]	; 11108 <__assert_fail@plt+0x24c>
   110f0:	add	r3, pc, r3
   110f4:	ldr	r2, [r3, r2]
   110f8:	cmp	r2, #0
   110fc:	bxeq	lr
   11100:	b	10db4 <__gmon_start__@plt>
   11104:	andeq	r4, r1, r8, lsl #30
   11108:	ldrdeq	r0, [r0], -r8
   1110c:	ldr	r3, [pc, #28]	; 11130 <__assert_fail@plt+0x274>
   11110:	ldr	r0, [pc, #28]	; 11134 <__assert_fail@plt+0x278>
   11114:	sub	r3, r3, r0
   11118:	cmp	r3, #6
   1111c:	bxls	lr
   11120:	ldr	r3, [pc, #16]	; 11138 <__assert_fail@plt+0x27c>
   11124:	cmp	r3, #0
   11128:	bxeq	lr
   1112c:	bx	r3
   11130:	andeq	r6, r2, pc, lsr #2
   11134:	andeq	r6, r2, ip, lsr #2
   11138:	andeq	r0, r0, r0
   1113c:	ldr	r1, [pc, #36]	; 11168 <__assert_fail@plt+0x2ac>
   11140:	ldr	r0, [pc, #36]	; 1116c <__assert_fail@plt+0x2b0>
   11144:	sub	r1, r1, r0
   11148:	asr	r1, r1, #2
   1114c:	add	r1, r1, r1, lsr #31
   11150:	asrs	r1, r1, #1
   11154:	bxeq	lr
   11158:	ldr	r3, [pc, #16]	; 11170 <__assert_fail@plt+0x2b4>
   1115c:	cmp	r3, #0
   11160:	bxeq	lr
   11164:	bx	r3
   11168:	andeq	r6, r2, ip, lsr #2
   1116c:	andeq	r6, r2, ip, lsr #2
   11170:	andeq	r0, r0, r0
   11174:	push	{r4, lr}
   11178:	ldr	r4, [pc, #24]	; 11198 <__assert_fail@plt+0x2dc>
   1117c:	ldrb	r3, [r4]
   11180:	cmp	r3, #0
   11184:	popne	{r4, pc}
   11188:	bl	1110c <__assert_fail@plt+0x250>
   1118c:	mov	r3, #1
   11190:	strb	r3, [r4]
   11194:	pop	{r4, pc}
   11198:	andeq	r6, r2, ip, asr #2
   1119c:	ldr	r0, [pc, #40]	; 111cc <__assert_fail@plt+0x310>
   111a0:	ldr	r3, [r0]
   111a4:	cmp	r3, #0
   111a8:	bne	111b0 <__assert_fail@plt+0x2f4>
   111ac:	b	1113c <__assert_fail@plt+0x280>
   111b0:	ldr	r3, [pc, #24]	; 111d0 <__assert_fail@plt+0x314>
   111b4:	cmp	r3, #0
   111b8:	beq	111ac <__assert_fail@plt+0x2f0>
   111bc:	push	{r4, lr}
   111c0:	blx	r3
   111c4:	pop	{r4, lr}
   111c8:	b	1113c <__assert_fail@plt+0x280>
   111cc:	andeq	r5, r2, r4, lsl pc
   111d0:	andeq	r0, r0, r0
   111d4:	subs	r6, r0, #0
   111d8:	push	{r7, lr}
   111dc:	sub	sp, sp, #56	; 0x38
   111e0:	beq	1121c <__assert_fail@plt+0x360>
   111e4:	ldr	r3, [pc, #636]	; 11468 <__assert_fail@plt+0x5ac>
   111e8:	mov	r2, #5
   111ec:	ldr	r1, [pc, #632]	; 1146c <__assert_fail@plt+0x5b0>
   111f0:	mov	r0, #0
   111f4:	ldr	r4, [r3]
   111f8:	bl	10d00 <dcgettext@plt>
   111fc:	ldr	r3, [pc, #620]	; 11470 <__assert_fail@plt+0x5b4>
   11200:	mov	r1, #1
   11204:	ldr	r3, [r3]
   11208:	mov	r2, r0
   1120c:	mov	r0, r4
   11210:	bl	10e44 <__fprintf_chk@plt>
   11214:	mov	r0, r6
   11218:	bl	10dd8 <exit@plt>
   1121c:	mov	r2, #5
   11220:	ldr	r1, [pc, #588]	; 11474 <__assert_fail@plt+0x5b8>
   11224:	bl	10d00 <dcgettext@plt>
   11228:	ldr	r3, [pc, #576]	; 11470 <__assert_fail@plt+0x5b4>
   1122c:	ldr	r7, [pc, #580]	; 11478 <__assert_fail@plt+0x5bc>
   11230:	ldr	r4, [pc, #580]	; 1147c <__assert_fail@plt+0x5c0>
   11234:	ldr	r2, [r3]
   11238:	mov	r1, r0
   1123c:	mov	r0, #1
   11240:	bl	10e2c <__printf_chk@plt>
   11244:	mov	r2, #5
   11248:	ldr	r1, [pc, #560]	; 11480 <__assert_fail@plt+0x5c4>
   1124c:	mov	r0, r6
   11250:	bl	10d00 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10c70 <fputs_unlocked@plt>
   1125c:	mov	r2, #5
   11260:	ldr	r1, [pc, #540]	; 11484 <__assert_fail@plt+0x5c8>
   11264:	mov	r0, r6
   11268:	bl	10d00 <dcgettext@plt>
   1126c:	ldr	r1, [r7]
   11270:	bl	10c70 <fputs_unlocked@plt>
   11274:	mov	r2, #5
   11278:	ldr	r1, [pc, #520]	; 11488 <__assert_fail@plt+0x5cc>
   1127c:	mov	r0, r6
   11280:	bl	10d00 <dcgettext@plt>
   11284:	ldr	r1, [r7]
   11288:	bl	10c70 <fputs_unlocked@plt>
   1128c:	mov	r2, #5
   11290:	ldr	r1, [pc, #500]	; 1148c <__assert_fail@plt+0x5d0>
   11294:	mov	r0, r6
   11298:	bl	10d00 <dcgettext@plt>
   1129c:	ldr	r1, [r7]
   112a0:	bl	10c70 <fputs_unlocked@plt>
   112a4:	ldm	r4!, {r0, r1, r2, r3}
   112a8:	mov	lr, sp
   112ac:	stmia	lr!, {r0, r1, r2, r3}
   112b0:	ldm	r4!, {r0, r1, r2, r3}
   112b4:	ldr	ip, [sp]
   112b8:	stmia	lr!, {r0, r1, r2, r3}
   112bc:	cmp	ip, #0
   112c0:	ldm	r4!, {r0, r1, r2, r3}
   112c4:	stmia	lr!, {r0, r1, r2, r3}
   112c8:	ldm	r4, {r0, r1}
   112cc:	moveq	r4, sp
   112d0:	stm	lr, {r0, r1}
   112d4:	beq	11304 <__assert_fail@plt+0x448>
   112d8:	ldr	r5, [pc, #432]	; 11490 <__assert_fail@plt+0x5d4>
   112dc:	mov	r4, sp
   112e0:	b	112f0 <__assert_fail@plt+0x434>
   112e4:	ldr	ip, [r4, #8]!
   112e8:	cmp	ip, #0
   112ec:	beq	11304 <__assert_fail@plt+0x448>
   112f0:	mov	r1, ip
   112f4:	mov	r0, r5
   112f8:	bl	10c88 <strcmp@plt>
   112fc:	cmp	r0, #0
   11300:	bne	112e4 <__assert_fail@plt+0x428>
   11304:	ldr	r4, [r4, #4]
   11308:	mov	r2, #5
   1130c:	cmp	r4, #0
   11310:	ldr	r1, [pc, #380]	; 11494 <__assert_fail@plt+0x5d8>
   11314:	beq	113bc <__assert_fail@plt+0x500>
   11318:	mov	r0, #0
   1131c:	bl	10d00 <dcgettext@plt>
   11320:	ldr	r3, [pc, #368]	; 11498 <__assert_fail@plt+0x5dc>
   11324:	ldr	r2, [pc, #368]	; 1149c <__assert_fail@plt+0x5e0>
   11328:	mov	r1, r0
   1132c:	mov	r0, #1
   11330:	bl	10e2c <__printf_chk@plt>
   11334:	mov	r1, #0
   11338:	mov	r0, #5
   1133c:	bl	10e68 <setlocale@plt>
   11340:	cmp	r0, #0
   11344:	ldreq	r5, [pc, #324]	; 11490 <__assert_fail@plt+0x5d4>
   11348:	beq	11364 <__assert_fail@plt+0x4a8>
   1134c:	mov	r2, #3
   11350:	ldr	r1, [pc, #328]	; 114a0 <__assert_fail@plt+0x5e4>
   11354:	bl	10ea4 <strncmp@plt>
   11358:	ldr	r5, [pc, #304]	; 11490 <__assert_fail@plt+0x5d4>
   1135c:	cmp	r0, #0
   11360:	bne	1144c <__assert_fail@plt+0x590>
   11364:	mov	r2, #5
   11368:	ldr	r1, [pc, #308]	; 114a4 <__assert_fail@plt+0x5e8>
   1136c:	mov	r0, #0
   11370:	bl	10d00 <dcgettext@plt>
   11374:	ldr	r3, [pc, #276]	; 11490 <__assert_fail@plt+0x5d4>
   11378:	ldr	r2, [pc, #280]	; 11498 <__assert_fail@plt+0x5dc>
   1137c:	mov	r1, r0
   11380:	mov	r0, #1
   11384:	bl	10e2c <__printf_chk@plt>
   11388:	mov	r2, #5
   1138c:	ldr	r1, [pc, #276]	; 114a8 <__assert_fail@plt+0x5ec>
   11390:	mov	r0, #0
   11394:	bl	10d00 <dcgettext@plt>
   11398:	ldr	r2, [pc, #268]	; 114ac <__assert_fail@plt+0x5f0>
   1139c:	cmp	r4, r5
   113a0:	ldr	r3, [pc, #264]	; 114b0 <__assert_fail@plt+0x5f4>
   113a4:	movne	r3, r2
   113a8:	mov	r1, r0
   113ac:	mov	r2, r4
   113b0:	mov	r0, #1
   113b4:	bl	10e2c <__printf_chk@plt>
   113b8:	b	11214 <__assert_fail@plt+0x358>
   113bc:	mov	r0, r4
   113c0:	bl	10d00 <dcgettext@plt>
   113c4:	ldr	r3, [pc, #204]	; 11498 <__assert_fail@plt+0x5dc>
   113c8:	ldr	r2, [pc, #204]	; 1149c <__assert_fail@plt+0x5e0>
   113cc:	mov	r1, r0
   113d0:	mov	r0, #1
   113d4:	bl	10e2c <__printf_chk@plt>
   113d8:	mov	r1, r4
   113dc:	mov	r0, #5
   113e0:	bl	10e68 <setlocale@plt>
   113e4:	cmp	r0, #0
   113e8:	beq	11400 <__assert_fail@plt+0x544>
   113ec:	mov	r2, #3
   113f0:	ldr	r1, [pc, #168]	; 114a0 <__assert_fail@plt+0x5e4>
   113f4:	bl	10ea4 <strncmp@plt>
   113f8:	cmp	r0, #0
   113fc:	bne	11444 <__assert_fail@plt+0x588>
   11400:	mov	r2, #5
   11404:	ldr	r1, [pc, #152]	; 114a4 <__assert_fail@plt+0x5e8>
   11408:	mov	r0, #0
   1140c:	bl	10d00 <dcgettext@plt>
   11410:	ldr	r3, [pc, #120]	; 11490 <__assert_fail@plt+0x5d4>
   11414:	ldr	r2, [pc, #124]	; 11498 <__assert_fail@plt+0x5dc>
   11418:	mov	r4, r3
   1141c:	mov	r1, r0
   11420:	mov	r0, #1
   11424:	bl	10e2c <__printf_chk@plt>
   11428:	ldr	r1, [pc, #120]	; 114a8 <__assert_fail@plt+0x5ec>
   1142c:	mov	r2, #5
   11430:	mov	r0, #0
   11434:	bl	10d00 <dcgettext@plt>
   11438:	ldr	r3, [pc, #112]	; 114b0 <__assert_fail@plt+0x5f4>
   1143c:	mov	r1, r0
   11440:	b	113ac <__assert_fail@plt+0x4f0>
   11444:	ldr	r5, [pc, #68]	; 11490 <__assert_fail@plt+0x5d4>
   11448:	mov	r4, r5
   1144c:	mov	r2, #5
   11450:	ldr	r1, [pc, #92]	; 114b4 <__assert_fail@plt+0x5f8>
   11454:	mov	r0, #0
   11458:	bl	10d00 <dcgettext@plt>
   1145c:	ldr	r1, [r7]
   11460:	bl	10c70 <fputs_unlocked@plt>
   11464:	b	11364 <__assert_fail@plt+0x4a8>
   11468:	andeq	r6, r2, r0, asr #2
   1146c:	andeq	r5, r1, r0, asr #9
   11470:	andeq	r6, r2, r8, asr r1
   11474:	andeq	r5, r1, r8, ror #9
   11478:	andeq	r6, r2, r4, asr #2
   1147c:	andeq	r5, r1, r0, lsr r4
   11480:	andeq	r5, r1, r0, lsl #10
   11484:	andeq	r5, r1, r0, lsl #11
   11488:	strdeq	r5, [r1], -r8
   1148c:	andeq	r5, r1, r8, lsr #12
   11490:			; <UNDEFINED> instruction: 0x000154b8
   11494:	andeq	r5, r1, r0, ror #12
   11498:	andeq	r5, r1, r8, ror r6
   1149c:	andeq	r5, r1, r0, lsr #13
   114a0:			; <UNDEFINED> instruction: 0x000156b0
   114a4:	strdeq	r5, [r1], -ip
   114a8:	andeq	r5, r1, r8, lsl r7
   114ac:	strdeq	r5, [r1], -r4
   114b0:	andeq	r5, r1, ip, lsr #15
   114b4:			; <UNDEFINED> instruction: 0x000156b4
   114b8:	ldr	r3, [pc, #4]	; 114c4 <__assert_fail@plt+0x608>
   114bc:	str	r0, [r3]
   114c0:	bx	lr
   114c4:	andeq	r6, r2, r0, asr r1
   114c8:	ldr	r3, [pc, #4]	; 114d4 <__assert_fail@plt+0x618>
   114cc:	strb	r0, [r3, #4]
   114d0:	bx	lr
   114d4:	andeq	r6, r2, r0, asr r1
   114d8:	ldr	r3, [pc, #192]	; 115a0 <__assert_fail@plt+0x6e4>
   114dc:	push	{r4, r5, r6, lr}
   114e0:	sub	sp, sp, #8
   114e4:	ldr	r0, [r3]
   114e8:	bl	149ac <__assert_fail@plt+0x3af0>
   114ec:	cmp	r0, #0
   114f0:	beq	11514 <__assert_fail@plt+0x658>
   114f4:	ldr	r4, [pc, #168]	; 115a4 <__assert_fail@plt+0x6e8>
   114f8:	ldrb	r3, [r4, #4]
   114fc:	cmp	r3, #0
   11500:	beq	11530 <__assert_fail@plt+0x674>
   11504:	bl	10e08 <__errno_location@plt>
   11508:	ldr	r3, [r0]
   1150c:	cmp	r3, #32
   11510:	bne	11530 <__assert_fail@plt+0x674>
   11514:	ldr	r3, [pc, #140]	; 115a8 <__assert_fail@plt+0x6ec>
   11518:	ldr	r0, [r3]
   1151c:	bl	149ac <__assert_fail@plt+0x3af0>
   11520:	cmp	r0, #0
   11524:	bne	11578 <__assert_fail@plt+0x6bc>
   11528:	add	sp, sp, #8
   1152c:	pop	{r4, r5, r6, pc}
   11530:	mov	r2, #5
   11534:	ldr	r1, [pc, #112]	; 115ac <__assert_fail@plt+0x6f0>
   11538:	mov	r0, #0
   1153c:	bl	10d00 <dcgettext@plt>
   11540:	ldr	r4, [r4]
   11544:	cmp	r4, #0
   11548:	mov	r5, r0
   1154c:	beq	11584 <__assert_fail@plt+0x6c8>
   11550:	bl	10e08 <__errno_location@plt>
   11554:	ldr	r6, [r0]
   11558:	mov	r0, r4
   1155c:	bl	134f8 <__assert_fail@plt+0x263c>
   11560:	mov	r1, r6
   11564:	str	r5, [sp]
   11568:	ldr	r2, [pc, #64]	; 115b0 <__assert_fail@plt+0x6f4>
   1156c:	mov	r3, r0
   11570:	mov	r0, #0
   11574:	bl	10d78 <error@plt>
   11578:	ldr	r3, [pc, #52]	; 115b4 <__assert_fail@plt+0x6f8>
   1157c:	ldr	r0, [r3]
   11580:	bl	10cac <_exit@plt>
   11584:	bl	10e08 <__errno_location@plt>
   11588:	mov	r3, r5
   1158c:	ldr	r2, [pc, #36]	; 115b8 <__assert_fail@plt+0x6fc>
   11590:	ldr	r1, [r0]
   11594:	mov	r0, r4
   11598:	bl	10d78 <error@plt>
   1159c:	b	11578 <__assert_fail@plt+0x6bc>
   115a0:	andeq	r6, r2, r4, asr #2
   115a4:	andeq	r6, r2, r0, asr r1
   115a8:	andeq	r6, r2, r0, asr #2
   115ac:	andeq	r5, r1, ip, lsr r8
   115b0:	andeq	r5, r1, r8, asr #16
   115b4:	andeq	r6, r2, r8, ror #1
   115b8:	andeq	r5, r1, ip, asr #16
   115bc:	cmp	r0, #0
   115c0:	bxeq	lr
   115c4:	ldrb	r3, [r0]
   115c8:	cmp	r3, #0
   115cc:	beq	1167c <__assert_fail@plt+0x7c0>
   115d0:	sub	r2, r3, #9
   115d4:	cmp	r2, #23
   115d8:	bhi	1160c <__assert_fail@plt+0x750>
   115dc:	mov	ip, #1
   115e0:	ldr	r1, [pc, #200]	; 116b0 <__assert_fail@plt+0x7f4>
   115e4:	ands	r2, r1, ip, lsl r2
   115e8:	beq	1160c <__assert_fail@plt+0x750>
   115ec:	ldrb	r3, [r0, #1]!
   115f0:	cmp	r3, #0
   115f4:	sub	r2, r3, #9
   115f8:	beq	1167c <__assert_fail@plt+0x7c0>
   115fc:	cmp	r2, #23
   11600:	bhi	1160c <__assert_fail@plt+0x750>
   11604:	ands	r2, r1, ip, lsl r2
   11608:	bne	115ec <__assert_fail@plt+0x730>
   1160c:	sub	r3, r3, #48	; 0x30
   11610:	cmp	r3, #9
   11614:	bhi	1167c <__assert_fail@plt+0x7c0>
   11618:	push	{lr}		; (str lr, [sp, #-4]!)
   1161c:	sub	sp, sp, #12
   11620:	add	r1, sp, #8
   11624:	mov	r3, #0
   11628:	str	r3, [r1, #-4]!
   1162c:	mov	r2, #10
   11630:	bl	10de4 <strtoul@plt>
   11634:	ldr	r3, [sp, #4]
   11638:	cmp	r3, #0
   1163c:	beq	11670 <__assert_fail@plt+0x7b4>
   11640:	ldrb	r2, [r3]
   11644:	cmp	r2, #0
   11648:	beq	11674 <__assert_fail@plt+0x7b8>
   1164c:	sub	r1, r2, #9
   11650:	cmp	r1, #23
   11654:	bhi	11668 <__assert_fail@plt+0x7ac>
   11658:	mov	lr, #1
   1165c:	ldr	ip, [pc, #76]	; 116b0 <__assert_fail@plt+0x7f4>
   11660:	ands	r1, ip, lr, lsl r1
   11664:	bne	11684 <__assert_fail@plt+0x7c8>
   11668:	cmp	r2, #44	; 0x2c
   1166c:	beq	11674 <__assert_fail@plt+0x7b8>
   11670:	mov	r0, #0
   11674:	add	sp, sp, #12
   11678:	pop	{pc}		; (ldr pc, [sp], #4)
   1167c:	mov	r0, #0
   11680:	bx	lr
   11684:	add	r3, r3, #1
   11688:	str	r3, [sp, #4]
   1168c:	ldrb	r2, [r3]
   11690:	cmp	r2, #0
   11694:	sub	r1, r2, #9
   11698:	beq	11674 <__assert_fail@plt+0x7b8>
   1169c:	cmp	r1, #23
   116a0:	bhi	11668 <__assert_fail@plt+0x7ac>
   116a4:	ands	r1, ip, lr, lsl r1
   116a8:	bne	11684 <__assert_fail@plt+0x7c8>
   116ac:	b	11668 <__assert_fail@plt+0x7ac>
   116b0:	addeq	r0, r0, pc, lsl r0
   116b4:	push	{lr}		; (str lr, [sp, #-4]!)
   116b8:	sub	sp, sp, #132	; 0x84
   116bc:	mov	r2, sp
   116c0:	mov	r1, #128	; 0x80
   116c4:	mov	r0, #0
   116c8:	bl	10e8c <sched_getaffinity@plt>
   116cc:	cmp	r0, #0
   116d0:	beq	116e0 <__assert_fail@plt+0x824>
   116d4:	mov	r0, #0
   116d8:	add	sp, sp, #132	; 0x84
   116dc:	pop	{pc}		; (ldr pc, [sp], #4)
   116e0:	mov	r1, sp
   116e4:	mov	r0, #128	; 0x80
   116e8:	bl	10cdc <__sched_cpucount@plt>
   116ec:	cmp	r0, #0
   116f0:	beq	116d4 <__assert_fail@plt+0x818>
   116f4:	add	sp, sp, #132	; 0x84
   116f8:	pop	{pc}		; (ldr pc, [sp], #4)
   116fc:	cmp	r0, #2
   11700:	push	{r4, r5, r6, lr}
   11704:	beq	11740 <__assert_fail@plt+0x884>
   11708:	cmp	r0, #1
   1170c:	beq	117c0 <__assert_fail@plt+0x904>
   11710:	mov	r0, #83	; 0x53
   11714:	bl	10d0c <sysconf@plt>
   11718:	sub	r3, r0, #1
   1171c:	cmp	r3, #1
   11720:	mov	r4, r0
   11724:	bls	117ac <__assert_fail@plt+0x8f0>
   11728:	cmp	r4, #0
   1172c:	ble	11794 <__assert_fail@plt+0x8d8>
   11730:	mvn	r0, #0
   11734:	cmp	r4, r0
   11738:	movcc	r0, r4
   1173c:	pop	{r4, r5, r6, pc}
   11740:	ldr	r0, [pc, #128]	; 117c8 <__assert_fail@plt+0x90c>
   11744:	bl	10d84 <getenv@plt>
   11748:	bl	115bc <__assert_fail@plt+0x700>
   1174c:	mov	r5, r0
   11750:	ldr	r0, [pc, #116]	; 117cc <__assert_fail@plt+0x910>
   11754:	bl	10d84 <getenv@plt>
   11758:	bl	115bc <__assert_fail@plt+0x700>
   1175c:	subs	r4, r0, #0
   11760:	mvneq	r4, #0
   11764:	cmp	r5, #0
   11768:	bne	1179c <__assert_fail@plt+0x8e0>
   1176c:	bl	116b4 <__assert_fail@plt+0x7f8>
   11770:	cmp	r0, #0
   11774:	beq	11784 <__assert_fail@plt+0x8c8>
   11778:	cmp	r0, r4
   1177c:	movcs	r0, r4
   11780:	pop	{r4, r5, r6, pc}
   11784:	mov	r0, #84	; 0x54
   11788:	bl	10d0c <sysconf@plt>
   1178c:	cmp	r0, #0
   11790:	bgt	11778 <__assert_fail@plt+0x8bc>
   11794:	mov	r0, #1
   11798:	pop	{r4, r5, r6, pc}
   1179c:	cmp	r4, r5
   117a0:	movcc	r0, r4
   117a4:	movcs	r0, r5
   117a8:	pop	{r4, r5, r6, pc}
   117ac:	bl	116b4 <__assert_fail@plt+0x7f8>
   117b0:	cmp	r4, r0
   117b4:	bcs	11730 <__assert_fail@plt+0x874>
   117b8:	mov	r4, r0
   117bc:	b	11728 <__assert_fail@plt+0x86c>
   117c0:	mvn	r4, #0
   117c4:	b	1176c <__assert_fail@plt+0x8b0>
   117c8:	andeq	r5, r1, r0, asr r8
   117cc:	andeq	r5, r1, r0, ror #16
   117d0:	push	{r4, r5, r6, lr}
   117d4:	subs	r4, r0, #0
   117d8:	beq	1184c <__assert_fail@plt+0x990>
   117dc:	mov	r1, #47	; 0x2f
   117e0:	bl	10e74 <strrchr@plt>
   117e4:	subs	r5, r0, #0
   117e8:	beq	11838 <__assert_fail@plt+0x97c>
   117ec:	add	r6, r5, #1
   117f0:	sub	r3, r6, r4
   117f4:	cmp	r3, #6
   117f8:	ble	11838 <__assert_fail@plt+0x97c>
   117fc:	mov	r2, #7
   11800:	ldr	r1, [pc, #96]	; 11868 <__assert_fail@plt+0x9ac>
   11804:	sub	r0, r5, #6
   11808:	bl	10ea4 <strncmp@plt>
   1180c:	cmp	r0, #0
   11810:	bne	11838 <__assert_fail@plt+0x97c>
   11814:	mov	r2, #3
   11818:	ldr	r1, [pc, #76]	; 1186c <__assert_fail@plt+0x9b0>
   1181c:	mov	r0, r6
   11820:	bl	10ea4 <strncmp@plt>
   11824:	cmp	r0, #0
   11828:	movne	r4, r6
   1182c:	ldreq	r3, [pc, #60]	; 11870 <__assert_fail@plt+0x9b4>
   11830:	addeq	r4, r5, #4
   11834:	streq	r4, [r3]
   11838:	ldr	r2, [pc, #52]	; 11874 <__assert_fail@plt+0x9b8>
   1183c:	ldr	r3, [pc, #52]	; 11878 <__assert_fail@plt+0x9bc>
   11840:	str	r4, [r2]
   11844:	str	r4, [r3]
   11848:	pop	{r4, r5, r6, pc}
   1184c:	ldr	r3, [pc, #40]	; 1187c <__assert_fail@plt+0x9c0>
   11850:	mov	r2, #55	; 0x37
   11854:	mov	r1, #1
   11858:	ldr	r3, [r3]
   1185c:	ldr	r0, [pc, #28]	; 11880 <__assert_fail@plt+0x9c4>
   11860:	bl	10d3c <fwrite@plt>
   11864:	bl	10eb0 <abort@plt>
   11868:	andeq	r5, r1, ip, lsr #17
   1186c:			; <UNDEFINED> instruction: 0x000158b4
   11870:	andeq	r6, r2, r0, lsr r1
   11874:	andeq	r6, r2, r8, asr r1
   11878:	andeq	r6, r2, r4, lsr r1
   1187c:	andeq	r6, r2, r0, asr #2
   11880:	andeq	r5, r1, r4, ror r8
   11884:	push	{r4, r5, r6, lr}
   11888:	mov	r2, #48	; 0x30
   1188c:	mov	r4, r1
   11890:	mov	r1, #0
   11894:	mov	r5, r0
   11898:	bl	10e20 <memset@plt>
   1189c:	cmp	r4, #10
   118a0:	beq	118b0 <__assert_fail@plt+0x9f4>
   118a4:	str	r4, [r5]
   118a8:	mov	r0, r5
   118ac:	pop	{r4, r5, r6, pc}
   118b0:	bl	10eb0 <abort@plt>
   118b4:	push	{r4, r5, r6, lr}
   118b8:	mov	r4, r0
   118bc:	mov	r5, r1
   118c0:	bl	14c20 <__assert_fail@plt+0x3d64>
   118c4:	ldrb	r3, [r0]
   118c8:	bic	r3, r3, #32
   118cc:	cmp	r3, #85	; 0x55
   118d0:	bne	11930 <__assert_fail@plt+0xa74>
   118d4:	ldrb	r3, [r0, #1]
   118d8:	bic	r3, r3, #32
   118dc:	cmp	r3, #84	; 0x54
   118e0:	bne	1196c <__assert_fail@plt+0xab0>
   118e4:	ldrb	r3, [r0, #2]
   118e8:	bic	r3, r3, #32
   118ec:	cmp	r3, #70	; 0x46
   118f0:	bne	1196c <__assert_fail@plt+0xab0>
   118f4:	ldrb	r3, [r0, #3]
   118f8:	cmp	r3, #45	; 0x2d
   118fc:	bne	1196c <__assert_fail@plt+0xab0>
   11900:	ldrb	r3, [r0, #4]
   11904:	cmp	r3, #56	; 0x38
   11908:	bne	1196c <__assert_fail@plt+0xab0>
   1190c:	ldrb	r3, [r0, #5]
   11910:	cmp	r3, #0
   11914:	bne	1196c <__assert_fail@plt+0xab0>
   11918:	ldrb	r2, [r4]
   1191c:	ldr	r3, [pc, #152]	; 119bc <__assert_fail@plt+0xb00>
   11920:	ldr	r0, [pc, #152]	; 119c0 <__assert_fail@plt+0xb04>
   11924:	cmp	r2, #96	; 0x60
   11928:	movne	r0, r3
   1192c:	pop	{r4, r5, r6, pc}
   11930:	cmp	r3, #71	; 0x47
   11934:	bne	1196c <__assert_fail@plt+0xab0>
   11938:	ldrb	r3, [r0, #1]
   1193c:	bic	r3, r3, #32
   11940:	cmp	r3, #66	; 0x42
   11944:	bne	1196c <__assert_fail@plt+0xab0>
   11948:	ldrb	r3, [r0, #2]
   1194c:	cmp	r3, #49	; 0x31
   11950:	bne	1196c <__assert_fail@plt+0xab0>
   11954:	ldrb	r3, [r0, #3]
   11958:	cmp	r3, #56	; 0x38
   1195c:	bne	1196c <__assert_fail@plt+0xab0>
   11960:	ldrb	r3, [r0, #4]
   11964:	cmp	r3, #48	; 0x30
   11968:	beq	11980 <__assert_fail@plt+0xac4>
   1196c:	ldr	r3, [pc, #80]	; 119c4 <__assert_fail@plt+0xb08>
   11970:	cmp	r5, #9
   11974:	ldr	r0, [pc, #76]	; 119c8 <__assert_fail@plt+0xb0c>
   11978:	movne	r0, r3
   1197c:	pop	{r4, r5, r6, pc}
   11980:	ldrb	r3, [r0, #5]
   11984:	cmp	r3, #51	; 0x33
   11988:	bne	1196c <__assert_fail@plt+0xab0>
   1198c:	ldrb	r3, [r0, #6]
   11990:	cmp	r3, #48	; 0x30
   11994:	bne	1196c <__assert_fail@plt+0xab0>
   11998:	ldrb	r3, [r0, #7]
   1199c:	cmp	r3, #0
   119a0:	bne	1196c <__assert_fail@plt+0xab0>
   119a4:	ldrb	r2, [r4]
   119a8:	ldr	r3, [pc, #28]	; 119cc <__assert_fail@plt+0xb10>
   119ac:	ldr	r0, [pc, #28]	; 119d0 <__assert_fail@plt+0xb14>
   119b0:	cmp	r2, #96	; 0x60
   119b4:	movne	r0, r3
   119b8:	pop	{r4, r5, r6, pc}
   119bc:	andeq	r5, r1, r0, lsl r9
   119c0:	andeq	r5, r1, ip, lsl #18
   119c4:	andeq	r5, r1, r0, lsr #18
   119c8:	andeq	r5, r1, ip, lsl r9
   119cc:	andeq	r5, r1, r8, lsl r9
   119d0:	andeq	r5, r1, r4, lsl r9
   119d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d8:	sub	sp, sp, #116	; 0x74
   119dc:	mov	sl, r0
   119e0:	str	r3, [sp, #24]
   119e4:	mov	r3, #1
   119e8:	mov	r8, r1
   119ec:	str	r2, [sp, #56]	; 0x38
   119f0:	str	r3, [sp, #36]	; 0x24
   119f4:	bl	10d54 <__ctype_get_mb_cur_max@plt>
   119f8:	ldr	r3, [sp, #156]	; 0x9c
   119fc:	mov	fp, r8
   11a00:	mov	r2, #0
   11a04:	lsr	r3, r3, #1
   11a08:	and	r3, r3, #1
   11a0c:	str	r2, [sp, #68]	; 0x44
   11a10:	str	r3, [sp, #28]
   11a14:	str	r2, [sp, #40]	; 0x28
   11a18:	str	r2, [sp, #44]	; 0x2c
   11a1c:	str	r2, [sp, #52]	; 0x34
   11a20:	str	r2, [sp, #64]	; 0x40
   11a24:	str	r2, [sp, #72]	; 0x48
   11a28:	str	sl, [sp, #32]
   11a2c:	str	r0, [sp, #76]	; 0x4c
   11a30:	ldr	r3, [sp, #152]	; 0x98
   11a34:	cmp	r3, #10
   11a38:	ldrls	pc, [pc, r3, lsl #2]
   11a3c:	b	12bfc <__assert_fail@plt+0x1d40>
   11a40:	andeq	r1, r1, ip, ror #20
   11a44:	andeq	r1, r1, r4, asr sp
   11a48:	andeq	r1, r1, r8, ror sp
   11a4c:	muleq	r1, ip, sp
   11a50:	andeq	r1, r1, r8, asr #29
   11a54:	muleq	r1, ip, lr
   11a58:	andeq	r1, r1, r4, ror lr
   11a5c:			; <UNDEFINED> instruction: 0x00011db0
   11a60:	andeq	r1, r1, r8, asr #27
   11a64:	andeq	r1, r1, r8, asr #27
   11a68:	andeq	r1, r1, r8, asr #27
   11a6c:	mov	r3, #0
   11a70:	mov	r7, r3
   11a74:	str	r3, [sp, #28]
   11a78:	ldr	r3, [sp, #44]	; 0x2c
   11a7c:	mov	sl, #0
   11a80:	eor	r3, r3, #1
   11a84:	str	r3, [sp, #60]	; 0x3c
   11a88:	ldr	r3, [sp, #24]
   11a8c:	cmn	r3, #1
   11a90:	beq	11ff4 <__assert_fail@plt+0x1138>
   11a94:	ldr	r3, [sp, #24]
   11a98:	subs	r5, r3, sl
   11a9c:	movne	r5, #1
   11aa0:	cmp	r5, #0
   11aa4:	beq	1200c <__assert_fail@plt+0x1150>
   11aa8:	ldr	r3, [sp, #152]	; 0x98
   11aac:	ldr	r8, [sp, #44]	; 0x2c
   11ab0:	cmp	r3, #2
   11ab4:	moveq	r8, #0
   11ab8:	andne	r8, r8, #1
   11abc:	ldr	r3, [sp, #52]	; 0x34
   11ac0:	adds	r9, r3, #0
   11ac4:	movne	r9, #1
   11ac8:	ands	r6, r9, r8
   11acc:	beq	12474 <__assert_fail@plt+0x15b8>
   11ad0:	ldr	r2, [sp, #52]	; 0x34
   11ad4:	ldr	r1, [sp, #24]
   11ad8:	cmp	r2, #1
   11adc:	mov	r3, r2
   11ae0:	movls	r3, #0
   11ae4:	movhi	r3, #1
   11ae8:	cmn	r1, #1
   11aec:	movne	r3, #0
   11af0:	cmp	r3, #0
   11af4:	add	r4, sl, r2
   11af8:	beq	11b08 <__assert_fail@plt+0xc4c>
   11afc:	ldr	r0, [sp, #56]	; 0x38
   11b00:	bl	10df0 <strlen@plt>
   11b04:	str	r0, [sp, #24]
   11b08:	ldr	r3, [sp, #24]
   11b0c:	cmp	r3, r4
   11b10:	ldr	r3, [sp, #56]	; 0x38
   11b14:	add	r3, r3, sl
   11b18:	str	r3, [sp, #48]	; 0x30
   11b1c:	bcc	12480 <__assert_fail@plt+0x15c4>
   11b20:	mov	r0, r3
   11b24:	ldr	r2, [sp, #52]	; 0x34
   11b28:	ldr	r1, [sp, #64]	; 0x40
   11b2c:	bl	10ce8 <memcmp@plt>
   11b30:	cmp	r0, #0
   11b34:	bne	12480 <__assert_fail@plt+0x15c4>
   11b38:	ldr	r3, [sp, #28]
   11b3c:	cmp	r3, #0
   11b40:	bne	12cfc <__assert_fail@plt+0x1e40>
   11b44:	ldr	r3, [sp, #48]	; 0x30
   11b48:	ldrb	r4, [r3]
   11b4c:	cmp	r4, #126	; 0x7e
   11b50:	ldrls	pc, [pc, r4, lsl #2]
   11b54:	b	12414 <__assert_fail@plt+0x1558>
   11b58:	andeq	r2, r1, r8, lsr r2
   11b5c:	andeq	r2, r1, r4, lsl r4
   11b60:	andeq	r2, r1, r4, lsl r4
   11b64:	andeq	r2, r1, r4, lsl r4
   11b68:	andeq	r2, r1, r4, lsl r4
   11b6c:	andeq	r2, r1, r4, lsl r4
   11b70:	andeq	r2, r1, r4, lsl r4
   11b74:	andeq	r2, r1, ip, lsl r2
   11b78:	andeq	r2, r1, r0, lsl #4
   11b7c:	strdeq	r2, [r1], -ip
   11b80:	andeq	r2, r1, r0, ror #2
   11b84:	andeq	r2, r1, r4, asr #2
   11b88:	ldrdeq	r2, [r1], -r8
   11b8c:			; <UNDEFINED> instruction: 0x000123b4
   11b90:	andeq	r2, r1, r4, lsl r4
   11b94:	andeq	r2, r1, r4, lsl r4
   11b98:	andeq	r2, r1, r4, lsl r4
   11b9c:	andeq	r2, r1, r4, lsl r4
   11ba0:	andeq	r2, r1, r4, lsl r4
   11ba4:	andeq	r2, r1, r4, lsl r4
   11ba8:	andeq	r2, r1, r4, lsl r4
   11bac:	andeq	r2, r1, r4, lsl r4
   11bb0:	andeq	r2, r1, r4, lsl r4
   11bb4:	andeq	r2, r1, r4, lsl r4
   11bb8:	andeq	r2, r1, r4, lsl r4
   11bbc:	andeq	r2, r1, r4, lsl r4
   11bc0:	andeq	r2, r1, r4, lsl r4
   11bc4:	andeq	r2, r1, r4, lsl r4
   11bc8:	andeq	r2, r1, r4, lsl r4
   11bcc:	andeq	r2, r1, r4, lsl r4
   11bd0:	andeq	r2, r1, r4, lsl r4
   11bd4:	andeq	r2, r1, r4, lsl r4
   11bd8:	strdeq	r2, [r1], -r4
   11bdc:	andeq	r2, r1, r8, lsr #6
   11be0:	andeq	r2, r1, r8, lsr #6
   11be4:	andeq	r1, r1, r8, lsr pc
   11be8:	andeq	r2, r1, r8, lsr #6
   11bec:	andeq	r2, r1, r0, asr #7
   11bf0:	andeq	r2, r1, r8, lsr #6
   11bf4:	muleq	r1, r4, r3
   11bf8:	andeq	r2, r1, r8, lsr #6
   11bfc:	andeq	r2, r1, r8, lsr #6
   11c00:	andeq	r2, r1, r8, lsr #6
   11c04:	andeq	r2, r1, r0, asr #7
   11c08:	andeq	r2, r1, r0, asr #7
   11c0c:	andeq	r2, r1, r0, asr #7
   11c10:	andeq	r2, r1, r0, asr #7
   11c14:	andeq	r2, r1, r0, asr #7
   11c18:	andeq	r2, r1, r0, asr #7
   11c1c:	andeq	r2, r1, r0, asr #7
   11c20:	andeq	r2, r1, r0, asr #7
   11c24:	andeq	r2, r1, r0, asr #7
   11c28:	andeq	r2, r1, r0, asr #7
   11c2c:	andeq	r2, r1, r0, asr #7
   11c30:	andeq	r2, r1, r0, asr #7
   11c34:	andeq	r2, r1, r0, asr #7
   11c38:	andeq	r2, r1, r0, asr #7
   11c3c:	andeq	r2, r1, r0, asr #7
   11c40:	andeq	r2, r1, r0, asr #7
   11c44:	andeq	r2, r1, r8, lsr #6
   11c48:	andeq	r2, r1, r8, lsr #6
   11c4c:	andeq	r2, r1, r8, lsr #6
   11c50:	andeq	r2, r1, r8, lsr #6
   11c54:	andeq	r2, r1, r4, ror #6
   11c58:	andeq	r2, r1, r4, lsl r4
   11c5c:	andeq	r2, r1, r0, asr #7
   11c60:	andeq	r2, r1, r0, asr #7
   11c64:	andeq	r2, r1, r0, asr #7
   11c68:	andeq	r2, r1, r0, asr #7
   11c6c:	andeq	r2, r1, r0, asr #7
   11c70:	andeq	r2, r1, r0, asr #7
   11c74:	andeq	r2, r1, r0, asr #7
   11c78:	andeq	r2, r1, r0, asr #7
   11c7c:	andeq	r2, r1, r0, asr #7
   11c80:	andeq	r2, r1, r0, asr #7
   11c84:	andeq	r2, r1, r0, asr #7
   11c88:	andeq	r2, r1, r0, asr #7
   11c8c:	andeq	r2, r1, r0, asr #7
   11c90:	andeq	r2, r1, r0, asr #7
   11c94:	andeq	r2, r1, r0, asr #7
   11c98:	andeq	r2, r1, r0, asr #7
   11c9c:	andeq	r2, r1, r0, asr #7
   11ca0:	andeq	r2, r1, r0, asr #7
   11ca4:	andeq	r2, r1, r0, asr #7
   11ca8:	andeq	r2, r1, r0, asr #7
   11cac:	andeq	r2, r1, r0, asr #7
   11cb0:	andeq	r2, r1, r0, asr #7
   11cb4:	andeq	r2, r1, r0, asr #7
   11cb8:	andeq	r2, r1, r0, asr #7
   11cbc:	andeq	r2, r1, r0, asr #7
   11cc0:	andeq	r2, r1, r0, asr #7
   11cc4:	andeq	r2, r1, r8, lsr #6
   11cc8:	andeq	r2, r1, r4, lsl #1
   11ccc:	andeq	r2, r1, r0, asr #7
   11cd0:	andeq	r2, r1, r8, lsr #6
   11cd4:	andeq	r2, r1, r0, asr #7
   11cd8:	andeq	r2, r1, r8, lsr #6
   11cdc:	andeq	r2, r1, r0, asr #7
   11ce0:	andeq	r2, r1, r0, asr #7
   11ce4:	andeq	r2, r1, r0, asr #7
   11ce8:	andeq	r2, r1, r0, asr #7
   11cec:	andeq	r2, r1, r0, asr #7
   11cf0:	andeq	r2, r1, r0, asr #7
   11cf4:	andeq	r2, r1, r0, asr #7
   11cf8:	andeq	r2, r1, r0, asr #7
   11cfc:	andeq	r2, r1, r0, asr #7
   11d00:	andeq	r2, r1, r0, asr #7
   11d04:	andeq	r2, r1, r0, asr #7
   11d08:	andeq	r2, r1, r0, asr #7
   11d0c:	andeq	r2, r1, r0, asr #7
   11d10:	andeq	r2, r1, r0, asr #7
   11d14:	andeq	r2, r1, r0, asr #7
   11d18:	andeq	r2, r1, r0, asr #7
   11d1c:	andeq	r2, r1, r0, asr #7
   11d20:	andeq	r2, r1, r0, asr #7
   11d24:	andeq	r2, r1, r0, asr #7
   11d28:	andeq	r2, r1, r0, asr #7
   11d2c:	andeq	r2, r1, r0, asr #7
   11d30:	andeq	r2, r1, r0, asr #7
   11d34:	andeq	r2, r1, r0, asr #7
   11d38:	andeq	r2, r1, r0, asr #7
   11d3c:	andeq	r2, r1, r0, asr #7
   11d40:	andeq	r2, r1, r0, asr #7
   11d44:	andeq	r1, r1, r8, lsl pc
   11d48:	andeq	r2, r1, r8, lsr #6
   11d4c:	andeq	r1, r1, r8, lsl pc
   11d50:	andeq	r1, r1, r8, lsr pc
   11d54:	mov	r3, #1
   11d58:	str	r3, [sp, #28]
   11d5c:	str	r3, [sp, #52]	; 0x34
   11d60:	ldr	r3, [pc, #4000]	; 12d08 <__assert_fail@plt+0x1e4c>
   11d64:	mov	r7, #0
   11d68:	str	r3, [sp, #64]	; 0x40
   11d6c:	mov	r3, #2
   11d70:	str	r3, [sp, #152]	; 0x98
   11d74:	b	11a78 <__assert_fail@plt+0xbbc>
   11d78:	ldr	r3, [sp, #28]
   11d7c:	cmp	r3, #0
   11d80:	beq	11edc <__assert_fail@plt+0x1020>
   11d84:	mov	r3, #1
   11d88:	str	r3, [sp, #52]	; 0x34
   11d8c:	ldr	r3, [pc, #3956]	; 12d08 <__assert_fail@plt+0x1e4c>
   11d90:	mov	r7, #0
   11d94:	str	r3, [sp, #64]	; 0x40
   11d98:	b	11a78 <__assert_fail@plt+0xbbc>
   11d9c:	mov	r3, #1
   11da0:	str	r3, [sp, #44]	; 0x2c
   11da4:	str	r3, [sp, #52]	; 0x34
   11da8:	str	r3, [sp, #28]
   11dac:	b	11d60 <__assert_fail@plt+0xea4>
   11db0:	mov	r3, #0
   11db4:	str	r3, [sp, #28]
   11db8:	mov	r3, #1
   11dbc:	str	r3, [sp, #44]	; 0x2c
   11dc0:	mov	r7, #0
   11dc4:	b	11a78 <__assert_fail@plt+0xbbc>
   11dc8:	ldr	r3, [sp, #152]	; 0x98
   11dcc:	cmp	r3, #10
   11dd0:	beq	11e14 <__assert_fail@plt+0xf58>
   11dd4:	mov	r2, #5
   11dd8:	ldr	r1, [pc, #3884]	; 12d0c <__assert_fail@plt+0x1e50>
   11ddc:	mov	r0, #0
   11de0:	bl	10d00 <dcgettext@plt>
   11de4:	ldr	r2, [pc, #3872]	; 12d0c <__assert_fail@plt+0x1e50>
   11de8:	cmp	r0, r2
   11dec:	str	r0, [sp, #164]	; 0xa4
   11df0:	beq	12df8 <__assert_fail@plt+0x1f3c>
   11df4:	mov	r2, #5
   11df8:	ldr	r1, [pc, #3848]	; 12d08 <__assert_fail@plt+0x1e4c>
   11dfc:	mov	r0, #0
   11e00:	bl	10d00 <dcgettext@plt>
   11e04:	ldr	r2, [pc, #3836]	; 12d08 <__assert_fail@plt+0x1e4c>
   11e08:	cmp	r0, r2
   11e0c:	str	r0, [sp, #168]	; 0xa8
   11e10:	beq	12de8 <__assert_fail@plt+0x1f2c>
   11e14:	ldr	r7, [sp, #28]
   11e18:	cmp	r7, #0
   11e1c:	movne	r7, #0
   11e20:	bne	11e54 <__assert_fail@plt+0xf98>
   11e24:	ldr	r3, [sp, #164]	; 0xa4
   11e28:	ldrb	r3, [r3]
   11e2c:	cmp	r3, #0
   11e30:	beq	12e08 <__assert_fail@plt+0x1f4c>
   11e34:	ldr	r2, [sp, #164]	; 0xa4
   11e38:	ldr	r1, [sp, #32]
   11e3c:	cmp	fp, r7
   11e40:	strbhi	r3, [r1, r7]
   11e44:	ldrb	r3, [r2, #1]!
   11e48:	add	r7, r7, #1
   11e4c:	cmp	r3, #0
   11e50:	bne	11e3c <__assert_fail@plt+0xf80>
   11e54:	ldr	r0, [sp, #168]	; 0xa8
   11e58:	bl	10df0 <strlen@plt>
   11e5c:	ldr	r3, [sp, #168]	; 0xa8
   11e60:	str	r3, [sp, #64]	; 0x40
   11e64:	mov	r3, #1
   11e68:	str	r3, [sp, #44]	; 0x2c
   11e6c:	str	r0, [sp, #52]	; 0x34
   11e70:	b	11a78 <__assert_fail@plt+0xbbc>
   11e74:	mov	r3, #1
   11e78:	str	r3, [sp, #44]	; 0x2c
   11e7c:	str	r3, [sp, #52]	; 0x34
   11e80:	str	r3, [sp, #28]
   11e84:	ldr	r3, [pc, #3716]	; 12d10 <__assert_fail@plt+0x1e54>
   11e88:	mov	r7, #0
   11e8c:	str	r3, [sp, #64]	; 0x40
   11e90:	mov	r3, #5
   11e94:	str	r3, [sp, #152]	; 0x98
   11e98:	b	11a78 <__assert_fail@plt+0xbbc>
   11e9c:	ldr	r3, [sp, #28]
   11ea0:	cmp	r3, #0
   11ea4:	beq	12ba4 <__assert_fail@plt+0x1ce8>
   11ea8:	ldr	r3, [sp, #28]
   11eac:	mov	r7, #0
   11eb0:	str	r3, [sp, #44]	; 0x2c
   11eb4:	mov	r3, #1
   11eb8:	str	r3, [sp, #52]	; 0x34
   11ebc:	ldr	r3, [pc, #3660]	; 12d10 <__assert_fail@plt+0x1e54>
   11ec0:	str	r3, [sp, #64]	; 0x40
   11ec4:	b	11a78 <__assert_fail@plt+0xbbc>
   11ec8:	ldr	r3, [sp, #28]
   11ecc:	cmp	r3, #0
   11ed0:	mov	r3, #1
   11ed4:	streq	r3, [sp, #44]	; 0x2c
   11ed8:	bne	11d5c <__assert_fail@plt+0xea0>
   11edc:	cmp	fp, #0
   11ee0:	beq	12bd4 <__assert_fail@plt+0x1d18>
   11ee4:	ldr	r3, [sp, #32]
   11ee8:	mov	r2, #39	; 0x27
   11eec:	mov	r7, #1
   11ef0:	strb	r2, [r3]
   11ef4:	mov	r3, #0
   11ef8:	str	r3, [sp, #28]
   11efc:	mov	r3, #1
   11f00:	str	r3, [sp, #52]	; 0x34
   11f04:	ldr	r3, [pc, #3580]	; 12d08 <__assert_fail@plt+0x1e4c>
   11f08:	str	r3, [sp, #64]	; 0x40
   11f0c:	mov	r3, #2
   11f10:	str	r3, [sp, #152]	; 0x98
   11f14:	b	11a78 <__assert_fail@plt+0xbbc>
   11f18:	ldr	r3, [sp, #24]
   11f1c:	cmn	r3, #1
   11f20:	beq	12b38 <__assert_fail@plt+0x1c7c>
   11f24:	ldr	r3, [sp, #24]
   11f28:	subs	r3, r3, #1
   11f2c:	movne	r3, #1
   11f30:	cmp	r3, #0
   11f34:	bne	11f40 <__assert_fail@plt+0x1084>
   11f38:	cmp	sl, #0
   11f3c:	beq	1232c <__assert_fail@plt+0x1470>
   11f40:	ldr	r3, [sp, #152]	; 0x98
   11f44:	mov	r5, #0
   11f48:	sub	r2, r3, #2
   11f4c:	mov	r8, r5
   11f50:	clz	r2, r2
   11f54:	lsr	r2, r2, #5
   11f58:	ldr	r3, [sp, #60]	; 0x3c
   11f5c:	ldr	r1, [sp, #28]
   11f60:	orr	r3, r2, r3
   11f64:	eor	r3, r3, #1
   11f68:	orr	r3, r1, r3
   11f6c:	tst	r3, #255	; 0xff
   11f70:	bne	1269c <__assert_fail@plt+0x17e0>
   11f74:	cmp	r6, #0
   11f78:	bne	120c8 <__assert_fail@plt+0x120c>
   11f7c:	ldr	r3, [sp, #40]	; 0x28
   11f80:	eor	r8, r8, #1
   11f84:	and	r8, r8, r3
   11f88:	add	sl, sl, #1
   11f8c:	uxtb	r6, r8
   11f90:	cmp	r6, #0
   11f94:	beq	11fc8 <__assert_fail@plt+0x110c>
   11f98:	cmp	fp, r7
   11f9c:	movhi	r2, #39	; 0x27
   11fa0:	ldrhi	r3, [sp, #32]
   11fa4:	strbhi	r2, [r3, r7]
   11fa8:	add	r3, r7, #1
   11fac:	cmp	fp, r3
   11fb0:	movhi	r1, #39	; 0x27
   11fb4:	ldrhi	r2, [sp, #32]
   11fb8:	add	r7, r7, #2
   11fbc:	strbhi	r1, [r2, r3]
   11fc0:	mov	r3, #0
   11fc4:	str	r3, [sp, #40]	; 0x28
   11fc8:	cmp	r7, fp
   11fcc:	ldrcc	r3, [sp, #32]
   11fd0:	strbcc	r4, [r3, r7]
   11fd4:	ldr	r3, [sp, #36]	; 0x24
   11fd8:	cmp	r5, #0
   11fdc:	moveq	r3, #0
   11fe0:	str	r3, [sp, #36]	; 0x24
   11fe4:	ldr	r3, [sp, #24]
   11fe8:	add	r7, r7, #1
   11fec:	cmn	r3, #1
   11ff0:	bne	11a94 <__assert_fail@plt+0xbd8>
   11ff4:	ldr	r3, [sp, #56]	; 0x38
   11ff8:	ldrb	r5, [r3, sl]
   11ffc:	adds	r5, r5, #0
   12000:	movne	r5, #1
   12004:	cmp	r5, #0
   12008:	bne	11aa8 <__assert_fail@plt+0xbec>
   1200c:	ldr	r3, [sp, #152]	; 0x98
   12010:	ldr	r1, [sp, #28]
   12014:	sub	r3, r3, #2
   12018:	clz	r3, r3
   1201c:	lsr	r3, r3, #5
   12020:	and	r9, r1, r3
   12024:	cmp	r7, #0
   12028:	movne	r2, #0
   1202c:	andeq	r2, r9, #1
   12030:	cmp	r2, #0
   12034:	bne	12a10 <__assert_fail@plt+0x1b54>
   12038:	eor	r2, r1, #1
   1203c:	ands	r3, r3, r2
   12040:	beq	12ecc <__assert_fail@plt+0x2010>
   12044:	ldr	r2, [sp, #68]	; 0x44
   12048:	cmp	r2, #0
   1204c:	beq	12eb8 <__assert_fail@plt+0x1ffc>
   12050:	ldr	r3, [sp, #36]	; 0x24
   12054:	cmp	r3, #0
   12058:	bne	12e70 <__assert_fail@plt+0x1fb4>
   1205c:	ldr	r2, [sp, #72]	; 0x48
   12060:	clz	r3, fp
   12064:	cmp	r2, #0
   12068:	lsr	r3, r3, #5
   1206c:	moveq	r3, #0
   12070:	cmp	r3, #0
   12074:	beq	12e10 <__assert_fail@plt+0x1f54>
   12078:	str	r3, [sp, #68]	; 0x44
   1207c:	ldr	fp, [sp, #72]	; 0x48
   12080:	b	11a30 <__assert_fail@plt+0xb74>
   12084:	ldr	r3, [sp, #152]	; 0x98
   12088:	cmp	r3, #2
   1208c:	beq	126e0 <__assert_fail@plt+0x1824>
   12090:	ldr	r3, [sp, #44]	; 0x2c
   12094:	ldr	r2, [sp, #28]
   12098:	and	r2, r3, r2
   1209c:	ands	r2, r9, r2
   120a0:	bne	126ec <__assert_fail@plt+0x1830>
   120a4:	mov	r4, #92	; 0x5c
   120a8:	mov	r3, r4
   120ac:	ldr	r1, [sp, #44]	; 0x2c
   120b0:	cmp	r1, #0
   120b4:	moveq	r5, #0
   120b8:	moveq	r8, r1
   120bc:	beq	11f58 <__assert_fail@plt+0x109c>
   120c0:	mov	r4, r3
   120c4:	mov	r5, #0
   120c8:	ldr	r3, [sp, #28]
   120cc:	cmp	r3, #0
   120d0:	bne	126d4 <__assert_fail@plt+0x1818>
   120d4:	ldr	r3, [sp, #40]	; 0x28
   120d8:	eor	r9, r3, #1
   120dc:	and	r9, r9, r2
   120e0:	ands	r9, r9, #255	; 0xff
   120e4:	beq	12128 <__assert_fail@plt+0x126c>
   120e8:	cmp	fp, r7
   120ec:	movhi	r2, #39	; 0x27
   120f0:	ldrhi	r3, [sp, #32]
   120f4:	str	r9, [sp, #40]	; 0x28
   120f8:	strbhi	r2, [r3, r7]
   120fc:	add	r3, r7, #1
   12100:	cmp	fp, r3
   12104:	movhi	r1, #36	; 0x24
   12108:	ldrhi	r2, [sp, #32]
   1210c:	strbhi	r1, [r2, r3]
   12110:	add	r3, r7, #2
   12114:	cmp	fp, r3
   12118:	add	r7, r7, #3
   1211c:	ldrhi	r2, [sp, #32]
   12120:	movhi	r1, #39	; 0x27
   12124:	strbhi	r1, [r2, r3]
   12128:	cmp	fp, r7
   1212c:	movhi	r2, #92	; 0x5c
   12130:	ldrhi	r3, [sp, #32]
   12134:	add	sl, sl, #1
   12138:	strbhi	r2, [r3, r7]
   1213c:	add	r7, r7, #1
   12140:	b	11fc8 <__assert_fail@plt+0x110c>
   12144:	ldr	r3, [sp, #152]	; 0x98
   12148:	mov	r4, #11
   1214c:	sub	r2, r3, #2
   12150:	mov	r3, #118	; 0x76
   12154:	clz	r2, r2
   12158:	lsr	r2, r2, #5
   1215c:	b	120ac <__assert_fail@plt+0x11f0>
   12160:	mov	r4, #10
   12164:	mov	r3, #110	; 0x6e
   12168:	ldr	r2, [sp, #152]	; 0x98
   1216c:	ldr	r1, [sp, #28]
   12170:	sub	r2, r2, #2
   12174:	clz	r2, r2
   12178:	lsr	r2, r2, #5
   1217c:	ands	r1, r1, r2
   12180:	beq	120ac <__assert_fail@plt+0x11f0>
   12184:	ldr	sl, [sp, #32]
   12188:	mov	r8, fp
   1218c:	mov	r2, r1
   12190:	mov	r3, #2
   12194:	str	r3, [sp, #152]	; 0x98
   12198:	ldr	r9, [sp, #44]	; 0x2c
   1219c:	ldr	r3, [sp, #152]	; 0x98
   121a0:	and	r9, r9, r2
   121a4:	tst	r9, #255	; 0xff
   121a8:	movne	r3, #4
   121ac:	str	r3, [sp, #152]	; 0x98
   121b0:	ldr	r3, [sp, #156]	; 0x9c
   121b4:	mov	ip, #0
   121b8:	bic	r3, r3, #2
   121bc:	str	r3, [sp, #4]
   121c0:	ldr	r3, [sp, #168]	; 0xa8
   121c4:	ldr	r2, [sp, #56]	; 0x38
   121c8:	str	r3, [sp, #16]
   121cc:	ldr	r3, [sp, #164]	; 0xa4
   121d0:	mov	r1, r8
   121d4:	str	r3, [sp, #12]
   121d8:	ldr	r3, [sp, #152]	; 0x98
   121dc:	mov	r0, sl
   121e0:	str	r3, [sp]
   121e4:	str	ip, [sp, #8]
   121e8:	ldr	r3, [sp, #24]
   121ec:	bl	119d4 <__assert_fail@plt+0xb18>
   121f0:	mov	fp, r0
   121f4:	mov	r0, fp
   121f8:	add	sp, sp, #116	; 0x74
   121fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12200:	ldr	r3, [sp, #152]	; 0x98
   12204:	mov	r4, #8
   12208:	sub	r2, r3, #2
   1220c:	mov	r3, #98	; 0x62
   12210:	clz	r2, r2
   12214:	lsr	r2, r2, #5
   12218:	b	120ac <__assert_fail@plt+0x11f0>
   1221c:	ldr	r3, [sp, #152]	; 0x98
   12220:	mov	r4, #7
   12224:	sub	r2, r3, #2
   12228:	mov	r3, #97	; 0x61
   1222c:	clz	r2, r2
   12230:	lsr	r2, r2, #5
   12234:	b	120ac <__assert_fail@plt+0x11f0>
   12238:	ldr	r3, [sp, #44]	; 0x2c
   1223c:	cmp	r3, #0
   12240:	beq	12a24 <__assert_fail@plt+0x1b68>
   12244:	ldr	r3, [sp, #28]
   12248:	cmp	r3, #0
   1224c:	bne	12cfc <__assert_fail@plt+0x1e40>
   12250:	ldr	r3, [sp, #152]	; 0x98
   12254:	sub	r2, r3, #2
   12258:	ldr	r3, [sp, #40]	; 0x28
   1225c:	clz	r2, r2
   12260:	eor	r3, r3, #1
   12264:	lsr	r2, r2, #5
   12268:	ands	r3, r2, r3
   1226c:	moveq	r1, r7
   12270:	beq	122b4 <__assert_fail@plt+0x13f8>
   12274:	cmp	fp, r7
   12278:	movhi	r0, #39	; 0x27
   1227c:	ldrhi	r1, [sp, #32]
   12280:	str	r3, [sp, #40]	; 0x28
   12284:	strbhi	r0, [r1, r7]
   12288:	add	r1, r7, #1
   1228c:	cmp	fp, r1
   12290:	movhi	ip, #36	; 0x24
   12294:	ldrhi	r0, [sp, #32]
   12298:	strbhi	ip, [r0, r1]
   1229c:	add	r1, r7, #2
   122a0:	cmp	fp, r1
   122a4:	movhi	ip, #39	; 0x27
   122a8:	ldrhi	r0, [sp, #32]
   122ac:	strbhi	ip, [r0, r1]
   122b0:	add	r1, r7, #3
   122b4:	cmp	fp, r1
   122b8:	movhi	r0, #92	; 0x5c
   122bc:	ldrhi	r3, [sp, #32]
   122c0:	add	r7, r1, #1
   122c4:	strbhi	r0, [r3, r1]
   122c8:	cmp	r8, #0
   122cc:	beq	12c10 <__assert_fail@plt+0x1d54>
   122d0:	ldr	r0, [sp, #24]
   122d4:	add	r3, sl, #1
   122d8:	cmp	r3, r0
   122dc:	bcs	12b4c <__assert_fail@plt+0x1c90>
   122e0:	ldr	r0, [sp, #56]	; 0x38
   122e4:	ldrb	r3, [r0, r3]
   122e8:	sub	r3, r3, #48	; 0x30
   122ec:	cmp	r3, #9
   122f0:	bhi	12b4c <__assert_fail@plt+0x1c90>
   122f4:	cmp	fp, r7
   122f8:	movhi	r3, #48	; 0x30
   122fc:	ldrhi	r0, [sp, #32]
   12300:	ldr	r5, [sp, #28]
   12304:	mov	r4, #48	; 0x30
   12308:	strbhi	r3, [r0, r7]
   1230c:	add	r3, r1, #2
   12310:	cmp	fp, r3
   12314:	movhi	r0, #48	; 0x30
   12318:	ldrhi	ip, [sp, #32]
   1231c:	add	r7, r1, #3
   12320:	strbhi	r0, [ip, r3]
   12324:	b	11f58 <__assert_fail@plt+0x109c>
   12328:	mov	r5, #0
   1232c:	ldr	r3, [sp, #152]	; 0x98
   12330:	sub	r2, r3, #2
   12334:	ldr	r3, [sp, #28]
   12338:	clz	r2, r2
   1233c:	lsr	r2, r2, #5
   12340:	ands	r8, r3, r2
   12344:	beq	11f58 <__assert_fail@plt+0x109c>
   12348:	mov	r3, r8
   1234c:	mov	r2, r3
   12350:	mov	r3, #2
   12354:	ldr	sl, [sp, #32]
   12358:	mov	r8, fp
   1235c:	str	r3, [sp, #152]	; 0x98
   12360:	b	12198 <__assert_fail@plt+0x12dc>
   12364:	ldr	r3, [sp, #152]	; 0x98
   12368:	cmp	r3, #2
   1236c:	beq	12a90 <__assert_fail@plt+0x1bd4>
   12370:	cmp	r3, #5
   12374:	beq	12a50 <__assert_fail@plt+0x1b94>
   12378:	mov	r5, #0
   1237c:	sub	r2, r3, #2
   12380:	mov	r8, r5
   12384:	clz	r2, r2
   12388:	mov	r4, #63	; 0x3f
   1238c:	lsr	r2, r2, #5
   12390:	b	11f58 <__assert_fail@plt+0x109c>
   12394:	ldr	r3, [sp, #152]	; 0x98
   12398:	cmp	r3, #2
   1239c:	beq	12ab0 <__assert_fail@plt+0x1bf4>
   123a0:	mov	r2, #0
   123a4:	str	r5, [sp, #68]	; 0x44
   123a8:	mov	r8, r2
   123ac:	mov	r4, #39	; 0x27
   123b0:	b	11f58 <__assert_fail@plt+0x109c>
   123b4:	mov	r4, #13
   123b8:	mov	r3, #114	; 0x72
   123bc:	b	12168 <__assert_fail@plt+0x12ac>
   123c0:	ldr	r3, [sp, #152]	; 0x98
   123c4:	mov	r8, #0
   123c8:	sub	r2, r3, #2
   123cc:	clz	r2, r2
   123d0:	lsr	r2, r2, #5
   123d4:	b	11f58 <__assert_fail@plt+0x109c>
   123d8:	ldr	r3, [sp, #152]	; 0x98
   123dc:	mov	r4, #12
   123e0:	sub	r2, r3, #2
   123e4:	mov	r3, #102	; 0x66
   123e8:	clz	r2, r2
   123ec:	lsr	r2, r2, #5
   123f0:	b	120ac <__assert_fail@plt+0x11f0>
   123f4:	mov	r5, r6
   123f8:	b	1232c <__assert_fail@plt+0x1470>
   123fc:	ldr	r3, [sp, #152]	; 0x98
   12400:	sub	r2, r3, #2
   12404:	mov	r3, #116	; 0x74
   12408:	clz	r2, r2
   1240c:	lsr	r2, r2, #5
   12410:	b	120ac <__assert_fail@plt+0x11f0>
   12414:	ldr	r8, [sp, #76]	; 0x4c
   12418:	cmp	r8, #1
   1241c:	bne	128cc <__assert_fail@plt+0x1a10>
   12420:	bl	10dcc <__ctype_b_loc@plt>
   12424:	sxth	r3, r4
   12428:	mov	ip, r8
   1242c:	lsl	r3, r3, #1
   12430:	ldr	r2, [r0]
   12434:	ldrh	r3, [r2, r3]
   12438:	and	r3, r3, #16384	; 0x4000
   1243c:	cmp	r3, #0
   12440:	movne	r5, #1
   12444:	moveq	r5, #0
   12448:	moveq	r3, #1
   1244c:	movne	r3, #0
   12450:	ldr	r2, [sp, #44]	; 0x2c
   12454:	and	r3, r3, r2
   12458:	ands	r8, r3, #255	; 0xff
   1245c:	bne	12760 <__assert_fail@plt+0x18a4>
   12460:	ldr	r3, [sp, #152]	; 0x98
   12464:	sub	r2, r3, #2
   12468:	clz	r2, r2
   1246c:	lsr	r2, r2, #5
   12470:	b	11f58 <__assert_fail@plt+0x109c>
   12474:	ldr	r3, [sp, #56]	; 0x38
   12478:	add	r3, r3, sl
   1247c:	str	r3, [sp, #48]	; 0x30
   12480:	ldr	r3, [sp, #48]	; 0x30
   12484:	mov	r6, #0
   12488:	ldrb	r4, [r3]
   1248c:	cmp	r4, #126	; 0x7e
   12490:	ldrls	pc, [pc, r4, lsl #2]
   12494:	b	12414 <__assert_fail@plt+0x1558>
   12498:	andeq	r2, r1, r8, lsr r2
   1249c:	andeq	r2, r1, r4, lsl r4
   124a0:	andeq	r2, r1, r4, lsl r4
   124a4:	andeq	r2, r1, r4, lsl r4
   124a8:	andeq	r2, r1, r4, lsl r4
   124ac:	andeq	r2, r1, r4, lsl r4
   124b0:	andeq	r2, r1, r4, lsl r4
   124b4:	andeq	r2, r1, ip, lsl r2
   124b8:	andeq	r2, r1, r0, lsl #4
   124bc:	muleq	r1, r4, r6
   124c0:	andeq	r2, r1, r0, ror #2
   124c4:	andeq	r2, r1, r4, asr #2
   124c8:	ldrdeq	r2, [r1], -r8
   124cc:			; <UNDEFINED> instruction: 0x000123b4
   124d0:	andeq	r2, r1, r4, lsl r4
   124d4:	andeq	r2, r1, r4, lsl r4
   124d8:	andeq	r2, r1, r4, lsl r4
   124dc:	andeq	r2, r1, r4, lsl r4
   124e0:	andeq	r2, r1, r4, lsl r4
   124e4:	andeq	r2, r1, r4, lsl r4
   124e8:	andeq	r2, r1, r4, lsl r4
   124ec:	andeq	r2, r1, r4, lsl r4
   124f0:	andeq	r2, r1, r4, lsl r4
   124f4:	andeq	r2, r1, r4, lsl r4
   124f8:	andeq	r2, r1, r4, lsl r4
   124fc:	andeq	r2, r1, r4, lsl r4
   12500:	andeq	r2, r1, r4, lsl r4
   12504:	andeq	r2, r1, r4, lsl r4
   12508:	andeq	r2, r1, r4, lsl r4
   1250c:	andeq	r2, r1, r4, lsl r4
   12510:	andeq	r2, r1, r4, lsl r4
   12514:	andeq	r2, r1, r4, lsl r4
   12518:	andeq	r2, r1, ip, lsr #6
   1251c:	andeq	r2, r1, r8, lsr #6
   12520:	andeq	r2, r1, r8, lsr #6
   12524:	andeq	r1, r1, r8, lsr pc
   12528:	andeq	r2, r1, r8, lsr #6
   1252c:	andeq	r2, r1, r0, asr #7
   12530:	andeq	r2, r1, r8, lsr #6
   12534:	muleq	r1, r4, r3
   12538:	andeq	r2, r1, r8, lsr #6
   1253c:	andeq	r2, r1, r8, lsr #6
   12540:	andeq	r2, r1, r8, lsr #6
   12544:	andeq	r2, r1, r0, asr #7
   12548:	andeq	r2, r1, r0, asr #7
   1254c:	andeq	r2, r1, r0, asr #7
   12550:	andeq	r2, r1, r0, asr #7
   12554:	andeq	r2, r1, r0, asr #7
   12558:	andeq	r2, r1, r0, asr #7
   1255c:	andeq	r2, r1, r0, asr #7
   12560:	andeq	r2, r1, r0, asr #7
   12564:	andeq	r2, r1, r0, asr #7
   12568:	andeq	r2, r1, r0, asr #7
   1256c:	andeq	r2, r1, r0, asr #7
   12570:	andeq	r2, r1, r0, asr #7
   12574:	andeq	r2, r1, r0, asr #7
   12578:	andeq	r2, r1, r0, asr #7
   1257c:	andeq	r2, r1, r0, asr #7
   12580:	andeq	r2, r1, r0, asr #7
   12584:	andeq	r2, r1, r8, lsr #6
   12588:	andeq	r2, r1, r8, lsr #6
   1258c:	andeq	r2, r1, r8, lsr #6
   12590:	andeq	r2, r1, r8, lsr #6
   12594:	andeq	r2, r1, r4, ror #6
   12598:	andeq	r2, r1, r4, lsl r4
   1259c:	andeq	r2, r1, r0, asr #7
   125a0:	andeq	r2, r1, r0, asr #7
   125a4:	andeq	r2, r1, r0, asr #7
   125a8:	andeq	r2, r1, r0, asr #7
   125ac:	andeq	r2, r1, r0, asr #7
   125b0:	andeq	r2, r1, r0, asr #7
   125b4:	andeq	r2, r1, r0, asr #7
   125b8:	andeq	r2, r1, r0, asr #7
   125bc:	andeq	r2, r1, r0, asr #7
   125c0:	andeq	r2, r1, r0, asr #7
   125c4:	andeq	r2, r1, r0, asr #7
   125c8:	andeq	r2, r1, r0, asr #7
   125cc:	andeq	r2, r1, r0, asr #7
   125d0:	andeq	r2, r1, r0, asr #7
   125d4:	andeq	r2, r1, r0, asr #7
   125d8:	andeq	r2, r1, r0, asr #7
   125dc:	andeq	r2, r1, r0, asr #7
   125e0:	andeq	r2, r1, r0, asr #7
   125e4:	andeq	r2, r1, r0, asr #7
   125e8:	andeq	r2, r1, r0, asr #7
   125ec:	andeq	r2, r1, r0, asr #7
   125f0:	andeq	r2, r1, r0, asr #7
   125f4:	andeq	r2, r1, r0, asr #7
   125f8:	andeq	r2, r1, r0, asr #7
   125fc:	andeq	r2, r1, r0, asr #7
   12600:	andeq	r2, r1, r0, asr #7
   12604:	andeq	r2, r1, r8, lsr #6
   12608:	andeq	r2, r1, r4, lsl #1
   1260c:	andeq	r2, r1, r0, asr #7
   12610:	andeq	r2, r1, r8, lsr #6
   12614:	andeq	r2, r1, r0, asr #7
   12618:	andeq	r2, r1, r8, lsr #6
   1261c:	andeq	r2, r1, r0, asr #7
   12620:	andeq	r2, r1, r0, asr #7
   12624:	andeq	r2, r1, r0, asr #7
   12628:	andeq	r2, r1, r0, asr #7
   1262c:	andeq	r2, r1, r0, asr #7
   12630:	andeq	r2, r1, r0, asr #7
   12634:	andeq	r2, r1, r0, asr #7
   12638:	andeq	r2, r1, r0, asr #7
   1263c:	andeq	r2, r1, r0, asr #7
   12640:	andeq	r2, r1, r0, asr #7
   12644:	andeq	r2, r1, r0, asr #7
   12648:	andeq	r2, r1, r0, asr #7
   1264c:	andeq	r2, r1, r0, asr #7
   12650:	andeq	r2, r1, r0, asr #7
   12654:	andeq	r2, r1, r0, asr #7
   12658:	andeq	r2, r1, r0, asr #7
   1265c:	andeq	r2, r1, r0, asr #7
   12660:	andeq	r2, r1, r0, asr #7
   12664:	andeq	r2, r1, r0, asr #7
   12668:	andeq	r2, r1, r0, asr #7
   1266c:	andeq	r2, r1, r0, asr #7
   12670:	andeq	r2, r1, r0, asr #7
   12674:	andeq	r2, r1, r0, asr #7
   12678:	andeq	r2, r1, r0, asr #7
   1267c:	andeq	r2, r1, r0, asr #7
   12680:	andeq	r2, r1, r0, asr #7
   12684:	andeq	r1, r1, r8, lsl pc
   12688:	andeq	r2, r1, r8, lsr #6
   1268c:	andeq	r1, r1, r8, lsl pc
   12690:	andeq	r1, r1, r8, lsr pc
   12694:	mov	r3, #116	; 0x74
   12698:	b	12168 <__assert_fail@plt+0x12ac>
   1269c:	ldr	r3, [sp, #160]	; 0xa0
   126a0:	cmp	r3, #0
   126a4:	beq	11f74 <__assert_fail@plt+0x10b8>
   126a8:	lsr	r3, r4, #5
   126ac:	ldr	r0, [sp, #160]	; 0xa0
   126b0:	uxtb	r3, r3
   126b4:	and	r1, r4, #31
   126b8:	ldr	r0, [r0, r3, lsl #2]
   126bc:	lsr	r3, r0, r1
   126c0:	tst	r3, #1
   126c4:	beq	11f74 <__assert_fail@plt+0x10b8>
   126c8:	ldr	r3, [sp, #28]
   126cc:	cmp	r3, #0
   126d0:	beq	120d4 <__assert_fail@plt+0x1218>
   126d4:	ldr	sl, [sp, #32]
   126d8:	mov	r8, fp
   126dc:	b	12198 <__assert_fail@plt+0x12dc>
   126e0:	ldr	r3, [sp, #28]
   126e4:	cmp	r3, #0
   126e8:	bne	12c3c <__assert_fail@plt+0x1d80>
   126ec:	add	sl, sl, #1
   126f0:	ldr	r6, [sp, #40]	; 0x28
   126f4:	mov	r5, #0
   126f8:	mov	r4, #92	; 0x5c
   126fc:	b	11f90 <__assert_fail@plt+0x10d4>
   12700:	cmp	r9, r8
   12704:	bne	12974 <__assert_fail@plt+0x1ab8>
   12708:	ldr	r0, [sp, #100]	; 0x64
   1270c:	bl	10d30 <iswprint@plt>
   12710:	add	r5, r5, r4
   12714:	cmp	r0, #0
   12718:	add	r0, sp, #104	; 0x68
   1271c:	moveq	r6, #0
   12720:	bl	10cd0 <mbsinit@plt>
   12724:	cmp	r0, #0
   12728:	beq	12908 <__assert_fail@plt+0x1a4c>
   1272c:	mov	r2, r6
   12730:	mov	ip, r5
   12734:	eor	r5, r2, #1
   12738:	ldr	r4, [sp, #80]	; 0x50
   1273c:	ldr	r6, [sp, #84]	; 0x54
   12740:	ldr	r7, [sp, #88]	; 0x58
   12744:	uxtb	r5, r5
   12748:	cmp	ip, #1
   1274c:	bls	12c4c <__assert_fail@plt+0x1d90>
   12750:	ldr	r3, [sp, #44]	; 0x2c
   12754:	and	r8, r3, r5
   12758:	mov	r5, r2
   1275c:	uxtb	r8, r8
   12760:	add	r2, sl, ip
   12764:	ldr	r0, [sp, #48]	; 0x30
   12768:	mov	r1, #0
   1276c:	str	r5, [sp, #48]	; 0x30
   12770:	ldr	r9, [sp, #28]
   12774:	ldr	ip, [sp, #40]	; 0x28
   12778:	ldr	r3, [sp, #32]
   1277c:	ldr	r5, [sp, #152]	; 0x98
   12780:	b	1283c <__assert_fail@plt+0x1980>
   12784:	cmp	r9, #0
   12788:	bne	12b60 <__assert_fail@plt+0x1ca4>
   1278c:	eor	r1, ip, #1
   12790:	cmp	r5, #2
   12794:	movne	r1, #0
   12798:	andeq	r1, r1, #1
   1279c:	cmp	r1, #0
   127a0:	beq	127d8 <__assert_fail@plt+0x191c>
   127a4:	cmp	fp, r7
   127a8:	movhi	ip, #39	; 0x27
   127ac:	strbhi	ip, [r3, r7]
   127b0:	add	ip, r7, #1
   127b4:	cmp	fp, ip
   127b8:	movhi	lr, #36	; 0x24
   127bc:	strbhi	lr, [r3, ip]
   127c0:	add	ip, r7, #2
   127c4:	cmp	fp, ip
   127c8:	movhi	lr, #39	; 0x27
   127cc:	strbhi	lr, [r3, ip]
   127d0:	add	r7, r7, #3
   127d4:	mov	ip, r1
   127d8:	cmp	fp, r7
   127dc:	movhi	r1, #92	; 0x5c
   127e0:	strbhi	r1, [r3, r7]
   127e4:	add	r1, r7, #1
   127e8:	cmp	fp, r1
   127ec:	lsrhi	lr, r4, #6
   127f0:	addhi	lr, lr, #48	; 0x30
   127f4:	strbhi	lr, [r3, r1]
   127f8:	add	lr, r7, #2
   127fc:	cmp	fp, lr
   12800:	lsrhi	r1, r4, #3
   12804:	andhi	r1, r1, #7
   12808:	addhi	r1, r1, #48	; 0x30
   1280c:	add	sl, sl, #1
   12810:	strbhi	r1, [r3, lr]
   12814:	and	r4, r4, #7
   12818:	cmp	r2, sl
   1281c:	add	r4, r4, #48	; 0x30
   12820:	add	r7, r7, #3
   12824:	bls	12b84 <__assert_fail@plt+0x1cc8>
   12828:	mov	r1, r8
   1282c:	cmp	fp, r7
   12830:	strbhi	r4, [r3, r7]
   12834:	ldrb	r4, [r0, #1]!
   12838:	add	r7, r7, #1
   1283c:	cmp	r8, #0
   12840:	bne	12784 <__assert_fail@plt+0x18c8>
   12844:	cmp	r6, #0
   12848:	bne	12898 <__assert_fail@plt+0x19dc>
   1284c:	eor	r6, r1, #1
   12850:	and	r6, r6, ip
   12854:	add	sl, sl, #1
   12858:	cmp	r2, sl
   1285c:	uxtb	r6, r6
   12860:	bls	128c0 <__assert_fail@plt+0x1a04>
   12864:	cmp	r6, #0
   12868:	beq	1282c <__assert_fail@plt+0x1970>
   1286c:	cmp	fp, r7
   12870:	movhi	ip, #39	; 0x27
   12874:	strbhi	ip, [r3, r7]
   12878:	add	ip, r7, #1
   1287c:	cmp	fp, ip
   12880:	movhi	lr, #39	; 0x27
   12884:	strbhi	lr, [r3, ip]
   12888:	add	r7, r7, #2
   1288c:	mov	r6, r8
   12890:	mov	ip, r8
   12894:	b	1282c <__assert_fail@plt+0x1970>
   12898:	cmp	fp, r7
   1289c:	eor	r6, r1, #1
   128a0:	movhi	lr, #92	; 0x5c
   128a4:	and	r6, r6, ip
   128a8:	add	sl, sl, #1
   128ac:	strbhi	lr, [r3, r7]
   128b0:	cmp	r2, sl
   128b4:	add	r7, r7, #1
   128b8:	uxtb	r6, r6
   128bc:	bhi	12864 <__assert_fail@plt+0x19a8>
   128c0:	str	ip, [sp, #40]	; 0x28
   128c4:	ldr	r5, [sp, #48]	; 0x30
   128c8:	b	11f90 <__assert_fail@plt+0x10d4>
   128cc:	ldr	r3, [sp, #24]
   128d0:	cmn	r3, #1
   128d4:	mov	r3, #0
   128d8:	str	r3, [sp, #104]	; 0x68
   128dc:	str	r3, [sp, #108]	; 0x6c
   128e0:	beq	12c00 <__assert_fail@plt+0x1d44>
   128e4:	mov	r2, r5
   128e8:	mov	r3, #0
   128ec:	str	r7, [sp, #88]	; 0x58
   128f0:	ldr	r7, [sp, #152]	; 0x98
   128f4:	str	r5, [sp, #92]	; 0x5c
   128f8:	str	r6, [sp, #84]	; 0x54
   128fc:	mov	r5, r3
   12900:	mov	r6, r2
   12904:	str	r4, [sp, #80]	; 0x50
   12908:	ldr	r3, [sp, #56]	; 0x38
   1290c:	add	r9, sl, r5
   12910:	add	r8, r3, r9
   12914:	ldr	r3, [sp, #24]
   12918:	mov	r1, r8
   1291c:	sub	r2, r3, r9
   12920:	add	r0, sp, #100	; 0x64
   12924:	add	r3, sp, #104	; 0x68
   12928:	bl	14c54 <__assert_fail@plt+0x3d98>
   1292c:	subs	r4, r0, #0
   12930:	beq	12cd8 <__assert_fail@plt+0x1e1c>
   12934:	cmn	r4, #1
   12938:	beq	12cb8 <__assert_fail@plt+0x1dfc>
   1293c:	cmn	r4, #2
   12940:	beq	12c58 <__assert_fail@plt+0x1d9c>
   12944:	ldr	r2, [sp, #28]
   12948:	cmp	r7, #2
   1294c:	movne	r2, #0
   12950:	andeq	r2, r2, #1
   12954:	cmp	r2, #0
   12958:	beq	12708 <__assert_fail@plt+0x184c>
   1295c:	cmp	r4, #1
   12960:	beq	12708 <__assert_fail@plt+0x184c>
   12964:	sub	r3, r4, #1
   12968:	add	r9, r3, r9
   1296c:	ldr	r3, [sp, #56]	; 0x38
   12970:	add	r9, r3, r9
   12974:	ldrb	r3, [r8, #1]!
   12978:	sub	r3, r3, #91	; 0x5b
   1297c:	cmp	r3, #33	; 0x21
   12980:	ldrls	pc, [pc, r3, lsl #2]
   12984:	b	12700 <__assert_fail@plt+0x1844>
   12988:	andeq	r2, r1, r0, lsl sl
   1298c:	andeq	r2, r1, r0, lsl sl
   12990:	andeq	r2, r1, r0, lsl #14
   12994:	andeq	r2, r1, r0, lsl sl
   12998:	andeq	r2, r1, r0, lsl #14
   1299c:	andeq	r2, r1, r0, lsl sl
   129a0:	andeq	r2, r1, r0, lsl #14
   129a4:	andeq	r2, r1, r0, lsl #14
   129a8:	andeq	r2, r1, r0, lsl #14
   129ac:	andeq	r2, r1, r0, lsl #14
   129b0:	andeq	r2, r1, r0, lsl #14
   129b4:	andeq	r2, r1, r0, lsl #14
   129b8:	andeq	r2, r1, r0, lsl #14
   129bc:	andeq	r2, r1, r0, lsl #14
   129c0:	andeq	r2, r1, r0, lsl #14
   129c4:	andeq	r2, r1, r0, lsl #14
   129c8:	andeq	r2, r1, r0, lsl #14
   129cc:	andeq	r2, r1, r0, lsl #14
   129d0:	andeq	r2, r1, r0, lsl #14
   129d4:	andeq	r2, r1, r0, lsl #14
   129d8:	andeq	r2, r1, r0, lsl #14
   129dc:	andeq	r2, r1, r0, lsl #14
   129e0:	andeq	r2, r1, r0, lsl #14
   129e4:	andeq	r2, r1, r0, lsl #14
   129e8:	andeq	r2, r1, r0, lsl #14
   129ec:	andeq	r2, r1, r0, lsl #14
   129f0:	andeq	r2, r1, r0, lsl #14
   129f4:	andeq	r2, r1, r0, lsl #14
   129f8:	andeq	r2, r1, r0, lsl #14
   129fc:	andeq	r2, r1, r0, lsl #14
   12a00:	andeq	r2, r1, r0, lsl #14
   12a04:	andeq	r2, r1, r0, lsl #14
   12a08:	andeq	r2, r1, r0, lsl #14
   12a0c:	andeq	r2, r1, r0, lsl sl
   12a10:	mov	r3, #2
   12a14:	ldr	sl, [sp, #32]
   12a18:	mov	r8, fp
   12a1c:	str	r3, [sp, #152]	; 0x98
   12a20:	b	12198 <__assert_fail@plt+0x12dc>
   12a24:	ldr	r3, [sp, #156]	; 0x9c
   12a28:	tst	r3, #1
   12a2c:	bne	12b58 <__assert_fail@plt+0x1c9c>
   12a30:	ldr	r3, [sp, #152]	; 0x98
   12a34:	ldr	r4, [sp, #44]	; 0x2c
   12a38:	sub	r2, r3, #2
   12a3c:	mov	r5, #0
   12a40:	clz	r2, r2
   12a44:	mov	r8, r4
   12a48:	lsr	r2, r2, #5
   12a4c:	b	11f58 <__assert_fail@plt+0x109c>
   12a50:	ldr	r3, [sp, #156]	; 0x9c
   12a54:	ands	r9, r3, #4
   12a58:	beq	12b90 <__assert_fail@plt+0x1cd4>
   12a5c:	ldr	r2, [sp, #24]
   12a60:	add	r3, sl, #2
   12a64:	cmp	r3, r2
   12a68:	bcs	12a7c <__assert_fail@plt+0x1bc0>
   12a6c:	ldr	r2, [sp, #48]	; 0x30
   12a70:	ldrb	r4, [r2, #1]
   12a74:	cmp	r4, #63	; 0x3f
   12a78:	beq	12d18 <__assert_fail@plt+0x1e5c>
   12a7c:	mov	r2, #0
   12a80:	mov	r8, r2
   12a84:	mov	r5, r2
   12a88:	mov	r4, #63	; 0x3f
   12a8c:	b	11f58 <__assert_fail@plt+0x109c>
   12a90:	ldr	r3, [sp, #28]
   12a94:	cmp	r3, #0
   12a98:	bne	12dbc <__assert_fail@plt+0x1f00>
   12a9c:	mov	r2, r5
   12aa0:	mov	r8, r3
   12aa4:	mov	r5, #0
   12aa8:	mov	r4, #63	; 0x3f
   12aac:	b	11f58 <__assert_fail@plt+0x109c>
   12ab0:	ldr	r3, [sp, #28]
   12ab4:	cmp	r3, #0
   12ab8:	bne	12dbc <__assert_fail@plt+0x1f00>
   12abc:	ldr	r2, [sp, #72]	; 0x48
   12ac0:	adds	r3, fp, #0
   12ac4:	movne	r3, #1
   12ac8:	cmp	r2, #0
   12acc:	movne	r3, #0
   12ad0:	cmp	r3, #0
   12ad4:	strne	fp, [sp, #72]	; 0x48
   12ad8:	movne	fp, #0
   12adc:	bne	12b18 <__assert_fail@plt+0x1c5c>
   12ae0:	cmp	fp, r7
   12ae4:	movhi	r2, #39	; 0x27
   12ae8:	ldrhi	r3, [sp, #32]
   12aec:	strbhi	r2, [r3, r7]
   12af0:	add	r3, r7, #1
   12af4:	cmp	fp, r3
   12af8:	movhi	r1, #92	; 0x5c
   12afc:	ldrhi	r2, [sp, #32]
   12b00:	strbhi	r1, [r2, r3]
   12b04:	add	r3, r7, #2
   12b08:	cmp	fp, r3
   12b0c:	movhi	r1, #39	; 0x27
   12b10:	ldrhi	r2, [sp, #32]
   12b14:	strbhi	r1, [r2, r3]
   12b18:	ldr	r3, [sp, #28]
   12b1c:	add	r7, r7, #3
   12b20:	mov	r2, r5
   12b24:	mov	r8, r3
   12b28:	str	r5, [sp, #68]	; 0x44
   12b2c:	str	r3, [sp, #40]	; 0x28
   12b30:	mov	r4, #39	; 0x27
   12b34:	b	11f58 <__assert_fail@plt+0x109c>
   12b38:	ldr	r3, [sp, #56]	; 0x38
   12b3c:	ldrb	r3, [r3, #1]
   12b40:	adds	r3, r3, #0
   12b44:	movne	r3, #1
   12b48:	b	11f30 <__assert_fail@plt+0x1074>
   12b4c:	ldr	r5, [sp, #28]
   12b50:	mov	r4, #48	; 0x30
   12b54:	b	11f58 <__assert_fail@plt+0x109c>
   12b58:	add	sl, sl, #1
   12b5c:	b	11a88 <__assert_fail@plt+0xbcc>
   12b60:	mov	sl, r3
   12b64:	ldr	r3, [sp, #28]
   12b68:	mov	r8, fp
   12b6c:	str	r3, [sp, #44]	; 0x2c
   12b70:	ldr	r3, [sp, #152]	; 0x98
   12b74:	sub	r2, r3, #2
   12b78:	clz	r2, r2
   12b7c:	lsr	r2, r2, #5
   12b80:	b	12198 <__assert_fail@plt+0x12dc>
   12b84:	str	ip, [sp, #40]	; 0x28
   12b88:	ldr	r5, [sp, #48]	; 0x30
   12b8c:	b	11fc8 <__assert_fail@plt+0x110c>
   12b90:	mov	r2, r9
   12b94:	mov	r8, r9
   12b98:	mov	r5, #0
   12b9c:	mov	r4, #63	; 0x3f
   12ba0:	b	11f58 <__assert_fail@plt+0x109c>
   12ba4:	cmp	fp, #0
   12ba8:	beq	12c20 <__assert_fail@plt+0x1d64>
   12bac:	ldr	r1, [sp, #32]
   12bb0:	mov	r3, #34	; 0x22
   12bb4:	mov	r2, #1
   12bb8:	strb	r3, [r1]
   12bbc:	ldr	r3, [pc, #332]	; 12d10 <__assert_fail@plt+0x1e54>
   12bc0:	str	r2, [sp, #52]	; 0x34
   12bc4:	mov	r7, r2
   12bc8:	str	r2, [sp, #44]	; 0x2c
   12bcc:	str	r3, [sp, #64]	; 0x40
   12bd0:	b	11a78 <__assert_fail@plt+0xbbc>
   12bd4:	ldr	r3, [pc, #300]	; 12d08 <__assert_fail@plt+0x1e4c>
   12bd8:	str	r3, [sp, #64]	; 0x40
   12bdc:	mov	r3, #0
   12be0:	str	r3, [sp, #28]
   12be4:	mov	r3, #1
   12be8:	str	r3, [sp, #52]	; 0x34
   12bec:	mov	r7, r3
   12bf0:	mov	r3, #2
   12bf4:	str	r3, [sp, #152]	; 0x98
   12bf8:	b	11a78 <__assert_fail@plt+0xbbc>
   12bfc:	bl	10eb0 <abort@plt>
   12c00:	ldr	r0, [sp, #56]	; 0x38
   12c04:	bl	10df0 <strlen@plt>
   12c08:	str	r0, [sp, #24]
   12c0c:	b	128e4 <__assert_fail@plt+0x1a28>
   12c10:	mov	r5, r8
   12c14:	mov	r4, #48	; 0x30
   12c18:	ldr	r8, [sp, #44]	; 0x2c
   12c1c:	b	11f58 <__assert_fail@plt+0x109c>
   12c20:	mov	r3, #1
   12c24:	str	r3, [sp, #52]	; 0x34
   12c28:	mov	r7, r3
   12c2c:	str	r3, [sp, #44]	; 0x2c
   12c30:	ldr	r3, [pc, #216]	; 12d10 <__assert_fail@plt+0x1e54>
   12c34:	str	r3, [sp, #64]	; 0x40
   12c38:	b	11a78 <__assert_fail@plt+0xbbc>
   12c3c:	ldr	sl, [sp, #32]
   12c40:	mov	r8, fp
   12c44:	mov	r2, r3
   12c48:	b	12198 <__assert_fail@plt+0x12dc>
   12c4c:	mov	r3, r5
   12c50:	mov	r5, r2
   12c54:	b	12450 <__assert_fail@plt+0x1594>
   12c58:	ldr	r1, [sp, #24]
   12c5c:	mov	r2, r5
   12c60:	cmp	r1, r9
   12c64:	mov	ip, r5
   12c68:	ldr	r4, [sp, #80]	; 0x50
   12c6c:	ldr	r5, [sp, #92]	; 0x5c
   12c70:	ldr	r6, [sp, #84]	; 0x54
   12c74:	ldr	r7, [sp, #88]	; 0x58
   12c78:	bls	12cac <__assert_fail@plt+0x1df0>
   12c7c:	ldrb	r3, [r8]
   12c80:	cmp	r3, #0
   12c84:	bne	12c98 <__assert_fail@plt+0x1ddc>
   12c88:	b	12cb0 <__assert_fail@plt+0x1df4>
   12c8c:	ldrb	r3, [r8, #1]!
   12c90:	cmp	r3, #0
   12c94:	beq	12db0 <__assert_fail@plt+0x1ef4>
   12c98:	add	r2, r2, #1
   12c9c:	add	r3, sl, r2
   12ca0:	cmp	r1, r3
   12ca4:	bhi	12c8c <__assert_fail@plt+0x1dd0>
   12ca8:	mov	ip, r2
   12cac:	mov	r3, #0
   12cb0:	mov	r2, r3
   12cb4:	b	12748 <__assert_fail@plt+0x188c>
   12cb8:	mov	r3, #0
   12cbc:	mov	ip, r5
   12cc0:	ldr	r4, [sp, #80]	; 0x50
   12cc4:	ldr	r5, [sp, #92]	; 0x5c
   12cc8:	ldr	r6, [sp, #84]	; 0x54
   12ccc:	ldr	r7, [sp, #88]	; 0x58
   12cd0:	mov	r2, r3
   12cd4:	b	12748 <__assert_fail@plt+0x188c>
   12cd8:	mov	r3, r6
   12cdc:	mov	ip, r5
   12ce0:	eor	r5, r3, #1
   12ce4:	mov	r2, r6
   12ce8:	ldr	r4, [sp, #80]	; 0x50
   12cec:	ldr	r6, [sp, #84]	; 0x54
   12cf0:	ldr	r7, [sp, #88]	; 0x58
   12cf4:	uxtb	r5, r5
   12cf8:	b	12748 <__assert_fail@plt+0x188c>
   12cfc:	ldr	sl, [sp, #32]
   12d00:	mov	r8, fp
   12d04:	b	12b6c <__assert_fail@plt+0x1cb0>
   12d08:	andeq	r5, r1, r0, lsr #18
   12d0c:	andeq	r5, r1, r4, lsr #18
   12d10:	andeq	r5, r1, ip, lsl r9
   12d14:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   12d18:	ldr	r2, [sp, #56]	; 0x38
   12d1c:	ldrb	r1, [r2, r3]
   12d20:	sub	r2, r1, #33	; 0x21
   12d24:	uxtb	r2, r2
   12d28:	cmp	r2, #29
   12d2c:	bhi	12dcc <__assert_fail@plt+0x1f10>
   12d30:	ldr	r0, [pc, #-36]	; 12d14 <__assert_fail@plt+0x1e58>
   12d34:	mov	ip, #1
   12d38:	ands	r2, r0, ip, lsl r2
   12d3c:	beq	12ddc <__assert_fail@plt+0x1f20>
   12d40:	ldr	r2, [sp, #28]
   12d44:	cmp	r2, #0
   12d48:	bne	12edc <__assert_fail@plt+0x2020>
   12d4c:	cmp	fp, r7
   12d50:	ldr	r8, [sp, #28]
   12d54:	ldrhi	r2, [sp, #32]
   12d58:	mov	sl, r3
   12d5c:	mov	r5, r8
   12d60:	strbhi	r4, [r2, r7]
   12d64:	add	r2, r7, #1
   12d68:	cmp	fp, r2
   12d6c:	movhi	r0, #34	; 0x22
   12d70:	ldrhi	ip, [sp, #32]
   12d74:	mov	r4, r1
   12d78:	strbhi	r0, [ip, r2]
   12d7c:	add	r2, r7, #2
   12d80:	cmp	fp, r2
   12d84:	movhi	r0, #34	; 0x22
   12d88:	ldrhi	ip, [sp, #32]
   12d8c:	strbhi	r0, [ip, r2]
   12d90:	add	r2, r7, #3
   12d94:	cmp	fp, r2
   12d98:	movhi	r0, #63	; 0x3f
   12d9c:	ldrhi	ip, [sp, #32]
   12da0:	add	r7, r7, #4
   12da4:	strbhi	r0, [ip, r2]
   12da8:	mov	r2, r8
   12dac:	b	11f58 <__assert_fail@plt+0x109c>
   12db0:	mov	ip, r2
   12db4:	mov	r2, r3
   12db8:	b	12748 <__assert_fail@plt+0x188c>
   12dbc:	ldr	sl, [sp, #32]
   12dc0:	mov	r8, fp
   12dc4:	ldr	r2, [sp, #28]
   12dc8:	b	12198 <__assert_fail@plt+0x12dc>
   12dcc:	mov	r2, #0
   12dd0:	mov	r8, r2
   12dd4:	mov	r5, r2
   12dd8:	b	11f58 <__assert_fail@plt+0x109c>
   12ddc:	mov	r8, r2
   12de0:	mov	r5, #0
   12de4:	b	11f58 <__assert_fail@plt+0x109c>
   12de8:	ldr	r1, [sp, #152]	; 0x98
   12dec:	bl	118b4 <__assert_fail@plt+0x9f8>
   12df0:	str	r0, [sp, #168]	; 0xa8
   12df4:	b	11e14 <__assert_fail@plt+0xf58>
   12df8:	ldr	r1, [sp, #152]	; 0x98
   12dfc:	bl	118b4 <__assert_fail@plt+0x9f8>
   12e00:	str	r0, [sp, #164]	; 0xa4
   12e04:	b	11df4 <__assert_fail@plt+0xf38>
   12e08:	ldr	r7, [sp, #28]
   12e0c:	b	11e54 <__assert_fail@plt+0xf98>
   12e10:	ldr	sl, [sp, #32]
   12e14:	ldr	r2, [sp, #68]	; 0x44
   12e18:	mov	r8, fp
   12e1c:	mov	fp, r7
   12e20:	ldr	r3, [sp, #64]	; 0x40
   12e24:	cmp	r3, #0
   12e28:	moveq	r2, #0
   12e2c:	andne	r2, r2, #1
   12e30:	cmp	r2, #0
   12e34:	beq	12e60 <__assert_fail@plt+0x1fa4>
   12e38:	mov	r2, r3
   12e3c:	ldrb	r3, [r3]
   12e40:	cmp	r3, #0
   12e44:	beq	12e60 <__assert_fail@plt+0x1fa4>
   12e48:	cmp	r8, fp
   12e4c:	strbhi	r3, [sl, fp]
   12e50:	ldrb	r3, [r2, #1]!
   12e54:	add	fp, fp, #1
   12e58:	cmp	r3, #0
   12e5c:	bne	12e48 <__assert_fail@plt+0x1f8c>
   12e60:	cmp	r8, fp
   12e64:	movhi	r3, #0
   12e68:	strbhi	r3, [sl, fp]
   12e6c:	b	121f4 <__assert_fail@plt+0x1338>
   12e70:	ldr	r3, [sp, #168]	; 0xa8
   12e74:	ldr	sl, [sp, #32]
   12e78:	str	r3, [sp, #16]
   12e7c:	ldr	r3, [sp, #164]	; 0xa4
   12e80:	mov	ip, #5
   12e84:	str	r3, [sp, #12]
   12e88:	ldr	r3, [sp, #160]	; 0xa0
   12e8c:	ldr	r2, [sp, #56]	; 0x38
   12e90:	str	r3, [sp, #8]
   12e94:	ldr	r3, [sp, #156]	; 0x9c
   12e98:	ldr	r1, [sp, #72]	; 0x48
   12e9c:	str	r3, [sp, #4]
   12ea0:	mov	r0, sl
   12ea4:	ldr	r3, [sp, #24]
   12ea8:	str	ip, [sp]
   12eac:	bl	119d4 <__assert_fail@plt+0xb18>
   12eb0:	mov	fp, r0
   12eb4:	b	121f4 <__assert_fail@plt+0x1338>
   12eb8:	mov	r8, fp
   12ebc:	ldr	sl, [sp, #32]
   12ec0:	mov	fp, r7
   12ec4:	mov	r2, r3
   12ec8:	b	12e20 <__assert_fail@plt+0x1f64>
   12ecc:	mov	r8, fp
   12ed0:	ldr	sl, [sp, #32]
   12ed4:	mov	fp, r7
   12ed8:	b	12e20 <__assert_fail@plt+0x1f64>
   12edc:	ldr	sl, [sp, #32]
   12ee0:	mov	r8, fp
   12ee4:	b	121b0 <__assert_fail@plt+0x12f4>
   12ee8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12eec:	sub	sp, sp, #52	; 0x34
   12ef0:	mov	r4, r0
   12ef4:	mov	r5, r3
   12ef8:	mov	sl, r1
   12efc:	mov	fp, r2
   12f00:	bl	10e08 <__errno_location@plt>
   12f04:	ldr	r7, [pc, #412]	; 130a8 <__assert_fail@plt+0x21ec>
   12f08:	cmn	r4, #-2147483647	; 0x80000001
   12f0c:	ldr	r6, [r7]
   12f10:	mov	r8, r0
   12f14:	movne	r0, #0
   12f18:	moveq	r0, #1
   12f1c:	ldr	r3, [r8]
   12f20:	orrs	r0, r0, r4, lsr #31
   12f24:	str	r3, [sp, #24]
   12f28:	bne	130a4 <__assert_fail@plt+0x21e8>
   12f2c:	ldr	r2, [r7, #4]
   12f30:	cmp	r4, r2
   12f34:	blt	12f94 <__assert_fail@plt+0x20d8>
   12f38:	add	r9, r7, #8
   12f3c:	cmp	r6, r9
   12f40:	str	r2, [sp, #44]	; 0x2c
   12f44:	beq	13074 <__assert_fail@plt+0x21b8>
   12f48:	mov	r3, #8
   12f4c:	sub	r2, r4, r2
   12f50:	mov	r0, r6
   12f54:	str	r3, [sp]
   12f58:	add	r2, r2, #1
   12f5c:	mvn	r3, #-2147483648	; 0x80000000
   12f60:	add	r1, sp, #44	; 0x2c
   12f64:	bl	13d54 <__assert_fail@plt+0x2e98>
   12f68:	mov	r6, r0
   12f6c:	str	r0, [r7]
   12f70:	ldr	r0, [r7, #4]
   12f74:	ldr	r2, [sp, #44]	; 0x2c
   12f78:	mov	r1, #0
   12f7c:	sub	r2, r2, r0
   12f80:	add	r0, r6, r0, lsl #3
   12f84:	lsl	r2, r2, #3
   12f88:	bl	10e20 <memset@plt>
   12f8c:	ldr	r3, [sp, #44]	; 0x2c
   12f90:	str	r3, [r7, #4]
   12f94:	add	r3, r6, r4, lsl #3
   12f98:	ldr	r1, [r5, #4]
   12f9c:	ldr	r7, [r3, #4]
   12fa0:	ldr	r9, [r6, r4, lsl #3]
   12fa4:	ldr	r2, [r5, #40]	; 0x28
   12fa8:	ldr	ip, [r5, #44]	; 0x2c
   12fac:	add	r0, r5, #8
   12fb0:	str	r3, [sp, #28]
   12fb4:	ldr	r3, [r5]
   12fb8:	orr	r1, r1, #1
   12fbc:	mov	lr, r0
   12fc0:	str	r1, [sp, #32]
   12fc4:	str	r0, [sp, #36]	; 0x24
   12fc8:	str	r1, [sp, #4]
   12fcc:	str	r2, [sp, #12]
   12fd0:	str	r3, [sp]
   12fd4:	mov	r0, r7
   12fd8:	mov	r1, r9
   12fdc:	str	ip, [sp, #16]
   12fe0:	str	lr, [sp, #8]
   12fe4:	mov	r3, fp
   12fe8:	mov	r2, sl
   12fec:	bl	119d4 <__assert_fail@plt+0xb18>
   12ff0:	cmp	r9, r0
   12ff4:	bhi	13060 <__assert_fail@plt+0x21a4>
   12ff8:	ldr	r3, [pc, #172]	; 130ac <__assert_fail@plt+0x21f0>
   12ffc:	add	r9, r0, #1
   13000:	cmp	r7, r3
   13004:	str	r9, [r6, r4, lsl #3]
   13008:	beq	13014 <__assert_fail@plt+0x2158>
   1300c:	mov	r0, r7
   13010:	bl	14b28 <__assert_fail@plt+0x3c6c>
   13014:	mov	r0, r9
   13018:	bl	13bf0 <__assert_fail@plt+0x2d34>
   1301c:	ldr	lr, [sp, #28]
   13020:	ldr	ip, [r5, #44]	; 0x2c
   13024:	ldr	r4, [r5, #40]	; 0x28
   13028:	mov	r3, fp
   1302c:	mov	r2, sl
   13030:	mov	r1, r9
   13034:	str	r0, [lr, #4]
   13038:	ldr	lr, [r5]
   1303c:	ldr	r5, [sp, #36]	; 0x24
   13040:	str	ip, [sp, #16]
   13044:	str	r5, [sp, #8]
   13048:	ldr	r5, [sp, #32]
   1304c:	str	r4, [sp, #12]
   13050:	str	r5, [sp, #4]
   13054:	str	lr, [sp]
   13058:	mov	r7, r0
   1305c:	bl	119d4 <__assert_fail@plt+0xb18>
   13060:	ldr	r3, [sp, #24]
   13064:	mov	r0, r7
   13068:	str	r3, [r8]
   1306c:	add	sp, sp, #52	; 0x34
   13070:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13074:	mov	r3, #8
   13078:	sub	r2, r4, r2
   1307c:	str	r3, [sp]
   13080:	add	r1, sp, #44	; 0x2c
   13084:	add	r2, r2, #1
   13088:	mvn	r3, #-2147483648	; 0x80000000
   1308c:	bl	13d54 <__assert_fail@plt+0x2e98>
   13090:	mov	r6, r0
   13094:	ldm	r9, {r0, r1}
   13098:	str	r6, [r7]
   1309c:	stm	r6, {r0, r1}
   130a0:	b	12f70 <__assert_fail@plt+0x20b4>
   130a4:	bl	10eb0 <abort@plt>
   130a8:	andeq	r6, r2, ip, ror #1
   130ac:	andeq	r6, r2, ip, asr r1
   130b0:	push	{r4, r5, r6, lr}
   130b4:	mov	r5, r0
   130b8:	bl	10e08 <__errno_location@plt>
   130bc:	cmp	r5, #0
   130c0:	mov	r1, #48	; 0x30
   130c4:	mov	r4, r0
   130c8:	ldr	r0, [pc, #16]	; 130e0 <__assert_fail@plt+0x2224>
   130cc:	ldr	r6, [r4]
   130d0:	movne	r0, r5
   130d4:	bl	14050 <__assert_fail@plt+0x3194>
   130d8:	str	r6, [r4]
   130dc:	pop	{r4, r5, r6, pc}
   130e0:	andeq	r6, r2, ip, asr r2
   130e4:	ldr	r3, [pc, #12]	; 130f8 <__assert_fail@plt+0x223c>
   130e8:	cmp	r0, #0
   130ec:	moveq	r0, r3
   130f0:	ldr	r0, [r0]
   130f4:	bx	lr
   130f8:	andeq	r6, r2, ip, asr r2
   130fc:	ldr	r3, [pc, #12]	; 13110 <__assert_fail@plt+0x2254>
   13100:	cmp	r0, #0
   13104:	moveq	r0, r3
   13108:	str	r1, [r0]
   1310c:	bx	lr
   13110:	andeq	r6, r2, ip, asr r2
   13114:	ldr	r3, [pc, #52]	; 13150 <__assert_fail@plt+0x2294>
   13118:	cmp	r0, #0
   1311c:	moveq	r0, r3
   13120:	add	r3, r0, #8
   13124:	push	{lr}		; (str lr, [sp, #-4]!)
   13128:	lsr	lr, r1, #5
   1312c:	and	r1, r1, #31
   13130:	ldr	ip, [r3, lr, lsl #2]
   13134:	lsr	r0, ip, r1
   13138:	eor	r2, r2, r0
   1313c:	and	r2, r2, #1
   13140:	and	r0, r0, #1
   13144:	eor	r1, ip, r2, lsl r1
   13148:	str	r1, [r3, lr, lsl #2]
   1314c:	pop	{pc}		; (ldr pc, [sp], #4)
   13150:	andeq	r6, r2, ip, asr r2
   13154:	ldr	r3, [pc, #16]	; 1316c <__assert_fail@plt+0x22b0>
   13158:	cmp	r0, #0
   1315c:	movne	r3, r0
   13160:	ldr	r0, [r3, #4]
   13164:	str	r1, [r3, #4]
   13168:	bx	lr
   1316c:	andeq	r6, r2, ip, asr r2
   13170:	ldr	r3, [pc, #44]	; 131a4 <__assert_fail@plt+0x22e8>
   13174:	cmp	r0, #0
   13178:	moveq	r0, r3
   1317c:	mov	ip, #10
   13180:	cmp	r2, #0
   13184:	cmpne	r1, #0
   13188:	str	ip, [r0]
   1318c:	beq	1319c <__assert_fail@plt+0x22e0>
   13190:	str	r1, [r0, #40]	; 0x28
   13194:	str	r2, [r0, #44]	; 0x2c
   13198:	bx	lr
   1319c:	push	{r4, lr}
   131a0:	bl	10eb0 <abort@plt>
   131a4:	andeq	r6, r2, ip, asr r2
   131a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131ac:	sub	sp, sp, #24
   131b0:	ldr	ip, [pc, #108]	; 13224 <__assert_fail@plt+0x2368>
   131b4:	ldr	r4, [sp, #56]	; 0x38
   131b8:	mov	r9, r2
   131bc:	cmp	r4, #0
   131c0:	moveq	r4, ip
   131c4:	mov	sl, r3
   131c8:	mov	r7, r0
   131cc:	mov	r8, r1
   131d0:	bl	10e08 <__errno_location@plt>
   131d4:	ldr	r3, [r4, #44]	; 0x2c
   131d8:	mov	r1, r8
   131dc:	ldr	r6, [r0]
   131e0:	str	r3, [sp, #16]
   131e4:	ldr	r2, [r4, #40]	; 0x28
   131e8:	add	r3, r4, #8
   131ec:	str	r3, [sp, #8]
   131f0:	str	r2, [sp, #12]
   131f4:	ldr	r2, [r4, #4]
   131f8:	mov	r5, r0
   131fc:	str	r2, [sp, #4]
   13200:	ldr	ip, [r4]
   13204:	mov	r3, sl
   13208:	mov	r2, r9
   1320c:	mov	r0, r7
   13210:	str	ip, [sp]
   13214:	bl	119d4 <__assert_fail@plt+0xb18>
   13218:	str	r6, [r5]
   1321c:	add	sp, sp, #24
   13220:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13224:	andeq	r6, r2, ip, asr r2
   13228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1322c:	cmp	r3, #0
   13230:	sub	sp, sp, #44	; 0x2c
   13234:	ldr	r4, [pc, #192]	; 132fc <__assert_fail@plt+0x2440>
   13238:	mov	r6, r2
   1323c:	movne	r4, r3
   13240:	mov	r9, r1
   13244:	mov	r8, r0
   13248:	bl	10e08 <__errno_location@plt>
   1324c:	ldr	r3, [r4, #44]	; 0x2c
   13250:	ldr	r5, [r4, #4]
   13254:	add	sl, r4, #8
   13258:	cmp	r6, #0
   1325c:	orreq	r5, r5, #1
   13260:	mov	r1, #0
   13264:	ldr	r2, [r0]
   13268:	str	r3, [sp, #16]
   1326c:	ldr	r3, [r4, #40]	; 0x28
   13270:	stmib	sp, {r5, sl}
   13274:	str	r3, [sp, #12]
   13278:	ldr	r3, [r4]
   1327c:	mov	r7, r0
   13280:	str	r2, [sp, #28]
   13284:	str	r3, [sp]
   13288:	mov	r2, r8
   1328c:	mov	r3, r9
   13290:	mov	r0, r1
   13294:	bl	119d4 <__assert_fail@plt+0xb18>
   13298:	add	r1, r0, #1
   1329c:	mov	fp, r0
   132a0:	mov	r0, r1
   132a4:	str	r1, [sp, #36]	; 0x24
   132a8:	bl	13bf0 <__assert_fail@plt+0x2d34>
   132ac:	ldr	r3, [r4, #44]	; 0x2c
   132b0:	mov	r2, r8
   132b4:	str	r3, [sp, #16]
   132b8:	ldr	r3, [r4, #40]	; 0x28
   132bc:	str	r5, [sp, #4]
   132c0:	str	r3, [sp, #12]
   132c4:	str	sl, [sp, #8]
   132c8:	ldr	ip, [r4]
   132cc:	ldr	r1, [sp, #36]	; 0x24
   132d0:	mov	r3, r9
   132d4:	str	ip, [sp]
   132d8:	str	r0, [sp, #32]
   132dc:	bl	119d4 <__assert_fail@plt+0xb18>
   132e0:	ldr	r2, [sp, #28]
   132e4:	cmp	r6, #0
   132e8:	str	r2, [r7]
   132ec:	ldr	r0, [sp, #32]
   132f0:	strne	fp, [r6]
   132f4:	add	sp, sp, #44	; 0x2c
   132f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   132fc:	andeq	r6, r2, ip, asr r2
   13300:	mov	r3, r2
   13304:	mov	r2, #0
   13308:	b	13228 <__assert_fail@plt+0x236c>
   1330c:	push	{r4, r5, r6, r7, r8, lr}
   13310:	ldr	r6, [pc, #116]	; 1338c <__assert_fail@plt+0x24d0>
   13314:	ldr	r3, [r6, #4]
   13318:	ldr	r7, [r6]
   1331c:	cmp	r3, #1
   13320:	movgt	r5, r7
   13324:	movgt	r4, #1
   13328:	ble	13348 <__assert_fail@plt+0x248c>
   1332c:	ldr	r0, [r5, #12]
   13330:	bl	14b28 <__assert_fail@plt+0x3c6c>
   13334:	ldr	r3, [r6, #4]
   13338:	add	r4, r4, #1
   1333c:	cmp	r3, r4
   13340:	add	r5, r5, #8
   13344:	bgt	1332c <__assert_fail@plt+0x2470>
   13348:	ldr	r0, [r7, #4]
   1334c:	ldr	r4, [pc, #60]	; 13390 <__assert_fail@plt+0x24d4>
   13350:	cmp	r0, r4
   13354:	beq	13368 <__assert_fail@plt+0x24ac>
   13358:	bl	14b28 <__assert_fail@plt+0x3c6c>
   1335c:	mov	r3, #256	; 0x100
   13360:	str	r4, [r6, #12]
   13364:	str	r3, [r6, #8]
   13368:	ldr	r4, [pc, #36]	; 13394 <__assert_fail@plt+0x24d8>
   1336c:	cmp	r7, r4
   13370:	beq	13380 <__assert_fail@plt+0x24c4>
   13374:	mov	r0, r7
   13378:	bl	14b28 <__assert_fail@plt+0x3c6c>
   1337c:	str	r4, [r6]
   13380:	mov	r3, #1
   13384:	str	r3, [r6, #4]
   13388:	pop	{r4, r5, r6, r7, r8, pc}
   1338c:	andeq	r6, r2, ip, ror #1
   13390:	andeq	r6, r2, ip, asr r1
   13394:	strdeq	r6, [r2], -r4
   13398:	ldr	r3, [pc, #4]	; 133a4 <__assert_fail@plt+0x24e8>
   1339c:	mvn	r2, #0
   133a0:	b	12ee8 <__assert_fail@plt+0x202c>
   133a4:	andeq	r6, r2, ip, asr r2
   133a8:	ldr	r3, [pc]	; 133b0 <__assert_fail@plt+0x24f4>
   133ac:	b	12ee8 <__assert_fail@plt+0x202c>
   133b0:	andeq	r6, r2, ip, asr r2
   133b4:	mov	r1, r0
   133b8:	ldr	r3, [pc, #8]	; 133c8 <__assert_fail@plt+0x250c>
   133bc:	mvn	r2, #0
   133c0:	mov	r0, #0
   133c4:	b	12ee8 <__assert_fail@plt+0x202c>
   133c8:	andeq	r6, r2, ip, asr r2
   133cc:	mov	r2, r1
   133d0:	ldr	r3, [pc, #8]	; 133e0 <__assert_fail@plt+0x2524>
   133d4:	mov	r1, r0
   133d8:	mov	r0, #0
   133dc:	b	12ee8 <__assert_fail@plt+0x202c>
   133e0:	andeq	r6, r2, ip, asr r2
   133e4:	push	{r4, r5, lr}
   133e8:	sub	sp, sp, #52	; 0x34
   133ec:	mov	r5, r2
   133f0:	mov	r4, r0
   133f4:	mov	r0, sp
   133f8:	bl	11884 <__assert_fail@plt+0x9c8>
   133fc:	mov	r3, sp
   13400:	mov	r1, r5
   13404:	mov	r0, r4
   13408:	mvn	r2, #0
   1340c:	bl	12ee8 <__assert_fail@plt+0x202c>
   13410:	add	sp, sp, #52	; 0x34
   13414:	pop	{r4, r5, pc}
   13418:	push	{r4, r5, r6, lr}
   1341c:	sub	sp, sp, #48	; 0x30
   13420:	mov	r5, r2
   13424:	mov	r6, r3
   13428:	mov	r4, r0
   1342c:	mov	r0, sp
   13430:	bl	11884 <__assert_fail@plt+0x9c8>
   13434:	mov	r3, sp
   13438:	mov	r2, r6
   1343c:	mov	r1, r5
   13440:	mov	r0, r4
   13444:	bl	12ee8 <__assert_fail@plt+0x202c>
   13448:	add	sp, sp, #48	; 0x30
   1344c:	pop	{r4, r5, r6, pc}
   13450:	mov	r2, r1
   13454:	mov	r1, r0
   13458:	mov	r0, #0
   1345c:	b	133e4 <__assert_fail@plt+0x2528>
   13460:	mov	r3, r2
   13464:	mov	r2, r1
   13468:	mov	r1, r0
   1346c:	mov	r0, #0
   13470:	b	13418 <__assert_fail@plt+0x255c>
   13474:	push	{r4, r5, r6, r7, r8, lr}
   13478:	mov	r7, r0
   1347c:	ldr	lr, [pc, #100]	; 134e8 <__assert_fail@plt+0x262c>
   13480:	mov	r8, r1
   13484:	mov	r4, r2
   13488:	ldm	lr!, {r0, r1, r2, r3}
   1348c:	sub	sp, sp, #48	; 0x30
   13490:	mov	ip, sp
   13494:	lsr	r5, r4, #5
   13498:	stmia	ip!, {r0, r1, r2, r3}
   1349c:	add	r6, sp, #8
   134a0:	ldm	lr!, {r0, r1, r2, r3}
   134a4:	and	r4, r4, #31
   134a8:	stmia	ip!, {r0, r1, r2, r3}
   134ac:	ldm	lr, {r0, r1, r2, r3}
   134b0:	stm	ip, {r0, r1, r2, r3}
   134b4:	mov	r2, r8
   134b8:	ldr	lr, [r6, r5, lsl #2]
   134bc:	mov	r1, r7
   134c0:	mov	r3, sp
   134c4:	lsr	ip, lr, r4
   134c8:	eor	ip, ip, #1
   134cc:	and	ip, ip, #1
   134d0:	mov	r0, #0
   134d4:	eor	r4, lr, ip, lsl r4
   134d8:	str	r4, [r6, r5, lsl #2]
   134dc:	bl	12ee8 <__assert_fail@plt+0x202c>
   134e0:	add	sp, sp, #48	; 0x30
   134e4:	pop	{r4, r5, r6, r7, r8, pc}
   134e8:	andeq	r6, r2, ip, asr r2
   134ec:	mov	r2, r1
   134f0:	mvn	r1, #0
   134f4:	b	13474 <__assert_fail@plt+0x25b8>
   134f8:	mov	r2, #58	; 0x3a
   134fc:	mvn	r1, #0
   13500:	b	13474 <__assert_fail@plt+0x25b8>
   13504:	mov	r2, #58	; 0x3a
   13508:	b	13474 <__assert_fail@plt+0x25b8>
   1350c:	push	{r4, r5, r6, r7, lr}
   13510:	sub	sp, sp, #100	; 0x64
   13514:	mov	r6, r0
   13518:	mov	r0, sp
   1351c:	mov	r7, r2
   13520:	bl	11884 <__assert_fail@plt+0x9c8>
   13524:	mov	ip, sp
   13528:	add	lr, sp, #48	; 0x30
   1352c:	ldm	ip!, {r0, r1, r2, r3}
   13530:	stmia	lr!, {r0, r1, r2, r3}
   13534:	ldm	ip!, {r0, r1, r2, r3}
   13538:	ldr	r5, [sp, #60]	; 0x3c
   1353c:	stmia	lr!, {r0, r1, r2, r3}
   13540:	mvn	r4, r5
   13544:	ldm	ip, {r0, r1, r2, r3}
   13548:	and	ip, r4, #67108864	; 0x4000000
   1354c:	eor	ip, ip, r5
   13550:	str	ip, [sp, #60]	; 0x3c
   13554:	stm	lr, {r0, r1, r2, r3}
   13558:	mov	r1, r7
   1355c:	mov	r0, r6
   13560:	add	r3, sp, #48	; 0x30
   13564:	mvn	r2, #0
   13568:	bl	12ee8 <__assert_fail@plt+0x202c>
   1356c:	add	sp, sp, #100	; 0x64
   13570:	pop	{r4, r5, r6, r7, pc}
   13574:	push	{r4, r5, r6, r7, r8, lr}
   13578:	mov	r5, r1
   1357c:	ldr	lr, [pc, #100]	; 135e8 <__assert_fail@plt+0x272c>
   13580:	mov	r4, r2
   13584:	mov	r7, r0
   13588:	mov	r8, r3
   1358c:	ldm	lr!, {r0, r1, r2, r3}
   13590:	sub	sp, sp, #48	; 0x30
   13594:	mov	ip, sp
   13598:	mov	r6, #10
   1359c:	stmia	ip!, {r0, r1, r2, r3}
   135a0:	cmp	r4, #0
   135a4:	cmpne	r5, #0
   135a8:	ldm	lr!, {r0, r1, r2, r3}
   135ac:	str	r6, [sp]
   135b0:	stmia	ip!, {r0, r1, r2, r3}
   135b4:	ldm	lr, {r0, r1, r2, r3}
   135b8:	stm	ip, {r0, r1, r2, r3}
   135bc:	beq	135e4 <__assert_fail@plt+0x2728>
   135c0:	mov	r3, sp
   135c4:	mov	r1, r8
   135c8:	mov	r0, r7
   135cc:	ldr	r2, [sp, #72]	; 0x48
   135d0:	str	r5, [sp, #40]	; 0x28
   135d4:	str	r4, [sp, #44]	; 0x2c
   135d8:	bl	12ee8 <__assert_fail@plt+0x202c>
   135dc:	add	sp, sp, #48	; 0x30
   135e0:	pop	{r4, r5, r6, r7, r8, pc}
   135e4:	bl	10eb0 <abort@plt>
   135e8:	andeq	r6, r2, ip, asr r2
   135ec:	push	{lr}		; (str lr, [sp, #-4]!)
   135f0:	sub	sp, sp, #12
   135f4:	mvn	ip, #0
   135f8:	str	ip, [sp]
   135fc:	bl	13574 <__assert_fail@plt+0x26b8>
   13600:	add	sp, sp, #12
   13604:	pop	{pc}		; (ldr pc, [sp], #4)
   13608:	push	{lr}		; (str lr, [sp, #-4]!)
   1360c:	sub	sp, sp, #12
   13610:	mvn	ip, #0
   13614:	mov	r3, r2
   13618:	str	ip, [sp]
   1361c:	mov	r2, r1
   13620:	mov	r1, r0
   13624:	mov	r0, #0
   13628:	bl	13574 <__assert_fail@plt+0x26b8>
   1362c:	add	sp, sp, #12
   13630:	pop	{pc}		; (ldr pc, [sp], #4)
   13634:	push	{lr}		; (str lr, [sp, #-4]!)
   13638:	sub	sp, sp, #12
   1363c:	str	r3, [sp]
   13640:	mov	r3, r2
   13644:	mov	r2, r1
   13648:	mov	r1, r0
   1364c:	mov	r0, #0
   13650:	bl	13574 <__assert_fail@plt+0x26b8>
   13654:	add	sp, sp, #12
   13658:	pop	{pc}		; (ldr pc, [sp], #4)
   1365c:	ldr	r3, [pc]	; 13664 <__assert_fail@plt+0x27a8>
   13660:	b	12ee8 <__assert_fail@plt+0x202c>
   13664:	strdeq	r6, [r2], -ip
   13668:	mov	r2, r1
   1366c:	ldr	r3, [pc, #8]	; 1367c <__assert_fail@plt+0x27c0>
   13670:	mov	r1, r0
   13674:	mov	r0, #0
   13678:	b	12ee8 <__assert_fail@plt+0x202c>
   1367c:	strdeq	r6, [r2], -ip
   13680:	ldr	r3, [pc, #4]	; 1368c <__assert_fail@plt+0x27d0>
   13684:	mvn	r2, #0
   13688:	b	12ee8 <__assert_fail@plt+0x202c>
   1368c:	strdeq	r6, [r2], -ip
   13690:	mov	r1, r0
   13694:	ldr	r3, [pc, #8]	; 136a4 <__assert_fail@plt+0x27e8>
   13698:	mvn	r2, #0
   1369c:	mov	r0, #0
   136a0:	b	12ee8 <__assert_fail@plt+0x202c>
   136a4:	strdeq	r6, [r2], -ip
   136a8:	push	{r4, r5, r6, lr}
   136ac:	sub	sp, sp, #32
   136b0:	cmp	r1, #0
   136b4:	mov	r4, r0
   136b8:	ldr	r5, [sp, #48]	; 0x30
   136bc:	ldr	r6, [sp, #52]	; 0x34
   136c0:	beq	139d8 <__assert_fail@plt+0x2b1c>
   136c4:	stm	sp, {r2, r3}
   136c8:	mov	r3, r1
   136cc:	ldr	r2, [pc, #808]	; 139fc <__assert_fail@plt+0x2b40>
   136d0:	mov	r1, #1
   136d4:	bl	10e44 <__fprintf_chk@plt>
   136d8:	mov	r2, #5
   136dc:	ldr	r1, [pc, #796]	; 13a00 <__assert_fail@plt+0x2b44>
   136e0:	mov	r0, #0
   136e4:	bl	10d00 <dcgettext@plt>
   136e8:	ldr	r3, [pc, #788]	; 13a04 <__assert_fail@plt+0x2b48>
   136ec:	ldr	r2, [pc, #788]	; 13a08 <__assert_fail@plt+0x2b4c>
   136f0:	str	r3, [sp]
   136f4:	mov	r1, #1
   136f8:	mov	r3, r0
   136fc:	mov	r0, r4
   13700:	bl	10e44 <__fprintf_chk@plt>
   13704:	mov	r1, r4
   13708:	mov	r0, #10
   1370c:	bl	10cf4 <fputc_unlocked@plt>
   13710:	mov	r2, #5
   13714:	ldr	r1, [pc, #752]	; 13a0c <__assert_fail@plt+0x2b50>
   13718:	mov	r0, #0
   1371c:	bl	10d00 <dcgettext@plt>
   13720:	mov	r1, #1
   13724:	ldr	r3, [pc, #740]	; 13a10 <__assert_fail@plt+0x2b54>
   13728:	mov	r2, r0
   1372c:	mov	r0, r4
   13730:	bl	10e44 <__fprintf_chk@plt>
   13734:	mov	r1, r4
   13738:	mov	r0, #10
   1373c:	bl	10cf4 <fputc_unlocked@plt>
   13740:	cmp	r6, #9
   13744:	ldrls	pc, [pc, r6, lsl #2]
   13748:	b	139f0 <__assert_fail@plt+0x2b34>
   1374c:	ldrdeq	r3, [r1], -r0
   13750:	ldrdeq	r3, [r1], -r8
   13754:	andeq	r3, r1, r4, lsl #16
   13758:	andeq	r3, r1, r8, lsr r8
   1375c:	andeq	r3, r1, r4, ror r8
   13760:			; <UNDEFINED> instruction: 0x000138b0
   13764:	andeq	r3, r1, ip, ror #17
   13768:	andeq	r3, r1, r0, lsr r9
   1376c:	andeq	r3, r1, r0, lsl #19
   13770:	andeq	r3, r1, r4, ror r7
   13774:	ldr	r1, [pc, #664]	; 13a14 <__assert_fail@plt+0x2b58>
   13778:	mov	r2, #5
   1377c:	mov	r0, #0
   13780:	bl	10d00 <dcgettext@plt>
   13784:	ldr	ip, [r5, #32]
   13788:	ldr	r1, [r5, #28]
   1378c:	ldr	r2, [r5, #24]
   13790:	ldr	r3, [r5]
   13794:	ldr	r6, [r5, #20]
   13798:	str	ip, [sp, #28]
   1379c:	ldr	lr, [r5, #16]
   137a0:	str	r1, [sp, #24]
   137a4:	ldr	ip, [r5, #12]
   137a8:	str	r2, [sp, #20]
   137ac:	ldr	r1, [r5, #8]
   137b0:	ldr	r2, [r5, #4]
   137b4:	str	r6, [sp, #16]
   137b8:	stmib	sp, {r1, ip, lr}
   137bc:	mov	r1, #1
   137c0:	str	r2, [sp]
   137c4:	mov	r2, r0
   137c8:	mov	r0, r4
   137cc:	bl	10e44 <__fprintf_chk@plt>
   137d0:	add	sp, sp, #32
   137d4:	pop	{r4, r5, r6, pc}
   137d8:	mov	r2, #5
   137dc:	ldr	r1, [pc, #564]	; 13a18 <__assert_fail@plt+0x2b5c>
   137e0:	mov	r0, #0
   137e4:	bl	10d00 <dcgettext@plt>
   137e8:	ldr	r3, [r5]
   137ec:	mov	r1, #1
   137f0:	mov	r2, r0
   137f4:	mov	r0, r4
   137f8:	add	sp, sp, #32
   137fc:	pop	{r4, r5, r6, lr}
   13800:	b	10e44 <__fprintf_chk@plt>
   13804:	mov	r2, #5
   13808:	ldr	r1, [pc, #524]	; 13a1c <__assert_fail@plt+0x2b60>
   1380c:	mov	r0, #0
   13810:	bl	10d00 <dcgettext@plt>
   13814:	ldr	r2, [r5, #4]
   13818:	ldr	r3, [r5]
   1381c:	mov	r1, #1
   13820:	str	r2, [sp, #48]	; 0x30
   13824:	mov	r2, r0
   13828:	mov	r0, r4
   1382c:	add	sp, sp, #32
   13830:	pop	{r4, r5, r6, lr}
   13834:	b	10e44 <__fprintf_chk@plt>
   13838:	mov	r2, #5
   1383c:	ldr	r1, [pc, #476]	; 13a20 <__assert_fail@plt+0x2b64>
   13840:	mov	r0, #0
   13844:	bl	10d00 <dcgettext@plt>
   13848:	ldr	r1, [r5, #8]
   1384c:	ldr	r2, [r5, #4]
   13850:	ldr	r3, [r5]
   13854:	str	r1, [sp, #52]	; 0x34
   13858:	str	r2, [sp, #48]	; 0x30
   1385c:	mov	r1, #1
   13860:	mov	r2, r0
   13864:	mov	r0, r4
   13868:	add	sp, sp, #32
   1386c:	pop	{r4, r5, r6, lr}
   13870:	b	10e44 <__fprintf_chk@plt>
   13874:	mov	r2, #5
   13878:	ldr	r1, [pc, #420]	; 13a24 <__assert_fail@plt+0x2b68>
   1387c:	mov	r0, #0
   13880:	bl	10d00 <dcgettext@plt>
   13884:	ldr	r1, [r5, #8]
   13888:	ldr	ip, [r5, #12]
   1388c:	ldr	r2, [r5, #4]
   13890:	ldr	r3, [r5]
   13894:	stmib	sp, {r1, ip}
   13898:	str	r2, [sp]
   1389c:	mov	r1, #1
   138a0:	mov	r2, r0
   138a4:	mov	r0, r4
   138a8:	bl	10e44 <__fprintf_chk@plt>
   138ac:	b	137d0 <__assert_fail@plt+0x2914>
   138b0:	mov	r2, #5
   138b4:	ldr	r1, [pc, #364]	; 13a28 <__assert_fail@plt+0x2b6c>
   138b8:	mov	r0, #0
   138bc:	bl	10d00 <dcgettext@plt>
   138c0:	add	r1, r5, #8
   138c4:	ldr	r2, [r5, #4]
   138c8:	ldm	r1, {r1, ip, lr}
   138cc:	ldr	r3, [r5]
   138d0:	str	r2, [sp]
   138d4:	stmib	sp, {r1, ip, lr}
   138d8:	mov	r1, #1
   138dc:	mov	r2, r0
   138e0:	mov	r0, r4
   138e4:	bl	10e44 <__fprintf_chk@plt>
   138e8:	b	137d0 <__assert_fail@plt+0x2914>
   138ec:	mov	r2, #5
   138f0:	ldr	r1, [pc, #308]	; 13a2c <__assert_fail@plt+0x2b70>
   138f4:	mov	r0, #0
   138f8:	bl	10d00 <dcgettext@plt>
   138fc:	add	r1, r5, #8
   13900:	ldr	r2, [r5, #4]
   13904:	ldm	r1, {r1, ip, lr}
   13908:	ldr	r6, [r5, #20]
   1390c:	ldr	r3, [r5]
   13910:	stmib	sp, {r1, ip, lr}
   13914:	mov	r1, #1
   13918:	str	r2, [sp]
   1391c:	str	r6, [sp, #16]
   13920:	mov	r2, r0
   13924:	mov	r0, r4
   13928:	bl	10e44 <__fprintf_chk@plt>
   1392c:	b	137d0 <__assert_fail@plt+0x2914>
   13930:	mov	r2, #5
   13934:	ldr	r1, [pc, #244]	; 13a30 <__assert_fail@plt+0x2b74>
   13938:	mov	r0, #0
   1393c:	bl	10d00 <dcgettext@plt>
   13940:	ldr	r2, [r5, #24]
   13944:	ldr	r3, [r5]
   13948:	ldr	r6, [r5, #20]
   1394c:	ldr	lr, [r5, #16]
   13950:	ldr	ip, [r5, #12]
   13954:	str	r2, [sp, #20]
   13958:	ldr	r1, [r5, #8]
   1395c:	ldr	r2, [r5, #4]
   13960:	str	r6, [sp, #16]
   13964:	stmib	sp, {r1, ip, lr}
   13968:	mov	r1, #1
   1396c:	str	r2, [sp]
   13970:	mov	r2, r0
   13974:	mov	r0, r4
   13978:	bl	10e44 <__fprintf_chk@plt>
   1397c:	b	137d0 <__assert_fail@plt+0x2914>
   13980:	mov	r2, #5
   13984:	ldr	r1, [pc, #168]	; 13a34 <__assert_fail@plt+0x2b78>
   13988:	mov	r0, #0
   1398c:	bl	10d00 <dcgettext@plt>
   13990:	ldr	r1, [r5, #28]
   13994:	ldr	r2, [r5, #24]
   13998:	ldr	r3, [r5]
   1399c:	ldr	r6, [r5, #20]
   139a0:	ldr	lr, [r5, #16]
   139a4:	str	r1, [sp, #24]
   139a8:	ldr	ip, [r5, #12]
   139ac:	str	r2, [sp, #20]
   139b0:	ldr	r1, [r5, #8]
   139b4:	ldr	r2, [r5, #4]
   139b8:	str	r6, [sp, #16]
   139bc:	stmib	sp, {r1, ip, lr}
   139c0:	mov	r1, #1
   139c4:	str	r2, [sp]
   139c8:	mov	r2, r0
   139cc:	mov	r0, r4
   139d0:	bl	10e44 <__fprintf_chk@plt>
   139d4:	b	137d0 <__assert_fail@plt+0x2914>
   139d8:	str	r3, [sp]
   139dc:	mov	r1, #1
   139e0:	mov	r3, r2
   139e4:	ldr	r2, [pc, #76]	; 13a38 <__assert_fail@plt+0x2b7c>
   139e8:	bl	10e44 <__fprintf_chk@plt>
   139ec:	b	136d8 <__assert_fail@plt+0x281c>
   139f0:	mov	r2, #5
   139f4:	ldr	r1, [pc, #64]	; 13a3c <__assert_fail@plt+0x2b80>
   139f8:	b	1377c <__assert_fail@plt+0x28c0>
   139fc:	andeq	r5, r1, ip, lsl #19
   13a00:	andeq	r5, r1, r0, lsr #19
   13a04:	andeq	r0, r0, r6, ror #15
   13a08:	andeq	r5, r1, r8, ror ip
   13a0c:	andeq	r5, r1, r4, lsr #19
   13a10:	andeq	r5, r1, r0, asr sl
   13a14:	andeq	r5, r1, r0, lsl #23
   13a18:	andeq	r5, r1, r4, ror sl
   13a1c:	andeq	r5, r1, r4, lsl #21
   13a20:	muleq	r1, ip, sl
   13a24:			; <UNDEFINED> instruction: 0x00015ab8
   13a28:	ldrdeq	r5, [r1], -r8
   13a2c:	strdeq	r5, [r1], -ip
   13a30:	andeq	r5, r1, r4, lsr #22
   13a34:	andeq	r5, r1, r0, asr fp
   13a38:	muleq	r1, r8, r9
   13a3c:			; <UNDEFINED> instruction: 0x00015bb4
   13a40:	push	{r4, r5, lr}
   13a44:	sub	sp, sp, #12
   13a48:	ldr	r5, [sp, #24]
   13a4c:	ldr	ip, [r5]
   13a50:	cmp	ip, #0
   13a54:	beq	13a70 <__assert_fail@plt+0x2bb4>
   13a58:	mov	lr, r5
   13a5c:	mov	ip, #0
   13a60:	ldr	r4, [lr, #4]!
   13a64:	add	ip, ip, #1
   13a68:	cmp	r4, #0
   13a6c:	bne	13a60 <__assert_fail@plt+0x2ba4>
   13a70:	stm	sp, {r5, ip}
   13a74:	bl	136a8 <__assert_fail@plt+0x27ec>
   13a78:	add	sp, sp, #12
   13a7c:	pop	{r4, r5, pc}
   13a80:	push	{r4, r5, lr}
   13a84:	sub	sp, sp, #52	; 0x34
   13a88:	add	r5, sp, #4
   13a8c:	ldr	r4, [sp, #64]	; 0x40
   13a90:	mov	ip, #0
   13a94:	sub	r4, r4, #4
   13a98:	ldr	lr, [r4, #4]!
   13a9c:	cmp	lr, #0
   13aa0:	str	lr, [r5, #4]!
   13aa4:	beq	13ab4 <__assert_fail@plt+0x2bf8>
   13aa8:	add	ip, ip, #1
   13aac:	cmp	ip, #10
   13ab0:	bne	13a98 <__assert_fail@plt+0x2bdc>
   13ab4:	add	lr, sp, #8
   13ab8:	str	ip, [sp, #4]
   13abc:	str	lr, [sp]
   13ac0:	bl	136a8 <__assert_fail@plt+0x27ec>
   13ac4:	add	sp, sp, #52	; 0x34
   13ac8:	pop	{r4, r5, pc}
   13acc:	push	{r3}		; (str r3, [sp, #-4]!)
   13ad0:	push	{r4, lr}
   13ad4:	sub	sp, sp, #60	; 0x3c
   13ad8:	add	lr, sp, #56	; 0x38
   13adc:	add	r3, sp, #72	; 0x48
   13ae0:	str	r3, [lr, #-44]!	; 0xffffffd4
   13ae4:	add	r4, sp, #68	; 0x44
   13ae8:	mov	r3, #0
   13aec:	ldr	ip, [r4, #4]!
   13af0:	cmp	ip, #0
   13af4:	str	ip, [lr, #4]!
   13af8:	beq	13b08 <__assert_fail@plt+0x2c4c>
   13afc:	add	r3, r3, #1
   13b00:	cmp	r3, #10
   13b04:	bne	13aec <__assert_fail@plt+0x2c30>
   13b08:	add	ip, sp, #16
   13b0c:	str	r3, [sp, #4]
   13b10:	str	ip, [sp]
   13b14:	ldr	r3, [sp, #68]	; 0x44
   13b18:	bl	136a8 <__assert_fail@plt+0x27ec>
   13b1c:	add	sp, sp, #60	; 0x3c
   13b20:	pop	{r4, lr}
   13b24:	add	sp, sp, #4
   13b28:	bx	lr
   13b2c:	ldr	r3, [pc, #116]	; 13ba8 <__assert_fail@plt+0x2cec>
   13b30:	push	{r4, lr}
   13b34:	mov	r0, #10
   13b38:	ldr	r1, [r3]
   13b3c:	bl	10cf4 <fputc_unlocked@plt>
   13b40:	mov	r2, #5
   13b44:	ldr	r1, [pc, #96]	; 13bac <__assert_fail@plt+0x2cf0>
   13b48:	mov	r0, #0
   13b4c:	bl	10d00 <dcgettext@plt>
   13b50:	ldr	r2, [pc, #88]	; 13bb0 <__assert_fail@plt+0x2cf4>
   13b54:	mov	r1, r0
   13b58:	mov	r0, #1
   13b5c:	bl	10e2c <__printf_chk@plt>
   13b60:	mov	r2, #5
   13b64:	ldr	r1, [pc, #72]	; 13bb4 <__assert_fail@plt+0x2cf8>
   13b68:	mov	r0, #0
   13b6c:	bl	10d00 <dcgettext@plt>
   13b70:	ldr	r3, [pc, #64]	; 13bb8 <__assert_fail@plt+0x2cfc>
   13b74:	ldr	r2, [pc, #64]	; 13bbc <__assert_fail@plt+0x2d00>
   13b78:	mov	r1, r0
   13b7c:	mov	r0, #1
   13b80:	bl	10e2c <__printf_chk@plt>
   13b84:	mov	r2, #5
   13b88:	ldr	r1, [pc, #48]	; 13bc0 <__assert_fail@plt+0x2d04>
   13b8c:	mov	r0, #0
   13b90:	bl	10d00 <dcgettext@plt>
   13b94:	ldr	r2, [pc, #40]	; 13bc4 <__assert_fail@plt+0x2d08>
   13b98:	pop	{r4, lr}
   13b9c:	mov	r1, r0
   13ba0:	mov	r0, #1
   13ba4:	b	10e2c <__printf_chk@plt>
   13ba8:	andeq	r6, r2, r4, asr #2
   13bac:	strdeq	r5, [r1], -r0
   13bb0:	andeq	r5, r1, r4, lsl #24
   13bb4:	andeq	r5, r1, ip, lsl ip
   13bb8:	andeq	r5, r1, r8, ror r6
   13bbc:	andeq	r5, r1, r0, lsr #13
   13bc0:	andeq	r5, r1, r0, lsr ip
   13bc4:	andeq	r5, r1, r8, asr ip
   13bc8:	push	{r4, lr}
   13bcc:	bl	14924 <__assert_fail@plt+0x3a68>
   13bd0:	cmp	r0, #0
   13bd4:	popne	{r4, pc}
   13bd8:	bl	14110 <__assert_fail@plt+0x3254>
   13bdc:	push	{r4, lr}
   13be0:	bl	14924 <__assert_fail@plt+0x3a68>
   13be4:	cmp	r0, #0
   13be8:	popne	{r4, pc}
   13bec:	bl	14110 <__assert_fail@plt+0x3254>
   13bf0:	push	{r4, lr}
   13bf4:	bl	14924 <__assert_fail@plt+0x3a68>
   13bf8:	cmp	r0, #0
   13bfc:	popne	{r4, pc}
   13c00:	bl	14110 <__assert_fail@plt+0x3254>
   13c04:	push	{r4, r5, r6, lr}
   13c08:	mov	r5, r0
   13c0c:	mov	r4, r1
   13c10:	bl	14950 <__assert_fail@plt+0x3a94>
   13c14:	cmp	r0, #0
   13c18:	popne	{r4, r5, r6, pc}
   13c1c:	adds	r4, r4, #0
   13c20:	movne	r4, #1
   13c24:	cmp	r5, #0
   13c28:	orreq	r4, r4, #1
   13c2c:	cmp	r4, #0
   13c30:	popeq	{r4, r5, r6, pc}
   13c34:	bl	14110 <__assert_fail@plt+0x3254>
   13c38:	push	{r4, lr}
   13c3c:	cmp	r1, #0
   13c40:	orreq	r1, r1, #1
   13c44:	bl	14950 <__assert_fail@plt+0x3a94>
   13c48:	cmp	r0, #0
   13c4c:	popne	{r4, pc}
   13c50:	bl	14110 <__assert_fail@plt+0x3254>
   13c54:	push	{r4, r5, r6, lr}
   13c58:	mov	r6, r0
   13c5c:	mov	r5, r1
   13c60:	mov	r4, r2
   13c64:	bl	14ca8 <__assert_fail@plt+0x3dec>
   13c68:	cmp	r0, #0
   13c6c:	popne	{r4, r5, r6, pc}
   13c70:	cmp	r6, #0
   13c74:	beq	13c84 <__assert_fail@plt+0x2dc8>
   13c78:	cmp	r5, #0
   13c7c:	cmpne	r4, #0
   13c80:	popeq	{r4, r5, r6, pc}
   13c84:	bl	14110 <__assert_fail@plt+0x3254>
   13c88:	b	13c54 <__assert_fail@plt+0x2d98>
   13c8c:	cmp	r2, #0
   13c90:	cmpne	r1, #0
   13c94:	moveq	r2, #1
   13c98:	moveq	r1, r2
   13c9c:	push	{r4, lr}
   13ca0:	bl	14ca8 <__assert_fail@plt+0x3dec>
   13ca4:	cmp	r0, #0
   13ca8:	popne	{r4, pc}
   13cac:	bl	14110 <__assert_fail@plt+0x3254>
   13cb0:	mov	r2, r1
   13cb4:	mov	r1, r0
   13cb8:	mov	r0, #0
   13cbc:	b	13c54 <__assert_fail@plt+0x2d98>
   13cc0:	mov	r2, r1
   13cc4:	mov	r1, r0
   13cc8:	mov	r0, #0
   13ccc:	b	13c8c <__assert_fail@plt+0x2dd0>
   13cd0:	push	{r4, r5, r6, lr}
   13cd4:	subs	r6, r0, #0
   13cd8:	sub	sp, sp, #8
   13cdc:	mov	r5, r1
   13ce0:	ldr	r4, [r1]
   13ce4:	beq	13d20 <__assert_fail@plt+0x2e64>
   13ce8:	lsr	r1, r4, #1
   13cec:	add	r3, r1, #1
   13cf0:	mvn	r3, r3
   13cf4:	cmp	r4, r3
   13cf8:	bhi	13d1c <__assert_fail@plt+0x2e60>
   13cfc:	add	r4, r4, #1
   13d00:	add	r4, r4, r1
   13d04:	mov	r0, r6
   13d08:	mov	r1, r4
   13d0c:	bl	13c54 <__assert_fail@plt+0x2d98>
   13d10:	str	r4, [r5]
   13d14:	add	sp, sp, #8
   13d18:	pop	{r4, r5, r6, pc}
   13d1c:	bl	14110 <__assert_fail@plt+0x3254>
   13d20:	cmp	r4, #0
   13d24:	bne	13d04 <__assert_fail@plt+0x2e48>
   13d28:	mov	r1, r2
   13d2c:	mov	r0, #64	; 0x40
   13d30:	str	r2, [sp, #4]
   13d34:	bl	14de8 <__assert_fail@plt+0x3f2c>
   13d38:	ldr	r2, [sp, #4]
   13d3c:	cmp	r0, #0
   13d40:	movne	r4, r0
   13d44:	addeq	r4, r0, #1
   13d48:	b	13d04 <__assert_fail@plt+0x2e48>
   13d4c:	mov	r2, #1
   13d50:	b	13cd0 <__assert_fail@plt+0x2e14>
   13d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d58:	sub	sp, sp, #12
   13d5c:	ldr	r6, [r1]
   13d60:	mov	sl, r1
   13d64:	mov	r9, r0
   13d68:	asrs	r4, r6, #1
   13d6c:	mov	r5, r2
   13d70:	mov	fp, r3
   13d74:	ldr	r7, [sp, #48]	; 0x30
   13d78:	bmi	13ee4 <__assert_fail@plt+0x3028>
   13d7c:	mvn	r3, #-2147483648	; 0x80000000
   13d80:	sub	r3, r3, r4
   13d84:	cmp	r6, r3
   13d88:	movle	r3, #0
   13d8c:	movgt	r3, #1
   13d90:	mvn	r8, fp
   13d94:	cmp	r3, #0
   13d98:	addeq	r4, r4, r6
   13d9c:	mvnne	r4, #-2147483648	; 0x80000000
   13da0:	lsr	r8, r8, #31
   13da4:	cmp	fp, r4
   13da8:	movge	r3, #0
   13dac:	andlt	r3, r8, #1
   13db0:	cmp	r3, #0
   13db4:	beq	13e9c <__assert_fail@plt+0x2fe0>
   13db8:	cmp	r7, #0
   13dbc:	blt	13f6c <__assert_fail@plt+0x30b0>
   13dc0:	bne	13f64 <__assert_fail@plt+0x30a8>
   13dc4:	mov	r2, #64	; 0x40
   13dc8:	mov	r1, r7
   13dcc:	mov	r0, r2
   13dd0:	str	r2, [sp, #4]
   13dd4:	bl	14ff4 <__assert_fail@plt+0x4138>
   13dd8:	ldr	r2, [sp, #4]
   13ddc:	mov	r1, r7
   13de0:	mov	r4, r0
   13de4:	mov	r0, r2
   13de8:	bl	15214 <__assert_fail@plt+0x4358>
   13dec:	ldr	r2, [sp, #4]
   13df0:	sub	r1, r2, r1
   13df4:	cmp	r9, #0
   13df8:	sub	r3, r4, r6
   13dfc:	streq	r9, [sl]
   13e00:	cmp	r3, r5
   13e04:	bge	13e88 <__assert_fail@plt+0x2fcc>
   13e08:	cmp	r5, #0
   13e0c:	blt	13ef8 <__assert_fail@plt+0x303c>
   13e10:	cmp	r6, #0
   13e14:	blt	13e34 <__assert_fail@plt+0x2f78>
   13e18:	mvn	r3, #-2147483648	; 0x80000000
   13e1c:	sub	r3, r3, r5
   13e20:	cmp	r6, r3
   13e24:	movle	r3, #0
   13e28:	movgt	r3, #1
   13e2c:	cmp	r3, #0
   13e30:	bne	13ff4 <__assert_fail@plt+0x3138>
   13e34:	add	r5, r6, r5
   13e38:	cmp	fp, r5
   13e3c:	movge	r8, #0
   13e40:	andlt	r8, r8, #1
   13e44:	cmp	r8, #0
   13e48:	mov	r4, r5
   13e4c:	bne	13ff4 <__assert_fail@plt+0x3138>
   13e50:	cmp	r7, #0
   13e54:	blt	13f0c <__assert_fail@plt+0x3050>
   13e58:	beq	13e84 <__assert_fail@plt+0x2fc8>
   13e5c:	cmp	r5, #0
   13e60:	blt	13fb4 <__assert_fail@plt+0x30f8>
   13e64:	mov	r1, r7
   13e68:	mvn	r0, #-2147483648	; 0x80000000
   13e6c:	bl	14ff4 <__assert_fail@plt+0x4138>
   13e70:	cmp	r5, r0
   13e74:	movle	r0, #0
   13e78:	movgt	r0, #1
   13e7c:	cmp	r0, #0
   13e80:	bne	13ff4 <__assert_fail@plt+0x3138>
   13e84:	mul	r1, r5, r7
   13e88:	mov	r0, r9
   13e8c:	bl	13c04 <__assert_fail@plt+0x2d48>
   13e90:	str	r4, [sl]
   13e94:	add	sp, sp, #12
   13e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e9c:	cmp	r7, #0
   13ea0:	blt	13f38 <__assert_fail@plt+0x307c>
   13ea4:	beq	13dc4 <__assert_fail@plt+0x2f08>
   13ea8:	cmp	r4, #0
   13eac:	blt	13f74 <__assert_fail@plt+0x30b8>
   13eb0:	mov	r1, r7
   13eb4:	mvn	r0, #-2147483648	; 0x80000000
   13eb8:	bl	14ff4 <__assert_fail@plt+0x4138>
   13ebc:	cmp	r0, r4
   13ec0:	movge	r0, #0
   13ec4:	movlt	r0, #1
   13ec8:	cmp	r0, #0
   13ecc:	mvnne	r2, #-2147483648	; 0x80000000
   13ed0:	bne	13dc8 <__assert_fail@plt+0x2f0c>
   13ed4:	mul	r1, r7, r4
   13ed8:	cmp	r1, #63	; 0x3f
   13edc:	bgt	13df4 <__assert_fail@plt+0x2f38>
   13ee0:	b	13dc4 <__assert_fail@plt+0x2f08>
   13ee4:	rsb	r3, r4, #-2147483648	; 0x80000000
   13ee8:	cmp	r6, r3
   13eec:	movge	r3, #0
   13ef0:	movlt	r3, #1
   13ef4:	b	13d90 <__assert_fail@plt+0x2ed4>
   13ef8:	rsb	r3, r5, #-2147483648	; 0x80000000
   13efc:	cmp	r6, r3
   13f00:	movge	r3, #0
   13f04:	movlt	r3, #1
   13f08:	b	13e2c <__assert_fail@plt+0x2f70>
   13f0c:	cmp	r5, #0
   13f10:	blt	13f98 <__assert_fail@plt+0x30dc>
   13f14:	cmn	r7, #1
   13f18:	beq	13e84 <__assert_fail@plt+0x2fc8>
   13f1c:	mov	r1, r7
   13f20:	mov	r0, #-2147483648	; 0x80000000
   13f24:	bl	14ff4 <__assert_fail@plt+0x4138>
   13f28:	cmp	r5, r0
   13f2c:	movle	r0, #0
   13f30:	movgt	r0, #1
   13f34:	b	13e7c <__assert_fail@plt+0x2fc0>
   13f38:	cmp	r4, #0
   13f3c:	blt	13fd8 <__assert_fail@plt+0x311c>
   13f40:	cmn	r7, #1
   13f44:	beq	13ed4 <__assert_fail@plt+0x3018>
   13f48:	mov	r1, r7
   13f4c:	mov	r0, #-2147483648	; 0x80000000
   13f50:	bl	14ff4 <__assert_fail@plt+0x4138>
   13f54:	cmp	r0, r4
   13f58:	movge	r0, #0
   13f5c:	movlt	r0, #1
   13f60:	b	13ec8 <__assert_fail@plt+0x300c>
   13f64:	mov	r4, fp
   13f68:	b	13eb0 <__assert_fail@plt+0x2ff4>
   13f6c:	mov	r4, fp
   13f70:	b	13f40 <__assert_fail@plt+0x3084>
   13f74:	cmn	r4, #1
   13f78:	beq	13ed4 <__assert_fail@plt+0x3018>
   13f7c:	mov	r1, r4
   13f80:	mov	r0, #-2147483648	; 0x80000000
   13f84:	bl	14ff4 <__assert_fail@plt+0x4138>
   13f88:	cmp	r7, r0
   13f8c:	movle	r0, #0
   13f90:	movgt	r0, #1
   13f94:	b	13ec8 <__assert_fail@plt+0x300c>
   13f98:	mov	r1, r7
   13f9c:	mvn	r0, #-2147483648	; 0x80000000
   13fa0:	bl	14ff4 <__assert_fail@plt+0x4138>
   13fa4:	cmp	r5, r0
   13fa8:	movge	r0, #0
   13fac:	movlt	r0, #1
   13fb0:	b	13e7c <__assert_fail@plt+0x2fc0>
   13fb4:	cmn	r5, #1
   13fb8:	beq	13e84 <__assert_fail@plt+0x2fc8>
   13fbc:	mov	r1, r5
   13fc0:	mov	r0, #-2147483648	; 0x80000000
   13fc4:	bl	14ff4 <__assert_fail@plt+0x4138>
   13fc8:	cmp	r7, r0
   13fcc:	movle	r0, #0
   13fd0:	movgt	r0, #1
   13fd4:	b	13e7c <__assert_fail@plt+0x2fc0>
   13fd8:	mov	r1, r7
   13fdc:	mvn	r0, #-2147483648	; 0x80000000
   13fe0:	bl	14ff4 <__assert_fail@plt+0x4138>
   13fe4:	cmp	r0, r4
   13fe8:	movle	r0, #0
   13fec:	movgt	r0, #1
   13ff0:	b	13ec8 <__assert_fail@plt+0x300c>
   13ff4:	bl	14110 <__assert_fail@plt+0x3254>
   13ff8:	push	{r4, lr}
   13ffc:	mov	r1, #1
   14000:	bl	148dc <__assert_fail@plt+0x3a20>
   14004:	cmp	r0, #0
   14008:	popne	{r4, pc}
   1400c:	bl	14110 <__assert_fail@plt+0x3254>
   14010:	push	{r4, lr}
   14014:	mov	r1, #1
   14018:	bl	148dc <__assert_fail@plt+0x3a20>
   1401c:	cmp	r0, #0
   14020:	popne	{r4, pc}
   14024:	bl	14110 <__assert_fail@plt+0x3254>
   14028:	push	{r4, lr}
   1402c:	bl	148dc <__assert_fail@plt+0x3a20>
   14030:	cmp	r0, #0
   14034:	popne	{r4, pc}
   14038:	bl	14110 <__assert_fail@plt+0x3254>
   1403c:	push	{r4, lr}
   14040:	bl	148dc <__assert_fail@plt+0x3a20>
   14044:	cmp	r0, #0
   14048:	popne	{r4, pc}
   1404c:	bl	14110 <__assert_fail@plt+0x3254>
   14050:	push	{r4, r5, r6, lr}
   14054:	mov	r6, r0
   14058:	mov	r0, r1
   1405c:	mov	r4, r1
   14060:	bl	14924 <__assert_fail@plt+0x3a68>
   14064:	subs	r5, r0, #0
   14068:	beq	14080 <__assert_fail@plt+0x31c4>
   1406c:	mov	r2, r4
   14070:	mov	r1, r6
   14074:	bl	10cb8 <memcpy@plt>
   14078:	mov	r0, r5
   1407c:	pop	{r4, r5, r6, pc}
   14080:	bl	14110 <__assert_fail@plt+0x3254>
   14084:	push	{r4, r5, r6, lr}
   14088:	mov	r6, r0
   1408c:	mov	r0, r1
   14090:	mov	r4, r1
   14094:	bl	14924 <__assert_fail@plt+0x3a68>
   14098:	subs	r5, r0, #0
   1409c:	beq	140b4 <__assert_fail@plt+0x31f8>
   140a0:	mov	r2, r4
   140a4:	mov	r1, r6
   140a8:	bl	10cb8 <memcpy@plt>
   140ac:	mov	r0, r5
   140b0:	pop	{r4, r5, r6, pc}
   140b4:	bl	14110 <__assert_fail@plt+0x3254>
   140b8:	push	{r4, r5, r6, lr}
   140bc:	mov	r6, r0
   140c0:	add	r0, r1, #1
   140c4:	mov	r4, r1
   140c8:	bl	14924 <__assert_fail@plt+0x3a68>
   140cc:	subs	r5, r0, #0
   140d0:	beq	140f0 <__assert_fail@plt+0x3234>
   140d4:	mov	r3, #0
   140d8:	mov	r1, r6
   140dc:	strb	r3, [r5, r4]
   140e0:	mov	r2, r4
   140e4:	bl	10cb8 <memcpy@plt>
   140e8:	mov	r0, r5
   140ec:	pop	{r4, r5, r6, pc}
   140f0:	bl	14110 <__assert_fail@plt+0x3254>
   140f4:	push	{r4, lr}
   140f8:	mov	r4, r0
   140fc:	bl	10df0 <strlen@plt>
   14100:	add	r1, r0, #1
   14104:	mov	r0, r4
   14108:	pop	{r4, lr}
   1410c:	b	14050 <__assert_fail@plt+0x3194>
   14110:	ldr	r3, [pc, #44]	; 14144 <__assert_fail@plt+0x3288>
   14114:	push	{r4, lr}
   14118:	mov	r2, #5
   1411c:	ldr	r1, [pc, #36]	; 14148 <__assert_fail@plt+0x328c>
   14120:	mov	r0, #0
   14124:	ldr	r4, [r3]
   14128:	bl	10d00 <dcgettext@plt>
   1412c:	ldr	r2, [pc, #24]	; 1414c <__assert_fail@plt+0x3290>
   14130:	mov	r1, #0
   14134:	mov	r3, r0
   14138:	mov	r0, r4
   1413c:	bl	10d78 <error@plt>
   14140:	bl	10eb0 <abort@plt>
   14144:	andeq	r6, r2, r8, ror #1
   14148:	andeq	r5, r1, r8, lsr #25
   1414c:	andeq	r5, r1, ip, asr #16
   14150:	push	{r4, r5, r6, r7, lr}
   14154:	sub	sp, sp, #20
   14158:	mov	r6, r2
   1415c:	ldr	ip, [sp, #48]	; 0x30
   14160:	mov	r2, r1
   14164:	mov	r7, r3
   14168:	str	ip, [sp]
   1416c:	add	r3, sp, #8
   14170:	mov	r1, #0
   14174:	mov	r5, r0
   14178:	ldr	r4, [sp, #56]	; 0x38
   1417c:	bl	14334 <__assert_fail@plt+0x3478>
   14180:	cmp	r0, #0
   14184:	bne	14208 <__assert_fail@plt+0x334c>
   14188:	ldrd	r0, [sp, #8]
   1418c:	cmp	r1, r7
   14190:	cmpeq	r0, r6
   14194:	ldrd	r6, [sp, #40]	; 0x28
   14198:	movcc	r3, #1
   1419c:	movcs	r3, #0
   141a0:	cmp	r1, r7
   141a4:	cmpeq	r0, r6
   141a8:	orrhi	r3, r3, #1
   141ac:	cmp	r3, #0
   141b0:	beq	14200 <__assert_fail@plt+0x3344>
   141b4:	mov	r3, #0
   141b8:	mvn	r2, #-1073741824	; 0xc0000000
   141bc:	cmp	r1, r3
   141c0:	cmpeq	r0, r2
   141c4:	bhi	14234 <__assert_fail@plt+0x3378>
   141c8:	bl	10e08 <__errno_location@plt>
   141cc:	mov	r3, #34	; 0x22
   141d0:	mov	r6, r3
   141d4:	str	r3, [r0]
   141d8:	cmp	r4, #0
   141dc:	moveq	r4, #1
   141e0:	mov	r0, r5
   141e4:	bl	13690 <__assert_fail@plt+0x27d4>
   141e8:	mov	r1, r6
   141ec:	ldr	r3, [sp, #52]	; 0x34
   141f0:	ldr	r2, [pc, #144]	; 14288 <__assert_fail@plt+0x33cc>
   141f4:	str	r0, [sp]
   141f8:	mov	r0, r4
   141fc:	bl	10d78 <error@plt>
   14200:	add	sp, sp, #20
   14204:	pop	{r4, r5, r6, r7, pc}
   14208:	cmp	r0, #1
   1420c:	beq	14248 <__assert_fail@plt+0x338c>
   14210:	cmp	r0, #3
   14214:	beq	14278 <__assert_fail@plt+0x33bc>
   14218:	cmp	r4, #0
   1421c:	beq	14268 <__assert_fail@plt+0x33ac>
   14220:	bl	10e08 <__errno_location@plt>
   14224:	ldr	r6, [r0]
   14228:	cmp	r6, #22
   1422c:	moveq	r6, #0
   14230:	b	141e0 <__assert_fail@plt+0x3324>
   14234:	bl	10e08 <__errno_location@plt>
   14238:	mov	r3, #75	; 0x4b
   1423c:	mov	r6, r3
   14240:	str	r3, [r0]
   14244:	b	141d8 <__assert_fail@plt+0x331c>
   14248:	bl	10e08 <__errno_location@plt>
   1424c:	mov	r3, #75	; 0x4b
   14250:	mov	r6, r3
   14254:	str	r3, [r0]
   14258:	cmp	r4, #0
   1425c:	moveq	r4, #1
   14260:	bne	14228 <__assert_fail@plt+0x336c>
   14264:	b	141e0 <__assert_fail@plt+0x3324>
   14268:	bl	10e08 <__errno_location@plt>
   1426c:	mov	r4, #1
   14270:	ldr	r6, [r0]
   14274:	b	14228 <__assert_fail@plt+0x336c>
   14278:	bl	10e08 <__errno_location@plt>
   1427c:	mov	r6, #0
   14280:	str	r6, [r0]
   14284:	b	14258 <__assert_fail@plt+0x339c>
   14288:	andeq	r5, r1, r8, asr #16
   1428c:	push	{r4, r5}
   14290:	mov	r1, #10
   14294:	pop	{r4, r5}
   14298:	b	14150 <__assert_fail@plt+0x3294>
   1429c:	push	{r4, r5, r6, r7, r8, lr}
   142a0:	subs	r5, r1, #0
   142a4:	mov	r4, r0
   142a8:	blt	1431c <__assert_fail@plt+0x3460>
   142ac:	moveq	r6, #0
   142b0:	moveq	r7, #0
   142b4:	bne	142dc <__assert_fail@plt+0x3420>
   142b8:	ldr	r2, [r4]
   142bc:	ldr	r1, [r4, #4]
   142c0:	mov	r0, #0
   142c4:	mul	ip, r2, r7
   142c8:	umull	r2, r3, r2, r5
   142cc:	mla	r5, r5, r1, ip
   142d0:	add	r3, r5, r3
   142d4:	strd	r2, [r4]
   142d8:	pop	{r4, r5, r6, r7, r8, pc}
   142dc:	asr	r7, r5, #31
   142e0:	mov	r2, r5
   142e4:	mov	r3, r7
   142e8:	mvn	r0, #0
   142ec:	mvn	r1, #0
   142f0:	bl	15234 <__assert_fail@plt+0x4378>
   142f4:	ldrd	r2, [r4]
   142f8:	mov	r6, r5
   142fc:	cmp	r1, r3
   14300:	cmpeq	r0, r2
   14304:	bcs	142b8 <__assert_fail@plt+0x33fc>
   14308:	mvn	r2, #0
   1430c:	mvn	r3, #0
   14310:	mov	r0, #1
   14314:	strd	r2, [r4]
   14318:	pop	{r4, r5, r6, r7, r8, pc}
   1431c:	ldrd	r2, [r0]
   14320:	orrs	r3, r2, r3
   14324:	moveq	r6, r5
   14328:	asreq	r7, r6, #31
   1432c:	bne	14308 <__assert_fail@plt+0x344c>
   14330:	b	142b8 <__assert_fail@plt+0x33fc>
   14334:	cmp	r2, #36	; 0x24
   14338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1433c:	sub	sp, sp, #20
   14340:	bhi	148b4 <__assert_fail@plt+0x39f8>
   14344:	cmp	r1, #0
   14348:	mov	r8, r2
   1434c:	mov	r7, r0
   14350:	mov	r5, r1
   14354:	mov	r6, r3
   14358:	addeq	r5, sp, #4
   1435c:	bl	10e08 <__errno_location@plt>
   14360:	mov	r3, #0
   14364:	str	r3, [r0]
   14368:	mov	r9, r0
   1436c:	bl	10dcc <__ctype_b_loc@plt>
   14370:	ldrb	r3, [r7]
   14374:	mov	r2, r7
   14378:	ldr	r0, [r0]
   1437c:	b	14384 <__assert_fail@plt+0x34c8>
   14380:	ldrb	r3, [r2, #1]!
   14384:	lsl	r1, r3, #1
   14388:	ldrh	r4, [r0, r1]
   1438c:	ands	r4, r4, #8192	; 0x2000
   14390:	bne	14380 <__assert_fail@plt+0x34c4>
   14394:	cmp	r3, #45	; 0x2d
   14398:	bne	143ac <__assert_fail@plt+0x34f0>
   1439c:	mov	r4, #4
   143a0:	mov	r0, r4
   143a4:	add	sp, sp, #20
   143a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143ac:	mov	r2, r8
   143b0:	mov	r3, r4
   143b4:	mov	r1, r5
   143b8:	mov	r0, r7
   143bc:	bl	10cc4 <__strtoull_internal@plt>
   143c0:	ldr	r8, [r5]
   143c4:	cmp	r7, r8
   143c8:	mov	r2, r0
   143cc:	str	r0, [sp, #8]
   143d0:	str	r1, [sp, #12]
   143d4:	beq	14420 <__assert_fail@plt+0x3564>
   143d8:	ldr	r4, [r9]
   143dc:	cmp	r4, #0
   143e0:	bne	14410 <__assert_fail@plt+0x3554>
   143e4:	ldr	r3, [sp, #56]	; 0x38
   143e8:	cmp	r3, #0
   143ec:	beq	143fc <__assert_fail@plt+0x3540>
   143f0:	ldrb	r9, [r8]
   143f4:	cmp	r9, #0
   143f8:	bne	14458 <__assert_fail@plt+0x359c>
   143fc:	mov	r0, r4
   14400:	str	r2, [r6]
   14404:	str	r1, [r6, #4]
   14408:	add	sp, sp, #20
   1440c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14410:	cmp	r4, #34	; 0x22
   14414:	bne	1439c <__assert_fail@plt+0x34e0>
   14418:	mov	r4, #1
   1441c:	b	143e4 <__assert_fail@plt+0x3528>
   14420:	ldr	r3, [sp, #56]	; 0x38
   14424:	cmp	r3, #0
   14428:	beq	1439c <__assert_fail@plt+0x34e0>
   1442c:	ldrb	r1, [r8]
   14430:	cmp	r1, #0
   14434:	beq	1439c <__assert_fail@plt+0x34e0>
   14438:	mov	r0, r3
   1443c:	bl	10dfc <strchr@plt>
   14440:	cmp	r0, #0
   14444:	beq	1439c <__assert_fail@plt+0x34e0>
   14448:	ldrb	r9, [r8]
   1444c:	mov	r2, #1
   14450:	mov	r3, #0
   14454:	strd	r2, [sp, #8]
   14458:	mov	r1, r9
   1445c:	ldr	r0, [sp, #56]	; 0x38
   14460:	bl	10dfc <strchr@plt>
   14464:	cmp	r0, #0
   14468:	beq	14870 <__assert_fail@plt+0x39b4>
   1446c:	sub	r3, r9, #69	; 0x45
   14470:	cmp	r3, #47	; 0x2f
   14474:	ldrls	pc, [pc, r3, lsl #2]
   14478:	b	1453c <__assert_fail@plt+0x3680>
   1447c:	andeq	r4, r1, ip, lsr #12
   14480:	andeq	r4, r1, ip, lsr r5
   14484:	andeq	r4, r1, ip, lsr #12
   14488:	andeq	r4, r1, ip, lsr r5
   1448c:	andeq	r4, r1, ip, lsr r5
   14490:	andeq	r4, r1, ip, lsr r5
   14494:	andeq	r4, r1, ip, lsr #12
   14498:	andeq	r4, r1, ip, lsr r5
   1449c:	andeq	r4, r1, ip, lsr #12
   144a0:	andeq	r4, r1, ip, lsr r5
   144a4:	andeq	r4, r1, ip, lsr r5
   144a8:	andeq	r4, r1, ip, lsr #12
   144ac:	andeq	r4, r1, ip, lsr r5
   144b0:	andeq	r4, r1, ip, lsr r5
   144b4:	andeq	r4, r1, ip, lsr r5
   144b8:	andeq	r4, r1, ip, lsr #12
   144bc:	andeq	r4, r1, ip, lsr r5
   144c0:	andeq	r4, r1, ip, lsr r5
   144c4:	andeq	r4, r1, ip, lsr r5
   144c8:	andeq	r4, r1, ip, lsr r5
   144cc:	andeq	r4, r1, ip, lsr #12
   144d0:	andeq	r4, r1, ip, lsr #12
   144d4:	andeq	r4, r1, ip, lsr r5
   144d8:	andeq	r4, r1, ip, lsr r5
   144dc:	andeq	r4, r1, ip, lsr r5
   144e0:	andeq	r4, r1, ip, lsr r5
   144e4:	andeq	r4, r1, ip, lsr r5
   144e8:	andeq	r4, r1, ip, lsr r5
   144ec:	andeq	r4, r1, ip, lsr r5
   144f0:	andeq	r4, r1, ip, lsr r5
   144f4:	andeq	r4, r1, ip, lsr r5
   144f8:	andeq	r4, r1, ip, lsr r5
   144fc:	andeq	r4, r1, ip, lsr r5
   14500:	andeq	r4, r1, ip, lsr r5
   14504:	andeq	r4, r1, ip, lsr #12
   14508:	andeq	r4, r1, ip, lsr r5
   1450c:	andeq	r4, r1, ip, lsr r5
   14510:	andeq	r4, r1, ip, lsr r5
   14514:	andeq	r4, r1, ip, lsr #12
   14518:	andeq	r4, r1, ip, lsr r5
   1451c:	andeq	r4, r1, ip, lsr #12
   14520:	andeq	r4, r1, ip, lsr r5
   14524:	andeq	r4, r1, ip, lsr r5
   14528:	andeq	r4, r1, ip, lsr r5
   1452c:	andeq	r4, r1, ip, lsr r5
   14530:	andeq	r4, r1, ip, lsr r5
   14534:	andeq	r4, r1, ip, lsr r5
   14538:	andeq	r4, r1, ip, lsr #12
   1453c:	mov	r7, #1
   14540:	mov	sl, #1024	; 0x400
   14544:	sub	r9, r9, #66	; 0x42
   14548:	cmp	r9, #53	; 0x35
   1454c:	ldrls	pc, [pc, r9, lsl #2]
   14550:	b	14870 <__assert_fail@plt+0x39b4>
   14554:			; <UNDEFINED> instruction: 0x000147bc
   14558:	andeq	r4, r1, r0, ror r8
   1455c:	andeq	r4, r1, r0, ror r8
   14560:	muleq	r1, r4, r7
   14564:	andeq	r4, r1, r0, ror r8
   14568:	andeq	r4, r1, ip, ror #14
   1456c:	andeq	r4, r1, r0, ror r8
   14570:	andeq	r4, r1, r0, ror r8
   14574:	andeq	r4, r1, r0, ror r8
   14578:	andeq	r4, r1, ip, asr #14
   1457c:	andeq	r4, r1, r0, ror r8
   14580:	andeq	r4, r1, r8, lsl r8
   14584:	andeq	r4, r1, r0, ror r8
   14588:	andeq	r4, r1, r0, ror r8
   1458c:	strdeq	r4, [r1], -r0
   14590:	andeq	r4, r1, r0, ror r8
   14594:	andeq	r4, r1, r0, ror r8
   14598:	andeq	r4, r1, r0, ror r8
   1459c:	andeq	r4, r1, r8, asr #16
   145a0:	andeq	r4, r1, r0, ror r8
   145a4:	andeq	r4, r1, r0, ror r8
   145a8:	andeq	r4, r1, r0, ror r8
   145ac:	andeq	r4, r1, r0, ror r8
   145b0:	andeq	r4, r1, r4, lsr #14
   145b4:	strdeq	r4, [r1], -r0
   145b8:	andeq	r4, r1, r0, ror r8
   145bc:	andeq	r4, r1, r0, ror r8
   145c0:	andeq	r4, r1, r0, ror r8
   145c4:	andeq	r4, r1, r0, ror r8
   145c8:	andeq	r4, r1, r0, ror r8
   145cc:	andeq	r4, r1, r0, ror r8
   145d0:	andeq	r4, r1, r0, ror r8
   145d4:			; <UNDEFINED> instruction: 0x000146bc
   145d8:	andeq	r4, r1, ip, lsr #13
   145dc:	andeq	r4, r1, r0, ror r8
   145e0:	andeq	r4, r1, r0, ror r8
   145e4:	andeq	r4, r1, r0, ror r8
   145e8:	andeq	r4, r1, ip, ror #14
   145ec:	andeq	r4, r1, r0, ror r8
   145f0:	andeq	r4, r1, r0, ror r8
   145f4:	andeq	r4, r1, r0, ror r8
   145f8:	andeq	r4, r1, ip, asr #14
   145fc:	andeq	r4, r1, r0, ror r8
   14600:	andeq	r4, r1, r8, lsl r8
   14604:	andeq	r4, r1, r0, ror r8
   14608:	andeq	r4, r1, r0, ror r8
   1460c:	andeq	r4, r1, r0, ror r8
   14610:	andeq	r4, r1, r0, ror r8
   14614:	andeq	r4, r1, r0, ror r8
   14618:	andeq	r4, r1, r0, ror r8
   1461c:	andeq	r4, r1, r8, asr #16
   14620:	andeq	r4, r1, r0, ror r8
   14624:	andeq	r4, r1, r0, ror r8
   14628:	andeq	r4, r1, r8, ror #12
   1462c:	mov	r1, #48	; 0x30
   14630:	ldr	r0, [sp, #56]	; 0x38
   14634:	bl	10dfc <strchr@plt>
   14638:	cmp	r0, #0
   1463c:	beq	1453c <__assert_fail@plt+0x3680>
   14640:	ldrb	r3, [r8, #1]
   14644:	cmp	r3, #68	; 0x44
   14648:	beq	1465c <__assert_fail@plt+0x37a0>
   1464c:	cmp	r3, #105	; 0x69
   14650:	beq	14880 <__assert_fail@plt+0x39c4>
   14654:	cmp	r3, #66	; 0x42
   14658:	bne	1453c <__assert_fail@plt+0x3680>
   1465c:	mov	r7, #2
   14660:	mov	sl, #1000	; 0x3e8
   14664:	b	14544 <__assert_fail@plt+0x3688>
   14668:	ldrd	r2, [sp, #8]
   1466c:	cmp	r2, #0
   14670:	sbcs	r1, r3, #0
   14674:	blt	14898 <__assert_fail@plt+0x39dc>
   14678:	adds	r2, r2, r2
   1467c:	adc	r3, r3, r3
   14680:	mov	r1, r3
   14684:	mov	r9, #0
   14688:	str	r2, [sp, #8]
   1468c:	str	r3, [sp, #12]
   14690:	add	r3, r8, r7
   14694:	str	r3, [r5]
   14698:	ldrb	r3, [r8, r7]
   1469c:	orr	r4, r4, r9
   146a0:	cmp	r3, #0
   146a4:	orrne	r4, r4, #2
   146a8:	b	143fc <__assert_fail@plt+0x3540>
   146ac:	ldr	r2, [sp, #8]
   146b0:	ldr	r1, [sp, #12]
   146b4:	mov	r9, #0
   146b8:	b	14690 <__assert_fail@plt+0x37d4>
   146bc:	ldrd	r2, [sp, #8]
   146c0:	ldr	r1, [pc, #512]	; 148c8 <__assert_fail@plt+0x3a0c>
   146c4:	mvn	r0, #0
   146c8:	cmp	r3, r1
   146cc:	cmpeq	r2, r0
   146d0:	bhi	14898 <__assert_fail@plt+0x39dc>
   146d4:	lsl	r1, r3, #9
   146d8:	orr	r1, r1, r2, lsr #23
   146dc:	lsl	r2, r2, #9
   146e0:	str	r1, [sp, #12]
   146e4:	str	r2, [sp, #8]
   146e8:	mov	r9, #0
   146ec:	b	14690 <__assert_fail@plt+0x37d4>
   146f0:	mov	fp, #7
   146f4:	mov	r9, #0
   146f8:	add	r8, sp, #8
   146fc:	mov	r1, sl
   14700:	mov	r0, r8
   14704:	bl	1429c <__assert_fail@plt+0x33e0>
   14708:	subs	fp, fp, #1
   1470c:	orr	r9, r9, r0
   14710:	bne	146fc <__assert_fail@plt+0x3840>
   14714:	ldr	r8, [r5]
   14718:	ldr	r2, [sp, #8]
   1471c:	ldr	r1, [sp, #12]
   14720:	b	14690 <__assert_fail@plt+0x37d4>
   14724:	mov	fp, #8
   14728:	mov	r9, #0
   1472c:	add	r8, sp, fp
   14730:	mov	r1, sl
   14734:	mov	r0, r8
   14738:	bl	1429c <__assert_fail@plt+0x33e0>
   1473c:	subs	fp, fp, #1
   14740:	orr	r9, r9, r0
   14744:	bne	14730 <__assert_fail@plt+0x3874>
   14748:	b	14714 <__assert_fail@plt+0x3858>
   1474c:	mov	r1, sl
   14750:	add	r0, sp, #8
   14754:	bl	1429c <__assert_fail@plt+0x33e0>
   14758:	ldr	r8, [r5]
   1475c:	ldr	r2, [sp, #8]
   14760:	ldr	r1, [sp, #12]
   14764:	mov	r9, r0
   14768:	b	14690 <__assert_fail@plt+0x37d4>
   1476c:	mov	fp, #3
   14770:	mov	r9, #0
   14774:	add	r8, sp, #8
   14778:	mov	r1, sl
   1477c:	mov	r0, r8
   14780:	bl	1429c <__assert_fail@plt+0x33e0>
   14784:	subs	fp, fp, #1
   14788:	orr	r9, r9, r0
   1478c:	bne	14778 <__assert_fail@plt+0x38bc>
   14790:	b	14714 <__assert_fail@plt+0x3858>
   14794:	mov	fp, #6
   14798:	mov	r9, #0
   1479c:	add	r8, sp, #8
   147a0:	mov	r1, sl
   147a4:	mov	r0, r8
   147a8:	bl	1429c <__assert_fail@plt+0x33e0>
   147ac:	subs	fp, fp, #1
   147b0:	orr	r9, r9, r0
   147b4:	bne	147a0 <__assert_fail@plt+0x38e4>
   147b8:	b	14714 <__assert_fail@plt+0x3858>
   147bc:	ldrd	r0, [sp, #8]
   147c0:	ldr	r3, [pc, #260]	; 148cc <__assert_fail@plt+0x3a10>
   147c4:	mvn	r2, #0
   147c8:	cmp	r1, r3
   147cc:	cmpeq	r0, r2
   147d0:	bhi	14898 <__assert_fail@plt+0x39dc>
   147d4:	lsl	r1, r1, #10
   147d8:	orr	r1, r1, r0, lsr #22
   147dc:	lsl	r2, r0, #10
   147e0:	str	r1, [sp, #12]
   147e4:	str	r2, [sp, #8]
   147e8:	mov	r9, #0
   147ec:	b	14690 <__assert_fail@plt+0x37d4>
   147f0:	mov	fp, #5
   147f4:	mov	r9, #0
   147f8:	add	r8, sp, #8
   147fc:	mov	r1, sl
   14800:	mov	r0, r8
   14804:	bl	1429c <__assert_fail@plt+0x33e0>
   14808:	subs	fp, fp, #1
   1480c:	orr	r9, r9, r0
   14810:	bne	147fc <__assert_fail@plt+0x3940>
   14814:	b	14714 <__assert_fail@plt+0x3858>
   14818:	mov	r1, sl
   1481c:	add	r0, sp, #8
   14820:	bl	1429c <__assert_fail@plt+0x33e0>
   14824:	mov	r1, sl
   14828:	mov	r9, r0
   1482c:	add	r0, sp, #8
   14830:	bl	1429c <__assert_fail@plt+0x33e0>
   14834:	ldr	r8, [r5]
   14838:	ldr	r2, [sp, #8]
   1483c:	ldr	r1, [sp, #12]
   14840:	orr	r9, r9, r0
   14844:	b	14690 <__assert_fail@plt+0x37d4>
   14848:	mov	fp, #4
   1484c:	mov	r9, #0
   14850:	add	r8, sp, #8
   14854:	mov	r1, sl
   14858:	mov	r0, r8
   1485c:	bl	1429c <__assert_fail@plt+0x33e0>
   14860:	subs	fp, fp, #1
   14864:	orr	r9, r9, r0
   14868:	bne	14854 <__assert_fail@plt+0x3998>
   1486c:	b	14714 <__assert_fail@plt+0x3858>
   14870:	ldrd	r2, [sp, #8]
   14874:	orr	r4, r4, #2
   14878:	strd	r2, [r6]
   1487c:	b	143a0 <__assert_fail@plt+0x34e4>
   14880:	ldrb	r7, [r8, #2]
   14884:	mov	sl, #1024	; 0x400
   14888:	cmp	r7, #66	; 0x42
   1488c:	movne	r7, #1
   14890:	moveq	r7, #3
   14894:	b	14544 <__assert_fail@plt+0x3688>
   14898:	mvn	r1, #0
   1489c:	mvn	r0, #0
   148a0:	mvn	r2, #0
   148a4:	strd	r0, [sp, #8]
   148a8:	mov	r9, #1
   148ac:	mov	r1, r2
   148b0:	b	14690 <__assert_fail@plt+0x37d4>
   148b4:	ldr	r3, [pc, #20]	; 148d0 <__assert_fail@plt+0x3a14>
   148b8:	mov	r2, #85	; 0x55
   148bc:	ldr	r1, [pc, #16]	; 148d4 <__assert_fail@plt+0x3a18>
   148c0:	ldr	r0, [pc, #16]	; 148d8 <__assert_fail@plt+0x3a1c>
   148c4:	bl	10ebc <__assert_fail@plt>
   148c8:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   148cc:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   148d0:			; <UNDEFINED> instruction: 0x00015cbc
   148d4:	andeq	r5, r1, r8, asr #25
   148d8:	ldrdeq	r5, [r1], -r8
   148dc:	cmp	r1, #0
   148e0:	cmpne	r0, #0
   148e4:	moveq	r1, #1
   148e8:	moveq	r0, r1
   148ec:	umull	r2, r3, r0, r1
   148f0:	adds	r3, r3, #0
   148f4:	movne	r3, #1
   148f8:	cmp	r2, #0
   148fc:	blt	1490c <__assert_fail@plt+0x3a50>
   14900:	cmp	r3, #0
   14904:	bne	1490c <__assert_fail@plt+0x3a50>
   14908:	b	10c64 <calloc@plt>
   1490c:	push	{r4, lr}
   14910:	bl	10e08 <__errno_location@plt>
   14914:	mov	r3, #12
   14918:	str	r3, [r0]
   1491c:	mov	r0, #0
   14920:	pop	{r4, pc}
   14924:	cmp	r0, #0
   14928:	moveq	r0, #1
   1492c:	cmp	r0, #0
   14930:	blt	14938 <__assert_fail@plt+0x3a7c>
   14934:	b	10d90 <malloc@plt>
   14938:	push	{r4, lr}
   1493c:	bl	10e08 <__errno_location@plt>
   14940:	mov	r3, #12
   14944:	str	r3, [r0]
   14948:	mov	r0, #0
   1494c:	pop	{r4, pc}
   14950:	cmp	r0, #0
   14954:	beq	14978 <__assert_fail@plt+0x3abc>
   14958:	cmp	r1, #0
   1495c:	push	{lr}		; (str lr, [sp, #-4]!)
   14960:	sub	sp, sp, #12
   14964:	beq	14980 <__assert_fail@plt+0x3ac4>
   14968:	blt	14998 <__assert_fail@plt+0x3adc>
   1496c:	add	sp, sp, #12
   14970:	pop	{lr}		; (ldr lr, [sp], #4)
   14974:	b	10d18 <realloc@plt>
   14978:	mov	r0, r1
   1497c:	b	14924 <__assert_fail@plt+0x3a68>
   14980:	str	r1, [sp, #4]
   14984:	bl	14b28 <__assert_fail@plt+0x3c6c>
   14988:	ldr	r3, [sp, #4]
   1498c:	mov	r0, r3
   14990:	add	sp, sp, #12
   14994:	pop	{pc}		; (ldr pc, [sp], #4)
   14998:	bl	10e08 <__errno_location@plt>
   1499c:	mov	r2, #12
   149a0:	mov	r3, #0
   149a4:	str	r2, [r0]
   149a8:	b	1498c <__assert_fail@plt+0x3ad0>
   149ac:	push	{r4, r5, r6, lr}
   149b0:	mov	r4, r0
   149b4:	bl	10d60 <__fpending@plt>
   149b8:	ldr	r5, [r4]
   149bc:	and	r5, r5, #32
   149c0:	mov	r6, r0
   149c4:	mov	r0, r4
   149c8:	bl	14a28 <__assert_fail@plt+0x3b6c>
   149cc:	cmp	r5, #0
   149d0:	mov	r4, r0
   149d4:	bne	149f4 <__assert_fail@plt+0x3b38>
   149d8:	cmp	r0, #0
   149dc:	beq	149ec <__assert_fail@plt+0x3b30>
   149e0:	cmp	r6, #0
   149e4:	beq	14a10 <__assert_fail@plt+0x3b54>
   149e8:	mvn	r4, #0
   149ec:	mov	r0, r4
   149f0:	pop	{r4, r5, r6, pc}
   149f4:	cmp	r0, #0
   149f8:	bne	149e8 <__assert_fail@plt+0x3b2c>
   149fc:	bl	10e08 <__errno_location@plt>
   14a00:	str	r4, [r0]
   14a04:	mvn	r4, #0
   14a08:	mov	r0, r4
   14a0c:	pop	{r4, r5, r6, pc}
   14a10:	bl	10e08 <__errno_location@plt>
   14a14:	ldr	r4, [r0]
   14a18:	subs	r4, r4, #9
   14a1c:	mvnne	r4, #0
   14a20:	mov	r0, r4
   14a24:	pop	{r4, r5, r6, pc}
   14a28:	push	{r4, r5, lr}
   14a2c:	sub	sp, sp, #12
   14a30:	mov	r4, r0
   14a34:	bl	10e38 <fileno@plt>
   14a38:	cmp	r0, #0
   14a3c:	mov	r0, r4
   14a40:	blt	14abc <__assert_fail@plt+0x3c00>
   14a44:	bl	10da8 <__freading@plt>
   14a48:	cmp	r0, #0
   14a4c:	bne	14a88 <__assert_fail@plt+0x3bcc>
   14a50:	mov	r0, r4
   14a54:	bl	14ac8 <__assert_fail@plt+0x3c0c>
   14a58:	cmp	r0, #0
   14a5c:	beq	14ab8 <__assert_fail@plt+0x3bfc>
   14a60:	bl	10e08 <__errno_location@plt>
   14a64:	mov	r5, r0
   14a68:	mov	r0, r4
   14a6c:	ldr	r4, [r5]
   14a70:	bl	10e50 <fclose@plt>
   14a74:	cmp	r4, #0
   14a78:	mvnne	r0, #0
   14a7c:	strne	r4, [r5]
   14a80:	add	sp, sp, #12
   14a84:	pop	{r4, r5, pc}
   14a88:	mov	r0, r4
   14a8c:	bl	10e38 <fileno@plt>
   14a90:	mov	r3, #1
   14a94:	str	r3, [sp]
   14a98:	mov	r2, #0
   14a9c:	mov	r3, #0
   14aa0:	bl	10d48 <lseek64@plt>
   14aa4:	mvn	r3, #0
   14aa8:	mvn	r2, #0
   14aac:	cmp	r1, r3
   14ab0:	cmpeq	r0, r2
   14ab4:	bne	14a50 <__assert_fail@plt+0x3b94>
   14ab8:	mov	r0, r4
   14abc:	add	sp, sp, #12
   14ac0:	pop	{r4, r5, lr}
   14ac4:	b	10e50 <fclose@plt>
   14ac8:	push	{r4, lr}
   14acc:	subs	r4, r0, #0
   14ad0:	sub	sp, sp, #8
   14ad4:	beq	14af0 <__assert_fail@plt+0x3c34>
   14ad8:	bl	10da8 <__freading@plt>
   14adc:	cmp	r0, #0
   14ae0:	beq	14af0 <__assert_fail@plt+0x3c34>
   14ae4:	ldr	r3, [r4]
   14ae8:	tst	r3, #256	; 0x100
   14aec:	bne	14b00 <__assert_fail@plt+0x3c44>
   14af0:	mov	r0, r4
   14af4:	add	sp, sp, #8
   14af8:	pop	{r4, lr}
   14afc:	b	10c94 <fflush@plt>
   14b00:	mov	r3, #1
   14b04:	str	r3, [sp]
   14b08:	mov	r2, #0
   14b0c:	mov	r3, #0
   14b10:	mov	r0, r4
   14b14:	bl	14b80 <__assert_fail@plt+0x3cc4>
   14b18:	mov	r0, r4
   14b1c:	add	sp, sp, #8
   14b20:	pop	{r4, lr}
   14b24:	b	10c94 <fflush@plt>
   14b28:	push	{r4, r5, lr}
   14b2c:	sub	sp, sp, #12
   14b30:	mov	r5, r0
   14b34:	bl	10e08 <__errno_location@plt>
   14b38:	mov	r2, #0
   14b3c:	mov	r4, r0
   14b40:	ldr	r3, [r0]
   14b44:	str	r2, [r4]
   14b48:	mov	r0, r5
   14b4c:	str	r3, [sp]
   14b50:	str	r3, [sp, #4]
   14b54:	bl	10ca0 <free@plt>
   14b58:	ldr	r3, [r4]
   14b5c:	add	r2, sp, #8
   14b60:	cmp	r3, #0
   14b64:	moveq	r3, #4
   14b68:	movne	r3, #0
   14b6c:	add	r3, r2, r3
   14b70:	ldr	r3, [r3, #-8]
   14b74:	str	r3, [r4]
   14b78:	add	sp, sp, #12
   14b7c:	pop	{r4, r5, pc}
   14b80:	push	{r4, r5, r6, r7, r8, lr}
   14b84:	sub	sp, sp, #8
   14b88:	ldmib	r0, {ip, lr}
   14b8c:	mov	r4, r0
   14b90:	ldr	r5, [sp, #32]
   14b94:	cmp	lr, ip
   14b98:	beq	14bb0 <__assert_fail@plt+0x3cf4>
   14b9c:	str	r5, [sp, #32]
   14ba0:	mov	r0, r4
   14ba4:	add	sp, sp, #8
   14ba8:	pop	{r4, r5, r6, r7, r8, lr}
   14bac:	b	10e5c <fseeko64@plt>
   14bb0:	ldr	lr, [r0, #20]
   14bb4:	ldr	ip, [r0, #16]
   14bb8:	cmp	lr, ip
   14bbc:	bne	14b9c <__assert_fail@plt+0x3ce0>
   14bc0:	ldr	r8, [r0, #36]	; 0x24
   14bc4:	cmp	r8, #0
   14bc8:	bne	14b9c <__assert_fail@plt+0x3ce0>
   14bcc:	mov	r6, r2
   14bd0:	mov	r7, r3
   14bd4:	bl	10e38 <fileno@plt>
   14bd8:	mov	r2, r6
   14bdc:	mov	r3, r7
   14be0:	str	r5, [sp]
   14be4:	bl	10d48 <lseek64@plt>
   14be8:	mvn	r3, #0
   14bec:	mvn	r2, #0
   14bf0:	cmp	r1, r3
   14bf4:	cmpeq	r0, r2
   14bf8:	beq	14c18 <__assert_fail@plt+0x3d5c>
   14bfc:	ldr	r3, [r4]
   14c00:	strd	r0, [r4, #80]	; 0x50
   14c04:	mov	r0, r8
   14c08:	bic	r3, r3, #16
   14c0c:	str	r3, [r4]
   14c10:	add	sp, sp, #8
   14c14:	pop	{r4, r5, r6, r7, r8, pc}
   14c18:	mvn	r0, #0
   14c1c:	b	14c10 <__assert_fail@plt+0x3d54>
   14c20:	push	{r4, lr}
   14c24:	mov	r0, #14
   14c28:	bl	10e80 <nl_langinfo@plt>
   14c2c:	cmp	r0, #0
   14c30:	beq	14c48 <__assert_fail@plt+0x3d8c>
   14c34:	ldrb	r2, [r0]
   14c38:	ldr	r3, [pc, #16]	; 14c50 <__assert_fail@plt+0x3d94>
   14c3c:	cmp	r2, #0
   14c40:	moveq	r0, r3
   14c44:	pop	{r4, pc}
   14c48:	ldr	r0, [pc]	; 14c50 <__assert_fail@plt+0x3d94>
   14c4c:	pop	{r4, pc}
   14c50:	andeq	r5, r1, r0, lsl #26
   14c54:	push	{r4, r5, r6, r7, lr}
   14c58:	subs	r6, r0, #0
   14c5c:	sub	sp, sp, #12
   14c60:	addeq	r6, sp, #4
   14c64:	mov	r0, r6
   14c68:	mov	r5, r2
   14c6c:	mov	r7, r1
   14c70:	bl	10d6c <mbrtowc@plt>
   14c74:	cmp	r5, #0
   14c78:	cmnne	r0, #3
   14c7c:	mov	r4, r0
   14c80:	bls	14c9c <__assert_fail@plt+0x3de0>
   14c84:	mov	r0, #0
   14c88:	bl	14cf4 <__assert_fail@plt+0x3e38>
   14c8c:	cmp	r0, #0
   14c90:	moveq	r4, #1
   14c94:	ldrbeq	r3, [r7]
   14c98:	streq	r3, [r6]
   14c9c:	mov	r0, r4
   14ca0:	add	sp, sp, #12
   14ca4:	pop	{r4, r5, r6, r7, pc}
   14ca8:	push	{r4, r5, r6, lr}
   14cac:	subs	r4, r2, #0
   14cb0:	mov	r6, r0
   14cb4:	mov	r5, r1
   14cb8:	beq	14ce4 <__assert_fail@plt+0x3e28>
   14cbc:	mov	r1, r4
   14cc0:	mvn	r0, #0
   14cc4:	bl	14de8 <__assert_fail@plt+0x3f2c>
   14cc8:	cmp	r0, r5
   14ccc:	bcs	14ce4 <__assert_fail@plt+0x3e28>
   14cd0:	bl	10e08 <__errno_location@plt>
   14cd4:	mov	r3, #12
   14cd8:	str	r3, [r0]
   14cdc:	mov	r0, #0
   14ce0:	pop	{r4, r5, r6, pc}
   14ce4:	mul	r1, r5, r4
   14ce8:	mov	r0, r6
   14cec:	pop	{r4, r5, r6, lr}
   14cf0:	b	14950 <__assert_fail@plt+0x3a94>
   14cf4:	push	{lr}		; (str lr, [sp, #-4]!)
   14cf8:	sub	sp, sp, #268	; 0x10c
   14cfc:	add	r1, sp, #4
   14d00:	ldr	r2, [pc, #60]	; 14d44 <__assert_fail@plt+0x3e88>
   14d04:	bl	14d50 <__assert_fail@plt+0x3e94>
   14d08:	cmp	r0, #0
   14d0c:	movne	r0, #0
   14d10:	bne	14d3c <__assert_fail@plt+0x3e80>
   14d14:	ldr	r1, [pc, #44]	; 14d48 <__assert_fail@plt+0x3e8c>
   14d18:	add	r0, sp, #4
   14d1c:	bl	10c88 <strcmp@plt>
   14d20:	cmp	r0, #0
   14d24:	beq	14d3c <__assert_fail@plt+0x3e80>
   14d28:	add	r0, sp, #4
   14d2c:	ldr	r1, [pc, #24]	; 14d4c <__assert_fail@plt+0x3e90>
   14d30:	bl	10c88 <strcmp@plt>
   14d34:	adds	r0, r0, #0
   14d38:	movne	r0, #1
   14d3c:	add	sp, sp, #268	; 0x10c
   14d40:	pop	{pc}		; (ldr pc, [sp], #4)
   14d44:	andeq	r0, r0, r1, lsl #2
   14d48:	andeq	r5, r1, r8, lsl #26
   14d4c:	andeq	r5, r1, ip, lsl #26
   14d50:	push	{r4, r5, r6, lr}
   14d54:	mov	r5, r1
   14d58:	mov	r1, #0
   14d5c:	mov	r4, r2
   14d60:	bl	10e68 <setlocale@plt>
   14d64:	subs	r6, r0, #0
   14d68:	beq	14dc4 <__assert_fail@plt+0x3f08>
   14d6c:	bl	10df0 <strlen@plt>
   14d70:	cmp	r4, r0
   14d74:	bhi	14dac <__assert_fail@plt+0x3ef0>
   14d78:	cmp	r4, #0
   14d7c:	bne	14d88 <__assert_fail@plt+0x3ecc>
   14d80:	mov	r0, #34	; 0x22
   14d84:	pop	{r4, r5, r6, pc}
   14d88:	sub	r4, r4, #1
   14d8c:	mov	r1, r6
   14d90:	mov	r2, r4
   14d94:	mov	r0, r5
   14d98:	bl	10cb8 <memcpy@plt>
   14d9c:	mov	r3, #0
   14da0:	strb	r3, [r5, r4]
   14da4:	mov	r0, #34	; 0x22
   14da8:	pop	{r4, r5, r6, pc}
   14dac:	add	r2, r0, #1
   14db0:	mov	r1, r6
   14db4:	mov	r0, r5
   14db8:	bl	10cb8 <memcpy@plt>
   14dbc:	mov	r0, #0
   14dc0:	pop	{r4, r5, r6, pc}
   14dc4:	cmp	r4, #0
   14dc8:	beq	14dd8 <__assert_fail@plt+0x3f1c>
   14dcc:	strb	r6, [r5]
   14dd0:	mov	r0, #22
   14dd4:	pop	{r4, r5, r6, pc}
   14dd8:	mov	r0, #22
   14ddc:	pop	{r4, r5, r6, pc}
   14de0:	mov	r1, #0
   14de4:	b	10e68 <setlocale@plt>
   14de8:	subs	r2, r1, #1
   14dec:	bxeq	lr
   14df0:	bcc	14fc8 <__assert_fail@plt+0x410c>
   14df4:	cmp	r0, r1
   14df8:	bls	14fac <__assert_fail@plt+0x40f0>
   14dfc:	tst	r1, r2
   14e00:	beq	14fb8 <__assert_fail@plt+0x40fc>
   14e04:	clz	r3, r0
   14e08:	clz	r2, r1
   14e0c:	sub	r3, r2, r3
   14e10:	rsbs	r3, r3, #31
   14e14:	addne	r3, r3, r3, lsl #1
   14e18:	mov	r2, #0
   14e1c:	addne	pc, pc, r3, lsl #2
   14e20:	nop			; (mov r0, r0)
   14e24:	cmp	r0, r1, lsl #31
   14e28:	adc	r2, r2, r2
   14e2c:	subcs	r0, r0, r1, lsl #31
   14e30:	cmp	r0, r1, lsl #30
   14e34:	adc	r2, r2, r2
   14e38:	subcs	r0, r0, r1, lsl #30
   14e3c:	cmp	r0, r1, lsl #29
   14e40:	adc	r2, r2, r2
   14e44:	subcs	r0, r0, r1, lsl #29
   14e48:	cmp	r0, r1, lsl #28
   14e4c:	adc	r2, r2, r2
   14e50:	subcs	r0, r0, r1, lsl #28
   14e54:	cmp	r0, r1, lsl #27
   14e58:	adc	r2, r2, r2
   14e5c:	subcs	r0, r0, r1, lsl #27
   14e60:	cmp	r0, r1, lsl #26
   14e64:	adc	r2, r2, r2
   14e68:	subcs	r0, r0, r1, lsl #26
   14e6c:	cmp	r0, r1, lsl #25
   14e70:	adc	r2, r2, r2
   14e74:	subcs	r0, r0, r1, lsl #25
   14e78:	cmp	r0, r1, lsl #24
   14e7c:	adc	r2, r2, r2
   14e80:	subcs	r0, r0, r1, lsl #24
   14e84:	cmp	r0, r1, lsl #23
   14e88:	adc	r2, r2, r2
   14e8c:	subcs	r0, r0, r1, lsl #23
   14e90:	cmp	r0, r1, lsl #22
   14e94:	adc	r2, r2, r2
   14e98:	subcs	r0, r0, r1, lsl #22
   14e9c:	cmp	r0, r1, lsl #21
   14ea0:	adc	r2, r2, r2
   14ea4:	subcs	r0, r0, r1, lsl #21
   14ea8:	cmp	r0, r1, lsl #20
   14eac:	adc	r2, r2, r2
   14eb0:	subcs	r0, r0, r1, lsl #20
   14eb4:	cmp	r0, r1, lsl #19
   14eb8:	adc	r2, r2, r2
   14ebc:	subcs	r0, r0, r1, lsl #19
   14ec0:	cmp	r0, r1, lsl #18
   14ec4:	adc	r2, r2, r2
   14ec8:	subcs	r0, r0, r1, lsl #18
   14ecc:	cmp	r0, r1, lsl #17
   14ed0:	adc	r2, r2, r2
   14ed4:	subcs	r0, r0, r1, lsl #17
   14ed8:	cmp	r0, r1, lsl #16
   14edc:	adc	r2, r2, r2
   14ee0:	subcs	r0, r0, r1, lsl #16
   14ee4:	cmp	r0, r1, lsl #15
   14ee8:	adc	r2, r2, r2
   14eec:	subcs	r0, r0, r1, lsl #15
   14ef0:	cmp	r0, r1, lsl #14
   14ef4:	adc	r2, r2, r2
   14ef8:	subcs	r0, r0, r1, lsl #14
   14efc:	cmp	r0, r1, lsl #13
   14f00:	adc	r2, r2, r2
   14f04:	subcs	r0, r0, r1, lsl #13
   14f08:	cmp	r0, r1, lsl #12
   14f0c:	adc	r2, r2, r2
   14f10:	subcs	r0, r0, r1, lsl #12
   14f14:	cmp	r0, r1, lsl #11
   14f18:	adc	r2, r2, r2
   14f1c:	subcs	r0, r0, r1, lsl #11
   14f20:	cmp	r0, r1, lsl #10
   14f24:	adc	r2, r2, r2
   14f28:	subcs	r0, r0, r1, lsl #10
   14f2c:	cmp	r0, r1, lsl #9
   14f30:	adc	r2, r2, r2
   14f34:	subcs	r0, r0, r1, lsl #9
   14f38:	cmp	r0, r1, lsl #8
   14f3c:	adc	r2, r2, r2
   14f40:	subcs	r0, r0, r1, lsl #8
   14f44:	cmp	r0, r1, lsl #7
   14f48:	adc	r2, r2, r2
   14f4c:	subcs	r0, r0, r1, lsl #7
   14f50:	cmp	r0, r1, lsl #6
   14f54:	adc	r2, r2, r2
   14f58:	subcs	r0, r0, r1, lsl #6
   14f5c:	cmp	r0, r1, lsl #5
   14f60:	adc	r2, r2, r2
   14f64:	subcs	r0, r0, r1, lsl #5
   14f68:	cmp	r0, r1, lsl #4
   14f6c:	adc	r2, r2, r2
   14f70:	subcs	r0, r0, r1, lsl #4
   14f74:	cmp	r0, r1, lsl #3
   14f78:	adc	r2, r2, r2
   14f7c:	subcs	r0, r0, r1, lsl #3
   14f80:	cmp	r0, r1, lsl #2
   14f84:	adc	r2, r2, r2
   14f88:	subcs	r0, r0, r1, lsl #2
   14f8c:	cmp	r0, r1, lsl #1
   14f90:	adc	r2, r2, r2
   14f94:	subcs	r0, r0, r1, lsl #1
   14f98:	cmp	r0, r1
   14f9c:	adc	r2, r2, r2
   14fa0:	subcs	r0, r0, r1
   14fa4:	mov	r0, r2
   14fa8:	bx	lr
   14fac:	moveq	r0, #1
   14fb0:	movne	r0, #0
   14fb4:	bx	lr
   14fb8:	clz	r2, r1
   14fbc:	rsb	r2, r2, #31
   14fc0:	lsr	r0, r0, r2
   14fc4:	bx	lr
   14fc8:	cmp	r0, #0
   14fcc:	mvnne	r0, #0
   14fd0:	b	15270 <__assert_fail@plt+0x43b4>
   14fd4:	cmp	r1, #0
   14fd8:	beq	14fc8 <__assert_fail@plt+0x410c>
   14fdc:	push	{r0, r1, lr}
   14fe0:	bl	14de8 <__assert_fail@plt+0x3f2c>
   14fe4:	pop	{r1, r2, lr}
   14fe8:	mul	r3, r2, r0
   14fec:	sub	r1, r1, r3
   14ff0:	bx	lr
   14ff4:	cmp	r1, #0
   14ff8:	beq	15204 <__assert_fail@plt+0x4348>
   14ffc:	eor	ip, r0, r1
   15000:	rsbmi	r1, r1, #0
   15004:	subs	r2, r1, #1
   15008:	beq	151d0 <__assert_fail@plt+0x4314>
   1500c:	movs	r3, r0
   15010:	rsbmi	r3, r0, #0
   15014:	cmp	r3, r1
   15018:	bls	151dc <__assert_fail@plt+0x4320>
   1501c:	tst	r1, r2
   15020:	beq	151ec <__assert_fail@plt+0x4330>
   15024:	clz	r2, r3
   15028:	clz	r0, r1
   1502c:	sub	r2, r0, r2
   15030:	rsbs	r2, r2, #31
   15034:	addne	r2, r2, r2, lsl #1
   15038:	mov	r0, #0
   1503c:	addne	pc, pc, r2, lsl #2
   15040:	nop			; (mov r0, r0)
   15044:	cmp	r3, r1, lsl #31
   15048:	adc	r0, r0, r0
   1504c:	subcs	r3, r3, r1, lsl #31
   15050:	cmp	r3, r1, lsl #30
   15054:	adc	r0, r0, r0
   15058:	subcs	r3, r3, r1, lsl #30
   1505c:	cmp	r3, r1, lsl #29
   15060:	adc	r0, r0, r0
   15064:	subcs	r3, r3, r1, lsl #29
   15068:	cmp	r3, r1, lsl #28
   1506c:	adc	r0, r0, r0
   15070:	subcs	r3, r3, r1, lsl #28
   15074:	cmp	r3, r1, lsl #27
   15078:	adc	r0, r0, r0
   1507c:	subcs	r3, r3, r1, lsl #27
   15080:	cmp	r3, r1, lsl #26
   15084:	adc	r0, r0, r0
   15088:	subcs	r3, r3, r1, lsl #26
   1508c:	cmp	r3, r1, lsl #25
   15090:	adc	r0, r0, r0
   15094:	subcs	r3, r3, r1, lsl #25
   15098:	cmp	r3, r1, lsl #24
   1509c:	adc	r0, r0, r0
   150a0:	subcs	r3, r3, r1, lsl #24
   150a4:	cmp	r3, r1, lsl #23
   150a8:	adc	r0, r0, r0
   150ac:	subcs	r3, r3, r1, lsl #23
   150b0:	cmp	r3, r1, lsl #22
   150b4:	adc	r0, r0, r0
   150b8:	subcs	r3, r3, r1, lsl #22
   150bc:	cmp	r3, r1, lsl #21
   150c0:	adc	r0, r0, r0
   150c4:	subcs	r3, r3, r1, lsl #21
   150c8:	cmp	r3, r1, lsl #20
   150cc:	adc	r0, r0, r0
   150d0:	subcs	r3, r3, r1, lsl #20
   150d4:	cmp	r3, r1, lsl #19
   150d8:	adc	r0, r0, r0
   150dc:	subcs	r3, r3, r1, lsl #19
   150e0:	cmp	r3, r1, lsl #18
   150e4:	adc	r0, r0, r0
   150e8:	subcs	r3, r3, r1, lsl #18
   150ec:	cmp	r3, r1, lsl #17
   150f0:	adc	r0, r0, r0
   150f4:	subcs	r3, r3, r1, lsl #17
   150f8:	cmp	r3, r1, lsl #16
   150fc:	adc	r0, r0, r0
   15100:	subcs	r3, r3, r1, lsl #16
   15104:	cmp	r3, r1, lsl #15
   15108:	adc	r0, r0, r0
   1510c:	subcs	r3, r3, r1, lsl #15
   15110:	cmp	r3, r1, lsl #14
   15114:	adc	r0, r0, r0
   15118:	subcs	r3, r3, r1, lsl #14
   1511c:	cmp	r3, r1, lsl #13
   15120:	adc	r0, r0, r0
   15124:	subcs	r3, r3, r1, lsl #13
   15128:	cmp	r3, r1, lsl #12
   1512c:	adc	r0, r0, r0
   15130:	subcs	r3, r3, r1, lsl #12
   15134:	cmp	r3, r1, lsl #11
   15138:	adc	r0, r0, r0
   1513c:	subcs	r3, r3, r1, lsl #11
   15140:	cmp	r3, r1, lsl #10
   15144:	adc	r0, r0, r0
   15148:	subcs	r3, r3, r1, lsl #10
   1514c:	cmp	r3, r1, lsl #9
   15150:	adc	r0, r0, r0
   15154:	subcs	r3, r3, r1, lsl #9
   15158:	cmp	r3, r1, lsl #8
   1515c:	adc	r0, r0, r0
   15160:	subcs	r3, r3, r1, lsl #8
   15164:	cmp	r3, r1, lsl #7
   15168:	adc	r0, r0, r0
   1516c:	subcs	r3, r3, r1, lsl #7
   15170:	cmp	r3, r1, lsl #6
   15174:	adc	r0, r0, r0
   15178:	subcs	r3, r3, r1, lsl #6
   1517c:	cmp	r3, r1, lsl #5
   15180:	adc	r0, r0, r0
   15184:	subcs	r3, r3, r1, lsl #5
   15188:	cmp	r3, r1, lsl #4
   1518c:	adc	r0, r0, r0
   15190:	subcs	r3, r3, r1, lsl #4
   15194:	cmp	r3, r1, lsl #3
   15198:	adc	r0, r0, r0
   1519c:	subcs	r3, r3, r1, lsl #3
   151a0:	cmp	r3, r1, lsl #2
   151a4:	adc	r0, r0, r0
   151a8:	subcs	r3, r3, r1, lsl #2
   151ac:	cmp	r3, r1, lsl #1
   151b0:	adc	r0, r0, r0
   151b4:	subcs	r3, r3, r1, lsl #1
   151b8:	cmp	r3, r1
   151bc:	adc	r0, r0, r0
   151c0:	subcs	r3, r3, r1
   151c4:	cmp	ip, #0
   151c8:	rsbmi	r0, r0, #0
   151cc:	bx	lr
   151d0:	teq	ip, r0
   151d4:	rsbmi	r0, r0, #0
   151d8:	bx	lr
   151dc:	movcc	r0, #0
   151e0:	asreq	r0, ip, #31
   151e4:	orreq	r0, r0, #1
   151e8:	bx	lr
   151ec:	clz	r2, r1
   151f0:	rsb	r2, r2, #31
   151f4:	cmp	ip, #0
   151f8:	lsr	r0, r3, r2
   151fc:	rsbmi	r0, r0, #0
   15200:	bx	lr
   15204:	cmp	r0, #0
   15208:	mvngt	r0, #-2147483648	; 0x80000000
   1520c:	movlt	r0, #-2147483648	; 0x80000000
   15210:	b	15270 <__assert_fail@plt+0x43b4>
   15214:	cmp	r1, #0
   15218:	beq	15204 <__assert_fail@plt+0x4348>
   1521c:	push	{r0, r1, lr}
   15220:	bl	14ffc <__assert_fail@plt+0x4140>
   15224:	pop	{r1, r2, lr}
   15228:	mul	r3, r2, r0
   1522c:	sub	r1, r1, r3
   15230:	bx	lr
   15234:	cmp	r3, #0
   15238:	cmpeq	r2, #0
   1523c:	bne	15254 <__assert_fail@plt+0x4398>
   15240:	cmp	r1, #0
   15244:	cmpeq	r0, #0
   15248:	mvnne	r1, #0
   1524c:	mvnne	r0, #0
   15250:	b	15270 <__assert_fail@plt+0x43b4>
   15254:	sub	sp, sp, #8
   15258:	push	{sp, lr}
   1525c:	bl	15280 <__assert_fail@plt+0x43c4>
   15260:	ldr	lr, [sp, #4]
   15264:	add	sp, sp, #8
   15268:	pop	{r2, r3}
   1526c:	bx	lr
   15270:	push	{r1, lr}
   15274:	mov	r0, #8
   15278:	bl	10c7c <raise@plt>
   1527c:	pop	{r1, pc}
   15280:	cmp	r1, r3
   15284:	push	{r4, r5, r6, r7, r8, r9, lr}
   15288:	cmpeq	r0, r2
   1528c:	mov	r4, r0
   15290:	mov	r5, r1
   15294:	ldr	r9, [sp, #28]
   15298:	movcc	r0, #0
   1529c:	movcc	r1, #0
   152a0:	bcc	15398 <__assert_fail@plt+0x44dc>
   152a4:	cmp	r3, #0
   152a8:	clzeq	ip, r2
   152ac:	clzne	ip, r3
   152b0:	addeq	ip, ip, #32
   152b4:	cmp	r5, #0
   152b8:	clzeq	r1, r4
   152bc:	addeq	r1, r1, #32
   152c0:	clzne	r1, r5
   152c4:	sub	ip, ip, r1
   152c8:	sub	lr, ip, #32
   152cc:	lsl	r7, r3, ip
   152d0:	rsb	r8, ip, #32
   152d4:	orr	r7, r7, r2, lsl lr
   152d8:	orr	r7, r7, r2, lsr r8
   152dc:	lsl	r6, r2, ip
   152e0:	cmp	r5, r7
   152e4:	cmpeq	r4, r6
   152e8:	movcc	r0, #0
   152ec:	movcc	r1, #0
   152f0:	bcc	1530c <__assert_fail@plt+0x4450>
   152f4:	mov	r3, #1
   152f8:	subs	r4, r4, r6
   152fc:	lsl	r1, r3, lr
   15300:	lsl	r0, r3, ip
   15304:	orr	r1, r1, r3, lsr r8
   15308:	sbc	r5, r5, r7
   1530c:	cmp	ip, #0
   15310:	beq	15398 <__assert_fail@plt+0x44dc>
   15314:	lsrs	r3, r7, #1
   15318:	rrx	r2, r6
   1531c:	mov	r6, ip
   15320:	b	15344 <__assert_fail@plt+0x4488>
   15324:	subs	r4, r4, r2
   15328:	sbc	r5, r5, r3
   1532c:	adds	r4, r4, r4
   15330:	adc	r5, r5, r5
   15334:	adds	r4, r4, #1
   15338:	adc	r5, r5, #0
   1533c:	subs	r6, r6, #1
   15340:	beq	15360 <__assert_fail@plt+0x44a4>
   15344:	cmp	r5, r3
   15348:	cmpeq	r4, r2
   1534c:	bcs	15324 <__assert_fail@plt+0x4468>
   15350:	adds	r4, r4, r4
   15354:	adc	r5, r5, r5
   15358:	subs	r6, r6, #1
   1535c:	bne	15344 <__assert_fail@plt+0x4488>
   15360:	lsr	r6, r4, ip
   15364:	lsr	r7, r5, ip
   15368:	orr	r6, r6, r5, lsl r8
   1536c:	adds	r2, r0, r4
   15370:	orr	r6, r6, r5, lsr lr
   15374:	adc	r3, r1, r5
   15378:	lsl	r1, r7, ip
   1537c:	orr	r1, r1, r6, lsl lr
   15380:	lsl	r0, r6, ip
   15384:	orr	r1, r1, r6, lsr r8
   15388:	subs	r0, r2, r0
   1538c:	mov	r4, r6
   15390:	mov	r5, r7
   15394:	sbc	r1, r3, r1
   15398:	cmp	r9, #0
   1539c:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   153a0:	strd	r4, [r9]
   153a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   153a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153ac:	mov	r7, r0
   153b0:	ldr	r6, [pc, #72]	; 15400 <__assert_fail@plt+0x4544>
   153b4:	ldr	r5, [pc, #72]	; 15404 <__assert_fail@plt+0x4548>
   153b8:	add	r6, pc, r6
   153bc:	add	r5, pc, r5
   153c0:	sub	r6, r6, r5
   153c4:	mov	r8, r1
   153c8:	mov	r9, r2
   153cc:	bl	10c44 <calloc@plt-0x20>
   153d0:	asrs	r6, r6, #2
   153d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   153d8:	mov	r4, #0
   153dc:	add	r4, r4, #1
   153e0:	ldr	r3, [r5], #4
   153e4:	mov	r2, r9
   153e8:	mov	r1, r8
   153ec:	mov	r0, r7
   153f0:	blx	r3
   153f4:	cmp	r6, r4
   153f8:	bne	153dc <__assert_fail@plt+0x4520>
   153fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15400:	andeq	r0, r1, r0, asr fp
   15404:	andeq	r0, r1, r8, asr #22
   15408:	bx	lr
   1540c:	ldr	r3, [pc, #12]	; 15420 <__assert_fail@plt+0x4564>
   15410:	mov	r1, #0
   15414:	add	r3, pc, r3
   15418:	ldr	r2, [r3]
   1541c:	b	10e14 <__cxa_atexit@plt>
   15420:	andeq	r0, r1, r4, asr #25

Disassembly of section .fini:

00015424 <.fini>:
   15424:	push	{r3, lr}
   15428:	pop	{r3, pc}
