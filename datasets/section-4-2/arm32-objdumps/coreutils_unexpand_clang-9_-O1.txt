
../repos/coreutils/src/unexpand:     file format elf32-littlearm


Disassembly of section .init:

00010de8 <.init>:
   10de8:	push	{r3, lr}
   10dec:	bl	110a8 <__assert_fail@plt+0x48>
   10df0:	pop	{r3, pc}

Disassembly of section .plt:

00010df4 <calloc@plt-0x14>:
   10df4:	push	{lr}		; (str lr, [sp, #-4]!)
   10df8:	ldr	lr, [pc, #4]	; 10e04 <calloc@plt-0x4>
   10dfc:	add	lr, pc, lr
   10e00:	ldr	pc, [lr, #8]!
   10e04:	strdeq	r6, [r1], -ip

00010e08 <calloc@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #508]!	; 0x1fc

00010e14 <fputs_unlocked@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e20 <raise@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #492]!	; 0x1ec

00010e2c <strcmp@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #484]!	; 0x1e4

00010e38 <posix_fadvise64@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #476]!	; 0x1dc

00010e44 <fflush@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #468]!	; 0x1d4

00010e50 <free@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #460]!	; 0x1cc

00010e5c <_exit@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #452]!	; 0x1c4

00010e68 <memcpy@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #444]!	; 0x1bc

00010e74 <mbsinit@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #436]!	; 0x1b4

00010e80 <fwrite_unlocked@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #428]!	; 0x1ac

00010e8c <getc_unlocked@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #420]!	; 0x1a4

00010e98 <dcgettext@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #412]!	; 0x19c

00010ea4 <realloc@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #404]!	; 0x194

00010eb0 <textdomain@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #396]!	; 0x18c

00010ebc <iswprint@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #388]!	; 0x184

00010ec8 <fwrite@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #380]!	; 0x17c

00010ed4 <lseek64@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #372]!	; 0x174

00010ee0 <__ctype_get_mb_cur_max@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #364]!	; 0x16c

00010eec <__fpending@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #356]!	; 0x164

00010ef8 <ferror_unlocked@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #348]!	; 0x15c

00010f04 <mbrtowc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #340]!	; 0x154

00010f10 <error@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #332]!	; 0x14c

00010f1c <malloc@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #324]!	; 0x144

00010f28 <__libc_start_main@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #316]!	; 0x13c

00010f34 <__freading@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #308]!	; 0x134

00010f40 <__gmon_start__@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #300]!	; 0x12c

00010f4c <getopt_long@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #292]!	; 0x124

00010f58 <__ctype_b_loc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #284]!	; 0x11c

00010f64 <exit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #276]!	; 0x114

00010f70 <bcmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #268]!	; 0x10c

00010f7c <strlen@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #260]!	; 0x104

00010f88 <__errno_location@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #252]!	; 0xfc

00010f94 <__cxa_atexit@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #244]!	; 0xf4

00010fa0 <memset@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #236]!	; 0xec

00010fac <__printf_chk@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #228]!	; 0xe4

00010fb8 <fileno@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #220]!	; 0xdc

00010fc4 <__fprintf_chk@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #212]!	; 0xd4

00010fd0 <fclose@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #204]!	; 0xcc

00010fdc <fseeko64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #196]!	; 0xc4

00010fe8 <setlocale@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #188]!	; 0xbc

00010ff4 <strrchr@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #180]!	; 0xb4

00011000 <nl_langinfo@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #172]!	; 0xac

0001100c <clearerr_unlocked@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #164]!	; 0xa4

00011018 <fopen64@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #156]!	; 0x9c

00011024 <bindtextdomain@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #148]!	; 0x94

00011030 <strncmp@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #140]!	; 0x8c

0001103c <abort@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #132]!	; 0x84

00011048 <putchar_unlocked@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #124]!	; 0x7c

00011054 <strspn@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #116]!	; 0x74

00011060 <__assert_fail@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #108]!	; 0x6c

Disassembly of section .text:

0001106c <.text>:
   1106c:	mov	fp, #0
   11070:	mov	lr, #0
   11074:	pop	{r1}		; (ldr r1, [sp], #4)
   11078:	mov	r2, sp
   1107c:	push	{r2}		; (str r2, [sp, #-4]!)
   11080:	push	{r0}		; (str r0, [sp, #-4]!)
   11084:	ldr	ip, [pc, #16]	; 1109c <__assert_fail@plt+0x3c>
   11088:	push	{ip}		; (str ip, [sp, #-4]!)
   1108c:	ldr	r0, [pc, #12]	; 110a0 <__assert_fail@plt+0x40>
   11090:	ldr	r3, [pc, #12]	; 110a4 <__assert_fail@plt+0x44>
   11094:	bl	10f28 <__libc_start_main@plt>
   11098:	bl	1103c <abort@plt>
   1109c:	andeq	r5, r1, r0, lsr #9
   110a0:	andeq	r1, r1, r8, asr r4
   110a4:	andeq	r5, r1, r0, asr #8
   110a8:	ldr	r3, [pc, #20]	; 110c4 <__assert_fail@plt+0x64>
   110ac:	ldr	r2, [pc, #20]	; 110c8 <__assert_fail@plt+0x68>
   110b0:	add	r3, pc, r3
   110b4:	ldr	r2, [r3, r2]
   110b8:	cmp	r2, #0
   110bc:	bxeq	lr
   110c0:	b	10f40 <__gmon_start__@plt>
   110c4:	andeq	r5, r1, r8, asr #30
   110c8:	ldrdeq	r0, [r0], -r8
   110cc:	ldr	r0, [pc, #24]	; 110ec <__assert_fail@plt+0x8c>
   110d0:	ldr	r3, [pc, #24]	; 110f0 <__assert_fail@plt+0x90>
   110d4:	cmp	r3, r0
   110d8:	bxeq	lr
   110dc:	ldr	r3, [pc, #16]	; 110f4 <__assert_fail@plt+0x94>
   110e0:	cmp	r3, #0
   110e4:	bxeq	lr
   110e8:	bx	r3
   110ec:	andeq	r7, r2, r8, lsr r1
   110f0:	andeq	r7, r2, r8, lsr r1
   110f4:	andeq	r0, r0, r0
   110f8:	ldr	r0, [pc, #36]	; 11124 <__assert_fail@plt+0xc4>
   110fc:	ldr	r1, [pc, #36]	; 11128 <__assert_fail@plt+0xc8>
   11100:	sub	r1, r1, r0
   11104:	asr	r1, r1, #2
   11108:	add	r1, r1, r1, lsr #31
   1110c:	asrs	r1, r1, #1
   11110:	bxeq	lr
   11114:	ldr	r3, [pc, #16]	; 1112c <__assert_fail@plt+0xcc>
   11118:	cmp	r3, #0
   1111c:	bxeq	lr
   11120:	bx	r3
   11124:	andeq	r7, r2, r8, lsr r1
   11128:	andeq	r7, r2, r8, lsr r1
   1112c:	andeq	r0, r0, r0
   11130:	push	{r4, lr}
   11134:	ldr	r4, [pc, #24]	; 11154 <__assert_fail@plt+0xf4>
   11138:	ldrb	r3, [r4]
   1113c:	cmp	r3, #0
   11140:	popne	{r4, pc}
   11144:	bl	110cc <__assert_fail@plt+0x6c>
   11148:	mov	r3, #1
   1114c:	strb	r3, [r4]
   11150:	pop	{r4, pc}
   11154:	andeq	r7, r2, ip, asr r1
   11158:	b	110f8 <__assert_fail@plt+0x98>
   1115c:	push	{fp, lr}
   11160:	mov	fp, sp
   11164:	mov	r4, r0
   11168:	cmp	r0, #0
   1116c:	bne	1122c <__assert_fail@plt+0x1cc>
   11170:	movw	r1, #21747	; 0x54f3
   11174:	movt	r1, #1
   11178:	mov	r0, #0
   1117c:	mov	r2, #5
   11180:	bl	10e98 <dcgettext@plt>
   11184:	mov	r1, r0
   11188:	movw	r0, #29092	; 0x71a4
   1118c:	movt	r0, #2
   11190:	ldr	r2, [r0]
   11194:	mov	r0, #1
   11198:	bl	10fac <__printf_chk@plt>
   1119c:	movw	r1, #21780	; 0x5514
   111a0:	movt	r1, #1
   111a4:	mov	r0, #0
   111a8:	mov	r2, #5
   111ac:	bl	10e98 <dcgettext@plt>
   111b0:	movw	r5, #29012	; 0x7154
   111b4:	movt	r5, #2
   111b8:	ldr	r1, [r5]
   111bc:	bl	10e14 <fputs_unlocked@plt>
   111c0:	bl	11270 <__assert_fail@plt+0x210>
   111c4:	bl	112a0 <__assert_fail@plt+0x240>
   111c8:	movw	r1, #21846	; 0x5556
   111cc:	movt	r1, #1
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	bl	10e98 <dcgettext@plt>
   111dc:	ldr	r1, [r5]
   111e0:	bl	10e14 <fputs_unlocked@plt>
   111e4:	bl	12408 <__assert_fail@plt+0x13a8>
   111e8:	movw	r1, #22067	; 0x5633
   111ec:	movt	r1, #1
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	bl	10e98 <dcgettext@plt>
   111fc:	ldr	r1, [r5]
   11200:	bl	10e14 <fputs_unlocked@plt>
   11204:	movw	r1, #22112	; 0x5660
   11208:	movt	r1, #1
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	bl	10e98 <dcgettext@plt>
   11218:	ldr	r1, [r5]
   1121c:	bl	10e14 <fputs_unlocked@plt>
   11220:	bl	112d0 <__assert_fail@plt+0x270>
   11224:	mov	r0, r4
   11228:	bl	10f64 <exit@plt>
   1122c:	movw	r0, #29000	; 0x7148
   11230:	movt	r0, #2
   11234:	ldr	r5, [r0]
   11238:	movw	r1, #21708	; 0x54cc
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10e98 <dcgettext@plt>
   1124c:	mov	r2, r0
   11250:	movw	r0, #29092	; 0x71a4
   11254:	movt	r0, #2
   11258:	ldr	r3, [r0]
   1125c:	mov	r0, r5
   11260:	mov	r1, #1
   11264:	bl	10fc4 <__fprintf_chk@plt>
   11268:	mov	r0, r4
   1126c:	bl	10f64 <exit@plt>
   11270:	push	{fp, lr}
   11274:	mov	fp, sp
   11278:	movw	r1, #22272	; 0x5700
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10e98 <dcgettext@plt>
   1128c:	movw	r1, #29012	; 0x7154
   11290:	movt	r1, #2
   11294:	ldr	r1, [r1]
   11298:	pop	{fp, lr}
   1129c:	b	10e14 <fputs_unlocked@plt>
   112a0:	push	{fp, lr}
   112a4:	mov	fp, sp
   112a8:	movw	r1, #22328	; 0x5738
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10e98 <dcgettext@plt>
   112bc:	movw	r1, #29012	; 0x7154
   112c0:	movt	r1, #2
   112c4:	ldr	r1, [r1]
   112c8:	pop	{fp, lr}
   112cc:	b	10e14 <fputs_unlocked@plt>
   112d0:	push	{r4, r5, r6, sl, fp, lr}
   112d4:	add	fp, sp, #16
   112d8:	sub	sp, sp, #56	; 0x38
   112dc:	movw	r0, #22880	; 0x5960
   112e0:	movt	r0, #1
   112e4:	add	r1, r0, #32
   112e8:	mov	r2, #48	; 0x30
   112ec:	vld1.64	{d16-d17}, [r1]
   112f0:	mov	r6, sp
   112f4:	add	r1, r6, #32
   112f8:	add	r3, r0, #16
   112fc:	vld1.64	{d18-d19}, [r0], r2
   11300:	vld1.64	{d20-d21}, [r3]
   11304:	vldr	d22, [r0]
   11308:	vst1.64	{d16-d17}, [r1]
   1130c:	add	r0, r6, #16
   11310:	vst1.64	{d20-d21}, [r0]
   11314:	mov	r0, r6
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	vstr	d22, [r0]
   11320:	ldr	r1, [sp]
   11324:	cmp	r1, #0
   11328:	movw	r4, #22166	; 0x5696
   1132c:	movt	r4, #1
   11330:	beq	11358 <__assert_fail@plt+0x2f8>
   11334:	mov	r6, sp
   11338:	movw	r5, #22166	; 0x5696
   1133c:	movt	r5, #1
   11340:	mov	r0, r5
   11344:	bl	10e2c <strcmp@plt>
   11348:	cmp	r0, #0
   1134c:	ldrne	r1, [r6, #8]!
   11350:	cmpne	r1, #0
   11354:	bne	11340 <__assert_fail@plt+0x2e0>
   11358:	ldr	r5, [r6, #4]
   1135c:	movw	r1, #22498	; 0x57e2
   11360:	movt	r1, #1
   11364:	mov	r0, #0
   11368:	mov	r2, #5
   1136c:	bl	10e98 <dcgettext@plt>
   11370:	mov	r1, r0
   11374:	movw	r2, #22214	; 0x56c6
   11378:	movt	r2, #1
   1137c:	movw	r3, #22521	; 0x57f9
   11380:	movt	r3, #1
   11384:	mov	r0, #1
   11388:	bl	10fac <__printf_chk@plt>
   1138c:	cmp	r5, #0
   11390:	moveq	r5, r4
   11394:	mov	r0, #5
   11398:	mov	r1, #0
   1139c:	bl	10fe8 <setlocale@plt>
   113a0:	cmp	r0, #0
   113a4:	beq	113e4 <__assert_fail@plt+0x384>
   113a8:	movw	r1, #22561	; 0x5821
   113ac:	movt	r1, #1
   113b0:	mov	r2, #3
   113b4:	bl	11030 <strncmp@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	113e4 <__assert_fail@plt+0x384>
   113c0:	movw	r1, #22565	; 0x5825
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10e98 <dcgettext@plt>
   113d4:	movw	r1, #29012	; 0x7154
   113d8:	movt	r1, #2
   113dc:	ldr	r1, [r1]
   113e0:	bl	10e14 <fputs_unlocked@plt>
   113e4:	movw	r1, #22636	; 0x586c
   113e8:	movt	r1, #1
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	bl	10e98 <dcgettext@plt>
   113f8:	mov	r1, r0
   113fc:	movw	r2, #22521	; 0x57f9
   11400:	movt	r2, #1
   11404:	mov	r0, #1
   11408:	mov	r3, r4
   1140c:	bl	10fac <__printf_chk@plt>
   11410:	movw	r0, #22431	; 0x579f
   11414:	movt	r0, #1
   11418:	movw	r6, #22713	; 0x58b9
   1141c:	movt	r6, #1
   11420:	cmp	r5, r4
   11424:	moveq	r6, r0
   11428:	movw	r1, #22663	; 0x5887
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10e98 <dcgettext@plt>
   1143c:	mov	r1, r0
   11440:	mov	r0, #1
   11444:	mov	r2, r5
   11448:	mov	r3, r6
   1144c:	sub	sp, fp, #16
   11450:	pop	{r4, r5, r6, sl, fp, lr}
   11454:	b	10fac <__printf_chk@plt>
   11458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1145c:	add	fp, sp, #28
   11460:	sub	sp, sp, #12
   11464:	mov	r4, r1
   11468:	mov	r5, r0
   1146c:	ldr	r0, [r1]
   11470:	bl	12774 <__assert_fail@plt+0x1714>
   11474:	movw	r1, #22713	; 0x58b9
   11478:	movt	r1, #1
   1147c:	mov	r0, #6
   11480:	bl	10fe8 <setlocale@plt>
   11484:	movw	r6, #22218	; 0x56ca
   11488:	movt	r6, #1
   1148c:	movw	r1, #22175	; 0x569f
   11490:	movt	r1, #1
   11494:	mov	r0, r6
   11498:	bl	11024 <bindtextdomain@plt>
   1149c:	mov	r0, r6
   114a0:	bl	10eb0 <textdomain@plt>
   114a4:	movw	r0, #9332	; 0x2474
   114a8:	movt	r0, #1
   114ac:	bl	154a4 <__assert_fail@plt+0x4444>
   114b0:	movw	r8, #22199	; 0x56b7
   114b4:	movt	r8, #1
   114b8:	movw	r9, #22784	; 0x5900
   114bc:	movt	r9, #1
   114c0:	mov	sl, #0
   114c4:	mov	r0, #0
   114c8:	str	r0, [sp, #8]
   114cc:	mov	r0, #0
   114d0:	str	r0, [sp]
   114d4:	mov	r0, r5
   114d8:	mov	r1, r4
   114dc:	mov	r2, r8
   114e0:	mov	r3, r9
   114e4:	bl	10f4c <getopt_long@plt>
   114e8:	cmp	r0, #96	; 0x60
   114ec:	ble	1150c <__assert_fail@plt+0x4ac>
   114f0:	cmp	r0, #97	; 0x61
   114f4:	beq	11558 <__assert_fail@plt+0x4f8>
   114f8:	cmp	r0, #116	; 0x74
   114fc:	beq	1156c <__assert_fail@plt+0x50c>
   11500:	cmp	r0, #256	; 0x100
   11504:	beq	115f8 <__assert_fail@plt+0x598>
   11508:	b	11598 <__assert_fail@plt+0x538>
   1150c:	cmp	r0, #43	; 0x2b
   11510:	bgt	11530 <__assert_fail@plt+0x4d0>
   11514:	cmn	r0, #1
   11518:	beq	11600 <__assert_fail@plt+0x5a0>
   1151c:	cmn	r0, #3
   11520:	beq	11670 <__assert_fail@plt+0x610>
   11524:	cmn	r0, #2
   11528:	bne	11598 <__assert_fail@plt+0x538>
   1152c:	b	116b8 <__assert_fail@plt+0x658>
   11530:	cmp	r0, #44	; 0x2c
   11534:	bne	11590 <__assert_fail@plt+0x530>
   11538:	tst	sl, #1
   1153c:	mov	sl, #0
   11540:	beq	114cc <__assert_fail@plt+0x46c>
   11544:	mov	r0, r6
   11548:	mov	r1, r7
   1154c:	bl	11a14 <__assert_fail@plt+0x9b4>
   11550:	mov	sl, #0
   11554:	b	114cc <__assert_fail@plt+0x46c>
   11558:	movw	r0, #29024	; 0x7160
   1155c:	movt	r0, #2
   11560:	mov	r1, #1
   11564:	strb	r1, [r0]
   11568:	b	114cc <__assert_fail@plt+0x46c>
   1156c:	movw	r0, #29024	; 0x7160
   11570:	movt	r0, #2
   11574:	mov	r1, #1
   11578:	strb	r1, [r0]
   1157c:	movw	r0, #29016	; 0x7158
   11580:	movt	r0, #2
   11584:	ldr	r0, [r0]
   11588:	bl	11b04 <__assert_fail@plt+0xaa4>
   1158c:	b	114cc <__assert_fail@plt+0x46c>
   11590:	cmp	r0, #63	; 0x3f
   11594:	beq	11668 <__assert_fail@plt+0x608>
   11598:	ands	r1, sl, #1
   1159c:	moveq	r7, r1
   115a0:	moveq	r6, r1
   115a4:	movw	r1, #39321	; 0x9999
   115a8:	movt	r1, #39321	; 0x9999
   115ac:	subs	r1, r1, r6
   115b0:	movw	r1, #39321	; 0x9999
   115b4:	movt	r1, #6553	; 0x1999
   115b8:	sbcs	r1, r1, r7
   115bc:	bcc	116c0 <__assert_fail@plt+0x660>
   115c0:	mov	r1, #10
   115c4:	umull	r1, r2, r6, r1
   115c8:	add	r3, r7, r7, lsl #2
   115cc:	add	r2, r2, r3, lsl #1
   115d0:	sub	r0, r0, #48	; 0x30
   115d4:	adds	r1, r1, r0
   115d8:	adc	r0, r2, r0, asr #31
   115dc:	mov	sl, #1
   115e0:	subs	r2, r1, r6
   115e4:	sbcs	r2, r0, r7
   115e8:	mov	r6, r1
   115ec:	mov	r7, r0
   115f0:	bcs	114cc <__assert_fail@plt+0x46c>
   115f4:	b	116c0 <__assert_fail@plt+0x660>
   115f8:	mov	r0, #1
   115fc:	b	114c8 <__assert_fail@plt+0x468>
   11600:	ldr	r0, [sp, #8]
   11604:	tst	r0, #1
   11608:	movne	r0, #0
   1160c:	movwne	r1, #29024	; 0x7160
   11610:	movtne	r1, #2
   11614:	strbne	r0, [r1]
   11618:	tst	sl, #1
   1161c:	beq	1162c <__assert_fail@plt+0x5cc>
   11620:	mov	r0, r6
   11624:	mov	r1, r7
   11628:	bl	11a14 <__assert_fail@plt+0x9b4>
   1162c:	bl	11f28 <__assert_fail@plt+0xec8>
   11630:	movw	r0, #28992	; 0x7140
   11634:	movt	r0, #2
   11638:	ldr	r1, [r0]
   1163c:	mov	r0, #0
   11640:	cmp	r1, r5
   11644:	addlt	r0, r4, r1, lsl #2
   11648:	bl	12198 <__assert_fail@plt+0x1138>
   1164c:	bl	116e4 <__assert_fail@plt+0x684>
   11650:	bl	123b8 <__assert_fail@plt+0x1358>
   11654:	movw	r0, #29028	; 0x7164
   11658:	movt	r0, #2
   1165c:	ldr	r0, [r0]
   11660:	sub	sp, fp, #28
   11664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11668:	mov	r0, #1
   1166c:	bl	1115c <__assert_fail@plt+0xfc>
   11670:	movw	r0, #28912	; 0x70f0
   11674:	movt	r0, #2
   11678:	ldr	r3, [r0]
   1167c:	movw	r0, #29012	; 0x7154
   11680:	movt	r0, #2
   11684:	ldr	r0, [r0]
   11688:	mov	r1, #0
   1168c:	movw	r2, #22228	; 0x56d4
   11690:	movt	r2, #1
   11694:	str	r2, [sp]
   11698:	str	r1, [sp, #4]
   1169c:	movw	r1, #22166	; 0x5696
   116a0:	movt	r1, #1
   116a4:	movw	r2, #22214	; 0x56c6
   116a8:	movt	r2, #1
   116ac:	bl	14740 <__assert_fail@plt+0x36e0>
   116b0:	mov	r0, #0
   116b4:	bl	10f64 <exit@plt>
   116b8:	mov	r0, #0
   116bc:	bl	1115c <__assert_fail@plt+0xfc>
   116c0:	movw	r1, #22244	; 0x56e4
   116c4:	movt	r1, #1
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	bl	10e98 <dcgettext@plt>
   116d4:	mov	r2, r0
   116d8:	mov	r0, #1
   116dc:	mov	r1, #0
   116e0:	bl	10f10 <error@plt>
   116e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116e8:	add	fp, sp, #28
   116ec:	sub	sp, sp, #28
   116f0:	mov	r0, #0
   116f4:	bl	121c8 <__assert_fail@plt+0x1168>
   116f8:	cmp	r0, #0
   116fc:	beq	119bc <__assert_fail@plt+0x95c>
   11700:	mov	r4, r0
   11704:	movw	r0, #29400	; 0x72d8
   11708:	movt	r0, #2
   1170c:	ldr	r0, [r0]
   11710:	bl	14848 <__assert_fail@plt+0x37e8>
   11714:	str	r0, [sp]
   11718:	mov	r5, #0
   1171c:	str	r5, [sp, #24]
   11720:	mov	r0, #1
   11724:	str	r0, [sp, #16]
   11728:	mov	r8, #0
   1172c:	mov	r0, #0
   11730:	str	r0, [sp, #4]
   11734:	mov	r6, #1
   11738:	mov	r9, #0
   1173c:	mov	r0, r4
   11740:	bl	10e8c <getc_unlocked@plt>
   11744:	mov	r7, r0
   11748:	cmn	r0, #1
   1174c:	bgt	11768 <__assert_fail@plt+0x708>
   11750:	mov	r0, r4
   11754:	bl	121c8 <__assert_fail@plt+0x1168>
   11758:	mov	r4, r0
   1175c:	cmp	r0, #0
   11760:	bne	1173c <__assert_fail@plt+0x6dc>
   11764:	mov	r4, #0
   11768:	ldr	r0, [sp, #16]
   1176c:	tst	r0, #1
   11770:	beq	117ec <__assert_fail@plt+0x78c>
   11774:	bl	10f58 <__ctype_b_loc@plt>
   11778:	ldr	r0, [r0]
   1177c:	add	r0, r0, r7, lsl #1
   11780:	ldrh	r0, [r0]
   11784:	ands	r0, r0, #1
   11788:	str	r0, [sp, #8]
   1178c:	beq	11804 <__assert_fail@plt+0x7a4>
   11790:	mov	r0, r5
   11794:	mov	r1, r8
   11798:	add	r2, sp, #24
   1179c:	add	r3, sp, #23
   117a0:	bl	12090 <__assert_fail@plt+0x1030>
   117a4:	mov	sl, r1
   117a8:	ldrb	r1, [sp, #23]
   117ac:	clz	r1, r1
   117b0:	lsr	r1, r1, #5
   117b4:	ldr	r2, [sp, #16]
   117b8:	and	r1, r2, r1
   117bc:	mov	r3, r1
   117c0:	cmp	r1, #1
   117c4:	bne	11850 <__assert_fail@plt+0x7f0>
   117c8:	str	r0, [sp, #12]
   117cc:	subs	r0, r0, r5
   117d0:	sbcs	r0, sl, r8
   117d4:	bcc	119f0 <__assert_fail@plt+0x990>
   117d8:	cmp	r7, #9
   117dc:	bne	11920 <__assert_fail@plt+0x8c0>
   117e0:	cmp	r9, #0
   117e4:	bne	11958 <__assert_fail@plt+0x8f8>
   117e8:	b	11964 <__assert_fail@plt+0x904>
   117ec:	mov	r0, #0
   117f0:	str	r0, [sp, #16]
   117f4:	mov	sl, r8
   117f8:	cmn	r7, #1
   117fc:	bgt	11900 <__assert_fail@plt+0x8a0>
   11800:	b	119b4 <__assert_fail@plt+0x954>
   11804:	cmp	r7, #8
   11808:	bne	1185c <__assert_fail@plt+0x7fc>
   1180c:	ldr	r0, [sp, #24]
   11810:	cmp	r0, #0
   11814:	subne	r0, r0, #1
   11818:	str	r0, [sp, #24]
   1181c:	orr	r0, r5, r8
   11820:	subs	r1, r5, #1
   11824:	sbc	sl, r8, #0
   11828:	cmp	r0, #0
   1182c:	moveq	sl, r8
   11830:	moveq	r1, r5
   11834:	str	r1, [sp, #12]
   11838:	mov	r7, #8
   1183c:	mov	r8, #1
   11840:	ldr	r6, [sp, #8]
   11844:	cmp	r9, #0
   11848:	bne	11888 <__assert_fail@plt+0x828>
   1184c:	b	118d4 <__assert_fail@plt+0x874>
   11850:	str	r5, [sp, #12]
   11854:	mov	sl, r8
   11858:	b	11970 <__assert_fail@plt+0x910>
   1185c:	adds	r0, r5, #1
   11860:	str	r0, [sp, #12]
   11864:	adcs	sl, r8, #0
   11868:	mov	r0, #0
   1186c:	adc	r0, r0, #0
   11870:	mov	r8, #1
   11874:	cmp	r0, #1
   11878:	ldr	r6, [sp, #8]
   1187c:	beq	119f0 <__assert_fail@plt+0x990>
   11880:	cmp	r9, #0
   11884:	beq	118d4 <__assert_fail@plt+0x874>
   11888:	cmp	r9, #1
   1188c:	beq	118a8 <__assert_fail@plt+0x848>
   11890:	ldr	r0, [sp, #4]
   11894:	tst	r0, #1
   11898:	beq	118a8 <__assert_fail@plt+0x848>
   1189c:	ldr	r0, [sp]
   118a0:	mov	r1, #9
   118a4:	strb	r1, [r0]
   118a8:	movw	r0, #29012	; 0x7154
   118ac:	movt	r0, #2
   118b0:	ldr	r3, [r0]
   118b4:	ldr	r0, [sp]
   118b8:	mov	r1, #1
   118bc:	mov	r2, r9
   118c0:	bl	10e80 <fwrite_unlocked@plt>
   118c4:	mov	r1, #0
   118c8:	str	r1, [sp, #4]
   118cc:	cmp	r0, r9
   118d0:	bne	119c4 <__assert_fail@plt+0x964>
   118d4:	movw	r0, #29024	; 0x7160
   118d8:	movt	r0, #2
   118dc:	ldrb	r0, [r0]
   118e0:	orrs	r0, r6, r0
   118e4:	movwne	r0, #1
   118e8:	and	r0, r8, r0
   118ec:	str	r0, [sp, #16]
   118f0:	mov	r9, #0
   118f4:	ldr	r5, [sp, #12]
   118f8:	cmn	r7, #1
   118fc:	ble	119b4 <__assert_fail@plt+0x954>
   11900:	mov	r0, r7
   11904:	bl	11048 <putchar_unlocked@plt>
   11908:	cmn	r0, #1
   1190c:	mov	r8, sl
   11910:	ble	119c4 <__assert_fail@plt+0x964>
   11914:	cmp	r7, #10
   11918:	bne	1173c <__assert_fail@plt+0x6dc>
   1191c:	b	11718 <__assert_fail@plt+0x6b8>
   11920:	adds	r5, r5, #1
   11924:	ldr	r0, [sp, #12]
   11928:	eor	r0, r5, r0
   1192c:	adc	r8, r8, #0
   11930:	eor	r1, r8, sl
   11934:	orrs	r0, r0, r1
   11938:	mov	r1, r0
   1193c:	movwne	r1, #1
   11940:	mvn	r2, r6
   11944:	orr	r1, r2, r1
   11948:	tst	r1, #1
   1194c:	bne	11984 <__assert_fail@plt+0x924>
   11950:	str	r5, [sp, #12]
   11954:	mov	sl, r8
   11958:	ldr	r0, [sp]
   1195c:	mov	r1, #9
   11960:	strb	r1, [r0]
   11964:	ldr	r0, [sp, #4]
   11968:	and	r9, r0, #1
   1196c:	mov	r7, #9
   11970:	ldr	r6, [sp, #8]
   11974:	mov	r8, r3
   11978:	cmp	r9, #0
   1197c:	bne	11888 <__assert_fail@plt+0x828>
   11980:	b	118d4 <__assert_fail@plt+0x874>
   11984:	ldr	r1, [sp]
   11988:	strb	r7, [r1, r9]
   1198c:	clz	r0, r0
   11990:	lsr	r0, r0, #5
   11994:	ldr	r1, [sp, #4]
   11998:	orr	r1, r1, r0
   1199c:	str	r1, [sp, #4]
   119a0:	add	r9, r9, #1
   119a4:	mov	r0, #1
   119a8:	str	r0, [sp, #16]
   119ac:	mov	r6, #1
   119b0:	b	11914 <__assert_fail@plt+0x8b4>
   119b4:	ldr	r0, [sp]
   119b8:	bl	126a4 <__assert_fail@plt+0x1644>
   119bc:	sub	sp, fp, #28
   119c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119c4:	bl	10f88 <__errno_location@plt>
   119c8:	ldr	r4, [r0]
   119cc:	movw	r1, #22770	; 0x58f2
   119d0:	movt	r1, #1
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	bl	10e98 <dcgettext@plt>
   119e0:	mov	r2, r0
   119e4:	mov	r0, #1
   119e8:	mov	r1, r4
   119ec:	bl	10f10 <error@plt>
   119f0:	movw	r1, #22747	; 0x58db
   119f4:	movt	r1, #1
   119f8:	mov	r0, #0
   119fc:	mov	r2, #5
   11a00:	bl	10e98 <dcgettext@plt>
   11a04:	mov	r2, r0
   11a08:	mov	r0, #1
   11a0c:	mov	r1, #0
   11a10:	bl	10f10 <error@plt>
   11a14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11a18:	add	fp, sp, #24
   11a1c:	mov	r4, r1
   11a20:	mov	r5, r0
   11a24:	movw	r9, #29032	; 0x7168
   11a28:	movt	r9, #2
   11a2c:	ldr	r0, [r9]
   11a30:	mov	r1, #0
   11a34:	cmp	r0, #0
   11a38:	movw	r8, #29036	; 0x716c
   11a3c:	movt	r8, #2
   11a40:	beq	11a54 <__assert_fail@plt+0x9f4>
   11a44:	ldr	r2, [r8]
   11a48:	add	r2, r2, r0, lsl #3
   11a4c:	ldrd	r2, [r2, #-8]
   11a50:	b	11a5c <__assert_fail@plt+0x9fc>
   11a54:	mov	r2, #0
   11a58:	mov	r3, #0
   11a5c:	subs	r7, r5, r2
   11a60:	sbcs	r6, r4, r3
   11a64:	adc	r1, r1, #0
   11a68:	rsbs	r1, r1, #1
   11a6c:	movwne	r6, #0
   11a70:	movwne	r7, #0
   11a74:	movw	r1, #29040	; 0x7170
   11a78:	movt	r1, #2
   11a7c:	ldr	r1, [r1]
   11a80:	cmp	r0, r1
   11a84:	bne	11aa0 <__assert_fail@plt+0xa40>
   11a88:	ldr	r0, [r8]
   11a8c:	movw	r1, #29040	; 0x7170
   11a90:	movt	r1, #2
   11a94:	mov	r2, #8
   11a98:	bl	1490c <__assert_fail@plt+0x38ac>
   11a9c:	str	r0, [r8]
   11aa0:	ldr	r0, [r9]
   11aa4:	add	r1, r0, #1
   11aa8:	str	r1, [r9]
   11aac:	ldr	r1, [r8]
   11ab0:	str	r5, [r1, r0, lsl #3]!
   11ab4:	str	r4, [r1, #4]
   11ab8:	movw	r0, #29400	; 0x72d8
   11abc:	movt	r0, #2
   11ac0:	ldr	r1, [r0]
   11ac4:	subs	r1, r1, r7
   11ac8:	rscs	r1, r6, #0
   11acc:	bcs	11adc <__assert_fail@plt+0xa7c>
   11ad0:	cmp	r6, #0
   11ad4:	bne	11ae0 <__assert_fail@plt+0xa80>
   11ad8:	str	r7, [r0]
   11adc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ae0:	movw	r1, #22936	; 0x5998
   11ae4:	movt	r1, #1
   11ae8:	mov	r0, #0
   11aec:	mov	r2, #5
   11af0:	bl	10e98 <dcgettext@plt>
   11af4:	mov	r2, r0
   11af8:	mov	r0, #1
   11afc:	mov	r1, #0
   11b00:	bl	10f10 <error@plt>
   11b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b08:	add	fp, sp, #28
   11b0c:	sub	sp, sp, #12
   11b10:	mov	r8, r0
   11b14:	mov	sl, #0
   11b18:	mov	r7, #1
   11b1c:	mov	r0, #0
   11b20:	str	r0, [sp, #4]
   11b24:	mov	r5, #0
   11b28:	mov	r0, #0
   11b2c:	str	r0, [sp, #8]
   11b30:	mov	r0, #0
   11b34:	str	r0, [sp]
   11b38:	mov	r4, #0
   11b3c:	b	11b60 <__assert_fail@plt+0xb00>
   11b40:	mov	r0, sl
   11b44:	ldr	r1, [sp, #4]
   11b48:	bl	11a14 <__assert_fail@plt+0x9b4>
   11b4c:	mov	r5, #0
   11b50:	mov	r0, #0
   11b54:	str	r0, [sp, #8]
   11b58:	mov	r4, #0
   11b5c:	add	r8, r8, #1
   11b60:	ldrb	r9, [r8]
   11b64:	cmp	r9, #44	; 0x2c
   11b68:	beq	11bec <__assert_fail@plt+0xb8c>
   11b6c:	cmp	r9, #0
   11b70:	beq	11db8 <__assert_fail@plt+0xd58>
   11b74:	bl	10f58 <__ctype_b_loc@plt>
   11b78:	ldr	r6, [r0]
   11b7c:	mov	r0, r9
   11b80:	bl	11e5c <__assert_fail@plt+0xdfc>
   11b84:	ldrb	r0, [r6, r9, lsl #1]
   11b88:	tst	r0, #1
   11b8c:	bne	11bec <__assert_fail@plt+0xb8c>
   11b90:	cmp	r9, #43	; 0x2b
   11b94:	beq	11c40 <__assert_fail@plt+0xbe0>
   11b98:	cmp	r9, #47	; 0x2f
   11b9c:	bne	11ca0 <__assert_fail@plt+0xc40>
   11ba0:	mov	r0, #0
   11ba4:	tst	r4, #1
   11ba8:	beq	11d98 <__assert_fail@plt+0xd38>
   11bac:	str	r0, [sp, #8]
   11bb0:	mov	r0, #0
   11bb4:	movw	r1, #22959	; 0x59af
   11bb8:	movt	r1, #1
   11bbc:	mov	r2, #5
   11bc0:	bl	10e98 <dcgettext@plt>
   11bc4:	mov	r7, r0
   11bc8:	mov	r0, r8
   11bcc:	bl	13f68 <__assert_fail@plt+0x2f08>
   11bd0:	mov	r3, r0
   11bd4:	mov	r0, #0
   11bd8:	mov	r1, #0
   11bdc:	mov	r2, r7
   11be0:	bl	10f10 <error@plt>
   11be4:	mov	r5, #1
   11be8:	b	11c88 <__assert_fail@plt+0xc28>
   11bec:	tst	r4, #1
   11bf0:	beq	11b58 <__assert_fail@plt+0xaf8>
   11bf4:	tst	r5, #1
   11bf8:	beq	11c1c <__assert_fail@plt+0xbbc>
   11bfc:	mov	r0, sl
   11c00:	ldr	r1, [sp, #4]
   11c04:	bl	11e60 <__assert_fail@plt+0xe00>
   11c08:	mov	r5, #1
   11c0c:	cmp	r0, #0
   11c10:	mov	r4, #0
   11c14:	bne	11b5c <__assert_fail@plt+0xafc>
   11c18:	b	11dfc <__assert_fail@plt+0xd9c>
   11c1c:	ldr	r0, [sp, #8]
   11c20:	tst	r0, #1
   11c24:	beq	11b40 <__assert_fail@plt+0xae0>
   11c28:	mov	r0, sl
   11c2c:	ldr	r1, [sp, #4]
   11c30:	bl	11ec4 <__assert_fail@plt+0xe64>
   11c34:	cmp	r0, #0
   11c38:	bne	11c90 <__assert_fail@plt+0xc30>
   11c3c:	b	11dfc <__assert_fail@plt+0xd9c>
   11c40:	tst	r4, #1
   11c44:	beq	11c90 <__assert_fail@plt+0xc30>
   11c48:	mov	r5, #0
   11c4c:	mov	r0, #0
   11c50:	movw	r1, #23000	; 0x59d8
   11c54:	movt	r1, #1
   11c58:	mov	r2, #5
   11c5c:	bl	10e98 <dcgettext@plt>
   11c60:	mov	r7, r0
   11c64:	mov	r0, r8
   11c68:	bl	13f68 <__assert_fail@plt+0x2f08>
   11c6c:	mov	r3, r0
   11c70:	mov	r0, #0
   11c74:	mov	r1, #0
   11c78:	mov	r2, r7
   11c7c:	bl	10f10 <error@plt>
   11c80:	mov	r0, #1
   11c84:	str	r0, [sp, #8]
   11c88:	mov	r7, #0
   11c8c:	b	11d8c <__assert_fail@plt+0xd2c>
   11c90:	mov	r0, #1
   11c94:	str	r0, [sp, #8]
   11c98:	mov	r5, #0
   11c9c:	b	11b58 <__assert_fail@plt+0xaf8>
   11ca0:	sub	r0, r9, #48	; 0x30
   11ca4:	cmp	r0, #9
   11ca8:	bhi	11e20 <__assert_fail@plt+0xdc0>
   11cac:	ands	r1, r4, #1
   11cb0:	ldr	r2, [sp]
   11cb4:	moveq	r2, r8
   11cb8:	str	r2, [sp]
   11cbc:	mov	r2, r1
   11cc0:	ldr	r3, [sp, #4]
   11cc4:	movne	r2, r3
   11cc8:	movne	r1, sl
   11ccc:	movw	r3, #39321	; 0x9999
   11cd0:	movt	r3, #39321	; 0x9999
   11cd4:	subs	r3, r3, r1
   11cd8:	movw	r3, #39321	; 0x9999
   11cdc:	movt	r3, #6553	; 0x1999
   11ce0:	sbcs	r3, r3, r2
   11ce4:	bcc	11d1c <__assert_fail@plt+0xcbc>
   11ce8:	mov	r3, #10
   11cec:	mov	ip, r7
   11cf0:	umull	r3, r7, r1, r3
   11cf4:	add	r6, r2, r2, lsl #2
   11cf8:	add	r7, r7, r6, lsl #1
   11cfc:	adds	r3, r3, r0
   11d00:	adc	r0, r7, r0, asr #31
   11d04:	mov	r4, #1
   11d08:	subs	r7, r3, r1
   11d0c:	sbcs	r7, r0, r2
   11d10:	mov	sl, r1
   11d14:	str	r2, [sp, #4]
   11d18:	bcs	11da4 <__assert_fail@plt+0xd44>
   11d1c:	ldr	r7, [sp]
   11d20:	mov	r0, r7
   11d24:	movw	r1, #23041	; 0x5a01
   11d28:	movt	r1, #1
   11d2c:	bl	11054 <strspn@plt>
   11d30:	mov	r9, r0
   11d34:	mov	r0, r7
   11d38:	mov	r1, r9
   11d3c:	bl	14b80 <__assert_fail@plt+0x3b20>
   11d40:	mov	r6, r0
   11d44:	mov	r0, #0
   11d48:	movw	r1, #23052	; 0x5a0c
   11d4c:	movt	r1, #1
   11d50:	mov	r2, #5
   11d54:	bl	10e98 <dcgettext@plt>
   11d58:	mov	r4, r0
   11d5c:	mov	r0, r6
   11d60:	bl	13f68 <__assert_fail@plt+0x2f08>
   11d64:	mov	r3, r0
   11d68:	mov	r0, #0
   11d6c:	mov	r1, #0
   11d70:	mov	r2, r4
   11d74:	bl	10f10 <error@plt>
   11d78:	mov	r0, r6
   11d7c:	bl	126a4 <__assert_fail@plt+0x1644>
   11d80:	add	r0, r7, r9
   11d84:	mov	r7, #0
   11d88:	sub	r8, r0, #1
   11d8c:	mov	r4, #1
   11d90:	add	r8, r8, #1
   11d94:	b	11b60 <__assert_fail@plt+0xb00>
   11d98:	str	r0, [sp, #8]
   11d9c:	mov	r5, #1
   11da0:	b	11b58 <__assert_fail@plt+0xaf8>
   11da4:	mov	r7, ip
   11da8:	mov	sl, r3
   11dac:	str	r0, [sp, #4]
   11db0:	add	r8, r8, #1
   11db4:	b	11b60 <__assert_fail@plt+0xb00>
   11db8:	and	r0, r7, r4
   11dbc:	tst	r0, #1
   11dc0:	beq	11e10 <__assert_fail@plt+0xdb0>
   11dc4:	tst	r5, #1
   11dc8:	beq	11ddc <__assert_fail@plt+0xd7c>
   11dcc:	mov	r0, sl
   11dd0:	ldr	r1, [sp, #4]
   11dd4:	bl	11e60 <__assert_fail@plt+0xe00>
   11dd8:	b	11df4 <__assert_fail@plt+0xd94>
   11ddc:	ldr	r0, [sp, #8]
   11de0:	tst	r0, #1
   11de4:	beq	11e04 <__assert_fail@plt+0xda4>
   11de8:	mov	r0, sl
   11dec:	ldr	r1, [sp, #4]
   11df0:	bl	11ec4 <__assert_fail@plt+0xe64>
   11df4:	cmp	r0, #0
   11df8:	bne	11e18 <__assert_fail@plt+0xdb8>
   11dfc:	mov	r0, #1
   11e00:	bl	10f64 <exit@plt>
   11e04:	mov	r0, sl
   11e08:	ldr	r1, [sp, #4]
   11e0c:	bl	11a14 <__assert_fail@plt+0x9b4>
   11e10:	tst	r7, #1
   11e14:	beq	11dfc <__assert_fail@plt+0xd9c>
   11e18:	sub	sp, fp, #28
   11e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e20:	movw	r1, #23077	; 0x5a25
   11e24:	movt	r1, #1
   11e28:	mov	r0, #0
   11e2c:	mov	r2, #5
   11e30:	bl	10e98 <dcgettext@plt>
   11e34:	mov	r4, r0
   11e38:	mov	r0, r8
   11e3c:	bl	13f68 <__assert_fail@plt+0x2f08>
   11e40:	mov	r3, r0
   11e44:	mov	r0, #0
   11e48:	mov	r1, #0
   11e4c:	mov	r2, r4
   11e50:	bl	10f10 <error@plt>
   11e54:	mov	r0, #1
   11e58:	bl	10f64 <exit@plt>
   11e5c:	bx	lr
   11e60:	push	{r4, r5, r6, r7, fp, lr}
   11e64:	add	fp, sp, #16
   11e68:	mov	r5, r1
   11e6c:	mov	r6, r0
   11e70:	movw	r7, #29048	; 0x7178
   11e74:	movt	r7, #2
   11e78:	ldrd	r0, [r7]
   11e7c:	orrs	r0, r0, r1
   11e80:	beq	11eb0 <__assert_fail@plt+0xe50>
   11e84:	mov	r4, #0
   11e88:	movw	r1, #23602	; 0x5c32
   11e8c:	movt	r1, #1
   11e90:	mov	r0, #0
   11e94:	mov	r2, #5
   11e98:	bl	10e98 <dcgettext@plt>
   11e9c:	mov	r2, r0
   11ea0:	mov	r0, #0
   11ea4:	mov	r1, #0
   11ea8:	bl	10f10 <error@plt>
   11eac:	b	11eb4 <__assert_fail@plt+0xe54>
   11eb0:	mov	r4, #1
   11eb4:	str	r6, [r7]
   11eb8:	str	r5, [r7, #4]
   11ebc:	mov	r0, r4
   11ec0:	pop	{r4, r5, r6, r7, fp, pc}
   11ec4:	push	{r4, r5, r6, r7, fp, lr}
   11ec8:	add	fp, sp, #16
   11ecc:	mov	r5, r1
   11ed0:	mov	r6, r0
   11ed4:	movw	r7, #29056	; 0x7180
   11ed8:	movt	r7, #2
   11edc:	ldrd	r0, [r7]
   11ee0:	orrs	r0, r0, r1
   11ee4:	beq	11f14 <__assert_fail@plt+0xeb4>
   11ee8:	mov	r4, #0
   11eec:	movw	r1, #23649	; 0x5c61
   11ef0:	movt	r1, #1
   11ef4:	mov	r0, #0
   11ef8:	mov	r2, #5
   11efc:	bl	10e98 <dcgettext@plt>
   11f00:	mov	r2, r0
   11f04:	mov	r0, #0
   11f08:	mov	r1, #0
   11f0c:	bl	10f10 <error@plt>
   11f10:	b	11f18 <__assert_fail@plt+0xeb8>
   11f14:	mov	r4, #1
   11f18:	str	r6, [r7]
   11f1c:	str	r5, [r7, #4]
   11f20:	mov	r0, r4
   11f24:	pop	{r4, r5, r6, r7, fp, pc}
   11f28:	push	{r4, r5, r6, r7, fp, lr}
   11f2c:	add	fp, sp, #16
   11f30:	movw	r5, #29032	; 0x7168
   11f34:	movt	r5, #2
   11f38:	ldr	r1, [r5]
   11f3c:	movw	r4, #29036	; 0x716c
   11f40:	movt	r4, #2
   11f44:	ldr	r0, [r4]
   11f48:	bl	11fe4 <__assert_fail@plt+0xf84>
   11f4c:	ldr	r1, [r5]
   11f50:	cmp	r1, #0
   11f54:	beq	11f9c <__assert_fail@plt+0xf3c>
   11f58:	mov	r0, #0
   11f5c:	cmp	r1, #1
   11f60:	bne	11fd0 <__assert_fail@plt+0xf70>
   11f64:	movw	r1, #29048	; 0x7178
   11f68:	movt	r1, #2
   11f6c:	ldrd	r2, [r1]
   11f70:	movw	r1, #29056	; 0x7180
   11f74:	movt	r1, #2
   11f78:	ldrd	r6, [r1]
   11f7c:	orr	r1, r7, r3
   11f80:	orr	r2, r6, r2
   11f84:	orrs	r1, r2, r1
   11f88:	mov	r1, #0
   11f8c:	bne	11fd4 <__assert_fail@plt+0xf74>
   11f90:	ldr	r0, [r4]
   11f94:	ldrd	r0, [r0]
   11f98:	b	11fd4 <__assert_fail@plt+0xf74>
   11f9c:	movw	r0, #29048	; 0x7178
   11fa0:	movt	r0, #2
   11fa4:	ldrd	r0, [r0]
   11fa8:	orrs	r1, r0, r1
   11fac:	bne	11fc4 <__assert_fail@plt+0xf64>
   11fb0:	movw	r0, #29056	; 0x7180
   11fb4:	movt	r0, #2
   11fb8:	ldrd	r0, [r0]
   11fbc:	orrs	r1, r0, r1
   11fc0:	movweq	r0, #8
   11fc4:	movw	r1, #29400	; 0x72d8
   11fc8:	movt	r1, #2
   11fcc:	str	r0, [r1]
   11fd0:	mov	r1, #0
   11fd4:	movw	r2, #29064	; 0x7188
   11fd8:	movt	r2, #2
   11fdc:	strd	r0, [r2]
   11fe0:	pop	{r4, r5, r6, r7, fp, pc}
   11fe4:	push	{r4, r5, fp, lr}
   11fe8:	add	fp, sp, #8
   11fec:	cmp	r1, #0
   11ff0:	beq	12028 <__assert_fail@plt+0xfc8>
   11ff4:	mov	ip, #0
   11ff8:	mov	r3, #0
   11ffc:	ldrd	r4, [r0]
   12000:	orrs	r2, r4, r5
   12004:	beq	12078 <__assert_fail@plt+0x1018>
   12008:	subs	r2, ip, r4
   1200c:	sbcs	r2, r3, r5
   12010:	bcs	12084 <__assert_fail@plt+0x1024>
   12014:	add	r0, r0, #8
   12018:	subs	r1, r1, #1
   1201c:	mov	ip, r4
   12020:	mov	r3, r5
   12024:	bne	11ffc <__assert_fail@plt+0xf9c>
   12028:	movw	r0, #29056	; 0x7180
   1202c:	movt	r0, #2
   12030:	ldrd	r0, [r0]
   12034:	orrs	r0, r0, r1
   12038:	beq	12074 <__assert_fail@plt+0x1014>
   1203c:	movw	r0, #29048	; 0x7178
   12040:	movt	r0, #2
   12044:	ldrd	r0, [r0]
   12048:	orrs	r0, r0, r1
   1204c:	popeq	{r4, r5, fp, pc}
   12050:	movw	r1, #23745	; 0x5cc1
   12054:	movt	r1, #1
   12058:	mov	r0, #0
   1205c:	mov	r2, #5
   12060:	bl	10e98 <dcgettext@plt>
   12064:	mov	r2, r0
   12068:	mov	r0, #1
   1206c:	mov	r1, #0
   12070:	bl	10f10 <error@plt>
   12074:	pop	{r4, r5, fp, pc}
   12078:	movw	r1, #23696	; 0x5c90
   1207c:	movt	r1, #1
   12080:	b	12058 <__assert_fail@plt+0xff8>
   12084:	movw	r1, #23717	; 0x5ca5
   12088:	movt	r1, #1
   1208c:	b	12058 <__assert_fail@plt+0xff8>
   12090:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12094:	add	fp, sp, #24
   12098:	mov	r8, r1
   1209c:	mov	r9, r0
   120a0:	mov	r0, #0
   120a4:	strb	r0, [r3]
   120a8:	movw	r0, #29064	; 0x7188
   120ac:	movt	r0, #2
   120b0:	ldrd	r6, [r0]
   120b4:	orrs	r0, r6, r7
   120b8:	bne	12120 <__assert_fail@plt+0x10c0>
   120bc:	movw	r7, #29032	; 0x7168
   120c0:	movt	r7, #2
   120c4:	ldr	r0, [r7]
   120c8:	ldr	r1, [r2]
   120cc:	cmp	r1, r0
   120d0:	bcs	1210c <__assert_fail@plt+0x10ac>
   120d4:	movw	r0, #29036	; 0x716c
   120d8:	movt	r0, #2
   120dc:	ldr	r0, [r0]
   120e0:	add	r4, r0, r1, lsl #3
   120e4:	ldr	r0, [r7]
   120e8:	ldrd	r6, [r4]
   120ec:	subs	r5, r9, r6
   120f0:	sbcs	r5, r8, r7
   120f4:	bcc	12144 <__assert_fail@plt+0x10e4>
   120f8:	add	r1, r1, #1
   120fc:	str	r1, [r2]
   12100:	add	r4, r4, #8
   12104:	cmp	r1, r0
   12108:	bcc	120e8 <__assert_fail@plt+0x1088>
   1210c:	movw	r1, #29048	; 0x7178
   12110:	movt	r1, #2
   12114:	ldrd	r6, [r1]
   12118:	orrs	r1, r6, r7
   1211c:	beq	12150 <__assert_fail@plt+0x10f0>
   12120:	mov	r0, r9
   12124:	mov	r1, r8
   12128:	mov	r2, r6
   1212c:	mov	r3, r7
   12130:	bl	152cc <__assert_fail@plt+0x426c>
   12134:	adds	r0, r6, r9
   12138:	adc	r1, r7, r8
   1213c:	subs	r6, r0, r2
   12140:	sbc	r7, r1, r3
   12144:	mov	r0, r6
   12148:	mov	r1, r7
   1214c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12150:	movw	r1, #29056	; 0x7180
   12154:	movt	r1, #2
   12158:	ldrd	r6, [r1]
   1215c:	orrs	r1, r6, r7
   12160:	beq	12184 <__assert_fail@plt+0x1124>
   12164:	movw	r1, #29036	; 0x716c
   12168:	movt	r1, #2
   1216c:	ldr	r1, [r1]
   12170:	add	r0, r1, r0, lsl #3
   12174:	ldrd	r0, [r0, #-8]
   12178:	subs	r0, r9, r0
   1217c:	sbc	r1, r8, r1
   12180:	b	12128 <__assert_fail@plt+0x10c8>
   12184:	mov	r0, #1
   12188:	strb	r0, [r3]
   1218c:	mov	r6, #0
   12190:	mov	r7, #0
   12194:	b	12144 <__assert_fail@plt+0x10e4>
   12198:	movw	r1, #29072	; 0x7190
   1219c:	movt	r1, #2
   121a0:	mov	r2, #0
   121a4:	strb	r2, [r1]
   121a8:	movw	r1, #28904	; 0x70e8
   121ac:	movt	r1, #2
   121b0:	cmp	r0, #0
   121b4:	movne	r1, r0
   121b8:	movw	r0, #29076	; 0x7194
   121bc:	movt	r0, #2
   121c0:	str	r1, [r0]
   121c4:	bx	lr
   121c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121cc:	add	fp, sp, #28
   121d0:	sub	sp, sp, #4
   121d4:	cmp	r0, #0
   121d8:	beq	12278 <__assert_fail@plt+0x1218>
   121dc:	mov	r5, r0
   121e0:	movw	r7, #29080	; 0x7198
   121e4:	movt	r7, #2
   121e8:	ldr	r0, [r7]
   121ec:	cmp	r0, #0
   121f0:	beq	12398 <__assert_fail@plt+0x1338>
   121f4:	bl	10f88 <__errno_location@plt>
   121f8:	mov	r6, r0
   121fc:	ldr	r4, [r0]
   12200:	mov	r0, r5
   12204:	bl	10ef8 <ferror_unlocked@plt>
   12208:	cmp	r0, #0
   1220c:	moveq	r4, r0
   12210:	ldr	r0, [r7]
   12214:	movw	r1, #23878	; 0x5d46
   12218:	movt	r1, #1
   1221c:	bl	10e2c <strcmp@plt>
   12220:	cmp	r0, #0
   12224:	beq	12384 <__assert_fail@plt+0x1324>
   12228:	mov	r0, r5
   1222c:	bl	1259c <__assert_fail@plt+0x153c>
   12230:	cmp	r0, #0
   12234:	ldrne	r4, [r6]
   12238:	cmp	r4, #0
   1223c:	beq	12278 <__assert_fail@plt+0x1218>
   12240:	ldr	r2, [r7]
   12244:	mov	r0, #0
   12248:	mov	r1, #3
   1224c:	bl	13e28 <__assert_fail@plt+0x2dc8>
   12250:	mov	r3, r0
   12254:	movw	r2, #23117	; 0x5a4d
   12258:	movt	r2, #1
   1225c:	mov	r0, #0
   12260:	mov	r1, r4
   12264:	bl	10f10 <error@plt>
   12268:	mov	r0, #1
   1226c:	movw	r1, #29028	; 0x7164
   12270:	movt	r1, #2
   12274:	str	r0, [r1]
   12278:	movw	sl, #29076	; 0x7194
   1227c:	movt	sl, #2
   12280:	ldr	r0, [sl]
   12284:	add	r1, r0, #4
   12288:	str	r1, [sl]
   1228c:	ldr	r7, [r0]
   12290:	cmp	r7, #0
   12294:	beq	12358 <__assert_fail@plt+0x12f8>
   12298:	movw	r9, #23878	; 0x5d46
   1229c:	movt	r9, #1
   122a0:	mov	r8, #1
   122a4:	movw	r5, #23117	; 0x5a4d
   122a8:	movt	r5, #1
   122ac:	mov	r0, r7
   122b0:	mov	r1, r9
   122b4:	bl	10e2c <strcmp@plt>
   122b8:	cmp	r0, #0
   122bc:	beq	122e0 <__assert_fail@plt+0x1280>
   122c0:	mov	r0, r7
   122c4:	movw	r1, #22780	; 0x58fc
   122c8:	movt	r1, #1
   122cc:	bl	11018 <fopen64@plt>
   122d0:	mov	r6, r0
   122d4:	cmp	r6, #0
   122d8:	beq	12300 <__assert_fail@plt+0x12a0>
   122dc:	b	12360 <__assert_fail@plt+0x1300>
   122e0:	movw	r0, #29072	; 0x7190
   122e4:	movt	r0, #2
   122e8:	strb	r8, [r0]
   122ec:	movw	r0, #29008	; 0x7150
   122f0:	movt	r0, #2
   122f4:	ldr	r6, [r0]
   122f8:	cmp	r6, #0
   122fc:	bne	12360 <__assert_fail@plt+0x1300>
   12300:	bl	10f88 <__errno_location@plt>
   12304:	ldr	r4, [r0]
   12308:	mov	r6, #0
   1230c:	mov	r0, #0
   12310:	mov	r1, #3
   12314:	mov	r2, r7
   12318:	bl	13e28 <__assert_fail@plt+0x2dc8>
   1231c:	mov	r3, r0
   12320:	mov	r0, #0
   12324:	mov	r1, r4
   12328:	mov	r2, r5
   1232c:	bl	10f10 <error@plt>
   12330:	movw	r0, #29028	; 0x7164
   12334:	movt	r0, #2
   12338:	str	r8, [r0]
   1233c:	ldr	r0, [sl]
   12340:	add	r1, r0, #4
   12344:	str	r1, [sl]
   12348:	ldr	r7, [r0]
   1234c:	cmp	r7, #0
   12350:	bne	122ac <__assert_fail@plt+0x124c>
   12354:	b	12378 <__assert_fail@plt+0x1318>
   12358:	mov	r6, #0
   1235c:	b	12378 <__assert_fail@plt+0x1318>
   12360:	movw	r0, #29080	; 0x7198
   12364:	movt	r0, #2
   12368:	str	r7, [r0]
   1236c:	mov	r0, r6
   12370:	mov	r1, #2
   12374:	bl	12560 <__assert_fail@plt+0x1500>
   12378:	mov	r0, r6
   1237c:	sub	sp, fp, #28
   12380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12384:	mov	r0, r5
   12388:	bl	1100c <clearerr_unlocked@plt>
   1238c:	cmp	r4, #0
   12390:	bne	12240 <__assert_fail@plt+0x11e0>
   12394:	b	12278 <__assert_fail@plt+0x1218>
   12398:	movw	r0, #23120	; 0x5a50
   1239c:	movt	r0, #1
   123a0:	movw	r1, #23130	; 0x5a5a
   123a4:	movt	r1, #1
   123a8:	movw	r3, #23150	; 0x5a6e
   123ac:	movt	r3, #1
   123b0:	mov	r2, #340	; 0x154
   123b4:	bl	11060 <__assert_fail@plt>
   123b8:	push	{fp, lr}
   123bc:	mov	fp, sp
   123c0:	movw	r0, #29072	; 0x7190
   123c4:	movt	r0, #2
   123c8:	ldrb	r0, [r0]
   123cc:	cmp	r0, #1
   123d0:	popne	{fp, pc}
   123d4:	movw	r0, #29008	; 0x7150
   123d8:	movt	r0, #2
   123dc:	ldr	r0, [r0]
   123e0:	bl	1259c <__assert_fail@plt+0x153c>
   123e4:	cmp	r0, #0
   123e8:	bne	123f0 <__assert_fail@plt+0x1390>
   123ec:	pop	{fp, pc}
   123f0:	bl	10f88 <__errno_location@plt>
   123f4:	ldr	r1, [r0]
   123f8:	movw	r2, #23878	; 0x5d46
   123fc:	movt	r2, #1
   12400:	mov	r0, #1
   12404:	bl	10f10 <error@plt>
   12408:	push	{r4, sl, fp, lr}
   1240c:	add	fp, sp, #8
   12410:	movw	r1, #23174	; 0x5a86
   12414:	movt	r1, #1
   12418:	mov	r0, #0
   1241c:	mov	r2, #5
   12420:	bl	10e98 <dcgettext@plt>
   12424:	movw	r4, #29012	; 0x7154
   12428:	movt	r4, #2
   1242c:	ldr	r1, [r4]
   12430:	bl	10e14 <fputs_unlocked@plt>
   12434:	movw	r1, #23237	; 0x5ac5
   12438:	movt	r1, #1
   1243c:	mov	r0, #0
   12440:	mov	r2, #5
   12444:	bl	10e98 <dcgettext@plt>
   12448:	ldr	r1, [r4]
   1244c:	pop	{r4, sl, fp, lr}
   12450:	b	10e14 <fputs_unlocked@plt>
   12454:	movw	r1, #29084	; 0x719c
   12458:	movt	r1, #2
   1245c:	str	r0, [r1]
   12460:	bx	lr
   12464:	movw	r1, #29088	; 0x71a0
   12468:	movt	r1, #2
   1246c:	strb	r0, [r1]
   12470:	bx	lr
   12474:	push	{r4, r5, r6, sl, fp, lr}
   12478:	add	fp, sp, #16
   1247c:	sub	sp, sp, #8
   12480:	movw	r0, #29012	; 0x7154
   12484:	movt	r0, #2
   12488:	ldr	r0, [r0]
   1248c:	bl	15010 <__assert_fail@plt+0x3fb0>
   12490:	cmp	r0, #0
   12494:	beq	124bc <__assert_fail@plt+0x145c>
   12498:	movw	r0, #29088	; 0x71a0
   1249c:	movt	r0, #2
   124a0:	ldrb	r0, [r0]
   124a4:	cmp	r0, #0
   124a8:	beq	124dc <__assert_fail@plt+0x147c>
   124ac:	bl	10f88 <__errno_location@plt>
   124b0:	ldr	r0, [r0]
   124b4:	cmp	r0, #32
   124b8:	bne	124dc <__assert_fail@plt+0x147c>
   124bc:	movw	r0, #29000	; 0x7148
   124c0:	movt	r0, #2
   124c4:	ldr	r0, [r0]
   124c8:	bl	15010 <__assert_fail@plt+0x3fb0>
   124cc:	cmp	r0, #0
   124d0:	subeq	sp, fp, #16
   124d4:	popeq	{r4, r5, r6, sl, fp, pc}
   124d8:	b	1254c <__assert_fail@plt+0x14ec>
   124dc:	movw	r1, #22770	; 0x58f2
   124e0:	movt	r1, #1
   124e4:	mov	r0, #0
   124e8:	mov	r2, #5
   124ec:	bl	10e98 <dcgettext@plt>
   124f0:	mov	r4, r0
   124f4:	movw	r0, #29084	; 0x719c
   124f8:	movt	r0, #2
   124fc:	ldr	r6, [r0]
   12500:	bl	10f88 <__errno_location@plt>
   12504:	ldr	r5, [r0]
   12508:	cmp	r6, #0
   1250c:	bne	12528 <__assert_fail@plt+0x14c8>
   12510:	movw	r2, #23117	; 0x5a4d
   12514:	movt	r2, #1
   12518:	mov	r0, #0
   1251c:	mov	r1, r5
   12520:	mov	r3, r4
   12524:	b	12548 <__assert_fail@plt+0x14e8>
   12528:	mov	r0, r6
   1252c:	bl	13e18 <__assert_fail@plt+0x2db8>
   12530:	mov	r3, r0
   12534:	str	r4, [sp]
   12538:	movw	r2, #23805	; 0x5cfd
   1253c:	movt	r2, #1
   12540:	mov	r0, #0
   12544:	mov	r1, r5
   12548:	bl	10f10 <error@plt>
   1254c:	movw	r0, #28916	; 0x70f4
   12550:	movt	r0, #2
   12554:	ldr	r0, [r0]
   12558:	bl	10e5c <_exit@plt>
   1255c:	b	10e38 <posix_fadvise64@plt>
   12560:	cmp	r0, #0
   12564:	bxeq	lr
   12568:	push	{r4, sl, fp, lr}
   1256c:	add	fp, sp, #8
   12570:	sub	sp, sp, #16
   12574:	mov	r4, r1
   12578:	bl	10fb8 <fileno@plt>
   1257c:	mov	r1, #0
   12580:	str	r1, [sp]
   12584:	stmib	sp, {r1, r4}
   12588:	mov	r2, #0
   1258c:	mov	r3, #0
   12590:	bl	1255c <__assert_fail@plt+0x14fc>
   12594:	sub	sp, fp, #8
   12598:	pop	{r4, sl, fp, pc}
   1259c:	push	{r4, r5, fp, lr}
   125a0:	add	fp, sp, #8
   125a4:	sub	sp, sp, #8
   125a8:	mov	r4, r0
   125ac:	bl	10fb8 <fileno@plt>
   125b0:	cmn	r0, #1
   125b4:	ble	1262c <__assert_fail@plt+0x15cc>
   125b8:	mov	r0, r4
   125bc:	bl	10f34 <__freading@plt>
   125c0:	cmp	r0, #0
   125c4:	beq	125f0 <__assert_fail@plt+0x1590>
   125c8:	mov	r0, r4
   125cc:	bl	10fb8 <fileno@plt>
   125d0:	mov	r1, #1
   125d4:	str	r1, [sp]
   125d8:	mov	r2, #0
   125dc:	mov	r3, #0
   125e0:	bl	10ed4 <lseek64@plt>
   125e4:	and	r0, r0, r1
   125e8:	cmn	r0, #1
   125ec:	beq	1262c <__assert_fail@plt+0x15cc>
   125f0:	mov	r0, r4
   125f4:	bl	1263c <__assert_fail@plt+0x15dc>
   125f8:	cmp	r0, #0
   125fc:	beq	1262c <__assert_fail@plt+0x15cc>
   12600:	bl	10f88 <__errno_location@plt>
   12604:	ldr	r5, [r0]
   12608:	mov	r0, r4
   1260c:	bl	10fd0 <fclose@plt>
   12610:	cmp	r5, #0
   12614:	beq	12624 <__assert_fail@plt+0x15c4>
   12618:	bl	10f88 <__errno_location@plt>
   1261c:	str	r5, [r0]
   12620:	mvn	r0, #0
   12624:	sub	sp, fp, #8
   12628:	pop	{r4, r5, fp, pc}
   1262c:	mov	r0, r4
   12630:	sub	sp, fp, #8
   12634:	pop	{r4, r5, fp, lr}
   12638:	b	10fd0 <fclose@plt>
   1263c:	push	{r4, sl, fp, lr}
   12640:	add	fp, sp, #8
   12644:	mov	r4, r0
   12648:	cmp	r0, #0
   1264c:	beq	12664 <__assert_fail@plt+0x1604>
   12650:	mov	r0, r4
   12654:	bl	10f34 <__freading@plt>
   12658:	cmp	r0, #0
   1265c:	movne	r0, r4
   12660:	blne	12670 <__assert_fail@plt+0x1610>
   12664:	mov	r0, r4
   12668:	pop	{r4, sl, fp, lr}
   1266c:	b	10e44 <fflush@plt>
   12670:	push	{fp, lr}
   12674:	mov	fp, sp
   12678:	sub	sp, sp, #8
   1267c:	ldrb	r1, [r0, #1]
   12680:	tst	r1, #1
   12684:	beq	1269c <__assert_fail@plt+0x163c>
   12688:	mov	r1, #1
   1268c:	str	r1, [sp]
   12690:	mov	r2, #0
   12694:	mov	r3, #0
   12698:	bl	126cc <__assert_fail@plt+0x166c>
   1269c:	mov	sp, fp
   126a0:	pop	{fp, pc}
   126a4:	push	{r4, r5, r6, sl, fp, lr}
   126a8:	add	fp, sp, #16
   126ac:	mov	r4, r0
   126b0:	bl	10f88 <__errno_location@plt>
   126b4:	mov	r5, r0
   126b8:	ldr	r6, [r0]
   126bc:	mov	r0, r4
   126c0:	bl	10e50 <free@plt>
   126c4:	str	r6, [r5]
   126c8:	pop	{r4, r5, r6, sl, fp, pc}
   126cc:	push	{r4, r5, r6, r7, fp, lr}
   126d0:	add	fp, sp, #16
   126d4:	sub	sp, sp, #8
   126d8:	mov	r5, r3
   126dc:	mov	r6, r2
   126e0:	mov	r4, r0
   126e4:	ldr	r0, [r0, #4]
   126e8:	ldr	r1, [r4, #8]
   126ec:	cmp	r1, r0
   126f0:	bne	1270c <__assert_fail@plt+0x16ac>
   126f4:	ldrd	r0, [r4, #16]
   126f8:	cmp	r1, r0
   126fc:	bne	1270c <__assert_fail@plt+0x16ac>
   12700:	ldr	r0, [r4, #36]	; 0x24
   12704:	cmp	r0, #0
   12708:	beq	12724 <__assert_fail@plt+0x16c4>
   1270c:	mov	r0, r4
   12710:	mov	r2, r6
   12714:	mov	r3, r5
   12718:	sub	sp, fp, #16
   1271c:	pop	{r4, r5, r6, r7, fp, lr}
   12720:	b	10fdc <fseeko64@plt>
   12724:	ldr	r7, [fp, #8]
   12728:	mov	r0, r4
   1272c:	bl	10fb8 <fileno@plt>
   12730:	str	r7, [sp]
   12734:	mov	r2, r6
   12738:	mov	r3, r5
   1273c:	bl	10ed4 <lseek64@plt>
   12740:	and	r2, r0, r1
   12744:	cmn	r2, #1
   12748:	beq	12768 <__assert_fail@plt+0x1708>
   1274c:	strd	r0, [r4, #80]	; 0x50
   12750:	ldr	r0, [r4]
   12754:	bic	r0, r0, #16
   12758:	str	r0, [r4]
   1275c:	mov	r0, #0
   12760:	sub	sp, fp, #16
   12764:	pop	{r4, r5, r6, r7, fp, pc}
   12768:	mvn	r0, #0
   1276c:	sub	sp, fp, #16
   12770:	pop	{r4, r5, r6, r7, fp, pc}
   12774:	push	{r4, r5, fp, lr}
   12778:	add	fp, sp, #8
   1277c:	cmp	r0, #0
   12780:	beq	12814 <__assert_fail@plt+0x17b4>
   12784:	mov	r4, r0
   12788:	mov	r1, #47	; 0x2f
   1278c:	bl	10ff4 <strrchr@plt>
   12790:	cmp	r0, #0
   12794:	mov	r5, r4
   12798:	addne	r5, r0, #1
   1279c:	sub	r0, r5, r4
   127a0:	cmp	r0, #7
   127a4:	blt	127f8 <__assert_fail@plt+0x1798>
   127a8:	sub	r0, r5, #7
   127ac:	movw	r1, #23868	; 0x5d3c
   127b0:	movt	r1, #1
   127b4:	mov	r2, #7
   127b8:	bl	11030 <strncmp@plt>
   127bc:	cmp	r0, #0
   127c0:	bne	127f8 <__assert_fail@plt+0x1798>
   127c4:	movw	r1, #23876	; 0x5d44
   127c8:	movt	r1, #1
   127cc:	mov	r0, r5
   127d0:	mov	r2, #3
   127d4:	bl	11030 <strncmp@plt>
   127d8:	cmp	r0, #0
   127dc:	beq	127e8 <__assert_fail@plt+0x1788>
   127e0:	mov	r4, r5
   127e4:	b	127f8 <__assert_fail@plt+0x1798>
   127e8:	add	r4, r5, #3
   127ec:	movw	r0, #28984	; 0x7138
   127f0:	movt	r0, #2
   127f4:	str	r4, [r0]
   127f8:	movw	r0, #28988	; 0x713c
   127fc:	movt	r0, #2
   12800:	str	r4, [r0]
   12804:	movw	r0, #29092	; 0x71a4
   12808:	movt	r0, #2
   1280c:	str	r4, [r0]
   12810:	pop	{r4, r5, fp, pc}
   12814:	movw	r0, #29000	; 0x7148
   12818:	movt	r0, #2
   1281c:	ldr	r3, [r0]
   12820:	movw	r0, #23812	; 0x5d04
   12824:	movt	r0, #1
   12828:	mov	r1, #55	; 0x37
   1282c:	mov	r2, #1
   12830:	bl	10ec8 <fwrite@plt>
   12834:	bl	1103c <abort@plt>
   12838:	push	{r4, r5, r6, sl, fp, lr}
   1283c:	add	fp, sp, #16
   12840:	mov	r4, r0
   12844:	movw	r0, #29096	; 0x71a8
   12848:	movt	r0, #2
   1284c:	cmp	r4, #0
   12850:	moveq	r4, r0
   12854:	bl	10f88 <__errno_location@plt>
   12858:	mov	r5, r0
   1285c:	ldr	r6, [r0]
   12860:	mov	r0, r4
   12864:	mov	r1, #48	; 0x30
   12868:	bl	14b30 <__assert_fail@plt+0x3ad0>
   1286c:	str	r6, [r5]
   12870:	pop	{r4, r5, r6, sl, fp, pc}
   12874:	movw	r1, #29096	; 0x71a8
   12878:	movt	r1, #2
   1287c:	cmp	r0, #0
   12880:	movne	r1, r0
   12884:	ldr	r0, [r1]
   12888:	bx	lr
   1288c:	movw	r2, #29096	; 0x71a8
   12890:	movt	r2, #2
   12894:	cmp	r0, #0
   12898:	movne	r2, r0
   1289c:	str	r1, [r2]
   128a0:	bx	lr
   128a4:	movw	r3, #29096	; 0x71a8
   128a8:	movt	r3, #2
   128ac:	cmp	r0, #0
   128b0:	movne	r3, r0
   128b4:	ubfx	r0, r1, #5, #3
   128b8:	add	ip, r3, r0, lsl #2
   128bc:	ldr	r3, [ip, #8]
   128c0:	and	r1, r1, #31
   128c4:	mov	r0, #1
   128c8:	and	r0, r0, r3, lsr r1
   128cc:	and	r2, r2, #1
   128d0:	eor	r2, r0, r2
   128d4:	eor	r1, r3, r2, lsl r1
   128d8:	str	r1, [ip, #8]
   128dc:	bx	lr
   128e0:	movw	r2, #29096	; 0x71a8
   128e4:	movt	r2, #2
   128e8:	cmp	r0, #0
   128ec:	movne	r2, r0
   128f0:	ldr	r0, [r2, #4]
   128f4:	str	r1, [r2, #4]
   128f8:	bx	lr
   128fc:	push	{fp, lr}
   12900:	mov	fp, sp
   12904:	movw	r3, #29096	; 0x71a8
   12908:	movt	r3, #2
   1290c:	cmp	r0, #0
   12910:	movne	r3, r0
   12914:	mov	r0, #10
   12918:	str	r0, [r3]
   1291c:	cmp	r1, #0
   12920:	cmpne	r2, #0
   12924:	bne	1292c <__assert_fail@plt+0x18cc>
   12928:	bl	1103c <abort@plt>
   1292c:	str	r1, [r3, #40]	; 0x28
   12930:	str	r2, [r3, #44]	; 0x2c
   12934:	pop	{fp, pc}
   12938:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1293c:	add	fp, sp, #28
   12940:	sub	sp, sp, #20
   12944:	mov	r8, r3
   12948:	mov	r9, r2
   1294c:	mov	sl, r1
   12950:	mov	r7, r0
   12954:	ldr	r0, [fp, #8]
   12958:	movw	r5, #29096	; 0x71a8
   1295c:	movt	r5, #2
   12960:	cmp	r0, #0
   12964:	movne	r5, r0
   12968:	bl	10f88 <__errno_location@plt>
   1296c:	mov	r4, r0
   12970:	ldm	r5, {r0, r1}
   12974:	ldr	r2, [r5, #40]	; 0x28
   12978:	ldr	r3, [r5, #44]	; 0x2c
   1297c:	ldr	r6, [r4]
   12980:	add	r5, r5, #8
   12984:	stm	sp, {r0, r1, r5}
   12988:	str	r2, [sp, #12]
   1298c:	str	r3, [sp, #16]
   12990:	mov	r0, r7
   12994:	mov	r1, sl
   12998:	mov	r2, r9
   1299c:	mov	r3, r8
   129a0:	bl	129b0 <__assert_fail@plt+0x1950>
   129a4:	str	r6, [r4]
   129a8:	sub	sp, fp, #28
   129ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129b4:	add	fp, sp, #28
   129b8:	sub	sp, sp, #156	; 0x9c
   129bc:	mov	r9, r3
   129c0:	mov	r7, r1
   129c4:	mov	r6, r0
   129c8:	str	r2, [fp, #-80]	; 0xffffffb0
   129cc:	add	r0, r2, #1
   129d0:	str	r0, [sp, #76]	; 0x4c
   129d4:	ldr	r0, [fp, #12]
   129d8:	and	r1, r0, #1
   129dc:	str	r1, [sp, #40]	; 0x28
   129e0:	and	r1, r0, #4
   129e4:	str	r1, [sp, #36]	; 0x24
   129e8:	ubfx	r4, r0, #1, #1
   129ec:	bl	10ee0 <__ctype_get_mb_cur_max@plt>
   129f0:	str	r0, [sp, #44]	; 0x2c
   129f4:	ldr	r0, [fp, #24]
   129f8:	str	r0, [sp, #88]	; 0x58
   129fc:	ldr	r0, [fp, #20]
   12a00:	str	r0, [sp, #80]	; 0x50
   12a04:	ldr	r1, [fp, #8]
   12a08:	mov	r0, #0
   12a0c:	str	r0, [sp, #84]	; 0x54
   12a10:	mov	r0, #0
   12a14:	str	r0, [fp, #-84]	; 0xffffffac
   12a18:	mov	r0, #0
   12a1c:	str	r0, [fp, #-72]	; 0xffffffb8
   12a20:	mov	r0, #0
   12a24:	mov	r2, #0
   12a28:	str	r2, [fp, #-56]	; 0xffffffc8
   12a2c:	mov	r2, #0
   12a30:	str	r2, [sp, #64]	; 0x40
   12a34:	mov	r2, #1
   12a38:	str	r2, [fp, #-48]	; 0xffffffd0
   12a3c:	cmp	r1, #10
   12a40:	bhi	1396c <__assert_fail@plt+0x290c>
   12a44:	mov	sl, r7
   12a48:	mov	r7, r1
   12a4c:	add	r1, pc, #24
   12a50:	mov	r8, #0
   12a54:	mov	r2, #1
   12a58:	mov	r3, #0
   12a5c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a60:	mov	lr, r9
   12a64:	mov	r5, r6
   12a68:	ldr	pc, [r1, r7, lsl #2]
   12a6c:	andeq	r2, r1, r0, asr #22
   12a70:	andeq	r2, r1, r0, lsl #23
   12a74:	andeq	r2, r1, r0, asr fp
   12a78:	andeq	r2, r1, r8, lsr fp
   12a7c:	andeq	r2, r1, r4, ror fp
   12a80:	ldrdeq	r2, [r1], -r4
   12a84:	andeq	r2, r1, r0, ror #22
   12a88:	andeq	r2, r1, r0, lsr ip
   12a8c:	muleq	r1, r8, sl
   12a90:	muleq	r1, r8, sl
   12a94:	andeq	r2, r1, r4, asr #21
   12a98:	movw	r0, #23958	; 0x5d96
   12a9c:	movt	r0, #1
   12aa0:	mov	r1, r7
   12aa4:	bl	13f74 <__assert_fail@plt+0x2f14>
   12aa8:	str	r0, [sp, #80]	; 0x50
   12aac:	movw	r0, #23788	; 0x5cec
   12ab0:	movt	r0, #1
   12ab4:	mov	r1, r7
   12ab8:	bl	13f74 <__assert_fail@plt+0x2f14>
   12abc:	mov	r5, r6
   12ac0:	str	r0, [sp, #88]	; 0x58
   12ac4:	mov	r8, #0
   12ac8:	tst	r4, #1
   12acc:	str	r7, [fp, #-64]	; 0xffffffc0
   12ad0:	bne	12b08 <__assert_fail@plt+0x1aa8>
   12ad4:	ldr	r0, [sp, #80]	; 0x50
   12ad8:	ldrb	r0, [r0]
   12adc:	cmp	r0, #0
   12ae0:	beq	12b08 <__assert_fail@plt+0x1aa8>
   12ae4:	ldr	r1, [sp, #80]	; 0x50
   12ae8:	add	r1, r1, #1
   12aec:	mov	r8, #0
   12af0:	cmp	r8, sl
   12af4:	strbcc	r0, [r5, r8]
   12af8:	ldrb	r0, [r1, r8]
   12afc:	add	r8, r8, #1
   12b00:	cmp	r0, #0
   12b04:	bne	12af0 <__assert_fail@plt+0x1a90>
   12b08:	ldr	r7, [sp, #88]	; 0x58
   12b0c:	mov	r0, r7
   12b10:	bl	10f7c <strlen@plt>
   12b14:	mov	r5, r6
   12b18:	str	r0, [fp, #-72]	; 0xffffffb8
   12b1c:	str	r7, [fp, #-84]	; 0xffffffac
   12b20:	mov	r2, #1
   12b24:	mov	r3, r4
   12b28:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12b2c:	mov	lr, r9
   12b30:	ldr	r7, [fp, #-64]	; 0xffffffc0
   12b34:	b	12c30 <__assert_fail@plt+0x1bd0>
   12b38:	mov	r0, #1
   12b3c:	b	12b80 <__assert_fail@plt+0x1b20>
   12b40:	mov	r7, #0
   12b44:	mov	r8, #0
   12b48:	mov	r2, r0
   12b4c:	b	12c2c <__assert_fail@plt+0x1bcc>
   12b50:	tst	r4, #1
   12b54:	bne	12b80 <__assert_fail@plt+0x1b20>
   12b58:	mov	r2, r0
   12b5c:	b	12ba8 <__assert_fail@plt+0x1b48>
   12b60:	mov	r0, #1
   12b64:	str	r0, [fp, #-72]	; 0xffffffb8
   12b68:	mov	r8, #0
   12b6c:	mov	r7, #5
   12b70:	b	12bec <__assert_fail@plt+0x1b8c>
   12b74:	mov	r2, #1
   12b78:	tst	r4, #1
   12b7c:	beq	12ba8 <__assert_fail@plt+0x1b48>
   12b80:	mov	r1, #1
   12b84:	str	r1, [fp, #-72]	; 0xffffffb8
   12b88:	mov	r8, #0
   12b8c:	mov	r7, #2
   12b90:	movw	r1, #23788	; 0x5cec
   12b94:	movt	r1, #1
   12b98:	str	r1, [fp, #-84]	; 0xffffffac
   12b9c:	mov	r2, r0
   12ba0:	mov	r3, #1
   12ba4:	b	12c30 <__assert_fail@plt+0x1bd0>
   12ba8:	mov	r8, #1
   12bac:	mov	r7, #2
   12bb0:	cmp	sl, #0
   12bb4:	movne	r0, #39	; 0x27
   12bb8:	strbne	r0, [r5]
   12bbc:	movw	r0, #23788	; 0x5cec
   12bc0:	movt	r0, #1
   12bc4:	str	r0, [fp, #-84]	; 0xffffffac
   12bc8:	mov	r0, #1
   12bcc:	str	r0, [fp, #-72]	; 0xffffffb8
   12bd0:	b	12c2c <__assert_fail@plt+0x1bcc>
   12bd4:	mov	r7, #5
   12bd8:	tst	r4, #1
   12bdc:	beq	12c04 <__assert_fail@plt+0x1ba4>
   12be0:	mov	r0, #1
   12be4:	str	r0, [fp, #-72]	; 0xffffffb8
   12be8:	mov	r8, #0
   12bec:	movw	r0, #23956	; 0x5d94
   12bf0:	movt	r0, #1
   12bf4:	str	r0, [fp, #-84]	; 0xffffffac
   12bf8:	mov	r2, #1
   12bfc:	mov	r3, #1
   12c00:	b	12c30 <__assert_fail@plt+0x1bd0>
   12c04:	cmp	sl, #0
   12c08:	movne	r0, #34	; 0x22
   12c0c:	strbne	r0, [r5]
   12c10:	mov	r8, #1
   12c14:	movw	r0, #23956	; 0x5d94
   12c18:	movt	r0, #1
   12c1c:	str	r0, [fp, #-84]	; 0xffffffac
   12c20:	mov	r0, #1
   12c24:	str	r0, [fp, #-72]	; 0xffffffb8
   12c28:	mov	r2, #1
   12c2c:	mov	r3, #0
   12c30:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12c34:	cmp	r0, #0
   12c38:	movwne	r0, #1
   12c3c:	and	r1, r0, r3
   12c40:	and	r1, r2, r1
   12c44:	str	r1, [sp, #56]	; 0x38
   12c48:	sub	r1, r7, #2
   12c4c:	clz	r1, r1
   12c50:	lsr	r1, r1, #5
   12c54:	and	r1, r1, r3
   12c58:	str	r1, [sp, #68]	; 0x44
   12c5c:	str	r7, [fp, #-64]	; 0xffffffc0
   12c60:	subs	r1, r7, #2
   12c64:	movwne	r1, #1
   12c68:	eor	r4, r3, #1
   12c6c:	str	r4, [fp, #-88]	; 0xffffffa8
   12c70:	orr	r4, r1, r4
   12c74:	str	r4, [sp, #72]	; 0x48
   12c78:	and	r1, r1, r2
   12c7c:	and	r0, r0, r1
   12c80:	str	r0, [fp, #-60]	; 0xffffffc4
   12c84:	str	r3, [fp, #-76]	; 0xffffffb4
   12c88:	orr	r0, r1, r3
   12c8c:	eor	r0, r0, #1
   12c90:	ldr	r1, [fp, #16]
   12c94:	clz	r1, r1
   12c98:	lsr	r1, r1, #5
   12c9c:	orr	r0, r1, r0
   12ca0:	str	r0, [fp, #-68]	; 0xffffffbc
   12ca4:	str	r2, [sp, #92]	; 0x5c
   12ca8:	eor	r0, r2, #1
   12cac:	str	r0, [sp, #60]	; 0x3c
   12cb0:	mov	r7, #0
   12cb4:	cmn	lr, #1
   12cb8:	beq	12cc8 <__assert_fail@plt+0x1c68>
   12cbc:	cmp	r7, lr
   12cc0:	bne	12cd4 <__assert_fail@plt+0x1c74>
   12cc4:	b	137e0 <__assert_fail@plt+0x2780>
   12cc8:	ldrb	r0, [ip, r7]
   12ccc:	cmp	r0, #0
   12cd0:	beq	137e0 <__assert_fail@plt+0x2780>
   12cd4:	mov	r9, #0
   12cd8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12cdc:	cmp	r0, #0
   12ce0:	beq	12d14 <__assert_fail@plt+0x1cb4>
   12ce4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12ce8:	add	r4, r7, r0
   12cec:	cmp	r0, #2
   12cf0:	bcc	12d0c <__assert_fail@plt+0x1cac>
   12cf4:	cmn	lr, #1
   12cf8:	bne	12d0c <__assert_fail@plt+0x1cac>
   12cfc:	mov	r0, ip
   12d00:	bl	10f7c <strlen@plt>
   12d04:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d08:	mov	lr, r0
   12d0c:	cmp	r4, lr
   12d10:	bls	12d20 <__assert_fail@plt+0x1cc0>
   12d14:	mov	r0, #0
   12d18:	str	r0, [fp, #-52]	; 0xffffffcc
   12d1c:	b	12d64 <__assert_fail@plt+0x1d04>
   12d20:	mov	r4, lr
   12d24:	add	r0, ip, r7
   12d28:	ldr	r1, [fp, #-84]	; 0xffffffac
   12d2c:	ldr	r2, [fp, #-72]	; 0xffffffb8
   12d30:	bl	10f70 <bcmp@plt>
   12d34:	cmp	r0, #0
   12d38:	mov	r1, r0
   12d3c:	movwne	r1, #1
   12d40:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12d44:	orr	r1, r1, r2
   12d48:	tst	r1, #1
   12d4c:	beq	138b4 <__assert_fail@plt+0x2854>
   12d50:	clz	r0, r0
   12d54:	lsr	r0, r0, #5
   12d58:	str	r0, [fp, #-52]	; 0xffffffcc
   12d5c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12d60:	mov	lr, r4
   12d64:	ldrb	r4, [ip, r7]
   12d68:	cmp	r4, #126	; 0x7e
   12d6c:	bhi	1329c <__assert_fail@plt+0x223c>
   12d70:	mov	r6, #1
   12d74:	mov	r2, #110	; 0x6e
   12d78:	mov	r0, #97	; 0x61
   12d7c:	add	r3, pc, #4
   12d80:	mov	r1, #0
   12d84:	ldr	pc, [r3, r4, lsl #2]
   12d88:	strdeq	r3, [r1], -ip
   12d8c:	muleq	r1, ip, r2
   12d90:	muleq	r1, ip, r2
   12d94:	muleq	r1, ip, r2
   12d98:	muleq	r1, ip, r2
   12d9c:	muleq	r1, ip, r2
   12da0:	muleq	r1, ip, r2
   12da4:	andeq	r3, r1, r0, ror r3
   12da8:	ldrdeq	r3, [r1], -ip
   12dac:	ldrdeq	r3, [r1], -r4
   12db0:	andeq	r3, r1, r8, ror #1
   12db4:	andeq	r3, r1, r4, lsl #4
   12db8:	andeq	r3, r1, ip, asr #1
   12dbc:	andeq	r3, r1, r4, ror #1
   12dc0:	muleq	r1, ip, r2
   12dc4:	muleq	r1, ip, r2
   12dc8:	muleq	r1, ip, r2
   12dcc:	muleq	r1, ip, r2
   12dd0:	muleq	r1, ip, r2
   12dd4:	muleq	r1, ip, r2
   12dd8:	muleq	r1, ip, r2
   12ddc:	muleq	r1, ip, r2
   12de0:	muleq	r1, ip, r2
   12de4:	muleq	r1, ip, r2
   12de8:	muleq	r1, ip, r2
   12dec:	muleq	r1, ip, r2
   12df0:	muleq	r1, ip, r2
   12df4:	muleq	r1, ip, r2
   12df8:	muleq	r1, ip, r2
   12dfc:	muleq	r1, ip, r2
   12e00:	muleq	r1, ip, r2
   12e04:	muleq	r1, ip, r2
   12e08:	andeq	r3, r1, r0, lsl #1
   12e0c:	andeq	r3, r1, r4, lsl #1
   12e10:	andeq	r3, r1, r4, lsl #1
   12e14:	andeq	r3, r1, ip, rrx
   12e18:	andeq	r3, r1, r4, lsl #1
   12e1c:	andeq	r2, r1, r4, lsl #31
   12e20:	andeq	r3, r1, r4, lsl #1
   12e24:	andeq	r3, r1, ip, lsl #4
   12e28:	andeq	r3, r1, r4, lsl #1
   12e2c:	andeq	r3, r1, r4, lsl #1
   12e30:	andeq	r3, r1, r4, lsl #1
   12e34:	andeq	r2, r1, r4, lsl #31
   12e38:	andeq	r2, r1, r4, lsl #31
   12e3c:	andeq	r2, r1, r4, lsl #31
   12e40:	andeq	r2, r1, r4, lsl #31
   12e44:	andeq	r2, r1, r4, lsl #31
   12e48:	andeq	r2, r1, r4, lsl #31
   12e4c:	andeq	r2, r1, r4, lsl #31
   12e50:	andeq	r2, r1, r4, lsl #31
   12e54:	andeq	r2, r1, r4, lsl #31
   12e58:	andeq	r2, r1, r4, lsl #31
   12e5c:	andeq	r2, r1, r4, lsl #31
   12e60:	andeq	r2, r1, r4, lsl #31
   12e64:	andeq	r2, r1, r4, lsl #31
   12e68:	andeq	r2, r1, r4, lsl #31
   12e6c:	andeq	r2, r1, r4, lsl #31
   12e70:	andeq	r2, r1, r4, lsl #31
   12e74:	andeq	r3, r1, r4, lsl #1
   12e78:	andeq	r3, r1, r4, lsl #1
   12e7c:	andeq	r3, r1, r4, lsl #1
   12e80:	andeq	r3, r1, r4, lsl #1
   12e84:	ldrdeq	r3, [r1], -r4
   12e88:	muleq	r1, ip, r2
   12e8c:	andeq	r2, r1, r4, lsl #31
   12e90:	andeq	r2, r1, r4, lsl #31
   12e94:	andeq	r2, r1, r4, lsl #31
   12e98:	andeq	r2, r1, r4, lsl #31
   12e9c:	andeq	r2, r1, r4, lsl #31
   12ea0:	andeq	r2, r1, r4, lsl #31
   12ea4:	andeq	r2, r1, r4, lsl #31
   12ea8:	andeq	r2, r1, r4, lsl #31
   12eac:	andeq	r2, r1, r4, lsl #31
   12eb0:	andeq	r2, r1, r4, lsl #31
   12eb4:	andeq	r2, r1, r4, lsl #31
   12eb8:	andeq	r2, r1, r4, lsl #31
   12ebc:	andeq	r2, r1, r4, lsl #31
   12ec0:	andeq	r2, r1, r4, lsl #31
   12ec4:	andeq	r2, r1, r4, lsl #31
   12ec8:	andeq	r2, r1, r4, lsl #31
   12ecc:	andeq	r2, r1, r4, lsl #31
   12ed0:	andeq	r2, r1, r4, lsl #31
   12ed4:	andeq	r2, r1, r4, lsl #31
   12ed8:	andeq	r2, r1, r4, lsl #31
   12edc:	andeq	r2, r1, r4, lsl #31
   12ee0:	andeq	r2, r1, r4, lsl #31
   12ee4:	andeq	r2, r1, r4, lsl #31
   12ee8:	andeq	r2, r1, r4, lsl #31
   12eec:	andeq	r2, r1, r4, lsl #31
   12ef0:	andeq	r2, r1, r4, lsl #31
   12ef4:	andeq	r3, r1, r4, lsl #1
   12ef8:	andeq	r3, r1, ip, lsr #1
   12efc:	andeq	r2, r1, r4, lsl #31
   12f00:	andeq	r3, r1, r4, lsl #1
   12f04:	andeq	r2, r1, r4, lsl #31
   12f08:	andeq	r3, r1, r4, lsl #1
   12f0c:	andeq	r2, r1, r4, lsl #31
   12f10:	andeq	r2, r1, r4, lsl #31
   12f14:	andeq	r2, r1, r4, lsl #31
   12f18:	andeq	r2, r1, r4, lsl #31
   12f1c:	andeq	r2, r1, r4, lsl #31
   12f20:	andeq	r2, r1, r4, lsl #31
   12f24:	andeq	r2, r1, r4, lsl #31
   12f28:	andeq	r2, r1, r4, lsl #31
   12f2c:	andeq	r2, r1, r4, lsl #31
   12f30:	andeq	r2, r1, r4, lsl #31
   12f34:	andeq	r2, r1, r4, lsl #31
   12f38:	andeq	r2, r1, r4, lsl #31
   12f3c:	andeq	r2, r1, r4, lsl #31
   12f40:	andeq	r2, r1, r4, lsl #31
   12f44:	andeq	r2, r1, r4, lsl #31
   12f48:	andeq	r2, r1, r4, lsl #31
   12f4c:	andeq	r2, r1, r4, lsl #31
   12f50:	andeq	r2, r1, r4, lsl #31
   12f54:	andeq	r2, r1, r4, lsl #31
   12f58:	andeq	r2, r1, r4, lsl #31
   12f5c:	andeq	r2, r1, r4, lsl #31
   12f60:	andeq	r2, r1, r4, lsl #31
   12f64:	andeq	r2, r1, r4, lsl #31
   12f68:	andeq	r2, r1, r4, lsl #31
   12f6c:	andeq	r2, r1, r4, lsl #31
   12f70:	andeq	r2, r1, r4, lsl #31
   12f74:	andeq	r3, r1, r0, asr #32
   12f78:	andeq	r3, r1, r4, lsl #1
   12f7c:	andeq	r3, r1, r0, asr #32
   12f80:	andeq	r3, r1, ip, rrx
   12f84:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12f88:	tst	r0, #1
   12f8c:	bne	12fb8 <__assert_fail@plt+0x1f58>
   12f90:	ubfx	r0, r4, #5, #3
   12f94:	ldr	r1, [fp, #16]
   12f98:	ldr	r0, [r1, r0, lsl #2]
   12f9c:	and	r1, r4, #31
   12fa0:	mov	r2, #1
   12fa4:	tst	r0, r2, lsl r1
   12fa8:	beq	12fb8 <__assert_fail@plt+0x1f58>
   12fac:	mov	r0, r4
   12fb0:	mov	r1, r6
   12fb4:	b	12fcc <__assert_fail@plt+0x1f6c>
   12fb8:	ldr	r0, [fp, #-52]	; 0xffffffcc
   12fbc:	cmp	r0, #0
   12fc0:	mov	r0, r4
   12fc4:	mov	r1, r6
   12fc8:	beq	13304 <__assert_fail@plt+0x22a4>
   12fcc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12fd0:	tst	r2, #1
   12fd4:	bne	138c8 <__assert_fail@plt+0x2868>
   12fd8:	ldr	r2, [fp, #-64]	; 0xffffffc0
   12fdc:	subs	r2, r2, #2
   12fe0:	movwne	r2, #1
   12fe4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   12fe8:	orr	r2, r2, r3
   12fec:	tst	r2, #1
   12ff0:	bne	1302c <__assert_fail@plt+0x1fcc>
   12ff4:	cmp	r8, sl
   12ff8:	movcc	r2, #39	; 0x27
   12ffc:	strbcc	r2, [r5, r8]
   13000:	add	r2, r8, #1
   13004:	cmp	r2, sl
   13008:	movcc	r3, #36	; 0x24
   1300c:	strbcc	r3, [r5, r2]
   13010:	add	r2, r8, #2
   13014:	cmp	r2, sl
   13018:	movcc	r3, #39	; 0x27
   1301c:	strbcc	r3, [r5, r2]
   13020:	add	r8, r8, #3
   13024:	mov	r2, #1
   13028:	str	r2, [fp, #-56]	; 0xffffffc8
   1302c:	cmp	r8, sl
   13030:	movcc	r2, #92	; 0x5c
   13034:	strbcc	r2, [r5, r8]
   13038:	add	r8, r8, #1
   1303c:	b	13348 <__assert_fail@plt+0x22e8>
   13040:	cmp	lr, #1
   13044:	beq	1306c <__assert_fail@plt+0x200c>
   13048:	mov	r6, #0
   1304c:	cmn	lr, #1
   13050:	bne	13078 <__assert_fail@plt+0x2018>
   13054:	ldrb	r0, [ip, #1]
   13058:	cmp	r0, #0
   1305c:	beq	1306c <__assert_fail@plt+0x200c>
   13060:	mvn	lr, #0
   13064:	mov	r9, #0
   13068:	b	12f84 <__assert_fail@plt+0x1f24>
   1306c:	mov	r6, #0
   13070:	cmp	r7, #0
   13074:	beq	13080 <__assert_fail@plt+0x2020>
   13078:	mov	r9, #0
   1307c:	b	12f84 <__assert_fail@plt+0x1f24>
   13080:	mov	r1, #1
   13084:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13088:	cmp	r0, #2
   1308c:	bne	130a4 <__assert_fail@plt+0x2044>
   13090:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13094:	tst	r0, #1
   13098:	mov	r6, r1
   1309c:	beq	12f84 <__assert_fail@plt+0x1f24>
   130a0:	b	138c8 <__assert_fail@plt+0x2868>
   130a4:	mov	r6, r1
   130a8:	b	12f84 <__assert_fail@plt+0x1f24>
   130ac:	ldr	r0, [fp, #-64]	; 0xffffffc0
   130b0:	cmp	r0, #2
   130b4:	bne	132e8 <__assert_fail@plt+0x2288>
   130b8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   130bc:	tst	r0, #1
   130c0:	bne	138c8 <__assert_fail@plt+0x2868>
   130c4:	mov	r9, #0
   130c8:	b	132fc <__assert_fail@plt+0x229c>
   130cc:	mov	r0, #102	; 0x66
   130d0:	b	13370 <__assert_fail@plt+0x2310>
   130d4:	mov	r2, #116	; 0x74
   130d8:	b	130e8 <__assert_fail@plt+0x2088>
   130dc:	mov	r0, #98	; 0x62
   130e0:	b	13370 <__assert_fail@plt+0x2310>
   130e4:	mov	r2, #114	; 0x72
   130e8:	ldr	r0, [sp, #72]	; 0x48
   130ec:	tst	r0, #1
   130f0:	mov	r0, r2
   130f4:	bne	13370 <__assert_fail@plt+0x2310>
   130f8:	b	138c8 <__assert_fail@plt+0x2868>
   130fc:	ldr	r0, [sp, #92]	; 0x5c
   13100:	tst	r0, #1
   13104:	beq	1338c <__assert_fail@plt+0x232c>
   13108:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1310c:	tst	r0, #1
   13110:	bne	138c8 <__assert_fail@plt+0x2868>
   13114:	ldr	r0, [fp, #-64]	; 0xffffffc0
   13118:	subs	r0, r0, #2
   1311c:	movwne	r0, #1
   13120:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13124:	orr	r0, r0, r1
   13128:	tst	r0, #1
   1312c:	bne	13168 <__assert_fail@plt+0x2108>
   13130:	cmp	r8, sl
   13134:	movcc	r0, #39	; 0x27
   13138:	strbcc	r0, [r5, r8]
   1313c:	add	r0, r8, #1
   13140:	cmp	r0, sl
   13144:	movcc	r1, #36	; 0x24
   13148:	strbcc	r1, [r5, r0]
   1314c:	add	r0, r8, #2
   13150:	cmp	r0, sl
   13154:	movcc	r1, #39	; 0x27
   13158:	strbcc	r1, [r5, r0]
   1315c:	add	r8, r8, #3
   13160:	mov	r0, #1
   13164:	str	r0, [fp, #-56]	; 0xffffffc8
   13168:	cmp	r8, sl
   1316c:	movcc	r0, #92	; 0x5c
   13170:	strbcc	r0, [r5, r8]
   13174:	add	r0, r8, #1
   13178:	mov	r6, #0
   1317c:	mov	r9, #1
   13180:	mov	r4, #48	; 0x30
   13184:	ldr	r1, [fp, #-64]	; 0xffffffc0
   13188:	cmp	r1, #2
   1318c:	beq	13550 <__assert_fail@plt+0x24f0>
   13190:	add	r1, r7, #1
   13194:	cmp	r1, lr
   13198:	bcs	13550 <__assert_fail@plt+0x24f0>
   1319c:	ldrb	r1, [ip, r1]
   131a0:	sub	r1, r1, #48	; 0x30
   131a4:	uxtb	r1, r1
   131a8:	cmp	r1, #9
   131ac:	bhi	13550 <__assert_fail@plt+0x24f0>
   131b0:	cmp	r0, sl
   131b4:	movcc	r1, #48	; 0x30
   131b8:	strbcc	r1, [r5, r0]
   131bc:	add	r0, r8, #2
   131c0:	cmp	r0, sl
   131c4:	movcc	r1, #48	; 0x30
   131c8:	strbcc	r1, [r5, r0]
   131cc:	add	r8, r8, #3
   131d0:	b	12f84 <__assert_fail@plt+0x1f24>
   131d4:	mov	r9, #0
   131d8:	mov	r4, #63	; 0x3f
   131dc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   131e0:	cmp	r0, #5
   131e4:	beq	13558 <__assert_fail@plt+0x24f8>
   131e8:	cmp	r0, #2
   131ec:	bne	13600 <__assert_fail@plt+0x25a0>
   131f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   131f4:	tst	r0, #1
   131f8:	mov	r6, #0
   131fc:	beq	12f84 <__assert_fail@plt+0x1f24>
   13200:	b	138c8 <__assert_fail@plt+0x2868>
   13204:	mov	r0, #118	; 0x76
   13208:	b	13370 <__assert_fail@plt+0x2310>
   1320c:	mov	r4, #39	; 0x27
   13210:	mov	r0, #1
   13214:	str	r0, [sp, #64]	; 0x40
   13218:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1321c:	cmp	r0, #2
   13220:	bne	133a8 <__assert_fail@plt+0x2348>
   13224:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13228:	tst	r0, #1
   1322c:	bne	138c8 <__assert_fail@plt+0x2868>
   13230:	ldr	r2, [sp, #84]	; 0x54
   13234:	cmp	r2, #0
   13238:	mov	r0, r2
   1323c:	movwne	r0, #1
   13240:	clz	r1, sl
   13244:	lsr	r1, r1, #5
   13248:	orrs	r0, r0, r1
   1324c:	moveq	r2, sl
   13250:	str	r2, [sp, #84]	; 0x54
   13254:	moveq	sl, r0
   13258:	cmp	r8, sl
   1325c:	movcc	r0, #39	; 0x27
   13260:	strbcc	r0, [r5, r8]
   13264:	add	r0, r8, #1
   13268:	cmp	r0, sl
   1326c:	movcc	r1, #92	; 0x5c
   13270:	strbcc	r1, [r5, r0]
   13274:	add	r0, r8, #2
   13278:	cmp	r0, sl
   1327c:	movcc	r1, #39	; 0x27
   13280:	strbcc	r1, [r5, r0]
   13284:	add	r8, r8, #3
   13288:	mov	r0, #0
   1328c:	str	r0, [fp, #-56]	; 0xffffffc8
   13290:	mov	r9, #0
   13294:	mov	r6, #1
   13298:	b	12f84 <__assert_fail@plt+0x1f24>
   1329c:	ldr	r0, [sp, #44]	; 0x2c
   132a0:	cmp	r0, #1
   132a4:	bne	133b0 <__assert_fail@plt+0x2350>
   132a8:	str	lr, [sp, #32]
   132ac:	bl	10f58 <__ctype_b_loc@plt>
   132b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   132b4:	ldr	r0, [r0]
   132b8:	add	r0, r0, r4, lsl #1
   132bc:	ldrb	r0, [r0, #1]
   132c0:	ubfx	r6, r0, #6, #1
   132c4:	mov	r2, #1
   132c8:	ldr	r0, [sp, #60]	; 0x3c
   132cc:	orr	r1, r6, r0
   132d0:	cmp	r2, #1
   132d4:	bhi	13608 <__assert_fail@plt+0x25a8>
   132d8:	tst	r1, #1
   132dc:	beq	13608 <__assert_fail@plt+0x25a8>
   132e0:	ldr	lr, [sp, #32]
   132e4:	b	12f84 <__assert_fail@plt+0x1f24>
   132e8:	mov	r9, #0
   132ec:	mov	r0, #92	; 0x5c
   132f0:	ldr	r1, [sp, #56]	; 0x38
   132f4:	cmp	r1, #0
   132f8:	beq	13370 <__assert_fail@plt+0x2310>
   132fc:	mov	r4, #92	; 0x5c
   13300:	mov	r6, #0
   13304:	cmp	r9, #0
   13308:	bne	13340 <__assert_fail@plt+0x22e0>
   1330c:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13310:	tst	r0, #1
   13314:	beq	13340 <__assert_fail@plt+0x22e0>
   13318:	cmp	r8, sl
   1331c:	movcc	r0, #39	; 0x27
   13320:	strbcc	r0, [r5, r8]
   13324:	add	r0, r8, #1
   13328:	cmp	r0, sl
   1332c:	movcc	r1, #39	; 0x27
   13330:	strbcc	r1, [r5, r0]
   13334:	add	r8, r8, #2
   13338:	mov	r0, #0
   1333c:	str	r0, [fp, #-56]	; 0xffffffc8
   13340:	mov	r1, r6
   13344:	mov	r0, r4
   13348:	cmp	r8, sl
   1334c:	strbcc	r0, [r5, r8]
   13350:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13354:	and	r0, r0, r1
   13358:	str	r0, [fp, #-48]	; 0xffffffd0
   1335c:	add	r8, r8, #1
   13360:	add	r7, r7, #1
   13364:	cmn	lr, #1
   13368:	bne	12cbc <__assert_fail@plt+0x1c5c>
   1336c:	b	12cc8 <__assert_fail@plt+0x1c68>
   13370:	mov	r9, #0
   13374:	ldr	r1, [sp, #92]	; 0x5c
   13378:	tst	r1, #1
   1337c:	mov	r6, #0
   13380:	mov	r1, #0
   13384:	beq	12f84 <__assert_fail@plt+0x1f24>
   13388:	b	12fcc <__assert_fail@plt+0x1f6c>
   1338c:	mov	r4, #0
   13390:	ldr	r0, [sp, #40]	; 0x28
   13394:	cmp	r0, #0
   13398:	mov	r9, #0
   1339c:	mov	r6, #0
   133a0:	beq	12f84 <__assert_fail@plt+0x1f24>
   133a4:	b	13360 <__assert_fail@plt+0x2300>
   133a8:	mov	r6, #1
   133ac:	b	12f84 <__assert_fail@plt+0x1f24>
   133b0:	mov	r0, #0
   133b4:	str	r0, [fp, #-36]	; 0xffffffdc
   133b8:	str	r0, [fp, #-40]	; 0xffffffd8
   133bc:	cmn	lr, #1
   133c0:	bne	133d4 <__assert_fail@plt+0x2374>
   133c4:	mov	r0, ip
   133c8:	bl	10f7c <strlen@plt>
   133cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   133d0:	mov	lr, r0
   133d4:	ldr	r0, [sp, #76]	; 0x4c
   133d8:	add	r0, r0, r7
   133dc:	str	r0, [sp, #24]
   133e0:	mov	r6, #1
   133e4:	mov	r2, #0
   133e8:	sub	r0, fp, #40	; 0x28
   133ec:	mov	r3, r0
   133f0:	str	r5, [sp, #28]
   133f4:	str	lr, [sp, #32]
   133f8:	b	1343c <__assert_fail@plt+0x23dc>
   133fc:	ldr	r5, [sp, #52]	; 0x34
   13400:	add	r5, r0, r5
   13404:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13408:	bl	10ebc <iswprint@plt>
   1340c:	cmp	r0, #0
   13410:	movwne	r0, #1
   13414:	and	r6, r6, r0
   13418:	sub	r0, fp, #40	; 0x28
   1341c:	bl	10e74 <mbsinit@plt>
   13420:	sub	r3, fp, #40	; 0x28
   13424:	mov	r2, r5
   13428:	ldr	lr, [sp, #32]
   1342c:	cmp	r0, #0
   13430:	ldr	r5, [sp, #28]
   13434:	ldr	ip, [fp, #-80]	; 0xffffffb0
   13438:	bne	132c8 <__assert_fail@plt+0x2268>
   1343c:	str	r2, [sp, #52]	; 0x34
   13440:	add	r0, r2, r7
   13444:	add	r1, ip, r0
   13448:	str	r0, [sp, #48]	; 0x30
   1344c:	sub	r2, lr, r0
   13450:	sub	r0, fp, #44	; 0x2c
   13454:	bl	1511c <__assert_fail@plt+0x40bc>
   13458:	cmp	r0, #0
   1345c:	beq	137d4 <__assert_fail@plt+0x2774>
   13460:	cmn	r0, #1
   13464:	beq	13790 <__assert_fail@plt+0x2730>
   13468:	cmn	r0, #2
   1346c:	ldr	lr, [sp, #32]
   13470:	beq	13798 <__assert_fail@plt+0x2738>
   13474:	cmp	r0, #2
   13478:	mov	r1, #0
   1347c:	movwcc	r1, #1
   13480:	ldr	r2, [sp, #68]	; 0x44
   13484:	eor	r2, r2, #1
   13488:	orrs	r1, r2, r1
   1348c:	bne	133fc <__assert_fail@plt+0x239c>
   13490:	ldr	r1, [sp, #52]	; 0x34
   13494:	ldr	r2, [sp, #24]
   13498:	add	r1, r2, r1
   1349c:	sub	r2, r0, #1
   134a0:	b	134b0 <__assert_fail@plt+0x2450>
   134a4:	add	r1, r1, #1
   134a8:	subs	r2, r2, #1
   134ac:	beq	133fc <__assert_fail@plt+0x239c>
   134b0:	ldrb	r3, [r1]
   134b4:	sub	r3, r3, #91	; 0x5b
   134b8:	cmp	r3, #33	; 0x21
   134bc:	bhi	134a4 <__assert_fail@plt+0x2444>
   134c0:	add	r5, pc, #0
   134c4:	ldr	pc, [r5, r3, lsl #2]
   134c8:	andeq	r3, r1, r0, asr #17
   134cc:	andeq	r3, r1, r0, asr #17
   134d0:	andeq	r3, r1, r4, lsr #9
   134d4:	andeq	r3, r1, r0, asr #17
   134d8:	andeq	r3, r1, r4, lsr #9
   134dc:	andeq	r3, r1, r0, asr #17
   134e0:	andeq	r3, r1, r4, lsr #9
   134e4:	andeq	r3, r1, r4, lsr #9
   134e8:	andeq	r3, r1, r4, lsr #9
   134ec:	andeq	r3, r1, r4, lsr #9
   134f0:	andeq	r3, r1, r4, lsr #9
   134f4:	andeq	r3, r1, r4, lsr #9
   134f8:	andeq	r3, r1, r4, lsr #9
   134fc:	andeq	r3, r1, r4, lsr #9
   13500:	andeq	r3, r1, r4, lsr #9
   13504:	andeq	r3, r1, r4, lsr #9
   13508:	andeq	r3, r1, r4, lsr #9
   1350c:	andeq	r3, r1, r4, lsr #9
   13510:	andeq	r3, r1, r4, lsr #9
   13514:	andeq	r3, r1, r4, lsr #9
   13518:	andeq	r3, r1, r4, lsr #9
   1351c:	andeq	r3, r1, r4, lsr #9
   13520:	andeq	r3, r1, r4, lsr #9
   13524:	andeq	r3, r1, r4, lsr #9
   13528:	andeq	r3, r1, r4, lsr #9
   1352c:	andeq	r3, r1, r4, lsr #9
   13530:	andeq	r3, r1, r4, lsr #9
   13534:	andeq	r3, r1, r4, lsr #9
   13538:	andeq	r3, r1, r4, lsr #9
   1353c:	andeq	r3, r1, r4, lsr #9
   13540:	andeq	r3, r1, r4, lsr #9
   13544:	andeq	r3, r1, r4, lsr #9
   13548:	andeq	r3, r1, r4, lsr #9
   1354c:	andeq	r3, r1, r0, asr #17
   13550:	mov	r8, r0
   13554:	b	12f84 <__assert_fail@plt+0x1f24>
   13558:	ldr	r0, [sp, #36]	; 0x24
   1355c:	cmp	r0, #0
   13560:	beq	13600 <__assert_fail@plt+0x25a0>
   13564:	add	r0, r7, #2
   13568:	cmp	r0, lr
   1356c:	bcs	13600 <__assert_fail@plt+0x25a0>
   13570:	add	r1, r7, ip
   13574:	ldrb	r1, [r1, #1]
   13578:	cmp	r1, #63	; 0x3f
   1357c:	bne	13600 <__assert_fail@plt+0x25a0>
   13580:	ldrb	r1, [ip, r0]
   13584:	sub	r2, r1, #33	; 0x21
   13588:	cmp	r2, #29
   1358c:	bhi	13600 <__assert_fail@plt+0x25a0>
   13590:	mov	r3, #1
   13594:	movw	r6, #20929	; 0x51c1
   13598:	movt	r6, #14336	; 0x3800
   1359c:	tst	r6, r3, lsl r2
   135a0:	beq	13600 <__assert_fail@plt+0x25a0>
   135a4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   135a8:	tst	r2, #1
   135ac:	bne	138c8 <__assert_fail@plt+0x2868>
   135b0:	cmp	r8, sl
   135b4:	movcc	r2, #63	; 0x3f
   135b8:	strbcc	r2, [r5, r8]
   135bc:	add	r2, r8, #1
   135c0:	cmp	r2, sl
   135c4:	movcc	r3, #34	; 0x22
   135c8:	strbcc	r3, [r5, r2]
   135cc:	add	r2, r8, #2
   135d0:	cmp	r2, sl
   135d4:	movcc	r3, #34	; 0x22
   135d8:	strbcc	r3, [r5, r2]
   135dc:	add	r2, r8, #3
   135e0:	cmp	r2, sl
   135e4:	movcc	r3, #63	; 0x3f
   135e8:	strbcc	r3, [r5, r2]
   135ec:	add	r8, r8, #4
   135f0:	mov	r7, r0
   135f4:	mov	r4, r1
   135f8:	mov	r6, #0
   135fc:	b	12f84 <__assert_fail@plt+0x1f24>
   13600:	mov	r6, #0
   13604:	b	12f84 <__assert_fail@plt+0x1f24>
   13608:	add	r0, r2, r7
   1360c:	str	r0, [sp, #52]	; 0x34
   13610:	mov	r2, #0
   13614:	ldr	lr, [sp, #32]
   13618:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1361c:	str	r1, [sp, #48]	; 0x30
   13620:	tst	r1, #1
   13624:	bne	13700 <__assert_fail@plt+0x26a0>
   13628:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1362c:	tst	r1, #1
   13630:	bne	138c8 <__assert_fail@plt+0x2868>
   13634:	mov	r3, r0
   13638:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1363c:	subs	r1, r0, #2
   13640:	movwne	r1, #1
   13644:	orr	r1, r1, r3
   13648:	tst	r1, #1
   1364c:	bne	13684 <__assert_fail@plt+0x2624>
   13650:	cmp	r8, sl
   13654:	movcc	r0, #39	; 0x27
   13658:	strbcc	r0, [r5, r8]
   1365c:	add	r2, r8, #1
   13660:	cmp	r2, sl
   13664:	movcc	r0, #36	; 0x24
   13668:	strbcc	r0, [r5, r2]
   1366c:	add	r2, r8, #2
   13670:	cmp	r2, sl
   13674:	movcc	r0, #39	; 0x27
   13678:	strbcc	r0, [r5, r2]
   1367c:	add	r8, r8, #3
   13680:	mov	r3, #1
   13684:	cmp	r8, sl
   13688:	movcc	r1, #92	; 0x5c
   1368c:	strbcc	r1, [r5, r8]
   13690:	add	r2, r8, #1
   13694:	cmp	r2, sl
   13698:	bcs	136ac <__assert_fail@plt+0x264c>
   1369c:	uxtb	r1, r4
   136a0:	mov	r0, #48	; 0x30
   136a4:	orr	r1, r0, r1, lsr #6
   136a8:	strb	r1, [r5, r2]
   136ac:	add	r2, r8, #2
   136b0:	cmp	r2, sl
   136b4:	lsrcc	r1, r4, #3
   136b8:	movcc	r0, #6
   136bc:	bficc	r1, r0, #3, #29
   136c0:	strbcc	r1, [r5, r2]
   136c4:	mov	r0, #6
   136c8:	bfi	r4, r0, #3, #29
   136cc:	add	r8, r8, #3
   136d0:	mov	r2, #1
   136d4:	mov	r0, r3
   136d8:	b	13724 <__assert_fail@plt+0x26c4>
   136dc:	cmp	r8, sl
   136e0:	strbcc	r4, [r5, r8]
   136e4:	ldr	r1, [sp, #76]	; 0x4c
   136e8:	ldrb	r4, [r1, r7]
   136ec:	add	r8, r8, #1
   136f0:	mov	r7, r3
   136f4:	ldr	r1, [sp, #48]	; 0x30
   136f8:	tst	r1, #1
   136fc:	beq	13628 <__assert_fail@plt+0x25c8>
   13700:	ldr	r1, [fp, #-52]	; 0xffffffcc
   13704:	tst	r1, #1
   13708:	beq	1371c <__assert_fail@plt+0x26bc>
   1370c:	cmp	r8, sl
   13710:	movcc	r1, #92	; 0x5c
   13714:	strbcc	r1, [r5, r8]
   13718:	add	r8, r8, #1
   1371c:	mov	r1, #0
   13720:	str	r1, [fp, #-52]	; 0xffffffcc
   13724:	and	r9, r2, #1
   13728:	add	r3, r7, #1
   1372c:	ldr	r1, [sp, #52]	; 0x34
   13730:	cmp	r1, r3
   13734:	bls	13778 <__assert_fail@plt+0x2718>
   13738:	cmp	r9, #0
   1373c:	movwne	r9, #1
   13740:	mvn	r1, r0
   13744:	orr	r1, r1, r9
   13748:	tst	r1, #1
   1374c:	bne	136dc <__assert_fail@plt+0x267c>
   13750:	cmp	r8, sl
   13754:	movcc	r1, #39	; 0x27
   13758:	strbcc	r1, [r5, r8]
   1375c:	add	r1, r8, #1
   13760:	cmp	r1, sl
   13764:	movcc	r0, #39	; 0x27
   13768:	strbcc	r0, [r5, r1]
   1376c:	add	r8, r8, #2
   13770:	mov	r0, #0
   13774:	b	136dc <__assert_fail@plt+0x267c>
   13778:	str	r0, [fp, #-56]	; 0xffffffc8
   1377c:	cmp	r9, #0
   13780:	movwne	r9, #1
   13784:	cmp	r9, #0
   13788:	beq	1330c <__assert_fail@plt+0x22ac>
   1378c:	b	13340 <__assert_fail@plt+0x22e0>
   13790:	mov	r6, #0
   13794:	b	137d4 <__assert_fail@plt+0x2774>
   13798:	mov	r6, #0
   1379c:	ldr	r0, [sp, #48]	; 0x30
   137a0:	cmp	r0, lr
   137a4:	bcs	137d4 <__assert_fail@plt+0x2774>
   137a8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137ac:	add	r0, ip, r7
   137b0:	ldr	r2, [sp, #52]	; 0x34
   137b4:	ldrb	r1, [r0, r2]
   137b8:	cmp	r1, #0
   137bc:	beq	132c8 <__assert_fail@plt+0x2268>
   137c0:	add	r2, r2, #1
   137c4:	add	r1, r7, r2
   137c8:	cmp	r1, lr
   137cc:	bcc	137b4 <__assert_fail@plt+0x2754>
   137d0:	b	132c8 <__assert_fail@plt+0x2268>
   137d4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   137d8:	ldr	r2, [sp, #52]	; 0x34
   137dc:	b	132c8 <__assert_fail@plt+0x2268>
   137e0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   137e4:	eor	r0, r1, #2
   137e8:	orr	r0, r0, r8
   137ec:	clz	r0, r0
   137f0:	lsr	r0, r0, #5
   137f4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   137f8:	tst	r3, r0
   137fc:	bne	138c8 <__assert_fail@plt+0x2868>
   13800:	mov	r6, r5
   13804:	subs	r0, r1, #2
   13808:	movwne	r0, #1
   1380c:	orr	r0, r3, r0
   13810:	tst	r0, #1
   13814:	ldr	r2, [sp, #92]	; 0x5c
   13818:	ldreq	r0, [sp, #64]	; 0x40
   1381c:	eoreq	r0, r0, #1
   13820:	tsteq	r0, #1
   13824:	bne	13864 <__assert_fail@plt+0x2804>
   13828:	mov	r9, lr
   1382c:	ldr	r0, [fp, #-48]	; 0xffffffd0
   13830:	tst	r0, #1
   13834:	bne	13930 <__assert_fail@plt+0x28d0>
   13838:	ldr	r0, [sp, #84]	; 0x54
   1383c:	cmp	r0, #0
   13840:	beq	13864 <__assert_fail@plt+0x2804>
   13844:	mov	r0, #0
   13848:	str	r0, [fp, #-48]	; 0xffffffd0
   1384c:	mov	r1, #2
   13850:	cmp	sl, #0
   13854:	mov	r0, r2
   13858:	mov	r4, r3
   1385c:	ldr	r7, [sp, #84]	; 0x54
   13860:	beq	12a3c <__assert_fail@plt+0x19dc>
   13864:	ldr	r1, [fp, #-84]	; 0xffffffac
   13868:	clz	r0, r1
   1386c:	lsr	r0, r0, #5
   13870:	orr	r0, r0, r3
   13874:	tst	r0, #1
   13878:	bne	138a4 <__assert_fail@plt+0x2844>
   1387c:	ldrb	r0, [r1]
   13880:	cmp	r0, #0
   13884:	beq	138a4 <__assert_fail@plt+0x2844>
   13888:	add	r1, r1, #1
   1388c:	cmp	r8, sl
   13890:	strbcc	r0, [r6, r8]
   13894:	add	r8, r8, #1
   13898:	ldrb	r0, [r1], #1
   1389c:	cmp	r0, #0
   138a0:	bne	1388c <__assert_fail@plt+0x282c>
   138a4:	cmp	r8, sl
   138a8:	movcc	r0, #0
   138ac:	strbcc	r0, [r6, r8]
   138b0:	b	13924 <__assert_fail@plt+0x28c4>
   138b4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   138b8:	mov	lr, r4
   138bc:	b	138c8 <__assert_fail@plt+0x2868>
   138c0:	ldr	r5, [sp, #28]
   138c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   138c8:	mov	r0, #0
   138cc:	ldr	r1, [fp, #12]
   138d0:	bic	r1, r1, #2
   138d4:	mov	r2, #2
   138d8:	ldr	r3, [sp, #92]	; 0x5c
   138dc:	tst	r3, #1
   138e0:	movwne	r2, #4
   138e4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   138e8:	cmp	r3, #2
   138ec:	movne	r2, r3
   138f0:	str	r2, [sp]
   138f4:	str	r1, [sp, #4]
   138f8:	str	r0, [sp, #8]
   138fc:	ldr	r0, [sp, #80]	; 0x50
   13900:	str	r0, [sp, #12]
   13904:	ldr	r0, [sp, #88]	; 0x58
   13908:	str	r0, [sp, #16]
   1390c:	mov	r0, r5
   13910:	mov	r1, sl
   13914:	mov	r2, ip
   13918:	mov	r3, lr
   1391c:	bl	129b0 <__assert_fail@plt+0x1950>
   13920:	mov	r8, r0
   13924:	mov	r0, r8
   13928:	sub	sp, fp, #28
   1392c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13930:	mov	r0, #5
   13934:	str	r0, [sp]
   13938:	ldr	r0, [fp, #12]
   1393c:	str	r0, [sp, #4]
   13940:	ldr	r0, [fp, #16]
   13944:	str	r0, [sp, #8]
   13948:	ldr	r0, [sp, #80]	; 0x50
   1394c:	str	r0, [sp, #12]
   13950:	ldr	r0, [sp, #88]	; 0x58
   13954:	str	r0, [sp, #16]
   13958:	mov	r0, r6
   1395c:	ldr	r1, [sp, #84]	; 0x54
   13960:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13964:	mov	r3, r9
   13968:	b	1391c <__assert_fail@plt+0x28bc>
   1396c:	bl	1103c <abort@plt>
   13970:	mov	r3, r2
   13974:	mov	r2, #0
   13978:	b	1397c <__assert_fail@plt+0x291c>
   1397c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13980:	add	fp, sp, #28
   13984:	sub	sp, sp, #36	; 0x24
   13988:	mov	r4, r2
   1398c:	str	r2, [sp, #24]
   13990:	mov	r5, r1
   13994:	mov	r6, r0
   13998:	str	r0, [sp, #20]
   1399c:	movw	r8, #29096	; 0x71a8
   139a0:	movt	r8, #2
   139a4:	cmp	r3, #0
   139a8:	movne	r8, r3
   139ac:	bl	10f88 <__errno_location@plt>
   139b0:	str	r0, [sp, #28]
   139b4:	ldm	r8, {r3, r9}
   139b8:	ldr	r1, [r8, #40]	; 0x28
   139bc:	ldr	r2, [r8, #44]	; 0x2c
   139c0:	ldr	r7, [r0]
   139c4:	str	r7, [sp, #32]
   139c8:	add	sl, r8, #8
   139cc:	cmp	r4, #0
   139d0:	orreq	r9, r9, #1
   139d4:	stm	sp, {r3, r9, sl}
   139d8:	str	r1, [sp, #12]
   139dc:	str	r2, [sp, #16]
   139e0:	mov	r0, #0
   139e4:	mov	r1, #0
   139e8:	mov	r2, r6
   139ec:	mov	r3, r5
   139f0:	mov	r7, r5
   139f4:	bl	129b0 <__assert_fail@plt+0x1950>
   139f8:	mov	r5, r0
   139fc:	add	r4, r0, #1
   13a00:	mov	r0, r4
   13a04:	bl	14884 <__assert_fail@plt+0x3824>
   13a08:	mov	r6, r0
   13a0c:	ldr	r0, [r8]
   13a10:	ldr	r1, [r8, #40]	; 0x28
   13a14:	ldr	r2, [r8, #44]	; 0x2c
   13a18:	stm	sp, {r0, r9, sl}
   13a1c:	str	r1, [sp, #12]
   13a20:	str	r2, [sp, #16]
   13a24:	mov	r0, r6
   13a28:	mov	r1, r4
   13a2c:	ldr	r2, [sp, #20]
   13a30:	mov	r3, r7
   13a34:	bl	129b0 <__assert_fail@plt+0x1950>
   13a38:	ldr	r0, [sp, #24]
   13a3c:	ldr	r1, [sp, #32]
   13a40:	ldr	r2, [sp, #28]
   13a44:	str	r1, [r2]
   13a48:	cmp	r0, #0
   13a4c:	strne	r5, [r0]
   13a50:	mov	r0, r6
   13a54:	sub	sp, fp, #28
   13a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a5c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a60:	add	fp, sp, #24
   13a64:	movw	r8, #28920	; 0x70f8
   13a68:	movt	r8, #2
   13a6c:	ldr	r4, [r8]
   13a70:	movw	r5, #28924	; 0x70fc
   13a74:	movt	r5, #2
   13a78:	ldr	r0, [r5]
   13a7c:	cmp	r0, #2
   13a80:	blt	13aac <__assert_fail@plt+0x2a4c>
   13a84:	add	r7, r4, #12
   13a88:	mov	r6, #0
   13a8c:	ldr	r0, [r7, r6, lsl #3]
   13a90:	bl	126a4 <__assert_fail@plt+0x1644>
   13a94:	add	r0, r6, #1
   13a98:	ldr	r1, [r5]
   13a9c:	add	r2, r6, #2
   13aa0:	cmp	r2, r1
   13aa4:	mov	r6, r0
   13aa8:	blt	13a8c <__assert_fail@plt+0x2a2c>
   13aac:	ldr	r0, [r4, #4]
   13ab0:	movw	r9, #29144	; 0x71d8
   13ab4:	movt	r9, #2
   13ab8:	cmp	r0, r9
   13abc:	movw	r7, #28928	; 0x7100
   13ac0:	movt	r7, #2
   13ac4:	beq	13ad4 <__assert_fail@plt+0x2a74>
   13ac8:	bl	126a4 <__assert_fail@plt+0x1644>
   13acc:	mov	r0, #256	; 0x100
   13ad0:	stm	r7, {r0, r9}
   13ad4:	cmp	r4, r7
   13ad8:	beq	13ae8 <__assert_fail@plt+0x2a88>
   13adc:	mov	r0, r4
   13ae0:	bl	126a4 <__assert_fail@plt+0x1644>
   13ae4:	str	r7, [r8]
   13ae8:	mov	r0, #1
   13aec:	str	r0, [r5]
   13af0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13af4:	movw	r3, #29096	; 0x71a8
   13af8:	movt	r3, #2
   13afc:	mvn	r2, #0
   13b00:	b	13b04 <__assert_fail@plt+0x2aa4>
   13b04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b08:	add	fp, sp, #28
   13b0c:	sub	sp, sp, #44	; 0x2c
   13b10:	mov	r7, r3
   13b14:	str	r2, [sp, #36]	; 0x24
   13b18:	str	r1, [sp, #32]
   13b1c:	mov	r5, r0
   13b20:	bl	10f88 <__errno_location@plt>
   13b24:	cmp	r5, #0
   13b28:	bmi	13c98 <__assert_fail@plt+0x2c38>
   13b2c:	cmn	r5, #-2147483647	; 0x80000001
   13b30:	beq	13c98 <__assert_fail@plt+0x2c38>
   13b34:	movw	r4, #28920	; 0x70f8
   13b38:	movt	r4, #2
   13b3c:	ldr	r6, [r4]
   13b40:	str	r0, [sp, #28]
   13b44:	ldr	r0, [r0]
   13b48:	str	r0, [sp, #24]
   13b4c:	movw	r8, #28924	; 0x70fc
   13b50:	movt	r8, #2
   13b54:	ldr	r1, [r8]
   13b58:	cmp	r1, r5
   13b5c:	ble	13b68 <__assert_fail@plt+0x2b08>
   13b60:	mov	sl, r6
   13b64:	b	13bd4 <__assert_fail@plt+0x2b74>
   13b68:	str	r1, [fp, #-32]	; 0xffffffe0
   13b6c:	mov	r0, #8
   13b70:	str	r0, [sp]
   13b74:	movw	r9, #28928	; 0x7100
   13b78:	movt	r9, #2
   13b7c:	subs	r0, r6, r9
   13b80:	movne	r0, r6
   13b84:	sub	r1, r5, r1
   13b88:	add	r2, r1, #1
   13b8c:	sub	r1, fp, #32
   13b90:	mvn	r3, #-2147483648	; 0x80000000
   13b94:	bl	14960 <__assert_fail@plt+0x3900>
   13b98:	mov	sl, r0
   13b9c:	str	r0, [r4]
   13ba0:	cmp	r6, r9
   13ba4:	bne	13bb0 <__assert_fail@plt+0x2b50>
   13ba8:	ldrd	r0, [r9]
   13bac:	stm	sl, {r0, r1}
   13bb0:	ldr	r1, [r8]
   13bb4:	add	r0, sl, r1, lsl #3
   13bb8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   13bbc:	sub	r1, r2, r1
   13bc0:	lsl	r2, r1, #3
   13bc4:	mov	r1, #0
   13bc8:	bl	10fa0 <memset@plt>
   13bcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13bd0:	str	r0, [r8]
   13bd4:	mov	r9, sl
   13bd8:	ldr	r6, [r9, r5, lsl #3]!
   13bdc:	ldr	r4, [r9, #4]!
   13be0:	ldm	r7, {r0, r1}
   13be4:	ldr	r2, [r7, #40]	; 0x28
   13be8:	ldr	r3, [r7, #44]	; 0x2c
   13bec:	orr	r8, r1, #1
   13bf0:	add	r1, r7, #8
   13bf4:	stm	sp, {r0, r8}
   13bf8:	str	r1, [sp, #20]
   13bfc:	add	r0, sp, #8
   13c00:	stm	r0, {r1, r2, r3}
   13c04:	mov	r0, r4
   13c08:	mov	r1, r6
   13c0c:	ldr	r2, [sp, #32]
   13c10:	ldr	r3, [sp, #36]	; 0x24
   13c14:	bl	129b0 <__assert_fail@plt+0x1950>
   13c18:	cmp	r6, r0
   13c1c:	bhi	13c80 <__assert_fail@plt+0x2c20>
   13c20:	add	r6, r0, #1
   13c24:	str	r6, [sl, r5, lsl #3]
   13c28:	movw	r0, #29144	; 0x71d8
   13c2c:	movt	r0, #2
   13c30:	cmp	r4, r0
   13c34:	beq	13c40 <__assert_fail@plt+0x2be0>
   13c38:	mov	r0, r4
   13c3c:	bl	126a4 <__assert_fail@plt+0x1644>
   13c40:	mov	r0, r6
   13c44:	bl	14884 <__assert_fail@plt+0x3824>
   13c48:	mov	r4, r0
   13c4c:	str	r0, [r9]
   13c50:	ldr	r0, [r7]
   13c54:	ldr	r1, [r7, #40]	; 0x28
   13c58:	ldr	r2, [r7, #44]	; 0x2c
   13c5c:	stm	sp, {r0, r8}
   13c60:	ldr	r0, [sp, #20]
   13c64:	add	r3, sp, #8
   13c68:	stm	r3, {r0, r1, r2}
   13c6c:	mov	r0, r4
   13c70:	mov	r1, r6
   13c74:	ldr	r2, [sp, #32]
   13c78:	ldr	r3, [sp, #36]	; 0x24
   13c7c:	bl	129b0 <__assert_fail@plt+0x1950>
   13c80:	ldr	r0, [sp, #28]
   13c84:	ldr	r1, [sp, #24]
   13c88:	str	r1, [r0]
   13c8c:	mov	r0, r4
   13c90:	sub	sp, fp, #28
   13c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c98:	bl	1103c <abort@plt>
   13c9c:	movw	r3, #29096	; 0x71a8
   13ca0:	movt	r3, #2
   13ca4:	b	13b04 <__assert_fail@plt+0x2aa4>
   13ca8:	mov	r1, r0
   13cac:	mov	r0, #0
   13cb0:	b	13af4 <__assert_fail@plt+0x2a94>
   13cb4:	mov	r2, r1
   13cb8:	mov	r1, r0
   13cbc:	mov	r0, #0
   13cc0:	b	13c9c <__assert_fail@plt+0x2c3c>
   13cc4:	push	{r4, r5, r6, sl, fp, lr}
   13cc8:	add	fp, sp, #16
   13ccc:	sub	sp, sp, #48	; 0x30
   13cd0:	mov	r4, r2
   13cd4:	mov	r5, r0
   13cd8:	mov	r6, sp
   13cdc:	mov	r0, r6
   13ce0:	bl	13d00 <__assert_fail@plt+0x2ca0>
   13ce4:	mov	r0, r5
   13ce8:	mov	r1, r4
   13cec:	mvn	r2, #0
   13cf0:	mov	r3, r6
   13cf4:	bl	13b04 <__assert_fail@plt+0x2aa4>
   13cf8:	sub	sp, fp, #16
   13cfc:	pop	{r4, r5, r6, sl, fp, pc}
   13d00:	push	{fp, lr}
   13d04:	mov	fp, sp
   13d08:	vmov.i32	q8, #0	; 0x00000000
   13d0c:	mov	r2, #32
   13d10:	mov	r3, r0
   13d14:	vst1.32	{d16-d17}, [r3], r2
   13d18:	vst1.32	{d16-d17}, [r3]
   13d1c:	add	r2, r0, #16
   13d20:	vst1.32	{d16-d17}, [r2]
   13d24:	cmp	r1, #10
   13d28:	strne	r1, [r0]
   13d2c:	popne	{fp, pc}
   13d30:	bl	1103c <abort@plt>
   13d34:	push	{r4, r5, r6, r7, fp, lr}
   13d38:	add	fp, sp, #16
   13d3c:	sub	sp, sp, #48	; 0x30
   13d40:	mov	r4, r3
   13d44:	mov	r5, r2
   13d48:	mov	r6, r0
   13d4c:	mov	r7, sp
   13d50:	mov	r0, r7
   13d54:	bl	13d00 <__assert_fail@plt+0x2ca0>
   13d58:	mov	r0, r6
   13d5c:	mov	r1, r5
   13d60:	mov	r2, r4
   13d64:	mov	r3, r7
   13d68:	bl	13b04 <__assert_fail@plt+0x2aa4>
   13d6c:	sub	sp, fp, #16
   13d70:	pop	{r4, r5, r6, r7, fp, pc}
   13d74:	mov	r2, r1
   13d78:	mov	r1, r0
   13d7c:	mov	r0, #0
   13d80:	b	13cc4 <__assert_fail@plt+0x2c64>
   13d84:	mov	r3, r2
   13d88:	mov	r2, r1
   13d8c:	mov	r1, r0
   13d90:	mov	r0, #0
   13d94:	b	13d34 <__assert_fail@plt+0x2cd4>
   13d98:	push	{r4, r5, r6, sl, fp, lr}
   13d9c:	add	fp, sp, #16
   13da0:	sub	sp, sp, #48	; 0x30
   13da4:	mov	r4, r1
   13da8:	mov	r5, r0
   13dac:	movw	r0, #29096	; 0x71a8
   13db0:	movt	r0, #2
   13db4:	add	r1, r0, #16
   13db8:	mov	r3, #32
   13dbc:	vld1.64	{d16-d17}, [r0], r3
   13dc0:	vld1.64	{d18-d19}, [r1]
   13dc4:	mov	r6, sp
   13dc8:	add	r1, r6, #16
   13dcc:	vld1.64	{d20-d21}, [r0]
   13dd0:	vst1.64	{d18-d19}, [r1]
   13dd4:	mov	r0, r6
   13dd8:	vst1.64	{d16-d17}, [r0], r3
   13ddc:	vst1.64	{d20-d21}, [r0]
   13de0:	mov	r0, r6
   13de4:	mov	r1, r2
   13de8:	mov	r2, #1
   13dec:	bl	128a4 <__assert_fail@plt+0x1844>
   13df0:	mov	r0, #0
   13df4:	mov	r1, r5
   13df8:	mov	r2, r4
   13dfc:	mov	r3, r6
   13e00:	bl	13b04 <__assert_fail@plt+0x2aa4>
   13e04:	sub	sp, fp, #16
   13e08:	pop	{r4, r5, r6, sl, fp, pc}
   13e0c:	mov	r2, r1
   13e10:	mvn	r1, #0
   13e14:	b	13d98 <__assert_fail@plt+0x2d38>
   13e18:	mov	r1, #58	; 0x3a
   13e1c:	b	13e0c <__assert_fail@plt+0x2dac>
   13e20:	mov	r2, #58	; 0x3a
   13e24:	b	13d98 <__assert_fail@plt+0x2d38>
   13e28:	push	{r4, r5, r6, sl, fp, lr}
   13e2c:	add	fp, sp, #16
   13e30:	sub	sp, sp, #48	; 0x30
   13e34:	mov	r4, r2
   13e38:	mov	r5, r0
   13e3c:	mov	r6, sp
   13e40:	mov	r0, r6
   13e44:	bl	13d00 <__assert_fail@plt+0x2ca0>
   13e48:	mov	r0, r6
   13e4c:	mov	r1, #58	; 0x3a
   13e50:	mov	r2, #1
   13e54:	bl	128a4 <__assert_fail@plt+0x1844>
   13e58:	mov	r0, r5
   13e5c:	mov	r1, r4
   13e60:	mvn	r2, #0
   13e64:	mov	r3, r6
   13e68:	bl	13b04 <__assert_fail@plt+0x2aa4>
   13e6c:	sub	sp, fp, #16
   13e70:	pop	{r4, r5, r6, sl, fp, pc}
   13e74:	push	{fp, lr}
   13e78:	mov	fp, sp
   13e7c:	sub	sp, sp, #8
   13e80:	mvn	ip, #0
   13e84:	str	ip, [sp]
   13e88:	bl	13e94 <__assert_fail@plt+0x2e34>
   13e8c:	mov	sp, fp
   13e90:	pop	{fp, pc}
   13e94:	push	{r4, r5, r6, r7, fp, lr}
   13e98:	add	fp, sp, #16
   13e9c:	sub	sp, sp, #48	; 0x30
   13ea0:	mov	r7, r3
   13ea4:	mov	r5, r0
   13ea8:	movw	r0, #29096	; 0x71a8
   13eac:	movt	r0, #2
   13eb0:	add	r3, r0, #16
   13eb4:	mov	r4, #32
   13eb8:	vld1.64	{d16-d17}, [r0], r4
   13ebc:	vld1.64	{d18-d19}, [r3]
   13ec0:	mov	r6, sp
   13ec4:	add	r3, r6, #16
   13ec8:	vld1.64	{d20-d21}, [r0]
   13ecc:	vst1.64	{d18-d19}, [r3]
   13ed0:	mov	r0, r6
   13ed4:	vst1.64	{d16-d17}, [r0], r4
   13ed8:	vst1.64	{d20-d21}, [r0]
   13edc:	mov	r0, r6
   13ee0:	bl	128fc <__assert_fail@plt+0x189c>
   13ee4:	ldr	r2, [fp, #8]
   13ee8:	mov	r0, r5
   13eec:	mov	r1, r7
   13ef0:	mov	r3, r6
   13ef4:	bl	13b04 <__assert_fail@plt+0x2aa4>
   13ef8:	sub	sp, fp, #16
   13efc:	pop	{r4, r5, r6, r7, fp, pc}
   13f00:	mov	r3, r2
   13f04:	mov	r2, r1
   13f08:	mov	r1, r0
   13f0c:	mov	r0, #0
   13f10:	b	13e74 <__assert_fail@plt+0x2e14>
   13f14:	push	{fp, lr}
   13f18:	mov	fp, sp
   13f1c:	sub	sp, sp, #8
   13f20:	mov	ip, r2
   13f24:	mov	r2, r1
   13f28:	mov	r1, r0
   13f2c:	str	r3, [sp]
   13f30:	mov	r0, #0
   13f34:	mov	r3, ip
   13f38:	bl	13e94 <__assert_fail@plt+0x2e34>
   13f3c:	mov	sp, fp
   13f40:	pop	{fp, pc}
   13f44:	movw	r3, #28936	; 0x7108
   13f48:	movt	r3, #2
   13f4c:	b	13b04 <__assert_fail@plt+0x2aa4>
   13f50:	mov	r2, r1
   13f54:	mov	r1, r0
   13f58:	mov	r0, #0
   13f5c:	b	13f44 <__assert_fail@plt+0x2ee4>
   13f60:	mvn	r2, #0
   13f64:	b	13f44 <__assert_fail@plt+0x2ee4>
   13f68:	mov	r1, r0
   13f6c:	mov	r0, #0
   13f70:	b	13f60 <__assert_fail@plt+0x2f00>
   13f74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13f78:	add	fp, sp, #24
   13f7c:	sub	sp, sp, #16
   13f80:	mov	r4, r1
   13f84:	mov	r5, r0
   13f88:	mov	r7, #0
   13f8c:	mov	r0, #0
   13f90:	mov	r1, r5
   13f94:	mov	r2, #5
   13f98:	bl	10e98 <dcgettext@plt>
   13f9c:	cmp	r0, r5
   13fa0:	beq	13fac <__assert_fail@plt+0x2f4c>
   13fa4:	sub	sp, fp, #24
   13fa8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13fac:	bl	150e4 <__assert_fail@plt+0x4084>
   13fb0:	mov	r6, r0
   13fb4:	mov	r8, #56	; 0x38
   13fb8:	mov	r0, #45	; 0x2d
   13fbc:	stm	sp, {r0, r8}
   13fc0:	str	r7, [sp, #8]
   13fc4:	str	r7, [sp, #12]
   13fc8:	mov	r0, r6
   13fcc:	mov	r1, #85	; 0x55
   13fd0:	mov	r2, #84	; 0x54
   13fd4:	mov	r3, #70	; 0x46
   13fd8:	bl	14070 <__assert_fail@plt+0x3010>
   13fdc:	cmp	r0, #0
   13fe0:	beq	13ffc <__assert_fail@plt+0x2f9c>
   13fe4:	ldrb	r1, [r5]
   13fe8:	movw	r2, #23960	; 0x5d98
   13fec:	movt	r2, #1
   13ff0:	movw	r0, #23964	; 0x5d9c
   13ff4:	movt	r0, #1
   13ff8:	b	14040 <__assert_fail@plt+0x2fe0>
   13ffc:	mov	r0, #48	; 0x30
   14000:	mov	r1, #51	; 0x33
   14004:	str	r8, [sp]
   14008:	stmib	sp, {r0, r1}
   1400c:	str	r0, [sp, #12]
   14010:	mov	r0, r6
   14014:	mov	r1, #71	; 0x47
   14018:	mov	r2, #66	; 0x42
   1401c:	mov	r3, #49	; 0x31
   14020:	bl	14070 <__assert_fail@plt+0x3010>
   14024:	cmp	r0, #0
   14028:	beq	14050 <__assert_fail@plt+0x2ff0>
   1402c:	ldrb	r1, [r5]
   14030:	movw	r2, #23968	; 0x5da0
   14034:	movt	r2, #1
   14038:	movw	r0, #23972	; 0x5da4
   1403c:	movt	r0, #1
   14040:	cmp	r1, #96	; 0x60
   14044:	moveq	r0, r2
   14048:	sub	sp, fp, #24
   1404c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14050:	movw	r1, #23956	; 0x5d94
   14054:	movt	r1, #1
   14058:	movw	r0, #23788	; 0x5cec
   1405c:	movt	r0, #1
   14060:	cmp	r4, #9
   14064:	moveq	r0, r1
   14068:	sub	sp, fp, #24
   1406c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14070:	push	{r4, r5, r6, r7, fp, lr}
   14074:	add	fp, sp, #16
   14078:	sub	sp, sp, #16
   1407c:	mov	r4, r3
   14080:	mov	r5, r2
   14084:	mov	r7, r1
   14088:	mov	r6, r0
   1408c:	mov	r0, r1
   14090:	bl	14fa0 <__assert_fail@plt+0x3f40>
   14094:	ldrb	r1, [r6]
   14098:	cmp	r0, #0
   1409c:	andne	r1, r1, #223	; 0xdf
   140a0:	mov	r0, #0
   140a4:	cmp	r1, r7
   140a8:	bne	140e0 <__assert_fail@plt+0x3080>
   140ac:	cmp	r7, #0
   140b0:	beq	140e8 <__assert_fail@plt+0x3088>
   140b4:	ldr	r0, [fp, #20]
   140b8:	ldr	r1, [fp, #16]
   140bc:	ldr	r2, [fp, #12]
   140c0:	ldr	r3, [fp, #8]
   140c4:	str	r2, [sp]
   140c8:	str	r1, [sp, #4]
   140cc:	str	r0, [sp, #8]
   140d0:	mov	r0, r6
   140d4:	mov	r1, r5
   140d8:	mov	r2, r4
   140dc:	bl	140f4 <__assert_fail@plt+0x3094>
   140e0:	sub	sp, fp, #16
   140e4:	pop	{r4, r5, r6, r7, fp, pc}
   140e8:	mov	r0, #1
   140ec:	sub	sp, fp, #16
   140f0:	pop	{r4, r5, r6, r7, fp, pc}
   140f4:	push	{r4, r5, r6, r7, fp, lr}
   140f8:	add	fp, sp, #16
   140fc:	sub	sp, sp, #8
   14100:	mov	r4, r3
   14104:	mov	r5, r2
   14108:	mov	r7, r1
   1410c:	mov	r6, r0
   14110:	mov	r0, r1
   14114:	bl	14fa0 <__assert_fail@plt+0x3f40>
   14118:	ldrb	r1, [r6, #1]
   1411c:	cmp	r0, #0
   14120:	andne	r1, r1, #223	; 0xdf
   14124:	mov	r0, #0
   14128:	cmp	r1, r7
   1412c:	bne	1415c <__assert_fail@plt+0x30fc>
   14130:	cmp	r7, #0
   14134:	beq	14164 <__assert_fail@plt+0x3104>
   14138:	ldr	r0, [fp, #16]
   1413c:	ldr	r1, [fp, #12]
   14140:	ldr	r3, [fp, #8]
   14144:	str	r1, [sp]
   14148:	str	r0, [sp, #4]
   1414c:	mov	r0, r6
   14150:	mov	r1, r5
   14154:	mov	r2, r4
   14158:	bl	14170 <__assert_fail@plt+0x3110>
   1415c:	sub	sp, fp, #16
   14160:	pop	{r4, r5, r6, r7, fp, pc}
   14164:	mov	r0, #1
   14168:	sub	sp, fp, #16
   1416c:	pop	{r4, r5, r6, r7, fp, pc}
   14170:	push	{r4, r5, r6, r7, fp, lr}
   14174:	add	fp, sp, #16
   14178:	sub	sp, sp, #8
   1417c:	mov	r4, r3
   14180:	mov	r5, r2
   14184:	mov	r7, r1
   14188:	mov	r6, r0
   1418c:	mov	r0, r1
   14190:	bl	14fa0 <__assert_fail@plt+0x3f40>
   14194:	ldrb	r1, [r6, #2]
   14198:	cmp	r0, #0
   1419c:	andne	r1, r1, #223	; 0xdf
   141a0:	mov	r0, #0
   141a4:	cmp	r1, r7
   141a8:	bne	141d0 <__assert_fail@plt+0x3170>
   141ac:	cmp	r7, #0
   141b0:	beq	141d8 <__assert_fail@plt+0x3178>
   141b4:	ldr	r0, [fp, #12]
   141b8:	ldr	r3, [fp, #8]
   141bc:	str	r0, [sp]
   141c0:	mov	r0, r6
   141c4:	mov	r1, r5
   141c8:	mov	r2, r4
   141cc:	bl	141e4 <__assert_fail@plt+0x3184>
   141d0:	sub	sp, fp, #16
   141d4:	pop	{r4, r5, r6, r7, fp, pc}
   141d8:	mov	r0, #1
   141dc:	sub	sp, fp, #16
   141e0:	pop	{r4, r5, r6, r7, fp, pc}
   141e4:	push	{r4, r5, r6, r7, fp, lr}
   141e8:	add	fp, sp, #16
   141ec:	mov	r4, r3
   141f0:	mov	r5, r2
   141f4:	mov	r7, r1
   141f8:	mov	r6, r0
   141fc:	mov	r0, r1
   14200:	bl	14fa0 <__assert_fail@plt+0x3f40>
   14204:	ldrb	r1, [r6, #3]
   14208:	ldr	r3, [fp, #8]
   1420c:	cmp	r0, #0
   14210:	andne	r1, r1, #223	; 0xdf
   14214:	mov	r0, #0
   14218:	cmp	r1, r7
   1421c:	bne	14240 <__assert_fail@plt+0x31e0>
   14220:	cmp	r7, #0
   14224:	beq	1423c <__assert_fail@plt+0x31dc>
   14228:	mov	r0, r6
   1422c:	mov	r1, r5
   14230:	mov	r2, r4
   14234:	pop	{r4, r5, r6, r7, fp, lr}
   14238:	b	14244 <__assert_fail@plt+0x31e4>
   1423c:	mov	r0, #1
   14240:	pop	{r4, r5, r6, r7, fp, pc}
   14244:	push	{r4, r5, r6, r7, fp, lr}
   14248:	add	fp, sp, #16
   1424c:	mov	r4, r3
   14250:	mov	r5, r2
   14254:	mov	r7, r1
   14258:	mov	r6, r0
   1425c:	mov	r0, r1
   14260:	bl	14fa0 <__assert_fail@plt+0x3f40>
   14264:	ldrb	r1, [r6, #4]
   14268:	cmp	r0, #0
   1426c:	andne	r1, r1, #223	; 0xdf
   14270:	mov	r0, #0
   14274:	cmp	r1, r7
   14278:	bne	1429c <__assert_fail@plt+0x323c>
   1427c:	cmp	r7, #0
   14280:	beq	14298 <__assert_fail@plt+0x3238>
   14284:	mov	r0, r6
   14288:	mov	r1, r5
   1428c:	mov	r2, r4
   14290:	pop	{r4, r5, r6, r7, fp, lr}
   14294:	b	142a0 <__assert_fail@plt+0x3240>
   14298:	mov	r0, #1
   1429c:	pop	{r4, r5, r6, r7, fp, pc}
   142a0:	push	{r4, r5, r6, sl, fp, lr}
   142a4:	add	fp, sp, #16
   142a8:	mov	r4, r2
   142ac:	mov	r6, r1
   142b0:	mov	r5, r0
   142b4:	mov	r0, r1
   142b8:	bl	14fa0 <__assert_fail@plt+0x3f40>
   142bc:	ldrb	r1, [r5, #5]
   142c0:	cmp	r0, #0
   142c4:	andne	r1, r1, #223	; 0xdf
   142c8:	mov	r0, #0
   142cc:	cmp	r1, r6
   142d0:	bne	142f0 <__assert_fail@plt+0x3290>
   142d4:	cmp	r6, #0
   142d8:	beq	142ec <__assert_fail@plt+0x328c>
   142dc:	mov	r0, r5
   142e0:	mov	r1, r4
   142e4:	pop	{r4, r5, r6, sl, fp, lr}
   142e8:	b	142f4 <__assert_fail@plt+0x3294>
   142ec:	mov	r0, #1
   142f0:	pop	{r4, r5, r6, sl, fp, pc}
   142f4:	push	{r4, r5, fp, lr}
   142f8:	add	fp, sp, #8
   142fc:	mov	r5, r1
   14300:	mov	r4, r0
   14304:	mov	r0, r1
   14308:	bl	14fa0 <__assert_fail@plt+0x3f40>
   1430c:	ldrb	r1, [r4, #6]
   14310:	cmp	r0, #0
   14314:	andne	r1, r1, #223	; 0xdf
   14318:	mov	r0, #0
   1431c:	cmp	r1, r5
   14320:	popne	{r4, r5, fp, pc}
   14324:	cmp	r5, #0
   14328:	beq	14338 <__assert_fail@plt+0x32d8>
   1432c:	mov	r0, r4
   14330:	pop	{r4, r5, fp, lr}
   14334:	b	14340 <__assert_fail@plt+0x32e0>
   14338:	mov	r0, #1
   1433c:	pop	{r4, r5, fp, pc}
   14340:	push	{r4, sl, fp, lr}
   14344:	add	fp, sp, #8
   14348:	mov	r4, r0
   1434c:	mov	r0, #0
   14350:	bl	14fa0 <__assert_fail@plt+0x3f40>
   14354:	ldrb	r1, [r4, #7]
   14358:	cmp	r0, #0
   1435c:	beq	14370 <__assert_fail@plt+0x3310>
   14360:	tst	r1, #223	; 0xdf
   14364:	bne	14378 <__assert_fail@plt+0x3318>
   14368:	mov	r0, #1
   1436c:	pop	{r4, sl, fp, pc}
   14370:	cmp	r1, #0
   14374:	beq	14368 <__assert_fail@plt+0x3308>
   14378:	mov	r0, #0
   1437c:	pop	{r4, sl, fp, pc}
   14380:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14384:	add	fp, sp, #24
   14388:	sub	sp, sp, #32
   1438c:	mov	r4, r2
   14390:	mov	r8, r0
   14394:	ldr	r6, [fp, #12]
   14398:	ldr	r7, [fp, #8]
   1439c:	cmp	r1, #0
   143a0:	beq	143c8 <__assert_fail@plt+0x3368>
   143a4:	mov	r5, r1
   143a8:	str	r4, [sp]
   143ac:	str	r3, [sp, #4]
   143b0:	movw	r2, #24060	; 0x5dfc
   143b4:	movt	r2, #1
   143b8:	mov	r0, r8
   143bc:	mov	r1, #1
   143c0:	mov	r3, r5
   143c4:	b	143e0 <__assert_fail@plt+0x3380>
   143c8:	str	r3, [sp]
   143cc:	movw	r2, #24072	; 0x5e08
   143d0:	movt	r2, #1
   143d4:	mov	r0, r8
   143d8:	mov	r1, #1
   143dc:	mov	r3, r4
   143e0:	bl	10fc4 <__fprintf_chk@plt>
   143e4:	movw	r1, #24079	; 0x5e0f
   143e8:	movt	r1, #1
   143ec:	mov	r0, #0
   143f0:	mov	r2, #5
   143f4:	bl	10e98 <dcgettext@plt>
   143f8:	mov	r3, r0
   143fc:	movw	r0, #2022	; 0x7e6
   14400:	str	r0, [sp]
   14404:	movw	r2, #24797	; 0x60dd
   14408:	movt	r2, #1
   1440c:	mov	r0, r8
   14410:	mov	r1, #1
   14414:	bl	10fc4 <__fprintf_chk@plt>
   14418:	movw	r4, #22712	; 0x58b8
   1441c:	movt	r4, #1
   14420:	mov	r0, r4
   14424:	mov	r1, r8
   14428:	bl	10e14 <fputs_unlocked@plt>
   1442c:	movw	r1, #24083	; 0x5e13
   14430:	movt	r1, #1
   14434:	mov	r0, #0
   14438:	mov	r2, #5
   1443c:	bl	10e98 <dcgettext@plt>
   14440:	mov	r2, r0
   14444:	movw	r3, #24254	; 0x5ebe
   14448:	movt	r3, #1
   1444c:	mov	r0, r8
   14450:	mov	r1, #1
   14454:	bl	10fc4 <__fprintf_chk@plt>
   14458:	mov	r0, r4
   1445c:	mov	r1, r8
   14460:	bl	10e14 <fputs_unlocked@plt>
   14464:	cmp	r6, #9
   14468:	bhi	144a4 <__assert_fail@plt+0x3444>
   1446c:	add	r0, pc, #0
   14470:	ldr	pc, [r0, r6, lsl #2]
   14474:	muleq	r1, ip, r4
   14478:			; <UNDEFINED> instruction: 0x000144b0
   1447c:	andeq	r4, r1, r0, ror #9
   14480:	andeq	r4, r1, r8, lsl #10
   14484:	andeq	r4, r1, r0, lsr r5
   14488:	andeq	r4, r1, r8, asr r5
   1448c:	andeq	r4, r1, r0, lsl #11
   14490:			; <UNDEFINED> instruction: 0x000145b8
   14494:	andeq	r4, r1, r8, asr r6
   14498:	andeq	r4, r1, r0, lsl #12
   1449c:	sub	sp, fp, #24
   144a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144a4:	movw	r1, #24607	; 0x601f
   144a8:	movt	r1, #1
   144ac:	b	14608 <__assert_fail@plt+0x35a8>
   144b0:	movw	r1, #24288	; 0x5ee0
   144b4:	movt	r1, #1
   144b8:	mov	r0, #0
   144bc:	mov	r2, #5
   144c0:	bl	10e98 <dcgettext@plt>
   144c4:	mov	r2, r0
   144c8:	ldr	r3, [r7]
   144cc:	mov	r0, r8
   144d0:	mov	r1, #1
   144d4:	sub	sp, fp, #24
   144d8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   144dc:	b	10fc4 <__fprintf_chk@plt>
   144e0:	movw	r1, #24304	; 0x5ef0
   144e4:	movt	r1, #1
   144e8:	mov	r0, #0
   144ec:	mov	r2, #5
   144f0:	bl	10e98 <dcgettext@plt>
   144f4:	mov	r2, r0
   144f8:	ldr	r3, [r7]
   144fc:	ldr	r0, [r7, #4]
   14500:	str	r0, [sp]
   14504:	b	145f4 <__assert_fail@plt+0x3594>
   14508:	movw	r1, #24327	; 0x5f07
   1450c:	movt	r1, #1
   14510:	mov	r0, #0
   14514:	mov	r2, #5
   14518:	bl	10e98 <dcgettext@plt>
   1451c:	mov	r2, r0
   14520:	ldr	r3, [r7]
   14524:	ldmib	r7, {r0, r1}
   14528:	stm	sp, {r0, r1}
   1452c:	b	145f4 <__assert_fail@plt+0x3594>
   14530:	movw	r1, #24355	; 0x5f23
   14534:	movt	r1, #1
   14538:	mov	r0, #0
   1453c:	mov	r2, #5
   14540:	bl	10e98 <dcgettext@plt>
   14544:	mov	r2, r0
   14548:	ldr	r3, [r7]
   1454c:	ldmib	r7, {r0, r1, r7}
   14550:	stm	sp, {r0, r1, r7}
   14554:	b	145f4 <__assert_fail@plt+0x3594>
   14558:	movw	r1, #24387	; 0x5f43
   1455c:	movt	r1, #1
   14560:	mov	r0, #0
   14564:	mov	r2, #5
   14568:	bl	10e98 <dcgettext@plt>
   1456c:	mov	r2, r0
   14570:	ldr	r3, [r7]
   14574:	ldmib	r7, {r0, r1, r6, r7}
   14578:	stm	sp, {r0, r1, r6, r7}
   1457c:	b	145f4 <__assert_fail@plt+0x3594>
   14580:	movw	r1, #24423	; 0x5f67
   14584:	movt	r1, #1
   14588:	mov	r0, #0
   1458c:	mov	r2, #5
   14590:	bl	10e98 <dcgettext@plt>
   14594:	mov	r2, r0
   14598:	ldr	r3, [r7]
   1459c:	ldmib	r7, {r0, r1, r6}
   145a0:	ldr	r5, [r7, #16]
   145a4:	ldr	r7, [r7, #20]
   145a8:	stm	sp, {r0, r1, r6}
   145ac:	str	r5, [sp, #12]
   145b0:	str	r7, [sp, #16]
   145b4:	b	145f4 <__assert_fail@plt+0x3594>
   145b8:	movw	r1, #24463	; 0x5f8f
   145bc:	movt	r1, #1
   145c0:	mov	r0, #0
   145c4:	mov	r2, #5
   145c8:	bl	10e98 <dcgettext@plt>
   145cc:	mov	r2, r0
   145d0:	ldr	r3, [r7]
   145d4:	ldmib	r7, {r0, r1, r6}
   145d8:	ldr	r5, [r7, #16]
   145dc:	ldr	r4, [r7, #20]
   145e0:	ldr	r7, [r7, #24]
   145e4:	stm	sp, {r0, r1, r6}
   145e8:	str	r5, [sp, #12]
   145ec:	str	r4, [sp, #16]
   145f0:	str	r7, [sp, #20]
   145f4:	mov	r0, r8
   145f8:	mov	r1, #1
   145fc:	b	146a8 <__assert_fail@plt+0x3648>
   14600:	movw	r1, #24555	; 0x5feb
   14604:	movt	r1, #1
   14608:	mov	r0, #0
   1460c:	mov	r2, #5
   14610:	bl	10e98 <dcgettext@plt>
   14614:	mov	ip, r0
   14618:	ldr	r3, [r7]
   1461c:	ldr	r0, [r7, #4]
   14620:	ldr	r1, [r7, #8]
   14624:	ldr	r6, [r7, #12]
   14628:	ldr	r5, [r7, #16]
   1462c:	ldr	r4, [r7, #20]
   14630:	ldr	r2, [r7, #24]
   14634:	ldr	lr, [r7, #28]
   14638:	ldr	r7, [r7, #32]
   1463c:	stm	sp, {r0, r1, r6}
   14640:	str	r5, [sp, #12]
   14644:	str	r4, [sp, #16]
   14648:	str	r2, [sp, #20]
   1464c:	str	lr, [sp, #24]
   14650:	str	r7, [sp, #28]
   14654:	b	1469c <__assert_fail@plt+0x363c>
   14658:	movw	r1, #24507	; 0x5fbb
   1465c:	movt	r1, #1
   14660:	mov	r0, #0
   14664:	mov	r2, #5
   14668:	bl	10e98 <dcgettext@plt>
   1466c:	mov	ip, r0
   14670:	ldr	r3, [r7]
   14674:	ldmib	r7, {r0, r1, r6}
   14678:	ldr	r5, [r7, #16]
   1467c:	ldr	r4, [r7, #20]
   14680:	ldr	r2, [r7, #24]
   14684:	ldr	r7, [r7, #28]
   14688:	stm	sp, {r0, r1, r6}
   1468c:	str	r5, [sp, #12]
   14690:	str	r4, [sp, #16]
   14694:	str	r2, [sp, #20]
   14698:	str	r7, [sp, #24]
   1469c:	mov	r0, r8
   146a0:	mov	r1, #1
   146a4:	mov	r2, ip
   146a8:	bl	10fc4 <__fprintf_chk@plt>
   146ac:	sub	sp, fp, #24
   146b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   146b4:	push	{r4, sl, fp, lr}
   146b8:	add	fp, sp, #8
   146bc:	sub	sp, sp, #8
   146c0:	mov	lr, #0
   146c4:	ldr	ip, [fp, #8]
   146c8:	ldr	r4, [ip, lr, lsl #2]
   146cc:	add	lr, lr, #1
   146d0:	cmp	r4, #0
   146d4:	bne	146c8 <__assert_fail@plt+0x3668>
   146d8:	sub	r4, lr, #1
   146dc:	str	ip, [sp]
   146e0:	str	r4, [sp, #4]
   146e4:	bl	14380 <__assert_fail@plt+0x3320>
   146e8:	sub	sp, fp, #8
   146ec:	pop	{r4, sl, fp, pc}
   146f0:	push	{r4, r5, fp, lr}
   146f4:	add	fp, sp, #8
   146f8:	sub	sp, sp, #48	; 0x30
   146fc:	mov	ip, #0
   14700:	ldr	r4, [fp, #8]
   14704:	add	lr, sp, #8
   14708:	ldr	r5, [r4]
   1470c:	str	r5, [lr, ip, lsl #2]
   14710:	cmp	r5, #0
   14714:	beq	1472c <__assert_fail@plt+0x36cc>
   14718:	add	ip, ip, #1
   1471c:	add	r4, r4, #4
   14720:	cmp	ip, #10
   14724:	bne	14708 <__assert_fail@plt+0x36a8>
   14728:	mov	ip, #10
   1472c:	str	lr, [sp]
   14730:	str	ip, [sp, #4]
   14734:	bl	14380 <__assert_fail@plt+0x3320>
   14738:	sub	sp, fp, #8
   1473c:	pop	{r4, r5, fp, pc}
   14740:	push	{fp, lr}
   14744:	mov	fp, sp
   14748:	sub	sp, sp, #8
   1474c:	add	ip, fp, #8
   14750:	str	ip, [sp, #4]
   14754:	str	ip, [sp]
   14758:	bl	146f0 <__assert_fail@plt+0x3690>
   1475c:	mov	sp, fp
   14760:	pop	{fp, pc}
   14764:	push	{fp, lr}
   14768:	mov	fp, sp
   1476c:	movw	r0, #29012	; 0x7154
   14770:	movt	r0, #2
   14774:	ldr	r1, [r0]
   14778:	movw	r0, #22712	; 0x58b8
   1477c:	movt	r0, #1
   14780:	bl	10e14 <fputs_unlocked@plt>
   14784:	movw	r1, #24667	; 0x605b
   14788:	movt	r1, #1
   1478c:	mov	r0, #0
   14790:	mov	r2, #5
   14794:	bl	10e98 <dcgettext@plt>
   14798:	mov	r1, r0
   1479c:	movw	r2, #24687	; 0x606f
   147a0:	movt	r2, #1
   147a4:	mov	r0, #1
   147a8:	bl	10fac <__printf_chk@plt>
   147ac:	movw	r1, #24709	; 0x6085
   147b0:	movt	r1, #1
   147b4:	mov	r0, #0
   147b8:	mov	r2, #5
   147bc:	bl	10e98 <dcgettext@plt>
   147c0:	mov	r1, r0
   147c4:	movw	r2, #22214	; 0x56c6
   147c8:	movt	r2, #1
   147cc:	movw	r3, #22521	; 0x57f9
   147d0:	movt	r3, #1
   147d4:	mov	r0, #1
   147d8:	bl	10fac <__printf_chk@plt>
   147dc:	movw	r1, #24729	; 0x6099
   147e0:	movt	r1, #1
   147e4:	mov	r0, #0
   147e8:	mov	r2, #5
   147ec:	bl	10e98 <dcgettext@plt>
   147f0:	mov	r1, r0
   147f4:	movw	r2, #24768	; 0x60c0
   147f8:	movt	r2, #1
   147fc:	mov	r0, #1
   14800:	pop	{fp, lr}
   14804:	b	10fac <__printf_chk@plt>
   14808:	b	1480c <__assert_fail@plt+0x37ac>
   1480c:	push	{r4, r5, r6, sl, fp, lr}
   14810:	add	fp, sp, #16
   14814:	mov	r4, r2
   14818:	mov	r5, r1
   1481c:	mov	r6, r0
   14820:	bl	15180 <__assert_fail@plt+0x4120>
   14824:	cmp	r0, #0
   14828:	popne	{r4, r5, r6, sl, fp, pc}
   1482c:	cmp	r6, #0
   14830:	beq	14844 <__assert_fail@plt+0x37e4>
   14834:	cmp	r5, #0
   14838:	cmpne	r4, #0
   1483c:	bne	14844 <__assert_fail@plt+0x37e4>
   14840:	pop	{r4, r5, r6, sl, fp, pc}
   14844:	bl	14bd0 <__assert_fail@plt+0x3b70>
   14848:	push	{fp, lr}
   1484c:	mov	fp, sp
   14850:	bl	14c68 <__assert_fail@plt+0x3c08>
   14854:	pop	{fp, lr}
   14858:	b	1485c <__assert_fail@plt+0x37fc>
   1485c:	cmp	r0, #0
   14860:	bxne	lr
   14864:	push	{fp, lr}
   14868:	mov	fp, sp
   1486c:	bl	14bd0 <__assert_fail@plt+0x3b70>
   14870:	push	{fp, lr}
   14874:	mov	fp, sp
   14878:	bl	150b0 <__assert_fail@plt+0x4050>
   1487c:	pop	{fp, lr}
   14880:	b	1485c <__assert_fail@plt+0x37fc>
   14884:	b	14848 <__assert_fail@plt+0x37e8>
   14888:	push	{r4, r5, fp, lr}
   1488c:	add	fp, sp, #8
   14890:	mov	r4, r1
   14894:	mov	r5, r0
   14898:	bl	14c98 <__assert_fail@plt+0x3c38>
   1489c:	cmp	r0, #0
   148a0:	popne	{r4, r5, fp, pc}
   148a4:	cmp	r5, #0
   148a8:	beq	148b8 <__assert_fail@plt+0x3858>
   148ac:	cmp	r4, #0
   148b0:	bne	148b8 <__assert_fail@plt+0x3858>
   148b4:	pop	{r4, r5, fp, pc}
   148b8:	bl	14bd0 <__assert_fail@plt+0x3b70>
   148bc:	push	{fp, lr}
   148c0:	mov	fp, sp
   148c4:	bl	150b4 <__assert_fail@plt+0x4054>
   148c8:	pop	{fp, lr}
   148cc:	b	1485c <__assert_fail@plt+0x37fc>
   148d0:	push	{fp, lr}
   148d4:	mov	fp, sp
   148d8:	bl	150c4 <__assert_fail@plt+0x4064>
   148dc:	pop	{fp, lr}
   148e0:	b	1485c <__assert_fail@plt+0x37fc>
   148e4:	mov	r2, r1
   148e8:	mov	r1, r0
   148ec:	mov	r0, #0
   148f0:	b	1480c <__assert_fail@plt+0x37ac>
   148f4:	mov	r2, r1
   148f8:	mov	r1, r0
   148fc:	mov	r0, #0
   14900:	b	148d0 <__assert_fail@plt+0x3870>
   14904:	mov	r2, #1
   14908:	b	1490c <__assert_fail@plt+0x38ac>
   1490c:	push	{r4, r5, fp, lr}
   14910:	add	fp, sp, #8
   14914:	mov	r4, r1
   14918:	ldr	r5, [r1]
   1491c:	cmp	r0, #0
   14920:	beq	14938 <__assert_fail@plt+0x38d8>
   14924:	mov	r1, #1
   14928:	add	r1, r1, r5, lsr #1
   1492c:	adds	r5, r5, r1
   14930:	bcc	14950 <__assert_fail@plt+0x38f0>
   14934:	bl	14bd0 <__assert_fail@plt+0x3b70>
   14938:	cmp	r5, #0
   1493c:	bne	14950 <__assert_fail@plt+0x38f0>
   14940:	mov	r1, #64	; 0x40
   14944:	udiv	r5, r1, r2
   14948:	cmp	r2, #64	; 0x40
   1494c:	addhi	r5, r5, #1
   14950:	mov	r1, r5
   14954:	bl	1480c <__assert_fail@plt+0x37ac>
   14958:	str	r5, [r4]
   1495c:	pop	{r4, r5, fp, pc}
   14960:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14964:	add	fp, sp, #24
   14968:	mov	r8, r1
   1496c:	ldr	r6, [r1]
   14970:	add	r1, r6, r6, asr #1
   14974:	cmp	r1, r6
   14978:	mvnvs	r1, #-2147483648	; 0x80000000
   1497c:	cmp	r1, r3
   14980:	mov	r5, r1
   14984:	movgt	r5, r3
   14988:	cmn	r3, #1
   1498c:	movle	r5, r1
   14990:	ldr	r4, [fp, #8]
   14994:	cmn	r4, #1
   14998:	ble	149c0 <__assert_fail@plt+0x3960>
   1499c:	cmp	r4, #0
   149a0:	beq	14a14 <__assert_fail@plt+0x39b4>
   149a4:	cmn	r5, #1
   149a8:	ble	149e8 <__assert_fail@plt+0x3988>
   149ac:	mvn	r7, #-2147483648	; 0x80000000
   149b0:	udiv	r1, r7, r4
   149b4:	cmp	r1, r5
   149b8:	bge	14a14 <__assert_fail@plt+0x39b4>
   149bc:	b	14a24 <__assert_fail@plt+0x39c4>
   149c0:	cmn	r5, #1
   149c4:	ble	14a04 <__assert_fail@plt+0x39a4>
   149c8:	cmn	r4, #1
   149cc:	beq	14a14 <__assert_fail@plt+0x39b4>
   149d0:	mov	r1, #-2147483648	; 0x80000000
   149d4:	sdiv	r1, r1, r4
   149d8:	mvn	r7, #-2147483648	; 0x80000000
   149dc:	cmp	r1, r5
   149e0:	bge	14a14 <__assert_fail@plt+0x39b4>
   149e4:	b	14a24 <__assert_fail@plt+0x39c4>
   149e8:	beq	14a14 <__assert_fail@plt+0x39b4>
   149ec:	mov	r1, #-2147483648	; 0x80000000
   149f0:	sdiv	r1, r1, r5
   149f4:	mvn	r7, #-2147483648	; 0x80000000
   149f8:	cmp	r1, r4
   149fc:	bge	14a14 <__assert_fail@plt+0x39b4>
   14a00:	b	14a24 <__assert_fail@plt+0x39c4>
   14a04:	mvn	r7, #-2147483648	; 0x80000000
   14a08:	sdiv	r1, r7, r4
   14a0c:	cmp	r5, r1
   14a10:	blt	14a24 <__assert_fail@plt+0x39c4>
   14a14:	mul	r1, r5, r4
   14a18:	mov	r7, #64	; 0x40
   14a1c:	cmp	r1, #63	; 0x3f
   14a20:	bgt	14a2c <__assert_fail@plt+0x39cc>
   14a24:	sdiv	r5, r7, r4
   14a28:	mul	r1, r5, r4
   14a2c:	cmp	r0, #0
   14a30:	moveq	r7, #0
   14a34:	streq	r7, [r8]
   14a38:	sub	r7, r5, r6
   14a3c:	cmp	r7, r2
   14a40:	bge	14aec <__assert_fail@plt+0x3a8c>
   14a44:	add	r5, r6, r2
   14a48:	mov	r1, #0
   14a4c:	cmp	r5, r3
   14a50:	mov	r2, #0
   14a54:	movwgt	r2, #1
   14a58:	cmn	r3, #1
   14a5c:	movwgt	r1, #1
   14a60:	cmp	r5, r6
   14a64:	bvs	14ad4 <__assert_fail@plt+0x3a74>
   14a68:	ands	r1, r1, r2
   14a6c:	bne	14ad4 <__assert_fail@plt+0x3a74>
   14a70:	cmn	r4, #1
   14a74:	ble	14a9c <__assert_fail@plt+0x3a3c>
   14a78:	cmp	r4, #0
   14a7c:	beq	14ae8 <__assert_fail@plt+0x3a88>
   14a80:	cmn	r5, #1
   14a84:	ble	14ac0 <__assert_fail@plt+0x3a60>
   14a88:	mvn	r1, #-2147483648	; 0x80000000
   14a8c:	udiv	r1, r1, r4
   14a90:	cmp	r1, r5
   14a94:	bge	14ae8 <__assert_fail@plt+0x3a88>
   14a98:	b	14ad4 <__assert_fail@plt+0x3a74>
   14a9c:	cmn	r5, #1
   14aa0:	ble	14ad8 <__assert_fail@plt+0x3a78>
   14aa4:	cmn	r4, #1
   14aa8:	beq	14ae8 <__assert_fail@plt+0x3a88>
   14aac:	mov	r1, #-2147483648	; 0x80000000
   14ab0:	sdiv	r1, r1, r4
   14ab4:	cmp	r1, r5
   14ab8:	bge	14ae8 <__assert_fail@plt+0x3a88>
   14abc:	b	14ad4 <__assert_fail@plt+0x3a74>
   14ac0:	beq	14ae8 <__assert_fail@plt+0x3a88>
   14ac4:	mov	r1, #-2147483648	; 0x80000000
   14ac8:	sdiv	r1, r1, r5
   14acc:	cmp	r1, r4
   14ad0:	bge	14ae8 <__assert_fail@plt+0x3a88>
   14ad4:	bl	14bd0 <__assert_fail@plt+0x3b70>
   14ad8:	mvn	r1, #-2147483648	; 0x80000000
   14adc:	sdiv	r1, r1, r4
   14ae0:	cmp	r5, r1
   14ae4:	blt	14ad4 <__assert_fail@plt+0x3a74>
   14ae8:	mul	r1, r5, r4
   14aec:	bl	14888 <__assert_fail@plt+0x3828>
   14af0:	str	r5, [r8]
   14af4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14af8:	mov	r1, #1
   14afc:	b	14b00 <__assert_fail@plt+0x3aa0>
   14b00:	push	{fp, lr}
   14b04:	mov	fp, sp
   14b08:	bl	14c14 <__assert_fail@plt+0x3bb4>
   14b0c:	pop	{fp, lr}
   14b10:	b	1485c <__assert_fail@plt+0x37fc>
   14b14:	mov	r1, #1
   14b18:	b	14b1c <__assert_fail@plt+0x3abc>
   14b1c:	push	{fp, lr}
   14b20:	mov	fp, sp
   14b24:	bl	150c0 <__assert_fail@plt+0x4060>
   14b28:	pop	{fp, lr}
   14b2c:	b	1485c <__assert_fail@plt+0x37fc>
   14b30:	push	{r4, r5, fp, lr}
   14b34:	add	fp, sp, #8
   14b38:	mov	r4, r1
   14b3c:	mov	r5, r0
   14b40:	mov	r0, r1
   14b44:	bl	14848 <__assert_fail@plt+0x37e8>
   14b48:	mov	r1, r5
   14b4c:	mov	r2, r4
   14b50:	pop	{r4, r5, fp, lr}
   14b54:	b	10e68 <memcpy@plt>
   14b58:	push	{r4, r5, fp, lr}
   14b5c:	add	fp, sp, #8
   14b60:	mov	r4, r1
   14b64:	mov	r5, r0
   14b68:	mov	r0, r1
   14b6c:	bl	14870 <__assert_fail@plt+0x3810>
   14b70:	mov	r1, r5
   14b74:	mov	r2, r4
   14b78:	pop	{r4, r5, fp, lr}
   14b7c:	b	10e68 <memcpy@plt>
   14b80:	push	{r4, r5, fp, lr}
   14b84:	add	fp, sp, #8
   14b88:	mov	r4, r1
   14b8c:	mov	r5, r0
   14b90:	add	r0, r1, #1
   14b94:	bl	14870 <__assert_fail@plt+0x3810>
   14b98:	mov	r1, #0
   14b9c:	strb	r1, [r0, r4]
   14ba0:	mov	r1, r5
   14ba4:	mov	r2, r4
   14ba8:	pop	{r4, r5, fp, lr}
   14bac:	b	10e68 <memcpy@plt>
   14bb0:	push	{r4, sl, fp, lr}
   14bb4:	add	fp, sp, #8
   14bb8:	mov	r4, r0
   14bbc:	bl	10f7c <strlen@plt>
   14bc0:	add	r1, r0, #1
   14bc4:	mov	r0, r4
   14bc8:	pop	{r4, sl, fp, lr}
   14bcc:	b	14b30 <__assert_fail@plt+0x3ad0>
   14bd0:	push	{fp, lr}
   14bd4:	mov	fp, sp
   14bd8:	movw	r0, #28916	; 0x70f4
   14bdc:	movt	r0, #2
   14be0:	ldr	r4, [r0]
   14be4:	movw	r1, #24844	; 0x610c
   14be8:	movt	r1, #1
   14bec:	mov	r0, #0
   14bf0:	mov	r2, #5
   14bf4:	bl	10e98 <dcgettext@plt>
   14bf8:	mov	r3, r0
   14bfc:	movw	r2, #23117	; 0x5a4d
   14c00:	movt	r2, #1
   14c04:	mov	r0, r4
   14c08:	mov	r1, #0
   14c0c:	bl	10f10 <error@plt>
   14c10:	bl	1103c <abort@plt>
   14c14:	clz	r2, r1
   14c18:	lsr	r2, r2, #5
   14c1c:	clz	r3, r0
   14c20:	lsr	r3, r3, #5
   14c24:	orrs	r2, r3, r2
   14c28:	movwne	r1, #1
   14c2c:	movwne	r0, #1
   14c30:	cmp	r1, #0
   14c34:	beq	14c64 <__assert_fail@plt+0x3c04>
   14c38:	mvn	r2, #-2147483648	; 0x80000000
   14c3c:	udiv	r2, r2, r1
   14c40:	cmp	r2, r0
   14c44:	bcs	14c64 <__assert_fail@plt+0x3c04>
   14c48:	push	{fp, lr}
   14c4c:	mov	fp, sp
   14c50:	bl	10f88 <__errno_location@plt>
   14c54:	mov	r1, #12
   14c58:	str	r1, [r0]
   14c5c:	mov	r0, #0
   14c60:	pop	{fp, pc}
   14c64:	b	10e08 <calloc@plt>
   14c68:	cmp	r0, #0
   14c6c:	movweq	r0, #1
   14c70:	cmn	r0, #1
   14c74:	ble	14c7c <__assert_fail@plt+0x3c1c>
   14c78:	b	10f1c <malloc@plt>
   14c7c:	push	{fp, lr}
   14c80:	mov	fp, sp
   14c84:	bl	10f88 <__errno_location@plt>
   14c88:	mov	r1, #12
   14c8c:	str	r1, [r0]
   14c90:	mov	r0, #0
   14c94:	pop	{fp, pc}
   14c98:	push	{fp, lr}
   14c9c:	mov	fp, sp
   14ca0:	cmp	r0, #0
   14ca4:	beq	14cc0 <__assert_fail@plt+0x3c60>
   14ca8:	cmp	r1, #0
   14cac:	beq	14ccc <__assert_fail@plt+0x3c6c>
   14cb0:	cmn	r1, #1
   14cb4:	ble	14cd8 <__assert_fail@plt+0x3c78>
   14cb8:	pop	{fp, lr}
   14cbc:	b	10ea4 <realloc@plt>
   14cc0:	mov	r0, r1
   14cc4:	pop	{fp, lr}
   14cc8:	b	14c68 <__assert_fail@plt+0x3c08>
   14ccc:	bl	126a4 <__assert_fail@plt+0x1644>
   14cd0:	mov	r0, #0
   14cd4:	pop	{fp, pc}
   14cd8:	bl	10f88 <__errno_location@plt>
   14cdc:	mov	r1, #12
   14ce0:	str	r1, [r0]
   14ce4:	mov	r0, #0
   14ce8:	pop	{fp, pc}
   14cec:	mov	r1, r0
   14cf0:	sub	r2, r0, #65	; 0x41
   14cf4:	mov	r0, #1
   14cf8:	cmp	r2, #26
   14cfc:	subcs	r2, r1, #97	; 0x61
   14d00:	cmpcs	r2, #26
   14d04:	bcs	14d0c <__assert_fail@plt+0x3cac>
   14d08:	bx	lr
   14d0c:	sub	r1, r1, #48	; 0x30
   14d10:	cmp	r1, #10
   14d14:	movcs	r0, #0
   14d18:	bx	lr
   14d1c:	mov	r1, r0
   14d20:	sub	r2, r0, #65	; 0x41
   14d24:	mov	r0, #1
   14d28:	cmp	r2, #26
   14d2c:	subcs	r1, r1, #97	; 0x61
   14d30:	cmpcs	r1, #26
   14d34:	movcs	r0, #0
   14d38:	bx	lr
   14d3c:	mov	r1, #0
   14d40:	cmp	r0, #128	; 0x80
   14d44:	movwcc	r1, #1
   14d48:	mov	r0, r1
   14d4c:	bx	lr
   14d50:	sub	r1, r0, #9
   14d54:	clz	r1, r1
   14d58:	lsr	r1, r1, #5
   14d5c:	sub	r0, r0, #32
   14d60:	clz	r0, r0
   14d64:	lsr	r0, r0, #5
   14d68:	orr	r0, r0, r1
   14d6c:	bx	lr
   14d70:	mov	r1, r0
   14d74:	mov	r0, #1
   14d78:	cmp	r1, #32
   14d7c:	bxcc	lr
   14d80:	cmp	r1, #127	; 0x7f
   14d84:	movne	r0, #0
   14d88:	bx	lr
   14d8c:	sub	r1, r0, #48	; 0x30
   14d90:	mov	r0, #0
   14d94:	cmp	r1, #10
   14d98:	movwcc	r0, #1
   14d9c:	bx	lr
   14da0:	sub	r1, r0, #33	; 0x21
   14da4:	mov	r0, #0
   14da8:	cmp	r1, #94	; 0x5e
   14dac:	movwcc	r0, #1
   14db0:	bx	lr
   14db4:	sub	r1, r0, #97	; 0x61
   14db8:	mov	r0, #0
   14dbc:	cmp	r1, #26
   14dc0:	movwcc	r0, #1
   14dc4:	bx	lr
   14dc8:	sub	r1, r0, #32
   14dcc:	mov	r0, #0
   14dd0:	cmp	r1, #95	; 0x5f
   14dd4:	movwcc	r0, #1
   14dd8:	bx	lr
   14ddc:	sub	r1, r0, #33	; 0x21
   14de0:	cmp	r1, #93	; 0x5d
   14de4:	bhi	14f70 <__assert_fail@plt+0x3f10>
   14de8:	mov	r0, #1
   14dec:	add	r2, pc, #0
   14df0:	ldr	pc, [r2, r1, lsl #2]
   14df4:	andeq	r4, r1, ip, ror #30
   14df8:	andeq	r4, r1, ip, ror #30
   14dfc:	andeq	r4, r1, ip, ror #30
   14e00:	andeq	r4, r1, ip, ror #30
   14e04:	andeq	r4, r1, ip, ror #30
   14e08:	andeq	r4, r1, ip, ror #30
   14e0c:	andeq	r4, r1, ip, ror #30
   14e10:	andeq	r4, r1, ip, ror #30
   14e14:	andeq	r4, r1, ip, ror #30
   14e18:	andeq	r4, r1, ip, ror #30
   14e1c:	andeq	r4, r1, ip, ror #30
   14e20:	andeq	r4, r1, ip, ror #30
   14e24:	andeq	r4, r1, ip, ror #30
   14e28:	andeq	r4, r1, ip, ror #30
   14e2c:	andeq	r4, r1, ip, ror #30
   14e30:	andeq	r4, r1, r0, ror pc
   14e34:	andeq	r4, r1, r0, ror pc
   14e38:	andeq	r4, r1, r0, ror pc
   14e3c:	andeq	r4, r1, r0, ror pc
   14e40:	andeq	r4, r1, r0, ror pc
   14e44:	andeq	r4, r1, r0, ror pc
   14e48:	andeq	r4, r1, r0, ror pc
   14e4c:	andeq	r4, r1, r0, ror pc
   14e50:	andeq	r4, r1, r0, ror pc
   14e54:	andeq	r4, r1, r0, ror pc
   14e58:	andeq	r4, r1, ip, ror #30
   14e5c:	andeq	r4, r1, ip, ror #30
   14e60:	andeq	r4, r1, ip, ror #30
   14e64:	andeq	r4, r1, ip, ror #30
   14e68:	andeq	r4, r1, ip, ror #30
   14e6c:	andeq	r4, r1, ip, ror #30
   14e70:	andeq	r4, r1, ip, ror #30
   14e74:	andeq	r4, r1, r0, ror pc
   14e78:	andeq	r4, r1, r0, ror pc
   14e7c:	andeq	r4, r1, r0, ror pc
   14e80:	andeq	r4, r1, r0, ror pc
   14e84:	andeq	r4, r1, r0, ror pc
   14e88:	andeq	r4, r1, r0, ror pc
   14e8c:	andeq	r4, r1, r0, ror pc
   14e90:	andeq	r4, r1, r0, ror pc
   14e94:	andeq	r4, r1, r0, ror pc
   14e98:	andeq	r4, r1, r0, ror pc
   14e9c:	andeq	r4, r1, r0, ror pc
   14ea0:	andeq	r4, r1, r0, ror pc
   14ea4:	andeq	r4, r1, r0, ror pc
   14ea8:	andeq	r4, r1, r0, ror pc
   14eac:	andeq	r4, r1, r0, ror pc
   14eb0:	andeq	r4, r1, r0, ror pc
   14eb4:	andeq	r4, r1, r0, ror pc
   14eb8:	andeq	r4, r1, r0, ror pc
   14ebc:	andeq	r4, r1, r0, ror pc
   14ec0:	andeq	r4, r1, r0, ror pc
   14ec4:	andeq	r4, r1, r0, ror pc
   14ec8:	andeq	r4, r1, r0, ror pc
   14ecc:	andeq	r4, r1, r0, ror pc
   14ed0:	andeq	r4, r1, r0, ror pc
   14ed4:	andeq	r4, r1, r0, ror pc
   14ed8:	andeq	r4, r1, r0, ror pc
   14edc:	andeq	r4, r1, ip, ror #30
   14ee0:	andeq	r4, r1, ip, ror #30
   14ee4:	andeq	r4, r1, ip, ror #30
   14ee8:	andeq	r4, r1, ip, ror #30
   14eec:	andeq	r4, r1, ip, ror #30
   14ef0:	andeq	r4, r1, ip, ror #30
   14ef4:	andeq	r4, r1, r0, ror pc
   14ef8:	andeq	r4, r1, r0, ror pc
   14efc:	andeq	r4, r1, r0, ror pc
   14f00:	andeq	r4, r1, r0, ror pc
   14f04:	andeq	r4, r1, r0, ror pc
   14f08:	andeq	r4, r1, r0, ror pc
   14f0c:	andeq	r4, r1, r0, ror pc
   14f10:	andeq	r4, r1, r0, ror pc
   14f14:	andeq	r4, r1, r0, ror pc
   14f18:	andeq	r4, r1, r0, ror pc
   14f1c:	andeq	r4, r1, r0, ror pc
   14f20:	andeq	r4, r1, r0, ror pc
   14f24:	andeq	r4, r1, r0, ror pc
   14f28:	andeq	r4, r1, r0, ror pc
   14f2c:	andeq	r4, r1, r0, ror pc
   14f30:	andeq	r4, r1, r0, ror pc
   14f34:	andeq	r4, r1, r0, ror pc
   14f38:	andeq	r4, r1, r0, ror pc
   14f3c:	andeq	r4, r1, r0, ror pc
   14f40:	andeq	r4, r1, r0, ror pc
   14f44:	andeq	r4, r1, r0, ror pc
   14f48:	andeq	r4, r1, r0, ror pc
   14f4c:	andeq	r4, r1, r0, ror pc
   14f50:	andeq	r4, r1, r0, ror pc
   14f54:	andeq	r4, r1, r0, ror pc
   14f58:	andeq	r4, r1, r0, ror pc
   14f5c:	andeq	r4, r1, ip, ror #30
   14f60:	andeq	r4, r1, ip, ror #30
   14f64:	andeq	r4, r1, ip, ror #30
   14f68:	andeq	r4, r1, ip, ror #30
   14f6c:	bx	lr
   14f70:	mov	r0, #0
   14f74:	bx	lr
   14f78:	sub	r0, r0, #9
   14f7c:	cmp	r0, #23
   14f80:	movhi	r0, #0
   14f84:	bxhi	lr
   14f88:	bic	r0, r0, #-16777216	; 0xff000000
   14f8c:	movw	r1, #31
   14f90:	movt	r1, #128	; 0x80
   14f94:	mov	r2, #1
   14f98:	and	r0, r2, r1, lsr r0
   14f9c:	bx	lr
   14fa0:	sub	r1, r0, #65	; 0x41
   14fa4:	mov	r0, #0
   14fa8:	cmp	r1, #26
   14fac:	movwcc	r0, #1
   14fb0:	bx	lr
   14fb4:	mov	r1, r0
   14fb8:	sub	r2, r0, #48	; 0x30
   14fbc:	mov	r0, #1
   14fc0:	cmp	r2, #22
   14fc4:	bhi	14fdc <__assert_fail@plt+0x3f7c>
   14fc8:	mov	ip, #1
   14fcc:	movw	r3, #1023	; 0x3ff
   14fd0:	movt	r3, #126	; 0x7e
   14fd4:	tst	r3, ip, lsl r2
   14fd8:	bxne	lr
   14fdc:	sub	r1, r1, #97	; 0x61
   14fe0:	cmp	r1, #6
   14fe4:	movcs	r0, #0
   14fe8:	bxcs	lr
   14fec:	bx	lr
   14ff0:	sub	r1, r0, #65	; 0x41
   14ff4:	cmp	r1, #26
   14ff8:	addcc	r0, r0, #32
   14ffc:	bx	lr
   15000:	sub	r1, r0, #97	; 0x61
   15004:	cmp	r1, #26
   15008:	subcc	r0, r0, #32
   1500c:	bx	lr
   15010:	push	{r4, r5, r6, sl, fp, lr}
   15014:	add	fp, sp, #16
   15018:	mov	r4, r0
   1501c:	bl	10eec <__fpending@plt>
   15020:	mov	r5, r0
   15024:	mov	r0, r4
   15028:	bl	10ef8 <ferror_unlocked@plt>
   1502c:	mov	r6, r0
   15030:	mov	r0, r4
   15034:	bl	1259c <__assert_fail@plt+0x153c>
   15038:	cmp	r6, #0
   1503c:	beq	15060 <__assert_fail@plt+0x4000>
   15040:	mvn	r4, #0
   15044:	cmp	r0, #0
   15048:	bne	1508c <__assert_fail@plt+0x402c>
   1504c:	bl	10f88 <__errno_location@plt>
   15050:	mov	r1, #0
   15054:	str	r1, [r0]
   15058:	mov	r0, r4
   1505c:	pop	{r4, r5, r6, sl, fp, pc}
   15060:	cmp	r0, #0
   15064:	mov	r4, r0
   15068:	mvnne	r4, #0
   1506c:	cmp	r5, #0
   15070:	bne	1508c <__assert_fail@plt+0x402c>
   15074:	cmp	r0, #0
   15078:	beq	1508c <__assert_fail@plt+0x402c>
   1507c:	bl	10f88 <__errno_location@plt>
   15080:	ldr	r0, [r0]
   15084:	subs	r4, r0, #9
   15088:	mvnne	r4, #0
   1508c:	mov	r0, r4
   15090:	pop	{r4, r5, r6, sl, fp, pc}
   15094:	push	{fp, lr}
   15098:	mov	fp, sp
   1509c:	bl	10f88 <__errno_location@plt>
   150a0:	mov	r1, #12
   150a4:	str	r1, [r0]
   150a8:	mov	r0, #0
   150ac:	pop	{fp, pc}
   150b0:	b	14c68 <__assert_fail@plt+0x3c08>
   150b4:	cmp	r1, #0
   150b8:	orreq	r1, r1, #1
   150bc:	b	14c98 <__assert_fail@plt+0x3c38>
   150c0:	b	14c14 <__assert_fail@plt+0x3bb4>
   150c4:	clz	r3, r2
   150c8:	lsr	ip, r3, #5
   150cc:	clz	r3, r1
   150d0:	lsr	r3, r3, #5
   150d4:	orrs	r3, r3, ip
   150d8:	movwne	r1, #1
   150dc:	movwne	r2, #1
   150e0:	b	15180 <__assert_fail@plt+0x4120>
   150e4:	push	{fp, lr}
   150e8:	mov	fp, sp
   150ec:	mov	r0, #14
   150f0:	bl	11000 <nl_langinfo@plt>
   150f4:	movw	r1, #22713	; 0x58b9
   150f8:	movt	r1, #1
   150fc:	cmp	r0, #0
   15100:	movne	r1, r0
   15104:	ldrb	r2, [r1]
   15108:	movw	r0, #24861	; 0x611d
   1510c:	movt	r0, #1
   15110:	cmp	r2, #0
   15114:	movne	r0, r1
   15118:	pop	{fp, pc}
   1511c:	push	{r4, r5, r6, r7, fp, lr}
   15120:	add	fp, sp, #16
   15124:	sub	sp, sp, #8
   15128:	mov	r7, r2
   1512c:	mov	r4, r1
   15130:	add	r5, sp, #4
   15134:	cmp	r0, #0
   15138:	movne	r5, r0
   1513c:	mov	r0, r5
   15140:	bl	10f04 <mbrtowc@plt>
   15144:	mov	r6, r0
   15148:	cmp	r7, #0
   1514c:	beq	15174 <__assert_fail@plt+0x4114>
   15150:	cmn	r6, #2
   15154:	bcc	15174 <__assert_fail@plt+0x4114>
   15158:	mov	r0, #0
   1515c:	bl	151bc <__assert_fail@plt+0x415c>
   15160:	cmp	r0, #0
   15164:	bne	15174 <__assert_fail@plt+0x4114>
   15168:	ldrb	r0, [r4]
   1516c:	str	r0, [r5]
   15170:	mov	r6, #1
   15174:	mov	r0, r6
   15178:	sub	sp, fp, #16
   1517c:	pop	{r4, r5, r6, r7, fp, pc}
   15180:	cmp	r2, #0
   15184:	beq	151b4 <__assert_fail@plt+0x4154>
   15188:	mvn	r3, #0
   1518c:	udiv	r3, r3, r2
   15190:	cmp	r3, r1
   15194:	bcs	151b4 <__assert_fail@plt+0x4154>
   15198:	push	{fp, lr}
   1519c:	mov	fp, sp
   151a0:	bl	10f88 <__errno_location@plt>
   151a4:	mov	r1, #12
   151a8:	str	r1, [r0]
   151ac:	mov	r0, #0
   151b0:	pop	{fp, pc}
   151b4:	mul	r1, r2, r1
   151b8:	b	14c98 <__assert_fail@plt+0x3c38>
   151bc:	push	{r4, sl, fp, lr}
   151c0:	add	fp, sp, #8
   151c4:	sub	sp, sp, #264	; 0x108
   151c8:	add	r1, sp, #7
   151cc:	movw	r2, #257	; 0x101
   151d0:	bl	15228 <__assert_fail@plt+0x41c8>
   151d4:	mov	r4, #0
   151d8:	cmp	r0, #0
   151dc:	bne	1521c <__assert_fail@plt+0x41bc>
   151e0:	add	r0, sp, #7
   151e4:	movw	r1, #24867	; 0x6123
   151e8:	movt	r1, #1
   151ec:	mov	r2, #2
   151f0:	bl	10f70 <bcmp@plt>
   151f4:	cmp	r0, #0
   151f8:	beq	1521c <__assert_fail@plt+0x41bc>
   151fc:	add	r0, sp, #7
   15200:	movw	r1, #24869	; 0x6125
   15204:	movt	r1, #1
   15208:	mov	r2, #6
   1520c:	bl	10f70 <bcmp@plt>
   15210:	mov	r4, r0
   15214:	cmp	r0, #0
   15218:	movwne	r4, #1
   1521c:	mov	r0, r4
   15220:	sub	sp, fp, #8
   15224:	pop	{r4, sl, fp, pc}
   15228:	b	1522c <__assert_fail@plt+0x41cc>
   1522c:	push	{r4, r5, r6, r7, fp, lr}
   15230:	add	fp, sp, #16
   15234:	mov	r6, r2
   15238:	mov	r4, r1
   1523c:	bl	152c4 <__assert_fail@plt+0x4264>
   15240:	cmp	r0, #0
   15244:	beq	15274 <__assert_fail@plt+0x4214>
   15248:	mov	r7, r0
   1524c:	bl	10f7c <strlen@plt>
   15250:	cmp	r0, r6
   15254:	bcs	15290 <__assert_fail@plt+0x4230>
   15258:	add	r2, r0, #1
   1525c:	mov	r0, r4
   15260:	mov	r1, r7
   15264:	bl	10e68 <memcpy@plt>
   15268:	mov	r5, #0
   1526c:	mov	r0, r5
   15270:	pop	{r4, r5, r6, r7, fp, pc}
   15274:	mov	r5, #22
   15278:	cmp	r6, #0
   1527c:	beq	152b8 <__assert_fail@plt+0x4258>
   15280:	mov	r0, #0
   15284:	strb	r0, [r4]
   15288:	mov	r0, r5
   1528c:	pop	{r4, r5, r6, r7, fp, pc}
   15290:	mov	r5, #34	; 0x22
   15294:	cmp	r6, #0
   15298:	beq	152b8 <__assert_fail@plt+0x4258>
   1529c:	sub	r6, r6, #1
   152a0:	mov	r0, r4
   152a4:	mov	r1, r7
   152a8:	mov	r2, r6
   152ac:	bl	10e68 <memcpy@plt>
   152b0:	mov	r0, #0
   152b4:	strb	r0, [r4, r6]
   152b8:	mov	r0, r5
   152bc:	pop	{r4, r5, r6, r7, fp, pc}
   152c0:	b	152c4 <__assert_fail@plt+0x4264>
   152c4:	mov	r1, #0
   152c8:	b	10fe8 <setlocale@plt>
   152cc:	cmp	r3, #0
   152d0:	cmpeq	r2, #0
   152d4:	bne	152ec <__assert_fail@plt+0x428c>
   152d8:	cmp	r1, #0
   152dc:	cmpeq	r0, #0
   152e0:	mvnne	r1, #0
   152e4:	mvnne	r0, #0
   152e8:	b	15308 <__assert_fail@plt+0x42a8>
   152ec:	sub	sp, sp, #8
   152f0:	push	{sp, lr}
   152f4:	bl	15318 <__assert_fail@plt+0x42b8>
   152f8:	ldr	lr, [sp, #4]
   152fc:	add	sp, sp, #8
   15300:	pop	{r2, r3}
   15304:	bx	lr
   15308:	push	{r1, lr}
   1530c:	mov	r0, #8
   15310:	bl	10e20 <raise@plt>
   15314:	pop	{r1, pc}
   15318:	cmp	r1, r3
   1531c:	cmpeq	r0, r2
   15320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15324:	mov	r4, r0
   15328:	movcc	r0, #0
   1532c:	mov	r5, r1
   15330:	ldr	lr, [sp, #36]	; 0x24
   15334:	movcc	r1, r0
   15338:	bcc	15434 <__assert_fail@plt+0x43d4>
   1533c:	cmp	r3, #0
   15340:	clzeq	ip, r2
   15344:	clzne	ip, r3
   15348:	addeq	ip, ip, #32
   1534c:	cmp	r5, #0
   15350:	clzeq	r1, r4
   15354:	addeq	r1, r1, #32
   15358:	clzne	r1, r5
   1535c:	sub	ip, ip, r1
   15360:	sub	sl, ip, #32
   15364:	lsl	r9, r3, ip
   15368:	rsb	fp, ip, #32
   1536c:	orr	r9, r9, r2, lsl sl
   15370:	orr	r9, r9, r2, lsr fp
   15374:	lsl	r8, r2, ip
   15378:	cmp	r5, r9
   1537c:	cmpeq	r4, r8
   15380:	movcc	r0, #0
   15384:	movcc	r1, r0
   15388:	bcc	153a4 <__assert_fail@plt+0x4344>
   1538c:	mov	r0, #1
   15390:	subs	r4, r4, r8
   15394:	lsl	r1, r0, sl
   15398:	orr	r1, r1, r0, lsr fp
   1539c:	lsl	r0, r0, ip
   153a0:	sbc	r5, r5, r9
   153a4:	cmp	ip, #0
   153a8:	beq	15434 <__assert_fail@plt+0x43d4>
   153ac:	lsr	r6, r8, #1
   153b0:	orr	r6, r6, r9, lsl #31
   153b4:	lsr	r7, r9, #1
   153b8:	mov	r2, ip
   153bc:	b	153e0 <__assert_fail@plt+0x4380>
   153c0:	subs	r3, r4, r6
   153c4:	sbc	r8, r5, r7
   153c8:	adds	r3, r3, r3
   153cc:	adc	r8, r8, r8
   153d0:	adds	r4, r3, #1
   153d4:	adc	r5, r8, #0
   153d8:	subs	r2, r2, #1
   153dc:	beq	153fc <__assert_fail@plt+0x439c>
   153e0:	cmp	r5, r7
   153e4:	cmpeq	r4, r6
   153e8:	bcs	153c0 <__assert_fail@plt+0x4360>
   153ec:	adds	r4, r4, r4
   153f0:	adc	r5, r5, r5
   153f4:	subs	r2, r2, #1
   153f8:	bne	153e0 <__assert_fail@plt+0x4380>
   153fc:	lsr	r3, r4, ip
   15400:	orr	r3, r3, r5, lsl fp
   15404:	lsr	r2, r5, ip
   15408:	orr	r3, r3, r5, lsr sl
   1540c:	adds	r0, r0, r4
   15410:	mov	r4, r3
   15414:	lsl	r3, r2, ip
   15418:	orr	r3, r3, r4, lsl sl
   1541c:	lsl	ip, r4, ip
   15420:	orr	r3, r3, r4, lsr fp
   15424:	adc	r1, r1, r5
   15428:	subs	r0, r0, ip
   1542c:	mov	r5, r2
   15430:	sbc	r1, r1, r3
   15434:	cmp	lr, #0
   15438:	strdne	r4, [lr]
   1543c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15440:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15444:	mov	r7, r0
   15448:	ldr	r6, [pc, #72]	; 15498 <__assert_fail@plt+0x4438>
   1544c:	ldr	r5, [pc, #72]	; 1549c <__assert_fail@plt+0x443c>
   15450:	add	r6, pc, r6
   15454:	add	r5, pc, r5
   15458:	sub	r6, r6, r5
   1545c:	mov	r8, r1
   15460:	mov	r9, r2
   15464:	bl	10de8 <calloc@plt-0x20>
   15468:	asrs	r6, r6, #2
   1546c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15470:	mov	r4, #0
   15474:	add	r4, r4, #1
   15478:	ldr	r3, [r5], #4
   1547c:	mov	r2, r9
   15480:	mov	r1, r8
   15484:	mov	r0, r7
   15488:	blx	r3
   1548c:	cmp	r6, r4
   15490:	bne	15474 <__assert_fail@plt+0x4414>
   15494:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15498:			; <UNDEFINED> instruction: 0x00011ab4
   1549c:	andeq	r1, r1, ip, lsr #21
   154a0:	bx	lr
   154a4:	ldr	r3, [pc, #12]	; 154b8 <__assert_fail@plt+0x4458>
   154a8:	mov	r1, #0
   154ac:	add	r3, pc, r3
   154b0:	ldr	r2, [r3]
   154b4:	b	10f94 <__cxa_atexit@plt>
   154b8:	andeq	r1, r1, r0, lsr ip

Disassembly of section .fini:

000154bc <.fini>:
   154bc:	push	{r3, lr}
   154c0:	pop	{r3, pc}
