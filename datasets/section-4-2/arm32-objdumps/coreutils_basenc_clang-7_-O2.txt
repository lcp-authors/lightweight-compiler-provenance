
../repos/coreutils/src/basenc:     file format elf32-littlearm


Disassembly of section .init:

00010e04 <.init>:
   10e04:	push	{r3, lr}
   10e08:	bl	110d0 <__assert_fail@plt+0x48>
   10e0c:	pop	{r3, pc}

Disassembly of section .plt:

00010e10 <calloc@plt-0x14>:
   10e10:	push	{lr}		; (str lr, [sp, #-4]!)
   10e14:	ldr	lr, [pc, #4]	; 10e20 <calloc@plt-0x4>
   10e18:	add	lr, pc, lr
   10e1c:	ldr	pc, [lr, #8]!
   10e20:	andeq	r9, r1, r0, ror #3

00010e24 <calloc@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #102400	; 0x19000
   10e2c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e30 <fputs_unlocked@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #102400	; 0x19000
   10e38:	ldr	pc, [ip, #472]!	; 0x1d8

00010e3c <raise@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #102400	; 0x19000
   10e44:	ldr	pc, [ip, #464]!	; 0x1d0

00010e48 <strcmp@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #102400	; 0x19000
   10e50:	ldr	pc, [ip, #456]!	; 0x1c8

00010e54 <posix_fadvise64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #102400	; 0x19000
   10e5c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e60 <fflush@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #102400	; 0x19000
   10e68:	ldr	pc, [ip, #440]!	; 0x1b8

00010e6c <memmove@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #102400	; 0x19000
   10e74:	ldr	pc, [ip, #432]!	; 0x1b0

00010e78 <free@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #102400	; 0x19000
   10e80:	ldr	pc, [ip, #424]!	; 0x1a8

00010e84 <_exit@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #102400	; 0x19000
   10e8c:	ldr	pc, [ip, #416]!	; 0x1a0

00010e90 <memcpy@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #102400	; 0x19000
   10e98:	ldr	pc, [ip, #408]!	; 0x198

00010e9c <mbsinit@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #102400	; 0x19000
   10ea4:	ldr	pc, [ip, #400]!	; 0x190

00010ea8 <fwrite_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #102400	; 0x19000
   10eb0:	ldr	pc, [ip, #392]!	; 0x188

00010eb4 <memcmp@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #102400	; 0x19000
   10ebc:	ldr	pc, [ip, #384]!	; 0x180

00010ec0 <dcgettext@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #102400	; 0x19000
   10ec8:	ldr	pc, [ip, #376]!	; 0x178

00010ecc <realloc@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #102400	; 0x19000
   10ed4:	ldr	pc, [ip, #368]!	; 0x170

00010ed8 <textdomain@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #102400	; 0x19000
   10ee0:	ldr	pc, [ip, #360]!	; 0x168

00010ee4 <iswprint@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #102400	; 0x19000
   10eec:	ldr	pc, [ip, #352]!	; 0x160

00010ef0 <fwrite@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #102400	; 0x19000
   10ef8:	ldr	pc, [ip, #344]!	; 0x158

00010efc <lseek64@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #102400	; 0x19000
   10f04:	ldr	pc, [ip, #336]!	; 0x150

00010f08 <__ctype_get_mb_cur_max@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #102400	; 0x19000
   10f10:	ldr	pc, [ip, #328]!	; 0x148

00010f14 <__fpending@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #102400	; 0x19000
   10f1c:	ldr	pc, [ip, #320]!	; 0x140

00010f20 <mbrtowc@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #102400	; 0x19000
   10f28:	ldr	pc, [ip, #312]!	; 0x138

00010f2c <error@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #102400	; 0x19000
   10f34:	ldr	pc, [ip, #304]!	; 0x130

00010f38 <malloc@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #102400	; 0x19000
   10f40:	ldr	pc, [ip, #296]!	; 0x128

00010f44 <__libc_start_main@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #102400	; 0x19000
   10f4c:	ldr	pc, [ip, #288]!	; 0x120

00010f50 <__freading@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #102400	; 0x19000
   10f58:	ldr	pc, [ip, #280]!	; 0x118

00010f5c <__gmon_start__@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #102400	; 0x19000
   10f64:	ldr	pc, [ip, #272]!	; 0x110

00010f68 <getopt_long@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #102400	; 0x19000
   10f70:	ldr	pc, [ip, #264]!	; 0x108

00010f74 <__ctype_b_loc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #102400	; 0x19000
   10f7c:	ldr	pc, [ip, #256]!	; 0x100

00010f80 <exit@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #102400	; 0x19000
   10f88:	ldr	pc, [ip, #248]!	; 0xf8

00010f8c <strlen@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #102400	; 0x19000
   10f94:	ldr	pc, [ip, #240]!	; 0xf0

00010f98 <strchr@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #102400	; 0x19000
   10fa0:	ldr	pc, [ip, #232]!	; 0xe8

00010fa4 <__errno_location@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #102400	; 0x19000
   10fac:	ldr	pc, [ip, #224]!	; 0xe0

00010fb0 <__cxa_atexit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #102400	; 0x19000
   10fb8:	ldr	pc, [ip, #216]!	; 0xd8

00010fbc <memset@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #102400	; 0x19000
   10fc4:	ldr	pc, [ip, #208]!	; 0xd0

00010fc8 <__printf_chk@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #102400	; 0x19000
   10fd0:	ldr	pc, [ip, #200]!	; 0xc8

00010fd4 <fileno@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #102400	; 0x19000
   10fdc:	ldr	pc, [ip, #192]!	; 0xc0

00010fe0 <__fprintf_chk@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #102400	; 0x19000
   10fe8:	ldr	pc, [ip, #184]!	; 0xb8

00010fec <memchr@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #102400	; 0x19000
   10ff4:	ldr	pc, [ip, #176]!	; 0xb0

00010ff8 <fclose@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #102400	; 0x19000
   11000:	ldr	pc, [ip, #168]!	; 0xa8

00011004 <fseeko64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #102400	; 0x19000
   1100c:	ldr	pc, [ip, #160]!	; 0xa0

00011010 <__overflow@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #102400	; 0x19000
   11018:	ldr	pc, [ip, #152]!	; 0x98

0001101c <setlocale@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #102400	; 0x19000
   11024:	ldr	pc, [ip, #144]!	; 0x90

00011028 <strrchr@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #102400	; 0x19000
   11030:	ldr	pc, [ip, #136]!	; 0x88

00011034 <nl_langinfo@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #102400	; 0x19000
   1103c:	ldr	pc, [ip, #128]!	; 0x80

00011040 <__strtoll_internal@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #102400	; 0x19000
   11048:	ldr	pc, [ip, #120]!	; 0x78

0001104c <fopen64@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #102400	; 0x19000
   11054:	ldr	pc, [ip, #112]!	; 0x70

00011058 <bindtextdomain@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #102400	; 0x19000
   11060:	ldr	pc, [ip, #104]!	; 0x68

00011064 <fread_unlocked@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #102400	; 0x19000
   1106c:	ldr	pc, [ip, #96]!	; 0x60

00011070 <strncmp@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #102400	; 0x19000
   11078:	ldr	pc, [ip, #88]!	; 0x58

0001107c <abort@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #102400	; 0x19000
   11084:	ldr	pc, [ip, #80]!	; 0x50

00011088 <__assert_fail@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #102400	; 0x19000
   11090:	ldr	pc, [ip, #72]!	; 0x48

Disassembly of section .text:

00011094 <.text>:
   11094:	mov	fp, #0
   11098:	mov	lr, #0
   1109c:	pop	{r1}		; (ldr r1, [sp], #4)
   110a0:	mov	r2, sp
   110a4:	push	{r2}		; (str r2, [sp, #-4]!)
   110a8:	push	{r0}		; (str r0, [sp, #-4]!)
   110ac:	ldr	ip, [pc, #16]	; 110c4 <__assert_fail@plt+0x3c>
   110b0:	push	{ip}		; (str ip, [sp, #-4]!)
   110b4:	ldr	r0, [pc, #12]	; 110c8 <__assert_fail@plt+0x40>
   110b8:	ldr	r3, [pc, #12]	; 110cc <__assert_fail@plt+0x44>
   110bc:	bl	10f44 <__libc_start_main@plt>
   110c0:	bl	1107c <abort@plt>
   110c4:	andeq	r8, r1, r0, lsl #16
   110c8:	andeq	r1, r1, r8, lsl r5
   110cc:	andeq	r8, r1, r0, lsr #15
   110d0:	ldr	r3, [pc, #20]	; 110ec <__assert_fail@plt+0x64>
   110d4:	ldr	r2, [pc, #20]	; 110f0 <__assert_fail@plt+0x68>
   110d8:	add	r3, pc, r3
   110dc:	ldr	r2, [r3, r2]
   110e0:	cmp	r2, #0
   110e4:	bxeq	lr
   110e8:	b	10f5c <__gmon_start__@plt>
   110ec:	andeq	r8, r1, r0, lsr #30
   110f0:	ldrdeq	r0, [r0], -ip
   110f4:	ldr	r0, [pc, #24]	; 11114 <__assert_fail@plt+0x8c>
   110f8:	ldr	r3, [pc, #24]	; 11118 <__assert_fail@plt+0x90>
   110fc:	cmp	r3, r0
   11100:	bxeq	lr
   11104:	ldr	r3, [pc, #16]	; 1111c <__assert_fail@plt+0x94>
   11108:	cmp	r3, #0
   1110c:	bxeq	lr
   11110:	bx	r3
   11114:	andeq	sl, r2, r0, lsr r1
   11118:	andeq	sl, r2, r0, lsr r1
   1111c:	andeq	r0, r0, r0
   11120:	ldr	r0, [pc, #36]	; 1114c <__assert_fail@plt+0xc4>
   11124:	ldr	r1, [pc, #36]	; 11150 <__assert_fail@plt+0xc8>
   11128:	sub	r1, r1, r0
   1112c:	asr	r1, r1, #2
   11130:	add	r1, r1, r1, lsr #31
   11134:	asrs	r1, r1, #1
   11138:	bxeq	lr
   1113c:	ldr	r3, [pc, #16]	; 11154 <__assert_fail@plt+0xcc>
   11140:	cmp	r3, #0
   11144:	bxeq	lr
   11148:	bx	r3
   1114c:	andeq	sl, r2, r0, lsr r1
   11150:	andeq	sl, r2, r0, lsr r1
   11154:	andeq	r0, r0, r0
   11158:	push	{r4, lr}
   1115c:	ldr	r4, [pc, #24]	; 1117c <__assert_fail@plt+0xf4>
   11160:	ldrb	r3, [r4]
   11164:	cmp	r3, #0
   11168:	popne	{r4, pc}
   1116c:	bl	110f4 <__assert_fail@plt+0x6c>
   11170:	mov	r3, #1
   11174:	strb	r3, [r4]
   11178:	pop	{r4, pc}
   1117c:	andeq	sl, r2, r4, asr r1
   11180:	b	11120 <__assert_fail@plt+0x98>
   11184:	push	{fp, lr}
   11188:	mov	fp, sp
   1118c:	sub	sp, sp, #56	; 0x38
   11190:	mov	r4, r0
   11194:	cmp	r0, #0
   11198:	bne	114d4 <__assert_fail@plt+0x44c>
   1119c:	movw	r1, #34907	; 0x885b
   111a0:	mov	r0, #0
   111a4:	mov	r2, #5
   111a8:	movt	r1, #1
   111ac:	bl	10ec0 <dcgettext@plt>
   111b0:	mov	r1, r0
   111b4:	movw	r0, #41332	; 0xa174
   111b8:	movt	r0, #2
   111bc:	ldr	r2, [r0]
   111c0:	mov	r0, #1
   111c4:	bl	10fc8 <__printf_chk@plt>
   111c8:	movw	r1, #34937	; 0x8879
   111cc:	mov	r0, #0
   111d0:	mov	r2, #5
   111d4:	movt	r1, #1
   111d8:	bl	10ec0 <dcgettext@plt>
   111dc:	movw	r7, #41292	; 0xa14c
   111e0:	movt	r7, #2
   111e4:	ldr	r1, [r7]
   111e8:	bl	10e30 <fputs_unlocked@plt>
   111ec:	movw	r1, #36406	; 0x8e36
   111f0:	mov	r0, #0
   111f4:	mov	r2, #5
   111f8:	movt	r1, #1
   111fc:	bl	10ec0 <dcgettext@plt>
   11200:	ldr	r1, [r7]
   11204:	bl	10e30 <fputs_unlocked@plt>
   11208:	movw	r1, #36462	; 0x8e6e
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	movt	r1, #1
   11218:	bl	10ec0 <dcgettext@plt>
   1121c:	ldr	r1, [r7]
   11220:	bl	10e30 <fputs_unlocked@plt>
   11224:	movw	r1, #35007	; 0x88bf
   11228:	mov	r0, #0
   1122c:	mov	r2, #5
   11230:	movt	r1, #1
   11234:	bl	10ec0 <dcgettext@plt>
   11238:	ldr	r1, [r7]
   1123c:	bl	10e30 <fputs_unlocked@plt>
   11240:	movw	r1, #35077	; 0x8905
   11244:	mov	r0, #0
   11248:	mov	r2, #5
   1124c:	movt	r1, #1
   11250:	bl	10ec0 <dcgettext@plt>
   11254:	ldr	r1, [r7]
   11258:	bl	10e30 <fputs_unlocked@plt>
   1125c:	movw	r1, #35148	; 0x894c
   11260:	mov	r0, #0
   11264:	mov	r2, #5
   11268:	movt	r1, #1
   1126c:	bl	10ec0 <dcgettext@plt>
   11270:	ldr	r1, [r7]
   11274:	bl	10e30 <fputs_unlocked@plt>
   11278:	movw	r1, #35218	; 0x8992
   1127c:	mov	r0, #0
   11280:	mov	r2, #5
   11284:	movt	r1, #1
   11288:	bl	10ec0 <dcgettext@plt>
   1128c:	ldr	r1, [r7]
   11290:	bl	10e30 <fputs_unlocked@plt>
   11294:	movw	r1, #35292	; 0x89dc
   11298:	mov	r0, #0
   1129c:	mov	r2, #5
   112a0:	movt	r1, #1
   112a4:	bl	10ec0 <dcgettext@plt>
   112a8:	ldr	r1, [r7]
   112ac:	bl	10e30 <fputs_unlocked@plt>
   112b0:	movw	r1, #35350	; 0x8a16
   112b4:	mov	r0, #0
   112b8:	mov	r2, #5
   112bc:	movt	r1, #1
   112c0:	bl	10ec0 <dcgettext@plt>
   112c4:	ldr	r1, [r7]
   112c8:	bl	10e30 <fputs_unlocked@plt>
   112cc:	movw	r1, #35424	; 0x8a60
   112d0:	mov	r0, #0
   112d4:	mov	r2, #5
   112d8:	movt	r1, #1
   112dc:	bl	10ec0 <dcgettext@plt>
   112e0:	ldr	r1, [r7]
   112e4:	bl	10e30 <fputs_unlocked@plt>
   112e8:	movw	r1, #35499	; 0x8aab
   112ec:	mov	r0, #0
   112f0:	mov	r2, #5
   112f4:	movt	r1, #1
   112f8:	bl	10ec0 <dcgettext@plt>
   112fc:	ldr	r1, [r7]
   11300:	bl	10e30 <fputs_unlocked@plt>
   11304:	movw	r1, #35741	; 0x8b9d
   11308:	mov	r0, #0
   1130c:	mov	r2, #5
   11310:	movt	r1, #1
   11314:	bl	10ec0 <dcgettext@plt>
   11318:	ldr	r1, [r7]
   1131c:	bl	10e30 <fputs_unlocked@plt>
   11320:	movw	r1, #35963	; 0x8c7b
   11324:	mov	r0, #0
   11328:	mov	r2, #5
   1132c:	movt	r1, #1
   11330:	bl	10ec0 <dcgettext@plt>
   11334:	ldr	r1, [r7]
   11338:	bl	10e30 <fputs_unlocked@plt>
   1133c:	movw	r1, #36008	; 0x8ca8
   11340:	mov	r0, #0
   11344:	mov	r2, #5
   11348:	movt	r1, #1
   1134c:	bl	10ec0 <dcgettext@plt>
   11350:	ldr	r1, [r7]
   11354:	bl	10e30 <fputs_unlocked@plt>
   11358:	movw	r1, #36062	; 0x8cde
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	movt	r1, #1
   11368:	bl	10ec0 <dcgettext@plt>
   1136c:	ldr	r1, [r7]
   11370:	bl	10e30 <fputs_unlocked@plt>
   11374:	movw	r0, #37440	; 0x9240
   11378:	mov	r2, #48	; 0x30
   1137c:	mov	r6, sp
   11380:	movw	r5, #36260	; 0x8da4
   11384:	movt	r0, #1
   11388:	movt	r5, #1
   1138c:	add	r1, r0, #32
   11390:	add	r3, r0, #16
   11394:	vld1.64	{d18-d19}, [r0], r2
   11398:	vld1.64	{d16-d17}, [r1]
   1139c:	vld1.64	{d20-d21}, [r3]
   113a0:	add	r1, r6, #32
   113a4:	vldr	d22, [r0]
   113a8:	add	r0, r6, #16
   113ac:	vst1.64	{d16-d17}, [r1]
   113b0:	movw	r1, #36537	; 0x8eb9
   113b4:	vst1.64	{d20-d21}, [r0]
   113b8:	mov	r0, r6
   113bc:	vst1.64	{d18-d19}, [r0], r2
   113c0:	movt	r1, #1
   113c4:	vstr	d22, [r0]
   113c8:	mov	r0, r5
   113cc:	bl	10e48 <strcmp@plt>
   113d0:	cmp	r0, #0
   113d4:	ldrne	r1, [r6, #8]!
   113d8:	cmpne	r1, #0
   113dc:	bne	113c8 <__assert_fail@plt+0x340>
   113e0:	ldr	r6, [r6, #4]
   113e4:	movw	r1, #36632	; 0x8f18
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	movt	r1, #1
   113f4:	bl	10ec0 <dcgettext@plt>
   113f8:	movw	r2, #36321	; 0x8de1
   113fc:	movw	r3, #36655	; 0x8f2f
   11400:	mov	r1, r0
   11404:	mov	r0, #1
   11408:	movt	r2, #1
   1140c:	movt	r3, #1
   11410:	bl	10fc8 <__printf_chk@plt>
   11414:	cmp	r6, #0
   11418:	mov	r0, #5
   1141c:	mov	r1, #0
   11420:	moveq	r6, r5
   11424:	bl	1101c <setlocale@plt>
   11428:	cmp	r0, #0
   1142c:	beq	11464 <__assert_fail@plt+0x3dc>
   11430:	movw	r1, #36695	; 0x8f57
   11434:	mov	r2, #3
   11438:	movt	r1, #1
   1143c:	bl	11070 <strncmp@plt>
   11440:	cmp	r0, #0
   11444:	beq	11464 <__assert_fail@plt+0x3dc>
   11448:	movw	r1, #36699	; 0x8f5b
   1144c:	mov	r0, #0
   11450:	mov	r2, #5
   11454:	movt	r1, #1
   11458:	bl	10ec0 <dcgettext@plt>
   1145c:	ldr	r1, [r7]
   11460:	bl	10e30 <fputs_unlocked@plt>
   11464:	movw	r1, #36770	; 0x8fa2
   11468:	mov	r0, #0
   1146c:	mov	r2, #5
   11470:	movt	r1, #1
   11474:	bl	10ec0 <dcgettext@plt>
   11478:	movw	r2, #36655	; 0x8f2f
   1147c:	mov	r1, r0
   11480:	mov	r0, #1
   11484:	mov	r3, r5
   11488:	movt	r2, #1
   1148c:	bl	10fc8 <__printf_chk@plt>
   11490:	movw	r1, #36797	; 0x8fbd
   11494:	mov	r0, #0
   11498:	mov	r2, #5
   1149c:	movt	r1, #1
   114a0:	bl	10ec0 <dcgettext@plt>
   114a4:	movw	r3, #36847	; 0x8fef
   114a8:	mov	r1, r0
   114ac:	movw	r0, #36565	; 0x8ed5
   114b0:	cmp	r6, r5
   114b4:	mov	r2, r6
   114b8:	movt	r0, #1
   114bc:	movt	r3, #1
   114c0:	moveq	r3, r0
   114c4:	mov	r0, #1
   114c8:	bl	10fc8 <__printf_chk@plt>
   114cc:	mov	r0, r4
   114d0:	bl	10f80 <exit@plt>
   114d4:	movw	r0, #41280	; 0xa140
   114d8:	movw	r1, #34868	; 0x8834
   114dc:	mov	r2, #5
   114e0:	movt	r0, #2
   114e4:	movt	r1, #1
   114e8:	ldr	r5, [r0]
   114ec:	mov	r0, #0
   114f0:	bl	10ec0 <dcgettext@plt>
   114f4:	mov	r2, r0
   114f8:	movw	r0, #41332	; 0xa174
   114fc:	mov	r1, #1
   11500:	movt	r0, #2
   11504:	ldr	r3, [r0]
   11508:	mov	r0, r5
   1150c:	bl	10fe0 <__fprintf_chk@plt>
   11510:	mov	r0, r4
   11514:	bl	10f80 <exit@plt>
   11518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1151c:	add	fp, sp, #28
   11520:	sub	sp, sp, #36	; 0x24
   11524:	mov	r5, r0
   11528:	ldr	r0, [r1]
   1152c:	mov	r4, r1
   11530:	bl	13f40 <__assert_fail@plt+0x2eb8>
   11534:	movw	r1, #36847	; 0x8fef
   11538:	mov	r0, #6
   1153c:	movt	r1, #1
   11540:	bl	1101c <setlocale@plt>
   11544:	movw	r6, #36325	; 0x8de5
   11548:	movw	r1, #36267	; 0x8dab
   1154c:	movt	r6, #1
   11550:	movt	r1, #1
   11554:	mov	r0, r6
   11558:	bl	11058 <bindtextdomain@plt>
   1155c:	mov	r0, r6
   11560:	bl	10ed8 <textdomain@plt>
   11564:	movw	r0, #15444	; 0x3c54
   11568:	movt	r0, #1
   1156c:	bl	18804 <__assert_fail@plt+0x777c>
   11570:	mov	r0, #0
   11574:	movw	r7, #36291	; 0x8dc3
   11578:	movw	r6, #37216	; 0x9160
   1157c:	mov	sl, #0
   11580:	mov	r9, #76	; 0x4c
   11584:	str	r0, [sp, #20]
   11588:	mov	r0, #0
   1158c:	movt	r7, #1
   11590:	movt	r6, #1
   11594:	str	r0, [sp, #16]
   11598:	mov	r0, #0
   1159c:	b	115a4 <__assert_fail@plt+0x51c>
   115a0:	mov	r0, r8
   115a4:	mov	r8, r0
   115a8:	mov	r0, r5
   115ac:	mov	r1, r4
   115b0:	mov	r2, r7
   115b4:	mov	r3, r6
   115b8:	str	sl, [sp]
   115bc:	bl	10f68 <getopt_long@plt>
   115c0:	sub	r1, r0, #256	; 0x100
   115c4:	cmp	r1, #8
   115c8:	bcc	115a4 <__assert_fail@plt+0x51c>
   115cc:	cmp	r0, #99	; 0x63
   115d0:	ble	11660 <__assert_fail@plt+0x5d8>
   115d4:	cmp	r0, #100	; 0x64
   115d8:	beq	11648 <__assert_fail@plt+0x5c0>
   115dc:	cmp	r0, #105	; 0x69
   115e0:	beq	11654 <__assert_fail@plt+0x5cc>
   115e4:	cmp	r0, #119	; 0x77
   115e8:	bne	117b4 <__assert_fail@plt+0x72c>
   115ec:	movw	r0, #41296	; 0xa150
   115f0:	movw	r1, #36847	; 0x8fef
   115f4:	mov	r2, #10
   115f8:	add	r3, sp, #24
   115fc:	movt	r0, #2
   11600:	movt	r1, #1
   11604:	ldr	r0, [r0]
   11608:	str	r1, [sp]
   1160c:	mov	r1, #0
   11610:	bl	16908 <__assert_fail@plt+0x5880>
   11614:	cmp	r0, #1
   11618:	bhi	118b4 <__assert_fail@plt+0x82c>
   1161c:	ldr	r1, [sp, #28]
   11620:	cmn	r1, #1
   11624:	ble	118b4 <__assert_fail@plt+0x82c>
   11628:	ldr	r2, [sp, #24]
   1162c:	mvn	r3, #-2147483648	; 0x80000000
   11630:	subs	r3, r3, r2
   11634:	rscs	r1, r1, #0
   11638:	movwlt	r2, #0
   1163c:	subs	r9, r0, #1
   11640:	movne	r9, r2
   11644:	b	115a0 <__assert_fail@plt+0x518>
   11648:	mov	r0, #1
   1164c:	str	r0, [sp, #20]
   11650:	b	115a0 <__assert_fail@plt+0x518>
   11654:	mov	r0, #1
   11658:	str	r0, [sp, #16]
   1165c:	b	115a0 <__assert_fail@plt+0x518>
   11660:	cmn	r0, #3
   11664:	beq	11758 <__assert_fail@plt+0x6d0>
   11668:	cmn	r0, #2
   1166c:	beq	117ac <__assert_fail@plt+0x724>
   11670:	cmn	r0, #1
   11674:	bne	117b4 <__assert_fail@plt+0x72c>
   11678:	sub	r0, r8, #256	; 0x100
   1167c:	cmp	r0, #8
   11680:	bcs	117bc <__assert_fail@plt+0x734>
   11684:	movw	r1, #37792	; 0x93a0
   11688:	movw	r2, #41308	; 0xa15c
   1168c:	movw	r6, #41272	; 0xa138
   11690:	movt	r1, #1
   11694:	movt	r2, #2
   11698:	movt	r6, #2
   1169c:	ldr	r1, [r1, r0, lsl #2]
   116a0:	str	r1, [r2]
   116a4:	movw	r1, #37760	; 0x9380
   116a8:	movw	r2, #41304	; 0xa158
   116ac:	movt	r1, #1
   116b0:	movt	r2, #2
   116b4:	ldr	r1, [r1, r0, lsl #2]
   116b8:	str	r1, [r2]
   116bc:	movw	r1, #37824	; 0x93c0
   116c0:	movw	r2, #41312	; 0xa160
   116c4:	movt	r1, #1
   116c8:	movt	r2, #2
   116cc:	ldr	r1, [r1, r0, lsl #2]
   116d0:	str	r1, [r2]
   116d4:	movw	r1, #37856	; 0x93e0
   116d8:	movw	r2, #41316	; 0xa164
   116dc:	movt	r1, #1
   116e0:	movt	r2, #2
   116e4:	ldr	r1, [r1, r0, lsl #2]
   116e8:	str	r1, [r2]
   116ec:	movw	r1, #37888	; 0x9400
   116f0:	movt	r1, #1
   116f4:	ldr	r0, [r1, r0, lsl #2]
   116f8:	movw	r1, #41320	; 0xa168
   116fc:	movt	r1, #2
   11700:	str	r0, [r1]
   11704:	ldr	r0, [r6]
   11708:	sub	r1, r5, r0
   1170c:	cmp	r1, #2
   11710:	blt	117e8 <__assert_fail@plt+0x760>
   11714:	movw	r1, #36386	; 0x8e22
   11718:	mov	r0, #0
   1171c:	mov	r2, #5
   11720:	movt	r1, #1
   11724:	bl	10ec0 <dcgettext@plt>
   11728:	mov	r5, r0
   1172c:	ldr	r0, [r6]
   11730:	add	r0, r4, r0, lsl #2
   11734:	ldr	r0, [r0, #4]
   11738:	bl	15b74 <__assert_fail@plt+0x4aec>
   1173c:	mov	r3, r0
   11740:	mov	r0, #0
   11744:	mov	r1, #0
   11748:	mov	r2, r5
   1174c:	bl	10f2c <error@plt>
   11750:	mov	r0, #1
   11754:	bl	11184 <__assert_fail@plt+0xfc>
   11758:	movw	r0, #41192	; 0xa0e8
   1175c:	movw	r2, #36351	; 0x8dff
   11760:	mov	r1, #0
   11764:	movw	r7, #36335	; 0x8def
   11768:	movt	r0, #2
   1176c:	movt	r2, #1
   11770:	str	r1, [sp, #8]
   11774:	movw	r1, #36260	; 0x8da4
   11778:	movt	r7, #1
   1177c:	ldr	r3, [r0]
   11780:	movw	r0, #41292	; 0xa14c
   11784:	str	r2, [sp, #4]
   11788:	movw	r2, #36321	; 0x8de1
   1178c:	movt	r1, #1
   11790:	str	r7, [sp]
   11794:	movt	r0, #2
   11798:	movt	r2, #1
   1179c:	ldr	r0, [r0]
   117a0:	bl	16130 <__assert_fail@plt+0x50a8>
   117a4:	mov	r0, #0
   117a8:	bl	10f80 <exit@plt>
   117ac:	mov	r0, #0
   117b0:	bl	11184 <__assert_fail@plt+0xfc>
   117b4:	mov	r0, #1
   117b8:	bl	11184 <__assert_fail@plt+0xfc>
   117bc:	movw	r1, #36364	; 0x8e0c
   117c0:	mov	r0, #0
   117c4:	mov	r2, #5
   117c8:	movt	r1, #1
   117cc:	bl	10ec0 <dcgettext@plt>
   117d0:	mov	r2, r0
   117d4:	mov	r0, #0
   117d8:	mov	r1, #0
   117dc:	bl	10f2c <error@plt>
   117e0:	mov	r0, #1
   117e4:	bl	11184 <__assert_fail@plt+0xfc>
   117e8:	cmp	r0, r5
   117ec:	movw	r1, #38625	; 0x96e1
   117f0:	ldrlt	r4, [r4, r0, lsl #2]
   117f4:	movt	r1, #1
   117f8:	movwge	r4, #38625	; 0x96e1
   117fc:	movtge	r4, #1
   11800:	mov	r0, r4
   11804:	bl	10e48 <strcmp@plt>
   11808:	cmp	r0, #0
   1180c:	bne	11820 <__assert_fail@plt+0x798>
   11810:	movw	r0, #41288	; 0xa148
   11814:	movt	r0, #2
   11818:	ldr	r5, [r0]
   1181c:	b	1186c <__assert_fail@plt+0x7e4>
   11820:	movw	r1, #36403	; 0x8e33
   11824:	mov	r0, r4
   11828:	movt	r1, #1
   1182c:	bl	1104c <fopen64@plt>
   11830:	mov	r5, r0
   11834:	cmp	r0, #0
   11838:	bne	1186c <__assert_fail@plt+0x7e4>
   1183c:	bl	10fa4 <__errno_location@plt>
   11840:	ldr	r5, [r0]
   11844:	mov	r0, #0
   11848:	mov	r1, #3
   1184c:	mov	r2, r4
   11850:	bl	158c8 <__assert_fail@plt+0x4840>
   11854:	movw	r2, #36300	; 0x8dcc
   11858:	mov	r3, r0
   1185c:	mov	r0, #1
   11860:	mov	r1, r5
   11864:	movt	r2, #1
   11868:	bl	10f2c <error@plt>
   1186c:	mov	r0, r5
   11870:	mov	r1, #2
   11874:	bl	13d40 <__assert_fail@plt+0x2cb8>
   11878:	movw	r0, #41292	; 0xa14c
   1187c:	movt	r0, #2
   11880:	ldr	r2, [r0]
   11884:	ldr	r0, [sp, #20]
   11888:	tst	r0, #1
   1188c:	beq	118a4 <__assert_fail@plt+0x81c>
   11890:	ldr	r0, [sp, #16]
   11894:	mov	r1, r4
   11898:	and	r3, r0, #1
   1189c:	mov	r0, r5
   118a0:	bl	1251c <__assert_fail@plt+0x1494>
   118a4:	mov	r0, r5
   118a8:	mov	r1, r4
   118ac:	mov	r3, r9
   118b0:	bl	1277c <__assert_fail@plt+0x16f4>
   118b4:	movw	r1, #36303	; 0x8dcf
   118b8:	mov	r0, #0
   118bc:	mov	r2, #5
   118c0:	movt	r1, #1
   118c4:	bl	10ec0 <dcgettext@plt>
   118c8:	mov	r4, r0
   118cc:	movw	r0, #41296	; 0xa150
   118d0:	movt	r0, #2
   118d4:	ldr	r0, [r0]
   118d8:	bl	15b74 <__assert_fail@plt+0x4aec>
   118dc:	movw	r2, #36296	; 0x8dc8
   118e0:	str	r0, [sp]
   118e4:	mov	r0, #1
   118e8:	mov	r1, #0
   118ec:	mov	r3, r4
   118f0:	movt	r2, #1
   118f4:	bl	10f2c <error@plt>
   118f8:	movw	r1, #21846	; 0x5556
   118fc:	add	r0, r0, #2
   11900:	movt	r1, #21845	; 0x5555
   11904:	smmul	r0, r0, r1
   11908:	add	r0, r0, r0, lsr #31
   1190c:	lsl	r0, r0, #2
   11910:	bx	lr
   11914:	add	r0, r0, #4
   11918:	b	134bc <__assert_fail@plt+0x2434>
   1191c:	push	{r4, sl, fp, lr}
   11920:	add	fp, sp, #8
   11924:	sub	sp, sp, #8
   11928:	mov	r4, r0
   1192c:	ldr	r0, [fp, #8]
   11930:	str	r0, [sp]
   11934:	add	r0, r4, #4
   11938:	bl	134c8 <__assert_fail@plt+0x2440>
   1193c:	ldr	r1, [r4, #4]
   11940:	str	r1, [r4]
   11944:	sub	sp, fp, #8
   11948:	pop	{r4, sl, fp, pc}
   1194c:	mov	r1, r0
   11950:	mov	r0, #1
   11954:	cmp	r1, #46	; 0x2e
   11958:	bgt	11970 <__assert_fail@plt+0x8e8>
   1195c:	cmp	r1, #43	; 0x2b
   11960:	beq	11988 <__assert_fail@plt+0x900>
   11964:	cmp	r1, #45	; 0x2d
   11968:	bne	11980 <__assert_fail@plt+0x8f8>
   1196c:	bx	lr
   11970:	cmp	r1, #47	; 0x2f
   11974:	beq	11988 <__assert_fail@plt+0x900>
   11978:	cmp	r1, #95	; 0x5f
   1197c:	bxeq	lr
   11980:	mov	r0, r1
   11984:	b	1349c <__assert_fail@plt+0x2414>
   11988:	mov	r0, #0
   1198c:	bx	lr
   11990:	push	{r4, r5, fp, lr}
   11994:	add	fp, sp, #8
   11998:	mov	r4, r3
   1199c:	mov	r5, r2
   119a0:	bl	1325c <__assert_fail@plt+0x21d4>
   119a4:	b	119ac <__assert_fail@plt+0x924>
   119a8:	add	r5, r5, #1
   119ac:	cmp	r4, #0
   119b0:	popeq	{r4, r5, fp, pc}
   119b4:	ldrb	r0, [r5]
   119b8:	sub	r4, r4, #1
   119bc:	cmp	r0, #43	; 0x2b
   119c0:	beq	119d4 <__assert_fail@plt+0x94c>
   119c4:	cmp	r0, #47	; 0x2f
   119c8:	bne	119a8 <__assert_fail@plt+0x920>
   119cc:	mov	r0, #95	; 0x5f
   119d0:	b	119d8 <__assert_fail@plt+0x950>
   119d4:	mov	r0, #45	; 0x2d
   119d8:	strb	r0, [r5]
   119dc:	b	119a8 <__assert_fail@plt+0x920>
   119e0:	push	{r4, sl, fp, lr}
   119e4:	add	fp, sp, #8
   119e8:	mov	r4, r0
   119ec:	add	r0, r0, #4
   119f0:	bl	134bc <__assert_fail@plt+0x2434>
   119f4:	movw	r0, #4200	; 0x1068
   119f8:	str	r0, [r4, #20]
   119fc:	movw	r0, #4200	; 0x1068
   11a00:	bl	16394 <__assert_fail@plt+0x530c>
   11a04:	str	r0, [r4, #16]
   11a08:	pop	{r4, sl, fp, pc}
   11a0c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11a10:	add	fp, sp, #24
   11a14:	sub	sp, sp, #8
   11a18:	mov	r5, r0
   11a1c:	ldr	r0, [r0, #20]
   11a20:	mov	r8, r3
   11a24:	mov	r6, r2
   11a28:	mov	r7, r1
   11a2c:	mov	r4, r5
   11a30:	cmp	r0, r2
   11a34:	bge	11a54 <__assert_fail@plt+0x9cc>
   11a38:	ldr	r0, [r4, #16]!
   11a3c:	lsl	r1, r6, #1
   11a40:	mov	r2, #1
   11a44:	str	r1, [r4, #4]
   11a48:	bl	16328 <__assert_fail@plt+0x52a0>
   11a4c:	str	r0, [r4]
   11a50:	b	11a58 <__assert_fail@plt+0x9d0>
   11a54:	ldr	r0, [r4, #16]!
   11a58:	ldr	r9, [fp, #8]
   11a5c:	mov	r1, r7
   11a60:	mov	r2, r6
   11a64:	bl	10e90 <memcpy@plt>
   11a68:	ldr	r1, [r4]
   11a6c:	cmp	r6, #0
   11a70:	beq	11adc <__assert_fail@plt+0xa54>
   11a74:	mov	r0, r6
   11a78:	ldrb	r2, [r1]
   11a7c:	cmp	r2, #46	; 0x2e
   11a80:	bgt	11a9c <__assert_fail@plt+0xa14>
   11a84:	mov	r3, #43	; 0x2b
   11a88:	cmp	r2, #45	; 0x2d
   11a8c:	beq	11aa8 <__assert_fail@plt+0xa20>
   11a90:	cmp	r2, #43	; 0x2b
   11a94:	bne	11aac <__assert_fail@plt+0xa24>
   11a98:	b	11ac4 <__assert_fail@plt+0xa3c>
   11a9c:	cmp	r2, #95	; 0x5f
   11aa0:	bne	11abc <__assert_fail@plt+0xa34>
   11aa4:	mov	r3, #47	; 0x2f
   11aa8:	strb	r3, [r1]
   11aac:	subs	r0, r0, #1
   11ab0:	add	r1, r1, #1
   11ab4:	bne	11a78 <__assert_fail@plt+0x9f0>
   11ab8:	b	11ad8 <__assert_fail@plt+0xa50>
   11abc:	cmp	r2, #47	; 0x2f
   11ac0:	bne	11aac <__assert_fail@plt+0xa24>
   11ac4:	mov	r0, #0
   11ac8:	str	r0, [r9]
   11acc:	mov	r0, #0
   11ad0:	sub	sp, fp, #24
   11ad4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11ad8:	ldr	r1, [r4]
   11adc:	add	r0, r5, #4
   11ae0:	mov	r2, r6
   11ae4:	mov	r3, r8
   11ae8:	str	r9, [sp]
   11aec:	bl	134c8 <__assert_fail@plt+0x2440>
   11af0:	ldr	r1, [r5, #4]
   11af4:	str	r1, [r5]
   11af8:	sub	sp, fp, #24
   11afc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11b00:	movw	r1, #26215	; 0x6667
   11b04:	add	r0, r0, #4
   11b08:	movt	r1, #26214	; 0x6666
   11b0c:	smmul	r0, r0, r1
   11b10:	lsr	r1, r0, #1
   11b14:	add	r0, r1, r0, lsr #31
   11b18:	lsl	r0, r0, #3
   11b1c:	bx	lr
   11b20:	add	r0, r0, #4
   11b24:	b	12d44 <__assert_fail@plt+0x1cbc>
   11b28:	push	{r4, sl, fp, lr}
   11b2c:	add	fp, sp, #8
   11b30:	sub	sp, sp, #8
   11b34:	mov	r4, r0
   11b38:	ldr	r0, [fp, #8]
   11b3c:	str	r0, [sp]
   11b40:	add	r0, r4, #4
   11b44:	bl	12d50 <__assert_fail@plt+0x1cc8>
   11b48:	ldr	r1, [r4, #4]
   11b4c:	str	r1, [r4]
   11b50:	sub	sp, fp, #8
   11b54:	pop	{r4, sl, fp, pc}
   11b58:	sub	r1, r0, #65	; 0x41
   11b5c:	sub	r0, r0, #48	; 0x30
   11b60:	mov	r2, #0
   11b64:	uxtb	r1, r1
   11b68:	uxtb	r0, r0
   11b6c:	cmp	r1, #22
   11b70:	mov	r1, #0
   11b74:	movwcc	r1, #1
   11b78:	cmp	r0, #10
   11b7c:	movwcc	r2, #1
   11b80:	orr	r0, r2, r1
   11b84:	bx	lr
   11b88:	push	{r4, r5, fp, lr}
   11b8c:	add	fp, sp, #8
   11b90:	mov	r4, r3
   11b94:	mov	r5, r2
   11b98:	bl	12a7c <__assert_fail@plt+0x19f4>
   11b9c:	cmp	r4, #0
   11ba0:	popeq	{r4, r5, fp, pc}
   11ba4:	movw	r0, #37496	; 0x9278
   11ba8:	movt	r0, #1
   11bac:	ldrb	r1, [r5]
   11bb0:	sub	r2, r1, #50	; 0x32
   11bb4:	uxtb	r2, r2
   11bb8:	cmp	r2, #41	; 0x29
   11bbc:	bcs	11bd8 <__assert_fail@plt+0xb50>
   11bc0:	add	r1, r0, r1
   11bc4:	subs	r4, r4, #1
   11bc8:	ldrb	r1, [r1, #-50]	; 0xffffffce
   11bcc:	strb	r1, [r5], #1
   11bd0:	bne	11bac <__assert_fail@plt+0xb24>
   11bd4:	pop	{r4, r5, fp, pc}
   11bd8:	movw	r0, #36953	; 0x9059
   11bdc:	movw	r1, #36978	; 0x9072
   11be0:	movw	r3, #36991	; 0x907f
   11be4:	mov	r2, #452	; 0x1c4
   11be8:	movt	r0, #1
   11bec:	movt	r1, #1
   11bf0:	movt	r3, #1
   11bf4:	bl	11088 <__assert_fail@plt>
   11bf8:	push	{r4, sl, fp, lr}
   11bfc:	add	fp, sp, #8
   11c00:	mov	r4, r0
   11c04:	add	r0, r0, #4
   11c08:	bl	12d44 <__assert_fail@plt+0x1cbc>
   11c0c:	movw	r0, #4200	; 0x1068
   11c10:	str	r0, [r4, #20]
   11c14:	movw	r0, #4200	; 0x1068
   11c18:	bl	16394 <__assert_fail@plt+0x530c>
   11c1c:	str	r0, [r4, #16]
   11c20:	pop	{r4, sl, fp, pc}
   11c24:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   11c28:	add	fp, sp, #24
   11c2c:	sub	sp, sp, #8
   11c30:	mov	r4, r0
   11c34:	ldr	r0, [r0, #20]
   11c38:	mov	r8, r3
   11c3c:	mov	r9, r2
   11c40:	mov	r7, r1
   11c44:	mov	r5, r4
   11c48:	cmp	r0, r2
   11c4c:	bge	11c70 <__assert_fail@plt+0xbe8>
   11c50:	ldr	r0, [r5, #16]!
   11c54:	lsl	r1, r9, #1
   11c58:	mov	r2, #1
   11c5c:	str	r1, [r5, #4]
   11c60:	bl	16328 <__assert_fail@plt+0x52a0>
   11c64:	mov	r1, r0
   11c68:	str	r0, [r5]
   11c6c:	b	11c74 <__assert_fail@plt+0xbec>
   11c70:	ldr	r1, [r5, #16]!
   11c74:	ldr	ip, [fp, #8]
   11c78:	cmp	r9, #0
   11c7c:	beq	11ccc <__assert_fail@plt+0xc44>
   11c80:	movw	r2, #37537	; 0x92a1
   11c84:	mov	r3, r9
   11c88:	movt	r2, #1
   11c8c:	ldrb	r0, [r7]
   11c90:	sub	r3, r3, #1
   11c94:	sub	r6, r0, #48	; 0x30
   11c98:	uxtb	r6, r6
   11c9c:	cmp	r6, #10
   11ca0:	subcs	r6, r0, #65	; 0x41
   11ca4:	uxtbcs	r6, r6
   11ca8:	cmpcs	r6, #21
   11cac:	bhi	11cb8 <__assert_fail@plt+0xc30>
   11cb0:	add	r0, r2, r0
   11cb4:	ldrb	r0, [r0, #-48]	; 0xffffffd0
   11cb8:	strb	r0, [r1], #1
   11cbc:	add	r7, r7, #1
   11cc0:	cmp	r3, #0
   11cc4:	bne	11c8c <__assert_fail@plt+0xc04>
   11cc8:	ldr	r1, [r5]
   11ccc:	add	r0, r4, #4
   11cd0:	mov	r2, r9
   11cd4:	mov	r3, r8
   11cd8:	str	ip, [sp]
   11cdc:	bl	12d50 <__assert_fail@plt+0x1cc8>
   11ce0:	ldr	r1, [r4, #4]
   11ce4:	str	r1, [r4]
   11ce8:	sub	sp, fp, #24
   11cec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   11cf0:	lsl	r0, r0, #1
   11cf4:	bx	lr
   11cf8:	sub	r1, r0, #65	; 0x41
   11cfc:	sub	r0, r0, #48	; 0x30
   11d00:	mov	r2, #0
   11d04:	uxtb	r1, r1
   11d08:	uxtb	r0, r0
   11d0c:	cmp	r1, #6
   11d10:	mov	r1, #0
   11d14:	movwcc	r1, #1
   11d18:	cmp	r0, #10
   11d1c:	movwcc	r2, #1
   11d20:	orr	r0, r2, r1
   11d24:	bx	lr
   11d28:	push	{fp, lr}
   11d2c:	mov	fp, sp
   11d30:	cmp	r1, #0
   11d34:	popeq	{fp, pc}
   11d38:	movw	ip, #37920	; 0x9420
   11d3c:	movt	ip, #1
   11d40:	ldrb	lr, [r0], #1
   11d44:	subs	r1, r1, #1
   11d48:	ldrb	r3, [ip, lr, lsr #4]
   11d4c:	strb	r3, [r2]
   11d50:	and	r3, lr, #15
   11d54:	ldrb	r3, [ip, r3]
   11d58:	strb	r3, [r2, #1]
   11d5c:	add	r2, r2, #2
   11d60:	bne	11d40 <__assert_fail@plt+0xcb8>
   11d64:	pop	{fp, pc}
   11d68:	push	{r4, sl, fp, lr}
   11d6c:	add	fp, sp, #8
   11d70:	mov	r4, r0
   11d74:	movw	r0, #4200	; 0x1068
   11d78:	str	r0, [r4, #20]
   11d7c:	movw	r0, #4200	; 0x1068
   11d80:	bl	16394 <__assert_fail@plt+0x530c>
   11d84:	str	r0, [r4, #16]
   11d88:	mov	r0, #0
   11d8c:	strb	r0, [r4, #5]
   11d90:	mov	r0, #1
   11d94:	str	r0, [r4]
   11d98:	pop	{r4, sl, fp, pc}
   11d9c:	push	{r4, r5, fp, lr}
   11da0:	add	fp, sp, #8
   11da4:	ldr	ip, [fp, #8]
   11da8:	mov	r4, #0
   11dac:	cmp	r2, #0
   11db0:	str	r4, [ip]
   11db4:	bne	11dd0 <__assert_fail@plt+0xd48>
   11db8:	ldrb	r0, [r0, #5]
   11dbc:	clz	r0, r0
   11dc0:	lsr	r0, r0, #5
   11dc4:	pop	{r4, r5, fp, pc}
   11dc8:	eor	r5, r4, #1
   11dcc:	strb	r5, [r0, #5]
   11dd0:	cmp	r2, #0
   11dd4:	moveq	r0, #1
   11dd8:	popeq	{r4, r5, fp, pc}
   11ddc:	ldrb	lr, [r1], #1
   11de0:	sub	r2, r2, #1
   11de4:	cmp	lr, #10
   11de8:	beq	11dd0 <__assert_fail@plt+0xd48>
   11dec:	sub	r4, lr, #48	; 0x30
   11df0:	uxtb	r5, r4
   11df4:	mvn	r4, #47	; 0x2f
   11df8:	cmp	r5, #10
   11dfc:	bcc	11e18 <__assert_fail@plt+0xd90>
   11e00:	sub	r4, lr, #65	; 0x41
   11e04:	uxtb	r5, r4
   11e08:	mvn	r4, #54	; 0x36
   11e0c:	cmp	r5, #5
   11e10:	movhi	r0, #0
   11e14:	pophi	{r4, r5, fp, pc}
   11e18:	ldrb	r5, [r0, #5]
   11e1c:	add	r4, r4, lr
   11e20:	cmp	r5, #0
   11e24:	beq	11e48 <__assert_fail@plt+0xdc0>
   11e28:	ldrb	r5, [r0, #4]
   11e2c:	add	r5, r4, r5, lsl #4
   11e30:	strb	r5, [r3], #1
   11e34:	ldr	r5, [ip]
   11e38:	add	r5, r5, #1
   11e3c:	str	r5, [ip]
   11e40:	ldrb	r4, [r0, #5]
   11e44:	b	11dc8 <__assert_fail@plt+0xd40>
   11e48:	strb	r4, [r0, #4]
   11e4c:	mov	r4, #0
   11e50:	b	11dc8 <__assert_fail@plt+0xd40>
   11e54:	lsl	r0, r0, #3
   11e58:	bx	lr
   11e5c:	orr	r0, r0, #1
   11e60:	sub	r0, r0, #49	; 0x31
   11e64:	clz	r0, r0
   11e68:	lsr	r0, r0, #5
   11e6c:	bx	lr
   11e70:	push	{fp, lr}
   11e74:	mov	fp, sp
   11e78:	cmp	r1, #0
   11e7c:	popeq	{fp, pc}
   11e80:	mov	ip, #24
   11e84:	ldrb	lr, [r0], #1
   11e88:	mov	r3, #49	; 0x31
   11e8c:	tst	lr, #64	; 0x40
   11e90:	movweq	r3, #48	; 0x30
   11e94:	tst	lr, #32
   11e98:	strb	r3, [r2, #1]
   11e9c:	mov	r3, #49	; 0x31
   11ea0:	movweq	r3, #48	; 0x30
   11ea4:	tst	lr, #16
   11ea8:	strb	r3, [r2, #2]
   11eac:	mov	r3, #49	; 0x31
   11eb0:	movweq	r3, #48	; 0x30
   11eb4:	tst	lr, #8
   11eb8:	strb	r3, [r2, #3]
   11ebc:	mov	r3, #49	; 0x31
   11ec0:	movweq	r3, #48	; 0x30
   11ec4:	tst	lr, #4
   11ec8:	strb	r3, [r2, #4]
   11ecc:	mov	r3, #49	; 0x31
   11ed0:	movweq	r3, #48	; 0x30
   11ed4:	tst	lr, #2
   11ed8:	strb	r3, [r2, #5]
   11edc:	mov	r3, #49	; 0x31
   11ee0:	movweq	r3, #48	; 0x30
   11ee4:	strb	r3, [r2, #6]
   11ee8:	sxtb	r3, lr
   11eec:	bfi	lr, ip, #1, #31
   11ef0:	cmn	r3, #1
   11ef4:	mov	r3, #49	; 0x31
   11ef8:	strb	lr, [r2, #7]
   11efc:	movwgt	r3, #48	; 0x30
   11f00:	subs	r1, r1, #1
   11f04:	strb	r3, [r2]
   11f08:	add	r2, r2, #8
   11f0c:	bne	11e84 <__assert_fail@plt+0xdfc>
   11f10:	pop	{fp, pc}
   11f14:	push	{r4, sl, fp, lr}
   11f18:	add	fp, sp, #8
   11f1c:	mov	r4, r0
   11f20:	movw	r0, #4200	; 0x1068
   11f24:	str	r0, [r4, #20]
   11f28:	movw	r0, #4200	; 0x1068
   11f2c:	bl	16394 <__assert_fail@plt+0x530c>
   11f30:	str	r0, [r4, #16]
   11f34:	mov	r0, #0
   11f38:	strb	r0, [r4, #4]
   11f3c:	str	r0, [r4]
   11f40:	pop	{r4, sl, fp, pc}
   11f44:	push	{r4, r5, r6, sl, fp, lr}
   11f48:	add	fp, sp, #16
   11f4c:	ldr	ip, [fp, #8]
   11f50:	mov	lr, #0
   11f54:	cmp	r2, #0
   11f58:	str	lr, [ip]
   11f5c:	beq	11ff8 <__assert_fail@plt+0xf70>
   11f60:	add	r1, r1, #1
   11f64:	rsb	r4, r2, #1
   11f68:	ldrb	r2, [r1, #-1]
   11f6c:	cmp	r2, #10
   11f70:	bne	11f88 <__assert_fail@plt+0xf00>
   11f74:	add	r4, r4, #1
   11f78:	add	r1, r1, #1
   11f7c:	cmp	r4, #1
   11f80:	bne	11f68 <__assert_fail@plt+0xee0>
   11f84:	b	11ff0 <__assert_fail@plt+0xf68>
   11f88:	orr	r5, r2, #1
   11f8c:	cmp	r5, #49	; 0x31
   11f90:	movne	r0, #0
   11f94:	popne	{r4, r5, r6, sl, fp, pc}
   11f98:	ldr	r5, [r0]
   11f9c:	sub	r2, r2, #49	; 0x31
   11fa0:	clz	r2, r2
   11fa4:	lsr	r2, r2, #5
   11fa8:	cmp	r5, #0
   11fac:	moveq	r5, #8
   11fb0:	streq	r5, [r0]
   11fb4:	subs	r5, r5, #1
   11fb8:	str	r5, [r0]
   11fbc:	ldrb	r6, [r0, #4]
   11fc0:	orr	r2, r6, r2, lsl r5
   11fc4:	strb	r2, [r0, #4]
   11fc8:	bne	11fe4 <__assert_fail@plt+0xf5c>
   11fcc:	strb	r2, [r3], #1
   11fd0:	strb	lr, [r0, #4]
   11fd4:	ldr	r2, [ip]
   11fd8:	add	r2, r2, #1
   11fdc:	str	r2, [ip]
   11fe0:	str	lr, [r0]
   11fe4:	rsb	r2, r4, #0
   11fe8:	cmp	r4, #0
   11fec:	bne	11f60 <__assert_fail@plt+0xed8>
   11ff0:	mov	r0, #1
   11ff4:	pop	{r4, r5, r6, sl, fp, pc}
   11ff8:	ldr	r0, [r0]
   11ffc:	clz	r0, r0
   12000:	lsr	r0, r0, #5
   12004:	pop	{r4, r5, r6, sl, fp, pc}
   12008:	push	{r4, sl, fp, lr}
   1200c:	add	fp, sp, #8
   12010:	cmp	r1, #0
   12014:	popeq	{r4, sl, fp, pc}
   12018:	mov	lr, #24
   1201c:	mov	ip, #48	; 0x30
   12020:	ldrb	r3, [r0], #1
   12024:	subs	r1, r1, #1
   12028:	mov	r4, r3
   1202c:	bfi	r4, lr, #1, #31
   12030:	strb	r4, [r2]
   12034:	orr	r4, ip, r3, lsr #7
   12038:	strb	r4, [r2, #7]
   1203c:	lsr	r4, r3, #1
   12040:	bfi	r4, lr, #1, #31
   12044:	strb	r4, [r2, #1]
   12048:	lsr	r4, r3, #2
   1204c:	bfi	r4, lr, #1, #31
   12050:	strb	r4, [r2, #2]
   12054:	lsr	r4, r3, #3
   12058:	bfi	r4, lr, #1, #31
   1205c:	strb	r4, [r2, #3]
   12060:	lsr	r4, r3, #4
   12064:	bfi	r4, lr, #1, #31
   12068:	strb	r4, [r2, #4]
   1206c:	lsr	r4, r3, #5
   12070:	lsr	r3, r3, #6
   12074:	bfi	r4, lr, #1, #31
   12078:	bfi	r3, lr, #1, #31
   1207c:	strb	r4, [r2, #5]
   12080:	strb	r3, [r2, #6]
   12084:	add	r2, r2, #8
   12088:	bne	12020 <__assert_fail@plt+0xf98>
   1208c:	pop	{r4, sl, fp, pc}
   12090:	push	{r4, r5, r6, sl, fp, lr}
   12094:	add	fp, sp, #16
   12098:	ldr	ip, [fp, #8]
   1209c:	mov	lr, #0
   120a0:	cmp	r2, #0
   120a4:	str	lr, [ip]
   120a8:	beq	1213c <__assert_fail@plt+0x10b4>
   120ac:	add	r1, r1, #1
   120b0:	rsb	r4, r2, #1
   120b4:	ldrb	r2, [r1, #-1]
   120b8:	cmp	r2, #10
   120bc:	bne	120d4 <__assert_fail@plt+0x104c>
   120c0:	add	r4, r4, #1
   120c4:	add	r1, r1, #1
   120c8:	cmp	r4, #1
   120cc:	bne	120b4 <__assert_fail@plt+0x102c>
   120d0:	b	12134 <__assert_fail@plt+0x10ac>
   120d4:	orr	r5, r2, #1
   120d8:	cmp	r5, #49	; 0x31
   120dc:	movne	r0, #0
   120e0:	popne	{r4, r5, r6, sl, fp, pc}
   120e4:	ldr	r5, [r0]
   120e8:	ldrb	r6, [r0, #4]
   120ec:	sub	r2, r2, #49	; 0x31
   120f0:	clz	r2, r2
   120f4:	lsr	r2, r2, #5
   120f8:	orr	r2, r6, r2, lsl r5
   120fc:	add	r5, r5, #1
   12100:	cmp	r5, #8
   12104:	strb	r2, [r0, #4]
   12108:	str	r5, [r0]
   1210c:	bne	12128 <__assert_fail@plt+0x10a0>
   12110:	strb	r2, [r3], #1
   12114:	strb	lr, [r0, #4]
   12118:	ldr	r2, [ip]
   1211c:	add	r2, r2, #1
   12120:	str	r2, [ip]
   12124:	str	lr, [r0]
   12128:	rsb	r2, r4, #0
   1212c:	cmp	r4, #0
   12130:	bne	120ac <__assert_fail@plt+0x1024>
   12134:	mov	r0, #1
   12138:	pop	{r4, r5, r6, sl, fp, pc}
   1213c:	ldr	r0, [r0]
   12140:	clz	r0, r0
   12144:	lsr	r0, r0, #5
   12148:	pop	{r4, r5, r6, sl, fp, pc}
   1214c:	add	r0, r0, r0, lsl #2
   12150:	asr	r1, r0, #31
   12154:	add	r0, r0, r1, lsr #30
   12158:	asr	r0, r0, #2
   1215c:	bx	lr
   12160:	push	{r4, sl, fp, lr}
   12164:	add	fp, sp, #8
   12168:	mov	r4, r0
   1216c:	bl	13910 <__assert_fail@plt+0x2888>
   12170:	mov	r1, r0
   12174:	mov	r0, #1
   12178:	cmp	r1, #0
   1217c:	popne	{r4, sl, fp, pc}
   12180:	movw	r0, #37065	; 0x90c9
   12184:	mov	r1, r4
   12188:	mov	r2, #24
   1218c:	movt	r0, #1
   12190:	bl	10fec <memchr@plt>
   12194:	cmp	r0, #0
   12198:	movwne	r0, #1
   1219c:	pop	{r4, sl, fp, pc}
   121a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121a4:	add	fp, sp, #28
   121a8:	sub	sp, sp, #20
   121ac:	cmp	r1, #0
   121b0:	beq	1236c <__assert_fail@plt+0x12e4>
   121b4:	mov	r8, r3
   121b8:	mov	r4, r2
   121bc:	mov	r6, r1
   121c0:	mov	r9, #0
   121c4:	add	r3, sp, #16
   121c8:	mov	r2, #0
   121cc:	ldrb	r1, [r0], #1
   121d0:	sub	r6, r6, #1
   121d4:	strb	r1, [r3, r2]
   121d8:	add	r2, r2, #1
   121dc:	cmp	r2, #4
   121e0:	bne	1235c <__assert_fail@plt+0x12d4>
   121e4:	str	r0, [sp, #12]
   121e8:	ldr	r0, [sp, #16]
   121ec:	mov	r1, #0
   121f0:	mov	r2, #85	; 0x55
   121f4:	mov	r3, #0
   121f8:	rev	r7, r0
   121fc:	mov	r0, r7
   12200:	bl	1862c <__assert_fail@plt+0x75a4>
   12204:	mov	r5, r0
   12208:	add	r0, r9, #4
   1220c:	mov	sl, r1
   12210:	cmp	r0, r8
   12214:	bge	12230 <__assert_fail@plt+0x11a8>
   12218:	mov	r0, #85	; 0x55
   1221c:	movw	r1, #37578	; 0x92ca
   12220:	mls	r0, r5, r0, r7
   12224:	movt	r1, #1
   12228:	ldrb	r0, [r1, r0]
   1222c:	strb	r0, [r4, #4]
   12230:	mov	r0, r7
   12234:	mov	r1, #0
   12238:	movw	r2, #7225	; 0x1c39
   1223c:	mov	r3, #0
   12240:	bl	1862c <__assert_fail@plt+0x75a4>
   12244:	str	r0, [sp, #4]
   12248:	add	r0, r9, #3
   1224c:	str	r1, [sp]
   12250:	cmp	r0, r8
   12254:	bge	1227c <__assert_fail@plt+0x11f4>
   12258:	mov	r0, r5
   1225c:	mov	r1, sl
   12260:	mov	r2, #85	; 0x55
   12264:	mov	r3, #0
   12268:	bl	1862c <__assert_fail@plt+0x75a4>
   1226c:	movw	r0, #37578	; 0x92ca
   12270:	movt	r0, #1
   12274:	ldrb	r0, [r0, r2]
   12278:	strb	r0, [r4, #3]
   1227c:	movw	r2, #24301	; 0x5eed
   12280:	mov	r0, r7
   12284:	mov	r1, #0
   12288:	mov	r3, #0
   1228c:	movt	r2, #9
   12290:	bl	1862c <__assert_fail@plt+0x75a4>
   12294:	mov	sl, r0
   12298:	add	r0, r9, #2
   1229c:	str	r1, [sp, #8]
   122a0:	cmp	r0, r8
   122a4:	bge	122cc <__assert_fail@plt+0x1244>
   122a8:	ldr	r0, [sp, #4]
   122ac:	ldr	r1, [sp]
   122b0:	mov	r2, #85	; 0x55
   122b4:	mov	r3, #0
   122b8:	bl	1862c <__assert_fail@plt+0x75a4>
   122bc:	movw	r0, #37578	; 0x92ca
   122c0:	movt	r0, #1
   122c4:	ldrb	r0, [r0, r2]
   122c8:	strb	r0, [r4, #2]
   122cc:	movw	r2, #33969	; 0x84b1
   122d0:	mov	r0, r7
   122d4:	mov	r1, #0
   122d8:	mov	r3, #0
   122dc:	movt	r2, #796	; 0x31c
   122e0:	bl	1862c <__assert_fail@plt+0x75a4>
   122e4:	mov	r5, r0
   122e8:	add	r0, r9, #1
   122ec:	mov	r7, r1
   122f0:	cmp	r0, r8
   122f4:	bge	1231c <__assert_fail@plt+0x1294>
   122f8:	ldr	r1, [sp, #8]
   122fc:	mov	r0, sl
   12300:	mov	r2, #85	; 0x55
   12304:	mov	r3, #0
   12308:	bl	1862c <__assert_fail@plt+0x75a4>
   1230c:	movw	r0, #37578	; 0x92ca
   12310:	movt	r0, #1
   12314:	ldrb	r0, [r0, r2]
   12318:	strb	r0, [r4, #1]
   1231c:	cmp	r9, r8
   12320:	bge	12348 <__assert_fail@plt+0x12c0>
   12324:	mov	r0, r5
   12328:	mov	r1, r7
   1232c:	mov	r2, #85	; 0x55
   12330:	mov	r3, #0
   12334:	bl	1862c <__assert_fail@plt+0x75a4>
   12338:	movw	r0, #37578	; 0x92ca
   1233c:	movt	r0, #1
   12340:	ldrb	r0, [r0, r2]
   12344:	strb	r0, [r4]
   12348:	ldr	r0, [sp, #12]
   1234c:	add	r9, r9, #5
   12350:	add	r4, r4, #5
   12354:	mov	r2, #0
   12358:	add	r3, sp, #16
   1235c:	cmp	r6, #0
   12360:	bne	121cc <__assert_fail@plt+0x1144>
   12364:	cmp	r2, #0
   12368:	bne	12374 <__assert_fail@plt+0x12ec>
   1236c:	sub	sp, fp, #28
   12370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12374:	movw	r1, #37089	; 0x90e1
   12378:	mov	r0, #0
   1237c:	mov	r2, #5
   12380:	movt	r1, #1
   12384:	bl	10ec0 <dcgettext@plt>
   12388:	mov	r2, r0
   1238c:	mov	r0, #1
   12390:	mov	r1, #0
   12394:	bl	10f2c <error@plt>
   12398:	push	{r4, sl, fp, lr}
   1239c:	add	fp, sp, #8
   123a0:	mov	r4, r0
   123a4:	movw	r0, #4200	; 0x1068
   123a8:	str	r0, [r4, #20]
   123ac:	movw	r0, #4200	; 0x1068
   123b0:	bl	16394 <__assert_fail@plt+0x530c>
   123b4:	str	r0, [r4, #16]
   123b8:	mov	r1, #1
   123bc:	mov	r0, #0
   123c0:	str	r1, [r4]
   123c4:	str	r0, [r4, #4]
   123c8:	pop	{r4, sl, fp, pc}
   123cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123d0:	add	fp, sp, #28
   123d4:	ldr	lr, [fp, #8]
   123d8:	mov	ip, #0
   123dc:	cmp	r2, #0
   123e0:	str	ip, [lr]
   123e4:	beq	12508 <__assert_fail@plt+0x1480>
   123e8:	movw	r9, #37663	; 0x931f
   123ec:	movw	r8, #33969	; 0x84b1
   123f0:	movt	r9, #1
   123f4:	movt	r8, #796	; 0x31c
   123f8:	add	r1, r1, #1
   123fc:	rsb	r6, r2, #1
   12400:	ldrb	r2, [r1, #-1]
   12404:	cmp	r2, #10
   12408:	bne	12420 <__assert_fail@plt+0x1398>
   1240c:	add	r6, r6, #1
   12410:	add	r1, r1, #1
   12414:	cmp	r6, #1
   12418:	bne	12400 <__assert_fail@plt+0x1378>
   1241c:	b	124f4 <__assert_fail@plt+0x146c>
   12420:	sub	r7, r2, #33	; 0x21
   12424:	mov	ip, #0
   12428:	uxtb	r7, r7
   1242c:	cmp	r7, #92	; 0x5c
   12430:	bhi	12500 <__assert_fail@plt+0x1478>
   12434:	add	r2, r9, r2
   12438:	ldrsb	r2, [r2, #-33]	; 0xffffffdf
   1243c:	cmp	r2, #0
   12440:	blt	12500 <__assert_fail@plt+0x1478>
   12444:	mov	r4, r0
   12448:	ldr	r5, [r4, #4]!
   1244c:	add	ip, r5, #1
   12450:	mov	r7, r4
   12454:	str	ip, [r7], r5
   12458:	strb	r2, [r7, #4]
   1245c:	ldr	r7, [r4]
   12460:	cmp	r7, #5
   12464:	bne	124e4 <__assert_fail@plt+0x145c>
   12468:	ldrb	r2, [r0, #9]
   1246c:	ldrb	r7, [r0, #10]
   12470:	movw	r4, #24301	; 0x5eed
   12474:	ldrb	r5, [r0, #11]
   12478:	ldrb	sl, [r0, #8]
   1247c:	mov	ip, #0
   12480:	movt	r4, #9
   12484:	mul	r2, r2, r4
   12488:	movw	r4, #7225	; 0x1c39
   1248c:	smlabb	r2, r7, r4, r2
   12490:	mov	r7, #85	; 0x55
   12494:	smlabb	r2, r5, r7, r2
   12498:	ldrb	r7, [r0, #12]
   1249c:	mov	r5, #0
   124a0:	add	r2, r2, r7
   124a4:	umlal	r2, r5, sl, r8
   124a8:	tst	r5, #7
   124ac:	bne	12500 <__assert_fail@plt+0x1478>
   124b0:	lsr	r7, r2, #16
   124b4:	strb	r2, [r3, #3]
   124b8:	strb	r7, [r3, #1]
   124bc:	lsr	r7, r2, #24
   124c0:	lsr	r2, r2, #8
   124c4:	strb	r7, [r3]
   124c8:	strb	r2, [r3, #2]
   124cc:	mov	r7, #0
   124d0:	add	r3, r3, #4
   124d4:	ldr	r2, [lr]
   124d8:	add	r2, r2, #4
   124dc:	str	r2, [lr]
   124e0:	str	r7, [r0, #4]
   124e4:	rsb	r2, r6, #0
   124e8:	cmp	r6, #0
   124ec:	bne	123f8 <__assert_fail@plt+0x1370>
   124f0:	b	124f8 <__assert_fail@plt+0x1470>
   124f4:	ldr	r7, [r0, #4]
   124f8:	mov	ip, #1
   124fc:	str	r7, [r0]
   12500:	mov	r0, ip
   12504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12508:	ldr	r0, [r0, #4]
   1250c:	cmp	r0, #1
   12510:	movwlt	ip, #1
   12514:	mov	r0, ip
   12518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1251c:	push	{fp, lr}
   12520:	mov	fp, sp
   12524:	sub	sp, sp, #48	; 0x30
   12528:	mov	r8, r0
   1252c:	movw	r0, #41304	; 0xa158
   12530:	str	r2, [sp, #16]
   12534:	stmib	sp, {r1, r3}
   12538:	movt	r0, #2
   1253c:	ldr	r1, [r0]
   12540:	movw	r0, #4200	; 0x1068
   12544:	blx	r1
   12548:	bl	16364 <__assert_fail@plt+0x52dc>
   1254c:	mov	r4, r0
   12550:	movw	r0, #4200	; 0x1068
   12554:	bl	16364 <__assert_fail@plt+0x52dc>
   12558:	mov	r9, r0
   1255c:	movw	r0, #41316	; 0xa164
   12560:	mov	sl, #0
   12564:	movt	r0, #2
   12568:	str	sl, [sp, #40]	; 0x28
   1256c:	ldr	r1, [r0]
   12570:	add	r0, sp, #24
   12574:	blx	r1
   12578:	str	r8, [sp, #12]
   1257c:	movw	r0, #41304	; 0xa158
   12580:	movt	r0, #2
   12584:	ldr	r1, [r0]
   12588:	movw	r0, #4200	; 0x1068
   1258c:	blx	r1
   12590:	add	r5, r4, sl
   12594:	sub	r2, r0, sl
   12598:	mov	r1, #1
   1259c:	mov	r3, r8
   125a0:	mov	r0, r5
   125a4:	bl	11064 <fread_unlocked@plt>
   125a8:	mov	r8, r0
   125ac:	cmp	r0, #1
   125b0:	blt	12624 <__assert_fail@plt+0x159c>
   125b4:	ldr	r0, [sp, #8]
   125b8:	cmp	r0, #0
   125bc:	beq	12624 <__assert_fail@plt+0x159c>
   125c0:	mov	r6, #0
   125c4:	movw	r1, #41308	; 0xa15c
   125c8:	add	r7, r6, sl
   125cc:	movt	r1, #2
   125d0:	ldrb	r0, [r4, r7]
   125d4:	ldr	r1, [r1]
   125d8:	blx	r1
   125dc:	cmp	r0, #0
   125e0:	bne	125f0 <__assert_fail@plt+0x1568>
   125e4:	ldrb	r0, [r4, r7]
   125e8:	cmp	r0, #61	; 0x3d
   125ec:	bne	12608 <__assert_fail@plt+0x1580>
   125f0:	add	r6, r6, #1
   125f4:	cmp	r8, #1
   125f8:	blt	12624 <__assert_fail@plt+0x159c>
   125fc:	cmp	r6, r8
   12600:	blt	125c4 <__assert_fail@plt+0x153c>
   12604:	b	12624 <__assert_fail@plt+0x159c>
   12608:	sub	r8, r8, #1
   1260c:	add	r0, r5, r6
   12610:	sub	r2, r8, r6
   12614:	add	r1, r0, #1
   12618:	bl	10e6c <memmove@plt>
   1261c:	cmp	r8, #1
   12620:	bge	125fc <__assert_fail@plt+0x1574>
   12624:	ldr	r0, [sp, #12]
   12628:	ldrb	r0, [r0]
   1262c:	tst	r0, #32
   12630:	bne	12768 <__assert_fail@plt+0x16e0>
   12634:	movw	r0, #41304	; 0xa158
   12638:	add	sl, r8, sl
   1263c:	movt	r0, #2
   12640:	ldr	r1, [r0]
   12644:	movw	r0, #4200	; 0x1068
   12648:	blx	r1
   1264c:	ldr	r8, [sp, #12]
   12650:	cmp	sl, r0
   12654:	bge	12664 <__assert_fail@plt+0x15dc>
   12658:	ldrb	r0, [r8]
   1265c:	tst	r0, #16
   12660:	beq	1257c <__assert_fail@plt+0x14f4>
   12664:	mov	r6, #0
   12668:	mov	r5, #0
   1266c:	movw	r0, #4200	; 0x1068
   12670:	cmp	r6, #0
   12674:	mov	r2, #0
   12678:	mov	r1, r4
   1267c:	mov	r3, r9
   12680:	str	r0, [sp, #20]
   12684:	movw	r0, #41320	; 0xa168
   12688:	moveq	r2, sl
   1268c:	movt	r0, #2
   12690:	ldr	r7, [r0]
   12694:	add	r0, sp, #20
   12698:	str	r0, [sp]
   1269c:	add	r0, sp, #24
   126a0:	blx	r7
   126a4:	ldr	r2, [sp, #20]
   126a8:	ldr	r3, [sp, #16]
   126ac:	mov	r7, r0
   126b0:	mov	r0, r9
   126b4:	mov	r1, #1
   126b8:	bl	10ea8 <fwrite_unlocked@plt>
   126bc:	ldr	r1, [sp, #20]
   126c0:	cmp	r0, r1
   126c4:	bcc	12718 <__assert_fail@plt+0x1690>
   126c8:	cmp	r7, #0
   126cc:	beq	12744 <__assert_fail@plt+0x16bc>
   126d0:	ldr	r0, [r8]
   126d4:	mov	r2, #2
   126d8:	add	r1, r5, #1
   126dc:	ands	r0, r0, #16
   126e0:	movweq	r2, #1
   126e4:	cmp	r1, r2
   126e8:	bcs	12700 <__assert_fail@plt+0x1678>
   126ec:	ldr	r2, [sp, #24]
   126f0:	sub	r6, r6, #1
   126f4:	orrs	r2, r5, r2
   126f8:	mov	r5, r1
   126fc:	bne	1266c <__assert_fail@plt+0x15e4>
   12700:	mov	sl, #0
   12704:	cmp	r0, #0
   12708:	beq	1257c <__assert_fail@plt+0x14f4>
   1270c:	ldr	r1, [sp, #4]
   12710:	mov	r0, r8
   12714:	bl	129ec <__assert_fail@plt+0x1964>
   12718:	bl	10fa4 <__errno_location@plt>
   1271c:	ldr	r4, [r0]
   12720:	movw	r1, #37156	; 0x9124
   12724:	movt	r1, #1
   12728:	mov	r0, #0
   1272c:	mov	r2, #5
   12730:	bl	10ec0 <dcgettext@plt>
   12734:	mov	r2, r0
   12738:	mov	r0, #1
   1273c:	mov	r1, r4
   12740:	bl	10f2c <error@plt>
   12744:	movw	r1, #37168	; 0x9130
   12748:	mov	r0, #0
   1274c:	mov	r2, #5
   12750:	movt	r1, #1
   12754:	bl	10ec0 <dcgettext@plt>
   12758:	mov	r2, r0
   1275c:	mov	r0, #1
   12760:	mov	r1, #0
   12764:	bl	10f2c <error@plt>
   12768:	bl	10fa4 <__errno_location@plt>
   1276c:	ldr	r4, [r0]
   12770:	movw	r1, #37145	; 0x9119
   12774:	movt	r1, #1
   12778:	b	12728 <__assert_fail@plt+0x16a0>
   1277c:	push	{fp, lr}
   12780:	mov	fp, sp
   12784:	sub	sp, sp, #16
   12788:	mov	r5, r0
   1278c:	mov	r0, #30720	; 0x7800
   12790:	str	r3, [fp, #-4]
   12794:	stm	sp, {r1, r2}
   12798:	bl	16364 <__assert_fail@plt+0x52dc>
   1279c:	mov	r4, r0
   127a0:	movw	r0, #41304	; 0xa158
   127a4:	movt	r0, #2
   127a8:	ldr	r1, [r0]
   127ac:	mov	r0, #30720	; 0x7800
   127b0:	blx	r1
   127b4:	bl	16364 <__assert_fail@plt+0x52dc>
   127b8:	mov	r9, r0
   127bc:	mov	sl, #0
   127c0:	str	r0, [sp, #8]
   127c4:	mov	r6, #0
   127c8:	add	r0, r4, r6
   127cc:	rsb	r2, r6, #30720	; 0x7800
   127d0:	mov	r1, #1
   127d4:	mov	r3, r5
   127d8:	bl	11064 <fread_unlocked@plt>
   127dc:	add	r6, r0, r6
   127e0:	ldr	r0, [r5]
   127e4:	tst	r0, #16
   127e8:	bne	127fc <__assert_fail@plt+0x1774>
   127ec:	cmp	r6, #30720	; 0x7800
   127f0:	bge	127fc <__assert_fail@plt+0x1774>
   127f4:	ands	r0, r0, #32
   127f8:	beq	127c8 <__assert_fail@plt+0x1740>
   127fc:	cmp	r6, #1
   12800:	blt	1292c <__assert_fail@plt+0x18a4>
   12804:	movw	r0, #41312	; 0xa160
   12808:	movt	r0, #2
   1280c:	ldr	r7, [r0]
   12810:	movw	r0, #41304	; 0xa158
   12814:	movt	r0, #2
   12818:	ldr	r1, [r0]
   1281c:	mov	r8, r0
   12820:	mov	r0, r6
   12824:	blx	r1
   12828:	mov	r3, r0
   1282c:	mov	r0, r4
   12830:	mov	r1, r6
   12834:	mov	r2, r9
   12838:	blx	r7
   1283c:	ldr	r1, [r8]
   12840:	mov	r0, r6
   12844:	blx	r1
   12848:	mov	r8, r0
   1284c:	ldr	r0, [fp, #-4]
   12850:	cmp	r0, #0
   12854:	beq	12908 <__assert_fail@plt+0x1880>
   12858:	cmp	r8, #1
   1285c:	blt	1292c <__assert_fail@plt+0x18a4>
   12860:	mov	r7, #0
   12864:	ldr	r0, [fp, #-4]
   12868:	sub	r9, r8, r7
   1286c:	sub	r0, r0, sl
   12870:	cmp	r0, r9
   12874:	movlt	r9, r0
   12878:	cmp	r9, #0
   1287c:	beq	128bc <__assert_fail@plt+0x1834>
   12880:	movw	r1, #41292	; 0xa14c
   12884:	ldr	r0, [sp, #8]
   12888:	mov	r2, r9
   1288c:	movt	r1, #2
   12890:	ldr	r3, [r1]
   12894:	mov	r1, #1
   12898:	add	r0, r0, r7
   1289c:	bl	10ea8 <fwrite_unlocked@plt>
   128a0:	cmp	r0, r9
   128a4:	bcc	12994 <__assert_fail@plt+0x190c>
   128a8:	add	r7, r9, r7
   128ac:	add	sl, r9, sl
   128b0:	cmp	r7, r8
   128b4:	blt	12864 <__assert_fail@plt+0x17dc>
   128b8:	b	1292c <__assert_fail@plt+0x18a4>
   128bc:	ldr	r0, [sp, #4]
   128c0:	ldr	r2, [r0, #20]
   128c4:	ldr	r1, [r0, #24]
   128c8:	cmp	r2, r1
   128cc:	bcs	128f0 <__assert_fail@plt+0x1868>
   128d0:	add	r1, r2, #1
   128d4:	mov	sl, #0
   128d8:	str	r1, [r0, #20]
   128dc:	mov	r0, #10
   128e0:	strb	r0, [r2]
   128e4:	cmp	r7, r8
   128e8:	blt	12864 <__assert_fail@plt+0x17dc>
   128ec:	b	1292c <__assert_fail@plt+0x18a4>
   128f0:	mov	r1, #10
   128f4:	bl	11010 <__overflow@plt>
   128f8:	mov	sl, #0
   128fc:	cmn	r0, #1
   12900:	bne	128e4 <__assert_fail@plt+0x185c>
   12904:	b	12994 <__assert_fail@plt+0x190c>
   12908:	movw	r0, #41292	; 0xa14c
   1290c:	mov	r1, #1
   12910:	mov	r2, r8
   12914:	movt	r0, #2
   12918:	ldr	r3, [r0]
   1291c:	mov	r0, r9
   12920:	bl	10ea8 <fwrite_unlocked@plt>
   12924:	cmp	r0, r8
   12928:	bcc	12994 <__assert_fail@plt+0x190c>
   1292c:	ldr	r0, [r5]
   12930:	ldr	r9, [sp, #8]
   12934:	tst	r0, #16
   12938:	cmpeq	r6, #30720	; 0x7800
   1293c:	bne	12948 <__assert_fail@plt+0x18c0>
   12940:	ands	r0, r0, #32
   12944:	beq	127c4 <__assert_fail@plt+0x173c>
   12948:	ldr	r0, [fp, #-4]
   1294c:	cmp	r0, #0
   12950:	beq	129a8 <__assert_fail@plt+0x1920>
   12954:	cmp	sl, #1
   12958:	blt	129a8 <__assert_fail@plt+0x1920>
   1295c:	ldr	r0, [sp, #4]
   12960:	ldr	r2, [r0, #20]
   12964:	ldr	r1, [r0, #24]
   12968:	cmp	r2, r1
   1296c:	bcs	12984 <__assert_fail@plt+0x18fc>
   12970:	add	r1, r2, #1
   12974:	str	r1, [r0, #20]
   12978:	mov	r1, #10
   1297c:	strb	r1, [r2]
   12980:	b	129a8 <__assert_fail@plt+0x1920>
   12984:	mov	r1, #10
   12988:	bl	11010 <__overflow@plt>
   1298c:	cmn	r0, #1
   12990:	bne	129a8 <__assert_fail@plt+0x1920>
   12994:	bl	10fa4 <__errno_location@plt>
   12998:	ldr	r4, [r0]
   1299c:	movw	r1, #37156	; 0x9124
   129a0:	movt	r1, #1
   129a4:	b	129d0 <__assert_fail@plt+0x1948>
   129a8:	ldrb	r0, [r5]
   129ac:	tst	r0, #32
   129b0:	bne	129c0 <__assert_fail@plt+0x1938>
   129b4:	ldr	r1, [sp]
   129b8:	mov	r0, r5
   129bc:	bl	129ec <__assert_fail@plt+0x1964>
   129c0:	bl	10fa4 <__errno_location@plt>
   129c4:	ldr	r4, [r0]
   129c8:	movw	r1, #37145	; 0x9119
   129cc:	movt	r1, #1
   129d0:	mov	r0, #0
   129d4:	mov	r2, #5
   129d8:	bl	10ec0 <dcgettext@plt>
   129dc:	mov	r2, r0
   129e0:	mov	r0, #1
   129e4:	mov	r1, r4
   129e8:	bl	10f2c <error@plt>
   129ec:	push	{fp, lr}
   129f0:	mov	fp, sp
   129f4:	mov	r5, r1
   129f8:	bl	13d7c <__assert_fail@plt+0x2cf4>
   129fc:	cmp	r0, #0
   12a00:	bne	12a0c <__assert_fail@plt+0x1984>
   12a04:	mov	r0, #0
   12a08:	bl	10f80 <exit@plt>
   12a0c:	movw	r1, #38625	; 0x96e1
   12a10:	mov	r0, r5
   12a14:	movt	r1, #1
   12a18:	bl	10e48 <strcmp@plt>
   12a1c:	mov	r6, r0
   12a20:	bl	10fa4 <__errno_location@plt>
   12a24:	ldr	r4, [r0]
   12a28:	cmp	r6, #0
   12a2c:	bne	12a54 <__assert_fail@plt+0x19cc>
   12a30:	movw	r1, #37182	; 0x913e
   12a34:	mov	r0, #0
   12a38:	mov	r2, #5
   12a3c:	movt	r1, #1
   12a40:	bl	10ec0 <dcgettext@plt>
   12a44:	mov	r2, r0
   12a48:	mov	r0, #1
   12a4c:	mov	r1, r4
   12a50:	bl	10f2c <error@plt>
   12a54:	mov	r0, #0
   12a58:	mov	r1, #3
   12a5c:	mov	r2, r5
   12a60:	bl	158c8 <__assert_fail@plt+0x4840>
   12a64:	movw	r2, #36300	; 0x8dcc
   12a68:	mov	r3, r0
   12a6c:	mov	r0, #1
   12a70:	mov	r1, r4
   12a74:	movt	r2, #1
   12a78:	bl	10f2c <error@plt>
   12a7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12a80:	add	fp, sp, #24
   12a84:	cmp	r1, #0
   12a88:	cmpne	r3, #0
   12a8c:	bne	12aa4 <__assert_fail@plt+0x1a1c>
   12a90:	cmp	r3, #0
   12a94:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12a98:	mov	r0, #0
   12a9c:	strb	r0, [r2]
   12aa0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12aa4:	movw	lr, #37951	; 0x943f
   12aa8:	add	r0, r0, #2
   12aac:	rsb	ip, r3, #0
   12ab0:	mov	r8, #0
   12ab4:	movt	lr, #1
   12ab8:	ldrb	r3, [r0, #-2]
   12abc:	add	r5, ip, r8
   12ac0:	mov	r4, r2
   12ac4:	cmn	r5, #1
   12ac8:	ldrb	r3, [lr, r3, lsr #3]
   12acc:	strb	r3, [r4, r8]!
   12ad0:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12ad4:	ldrb	r3, [r0, #-2]
   12ad8:	cmp	r1, #1
   12adc:	add	r6, r5, #2
   12ae0:	lsl	r7, r3, #2
   12ae4:	mov	r3, #0
   12ae8:	ldrbne	r3, [r0, #-1]
   12aec:	lsrne	r3, r3, #6
   12af0:	cmp	r6, #0
   12af4:	add	r3, r3, r7
   12af8:	and	r3, r3, #31
   12afc:	ldrb	r3, [lr, r3]
   12b00:	strb	r3, [r4, #1]
   12b04:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12b08:	cmp	r1, #1
   12b0c:	mov	r7, #61	; 0x3d
   12b10:	add	r6, r5, #3
   12b14:	ldrbne	r3, [r0, #-1]
   12b18:	ubfxne	r3, r3, #1, #5
   12b1c:	ldrbne	r7, [lr, r3]
   12b20:	cmp	r6, #0
   12b24:	strb	r7, [r4, #2]
   12b28:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12b2c:	add	r6, r5, #4
   12b30:	cmp	r1, #1
   12b34:	beq	12b60 <__assert_fail@plt+0x1ad8>
   12b38:	ldrb	r3, [r0, #-1]
   12b3c:	subs	r1, r1, #2
   12b40:	lsl	r7, r3, #4
   12b44:	ldrbne	r3, [r0]
   12b48:	lsrne	r3, r3, #4
   12b4c:	moveq	r3, #0
   12b50:	add	r3, r3, r7
   12b54:	and	r3, r3, #31
   12b58:	ldrb	r7, [lr, r3]
   12b5c:	b	12b68 <__assert_fail@plt+0x1ae0>
   12b60:	mov	r7, #61	; 0x3d
   12b64:	mov	r1, #0
   12b68:	cmp	r6, #0
   12b6c:	strb	r7, [r4, #3]
   12b70:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12b74:	add	r6, r5, #5
   12b78:	cmp	r1, #0
   12b7c:	beq	12ba8 <__assert_fail@plt+0x1b20>
   12b80:	ldrb	r3, [r0]
   12b84:	subs	r1, r1, #1
   12b88:	lsl	r7, r3, #1
   12b8c:	ldrbne	r3, [r0, #1]
   12b90:	lsrne	r3, r3, #7
   12b94:	moveq	r3, #0
   12b98:	add	r3, r3, r7
   12b9c:	and	r3, r3, #31
   12ba0:	ldrb	r7, [lr, r3]
   12ba4:	b	12bb0 <__assert_fail@plt+0x1b28>
   12ba8:	mov	r7, #61	; 0x3d
   12bac:	mov	r1, #0
   12bb0:	cmp	r6, #0
   12bb4:	strb	r7, [r4, #4]
   12bb8:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12bbc:	add	r6, r5, #6
   12bc0:	cmp	r1, #0
   12bc4:	beq	12bd8 <__assert_fail@plt+0x1b50>
   12bc8:	ldrb	r3, [r0, #1]
   12bcc:	ubfx	r3, r3, #2, #5
   12bd0:	ldrb	r3, [lr, r3]
   12bd4:	b	12bdc <__assert_fail@plt+0x1b54>
   12bd8:	mov	r3, #61	; 0x3d
   12bdc:	cmp	r6, #0
   12be0:	strb	r3, [r4, #5]
   12be4:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12be8:	add	r7, r5, #7
   12bec:	cmp	r1, #0
   12bf0:	beq	12c1c <__assert_fail@plt+0x1b94>
   12bf4:	subs	r6, r1, #1
   12bf8:	ldrb	r1, [r0, #1]
   12bfc:	ldrbne	r3, [r0, #2]
   12c00:	lsl	r1, r1, #3
   12c04:	lsrne	r3, r3, #5
   12c08:	moveq	r3, #0
   12c0c:	add	r1, r3, r1
   12c10:	and	r1, r1, #31
   12c14:	ldrb	r1, [lr, r1]
   12c18:	b	12c24 <__assert_fail@plt+0x1b9c>
   12c1c:	mov	r1, #61	; 0x3d
   12c20:	mov	r6, #0
   12c24:	cmp	r7, #0
   12c28:	strb	r1, [r4, #6]
   12c2c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12c30:	cmp	r6, #0
   12c34:	beq	12c48 <__assert_fail@plt+0x1bc0>
   12c38:	ldrb	r1, [r0, #2]
   12c3c:	and	r1, r1, #31
   12c40:	ldrb	r1, [lr, r1]
   12c44:	b	12c4c <__assert_fail@plt+0x1bc4>
   12c48:	mov	r1, #61	; 0x3d
   12c4c:	cmn	r5, #8
   12c50:	strb	r1, [r4, #7]
   12c54:	beq	12aa0 <__assert_fail@plt+0x1a18>
   12c58:	subs	r1, r6, #1
   12c5c:	add	r8, r8, #8
   12c60:	addne	r0, r0, #5
   12c64:	cmpne	r6, #0
   12c68:	bne	12ab8 <__assert_fail@plt+0x1a30>
   12c6c:	add	r2, r2, r8
   12c70:	b	12a98 <__assert_fail@plt+0x1a10>
   12c74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12c78:	add	fp, sp, #24
   12c7c:	mov	r8, r0
   12c80:	movw	r0, #26215	; 0x6667
   12c84:	mov	r4, r1
   12c88:	mov	r6, r2
   12c8c:	movt	r0, #26214	; 0x6666
   12c90:	smmul	r0, r1, r0
   12c94:	asr	r1, r0, #1
   12c98:	add	r0, r1, r0, lsr #31
   12c9c:	add	r1, r0, r0, lsl #2
   12ca0:	subs	r1, r4, r1
   12ca4:	addne	r0, r0, #1
   12ca8:	cmn	r0, #1
   12cac:	ble	12cbc <__assert_fail@plt+0x1c34>
   12cb0:	cmn	r0, #-268435455	; 0xf0000001
   12cb4:	ble	12cd0 <__assert_fail@plt+0x1c48>
   12cb8:	b	12d14 <__assert_fail@plt+0x1c8c>
   12cbc:	beq	12cd0 <__assert_fail@plt+0x1c48>
   12cc0:	mov	r1, #-2147483648	; 0x80000000
   12cc4:	sdiv	r1, r1, r0
   12cc8:	cmp	r1, #8
   12ccc:	blt	12d14 <__assert_fail@plt+0x1c8c>
   12cd0:	cmn	r4, #1
   12cd4:	ble	12d14 <__assert_fail@plt+0x1c8c>
   12cd8:	lsl	r7, r0, #3
   12cdc:	orr	r5, r7, #1
   12ce0:	mov	r0, r5
   12ce4:	bl	18274 <__assert_fail@plt+0x71ec>
   12ce8:	cmp	r0, #0
   12cec:	str	r0, [r6]
   12cf0:	moveq	r0, r5
   12cf4:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   12cf8:	mov	r2, r0
   12cfc:	mov	r0, r8
   12d00:	mov	r1, r4
   12d04:	mov	r3, r5
   12d08:	bl	12a7c <__assert_fail@plt+0x19f4>
   12d0c:	mov	r0, r7
   12d10:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d14:	mov	r7, #0
   12d18:	mov	r0, r7
   12d1c:	str	r7, [r6]
   12d20:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12d24:	movw	r1, #37983	; 0x945f
   12d28:	movt	r1, #1
   12d2c:	add	r0, r1, r0
   12d30:	ldrsb	r1, [r0]
   12d34:	mov	r0, #0
   12d38:	cmn	r1, #1
   12d3c:	movwgt	r0, #1
   12d40:	bx	lr
   12d44:	mov	r1, #0
   12d48:	str	r1, [r0]
   12d4c:	bx	lr
   12d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d54:	add	fp, sp, #28
   12d58:	sub	sp, sp, #28
   12d5c:	mov	r6, r2
   12d60:	mov	r2, r0
   12d64:	ldr	r0, [fp, #8]
   12d68:	str	r3, [sp, #24]
   12d6c:	mov	r5, r1
   12d70:	mov	r8, #0
   12d74:	cmp	r2, #0
   12d78:	ldr	r7, [r0]
   12d7c:	mov	r0, #0
   12d80:	str	r7, [sp, #20]
   12d84:	beq	12d9c <__assert_fail@plt+0x1d14>
   12d88:	clz	r0, r6
   12d8c:	lsr	r8, r0, #5
   12d90:	ldr	r0, [r2]
   12d94:	cmp	r0, #0
   12d98:	movwne	r0, #1
   12d9c:	orr	r0, r0, r8
   12da0:	add	sl, sp, #24
   12da4:	add	r4, sp, #20
   12da8:	str	r2, [sp, #16]
   12dac:	str	r0, [sp, #8]
   12db0:	add	r0, r2, #4
   12db4:	str	r0, [sp, #4]
   12db8:	clz	r0, r2
   12dbc:	lsr	r0, r0, #5
   12dc0:	str	r0, [sp, #12]
   12dc4:	b	12dd4 <__assert_fail@plt+0x1d4c>
   12dc8:	ldr	r7, [sp, #20]
   12dcc:	ldr	r2, [sp, #16]
   12dd0:	sub	r6, r9, r5
   12dd4:	ldr	r0, [sp, #8]
   12dd8:	cmp	r0, #0
   12ddc:	beq	12df0 <__assert_fail@plt+0x1d68>
   12de0:	b	12e10 <__assert_fail@plt+0x1d88>
   12de4:	ldr	r7, [sp, #20]
   12de8:	add	r5, r5, #8
   12dec:	sub	r6, r6, #8
   12df0:	mov	r0, r5
   12df4:	mov	r1, r6
   12df8:	mov	r2, sl
   12dfc:	mov	r3, r4
   12e00:	bl	12fb8 <__assert_fail@plt+0x1f30>
   12e04:	cmp	r0, #0
   12e08:	bne	12de4 <__assert_fail@plt+0x1d5c>
   12e0c:	ldr	r2, [sp, #16]
   12e10:	cmp	r6, #0
   12e14:	mov	r0, r6
   12e18:	movwne	r0, #1
   12e1c:	orr	r0, r8, r0
   12e20:	cmp	r0, #1
   12e24:	bne	12f8c <__assert_fail@plt+0x1f04>
   12e28:	cmp	r6, #0
   12e2c:	beq	12e48 <__assert_fail@plt+0x1dc0>
   12e30:	ldrb	r0, [r5]
   12e34:	ldr	r1, [sp, #12]
   12e38:	subs	r0, r0, #10
   12e3c:	movwne	r0, #1
   12e40:	orrs	r0, r0, r1
   12e44:	beq	12f0c <__assert_fail@plt+0x1e84>
   12e48:	ldr	r0, [sp, #20]
   12e4c:	ldr	r1, [sp, #24]
   12e50:	add	r9, r5, r6
   12e54:	cmp	r2, #0
   12e58:	str	r7, [sp, #20]
   12e5c:	sub	r0, r0, r7
   12e60:	add	r0, r1, r0
   12e64:	str	r0, [sp, #24]
   12e68:	beq	12f1c <__assert_fail@plt+0x1e94>
   12e6c:	ldr	r7, [r2]
   12e70:	cmp	r7, #0
   12e74:	beq	12e88 <__assert_fail@plt+0x1e00>
   12e78:	cmp	r7, #8
   12e7c:	bne	12eb4 <__assert_fail@plt+0x1e2c>
   12e80:	mov	r0, #0
   12e84:	str	r0, [r2]
   12e88:	sub	r0, r9, r5
   12e8c:	mov	r7, #0
   12e90:	cmp	r0, #8
   12e94:	blt	12eb4 <__assert_fail@plt+0x1e2c>
   12e98:	mov	r0, r5
   12e9c:	mov	r1, #10
   12ea0:	mov	r2, #8
   12ea4:	bl	10fec <memchr@plt>
   12ea8:	ldr	r2, [sp, #16]
   12eac:	cmp	r0, #0
   12eb0:	beq	12f78 <__assert_fail@plt+0x1ef0>
   12eb4:	cmp	r6, #1
   12eb8:	blt	12f24 <__assert_fail@plt+0x1e9c>
   12ebc:	mov	r6, r7
   12ec0:	mov	r0, r5
   12ec4:	ldrb	r1, [r5], #1
   12ec8:	cmp	r1, #10
   12ecc:	bne	12edc <__assert_fail@plt+0x1e54>
   12ed0:	cmp	r5, r9
   12ed4:	bcc	12ec0 <__assert_fail@plt+0x1e38>
   12ed8:	b	12f04 <__assert_fail@plt+0x1e7c>
   12edc:	add	r7, r6, #1
   12ee0:	mov	r3, r2
   12ee4:	add	r5, r0, #1
   12ee8:	str	r7, [r3], r6
   12eec:	cmp	r5, r9
   12ef0:	strb	r1, [r3, #4]
   12ef4:	ldr	r6, [r2]
   12ef8:	bcs	12f04 <__assert_fail@plt+0x1e7c>
   12efc:	cmp	r6, #8
   12f00:	bne	12ec0 <__assert_fail@plt+0x1e38>
   12f04:	add	r5, r0, #1
   12f08:	b	12f28 <__assert_fail@plt+0x1ea0>
   12f0c:	ldr	r7, [sp, #20]
   12f10:	sub	r6, r6, #1
   12f14:	add	r5, r5, #1
   12f18:	b	12dd4 <__assert_fail@plt+0x1d4c>
   12f1c:	mov	r0, r5
   12f20:	b	12f2c <__assert_fail@plt+0x1ea4>
   12f24:	mov	r6, r7
   12f28:	ldr	r0, [sp, #4]
   12f2c:	mov	r1, #0
   12f30:	cmp	r6, #0
   12f34:	beq	12f90 <__assert_fail@plt+0x1f08>
   12f38:	ldr	r3, [sp, #12]
   12f3c:	cmp	r6, #7
   12f40:	mov	r2, #0
   12f44:	movwgt	r2, #1
   12f48:	orr	r2, r8, r2
   12f4c:	orr	r2, r2, r3
   12f50:	cmp	r2, #1
   12f54:	bne	12f90 <__assert_fail@plt+0x1f08>
   12f58:	mov	r1, r6
   12f5c:	mov	r2, sl
   12f60:	mov	r3, r4
   12f64:	bl	12fb8 <__assert_fail@plt+0x1f30>
   12f68:	cmp	r0, #0
   12f6c:	mov	r1, r6
   12f70:	bne	12dc8 <__assert_fail@plt+0x1d40>
   12f74:	b	12f90 <__assert_fail@plt+0x1f08>
   12f78:	add	r1, r5, #8
   12f7c:	mov	r0, r5
   12f80:	mov	r6, #8
   12f84:	mov	r5, r1
   12f88:	b	12f58 <__assert_fail@plt+0x1ed0>
   12f8c:	mov	r1, r6
   12f90:	ldr	r0, [fp, #8]
   12f94:	ldr	r2, [sp, #20]
   12f98:	mov	r3, r0
   12f9c:	ldr	r0, [r0]
   12fa0:	sub	r0, r0, r2
   12fa4:	str	r0, [r3]
   12fa8:	clz	r0, r1
   12fac:	lsr	r0, r0, #5
   12fb0:	sub	sp, fp, #28
   12fb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fb8:	push	{r4, r5, r6, sl, fp, lr}
   12fbc:	add	fp, sp, #16
   12fc0:	mov	ip, #0
   12fc4:	cmp	r1, #8
   12fc8:	blt	131c0 <__assert_fail@plt+0x2138>
   12fcc:	ldrb	r1, [r0]
   12fd0:	movw	lr, #37983	; 0x945f
   12fd4:	movt	lr, #1
   12fd8:	add	r1, lr, r1
   12fdc:	ldrsb	r4, [r1]
   12fe0:	cmp	r4, #0
   12fe4:	blt	131c0 <__assert_fail@plt+0x2138>
   12fe8:	ldrb	r1, [r0, #1]
   12fec:	add	r1, lr, r1
   12ff0:	ldrsb	r1, [r1]
   12ff4:	cmp	r1, #0
   12ff8:	blt	131c0 <__assert_fail@plt+0x2138>
   12ffc:	ldr	r5, [r3]
   13000:	ldr	ip, [r2]
   13004:	cmp	r5, #0
   13008:	beq	13028 <__assert_fail@plt+0x1fa0>
   1300c:	ubfx	r5, r1, #2, #6
   13010:	orr	r4, r5, r4, lsl #3
   13014:	strb	r4, [ip], #1
   13018:	ldr	r4, [r3]
   1301c:	sub	r5, r4, #1
   13020:	str	r5, [r3]
   13024:	b	1302c <__assert_fail@plt+0x1fa4>
   13028:	mov	r5, #0
   1302c:	ldrb	r4, [r0, #2]
   13030:	cmp	r4, #61	; 0x3d
   13034:	bne	13050 <__assert_fail@plt+0x1fc8>
   13038:	ldrb	r1, [r0, #3]
   1303c:	cmp	r1, #61	; 0x3d
   13040:	ldrbeq	r1, [r0, #4]
   13044:	cmpeq	r1, #61	; 0x3d
   13048:	bne	13118 <__assert_fail@plt+0x2090>
   1304c:	b	130b0 <__assert_fail@plt+0x2028>
   13050:	add	r4, lr, r4
   13054:	ldrsb	r6, [r4]
   13058:	cmp	r6, #0
   1305c:	blt	13118 <__assert_fail@plt+0x2090>
   13060:	ldrb	r4, [r0, #3]
   13064:	add	r4, lr, r4
   13068:	ldrsb	r4, [r4]
   1306c:	cmn	r4, #1
   13070:	ble	13118 <__assert_fail@plt+0x2090>
   13074:	cmp	r5, #0
   13078:	beq	130a0 <__assert_fail@plt+0x2018>
   1307c:	lsl	r5, r6, #1
   13080:	orr	r1, r5, r1, lsl #6
   13084:	and	r5, r4, #240	; 0xf0
   13088:	orr	r1, r1, r5, lsr #4
   1308c:	strb	r1, [ip], #1
   13090:	ldr	r1, [r3]
   13094:	sub	r5, r1, #1
   13098:	str	r5, [r3]
   1309c:	b	130a4 <__assert_fail@plt+0x201c>
   130a0:	mov	r5, #0
   130a4:	ldrb	r1, [r0, #4]
   130a8:	cmp	r1, #61	; 0x3d
   130ac:	bne	130c0 <__assert_fail@plt+0x2038>
   130b0:	ldrb	r1, [r0, #5]
   130b4:	cmp	r1, #61	; 0x3d
   130b8:	beq	13104 <__assert_fail@plt+0x207c>
   130bc:	b	13118 <__assert_fail@plt+0x2090>
   130c0:	add	r1, lr, r1
   130c4:	ldrsb	r1, [r1]
   130c8:	cmn	r1, #1
   130cc:	ble	13118 <__assert_fail@plt+0x2090>
   130d0:	cmp	r5, #0
   130d4:	beq	130f4 <__assert_fail@plt+0x206c>
   130d8:	ubfx	r5, r1, #1, #7
   130dc:	orr	r4, r5, r4, lsl #4
   130e0:	strb	r4, [ip], #1
   130e4:	ldr	r4, [r3]
   130e8:	sub	r4, r4, #1
   130ec:	str	r4, [r3]
   130f0:	b	130f8 <__assert_fail@plt+0x2070>
   130f4:	mov	r4, #0
   130f8:	ldrb	r5, [r0, #5]
   130fc:	cmp	r5, #61	; 0x3d
   13100:	bne	13128 <__assert_fail@plt+0x20a0>
   13104:	ldrb	r1, [r0, #6]
   13108:	cmp	r1, #61	; 0x3d
   1310c:	ldrbeq	r0, [r0, #7]
   13110:	cmpeq	r0, #61	; 0x3d
   13114:	beq	131b8 <__assert_fail@plt+0x2130>
   13118:	str	ip, [r2]
   1311c:	mov	ip, #0
   13120:	mov	r0, ip
   13124:	pop	{r4, r5, r6, sl, fp, pc}
   13128:	add	r5, lr, r5
   1312c:	ldrsb	r5, [r5]
   13130:	cmp	r5, #0
   13134:	blt	13118 <__assert_fail@plt+0x2090>
   13138:	ldrb	r6, [r0, #6]
   1313c:	add	r6, lr, r6
   13140:	ldrsb	r6, [r6]
   13144:	cmn	r6, #1
   13148:	ble	13118 <__assert_fail@plt+0x2090>
   1314c:	cmp	r4, #0
   13150:	beq	13174 <__assert_fail@plt+0x20ec>
   13154:	ubfx	r4, r6, #3, #5
   13158:	orr	r4, r4, r5, lsl #2
   1315c:	orr	r1, r4, r1, lsl #7
   13160:	strb	r1, [ip], #1
   13164:	ldr	r1, [r3]
   13168:	sub	r1, r1, #1
   1316c:	str	r1, [r3]
   13170:	b	13178 <__assert_fail@plt+0x20f0>
   13174:	mov	r1, #0
   13178:	ldrb	r4, [r0, #7]
   1317c:	cmp	r4, #61	; 0x3d
   13180:	beq	131b8 <__assert_fail@plt+0x2130>
   13184:	add	r4, lr, r4
   13188:	ldrsb	r4, [r4]
   1318c:	cmn	r4, #1
   13190:	ble	13118 <__assert_fail@plt+0x2090>
   13194:	cmp	r1, #0
   13198:	beq	131b8 <__assert_fail@plt+0x2130>
   1319c:	ldrb	r0, [r0, #6]
   131a0:	ldrb	r0, [lr, r0]
   131a4:	orr	r0, r4, r0, lsl #5
   131a8:	strb	r0, [ip], #1
   131ac:	ldr	r0, [r3]
   131b0:	sub	r0, r0, #1
   131b4:	str	r0, [r3]
   131b8:	str	ip, [r2]
   131bc:	mov	ip, #1
   131c0:	mov	r0, ip
   131c4:	pop	{r4, r5, r6, sl, fp, pc}
   131c8:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   131cc:	add	fp, sp, #24
   131d0:	sub	sp, sp, #8
   131d4:	mov	r7, r0
   131d8:	asr	r0, r2, #3
   131dc:	mov	r4, r3
   131e0:	mov	r6, r2
   131e4:	mov	r8, r1
   131e8:	add	r0, r0, r0, lsl #2
   131ec:	add	r0, r0, #5
   131f0:	str	r0, [sp, #4]
   131f4:	bl	18274 <__assert_fail@plt+0x71ec>
   131f8:	mov	r5, #1
   131fc:	cmp	r0, #0
   13200:	str	r0, [r4]
   13204:	beq	13250 <__assert_fail@plt+0x21c8>
   13208:	mov	r3, r0
   1320c:	add	r0, sp, #4
   13210:	mov	r1, r8
   13214:	mov	r2, r6
   13218:	str	r0, [sp]
   1321c:	mov	r0, r7
   13220:	bl	12d50 <__assert_fail@plt+0x1cc8>
   13224:	cmp	r0, #0
   13228:	beq	13240 <__assert_fail@plt+0x21b8>
   1322c:	ldr	r0, [fp, #8]
   13230:	cmp	r0, #0
   13234:	ldrne	r1, [sp, #4]
   13238:	strne	r1, [r0]
   1323c:	b	13250 <__assert_fail@plt+0x21c8>
   13240:	ldr	r0, [r4]
   13244:	bl	13e74 <__assert_fail@plt+0x2dec>
   13248:	mov	r5, #0
   1324c:	str	r5, [r4]
   13250:	mov	r0, r5
   13254:	sub	sp, fp, #24
   13258:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1325c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13260:	add	fp, sp, #24
   13264:	tst	r3, #3
   13268:	bne	132e0 <__assert_fail@plt+0x2258>
   1326c:	asr	r7, r3, #2
   13270:	add	r7, r7, r7, lsl #1
   13274:	cmp	r7, r1
   13278:	bne	132e0 <__assert_fail@plt+0x2258>
   1327c:	cmp	r1, #0
   13280:	beq	132fc <__assert_fail@plt+0x2274>
   13284:	movw	r3, #38239	; 0x955f
   13288:	movt	r3, #1
   1328c:	ldrb	r7, [r0]
   13290:	subs	r1, r1, #3
   13294:	ldrb	r6, [r3, r7, lsr #2]
   13298:	strb	r6, [r2]
   1329c:	ldrb	r6, [r0, #1]
   132a0:	lsr	r5, r6, #4
   132a4:	bfi	r5, r7, #4, #2
   132a8:	ldrb	r7, [r3, r5]
   132ac:	strb	r7, [r2, #1]
   132b0:	ldrb	r7, [r0, #2]
   132b4:	add	r0, r0, #3
   132b8:	and	r5, r7, #63	; 0x3f
   132bc:	lsr	r7, r7, #6
   132c0:	bfi	r7, r6, #2, #4
   132c4:	ldrb	r5, [r3, r5]
   132c8:	ldrb	r7, [r3, r7]
   132cc:	strb	r5, [r2, #3]
   132d0:	strb	r7, [r2, #2]
   132d4:	add	r2, r2, #4
   132d8:	bne	1328c <__assert_fail@plt+0x2204>
   132dc:	b	132fc <__assert_fail@plt+0x2274>
   132e0:	cmp	r1, #0
   132e4:	cmpne	r3, #0
   132e8:	bne	13300 <__assert_fail@plt+0x2278>
   132ec:	cmp	r3, #0
   132f0:	beq	132fc <__assert_fail@plt+0x2274>
   132f4:	mov	r0, #0
   132f8:	strb	r0, [r2]
   132fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13300:	movw	r6, #38239	; 0x955f
   13304:	add	r0, r0, #1
   13308:	sub	ip, r3, #3
   1330c:	sub	lr, r3, #2
   13310:	sub	r9, r3, #1
   13314:	sub	r8, r3, #4
   13318:	mov	r3, #0
   1331c:	movt	r6, #1
   13320:	ldrb	r4, [r0, #-1]
   13324:	mov	r7, r2
   13328:	cmp	r9, r3
   1332c:	ldrb	r4, [r6, r4, lsr #2]
   13330:	strb	r4, [r7, r3]!
   13334:	beq	132fc <__assert_fail@plt+0x2274>
   13338:	ldrb	r4, [r0, #-1]
   1333c:	cmp	r1, #1
   13340:	lsl	r5, r4, #4
   13344:	mov	r4, #0
   13348:	ldrbne	r4, [r0]
   1334c:	lsrne	r4, r4, #4
   13350:	cmp	lr, r3
   13354:	add	r4, r4, r5
   13358:	and	r4, r4, #63	; 0x3f
   1335c:	ldrb	r4, [r6, r4]
   13360:	strb	r4, [r7, #1]
   13364:	beq	132fc <__assert_fail@plt+0x2274>
   13368:	cmp	r1, #1
   1336c:	beq	13398 <__assert_fail@plt+0x2310>
   13370:	subs	r5, r1, #2
   13374:	ldrb	r1, [r0]
   13378:	ldrbne	r4, [r0, #1]
   1337c:	lsl	r1, r1, #2
   13380:	lsrne	r4, r4, #6
   13384:	moveq	r4, #0
   13388:	add	r1, r4, r1
   1338c:	and	r1, r1, #63	; 0x3f
   13390:	ldrb	r1, [r6, r1]
   13394:	b	133a0 <__assert_fail@plt+0x2318>
   13398:	mov	r1, #61	; 0x3d
   1339c:	mov	r5, #0
   133a0:	cmp	ip, r3
   133a4:	strb	r1, [r7, #2]
   133a8:	popeq	{r4, r5, r6, r7, r8, r9, fp, pc}
   133ac:	cmp	r5, #0
   133b0:	beq	133c4 <__assert_fail@plt+0x233c>
   133b4:	ldrb	r1, [r0, #1]
   133b8:	and	r1, r1, #63	; 0x3f
   133bc:	ldrb	r1, [r6, r1]
   133c0:	b	133c8 <__assert_fail@plt+0x2340>
   133c4:	mov	r1, #61	; 0x3d
   133c8:	cmp	r8, r3
   133cc:	strb	r1, [r7, #3]
   133d0:	beq	132fc <__assert_fail@plt+0x2274>
   133d4:	subs	r1, r5, #1
   133d8:	add	r3, r3, #4
   133dc:	addne	r0, r0, #3
   133e0:	cmpne	r5, #0
   133e4:	bne	13320 <__assert_fail@plt+0x2298>
   133e8:	add	r2, r2, r3
   133ec:	b	132f4 <__assert_fail@plt+0x226c>
   133f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133f4:	add	fp, sp, #24
   133f8:	mov	r8, r0
   133fc:	movw	r0, #21846	; 0x5556
   13400:	mov	r4, r1
   13404:	mov	r6, r2
   13408:	movt	r0, #21845	; 0x5555
   1340c:	smmul	r0, r1, r0
   13410:	add	r0, r0, r0, lsr #31
   13414:	add	r1, r0, r0, lsl #1
   13418:	subs	r1, r4, r1
   1341c:	addne	r0, r0, #1
   13420:	cmn	r0, #1
   13424:	ble	13434 <__assert_fail@plt+0x23ac>
   13428:	cmn	r0, #-536870911	; 0xe0000001
   1342c:	ble	13448 <__assert_fail@plt+0x23c0>
   13430:	b	1348c <__assert_fail@plt+0x2404>
   13434:	beq	13448 <__assert_fail@plt+0x23c0>
   13438:	mov	r1, #-2147483648	; 0x80000000
   1343c:	sdiv	r1, r1, r0
   13440:	cmp	r1, #4
   13444:	blt	1348c <__assert_fail@plt+0x2404>
   13448:	cmn	r4, #1
   1344c:	ble	1348c <__assert_fail@plt+0x2404>
   13450:	lsl	r7, r0, #2
   13454:	orr	r5, r7, #1
   13458:	mov	r0, r5
   1345c:	bl	18274 <__assert_fail@plt+0x71ec>
   13460:	cmp	r0, #0
   13464:	str	r0, [r6]
   13468:	moveq	r0, r5
   1346c:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   13470:	mov	r2, r0
   13474:	mov	r0, r8
   13478:	mov	r1, r4
   1347c:	mov	r3, r5
   13480:	bl	1325c <__assert_fail@plt+0x21d4>
   13484:	mov	r0, r7
   13488:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1348c:	mov	r7, #0
   13490:	mov	r0, r7
   13494:	str	r7, [r6]
   13498:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1349c:	movw	r1, #38303	; 0x959f
   134a0:	movt	r1, #1
   134a4:	add	r0, r1, r0
   134a8:	ldrsb	r1, [r0]
   134ac:	mov	r0, #0
   134b0:	cmn	r1, #1
   134b4:	movwgt	r0, #1
   134b8:	bx	lr
   134bc:	mov	r1, #0
   134c0:	str	r1, [r0]
   134c4:	bx	lr
   134c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134cc:	add	fp, sp, #28
   134d0:	sub	sp, sp, #28
   134d4:	mov	r6, r2
   134d8:	mov	r2, r0
   134dc:	ldr	r0, [fp, #8]
   134e0:	str	r3, [sp, #24]
   134e4:	mov	r5, r1
   134e8:	mov	r8, #0
   134ec:	cmp	r2, #0
   134f0:	ldr	r7, [r0]
   134f4:	mov	r0, #0
   134f8:	str	r7, [sp, #20]
   134fc:	beq	13514 <__assert_fail@plt+0x248c>
   13500:	clz	r0, r6
   13504:	lsr	r8, r0, #5
   13508:	ldr	r0, [r2]
   1350c:	cmp	r0, #0
   13510:	movwne	r0, #1
   13514:	orr	r0, r0, r8
   13518:	add	sl, sp, #24
   1351c:	add	r4, sp, #20
   13520:	str	r2, [sp, #16]
   13524:	str	r0, [sp, #8]
   13528:	add	r0, r2, #4
   1352c:	str	r0, [sp, #4]
   13530:	clz	r0, r2
   13534:	lsr	r0, r0, #5
   13538:	str	r0, [sp, #12]
   1353c:	b	1354c <__assert_fail@plt+0x24c4>
   13540:	ldr	r7, [sp, #20]
   13544:	ldr	r2, [sp, #16]
   13548:	sub	r6, r9, r5
   1354c:	ldr	r0, [sp, #8]
   13550:	cmp	r0, #0
   13554:	beq	13568 <__assert_fail@plt+0x24e0>
   13558:	b	13588 <__assert_fail@plt+0x2500>
   1355c:	ldr	r7, [sp, #20]
   13560:	add	r5, r5, #4
   13564:	sub	r6, r6, #4
   13568:	mov	r0, r5
   1356c:	mov	r1, r6
   13570:	mov	r2, sl
   13574:	mov	r3, r4
   13578:	bl	13730 <__assert_fail@plt+0x26a8>
   1357c:	cmp	r0, #0
   13580:	bne	1355c <__assert_fail@plt+0x24d4>
   13584:	ldr	r2, [sp, #16]
   13588:	cmp	r6, #0
   1358c:	mov	r0, r6
   13590:	movwne	r0, #1
   13594:	orr	r0, r8, r0
   13598:	cmp	r0, #1
   1359c:	bne	13704 <__assert_fail@plt+0x267c>
   135a0:	cmp	r6, #0
   135a4:	beq	135c0 <__assert_fail@plt+0x2538>
   135a8:	ldrb	r0, [r5]
   135ac:	ldr	r1, [sp, #12]
   135b0:	subs	r0, r0, #10
   135b4:	movwne	r0, #1
   135b8:	orrs	r0, r0, r1
   135bc:	beq	13684 <__assert_fail@plt+0x25fc>
   135c0:	ldr	r0, [sp, #20]
   135c4:	ldr	r1, [sp, #24]
   135c8:	add	r9, r5, r6
   135cc:	cmp	r2, #0
   135d0:	str	r7, [sp, #20]
   135d4:	sub	r0, r0, r7
   135d8:	add	r0, r1, r0
   135dc:	str	r0, [sp, #24]
   135e0:	beq	13694 <__assert_fail@plt+0x260c>
   135e4:	ldr	r7, [r2]
   135e8:	cmp	r7, #0
   135ec:	beq	13600 <__assert_fail@plt+0x2578>
   135f0:	cmp	r7, #4
   135f4:	bne	1362c <__assert_fail@plt+0x25a4>
   135f8:	mov	r0, #0
   135fc:	str	r0, [r2]
   13600:	sub	r0, r9, r5
   13604:	mov	r7, #0
   13608:	cmp	r0, #4
   1360c:	blt	1362c <__assert_fail@plt+0x25a4>
   13610:	mov	r0, r5
   13614:	mov	r1, #10
   13618:	mov	r2, #4
   1361c:	bl	10fec <memchr@plt>
   13620:	ldr	r2, [sp, #16]
   13624:	cmp	r0, #0
   13628:	beq	136f0 <__assert_fail@plt+0x2668>
   1362c:	cmp	r6, #1
   13630:	blt	1369c <__assert_fail@plt+0x2614>
   13634:	mov	r6, r7
   13638:	mov	r0, r5
   1363c:	ldrb	r1, [r5], #1
   13640:	cmp	r1, #10
   13644:	bne	13654 <__assert_fail@plt+0x25cc>
   13648:	cmp	r5, r9
   1364c:	bcc	13638 <__assert_fail@plt+0x25b0>
   13650:	b	1367c <__assert_fail@plt+0x25f4>
   13654:	add	r7, r6, #1
   13658:	mov	r3, r2
   1365c:	add	r5, r0, #1
   13660:	str	r7, [r3], r6
   13664:	cmp	r5, r9
   13668:	strb	r1, [r3, #4]
   1366c:	ldr	r6, [r2]
   13670:	bcs	1367c <__assert_fail@plt+0x25f4>
   13674:	cmp	r6, #4
   13678:	bne	13638 <__assert_fail@plt+0x25b0>
   1367c:	add	r5, r0, #1
   13680:	b	136a0 <__assert_fail@plt+0x2618>
   13684:	ldr	r7, [sp, #20]
   13688:	sub	r6, r6, #1
   1368c:	add	r5, r5, #1
   13690:	b	1354c <__assert_fail@plt+0x24c4>
   13694:	mov	r0, r5
   13698:	b	136a4 <__assert_fail@plt+0x261c>
   1369c:	mov	r6, r7
   136a0:	ldr	r0, [sp, #4]
   136a4:	mov	r1, #0
   136a8:	cmp	r6, #0
   136ac:	beq	13708 <__assert_fail@plt+0x2680>
   136b0:	ldr	r3, [sp, #12]
   136b4:	cmp	r6, #3
   136b8:	mov	r2, #0
   136bc:	movwgt	r2, #1
   136c0:	orr	r2, r8, r2
   136c4:	orr	r2, r2, r3
   136c8:	cmp	r2, #1
   136cc:	bne	13708 <__assert_fail@plt+0x2680>
   136d0:	mov	r1, r6
   136d4:	mov	r2, sl
   136d8:	mov	r3, r4
   136dc:	bl	13730 <__assert_fail@plt+0x26a8>
   136e0:	cmp	r0, #0
   136e4:	mov	r1, r6
   136e8:	bne	13540 <__assert_fail@plt+0x24b8>
   136ec:	b	13708 <__assert_fail@plt+0x2680>
   136f0:	add	r1, r5, #4
   136f4:	mov	r0, r5
   136f8:	mov	r6, #4
   136fc:	mov	r5, r1
   13700:	b	136d0 <__assert_fail@plt+0x2648>
   13704:	mov	r1, r6
   13708:	ldr	r0, [fp, #8]
   1370c:	ldr	r2, [sp, #20]
   13710:	mov	r3, r0
   13714:	ldr	r0, [r0]
   13718:	sub	r0, r0, r2
   1371c:	str	r0, [r3]
   13720:	clz	r0, r1
   13724:	lsr	r0, r0, #5
   13728:	sub	sp, fp, #28
   1372c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13730:	push	{r4, r5, r6, sl, fp, lr}
   13734:	add	fp, sp, #16
   13738:	mov	ip, #0
   1373c:	cmp	r1, #2
   13740:	blt	13864 <__assert_fail@plt+0x27dc>
   13744:	ldrb	r4, [r0]
   13748:	movw	lr, #38303	; 0x959f
   1374c:	movt	lr, #1
   13750:	add	r4, lr, r4
   13754:	ldrsb	r5, [r4]
   13758:	cmp	r5, #0
   1375c:	blt	13864 <__assert_fail@plt+0x27dc>
   13760:	ldrb	r4, [r0, #1]
   13764:	add	r4, lr, r4
   13768:	ldrsb	r4, [r4]
   1376c:	cmp	r4, #0
   13770:	blt	13864 <__assert_fail@plt+0x27dc>
   13774:	ldr	r6, [r3]
   13778:	ldr	ip, [r2]
   1377c:	cmp	r6, #0
   13780:	beq	137a8 <__assert_fail@plt+0x2720>
   13784:	ubfx	r6, r4, #4, #4
   13788:	orr	r5, r6, r5, lsl #2
   1378c:	strb	r5, [ip], #1
   13790:	ldr	r5, [r3]
   13794:	sub	r6, r5, #1
   13798:	str	r6, [r3]
   1379c:	cmp	r1, #2
   137a0:	bne	137b4 <__assert_fail@plt+0x272c>
   137a4:	b	1386c <__assert_fail@plt+0x27e4>
   137a8:	mov	r6, #0
   137ac:	cmp	r1, #2
   137b0:	beq	1386c <__assert_fail@plt+0x27e4>
   137b4:	ldrb	r5, [r0, #2]
   137b8:	cmp	r5, #61	; 0x3d
   137bc:	bne	137d4 <__assert_fail@plt+0x274c>
   137c0:	cmp	r1, #4
   137c4:	ldrbeq	r0, [r0, #3]
   137c8:	cmpeq	r0, #61	; 0x3d
   137cc:	bne	1386c <__assert_fail@plt+0x27e4>
   137d0:	b	1385c <__assert_fail@plt+0x27d4>
   137d4:	add	r5, lr, r5
   137d8:	ldrsb	r5, [r5]
   137dc:	cmn	r5, #1
   137e0:	ble	1386c <__assert_fail@plt+0x27e4>
   137e4:	cmp	r6, #0
   137e8:	beq	13810 <__assert_fail@plt+0x2788>
   137ec:	ubfx	r6, r5, #2, #6
   137f0:	orr	r4, r6, r4, lsl #4
   137f4:	strb	r4, [ip], #1
   137f8:	ldr	r4, [r3]
   137fc:	sub	r4, r4, #1
   13800:	str	r4, [r3]
   13804:	cmp	r1, #3
   13808:	bne	1381c <__assert_fail@plt+0x2794>
   1380c:	b	1386c <__assert_fail@plt+0x27e4>
   13810:	mov	r4, #0
   13814:	cmp	r1, #3
   13818:	beq	1386c <__assert_fail@plt+0x27e4>
   1381c:	ldrb	r0, [r0, #3]
   13820:	cmp	r0, #61	; 0x3d
   13824:	bne	13834 <__assert_fail@plt+0x27ac>
   13828:	cmp	r1, #4
   1382c:	beq	1385c <__assert_fail@plt+0x27d4>
   13830:	b	1386c <__assert_fail@plt+0x27e4>
   13834:	add	r0, lr, r0
   13838:	ldrsb	r0, [r0]
   1383c:	cmn	r0, #1
   13840:	ble	1386c <__assert_fail@plt+0x27e4>
   13844:	cmp	r4, #0
   13848:	orrne	r0, r0, r5, lsl #6
   1384c:	strbne	r0, [ip], #1
   13850:	ldrne	r0, [r3]
   13854:	subne	r0, r0, #1
   13858:	strne	r0, [r3]
   1385c:	str	ip, [r2]
   13860:	mov	ip, #1
   13864:	mov	r0, ip
   13868:	pop	{r4, r5, r6, sl, fp, pc}
   1386c:	str	ip, [r2]
   13870:	mov	ip, #0
   13874:	mov	r0, ip
   13878:	pop	{r4, r5, r6, sl, fp, pc}
   1387c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13880:	add	fp, sp, #24
   13884:	sub	sp, sp, #8
   13888:	mov	r7, r0
   1388c:	asr	r0, r2, #2
   13890:	mov	r4, r3
   13894:	mov	r6, r2
   13898:	mov	r8, r1
   1389c:	add	r0, r0, r0, lsl #1
   138a0:	add	r0, r0, #3
   138a4:	str	r0, [sp, #4]
   138a8:	bl	18274 <__assert_fail@plt+0x71ec>
   138ac:	mov	r5, #1
   138b0:	cmp	r0, #0
   138b4:	str	r0, [r4]
   138b8:	beq	13904 <__assert_fail@plt+0x287c>
   138bc:	mov	r3, r0
   138c0:	add	r0, sp, #4
   138c4:	mov	r1, r8
   138c8:	mov	r2, r6
   138cc:	str	r0, [sp]
   138d0:	mov	r0, r7
   138d4:	bl	134c8 <__assert_fail@plt+0x2440>
   138d8:	cmp	r0, #0
   138dc:	beq	138f4 <__assert_fail@plt+0x286c>
   138e0:	ldr	r0, [fp, #8]
   138e4:	cmp	r0, #0
   138e8:	ldrne	r1, [sp, #4]
   138ec:	strne	r1, [r0]
   138f0:	b	13904 <__assert_fail@plt+0x287c>
   138f4:	ldr	r0, [r4]
   138f8:	bl	13e74 <__assert_fail@plt+0x2dec>
   138fc:	mov	r5, #0
   13900:	str	r5, [r4]
   13904:	mov	r0, r5
   13908:	sub	sp, fp, #24
   1390c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13910:	sub	r2, r0, #65	; 0x41
   13914:	mov	r1, r0
   13918:	mov	r0, #1
   1391c:	cmp	r2, #26
   13920:	subcs	r2, r1, #97	; 0x61
   13924:	cmpcs	r2, #26
   13928:	bcs	13930 <__assert_fail@plt+0x28a8>
   1392c:	bx	lr
   13930:	sub	r1, r1, #48	; 0x30
   13934:	cmp	r1, #10
   13938:	movcs	r0, #0
   1393c:	bx	lr
   13940:	sub	r2, r0, #65	; 0x41
   13944:	mov	r1, r0
   13948:	mov	r0, #1
   1394c:	cmp	r2, #26
   13950:	subcs	r1, r1, #97	; 0x61
   13954:	cmpcs	r1, #26
   13958:	movcs	r0, #0
   1395c:	bx	lr
   13960:	mov	r1, #0
   13964:	cmp	r0, #128	; 0x80
   13968:	movwcc	r1, #1
   1396c:	mov	r0, r1
   13970:	bx	lr
   13974:	sub	r1, r0, #9
   13978:	sub	r0, r0, #32
   1397c:	clz	r1, r1
   13980:	clz	r0, r0
   13984:	lsr	r1, r1, #5
   13988:	lsr	r0, r0, #5
   1398c:	orr	r0, r0, r1
   13990:	bx	lr
   13994:	mov	r1, r0
   13998:	mov	r0, #1
   1399c:	cmp	r1, #32
   139a0:	bxcc	lr
   139a4:	cmp	r1, #127	; 0x7f
   139a8:	movne	r0, #0
   139ac:	bx	lr
   139b0:	sub	r1, r0, #48	; 0x30
   139b4:	mov	r0, #0
   139b8:	cmp	r1, #10
   139bc:	movwcc	r0, #1
   139c0:	bx	lr
   139c4:	sub	r1, r0, #33	; 0x21
   139c8:	mov	r0, #0
   139cc:	cmp	r1, #94	; 0x5e
   139d0:	movwcc	r0, #1
   139d4:	bx	lr
   139d8:	sub	r1, r0, #97	; 0x61
   139dc:	mov	r0, #0
   139e0:	cmp	r1, #26
   139e4:	movwcc	r0, #1
   139e8:	bx	lr
   139ec:	sub	r1, r0, #32
   139f0:	mov	r0, #0
   139f4:	cmp	r1, #95	; 0x5f
   139f8:	movwcc	r0, #1
   139fc:	bx	lr
   13a00:	sub	r1, r0, #33	; 0x21
   13a04:	cmp	r1, #93	; 0x5d
   13a08:	bhi	13b94 <__assert_fail@plt+0x2b0c>
   13a0c:	add	r2, pc, #4
   13a10:	mov	r0, #1
   13a14:	ldr	pc, [r2, r1, lsl #2]
   13a18:	muleq	r1, r0, fp
   13a1c:	muleq	r1, r0, fp
   13a20:	muleq	r1, r0, fp
   13a24:	muleq	r1, r0, fp
   13a28:	muleq	r1, r0, fp
   13a2c:	muleq	r1, r0, fp
   13a30:	muleq	r1, r0, fp
   13a34:	muleq	r1, r0, fp
   13a38:	muleq	r1, r0, fp
   13a3c:	muleq	r1, r0, fp
   13a40:	muleq	r1, r0, fp
   13a44:	muleq	r1, r0, fp
   13a48:	muleq	r1, r0, fp
   13a4c:	muleq	r1, r0, fp
   13a50:	muleq	r1, r0, fp
   13a54:	muleq	r1, r4, fp
   13a58:	muleq	r1, r4, fp
   13a5c:	muleq	r1, r4, fp
   13a60:	muleq	r1, r4, fp
   13a64:	muleq	r1, r4, fp
   13a68:	muleq	r1, r4, fp
   13a6c:	muleq	r1, r4, fp
   13a70:	muleq	r1, r4, fp
   13a74:	muleq	r1, r4, fp
   13a78:	muleq	r1, r4, fp
   13a7c:	muleq	r1, r0, fp
   13a80:	muleq	r1, r0, fp
   13a84:	muleq	r1, r0, fp
   13a88:	muleq	r1, r0, fp
   13a8c:	muleq	r1, r0, fp
   13a90:	muleq	r1, r0, fp
   13a94:	muleq	r1, r0, fp
   13a98:	muleq	r1, r4, fp
   13a9c:	muleq	r1, r4, fp
   13aa0:	muleq	r1, r4, fp
   13aa4:	muleq	r1, r4, fp
   13aa8:	muleq	r1, r4, fp
   13aac:	muleq	r1, r4, fp
   13ab0:	muleq	r1, r4, fp
   13ab4:	muleq	r1, r4, fp
   13ab8:	muleq	r1, r4, fp
   13abc:	muleq	r1, r4, fp
   13ac0:	muleq	r1, r4, fp
   13ac4:	muleq	r1, r4, fp
   13ac8:	muleq	r1, r4, fp
   13acc:	muleq	r1, r4, fp
   13ad0:	muleq	r1, r4, fp
   13ad4:	muleq	r1, r4, fp
   13ad8:	muleq	r1, r4, fp
   13adc:	muleq	r1, r4, fp
   13ae0:	muleq	r1, r4, fp
   13ae4:	muleq	r1, r4, fp
   13ae8:	muleq	r1, r4, fp
   13aec:	muleq	r1, r4, fp
   13af0:	muleq	r1, r4, fp
   13af4:	muleq	r1, r4, fp
   13af8:	muleq	r1, r4, fp
   13afc:	muleq	r1, r4, fp
   13b00:	muleq	r1, r0, fp
   13b04:	muleq	r1, r0, fp
   13b08:	muleq	r1, r0, fp
   13b0c:	muleq	r1, r0, fp
   13b10:	muleq	r1, r0, fp
   13b14:	muleq	r1, r0, fp
   13b18:	muleq	r1, r4, fp
   13b1c:	muleq	r1, r4, fp
   13b20:	muleq	r1, r4, fp
   13b24:	muleq	r1, r4, fp
   13b28:	muleq	r1, r4, fp
   13b2c:	muleq	r1, r4, fp
   13b30:	muleq	r1, r4, fp
   13b34:	muleq	r1, r4, fp
   13b38:	muleq	r1, r4, fp
   13b3c:	muleq	r1, r4, fp
   13b40:	muleq	r1, r4, fp
   13b44:	muleq	r1, r4, fp
   13b48:	muleq	r1, r4, fp
   13b4c:	muleq	r1, r4, fp
   13b50:	muleq	r1, r4, fp
   13b54:	muleq	r1, r4, fp
   13b58:	muleq	r1, r4, fp
   13b5c:	muleq	r1, r4, fp
   13b60:	muleq	r1, r4, fp
   13b64:	muleq	r1, r4, fp
   13b68:	muleq	r1, r4, fp
   13b6c:	muleq	r1, r4, fp
   13b70:	muleq	r1, r4, fp
   13b74:	muleq	r1, r4, fp
   13b78:	muleq	r1, r4, fp
   13b7c:	muleq	r1, r4, fp
   13b80:	muleq	r1, r0, fp
   13b84:	muleq	r1, r0, fp
   13b88:	muleq	r1, r0, fp
   13b8c:	muleq	r1, r0, fp
   13b90:	bx	lr
   13b94:	mov	r0, #0
   13b98:	bx	lr
   13b9c:	sub	r0, r0, #9
   13ba0:	cmp	r0, #23
   13ba4:	movhi	r0, #0
   13ba8:	bxhi	lr
   13bac:	movw	r1, #31
   13bb0:	bic	r0, r0, #-16777216	; 0xff000000
   13bb4:	mov	r2, #1
   13bb8:	movt	r1, #128	; 0x80
   13bbc:	and	r0, r2, r1, lsr r0
   13bc0:	bx	lr
   13bc4:	sub	r1, r0, #65	; 0x41
   13bc8:	mov	r0, #0
   13bcc:	cmp	r1, #26
   13bd0:	movwcc	r0, #1
   13bd4:	bx	lr
   13bd8:	sub	r2, r0, #48	; 0x30
   13bdc:	mov	r1, r0
   13be0:	mov	r0, #1
   13be4:	cmp	r2, #22
   13be8:	bhi	13c00 <__assert_fail@plt+0x2b78>
   13bec:	movw	r3, #1023	; 0x3ff
   13bf0:	mov	ip, #1
   13bf4:	movt	r3, #126	; 0x7e
   13bf8:	tst	r3, ip, lsl r2
   13bfc:	bxne	lr
   13c00:	sub	r1, r1, #97	; 0x61
   13c04:	cmp	r1, #6
   13c08:	movcs	r0, #0
   13c0c:	bxcs	lr
   13c10:	bx	lr
   13c14:	sub	r1, r0, #65	; 0x41
   13c18:	cmp	r1, #26
   13c1c:	addcc	r0, r0, #32
   13c20:	bx	lr
   13c24:	sub	r1, r0, #97	; 0x61
   13c28:	cmp	r1, #26
   13c2c:	subcc	r0, r0, #32
   13c30:	bx	lr
   13c34:	movw	r1, #41324	; 0xa16c
   13c38:	movt	r1, #2
   13c3c:	str	r0, [r1]
   13c40:	bx	lr
   13c44:	movw	r1, #41328	; 0xa170
   13c48:	movt	r1, #2
   13c4c:	strb	r0, [r1]
   13c50:	bx	lr
   13c54:	push	{r4, r5, r6, sl, fp, lr}
   13c58:	add	fp, sp, #16
   13c5c:	sub	sp, sp, #8
   13c60:	movw	r0, #41292	; 0xa14c
   13c64:	movt	r0, #2
   13c68:	ldr	r0, [r0]
   13c6c:	bl	182f8 <__assert_fail@plt+0x7270>
   13c70:	cmp	r0, #0
   13c74:	beq	13c9c <__assert_fail@plt+0x2c14>
   13c78:	movw	r0, #41328	; 0xa170
   13c7c:	movt	r0, #2
   13c80:	ldrb	r0, [r0]
   13c84:	cmp	r0, #0
   13c88:	beq	13cbc <__assert_fail@plt+0x2c34>
   13c8c:	bl	10fa4 <__errno_location@plt>
   13c90:	ldr	r0, [r0]
   13c94:	cmp	r0, #32
   13c98:	bne	13cbc <__assert_fail@plt+0x2c34>
   13c9c:	movw	r0, #41280	; 0xa140
   13ca0:	movt	r0, #2
   13ca4:	ldr	r0, [r0]
   13ca8:	bl	182f8 <__assert_fail@plt+0x7270>
   13cac:	cmp	r0, #0
   13cb0:	subeq	sp, fp, #16
   13cb4:	popeq	{r4, r5, r6, sl, fp, pc}
   13cb8:	b	13d2c <__assert_fail@plt+0x2ca4>
   13cbc:	movw	r1, #37156	; 0x9124
   13cc0:	mov	r0, #0
   13cc4:	mov	r2, #5
   13cc8:	movt	r1, #1
   13ccc:	bl	10ec0 <dcgettext@plt>
   13cd0:	mov	r4, r0
   13cd4:	movw	r0, #41324	; 0xa16c
   13cd8:	movt	r0, #2
   13cdc:	ldr	r6, [r0]
   13ce0:	bl	10fa4 <__errno_location@plt>
   13ce4:	ldr	r5, [r0]
   13ce8:	cmp	r6, #0
   13cec:	bne	13d08 <__assert_fail@plt+0x2c80>
   13cf0:	movw	r2, #36300	; 0x8dcc
   13cf4:	mov	r0, #0
   13cf8:	mov	r1, r5
   13cfc:	mov	r3, r4
   13d00:	movt	r2, #1
   13d04:	b	13d28 <__assert_fail@plt+0x2ca0>
   13d08:	mov	r0, r6
   13d0c:	bl	157ec <__assert_fail@plt+0x4764>
   13d10:	movw	r2, #36296	; 0x8dc8
   13d14:	mov	r3, r0
   13d18:	str	r4, [sp]
   13d1c:	mov	r0, #0
   13d20:	mov	r1, r5
   13d24:	movt	r2, #1
   13d28:	bl	10f2c <error@plt>
   13d2c:	movw	r0, #41196	; 0xa0ec
   13d30:	movt	r0, #2
   13d34:	ldr	r0, [r0]
   13d38:	bl	10e84 <_exit@plt>
   13d3c:	b	10e54 <posix_fadvise64@plt>
   13d40:	cmp	r0, #0
   13d44:	bxeq	lr
   13d48:	push	{r4, sl, fp, lr}
   13d4c:	add	fp, sp, #8
   13d50:	sub	sp, sp, #16
   13d54:	mov	r4, r1
   13d58:	bl	10fd4 <fileno@plt>
   13d5c:	mov	r1, #0
   13d60:	mov	r2, #0
   13d64:	mov	r3, #0
   13d68:	str	r1, [sp]
   13d6c:	stmib	sp, {r1, r4}
   13d70:	bl	10e54 <posix_fadvise64@plt>
   13d74:	sub	sp, fp, #8
   13d78:	pop	{r4, sl, fp, pc}
   13d7c:	push	{r4, r5, r6, sl, fp, lr}
   13d80:	add	fp, sp, #16
   13d84:	sub	sp, sp, #8
   13d88:	mov	r4, r0
   13d8c:	bl	10fd4 <fileno@plt>
   13d90:	cmn	r0, #1
   13d94:	ble	13e08 <__assert_fail@plt+0x2d80>
   13d98:	mov	r0, r4
   13d9c:	bl	10f50 <__freading@plt>
   13da0:	cmp	r0, #0
   13da4:	beq	13dd0 <__assert_fail@plt+0x2d48>
   13da8:	mov	r0, r4
   13dac:	bl	10fd4 <fileno@plt>
   13db0:	mov	r1, #1
   13db4:	mov	r2, #0
   13db8:	mov	r3, #0
   13dbc:	str	r1, [sp]
   13dc0:	bl	10efc <lseek64@plt>
   13dc4:	and	r0, r0, r1
   13dc8:	cmn	r0, #1
   13dcc:	beq	13e08 <__assert_fail@plt+0x2d80>
   13dd0:	mov	r0, r4
   13dd4:	bl	13e18 <__assert_fail@plt+0x2d90>
   13dd8:	cmp	r0, #0
   13ddc:	beq	13e08 <__assert_fail@plt+0x2d80>
   13de0:	bl	10fa4 <__errno_location@plt>
   13de4:	ldr	r6, [r0]
   13de8:	mov	r5, r0
   13dec:	mov	r0, r4
   13df0:	bl	10ff8 <fclose@plt>
   13df4:	cmp	r6, #0
   13df8:	strne	r6, [r5]
   13dfc:	mvnne	r0, #0
   13e00:	sub	sp, fp, #16
   13e04:	pop	{r4, r5, r6, sl, fp, pc}
   13e08:	mov	r0, r4
   13e0c:	sub	sp, fp, #16
   13e10:	pop	{r4, r5, r6, sl, fp, lr}
   13e14:	b	10ff8 <fclose@plt>
   13e18:	push	{r4, sl, fp, lr}
   13e1c:	add	fp, sp, #8
   13e20:	sub	sp, sp, #8
   13e24:	mov	r4, r0
   13e28:	cmp	r0, #0
   13e2c:	beq	13e48 <__assert_fail@plt+0x2dc0>
   13e30:	mov	r0, r4
   13e34:	bl	10f50 <__freading@plt>
   13e38:	cmp	r0, #0
   13e3c:	ldrbne	r0, [r4, #1]
   13e40:	tstne	r0, #1
   13e44:	bne	13e58 <__assert_fail@plt+0x2dd0>
   13e48:	mov	r0, r4
   13e4c:	sub	sp, fp, #8
   13e50:	pop	{r4, sl, fp, lr}
   13e54:	b	10e60 <fflush@plt>
   13e58:	mov	r0, #1
   13e5c:	mov	r2, #0
   13e60:	mov	r3, #0
   13e64:	str	r0, [sp]
   13e68:	mov	r0, r4
   13e6c:	bl	13e9c <__assert_fail@plt+0x2e14>
   13e70:	b	13e48 <__assert_fail@plt+0x2dc0>
   13e74:	push	{r4, r5, r6, sl, fp, lr}
   13e78:	add	fp, sp, #16
   13e7c:	mov	r4, r0
   13e80:	bl	10fa4 <__errno_location@plt>
   13e84:	ldr	r6, [r0]
   13e88:	mov	r5, r0
   13e8c:	mov	r0, r4
   13e90:	bl	10e78 <free@plt>
   13e94:	str	r6, [r5]
   13e98:	pop	{r4, r5, r6, sl, fp, pc}
   13e9c:	push	{r4, r5, r6, r7, fp, lr}
   13ea0:	add	fp, sp, #16
   13ea4:	sub	sp, sp, #8
   13ea8:	mov	r4, r0
   13eac:	ldr	r0, [r0, #4]
   13eb0:	mov	r5, r3
   13eb4:	mov	r6, r2
   13eb8:	ldr	r1, [r4, #8]
   13ebc:	cmp	r1, r0
   13ec0:	bne	13edc <__assert_fail@plt+0x2e54>
   13ec4:	ldrd	r0, [r4, #16]
   13ec8:	cmp	r1, r0
   13ecc:	bne	13edc <__assert_fail@plt+0x2e54>
   13ed0:	ldr	r0, [r4, #36]	; 0x24
   13ed4:	cmp	r0, #0
   13ed8:	beq	13ef4 <__assert_fail@plt+0x2e6c>
   13edc:	mov	r0, r4
   13ee0:	mov	r2, r6
   13ee4:	mov	r3, r5
   13ee8:	sub	sp, fp, #16
   13eec:	pop	{r4, r5, r6, r7, fp, lr}
   13ef0:	b	11004 <fseeko64@plt>
   13ef4:	ldr	r7, [fp, #8]
   13ef8:	mov	r0, r4
   13efc:	bl	10fd4 <fileno@plt>
   13f00:	mov	r2, r6
   13f04:	mov	r3, r5
   13f08:	str	r7, [sp]
   13f0c:	bl	10efc <lseek64@plt>
   13f10:	and	r2, r0, r1
   13f14:	cmn	r2, #1
   13f18:	mvneq	r0, #0
   13f1c:	subeq	sp, fp, #16
   13f20:	popeq	{r4, r5, r6, r7, fp, pc}
   13f24:	strd	r0, [r4, #80]	; 0x50
   13f28:	ldr	r0, [r4]
   13f2c:	bic	r0, r0, #16
   13f30:	str	r0, [r4]
   13f34:	mov	r0, #0
   13f38:	sub	sp, fp, #16
   13f3c:	pop	{r4, r5, r6, r7, fp, pc}
   13f40:	push	{r4, r5, fp, lr}
   13f44:	add	fp, sp, #8
   13f48:	cmp	r0, #0
   13f4c:	beq	13fe0 <__assert_fail@plt+0x2f58>
   13f50:	mov	r1, #47	; 0x2f
   13f54:	mov	r4, r0
   13f58:	bl	11028 <strrchr@plt>
   13f5c:	cmp	r0, #0
   13f60:	mov	r5, r4
   13f64:	addne	r5, r0, #1
   13f68:	sub	r0, r5, r4
   13f6c:	cmp	r0, #7
   13f70:	blt	13fc4 <__assert_fail@plt+0x2f3c>
   13f74:	movw	r1, #38615	; 0x96d7
   13f78:	sub	r0, r5, #7
   13f7c:	mov	r2, #7
   13f80:	movt	r1, #1
   13f84:	bl	11070 <strncmp@plt>
   13f88:	cmp	r0, #0
   13f8c:	bne	13fc4 <__assert_fail@plt+0x2f3c>
   13f90:	movw	r1, #38623	; 0x96df
   13f94:	mov	r0, r5
   13f98:	mov	r2, #3
   13f9c:	movt	r1, #1
   13fa0:	bl	11070 <strncmp@plt>
   13fa4:	cmp	r0, #0
   13fa8:	beq	13fb4 <__assert_fail@plt+0x2f2c>
   13fac:	mov	r4, r5
   13fb0:	b	13fc4 <__assert_fail@plt+0x2f3c>
   13fb4:	movw	r0, #41264	; 0xa130
   13fb8:	add	r4, r5, #3
   13fbc:	movt	r0, #2
   13fc0:	str	r4, [r0]
   13fc4:	movw	r0, #41268	; 0xa134
   13fc8:	movt	r0, #2
   13fcc:	str	r4, [r0]
   13fd0:	movw	r0, #41332	; 0xa174
   13fd4:	movt	r0, #2
   13fd8:	str	r4, [r0]
   13fdc:	pop	{r4, r5, fp, pc}
   13fe0:	movw	r0, #41280	; 0xa140
   13fe4:	mov	r1, #55	; 0x37
   13fe8:	mov	r2, #1
   13fec:	movt	r0, #2
   13ff0:	ldr	r3, [r0]
   13ff4:	movw	r0, #38559	; 0x969f
   13ff8:	movt	r0, #1
   13ffc:	bl	10ef0 <fwrite@plt>
   14000:	bl	1107c <abort@plt>
   14004:	push	{r4, r5, r6, sl, fp, lr}
   14008:	add	fp, sp, #16
   1400c:	mov	r4, r0
   14010:	movw	r0, #41336	; 0xa178
   14014:	movt	r0, #2
   14018:	cmp	r4, #0
   1401c:	moveq	r4, r0
   14020:	bl	10fa4 <__errno_location@plt>
   14024:	ldr	r6, [r0]
   14028:	mov	r5, r0
   1402c:	mov	r0, r4
   14030:	mov	r1, #48	; 0x30
   14034:	bl	167c4 <__assert_fail@plt+0x573c>
   14038:	str	r6, [r5]
   1403c:	pop	{r4, r5, r6, sl, fp, pc}
   14040:	movw	r1, #41336	; 0xa178
   14044:	cmp	r0, #0
   14048:	movt	r1, #2
   1404c:	movne	r1, r0
   14050:	ldr	r0, [r1]
   14054:	bx	lr
   14058:	movw	r2, #41336	; 0xa178
   1405c:	cmp	r0, #0
   14060:	movt	r2, #2
   14064:	movne	r2, r0
   14068:	str	r1, [r2]
   1406c:	bx	lr
   14070:	movw	r3, #41336	; 0xa178
   14074:	cmp	r0, #0
   14078:	movt	r3, #2
   1407c:	movne	r3, r0
   14080:	ubfx	r0, r1, #5, #3
   14084:	and	r1, r1, #31
   14088:	add	r0, r3, r0, lsl #2
   1408c:	ldr	r3, [r0, #8]
   14090:	eor	r2, r2, r3, lsr r1
   14094:	and	r2, r2, #1
   14098:	eor	r2, r3, r2, lsl r1
   1409c:	str	r2, [r0, #8]
   140a0:	mov	r0, #1
   140a4:	and	r0, r0, r3, lsr r1
   140a8:	bx	lr
   140ac:	movw	r2, #41336	; 0xa178
   140b0:	cmp	r0, #0
   140b4:	movt	r2, #2
   140b8:	movne	r2, r0
   140bc:	ldr	r0, [r2, #4]
   140c0:	str	r1, [r2, #4]
   140c4:	bx	lr
   140c8:	movw	r3, #41336	; 0xa178
   140cc:	cmp	r0, #0
   140d0:	movt	r3, #2
   140d4:	movne	r3, r0
   140d8:	cmp	r1, #0
   140dc:	mov	r0, #10
   140e0:	cmpne	r2, #0
   140e4:	str	r0, [r3]
   140e8:	bne	140f8 <__assert_fail@plt+0x3070>
   140ec:	push	{fp, lr}
   140f0:	mov	fp, sp
   140f4:	bl	1107c <abort@plt>
   140f8:	str	r1, [r3, #40]	; 0x28
   140fc:	str	r2, [r3, #44]	; 0x2c
   14100:	bx	lr
   14104:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14108:	add	fp, sp, #28
   1410c:	sub	sp, sp, #20
   14110:	mov	r7, r0
   14114:	ldr	r0, [fp, #8]
   14118:	movw	r5, #41336	; 0xa178
   1411c:	mov	r8, r3
   14120:	mov	r9, r2
   14124:	mov	sl, r1
   14128:	movt	r5, #2
   1412c:	cmp	r0, #0
   14130:	movne	r5, r0
   14134:	bl	10fa4 <__errno_location@plt>
   14138:	mov	r4, r0
   1413c:	ldm	r5, {r0, r1}
   14140:	ldr	r2, [r5, #40]	; 0x28
   14144:	ldr	r3, [r5, #44]	; 0x2c
   14148:	add	r5, r5, #8
   1414c:	ldr	r6, [r4]
   14150:	stm	sp, {r0, r1, r5}
   14154:	str	r2, [sp, #12]
   14158:	str	r3, [sp, #16]
   1415c:	mov	r0, r7
   14160:	mov	r1, sl
   14164:	mov	r2, r9
   14168:	mov	r3, r8
   1416c:	bl	1417c <__assert_fail@plt+0x30f4>
   14170:	str	r6, [r4]
   14174:	sub	sp, fp, #28
   14178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1417c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14180:	add	fp, sp, #28
   14184:	sub	sp, sp, #156	; 0x9c
   14188:	str	r0, [sp, #80]	; 0x50
   1418c:	ldr	r0, [fp, #12]
   14190:	mov	r6, r1
   14194:	mov	r9, r3
   14198:	str	r2, [fp, #-84]	; 0xffffffac
   1419c:	and	r1, r0, #4
   141a0:	str	r1, [sp, #32]
   141a4:	and	r1, r0, #1
   141a8:	str	r1, [sp, #36]	; 0x24
   141ac:	ubfx	r4, r0, #1, #1
   141b0:	bl	10f08 <__ctype_get_mb_cur_max@plt>
   141b4:	str	r0, [sp, #40]	; 0x28
   141b8:	ldr	r0, [fp, #24]
   141bc:	ldr	r7, [fp, #8]
   141c0:	mov	r1, #0
   141c4:	mov	r5, #1
   141c8:	str	r1, [fp, #-56]	; 0xffffffc8
   141cc:	mov	r1, #0
   141d0:	str	r1, [sp, #60]	; 0x3c
   141d4:	str	r0, [sp, #76]	; 0x4c
   141d8:	ldr	r0, [fp, #20]
   141dc:	str	r0, [sp, #72]	; 0x48
   141e0:	mov	r0, #0
   141e4:	str	r0, [sp, #56]	; 0x38
   141e8:	mov	r0, #0
   141ec:	str	r0, [sp, #92]	; 0x5c
   141f0:	mov	r0, #0
   141f4:	str	r0, [fp, #-76]	; 0xffffffb4
   141f8:	mov	r0, #0
   141fc:	cmp	r7, #10
   14200:	bhi	15180 <__assert_fail@plt+0x40f8>
   14204:	add	r1, pc, #28
   14208:	mov	sl, r6
   1420c:	ldr	r6, [sp, #80]	; 0x50
   14210:	ldr	ip, [fp, #-84]	; 0xffffffac
   14214:	mov	r8, #0
   14218:	mov	r2, #1
   1421c:	mov	r3, #0
   14220:	mov	lr, r9
   14224:	ldr	pc, [r1, r7, lsl #2]
   14228:	andeq	r4, r1, ip, lsl #6
   1422c:	andeq	r4, r1, r8, lsr r3
   14230:	strdeq	r4, [r1], -ip
   14234:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14238:	andeq	r4, r1, ip, lsr #6
   1423c:	andeq	r4, r1, r0, lsl #7
   14240:	andeq	r4, r1, ip, lsl r3
   14244:	ldrdeq	r4, [r1], -ip
   14248:	andeq	r4, r1, r4, asr r2
   1424c:	andeq	r4, r1, r4, asr r2
   14250:	andeq	r4, r1, ip, ror r2
   14254:	movw	r0, #38705	; 0x9731
   14258:	mov	r1, r7
   1425c:	movt	r0, #1
   14260:	bl	15b8c <__assert_fail@plt+0x4b04>
   14264:	str	r0, [sp, #72]	; 0x48
   14268:	movw	r0, #38707	; 0x9733
   1426c:	mov	r1, r7
   14270:	movt	r0, #1
   14274:	bl	15b8c <__assert_fail@plt+0x4b04>
   14278:	str	r0, [sp, #76]	; 0x4c
   1427c:	str	r5, [fp, #-48]	; 0xffffffd0
   14280:	mov	r8, #0
   14284:	mov	r5, r7
   14288:	tst	r4, #1
   1428c:	bne	142c4 <__assert_fail@plt+0x323c>
   14290:	ldr	r0, [sp, #72]	; 0x48
   14294:	ldrb	r0, [r0]
   14298:	cmp	r0, #0
   1429c:	beq	142c4 <__assert_fail@plt+0x323c>
   142a0:	ldr	r1, [sp, #72]	; 0x48
   142a4:	mov	r8, #0
   142a8:	add	r1, r1, #1
   142ac:	cmp	r8, sl
   142b0:	strbcc	r0, [r6, r8]
   142b4:	ldrb	r0, [r1, r8]
   142b8:	add	r8, r8, #1
   142bc:	cmp	r0, #0
   142c0:	bne	142ac <__assert_fail@plt+0x3224>
   142c4:	ldr	r7, [sp, #76]	; 0x4c
   142c8:	mov	r0, r7
   142cc:	bl	10f8c <strlen@plt>
   142d0:	str	r7, [sp, #92]	; 0x5c
   142d4:	mov	r7, r5
   142d8:	ldr	ip, [fp, #-84]	; 0xffffffac
   142dc:	ldr	r5, [fp, #-48]	; 0xffffffd0
   142e0:	str	r0, [fp, #-76]	; 0xffffffb4
   142e4:	mov	r2, #1
   142e8:	mov	r3, r4
   142ec:	mov	lr, r9
   142f0:	b	143dc <__assert_fail@plt+0x3354>
   142f4:	mov	r0, #1
   142f8:	b	14338 <__assert_fail@plt+0x32b0>
   142fc:	tst	r4, #1
   14300:	bne	14338 <__assert_fail@plt+0x32b0>
   14304:	mov	r2, r0
   14308:	b	14360 <__assert_fail@plt+0x32d8>
   1430c:	mov	r7, #0
   14310:	mov	r8, #0
   14314:	mov	r2, r0
   14318:	b	143d8 <__assert_fail@plt+0x3350>
   1431c:	mov	r0, #1
   14320:	mov	r8, #0
   14324:	mov	r7, #5
   14328:	b	14394 <__assert_fail@plt+0x330c>
   1432c:	mov	r2, #1
   14330:	tst	r4, #1
   14334:	beq	14360 <__assert_fail@plt+0x32d8>
   14338:	mov	r1, #1
   1433c:	mov	r8, #0
   14340:	mov	r7, #2
   14344:	mov	r2, r0
   14348:	mov	r3, #1
   1434c:	str	r1, [fp, #-76]	; 0xffffffb4
   14350:	movw	r1, #38707	; 0x9733
   14354:	movt	r1, #1
   14358:	str	r1, [sp, #92]	; 0x5c
   1435c:	b	143dc <__assert_fail@plt+0x3354>
   14360:	cmp	sl, #0
   14364:	mov	r8, #1
   14368:	mov	r7, #2
   1436c:	movne	r0, #39	; 0x27
   14370:	strbne	r0, [r6]
   14374:	movw	r0, #38707	; 0x9733
   14378:	movt	r0, #1
   1437c:	b	143cc <__assert_fail@plt+0x3344>
   14380:	mov	r7, #5
   14384:	tst	r4, #1
   14388:	beq	143b0 <__assert_fail@plt+0x3328>
   1438c:	mov	r0, #1
   14390:	mov	r8, #0
   14394:	str	r0, [fp, #-76]	; 0xffffffb4
   14398:	movw	r0, #38703	; 0x972f
   1439c:	mov	r2, #1
   143a0:	mov	r3, #1
   143a4:	movt	r0, #1
   143a8:	str	r0, [sp, #92]	; 0x5c
   143ac:	b	143dc <__assert_fail@plt+0x3354>
   143b0:	cmp	sl, #0
   143b4:	mov	r8, #1
   143b8:	mov	r2, #1
   143bc:	movne	r0, #34	; 0x22
   143c0:	strbne	r0, [r6]
   143c4:	movw	r0, #38703	; 0x972f
   143c8:	movt	r0, #1
   143cc:	str	r0, [sp, #92]	; 0x5c
   143d0:	mov	r0, #1
   143d4:	str	r0, [fp, #-76]	; 0xffffffb4
   143d8:	mov	r3, #0
   143dc:	ldr	r0, [fp, #16]
   143e0:	str	r3, [fp, #-72]	; 0xffffffb8
   143e4:	str	r7, [fp, #-64]	; 0xffffffc0
   143e8:	str	r2, [sp, #84]	; 0x54
   143ec:	cmp	r0, #0
   143f0:	movwne	r0, #1
   143f4:	and	r0, r0, r3
   143f8:	str	r0, [fp, #-88]	; 0xffffffa8
   143fc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14400:	cmp	r0, #0
   14404:	movwne	r0, #1
   14408:	subs	r4, r7, #2
   1440c:	mov	r7, #0
   14410:	and	r1, r0, r3
   14414:	str	r4, [fp, #-80]	; 0xffffffb0
   14418:	and	r1, r2, r1
   1441c:	str	r1, [sp, #48]	; 0x30
   14420:	clz	r1, r4
   14424:	lsr	r1, r1, #5
   14428:	and	r1, r1, r3
   1442c:	eor	r3, r3, #1
   14430:	str	r1, [sp, #64]	; 0x40
   14434:	mov	r1, r4
   14438:	str	r3, [sp, #88]	; 0x58
   1443c:	movwne	r1, #1
   14440:	orr	r3, r1, r3
   14444:	and	r1, r1, r2
   14448:	and	r0, r0, r1
   1444c:	str	r3, [sp, #68]	; 0x44
   14450:	str	r1, [fp, #-68]	; 0xffffffbc
   14454:	str	r0, [fp, #-60]	; 0xffffffc4
   14458:	eor	r0, r2, #1
   1445c:	str	r0, [sp, #52]	; 0x34
   14460:	cmn	lr, #1
   14464:	beq	14474 <__assert_fail@plt+0x33ec>
   14468:	cmp	r7, lr
   1446c:	bne	14480 <__assert_fail@plt+0x33f8>
   14470:	b	14fa8 <__assert_fail@plt+0x3f20>
   14474:	ldrb	r0, [ip, r7]
   14478:	cmp	r0, #0
   1447c:	beq	14fb0 <__assert_fail@plt+0x3f28>
   14480:	ldr	r0, [fp, #-60]	; 0xffffffc4
   14484:	mov	r9, #0
   14488:	str	r5, [fp, #-48]	; 0xffffffd0
   1448c:	cmp	r0, #0
   14490:	beq	144c4 <__assert_fail@plt+0x343c>
   14494:	ldr	r0, [fp, #-76]	; 0xffffffb4
   14498:	add	r4, r7, r0
   1449c:	cmp	r0, #2
   144a0:	bcc	144bc <__assert_fail@plt+0x3434>
   144a4:	cmn	lr, #1
   144a8:	bne	144bc <__assert_fail@plt+0x3434>
   144ac:	mov	r0, ip
   144b0:	bl	10f8c <strlen@plt>
   144b4:	ldr	ip, [fp, #-84]	; 0xffffffac
   144b8:	mov	lr, r0
   144bc:	cmp	r4, lr
   144c0:	bls	144cc <__assert_fail@plt+0x3444>
   144c4:	mov	r0, #0
   144c8:	b	1450c <__assert_fail@plt+0x3484>
   144cc:	ldr	r1, [sp, #92]	; 0x5c
   144d0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   144d4:	add	r0, ip, r7
   144d8:	mov	r4, lr
   144dc:	bl	10eb4 <memcmp@plt>
   144e0:	ldr	r2, [sp, #88]	; 0x58
   144e4:	cmp	r0, #0
   144e8:	mov	r1, r0
   144ec:	movwne	r1, #1
   144f0:	orr	r1, r1, r2
   144f4:	tst	r1, #1
   144f8:	beq	15040 <__assert_fail@plt+0x3fb8>
   144fc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14500:	clz	r0, r0
   14504:	mov	lr, r4
   14508:	lsr	r0, r0, #5
   1450c:	str	r0, [fp, #-52]	; 0xffffffcc
   14510:	ldrb	r5, [ip, r7]
   14514:	cmp	r5, #126	; 0x7e
   14518:	bhi	148d0 <__assert_fail@plt+0x3848>
   1451c:	add	r3, pc, #16
   14520:	mov	r4, #1
   14524:	mov	r2, #110	; 0x6e
   14528:	mov	r0, #97	; 0x61
   1452c:	mov	r1, #0
   14530:	ldr	pc, [r3, r5, lsl #2]
   14534:	andeq	r4, r1, ip, asr #15
   14538:	ldrdeq	r4, [r1], -r0
   1453c:	ldrdeq	r4, [r1], -r0
   14540:	ldrdeq	r4, [r1], -r0
   14544:	ldrdeq	r4, [r1], -r0
   14548:	ldrdeq	r4, [r1], -r0
   1454c:	ldrdeq	r4, [r1], -r0
   14550:	andeq	r4, r1, r4, lsl #19
   14554:	andeq	r4, r1, ip, lsr #15
   14558:	andeq	r4, r1, r4, lsr #15
   1455c:			; <UNDEFINED> instruction: 0x000147b8
   14560:	andeq	r4, r1, r8, lsr r8
   14564:	muleq	r1, ip, r7
   14568:			; <UNDEFINED> instruction: 0x000147b4
   1456c:	ldrdeq	r4, [r1], -r0
   14570:	ldrdeq	r4, [r1], -r0
   14574:	ldrdeq	r4, [r1], -r0
   14578:	ldrdeq	r4, [r1], -r0
   1457c:	ldrdeq	r4, [r1], -r0
   14580:	ldrdeq	r4, [r1], -r0
   14584:	ldrdeq	r4, [r1], -r0
   14588:	ldrdeq	r4, [r1], -r0
   1458c:	ldrdeq	r4, [r1], -r0
   14590:	ldrdeq	r4, [r1], -r0
   14594:	ldrdeq	r4, [r1], -r0
   14598:	ldrdeq	r4, [r1], -r0
   1459c:	ldrdeq	r4, [r1], -r0
   145a0:	ldrdeq	r4, [r1], -r0
   145a4:	ldrdeq	r4, [r1], -r0
   145a8:	ldrdeq	r4, [r1], -r0
   145ac:	ldrdeq	r4, [r1], -r0
   145b0:	ldrdeq	r4, [r1], -r0
   145b4:	andeq	r4, r1, ip, lsr r9
   145b8:	andeq	r4, r1, r0, asr #18
   145bc:	andeq	r4, r1, r0, asr #18
   145c0:	andeq	r4, r1, r4, asr #14
   145c4:	andeq	r4, r1, r0, asr #18
   145c8:	andeq	r4, r1, r0, lsr r7
   145cc:	andeq	r4, r1, r0, asr #18
   145d0:	andeq	r4, r1, r0, asr #16
   145d4:	andeq	r4, r1, r0, asr #18
   145d8:	andeq	r4, r1, r0, asr #18
   145dc:	andeq	r4, r1, r0, asr #18
   145e0:	andeq	r4, r1, r0, lsr r7
   145e4:	andeq	r4, r1, r0, lsr r7
   145e8:	andeq	r4, r1, r0, lsr r7
   145ec:	andeq	r4, r1, r0, lsr r7
   145f0:	andeq	r4, r1, r0, lsr r7
   145f4:	andeq	r4, r1, r0, lsr r7
   145f8:	andeq	r4, r1, r0, lsr r7
   145fc:	andeq	r4, r1, r0, lsr r7
   14600:	andeq	r4, r1, r0, lsr r7
   14604:	andeq	r4, r1, r0, lsr r7
   14608:	andeq	r4, r1, r0, lsr r7
   1460c:	andeq	r4, r1, r0, lsr r7
   14610:	andeq	r4, r1, r0, lsr r7
   14614:	andeq	r4, r1, r0, lsr r7
   14618:	andeq	r4, r1, r0, lsr r7
   1461c:	andeq	r4, r1, r0, lsr r7
   14620:	andeq	r4, r1, r0, asr #18
   14624:	andeq	r4, r1, r0, asr #18
   14628:	andeq	r4, r1, r0, asr #18
   1462c:	andeq	r4, r1, r0, asr #18
   14630:	andeq	r4, r1, ip, lsl #16
   14634:	ldrdeq	r4, [r1], -r0
   14638:	andeq	r4, r1, r0, lsr r7
   1463c:	andeq	r4, r1, r0, lsr r7
   14640:	andeq	r4, r1, r0, lsr r7
   14644:	andeq	r4, r1, r0, lsr r7
   14648:	andeq	r4, r1, r0, lsr r7
   1464c:	andeq	r4, r1, r0, lsr r7
   14650:	andeq	r4, r1, r0, lsr r7
   14654:	andeq	r4, r1, r0, lsr r7
   14658:	andeq	r4, r1, r0, lsr r7
   1465c:	andeq	r4, r1, r0, lsr r7
   14660:	andeq	r4, r1, r0, lsr r7
   14664:	andeq	r4, r1, r0, lsr r7
   14668:	andeq	r4, r1, r0, lsr r7
   1466c:	andeq	r4, r1, r0, lsr r7
   14670:	andeq	r4, r1, r0, lsr r7
   14674:	andeq	r4, r1, r0, lsr r7
   14678:	andeq	r4, r1, r0, lsr r7
   1467c:	andeq	r4, r1, r0, lsr r7
   14680:	andeq	r4, r1, r0, lsr r7
   14684:	andeq	r4, r1, r0, lsr r7
   14688:	andeq	r4, r1, r0, lsr r7
   1468c:	andeq	r4, r1, r0, lsr r7
   14690:	andeq	r4, r1, r0, lsr r7
   14694:	andeq	r4, r1, r0, lsr r7
   14698:	andeq	r4, r1, r0, lsr r7
   1469c:	andeq	r4, r1, r0, lsr r7
   146a0:	andeq	r4, r1, r0, asr #18
   146a4:	andeq	r4, r1, r8, ror r7
   146a8:	andeq	r4, r1, r0, lsr r7
   146ac:	andeq	r4, r1, r0, asr #18
   146b0:	andeq	r4, r1, r0, lsr r7
   146b4:	andeq	r4, r1, r0, asr #18
   146b8:	andeq	r4, r1, r0, lsr r7
   146bc:	andeq	r4, r1, r0, lsr r7
   146c0:	andeq	r4, r1, r0, lsr r7
   146c4:	andeq	r4, r1, r0, lsr r7
   146c8:	andeq	r4, r1, r0, lsr r7
   146cc:	andeq	r4, r1, r0, lsr r7
   146d0:	andeq	r4, r1, r0, lsr r7
   146d4:	andeq	r4, r1, r0, lsr r7
   146d8:	andeq	r4, r1, r0, lsr r7
   146dc:	andeq	r4, r1, r0, lsr r7
   146e0:	andeq	r4, r1, r0, lsr r7
   146e4:	andeq	r4, r1, r0, lsr r7
   146e8:	andeq	r4, r1, r0, lsr r7
   146ec:	andeq	r4, r1, r0, lsr r7
   146f0:	andeq	r4, r1, r0, lsr r7
   146f4:	andeq	r4, r1, r0, lsr r7
   146f8:	andeq	r4, r1, r0, lsr r7
   146fc:	andeq	r4, r1, r0, lsr r7
   14700:	andeq	r4, r1, r0, lsr r7
   14704:	andeq	r4, r1, r0, lsr r7
   14708:	andeq	r4, r1, r0, lsr r7
   1470c:	andeq	r4, r1, r0, lsr r7
   14710:	andeq	r4, r1, r0, lsr r7
   14714:	andeq	r4, r1, r0, lsr r7
   14718:	andeq	r4, r1, r0, lsr r7
   1471c:	andeq	r4, r1, r0, lsr r7
   14720:	andeq	r4, r1, r8, asr r7
   14724:	andeq	r4, r1, r0, asr #18
   14728:	andeq	r4, r1, r8, asr r7
   1472c:	andeq	r4, r1, r4, asr #14
   14730:	ldr	r0, [fp, #-68]	; 0xffffffbc
   14734:	cmp	r0, #0
   14738:	beq	14998 <__assert_fail@plt+0x3910>
   1473c:	ldr	r0, [fp, #16]
   14740:	b	1499c <__assert_fail@plt+0x3914>
   14744:	mov	r4, #0
   14748:	cmp	r7, #0
   1474c:	beq	1493c <__assert_fail@plt+0x38b4>
   14750:	mov	r9, #0
   14754:	b	14730 <__assert_fail@plt+0x36a8>
   14758:	mov	r4, #0
   1475c:	cmn	lr, #1
   14760:	beq	14920 <__assert_fail@plt+0x3898>
   14764:	cmp	r7, #0
   14768:	bne	14750 <__assert_fail@plt+0x36c8>
   1476c:	cmp	lr, #1
   14770:	beq	1493c <__assert_fail@plt+0x38b4>
   14774:	b	14750 <__assert_fail@plt+0x36c8>
   14778:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1477c:	cmp	r0, #2
   14780:	bne	14960 <__assert_fail@plt+0x38d8>
   14784:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14788:	tst	r0, #1
   1478c:	bne	1505c <__assert_fail@plt+0x3fd4>
   14790:	mov	r9, #0
   14794:	mov	r0, #92	; 0x5c
   14798:	b	14974 <__assert_fail@plt+0x38ec>
   1479c:	mov	r0, #102	; 0x66
   147a0:	b	14984 <__assert_fail@plt+0x38fc>
   147a4:	mov	r2, #116	; 0x74
   147a8:	b	147b8 <__assert_fail@plt+0x3730>
   147ac:	mov	r0, #98	; 0x62
   147b0:	b	14984 <__assert_fail@plt+0x38fc>
   147b4:	mov	r2, #114	; 0x72
   147b8:	ldr	r0, [sp, #68]	; 0x44
   147bc:	tst	r0, #1
   147c0:	mov	r0, r2
   147c4:	bne	14984 <__assert_fail@plt+0x38fc>
   147c8:	b	1505c <__assert_fail@plt+0x3fd4>
   147cc:	ldr	r0, [sp, #84]	; 0x54
   147d0:	tst	r0, #1
   147d4:	beq	14a74 <__assert_fail@plt+0x39ec>
   147d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   147dc:	tst	r0, #1
   147e0:	bne	1516c <__assert_fail@plt+0x40e4>
   147e4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   147e8:	ldr	r2, [fp, #-56]	; 0xffffffc8
   147ec:	cmp	r0, #2
   147f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   147f4:	movwne	r0, #1
   147f8:	orr	r0, r0, r2
   147fc:	tst	r0, #1
   14800:	beq	14e44 <__assert_fail@plt+0x3dbc>
   14804:	mov	r0, r8
   14808:	b	14e78 <__assert_fail@plt+0x3df0>
   1480c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14810:	mov	r9, #0
   14814:	mov	r5, #63	; 0x3f
   14818:	cmp	r0, #5
   1481c:	beq	14c28 <__assert_fail@plt+0x3ba0>
   14820:	cmp	r0, #2
   14824:	bne	14ccc <__assert_fail@plt+0x3c44>
   14828:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1482c:	tst	r0, #1
   14830:	beq	14cd0 <__assert_fail@plt+0x3c48>
   14834:	b	1505c <__assert_fail@plt+0x3fd4>
   14838:	mov	r0, #118	; 0x76
   1483c:	b	14984 <__assert_fail@plt+0x38fc>
   14840:	mov	r0, #1
   14844:	mov	r5, #39	; 0x27
   14848:	str	r0, [sp, #60]	; 0x3c
   1484c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14850:	cmp	r0, #2
   14854:	bne	148c8 <__assert_fail@plt+0x3840>
   14858:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1485c:	tst	r0, #1
   14860:	bne	1505c <__assert_fail@plt+0x3fd4>
   14864:	ldr	r2, [sp, #56]	; 0x38
   14868:	clz	r1, sl
   1486c:	mov	r9, #0
   14870:	lsr	r1, r1, #5
   14874:	cmp	r2, #0
   14878:	mov	r0, r2
   1487c:	movwne	r0, #1
   14880:	orrs	r0, r0, r1
   14884:	moveq	r2, sl
   14888:	moveq	sl, r0
   1488c:	cmp	r8, sl
   14890:	str	r2, [sp, #56]	; 0x38
   14894:	movcc	r0, #39	; 0x27
   14898:	strbcc	r0, [r6, r8]
   1489c:	add	r0, r8, #1
   148a0:	cmp	r0, sl
   148a4:	movcc	r1, #92	; 0x5c
   148a8:	strbcc	r1, [r6, r0]
   148ac:	add	r0, r8, #2
   148b0:	add	r8, r8, #3
   148b4:	cmp	r0, sl
   148b8:	movcc	r1, #39	; 0x27
   148bc:	strbcc	r1, [r6, r0]
   148c0:	mov	r0, #0
   148c4:	str	r0, [fp, #-56]	; 0xffffffc8
   148c8:	mov	r4, #1
   148cc:	b	14730 <__assert_fail@plt+0x36a8>
   148d0:	ldr	r0, [sp, #40]	; 0x28
   148d4:	cmp	r0, #1
   148d8:	bne	14aa0 <__assert_fail@plt+0x3a18>
   148dc:	str	lr, [sp, #28]
   148e0:	bl	10f74 <__ctype_b_loc@plt>
   148e4:	ldr	r0, [r0]
   148e8:	ldr	ip, [fp, #-84]	; 0xffffffac
   148ec:	mov	r1, #1
   148f0:	add	r0, r0, r5, lsl #1
   148f4:	ldrb	r0, [r0, #1]
   148f8:	ubfx	r4, r0, #6, #1
   148fc:	ldr	r0, [sp, #52]	; 0x34
   14900:	mov	r2, r1
   14904:	cmp	r1, #1
   14908:	orr	r0, r4, r0
   1490c:	bhi	14cd8 <__assert_fail@plt+0x3c50>
   14910:	tst	r0, #1
   14914:	beq	14cd8 <__assert_fail@plt+0x3c50>
   14918:	ldr	lr, [sp, #28]
   1491c:	b	14730 <__assert_fail@plt+0x36a8>
   14920:	cmp	r7, #0
   14924:	ldrbeq	r0, [ip, #1]
   14928:	cmpeq	r0, #0
   1492c:	beq	1493c <__assert_fail@plt+0x38b4>
   14930:	mvn	lr, #0
   14934:	mov	r9, #0
   14938:	b	14730 <__assert_fail@plt+0x36a8>
   1493c:	mov	r1, #1
   14940:	ldr	r0, [fp, #-64]	; 0xffffffc0
   14944:	cmp	r0, #2
   14948:	bne	14958 <__assert_fail@plt+0x38d0>
   1494c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   14950:	tst	r0, #1
   14954:	bne	1505c <__assert_fail@plt+0x3fd4>
   14958:	mov	r4, r1
   1495c:	b	14730 <__assert_fail@plt+0x36a8>
   14960:	ldr	r1, [sp, #48]	; 0x30
   14964:	mov	r9, #0
   14968:	mov	r0, #92	; 0x5c
   1496c:	cmp	r1, #0
   14970:	beq	14984 <__assert_fail@plt+0x38fc>
   14974:	mov	r4, #0
   14978:	cmp	r9, #0
   1497c:	beq	14f10 <__assert_fail@plt+0x3e88>
   14980:	b	14f4c <__assert_fail@plt+0x3ec4>
   14984:	ldr	r1, [sp, #84]	; 0x54
   14988:	mov	r4, #0
   1498c:	mov	r9, #0
   14990:	tst	r1, #1
   14994:	bne	149d4 <__assert_fail@plt+0x394c>
   14998:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1499c:	cmp	r0, #0
   149a0:	mov	r0, r5
   149a4:	beq	149c8 <__assert_fail@plt+0x3940>
   149a8:	ldr	r1, [fp, #16]
   149ac:	ubfx	r0, r5, #5, #3
   149b0:	mov	r2, #1
   149b4:	ldr	r0, [r1, r0, lsl #2]
   149b8:	and	r1, r5, #31
   149bc:	tst	r0, r2, lsl r1
   149c0:	mov	r0, r5
   149c4:	bne	149d4 <__assert_fail@plt+0x394c>
   149c8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   149cc:	cmp	r1, #0
   149d0:	beq	14f08 <__assert_fail@plt+0x3e80>
   149d4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   149d8:	tst	r1, #1
   149dc:	bne	15034 <__assert_fail@plt+0x3fac>
   149e0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   149e4:	ldr	r2, [fp, #-56]	; 0xffffffc8
   149e8:	cmp	r1, #2
   149ec:	ldr	r1, [fp, #-80]	; 0xffffffb0
   149f0:	movwne	r1, #1
   149f4:	orr	r1, r1, r2
   149f8:	tst	r1, #1
   149fc:	beq	14a08 <__assert_fail@plt+0x3980>
   14a00:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14a04:	b	14a44 <__assert_fail@plt+0x39bc>
   14a08:	cmp	r8, sl
   14a0c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14a10:	movcc	r1, #39	; 0x27
   14a14:	strbcc	r1, [r6, r8]
   14a18:	add	r1, r8, #1
   14a1c:	cmp	r1, sl
   14a20:	movcc	r2, #36	; 0x24
   14a24:	strbcc	r2, [r6, r1]
   14a28:	add	r1, r8, #2
   14a2c:	add	r8, r8, #3
   14a30:	cmp	r1, sl
   14a34:	movcc	r2, #39	; 0x27
   14a38:	strbcc	r2, [r6, r1]
   14a3c:	mov	r1, #1
   14a40:	str	r1, [fp, #-56]	; 0xffffffc8
   14a44:	cmp	r8, sl
   14a48:	movcc	r1, #92	; 0x5c
   14a4c:	strbcc	r1, [r6, r8]
   14a50:	add	r8, r8, #1
   14a54:	cmp	r8, sl
   14a58:	and	r5, r5, r4
   14a5c:	add	r7, r7, #1
   14a60:	strbcc	r0, [r6, r8]
   14a64:	add	r8, r8, #1
   14a68:	cmn	lr, #1
   14a6c:	bne	14468 <__assert_fail@plt+0x33e0>
   14a70:	b	14474 <__assert_fail@plt+0x33ec>
   14a74:	ldr	r0, [sp, #36]	; 0x24
   14a78:	mov	r4, #0
   14a7c:	mov	r9, #0
   14a80:	mov	r5, #0
   14a84:	cmp	r0, #0
   14a88:	beq	14998 <__assert_fail@plt+0x3910>
   14a8c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14a90:	add	r7, r7, #1
   14a94:	cmn	lr, #1
   14a98:	bne	14468 <__assert_fail@plt+0x33e0>
   14a9c:	b	14474 <__assert_fail@plt+0x33ec>
   14aa0:	mov	r0, #0
   14aa4:	cmn	lr, #1
   14aa8:	str	r0, [fp, #-36]	; 0xffffffdc
   14aac:	str	r0, [fp, #-40]	; 0xffffffd8
   14ab0:	bne	14ac4 <__assert_fail@plt+0x3a3c>
   14ab4:	mov	r0, ip
   14ab8:	bl	10f8c <strlen@plt>
   14abc:	ldr	ip, [fp, #-84]	; 0xffffffac
   14ac0:	mov	lr, r0
   14ac4:	add	r0, ip, r7
   14ac8:	mov	r4, #1
   14acc:	mov	r6, #0
   14ad0:	str	lr, [sp, #28]
   14ad4:	str	r0, [sp, #24]
   14ad8:	sub	r0, fp, #40	; 0x28
   14adc:	mov	r3, r0
   14ae0:	str	r6, [sp, #44]	; 0x2c
   14ae4:	add	r6, r6, r7
   14ae8:	sub	r0, fp, #44	; 0x2c
   14aec:	add	r1, ip, r6
   14af0:	sub	r2, lr, r6
   14af4:	bl	183b4 <__assert_fail@plt+0x732c>
   14af8:	cmp	r0, #0
   14afc:	beq	14f94 <__assert_fail@plt+0x3f0c>
   14b00:	cmn	r0, #1
   14b04:	beq	14f54 <__assert_fail@plt+0x3ecc>
   14b08:	ldr	lr, [sp, #28]
   14b0c:	cmn	r0, #2
   14b10:	beq	14f5c <__assert_fail@plt+0x3ed4>
   14b14:	ldr	r2, [sp, #64]	; 0x40
   14b18:	cmp	r0, #2
   14b1c:	mov	r1, #0
   14b20:	movwcc	r1, #1
   14b24:	eor	r2, r2, #1
   14b28:	orrs	r1, r2, r1
   14b2c:	bne	14bec <__assert_fail@plt+0x3b64>
   14b30:	ldr	r1, [sp, #44]	; 0x2c
   14b34:	ldr	r2, [sp, #24]
   14b38:	add	r1, r2, r1
   14b3c:	mov	r2, #1
   14b40:	ldrb	r3, [r1, r2]
   14b44:	sub	r3, r3, #91	; 0x5b
   14b48:	cmp	r3, #33	; 0x21
   14b4c:	bhi	14be0 <__assert_fail@plt+0x3b58>
   14b50:	add	r6, pc, #0
   14b54:	ldr	pc, [r6, r3, lsl #2]
   14b58:	andeq	r5, r1, r4, asr r0
   14b5c:	andeq	r5, r1, r4, asr r0
   14b60:	andeq	r4, r1, r0, ror #23
   14b64:	andeq	r5, r1, r4, asr r0
   14b68:	andeq	r4, r1, r0, ror #23
   14b6c:	andeq	r5, r1, r4, asr r0
   14b70:	andeq	r4, r1, r0, ror #23
   14b74:	andeq	r4, r1, r0, ror #23
   14b78:	andeq	r4, r1, r0, ror #23
   14b7c:	andeq	r4, r1, r0, ror #23
   14b80:	andeq	r4, r1, r0, ror #23
   14b84:	andeq	r4, r1, r0, ror #23
   14b88:	andeq	r4, r1, r0, ror #23
   14b8c:	andeq	r4, r1, r0, ror #23
   14b90:	andeq	r4, r1, r0, ror #23
   14b94:	andeq	r4, r1, r0, ror #23
   14b98:	andeq	r4, r1, r0, ror #23
   14b9c:	andeq	r4, r1, r0, ror #23
   14ba0:	andeq	r4, r1, r0, ror #23
   14ba4:	andeq	r4, r1, r0, ror #23
   14ba8:	andeq	r4, r1, r0, ror #23
   14bac:	andeq	r4, r1, r0, ror #23
   14bb0:	andeq	r4, r1, r0, ror #23
   14bb4:	andeq	r4, r1, r0, ror #23
   14bb8:	andeq	r4, r1, r0, ror #23
   14bbc:	andeq	r4, r1, r0, ror #23
   14bc0:	andeq	r4, r1, r0, ror #23
   14bc4:	andeq	r4, r1, r0, ror #23
   14bc8:	andeq	r4, r1, r0, ror #23
   14bcc:	andeq	r4, r1, r0, ror #23
   14bd0:	andeq	r4, r1, r0, ror #23
   14bd4:	andeq	r4, r1, r0, ror #23
   14bd8:	andeq	r4, r1, r0, ror #23
   14bdc:	andeq	r5, r1, r4, asr r0
   14be0:	add	r2, r2, #1
   14be4:	cmp	r2, r0
   14be8:	bcc	14b40 <__assert_fail@plt+0x3ab8>
   14bec:	ldr	r6, [sp, #44]	; 0x2c
   14bf0:	add	r6, r0, r6
   14bf4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   14bf8:	bl	10ee4 <iswprint@plt>
   14bfc:	cmp	r0, #0
   14c00:	movwne	r0, #1
   14c04:	and	r4, r4, r0
   14c08:	sub	r0, fp, #40	; 0x28
   14c0c:	bl	10e9c <mbsinit@plt>
   14c10:	ldr	lr, [sp, #28]
   14c14:	ldr	ip, [fp, #-84]	; 0xffffffac
   14c18:	sub	r3, fp, #40	; 0x28
   14c1c:	cmp	r0, #0
   14c20:	beq	14ae0 <__assert_fail@plt+0x3a58>
   14c24:	b	14f9c <__assert_fail@plt+0x3f14>
   14c28:	ldr	r0, [sp, #32]
   14c2c:	cmp	r0, #0
   14c30:	beq	14ccc <__assert_fail@plt+0x3c44>
   14c34:	add	r0, r7, #2
   14c38:	cmp	r0, lr
   14c3c:	bcs	14ccc <__assert_fail@plt+0x3c44>
   14c40:	add	r1, ip, r7
   14c44:	ldrb	r1, [r1, #1]
   14c48:	cmp	r1, #63	; 0x3f
   14c4c:	bne	14ccc <__assert_fail@plt+0x3c44>
   14c50:	ldrb	r5, [ip, r0]
   14c54:	sub	r1, r5, #33	; 0x21
   14c58:	cmp	r1, #29
   14c5c:	bhi	14ccc <__assert_fail@plt+0x3c44>
   14c60:	movw	r3, #20929	; 0x51c1
   14c64:	mov	r2, #1
   14c68:	movt	r3, #14336	; 0x3800
   14c6c:	tst	r3, r2, lsl r1
   14c70:	beq	14ccc <__assert_fail@plt+0x3c44>
   14c74:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14c78:	tst	r1, #1
   14c7c:	bne	15174 <__assert_fail@plt+0x40ec>
   14c80:	cmp	r8, sl
   14c84:	mov	r7, r0
   14c88:	mov	r4, #0
   14c8c:	movcc	r1, #63	; 0x3f
   14c90:	strbcc	r1, [r6, r8]
   14c94:	add	r1, r8, #1
   14c98:	cmp	r1, sl
   14c9c:	movcc	r2, #34	; 0x22
   14ca0:	strbcc	r2, [r6, r1]
   14ca4:	add	r1, r8, #2
   14ca8:	cmp	r1, sl
   14cac:	movcc	r2, #34	; 0x22
   14cb0:	strbcc	r2, [r6, r1]
   14cb4:	add	r1, r8, #3
   14cb8:	add	r8, r8, #4
   14cbc:	cmp	r1, sl
   14cc0:	movcc	r2, #63	; 0x3f
   14cc4:	strbcc	r2, [r6, r1]
   14cc8:	b	14730 <__assert_fail@plt+0x36a8>
   14ccc:	mov	r5, #63	; 0x3f
   14cd0:	mov	r4, #0
   14cd4:	b	14730 <__assert_fail@plt+0x36a8>
   14cd8:	add	r1, r2, r7
   14cdc:	ldr	lr, [sp, #28]
   14ce0:	mov	r3, #0
   14ce4:	str	r1, [sp, #44]	; 0x2c
   14ce8:	add	r1, r7, #1
   14cec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14cf0:	tst	r0, #1
   14cf4:	bne	14dc8 <__assert_fail@plt+0x3d40>
   14cf8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   14cfc:	tst	r2, #1
   14d00:	bne	150bc <__assert_fail@plt+0x4034>
   14d04:	ldr	r3, [fp, #-80]	; 0xffffffb0
   14d08:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14d0c:	cmp	r7, #2
   14d10:	movwne	r3, #1
   14d14:	orr	r3, r3, r2
   14d18:	tst	r3, #1
   14d1c:	bne	14d58 <__assert_fail@plt+0x3cd0>
   14d20:	cmp	r8, sl
   14d24:	add	r3, r8, #1
   14d28:	movcc	r2, #39	; 0x27
   14d2c:	strbcc	r2, [r6, r8]
   14d30:	cmp	r3, sl
   14d34:	movcc	r2, #36	; 0x24
   14d38:	strbcc	r2, [r6, r3]
   14d3c:	add	r3, r8, #2
   14d40:	add	r8, r8, #3
   14d44:	cmp	r3, sl
   14d48:	movcc	r2, #39	; 0x27
   14d4c:	strbcc	r2, [r6, r3]
   14d50:	mov	r2, #1
   14d54:	str	r2, [fp, #-56]	; 0xffffffc8
   14d58:	cmp	r8, sl
   14d5c:	movcc	r3, #92	; 0x5c
   14d60:	strbcc	r3, [r6, r8]
   14d64:	add	r3, r8, #1
   14d68:	cmp	r3, sl
   14d6c:	andcc	r7, r5, #192	; 0xc0
   14d70:	movcc	r2, #48	; 0x30
   14d74:	orrcc	r7, r2, r7, lsr #6
   14d78:	strbcc	r7, [r6, r3]
   14d7c:	add	r3, r8, #2
   14d80:	add	r8, r8, #3
   14d84:	cmp	r3, sl
   14d88:	lsrcc	r7, r5, #3
   14d8c:	movcc	r2, #6
   14d90:	bficc	r7, r2, #3, #29
   14d94:	mov	r2, #6
   14d98:	strbcc	r7, [r6, r3]
   14d9c:	bfi	r5, r2, #3, #29
   14da0:	mov	r3, #1
   14da4:	b	14dec <__assert_fail@plt+0x3d64>
   14da8:	cmp	r8, sl
   14dac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14db0:	strbcc	r5, [r6, r8]
   14db4:	add	r8, r8, #1
   14db8:	ldrb	r5, [ip, r1]
   14dbc:	add	r1, r1, #1
   14dc0:	tst	r0, #1
   14dc4:	beq	14cf8 <__assert_fail@plt+0x3c70>
   14dc8:	ldr	r2, [fp, #-52]	; 0xffffffcc
   14dcc:	tst	r2, #1
   14dd0:	beq	14de4 <__assert_fail@plt+0x3d5c>
   14dd4:	cmp	r8, sl
   14dd8:	movcc	r7, #92	; 0x5c
   14ddc:	strbcc	r7, [r6, r8]
   14de0:	add	r8, r8, #1
   14de4:	mov	r2, #0
   14de8:	str	r2, [fp, #-52]	; 0xffffffcc
   14dec:	ldr	r2, [sp, #44]	; 0x2c
   14df0:	and	r9, r3, #1
   14df4:	cmp	r2, r1
   14df8:	bls	14ef8 <__assert_fail@plt+0x3e70>
   14dfc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   14e00:	cmp	r9, #0
   14e04:	movwne	r9, #1
   14e08:	mvn	r7, r2
   14e0c:	orr	r7, r7, r9
   14e10:	tst	r7, #1
   14e14:	bne	14da8 <__assert_fail@plt+0x3d20>
   14e18:	cmp	r8, sl
   14e1c:	movcc	r7, #39	; 0x27
   14e20:	strbcc	r7, [r6, r8]
   14e24:	add	r7, r8, #1
   14e28:	add	r8, r8, #2
   14e2c:	cmp	r7, sl
   14e30:	movcc	r2, #39	; 0x27
   14e34:	strbcc	r2, [r6, r7]
   14e38:	mov	r2, #0
   14e3c:	str	r2, [fp, #-56]	; 0xffffffc8
   14e40:	b	14da8 <__assert_fail@plt+0x3d20>
   14e44:	cmp	r8, sl
   14e48:	mov	r2, #1
   14e4c:	movcc	r0, #39	; 0x27
   14e50:	strbcc	r0, [r6, r8]
   14e54:	add	r0, r8, #1
   14e58:	cmp	r0, sl
   14e5c:	movcc	r1, #36	; 0x24
   14e60:	strbcc	r1, [r6, r0]
   14e64:	add	r0, r8, #2
   14e68:	cmp	r0, sl
   14e6c:	movcc	r1, #39	; 0x27
   14e70:	strbcc	r1, [r6, r0]
   14e74:	add	r0, r8, #3
   14e78:	cmp	r0, sl
   14e7c:	add	r8, r0, #1
   14e80:	str	r2, [fp, #-56]	; 0xffffffc8
   14e84:	movcc	r1, #92	; 0x5c
   14e88:	strbcc	r1, [r6, r0]
   14e8c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   14e90:	cmp	r1, #2
   14e94:	beq	14ee8 <__assert_fail@plt+0x3e60>
   14e98:	add	r1, r7, #1
   14e9c:	mov	r4, #0
   14ea0:	mov	r9, #1
   14ea4:	mov	r5, #48	; 0x30
   14ea8:	cmp	r1, lr
   14eac:	bcs	14730 <__assert_fail@plt+0x36a8>
   14eb0:	ldrb	r1, [ip, r1]
   14eb4:	sub	r1, r1, #48	; 0x30
   14eb8:	uxtb	r1, r1
   14ebc:	cmp	r1, #9
   14ec0:	bhi	14730 <__assert_fail@plt+0x36a8>
   14ec4:	cmp	r8, sl
   14ec8:	movcc	r1, #48	; 0x30
   14ecc:	strbcc	r1, [r6, r8]
   14ed0:	add	r1, r0, #2
   14ed4:	add	r8, r0, #3
   14ed8:	cmp	r1, sl
   14edc:	movcc	r2, #48	; 0x30
   14ee0:	strbcc	r2, [r6, r1]
   14ee4:	b	14730 <__assert_fail@plt+0x36a8>
   14ee8:	mov	r0, #48	; 0x30
   14eec:	mov	r9, #1
   14ef0:	mov	r4, #0
   14ef4:	b	149c8 <__assert_fail@plt+0x3940>
   14ef8:	cmp	r9, #0
   14efc:	sub	r7, r1, #1
   14f00:	mov	r0, r5
   14f04:	movwne	r9, #1
   14f08:	cmp	r9, #0
   14f0c:	bne	14f4c <__assert_fail@plt+0x3ec4>
   14f10:	ldr	r1, [fp, #-56]	; 0xffffffc8
   14f14:	tst	r1, #1
   14f18:	beq	14f4c <__assert_fail@plt+0x3ec4>
   14f1c:	cmp	r8, sl
   14f20:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14f24:	movcc	r1, #39	; 0x27
   14f28:	strbcc	r1, [r6, r8]
   14f2c:	add	r1, r8, #1
   14f30:	add	r8, r8, #2
   14f34:	cmp	r1, sl
   14f38:	movcc	r2, #39	; 0x27
   14f3c:	strbcc	r2, [r6, r1]
   14f40:	mov	r1, #0
   14f44:	str	r1, [fp, #-56]	; 0xffffffc8
   14f48:	b	14a54 <__assert_fail@plt+0x39cc>
   14f4c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   14f50:	b	14a54 <__assert_fail@plt+0x39cc>
   14f54:	mov	r4, #0
   14f58:	b	14f94 <__assert_fail@plt+0x3f0c>
   14f5c:	mov	r4, #0
   14f60:	cmp	lr, r6
   14f64:	bls	14f94 <__assert_fail@plt+0x3f0c>
   14f68:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f6c:	ldr	r6, [sp, #44]	; 0x2c
   14f70:	ldr	r0, [sp, #24]
   14f74:	ldrb	r0, [r0, r6]
   14f78:	cmp	r0, #0
   14f7c:	beq	14f9c <__assert_fail@plt+0x3f14>
   14f80:	add	r6, r6, #1
   14f84:	add	r0, r7, r6
   14f88:	cmp	r0, lr
   14f8c:	bcc	14f70 <__assert_fail@plt+0x3ee8>
   14f90:	b	14f9c <__assert_fail@plt+0x3f14>
   14f94:	ldr	ip, [fp, #-84]	; 0xffffffac
   14f98:	ldr	r6, [sp, #44]	; 0x2c
   14f9c:	mov	r1, r6
   14fa0:	ldr	r6, [sp, #80]	; 0x50
   14fa4:	b	148fc <__assert_fail@plt+0x3874>
   14fa8:	mov	lr, r7
   14fac:	b	14fb4 <__assert_fail@plt+0x3f2c>
   14fb0:	mvn	lr, #0
   14fb4:	ldr	r7, [fp, #-64]	; 0xffffffc0
   14fb8:	ldr	r1, [fp, #-72]	; 0xffffffb8
   14fbc:	eor	r0, r7, #2
   14fc0:	orr	r0, r0, r8
   14fc4:	clz	r0, r0
   14fc8:	lsr	r0, r0, #5
   14fcc:	tst	r1, r0
   14fd0:	bne	1505c <__assert_fail@plt+0x3fd4>
   14fd4:	mov	r0, r1
   14fd8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   14fdc:	cmp	r7, #2
   14fe0:	movwne	r1, #1
   14fe4:	orr	r0, r0, r1
   14fe8:	tst	r0, #1
   14fec:	ldreq	r0, [sp, #60]	; 0x3c
   14ff0:	eoreq	r0, r0, #1
   14ff4:	tsteq	r0, #1
   14ff8:	bne	15108 <__assert_fail@plt+0x4080>
   14ffc:	mov	r9, lr
   15000:	tst	r5, #1
   15004:	bne	150c4 <__assert_fail@plt+0x403c>
   15008:	ldr	r6, [sp, #56]	; 0x38
   1500c:	mov	r4, #0
   15010:	cmp	r6, #0
   15014:	beq	15100 <__assert_fail@plt+0x4078>
   15018:	ldr	r0, [sp, #84]	; 0x54
   1501c:	mov	r1, #0
   15020:	cmp	sl, #0
   15024:	mov	r5, #0
   15028:	str	r1, [fp, #-72]	; 0xffffffb8
   1502c:	beq	141fc <__assert_fail@plt+0x3174>
   15030:	b	15108 <__assert_fail@plt+0x4080>
   15034:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15038:	ldr	r2, [sp, #84]	; 0x54
   1503c:	b	15064 <__assert_fail@plt+0x3fdc>
   15040:	ldr	ip, [fp, #-84]	; 0xffffffac
   15044:	mov	r2, #1
   15048:	mov	lr, r4
   1504c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   15050:	b	15064 <__assert_fail@plt+0x3fdc>
   15054:	ldr	r6, [sp, #80]	; 0x50
   15058:	ldr	ip, [fp, #-84]	; 0xffffffac
   1505c:	ldr	r2, [sp, #84]	; 0x54
   15060:	mov	r7, #2
   15064:	mov	r0, #0
   15068:	ldr	r1, [fp, #12]
   1506c:	tst	r2, #1
   15070:	mov	r2, r7
   15074:	mov	r3, lr
   15078:	str	r0, [sp, #8]
   1507c:	ldr	r0, [sp, #72]	; 0x48
   15080:	movwne	r2, #4
   15084:	cmp	r7, #2
   15088:	movne	r2, r7
   1508c:	str	r2, [sp]
   15090:	mov	r2, ip
   15094:	bic	r1, r1, #2
   15098:	str	r0, [sp, #12]
   1509c:	ldr	r0, [sp, #76]	; 0x4c
   150a0:	str	r1, [sp, #4]
   150a4:	mov	r1, sl
   150a8:	str	r0, [sp, #16]
   150ac:	mov	r0, r6
   150b0:	bl	1417c <__assert_fail@plt+0x30f4>
   150b4:	mov	r8, r0
   150b8:	b	15160 <__assert_fail@plt+0x40d8>
   150bc:	ldr	r2, [sp, #84]	; 0x54
   150c0:	b	15064 <__assert_fail@plt+0x3fdc>
   150c4:	mov	r0, #5
   150c8:	ldr	r1, [sp, #56]	; 0x38
   150cc:	ldr	r2, [fp, #-84]	; 0xffffffac
   150d0:	mov	r3, r9
   150d4:	str	r0, [sp]
   150d8:	ldr	r0, [fp, #12]
   150dc:	str	r0, [sp, #4]
   150e0:	ldr	r0, [fp, #16]
   150e4:	str	r0, [sp, #8]
   150e8:	ldr	r0, [sp, #72]	; 0x48
   150ec:	str	r0, [sp, #12]
   150f0:	ldr	r0, [sp, #76]	; 0x4c
   150f4:	str	r0, [sp, #16]
   150f8:	ldr	r0, [sp, #80]	; 0x50
   150fc:	b	150b0 <__assert_fail@plt+0x4028>
   15100:	mov	r0, #0
   15104:	str	r0, [fp, #-72]	; 0xffffffb8
   15108:	ldr	r1, [sp, #92]	; 0x5c
   1510c:	cmp	r1, #0
   15110:	beq	15150 <__assert_fail@plt+0x40c8>
   15114:	ldr	r0, [fp, #-72]	; 0xffffffb8
   15118:	ldr	r2, [sp, #80]	; 0x50
   1511c:	tst	r0, #1
   15120:	bne	15154 <__assert_fail@plt+0x40cc>
   15124:	ldrb	r0, [r1]
   15128:	cmp	r0, #0
   1512c:	beq	15154 <__assert_fail@plt+0x40cc>
   15130:	add	r1, r1, #1
   15134:	cmp	r8, sl
   15138:	strbcc	r0, [r2, r8]
   1513c:	add	r8, r8, #1
   15140:	ldrb	r0, [r1], #1
   15144:	cmp	r0, #0
   15148:	bne	15134 <__assert_fail@plt+0x40ac>
   1514c:	b	15154 <__assert_fail@plt+0x40cc>
   15150:	ldr	r2, [sp, #80]	; 0x50
   15154:	cmp	r8, sl
   15158:	movcc	r0, #0
   1515c:	strbcc	r0, [r2, r8]
   15160:	mov	r0, r8
   15164:	sub	sp, fp, #28
   15168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1516c:	mov	r2, #1
   15170:	b	1504c <__assert_fail@plt+0x3fc4>
   15174:	ldr	r2, [sp, #84]	; 0x54
   15178:	mov	r7, #5
   1517c:	b	15064 <__assert_fail@plt+0x3fdc>
   15180:	bl	1107c <abort@plt>
   15184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15188:	add	fp, sp, #28
   1518c:	sub	sp, sp, #28
   15190:	movw	r5, #41336	; 0xa178
   15194:	cmp	r2, #0
   15198:	mov	r4, r1
   1519c:	mov	r7, r0
   151a0:	str	r0, [sp, #20]
   151a4:	movt	r5, #2
   151a8:	movne	r5, r2
   151ac:	bl	10fa4 <__errno_location@plt>
   151b0:	mov	sl, r0
   151b4:	ldm	r5, {r0, r1}
   151b8:	ldr	r2, [r5, #40]	; 0x28
   151bc:	ldr	r3, [r5, #44]	; 0x2c
   151c0:	add	r9, r5, #8
   151c4:	ldr	r6, [sl]
   151c8:	orr	r8, r1, #1
   151cc:	mov	r1, #0
   151d0:	str	r6, [sp, #24]
   151d4:	stm	sp, {r0, r8, r9}
   151d8:	str	r2, [sp, #12]
   151dc:	str	r3, [sp, #16]
   151e0:	mov	r0, #0
   151e4:	mov	r2, r7
   151e8:	mov	r3, r4
   151ec:	mov	r6, r4
   151f0:	bl	1417c <__assert_fail@plt+0x30f4>
   151f4:	add	r7, r0, #1
   151f8:	mov	r0, r7
   151fc:	bl	16394 <__assert_fail@plt+0x530c>
   15200:	mov	r4, r0
   15204:	ldr	r0, [r5]
   15208:	ldr	r2, [r5, #44]	; 0x2c
   1520c:	ldr	r1, [r5, #40]	; 0x28
   15210:	mov	r3, r6
   15214:	stm	sp, {r0, r8, r9}
   15218:	str	r2, [sp, #16]
   1521c:	str	r1, [sp, #12]
   15220:	mov	r0, r4
   15224:	mov	r1, r7
   15228:	ldr	r2, [sp, #20]
   1522c:	bl	1417c <__assert_fail@plt+0x30f4>
   15230:	ldr	r0, [sp, #24]
   15234:	str	r0, [sl]
   15238:	mov	r0, r4
   1523c:	sub	sp, fp, #28
   15240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15248:	add	fp, sp, #28
   1524c:	sub	sp, sp, #36	; 0x24
   15250:	movw	r8, #41336	; 0xa178
   15254:	cmp	r3, #0
   15258:	mov	r4, r2
   1525c:	str	r2, [sp, #24]
   15260:	mov	r5, r1
   15264:	mov	r6, r0
   15268:	str	r0, [sp, #20]
   1526c:	movt	r8, #2
   15270:	movne	r8, r3
   15274:	bl	10fa4 <__errno_location@plt>
   15278:	str	r0, [sp, #28]
   1527c:	cmp	r4, #0
   15280:	add	sl, r8, #8
   15284:	ldm	r8, {r3, r9}
   15288:	ldr	r7, [r0]
   1528c:	ldr	r1, [r8, #40]	; 0x28
   15290:	ldr	r2, [r8, #44]	; 0x2c
   15294:	mov	r0, #0
   15298:	orreq	r9, r9, #1
   1529c:	str	r7, [sp, #32]
   152a0:	mov	r7, r5
   152a4:	stm	sp, {r3, r9, sl}
   152a8:	str	r1, [sp, #12]
   152ac:	str	r2, [sp, #16]
   152b0:	mov	r1, #0
   152b4:	mov	r2, r6
   152b8:	mov	r3, r5
   152bc:	bl	1417c <__assert_fail@plt+0x30f4>
   152c0:	add	r4, r0, #1
   152c4:	mov	r5, r0
   152c8:	mov	r0, r4
   152cc:	bl	16394 <__assert_fail@plt+0x530c>
   152d0:	mov	r6, r0
   152d4:	ldr	r0, [r8]
   152d8:	ldr	r2, [r8, #44]	; 0x2c
   152dc:	ldr	r1, [r8, #40]	; 0x28
   152e0:	mov	r3, r7
   152e4:	stm	sp, {r0, r9, sl}
   152e8:	str	r2, [sp, #16]
   152ec:	str	r1, [sp, #12]
   152f0:	mov	r0, r6
   152f4:	mov	r1, r4
   152f8:	ldr	r2, [sp, #20]
   152fc:	bl	1417c <__assert_fail@plt+0x30f4>
   15300:	ldr	r0, [sp, #24]
   15304:	ldr	r1, [sp, #32]
   15308:	ldr	r2, [sp, #28]
   1530c:	cmp	r0, #0
   15310:	str	r1, [r2]
   15314:	strne	r5, [r0]
   15318:	mov	r0, r6
   1531c:	sub	sp, fp, #28
   15320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15324:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15328:	add	fp, sp, #24
   1532c:	movw	r5, #41204	; 0xa0f4
   15330:	movw	r8, #41200	; 0xa0f0
   15334:	movt	r5, #2
   15338:	movt	r8, #2
   1533c:	ldr	r0, [r5]
   15340:	ldr	r4, [r8]
   15344:	cmp	r0, #2
   15348:	blt	15374 <__assert_fail@plt+0x42ec>
   1534c:	add	r7, r4, #12
   15350:	mov	r6, #0
   15354:	ldr	r0, [r7, r6, lsl #3]
   15358:	bl	13e74 <__assert_fail@plt+0x2dec>
   1535c:	ldr	r1, [r5]
   15360:	add	r2, r6, #2
   15364:	add	r0, r6, #1
   15368:	mov	r6, r0
   1536c:	cmp	r2, r1
   15370:	blt	15354 <__assert_fail@plt+0x42cc>
   15374:	ldr	r0, [r4, #4]
   15378:	movw	r7, #41384	; 0xa1a8
   1537c:	movt	r7, #2
   15380:	cmp	r0, r7
   15384:	beq	1539c <__assert_fail@plt+0x4314>
   15388:	bl	13e74 <__assert_fail@plt+0x2dec>
   1538c:	movw	r0, #41208	; 0xa0f8
   15390:	mov	r6, #256	; 0x100
   15394:	movt	r0, #2
   15398:	strd	r6, [r0]
   1539c:	movw	r6, #41208	; 0xa0f8
   153a0:	movt	r6, #2
   153a4:	cmp	r4, r6
   153a8:	beq	153b8 <__assert_fail@plt+0x4330>
   153ac:	mov	r0, r4
   153b0:	bl	13e74 <__assert_fail@plt+0x2dec>
   153b4:	str	r6, [r8]
   153b8:	mov	r0, #1
   153bc:	str	r0, [r5]
   153c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   153c4:	movw	r3, #41336	; 0xa178
   153c8:	mvn	r2, #0
   153cc:	movt	r3, #2
   153d0:	b	153d4 <__assert_fail@plt+0x434c>
   153d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   153d8:	add	fp, sp, #28
   153dc:	sub	sp, sp, #44	; 0x2c
   153e0:	mov	r7, r3
   153e4:	str	r2, [sp, #36]	; 0x24
   153e8:	str	r1, [sp, #32]
   153ec:	mov	r5, r0
   153f0:	bl	10fa4 <__errno_location@plt>
   153f4:	cmp	r5, #0
   153f8:	blt	15564 <__assert_fail@plt+0x44dc>
   153fc:	cmn	r5, #-2147483647	; 0x80000001
   15400:	beq	15564 <__assert_fail@plt+0x44dc>
   15404:	movw	r8, #41204	; 0xa0f4
   15408:	movw	r4, #41200	; 0xa0f0
   1540c:	str	r0, [sp, #28]
   15410:	ldr	r0, [r0]
   15414:	movt	r8, #2
   15418:	movt	r4, #2
   1541c:	ldr	r1, [r8]
   15420:	ldr	r6, [r4]
   15424:	str	r0, [sp, #24]
   15428:	cmp	r1, r5
   1542c:	ble	15438 <__assert_fail@plt+0x43b0>
   15430:	mov	sl, r6
   15434:	b	154a0 <__assert_fail@plt+0x4418>
   15438:	movw	r9, #41208	; 0xa0f8
   1543c:	mov	r0, #8
   15440:	add	r2, r5, #1
   15444:	str	r1, [fp, #-32]	; 0xffffffe0
   15448:	mvn	r3, #-2147483648	; 0x80000000
   1544c:	movt	r9, #2
   15450:	str	r0, [sp]
   15454:	sub	r2, r2, r1
   15458:	sub	r1, fp, #32
   1545c:	subs	r0, r6, r9
   15460:	movne	r0, r6
   15464:	bl	16594 <__assert_fail@plt+0x550c>
   15468:	cmp	r6, r9
   1546c:	mov	sl, r0
   15470:	str	r0, [r4]
   15474:	ldrdeq	r0, [r9]
   15478:	stmeq	sl, {r0, r1}
   1547c:	ldr	r1, [r8]
   15480:	ldr	r2, [fp, #-32]	; 0xffffffe0
   15484:	add	r0, sl, r1, lsl #3
   15488:	sub	r1, r2, r1
   1548c:	lsl	r2, r1, #3
   15490:	mov	r1, #0
   15494:	bl	10fbc <memset@plt>
   15498:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1549c:	str	r0, [r8]
   154a0:	mov	r9, sl
   154a4:	ldr	r6, [r9, r5, lsl #3]!
   154a8:	ldr	r4, [r9, #4]!
   154ac:	ldm	r7, {r0, r1}
   154b0:	ldr	r2, [r7, #40]	; 0x28
   154b4:	ldr	r3, [r7, #44]	; 0x2c
   154b8:	orr	r8, r1, #1
   154bc:	add	r1, r7, #8
   154c0:	stm	sp, {r0, r8}
   154c4:	add	r0, sp, #8
   154c8:	str	r1, [sp, #20]
   154cc:	stm	r0, {r1, r2, r3}
   154d0:	mov	r0, r4
   154d4:	mov	r1, r6
   154d8:	ldr	r2, [sp, #32]
   154dc:	ldr	r3, [sp, #36]	; 0x24
   154e0:	bl	1417c <__assert_fail@plt+0x30f4>
   154e4:	cmp	r6, r0
   154e8:	bhi	1554c <__assert_fail@plt+0x44c4>
   154ec:	add	r6, r0, #1
   154f0:	movw	r0, #41384	; 0xa1a8
   154f4:	movt	r0, #2
   154f8:	str	r6, [sl, r5, lsl #3]
   154fc:	cmp	r4, r0
   15500:	beq	1550c <__assert_fail@plt+0x4484>
   15504:	mov	r0, r4
   15508:	bl	13e74 <__assert_fail@plt+0x2dec>
   1550c:	mov	r0, r6
   15510:	bl	16394 <__assert_fail@plt+0x530c>
   15514:	str	r0, [r9]
   15518:	mov	r4, r0
   1551c:	add	r3, sp, #8
   15520:	ldr	r0, [r7]
   15524:	ldr	r1, [r7, #40]	; 0x28
   15528:	ldr	r2, [r7, #44]	; 0x2c
   1552c:	stm	sp, {r0, r8}
   15530:	ldr	r0, [sp, #20]
   15534:	stm	r3, {r0, r1, r2}
   15538:	mov	r0, r4
   1553c:	mov	r1, r6
   15540:	ldr	r2, [sp, #32]
   15544:	ldr	r3, [sp, #36]	; 0x24
   15548:	bl	1417c <__assert_fail@plt+0x30f4>
   1554c:	ldr	r0, [sp, #28]
   15550:	ldr	r1, [sp, #24]
   15554:	str	r1, [r0]
   15558:	mov	r0, r4
   1555c:	sub	sp, fp, #28
   15560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15564:	bl	1107c <abort@plt>
   15568:	movw	r3, #41336	; 0xa178
   1556c:	movt	r3, #2
   15570:	b	153d4 <__assert_fail@plt+0x434c>
   15574:	movw	r3, #41336	; 0xa178
   15578:	mov	r1, r0
   1557c:	mov	r0, #0
   15580:	mvn	r2, #0
   15584:	movt	r3, #2
   15588:	b	153d4 <__assert_fail@plt+0x434c>
   1558c:	movw	r3, #41336	; 0xa178
   15590:	mov	r2, r1
   15594:	mov	r1, r0
   15598:	mov	r0, #0
   1559c:	movt	r3, #2
   155a0:	b	153d4 <__assert_fail@plt+0x434c>
   155a4:	push	{fp, lr}
   155a8:	mov	fp, sp
   155ac:	sub	sp, sp, #48	; 0x30
   155b0:	vmov.i32	q8, #0	; 0x00000000
   155b4:	mov	ip, #32
   155b8:	mov	r3, sp
   155bc:	mov	lr, r2
   155c0:	cmp	r1, #10
   155c4:	add	r2, r3, #16
   155c8:	vst1.64	{d16-d17}, [r3], ip
   155cc:	vst1.64	{d16-d17}, [r3]
   155d0:	vst1.64	{d16-d17}, [r2]
   155d4:	beq	155f4 <__assert_fail@plt+0x456c>
   155d8:	str	r1, [sp]
   155dc:	mov	r3, sp
   155e0:	mov	r1, lr
   155e4:	mvn	r2, #0
   155e8:	bl	153d4 <__assert_fail@plt+0x434c>
   155ec:	mov	sp, fp
   155f0:	pop	{fp, pc}
   155f4:	bl	1107c <abort@plt>
   155f8:	push	{r4, sl, fp, lr}
   155fc:	add	fp, sp, #8
   15600:	sub	sp, sp, #48	; 0x30
   15604:	mov	ip, r3
   15608:	mov	r3, sp
   1560c:	vmov.i32	q8, #0	; 0x00000000
   15610:	mov	lr, #32
   15614:	cmp	r1, #10
   15618:	add	r4, r3, #16
   1561c:	vst1.64	{d16-d17}, [r3], lr
   15620:	vst1.64	{d16-d17}, [r3]
   15624:	vst1.64	{d16-d17}, [r4]
   15628:	beq	15648 <__assert_fail@plt+0x45c0>
   1562c:	str	r1, [sp]
   15630:	mov	r1, r2
   15634:	mov	r3, sp
   15638:	mov	r2, ip
   1563c:	bl	153d4 <__assert_fail@plt+0x434c>
   15640:	sub	sp, fp, #8
   15644:	pop	{r4, sl, fp, pc}
   15648:	bl	1107c <abort@plt>
   1564c:	push	{fp, lr}
   15650:	mov	fp, sp
   15654:	sub	sp, sp, #48	; 0x30
   15658:	mov	r3, sp
   1565c:	vmov.i32	q8, #0	; 0x00000000
   15660:	mov	ip, #32
   15664:	cmp	r0, #10
   15668:	add	r2, r3, #16
   1566c:	vst1.64	{d16-d17}, [r3], ip
   15670:	vst1.64	{d16-d17}, [r3]
   15674:	vst1.64	{d16-d17}, [r2]
   15678:	beq	15698 <__assert_fail@plt+0x4610>
   1567c:	str	r0, [sp]
   15680:	mov	r3, sp
   15684:	mov	r0, #0
   15688:	mvn	r2, #0
   1568c:	bl	153d4 <__assert_fail@plt+0x434c>
   15690:	mov	sp, fp
   15694:	pop	{fp, pc}
   15698:	bl	1107c <abort@plt>
   1569c:	push	{fp, lr}
   156a0:	mov	fp, sp
   156a4:	sub	sp, sp, #48	; 0x30
   156a8:	mov	r3, sp
   156ac:	vmov.i32	q8, #0	; 0x00000000
   156b0:	mov	ip, #32
   156b4:	cmp	r0, #10
   156b8:	add	lr, r3, #16
   156bc:	vst1.64	{d16-d17}, [r3], ip
   156c0:	vst1.64	{d16-d17}, [r3]
   156c4:	vst1.64	{d16-d17}, [lr]
   156c8:	beq	156e4 <__assert_fail@plt+0x465c>
   156cc:	str	r0, [sp]
   156d0:	mov	r3, sp
   156d4:	mov	r0, #0
   156d8:	bl	153d4 <__assert_fail@plt+0x434c>
   156dc:	mov	sp, fp
   156e0:	pop	{fp, pc}
   156e4:	bl	1107c <abort@plt>
   156e8:	push	{r4, sl, fp, lr}
   156ec:	add	fp, sp, #8
   156f0:	sub	sp, sp, #48	; 0x30
   156f4:	mov	lr, r0
   156f8:	movw	r0, #41336	; 0xa178
   156fc:	mov	r3, #32
   15700:	mov	ip, r1
   15704:	mov	r4, #1
   15708:	movt	r0, #2
   1570c:	add	r1, r0, #16
   15710:	vld1.64	{d16-d17}, [r0], r3
   15714:	mov	r3, sp
   15718:	vld1.64	{d18-d19}, [r1]
   1571c:	add	r1, r3, #16
   15720:	vld1.64	{d20-d21}, [r0]
   15724:	add	r0, r3, #32
   15728:	vst1.64	{d18-d19}, [r1]
   1572c:	mov	r1, r3
   15730:	vst1.64	{d20-d21}, [r0]
   15734:	mov	r0, #28
   15738:	and	r0, r0, r2, lsr #3
   1573c:	and	r2, r2, #31
   15740:	vst1.64	{d16-d17}, [r1], r0
   15744:	ldr	r0, [r1, #8]
   15748:	bic	r4, r4, r0, lsr r2
   1574c:	eor	r0, r0, r4, lsl r2
   15750:	mov	r2, ip
   15754:	str	r0, [r1, #8]
   15758:	mov	r0, #0
   1575c:	mov	r1, lr
   15760:	bl	153d4 <__assert_fail@plt+0x434c>
   15764:	sub	sp, fp, #8
   15768:	pop	{r4, sl, fp, pc}
   1576c:	push	{fp, lr}
   15770:	mov	fp, sp
   15774:	sub	sp, sp, #48	; 0x30
   15778:	mov	ip, r0
   1577c:	movw	r0, #41336	; 0xa178
   15780:	mov	r3, #32
   15784:	movt	r0, #2
   15788:	add	r2, r0, #16
   1578c:	vld1.64	{d16-d17}, [r0], r3
   15790:	mov	r3, sp
   15794:	vld1.64	{d18-d19}, [r2]
   15798:	add	r2, r3, #16
   1579c:	vld1.64	{d20-d21}, [r0]
   157a0:	add	r0, r3, #32
   157a4:	vst1.64	{d18-d19}, [r2]
   157a8:	mov	r2, r3
   157ac:	vst1.64	{d20-d21}, [r0]
   157b0:	mov	r0, #28
   157b4:	and	r0, r0, r1, lsr #3
   157b8:	and	r1, r1, #31
   157bc:	vst1.64	{d16-d17}, [r2], r0
   157c0:	mov	r0, #1
   157c4:	ldr	lr, [r2, #8]
   157c8:	bic	r0, r0, lr, lsr r1
   157cc:	eor	r0, lr, r0, lsl r1
   157d0:	mov	r1, ip
   157d4:	str	r0, [r2, #8]
   157d8:	mov	r0, #0
   157dc:	mvn	r2, #0
   157e0:	bl	153d4 <__assert_fail@plt+0x434c>
   157e4:	mov	sp, fp
   157e8:	pop	{fp, pc}
   157ec:	push	{fp, lr}
   157f0:	mov	fp, sp
   157f4:	sub	sp, sp, #48	; 0x30
   157f8:	movw	r2, #41336	; 0xa178
   157fc:	mov	r3, #32
   15800:	mov	r1, r0
   15804:	movt	r2, #2
   15808:	add	r0, r2, #16
   1580c:	vld1.64	{d16-d17}, [r2], r3
   15810:	mov	r3, sp
   15814:	vld1.64	{d18-d19}, [r0]
   15818:	add	r0, r3, #16
   1581c:	vld1.64	{d20-d21}, [r2]
   15820:	mov	r2, r3
   15824:	vst1.64	{d18-d19}, [r0]
   15828:	add	r0, r3, #32
   1582c:	vst1.64	{d20-d21}, [r0]
   15830:	mov	r0, #12
   15834:	vst1.64	{d16-d17}, [r2], r0
   15838:	ldr	r0, [r2]
   1583c:	orr	r0, r0, #67108864	; 0x4000000
   15840:	str	r0, [r2]
   15844:	mov	r0, #0
   15848:	mvn	r2, #0
   1584c:	bl	153d4 <__assert_fail@plt+0x434c>
   15850:	mov	sp, fp
   15854:	pop	{fp, pc}
   15858:	push	{fp, lr}
   1585c:	mov	fp, sp
   15860:	sub	sp, sp, #48	; 0x30
   15864:	mov	ip, r1
   15868:	mov	r1, r0
   1586c:	movw	r0, #41336	; 0xa178
   15870:	mov	r3, #32
   15874:	movt	r0, #2
   15878:	add	r2, r0, #16
   1587c:	vld1.64	{d16-d17}, [r0], r3
   15880:	mov	r3, sp
   15884:	vld1.64	{d18-d19}, [r2]
   15888:	add	r2, r3, #16
   1588c:	vld1.64	{d20-d21}, [r0]
   15890:	add	r0, r3, #32
   15894:	vst1.64	{d18-d19}, [r2]
   15898:	mov	r2, r3
   1589c:	vst1.64	{d20-d21}, [r0]
   158a0:	mov	r0, #12
   158a4:	vst1.64	{d16-d17}, [r2], r0
   158a8:	ldr	r0, [r2]
   158ac:	orr	r0, r0, #67108864	; 0x4000000
   158b0:	str	r0, [r2]
   158b4:	mov	r0, #0
   158b8:	mov	r2, ip
   158bc:	bl	153d4 <__assert_fail@plt+0x434c>
   158c0:	mov	sp, fp
   158c4:	pop	{fp, pc}
   158c8:	push	{r4, sl, fp, lr}
   158cc:	add	fp, sp, #8
   158d0:	sub	sp, sp, #96	; 0x60
   158d4:	mov	ip, r2
   158d8:	mov	r2, sp
   158dc:	vmov.i32	q8, #0	; 0x00000000
   158e0:	mov	r4, #28
   158e4:	cmp	r1, #10
   158e8:	mov	r3, r2
   158ec:	add	lr, r2, #16
   158f0:	vst1.64	{d16-d17}, [r3], r4
   158f4:	vst1.64	{d16-d17}, [lr]
   158f8:	vst1.32	{d16-d17}, [r3]
   158fc:	beq	1594c <__assert_fail@plt+0x48c4>
   15900:	vld1.64	{d16-d17}, [r2], r4
   15904:	vld1.64	{d18-d19}, [lr]
   15908:	add	r3, sp, #48	; 0x30
   1590c:	add	r4, r3, #4
   15910:	vld1.32	{d20-d21}, [r2]
   15914:	add	r2, r3, #20
   15918:	vst1.32	{d16-d17}, [r4]
   1591c:	vst1.32	{d18-d19}, [r2]
   15920:	add	r2, r3, #32
   15924:	vst1.32	{d20-d21}, [r2]
   15928:	str	r1, [sp, #48]	; 0x30
   1592c:	mvn	r2, #0
   15930:	ldr	r1, [sp, #60]	; 0x3c
   15934:	orr	r1, r1, #67108864	; 0x4000000
   15938:	str	r1, [sp, #60]	; 0x3c
   1593c:	mov	r1, ip
   15940:	bl	153d4 <__assert_fail@plt+0x434c>
   15944:	sub	sp, fp, #8
   15948:	pop	{r4, sl, fp, pc}
   1594c:	bl	1107c <abort@plt>
   15950:	push	{r4, r5, fp, lr}
   15954:	add	fp, sp, #8
   15958:	sub	sp, sp, #48	; 0x30
   1595c:	mov	ip, r3
   15960:	movw	r3, #41336	; 0xa178
   15964:	mov	lr, #32
   15968:	cmp	r1, #0
   1596c:	mov	r5, sp
   15970:	movt	r3, #2
   15974:	cmpne	r2, #0
   15978:	add	r4, r3, #16
   1597c:	vld1.64	{d16-d17}, [r3], lr
   15980:	vld1.64	{d18-d19}, [r4]
   15984:	add	r4, r5, #16
   15988:	vld1.64	{d20-d21}, [r3]
   1598c:	vst1.64	{d16-d17}, [r5], lr
   15990:	mov	r3, #10
   15994:	vst1.64	{d18-d19}, [r4]
   15998:	vst1.64	{d20-d21}, [r5]
   1599c:	str	r3, [sp]
   159a0:	bne	159a8 <__assert_fail@plt+0x4920>
   159a4:	bl	1107c <abort@plt>
   159a8:	str	r2, [sp, #44]	; 0x2c
   159ac:	str	r1, [sp, #40]	; 0x28
   159b0:	mov	r3, sp
   159b4:	mov	r1, ip
   159b8:	mvn	r2, #0
   159bc:	bl	153d4 <__assert_fail@plt+0x434c>
   159c0:	sub	sp, fp, #8
   159c4:	pop	{r4, r5, fp, pc}
   159c8:	push	{r4, r5, fp, lr}
   159cc:	add	fp, sp, #8
   159d0:	sub	sp, sp, #48	; 0x30
   159d4:	mov	lr, r3
   159d8:	movw	r3, #41336	; 0xa178
   159dc:	mov	ip, #32
   159e0:	cmp	r1, #0
   159e4:	mov	r5, sp
   159e8:	movt	r3, #2
   159ec:	cmpne	r2, #0
   159f0:	add	r4, r3, #16
   159f4:	vld1.64	{d16-d17}, [r3], ip
   159f8:	vld1.64	{d18-d19}, [r4]
   159fc:	add	r4, r5, #16
   15a00:	vld1.64	{d20-d21}, [r3]
   15a04:	vst1.64	{d16-d17}, [r5], ip
   15a08:	mov	r3, #10
   15a0c:	vst1.64	{d18-d19}, [r4]
   15a10:	vst1.64	{d20-d21}, [r5]
   15a14:	str	r3, [sp]
   15a18:	bne	15a20 <__assert_fail@plt+0x4998>
   15a1c:	bl	1107c <abort@plt>
   15a20:	ldr	ip, [fp, #8]
   15a24:	str	r2, [sp, #44]	; 0x2c
   15a28:	str	r1, [sp, #40]	; 0x28
   15a2c:	mov	r3, sp
   15a30:	mov	r1, lr
   15a34:	mov	r2, ip
   15a38:	bl	153d4 <__assert_fail@plt+0x434c>
   15a3c:	sub	sp, fp, #8
   15a40:	pop	{r4, r5, fp, pc}
   15a44:	push	{r4, sl, fp, lr}
   15a48:	add	fp, sp, #8
   15a4c:	sub	sp, sp, #48	; 0x30
   15a50:	mov	ip, r2
   15a54:	movw	r2, #41336	; 0xa178
   15a58:	mov	lr, #32
   15a5c:	cmp	r0, #0
   15a60:	mov	r4, sp
   15a64:	movt	r2, #2
   15a68:	cmpne	r1, #0
   15a6c:	add	r3, r2, #16
   15a70:	vld1.64	{d16-d17}, [r2], lr
   15a74:	vld1.64	{d18-d19}, [r3]
   15a78:	add	r3, r4, #16
   15a7c:	vld1.64	{d20-d21}, [r2]
   15a80:	vst1.64	{d16-d17}, [r4], lr
   15a84:	mov	r2, #10
   15a88:	vst1.64	{d18-d19}, [r3]
   15a8c:	vst1.64	{d20-d21}, [r4]
   15a90:	str	r2, [sp]
   15a94:	bne	15a9c <__assert_fail@plt+0x4a14>
   15a98:	bl	1107c <abort@plt>
   15a9c:	str	r1, [sp, #44]	; 0x2c
   15aa0:	str	r0, [sp, #40]	; 0x28
   15aa4:	mov	r3, sp
   15aa8:	mov	r0, #0
   15aac:	mov	r1, ip
   15ab0:	mvn	r2, #0
   15ab4:	bl	153d4 <__assert_fail@plt+0x434c>
   15ab8:	sub	sp, fp, #8
   15abc:	pop	{r4, sl, fp, pc}
   15ac0:	push	{r4, r5, fp, lr}
   15ac4:	add	fp, sp, #8
   15ac8:	sub	sp, sp, #48	; 0x30
   15acc:	mov	lr, r2
   15ad0:	movw	r2, #41336	; 0xa178
   15ad4:	mov	ip, r3
   15ad8:	mov	r3, #32
   15adc:	cmp	r0, #0
   15ae0:	mov	r5, sp
   15ae4:	movt	r2, #2
   15ae8:	cmpne	r1, #0
   15aec:	add	r4, r2, #16
   15af0:	vld1.64	{d16-d17}, [r2], r3
   15af4:	vld1.64	{d18-d19}, [r4]
   15af8:	add	r4, r5, #16
   15afc:	vld1.64	{d20-d21}, [r2]
   15b00:	vst1.64	{d16-d17}, [r5], r3
   15b04:	mov	r2, #10
   15b08:	vst1.64	{d18-d19}, [r4]
   15b0c:	vst1.64	{d20-d21}, [r5]
   15b10:	str	r2, [sp]
   15b14:	bne	15b1c <__assert_fail@plt+0x4a94>
   15b18:	bl	1107c <abort@plt>
   15b1c:	str	r1, [sp, #44]	; 0x2c
   15b20:	str	r0, [sp, #40]	; 0x28
   15b24:	mov	r3, sp
   15b28:	mov	r0, #0
   15b2c:	mov	r1, lr
   15b30:	mov	r2, ip
   15b34:	bl	153d4 <__assert_fail@plt+0x434c>
   15b38:	sub	sp, fp, #8
   15b3c:	pop	{r4, r5, fp, pc}
   15b40:	movw	r3, #41216	; 0xa100
   15b44:	movt	r3, #2
   15b48:	b	153d4 <__assert_fail@plt+0x434c>
   15b4c:	movw	r3, #41216	; 0xa100
   15b50:	mov	r2, r1
   15b54:	mov	r1, r0
   15b58:	mov	r0, #0
   15b5c:	movt	r3, #2
   15b60:	b	153d4 <__assert_fail@plt+0x434c>
   15b64:	movw	r3, #41216	; 0xa100
   15b68:	mvn	r2, #0
   15b6c:	movt	r3, #2
   15b70:	b	153d4 <__assert_fail@plt+0x434c>
   15b74:	movw	r3, #41216	; 0xa100
   15b78:	mov	r1, r0
   15b7c:	mov	r0, #0
   15b80:	mvn	r2, #0
   15b84:	movt	r3, #2
   15b88:	b	153d4 <__assert_fail@plt+0x434c>
   15b8c:	push	{r4, r5, fp, lr}
   15b90:	add	fp, sp, #8
   15b94:	mov	r5, r0
   15b98:	mov	r4, r1
   15b9c:	mov	r0, #0
   15ba0:	mov	r2, #5
   15ba4:	mov	r1, r5
   15ba8:	bl	10ec0 <dcgettext@plt>
   15bac:	cmp	r0, r5
   15bb0:	popne	{r4, r5, fp, pc}
   15bb4:	bl	1837c <__assert_fail@plt+0x72f4>
   15bb8:	ldrb	r1, [r0]
   15bbc:	and	r1, r1, #223	; 0xdf
   15bc0:	cmp	r1, #71	; 0x47
   15bc4:	beq	15c2c <__assert_fail@plt+0x4ba4>
   15bc8:	cmp	r1, #85	; 0x55
   15bcc:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15bd0:	ldrb	r1, [r0, #1]
   15bd4:	and	r1, r1, #223	; 0xdf
   15bd8:	cmp	r1, #84	; 0x54
   15bdc:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15be0:	ldrb	r1, [r0, #2]
   15be4:	and	r1, r1, #223	; 0xdf
   15be8:	cmp	r1, #70	; 0x46
   15bec:	ldrbeq	r1, [r0, #3]
   15bf0:	cmpeq	r1, #45	; 0x2d
   15bf4:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15bf8:	ldrb	r1, [r0, #4]
   15bfc:	cmp	r1, #56	; 0x38
   15c00:	ldrbeq	r0, [r0, #5]
   15c04:	cmpeq	r0, #0
   15c08:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15c0c:	ldrb	r1, [r5]
   15c10:	movw	r2, #38709	; 0x9735
   15c14:	movw	r0, #38713	; 0x9739
   15c18:	movt	r2, #1
   15c1c:	movt	r0, #1
   15c20:	cmp	r1, #96	; 0x60
   15c24:	moveq	r0, r2
   15c28:	pop	{r4, r5, fp, pc}
   15c2c:	ldrb	r1, [r0, #1]
   15c30:	and	r1, r1, #223	; 0xdf
   15c34:	cmp	r1, #66	; 0x42
   15c38:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15c3c:	ldrb	r1, [r0, #2]
   15c40:	cmp	r1, #49	; 0x31
   15c44:	ldrbeq	r1, [r0, #3]
   15c48:	cmpeq	r1, #56	; 0x38
   15c4c:	beq	15c6c <__assert_fail@plt+0x4be4>
   15c50:	movw	r1, #38703	; 0x972f
   15c54:	movw	r0, #38707	; 0x9733
   15c58:	cmp	r4, #9
   15c5c:	movt	r1, #1
   15c60:	movt	r0, #1
   15c64:	moveq	r0, r1
   15c68:	pop	{r4, r5, fp, pc}
   15c6c:	ldrb	r1, [r0, #4]
   15c70:	cmp	r1, #48	; 0x30
   15c74:	ldrbeq	r1, [r0, #5]
   15c78:	cmpeq	r1, #51	; 0x33
   15c7c:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15c80:	ldrb	r1, [r0, #6]
   15c84:	cmp	r1, #48	; 0x30
   15c88:	ldrbeq	r0, [r0, #7]
   15c8c:	cmpeq	r0, #0
   15c90:	bne	15c50 <__assert_fail@plt+0x4bc8>
   15c94:	ldrb	r1, [r5]
   15c98:	movw	r2, #38717	; 0x973d
   15c9c:	movw	r0, #38721	; 0x9741
   15ca0:	movt	r2, #1
   15ca4:	movt	r0, #1
   15ca8:	b	15c20 <__assert_fail@plt+0x4b98>
   15cac:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15cb0:	add	fp, sp, #24
   15cb4:	sub	sp, sp, #32
   15cb8:	ldr	r6, [fp, #12]
   15cbc:	ldr	r7, [fp, #8]
   15cc0:	mov	r4, r2
   15cc4:	mov	r8, r0
   15cc8:	cmp	r1, #0
   15ccc:	beq	15cf4 <__assert_fail@plt+0x4c6c>
   15cd0:	movw	r2, #38808	; 0x9798
   15cd4:	mov	r5, r1
   15cd8:	str	r3, [sp, #4]
   15cdc:	str	r4, [sp]
   15ce0:	mov	r0, r8
   15ce4:	mov	r1, #1
   15ce8:	movt	r2, #1
   15cec:	mov	r3, r5
   15cf0:	b	15d0c <__assert_fail@plt+0x4c84>
   15cf4:	movw	r2, #38820	; 0x97a4
   15cf8:	str	r3, [sp]
   15cfc:	mov	r0, r8
   15d00:	mov	r1, #1
   15d04:	mov	r3, r4
   15d08:	movt	r2, #1
   15d0c:	bl	10fe0 <__fprintf_chk@plt>
   15d10:	movw	r1, #38827	; 0x97ab
   15d14:	mov	r0, #0
   15d18:	mov	r2, #5
   15d1c:	movt	r1, #1
   15d20:	bl	10ec0 <dcgettext@plt>
   15d24:	movw	r2, #39545	; 0x9a79
   15d28:	mov	r3, r0
   15d2c:	movw	r0, #2022	; 0x7e6
   15d30:	mov	r1, #1
   15d34:	str	r0, [sp]
   15d38:	movt	r2, #1
   15d3c:	mov	r0, r8
   15d40:	bl	10fe0 <__fprintf_chk@plt>
   15d44:	movw	r4, #36846	; 0x8fee
   15d48:	mov	r1, r8
   15d4c:	movt	r4, #1
   15d50:	mov	r0, r4
   15d54:	bl	10e30 <fputs_unlocked@plt>
   15d58:	movw	r1, #38831	; 0x97af
   15d5c:	mov	r0, #0
   15d60:	mov	r2, #5
   15d64:	movt	r1, #1
   15d68:	bl	10ec0 <dcgettext@plt>
   15d6c:	movw	r3, #39002	; 0x985a
   15d70:	mov	r2, r0
   15d74:	mov	r0, r8
   15d78:	mov	r1, #1
   15d7c:	movt	r3, #1
   15d80:	bl	10fe0 <__fprintf_chk@plt>
   15d84:	mov	r0, r4
   15d88:	mov	r1, r8
   15d8c:	bl	10e30 <fputs_unlocked@plt>
   15d90:	cmp	r6, #9
   15d94:	bhi	15dd0 <__assert_fail@plt+0x4d48>
   15d98:	add	r0, pc, #0
   15d9c:	ldr	pc, [r0, r6, lsl #2]
   15da0:	andeq	r5, r1, r8, asr #27
   15da4:	ldrdeq	r5, [r1], -ip
   15da8:	andeq	r5, r1, ip, lsl #28
   15dac:	andeq	r5, r1, r4, lsr lr
   15db0:	andeq	r5, r1, ip, asr lr
   15db4:	andeq	r5, r1, r4, lsl #29
   15db8:	andeq	r5, r1, ip, lsr #29
   15dbc:	andeq	r5, r1, r4, ror #29
   15dc0:	andeq	r5, r1, r4, lsl #31
   15dc4:	andeq	r5, r1, ip, lsr #30
   15dc8:	sub	sp, fp, #24
   15dcc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15dd0:	movw	r1, #39355	; 0x99bb
   15dd4:	movt	r1, #1
   15dd8:	b	15f34 <__assert_fail@plt+0x4eac>
   15ddc:	movw	r1, #39036	; 0x987c
   15de0:	mov	r0, #0
   15de4:	mov	r2, #5
   15de8:	movt	r1, #1
   15dec:	bl	10ec0 <dcgettext@plt>
   15df0:	ldr	r3, [r7]
   15df4:	mov	r2, r0
   15df8:	mov	r0, r8
   15dfc:	mov	r1, #1
   15e00:	sub	sp, fp, #24
   15e04:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e08:	b	10fe0 <__fprintf_chk@plt>
   15e0c:	movw	r1, #39052	; 0x988c
   15e10:	mov	r0, #0
   15e14:	mov	r2, #5
   15e18:	movt	r1, #1
   15e1c:	bl	10ec0 <dcgettext@plt>
   15e20:	mov	r2, r0
   15e24:	ldr	r3, [r7]
   15e28:	ldr	r0, [r7, #4]
   15e2c:	str	r0, [sp]
   15e30:	b	15f20 <__assert_fail@plt+0x4e98>
   15e34:	movw	r1, #39075	; 0x98a3
   15e38:	mov	r0, #0
   15e3c:	mov	r2, #5
   15e40:	movt	r1, #1
   15e44:	bl	10ec0 <dcgettext@plt>
   15e48:	ldr	r3, [r7]
   15e4c:	mov	r2, r0
   15e50:	ldmib	r7, {r0, r1}
   15e54:	stm	sp, {r0, r1}
   15e58:	b	15f20 <__assert_fail@plt+0x4e98>
   15e5c:	movw	r1, #39103	; 0x98bf
   15e60:	mov	r0, #0
   15e64:	mov	r2, #5
   15e68:	movt	r1, #1
   15e6c:	bl	10ec0 <dcgettext@plt>
   15e70:	ldr	r3, [r7]
   15e74:	mov	r2, r0
   15e78:	ldmib	r7, {r0, r1, r7}
   15e7c:	stm	sp, {r0, r1, r7}
   15e80:	b	15f20 <__assert_fail@plt+0x4e98>
   15e84:	movw	r1, #39135	; 0x98df
   15e88:	mov	r0, #0
   15e8c:	mov	r2, #5
   15e90:	movt	r1, #1
   15e94:	bl	10ec0 <dcgettext@plt>
   15e98:	ldr	r3, [r7]
   15e9c:	mov	r2, r0
   15ea0:	ldmib	r7, {r0, r1, r6, r7}
   15ea4:	stm	sp, {r0, r1, r6, r7}
   15ea8:	b	15f20 <__assert_fail@plt+0x4e98>
   15eac:	movw	r1, #39171	; 0x9903
   15eb0:	mov	r0, #0
   15eb4:	mov	r2, #5
   15eb8:	movt	r1, #1
   15ebc:	bl	10ec0 <dcgettext@plt>
   15ec0:	ldr	r3, [r7]
   15ec4:	mov	r2, r0
   15ec8:	ldmib	r7, {r0, r1, r6}
   15ecc:	ldr	r5, [r7, #16]
   15ed0:	ldr	r7, [r7, #20]
   15ed4:	stm	sp, {r0, r1, r6}
   15ed8:	str	r5, [sp, #12]
   15edc:	str	r7, [sp, #16]
   15ee0:	b	15f20 <__assert_fail@plt+0x4e98>
   15ee4:	movw	r1, #39211	; 0x992b
   15ee8:	mov	r0, #0
   15eec:	mov	r2, #5
   15ef0:	movt	r1, #1
   15ef4:	bl	10ec0 <dcgettext@plt>
   15ef8:	ldr	r3, [r7]
   15efc:	mov	r2, r0
   15f00:	ldmib	r7, {r0, r1, r6}
   15f04:	ldr	r5, [r7, #16]
   15f08:	ldr	r4, [r7, #20]
   15f0c:	ldr	r7, [r7, #24]
   15f10:	stm	sp, {r0, r1, r6}
   15f14:	str	r5, [sp, #12]
   15f18:	str	r4, [sp, #16]
   15f1c:	str	r7, [sp, #20]
   15f20:	mov	r0, r8
   15f24:	mov	r1, #1
   15f28:	b	15fd4 <__assert_fail@plt+0x4f4c>
   15f2c:	movw	r1, #39303	; 0x9987
   15f30:	movt	r1, #1
   15f34:	mov	r0, #0
   15f38:	mov	r2, #5
   15f3c:	bl	10ec0 <dcgettext@plt>
   15f40:	mov	ip, r0
   15f44:	ldr	r3, [r7]
   15f48:	ldr	r0, [r7, #4]
   15f4c:	ldr	r1, [r7, #8]
   15f50:	ldr	r6, [r7, #12]
   15f54:	ldr	r5, [r7, #16]
   15f58:	ldr	r4, [r7, #20]
   15f5c:	ldr	r2, [r7, #24]
   15f60:	ldr	lr, [r7, #28]
   15f64:	ldr	r7, [r7, #32]
   15f68:	stm	sp, {r0, r1, r6}
   15f6c:	str	r5, [sp, #12]
   15f70:	str	r4, [sp, #16]
   15f74:	str	r2, [sp, #20]
   15f78:	str	lr, [sp, #24]
   15f7c:	str	r7, [sp, #28]
   15f80:	b	15fc8 <__assert_fail@plt+0x4f40>
   15f84:	movw	r1, #39255	; 0x9957
   15f88:	mov	r0, #0
   15f8c:	mov	r2, #5
   15f90:	movt	r1, #1
   15f94:	bl	10ec0 <dcgettext@plt>
   15f98:	mov	ip, r0
   15f9c:	ldr	r3, [r7]
   15fa0:	ldmib	r7, {r0, r1, r6}
   15fa4:	ldr	r5, [r7, #16]
   15fa8:	ldr	r4, [r7, #20]
   15fac:	ldr	r2, [r7, #24]
   15fb0:	ldr	r7, [r7, #28]
   15fb4:	stm	sp, {r0, r1, r6}
   15fb8:	str	r5, [sp, #12]
   15fbc:	str	r4, [sp, #16]
   15fc0:	str	r2, [sp, #20]
   15fc4:	str	r7, [sp, #24]
   15fc8:	mov	r0, r8
   15fcc:	mov	r1, #1
   15fd0:	mov	r2, ip
   15fd4:	bl	10fe0 <__fprintf_chk@plt>
   15fd8:	sub	sp, fp, #24
   15fdc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15fe0:	push	{r4, sl, fp, lr}
   15fe4:	add	fp, sp, #8
   15fe8:	sub	sp, sp, #8
   15fec:	ldr	ip, [fp, #8]
   15ff0:	mov	lr, #0
   15ff4:	ldr	r4, [ip, lr, lsl #2]
   15ff8:	add	lr, lr, #1
   15ffc:	cmp	r4, #0
   16000:	bne	15ff4 <__assert_fail@plt+0x4f6c>
   16004:	sub	r4, lr, #1
   16008:	str	ip, [sp]
   1600c:	str	r4, [sp, #4]
   16010:	bl	15cac <__assert_fail@plt+0x4c24>
   16014:	sub	sp, fp, #8
   16018:	pop	{r4, sl, fp, pc}
   1601c:	push	{fp, lr}
   16020:	mov	fp, sp
   16024:	sub	sp, sp, #48	; 0x30
   16028:	ldr	ip, [fp, #8]
   1602c:	ldr	lr, [ip]
   16030:	cmp	lr, #0
   16034:	str	lr, [sp, #8]
   16038:	beq	160d4 <__assert_fail@plt+0x504c>
   1603c:	ldr	lr, [ip, #4]
   16040:	cmp	lr, #0
   16044:	str	lr, [sp, #12]
   16048:	beq	160dc <__assert_fail@plt+0x5054>
   1604c:	ldr	lr, [ip, #8]
   16050:	cmp	lr, #0
   16054:	str	lr, [sp, #16]
   16058:	beq	160e4 <__assert_fail@plt+0x505c>
   1605c:	ldr	lr, [ip, #12]
   16060:	cmp	lr, #0
   16064:	str	lr, [sp, #20]
   16068:	beq	160ec <__assert_fail@plt+0x5064>
   1606c:	ldr	lr, [ip, #16]
   16070:	cmp	lr, #0
   16074:	str	lr, [sp, #24]
   16078:	beq	160f4 <__assert_fail@plt+0x506c>
   1607c:	ldr	lr, [ip, #20]
   16080:	cmp	lr, #0
   16084:	str	lr, [sp, #28]
   16088:	beq	160fc <__assert_fail@plt+0x5074>
   1608c:	ldr	lr, [ip, #24]
   16090:	cmp	lr, #0
   16094:	str	lr, [sp, #32]
   16098:	beq	16104 <__assert_fail@plt+0x507c>
   1609c:	ldr	lr, [ip, #28]
   160a0:	cmp	lr, #0
   160a4:	str	lr, [sp, #36]	; 0x24
   160a8:	beq	1610c <__assert_fail@plt+0x5084>
   160ac:	ldr	lr, [ip, #32]
   160b0:	cmp	lr, #0
   160b4:	str	lr, [sp, #40]	; 0x28
   160b8:	beq	16114 <__assert_fail@plt+0x508c>
   160bc:	ldr	lr, [ip, #36]	; 0x24
   160c0:	mov	ip, #10
   160c4:	cmp	lr, #0
   160c8:	str	lr, [sp, #44]	; 0x2c
   160cc:	movweq	ip, #9
   160d0:	b	16118 <__assert_fail@plt+0x5090>
   160d4:	mov	ip, #0
   160d8:	b	16118 <__assert_fail@plt+0x5090>
   160dc:	mov	ip, #1
   160e0:	b	16118 <__assert_fail@plt+0x5090>
   160e4:	mov	ip, #2
   160e8:	b	16118 <__assert_fail@plt+0x5090>
   160ec:	mov	ip, #3
   160f0:	b	16118 <__assert_fail@plt+0x5090>
   160f4:	mov	ip, #4
   160f8:	b	16118 <__assert_fail@plt+0x5090>
   160fc:	mov	ip, #5
   16100:	b	16118 <__assert_fail@plt+0x5090>
   16104:	mov	ip, #6
   16108:	b	16118 <__assert_fail@plt+0x5090>
   1610c:	mov	ip, #7
   16110:	b	16118 <__assert_fail@plt+0x5090>
   16114:	mov	ip, #8
   16118:	add	lr, sp, #8
   1611c:	str	ip, [sp, #4]
   16120:	str	lr, [sp]
   16124:	bl	15cac <__assert_fail@plt+0x4c24>
   16128:	mov	sp, fp
   1612c:	pop	{fp, pc}
   16130:	push	{fp, lr}
   16134:	mov	fp, sp
   16138:	sub	sp, sp, #56	; 0x38
   1613c:	add	ip, fp, #8
   16140:	str	ip, [sp, #12]
   16144:	ldr	lr, [fp, #8]
   16148:	cmp	lr, #0
   1614c:	str	lr, [sp, #16]
   16150:	beq	161ec <__assert_fail@plt+0x5164>
   16154:	ldr	lr, [ip, #4]
   16158:	cmp	lr, #0
   1615c:	str	lr, [sp, #20]
   16160:	beq	161f4 <__assert_fail@plt+0x516c>
   16164:	ldr	lr, [ip, #8]
   16168:	cmp	lr, #0
   1616c:	str	lr, [sp, #24]
   16170:	beq	161fc <__assert_fail@plt+0x5174>
   16174:	ldr	lr, [ip, #12]
   16178:	cmp	lr, #0
   1617c:	str	lr, [sp, #28]
   16180:	beq	16204 <__assert_fail@plt+0x517c>
   16184:	ldr	lr, [ip, #16]
   16188:	cmp	lr, #0
   1618c:	str	lr, [sp, #32]
   16190:	beq	1620c <__assert_fail@plt+0x5184>
   16194:	ldr	lr, [ip, #20]
   16198:	cmp	lr, #0
   1619c:	str	lr, [sp, #36]	; 0x24
   161a0:	beq	16214 <__assert_fail@plt+0x518c>
   161a4:	ldr	lr, [ip, #24]
   161a8:	cmp	lr, #0
   161ac:	str	lr, [sp, #40]	; 0x28
   161b0:	beq	1621c <__assert_fail@plt+0x5194>
   161b4:	ldr	lr, [ip, #28]
   161b8:	cmp	lr, #0
   161bc:	str	lr, [sp, #44]	; 0x2c
   161c0:	beq	16224 <__assert_fail@plt+0x519c>
   161c4:	ldr	lr, [ip, #32]
   161c8:	cmp	lr, #0
   161cc:	str	lr, [sp, #48]	; 0x30
   161d0:	beq	1622c <__assert_fail@plt+0x51a4>
   161d4:	ldr	lr, [ip, #36]	; 0x24
   161d8:	mov	ip, #10
   161dc:	cmp	lr, #0
   161e0:	str	lr, [sp, #52]	; 0x34
   161e4:	movweq	ip, #9
   161e8:	b	16230 <__assert_fail@plt+0x51a8>
   161ec:	mov	ip, #0
   161f0:	b	16230 <__assert_fail@plt+0x51a8>
   161f4:	mov	ip, #1
   161f8:	b	16230 <__assert_fail@plt+0x51a8>
   161fc:	mov	ip, #2
   16200:	b	16230 <__assert_fail@plt+0x51a8>
   16204:	mov	ip, #3
   16208:	b	16230 <__assert_fail@plt+0x51a8>
   1620c:	mov	ip, #4
   16210:	b	16230 <__assert_fail@plt+0x51a8>
   16214:	mov	ip, #5
   16218:	b	16230 <__assert_fail@plt+0x51a8>
   1621c:	mov	ip, #6
   16220:	b	16230 <__assert_fail@plt+0x51a8>
   16224:	mov	ip, #7
   16228:	b	16230 <__assert_fail@plt+0x51a8>
   1622c:	mov	ip, #8
   16230:	add	lr, sp, #16
   16234:	str	ip, [sp, #4]
   16238:	str	lr, [sp]
   1623c:	bl	15cac <__assert_fail@plt+0x4c24>
   16240:	mov	sp, fp
   16244:	pop	{fp, pc}
   16248:	push	{fp, lr}
   1624c:	mov	fp, sp
   16250:	movw	r0, #41292	; 0xa14c
   16254:	movt	r0, #2
   16258:	ldr	r1, [r0]
   1625c:	movw	r0, #36846	; 0x8fee
   16260:	movt	r0, #1
   16264:	bl	10e30 <fputs_unlocked@plt>
   16268:	movw	r1, #39415	; 0x99f7
   1626c:	mov	r0, #0
   16270:	mov	r2, #5
   16274:	movt	r1, #1
   16278:	bl	10ec0 <dcgettext@plt>
   1627c:	movw	r2, #39435	; 0x9a0b
   16280:	mov	r1, r0
   16284:	mov	r0, #1
   16288:	movt	r2, #1
   1628c:	bl	10fc8 <__printf_chk@plt>
   16290:	movw	r1, #39457	; 0x9a21
   16294:	mov	r0, #0
   16298:	mov	r2, #5
   1629c:	movt	r1, #1
   162a0:	bl	10ec0 <dcgettext@plt>
   162a4:	movw	r2, #36321	; 0x8de1
   162a8:	movw	r3, #36655	; 0x8f2f
   162ac:	mov	r1, r0
   162b0:	mov	r0, #1
   162b4:	movt	r2, #1
   162b8:	movt	r3, #1
   162bc:	bl	10fc8 <__printf_chk@plt>
   162c0:	movw	r1, #39477	; 0x9a35
   162c4:	mov	r0, #0
   162c8:	mov	r2, #5
   162cc:	movt	r1, #1
   162d0:	bl	10ec0 <dcgettext@plt>
   162d4:	movw	r2, #39516	; 0x9a5c
   162d8:	mov	r1, r0
   162dc:	mov	r0, #1
   162e0:	movt	r2, #1
   162e4:	pop	{fp, lr}
   162e8:	b	10fc8 <__printf_chk@plt>
   162ec:	push	{r4, r5, r6, sl, fp, lr}
   162f0:	add	fp, sp, #16
   162f4:	mov	r4, r2
   162f8:	mov	r5, r1
   162fc:	mov	r6, r0
   16300:	bl	18414 <__assert_fail@plt+0x738c>
   16304:	cmp	r0, #0
   16308:	popne	{r4, r5, r6, sl, fp, pc}
   1630c:	cmp	r6, #0
   16310:	beq	16324 <__assert_fail@plt+0x529c>
   16314:	cmp	r5, #0
   16318:	cmpne	r4, #0
   1631c:	bne	16324 <__assert_fail@plt+0x529c>
   16320:	pop	{r4, r5, r6, sl, fp, pc}
   16324:	bl	168c4 <__assert_fail@plt+0x583c>
   16328:	push	{r4, r5, r6, sl, fp, lr}
   1632c:	add	fp, sp, #16
   16330:	mov	r4, r2
   16334:	mov	r5, r1
   16338:	mov	r6, r0
   1633c:	bl	18414 <__assert_fail@plt+0x738c>
   16340:	cmp	r0, #0
   16344:	popne	{r4, r5, r6, sl, fp, pc}
   16348:	cmp	r6, #0
   1634c:	beq	16360 <__assert_fail@plt+0x52d8>
   16350:	cmp	r5, #0
   16354:	cmpne	r4, #0
   16358:	bne	16360 <__assert_fail@plt+0x52d8>
   1635c:	pop	{r4, r5, r6, sl, fp, pc}
   16360:	bl	168c4 <__assert_fail@plt+0x583c>
   16364:	push	{fp, lr}
   16368:	mov	fp, sp
   1636c:	bl	18274 <__assert_fail@plt+0x71ec>
   16370:	cmp	r0, #0
   16374:	popne	{fp, pc}
   16378:	bl	168c4 <__assert_fail@plt+0x583c>
   1637c:	push	{fp, lr}
   16380:	mov	fp, sp
   16384:	bl	18274 <__assert_fail@plt+0x71ec>
   16388:	cmp	r0, #0
   1638c:	popne	{fp, pc}
   16390:	bl	168c4 <__assert_fail@plt+0x583c>
   16394:	push	{fp, lr}
   16398:	mov	fp, sp
   1639c:	bl	18274 <__assert_fail@plt+0x71ec>
   163a0:	cmp	r0, #0
   163a4:	popne	{fp, pc}
   163a8:	bl	168c4 <__assert_fail@plt+0x583c>
   163ac:	push	{r4, r5, fp, lr}
   163b0:	add	fp, sp, #8
   163b4:	mov	r4, r1
   163b8:	mov	r5, r0
   163bc:	bl	182a4 <__assert_fail@plt+0x721c>
   163c0:	cmp	r0, #0
   163c4:	popne	{r4, r5, fp, pc}
   163c8:	cmp	r5, #0
   163cc:	beq	163dc <__assert_fail@plt+0x5354>
   163d0:	cmp	r4, #0
   163d4:	bne	163dc <__assert_fail@plt+0x5354>
   163d8:	pop	{r4, r5, fp, pc}
   163dc:	bl	168c4 <__assert_fail@plt+0x583c>
   163e0:	push	{fp, lr}
   163e4:	mov	fp, sp
   163e8:	cmp	r1, #0
   163ec:	orreq	r1, r1, #1
   163f0:	bl	182a4 <__assert_fail@plt+0x721c>
   163f4:	cmp	r0, #0
   163f8:	popne	{fp, pc}
   163fc:	bl	168c4 <__assert_fail@plt+0x583c>
   16400:	push	{fp, lr}
   16404:	mov	fp, sp
   16408:	clz	r3, r2
   1640c:	lsr	ip, r3, #5
   16410:	clz	r3, r1
   16414:	lsr	r3, r3, #5
   16418:	orrs	r3, r3, ip
   1641c:	movwne	r1, #1
   16420:	movwne	r2, #1
   16424:	bl	18414 <__assert_fail@plt+0x738c>
   16428:	cmp	r0, #0
   1642c:	popne	{fp, pc}
   16430:	bl	168c4 <__assert_fail@plt+0x583c>
   16434:	push	{fp, lr}
   16438:	mov	fp, sp
   1643c:	mov	r2, r1
   16440:	mov	r1, r0
   16444:	mov	r0, #0
   16448:	bl	18414 <__assert_fail@plt+0x738c>
   1644c:	cmp	r0, #0
   16450:	popne	{fp, pc}
   16454:	bl	168c4 <__assert_fail@plt+0x583c>
   16458:	push	{fp, lr}
   1645c:	mov	fp, sp
   16460:	mov	r2, r1
   16464:	mov	r1, r0
   16468:	clz	r0, r2
   1646c:	clz	r3, r1
   16470:	lsr	r0, r0, #5
   16474:	lsr	r3, r3, #5
   16478:	orrs	r0, r3, r0
   1647c:	movwne	r1, #1
   16480:	movwne	r2, #1
   16484:	mov	r0, #0
   16488:	bl	18414 <__assert_fail@plt+0x738c>
   1648c:	cmp	r0, #0
   16490:	popne	{fp, pc}
   16494:	bl	168c4 <__assert_fail@plt+0x583c>
   16498:	push	{r4, r5, r6, sl, fp, lr}
   1649c:	add	fp, sp, #16
   164a0:	ldr	r5, [r1]
   164a4:	mov	r4, r1
   164a8:	mov	r6, r0
   164ac:	cmp	r0, #0
   164b0:	beq	164c8 <__assert_fail@plt+0x5440>
   164b4:	mov	r0, #1
   164b8:	add	r0, r0, r5, lsr #1
   164bc:	adds	r5, r5, r0
   164c0:	bcc	164d0 <__assert_fail@plt+0x5448>
   164c4:	b	1650c <__assert_fail@plt+0x5484>
   164c8:	cmp	r5, #0
   164cc:	movweq	r5, #64	; 0x40
   164d0:	mov	r0, r6
   164d4:	mov	r1, r5
   164d8:	mov	r2, #1
   164dc:	bl	18414 <__assert_fail@plt+0x738c>
   164e0:	cmp	r5, #0
   164e4:	mov	r1, r5
   164e8:	movwne	r1, #1
   164ec:	cmp	r0, #0
   164f0:	bne	16504 <__assert_fail@plt+0x547c>
   164f4:	clz	r2, r6
   164f8:	lsr	r2, r2, #5
   164fc:	orrs	r1, r2, r1
   16500:	bne	1650c <__assert_fail@plt+0x5484>
   16504:	str	r5, [r4]
   16508:	pop	{r4, r5, r6, sl, fp, pc}
   1650c:	bl	168c4 <__assert_fail@plt+0x583c>
   16510:	push	{r4, r5, r6, r7, fp, lr}
   16514:	add	fp, sp, #16
   16518:	ldr	r5, [r1]
   1651c:	mov	r6, r2
   16520:	mov	r4, r1
   16524:	mov	r7, r0
   16528:	cmp	r0, #0
   1652c:	beq	16544 <__assert_fail@plt+0x54bc>
   16530:	mov	r0, #1
   16534:	add	r0, r0, r5, lsr #1
   16538:	adds	r5, r5, r0
   1653c:	bcc	1655c <__assert_fail@plt+0x54d4>
   16540:	b	16590 <__assert_fail@plt+0x5508>
   16544:	cmp	r5, #0
   16548:	bne	1655c <__assert_fail@plt+0x54d4>
   1654c:	mov	r0, #64	; 0x40
   16550:	cmp	r6, #64	; 0x40
   16554:	udiv	r5, r0, r6
   16558:	addhi	r5, r5, #1
   1655c:	mov	r0, r7
   16560:	mov	r1, r5
   16564:	mov	r2, r6
   16568:	bl	18414 <__assert_fail@plt+0x738c>
   1656c:	cmp	r0, #0
   16570:	bne	16588 <__assert_fail@plt+0x5500>
   16574:	cmp	r7, #0
   16578:	beq	16590 <__assert_fail@plt+0x5508>
   1657c:	cmp	r6, #0
   16580:	cmpne	r5, #0
   16584:	bne	16590 <__assert_fail@plt+0x5508>
   16588:	str	r5, [r4]
   1658c:	pop	{r4, r5, r6, r7, fp, pc}
   16590:	bl	168c4 <__assert_fail@plt+0x583c>
   16594:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   16598:	add	fp, sp, #24
   1659c:	mov	r8, r1
   165a0:	ldr	r1, [r1]
   165a4:	mov	r5, r0
   165a8:	add	r0, r1, r1, asr #1
   165ac:	cmp	r0, r1
   165b0:	mvnvs	r0, #-2147483648	; 0x80000000
   165b4:	cmp	r0, r3
   165b8:	mov	r7, r0
   165bc:	movgt	r7, r3
   165c0:	cmn	r3, #1
   165c4:	movle	r7, r0
   165c8:	ldr	r0, [fp, #8]
   165cc:	cmn	r0, #1
   165d0:	ble	165f8 <__assert_fail@plt+0x5570>
   165d4:	cmp	r0, #0
   165d8:	beq	1664c <__assert_fail@plt+0x55c4>
   165dc:	cmn	r7, #1
   165e0:	ble	16620 <__assert_fail@plt+0x5598>
   165e4:	mvn	r4, #-2147483648	; 0x80000000
   165e8:	udiv	r6, r4, r0
   165ec:	cmp	r6, r7
   165f0:	bge	1664c <__assert_fail@plt+0x55c4>
   165f4:	b	1665c <__assert_fail@plt+0x55d4>
   165f8:	cmn	r7, #1
   165fc:	ble	1663c <__assert_fail@plt+0x55b4>
   16600:	cmn	r0, #1
   16604:	beq	1664c <__assert_fail@plt+0x55c4>
   16608:	mov	r6, #-2147483648	; 0x80000000
   1660c:	mvn	r4, #-2147483648	; 0x80000000
   16610:	sdiv	r6, r6, r0
   16614:	cmp	r6, r7
   16618:	bge	1664c <__assert_fail@plt+0x55c4>
   1661c:	b	1665c <__assert_fail@plt+0x55d4>
   16620:	beq	1664c <__assert_fail@plt+0x55c4>
   16624:	mov	r6, #-2147483648	; 0x80000000
   16628:	mvn	r4, #-2147483648	; 0x80000000
   1662c:	sdiv	r6, r6, r7
   16630:	cmp	r6, r0
   16634:	bge	1664c <__assert_fail@plt+0x55c4>
   16638:	b	1665c <__assert_fail@plt+0x55d4>
   1663c:	mvn	r4, #-2147483648	; 0x80000000
   16640:	sdiv	r6, r4, r0
   16644:	cmp	r7, r6
   16648:	blt	1665c <__assert_fail@plt+0x55d4>
   1664c:	mul	r6, r7, r0
   16650:	mov	r4, #64	; 0x40
   16654:	cmp	r6, #63	; 0x3f
   16658:	bgt	16664 <__assert_fail@plt+0x55dc>
   1665c:	sdiv	r7, r4, r0
   16660:	mul	r6, r7, r0
   16664:	cmp	r5, #0
   16668:	moveq	r4, #0
   1666c:	streq	r4, [r8]
   16670:	sub	r4, r7, r1
   16674:	cmp	r4, r2
   16678:	bge	16724 <__assert_fail@plt+0x569c>
   1667c:	add	r7, r1, r2
   16680:	mov	r6, #0
   16684:	mov	r2, #0
   16688:	cmp	r7, r3
   1668c:	movwgt	r6, #1
   16690:	cmn	r3, #1
   16694:	movwgt	r2, #1
   16698:	cmp	r7, r1
   1669c:	bvs	16758 <__assert_fail@plt+0x56d0>
   166a0:	ands	r1, r2, r6
   166a4:	bne	16758 <__assert_fail@plt+0x56d0>
   166a8:	cmn	r0, #1
   166ac:	ble	166d4 <__assert_fail@plt+0x564c>
   166b0:	cmp	r0, #0
   166b4:	beq	16720 <__assert_fail@plt+0x5698>
   166b8:	cmn	r7, #1
   166bc:	ble	166f8 <__assert_fail@plt+0x5670>
   166c0:	mvn	r1, #-2147483648	; 0x80000000
   166c4:	udiv	r1, r1, r0
   166c8:	cmp	r1, r7
   166cc:	bge	16720 <__assert_fail@plt+0x5698>
   166d0:	b	16758 <__assert_fail@plt+0x56d0>
   166d4:	cmn	r7, #1
   166d8:	ble	16710 <__assert_fail@plt+0x5688>
   166dc:	cmn	r0, #1
   166e0:	beq	16720 <__assert_fail@plt+0x5698>
   166e4:	mov	r1, #-2147483648	; 0x80000000
   166e8:	sdiv	r1, r1, r0
   166ec:	cmp	r1, r7
   166f0:	bge	16720 <__assert_fail@plt+0x5698>
   166f4:	b	16758 <__assert_fail@plt+0x56d0>
   166f8:	beq	16720 <__assert_fail@plt+0x5698>
   166fc:	mov	r1, #-2147483648	; 0x80000000
   16700:	sdiv	r1, r1, r7
   16704:	cmp	r1, r0
   16708:	bge	16720 <__assert_fail@plt+0x5698>
   1670c:	b	16758 <__assert_fail@plt+0x56d0>
   16710:	mvn	r1, #-2147483648	; 0x80000000
   16714:	sdiv	r1, r1, r0
   16718:	cmp	r7, r1
   1671c:	blt	16758 <__assert_fail@plt+0x56d0>
   16720:	mul	r6, r7, r0
   16724:	mov	r0, r5
   16728:	mov	r1, r6
   1672c:	bl	182a4 <__assert_fail@plt+0x721c>
   16730:	cmp	r6, #0
   16734:	movwne	r6, #1
   16738:	cmp	r0, #0
   1673c:	bne	16750 <__assert_fail@plt+0x56c8>
   16740:	clz	r1, r5
   16744:	lsr	r1, r1, #5
   16748:	orrs	r1, r1, r6
   1674c:	bne	16758 <__assert_fail@plt+0x56d0>
   16750:	str	r7, [r8]
   16754:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16758:	bl	168c4 <__assert_fail@plt+0x583c>
   1675c:	push	{fp, lr}
   16760:	mov	fp, sp
   16764:	mov	r1, #1
   16768:	bl	18220 <__assert_fail@plt+0x7198>
   1676c:	cmp	r0, #0
   16770:	popne	{fp, pc}
   16774:	bl	168c4 <__assert_fail@plt+0x583c>
   16778:	push	{fp, lr}
   1677c:	mov	fp, sp
   16780:	bl	18220 <__assert_fail@plt+0x7198>
   16784:	cmp	r0, #0
   16788:	popne	{fp, pc}
   1678c:	bl	168c4 <__assert_fail@plt+0x583c>
   16790:	push	{fp, lr}
   16794:	mov	fp, sp
   16798:	mov	r1, #1
   1679c:	bl	18220 <__assert_fail@plt+0x7198>
   167a0:	cmp	r0, #0
   167a4:	popne	{fp, pc}
   167a8:	bl	168c4 <__assert_fail@plt+0x583c>
   167ac:	push	{fp, lr}
   167b0:	mov	fp, sp
   167b4:	bl	18220 <__assert_fail@plt+0x7198>
   167b8:	cmp	r0, #0
   167bc:	popne	{fp, pc}
   167c0:	bl	168c4 <__assert_fail@plt+0x583c>
   167c4:	push	{r4, r5, r6, sl, fp, lr}
   167c8:	add	fp, sp, #16
   167cc:	mov	r5, r0
   167d0:	mov	r0, r1
   167d4:	mov	r4, r1
   167d8:	bl	18274 <__assert_fail@plt+0x71ec>
   167dc:	cmp	r0, #0
   167e0:	beq	167fc <__assert_fail@plt+0x5774>
   167e4:	mov	r1, r5
   167e8:	mov	r2, r4
   167ec:	mov	r6, r0
   167f0:	bl	10e90 <memcpy@plt>
   167f4:	mov	r0, r6
   167f8:	pop	{r4, r5, r6, sl, fp, pc}
   167fc:	bl	168c4 <__assert_fail@plt+0x583c>
   16800:	push	{r4, r5, r6, sl, fp, lr}
   16804:	add	fp, sp, #16
   16808:	mov	r5, r0
   1680c:	mov	r0, r1
   16810:	mov	r4, r1
   16814:	bl	18274 <__assert_fail@plt+0x71ec>
   16818:	cmp	r0, #0
   1681c:	beq	16838 <__assert_fail@plt+0x57b0>
   16820:	mov	r1, r5
   16824:	mov	r2, r4
   16828:	mov	r6, r0
   1682c:	bl	10e90 <memcpy@plt>
   16830:	mov	r0, r6
   16834:	pop	{r4, r5, r6, sl, fp, pc}
   16838:	bl	168c4 <__assert_fail@plt+0x583c>
   1683c:	push	{r4, r5, r6, sl, fp, lr}
   16840:	add	fp, sp, #16
   16844:	mov	r5, r0
   16848:	add	r0, r1, #1
   1684c:	mov	r4, r1
   16850:	bl	18274 <__assert_fail@plt+0x71ec>
   16854:	cmp	r0, #0
   16858:	beq	16880 <__assert_fail@plt+0x57f8>
   1685c:	mov	r6, r0
   16860:	mov	r0, #0
   16864:	mov	r1, r5
   16868:	mov	r2, r4
   1686c:	strb	r0, [r6, r4]
   16870:	mov	r0, r6
   16874:	bl	10e90 <memcpy@plt>
   16878:	mov	r0, r6
   1687c:	pop	{r4, r5, r6, sl, fp, pc}
   16880:	bl	168c4 <__assert_fail@plt+0x583c>
   16884:	push	{r4, r5, r6, sl, fp, lr}
   16888:	add	fp, sp, #16
   1688c:	mov	r4, r0
   16890:	bl	10f8c <strlen@plt>
   16894:	add	r5, r0, #1
   16898:	mov	r0, r5
   1689c:	bl	18274 <__assert_fail@plt+0x71ec>
   168a0:	cmp	r0, #0
   168a4:	beq	168c0 <__assert_fail@plt+0x5838>
   168a8:	mov	r1, r4
   168ac:	mov	r2, r5
   168b0:	mov	r6, r0
   168b4:	bl	10e90 <memcpy@plt>
   168b8:	mov	r0, r6
   168bc:	pop	{r4, r5, r6, sl, fp, pc}
   168c0:	bl	168c4 <__assert_fail@plt+0x583c>
   168c4:	push	{fp, lr}
   168c8:	mov	fp, sp
   168cc:	movw	r0, #41196	; 0xa0ec
   168d0:	movw	r1, #39592	; 0x9aa8
   168d4:	mov	r2, #5
   168d8:	movt	r0, #2
   168dc:	movt	r1, #1
   168e0:	ldr	r4, [r0]
   168e4:	mov	r0, #0
   168e8:	bl	10ec0 <dcgettext@plt>
   168ec:	movw	r2, #36300	; 0x8dcc
   168f0:	mov	r3, r0
   168f4:	mov	r0, r4
   168f8:	mov	r1, #0
   168fc:	movt	r2, #1
   16900:	bl	10f2c <error@plt>
   16904:	bl	1107c <abort@plt>
   16908:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1690c:	add	fp, sp, #28
   16910:	sub	sp, sp, #36	; 0x24
   16914:	cmp	r2, #37	; 0x25
   16918:	bcs	18200 <__assert_fail@plt+0x7178>
   1691c:	ldr	r8, [fp, #8]
   16920:	mov	r9, r3
   16924:	mov	r6, r2
   16928:	mov	r7, r1
   1692c:	mov	r4, r0
   16930:	bl	10fa4 <__errno_location@plt>
   16934:	add	sl, sp, #32
   16938:	cmp	r7, #0
   1693c:	mov	r5, r0
   16940:	mov	r0, #0
   16944:	mov	r2, r6
   16948:	mov	r3, #0
   1694c:	movne	sl, r7
   16950:	str	r0, [r5]
   16954:	mov	r0, r4
   16958:	mov	r1, sl
   1695c:	bl	11040 <__strtoll_internal@plt>
   16960:	mov	r7, r1
   16964:	ldr	r1, [sl]
   16968:	cmp	r1, r4
   1696c:	beq	1699c <__assert_fail@plt+0x5914>
   16970:	mov	r6, r0
   16974:	ldr	r0, [r5]
   16978:	cmp	r0, #0
   1697c:	beq	169dc <__assert_fail@plt+0x5954>
   16980:	mov	r5, #4
   16984:	cmp	r0, #34	; 0x22
   16988:	bne	17e10 <__assert_fail@plt+0x6d88>
   1698c:	mov	r5, #1
   16990:	cmp	r8, #0
   16994:	bne	169e8 <__assert_fail@plt+0x5960>
   16998:	b	17e0c <__assert_fail@plt+0x6d84>
   1699c:	mov	r5, #4
   169a0:	cmp	r8, #0
   169a4:	beq	17e10 <__assert_fail@plt+0x6d88>
   169a8:	mov	r6, r1
   169ac:	ldrb	r1, [r4]
   169b0:	cmp	r1, #0
   169b4:	beq	17e10 <__assert_fail@plt+0x6d88>
   169b8:	mov	r0, r8
   169bc:	bl	10f98 <strchr@plt>
   169c0:	cmp	r0, #0
   169c4:	beq	17e10 <__assert_fail@plt+0x6d88>
   169c8:	mov	r1, r6
   169cc:	mov	r5, #0
   169d0:	mov	r6, #1
   169d4:	mov	r7, #0
   169d8:	b	169e8 <__assert_fail@plt+0x5960>
   169dc:	mov	r5, r0
   169e0:	cmp	r8, #0
   169e4:	beq	17e0c <__assert_fail@plt+0x6d84>
   169e8:	ldrb	r4, [r1]
   169ec:	cmp	r4, #0
   169f0:	beq	17e0c <__assert_fail@plt+0x6d84>
   169f4:	str	r1, [sp, #20]
   169f8:	mov	r0, r8
   169fc:	mov	r1, r4
   16a00:	bl	10f98 <strchr@plt>
   16a04:	cmp	r0, #0
   16a08:	beq	16c94 <__assert_fail@plt+0x5c0c>
   16a0c:	sub	r0, r4, #69	; 0x45
   16a10:	mov	r1, #1
   16a14:	mov	r3, #0
   16a18:	mov	r2, #1024	; 0x400
   16a1c:	cmp	r0, #47	; 0x2f
   16a20:	str	r1, [sp, #16]
   16a24:	bhi	16b60 <__assert_fail@plt+0x5ad8>
   16a28:	add	r1, pc, #0
   16a2c:	ldr	pc, [r1, r0, lsl #2]
   16a30:	strdeq	r6, [r1], -r0
   16a34:	andeq	r6, r1, r0, ror #22
   16a38:	strdeq	r6, [r1], -r0
   16a3c:	andeq	r6, r1, r0, ror #22
   16a40:	andeq	r6, r1, r0, ror #22
   16a44:	andeq	r6, r1, r0, ror #22
   16a48:	strdeq	r6, [r1], -r0
   16a4c:	andeq	r6, r1, r0, ror #22
   16a50:	strdeq	r6, [r1], -r0
   16a54:	andeq	r6, r1, r0, ror #22
   16a58:	andeq	r6, r1, r0, ror #22
   16a5c:	strdeq	r6, [r1], -r0
   16a60:	andeq	r6, r1, r0, ror #22
   16a64:	andeq	r6, r1, r0, ror #22
   16a68:	andeq	r6, r1, r0, ror #22
   16a6c:	strdeq	r6, [r1], -r0
   16a70:	andeq	r6, r1, r0, ror #22
   16a74:	andeq	r6, r1, r0, ror #22
   16a78:	andeq	r6, r1, r0, ror #22
   16a7c:	andeq	r6, r1, r0, ror #22
   16a80:	strdeq	r6, [r1], -r0
   16a84:	strdeq	r6, [r1], -r0
   16a88:	andeq	r6, r1, r0, ror #22
   16a8c:	andeq	r6, r1, r0, ror #22
   16a90:	andeq	r6, r1, r0, ror #22
   16a94:	andeq	r6, r1, r0, ror #22
   16a98:	andeq	r6, r1, r0, ror #22
   16a9c:	andeq	r6, r1, r0, ror #22
   16aa0:	andeq	r6, r1, r0, ror #22
   16aa4:	andeq	r6, r1, r0, ror #22
   16aa8:	andeq	r6, r1, r0, ror #22
   16aac:	andeq	r6, r1, r0, ror #22
   16ab0:	andeq	r6, r1, r0, ror #22
   16ab4:	andeq	r6, r1, r0, ror #22
   16ab8:	strdeq	r6, [r1], -r0
   16abc:	andeq	r6, r1, r0, ror #22
   16ac0:	andeq	r6, r1, r0, ror #22
   16ac4:	andeq	r6, r1, r0, ror #22
   16ac8:	strdeq	r6, [r1], -r0
   16acc:	andeq	r6, r1, r0, ror #22
   16ad0:	strdeq	r6, [r1], -r0
   16ad4:	andeq	r6, r1, r0, ror #22
   16ad8:	andeq	r6, r1, r0, ror #22
   16adc:	andeq	r6, r1, r0, ror #22
   16ae0:	andeq	r6, r1, r0, ror #22
   16ae4:	andeq	r6, r1, r0, ror #22
   16ae8:	andeq	r6, r1, r0, ror #22
   16aec:	strdeq	r6, [r1], -r0
   16af0:	mov	r0, r8
   16af4:	mov	r1, #48	; 0x30
   16af8:	bl	10f98 <strchr@plt>
   16afc:	cmp	r0, #0
   16b00:	beq	16b2c <__assert_fail@plt+0x5aa4>
   16b04:	ldr	r1, [sp, #20]
   16b08:	ldrb	r0, [r1, #1]
   16b0c:	cmp	r0, #66	; 0x42
   16b10:	cmpne	r0, #68	; 0x44
   16b14:	bne	16b34 <__assert_fail@plt+0x5aac>
   16b18:	mov	r0, #2
   16b1c:	mov	r2, #1000	; 0x3e8
   16b20:	mov	r3, #0
   16b24:	str	r0, [sp, #16]
   16b28:	b	16b60 <__assert_fail@plt+0x5ad8>
   16b2c:	mov	r3, #0
   16b30:	b	16b5c <__assert_fail@plt+0x5ad4>
   16b34:	cmp	r0, #105	; 0x69
   16b38:	mov	r3, #0
   16b3c:	bne	16b5c <__assert_fail@plt+0x5ad4>
   16b40:	ldrb	r0, [r1, #2]
   16b44:	mov	r1, #1
   16b48:	mov	r2, #1024	; 0x400
   16b4c:	cmp	r0, #66	; 0x42
   16b50:	movweq	r1, #3
   16b54:	str	r1, [sp, #16]
   16b58:	b	16b60 <__assert_fail@plt+0x5ad8>
   16b5c:	mov	r2, #1024	; 0x400
   16b60:	sub	r0, r4, #66	; 0x42
   16b64:	cmp	r0, #53	; 0x35
   16b68:	bhi	16c94 <__assert_fail@plt+0x5c0c>
   16b6c:	add	r1, pc, #8
   16b70:	str	r3, [sp, #28]
   16b74:	str	r2, [sp, #24]
   16b78:	ldr	pc, [r1, r0, lsl #2]
   16b7c:	muleq	r1, r4, sp
   16b80:	muleq	r1, r4, ip
   16b84:	muleq	r1, r4, ip
   16b88:	andeq	r6, r1, r8, lsr #27
   16b8c:	muleq	r1, r4, ip
   16b90:	andeq	r6, r1, r4, asr ip
   16b94:	muleq	r1, r4, ip
   16b98:	muleq	r1, r4, ip
   16b9c:	muleq	r1, r4, ip
   16ba0:	muleq	r1, ip, ip
   16ba4:	muleq	r1, r4, ip
   16ba8:	andeq	r6, r1, ip, asr #25
   16bac:	muleq	r1, r4, ip
   16bb0:	muleq	r1, r4, ip
   16bb4:	andeq	r6, r1, ip, ror #27
   16bb8:	muleq	r1, r4, ip
   16bbc:	muleq	r1, r4, ip
   16bc0:	muleq	r1, r4, ip
   16bc4:	andeq	r6, r1, ip, lsl #26
   16bc8:	muleq	r1, r4, ip
   16bcc:	muleq	r1, r4, ip
   16bd0:	muleq	r1, r4, ip
   16bd4:	muleq	r1, r4, ip
   16bd8:	andeq	r6, r1, r0, lsr lr
   16bdc:	andeq	r6, r1, r0, asr sp
   16be0:	muleq	r1, r4, ip
   16be4:	muleq	r1, r4, ip
   16be8:	muleq	r1, r4, ip
   16bec:	muleq	r1, r4, ip
   16bf0:	muleq	r1, r4, ip
   16bf4:	muleq	r1, r4, ip
   16bf8:	muleq	r1, r4, ip
   16bfc:	andeq	r6, r1, r4, ror lr
   16c00:	andeq	r7, r1, ip, ror #27
   16c04:	muleq	r1, r4, ip
   16c08:	muleq	r1, r4, ip
   16c0c:	muleq	r1, r4, ip
   16c10:	andeq	r6, r1, r4, asr ip
   16c14:	muleq	r1, r4, ip
   16c18:	muleq	r1, r4, ip
   16c1c:	muleq	r1, r4, ip
   16c20:	muleq	r1, ip, ip
   16c24:	muleq	r1, r4, ip
   16c28:	andeq	r6, r1, ip, asr #25
   16c2c:	muleq	r1, r4, ip
   16c30:	muleq	r1, r4, ip
   16c34:	muleq	r1, r4, ip
   16c38:	muleq	r1, r4, ip
   16c3c:	muleq	r1, r4, ip
   16c40:	muleq	r1, r4, ip
   16c44:	andeq	r6, r1, ip, lsl #26
   16c48:	muleq	r1, r4, ip
   16c4c:	muleq	r1, r4, ip
   16c50:	andeq	r6, r1, r8, lsl #29
   16c54:	cmn	r7, #1
   16c58:	str	r9, [sp, #12]
   16c5c:	ble	16e9c <__assert_fail@plt+0x5e14>
   16c60:	ldr	r3, [sp, #28]
   16c64:	mvn	r0, #0
   16c68:	mvn	r1, #-2147483648	; 0x80000000
   16c6c:	mvn	r8, #0
   16c70:	mvn	r9, #-2147483648	; 0x80000000
   16c74:	bl	1862c <__assert_fail@plt+0x75a4>
   16c78:	ldr	r2, [sp, #24]
   16c7c:	ldr	r3, [sp, #28]
   16c80:	subs	r0, r0, r6
   16c84:	mov	r4, #1
   16c88:	sbcs	r0, r1, r7
   16c8c:	bge	16edc <__assert_fail@plt+0x5e54>
   16c90:	b	16ef4 <__assert_fail@plt+0x5e6c>
   16c94:	orr	r5, r5, #2
   16c98:	b	17e0c <__assert_fail@plt+0x6d84>
   16c9c:	cmn	r7, #1
   16ca0:	ble	16f30 <__assert_fail@plt+0x5ea8>
   16ca4:	ldr	r3, [sp, #28]
   16ca8:	mvn	r0, #0
   16cac:	mvn	r1, #-2147483648	; 0x80000000
   16cb0:	bl	1862c <__assert_fail@plt+0x75a4>
   16cb4:	ldr	r2, [sp, #24]
   16cb8:	ldr	r3, [sp, #28]
   16cbc:	subs	r0, r0, r6
   16cc0:	sbcs	r0, r1, r7
   16cc4:	bge	16f64 <__assert_fail@plt+0x5edc>
   16cc8:	b	17674 <__assert_fail@plt+0x65ec>
   16ccc:	cmn	r7, #1
   16cd0:	str	r9, [sp, #12]
   16cd4:	ble	16f78 <__assert_fail@plt+0x5ef0>
   16cd8:	ldr	r3, [sp, #28]
   16cdc:	mvn	r0, #0
   16ce0:	mvn	r1, #-2147483648	; 0x80000000
   16ce4:	mvn	r8, #0
   16ce8:	mvn	r9, #-2147483648	; 0x80000000
   16cec:	bl	1862c <__assert_fail@plt+0x75a4>
   16cf0:	ldr	r2, [sp, #24]
   16cf4:	ldr	r3, [sp, #28]
   16cf8:	subs	r0, r0, r6
   16cfc:	mov	r4, #1
   16d00:	sbcs	r0, r1, r7
   16d04:	bge	16fb8 <__assert_fail@plt+0x5f30>
   16d08:	b	16fd0 <__assert_fail@plt+0x5f48>
   16d0c:	cmn	r7, #1
   16d10:	str	r9, [sp, #12]
   16d14:	ble	17008 <__assert_fail@plt+0x5f80>
   16d18:	ldr	r3, [sp, #28]
   16d1c:	mvn	r0, #0
   16d20:	mvn	r1, #-2147483648	; 0x80000000
   16d24:	mvn	r9, #-2147483648	; 0x80000000
   16d28:	str	r0, [sp, #8]
   16d2c:	mvn	r0, #0
   16d30:	bl	1862c <__assert_fail@plt+0x75a4>
   16d34:	ldr	r2, [sp, #24]
   16d38:	ldr	r3, [sp, #28]
   16d3c:	subs	r0, r0, r6
   16d40:	mov	r4, #1
   16d44:	sbcs	r0, r1, r7
   16d48:	bge	1704c <__assert_fail@plt+0x5fc4>
   16d4c:	b	17068 <__assert_fail@plt+0x5fe0>
   16d50:	cmp	r7, #0
   16d54:	str	r9, [sp, #12]
   16d58:	blt	17350 <__assert_fail@plt+0x62c8>
   16d5c:	ldr	r3, [sp, #28]
   16d60:	mvn	r0, #0
   16d64:	mvn	r1, #-2147483648	; 0x80000000
   16d68:	mvn	r9, #-2147483648	; 0x80000000
   16d6c:	str	r0, [sp, #8]
   16d70:	mvn	r0, #0
   16d74:	bl	1862c <__assert_fail@plt+0x75a4>
   16d78:	ldr	r2, [sp, #24]
   16d7c:	ldr	r3, [sp, #28]
   16d80:	subs	r0, r0, r6
   16d84:	mov	r4, #1
   16d88:	sbcs	r0, r1, r7
   16d8c:	bge	17394 <__assert_fail@plt+0x630c>
   16d90:	b	173b0 <__assert_fail@plt+0x6328>
   16d94:	cmn	r7, #1
   16d98:	ble	173ec <__assert_fail@plt+0x6364>
   16d9c:	cmp	r7, #2097152	; 0x200000
   16da0:	blt	1741c <__assert_fail@plt+0x6394>
   16da4:	b	17674 <__assert_fail@plt+0x65ec>
   16da8:	cmp	r7, #0
   16dac:	str	r9, [sp, #12]
   16db0:	blt	1742c <__assert_fail@plt+0x63a4>
   16db4:	ldr	r3, [sp, #28]
   16db8:	mvn	r0, #0
   16dbc:	mvn	r1, #-2147483648	; 0x80000000
   16dc0:	mvn	r9, #-2147483648	; 0x80000000
   16dc4:	str	r0, [sp, #8]
   16dc8:	mvn	r0, #0
   16dcc:	bl	1862c <__assert_fail@plt+0x75a4>
   16dd0:	ldr	r2, [sp, #24]
   16dd4:	ldr	r3, [sp, #28]
   16dd8:	subs	r0, r0, r6
   16ddc:	mov	r4, #1
   16de0:	sbcs	r0, r1, r7
   16de4:	bge	17470 <__assert_fail@plt+0x63e8>
   16de8:	b	1748c <__assert_fail@plt+0x6404>
   16dec:	cmp	r7, #0
   16df0:	str	r9, [sp, #12]
   16df4:	blt	174c8 <__assert_fail@plt+0x6440>
   16df8:	ldr	r3, [sp, #28]
   16dfc:	mvn	r0, #0
   16e00:	mvn	r1, #-2147483648	; 0x80000000
   16e04:	mvn	r8, #-2147483648	; 0x80000000
   16e08:	str	r0, [sp, #8]
   16e0c:	mvn	r0, #0
   16e10:	bl	1862c <__assert_fail@plt+0x75a4>
   16e14:	ldr	r2, [sp, #24]
   16e18:	ldr	r3, [sp, #28]
   16e1c:	subs	r0, r0, r6
   16e20:	mov	r4, #1
   16e24:	sbcs	r0, r1, r7
   16e28:	bge	1750c <__assert_fail@plt+0x6484>
   16e2c:	b	17528 <__assert_fail@plt+0x64a0>
   16e30:	cmp	r7, #0
   16e34:	str	r9, [sp, #12]
   16e38:	blt	17564 <__assert_fail@plt+0x64dc>
   16e3c:	ldr	r3, [sp, #28]
   16e40:	mvn	r0, #0
   16e44:	mvn	r1, #-2147483648	; 0x80000000
   16e48:	mvn	r9, #-2147483648	; 0x80000000
   16e4c:	str	r0, [sp, #8]
   16e50:	mvn	r0, #0
   16e54:	bl	1862c <__assert_fail@plt+0x75a4>
   16e58:	ldr	r2, [sp, #24]
   16e5c:	ldr	r3, [sp, #28]
   16e60:	subs	r0, r0, r6
   16e64:	mov	r4, #1
   16e68:	sbcs	r0, r1, r7
   16e6c:	bge	175a8 <__assert_fail@plt+0x6520>
   16e70:	b	175c4 <__assert_fail@plt+0x653c>
   16e74:	cmn	r7, #1
   16e78:	ble	17604 <__assert_fail@plt+0x657c>
   16e7c:	cmp	r7, #4194304	; 0x400000
   16e80:	blt	17634 <__assert_fail@plt+0x65ac>
   16e84:	b	17674 <__assert_fail@plt+0x65ec>
   16e88:	cmn	r7, #1
   16e8c:	ble	17644 <__assert_fail@plt+0x65bc>
   16e90:	cmp	r7, #1073741824	; 0x40000000
   16e94:	bge	17674 <__assert_fail@plt+0x65ec>
   16e98:	b	17694 <__assert_fail@plt+0x660c>
   16e9c:	and	r0, r6, r7
   16ea0:	cmn	r0, #1
   16ea4:	beq	16edc <__assert_fail@plt+0x5e54>
   16ea8:	mov	r0, #0
   16eac:	mov	r1, #-2147483648	; 0x80000000
   16eb0:	mov	r2, r6
   16eb4:	mov	r3, r7
   16eb8:	mov	r8, #0
   16ebc:	mov	r9, #-2147483648	; 0x80000000
   16ec0:	bl	18558 <__assert_fail@plt+0x74d0>
   16ec4:	ldr	r2, [sp, #24]
   16ec8:	ldr	r3, [sp, #28]
   16ecc:	mov	r4, #1
   16ed0:	subs	r0, r0, r2
   16ed4:	sbcs	r0, r1, r3
   16ed8:	blt	170a4 <__assert_fail@plt+0x601c>
   16edc:	umull	r8, r0, r6, r2
   16ee0:	mov	r4, #0
   16ee4:	mla	r0, r6, r3, r0
   16ee8:	mla	r9, r7, r2, r0
   16eec:	cmp	r9, #0
   16ef0:	blt	170a4 <__assert_fail@plt+0x601c>
   16ef4:	ldr	r3, [sp, #28]
   16ef8:	mvn	r0, #-2147483648	; 0x80000000
   16efc:	mvn	r1, #-2147483648	; 0x80000000
   16f00:	mov	r6, r4
   16f04:	mvn	r4, #0
   16f08:	str	r0, [sp, #8]
   16f0c:	mvn	r0, #0
   16f10:	bl	1862c <__assert_fail@plt+0x75a4>
   16f14:	ldr	r2, [sp, #24]
   16f18:	ldr	r3, [sp, #28]
   16f1c:	subs	r0, r0, r8
   16f20:	mov	r7, #1
   16f24:	sbcs	r0, r1, r9
   16f28:	bge	170e0 <__assert_fail@plt+0x6058>
   16f2c:	b	170fc <__assert_fail@plt+0x6074>
   16f30:	and	r0, r6, r7
   16f34:	cmn	r0, #1
   16f38:	beq	16f64 <__assert_fail@plt+0x5edc>
   16f3c:	mov	r0, #0
   16f40:	mov	r1, #-2147483648	; 0x80000000
   16f44:	mov	r2, r6
   16f48:	mov	r3, r7
   16f4c:	bl	18558 <__assert_fail@plt+0x74d0>
   16f50:	ldr	r2, [sp, #24]
   16f54:	ldr	r3, [sp, #28]
   16f58:	subs	r0, r0, r2
   16f5c:	sbcs	r0, r1, r3
   16f60:	blt	17674 <__assert_fail@plt+0x65ec>
   16f64:	umull	r0, r1, r6, r2
   16f68:	mla	r1, r6, r3, r1
   16f6c:	mov	r6, r0
   16f70:	mla	r7, r7, r2, r1
   16f74:	b	17dec <__assert_fail@plt+0x6d64>
   16f78:	and	r0, r6, r7
   16f7c:	cmn	r0, #1
   16f80:	beq	16fb8 <__assert_fail@plt+0x5f30>
   16f84:	mov	r0, #0
   16f88:	mov	r1, #-2147483648	; 0x80000000
   16f8c:	mov	r2, r6
   16f90:	mov	r3, r7
   16f94:	mov	r8, #0
   16f98:	mov	r9, #-2147483648	; 0x80000000
   16f9c:	bl	18558 <__assert_fail@plt+0x74d0>
   16fa0:	ldr	r2, [sp, #24]
   16fa4:	ldr	r3, [sp, #28]
   16fa8:	mov	r4, #1
   16fac:	subs	r0, r0, r2
   16fb0:	sbcs	r0, r1, r3
   16fb4:	blt	17190 <__assert_fail@plt+0x6108>
   16fb8:	umull	r8, r0, r6, r2
   16fbc:	mov	r4, #0
   16fc0:	mla	r0, r6, r3, r0
   16fc4:	mla	r9, r7, r2, r0
   16fc8:	cmp	r9, #0
   16fcc:	blt	17190 <__assert_fail@plt+0x6108>
   16fd0:	ldr	r3, [sp, #28]
   16fd4:	mvn	r0, #0
   16fd8:	mvn	r1, #-2147483648	; 0x80000000
   16fdc:	str	r4, [sp, #8]
   16fe0:	mvn	r6, #0
   16fe4:	mvn	r7, #-2147483648	; 0x80000000
   16fe8:	bl	1862c <__assert_fail@plt+0x75a4>
   16fec:	ldr	r4, [sp, #24]
   16ff0:	ldr	r3, [sp, #28]
   16ff4:	subs	r0, r0, r8
   16ff8:	mov	r2, #1
   16ffc:	sbcs	r0, r1, r9
   17000:	bge	171c8 <__assert_fail@plt+0x6140>
   17004:	b	17300 <__assert_fail@plt+0x6278>
   17008:	and	r0, r6, r7
   1700c:	cmn	r0, #1
   17010:	beq	1704c <__assert_fail@plt+0x5fc4>
   17014:	mov	r0, #0
   17018:	mov	r1, #-2147483648	; 0x80000000
   1701c:	mov	r2, r6
   17020:	mov	r3, r7
   17024:	bl	18558 <__assert_fail@plt+0x74d0>
   17028:	ldr	r2, [sp, #24]
   1702c:	ldr	r3, [sp, #28]
   17030:	mov	r4, #1
   17034:	mov	r9, #-2147483648	; 0x80000000
   17038:	subs	r0, r0, r2
   1703c:	sbcs	r0, r1, r3
   17040:	mov	r0, #0
   17044:	str	r0, [sp, #8]
   17048:	blt	171dc <__assert_fail@plt+0x6154>
   1704c:	umull	r1, r0, r6, r2
   17050:	mov	r4, #0
   17054:	mla	r0, r6, r3, r0
   17058:	str	r1, [sp, #8]
   1705c:	mla	r9, r7, r2, r0
   17060:	cmp	r9, #0
   17064:	blt	171dc <__assert_fail@plt+0x6154>
   17068:	ldr	r3, [sp, #28]
   1706c:	mvn	r0, #0
   17070:	mvn	r1, #-2147483648	; 0x80000000
   17074:	str	r4, [sp, #4]
   17078:	mvn	r6, #0
   1707c:	mvn	r8, #-2147483648	; 0x80000000
   17080:	bl	1862c <__assert_fail@plt+0x75a4>
   17084:	ldr	r4, [sp, #8]
   17088:	ldr	r2, [sp, #24]
   1708c:	ldr	r3, [sp, #28]
   17090:	mov	r7, #1
   17094:	subs	r0, r0, r4
   17098:	sbcs	r0, r1, r9
   1709c:	bge	17218 <__assert_fail@plt+0x6190>
   170a0:	b	17230 <__assert_fail@plt+0x61a8>
   170a4:	mov	r0, #-2147483648	; 0x80000000
   170a8:	mov	r1, #-2147483648	; 0x80000000
   170ac:	mov	r2, r8
   170b0:	mov	r3, r9
   170b4:	mov	r6, r4
   170b8:	mov	r4, #0
   170bc:	str	r0, [sp, #8]
   170c0:	mov	r0, #0
   170c4:	bl	18558 <__assert_fail@plt+0x74d0>
   170c8:	ldr	r2, [sp, #24]
   170cc:	ldr	r3, [sp, #28]
   170d0:	mov	r7, #1
   170d4:	subs	r0, r0, r2
   170d8:	sbcs	r0, r1, r3
   170dc:	blt	17150 <__assert_fail@plt+0x60c8>
   170e0:	umull	r4, r0, r8, r2
   170e4:	mov	r7, r6
   170e8:	mla	r0, r8, r3, r0
   170ec:	mla	r0, r9, r2, r0
   170f0:	cmp	r0, #0
   170f4:	str	r0, [sp, #8]
   170f8:	blt	17150 <__assert_fail@plt+0x60c8>
   170fc:	ldr	r3, [sp, #28]
   17100:	mvn	r0, #0
   17104:	mvn	r1, #-2147483648	; 0x80000000
   17108:	mov	r9, r7
   1710c:	mvn	r6, #0
   17110:	mvn	r7, #-2147483648	; 0x80000000
   17114:	bl	1862c <__assert_fail@plt+0x75a4>
   17118:	ldr	r8, [sp, #8]
   1711c:	ldr	r3, [sp, #24]
   17120:	ldr	ip, [sp, #28]
   17124:	subs	r0, r0, r4
   17128:	mov	r2, #1
   1712c:	sbcs	r0, r1, r8
   17130:	blt	17144 <__assert_fail@plt+0x60bc>
   17134:	umull	r6, r0, r4, r3
   17138:	mov	r2, #0
   1713c:	mla	r0, r4, ip, r0
   17140:	mla	r7, r8, r3, r0
   17144:	orr	r3, r2, r9
   17148:	ldr	r9, [sp, #12]
   1714c:	b	17dec <__assert_fail@plt+0x6d64>
   17150:	ldr	r8, [sp, #8]
   17154:	mov	r0, #0
   17158:	mov	r1, #-2147483648	; 0x80000000
   1715c:	mov	r2, r4
   17160:	mov	r9, r7
   17164:	mov	r6, #0
   17168:	mov	r7, #-2147483648	; 0x80000000
   1716c:	mov	r3, r8
   17170:	bl	18558 <__assert_fail@plt+0x74d0>
   17174:	ldr	r3, [sp, #24]
   17178:	ldr	ip, [sp, #28]
   1717c:	mov	r2, #1
   17180:	subs	r0, r0, r3
   17184:	sbcs	r0, r1, ip
   17188:	bge	17134 <__assert_fail@plt+0x60ac>
   1718c:	b	17144 <__assert_fail@plt+0x60bc>
   17190:	mov	r0, #0
   17194:	mov	r1, #-2147483648	; 0x80000000
   17198:	mov	r2, r8
   1719c:	mov	r3, r9
   171a0:	str	r4, [sp, #8]
   171a4:	mov	r6, #0
   171a8:	mov	r7, #-2147483648	; 0x80000000
   171ac:	bl	18558 <__assert_fail@plt+0x74d0>
   171b0:	ldr	r4, [sp, #24]
   171b4:	ldr	r3, [sp, #28]
   171b8:	mov	r2, #1
   171bc:	subs	r0, r0, r4
   171c0:	sbcs	r0, r1, r3
   171c4:	blt	17300 <__assert_fail@plt+0x6278>
   171c8:	umull	r6, r0, r8, r4
   171cc:	mov	r2, #0
   171d0:	mla	r0, r8, r3, r0
   171d4:	mla	r7, r9, r4, r0
   171d8:	b	17300 <__assert_fail@plt+0x6278>
   171dc:	str	r4, [sp, #4]
   171e0:	ldr	r4, [sp, #8]
   171e4:	mov	r0, #0
   171e8:	mov	r1, #-2147483648	; 0x80000000
   171ec:	mov	r3, r9
   171f0:	mov	r2, r4
   171f4:	bl	18558 <__assert_fail@plt+0x74d0>
   171f8:	ldr	r2, [sp, #24]
   171fc:	ldr	r3, [sp, #28]
   17200:	mov	r7, #1
   17204:	mov	r6, #0
   17208:	mov	r8, #-2147483648	; 0x80000000
   1720c:	subs	r0, r0, r2
   17210:	sbcs	r0, r1, r3
   17214:	blt	17268 <__assert_fail@plt+0x61e0>
   17218:	umull	r6, r0, r4, r2
   1721c:	ldr	r7, [sp, #4]
   17220:	mla	r0, r4, r3, r0
   17224:	mla	r8, r9, r2, r0
   17228:	cmp	r8, #0
   1722c:	blt	17268 <__assert_fail@plt+0x61e0>
   17230:	ldr	r3, [sp, #28]
   17234:	mvn	r0, #0
   17238:	mvn	r1, #-2147483648	; 0x80000000
   1723c:	str	r7, [sp, #8]
   17240:	mvn	r4, #0
   17244:	mvn	r9, #-2147483648	; 0x80000000
   17248:	bl	1862c <__assert_fail@plt+0x75a4>
   1724c:	ldr	r2, [sp, #24]
   17250:	ldr	r3, [sp, #28]
   17254:	subs	r0, r0, r6
   17258:	mov	r7, #1
   1725c:	sbcs	r0, r1, r8
   17260:	bge	172a0 <__assert_fail@plt+0x6218>
   17264:	b	172b8 <__assert_fail@plt+0x6230>
   17268:	mov	r0, #0
   1726c:	mov	r1, #-2147483648	; 0x80000000
   17270:	mov	r2, r6
   17274:	mov	r3, r8
   17278:	str	r7, [sp, #8]
   1727c:	bl	18558 <__assert_fail@plt+0x74d0>
   17280:	ldr	r2, [sp, #24]
   17284:	ldr	r3, [sp, #28]
   17288:	mov	r7, #1
   1728c:	mov	r4, #0
   17290:	mov	r9, #-2147483648	; 0x80000000
   17294:	subs	r0, r0, r2
   17298:	sbcs	r0, r1, r3
   1729c:	blt	17310 <__assert_fail@plt+0x6288>
   172a0:	umull	r4, r0, r6, r2
   172a4:	ldr	r7, [sp, #8]
   172a8:	mla	r0, r6, r3, r0
   172ac:	mla	r9, r8, r2, r0
   172b0:	cmp	r9, #0
   172b4:	blt	17310 <__assert_fail@plt+0x6288>
   172b8:	ldr	r3, [sp, #28]
   172bc:	mvn	r0, #0
   172c0:	mvn	r1, #-2147483648	; 0x80000000
   172c4:	str	r7, [sp, #8]
   172c8:	mvn	r6, #0
   172cc:	mvn	r7, #-2147483648	; 0x80000000
   172d0:	bl	1862c <__assert_fail@plt+0x75a4>
   172d4:	ldr	r3, [sp, #24]
   172d8:	ldr	ip, [sp, #28]
   172dc:	subs	r0, r0, r4
   172e0:	mov	r2, #1
   172e4:	mov	r8, r4
   172e8:	sbcs	r0, r1, r9
   172ec:	blt	17300 <__assert_fail@plt+0x6278>
   172f0:	umull	r6, r0, r8, r3
   172f4:	mov	r2, #0
   172f8:	mla	r0, r8, ip, r0
   172fc:	mla	r7, r9, r3, r0
   17300:	ldr	r0, [sp, #8]
   17304:	ldr	r9, [sp, #12]
   17308:	orr	r3, r2, r0
   1730c:	b	17dec <__assert_fail@plt+0x6d64>
   17310:	mov	r0, #0
   17314:	mov	r1, #-2147483648	; 0x80000000
   17318:	mov	r2, r4
   1731c:	mov	r3, r9
   17320:	str	r7, [sp, #8]
   17324:	mov	r8, r4
   17328:	bl	18558 <__assert_fail@plt+0x74d0>
   1732c:	ldr	r3, [sp, #24]
   17330:	ldr	ip, [sp, #28]
   17334:	mov	r2, #1
   17338:	mov	r6, #0
   1733c:	mov	r7, #-2147483648	; 0x80000000
   17340:	subs	r0, r0, r3
   17344:	sbcs	r0, r1, ip
   17348:	bge	172f0 <__assert_fail@plt+0x6268>
   1734c:	b	17300 <__assert_fail@plt+0x6278>
   17350:	and	r0, r6, r7
   17354:	cmn	r0, #1
   17358:	beq	17394 <__assert_fail@plt+0x630c>
   1735c:	mov	r0, #0
   17360:	mov	r1, #-2147483648	; 0x80000000
   17364:	mov	r2, r6
   17368:	mov	r3, r7
   1736c:	bl	18558 <__assert_fail@plt+0x74d0>
   17370:	ldr	r2, [sp, #24]
   17374:	ldr	r3, [sp, #28]
   17378:	mov	r4, #1
   1737c:	mov	r9, #-2147483648	; 0x80000000
   17380:	subs	r0, r0, r2
   17384:	sbcs	r0, r1, r3
   17388:	mov	r0, #0
   1738c:	str	r0, [sp, #8]
   17390:	blt	176a4 <__assert_fail@plt+0x661c>
   17394:	umull	r1, r0, r6, r2
   17398:	mov	r4, #0
   1739c:	mla	r0, r6, r3, r0
   173a0:	str	r1, [sp, #8]
   173a4:	mla	r9, r7, r2, r0
   173a8:	cmp	r9, #0
   173ac:	blt	176a4 <__assert_fail@plt+0x661c>
   173b0:	ldr	r3, [sp, #28]
   173b4:	mvn	r0, #0
   173b8:	mvn	r1, #-2147483648	; 0x80000000
   173bc:	str	r4, [sp, #4]
   173c0:	mvn	r8, #0
   173c4:	mvn	r4, #-2147483648	; 0x80000000
   173c8:	bl	1862c <__assert_fail@plt+0x75a4>
   173cc:	ldr	r6, [sp, #8]
   173d0:	ldr	r2, [sp, #24]
   173d4:	ldr	r3, [sp, #28]
   173d8:	mov	r7, #1
   173dc:	subs	r0, r0, r6
   173e0:	sbcs	r0, r1, r9
   173e4:	bge	176e0 <__assert_fail@plt+0x6658>
   173e8:	b	176f8 <__assert_fail@plt+0x6670>
   173ec:	and	r0, r6, r7
   173f0:	cmn	r0, #1
   173f4:	beq	1741c <__assert_fail@plt+0x6394>
   173f8:	mov	r0, #0
   173fc:	mov	r1, #-2147483648	; 0x80000000
   17400:	mov	r2, r6
   17404:	mov	r3, r7
   17408:	bl	18558 <__assert_fail@plt+0x74d0>
   1740c:	ldr	r3, [sp, #28]
   17410:	subs	r0, r0, #1024	; 0x400
   17414:	sbcs	r0, r1, #0
   17418:	blt	17674 <__assert_fail@plt+0x65ec>
   1741c:	lsl	r0, r7, #10
   17420:	orr	r7, r0, r6, lsr #22
   17424:	lsl	r6, r6, #10
   17428:	b	17dec <__assert_fail@plt+0x6d64>
   1742c:	and	r0, r6, r7
   17430:	cmn	r0, #1
   17434:	beq	17470 <__assert_fail@plt+0x63e8>
   17438:	mov	r0, #0
   1743c:	mov	r1, #-2147483648	; 0x80000000
   17440:	mov	r2, r6
   17444:	mov	r3, r7
   17448:	bl	18558 <__assert_fail@plt+0x74d0>
   1744c:	ldr	r2, [sp, #24]
   17450:	ldr	r3, [sp, #28]
   17454:	mov	r4, #1
   17458:	mov	r9, #-2147483648	; 0x80000000
   1745c:	subs	r0, r0, r2
   17460:	sbcs	r0, r1, r3
   17464:	mov	r0, #0
   17468:	str	r0, [sp, #8]
   1746c:	blt	179bc <__assert_fail@plt+0x6934>
   17470:	umull	r1, r0, r6, r2
   17474:	mov	r4, #0
   17478:	mla	r0, r6, r3, r0
   1747c:	str	r1, [sp, #8]
   17480:	mla	r9, r7, r2, r0
   17484:	cmp	r9, #0
   17488:	blt	179bc <__assert_fail@plt+0x6934>
   1748c:	ldr	r3, [sp, #28]
   17490:	mvn	r0, #0
   17494:	mvn	r1, #-2147483648	; 0x80000000
   17498:	str	r4, [sp, #4]
   1749c:	mvn	r8, #0
   174a0:	mvn	r4, #-2147483648	; 0x80000000
   174a4:	bl	1862c <__assert_fail@plt+0x75a4>
   174a8:	ldr	r6, [sp, #8]
   174ac:	ldr	r2, [sp, #24]
   174b0:	ldr	r3, [sp, #28]
   174b4:	mov	r7, #1
   174b8:	subs	r0, r0, r6
   174bc:	sbcs	r0, r1, r9
   174c0:	bge	179f8 <__assert_fail@plt+0x6970>
   174c4:	b	17a10 <__assert_fail@plt+0x6988>
   174c8:	and	r0, r6, r7
   174cc:	cmn	r0, #1
   174d0:	beq	1750c <__assert_fail@plt+0x6484>
   174d4:	mov	r0, #0
   174d8:	mov	r1, #-2147483648	; 0x80000000
   174dc:	mov	r2, r6
   174e0:	mov	r3, r7
   174e4:	bl	18558 <__assert_fail@plt+0x74d0>
   174e8:	ldr	r2, [sp, #24]
   174ec:	ldr	r3, [sp, #28]
   174f0:	mov	r4, #1
   174f4:	mov	r8, #-2147483648	; 0x80000000
   174f8:	subs	r0, r0, r2
   174fc:	sbcs	r0, r1, r3
   17500:	mov	r0, #0
   17504:	str	r0, [sp, #8]
   17508:	blt	17c38 <__assert_fail@plt+0x6bb0>
   1750c:	umull	r1, r0, r6, r2
   17510:	mov	r4, #0
   17514:	mla	r0, r6, r3, r0
   17518:	str	r1, [sp, #8]
   1751c:	mla	r8, r7, r2, r0
   17520:	cmp	r8, #0
   17524:	blt	17c38 <__assert_fail@plt+0x6bb0>
   17528:	ldr	r3, [sp, #28]
   1752c:	mvn	r0, #0
   17530:	mvn	r1, #-2147483648	; 0x80000000
   17534:	str	r4, [sp, #4]
   17538:	mvn	r9, #0
   1753c:	mvn	r4, #-2147483648	; 0x80000000
   17540:	bl	1862c <__assert_fail@plt+0x75a4>
   17544:	ldr	r6, [sp, #8]
   17548:	ldr	r2, [sp, #24]
   1754c:	ldr	r3, [sp, #28]
   17550:	mov	r7, #1
   17554:	subs	r0, r0, r6
   17558:	sbcs	r0, r1, r8
   1755c:	bge	17c74 <__assert_fail@plt+0x6bec>
   17560:	b	17c8c <__assert_fail@plt+0x6c04>
   17564:	and	r0, r6, r7
   17568:	cmn	r0, #1
   1756c:	beq	175a8 <__assert_fail@plt+0x6520>
   17570:	mov	r0, #0
   17574:	mov	r1, #-2147483648	; 0x80000000
   17578:	mov	r2, r6
   1757c:	mov	r3, r7
   17580:	bl	18558 <__assert_fail@plt+0x74d0>
   17584:	ldr	r2, [sp, #24]
   17588:	ldr	r3, [sp, #28]
   1758c:	mov	r4, #1
   17590:	mov	r9, #-2147483648	; 0x80000000
   17594:	subs	r0, r0, r2
   17598:	sbcs	r0, r1, r3
   1759c:	mov	r0, #0
   175a0:	str	r0, [sp, #8]
   175a4:	blt	17e54 <__assert_fail@plt+0x6dcc>
   175a8:	umull	r1, r0, r6, r2
   175ac:	mov	r4, #0
   175b0:	mla	r0, r6, r3, r0
   175b4:	str	r1, [sp, #8]
   175b8:	mla	r9, r7, r2, r0
   175bc:	cmp	r9, #0
   175c0:	blt	17e54 <__assert_fail@plt+0x6dcc>
   175c4:	ldr	r3, [sp, #28]
   175c8:	mvn	r0, #0
   175cc:	mvn	r1, #-2147483648	; 0x80000000
   175d0:	str	r4, [sp]
   175d4:	mvn	r8, #-2147483648	; 0x80000000
   175d8:	str	r0, [sp, #4]
   175dc:	mvn	r0, #0
   175e0:	bl	1862c <__assert_fail@plt+0x75a4>
   175e4:	ldr	r6, [sp, #8]
   175e8:	ldr	r2, [sp, #24]
   175ec:	ldr	r3, [sp, #28]
   175f0:	mov	r7, #1
   175f4:	subs	r0, r0, r6
   175f8:	sbcs	r0, r1, r9
   175fc:	bge	17e94 <__assert_fail@plt+0x6e0c>
   17600:	b	17eb0 <__assert_fail@plt+0x6e28>
   17604:	and	r0, r6, r7
   17608:	cmn	r0, #1
   1760c:	beq	17634 <__assert_fail@plt+0x65ac>
   17610:	mov	r0, #0
   17614:	mov	r1, #-2147483648	; 0x80000000
   17618:	mov	r2, r6
   1761c:	mov	r3, r7
   17620:	bl	18558 <__assert_fail@plt+0x74d0>
   17624:	ldr	r3, [sp, #28]
   17628:	subs	r0, r0, #512	; 0x200
   1762c:	sbcs	r0, r1, #0
   17630:	blt	17674 <__assert_fail@plt+0x65ec>
   17634:	lsl	r0, r7, #9
   17638:	orr	r7, r0, r6, lsr #23
   1763c:	lsl	r6, r6, #9
   17640:	b	17dec <__assert_fail@plt+0x6d64>
   17644:	and	r0, r6, r7
   17648:	cmn	r0, #1
   1764c:	beq	17694 <__assert_fail@plt+0x660c>
   17650:	mov	r0, #0
   17654:	mov	r1, #-2147483648	; 0x80000000
   17658:	mov	r2, r6
   1765c:	mov	r3, r7
   17660:	bl	18558 <__assert_fail@plt+0x74d0>
   17664:	ldr	r3, [sp, #28]
   17668:	subs	r0, r0, #2
   1766c:	sbcs	r0, r1, #0
   17670:	bge	17694 <__assert_fail@plt+0x660c>
   17674:	mvn	r0, #-2147483648	; 0x80000000
   17678:	cmp	r7, #0
   1767c:	mvn	r6, #0
   17680:	mov	r3, #1
   17684:	movlt	r0, #-2147483648	; 0x80000000
   17688:	movwlt	r6, #0
   1768c:	mov	r7, r0
   17690:	b	17dec <__assert_fail@plt+0x6d64>
   17694:	lsl	r0, r7, #1
   17698:	orr	r7, r0, r6, lsr #31
   1769c:	lsl	r6, r6, #1
   176a0:	b	17dec <__assert_fail@plt+0x6d64>
   176a4:	ldr	r6, [sp, #8]
   176a8:	mov	r0, #0
   176ac:	mov	r1, #-2147483648	; 0x80000000
   176b0:	mov	r3, r9
   176b4:	str	r4, [sp, #4]
   176b8:	mov	r2, r6
   176bc:	bl	18558 <__assert_fail@plt+0x74d0>
   176c0:	ldr	r2, [sp, #24]
   176c4:	ldr	r3, [sp, #28]
   176c8:	mov	r7, #1
   176cc:	mov	r8, #0
   176d0:	mov	r4, #-2147483648	; 0x80000000
   176d4:	subs	r0, r0, r2
   176d8:	sbcs	r0, r1, r3
   176dc:	blt	17730 <__assert_fail@plt+0x66a8>
   176e0:	umull	r8, r0, r6, r2
   176e4:	ldr	r7, [sp, #4]
   176e8:	mla	r0, r6, r3, r0
   176ec:	mla	r4, r9, r2, r0
   176f0:	cmp	r4, #0
   176f4:	blt	17730 <__assert_fail@plt+0x66a8>
   176f8:	ldr	r3, [sp, #28]
   176fc:	mvn	r0, #0
   17700:	mvn	r1, #-2147483648	; 0x80000000
   17704:	str	r7, [sp, #8]
   17708:	mvn	r7, #0
   1770c:	mvn	r9, #-2147483648	; 0x80000000
   17710:	bl	1862c <__assert_fail@plt+0x75a4>
   17714:	ldr	r2, [sp, #24]
   17718:	ldr	r3, [sp, #28]
   1771c:	subs	r0, r0, r8
   17720:	mov	r6, #1
   17724:	sbcs	r0, r1, r4
   17728:	bge	17768 <__assert_fail@plt+0x66e0>
   1772c:	b	17780 <__assert_fail@plt+0x66f8>
   17730:	mov	r0, #0
   17734:	mov	r1, #-2147483648	; 0x80000000
   17738:	mov	r2, r8
   1773c:	mov	r3, r4
   17740:	str	r7, [sp, #8]
   17744:	bl	18558 <__assert_fail@plt+0x74d0>
   17748:	ldr	r2, [sp, #24]
   1774c:	ldr	r3, [sp, #28]
   17750:	mov	r6, #1
   17754:	mov	r7, #0
   17758:	mov	r9, #-2147483648	; 0x80000000
   1775c:	subs	r0, r0, r2
   17760:	sbcs	r0, r1, r3
   17764:	blt	177c0 <__assert_fail@plt+0x6738>
   17768:	umull	r7, r0, r8, r2
   1776c:	ldr	r6, [sp, #8]
   17770:	mla	r0, r8, r3, r0
   17774:	mla	r9, r4, r2, r0
   17778:	cmp	r9, #0
   1777c:	blt	177c0 <__assert_fail@plt+0x6738>
   17780:	ldr	r3, [sp, #28]
   17784:	mvn	r0, #0
   17788:	mvn	r1, #-2147483648	; 0x80000000
   1778c:	str	r6, [sp, #8]
   17790:	mvn	r8, #0
   17794:	mvn	r4, #-2147483648	; 0x80000000
   17798:	bl	1862c <__assert_fail@plt+0x75a4>
   1779c:	ldr	r2, [sp, #24]
   177a0:	ldr	r3, [sp, #28]
   177a4:	subs	r0, r0, r7
   177a8:	sbcs	r0, r1, r9
   177ac:	bge	17804 <__assert_fail@plt+0x677c>
   177b0:	mov	r0, #1
   177b4:	mov	r6, #0
   177b8:	str	r0, [sp, #8]
   177bc:	b	1781c <__assert_fail@plt+0x6794>
   177c0:	mov	r0, #0
   177c4:	mov	r1, #-2147483648	; 0x80000000
   177c8:	mov	r2, r7
   177cc:	mov	r3, r9
   177d0:	str	r6, [sp, #8]
   177d4:	bl	18558 <__assert_fail@plt+0x74d0>
   177d8:	ldr	r2, [sp, #24]
   177dc:	ldr	r3, [sp, #28]
   177e0:	subs	r0, r0, r2
   177e4:	sbcs	r0, r1, r3
   177e8:	bge	17804 <__assert_fail@plt+0x677c>
   177ec:	mov	r0, #1
   177f0:	mov	r8, #0
   177f4:	mov	r4, #-2147483648	; 0x80000000
   177f8:	mov	r6, #0
   177fc:	str	r0, [sp, #8]
   17800:	b	17854 <__assert_fail@plt+0x67cc>
   17804:	umull	r8, r0, r7, r2
   17808:	mov	r6, #0
   1780c:	mla	r0, r7, r3, r0
   17810:	mla	r4, r9, r2, r0
   17814:	cmp	r4, #0
   17818:	blt	17854 <__assert_fail@plt+0x67cc>
   1781c:	ldr	r3, [sp, #28]
   17820:	mvn	r0, #0
   17824:	mvn	r1, #-2147483648	; 0x80000000
   17828:	mvn	r9, #0
   1782c:	mvn	r7, #-2147483648	; 0x80000000
   17830:	bl	1862c <__assert_fail@plt+0x75a4>
   17834:	ldr	r2, [sp, #24]
   17838:	ldr	r3, [sp, #28]
   1783c:	subs	r0, r0, r8
   17840:	sbcs	r0, r1, r4
   17844:	bge	17890 <__assert_fail@plt+0x6808>
   17848:	mov	r0, #1
   1784c:	str	r0, [sp, #8]
   17850:	b	178a4 <__assert_fail@plt+0x681c>
   17854:	mov	r0, #0
   17858:	mov	r1, #-2147483648	; 0x80000000
   1785c:	mov	r2, r8
   17860:	mov	r3, r4
   17864:	bl	18558 <__assert_fail@plt+0x74d0>
   17868:	ldr	r2, [sp, #24]
   1786c:	ldr	r3, [sp, #28]
   17870:	subs	r0, r0, r2
   17874:	sbcs	r0, r1, r3
   17878:	bge	17890 <__assert_fail@plt+0x6808>
   1787c:	mov	r0, #1
   17880:	mov	r9, #0
   17884:	mov	r7, #-2147483648	; 0x80000000
   17888:	str	r0, [sp, #8]
   1788c:	b	178e0 <__assert_fail@plt+0x6858>
   17890:	umull	r9, r0, r8, r2
   17894:	mla	r0, r8, r3, r0
   17898:	mla	r7, r4, r2, r0
   1789c:	cmp	r7, #0
   178a0:	blt	178e0 <__assert_fail@plt+0x6858>
   178a4:	ldr	r3, [sp, #28]
   178a8:	mvn	r0, #0
   178ac:	mvn	r1, #-2147483648	; 0x80000000
   178b0:	mvn	r8, #0
   178b4:	mvn	r4, #-2147483648	; 0x80000000
   178b8:	bl	1862c <__assert_fail@plt+0x75a4>
   178bc:	ldr	r2, [sp, #24]
   178c0:	ldr	r3, [sp, #28]
   178c4:	subs	r0, r0, r9
   178c8:	sbcs	r0, r1, r7
   178cc:	bge	17920 <__assert_fail@plt+0x6898>
   178d0:	ldr	r9, [sp, #12]
   178d4:	mov	r0, #1
   178d8:	str	r0, [sp, #8]
   178dc:	b	17938 <__assert_fail@plt+0x68b0>
   178e0:	mov	r0, #0
   178e4:	mov	r1, #-2147483648	; 0x80000000
   178e8:	mov	r2, r9
   178ec:	mov	r3, r7
   178f0:	bl	18558 <__assert_fail@plt+0x74d0>
   178f4:	ldr	r2, [sp, #24]
   178f8:	ldr	r3, [sp, #28]
   178fc:	subs	r0, r0, r2
   17900:	sbcs	r0, r1, r3
   17904:	bge	17920 <__assert_fail@plt+0x6898>
   17908:	ldr	r9, [sp, #12]
   1790c:	mov	r0, #1
   17910:	mov	r8, #0
   17914:	mov	r4, #-2147483648	; 0x80000000
   17918:	str	r0, [sp, #8]
   1791c:	b	17988 <__assert_fail@plt+0x6900>
   17920:	umull	r8, r0, r9, r2
   17924:	mla	r0, r9, r3, r0
   17928:	ldr	r9, [sp, #12]
   1792c:	mla	r4, r7, r2, r0
   17930:	cmp	r4, #0
   17934:	blt	17988 <__assert_fail@plt+0x6900>
   17938:	ldr	r3, [sp, #28]
   1793c:	mvn	r0, #0
   17940:	mvn	r1, #-2147483648	; 0x80000000
   17944:	mvn	r6, #0
   17948:	bl	1862c <__assert_fail@plt+0x75a4>
   1794c:	ldr	r7, [sp, #24]
   17950:	ldr	r3, [sp, #28]
   17954:	subs	r0, r0, r8
   17958:	mov	r2, #1
   1795c:	sbcs	r0, r1, r4
   17960:	mvn	r0, #-2147483648	; 0x80000000
   17964:	blt	17978 <__assert_fail@plt+0x68f0>
   17968:	umull	r6, r0, r8, r7
   1796c:	mov	r2, #0
   17970:	mla	r0, r8, r3, r0
   17974:	mla	r0, r4, r7, r0
   17978:	ldr	r1, [sp, #8]
   1797c:	mov	r7, r0
   17980:	orr	r3, r2, r1
   17984:	b	17dec <__assert_fail@plt+0x6d64>
   17988:	mov	r0, #0
   1798c:	mov	r1, #-2147483648	; 0x80000000
   17990:	mov	r2, r8
   17994:	mov	r3, r4
   17998:	bl	18558 <__assert_fail@plt+0x74d0>
   1799c:	ldr	r7, [sp, #24]
   179a0:	ldr	r3, [sp, #28]
   179a4:	mov	r2, #1
   179a8:	subs	r0, r0, r7
   179ac:	sbcs	r0, r1, r3
   179b0:	mov	r0, #-2147483648	; 0x80000000
   179b4:	bge	17968 <__assert_fail@plt+0x68e0>
   179b8:	b	17978 <__assert_fail@plt+0x68f0>
   179bc:	ldr	r6, [sp, #8]
   179c0:	mov	r0, #0
   179c4:	mov	r1, #-2147483648	; 0x80000000
   179c8:	mov	r3, r9
   179cc:	str	r4, [sp, #4]
   179d0:	mov	r2, r6
   179d4:	bl	18558 <__assert_fail@plt+0x74d0>
   179d8:	ldr	r2, [sp, #24]
   179dc:	ldr	r3, [sp, #28]
   179e0:	mov	r7, #1
   179e4:	mov	r8, #0
   179e8:	mov	r4, #-2147483648	; 0x80000000
   179ec:	subs	r0, r0, r2
   179f0:	sbcs	r0, r1, r3
   179f4:	blt	17a4c <__assert_fail@plt+0x69c4>
   179f8:	umull	r8, r0, r6, r2
   179fc:	ldr	r7, [sp, #4]
   17a00:	mla	r0, r6, r3, r0
   17a04:	mla	r4, r9, r2, r0
   17a08:	cmp	r4, #0
   17a0c:	blt	17a4c <__assert_fail@plt+0x69c4>
   17a10:	ldr	r3, [sp, #28]
   17a14:	mvn	r0, #0
   17a18:	mvn	r1, #-2147483648	; 0x80000000
   17a1c:	str	r7, [sp, #4]
   17a20:	mvn	r7, #0
   17a24:	mvn	r9, #-2147483648	; 0x80000000
   17a28:	bl	1862c <__assert_fail@plt+0x75a4>
   17a2c:	ldr	r2, [sp, #24]
   17a30:	ldr	r3, [sp, #28]
   17a34:	subs	r0, r0, r8
   17a38:	mov	r6, #1
   17a3c:	sbcs	r0, r1, r4
   17a40:	str	r6, [sp, #8]
   17a44:	bge	17a88 <__assert_fail@plt+0x6a00>
   17a48:	b	17aa4 <__assert_fail@plt+0x6a1c>
   17a4c:	mov	r0, #0
   17a50:	mov	r1, #-2147483648	; 0x80000000
   17a54:	mov	r2, r8
   17a58:	mov	r3, r4
   17a5c:	str	r7, [sp, #4]
   17a60:	bl	18558 <__assert_fail@plt+0x74d0>
   17a64:	ldr	r2, [sp, #24]
   17a68:	ldr	r3, [sp, #28]
   17a6c:	mov	r7, #1
   17a70:	mov	r9, #-2147483648	; 0x80000000
   17a74:	str	r7, [sp, #8]
   17a78:	mov	r7, #0
   17a7c:	subs	r0, r0, r2
   17a80:	sbcs	r0, r1, r3
   17a84:	blt	17adc <__assert_fail@plt+0x6a54>
   17a88:	umull	r7, r0, r8, r2
   17a8c:	mla	r0, r8, r3, r0
   17a90:	mla	r9, r4, r2, r0
   17a94:	ldr	r0, [sp, #4]
   17a98:	cmp	r9, #0
   17a9c:	str	r0, [sp, #8]
   17aa0:	blt	17adc <__assert_fail@plt+0x6a54>
   17aa4:	ldr	r3, [sp, #28]
   17aa8:	mvn	r0, #0
   17aac:	mvn	r1, #-2147483648	; 0x80000000
   17ab0:	mvn	r4, #0
   17ab4:	mvn	r8, #-2147483648	; 0x80000000
   17ab8:	bl	1862c <__assert_fail@plt+0x75a4>
   17abc:	ldr	r2, [sp, #24]
   17ac0:	ldr	r3, [sp, #28]
   17ac4:	subs	r0, r0, r7
   17ac8:	sbcs	r0, r1, r9
   17acc:	bge	17b18 <__assert_fail@plt+0x6a90>
   17ad0:	mov	r0, #1
   17ad4:	str	r0, [sp, #8]
   17ad8:	b	17b2c <__assert_fail@plt+0x6aa4>
   17adc:	mov	r0, #0
   17ae0:	mov	r1, #-2147483648	; 0x80000000
   17ae4:	mov	r2, r7
   17ae8:	mov	r3, r9
   17aec:	bl	18558 <__assert_fail@plt+0x74d0>
   17af0:	ldr	r2, [sp, #24]
   17af4:	ldr	r3, [sp, #28]
   17af8:	subs	r0, r0, r2
   17afc:	sbcs	r0, r1, r3
   17b00:	bge	17b18 <__assert_fail@plt+0x6a90>
   17b04:	mov	r0, #1
   17b08:	mov	r4, #0
   17b0c:	mov	r8, #-2147483648	; 0x80000000
   17b10:	str	r0, [sp, #8]
   17b14:	b	17b60 <__assert_fail@plt+0x6ad8>
   17b18:	umull	r4, r0, r7, r2
   17b1c:	mla	r0, r7, r3, r0
   17b20:	mla	r8, r9, r2, r0
   17b24:	cmp	r8, #0
   17b28:	blt	17b60 <__assert_fail@plt+0x6ad8>
   17b2c:	ldr	r3, [sp, #28]
   17b30:	mvn	r0, #0
   17b34:	mvn	r1, #-2147483648	; 0x80000000
   17b38:	mvn	r6, #0
   17b3c:	mvn	r9, #-2147483648	; 0x80000000
   17b40:	bl	1862c <__assert_fail@plt+0x75a4>
   17b44:	ldr	r2, [sp, #24]
   17b48:	ldr	r3, [sp, #28]
   17b4c:	subs	r0, r0, r4
   17b50:	sbcs	r0, r1, r8
   17b54:	bge	17b98 <__assert_fail@plt+0x6b10>
   17b58:	mov	r8, #1
   17b5c:	b	17bb0 <__assert_fail@plt+0x6b28>
   17b60:	mov	r0, #0
   17b64:	mov	r1, #-2147483648	; 0x80000000
   17b68:	mov	r2, r4
   17b6c:	mov	r3, r8
   17b70:	bl	18558 <__assert_fail@plt+0x74d0>
   17b74:	ldr	r2, [sp, #24]
   17b78:	ldr	r3, [sp, #28]
   17b7c:	subs	r0, r0, r2
   17b80:	sbcs	r0, r1, r3
   17b84:	bge	17b98 <__assert_fail@plt+0x6b10>
   17b88:	mov	r8, #1
   17b8c:	mov	r6, #0
   17b90:	mov	r9, #-2147483648	; 0x80000000
   17b94:	b	17c00 <__assert_fail@plt+0x6b78>
   17b98:	umull	r6, r0, r4, r2
   17b9c:	mla	r0, r4, r3, r0
   17ba0:	mla	r9, r8, r2, r0
   17ba4:	ldr	r8, [sp, #8]
   17ba8:	cmp	r9, #0
   17bac:	blt	17c00 <__assert_fail@plt+0x6b78>
   17bb0:	ldr	r3, [sp, #28]
   17bb4:	mvn	r0, #0
   17bb8:	mvn	r1, #-2147483648	; 0x80000000
   17bbc:	mvn	r4, #0
   17bc0:	mvn	r7, #-2147483648	; 0x80000000
   17bc4:	bl	1862c <__assert_fail@plt+0x75a4>
   17bc8:	ldr	r3, [sp, #24]
   17bcc:	ldr	ip, [sp, #28]
   17bd0:	subs	r0, r0, r6
   17bd4:	mov	r2, #1
   17bd8:	sbcs	r0, r1, r9
   17bdc:	blt	17bf0 <__assert_fail@plt+0x6b68>
   17be0:	umull	r4, r0, r6, r3
   17be4:	mov	r2, #0
   17be8:	mla	r0, r6, ip, r0
   17bec:	mla	r7, r9, r3, r0
   17bf0:	ldr	r9, [sp, #12]
   17bf4:	orr	r3, r2, r8
   17bf8:	mov	r6, r4
   17bfc:	b	17dec <__assert_fail@plt+0x6d64>
   17c00:	mov	r0, #0
   17c04:	mov	r1, #-2147483648	; 0x80000000
   17c08:	mov	r2, r6
   17c0c:	mov	r3, r9
   17c10:	bl	18558 <__assert_fail@plt+0x74d0>
   17c14:	ldr	r3, [sp, #24]
   17c18:	ldr	ip, [sp, #28]
   17c1c:	mov	r2, #1
   17c20:	mov	r4, #0
   17c24:	mov	r7, #-2147483648	; 0x80000000
   17c28:	subs	r0, r0, r3
   17c2c:	sbcs	r0, r1, ip
   17c30:	bge	17be0 <__assert_fail@plt+0x6b58>
   17c34:	b	17bf0 <__assert_fail@plt+0x6b68>
   17c38:	ldr	r6, [sp, #8]
   17c3c:	mov	r0, #0
   17c40:	mov	r1, #-2147483648	; 0x80000000
   17c44:	mov	r3, r8
   17c48:	str	r4, [sp, #4]
   17c4c:	mov	r2, r6
   17c50:	bl	18558 <__assert_fail@plt+0x74d0>
   17c54:	ldr	r2, [sp, #24]
   17c58:	ldr	r3, [sp, #28]
   17c5c:	mov	r7, #1
   17c60:	mov	r9, #0
   17c64:	mov	r4, #-2147483648	; 0x80000000
   17c68:	subs	r0, r0, r2
   17c6c:	sbcs	r0, r1, r3
   17c70:	blt	17cc8 <__assert_fail@plt+0x6c40>
   17c74:	umull	r9, r0, r6, r2
   17c78:	ldr	r7, [sp, #4]
   17c7c:	mla	r0, r6, r3, r0
   17c80:	mla	r4, r8, r2, r0
   17c84:	cmp	r4, #0
   17c88:	blt	17cc8 <__assert_fail@plt+0x6c40>
   17c8c:	ldr	r3, [sp, #28]
   17c90:	mvn	r0, #0
   17c94:	mvn	r1, #-2147483648	; 0x80000000
   17c98:	str	r7, [sp, #4]
   17c9c:	mvn	r8, #0
   17ca0:	mvn	r7, #-2147483648	; 0x80000000
   17ca4:	bl	1862c <__assert_fail@plt+0x75a4>
   17ca8:	ldr	r2, [sp, #24]
   17cac:	ldr	r3, [sp, #28]
   17cb0:	subs	r0, r0, r9
   17cb4:	mov	r6, #1
   17cb8:	sbcs	r0, r1, r4
   17cbc:	str	r6, [sp, #8]
   17cc0:	bge	17d04 <__assert_fail@plt+0x6c7c>
   17cc4:	b	17d20 <__assert_fail@plt+0x6c98>
   17cc8:	mov	r0, #0
   17ccc:	mov	r1, #-2147483648	; 0x80000000
   17cd0:	mov	r2, r9
   17cd4:	mov	r3, r4
   17cd8:	str	r7, [sp, #4]
   17cdc:	bl	18558 <__assert_fail@plt+0x74d0>
   17ce0:	ldr	r2, [sp, #24]
   17ce4:	ldr	r3, [sp, #28]
   17ce8:	mov	r7, #1
   17cec:	mov	r8, #0
   17cf0:	str	r7, [sp, #8]
   17cf4:	mov	r7, #-2147483648	; 0x80000000
   17cf8:	subs	r0, r0, r2
   17cfc:	sbcs	r0, r1, r3
   17d00:	blt	17d54 <__assert_fail@plt+0x6ccc>
   17d04:	umull	r8, r0, r9, r2
   17d08:	mla	r0, r9, r3, r0
   17d0c:	mla	r7, r4, r2, r0
   17d10:	ldr	r0, [sp, #4]
   17d14:	cmp	r7, #0
   17d18:	str	r0, [sp, #8]
   17d1c:	blt	17d54 <__assert_fail@plt+0x6ccc>
   17d20:	ldr	r3, [sp, #28]
   17d24:	mvn	r0, #0
   17d28:	mvn	r1, #-2147483648	; 0x80000000
   17d2c:	mvn	r4, #0
   17d30:	mvn	r9, #-2147483648	; 0x80000000
   17d34:	bl	1862c <__assert_fail@plt+0x75a4>
   17d38:	ldr	r2, [sp, #24]
   17d3c:	ldr	r3, [sp, #28]
   17d40:	subs	r0, r0, r8
   17d44:	sbcs	r0, r1, r7
   17d48:	bge	17d8c <__assert_fail@plt+0x6d04>
   17d4c:	mov	r8, #1
   17d50:	b	17da4 <__assert_fail@plt+0x6d1c>
   17d54:	mov	r0, #0
   17d58:	mov	r1, #-2147483648	; 0x80000000
   17d5c:	mov	r2, r8
   17d60:	mov	r3, r7
   17d64:	bl	18558 <__assert_fail@plt+0x74d0>
   17d68:	ldr	r2, [sp, #24]
   17d6c:	ldr	r3, [sp, #28]
   17d70:	subs	r0, r0, r2
   17d74:	sbcs	r0, r1, r3
   17d78:	bge	17d8c <__assert_fail@plt+0x6d04>
   17d7c:	mov	r8, #1
   17d80:	mov	r4, #0
   17d84:	mov	r9, #-2147483648	; 0x80000000
   17d88:	b	17e1c <__assert_fail@plt+0x6d94>
   17d8c:	umull	r4, r0, r8, r2
   17d90:	mla	r0, r8, r3, r0
   17d94:	ldr	r8, [sp, #8]
   17d98:	mla	r9, r7, r2, r0
   17d9c:	cmp	r9, #0
   17da0:	blt	17e1c <__assert_fail@plt+0x6d94>
   17da4:	ldr	r3, [sp, #28]
   17da8:	mvn	r0, #0
   17dac:	mvn	r1, #-2147483648	; 0x80000000
   17db0:	mvn	r6, #0
   17db4:	mvn	r7, #-2147483648	; 0x80000000
   17db8:	bl	1862c <__assert_fail@plt+0x75a4>
   17dbc:	ldr	r3, [sp, #24]
   17dc0:	ldr	ip, [sp, #28]
   17dc4:	subs	r0, r0, r4
   17dc8:	mov	r2, #1
   17dcc:	sbcs	r0, r1, r9
   17dd0:	blt	17de4 <__assert_fail@plt+0x6d5c>
   17dd4:	umull	r6, r0, r4, r3
   17dd8:	mov	r2, #0
   17ddc:	mla	r0, r4, ip, r0
   17de0:	mla	r7, r9, r3, r0
   17de4:	ldr	r9, [sp, #12]
   17de8:	orr	r3, r2, r8
   17dec:	ldr	r1, [sp, #20]
   17df0:	ldr	r2, [sp, #16]
   17df4:	orr	r5, r3, r5
   17df8:	add	r0, r1, r2
   17dfc:	str	r0, [sl]
   17e00:	ldrb	r0, [r1, r2]
   17e04:	cmp	r0, #0
   17e08:	orrne	r5, r5, #2
   17e0c:	strd	r6, [r9]
   17e10:	mov	r0, r5
   17e14:	sub	sp, fp, #28
   17e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e1c:	mov	r0, #0
   17e20:	mov	r1, #-2147483648	; 0x80000000
   17e24:	mov	r2, r4
   17e28:	mov	r3, r9
   17e2c:	bl	18558 <__assert_fail@plt+0x74d0>
   17e30:	ldr	r3, [sp, #24]
   17e34:	ldr	ip, [sp, #28]
   17e38:	mov	r2, #1
   17e3c:	mov	r6, #0
   17e40:	mov	r7, #-2147483648	; 0x80000000
   17e44:	subs	r0, r0, r3
   17e48:	sbcs	r0, r1, ip
   17e4c:	bge	17dd4 <__assert_fail@plt+0x6d4c>
   17e50:	b	17de4 <__assert_fail@plt+0x6d5c>
   17e54:	ldr	r6, [sp, #8]
   17e58:	mov	r0, #0
   17e5c:	mov	r1, #-2147483648	; 0x80000000
   17e60:	mov	r3, r9
   17e64:	str	r4, [sp]
   17e68:	mov	r2, r6
   17e6c:	bl	18558 <__assert_fail@plt+0x74d0>
   17e70:	ldr	r2, [sp, #24]
   17e74:	ldr	r3, [sp, #28]
   17e78:	mov	r7, #1
   17e7c:	mov	r8, #-2147483648	; 0x80000000
   17e80:	subs	r0, r0, r2
   17e84:	sbcs	r0, r1, r3
   17e88:	mov	r0, #0
   17e8c:	str	r0, [sp, #4]
   17e90:	blt	17ef0 <__assert_fail@plt+0x6e68>
   17e94:	umull	r1, r0, r6, r2
   17e98:	ldr	r7, [sp]
   17e9c:	mla	r0, r6, r3, r0
   17ea0:	str	r1, [sp, #4]
   17ea4:	mla	r8, r9, r2, r0
   17ea8:	cmp	r8, #0
   17eac:	blt	17ef0 <__assert_fail@plt+0x6e68>
   17eb0:	ldr	r3, [sp, #28]
   17eb4:	mvn	r0, #0
   17eb8:	mvn	r1, #-2147483648	; 0x80000000
   17ebc:	str	r7, [sp]
   17ec0:	mvn	r7, #0
   17ec4:	mvn	r4, #-2147483648	; 0x80000000
   17ec8:	bl	1862c <__assert_fail@plt+0x75a4>
   17ecc:	mov	r6, #1
   17ed0:	ldr	r2, [sp, #24]
   17ed4:	ldr	r3, [sp, #28]
   17ed8:	str	r6, [sp, #8]
   17edc:	ldr	r6, [sp, #4]
   17ee0:	subs	r0, r0, r6
   17ee4:	sbcs	r0, r1, r8
   17ee8:	bge	17f30 <__assert_fail@plt+0x6ea8>
   17eec:	b	17f4c <__assert_fail@plt+0x6ec4>
   17ef0:	ldr	r6, [sp, #4]
   17ef4:	mov	r0, #0
   17ef8:	mov	r1, #-2147483648	; 0x80000000
   17efc:	mov	r3, r8
   17f00:	str	r7, [sp]
   17f04:	mov	r2, r6
   17f08:	bl	18558 <__assert_fail@plt+0x74d0>
   17f0c:	ldr	r2, [sp, #24]
   17f10:	ldr	r3, [sp, #28]
   17f14:	mov	r7, #1
   17f18:	mov	r4, #-2147483648	; 0x80000000
   17f1c:	str	r7, [sp, #8]
   17f20:	mov	r7, #0
   17f24:	subs	r0, r0, r2
   17f28:	sbcs	r0, r1, r3
   17f2c:	blt	17f84 <__assert_fail@plt+0x6efc>
   17f30:	umull	r7, r0, r6, r2
   17f34:	mla	r0, r6, r3, r0
   17f38:	mla	r4, r8, r2, r0
   17f3c:	ldr	r0, [sp]
   17f40:	cmp	r4, #0
   17f44:	str	r0, [sp, #8]
   17f48:	blt	17f84 <__assert_fail@plt+0x6efc>
   17f4c:	ldr	r3, [sp, #28]
   17f50:	mvn	r0, #0
   17f54:	mvn	r1, #-2147483648	; 0x80000000
   17f58:	mvn	r9, #0
   17f5c:	mvn	r8, #-2147483648	; 0x80000000
   17f60:	bl	1862c <__assert_fail@plt+0x75a4>
   17f64:	ldr	r2, [sp, #24]
   17f68:	ldr	r3, [sp, #28]
   17f6c:	subs	r0, r0, r7
   17f70:	sbcs	r0, r1, r4
   17f74:	bge	17fc0 <__assert_fail@plt+0x6f38>
   17f78:	mov	r0, #1
   17f7c:	str	r0, [sp, #8]
   17f80:	b	17fd4 <__assert_fail@plt+0x6f4c>
   17f84:	mov	r0, #0
   17f88:	mov	r1, #-2147483648	; 0x80000000
   17f8c:	mov	r2, r7
   17f90:	mov	r3, r4
   17f94:	bl	18558 <__assert_fail@plt+0x74d0>
   17f98:	ldr	r2, [sp, #24]
   17f9c:	ldr	r3, [sp, #28]
   17fa0:	subs	r0, r0, r2
   17fa4:	sbcs	r0, r1, r3
   17fa8:	bge	17fc0 <__assert_fail@plt+0x6f38>
   17fac:	mov	r0, #1
   17fb0:	mov	r9, #0
   17fb4:	mov	r8, #-2147483648	; 0x80000000
   17fb8:	str	r0, [sp, #8]
   17fbc:	b	1800c <__assert_fail@plt+0x6f84>
   17fc0:	umull	r9, r0, r7, r2
   17fc4:	mla	r0, r7, r3, r0
   17fc8:	mla	r8, r4, r2, r0
   17fcc:	cmp	r8, #0
   17fd0:	blt	1800c <__assert_fail@plt+0x6f84>
   17fd4:	ldr	r3, [sp, #28]
   17fd8:	mvn	r0, #0
   17fdc:	mvn	r1, #-2147483648	; 0x80000000
   17fe0:	mvn	r4, #0
   17fe4:	mvn	r7, #-2147483648	; 0x80000000
   17fe8:	bl	1862c <__assert_fail@plt+0x75a4>
   17fec:	ldr	r2, [sp, #24]
   17ff0:	ldr	r3, [sp, #28]
   17ff4:	subs	r0, r0, r9
   17ff8:	sbcs	r0, r1, r8
   17ffc:	bge	18048 <__assert_fail@plt+0x6fc0>
   18000:	mov	r0, #1
   18004:	str	r0, [sp, #8]
   18008:	b	1805c <__assert_fail@plt+0x6fd4>
   1800c:	mov	r0, #0
   18010:	mov	r1, #-2147483648	; 0x80000000
   18014:	mov	r2, r9
   18018:	mov	r3, r8
   1801c:	bl	18558 <__assert_fail@plt+0x74d0>
   18020:	ldr	r2, [sp, #24]
   18024:	ldr	r3, [sp, #28]
   18028:	subs	r0, r0, r2
   1802c:	sbcs	r0, r1, r3
   18030:	bge	18048 <__assert_fail@plt+0x6fc0>
   18034:	mov	r0, #1
   18038:	mov	r4, #0
   1803c:	mov	r7, #-2147483648	; 0x80000000
   18040:	str	r0, [sp, #8]
   18044:	b	18094 <__assert_fail@plt+0x700c>
   18048:	umull	r4, r0, r9, r2
   1804c:	mla	r0, r9, r3, r0
   18050:	mla	r7, r8, r2, r0
   18054:	cmp	r7, #0
   18058:	blt	18094 <__assert_fail@plt+0x700c>
   1805c:	ldr	r3, [sp, #28]
   18060:	mvn	r0, #0
   18064:	mvn	r1, #-2147483648	; 0x80000000
   18068:	mvn	r8, #0
   1806c:	mvn	r9, #-2147483648	; 0x80000000
   18070:	bl	1862c <__assert_fail@plt+0x75a4>
   18074:	ldr	r2, [sp, #24]
   18078:	ldr	r3, [sp, #28]
   1807c:	subs	r0, r0, r4
   18080:	sbcs	r0, r1, r7
   18084:	bge	180d0 <__assert_fail@plt+0x7048>
   18088:	mov	r0, #1
   1808c:	str	r0, [sp, #8]
   18090:	b	180e4 <__assert_fail@plt+0x705c>
   18094:	mov	r0, #0
   18098:	mov	r1, #-2147483648	; 0x80000000
   1809c:	mov	r2, r4
   180a0:	mov	r3, r7
   180a4:	bl	18558 <__assert_fail@plt+0x74d0>
   180a8:	ldr	r2, [sp, #24]
   180ac:	ldr	r3, [sp, #28]
   180b0:	subs	r0, r0, r2
   180b4:	sbcs	r0, r1, r3
   180b8:	bge	180d0 <__assert_fail@plt+0x7048>
   180bc:	mov	r0, #1
   180c0:	mov	r8, #0
   180c4:	mov	r9, #-2147483648	; 0x80000000
   180c8:	str	r0, [sp, #8]
   180cc:	b	18120 <__assert_fail@plt+0x7098>
   180d0:	umull	r8, r0, r4, r2
   180d4:	mla	r0, r4, r3, r0
   180d8:	mla	r9, r7, r2, r0
   180dc:	cmp	r9, #0
   180e0:	blt	18120 <__assert_fail@plt+0x7098>
   180e4:	ldr	r3, [sp, #28]
   180e8:	mvn	r0, #0
   180ec:	mvn	r1, #-2147483648	; 0x80000000
   180f0:	mvn	r4, #0
   180f4:	mvn	r6, #-2147483648	; 0x80000000
   180f8:	bl	1862c <__assert_fail@plt+0x75a4>
   180fc:	ldr	r2, [sp, #24]
   18100:	ldr	r3, [sp, #28]
   18104:	subs	r0, r0, r8
   18108:	sbcs	r0, r1, r9
   1810c:	bge	18160 <__assert_fail@plt+0x70d8>
   18110:	ldr	r9, [sp, #12]
   18114:	mov	r0, #1
   18118:	str	r0, [sp, #8]
   1811c:	b	18178 <__assert_fail@plt+0x70f0>
   18120:	mov	r0, #0
   18124:	mov	r1, #-2147483648	; 0x80000000
   18128:	mov	r2, r8
   1812c:	mov	r3, r9
   18130:	bl	18558 <__assert_fail@plt+0x74d0>
   18134:	ldr	r2, [sp, #24]
   18138:	ldr	r3, [sp, #28]
   1813c:	subs	r0, r0, r2
   18140:	sbcs	r0, r1, r3
   18144:	bge	18160 <__assert_fail@plt+0x70d8>
   18148:	ldr	r9, [sp, #12]
   1814c:	mov	r0, #1
   18150:	mov	r4, #0
   18154:	mov	r6, #-2147483648	; 0x80000000
   18158:	str	r0, [sp, #8]
   1815c:	b	181c4 <__assert_fail@plt+0x713c>
   18160:	umull	r4, r0, r8, r2
   18164:	mla	r0, r8, r3, r0
   18168:	mla	r6, r9, r2, r0
   1816c:	ldr	r9, [sp, #12]
   18170:	cmp	r6, #0
   18174:	blt	181c4 <__assert_fail@plt+0x713c>
   18178:	ldr	r3, [sp, #28]
   1817c:	mvn	r0, #0
   18180:	mvn	r1, #-2147483648	; 0x80000000
   18184:	mov	r8, r6
   18188:	mvn	r6, #0
   1818c:	mvn	r7, #-2147483648	; 0x80000000
   18190:	bl	1862c <__assert_fail@plt+0x75a4>
   18194:	ldr	r3, [sp, #24]
   18198:	ldr	ip, [sp, #28]
   1819c:	subs	r0, r0, r4
   181a0:	mov	r2, #1
   181a4:	sbcs	r0, r1, r8
   181a8:	blt	181bc <__assert_fail@plt+0x7134>
   181ac:	umull	r6, r0, r4, r3
   181b0:	mov	r2, #0
   181b4:	mla	r0, r4, ip, r0
   181b8:	mla	r7, r8, r3, r0
   181bc:	ldr	r0, [sp, #8]
   181c0:	b	17308 <__assert_fail@plt+0x6280>
   181c4:	mov	r0, #0
   181c8:	mov	r1, #-2147483648	; 0x80000000
   181cc:	mov	r2, r4
   181d0:	mov	r3, r6
   181d4:	bl	18558 <__assert_fail@plt+0x74d0>
   181d8:	ldr	r3, [sp, #24]
   181dc:	ldr	ip, [sp, #28]
   181e0:	mov	r8, r6
   181e4:	mov	r2, #1
   181e8:	mov	r6, #0
   181ec:	mov	r7, #-2147483648	; 0x80000000
   181f0:	subs	r0, r0, r3
   181f4:	sbcs	r0, r1, ip
   181f8:	bge	181ac <__assert_fail@plt+0x7124>
   181fc:	b	181bc <__assert_fail@plt+0x7134>
   18200:	movw	r0, #39609	; 0x9ab9
   18204:	movw	r1, #39647	; 0x9adf
   18208:	movw	r3, #39663	; 0x9aef
   1820c:	mov	r2, #85	; 0x55
   18210:	movt	r0, #1
   18214:	movt	r1, #1
   18218:	movt	r3, #1
   1821c:	bl	11088 <__assert_fail@plt>
   18220:	clz	r2, r1
   18224:	clz	r3, r0
   18228:	lsr	r2, r2, #5
   1822c:	lsr	r3, r3, #5
   18230:	orrs	r2, r3, r2
   18234:	movwne	r1, #1
   18238:	movwne	r0, #1
   1823c:	cmp	r1, #0
   18240:	beq	18270 <__assert_fail@plt+0x71e8>
   18244:	mvn	r2, #-2147483648	; 0x80000000
   18248:	udiv	r2, r2, r1
   1824c:	cmp	r2, r0
   18250:	bcs	18270 <__assert_fail@plt+0x71e8>
   18254:	push	{fp, lr}
   18258:	mov	fp, sp
   1825c:	bl	10fa4 <__errno_location@plt>
   18260:	mov	r1, #12
   18264:	str	r1, [r0]
   18268:	mov	r0, #0
   1826c:	pop	{fp, pc}
   18270:	b	10e24 <calloc@plt>
   18274:	cmp	r0, #0
   18278:	movweq	r0, #1
   1827c:	cmn	r0, #1
   18280:	ble	18288 <__assert_fail@plt+0x7200>
   18284:	b	10f38 <malloc@plt>
   18288:	push	{fp, lr}
   1828c:	mov	fp, sp
   18290:	bl	10fa4 <__errno_location@plt>
   18294:	mov	r1, #12
   18298:	str	r1, [r0]
   1829c:	mov	r0, #0
   182a0:	pop	{fp, pc}
   182a4:	push	{fp, lr}
   182a8:	mov	fp, sp
   182ac:	cmp	r0, #0
   182b0:	beq	182cc <__assert_fail@plt+0x7244>
   182b4:	cmp	r1, #0
   182b8:	beq	182d8 <__assert_fail@plt+0x7250>
   182bc:	cmn	r1, #1
   182c0:	ble	182e4 <__assert_fail@plt+0x725c>
   182c4:	pop	{fp, lr}
   182c8:	b	10ecc <realloc@plt>
   182cc:	mov	r0, r1
   182d0:	pop	{fp, lr}
   182d4:	b	18274 <__assert_fail@plt+0x71ec>
   182d8:	bl	13e74 <__assert_fail@plt+0x2dec>
   182dc:	mov	r0, #0
   182e0:	pop	{fp, pc}
   182e4:	bl	10fa4 <__errno_location@plt>
   182e8:	mov	r1, #12
   182ec:	str	r1, [r0]
   182f0:	mov	r0, #0
   182f4:	pop	{fp, pc}
   182f8:	push	{r4, r5, r6, sl, fp, lr}
   182fc:	add	fp, sp, #16
   18300:	mov	r4, r0
   18304:	bl	10f14 <__fpending@plt>
   18308:	ldr	r6, [r4]
   1830c:	mov	r5, r0
   18310:	mov	r0, r4
   18314:	bl	13d7c <__assert_fail@plt+0x2cf4>
   18318:	tst	r6, #32
   1831c:	bne	18354 <__assert_fail@plt+0x72cc>
   18320:	cmp	r0, #0
   18324:	mov	r4, r0
   18328:	mvnne	r4, #0
   1832c:	cmp	r5, #0
   18330:	bne	18360 <__assert_fail@plt+0x72d8>
   18334:	cmp	r0, #0
   18338:	beq	18360 <__assert_fail@plt+0x72d8>
   1833c:	bl	10fa4 <__errno_location@plt>
   18340:	ldr	r0, [r0]
   18344:	subs	r4, r0, #9
   18348:	mvnne	r4, #0
   1834c:	mov	r0, r4
   18350:	pop	{r4, r5, r6, sl, fp, pc}
   18354:	mvn	r4, #0
   18358:	cmp	r0, #0
   1835c:	beq	18368 <__assert_fail@plt+0x72e0>
   18360:	mov	r0, r4
   18364:	pop	{r4, r5, r6, sl, fp, pc}
   18368:	bl	10fa4 <__errno_location@plt>
   1836c:	mov	r1, #0
   18370:	str	r1, [r0]
   18374:	mov	r0, r4
   18378:	pop	{r4, r5, r6, sl, fp, pc}
   1837c:	push	{fp, lr}
   18380:	mov	fp, sp
   18384:	mov	r0, #14
   18388:	bl	11034 <nl_langinfo@plt>
   1838c:	movw	r1, #36847	; 0x8fef
   18390:	cmp	r0, #0
   18394:	movt	r1, #1
   18398:	movne	r1, r0
   1839c:	movw	r0, #39741	; 0x9b3d
   183a0:	ldrb	r2, [r1]
   183a4:	movt	r0, #1
   183a8:	cmp	r2, #0
   183ac:	movne	r0, r1
   183b0:	pop	{fp, pc}
   183b4:	push	{r4, r5, r6, r7, fp, lr}
   183b8:	add	fp, sp, #16
   183bc:	sub	sp, sp, #8
   183c0:	add	r5, sp, #4
   183c4:	cmp	r0, #0
   183c8:	mov	r7, r2
   183cc:	mov	r4, r1
   183d0:	movne	r5, r0
   183d4:	mov	r0, r5
   183d8:	bl	10f20 <mbrtowc@plt>
   183dc:	mov	r6, r0
   183e0:	cmp	r7, #0
   183e4:	beq	18408 <__assert_fail@plt+0x7380>
   183e8:	cmn	r6, #2
   183ec:	bcc	18408 <__assert_fail@plt+0x7380>
   183f0:	mov	r0, #0
   183f4:	bl	18450 <__assert_fail@plt+0x73c8>
   183f8:	cmp	r0, #0
   183fc:	ldrbeq	r0, [r4]
   18400:	moveq	r6, #1
   18404:	streq	r0, [r5]
   18408:	mov	r0, r6
   1840c:	sub	sp, fp, #16
   18410:	pop	{r4, r5, r6, r7, fp, pc}
   18414:	cmp	r2, #0
   18418:	beq	18448 <__assert_fail@plt+0x73c0>
   1841c:	mvn	r3, #0
   18420:	udiv	r3, r3, r2
   18424:	cmp	r3, r1
   18428:	bcs	18448 <__assert_fail@plt+0x73c0>
   1842c:	push	{fp, lr}
   18430:	mov	fp, sp
   18434:	bl	10fa4 <__errno_location@plt>
   18438:	mov	r1, #12
   1843c:	str	r1, [r0]
   18440:	mov	r0, #0
   18444:	pop	{fp, pc}
   18448:	mul	r1, r2, r1
   1844c:	b	182a4 <__assert_fail@plt+0x721c>
   18450:	push	{r4, sl, fp, lr}
   18454:	add	fp, sp, #8
   18458:	sub	sp, sp, #264	; 0x108
   1845c:	add	r1, sp, #7
   18460:	movw	r2, #257	; 0x101
   18464:	bl	184b4 <__assert_fail@plt+0x742c>
   18468:	mov	r4, #0
   1846c:	cmp	r0, #0
   18470:	bne	184a8 <__assert_fail@plt+0x7420>
   18474:	movw	r1, #39747	; 0x9b43
   18478:	add	r0, sp, #7
   1847c:	movt	r1, #1
   18480:	bl	10e48 <strcmp@plt>
   18484:	cmp	r0, #0
   18488:	beq	184a8 <__assert_fail@plt+0x7420>
   1848c:	movw	r1, #39749	; 0x9b45
   18490:	add	r0, sp, #7
   18494:	movt	r1, #1
   18498:	bl	10e48 <strcmp@plt>
   1849c:	mov	r4, r0
   184a0:	cmp	r0, #0
   184a4:	movwne	r4, #1
   184a8:	mov	r0, r4
   184ac:	sub	sp, fp, #8
   184b0:	pop	{r4, sl, fp, pc}
   184b4:	push	{r4, r5, r6, r7, fp, lr}
   184b8:	add	fp, sp, #16
   184bc:	mov	r4, r1
   184c0:	mov	r1, #0
   184c4:	mov	r6, r2
   184c8:	bl	1101c <setlocale@plt>
   184cc:	cmp	r0, #0
   184d0:	beq	18500 <__assert_fail@plt+0x7478>
   184d4:	mov	r7, r0
   184d8:	bl	10f8c <strlen@plt>
   184dc:	cmp	r0, r6
   184e0:	bcs	18520 <__assert_fail@plt+0x7498>
   184e4:	add	r2, r0, #1
   184e8:	mov	r0, r4
   184ec:	mov	r1, r7
   184f0:	bl	10e90 <memcpy@plt>
   184f4:	mov	r5, #0
   184f8:	mov	r0, r5
   184fc:	pop	{r4, r5, r6, r7, fp, pc}
   18500:	cmp	r6, #0
   18504:	mov	r5, #22
   18508:	movne	r0, #0
   1850c:	strbne	r0, [r4]
   18510:	movne	r0, r5
   18514:	popne	{r4, r5, r6, r7, fp, pc}
   18518:	mov	r0, r5
   1851c:	pop	{r4, r5, r6, r7, fp, pc}
   18520:	mov	r5, #34	; 0x22
   18524:	cmp	r6, #0
   18528:	beq	18548 <__assert_fail@plt+0x74c0>
   1852c:	sub	r6, r6, #1
   18530:	mov	r0, r4
   18534:	mov	r1, r7
   18538:	mov	r2, r6
   1853c:	bl	10e90 <memcpy@plt>
   18540:	mov	r0, #0
   18544:	strb	r0, [r4, r6]
   18548:	mov	r0, r5
   1854c:	pop	{r4, r5, r6, r7, fp, pc}
   18550:	mov	r1, #0
   18554:	b	1101c <setlocale@plt>
   18558:	cmp	r3, #0
   1855c:	cmpeq	r2, #0
   18560:	bne	18584 <__assert_fail@plt+0x74fc>
   18564:	cmp	r1, #0
   18568:	movlt	r1, #-2147483648	; 0x80000000
   1856c:	movlt	r0, #0
   18570:	blt	18580 <__assert_fail@plt+0x74f8>
   18574:	cmpeq	r0, #0
   18578:	mvnne	r1, #-2147483648	; 0x80000000
   1857c:	mvnne	r0, #0
   18580:	b	18668 <__assert_fail@plt+0x75e0>
   18584:	sub	sp, sp, #8
   18588:	push	{sp, lr}
   1858c:	cmp	r1, #0
   18590:	blt	185b0 <__assert_fail@plt+0x7528>
   18594:	cmp	r3, #0
   18598:	blt	185e4 <__assert_fail@plt+0x755c>
   1859c:	bl	18678 <__assert_fail@plt+0x75f0>
   185a0:	ldr	lr, [sp, #4]
   185a4:	add	sp, sp, #8
   185a8:	pop	{r2, r3}
   185ac:	bx	lr
   185b0:	rsbs	r0, r0, #0
   185b4:	sbc	r1, r1, r1, lsl #1
   185b8:	cmp	r3, #0
   185bc:	blt	18608 <__assert_fail@plt+0x7580>
   185c0:	bl	18678 <__assert_fail@plt+0x75f0>
   185c4:	ldr	lr, [sp, #4]
   185c8:	add	sp, sp, #8
   185cc:	pop	{r2, r3}
   185d0:	rsbs	r0, r0, #0
   185d4:	sbc	r1, r1, r1, lsl #1
   185d8:	rsbs	r2, r2, #0
   185dc:	sbc	r3, r3, r3, lsl #1
   185e0:	bx	lr
   185e4:	rsbs	r2, r2, #0
   185e8:	sbc	r3, r3, r3, lsl #1
   185ec:	bl	18678 <__assert_fail@plt+0x75f0>
   185f0:	ldr	lr, [sp, #4]
   185f4:	add	sp, sp, #8
   185f8:	pop	{r2, r3}
   185fc:	rsbs	r0, r0, #0
   18600:	sbc	r1, r1, r1, lsl #1
   18604:	bx	lr
   18608:	rsbs	r2, r2, #0
   1860c:	sbc	r3, r3, r3, lsl #1
   18610:	bl	18678 <__assert_fail@plt+0x75f0>
   18614:	ldr	lr, [sp, #4]
   18618:	add	sp, sp, #8
   1861c:	pop	{r2, r3}
   18620:	rsbs	r2, r2, #0
   18624:	sbc	r3, r3, r3, lsl #1
   18628:	bx	lr
   1862c:	cmp	r3, #0
   18630:	cmpeq	r2, #0
   18634:	bne	1864c <__assert_fail@plt+0x75c4>
   18638:	cmp	r1, #0
   1863c:	cmpeq	r0, #0
   18640:	mvnne	r1, #0
   18644:	mvnne	r0, #0
   18648:	b	18668 <__assert_fail@plt+0x75e0>
   1864c:	sub	sp, sp, #8
   18650:	push	{sp, lr}
   18654:	bl	18678 <__assert_fail@plt+0x75f0>
   18658:	ldr	lr, [sp, #4]
   1865c:	add	sp, sp, #8
   18660:	pop	{r2, r3}
   18664:	bx	lr
   18668:	push	{r1, lr}
   1866c:	mov	r0, #8
   18670:	bl	10e3c <raise@plt>
   18674:	pop	{r1, pc}
   18678:	cmp	r1, r3
   1867c:	cmpeq	r0, r2
   18680:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18684:	mov	r4, r0
   18688:	movcc	r0, #0
   1868c:	mov	r5, r1
   18690:	ldr	lr, [sp, #36]	; 0x24
   18694:	movcc	r1, r0
   18698:	bcc	18794 <__assert_fail@plt+0x770c>
   1869c:	cmp	r3, #0
   186a0:	clzeq	ip, r2
   186a4:	clzne	ip, r3
   186a8:	addeq	ip, ip, #32
   186ac:	cmp	r5, #0
   186b0:	clzeq	r1, r4
   186b4:	addeq	r1, r1, #32
   186b8:	clzne	r1, r5
   186bc:	sub	ip, ip, r1
   186c0:	sub	sl, ip, #32
   186c4:	lsl	r9, r3, ip
   186c8:	rsb	fp, ip, #32
   186cc:	orr	r9, r9, r2, lsl sl
   186d0:	orr	r9, r9, r2, lsr fp
   186d4:	lsl	r8, r2, ip
   186d8:	cmp	r5, r9
   186dc:	cmpeq	r4, r8
   186e0:	movcc	r0, #0
   186e4:	movcc	r1, r0
   186e8:	bcc	18704 <__assert_fail@plt+0x767c>
   186ec:	mov	r0, #1
   186f0:	subs	r4, r4, r8
   186f4:	lsl	r1, r0, sl
   186f8:	orr	r1, r1, r0, lsr fp
   186fc:	lsl	r0, r0, ip
   18700:	sbc	r5, r5, r9
   18704:	cmp	ip, #0
   18708:	beq	18794 <__assert_fail@plt+0x770c>
   1870c:	lsr	r6, r8, #1
   18710:	orr	r6, r6, r9, lsl #31
   18714:	lsr	r7, r9, #1
   18718:	mov	r2, ip
   1871c:	b	18740 <__assert_fail@plt+0x76b8>
   18720:	subs	r3, r4, r6
   18724:	sbc	r8, r5, r7
   18728:	adds	r3, r3, r3
   1872c:	adc	r8, r8, r8
   18730:	adds	r4, r3, #1
   18734:	adc	r5, r8, #0
   18738:	subs	r2, r2, #1
   1873c:	beq	1875c <__assert_fail@plt+0x76d4>
   18740:	cmp	r5, r7
   18744:	cmpeq	r4, r6
   18748:	bcs	18720 <__assert_fail@plt+0x7698>
   1874c:	adds	r4, r4, r4
   18750:	adc	r5, r5, r5
   18754:	subs	r2, r2, #1
   18758:	bne	18740 <__assert_fail@plt+0x76b8>
   1875c:	lsr	r3, r4, ip
   18760:	orr	r3, r3, r5, lsl fp
   18764:	lsr	r2, r5, ip
   18768:	orr	r3, r3, r5, lsr sl
   1876c:	adds	r0, r0, r4
   18770:	mov	r4, r3
   18774:	lsl	r3, r2, ip
   18778:	orr	r3, r3, r4, lsl sl
   1877c:	lsl	ip, r4, ip
   18780:	orr	r3, r3, r4, lsr fp
   18784:	adc	r1, r1, r5
   18788:	subs	r0, r0, ip
   1878c:	mov	r5, r2
   18790:	sbc	r1, r1, r3
   18794:	cmp	lr, #0
   18798:	strdne	r4, [lr]
   1879c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   187a4:	mov	r7, r0
   187a8:	ldr	r6, [pc, #72]	; 187f8 <__assert_fail@plt+0x7770>
   187ac:	ldr	r5, [pc, #72]	; 187fc <__assert_fail@plt+0x7774>
   187b0:	add	r6, pc, r6
   187b4:	add	r5, pc, r5
   187b8:	sub	r6, r6, r5
   187bc:	mov	r8, r1
   187c0:	mov	r9, r2
   187c4:	bl	10e04 <calloc@plt-0x20>
   187c8:	asrs	r6, r6, #2
   187cc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   187d0:	mov	r4, #0
   187d4:	add	r4, r4, #1
   187d8:	ldr	r3, [r5], #4
   187dc:	mov	r2, r9
   187e0:	mov	r1, r8
   187e4:	mov	r0, r7
   187e8:	blx	r3
   187ec:	cmp	r6, r4
   187f0:	bne	187d4 <__assert_fail@plt+0x774c>
   187f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   187f8:	andeq	r1, r1, r4, asr r7
   187fc:	andeq	r1, r1, ip, asr #14
   18800:	bx	lr
   18804:	ldr	r3, [pc, #12]	; 18818 <__assert_fail@plt+0x7790>
   18808:	mov	r1, #0
   1880c:	add	r3, pc, r3
   18810:	ldr	r2, [r3]
   18814:	b	10fb0 <__cxa_atexit@plt>
   18818:	ldrdeq	r1, [r1], -r0

Disassembly of section .fini:

0001881c <.fini>:
   1881c:	push	{r3, lr}
   18820:	pop	{r3, pc}
