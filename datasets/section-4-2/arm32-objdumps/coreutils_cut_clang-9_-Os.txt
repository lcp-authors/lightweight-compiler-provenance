
../repos/coreutils/src/cut:     file format elf32-littlearm


Disassembly of section .init:

00010f7c <.init>:
   10f7c:	push	{r3, lr}
   10f80:	bl	11290 <__assert_fail@plt+0x48>
   10f84:	pop	{r3, pc}

Disassembly of section .plt:

00010f88 <calloc@plt-0x14>:
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	ldr	lr, [pc, #4]	; 10f98 <calloc@plt-0x4>
   10f90:	add	lr, pc, lr
   10f94:	ldr	pc, [lr, #8]!
   10f98:	andeq	r6, r1, r8, rrx

00010f9c <calloc@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #90112	; 0x16000
   10fa4:	ldr	pc, [ip, #104]!	; 0x68

00010fa8 <fputs_unlocked@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #90112	; 0x16000
   10fb0:	ldr	pc, [ip, #96]!	; 0x60

00010fb4 <strcmp@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #90112	; 0x16000
   10fbc:	ldr	pc, [ip, #88]!	; 0x58

00010fc0 <posix_fadvise64@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #90112	; 0x16000
   10fc8:	ldr	pc, [ip, #80]!	; 0x50

00010fcc <fflush@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #90112	; 0x16000
   10fd4:	ldr	pc, [ip, #72]!	; 0x48

00010fd8 <memmove@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #90112	; 0x16000
   10fe0:	ldr	pc, [ip, #64]!	; 0x40

00010fe4 <free@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #90112	; 0x16000
   10fec:	ldr	pc, [ip, #56]!	; 0x38

00010ff0 <ferror@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #90112	; 0x16000
   10ff8:	ldr	pc, [ip, #48]!	; 0x30

00010ffc <_exit@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #90112	; 0x16000
   11004:	ldr	pc, [ip, #40]!	; 0x28

00011008 <memcpy@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #90112	; 0x16000
   11010:	ldr	pc, [ip, #32]!

00011014 <mbsinit@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #90112	; 0x16000
   1101c:	ldr	pc, [ip, #24]!

00011020 <fwrite_unlocked@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #90112	; 0x16000
   11028:	ldr	pc, [ip, #16]!

0001102c <getc_unlocked@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #90112	; 0x16000
   11034:	ldr	pc, [ip, #8]!

00011038 <dcgettext@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #90112	; 0x16000
   11040:	ldr	pc, [ip, #0]!

00011044 <realloc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #86016	; 0x15000
   1104c:	ldr	pc, [ip, #4088]!	; 0xff8

00011050 <textdomain@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #86016	; 0x15000
   11058:	ldr	pc, [ip, #4080]!	; 0xff0

0001105c <iswprint@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #86016	; 0x15000
   11064:	ldr	pc, [ip, #4072]!	; 0xfe8

00011068 <lseek64@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #86016	; 0x15000
   11070:	ldr	pc, [ip, #4064]!	; 0xfe0

00011074 <__ctype_get_mb_cur_max@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #86016	; 0x15000
   1107c:	ldr	pc, [ip, #4056]!	; 0xfd8

00011080 <fread@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #86016	; 0x15000
   11088:	ldr	pc, [ip, #4048]!	; 0xfd0

0001108c <__fpending@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #86016	; 0x15000
   11094:	ldr	pc, [ip, #4040]!	; 0xfc8

00011098 <ferror_unlocked@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #86016	; 0x15000
   110a0:	ldr	pc, [ip, #4032]!	; 0xfc0

000110a4 <mbrtowc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #86016	; 0x15000
   110ac:	ldr	pc, [ip, #4024]!	; 0xfb8

000110b0 <error@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #86016	; 0x15000
   110b8:	ldr	pc, [ip, #4016]!	; 0xfb0

000110bc <malloc@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #86016	; 0x15000
   110c4:	ldr	pc, [ip, #4008]!	; 0xfa8

000110c8 <__libc_start_main@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #86016	; 0x15000
   110d0:	ldr	pc, [ip, #4000]!	; 0xfa0

000110d4 <__freading@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #86016	; 0x15000
   110dc:	ldr	pc, [ip, #3992]!	; 0xf98

000110e0 <__gmon_start__@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #86016	; 0x15000
   110e8:	ldr	pc, [ip, #3984]!	; 0xf90

000110ec <getopt_long@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #86016	; 0x15000
   110f4:	ldr	pc, [ip, #3976]!	; 0xf88

000110f8 <__ctype_b_loc@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #86016	; 0x15000
   11100:	ldr	pc, [ip, #3968]!	; 0xf80

00011104 <exit@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #86016	; 0x15000
   1110c:	ldr	pc, [ip, #3960]!	; 0xf78

00011110 <bcmp@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #86016	; 0x15000
   11118:	ldr	pc, [ip, #3952]!	; 0xf70

0001111c <strlen@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #86016	; 0x15000
   11124:	ldr	pc, [ip, #3944]!	; 0xf68

00011128 <ungetc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #86016	; 0x15000
   11130:	ldr	pc, [ip, #3936]!	; 0xf60

00011134 <__errno_location@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #86016	; 0x15000
   1113c:	ldr	pc, [ip, #3928]!	; 0xf58

00011140 <__cxa_atexit@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #86016	; 0x15000
   11148:	ldr	pc, [ip, #3920]!	; 0xf50

0001114c <memset@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #86016	; 0x15000
   11154:	ldr	pc, [ip, #3912]!	; 0xf48

00011158 <fgetc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #86016	; 0x15000
   11160:	ldr	pc, [ip, #3904]!	; 0xf40

00011164 <__printf_chk@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #86016	; 0x15000
   1116c:	ldr	pc, [ip, #3896]!	; 0xf38

00011170 <fileno@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #86016	; 0x15000
   11178:	ldr	pc, [ip, #3888]!	; 0xf30

0001117c <__fprintf_chk@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #86016	; 0x15000
   11184:	ldr	pc, [ip, #3880]!	; 0xf28

00011188 <memchr@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #86016	; 0x15000
   11190:	ldr	pc, [ip, #3872]!	; 0xf20

00011194 <fclose@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #86016	; 0x15000
   1119c:	ldr	pc, [ip, #3864]!	; 0xf18

000111a0 <fseeko64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #86016	; 0x15000
   111a8:	ldr	pc, [ip, #3856]!	; 0xf10

000111ac <setlocale@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #86016	; 0x15000
   111b4:	ldr	pc, [ip, #3848]!	; 0xf08

000111b8 <strrchr@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #86016	; 0x15000
   111c0:	ldr	pc, [ip, #3840]!	; 0xf00

000111c4 <nl_langinfo@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #86016	; 0x15000
   111cc:	ldr	pc, [ip, #3832]!	; 0xef8

000111d0 <clearerr_unlocked@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #86016	; 0x15000
   111d8:	ldr	pc, [ip, #3824]!	; 0xef0

000111dc <fopen64@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #86016	; 0x15000
   111e4:	ldr	pc, [ip, #3816]!	; 0xee8

000111e8 <qsort@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #86016	; 0x15000
   111f0:	ldr	pc, [ip, #3808]!	; 0xee0

000111f4 <bindtextdomain@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #86016	; 0x15000
   111fc:	ldr	pc, [ip, #3800]!	; 0xed8

00011200 <fputs@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #86016	; 0x15000
   11208:	ldr	pc, [ip, #3792]!	; 0xed0

0001120c <strncmp@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #86016	; 0x15000
   11214:	ldr	pc, [ip, #3784]!	; 0xec8

00011218 <abort@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #86016	; 0x15000
   11220:	ldr	pc, [ip, #3776]!	; 0xec0

00011224 <feof_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #86016	; 0x15000
   1122c:	ldr	pc, [ip, #3768]!	; 0xeb8

00011230 <putchar_unlocked@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #86016	; 0x15000
   11238:	ldr	pc, [ip, #3760]!	; 0xeb0

0001123c <strspn@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #86016	; 0x15000
   11244:	ldr	pc, [ip, #3752]!	; 0xea8

00011248 <__assert_fail@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #86016	; 0x15000
   11250:	ldr	pc, [ip, #3744]!	; 0xea0

Disassembly of section .text:

00011254 <.text>:
   11254:	mov	fp, #0
   11258:	mov	lr, #0
   1125c:	pop	{r1}		; (ldr r1, [sp], #4)
   11260:	mov	r2, sp
   11264:	push	{r2}		; (str r2, [sp, #-4]!)
   11268:	push	{r0}		; (str r0, [sp, #-4]!)
   1126c:	ldr	ip, [pc, #16]	; 11284 <__assert_fail@plt+0x3c>
   11270:	push	{ip}		; (str ip, [sp, #-4]!)
   11274:	ldr	r0, [pc, #12]	; 11288 <__assert_fail@plt+0x40>
   11278:	ldr	r3, [pc, #12]	; 1128c <__assert_fail@plt+0x44>
   1127c:	bl	110c8 <__libc_start_main@plt>
   11280:	bl	11218 <abort@plt>
   11284:	andeq	r5, r1, r8, lsl #19
   11288:	andeq	r1, r1, r4, ror #12
   1128c:	andeq	r5, r1, r8, lsr #18
   11290:	ldr	r3, [pc, #20]	; 112ac <__assert_fail@plt+0x64>
   11294:	ldr	r2, [pc, #20]	; 112b0 <__assert_fail@plt+0x68>
   11298:	add	r3, pc, r3
   1129c:	ldr	r2, [r3, r2]
   112a0:	cmp	r2, #0
   112a4:	bxeq	lr
   112a8:	b	110e0 <__gmon_start__@plt>
   112ac:	andeq	r5, r1, r0, ror #26
   112b0:	strdeq	r0, [r0], -r4
   112b4:	ldr	r0, [pc, #24]	; 112d4 <__assert_fail@plt+0x8c>
   112b8:	ldr	r3, [pc, #24]	; 112d8 <__assert_fail@plt+0x90>
   112bc:	cmp	r3, r0
   112c0:	bxeq	lr
   112c4:	ldr	r3, [pc, #16]	; 112dc <__assert_fail@plt+0x94>
   112c8:	cmp	r3, #0
   112cc:	bxeq	lr
   112d0:	bx	r3
   112d4:	andeq	r7, r2, r8, asr #2
   112d8:	andeq	r7, r2, r8, asr #2
   112dc:	andeq	r0, r0, r0
   112e0:	ldr	r0, [pc, #36]	; 1130c <__assert_fail@plt+0xc4>
   112e4:	ldr	r1, [pc, #36]	; 11310 <__assert_fail@plt+0xc8>
   112e8:	sub	r1, r1, r0
   112ec:	asr	r1, r1, #2
   112f0:	add	r1, r1, r1, lsr #31
   112f4:	asrs	r1, r1, #1
   112f8:	bxeq	lr
   112fc:	ldr	r3, [pc, #16]	; 11314 <__assert_fail@plt+0xcc>
   11300:	cmp	r3, #0
   11304:	bxeq	lr
   11308:	bx	r3
   1130c:	andeq	r7, r2, r8, asr #2
   11310:	andeq	r7, r2, r8, asr #2
   11314:	andeq	r0, r0, r0
   11318:	push	{r4, lr}
   1131c:	ldr	r4, [pc, #24]	; 1133c <__assert_fail@plt+0xf4>
   11320:	ldrb	r3, [r4]
   11324:	cmp	r3, #0
   11328:	popne	{r4, pc}
   1132c:	bl	112b4 <__assert_fail@plt+0x6c>
   11330:	mov	r3, #1
   11334:	strb	r3, [r4]
   11338:	pop	{r4, pc}
   1133c:	andeq	r7, r2, ip, ror #2
   11340:	b	112e0 <__assert_fail@plt+0x98>
   11344:	push	{fp, lr}
   11348:	mov	fp, sp
   1134c:	sub	sp, sp, #56	; 0x38
   11350:	mov	r8, r0
   11354:	cmp	r0, #0
   11358:	bne	11624 <__assert_fail@plt+0x3dc>
   1135c:	movw	r1, #23003	; 0x59db
   11360:	mov	r0, #0
   11364:	mov	r2, #5
   11368:	movt	r1, #1
   1136c:	bl	11038 <dcgettext@plt>
   11370:	mov	r1, r0
   11374:	movw	r0, #29084	; 0x719c
   11378:	movt	r0, #2
   1137c:	ldr	r2, [r0]
   11380:	mov	r0, #1
   11384:	bl	11164 <__printf_chk@plt>
   11388:	movw	r1, #23034	; 0x59fa
   1138c:	mov	r0, #0
   11390:	mov	r2, #5
   11394:	movt	r1, #1
   11398:	bl	11038 <dcgettext@plt>
   1139c:	movw	r9, #29028	; 0x7164
   113a0:	movt	r9, #2
   113a4:	ldr	r1, [r9]
   113a8:	bl	10fa8 <fputs_unlocked@plt>
   113ac:	movw	r1, #24834	; 0x6102
   113b0:	mov	r0, #0
   113b4:	mov	r2, #5
   113b8:	movt	r1, #1
   113bc:	bl	11038 <dcgettext@plt>
   113c0:	ldr	r1, [r9]
   113c4:	bl	10fa8 <fputs_unlocked@plt>
   113c8:	movw	r1, #24890	; 0x613a
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	movt	r1, #1
   113d8:	bl	11038 <dcgettext@plt>
   113dc:	ldr	r1, [r9]
   113e0:	bl	10fa8 <fputs_unlocked@plt>
   113e4:	movw	r1, #23100	; 0x5a3c
   113e8:	mov	r0, #0
   113ec:	mov	r2, #5
   113f0:	movt	r1, #1
   113f4:	bl	11038 <dcgettext@plt>
   113f8:	ldr	r1, [r9]
   113fc:	bl	10fa8 <fputs_unlocked@plt>
   11400:	movw	r1, #23277	; 0x5aed
   11404:	mov	r0, #0
   11408:	mov	r2, #5
   1140c:	movt	r1, #1
   11410:	bl	11038 <dcgettext@plt>
   11414:	ldr	r1, [r9]
   11418:	bl	10fa8 <fputs_unlocked@plt>
   1141c:	movw	r1, #23515	; 0x5bdb
   11420:	mov	r0, #0
   11424:	mov	r2, #5
   11428:	movt	r1, #1
   1142c:	bl	11038 <dcgettext@plt>
   11430:	ldr	r1, [r9]
   11434:	bl	10fa8 <fputs_unlocked@plt>
   11438:	movw	r1, #23629	; 0x5c4d
   1143c:	mov	r0, #0
   11440:	mov	r2, #5
   11444:	movt	r1, #1
   11448:	bl	11038 <dcgettext@plt>
   1144c:	ldr	r1, [r9]
   11450:	bl	10fa8 <fputs_unlocked@plt>
   11454:	movw	r1, #23839	; 0x5d1f
   11458:	mov	r0, #0
   1145c:	mov	r2, #5
   11460:	movt	r1, #1
   11464:	bl	11038 <dcgettext@plt>
   11468:	ldr	r1, [r9]
   1146c:	bl	10fa8 <fputs_unlocked@plt>
   11470:	movw	r1, #23902	; 0x5d5e
   11474:	mov	r0, #0
   11478:	mov	r2, #5
   1147c:	movt	r1, #1
   11480:	bl	11038 <dcgettext@plt>
   11484:	ldr	r1, [r9]
   11488:	bl	10fa8 <fputs_unlocked@plt>
   1148c:	movw	r1, #23947	; 0x5d8b
   11490:	mov	r0, #0
   11494:	mov	r2, #5
   11498:	movt	r1, #1
   1149c:	bl	11038 <dcgettext@plt>
   114a0:	ldr	r1, [r9]
   114a4:	bl	10fa8 <fputs_unlocked@plt>
   114a8:	movw	r1, #24001	; 0x5dc1
   114ac:	mov	r0, #0
   114b0:	mov	r2, #5
   114b4:	movt	r1, #1
   114b8:	bl	11038 <dcgettext@plt>
   114bc:	ldr	r1, [r9]
   114c0:	bl	10fa8 <fputs_unlocked@plt>
   114c4:	movw	r1, #24205	; 0x5e8d
   114c8:	mov	r0, #0
   114cc:	mov	r2, #5
   114d0:	movt	r1, #1
   114d4:	bl	11038 <dcgettext@plt>
   114d8:	ldr	r1, [r9]
   114dc:	bl	10fa8 <fputs_unlocked@plt>
   114e0:	movw	r0, #25592	; 0x63f8
   114e4:	mov	r6, sp
   114e8:	movt	r0, #1
   114ec:	mov	r1, r6
   114f0:	ldm	r0!, {r2, r3, r4, r5}
   114f4:	stmia	r1!, {r2, r3, r4, r5}
   114f8:	ldm	r0!, {r2, r3, r4, r5, r7}
   114fc:	stmia	r1!, {r2, r3, r4, r5, r7}
   11500:	ldm	r0, {r2, r3, r4, r5, r7}
   11504:	stm	r1, {r2, r3, r4, r5, r7}
   11508:	movw	r1, #24965	; 0x6185
   1150c:	movw	r5, #24467	; 0x5f93
   11510:	movt	r1, #1
   11514:	movt	r5, #1
   11518:	mov	r0, r5
   1151c:	bl	10fb4 <strcmp@plt>
   11520:	cmp	r0, #0
   11524:	ldrne	r1, [r6, #8]!
   11528:	cmpne	r1, #0
   1152c:	bne	11518 <__assert_fail@plt+0x2d0>
   11530:	movw	r1, #25060	; 0x61e4
   11534:	ldr	r6, [r6, #4]
   11538:	mov	r0, #0
   1153c:	mov	r2, #5
   11540:	movt	r1, #1
   11544:	bl	11038 <dcgettext@plt>
   11548:	movw	r2, #24579	; 0x6003
   1154c:	movw	r3, #25083	; 0x61fb
   11550:	mov	r1, r0
   11554:	mov	r0, #1
   11558:	movt	r2, #1
   1155c:	movt	r3, #1
   11560:	bl	11164 <__printf_chk@plt>
   11564:	cmp	r6, #0
   11568:	mov	r0, #5
   1156c:	mov	r1, #0
   11570:	moveq	r6, r5
   11574:	bl	111ac <setlocale@plt>
   11578:	cmp	r0, #0
   1157c:	beq	115b4 <__assert_fail@plt+0x36c>
   11580:	movw	r1, #25123	; 0x6223
   11584:	mov	r2, #3
   11588:	movt	r1, #1
   1158c:	bl	1120c <strncmp@plt>
   11590:	cmp	r0, #0
   11594:	beq	115b4 <__assert_fail@plt+0x36c>
   11598:	movw	r1, #25127	; 0x6227
   1159c:	mov	r0, #0
   115a0:	mov	r2, #5
   115a4:	movt	r1, #1
   115a8:	bl	11038 <dcgettext@plt>
   115ac:	ldr	r1, [r9]
   115b0:	bl	10fa8 <fputs_unlocked@plt>
   115b4:	movw	r1, #25198	; 0x626e
   115b8:	mov	r0, #0
   115bc:	mov	r2, #5
   115c0:	movt	r1, #1
   115c4:	bl	11038 <dcgettext@plt>
   115c8:	movw	r2, #25083	; 0x61fb
   115cc:	mov	r1, r0
   115d0:	mov	r0, #1
   115d4:	mov	r3, r5
   115d8:	movt	r2, #1
   115dc:	bl	11164 <__printf_chk@plt>
   115e0:	movw	r1, #25225	; 0x6289
   115e4:	mov	r0, #0
   115e8:	mov	r2, #5
   115ec:	movt	r1, #1
   115f0:	bl	11038 <dcgettext@plt>
   115f4:	mov	r1, r0
   115f8:	movw	r0, #24993	; 0x61a1
   115fc:	movw	r3, #25275	; 0x62bb
   11600:	cmp	r6, r5
   11604:	mov	r2, r6
   11608:	movt	r0, #1
   1160c:	movt	r3, #1
   11610:	moveq	r3, r0
   11614:	mov	r0, #1
   11618:	bl	11164 <__printf_chk@plt>
   1161c:	mov	r0, r8
   11620:	bl	11104 <exit@plt>
   11624:	movw	r0, #29016	; 0x7158
   11628:	movw	r1, #22964	; 0x59b4
   1162c:	mov	r2, #5
   11630:	movt	r0, #2
   11634:	movt	r1, #1
   11638:	ldr	r5, [r0]
   1163c:	mov	r0, #0
   11640:	bl	11038 <dcgettext@plt>
   11644:	mov	r2, r0
   11648:	movw	r0, #29084	; 0x719c
   1164c:	mov	r1, #1
   11650:	movt	r0, #2
   11654:	ldr	r3, [r0]
   11658:	mov	r0, r5
   1165c:	bl	1117c <__fprintf_chk@plt>
   11660:	b	1161c <__assert_fail@plt+0x3d4>
   11664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11668:	add	fp, sp, #28
   1166c:	sub	sp, sp, #20
   11670:	mov	r5, r0
   11674:	ldr	r0, [r1]
   11678:	mov	r8, r1
   1167c:	bl	12fe4 <__assert_fail@plt+0x1d9c>
   11680:	movw	r1, #25275	; 0x62bb
   11684:	mov	r0, #6
   11688:	movt	r1, #1
   1168c:	bl	111ac <setlocale@plt>
   11690:	movw	r6, #24583	; 0x6007
   11694:	movw	r1, #24471	; 0x5f97
   11698:	movt	r6, #1
   1169c:	movt	r1, #1
   116a0:	mov	r0, r6
   116a4:	bl	111f4 <bindtextdomain@plt>
   116a8:	mov	r0, r6
   116ac:	bl	11050 <textdomain@plt>
   116b0:	movw	r0, #10480	; 0x28f0
   116b4:	movt	r0, #1
   116b8:	bl	1598c <__assert_fail@plt+0x4744>
   116bc:	movw	r0, #29040	; 0x7170
   116c0:	mov	r9, #0
   116c4:	movw	r7, #29041	; 0x7171
   116c8:	mov	r4, #0
   116cc:	mov	sl, #0
   116d0:	mov	r6, #0
   116d4:	movt	r0, #2
   116d8:	movt	r7, #2
   116dc:	strb	r9, [r0]
   116e0:	movw	r0, #29042	; 0x7172
   116e4:	strb	r9, [r7]
   116e8:	movt	r0, #2
   116ec:	strb	r9, [r0]
   116f0:	movw	r2, #24495	; 0x5faf
   116f4:	movw	r3, #25416	; 0x6348
   116f8:	mov	r0, r5
   116fc:	mov	r1, r8
   11700:	str	r9, [sp]
   11704:	movt	r2, #1
   11708:	movt	r3, #1
   1170c:	bl	110ec <getopt_long@plt>
   11710:	cmp	r0, #109	; 0x6d
   11714:	bgt	11734 <__assert_fail@plt+0x4ec>
   11718:	cmp	r0, #97	; 0x61
   1171c:	ble	11840 <__assert_fail@plt+0x5f8>
   11720:	sub	r1, r0, #98	; 0x62
   11724:	cmp	r1, #2
   11728:	bcs	117a0 <__assert_fail@plt+0x558>
   1172c:	mov	sl, #1
   11730:	b	11800 <__assert_fail@plt+0x5b8>
   11734:	cmp	r0, #121	; 0x79
   11738:	ble	11770 <__assert_fail@plt+0x528>
   1173c:	cmp	r0, #122	; 0x7a
   11740:	beq	1178c <__assert_fail@plt+0x544>
   11744:	cmp	r0, #256	; 0x100
   11748:	bne	117d8 <__assert_fail@plt+0x590>
   1174c:	movw	r0, #29032	; 0x7168
   11750:	movt	r0, #2
   11754:	ldr	r7, [r0]
   11758:	ldrb	r0, [r7]
   1175c:	cmp	r0, #0
   11760:	beq	11818 <__assert_fail@plt+0x5d0>
   11764:	mov	r0, r7
   11768:	bl	1111c <strlen@plt>
   1176c:	b	1181c <__assert_fail@plt+0x5d4>
   11770:	cmp	r0, #110	; 0x6e
   11774:	beq	116f0 <__assert_fail@plt+0x4a8>
   11778:	cmp	r0, #115	; 0x73
   1177c:	bne	11a68 <__assert_fail@plt+0x820>
   11780:	movw	r0, #29040	; 0x7170
   11784:	movt	r0, #2
   11788:	b	117ec <__assert_fail@plt+0x5a4>
   1178c:	movw	r1, #29052	; 0x717c
   11790:	mov	r0, #1
   11794:	movt	r1, #2
   11798:	strb	r0, [r1]
   1179c:	b	116f0 <__assert_fail@plt+0x4a8>
   117a0:	cmp	r0, #100	; 0x64
   117a4:	bne	117f8 <__assert_fail@plt+0x5b0>
   117a8:	movw	r0, #29032	; 0x7168
   117ac:	movt	r0, #2
   117b0:	ldr	r1, [r0]
   117b4:	ldrb	r0, [r1]
   117b8:	cmp	r0, #0
   117bc:	beq	117cc <__assert_fail@plt+0x584>
   117c0:	ldrb	r1, [r1, #1]
   117c4:	cmp	r1, #0
   117c8:	bne	11a14 <__assert_fail@plt+0x7cc>
   117cc:	strb	r0, [r7]
   117d0:	mov	r4, #1
   117d4:	b	116f0 <__assert_fail@plt+0x4a8>
   117d8:	movw	r1, #257	; 0x101
   117dc:	cmp	r0, r1
   117e0:	bne	11a68 <__assert_fail@plt+0x820>
   117e4:	movw	r0, #29053	; 0x717d
   117e8:	movt	r0, #2
   117ec:	mov	r1, #1
   117f0:	strb	r1, [r0]
   117f4:	b	116f0 <__assert_fail@plt+0x4a8>
   117f8:	cmp	r0, #102	; 0x66
   117fc:	bne	11a68 <__assert_fail@plt+0x820>
   11800:	cmp	r6, #0
   11804:	bne	11a20 <__assert_fail@plt+0x7d8>
   11808:	movw	r0, #29032	; 0x7168
   1180c:	movt	r0, #2
   11810:	ldr	r6, [r0]
   11814:	b	116f0 <__assert_fail@plt+0x4a8>
   11818:	mov	r0, #1
   1181c:	movw	r1, #29048	; 0x7178
   11820:	movt	r1, #2
   11824:	str	r7, [r1]
   11828:	movw	r1, #29044	; 0x7174
   1182c:	movw	r7, #29041	; 0x7171
   11830:	movt	r1, #2
   11834:	movt	r7, #2
   11838:	str	r0, [r1]
   1183c:	b	116f0 <__assert_fail@plt+0x4a8>
   11840:	cmn	r0, #1
   11844:	bne	119a0 <__assert_fail@plt+0x758>
   11848:	cmp	r6, #0
   1184c:	beq	11a2c <__assert_fail@plt+0x7e4>
   11850:	tst	sl, #1
   11854:	beq	11874 <__assert_fail@plt+0x62c>
   11858:	tst	r4, #1
   1185c:	bne	11a38 <__assert_fail@plt+0x7f0>
   11860:	movw	r0, #29040	; 0x7170
   11864:	movt	r0, #2
   11868:	ldrb	r0, [r0]
   1186c:	cmp	r0, #1
   11870:	beq	11a44 <__assert_fail@plt+0x7fc>
   11874:	movw	r0, #29053	; 0x717d
   11878:	ands	r1, sl, #1
   1187c:	movt	r0, #2
   11880:	movwne	r1, #4
   11884:	ldrb	r0, [r0]
   11888:	bfi	r1, r0, #1, #1
   1188c:	mov	r0, r6
   11890:	bl	12234 <__assert_fail@plt+0xfec>
   11894:	movw	r1, #29048	; 0x7178
   11898:	tst	r4, #1
   1189c:	movt	r1, #2
   118a0:	moveq	r0, #9
   118a4:	strbeq	r0, [r7]
   118a8:	ldr	r0, [r1]
   118ac:	cmp	r0, #0
   118b0:	bne	118d8 <__assert_fail@plt+0x690>
   118b4:	movw	r0, #29392	; 0x72d0
   118b8:	movw	r2, #29044	; 0x7174
   118bc:	movt	r0, #2
   118c0:	movt	r2, #2
   118c4:	str	r0, [r1]
   118c8:	mov	r1, #1
   118cc:	str	r1, [r2]
   118d0:	ldrb	r1, [r7]
   118d4:	strb	r1, [r0]
   118d8:	movw	r4, #29008	; 0x7150
   118dc:	movw	r0, #6768	; 0x1a70
   118e0:	movw	r7, #7116	; 0x1bcc
   118e4:	tst	sl, #1
   118e8:	movt	r4, #2
   118ec:	movt	r0, #1
   118f0:	movt	r7, #1
   118f4:	ldr	r1, [r4]
   118f8:	movne	r7, r0
   118fc:	cmp	r1, r5
   11900:	bne	1191c <__assert_fail@plt+0x6d4>
   11904:	movw	r0, #25804	; 0x64cc
   11908:	mov	r1, r7
   1190c:	movt	r0, #1
   11910:	bl	12124 <__assert_fail@plt+0xedc>
   11914:	mov	r6, r0
   11918:	b	1194c <__assert_fail@plt+0x704>
   1191c:	mov	r6, #1
   11920:	bge	1194c <__assert_fail@plt+0x704>
   11924:	mov	r6, #1
   11928:	ldr	r0, [r8, r1, lsl #2]
   1192c:	mov	r1, r7
   11930:	bl	12124 <__assert_fail@plt+0xedc>
   11934:	ldr	r1, [r4]
   11938:	and	r6, r6, r0
   1193c:	add	r1, r1, #1
   11940:	cmp	r1, r5
   11944:	str	r1, [r4]
   11948:	blt	11928 <__assert_fail@plt+0x6e0>
   1194c:	movw	r0, #29042	; 0x7172
   11950:	movt	r0, #2
   11954:	ldrb	r0, [r0]
   11958:	cmp	r0, #1
   1195c:	bne	11994 <__assert_fail@plt+0x74c>
   11960:	movw	r0, #29024	; 0x7160
   11964:	movt	r0, #2
   11968:	ldr	r0, [r0]
   1196c:	bl	12a18 <__assert_fail@plt+0x17d0>
   11970:	cmn	r0, #1
   11974:	bne	11994 <__assert_fail@plt+0x74c>
   11978:	bl	11134 <__errno_location@plt>
   1197c:	ldr	r1, [r0]
   11980:	movw	r2, #25804	; 0x64cc
   11984:	mov	r0, #0
   11988:	mov	r6, #0
   1198c:	movt	r2, #1
   11990:	bl	110b0 <error@plt>
   11994:	eor	r0, r6, #1
   11998:	sub	sp, fp, #28
   1199c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   119a0:	cmn	r0, #3
   119a4:	bne	11a04 <__assert_fail@plt+0x7bc>
   119a8:	movw	r0, #28928	; 0x7100
   119ac:	movw	r2, #24624	; 0x6030
   119b0:	movw	r6, #24593	; 0x6011
   119b4:	movw	r7, #24608	; 0x6020
   119b8:	mov	r1, #0
   119bc:	movt	r0, #2
   119c0:	movt	r2, #1
   119c4:	movt	r6, #1
   119c8:	movt	r7, #1
   119cc:	ldr	r3, [r0]
   119d0:	movw	r0, #29028	; 0x7164
   119d4:	stm	sp, {r6, r7}
   119d8:	str	r2, [sp, #8]
   119dc:	movw	r2, #24579	; 0x6003
   119e0:	str	r1, [sp, #12]
   119e4:	movw	r1, #24467	; 0x5f93
   119e8:	movt	r0, #2
   119ec:	movt	r1, #1
   119f0:	movt	r2, #1
   119f4:	ldr	r0, [r0]
   119f8:	bl	14ed4 <__assert_fail@plt+0x3c8c>
   119fc:	mov	r0, #0
   11a00:	bl	11104 <exit@plt>
   11a04:	cmn	r0, #2
   11a08:	bne	11a68 <__assert_fail@plt+0x820>
   11a0c:	mov	r0, #0
   11a10:	bl	11344 <__assert_fail@plt+0xfc>
   11a14:	movw	r1, #24538	; 0x5fda
   11a18:	movt	r1, #1
   11a1c:	b	11a4c <__assert_fail@plt+0x804>
   11a20:	movw	r1, #24507	; 0x5fbb
   11a24:	movt	r1, #1
   11a28:	b	11a4c <__assert_fail@plt+0x804>
   11a2c:	movw	r1, #24637	; 0x603d
   11a30:	movt	r1, #1
   11a34:	b	11a4c <__assert_fail@plt+0x804>
   11a38:	movw	r1, #24693	; 0x6075
   11a3c:	movt	r1, #1
   11a40:	b	11a4c <__assert_fail@plt+0x804>
   11a44:	movw	r1, #24759	; 0x60b7
   11a48:	movt	r1, #1
   11a4c:	mov	r0, #0
   11a50:	mov	r2, #5
   11a54:	bl	11038 <dcgettext@plt>
   11a58:	mov	r2, r0
   11a5c:	mov	r0, #0
   11a60:	mov	r1, #0
   11a64:	bl	110b0 <error@plt>
   11a68:	mov	r0, #1
   11a6c:	bl	11344 <__assert_fail@plt+0xfc>
   11a70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a74:	add	fp, sp, #28
   11a78:	sub	sp, sp, #4
   11a7c:	mov	r4, r0
   11a80:	movw	r0, #29396	; 0x72d4
   11a84:	movw	r7, #29056	; 0x7180
   11a88:	movw	r6, #29052	; 0x717c
   11a8c:	mov	r9, #0
   11a90:	movt	r0, #2
   11a94:	movt	r7, #2
   11a98:	movt	r6, #2
   11a9c:	ldr	r0, [r0]
   11aa0:	str	r0, [r7]
   11aa4:	mov	r8, #0
   11aa8:	mov	sl, #0
   11aac:	mov	r0, r4
   11ab0:	bl	1102c <getc_unlocked@plt>
   11ab4:	mov	r5, r0
   11ab8:	ldrb	r0, [r6]
   11abc:	cmp	r0, #0
   11ac0:	mov	r0, #10
   11ac4:	movwne	r0, #0
   11ac8:	cmp	r5, r0
   11acc:	beq	11b94 <__assert_fail@plt+0x94c>
   11ad0:	cmn	r5, #1
   11ad4:	beq	11bb4 <__assert_fail@plt+0x96c>
   11ad8:	ldr	r0, [r7]
   11adc:	adds	r9, r9, #1
   11ae0:	adc	r8, r8, #0
   11ae4:	ldrd	r2, [r0, #8]
   11ae8:	subs	r1, r2, r9
   11aec:	sbcs	r1, r3, r8
   11af0:	addcc	r0, r0, #16
   11af4:	strcc	r0, [r7]
   11af8:	ldr	r2, [r0]
   11afc:	ldr	r1, [r0, #4]
   11b00:	subs	r0, r9, r2
   11b04:	sbcs	r0, r8, r1
   11b08:	bcc	11aac <__assert_fail@plt+0x864>
   11b0c:	movw	r0, #29048	; 0x7178
   11b10:	movw	r3, #29392	; 0x72d0
   11b14:	movt	r0, #2
   11b18:	movt	r3, #2
   11b1c:	ldr	r0, [r0]
   11b20:	mov	lr, r3
   11b24:	subs	r3, r0, r3
   11b28:	movwne	r3, #1
   11b2c:	cmp	r0, lr
   11b30:	orr	ip, sl, r3
   11b34:	beq	11b84 <__assert_fail@plt+0x93c>
   11b38:	eor	r3, sl, #1
   11b3c:	mov	sl, ip
   11b40:	tst	r3, #1
   11b44:	bne	11b88 <__assert_fail@plt+0x940>
   11b48:	eor	r2, r2, r9
   11b4c:	eor	r1, r1, r8
   11b50:	mov	sl, #1
   11b54:	orrs	r1, r2, r1
   11b58:	bne	11b88 <__assert_fail@plt+0x940>
   11b5c:	movw	r1, #29028	; 0x7164
   11b60:	mov	sl, #1
   11b64:	movt	r1, #2
   11b68:	ldr	r3, [r1]
   11b6c:	movw	r1, #29044	; 0x7174
   11b70:	movt	r1, #2
   11b74:	ldr	r2, [r1]
   11b78:	mov	r1, #1
   11b7c:	bl	11020 <fwrite_unlocked@plt>
   11b80:	b	11b88 <__assert_fail@plt+0x940>
   11b84:	mov	sl, ip
   11b88:	mov	r0, r5
   11b8c:	bl	11230 <putchar_unlocked@plt>
   11b90:	b	11aac <__assert_fail@plt+0x864>
   11b94:	mov	r0, r5
   11b98:	bl	11230 <putchar_unlocked@plt>
   11b9c:	movw	r0, #29396	; 0x72d4
   11ba0:	mov	r9, #0
   11ba4:	movt	r0, #2
   11ba8:	ldr	r0, [r0]
   11bac:	str	r0, [r7]
   11bb0:	b	11aa4 <__assert_fail@plt+0x85c>
   11bb4:	sub	sp, fp, #28
   11bb8:	orrs	r1, r9, r8
   11bbc:	beq	11bc8 <__assert_fail@plt+0x980>
   11bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc4:	b	11230 <putchar_unlocked@plt>
   11bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd0:	add	fp, sp, #28
   11bd4:	sub	sp, sp, #28
   11bd8:	mov	r4, r0
   11bdc:	movw	r0, #29396	; 0x72d4
   11be0:	movw	r5, #29056	; 0x7180
   11be4:	movt	r0, #2
   11be8:	movt	r5, #2
   11bec:	ldr	r0, [r0]
   11bf0:	str	r0, [r5]
   11bf4:	mov	r0, r4
   11bf8:	bl	1102c <getc_unlocked@plt>
   11bfc:	cmn	r0, #1
   11c00:	beq	120f8 <__assert_fail@plt+0xeb0>
   11c04:	mov	r1, r4
   11c08:	bl	11128 <ungetc@plt>
   11c0c:	ldr	r0, [r5]
   11c10:	movw	r8, #29041	; 0x7171
   11c14:	movw	r9, #29052	; 0x717c
   11c18:	movw	sl, #29060	; 0x7184
   11c1c:	mov	r5, #0
   11c20:	mov	r6, #0
   11c24:	movt	r8, #2
   11c28:	movt	r9, #2
   11c2c:	movt	sl, #2
   11c30:	ldrd	r0, [r0]
   11c34:	subs	r0, r0, #2
   11c38:	sbcs	r0, r1, #0
   11c3c:	movw	r1, #29040	; 0x7170
   11c40:	mov	r0, #0
   11c44:	movt	r1, #2
   11c48:	movwcc	r0, #1
   11c4c:	ldrb	r1, [r1]
   11c50:	eor	r0, r1, r0
   11c54:	str	r0, [sp, #16]
   11c58:	mov	r0, #1
   11c5c:	str	r0, [sp, #24]
   11c60:	mov	r0, #0
   11c64:	str	r0, [sp, #20]
   11c68:	ldr	r0, [sp, #24]
   11c6c:	ldr	r1, [sp, #16]
   11c70:	eor	r0, r0, #1
   11c74:	orrs	r0, r0, r5
   11c78:	movwne	r0, #1
   11c7c:	orr	r0, r1, r0
   11c80:	tst	r0, #1
   11c84:	beq	11c94 <__assert_fail@plt+0xa4c>
   11c88:	movw	r7, #29056	; 0x7180
   11c8c:	movt	r7, #2
   11c90:	b	11e34 <__assert_fail@plt+0xbec>
   11c94:	ldrb	r0, [r9]
   11c98:	ldrb	r1, [r8]
   11c9c:	mov	r2, #0
   11ca0:	mvn	r3, #0
   11ca4:	cmp	r0, #0
   11ca8:	str	r1, [sp]
   11cac:	movw	r1, #29064	; 0x7188
   11cb0:	mov	r0, #10
   11cb4:	movwne	r0, #0
   11cb8:	movt	r1, #2
   11cbc:	stmib	sp, {r0, r4}
   11cc0:	mov	r0, sl
   11cc4:	bl	12bdc <__assert_fail@plt+0x1994>
   11cc8:	movw	r6, #29040	; 0x7170
   11ccc:	movw	r5, #29028	; 0x7164
   11cd0:	mov	r2, r0
   11cd4:	cmp	r0, #0
   11cd8:	movt	r6, #2
   11cdc:	movt	r5, #2
   11ce0:	bmi	120c8 <__assert_fail@plt+0xe80>
   11ce4:	cmp	r2, #0
   11ce8:	beq	12100 <__assert_fail@plt+0xeb8>
   11cec:	ldr	r0, [sl]
   11cf0:	sub	r7, r2, #1
   11cf4:	ldrb	r3, [r8]
   11cf8:	ldrb	r1, [r0, r7]
   11cfc:	cmp	r1, r3
   11d00:	beq	11d84 <__assert_fail@plt+0xb3c>
   11d04:	ldrb	r1, [r6]
   11d08:	cmp	r1, #0
   11d0c:	bne	11d40 <__assert_fail@plt+0xaf8>
   11d10:	ldr	r3, [r5]
   11d14:	mov	r1, #1
   11d18:	bl	11020 <fwrite_unlocked@plt>
   11d1c:	ldr	r1, [sl]
   11d20:	ldrb	r0, [r9]
   11d24:	ldrb	r1, [r1, r7]
   11d28:	cmp	r0, #0
   11d2c:	mov	r0, #10
   11d30:	movwne	r0, #0
   11d34:	cmp	r0, r1
   11d38:	beq	11d40 <__assert_fail@plt+0xaf8>
   11d3c:	bl	11230 <putchar_unlocked@plt>
   11d40:	ldrb	r0, [r9]
   11d44:	ldrb	r1, [r8]
   11d48:	mov	r2, #0
   11d4c:	mvn	r3, #0
   11d50:	cmp	r0, #0
   11d54:	str	r1, [sp]
   11d58:	movw	r1, #29064	; 0x7188
   11d5c:	mov	r0, #10
   11d60:	movwne	r0, #0
   11d64:	movt	r1, #2
   11d68:	stmib	sp, {r0, r4}
   11d6c:	mov	r0, sl
   11d70:	bl	12bdc <__assert_fail@plt+0x1994>
   11d74:	mov	r2, r0
   11d78:	cmp	r0, #0
   11d7c:	bpl	11ce4 <__assert_fail@plt+0xa9c>
   11d80:	b	120c8 <__assert_fail@plt+0xe80>
   11d84:	movw	r1, #29056	; 0x7180
   11d88:	movt	r1, #2
   11d8c:	ldr	r1, [r1]
   11d90:	ldrd	r2, [r1]
   11d94:	rsbs	r1, r2, #1
   11d98:	rscs	r1, r3, #0
   11d9c:	bcc	11e00 <__assert_fail@plt+0xbb8>
   11da0:	ldr	r3, [r5]
   11da4:	mov	r1, #1
   11da8:	mov	r2, r7
   11dac:	bl	11020 <fwrite_unlocked@plt>
   11db0:	ldrb	r0, [r9]
   11db4:	ldrb	r1, [r8]
   11db8:	cmp	r0, #0
   11dbc:	mov	r0, #10
   11dc0:	movwne	r0, #0
   11dc4:	cmp	r0, r1
   11dc8:	bne	11df8 <__assert_fail@plt+0xbb0>
   11dcc:	mov	r0, r4
   11dd0:	bl	1102c <getc_unlocked@plt>
   11dd4:	movw	r7, #29056	; 0x7180
   11dd8:	cmn	r0, #1
   11ddc:	movt	r7, #2
   11de0:	beq	11e08 <__assert_fail@plt+0xbc0>
   11de4:	mov	r1, r4
   11de8:	bl	11128 <ungetc@plt>
   11dec:	mov	r0, #1
   11df0:	str	r0, [sp, #20]
   11df4:	b	11e08 <__assert_fail@plt+0xbc0>
   11df8:	mov	r0, #1
   11dfc:	str	r0, [sp, #20]
   11e00:	movw	r7, #29056	; 0x7180
   11e04:	movt	r7, #2
   11e08:	ldr	r0, [r7]
   11e0c:	mov	r1, #2
   11e10:	mov	r5, #0
   11e14:	mov	r6, #0
   11e18:	ldrd	r2, [r0, #8]
   11e1c:	str	r1, [sp, #24]
   11e20:	rsbs	r1, r2, #1
   11e24:	rscs	r1, r3, #0
   11e28:	addcs	r0, r0, #16
   11e2c:	movcs	r5, #0
   11e30:	strcs	r0, [r7]
   11e34:	ldr	r0, [r7]
   11e38:	ldr	r2, [sp, #24]
   11e3c:	ldrd	r0, [r0]
   11e40:	subs	r0, r2, r0
   11e44:	sbcs	r0, r5, r1
   11e48:	bcs	11eb8 <__assert_fail@plt+0xc70>
   11e4c:	mov	r0, r4
   11e50:	bl	1102c <getc_unlocked@plt>
   11e54:	ldrb	r1, [r8]
   11e58:	cmp	r0, r1
   11e5c:	beq	11f0c <__assert_fail@plt+0xcc4>
   11e60:	ldrb	r2, [r9]
   11e64:	cmp	r2, #0
   11e68:	mov	r2, #10
   11e6c:	movwne	r2, #0
   11e70:	cmn	r0, #1
   11e74:	cmpne	r0, r2
   11e78:	beq	11f0c <__assert_fail@plt+0xcc4>
   11e7c:	mov	r7, r0
   11e80:	mov	r0, r4
   11e84:	bl	1102c <getc_unlocked@plt>
   11e88:	ldrb	r1, [r8]
   11e8c:	cmp	r0, r1
   11e90:	beq	11f6c <__assert_fail@plt+0xd24>
   11e94:	ldrb	r2, [r9]
   11e98:	cmp	r2, #0
   11e9c:	mov	r2, #10
   11ea0:	movwne	r2, #0
   11ea4:	cmn	r0, #1
   11ea8:	beq	11f6c <__assert_fail@plt+0xd24>
   11eac:	cmp	r0, r2
   11eb0:	bne	11e7c <__assert_fail@plt+0xc34>
   11eb4:	b	11f6c <__assert_fail@plt+0xd24>
   11eb8:	ldr	r0, [sp, #20]
   11ebc:	tst	r0, #1
   11ec0:	beq	11ef0 <__assert_fail@plt+0xca8>
   11ec4:	movw	r0, #29028	; 0x7164
   11ec8:	mov	r1, #1
   11ecc:	movt	r0, #2
   11ed0:	ldr	r3, [r0]
   11ed4:	movw	r0, #29044	; 0x7174
   11ed8:	movt	r0, #2
   11edc:	ldr	r2, [r0]
   11ee0:	movw	r0, #29048	; 0x7178
   11ee4:	movt	r0, #2
   11ee8:	ldr	r0, [r0]
   11eec:	bl	11020 <fwrite_unlocked@plt>
   11ef0:	mov	r0, r4
   11ef4:	bl	1102c <getc_unlocked@plt>
   11ef8:	ldrb	r1, [r8]
   11efc:	mov	r2, #1
   11f00:	str	r2, [sp, #20]
   11f04:	cmp	r0, r1
   11f08:	bne	11f14 <__assert_fail@plt+0xccc>
   11f0c:	mov	r7, r6
   11f10:	b	11f6c <__assert_fail@plt+0xd24>
   11f14:	ldrb	r2, [r9]
   11f18:	cmp	r2, #0
   11f1c:	mov	r2, #10
   11f20:	movwne	r2, #0
   11f24:	cmn	r0, #1
   11f28:	beq	11f0c <__assert_fail@plt+0xcc4>
   11f2c:	cmp	r0, r2
   11f30:	beq	11f0c <__assert_fail@plt+0xcc4>
   11f34:	mov	r7, r0
   11f38:	bl	11230 <putchar_unlocked@plt>
   11f3c:	mov	r0, r4
   11f40:	bl	1102c <getc_unlocked@plt>
   11f44:	ldrb	r1, [r8]
   11f48:	cmp	r0, r1
   11f4c:	beq	11f6c <__assert_fail@plt+0xd24>
   11f50:	ldrb	r2, [r9]
   11f54:	cmp	r2, #0
   11f58:	mov	r2, #10
   11f5c:	movwne	r2, #0
   11f60:	cmn	r0, #1
   11f64:	cmpne	r0, r2
   11f68:	bne	11f34 <__assert_fail@plt+0xcec>
   11f6c:	mov	r6, r0
   11f70:	ldrb	r0, [r9]
   11f74:	cmp	r0, #0
   11f78:	mov	r0, #10
   11f7c:	movwne	r0, #0
   11f80:	cmp	r6, r1
   11f84:	cmpeq	r0, r1
   11f88:	beq	12000 <__assert_fail@plt+0xdb8>
   11f8c:	cmp	r6, r1
   11f90:	bne	11fd4 <__assert_fail@plt+0xd8c>
   11f94:	movw	r0, #29056	; 0x7180
   11f98:	ldr	r1, [sp, #24]
   11f9c:	movt	r0, #2
   11fa0:	ldr	r0, [r0]
   11fa4:	adds	r1, r1, #1
   11fa8:	adc	r5, r5, #0
   11fac:	ldrd	r2, [r0, #8]
   11fb0:	str	r1, [sp, #24]
   11fb4:	subs	r1, r2, r1
   11fb8:	sbcs	r1, r3, r5
   11fbc:	bcs	11c68 <__assert_fail@plt+0xa20>
   11fc0:	movw	r1, #29056	; 0x7180
   11fc4:	add	r0, r0, #16
   11fc8:	movt	r1, #2
   11fcc:	str	r0, [r1]
   11fd0:	b	11c68 <__assert_fail@plt+0xa20>
   11fd4:	ldrb	r0, [r9]
   11fd8:	add	r2, r6, #1
   11fdc:	clz	r2, r2
   11fe0:	lsr	r3, r2, #5
   11fe4:	cmp	r0, #0
   11fe8:	mov	r0, #10
   11fec:	movwne	r0, #0
   11ff0:	cmn	r6, #1
   11ff4:	cmpne	r6, r0
   11ff8:	bne	11c68 <__assert_fail@plt+0xa20>
   11ffc:	b	1203c <__assert_fail@plt+0xdf4>
   12000:	mov	r0, r4
   12004:	bl	1102c <getc_unlocked@plt>
   12008:	cmn	r0, #1
   1200c:	beq	12020 <__assert_fail@plt+0xdd8>
   12010:	mov	r1, r4
   12014:	bl	11128 <ungetc@plt>
   12018:	ldrb	r1, [r8]
   1201c:	b	11f8c <__assert_fail@plt+0xd44>
   12020:	ldrb	r0, [r9]
   12024:	ldrb	r1, [r8]
   12028:	mvn	r6, #0
   1202c:	mov	r3, #1
   12030:	cmp	r0, #0
   12034:	mov	r0, #10
   12038:	movwne	r0, #0
   1203c:	ldr	r2, [sp, #20]
   12040:	tst	r2, #1
   12044:	beq	1206c <__assert_fail@plt+0xe24>
   12048:	cmp	r7, r0
   1204c:	bne	1205c <__assert_fail@plt+0xe14>
   12050:	cmp	r6, r0
   12054:	cmpne	r0, r1
   12058:	bne	12090 <__assert_fail@plt+0xe48>
   1205c:	mov	r5, r3
   12060:	bl	11230 <putchar_unlocked@plt>
   12064:	mov	r3, r5
   12068:	b	12090 <__assert_fail@plt+0xe48>
   1206c:	ldr	r2, [sp, #24]
   12070:	eor	r2, r2, #1
   12074:	orrs	r2, r2, r5
   12078:	bne	12048 <__assert_fail@plt+0xe00>
   1207c:	movw	r2, #29040	; 0x7170
   12080:	movt	r2, #2
   12084:	ldrb	r2, [r2]
   12088:	cmp	r2, #0
   1208c:	beq	12048 <__assert_fail@plt+0xe00>
   12090:	movw	r1, #29056	; 0x7180
   12094:	cmp	r3, #0
   12098:	movt	r1, #2
   1209c:	bne	120f8 <__assert_fail@plt+0xeb0>
   120a0:	movw	r0, #29396	; 0x72d4
   120a4:	mov	r5, #0
   120a8:	movt	r0, #2
   120ac:	ldr	r0, [r0]
   120b0:	str	r0, [r1]
   120b4:	mov	r0, #1
   120b8:	str	r0, [sp, #24]
   120bc:	mov	r0, #0
   120c0:	str	r0, [sp, #20]
   120c4:	b	11c68 <__assert_fail@plt+0xa20>
   120c8:	ldr	r0, [sl]
   120cc:	bl	12b10 <__assert_fail@plt+0x18c8>
   120d0:	mov	r0, #0
   120d4:	str	r0, [sl]
   120d8:	mov	r0, r4
   120dc:	bl	11098 <ferror_unlocked@plt>
   120e0:	cmp	r0, #0
   120e4:	bne	120f8 <__assert_fail@plt+0xeb0>
   120e8:	mov	r0, r4
   120ec:	bl	11224 <feof_unlocked@plt>
   120f0:	cmp	r0, #0
   120f4:	beq	12120 <__assert_fail@plt+0xed8>
   120f8:	sub	sp, fp, #28
   120fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12100:	movw	r0, #25365	; 0x6315
   12104:	movw	r1, #25378	; 0x6322
   12108:	movw	r3, #25388	; 0x632c
   1210c:	movw	r2, #315	; 0x13b
   12110:	movt	r0, #1
   12114:	movt	r1, #1
   12118:	movt	r3, #1
   1211c:	bl	11248 <__assert_fail@plt>
   12120:	bl	15408 <__assert_fail@plt+0x41c0>
   12124:	push	{r4, r5, r6, r7, fp, lr}
   12128:	add	fp, sp, #16
   1212c:	mov	r5, r1
   12130:	movw	r1, #25804	; 0x64cc
   12134:	mov	r4, r0
   12138:	movt	r1, #1
   1213c:	bl	10fb4 <strcmp@plt>
   12140:	cmp	r0, #0
   12144:	beq	12170 <__assert_fail@plt+0xf28>
   12148:	movw	r1, #24577	; 0x6001
   1214c:	mov	r0, r4
   12150:	movt	r1, #1
   12154:	bl	111dc <fopen64@plt>
   12158:	mov	r6, r0
   1215c:	cmp	r0, #0
   12160:	bne	1218c <__assert_fail@plt+0xf44>
   12164:	bl	11134 <__errno_location@plt>
   12168:	ldr	r5, [r0]
   1216c:	b	121f8 <__assert_fail@plt+0xfb0>
   12170:	movw	r0, #29042	; 0x7172
   12174:	mov	r1, #1
   12178:	movt	r0, #2
   1217c:	strb	r1, [r0]
   12180:	movw	r0, #29024	; 0x7160
   12184:	movt	r0, #2
   12188:	ldr	r6, [r0]
   1218c:	mov	r0, r6
   12190:	mov	r1, #2
   12194:	bl	129dc <__assert_fail@plt+0x1794>
   12198:	mov	r0, r6
   1219c:	blx	r5
   121a0:	bl	11134 <__errno_location@plt>
   121a4:	ldr	r5, [r0]
   121a8:	mov	r7, r0
   121ac:	mov	r0, r6
   121b0:	bl	11098 <ferror_unlocked@plt>
   121b4:	movw	r1, #25804	; 0x64cc
   121b8:	cmp	r0, #0
   121bc:	movt	r1, #1
   121c0:	moveq	r5, r0
   121c4:	mov	r0, r4
   121c8:	bl	10fb4 <strcmp@plt>
   121cc:	cmp	r0, #0
   121d0:	beq	121e8 <__assert_fail@plt+0xfa0>
   121d4:	mov	r0, r6
   121d8:	bl	12a18 <__assert_fail@plt+0x17d0>
   121dc:	cmn	r0, #1
   121e0:	ldreq	r5, [r7]
   121e4:	b	121f0 <__assert_fail@plt+0xfa8>
   121e8:	mov	r0, r6
   121ec:	bl	111d0 <clearerr_unlocked@plt>
   121f0:	cmp	r5, #0
   121f4:	beq	12228 <__assert_fail@plt+0xfe0>
   121f8:	mov	r0, #0
   121fc:	mov	r1, #3
   12200:	mov	r2, r4
   12204:	mov	r6, #0
   12208:	bl	1483c <__assert_fail@plt+0x35f4>
   1220c:	movw	r2, #26062	; 0x65ce
   12210:	mov	r3, r0
   12214:	mov	r0, #0
   12218:	mov	r1, r5
   1221c:	movt	r2, #1
   12220:	bl	110b0 <error@plt>
   12224:	b	1222c <__assert_fail@plt+0xfe4>
   12228:	mov	r6, #1
   1222c:	mov	r0, r6
   12230:	pop	{r4, r5, r6, r7, fp, pc}
   12234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12238:	add	fp, sp, #28
   1223c:	sub	sp, sp, #20
   12240:	mov	r9, r0
   12244:	ands	r0, r1, #1
   12248:	mov	ip, #0
   1224c:	str	r1, [sp]
   12250:	str	r0, [sp, #4]
   12254:	beq	12288 <__assert_fail@plt+0x1040>
   12258:	movw	r1, #25804	; 0x64cc
   1225c:	mov	r0, r9
   12260:	movt	r1, #1
   12264:	bl	10fb4 <strcmp@plt>
   12268:	cmp	r0, #0
   1226c:	clz	r0, r0
   12270:	mov	ip, #0
   12274:	mov	r3, #0
   12278:	lsr	r6, r0, #5
   1227c:	addeq	r9, r9, #1
   12280:	mov	sl, r6
   12284:	b	12294 <__assert_fail@plt+0x104c>
   12288:	mov	r6, #0
   1228c:	mov	r3, #0
   12290:	mov	sl, #0
   12294:	mov	r0, #1
   12298:	mov	r7, sl
   1229c:	mov	r1, #0
   122a0:	str	r0, [sp, #16]
   122a4:	mov	r0, #0
   122a8:	str	r0, [sp, #12]
   122ac:	ldrb	r4, [r9]
   122b0:	cmp	r4, #44	; 0x2c
   122b4:	beq	12400 <__assert_fail@plt+0x11b8>
   122b8:	cmp	r4, #45	; 0x2d
   122bc:	bne	12300 <__assert_fail@plt+0x10b8>
   122c0:	tst	r7, #1
   122c4:	bne	12774 <__assert_fail@plt+0x152c>
   122c8:	orrs	r0, r6, r3
   122cc:	eoreq	r0, sl, #1
   122d0:	tsteq	r0, #1
   122d4:	beq	126ec <__assert_fail@plt+0x14a4>
   122d8:	ands	r0, sl, #1
   122dc:	mov	r7, #1
   122e0:	mov	r1, #0
   122e4:	moveq	r6, r7
   122e8:	movne	r0, r3
   122ec:	mov	r3, #0
   122f0:	str	r6, [sp, #16]
   122f4:	mov	r6, #0
   122f8:	str	r0, [sp, #12]
   122fc:	b	124c4 <__assert_fail@plt+0x127c>
   12300:	mov	r8, r9
   12304:	mov	r5, ip
   12308:	mov	r9, r1
   1230c:	str	r3, [sp, #8]
   12310:	bl	110f8 <__ctype_b_loc@plt>
   12314:	ldr	r3, [sp, #8]
   12318:	mov	r2, r9
   1231c:	mov	r9, r8
   12320:	mov	ip, r5
   12324:	cmp	r4, #0
   12328:	beq	12400 <__assert_fail@plt+0x11b8>
   1232c:	ldr	r0, [r0]
   12330:	add	r0, r0, r4, lsl #1
   12334:	ldrh	r0, [r0]
   12338:	ands	r0, r0, #1
   1233c:	bne	12400 <__assert_fail@plt+0x11b8>
   12340:	sub	r0, r4, #48	; 0x30
   12344:	cmp	r0, #9
   12348:	bhi	127a0 <__assert_fail@plt+0x1558>
   1234c:	movw	r1, #29068	; 0x718c
   12350:	movt	r1, #2
   12354:	ldr	r4, [r1]
   12358:	cmp	r4, #0
   1235c:	mov	r1, r4
   12360:	movwne	r1, #1
   12364:	tst	r2, r1
   12368:	movweq	r1, #29068	; 0x718c
   1236c:	moveq	r4, r9
   12370:	movteq	r1, #2
   12374:	streq	r9, [r1]
   12378:	movw	r1, #39321	; 0x9999
   1237c:	movt	r1, #39321	; 0x9999
   12380:	subs	r1, r1, r6
   12384:	movw	r1, #39321	; 0x9999
   12388:	movt	r1, #6553	; 0x1999
   1238c:	sbcs	r1, r1, r3
   12390:	bcc	12700 <__assert_fail@plt+0x14b8>
   12394:	ldr	r3, [sp, #8]
   12398:	mov	r1, #10
   1239c:	umull	r1, r2, r6, r1
   123a0:	add	r3, r3, r3, lsl #2
   123a4:	adds	r1, r1, r0
   123a8:	add	r2, r2, r3, lsl #1
   123ac:	ldr	r3, [sp, #8]
   123b0:	adc	r0, r2, r0, asr #31
   123b4:	subs	r2, r1, r6
   123b8:	sbcs	r2, r0, r3
   123bc:	mov	r2, #0
   123c0:	movwcc	r2, #1
   123c4:	cmp	r2, #0
   123c8:	moveq	r3, r0
   123cc:	moveq	r6, r1
   123d0:	cmp	r2, #0
   123d4:	bne	12700 <__assert_fail@plt+0x14b8>
   123d8:	mvn	r1, #0
   123dc:	eor	r0, r6, r1
   123e0:	eor	r1, r3, r1
   123e4:	orrs	r0, r0, r1
   123e8:	beq	12700 <__assert_fail@plt+0x14b8>
   123ec:	eor	r0, r7, #1
   123f0:	orr	ip, ip, r7
   123f4:	mov	r1, #1
   123f8:	orr	sl, sl, r0
   123fc:	b	124c4 <__assert_fail@plt+0x127c>
   12400:	tst	r7, #1
   12404:	beq	12464 <__assert_fail@plt+0x121c>
   12408:	orr	r0, sl, ip
   1240c:	ldr	r8, [sp, #16]
   12410:	ldr	sl, [sp, #12]
   12414:	ldr	r1, [sp, #4]
   12418:	mov	r5, #1
   1241c:	ands	r4, r0, #1
   12420:	movne	r5, r8
   12424:	movne	r4, sl
   12428:	cmp	r1, #0
   1242c:	tsteq	r0, #1
   12430:	beq	12794 <__assert_fail@plt+0x154c>
   12434:	tst	ip, #1
   12438:	beq	12484 <__assert_fail@plt+0x123c>
   1243c:	subs	r0, r6, r5
   12440:	sbcs	r0, r3, r4
   12444:	bcc	127ec <__assert_fail@plt+0x15a4>
   12448:	mov	r0, r5
   1244c:	mov	r1, r4
   12450:	mov	r2, r6
   12454:	bl	1282c <__assert_fail@plt+0x15e4>
   12458:	mov	r5, r8
   1245c:	mov	r4, sl
   12460:	b	12498 <__assert_fail@plt+0x1250>
   12464:	ldr	r5, [sp, #16]
   12468:	ldr	r4, [sp, #12]
   1246c:	orrs	r0, r6, r3
   12470:	beq	126ec <__assert_fail@plt+0x14a4>
   12474:	mov	r0, r6
   12478:	mov	r1, r3
   1247c:	mov	r2, r6
   12480:	b	12494 <__assert_fail@plt+0x124c>
   12484:	mov	r0, r5
   12488:	mov	r1, r4
   1248c:	mvn	r2, #0
   12490:	mvn	r3, #0
   12494:	bl	1282c <__assert_fail@plt+0x15e4>
   12498:	ldrb	r0, [r9]
   1249c:	cmp	r0, #0
   124a0:	beq	124cc <__assert_fail@plt+0x1284>
   124a4:	mov	r6, #0
   124a8:	mov	r3, #0
   124ac:	mov	sl, #0
   124b0:	mov	ip, #0
   124b4:	mov	r7, #0
   124b8:	mov	r1, #0
   124bc:	str	r5, [sp, #16]
   124c0:	str	r4, [sp, #12]
   124c4:	add	r9, r9, #1
   124c8:	b	122ac <__assert_fail@plt+0x1064>
   124cc:	movw	r7, #29400	; 0x72d8
   124d0:	movt	r7, #2
   124d4:	ldr	r1, [r7]
   124d8:	cmp	r1, #0
   124dc:	beq	12818 <__assert_fail@plt+0x15d0>
   124e0:	movw	r0, #29396	; 0x72d4
   124e4:	movw	r3, #10420	; 0x28b4
   124e8:	mov	r2, #16
   124ec:	movt	r0, #2
   124f0:	movt	r3, #1
   124f4:	ldr	r0, [r0]
   124f8:	bl	111e8 <qsort@plt>
   124fc:	ldr	sl, [r7]
   12500:	cmp	sl, #0
   12504:	beq	125c0 <__assert_fail@plt+0x1378>
   12508:	mov	r9, #0
   1250c:	mov	r8, r9
   12510:	add	r9, r9, #1
   12514:	cmp	r9, sl
   12518:	bcs	125b4 <__assert_fail@plt+0x136c>
   1251c:	mvn	r0, #-268435455	; 0xf0000001
   12520:	sub	r0, r0, r8
   12524:	str	r0, [sp, #16]
   12528:	movw	r0, #29396	; 0x72d4
   1252c:	movt	r0, #2
   12530:	ldr	r5, [r0]
   12534:	add	r1, r5, r8, lsl #4
   12538:	mov	r0, r5
   1253c:	ldr	r6, [r0, r9, lsl #4]!
   12540:	ldr	r2, [r1, #8]!
   12544:	ldr	r3, [r1, #4]
   12548:	ldr	r0, [r0, #4]
   1254c:	subs	r6, r2, r6
   12550:	sbcs	r0, r3, r0
   12554:	bcc	125b4 <__assert_fail@plt+0x136c>
   12558:	add	r0, r5, r9, lsl #4
   1255c:	mov	r4, r7
   12560:	ldr	r6, [r0, #8]
   12564:	ldr	r5, [r0, #12]
   12568:	subs	r7, r2, r6
   1256c:	sbcs	r7, r3, r5
   12570:	mov	r7, #0
   12574:	movwcc	r7, #1
   12578:	cmp	r7, #0
   1257c:	mov	r7, r4
   12580:	movne	r3, r5
   12584:	movne	r2, r6
   12588:	strd	r2, [r1]
   1258c:	add	r1, r0, #16
   12590:	ldr	r2, [sp, #16]
   12594:	add	r2, r2, sl
   12598:	lsl	r2, r2, #4
   1259c:	bl	10fd8 <memmove@plt>
   125a0:	ldr	r0, [r4]
   125a4:	sub	sl, r0, #1
   125a8:	cmp	r9, sl
   125ac:	str	sl, [r4]
   125b0:	bcc	12528 <__assert_fail@plt+0x12e0>
   125b4:	cmp	r9, sl
   125b8:	bcc	1250c <__assert_fail@plt+0x12c4>
   125bc:	b	125c4 <__assert_fail@plt+0x137c>
   125c0:	mov	sl, #0
   125c4:	ldr	r0, [sp]
   125c8:	tst	r0, #2
   125cc:	beq	126a4 <__assert_fail@plt+0x145c>
   125d0:	movw	r1, #29072	; 0x7190
   125d4:	mov	r0, #0
   125d8:	mov	r9, r7
   125dc:	movt	r1, #2
   125e0:	str	r0, [r7]
   125e4:	str	r0, [r1]
   125e8:	movw	r1, #29396	; 0x72d4
   125ec:	movt	r1, #2
   125f0:	ldr	r8, [r1]
   125f4:	str	r0, [r1]
   125f8:	ldrd	r0, [r8]
   125fc:	subs	r2, r0, #2
   12600:	sbcs	r2, r1, #0
   12604:	bcc	1261c <__assert_fail@plt+0x13d4>
   12608:	subs	r2, r0, #1
   1260c:	mov	r0, #1
   12610:	sbc	r3, r1, #0
   12614:	mov	r1, #0
   12618:	bl	1282c <__assert_fail@plt+0x15e4>
   1261c:	cmp	sl, #2
   12620:	bcc	12664 <__assert_fail@plt+0x141c>
   12624:	add	r5, r8, #16
   12628:	sub	r6, sl, #1
   1262c:	sub	r3, r5, #8
   12630:	ldm	r3, {r0, r1, r2, r3}
   12634:	adds	r0, r0, #1
   12638:	adc	r1, r1, #0
   1263c:	eor	r7, r0, r2
   12640:	eor	r4, r1, r3
   12644:	orrs	r7, r7, r4
   12648:	beq	12658 <__assert_fail@plt+0x1410>
   1264c:	subs	r2, r2, #1
   12650:	sbc	r3, r3, #0
   12654:	bl	1282c <__assert_fail@plt+0x15e4>
   12658:	add	r5, r5, #16
   1265c:	subs	r6, r6, #1
   12660:	bne	1262c <__assert_fail@plt+0x13e4>
   12664:	add	r0, r8, sl, lsl #4
   12668:	mvn	r3, #0
   1266c:	ldrd	r0, [r0, #-8]
   12670:	eor	r2, r1, r3
   12674:	eor	r3, r0, r3
   12678:	orrs	r2, r3, r2
   1267c:	beq	12694 <__assert_fail@plt+0x144c>
   12680:	adds	r0, r0, #1
   12684:	mvn	r2, #0
   12688:	mvn	r3, #0
   1268c:	adc	r1, r1, #0
   12690:	bl	1282c <__assert_fail@plt+0x15e4>
   12694:	mov	r0, r8
   12698:	bl	12b10 <__assert_fail@plt+0x18c8>
   1269c:	ldr	sl, [r9]
   126a0:	mov	r7, r9
   126a4:	movw	r0, #29396	; 0x72d4
   126a8:	add	r1, sl, #1
   126ac:	movt	r0, #2
   126b0:	str	r1, [r7]
   126b4:	lsl	r1, r1, #4
   126b8:	mov	r4, r0
   126bc:	ldr	r0, [r0]
   126c0:	bl	15024 <__assert_fail@plt+0x3ddc>
   126c4:	ldr	r1, [r7]
   126c8:	str	r0, [r4]
   126cc:	add	r0, r0, r1, lsl #4
   126d0:	mvn	r1, #0
   126d4:	str	r1, [r0, #-16]
   126d8:	str	r1, [r0, #-12]
   126dc:	str	r1, [r0, #-8]
   126e0:	str	r1, [r0, #-4]
   126e4:	sub	sp, fp, #28
   126e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126ec:	movw	r0, #25745	; 0x6491
   126f0:	movw	r1, #25700	; 0x6464
   126f4:	movt	r0, #1
   126f8:	movt	r1, #1
   126fc:	b	12784 <__assert_fail@plt+0x153c>
   12700:	movw	r1, #25831	; 0x64e7
   12704:	mov	r0, r4
   12708:	movt	r1, #1
   1270c:	bl	1123c <strspn@plt>
   12710:	mov	r1, r0
   12714:	mov	r0, r4
   12718:	bl	15394 <__assert_fail@plt+0x414c>
   1271c:	ldr	r2, [sp]
   12720:	mov	r4, r0
   12724:	movw	r0, #25880	; 0x6518
   12728:	movw	r1, #25842	; 0x64f2
   1272c:	movt	r0, #1
   12730:	movt	r1, #1
   12734:	tst	r2, #4
   12738:	mov	r2, #5
   1273c:	moveq	r1, r0
   12740:	mov	r0, #0
   12744:	bl	11038 <dcgettext@plt>
   12748:	mov	r5, r0
   1274c:	mov	r0, r4
   12750:	bl	149d0 <__assert_fail@plt+0x3788>
   12754:	mov	r3, r0
   12758:	mov	r0, #0
   1275c:	mov	r1, #0
   12760:	mov	r2, r5
   12764:	bl	110b0 <error@plt>
   12768:	mov	r0, r4
   1276c:	bl	12b10 <__assert_fail@plt+0x18c8>
   12770:	b	12810 <__assert_fail@plt+0x15c8>
   12774:	movw	r0, #25680	; 0x6450
   12778:	movw	r1, #25648	; 0x6430
   1277c:	movt	r0, #1
   12780:	movt	r1, #1
   12784:	ldr	r2, [sp]
   12788:	tst	r2, #4
   1278c:	moveq	r1, r0
   12790:	b	127f4 <__assert_fail@plt+0x15ac>
   12794:	movw	r1, #25772	; 0x64ac
   12798:	movt	r1, #1
   1279c:	b	127f4 <__assert_fail@plt+0x15ac>
   127a0:	ldr	r2, [sp]
   127a4:	movw	r0, #25944	; 0x6558
   127a8:	movw	r1, #25909	; 0x6535
   127ac:	movt	r0, #1
   127b0:	movt	r1, #1
   127b4:	tst	r2, #4
   127b8:	mov	r2, #5
   127bc:	moveq	r1, r0
   127c0:	mov	r0, #0
   127c4:	bl	11038 <dcgettext@plt>
   127c8:	mov	r4, r0
   127cc:	mov	r0, r9
   127d0:	bl	149d0 <__assert_fail@plt+0x3788>
   127d4:	mov	r3, r0
   127d8:	mov	r0, #0
   127dc:	mov	r1, #0
   127e0:	mov	r2, r4
   127e4:	bl	110b0 <error@plt>
   127e8:	b	12810 <__assert_fail@plt+0x15c8>
   127ec:	movw	r1, #25806	; 0x64ce
   127f0:	movt	r1, #1
   127f4:	mov	r0, #0
   127f8:	mov	r2, #5
   127fc:	bl	11038 <dcgettext@plt>
   12800:	mov	r2, r0
   12804:	mov	r0, #0
   12808:	mov	r1, #0
   1280c:	bl	110b0 <error@plt>
   12810:	mov	r0, #1
   12814:	bl	11344 <__assert_fail@plt+0xfc>
   12818:	movw	r0, #26008	; 0x6598
   1281c:	movw	r1, #25967	; 0x656f
   12820:	movt	r0, #1
   12824:	movt	r1, #1
   12828:	b	12784 <__assert_fail@plt+0x153c>
   1282c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12830:	add	fp, sp, #24
   12834:	movw	r8, #29400	; 0x72d8
   12838:	mov	r7, r0
   1283c:	movw	r0, #29072	; 0x7190
   12840:	mov	r6, r1
   12844:	mov	r4, r3
   12848:	mov	r5, r2
   1284c:	movt	r0, #2
   12850:	movt	r8, #2
   12854:	ldr	r1, [r8]
   12858:	ldr	r0, [r0]
   1285c:	cmp	r1, r0
   12860:	bne	1288c <__assert_fail@plt+0x1644>
   12864:	movw	r9, #29396	; 0x72d4
   12868:	movw	r1, #29072	; 0x7190
   1286c:	mov	r2, #16
   12870:	movt	r9, #2
   12874:	movt	r1, #2
   12878:	ldr	r0, [r9]
   1287c:	bl	150e8 <__assert_fail@plt+0x3ea0>
   12880:	ldr	r1, [r8]
   12884:	str	r0, [r9]
   12888:	b	12898 <__assert_fail@plt+0x1650>
   1288c:	movw	r0, #29396	; 0x72d4
   12890:	movt	r0, #2
   12894:	ldr	r0, [r0]
   12898:	str	r7, [r0, r1, lsl #4]!
   1289c:	str	r6, [r0, #4]
   128a0:	str	r5, [r0, #8]
   128a4:	str	r4, [r0, #12]
   128a8:	add	r0, r1, #1
   128ac:	str	r0, [r8]
   128b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   128b4:	ldr	r2, [r0]
   128b8:	ldr	r1, [r1]
   128bc:	mov	r0, #0
   128c0:	cmp	r2, r1
   128c4:	movwgt	r0, #1
   128c8:	mvnlt	r0, #0
   128cc:	bx	lr
   128d0:	movw	r1, #29076	; 0x7194
   128d4:	movt	r1, #2
   128d8:	str	r0, [r1]
   128dc:	bx	lr
   128e0:	movw	r1, #29080	; 0x7198
   128e4:	movt	r1, #2
   128e8:	strb	r0, [r1]
   128ec:	bx	lr
   128f0:	push	{r4, r5, r6, sl, fp, lr}
   128f4:	add	fp, sp, #16
   128f8:	sub	sp, sp, #8
   128fc:	movw	r0, #29028	; 0x7164
   12900:	movt	r0, #2
   12904:	ldr	r0, [r0]
   12908:	bl	15520 <__assert_fail@plt+0x42d8>
   1290c:	cmp	r0, #0
   12910:	beq	12938 <__assert_fail@plt+0x16f0>
   12914:	movw	r0, #29080	; 0x7198
   12918:	movt	r0, #2
   1291c:	ldrb	r0, [r0]
   12920:	cmp	r0, #0
   12924:	beq	12958 <__assert_fail@plt+0x1710>
   12928:	bl	11134 <__errno_location@plt>
   1292c:	ldr	r0, [r0]
   12930:	cmp	r0, #32
   12934:	bne	12958 <__assert_fail@plt+0x1710>
   12938:	movw	r0, #29016	; 0x7158
   1293c:	movt	r0, #2
   12940:	ldr	r0, [r0]
   12944:	bl	15520 <__assert_fail@plt+0x42d8>
   12948:	cmp	r0, #0
   1294c:	subeq	sp, fp, #16
   12950:	popeq	{r4, r5, r6, sl, fp, pc}
   12954:	b	129c8 <__assert_fail@plt+0x1780>
   12958:	movw	r1, #26046	; 0x65be
   1295c:	mov	r0, #0
   12960:	mov	r2, #5
   12964:	movt	r1, #1
   12968:	bl	11038 <dcgettext@plt>
   1296c:	mov	r4, r0
   12970:	movw	r0, #29076	; 0x7194
   12974:	movt	r0, #2
   12978:	ldr	r6, [r0]
   1297c:	bl	11134 <__errno_location@plt>
   12980:	ldr	r5, [r0]
   12984:	cmp	r6, #0
   12988:	bne	129a4 <__assert_fail@plt+0x175c>
   1298c:	movw	r2, #26062	; 0x65ce
   12990:	mov	r0, #0
   12994:	mov	r1, r5
   12998:	mov	r3, r4
   1299c:	movt	r2, #1
   129a0:	b	129c4 <__assert_fail@plt+0x177c>
   129a4:	mov	r0, r6
   129a8:	bl	14790 <__assert_fail@plt+0x3548>
   129ac:	movw	r2, #26058	; 0x65ca
   129b0:	mov	r3, r0
   129b4:	str	r4, [sp]
   129b8:	mov	r0, #0
   129bc:	mov	r1, r5
   129c0:	movt	r2, #1
   129c4:	bl	110b0 <error@plt>
   129c8:	movw	r0, #28932	; 0x7104
   129cc:	movt	r0, #2
   129d0:	ldr	r0, [r0]
   129d4:	bl	10ffc <_exit@plt>
   129d8:	b	10fc0 <posix_fadvise64@plt>
   129dc:	cmp	r0, #0
   129e0:	bxeq	lr
   129e4:	push	{r4, sl, fp, lr}
   129e8:	add	fp, sp, #8
   129ec:	sub	sp, sp, #16
   129f0:	mov	r4, r1
   129f4:	bl	11170 <fileno@plt>
   129f8:	mov	r1, #0
   129fc:	mov	r2, #0
   12a00:	mov	r3, #0
   12a04:	str	r1, [sp]
   12a08:	stmib	sp, {r1, r4}
   12a0c:	bl	10fc0 <posix_fadvise64@plt>
   12a10:	sub	sp, fp, #8
   12a14:	pop	{r4, sl, fp, pc}
   12a18:	push	{r4, r5, r6, sl, fp, lr}
   12a1c:	add	fp, sp, #16
   12a20:	sub	sp, sp, #8
   12a24:	mov	r4, r0
   12a28:	bl	11170 <fileno@plt>
   12a2c:	cmn	r0, #1
   12a30:	ble	12aa4 <__assert_fail@plt+0x185c>
   12a34:	mov	r0, r4
   12a38:	bl	110d4 <__freading@plt>
   12a3c:	cmp	r0, #0
   12a40:	beq	12a6c <__assert_fail@plt+0x1824>
   12a44:	mov	r0, r4
   12a48:	bl	11170 <fileno@plt>
   12a4c:	mov	r1, #1
   12a50:	mov	r2, #0
   12a54:	mov	r3, #0
   12a58:	str	r1, [sp]
   12a5c:	bl	11068 <lseek64@plt>
   12a60:	and	r0, r0, r1
   12a64:	cmn	r0, #1
   12a68:	beq	12aa4 <__assert_fail@plt+0x185c>
   12a6c:	mov	r0, r4
   12a70:	bl	12ab4 <__assert_fail@plt+0x186c>
   12a74:	cmp	r0, #0
   12a78:	beq	12aa4 <__assert_fail@plt+0x185c>
   12a7c:	bl	11134 <__errno_location@plt>
   12a80:	ldr	r6, [r0]
   12a84:	mov	r5, r0
   12a88:	mov	r0, r4
   12a8c:	bl	11194 <fclose@plt>
   12a90:	cmp	r6, #0
   12a94:	strne	r6, [r5]
   12a98:	mvnne	r0, #0
   12a9c:	sub	sp, fp, #16
   12aa0:	pop	{r4, r5, r6, sl, fp, pc}
   12aa4:	mov	r0, r4
   12aa8:	sub	sp, fp, #16
   12aac:	pop	{r4, r5, r6, sl, fp, lr}
   12ab0:	b	11194 <fclose@plt>
   12ab4:	push	{r4, sl, fp, lr}
   12ab8:	add	fp, sp, #8
   12abc:	sub	sp, sp, #8
   12ac0:	mov	r4, r0
   12ac4:	cmp	r0, #0
   12ac8:	beq	12b00 <__assert_fail@plt+0x18b8>
   12acc:	mov	r0, r4
   12ad0:	bl	110d4 <__freading@plt>
   12ad4:	cmp	r0, #0
   12ad8:	beq	12b00 <__assert_fail@plt+0x18b8>
   12adc:	ldrb	r0, [r4, #1]
   12ae0:	tst	r0, #1
   12ae4:	beq	12b00 <__assert_fail@plt+0x18b8>
   12ae8:	mov	r0, #1
   12aec:	mov	r2, #0
   12af0:	mov	r3, #0
   12af4:	str	r0, [sp]
   12af8:	mov	r0, r4
   12afc:	bl	12b38 <__assert_fail@plt+0x18f0>
   12b00:	mov	r0, r4
   12b04:	sub	sp, fp, #8
   12b08:	pop	{r4, sl, fp, lr}
   12b0c:	b	10fcc <fflush@plt>
   12b10:	push	{r4, r5, r6, sl, fp, lr}
   12b14:	add	fp, sp, #16
   12b18:	mov	r4, r0
   12b1c:	bl	11134 <__errno_location@plt>
   12b20:	ldr	r6, [r0]
   12b24:	mov	r5, r0
   12b28:	mov	r0, r4
   12b2c:	bl	10fe4 <free@plt>
   12b30:	str	r6, [r5]
   12b34:	pop	{r4, r5, r6, sl, fp, pc}
   12b38:	push	{r4, r5, r6, r7, fp, lr}
   12b3c:	add	fp, sp, #16
   12b40:	sub	sp, sp, #8
   12b44:	mov	r4, r0
   12b48:	ldr	r0, [r0, #4]
   12b4c:	mov	r5, r3
   12b50:	mov	r6, r2
   12b54:	ldr	r1, [r4, #8]
   12b58:	cmp	r1, r0
   12b5c:	bne	12b78 <__assert_fail@plt+0x1930>
   12b60:	ldrd	r0, [r4, #16]
   12b64:	cmp	r1, r0
   12b68:	bne	12b78 <__assert_fail@plt+0x1930>
   12b6c:	ldr	r0, [r4, #36]	; 0x24
   12b70:	cmp	r0, #0
   12b74:	beq	12b90 <__assert_fail@plt+0x1948>
   12b78:	mov	r0, r4
   12b7c:	mov	r2, r6
   12b80:	mov	r3, r5
   12b84:	sub	sp, fp, #16
   12b88:	pop	{r4, r5, r6, r7, fp, lr}
   12b8c:	b	111a0 <fseeko64@plt>
   12b90:	ldr	r7, [fp, #8]
   12b94:	mov	r0, r4
   12b98:	bl	11170 <fileno@plt>
   12b9c:	mov	r2, r6
   12ba0:	mov	r3, r5
   12ba4:	str	r7, [sp]
   12ba8:	bl	11068 <lseek64@plt>
   12bac:	and	r2, r0, r1
   12bb0:	cmn	r2, #1
   12bb4:	beq	12bd0 <__assert_fail@plt+0x1988>
   12bb8:	strd	r0, [r4, #80]	; 0x50
   12bbc:	ldr	r0, [r4]
   12bc0:	bic	r0, r0, #16
   12bc4:	str	r0, [r4]
   12bc8:	mov	r0, #0
   12bcc:	b	12bd4 <__assert_fail@plt+0x198c>
   12bd0:	mvn	r0, #0
   12bd4:	sub	sp, fp, #16
   12bd8:	pop	{r4, r5, r6, r7, fp, pc}
   12bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12be0:	add	fp, sp, #28
   12be4:	sub	sp, sp, #44	; 0x2c
   12be8:	ldr	r5, [r0]
   12bec:	mov	r4, r3
   12bf0:	mov	r8, r2
   12bf4:	mov	sl, r1
   12bf8:	mov	r6, r0
   12bfc:	cmp	r5, #0
   12c00:	beq	12c0c <__assert_fail@plt+0x19c4>
   12c04:	ldr	r7, [sl]
   12c08:	b	12c2c <__assert_fail@plt+0x19e4>
   12c0c:	cmp	r4, #64	; 0x40
   12c10:	mov	r7, r4
   12c14:	movcs	r7, #64	; 0x40
   12c18:	mov	r0, r7
   12c1c:	bl	154a0 <__assert_fail@plt+0x4258>
   12c20:	mov	r5, r0
   12c24:	cmp	r0, #0
   12c28:	beq	12ed4 <__assert_fail@plt+0x1c8c>
   12c2c:	cmp	r7, r8
   12c30:	bcc	12ecc <__assert_fail@plt+0x1c84>
   12c34:	str	r5, [sp, #24]
   12c38:	sub	r5, r7, r8
   12c3c:	cmp	r7, r4
   12c40:	str	r4, [sp, #28]
   12c44:	str	r7, [sp, #36]	; 0x24
   12c48:	bcc	12c60 <__assert_fail@plt+0x1a18>
   12c4c:	cmp	r5, #0
   12c50:	bne	12c60 <__assert_fail@plt+0x1a18>
   12c54:	ldr	r5, [sp, #24]
   12c58:	ldr	r7, [sp, #36]	; 0x24
   12c5c:	b	12ecc <__assert_fail@plt+0x1c84>
   12c60:	ldr	r0, [fp, #12]
   12c64:	ldr	r1, [fp, #8]
   12c68:	stm	sp, {r6, sl}
   12c6c:	ldr	r6, [fp, #16]
   12c70:	sub	r7, fp, #32
   12c74:	str	r8, [sp, #16]
   12c78:	cmn	r0, #1
   12c7c:	mov	r2, r0
   12c80:	moveq	r2, r1
   12c84:	cmn	r1, #1
   12c88:	moveq	r2, r0
   12c8c:	moveq	r1, r0
   12c90:	eor	r0, r8, #-2147483648	; 0x80000000
   12c94:	str	r2, [sp, #20]
   12c98:	ldr	r2, [sp, #24]
   12c9c:	str	r0, [sp, #8]
   12ca0:	add	r4, r2, r8
   12ca4:	mov	sl, r1
   12ca8:	mov	r0, r6
   12cac:	mov	r1, r7
   12cb0:	bl	155a0 <__assert_fail@plt+0x4358>
   12cb4:	mov	r9, r0
   12cb8:	cmp	r0, #0
   12cbc:	beq	12d08 <__assert_fail@plt+0x1ac0>
   12cc0:	ldr	r8, [fp, #-32]	; 0xffffffe0
   12cc4:	mov	r0, #0
   12cc8:	mov	r1, sl
   12ccc:	cmn	sl, #1
   12cd0:	str	r0, [sp, #32]
   12cd4:	beq	12d58 <__assert_fail@plt+0x1b10>
   12cd8:	ldr	r2, [sp, #20]
   12cdc:	mov	r0, r9
   12ce0:	mov	r3, r8
   12ce4:	bl	12ee8 <__assert_fail@plt+0x1ca0>
   12ce8:	cmp	r0, #0
   12cec:	mov	r1, sl
   12cf0:	subne	r0, r0, r9
   12cf4:	addne	r8, r0, #1
   12cf8:	movne	r0, #1
   12cfc:	strne	r8, [fp, #-32]	; 0xffffffe0
   12d00:	strne	r0, [sp, #32]
   12d04:	b	12d58 <__assert_fail@plt+0x1b10>
   12d08:	mov	r0, r6
   12d0c:	bl	1102c <getc_unlocked@plt>
   12d10:	cmn	r0, #1
   12d14:	beq	12eb4 <__assert_fail@plt+0x1c6c>
   12d18:	mov	r1, r0
   12d1c:	ldr	r0, [sp, #20]
   12d20:	mov	r8, #1
   12d24:	mov	r3, r1
   12d28:	str	r8, [fp, #-32]	; 0xffffffe0
   12d2c:	mov	r2, r3
   12d30:	sub	r2, r3, sl
   12d34:	str	r3, [sp, #12]
   12d38:	clz	r2, r2
   12d3c:	sub	r0, r1, r0
   12d40:	lsr	r2, r2, #5
   12d44:	mov	r1, sl
   12d48:	clz	r0, r0
   12d4c:	lsr	r0, r0, #5
   12d50:	orr	r0, r2, r0
   12d54:	str	r0, [sp, #32]
   12d58:	ldr	r0, [sp, #28]
   12d5c:	ldr	r2, [sp, #36]	; 0x24
   12d60:	cmp	r2, r0
   12d64:	addcc	r0, r8, #1
   12d68:	cmpcc	r5, r0
   12d6c:	bcs	12dfc <__assert_fail@plt+0x1bb4>
   12d70:	mov	r8, r7
   12d74:	ldr	r7, [sp, #36]	; 0x24
   12d78:	ldr	r5, [sp, #24]
   12d7c:	cmp	r7, #64	; 0x40
   12d80:	lsl	r1, r7, #1
   12d84:	sub	r4, r4, r5
   12d88:	addcc	r1, r7, #64	; 0x40
   12d8c:	sub	r2, r1, r4
   12d90:	cmp	r2, r0
   12d94:	addcc	r1, r0, r4
   12d98:	ldr	r0, [sp, #28]
   12d9c:	mov	r6, r1
   12da0:	cmp	r1, r0
   12da4:	movhi	r6, r0
   12da8:	cmp	r7, r1
   12dac:	movcs	r6, r0
   12db0:	ldr	r0, [sp, #16]
   12db4:	sub	r0, r6, r0
   12db8:	cmn	r0, #1
   12dbc:	bgt	12dcc <__assert_fail@plt+0x1b84>
   12dc0:	ldr	r6, [sp, #8]
   12dc4:	cmp	r7, r6
   12dc8:	beq	12ee0 <__assert_fail@plt+0x1c98>
   12dcc:	mov	r0, r5
   12dd0:	mov	r1, r6
   12dd4:	bl	154d0 <__assert_fail@plt+0x4288>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12ec8 <__assert_fail@plt+0x1c80>
   12de0:	sub	r5, r6, r4
   12de4:	str	r6, [sp, #36]	; 0x24
   12de8:	ldr	r6, [fp, #16]
   12dec:	add	r4, r0, r4
   12df0:	mov	r1, sl
   12df4:	mov	r7, r8
   12df8:	str	r0, [sp, #24]
   12dfc:	cmp	r5, #2
   12e00:	bcc	12e48 <__assert_fail@plt+0x1c00>
   12e04:	ldr	r0, [fp, #-32]	; 0xffffffe0
   12e08:	sub	r6, r5, #1
   12e0c:	cmp	r0, r6
   12e10:	movcc	r6, r0
   12e14:	cmp	r9, #0
   12e18:	beq	12e34 <__assert_fail@plt+0x1bec>
   12e1c:	mov	r0, r4
   12e20:	mov	r1, r9
   12e24:	mov	r2, r6
   12e28:	bl	11008 <memcpy@plt>
   12e2c:	mov	r1, sl
   12e30:	b	12e3c <__assert_fail@plt+0x1bf4>
   12e34:	ldr	r0, [sp, #12]
   12e38:	strb	r0, [r4]
   12e3c:	sub	r5, r5, r6
   12e40:	add	r4, r4, r6
   12e44:	ldr	r6, [fp, #16]
   12e48:	cmp	r9, #0
   12e4c:	beq	12e68 <__assert_fail@plt+0x1c20>
   12e50:	ldr	r1, [fp, #-32]	; 0xffffffe0
   12e54:	mov	r0, r6
   12e58:	bl	155d4 <__assert_fail@plt+0x438c>
   12e5c:	mov	r1, sl
   12e60:	cmp	r0, #0
   12e64:	bne	12eac <__assert_fail@plt+0x1c64>
   12e68:	ldr	r0, [sp, #32]
   12e6c:	cmp	r0, #0
   12e70:	beq	12ca4 <__assert_fail@plt+0x1a5c>
   12e74:	ldr	r5, [sp, #24]
   12e78:	ldr	r0, [sp, #16]
   12e7c:	mov	r1, #0
   12e80:	add	r0, r5, r0
   12e84:	strb	r1, [r4], -r0
   12e88:	ldr	r0, [sp]
   12e8c:	ldr	r1, [sp, #36]	; 0x24
   12e90:	cmp	r4, #0
   12e94:	mvneq	r4, #0
   12e98:	str	r5, [r0]
   12e9c:	ldr	r0, [sp, #4]
   12ea0:	str	r1, [r0]
   12ea4:	mov	r0, r4
   12ea8:	b	12ed8 <__assert_fail@plt+0x1c90>
   12eac:	ldr	r5, [sp, #24]
   12eb0:	b	12ec4 <__assert_fail@plt+0x1c7c>
   12eb4:	ldr	r0, [sp, #24]
   12eb8:	cmp	r4, r0
   12ebc:	bne	12e74 <__assert_fail@plt+0x1c2c>
   12ec0:	mov	r5, r4
   12ec4:	ldr	r7, [sp, #36]	; 0x24
   12ec8:	ldm	sp, {r6, sl}
   12ecc:	str	r5, [r6]
   12ed0:	str	r7, [sl]
   12ed4:	mvn	r0, #0
   12ed8:	sub	sp, fp, #28
   12edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ee0:	ldr	r7, [sp, #8]
   12ee4:	b	12ec8 <__assert_fail@plt+0x1c80>
   12ee8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12eec:	add	fp, sp, #24
   12ef0:	uxtb	ip, r2
   12ef4:	uxtb	r1, r1
   12ef8:	cmp	r1, ip
   12efc:	bne	12f0c <__assert_fail@plt+0x1cc4>
   12f00:	mov	r2, r3
   12f04:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   12f08:	b	11188 <memchr@plt>
   12f0c:	cmp	r3, #0
   12f10:	beq	12f38 <__assert_fail@plt+0x1cf0>
   12f14:	ands	r2, r0, #3
   12f18:	beq	12f38 <__assert_fail@plt+0x1cf0>
   12f1c:	ldrb	r2, [r0]
   12f20:	cmp	r1, r2
   12f24:	cmpne	ip, r2
   12f28:	beq	12fe0 <__assert_fail@plt+0x1d98>
   12f2c:	subs	r3, r3, #1
   12f30:	add	r0, r0, #1
   12f34:	bne	12f14 <__assert_fail@plt+0x1ccc>
   12f38:	orr	r7, ip, ip, lsl #8
   12f3c:	movw	r6, #32896	; 0x8080
   12f40:	rsb	r2, r0, #0
   12f44:	movt	r6, #32896	; 0x8080
   12f48:	orr	r8, r7, r7, lsl #16
   12f4c:	orr	r7, r1, r1, lsl #8
   12f50:	orr	r9, r7, r7, lsl #16
   12f54:	movw	r7, #65279	; 0xfeff
   12f58:	movt	r7, #65278	; 0xfefe
   12f5c:	mov	lr, r3
   12f60:	mov	r4, r2
   12f64:	cmp	r3, #4
   12f68:	bcc	12fac <__assert_fail@plt+0x1d64>
   12f6c:	rsb	r2, r4, #0
   12f70:	add	r0, r0, #4
   12f74:	ldr	r2, [r2]
   12f78:	eor	r3, r2, r8
   12f7c:	eor	r2, r2, r9
   12f80:	eor	r5, r3, r6
   12f84:	add	r3, r3, r7
   12f88:	and	r3, r3, r5
   12f8c:	eor	r5, r2, r6
   12f90:	add	r2, r2, r7
   12f94:	and	r2, r2, r5
   12f98:	orr	r5, r2, r3
   12f9c:	sub	r2, r4, #4
   12fa0:	sub	r3, lr, #4
   12fa4:	tst	r5, r6
   12fa8:	beq	12f5c <__assert_fail@plt+0x1d14>
   12fac:	cmp	lr, #0
   12fb0:	beq	12fd4 <__assert_fail@plt+0x1d8c>
   12fb4:	mov	r0, #0
   12fb8:	ldrb	r2, [r0, -r4]
   12fbc:	cmp	r1, r2
   12fc0:	cmpne	ip, r2
   12fc4:	beq	12fdc <__assert_fail@plt+0x1d94>
   12fc8:	add	r0, r0, #1
   12fcc:	cmp	lr, r0
   12fd0:	bne	12fb8 <__assert_fail@plt+0x1d70>
   12fd4:	mov	r0, #0
   12fd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12fdc:	sub	r0, r0, r4
   12fe0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12fe4:	push	{r4, r5, fp, lr}
   12fe8:	add	fp, sp, #8
   12fec:	cmp	r0, #0
   12ff0:	beq	13084 <__assert_fail@plt+0x1e3c>
   12ff4:	mov	r1, #47	; 0x2f
   12ff8:	mov	r4, r0
   12ffc:	bl	111b8 <strrchr@plt>
   13000:	cmp	r0, #0
   13004:	mov	r5, r4
   13008:	addne	r5, r0, #1
   1300c:	sub	r0, r5, r4
   13010:	cmp	r0, #7
   13014:	blt	13068 <__assert_fail@plt+0x1e20>
   13018:	movw	r1, #26121	; 0x6609
   1301c:	sub	r0, r5, #7
   13020:	mov	r2, #7
   13024:	movt	r1, #1
   13028:	bl	1120c <strncmp@plt>
   1302c:	cmp	r0, #0
   13030:	bne	13068 <__assert_fail@plt+0x1e20>
   13034:	movw	r1, #26129	; 0x6611
   13038:	mov	r0, r5
   1303c:	mov	r2, #3
   13040:	movt	r1, #1
   13044:	bl	1120c <strncmp@plt>
   13048:	cmp	r0, #0
   1304c:	beq	13058 <__assert_fail@plt+0x1e10>
   13050:	mov	r4, r5
   13054:	b	13068 <__assert_fail@plt+0x1e20>
   13058:	movw	r0, #29000	; 0x7148
   1305c:	add	r4, r5, #3
   13060:	movt	r0, #2
   13064:	str	r4, [r0]
   13068:	movw	r0, #29004	; 0x714c
   1306c:	movt	r0, #2
   13070:	str	r4, [r0]
   13074:	movw	r0, #29084	; 0x719c
   13078:	movt	r0, #2
   1307c:	str	r4, [r0]
   13080:	pop	{r4, r5, fp, pc}
   13084:	movw	r0, #29016	; 0x7158
   13088:	movt	r0, #2
   1308c:	ldr	r1, [r0]
   13090:	movw	r0, #26065	; 0x65d1
   13094:	movt	r0, #1
   13098:	bl	11200 <fputs@plt>
   1309c:	bl	11218 <abort@plt>
   130a0:	push	{r4, r5, r6, sl, fp, lr}
   130a4:	add	fp, sp, #16
   130a8:	mov	r4, r0
   130ac:	movw	r0, #29088	; 0x71a0
   130b0:	movt	r0, #2
   130b4:	cmp	r4, #0
   130b8:	moveq	r4, r0
   130bc:	bl	11134 <__errno_location@plt>
   130c0:	ldr	r6, [r0]
   130c4:	mov	r5, r0
   130c8:	mov	r0, r4
   130cc:	mov	r1, #48	; 0x30
   130d0:	bl	1532c <__assert_fail@plt+0x40e4>
   130d4:	str	r6, [r5]
   130d8:	pop	{r4, r5, r6, sl, fp, pc}
   130dc:	movw	r1, #29088	; 0x71a0
   130e0:	cmp	r0, #0
   130e4:	movt	r1, #2
   130e8:	movne	r1, r0
   130ec:	ldr	r0, [r1]
   130f0:	bx	lr
   130f4:	movw	r2, #29088	; 0x71a0
   130f8:	cmp	r0, #0
   130fc:	movt	r2, #2
   13100:	movne	r2, r0
   13104:	str	r1, [r2]
   13108:	bx	lr
   1310c:	movw	r3, #29088	; 0x71a0
   13110:	cmp	r0, #0
   13114:	and	r2, r2, #1
   13118:	movt	r3, #2
   1311c:	movne	r3, r0
   13120:	ubfx	r0, r1, #5, #3
   13124:	and	r1, r1, #31
   13128:	add	ip, r3, r0, lsl #2
   1312c:	mov	r0, #1
   13130:	ldr	r3, [ip, #8]
   13134:	and	r0, r0, r3, lsr r1
   13138:	eor	r2, r0, r2
   1313c:	eor	r1, r3, r2, lsl r1
   13140:	str	r1, [ip, #8]
   13144:	bx	lr
   13148:	movw	r2, #29088	; 0x71a0
   1314c:	cmp	r0, #0
   13150:	movt	r2, #2
   13154:	movne	r2, r0
   13158:	ldr	r0, [r2, #4]
   1315c:	str	r1, [r2, #4]
   13160:	bx	lr
   13164:	push	{fp, lr}
   13168:	mov	fp, sp
   1316c:	movw	r3, #29088	; 0x71a0
   13170:	cmp	r0, #0
   13174:	movt	r3, #2
   13178:	movne	r3, r0
   1317c:	cmp	r1, #0
   13180:	mov	r0, #10
   13184:	cmpne	r2, #0
   13188:	str	r0, [r3]
   1318c:	bne	13194 <__assert_fail@plt+0x1f4c>
   13190:	bl	11218 <abort@plt>
   13194:	str	r1, [r3, #40]	; 0x28
   13198:	str	r2, [r3, #44]	; 0x2c
   1319c:	pop	{fp, pc}
   131a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131a4:	add	fp, sp, #28
   131a8:	sub	sp, sp, #20
   131ac:	mov	r7, r0
   131b0:	ldr	r0, [fp, #8]
   131b4:	movw	r5, #29088	; 0x71a0
   131b8:	mov	r8, r3
   131bc:	mov	r9, r2
   131c0:	mov	sl, r1
   131c4:	movt	r5, #2
   131c8:	cmp	r0, #0
   131cc:	movne	r5, r0
   131d0:	bl	11134 <__errno_location@plt>
   131d4:	ldr	r2, [r5, #40]	; 0x28
   131d8:	ldr	r3, [r5, #44]	; 0x2c
   131dc:	mov	r4, r0
   131e0:	ldm	r5, {r0, r1}
   131e4:	add	r5, r5, #8
   131e8:	ldr	r6, [r4]
   131ec:	stm	sp, {r0, r1, r5}
   131f0:	mov	r0, r7
   131f4:	mov	r1, sl
   131f8:	str	r2, [sp, #12]
   131fc:	str	r3, [sp, #16]
   13200:	mov	r2, r9
   13204:	mov	r3, r8
   13208:	bl	13218 <__assert_fail@plt+0x1fd0>
   1320c:	str	r6, [r4]
   13210:	sub	sp, fp, #28
   13214:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13218:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1321c:	add	fp, sp, #28
   13220:	sub	sp, sp, #156	; 0x9c
   13224:	mov	r5, r0
   13228:	add	r0, r2, #1
   1322c:	mov	r6, r1
   13230:	mov	sl, r3
   13234:	str	r2, [fp, #-80]	; 0xffffffb0
   13238:	str	r0, [sp, #72]	; 0x48
   1323c:	ldr	r0, [fp, #12]
   13240:	and	r1, r0, #1
   13244:	str	r1, [sp, #32]
   13248:	and	r1, r0, #4
   1324c:	str	r1, [sp, #28]
   13250:	ubfx	r9, r0, #1, #1
   13254:	bl	11074 <__ctype_get_mb_cur_max@plt>
   13258:	str	r0, [sp, #40]	; 0x28
   1325c:	ldr	r0, [fp, #24]
   13260:	ldr	r7, [fp, #8]
   13264:	mov	r1, #0
   13268:	mov	lr, #0
   1326c:	str	r5, [fp, #-84]	; 0xffffffac
   13270:	str	r1, [sp, #60]	; 0x3c
   13274:	mov	r1, #1
   13278:	str	r1, [fp, #-48]	; 0xffffffd0
   1327c:	str	r0, [sp, #80]	; 0x50
   13280:	ldr	r0, [fp, #20]
   13284:	str	r0, [sp, #76]	; 0x4c
   13288:	mov	r0, #0
   1328c:	str	r0, [sp, #56]	; 0x38
   13290:	mov	r0, #0
   13294:	str	r0, [fp, #-88]	; 0xffffffa8
   13298:	mov	r0, #0
   1329c:	str	r0, [fp, #-72]	; 0xffffffb8
   132a0:	mov	r0, #0
   132a4:	cmp	r7, #10
   132a8:	bhi	14284 <__assert_fail@plt+0x303c>
   132ac:	add	r1, pc, #24
   132b0:	ldr	r4, [fp, #-80]	; 0xffffffb0
   132b4:	mov	ip, r6
   132b8:	mov	r8, #0
   132bc:	mov	r2, #1
   132c0:	mov	r6, #0
   132c4:	mov	r3, sl
   132c8:	ldr	pc, [r1, r7, lsl #2]
   132cc:			; <UNDEFINED> instruction: 0x000133b8
   132d0:	andeq	r3, r1, ip, lsl #8
   132d4:	andeq	r3, r1, ip, asr #7
   132d8:			; <UNDEFINED> instruction: 0x000133b0
   132dc:	andeq	r3, r1, r0, lsl #8
   132e0:	andeq	r3, r1, r4, lsr r4
   132e4:	ldrdeq	r3, [r1], -ip
   132e8:			; <UNDEFINED> instruction: 0x000134b8
   132ec:	strdeq	r3, [r1], -r8
   132f0:	strdeq	r3, [r1], -r8
   132f4:	andeq	r3, r1, r8, lsr r3
   132f8:	movw	r0, #26211	; 0x6663
   132fc:	mov	r1, r7
   13300:	mov	r6, r5
   13304:	mov	r4, ip
   13308:	mov	r5, lr
   1330c:	movt	r0, #1
   13310:	bl	149e8 <__assert_fail@plt+0x37a0>
   13314:	str	r0, [sp, #76]	; 0x4c
   13318:	movw	r0, #26213	; 0x6665
   1331c:	mov	r1, r7
   13320:	movt	r0, #1
   13324:	bl	149e8 <__assert_fail@plt+0x37a0>
   13328:	mov	lr, r5
   1332c:	mov	r5, r6
   13330:	mov	ip, r4
   13334:	str	r0, [sp, #80]	; 0x50
   13338:	mov	r8, #0
   1333c:	tst	r9, #1
   13340:	str	lr, [sp, #44]	; 0x2c
   13344:	bne	1337c <__assert_fail@plt+0x2134>
   13348:	ldr	r0, [sp, #76]	; 0x4c
   1334c:	ldrb	r0, [r0]
   13350:	cmp	r0, #0
   13354:	beq	1337c <__assert_fail@plt+0x2134>
   13358:	ldr	r1, [sp, #76]	; 0x4c
   1335c:	mov	r8, #0
   13360:	add	r1, r1, #1
   13364:	cmp	r8, ip
   13368:	strbcc	r0, [r5, r8]
   1336c:	ldrb	r0, [r1, r8]
   13370:	add	r8, r8, #1
   13374:	cmp	r0, #0
   13378:	bne	13364 <__assert_fail@plt+0x211c>
   1337c:	ldr	r6, [sp, #80]	; 0x50
   13380:	mov	r4, ip
   13384:	mov	r0, r6
   13388:	bl	1111c <strlen@plt>
   1338c:	mov	ip, r4
   13390:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13394:	ldr	lr, [sp, #44]	; 0x2c
   13398:	str	r6, [fp, #-88]	; 0xffffffa8
   1339c:	str	r0, [fp, #-72]	; 0xffffffb8
   133a0:	mov	r2, #1
   133a4:	mov	r6, r9
   133a8:	mov	r3, sl
   133ac:	b	134b8 <__assert_fail@plt+0x2270>
   133b0:	mov	r0, #1
   133b4:	b	1340c <__assert_fail@plt+0x21c4>
   133b8:	mov	r7, #0
   133bc:	mov	r8, #0
   133c0:	mov	r2, r0
   133c4:	mov	r6, #0
   133c8:	b	134b8 <__assert_fail@plt+0x2270>
   133cc:	tst	r9, #1
   133d0:	bne	1340c <__assert_fail@plt+0x21c4>
   133d4:	mov	r2, r0
   133d8:	b	13464 <__assert_fail@plt+0x221c>
   133dc:	mov	r0, #1
   133e0:	mov	r8, #0
   133e4:	mov	r7, #5
   133e8:	mov	r2, #1
   133ec:	str	r0, [fp, #-72]	; 0xffffffb8
   133f0:	movw	r0, #26209	; 0x6661
   133f4:	movt	r0, #1
   133f8:	str	r0, [fp, #-88]	; 0xffffffa8
   133fc:	b	1342c <__assert_fail@plt+0x21e4>
   13400:	mov	r2, #1
   13404:	tst	r9, #1
   13408:	beq	13464 <__assert_fail@plt+0x221c>
   1340c:	mov	r1, #1
   13410:	mov	r8, #0
   13414:	mov	r7, #2
   13418:	mov	r2, r0
   1341c:	str	r1, [fp, #-72]	; 0xffffffb8
   13420:	movw	r1, #26213	; 0x6665
   13424:	movt	r1, #1
   13428:	str	r1, [fp, #-88]	; 0xffffffa8
   1342c:	mov	r6, #1
   13430:	b	134b8 <__assert_fail@plt+0x2270>
   13434:	tst	r9, #1
   13438:	beq	13488 <__assert_fail@plt+0x2240>
   1343c:	mov	r0, #1
   13440:	mov	r8, #0
   13444:	mov	r2, #1
   13448:	mov	r6, #1
   1344c:	mov	r7, #5
   13450:	str	r0, [fp, #-72]	; 0xffffffb8
   13454:	movw	r0, #26209	; 0x6661
   13458:	movt	r0, #1
   1345c:	str	r0, [fp, #-88]	; 0xffffffa8
   13460:	b	134b8 <__assert_fail@plt+0x2270>
   13464:	cmp	ip, #0
   13468:	mov	r8, #1
   1346c:	mov	r6, #0
   13470:	mov	r7, #2
   13474:	movne	r0, #39	; 0x27
   13478:	strbne	r0, [r5]
   1347c:	movw	r0, #26213	; 0x6665
   13480:	movt	r0, #1
   13484:	b	134ac <__assert_fail@plt+0x2264>
   13488:	cmp	ip, #0
   1348c:	mov	r8, #1
   13490:	mov	r2, #1
   13494:	mov	r7, #5
   13498:	mov	r6, #0
   1349c:	movne	r0, #34	; 0x22
   134a0:	strbne	r0, [r5]
   134a4:	movw	r0, #26209	; 0x6661
   134a8:	movt	r0, #1
   134ac:	str	r0, [fp, #-88]	; 0xffffffa8
   134b0:	mov	r0, #1
   134b4:	str	r0, [fp, #-72]	; 0xffffffb8
   134b8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   134bc:	str	r7, [fp, #-68]	; 0xffffffbc
   134c0:	str	r6, [fp, #-76]	; 0xffffffb4
   134c4:	str	r2, [sp, #84]	; 0x54
   134c8:	cmp	r0, #0
   134cc:	movwne	r0, #1
   134d0:	and	r1, r0, r6
   134d4:	and	r1, r2, r1
   134d8:	str	r1, [sp, #48]	; 0x30
   134dc:	sub	r1, r7, #2
   134e0:	clz	r1, r1
   134e4:	lsr	r1, r1, #5
   134e8:	and	r1, r1, r6
   134ec:	str	r1, [sp, #64]	; 0x40
   134f0:	subs	r1, r7, #2
   134f4:	eor	r7, r6, #1
   134f8:	movwne	r1, #1
   134fc:	str	r7, [sp, #92]	; 0x5c
   13500:	orr	r7, r1, r7
   13504:	and	r1, r1, r2
   13508:	and	r0, r0, r1
   1350c:	str	r7, [sp, #68]	; 0x44
   13510:	mov	r7, #0
   13514:	str	r0, [fp, #-60]	; 0xffffffc4
   13518:	orr	r0, r1, r6
   1351c:	ldr	r1, [fp, #16]
   13520:	eor	r0, r0, #1
   13524:	clz	r1, r1
   13528:	lsr	r1, r1, #5
   1352c:	orr	r0, r1, r0
   13530:	str	r0, [fp, #-64]	; 0xffffffc0
   13534:	eor	r0, r2, #1
   13538:	str	r0, [sp, #52]	; 0x34
   1353c:	cmn	r3, #1
   13540:	beq	13550 <__assert_fail@plt+0x2308>
   13544:	cmp	r7, r3
   13548:	bne	1355c <__assert_fail@plt+0x2314>
   1354c:	b	140b8 <__assert_fail@plt+0x2e70>
   13550:	ldrb	r0, [r4, r7]
   13554:	cmp	r0, #0
   13558:	beq	140c0 <__assert_fail@plt+0x2e78>
   1355c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   13560:	cmp	r0, #0
   13564:	beq	135ac <__assert_fail@plt+0x2364>
   13568:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1356c:	add	r5, r7, r0
   13570:	cmp	r0, #2
   13574:	bcc	135c0 <__assert_fail@plt+0x2378>
   13578:	mov	r0, #0
   1357c:	cmn	r3, #1
   13580:	str	r0, [fp, #-56]	; 0xffffffc8
   13584:	bne	135c8 <__assert_fail@plt+0x2380>
   13588:	mov	r0, r4
   1358c:	mov	r4, ip
   13590:	mov	r6, lr
   13594:	bl	1111c <strlen@plt>
   13598:	mov	ip, r4
   1359c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   135a0:	mov	lr, r6
   135a4:	mov	r3, r0
   135a8:	b	135c8 <__assert_fail@plt+0x2380>
   135ac:	mov	r0, #0
   135b0:	mov	sl, r3
   135b4:	str	r0, [fp, #-56]	; 0xffffffc8
   135b8:	mov	r0, #0
   135bc:	b	13634 <__assert_fail@plt+0x23ec>
   135c0:	mov	r0, #0
   135c4:	str	r0, [fp, #-56]	; 0xffffffc8
   135c8:	cmp	r5, r3
   135cc:	bls	135e0 <__assert_fail@plt+0x2398>
   135d0:	ldr	r5, [fp, #-84]	; 0xffffffac
   135d4:	mov	r0, #0
   135d8:	mov	sl, r3
   135dc:	b	13634 <__assert_fail@plt+0x23ec>
   135e0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   135e4:	ldr	r2, [fp, #-72]	; 0xffffffb8
   135e8:	add	r0, r4, r7
   135ec:	mov	r5, lr
   135f0:	mov	r6, ip
   135f4:	mov	sl, r3
   135f8:	bl	11110 <bcmp@plt>
   135fc:	ldr	r2, [sp, #92]	; 0x5c
   13600:	cmp	r0, #0
   13604:	ldr	r3, [fp, #-84]	; 0xffffffac
   13608:	mov	r1, r0
   1360c:	movwne	r1, #1
   13610:	orr	r1, r1, r2
   13614:	tst	r1, #1
   13618:	beq	14144 <__assert_fail@plt+0x2efc>
   1361c:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13620:	clz	r0, r0
   13624:	mov	lr, r5
   13628:	mov	ip, r6
   1362c:	mov	r5, r3
   13630:	lsr	r0, r0, #5
   13634:	str	r0, [fp, #-52]	; 0xffffffcc
   13638:	ldrb	r6, [r4, r7]
   1363c:	cmp	r6, #126	; 0x7e
   13640:	bhi	13b68 <__assert_fail@plt+0x2920>
   13644:	add	r3, pc, #16
   13648:	mov	r9, #1
   1364c:	mov	r2, #110	; 0x6e
   13650:	mov	r0, #97	; 0x61
   13654:	mov	r1, #0
   13658:	ldr	pc, [r3, r6, lsl #2]
   1365c:	andeq	r3, r1, ip, asr #19
   13660:	andeq	r3, r1, r8, ror #22
   13664:	andeq	r3, r1, r8, ror #22
   13668:	andeq	r3, r1, r8, ror #22
   1366c:	andeq	r3, r1, r8, ror #22
   13670:	andeq	r3, r1, r8, ror #22
   13674:	andeq	r3, r1, r8, ror #22
   13678:	andeq	r3, r1, r8, ror #23
   1367c:	andeq	r3, r1, ip, lsr #19
   13680:	andeq	r3, r1, r4, lsr #19
   13684:			; <UNDEFINED> instruction: 0x000139b8
   13688:	ldrdeq	r3, [r1], -r0
   1368c:	muleq	r1, ip, r9
   13690:			; <UNDEFINED> instruction: 0x000139b4
   13694:	andeq	r3, r1, r8, ror #22
   13698:	andeq	r3, r1, r8, ror #22
   1369c:	andeq	r3, r1, r8, ror #22
   136a0:	andeq	r3, r1, r8, ror #22
   136a4:	andeq	r3, r1, r8, ror #22
   136a8:	andeq	r3, r1, r8, ror #22
   136ac:	andeq	r3, r1, r8, ror #22
   136b0:	andeq	r3, r1, r8, ror #22
   136b4:	andeq	r3, r1, r8, ror #22
   136b8:	andeq	r3, r1, r8, ror #22
   136bc:	andeq	r3, r1, r8, ror #22
   136c0:	andeq	r3, r1, r8, ror #22
   136c4:	andeq	r3, r1, r8, ror #22
   136c8:	andeq	r3, r1, r8, ror #22
   136cc:	andeq	r3, r1, r8, ror #22
   136d0:	andeq	r3, r1, r8, ror #22
   136d4:	andeq	r3, r1, r8, ror #22
   136d8:	andeq	r3, r1, r8, ror #22
   136dc:	andeq	r3, r1, ip, asr #18
   136e0:	andeq	r3, r1, r0, asr r9
   136e4:	andeq	r3, r1, r0, asr r9
   136e8:	andeq	r3, r1, r4, lsr r9
   136ec:	andeq	r3, r1, r0, asr r9
   136f0:	andeq	r3, r1, r8, asr r8
   136f4:	andeq	r3, r1, r0, asr r9
   136f8:	ldrdeq	r3, [r1], -r8
   136fc:	andeq	r3, r1, r0, asr r9
   13700:	andeq	r3, r1, r0, asr r9
   13704:	andeq	r3, r1, r0, asr r9
   13708:	andeq	r3, r1, r8, asr r8
   1370c:	andeq	r3, r1, r8, asr r8
   13710:	andeq	r3, r1, r8, asr r8
   13714:	andeq	r3, r1, r8, asr r8
   13718:	andeq	r3, r1, r8, asr r8
   1371c:	andeq	r3, r1, r8, asr r8
   13720:	andeq	r3, r1, r8, asr r8
   13724:	andeq	r3, r1, r8, asr r8
   13728:	andeq	r3, r1, r8, asr r8
   1372c:	andeq	r3, r1, r8, asr r8
   13730:	andeq	r3, r1, r8, asr r8
   13734:	andeq	r3, r1, r8, asr r8
   13738:	andeq	r3, r1, r8, asr r8
   1373c:	andeq	r3, r1, r8, asr r8
   13740:	andeq	r3, r1, r8, asr r8
   13744:	andeq	r3, r1, r8, asr r8
   13748:	andeq	r3, r1, r0, asr r9
   1374c:	andeq	r3, r1, r0, asr r9
   13750:	andeq	r3, r1, r0, asr r9
   13754:	andeq	r3, r1, r0, asr r9
   13758:	andeq	r3, r1, r4, lsr #21
   1375c:	andeq	r3, r1, r8, ror #22
   13760:	andeq	r3, r1, r8, asr r8
   13764:	andeq	r3, r1, r8, asr r8
   13768:	andeq	r3, r1, r8, asr r8
   1376c:	andeq	r3, r1, r8, asr r8
   13770:	andeq	r3, r1, r8, asr r8
   13774:	andeq	r3, r1, r8, asr r8
   13778:	andeq	r3, r1, r8, asr r8
   1377c:	andeq	r3, r1, r8, asr r8
   13780:	andeq	r3, r1, r8, asr r8
   13784:	andeq	r3, r1, r8, asr r8
   13788:	andeq	r3, r1, r8, asr r8
   1378c:	andeq	r3, r1, r8, asr r8
   13790:	andeq	r3, r1, r8, asr r8
   13794:	andeq	r3, r1, r8, asr r8
   13798:	andeq	r3, r1, r8, asr r8
   1379c:	andeq	r3, r1, r8, asr r8
   137a0:	andeq	r3, r1, r8, asr r8
   137a4:	andeq	r3, r1, r8, asr r8
   137a8:	andeq	r3, r1, r8, asr r8
   137ac:	andeq	r3, r1, r8, asr r8
   137b0:	andeq	r3, r1, r8, asr r8
   137b4:	andeq	r3, r1, r8, asr r8
   137b8:	andeq	r3, r1, r8, asr r8
   137bc:	andeq	r3, r1, r8, asr r8
   137c0:	andeq	r3, r1, r8, asr r8
   137c4:	andeq	r3, r1, r8, asr r8
   137c8:	andeq	r3, r1, r0, asr r9
   137cc:	andeq	r3, r1, r8, ror r9
   137d0:	andeq	r3, r1, r8, asr r8
   137d4:	andeq	r3, r1, r0, asr r9
   137d8:	andeq	r3, r1, r8, asr r8
   137dc:	andeq	r3, r1, r0, asr r9
   137e0:	andeq	r3, r1, r8, asr r8
   137e4:	andeq	r3, r1, r8, asr r8
   137e8:	andeq	r3, r1, r8, asr r8
   137ec:	andeq	r3, r1, r8, asr r8
   137f0:	andeq	r3, r1, r8, asr r8
   137f4:	andeq	r3, r1, r8, asr r8
   137f8:	andeq	r3, r1, r8, asr r8
   137fc:	andeq	r3, r1, r8, asr r8
   13800:	andeq	r3, r1, r8, asr r8
   13804:	andeq	r3, r1, r8, asr r8
   13808:	andeq	r3, r1, r8, asr r8
   1380c:	andeq	r3, r1, r8, asr r8
   13810:	andeq	r3, r1, r8, asr r8
   13814:	andeq	r3, r1, r8, asr r8
   13818:	andeq	r3, r1, r8, asr r8
   1381c:	andeq	r3, r1, r8, asr r8
   13820:	andeq	r3, r1, r8, asr r8
   13824:	andeq	r3, r1, r8, asr r8
   13828:	andeq	r3, r1, r8, asr r8
   1382c:	andeq	r3, r1, r8, asr r8
   13830:	andeq	r3, r1, r8, asr r8
   13834:	andeq	r3, r1, r8, asr r8
   13838:	andeq	r3, r1, r8, asr r8
   1383c:	andeq	r3, r1, r8, asr r8
   13840:	andeq	r3, r1, r8, asr r8
   13844:	andeq	r3, r1, r8, asr r8
   13848:	andeq	r3, r1, ip, lsl #18
   1384c:	andeq	r3, r1, r0, asr r9
   13850:	andeq	r3, r1, ip, lsl #18
   13854:	andeq	r3, r1, r4, lsr r9
   13858:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1385c:	tst	r0, #1
   13860:	bne	1388c <__assert_fail@plt+0x2644>
   13864:	ldr	r1, [fp, #16]
   13868:	ubfx	r0, r6, #5, #3
   1386c:	mov	r2, #1
   13870:	ldr	r0, [r1, r0, lsl #2]
   13874:	and	r1, r6, #31
   13878:	tst	r0, r2, lsl r1
   1387c:	beq	1388c <__assert_fail@plt+0x2644>
   13880:	mov	r0, r6
   13884:	mov	r1, r9
   13888:	b	138a0 <__assert_fail@plt+0x2658>
   1388c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13890:	mov	r1, r9
   13894:	cmp	r0, #0
   13898:	mov	r0, r6
   1389c:	beq	13fec <__assert_fail@plt+0x2da4>
   138a0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   138a4:	tst	r2, #1
   138a8:	bne	14188 <__assert_fail@plt+0x2f40>
   138ac:	ldr	r2, [fp, #-68]	; 0xffffffbc
   138b0:	subs	r2, r2, #2
   138b4:	movwne	r2, #1
   138b8:	orr	r2, r2, lr
   138bc:	tst	r2, #1
   138c0:	bne	138f8 <__assert_fail@plt+0x26b0>
   138c4:	cmp	r8, ip
   138c8:	mov	lr, #1
   138cc:	movcc	r2, #39	; 0x27
   138d0:	strbcc	r2, [r5, r8]
   138d4:	add	r2, r8, #1
   138d8:	cmp	r2, ip
   138dc:	movcc	r3, #36	; 0x24
   138e0:	strbcc	r3, [r5, r2]
   138e4:	add	r2, r8, #2
   138e8:	add	r8, r8, #3
   138ec:	cmp	r2, ip
   138f0:	movcc	r3, #39	; 0x27
   138f4:	strbcc	r3, [r5, r2]
   138f8:	cmp	r8, ip
   138fc:	movcc	r2, #92	; 0x5c
   13900:	strbcc	r2, [r5, r8]
   13904:	add	r8, r8, #1
   13908:	b	1402c <__assert_fail@plt+0x2de4>
   1390c:	cmp	sl, #1
   13910:	beq	13934 <__assert_fail@plt+0x26ec>
   13914:	mov	r9, #0
   13918:	cmn	sl, #1
   1391c:	bne	13940 <__assert_fail@plt+0x26f8>
   13920:	ldrb	r0, [r4, #1]
   13924:	cmp	r0, #0
   13928:	beq	13934 <__assert_fail@plt+0x26ec>
   1392c:	mvn	sl, #0
   13930:	b	13940 <__assert_fail@plt+0x26f8>
   13934:	mov	r9, #0
   13938:	cmp	r7, #0
   1393c:	beq	1394c <__assert_fail@plt+0x2704>
   13940:	mov	r0, #0
   13944:	str	r0, [fp, #-56]	; 0xffffffc8
   13948:	b	13858 <__assert_fail@plt+0x2610>
   1394c:	mov	r1, #1
   13950:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13954:	cmp	r0, #2
   13958:	bne	13970 <__assert_fail@plt+0x2728>
   1395c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13960:	mov	r9, r1
   13964:	tst	r0, #1
   13968:	beq	13858 <__assert_fail@plt+0x2610>
   1396c:	b	14188 <__assert_fail@plt+0x2f40>
   13970:	mov	r9, r1
   13974:	b	13858 <__assert_fail@plt+0x2610>
   13978:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1397c:	cmp	r0, #2
   13980:	bne	13bc4 <__assert_fail@plt+0x297c>
   13984:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13988:	tst	r0, #1
   1398c:	bne	14188 <__assert_fail@plt+0x2f40>
   13990:	mov	r0, #0
   13994:	str	r0, [fp, #-56]	; 0xffffffc8
   13998:	b	13bdc <__assert_fail@plt+0x2994>
   1399c:	mov	r0, #102	; 0x66
   139a0:	b	13be8 <__assert_fail@plt+0x29a0>
   139a4:	mov	r2, #116	; 0x74
   139a8:	b	139b8 <__assert_fail@plt+0x2770>
   139ac:	mov	r0, #98	; 0x62
   139b0:	b	13be8 <__assert_fail@plt+0x29a0>
   139b4:	mov	r2, #114	; 0x72
   139b8:	ldr	r0, [sp, #68]	; 0x44
   139bc:	tst	r0, #1
   139c0:	mov	r0, r2
   139c4:	bne	13be8 <__assert_fail@plt+0x29a0>
   139c8:	b	14188 <__assert_fail@plt+0x2f40>
   139cc:	ldr	r0, [sp, #84]	; 0x54
   139d0:	tst	r0, #1
   139d4:	beq	13c08 <__assert_fail@plt+0x29c0>
   139d8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   139dc:	tst	r0, #1
   139e0:	bne	14274 <__assert_fail@plt+0x302c>
   139e4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   139e8:	mov	r2, sl
   139ec:	subs	r0, r0, #2
   139f0:	movwne	r0, #1
   139f4:	orr	r0, r0, lr
   139f8:	tst	r0, #1
   139fc:	bne	13a34 <__assert_fail@plt+0x27ec>
   13a00:	cmp	r8, ip
   13a04:	mov	lr, #1
   13a08:	movcc	r0, #39	; 0x27
   13a0c:	strbcc	r0, [r5, r8]
   13a10:	add	r0, r8, #1
   13a14:	cmp	r0, ip
   13a18:	movcc	r1, #36	; 0x24
   13a1c:	strbcc	r1, [r5, r0]
   13a20:	add	r0, r8, #2
   13a24:	add	r8, r8, #3
   13a28:	cmp	r0, ip
   13a2c:	movcc	r1, #39	; 0x27
   13a30:	strbcc	r1, [r5, r0]
   13a34:	mov	r1, #1
   13a38:	cmp	r8, ip
   13a3c:	mov	r9, #0
   13a40:	mov	r6, #48	; 0x30
   13a44:	str	r1, [fp, #-56]	; 0xffffffc8
   13a48:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13a4c:	movcc	r0, #92	; 0x5c
   13a50:	strbcc	r0, [r5, r8]
   13a54:	add	r0, r8, #1
   13a58:	cmp	r1, #2
   13a5c:	beq	13d64 <__assert_fail@plt+0x2b1c>
   13a60:	add	r1, r7, #1
   13a64:	cmp	r1, r2
   13a68:	bcs	13d64 <__assert_fail@plt+0x2b1c>
   13a6c:	ldrb	r1, [r4, r1]
   13a70:	sub	r1, r1, #48	; 0x30
   13a74:	uxtb	r1, r1
   13a78:	cmp	r1, #9
   13a7c:	bhi	13d64 <__assert_fail@plt+0x2b1c>
   13a80:	cmp	r0, ip
   13a84:	movcc	r1, #48	; 0x30
   13a88:	strbcc	r1, [r5, r0]
   13a8c:	add	r0, r8, #2
   13a90:	add	r8, r8, #3
   13a94:	cmp	r0, ip
   13a98:	movcc	r1, #48	; 0x30
   13a9c:	strbcc	r1, [r5, r0]
   13aa0:	b	13858 <__assert_fail@plt+0x2610>
   13aa4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13aa8:	mov	r6, #63	; 0x3f
   13aac:	cmp	r0, #5
   13ab0:	beq	13d6c <__assert_fail@plt+0x2b24>
   13ab4:	mov	r1, #0
   13ab8:	cmp	r0, #2
   13abc:	str	r1, [fp, #-56]	; 0xffffffc8
   13ac0:	bne	13e20 <__assert_fail@plt+0x2bd8>
   13ac4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13ac8:	mov	r9, #0
   13acc:	b	13964 <__assert_fail@plt+0x271c>
   13ad0:	mov	r0, #118	; 0x76
   13ad4:	b	13be8 <__assert_fail@plt+0x29a0>
   13ad8:	mov	r0, #1
   13adc:	mov	r6, #39	; 0x27
   13ae0:	str	r0, [sp, #60]	; 0x3c
   13ae4:	ldr	r0, [fp, #-68]	; 0xffffffbc
   13ae8:	cmp	r0, #2
   13aec:	bne	13b60 <__assert_fail@plt+0x2918>
   13af0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   13af4:	tst	r0, #1
   13af8:	bne	14188 <__assert_fail@plt+0x2f40>
   13afc:	ldr	r2, [sp, #56]	; 0x38
   13b00:	clz	r1, ip
   13b04:	mov	lr, #0
   13b08:	lsr	r1, r1, #5
   13b0c:	cmp	r2, #0
   13b10:	mov	r0, r2
   13b14:	movwne	r0, #1
   13b18:	orrs	r0, r0, r1
   13b1c:	moveq	r2, ip
   13b20:	moveq	ip, r0
   13b24:	cmp	r8, ip
   13b28:	str	r2, [sp, #56]	; 0x38
   13b2c:	movcc	r0, #39	; 0x27
   13b30:	strbcc	r0, [r5, r8]
   13b34:	add	r0, r8, #1
   13b38:	cmp	r0, ip
   13b3c:	movcc	r1, #92	; 0x5c
   13b40:	strbcc	r1, [r5, r0]
   13b44:	add	r0, r8, #2
   13b48:	add	r8, r8, #3
   13b4c:	cmp	r0, ip
   13b50:	movcc	r1, #39	; 0x27
   13b54:	strbcc	r1, [r5, r0]
   13b58:	mov	r0, #0
   13b5c:	str	r0, [fp, #-56]	; 0xffffffc8
   13b60:	mov	r9, #1
   13b64:	b	13858 <__assert_fail@plt+0x2610>
   13b68:	ldr	r0, [sp, #40]	; 0x28
   13b6c:	str	lr, [sp, #44]	; 0x2c
   13b70:	str	ip, [sp, #88]	; 0x58
   13b74:	cmp	r0, #1
   13b78:	bne	13c28 <__assert_fail@plt+0x29e0>
   13b7c:	str	sl, [sp, #36]	; 0x24
   13b80:	bl	110f8 <__ctype_b_loc@plt>
   13b84:	ldr	r0, [r0]
   13b88:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13b8c:	mov	r1, #1
   13b90:	add	r0, r0, r6, lsl #1
   13b94:	ldrb	r0, [r0, #1]
   13b98:	ubfx	r9, r0, #6, #1
   13b9c:	ldr	r0, [sp, #52]	; 0x34
   13ba0:	ldr	lr, [sp, #44]	; 0x2c
   13ba4:	cmp	r1, #1
   13ba8:	orr	r3, r9, r0
   13bac:	bhi	13e28 <__assert_fail@plt+0x2be0>
   13bb0:	tst	r3, #1
   13bb4:	beq	13e28 <__assert_fail@plt+0x2be0>
   13bb8:	ldr	sl, [sp, #36]	; 0x24
   13bbc:	ldr	ip, [sp, #88]	; 0x58
   13bc0:	b	13858 <__assert_fail@plt+0x2610>
   13bc4:	ldr	r1, [sp, #48]	; 0x30
   13bc8:	mov	r0, #0
   13bcc:	str	r0, [fp, #-56]	; 0xffffffc8
   13bd0:	mov	r0, #92	; 0x5c
   13bd4:	cmp	r1, #0
   13bd8:	beq	13be8 <__assert_fail@plt+0x29a0>
   13bdc:	mov	r6, #92	; 0x5c
   13be0:	mov	r9, #0
   13be4:	b	13fec <__assert_fail@plt+0x2da4>
   13be8:	mov	r1, #0
   13bec:	mov	r9, #0
   13bf0:	str	r1, [fp, #-56]	; 0xffffffc8
   13bf4:	ldr	r1, [sp, #84]	; 0x54
   13bf8:	tst	r1, #1
   13bfc:	mov	r1, #0
   13c00:	beq	13858 <__assert_fail@plt+0x2610>
   13c04:	b	138a0 <__assert_fail@plt+0x2658>
   13c08:	ldr	r0, [sp, #32]
   13c0c:	mov	r6, #0
   13c10:	mov	r9, #0
   13c14:	cmp	r0, #0
   13c18:	mov	r0, #0
   13c1c:	str	r0, [fp, #-56]	; 0xffffffc8
   13c20:	beq	13858 <__assert_fail@plt+0x2610>
   13c24:	b	14044 <__assert_fail@plt+0x2dfc>
   13c28:	mov	r0, #0
   13c2c:	cmn	sl, #1
   13c30:	sub	r3, fp, #40	; 0x28
   13c34:	str	r0, [fp, #-36]	; 0xffffffdc
   13c38:	str	r0, [fp, #-40]	; 0xffffffd8
   13c3c:	bne	13c54 <__assert_fail@plt+0x2a0c>
   13c40:	mov	r0, r4
   13c44:	bl	1111c <strlen@plt>
   13c48:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13c4c:	sub	r3, fp, #40	; 0x28
   13c50:	mov	sl, r0
   13c54:	ldr	r0, [sp, #72]	; 0x48
   13c58:	mov	r9, #1
   13c5c:	mov	r1, #0
   13c60:	str	sl, [sp, #36]	; 0x24
   13c64:	add	r0, r0, r7
   13c68:	str	r0, [sp, #20]
   13c6c:	add	r0, r1, r7
   13c70:	str	r1, [sp, #24]
   13c74:	add	r1, r4, r0
   13c78:	mov	r4, r0
   13c7c:	sub	r2, sl, r0
   13c80:	sub	r0, fp, #44	; 0x2c
   13c84:	bl	15748 <__assert_fail@plt+0x4500>
   13c88:	cmp	r0, #0
   13c8c:	beq	14098 <__assert_fail@plt+0x2e50>
   13c90:	cmn	r0, #1
   13c94:	beq	14050 <__assert_fail@plt+0x2e08>
   13c98:	ldr	r2, [sp, #36]	; 0x24
   13c9c:	cmn	r0, #2
   13ca0:	beq	14058 <__assert_fail@plt+0x2e10>
   13ca4:	ldr	r2, [sp, #64]	; 0x40
   13ca8:	ldr	ip, [sp, #88]	; 0x58
   13cac:	ldr	r4, [sp, #84]	; 0x54
   13cb0:	ldr	lr, [fp, #-48]	; 0xffffffd0
   13cb4:	cmp	r0, #2
   13cb8:	mov	r1, #0
   13cbc:	movwcc	r1, #1
   13cc0:	eor	r2, r2, #1
   13cc4:	orrs	r1, r2, r1
   13cc8:	bne	13d18 <__assert_fail@plt+0x2ad0>
   13ccc:	ldr	r1, [sp, #24]
   13cd0:	ldr	r2, [sp, #20]
   13cd4:	add	r1, r2, r1
   13cd8:	sub	r2, r0, #1
   13cdc:	ldrb	r3, [r1]
   13ce0:	sub	r5, r3, #94	; 0x5e
   13ce4:	cmp	r5, #30
   13ce8:	bhi	13d00 <__assert_fail@plt+0x2ab8>
   13cec:	mov	r4, #1
   13cf0:	mov	sl, #1073741829	; 0x40000005
   13cf4:	tst	sl, r4, lsl r5
   13cf8:	ldr	r4, [sp, #84]	; 0x54
   13cfc:	bne	14160 <__assert_fail@plt+0x2f18>
   13d00:	sub	r3, r3, #91	; 0x5b
   13d04:	cmp	r3, #2
   13d08:	bcc	14160 <__assert_fail@plt+0x2f18>
   13d0c:	add	r1, r1, #1
   13d10:	subs	r2, r2, #1
   13d14:	bne	13cdc <__assert_fail@plt+0x2a94>
   13d18:	ldr	r5, [sp, #24]
   13d1c:	str	lr, [fp, #-48]	; 0xffffffd0
   13d20:	add	r5, r0, r5
   13d24:	ldr	r0, [fp, #-44]	; 0xffffffd4
   13d28:	bl	1105c <iswprint@plt>
   13d2c:	cmp	r0, #0
   13d30:	sub	r4, fp, #40	; 0x28
   13d34:	movwne	r0, #1
   13d38:	and	r9, r9, r0
   13d3c:	mov	r0, r4
   13d40:	bl	11014 <mbsinit@plt>
   13d44:	mov	r1, r5
   13d48:	mov	r3, r4
   13d4c:	ldr	sl, [sp, #36]	; 0x24
   13d50:	ldr	r5, [fp, #-84]	; 0xffffffac
   13d54:	ldr	r4, [fp, #-80]	; 0xffffffb0
   13d58:	cmp	r0, #0
   13d5c:	beq	13c6c <__assert_fail@plt+0x2a24>
   13d60:	b	13b9c <__assert_fail@plt+0x2954>
   13d64:	mov	r8, r0
   13d68:	b	13858 <__assert_fail@plt+0x2610>
   13d6c:	mov	r0, #0
   13d70:	str	r0, [fp, #-56]	; 0xffffffc8
   13d74:	ldr	r0, [sp, #28]
   13d78:	cmp	r0, #0
   13d7c:	beq	13e20 <__assert_fail@plt+0x2bd8>
   13d80:	add	r0, r7, #2
   13d84:	mov	r1, sl
   13d88:	cmp	r0, sl
   13d8c:	bcs	13e20 <__assert_fail@plt+0x2bd8>
   13d90:	add	r1, r7, r4
   13d94:	ldrb	r1, [r1, #1]
   13d98:	cmp	r1, #63	; 0x3f
   13d9c:	bne	13e20 <__assert_fail@plt+0x2bd8>
   13da0:	ldrb	r9, [r4, r0]
   13da4:	sub	r2, r9, #33	; 0x21
   13da8:	cmp	r2, #29
   13dac:	bhi	13e20 <__assert_fail@plt+0x2bd8>
   13db0:	mov	r1, r4
   13db4:	movw	r4, #20929	; 0x51c1
   13db8:	mov	r3, #1
   13dbc:	movt	r4, #14336	; 0x3800
   13dc0:	tst	r4, r3, lsl r2
   13dc4:	beq	140ac <__assert_fail@plt+0x2e64>
   13dc8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13dcc:	tst	r2, #1
   13dd0:	bne	1427c <__assert_fail@plt+0x3034>
   13dd4:	cmp	r8, ip
   13dd8:	mov	r4, r1
   13ddc:	mov	r7, r0
   13de0:	mov	r6, r9
   13de4:	movcc	r2, #63	; 0x3f
   13de8:	strbcc	r2, [r5, r8]
   13dec:	add	r2, r8, #1
   13df0:	cmp	r2, ip
   13df4:	movcc	r3, #34	; 0x22
   13df8:	strbcc	r3, [r5, r2]
   13dfc:	add	r2, r8, #2
   13e00:	cmp	r2, ip
   13e04:	movcc	r3, #34	; 0x22
   13e08:	strbcc	r3, [r5, r2]
   13e0c:	add	r2, r8, #3
   13e10:	add	r8, r8, #4
   13e14:	cmp	r2, ip
   13e18:	movcc	r3, #63	; 0x3f
   13e1c:	strbcc	r3, [r5, r2]
   13e20:	mov	r9, #0
   13e24:	b	13858 <__assert_fail@plt+0x2610>
   13e28:	ldr	sl, [sp, #36]	; 0x24
   13e2c:	add	r0, r1, r7
   13e30:	mov	r2, #0
   13e34:	str	r3, [sp, #24]
   13e38:	str	r0, [fp, #-56]	; 0xffffffc8
   13e3c:	tst	r3, #1
   13e40:	beq	13e6c <__assert_fail@plt+0x2c24>
   13e44:	ldr	r0, [fp, #-52]	; 0xffffffcc
   13e48:	tst	r0, #1
   13e4c:	beq	13f34 <__assert_fail@plt+0x2cec>
   13e50:	ldr	r1, [sp, #88]	; 0x58
   13e54:	mov	r0, r3
   13e58:	cmp	r8, r1
   13e5c:	movcc	r1, #92	; 0x5c
   13e60:	strbcc	r1, [r5, r8]
   13e64:	add	r8, r8, #1
   13e68:	b	13f38 <__assert_fail@plt+0x2cf0>
   13e6c:	ldr	r1, [fp, #-76]	; 0xffffffb4
   13e70:	tst	r1, #1
   13e74:	bne	14184 <__assert_fail@plt+0x2f3c>
   13e78:	ldr	r1, [fp, #-68]	; 0xffffffbc
   13e7c:	subs	r2, r1, #2
   13e80:	movwne	r2, #1
   13e84:	orr	r2, r2, lr
   13e88:	tst	r2, #1
   13e8c:	bne	13ed0 <__assert_fail@plt+0x2c88>
   13e90:	ldr	r1, [sp, #88]	; 0x58
   13e94:	add	r2, r8, #1
   13e98:	mov	lr, #1
   13e9c:	cmp	r8, r1
   13ea0:	movcc	r1, #39	; 0x27
   13ea4:	strbcc	r1, [r5, r8]
   13ea8:	ldr	r1, [sp, #88]	; 0x58
   13eac:	cmp	r2, r1
   13eb0:	movcc	r1, #36	; 0x24
   13eb4:	strbcc	r1, [r5, r2]
   13eb8:	ldr	r1, [sp, #88]	; 0x58
   13ebc:	add	r2, r8, #2
   13ec0:	add	r8, r8, #3
   13ec4:	cmp	r2, r1
   13ec8:	movcc	r1, #39	; 0x27
   13ecc:	strbcc	r1, [r5, r2]
   13ed0:	ldr	r1, [sp, #88]	; 0x58
   13ed4:	add	r2, r8, #1
   13ed8:	mov	r0, r3
   13edc:	cmp	r8, r1
   13ee0:	movcc	r1, #92	; 0x5c
   13ee4:	strbcc	r1, [r5, r8]
   13ee8:	ldr	r1, [sp, #88]	; 0x58
   13eec:	cmp	r2, r1
   13ef0:	bcs	13f04 <__assert_fail@plt+0x2cbc>
   13ef4:	uxtb	r3, r6
   13ef8:	mov	r1, #48	; 0x30
   13efc:	orr	r3, r1, r3, lsr #6
   13f00:	strb	r3, [r5, r2]
   13f04:	ldr	r1, [sp, #88]	; 0x58
   13f08:	add	r2, r8, #2
   13f0c:	add	r8, r8, #3
   13f10:	cmp	r2, r1
   13f14:	lsrcc	r3, r6, #3
   13f18:	movcc	r1, #6
   13f1c:	bficc	r3, r1, #3, #29
   13f20:	mov	r1, #6
   13f24:	bfi	r6, r1, #3, #29
   13f28:	strbcc	r3, [r5, r2]
   13f2c:	mov	r2, #1
   13f30:	b	13f40 <__assert_fail@plt+0x2cf8>
   13f34:	mov	r0, r3
   13f38:	mov	r1, #0
   13f3c:	str	r1, [fp, #-52]	; 0xffffffcc
   13f40:	mov	ip, r2
   13f44:	and	r1, r2, #1
   13f48:	ldr	r2, [fp, #-56]	; 0xffffffc8
   13f4c:	add	r3, r7, #1
   13f50:	cmp	r2, r3
   13f54:	bls	13fdc <__assert_fail@plt+0x2d94>
   13f58:	cmp	r1, #0
   13f5c:	mvn	r5, lr
   13f60:	movwne	r1, #1
   13f64:	orr	r5, r5, r1
   13f68:	tst	r5, #1
   13f6c:	bne	13fb0 <__assert_fail@plt+0x2d68>
   13f70:	ldr	r1, [sp, #88]	; 0x58
   13f74:	ldr	r5, [fp, #-84]	; 0xffffffac
   13f78:	mov	r2, r4
   13f7c:	ldr	r4, [sp, #88]	; 0x58
   13f80:	ldr	r0, [sp, #24]
   13f84:	mov	lr, #0
   13f88:	cmp	r8, r1
   13f8c:	movcc	r1, #39	; 0x27
   13f90:	strbcc	r1, [r5, r8]
   13f94:	add	r1, r8, #1
   13f98:	add	r8, r8, #2
   13f9c:	cmp	r1, r4
   13fa0:	movcc	r4, #39	; 0x27
   13fa4:	strbcc	r4, [r5, r1]
   13fa8:	mov	r4, r2
   13fac:	b	13fb4 <__assert_fail@plt+0x2d6c>
   13fb0:	ldr	r5, [fp, #-84]	; 0xffffffac
   13fb4:	ldr	r1, [sp, #88]	; 0x58
   13fb8:	mov	r2, ip
   13fbc:	cmp	r8, r1
   13fc0:	ldr	r1, [sp, #72]	; 0x48
   13fc4:	strbcc	r6, [r5, r8]
   13fc8:	add	r8, r8, #1
   13fcc:	ldrb	r6, [r1, r7]
   13fd0:	mov	r7, r3
   13fd4:	mov	r3, r0
   13fd8:	b	13e3c <__assert_fail@plt+0x2bf4>
   13fdc:	ldr	ip, [sp, #88]	; 0x58
   13fe0:	cmp	r1, #0
   13fe4:	movwne	r1, #1
   13fe8:	str	r1, [fp, #-56]	; 0xffffffc8
   13fec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   13ff0:	cmp	r0, #0
   13ff4:	bne	14024 <__assert_fail@plt+0x2ddc>
   13ff8:	tst	lr, #1
   13ffc:	beq	14024 <__assert_fail@plt+0x2ddc>
   14000:	cmp	r8, ip
   14004:	mov	lr, #0
   14008:	movcc	r0, #39	; 0x27
   1400c:	strbcc	r0, [r5, r8]
   14010:	add	r0, r8, #1
   14014:	add	r8, r8, #2
   14018:	cmp	r0, ip
   1401c:	movcc	r1, #39	; 0x27
   14020:	strbcc	r1, [r5, r0]
   14024:	mov	r1, r9
   14028:	mov	r0, r6
   1402c:	cmp	r8, ip
   14030:	strbcc	r0, [r5, r8]
   14034:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14038:	add	r8, r8, #1
   1403c:	and	r0, r0, r1
   14040:	str	r0, [fp, #-48]	; 0xffffffd0
   14044:	mov	r3, sl
   14048:	add	r7, r7, #1
   1404c:	b	1353c <__assert_fail@plt+0x22f4>
   14050:	mov	r9, #0
   14054:	b	14098 <__assert_fail@plt+0x2e50>
   14058:	mov	r9, #0
   1405c:	cmp	r2, r4
   14060:	bls	14098 <__assert_fail@plt+0x2e50>
   14064:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14068:	ldr	r1, [sp, #24]
   1406c:	add	r0, r4, r7
   14070:	mov	r3, r1
   14074:	ldrb	r1, [r0, r1]
   14078:	cmp	r1, #0
   1407c:	beq	140a4 <__assert_fail@plt+0x2e5c>
   14080:	add	r3, r3, #1
   14084:	add	r1, r7, r3
   14088:	cmp	r1, r2
   1408c:	mov	r1, r3
   14090:	bcc	14070 <__assert_fail@plt+0x2e28>
   14094:	b	13b9c <__assert_fail@plt+0x2954>
   14098:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1409c:	ldr	r1, [sp, #24]
   140a0:	b	13b9c <__assert_fail@plt+0x2954>
   140a4:	mov	r1, r3
   140a8:	b	13b9c <__assert_fail@plt+0x2954>
   140ac:	mov	r9, #0
   140b0:	mov	r4, r1
   140b4:	b	13858 <__assert_fail@plt+0x2610>
   140b8:	mov	sl, r7
   140bc:	b	140c4 <__assert_fail@plt+0x2e7c>
   140c0:	mvn	sl, #0
   140c4:	ldr	r1, [fp, #-68]	; 0xffffffbc
   140c8:	ldr	r2, [fp, #-76]	; 0xffffffb4
   140cc:	eor	r0, r1, #2
   140d0:	orr	r0, r0, r8
   140d4:	clz	r0, r0
   140d8:	lsr	r0, r0, #5
   140dc:	tst	r2, r0
   140e0:	bne	14188 <__assert_fail@plt+0x2f40>
   140e4:	subs	r0, r1, #2
   140e8:	movwne	r0, #1
   140ec:	orr	r0, r2, r0
   140f0:	tst	r0, #1
   140f4:	ldreq	r0, [sp, #60]	; 0x3c
   140f8:	ldreq	r1, [fp, #-48]	; 0xffffffd0
   140fc:	eoreq	r0, r0, #1
   14100:	tsteq	r0, #1
   14104:	bne	1421c <__assert_fail@plt+0x2fd4>
   14108:	tst	r1, #1
   1410c:	bne	141e8 <__assert_fail@plt+0x2fa0>
   14110:	ldr	r6, [sp, #56]	; 0x38
   14114:	mov	r9, #0
   14118:	cmp	r6, #0
   1411c:	beq	14214 <__assert_fail@plt+0x2fcc>
   14120:	ldr	r0, [sp, #84]	; 0x54
   14124:	mov	r1, #0
   14128:	mov	r7, #2
   1412c:	cmp	ip, #0
   14130:	str	r1, [fp, #-48]	; 0xffffffd0
   14134:	mov	r1, #0
   14138:	str	r1, [fp, #-76]	; 0xffffffb4
   1413c:	beq	132a4 <__assert_fail@plt+0x205c>
   14140:	b	1421c <__assert_fail@plt+0x2fd4>
   14144:	ldr	r4, [fp, #-80]	; 0xffffffb0
   14148:	ldr	r1, [fp, #12]
   1414c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   14150:	mov	r5, r3
   14154:	mov	ip, r6
   14158:	mov	r3, sl
   1415c:	b	141ac <__assert_fail@plt+0x2f64>
   14160:	tst	r4, #1
   14164:	ldr	r5, [fp, #-84]	; 0xffffffac
   14168:	ldr	r4, [fp, #-80]	; 0xffffffb0
   1416c:	ldr	r1, [fp, #12]
   14170:	ldr	r3, [sp, #36]	; 0x24
   14174:	mov	r0, #2
   14178:	movwne	r0, #4
   1417c:	mov	r2, r0
   14180:	b	141ac <__assert_fail@plt+0x2f64>
   14184:	ldr	ip, [sp, #88]	; 0x58
   14188:	ldr	r1, [sp, #84]	; 0x54
   1418c:	mov	r0, #2
   14190:	tst	r1, #1
   14194:	movwne	r0, #4
   14198:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1419c:	ldr	r1, [fp, #12]
   141a0:	mov	r3, sl
   141a4:	cmp	r2, #2
   141a8:	moveq	r2, r0
   141ac:	mov	r0, #0
   141b0:	bic	r1, r1, #2
   141b4:	str	r2, [sp]
   141b8:	mov	r2, r4
   141bc:	str	r0, [sp, #8]
   141c0:	ldr	r0, [sp, #76]	; 0x4c
   141c4:	str	r1, [sp, #4]
   141c8:	mov	r1, ip
   141cc:	str	r0, [sp, #12]
   141d0:	ldr	r0, [sp, #80]	; 0x50
   141d4:	str	r0, [sp, #16]
   141d8:	mov	r0, r5
   141dc:	bl	13218 <__assert_fail@plt+0x1fd0>
   141e0:	mov	r8, r0
   141e4:	b	14268 <__assert_fail@plt+0x3020>
   141e8:	mov	r0, #5
   141ec:	ldr	r1, [sp, #56]	; 0x38
   141f0:	ldr	r2, [fp, #-80]	; 0xffffffb0
   141f4:	mov	r3, sl
   141f8:	str	r0, [sp]
   141fc:	ldr	r0, [fp, #12]
   14200:	str	r0, [sp, #4]
   14204:	ldr	r0, [fp, #16]
   14208:	str	r0, [sp, #8]
   1420c:	ldr	r0, [sp, #76]	; 0x4c
   14210:	b	141cc <__assert_fail@plt+0x2f84>
   14214:	mov	r0, #0
   14218:	str	r0, [fp, #-76]	; 0xffffffb4
   1421c:	ldr	r1, [fp, #-88]	; 0xffffffa8
   14220:	cmp	r1, #0
   14224:	beq	1425c <__assert_fail@plt+0x3014>
   14228:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1422c:	tst	r0, #1
   14230:	bne	1425c <__assert_fail@plt+0x3014>
   14234:	ldrb	r0, [r1]
   14238:	cmp	r0, #0
   1423c:	beq	1425c <__assert_fail@plt+0x3014>
   14240:	add	r1, r1, #1
   14244:	cmp	r8, ip
   14248:	strbcc	r0, [r5, r8]
   1424c:	add	r8, r8, #1
   14250:	ldrb	r0, [r1], #1
   14254:	cmp	r0, #0
   14258:	bne	14244 <__assert_fail@plt+0x2ffc>
   1425c:	cmp	r8, ip
   14260:	movcc	r0, #0
   14264:	strbcc	r0, [r5, r8]
   14268:	mov	r0, r8
   1426c:	sub	sp, fp, #28
   14270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14274:	mov	r0, #4
   14278:	b	14198 <__assert_fail@plt+0x2f50>
   1427c:	mov	r4, r1
   14280:	b	14188 <__assert_fail@plt+0x2f40>
   14284:	bl	11218 <abort@plt>
   14288:	mov	r3, r2
   1428c:	mov	r2, #0
   14290:	b	14294 <__assert_fail@plt+0x304c>
   14294:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14298:	add	fp, sp, #28
   1429c:	sub	sp, sp, #36	; 0x24
   142a0:	movw	r8, #29088	; 0x71a0
   142a4:	cmp	r3, #0
   142a8:	mov	r4, r2
   142ac:	str	r2, [sp, #24]
   142b0:	mov	r5, r1
   142b4:	mov	r6, r0
   142b8:	str	r0, [sp, #20]
   142bc:	movt	r8, #2
   142c0:	movne	r8, r3
   142c4:	bl	11134 <__errno_location@plt>
   142c8:	str	r0, [sp, #28]
   142cc:	ldr	r1, [r8, #40]	; 0x28
   142d0:	ldr	r2, [r8, #44]	; 0x2c
   142d4:	ldr	r7, [r0]
   142d8:	cmp	r4, #0
   142dc:	add	sl, r8, #8
   142e0:	mov	r0, #0
   142e4:	ldm	r8, {r3, r9}
   142e8:	orreq	r9, r9, #1
   142ec:	stm	sp, {r3, r9, sl}
   142f0:	str	r1, [sp, #12]
   142f4:	str	r2, [sp, #16]
   142f8:	mov	r1, #0
   142fc:	mov	r2, r6
   14300:	mov	r3, r5
   14304:	str	r7, [sp, #32]
   14308:	mov	r7, r5
   1430c:	bl	13218 <__assert_fail@plt+0x1fd0>
   14310:	add	r4, r0, #1
   14314:	mov	r5, r0
   14318:	mov	r0, r4
   1431c:	bl	1500c <__assert_fail@plt+0x3dc4>
   14320:	mov	r6, r0
   14324:	ldr	r0, [r8]
   14328:	ldr	r2, [r8, #44]	; 0x2c
   1432c:	ldr	r1, [r8, #40]	; 0x28
   14330:	mov	r3, r7
   14334:	stm	sp, {r0, r9, sl}
   14338:	str	r2, [sp, #16]
   1433c:	ldr	r2, [sp, #20]
   14340:	str	r1, [sp, #12]
   14344:	mov	r0, r6
   14348:	mov	r1, r4
   1434c:	bl	13218 <__assert_fail@plt+0x1fd0>
   14350:	ldr	r0, [sp, #24]
   14354:	ldr	r1, [sp, #32]
   14358:	ldr	r2, [sp, #28]
   1435c:	cmp	r0, #0
   14360:	str	r1, [r2]
   14364:	strne	r5, [r0]
   14368:	mov	r0, r6
   1436c:	sub	sp, fp, #28
   14370:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14374:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14378:	add	fp, sp, #24
   1437c:	movw	r5, #28940	; 0x710c
   14380:	movw	r8, #28936	; 0x7108
   14384:	movt	r5, #2
   14388:	movt	r8, #2
   1438c:	ldr	r0, [r5]
   14390:	ldr	r4, [r8]
   14394:	cmp	r0, #2
   14398:	blt	143c4 <__assert_fail@plt+0x317c>
   1439c:	add	r7, r4, #12
   143a0:	mov	r6, #0
   143a4:	ldr	r0, [r7, r6, lsl #3]
   143a8:	bl	12b10 <__assert_fail@plt+0x18c8>
   143ac:	ldr	r1, [r5]
   143b0:	add	r2, r6, #2
   143b4:	add	r0, r6, #1
   143b8:	mov	r6, r0
   143bc:	cmp	r2, r1
   143c0:	blt	143a4 <__assert_fail@plt+0x315c>
   143c4:	ldr	r0, [r4, #4]
   143c8:	movw	r9, #29136	; 0x71d0
   143cc:	movw	r7, #28944	; 0x7110
   143d0:	movt	r9, #2
   143d4:	movt	r7, #2
   143d8:	cmp	r0, r9
   143dc:	beq	143ec <__assert_fail@plt+0x31a4>
   143e0:	bl	12b10 <__assert_fail@plt+0x18c8>
   143e4:	mov	r0, #256	; 0x100
   143e8:	stm	r7, {r0, r9}
   143ec:	cmp	r4, r7
   143f0:	beq	14400 <__assert_fail@plt+0x31b8>
   143f4:	mov	r0, r4
   143f8:	bl	12b10 <__assert_fail@plt+0x18c8>
   143fc:	str	r7, [r8]
   14400:	mov	r0, #1
   14404:	str	r0, [r5]
   14408:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1440c:	movw	r3, #29088	; 0x71a0
   14410:	mvn	r2, #0
   14414:	movt	r3, #2
   14418:	b	1441c <__assert_fail@plt+0x31d4>
   1441c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14420:	add	fp, sp, #28
   14424:	sub	sp, sp, #44	; 0x2c
   14428:	mov	r7, r3
   1442c:	str	r2, [sp, #36]	; 0x24
   14430:	str	r1, [sp, #32]
   14434:	mov	r5, r0
   14438:	bl	11134 <__errno_location@plt>
   1443c:	cmp	r5, #0
   14440:	bmi	145b0 <__assert_fail@plt+0x3368>
   14444:	cmn	r5, #-2147483647	; 0x80000001
   14448:	beq	145b0 <__assert_fail@plt+0x3368>
   1444c:	movw	r8, #28940	; 0x710c
   14450:	movw	r4, #28936	; 0x7108
   14454:	str	r0, [sp, #28]
   14458:	ldr	r0, [r0]
   1445c:	movt	r8, #2
   14460:	movt	r4, #2
   14464:	ldr	r1, [r8]
   14468:	ldr	r6, [r4]
   1446c:	str	r0, [sp, #24]
   14470:	cmp	r1, r5
   14474:	ble	14480 <__assert_fail@plt+0x3238>
   14478:	mov	sl, r6
   1447c:	b	144ec <__assert_fail@plt+0x32a4>
   14480:	movw	r9, #28944	; 0x7110
   14484:	mov	r0, #8
   14488:	str	r1, [fp, #-32]	; 0xffffffe0
   1448c:	sub	r1, r5, r1
   14490:	mvn	r3, #-2147483648	; 0x80000000
   14494:	movt	r9, #2
   14498:	str	r0, [sp]
   1449c:	add	r2, r1, #1
   144a0:	sub	r1, fp, #32
   144a4:	subs	r0, r6, r9
   144a8:	movne	r0, r6
   144ac:	bl	1513c <__assert_fail@plt+0x3ef4>
   144b0:	mov	sl, r0
   144b4:	cmp	r6, r9
   144b8:	str	r0, [r4]
   144bc:	bne	144c8 <__assert_fail@plt+0x3280>
   144c0:	ldrd	r0, [r9]
   144c4:	stm	sl, {r0, r1}
   144c8:	ldr	r1, [r8]
   144cc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   144d0:	add	r0, sl, r1, lsl #3
   144d4:	sub	r1, r2, r1
   144d8:	lsl	r2, r1, #3
   144dc:	mov	r1, #0
   144e0:	bl	1114c <memset@plt>
   144e4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   144e8:	str	r0, [r8]
   144ec:	mov	r9, sl
   144f0:	ldm	r7, {r0, r1}
   144f4:	orr	r8, r1, #1
   144f8:	add	r1, r7, #8
   144fc:	ldr	r2, [r7, #40]	; 0x28
   14500:	ldr	r3, [r7, #44]	; 0x2c
   14504:	ldr	r6, [r9, r5, lsl #3]!
   14508:	str	r1, [sp, #20]
   1450c:	ldr	r4, [r9, #4]!
   14510:	stm	sp, {r0, r8}
   14514:	add	r0, sp, #8
   14518:	stm	r0, {r1, r2, r3}
   1451c:	ldr	r2, [sp, #32]
   14520:	ldr	r3, [sp, #36]	; 0x24
   14524:	mov	r1, r6
   14528:	mov	r0, r4
   1452c:	bl	13218 <__assert_fail@plt+0x1fd0>
   14530:	cmp	r6, r0
   14534:	bhi	14598 <__assert_fail@plt+0x3350>
   14538:	add	r6, r0, #1
   1453c:	movw	r0, #29136	; 0x71d0
   14540:	movt	r0, #2
   14544:	str	r6, [sl, r5, lsl #3]
   14548:	cmp	r4, r0
   1454c:	beq	14558 <__assert_fail@plt+0x3310>
   14550:	mov	r0, r4
   14554:	bl	12b10 <__assert_fail@plt+0x18c8>
   14558:	mov	r0, r6
   1455c:	bl	1500c <__assert_fail@plt+0x3dc4>
   14560:	str	r0, [r9]
   14564:	mov	r4, r0
   14568:	add	r3, sp, #8
   1456c:	ldr	r0, [r7]
   14570:	ldr	r1, [r7, #40]	; 0x28
   14574:	ldr	r2, [r7, #44]	; 0x2c
   14578:	stm	sp, {r0, r8}
   1457c:	ldr	r0, [sp, #20]
   14580:	stm	r3, {r0, r1, r2}
   14584:	ldr	r2, [sp, #32]
   14588:	ldr	r3, [sp, #36]	; 0x24
   1458c:	mov	r0, r4
   14590:	mov	r1, r6
   14594:	bl	13218 <__assert_fail@plt+0x1fd0>
   14598:	ldr	r0, [sp, #28]
   1459c:	ldr	r1, [sp, #24]
   145a0:	str	r1, [r0]
   145a4:	mov	r0, r4
   145a8:	sub	sp, fp, #28
   145ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145b0:	bl	11218 <abort@plt>
   145b4:	movw	r3, #29088	; 0x71a0
   145b8:	movt	r3, #2
   145bc:	b	1441c <__assert_fail@plt+0x31d4>
   145c0:	movw	r3, #29088	; 0x71a0
   145c4:	mov	r1, r0
   145c8:	mov	r0, #0
   145cc:	mvn	r2, #0
   145d0:	movt	r3, #2
   145d4:	b	1441c <__assert_fail@plt+0x31d4>
   145d8:	movw	r3, #29088	; 0x71a0
   145dc:	mov	r2, r1
   145e0:	mov	r1, r0
   145e4:	mov	r0, #0
   145e8:	movt	r3, #2
   145ec:	b	1441c <__assert_fail@plt+0x31d4>
   145f0:	push	{fp, lr}
   145f4:	mov	fp, sp
   145f8:	sub	sp, sp, #48	; 0x30
   145fc:	vmov.i32	q8, #0	; 0x00000000
   14600:	mov	ip, #32
   14604:	mov	r3, sp
   14608:	mov	lr, r2
   1460c:	cmp	r1, #10
   14610:	add	r2, r3, #16
   14614:	vst1.64	{d16-d17}, [r3], ip
   14618:	vst1.64	{d16-d17}, [r2]
   1461c:	vst1.64	{d16-d17}, [r3]
   14620:	beq	14640 <__assert_fail@plt+0x33f8>
   14624:	str	r1, [sp]
   14628:	mov	r3, sp
   1462c:	mov	r1, lr
   14630:	mvn	r2, #0
   14634:	bl	1441c <__assert_fail@plt+0x31d4>
   14638:	mov	sp, fp
   1463c:	pop	{fp, pc}
   14640:	bl	11218 <abort@plt>
   14644:	push	{r4, sl, fp, lr}
   14648:	add	fp, sp, #8
   1464c:	sub	sp, sp, #48	; 0x30
   14650:	vmov.i32	q8, #0	; 0x00000000
   14654:	mov	ip, r3
   14658:	mov	r3, sp
   1465c:	mov	lr, #32
   14660:	cmp	r1, #10
   14664:	add	r4, r3, #16
   14668:	vst1.64	{d16-d17}, [r3], lr
   1466c:	vst1.64	{d16-d17}, [r4]
   14670:	vst1.64	{d16-d17}, [r3]
   14674:	beq	14694 <__assert_fail@plt+0x344c>
   14678:	str	r1, [sp]
   1467c:	mov	r1, r2
   14680:	mov	r3, sp
   14684:	mov	r2, ip
   14688:	bl	1441c <__assert_fail@plt+0x31d4>
   1468c:	sub	sp, fp, #8
   14690:	pop	{r4, sl, fp, pc}
   14694:	bl	11218 <abort@plt>
   14698:	mov	r2, r1
   1469c:	mov	r1, r0
   146a0:	mov	r0, #0
   146a4:	b	145f0 <__assert_fail@plt+0x33a8>
   146a8:	mov	r3, r2
   146ac:	mov	r2, r1
   146b0:	mov	r1, r0
   146b4:	mov	r0, #0
   146b8:	b	14644 <__assert_fail@plt+0x33fc>
   146bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   146c0:	add	fp, sp, #24
   146c4:	sub	sp, sp, #48	; 0x30
   146c8:	movw	r8, #29088	; 0x71a0
   146cc:	mov	lr, r0
   146d0:	mov	r3, sp
   146d4:	mov	ip, r1
   146d8:	movt	r8, #2
   146dc:	mov	r1, r3
   146e0:	ldm	r8!, {r0, r4, r5, r6, r7, r9}
   146e4:	stmia	r1!, {r0, r4, r5, r6, r7, r9}
   146e8:	ldm	r8, {r0, r4, r5, r6, r7, r9}
   146ec:	stm	r1, {r0, r4, r5, r6, r7, r9}
   146f0:	ubfx	r0, r2, #5, #3
   146f4:	and	r2, r2, #31
   146f8:	mov	r4, #1
   146fc:	add	r0, r3, r0, lsl #2
   14700:	ldr	r1, [r0, #8]
   14704:	bic	r4, r4, r1, lsr r2
   14708:	eor	r1, r1, r4, lsl r2
   1470c:	mov	r2, ip
   14710:	str	r1, [r0, #8]
   14714:	mov	r0, #0
   14718:	mov	r1, lr
   1471c:	bl	1441c <__assert_fail@plt+0x31d4>
   14720:	sub	sp, fp, #24
   14724:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14728:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1472c:	add	fp, sp, #24
   14730:	sub	sp, sp, #48	; 0x30
   14734:	movw	lr, #29088	; 0x71a0
   14738:	mov	ip, r0
   1473c:	mov	r3, sp
   14740:	movt	lr, #2
   14744:	mov	r2, r3
   14748:	ldm	lr!, {r0, r4, r5, r6, r7, r8}
   1474c:	stmia	r2!, {r0, r4, r5, r6, r7, r8}
   14750:	ldm	lr, {r0, r4, r5, r6, r7, r8}
   14754:	stm	r2, {r0, r4, r5, r6, r7, r8}
   14758:	ubfx	r0, r1, #5, #3
   1475c:	and	r1, r1, #31
   14760:	mov	r7, #1
   14764:	add	r0, r3, r0, lsl #2
   14768:	ldr	r2, [r0, #8]
   1476c:	bic	r7, r7, r2, lsr r1
   14770:	eor	r1, r2, r7, lsl r1
   14774:	mvn	r2, #0
   14778:	str	r1, [r0, #8]
   1477c:	mov	r0, #0
   14780:	mov	r1, ip
   14784:	bl	1441c <__assert_fail@plt+0x31d4>
   14788:	sub	sp, fp, #24
   1478c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14790:	push	{r4, r5, r6, r7, fp, lr}
   14794:	add	fp, sp, #16
   14798:	sub	sp, sp, #48	; 0x30
   1479c:	movw	lr, #29088	; 0x71a0
   147a0:	mov	ip, r0
   147a4:	mov	r3, sp
   147a8:	movt	lr, #2
   147ac:	mov	r2, r3
   147b0:	ldm	lr!, {r0, r1, r4, r5, r6, r7}
   147b4:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   147b8:	ldm	lr, {r0, r1, r4, r5, r6, r7}
   147bc:	stm	r2, {r0, r1, r4, r5, r6, r7}
   147c0:	mov	r1, ip
   147c4:	mvn	r2, #0
   147c8:	ldr	r0, [sp, #12]
   147cc:	orr	r0, r0, #67108864	; 0x4000000
   147d0:	str	r0, [sp, #12]
   147d4:	mov	r0, #0
   147d8:	bl	1441c <__assert_fail@plt+0x31d4>
   147dc:	sub	sp, fp, #16
   147e0:	pop	{r4, r5, r6, r7, fp, pc}
   147e4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   147e8:	add	fp, sp, #24
   147ec:	sub	sp, sp, #48	; 0x30
   147f0:	movw	r8, #29088	; 0x71a0
   147f4:	mov	ip, r1
   147f8:	mov	lr, r0
   147fc:	mov	r3, sp
   14800:	movt	r8, #2
   14804:	mov	r2, r3
   14808:	ldm	r8!, {r0, r1, r4, r5, r6, r7}
   1480c:	stmia	r2!, {r0, r1, r4, r5, r6, r7}
   14810:	ldm	r8, {r0, r1, r4, r5, r6, r7}
   14814:	stm	r2, {r0, r1, r4, r5, r6, r7}
   14818:	mov	r1, lr
   1481c:	mov	r2, ip
   14820:	ldr	r0, [sp, #12]
   14824:	orr	r0, r0, #67108864	; 0x4000000
   14828:	str	r0, [sp, #12]
   1482c:	mov	r0, #0
   14830:	bl	1441c <__assert_fail@plt+0x31d4>
   14834:	sub	sp, fp, #24
   14838:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1483c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14840:	add	fp, sp, #24
   14844:	sub	sp, sp, #96	; 0x60
   14848:	vmov.i32	q8, #0	; 0x00000000
   1484c:	mov	lr, sp
   14850:	mov	ip, r2
   14854:	cmp	r1, #10
   14858:	add	r3, lr, #16
   1485c:	mov	r2, lr
   14860:	vst1.64	{d16-d17}, [r3]
   14864:	mov	r3, #28
   14868:	vst1.64	{d16-d17}, [r2], r3
   1486c:	vst1.32	{d16-d17}, [r2]
   14870:	beq	148b0 <__assert_fail@plt+0x3668>
   14874:	str	r1, [sp, #48]	; 0x30
   14878:	add	r3, sp, #48	; 0x30
   1487c:	ldm	lr!, {r2, r4, r5, r6, r7}
   14880:	add	r1, r3, #4
   14884:	stmia	r1!, {r2, r4, r5, r6, r7}
   14888:	ldm	lr, {r2, r4, r5, r6, r7, r8}
   1488c:	stm	r1, {r2, r4, r5, r6, r7, r8}
   14890:	mvn	r2, #0
   14894:	ldr	r1, [sp, #60]	; 0x3c
   14898:	orr	r1, r1, #67108864	; 0x4000000
   1489c:	str	r1, [sp, #60]	; 0x3c
   148a0:	mov	r1, ip
   148a4:	bl	1441c <__assert_fail@plt+0x31d4>
   148a8:	sub	sp, fp, #24
   148ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   148b0:	bl	11218 <abort@plt>
   148b4:	push	{fp, lr}
   148b8:	mov	fp, sp
   148bc:	sub	sp, sp, #8
   148c0:	mvn	ip, #0
   148c4:	str	ip, [sp]
   148c8:	bl	148d4 <__assert_fail@plt+0x368c>
   148cc:	mov	sp, fp
   148d0:	pop	{fp, pc}
   148d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   148d8:	add	fp, sp, #24
   148dc:	sub	sp, sp, #48	; 0x30
   148e0:	movw	ip, #29088	; 0x71a0
   148e4:	mov	lr, r3
   148e8:	mov	r3, sp
   148ec:	cmp	r1, #0
   148f0:	movt	ip, #2
   148f4:	cmpne	r2, #0
   148f8:	ldm	ip!, {r4, r5, r6, r7, r8, r9}
   148fc:	stmia	r3!, {r4, r5, r6, r7, r8, r9}
   14900:	ldm	ip, {r4, r5, r6, r7, r8, r9}
   14904:	stm	r3, {r4, r5, r6, r7, r8, r9}
   14908:	mov	r3, #10
   1490c:	str	r3, [sp]
   14910:	bne	14918 <__assert_fail@plt+0x36d0>
   14914:	bl	11218 <abort@plt>
   14918:	ldr	ip, [fp, #8]
   1491c:	str	r2, [sp, #44]	; 0x2c
   14920:	str	r1, [sp, #40]	; 0x28
   14924:	mov	r3, sp
   14928:	mov	r1, lr
   1492c:	mov	r2, ip
   14930:	bl	1441c <__assert_fail@plt+0x31d4>
   14934:	sub	sp, fp, #24
   14938:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	sub	sp, sp, #8
   14948:	mov	r3, r2
   1494c:	mov	r2, r1
   14950:	mov	r1, r0
   14954:	mvn	r0, #0
   14958:	str	r0, [sp]
   1495c:	mov	r0, #0
   14960:	bl	148d4 <__assert_fail@plt+0x368c>
   14964:	mov	sp, fp
   14968:	pop	{fp, pc}
   1496c:	push	{fp, lr}
   14970:	mov	fp, sp
   14974:	sub	sp, sp, #8
   14978:	mov	ip, r2
   1497c:	mov	r2, r1
   14980:	mov	r1, r0
   14984:	str	r3, [sp]
   14988:	mov	r0, #0
   1498c:	mov	r3, ip
   14990:	bl	148d4 <__assert_fail@plt+0x368c>
   14994:	mov	sp, fp
   14998:	pop	{fp, pc}
   1499c:	movw	r3, #28952	; 0x7118
   149a0:	movt	r3, #2
   149a4:	b	1441c <__assert_fail@plt+0x31d4>
   149a8:	movw	r3, #28952	; 0x7118
   149ac:	mov	r2, r1
   149b0:	mov	r1, r0
   149b4:	mov	r0, #0
   149b8:	movt	r3, #2
   149bc:	b	1441c <__assert_fail@plt+0x31d4>
   149c0:	movw	r3, #28952	; 0x7118
   149c4:	mvn	r2, #0
   149c8:	movt	r3, #2
   149cc:	b	1441c <__assert_fail@plt+0x31d4>
   149d0:	movw	r3, #28952	; 0x7118
   149d4:	mov	r1, r0
   149d8:	mov	r0, #0
   149dc:	mvn	r2, #0
   149e0:	movt	r3, #2
   149e4:	b	1441c <__assert_fail@plt+0x31d4>
   149e8:	push	{r4, r5, fp, lr}
   149ec:	add	fp, sp, #8
   149f0:	mov	r5, r0
   149f4:	mov	r4, r1
   149f8:	mov	r0, #0
   149fc:	mov	r2, #5
   14a00:	mov	r1, r5
   14a04:	bl	11038 <dcgettext@plt>
   14a08:	cmp	r0, r5
   14a0c:	popne	{r4, r5, fp, pc}
   14a10:	bl	15710 <__assert_fail@plt+0x44c8>
   14a14:	ldrb	r1, [r0]
   14a18:	and	r1, r1, #223	; 0xdf
   14a1c:	cmp	r1, #71	; 0x47
   14a20:	beq	14a88 <__assert_fail@plt+0x3840>
   14a24:	cmp	r1, #85	; 0x55
   14a28:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a2c:	ldrb	r1, [r0, #1]
   14a30:	and	r1, r1, #223	; 0xdf
   14a34:	cmp	r1, #84	; 0x54
   14a38:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a3c:	ldrb	r1, [r0, #2]
   14a40:	and	r1, r1, #223	; 0xdf
   14a44:	cmp	r1, #70	; 0x46
   14a48:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a4c:	ldrb	r1, [r0, #3]
   14a50:	cmp	r1, #45	; 0x2d
   14a54:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a58:	ldrb	r1, [r0, #4]
   14a5c:	cmp	r1, #56	; 0x38
   14a60:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a64:	ldrb	r0, [r0, #5]
   14a68:	cmp	r0, #0
   14a6c:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a70:	ldrb	r1, [r5]
   14a74:	movw	r2, #26215	; 0x6667
   14a78:	movw	r0, #26219	; 0x666b
   14a7c:	movt	r2, #1
   14a80:	movt	r0, #1
   14a84:	b	14b10 <__assert_fail@plt+0x38c8>
   14a88:	ldrb	r1, [r0, #1]
   14a8c:	and	r1, r1, #223	; 0xdf
   14a90:	cmp	r1, #66	; 0x42
   14a94:	bne	14ae0 <__assert_fail@plt+0x3898>
   14a98:	ldrb	r1, [r0, #2]
   14a9c:	cmp	r1, #49	; 0x31
   14aa0:	bne	14ae0 <__assert_fail@plt+0x3898>
   14aa4:	ldrb	r1, [r0, #3]
   14aa8:	cmp	r1, #56	; 0x38
   14aac:	bne	14ae0 <__assert_fail@plt+0x3898>
   14ab0:	ldrb	r1, [r0, #4]
   14ab4:	cmp	r1, #48	; 0x30
   14ab8:	bne	14ae0 <__assert_fail@plt+0x3898>
   14abc:	ldrb	r1, [r0, #5]
   14ac0:	cmp	r1, #51	; 0x33
   14ac4:	bne	14ae0 <__assert_fail@plt+0x3898>
   14ac8:	ldrb	r1, [r0, #6]
   14acc:	cmp	r1, #48	; 0x30
   14ad0:	bne	14ae0 <__assert_fail@plt+0x3898>
   14ad4:	ldrb	r0, [r0, #7]
   14ad8:	cmp	r0, #0
   14adc:	beq	14afc <__assert_fail@plt+0x38b4>
   14ae0:	movw	r1, #26209	; 0x6661
   14ae4:	movw	r0, #26213	; 0x6665
   14ae8:	cmp	r4, #9
   14aec:	movt	r1, #1
   14af0:	movt	r0, #1
   14af4:	moveq	r0, r1
   14af8:	pop	{r4, r5, fp, pc}
   14afc:	ldrb	r1, [r5]
   14b00:	movw	r2, #26223	; 0x666f
   14b04:	movw	r0, #26227	; 0x6673
   14b08:	movt	r2, #1
   14b0c:	movt	r0, #1
   14b10:	cmp	r1, #96	; 0x60
   14b14:	moveq	r0, r2
   14b18:	pop	{r4, r5, fp, pc}
   14b1c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14b20:	add	fp, sp, #24
   14b24:	sub	sp, sp, #32
   14b28:	ldr	r6, [fp, #12]
   14b2c:	ldr	r7, [fp, #8]
   14b30:	mov	r4, r2
   14b34:	mov	r8, r0
   14b38:	cmp	r1, #0
   14b3c:	beq	14b64 <__assert_fail@plt+0x391c>
   14b40:	movw	r2, #26316	; 0x66cc
   14b44:	mov	r5, r1
   14b48:	str	r3, [sp, #4]
   14b4c:	str	r4, [sp]
   14b50:	mov	r0, r8
   14b54:	mov	r1, #1
   14b58:	movt	r2, #1
   14b5c:	mov	r3, r5
   14b60:	b	14b7c <__assert_fail@plt+0x3934>
   14b64:	movw	r2, #26328	; 0x66d8
   14b68:	str	r3, [sp]
   14b6c:	mov	r0, r8
   14b70:	mov	r1, #1
   14b74:	mov	r3, r4
   14b78:	movt	r2, #1
   14b7c:	bl	1117c <__fprintf_chk@plt>
   14b80:	movw	r1, #26335	; 0x66df
   14b84:	mov	r0, #0
   14b88:	mov	r2, #5
   14b8c:	movt	r1, #1
   14b90:	bl	11038 <dcgettext@plt>
   14b94:	movw	r2, #27053	; 0x69ad
   14b98:	mov	r3, r0
   14b9c:	movw	r0, #2022	; 0x7e6
   14ba0:	mov	r1, #1
   14ba4:	movt	r2, #1
   14ba8:	str	r0, [sp]
   14bac:	mov	r0, r8
   14bb0:	bl	1117c <__fprintf_chk@plt>
   14bb4:	movw	r4, #25274	; 0x62ba
   14bb8:	mov	r1, r8
   14bbc:	movt	r4, #1
   14bc0:	mov	r0, r4
   14bc4:	bl	10fa8 <fputs_unlocked@plt>
   14bc8:	movw	r1, #26339	; 0x66e3
   14bcc:	mov	r0, #0
   14bd0:	mov	r2, #5
   14bd4:	movt	r1, #1
   14bd8:	bl	11038 <dcgettext@plt>
   14bdc:	movw	r3, #26510	; 0x678e
   14be0:	mov	r2, r0
   14be4:	mov	r0, r8
   14be8:	mov	r1, #1
   14bec:	movt	r3, #1
   14bf0:	bl	1117c <__fprintf_chk@plt>
   14bf4:	mov	r0, r4
   14bf8:	mov	r1, r8
   14bfc:	bl	10fa8 <fputs_unlocked@plt>
   14c00:	cmp	r6, #9
   14c04:	bhi	14c68 <__assert_fail@plt+0x3a20>
   14c08:	add	r0, pc, #0
   14c0c:	ldr	pc, [r0, r6, lsl #2]
   14c10:	andeq	r4, r1, r0, asr #28
   14c14:	andeq	r4, r1, r8, lsr ip
   14c18:	andeq	r4, r1, r4, ror ip
   14c1c:	muleq	r1, ip, ip
   14c20:	andeq	r4, r1, r4, asr #25
   14c24:	andeq	r4, r1, ip, ror #25
   14c28:	andeq	r4, r1, r4, lsl sp
   14c2c:	andeq	r4, r1, ip, asr #26
   14c30:	andeq	r4, r1, ip, ror #27
   14c34:	muleq	r1, r4, sp
   14c38:	movw	r1, #26544	; 0x67b0
   14c3c:	mov	r0, #0
   14c40:	mov	r2, #5
   14c44:	movt	r1, #1
   14c48:	bl	11038 <dcgettext@plt>
   14c4c:	ldr	r3, [r7]
   14c50:	mov	r2, r0
   14c54:	mov	r0, r8
   14c58:	mov	r1, #1
   14c5c:	sub	sp, fp, #24
   14c60:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c64:	b	1117c <__fprintf_chk@plt>
   14c68:	movw	r1, #26863	; 0x68ef
   14c6c:	movt	r1, #1
   14c70:	b	14d9c <__assert_fail@plt+0x3b54>
   14c74:	movw	r1, #26560	; 0x67c0
   14c78:	mov	r0, #0
   14c7c:	mov	r2, #5
   14c80:	movt	r1, #1
   14c84:	bl	11038 <dcgettext@plt>
   14c88:	mov	r2, r0
   14c8c:	ldr	r3, [r7]
   14c90:	ldr	r0, [r7, #4]
   14c94:	str	r0, [sp]
   14c98:	b	14d88 <__assert_fail@plt+0x3b40>
   14c9c:	movw	r1, #26583	; 0x67d7
   14ca0:	mov	r0, #0
   14ca4:	mov	r2, #5
   14ca8:	movt	r1, #1
   14cac:	bl	11038 <dcgettext@plt>
   14cb0:	mov	r2, r0
   14cb4:	ldr	r3, [r7]
   14cb8:	ldmib	r7, {r0, r1}
   14cbc:	stm	sp, {r0, r1}
   14cc0:	b	14d88 <__assert_fail@plt+0x3b40>
   14cc4:	movw	r1, #26611	; 0x67f3
   14cc8:	mov	r0, #0
   14ccc:	mov	r2, #5
   14cd0:	movt	r1, #1
   14cd4:	bl	11038 <dcgettext@plt>
   14cd8:	ldr	r3, [r7]
   14cdc:	mov	r2, r0
   14ce0:	ldmib	r7, {r0, r1, r7}
   14ce4:	stm	sp, {r0, r1, r7}
   14ce8:	b	14d88 <__assert_fail@plt+0x3b40>
   14cec:	movw	r1, #26643	; 0x6813
   14cf0:	mov	r0, #0
   14cf4:	mov	r2, #5
   14cf8:	movt	r1, #1
   14cfc:	bl	11038 <dcgettext@plt>
   14d00:	ldr	r3, [r7]
   14d04:	mov	r2, r0
   14d08:	ldmib	r7, {r0, r1, r6, r7}
   14d0c:	stm	sp, {r0, r1, r6, r7}
   14d10:	b	14d88 <__assert_fail@plt+0x3b40>
   14d14:	movw	r1, #26679	; 0x6837
   14d18:	mov	r0, #0
   14d1c:	mov	r2, #5
   14d20:	movt	r1, #1
   14d24:	bl	11038 <dcgettext@plt>
   14d28:	mov	r2, r0
   14d2c:	ldr	r3, [r7]
   14d30:	ldmib	r7, {r0, r1, r6}
   14d34:	ldr	r5, [r7, #16]
   14d38:	ldr	r7, [r7, #20]
   14d3c:	stm	sp, {r0, r1, r6}
   14d40:	str	r5, [sp, #12]
   14d44:	str	r7, [sp, #16]
   14d48:	b	14d88 <__assert_fail@plt+0x3b40>
   14d4c:	movw	r1, #26719	; 0x685f
   14d50:	mov	r0, #0
   14d54:	mov	r2, #5
   14d58:	movt	r1, #1
   14d5c:	bl	11038 <dcgettext@plt>
   14d60:	mov	r2, r0
   14d64:	ldr	r3, [r7]
   14d68:	ldmib	r7, {r0, r1, r6}
   14d6c:	ldr	r5, [r7, #16]
   14d70:	ldr	r4, [r7, #20]
   14d74:	ldr	r7, [r7, #24]
   14d78:	stm	sp, {r0, r1, r6}
   14d7c:	str	r5, [sp, #12]
   14d80:	str	r4, [sp, #16]
   14d84:	str	r7, [sp, #20]
   14d88:	mov	r0, r8
   14d8c:	mov	r1, #1
   14d90:	b	14e3c <__assert_fail@plt+0x3bf4>
   14d94:	movw	r1, #26811	; 0x68bb
   14d98:	movt	r1, #1
   14d9c:	mov	r0, #0
   14da0:	mov	r2, #5
   14da4:	bl	11038 <dcgettext@plt>
   14da8:	mov	ip, r0
   14dac:	ldr	r3, [r7]
   14db0:	ldr	r0, [r7, #4]
   14db4:	ldr	r1, [r7, #8]
   14db8:	ldr	r6, [r7, #12]
   14dbc:	ldr	r5, [r7, #16]
   14dc0:	ldr	r4, [r7, #20]
   14dc4:	ldr	r2, [r7, #24]
   14dc8:	ldr	lr, [r7, #28]
   14dcc:	ldr	r7, [r7, #32]
   14dd0:	stm	sp, {r0, r1, r6}
   14dd4:	str	r5, [sp, #12]
   14dd8:	str	r4, [sp, #16]
   14ddc:	str	r2, [sp, #20]
   14de0:	str	lr, [sp, #24]
   14de4:	str	r7, [sp, #28]
   14de8:	b	14e30 <__assert_fail@plt+0x3be8>
   14dec:	movw	r1, #26763	; 0x688b
   14df0:	mov	r0, #0
   14df4:	mov	r2, #5
   14df8:	movt	r1, #1
   14dfc:	bl	11038 <dcgettext@plt>
   14e00:	mov	ip, r0
   14e04:	ldr	r3, [r7]
   14e08:	ldmib	r7, {r0, r1, r6}
   14e0c:	ldr	r5, [r7, #16]
   14e10:	ldr	r4, [r7, #20]
   14e14:	ldr	r2, [r7, #24]
   14e18:	ldr	r7, [r7, #28]
   14e1c:	stm	sp, {r0, r1, r6}
   14e20:	str	r5, [sp, #12]
   14e24:	str	r4, [sp, #16]
   14e28:	str	r2, [sp, #20]
   14e2c:	str	r7, [sp, #24]
   14e30:	mov	r0, r8
   14e34:	mov	r1, #1
   14e38:	mov	r2, ip
   14e3c:	bl	1117c <__fprintf_chk@plt>
   14e40:	sub	sp, fp, #24
   14e44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14e48:	push	{r4, sl, fp, lr}
   14e4c:	add	fp, sp, #8
   14e50:	sub	sp, sp, #8
   14e54:	ldr	ip, [fp, #8]
   14e58:	mov	lr, #0
   14e5c:	ldr	r4, [ip, lr, lsl #2]
   14e60:	add	lr, lr, #1
   14e64:	cmp	r4, #0
   14e68:	bne	14e5c <__assert_fail@plt+0x3c14>
   14e6c:	sub	r4, lr, #1
   14e70:	str	ip, [sp]
   14e74:	str	r4, [sp, #4]
   14e78:	bl	14b1c <__assert_fail@plt+0x38d4>
   14e7c:	sub	sp, fp, #8
   14e80:	pop	{r4, sl, fp, pc}
   14e84:	push	{r4, r5, fp, lr}
   14e88:	add	fp, sp, #8
   14e8c:	sub	sp, sp, #48	; 0x30
   14e90:	ldr	r4, [fp, #8]
   14e94:	mov	ip, #0
   14e98:	add	lr, sp, #8
   14e9c:	ldr	r5, [r4]
   14ea0:	cmp	r5, #0
   14ea4:	str	r5, [lr, ip, lsl #2]
   14ea8:	beq	14ec0 <__assert_fail@plt+0x3c78>
   14eac:	add	ip, ip, #1
   14eb0:	add	r4, r4, #4
   14eb4:	cmp	ip, #10
   14eb8:	bne	14e9c <__assert_fail@plt+0x3c54>
   14ebc:	mov	ip, #10
   14ec0:	str	lr, [sp]
   14ec4:	str	ip, [sp, #4]
   14ec8:	bl	14b1c <__assert_fail@plt+0x38d4>
   14ecc:	sub	sp, fp, #8
   14ed0:	pop	{r4, r5, fp, pc}
   14ed4:	push	{fp, lr}
   14ed8:	mov	fp, sp
   14edc:	sub	sp, sp, #8
   14ee0:	add	ip, fp, #8
   14ee4:	str	ip, [sp, #4]
   14ee8:	str	ip, [sp]
   14eec:	bl	14e84 <__assert_fail@plt+0x3c3c>
   14ef0:	mov	sp, fp
   14ef4:	pop	{fp, pc}
   14ef8:	push	{fp, lr}
   14efc:	mov	fp, sp
   14f00:	movw	r0, #29028	; 0x7164
   14f04:	movt	r0, #2
   14f08:	ldr	r1, [r0]
   14f0c:	movw	r0, #25274	; 0x62ba
   14f10:	movt	r0, #1
   14f14:	bl	10fa8 <fputs_unlocked@plt>
   14f18:	movw	r1, #26923	; 0x692b
   14f1c:	mov	r0, #0
   14f20:	mov	r2, #5
   14f24:	movt	r1, #1
   14f28:	bl	11038 <dcgettext@plt>
   14f2c:	movw	r2, #26943	; 0x693f
   14f30:	mov	r1, r0
   14f34:	mov	r0, #1
   14f38:	movt	r2, #1
   14f3c:	bl	11164 <__printf_chk@plt>
   14f40:	movw	r1, #26965	; 0x6955
   14f44:	mov	r0, #0
   14f48:	mov	r2, #5
   14f4c:	movt	r1, #1
   14f50:	bl	11038 <dcgettext@plt>
   14f54:	movw	r2, #24579	; 0x6003
   14f58:	movw	r3, #25083	; 0x61fb
   14f5c:	mov	r1, r0
   14f60:	mov	r0, #1
   14f64:	movt	r2, #1
   14f68:	movt	r3, #1
   14f6c:	bl	11164 <__printf_chk@plt>
   14f70:	movw	r1, #26985	; 0x6969
   14f74:	mov	r0, #0
   14f78:	mov	r2, #5
   14f7c:	movt	r1, #1
   14f80:	bl	11038 <dcgettext@plt>
   14f84:	movw	r2, #27024	; 0x6990
   14f88:	mov	r1, r0
   14f8c:	mov	r0, #1
   14f90:	movt	r2, #1
   14f94:	pop	{fp, lr}
   14f98:	b	11164 <__printf_chk@plt>
   14f9c:	b	14fa0 <__assert_fail@plt+0x3d58>
   14fa0:	push	{r4, r5, r6, sl, fp, lr}
   14fa4:	add	fp, sp, #16
   14fa8:	mov	r4, r2
   14fac:	mov	r5, r1
   14fb0:	mov	r6, r0
   14fb4:	bl	157ac <__assert_fail@plt+0x4564>
   14fb8:	cmp	r0, #0
   14fbc:	popne	{r4, r5, r6, sl, fp, pc}
   14fc0:	cmp	r6, #0
   14fc4:	beq	14fd8 <__assert_fail@plt+0x3d90>
   14fc8:	cmp	r5, #0
   14fcc:	cmpne	r4, #0
   14fd0:	bne	14fd8 <__assert_fail@plt+0x3d90>
   14fd4:	pop	{r4, r5, r6, sl, fp, pc}
   14fd8:	bl	15408 <__assert_fail@plt+0x41c0>
   14fdc:	push	{fp, lr}
   14fe0:	mov	fp, sp
   14fe4:	bl	154a0 <__assert_fail@plt+0x4258>
   14fe8:	cmp	r0, #0
   14fec:	popne	{fp, pc}
   14ff0:	bl	15408 <__assert_fail@plt+0x41c0>
   14ff4:	push	{fp, lr}
   14ff8:	mov	fp, sp
   14ffc:	bl	154a0 <__assert_fail@plt+0x4258>
   15000:	cmp	r0, #0
   15004:	popne	{fp, pc}
   15008:	bl	15408 <__assert_fail@plt+0x41c0>
   1500c:	push	{fp, lr}
   15010:	mov	fp, sp
   15014:	bl	154a0 <__assert_fail@plt+0x4258>
   15018:	cmp	r0, #0
   1501c:	popne	{fp, pc}
   15020:	bl	15408 <__assert_fail@plt+0x41c0>
   15024:	push	{r4, r5, fp, lr}
   15028:	add	fp, sp, #8
   1502c:	mov	r4, r1
   15030:	mov	r5, r0
   15034:	bl	154d0 <__assert_fail@plt+0x4288>
   15038:	cmp	r0, #0
   1503c:	popne	{r4, r5, fp, pc}
   15040:	cmp	r5, #0
   15044:	beq	15054 <__assert_fail@plt+0x3e0c>
   15048:	cmp	r4, #0
   1504c:	bne	15054 <__assert_fail@plt+0x3e0c>
   15050:	pop	{r4, r5, fp, pc}
   15054:	bl	15408 <__assert_fail@plt+0x41c0>
   15058:	push	{fp, lr}
   1505c:	mov	fp, sp
   15060:	cmp	r1, #0
   15064:	orreq	r1, r1, #1
   15068:	bl	154d0 <__assert_fail@plt+0x4288>
   1506c:	cmp	r0, #0
   15070:	popne	{fp, pc}
   15074:	bl	15408 <__assert_fail@plt+0x41c0>
   15078:	push	{fp, lr}
   1507c:	mov	fp, sp
   15080:	clz	r3, r2
   15084:	lsr	ip, r3, #5
   15088:	clz	r3, r1
   1508c:	lsr	r3, r3, #5
   15090:	orrs	r3, r3, ip
   15094:	movwne	r1, #1
   15098:	movwne	r2, #1
   1509c:	bl	157ac <__assert_fail@plt+0x4564>
   150a0:	cmp	r0, #0
   150a4:	popne	{fp, pc}
   150a8:	bl	15408 <__assert_fail@plt+0x41c0>
   150ac:	push	{fp, lr}
   150b0:	mov	fp, sp
   150b4:	mov	r2, r1
   150b8:	mov	r1, r0
   150bc:	mov	r0, #0
   150c0:	bl	157ac <__assert_fail@plt+0x4564>
   150c4:	cmp	r0, #0
   150c8:	popne	{fp, pc}
   150cc:	bl	15408 <__assert_fail@plt+0x41c0>
   150d0:	mov	r2, r1
   150d4:	mov	r1, r0
   150d8:	mov	r0, #0
   150dc:	b	15078 <__assert_fail@plt+0x3e30>
   150e0:	mov	r2, #1
   150e4:	b	150e8 <__assert_fail@plt+0x3ea0>
   150e8:	push	{r4, r5, fp, lr}
   150ec:	add	fp, sp, #8
   150f0:	ldr	r5, [r1]
   150f4:	mov	r4, r1
   150f8:	cmp	r0, #0
   150fc:	beq	15114 <__assert_fail@plt+0x3ecc>
   15100:	mov	r1, #1
   15104:	add	r1, r1, r5, lsr #1
   15108:	adds	r5, r5, r1
   1510c:	bcc	1512c <__assert_fail@plt+0x3ee4>
   15110:	bl	15408 <__assert_fail@plt+0x41c0>
   15114:	cmp	r5, #0
   15118:	bne	1512c <__assert_fail@plt+0x3ee4>
   1511c:	mov	r1, #64	; 0x40
   15120:	cmp	r2, #64	; 0x40
   15124:	udiv	r5, r1, r2
   15128:	addhi	r5, r5, #1
   1512c:	mov	r1, r5
   15130:	bl	14fa0 <__assert_fail@plt+0x3d58>
   15134:	str	r5, [r4]
   15138:	pop	{r4, r5, fp, pc}
   1513c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15140:	add	fp, sp, #24
   15144:	ldr	r6, [r1]
   15148:	mov	r8, r1
   1514c:	ldr	r4, [fp, #8]
   15150:	add	r1, r6, r6, asr #1
   15154:	cmp	r1, r6
   15158:	mvnvs	r1, #-2147483648	; 0x80000000
   1515c:	cmp	r1, r3
   15160:	mov	r5, r1
   15164:	movgt	r5, r3
   15168:	cmn	r3, #1
   1516c:	movle	r5, r1
   15170:	cmn	r4, #1
   15174:	ble	15194 <__assert_fail@plt+0x3f4c>
   15178:	cmp	r4, #0
   1517c:	beq	151e8 <__assert_fail@plt+0x3fa0>
   15180:	cmn	r5, #1
   15184:	ble	151bc <__assert_fail@plt+0x3f74>
   15188:	mvn	r7, #-2147483648	; 0x80000000
   1518c:	udiv	r1, r7, r4
   15190:	b	151b0 <__assert_fail@plt+0x3f68>
   15194:	cmn	r5, #1
   15198:	ble	151d8 <__assert_fail@plt+0x3f90>
   1519c:	cmn	r4, #1
   151a0:	beq	151e8 <__assert_fail@plt+0x3fa0>
   151a4:	mov	r1, #-2147483648	; 0x80000000
   151a8:	mvn	r7, #-2147483648	; 0x80000000
   151ac:	sdiv	r1, r1, r4
   151b0:	cmp	r1, r5
   151b4:	bge	151e8 <__assert_fail@plt+0x3fa0>
   151b8:	b	151f8 <__assert_fail@plt+0x3fb0>
   151bc:	beq	151e8 <__assert_fail@plt+0x3fa0>
   151c0:	mov	r1, #-2147483648	; 0x80000000
   151c4:	mvn	r7, #-2147483648	; 0x80000000
   151c8:	sdiv	r1, r1, r5
   151cc:	cmp	r1, r4
   151d0:	bge	151e8 <__assert_fail@plt+0x3fa0>
   151d4:	b	151f8 <__assert_fail@plt+0x3fb0>
   151d8:	mvn	r7, #-2147483648	; 0x80000000
   151dc:	sdiv	r1, r7, r4
   151e0:	cmp	r5, r1
   151e4:	blt	151f8 <__assert_fail@plt+0x3fb0>
   151e8:	mul	r1, r5, r4
   151ec:	mov	r7, #64	; 0x40
   151f0:	cmp	r1, #63	; 0x3f
   151f4:	bgt	15200 <__assert_fail@plt+0x3fb8>
   151f8:	sdiv	r5, r7, r4
   151fc:	mul	r1, r5, r4
   15200:	cmp	r0, #0
   15204:	moveq	r7, #0
   15208:	streq	r7, [r8]
   1520c:	sub	r7, r5, r6
   15210:	cmp	r7, r2
   15214:	bge	152b8 <__assert_fail@plt+0x4070>
   15218:	add	r5, r6, r2
   1521c:	mov	r2, #0
   15220:	mov	r1, #0
   15224:	cmp	r5, r3
   15228:	movwgt	r2, #1
   1522c:	cmn	r3, #1
   15230:	movwgt	r1, #1
   15234:	cmp	r5, r6
   15238:	bvs	152a0 <__assert_fail@plt+0x4058>
   1523c:	ands	r1, r1, r2
   15240:	bne	152a0 <__assert_fail@plt+0x4058>
   15244:	cmn	r4, #1
   15248:	ble	15268 <__assert_fail@plt+0x4020>
   1524c:	cmp	r4, #0
   15250:	beq	152b4 <__assert_fail@plt+0x406c>
   15254:	cmn	r5, #1
   15258:	ble	1528c <__assert_fail@plt+0x4044>
   1525c:	mvn	r1, #-2147483648	; 0x80000000
   15260:	udiv	r1, r1, r4
   15264:	b	15280 <__assert_fail@plt+0x4038>
   15268:	cmn	r5, #1
   1526c:	ble	152a4 <__assert_fail@plt+0x405c>
   15270:	cmn	r4, #1
   15274:	beq	152b4 <__assert_fail@plt+0x406c>
   15278:	mov	r1, #-2147483648	; 0x80000000
   1527c:	sdiv	r1, r1, r4
   15280:	cmp	r1, r5
   15284:	bge	152b4 <__assert_fail@plt+0x406c>
   15288:	b	152a0 <__assert_fail@plt+0x4058>
   1528c:	beq	152b4 <__assert_fail@plt+0x406c>
   15290:	mov	r1, #-2147483648	; 0x80000000
   15294:	sdiv	r1, r1, r5
   15298:	cmp	r1, r4
   1529c:	bge	152b4 <__assert_fail@plt+0x406c>
   152a0:	bl	15408 <__assert_fail@plt+0x41c0>
   152a4:	mvn	r1, #-2147483648	; 0x80000000
   152a8:	sdiv	r1, r1, r4
   152ac:	cmp	r5, r1
   152b0:	blt	152a0 <__assert_fail@plt+0x4058>
   152b4:	mul	r1, r5, r4
   152b8:	bl	15024 <__assert_fail@plt+0x3ddc>
   152bc:	str	r5, [r8]
   152c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   152c4:	push	{fp, lr}
   152c8:	mov	fp, sp
   152cc:	mov	r1, #1
   152d0:	bl	1544c <__assert_fail@plt+0x4204>
   152d4:	cmp	r0, #0
   152d8:	popne	{fp, pc}
   152dc:	bl	15408 <__assert_fail@plt+0x41c0>
   152e0:	push	{fp, lr}
   152e4:	mov	fp, sp
   152e8:	bl	1544c <__assert_fail@plt+0x4204>
   152ec:	cmp	r0, #0
   152f0:	popne	{fp, pc}
   152f4:	bl	15408 <__assert_fail@plt+0x41c0>
   152f8:	push	{fp, lr}
   152fc:	mov	fp, sp
   15300:	mov	r1, #1
   15304:	bl	1544c <__assert_fail@plt+0x4204>
   15308:	cmp	r0, #0
   1530c:	popne	{fp, pc}
   15310:	bl	15408 <__assert_fail@plt+0x41c0>
   15314:	push	{fp, lr}
   15318:	mov	fp, sp
   1531c:	bl	1544c <__assert_fail@plt+0x4204>
   15320:	cmp	r0, #0
   15324:	popne	{fp, pc}
   15328:	bl	15408 <__assert_fail@plt+0x41c0>
   1532c:	push	{r4, r5, fp, lr}
   15330:	add	fp, sp, #8
   15334:	mov	r5, r0
   15338:	mov	r0, r1
   1533c:	mov	r4, r1
   15340:	bl	154a0 <__assert_fail@plt+0x4258>
   15344:	cmp	r0, #0
   15348:	beq	1535c <__assert_fail@plt+0x4114>
   1534c:	mov	r1, r5
   15350:	mov	r2, r4
   15354:	pop	{r4, r5, fp, lr}
   15358:	b	11008 <memcpy@plt>
   1535c:	bl	15408 <__assert_fail@plt+0x41c0>
   15360:	push	{r4, r5, fp, lr}
   15364:	add	fp, sp, #8
   15368:	mov	r5, r0
   1536c:	mov	r0, r1
   15370:	mov	r4, r1
   15374:	bl	154a0 <__assert_fail@plt+0x4258>
   15378:	cmp	r0, #0
   1537c:	beq	15390 <__assert_fail@plt+0x4148>
   15380:	mov	r1, r5
   15384:	mov	r2, r4
   15388:	pop	{r4, r5, fp, lr}
   1538c:	b	11008 <memcpy@plt>
   15390:	bl	15408 <__assert_fail@plt+0x41c0>
   15394:	push	{r4, r5, fp, lr}
   15398:	add	fp, sp, #8
   1539c:	mov	r5, r0
   153a0:	add	r0, r1, #1
   153a4:	mov	r4, r1
   153a8:	bl	154a0 <__assert_fail@plt+0x4258>
   153ac:	cmp	r0, #0
   153b0:	beq	153cc <__assert_fail@plt+0x4184>
   153b4:	mov	r1, #0
   153b8:	mov	r2, r4
   153bc:	strb	r1, [r0, r4]
   153c0:	mov	r1, r5
   153c4:	pop	{r4, r5, fp, lr}
   153c8:	b	11008 <memcpy@plt>
   153cc:	bl	15408 <__assert_fail@plt+0x41c0>
   153d0:	push	{r4, r5, fp, lr}
   153d4:	add	fp, sp, #8
   153d8:	mov	r4, r0
   153dc:	bl	1111c <strlen@plt>
   153e0:	add	r5, r0, #1
   153e4:	mov	r0, r5
   153e8:	bl	154a0 <__assert_fail@plt+0x4258>
   153ec:	cmp	r0, #0
   153f0:	beq	15404 <__assert_fail@plt+0x41bc>
   153f4:	mov	r1, r4
   153f8:	mov	r2, r5
   153fc:	pop	{r4, r5, fp, lr}
   15400:	b	11008 <memcpy@plt>
   15404:	bl	15408 <__assert_fail@plt+0x41c0>
   15408:	push	{fp, lr}
   1540c:	mov	fp, sp
   15410:	movw	r0, #28932	; 0x7104
   15414:	movw	r1, #27100	; 0x69dc
   15418:	mov	r2, #5
   1541c:	movt	r0, #2
   15420:	movt	r1, #1
   15424:	ldr	r4, [r0]
   15428:	mov	r0, #0
   1542c:	bl	11038 <dcgettext@plt>
   15430:	movw	r2, #26062	; 0x65ce
   15434:	mov	r3, r0
   15438:	mov	r0, r4
   1543c:	mov	r1, #0
   15440:	movt	r2, #1
   15444:	bl	110b0 <error@plt>
   15448:	bl	11218 <abort@plt>
   1544c:	clz	r2, r1
   15450:	clz	r3, r0
   15454:	lsr	r2, r2, #5
   15458:	lsr	r3, r3, #5
   1545c:	orrs	r2, r3, r2
   15460:	movwne	r1, #1
   15464:	movwne	r0, #1
   15468:	cmp	r1, #0
   1546c:	beq	1549c <__assert_fail@plt+0x4254>
   15470:	mvn	r2, #-2147483648	; 0x80000000
   15474:	udiv	r2, r2, r1
   15478:	cmp	r2, r0
   1547c:	bcs	1549c <__assert_fail@plt+0x4254>
   15480:	push	{fp, lr}
   15484:	mov	fp, sp
   15488:	bl	11134 <__errno_location@plt>
   1548c:	mov	r1, #12
   15490:	str	r1, [r0]
   15494:	mov	r0, #0
   15498:	pop	{fp, pc}
   1549c:	b	10f9c <calloc@plt>
   154a0:	cmp	r0, #0
   154a4:	movweq	r0, #1
   154a8:	cmn	r0, #1
   154ac:	ble	154b4 <__assert_fail@plt+0x426c>
   154b0:	b	110bc <malloc@plt>
   154b4:	push	{fp, lr}
   154b8:	mov	fp, sp
   154bc:	bl	11134 <__errno_location@plt>
   154c0:	mov	r1, #12
   154c4:	str	r1, [r0]
   154c8:	mov	r0, #0
   154cc:	pop	{fp, pc}
   154d0:	push	{fp, lr}
   154d4:	mov	fp, sp
   154d8:	cmp	r0, #0
   154dc:	beq	154f8 <__assert_fail@plt+0x42b0>
   154e0:	cmp	r1, #0
   154e4:	beq	15504 <__assert_fail@plt+0x42bc>
   154e8:	cmn	r1, #1
   154ec:	ble	1550c <__assert_fail@plt+0x42c4>
   154f0:	pop	{fp, lr}
   154f4:	b	11044 <realloc@plt>
   154f8:	mov	r0, r1
   154fc:	pop	{fp, lr}
   15500:	b	154a0 <__assert_fail@plt+0x4258>
   15504:	bl	12b10 <__assert_fail@plt+0x18c8>
   15508:	b	15518 <__assert_fail@plt+0x42d0>
   1550c:	bl	11134 <__errno_location@plt>
   15510:	mov	r1, #12
   15514:	str	r1, [r0]
   15518:	mov	r0, #0
   1551c:	pop	{fp, pc}
   15520:	push	{r4, r5, r6, sl, fp, lr}
   15524:	add	fp, sp, #16
   15528:	mov	r4, r0
   1552c:	bl	1108c <__fpending@plt>
   15530:	mov	r5, r0
   15534:	mov	r0, r4
   15538:	bl	11098 <ferror_unlocked@plt>
   1553c:	mov	r6, r0
   15540:	mov	r0, r4
   15544:	bl	12a18 <__assert_fail@plt+0x17d0>
   15548:	cmp	r6, #0
   1554c:	beq	1556c <__assert_fail@plt+0x4324>
   15550:	mvn	r4, #0
   15554:	cmp	r0, #0
   15558:	bne	15598 <__assert_fail@plt+0x4350>
   1555c:	bl	11134 <__errno_location@plt>
   15560:	mov	r1, #0
   15564:	str	r1, [r0]
   15568:	b	15598 <__assert_fail@plt+0x4350>
   1556c:	cmp	r0, #0
   15570:	mov	r4, r0
   15574:	mvnne	r4, #0
   15578:	cmp	r5, #0
   1557c:	bne	15598 <__assert_fail@plt+0x4350>
   15580:	cmp	r0, #0
   15584:	beq	15598 <__assert_fail@plt+0x4350>
   15588:	bl	11134 <__errno_location@plt>
   1558c:	ldr	r0, [r0]
   15590:	subs	r4, r0, #9
   15594:	mvnne	r4, #0
   15598:	mov	r0, r4
   1559c:	pop	{r4, r5, r6, sl, fp, pc}
   155a0:	push	{r4, r5, fp, lr}
   155a4:	add	fp, sp, #8
   155a8:	ldrd	r4, [r0, #16]
   155ac:	mov	r2, r0
   155b0:	mov	r0, #0
   155b4:	cmp	r5, r4
   155b8:	pophi	{r4, r5, fp, pc}
   155bc:	ldr	r3, [r2, #4]
   155c0:	ldr	r2, [r2, #8]
   155c4:	subs	r2, r2, r3
   155c8:	movne	r0, r3
   155cc:	strne	r2, [r1]
   155d0:	pop	{r4, r5, fp, pc}
   155d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   155d8:	add	fp, sp, #24
   155dc:	sub	sp, sp, #8
   155e0:	sub	sp, sp, #4096	; 0x1000
   155e4:	mov	r8, #0
   155e8:	cmp	r1, #0
   155ec:	beq	15704 <__assert_fail@plt+0x44bc>
   155f0:	mov	r6, r1
   155f4:	mov	r5, r0
   155f8:	bl	157e8 <__assert_fail@plt+0x45a0>
   155fc:	mov	r7, r0
   15600:	add	r4, sp, #8
   15604:	cmp	r7, #0
   15608:	beq	1566c <__assert_fail@plt+0x4424>
   1560c:	mov	r0, r5
   15610:	mov	r1, r4
   15614:	bl	155a0 <__assert_fail@plt+0x4358>
   15618:	cmp	r0, #0
   1561c:	ldrne	r0, [sp, #8]
   15620:	cmpne	r0, #0
   15624:	beq	1564c <__assert_fail@plt+0x4404>
   15628:	ldr	r1, [r5, #4]
   1562c:	cmp	r0, r6
   15630:	movcs	r0, r6
   15634:	subs	r6, r6, r0
   15638:	add	r1, r1, r0
   1563c:	str	r1, [r5, #4]
   15640:	beq	15704 <__assert_fail@plt+0x44bc>
   15644:	subs	r7, r7, r0
   15648:	beq	1566c <__assert_fail@plt+0x4424>
   1564c:	mov	r0, r5
   15650:	bl	11158 <fgetc@plt>
   15654:	cmn	r0, #1
   15658:	beq	156f0 <__assert_fail@plt+0x44a8>
   1565c:	sub	r7, r7, #1
   15660:	subs	r6, r6, #1
   15664:	bne	15604 <__assert_fail@plt+0x43bc>
   15668:	b	15704 <__assert_fail@plt+0x44bc>
   1566c:	mov	r0, r5
   15670:	bl	11170 <fileno@plt>
   15674:	cmp	r0, #0
   15678:	bmi	156b4 <__assert_fail@plt+0x446c>
   1567c:	mov	r4, #1
   15680:	mov	r2, #0
   15684:	mov	r3, #0
   15688:	str	r4, [sp]
   1568c:	bl	11068 <lseek64@plt>
   15690:	cmp	r1, #0
   15694:	bmi	156b4 <__assert_fail@plt+0x446c>
   15698:	mov	r0, r5
   1569c:	mov	r2, r6
   156a0:	mov	r3, #0
   156a4:	str	r4, [sp]
   156a8:	bl	12b38 <__assert_fail@plt+0x18f0>
   156ac:	mov	r8, r0
   156b0:	b	15704 <__assert_fail@plt+0x44bc>
   156b4:	add	r4, sp, #8
   156b8:	cmp	r6, #4096	; 0x1000
   156bc:	mov	r7, r6
   156c0:	mov	r0, r4
   156c4:	mov	r1, #1
   156c8:	mov	r3, r5
   156cc:	movcs	r7, #4096	; 0x1000
   156d0:	mov	r2, r7
   156d4:	bl	11080 <fread@plt>
   156d8:	cmp	r0, r7
   156dc:	subcs	r6, r6, r7
   156e0:	bcc	156f0 <__assert_fail@plt+0x44a8>
   156e4:	cmp	r6, #0
   156e8:	bne	156b8 <__assert_fail@plt+0x4470>
   156ec:	b	15704 <__assert_fail@plt+0x44bc>
   156f0:	mov	r0, r5
   156f4:	bl	10ff0 <ferror@plt>
   156f8:	cmp	r0, #0
   156fc:	mov	r8, r0
   15700:	mvnne	r8, #0
   15704:	mov	r0, r8
   15708:	sub	sp, fp, #24
   1570c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15710:	push	{fp, lr}
   15714:	mov	fp, sp
   15718:	mov	r0, #14
   1571c:	bl	111c4 <nl_langinfo@plt>
   15720:	movw	r1, #25275	; 0x62bb
   15724:	cmp	r0, #0
   15728:	movt	r1, #1
   1572c:	movne	r1, r0
   15730:	movw	r0, #27117	; 0x69ed
   15734:	ldrb	r2, [r1]
   15738:	movt	r0, #1
   1573c:	cmp	r2, #0
   15740:	movne	r0, r1
   15744:	pop	{fp, pc}
   15748:	push	{r4, r5, r6, r7, fp, lr}
   1574c:	add	fp, sp, #16
   15750:	sub	sp, sp, #8
   15754:	cmp	r0, #0
   15758:	add	r5, sp, #4
   1575c:	mov	r7, r2
   15760:	mov	r4, r1
   15764:	movne	r5, r0
   15768:	mov	r0, r5
   1576c:	bl	110a4 <mbrtowc@plt>
   15770:	mov	r6, r0
   15774:	cmp	r7, #0
   15778:	beq	157a0 <__assert_fail@plt+0x4558>
   1577c:	cmn	r6, #2
   15780:	bcc	157a0 <__assert_fail@plt+0x4558>
   15784:	mov	r0, #0
   15788:	bl	15828 <__assert_fail@plt+0x45e0>
   1578c:	cmp	r0, #0
   15790:	bne	157a0 <__assert_fail@plt+0x4558>
   15794:	ldrb	r0, [r4]
   15798:	mov	r6, #1
   1579c:	str	r0, [r5]
   157a0:	mov	r0, r6
   157a4:	sub	sp, fp, #16
   157a8:	pop	{r4, r5, r6, r7, fp, pc}
   157ac:	cmp	r2, #0
   157b0:	beq	157e0 <__assert_fail@plt+0x4598>
   157b4:	mvn	r3, #0
   157b8:	udiv	r3, r3, r2
   157bc:	cmp	r3, r1
   157c0:	bcs	157e0 <__assert_fail@plt+0x4598>
   157c4:	push	{fp, lr}
   157c8:	mov	fp, sp
   157cc:	bl	11134 <__errno_location@plt>
   157d0:	mov	r1, #12
   157d4:	str	r1, [r0]
   157d8:	mov	r0, #0
   157dc:	pop	{fp, pc}
   157e0:	mul	r1, r2, r1
   157e4:	b	154d0 <__assert_fail@plt+0x4288>
   157e8:	ldrd	r2, [r0, #16]
   157ec:	mov	r1, #0
   157f0:	cmp	r3, r2
   157f4:	bhi	15820 <__assert_fail@plt+0x45d8>
   157f8:	ldrb	r3, [r0, #1]
   157fc:	ldmib	r0, {r1, r2}
   15800:	sub	r1, r2, r1
   15804:	mov	r2, #0
   15808:	tst	r3, #1
   1580c:	beq	1581c <__assert_fail@plt+0x45d4>
   15810:	ldr	r2, [r0, #36]	; 0x24
   15814:	ldr	r0, [r0, #44]	; 0x2c
   15818:	sub	r2, r0, r2
   1581c:	add	r1, r1, r2
   15820:	mov	r0, r1
   15824:	bx	lr
   15828:	push	{r4, sl, fp, lr}
   1582c:	add	fp, sp, #8
   15830:	sub	sp, sp, #264	; 0x108
   15834:	add	r1, sp, #7
   15838:	movw	r2, #257	; 0x101
   1583c:	bl	15894 <__assert_fail@plt+0x464c>
   15840:	mov	r4, #0
   15844:	cmp	r0, #0
   15848:	bne	15888 <__assert_fail@plt+0x4640>
   1584c:	movw	r1, #27123	; 0x69f3
   15850:	add	r0, sp, #7
   15854:	mov	r2, #2
   15858:	movt	r1, #1
   1585c:	bl	11110 <bcmp@plt>
   15860:	cmp	r0, #0
   15864:	beq	15888 <__assert_fail@plt+0x4640>
   15868:	movw	r1, #27125	; 0x69f5
   1586c:	add	r0, sp, #7
   15870:	mov	r2, #6
   15874:	movt	r1, #1
   15878:	bl	11110 <bcmp@plt>
   1587c:	cmp	r0, #0
   15880:	mov	r4, r0
   15884:	movwne	r4, #1
   15888:	mov	r0, r4
   1588c:	sub	sp, fp, #8
   15890:	pop	{r4, sl, fp, pc}
   15894:	push	{r4, r5, r6, r7, fp, lr}
   15898:	add	fp, sp, #16
   1589c:	mov	r4, r1
   158a0:	mov	r1, #0
   158a4:	mov	r6, r2
   158a8:	bl	111ac <setlocale@plt>
   158ac:	cmp	r0, #0
   158b0:	beq	158dc <__assert_fail@plt+0x4694>
   158b4:	mov	r7, r0
   158b8:	bl	1111c <strlen@plt>
   158bc:	cmp	r0, r6
   158c0:	bcs	158f0 <__assert_fail@plt+0x46a8>
   158c4:	add	r2, r0, #1
   158c8:	mov	r0, r4
   158cc:	mov	r1, r7
   158d0:	bl	11008 <memcpy@plt>
   158d4:	mov	r5, #0
   158d8:	b	15918 <__assert_fail@plt+0x46d0>
   158dc:	cmp	r6, #0
   158e0:	mov	r5, #22
   158e4:	movne	r0, #0
   158e8:	strbne	r0, [r4]
   158ec:	b	15918 <__assert_fail@plt+0x46d0>
   158f0:	mov	r5, #34	; 0x22
   158f4:	cmp	r6, #0
   158f8:	beq	15918 <__assert_fail@plt+0x46d0>
   158fc:	sub	r6, r6, #1
   15900:	mov	r0, r4
   15904:	mov	r1, r7
   15908:	mov	r2, r6
   1590c:	bl	11008 <memcpy@plt>
   15910:	mov	r0, #0
   15914:	strb	r0, [r4, r6]
   15918:	mov	r0, r5
   1591c:	pop	{r4, r5, r6, r7, fp, pc}
   15920:	mov	r1, #0
   15924:	b	111ac <setlocale@plt>
   15928:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1592c:	mov	r7, r0
   15930:	ldr	r6, [pc, #72]	; 15980 <__assert_fail@plt+0x4738>
   15934:	ldr	r5, [pc, #72]	; 15984 <__assert_fail@plt+0x473c>
   15938:	add	r6, pc, r6
   1593c:	add	r5, pc, r5
   15940:	sub	r6, r6, r5
   15944:	mov	r8, r1
   15948:	mov	r9, r2
   1594c:	bl	10f7c <calloc@plt-0x20>
   15950:	asrs	r6, r6, #2
   15954:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15958:	mov	r4, #0
   1595c:	add	r4, r4, #1
   15960:	ldr	r3, [r5], #4
   15964:	mov	r2, r9
   15968:	mov	r1, r8
   1596c:	mov	r0, r7
   15970:	blx	r3
   15974:	cmp	r6, r4
   15978:	bne	1595c <__assert_fail@plt+0x4714>
   1597c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15980:	andeq	r1, r1, ip, asr #11
   15984:	andeq	r1, r1, r4, asr #11
   15988:	bx	lr
   1598c:	ldr	r3, [pc, #12]	; 159a0 <__assert_fail@plt+0x4758>
   15990:	mov	r1, #0
   15994:	add	r3, pc, r3
   15998:	ldr	r2, [r3]
   1599c:	b	11140 <__cxa_atexit@plt>
   159a0:	andeq	r1, r1, r0, ror #14

Disassembly of section .fini:

000159a4 <.fini>:
   159a4:	push	{r3, lr}
   159a8:	pop	{r3, pc}
