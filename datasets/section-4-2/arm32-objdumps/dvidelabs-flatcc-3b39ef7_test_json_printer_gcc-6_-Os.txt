
../repos/dvidelabs-flatcc-3b39ef7/test/json_test/test_json_printer:     file format elf32-littlearm


Disassembly of section .init:

00012410 <.init>:
   12410:	push	{r3, lr}
   12414:	bl	12648 <_start@@Base+0x3c>
   12418:	pop	{r3, pc}

Disassembly of section .plt:

0001241c <raise@plt-0x14>:
   1241c:	push	{lr}		; (str lr, [sp, #-4]!)
   12420:	ldr	lr, [pc, #4]	; 1242c <raise@plt-0x4>
   12424:	add	lr, pc, lr
   12428:	ldr	pc, [lr, #8]!
   1242c:	ldrdeq	sl, [r1], -r4

00012430 <raise@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #106496	; 0x1a000
   12438:	ldr	pc, [ip, #3028]!	; 0xbd4

0001243c <strcmp@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #106496	; 0x1a000
   12444:	ldr	pc, [ip, #3020]!	; 0xbcc

00012448 <fopen@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #106496	; 0x1a000
   12450:	ldr	pc, [ip, #3012]!	; 0xbc4

00012454 <memmove@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #106496	; 0x1a000
   1245c:	ldr	pc, [ip, #3004]!	; 0xbbc

00012460 <free@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #106496	; 0x1a000
   12468:	ldr	pc, [ip, #2996]!	; 0xbb4

0001246c <memcpy@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #106496	; 0x1a000
   12474:	ldr	pc, [ip, #2988]!	; 0xbac

00012478 <ftell@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #106496	; 0x1a000
   12480:	ldr	pc, [ip, #2980]!	; 0xba4

00012484 <memcmp@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #106496	; 0x1a000
   1248c:	ldr	pc, [ip, #2972]!	; 0xb9c

00012490 <rewind@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #106496	; 0x1a000
   12498:	ldr	pc, [ip, #2964]!	; 0xb94

0001249c <realloc@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #106496	; 0x1a000
   124a4:	ldr	pc, [ip, #2956]!	; 0xb8c

000124a8 <fwrite@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #106496	; 0x1a000
   124b0:	ldr	pc, [ip, #2948]!	; 0xb84

000124b4 <fread@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #106496	; 0x1a000
   124bc:	ldr	pc, [ip, #2940]!	; 0xb7c

000124c0 <puts@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #106496	; 0x1a000
   124c8:	ldr	pc, [ip, #2932]!	; 0xb74

000124cc <malloc@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #106496	; 0x1a000
   124d4:	ldr	pc, [ip, #2924]!	; 0xb6c

000124d8 <__libc_start_main@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #106496	; 0x1a000
   124e0:	ldr	pc, [ip, #2916]!	; 0xb64

000124e4 <__gmon_start__@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #106496	; 0x1a000
   124ec:	ldr	pc, [ip, #2908]!	; 0xb5c

000124f0 <exit@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #106496	; 0x1a000
   124f8:	ldr	pc, [ip, #2900]!	; 0xb54

000124fc <fprintf@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #106496	; 0x1a000
   12504:	ldr	pc, [ip, #2892]!	; 0xb4c

00012508 <memset@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #106496	; 0x1a000
   12510:	ldr	pc, [ip, #2884]!	; 0xb44

00012514 <strncpy@plt>:
   12514:	add	ip, pc, #0, 12
   12518:	add	ip, ip, #106496	; 0x1a000
   1251c:	ldr	pc, [ip, #2876]!	; 0xb3c

00012520 <fclose@plt>:
   12520:	add	ip, pc, #0, 12
   12524:	add	ip, ip, #106496	; 0x1a000
   12528:	ldr	pc, [ip, #2868]!	; 0xb34

0001252c <sprintf@plt>:
   1252c:	add	ip, pc, #0, 12
   12530:	add	ip, ip, #106496	; 0x1a000
   12534:	ldr	pc, [ip, #2860]!	; 0xb2c

00012538 <fseek@plt>:
   12538:	add	ip, pc, #0, 12
   1253c:	add	ip, ip, #106496	; 0x1a000
   12540:	ldr	pc, [ip, #2852]!	; 0xb24

00012544 <fputs@plt>:
   12544:	add	ip, pc, #0, 12
   12548:	add	ip, ip, #106496	; 0x1a000
   1254c:	ldr	pc, [ip, #2844]!	; 0xb1c

00012550 <abort@plt>:
   12550:	add	ip, pc, #0, 12
   12554:	add	ip, ip, #106496	; 0x1a000
   12558:	ldr	pc, [ip, #2836]!	; 0xb14

0001255c <__assert_fail@plt>:
   1255c:	add	ip, pc, #0, 12
   12560:	add	ip, ip, #106496	; 0x1a000
   12564:	ldr	pc, [ip, #2828]!	; 0xb0c

Disassembly of section .text:

00012568 <main@@Base-0x24>:
   12568:	push	{r4, lr}
   1256c:	mov	r2, #260	; 0x104
   12570:	ldr	r3, [pc, #8]	; 12580 <__assert_fail@plt+0x24>
   12574:	ldr	r1, [pc, #8]	; 12584 <__assert_fail@plt+0x28>
   12578:	ldr	r0, [pc, #8]	; 12588 <__assert_fail@plt+0x2c>
   1257c:	bl	1255c <__assert_fail@plt>
   12580:	andeq	fp, r1, r9, asr r6
   12584:	ldrdeq	fp, [r1], -r4
   12588:	andeq	fp, r1, sl, lsr #26

0001258c <main@@Base>:
   1258c:	push	{r4, r5, r6, lr}
   12590:	mov	r5, r0
   12594:	ldr	r6, [pc, #92]	; 125f8 <main@@Base+0x6c>
   12598:	mov	r4, r1
   1259c:	ldr	r0, [pc, #88]	; 125fc <main@@Base+0x70>
   125a0:	ldr	r1, [r6]
   125a4:	bl	12544 <fputs@plt>
   125a8:	cmp	r5, #1
   125ac:	cmpne	r5, #4
   125b0:	beq	125c8 <main@@Base+0x3c>
   125b4:	ldr	r1, [r6]
   125b8:	ldr	r0, [pc, #64]	; 12600 <main@@Base+0x74>
   125bc:	bl	12544 <fputs@plt>
   125c0:	mov	r0, #1
   125c4:	bl	124f0 <exit@plt>
   125c8:	cmp	r5, #4
   125cc:	bne	125f0 <main@@Base+0x64>
   125d0:	ldr	r3, [pc, #44]	; 12604 <main@@Base+0x78>
   125d4:	ldr	r2, [r4, #4]
   125d8:	str	r2, [r3]
   125dc:	ldr	r3, [pc, #36]	; 12608 <main@@Base+0x7c>
   125e0:	ldr	r2, [r4, #8]
   125e4:	str	r2, [r3, #4]
   125e8:	ldr	r2, [r4, #12]
   125ec:	str	r2, [r3]
   125f0:	pop	{r4, r5, r6, lr}
   125f4:	b	1374c <test_print@@Base>
   125f8:	andeq	sp, r2, r8, lsl #1
   125fc:	andeq	fp, r1, pc, ror r4
   12600:	muleq	r1, r8, r4
   12604:	muleq	r2, r4, r0
   12608:	andeq	sp, r2, r0, lsl #1

0001260c <_start@@Base>:
   1260c:	mov	fp, #0
   12610:	mov	lr, #0
   12614:	pop	{r1}		; (ldr r1, [sp], #4)
   12618:	mov	r2, sp
   1261c:	push	{r2}		; (str r2, [sp, #-4]!)
   12620:	push	{r0}		; (str r0, [sp, #-4]!)
   12624:	ldr	ip, [pc, #16]	; 1263c <_start@@Base+0x30>
   12628:	push	{ip}		; (str ip, [sp, #-4]!)
   1262c:	ldr	r0, [pc, #12]	; 12640 <_start@@Base+0x34>
   12630:	ldr	r3, [pc, #12]	; 12644 <_start@@Base+0x38>
   12634:	bl	124d8 <__libc_start_main@plt>
   12638:	bl	12550 <abort@plt>
   1263c:	andeq	sl, r1, ip, lsr #29
   12640:	andeq	r2, r1, ip, lsl #11
   12644:	andeq	sl, r1, ip, asr #28
   12648:	ldr	r3, [pc, #20]	; 12664 <_start@@Base+0x58>
   1264c:	ldr	r2, [pc, #20]	; 12668 <_start@@Base+0x5c>
   12650:	add	r3, pc, r3
   12654:	ldr	r2, [r3, r2]
   12658:	cmp	r2, #0
   1265c:	bxeq	lr
   12660:	b	124e4 <__gmon_start__@plt>
   12664:	andeq	sl, r1, r8, lsr #19
   12668:	andeq	r0, r0, r4, ror r0
   1266c:	ldr	r3, [pc, #28]	; 12690 <_start@@Base+0x84>
   12670:	ldr	r0, [pc, #28]	; 12694 <_start@@Base+0x88>
   12674:	sub	r3, r3, r0
   12678:	cmp	r3, #6
   1267c:	bxls	lr
   12680:	ldr	r3, [pc, #16]	; 12698 <_start@@Base+0x8c>
   12684:	cmp	r3, #0
   12688:	bxeq	lr
   1268c:	bx	r3
   12690:	andeq	sp, r2, fp, lsl #1
   12694:	andeq	sp, r2, r8, lsl #1
   12698:	andeq	r0, r0, r0
   1269c:	ldr	r1, [pc, #36]	; 126c8 <_start@@Base+0xbc>
   126a0:	ldr	r0, [pc, #36]	; 126cc <_start@@Base+0xc0>
   126a4:	sub	r1, r1, r0
   126a8:	asr	r1, r1, #2
   126ac:	add	r1, r1, r1, lsr #31
   126b0:	asrs	r1, r1, #1
   126b4:	bxeq	lr
   126b8:	ldr	r3, [pc, #16]	; 126d0 <_start@@Base+0xc4>
   126bc:	cmp	r3, #0
   126c0:	bxeq	lr
   126c4:	bx	r3
   126c8:	andeq	sp, r2, r8, lsl #1
   126cc:	andeq	sp, r2, r8, lsl #1
   126d0:	andeq	r0, r0, r0
   126d4:	push	{r4, lr}
   126d8:	ldr	r4, [pc, #24]	; 126f8 <_start@@Base+0xec>
   126dc:	ldrb	r3, [r4]
   126e0:	cmp	r3, #0
   126e4:	popne	{r4, pc}
   126e8:	bl	1266c <_start@@Base+0x60>
   126ec:	mov	r3, #1
   126f0:	strb	r3, [r4]
   126f4:	pop	{r4, pc}
   126f8:	muleq	r2, r0, r0
   126fc:	ldr	r0, [pc, #40]	; 1272c <_start@@Base+0x120>
   12700:	ldr	r3, [r0]
   12704:	cmp	r3, #0
   12708:	bne	12710 <_start@@Base+0x104>
   1270c:	b	1269c <_start@@Base+0x90>
   12710:	ldr	r3, [pc, #24]	; 12730 <_start@@Base+0x124>
   12714:	cmp	r3, #0
   12718:	beq	1270c <_start@@Base+0x100>
   1271c:	push	{r4, lr}
   12720:	blx	r3
   12724:	pop	{r4, lr}
   12728:	b	1269c <_start@@Base+0x90>
   1272c:	andeq	ip, r2, r4, lsl pc
   12730:	andeq	r0, r0, r0
   12734:	bx	lr
   12738:	ldr	r3, [pc, #108]	; 127ac <_start@@Base+0x1a0>
   1273c:	push	{r0, r1, r4, r5, r6, lr}
   12740:	mov	r2, #0
   12744:	str	r3, [sp, #4]
   12748:	mov	r3, #21
   1274c:	str	r3, [sp]
   12750:	ldr	r3, [pc, #88]	; 127b0 <_start@@Base+0x1a4>
   12754:	mov	r4, r0
   12758:	mov	r5, r1
   1275c:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   12760:	ldr	r3, [pc, #76]	; 127b4 <_start@@Base+0x1a8>
   12764:	mov	r6, #22
   12768:	str	r3, [sp, #4]
   1276c:	mov	r1, r5
   12770:	mov	r0, r4
   12774:	str	r6, [sp]
   12778:	ldr	r3, [pc, #56]	; 127b8 <_start@@Base+0x1ac>
   1277c:	mov	r2, #1
   12780:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   12784:	ldr	r3, [pc, #48]	; 127bc <_start@@Base+0x1b0>
   12788:	str	r6, [sp]
   1278c:	str	r3, [sp, #4]
   12790:	mov	r2, #2
   12794:	ldr	r3, [pc, #36]	; 127c0 <_start@@Base+0x1b4>
   12798:	mov	r1, r5
   1279c:	mov	r0, r4
   127a0:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   127a4:	add	sp, sp, #8
   127a8:	pop	{r4, r5, r6, pc}
   127ac:	andeq	r2, r1, r4, lsr #17
   127b0:	ldrdeq	sl, [r1], -ip
   127b4:	andeq	r2, r1, r8, asr #16
   127b8:	strdeq	sl, [r1], -r2
   127bc:	andeq	r2, r1, ip, ror #15
   127c0:	andeq	fp, r1, r9
   127c4:	push	{r0, r1, r2, lr}
   127c8:	mov	r3, #19
   127cc:	mov	r2, #0
   127d0:	str	r3, [sp]
   127d4:	str	r2, [sp, #4]
   127d8:	ldr	r3, [pc, #8]	; 127e8 <_start@@Base+0x1dc>
   127dc:	bl	163e8 <flatcc_json_printer_int32_field@@Base>
   127e0:	add	sp, sp, #12
   127e4:	pop	{pc}		; (ldr pc, [sp], #4)
   127e8:	andeq	fp, r1, r0, lsr #32
   127ec:	push	{r4, r5, lr}
   127f0:	mov	r2, #0
   127f4:	sub	sp, sp, #20
   127f8:	mov	r3, #0
   127fc:	mov	r4, r0
   12800:	strd	r2, [sp, #8]
   12804:	mov	r3, #15
   12808:	str	r3, [sp]
   1280c:	ldr	r3, [pc, #44]	; 12840 <_start@@Base+0x234>
   12810:	mov	r5, r1
   12814:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12818:	mov	r2, #21
   1281c:	mov	r3, #0
   12820:	mov	r1, r5
   12824:	stm	sp, {r2, r3}
   12828:	mov	r0, r4
   1282c:	ldr	r3, [pc, #16]	; 12844 <_start@@Base+0x238>
   12830:	mov	r2, #1
   12834:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   12838:	add	sp, sp, #20
   1283c:	pop	{r4, r5, pc}
   12840:	andeq	fp, r1, r4, lsr r0
   12844:	andeq	fp, r1, r4, asr #32
   12848:	push	{r4, r5, lr}
   1284c:	mov	r2, #0
   12850:	sub	sp, sp, #20
   12854:	mov	r3, #0
   12858:	mov	r4, r0
   1285c:	strd	r2, [sp, #8]
   12860:	mov	r3, #15
   12864:	str	r3, [sp]
   12868:	ldr	r3, [pc, #44]	; 1289c <_start@@Base+0x290>
   1286c:	mov	r5, r1
   12870:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12874:	mov	r2, #16
   12878:	mov	r3, #0
   1287c:	mov	r1, r5
   12880:	stm	sp, {r2, r3}
   12884:	mov	r0, r4
   12888:	ldr	r3, [pc, #16]	; 128a0 <_start@@Base+0x294>
   1288c:	mov	r2, #1
   12890:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   12894:	add	sp, sp, #20
   12898:	pop	{r4, r5, pc}
   1289c:	andeq	fp, r1, r4, lsr r0
   128a0:	andeq	fp, r1, sl, asr r0
   128a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a8:	sub	sp, sp, #20
   128ac:	mov	r7, #4
   128b0:	mov	sl, #9
   128b4:	mov	fp, #0
   128b8:	mov	r4, r0
   128bc:	mov	r5, r1
   128c0:	str	r7, [sp]
   128c4:	ldr	r3, [pc, #228]	; 129b0 <_start@@Base+0x3a4>
   128c8:	mov	r2, #0
   128cc:	bl	15dfc <flatcc_json_printer_string_field@@Base>
   128d0:	mov	r8, #0
   128d4:	mov	r9, #0
   128d8:	mov	r1, r5
   128dc:	mov	r0, r4
   128e0:	stm	sp, {sl, fp}
   128e4:	ldr	r3, [pc, #200]	; 129b4 <_start@@Base+0x3a8>
   128e8:	mov	r2, #1
   128ec:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   128f0:	mov	r6, #8
   128f4:	mov	r1, r5
   128f8:	mov	r0, r4
   128fc:	str	r7, [sp]
   12900:	ldr	r3, [pc, #176]	; 129b8 <_start@@Base+0x3ac>
   12904:	mov	r2, #2
   12908:	bl	15dfc <flatcc_json_printer_string_field@@Base>
   1290c:	mov	r1, r5
   12910:	mov	r0, r4
   12914:	strd	r8, [sp, #8]
   12918:	str	r6, [sp]
   1291c:	ldr	r3, [pc, #152]	; 129bc <_start@@Base+0x3b0>
   12920:	mov	r2, #3
   12924:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12928:	mov	r2, r7
   1292c:	mov	r1, r5
   12930:	mov	r0, r4
   12934:	str	r7, [sp]
   12938:	ldr	r3, [pc, #128]	; 129c0 <_start@@Base+0x3b4>
   1293c:	bl	15dfc <flatcc_json_printer_string_field@@Base>
   12940:	mov	r1, r5
   12944:	mov	r0, r4
   12948:	strd	r8, [sp, #8]
   1294c:	str	r6, [sp]
   12950:	ldr	r3, [pc, #108]	; 129c4 <_start@@Base+0x3b8>
   12954:	mov	r2, #5
   12958:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   1295c:	mov	r1, r5
   12960:	mov	r0, r4
   12964:	stm	sp, {sl, fp}
   12968:	ldr	r3, [pc, #88]	; 129c8 <_start@@Base+0x3bc>
   1296c:	mov	r2, #6
   12970:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   12974:	mov	r1, r5
   12978:	mov	r0, r4
   1297c:	strd	r8, [sp, #8]
   12980:	str	r6, [sp]
   12984:	ldr	r3, [pc, #64]	; 129cc <_start@@Base+0x3c0>
   12988:	mov	r2, #7
   1298c:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12990:	stm	sp, {sl, fp}
   12994:	ldr	r3, [pc, #52]	; 129d0 <_start@@Base+0x3c4>
   12998:	mov	r2, r6
   1299c:	mov	r1, r5
   129a0:	mov	r0, r4
   129a4:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   129a8:	add	sp, sp, #20
   129ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129b0:	andeq	fp, r1, fp, rrx
   129b4:	andeq	fp, r1, r0, ror r0
   129b8:	andeq	fp, r1, sl, ror r0
   129bc:	andeq	fp, r1, pc, ror r0
   129c0:	andeq	fp, r1, r8, lsl #1
   129c4:	andeq	fp, r1, sp, lsl #1
   129c8:	muleq	r1, r6, r0
   129cc:	andeq	fp, r1, r0, lsr #1
   129d0:	andeq	fp, r1, r9, lsr #1
   129d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129d8:	sub	sp, sp, #20
   129dc:	ldr	r3, [pc, #1072]	; 12e14 <_start@@Base+0x808>
   129e0:	mov	r6, #3
   129e4:	str	r3, [sp, #4]
   129e8:	str	r6, [sp]
   129ec:	ldr	r3, [pc, #1060]	; 12e18 <_start@@Base+0x80c>
   129f0:	mov	r2, #0
   129f4:	mov	r4, r0
   129f8:	mov	r5, r1
   129fc:	mov	r7, #4
   12a00:	bl	1a230 <flatcc_json_printer_struct_field@@Base>
   12a04:	mov	r3, #150	; 0x96
   12a08:	str	r3, [sp, #4]
   12a0c:	mov	r1, r5
   12a10:	mov	r0, r4
   12a14:	str	r7, [sp]
   12a18:	ldr	r3, [pc, #1020]	; 12e1c <_start@@Base+0x810>
   12a1c:	mov	r2, #1
   12a20:	bl	16344 <flatcc_json_printer_int16_field@@Base>
   12a24:	mov	r2, #2
   12a28:	mov	r3, #100	; 0x64
   12a2c:	mov	r1, r5
   12a30:	stm	sp, {r2, r3}
   12a34:	mov	r0, r4
   12a38:	ldr	r3, [pc, #992]	; 12e20 <_start@@Base+0x814>
   12a3c:	bl	16344 <flatcc_json_printer_int16_field@@Base>
   12a40:	mov	r8, #9
   12a44:	mov	r2, r6
   12a48:	mov	r1, r5
   12a4c:	mov	r0, r4
   12a50:	str	r7, [sp]
   12a54:	ldr	r3, [pc, #968]	; 12e24 <_start@@Base+0x818>
   12a58:	bl	15dfc <flatcc_json_printer_string_field@@Base>
   12a5c:	str	r8, [sp]
   12a60:	mov	r1, r5
   12a64:	mov	r0, r4
   12a68:	ldr	r3, [pc, #952]	; 12e28 <_start@@Base+0x81c>
   12a6c:	mov	r2, #5
   12a70:	bl	1766c <flatcc_json_printer_uint8_vector_field@@Base>
   12a74:	mov	r9, #5
   12a78:	mov	fp, #8
   12a7c:	ldr	r3, [pc, #936]	; 12e2c <_start@@Base+0x820>
   12a80:	mov	r1, r5
   12a84:	str	r3, [sp, #8]
   12a88:	mov	r0, r4
   12a8c:	stm	sp, {r9, fp}
   12a90:	ldr	r3, [pc, #920]	; 12e30 <_start@@Base+0x824>
   12a94:	mov	r2, #6
   12a98:	bl	16a84 <flatcc_json_printer_int8_enum_field@@Base>
   12a9c:	ldr	r3, [pc, #912]	; 12e34 <_start@@Base+0x828>
   12aa0:	mov	r2, fp
   12aa4:	str	r3, [sp, #8]
   12aa8:	ldr	r3, [pc, #904]	; 12e38 <_start@@Base+0x82c>
   12aac:	mov	r1, r5
   12ab0:	str	r3, [sp, #4]
   12ab4:	mov	r0, r4
   12ab8:	str	r7, [sp]
   12abc:	ldr	r3, [pc, #888]	; 12e3c <_start@@Base+0x830>
   12ac0:	bl	19eec <flatcc_json_printer_union_field@@Base>
   12ac4:	ldr	r3, [pc, #884]	; 12e40 <_start@@Base+0x834>
   12ac8:	ldr	sl, [pc, #884]	; 12e44 <_start@@Base+0x838>
   12acc:	mov	r6, #17
   12ad0:	str	r3, [sp, #8]
   12ad4:	mov	r2, r8
   12ad8:	mov	r1, r5
   12adc:	mov	r0, r4
   12ae0:	str	r7, [sp, #4]
   12ae4:	str	r9, [sp]
   12ae8:	ldr	r3, [pc, #856]	; 12e48 <_start@@Base+0x83c>
   12aec:	bl	19698 <flatcc_json_printer_struct_vector_field@@Base>
   12af0:	mov	r1, r5
   12af4:	mov	r0, r4
   12af8:	str	r6, [sp]
   12afc:	ldr	r3, [pc, #840]	; 12e4c <_start@@Base+0x840>
   12b00:	mov	r2, #10
   12b04:	bl	198f0 <flatcc_json_printer_string_vector_field@@Base>
   12b08:	stm	sp, {r6, sl}
   12b0c:	mov	r1, r5
   12b10:	mov	r0, r4
   12b14:	ldr	r3, [pc, #820]	; 12e50 <_start@@Base+0x844>
   12b18:	mov	r2, #11
   12b1c:	bl	19a84 <flatcc_json_printer_table_vector_field@@Base>
   12b20:	stm	sp, {r9, sl}
   12b24:	mov	r1, r5
   12b28:	mov	r0, r4
   12b2c:	ldr	r3, [pc, #800]	; 12e54 <_start@@Base+0x848>
   12b30:	mov	r2, #12
   12b34:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   12b38:	str	sl, [sp, #8]
   12b3c:	mov	r3, #20
   12b40:	mov	sl, #0
   12b44:	mov	r1, r5
   12b48:	stm	sp, {r3, sl}
   12b4c:	mov	r0, r4
   12b50:	ldr	r3, [pc, #768]	; 12e58 <_start@@Base+0x84c>
   12b54:	mov	r2, #13
   12b58:	bl	1a58c <flatcc_json_printer_table_as_nested_root@@Base>
   12b5c:	ldr	r3, [pc, #760]	; 12e5c <_start@@Base+0x850>
   12b60:	str	r8, [sp]
   12b64:	str	r3, [sp, #4]
   12b68:	mov	r1, r5
   12b6c:	mov	r0, r4
   12b70:	ldr	r3, [pc, #744]	; 12e60 <_start@@Base+0x854>
   12b74:	mov	r2, #14
   12b78:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   12b7c:	mov	r3, #1
   12b80:	mov	r8, #16
   12b84:	str	r3, [sp, #4]
   12b88:	mov	r1, r5
   12b8c:	mov	r0, r4
   12b90:	str	fp, [sp]
   12b94:	ldr	r3, [pc, #712]	; 12e64 <_start@@Base+0x858>
   12b98:	mov	r2, #15
   12b9c:	bl	1653c <flatcc_json_printer_bool_field@@Base>
   12ba0:	str	r8, [sp]
   12ba4:	mov	r2, r8
   12ba8:	mov	r1, r5
   12bac:	mov	r0, r4
   12bb0:	str	sl, [sp, #4]
   12bb4:	ldr	r3, [pc, #684]	; 12e68 <_start@@Base+0x85c>
   12bb8:	bl	163e8 <flatcc_json_printer_int32_field@@Base>
   12bbc:	stm	sp, {r8, sl}
   12bc0:	mov	r2, r6
   12bc4:	mov	r1, r5
   12bc8:	mov	r0, r4
   12bcc:	ldr	r3, [pc, #664]	; 12e6c <_start@@Base+0x860>
   12bd0:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   12bd4:	mov	r2, #0
   12bd8:	mov	r3, #0
   12bdc:	str	r8, [sp]
   12be0:	strd	r2, [sp, #8]
   12be4:	mov	r1, r5
   12be8:	mov	r0, r4
   12bec:	ldr	r3, [pc, #636]	; 12e70 <_start@@Base+0x864>
   12bf0:	mov	r2, #18
   12bf4:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12bf8:	mov	r2, #0
   12bfc:	mov	r3, #0
   12c00:	str	r8, [sp]
   12c04:	strd	r2, [sp, #8]
   12c08:	mov	r1, r5
   12c0c:	mov	r0, r4
   12c10:	ldr	r3, [pc, #604]	; 12e74 <_start@@Base+0x868>
   12c14:	mov	r2, #19
   12c18:	bl	161f0 <flatcc_json_printer_uint64_field@@Base>
   12c1c:	mov	r1, r5
   12c20:	mov	r0, r4
   12c24:	stm	sp, {r6, sl}
   12c28:	ldr	r3, [pc, #584]	; 12e78 <_start@@Base+0x86c>
   12c2c:	mov	r2, #20
   12c30:	bl	163e8 <flatcc_json_printer_int32_field@@Base>
   12c34:	mov	r1, r5
   12c38:	mov	r0, r4
   12c3c:	stm	sp, {r6, sl}
   12c40:	ldr	r3, [pc, #564]	; 12e7c <_start@@Base+0x870>
   12c44:	mov	r2, #21
   12c48:	bl	1614c <flatcc_json_printer_uint32_field@@Base>
   12c4c:	mov	r2, #0
   12c50:	mov	r3, #0
   12c54:	mov	r1, r5
   12c58:	strd	r2, [sp, #8]
   12c5c:	mov	r0, r4
   12c60:	str	r6, [sp]
   12c64:	ldr	r3, [pc, #532]	; 12e80 <_start@@Base+0x874>
   12c68:	mov	r2, #22
   12c6c:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12c70:	mov	r2, #0
   12c74:	mov	r3, #0
   12c78:	mov	r1, r5
   12c7c:	strd	r2, [sp, #8]
   12c80:	mov	r0, r4
   12c84:	str	r6, [sp]
   12c88:	ldr	r3, [pc, #500]	; 12e84 <_start@@Base+0x878>
   12c8c:	mov	r2, #23
   12c90:	bl	161f0 <flatcc_json_printer_uint64_field@@Base>
   12c94:	str	r8, [sp]
   12c98:	mov	r1, r5
   12c9c:	mov	r0, r4
   12ca0:	ldr	r3, [pc, #480]	; 12e88 <_start@@Base+0x87c>
   12ca4:	mov	r2, #24
   12ca8:	bl	18338 <flatcc_json_printer_bool_vector_field@@Base>
   12cac:	mov	r8, #6
   12cb0:	mov	r1, r5
   12cb4:	mov	r0, r4
   12cb8:	str	r9, [sp]
   12cbc:	vldr	s0, [pc, #324]	; 12e08 <_start@@Base+0x7fc>
   12cc0:	ldr	r3, [pc, #452]	; 12e8c <_start@@Base+0x880>
   12cc4:	mov	r2, #25
   12cc8:	bl	165e0 <flatcc_json_printer_float_field@@Base>
   12ccc:	mov	r1, r5
   12cd0:	mov	r0, r4
   12cd4:	str	r8, [sp]
   12cd8:	vldr	s0, [pc, #300]	; 12e0c <_start@@Base+0x800>
   12cdc:	ldr	r3, [pc, #428]	; 12e90 <_start@@Base+0x884>
   12ce0:	mov	r2, #26
   12ce4:	bl	165e0 <flatcc_json_printer_float_field@@Base>
   12ce8:	vldr	s0, [pc, #288]	; 12e10 <_start@@Base+0x804>
   12cec:	mov	r1, r5
   12cf0:	mov	r0, r4
   12cf4:	str	r8, [sp]
   12cf8:	ldr	r3, [pc, #404]	; 12e94 <_start@@Base+0x888>
   12cfc:	mov	r2, #27
   12d00:	bl	165e0 <flatcc_json_printer_float_field@@Base>
   12d04:	mov	r3, #18
   12d08:	str	r3, [sp]
   12d0c:	mov	r1, r5
   12d10:	mov	r0, r4
   12d14:	ldr	r3, [pc, #380]	; 12e98 <_start@@Base+0x88c>
   12d18:	mov	r2, #28
   12d1c:	bl	198f0 <flatcc_json_printer_string_vector_field@@Base>
   12d20:	ldr	r3, [pc, #372]	; 12e9c <_start@@Base+0x890>
   12d24:	mov	r1, r5
   12d28:	str	r3, [sp, #8]
   12d2c:	mov	r3, #23
   12d30:	str	r3, [sp]
   12d34:	mov	r0, r4
   12d38:	str	fp, [sp, #4]
   12d3c:	ldr	r3, [pc, #348]	; 12ea0 <_start@@Base+0x894>
   12d40:	mov	r2, #29
   12d44:	bl	19698 <flatcc_json_printer_struct_vector_field@@Base>
   12d48:	mov	r1, r5
   12d4c:	mov	r0, r4
   12d50:	str	r7, [sp]
   12d54:	ldr	r3, [pc, #328]	; 12ea4 <_start@@Base+0x898>
   12d58:	mov	r2, #30
   12d5c:	bl	1766c <flatcc_json_printer_uint8_vector_field@@Base>
   12d60:	ldr	r3, [pc, #216]	; 12e40 <_start@@Base+0x834>
   12d64:	mov	r1, r5
   12d68:	str	r3, [sp, #8]
   12d6c:	mov	r0, r4
   12d70:	str	r7, [sp, #4]
   12d74:	str	r9, [sp]
   12d78:	ldr	r3, [pc, #296]	; 12ea8 <_start@@Base+0x89c>
   12d7c:	mov	r2, #31
   12d80:	bl	19698 <flatcc_json_printer_struct_vector_field@@Base>
   12d84:	mov	r3, #15
   12d88:	str	r3, [sp]
   12d8c:	mov	r1, r5
   12d90:	mov	r0, r4
   12d94:	ldr	r3, [pc, #272]	; 12eac <_start@@Base+0x8a0>
   12d98:	mov	r2, #32
   12d9c:	bl	181a0 <flatcc_json_printer_int64_vector_field@@Base>
   12da0:	mov	r1, r5
   12da4:	mov	r0, r4
   12da8:	str	r6, [sp]
   12dac:	ldr	r3, [pc, #252]	; 12eb0 <_start@@Base+0x8a4>
   12db0:	mov	r2, #33	; 0x21
   12db4:	bl	18674 <flatcc_json_printer_double_vector_field@@Base>
   12db8:	ldr	r3, [pc, #244]	; 12eb4 <_start@@Base+0x8a8>
   12dbc:	mov	r1, r5
   12dc0:	str	r3, [sp, #4]
   12dc4:	mov	r3, #21
   12dc8:	str	r3, [sp]
   12dcc:	mov	r0, r4
   12dd0:	ldr	r3, [pc, #224]	; 12eb8 <_start@@Base+0x8ac>
   12dd4:	mov	r2, #34	; 0x22
   12dd8:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   12ddc:	ldr	r3, [pc, #216]	; 12ebc <_start@@Base+0x8b0>
   12de0:	mov	r2, #35	; 0x23
   12de4:	str	r3, [sp, #4]
   12de8:	mov	r3, #10
   12dec:	str	r3, [sp]
   12df0:	mov	r1, r5
   12df4:	ldr	r3, [pc, #196]	; 12ec0 <_start@@Base+0x8b4>
   12df8:	mov	r0, r4
   12dfc:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   12e00:	add	sp, sp, #20
   12e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12e08:	ldmmi	r9, {r5, r6, r7, r8, sl, sp, lr}
   12e0c:	submi	r0, r0, r0
   12e10:	andeq	r0, r0, r0
   12e14:	strdeq	r3, [r1], -r4
   12e18:	strheq	fp, [r1], -r3
   12e1c:	strheq	fp, [r1], -r7
   12e20:	strheq	fp, [r1], -ip
   12e24:	strheq	fp, [r1], -pc	; <UNPREDICTABLE>
   12e28:	andeq	fp, r1, r4, asr #1
   12e2c:	andeq	r3, r1, r8, lsr r4
   12e30:	andeq	fp, r1, lr, asr #1
   12e34:	andeq	r3, r1, r4, ror r0
   12e38:	strdeq	r3, [r1], -ip
   12e3c:	andeq	fp, r1, r6, asr #4
   12e40:	andeq	r3, r1, r8, lsl r0
   12e44:	ldrdeq	r2, [r1], -r4
   12e48:	ldrdeq	fp, [r1], -r4
   12e4c:	ldrdeq	fp, [r1], -sl
   12e50:	andeq	fp, r1, ip, ror #1
   12e54:	strdeq	fp, [r1], -lr
   12e58:	andeq	fp, r1, r4, lsl #2
   12e5c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12e60:	andeq	fp, r1, r9, lsl r1
   12e64:	andeq	fp, r1, r3, lsr #2
   12e68:	andeq	fp, r1, ip, lsr #2
   12e6c:	andeq	fp, r1, sp, lsr r1
   12e70:	andeq	fp, r1, lr, asr #2
   12e74:	andeq	fp, r1, pc, asr r1
   12e78:	andeq	fp, r1, r0, ror r1
   12e7c:	andeq	fp, r1, r2, lsl #3
   12e80:	muleq	r1, r4, r1
   12e84:	andeq	fp, r1, r6, lsr #3
   12e88:			; <UNDEFINED> instruction: 0x0001b1b8
   12e8c:	andeq	fp, r1, r9, asr #3
   12e90:	andeq	fp, r1, pc, asr #3
   12e94:	ldrdeq	fp, [r1], -r6
   12e98:	ldrdeq	fp, [r1], -sp
   12e9c:	andeq	r2, r1, ip, lsr pc
   12ea0:	strdeq	fp, [r1], -r0
   12ea4:	andeq	fp, r1, r8, lsl #4
   12ea8:	andeq	fp, r1, sp, lsl #4
   12eac:	andeq	fp, r1, r3, lsl r2
   12eb0:	andeq	fp, r1, r3, lsr #4
   12eb4:	andeq	r3, r1, r8, asr #14
   12eb8:	andeq	fp, r1, r5, lsr r2
   12ebc:	andeq	r2, r1, r4, asr #29
   12ec0:	andeq	fp, r1, fp, asr #4
   12ec4:	push	{r0, r1, r4, r5, r6, lr}
   12ec8:	mov	r3, #4
   12ecc:	mov	r4, #0
   12ed0:	mov	r2, r4
   12ed4:	stm	sp, {r3, r4}
   12ed8:	ldr	r3, [pc, #80]	; 12f30 <_start@@Base+0x924>
   12edc:	mov	r5, r0
   12ee0:	mov	r6, r1
   12ee4:	bl	15e6c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   12ee8:	mov	r2, #1
   12eec:	mov	r3, #7
   12ef0:	str	r2, [sp, #4]
   12ef4:	str	r3, [sp]
   12ef8:	mov	r1, r6
   12efc:	mov	r0, r5
   12f00:	ldr	r3, [pc, #44]	; 12f34 <_start@@Base+0x928>
   12f04:	bl	15e6c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   12f08:	mov	r3, #6
   12f0c:	str	r3, [sp]
   12f10:	str	r4, [sp, #4]
   12f14:	ldr	r3, [pc, #28]	; 12f38 <_start@@Base+0x92c>
   12f18:	mov	r2, #2
   12f1c:	mov	r1, r6
   12f20:	mov	r0, r5
   12f24:	bl	15e6c <flatcc_json_printer_uint8_vector_base64_field@@Base>
   12f28:	add	sp, sp, #8
   12f2c:	pop	{r4, r5, r6, pc}
   12f30:	andeq	fp, r1, r3, lsl #8
   12f34:	andeq	fp, r1, r6, asr r2
   12f38:	andeq	fp, r1, lr, asr r2
   12f3c:	mov	r3, #2
   12f40:	push	{r0, r1, r2, r4, r5, lr}
   12f44:	mov	r4, r1
   12f48:	str	r3, [sp, #4]
   12f4c:	ldr	r3, [pc, #64]	; 12f94 <_start@@Base+0x988>
   12f50:	mov	r2, r1
   12f54:	str	r3, [sp]
   12f58:	mov	r3, #0
   12f5c:	mov	r1, r3
   12f60:	mov	r5, r0
   12f64:	bl	16f34 <flatcc_json_printer_uint32_struct_field@@Base>
   12f68:	mov	r3, #8
   12f6c:	str	r3, [sp, #4]
   12f70:	ldr	r3, [pc, #32]	; 12f98 <_start@@Base+0x98c>
   12f74:	mov	r2, r4
   12f78:	str	r3, [sp]
   12f7c:	mov	r1, #1
   12f80:	mov	r3, #4
   12f84:	mov	r0, r5
   12f88:	bl	16f34 <flatcc_json_printer_uint32_struct_field@@Base>
   12f8c:	add	sp, sp, #12
   12f90:	pop	{r4, r5, pc}
   12f94:	andeq	fp, r1, r5, ror #4
   12f98:	andeq	fp, r1, r8, ror #4
   12f9c:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12fa0:	mov	r6, #2
   12fa4:	str	r6, [sp]
   12fa8:	ldr	r3, [pc, #92]	; 1300c <_start@@Base+0xa00>
   12fac:	mov	r2, #0
   12fb0:	mov	r4, r0
   12fb4:	mov	r5, r1
   12fb8:	bl	15dfc <flatcc_json_printer_string_field@@Base>
   12fbc:	mov	r2, #0
   12fc0:	mov	r3, #0
   12fc4:	mov	r1, r5
   12fc8:	strd	r2, [sp, #8]
   12fcc:	mov	r3, #3
   12fd0:	str	r3, [sp]
   12fd4:	mov	r0, r4
   12fd8:	ldr	r3, [pc, #48]	; 13010 <_start@@Base+0xa04>
   12fdc:	mov	r2, #1
   12fe0:	bl	1648c <flatcc_json_printer_int64_field@@Base>
   12fe4:	mov	r2, #5
   12fe8:	mov	r3, #0
   12fec:	mov	r1, r5
   12ff0:	stm	sp, {r2, r3}
   12ff4:	mov	r0, r4
   12ff8:	ldr	r3, [pc, #20]	; 13014 <_start@@Base+0xa08>
   12ffc:	mov	r2, r6
   13000:	bl	160a8 <flatcc_json_printer_uint16_field@@Base>
   13004:	add	sp, sp, #16
   13008:	pop	{r4, r5, r6, pc}
   1300c:	andeq	fp, r1, r5, ror #4
   13010:	andeq	fp, r1, r1, ror r2
   13014:	andeq	fp, r1, r5, ror r2
   13018:	ldr	r3, [pc, #76]	; 1306c <_start@@Base+0xa60>
   1301c:	push	{r0, r1, r4, r5, r6, lr}
   13020:	mov	r4, #1
   13024:	str	r3, [sp]
   13028:	mov	r3, #0
   1302c:	mov	r5, r1
   13030:	mov	r2, r1
   13034:	str	r4, [sp, #4]
   13038:	mov	r1, r3
   1303c:	mov	r6, r0
   13040:	bl	1701c <flatcc_json_printer_int16_struct_field@@Base>
   13044:	ldr	r3, [pc, #36]	; 13070 <_start@@Base+0xa64>
   13048:	str	r4, [sp, #4]
   1304c:	str	r3, [sp]
   13050:	mov	r2, r5
   13054:	mov	r3, #2
   13058:	mov	r1, r4
   1305c:	mov	r0, r6
   13060:	bl	16fd0 <flatcc_json_printer_int8_struct_field@@Base>
   13064:	add	sp, sp, #8
   13068:	pop	{r4, r5, r6, pc}
   1306c:	andeq	fp, r1, r0, lsl #3
   13070:	andeq	fp, r1, sp, ror r0
   13074:	ldrb	r3, [r1, #8]
   13078:	sub	r3, r3, #1
   1307c:	cmp	r3, #3
   13080:	ldrls	pc, [pc, r3, lsl #2]
   13084:	b	130b8 <_start@@Base+0xaac>
   13088:	muleq	r1, r8, r0
   1308c:	andeq	r3, r1, r0, lsr #1
   13090:	andeq	r3, r1, r8, lsr #1
   13094:	strheq	r3, [r1], -r0
   13098:	ldr	r2, [pc, #28]	; 130bc <_start@@Base+0xab0>
   1309c:	b	1a0cc <flatcc_json_printer_union_table@@Base>
   130a0:	ldr	r2, [pc, #24]	; 130c0 <_start@@Base+0xab4>
   130a4:	b	1309c <_start@@Base+0xa90>
   130a8:	ldr	r2, [pc, #20]	; 130c4 <_start@@Base+0xab8>
   130ac:	b	1309c <_start@@Base+0xa90>
   130b0:	ldr	r2, [pc, #16]	; 130c8 <_start@@Base+0xabc>
   130b4:	b	1309c <_start@@Base+0xa90>
   130b8:	bx	lr
   130bc:	ldrdeq	r2, [r1], -r4
   130c0:	muleq	r1, r4, r3
   130c4:	andeq	r2, r1, r4, lsr r7
   130c8:	andeq	r3, r1, ip, asr #1
   130cc:	push	{r4, r5, lr}
   130d0:	sub	sp, sp, #20
   130d4:	ldr	r3, [pc, #116]	; 13150 <_start@@Base+0xb44>
   130d8:	mov	r2, #0
   130dc:	str	r3, [sp, #4]
   130e0:	mov	r3, #6
   130e4:	str	r3, [sp]
   130e8:	ldr	r3, [pc, #100]	; 13154 <_start@@Base+0xb48>
   130ec:	mov	r4, r0
   130f0:	mov	r5, r1
   130f4:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   130f8:	ldr	r3, [pc, #88]	; 13158 <_start@@Base+0xb4c>
   130fc:	mov	r1, r5
   13100:	str	r3, [sp, #4]
   13104:	mov	r3, #5
   13108:	str	r3, [sp]
   1310c:	mov	r0, r4
   13110:	ldr	r3, [pc, #68]	; 1315c <_start@@Base+0xb50>
   13114:	mov	r2, #1
   13118:	bl	19e70 <flatcc_json_printer_table_field@@Base>
   1311c:	ldr	r3, [pc, #60]	; 13160 <_start@@Base+0xb54>
   13120:	mov	r2, #3
   13124:	str	r3, [sp, #8]
   13128:	ldr	r3, [pc, #52]	; 13164 <_start@@Base+0xb58>
   1312c:	mov	r1, r5
   13130:	str	r3, [sp, #4]
   13134:	mov	r3, #7
   13138:	str	r3, [sp]
   1313c:	mov	r0, r4
   13140:	ldr	r3, [pc, #32]	; 13168 <_start@@Base+0xb5c>
   13144:	bl	19bb4 <flatcc_json_printer_union_vector_field@@Base>
   13148:	add	sp, sp, #20
   1314c:	pop	{r4, r5, pc}
   13150:	andeq	r2, r1, r8, lsr r7
   13154:	andeq	fp, r1, fp, ror r2
   13158:	andeq	r3, r1, ip, ror #2
   1315c:	andeq	fp, r1, r2, lsl #5
   13160:	andeq	r3, r1, r4, ror r0
   13164:	strdeq	r3, [r1], -ip
   13168:	andeq	fp, r1, r8, lsl #5
   1316c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13170:	sub	sp, sp, #20
   13174:	ldr	r5, [pc, #168]	; 13224 <_start@@Base+0xc18>
   13178:	ldr	r4, [pc, #168]	; 13228 <_start@@Base+0xc1c>
   1317c:	mov	r3, #14
   13180:	mov	r6, r0
   13184:	mov	r7, r1
   13188:	str	r3, [sp]
   1318c:	mov	r9, #10
   13190:	str	r5, [sp, #8]
   13194:	str	r4, [sp, #4]
   13198:	ldr	r3, [pc, #140]	; 1322c <_start@@Base+0xc20>
   1319c:	mov	r2, #1
   131a0:	bl	19eec <flatcc_json_printer_union_field@@Base>
   131a4:	mov	r8, #9
   131a8:	mov	r1, r7
   131ac:	mov	r0, r6
   131b0:	stmib	sp, {r4, r5}
   131b4:	str	r9, [sp]
   131b8:	ldr	r3, [pc, #112]	; 13230 <_start@@Base+0xc24>
   131bc:	mov	r2, #3
   131c0:	bl	19eec <flatcc_json_printer_union_field@@Base>
   131c4:	mov	r1, r7
   131c8:	mov	r0, r6
   131cc:	stmib	sp, {r4, r5}
   131d0:	str	r8, [sp]
   131d4:	ldr	r3, [pc, #88]	; 13234 <_start@@Base+0xc28>
   131d8:	mov	r2, #5
   131dc:	bl	19eec <flatcc_json_printer_union_field@@Base>
   131e0:	mov	r3, #5
   131e4:	str	r3, [sp]
   131e8:	mov	r1, r7
   131ec:	mov	r0, r6
   131f0:	stmib	sp, {r4, r5}
   131f4:	ldr	r3, [pc, #60]	; 13238 <_start@@Base+0xc2c>
   131f8:	mov	r2, #7
   131fc:	bl	19eec <flatcc_json_printer_union_field@@Base>
   13200:	stmib	sp, {r4, r5}
   13204:	str	r9, [sp]
   13208:	ldr	r3, [pc, #44]	; 1323c <_start@@Base+0xc30>
   1320c:	mov	r2, r8
   13210:	mov	r1, r7
   13214:	mov	r0, r6
   13218:	bl	19bb4 <flatcc_json_printer_union_vector_field@@Base>
   1321c:	add	sp, sp, #20
   13220:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13224:	andeq	r3, r1, r0, asr #4
   13228:	andeq	r3, r1, r0, lsl #6
   1322c:	muleq	r1, r0, r2
   13230:	muleq	r1, pc, r2	; <UNPREDICTABLE>
   13234:	andeq	fp, r1, sl, lsr #5
   13238:			; <UNDEFINED> instruction: 0x0001b2b4
   1323c:			; <UNDEFINED> instruction: 0x0001b2ba
   13240:	ldrb	r3, [r1, #8]
   13244:	cmp	r3, #9
   13248:	beq	13288 <_start@@Base+0xc7c>
   1324c:	bhi	13268 <_start@@Base+0xc5c>
   13250:	cmp	r3, #2
   13254:	beq	13280 <_start@@Base+0xc74>
   13258:	cmp	r3, #8
   1325c:	ldreq	r2, [pc, #48]	; 13294 <_start@@Base+0xc88>
   13260:	beq	1328c <_start@@Base+0xc80>
   13264:	bx	lr
   13268:	cmp	r3, #11
   1326c:	beq	13290 <_start@@Base+0xc84>
   13270:	bcc	13288 <_start@@Base+0xc7c>
   13274:	cmp	r3, #255	; 0xff
   13278:	beq	13290 <_start@@Base+0xc84>
   1327c:	bx	lr
   13280:	ldr	r2, [pc, #16]	; 13298 <_start@@Base+0xc8c>
   13284:	b	1a0cc <flatcc_json_printer_union_table@@Base>
   13288:	ldr	r2, [pc, #12]	; 1329c <_start@@Base+0xc90>
   1328c:	b	1a0ec <flatcc_json_printer_union_struct@@Base>
   13290:	b	1a170 <flatcc_json_printer_union_string@@Base>
   13294:	ldrdeq	r3, [r1], -r0
   13298:	andeq	r2, r1, r4, asr #15
   1329c:	andeq	r3, r1, r0, lsr #5
   132a0:	mov	r3, #10
   132a4:	push	{r0, r1, r2, lr}
   132a8:	mov	r2, r1
   132ac:	str	r3, [sp, #4]
   132b0:	ldr	r3, [pc, #20]	; 132cc <_start@@Base+0xcc0>
   132b4:	str	r3, [sp]
   132b8:	mov	r3, #0
   132bc:	mov	r1, r3
   132c0:	bl	17068 <flatcc_json_printer_int32_struct_field@@Base>
   132c4:	add	sp, sp, #12
   132c8:	pop	{pc}		; (ldr pc, [sp], #4)
   132cc:	andeq	fp, r1, r5, asr #5
   132d0:	mov	r3, #11
   132d4:	push	{r0, r1, r2, lr}
   132d8:	mov	r2, r1
   132dc:	str	r3, [sp, #4]
   132e0:	ldr	r3, [pc, #20]	; 132fc <_start@@Base+0xcf0>
   132e4:	str	r3, [sp]
   132e8:	mov	r3, #0
   132ec:	mov	r1, r3
   132f0:	bl	16ee8 <flatcc_json_printer_uint16_struct_field@@Base>
   132f4:	add	sp, sp, #12
   132f8:	pop	{pc}		; (ldr pc, [sp], #4)
   132fc:	ldrdeq	fp, [r1], -r0
   13300:	cmp	r1, #9
   13304:	mov	r2, r1
   13308:	mov	r3, r0
   1330c:	moveq	r2, #5
   13310:	ldreq	r1, [pc, #96]	; 13378 <_start@@Base+0xd6c>
   13314:	beq	13374 <_start@@Base+0xd68>
   13318:	bhi	13348 <_start@@Base+0xd3c>
   1331c:	cmp	r2, #2
   13320:	moveq	r2, #5
   13324:	ldreq	r1, [pc, #80]	; 1337c <_start@@Base+0xd70>
   13328:	beq	13374 <_start@@Base+0xd68>
   1332c:	cmp	r2, #8
   13330:	ldreq	r1, [pc, #72]	; 13380 <_start@@Base+0xd74>
   13334:	beq	13374 <_start@@Base+0xd68>
   13338:	mov	r2, #4
   1333c:	ldr	r1, [pc, #64]	; 13384 <_start@@Base+0xd78>
   13340:	mov	r0, r3
   13344:	b	13374 <_start@@Base+0xd68>
   13348:	cmp	r2, #11
   1334c:	moveq	r2, #5
   13350:	ldreq	r1, [pc, #48]	; 13388 <_start@@Base+0xd7c>
   13354:	beq	13374 <_start@@Base+0xd68>
   13358:	movcc	r2, #7
   1335c:	ldrcc	r1, [pc, #40]	; 1338c <_start@@Base+0xd80>
   13360:	bcc	13374 <_start@@Base+0xd68>
   13364:	cmp	r2, #255	; 0xff
   13368:	moveq	r2, #6
   1336c:	ldreq	r1, [pc, #28]	; 13390 <_start@@Base+0xd84>
   13370:	bne	13338 <_start@@Base+0xd2c>
   13374:	b	15d8c <flatcc_json_printer_enum@@Base>
   13378:	andeq	fp, r1, fp, ror #5
   1337c:	ldrdeq	fp, [r1], -ip
   13380:	andeq	fp, r1, r2, ror #5
   13384:	andeq	fp, r1, r6, lsl #6
   13388:	strdeq	fp, [r1], -r9
   1338c:	strdeq	fp, [r1], -r1
   13390:	strdeq	fp, [r1], -pc	; <UNPREDICTABLE>
   13394:	push	{r4, r5, r6, r7, lr}
   13398:	mov	r3, #5
   1339c:	sub	sp, sp, #20
   133a0:	mov	r4, #2
   133a4:	ldr	r7, [pc, #120]	; 13424 <_start@@Base+0xe18>
   133a8:	stm	sp, {r3, r4}
   133ac:	str	r7, [sp, #8]
   133b0:	ldr	r3, [pc, #112]	; 13428 <_start@@Base+0xe1c>
   133b4:	mov	r2, #0
   133b8:	mov	r5, r0
   133bc:	mov	r6, r1
   133c0:	bl	16a84 <flatcc_json_printer_int8_enum_field@@Base>
   133c4:	mov	r3, #6
   133c8:	str	r3, [sp]
   133cc:	mov	r1, r6
   133d0:	mov	r0, r5
   133d4:	stmib	sp, {r4, r7}
   133d8:	ldr	r3, [pc, #76]	; 1342c <_start@@Base+0xe20>
   133dc:	mov	r2, #1
   133e0:	bl	16a84 <flatcc_json_printer_int8_enum_field@@Base>
   133e4:	mov	r2, r4
   133e8:	mov	r1, r6
   133ec:	mov	r0, r5
   133f0:	str	r4, [sp, #4]
   133f4:	str	r4, [sp]
   133f8:	ldr	r3, [pc, #48]	; 13430 <_start@@Base+0xe24>
   133fc:	bl	16004 <flatcc_json_printer_uint8_field@@Base>
   13400:	mov	r2, #3
   13404:	str	r4, [sp, #4]
   13408:	str	r2, [sp]
   1340c:	ldr	r3, [pc, #32]	; 13434 <_start@@Base+0xe28>
   13410:	mov	r1, r6
   13414:	mov	r0, r5
   13418:	bl	16004 <flatcc_json_printer_uint8_field@@Base>
   1341c:	add	sp, sp, #20
   13420:	pop	{r4, r5, r6, r7, pc}
   13424:	andeq	r3, r1, r8, lsr r4
   13428:	andeq	fp, r1, lr, asr #1
   1342c:	andeq	fp, r1, fp, lsl #6
   13430:	andeq	fp, r1, r2, lsl r3
   13434:	andeq	fp, r1, r5, lsl r3
   13438:	push	{r4, r5, r6, r7, r8, lr}
   1343c:	uxtb	r4, r1
   13440:	tst	r4, #244	; 0xf4
   13444:	movne	r6, #1
   13448:	moveq	r6, #0
   1344c:	cmp	r4, #0
   13450:	orreq	r6, r6, #1
   13454:	cmp	r6, #0
   13458:	beq	13464 <_start@@Base+0xe58>
   1345c:	pop	{r4, r5, r6, r7, r8, lr}
   13460:	b	15cb4 <flatcc_json_printer_int8@@Base>
   13464:	sub	r3, r4, #1
   13468:	tst	r3, r4
   1346c:	movne	r7, #1
   13470:	moveq	r7, #0
   13474:	mov	r1, r7
   13478:	mov	r5, r0
   1347c:	bl	15d90 <flatcc_json_printer_delimit_enum_flags@@Base>
   13480:	ands	r1, r4, #1
   13484:	beq	134a0 <_start@@Base+0xe94>
   13488:	mov	r1, r6
   1348c:	mov	r3, #3
   13490:	ldr	r2, [pc, #80]	; 134e8 <_start@@Base+0xedc>
   13494:	mov	r0, r5
   13498:	bl	15dc4 <flatcc_json_printer_enum_flag@@Base>
   1349c:	mov	r1, #1
   134a0:	tst	r4, #2
   134a4:	beq	134c0 <_start@@Base+0xeb4>
   134a8:	add	r6, r1, #1
   134ac:	mov	r3, #5
   134b0:	ldr	r2, [pc, #52]	; 134ec <_start@@Base+0xee0>
   134b4:	mov	r0, r5
   134b8:	bl	15dc4 <flatcc_json_printer_enum_flag@@Base>
   134bc:	mov	r1, r6
   134c0:	tst	r4, #8
   134c4:	beq	134d8 <_start@@Base+0xecc>
   134c8:	mov	r3, #4
   134cc:	ldr	r2, [pc, #28]	; 134f0 <_start@@Base+0xee4>
   134d0:	mov	r0, r5
   134d4:	bl	15dc4 <flatcc_json_printer_enum_flag@@Base>
   134d8:	mov	r1, r7
   134dc:	mov	r0, r5
   134e0:	pop	{r4, r5, r6, r7, r8, lr}
   134e4:	b	15d90 <flatcc_json_printer_delimit_enum_flags@@Base>
   134e8:	andeq	fp, r1, r9, lsl r3
   134ec:	andeq	fp, r1, sp, lsl r3
   134f0:	andeq	fp, r1, r3, lsr #6
   134f4:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   134f8:	mov	r6, #1
   134fc:	ldr	r3, [pc, #216]	; 135dc <_start@@Base+0xfd0>
   13500:	mov	r4, r1
   13504:	str	r3, [sp]
   13508:	mov	r3, #0
   1350c:	str	r6, [sp, #4]
   13510:	mov	r2, r1
   13514:	mov	r1, r3
   13518:	mov	r5, r0
   1351c:	bl	17150 <flatcc_json_printer_float_struct_field@@Base>
   13520:	ldr	r3, [pc, #184]	; 135e0 <_start@@Base+0xfd4>
   13524:	str	r6, [sp, #4]
   13528:	str	r3, [sp]
   1352c:	mov	r2, r4
   13530:	mov	r1, r6
   13534:	mov	r0, r5
   13538:	mov	r3, #4
   1353c:	bl	17150 <flatcc_json_printer_float_struct_field@@Base>
   13540:	ldr	r3, [pc, #156]	; 135e4 <_start@@Base+0xfd8>
   13544:	str	r6, [sp, #4]
   13548:	str	r3, [sp]
   1354c:	mov	r2, r4
   13550:	mov	r0, r5
   13554:	mov	r3, #8
   13558:	mov	r1, #2
   1355c:	bl	17150 <flatcc_json_printer_float_struct_field@@Base>
   13560:	ldr	r3, [pc, #128]	; 135e8 <_start@@Base+0xfdc>
   13564:	mov	r6, #5
   13568:	str	r3, [sp]
   1356c:	mov	r2, r4
   13570:	mov	r0, r5
   13574:	str	r6, [sp, #4]
   13578:	mov	r3, #16
   1357c:	mov	r1, #3
   13580:	bl	171a8 <flatcc_json_printer_double_struct_field@@Base>
   13584:	ldr	r3, [pc, #96]	; 135ec <_start@@Base+0xfe0>
   13588:	mov	r2, r4
   1358c:	str	r3, [sp, #8]
   13590:	ldr	r3, [pc, #88]	; 135f0 <_start@@Base+0xfe4>
   13594:	mov	r0, r5
   13598:	str	r3, [sp]
   1359c:	str	r6, [sp, #4]
   135a0:	mov	r3, #24
   135a4:	mov	r1, #4
   135a8:	bl	173f8 <flatcc_json_printer_int8_enum_struct_field@@Base>
   135ac:	ldr	r3, [pc, #64]	; 135f4 <_start@@Base+0xfe8>
   135b0:	str	r6, [sp, #4]
   135b4:	str	r3, [sp, #8]
   135b8:	ldr	r3, [pc, #56]	; 135f8 <_start@@Base+0xfec>
   135bc:	mov	r2, r4
   135c0:	str	r3, [sp]
   135c4:	mov	r1, r6
   135c8:	mov	r3, #26
   135cc:	mov	r0, r5
   135d0:	bl	1a180 <flatcc_json_printer_embedded_struct_field@@Base>
   135d4:	add	sp, sp, #16
   135d8:	pop	{r4, r5, r6, pc}
   135dc:	andeq	fp, r1, fp, lsl #4
   135e0:	andeq	fp, r1, r2, lsl #2
   135e4:	andeq	fp, r1, r8, lsr #6
   135e8:	andeq	fp, r1, sl, lsr #6
   135ec:	andeq	r3, r1, r8, lsr r4
   135f0:	andeq	fp, r1, r0, lsr r3
   135f4:	andeq	r3, r1, r8, lsl r0
   135f8:	andeq	fp, r1, r6, lsr r3
   135fc:	sub	r1, r1, #1
   13600:	cmp	r1, #3
   13604:	ldrls	pc, [pc, r1, lsl #2]
   13608:	b	1364c <_start@@Base+0x1040>
   1360c:	andeq	r3, r1, ip, lsl r6
   13610:	andeq	r3, r1, r8, lsr #12
   13614:	andeq	r3, r1, r4, lsr r6
   13618:	andeq	r3, r1, r0, asr #12
   1361c:	ldr	r1, [pc, #52]	; 13658 <_start@@Base+0x104c>
   13620:	mov	r2, #7
   13624:	b	15d8c <flatcc_json_printer_enum@@Base>
   13628:	mov	r2, #23
   1362c:	ldr	r1, [pc, #40]	; 1365c <_start@@Base+0x1050>
   13630:	b	13624 <_start@@Base+0x1018>
   13634:	mov	r2, #8
   13638:	ldr	r1, [pc, #32]	; 13660 <_start@@Base+0x1054>
   1363c:	b	13624 <_start@@Base+0x1018>
   13640:	mov	r2, #3
   13644:	ldr	r1, [pc, #24]	; 13664 <_start@@Base+0x1058>
   13648:	b	13624 <_start@@Base+0x1018>
   1364c:	mov	r2, #4
   13650:	ldr	r1, [pc, #16]	; 13668 <_start@@Base+0x105c>
   13654:	b	13624 <_start@@Base+0x1018>
   13658:	andeq	fp, r1, ip, lsr r3
   1365c:	andeq	fp, r1, r4, asr #6
   13660:	andeq	fp, r1, ip, asr r3
   13664:	andeq	fp, r1, r5, ror #6
   13668:	andeq	fp, r1, r6, lsl #6
   1366c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13670:	subs	r8, r1, #0
   13674:	ldr	r1, [pc, #200]	; 13744 <_start@@Base+0x1138>
   13678:	addeq	r8, sp, #4
   1367c:	bl	12448 <fopen@plt>
   13680:	subs	r6, r0, #0
   13684:	beq	1373c <_start@@Base+0x1130>
   13688:	mov	r2, #2
   1368c:	mov	r1, #0
   13690:	bl	12538 <fseek@plt>
   13694:	mov	r0, r6
   13698:	bl	12478 <ftell@plt>
   1369c:	cmp	r0, #10240	; 0x2800
   136a0:	mov	r4, r0
   136a4:	str	r0, [r8]
   136a8:	bhi	136d4 <_start@@Base+0x10c8>
   136ac:	mov	r0, r6
   136b0:	bl	12490 <rewind@plt>
   136b4:	cmp	r4, #0
   136b8:	movne	r0, r4
   136bc:	moveq	r0, #1
   136c0:	bl	124cc <malloc@plt>
   136c4:	subs	r5, r0, #0
   136c8:	movne	r7, #0
   136cc:	movne	r9, #1
   136d0:	bne	13700 <_start@@Base+0x10f4>
   136d4:	mov	r5, #0
   136d8:	mov	r0, r6
   136dc:	bl	12520 <fclose@plt>
   136e0:	cmp	r5, #0
   136e4:	beq	136f0 <_start@@Base+0x10e4>
   136e8:	mov	r0, r5
   136ec:	bl	12460 <free@plt>
   136f0:	str	r4, [r8]
   136f4:	mov	r5, #0
   136f8:	b	13730 <_start@@Base+0x1124>
   136fc:	add	r7, r7, r0
   13700:	mov	r3, r6
   13704:	sub	r2, r4, r7
   13708:	mov	r1, r9
   1370c:	add	r0, r5, r7
   13710:	bl	124b4 <fread@plt>
   13714:	cmp	r0, #0
   13718:	bne	136fc <_start@@Base+0x10f0>
   1371c:	cmp	r4, r7
   13720:	bne	136d8 <_start@@Base+0x10cc>
   13724:	mov	r0, r6
   13728:	bl	12520 <fclose@plt>
   1372c:	str	r4, [r8]
   13730:	mov	r0, r5
   13734:	add	sp, sp, #12
   13738:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1373c:	mov	r4, r6
   13740:	b	136f0 <_start@@Base+0x10e4>
   13744:	andeq	fp, r1, r9, ror #6
   13748:	bx	lr

0001374c <test_print@@Base>:
   1374c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13750:	sub	sp, sp, #72	; 0x48
   13754:	ldr	r8, [pc, #516]	; 13960 <test_print@@Base+0x214>
   13758:	mov	r6, #0
   1375c:	ldr	r1, [pc, #512]	; 13964 <test_print@@Base+0x218>
   13760:	ldr	r0, [r8]
   13764:	str	r6, [sp, #12]
   13768:	str	r6, [sp, #16]
   1376c:	str	r6, [sp, #20]
   13770:	bl	12448 <fopen@plt>
   13774:	ldr	r7, [pc, #492]	; 13968 <test_print@@Base+0x21c>
   13778:	subs	r5, r0, #0
   1377c:	bne	137a0 <test_print@@Base+0x54>
   13780:	ldr	r2, [r8]
   13784:	ldr	r1, [pc, #480]	; 1396c <test_print@@Base+0x220>
   13788:	ldr	r0, [r7]
   1378c:	bl	124fc <fprintf@plt>
   13790:	mvn	r4, #0
   13794:	mov	r0, r4
   13798:	add	sp, sp, #72	; 0x48
   1379c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   137a0:	ldr	sl, [pc, #456]	; 13970 <test_print@@Base+0x224>
   137a4:	mov	r1, r5
   137a8:	add	r0, sp, #24
   137ac:	bl	1a640 <flatcc_json_printer_init@@Base>
   137b0:	strb	r6, [sp, #51]	; 0x33
   137b4:	ldr	r6, [sl]
   137b8:	mov	r3, #2
   137bc:	strb	r3, [sp, #49]	; 0x31
   137c0:	cmp	r6, #0
   137c4:	mov	r3, #1
   137c8:	mov	r4, r8
   137cc:	strb	r3, [sp, #50]	; 0x32
   137d0:	beq	13828 <test_print@@Base+0xdc>
   137d4:	ldr	r1, [pc, #408]	; 13974 <test_print@@Base+0x228>
   137d8:	mov	r0, r6
   137dc:	bl	1243c <strcmp@plt>
   137e0:	cmp	r0, #0
   137e4:	beq	13828 <test_print@@Base+0xdc>
   137e8:	mov	r0, r6
   137ec:	add	r1, sp, #12
   137f0:	bl	1366c <_start@@Base+0x1060>
   137f4:	subs	r6, r0, #0
   137f8:	beq	13838 <test_print@@Base+0xec>
   137fc:	add	r1, sp, #16
   13800:	ldr	r0, [r4, #4]
   13804:	bl	1366c <_start@@Base+0x1060>
   13808:	subs	r9, r0, #0
   1380c:	bne	138a8 <test_print@@Base+0x15c>
   13810:	ldr	r2, [r4, #4]
   13814:	ldr	r1, [pc, #348]	; 13978 <test_print@@Base+0x22c>
   13818:	ldr	r0, [r7]
   1381c:	bl	124fc <fprintf@plt>
   13820:	mov	r8, r9
   13824:	b	13850 <test_print@@Base+0x104>
   13828:	mov	r3, #288	; 0x120
   1382c:	str	r3, [sp, #12]
   13830:	ldr	r6, [pc, #324]	; 1397c <test_print@@Base+0x230>
   13834:	b	137fc <test_print@@Base+0xb0>
   13838:	ldr	r2, [sl]
   1383c:	ldr	r1, [pc, #316]	; 13980 <test_print@@Base+0x234>
   13840:	ldr	r0, [r7]
   13844:	bl	124fc <fprintf@plt>
   13848:	mov	r8, r6
   1384c:	mov	r9, r6
   13850:	mvn	r4, #0
   13854:	add	r0, sp, #24
   13858:	bl	1a81c <flatcc_json_printer_clear@@Base>
   1385c:	ldr	r3, [sl]
   13860:	cmp	r3, #0
   13864:	cmpne	r6, #0
   13868:	beq	13874 <test_print@@Base+0x128>
   1386c:	mov	r0, r6
   13870:	bl	12460 <free@plt>
   13874:	cmp	r9, #0
   13878:	beq	13884 <test_print@@Base+0x138>
   1387c:	mov	r0, r9
   13880:	bl	12460 <free@plt>
   13884:	cmp	r8, #0
   13888:	beq	13894 <test_print@@Base+0x148>
   1388c:	mov	r0, r8
   13890:	bl	12460 <free@plt>
   13894:	cmp	r5, #0
   13898:	beq	13794 <test_print@@Base+0x48>
   1389c:	mov	r0, r5
   138a0:	bl	12520 <fclose@plt>
   138a4:	b	13794 <test_print@@Base+0x48>
   138a8:	ldr	r3, [pc, #212]	; 13984 <test_print@@Base+0x238>
   138ac:	ldr	r2, [sp, #12]
   138b0:	str	r3, [sp]
   138b4:	mov	r1, r6
   138b8:	ldr	r3, [pc, #200]	; 13988 <test_print@@Base+0x23c>
   138bc:	add	r0, sp, #24
   138c0:	bl	1a3fc <flatcc_json_printer_table_as_root@@Base>
   138c4:	ldr	r3, [sp, #68]	; 0x44
   138c8:	mov	r1, #1
   138cc:	add	r0, sp, #24
   138d0:	blx	r3
   138d4:	ldr	r3, [sp, #60]	; 0x3c
   138d8:	cmp	r3, #0
   138dc:	beq	138e8 <test_print@@Base+0x19c>
   138e0:	ldr	r0, [pc, #164]	; 1398c <test_print@@Base+0x240>
   138e4:	bl	124c0 <puts@plt>
   138e8:	mov	r0, r5
   138ec:	bl	12520 <fclose@plt>
   138f0:	add	r1, sp, #20
   138f4:	ldr	r0, [r4]
   138f8:	bl	1366c <_start@@Base+0x1060>
   138fc:	subs	r8, r0, #0
   13900:	bne	1391c <test_print@@Base+0x1d0>
   13904:	ldr	r2, [r4]
   13908:	ldr	r1, [pc, #128]	; 13990 <test_print@@Base+0x244>
   1390c:	ldr	r0, [r7]
   13910:	bl	124fc <fprintf@plt>
   13914:	mov	r5, #0
   13918:	b	13850 <test_print@@Base+0x104>
   1391c:	ldr	r2, [sp, #20]
   13920:	ldr	r3, [sp, #16]
   13924:	cmp	r2, r3
   13928:	bne	1393c <test_print@@Base+0x1f0>
   1392c:	mov	r1, r9
   13930:	bl	12484 <memcmp@plt>
   13934:	subs	r4, r0, #0
   13938:	beq	1394c <test_print@@Base+0x200>
   1393c:	ldr	r1, [r7]
   13940:	ldr	r0, [pc, #76]	; 13994 <test_print@@Base+0x248>
   13944:	bl	12544 <fputs@plt>
   13948:	b	13914 <test_print@@Base+0x1c8>
   1394c:	ldr	r1, [r7]
   13950:	ldr	r0, [pc, #64]	; 13998 <test_print@@Base+0x24c>
   13954:	bl	12544 <fputs@plt>
   13958:	mov	r5, r4
   1395c:	b	13854 <test_print@@Base+0x108>
   13960:	andeq	sp, r2, r0, lsl #1
   13964:	andeq	fp, r1, ip, ror #6
   13968:	andeq	sp, r2, r8, lsl #1
   1396c:	andeq	fp, r1, pc, ror #6
   13970:	muleq	r2, r4, r0
   13974:	andeq	fp, r1, pc, lsl #7
   13978:			; <UNDEFINED> instruction: 0x0001b3bb
   1397c:			; <UNDEFINED> instruction: 0x0001aebc
   13980:	muleq	r1, r1, r3
   13984:	ldrdeq	r2, [r1], -r4
   13988:	andeq	fp, r1, r6, ror #7
   1398c:	andeq	fp, r1, fp, ror #7
   13990:	andeq	fp, r1, r8, lsl #8
   13994:	andeq	fp, r1, sp, lsr #8
   13998:	andeq	fp, r1, r4, ror #8
   1399c:	andeq	r0, r0, r0
   139a0:	cmp	r0, #1000	; 0x3e8
   139a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   139a8:	mov	r4, r0
   139ac:	bcc	139fc <test_print@@Base+0x2b0>
   139b0:	ldr	r5, [pc, #352]	; 13b18 <test_print@@Base+0x3cc>
   139b4:	cmp	r0, r5
   139b8:	movhi	r5, #5
   139bc:	movls	r5, #4
   139c0:	mov	r3, #0
   139c4:	tst	r5, #1
   139c8:	add	r6, r1, r5
   139cc:	strb	r3, [r1, r5]
   139d0:	beq	13a9c <test_print@@Base+0x350>
   139d4:	cmp	r5, #3
   139d8:	beq	13a58 <test_print@@Base+0x30c>
   139dc:	cmp	r5, #5
   139e0:	beq	13a18 <test_print@@Base+0x2cc>
   139e4:	cmp	r5, #1
   139e8:	bne	139f4 <test_print@@Base+0x2a8>
   139ec:	add	r4, r4, #48	; 0x30
   139f0:	strb	r4, [r6, #-1]
   139f4:	mov	r0, r5
   139f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   139fc:	cmp	r0, #99	; 0x63
   13a00:	movhi	r5, #3
   13a04:	bhi	139c0 <test_print@@Base+0x274>
   13a08:	cmp	r0, #9
   13a0c:	movhi	r5, #2
   13a10:	movls	r5, #1
   13a14:	b	139c0 <test_print@@Base+0x274>
   13a18:	add	r7, r1, #3
   13a1c:	mov	r0, r4
   13a20:	mov	r1, #100	; 0x64
   13a24:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13a28:	mov	r0, r4
   13a2c:	ldr	r8, [pc, #232]	; 13b1c <test_print@@Base+0x3d0>
   13a30:	uxth	r9, r1
   13a34:	mov	r1, #100	; 0x64
   13a38:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13a3c:	ldrb	r3, [r8, r9, lsl #1]
   13a40:	add	sl, r8, r9, lsl #1
   13a44:	strb	r3, [r6, #-2]
   13a48:	ldrb	r3, [sl, #1]
   13a4c:	strb	r3, [r6, #-1]
   13a50:	mov	r6, r7
   13a54:	uxth	r4, r0
   13a58:	mov	r0, r4
   13a5c:	mov	r1, #100	; 0x64
   13a60:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13a64:	mov	r0, r4
   13a68:	ldr	r7, [pc, #172]	; 13b1c <test_print@@Base+0x3d0>
   13a6c:	sub	r9, r6, #2
   13a70:	uxth	r8, r1
   13a74:	mov	r1, #100	; 0x64
   13a78:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13a7c:	ldrb	r3, [r7, r8, lsl #1]
   13a80:	add	sl, r7, r8, lsl #1
   13a84:	strb	r3, [r6, #-2]
   13a88:	ldrb	r3, [sl, #1]
   13a8c:	strb	r3, [r6, #-1]
   13a90:	mov	r6, r9
   13a94:	uxth	r4, r0
   13a98:	b	139ec <test_print@@Base+0x2a0>
   13a9c:	cmp	r5, #2
   13aa0:	beq	13aec <test_print@@Base+0x3a0>
   13aa4:	cmp	r5, #4
   13aa8:	bne	139f4 <test_print@@Base+0x2a8>
   13aac:	add	r7, r1, #2
   13ab0:	mov	r0, r4
   13ab4:	mov	r1, #100	; 0x64
   13ab8:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13abc:	mov	r0, r4
   13ac0:	ldr	r8, [pc, #84]	; 13b1c <test_print@@Base+0x3d0>
   13ac4:	uxth	r9, r1
   13ac8:	mov	r1, #100	; 0x64
   13acc:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13ad0:	ldrb	r3, [r8, r9, lsl #1]
   13ad4:	add	sl, r8, r9, lsl #1
   13ad8:	strb	r3, [r6, #-2]
   13adc:	ldrb	r3, [sl, #1]
   13ae0:	strb	r3, [r6, #-1]
   13ae4:	mov	r6, r7
   13ae8:	uxth	r4, r0
   13aec:	mov	r1, #100	; 0x64
   13af0:	mov	r0, r4
   13af4:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13af8:	ldr	r7, [pc, #28]	; 13b1c <test_print@@Base+0x3d0>
   13afc:	uxth	r1, r1
   13b00:	ldrb	r2, [r7, r1, lsl #1]
   13b04:	add	r3, r7, r1, lsl #1
   13b08:	strb	r2, [r6, #-2]
   13b0c:	ldrb	r3, [r3, #1]
   13b10:	strb	r3, [r6, #-1]
   13b14:	b	139f4 <test_print@@Base+0x2a8>
   13b18:	andeq	r2, r0, pc, lsl #14
   13b1c:	muleq	r1, r0, r5
   13b20:	ldr	r3, [pc, #824]	; 13e60 <test_print@@Base+0x714>
   13b24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b28:	cmp	r0, r3
   13b2c:	mov	r4, r0
   13b30:	bls	13bcc <test_print@@Base+0x480>
   13b34:	ldr	r3, [pc, #808]	; 13e64 <test_print@@Base+0x718>
   13b38:	cmp	r0, r3
   13b3c:	bls	13ba8 <test_print@@Base+0x45c>
   13b40:	ldr	r3, [pc, #800]	; 13e68 <test_print@@Base+0x71c>
   13b44:	cmp	r0, r3
   13b48:	movhi	r6, #10
   13b4c:	bhi	13b60 <test_print@@Base+0x414>
   13b50:	ldr	r6, [pc, #788]	; 13e6c <test_print@@Base+0x720>
   13b54:	cmp	r0, r6
   13b58:	movhi	r6, #9
   13b5c:	movls	r6, #8
   13b60:	mov	r3, #0
   13b64:	tst	r6, #1
   13b68:	add	r5, r1, r6
   13b6c:	strb	r3, [r1, r6]
   13b70:	beq	13d04 <test_print@@Base+0x5b8>
   13b74:	sub	r3, r6, #1
   13b78:	cmp	r3, #8
   13b7c:	ldrls	pc, [pc, r3, lsl #2]
   13b80:	b	13cfc <test_print@@Base+0x5b0>
   13b84:	strdeq	r3, [r1], -r4
   13b88:	strdeq	r3, [r1], -ip
   13b8c:			; <UNDEFINED> instruction: 0x00013cb4
   13b90:	strdeq	r3, [r1], -ip
   13b94:	andeq	r3, r1, r4, ror ip
   13b98:	strdeq	r3, [r1], -ip
   13b9c:	andeq	r3, r1, r4, lsr ip
   13ba0:	strdeq	r3, [r1], -ip
   13ba4:	strdeq	r3, [r1], -r4
   13ba8:	ldr	r3, [pc, #704]	; 13e70 <test_print@@Base+0x724>
   13bac:	cmp	r0, r3
   13bb0:	movhi	r6, #7
   13bb4:	bhi	13b60 <test_print@@Base+0x414>
   13bb8:	ldr	r6, [pc, #692]	; 13e74 <test_print@@Base+0x728>
   13bbc:	cmp	r0, r6
   13bc0:	movhi	r6, #6
   13bc4:	movls	r6, #5
   13bc8:	b	13b60 <test_print@@Base+0x414>
   13bcc:	cmp	r0, #99	; 0x63
   13bd0:	bls	13be4 <test_print@@Base+0x498>
   13bd4:	cmp	r0, #1000	; 0x3e8
   13bd8:	movcs	r6, #4
   13bdc:	movcc	r6, #3
   13be0:	b	13b60 <test_print@@Base+0x414>
   13be4:	cmp	r0, #9
   13be8:	movhi	r6, #2
   13bec:	movls	r6, #1
   13bf0:	b	13b60 <test_print@@Base+0x414>
   13bf4:	mov	r0, r4
   13bf8:	mov	r1, #100	; 0x64
   13bfc:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13c00:	ldr	r7, [pc, #624]	; 13e78 <test_print@@Base+0x72c>
   13c04:	mov	r0, r4
   13c08:	sub	r9, r5, #2
   13c0c:	mov	r8, r1
   13c10:	add	sl, r7, r1, lsl #1
   13c14:	mov	r1, #100	; 0x64
   13c18:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13c1c:	ldrb	r3, [r7, r8, lsl #1]
   13c20:	strb	r3, [r5, #-2]
   13c24:	ldrb	r3, [sl, #1]
   13c28:	strb	r3, [r5, #-1]
   13c2c:	mov	r5, r9
   13c30:	mov	r4, r0
   13c34:	mov	r0, r4
   13c38:	mov	r1, #100	; 0x64
   13c3c:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13c40:	ldr	r7, [pc, #560]	; 13e78 <test_print@@Base+0x72c>
   13c44:	mov	r0, r4
   13c48:	sub	r9, r5, #2
   13c4c:	mov	r8, r1
   13c50:	add	sl, r7, r1, lsl #1
   13c54:	mov	r1, #100	; 0x64
   13c58:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13c5c:	ldrb	r3, [r7, r8, lsl #1]
   13c60:	strb	r3, [r5, #-2]
   13c64:	ldrb	r3, [sl, #1]
   13c68:	strb	r3, [r5, #-1]
   13c6c:	mov	r5, r9
   13c70:	mov	r4, r0
   13c74:	mov	r0, r4
   13c78:	mov	r1, #100	; 0x64
   13c7c:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13c80:	ldr	r7, [pc, #496]	; 13e78 <test_print@@Base+0x72c>
   13c84:	mov	r0, r4
   13c88:	sub	r9, r5, #2
   13c8c:	mov	r8, r1
   13c90:	add	sl, r7, r1, lsl #1
   13c94:	mov	r1, #100	; 0x64
   13c98:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13c9c:	ldrb	r3, [r7, r8, lsl #1]
   13ca0:	strb	r3, [r5, #-2]
   13ca4:	ldrb	r3, [sl, #1]
   13ca8:	strb	r3, [r5, #-1]
   13cac:	mov	r5, r9
   13cb0:	mov	r4, r0
   13cb4:	mov	r0, r4
   13cb8:	mov	r1, #100	; 0x64
   13cbc:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13cc0:	ldr	r7, [pc, #432]	; 13e78 <test_print@@Base+0x72c>
   13cc4:	mov	r0, r4
   13cc8:	sub	r9, r5, #2
   13ccc:	mov	r8, r1
   13cd0:	add	sl, r7, r1, lsl #1
   13cd4:	mov	r1, #100	; 0x64
   13cd8:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13cdc:	ldrb	r3, [r7, r8, lsl #1]
   13ce0:	strb	r3, [r5, #-2]
   13ce4:	ldrb	r3, [sl, #1]
   13ce8:	strb	r3, [r5, #-1]
   13cec:	mov	r5, r9
   13cf0:	mov	r4, r0
   13cf4:	add	r4, r4, #48	; 0x30
   13cf8:	strb	r4, [r5, #-1]
   13cfc:	mov	r0, r6
   13d00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d04:	sub	r3, r6, #2
   13d08:	cmp	r3, #8
   13d0c:	ldrls	pc, [pc, r3, lsl #2]
   13d10:	b	13cfc <test_print@@Base+0x5b0>
   13d14:	andeq	r3, r1, r8, lsr lr
   13d18:	strdeq	r3, [r1], -ip
   13d1c:	strdeq	r3, [r1], -r8
   13d20:	strdeq	r3, [r1], -ip
   13d24:			; <UNDEFINED> instruction: 0x00013db8
   13d28:	strdeq	r3, [r1], -ip
   13d2c:	andeq	r3, r1, r8, ror sp
   13d30:	strdeq	r3, [r1], -ip
   13d34:	andeq	r3, r1, r8, lsr sp
   13d38:	mov	r0, r4
   13d3c:	mov	r1, #100	; 0x64
   13d40:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13d44:	ldr	r7, [pc, #300]	; 13e78 <test_print@@Base+0x72c>
   13d48:	mov	r0, r4
   13d4c:	sub	r9, r5, #2
   13d50:	mov	r8, r1
   13d54:	add	sl, r7, r1, lsl #1
   13d58:	mov	r1, #100	; 0x64
   13d5c:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13d60:	ldrb	r3, [r7, r8, lsl #1]
   13d64:	strb	r3, [r5, #-2]
   13d68:	ldrb	r3, [sl, #1]
   13d6c:	strb	r3, [r5, #-1]
   13d70:	mov	r5, r9
   13d74:	mov	r4, r0
   13d78:	mov	r0, r4
   13d7c:	mov	r1, #100	; 0x64
   13d80:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13d84:	ldr	r7, [pc, #236]	; 13e78 <test_print@@Base+0x72c>
   13d88:	mov	r0, r4
   13d8c:	sub	r9, r5, #2
   13d90:	mov	r8, r1
   13d94:	add	sl, r7, r1, lsl #1
   13d98:	mov	r1, #100	; 0x64
   13d9c:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13da0:	ldrb	r3, [r7, r8, lsl #1]
   13da4:	strb	r3, [r5, #-2]
   13da8:	ldrb	r3, [sl, #1]
   13dac:	strb	r3, [r5, #-1]
   13db0:	mov	r5, r9
   13db4:	mov	r4, r0
   13db8:	mov	r0, r4
   13dbc:	mov	r1, #100	; 0x64
   13dc0:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13dc4:	ldr	r7, [pc, #172]	; 13e78 <test_print@@Base+0x72c>
   13dc8:	mov	r0, r4
   13dcc:	sub	r9, r5, #2
   13dd0:	mov	r8, r1
   13dd4:	add	sl, r7, r1, lsl #1
   13dd8:	mov	r1, #100	; 0x64
   13ddc:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13de0:	ldrb	r3, [r7, r8, lsl #1]
   13de4:	strb	r3, [r5, #-2]
   13de8:	ldrb	r3, [sl, #1]
   13dec:	strb	r3, [r5, #-1]
   13df0:	mov	r5, r9
   13df4:	mov	r4, r0
   13df8:	mov	r0, r4
   13dfc:	mov	r1, #100	; 0x64
   13e00:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13e04:	ldr	r7, [pc, #108]	; 13e78 <test_print@@Base+0x72c>
   13e08:	mov	r0, r4
   13e0c:	sub	r9, r5, #2
   13e10:	mov	r8, r1
   13e14:	add	sl, r7, r1, lsl #1
   13e18:	mov	r1, #100	; 0x64
   13e1c:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   13e20:	ldrb	r3, [r7, r8, lsl #1]
   13e24:	strb	r3, [r5, #-2]
   13e28:	ldrb	r3, [sl, #1]
   13e2c:	strb	r3, [r5, #-1]
   13e30:	mov	r5, r9
   13e34:	mov	r4, r0
   13e38:	mov	r1, #100	; 0x64
   13e3c:	mov	r0, r4
   13e40:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   13e44:	ldr	r7, [pc, #44]	; 13e78 <test_print@@Base+0x72c>
   13e48:	ldrb	r2, [r7, r1, lsl #1]
   13e4c:	add	r3, r7, r1, lsl #1
   13e50:	strb	r2, [r5, #-2]
   13e54:	ldrb	r3, [r3, #1]
   13e58:	strb	r3, [r5, #-1]
   13e5c:	b	13cfc <test_print@@Base+0x5b0>
   13e60:	andeq	r2, r0, pc, lsl #14
   13e64:	addseq	r9, r8, pc, ror r6
   13e68:	blcc	fe6c666c <__bss_end__@@Base+0xfe6995d4>
   13e6c:	ldrbeq	lr, [r5, #255]!	; 0xff
   13e70:	andeq	r4, pc, pc, lsr r2	; <UNPREDICTABLE>
   13e74:	muleq	r1, pc, r6	; <UNPREDICTABLE>
   13e78:	muleq	r1, r0, r5
   13e7c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e80:	mov	r6, r0
   13e84:	mov	r7, r1
   13e88:	add	r1, pc, #984	; 0x3d8
   13e8c:	ldrd	r0, [r1]
   13e90:	cmp	r7, r1
   13e94:	cmpeq	r6, r0
   13e98:	bhi	13eac <test_print@@Base+0x760>
   13e9c:	mov	r0, r6
   13ea0:	mov	r1, r2
   13ea4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ea8:	b	13b20 <test_print@@Base+0x3d4>
   13eac:	add	r1, pc, #956	; 0x3bc
   13eb0:	ldrd	r0, [r1]
   13eb4:	cmp	r7, r1
   13eb8:	cmpeq	r6, r0
   13ebc:	bls	13f9c <test_print@@Base+0x850>
   13ec0:	add	r1, pc, #944	; 0x3b0
   13ec4:	ldrd	r0, [r1]
   13ec8:	cmp	r7, r1
   13ecc:	cmpeq	r6, r0
   13ed0:	bls	13f68 <test_print@@Base+0x81c>
   13ed4:	add	r1, pc, #932	; 0x3a4
   13ed8:	ldrd	r0, [r1]
   13edc:	cmp	r7, r1
   13ee0:	cmpeq	r6, r0
   13ee4:	bls	13f4c <test_print@@Base+0x800>
   13ee8:	add	r1, pc, #920	; 0x398
   13eec:	ldrd	r0, [r1]
   13ef0:	cmp	r7, r1
   13ef4:	cmpeq	r6, r0
   13ef8:	movhi	r8, #20
   13efc:	movls	r8, #19
   13f00:	mov	r3, #0
   13f04:	tst	r8, #1
   13f08:	add	r4, r2, r8
   13f0c:	strb	r3, [r2, r8]
   13f10:	ldr	r5, [pc, #936]	; 142c0 <test_print@@Base+0xb74>
   13f14:	beq	142cc <test_print@@Base+0xb80>
   13f18:	sub	r3, r8, #11
   13f1c:	cmp	r3, #8
   13f20:	ldrls	pc, [pc, r3, lsl #2]
   13f24:	b	1419c <test_print@@Base+0xa50>
   13f28:	andeq	r4, r1, r8, lsr #2
   13f2c:	muleq	r1, ip, r1
   13f30:	ldrdeq	r4, [r1], -r8
   13f34:	muleq	r1, ip, r1
   13f38:	andeq	r4, r1, r8, lsl #1
   13f3c:	muleq	r1, ip, r1
   13f40:	andeq	r4, r1, r8, lsr r0
   13f44:	muleq	r1, ip, r1
   13f48:	andeq	r3, r1, r8, ror #31
   13f4c:	add	r1, pc, #828	; 0x33c
   13f50:	ldrd	r0, [r1]
   13f54:	cmp	r7, r1
   13f58:	cmpeq	r6, r0
   13f5c:	movhi	r8, #18
   13f60:	movls	r8, #17
   13f64:	b	13f00 <test_print@@Base+0x7b4>
   13f68:	add	r1, pc, #808	; 0x328
   13f6c:	ldrd	r0, [r1]
   13f70:	cmp	r7, r1
   13f74:	cmpeq	r6, r0
   13f78:	movhi	r8, #16
   13f7c:	bhi	13f00 <test_print@@Base+0x7b4>
   13f80:	add	r1, pc, #792	; 0x318
   13f84:	ldrd	r0, [r1]
   13f88:	cmp	r7, r1
   13f8c:	cmpeq	r6, r0
   13f90:	movhi	r8, #15
   13f94:	movls	r8, #14
   13f98:	b	13f00 <test_print@@Base+0x7b4>
   13f9c:	add	r1, pc, #772	; 0x304
   13fa0:	ldrd	r0, [r1]
   13fa4:	cmp	r7, r1
   13fa8:	cmpeq	r6, r0
   13fac:	bls	13fcc <test_print@@Base+0x880>
   13fb0:	add	r1, pc, #760	; 0x2f8
   13fb4:	ldrd	r0, [r1]
   13fb8:	cmp	r7, r1
   13fbc:	cmpeq	r6, r0
   13fc0:	movhi	r8, #13
   13fc4:	movls	r8, #12
   13fc8:	b	13f00 <test_print@@Base+0x7b4>
   13fcc:	add	r1, pc, #740	; 0x2e4
   13fd0:	ldrd	r0, [r1]
   13fd4:	cmp	r7, r1
   13fd8:	cmpeq	r6, r0
   13fdc:	movhi	r8, #11
   13fe0:	movls	r8, #10
   13fe4:	b	13f00 <test_print@@Base+0x7b4>
   13fe8:	mov	r0, r6
   13fec:	mov	r1, r7
   13ff0:	mov	r2, #100	; 0x64
   13ff4:	mov	r3, #0
   13ff8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   13ffc:	mov	r3, #0
   14000:	mov	r0, r6
   14004:	mov	r1, r7
   14008:	sub	sl, r4, #2
   1400c:	mov	r9, r2
   14010:	add	fp, r5, r2, lsl #1
   14014:	mov	r2, #100	; 0x64
   14018:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1401c:	ldrb	r3, [r5, r9, lsl #1]
   14020:	strb	r3, [r4, #-2]
   14024:	ldrb	r3, [fp, #1]
   14028:	strb	r3, [r4, #-1]
   1402c:	mov	r4, sl
   14030:	mov	r6, r0
   14034:	mov	r7, r1
   14038:	mov	r0, r6
   1403c:	mov	r1, r7
   14040:	mov	r2, #100	; 0x64
   14044:	mov	r3, #0
   14048:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1404c:	mov	r3, #0
   14050:	mov	r0, r6
   14054:	mov	r1, r7
   14058:	sub	sl, r4, #2
   1405c:	mov	r9, r2
   14060:	add	fp, r5, r2, lsl #1
   14064:	mov	r2, #100	; 0x64
   14068:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1406c:	ldrb	r3, [r5, r9, lsl #1]
   14070:	strb	r3, [r4, #-2]
   14074:	ldrb	r3, [fp, #1]
   14078:	strb	r3, [r4, #-1]
   1407c:	mov	r4, sl
   14080:	mov	r6, r0
   14084:	mov	r7, r1
   14088:	mov	r0, r6
   1408c:	mov	r1, r7
   14090:	mov	r2, #100	; 0x64
   14094:	mov	r3, #0
   14098:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1409c:	mov	r3, #0
   140a0:	mov	r0, r6
   140a4:	mov	r1, r7
   140a8:	sub	sl, r4, #2
   140ac:	mov	r9, r2
   140b0:	add	fp, r5, r2, lsl #1
   140b4:	mov	r2, #100	; 0x64
   140b8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   140bc:	ldrb	r3, [r5, r9, lsl #1]
   140c0:	strb	r3, [r4, #-2]
   140c4:	ldrb	r3, [fp, #1]
   140c8:	strb	r3, [r4, #-1]
   140cc:	mov	r4, sl
   140d0:	mov	r6, r0
   140d4:	mov	r7, r1
   140d8:	mov	r0, r6
   140dc:	mov	r1, r7
   140e0:	mov	r2, #100	; 0x64
   140e4:	mov	r3, #0
   140e8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   140ec:	mov	r3, #0
   140f0:	mov	r0, r6
   140f4:	mov	r1, r7
   140f8:	sub	sl, r4, #2
   140fc:	mov	r9, r2
   14100:	add	fp, r5, r2, lsl #1
   14104:	mov	r2, #100	; 0x64
   14108:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1410c:	ldrb	r3, [r5, r9, lsl #1]
   14110:	strb	r3, [r4, #-2]
   14114:	ldrb	r3, [fp, #1]
   14118:	strb	r3, [r4, #-1]
   1411c:	mov	r4, sl
   14120:	mov	r6, r0
   14124:	mov	r7, r1
   14128:	mov	r0, r6
   1412c:	mov	r1, r7
   14130:	mov	r2, #100	; 0x64
   14134:	mov	r3, #0
   14138:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1413c:	mov	r0, r6
   14140:	mov	r1, r7
   14144:	sub	r9, r4, #3
   14148:	add	r3, r5, r2, lsl #1
   1414c:	ldrb	r2, [r5, r2, lsl #1]
   14150:	strb	r2, [r4, #-2]
   14154:	ldrb	r3, [r3, #1]
   14158:	mov	r2, #100	; 0x64
   1415c:	strb	r3, [r4, #-1]
   14160:	mov	r3, #0
   14164:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   14168:	mov	r2, #10
   1416c:	mov	r3, #0
   14170:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   14174:	mov	r0, r6
   14178:	mov	r1, r7
   1417c:	mov	r3, #0
   14180:	add	r2, r2, #48	; 0x30
   14184:	strb	r2, [r4, #-3]
   14188:	mov	r2, #1000	; 0x3e8
   1418c:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   14190:	mov	r4, r9
   14194:	mov	r6, r0
   14198:	mov	r7, r1
   1419c:	mov	r0, r6
   141a0:	mov	r1, r7
   141a4:	mov	r2, #100	; 0x64
   141a8:	mov	r3, #0
   141ac:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   141b0:	mov	r0, r6
   141b4:	mov	r1, r7
   141b8:	add	r3, r5, r2, lsl #1
   141bc:	ldrb	r2, [r5, r2, lsl #1]
   141c0:	strb	r2, [r4, #-2]
   141c4:	ldrb	r3, [r3, #1]
   141c8:	mov	r2, #100	; 0x64
   141cc:	strb	r3, [r4, #-1]
   141d0:	mov	r3, #0
   141d4:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   141d8:	mov	r2, #100	; 0x64
   141dc:	mov	r3, #0
   141e0:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   141e4:	mov	r0, r6
   141e8:	mov	r1, r7
   141ec:	add	r3, r5, r2, lsl #1
   141f0:	ldrb	r2, [r5, r2, lsl #1]
   141f4:	strb	r2, [r4, #-4]
   141f8:	ldrb	r3, [r3, #1]
   141fc:	ldr	r2, [pc, #192]	; 142c4 <test_print@@Base+0xb78>
   14200:	strb	r3, [r4, #-3]
   14204:	mov	r3, #0
   14208:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1420c:	mov	r2, #100	; 0x64
   14210:	mov	r3, #0
   14214:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   14218:	mov	r0, r6
   1421c:	mov	r1, r7
   14220:	add	r3, r5, r2, lsl #1
   14224:	ldrb	r2, [r5, r2, lsl #1]
   14228:	strb	r2, [r4, #-6]
   1422c:	ldrb	r3, [r3, #1]
   14230:	ldr	r2, [pc, #144]	; 142c8 <test_print@@Base+0xb7c>
   14234:	strb	r3, [r4, #-5]
   14238:	mov	r3, #0
   1423c:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   14240:	mov	r2, #100	; 0x64
   14244:	mov	r3, #0
   14248:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1424c:	mov	r0, r8
   14250:	add	r3, r5, r2, lsl #1
   14254:	ldrb	r2, [r5, r2, lsl #1]
   14258:	strb	r2, [r4, #-8]
   1425c:	ldrb	r3, [r3, #1]
   14260:	strb	r3, [r4, #-7]
   14264:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14268:	blcc	fe6c6a6c <__bss_end__@@Base+0xfe6999d4>
   1426c:	andeq	r0, r0, r0
   14270:	mrcmi	15, 3, r9, cr2, cr15, {7}
   14274:	andeq	r0, r0, r8, lsl r9
   14278:	svcvs	0x00c0ffff
   1427c:	strdeq	r8, [r3], -r2	; <UNPREDICTABLE>
   14280:			; <UNDEFINED> instruction: 0xa763ffff
   14284:	stcleq	6, cr11, [r0, #716]!	; 0x2cc
   14288:	stmibhi	r7!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, sp, lr, pc}^
   1428c:	bhi	ff1dcea4 <__bss_end__@@Base+0xff1afe0c>
   14290:	stcpl	15, cr15, [r9, #1020]	; 0x3fc
   14294:	smceq	13400	; 0x3458
   14298:	strbge	r7, [r6], #4095	; 0xfff
   1429c:	andeq	r8, r3, lr, ror sp
   142a0:	ldrshtne	r3, [sl], #-255	; 0xffffff01
   142a4:	strdeq	r5, [r0], -r3
   142a8:	ldmdami	r6!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, sp, lr, pc}^
   142ac:	andeq	r0, r0, r7, lsl r0
   142b0:	strtle	r0, [r5], #4095	; 0xfff
   142b4:	andeq	r0, r0, r8, ror #1
   142b8:	strpl	lr, [fp], #-1023	; 0xfffffc01
   142bc:	andeq	r0, r0, r2
   142c0:	muleq	r1, r0, r5
   142c4:	andeq	r2, r0, r0, lsl r7
   142c8:	andeq	r4, pc, r0, asr #4
   142cc:	sub	r3, r8, #10
   142d0:	cmp	r3, #10
   142d4:	ldrls	pc, [pc, r3, lsl #2]
   142d8:	b	1419c <test_print@@Base+0xa50>
   142dc:	muleq	r1, r8, r4
   142e0:	muleq	r1, ip, r1
   142e4:	andeq	r4, r1, r8, asr #8
   142e8:	muleq	r1, ip, r1
   142ec:	strdeq	r4, [r1], -r8
   142f0:	muleq	r1, ip, r1
   142f4:	andeq	r4, r1, r8, lsr #7
   142f8:	muleq	r1, ip, r1
   142fc:	andeq	r4, r1, r8, asr r3
   14300:	muleq	r1, ip, r1
   14304:	andeq	r4, r1, r8, lsl #6
   14308:	mov	r0, r6
   1430c:	mov	r1, r7
   14310:	mov	r2, #100	; 0x64
   14314:	mov	r3, #0
   14318:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1431c:	mov	r3, #0
   14320:	mov	r0, r6
   14324:	mov	r1, r7
   14328:	sub	sl, r4, #2
   1432c:	mov	r9, r2
   14330:	add	fp, r5, r2, lsl #1
   14334:	mov	r2, #100	; 0x64
   14338:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1433c:	ldrb	r3, [r5, r9, lsl #1]
   14340:	strb	r3, [r4, #-2]
   14344:	ldrb	r3, [fp, #1]
   14348:	strb	r3, [r4, #-1]
   1434c:	mov	r4, sl
   14350:	mov	r6, r0
   14354:	mov	r7, r1
   14358:	mov	r0, r6
   1435c:	mov	r1, r7
   14360:	mov	r2, #100	; 0x64
   14364:	mov	r3, #0
   14368:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1436c:	mov	r3, #0
   14370:	mov	r0, r6
   14374:	mov	r1, r7
   14378:	sub	sl, r4, #2
   1437c:	mov	r9, r2
   14380:	add	fp, r5, r2, lsl #1
   14384:	mov	r2, #100	; 0x64
   14388:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1438c:	ldrb	r3, [r5, r9, lsl #1]
   14390:	strb	r3, [r4, #-2]
   14394:	ldrb	r3, [fp, #1]
   14398:	strb	r3, [r4, #-1]
   1439c:	mov	r4, sl
   143a0:	mov	r6, r0
   143a4:	mov	r7, r1
   143a8:	mov	r0, r6
   143ac:	mov	r1, r7
   143b0:	mov	r2, #100	; 0x64
   143b4:	mov	r3, #0
   143b8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   143bc:	mov	r3, #0
   143c0:	mov	r0, r6
   143c4:	mov	r1, r7
   143c8:	sub	sl, r4, #2
   143cc:	mov	r9, r2
   143d0:	add	fp, r5, r2, lsl #1
   143d4:	mov	r2, #100	; 0x64
   143d8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   143dc:	ldrb	r3, [r5, r9, lsl #1]
   143e0:	strb	r3, [r4, #-2]
   143e4:	ldrb	r3, [fp, #1]
   143e8:	strb	r3, [r4, #-1]
   143ec:	mov	r4, sl
   143f0:	mov	r6, r0
   143f4:	mov	r7, r1
   143f8:	mov	r0, r6
   143fc:	mov	r1, r7
   14400:	mov	r2, #100	; 0x64
   14404:	mov	r3, #0
   14408:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1440c:	mov	r3, #0
   14410:	mov	r0, r6
   14414:	mov	r1, r7
   14418:	sub	sl, r4, #2
   1441c:	mov	r9, r2
   14420:	add	fp, r5, r2, lsl #1
   14424:	mov	r2, #100	; 0x64
   14428:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1442c:	ldrb	r3, [r5, r9, lsl #1]
   14430:	strb	r3, [r4, #-2]
   14434:	ldrb	r3, [fp, #1]
   14438:	strb	r3, [r4, #-1]
   1443c:	mov	r4, sl
   14440:	mov	r6, r0
   14444:	mov	r7, r1
   14448:	mov	r0, r6
   1444c:	mov	r1, r7
   14450:	mov	r2, #100	; 0x64
   14454:	mov	r3, #0
   14458:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1445c:	mov	r3, #0
   14460:	mov	r0, r6
   14464:	mov	r1, r7
   14468:	sub	sl, r4, #2
   1446c:	mov	r9, r2
   14470:	add	fp, r5, r2, lsl #1
   14474:	mov	r2, #100	; 0x64
   14478:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   1447c:	ldrb	r3, [r5, r9, lsl #1]
   14480:	strb	r3, [r4, #-2]
   14484:	ldrb	r3, [fp, #1]
   14488:	strb	r3, [r4, #-1]
   1448c:	mov	r4, sl
   14490:	mov	r6, r0
   14494:	mov	r7, r1
   14498:	mov	r0, r6
   1449c:	mov	r1, r7
   144a0:	mov	r2, #100	; 0x64
   144a4:	mov	r3, #0
   144a8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   144ac:	mov	r3, #0
   144b0:	mov	r0, r6
   144b4:	mov	r1, r7
   144b8:	sub	sl, r4, #2
   144bc:	mov	r9, r2
   144c0:	add	fp, r5, r2, lsl #1
   144c4:	mov	r2, #100	; 0x64
   144c8:	bl	1acd8 <flatcc_json_printer_clear@@Base+0x4bc>
   144cc:	ldrb	r3, [r5, r9, lsl #1]
   144d0:	strb	r3, [r4, #-2]
   144d4:	ldrb	r3, [fp, #1]
   144d8:	strb	r3, [r4, #-1]
   144dc:	mov	r4, sl
   144e0:	mov	r6, r0
   144e4:	mov	r7, r1
   144e8:	b	1419c <test_print@@Base+0xa50>
   144ec:	cmp	r0, #0
   144f0:	push	{r4, lr}
   144f4:	lsr	r4, r0, #31
   144f8:	rsblt	r0, r0, #0
   144fc:	movlt	r3, #45	; 0x2d
   14500:	sxthlt	r0, r0
   14504:	strblt	r3, [r1]
   14508:	uxth	r0, r0
   1450c:	addlt	r1, r1, #1
   14510:	bl	139a0 <test_print@@Base+0x254>
   14514:	add	r0, r4, r0
   14518:	pop	{r4, pc}
   1451c:	cmp	r0, #0
   14520:	movlt	r3, #45	; 0x2d
   14524:	push	{r4, lr}
   14528:	lsr	r4, r0, #31
   1452c:	strblt	r3, [r1]
   14530:	rsblt	r0, r0, #0
   14534:	addlt	r1, r1, #1
   14538:	bl	13b20 <test_print@@Base+0x3d4>
   1453c:	add	r0, r4, r0
   14540:	pop	{r4, pc}
   14544:	cmp	r0, #0
   14548:	sbcs	r3, r1, #0
   1454c:	push	{r4, lr}
   14550:	lsr	r4, r1, #31
   14554:	bge	1456c <test_print@@Base+0xe20>
   14558:	mov	r3, #45	; 0x2d
   1455c:	rsbs	r0, r0, #0
   14560:	strb	r3, [r2]
   14564:	rsc	r1, r1, #0
   14568:	add	r2, r2, #1
   1456c:	bl	13e7c <test_print@@Base+0x730>
   14570:	add	r0, r4, r0
   14574:	pop	{r4, pc}
   14578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1457c:	sub	sp, sp, #28
   14580:	sub	r1, r1, #1
   14584:	ldrd	r8, [sp, #88]	; 0x58
   14588:	ldrd	r4, [sp, #72]	; 0x48
   1458c:	add	ip, r0, r1
   14590:	subs	sl, r2, r8
   14594:	sbc	fp, r3, r9
   14598:	adds	r2, r2, r8
   1459c:	adc	r3, r3, r9
   145a0:	subs	r6, sl, r4
   145a4:	sbc	r7, fp, r5
   145a8:	strd	r6, [sp]
   145ac:	ldrd	r6, [sp, #64]	; 0x40
   145b0:	subs	r6, r6, sl
   145b4:	sbc	r7, r7, fp
   145b8:	strd	r6, [sp, #16]
   145bc:	cmp	r5, fp
   145c0:	cmpeq	r4, sl
   145c4:	bcs	14680 <test_print@@Base+0xf34>
   145c8:	ldrd	r0, [sp, #16]
   145cc:	ldrd	r6, [sp]
   145d0:	adds	r6, r6, r0
   145d4:	adc	r7, r7, r1
   145d8:	mov	r0, r6
   145dc:	mov	r1, r7
   145e0:	ldrd	r6, [sp, #80]	; 0x50
   145e4:	cmp	r7, r1
   145e8:	cmpeq	r6, r0
   145ec:	bls	1463c <test_print@@Base+0xef0>
   145f0:	adds	r2, r8, r8
   145f4:	adc	r3, r9, r9
   145f8:	cmp	r5, r3
   145fc:	cmpeq	r4, r2
   14600:	bcs	146e0 <test_print@@Base+0xf94>
   14604:	mov	r0, #0
   14608:	b	14708 <test_print@@Base+0xfbc>
   1460c:	ldrd	r6, [sp, #80]	; 0x50
   14610:	ldrd	r4, [sp]
   14614:	ldrb	lr, [ip]
   14618:	subs	r4, r4, r6
   1461c:	sbc	r5, r5, r7
   14620:	mov	r6, r4
   14624:	mov	r7, r5
   14628:	sub	lr, lr, #1
   1462c:	strb	lr, [ip]
   14630:	strd	r6, [sp]
   14634:	ldrd	r4, [sp, #8]
   14638:	b	145bc <test_print@@Base+0xe70>
   1463c:	ldrd	r0, [sp, #80]	; 0x50
   14640:	adds	r0, r0, r4
   14644:	adc	r1, r1, r5
   14648:	cmp	fp, r1
   1464c:	cmpeq	sl, r0
   14650:	strd	r0, [sp, #8]
   14654:	bhi	1460c <test_print@@Base+0xec0>
   14658:	subs	r6, r0, sl
   1465c:	sbc	r7, r1, fp
   14660:	ldrd	r0, [sp]
   14664:	cmp	r7, r1
   14668:	cmpeq	r6, r0
   1466c:	bls	1460c <test_print@@Base+0xec0>
   14670:	cmp	r5, r3
   14674:	cmpeq	r4, r2
   14678:	bcc	146a8 <test_print@@Base+0xf5c>
   1467c:	b	145f0 <test_print@@Base+0xea4>
   14680:	cmp	r5, r3
   14684:	cmpeq	r4, r2
   14688:	bcs	145f0 <test_print@@Base+0xea4>
   1468c:	ldrd	r0, [sp, #64]	; 0x40
   14690:	ldrd	r6, [sp, #80]	; 0x50
   14694:	subs	r0, r0, r4
   14698:	sbc	r1, r1, r5
   1469c:	cmp	r7, r1
   146a0:	cmpeq	r6, r0
   146a4:	bhi	145f0 <test_print@@Base+0xea4>
   146a8:	ldrd	r0, [sp, #80]	; 0x50
   146ac:	adds	r0, r0, r4
   146b0:	adc	r1, r1, r5
   146b4:	cmp	r3, r1
   146b8:	cmpeq	r2, r0
   146bc:	bhi	14604 <test_print@@Base+0xeb8>
   146c0:	subs	r6, r2, r4
   146c4:	sbc	r7, r3, r5
   146c8:	subs	r2, r0, r2
   146cc:	sbc	r3, r1, r3
   146d0:	cmp	r7, r3
   146d4:	cmpeq	r6, r2
   146d8:	bls	145f0 <test_print@@Base+0xea4>
   146dc:	b	14604 <test_print@@Base+0xeb8>
   146e0:	ldrd	r0, [sp, #64]	; 0x40
   146e4:	lsl	r3, r9, #2
   146e8:	lsl	r2, r8, #2
   146ec:	subs	r0, r0, r2
   146f0:	orr	r3, r3, r8, lsr #30
   146f4:	sbc	r1, r1, r3
   146f8:	cmp	r5, r1
   146fc:	cmpeq	r4, r0
   14700:	movls	r0, #1
   14704:	movhi	r0, #0
   14708:	add	sp, sp, #28
   1470c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14710:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14714:	subs	r4, r0, #0
   14718:	addlt	r6, r1, #1
   1471c:	movge	r6, r1
   14720:	mov	r7, r1
   14724:	rsblt	r4, r4, #0
   14728:	mov	r5, r6
   1472c:	mov	r9, #10
   14730:	mvn	r8, #9
   14734:	movlt	r3, #45	; 0x2d
   14738:	strblt	r3, [r1]
   1473c:	mov	r0, r4
   14740:	mov	r1, r9
   14744:	bl	1aa60 <flatcc_json_printer_clear@@Base+0x244>
   14748:	mla	r4, r8, r0, r4
   1474c:	add	r4, r4, #48	; 0x30
   14750:	strb	r4, [r5], #1
   14754:	subs	r4, r0, #0
   14758:	bne	1473c <test_print@@Base+0xff0>
   1475c:	sub	r3, r5, r6
   14760:	mov	r1, r5
   14764:	add	r3, r3, r3, lsr #31
   14768:	mov	r2, r6
   1476c:	asr	r3, r3, #1
   14770:	strb	r4, [r5]
   14774:	sub	r0, r2, r6
   14778:	cmp	r3, r0
   1477c:	bgt	14788 <test_print@@Base+0x103c>
   14780:	sub	r0, r5, r7
   14784:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14788:	ldrb	r0, [r2]
   1478c:	ldrb	ip, [r1, #-1]
   14790:	strb	ip, [r2], #1
   14794:	strb	r0, [r1, #-1]!
   14798:	b	14774 <test_print@@Base+0x1028>
   1479c:	push	{r4, r5, r6, lr}
   147a0:	mov	r6, r1
   147a4:	mov	r5, r0
   147a8:	mov	r1, #3
   147ac:	lsl	r0, r0, #2
   147b0:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   147b4:	tst	r6, #128	; 0x80
   147b8:	add	r0, r0, #3
   147bc:	bic	r4, r0, #3
   147c0:	bne	147e4 <test_print@@Base+0x1098>
   147c4:	mov	r1, #3
   147c8:	mov	r0, r5
   147cc:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   147d0:	cmp	r1, #1
   147d4:	subeq	r4, r4, #2
   147d8:	beq	147e4 <test_print@@Base+0x1098>
   147dc:	cmp	r1, #2
   147e0:	subeq	r4, r4, #1
   147e4:	mov	r0, r4
   147e8:	pop	{r4, r5, r6, pc}
   147ec:	add	r1, r1, #2
   147f0:	ldr	r3, [r0, #8]
   147f4:	lsl	r1, r1, #1
   147f8:	cmp	r1, r3
   147fc:	bge	1481c <test_print@@Base+0x10d0>
   14800:	ldr	r3, [r0, #4]
   14804:	ldrh	r3, [r3, r1]
   14808:	cmp	r3, #0
   1480c:	beq	1481c <test_print@@Base+0x10d0>
   14810:	ldr	r0, [r0]
   14814:	add	r0, r0, r3
   14818:	bx	lr
   1481c:	mov	r0, #0
   14820:	bx	lr
   14824:	ldr	r3, [r0, #20]
   14828:	ldr	r2, [r0, #16]
   1482c:	cmp	r3, r2
   14830:	bcc	1485c <test_print@@Base+0x1110>
   14834:	ldr	r2, [r0, #36]	; 0x24
   14838:	ldr	r1, [r0]
   1483c:	cmp	r2, #0
   14840:	moveq	r2, #3
   14844:	streq	r2, [r0, #36]	; 0x24
   14848:	ldr	r2, [r0, #12]
   1484c:	sub	r3, r3, r1
   14850:	add	r3, r2, r3
   14854:	str	r3, [r0, #12]
   14858:	str	r1, [r0, #20]
   1485c:	ldr	r3, [r0, #20]
   14860:	mov	r2, #0
   14864:	strb	r2, [r3]
   14868:	bx	lr
   1486c:	ldr	r3, [r0, #20]
   14870:	ldr	ip, [r0, #16]
   14874:	push	{r4, r5, r6, r7, r8, lr}
   14878:	add	lr, r3, r2
   1487c:	cmp	ip, lr
   14880:	mov	r4, r0
   14884:	mov	r6, r2
   14888:	movhi	r0, r3
   1488c:	bhi	148cc <test_print@@Base+0x1180>
   14890:	cmp	r3, ip
   14894:	mov	r7, r1
   14898:	bcc	148a8 <test_print@@Base+0x115c>
   1489c:	ldr	r3, [r4, #44]	; 0x2c
   148a0:	mov	r1, #0
   148a4:	blx	r3
   148a8:	ldr	r5, [r4, #16]
   148ac:	ldr	r3, [r4, #20]
   148b0:	mov	r8, #0
   148b4:	sub	r5, r5, r3
   148b8:	cmp	r5, r6
   148bc:	ldr	r0, [r4, #20]
   148c0:	bcc	148e0 <test_print@@Base+0x1194>
   148c4:	mov	r2, r6
   148c8:	mov	r1, r7
   148cc:	bl	1246c <memcpy@plt>
   148d0:	ldr	r3, [r4, #20]
   148d4:	add	r6, r3, r6
   148d8:	str	r6, [r4, #20]
   148dc:	pop	{r4, r5, r6, r7, r8, pc}
   148e0:	mov	r2, r5
   148e4:	mov	r1, r7
   148e8:	bl	1246c <memcpy@plt>
   148ec:	ldr	r3, [r4, #20]
   148f0:	mov	r1, r8
   148f4:	add	r3, r3, r5
   148f8:	str	r3, [r4, #20]
   148fc:	mov	r0, r4
   14900:	ldr	r3, [r4, #44]	; 0x2c
   14904:	blx	r3
   14908:	add	r7, r7, r5
   1490c:	sub	r6, r6, r5
   14910:	ldr	r3, [r4, #20]
   14914:	ldr	r5, [r4, #16]
   14918:	sub	r5, r5, r3
   1491c:	b	148b8 <test_print@@Base+0x116c>
   14920:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14924:	mov	sl, r2
   14928:	ldr	r3, [r0, #20]
   1492c:	mov	r4, r0
   14930:	add	r2, r3, #1
   14934:	mov	r7, #92	; 0x5c
   14938:	mov	r8, #102	; 0x66
   1493c:	mov	r9, #117	; 0x75
   14940:	str	r2, [r0, #20]
   14944:	mov	r2, #34	; 0x22
   14948:	strb	r2, [r3]
   1494c:	ldrb	r5, [r1]
   14950:	mov	r6, r1
   14954:	cmp	r5, #34	; 0x22
   14958:	cmpne	r5, #31
   1495c:	bls	14968 <test_print@@Base+0x121c>
   14960:	cmp	r5, #92	; 0x5c
   14964:	bne	149d4 <test_print@@Base+0x1288>
   14968:	sub	fp, r6, r1
   1496c:	mov	r2, fp
   14970:	mov	r0, r4
   14974:	bl	1486c <test_print@@Base+0x1120>
   14978:	ldr	r3, [r4, #20]
   1497c:	subs	sl, sl, fp
   14980:	add	r2, r3, #1
   14984:	str	r2, [r4, #20]
   14988:	beq	14abc <test_print@@Base+0x1370>
   1498c:	strb	r7, [r3]
   14990:	ldr	r3, [r4, #20]
   14994:	cmp	r5, #12
   14998:	addeq	r2, r3, #1
   1499c:	streq	r2, [r4, #20]
   149a0:	strbeq	r8, [r3]
   149a4:	beq	14a10 <test_print@@Base+0x12c4>
   149a8:	bhi	149dc <test_print@@Base+0x1290>
   149ac:	cmp	r5, #9
   149b0:	beq	14a1c <test_print@@Base+0x12d0>
   149b4:	cmp	r5, #10
   149b8:	beq	14a30 <test_print@@Base+0x12e4>
   149bc:	cmp	r5, #8
   149c0:	bne	14a40 <test_print@@Base+0x12f4>
   149c4:	add	r2, r3, #1
   149c8:	str	r2, [r4, #20]
   149cc:	mov	r2, #98	; 0x62
   149d0:	b	14a28 <test_print@@Base+0x12dc>
   149d4:	ldrb	r5, [r6, #1]!
   149d8:	b	14954 <test_print@@Base+0x1208>
   149dc:	cmp	r5, #34	; 0x22
   149e0:	beq	14a04 <test_print@@Base+0x12b8>
   149e4:	cmp	r5, #92	; 0x5c
   149e8:	beq	14a04 <test_print@@Base+0x12b8>
   149ec:	cmp	r5, #13
   149f0:	bne	14a40 <test_print@@Base+0x12f4>
   149f4:	add	r2, r3, #1
   149f8:	str	r2, [r4, #20]
   149fc:	mov	r2, #114	; 0x72
   14a00:	b	14a28 <test_print@@Base+0x12dc>
   14a04:	add	r2, r3, #1
   14a08:	str	r2, [r4, #20]
   14a0c:	strb	r5, [r3]
   14a10:	sub	sl, sl, #1
   14a14:	add	r1, r6, #1
   14a18:	b	1494c <test_print@@Base+0x1200>
   14a1c:	add	r2, r3, #1
   14a20:	str	r2, [r4, #20]
   14a24:	mov	r2, #116	; 0x74
   14a28:	strb	r2, [r3]
   14a2c:	b	14a10 <test_print@@Base+0x12c4>
   14a30:	add	r2, r3, #1
   14a34:	str	r2, [r4, #20]
   14a38:	mov	r2, #110	; 0x6e
   14a3c:	b	14a28 <test_print@@Base+0x12dc>
   14a40:	add	r2, r3, #1
   14a44:	str	r2, [r4, #20]
   14a48:	strb	r9, [r3]
   14a4c:	ldr	r3, [r4, #20]
   14a50:	add	r2, r3, #1
   14a54:	str	r2, [r4, #20]
   14a58:	mov	r2, #48	; 0x30
   14a5c:	strb	r2, [r3]
   14a60:	ldr	r3, [r4, #20]
   14a64:	add	r1, r3, #1
   14a68:	str	r1, [r4, #20]
   14a6c:	lsr	r1, r5, #4
   14a70:	cmp	r1, #9
   14a74:	strb	r2, [r3]
   14a78:	movls	r3, r2
   14a7c:	ldr	r2, [r4, #20]
   14a80:	movhi	r3, #87	; 0x57
   14a84:	add	r3, r3, r1
   14a88:	add	r0, r2, #1
   14a8c:	and	r5, r5, #15
   14a90:	str	r0, [r4, #20]
   14a94:	cmp	r5, #9
   14a98:	strb	r3, [r2]
   14a9c:	ldr	r2, [r4, #20]
   14aa0:	movls	r3, #48	; 0x30
   14aa4:	movhi	r3, #87	; 0x57
   14aa8:	add	r1, r2, #1
   14aac:	add	r5, r3, r5
   14ab0:	str	r1, [r4, #20]
   14ab4:	strb	r5, [r2]
   14ab8:	b	14a10 <test_print@@Base+0x12c4>
   14abc:	mov	r2, #34	; 0x22
   14ac0:	strb	r2, [r3]
   14ac4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac8:	ldr	r2, [r1]
   14acc:	add	r1, r1, #4
   14ad0:	b	14920 <test_print@@Base+0x11d4>
   14ad4:	ldr	r3, [r0, #20]
   14ad8:	mov	ip, #34	; 0x22
   14adc:	push	{r4, r5, r6, lr}
   14ae0:	mov	r4, r0
   14ae4:	strb	ip, [r3]
   14ae8:	ldrb	ip, [r0, #26]
   14aec:	ldr	r3, [r0, #20]
   14af0:	ldr	lr, [r0, #16]
   14af4:	cmp	ip, #0
   14af8:	addeq	r3, r3, #1
   14afc:	add	ip, r3, r2
   14b00:	cmp	lr, ip
   14b04:	str	r3, [r0, #20]
   14b08:	bls	14b48 <test_print@@Base+0x13fc>
   14b0c:	mov	r0, r3
   14b10:	mov	r5, r2
   14b14:	bl	1246c <memcpy@plt>
   14b18:	ldr	r2, [r4, #20]
   14b1c:	add	r2, r2, r5
   14b20:	str	r2, [r4, #20]
   14b24:	ldr	r3, [r4, #20]
   14b28:	mov	r2, #34	; 0x22
   14b2c:	strb	r2, [r3]
   14b30:	ldrb	r2, [r4, #26]
   14b34:	ldr	r3, [r4, #20]
   14b38:	cmp	r2, #0
   14b3c:	addeq	r3, r3, #1
   14b40:	str	r3, [r4, #20]
   14b44:	pop	{r4, r5, r6, pc}
   14b48:	bl	1486c <test_print@@Base+0x1120>
   14b4c:	b	14b24 <test_print@@Base+0x13d8>
   14b50:	push	{r4, r5, r6, r7, r8, lr}
   14b54:	mov	r4, r0
   14b58:	ldrb	r3, [r0, #25]
   14b5c:	ldr	r5, [r0, #32]
   14b60:	ldr	r2, [r0, #16]
   14b64:	mul	r5, r5, r3
   14b68:	ldr	r3, [r0, #20]
   14b6c:	add	r1, r3, r5
   14b70:	cmp	r2, r1
   14b74:	movcs	r2, r5
   14b78:	movcs	r1, #32
   14b7c:	movcs	r0, r3
   14b80:	bcs	14bc0 <test_print@@Base+0x1474>
   14b84:	cmp	r3, r2
   14b88:	bcc	14b98 <test_print@@Base+0x144c>
   14b8c:	ldr	r3, [r4, #44]	; 0x2c
   14b90:	mov	r1, #0
   14b94:	blx	r3
   14b98:	ldr	r6, [r4, #16]
   14b9c:	ldr	r3, [r4, #20]
   14ba0:	mov	r7, #32
   14ba4:	sub	r6, r6, r3
   14ba8:	mov	r8, #0
   14bac:	cmp	r6, r5
   14bb0:	bcc	14bd4 <test_print@@Base+0x1488>
   14bb4:	ldr	r0, [r4, #20]
   14bb8:	mov	r2, r5
   14bbc:	mov	r1, #32
   14bc0:	bl	12508 <memset@plt>
   14bc4:	ldr	r3, [r4, #20]
   14bc8:	add	r5, r3, r5
   14bcc:	str	r5, [r4, #20]
   14bd0:	pop	{r4, r5, r6, r7, r8, pc}
   14bd4:	mov	r2, r6
   14bd8:	mov	r1, r7
   14bdc:	ldr	r0, [r4, #20]
   14be0:	bl	12508 <memset@plt>
   14be4:	ldr	r3, [r4, #20]
   14be8:	mov	r1, r8
   14bec:	add	r3, r3, r6
   14bf0:	str	r3, [r4, #20]
   14bf4:	mov	r0, r4
   14bf8:	ldr	r3, [r4, #44]	; 0x2c
   14bfc:	blx	r3
   14c00:	sub	r5, r5, r6
   14c04:	ldr	r3, [r4, #20]
   14c08:	ldr	r6, [r4, #16]
   14c0c:	sub	r6, r6, r3
   14c10:	b	14bac <test_print@@Base+0x1460>
   14c14:	cmp	r1, #0
   14c18:	push	{r4, r5, r6, lr}
   14c1c:	mov	r4, r0
   14c20:	ldr	r1, [r0, #20]
   14c24:	bne	14c8c <test_print@@Base+0x1540>
   14c28:	ldr	r5, [r0, #16]
   14c2c:	cmp	r1, r5
   14c30:	bcc	14c8c <test_print@@Base+0x1540>
   14c34:	ldr	r3, [r0, #40]	; 0x28
   14c38:	sub	r5, r1, r5
   14c3c:	mov	r2, #1
   14c40:	ldr	r1, [r0, #8]
   14c44:	ldr	r0, [r0]
   14c48:	bl	124a8 <fwrite@plt>
   14c4c:	ldr	r0, [r4]
   14c50:	ldr	r1, [r4, #8]
   14c54:	mov	r2, r5
   14c58:	add	r1, r0, r1
   14c5c:	bl	1246c <memcpy@plt>
   14c60:	ldr	r3, [r4, #12]
   14c64:	ldr	r1, [r4]
   14c68:	ldr	r2, [r4, #8]
   14c6c:	add	r1, r1, r5
   14c70:	add	r3, r3, r2
   14c74:	str	r1, [r4, #20]
   14c78:	str	r3, [r4, #12]
   14c7c:	ldr	r3, [r4, #20]
   14c80:	mov	r2, #0
   14c84:	strb	r2, [r3]
   14c88:	pop	{r4, r5, r6, pc}
   14c8c:	ldr	r0, [r4]
   14c90:	ldr	r3, [r4, #40]	; 0x28
   14c94:	sub	r5, r1, r0
   14c98:	mov	r1, r5
   14c9c:	mov	r2, #1
   14ca0:	bl	124a8 <fwrite@plt>
   14ca4:	ldr	r1, [r4, #12]
   14ca8:	ldr	r3, [r4]
   14cac:	add	r1, r1, r5
   14cb0:	str	r3, [r4, #20]
   14cb4:	str	r1, [r4, #12]
   14cb8:	b	14c7c <test_print@@Base+0x1530>
   14cbc:	push	{r4, r5, r6, lr}
   14cc0:	mov	r2, #0
   14cc4:	ldr	r5, [r0, #20]
   14cc8:	ldr	r3, [r0]
   14ccc:	strb	r2, [r5]
   14cd0:	ldr	r1, [r0, #20]
   14cd4:	ldr	r2, [r0, #16]
   14cd8:	cmp	r1, r2
   14cdc:	popcc	{r4, r5, r6, pc}
   14ce0:	ldr	r1, [r0, #4]
   14ce4:	mov	r4, r0
   14ce8:	ldr	r0, [r0]
   14cec:	lsl	r1, r1, #1
   14cf0:	sub	r5, r5, r3
   14cf4:	bl	1249c <realloc@plt>
   14cf8:	cmp	r0, #0
   14cfc:	bne	14d34 <test_print@@Base+0x15e8>
   14d00:	ldr	r3, [r4, #36]	; 0x24
   14d04:	cmp	r3, #0
   14d08:	moveq	r3, #3
   14d0c:	streq	r3, [r4, #36]	; 0x24
   14d10:	ldr	r3, [r4, #12]
   14d14:	add	r5, r3, r5
   14d18:	ldr	r3, [r4]
   14d1c:	str	r5, [r4, #12]
   14d20:	str	r3, [r4, #20]
   14d24:	ldr	r3, [r4, #20]
   14d28:	mov	r2, #0
   14d2c:	strb	r2, [r3]
   14d30:	pop	{r4, r5, r6, pc}
   14d34:	ldr	r3, [r4, #4]
   14d38:	add	r5, r0, r5
   14d3c:	str	r0, [r4]
   14d40:	lsl	r3, r3, #1
   14d44:	str	r3, [r4, #4]
   14d48:	sub	r3, r3, #64	; 0x40
   14d4c:	add	r0, r0, r3
   14d50:	str	r3, [r4, #8]
   14d54:	str	r5, [r4, #20]
   14d58:	str	r0, [r4, #16]
   14d5c:	b	14d24 <test_print@@Base+0x15d8>
   14d60:	ldr	r1, [r0, #20]
   14d64:	ldr	r2, [r0, #16]
   14d68:	cmp	r1, r2
   14d6c:	bxcc	lr
   14d70:	ldr	r3, [r0, #44]	; 0x2c
   14d74:	mov	r1, #0
   14d78:	bx	r3
   14d7c:	push	{r4, r5, r6, lr}
   14d80:	mov	r4, r0
   14d84:	ldrb	r3, [r0, #25]
   14d88:	mov	r5, r1
   14d8c:	mov	r6, r2
   14d90:	cmp	r3, #0
   14d94:	beq	14df8 <test_print@@Base+0x16ac>
   14d98:	ldr	r3, [r0, #20]
   14d9c:	add	r2, r3, #1
   14da0:	str	r2, [r0, #20]
   14da4:	mov	r2, #10
   14da8:	strb	r2, [r3]
   14dac:	bl	14b50 <test_print@@Base+0x1404>
   14db0:	mov	r2, r6
   14db4:	mov	r1, r5
   14db8:	mov	r0, r4
   14dbc:	bl	14ad4 <test_print@@Base+0x1388>
   14dc0:	ldr	r3, [r4, #20]
   14dc4:	add	r2, r3, #1
   14dc8:	str	r2, [r4, #20]
   14dcc:	mov	r2, #58	; 0x3a
   14dd0:	strb	r2, [r3]
   14dd4:	ldr	r3, [r4, #20]
   14dd8:	mov	r2, #32
   14ddc:	strb	r2, [r3]
   14de0:	ldrb	r2, [r4, #25]
   14de4:	ldr	r3, [r4, #20]
   14de8:	cmp	r2, #0
   14dec:	addne	r3, r3, #1
   14df0:	str	r3, [r4, #20]
   14df4:	pop	{r4, r5, r6, pc}
   14df8:	bl	14d60 <test_print@@Base+0x1614>
   14dfc:	b	14db0 <test_print@@Base+0x1664>
   14e00:	cmp	r0, #99	; 0x63
   14e04:	push	{r4, r5, r6, lr}
   14e08:	mov	r2, #0
   14e0c:	mov	r4, r0
   14e10:	bls	14e5c <test_print@@Base+0x1710>
   14e14:	mov	r5, r1
   14e18:	strb	r2, [r1, #3]
   14e1c:	mov	r1, #100	; 0x64
   14e20:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   14e24:	ldr	r6, [pc, #116]	; 14ea0 <test_print@@Base+0x1754>
   14e28:	mov	r0, r4
   14e2c:	uxtb	r1, r1
   14e30:	ldrb	r2, [r6, r1, lsl #1]
   14e34:	add	r3, r6, r1, lsl #1
   14e38:	mov	r1, #100	; 0x64
   14e3c:	strb	r2, [r5, #1]
   14e40:	ldrb	r3, [r3, #1]
   14e44:	strb	r3, [r5, #2]
   14e48:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   14e4c:	add	r0, r0, #48	; 0x30
   14e50:	strb	r0, [r5]
   14e54:	mov	r0, #3
   14e58:	pop	{r4, r5, r6, pc}
   14e5c:	cmp	r0, #9
   14e60:	bls	14e8c <test_print@@Base+0x1740>
   14e64:	strb	r2, [r1, #2]
   14e68:	ldr	r2, [pc, #48]	; 14ea0 <test_print@@Base+0x1754>
   14e6c:	sxth	r3, r0
   14e70:	add	r0, r2, r3, lsl #1
   14e74:	ldrb	r3, [r2, r3, lsl #1]
   14e78:	strb	r3, [r1]
   14e7c:	ldrb	r3, [r0, #1]
   14e80:	mov	r0, #2
   14e84:	strb	r3, [r1, #1]
   14e88:	pop	{r4, r5, r6, pc}
   14e8c:	add	r3, r0, #48	; 0x30
   14e90:	strb	r2, [r1, #1]
   14e94:	strb	r3, [r1]
   14e98:	mov	r0, #1
   14e9c:	pop	{r4, r5, r6, pc}
   14ea0:	muleq	r1, r0, r5
   14ea4:	cmp	r0, #0
   14ea8:	push	{r4, lr}
   14eac:	lsr	r4, r0, #31
   14eb0:	rsblt	r0, r0, #0
   14eb4:	movlt	r3, #45	; 0x2d
   14eb8:	sxtblt	r0, r0
   14ebc:	strblt	r3, [r1]
   14ec0:	uxtb	r0, r0
   14ec4:	addlt	r1, r1, #1
   14ec8:	bl	14e00 <test_print@@Base+0x16b4>
   14ecc:	add	r0, r4, r0
   14ed0:	pop	{r4, pc}
   14ed4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ed8:	mov	r6, r2
   14edc:	ldr	lr, [sp, #48]	; 0x30
   14ee0:	ldrd	r4, [sp, #44]	; 0x2c
   14ee4:	mov	r5, #0
   14ee8:	umull	sl, fp, r2, lr
   14eec:	mul	r2, r2, r5
   14ef0:	mov	r7, #0
   14ef4:	umull	r8, r9, r3, r4
   14ef8:	mla	fp, lr, r7, fp
   14efc:	mla	r2, r4, r7, r2
   14f00:	umull	r6, r7, r6, r4
   14f04:	mla	lr, r3, r5, r9
   14f08:	add	r4, r2, r7
   14f0c:	mov	ip, #0
   14f10:	adds	r4, r4, r8
   14f14:	adc	r5, ip, #0
   14f18:	adds	r4, r4, #-2147483648	; 0x80000000
   14f1c:	adc	r5, r5, #0
   14f20:	adds	r4, r4, sl
   14f24:	adc	r5, r5, #0
   14f28:	adds	r4, lr, fp
   14f2c:	mov	r6, r5
   14f30:	mov	r7, ip
   14f34:	adc	r5, ip, ip
   14f38:	mov	r9, ip
   14f3c:	ldr	ip, [sp, #48]	; 0x30
   14f40:	ldr	r2, [sp, #52]	; 0x34
   14f44:	mov	r8, fp
   14f48:	umlal	r4, r5, ip, r3
   14f4c:	ldr	r3, [sp, #36]	; 0x24
   14f50:	adds	r4, r4, r6
   14f54:	adc	r5, r5, r7
   14f58:	add	r3, r3, r2
   14f5c:	add	r3, r3, #64	; 0x40
   14f60:	strd	r4, [r0]
   14f64:	str	r3, [r0, #8]
   14f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f6c:	push	{r4, lr}
   14f70:	mov	r2, #239	; 0xef
   14f74:	ldr	r3, [pc, #8]	; 14f84 <test_print@@Base+0x1838>
   14f78:	ldr	r1, [pc, #8]	; 14f88 <test_print@@Base+0x183c>
   14f7c:	ldr	r0, [pc, #8]	; 14f8c <test_print@@Base+0x1840>
   14f80:	bl	1255c <__assert_fail@plt>
   14f84:	andeq	fp, r1, r1, ror r6
   14f88:	ldrdeq	fp, [r1], -r4
   14f8c:	andeq	fp, r1, r3, lsr sp
   14f90:	cmp	r0, #0
   14f94:	movne	r0, #4
   14f98:	ldrne	r3, [pc, #40]	; 14fc8 <test_print@@Base+0x187c>
   14f9c:	ldreq	r3, [pc, #40]	; 14fcc <test_print@@Base+0x1880>
   14fa0:	moveq	r0, #5
   14fa4:	ldrne	r2, [r3]
   14fa8:	ldreq	r2, [r3]
   14fac:	ldrbne	r3, [r3, #4]
   14fb0:	ldrheq	r3, [r3, #4]
   14fb4:	strne	r2, [r1]
   14fb8:	strbne	r3, [r1, #4]
   14fbc:	streq	r2, [r1]
   14fc0:	strheq	r3, [r1, #4]
   14fc4:	bx	lr
   14fc8:	andeq	fp, r1, r5, lsl #13
   14fcc:	andeq	fp, r1, fp, lsl #13
   14fd0:	subs	r2, r2, #1
   14fd4:	push	{r4, lr}
   14fd8:	mov	r4, r0
   14fdc:	sub	sp, sp, #24
   14fe0:	bne	14ffc <test_print@@Base+0x18b0>
   14fe4:	ldr	r3, [r0, #36]	; 0x24
   14fe8:	cmp	r3, #0
   14fec:	moveq	r3, #2
   14ff0:	streq	r3, [r0, #36]	; 0x24
   14ff4:	add	sp, sp, #24
   14ff8:	pop	{r4, pc}
   14ffc:	ldr	ip, [r0, #32]
   15000:	add	ip, ip, #1
   15004:	str	ip, [r0, #32]
   15008:	ldr	ip, [r0, #20]
   1500c:	add	lr, ip, #1
   15010:	str	lr, [r0, #20]
   15014:	mov	lr, #123	; 0x7b
   15018:	strb	lr, [ip]
   1501c:	str	r2, [sp, #16]
   15020:	ldr	r2, [r1]
   15024:	str	r1, [sp, #4]
   15028:	sub	r1, r1, r2
   1502c:	mov	ip, #0
   15030:	ldrh	r2, [r1]
   15034:	str	r1, [sp, #8]
   15038:	add	r1, sp, #4
   1503c:	str	ip, [sp, #20]
   15040:	str	r2, [sp, #12]
   15044:	blx	r3
   15048:	ldrb	r3, [r4, #25]
   1504c:	cmp	r3, #0
   15050:	beq	1507c <test_print@@Base+0x1930>
   15054:	ldr	r3, [r4, #20]
   15058:	mov	r0, r4
   1505c:	add	r2, r3, #1
   15060:	str	r2, [r4, #20]
   15064:	mov	r2, #10
   15068:	strb	r2, [r3]
   1506c:	ldr	r3, [r4, #32]
   15070:	sub	r3, r3, #1
   15074:	str	r3, [r4, #32]
   15078:	bl	14b50 <test_print@@Base+0x1404>
   1507c:	ldr	r3, [r4, #20]
   15080:	add	r2, r3, #1
   15084:	str	r2, [r4, #20]
   15088:	mov	r2, #125	; 0x7d
   1508c:	strb	r2, [r3]
   15090:	b	14ff4 <test_print@@Base+0x18a8>
   15094:	push	{r0, r1, r2, r4, r5, lr}
   15098:	mov	r4, r0
   1509c:	mov	r0, #0
   150a0:	cmp	r1, r0
   150a4:	cmpne	r2, #7
   150a8:	str	r0, [sp, #4]
   150ac:	bhi	150d4 <test_print@@Base+0x1988>
   150b0:	ldr	r3, [r4, #36]	; 0x24
   150b4:	ldr	r2, [pc, #120]	; 15134 <test_print@@Base+0x19e8>
   150b8:	cmp	r3, r0
   150bc:	moveq	r3, #1
   150c0:	streq	r3, [r4, #36]	; 0x24
   150c4:	ldr	r1, [pc, #108]	; 15138 <test_print@@Base+0x19ec>
   150c8:	ldr	r3, [pc, #108]	; 1513c <test_print@@Base+0x19f0>
   150cc:	ldr	r0, [pc, #108]	; 15140 <test_print@@Base+0x19f4>
   150d0:	bl	1255c <__assert_fail@plt>
   150d4:	cmp	r3, #0
   150d8:	beq	15128 <test_print@@Base+0x19dc>
   150dc:	mov	r2, #4
   150e0:	mov	r5, r1
   150e4:	add	r0, sp, r2
   150e8:	mov	r1, r3
   150ec:	bl	12514 <strncpy@plt>
   150f0:	ldr	r3, [sp, #4]
   150f4:	ldr	r2, [r5, #4]
   150f8:	cmp	r2, r3
   150fc:	cmpne	r3, #0
   15100:	beq	15128 <test_print@@Base+0x19dc>
   15104:	ldr	r3, [r4, #36]	; 0x24
   15108:	ldr	r2, [pc, #52]	; 15144 <test_print@@Base+0x19f8>
   1510c:	cmp	r3, #0
   15110:	moveq	r3, #1
   15114:	streq	r3, [r4, #36]	; 0x24
   15118:	ldr	r1, [pc, #24]	; 15138 <test_print@@Base+0x19ec>
   1511c:	ldr	r3, [pc, #24]	; 1513c <test_print@@Base+0x19f0>
   15120:	ldr	r0, [pc, #32]	; 15148 <test_print@@Base+0x19fc>
   15124:	b	150d0 <test_print@@Base+0x1984>
   15128:	mov	r0, #1
   1512c:	add	sp, sp, #12
   15130:	pop	{r4, r5, pc}
   15134:	strdeq	r0, [r0], -fp
   15138:	andeq	fp, r1, ip, asr #26
   1513c:	muleq	r1, r2, r6
   15140:	muleq	r1, r7, sp
   15144:	andeq	r0, r0, r4, lsl #8
   15148:			; <UNDEFINED> instruction: 0x0001bdb6
   1514c:	cmp	r2, #0
   15150:	beq	152ac <test_print@@Base+0x1b60>
   15154:	push	{r4, r5, lr}
   15158:	bics	lr, r3, #224	; 0xe0
   1515c:	ldr	ip, [r2]
   15160:	beq	15174 <test_print@@Base+0x1a28>
   15164:	cmp	lr, #1
   15168:	beq	15200 <test_print@@Base+0x1ab4>
   1516c:	mov	r0, #3
   15170:	b	151f0 <test_print@@Base+0x1aa4>
   15174:	ldr	lr, [pc, #312]	; 152b4 <test_print@@Base+0x1b68>
   15178:	cmp	ip, #2
   1517c:	mov	r4, r0
   15180:	mov	r5, r1
   15184:	add	r0, r0, #4
   15188:	add	r1, r1, #3
   1518c:	bhi	15208 <test_print@@Base+0x1abc>
   15190:	cmp	ip, #1
   15194:	and	r3, r3, #128	; 0x80
   15198:	beq	15278 <test_print@@Base+0x1b2c>
   1519c:	cmp	ip, #2
   151a0:	bne	1526c <test_print@@Base+0x1b20>
   151a4:	ldrb	r1, [r5]
   151a8:	cmp	r3, #0
   151ac:	ldrb	r1, [lr, r1, lsr #2]
   151b0:	strb	r1, [r4]
   151b4:	ldrb	r1, [r5]
   151b8:	ldrb	r0, [r5, #1]
   151bc:	lsl	r1, r1, #4
   151c0:	and	r1, r1, #48	; 0x30
   151c4:	orr	r1, r1, r0, lsr #4
   151c8:	ldrb	r1, [lr, r1]
   151cc:	strb	r1, [r4, #1]
   151d0:	ldrb	r1, [r5, #1]
   151d4:	lsl	r1, r1, #2
   151d8:	and	r1, r1, #60	; 0x3c
   151dc:	ldrb	r1, [lr, r1]
   151e0:	strb	r1, [r4, #2]
   151e4:	bne	15264 <test_print@@Base+0x1b18>
   151e8:	mov	r0, #0
   151ec:	mov	ip, r0
   151f0:	ldr	r3, [r2]
   151f4:	sub	ip, r3, ip
   151f8:	str	ip, [r2]
   151fc:	pop	{r4, r5, pc}
   15200:	ldr	lr, [pc, #176]	; 152b8 <test_print@@Base+0x1b6c>
   15204:	b	15178 <test_print@@Base+0x1a2c>
   15208:	ldrb	r4, [r1, #-3]
   1520c:	sub	ip, ip, #3
   15210:	ldrb	r4, [lr, r4, lsr #2]
   15214:	strb	r4, [r0, #-4]
   15218:	ldrb	r4, [r1, #-3]
   1521c:	ldrb	r5, [r1, #-2]
   15220:	lsl	r4, r4, #4
   15224:	and	r4, r4, #48	; 0x30
   15228:	orr	r4, r4, r5, lsr #4
   1522c:	ldrb	r4, [lr, r4]
   15230:	strb	r4, [r0, #-3]
   15234:	ldrb	r4, [r1, #-2]
   15238:	ldrb	r5, [r1, #-1]
   1523c:	lsl	r4, r4, #2
   15240:	and	r4, r4, #60	; 0x3c
   15244:	orr	r4, r4, r5, lsr #6
   15248:	ldrb	r4, [lr, r4]
   1524c:	strb	r4, [r0, #-2]
   15250:	ldrb	r4, [r1, #-1]
   15254:	and	r4, r4, #63	; 0x3f
   15258:	ldrb	r4, [lr, r4]
   1525c:	strb	r4, [r0, #-1]
   15260:	b	15178 <test_print@@Base+0x1a2c>
   15264:	mov	r3, #61	; 0x3d
   15268:	strb	r3, [r4, #3]
   1526c:	mov	ip, #0
   15270:	mov	r0, ip
   15274:	b	151f0 <test_print@@Base+0x1aa4>
   15278:	ldrb	r1, [r5]
   1527c:	cmp	r3, #0
   15280:	ldrb	r1, [lr, r1, lsr #2]
   15284:	strb	r1, [r4]
   15288:	ldrb	r1, [r5]
   1528c:	lsl	r1, r1, #4
   15290:	and	r1, r1, #48	; 0x30
   15294:	ldrb	r1, [lr, r1]
   15298:	strb	r1, [r4, #1]
   1529c:	beq	151e8 <test_print@@Base+0x1a9c>
   152a0:	mov	r3, #61	; 0x3d
   152a4:	strb	r3, [r4, #2]
   152a8:	b	15268 <test_print@@Base+0x1b1c>
   152ac:	mov	r0, #2
   152b0:	bx	lr
   152b4:	ldrdeq	fp, [r1], -r1
   152b8:	andeq	fp, r1, r2, lsl lr
   152bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152c0:	vpush	{d8}
   152c4:	subs	r3, r0, #0
   152c8:	sub	sp, sp, #172	; 0xac
   152cc:	vstr	d0, [sp, #48]	; 0x30
   152d0:	ldrd	r6, [sp, #48]	; 0x30
   152d4:	str	r3, [sp, #104]	; 0x68
   152d8:	bne	152f0 <test_print@@Base+0x1ba4>
   152dc:	ldr	r3, [pc, #1068]	; 15710 <test_print@@Base+0x1fc4>
   152e0:	ldr	r1, [pc, #1068]	; 15714 <test_print@@Base+0x1fc8>
   152e4:	ldr	r0, [pc, #1068]	; 15718 <test_print@@Base+0x1fcc>
   152e8:	mov	r2, #189	; 0xbd
   152ec:	bl	1255c <__assert_fail@plt>
   152f0:	adds	r4, r6, r6
   152f4:	ldr	r3, [pc, #1056]	; 1571c <test_print@@Base+0x1fd0>
   152f8:	adc	r5, r7, r7
   152fc:	mov	r2, #0
   15300:	cmp	r5, r3
   15304:	cmpeq	r4, r2
   15308:	bls	15328 <test_print@@Base+0x1bdc>
   1530c:	mov	r3, r6
   15310:	mov	r2, r7
   15314:	ldr	r1, [pc, #1028]	; 15720 <test_print@@Base+0x1fd4>
   15318:	add	sp, sp, #172	; 0xac
   1531c:	vpop	{d8}
   15320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15324:	b	1252c <sprintf@plt>
   15328:	cmp	r6, #0
   1532c:	sbcs	r3, r7, #0
   15330:	addlt	r7, r7, #-2147483648	; 0x80000000
   15334:	vldrlt	d7, [sp, #48]	; 0x30
   15338:	ldrlt	r3, [sp, #104]	; 0x68
   1533c:	ldrlt	r2, [sp, #104]	; 0x68
   15340:	addlt	r5, r3, #1
   15344:	vneglt.f64	d7, d7
   15348:	movlt	r3, #45	; 0x2d
   1534c:	strblt	r3, [r2]
   15350:	ldrge	r5, [sp, #104]	; 0x68
   15354:	vstrlt	d7, [sp, #48]	; 0x30
   15358:	orrs	r3, r6, r7
   1535c:	bne	15384 <test_print@@Base+0x1c38>
   15360:	mov	r3, #48	; 0x30
   15364:	strb	r3, [r5]
   15368:	mov	r3, #0
   1536c:	strb	r3, [r5, #1]!
   15370:	ldr	r3, [sp, #104]	; 0x68
   15374:	sub	r0, r5, r3
   15378:	add	sp, sp, #172	; 0xac
   1537c:	vpop	{d8}
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	ldr	r3, [pc, #920]	; 15724 <test_print@@Base+0x1fd8>
   15388:	mov	r2, #0
   1538c:	cmp	r7, r3
   15390:	cmpeq	r6, r2
   15394:	bne	153bc <test_print@@Base+0x1c70>
   15398:	mov	r3, #105	; 0x69
   1539c:	strb	r3, [r5]
   153a0:	mov	r3, #110	; 0x6e
   153a4:	strb	r3, [r5, #1]
   153a8:	mov	r3, #102	; 0x66
   153ac:	strb	r3, [r5, #2]
   153b0:	mov	r3, #0
   153b4:	strb	r3, [r5, #3]!
   153b8:	b	15370 <test_print@@Base+0x1c24>
   153bc:	ldrd	r0, [sp, #48]	; 0x30
   153c0:	ldr	r9, [pc, #864]	; 15728 <test_print@@Base+0x1fdc>
   153c4:	mvn	r8, #0
   153c8:	strd	r0, [sp, #32]
   153cc:	and	r0, r0, r2
   153d0:	and	r1, r1, r3
   153d4:	mov	r2, r0
   153d8:	mov	r3, r1
   153dc:	orrs	r3, r2, r3
   153e0:	ldrd	r2, [sp, #32]
   153e4:	strd	r0, [sp, #64]	; 0x40
   153e8:	and	r2, r2, r8
   153ec:	and	r3, r3, r9
   153f0:	mov	r8, r2
   153f4:	mov	r9, r3
   153f8:	bne	1540c <test_print@@Base+0x1cc0>
   153fc:	orrs	r3, r8, r9
   15400:	ldrne	ip, [pc, #804]	; 1572c <test_print@@Base+0x1fe0>
   15404:	bne	15428 <test_print@@Base+0x1cdc>
   15408:	bl	12568 <__assert_fail@plt+0xc>
   1540c:	adds	r8, r2, #0
   15410:	adc	r9, r3, #1048576	; 0x100000
   15414:	ldr	r3, [sp, #36]	; 0x24
   15418:	ldr	ip, [pc, #784]	; 15730 <test_print@@Base+0x1fe4>
   1541c:	and	ip, ip, r3, lsr #20
   15420:	sub	ip, ip, #1072	; 0x430
   15424:	sub	ip, ip, #3
   15428:	ldr	r1, [pc, #772]	; 15734 <test_print@@Base+0x1fe8>
   1542c:	mov	lr, ip
   15430:	mov	r6, r8
   15434:	mov	r7, r9
   15438:	mov	r0, #0
   1543c:	and	r2, r6, r0
   15440:	and	r3, r7, r1
   15444:	orrs	r3, r2, r3
   15448:	sub	r4, lr, #10
   1544c:	beq	154f0 <test_print@@Base+0x1da4>
   15450:	cmp	r6, #0
   15454:	sbcs	r3, r7, #0
   15458:	str	lr, [sp, #40]	; 0x28
   1545c:	sub	lr, lr, #1
   15460:	bge	1550c <test_print@@Base+0x1dc0>
   15464:	adds	r2, r8, r8
   15468:	adc	r3, r9, r9
   1546c:	adds	sl, r2, #1
   15470:	strd	r2, [sp, #72]	; 0x48
   15474:	adc	fp, r3, #0
   15478:	sub	r3, ip, #1
   1547c:	mov	lr, r3
   15480:	str	r3, [sp, #56]	; 0x38
   15484:	ldr	r1, [pc, #680]	; 15734 <test_print@@Base+0x1fe8>
   15488:	mov	r0, #0
   1548c:	and	r0, r0, sl
   15490:	and	r1, r1, fp
   15494:	orrs	r3, r0, r1
   15498:	sub	r4, lr, #10
   1549c:	beq	15518 <test_print@@Base+0x1dcc>
   154a0:	cmp	sl, #0
   154a4:	sbcs	r3, fp, #0
   154a8:	mov	r4, lr
   154ac:	sub	lr, lr, #1
   154b0:	bge	15534 <test_print@@Base+0x1de8>
   154b4:	vldr	d8, [pc, #572]	; 156f8 <test_print@@Base+0x1fac>
   154b8:	vldr	d7, [sp, #48]	; 0x30
   154bc:	vcmpe.f64	d7, d8
   154c0:	vmrs	APSR_nzcv, fpscr
   154c4:	ble	154dc <test_print@@Base+0x1d90>
   154c8:	vldr	d7, [pc, #560]	; 15700 <test_print@@Base+0x1fb4>
   154cc:	vldr	d6, [sp, #48]	; 0x30
   154d0:	vcmpe.f64	d6, d7
   154d4:	vmrs	APSR_nzcv, fpscr
   154d8:	bls	15540 <test_print@@Base+0x1df4>
   154dc:	ldr	r3, [pc, #596]	; 15738 <test_print@@Base+0x1fec>
   154e0:	mov	r2, #138	; 0x8a
   154e4:	ldr	r1, [pc, #552]	; 15714 <test_print@@Base+0x1fc8>
   154e8:	ldr	r0, [pc, #588]	; 1573c <test_print@@Base+0x1ff0>
   154ec:	b	152ec <test_print@@Base+0x1ba0>
   154f0:	lsl	r3, r7, #10
   154f4:	orr	r3, r3, r6, lsr #22
   154f8:	lsl	r2, r6, #10
   154fc:	mov	r6, r2
   15500:	mov	r7, r3
   15504:	mov	lr, r4
   15508:	b	1543c <test_print@@Base+0x1cf0>
   1550c:	adds	r6, r6, r6
   15510:	adc	r7, r7, r7
   15514:	b	15450 <test_print@@Base+0x1d04>
   15518:	lsl	r1, fp, #10
   1551c:	orr	r1, r1, sl, lsr #22
   15520:	lsl	r0, sl, #10
   15524:	mov	sl, r0
   15528:	mov	fp, r1
   1552c:	mov	lr, r4
   15530:	b	15484 <test_print@@Base+0x1d38>
   15534:	adds	sl, sl, sl
   15538:	adc	fp, fp, fp
   1553c:	b	154a0 <test_print@@Base+0x1d54>
   15540:	ldrd	r2, [sp, #32]
   15544:	ldr	r1, [pc, #476]	; 15728 <test_print@@Base+0x1fdc>
   15548:	mvn	r0, #0
   1554c:	and	r3, r3, r1
   15550:	ldr	r1, [sp, #68]	; 0x44
   15554:	and	r2, r2, r0
   15558:	adds	r1, r1, #0
   1555c:	orr	r0, r2, r3
   15560:	movne	r1, #1
   15564:	cmp	r0, #0
   15568:	movne	r1, #0
   1556c:	cmp	r1, #0
   15570:	beq	156e8 <test_print@@Base+0x1f9c>
   15574:	lsl	r1, r9, #2
   15578:	lsl	r0, r8, #2
   1557c:	orr	r1, r1, r8, lsr #30
   15580:	subs	r0, r0, #1
   15584:	sbc	r1, r1, #0
   15588:	sub	r3, ip, #2
   1558c:	str	r3, [sp, #56]	; 0x38
   15590:	ldr	r3, [sp, #56]	; 0x38
   15594:	sub	r2, r3, r4
   15598:	bl	1acbc <flatcc_json_printer_clear@@Base+0x4a0>
   1559c:	ldr	r3, [sp, #40]	; 0x28
   155a0:	mvn	r2, #60	; 0x3c
   155a4:	sub	r2, r2, r3
   155a8:	vldr	d6, [pc, #344]	; 15708 <test_print@@Base+0x1fbc>
   155ac:	vmov	s15, r2
   155b0:	vcvt.f64.s32	d7, s15
   155b4:	vmul.f64	d7, d7, d6
   155b8:	vcvt.s32.f64	s13, d7
   155bc:	vcmpe.f64	d7, d8
   155c0:	vmrs	APSR_nzcv, fpscr
   155c4:	strd	r0, [sp, #56]	; 0x38
   155c8:	vmov	r1, s13
   155cc:	bmi	155e4 <test_print@@Base+0x1e98>
   155d0:	vcvt.f64.s32	d6, s13
   155d4:	vsub.f64	d7, d7, d6
   155d8:	vcmp.f64	d7, d8
   155dc:	vmrs	APSR_nzcv, fpscr
   155e0:	addne	r1, r1, #1
   155e4:	add	r1, r1, #344	; 0x158
   155e8:	adds	r2, r1, #3
   155ec:	addmi	r2, r1, #10
   155f0:	ldr	r8, [pc, #328]	; 15740 <test_print@@Base+0x1ff4>
   155f4:	asr	r2, r2, #3
   155f8:	add	r2, r2, #1
   155fc:	add	r0, r8, #304	; 0x130
   15600:	lsl	r2, r2, #4
   15604:	add	r1, r0, r2
   15608:	ldrd	r2, [r2, r0]
   1560c:	ldrsh	r9, [r1, #8]
   15610:	add	r0, sp, #120	; 0x78
   15614:	strd	r2, [sp, #32]
   15618:	ldrsh	r3, [r1, #10]
   1561c:	str	r9, [sp, #16]
   15620:	str	r3, [sp, #108]	; 0x6c
   15624:	ldrd	r2, [sp, #32]
   15628:	strd	r2, [sp, #8]
   1562c:	ldr	r3, [sp, #40]	; 0x28
   15630:	mov	r2, r6
   15634:	str	r3, [sp]
   15638:	mov	r3, r7
   1563c:	bl	14ed4 <test_print@@Base+0x1788>
   15640:	ldrd	r2, [sp, #120]	; 0x78
   15644:	str	r4, [sp]
   15648:	add	r0, sp, #152	; 0x98
   1564c:	strd	r2, [sp, #64]	; 0x40
   15650:	ldr	r3, [sp, #128]	; 0x80
   15654:	str	r9, [sp, #16]
   15658:	str	r3, [sp, #72]	; 0x48
   1565c:	ldrd	r2, [sp, #32]
   15660:	strd	r2, [sp, #8]
   15664:	ldrd	r2, [sp, #56]	; 0x38
   15668:	bl	14ed4 <test_print@@Base+0x1788>
   1566c:	ldr	r3, [sp, #160]	; 0xa0
   15670:	str	r4, [sp]
   15674:	str	r3, [sp, #56]	; 0x38
   15678:	ldrd	r2, [sp, #32]
   1567c:	ldrd	r6, [sp, #152]	; 0x98
   15680:	add	r0, sp, #136	; 0x88
   15684:	strd	r2, [sp, #8]
   15688:	str	r9, [sp, #16]
   1568c:	mov	r2, sl
   15690:	mov	r3, fp
   15694:	bl	14ed4 <test_print@@Base+0x1788>
   15698:	ldrd	r2, [sp, #136]	; 0x88
   1569c:	subs	r6, r6, #1
   156a0:	sbc	r7, r7, #0
   156a4:	adds	r0, r2, #1
   156a8:	adc	r1, r3, #0
   156ac:	subs	r2, r0, r6
   156b0:	sbc	r3, r1, r7
   156b4:	cmp	r7, r1
   156b8:	cmpeq	r6, r0
   156bc:	ldr	sl, [sp, #144]	; 0x90
   156c0:	strd	r2, [sp, #32]
   156c4:	ldr	r3, [sp, #56]	; 0x38
   156c8:	movhi	r4, #1
   156cc:	movls	r4, #0
   156d0:	cmp	r3, sl
   156d4:	orrne	r4, r4, #1
   156d8:	cmp	r4, #0
   156dc:	strd	r0, [sp, #40]	; 0x28
   156e0:	beq	1574c <test_print@@Base+0x2000>
   156e4:	bl	14f6c <test_print@@Base+0x1820>
   156e8:	ldrd	r0, [sp, #72]	; 0x48
   156ec:	subs	r0, r0, #1
   156f0:	sbc	r1, r1, #0
   156f4:	b	15590 <test_print@@Base+0x1e44>
	...
   15700:			; <UNDEFINED> instruction: 0xffffffff
   15704:	svcvc	0x00efffff
   15708:			; <UNDEFINED> instruction: 0x509f79fe
   1570c:	svccc	0x00d34413
   15710:	andeq	fp, r1, r0, lsr #13
   15714:	andeq	fp, r1, r3, asr lr
   15718:	andeq	fp, r1, sl, lsr #29
   1571c:			; <UNDEFINED> instruction: 0xffe00000
   15720:	andeq	fp, r1, lr, lsr #29
   15724:	svcvc	0x00f00000	; IMB
   15728:	strdeq	pc, [pc], -pc	; <UNPREDICTABLE>
   1572c:			; <UNDEFINED> instruction: 0xfffffbce
   15730:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   15734:			; <UNDEFINED> instruction: 0xffc00000
   15738:			; <UNDEFINED> instruction: 0x0001b6b4
   1573c:			; <UNDEFINED> instruction: 0x0001bebc
   15740:	muleq	r1, r0, r5
   15744:	ldrdeq	r0, [r0], -r1
   15748:	andeq	fp, r1, r1, ror #29
   1574c:	ldr	r3, [sp, #72]	; 0x48
   15750:	mov	r0, #1
   15754:	rsb	r7, r3, #0
   15758:	mov	r2, r7
   1575c:	mov	r1, #0
   15760:	bl	1acbc <flatcc_json_printer_clear@@Base+0x4a0>
   15764:	mov	r2, r7
   15768:	strd	r0, [sp, #88]	; 0x58
   1576c:	ldrd	r0, [sp, #40]	; 0x28
   15770:	bl	1aca0 <flatcc_json_printer_clear@@Base+0x484>
   15774:	ldrd	r2, [sp, #88]	; 0x58
   15778:	subs	r2, r2, #1
   1577c:	sbc	r3, r3, #0
   15780:	strd	r2, [sp, #96]	; 0x60
   15784:	ldrd	r2, [sp, #40]	; 0x28
   15788:	mov	r9, r0
   1578c:	ldrd	r0, [sp, #96]	; 0x60
   15790:	and	r2, r2, r0
   15794:	and	r3, r3, r1
   15798:	strd	r2, [sp, #56]	; 0x38
   1579c:	ldr	r3, [sp, #72]	; 0x48
   157a0:	add	r2, r3, #65	; 0x41
   157a4:	ldr	r3, [pc, #-104]	; 15744 <test_print@@Base+0x1ff8>
   157a8:	mul	r3, r3, r2
   157ac:	asr	r3, r3, #12
   157b0:	add	r6, r3, #1
   157b4:	add	r2, r8, r6, lsl #2
   157b8:	ldr	r2, [r2, #1696]	; 0x6a0
   157bc:	cmp	r9, r2
   157c0:	movcc	r6, r3
   157c4:	add	r8, r8, r6, lsl #2
   157c8:	ldr	fp, [r8, #1696]	; 0x6a0
   157cc:	mov	r8, #10
   157d0:	cmp	r6, #0
   157d4:	bgt	158fc <test_print@@Base+0x21b0>
   157d8:	add	ip, r5, r4
   157dc:	mov	r8, #1
   157e0:	mov	r9, #0
   157e4:	mov	fp, #10
   157e8:	add	r3, r6, r4
   157ec:	str	r3, [sp, #112]	; 0x70
   157f0:	ldr	r3, [sp, #56]	; 0x38
   157f4:	str	ip, [sp, #116]	; 0x74
   157f8:	umull	r2, r3, r3, fp
   157fc:	strd	r2, [sp, #80]	; 0x50
   15800:	ldr	r3, [sp, #60]	; 0x3c
   15804:	ldr	r2, [sp, #84]	; 0x54
   15808:	mla	r3, fp, r3, r2
   1580c:	mul	r2, fp, r9
   15810:	umull	r8, r9, r8, fp
   15814:	str	r3, [sp, #84]	; 0x54
   15818:	ldr	r3, [sp, #36]	; 0x24
   1581c:	add	r9, r2, r9
   15820:	mul	r2, fp, r3
   15824:	ldr	r3, [sp, #32]
   15828:	umull	r0, r1, r3, fp
   1582c:	strd	r0, [sp, #32]
   15830:	ldr	r3, [sp, #36]	; 0x24
   15834:	ldrd	r0, [sp, #80]	; 0x50
   15838:	add	r3, r2, r3
   1583c:	mov	r2, r7
   15840:	str	r3, [sp, #36]	; 0x24
   15844:	bl	1aca0 <flatcc_json_printer_clear@@Base+0x484>
   15848:	ldr	ip, [sp, #116]	; 0x74
   1584c:	ldrd	r2, [sp, #80]	; 0x50
   15850:	add	r0, r0, #48	; 0x30
   15854:	strb	r0, [ip], #1
   15858:	ldrd	r0, [sp, #96]	; 0x60
   1585c:	sub	r4, ip, r5
   15860:	and	r1, r1, r3
   15864:	ldr	r3, [sp, #112]	; 0x70
   15868:	and	r0, r0, r2
   1586c:	sub	r6, r3, ip
   15870:	ldrd	r2, [sp, #32]
   15874:	strd	r0, [sp, #56]	; 0x38
   15878:	add	r6, r5, r6
   1587c:	cmp	r3, r1
   15880:	cmpeq	r2, r0
   15884:	bls	157f0 <test_print@@Base+0x20a4>
   15888:	ldrd	r0, [sp, #64]	; 0x40
   1588c:	ldrd	r2, [sp, #40]	; 0x28
   15890:	subs	r2, r2, r0
   15894:	sbc	r3, r3, r1
   15898:	strd	r2, [sp, #80]	; 0x50
   1589c:	ldrd	r2, [sp, #40]	; 0x28
   158a0:	cmp	r1, r3
   158a4:	cmpeq	r0, r2
   158a8:	ldr	r3, [sp, #72]	; 0x48
   158ac:	movhi	r1, #1
   158b0:	movls	r1, #0
   158b4:	cmp	r3, sl
   158b8:	orrne	r1, r1, #1
   158bc:	cmp	r1, #0
   158c0:	bne	156e4 <test_print@@Base+0x1f98>
   158c4:	ldr	r3, [sp, #84]	; 0x54
   158c8:	strd	r8, [sp, #24]
   158cc:	mul	r1, r8, r3
   158d0:	ldr	r3, [sp, #80]	; 0x50
   158d4:	mla	r1, r3, r9, r1
   158d8:	umull	r2, r3, r8, r3
   158dc:	add	r3, r1, r3
   158e0:	ldrd	r0, [sp, #88]	; 0x58
   158e4:	strd	r0, [sp, #16]
   158e8:	ldrd	r0, [sp, #56]	; 0x38
   158ec:	strd	r0, [sp, #8]
   158f0:	ldrd	r0, [sp, #32]
   158f4:	strd	r0, [sp]
   158f8:	b	159cc <test_print@@Base+0x2280>
   158fc:	mov	r1, fp
   15900:	mov	r0, r9
   15904:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   15908:	mov	r1, fp
   1590c:	sub	r6, r6, #1
   15910:	add	r0, r0, #48	; 0x30
   15914:	strb	r0, [r5, r4]
   15918:	mov	r0, r9
   1591c:	bl	1aa40 <flatcc_json_printer_clear@@Base+0x224>
   15920:	mov	r2, r7
   15924:	add	r4, r4, #1
   15928:	mov	r0, r1
   1592c:	mov	r9, r1
   15930:	mov	r1, #0
   15934:	bl	1acbc <flatcc_json_printer_clear@@Base+0x4a0>
   15938:	ldrd	r2, [sp, #56]	; 0x38
   1593c:	adds	r2, r2, r0
   15940:	adc	r3, r3, r1
   15944:	strd	r2, [sp, #80]	; 0x50
   15948:	ldrd	r0, [sp, #80]	; 0x50
   1594c:	ldrd	r2, [sp, #32]
   15950:	cmp	r3, r1
   15954:	cmpeq	r2, r0
   15958:	bls	15a08 <test_print@@Base+0x22bc>
   1595c:	ldrd	r2, [sp, #64]	; 0x40
   15960:	ldrd	r8, [sp, #40]	; 0x28
   15964:	ldrd	r0, [sp, #40]	; 0x28
   15968:	subs	r8, r8, r2
   1596c:	sbc	r9, r9, r3
   15970:	cmp	r3, r1
   15974:	cmpeq	r2, r0
   15978:	ldr	r2, [sp, #72]	; 0x48
   1597c:	movhi	r3, #1
   15980:	movls	r3, #0
   15984:	cmp	r2, sl
   15988:	orrne	r3, r3, #1
   1598c:	cmp	r3, #0
   15990:	bne	156e4 <test_print@@Base+0x1f98>
   15994:	mov	r3, #0
   15998:	mov	r2, #1
   1599c:	mov	r0, fp
   159a0:	strd	r2, [sp, #24]
   159a4:	mov	r1, #0
   159a8:	mov	r2, r7
   159ac:	bl	1acbc <flatcc_json_printer_clear@@Base+0x4a0>
   159b0:	ldrd	r2, [sp, #80]	; 0x50
   159b4:	strd	r2, [sp, #8]
   159b8:	ldrd	r2, [sp, #32]
   159bc:	strd	r2, [sp]
   159c0:	mov	r2, r8
   159c4:	mov	r3, r9
   159c8:	strd	r0, [sp, #16]
   159cc:	mov	r1, r4
   159d0:	mov	r0, r5
   159d4:	bl	14578 <test_print@@Base+0xe2c>
   159d8:	ldr	r3, [sp, #108]	; 0x6c
   159dc:	sub	r6, r6, r3
   159e0:	cmp	r0, #0
   159e4:	bne	15a1c <test_print@@Base+0x22d0>
   159e8:	ldrd	r2, [sp, #48]	; 0x30
   159ec:	mov	r0, r5
   159f0:	ldr	r1, [pc, #-688]	; 15748 <test_print@@Base+0x1ffc>
   159f4:	bl	1252c <sprintf@plt>
   159f8:	ldr	r3, [sp, #104]	; 0x68
   159fc:	sub	r5, r5, r3
   15a00:	add	r0, r5, r0
   15a04:	b	15378 <test_print@@Base+0x1c2c>
   15a08:	mov	r0, fp
   15a0c:	mov	r1, r8
   15a10:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   15a14:	mov	fp, r0
   15a18:	b	157d0 <test_print@@Base+0x2084>
   15a1c:	cmp	r4, #2
   15a20:	subgt	r0, r4, #1
   15a24:	movle	r0, #1
   15a28:	cmp	r6, #0
   15a2c:	bge	15b1c <test_print@@Base+0x23d0>
   15a30:	add	r3, r6, r4
   15a34:	rsb	r2, r6, #0
   15a38:	cmp	r2, r4
   15a3c:	cmnge	r3, #2
   15a40:	movge	r3, #1
   15a44:	movlt	r3, #0
   15a48:	blt	15ab8 <test_print@@Base+0x236c>
   15a4c:	rsb	r0, r4, #2
   15a50:	sub	r0, r0, r6
   15a54:	mov	r2, r4
   15a58:	mov	r1, r5
   15a5c:	add	r0, r5, r0
   15a60:	bl	12454 <memmove@plt>
   15a64:	rsb	r6, r6, #2
   15a68:	mov	r2, #46	; 0x2e
   15a6c:	strb	r2, [r5, #1]
   15a70:	sub	r6, r6, r4
   15a74:	add	r2, r5, #2
   15a78:	mov	r3, #48	; 0x30
   15a7c:	strb	r3, [r5]
   15a80:	sub	r1, r2, r5
   15a84:	cmp	r6, r1
   15a88:	bgt	15ab0 <test_print@@Base+0x2364>
   15a8c:	cmp	r6, #2
   15a90:	addge	r4, r4, r6
   15a94:	addlt	r4, r4, #2
   15a98:	mov	r3, #0
   15a9c:	strb	r3, [r5, r4]
   15aa0:	ldr	r3, [sp, #104]	; 0x68
   15aa4:	add	r0, r5, r4
   15aa8:	sub	r0, r0, r3
   15aac:	b	15378 <test_print@@Base+0x1c2c>
   15ab0:	strb	r3, [r2], #1
   15ab4:	b	15a80 <test_print@@Base+0x2334>
   15ab8:	cmp	r4, #1
   15abc:	beq	15b1c <test_print@@Base+0x23d0>
   15ac0:	cmp	r0, r2
   15ac4:	movge	r0, r2
   15ac8:	add	r2, r5, r4
   15acc:	cmp	r3, r0
   15ad0:	blt	15b0c <test_print@@Base+0x23c0>
   15ad4:	sub	r2, r4, r0
   15ad8:	add	r3, r4, #1
   15adc:	mov	r1, #46	; 0x2e
   15ae0:	adds	r0, r0, r6
   15ae4:	strb	r1, [r5, r2]
   15ae8:	moveq	r4, r3
   15aec:	beq	15a98 <test_print@@Base+0x234c>
   15af0:	add	r4, r4, #2
   15af4:	mov	r2, #101	; 0x65
   15af8:	add	r1, r5, r4
   15afc:	strb	r2, [r5, r3]
   15b00:	bl	14710 <test_print@@Base+0xfc4>
   15b04:	add	r4, r4, r0
   15b08:	b	15a98 <test_print@@Base+0x234c>
   15b0c:	ldrb	r1, [r2, #-1]
   15b10:	add	r3, r3, #1
   15b14:	strb	r1, [r2], #-1
   15b18:	b	15acc <test_print@@Base+0x2380>
   15b1c:	cmp	r6, #2
   15b20:	bls	15b44 <test_print@@Base+0x23f8>
   15b24:	add	r7, r4, #1
   15b28:	mov	r3, #101	; 0x65
   15b2c:	strb	r3, [r5, r4]
   15b30:	add	r1, r5, r7
   15b34:	mov	r0, r6
   15b38:	bl	14710 <test_print@@Base+0xfc4>
   15b3c:	add	r4, r7, r0
   15b40:	b	15a98 <test_print@@Base+0x234c>
   15b44:	cmp	r6, #0
   15b48:	addne	r2, r5, r4
   15b4c:	movne	r3, r6
   15b50:	movne	r1, #48	; 0x30
   15b54:	beq	15a98 <test_print@@Base+0x234c>
   15b58:	subs	r3, r3, #1
   15b5c:	addcc	r4, r4, r6
   15b60:	bcc	15a98 <test_print@@Base+0x234c>
   15b64:	strb	r1, [r2], #1
   15b68:	b	15b58 <test_print@@Base+0x240c>

00015b6c <flatcc_json_printer_error_string@@Base>:
   15b6c:	cmp	r0, #3
   15b70:	ldrls	r3, [pc, #12]	; 15b84 <flatcc_json_printer_error_string@@Base+0x18>
   15b74:	addls	r0, r3, r0, lsl #2
   15b78:	ldrls	r0, [r0, #1740]	; 0x6cc
   15b7c:	ldrhi	r0, [pc, #4]	; 15b88 <flatcc_json_printer_error_string@@Base+0x1c>
   15b80:	bx	lr
   15b84:	muleq	r1, r0, r5
   15b88:	andeq	fp, r1, r7, ror #29

00015b8c <flatcc_json_printer_fmt_float@@Base>:
   15b8c:	vcvt.f64.f32	d0, s0
   15b90:	b	152bc <test_print@@Base+0x1b70>

00015b94 <flatcc_json_printer_fmt_double@@Base>:
   15b94:	b	152bc <test_print@@Base+0x1b70>

00015b98 <flatcc_json_printer_fmt_bool@@Base>:
   15b98:	cmp	r1, #0
   15b9c:	ldreq	r3, [pc, #36]	; 15bc8 <flatcc_json_printer_fmt_bool@@Base+0x30>
   15ba0:	ldrne	r3, [pc, #36]	; 15bcc <flatcc_json_printer_fmt_bool@@Base+0x34>
   15ba4:	ldreq	r2, [r3]
   15ba8:	ldrbeq	r3, [r3, #4]
   15bac:	ldrne	r3, [r3]
   15bb0:	streq	r2, [r0]
   15bb4:	strne	r3, [r0]
   15bb8:	strbeq	r3, [r0, #4]
   15bbc:	movne	r0, #4
   15bc0:	moveq	r0, #5
   15bc4:	bx	lr
   15bc8:	strdeq	fp, [r1], -r4
   15bcc:	andeq	fp, r1, pc, ror #29

00015bd0 <flatcc_json_printer_string@@Base>:
   15bd0:	b	14920 <test_print@@Base+0x11d4>

00015bd4 <flatcc_json_printer_write@@Base>:
   15bd4:	b	1486c <test_print@@Base+0x1120>

00015bd8 <flatcc_json_printer_nl@@Base>:
   15bd8:	ldr	r3, [r0, #20]
   15bdc:	mov	r2, #10
   15be0:	add	r1, r3, #1
   15be4:	str	r1, [r0, #20]
   15be8:	strb	r2, [r3]
   15bec:	b	14d60 <test_print@@Base+0x1614>

00015bf0 <flatcc_json_printer_char@@Base>:
   15bf0:	ldr	r3, [r0, #20]
   15bf4:	add	r2, r3, #1
   15bf8:	str	r2, [r0, #20]
   15bfc:	strb	r1, [r3]
   15c00:	bx	lr

00015c04 <flatcc_json_printer_indent@@Base>:
   15c04:	b	14b50 <test_print@@Base+0x1404>

00015c08 <flatcc_json_printer_add_level@@Base>:
   15c08:	ldr	r3, [r0, #32]
   15c0c:	add	r1, r3, r1
   15c10:	str	r1, [r0, #32]
   15c14:	bx	lr

00015c18 <flatcc_json_printer_get_level@@Base>:
   15c18:	ldr	r0, [r0, #32]
   15c1c:	bx	lr

00015c20 <flatcc_json_printer_uint8@@Base>:
   15c20:	push	{r4, lr}
   15c24:	mov	r4, r0
   15c28:	mov	r0, r1
   15c2c:	ldr	r1, [r4, #20]
   15c30:	bl	14e00 <test_print@@Base+0x16b4>
   15c34:	ldr	r3, [r4, #20]
   15c38:	add	r0, r3, r0
   15c3c:	str	r0, [r4, #20]
   15c40:	pop	{r4, pc}

00015c44 <flatcc_json_printer_uint16@@Base>:
   15c44:	push	{r4, lr}
   15c48:	mov	r4, r0
   15c4c:	mov	r0, r1
   15c50:	ldr	r1, [r4, #20]
   15c54:	bl	139a0 <test_print@@Base+0x254>
   15c58:	ldr	r3, [r4, #20]
   15c5c:	add	r0, r3, r0
   15c60:	str	r0, [r4, #20]
   15c64:	pop	{r4, pc}

00015c68 <flatcc_json_printer_uint32@@Base>:
   15c68:	push	{r4, lr}
   15c6c:	mov	r4, r0
   15c70:	mov	r0, r1
   15c74:	ldr	r1, [r4, #20]
   15c78:	bl	13b20 <test_print@@Base+0x3d4>
   15c7c:	ldr	r3, [r4, #20]
   15c80:	add	r0, r3, r0
   15c84:	str	r0, [r4, #20]
   15c88:	pop	{r4, pc}

00015c8c <flatcc_json_printer_uint64@@Base>:
   15c8c:	push	{r4, lr}
   15c90:	mov	r4, r0
   15c94:	mov	r1, r3
   15c98:	mov	r0, r2
   15c9c:	ldr	r2, [r4, #20]
   15ca0:	bl	13e7c <test_print@@Base+0x730>
   15ca4:	ldr	r3, [r4, #20]
   15ca8:	add	r0, r3, r0
   15cac:	str	r0, [r4, #20]
   15cb0:	pop	{r4, pc}

00015cb4 <flatcc_json_printer_int8@@Base>:
   15cb4:	push	{r4, lr}
   15cb8:	mov	r4, r0
   15cbc:	mov	r0, r1
   15cc0:	ldr	r1, [r4, #20]
   15cc4:	bl	14ea4 <test_print@@Base+0x1758>
   15cc8:	ldr	r3, [r4, #20]
   15ccc:	add	r0, r3, r0
   15cd0:	str	r0, [r4, #20]
   15cd4:	pop	{r4, pc}

00015cd8 <flatcc_json_printer_int16@@Base>:
   15cd8:	push	{r4, lr}
   15cdc:	mov	r4, r0
   15ce0:	mov	r0, r1
   15ce4:	ldr	r1, [r4, #20]
   15ce8:	bl	144ec <test_print@@Base+0xda0>
   15cec:	ldr	r3, [r4, #20]
   15cf0:	add	r0, r3, r0
   15cf4:	str	r0, [r4, #20]
   15cf8:	pop	{r4, pc}

00015cfc <flatcc_json_printer_int32@@Base>:
   15cfc:	push	{r4, lr}
   15d00:	mov	r4, r0
   15d04:	mov	r0, r1
   15d08:	ldr	r1, [r4, #20]
   15d0c:	bl	1451c <test_print@@Base+0xdd0>
   15d10:	ldr	r3, [r4, #20]
   15d14:	add	r0, r3, r0
   15d18:	str	r0, [r4, #20]
   15d1c:	pop	{r4, pc}

00015d20 <flatcc_json_printer_int64@@Base>:
   15d20:	push	{r4, lr}
   15d24:	mov	r4, r0
   15d28:	mov	r1, r3
   15d2c:	mov	r0, r2
   15d30:	ldr	r2, [r4, #20]
   15d34:	bl	14544 <test_print@@Base+0xdf8>
   15d38:	ldr	r3, [r4, #20]
   15d3c:	add	r0, r3, r0
   15d40:	str	r0, [r4, #20]
   15d44:	pop	{r4, pc}

00015d48 <flatcc_json_printer_float@@Base>:
   15d48:	push	{r4, lr}
   15d4c:	vcvt.f64.f32	d0, s0
   15d50:	mov	r4, r0
   15d54:	ldr	r0, [r0, #20]
   15d58:	bl	152bc <test_print@@Base+0x1b70>
   15d5c:	ldr	r3, [r4, #20]
   15d60:	add	r0, r3, r0
   15d64:	str	r0, [r4, #20]
   15d68:	pop	{r4, pc}

00015d6c <flatcc_json_printer_double@@Base>:
   15d6c:	push	{r4, lr}
   15d70:	mov	r4, r0
   15d74:	ldr	r0, [r0, #20]
   15d78:	bl	152bc <test_print@@Base+0x1b70>
   15d7c:	ldr	r3, [r4, #20]
   15d80:	add	r0, r3, r0
   15d84:	str	r0, [r4, #20]
   15d88:	pop	{r4, pc}

00015d8c <flatcc_json_printer_enum@@Base>:
   15d8c:	b	14ad4 <test_print@@Base+0x1388>

00015d90 <flatcc_json_printer_delimit_enum_flags@@Base>:
   15d90:	ldrb	r3, [r0, #26]
   15d94:	adds	r1, r1, #0
   15d98:	ldr	r2, [r0, #20]
   15d9c:	movne	r1, #1
   15da0:	cmp	r3, #0
   15da4:	movne	r3, r1
   15da8:	orreq	r3, r1, #1
   15dac:	mov	r1, #34	; 0x22
   15db0:	strb	r1, [r2]
   15db4:	ldr	r1, [r0, #20]
   15db8:	add	r1, r1, r3
   15dbc:	str	r1, [r0, #20]
   15dc0:	bx	lr

00015dc4 <flatcc_json_printer_enum_flag@@Base>:
   15dc4:	push	{r4, lr}
   15dc8:	mov	lr, r2
   15dcc:	ldr	r2, [r0, #20]
   15dd0:	mov	r4, #32
   15dd4:	strb	r4, [r2]
   15dd8:	ldr	r2, [r0, #20]
   15ddc:	cmp	r1, #0
   15de0:	movle	r1, r2
   15de4:	addgt	r1, r2, #1
   15de8:	str	r1, [r0, #20]
   15dec:	mov	r2, r3
   15df0:	mov	r1, lr
   15df4:	pop	{r4, lr}
   15df8:	b	1486c <test_print@@Base+0x1120>

00015dfc <flatcc_json_printer_string_field@@Base>:
   15dfc:	push	{r4, r5, r6, r7, r8, lr}
   15e00:	mov	r5, r1
   15e04:	mov	r4, r0
   15e08:	mov	r1, r2
   15e0c:	mov	r0, r5
   15e10:	mov	r7, r3
   15e14:	bl	147ec <test_print@@Base+0x10a0>
   15e18:	ldr	r8, [sp, #24]
   15e1c:	subs	r6, r0, #0
   15e20:	popeq	{r4, r5, r6, r7, r8, pc}
   15e24:	ldr	r2, [r5, #16]
   15e28:	mov	r1, r7
   15e2c:	cmp	r2, #0
   15e30:	add	r3, r2, #1
   15e34:	ldrne	r2, [r4, #20]
   15e38:	str	r3, [r5, #16]
   15e3c:	addne	r3, r2, #1
   15e40:	strne	r3, [r4, #20]
   15e44:	movne	r3, #44	; 0x2c
   15e48:	mov	r0, r4
   15e4c:	strbne	r3, [r2]
   15e50:	mov	r2, r8
   15e54:	bl	14d7c <test_print@@Base+0x1630>
   15e58:	ldr	r1, [r6]
   15e5c:	mov	r0, r4
   15e60:	add	r1, r6, r1
   15e64:	pop	{r4, r5, r6, r7, r8, lr}
   15e68:	b	14ac8 <test_print@@Base+0x137c>

00015e6c <flatcc_json_printer_uint8_vector_base64_field@@Base>:
   15e6c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   15e70:	mov	r6, r1
   15e74:	mov	r4, r0
   15e78:	mov	r1, r2
   15e7c:	mov	r0, r6
   15e80:	mov	r9, r3
   15e84:	bl	147ec <test_print@@Base+0x10a0>
   15e88:	ldr	r7, [sp, #44]	; 0x2c
   15e8c:	adds	r7, r7, #0
   15e90:	movne	r7, #1
   15e94:	subs	r5, r0, #0
   15e98:	beq	15f70 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x104>
   15e9c:	ldr	r2, [r6, #16]
   15ea0:	mov	r1, r9
   15ea4:	cmp	r2, #0
   15ea8:	add	r3, r2, #1
   15eac:	ldrne	r2, [r4, #20]
   15eb0:	str	r3, [r6, #16]
   15eb4:	addne	r3, r2, #1
   15eb8:	strne	r3, [r4, #20]
   15ebc:	movne	r3, #44	; 0x2c
   15ec0:	strbne	r3, [r2]
   15ec4:	mov	r0, r4
   15ec8:	ldr	r2, [sp, #40]	; 0x28
   15ecc:	bl	14d7c <test_print@@Base+0x1630>
   15ed0:	ldr	r3, [r5]
   15ed4:	orr	r8, r7, #128	; 0x80
   15ed8:	add	r6, r5, r3
   15edc:	ldr	r3, [r5, r3]
   15ee0:	mov	r1, r8
   15ee4:	str	r3, [sp]
   15ee8:	ldr	r3, [r4, #20]
   15eec:	add	r6, r6, #4
   15ef0:	add	r2, r3, #1
   15ef4:	str	r2, [r4, #20]
   15ef8:	mov	r2, #34	; 0x22
   15efc:	strb	r2, [r3]
   15f00:	ldr	r0, [sp]
   15f04:	bl	1479c <test_print@@Base+0x1050>
   15f08:	ldr	r3, [r4, #20]
   15f0c:	ldr	r2, [r4, #16]
   15f10:	add	r3, r3, r0
   15f14:	cmp	r2, r3
   15f18:	mov	sl, r0
   15f1c:	bhi	15f30 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc4>
   15f20:	ldr	r3, [r4, #44]	; 0x2c
   15f24:	mov	r1, #0
   15f28:	mov	r0, r4
   15f2c:	blx	r3
   15f30:	mov	r9, #0
   15f34:	ldr	r0, [r4, #20]
   15f38:	ldr	r5, [r4, #16]
   15f3c:	add	r3, r0, sl
   15f40:	cmp	r5, r3
   15f44:	bcc	15f78 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x10c>
   15f48:	mov	r3, r8
   15f4c:	mov	r2, sp
   15f50:	mov	r1, r6
   15f54:	bl	1514c <test_print@@Base+0x1a00>
   15f58:	ldr	r2, [r4, #20]
   15f5c:	add	r3, r2, sl
   15f60:	add	r3, r3, #1
   15f64:	str	r3, [r4, #20]
   15f68:	mov	r3, #34	; 0x22
   15f6c:	strb	r3, [r2, sl]
   15f70:	add	sp, sp, #8
   15f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15f78:	sub	r5, r5, r0
   15f7c:	bic	r5, r5, #3
   15f80:	add	sl, r5, r5, lsl #1
   15f84:	lsrs	sl, sl, #2
   15f88:	bne	15fa0 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x134>
   15f8c:	ldr	r3, [pc, #96]	; 15ff4 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x188>
   15f90:	ldr	r2, [pc, #96]	; 15ff8 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x18c>
   15f94:	ldr	r1, [pc, #96]	; 15ffc <flatcc_json_printer_uint8_vector_base64_field@@Base+0x190>
   15f98:	ldr	r0, [pc, #96]	; 16000 <flatcc_json_printer_uint8_vector_base64_field@@Base+0x194>
   15f9c:	bl	1255c <__assert_fail@plt>
   15fa0:	add	r2, sp, #4
   15fa4:	mov	r1, r6
   15fa8:	mov	r3, r7
   15fac:	str	sl, [sp, #4]
   15fb0:	bl	1514c <test_print@@Base+0x1a00>
   15fb4:	ldr	r3, [r4, #20]
   15fb8:	add	r6, r6, sl
   15fbc:	add	r5, r3, r5
   15fc0:	ldr	r3, [sp]
   15fc4:	mov	r1, r9
   15fc8:	sub	sl, r3, sl
   15fcc:	str	sl, [sp]
   15fd0:	ldr	r3, [r4, #44]	; 0x2c
   15fd4:	mov	r0, r4
   15fd8:	str	r5, [r4, #20]
   15fdc:	blx	r3
   15fe0:	mov	r1, r8
   15fe4:	ldr	r0, [sp]
   15fe8:	bl	1479c <test_print@@Base+0x1050>
   15fec:	mov	sl, r0
   15ff0:	b	15f34 <flatcc_json_printer_uint8_vector_base64_field@@Base+0xc8>
   15ff4:	andeq	fp, r1, ip, ror #24
   15ff8:	andeq	r0, r0, r5, lsl r1
   15ffc:	andeq	fp, r1, ip, asr #26
   16000:	strdeq	fp, [r1], -sl

00016004 <flatcc_json_printer_uint8_field@@Base>:
   16004:	push	{r4, r5, r6, r7, r8, lr}
   16008:	mov	r6, r1
   1600c:	mov	r4, r0
   16010:	mov	r1, r2
   16014:	mov	r0, r6
   16018:	mov	r8, r3
   1601c:	bl	147ec <test_print@@Base+0x10a0>
   16020:	ldrb	r7, [sp, #28]
   16024:	cmp	r0, #0
   16028:	beq	16048 <flatcc_json_printer_uint8_field@@Base+0x44>
   1602c:	ldrb	r5, [r0]
   16030:	cmp	r5, r7
   16034:	bne	16058 <flatcc_json_printer_uint8_field@@Base+0x54>
   16038:	ldrb	r3, [r4, #28]
   1603c:	cmp	r3, #0
   16040:	beq	16058 <flatcc_json_printer_uint8_field@@Base+0x54>
   16044:	pop	{r4, r5, r6, r7, r8, pc}
   16048:	ldrb	r3, [r4, #29]
   1604c:	cmp	r3, #0
   16050:	popeq	{r4, r5, r6, r7, r8, pc}
   16054:	mov	r5, r7
   16058:	ldr	r2, [r6, #16]
   1605c:	mov	r1, r8
   16060:	cmp	r2, #0
   16064:	add	r3, r2, #1
   16068:	ldrne	r2, [r4, #20]
   1606c:	str	r3, [r6, #16]
   16070:	addne	r3, r2, #1
   16074:	strne	r3, [r4, #20]
   16078:	movne	r3, #44	; 0x2c
   1607c:	strbne	r3, [r2]
   16080:	mov	r0, r4
   16084:	ldr	r2, [sp, #24]
   16088:	bl	14d7c <test_print@@Base+0x1630>
   1608c:	ldr	r1, [r4, #20]
   16090:	mov	r0, r5
   16094:	bl	14e00 <test_print@@Base+0x16b4>
   16098:	ldr	r3, [r4, #20]
   1609c:	add	r0, r3, r0
   160a0:	str	r0, [r4, #20]
   160a4:	pop	{r4, r5, r6, r7, r8, pc}

000160a8 <flatcc_json_printer_uint16_field@@Base>:
   160a8:	push	{r4, r5, r6, r7, r8, lr}
   160ac:	mov	r6, r1
   160b0:	mov	r4, r0
   160b4:	mov	r1, r2
   160b8:	mov	r0, r6
   160bc:	mov	r8, r3
   160c0:	bl	147ec <test_print@@Base+0x10a0>
   160c4:	ldrh	r7, [sp, #28]
   160c8:	cmp	r0, #0
   160cc:	beq	160ec <flatcc_json_printer_uint16_field@@Base+0x44>
   160d0:	ldrh	r5, [r0]
   160d4:	cmp	r5, r7
   160d8:	bne	160fc <flatcc_json_printer_uint16_field@@Base+0x54>
   160dc:	ldrb	r3, [r4, #28]
   160e0:	cmp	r3, #0
   160e4:	beq	160fc <flatcc_json_printer_uint16_field@@Base+0x54>
   160e8:	pop	{r4, r5, r6, r7, r8, pc}
   160ec:	ldrb	r3, [r4, #29]
   160f0:	cmp	r3, #0
   160f4:	popeq	{r4, r5, r6, r7, r8, pc}
   160f8:	mov	r5, r7
   160fc:	ldr	r2, [r6, #16]
   16100:	mov	r1, r8
   16104:	cmp	r2, #0
   16108:	add	r3, r2, #1
   1610c:	ldrne	r2, [r4, #20]
   16110:	str	r3, [r6, #16]
   16114:	addne	r3, r2, #1
   16118:	strne	r3, [r4, #20]
   1611c:	movne	r3, #44	; 0x2c
   16120:	strbne	r3, [r2]
   16124:	mov	r0, r4
   16128:	ldr	r2, [sp, #24]
   1612c:	bl	14d7c <test_print@@Base+0x1630>
   16130:	ldr	r1, [r4, #20]
   16134:	mov	r0, r5
   16138:	bl	139a0 <test_print@@Base+0x254>
   1613c:	ldr	r3, [r4, #20]
   16140:	add	r0, r3, r0
   16144:	str	r0, [r4, #20]
   16148:	pop	{r4, r5, r6, r7, r8, pc}

0001614c <flatcc_json_printer_uint32_field@@Base>:
   1614c:	push	{r4, r5, r6, r7, r8, lr}
   16150:	mov	r6, r1
   16154:	mov	r4, r0
   16158:	mov	r1, r2
   1615c:	mov	r0, r6
   16160:	mov	r8, r3
   16164:	bl	147ec <test_print@@Base+0x10a0>
   16168:	ldr	r7, [sp, #28]
   1616c:	cmp	r0, #0
   16170:	beq	16190 <flatcc_json_printer_uint32_field@@Base+0x44>
   16174:	ldr	r5, [r0]
   16178:	cmp	r5, r7
   1617c:	bne	161a0 <flatcc_json_printer_uint32_field@@Base+0x54>
   16180:	ldrb	r3, [r4, #28]
   16184:	cmp	r3, #0
   16188:	beq	161a0 <flatcc_json_printer_uint32_field@@Base+0x54>
   1618c:	pop	{r4, r5, r6, r7, r8, pc}
   16190:	ldrb	r3, [r4, #29]
   16194:	cmp	r3, #0
   16198:	popeq	{r4, r5, r6, r7, r8, pc}
   1619c:	mov	r5, r7
   161a0:	ldr	r2, [r6, #16]
   161a4:	mov	r1, r8
   161a8:	cmp	r2, #0
   161ac:	add	r3, r2, #1
   161b0:	ldrne	r2, [r4, #20]
   161b4:	str	r3, [r6, #16]
   161b8:	addne	r3, r2, #1
   161bc:	strne	r3, [r4, #20]
   161c0:	movne	r3, #44	; 0x2c
   161c4:	strbne	r3, [r2]
   161c8:	mov	r0, r4
   161cc:	ldr	r2, [sp, #24]
   161d0:	bl	14d7c <test_print@@Base+0x1630>
   161d4:	ldr	r1, [r4, #20]
   161d8:	mov	r0, r5
   161dc:	bl	13b20 <test_print@@Base+0x3d4>
   161e0:	ldr	r3, [r4, #20]
   161e4:	add	r0, r3, r0
   161e8:	str	r0, [r4, #20]
   161ec:	pop	{r4, r5, r6, r7, r8, pc}

000161f0 <flatcc_json_printer_uint64_field@@Base>:
   161f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   161f4:	mov	r5, r1
   161f8:	mov	r4, r0
   161fc:	mov	r1, r2
   16200:	mov	r0, r5
   16204:	mov	sl, r3
   16208:	bl	147ec <test_print@@Base+0x10a0>
   1620c:	ldrd	r8, [sp, #40]	; 0x28
   16210:	cmp	r0, #0
   16214:	beq	16238 <flatcc_json_printer_uint64_field@@Base+0x48>
   16218:	ldrd	r6, [r0]
   1621c:	cmp	r7, r9
   16220:	cmpeq	r6, r8
   16224:	bne	1624c <flatcc_json_printer_uint64_field@@Base+0x5c>
   16228:	ldrb	r3, [r4, #28]
   1622c:	cmp	r3, #0
   16230:	beq	1624c <flatcc_json_printer_uint64_field@@Base+0x5c>
   16234:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16238:	ldrb	r3, [r4, #29]
   1623c:	cmp	r3, #0
   16240:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16244:	mov	r6, r8
   16248:	mov	r7, r9
   1624c:	ldr	r2, [r5, #16]
   16250:	mov	r1, sl
   16254:	cmp	r2, #0
   16258:	add	r3, r2, #1
   1625c:	ldrne	r2, [r4, #20]
   16260:	str	r3, [r5, #16]
   16264:	addne	r3, r2, #1
   16268:	strne	r3, [r4, #20]
   1626c:	movne	r3, #44	; 0x2c
   16270:	strbne	r3, [r2]
   16274:	mov	r0, r4
   16278:	ldr	r2, [sp, #32]
   1627c:	bl	14d7c <test_print@@Base+0x1630>
   16280:	ldr	r2, [r4, #20]
   16284:	mov	r0, r6
   16288:	mov	r1, r7
   1628c:	bl	13e7c <test_print@@Base+0x730>
   16290:	ldr	r3, [r4, #20]
   16294:	add	r0, r3, r0
   16298:	str	r0, [r4, #20]
   1629c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

000162a0 <flatcc_json_printer_int8_field@@Base>:
   162a0:	push	{r4, r5, r6, r7, r8, lr}
   162a4:	mov	r6, r1
   162a8:	mov	r4, r0
   162ac:	mov	r1, r2
   162b0:	mov	r0, r6
   162b4:	mov	r8, r3
   162b8:	bl	147ec <test_print@@Base+0x10a0>
   162bc:	ldrsb	r7, [sp, #28]
   162c0:	cmp	r0, #0
   162c4:	beq	162e4 <flatcc_json_printer_int8_field@@Base+0x44>
   162c8:	ldrsb	r5, [r0]
   162cc:	cmp	r5, r7
   162d0:	bne	162f4 <flatcc_json_printer_int8_field@@Base+0x54>
   162d4:	ldrb	r3, [r4, #28]
   162d8:	cmp	r3, #0
   162dc:	beq	162f4 <flatcc_json_printer_int8_field@@Base+0x54>
   162e0:	pop	{r4, r5, r6, r7, r8, pc}
   162e4:	ldrb	r3, [r4, #29]
   162e8:	cmp	r3, #0
   162ec:	popeq	{r4, r5, r6, r7, r8, pc}
   162f0:	mov	r5, r7
   162f4:	ldr	r2, [r6, #16]
   162f8:	mov	r1, r8
   162fc:	cmp	r2, #0
   16300:	add	r3, r2, #1
   16304:	ldrne	r2, [r4, #20]
   16308:	str	r3, [r6, #16]
   1630c:	addne	r3, r2, #1
   16310:	strne	r3, [r4, #20]
   16314:	movne	r3, #44	; 0x2c
   16318:	strbne	r3, [r2]
   1631c:	mov	r0, r4
   16320:	ldr	r2, [sp, #24]
   16324:	bl	14d7c <test_print@@Base+0x1630>
   16328:	ldr	r1, [r4, #20]
   1632c:	mov	r0, r5
   16330:	bl	14ea4 <test_print@@Base+0x1758>
   16334:	ldr	r3, [r4, #20]
   16338:	add	r0, r3, r0
   1633c:	str	r0, [r4, #20]
   16340:	pop	{r4, r5, r6, r7, r8, pc}

00016344 <flatcc_json_printer_int16_field@@Base>:
   16344:	push	{r4, r5, r6, r7, r8, lr}
   16348:	mov	r6, r1
   1634c:	mov	r4, r0
   16350:	mov	r1, r2
   16354:	mov	r0, r6
   16358:	mov	r8, r3
   1635c:	bl	147ec <test_print@@Base+0x10a0>
   16360:	ldrsh	r7, [sp, #28]
   16364:	cmp	r0, #0
   16368:	beq	16388 <flatcc_json_printer_int16_field@@Base+0x44>
   1636c:	ldrsh	r5, [r0]
   16370:	cmp	r5, r7
   16374:	bne	16398 <flatcc_json_printer_int16_field@@Base+0x54>
   16378:	ldrb	r3, [r4, #28]
   1637c:	cmp	r3, #0
   16380:	beq	16398 <flatcc_json_printer_int16_field@@Base+0x54>
   16384:	pop	{r4, r5, r6, r7, r8, pc}
   16388:	ldrb	r3, [r4, #29]
   1638c:	cmp	r3, #0
   16390:	popeq	{r4, r5, r6, r7, r8, pc}
   16394:	mov	r5, r7
   16398:	ldr	r2, [r6, #16]
   1639c:	mov	r1, r8
   163a0:	cmp	r2, #0
   163a4:	add	r3, r2, #1
   163a8:	ldrne	r2, [r4, #20]
   163ac:	str	r3, [r6, #16]
   163b0:	addne	r3, r2, #1
   163b4:	strne	r3, [r4, #20]
   163b8:	movne	r3, #44	; 0x2c
   163bc:	strbne	r3, [r2]
   163c0:	mov	r0, r4
   163c4:	ldr	r2, [sp, #24]
   163c8:	bl	14d7c <test_print@@Base+0x1630>
   163cc:	ldr	r1, [r4, #20]
   163d0:	mov	r0, r5
   163d4:	bl	144ec <test_print@@Base+0xda0>
   163d8:	ldr	r3, [r4, #20]
   163dc:	add	r0, r3, r0
   163e0:	str	r0, [r4, #20]
   163e4:	pop	{r4, r5, r6, r7, r8, pc}

000163e8 <flatcc_json_printer_int32_field@@Base>:
   163e8:	push	{r4, r5, r6, r7, r8, lr}
   163ec:	mov	r6, r1
   163f0:	mov	r4, r0
   163f4:	mov	r1, r2
   163f8:	mov	r0, r6
   163fc:	mov	r8, r3
   16400:	bl	147ec <test_print@@Base+0x10a0>
   16404:	ldr	r7, [sp, #28]
   16408:	cmp	r0, #0
   1640c:	beq	1642c <flatcc_json_printer_int32_field@@Base+0x44>
   16410:	ldr	r5, [r0]
   16414:	cmp	r5, r7
   16418:	bne	1643c <flatcc_json_printer_int32_field@@Base+0x54>
   1641c:	ldrb	r3, [r4, #28]
   16420:	cmp	r3, #0
   16424:	beq	1643c <flatcc_json_printer_int32_field@@Base+0x54>
   16428:	pop	{r4, r5, r6, r7, r8, pc}
   1642c:	ldrb	r3, [r4, #29]
   16430:	cmp	r3, #0
   16434:	popeq	{r4, r5, r6, r7, r8, pc}
   16438:	mov	r5, r7
   1643c:	ldr	r2, [r6, #16]
   16440:	mov	r1, r8
   16444:	cmp	r2, #0
   16448:	add	r3, r2, #1
   1644c:	ldrne	r2, [r4, #20]
   16450:	str	r3, [r6, #16]
   16454:	addne	r3, r2, #1
   16458:	strne	r3, [r4, #20]
   1645c:	movne	r3, #44	; 0x2c
   16460:	strbne	r3, [r2]
   16464:	mov	r0, r4
   16468:	ldr	r2, [sp, #24]
   1646c:	bl	14d7c <test_print@@Base+0x1630>
   16470:	ldr	r1, [r4, #20]
   16474:	mov	r0, r5
   16478:	bl	1451c <test_print@@Base+0xdd0>
   1647c:	ldr	r3, [r4, #20]
   16480:	add	r0, r3, r0
   16484:	str	r0, [r4, #20]
   16488:	pop	{r4, r5, r6, r7, r8, pc}

0001648c <flatcc_json_printer_int64_field@@Base>:
   1648c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16490:	mov	r5, r1
   16494:	mov	r4, r0
   16498:	mov	r1, r2
   1649c:	mov	r0, r5
   164a0:	mov	sl, r3
   164a4:	bl	147ec <test_print@@Base+0x10a0>
   164a8:	ldrd	r8, [sp, #40]	; 0x28
   164ac:	cmp	r0, #0
   164b0:	beq	164d4 <flatcc_json_printer_int64_field@@Base+0x48>
   164b4:	ldrd	r6, [r0]
   164b8:	cmp	r7, r9
   164bc:	cmpeq	r6, r8
   164c0:	bne	164e8 <flatcc_json_printer_int64_field@@Base+0x5c>
   164c4:	ldrb	r3, [r4, #28]
   164c8:	cmp	r3, #0
   164cc:	beq	164e8 <flatcc_json_printer_int64_field@@Base+0x5c>
   164d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   164d4:	ldrb	r3, [r4, #29]
   164d8:	cmp	r3, #0
   164dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   164e0:	mov	r6, r8
   164e4:	mov	r7, r9
   164e8:	ldr	r2, [r5, #16]
   164ec:	mov	r1, sl
   164f0:	cmp	r2, #0
   164f4:	add	r3, r2, #1
   164f8:	ldrne	r2, [r4, #20]
   164fc:	str	r3, [r5, #16]
   16500:	addne	r3, r2, #1
   16504:	strne	r3, [r4, #20]
   16508:	movne	r3, #44	; 0x2c
   1650c:	strbne	r3, [r2]
   16510:	mov	r0, r4
   16514:	ldr	r2, [sp, #32]
   16518:	bl	14d7c <test_print@@Base+0x1630>
   1651c:	ldr	r2, [r4, #20]
   16520:	mov	r0, r6
   16524:	mov	r1, r7
   16528:	bl	14544 <test_print@@Base+0xdf8>
   1652c:	ldr	r3, [r4, #20]
   16530:	add	r0, r3, r0
   16534:	str	r0, [r4, #20]
   16538:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001653c <flatcc_json_printer_bool_field@@Base>:
   1653c:	push	{r4, r5, r6, r7, r8, lr}
   16540:	mov	r6, r1
   16544:	mov	r4, r0
   16548:	mov	r1, r2
   1654c:	mov	r0, r6
   16550:	mov	r8, r3
   16554:	bl	147ec <test_print@@Base+0x10a0>
   16558:	ldrb	r7, [sp, #28]
   1655c:	cmp	r0, #0
   16560:	beq	16580 <flatcc_json_printer_bool_field@@Base+0x44>
   16564:	ldrb	r5, [r0]
   16568:	cmp	r5, r7
   1656c:	bne	16590 <flatcc_json_printer_bool_field@@Base+0x54>
   16570:	ldrb	r3, [r4, #28]
   16574:	cmp	r3, #0
   16578:	beq	16590 <flatcc_json_printer_bool_field@@Base+0x54>
   1657c:	pop	{r4, r5, r6, r7, r8, pc}
   16580:	ldrb	r3, [r4, #29]
   16584:	cmp	r3, #0
   16588:	popeq	{r4, r5, r6, r7, r8, pc}
   1658c:	mov	r5, r7
   16590:	ldr	r2, [r6, #16]
   16594:	mov	r1, r8
   16598:	cmp	r2, #0
   1659c:	add	r3, r2, #1
   165a0:	ldrne	r2, [r4, #20]
   165a4:	str	r3, [r6, #16]
   165a8:	addne	r3, r2, #1
   165ac:	strne	r3, [r4, #20]
   165b0:	movne	r3, #44	; 0x2c
   165b4:	strbne	r3, [r2]
   165b8:	mov	r0, r4
   165bc:	ldr	r2, [sp, #24]
   165c0:	bl	14d7c <test_print@@Base+0x1630>
   165c4:	ldr	r1, [r4, #20]
   165c8:	mov	r0, r5
   165cc:	bl	14f90 <test_print@@Base+0x1844>
   165d0:	ldr	r3, [r4, #20]
   165d4:	add	r0, r3, r0
   165d8:	str	r0, [r4, #20]
   165dc:	pop	{r4, r5, r6, r7, r8, pc}

000165e0 <flatcc_json_printer_float_field@@Base>:
   165e0:	push	{r4, r5, r6, lr}
   165e4:	mov	r5, r1
   165e8:	vpush	{d8}
   165ec:	mov	r4, r0
   165f0:	mov	r1, r2
   165f4:	mov	r0, r5
   165f8:	mov	r6, r3
   165fc:	bl	147ec <test_print@@Base+0x10a0>
   16600:	cmp	r0, #0
   16604:	beq	1662c <flatcc_json_printer_float_field@@Base+0x4c>
   16608:	vldr	s16, [r0]
   1660c:	vcmp.f32	s16, s0
   16610:	vmrs	APSR_nzcv, fpscr
   16614:	bne	1663c <flatcc_json_printer_float_field@@Base+0x5c>
   16618:	ldrb	r3, [r4, #28]
   1661c:	cmp	r3, #0
   16620:	beq	1663c <flatcc_json_printer_float_field@@Base+0x5c>
   16624:	vpop	{d8}
   16628:	pop	{r4, r5, r6, pc}
   1662c:	ldrb	r3, [r4, #29]
   16630:	cmp	r3, #0
   16634:	beq	16624 <flatcc_json_printer_float_field@@Base+0x44>
   16638:	vmov.f32	s16, s0
   1663c:	ldr	r2, [r5, #16]
   16640:	mov	r1, r6
   16644:	cmp	r2, #0
   16648:	add	r3, r2, #1
   1664c:	ldrne	r2, [r4, #20]
   16650:	str	r3, [r5, #16]
   16654:	addne	r3, r2, #1
   16658:	strne	r3, [r4, #20]
   1665c:	movne	r3, #44	; 0x2c
   16660:	strbne	r3, [r2]
   16664:	mov	r0, r4
   16668:	ldr	r2, [sp, #24]
   1666c:	bl	14d7c <test_print@@Base+0x1630>
   16670:	ldr	r0, [r4, #20]
   16674:	vcvt.f64.f32	d0, s16
   16678:	bl	152bc <test_print@@Base+0x1b70>
   1667c:	ldr	r3, [r4, #20]
   16680:	add	r0, r3, r0
   16684:	str	r0, [r4, #20]
   16688:	b	16624 <flatcc_json_printer_float_field@@Base+0x44>

0001668c <flatcc_json_printer_double_field@@Base>:
   1668c:	push	{r4, r5, r6, lr}
   16690:	mov	r5, r1
   16694:	vpush	{d8}
   16698:	mov	r4, r0
   1669c:	mov	r1, r2
   166a0:	mov	r0, r5
   166a4:	mov	r6, r3
   166a8:	bl	147ec <test_print@@Base+0x10a0>
   166ac:	cmp	r0, #0
   166b0:	beq	166d8 <flatcc_json_printer_double_field@@Base+0x4c>
   166b4:	vldr	d8, [r0]
   166b8:	vcmp.f64	d8, d0
   166bc:	vmrs	APSR_nzcv, fpscr
   166c0:	bne	166e8 <flatcc_json_printer_double_field@@Base+0x5c>
   166c4:	ldrb	r3, [r4, #28]
   166c8:	cmp	r3, #0
   166cc:	beq	166e8 <flatcc_json_printer_double_field@@Base+0x5c>
   166d0:	vpop	{d8}
   166d4:	pop	{r4, r5, r6, pc}
   166d8:	ldrb	r3, [r4, #29]
   166dc:	cmp	r3, #0
   166e0:	beq	166d0 <flatcc_json_printer_double_field@@Base+0x44>
   166e4:	vmov.f64	d8, d0
   166e8:	ldr	r2, [r5, #16]
   166ec:	mov	r1, r6
   166f0:	cmp	r2, #0
   166f4:	add	r3, r2, #1
   166f8:	ldrne	r2, [r4, #20]
   166fc:	str	r3, [r5, #16]
   16700:	addne	r3, r2, #1
   16704:	strne	r3, [r4, #20]
   16708:	movne	r3, #44	; 0x2c
   1670c:	strbne	r3, [r2]
   16710:	mov	r0, r4
   16714:	ldr	r2, [sp, #24]
   16718:	bl	14d7c <test_print@@Base+0x1630>
   1671c:	ldr	r0, [r4, #20]
   16720:	vmov.f64	d0, d8
   16724:	bl	152bc <test_print@@Base+0x1b70>
   16728:	ldr	r3, [r4, #20]
   1672c:	add	r0, r3, r0
   16730:	str	r0, [r4, #20]
   16734:	b	166d0 <flatcc_json_printer_double_field@@Base+0x44>

00016738 <flatcc_json_printer_uint8_enum_field@@Base>:
   16738:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1673c:	mov	r6, r1
   16740:	mov	r4, r0
   16744:	mov	r1, r2
   16748:	mov	r0, r6
   1674c:	mov	r9, r3
   16750:	bl	147ec <test_print@@Base+0x10a0>
   16754:	ldr	sl, [sp, #32]
   16758:	ldrb	r7, [sp, #36]	; 0x24
   1675c:	ldr	r8, [sp, #40]	; 0x28
   16760:	cmp	r0, #0
   16764:	beq	16784 <flatcc_json_printer_uint8_enum_field@@Base+0x4c>
   16768:	ldrb	r5, [r0]
   1676c:	cmp	r5, r7
   16770:	bne	16794 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   16774:	ldrb	r3, [r4, #28]
   16778:	cmp	r3, #0
   1677c:	beq	16794 <flatcc_json_printer_uint8_enum_field@@Base+0x5c>
   16780:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16784:	ldrb	r3, [r4, #29]
   16788:	cmp	r3, #0
   1678c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16790:	mov	r5, r7
   16794:	ldr	r2, [r6, #16]
   16798:	mov	r1, r9
   1679c:	cmp	r2, #0
   167a0:	add	r3, r2, #1
   167a4:	ldrne	r2, [r4, #20]
   167a8:	str	r3, [r6, #16]
   167ac:	addne	r3, r2, #1
   167b0:	strne	r3, [r4, #20]
   167b4:	movne	r3, #44	; 0x2c
   167b8:	strbne	r3, [r2]
   167bc:	mov	r0, r4
   167c0:	mov	r2, sl
   167c4:	bl	14d7c <test_print@@Base+0x1630>
   167c8:	ldrb	r3, [r4, #27]
   167cc:	cmp	r3, #0
   167d0:	beq	167f0 <flatcc_json_printer_uint8_enum_field@@Base+0xb8>
   167d4:	ldr	r1, [r4, #20]
   167d8:	mov	r0, r5
   167dc:	bl	14e00 <test_print@@Base+0x16b4>
   167e0:	ldr	r3, [r4, #20]
   167e4:	add	r0, r3, r0
   167e8:	str	r0, [r4, #20]
   167ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167f0:	mov	r1, r5
   167f4:	mov	r0, r4
   167f8:	mov	r3, r8
   167fc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16800:	bx	r3

00016804 <flatcc_json_printer_uint16_enum_field@@Base>:
   16804:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16808:	mov	r6, r1
   1680c:	mov	r4, r0
   16810:	mov	r1, r2
   16814:	mov	r0, r6
   16818:	mov	r9, r3
   1681c:	bl	147ec <test_print@@Base+0x10a0>
   16820:	ldr	sl, [sp, #32]
   16824:	ldrh	r7, [sp, #36]	; 0x24
   16828:	ldr	r8, [sp, #40]	; 0x28
   1682c:	cmp	r0, #0
   16830:	beq	16850 <flatcc_json_printer_uint16_enum_field@@Base+0x4c>
   16834:	ldrh	r5, [r0]
   16838:	cmp	r5, r7
   1683c:	bne	16860 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   16840:	ldrb	r3, [r4, #28]
   16844:	cmp	r3, #0
   16848:	beq	16860 <flatcc_json_printer_uint16_enum_field@@Base+0x5c>
   1684c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16850:	ldrb	r3, [r4, #29]
   16854:	cmp	r3, #0
   16858:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1685c:	mov	r5, r7
   16860:	ldr	r2, [r6, #16]
   16864:	mov	r1, r9
   16868:	cmp	r2, #0
   1686c:	add	r3, r2, #1
   16870:	ldrne	r2, [r4, #20]
   16874:	str	r3, [r6, #16]
   16878:	addne	r3, r2, #1
   1687c:	strne	r3, [r4, #20]
   16880:	movne	r3, #44	; 0x2c
   16884:	strbne	r3, [r2]
   16888:	mov	r0, r4
   1688c:	mov	r2, sl
   16890:	bl	14d7c <test_print@@Base+0x1630>
   16894:	ldrb	r3, [r4, #27]
   16898:	cmp	r3, #0
   1689c:	beq	168bc <flatcc_json_printer_uint16_enum_field@@Base+0xb8>
   168a0:	ldr	r1, [r4, #20]
   168a4:	mov	r0, r5
   168a8:	bl	139a0 <test_print@@Base+0x254>
   168ac:	ldr	r3, [r4, #20]
   168b0:	add	r0, r3, r0
   168b4:	str	r0, [r4, #20]
   168b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   168bc:	mov	r1, r5
   168c0:	mov	r0, r4
   168c4:	mov	r3, r8
   168c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   168cc:	bx	r3

000168d0 <flatcc_json_printer_uint32_enum_field@@Base>:
   168d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   168d4:	mov	r6, r1
   168d8:	mov	r4, r0
   168dc:	mov	r1, r2
   168e0:	mov	r0, r6
   168e4:	mov	r9, r3
   168e8:	bl	147ec <test_print@@Base+0x10a0>
   168ec:	ldr	sl, [sp, #32]
   168f0:	ldr	r7, [sp, #36]	; 0x24
   168f4:	ldr	r8, [sp, #40]	; 0x28
   168f8:	cmp	r0, #0
   168fc:	beq	1691c <flatcc_json_printer_uint32_enum_field@@Base+0x4c>
   16900:	ldr	r5, [r0]
   16904:	cmp	r5, r7
   16908:	bne	1692c <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   1690c:	ldrb	r3, [r4, #28]
   16910:	cmp	r3, #0
   16914:	beq	1692c <flatcc_json_printer_uint32_enum_field@@Base+0x5c>
   16918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1691c:	ldrb	r3, [r4, #29]
   16920:	cmp	r3, #0
   16924:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16928:	mov	r5, r7
   1692c:	ldr	r2, [r6, #16]
   16930:	mov	r1, r9
   16934:	cmp	r2, #0
   16938:	add	r3, r2, #1
   1693c:	ldrne	r2, [r4, #20]
   16940:	str	r3, [r6, #16]
   16944:	addne	r3, r2, #1
   16948:	strne	r3, [r4, #20]
   1694c:	movne	r3, #44	; 0x2c
   16950:	strbne	r3, [r2]
   16954:	mov	r0, r4
   16958:	mov	r2, sl
   1695c:	bl	14d7c <test_print@@Base+0x1630>
   16960:	ldrb	r3, [r4, #27]
   16964:	cmp	r3, #0
   16968:	beq	16988 <flatcc_json_printer_uint32_enum_field@@Base+0xb8>
   1696c:	ldr	r1, [r4, #20]
   16970:	mov	r0, r5
   16974:	bl	13b20 <test_print@@Base+0x3d4>
   16978:	ldr	r3, [r4, #20]
   1697c:	add	r0, r3, r0
   16980:	str	r0, [r4, #20]
   16984:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16988:	mov	r1, r5
   1698c:	mov	r0, r4
   16990:	mov	r3, r8
   16994:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16998:	bx	r3

0001699c <flatcc_json_printer_uint64_enum_field@@Base>:
   1699c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169a0:	mov	r5, r1
   169a4:	mov	fp, r3
   169a8:	ldr	r3, [sp, #64]	; 0x40
   169ac:	mov	r4, r0
   169b0:	mov	r1, r2
   169b4:	mov	r0, r5
   169b8:	str	r3, [sp, #4]
   169bc:	bl	147ec <test_print@@Base+0x10a0>
   169c0:	ldr	sl, [sp, #48]	; 0x30
   169c4:	ldrd	r8, [sp, #56]	; 0x38
   169c8:	cmp	r0, #0
   169cc:	beq	169f4 <flatcc_json_printer_uint64_enum_field@@Base+0x58>
   169d0:	ldrd	r6, [r0]
   169d4:	cmp	r7, r9
   169d8:	cmpeq	r6, r8
   169dc:	bne	16a08 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   169e0:	ldrb	r2, [r4, #28]
   169e4:	cmp	r2, #0
   169e8:	beq	16a08 <flatcc_json_printer_uint64_enum_field@@Base+0x6c>
   169ec:	add	sp, sp, #12
   169f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169f4:	ldrb	r2, [r4, #29]
   169f8:	cmp	r2, #0
   169fc:	beq	169ec <flatcc_json_printer_uint64_enum_field@@Base+0x50>
   16a00:	mov	r6, r8
   16a04:	mov	r7, r9
   16a08:	ldr	r2, [r5, #16]
   16a0c:	mov	r0, r4
   16a10:	cmp	r2, #0
   16a14:	add	r1, r2, #1
   16a18:	ldrne	r2, [r4, #20]
   16a1c:	str	r1, [r5, #16]
   16a20:	addne	r1, r2, #1
   16a24:	strne	r1, [r4, #20]
   16a28:	movne	r1, #44	; 0x2c
   16a2c:	strbne	r1, [r2]
   16a30:	mov	r2, sl
   16a34:	mov	r1, fp
   16a38:	bl	14d7c <test_print@@Base+0x1630>
   16a3c:	ldrb	r3, [r4, #27]
   16a40:	cmp	r3, #0
   16a44:	beq	16a68 <flatcc_json_printer_uint64_enum_field@@Base+0xcc>
   16a48:	ldr	r2, [r4, #20]
   16a4c:	mov	r0, r6
   16a50:	mov	r1, r7
   16a54:	bl	13e7c <test_print@@Base+0x730>
   16a58:	ldr	r3, [r4, #20]
   16a5c:	add	r0, r3, r0
   16a60:	str	r0, [r4, #20]
   16a64:	b	169ec <flatcc_json_printer_uint64_enum_field@@Base+0x50>
   16a68:	mov	r2, r6
   16a6c:	mov	r3, r7
   16a70:	mov	r0, r4
   16a74:	ldr	r1, [sp, #4]
   16a78:	add	sp, sp, #12
   16a7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16a80:	bx	r1

00016a84 <flatcc_json_printer_int8_enum_field@@Base>:
   16a84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16a88:	mov	r6, r1
   16a8c:	mov	r4, r0
   16a90:	mov	r1, r2
   16a94:	mov	r0, r6
   16a98:	mov	r9, r3
   16a9c:	bl	147ec <test_print@@Base+0x10a0>
   16aa0:	ldr	sl, [sp, #32]
   16aa4:	ldrsb	r7, [sp, #36]	; 0x24
   16aa8:	ldr	r8, [sp, #40]	; 0x28
   16aac:	cmp	r0, #0
   16ab0:	beq	16ad0 <flatcc_json_printer_int8_enum_field@@Base+0x4c>
   16ab4:	ldrsb	r5, [r0]
   16ab8:	cmp	r5, r7
   16abc:	bne	16ae0 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   16ac0:	ldrb	r3, [r4, #28]
   16ac4:	cmp	r3, #0
   16ac8:	beq	16ae0 <flatcc_json_printer_int8_enum_field@@Base+0x5c>
   16acc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ad0:	ldrb	r3, [r4, #29]
   16ad4:	cmp	r3, #0
   16ad8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16adc:	mov	r5, r7
   16ae0:	ldr	r2, [r6, #16]
   16ae4:	mov	r1, r9
   16ae8:	cmp	r2, #0
   16aec:	add	r3, r2, #1
   16af0:	ldrne	r2, [r4, #20]
   16af4:	str	r3, [r6, #16]
   16af8:	addne	r3, r2, #1
   16afc:	strne	r3, [r4, #20]
   16b00:	movne	r3, #44	; 0x2c
   16b04:	strbne	r3, [r2]
   16b08:	mov	r0, r4
   16b0c:	mov	r2, sl
   16b10:	bl	14d7c <test_print@@Base+0x1630>
   16b14:	ldrb	r3, [r4, #27]
   16b18:	cmp	r3, #0
   16b1c:	beq	16b3c <flatcc_json_printer_int8_enum_field@@Base+0xb8>
   16b20:	ldr	r1, [r4, #20]
   16b24:	mov	r0, r5
   16b28:	bl	14ea4 <test_print@@Base+0x1758>
   16b2c:	ldr	r3, [r4, #20]
   16b30:	add	r0, r3, r0
   16b34:	str	r0, [r4, #20]
   16b38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b3c:	mov	r1, r5
   16b40:	mov	r0, r4
   16b44:	mov	r3, r8
   16b48:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b4c:	bx	r3

00016b50 <flatcc_json_printer_int16_enum_field@@Base>:
   16b50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16b54:	mov	r6, r1
   16b58:	mov	r4, r0
   16b5c:	mov	r1, r2
   16b60:	mov	r0, r6
   16b64:	mov	r9, r3
   16b68:	bl	147ec <test_print@@Base+0x10a0>
   16b6c:	ldr	sl, [sp, #32]
   16b70:	ldrsh	r7, [sp, #36]	; 0x24
   16b74:	ldr	r8, [sp, #40]	; 0x28
   16b78:	cmp	r0, #0
   16b7c:	beq	16b9c <flatcc_json_printer_int16_enum_field@@Base+0x4c>
   16b80:	ldrsh	r5, [r0]
   16b84:	cmp	r5, r7
   16b88:	bne	16bac <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   16b8c:	ldrb	r3, [r4, #28]
   16b90:	cmp	r3, #0
   16b94:	beq	16bac <flatcc_json_printer_int16_enum_field@@Base+0x5c>
   16b98:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b9c:	ldrb	r3, [r4, #29]
   16ba0:	cmp	r3, #0
   16ba4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16ba8:	mov	r5, r7
   16bac:	ldr	r2, [r6, #16]
   16bb0:	mov	r1, r9
   16bb4:	cmp	r2, #0
   16bb8:	add	r3, r2, #1
   16bbc:	ldrne	r2, [r4, #20]
   16bc0:	str	r3, [r6, #16]
   16bc4:	addne	r3, r2, #1
   16bc8:	strne	r3, [r4, #20]
   16bcc:	movne	r3, #44	; 0x2c
   16bd0:	strbne	r3, [r2]
   16bd4:	mov	r0, r4
   16bd8:	mov	r2, sl
   16bdc:	bl	14d7c <test_print@@Base+0x1630>
   16be0:	ldrb	r3, [r4, #27]
   16be4:	cmp	r3, #0
   16be8:	beq	16c08 <flatcc_json_printer_int16_enum_field@@Base+0xb8>
   16bec:	ldr	r1, [r4, #20]
   16bf0:	mov	r0, r5
   16bf4:	bl	144ec <test_print@@Base+0xda0>
   16bf8:	ldr	r3, [r4, #20]
   16bfc:	add	r0, r3, r0
   16c00:	str	r0, [r4, #20]
   16c04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c08:	mov	r1, r5
   16c0c:	mov	r0, r4
   16c10:	mov	r3, r8
   16c14:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c18:	bx	r3

00016c1c <flatcc_json_printer_int32_enum_field@@Base>:
   16c1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16c20:	mov	r6, r1
   16c24:	mov	r4, r0
   16c28:	mov	r1, r2
   16c2c:	mov	r0, r6
   16c30:	mov	r9, r3
   16c34:	bl	147ec <test_print@@Base+0x10a0>
   16c38:	ldr	sl, [sp, #32]
   16c3c:	ldr	r7, [sp, #36]	; 0x24
   16c40:	ldr	r8, [sp, #40]	; 0x28
   16c44:	cmp	r0, #0
   16c48:	beq	16c68 <flatcc_json_printer_int32_enum_field@@Base+0x4c>
   16c4c:	ldr	r5, [r0]
   16c50:	cmp	r5, r7
   16c54:	bne	16c78 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   16c58:	ldrb	r3, [r4, #28]
   16c5c:	cmp	r3, #0
   16c60:	beq	16c78 <flatcc_json_printer_int32_enum_field@@Base+0x5c>
   16c64:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c68:	ldrb	r3, [r4, #29]
   16c6c:	cmp	r3, #0
   16c70:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16c74:	mov	r5, r7
   16c78:	ldr	r2, [r6, #16]
   16c7c:	mov	r1, r9
   16c80:	cmp	r2, #0
   16c84:	add	r3, r2, #1
   16c88:	ldrne	r2, [r4, #20]
   16c8c:	str	r3, [r6, #16]
   16c90:	addne	r3, r2, #1
   16c94:	strne	r3, [r4, #20]
   16c98:	movne	r3, #44	; 0x2c
   16c9c:	strbne	r3, [r2]
   16ca0:	mov	r0, r4
   16ca4:	mov	r2, sl
   16ca8:	bl	14d7c <test_print@@Base+0x1630>
   16cac:	ldrb	r3, [r4, #27]
   16cb0:	cmp	r3, #0
   16cb4:	beq	16cd4 <flatcc_json_printer_int32_enum_field@@Base+0xb8>
   16cb8:	ldr	r1, [r4, #20]
   16cbc:	mov	r0, r5
   16cc0:	bl	1451c <test_print@@Base+0xdd0>
   16cc4:	ldr	r3, [r4, #20]
   16cc8:	add	r0, r3, r0
   16ccc:	str	r0, [r4, #20]
   16cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16cd4:	mov	r1, r5
   16cd8:	mov	r0, r4
   16cdc:	mov	r3, r8
   16ce0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ce4:	bx	r3

00016ce8 <flatcc_json_printer_int64_enum_field@@Base>:
   16ce8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cec:	mov	r5, r1
   16cf0:	mov	fp, r3
   16cf4:	ldr	r3, [sp, #64]	; 0x40
   16cf8:	mov	r4, r0
   16cfc:	mov	r1, r2
   16d00:	mov	r0, r5
   16d04:	str	r3, [sp, #4]
   16d08:	bl	147ec <test_print@@Base+0x10a0>
   16d0c:	ldr	sl, [sp, #48]	; 0x30
   16d10:	ldrd	r8, [sp, #56]	; 0x38
   16d14:	cmp	r0, #0
   16d18:	beq	16d40 <flatcc_json_printer_int64_enum_field@@Base+0x58>
   16d1c:	ldrd	r6, [r0]
   16d20:	cmp	r7, r9
   16d24:	cmpeq	r6, r8
   16d28:	bne	16d54 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   16d2c:	ldrb	r2, [r4, #28]
   16d30:	cmp	r2, #0
   16d34:	beq	16d54 <flatcc_json_printer_int64_enum_field@@Base+0x6c>
   16d38:	add	sp, sp, #12
   16d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d40:	ldrb	r2, [r4, #29]
   16d44:	cmp	r2, #0
   16d48:	beq	16d38 <flatcc_json_printer_int64_enum_field@@Base+0x50>
   16d4c:	mov	r6, r8
   16d50:	mov	r7, r9
   16d54:	ldr	r2, [r5, #16]
   16d58:	mov	r0, r4
   16d5c:	cmp	r2, #0
   16d60:	add	r1, r2, #1
   16d64:	ldrne	r2, [r4, #20]
   16d68:	str	r1, [r5, #16]
   16d6c:	addne	r1, r2, #1
   16d70:	strne	r1, [r4, #20]
   16d74:	movne	r1, #44	; 0x2c
   16d78:	strbne	r1, [r2]
   16d7c:	mov	r2, sl
   16d80:	mov	r1, fp
   16d84:	bl	14d7c <test_print@@Base+0x1630>
   16d88:	ldrb	r3, [r4, #27]
   16d8c:	cmp	r3, #0
   16d90:	beq	16db4 <flatcc_json_printer_int64_enum_field@@Base+0xcc>
   16d94:	ldr	r2, [r4, #20]
   16d98:	mov	r0, r6
   16d9c:	mov	r1, r7
   16da0:	bl	14544 <test_print@@Base+0xdf8>
   16da4:	ldr	r3, [r4, #20]
   16da8:	add	r0, r3, r0
   16dac:	str	r0, [r4, #20]
   16db0:	b	16d38 <flatcc_json_printer_int64_enum_field@@Base+0x50>
   16db4:	mov	r2, r6
   16db8:	mov	r3, r7
   16dbc:	mov	r0, r4
   16dc0:	ldr	r1, [sp, #4]
   16dc4:	add	sp, sp, #12
   16dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dcc:	bx	r1

00016dd0 <flatcc_json_printer_bool_enum_field@@Base>:
   16dd0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16dd4:	mov	r6, r1
   16dd8:	mov	r4, r0
   16ddc:	mov	r1, r2
   16de0:	mov	r0, r6
   16de4:	mov	r9, r3
   16de8:	bl	147ec <test_print@@Base+0x10a0>
   16dec:	ldr	sl, [sp, #32]
   16df0:	ldrb	r7, [sp, #36]	; 0x24
   16df4:	ldr	r8, [sp, #40]	; 0x28
   16df8:	cmp	r0, #0
   16dfc:	beq	16e1c <flatcc_json_printer_bool_enum_field@@Base+0x4c>
   16e00:	ldrb	r5, [r0]
   16e04:	cmp	r5, r7
   16e08:	bne	16e2c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   16e0c:	ldrb	r3, [r4, #28]
   16e10:	cmp	r3, #0
   16e14:	beq	16e2c <flatcc_json_printer_bool_enum_field@@Base+0x5c>
   16e18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e1c:	ldrb	r3, [r4, #29]
   16e20:	cmp	r3, #0
   16e24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e28:	mov	r5, r7
   16e2c:	ldr	r2, [r6, #16]
   16e30:	mov	r1, r9
   16e34:	cmp	r2, #0
   16e38:	add	r3, r2, #1
   16e3c:	ldrne	r2, [r4, #20]
   16e40:	str	r3, [r6, #16]
   16e44:	addne	r3, r2, #1
   16e48:	strne	r3, [r4, #20]
   16e4c:	movne	r3, #44	; 0x2c
   16e50:	strbne	r3, [r2]
   16e54:	mov	r0, r4
   16e58:	mov	r2, sl
   16e5c:	bl	14d7c <test_print@@Base+0x1630>
   16e60:	ldrb	r3, [r4, #27]
   16e64:	cmp	r3, #0
   16e68:	beq	16e88 <flatcc_json_printer_bool_enum_field@@Base+0xb8>
   16e6c:	ldr	r1, [r4, #20]
   16e70:	mov	r0, r5
   16e74:	bl	14f90 <test_print@@Base+0x1844>
   16e78:	ldr	r3, [r4, #20]
   16e7c:	add	r0, r3, r0
   16e80:	str	r0, [r4, #20]
   16e84:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16e88:	mov	r1, r5
   16e8c:	mov	r0, r4
   16e90:	mov	r3, r8
   16e94:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   16e98:	bx	r3

00016e9c <flatcc_json_printer_uint8_struct_field@@Base>:
   16e9c:	cmp	r1, #0
   16ea0:	push	{r4, r5, r6, lr}
   16ea4:	mov	r4, r0
   16ea8:	ldrb	r5, [r2, r3]
   16eac:	ldrne	r3, [r0, #20]
   16eb0:	ldr	r1, [sp, #16]
   16eb4:	addne	r2, r3, #1
   16eb8:	strne	r2, [r0, #20]
   16ebc:	movne	r2, #44	; 0x2c
   16ec0:	strbne	r2, [r3]
   16ec4:	ldr	r2, [sp, #20]
   16ec8:	bl	14d7c <test_print@@Base+0x1630>
   16ecc:	ldr	r1, [r4, #20]
   16ed0:	mov	r0, r5
   16ed4:	bl	14e00 <test_print@@Base+0x16b4>
   16ed8:	ldr	r3, [r4, #20]
   16edc:	add	r0, r3, r0
   16ee0:	str	r0, [r4, #20]
   16ee4:	pop	{r4, r5, r6, pc}

00016ee8 <flatcc_json_printer_uint16_struct_field@@Base>:
   16ee8:	cmp	r1, #0
   16eec:	push	{r4, r5, r6, lr}
   16ef0:	mov	r4, r0
   16ef4:	ldrh	r5, [r2, r3]
   16ef8:	ldrne	r3, [r0, #20]
   16efc:	ldr	r1, [sp, #16]
   16f00:	addne	r2, r3, #1
   16f04:	strne	r2, [r0, #20]
   16f08:	movne	r2, #44	; 0x2c
   16f0c:	strbne	r2, [r3]
   16f10:	ldr	r2, [sp, #20]
   16f14:	bl	14d7c <test_print@@Base+0x1630>
   16f18:	ldr	r1, [r4, #20]
   16f1c:	mov	r0, r5
   16f20:	bl	139a0 <test_print@@Base+0x254>
   16f24:	ldr	r3, [r4, #20]
   16f28:	add	r0, r3, r0
   16f2c:	str	r0, [r4, #20]
   16f30:	pop	{r4, r5, r6, pc}

00016f34 <flatcc_json_printer_uint32_struct_field@@Base>:
   16f34:	cmp	r1, #0
   16f38:	push	{r4, r5, r6, lr}
   16f3c:	mov	r4, r0
   16f40:	ldr	r5, [r2, r3]
   16f44:	ldrne	r3, [r0, #20]
   16f48:	ldr	r1, [sp, #16]
   16f4c:	addne	r2, r3, #1
   16f50:	strne	r2, [r0, #20]
   16f54:	movne	r2, #44	; 0x2c
   16f58:	strbne	r2, [r3]
   16f5c:	ldr	r2, [sp, #20]
   16f60:	bl	14d7c <test_print@@Base+0x1630>
   16f64:	ldr	r1, [r4, #20]
   16f68:	mov	r0, r5
   16f6c:	bl	13b20 <test_print@@Base+0x3d4>
   16f70:	ldr	r3, [r4, #20]
   16f74:	add	r0, r3, r0
   16f78:	str	r0, [r4, #20]
   16f7c:	pop	{r4, r5, r6, pc}

00016f80 <flatcc_json_printer_uint64_struct_field@@Base>:
   16f80:	cmp	r1, #0
   16f84:	push	{r4, r6, r7, lr}
   16f88:	mov	r4, r0
   16f8c:	ldrd	r6, [r2, r3]
   16f90:	ldrne	r3, [r0, #20]
   16f94:	ldr	r1, [sp, #16]
   16f98:	addne	r2, r3, #1
   16f9c:	strne	r2, [r0, #20]
   16fa0:	movne	r2, #44	; 0x2c
   16fa4:	strbne	r2, [r3]
   16fa8:	ldr	r2, [sp, #20]
   16fac:	bl	14d7c <test_print@@Base+0x1630>
   16fb0:	ldr	r2, [r4, #20]
   16fb4:	mov	r0, r6
   16fb8:	mov	r1, r7
   16fbc:	bl	13e7c <test_print@@Base+0x730>
   16fc0:	ldr	r3, [r4, #20]
   16fc4:	add	r0, r3, r0
   16fc8:	str	r0, [r4, #20]
   16fcc:	pop	{r4, r6, r7, pc}

00016fd0 <flatcc_json_printer_int8_struct_field@@Base>:
   16fd0:	cmp	r1, #0
   16fd4:	push	{r4, r5, r6, lr}
   16fd8:	mov	r4, r0
   16fdc:	ldrsb	r5, [r2, r3]
   16fe0:	ldrne	r3, [r0, #20]
   16fe4:	ldr	r1, [sp, #16]
   16fe8:	addne	r2, r3, #1
   16fec:	strne	r2, [r0, #20]
   16ff0:	movne	r2, #44	; 0x2c
   16ff4:	strbne	r2, [r3]
   16ff8:	ldr	r2, [sp, #20]
   16ffc:	bl	14d7c <test_print@@Base+0x1630>
   17000:	ldr	r1, [r4, #20]
   17004:	mov	r0, r5
   17008:	bl	14ea4 <test_print@@Base+0x1758>
   1700c:	ldr	r3, [r4, #20]
   17010:	add	r0, r3, r0
   17014:	str	r0, [r4, #20]
   17018:	pop	{r4, r5, r6, pc}

0001701c <flatcc_json_printer_int16_struct_field@@Base>:
   1701c:	cmp	r1, #0
   17020:	push	{r4, r5, r6, lr}
   17024:	mov	r4, r0
   17028:	ldrsh	r5, [r2, r3]
   1702c:	ldrne	r3, [r0, #20]
   17030:	ldr	r1, [sp, #16]
   17034:	addne	r2, r3, #1
   17038:	strne	r2, [r0, #20]
   1703c:	movne	r2, #44	; 0x2c
   17040:	strbne	r2, [r3]
   17044:	ldr	r2, [sp, #20]
   17048:	bl	14d7c <test_print@@Base+0x1630>
   1704c:	ldr	r1, [r4, #20]
   17050:	mov	r0, r5
   17054:	bl	144ec <test_print@@Base+0xda0>
   17058:	ldr	r3, [r4, #20]
   1705c:	add	r0, r3, r0
   17060:	str	r0, [r4, #20]
   17064:	pop	{r4, r5, r6, pc}

00017068 <flatcc_json_printer_int32_struct_field@@Base>:
   17068:	cmp	r1, #0
   1706c:	push	{r4, r5, r6, lr}
   17070:	mov	r4, r0
   17074:	ldr	r5, [r2, r3]
   17078:	ldrne	r3, [r0, #20]
   1707c:	ldr	r1, [sp, #16]
   17080:	addne	r2, r3, #1
   17084:	strne	r2, [r0, #20]
   17088:	movne	r2, #44	; 0x2c
   1708c:	strbne	r2, [r3]
   17090:	ldr	r2, [sp, #20]
   17094:	bl	14d7c <test_print@@Base+0x1630>
   17098:	ldr	r1, [r4, #20]
   1709c:	mov	r0, r5
   170a0:	bl	1451c <test_print@@Base+0xdd0>
   170a4:	ldr	r3, [r4, #20]
   170a8:	add	r0, r3, r0
   170ac:	str	r0, [r4, #20]
   170b0:	pop	{r4, r5, r6, pc}

000170b4 <flatcc_json_printer_int64_struct_field@@Base>:
   170b4:	cmp	r1, #0
   170b8:	push	{r4, r6, r7, lr}
   170bc:	mov	r4, r0
   170c0:	ldrd	r6, [r2, r3]
   170c4:	ldrne	r3, [r0, #20]
   170c8:	ldr	r1, [sp, #16]
   170cc:	addne	r2, r3, #1
   170d0:	strne	r2, [r0, #20]
   170d4:	movne	r2, #44	; 0x2c
   170d8:	strbne	r2, [r3]
   170dc:	ldr	r2, [sp, #20]
   170e0:	bl	14d7c <test_print@@Base+0x1630>
   170e4:	ldr	r2, [r4, #20]
   170e8:	mov	r0, r6
   170ec:	mov	r1, r7
   170f0:	bl	14544 <test_print@@Base+0xdf8>
   170f4:	ldr	r3, [r4, #20]
   170f8:	add	r0, r3, r0
   170fc:	str	r0, [r4, #20]
   17100:	pop	{r4, r6, r7, pc}

00017104 <flatcc_json_printer_bool_struct_field@@Base>:
   17104:	cmp	r1, #0
   17108:	push	{r4, r5, r6, lr}
   1710c:	mov	r4, r0
   17110:	ldrb	r5, [r2, r3]
   17114:	ldrne	r3, [r0, #20]
   17118:	ldr	r1, [sp, #16]
   1711c:	addne	r2, r3, #1
   17120:	strne	r2, [r0, #20]
   17124:	movne	r2, #44	; 0x2c
   17128:	strbne	r2, [r3]
   1712c:	ldr	r2, [sp, #20]
   17130:	bl	14d7c <test_print@@Base+0x1630>
   17134:	ldr	r1, [r4, #20]
   17138:	mov	r0, r5
   1713c:	bl	14f90 <test_print@@Base+0x1844>
   17140:	ldr	r3, [r4, #20]
   17144:	add	r0, r3, r0
   17148:	str	r0, [r4, #20]
   1714c:	pop	{r4, r5, r6, pc}

00017150 <flatcc_json_printer_float_struct_field@@Base>:
   17150:	add	r3, r2, r3
   17154:	cmp	r1, #0
   17158:	push	{r4, lr}
   1715c:	vpush	{d8}
   17160:	vldr	s16, [r3]
   17164:	ldrne	r3, [r0, #20]
   17168:	mov	r4, r0
   1716c:	addne	r2, r3, #1
   17170:	strne	r2, [r0, #20]
   17174:	movne	r2, #44	; 0x2c
   17178:	strbne	r2, [r3]
   1717c:	ldr	r1, [sp, #16]
   17180:	ldr	r2, [sp, #20]
   17184:	bl	14d7c <test_print@@Base+0x1630>
   17188:	vcvt.f64.f32	d0, s16
   1718c:	ldr	r0, [r4, #20]
   17190:	bl	152bc <test_print@@Base+0x1b70>
   17194:	vpop	{d8}
   17198:	ldr	r3, [r4, #20]
   1719c:	add	r0, r3, r0
   171a0:	str	r0, [r4, #20]
   171a4:	pop	{r4, pc}

000171a8 <flatcc_json_printer_double_struct_field@@Base>:
   171a8:	add	r3, r2, r3
   171ac:	cmp	r1, #0
   171b0:	push	{r4, lr}
   171b4:	vpush	{d8}
   171b8:	vldr	d8, [r3]
   171bc:	ldrne	r3, [r0, #20]
   171c0:	mov	r4, r0
   171c4:	addne	r2, r3, #1
   171c8:	strne	r2, [r0, #20]
   171cc:	movne	r2, #44	; 0x2c
   171d0:	strbne	r2, [r3]
   171d4:	ldr	r1, [sp, #16]
   171d8:	ldr	r2, [sp, #20]
   171dc:	bl	14d7c <test_print@@Base+0x1630>
   171e0:	vmov.f64	d0, d8
   171e4:	ldr	r0, [r4, #20]
   171e8:	bl	152bc <test_print@@Base+0x1b70>
   171ec:	vpop	{d8}
   171f0:	ldr	r3, [r4, #20]
   171f4:	add	r0, r3, r0
   171f8:	str	r0, [r4, #20]
   171fc:	pop	{r4, pc}

00017200 <flatcc_json_printer_uint8_enum_struct_field@@Base>:
   17200:	cmp	r1, #0
   17204:	push	{r4, r5, r6, lr}
   17208:	mov	r4, r0
   1720c:	ldrb	r5, [r2, r3]
   17210:	ldrne	r3, [r4, #20]
   17214:	ldr	r0, [sp, #16]
   17218:	addne	r2, r3, #1
   1721c:	ldr	ip, [sp, #20]
   17220:	strne	r2, [r4, #20]
   17224:	movne	r2, #44	; 0x2c
   17228:	strbne	r2, [r3]
   1722c:	mov	r1, r0
   17230:	mov	r2, ip
   17234:	mov	r0, r4
   17238:	ldr	r6, [sp, #24]
   1723c:	bl	14d7c <test_print@@Base+0x1630>
   17240:	ldrb	r3, [r4, #27]
   17244:	cmp	r3, #0
   17248:	beq	17268 <flatcc_json_printer_uint8_enum_struct_field@@Base+0x68>
   1724c:	ldr	r1, [r4, #20]
   17250:	mov	r0, r5
   17254:	bl	14e00 <test_print@@Base+0x16b4>
   17258:	ldr	r3, [r4, #20]
   1725c:	add	r0, r3, r0
   17260:	str	r0, [r4, #20]
   17264:	pop	{r4, r5, r6, pc}
   17268:	mov	r1, r5
   1726c:	mov	r0, r4
   17270:	mov	r3, r6
   17274:	pop	{r4, r5, r6, lr}
   17278:	bx	r3

0001727c <flatcc_json_printer_uint16_enum_struct_field@@Base>:
   1727c:	cmp	r1, #0
   17280:	push	{r4, r5, r6, lr}
   17284:	mov	r4, r0
   17288:	ldrh	r5, [r2, r3]
   1728c:	ldrne	r3, [r4, #20]
   17290:	ldr	r0, [sp, #16]
   17294:	addne	r2, r3, #1
   17298:	ldr	ip, [sp, #20]
   1729c:	strne	r2, [r4, #20]
   172a0:	movne	r2, #44	; 0x2c
   172a4:	strbne	r2, [r3]
   172a8:	mov	r1, r0
   172ac:	mov	r2, ip
   172b0:	mov	r0, r4
   172b4:	ldr	r6, [sp, #24]
   172b8:	bl	14d7c <test_print@@Base+0x1630>
   172bc:	ldrb	r3, [r4, #27]
   172c0:	cmp	r3, #0
   172c4:	beq	172e4 <flatcc_json_printer_uint16_enum_struct_field@@Base+0x68>
   172c8:	ldr	r1, [r4, #20]
   172cc:	mov	r0, r5
   172d0:	bl	139a0 <test_print@@Base+0x254>
   172d4:	ldr	r3, [r4, #20]
   172d8:	add	r0, r3, r0
   172dc:	str	r0, [r4, #20]
   172e0:	pop	{r4, r5, r6, pc}
   172e4:	mov	r1, r5
   172e8:	mov	r0, r4
   172ec:	mov	r3, r6
   172f0:	pop	{r4, r5, r6, lr}
   172f4:	bx	r3

000172f8 <flatcc_json_printer_uint32_enum_struct_field@@Base>:
   172f8:	cmp	r1, #0
   172fc:	push	{r4, r5, r6, lr}
   17300:	mov	r4, r0
   17304:	ldr	r5, [r2, r3]
   17308:	ldrne	r3, [r4, #20]
   1730c:	ldr	r0, [sp, #16]
   17310:	addne	r2, r3, #1
   17314:	ldr	ip, [sp, #20]
   17318:	strne	r2, [r4, #20]
   1731c:	movne	r2, #44	; 0x2c
   17320:	strbne	r2, [r3]
   17324:	mov	r1, r0
   17328:	mov	r2, ip
   1732c:	mov	r0, r4
   17330:	ldr	r6, [sp, #24]
   17334:	bl	14d7c <test_print@@Base+0x1630>
   17338:	ldrb	r3, [r4, #27]
   1733c:	cmp	r3, #0
   17340:	beq	17360 <flatcc_json_printer_uint32_enum_struct_field@@Base+0x68>
   17344:	ldr	r1, [r4, #20]
   17348:	mov	r0, r5
   1734c:	bl	13b20 <test_print@@Base+0x3d4>
   17350:	ldr	r3, [r4, #20]
   17354:	add	r0, r3, r0
   17358:	str	r0, [r4, #20]
   1735c:	pop	{r4, r5, r6, pc}
   17360:	mov	r1, r5
   17364:	mov	r0, r4
   17368:	mov	r3, r6
   1736c:	pop	{r4, r5, r6, lr}
   17370:	bx	r3

00017374 <flatcc_json_printer_uint64_enum_struct_field@@Base>:
   17374:	cmp	r1, #0
   17378:	push	{r4, r5, r6, r7, r8, lr}
   1737c:	mov	r4, r0
   17380:	ldrd	r6, [r2, r3]
   17384:	ldrne	r3, [r4, #20]
   17388:	ldr	r0, [sp, #24]
   1738c:	addne	r2, r3, #1
   17390:	ldr	ip, [sp, #28]
   17394:	strne	r2, [r4, #20]
   17398:	movne	r2, #44	; 0x2c
   1739c:	strbne	r2, [r3]
   173a0:	mov	r1, r0
   173a4:	mov	r2, ip
   173a8:	mov	r0, r4
   173ac:	ldr	r5, [sp, #32]
   173b0:	bl	14d7c <test_print@@Base+0x1630>
   173b4:	ldrb	r3, [r4, #27]
   173b8:	cmp	r3, #0
   173bc:	beq	173e0 <flatcc_json_printer_uint64_enum_struct_field@@Base+0x6c>
   173c0:	ldr	r2, [r4, #20]
   173c4:	mov	r0, r6
   173c8:	mov	r1, r7
   173cc:	bl	13e7c <test_print@@Base+0x730>
   173d0:	ldr	r3, [r4, #20]
   173d4:	add	r0, r3, r0
   173d8:	str	r0, [r4, #20]
   173dc:	pop	{r4, r5, r6, r7, r8, pc}
   173e0:	mov	r2, r6
   173e4:	mov	r3, r7
   173e8:	mov	r0, r4
   173ec:	mov	r1, r5
   173f0:	pop	{r4, r5, r6, r7, r8, lr}
   173f4:	bx	r1

000173f8 <flatcc_json_printer_int8_enum_struct_field@@Base>:
   173f8:	cmp	r1, #0
   173fc:	push	{r4, r5, r6, lr}
   17400:	mov	r4, r0
   17404:	ldrsb	r5, [r2, r3]
   17408:	ldrne	r3, [r4, #20]
   1740c:	ldr	r0, [sp, #16]
   17410:	addne	r2, r3, #1
   17414:	ldr	ip, [sp, #20]
   17418:	strne	r2, [r4, #20]
   1741c:	movne	r2, #44	; 0x2c
   17420:	strbne	r2, [r3]
   17424:	mov	r1, r0
   17428:	mov	r2, ip
   1742c:	mov	r0, r4
   17430:	ldr	r6, [sp, #24]
   17434:	bl	14d7c <test_print@@Base+0x1630>
   17438:	ldrb	r3, [r4, #27]
   1743c:	cmp	r3, #0
   17440:	beq	17460 <flatcc_json_printer_int8_enum_struct_field@@Base+0x68>
   17444:	ldr	r1, [r4, #20]
   17448:	mov	r0, r5
   1744c:	bl	14ea4 <test_print@@Base+0x1758>
   17450:	ldr	r3, [r4, #20]
   17454:	add	r0, r3, r0
   17458:	str	r0, [r4, #20]
   1745c:	pop	{r4, r5, r6, pc}
   17460:	mov	r1, r5
   17464:	mov	r0, r4
   17468:	mov	r3, r6
   1746c:	pop	{r4, r5, r6, lr}
   17470:	bx	r3

00017474 <flatcc_json_printer_int16_enum_struct_field@@Base>:
   17474:	cmp	r1, #0
   17478:	push	{r4, r5, r6, lr}
   1747c:	mov	r4, r0
   17480:	ldrsh	r5, [r2, r3]
   17484:	ldrne	r3, [r4, #20]
   17488:	ldr	r0, [sp, #16]
   1748c:	addne	r2, r3, #1
   17490:	ldr	ip, [sp, #20]
   17494:	strne	r2, [r4, #20]
   17498:	movne	r2, #44	; 0x2c
   1749c:	strbne	r2, [r3]
   174a0:	mov	r1, r0
   174a4:	mov	r2, ip
   174a8:	mov	r0, r4
   174ac:	ldr	r6, [sp, #24]
   174b0:	bl	14d7c <test_print@@Base+0x1630>
   174b4:	ldrb	r3, [r4, #27]
   174b8:	cmp	r3, #0
   174bc:	beq	174dc <flatcc_json_printer_int16_enum_struct_field@@Base+0x68>
   174c0:	ldr	r1, [r4, #20]
   174c4:	mov	r0, r5
   174c8:	bl	144ec <test_print@@Base+0xda0>
   174cc:	ldr	r3, [r4, #20]
   174d0:	add	r0, r3, r0
   174d4:	str	r0, [r4, #20]
   174d8:	pop	{r4, r5, r6, pc}
   174dc:	mov	r1, r5
   174e0:	mov	r0, r4
   174e4:	mov	r3, r6
   174e8:	pop	{r4, r5, r6, lr}
   174ec:	bx	r3

000174f0 <flatcc_json_printer_int32_enum_struct_field@@Base>:
   174f0:	cmp	r1, #0
   174f4:	push	{r4, r5, r6, lr}
   174f8:	mov	r4, r0
   174fc:	ldr	r5, [r2, r3]
   17500:	ldrne	r3, [r4, #20]
   17504:	ldr	r0, [sp, #16]
   17508:	addne	r2, r3, #1
   1750c:	ldr	ip, [sp, #20]
   17510:	strne	r2, [r4, #20]
   17514:	movne	r2, #44	; 0x2c
   17518:	strbne	r2, [r3]
   1751c:	mov	r1, r0
   17520:	mov	r2, ip
   17524:	mov	r0, r4
   17528:	ldr	r6, [sp, #24]
   1752c:	bl	14d7c <test_print@@Base+0x1630>
   17530:	ldrb	r3, [r4, #27]
   17534:	cmp	r3, #0
   17538:	beq	17558 <flatcc_json_printer_int32_enum_struct_field@@Base+0x68>
   1753c:	ldr	r1, [r4, #20]
   17540:	mov	r0, r5
   17544:	bl	1451c <test_print@@Base+0xdd0>
   17548:	ldr	r3, [r4, #20]
   1754c:	add	r0, r3, r0
   17550:	str	r0, [r4, #20]
   17554:	pop	{r4, r5, r6, pc}
   17558:	mov	r1, r5
   1755c:	mov	r0, r4
   17560:	mov	r3, r6
   17564:	pop	{r4, r5, r6, lr}
   17568:	bx	r3

0001756c <flatcc_json_printer_int64_enum_struct_field@@Base>:
   1756c:	cmp	r1, #0
   17570:	push	{r4, r5, r6, r7, r8, lr}
   17574:	mov	r4, r0
   17578:	ldrd	r6, [r2, r3]
   1757c:	ldrne	r3, [r4, #20]
   17580:	ldr	r0, [sp, #24]
   17584:	addne	r2, r3, #1
   17588:	ldr	ip, [sp, #28]
   1758c:	strne	r2, [r4, #20]
   17590:	movne	r2, #44	; 0x2c
   17594:	strbne	r2, [r3]
   17598:	mov	r1, r0
   1759c:	mov	r2, ip
   175a0:	mov	r0, r4
   175a4:	ldr	r5, [sp, #32]
   175a8:	bl	14d7c <test_print@@Base+0x1630>
   175ac:	ldrb	r3, [r4, #27]
   175b0:	cmp	r3, #0
   175b4:	beq	175d8 <flatcc_json_printer_int64_enum_struct_field@@Base+0x6c>
   175b8:	ldr	r2, [r4, #20]
   175bc:	mov	r0, r6
   175c0:	mov	r1, r7
   175c4:	bl	14544 <test_print@@Base+0xdf8>
   175c8:	ldr	r3, [r4, #20]
   175cc:	add	r0, r3, r0
   175d0:	str	r0, [r4, #20]
   175d4:	pop	{r4, r5, r6, r7, r8, pc}
   175d8:	mov	r2, r6
   175dc:	mov	r3, r7
   175e0:	mov	r0, r4
   175e4:	mov	r1, r5
   175e8:	pop	{r4, r5, r6, r7, r8, lr}
   175ec:	bx	r1

000175f0 <flatcc_json_printer_bool_enum_struct_field@@Base>:
   175f0:	cmp	r1, #0
   175f4:	push	{r4, r5, r6, lr}
   175f8:	mov	r4, r0
   175fc:	ldrb	r5, [r2, r3]
   17600:	ldrne	r3, [r4, #20]
   17604:	ldr	r0, [sp, #16]
   17608:	addne	r2, r3, #1
   1760c:	ldr	ip, [sp, #20]
   17610:	strne	r2, [r4, #20]
   17614:	movne	r2, #44	; 0x2c
   17618:	strbne	r2, [r3]
   1761c:	mov	r1, r0
   17620:	mov	r2, ip
   17624:	mov	r0, r4
   17628:	ldr	r6, [sp, #24]
   1762c:	bl	14d7c <test_print@@Base+0x1630>
   17630:	ldrb	r3, [r4, #27]
   17634:	cmp	r3, #0
   17638:	beq	17658 <flatcc_json_printer_bool_enum_struct_field@@Base+0x68>
   1763c:	ldr	r1, [r4, #20]
   17640:	mov	r0, r5
   17644:	bl	14f90 <test_print@@Base+0x1844>
   17648:	ldr	r3, [r4, #20]
   1764c:	add	r0, r3, r0
   17650:	str	r0, [r4, #20]
   17654:	pop	{r4, r5, r6, pc}
   17658:	mov	r1, r5
   1765c:	mov	r0, r4
   17660:	mov	r3, r6
   17664:	pop	{r4, r5, r6, lr}
   17668:	bx	r3

0001766c <flatcc_json_printer_uint8_vector_field@@Base>:
   1766c:	push	{r4, r5, r6, r7, r8, lr}
   17670:	mov	r5, r1
   17674:	mov	r4, r0
   17678:	mov	r1, r2
   1767c:	mov	r0, r5
   17680:	mov	r6, r3
   17684:	bl	147ec <test_print@@Base+0x10a0>
   17688:	cmp	r0, #0
   1768c:	popeq	{r4, r5, r6, r7, r8, pc}
   17690:	ldr	r2, [r5, #16]
   17694:	mov	r1, r6
   17698:	cmp	r2, #0
   1769c:	add	r3, r2, #1
   176a0:	ldrne	r2, [r4, #20]
   176a4:	str	r3, [r5, #16]
   176a8:	addne	r3, r2, #1
   176ac:	strne	r3, [r4, #20]
   176b0:	movne	r3, #44	; 0x2c
   176b4:	strbne	r3, [r2]
   176b8:	ldr	r2, [r0]
   176bc:	add	r7, r0, r2
   176c0:	ldr	r5, [r0, r2]
   176c4:	ldr	r2, [sp, #24]
   176c8:	mov	r0, r4
   176cc:	bl	14d7c <test_print@@Base+0x1630>
   176d0:	ldr	r3, [r4, #32]
   176d4:	cmp	r5, #0
   176d8:	add	r3, r3, #1
   176dc:	str	r3, [r4, #32]
   176e0:	ldr	r3, [r4, #20]
   176e4:	add	r2, r3, #1
   176e8:	str	r2, [r4, #20]
   176ec:	mov	r2, #91	; 0x5b
   176f0:	strb	r2, [r3]
   176f4:	bne	17744 <flatcc_json_printer_uint8_vector_field@@Base+0xd8>
   176f8:	ldrb	r3, [r4, #25]
   176fc:	cmp	r3, #0
   17700:	beq	1772c <flatcc_json_printer_uint8_vector_field@@Base+0xc0>
   17704:	ldr	r3, [r4, #20]
   17708:	mov	r0, r4
   1770c:	add	r2, r3, #1
   17710:	str	r2, [r4, #20]
   17714:	mov	r2, #10
   17718:	strb	r2, [r3]
   1771c:	ldr	r3, [r4, #32]
   17720:	sub	r3, r3, #1
   17724:	str	r3, [r4, #32]
   17728:	bl	14b50 <test_print@@Base+0x1404>
   1772c:	ldr	r3, [r4, #20]
   17730:	add	r2, r3, #1
   17734:	str	r2, [r4, #20]
   17738:	mov	r2, #93	; 0x5d
   1773c:	strb	r2, [r3]
   17740:	pop	{r4, r5, r6, r7, r8, pc}
   17744:	ldrb	r3, [r4, #25]
   17748:	cmp	r3, #0
   1774c:	beq	177f0 <flatcc_json_printer_uint8_vector_field@@Base+0x184>
   17750:	ldr	r3, [r4, #20]
   17754:	mov	r0, r4
   17758:	add	r2, r3, #1
   1775c:	str	r2, [r4, #20]
   17760:	mov	r2, #10
   17764:	strb	r2, [r3]
   17768:	bl	14b50 <test_print@@Base+0x1404>
   1776c:	ldrb	r0, [r7, #4]
   17770:	ldr	r1, [r4, #20]
   17774:	bl	14e00 <test_print@@Base+0x16b4>
   17778:	add	r5, r5, #4
   1777c:	ldr	r3, [r4, #20]
   17780:	add	r6, r7, #5
   17784:	add	r5, r7, r5
   17788:	mov	r8, #10
   1778c:	mov	r7, #44	; 0x2c
   17790:	add	r0, r3, r0
   17794:	str	r0, [r4, #20]
   17798:	cmp	r6, r5
   1779c:	beq	176f8 <flatcc_json_printer_uint8_vector_field@@Base+0x8c>
   177a0:	ldr	r3, [r4, #20]
   177a4:	add	r2, r3, #1
   177a8:	str	r2, [r4, #20]
   177ac:	strb	r7, [r3]
   177b0:	ldrb	r3, [r4, #25]
   177b4:	cmp	r3, #0
   177b8:	beq	177fc <flatcc_json_printer_uint8_vector_field@@Base+0x190>
   177bc:	ldr	r3, [r4, #20]
   177c0:	mov	r0, r4
   177c4:	add	r2, r3, #1
   177c8:	str	r2, [r4, #20]
   177cc:	strb	r8, [r3]
   177d0:	bl	14b50 <test_print@@Base+0x1404>
   177d4:	ldr	r1, [r4, #20]
   177d8:	ldrb	r0, [r6], #1
   177dc:	bl	14e00 <test_print@@Base+0x16b4>
   177e0:	ldr	r3, [r4, #20]
   177e4:	add	r0, r3, r0
   177e8:	str	r0, [r4, #20]
   177ec:	b	17798 <flatcc_json_printer_uint8_vector_field@@Base+0x12c>
   177f0:	mov	r0, r4
   177f4:	bl	14d60 <test_print@@Base+0x1614>
   177f8:	b	1776c <flatcc_json_printer_uint8_vector_field@@Base+0x100>
   177fc:	mov	r0, r4
   17800:	bl	14d60 <test_print@@Base+0x1614>
   17804:	b	177d4 <flatcc_json_printer_uint8_vector_field@@Base+0x168>

00017808 <flatcc_json_printer_utype_vector_field@@Base>:
   17808:	b	1766c <flatcc_json_printer_uint8_vector_field@@Base>

0001780c <flatcc_json_printer_uint16_vector_field@@Base>:
   1780c:	push	{r4, r5, r6, r7, r8, lr}
   17810:	mov	r5, r1
   17814:	mov	r4, r0
   17818:	mov	r1, r2
   1781c:	mov	r0, r5
   17820:	mov	r7, r3
   17824:	bl	147ec <test_print@@Base+0x10a0>
   17828:	cmp	r0, #0
   1782c:	popeq	{r4, r5, r6, r7, r8, pc}
   17830:	ldr	r2, [r5, #16]
   17834:	mov	r1, r7
   17838:	cmp	r2, #0
   1783c:	add	r3, r2, #1
   17840:	ldrne	r2, [r4, #20]
   17844:	str	r3, [r5, #16]
   17848:	addne	r3, r2, #1
   1784c:	strne	r3, [r4, #20]
   17850:	movne	r3, #44	; 0x2c
   17854:	strbne	r3, [r2]
   17858:	ldr	r2, [r0]
   1785c:	add	r6, r0, r2
   17860:	ldr	r5, [r0, r2]
   17864:	ldr	r2, [sp, #24]
   17868:	mov	r0, r4
   1786c:	bl	14d7c <test_print@@Base+0x1630>
   17870:	ldr	r3, [r4, #32]
   17874:	cmp	r5, #0
   17878:	add	r3, r3, #1
   1787c:	str	r3, [r4, #32]
   17880:	ldr	r3, [r4, #20]
   17884:	add	r2, r3, #1
   17888:	str	r2, [r4, #20]
   1788c:	mov	r2, #91	; 0x5b
   17890:	strb	r2, [r3]
   17894:	bne	178e4 <flatcc_json_printer_uint16_vector_field@@Base+0xd8>
   17898:	ldrb	r3, [r4, #25]
   1789c:	cmp	r3, #0
   178a0:	beq	178cc <flatcc_json_printer_uint16_vector_field@@Base+0xc0>
   178a4:	ldr	r3, [r4, #20]
   178a8:	mov	r0, r4
   178ac:	add	r2, r3, #1
   178b0:	str	r2, [r4, #20]
   178b4:	mov	r2, #10
   178b8:	strb	r2, [r3]
   178bc:	ldr	r3, [r4, #32]
   178c0:	sub	r3, r3, #1
   178c4:	str	r3, [r4, #32]
   178c8:	bl	14b50 <test_print@@Base+0x1404>
   178cc:	ldr	r3, [r4, #20]
   178d0:	add	r2, r3, #1
   178d4:	str	r2, [r4, #20]
   178d8:	mov	r2, #93	; 0x5d
   178dc:	strb	r2, [r3]
   178e0:	pop	{r4, r5, r6, r7, r8, pc}
   178e4:	ldrb	r3, [r4, #25]
   178e8:	cmp	r3, #0
   178ec:	beq	1798c <flatcc_json_printer_uint16_vector_field@@Base+0x180>
   178f0:	ldr	r3, [r4, #20]
   178f4:	mov	r0, r4
   178f8:	add	r2, r3, #1
   178fc:	str	r2, [r4, #20]
   17900:	mov	r2, #10
   17904:	strb	r2, [r3]
   17908:	bl	14b50 <test_print@@Base+0x1404>
   1790c:	ldrh	r0, [r6, #4]
   17910:	ldr	r1, [r4, #20]
   17914:	bl	139a0 <test_print@@Base+0x254>
   17918:	ldr	r3, [r4, #20]
   1791c:	add	r6, r6, #6
   17920:	sub	r5, r5, #1
   17924:	mov	r7, #44	; 0x2c
   17928:	mov	r8, #10
   1792c:	add	r0, r3, r0
   17930:	str	r0, [r4, #20]
   17934:	subs	r5, r5, #1
   17938:	bcc	17898 <flatcc_json_printer_uint16_vector_field@@Base+0x8c>
   1793c:	ldr	r3, [r4, #20]
   17940:	add	r2, r3, #1
   17944:	str	r2, [r4, #20]
   17948:	strb	r7, [r3]
   1794c:	ldrb	r3, [r4, #25]
   17950:	cmp	r3, #0
   17954:	beq	17998 <flatcc_json_printer_uint16_vector_field@@Base+0x18c>
   17958:	ldr	r3, [r4, #20]
   1795c:	mov	r0, r4
   17960:	add	r2, r3, #1
   17964:	str	r2, [r4, #20]
   17968:	strb	r8, [r3]
   1796c:	bl	14b50 <test_print@@Base+0x1404>
   17970:	ldr	r1, [r4, #20]
   17974:	ldrh	r0, [r6], #2
   17978:	bl	139a0 <test_print@@Base+0x254>
   1797c:	ldr	r3, [r4, #20]
   17980:	add	r0, r3, r0
   17984:	str	r0, [r4, #20]
   17988:	b	17934 <flatcc_json_printer_uint16_vector_field@@Base+0x128>
   1798c:	mov	r0, r4
   17990:	bl	14d60 <test_print@@Base+0x1614>
   17994:	b	1790c <flatcc_json_printer_uint16_vector_field@@Base+0x100>
   17998:	mov	r0, r4
   1799c:	bl	14d60 <test_print@@Base+0x1614>
   179a0:	b	17970 <flatcc_json_printer_uint16_vector_field@@Base+0x164>

000179a4 <flatcc_json_printer_uint32_vector_field@@Base>:
   179a4:	push	{r4, r5, r6, r7, r8, lr}
   179a8:	mov	r5, r1
   179ac:	mov	r4, r0
   179b0:	mov	r1, r2
   179b4:	mov	r0, r5
   179b8:	mov	r7, r3
   179bc:	bl	147ec <test_print@@Base+0x10a0>
   179c0:	cmp	r0, #0
   179c4:	popeq	{r4, r5, r6, r7, r8, pc}
   179c8:	ldr	r2, [r5, #16]
   179cc:	mov	r1, r7
   179d0:	cmp	r2, #0
   179d4:	add	r3, r2, #1
   179d8:	ldrne	r2, [r4, #20]
   179dc:	str	r3, [r5, #16]
   179e0:	addne	r3, r2, #1
   179e4:	strne	r3, [r4, #20]
   179e8:	movne	r3, #44	; 0x2c
   179ec:	strbne	r3, [r2]
   179f0:	ldr	r2, [r0]
   179f4:	add	r6, r0, r2
   179f8:	ldr	r5, [r0, r2]
   179fc:	ldr	r2, [sp, #24]
   17a00:	mov	r0, r4
   17a04:	bl	14d7c <test_print@@Base+0x1630>
   17a08:	ldr	r3, [r4, #32]
   17a0c:	cmp	r5, #0
   17a10:	add	r3, r3, #1
   17a14:	str	r3, [r4, #32]
   17a18:	ldr	r3, [r4, #20]
   17a1c:	add	r2, r3, #1
   17a20:	str	r2, [r4, #20]
   17a24:	mov	r2, #91	; 0x5b
   17a28:	strb	r2, [r3]
   17a2c:	bne	17a7c <flatcc_json_printer_uint32_vector_field@@Base+0xd8>
   17a30:	ldrb	r3, [r4, #25]
   17a34:	cmp	r3, #0
   17a38:	beq	17a64 <flatcc_json_printer_uint32_vector_field@@Base+0xc0>
   17a3c:	ldr	r3, [r4, #20]
   17a40:	mov	r0, r4
   17a44:	add	r2, r3, #1
   17a48:	str	r2, [r4, #20]
   17a4c:	mov	r2, #10
   17a50:	strb	r2, [r3]
   17a54:	ldr	r3, [r4, #32]
   17a58:	sub	r3, r3, #1
   17a5c:	str	r3, [r4, #32]
   17a60:	bl	14b50 <test_print@@Base+0x1404>
   17a64:	ldr	r3, [r4, #20]
   17a68:	add	r2, r3, #1
   17a6c:	str	r2, [r4, #20]
   17a70:	mov	r2, #93	; 0x5d
   17a74:	strb	r2, [r3]
   17a78:	pop	{r4, r5, r6, r7, r8, pc}
   17a7c:	ldrb	r3, [r4, #25]
   17a80:	cmp	r3, #0
   17a84:	beq	17b24 <flatcc_json_printer_uint32_vector_field@@Base+0x180>
   17a88:	ldr	r3, [r4, #20]
   17a8c:	mov	r0, r4
   17a90:	add	r2, r3, #1
   17a94:	str	r2, [r4, #20]
   17a98:	mov	r2, #10
   17a9c:	strb	r2, [r3]
   17aa0:	bl	14b50 <test_print@@Base+0x1404>
   17aa4:	ldr	r0, [r6, #4]
   17aa8:	ldr	r1, [r4, #20]
   17aac:	bl	13b20 <test_print@@Base+0x3d4>
   17ab0:	ldr	r3, [r4, #20]
   17ab4:	add	r6, r6, #8
   17ab8:	sub	r5, r5, #1
   17abc:	mov	r7, #44	; 0x2c
   17ac0:	mov	r8, #10
   17ac4:	add	r0, r3, r0
   17ac8:	str	r0, [r4, #20]
   17acc:	subs	r5, r5, #1
   17ad0:	bcc	17a30 <flatcc_json_printer_uint32_vector_field@@Base+0x8c>
   17ad4:	ldr	r3, [r4, #20]
   17ad8:	add	r2, r3, #1
   17adc:	str	r2, [r4, #20]
   17ae0:	strb	r7, [r3]
   17ae4:	ldrb	r3, [r4, #25]
   17ae8:	cmp	r3, #0
   17aec:	beq	17b30 <flatcc_json_printer_uint32_vector_field@@Base+0x18c>
   17af0:	ldr	r3, [r4, #20]
   17af4:	mov	r0, r4
   17af8:	add	r2, r3, #1
   17afc:	str	r2, [r4, #20]
   17b00:	strb	r8, [r3]
   17b04:	bl	14b50 <test_print@@Base+0x1404>
   17b08:	ldr	r1, [r4, #20]
   17b0c:	ldr	r0, [r6], #4
   17b10:	bl	13b20 <test_print@@Base+0x3d4>
   17b14:	ldr	r3, [r4, #20]
   17b18:	add	r0, r3, r0
   17b1c:	str	r0, [r4, #20]
   17b20:	b	17acc <flatcc_json_printer_uint32_vector_field@@Base+0x128>
   17b24:	mov	r0, r4
   17b28:	bl	14d60 <test_print@@Base+0x1614>
   17b2c:	b	17aa4 <flatcc_json_printer_uint32_vector_field@@Base+0x100>
   17b30:	mov	r0, r4
   17b34:	bl	14d60 <test_print@@Base+0x1614>
   17b38:	b	17b08 <flatcc_json_printer_uint32_vector_field@@Base+0x164>

00017b3c <flatcc_json_printer_uint64_vector_field@@Base>:
   17b3c:	push	{r4, r5, r6, r7, r8, lr}
   17b40:	mov	r5, r1
   17b44:	mov	r4, r0
   17b48:	mov	r1, r2
   17b4c:	mov	r0, r5
   17b50:	mov	r7, r3
   17b54:	bl	147ec <test_print@@Base+0x10a0>
   17b58:	cmp	r0, #0
   17b5c:	popeq	{r4, r5, r6, r7, r8, pc}
   17b60:	ldr	r2, [r5, #16]
   17b64:	mov	r1, r7
   17b68:	cmp	r2, #0
   17b6c:	add	r3, r2, #1
   17b70:	ldrne	r2, [r4, #20]
   17b74:	str	r3, [r5, #16]
   17b78:	addne	r3, r2, #1
   17b7c:	strne	r3, [r4, #20]
   17b80:	movne	r3, #44	; 0x2c
   17b84:	strbne	r3, [r2]
   17b88:	ldr	r2, [r0]
   17b8c:	add	r6, r0, r2
   17b90:	ldr	r5, [r0, r2]
   17b94:	ldr	r2, [sp, #24]
   17b98:	mov	r0, r4
   17b9c:	bl	14d7c <test_print@@Base+0x1630>
   17ba0:	ldr	r3, [r4, #32]
   17ba4:	cmp	r5, #0
   17ba8:	add	r3, r3, #1
   17bac:	str	r3, [r4, #32]
   17bb0:	ldr	r3, [r4, #20]
   17bb4:	add	r2, r3, #1
   17bb8:	str	r2, [r4, #20]
   17bbc:	mov	r2, #91	; 0x5b
   17bc0:	strb	r2, [r3]
   17bc4:	bne	17c14 <flatcc_json_printer_uint64_vector_field@@Base+0xd8>
   17bc8:	ldrb	r3, [r4, #25]
   17bcc:	cmp	r3, #0
   17bd0:	beq	17bfc <flatcc_json_printer_uint64_vector_field@@Base+0xc0>
   17bd4:	ldr	r3, [r4, #20]
   17bd8:	mov	r0, r4
   17bdc:	add	r2, r3, #1
   17be0:	str	r2, [r4, #20]
   17be4:	mov	r2, #10
   17be8:	strb	r2, [r3]
   17bec:	ldr	r3, [r4, #32]
   17bf0:	sub	r3, r3, #1
   17bf4:	str	r3, [r4, #32]
   17bf8:	bl	14b50 <test_print@@Base+0x1404>
   17bfc:	ldr	r3, [r4, #20]
   17c00:	add	r2, r3, #1
   17c04:	str	r2, [r4, #20]
   17c08:	mov	r2, #93	; 0x5d
   17c0c:	strb	r2, [r3]
   17c10:	pop	{r4, r5, r6, r7, r8, pc}
   17c14:	ldrb	r3, [r4, #25]
   17c18:	cmp	r3, #0
   17c1c:	beq	17cbc <flatcc_json_printer_uint64_vector_field@@Base+0x180>
   17c20:	ldr	r3, [r4, #20]
   17c24:	mov	r0, r4
   17c28:	add	r2, r3, #1
   17c2c:	str	r2, [r4, #20]
   17c30:	mov	r2, #10
   17c34:	strb	r2, [r3]
   17c38:	bl	14b50 <test_print@@Base+0x1404>
   17c3c:	ldrd	r0, [r6, #4]
   17c40:	ldr	r2, [r4, #20]
   17c44:	bl	13e7c <test_print@@Base+0x730>
   17c48:	ldr	r3, [r4, #20]
   17c4c:	add	r6, r6, #12
   17c50:	sub	r5, r5, #1
   17c54:	mov	r7, #44	; 0x2c
   17c58:	mov	r8, #10
   17c5c:	add	r0, r3, r0
   17c60:	str	r0, [r4, #20]
   17c64:	subs	r5, r5, #1
   17c68:	bcc	17bc8 <flatcc_json_printer_uint64_vector_field@@Base+0x8c>
   17c6c:	ldr	r3, [r4, #20]
   17c70:	add	r2, r3, #1
   17c74:	str	r2, [r4, #20]
   17c78:	strb	r7, [r3]
   17c7c:	ldrb	r3, [r4, #25]
   17c80:	cmp	r3, #0
   17c84:	beq	17cc8 <flatcc_json_printer_uint64_vector_field@@Base+0x18c>
   17c88:	ldr	r3, [r4, #20]
   17c8c:	mov	r0, r4
   17c90:	add	r2, r3, #1
   17c94:	str	r2, [r4, #20]
   17c98:	strb	r8, [r3]
   17c9c:	bl	14b50 <test_print@@Base+0x1404>
   17ca0:	ldr	r2, [r4, #20]
   17ca4:	ldrd	r0, [r6], #8
   17ca8:	bl	13e7c <test_print@@Base+0x730>
   17cac:	ldr	r3, [r4, #20]
   17cb0:	add	r0, r3, r0
   17cb4:	str	r0, [r4, #20]
   17cb8:	b	17c64 <flatcc_json_printer_uint64_vector_field@@Base+0x128>
   17cbc:	mov	r0, r4
   17cc0:	bl	14d60 <test_print@@Base+0x1614>
   17cc4:	b	17c3c <flatcc_json_printer_uint64_vector_field@@Base+0x100>
   17cc8:	mov	r0, r4
   17ccc:	bl	14d60 <test_print@@Base+0x1614>
   17cd0:	b	17ca0 <flatcc_json_printer_uint64_vector_field@@Base+0x164>

00017cd4 <flatcc_json_printer_int8_vector_field@@Base>:
   17cd4:	push	{r4, r5, r6, r7, r8, lr}
   17cd8:	mov	r5, r1
   17cdc:	mov	r4, r0
   17ce0:	mov	r1, r2
   17ce4:	mov	r0, r5
   17ce8:	mov	r6, r3
   17cec:	bl	147ec <test_print@@Base+0x10a0>
   17cf0:	cmp	r0, #0
   17cf4:	popeq	{r4, r5, r6, r7, r8, pc}
   17cf8:	ldr	r2, [r5, #16]
   17cfc:	mov	r1, r6
   17d00:	cmp	r2, #0
   17d04:	add	r3, r2, #1
   17d08:	ldrne	r2, [r4, #20]
   17d0c:	str	r3, [r5, #16]
   17d10:	addne	r3, r2, #1
   17d14:	strne	r3, [r4, #20]
   17d18:	movne	r3, #44	; 0x2c
   17d1c:	strbne	r3, [r2]
   17d20:	ldr	r2, [r0]
   17d24:	add	r7, r0, r2
   17d28:	ldr	r5, [r0, r2]
   17d2c:	ldr	r2, [sp, #24]
   17d30:	mov	r0, r4
   17d34:	bl	14d7c <test_print@@Base+0x1630>
   17d38:	ldr	r3, [r4, #32]
   17d3c:	cmp	r5, #0
   17d40:	add	r3, r3, #1
   17d44:	str	r3, [r4, #32]
   17d48:	ldr	r3, [r4, #20]
   17d4c:	add	r2, r3, #1
   17d50:	str	r2, [r4, #20]
   17d54:	mov	r2, #91	; 0x5b
   17d58:	strb	r2, [r3]
   17d5c:	bne	17dac <flatcc_json_printer_int8_vector_field@@Base+0xd8>
   17d60:	ldrb	r3, [r4, #25]
   17d64:	cmp	r3, #0
   17d68:	beq	17d94 <flatcc_json_printer_int8_vector_field@@Base+0xc0>
   17d6c:	ldr	r3, [r4, #20]
   17d70:	mov	r0, r4
   17d74:	add	r2, r3, #1
   17d78:	str	r2, [r4, #20]
   17d7c:	mov	r2, #10
   17d80:	strb	r2, [r3]
   17d84:	ldr	r3, [r4, #32]
   17d88:	sub	r3, r3, #1
   17d8c:	str	r3, [r4, #32]
   17d90:	bl	14b50 <test_print@@Base+0x1404>
   17d94:	ldr	r3, [r4, #20]
   17d98:	add	r2, r3, #1
   17d9c:	str	r2, [r4, #20]
   17da0:	mov	r2, #93	; 0x5d
   17da4:	strb	r2, [r3]
   17da8:	pop	{r4, r5, r6, r7, r8, pc}
   17dac:	ldrb	r3, [r4, #25]
   17db0:	cmp	r3, #0
   17db4:	beq	17e58 <flatcc_json_printer_int8_vector_field@@Base+0x184>
   17db8:	ldr	r3, [r4, #20]
   17dbc:	mov	r0, r4
   17dc0:	add	r2, r3, #1
   17dc4:	str	r2, [r4, #20]
   17dc8:	mov	r2, #10
   17dcc:	strb	r2, [r3]
   17dd0:	bl	14b50 <test_print@@Base+0x1404>
   17dd4:	ldrsb	r0, [r7, #4]
   17dd8:	ldr	r1, [r4, #20]
   17ddc:	bl	14ea4 <test_print@@Base+0x1758>
   17de0:	add	r5, r5, #4
   17de4:	ldr	r3, [r4, #20]
   17de8:	add	r6, r7, #5
   17dec:	add	r5, r7, r5
   17df0:	mov	r8, #10
   17df4:	mov	r7, #44	; 0x2c
   17df8:	add	r0, r3, r0
   17dfc:	str	r0, [r4, #20]
   17e00:	cmp	r6, r5
   17e04:	beq	17d60 <flatcc_json_printer_int8_vector_field@@Base+0x8c>
   17e08:	ldr	r3, [r4, #20]
   17e0c:	add	r2, r3, #1
   17e10:	str	r2, [r4, #20]
   17e14:	strb	r7, [r3]
   17e18:	ldrb	r3, [r4, #25]
   17e1c:	cmp	r3, #0
   17e20:	beq	17e64 <flatcc_json_printer_int8_vector_field@@Base+0x190>
   17e24:	ldr	r3, [r4, #20]
   17e28:	mov	r0, r4
   17e2c:	add	r2, r3, #1
   17e30:	str	r2, [r4, #20]
   17e34:	strb	r8, [r3]
   17e38:	bl	14b50 <test_print@@Base+0x1404>
   17e3c:	ldr	r1, [r4, #20]
   17e40:	ldrsb	r0, [r6], #1
   17e44:	bl	14ea4 <test_print@@Base+0x1758>
   17e48:	ldr	r3, [r4, #20]
   17e4c:	add	r0, r3, r0
   17e50:	str	r0, [r4, #20]
   17e54:	b	17e00 <flatcc_json_printer_int8_vector_field@@Base+0x12c>
   17e58:	mov	r0, r4
   17e5c:	bl	14d60 <test_print@@Base+0x1614>
   17e60:	b	17dd4 <flatcc_json_printer_int8_vector_field@@Base+0x100>
   17e64:	mov	r0, r4
   17e68:	bl	14d60 <test_print@@Base+0x1614>
   17e6c:	b	17e3c <flatcc_json_printer_int8_vector_field@@Base+0x168>

00017e70 <flatcc_json_printer_int16_vector_field@@Base>:
   17e70:	push	{r4, r5, r6, r7, r8, lr}
   17e74:	mov	r5, r1
   17e78:	mov	r4, r0
   17e7c:	mov	r1, r2
   17e80:	mov	r0, r5
   17e84:	mov	r7, r3
   17e88:	bl	147ec <test_print@@Base+0x10a0>
   17e8c:	cmp	r0, #0
   17e90:	popeq	{r4, r5, r6, r7, r8, pc}
   17e94:	ldr	r2, [r5, #16]
   17e98:	mov	r1, r7
   17e9c:	cmp	r2, #0
   17ea0:	add	r3, r2, #1
   17ea4:	ldrne	r2, [r4, #20]
   17ea8:	str	r3, [r5, #16]
   17eac:	addne	r3, r2, #1
   17eb0:	strne	r3, [r4, #20]
   17eb4:	movne	r3, #44	; 0x2c
   17eb8:	strbne	r3, [r2]
   17ebc:	ldr	r2, [r0]
   17ec0:	add	r6, r0, r2
   17ec4:	ldr	r5, [r0, r2]
   17ec8:	ldr	r2, [sp, #24]
   17ecc:	mov	r0, r4
   17ed0:	bl	14d7c <test_print@@Base+0x1630>
   17ed4:	ldr	r3, [r4, #32]
   17ed8:	cmp	r5, #0
   17edc:	add	r3, r3, #1
   17ee0:	str	r3, [r4, #32]
   17ee4:	ldr	r3, [r4, #20]
   17ee8:	add	r2, r3, #1
   17eec:	str	r2, [r4, #20]
   17ef0:	mov	r2, #91	; 0x5b
   17ef4:	strb	r2, [r3]
   17ef8:	bne	17f48 <flatcc_json_printer_int16_vector_field@@Base+0xd8>
   17efc:	ldrb	r3, [r4, #25]
   17f00:	cmp	r3, #0
   17f04:	beq	17f30 <flatcc_json_printer_int16_vector_field@@Base+0xc0>
   17f08:	ldr	r3, [r4, #20]
   17f0c:	mov	r0, r4
   17f10:	add	r2, r3, #1
   17f14:	str	r2, [r4, #20]
   17f18:	mov	r2, #10
   17f1c:	strb	r2, [r3]
   17f20:	ldr	r3, [r4, #32]
   17f24:	sub	r3, r3, #1
   17f28:	str	r3, [r4, #32]
   17f2c:	bl	14b50 <test_print@@Base+0x1404>
   17f30:	ldr	r3, [r4, #20]
   17f34:	add	r2, r3, #1
   17f38:	str	r2, [r4, #20]
   17f3c:	mov	r2, #93	; 0x5d
   17f40:	strb	r2, [r3]
   17f44:	pop	{r4, r5, r6, r7, r8, pc}
   17f48:	ldrb	r3, [r4, #25]
   17f4c:	cmp	r3, #0
   17f50:	beq	17ff0 <flatcc_json_printer_int16_vector_field@@Base+0x180>
   17f54:	ldr	r3, [r4, #20]
   17f58:	mov	r0, r4
   17f5c:	add	r2, r3, #1
   17f60:	str	r2, [r4, #20]
   17f64:	mov	r2, #10
   17f68:	strb	r2, [r3]
   17f6c:	bl	14b50 <test_print@@Base+0x1404>
   17f70:	ldrsh	r0, [r6, #4]
   17f74:	ldr	r1, [r4, #20]
   17f78:	bl	144ec <test_print@@Base+0xda0>
   17f7c:	ldr	r3, [r4, #20]
   17f80:	add	r6, r6, #6
   17f84:	sub	r5, r5, #1
   17f88:	mov	r7, #44	; 0x2c
   17f8c:	mov	r8, #10
   17f90:	add	r0, r3, r0
   17f94:	str	r0, [r4, #20]
   17f98:	subs	r5, r5, #1
   17f9c:	bcc	17efc <flatcc_json_printer_int16_vector_field@@Base+0x8c>
   17fa0:	ldr	r3, [r4, #20]
   17fa4:	add	r2, r3, #1
   17fa8:	str	r2, [r4, #20]
   17fac:	strb	r7, [r3]
   17fb0:	ldrb	r3, [r4, #25]
   17fb4:	cmp	r3, #0
   17fb8:	beq	17ffc <flatcc_json_printer_int16_vector_field@@Base+0x18c>
   17fbc:	ldr	r3, [r4, #20]
   17fc0:	mov	r0, r4
   17fc4:	add	r2, r3, #1
   17fc8:	str	r2, [r4, #20]
   17fcc:	strb	r8, [r3]
   17fd0:	bl	14b50 <test_print@@Base+0x1404>
   17fd4:	ldr	r1, [r4, #20]
   17fd8:	ldrsh	r0, [r6], #2
   17fdc:	bl	144ec <test_print@@Base+0xda0>
   17fe0:	ldr	r3, [r4, #20]
   17fe4:	add	r0, r3, r0
   17fe8:	str	r0, [r4, #20]
   17fec:	b	17f98 <flatcc_json_printer_int16_vector_field@@Base+0x128>
   17ff0:	mov	r0, r4
   17ff4:	bl	14d60 <test_print@@Base+0x1614>
   17ff8:	b	17f70 <flatcc_json_printer_int16_vector_field@@Base+0x100>
   17ffc:	mov	r0, r4
   18000:	bl	14d60 <test_print@@Base+0x1614>
   18004:	b	17fd4 <flatcc_json_printer_int16_vector_field@@Base+0x164>

00018008 <flatcc_json_printer_int32_vector_field@@Base>:
   18008:	push	{r4, r5, r6, r7, r8, lr}
   1800c:	mov	r5, r1
   18010:	mov	r4, r0
   18014:	mov	r1, r2
   18018:	mov	r0, r5
   1801c:	mov	r7, r3
   18020:	bl	147ec <test_print@@Base+0x10a0>
   18024:	cmp	r0, #0
   18028:	popeq	{r4, r5, r6, r7, r8, pc}
   1802c:	ldr	r2, [r5, #16]
   18030:	mov	r1, r7
   18034:	cmp	r2, #0
   18038:	add	r3, r2, #1
   1803c:	ldrne	r2, [r4, #20]
   18040:	str	r3, [r5, #16]
   18044:	addne	r3, r2, #1
   18048:	strne	r3, [r4, #20]
   1804c:	movne	r3, #44	; 0x2c
   18050:	strbne	r3, [r2]
   18054:	ldr	r2, [r0]
   18058:	add	r6, r0, r2
   1805c:	ldr	r5, [r0, r2]
   18060:	ldr	r2, [sp, #24]
   18064:	mov	r0, r4
   18068:	bl	14d7c <test_print@@Base+0x1630>
   1806c:	ldr	r3, [r4, #32]
   18070:	cmp	r5, #0
   18074:	add	r3, r3, #1
   18078:	str	r3, [r4, #32]
   1807c:	ldr	r3, [r4, #20]
   18080:	add	r2, r3, #1
   18084:	str	r2, [r4, #20]
   18088:	mov	r2, #91	; 0x5b
   1808c:	strb	r2, [r3]
   18090:	bne	180e0 <flatcc_json_printer_int32_vector_field@@Base+0xd8>
   18094:	ldrb	r3, [r4, #25]
   18098:	cmp	r3, #0
   1809c:	beq	180c8 <flatcc_json_printer_int32_vector_field@@Base+0xc0>
   180a0:	ldr	r3, [r4, #20]
   180a4:	mov	r0, r4
   180a8:	add	r2, r3, #1
   180ac:	str	r2, [r4, #20]
   180b0:	mov	r2, #10
   180b4:	strb	r2, [r3]
   180b8:	ldr	r3, [r4, #32]
   180bc:	sub	r3, r3, #1
   180c0:	str	r3, [r4, #32]
   180c4:	bl	14b50 <test_print@@Base+0x1404>
   180c8:	ldr	r3, [r4, #20]
   180cc:	add	r2, r3, #1
   180d0:	str	r2, [r4, #20]
   180d4:	mov	r2, #93	; 0x5d
   180d8:	strb	r2, [r3]
   180dc:	pop	{r4, r5, r6, r7, r8, pc}
   180e0:	ldrb	r3, [r4, #25]
   180e4:	cmp	r3, #0
   180e8:	beq	18188 <flatcc_json_printer_int32_vector_field@@Base+0x180>
   180ec:	ldr	r3, [r4, #20]
   180f0:	mov	r0, r4
   180f4:	add	r2, r3, #1
   180f8:	str	r2, [r4, #20]
   180fc:	mov	r2, #10
   18100:	strb	r2, [r3]
   18104:	bl	14b50 <test_print@@Base+0x1404>
   18108:	ldr	r0, [r6, #4]
   1810c:	ldr	r1, [r4, #20]
   18110:	bl	1451c <test_print@@Base+0xdd0>
   18114:	ldr	r3, [r4, #20]
   18118:	add	r6, r6, #8
   1811c:	sub	r5, r5, #1
   18120:	mov	r7, #44	; 0x2c
   18124:	mov	r8, #10
   18128:	add	r0, r3, r0
   1812c:	str	r0, [r4, #20]
   18130:	subs	r5, r5, #1
   18134:	bcc	18094 <flatcc_json_printer_int32_vector_field@@Base+0x8c>
   18138:	ldr	r3, [r4, #20]
   1813c:	add	r2, r3, #1
   18140:	str	r2, [r4, #20]
   18144:	strb	r7, [r3]
   18148:	ldrb	r3, [r4, #25]
   1814c:	cmp	r3, #0
   18150:	beq	18194 <flatcc_json_printer_int32_vector_field@@Base+0x18c>
   18154:	ldr	r3, [r4, #20]
   18158:	mov	r0, r4
   1815c:	add	r2, r3, #1
   18160:	str	r2, [r4, #20]
   18164:	strb	r8, [r3]
   18168:	bl	14b50 <test_print@@Base+0x1404>
   1816c:	ldr	r1, [r4, #20]
   18170:	ldr	r0, [r6], #4
   18174:	bl	1451c <test_print@@Base+0xdd0>
   18178:	ldr	r3, [r4, #20]
   1817c:	add	r0, r3, r0
   18180:	str	r0, [r4, #20]
   18184:	b	18130 <flatcc_json_printer_int32_vector_field@@Base+0x128>
   18188:	mov	r0, r4
   1818c:	bl	14d60 <test_print@@Base+0x1614>
   18190:	b	18108 <flatcc_json_printer_int32_vector_field@@Base+0x100>
   18194:	mov	r0, r4
   18198:	bl	14d60 <test_print@@Base+0x1614>
   1819c:	b	1816c <flatcc_json_printer_int32_vector_field@@Base+0x164>

000181a0 <flatcc_json_printer_int64_vector_field@@Base>:
   181a0:	push	{r4, r5, r6, r7, r8, lr}
   181a4:	mov	r5, r1
   181a8:	mov	r4, r0
   181ac:	mov	r1, r2
   181b0:	mov	r0, r5
   181b4:	mov	r7, r3
   181b8:	bl	147ec <test_print@@Base+0x10a0>
   181bc:	cmp	r0, #0
   181c0:	popeq	{r4, r5, r6, r7, r8, pc}
   181c4:	ldr	r2, [r5, #16]
   181c8:	mov	r1, r7
   181cc:	cmp	r2, #0
   181d0:	add	r3, r2, #1
   181d4:	ldrne	r2, [r4, #20]
   181d8:	str	r3, [r5, #16]
   181dc:	addne	r3, r2, #1
   181e0:	strne	r3, [r4, #20]
   181e4:	movne	r3, #44	; 0x2c
   181e8:	strbne	r3, [r2]
   181ec:	ldr	r2, [r0]
   181f0:	add	r6, r0, r2
   181f4:	ldr	r5, [r0, r2]
   181f8:	ldr	r2, [sp, #24]
   181fc:	mov	r0, r4
   18200:	bl	14d7c <test_print@@Base+0x1630>
   18204:	ldr	r3, [r4, #32]
   18208:	cmp	r5, #0
   1820c:	add	r3, r3, #1
   18210:	str	r3, [r4, #32]
   18214:	ldr	r3, [r4, #20]
   18218:	add	r2, r3, #1
   1821c:	str	r2, [r4, #20]
   18220:	mov	r2, #91	; 0x5b
   18224:	strb	r2, [r3]
   18228:	bne	18278 <flatcc_json_printer_int64_vector_field@@Base+0xd8>
   1822c:	ldrb	r3, [r4, #25]
   18230:	cmp	r3, #0
   18234:	beq	18260 <flatcc_json_printer_int64_vector_field@@Base+0xc0>
   18238:	ldr	r3, [r4, #20]
   1823c:	mov	r0, r4
   18240:	add	r2, r3, #1
   18244:	str	r2, [r4, #20]
   18248:	mov	r2, #10
   1824c:	strb	r2, [r3]
   18250:	ldr	r3, [r4, #32]
   18254:	sub	r3, r3, #1
   18258:	str	r3, [r4, #32]
   1825c:	bl	14b50 <test_print@@Base+0x1404>
   18260:	ldr	r3, [r4, #20]
   18264:	add	r2, r3, #1
   18268:	str	r2, [r4, #20]
   1826c:	mov	r2, #93	; 0x5d
   18270:	strb	r2, [r3]
   18274:	pop	{r4, r5, r6, r7, r8, pc}
   18278:	ldrb	r3, [r4, #25]
   1827c:	cmp	r3, #0
   18280:	beq	18320 <flatcc_json_printer_int64_vector_field@@Base+0x180>
   18284:	ldr	r3, [r4, #20]
   18288:	mov	r0, r4
   1828c:	add	r2, r3, #1
   18290:	str	r2, [r4, #20]
   18294:	mov	r2, #10
   18298:	strb	r2, [r3]
   1829c:	bl	14b50 <test_print@@Base+0x1404>
   182a0:	ldrd	r0, [r6, #4]
   182a4:	ldr	r2, [r4, #20]
   182a8:	bl	14544 <test_print@@Base+0xdf8>
   182ac:	ldr	r3, [r4, #20]
   182b0:	add	r6, r6, #12
   182b4:	sub	r5, r5, #1
   182b8:	mov	r7, #44	; 0x2c
   182bc:	mov	r8, #10
   182c0:	add	r0, r3, r0
   182c4:	str	r0, [r4, #20]
   182c8:	subs	r5, r5, #1
   182cc:	bcc	1822c <flatcc_json_printer_int64_vector_field@@Base+0x8c>
   182d0:	ldr	r3, [r4, #20]
   182d4:	add	r2, r3, #1
   182d8:	str	r2, [r4, #20]
   182dc:	strb	r7, [r3]
   182e0:	ldrb	r3, [r4, #25]
   182e4:	cmp	r3, #0
   182e8:	beq	1832c <flatcc_json_printer_int64_vector_field@@Base+0x18c>
   182ec:	ldr	r3, [r4, #20]
   182f0:	mov	r0, r4
   182f4:	add	r2, r3, #1
   182f8:	str	r2, [r4, #20]
   182fc:	strb	r8, [r3]
   18300:	bl	14b50 <test_print@@Base+0x1404>
   18304:	ldr	r2, [r4, #20]
   18308:	ldrd	r0, [r6], #8
   1830c:	bl	14544 <test_print@@Base+0xdf8>
   18310:	ldr	r3, [r4, #20]
   18314:	add	r0, r3, r0
   18318:	str	r0, [r4, #20]
   1831c:	b	182c8 <flatcc_json_printer_int64_vector_field@@Base+0x128>
   18320:	mov	r0, r4
   18324:	bl	14d60 <test_print@@Base+0x1614>
   18328:	b	182a0 <flatcc_json_printer_int64_vector_field@@Base+0x100>
   1832c:	mov	r0, r4
   18330:	bl	14d60 <test_print@@Base+0x1614>
   18334:	b	18304 <flatcc_json_printer_int64_vector_field@@Base+0x164>

00018338 <flatcc_json_printer_bool_vector_field@@Base>:
   18338:	push	{r4, r5, r6, r7, r8, lr}
   1833c:	mov	r5, r1
   18340:	mov	r4, r0
   18344:	mov	r1, r2
   18348:	mov	r0, r5
   1834c:	mov	r6, r3
   18350:	bl	147ec <test_print@@Base+0x10a0>
   18354:	cmp	r0, #0
   18358:	popeq	{r4, r5, r6, r7, r8, pc}
   1835c:	ldr	r2, [r5, #16]
   18360:	mov	r1, r6
   18364:	cmp	r2, #0
   18368:	add	r3, r2, #1
   1836c:	ldrne	r2, [r4, #20]
   18370:	str	r3, [r5, #16]
   18374:	addne	r3, r2, #1
   18378:	strne	r3, [r4, #20]
   1837c:	movne	r3, #44	; 0x2c
   18380:	strbne	r3, [r2]
   18384:	ldr	r2, [r0]
   18388:	add	r7, r0, r2
   1838c:	ldr	r5, [r0, r2]
   18390:	ldr	r2, [sp, #24]
   18394:	mov	r0, r4
   18398:	bl	14d7c <test_print@@Base+0x1630>
   1839c:	ldr	r3, [r4, #32]
   183a0:	cmp	r5, #0
   183a4:	add	r3, r3, #1
   183a8:	str	r3, [r4, #32]
   183ac:	ldr	r3, [r4, #20]
   183b0:	add	r2, r3, #1
   183b4:	str	r2, [r4, #20]
   183b8:	mov	r2, #91	; 0x5b
   183bc:	strb	r2, [r3]
   183c0:	bne	18410 <flatcc_json_printer_bool_vector_field@@Base+0xd8>
   183c4:	ldrb	r3, [r4, #25]
   183c8:	cmp	r3, #0
   183cc:	beq	183f8 <flatcc_json_printer_bool_vector_field@@Base+0xc0>
   183d0:	ldr	r3, [r4, #20]
   183d4:	mov	r0, r4
   183d8:	add	r2, r3, #1
   183dc:	str	r2, [r4, #20]
   183e0:	mov	r2, #10
   183e4:	strb	r2, [r3]
   183e8:	ldr	r3, [r4, #32]
   183ec:	sub	r3, r3, #1
   183f0:	str	r3, [r4, #32]
   183f4:	bl	14b50 <test_print@@Base+0x1404>
   183f8:	ldr	r3, [r4, #20]
   183fc:	add	r2, r3, #1
   18400:	str	r2, [r4, #20]
   18404:	mov	r2, #93	; 0x5d
   18408:	strb	r2, [r3]
   1840c:	pop	{r4, r5, r6, r7, r8, pc}
   18410:	ldrb	r3, [r4, #25]
   18414:	cmp	r3, #0
   18418:	beq	184bc <flatcc_json_printer_bool_vector_field@@Base+0x184>
   1841c:	ldr	r3, [r4, #20]
   18420:	mov	r0, r4
   18424:	add	r2, r3, #1
   18428:	str	r2, [r4, #20]
   1842c:	mov	r2, #10
   18430:	strb	r2, [r3]
   18434:	bl	14b50 <test_print@@Base+0x1404>
   18438:	ldrb	r0, [r7, #4]
   1843c:	ldr	r1, [r4, #20]
   18440:	bl	14f90 <test_print@@Base+0x1844>
   18444:	add	r5, r5, #4
   18448:	ldr	r3, [r4, #20]
   1844c:	add	r6, r7, #5
   18450:	add	r5, r7, r5
   18454:	mov	r8, #10
   18458:	mov	r7, #44	; 0x2c
   1845c:	add	r0, r3, r0
   18460:	str	r0, [r4, #20]
   18464:	cmp	r6, r5
   18468:	beq	183c4 <flatcc_json_printer_bool_vector_field@@Base+0x8c>
   1846c:	ldr	r3, [r4, #20]
   18470:	add	r2, r3, #1
   18474:	str	r2, [r4, #20]
   18478:	strb	r7, [r3]
   1847c:	ldrb	r3, [r4, #25]
   18480:	cmp	r3, #0
   18484:	beq	184c8 <flatcc_json_printer_bool_vector_field@@Base+0x190>
   18488:	ldr	r3, [r4, #20]
   1848c:	mov	r0, r4
   18490:	add	r2, r3, #1
   18494:	str	r2, [r4, #20]
   18498:	strb	r8, [r3]
   1849c:	bl	14b50 <test_print@@Base+0x1404>
   184a0:	ldr	r1, [r4, #20]
   184a4:	ldrb	r0, [r6], #1
   184a8:	bl	14f90 <test_print@@Base+0x1844>
   184ac:	ldr	r3, [r4, #20]
   184b0:	add	r0, r3, r0
   184b4:	str	r0, [r4, #20]
   184b8:	b	18464 <flatcc_json_printer_bool_vector_field@@Base+0x12c>
   184bc:	mov	r0, r4
   184c0:	bl	14d60 <test_print@@Base+0x1614>
   184c4:	b	18438 <flatcc_json_printer_bool_vector_field@@Base+0x100>
   184c8:	mov	r0, r4
   184cc:	bl	14d60 <test_print@@Base+0x1614>
   184d0:	b	184a0 <flatcc_json_printer_bool_vector_field@@Base+0x168>

000184d4 <flatcc_json_printer_float_vector_field@@Base>:
   184d4:	push	{r4, r5, r6, r7, r8, lr}
   184d8:	mov	r5, r1
   184dc:	mov	r4, r0
   184e0:	mov	r1, r2
   184e4:	mov	r0, r5
   184e8:	mov	r7, r3
   184ec:	bl	147ec <test_print@@Base+0x10a0>
   184f0:	cmp	r0, #0
   184f4:	popeq	{r4, r5, r6, r7, r8, pc}
   184f8:	ldr	r2, [r5, #16]
   184fc:	mov	r1, r7
   18500:	cmp	r2, #0
   18504:	add	r3, r2, #1
   18508:	ldrne	r2, [r4, #20]
   1850c:	str	r3, [r5, #16]
   18510:	addne	r3, r2, #1
   18514:	strne	r3, [r4, #20]
   18518:	movne	r3, #44	; 0x2c
   1851c:	strbne	r3, [r2]
   18520:	ldr	r2, [r0]
   18524:	add	r6, r0, r2
   18528:	ldr	r5, [r0, r2]
   1852c:	ldr	r2, [sp, #24]
   18530:	mov	r0, r4
   18534:	bl	14d7c <test_print@@Base+0x1630>
   18538:	ldr	r3, [r4, #32]
   1853c:	cmp	r5, #0
   18540:	add	r3, r3, #1
   18544:	str	r3, [r4, #32]
   18548:	ldr	r3, [r4, #20]
   1854c:	add	r2, r3, #1
   18550:	str	r2, [r4, #20]
   18554:	mov	r2, #91	; 0x5b
   18558:	strb	r2, [r3]
   1855c:	bne	185ac <flatcc_json_printer_float_vector_field@@Base+0xd8>
   18560:	ldrb	r3, [r4, #25]
   18564:	cmp	r3, #0
   18568:	beq	18594 <flatcc_json_printer_float_vector_field@@Base+0xc0>
   1856c:	ldr	r3, [r4, #20]
   18570:	mov	r0, r4
   18574:	add	r2, r3, #1
   18578:	str	r2, [r4, #20]
   1857c:	mov	r2, #10
   18580:	strb	r2, [r3]
   18584:	ldr	r3, [r4, #32]
   18588:	sub	r3, r3, #1
   1858c:	str	r3, [r4, #32]
   18590:	bl	14b50 <test_print@@Base+0x1404>
   18594:	ldr	r3, [r4, #20]
   18598:	add	r2, r3, #1
   1859c:	str	r2, [r4, #20]
   185a0:	mov	r2, #93	; 0x5d
   185a4:	strb	r2, [r3]
   185a8:	pop	{r4, r5, r6, r7, r8, pc}
   185ac:	ldrb	r3, [r4, #25]
   185b0:	cmp	r3, #0
   185b4:	beq	1865c <flatcc_json_printer_float_vector_field@@Base+0x188>
   185b8:	ldr	r3, [r4, #20]
   185bc:	mov	r0, r4
   185c0:	add	r2, r3, #1
   185c4:	str	r2, [r4, #20]
   185c8:	mov	r2, #10
   185cc:	strb	r2, [r3]
   185d0:	bl	14b50 <test_print@@Base+0x1404>
   185d4:	vldr	s0, [r6, #4]
   185d8:	ldr	r0, [r4, #20]
   185dc:	add	r6, r6, #8
   185e0:	sub	r5, r5, #1
   185e4:	vcvt.f64.f32	d0, s0
   185e8:	bl	152bc <test_print@@Base+0x1b70>
   185ec:	ldr	r3, [r4, #20]
   185f0:	mov	r7, #44	; 0x2c
   185f4:	mov	r8, #10
   185f8:	add	r0, r3, r0
   185fc:	str	r0, [r4, #20]
   18600:	subs	r5, r5, #1
   18604:	bcc	18560 <flatcc_json_printer_float_vector_field@@Base+0x8c>
   18608:	ldr	r3, [r4, #20]
   1860c:	add	r2, r3, #1
   18610:	str	r2, [r4, #20]
   18614:	strb	r7, [r3]
   18618:	ldrb	r3, [r4, #25]
   1861c:	cmp	r3, #0
   18620:	beq	18668 <flatcc_json_printer_float_vector_field@@Base+0x194>
   18624:	ldr	r3, [r4, #20]
   18628:	mov	r0, r4
   1862c:	add	r2, r3, #1
   18630:	str	r2, [r4, #20]
   18634:	strb	r8, [r3]
   18638:	bl	14b50 <test_print@@Base+0x1404>
   1863c:	vldmia	r6!, {s0}
   18640:	ldr	r0, [r4, #20]
   18644:	vcvt.f64.f32	d0, s0
   18648:	bl	152bc <test_print@@Base+0x1b70>
   1864c:	ldr	r3, [r4, #20]
   18650:	add	r0, r3, r0
   18654:	str	r0, [r4, #20]
   18658:	b	18600 <flatcc_json_printer_float_vector_field@@Base+0x12c>
   1865c:	mov	r0, r4
   18660:	bl	14d60 <test_print@@Base+0x1614>
   18664:	b	185d4 <flatcc_json_printer_float_vector_field@@Base+0x100>
   18668:	mov	r0, r4
   1866c:	bl	14d60 <test_print@@Base+0x1614>
   18670:	b	1863c <flatcc_json_printer_float_vector_field@@Base+0x168>

00018674 <flatcc_json_printer_double_vector_field@@Base>:
   18674:	push	{r4, r5, r6, r7, r8, lr}
   18678:	mov	r5, r1
   1867c:	mov	r4, r0
   18680:	mov	r1, r2
   18684:	mov	r0, r5
   18688:	mov	r7, r3
   1868c:	bl	147ec <test_print@@Base+0x10a0>
   18690:	cmp	r0, #0
   18694:	popeq	{r4, r5, r6, r7, r8, pc}
   18698:	ldr	r2, [r5, #16]
   1869c:	mov	r1, r7
   186a0:	cmp	r2, #0
   186a4:	add	r3, r2, #1
   186a8:	ldrne	r2, [r4, #20]
   186ac:	str	r3, [r5, #16]
   186b0:	addne	r3, r2, #1
   186b4:	strne	r3, [r4, #20]
   186b8:	movne	r3, #44	; 0x2c
   186bc:	strbne	r3, [r2]
   186c0:	ldr	r2, [r0]
   186c4:	add	r6, r0, r2
   186c8:	ldr	r5, [r0, r2]
   186cc:	ldr	r2, [sp, #24]
   186d0:	mov	r0, r4
   186d4:	bl	14d7c <test_print@@Base+0x1630>
   186d8:	ldr	r3, [r4, #32]
   186dc:	cmp	r5, #0
   186e0:	add	r3, r3, #1
   186e4:	str	r3, [r4, #32]
   186e8:	ldr	r3, [r4, #20]
   186ec:	add	r2, r3, #1
   186f0:	str	r2, [r4, #20]
   186f4:	mov	r2, #91	; 0x5b
   186f8:	strb	r2, [r3]
   186fc:	bne	1874c <flatcc_json_printer_double_vector_field@@Base+0xd8>
   18700:	ldrb	r3, [r4, #25]
   18704:	cmp	r3, #0
   18708:	beq	18734 <flatcc_json_printer_double_vector_field@@Base+0xc0>
   1870c:	ldr	r3, [r4, #20]
   18710:	mov	r0, r4
   18714:	add	r2, r3, #1
   18718:	str	r2, [r4, #20]
   1871c:	mov	r2, #10
   18720:	strb	r2, [r3]
   18724:	ldr	r3, [r4, #32]
   18728:	sub	r3, r3, #1
   1872c:	str	r3, [r4, #32]
   18730:	bl	14b50 <test_print@@Base+0x1404>
   18734:	ldr	r3, [r4, #20]
   18738:	add	r2, r3, #1
   1873c:	str	r2, [r4, #20]
   18740:	mov	r2, #93	; 0x5d
   18744:	strb	r2, [r3]
   18748:	pop	{r4, r5, r6, r7, r8, pc}
   1874c:	ldrb	r3, [r4, #25]
   18750:	cmp	r3, #0
   18754:	beq	187f4 <flatcc_json_printer_double_vector_field@@Base+0x180>
   18758:	ldr	r3, [r4, #20]
   1875c:	mov	r0, r4
   18760:	add	r2, r3, #1
   18764:	str	r2, [r4, #20]
   18768:	mov	r2, #10
   1876c:	strb	r2, [r3]
   18770:	bl	14b50 <test_print@@Base+0x1404>
   18774:	vldr	d0, [r6, #4]
   18778:	ldr	r0, [r4, #20]
   1877c:	bl	152bc <test_print@@Base+0x1b70>
   18780:	ldr	r3, [r4, #20]
   18784:	add	r6, r6, #12
   18788:	sub	r5, r5, #1
   1878c:	mov	r7, #44	; 0x2c
   18790:	mov	r8, #10
   18794:	add	r0, r3, r0
   18798:	str	r0, [r4, #20]
   1879c:	subs	r5, r5, #1
   187a0:	bcc	18700 <flatcc_json_printer_double_vector_field@@Base+0x8c>
   187a4:	ldr	r3, [r4, #20]
   187a8:	add	r2, r3, #1
   187ac:	str	r2, [r4, #20]
   187b0:	strb	r7, [r3]
   187b4:	ldrb	r3, [r4, #25]
   187b8:	cmp	r3, #0
   187bc:	beq	18800 <flatcc_json_printer_double_vector_field@@Base+0x18c>
   187c0:	ldr	r3, [r4, #20]
   187c4:	mov	r0, r4
   187c8:	add	r2, r3, #1
   187cc:	str	r2, [r4, #20]
   187d0:	strb	r8, [r3]
   187d4:	bl	14b50 <test_print@@Base+0x1404>
   187d8:	ldr	r0, [r4, #20]
   187dc:	vldmia	r6!, {d0}
   187e0:	bl	152bc <test_print@@Base+0x1b70>
   187e4:	ldr	r3, [r4, #20]
   187e8:	add	r0, r3, r0
   187ec:	str	r0, [r4, #20]
   187f0:	b	1879c <flatcc_json_printer_double_vector_field@@Base+0x128>
   187f4:	mov	r0, r4
   187f8:	bl	14d60 <test_print@@Base+0x1614>
   187fc:	b	18774 <flatcc_json_printer_double_vector_field@@Base+0x100>
   18800:	mov	r0, r4
   18804:	bl	14d60 <test_print@@Base+0x1614>
   18808:	b	187d8 <flatcc_json_printer_double_vector_field@@Base+0x164>

0001880c <flatcc_json_printer_uint8_enum_vector_field@@Base>:
   1880c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18810:	ldrb	lr, [r0, #27]
   18814:	ldr	r9, [sp, #32]
   18818:	ldr	r7, [sp, #36]	; 0x24
   1881c:	cmp	lr, #0
   18820:	beq	1882c <flatcc_json_printer_uint8_enum_vector_field@@Base+0x20>
   18824:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18828:	b	1766c <flatcc_json_printer_uint8_vector_field@@Base>
   1882c:	mov	r5, r1
   18830:	mov	r4, r0
   18834:	mov	r1, r2
   18838:	mov	r0, r5
   1883c:	mov	r6, r3
   18840:	bl	147ec <test_print@@Base+0x10a0>
   18844:	cmp	r0, #0
   18848:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1884c:	ldr	r3, [r5, #16]
   18850:	mov	r1, r6
   18854:	cmp	r3, #0
   18858:	add	r2, r3, #1
   1885c:	ldrne	r3, [r4, #20]
   18860:	str	r2, [r5, #16]
   18864:	addne	r2, r3, #1
   18868:	strne	r2, [r4, #20]
   1886c:	movne	r2, #44	; 0x2c
   18870:	strbne	r2, [r3]
   18874:	ldr	r3, [r0]
   18878:	mov	r2, r9
   1887c:	add	r8, r0, r3
   18880:	ldr	r5, [r0, r3]
   18884:	mov	r0, r4
   18888:	bl	14d7c <test_print@@Base+0x1630>
   1888c:	ldr	r3, [r4, #32]
   18890:	cmp	r5, #0
   18894:	add	r3, r3, #1
   18898:	str	r3, [r4, #32]
   1889c:	ldr	r3, [r4, #20]
   188a0:	add	r2, r3, #1
   188a4:	str	r2, [r4, #20]
   188a8:	mov	r2, #91	; 0x5b
   188ac:	strb	r2, [r3]
   188b0:	bne	18900 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xf4>
   188b4:	ldrb	r3, [r4, #25]
   188b8:	cmp	r3, #0
   188bc:	beq	188e8 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xdc>
   188c0:	ldr	r3, [r4, #20]
   188c4:	mov	r0, r4
   188c8:	add	r2, r3, #1
   188cc:	str	r2, [r4, #20]
   188d0:	mov	r2, #10
   188d4:	strb	r2, [r3]
   188d8:	ldr	r3, [r4, #32]
   188dc:	sub	r3, r3, #1
   188e0:	str	r3, [r4, #32]
   188e4:	bl	14b50 <test_print@@Base+0x1404>
   188e8:	ldr	r3, [r4, #20]
   188ec:	add	r2, r3, #1
   188f0:	str	r2, [r4, #20]
   188f4:	mov	r2, #93	; 0x5d
   188f8:	strb	r2, [r3]
   188fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18900:	ldrb	r3, [r4, #25]
   18904:	cmp	r3, #0
   18908:	beq	18994 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x188>
   1890c:	ldr	r3, [r4, #20]
   18910:	mov	r0, r4
   18914:	add	r2, r3, #1
   18918:	str	r2, [r4, #20]
   1891c:	mov	r2, #10
   18920:	strb	r2, [r3]
   18924:	bl	14b50 <test_print@@Base+0x1404>
   18928:	ldrb	r1, [r8, #4]
   1892c:	mov	r0, r4
   18930:	blx	r7
   18934:	add	r5, r5, #4
   18938:	add	r6, r8, #5
   1893c:	add	r5, r8, r5
   18940:	mov	r9, #10
   18944:	mov	r8, #44	; 0x2c
   18948:	cmp	r6, r5
   1894c:	beq	188b4 <flatcc_json_printer_uint8_enum_vector_field@@Base+0xa8>
   18950:	ldr	r3, [r4, #20]
   18954:	add	r2, r3, #1
   18958:	str	r2, [r4, #20]
   1895c:	strb	r8, [r3]
   18960:	ldrb	r3, [r4, #25]
   18964:	cmp	r3, #0
   18968:	beq	189a0 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x194>
   1896c:	ldr	r3, [r4, #20]
   18970:	mov	r0, r4
   18974:	add	r2, r3, #1
   18978:	str	r2, [r4, #20]
   1897c:	strb	r9, [r3]
   18980:	bl	14b50 <test_print@@Base+0x1404>
   18984:	ldrb	r1, [r6], #1
   18988:	mov	r0, r4
   1898c:	blx	r7
   18990:	b	18948 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x13c>
   18994:	mov	r0, r4
   18998:	bl	14d60 <test_print@@Base+0x1614>
   1899c:	b	18928 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x11c>
   189a0:	mov	r0, r4
   189a4:	bl	14d60 <test_print@@Base+0x1614>
   189a8:	b	18984 <flatcc_json_printer_uint8_enum_vector_field@@Base+0x178>

000189ac <flatcc_json_printer_utype_enum_vector_field@@Base>:
   189ac:	b	1880c <flatcc_json_printer_uint8_enum_vector_field@@Base>

000189b0 <flatcc_json_printer_uint16_enum_vector_field@@Base>:
   189b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   189b4:	ldrb	lr, [r0, #27]
   189b8:	ldr	r9, [sp, #32]
   189bc:	ldr	r7, [sp, #36]	; 0x24
   189c0:	cmp	lr, #0
   189c4:	beq	189d0 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x20>
   189c8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   189cc:	b	1780c <flatcc_json_printer_uint16_vector_field@@Base>
   189d0:	mov	r5, r1
   189d4:	mov	r4, r0
   189d8:	mov	r1, r2
   189dc:	mov	r0, r5
   189e0:	mov	r8, r3
   189e4:	bl	147ec <test_print@@Base+0x10a0>
   189e8:	cmp	r0, #0
   189ec:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   189f0:	ldr	r3, [r5, #16]
   189f4:	mov	r1, r8
   189f8:	cmp	r3, #0
   189fc:	add	r2, r3, #1
   18a00:	ldrne	r3, [r4, #20]
   18a04:	str	r2, [r5, #16]
   18a08:	addne	r2, r3, #1
   18a0c:	strne	r2, [r4, #20]
   18a10:	movne	r2, #44	; 0x2c
   18a14:	strbne	r2, [r3]
   18a18:	ldr	r3, [r0]
   18a1c:	mov	r2, r9
   18a20:	add	r6, r0, r3
   18a24:	ldr	r5, [r0, r3]
   18a28:	mov	r0, r4
   18a2c:	bl	14d7c <test_print@@Base+0x1630>
   18a30:	ldr	r3, [r4, #32]
   18a34:	cmp	r5, #0
   18a38:	add	r3, r3, #1
   18a3c:	str	r3, [r4, #32]
   18a40:	ldr	r3, [r4, #20]
   18a44:	add	r2, r3, #1
   18a48:	str	r2, [r4, #20]
   18a4c:	mov	r2, #91	; 0x5b
   18a50:	strb	r2, [r3]
   18a54:	bne	18aa4 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xf4>
   18a58:	ldrb	r3, [r4, #25]
   18a5c:	cmp	r3, #0
   18a60:	beq	18a8c <flatcc_json_printer_uint16_enum_vector_field@@Base+0xdc>
   18a64:	ldr	r3, [r4, #20]
   18a68:	mov	r0, r4
   18a6c:	add	r2, r3, #1
   18a70:	str	r2, [r4, #20]
   18a74:	mov	r2, #10
   18a78:	strb	r2, [r3]
   18a7c:	ldr	r3, [r4, #32]
   18a80:	sub	r3, r3, #1
   18a84:	str	r3, [r4, #32]
   18a88:	bl	14b50 <test_print@@Base+0x1404>
   18a8c:	ldr	r3, [r4, #20]
   18a90:	add	r2, r3, #1
   18a94:	str	r2, [r4, #20]
   18a98:	mov	r2, #93	; 0x5d
   18a9c:	strb	r2, [r3]
   18aa0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18aa4:	ldrb	r3, [r4, #25]
   18aa8:	cmp	r3, #0
   18aac:	beq	18b34 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x184>
   18ab0:	ldr	r3, [r4, #20]
   18ab4:	mov	r0, r4
   18ab8:	add	r2, r3, #1
   18abc:	str	r2, [r4, #20]
   18ac0:	mov	r2, #10
   18ac4:	strb	r2, [r3]
   18ac8:	bl	14b50 <test_print@@Base+0x1404>
   18acc:	ldrh	r1, [r6, #4]
   18ad0:	mov	r0, r4
   18ad4:	blx	r7
   18ad8:	add	r6, r6, #6
   18adc:	sub	r5, r5, #1
   18ae0:	mov	r8, #44	; 0x2c
   18ae4:	mov	r9, #10
   18ae8:	subs	r5, r5, #1
   18aec:	bcc	18a58 <flatcc_json_printer_uint16_enum_vector_field@@Base+0xa8>
   18af0:	ldr	r3, [r4, #20]
   18af4:	add	r2, r3, #1
   18af8:	str	r2, [r4, #20]
   18afc:	strb	r8, [r3]
   18b00:	ldrb	r3, [r4, #25]
   18b04:	cmp	r3, #0
   18b08:	beq	18b40 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x190>
   18b0c:	ldr	r3, [r4, #20]
   18b10:	mov	r0, r4
   18b14:	add	r2, r3, #1
   18b18:	str	r2, [r4, #20]
   18b1c:	strb	r9, [r3]
   18b20:	bl	14b50 <test_print@@Base+0x1404>
   18b24:	ldrh	r1, [r6], #2
   18b28:	mov	r0, r4
   18b2c:	blx	r7
   18b30:	b	18ae8 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x138>
   18b34:	mov	r0, r4
   18b38:	bl	14d60 <test_print@@Base+0x1614>
   18b3c:	b	18acc <flatcc_json_printer_uint16_enum_vector_field@@Base+0x11c>
   18b40:	mov	r0, r4
   18b44:	bl	14d60 <test_print@@Base+0x1614>
   18b48:	b	18b24 <flatcc_json_printer_uint16_enum_vector_field@@Base+0x174>

00018b4c <flatcc_json_printer_uint32_enum_vector_field@@Base>:
   18b4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b50:	ldrb	lr, [r0, #27]
   18b54:	ldr	r9, [sp, #32]
   18b58:	ldr	r7, [sp, #36]	; 0x24
   18b5c:	cmp	lr, #0
   18b60:	beq	18b6c <flatcc_json_printer_uint32_enum_vector_field@@Base+0x20>
   18b64:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18b68:	b	179a4 <flatcc_json_printer_uint32_vector_field@@Base>
   18b6c:	mov	r5, r1
   18b70:	mov	r4, r0
   18b74:	mov	r1, r2
   18b78:	mov	r0, r5
   18b7c:	mov	r8, r3
   18b80:	bl	147ec <test_print@@Base+0x10a0>
   18b84:	cmp	r0, #0
   18b88:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18b8c:	ldr	r3, [r5, #16]
   18b90:	mov	r1, r8
   18b94:	cmp	r3, #0
   18b98:	add	r2, r3, #1
   18b9c:	ldrne	r3, [r4, #20]
   18ba0:	str	r2, [r5, #16]
   18ba4:	addne	r2, r3, #1
   18ba8:	strne	r2, [r4, #20]
   18bac:	movne	r2, #44	; 0x2c
   18bb0:	strbne	r2, [r3]
   18bb4:	ldr	r3, [r0]
   18bb8:	mov	r2, r9
   18bbc:	add	r6, r0, r3
   18bc0:	ldr	r5, [r0, r3]
   18bc4:	mov	r0, r4
   18bc8:	bl	14d7c <test_print@@Base+0x1630>
   18bcc:	ldr	r3, [r4, #32]
   18bd0:	cmp	r5, #0
   18bd4:	add	r3, r3, #1
   18bd8:	str	r3, [r4, #32]
   18bdc:	ldr	r3, [r4, #20]
   18be0:	add	r2, r3, #1
   18be4:	str	r2, [r4, #20]
   18be8:	mov	r2, #91	; 0x5b
   18bec:	strb	r2, [r3]
   18bf0:	bne	18c40 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xf4>
   18bf4:	ldrb	r3, [r4, #25]
   18bf8:	cmp	r3, #0
   18bfc:	beq	18c28 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xdc>
   18c00:	ldr	r3, [r4, #20]
   18c04:	mov	r0, r4
   18c08:	add	r2, r3, #1
   18c0c:	str	r2, [r4, #20]
   18c10:	mov	r2, #10
   18c14:	strb	r2, [r3]
   18c18:	ldr	r3, [r4, #32]
   18c1c:	sub	r3, r3, #1
   18c20:	str	r3, [r4, #32]
   18c24:	bl	14b50 <test_print@@Base+0x1404>
   18c28:	ldr	r3, [r4, #20]
   18c2c:	add	r2, r3, #1
   18c30:	str	r2, [r4, #20]
   18c34:	mov	r2, #93	; 0x5d
   18c38:	strb	r2, [r3]
   18c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18c40:	ldrb	r3, [r4, #25]
   18c44:	cmp	r3, #0
   18c48:	beq	18cd0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x184>
   18c4c:	ldr	r3, [r4, #20]
   18c50:	mov	r0, r4
   18c54:	add	r2, r3, #1
   18c58:	str	r2, [r4, #20]
   18c5c:	mov	r2, #10
   18c60:	strb	r2, [r3]
   18c64:	bl	14b50 <test_print@@Base+0x1404>
   18c68:	ldr	r1, [r6, #4]
   18c6c:	mov	r0, r4
   18c70:	blx	r7
   18c74:	add	r6, r6, #8
   18c78:	sub	r5, r5, #1
   18c7c:	mov	r8, #44	; 0x2c
   18c80:	mov	r9, #10
   18c84:	subs	r5, r5, #1
   18c88:	bcc	18bf4 <flatcc_json_printer_uint32_enum_vector_field@@Base+0xa8>
   18c8c:	ldr	r3, [r4, #20]
   18c90:	add	r2, r3, #1
   18c94:	str	r2, [r4, #20]
   18c98:	strb	r8, [r3]
   18c9c:	ldrb	r3, [r4, #25]
   18ca0:	cmp	r3, #0
   18ca4:	beq	18cdc <flatcc_json_printer_uint32_enum_vector_field@@Base+0x190>
   18ca8:	ldr	r3, [r4, #20]
   18cac:	mov	r0, r4
   18cb0:	add	r2, r3, #1
   18cb4:	str	r2, [r4, #20]
   18cb8:	strb	r9, [r3]
   18cbc:	bl	14b50 <test_print@@Base+0x1404>
   18cc0:	ldr	r1, [r6], #4
   18cc4:	mov	r0, r4
   18cc8:	blx	r7
   18ccc:	b	18c84 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x138>
   18cd0:	mov	r0, r4
   18cd4:	bl	14d60 <test_print@@Base+0x1614>
   18cd8:	b	18c68 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x11c>
   18cdc:	mov	r0, r4
   18ce0:	bl	14d60 <test_print@@Base+0x1614>
   18ce4:	b	18cc0 <flatcc_json_printer_uint32_enum_vector_field@@Base+0x174>

00018ce8 <flatcc_json_printer_uint64_enum_vector_field@@Base>:
   18ce8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18cec:	ldrb	lr, [r0, #27]
   18cf0:	ldr	r9, [sp, #32]
   18cf4:	ldr	r7, [sp, #36]	; 0x24
   18cf8:	cmp	lr, #0
   18cfc:	beq	18d08 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x20>
   18d00:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18d04:	b	17b3c <flatcc_json_printer_uint64_vector_field@@Base>
   18d08:	mov	r5, r1
   18d0c:	mov	r4, r0
   18d10:	mov	r1, r2
   18d14:	mov	r0, r5
   18d18:	mov	r8, r3
   18d1c:	bl	147ec <test_print@@Base+0x10a0>
   18d20:	cmp	r0, #0
   18d24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18d28:	ldr	r3, [r5, #16]
   18d2c:	mov	r1, r8
   18d30:	cmp	r3, #0
   18d34:	add	r2, r3, #1
   18d38:	ldrne	r3, [r4, #20]
   18d3c:	str	r2, [r5, #16]
   18d40:	addne	r2, r3, #1
   18d44:	strne	r2, [r4, #20]
   18d48:	movne	r2, #44	; 0x2c
   18d4c:	strbne	r2, [r3]
   18d50:	ldr	r3, [r0]
   18d54:	mov	r2, r9
   18d58:	add	r6, r0, r3
   18d5c:	ldr	r5, [r0, r3]
   18d60:	mov	r0, r4
   18d64:	bl	14d7c <test_print@@Base+0x1630>
   18d68:	ldr	r3, [r4, #32]
   18d6c:	cmp	r5, #0
   18d70:	add	r3, r3, #1
   18d74:	str	r3, [r4, #32]
   18d78:	ldr	r3, [r4, #20]
   18d7c:	add	r2, r3, #1
   18d80:	str	r2, [r4, #20]
   18d84:	mov	r2, #91	; 0x5b
   18d88:	strb	r2, [r3]
   18d8c:	bne	18ddc <flatcc_json_printer_uint64_enum_vector_field@@Base+0xf4>
   18d90:	ldrb	r3, [r4, #25]
   18d94:	cmp	r3, #0
   18d98:	beq	18dc4 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xdc>
   18d9c:	ldr	r3, [r4, #20]
   18da0:	mov	r0, r4
   18da4:	add	r2, r3, #1
   18da8:	str	r2, [r4, #20]
   18dac:	mov	r2, #10
   18db0:	strb	r2, [r3]
   18db4:	ldr	r3, [r4, #32]
   18db8:	sub	r3, r3, #1
   18dbc:	str	r3, [r4, #32]
   18dc0:	bl	14b50 <test_print@@Base+0x1404>
   18dc4:	ldr	r3, [r4, #20]
   18dc8:	add	r2, r3, #1
   18dcc:	str	r2, [r4, #20]
   18dd0:	mov	r2, #93	; 0x5d
   18dd4:	strb	r2, [r3]
   18dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ddc:	ldrb	r3, [r4, #25]
   18de0:	cmp	r3, #0
   18de4:	beq	18e6c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x184>
   18de8:	ldr	r3, [r4, #20]
   18dec:	mov	r0, r4
   18df0:	add	r2, r3, #1
   18df4:	str	r2, [r4, #20]
   18df8:	mov	r2, #10
   18dfc:	strb	r2, [r3]
   18e00:	bl	14b50 <test_print@@Base+0x1404>
   18e04:	ldrd	r2, [r6, #4]
   18e08:	mov	r0, r4
   18e0c:	blx	r7
   18e10:	add	r6, r6, #12
   18e14:	sub	r5, r5, #1
   18e18:	mov	r8, #44	; 0x2c
   18e1c:	mov	r9, #10
   18e20:	subs	r5, r5, #1
   18e24:	bcc	18d90 <flatcc_json_printer_uint64_enum_vector_field@@Base+0xa8>
   18e28:	ldr	r3, [r4, #20]
   18e2c:	add	r2, r3, #1
   18e30:	str	r2, [r4, #20]
   18e34:	strb	r8, [r3]
   18e38:	ldrb	r3, [r4, #25]
   18e3c:	cmp	r3, #0
   18e40:	beq	18e78 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x190>
   18e44:	ldr	r3, [r4, #20]
   18e48:	mov	r0, r4
   18e4c:	add	r2, r3, #1
   18e50:	str	r2, [r4, #20]
   18e54:	strb	r9, [r3]
   18e58:	bl	14b50 <test_print@@Base+0x1404>
   18e5c:	ldrd	r2, [r6], #8
   18e60:	mov	r0, r4
   18e64:	blx	r7
   18e68:	b	18e20 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x138>
   18e6c:	mov	r0, r4
   18e70:	bl	14d60 <test_print@@Base+0x1614>
   18e74:	b	18e04 <flatcc_json_printer_uint64_enum_vector_field@@Base+0x11c>
   18e78:	mov	r0, r4
   18e7c:	bl	14d60 <test_print@@Base+0x1614>
   18e80:	b	18e5c <flatcc_json_printer_uint64_enum_vector_field@@Base+0x174>

00018e84 <flatcc_json_printer_int8_enum_vector_field@@Base>:
   18e84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18e88:	ldrb	lr, [r0, #27]
   18e8c:	ldr	r9, [sp, #32]
   18e90:	ldr	r7, [sp, #36]	; 0x24
   18e94:	cmp	lr, #0
   18e98:	beq	18ea4 <flatcc_json_printer_int8_enum_vector_field@@Base+0x20>
   18e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   18ea0:	b	17cd4 <flatcc_json_printer_int8_vector_field@@Base>
   18ea4:	mov	r5, r1
   18ea8:	mov	r4, r0
   18eac:	mov	r1, r2
   18eb0:	mov	r0, r5
   18eb4:	mov	r6, r3
   18eb8:	bl	147ec <test_print@@Base+0x10a0>
   18ebc:	cmp	r0, #0
   18ec0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   18ec4:	ldr	r3, [r5, #16]
   18ec8:	mov	r1, r6
   18ecc:	cmp	r3, #0
   18ed0:	add	r2, r3, #1
   18ed4:	ldrne	r3, [r4, #20]
   18ed8:	str	r2, [r5, #16]
   18edc:	addne	r2, r3, #1
   18ee0:	strne	r2, [r4, #20]
   18ee4:	movne	r2, #44	; 0x2c
   18ee8:	strbne	r2, [r3]
   18eec:	ldr	r3, [r0]
   18ef0:	mov	r2, r9
   18ef4:	add	r8, r0, r3
   18ef8:	ldr	r5, [r0, r3]
   18efc:	mov	r0, r4
   18f00:	bl	14d7c <test_print@@Base+0x1630>
   18f04:	ldr	r3, [r4, #32]
   18f08:	cmp	r5, #0
   18f0c:	add	r3, r3, #1
   18f10:	str	r3, [r4, #32]
   18f14:	ldr	r3, [r4, #20]
   18f18:	add	r2, r3, #1
   18f1c:	str	r2, [r4, #20]
   18f20:	mov	r2, #91	; 0x5b
   18f24:	strb	r2, [r3]
   18f28:	bne	18f78 <flatcc_json_printer_int8_enum_vector_field@@Base+0xf4>
   18f2c:	ldrb	r3, [r4, #25]
   18f30:	cmp	r3, #0
   18f34:	beq	18f60 <flatcc_json_printer_int8_enum_vector_field@@Base+0xdc>
   18f38:	ldr	r3, [r4, #20]
   18f3c:	mov	r0, r4
   18f40:	add	r2, r3, #1
   18f44:	str	r2, [r4, #20]
   18f48:	mov	r2, #10
   18f4c:	strb	r2, [r3]
   18f50:	ldr	r3, [r4, #32]
   18f54:	sub	r3, r3, #1
   18f58:	str	r3, [r4, #32]
   18f5c:	bl	14b50 <test_print@@Base+0x1404>
   18f60:	ldr	r3, [r4, #20]
   18f64:	add	r2, r3, #1
   18f68:	str	r2, [r4, #20]
   18f6c:	mov	r2, #93	; 0x5d
   18f70:	strb	r2, [r3]
   18f74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18f78:	ldrb	r3, [r4, #25]
   18f7c:	cmp	r3, #0
   18f80:	beq	1900c <flatcc_json_printer_int8_enum_vector_field@@Base+0x188>
   18f84:	ldr	r3, [r4, #20]
   18f88:	mov	r0, r4
   18f8c:	add	r2, r3, #1
   18f90:	str	r2, [r4, #20]
   18f94:	mov	r2, #10
   18f98:	strb	r2, [r3]
   18f9c:	bl	14b50 <test_print@@Base+0x1404>
   18fa0:	ldrsb	r1, [r8, #4]
   18fa4:	mov	r0, r4
   18fa8:	blx	r7
   18fac:	add	r5, r5, #4
   18fb0:	add	r6, r8, #5
   18fb4:	add	r5, r8, r5
   18fb8:	mov	r9, #10
   18fbc:	mov	r8, #44	; 0x2c
   18fc0:	cmp	r6, r5
   18fc4:	beq	18f2c <flatcc_json_printer_int8_enum_vector_field@@Base+0xa8>
   18fc8:	ldr	r3, [r4, #20]
   18fcc:	add	r2, r3, #1
   18fd0:	str	r2, [r4, #20]
   18fd4:	strb	r8, [r3]
   18fd8:	ldrb	r3, [r4, #25]
   18fdc:	cmp	r3, #0
   18fe0:	beq	19018 <flatcc_json_printer_int8_enum_vector_field@@Base+0x194>
   18fe4:	ldr	r3, [r4, #20]
   18fe8:	mov	r0, r4
   18fec:	add	r2, r3, #1
   18ff0:	str	r2, [r4, #20]
   18ff4:	strb	r9, [r3]
   18ff8:	bl	14b50 <test_print@@Base+0x1404>
   18ffc:	ldrsb	r1, [r6], #1
   19000:	mov	r0, r4
   19004:	blx	r7
   19008:	b	18fc0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x13c>
   1900c:	mov	r0, r4
   19010:	bl	14d60 <test_print@@Base+0x1614>
   19014:	b	18fa0 <flatcc_json_printer_int8_enum_vector_field@@Base+0x11c>
   19018:	mov	r0, r4
   1901c:	bl	14d60 <test_print@@Base+0x1614>
   19020:	b	18ffc <flatcc_json_printer_int8_enum_vector_field@@Base+0x178>

00019024 <flatcc_json_printer_int16_enum_vector_field@@Base>:
   19024:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19028:	ldrb	lr, [r0, #27]
   1902c:	ldr	r9, [sp, #32]
   19030:	ldr	r7, [sp, #36]	; 0x24
   19034:	cmp	lr, #0
   19038:	beq	19044 <flatcc_json_printer_int16_enum_vector_field@@Base+0x20>
   1903c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19040:	b	17e70 <flatcc_json_printer_int16_vector_field@@Base>
   19044:	mov	r5, r1
   19048:	mov	r4, r0
   1904c:	mov	r1, r2
   19050:	mov	r0, r5
   19054:	mov	r8, r3
   19058:	bl	147ec <test_print@@Base+0x10a0>
   1905c:	cmp	r0, #0
   19060:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19064:	ldr	r3, [r5, #16]
   19068:	mov	r1, r8
   1906c:	cmp	r3, #0
   19070:	add	r2, r3, #1
   19074:	ldrne	r3, [r4, #20]
   19078:	str	r2, [r5, #16]
   1907c:	addne	r2, r3, #1
   19080:	strne	r2, [r4, #20]
   19084:	movne	r2, #44	; 0x2c
   19088:	strbne	r2, [r3]
   1908c:	ldr	r3, [r0]
   19090:	mov	r2, r9
   19094:	add	r6, r0, r3
   19098:	ldr	r5, [r0, r3]
   1909c:	mov	r0, r4
   190a0:	bl	14d7c <test_print@@Base+0x1630>
   190a4:	ldr	r3, [r4, #32]
   190a8:	cmp	r5, #0
   190ac:	add	r3, r3, #1
   190b0:	str	r3, [r4, #32]
   190b4:	ldr	r3, [r4, #20]
   190b8:	add	r2, r3, #1
   190bc:	str	r2, [r4, #20]
   190c0:	mov	r2, #91	; 0x5b
   190c4:	strb	r2, [r3]
   190c8:	bne	19118 <flatcc_json_printer_int16_enum_vector_field@@Base+0xf4>
   190cc:	ldrb	r3, [r4, #25]
   190d0:	cmp	r3, #0
   190d4:	beq	19100 <flatcc_json_printer_int16_enum_vector_field@@Base+0xdc>
   190d8:	ldr	r3, [r4, #20]
   190dc:	mov	r0, r4
   190e0:	add	r2, r3, #1
   190e4:	str	r2, [r4, #20]
   190e8:	mov	r2, #10
   190ec:	strb	r2, [r3]
   190f0:	ldr	r3, [r4, #32]
   190f4:	sub	r3, r3, #1
   190f8:	str	r3, [r4, #32]
   190fc:	bl	14b50 <test_print@@Base+0x1404>
   19100:	ldr	r3, [r4, #20]
   19104:	add	r2, r3, #1
   19108:	str	r2, [r4, #20]
   1910c:	mov	r2, #93	; 0x5d
   19110:	strb	r2, [r3]
   19114:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19118:	ldrb	r3, [r4, #25]
   1911c:	cmp	r3, #0
   19120:	beq	191a8 <flatcc_json_printer_int16_enum_vector_field@@Base+0x184>
   19124:	ldr	r3, [r4, #20]
   19128:	mov	r0, r4
   1912c:	add	r2, r3, #1
   19130:	str	r2, [r4, #20]
   19134:	mov	r2, #10
   19138:	strb	r2, [r3]
   1913c:	bl	14b50 <test_print@@Base+0x1404>
   19140:	ldrsh	r1, [r6, #4]
   19144:	mov	r0, r4
   19148:	blx	r7
   1914c:	add	r6, r6, #6
   19150:	sub	r5, r5, #1
   19154:	mov	r8, #44	; 0x2c
   19158:	mov	r9, #10
   1915c:	subs	r5, r5, #1
   19160:	bcc	190cc <flatcc_json_printer_int16_enum_vector_field@@Base+0xa8>
   19164:	ldr	r3, [r4, #20]
   19168:	add	r2, r3, #1
   1916c:	str	r2, [r4, #20]
   19170:	strb	r8, [r3]
   19174:	ldrb	r3, [r4, #25]
   19178:	cmp	r3, #0
   1917c:	beq	191b4 <flatcc_json_printer_int16_enum_vector_field@@Base+0x190>
   19180:	ldr	r3, [r4, #20]
   19184:	mov	r0, r4
   19188:	add	r2, r3, #1
   1918c:	str	r2, [r4, #20]
   19190:	strb	r9, [r3]
   19194:	bl	14b50 <test_print@@Base+0x1404>
   19198:	ldrsh	r1, [r6], #2
   1919c:	mov	r0, r4
   191a0:	blx	r7
   191a4:	b	1915c <flatcc_json_printer_int16_enum_vector_field@@Base+0x138>
   191a8:	mov	r0, r4
   191ac:	bl	14d60 <test_print@@Base+0x1614>
   191b0:	b	19140 <flatcc_json_printer_int16_enum_vector_field@@Base+0x11c>
   191b4:	mov	r0, r4
   191b8:	bl	14d60 <test_print@@Base+0x1614>
   191bc:	b	19198 <flatcc_json_printer_int16_enum_vector_field@@Base+0x174>

000191c0 <flatcc_json_printer_int32_enum_vector_field@@Base>:
   191c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   191c4:	ldrb	lr, [r0, #27]
   191c8:	ldr	r9, [sp, #32]
   191cc:	ldr	r7, [sp, #36]	; 0x24
   191d0:	cmp	lr, #0
   191d4:	beq	191e0 <flatcc_json_printer_int32_enum_vector_field@@Base+0x20>
   191d8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   191dc:	b	18008 <flatcc_json_printer_int32_vector_field@@Base>
   191e0:	mov	r5, r1
   191e4:	mov	r4, r0
   191e8:	mov	r1, r2
   191ec:	mov	r0, r5
   191f0:	mov	r8, r3
   191f4:	bl	147ec <test_print@@Base+0x10a0>
   191f8:	cmp	r0, #0
   191fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19200:	ldr	r3, [r5, #16]
   19204:	mov	r1, r8
   19208:	cmp	r3, #0
   1920c:	add	r2, r3, #1
   19210:	ldrne	r3, [r4, #20]
   19214:	str	r2, [r5, #16]
   19218:	addne	r2, r3, #1
   1921c:	strne	r2, [r4, #20]
   19220:	movne	r2, #44	; 0x2c
   19224:	strbne	r2, [r3]
   19228:	ldr	r3, [r0]
   1922c:	mov	r2, r9
   19230:	add	r6, r0, r3
   19234:	ldr	r5, [r0, r3]
   19238:	mov	r0, r4
   1923c:	bl	14d7c <test_print@@Base+0x1630>
   19240:	ldr	r3, [r4, #32]
   19244:	cmp	r5, #0
   19248:	add	r3, r3, #1
   1924c:	str	r3, [r4, #32]
   19250:	ldr	r3, [r4, #20]
   19254:	add	r2, r3, #1
   19258:	str	r2, [r4, #20]
   1925c:	mov	r2, #91	; 0x5b
   19260:	strb	r2, [r3]
   19264:	bne	192b4 <flatcc_json_printer_int32_enum_vector_field@@Base+0xf4>
   19268:	ldrb	r3, [r4, #25]
   1926c:	cmp	r3, #0
   19270:	beq	1929c <flatcc_json_printer_int32_enum_vector_field@@Base+0xdc>
   19274:	ldr	r3, [r4, #20]
   19278:	mov	r0, r4
   1927c:	add	r2, r3, #1
   19280:	str	r2, [r4, #20]
   19284:	mov	r2, #10
   19288:	strb	r2, [r3]
   1928c:	ldr	r3, [r4, #32]
   19290:	sub	r3, r3, #1
   19294:	str	r3, [r4, #32]
   19298:	bl	14b50 <test_print@@Base+0x1404>
   1929c:	ldr	r3, [r4, #20]
   192a0:	add	r2, r3, #1
   192a4:	str	r2, [r4, #20]
   192a8:	mov	r2, #93	; 0x5d
   192ac:	strb	r2, [r3]
   192b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   192b4:	ldrb	r3, [r4, #25]
   192b8:	cmp	r3, #0
   192bc:	beq	19344 <flatcc_json_printer_int32_enum_vector_field@@Base+0x184>
   192c0:	ldr	r3, [r4, #20]
   192c4:	mov	r0, r4
   192c8:	add	r2, r3, #1
   192cc:	str	r2, [r4, #20]
   192d0:	mov	r2, #10
   192d4:	strb	r2, [r3]
   192d8:	bl	14b50 <test_print@@Base+0x1404>
   192dc:	ldr	r1, [r6, #4]
   192e0:	mov	r0, r4
   192e4:	blx	r7
   192e8:	add	r6, r6, #8
   192ec:	sub	r5, r5, #1
   192f0:	mov	r8, #44	; 0x2c
   192f4:	mov	r9, #10
   192f8:	subs	r5, r5, #1
   192fc:	bcc	19268 <flatcc_json_printer_int32_enum_vector_field@@Base+0xa8>
   19300:	ldr	r3, [r4, #20]
   19304:	add	r2, r3, #1
   19308:	str	r2, [r4, #20]
   1930c:	strb	r8, [r3]
   19310:	ldrb	r3, [r4, #25]
   19314:	cmp	r3, #0
   19318:	beq	19350 <flatcc_json_printer_int32_enum_vector_field@@Base+0x190>
   1931c:	ldr	r3, [r4, #20]
   19320:	mov	r0, r4
   19324:	add	r2, r3, #1
   19328:	str	r2, [r4, #20]
   1932c:	strb	r9, [r3]
   19330:	bl	14b50 <test_print@@Base+0x1404>
   19334:	ldr	r1, [r6], #4
   19338:	mov	r0, r4
   1933c:	blx	r7
   19340:	b	192f8 <flatcc_json_printer_int32_enum_vector_field@@Base+0x138>
   19344:	mov	r0, r4
   19348:	bl	14d60 <test_print@@Base+0x1614>
   1934c:	b	192dc <flatcc_json_printer_int32_enum_vector_field@@Base+0x11c>
   19350:	mov	r0, r4
   19354:	bl	14d60 <test_print@@Base+0x1614>
   19358:	b	19334 <flatcc_json_printer_int32_enum_vector_field@@Base+0x174>

0001935c <flatcc_json_printer_int64_enum_vector_field@@Base>:
   1935c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19360:	ldrb	lr, [r0, #27]
   19364:	ldr	r9, [sp, #32]
   19368:	ldr	r7, [sp, #36]	; 0x24
   1936c:	cmp	lr, #0
   19370:	beq	1937c <flatcc_json_printer_int64_enum_vector_field@@Base+0x20>
   19374:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19378:	b	181a0 <flatcc_json_printer_int64_vector_field@@Base>
   1937c:	mov	r5, r1
   19380:	mov	r4, r0
   19384:	mov	r1, r2
   19388:	mov	r0, r5
   1938c:	mov	r8, r3
   19390:	bl	147ec <test_print@@Base+0x10a0>
   19394:	cmp	r0, #0
   19398:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1939c:	ldr	r3, [r5, #16]
   193a0:	mov	r1, r8
   193a4:	cmp	r3, #0
   193a8:	add	r2, r3, #1
   193ac:	ldrne	r3, [r4, #20]
   193b0:	str	r2, [r5, #16]
   193b4:	addne	r2, r3, #1
   193b8:	strne	r2, [r4, #20]
   193bc:	movne	r2, #44	; 0x2c
   193c0:	strbne	r2, [r3]
   193c4:	ldr	r3, [r0]
   193c8:	mov	r2, r9
   193cc:	add	r6, r0, r3
   193d0:	ldr	r5, [r0, r3]
   193d4:	mov	r0, r4
   193d8:	bl	14d7c <test_print@@Base+0x1630>
   193dc:	ldr	r3, [r4, #32]
   193e0:	cmp	r5, #0
   193e4:	add	r3, r3, #1
   193e8:	str	r3, [r4, #32]
   193ec:	ldr	r3, [r4, #20]
   193f0:	add	r2, r3, #1
   193f4:	str	r2, [r4, #20]
   193f8:	mov	r2, #91	; 0x5b
   193fc:	strb	r2, [r3]
   19400:	bne	19450 <flatcc_json_printer_int64_enum_vector_field@@Base+0xf4>
   19404:	ldrb	r3, [r4, #25]
   19408:	cmp	r3, #0
   1940c:	beq	19438 <flatcc_json_printer_int64_enum_vector_field@@Base+0xdc>
   19410:	ldr	r3, [r4, #20]
   19414:	mov	r0, r4
   19418:	add	r2, r3, #1
   1941c:	str	r2, [r4, #20]
   19420:	mov	r2, #10
   19424:	strb	r2, [r3]
   19428:	ldr	r3, [r4, #32]
   1942c:	sub	r3, r3, #1
   19430:	str	r3, [r4, #32]
   19434:	bl	14b50 <test_print@@Base+0x1404>
   19438:	ldr	r3, [r4, #20]
   1943c:	add	r2, r3, #1
   19440:	str	r2, [r4, #20]
   19444:	mov	r2, #93	; 0x5d
   19448:	strb	r2, [r3]
   1944c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19450:	ldrb	r3, [r4, #25]
   19454:	cmp	r3, #0
   19458:	beq	194e0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x184>
   1945c:	ldr	r3, [r4, #20]
   19460:	mov	r0, r4
   19464:	add	r2, r3, #1
   19468:	str	r2, [r4, #20]
   1946c:	mov	r2, #10
   19470:	strb	r2, [r3]
   19474:	bl	14b50 <test_print@@Base+0x1404>
   19478:	ldrd	r2, [r6, #4]
   1947c:	mov	r0, r4
   19480:	blx	r7
   19484:	add	r6, r6, #12
   19488:	sub	r5, r5, #1
   1948c:	mov	r8, #44	; 0x2c
   19490:	mov	r9, #10
   19494:	subs	r5, r5, #1
   19498:	bcc	19404 <flatcc_json_printer_int64_enum_vector_field@@Base+0xa8>
   1949c:	ldr	r3, [r4, #20]
   194a0:	add	r2, r3, #1
   194a4:	str	r2, [r4, #20]
   194a8:	strb	r8, [r3]
   194ac:	ldrb	r3, [r4, #25]
   194b0:	cmp	r3, #0
   194b4:	beq	194ec <flatcc_json_printer_int64_enum_vector_field@@Base+0x190>
   194b8:	ldr	r3, [r4, #20]
   194bc:	mov	r0, r4
   194c0:	add	r2, r3, #1
   194c4:	str	r2, [r4, #20]
   194c8:	strb	r9, [r3]
   194cc:	bl	14b50 <test_print@@Base+0x1404>
   194d0:	ldrd	r2, [r6], #8
   194d4:	mov	r0, r4
   194d8:	blx	r7
   194dc:	b	19494 <flatcc_json_printer_int64_enum_vector_field@@Base+0x138>
   194e0:	mov	r0, r4
   194e4:	bl	14d60 <test_print@@Base+0x1614>
   194e8:	b	19478 <flatcc_json_printer_int64_enum_vector_field@@Base+0x11c>
   194ec:	mov	r0, r4
   194f0:	bl	14d60 <test_print@@Base+0x1614>
   194f4:	b	194d0 <flatcc_json_printer_int64_enum_vector_field@@Base+0x174>

000194f8 <flatcc_json_printer_bool_enum_vector_field@@Base>:
   194f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   194fc:	ldrb	lr, [r0, #27]
   19500:	ldr	r9, [sp, #32]
   19504:	ldr	r7, [sp, #36]	; 0x24
   19508:	cmp	lr, #0
   1950c:	beq	19518 <flatcc_json_printer_bool_enum_vector_field@@Base+0x20>
   19510:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19514:	b	18338 <flatcc_json_printer_bool_vector_field@@Base>
   19518:	mov	r5, r1
   1951c:	mov	r4, r0
   19520:	mov	r1, r2
   19524:	mov	r0, r5
   19528:	mov	r6, r3
   1952c:	bl	147ec <test_print@@Base+0x10a0>
   19530:	cmp	r0, #0
   19534:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19538:	ldr	r3, [r5, #16]
   1953c:	mov	r1, r6
   19540:	cmp	r3, #0
   19544:	add	r2, r3, #1
   19548:	ldrne	r3, [r4, #20]
   1954c:	str	r2, [r5, #16]
   19550:	addne	r2, r3, #1
   19554:	strne	r2, [r4, #20]
   19558:	movne	r2, #44	; 0x2c
   1955c:	strbne	r2, [r3]
   19560:	ldr	r3, [r0]
   19564:	mov	r2, r9
   19568:	add	r8, r0, r3
   1956c:	ldr	r5, [r0, r3]
   19570:	mov	r0, r4
   19574:	bl	14d7c <test_print@@Base+0x1630>
   19578:	ldr	r3, [r4, #32]
   1957c:	cmp	r5, #0
   19580:	add	r3, r3, #1
   19584:	str	r3, [r4, #32]
   19588:	ldr	r3, [r4, #20]
   1958c:	add	r2, r3, #1
   19590:	str	r2, [r4, #20]
   19594:	mov	r2, #91	; 0x5b
   19598:	strb	r2, [r3]
   1959c:	bne	195ec <flatcc_json_printer_bool_enum_vector_field@@Base+0xf4>
   195a0:	ldrb	r3, [r4, #25]
   195a4:	cmp	r3, #0
   195a8:	beq	195d4 <flatcc_json_printer_bool_enum_vector_field@@Base+0xdc>
   195ac:	ldr	r3, [r4, #20]
   195b0:	mov	r0, r4
   195b4:	add	r2, r3, #1
   195b8:	str	r2, [r4, #20]
   195bc:	mov	r2, #10
   195c0:	strb	r2, [r3]
   195c4:	ldr	r3, [r4, #32]
   195c8:	sub	r3, r3, #1
   195cc:	str	r3, [r4, #32]
   195d0:	bl	14b50 <test_print@@Base+0x1404>
   195d4:	ldr	r3, [r4, #20]
   195d8:	add	r2, r3, #1
   195dc:	str	r2, [r4, #20]
   195e0:	mov	r2, #93	; 0x5d
   195e4:	strb	r2, [r3]
   195e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   195ec:	ldrb	r3, [r4, #25]
   195f0:	cmp	r3, #0
   195f4:	beq	19680 <flatcc_json_printer_bool_enum_vector_field@@Base+0x188>
   195f8:	ldr	r3, [r4, #20]
   195fc:	mov	r0, r4
   19600:	add	r2, r3, #1
   19604:	str	r2, [r4, #20]
   19608:	mov	r2, #10
   1960c:	strb	r2, [r3]
   19610:	bl	14b50 <test_print@@Base+0x1404>
   19614:	ldrb	r1, [r8, #4]
   19618:	mov	r0, r4
   1961c:	blx	r7
   19620:	add	r5, r5, #4
   19624:	add	r6, r8, #5
   19628:	add	r5, r8, r5
   1962c:	mov	r9, #10
   19630:	mov	r8, #44	; 0x2c
   19634:	cmp	r6, r5
   19638:	beq	195a0 <flatcc_json_printer_bool_enum_vector_field@@Base+0xa8>
   1963c:	ldr	r3, [r4, #20]
   19640:	add	r2, r3, #1
   19644:	str	r2, [r4, #20]
   19648:	strb	r8, [r3]
   1964c:	ldrb	r3, [r4, #25]
   19650:	cmp	r3, #0
   19654:	beq	1968c <flatcc_json_printer_bool_enum_vector_field@@Base+0x194>
   19658:	ldr	r3, [r4, #20]
   1965c:	mov	r0, r4
   19660:	add	r2, r3, #1
   19664:	str	r2, [r4, #20]
   19668:	strb	r9, [r3]
   1966c:	bl	14b50 <test_print@@Base+0x1404>
   19670:	ldrb	r1, [r6], #1
   19674:	mov	r0, r4
   19678:	blx	r7
   1967c:	b	19634 <flatcc_json_printer_bool_enum_vector_field@@Base+0x13c>
   19680:	mov	r0, r4
   19684:	bl	14d60 <test_print@@Base+0x1614>
   19688:	b	19614 <flatcc_json_printer_bool_enum_vector_field@@Base+0x11c>
   1968c:	mov	r0, r4
   19690:	bl	14d60 <test_print@@Base+0x1614>
   19694:	b	19670 <flatcc_json_printer_bool_enum_vector_field@@Base+0x178>

00019698 <flatcc_json_printer_struct_vector_field@@Base>:
   19698:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1969c:	mov	r5, r1
   196a0:	mov	r4, r0
   196a4:	mov	r1, r2
   196a8:	mov	r0, r5
   196ac:	mov	r8, r3
   196b0:	bl	147ec <test_print@@Base+0x10a0>
   196b4:	ldr	r9, [sp, #44]	; 0x2c
   196b8:	ldr	r7, [sp, #48]	; 0x30
   196bc:	cmp	r0, #0
   196c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196c4:	ldr	r3, [r5, #16]
   196c8:	mov	r1, r8
   196cc:	cmp	r3, #0
   196d0:	add	r2, r3, #1
   196d4:	ldrne	r3, [r4, #20]
   196d8:	str	r2, [r5, #16]
   196dc:	addne	r2, r3, #1
   196e0:	strne	r2, [r4, #20]
   196e4:	movne	r2, #44	; 0x2c
   196e8:	strbne	r2, [r3]
   196ec:	ldr	r2, [r0]
   196f0:	add	r6, r0, r2
   196f4:	ldr	r5, [r0, r2]
   196f8:	ldr	r2, [sp, #40]	; 0x28
   196fc:	mov	r0, r4
   19700:	bl	14d7c <test_print@@Base+0x1630>
   19704:	ldr	r3, [r4, #32]
   19708:	cmp	r5, #0
   1970c:	add	r3, r3, #1
   19710:	str	r3, [r4, #32]
   19714:	ldr	r3, [r4, #20]
   19718:	add	r2, r3, #1
   1971c:	str	r2, [r4, #20]
   19720:	mov	r2, #91	; 0x5b
   19724:	strb	r2, [r3]
   19728:	bne	19778 <flatcc_json_printer_struct_vector_field@@Base+0xe0>
   1972c:	ldrb	r3, [r4, #25]
   19730:	cmp	r3, #0
   19734:	beq	19760 <flatcc_json_printer_struct_vector_field@@Base+0xc8>
   19738:	ldr	r3, [r4, #20]
   1973c:	mov	r0, r4
   19740:	add	r2, r3, #1
   19744:	str	r2, [r4, #20]
   19748:	mov	r2, #10
   1974c:	strb	r2, [r3]
   19750:	ldr	r3, [r4, #32]
   19754:	sub	r3, r3, #1
   19758:	str	r3, [r4, #32]
   1975c:	bl	14b50 <test_print@@Base+0x1404>
   19760:	ldr	r3, [r4, #20]
   19764:	add	r2, r3, #1
   19768:	str	r2, [r4, #20]
   1976c:	mov	r2, #93	; 0x5d
   19770:	strb	r2, [r3]
   19774:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19778:	ldrb	r3, [r4, #25]
   1977c:	cmp	r3, #0
   19780:	beq	198d8 <flatcc_json_printer_struct_vector_field@@Base+0x240>
   19784:	ldr	r3, [r4, #20]
   19788:	mov	r0, r4
   1978c:	add	r2, r3, #1
   19790:	str	r2, [r4, #20]
   19794:	mov	r2, #10
   19798:	strb	r2, [r3]
   1979c:	bl	14b50 <test_print@@Base+0x1404>
   197a0:	ldr	r3, [r4, #32]
   197a4:	add	r6, r6, #4
   197a8:	add	r3, r3, #1
   197ac:	str	r3, [r4, #32]
   197b0:	ldr	r3, [r4, #20]
   197b4:	mov	r1, r6
   197b8:	add	r2, r3, #1
   197bc:	str	r2, [r4, #20]
   197c0:	mov	r2, #123	; 0x7b
   197c4:	strb	r2, [r3]
   197c8:	mov	r0, r4
   197cc:	blx	r7
   197d0:	ldrb	r3, [r4, #25]
   197d4:	cmp	r3, #0
   197d8:	beq	19804 <flatcc_json_printer_struct_vector_field@@Base+0x16c>
   197dc:	ldr	r3, [r4, #20]
   197e0:	mov	r0, r4
   197e4:	add	r2, r3, #1
   197e8:	str	r2, [r4, #20]
   197ec:	mov	r2, #10
   197f0:	strb	r2, [r3]
   197f4:	ldr	r3, [r4, #32]
   197f8:	sub	r3, r3, #1
   197fc:	str	r3, [r4, #32]
   19800:	bl	14b50 <test_print@@Base+0x1404>
   19804:	ldr	r3, [r4, #20]
   19808:	sub	r5, r5, #1
   1980c:	add	r2, r3, #1
   19810:	mov	sl, #44	; 0x2c
   19814:	mov	r8, #10
   19818:	mov	fp, #123	; 0x7b
   1981c:	str	r2, [r4, #20]
   19820:	mov	r2, #125	; 0x7d
   19824:	strb	r2, [r3]
   19828:	subs	r5, r5, #1
   1982c:	bcc	1972c <flatcc_json_printer_struct_vector_field@@Base+0x94>
   19830:	ldr	r3, [r4, #20]
   19834:	add	r6, r6, r9
   19838:	add	r2, r3, #1
   1983c:	str	r2, [r4, #20]
   19840:	strb	sl, [r3]
   19844:	ldrb	r3, [r4, #25]
   19848:	cmp	r3, #0
   1984c:	beq	198e4 <flatcc_json_printer_struct_vector_field@@Base+0x24c>
   19850:	ldr	r3, [r4, #20]
   19854:	mov	r0, r4
   19858:	add	r2, r3, #1
   1985c:	str	r2, [r4, #20]
   19860:	strb	r8, [r3]
   19864:	bl	14b50 <test_print@@Base+0x1404>
   19868:	ldr	r3, [r4, #32]
   1986c:	mov	r1, r6
   19870:	add	r3, r3, #1
   19874:	str	r3, [r4, #32]
   19878:	ldr	r3, [r4, #20]
   1987c:	mov	r0, r4
   19880:	add	r2, r3, #1
   19884:	str	r2, [r4, #20]
   19888:	strb	fp, [r3]
   1988c:	blx	r7
   19890:	ldrb	r3, [r4, #25]
   19894:	cmp	r3, #0
   19898:	beq	198c0 <flatcc_json_printer_struct_vector_field@@Base+0x228>
   1989c:	ldr	r3, [r4, #20]
   198a0:	mov	r0, r4
   198a4:	add	r2, r3, #1
   198a8:	str	r2, [r4, #20]
   198ac:	strb	r8, [r3]
   198b0:	ldr	r3, [r4, #32]
   198b4:	sub	r3, r3, #1
   198b8:	str	r3, [r4, #32]
   198bc:	bl	14b50 <test_print@@Base+0x1404>
   198c0:	ldr	r3, [r4, #20]
   198c4:	add	r2, r3, #1
   198c8:	str	r2, [r4, #20]
   198cc:	mov	r2, #125	; 0x7d
   198d0:	strb	r2, [r3]
   198d4:	b	19828 <flatcc_json_printer_struct_vector_field@@Base+0x190>
   198d8:	mov	r0, r4
   198dc:	bl	14d60 <test_print@@Base+0x1614>
   198e0:	b	197a0 <flatcc_json_printer_struct_vector_field@@Base+0x108>
   198e4:	mov	r0, r4
   198e8:	bl	14d60 <test_print@@Base+0x1614>
   198ec:	b	19868 <flatcc_json_printer_struct_vector_field@@Base+0x1d0>

000198f0 <flatcc_json_printer_string_vector_field@@Base>:
   198f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   198f4:	mov	r5, r1
   198f8:	mov	r4, r0
   198fc:	mov	r1, r2
   19900:	mov	r0, r5
   19904:	mov	r7, r3
   19908:	bl	147ec <test_print@@Base+0x10a0>
   1990c:	cmp	r0, #0
   19910:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19914:	ldr	r2, [r5, #16]
   19918:	mov	r1, r7
   1991c:	cmp	r2, #0
   19920:	add	r3, r2, #1
   19924:	ldrne	r2, [r4, #20]
   19928:	str	r3, [r5, #16]
   1992c:	addne	r3, r2, #1
   19930:	strne	r3, [r4, #20]
   19934:	movne	r3, #44	; 0x2c
   19938:	strbne	r3, [r2]
   1993c:	ldr	r2, [r0]
   19940:	add	r6, r0, r2
   19944:	ldr	r5, [r0, r2]
   19948:	ldr	r2, [sp, #32]
   1994c:	mov	r0, r4
   19950:	bl	14d7c <test_print@@Base+0x1630>
   19954:	ldr	r3, [r4, #32]
   19958:	cmp	r5, #0
   1995c:	add	r3, r3, #1
   19960:	str	r3, [r4, #32]
   19964:	ldr	r3, [r4, #20]
   19968:	add	r2, r3, #1
   1996c:	str	r2, [r4, #20]
   19970:	mov	r2, #91	; 0x5b
   19974:	strb	r2, [r3]
   19978:	bne	199c8 <flatcc_json_printer_string_vector_field@@Base+0xd8>
   1997c:	ldrb	r3, [r4, #25]
   19980:	cmp	r3, #0
   19984:	beq	199b0 <flatcc_json_printer_string_vector_field@@Base+0xc0>
   19988:	ldr	r3, [r4, #20]
   1998c:	mov	r0, r4
   19990:	add	r2, r3, #1
   19994:	str	r2, [r4, #20]
   19998:	mov	r2, #10
   1999c:	strb	r2, [r3]
   199a0:	ldr	r3, [r4, #32]
   199a4:	sub	r3, r3, #1
   199a8:	str	r3, [r4, #32]
   199ac:	bl	14b50 <test_print@@Base+0x1404>
   199b0:	ldr	r3, [r4, #20]
   199b4:	add	r2, r3, #1
   199b8:	str	r2, [r4, #20]
   199bc:	mov	r2, #93	; 0x5d
   199c0:	strb	r2, [r3]
   199c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   199c8:	ldrb	r3, [r4, #25]
   199cc:	cmp	r3, #0
   199d0:	beq	19a6c <flatcc_json_printer_string_vector_field@@Base+0x17c>
   199d4:	ldr	r3, [r4, #20]
   199d8:	mov	r0, r4
   199dc:	add	r2, r3, #1
   199e0:	str	r2, [r4, #20]
   199e4:	mov	r2, #10
   199e8:	strb	r2, [r3]
   199ec:	bl	14b50 <test_print@@Base+0x1404>
   199f0:	ldr	r1, [r6, #4]
   199f4:	mov	r0, r4
   199f8:	add	r1, r1, #4
   199fc:	add	r1, r6, r1
   19a00:	bl	14ac8 <test_print@@Base+0x137c>
   19a04:	sub	r5, r5, #1
   19a08:	add	r6, r6, #8
   19a0c:	mov	r8, #44	; 0x2c
   19a10:	mov	r9, #10
   19a14:	subs	r5, r5, #1
   19a18:	bcc	1997c <flatcc_json_printer_string_vector_field@@Base+0x8c>
   19a1c:	ldr	r3, [r4, #20]
   19a20:	mov	r7, r6
   19a24:	add	r2, r3, #1
   19a28:	str	r2, [r4, #20]
   19a2c:	strb	r8, [r3]
   19a30:	ldrb	r3, [r4, #25]
   19a34:	cmp	r3, #0
   19a38:	beq	19a78 <flatcc_json_printer_string_vector_field@@Base+0x188>
   19a3c:	ldr	r3, [r4, #20]
   19a40:	mov	r0, r4
   19a44:	add	r2, r3, #1
   19a48:	str	r2, [r4, #20]
   19a4c:	strb	r9, [r3]
   19a50:	bl	14b50 <test_print@@Base+0x1404>
   19a54:	ldr	r1, [r7]
   19a58:	mov	r0, r4
   19a5c:	add	r1, r7, r1
   19a60:	add	r6, r6, #4
   19a64:	bl	14ac8 <test_print@@Base+0x137c>
   19a68:	b	19a14 <flatcc_json_printer_string_vector_field@@Base+0x124>
   19a6c:	mov	r0, r4
   19a70:	bl	14d60 <test_print@@Base+0x1614>
   19a74:	b	199f0 <flatcc_json_printer_string_vector_field@@Base+0x100>
   19a78:	mov	r0, r4
   19a7c:	bl	14d60 <test_print@@Base+0x1614>
   19a80:	b	19a54 <flatcc_json_printer_string_vector_field@@Base+0x164>

00019a84 <flatcc_json_printer_table_vector_field@@Base>:
   19a84:	push	{r4, r5, r6, r7, r8, lr}
   19a88:	mov	r6, r1
   19a8c:	mov	r4, r0
   19a90:	mov	r1, r2
   19a94:	mov	r0, r6
   19a98:	mov	r7, r3
   19a9c:	bl	147ec <test_print@@Base+0x10a0>
   19aa0:	cmp	r0, #0
   19aa4:	popeq	{r4, r5, r6, r7, r8, pc}
   19aa8:	ldr	r2, [r6, #16]
   19aac:	mov	r1, r7
   19ab0:	cmp	r2, #0
   19ab4:	add	r3, r2, #1
   19ab8:	ldrne	r2, [r4, #20]
   19abc:	str	r3, [r6, #16]
   19ac0:	addne	r3, r2, #1
   19ac4:	strne	r3, [r4, #20]
   19ac8:	movne	r3, #44	; 0x2c
   19acc:	strbne	r3, [r2]
   19ad0:	ldr	r2, [r0]
   19ad4:	add	r8, r0, r2
   19ad8:	ldr	r5, [r0, r2]
   19adc:	ldr	r2, [sp, #24]
   19ae0:	mov	r0, r4
   19ae4:	bl	14d7c <test_print@@Base+0x1630>
   19ae8:	ldr	r3, [r4, #32]
   19aec:	cmp	r5, #0
   19af0:	add	r3, r3, #1
   19af4:	str	r3, [r4, #32]
   19af8:	ldr	r3, [r4, #20]
   19afc:	add	r2, r3, #1
   19b00:	str	r2, [r4, #20]
   19b04:	mov	r2, #91	; 0x5b
   19b08:	strb	r2, [r3]
   19b0c:	bne	19b5c <flatcc_json_printer_table_vector_field@@Base+0xd8>
   19b10:	ldrb	r3, [r4, #25]
   19b14:	cmp	r3, #0
   19b18:	beq	19b44 <flatcc_json_printer_table_vector_field@@Base+0xc0>
   19b1c:	ldr	r3, [r4, #20]
   19b20:	mov	r0, r4
   19b24:	add	r2, r3, #1
   19b28:	str	r2, [r4, #20]
   19b2c:	mov	r2, #10
   19b30:	strb	r2, [r3]
   19b34:	ldr	r3, [r4, #32]
   19b38:	sub	r3, r3, #1
   19b3c:	str	r3, [r4, #32]
   19b40:	bl	14b50 <test_print@@Base+0x1404>
   19b44:	ldr	r3, [r4, #20]
   19b48:	add	r2, r3, #1
   19b4c:	str	r2, [r4, #20]
   19b50:	mov	r2, #93	; 0x5d
   19b54:	strb	r2, [r3]
   19b58:	pop	{r4, r5, r6, r7, r8, pc}
   19b5c:	ldr	r1, [r8, #4]
   19b60:	add	r7, r8, #4
   19b64:	ldr	r3, [sp, #28]
   19b68:	ldr	r2, [r6, #12]
   19b6c:	add	r1, r7, r1
   19b70:	mov	r0, r4
   19b74:	bl	14fd0 <test_print@@Base+0x1884>
   19b78:	sub	r5, r5, #1
   19b7c:	mov	r8, #44	; 0x2c
   19b80:	subs	r5, r5, #1
   19b84:	bcc	19b10 <flatcc_json_printer_table_vector_field@@Base+0x8c>
   19b88:	ldr	r3, [r4, #20]
   19b8c:	mov	r0, r4
   19b90:	add	r2, r3, #1
   19b94:	str	r2, [r4, #20]
   19b98:	strb	r8, [r3]
   19b9c:	ldr	r1, [r7, #4]!
   19ba0:	ldr	r3, [sp, #28]
   19ba4:	ldr	r2, [r6, #12]
   19ba8:	add	r1, r7, r1
   19bac:	bl	14fd0 <test_print@@Base+0x1884>
   19bb0:	b	19b80 <flatcc_json_printer_table_vector_field@@Base+0xfc>

00019bb4 <flatcc_json_printer_union_vector_field@@Base>:
   19bb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19bb8:	mov	r7, r1
   19bbc:	sub	fp, r2, #1
   19bc0:	sub	sp, sp, #132	; 0x84
   19bc4:	mov	r1, fp
   19bc8:	mov	r4, r0
   19bcc:	mov	r0, r7
   19bd0:	mov	sl, r3
   19bd4:	bl	147ec <test_print@@Base+0x10a0>
   19bd8:	ldr	r6, [sp, #168]	; 0xa8
   19bdc:	mov	r5, r0
   19be0:	mov	r1, r2
   19be4:	mov	r0, r7
   19be8:	bl	147ec <test_print@@Base+0x10a0>
   19bec:	ldr	r3, [r7, #12]
   19bf0:	cmp	r6, #100	; 0x64
   19bf4:	str	r3, [sp, #12]
   19bf8:	ble	19c20 <flatcc_json_printer_union_vector_field@@Base+0x6c>
   19bfc:	ldr	r3, [r4, #36]	; 0x24
   19c00:	ldr	r2, [pc, #596]	; 19e5c <flatcc_json_printer_union_vector_field@@Base+0x2a8>
   19c04:	cmp	r3, #0
   19c08:	moveq	r3, #1
   19c0c:	streq	r3, [r4, #36]	; 0x24
   19c10:	ldr	r1, [pc, #584]	; 19e60 <flatcc_json_printer_union_vector_field@@Base+0x2ac>
   19c14:	ldr	r3, [pc, #584]	; 19e64 <flatcc_json_printer_union_vector_field@@Base+0x2b0>
   19c18:	ldr	r0, [pc, #584]	; 19e68 <flatcc_json_printer_union_vector_field@@Base+0x2b4>
   19c1c:	bl	1255c <__assert_fail@plt>
   19c20:	add	r3, sp, #20
   19c24:	mov	r8, r0
   19c28:	mov	r2, r6
   19c2c:	mov	r1, sl
   19c30:	mov	r0, r3
   19c34:	bl	1246c <memcpy@plt>
   19c38:	ldr	r2, [pc, #556]	; 19e6c <flatcc_json_printer_union_vector_field@@Base+0x2b8>
   19c3c:	cmp	r8, #0
   19c40:	cmpne	r5, #0
   19c44:	mov	r3, r0
   19c48:	add	r1, r0, r6
   19c4c:	ldr	r0, [r2]
   19c50:	ldrb	r2, [r2, #4]
   19c54:	str	r0, [r3, r6]
   19c58:	strb	r2, [r1, #4]
   19c5c:	beq	19d34 <flatcc_json_printer_union_vector_field@@Base+0x180>
   19c60:	ldr	r2, [sp, #172]	; 0xac
   19c64:	mov	r1, r7
   19c68:	str	r2, [sp, #4]
   19c6c:	add	r2, r6, #5
   19c70:	str	r2, [sp]
   19c74:	mov	r0, r4
   19c78:	mov	r2, fp
   19c7c:	bl	1880c <flatcc_json_printer_uint8_enum_vector_field@@Base>
   19c80:	ldr	r3, [r7, #16]
   19c84:	mov	r1, sl
   19c88:	cmp	r3, #0
   19c8c:	add	r2, r3, #1
   19c90:	ldrne	r3, [r4, #20]
   19c94:	str	r2, [r7, #16]
   19c98:	addne	r2, r3, #1
   19c9c:	strne	r2, [r4, #20]
   19ca0:	movne	r2, #44	; 0x2c
   19ca4:	strbne	r2, [r3]
   19ca8:	ldr	r2, [r8]
   19cac:	mov	r0, r4
   19cb0:	add	fp, r8, r2
   19cb4:	ldr	r7, [r8, r2]
   19cb8:	mov	r2, r6
   19cbc:	ldr	r9, [r5]
   19cc0:	bl	14d7c <test_print@@Base+0x1630>
   19cc4:	ldr	r2, [r4, #32]
   19cc8:	cmp	r7, #0
   19ccc:	add	r2, r2, #1
   19cd0:	str	r2, [r4, #32]
   19cd4:	ldr	r2, [r4, #20]
   19cd8:	add	r1, r2, #1
   19cdc:	str	r1, [r4, #20]
   19ce0:	mov	r1, #91	; 0x5b
   19ce4:	strb	r1, [r2]
   19ce8:	bne	19d3c <flatcc_json_printer_union_vector_field@@Base+0x188>
   19cec:	ldrb	r3, [r4, #25]
   19cf0:	cmp	r3, #0
   19cf4:	beq	19d20 <flatcc_json_printer_union_vector_field@@Base+0x16c>
   19cf8:	ldr	r3, [r4, #20]
   19cfc:	mov	r0, r4
   19d00:	add	r2, r3, #1
   19d04:	str	r2, [r4, #20]
   19d08:	mov	r2, #10
   19d0c:	strb	r2, [r3]
   19d10:	ldr	r3, [r4, #32]
   19d14:	sub	r3, r3, #1
   19d18:	str	r3, [r4, #32]
   19d1c:	bl	14b50 <test_print@@Base+0x1404>
   19d20:	ldr	r3, [r4, #20]
   19d24:	add	r2, r3, #1
   19d28:	str	r2, [r4, #20]
   19d2c:	mov	r2, #93	; 0x5d
   19d30:	strb	r2, [r3]
   19d34:	add	sp, sp, #132	; 0x84
   19d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d3c:	add	r5, r5, r9
   19d40:	add	fp, fp, #4
   19d44:	ldrb	r3, [r5, #4]
   19d48:	cmp	r3, #0
   19d4c:	beq	19dc0 <flatcc_json_printer_union_vector_field@@Base+0x20c>
   19d50:	add	r1, sp, #128	; 0x80
   19d54:	strb	r3, [sp, #16]
   19d58:	str	fp, [r1, #-120]!	; 0xffffff88
   19d5c:	mov	r0, r4
   19d60:	ldr	r3, [sp, #176]	; 0xb0
   19d64:	blx	r3
   19d68:	add	r3, r7, #3
   19d6c:	add	r6, r5, r3
   19d70:	mov	r7, #44	; 0x2c
   19d74:	add	r5, r5, #4
   19d78:	mov	r8, #110	; 0x6e
   19d7c:	cmp	r5, r6
   19d80:	beq	19cec <flatcc_json_printer_union_vector_field@@Base+0x138>
   19d84:	ldrb	r3, [r5, #1]!
   19d88:	ldr	r2, [r4, #20]
   19d8c:	add	fp, fp, #4
   19d90:	add	r1, r2, #1
   19d94:	cmp	r3, #0
   19d98:	str	r1, [r4, #20]
   19d9c:	strb	r7, [r2]
   19da0:	beq	19e10 <flatcc_json_printer_union_vector_field@@Base+0x25c>
   19da4:	strb	r3, [sp, #16]
   19da8:	add	r1, sp, #8
   19dac:	mov	r0, r4
   19db0:	ldr	r3, [sp, #176]	; 0xb0
   19db4:	str	fp, [sp, #8]
   19db8:	blx	r3
   19dbc:	b	19d7c <flatcc_json_printer_union_vector_field@@Base+0x1c8>
   19dc0:	ldr	r3, [r4, #20]
   19dc4:	add	r2, r3, #1
   19dc8:	str	r2, [r4, #20]
   19dcc:	mov	r2, #110	; 0x6e
   19dd0:	strb	r2, [r3]
   19dd4:	ldr	r3, [r4, #20]
   19dd8:	add	r2, r3, #1
   19ddc:	str	r2, [r4, #20]
   19de0:	mov	r2, #117	; 0x75
   19de4:	strb	r2, [r3]
   19de8:	ldr	r3, [r4, #20]
   19dec:	add	r2, r3, #1
   19df0:	str	r2, [r4, #20]
   19df4:	mov	r2, #108	; 0x6c
   19df8:	strb	r2, [r3]
   19dfc:	ldr	r3, [r4, #20]
   19e00:	add	r1, r3, #1
   19e04:	str	r1, [r4, #20]
   19e08:	strb	r2, [r3]
   19e0c:	b	19d68 <flatcc_json_printer_union_vector_field@@Base+0x1b4>
   19e10:	ldr	r3, [r4, #20]
   19e14:	add	r2, r3, #1
   19e18:	str	r2, [r4, #20]
   19e1c:	strb	r8, [r3]
   19e20:	ldr	r3, [r4, #20]
   19e24:	add	r2, r3, #1
   19e28:	str	r2, [r4, #20]
   19e2c:	mov	r2, #117	; 0x75
   19e30:	strb	r2, [r3]
   19e34:	ldr	r3, [r4, #20]
   19e38:	add	r2, r3, #1
   19e3c:	str	r2, [r4, #20]
   19e40:	mov	r2, #108	; 0x6c
   19e44:	strb	r2, [r3]
   19e48:	ldr	r3, [r4, #20]
   19e4c:	add	r1, r3, #1
   19e50:	str	r1, [r4, #20]
   19e54:	strb	r2, [r3]
   19e58:	b	19d7c <flatcc_json_printer_union_vector_field@@Base+0x1c8>
   19e5c:	andeq	r0, r0, fp, asr #6
   19e60:	andeq	fp, r1, ip, asr #26
   19e64:	andeq	fp, r1, sp, lsl #25
   19e68:	andeq	fp, r1, r0, lsl #30
   19e6c:	andeq	fp, r1, fp, lsl pc

00019e70 <flatcc_json_printer_table_field@@Base>:
   19e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19e74:	mov	r5, r1
   19e78:	mov	r4, r0
   19e7c:	mov	r1, r2
   19e80:	mov	r0, r5
   19e84:	mov	r8, r3
   19e88:	bl	147ec <test_print@@Base+0x10a0>
   19e8c:	ldr	r9, [sp, #32]
   19e90:	ldr	r7, [sp, #36]	; 0x24
   19e94:	subs	r6, r0, #0
   19e98:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19e9c:	ldr	r2, [r5, #16]
   19ea0:	mov	r1, r8
   19ea4:	cmp	r2, #0
   19ea8:	add	r3, r2, #1
   19eac:	ldrne	r2, [r4, #20]
   19eb0:	str	r3, [r5, #16]
   19eb4:	addne	r3, r2, #1
   19eb8:	strne	r3, [r4, #20]
   19ebc:	movne	r3, #44	; 0x2c
   19ec0:	strbne	r3, [r2]
   19ec4:	mov	r0, r4
   19ec8:	mov	r2, r9
   19ecc:	bl	14d7c <test_print@@Base+0x1630>
   19ed0:	ldr	r1, [r6]
   19ed4:	mov	r3, r7
   19ed8:	ldr	r2, [r5, #12]
   19edc:	add	r1, r6, r1
   19ee0:	mov	r0, r4
   19ee4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ee8:	b	14fd0 <test_print@@Base+0x1884>

00019eec <flatcc_json_printer_union_field@@Base>:
   19eec:	push	{r4, r5, r6, r7, r8, r9, lr}
   19ef0:	mov	r5, r1
   19ef4:	sub	sp, sp, #20
   19ef8:	sub	r1, r2, #1
   19efc:	mov	r4, r0
   19f00:	mov	r0, r5
   19f04:	mov	r8, r3
   19f08:	bl	147ec <test_print@@Base+0x10a0>
   19f0c:	ldr	r6, [sp, #48]	; 0x30
   19f10:	mov	r7, r0
   19f14:	mov	r1, r2
   19f18:	mov	r0, r5
   19f1c:	bl	147ec <test_print@@Base+0x10a0>
   19f20:	cmp	r7, #0
   19f24:	cmpne	r0, #0
   19f28:	beq	1a094 <flatcc_json_printer_union_field@@Base+0x1a8>
   19f2c:	ldr	r3, [r5, #16]
   19f30:	ldrb	r7, [r7]
   19f34:	cmp	r3, #0
   19f38:	add	r2, r3, #1
   19f3c:	ldrne	r3, [r4, #20]
   19f40:	str	r2, [r5, #16]
   19f44:	addne	r2, r3, #1
   19f48:	strne	r2, [r4, #20]
   19f4c:	movne	r2, #44	; 0x2c
   19f50:	strbne	r2, [r3]
   19f54:	ldrb	r3, [r4, #25]
   19f58:	mov	r9, r0
   19f5c:	cmp	r3, #0
   19f60:	beq	1a09c <flatcc_json_printer_union_field@@Base+0x1b0>
   19f64:	ldr	r3, [r4, #20]
   19f68:	mov	r0, r4
   19f6c:	add	r2, r3, #1
   19f70:	str	r2, [r4, #20]
   19f74:	mov	r2, #10
   19f78:	strb	r2, [r3]
   19f7c:	bl	14b50 <test_print@@Base+0x1404>
   19f80:	ldr	r3, [r4, #20]
   19f84:	mov	r2, #34	; 0x22
   19f88:	mov	r1, r8
   19f8c:	strb	r2, [r3]
   19f90:	ldrb	r3, [r4, #26]
   19f94:	ldr	r0, [r4, #20]
   19f98:	ldr	r2, [r4, #16]
   19f9c:	cmp	r3, #0
   19fa0:	addeq	r0, r0, #1
   19fa4:	add	r3, r0, r6
   19fa8:	cmp	r2, r3
   19fac:	str	r0, [r4, #20]
   19fb0:	mov	r2, r6
   19fb4:	bls	1a0a8 <flatcc_json_printer_union_field@@Base+0x1bc>
   19fb8:	bl	1246c <memcpy@plt>
   19fbc:	ldr	r3, [r4, #20]
   19fc0:	add	r3, r3, r6
   19fc4:	str	r3, [r4, #20]
   19fc8:	mov	r2, #5
   19fcc:	ldr	r1, [pc, #244]	; 1a0c8 <flatcc_json_printer_union_field@@Base+0x1dc>
   19fd0:	mov	r0, r4
   19fd4:	bl	1486c <test_print@@Base+0x1120>
   19fd8:	ldr	r3, [r4, #20]
   19fdc:	mov	r2, #34	; 0x22
   19fe0:	strb	r2, [r3]
   19fe4:	ldr	r1, [r4, #20]
   19fe8:	ldrb	r3, [r4, #26]
   19fec:	clz	r3, r3
   19ff0:	lsr	r3, r3, #5
   19ff4:	add	r2, r1, r3
   19ff8:	add	r2, r2, #1
   19ffc:	str	r2, [r4, #20]
   1a000:	mov	r2, #58	; 0x3a
   1a004:	strb	r2, [r1, r3]
   1a008:	ldr	r3, [r4, #20]
   1a00c:	mov	r2, #32
   1a010:	strb	r2, [r3]
   1a014:	ldrb	r3, [r4, #25]
   1a018:	ldr	r1, [r4, #20]
   1a01c:	cmp	r3, #0
   1a020:	addne	r1, r1, #1
   1a024:	ldrb	r3, [r4, #27]
   1a028:	str	r1, [r4, #20]
   1a02c:	cmp	r3, #0
   1a030:	beq	1a0b4 <flatcc_json_printer_union_field@@Base+0x1c8>
   1a034:	mov	r0, r7
   1a038:	bl	14e00 <test_print@@Base+0x16b4>
   1a03c:	ldr	r3, [r4, #20]
   1a040:	add	r0, r3, r0
   1a044:	str	r0, [r4, #20]
   1a048:	cmp	r7, #0
   1a04c:	beq	1a094 <flatcc_json_printer_union_field@@Base+0x1a8>
   1a050:	ldr	r3, [r4, #20]
   1a054:	mov	r1, r8
   1a058:	add	r2, r3, #1
   1a05c:	str	r2, [r4, #20]
   1a060:	mov	r2, #44	; 0x2c
   1a064:	strb	r2, [r3]
   1a068:	mov	r0, r4
   1a06c:	mov	r2, r6
   1a070:	bl	14d7c <test_print@@Base+0x1630>
   1a074:	ldr	r3, [r5, #12]
   1a078:	add	r1, sp, #16
   1a07c:	str	r3, [sp, #8]
   1a080:	str	r9, [r1, #-12]!
   1a084:	mov	r0, r4
   1a088:	ldr	r3, [sp, #56]	; 0x38
   1a08c:	strb	r7, [sp, #12]
   1a090:	blx	r3
   1a094:	add	sp, sp, #20
   1a098:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a09c:	mov	r0, r4
   1a0a0:	bl	14d60 <test_print@@Base+0x1614>
   1a0a4:	b	19f80 <flatcc_json_printer_union_field@@Base+0x94>
   1a0a8:	mov	r0, r4
   1a0ac:	bl	1486c <test_print@@Base+0x1120>
   1a0b0:	b	19fc8 <flatcc_json_printer_union_field@@Base+0xdc>
   1a0b4:	mov	r1, r7
   1a0b8:	mov	r0, r4
   1a0bc:	ldr	r3, [sp, #52]	; 0x34
   1a0c0:	blx	r3
   1a0c4:	b	1a048 <flatcc_json_printer_union_field@@Base+0x15c>
   1a0c8:	andeq	fp, r1, fp, lsl pc

0001a0cc <flatcc_json_printer_union_table@@Base>:
   1a0cc:	ldr	ip, [r1]
   1a0d0:	push	{lr}		; (str lr, [sp, #-4]!)
   1a0d4:	mov	r3, r2
   1a0d8:	ldr	lr, [ip]
   1a0dc:	ldr	r2, [r1, #4]
   1a0e0:	add	r1, ip, lr
   1a0e4:	pop	{lr}		; (ldr lr, [sp], #4)
   1a0e8:	b	14fd0 <test_print@@Base+0x1884>

0001a0ec <flatcc_json_printer_union_struct@@Base>:
   1a0ec:	ldr	r3, [r0, #32]
   1a0f0:	push	{r4, lr}
   1a0f4:	add	r3, r3, #1
   1a0f8:	str	r3, [r0, #32]
   1a0fc:	ldr	r3, [r0, #20]
   1a100:	mov	r4, r0
   1a104:	add	ip, r3, #1
   1a108:	str	ip, [r0, #20]
   1a10c:	mov	ip, #123	; 0x7b
   1a110:	strb	ip, [r3]
   1a114:	ldr	r3, [r1]
   1a118:	ldr	r1, [r3]
   1a11c:	add	r1, r3, r1
   1a120:	blx	r2
   1a124:	ldrb	r3, [r4, #25]
   1a128:	cmp	r3, #0
   1a12c:	beq	1a158 <flatcc_json_printer_union_struct@@Base+0x6c>
   1a130:	ldr	r3, [r4, #20]
   1a134:	mov	r0, r4
   1a138:	add	r2, r3, #1
   1a13c:	str	r2, [r4, #20]
   1a140:	mov	r2, #10
   1a144:	strb	r2, [r3]
   1a148:	ldr	r3, [r4, #32]
   1a14c:	sub	r3, r3, #1
   1a150:	str	r3, [r4, #32]
   1a154:	bl	14b50 <test_print@@Base+0x1404>
   1a158:	ldr	r3, [r4, #20]
   1a15c:	add	r2, r3, #1
   1a160:	str	r2, [r4, #20]
   1a164:	mov	r2, #125	; 0x7d
   1a168:	strb	r2, [r3]
   1a16c:	pop	{r4, pc}

0001a170 <flatcc_json_printer_union_string@@Base>:
   1a170:	ldr	r3, [r1]
   1a174:	ldr	r1, [r3]
   1a178:	add	r1, r3, r1
   1a17c:	b	14ac8 <test_print@@Base+0x137c>

0001a180 <flatcc_json_printer_embedded_struct_field@@Base>:
   1a180:	cmp	r1, #0
   1a184:	push	{r4, r5, r6, lr}
   1a188:	mov	r6, r2
   1a18c:	ldrne	r2, [r0, #20]
   1a190:	mov	r5, r3
   1a194:	addne	r3, r2, #1
   1a198:	mov	r4, r0
   1a19c:	strne	r3, [r0, #20]
   1a1a0:	movne	r3, #44	; 0x2c
   1a1a4:	strbne	r3, [r2]
   1a1a8:	ldr	r1, [sp, #16]
   1a1ac:	ldr	r2, [sp, #20]
   1a1b0:	bl	14d7c <test_print@@Base+0x1630>
   1a1b4:	ldr	r2, [r4, #32]
   1a1b8:	add	r1, r6, r5
   1a1bc:	add	r2, r2, #1
   1a1c0:	str	r2, [r4, #32]
   1a1c4:	ldr	r2, [r4, #20]
   1a1c8:	mov	r0, r4
   1a1cc:	add	r3, r2, #1
   1a1d0:	str	r3, [r4, #20]
   1a1d4:	mov	r3, #123	; 0x7b
   1a1d8:	strb	r3, [r2]
   1a1dc:	ldr	r3, [sp, #24]
   1a1e0:	blx	r3
   1a1e4:	ldrb	r3, [r4, #25]
   1a1e8:	cmp	r3, #0
   1a1ec:	beq	1a218 <flatcc_json_printer_embedded_struct_field@@Base+0x98>
   1a1f0:	ldr	r3, [r4, #20]
   1a1f4:	mov	r0, r4
   1a1f8:	add	r2, r3, #1
   1a1fc:	str	r2, [r4, #20]
   1a200:	mov	r2, #10
   1a204:	strb	r2, [r3]
   1a208:	ldr	r3, [r4, #32]
   1a20c:	sub	r3, r3, #1
   1a210:	str	r3, [r4, #32]
   1a214:	bl	14b50 <test_print@@Base+0x1404>
   1a218:	ldr	r3, [r4, #20]
   1a21c:	add	r2, r3, #1
   1a220:	str	r2, [r4, #20]
   1a224:	mov	r2, #125	; 0x7d
   1a228:	strb	r2, [r3]
   1a22c:	pop	{r4, r5, r6, pc}

0001a230 <flatcc_json_printer_struct_field@@Base>:
   1a230:	push	{r4, r5, r6, r7, r8, lr}
   1a234:	mov	r5, r1
   1a238:	mov	r4, r0
   1a23c:	mov	r1, r2
   1a240:	mov	r0, r5
   1a244:	mov	r7, r3
   1a248:	bl	147ec <test_print@@Base+0x10a0>
   1a24c:	subs	r6, r0, #0
   1a250:	popeq	{r4, r5, r6, r7, r8, pc}
   1a254:	ldr	r2, [r5, #16]
   1a258:	mov	r1, r7
   1a25c:	cmp	r2, #0
   1a260:	add	r3, r2, #1
   1a264:	ldrne	r2, [r4, #20]
   1a268:	str	r3, [r5, #16]
   1a26c:	addne	r3, r2, #1
   1a270:	strne	r3, [r4, #20]
   1a274:	movne	r3, #44	; 0x2c
   1a278:	strbne	r3, [r2]
   1a27c:	mov	r0, r4
   1a280:	ldr	r2, [sp, #24]
   1a284:	bl	14d7c <test_print@@Base+0x1630>
   1a288:	ldr	r3, [r4, #32]
   1a28c:	mov	r1, r6
   1a290:	add	r3, r3, #1
   1a294:	str	r3, [r4, #32]
   1a298:	ldr	r3, [r4, #20]
   1a29c:	mov	r0, r4
   1a2a0:	add	r2, r3, #1
   1a2a4:	str	r2, [r4, #20]
   1a2a8:	mov	r2, #123	; 0x7b
   1a2ac:	strb	r2, [r3]
   1a2b0:	ldr	r3, [sp, #28]
   1a2b4:	blx	r3
   1a2b8:	ldrb	r3, [r4, #25]
   1a2bc:	cmp	r3, #0
   1a2c0:	beq	1a2ec <flatcc_json_printer_struct_field@@Base+0xbc>
   1a2c4:	ldr	r3, [r4, #20]
   1a2c8:	mov	r0, r4
   1a2cc:	add	r2, r3, #1
   1a2d0:	str	r2, [r4, #20]
   1a2d4:	mov	r2, #10
   1a2d8:	strb	r2, [r3]
   1a2dc:	ldr	r3, [r4, #32]
   1a2e0:	sub	r3, r3, #1
   1a2e4:	str	r3, [r4, #32]
   1a2e8:	bl	14b50 <test_print@@Base+0x1404>
   1a2ec:	ldr	r3, [r4, #20]
   1a2f0:	add	r2, r3, #1
   1a2f4:	str	r2, [r4, #20]
   1a2f8:	mov	r2, #125	; 0x7d
   1a2fc:	strb	r2, [r3]
   1a300:	pop	{r4, r5, r6, r7, r8, pc}

0001a304 <flatcc_json_printer_struct_as_root@@Base>:
   1a304:	push	{r4, r5, r6, lr}
   1a308:	mov	r4, r0
   1a30c:	mov	r5, r1
   1a310:	bl	15094 <test_print@@Base+0x1948>
   1a314:	cmp	r0, #0
   1a318:	bne	1a324 <flatcc_json_printer_struct_as_root@@Base+0x20>
   1a31c:	mvn	r0, #0
   1a320:	pop	{r4, r5, r6, pc}
   1a324:	ldr	r3, [r4, #32]
   1a328:	mov	r0, r4
   1a32c:	add	r3, r3, #1
   1a330:	str	r3, [r4, #32]
   1a334:	ldr	r3, [r4, #20]
   1a338:	add	r2, r3, #1
   1a33c:	str	r2, [r4, #20]
   1a340:	mov	r2, #123	; 0x7b
   1a344:	strb	r2, [r3]
   1a348:	ldr	r1, [r5]
   1a34c:	ldr	r3, [sp, #16]
   1a350:	add	r1, r5, r1
   1a354:	blx	r3
   1a358:	ldrb	r3, [r4, #25]
   1a35c:	cmp	r3, #0
   1a360:	beq	1a38c <flatcc_json_printer_struct_as_root@@Base+0x88>
   1a364:	ldr	r3, [r4, #20]
   1a368:	mov	r0, r4
   1a36c:	add	r2, r3, #1
   1a370:	str	r2, [r4, #20]
   1a374:	mov	r2, #10
   1a378:	strb	r2, [r3]
   1a37c:	ldr	r3, [r4, #32]
   1a380:	sub	r3, r3, #1
   1a384:	str	r3, [r4, #32]
   1a388:	bl	14b50 <test_print@@Base+0x1404>
   1a38c:	ldr	r3, [r4, #20]
   1a390:	add	r2, r3, #1
   1a394:	str	r2, [r4, #20]
   1a398:	mov	r2, #125	; 0x7d
   1a39c:	strb	r2, [r3]
   1a3a0:	ldrb	r3, [r4, #25]
   1a3a4:	cmp	r3, #0
   1a3a8:	beq	1a3c8 <flatcc_json_printer_struct_as_root@@Base+0xc4>
   1a3ac:	ldr	r3, [r4, #32]
   1a3b0:	cmp	r3, #0
   1a3b4:	ldreq	r3, [r4, #20]
   1a3b8:	addeq	r2, r3, #1
   1a3bc:	streq	r2, [r4, #20]
   1a3c0:	moveq	r2, #10
   1a3c4:	strbeq	r2, [r3]
   1a3c8:	ldr	r3, [r4, #44]	; 0x2c
   1a3cc:	mov	r1, #1
   1a3d0:	mov	r0, r4
   1a3d4:	blx	r3
   1a3d8:	ldr	r3, [r4, #36]	; 0x24
   1a3dc:	cmp	r3, #0
   1a3e0:	bne	1a31c <flatcc_json_printer_struct_as_root@@Base+0x18>
   1a3e4:	ldr	r3, [r4]
   1a3e8:	ldr	r0, [r4, #20]
   1a3ec:	sub	r0, r0, r3
   1a3f0:	ldr	r3, [r4, #12]
   1a3f4:	add	r0, r0, r3
   1a3f8:	pop	{r4, r5, r6, pc}

0001a3fc <flatcc_json_printer_table_as_root@@Base>:
   1a3fc:	push	{r4, r5, r6, lr}
   1a400:	mov	r4, r0
   1a404:	mov	r5, r1
   1a408:	bl	15094 <test_print@@Base+0x1948>
   1a40c:	cmp	r0, #0
   1a410:	bne	1a41c <flatcc_json_printer_table_as_root@@Base+0x20>
   1a414:	mvn	r0, #0
   1a418:	pop	{r4, r5, r6, pc}
   1a41c:	ldr	r1, [r5]
   1a420:	ldr	r3, [sp, #16]
   1a424:	mov	r2, #100	; 0x64
   1a428:	add	r1, r5, r1
   1a42c:	mov	r0, r4
   1a430:	bl	14fd0 <test_print@@Base+0x1884>
   1a434:	ldrb	r3, [r4, #25]
   1a438:	cmp	r3, #0
   1a43c:	beq	1a45c <flatcc_json_printer_table_as_root@@Base+0x60>
   1a440:	ldr	r3, [r4, #32]
   1a444:	cmp	r3, #0
   1a448:	ldreq	r3, [r4, #20]
   1a44c:	addeq	r2, r3, #1
   1a450:	streq	r2, [r4, #20]
   1a454:	moveq	r2, #10
   1a458:	strbeq	r2, [r3]
   1a45c:	ldr	r3, [r4, #44]	; 0x2c
   1a460:	mov	r1, #1
   1a464:	mov	r0, r4
   1a468:	blx	r3
   1a46c:	ldr	r3, [r4, #36]	; 0x24
   1a470:	cmp	r3, #0
   1a474:	bne	1a414 <flatcc_json_printer_table_as_root@@Base+0x18>
   1a478:	ldr	r3, [r4]
   1a47c:	ldr	r0, [r4, #20]
   1a480:	sub	r0, r0, r3
   1a484:	ldr	r3, [r4, #12]
   1a488:	add	r0, r0, r3
   1a48c:	pop	{r4, r5, r6, pc}

0001a490 <flatcc_json_printer_struct_as_nested_root@@Base>:
   1a490:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a494:	mov	r7, r1
   1a498:	mov	r4, r0
   1a49c:	mov	r1, r2
   1a4a0:	mov	r0, r7
   1a4a4:	mov	r9, r3
   1a4a8:	bl	147ec <test_print@@Base+0x10a0>
   1a4ac:	subs	r5, r0, #0
   1a4b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4b4:	ldr	r6, [r5]
   1a4b8:	ldr	r3, [sp, #36]	; 0x24
   1a4bc:	add	r8, r5, r6
   1a4c0:	ldr	r2, [r5, r6]
   1a4c4:	mov	r1, r8
   1a4c8:	mov	r0, r4
   1a4cc:	bl	15094 <test_print@@Base+0x1948>
   1a4d0:	cmp	r0, #0
   1a4d4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a4d8:	ldr	r3, [r7, #16]
   1a4dc:	mov	r1, r9
   1a4e0:	cmp	r3, #0
   1a4e4:	add	r2, r3, #1
   1a4e8:	ldrne	r3, [r4, #20]
   1a4ec:	str	r2, [r7, #16]
   1a4f0:	addne	r2, r3, #1
   1a4f4:	strne	r2, [r4, #20]
   1a4f8:	movne	r2, #44	; 0x2c
   1a4fc:	strbne	r2, [r3]
   1a500:	mov	r0, r4
   1a504:	ldr	r2, [sp, #32]
   1a508:	bl	14d7c <test_print@@Base+0x1630>
   1a50c:	ldr	r3, [r4, #32]
   1a510:	mov	r0, r4
   1a514:	add	r3, r3, #1
   1a518:	str	r3, [r4, #32]
   1a51c:	ldr	r3, [r4, #20]
   1a520:	add	r2, r3, #1
   1a524:	str	r2, [r4, #20]
   1a528:	mov	r2, #123	; 0x7b
   1a52c:	strb	r2, [r3]
   1a530:	ldr	r1, [r5, r6]
   1a534:	ldr	r3, [sp, #40]	; 0x28
   1a538:	add	r1, r8, r1
   1a53c:	blx	r3
   1a540:	ldrb	r3, [r4, #25]
   1a544:	cmp	r3, #0
   1a548:	beq	1a574 <flatcc_json_printer_struct_as_nested_root@@Base+0xe4>
   1a54c:	ldr	r3, [r4, #20]
   1a550:	mov	r0, r4
   1a554:	add	r2, r3, #1
   1a558:	str	r2, [r4, #20]
   1a55c:	mov	r2, #10
   1a560:	strb	r2, [r3]
   1a564:	ldr	r3, [r4, #32]
   1a568:	sub	r3, r3, #1
   1a56c:	str	r3, [r4, #32]
   1a570:	bl	14b50 <test_print@@Base+0x1404>
   1a574:	ldr	r3, [r4, #20]
   1a578:	add	r2, r3, #1
   1a57c:	str	r2, [r4, #20]
   1a580:	mov	r2, #125	; 0x7d
   1a584:	strb	r2, [r3]
   1a588:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}

0001a58c <flatcc_json_printer_table_as_nested_root@@Base>:
   1a58c:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a590:	mov	r5, r1
   1a594:	mov	r4, r0
   1a598:	mov	r1, r2
   1a59c:	mov	r0, r5
   1a5a0:	mov	r9, r3
   1a5a4:	bl	147ec <test_print@@Base+0x10a0>
   1a5a8:	ldr	sl, [sp, #40]	; 0x28
   1a5ac:	ldr	fp, [sp, #44]	; 0x2c
   1a5b0:	ldr	r8, [sp, #48]	; 0x30
   1a5b4:	cmp	r0, #0
   1a5b8:	beq	1a638 <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   1a5bc:	ldr	r2, [r0]
   1a5c0:	mov	r3, fp
   1a5c4:	add	r7, r0, r2
   1a5c8:	add	r6, r7, #4
   1a5cc:	ldr	r2, [r0, r2]
   1a5d0:	mov	r1, r6
   1a5d4:	mov	r0, r4
   1a5d8:	bl	15094 <test_print@@Base+0x1948>
   1a5dc:	cmp	r0, #0
   1a5e0:	beq	1a638 <flatcc_json_printer_table_as_nested_root@@Base+0xac>
   1a5e4:	ldr	r3, [r5, #16]
   1a5e8:	mov	r1, r9
   1a5ec:	cmp	r3, #0
   1a5f0:	add	r2, r3, #1
   1a5f4:	ldrne	r3, [r4, #20]
   1a5f8:	str	r2, [r5, #16]
   1a5fc:	addne	r2, r3, #1
   1a600:	strne	r2, [r4, #20]
   1a604:	movne	r2, #44	; 0x2c
   1a608:	strbne	r2, [r3]
   1a60c:	mov	r0, r4
   1a610:	mov	r2, sl
   1a614:	bl	14d7c <test_print@@Base+0x1630>
   1a618:	ldr	r1, [r7, #4]
   1a61c:	mov	r3, r8
   1a620:	ldr	r2, [r5, #12]
   1a624:	add	r1, r6, r1
   1a628:	mov	r0, r4
   1a62c:	add	sp, sp, #4
   1a630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a634:	b	14fd0 <test_print@@Base+0x1884>
   1a638:	add	sp, sp, #4
   1a63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001a640 <flatcc_json_printer_init@@Base>:
   1a640:	push	{r4, r5, r6, lr}
   1a644:	mov	r2, #48	; 0x30
   1a648:	mov	r5, r1
   1a64c:	mov	r1, #0
   1a650:	mov	r4, r0
   1a654:	bl	12508 <memset@plt>
   1a658:	cmp	r5, #0
   1a65c:	ldreq	r3, [pc, #76]	; 1a6b0 <flatcc_json_printer_init@@Base+0x70>
   1a660:	ldreq	r5, [r3]
   1a664:	ldr	r3, [pc, #72]	; 1a6b4 <flatcc_json_printer_init@@Base+0x74>
   1a668:	str	r5, [r4, #40]	; 0x28
   1a66c:	ldr	r5, [pc, #68]	; 1a6b8 <flatcc_json_printer_init@@Base+0x78>
   1a670:	str	r3, [r4, #44]	; 0x2c
   1a674:	mov	r0, r5
   1a678:	bl	124cc <malloc@plt>
   1a67c:	cmp	r0, #0
   1a680:	movne	r3, #1
   1a684:	strbne	r3, [r4, #24]
   1a688:	movne	r3, #16384	; 0x4000
   1a68c:	str	r0, [r4]
   1a690:	strne	r0, [r4, #20]
   1a694:	addne	r0, r0, r3
   1a698:	strne	r0, [r4, #16]
   1a69c:	strne	r5, [r4, #4]
   1a6a0:	movne	r0, #0
   1a6a4:	strne	r3, [r4, #8]
   1a6a8:	mvneq	r0, #0
   1a6ac:	pop	{r4, r5, r6, pc}
   1a6b0:	andeq	sp, r2, ip, lsl #1
   1a6b4:	andeq	r4, r1, r4, lsl ip
   1a6b8:	andeq	r4, r0, r0, asr #32

0001a6bc <flatcc_json_printer_init_buffer@@Base>:
   1a6bc:	cmp	r2, #63	; 0x3f
   1a6c0:	push	{r4, r5, r6, lr}
   1a6c4:	bhi	1a6dc <flatcc_json_printer_init_buffer@@Base+0x20>
   1a6c8:	ldr	r3, [pc, #80]	; 1a720 <flatcc_json_printer_init_buffer@@Base+0x64>
   1a6cc:	ldr	r2, [pc, #80]	; 1a724 <flatcc_json_printer_init_buffer@@Base+0x68>
   1a6d0:	ldr	r1, [pc, #80]	; 1a728 <flatcc_json_printer_init_buffer@@Base+0x6c>
   1a6d4:	ldr	r0, [pc, #80]	; 1a72c <flatcc_json_printer_init_buffer@@Base+0x70>
   1a6d8:	bl	1255c <__assert_fail@plt>
   1a6dc:	mov	r4, r0
   1a6e0:	mov	r6, r1
   1a6e4:	mov	r5, r2
   1a6e8:	mov	r1, #0
   1a6ec:	mov	r2, #48	; 0x30
   1a6f0:	bl	12508 <memset@plt>
   1a6f4:	str	r5, [r4, #4]
   1a6f8:	ldr	r3, [pc, #48]	; 1a730 <flatcc_json_printer_init_buffer@@Base+0x74>
   1a6fc:	sub	r5, r5, #64	; 0x40
   1a700:	str	r5, [r4, #8]
   1a704:	add	r5, r6, r5
   1a708:	str	r6, [r4]
   1a70c:	str	r6, [r4, #20]
   1a710:	str	r5, [r4, #16]
   1a714:	str	r3, [r4, #44]	; 0x2c
   1a718:	mov	r0, #0
   1a71c:	pop	{r4, r5, r6, pc}
   1a720:			; <UNDEFINED> instruction: 0x0001bcb4
   1a724:	andeq	r0, r0, sp, lsl #9
   1a728:	andeq	fp, r1, ip, asr #26
   1a72c:	andeq	fp, r1, r1, lsr #30
   1a730:	andeq	r4, r1, r4, lsr #16

0001a734 <flatcc_json_printer_init_dynamic_buffer@@Base>:
   1a734:	cmp	r1, #0
   1a738:	push	{r4, r5, r6, lr}
   1a73c:	mov	r5, r0
   1a740:	moveq	r4, #4096	; 0x1000
   1a744:	beq	1a754 <flatcc_json_printer_init_dynamic_buffer@@Base+0x20>
   1a748:	cmp	r1, #64	; 0x40
   1a74c:	movcs	r4, r1
   1a750:	movcc	r4, #64	; 0x40
   1a754:	mov	r2, #48	; 0x30
   1a758:	mov	r1, #0
   1a75c:	mov	r0, r5
   1a760:	bl	12508 <memset@plt>
   1a764:	mov	r0, r4
   1a768:	bl	124cc <malloc@plt>
   1a76c:	mov	r3, #1
   1a770:	strb	r3, [r5, #24]
   1a774:	str	r4, [r5, #4]
   1a778:	ldr	r3, [pc, #64]	; 1a7c0 <flatcc_json_printer_init_dynamic_buffer@@Base+0x8c>
   1a77c:	sub	r4, r4, #64	; 0x40
   1a780:	str	r4, [r5, #8]
   1a784:	str	r3, [r5, #44]	; 0x2c
   1a788:	add	r4, r0, r4
   1a78c:	cmp	r0, #0
   1a790:	str	r0, [r5]
   1a794:	str	r0, [r5, #20]
   1a798:	str	r4, [r5, #16]
   1a79c:	bne	1a7b8 <flatcc_json_printer_init_dynamic_buffer@@Base+0x84>
   1a7a0:	ldr	r3, [r5, #36]	; 0x24
   1a7a4:	mvn	r0, #0
   1a7a8:	cmp	r3, #0
   1a7ac:	moveq	r3, #3
   1a7b0:	streq	r3, [r5, #36]	; 0x24
   1a7b4:	pop	{r4, r5, r6, pc}
   1a7b8:	mov	r0, #0
   1a7bc:	pop	{r4, r5, r6, pc}
   1a7c0:			; <UNDEFINED> instruction: 0x00014cbc

0001a7c4 <flatcc_json_printer_get_buffer@@Base>:
   1a7c4:	ldr	r3, [r0, #44]	; 0x2c
   1a7c8:	push	{r4, r5, r6, lr}
   1a7cc:	mov	r5, r1
   1a7d0:	mov	r1, #0
   1a7d4:	mov	r4, r0
   1a7d8:	blx	r3
   1a7dc:	cmp	r5, #0
   1a7e0:	ldr	r0, [r4]
   1a7e4:	ldrne	r3, [r4, #20]
   1a7e8:	subne	r3, r3, r0
   1a7ec:	strne	r3, [r5]
   1a7f0:	pop	{r4, r5, r6, pc}

0001a7f4 <flatcc_json_printer_finalize_dynamic_buffer@@Base>:
   1a7f4:	push	{r4, r5, r6, lr}
   1a7f8:	mov	r5, r0
   1a7fc:	bl	1a7c4 <flatcc_json_printer_get_buffer@@Base>
   1a800:	mov	r2, #48	; 0x30
   1a804:	mov	r1, #0
   1a808:	mov	r4, r0
   1a80c:	mov	r0, r5
   1a810:	bl	12508 <memset@plt>
   1a814:	mov	r0, r4
   1a818:	pop	{r4, r5, r6, pc}

0001a81c <flatcc_json_printer_clear@@Base>:
   1a81c:	push	{r4, lr}
   1a820:	mov	r4, r0
   1a824:	ldrb	r3, [r0, #24]
   1a828:	cmp	r3, #0
   1a82c:	beq	1a840 <flatcc_json_printer_clear@@Base+0x24>
   1a830:	ldr	r0, [r0]
   1a834:	cmp	r0, #0
   1a838:	beq	1a840 <flatcc_json_printer_clear@@Base+0x24>
   1a83c:	bl	12460 <free@plt>
   1a840:	mov	r0, r4
   1a844:	mov	r2, #48	; 0x30
   1a848:	mov	r1, #0
   1a84c:	pop	{r4, lr}
   1a850:	b	12508 <memset@plt>
   1a854:	subs	r2, r1, #1
   1a858:	bxeq	lr
   1a85c:	bcc	1aa34 <flatcc_json_printer_clear@@Base+0x218>
   1a860:	cmp	r0, r1
   1a864:	bls	1aa18 <flatcc_json_printer_clear@@Base+0x1fc>
   1a868:	tst	r1, r2
   1a86c:	beq	1aa24 <flatcc_json_printer_clear@@Base+0x208>
   1a870:	clz	r3, r0
   1a874:	clz	r2, r1
   1a878:	sub	r3, r2, r3
   1a87c:	rsbs	r3, r3, #31
   1a880:	addne	r3, r3, r3, lsl #1
   1a884:	mov	r2, #0
   1a888:	addne	pc, pc, r3, lsl #2
   1a88c:	nop			; (mov r0, r0)
   1a890:	cmp	r0, r1, lsl #31
   1a894:	adc	r2, r2, r2
   1a898:	subcs	r0, r0, r1, lsl #31
   1a89c:	cmp	r0, r1, lsl #30
   1a8a0:	adc	r2, r2, r2
   1a8a4:	subcs	r0, r0, r1, lsl #30
   1a8a8:	cmp	r0, r1, lsl #29
   1a8ac:	adc	r2, r2, r2
   1a8b0:	subcs	r0, r0, r1, lsl #29
   1a8b4:	cmp	r0, r1, lsl #28
   1a8b8:	adc	r2, r2, r2
   1a8bc:	subcs	r0, r0, r1, lsl #28
   1a8c0:	cmp	r0, r1, lsl #27
   1a8c4:	adc	r2, r2, r2
   1a8c8:	subcs	r0, r0, r1, lsl #27
   1a8cc:	cmp	r0, r1, lsl #26
   1a8d0:	adc	r2, r2, r2
   1a8d4:	subcs	r0, r0, r1, lsl #26
   1a8d8:	cmp	r0, r1, lsl #25
   1a8dc:	adc	r2, r2, r2
   1a8e0:	subcs	r0, r0, r1, lsl #25
   1a8e4:	cmp	r0, r1, lsl #24
   1a8e8:	adc	r2, r2, r2
   1a8ec:	subcs	r0, r0, r1, lsl #24
   1a8f0:	cmp	r0, r1, lsl #23
   1a8f4:	adc	r2, r2, r2
   1a8f8:	subcs	r0, r0, r1, lsl #23
   1a8fc:	cmp	r0, r1, lsl #22
   1a900:	adc	r2, r2, r2
   1a904:	subcs	r0, r0, r1, lsl #22
   1a908:	cmp	r0, r1, lsl #21
   1a90c:	adc	r2, r2, r2
   1a910:	subcs	r0, r0, r1, lsl #21
   1a914:	cmp	r0, r1, lsl #20
   1a918:	adc	r2, r2, r2
   1a91c:	subcs	r0, r0, r1, lsl #20
   1a920:	cmp	r0, r1, lsl #19
   1a924:	adc	r2, r2, r2
   1a928:	subcs	r0, r0, r1, lsl #19
   1a92c:	cmp	r0, r1, lsl #18
   1a930:	adc	r2, r2, r2
   1a934:	subcs	r0, r0, r1, lsl #18
   1a938:	cmp	r0, r1, lsl #17
   1a93c:	adc	r2, r2, r2
   1a940:	subcs	r0, r0, r1, lsl #17
   1a944:	cmp	r0, r1, lsl #16
   1a948:	adc	r2, r2, r2
   1a94c:	subcs	r0, r0, r1, lsl #16
   1a950:	cmp	r0, r1, lsl #15
   1a954:	adc	r2, r2, r2
   1a958:	subcs	r0, r0, r1, lsl #15
   1a95c:	cmp	r0, r1, lsl #14
   1a960:	adc	r2, r2, r2
   1a964:	subcs	r0, r0, r1, lsl #14
   1a968:	cmp	r0, r1, lsl #13
   1a96c:	adc	r2, r2, r2
   1a970:	subcs	r0, r0, r1, lsl #13
   1a974:	cmp	r0, r1, lsl #12
   1a978:	adc	r2, r2, r2
   1a97c:	subcs	r0, r0, r1, lsl #12
   1a980:	cmp	r0, r1, lsl #11
   1a984:	adc	r2, r2, r2
   1a988:	subcs	r0, r0, r1, lsl #11
   1a98c:	cmp	r0, r1, lsl #10
   1a990:	adc	r2, r2, r2
   1a994:	subcs	r0, r0, r1, lsl #10
   1a998:	cmp	r0, r1, lsl #9
   1a99c:	adc	r2, r2, r2
   1a9a0:	subcs	r0, r0, r1, lsl #9
   1a9a4:	cmp	r0, r1, lsl #8
   1a9a8:	adc	r2, r2, r2
   1a9ac:	subcs	r0, r0, r1, lsl #8
   1a9b0:	cmp	r0, r1, lsl #7
   1a9b4:	adc	r2, r2, r2
   1a9b8:	subcs	r0, r0, r1, lsl #7
   1a9bc:	cmp	r0, r1, lsl #6
   1a9c0:	adc	r2, r2, r2
   1a9c4:	subcs	r0, r0, r1, lsl #6
   1a9c8:	cmp	r0, r1, lsl #5
   1a9cc:	adc	r2, r2, r2
   1a9d0:	subcs	r0, r0, r1, lsl #5
   1a9d4:	cmp	r0, r1, lsl #4
   1a9d8:	adc	r2, r2, r2
   1a9dc:	subcs	r0, r0, r1, lsl #4
   1a9e0:	cmp	r0, r1, lsl #3
   1a9e4:	adc	r2, r2, r2
   1a9e8:	subcs	r0, r0, r1, lsl #3
   1a9ec:	cmp	r0, r1, lsl #2
   1a9f0:	adc	r2, r2, r2
   1a9f4:	subcs	r0, r0, r1, lsl #2
   1a9f8:	cmp	r0, r1, lsl #1
   1a9fc:	adc	r2, r2, r2
   1aa00:	subcs	r0, r0, r1, lsl #1
   1aa04:	cmp	r0, r1
   1aa08:	adc	r2, r2, r2
   1aa0c:	subcs	r0, r0, r1
   1aa10:	mov	r0, r2
   1aa14:	bx	lr
   1aa18:	moveq	r0, #1
   1aa1c:	movne	r0, #0
   1aa20:	bx	lr
   1aa24:	clz	r2, r1
   1aa28:	rsb	r2, r2, #31
   1aa2c:	lsr	r0, r0, r2
   1aa30:	bx	lr
   1aa34:	cmp	r0, #0
   1aa38:	mvnne	r0, #0
   1aa3c:	b	1ad14 <flatcc_json_printer_clear@@Base+0x4f8>
   1aa40:	cmp	r1, #0
   1aa44:	beq	1aa34 <flatcc_json_printer_clear@@Base+0x218>
   1aa48:	push	{r0, r1, lr}
   1aa4c:	bl	1a854 <flatcc_json_printer_clear@@Base+0x38>
   1aa50:	pop	{r1, r2, lr}
   1aa54:	mul	r3, r2, r0
   1aa58:	sub	r1, r1, r3
   1aa5c:	bx	lr
   1aa60:	cmp	r1, #0
   1aa64:	beq	1ac70 <flatcc_json_printer_clear@@Base+0x454>
   1aa68:	eor	ip, r0, r1
   1aa6c:	rsbmi	r1, r1, #0
   1aa70:	subs	r2, r1, #1
   1aa74:	beq	1ac3c <flatcc_json_printer_clear@@Base+0x420>
   1aa78:	movs	r3, r0
   1aa7c:	rsbmi	r3, r0, #0
   1aa80:	cmp	r3, r1
   1aa84:	bls	1ac48 <flatcc_json_printer_clear@@Base+0x42c>
   1aa88:	tst	r1, r2
   1aa8c:	beq	1ac58 <flatcc_json_printer_clear@@Base+0x43c>
   1aa90:	clz	r2, r3
   1aa94:	clz	r0, r1
   1aa98:	sub	r2, r0, r2
   1aa9c:	rsbs	r2, r2, #31
   1aaa0:	addne	r2, r2, r2, lsl #1
   1aaa4:	mov	r0, #0
   1aaa8:	addne	pc, pc, r2, lsl #2
   1aaac:	nop			; (mov r0, r0)
   1aab0:	cmp	r3, r1, lsl #31
   1aab4:	adc	r0, r0, r0
   1aab8:	subcs	r3, r3, r1, lsl #31
   1aabc:	cmp	r3, r1, lsl #30
   1aac0:	adc	r0, r0, r0
   1aac4:	subcs	r3, r3, r1, lsl #30
   1aac8:	cmp	r3, r1, lsl #29
   1aacc:	adc	r0, r0, r0
   1aad0:	subcs	r3, r3, r1, lsl #29
   1aad4:	cmp	r3, r1, lsl #28
   1aad8:	adc	r0, r0, r0
   1aadc:	subcs	r3, r3, r1, lsl #28
   1aae0:	cmp	r3, r1, lsl #27
   1aae4:	adc	r0, r0, r0
   1aae8:	subcs	r3, r3, r1, lsl #27
   1aaec:	cmp	r3, r1, lsl #26
   1aaf0:	adc	r0, r0, r0
   1aaf4:	subcs	r3, r3, r1, lsl #26
   1aaf8:	cmp	r3, r1, lsl #25
   1aafc:	adc	r0, r0, r0
   1ab00:	subcs	r3, r3, r1, lsl #25
   1ab04:	cmp	r3, r1, lsl #24
   1ab08:	adc	r0, r0, r0
   1ab0c:	subcs	r3, r3, r1, lsl #24
   1ab10:	cmp	r3, r1, lsl #23
   1ab14:	adc	r0, r0, r0
   1ab18:	subcs	r3, r3, r1, lsl #23
   1ab1c:	cmp	r3, r1, lsl #22
   1ab20:	adc	r0, r0, r0
   1ab24:	subcs	r3, r3, r1, lsl #22
   1ab28:	cmp	r3, r1, lsl #21
   1ab2c:	adc	r0, r0, r0
   1ab30:	subcs	r3, r3, r1, lsl #21
   1ab34:	cmp	r3, r1, lsl #20
   1ab38:	adc	r0, r0, r0
   1ab3c:	subcs	r3, r3, r1, lsl #20
   1ab40:	cmp	r3, r1, lsl #19
   1ab44:	adc	r0, r0, r0
   1ab48:	subcs	r3, r3, r1, lsl #19
   1ab4c:	cmp	r3, r1, lsl #18
   1ab50:	adc	r0, r0, r0
   1ab54:	subcs	r3, r3, r1, lsl #18
   1ab58:	cmp	r3, r1, lsl #17
   1ab5c:	adc	r0, r0, r0
   1ab60:	subcs	r3, r3, r1, lsl #17
   1ab64:	cmp	r3, r1, lsl #16
   1ab68:	adc	r0, r0, r0
   1ab6c:	subcs	r3, r3, r1, lsl #16
   1ab70:	cmp	r3, r1, lsl #15
   1ab74:	adc	r0, r0, r0
   1ab78:	subcs	r3, r3, r1, lsl #15
   1ab7c:	cmp	r3, r1, lsl #14
   1ab80:	adc	r0, r0, r0
   1ab84:	subcs	r3, r3, r1, lsl #14
   1ab88:	cmp	r3, r1, lsl #13
   1ab8c:	adc	r0, r0, r0
   1ab90:	subcs	r3, r3, r1, lsl #13
   1ab94:	cmp	r3, r1, lsl #12
   1ab98:	adc	r0, r0, r0
   1ab9c:	subcs	r3, r3, r1, lsl #12
   1aba0:	cmp	r3, r1, lsl #11
   1aba4:	adc	r0, r0, r0
   1aba8:	subcs	r3, r3, r1, lsl #11
   1abac:	cmp	r3, r1, lsl #10
   1abb0:	adc	r0, r0, r0
   1abb4:	subcs	r3, r3, r1, lsl #10
   1abb8:	cmp	r3, r1, lsl #9
   1abbc:	adc	r0, r0, r0
   1abc0:	subcs	r3, r3, r1, lsl #9
   1abc4:	cmp	r3, r1, lsl #8
   1abc8:	adc	r0, r0, r0
   1abcc:	subcs	r3, r3, r1, lsl #8
   1abd0:	cmp	r3, r1, lsl #7
   1abd4:	adc	r0, r0, r0
   1abd8:	subcs	r3, r3, r1, lsl #7
   1abdc:	cmp	r3, r1, lsl #6
   1abe0:	adc	r0, r0, r0
   1abe4:	subcs	r3, r3, r1, lsl #6
   1abe8:	cmp	r3, r1, lsl #5
   1abec:	adc	r0, r0, r0
   1abf0:	subcs	r3, r3, r1, lsl #5
   1abf4:	cmp	r3, r1, lsl #4
   1abf8:	adc	r0, r0, r0
   1abfc:	subcs	r3, r3, r1, lsl #4
   1ac00:	cmp	r3, r1, lsl #3
   1ac04:	adc	r0, r0, r0
   1ac08:	subcs	r3, r3, r1, lsl #3
   1ac0c:	cmp	r3, r1, lsl #2
   1ac10:	adc	r0, r0, r0
   1ac14:	subcs	r3, r3, r1, lsl #2
   1ac18:	cmp	r3, r1, lsl #1
   1ac1c:	adc	r0, r0, r0
   1ac20:	subcs	r3, r3, r1, lsl #1
   1ac24:	cmp	r3, r1
   1ac28:	adc	r0, r0, r0
   1ac2c:	subcs	r3, r3, r1
   1ac30:	cmp	ip, #0
   1ac34:	rsbmi	r0, r0, #0
   1ac38:	bx	lr
   1ac3c:	teq	ip, r0
   1ac40:	rsbmi	r0, r0, #0
   1ac44:	bx	lr
   1ac48:	movcc	r0, #0
   1ac4c:	asreq	r0, ip, #31
   1ac50:	orreq	r0, r0, #1
   1ac54:	bx	lr
   1ac58:	clz	r2, r1
   1ac5c:	rsb	r2, r2, #31
   1ac60:	cmp	ip, #0
   1ac64:	lsr	r0, r3, r2
   1ac68:	rsbmi	r0, r0, #0
   1ac6c:	bx	lr
   1ac70:	cmp	r0, #0
   1ac74:	mvngt	r0, #-2147483648	; 0x80000000
   1ac78:	movlt	r0, #-2147483648	; 0x80000000
   1ac7c:	b	1ad14 <flatcc_json_printer_clear@@Base+0x4f8>
   1ac80:	cmp	r1, #0
   1ac84:	beq	1ac70 <flatcc_json_printer_clear@@Base+0x454>
   1ac88:	push	{r0, r1, lr}
   1ac8c:	bl	1aa68 <flatcc_json_printer_clear@@Base+0x24c>
   1ac90:	pop	{r1, r2, lr}
   1ac94:	mul	r3, r2, r0
   1ac98:	sub	r1, r1, r3
   1ac9c:	bx	lr
   1aca0:	subs	r3, r2, #32
   1aca4:	rsb	ip, r2, #32
   1aca8:	lsrmi	r0, r0, r2
   1acac:	lsrpl	r0, r1, r3
   1acb0:	orrmi	r0, r0, r1, lsl ip
   1acb4:	lsr	r1, r1, r2
   1acb8:	bx	lr
   1acbc:	subs	r3, r2, #32
   1acc0:	rsb	ip, r2, #32
   1acc4:	lslmi	r1, r1, r2
   1acc8:	lslpl	r1, r0, r3
   1accc:	orrmi	r1, r1, r0, lsr ip
   1acd0:	lsl	r0, r0, r2
   1acd4:	bx	lr
   1acd8:	cmp	r3, #0
   1acdc:	cmpeq	r2, #0
   1ace0:	bne	1acf8 <flatcc_json_printer_clear@@Base+0x4dc>
   1ace4:	cmp	r1, #0
   1ace8:	cmpeq	r0, #0
   1acec:	mvnne	r1, #0
   1acf0:	mvnne	r0, #0
   1acf4:	b	1ad14 <flatcc_json_printer_clear@@Base+0x4f8>
   1acf8:	sub	sp, sp, #8
   1acfc:	push	{sp, lr}
   1ad00:	bl	1ad24 <flatcc_json_printer_clear@@Base+0x508>
   1ad04:	ldr	lr, [sp, #4]
   1ad08:	add	sp, sp, #8
   1ad0c:	pop	{r2, r3}
   1ad10:	bx	lr
   1ad14:	push	{r1, lr}
   1ad18:	mov	r0, #8
   1ad1c:	bl	12430 <raise@plt>
   1ad20:	pop	{r1, pc}
   1ad24:	cmp	r1, r3
   1ad28:	push	{r4, r5, r6, r7, r8, r9, lr}
   1ad2c:	cmpeq	r0, r2
   1ad30:	mov	r4, r0
   1ad34:	mov	r5, r1
   1ad38:	ldr	r9, [sp, #28]
   1ad3c:	movcc	r0, #0
   1ad40:	movcc	r1, #0
   1ad44:	bcc	1ae3c <flatcc_json_printer_clear@@Base+0x620>
   1ad48:	cmp	r3, #0
   1ad4c:	clzeq	ip, r2
   1ad50:	clzne	ip, r3
   1ad54:	addeq	ip, ip, #32
   1ad58:	cmp	r5, #0
   1ad5c:	clzeq	r1, r4
   1ad60:	addeq	r1, r1, #32
   1ad64:	clzne	r1, r5
   1ad68:	sub	ip, ip, r1
   1ad6c:	sub	lr, ip, #32
   1ad70:	lsl	r7, r3, ip
   1ad74:	rsb	r8, ip, #32
   1ad78:	orr	r7, r7, r2, lsl lr
   1ad7c:	orr	r7, r7, r2, lsr r8
   1ad80:	lsl	r6, r2, ip
   1ad84:	cmp	r5, r7
   1ad88:	cmpeq	r4, r6
   1ad8c:	movcc	r0, #0
   1ad90:	movcc	r1, #0
   1ad94:	bcc	1adb0 <flatcc_json_printer_clear@@Base+0x594>
   1ad98:	mov	r3, #1
   1ad9c:	subs	r4, r4, r6
   1ada0:	lsl	r1, r3, lr
   1ada4:	lsl	r0, r3, ip
   1ada8:	orr	r1, r1, r3, lsr r8
   1adac:	sbc	r5, r5, r7
   1adb0:	cmp	ip, #0
   1adb4:	beq	1ae3c <flatcc_json_printer_clear@@Base+0x620>
   1adb8:	lsrs	r3, r7, #1
   1adbc:	rrx	r2, r6
   1adc0:	mov	r6, ip
   1adc4:	b	1ade8 <flatcc_json_printer_clear@@Base+0x5cc>
   1adc8:	subs	r4, r4, r2
   1adcc:	sbc	r5, r5, r3
   1add0:	adds	r4, r4, r4
   1add4:	adc	r5, r5, r5
   1add8:	adds	r4, r4, #1
   1addc:	adc	r5, r5, #0
   1ade0:	subs	r6, r6, #1
   1ade4:	beq	1ae04 <flatcc_json_printer_clear@@Base+0x5e8>
   1ade8:	cmp	r5, r3
   1adec:	cmpeq	r4, r2
   1adf0:	bcs	1adc8 <flatcc_json_printer_clear@@Base+0x5ac>
   1adf4:	adds	r4, r4, r4
   1adf8:	adc	r5, r5, r5
   1adfc:	subs	r6, r6, #1
   1ae00:	bne	1ade8 <flatcc_json_printer_clear@@Base+0x5cc>
   1ae04:	lsr	r6, r4, ip
   1ae08:	lsr	r7, r5, ip
   1ae0c:	orr	r6, r6, r5, lsl r8
   1ae10:	adds	r2, r0, r4
   1ae14:	orr	r6, r6, r5, lsr lr
   1ae18:	adc	r3, r1, r5
   1ae1c:	lsl	r1, r7, ip
   1ae20:	orr	r1, r1, r6, lsl lr
   1ae24:	lsl	r0, r6, ip
   1ae28:	orr	r1, r1, r6, lsr r8
   1ae2c:	subs	r0, r2, r0
   1ae30:	mov	r4, r6
   1ae34:	mov	r5, r7
   1ae38:	sbc	r1, r3, r1
   1ae3c:	cmp	r9, #0
   1ae40:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ae44:	strd	r4, [r9]
   1ae48:	pop	{r4, r5, r6, r7, r8, r9, pc}

0001ae4c <__libc_csu_init@@Base>:
   1ae4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae50:	mov	r7, r0
   1ae54:	ldr	r6, [pc, #72]	; 1aea4 <__libc_csu_init@@Base+0x58>
   1ae58:	ldr	r5, [pc, #72]	; 1aea8 <__libc_csu_init@@Base+0x5c>
   1ae5c:	add	r6, pc, r6
   1ae60:	add	r5, pc, r5
   1ae64:	sub	r6, r6, r5
   1ae68:	mov	r8, r1
   1ae6c:	mov	r9, r2
   1ae70:	bl	12410 <raise@plt-0x20>
   1ae74:	asrs	r6, r6, #2
   1ae78:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ae7c:	mov	r4, #0
   1ae80:	add	r4, r4, #1
   1ae84:	ldr	r3, [r5], #4
   1ae88:	mov	r2, r9
   1ae8c:	mov	r1, r8
   1ae90:	mov	r0, r7
   1ae94:	blx	r3
   1ae98:	cmp	r6, r4
   1ae9c:	bne	1ae80 <__libc_csu_init@@Base+0x34>
   1aea0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aea4:	andeq	r2, r1, ip, lsr #1
   1aea8:	andeq	r2, r1, r4, lsr #1

0001aeac <__libc_csu_fini@@Base>:
   1aeac:	bx	lr

Disassembly of section .fini:

0001aeb0 <.fini>:
   1aeb0:	push	{r3, lr}
   1aeb4:	pop	{r3, pc}
