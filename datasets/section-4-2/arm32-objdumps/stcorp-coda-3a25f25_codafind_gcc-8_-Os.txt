
../repos/stcorp-coda-3a25f25/codafind:     file format elf32-littlearm


Disassembly of section .init:

00010878 <.init>:
   10878:	push	{r3, lr}
   1087c:	bl	10c6c <_start@@Base+0x3c>
   10880:	pop	{r3, pc}

Disassembly of section .plt:

00010884 <coda_match_filefilter@plt-0x14>:
   10884:	push	{lr}		; (str lr, [sp, #-4]!)
   10888:	ldr	lr, [pc, #4]	; 10894 <coda_match_filefilter@plt-0x4>
   1088c:	add	lr, pc, lr
   10890:	ldr	pc, [lr, #8]!
   10894:	andeq	r1, r1, ip, ror #14

00010898 <coda_match_filefilter@plt>:
   10898:	add	ip, pc, #0, 12
   1089c:	add	ip, ip, #69632	; 0x11000
   108a0:	ldr	pc, [ip, #1900]!	; 0x76c

000108a4 <strcmp@plt>:
   108a4:	add	ip, pc, #0, 12
   108a8:	add	ip, ip, #69632	; 0x11000
   108ac:	ldr	pc, [ip, #1892]!	; 0x764

000108b0 <printf@plt>:
   108b0:	add	ip, pc, #0, 12
   108b4:	add	ip, ip, #69632	; 0x11000
   108b8:	ldr	pc, [ip, #1884]!	; 0x75c

000108bc <coda_set_definition_path_conditional@plt>:
   108bc:	add	ip, pc, #0, 12
   108c0:	add	ip, ip, #69632	; 0x11000
   108c4:	ldr	pc, [ip, #1876]!	; 0x754

000108c8 <coda_set_definition_path@plt>:
   108c8:	add	ip, pc, #0, 12
   108cc:	add	ip, ip, #69632	; 0x11000
   108d0:	ldr	pc, [ip, #1868]!	; 0x74c

000108d4 <coda_done@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #69632	; 0x11000
   108dc:	ldr	pc, [ip, #1860]!	; 0x744

000108e0 <puts@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #69632	; 0x11000
   108e8:	ldr	pc, [ip, #1852]!	; 0x73c

000108ec <__libc_start_main@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #69632	; 0x11000
   108f4:	ldr	pc, [ip, #1844]!	; 0x734

000108f8 <__gmon_start__@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #69632	; 0x11000
   10900:	ldr	pc, [ip, #1836]!	; 0x72c

00010904 <exit@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #69632	; 0x11000
   1090c:	ldr	pc, [ip, #1828]!	; 0x724

00010910 <fprintf@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #69632	; 0x11000
   10918:	ldr	pc, [ip, #1820]!	; 0x71c

0001091c <coda_init@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #69632	; 0x11000
   10924:	ldr	pc, [ip, #1812]!	; 0x714

00010928 <coda_set_option_perform_conversions@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #69632	; 0x11000
   10930:	ldr	pc, [ip, #1804]!	; 0x70c

00010934 <putchar@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #69632	; 0x11000
   1093c:	ldr	pc, [ip, #1796]!	; 0x704

00010940 <coda_errno_to_string@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #69632	; 0x11000
   10948:	ldr	pc, [ip, #1788]!	; 0x6fc

0001094c <coda_get_libcoda_version@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #69632	; 0x11000
   10954:	ldr	pc, [ip, #1780]!	; 0x6f4

00010958 <coda_get_errno@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #69632	; 0x11000
   10960:	ldr	pc, [ip, #1772]!	; 0x6ec

00010964 <fputs@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #69632	; 0x11000
   1096c:	ldr	pc, [ip, #1764]!	; 0x6e4

00010970 <abort@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #69632	; 0x11000
   10978:	ldr	pc, [ip, #1756]!	; 0x6dc

0001097c <__assert_fail@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #69632	; 0x11000
   10984:	ldr	pc, [ip, #1748]!	; 0x6d4

Disassembly of section .text:

00010988 <main@@Base>:
   10988:	ldr	r3, [pc, #596]	; 10be4 <main@@Base+0x25c>
   1098c:	mov	r2, #0
   10990:	cmp	r0, #1
   10994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10998:	sub	sp, sp, #20
   1099c:	str	r2, [r3]
   109a0:	str	r3, [sp, #12]
   109a4:	beq	109dc <main@@Base+0x54>
   109a8:	mov	r6, r1
   109ac:	mov	r7, r0
   109b0:	ldr	r1, [pc, #560]	; 10be8 <main@@Base+0x260>
   109b4:	ldr	r4, [r6, #4]
   109b8:	mov	r0, r4
   109bc:	bl	108a4 <strcmp@plt>
   109c0:	cmp	r0, #0
   109c4:	beq	109dc <main@@Base+0x54>
   109c8:	ldr	r1, [pc, #540]	; 10bec <main@@Base+0x264>
   109cc:	mov	r0, r4
   109d0:	bl	108a4 <strcmp@plt>
   109d4:	cmp	r0, #0
   109d8:	bne	109e8 <main@@Base+0x60>
   109dc:	bl	10d20 <_start@@Base+0xf0>
   109e0:	mov	r0, #0
   109e4:	bl	10904 <exit@plt>
   109e8:	ldr	r1, [pc, #512]	; 10bf0 <main@@Base+0x268>
   109ec:	mov	r0, r4
   109f0:	bl	108a4 <strcmp@plt>
   109f4:	cmp	r0, #0
   109f8:	beq	10a10 <main@@Base+0x88>
   109fc:	ldr	r1, [pc, #496]	; 10bf4 <main@@Base+0x26c>
   10a00:	mov	r0, r4
   10a04:	bl	108a4 <strcmp@plt>
   10a08:	cmp	r0, #0
   10a0c:	bne	10a34 <main@@Base+0xac>
   10a10:	bl	1094c <coda_get_libcoda_version@plt>
   10a14:	mov	r1, r0
   10a18:	ldr	r0, [pc, #472]	; 10bf8 <main@@Base+0x270>
   10a1c:	bl	108b0 <printf@plt>
   10a20:	ldr	r0, [pc, #468]	; 10bfc <main@@Base+0x274>
   10a24:	bl	108e0 <puts@plt>
   10a28:	mov	r0, #10
   10a2c:	bl	10934 <putchar@plt>
   10a30:	b	109e0 <main@@Base+0x58>
   10a34:	cmp	r7, #2
   10a38:	ble	10b2c <main@@Base+0x1a4>
   10a3c:	ldr	r1, [pc, #444]	; 10c00 <main@@Base+0x278>
   10a40:	mov	r0, r4
   10a44:	bl	108a4 <strcmp@plt>
   10a48:	cmp	r0, #0
   10a4c:	bne	10b2c <main@@Base+0x1a4>
   10a50:	ldr	r0, [r6, #8]
   10a54:	mov	r4, #3
   10a58:	bl	108c8 <coda_set_definition_path@plt>
   10a5c:	ldr	fp, [pc, #416]	; 10c04 <main@@Base+0x27c>
   10a60:	mov	r8, #1
   10a64:	mov	r9, #0
   10a68:	cmp	r4, r7
   10a6c:	lsl	sl, r4, #2
   10a70:	bge	10b78 <main@@Base+0x1f0>
   10a74:	ldr	r5, [r6, r4, lsl #2]
   10a78:	ldr	r1, [pc, #392]	; 10c08 <main@@Base+0x280>
   10a7c:	mov	r0, r5
   10a80:	bl	108a4 <strcmp@plt>
   10a84:	cmp	r0, #0
   10a88:	beq	10b98 <main@@Base+0x210>
   10a8c:	ldr	r1, [pc, #376]	; 10c0c <main@@Base+0x284>
   10a90:	mov	r0, r5
   10a94:	bl	108a4 <strcmp@plt>
   10a98:	cmp	r0, #0
   10a9c:	beq	10b98 <main@@Base+0x210>
   10aa0:	ldr	r1, [pc, #360]	; 10c10 <main@@Base+0x288>
   10aa4:	mov	r0, r5
   10aa8:	bl	108a4 <strcmp@plt>
   10aac:	cmp	r0, #0
   10ab0:	beq	10ac8 <main@@Base+0x140>
   10ab4:	mov	r1, fp
   10ab8:	mov	r0, r5
   10abc:	bl	108a4 <strcmp@plt>
   10ac0:	cmp	r0, #0
   10ac4:	bne	10af0 <main@@Base+0x168>
   10ac8:	add	r2, r4, #1
   10acc:	cmp	r2, r7
   10ad0:	bge	10af0 <main@@Base+0x168>
   10ad4:	add	r3, r6, sl
   10ad8:	ldr	r3, [r3, #4]
   10adc:	ldrb	r1, [r3]
   10ae0:	cmp	r1, #45	; 0x2d
   10ae4:	movne	r4, r2
   10ae8:	movne	r9, r3
   10aec:	bne	10b24 <main@@Base+0x19c>
   10af0:	ldr	r1, [pc, #284]	; 10c14 <main@@Base+0x28c>
   10af4:	mov	r0, r5
   10af8:	bl	108a4 <strcmp@plt>
   10afc:	cmp	r0, #0
   10b00:	beq	10b18 <main@@Base+0x190>
   10b04:	ldr	r1, [pc, #268]	; 10c18 <main@@Base+0x290>
   10b08:	mov	r0, r5
   10b0c:	bl	108a4 <strcmp@plt>
   10b10:	cmp	r0, #0
   10b14:	bne	10b70 <main@@Base+0x1e8>
   10b18:	ldr	r3, [sp, #12]
   10b1c:	mov	r2, #1
   10b20:	str	r2, [r3]
   10b24:	add	r4, r4, #1
   10b28:	b	10a68 <main@@Base+0xe0>
   10b2c:	ldr	r2, [pc, #232]	; 10c1c <main@@Base+0x294>
   10b30:	mov	r1, #0
   10b34:	ldr	r0, [r6]
   10b38:	bl	108bc <coda_set_definition_path_conditional@plt>
   10b3c:	cmp	r0, #0
   10b40:	moveq	r4, #1
   10b44:	beq	10a5c <main@@Base+0xd4>
   10b48:	ldr	r3, [pc, #208]	; 10c20 <main@@Base+0x298>
   10b4c:	ldr	r4, [r3]
   10b50:	bl	10958 <coda_get_errno@plt>
   10b54:	ldr	r0, [r0]
   10b58:	bl	10940 <coda_errno_to_string@plt>
   10b5c:	mov	r2, r0
   10b60:	ldr	r1, [pc, #188]	; 10c24 <main@@Base+0x29c>
   10b64:	mov	r0, r4
   10b68:	bl	10910 <fprintf@plt>
   10b6c:	b	10b90 <main@@Base+0x208>
   10b70:	ldrb	r3, [r5]
   10b74:	cmp	r3, #45	; 0x2d
   10b78:	bne	10ba0 <main@@Base+0x218>
   10b7c:	ldr	r3, [pc, #156]	; 10c20 <main@@Base+0x298>
   10b80:	ldr	r0, [pc, #160]	; 10c28 <main@@Base+0x2a0>
   10b84:	ldr	r1, [r3]
   10b88:	bl	10964 <fputs@plt>
   10b8c:	bl	10d20 <_start@@Base+0xf0>
   10b90:	mov	r0, #1
   10b94:	b	109e4 <main@@Base+0x5c>
   10b98:	mov	r8, r0
   10b9c:	b	10b24 <main@@Base+0x19c>
   10ba0:	bl	1091c <coda_init@plt>
   10ba4:	subs	r5, r0, #0
   10ba8:	bne	10b48 <main@@Base+0x1c0>
   10bac:	mov	r0, r8
   10bb0:	bl	10928 <coda_set_option_perform_conversions@plt>
   10bb4:	sub	r1, r7, r4
   10bb8:	ldr	r3, [pc, #108]	; 10c2c <main@@Base+0x2a4>
   10bbc:	add	r2, r6, sl
   10bc0:	mov	r0, r9
   10bc4:	str	r5, [sp]
   10bc8:	bl	10898 <coda_match_filefilter@plt>
   10bcc:	subs	r4, r0, #0
   10bd0:	bne	10b48 <main@@Base+0x1c0>
   10bd4:	bl	108d4 <coda_done@plt>
   10bd8:	mov	r0, r4
   10bdc:	add	sp, sp, #20
   10be0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10be4:	andeq	r2, r2, r0, ror r0
   10be8:	andeq	r1, r1, fp, asr r5
   10bec:	andeq	r1, r1, r5, ror #4
   10bf0:	andeq	r1, r1, lr, asr r5
   10bf4:	muleq	r1, fp, r2
   10bf8:	andeq	r1, r1, r1, ror #10
   10bfc:	andeq	r1, r1, lr, ror #10
   10c00:	muleq	r1, lr, r5
   10c04:	andeq	r1, r1, ip, asr #11
   10c08:	andeq	r1, r1, r6, asr #11
   10c0c:	andeq	r1, r1, r0, asr #1
   10c10:	andeq	r1, r1, r9, asr #11
   10c14:	ldrdeq	r1, [r1], -r5
   10c18:	ldrdeq	r1, [r1], -r8
   10c1c:	andeq	r1, r1, r1, lsr #11
   10c20:	andeq	r2, r2, r8, rrx
   10c24:			; <UNDEFINED> instruction: 0x000115bb
   10c28:	andeq	r1, r1, r4, ror #11
   10c2c:	andeq	r0, r1, r0, ror lr

00010c30 <_start@@Base>:
   10c30:	mov	fp, #0
   10c34:	mov	lr, #0
   10c38:	pop	{r1}		; (ldr r1, [sp], #4)
   10c3c:	mov	r2, sp
   10c40:	push	{r2}		; (str r2, [sp, #-4]!)
   10c44:	push	{r0}		; (str r0, [sp, #-4]!)
   10c48:	ldr	ip, [pc, #16]	; 10c60 <_start@@Base+0x30>
   10c4c:	push	{ip}		; (str ip, [sp, #-4]!)
   10c50:	ldr	r0, [pc, #12]	; 10c64 <_start@@Base+0x34>
   10c54:	ldr	r3, [pc, #12]	; 10c68 <_start@@Base+0x38>
   10c58:	bl	108ec <__libc_start_main@plt>
   10c5c:	bl	10970 <abort@plt>
   10c60:	ldrdeq	r0, [r1], -r8
   10c64:	andeq	r0, r1, r8, lsl #19
   10c68:	andeq	r0, r1, r8, ror pc
   10c6c:	ldr	r3, [pc, #20]	; 10c88 <_start@@Base+0x58>
   10c70:	ldr	r2, [pc, #20]	; 10c8c <_start@@Base+0x5c>
   10c74:	add	r3, pc, r3
   10c78:	ldr	r2, [r3, r2]
   10c7c:	cmp	r2, #0
   10c80:	bxeq	lr
   10c84:	b	108f8 <__gmon_start__@plt>
   10c88:	andeq	r1, r1, r4, lsl #7
   10c8c:	andeq	r0, r0, ip, asr r0
   10c90:	ldr	r0, [pc, #24]	; 10cb0 <_start@@Base+0x80>
   10c94:	ldr	r3, [pc, #24]	; 10cb4 <_start@@Base+0x84>
   10c98:	cmp	r3, r0
   10c9c:	bxeq	lr
   10ca0:	ldr	r3, [pc, #16]	; 10cb8 <_start@@Base+0x88>
   10ca4:	cmp	r3, #0
   10ca8:	bxeq	lr
   10cac:	bx	r3
   10cb0:	andeq	r2, r2, r8, rrx
   10cb4:	andeq	r2, r2, r8, rrx
   10cb8:	andeq	r0, r0, r0
   10cbc:	ldr	r0, [pc, #36]	; 10ce8 <_start@@Base+0xb8>
   10cc0:	ldr	r1, [pc, #36]	; 10cec <_start@@Base+0xbc>
   10cc4:	sub	r1, r1, r0
   10cc8:	asr	r1, r1, #2
   10ccc:	add	r1, r1, r1, lsr #31
   10cd0:	asrs	r1, r1, #1
   10cd4:	bxeq	lr
   10cd8:	ldr	r3, [pc, #16]	; 10cf0 <_start@@Base+0xc0>
   10cdc:	cmp	r3, #0
   10ce0:	bxeq	lr
   10ce4:	bx	r3
   10ce8:	andeq	r2, r2, r8, rrx
   10cec:	andeq	r2, r2, r8, rrx
   10cf0:	andeq	r0, r0, r0
   10cf4:	push	{r4, lr}
   10cf8:	ldr	r4, [pc, #24]	; 10d18 <_start@@Base+0xe8>
   10cfc:	ldrb	r3, [r4]
   10d00:	cmp	r3, #0
   10d04:	popne	{r4, pc}
   10d08:	bl	10c90 <_start@@Base+0x60>
   10d0c:	mov	r3, #1
   10d10:	strb	r3, [r4]
   10d14:	pop	{r4, pc}
   10d18:	andeq	r2, r2, ip, rrx
   10d1c:	b	10cbc <_start@@Base+0x8c>
   10d20:	push	{r4, lr}
   10d24:	ldr	r0, [pc, #228]	; 10e10 <_start@@Base+0x1e0>
   10d28:	bl	108e0 <puts@plt>
   10d2c:	ldr	r0, [pc, #224]	; 10e14 <_start@@Base+0x1e4>
   10d30:	bl	108e0 <puts@plt>
   10d34:	ldr	r0, [pc, #220]	; 10e18 <_start@@Base+0x1e8>
   10d38:	bl	108e0 <puts@plt>
   10d3c:	ldr	r0, [pc, #216]	; 10e1c <_start@@Base+0x1ec>
   10d40:	bl	108e0 <puts@plt>
   10d44:	mov	r0, #10
   10d48:	bl	10934 <putchar@plt>
   10d4c:	ldr	r0, [pc, #204]	; 10e20 <_start@@Base+0x1f0>
   10d50:	bl	108e0 <puts@plt>
   10d54:	ldr	r0, [pc, #200]	; 10e24 <_start@@Base+0x1f4>
   10d58:	bl	108e0 <puts@plt>
   10d5c:	ldr	r0, [pc, #196]	; 10e28 <_start@@Base+0x1f8>
   10d60:	bl	108e0 <puts@plt>
   10d64:	ldr	r0, [pc, #192]	; 10e2c <_start@@Base+0x1fc>
   10d68:	bl	108e0 <puts@plt>
   10d6c:	ldr	r0, [pc, #188]	; 10e30 <_start@@Base+0x200>
   10d70:	bl	108e0 <puts@plt>
   10d74:	ldr	r0, [pc, #184]	; 10e34 <_start@@Base+0x204>
   10d78:	bl	108e0 <puts@plt>
   10d7c:	ldr	r0, [pc, #180]	; 10e38 <_start@@Base+0x208>
   10d80:	bl	108e0 <puts@plt>
   10d84:	ldr	r0, [pc, #176]	; 10e3c <_start@@Base+0x20c>
   10d88:	bl	108e0 <puts@plt>
   10d8c:	ldr	r0, [pc, #172]	; 10e40 <_start@@Base+0x210>
   10d90:	bl	108e0 <puts@plt>
   10d94:	mov	r0, #10
   10d98:	bl	10934 <putchar@plt>
   10d9c:	ldr	r0, [pc, #160]	; 10e44 <_start@@Base+0x214>
   10da0:	bl	108e0 <puts@plt>
   10da4:	ldr	r0, [pc, #156]	; 10e48 <_start@@Base+0x218>
   10da8:	bl	108e0 <puts@plt>
   10dac:	mov	r0, #10
   10db0:	bl	10934 <putchar@plt>
   10db4:	ldr	r0, [pc, #144]	; 10e4c <_start@@Base+0x21c>
   10db8:	bl	108e0 <puts@plt>
   10dbc:	ldr	r0, [pc, #140]	; 10e50 <_start@@Base+0x220>
   10dc0:	bl	108e0 <puts@plt>
   10dc4:	mov	r0, #10
   10dc8:	bl	10934 <putchar@plt>
   10dcc:	ldr	r0, [pc, #128]	; 10e54 <_start@@Base+0x224>
   10dd0:	bl	108e0 <puts@plt>
   10dd4:	ldr	r0, [pc, #124]	; 10e58 <_start@@Base+0x228>
   10dd8:	bl	108e0 <puts@plt>
   10ddc:	ldr	r0, [pc, #120]	; 10e5c <_start@@Base+0x22c>
   10de0:	bl	108e0 <puts@plt>
   10de4:	ldr	r0, [pc, #116]	; 10e60 <_start@@Base+0x230>
   10de8:	bl	108e0 <puts@plt>
   10dec:	ldr	r0, [pc, #112]	; 10e64 <_start@@Base+0x234>
   10df0:	bl	108e0 <puts@plt>
   10df4:	ldr	r0, [pc, #108]	; 10e68 <_start@@Base+0x238>
   10df8:	bl	108e0 <puts@plt>
   10dfc:	ldr	r0, [pc, #104]	; 10e6c <_start@@Base+0x23c>
   10e00:	bl	108e0 <puts@plt>
   10e04:	mov	r0, #10
   10e08:	pop	{r4, lr}
   10e0c:	b	10934 <putchar@plt>
   10e10:	strdeq	r0, [r1], -r1
   10e14:	strdeq	r0, [r1], -r8
   10e18:	andeq	r1, r1, r9, lsr r0
   10e1c:	andeq	r1, r1, r8, lsl #1
   10e20:	muleq	r1, pc, r0	; <UNPREDICTABLE>
   10e24:	strheq	r1, [r1], -r0
   10e28:	ldrdeq	r1, [r1], -r6
   10e2c:	andeq	r1, r1, r0, lsl r1
   10e30:	andeq	r1, r1, pc, lsr r1
   10e34:	andeq	r1, r1, r7, lsl #3
   10e38:	ldrdeq	r1, [r1], -r6
   10e3c:	andeq	r1, r1, r2, lsl #4
   10e40:	andeq	r1, r1, ip, lsl r2
   10e44:	andeq	r1, r1, r4, asr r2
   10e48:	andeq	r1, r1, ip, ror #4
   10e4c:	andeq	r1, r1, sl, lsl #5
   10e50:	andeq	r1, r1, r5, lsr #5
   10e54:	ldrdeq	r1, [r1], -r7
   10e58:	andeq	r1, r1, r5, lsr #6
   10e5c:	andeq	r1, r1, lr, ror #6
   10e60:	muleq	r1, r9, r3
   10e64:	andeq	r1, r1, r5, ror #7
   10e68:	andeq	r1, r1, fp, lsr #8
   10e6c:	andeq	r1, r1, sl, ror #8

00010e70 <callback@@Base>:
   10e70:	push	{r4, lr}
   10e74:	subs	r4, r1, #0
   10e78:	mov	r3, r2
   10e7c:	moveq	r2, r0
   10e80:	ldreq	r1, [pc, #192]	; 10f48 <callback@@Base+0xd8>
   10e84:	beq	10ebc <callback@@Base+0x4c>
   10e88:	cmp	r4, #2
   10e8c:	bne	10eac <callback@@Base+0x3c>
   10e90:	ldr	r3, [pc, #180]	; 10f4c <callback@@Base+0xdc>
   10e94:	mov	r2, r0
   10e98:	ldr	r1, [pc, #176]	; 10f50 <callback@@Base+0xe0>
   10e9c:	ldr	r0, [r3]
   10ea0:	bl	10910 <fprintf@plt>
   10ea4:	mov	r0, #0
   10ea8:	pop	{r4, pc}
   10eac:	cmp	r4, #1
   10eb0:	bne	10ecc <callback@@Base+0x5c>
   10eb4:	ldr	r1, [pc, #152]	; 10f54 <callback@@Base+0xe4>
   10eb8:	mov	r2, r0
   10ebc:	ldr	r0, [pc, #136]	; 10f4c <callback@@Base+0xdc>
   10ec0:	ldr	r0, [r0]
   10ec4:	bl	10910 <fprintf@plt>
   10ec8:	b	10ea4 <callback@@Base+0x34>
   10ecc:	ldr	r3, [pc, #132]	; 10f58 <callback@@Base+0xe8>
   10ed0:	ldr	r3, [r3]
   10ed4:	cmp	r3, #0
   10ed8:	beq	10f3c <callback@@Base+0xcc>
   10edc:	mov	r1, r0
   10ee0:	ldr	r0, [pc, #116]	; 10f5c <callback@@Base+0xec>
   10ee4:	bl	108b0 <printf@plt>
   10ee8:	cmp	r4, #5
   10eec:	ldrls	pc, [pc, r4, lsl #2]
   10ef0:	b	10ea4 <callback@@Base+0x34>
   10ef4:	andeq	r0, r1, ip, lsl #30
   10ef8:	andeq	r0, r1, r4, lsr #29
   10efc:	andeq	r0, r1, r4, lsr #29
   10f00:	andeq	r0, r1, r0, lsr #30
   10f04:	andeq	r0, r1, r4, lsr pc
   10f08:	andeq	r0, r1, ip, lsr #30
   10f0c:	ldr	r3, [pc, #76]	; 10f60 <callback@@Base+0xf0>
   10f10:	mov	r2, #110	; 0x6e
   10f14:	ldr	r1, [pc, #72]	; 10f64 <callback@@Base+0xf4>
   10f18:	ldr	r0, [pc, #72]	; 10f68 <callback@@Base+0xf8>
   10f1c:	bl	1097c <__assert_fail@plt>
   10f20:	ldr	r0, [pc, #68]	; 10f6c <callback@@Base+0xfc>
   10f24:	bl	108e0 <puts@plt>
   10f28:	b	10ea4 <callback@@Base+0x34>
   10f2c:	ldr	r0, [pc, #60]	; 10f70 <callback@@Base+0x100>
   10f30:	b	10f24 <callback@@Base+0xb4>
   10f34:	ldr	r0, [pc, #56]	; 10f74 <callback@@Base+0x104>
   10f38:	b	10f24 <callback@@Base+0xb4>
   10f3c:	cmp	r4, #4
   10f40:	bne	10ea4 <callback@@Base+0x34>
   10f44:	b	10f24 <callback@@Base+0xb4>
   10f48:	andeq	r1, r1, sl, lsr #9
   10f4c:	andeq	r2, r2, r8, rrx
   10f50:			; <UNDEFINED> instruction: 0x000114b2
   10f54:	ldrdeq	r1, [r1], -r2
   10f58:	andeq	r2, r2, r0, ror r0
   10f5c:	strdeq	r1, [r1], -r0
   10f60:	andeq	r0, r1, r8, ror #31
   10f64:	strdeq	r1, [r1], -r7
   10f68:	andeq	r1, r1, ip, lsr r5
   10f6c:	andeq	r1, r1, lr, lsr r5
   10f70:	andeq	r1, r1, r2, asr r5
   10f74:	andeq	r1, r1, r5, asr r5

00010f78 <__libc_csu_init@@Base>:
   10f78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10f7c:	mov	r7, r0
   10f80:	ldr	r6, [pc, #72]	; 10fd0 <__libc_csu_init@@Base+0x58>
   10f84:	ldr	r5, [pc, #72]	; 10fd4 <__libc_csu_init@@Base+0x5c>
   10f88:	add	r6, pc, r6
   10f8c:	add	r5, pc, r5
   10f90:	sub	r6, r6, r5
   10f94:	mov	r8, r1
   10f98:	mov	r9, r2
   10f9c:	bl	10878 <coda_match_filefilter@plt-0x20>
   10fa0:	asrs	r6, r6, #2
   10fa4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10fa8:	mov	r4, #0
   10fac:	add	r4, r4, #1
   10fb0:	ldr	r3, [r5], #4
   10fb4:	mov	r2, r9
   10fb8:	mov	r1, r8
   10fbc:	mov	r0, r7
   10fc0:	blx	r3
   10fc4:	cmp	r6, r4
   10fc8:	bne	10fac <__libc_csu_init@@Base+0x34>
   10fcc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10fd0:	andeq	r0, r1, ip, ror #30
   10fd4:	andeq	r0, r1, r4, ror #30

00010fd8 <__libc_csu_fini@@Base>:
   10fd8:	bx	lr

Disassembly of section .fini:

00010fdc <.fini>:
   10fdc:	push	{r3, lr}
   10fe0:	pop	{r3, pc}
