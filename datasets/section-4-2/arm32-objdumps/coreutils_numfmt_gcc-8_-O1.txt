
../repos/coreutils/src/numfmt:     file format elf32-littlearm


Disassembly of section .init:

00010df4 <.init>:
   10df4:	push	{r3, lr}
   10df8:	bl	11114 <__assert_fail@plt+0x48>
   10dfc:	pop	{r3, pc}

Disassembly of section .plt:

00010e00 <calloc@plt-0x14>:
   10e00:	push	{lr}		; (str lr, [sp, #-4]!)
   10e04:	ldr	lr, [pc, #4]	; 10e10 <calloc@plt-0x4>
   10e08:	add	lr, pc, lr
   10e0c:	ldr	pc, [lr, #8]!
   10e10:	strdeq	fp, [r1], -r0

00010e14 <calloc@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #110592	; 0x1b000
   10e1c:	ldr	pc, [ip, #496]!	; 0x1f0

00010e20 <fputs_unlocked@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #110592	; 0x1b000
   10e28:	ldr	pc, [ip, #488]!	; 0x1e8

00010e2c <__strncat_chk@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #110592	; 0x1b000
   10e34:	ldr	pc, [ip, #480]!	; 0x1e0

00010e38 <strcmp@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #110592	; 0x1b000
   10e40:	ldr	pc, [ip, #472]!	; 0x1d8

00010e44 <strtol@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #110592	; 0x1b000
   10e4c:	ldr	pc, [ip, #464]!	; 0x1d0

00010e50 <fflush@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #110592	; 0x1b000
   10e58:	ldr	pc, [ip, #456]!	; 0x1c8

00010e5c <wcwidth@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #110592	; 0x1b000
   10e64:	ldr	pc, [ip, #448]!	; 0x1c0

00010e68 <memmove@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #110592	; 0x1b000
   10e70:	ldr	pc, [ip, #440]!	; 0x1b8

00010e74 <free@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #110592	; 0x1b000
   10e7c:	ldr	pc, [ip, #432]!	; 0x1b0

00010e80 <_exit@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #110592	; 0x1b000
   10e88:	ldr	pc, [ip, #424]!	; 0x1a8

00010e8c <memcpy@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #110592	; 0x1b000
   10e94:	ldr	pc, [ip, #416]!	; 0x1a0

00010e98 <__strtoull_internal@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #110592	; 0x1b000
   10ea0:	ldr	pc, [ip, #408]!	; 0x198

00010ea4 <mbsinit@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #110592	; 0x1b000
   10eac:	ldr	pc, [ip, #400]!	; 0x190

00010eb0 <memcmp@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #110592	; 0x1b000
   10eb8:	ldr	pc, [ip, #392]!	; 0x188

00010ebc <fputc_unlocked@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #110592	; 0x1b000
   10ec4:	ldr	pc, [ip, #384]!	; 0x180

00010ec8 <dcgettext@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #110592	; 0x1b000
   10ed0:	ldr	pc, [ip, #376]!	; 0x178

00010ed4 <realloc@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #110592	; 0x1b000
   10edc:	ldr	pc, [ip, #368]!	; 0x170

00010ee0 <textdomain@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #110592	; 0x1b000
   10ee8:	ldr	pc, [ip, #360]!	; 0x168

00010eec <iswprint@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #110592	; 0x1b000
   10ef4:	ldr	pc, [ip, #352]!	; 0x160

00010ef8 <fwrite@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #110592	; 0x1b000
   10f00:	ldr	pc, [ip, #344]!	; 0x158

00010f04 <lseek64@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #110592	; 0x1b000
   10f0c:	ldr	pc, [ip, #336]!	; 0x150

00010f10 <__ctype_get_mb_cur_max@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #110592	; 0x1b000
   10f18:	ldr	pc, [ip, #328]!	; 0x148

00010f1c <strcpy@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #110592	; 0x1b000
   10f24:	ldr	pc, [ip, #320]!	; 0x140

00010f28 <__fpending@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #110592	; 0x1b000
   10f30:	ldr	pc, [ip, #312]!	; 0x138

00010f34 <mbrtowc@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #110592	; 0x1b000
   10f3c:	ldr	pc, [ip, #304]!	; 0x130

00010f40 <wcstombs@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #110592	; 0x1b000
   10f48:	ldr	pc, [ip, #296]!	; 0x128

00010f4c <error@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #110592	; 0x1b000
   10f54:	ldr	pc, [ip, #288]!	; 0x120

00010f58 <malloc@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #110592	; 0x1b000
   10f60:	ldr	pc, [ip, #280]!	; 0x118

00010f64 <__libc_start_main@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #110592	; 0x1b000
   10f6c:	ldr	pc, [ip, #272]!	; 0x110

00010f70 <__freading@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #110592	; 0x1b000
   10f78:	ldr	pc, [ip, #264]!	; 0x108

00010f7c <__gmon_start__@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #110592	; 0x1b000
   10f84:	ldr	pc, [ip, #256]!	; 0x100

00010f88 <mempcpy@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #110592	; 0x1b000
   10f90:	ldr	pc, [ip, #248]!	; 0xf8

00010f94 <getopt_long@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #110592	; 0x1b000
   10f9c:	ldr	pc, [ip, #240]!	; 0xf0

00010fa0 <__ctype_b_loc@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #110592	; 0x1b000
   10fa8:	ldr	pc, [ip, #232]!	; 0xe8

00010fac <exit@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #110592	; 0x1b000
   10fb4:	ldr	pc, [ip, #224]!	; 0xe0

00010fb8 <strlen@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #110592	; 0x1b000
   10fc0:	ldr	pc, [ip, #216]!	; 0xd8

00010fc4 <strchr@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #110592	; 0x1b000
   10fcc:	ldr	pc, [ip, #208]!	; 0xd0

00010fd0 <__errno_location@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #110592	; 0x1b000
   10fd8:	ldr	pc, [ip, #200]!	; 0xc8

00010fdc <__cxa_atexit@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #110592	; 0x1b000
   10fe4:	ldr	pc, [ip, #192]!	; 0xc0

00010fe8 <memset@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #110592	; 0x1b000
   10ff0:	ldr	pc, [ip, #184]!	; 0xb8

00010ff4 <__printf_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #110592	; 0x1b000
   10ffc:	ldr	pc, [ip, #176]!	; 0xb0

00011000 <fileno@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #110592	; 0x1b000
   11008:	ldr	pc, [ip, #168]!	; 0xa8

0001100c <__fprintf_chk@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #110592	; 0x1b000
   11014:	ldr	pc, [ip, #160]!	; 0xa0

00011018 <fclose@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #110592	; 0x1b000
   11020:	ldr	pc, [ip, #152]!	; 0x98

00011024 <fseeko64@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #110592	; 0x1b000
   1102c:	ldr	pc, [ip, #144]!	; 0x90

00011030 <__overflow@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #110592	; 0x1b000
   11038:	ldr	pc, [ip, #136]!	; 0x88

0001103c <setlocale@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #110592	; 0x1b000
   11044:	ldr	pc, [ip, #128]!	; 0x80

00011048 <wcswidth@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #110592	; 0x1b000
   11050:	ldr	pc, [ip, #120]!	; 0x78

00011054 <strrchr@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #110592	; 0x1b000
   1105c:	ldr	pc, [ip, #112]!	; 0x70

00011060 <nl_langinfo@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #110592	; 0x1b000
   11068:	ldr	pc, [ip, #104]!	; 0x68

0001106c <mbstowcs@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #110592	; 0x1b000
   11074:	ldr	pc, [ip, #96]!	; 0x60

00011078 <qsort@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #110592	; 0x1b000
   11080:	ldr	pc, [ip, #88]!	; 0x58

00011084 <bindtextdomain@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #110592	; 0x1b000
   1108c:	ldr	pc, [ip, #80]!	; 0x50

00011090 <getdelim@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #110592	; 0x1b000
   11098:	ldr	pc, [ip, #72]!	; 0x48

0001109c <strncmp@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #64]!	; 0x40

000110a8 <abort@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #56]!	; 0x38

000110b4 <__snprintf_chk@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #48]!	; 0x30

000110c0 <strspn@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #40]!	; 0x28

000110cc <__assert_fail@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #32]!

Disassembly of section .text:

000110d8 <.text>:
   110d8:	mov	fp, #0
   110dc:	mov	lr, #0
   110e0:	pop	{r1}		; (ldr r1, [sp], #4)
   110e4:	mov	r2, sp
   110e8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ec:	push	{r0}		; (str r0, [sp, #-4]!)
   110f0:	ldr	ip, [pc, #16]	; 11108 <__assert_fail@plt+0x3c>
   110f4:	push	{ip}		; (str ip, [sp, #-4]!)
   110f8:	ldr	r0, [pc, #12]	; 1110c <__assert_fail@plt+0x40>
   110fc:	ldr	r3, [pc, #12]	; 11110 <__assert_fail@plt+0x44>
   11100:	bl	10f64 <__libc_start_main@plt>
   11104:	bl	110a8 <abort@plt>
   11108:	andeq	r9, r1, r0, asr #15
   1110c:	andeq	r3, r1, ip, lsl #5
   11110:	andeq	r9, r1, r0, ror #14
   11114:	ldr	r3, [pc, #20]	; 11130 <__assert_fail@plt+0x64>
   11118:	ldr	r2, [pc, #20]	; 11134 <__assert_fail@plt+0x68>
   1111c:	add	r3, pc, r3
   11120:	ldr	r2, [r3, r2]
   11124:	cmp	r2, #0
   11128:	bxeq	lr
   1112c:	b	10f7c <__gmon_start__@plt>
   11130:	ldrdeq	sl, [r1], -ip
   11134:	strdeq	r0, [r0], -r8
   11138:	ldr	r0, [pc, #24]	; 11158 <__assert_fail@plt+0x8c>
   1113c:	ldr	r3, [pc, #24]	; 1115c <__assert_fail@plt+0x90>
   11140:	cmp	r3, r0
   11144:	bxeq	lr
   11148:	ldr	r3, [pc, #16]	; 11160 <__assert_fail@plt+0x94>
   1114c:	cmp	r3, #0
   11150:	bxeq	lr
   11154:	bx	r3
   11158:	andeq	ip, r2, r0, lsl #3
   1115c:	andeq	ip, r2, r0, lsl #3
   11160:	andeq	r0, r0, r0
   11164:	ldr	r0, [pc, #36]	; 11190 <__assert_fail@plt+0xc4>
   11168:	ldr	r1, [pc, #36]	; 11194 <__assert_fail@plt+0xc8>
   1116c:	sub	r1, r1, r0
   11170:	asr	r1, r1, #2
   11174:	add	r1, r1, r1, lsr #31
   11178:	asrs	r1, r1, #1
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0xcc>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	ip, r2, r0, lsl #3
   11194:	andeq	ip, r2, r0, lsl #3
   11198:	andeq	r0, r0, r0
   1119c:	push	{r4, lr}
   111a0:	ldr	r4, [pc, #24]	; 111c0 <__assert_fail@plt+0xf4>
   111a4:	ldrb	r3, [r4]
   111a8:	cmp	r3, #0
   111ac:	popne	{r4, pc}
   111b0:	bl	11138 <__assert_fail@plt+0x6c>
   111b4:	mov	r3, #1
   111b8:	strb	r3, [r4]
   111bc:	pop	{r4, pc}
   111c0:	andeq	ip, r2, r4, lsr #3
   111c4:	b	11164 <__assert_fail@plt+0x98>
   111c8:	strd	r4, [sp, #-16]!
   111cc:	str	r6, [sp, #8]
   111d0:	str	lr, [sp, #12]
   111d4:	mov	r5, r2
   111d8:	mov	r4, r3
   111dc:	ldrb	r3, [r0]
   111e0:	cmp	r3, #45	; 0x2d
   111e4:	addeq	r0, r0, #1
   111e8:	moveq	r3, #1
   111ec:	movne	r3, #0
   111f0:	strb	r3, [r4]
   111f4:	str	r0, [r1]
   111f8:	ldrb	r3, [r0]
   111fc:	sub	r2, r3, #48	; 0x30
   11200:	cmp	r2, #9
   11204:	bhi	112b0 <__assert_fail@plt+0x1e4>
   11208:	mov	ip, #0
   1120c:	vldr	d6, [pc, #196]	; 112d8 <__assert_fail@plt+0x20c>
   11210:	mov	lr, ip
   11214:	mov	r6, #1
   11218:	vldr	d5, [pc, #192]	; 112e0 <__assert_fail@plt+0x214>
   1121c:	vcmp.f64	d6, #0.0
   11220:	vmrs	APSR_nzcv, fpscr
   11224:	movne	r2, #1
   11228:	moveq	r2, #0
   1122c:	subs	r3, r3, #48	; 0x30
   11230:	movne	r2, #1
   11234:	cmp	r2, #0
   11238:	addne	ip, ip, #1
   1123c:	cmp	ip, #15
   11240:	bls	11250 <__assert_fail@plt+0x184>
   11244:	cmp	ip, #27
   11248:	bhi	112a0 <__assert_fail@plt+0x1d4>
   1124c:	mov	lr, r6
   11250:	vmov	s15, r3
   11254:	vcvt.f64.s32	d7, s15
   11258:	vmla.f64	d7, d6, d5
   1125c:	vmov.f64	d6, d7
   11260:	add	r0, r0, #1
   11264:	str	r0, [r1]
   11268:	ldrb	r3, [r0]
   1126c:	sub	r2, r3, #48	; 0x30
   11270:	cmp	r2, #9
   11274:	bls	1121c <__assert_fail@plt+0x150>
   11278:	ldrb	r3, [r4]
   1127c:	cmp	r3, #0
   11280:	vnegne.f64	d6, d6
   11284:	cmp	r5, #0
   11288:	vstrne	d6, [r5]
   1128c:	mov	r0, lr
   11290:	ldrd	r4, [sp]
   11294:	ldr	r6, [sp, #8]
   11298:	add	sp, sp, #12
   1129c:	pop	{pc}		; (ldr pc, [sp], #4)
   112a0:	mov	lr, #2
   112a4:	b	1128c <__assert_fail@plt+0x1c0>
   112a8:	mov	lr, #3
   112ac:	b	1128c <__assert_fail@plt+0x1c0>
   112b0:	movw	r3, #49576	; 0xc1a8
   112b4:	movt	r3, #2
   112b8:	ldr	r2, [r3]
   112bc:	ldr	r1, [r3, #4]
   112c0:	bl	1109c <strncmp@plt>
   112c4:	cmp	r0, #0
   112c8:	bne	112a8 <__assert_fail@plt+0x1dc>
   112cc:	vldr	d6, [pc, #4]	; 112d8 <__assert_fail@plt+0x20c>
   112d0:	mov	lr, #0
   112d4:	b	11278 <__assert_fail@plt+0x1ac>
	...
   112e4:	eormi	r0, r4, r0
   112e8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   112ec:	strd	r6, [sp, #8]
   112f0:	str	r8, [sp, #16]
   112f4:	str	lr, [sp, #20]
   112f8:	sub	sp, sp, #24
   112fc:	mov	r5, r0
   11300:	bl	10fb8 <strlen@plt>
   11304:	mov	r3, #0
   11308:	str	r3, [sp, #20]
   1130c:	subs	r6, r0, #0
   11310:	beq	113b8 <__assert_fail@plt+0x2ec>
   11314:	sub	r7, r6, #1
   11318:	ldrb	r3, [r5, r7]
   1131c:	sub	r3, r3, #48	; 0x30
   11320:	cmp	r3, #9
   11324:	bls	11428 <__assert_fail@plt+0x35c>
   11328:	add	r0, r6, #2
   1132c:	bl	17cd0 <__assert_fail@plt+0x6c04>
   11330:	mov	r4, r0
   11334:	add	r8, r0, r7
   11338:	str	r8, [sp, #20]
   1133c:	mov	r2, r6
   11340:	mov	r1, r5
   11344:	bl	10e8c <memcpy@plt>
   11348:	ldrb	r2, [r4, r7]
   1134c:	cmp	r2, #105	; 0x69
   11350:	movne	r3, #0
   11354:	moveq	r3, #1
   11358:	cmp	r6, #1
   1135c:	movls	r3, #0
   11360:	cmp	r3, #0
   11364:	bne	11390 <__assert_fail@plt+0x2c4>
   11368:	mov	r3, #66	; 0x42
   1136c:	strb	r3, [r8, #1]
   11370:	add	r3, r8, #2
   11374:	str	r3, [sp, #20]
   11378:	mov	r3, #0
   1137c:	strb	r3, [r8, #2]
   11380:	mov	r6, r4
   11384:	movw	r3, #39420	; 0x99fc
   11388:	movt	r3, #1
   1138c:	b	113c8 <__assert_fail@plt+0x2fc>
   11390:	ldrb	r3, [r8, #-1]
   11394:	sub	r3, r3, #48	; 0x30
   11398:	cmp	r3, #9
   1139c:	bls	11368 <__assert_fail@plt+0x29c>
   113a0:	mov	r3, #0
   113a4:	strb	r3, [r8]
   113a8:	mov	r6, r4
   113ac:	movw	r3, #39408	; 0x99f0
   113b0:	movt	r3, #1
   113b4:	b	113c8 <__assert_fail@plt+0x2fc>
   113b8:	mov	r4, r5
   113bc:	movw	r3, #39408	; 0x99f0
   113c0:	movt	r3, #1
   113c4:	mov	r6, #0
   113c8:	str	r3, [sp]
   113cc:	add	r3, sp, #8
   113d0:	mov	r2, #10
   113d4:	add	r1, sp, #20
   113d8:	mov	r0, r4
   113dc:	bl	18854 <__assert_fail@plt+0x7788>
   113e0:	cmp	r0, #0
   113e4:	bne	1143c <__assert_fail@plt+0x370>
   113e8:	ldr	r3, [sp, #20]
   113ec:	ldrb	r3, [r3]
   113f0:	cmp	r3, #0
   113f4:	bne	1143c <__assert_fail@plt+0x370>
   113f8:	ldrd	r2, [sp, #8]
   113fc:	orrs	r3, r2, r3
   11400:	beq	1143c <__assert_fail@plt+0x370>
   11404:	mov	r0, r6
   11408:	bl	14f60 <__assert_fail@plt+0x3e94>
   1140c:	ldrd	r0, [sp, #8]
   11410:	add	sp, sp, #24
   11414:	ldrd	r4, [sp]
   11418:	ldrd	r6, [sp, #8]
   1141c:	ldr	r8, [sp, #16]
   11420:	add	sp, sp, #20
   11424:	pop	{pc}		; (ldr pc, [sp], #4)
   11428:	mov	r4, r5
   1142c:	movw	r3, #39408	; 0x99f0
   11430:	movt	r3, #1
   11434:	mov	r6, #0
   11438:	b	113c8 <__assert_fail@plt+0x2fc>
   1143c:	mov	r0, r6
   11440:	bl	14f60 <__assert_fail@plt+0x3e94>
   11444:	mov	r2, #5
   11448:	movw	r1, #39432	; 0x9a08
   1144c:	movt	r1, #1
   11450:	mov	r0, #0
   11454:	bl	10ec8 <dcgettext@plt>
   11458:	mov	r4, r0
   1145c:	mov	r0, r5
   11460:	bl	176fc <__assert_fail@plt+0x6630>
   11464:	mov	r3, r0
   11468:	mov	r2, r4
   1146c:	mov	r1, #0
   11470:	mov	r0, #1
   11474:	bl	10f4c <error@plt>
   11478:	movw	r3, #49576	; 0xc1a8
   1147c:	movt	r3, #2
   11480:	ldr	r3, [r3, #8]
   11484:	cmp	r3, r0
   11488:	bxhi	lr
   1148c:	str	r4, [sp, #-8]!
   11490:	str	lr, [sp, #4]
   11494:	add	r1, r0, #1
   11498:	movw	r4, #49576	; 0xc1a8
   1149c:	movt	r4, #2
   114a0:	str	r1, [r4, #8]
   114a4:	ldr	r0, [r4, #12]
   114a8:	bl	17d30 <__assert_fail@plt+0x6c64>
   114ac:	str	r0, [r4, #12]
   114b0:	ldr	r4, [sp]
   114b4:	add	sp, sp, #4
   114b8:	pop	{pc}		; (ldr pc, [sp], #4)
   114bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114c0:	strd	r6, [sp, #8]
   114c4:	strd	r8, [sp, #16]
   114c8:	strd	sl, [sp, #24]
   114cc:	str	lr, [sp, #32]
   114d0:	vpush	{d8-d12}
   114d4:	sub	sp, sp, #236	; 0xec
   114d8:	mov	r6, r0
   114dc:	mov	r4, r2
   114e0:	mov	r5, r3
   114e4:	movw	r3, #49660	; 0xc1fc
   114e8:	movt	r3, #2
   114ec:	ldr	r3, [r3]
   114f0:	cmp	r3, #0
   114f4:	beq	11550 <__assert_fail@plt+0x484>
   114f8:	ldrd	r0, [r3]
   114fc:	mvn	r8, #0
   11500:	mvn	r9, #0
   11504:	cmp	r1, r9
   11508:	cmpeq	r0, r8
   1150c:	mvnne	r8, #0
   11510:	mvnne	r9, #0
   11514:	bne	11570 <__assert_fail@plt+0x4a4>
   11518:	movw	r3, #49564	; 0xc19c
   1151c:	movt	r3, #2
   11520:	ldr	r1, [r3]
   11524:	mov	r0, r6
   11528:	bl	10e20 <fputs_unlocked@plt>
   1152c:	mov	r0, #1
   11530:	add	sp, sp, #236	; 0xec
   11534:	vpop	{d8-d12}
   11538:	ldrd	r4, [sp]
   1153c:	ldrd	r6, [sp, #8]
   11540:	ldrd	r8, [sp, #16]
   11544:	ldrd	sl, [sp, #24]
   11548:	add	sp, sp, #32
   1154c:	pop	{pc}		; (ldr pc, [sp], #4)
   11550:	cmp	r5, #0
   11554:	cmpeq	r2, #1
   11558:	beq	1158c <__assert_fail@plt+0x4c0>
   1155c:	b	11518 <__assert_fail@plt+0x44c>
   11560:	ldrd	r0, [r3, #16]!
   11564:	cmp	r1, r9
   11568:	cmpeq	r0, r8
   1156c:	beq	11518 <__assert_fail@plt+0x44c>
   11570:	cmp	r5, r1
   11574:	cmpeq	r4, r0
   11578:	bcc	11560 <__assert_fail@plt+0x494>
   1157c:	ldrd	r0, [r3, #8]
   11580:	cmp	r5, r1
   11584:	cmpeq	r4, r0
   11588:	bhi	11560 <__assert_fail@plt+0x494>
   1158c:	movw	r3, #49576	; 0xc1a8
   11590:	movt	r3, #2
   11594:	ldr	r7, [r3, #16]
   11598:	cmp	r7, #0
   1159c:	beq	115f0 <__assert_fail@plt+0x524>
   115a0:	mov	r0, r6
   115a4:	bl	10fb8 <strlen@plt>
   115a8:	mov	r8, r0
   115ac:	mov	r0, r7
   115b0:	bl	10fb8 <strlen@plt>
   115b4:	cmp	r8, r0
   115b8:	bls	115f0 <__assert_fail@plt+0x524>
   115bc:	sub	r8, r8, r0
   115c0:	add	r1, r6, r8
   115c4:	mov	r0, r7
   115c8:	bl	10e38 <strcmp@plt>
   115cc:	cmp	r0, #0
   115d0:	bne	11778 <__assert_fail@plt+0x6ac>
   115d4:	mov	r3, #0
   115d8:	strb	r3, [r6, r8]
   115dc:	movw	r3, #49576	; 0xc1a8
   115e0:	movt	r3, #2
   115e4:	ldrb	r3, [r3, #20]
   115e8:	cmp	r3, #0
   115ec:	bne	11748 <__assert_fail@plt+0x67c>
   115f0:	ldrb	r7, [r6]
   115f4:	cmp	r7, #0
   115f8:	beq	117b0 <__assert_fail@plt+0x6e4>
   115fc:	bl	10fa0 <__ctype_b_loc@plt>
   11600:	ldr	r2, [r0]
   11604:	mov	r8, r6
   11608:	lsl	r7, r7, #1
   1160c:	ldrh	r3, [r2, r7]
   11610:	tst	r3, #1
   11614:	beq	11624 <__assert_fail@plt+0x558>
   11618:	ldrb	r7, [r8, #1]!
   1161c:	cmp	r7, #0
   11620:	bne	11608 <__assert_fail@plt+0x53c>
   11624:	movw	r3, #49576	; 0xc1a8
   11628:	movt	r3, #2
   1162c:	ldr	r3, [r3, #24]
   11630:	cmp	r3, #0
   11634:	beq	11668 <__assert_fail@plt+0x59c>
   11638:	cmp	r4, #1
   1163c:	cmple	r6, r8
   11640:	bne	117b8 <__assert_fail@plt+0x6ec>
   11644:	movw	r3, #49576	; 0xc1a8
   11648:	movt	r3, #2
   1164c:	mov	r2, #0
   11650:	str	r2, [r3, #28]
   11654:	movw	r3, #49576	; 0xc1a8
   11658:	movt	r3, #2
   1165c:	ldrb	r3, [r3, #20]
   11660:	cmp	r3, #0
   11664:	bne	117d4 <__assert_fail@plt+0x708>
   11668:	mov	r2, #0
   1166c:	mov	r3, #0
   11670:	strd	r2, [sp, #40]	; 0x28
   11674:	mov	r3, #0
   11678:	str	r3, [sp, #32]
   1167c:	movw	r3, #49576	; 0xc1a8
   11680:	movt	r3, #2
   11684:	ldr	fp, [r3, #32]
   11688:	sub	r3, fp, #3
   1168c:	cmp	r3, #2
   11690:	movcc	sl, #1024	; 0x400
   11694:	movcs	sl, #1000	; 0x3e8
   11698:	movw	r3, #49576	; 0xc1a8
   1169c:	movt	r3, #2
   116a0:	ldrb	r3, [r3, #20]
   116a4:	cmp	r3, #0
   116a8:	bne	11800 <__assert_fail@plt+0x734>
   116ac:	add	r3, sp, #30
   116b0:	add	r2, sp, #40	; 0x28
   116b4:	add	r1, sp, #32
   116b8:	mov	r0, r8
   116bc:	bl	111c8 <__assert_fail@plt+0xfc>
   116c0:	mov	r5, r0
   116c4:	cmp	r0, #1
   116c8:	bhi	12a04 <__assert_fail@plt+0x1938>
   116cc:	ldr	r4, [sp, #32]
   116d0:	movw	r3, #49576	; 0xc1a8
   116d4:	movt	r3, #2
   116d8:	ldr	r7, [r3]
   116dc:	mov	r2, r7
   116e0:	ldr	r1, [r3, #4]
   116e4:	mov	r0, r4
   116e8:	bl	1109c <strncmp@plt>
   116ec:	cmp	r0, #0
   116f0:	movne	r7, #0
   116f4:	beq	11858 <__assert_fail@plt+0x78c>
   116f8:	movw	r3, #49576	; 0xc1a8
   116fc:	movt	r3, #2
   11700:	ldrb	r3, [r3, #20]
   11704:	cmp	r3, #0
   11708:	bne	118f8 <__assert_fail@plt+0x82c>
   1170c:	ldr	r3, [sp, #32]
   11710:	ldrb	r3, [r3]
   11714:	cmp	r3, #0
   11718:	beq	12904 <__assert_fail@plt+0x1838>
   1171c:	bl	10fa0 <__ctype_b_loc@plt>
   11720:	ldr	r2, [r0]
   11724:	ldr	r4, [sp, #32]
   11728:	ldrb	r9, [r4]
   1172c:	lsl	r3, r9, #1
   11730:	ldrh	r3, [r2, r3]
   11734:	tst	r3, #1
   11738:	beq	11924 <__assert_fail@plt+0x858>
   1173c:	add	r4, r4, #1
   11740:	str	r4, [sp, #32]
   11744:	b	11724 <__assert_fail@plt+0x658>
   11748:	movw	r3, #49552	; 0xc190
   1174c:	movt	r3, #2
   11750:	ldr	r8, [r3]
   11754:	mov	r0, r7
   11758:	bl	176fc <__assert_fail@plt+0x6630>
   1175c:	mov	r3, r0
   11760:	movw	r2, #39776	; 0x9b60
   11764:	movt	r2, #1
   11768:	mov	r1, #1
   1176c:	mov	r0, r8
   11770:	bl	1100c <__fprintf_chk@plt>
   11774:	b	115f0 <__assert_fail@plt+0x524>
   11778:	movw	r3, #49576	; 0xc1a8
   1177c:	movt	r3, #2
   11780:	ldrb	r3, [r3, #20]
   11784:	cmp	r3, #0
   11788:	beq	115f0 <__assert_fail@plt+0x524>
   1178c:	movw	r3, #49552	; 0xc190
   11790:	movt	r3, #2
   11794:	ldr	r3, [r3]
   11798:	mov	r2, #22
   1179c:	mov	r1, #1
   117a0:	movw	r0, #39796	; 0x9b74
   117a4:	movt	r0, #1
   117a8:	bl	10ef8 <fwrite@plt>
   117ac:	b	115f0 <__assert_fail@plt+0x524>
   117b0:	mov	r8, r6
   117b4:	b	11624 <__assert_fail@plt+0x558>
   117b8:	mov	r0, r6
   117bc:	bl	10fb8 <strlen@plt>
   117c0:	movw	r3, #49576	; 0xc1a8
   117c4:	movt	r3, #2
   117c8:	str	r0, [r3, #28]
   117cc:	bl	11478 <__assert_fail@plt+0x3ac>
   117d0:	b	11654 <__assert_fail@plt+0x588>
   117d4:	movw	r3, #49576	; 0xc1a8
   117d8:	movt	r3, #2
   117dc:	movw	r0, #49552	; 0xc190
   117e0:	movt	r0, #2
   117e4:	ldr	r3, [r3, #28]
   117e8:	movw	r2, #39820	; 0x9b8c
   117ec:	movt	r2, #1
   117f0:	mov	r1, #1
   117f4:	ldr	r0, [r0]
   117f8:	bl	1100c <__fprintf_chk@plt>
   117fc:	b	11668 <__assert_fail@plt+0x59c>
   11800:	movw	r3, #49552	; 0xc190
   11804:	movt	r3, #2
   11808:	ldr	r4, [r3]
   1180c:	mov	r1, r8
   11810:	mov	r0, #0
   11814:	bl	176e0 <__assert_fail@plt+0x6614>
   11818:	mov	r5, r0
   1181c:	movw	r3, #49576	; 0xc1a8
   11820:	movt	r3, #2
   11824:	ldr	r1, [r3, #4]
   11828:	mov	r0, #1
   1182c:	bl	176e0 <__assert_fail@plt+0x6614>
   11830:	mov	r3, #15
   11834:	str	r3, [sp, #4]
   11838:	str	r0, [sp]
   1183c:	mov	r3, r5
   11840:	movw	r2, #39860	; 0x9bb4
   11844:	movt	r2, #1
   11848:	mov	r1, #1
   1184c:	mov	r0, r4
   11850:	bl	1100c <__fprintf_chk@plt>
   11854:	b	116ac <__assert_fail@plt+0x5e0>
   11858:	mov	r2, #0
   1185c:	mov	r3, #0
   11860:	strd	r2, [sp, #104]	; 0x68
   11864:	add	r0, r4, r7
   11868:	str	r0, [sp, #32]
   1186c:	add	r3, sp, #31
   11870:	add	r2, sp, #104	; 0x68
   11874:	add	r1, sp, #36	; 0x24
   11878:	bl	111c8 <__assert_fail@plt+0xfc>
   1187c:	cmp	r0, #1
   11880:	bhi	12a00 <__assert_fail@plt+0x1934>
   11884:	moveq	r5, r0
   11888:	ldrb	r3, [sp, #31]
   1188c:	cmp	r3, #0
   11890:	bne	129fc <__assert_fail@plt+0x1930>
   11894:	ldr	r2, [sp, #36]	; 0x24
   11898:	ldr	r7, [sp, #32]
   1189c:	vldr	d5, [sp, #104]	; 0x68
   118a0:	subs	r7, r2, r7
   118a4:	beq	118e8 <__assert_fail@plt+0x81c>
   118a8:	subs	r3, r7, #1
   118ac:	beq	118f0 <__assert_fail@plt+0x824>
   118b0:	vldr	d7, [pc, #968]	; 11c80 <__assert_fail@plt+0xbb4>
   118b4:	vmov.f64	d6, d7
   118b8:	vmul.f64	d7, d7, d6
   118bc:	subs	r3, r3, #1
   118c0:	bne	118b8 <__assert_fail@plt+0x7ec>
   118c4:	vdiv.f64	d6, d5, d7
   118c8:	ldrb	r3, [sp, #30]
   118cc:	cmp	r3, #0
   118d0:	vldr	d7, [sp, #40]	; 0x28
   118d4:	vsubne.f64	d7, d7, d6
   118d8:	vaddeq.f64	d7, d6, d7
   118dc:	vstr	d7, [sp, #40]	; 0x28
   118e0:	str	r2, [sp, #32]
   118e4:	b	116f8 <__assert_fail@plt+0x62c>
   118e8:	vldr	d7, [pc, #936]	; 11c98 <__assert_fail@plt+0xbcc>
   118ec:	b	118c4 <__assert_fail@plt+0x7f8>
   118f0:	vldr	d7, [pc, #904]	; 11c80 <__assert_fail@plt+0xbb4>
   118f4:	b	118c4 <__assert_fail@plt+0x7f8>
   118f8:	movw	r3, #49552	; 0xc190
   118fc:	movt	r3, #2
   11900:	str	r7, [sp, #8]
   11904:	ldrd	r0, [sp, #40]	; 0x28
   11908:	strd	r0, [sp]
   1190c:	movw	r2, #39956	; 0x9c14
   11910:	movt	r2, #1
   11914:	mov	r1, #1
   11918:	ldr	r0, [r3]
   1191c:	bl	1100c <__fprintf_chk@plt>
   11920:	b	1170c <__assert_fail@plt+0x640>
   11924:	mov	r1, r9
   11928:	movw	r0, #39408	; 0x99f0
   1192c:	movt	r0, #1
   11930:	bl	10fc4 <strchr@plt>
   11934:	cmp	r0, #0
   11938:	beq	11b0c <__assert_fail@plt+0xa40>
   1193c:	cmp	fp, #0
   11940:	beq	11af8 <__assert_fail@plt+0xa2c>
   11944:	sub	r9, r9, #69	; 0x45
   11948:	cmp	r9, #21
   1194c:	ldrls	pc, [pc, r9, lsl #2]
   11950:	b	119e4 <__assert_fail@plt+0x918>
   11954:	andeq	r1, r1, ip, asr #19
   11958:	andeq	r1, r1, r4, ror #19
   1195c:			; <UNDEFINED> instruction: 0x000119b4
   11960:	andeq	r1, r1, r4, ror #19
   11964:	andeq	r1, r1, r4, ror #19
   11968:	andeq	r1, r1, r4, ror #19
   1196c:	andeq	r1, r1, ip, ror #19
   11970:	andeq	r1, r1, r4, ror #19
   11974:	andeq	r1, r1, ip, lsr #19
   11978:	andeq	r1, r1, r4, ror #19
   1197c:	andeq	r1, r1, r4, ror #19
   11980:	andeq	r1, r1, r4, asr #19
   11984:	andeq	r1, r1, r4, ror #19
   11988:	andeq	r1, r1, r4, ror #19
   1198c:	andeq	r1, r1, r4, ror #19
   11990:			; <UNDEFINED> instruction: 0x000119bc
   11994:	andeq	r1, r1, r4, ror #19
   11998:	andeq	r1, r1, r4, ror #19
   1199c:	andeq	r1, r1, r4, ror #19
   119a0:	andeq	r1, r1, r4, ror #19
   119a4:	ldrdeq	r1, [r1], -ip
   119a8:	ldrdeq	r1, [r1], -r4
   119ac:	mov	r9, #2
   119b0:	b	119f0 <__assert_fail@plt+0x924>
   119b4:	mov	r9, #3
   119b8:	b	119f0 <__assert_fail@plt+0x924>
   119bc:	mov	r9, #4
   119c0:	b	119f0 <__assert_fail@plt+0x924>
   119c4:	mov	r9, #5
   119c8:	b	119f0 <__assert_fail@plt+0x924>
   119cc:	mov	r9, #6
   119d0:	b	119f0 <__assert_fail@plt+0x924>
   119d4:	mov	r9, #7
   119d8:	b	119f0 <__assert_fail@plt+0x924>
   119dc:	mov	r9, #8
   119e0:	b	119f0 <__assert_fail@plt+0x924>
   119e4:	mov	r9, #0
   119e8:	b	119f0 <__assert_fail@plt+0x924>
   119ec:	mov	r9, #1
   119f0:	add	r3, r4, #1
   119f4:	str	r3, [sp, #32]
   119f8:	cmp	fp, #1
   119fc:	beq	11a28 <__assert_fail@plt+0x95c>
   11a00:	cmp	fp, #4
   11a04:	bne	11a84 <__assert_fail@plt+0x9b8>
   11a08:	ldr	r3, [sp, #32]
   11a0c:	ldrb	r2, [r3]
   11a10:	cmp	r2, #105	; 0x69
   11a14:	bne	11b1c <__assert_fail@plt+0xa50>
   11a18:	add	r3, r3, #1
   11a1c:	str	r3, [sp, #32]
   11a20:	mov	r7, #0
   11a24:	b	12910 <__assert_fail@plt+0x1844>
   11a28:	ldrb	r3, [r4, #1]
   11a2c:	cmp	r3, #105	; 0x69
   11a30:	beq	11a3c <__assert_fail@plt+0x970>
   11a34:	mov	r7, #0
   11a38:	b	12910 <__assert_fail@plt+0x1844>
   11a3c:	add	r4, r4, #2
   11a40:	str	r4, [sp, #32]
   11a44:	movw	r3, #49576	; 0xc1a8
   11a48:	movt	r3, #2
   11a4c:	ldrb	r3, [r3, #20]
   11a50:	cmp	r3, #0
   11a54:	moveq	sl, #1024	; 0x400
   11a58:	beq	11a34 <__assert_fail@plt+0x968>
   11a5c:	movw	r0, #49552	; 0xc190
   11a60:	movt	r0, #2
   11a64:	mov	r3, #1024	; 0x400
   11a68:	movw	r2, #40008	; 0x9c48
   11a6c:	movt	r2, #1
   11a70:	mov	r1, #1
   11a74:	ldr	r0, [r0]
   11a78:	bl	1100c <__fprintf_chk@plt>
   11a7c:	mov	sl, #1024	; 0x400
   11a80:	b	11a34 <__assert_fail@plt+0x968>
   11a84:	mov	r7, #0
   11a88:	b	12910 <__assert_fail@plt+0x1844>
   11a8c:	vldr	d8, [pc, #516]	; 11c98 <__assert_fail@plt+0xbcc>
   11a90:	b	12938 <__assert_fail@plt+0x186c>
   11a94:	vmov.f64	d8, d7
   11a98:	b	12938 <__assert_fail@plt+0x186c>
   11a9c:	movw	r0, #49552	; 0xc190
   11aa0:	movt	r0, #2
   11aa4:	vstr	d8, [sp, #8]
   11aa8:	str	r9, [sp]
   11aac:	mov	r3, sl
   11ab0:	movw	r2, #40060	; 0x9c7c
   11ab4:	movt	r2, #1
   11ab8:	mov	r1, #1
   11abc:	ldr	r0, [r0]
   11ac0:	bl	1100c <__fprintf_chk@plt>
   11ac4:	b	1294c <__assert_fail@plt+0x1880>
   11ac8:	movw	r3, #49552	; 0xc190
   11acc:	movt	r3, #2
   11ad0:	vstr	d8, [sp, #8]
   11ad4:	vstr	d8, [sp]
   11ad8:	movw	r2, #40088	; 0x9c98
   11adc:	movt	r2, #1
   11ae0:	mov	r1, #1
   11ae4:	ldr	r0, [r3]
   11ae8:	bl	1100c <__fprintf_chk@plt>
   11aec:	b	1296c <__assert_fail@plt+0x18a0>
   11af0:	bl	110a8 <abort@plt>
   11af4:	mov	r7, #0
   11af8:	mov	r5, #4
   11afc:	movw	r1, #39524	; 0x9a64
   11b00:	movt	r1, #1
   11b04:	b	11b44 <__assert_fail@plt+0xa78>
   11b08:	mov	r7, #0
   11b0c:	mov	r5, #5
   11b10:	movw	r1, #39580	; 0x9a9c
   11b14:	movt	r1, #1
   11b18:	b	11b44 <__assert_fail@plt+0xa78>
   11b1c:	mov	r7, #0
   11b20:	mov	r5, #6
   11b24:	movw	r1, #39456	; 0x9a20
   11b28:	movt	r1, #1
   11b2c:	b	11b44 <__assert_fail@plt+0xa78>
   11b30:	mov	r7, #0
   11b34:	b	11b20 <__assert_fail@plt+0xa54>
   11b38:	mov	r7, #0
   11b3c:	movw	r1, #39504	; 0x9a50
   11b40:	movt	r1, #1
   11b44:	movw	r3, #49576	; 0xc1a8
   11b48:	movt	r3, #2
   11b4c:	ldr	r3, [r3, #36]	; 0x24
   11b50:	cmp	r3, #3
   11b54:	beq	11bb0 <__assert_fail@plt+0xae4>
   11b58:	movw	r3, #49416	; 0xc108
   11b5c:	movt	r3, #2
   11b60:	ldr	r4, [r3]
   11b64:	mov	r2, #5
   11b68:	mov	r0, #0
   11b6c:	bl	10ec8 <dcgettext@plt>
   11b70:	mov	r9, r0
   11b74:	mov	r0, r8
   11b78:	bl	176fc <__assert_fail@plt+0x6630>
   11b7c:	mov	r3, r0
   11b80:	mov	r2, r9
   11b84:	mov	r1, #0
   11b88:	mov	r0, r4
   11b8c:	bl	10f4c <error@plt>
   11b90:	b	11bb0 <__assert_fail@plt+0xae4>
   11b94:	cmp	r5, #1
   11b98:	bne	11bb0 <__assert_fail@plt+0xae4>
   11b9c:	movw	r3, #49576	; 0xc1a8
   11ba0:	movt	r3, #2
   11ba4:	ldrb	r3, [r3, #40]	; 0x28
   11ba8:	cmp	r3, #0
   11bac:	bne	11c1c <__assert_fail@plt+0xb50>
   11bb0:	movw	r3, #49416	; 0xc108
   11bb4:	movt	r3, #2
   11bb8:	ldrd	r0, [r3, #8]
   11bbc:	cmp	r1, #0
   11bc0:	cmpeq	r0, #1
   11bc4:	beq	11c54 <__assert_fail@plt+0xb88>
   11bc8:	bl	19680 <__assert_fail@plt+0x85b4>
   11bcc:	vldr	d8, [sp, #40]	; 0x28
   11bd0:	vmov	d7, r0, r1
   11bd4:	vmul.f64	d8, d7, d8
   11bd8:	movw	r3, #49416	; 0xc108
   11bdc:	movt	r3, #2
   11be0:	ldrd	r0, [r3, #16]
   11be4:	bl	19680 <__assert_fail@plt+0x85b4>
   11be8:	vmov	d7, r0, r1
   11bec:	vdiv.f64	d7, d8, d7
   11bf0:	vstr	d7, [sp, #40]	; 0x28
   11bf4:	vldr	d8, [sp, #40]	; 0x28
   11bf8:	cmp	r5, #1
   11bfc:	bls	11ca8 <__assert_fail@plt+0xbdc>
   11c00:	movw	r3, #49564	; 0xc19c
   11c04:	movt	r3, #2
   11c08:	ldr	r1, [r3]
   11c0c:	mov	r0, r6
   11c10:	bl	10e20 <fputs_unlocked@plt>
   11c14:	mov	r0, #0
   11c18:	b	11530 <__assert_fail@plt+0x464>
   11c1c:	mov	r2, #5
   11c20:	movw	r1, #40152	; 0x9cd8
   11c24:	movt	r1, #1
   11c28:	mov	r0, #0
   11c2c:	bl	10ec8 <dcgettext@plt>
   11c30:	mov	r4, r0
   11c34:	mov	r0, r8
   11c38:	bl	176fc <__assert_fail@plt+0x6630>
   11c3c:	mov	r3, r0
   11c40:	mov	r2, r4
   11c44:	mov	r1, #0
   11c48:	mov	r0, r1
   11c4c:	bl	10f4c <error@plt>
   11c50:	b	11bb0 <__assert_fail@plt+0xae4>
   11c54:	movw	r3, #49416	; 0xc108
   11c58:	movt	r3, #2
   11c5c:	ldrd	r2, [r3, #16]
   11c60:	cmp	r3, #0
   11c64:	cmpeq	r2, #1
   11c68:	bne	11bc8 <__assert_fail@plt+0xafc>
   11c6c:	b	11bf4 <__assert_fail@plt+0xb28>
   11c70:			; <UNDEFINED> instruction: 0xffffffff
   11c74:			; <UNDEFINED> instruction: 0xffefffff
   11c78:			; <UNDEFINED> instruction: 0xffffffff
   11c7c:	svcvc	0x00efffff
   11c80:	andeq	r0, r0, r0
   11c84:	eormi	r0, r4, r0
   11c88:	andeq	r0, r0, r0
   11c8c:	stccc	0, cr0, [r0], {-0}
   11c90:	andeq	r0, r0, r0
   11c94:	mvnmi	r0, #0
   11c98:	andeq	r0, r0, r0
   11c9c:	svccc	0x00f00000	; IMB
   11ca0:	andeq	r0, r0, r0
   11ca4:	eormi	r0, r4, r0
   11ca8:	movw	r3, #49416	; 0xc108
   11cac:	movt	r3, #2
   11cb0:	ldr	r3, [r3, #24]
   11cb4:	cmn	r3, #1
   11cb8:	movne	r7, r3
   11cbc:	vldr	d7, [pc, #-84]	; 11c70 <__assert_fail@plt+0xba4>
   11cc0:	vcmpe.f64	d8, d7
   11cc4:	vmrs	APSR_nzcv, fpscr
   11cc8:	blt	11cdc <__assert_fail@plt+0xc10>
   11ccc:	vldr	d7, [pc, #-92]	; 11c78 <__assert_fail@plt+0xbac>
   11cd0:	vcmpe.f64	d8, d7
   11cd4:	vmrs	APSR_nzcv, fpscr
   11cd8:	bls	11dc0 <__assert_fail@plt+0xcf4>
   11cdc:	movw	r3, #49576	; 0xc1a8
   11ce0:	movt	r3, #2
   11ce4:	ldr	r4, [r3, #44]	; 0x2c
   11ce8:	cmp	r4, #0
   11cec:	beq	128a0 <__assert_fail@plt+0x17d4>
   11cf0:	movw	r3, #49576	; 0xc1a8
   11cf4:	movt	r3, #2
   11cf8:	ldr	r8, [r3, #48]	; 0x30
   11cfc:	movw	r3, #49416	; 0xc108
   11d00:	movt	r3, #2
   11d04:	ldr	r6, [r3, #28]
   11d08:	mov	r3, #37	; 0x25
   11d0c:	strb	r3, [sp, #40]	; 0x28
   11d10:	cmp	r8, #0
   11d14:	movne	r3, #39	; 0x27
   11d18:	strbne	r3, [sp, #41]	; 0x29
   11d1c:	addne	r5, sp, #42	; 0x2a
   11d20:	addeq	r5, sp, #41	; 0x29
   11d24:	movw	r3, #49576	; 0xc1a8
   11d28:	movt	r3, #2
   11d2c:	ldr	r3, [r3, #52]	; 0x34
   11d30:	cmp	r3, #0
   11d34:	bne	11ea0 <__assert_fail@plt+0xdd4>
   11d38:	movw	r3, #49576	; 0xc1a8
   11d3c:	movt	r3, #2
   11d40:	ldrb	r3, [r3, #20]
   11d44:	cmp	r3, #0
   11d48:	bne	11ecc <__assert_fail@plt+0xe00>
   11d4c:	cmp	r4, #0
   11d50:	bne	121e4 <__assert_fail@plt+0x1118>
   11d54:	cmp	r7, #0
   11d58:	beq	11ef0 <__assert_fail@plt+0xe24>
   11d5c:	subs	r3, r7, #1
   11d60:	beq	11ef8 <__assert_fail@plt+0xe2c>
   11d64:	vldr	d9, [pc, #-236]	; 11c80 <__assert_fail@plt+0xbb4>
   11d68:	vmov.f64	d7, d9
   11d6c:	vmul.f64	d9, d9, d7
   11d70:	subs	r3, r3, #1
   11d74:	bne	11d6c <__assert_fail@plt+0xca0>
   11d78:	vmul.f64	d10, d8, d9
   11d7c:	vldr	d7, [pc, #-252]	; 11c88 <__assert_fail@plt+0xbbc>
   11d80:	vmul.f64	d7, d10, d7
   11d84:	vmov	r0, r1, d7
   11d88:	bl	196f4 <__assert_fail@plt+0x8628>
   11d8c:	bl	19694 <__assert_fail@plt+0x85c8>
   11d90:	vldr	d11, [pc, #-264]	; 11c90 <__assert_fail@plt+0xbc4>
   11d94:	vmov	d7, r0, r1
   11d98:	vmul.f64	d11, d7, d11
   11d9c:	vsub.f64	d10, d10, d11
   11da0:	cmp	r6, #4
   11da4:	ldrls	pc, [pc, r6, lsl #2]
   11da8:	b	121b4 <__assert_fail@plt+0x10e8>
   11dac:	andeq	r1, r1, r0, lsl #30
   11db0:	andeq	r1, r1, r0, lsr pc
   11db4:	andeq	r2, r1, r0, lsl #2
   11db8:	andeq	r2, r1, r8, ror r1
   11dbc:	andeq	r2, r1, ip, lsl #3
   11dc0:	vmov.f64	d7, d8
   11dc4:	mov	r3, #0
   11dc8:	vldr	d6, [pc, #-304]	; 11ca0 <__assert_fail@plt+0xbd4>
   11dcc:	vcmpe.f64	d7, #0.0
   11dd0:	vmrs	APSR_nzcv, fpscr
   11dd4:	vnegmi.f64	d5, d7
   11dd8:	vmovpl.f64	d5, d7
   11ddc:	vcmpe.f64	d5, d6
   11de0:	vmrs	APSR_nzcv, fpscr
   11de4:	blt	11df4 <__assert_fail@plt+0xd28>
   11de8:	add	r3, r3, #1
   11dec:	vdiv.f64	d7, d7, d6
   11df0:	b	11dcc <__assert_fail@plt+0xd00>
   11df4:	movw	r2, #49576	; 0xc1a8
   11df8:	movt	r2, #2
   11dfc:	ldr	r4, [r2, #44]	; 0x2c
   11e00:	cmp	r4, #0
   11e04:	bne	11e14 <__assert_fail@plt+0xd48>
   11e08:	add	r2, r7, r3
   11e0c:	cmp	r2, #15
   11e10:	bhi	128a8 <__assert_fail@plt+0x17dc>
   11e14:	cmp	r3, #26
   11e18:	bls	11cf0 <__assert_fail@plt+0xc24>
   11e1c:	movw	r3, #49576	; 0xc1a8
   11e20:	movt	r3, #2
   11e24:	ldr	r3, [r3, #36]	; 0x24
   11e28:	cmp	r3, #3
   11e2c:	beq	11c00 <__assert_fail@plt+0xb34>
   11e30:	movw	r3, #49416	; 0xc108
   11e34:	movt	r3, #2
   11e38:	ldr	r4, [r3]
   11e3c:	mov	r2, #5
   11e40:	movw	r1, #40336	; 0x9d90
   11e44:	movt	r1, #1
   11e48:	mov	r0, #0
   11e4c:	bl	10ec8 <dcgettext@plt>
   11e50:	vstr	d8, [sp]
   11e54:	mov	r2, r0
   11e58:	mov	r1, #0
   11e5c:	mov	r0, r4
   11e60:	bl	10f4c <error@plt>
   11e64:	b	11c00 <__assert_fail@plt+0xb34>
   11e68:	movw	r3, #49416	; 0xc108
   11e6c:	movt	r3, #2
   11e70:	ldr	r4, [r3]
   11e74:	mov	r2, #5
   11e78:	movw	r1, #40276	; 0x9d54
   11e7c:	movt	r1, #1
   11e80:	mov	r0, #0
   11e84:	bl	10ec8 <dcgettext@plt>
   11e88:	vstr	d8, [sp]
   11e8c:	mov	r2, r0
   11e90:	mov	r1, #0
   11e94:	mov	r0, r4
   11e98:	bl	10f4c <error@plt>
   11e9c:	b	11c00 <__assert_fail@plt+0xb34>
   11ea0:	str	r3, [sp, #4]
   11ea4:	movw	r3, #40404	; 0x9dd4
   11ea8:	movt	r3, #1
   11eac:	str	r3, [sp]
   11eb0:	mov	r3, #63	; 0x3f
   11eb4:	mov	r2, #1
   11eb8:	mov	r1, #62	; 0x3e
   11ebc:	mov	r0, r5
   11ec0:	bl	110b4 <__snprintf_chk@plt>
   11ec4:	add	r5, r5, r0
   11ec8:	b	11d38 <__assert_fail@plt+0xc6c>
   11ecc:	movw	r3, #49552	; 0xc190
   11ed0:	movt	r3, #2
   11ed4:	ldr	r3, [r3]
   11ed8:	mov	r2, #17
   11edc:	mov	r1, #1
   11ee0:	movw	r0, #40412	; 0x9ddc
   11ee4:	movt	r0, #1
   11ee8:	bl	10ef8 <fwrite@plt>
   11eec:	b	11d4c <__assert_fail@plt+0xc80>
   11ef0:	vldr	d9, [pc, #-608]	; 11c98 <__assert_fail@plt+0xbcc>
   11ef4:	b	11d78 <__assert_fail@plt+0xcac>
   11ef8:	vldr	d9, [pc, #-608]	; 11ca0 <__assert_fail@plt+0xbd4>
   11efc:	b	11d78 <__assert_fail@plt+0xcac>
   11f00:	vmov	r0, r1, d10
   11f04:	bl	196f4 <__assert_fail@plt+0x8628>
   11f08:	mov	sl, r0
   11f0c:	mov	fp, r1
   11f10:	bl	19694 <__assert_fail@plt+0x85c8>
   11f14:	vmov	d7, r0, r1
   11f18:	vcmpe.f64	d10, d7
   11f1c:	vmrs	APSR_nzcv, fpscr
   11f20:	ble	11f68 <__assert_fail@plt+0xe9c>
   11f24:	adds	sl, sl, #1
   11f28:	adc	fp, fp, #0
   11f2c:	b	11f68 <__assert_fail@plt+0xe9c>
   11f30:	vneg.f64	d10, d10
   11f34:	vmov	r0, r1, d10
   11f38:	bl	196f4 <__assert_fail@plt+0x8628>
   11f3c:	mov	sl, r0
   11f40:	mov	fp, r1
   11f44:	bl	19694 <__assert_fail@plt+0x85c8>
   11f48:	vmov	d7, r0, r1
   11f4c:	vcmpe.f64	d10, d7
   11f50:	vmrs	APSR_nzcv, fpscr
   11f54:	ble	11f60 <__assert_fail@plt+0xe94>
   11f58:	adds	sl, sl, #1
   11f5c:	adc	fp, fp, #0
   11f60:	rsbs	sl, sl, #0
   11f64:	rsc	fp, fp, #0
   11f68:	mov	r0, sl
   11f6c:	mov	r1, fp
   11f70:	bl	19694 <__assert_fail@plt+0x85c8>
   11f74:	vmov	d7, r0, r1
   11f78:	vadd.f64	d11, d7, d11
   11f7c:	vdiv.f64	d10, d11, d9
   11f80:	movw	r3, #49576	; 0xc1a8
   11f84:	movt	r3, #2
   11f88:	ldrb	r3, [r3, #20]
   11f8c:	cmp	r3, #0
   11f90:	beq	11fc8 <__assert_fail@plt+0xefc>
   11f94:	movw	r0, #49552	; 0xc190
   11f98:	movt	r0, #2
   11f9c:	movw	r1, #39644	; 0x9adc
   11fa0:	movt	r1, #1
   11fa4:	movw	r2, #39696	; 0x9b10
   11fa8:	movt	r2, #1
   11fac:	vstr	d10, [sp]
   11fb0:	mov	r3, r7
   11fb4:	cmp	r8, #0
   11fb8:	movne	r2, r1
   11fbc:	mov	r1, #1
   11fc0:	ldr	r0, [r0]
   11fc4:	bl	1100c <__fprintf_chk@plt>
   11fc8:	movw	r3, #40432	; 0x9df0
   11fcc:	movt	r3, #1
   11fd0:	ldr	r2, [r3]
   11fd4:	str	r2, [r5]
   11fd8:	ldrb	r3, [r3, #4]
   11fdc:	strb	r3, [r5, #4]
   11fe0:	vstr	d10, [sp, #8]
   11fe4:	str	r7, [sp, #4]
   11fe8:	add	r3, sp, #40	; 0x28
   11fec:	str	r3, [sp]
   11ff0:	mov	r3, #128	; 0x80
   11ff4:	mov	r2, #1
   11ff8:	mov	r1, r3
   11ffc:	add	r0, sp, #104	; 0x68
   12000:	bl	110b4 <__snprintf_chk@plt>
   12004:	cmp	r0, #127	; 0x7f
   12008:	bhi	121bc <__assert_fail@plt+0x10f0>
   1200c:	movw	r3, #49576	; 0xc1a8
   12010:	movt	r3, #2
   12014:	ldr	r4, [r3, #16]
   12018:	cmp	r4, #0
   1201c:	beq	1203c <__assert_fail@plt+0xf70>
   12020:	add	r0, sp, #104	; 0x68
   12024:	bl	10fb8 <strlen@plt>
   12028:	mov	r3, #128	; 0x80
   1202c:	rsb	r2, r0, #127	; 0x7f
   12030:	mov	r1, r4
   12034:	add	r0, sp, #104	; 0x68
   12038:	bl	10e2c <__strncat_chk@plt>
   1203c:	movw	r3, #49576	; 0xc1a8
   12040:	movt	r3, #2
   12044:	ldrb	r3, [r3, #20]
   12048:	cmp	r3, #0
   1204c:	bne	12714 <__assert_fail@plt+0x1648>
   12050:	movw	r3, #49576	; 0xc1a8
   12054:	movt	r3, #2
   12058:	ldr	r4, [r3, #28]
   1205c:	cmp	r4, #0
   12060:	beq	12074 <__assert_fail@plt+0xfa8>
   12064:	add	r0, sp, #104	; 0x68
   12068:	bl	10fb8 <strlen@plt>
   1206c:	cmp	r0, r4
   12070:	bcc	12748 <__assert_fail@plt+0x167c>
   12074:	add	r0, sp, #104	; 0x68
   12078:	bl	10fb8 <strlen@plt>
   1207c:	add	r0, r0, #1
   12080:	bl	11478 <__assert_fail@plt+0x3ac>
   12084:	movw	r3, #49576	; 0xc1a8
   12088:	movt	r3, #2
   1208c:	add	r1, sp, #104	; 0x68
   12090:	ldr	r0, [r3, #12]
   12094:	bl	10f1c <strcpy@plt>
   12098:	movw	r3, #49576	; 0xc1a8
   1209c:	movt	r3, #2
   120a0:	ldr	r0, [r3, #60]	; 0x3c
   120a4:	cmp	r0, #0
   120a8:	beq	120bc <__assert_fail@plt+0xff0>
   120ac:	movw	r3, #49564	; 0xc19c
   120b0:	movt	r3, #2
   120b4:	ldr	r1, [r3]
   120b8:	bl	10e20 <fputs_unlocked@plt>
   120bc:	movw	r3, #49564	; 0xc19c
   120c0:	movt	r3, #2
   120c4:	movw	r4, #49576	; 0xc1a8
   120c8:	movt	r4, #2
   120cc:	ldr	r1, [r3]
   120d0:	ldr	r0, [r4, #12]
   120d4:	bl	10e20 <fputs_unlocked@plt>
   120d8:	ldr	r0, [r4, #56]	; 0x38
   120dc:	cmp	r0, #0
   120e0:	moveq	r0, #1
   120e4:	beq	11530 <__assert_fail@plt+0x464>
   120e8:	movw	r3, #49564	; 0xc19c
   120ec:	movt	r3, #2
   120f0:	ldr	r1, [r3]
   120f4:	bl	10e20 <fputs_unlocked@plt>
   120f8:	mov	r0, #1
   120fc:	b	11530 <__assert_fail@plt+0x464>
   12100:	vcmpe.f64	d10, #0.0
   12104:	vmrs	APSR_nzcv, fpscr
   12108:	bmi	1213c <__assert_fail@plt+0x1070>
   1210c:	vmov	r0, r1, d10
   12110:	bl	196f4 <__assert_fail@plt+0x8628>
   12114:	mov	sl, r0
   12118:	mov	fp, r1
   1211c:	bl	19694 <__assert_fail@plt+0x85c8>
   12120:	vmov	d7, r0, r1
   12124:	vcmpe.f64	d10, d7
   12128:	vmrs	APSR_nzcv, fpscr
   1212c:	ble	11f68 <__assert_fail@plt+0xe9c>
   12130:	adds	sl, sl, #1
   12134:	adc	fp, fp, #0
   12138:	b	11f68 <__assert_fail@plt+0xe9c>
   1213c:	vneg.f64	d10, d10
   12140:	vmov	r0, r1, d10
   12144:	bl	196f4 <__assert_fail@plt+0x8628>
   12148:	mov	sl, r0
   1214c:	mov	fp, r1
   12150:	bl	19694 <__assert_fail@plt+0x85c8>
   12154:	vmov	d7, r0, r1
   12158:	vcmpe.f64	d10, d7
   1215c:	vmrs	APSR_nzcv, fpscr
   12160:	ble	1216c <__assert_fail@plt+0x10a0>
   12164:	adds	sl, sl, #1
   12168:	adc	fp, fp, #0
   1216c:	rsbs	sl, sl, #0
   12170:	rsc	fp, fp, #0
   12174:	b	11f68 <__assert_fail@plt+0xe9c>
   12178:	vmov	r0, r1, d10
   1217c:	bl	196f4 <__assert_fail@plt+0x8628>
   12180:	mov	sl, r0
   12184:	mov	fp, r1
   12188:	b	11f68 <__assert_fail@plt+0xe9c>
   1218c:	vcmpe.f64	d10, #0.0
   12190:	vmrs	APSR_nzcv, fpscr
   12194:	vldr	d7, [pc, #1004]	; 12588 <__assert_fail@plt+0x14bc>
   12198:	vsubmi.f64	d7, d10, d7
   1219c:	vaddpl.f64	d7, d10, d7
   121a0:	vmov	r0, r1, d7
   121a4:	bl	196f4 <__assert_fail@plt+0x8628>
   121a8:	mov	sl, r0
   121ac:	mov	fp, r1
   121b0:	b	11f68 <__assert_fail@plt+0xe9c>
   121b4:	vldr	d11, [pc, #980]	; 12590 <__assert_fail@plt+0x14c4>
   121b8:	b	11f7c <__assert_fail@plt+0xeb0>
   121bc:	mov	r2, #5
   121c0:	movw	r1, #40440	; 0x9df8
   121c4:	movt	r1, #1
   121c8:	mov	r0, #0
   121cc:	bl	10ec8 <dcgettext@plt>
   121d0:	vstr	d10, [sp]
   121d4:	mov	r2, r0
   121d8:	mov	r1, #0
   121dc:	mov	r0, #1
   121e0:	bl	10f4c <error@plt>
   121e4:	sub	r3, r4, #3
   121e8:	cmp	r3, #2
   121ec:	movcc	r3, #1024	; 0x400
   121f0:	movcs	r3, #1000	; 0x3e8
   121f4:	vmov	s14, r3
   121f8:	vcvt.f64.s32	d11, s14
   121fc:	vldr	d6, [pc, #916]	; 12598 <__assert_fail@plt+0x14cc>
   12200:	vcmpe.f64	d8, d6
   12204:	vmrs	APSR_nzcv, fpscr
   12208:	vmovlt.f64	d9, d8
   1220c:	movlt	r7, #0
   12210:	blt	12260 <__assert_fail@plt+0x1194>
   12214:	vldr	d6, [pc, #900]	; 125a0 <__assert_fail@plt+0x14d4>
   12218:	vcmpe.f64	d8, d6
   1221c:	vmrs	APSR_nzcv, fpscr
   12220:	vmovhi.f64	d9, d8
   12224:	movhi	r7, #0
   12228:	bhi	12260 <__assert_fail@plt+0x1194>
   1222c:	vmov.f64	d9, d8
   12230:	mov	r7, #0
   12234:	vcvt.f64.u32	d7, s14
   12238:	b	12244 <__assert_fail@plt+0x1178>
   1223c:	add	r7, r7, #1
   12240:	vdiv.f64	d9, d9, d7
   12244:	vcmpe.f64	d9, #0.0
   12248:	vmrs	APSR_nzcv, fpscr
   1224c:	vnegmi.f64	d6, d9
   12250:	vmovpl.f64	d6, d9
   12254:	vcmpe.f64	d7, d6
   12258:	vmrs	APSR_nzcv, fpscr
   1225c:	bls	1223c <__assert_fail@plt+0x1170>
   12260:	movw	r3, #49576	; 0xc1a8
   12264:	movt	r3, #2
   12268:	ldrb	r3, [r3, #20]
   1226c:	cmp	r3, #0
   12270:	bne	12300 <__assert_fail@plt+0x1234>
   12274:	movw	r3, #49416	; 0xc108
   12278:	movt	r3, #2
   1227c:	ldr	r2, [r3, #24]
   12280:	cmn	r2, #1
   12284:	beq	1232c <__assert_fail@plt+0x1260>
   12288:	add	r3, r7, r7, lsl #1
   1228c:	cmp	r3, r2
   12290:	movcs	r3, r2
   12294:	cmp	r3, #0
   12298:	beq	127d0 <__assert_fail@plt+0x1704>
   1229c:	subs	r3, r3, #1
   122a0:	beq	1281c <__assert_fail@plt+0x1750>
   122a4:	vldr	d10, [pc, #796]	; 125c8 <__assert_fail@plt+0x14fc>
   122a8:	vmov.f64	d7, d10
   122ac:	vmul.f64	d10, d10, d7
   122b0:	subs	r3, r3, #1
   122b4:	bne	122ac <__assert_fail@plt+0x11e0>
   122b8:	vmul.f64	d9, d9, d10
   122bc:	vldr	d7, [pc, #756]	; 125b8 <__assert_fail@plt+0x14ec>
   122c0:	vmul.f64	d7, d9, d7
   122c4:	vmov	r0, r1, d7
   122c8:	bl	196f4 <__assert_fail@plt+0x8628>
   122cc:	bl	19694 <__assert_fail@plt+0x85c8>
   122d0:	vldr	d12, [pc, #744]	; 125c0 <__assert_fail@plt+0x14f4>
   122d4:	vmov	d7, r0, r1
   122d8:	vmul.f64	d12, d7, d12
   122dc:	vsub.f64	d9, d9, d12
   122e0:	cmp	r6, #4
   122e4:	ldrls	pc, [pc, r6, lsl #2]
   122e8:	b	12530 <__assert_fail@plt+0x1464>
   122ec:	andeq	r2, r1, r4, asr r3
   122f0:	andeq	r2, r1, r4, lsl #7
   122f4:	andeq	r2, r1, ip, ror r4
   122f8:	strdeq	r2, [r1], -r4
   122fc:	andeq	r2, r1, r8, lsl #10
   12300:	movw	r3, #49552	; 0xc190
   12304:	movt	r3, #2
   12308:	str	r7, [sp, #16]
   1230c:	vstr	d11, [sp, #8]
   12310:	vstr	d9, [sp]
   12314:	movw	r2, #40484	; 0x9e24
   12318:	movt	r2, #1
   1231c:	mov	r1, #1
   12320:	ldr	r0, [r3]
   12324:	bl	1100c <__fprintf_chk@plt>
   12328:	b	12274 <__assert_fail@plt+0x11a8>
   1232c:	vcmpe.f64	d9, #0.0
   12330:	vmrs	APSR_nzcv, fpscr
   12334:	vnegmi.f64	d6, d9
   12338:	vmovpl.f64	d6, d9
   1233c:	vldr	d7, [pc, #644]	; 125c8 <__assert_fail@plt+0x14fc>
   12340:	vcmpe.f64	d6, d7
   12344:	vmrs	APSR_nzcv, fpscr
   12348:	movmi	r3, #1
   1234c:	movpl	r3, #0
   12350:	b	12294 <__assert_fail@plt+0x11c8>
   12354:	vmov	r0, r1, d9
   12358:	bl	196f4 <__assert_fail@plt+0x8628>
   1235c:	mov	r8, r0
   12360:	mov	r9, r1
   12364:	bl	19694 <__assert_fail@plt+0x85c8>
   12368:	vmov	d7, r0, r1
   1236c:	vcmpe.f64	d7, d9
   12370:	vmrs	APSR_nzcv, fpscr
   12374:	bpl	123bc <__assert_fail@plt+0x12f0>
   12378:	adds	r8, r8, #1
   1237c:	adc	r9, r9, #0
   12380:	b	123bc <__assert_fail@plt+0x12f0>
   12384:	vneg.f64	d9, d9
   12388:	vmov	r0, r1, d9
   1238c:	bl	196f4 <__assert_fail@plt+0x8628>
   12390:	mov	r8, r0
   12394:	mov	r9, r1
   12398:	bl	19694 <__assert_fail@plt+0x85c8>
   1239c:	vmov	d7, r0, r1
   123a0:	vcmpe.f64	d9, d7
   123a4:	vmrs	APSR_nzcv, fpscr
   123a8:	ble	123b4 <__assert_fail@plt+0x12e8>
   123ac:	adds	r8, r8, #1
   123b0:	adc	r9, r9, #0
   123b4:	rsbs	r8, r8, #0
   123b8:	rsc	r9, r9, #0
   123bc:	mov	r0, r8
   123c0:	mov	r1, r9
   123c4:	bl	19694 <__assert_fail@plt+0x85c8>
   123c8:	vmov	d7, r0, r1
   123cc:	vadd.f64	d12, d7, d12
   123d0:	vdiv.f64	d9, d12, d10
   123d4:	vcmpe.f64	d9, #0.0
   123d8:	vmrs	APSR_nzcv, fpscr
   123dc:	bmi	12538 <__assert_fail@plt+0x146c>
   123e0:	vcmpe.f64	d11, d9
   123e4:	vmrs	APSR_nzcv, fpscr
   123e8:	bhi	123f4 <__assert_fail@plt+0x1328>
   123ec:	vdiv.f64	d9, d9, d11
   123f0:	add	r7, r7, #1
   123f4:	vcmp.f64	d9, #0.0
   123f8:	vmrs	APSR_nzcv, fpscr
   123fc:	moveq	r6, #0
   12400:	bne	12554 <__assert_fail@plt+0x1488>
   12404:	movw	r3, #49576	; 0xc1a8
   12408:	movt	r3, #2
   1240c:	ldrb	r3, [r3, #20]
   12410:	cmp	r3, #0
   12414:	bne	125d0 <__assert_fail@plt+0x1504>
   12418:	movw	r3, #40564	; 0x9e74
   1241c:	movt	r3, #1
   12420:	ldr	r2, [r3]
   12424:	str	r2, [r5]
   12428:	ldrh	r2, [r3, #4]
   1242c:	strh	r2, [r5, #4]
   12430:	ldrb	r3, [r3, #6]
   12434:	strb	r3, [r5, #6]
   12438:	movw	r3, #49416	; 0xc108
   1243c:	movt	r3, #2
   12440:	ldr	r3, [r3, #24]
   12444:	cmn	r3, #1
   12448:	movne	r6, r3
   1244c:	cmp	r7, #8
   12450:	ldrls	pc, [pc, r7, lsl #2]
   12454:	b	12650 <__assert_fail@plt+0x1584>
   12458:	andeq	r2, r1, r0, asr #16
   1245c:	strdeq	r2, [r1], -ip
   12460:	andeq	r2, r1, ip, asr r6
   12464:	andeq	r2, r1, r8, lsl #12
   12468:	andeq	r2, r1, r4, lsl r6
   1246c:	andeq	r2, r1, r0, lsr #12
   12470:	andeq	r2, r1, ip, lsr #12
   12474:	andeq	r2, r1, r8, lsr r6
   12478:	andeq	r2, r1, r4, asr #12
   1247c:	vcmpe.f64	d9, #0.0
   12480:	vmrs	APSR_nzcv, fpscr
   12484:	bmi	124b8 <__assert_fail@plt+0x13ec>
   12488:	vmov	r0, r1, d9
   1248c:	bl	196f4 <__assert_fail@plt+0x8628>
   12490:	mov	r8, r0
   12494:	mov	r9, r1
   12498:	bl	19694 <__assert_fail@plt+0x85c8>
   1249c:	vmov	d7, r0, r1
   124a0:	vcmpe.f64	d7, d9
   124a4:	vmrs	APSR_nzcv, fpscr
   124a8:	bpl	123bc <__assert_fail@plt+0x12f0>
   124ac:	adds	r8, r8, #1
   124b0:	adc	r9, r9, #0
   124b4:	b	123bc <__assert_fail@plt+0x12f0>
   124b8:	vneg.f64	d9, d9
   124bc:	vmov	r0, r1, d9
   124c0:	bl	196f4 <__assert_fail@plt+0x8628>
   124c4:	mov	r8, r0
   124c8:	mov	r9, r1
   124cc:	bl	19694 <__assert_fail@plt+0x85c8>
   124d0:	vmov	d7, r0, r1
   124d4:	vcmpe.f64	d9, d7
   124d8:	vmrs	APSR_nzcv, fpscr
   124dc:	ble	124e8 <__assert_fail@plt+0x141c>
   124e0:	adds	r8, r8, #1
   124e4:	adc	r9, r9, #0
   124e8:	rsbs	r8, r8, #0
   124ec:	rsc	r9, r9, #0
   124f0:	b	123bc <__assert_fail@plt+0x12f0>
   124f4:	vmov	r0, r1, d9
   124f8:	bl	196f4 <__assert_fail@plt+0x8628>
   124fc:	mov	r8, r0
   12500:	mov	r9, r1
   12504:	b	123bc <__assert_fail@plt+0x12f0>
   12508:	vcmpe.f64	d9, #0.0
   1250c:	vmrs	APSR_nzcv, fpscr
   12510:	vldr	d7, [pc, #112]	; 12588 <__assert_fail@plt+0x14bc>
   12514:	vsubmi.f64	d7, d9, d7
   12518:	vaddpl.f64	d7, d9, d7
   1251c:	vmov	r0, r1, d7
   12520:	bl	196f4 <__assert_fail@plt+0x8628>
   12524:	mov	r8, r0
   12528:	mov	r9, r1
   1252c:	b	123bc <__assert_fail@plt+0x12f0>
   12530:	vldr	d12, [pc, #88]	; 12590 <__assert_fail@plt+0x14c4>
   12534:	b	123d0 <__assert_fail@plt+0x1304>
   12538:	vneg.f64	d7, d9
   1253c:	vcmpe.f64	d11, d7
   12540:	vmrs	APSR_nzcv, fpscr
   12544:	bls	123ec <__assert_fail@plt+0x1320>
   12548:	vmov	r2, r3, d9
   1254c:	vneg.f64	d9, d9
   12550:	b	12564 <__assert_fail@plt+0x1498>
   12554:	vcmpe.f64	d9, #0.0
   12558:	vmrs	APSR_nzcv, fpscr
   1255c:	vmovpl	r2, r3, d9
   12560:	bmi	12548 <__assert_fail@plt+0x147c>
   12564:	vldr	d7, [pc, #92]	; 125c8 <__assert_fail@plt+0x14fc>
   12568:	vcmpe.f64	d9, d7
   1256c:	vmrs	APSR_nzcv, fpscr
   12570:	movmi	r6, #1
   12574:	movpl	r6, #0
   12578:	cmp	r7, #0
   1257c:	moveq	r6, #0
   12580:	vmov	d9, r2, r3
   12584:	b	12404 <__assert_fail@plt+0x1338>
   12588:	andeq	r0, r0, r0
   1258c:	svccc	0x00e00000
	...
   12598:			; <UNDEFINED> instruction: 0xffffffff
   1259c:			; <UNDEFINED> instruction: 0xffefffff
   125a0:			; <UNDEFINED> instruction: 0xffffffff
   125a4:	svcvc	0x00efffff
	...
   125b4:	svccc	0x00f00000	; IMB
   125b8:	andeq	r0, r0, r0
   125bc:	stccc	0, cr0, [r0], {-0}
   125c0:	andeq	r0, r0, r0
   125c4:	mvnmi	r0, #0
   125c8:	andeq	r0, r0, r0
   125cc:	eormi	r0, r4, r0
   125d0:	movw	r3, #49552	; 0xc190
   125d4:	movt	r3, #2
   125d8:	str	r7, [sp, #16]
   125dc:	vstr	d11, [sp, #8]
   125e0:	vstr	d9, [sp]
   125e4:	movw	r2, #40520	; 0x9e48
   125e8:	movt	r2, #1
   125ec:	mov	r1, #1
   125f0:	ldr	r0, [r3]
   125f4:	bl	1100c <__fprintf_chk@plt>
   125f8:	b	12418 <__assert_fail@plt+0x134c>
   125fc:	movw	r3, #39772	; 0x9b5c
   12600:	movt	r3, #1
   12604:	b	12664 <__assert_fail@plt+0x1598>
   12608:	movw	r3, #39752	; 0x9b48
   1260c:	movt	r3, #1
   12610:	b	12664 <__assert_fail@plt+0x1598>
   12614:	movw	r3, #39756	; 0x9b4c
   12618:	movt	r3, #1
   1261c:	b	12664 <__assert_fail@plt+0x1598>
   12620:	movw	r3, #39760	; 0x9b50
   12624:	movt	r3, #1
   12628:	b	12664 <__assert_fail@plt+0x1598>
   1262c:	movw	r3, #39764	; 0x9b54
   12630:	movt	r3, #1
   12634:	b	12664 <__assert_fail@plt+0x1598>
   12638:	movw	r3, #39768	; 0x9b58
   1263c:	movt	r3, #1
   12640:	b	12664 <__assert_fail@plt+0x1598>
   12644:	movw	r3, #39744	; 0x9b40
   12648:	movt	r3, #1
   1264c:	b	12664 <__assert_fail@plt+0x1598>
   12650:	movw	r3, #39736	; 0x9b38
   12654:	movt	r3, #1
   12658:	b	12664 <__assert_fail@plt+0x1598>
   1265c:	movw	r3, #39748	; 0x9b44
   12660:	movt	r3, #1
   12664:	str	r3, [sp, #16]
   12668:	vstr	d9, [sp, #8]
   1266c:	str	r6, [sp, #4]
   12670:	add	r3, sp, #40	; 0x28
   12674:	str	r3, [sp]
   12678:	mov	r3, #128	; 0x80
   1267c:	mov	r2, #1
   12680:	mov	r1, #127	; 0x7f
   12684:	add	r0, sp, #104	; 0x68
   12688:	bl	110b4 <__snprintf_chk@plt>
   1268c:	cmp	r0, #126	; 0x7e
   12690:	bhi	12878 <__assert_fail@plt+0x17ac>
   12694:	cmp	r4, #4
   12698:	movne	r4, #0
   1269c:	moveq	r4, #1
   126a0:	cmp	r7, #0
   126a4:	movne	r7, r4
   126a8:	moveq	r7, #0
   126ac:	cmp	r7, #0
   126b0:	bne	126f8 <__assert_fail@plt+0x162c>
   126b4:	movw	r3, #49576	; 0xc1a8
   126b8:	movt	r3, #2
   126bc:	ldrb	r3, [r3, #20]
   126c0:	cmp	r3, #0
   126c4:	beq	1200c <__assert_fail@plt+0xf40>
   126c8:	movw	r3, #49552	; 0xc190
   126cc:	movt	r3, #2
   126d0:	ldr	r4, [r3]
   126d4:	add	r0, sp, #104	; 0x68
   126d8:	bl	176fc <__assert_fail@plt+0x6630>
   126dc:	mov	r3, r0
   126e0:	movw	r2, #40572	; 0x9e7c
   126e4:	movt	r2, #1
   126e8:	mov	r1, #1
   126ec:	mov	r0, r4
   126f0:	bl	1100c <__fprintf_chk@plt>
   126f4:	b	1200c <__assert_fail@plt+0xf40>
   126f8:	mov	r3, #128	; 0x80
   126fc:	rsb	r2, r0, #127	; 0x7f
   12700:	movw	r1, #46484	; 0xb594
   12704:	movt	r1, #1
   12708:	add	r0, sp, #104	; 0x68
   1270c:	bl	10e2c <__strncat_chk@plt>
   12710:	b	126b4 <__assert_fail@plt+0x15e8>
   12714:	movw	r3, #49552	; 0xc190
   12718:	movt	r3, #2
   1271c:	ldr	r4, [r3]
   12720:	add	r0, sp, #104	; 0x68
   12724:	bl	176fc <__assert_fail@plt+0x6630>
   12728:	str	r0, [sp, #8]
   1272c:	vstr	d8, [sp]
   12730:	movw	r2, #40596	; 0x9e94
   12734:	movt	r2, #1
   12738:	mov	r1, #1
   1273c:	mov	r0, r4
   12740:	bl	1100c <__fprintf_chk@plt>
   12744:	b	12050 <__assert_fail@plt+0xf84>
   12748:	str	r4, [sp, #40]	; 0x28
   1274c:	movw	r4, #49576	; 0xc1a8
   12750:	movt	r4, #2
   12754:	mov	r3, #2
   12758:	str	r3, [sp, #4]
   1275c:	movw	r3, #49416	; 0xc108
   12760:	movt	r3, #2
   12764:	ldr	r3, [r3, #32]
   12768:	str	r3, [sp]
   1276c:	add	r3, sp, #40	; 0x28
   12770:	ldr	r2, [r4, #8]
   12774:	ldr	r1, [r4, #12]
   12778:	add	r0, sp, #104	; 0x68
   1277c:	bl	14fc0 <__assert_fail@plt+0x3ef4>
   12780:	ldrb	r3, [r4, #20]
   12784:	cmp	r3, #0
   12788:	beq	12098 <__assert_fail@plt+0xfcc>
   1278c:	movw	r3, #49552	; 0xc190
   12790:	movt	r3, #2
   12794:	ldr	r4, [r3]
   12798:	movw	r3, #49576	; 0xc1a8
   1279c:	movt	r3, #2
   127a0:	ldr	r0, [r3, #12]
   127a4:	bl	176fc <__assert_fail@plt+0x6630>
   127a8:	mov	r3, r0
   127ac:	movw	r2, #40648	; 0x9ec8
   127b0:	movt	r2, #1
   127b4:	mov	r1, #1
   127b8:	mov	r0, r4
   127bc:	bl	1100c <__fprintf_chk@plt>
   127c0:	b	12098 <__assert_fail@plt+0xfcc>
   127c4:	vldr	d7, [pc, #-548]	; 125a8 <__assert_fail@plt+0x14dc>
   127c8:	vdiv.f64	d9, d7, d10
   127cc:	b	123e0 <__assert_fail@plt+0x1314>
   127d0:	vldr	d10, [pc, #-552]	; 125b0 <__assert_fail@plt+0x14e4>
   127d4:	vmul.f64	d9, d10, d9
   127d8:	vldr	d7, [pc, #-552]	; 125b8 <__assert_fail@plt+0x14ec>
   127dc:	vmul.f64	d7, d9, d7
   127e0:	vmov	r0, r1, d7
   127e4:	bl	196f4 <__assert_fail@plt+0x8628>
   127e8:	bl	19694 <__assert_fail@plt+0x85c8>
   127ec:	vldr	d12, [pc, #-564]	; 125c0 <__assert_fail@plt+0x14f4>
   127f0:	vmov	d7, r0, r1
   127f4:	vmul.f64	d12, d7, d12
   127f8:	vsub.f64	d9, d9, d12
   127fc:	cmp	r6, #4
   12800:	ldrls	pc, [pc, r6, lsl #2]
   12804:	b	127c4 <__assert_fail@plt+0x16f8>
   12808:	andeq	r2, r1, r4, asr r3
   1280c:	andeq	r2, r1, r4, lsl #7
   12810:	andeq	r2, r1, ip, ror r4
   12814:	strdeq	r2, [r1], -r4
   12818:	andeq	r2, r1, r8, lsl #10
   1281c:	vldr	d10, [pc, #-604]	; 125c8 <__assert_fail@plt+0x14fc>
   12820:	b	127d4 <__assert_fail@plt+0x1708>
   12824:	mov	r7, #0
   12828:	movw	r1, #39608	; 0x9ab8
   1282c:	movt	r1, #1
   12830:	b	11b44 <__assert_fail@plt+0xa78>
   12834:	mov	r7, #0
   12838:	mov	r1, r7
   1283c:	b	11b44 <__assert_fail@plt+0xa78>
   12840:	movw	r3, #43468	; 0xa9cc
   12844:	movt	r3, #1
   12848:	str	r3, [sp, #16]
   1284c:	vstr	d9, [sp, #8]
   12850:	str	r6, [sp, #4]
   12854:	add	r3, sp, #40	; 0x28
   12858:	str	r3, [sp]
   1285c:	mov	r3, #128	; 0x80
   12860:	mov	r2, #1
   12864:	mov	r1, #127	; 0x7f
   12868:	add	r0, sp, #104	; 0x68
   1286c:	bl	110b4 <__snprintf_chk@plt>
   12870:	cmp	r0, #126	; 0x7e
   12874:	bls	126b4 <__assert_fail@plt+0x15e8>
   12878:	mov	r2, #5
   1287c:	movw	r1, #40440	; 0x9df8
   12880:	movt	r1, #1
   12884:	mov	r0, #0
   12888:	bl	10ec8 <dcgettext@plt>
   1288c:	vstr	d9, [sp]
   12890:	mov	r2, r0
   12894:	mov	r1, #0
   12898:	mov	r0, #1
   1289c:	bl	10f4c <error@plt>
   128a0:	cmp	r7, #15
   128a4:	bls	11cf0 <__assert_fail@plt+0xc24>
   128a8:	movw	r3, #49576	; 0xc1a8
   128ac:	movt	r3, #2
   128b0:	ldr	r3, [r3, #36]	; 0x24
   128b4:	cmp	r3, #3
   128b8:	beq	11c00 <__assert_fail@plt+0xb34>
   128bc:	cmp	r7, #0
   128c0:	beq	11e68 <__assert_fail@plt+0xd9c>
   128c4:	movw	r3, #49416	; 0xc108
   128c8:	movt	r3, #2
   128cc:	ldr	r4, [r3]
   128d0:	mov	r2, #5
   128d4:	movw	r1, #40200	; 0x9d08
   128d8:	movt	r1, #1
   128dc:	mov	r0, #0
   128e0:	bl	10ec8 <dcgettext@plt>
   128e4:	mov	r1, #0
   128e8:	str	r7, [sp, #8]
   128ec:	str	r1, [sp, #12]
   128f0:	vstr	d8, [sp]
   128f4:	mov	r2, r0
   128f8:	mov	r0, r4
   128fc:	bl	10f4c <error@plt>
   12900:	b	11c00 <__assert_fail@plt+0xb34>
   12904:	cmp	fp, #4
   12908:	movne	r9, #0
   1290c:	beq	11b20 <__assert_fail@plt+0xa54>
   12910:	cmp	r9, #0
   12914:	beq	11a8c <__assert_fail@plt+0x9c0>
   12918:	vmov	s15, sl
   1291c:	vcvt.f64.s32	d7, s15
   12920:	subs	r2, r9, #1
   12924:	beq	11a94 <__assert_fail@plt+0x9c8>
   12928:	vmov.f64	d8, d7
   1292c:	vmul.f64	d8, d8, d7
   12930:	subs	r2, r2, #1
   12934:	bne	1292c <__assert_fail@plt+0x1860>
   12938:	movw	r3, #49576	; 0xc1a8
   1293c:	movt	r3, #2
   12940:	ldrb	r3, [r3, #20]
   12944:	cmp	r3, #0
   12948:	bne	11a9c <__assert_fail@plt+0x9d0>
   1294c:	vldr	d7, [sp, #40]	; 0x28
   12950:	vmul.f64	d8, d8, d7
   12954:	vstr	d8, [sp, #40]	; 0x28
   12958:	movw	r3, #49576	; 0xc1a8
   1295c:	movt	r3, #2
   12960:	ldrb	r3, [r3, #20]
   12964:	cmp	r3, #0
   12968:	bne	11ac8 <__assert_fail@plt+0x9fc>
   1296c:	ldr	r3, [sp, #32]
   12970:	cmp	r3, #0
   12974:	beq	11b94 <__assert_fail@plt+0xac8>
   12978:	ldrb	r3, [r3]
   1297c:	cmp	r3, #0
   12980:	beq	11b94 <__assert_fail@plt+0xac8>
   12984:	movw	r3, #49576	; 0xc1a8
   12988:	movt	r3, #2
   1298c:	ldr	r3, [r3, #36]	; 0x24
   12990:	cmp	r3, #3
   12994:	moveq	r5, #5
   12998:	beq	11bb0 <__assert_fail@plt+0xae4>
   1299c:	movw	r3, #49416	; 0xc108
   129a0:	movt	r3, #2
   129a4:	ldr	r4, [r3]
   129a8:	mov	r2, #5
   129ac:	movw	r1, #40120	; 0x9cb8
   129b0:	movt	r1, #1
   129b4:	mov	r0, #0
   129b8:	bl	10ec8 <dcgettext@plt>
   129bc:	mov	r5, r0
   129c0:	mov	r1, r8
   129c4:	mov	r0, #0
   129c8:	bl	176e0 <__assert_fail@plt+0x6614>
   129cc:	mov	r8, r0
   129d0:	ldr	r1, [sp, #32]
   129d4:	mov	r0, #1
   129d8:	bl	176e0 <__assert_fail@plt+0x6614>
   129dc:	str	r0, [sp]
   129e0:	mov	r3, r8
   129e4:	mov	r2, r5
   129e8:	mov	r1, #0
   129ec:	mov	r0, r4
   129f0:	bl	10f4c <error@plt>
   129f4:	mov	r5, #5
   129f8:	b	11bb0 <__assert_fail@plt+0xae4>
   129fc:	mov	r0, #3
   12a00:	mov	r5, r0
   12a04:	cmp	r5, #6
   12a08:	ldrls	pc, [pc, r5, lsl #2]
   12a0c:	b	12834 <__assert_fail@plt+0x1768>
   12a10:	strdeq	r1, [r1], -r0
   12a14:	strdeq	r1, [r1], -r0
   12a18:	andeq	r2, r1, r4, lsr #16
   12a1c:	andeq	r1, r1, r8, lsr fp
   12a20:	strdeq	r1, [r1], -r4
   12a24:	andeq	r1, r1, r8, lsl #22
   12a28:	andeq	r1, r1, r0, lsr fp
   12a2c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12a30:	strd	r6, [sp, #8]
   12a34:	strd	r8, [sp, #16]
   12a38:	strd	sl, [sp, #24]
   12a3c:	str	lr, [sp, #32]
   12a40:	sub	sp, sp, #12
   12a44:	mov	r7, r0
   12a48:	str	r1, [sp, #4]
   12a4c:	mov	r9, #1
   12a50:	mov	r5, #0
   12a54:	mov	r8, r5
   12a58:	movw	sl, #49416	; 0xc108
   12a5c:	movt	sl, #2
   12a60:	movw	fp, #49564	; 0xc19c
   12a64:	movt	fp, #2
   12a68:	b	12bbc <__assert_fail@plt+0x1af0>
   12a6c:	ldrb	r6, [r7]
   12a70:	cmp	r6, #0
   12a74:	beq	12aac <__assert_fail@plt+0x19e0>
   12a78:	bl	10fa0 <__ctype_b_loc@plt>
   12a7c:	ldr	r1, [r0]
   12a80:	mov	r4, r7
   12a84:	lsl	r3, r6, #1
   12a88:	ldrh	r3, [r1, r3]
   12a8c:	cmp	r6, #10
   12a90:	movne	r6, r3
   12a94:	orreq	r6, r3, #1
   12a98:	tst	r6, #1
   12a9c:	beq	12b24 <__assert_fail@plt+0x1a58>
   12aa0:	ldrb	r6, [r4, #1]!
   12aa4:	cmp	r6, #0
   12aa8:	bne	12a84 <__assert_fail@plt+0x19b8>
   12aac:	mov	r2, r5
   12ab0:	mov	r3, r8
   12ab4:	mov	r0, r7
   12ab8:	bl	114bc <__assert_fail@plt+0x3f0>
   12abc:	cmp	r0, #0
   12ac0:	moveq	r9, r0
   12ac4:	ldr	r3, [sp, #4]
   12ac8:	cmp	r3, #0
   12acc:	beq	12b04 <__assert_fail@plt+0x1a38>
   12ad0:	movw	r3, #49416	; 0xc108
   12ad4:	movt	r3, #2
   12ad8:	ldrb	r1, [r3, #40]	; 0x28
   12adc:	movw	r3, #49564	; 0xc19c
   12ae0:	movt	r3, #2
   12ae4:	ldr	r0, [r3]
   12ae8:	ldr	r3, [r0, #20]
   12aec:	ldr	r2, [r0, #24]
   12af0:	cmp	r3, r2
   12af4:	addcc	r2, r3, #1
   12af8:	strcc	r2, [r0, #20]
   12afc:	strbcc	r1, [r3]
   12b00:	bcs	12c0c <__assert_fail@plt+0x1b40>
   12b04:	mov	r0, r9
   12b08:	add	sp, sp, #12
   12b0c:	ldrd	r4, [sp]
   12b10:	ldrd	r6, [sp, #8]
   12b14:	ldrd	r8, [sp, #16]
   12b18:	ldrd	sl, [sp, #24]
   12b1c:	add	sp, sp, #32
   12b20:	pop	{pc}		; (ldr pc, [sp], #4)
   12b24:	ldrb	r3, [r4]
   12b28:	cmp	r3, #0
   12b2c:	beq	12aac <__assert_fail@plt+0x19e0>
   12b30:	lsl	r2, r3, #1
   12b34:	ldrh	r2, [r1, r2]
   12b38:	cmp	r3, #10
   12b3c:	movne	r3, r2
   12b40:	orreq	r3, r2, #1
   12b44:	tst	r3, #1
   12b48:	bne	12b60 <__assert_fail@plt+0x1a94>
   12b4c:	ldrb	r3, [r4, #1]!
   12b50:	cmp	r3, #0
   12b54:	bne	12b30 <__assert_fail@plt+0x1a64>
   12b58:	b	12aac <__assert_fail@plt+0x19e0>
   12b5c:	mov	r4, r7
   12b60:	ldrb	r3, [r4]
   12b64:	cmp	r3, #0
   12b68:	beq	12aac <__assert_fail@plt+0x19e0>
   12b6c:	mov	r3, #0
   12b70:	strb	r3, [r4]
   12b74:	mov	r2, r5
   12b78:	mov	r3, r8
   12b7c:	mov	r0, r7
   12b80:	bl	114bc <__assert_fail@plt+0x3f0>
   12b84:	cmp	r0, #0
   12b88:	moveq	r9, r0
   12b8c:	ldr	r1, [sl, #36]	; 0x24
   12b90:	cmp	r1, #256	; 0x100
   12b94:	moveq	r1, #32
   12b98:	ldr	r0, [fp]
   12b9c:	ldr	r3, [r0, #20]
   12ba0:	ldr	r2, [r0, #24]
   12ba4:	cmp	r3, r2
   12ba8:	addcc	r2, r3, #1
   12bac:	strcc	r2, [r0, #20]
   12bb0:	strbcc	r1, [r3]
   12bb4:	bcs	12c00 <__assert_fail@plt+0x1b34>
   12bb8:	add	r7, r4, #1
   12bbc:	adds	r5, r5, #1
   12bc0:	adc	r8, r8, #0
   12bc4:	ldr	r3, [sl, #36]	; 0x24
   12bc8:	cmp	r3, #256	; 0x100
   12bcc:	beq	12a6c <__assert_fail@plt+0x19a0>
   12bd0:	ldrb	r2, [r7]
   12bd4:	cmp	r3, r2
   12bd8:	beq	12b5c <__assert_fail@plt+0x1a90>
   12bdc:	cmp	r2, #0
   12be0:	beq	12aac <__assert_fail@plt+0x19e0>
   12be4:	mov	r4, r7
   12be8:	ldrb	r2, [r4, #1]!
   12bec:	cmp	r2, #0
   12bf0:	beq	12aac <__assert_fail@plt+0x19e0>
   12bf4:	cmp	r3, r2
   12bf8:	bne	12be8 <__assert_fail@plt+0x1b1c>
   12bfc:	b	12b6c <__assert_fail@plt+0x1aa0>
   12c00:	uxtb	r1, r1
   12c04:	bl	11030 <__overflow@plt>
   12c08:	b	12bb8 <__assert_fail@plt+0x1aec>
   12c0c:	bl	11030 <__overflow@plt>
   12c10:	b	12b04 <__assert_fail@plt+0x1a38>
   12c14:	push	{lr}		; (str lr, [sp, #-4]!)
   12c18:	sub	sp, sp, #92	; 0x5c
   12c1c:	subs	r5, r0, #0
   12c20:	beq	12c68 <__assert_fail@plt+0x1b9c>
   12c24:	movw	r3, #49552	; 0xc190
   12c28:	movt	r3, #2
   12c2c:	ldr	r4, [r3]
   12c30:	mov	r2, #5
   12c34:	movw	r1, #40680	; 0x9ee8
   12c38:	movt	r1, #1
   12c3c:	mov	r0, #0
   12c40:	bl	10ec8 <dcgettext@plt>
   12c44:	movw	r3, #49676	; 0xc20c
   12c48:	movt	r3, #2
   12c4c:	ldr	r3, [r3]
   12c50:	mov	r2, r0
   12c54:	mov	r1, #1
   12c58:	mov	r0, r4
   12c5c:	bl	1100c <__fprintf_chk@plt>
   12c60:	mov	r0, r5
   12c64:	bl	10fac <exit@plt>
   12c68:	mov	r2, #5
   12c6c:	movw	r1, #40720	; 0x9f10
   12c70:	movt	r1, #1
   12c74:	mov	r0, #0
   12c78:	bl	10ec8 <dcgettext@plt>
   12c7c:	movw	r6, #49676	; 0xc20c
   12c80:	movt	r6, #2
   12c84:	ldr	r2, [r6]
   12c88:	mov	r1, r0
   12c8c:	mov	r0, #1
   12c90:	bl	10ff4 <__printf_chk@plt>
   12c94:	mov	r2, #5
   12c98:	movw	r1, #40756	; 0x9f34
   12c9c:	movt	r1, #1
   12ca0:	mov	r0, #0
   12ca4:	bl	10ec8 <dcgettext@plt>
   12ca8:	movw	r4, #49564	; 0xc19c
   12cac:	movt	r4, #2
   12cb0:	ldr	r1, [r4]
   12cb4:	bl	10e20 <fputs_unlocked@plt>
   12cb8:	mov	r2, #5
   12cbc:	movw	r1, #40836	; 0x9f84
   12cc0:	movt	r1, #1
   12cc4:	mov	r0, #0
   12cc8:	bl	10ec8 <dcgettext@plt>
   12ccc:	ldr	r1, [r4]
   12cd0:	bl	10e20 <fputs_unlocked@plt>
   12cd4:	mov	r2, #5
   12cd8:	movw	r1, #40912	; 0x9fd0
   12cdc:	movt	r1, #1
   12ce0:	mov	r0, #0
   12ce4:	bl	10ec8 <dcgettext@plt>
   12ce8:	ldr	r1, [r4]
   12cec:	bl	10e20 <fputs_unlocked@plt>
   12cf0:	mov	r2, #5
   12cf4:	movw	r1, #40972	; 0xa00c
   12cf8:	movt	r1, #1
   12cfc:	mov	r0, #0
   12d00:	bl	10ec8 <dcgettext@plt>
   12d04:	ldr	r1, [r4]
   12d08:	bl	10e20 <fputs_unlocked@plt>
   12d0c:	mov	r2, #5
   12d10:	movw	r1, #41044	; 0xa054
   12d14:	movt	r1, #1
   12d18:	mov	r0, #0
   12d1c:	bl	10ec8 <dcgettext@plt>
   12d20:	ldr	r1, [r4]
   12d24:	bl	10e20 <fputs_unlocked@plt>
   12d28:	mov	r2, #5
   12d2c:	movw	r1, #41168	; 0xa0d0
   12d30:	movt	r1, #1
   12d34:	mov	r0, #0
   12d38:	bl	10ec8 <dcgettext@plt>
   12d3c:	ldr	r1, [r4]
   12d40:	bl	10e20 <fputs_unlocked@plt>
   12d44:	mov	r2, #5
   12d48:	movw	r1, #41288	; 0xa148
   12d4c:	movt	r1, #1
   12d50:	mov	r0, #0
   12d54:	bl	10ec8 <dcgettext@plt>
   12d58:	ldr	r1, [r4]
   12d5c:	bl	10e20 <fputs_unlocked@plt>
   12d60:	mov	r2, #5
   12d64:	movw	r1, #41408	; 0xa1c0
   12d68:	movt	r1, #1
   12d6c:	mov	r0, #0
   12d70:	bl	10ec8 <dcgettext@plt>
   12d74:	ldr	r1, [r4]
   12d78:	bl	10e20 <fputs_unlocked@plt>
   12d7c:	mov	r2, #5
   12d80:	movw	r1, #41488	; 0xa210
   12d84:	movt	r1, #1
   12d88:	mov	r0, #0
   12d8c:	bl	10ec8 <dcgettext@plt>
   12d90:	ldr	r1, [r4]
   12d94:	bl	10e20 <fputs_unlocked@plt>
   12d98:	mov	r2, #5
   12d9c:	movw	r1, #41644	; 0xa2ac
   12da0:	movt	r1, #1
   12da4:	mov	r0, #0
   12da8:	bl	10ec8 <dcgettext@plt>
   12dac:	ldr	r1, [r4]
   12db0:	bl	10e20 <fputs_unlocked@plt>
   12db4:	mov	r2, #5
   12db8:	movw	r1, #41780	; 0xa334
   12dbc:	movt	r1, #1
   12dc0:	mov	r0, #0
   12dc4:	bl	10ec8 <dcgettext@plt>
   12dc8:	ldr	r1, [r4]
   12dcc:	bl	10e20 <fputs_unlocked@plt>
   12dd0:	mov	r2, #5
   12dd4:	movw	r1, #41912	; 0xa3b8
   12dd8:	movt	r1, #1
   12ddc:	mov	r0, #0
   12de0:	bl	10ec8 <dcgettext@plt>
   12de4:	ldr	r1, [r4]
   12de8:	bl	10e20 <fputs_unlocked@plt>
   12dec:	mov	r2, #5
   12df0:	movw	r1, #42236	; 0xa4fc
   12df4:	movt	r1, #1
   12df8:	mov	r0, #0
   12dfc:	bl	10ec8 <dcgettext@plt>
   12e00:	ldr	r1, [r4]
   12e04:	bl	10e20 <fputs_unlocked@plt>
   12e08:	mov	r2, #5
   12e0c:	movw	r1, #42392	; 0xa598
   12e10:	movt	r1, #1
   12e14:	mov	r0, #0
   12e18:	bl	10ec8 <dcgettext@plt>
   12e1c:	ldr	r1, [r4]
   12e20:	bl	10e20 <fputs_unlocked@plt>
   12e24:	mov	r2, #5
   12e28:	movw	r1, #42516	; 0xa614
   12e2c:	movt	r1, #1
   12e30:	mov	r0, #0
   12e34:	bl	10ec8 <dcgettext@plt>
   12e38:	ldr	r1, [r4]
   12e3c:	bl	10e20 <fputs_unlocked@plt>
   12e40:	mov	r2, #5
   12e44:	movw	r1, #42592	; 0xa660
   12e48:	movt	r1, #1
   12e4c:	mov	r0, #0
   12e50:	bl	10ec8 <dcgettext@plt>
   12e54:	ldr	r1, [r4]
   12e58:	bl	10e20 <fputs_unlocked@plt>
   12e5c:	mov	r2, #5
   12e60:	movw	r1, #42664	; 0xa6a8
   12e64:	movt	r1, #1
   12e68:	mov	r0, #0
   12e6c:	bl	10ec8 <dcgettext@plt>
   12e70:	ldr	r1, [r4]
   12e74:	bl	10e20 <fputs_unlocked@plt>
   12e78:	mov	r2, #5
   12e7c:	movw	r1, #42728	; 0xa6e8
   12e80:	movt	r1, #1
   12e84:	mov	r0, #0
   12e88:	bl	10ec8 <dcgettext@plt>
   12e8c:	ldr	r1, [r4]
   12e90:	bl	10e20 <fputs_unlocked@plt>
   12e94:	mov	r2, #5
   12e98:	movw	r1, #42776	; 0xa718
   12e9c:	movt	r1, #1
   12ea0:	mov	r0, #0
   12ea4:	bl	10ec8 <dcgettext@plt>
   12ea8:	ldr	r1, [r4]
   12eac:	bl	10e20 <fputs_unlocked@plt>
   12eb0:	mov	r2, #5
   12eb4:	movw	r1, #42832	; 0xa750
   12eb8:	movt	r1, #1
   12ebc:	mov	r0, #0
   12ec0:	bl	10ec8 <dcgettext@plt>
   12ec4:	ldr	r1, [r4]
   12ec8:	bl	10e20 <fputs_unlocked@plt>
   12ecc:	mov	r2, #5
   12ed0:	movw	r1, #42848	; 0xa760
   12ed4:	movt	r1, #1
   12ed8:	mov	r0, #0
   12edc:	bl	10ec8 <dcgettext@plt>
   12ee0:	ldr	r1, [r4]
   12ee4:	bl	10e20 <fputs_unlocked@plt>
   12ee8:	mov	r2, #5
   12eec:	movw	r1, #42920	; 0xa7a8
   12ef0:	movt	r1, #1
   12ef4:	mov	r0, #0
   12ef8:	bl	10ec8 <dcgettext@plt>
   12efc:	ldr	r1, [r4]
   12f00:	bl	10e20 <fputs_unlocked@plt>
   12f04:	mov	r2, #5
   12f08:	movw	r1, #43088	; 0xa850
   12f0c:	movt	r1, #1
   12f10:	mov	r0, #0
   12f14:	bl	10ec8 <dcgettext@plt>
   12f18:	ldr	r1, [r4]
   12f1c:	bl	10e20 <fputs_unlocked@plt>
   12f20:	mov	r2, #5
   12f24:	movw	r1, #43216	; 0xa8d0
   12f28:	movt	r1, #1
   12f2c:	mov	r0, #0
   12f30:	bl	10ec8 <dcgettext@plt>
   12f34:	ldr	r1, [r4]
   12f38:	bl	10e20 <fputs_unlocked@plt>
   12f3c:	mov	r2, #5
   12f40:	movw	r1, #43344	; 0xa950
   12f44:	movt	r1, #1
   12f48:	mov	r0, #0
   12f4c:	bl	10ec8 <dcgettext@plt>
   12f50:	ldr	r1, [r4]
   12f54:	bl	10e20 <fputs_unlocked@plt>
   12f58:	mov	r2, #5
   12f5c:	movw	r1, #43472	; 0xa9d0
   12f60:	movt	r1, #1
   12f64:	mov	r0, #0
   12f68:	bl	10ec8 <dcgettext@plt>
   12f6c:	ldr	r1, [r4]
   12f70:	bl	10e20 <fputs_unlocked@plt>
   12f74:	mov	r2, #5
   12f78:	movw	r1, #43748	; 0xaae4
   12f7c:	movt	r1, #1
   12f80:	mov	r0, #0
   12f84:	bl	10ec8 <dcgettext@plt>
   12f88:	ldr	r1, [r4]
   12f8c:	bl	10e20 <fputs_unlocked@plt>
   12f90:	mov	r2, #5
   12f94:	movw	r1, #44120	; 0xac58
   12f98:	movt	r1, #1
   12f9c:	mov	r0, #0
   12fa0:	bl	10ec8 <dcgettext@plt>
   12fa4:	ldr	r2, [r6]
   12fa8:	mov	r1, r0
   12fac:	mov	r0, #1
   12fb0:	bl	10ff4 <__printf_chk@plt>
   12fb4:	mov	r2, #5
   12fb8:	movw	r1, #44532	; 0xadf4
   12fbc:	movt	r1, #1
   12fc0:	mov	r0, #0
   12fc4:	bl	10ec8 <dcgettext@plt>
   12fc8:	ldr	r2, [r6]
   12fcc:	str	r2, [sp, #24]
   12fd0:	str	r2, [sp, #20]
   12fd4:	str	r2, [sp, #16]
   12fd8:	str	r2, [sp, #12]
   12fdc:	str	r2, [sp, #8]
   12fe0:	str	r2, [sp, #4]
   12fe4:	str	r2, [sp]
   12fe8:	mov	r3, r2
   12fec:	mov	r1, r0
   12ff0:	mov	r0, #1
   12ff4:	bl	10ff4 <__printf_chk@plt>
   12ff8:	movw	r0, #38888	; 0x97e8
   12ffc:	movt	r0, #1
   13000:	ldr	r1, [r0]
   13004:	ldr	r3, [r0, #4]
   13008:	str	r1, [sp, #32]
   1300c:	str	r3, [sp, #36]	; 0x24
   13010:	ldrd	r2, [r0, #8]
   13014:	strd	r2, [sp, #40]	; 0x28
   13018:	ldrd	r2, [r0, #16]
   1301c:	strd	r2, [sp, #48]	; 0x30
   13020:	ldrd	r2, [r0, #24]
   13024:	strd	r2, [sp, #56]	; 0x38
   13028:	ldrd	r2, [r0, #32]
   1302c:	strd	r2, [sp, #64]	; 0x40
   13030:	ldrd	r2, [r0, #40]	; 0x28
   13034:	strd	r2, [sp, #72]	; 0x48
   13038:	ldrd	r2, [r0, #48]	; 0x30
   1303c:	strd	r2, [sp, #80]	; 0x50
   13040:	cmp	r1, #0
   13044:	addeq	r4, sp, #32
   13048:	beq	13074 <__assert_fail@plt+0x1fa8>
   1304c:	add	r4, sp, #32
   13050:	movw	r6, #40672	; 0x9ee0
   13054:	movt	r6, #1
   13058:	mov	r0, r6
   1305c:	bl	10e38 <strcmp@plt>
   13060:	cmp	r0, #0
   13064:	beq	13074 <__assert_fail@plt+0x1fa8>
   13068:	ldr	r1, [r4, #8]!
   1306c:	cmp	r1, #0
   13070:	bne	13058 <__assert_fail@plt+0x1f8c>
   13074:	ldr	r4, [r4, #4]
   13078:	cmp	r4, #0
   1307c:	beq	131d8 <__assert_fail@plt+0x210c>
   13080:	mov	r2, #5
   13084:	movw	r1, #44980	; 0xafb4
   13088:	movt	r1, #1
   1308c:	mov	r0, #0
   13090:	bl	10ec8 <dcgettext@plt>
   13094:	movw	r3, #45004	; 0xafcc
   13098:	movt	r3, #1
   1309c:	movw	r2, #45044	; 0xaff4
   130a0:	movt	r2, #1
   130a4:	mov	r1, r0
   130a8:	mov	r0, #1
   130ac:	bl	10ff4 <__printf_chk@plt>
   130b0:	mov	r1, #0
   130b4:	mov	r0, #5
   130b8:	bl	1103c <setlocale@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	130dc <__assert_fail@plt+0x2010>
   130c4:	mov	r2, #3
   130c8:	movw	r1, #45060	; 0xb004
   130cc:	movt	r1, #1
   130d0:	bl	1109c <strncmp@plt>
   130d4:	cmp	r0, #0
   130d8:	bne	13158 <__assert_fail@plt+0x208c>
   130dc:	mov	r2, #5
   130e0:	movw	r1, #45136	; 0xb050
   130e4:	movt	r1, #1
   130e8:	mov	r0, #0
   130ec:	bl	10ec8 <dcgettext@plt>
   130f0:	movw	r6, #40672	; 0x9ee0
   130f4:	movt	r6, #1
   130f8:	mov	r3, r6
   130fc:	movw	r2, #45004	; 0xafcc
   13100:	movt	r2, #1
   13104:	mov	r1, r0
   13108:	mov	r0, #1
   1310c:	bl	10ff4 <__printf_chk@plt>
   13110:	mov	r2, #5
   13114:	movw	r1, #45164	; 0xb06c
   13118:	movt	r1, #1
   1311c:	mov	r0, #0
   13120:	bl	10ec8 <dcgettext@plt>
   13124:	mov	r1, r0
   13128:	movw	r2, #46124	; 0xb42c
   1312c:	movt	r2, #1
   13130:	movw	r3, #43468	; 0xa9cc
   13134:	movt	r3, #1
   13138:	cmp	r4, r6
   1313c:	moveq	r3, r2
   13140:	mov	r2, r4
   13144:	mov	r0, #1
   13148:	bl	10ff4 <__printf_chk@plt>
   1314c:	b	12c60 <__assert_fail@plt+0x1b94>
   13150:	movw	r4, #40672	; 0x9ee0
   13154:	movt	r4, #1
   13158:	mov	r2, #5
   1315c:	movw	r1, #45064	; 0xb008
   13160:	movt	r1, #1
   13164:	mov	r0, #0
   13168:	bl	10ec8 <dcgettext@plt>
   1316c:	movw	r3, #49564	; 0xc19c
   13170:	movt	r3, #2
   13174:	ldr	r1, [r3]
   13178:	bl	10e20 <fputs_unlocked@plt>
   1317c:	b	130dc <__assert_fail@plt+0x2010>
   13180:	mov	r2, #5
   13184:	movw	r1, #45136	; 0xb050
   13188:	movt	r1, #1
   1318c:	mov	r0, #0
   13190:	bl	10ec8 <dcgettext@plt>
   13194:	movw	r4, #40672	; 0x9ee0
   13198:	movt	r4, #1
   1319c:	mov	r3, r4
   131a0:	movw	r2, #45004	; 0xafcc
   131a4:	movt	r2, #1
   131a8:	mov	r1, r0
   131ac:	mov	r0, #1
   131b0:	bl	10ff4 <__printf_chk@plt>
   131b4:	mov	r2, #5
   131b8:	movw	r1, #45164	; 0xb06c
   131bc:	movt	r1, #1
   131c0:	mov	r0, #0
   131c4:	bl	10ec8 <dcgettext@plt>
   131c8:	mov	r1, r0
   131cc:	movw	r3, #46124	; 0xb42c
   131d0:	movt	r3, #1
   131d4:	b	13140 <__assert_fail@plt+0x2074>
   131d8:	mov	r2, #5
   131dc:	movw	r1, #44980	; 0xafb4
   131e0:	movt	r1, #1
   131e4:	mov	r0, #0
   131e8:	bl	10ec8 <dcgettext@plt>
   131ec:	movw	r3, #45004	; 0xafcc
   131f0:	movt	r3, #1
   131f4:	movw	r2, #45044	; 0xaff4
   131f8:	movt	r2, #1
   131fc:	mov	r1, r0
   13200:	mov	r0, #1
   13204:	bl	10ff4 <__printf_chk@plt>
   13208:	mov	r1, #0
   1320c:	mov	r0, #5
   13210:	bl	1103c <setlocale@plt>
   13214:	cmp	r0, #0
   13218:	beq	13180 <__assert_fail@plt+0x20b4>
   1321c:	mov	r2, #3
   13220:	movw	r1, #45060	; 0xb004
   13224:	movt	r1, #1
   13228:	bl	1109c <strncmp@plt>
   1322c:	cmp	r0, #0
   13230:	bne	13150 <__assert_fail@plt+0x2084>
   13234:	mov	r2, #5
   13238:	movw	r1, #45136	; 0xb050
   1323c:	movt	r1, #1
   13240:	mov	r0, #0
   13244:	bl	10ec8 <dcgettext@plt>
   13248:	movw	r4, #40672	; 0x9ee0
   1324c:	movt	r4, #1
   13250:	mov	r3, r4
   13254:	movw	r2, #45004	; 0xafcc
   13258:	movt	r2, #1
   1325c:	mov	r1, r0
   13260:	mov	r0, #1
   13264:	bl	10ff4 <__printf_chk@plt>
   13268:	mov	r2, #5
   1326c:	movw	r1, #45164	; 0xb06c
   13270:	movt	r1, #1
   13274:	mov	r0, #0
   13278:	bl	10ec8 <dcgettext@plt>
   1327c:	mov	r1, r0
   13280:	movw	r3, #46124	; 0xb42c
   13284:	movt	r3, #1
   13288:	b	13140 <__assert_fail@plt+0x2074>
   1328c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13290:	strd	r6, [sp, #8]
   13294:	strd	r8, [sp, #16]
   13298:	strd	sl, [sp, #24]
   1329c:	str	lr, [sp, #32]
   132a0:	sub	sp, sp, #44	; 0x2c
   132a4:	mov	r7, r0
   132a8:	mov	r6, r1
   132ac:	ldr	r0, [r1]
   132b0:	bl	15400 <__assert_fail@plt+0x4334>
   132b4:	movw	r1, #43468	; 0xa9cc
   132b8:	movt	r1, #1
   132bc:	mov	r0, #6
   132c0:	bl	1103c <setlocale@plt>
   132c4:	mov	sl, r0
   132c8:	movw	r4, #45048	; 0xaff8
   132cc:	movt	r4, #1
   132d0:	movw	r1, #45240	; 0xb0b8
   132d4:	movt	r1, #1
   132d8:	mov	r0, r4
   132dc:	bl	11084 <bindtextdomain@plt>
   132e0:	mov	r0, r4
   132e4:	bl	10ee0 <textdomain@plt>
   132e8:	mov	r0, #65536	; 0x10000
   132ec:	bl	11060 <nl_langinfo@plt>
   132f0:	movw	r3, #49576	; 0xc1a8
   132f4:	movt	r3, #2
   132f8:	str	r0, [r3, #4]
   132fc:	cmp	r0, #0
   13300:	beq	13310 <__assert_fail@plt+0x2244>
   13304:	ldrb	r3, [r0]
   13308:	cmp	r3, #0
   1330c:	bne	13324 <__assert_fail@plt+0x2258>
   13310:	movw	r3, #49576	; 0xc1a8
   13314:	movt	r3, #2
   13318:	movw	r2, #45264	; 0xb0d0
   1331c:	movt	r2, #1
   13320:	str	r2, [r3, #4]
   13324:	movw	r4, #49576	; 0xc1a8
   13328:	movt	r4, #2
   1332c:	ldr	r0, [r4, #4]
   13330:	bl	10fb8 <strlen@plt>
   13334:	str	r0, [r4]
   13338:	movw	r0, #20048	; 0x4e50
   1333c:	movt	r0, #1
   13340:	bl	197c4 <__assert_fail@plt+0x86f8>
   13344:	movw	r5, #38888	; 0x97e8
   13348:	movt	r5, #1
   1334c:	add	r8, r5, #56	; 0x38
   13350:	movw	r4, #49576	; 0xc1a8
   13354:	movt	r4, #2
   13358:	add	r9, r4, #64	; 0x40
   1335c:	mov	r3, #0
   13360:	str	r3, [sp]
   13364:	mov	r3, r8
   13368:	movw	r2, #45268	; 0xb0d4
   1336c:	movt	r2, #1
   13370:	mov	r1, r6
   13374:	mov	r0, r7
   13378:	bl	10f94 <getopt_long@plt>
   1337c:	cmn	r0, #1
   13380:	beq	13854 <__assert_fail@plt+0x2788>
   13384:	cmp	r0, #260	; 0x104
   13388:	beq	135a0 <__assert_fail@plt+0x24d4>
   1338c:	ble	133f0 <__assert_fail@plt+0x2324>
   13390:	movw	r3, #265	; 0x109
   13394:	cmp	r0, r3
   13398:	beq	13744 <__assert_fail@plt+0x2678>
   1339c:	bgt	134bc <__assert_fail@plt+0x23f0>
   133a0:	movw	r3, #262	; 0x106
   133a4:	cmp	r0, r3
   133a8:	beq	135f8 <__assert_fail@plt+0x252c>
   133ac:	blt	13730 <__assert_fail@plt+0x2664>
   133b0:	movw	r3, #263	; 0x107
   133b4:	cmp	r0, r3
   133b8:	beq	13604 <__assert_fail@plt+0x2538>
   133bc:	cmp	r0, #264	; 0x108
   133c0:	bne	1345c <__assert_fail@plt+0x2390>
   133c4:	movw	r3, #49652	; 0xc1f4
   133c8:	movt	r3, #2
   133cc:	ldr	r3, [r3]
   133d0:	cmp	r3, #0
   133d4:	bne	136a0 <__assert_fail@plt+0x25d4>
   133d8:	movw	r3, #49568	; 0xc1a0
   133dc:	movt	r3, #2
   133e0:	mov	r1, #1
   133e4:	ldr	r0, [r3]
   133e8:	bl	142d4 <__assert_fail@plt+0x3208>
   133ec:	b	1335c <__assert_fail@plt+0x2290>
   133f0:	cmp	r0, #122	; 0x7a
   133f4:	beq	1371c <__assert_fail@plt+0x2650>
   133f8:	ble	13444 <__assert_fail@plt+0x2378>
   133fc:	movw	r3, #257	; 0x101
   13400:	cmp	r0, r3
   13404:	beq	13530 <__assert_fail@plt+0x2464>
   13408:	ble	13464 <__assert_fail@plt+0x2398>
   1340c:	movw	r3, #258	; 0x102
   13410:	cmp	r0, r3
   13414:	beq	13550 <__assert_fail@plt+0x2484>
   13418:	movw	r3, #259	; 0x103
   1341c:	cmp	r0, r3
   13420:	bne	1345c <__assert_fail@plt+0x2390>
   13424:	movw	r3, #49568	; 0xc1a0
   13428:	movt	r3, #2
   1342c:	ldr	r0, [r3]
   13430:	bl	112e8 <__assert_fail@plt+0x21c>
   13434:	movw	r3, #49416	; 0xc108
   13438:	movt	r3, #2
   1343c:	strd	r0, [r3, #16]
   13440:	b	1335c <__assert_fail@plt+0x2290>
   13444:	cmn	r0, #2
   13448:	beq	13804 <__assert_fail@plt+0x2738>
   1344c:	cmp	r0, #100	; 0x64
   13450:	beq	136c4 <__assert_fail@plt+0x25f8>
   13454:	cmn	r0, #3
   13458:	beq	1380c <__assert_fail@plt+0x2740>
   1345c:	mov	r0, #1
   13460:	bl	12c14 <__assert_fail@plt+0x1b48>
   13464:	cmp	r0, #256	; 0x100
   13468:	bne	1345c <__assert_fail@plt+0x2390>
   1346c:	movw	r1, #49568	; 0xc1a0
   13470:	movt	r1, #2
   13474:	mov	r3, #1
   13478:	str	r3, [sp, #8]
   1347c:	movw	r3, #49464	; 0xc138
   13480:	movt	r3, #2
   13484:	ldr	r3, [r3]
   13488:	str	r3, [sp, #4]
   1348c:	mov	r3, #4
   13490:	str	r3, [sp]
   13494:	add	r3, r5, #360	; 0x168
   13498:	add	r2, r5, #380	; 0x17c
   1349c:	ldr	r1, [r1]
   134a0:	movw	r0, #45272	; 0xb0d8
   134a4:	movt	r0, #1
   134a8:	bl	14d28 <__assert_fail@plt+0x3c5c>
   134ac:	add	r0, r5, r0, lsl #2
   134b0:	ldr	r3, [r0, #360]	; 0x168
   134b4:	str	r3, [r4, #32]
   134b8:	b	1335c <__assert_fail@plt+0x2290>
   134bc:	movw	r3, #267	; 0x10b
   134c0:	cmp	r0, r3
   134c4:	beq	13760 <__assert_fail@plt+0x2694>
   134c8:	blt	13750 <__assert_fail@plt+0x2684>
   134cc:	cmp	r0, #268	; 0x10c
   134d0:	beq	137f0 <__assert_fail@plt+0x2724>
   134d4:	movw	r3, #269	; 0x10d
   134d8:	cmp	r0, r3
   134dc:	bne	1345c <__assert_fail@plt+0x2390>
   134e0:	movw	r1, #49568	; 0xc1a0
   134e4:	movt	r1, #2
   134e8:	mov	r3, #1
   134ec:	str	r3, [sp, #8]
   134f0:	movw	r3, #49464	; 0xc138
   134f4:	movt	r3, #2
   134f8:	ldr	r3, [r3]
   134fc:	str	r3, [sp, #4]
   13500:	mov	r3, #4
   13504:	str	r3, [sp]
   13508:	add	r3, r5, #484	; 0x1e4
   1350c:	add	r2, r5, #500	; 0x1f4
   13510:	ldr	r1, [r1]
   13514:	movw	r0, #45424	; 0xb170
   13518:	movt	r0, #1
   1351c:	bl	14d28 <__assert_fail@plt+0x3c5c>
   13520:	add	r0, r5, r0, lsl #2
   13524:	ldr	r3, [r0, #484]	; 0x1e4
   13528:	str	r3, [r4, #36]	; 0x24
   1352c:	b	1335c <__assert_fail@plt+0x2290>
   13530:	movw	r3, #49568	; 0xc1a0
   13534:	movt	r3, #2
   13538:	ldr	r0, [r3]
   1353c:	bl	112e8 <__assert_fail@plt+0x21c>
   13540:	movw	r3, #49416	; 0xc108
   13544:	movt	r3, #2
   13548:	strd	r0, [r3, #8]
   1354c:	b	1335c <__assert_fail@plt+0x2290>
   13550:	movw	r1, #49568	; 0xc1a0
   13554:	movt	r1, #2
   13558:	mov	r3, #1
   1355c:	str	r3, [sp, #8]
   13560:	movw	r3, #49464	; 0xc138
   13564:	movt	r3, #2
   13568:	ldr	r3, [r3]
   1356c:	str	r3, [sp, #4]
   13570:	mov	r3, #4
   13574:	str	r3, [sp]
   13578:	add	r3, r5, #404	; 0x194
   1357c:	add	r2, r5, #420	; 0x1a4
   13580:	ldr	r1, [r1]
   13584:	movw	r0, #45280	; 0xb0e0
   13588:	movt	r0, #1
   1358c:	bl	14d28 <__assert_fail@plt+0x3c5c>
   13590:	add	r0, r5, r0, lsl #2
   13594:	ldr	r3, [r0, #404]	; 0x194
   13598:	str	r3, [r4, #44]	; 0x2c
   1359c:	b	1335c <__assert_fail@plt+0x2290>
   135a0:	movw	r1, #49568	; 0xc1a0
   135a4:	movt	r1, #2
   135a8:	mov	r3, #1
   135ac:	str	r3, [sp, #8]
   135b0:	movw	r3, #49464	; 0xc138
   135b4:	movt	r3, #2
   135b8:	ldr	r3, [r3]
   135bc:	str	r3, [sp, #4]
   135c0:	mov	r3, #4
   135c4:	str	r3, [sp]
   135c8:	add	r3, r5, #440	; 0x1b8
   135cc:	add	r2, r5, #460	; 0x1cc
   135d0:	ldr	r1, [r1]
   135d4:	movw	r0, #45288	; 0xb0e8
   135d8:	movt	r0, #1
   135dc:	bl	14d28 <__assert_fail@plt+0x3c5c>
   135e0:	movw	r3, #49416	; 0xc108
   135e4:	movt	r3, #2
   135e8:	add	r0, r5, r0, lsl #2
   135ec:	ldr	r2, [r0, #440]	; 0x1b8
   135f0:	str	r2, [r3, #28]
   135f4:	b	1335c <__assert_fail@plt+0x2290>
   135f8:	mov	r3, #1
   135fc:	str	r3, [r4, #48]	; 0x30
   13600:	b	1335c <__assert_fail@plt+0x2290>
   13604:	movw	r0, #49568	; 0xc1a0
   13608:	movt	r0, #2
   1360c:	movw	r3, #43468	; 0xa9cc
   13610:	movt	r3, #1
   13614:	str	r3, [sp]
   13618:	add	r3, r4, #28
   1361c:	mov	r2, #10
   13620:	mov	r1, #0
   13624:	ldr	r0, [r0]
   13628:	bl	18230 <__assert_fail@plt+0x7164>
   1362c:	cmp	r0, #0
   13630:	bne	13664 <__assert_fail@plt+0x2598>
   13634:	ldr	r3, [r4, #28]
   13638:	bics	r2, r3, #-2147483648	; 0x80000000
   1363c:	beq	13664 <__assert_fail@plt+0x2598>
   13640:	cmp	r3, #0
   13644:	bge	1335c <__assert_fail@plt+0x2290>
   13648:	movw	r2, #49416	; 0xc108
   1364c:	movt	r2, #2
   13650:	mov	r1, #0
   13654:	str	r1, [r2, #32]
   13658:	rsb	r3, r3, #0
   1365c:	str	r3, [r4, #28]
   13660:	b	1335c <__assert_fail@plt+0x2290>
   13664:	mov	r2, #5
   13668:	movw	r1, #45296	; 0xb0f0
   1366c:	movt	r1, #1
   13670:	mov	r0, #0
   13674:	bl	10ec8 <dcgettext@plt>
   13678:	mov	r4, r0
   1367c:	movw	r3, #49568	; 0xc1a0
   13680:	movt	r3, #2
   13684:	ldr	r0, [r3]
   13688:	bl	176fc <__assert_fail@plt+0x6630>
   1368c:	mov	r3, r0
   13690:	mov	r2, r4
   13694:	mov	r1, #0
   13698:	mov	r0, #1
   1369c:	bl	10f4c <error@plt>
   136a0:	mov	r2, #5
   136a4:	movw	r1, #45324	; 0xb10c
   136a8:	movt	r1, #1
   136ac:	mov	r0, #0
   136b0:	bl	10ec8 <dcgettext@plt>
   136b4:	mov	r2, r0
   136b8:	mov	r1, #0
   136bc:	mov	r0, #1
   136c0:	bl	10f4c <error@plt>
   136c4:	movw	r3, #49568	; 0xc1a0
   136c8:	movt	r3, #2
   136cc:	ldr	r3, [r3]
   136d0:	ldrb	r2, [r3]
   136d4:	cmp	r2, #0
   136d8:	beq	136e8 <__assert_fail@plt+0x261c>
   136dc:	ldrb	r3, [r3, #1]
   136e0:	cmp	r3, #0
   136e4:	bne	136f8 <__assert_fail@plt+0x262c>
   136e8:	movw	r3, #49416	; 0xc108
   136ec:	movt	r3, #2
   136f0:	str	r2, [r3, #36]	; 0x24
   136f4:	b	1335c <__assert_fail@plt+0x2290>
   136f8:	mov	r2, #5
   136fc:	movw	r1, #45356	; 0xb12c
   13700:	movt	r1, #1
   13704:	mov	r0, #0
   13708:	bl	10ec8 <dcgettext@plt>
   1370c:	mov	r2, r0
   13710:	mov	r1, #0
   13714:	mov	r0, #1
   13718:	bl	10f4c <error@plt>
   1371c:	movw	r3, #49416	; 0xc108
   13720:	movt	r3, #2
   13724:	mov	r2, #0
   13728:	strb	r2, [r3, #40]	; 0x28
   1372c:	b	1335c <__assert_fail@plt+0x2290>
   13730:	movw	r3, #49568	; 0xc1a0
   13734:	movt	r3, #2
   13738:	ldr	r3, [r3]
   1373c:	str	r3, [r4, #16]
   13740:	b	1335c <__assert_fail@plt+0x2290>
   13744:	mov	r3, #1
   13748:	strb	r3, [r4, #40]	; 0x28
   1374c:	b	1335c <__assert_fail@plt+0x2290>
   13750:	mov	r3, #1
   13754:	strb	r3, [r4, #20]
   13758:	strb	r3, [r4, #40]	; 0x28
   1375c:	b	1335c <__assert_fail@plt+0x2290>
   13760:	movw	r3, #49568	; 0xc1a0
   13764:	movt	r3, #2
   13768:	ldr	r0, [r3]
   1376c:	cmp	r0, #0
   13770:	beq	137e0 <__assert_fail@plt+0x2714>
   13774:	movw	r3, #43468	; 0xa9cc
   13778:	movt	r3, #1
   1377c:	str	r3, [sp]
   13780:	mov	r3, r9
   13784:	mov	r2, #10
   13788:	mov	r1, #0
   1378c:	bl	18854 <__assert_fail@plt+0x7788>
   13790:	cmp	r0, #0
   13794:	bne	137a4 <__assert_fail@plt+0x26d8>
   13798:	ldrd	r2, [r4, #64]	; 0x40
   1379c:	orrs	r3, r2, r3
   137a0:	bne	1335c <__assert_fail@plt+0x2290>
   137a4:	mov	r2, #5
   137a8:	movw	r1, #45400	; 0xb158
   137ac:	movt	r1, #1
   137b0:	mov	r0, #0
   137b4:	bl	10ec8 <dcgettext@plt>
   137b8:	mov	r4, r0
   137bc:	movw	r3, #49568	; 0xc1a0
   137c0:	movt	r3, #2
   137c4:	ldr	r0, [r3]
   137c8:	bl	176fc <__assert_fail@plt+0x6630>
   137cc:	mov	r3, r0
   137d0:	mov	r2, r4
   137d4:	mov	r1, #0
   137d8:	mov	r0, #1
   137dc:	bl	10f4c <error@plt>
   137e0:	mov	r2, #1
   137e4:	mov	r3, #0
   137e8:	strd	r2, [r4, #64]	; 0x40
   137ec:	b	1335c <__assert_fail@plt+0x2290>
   137f0:	movw	r3, #49568	; 0xc1a0
   137f4:	movt	r3, #2
   137f8:	ldr	r3, [r3]
   137fc:	str	r3, [r4, #72]	; 0x48
   13800:	b	1335c <__assert_fail@plt+0x2290>
   13804:	mov	r0, #0
   13808:	bl	12c14 <__assert_fail@plt+0x1b48>
   1380c:	movw	r3, #49460	; 0xc134
   13810:	movt	r3, #2
   13814:	movw	r0, #49564	; 0xc19c
   13818:	movt	r0, #2
   1381c:	mov	r4, #0
   13820:	str	r4, [sp, #4]
   13824:	movw	r2, #45436	; 0xb17c
   13828:	movt	r2, #1
   1382c:	str	r2, [sp]
   13830:	ldr	r3, [r3]
   13834:	movw	r2, #45044	; 0xaff4
   13838:	movt	r2, #1
   1383c:	movw	r1, #40672	; 0x9ee0
   13840:	movt	r1, #1
   13844:	ldr	r0, [r0]
   13848:	bl	17bf8 <__assert_fail@plt+0x6b2c>
   1384c:	mov	r0, r4
   13850:	bl	10fac <exit@plt>
   13854:	movw	r3, #49576	; 0xc1a8
   13858:	movt	r3, #2
   1385c:	ldr	r3, [r3, #72]	; 0x48
   13860:	cmp	r3, #0
   13864:	beq	1387c <__assert_fail@plt+0x27b0>
   13868:	movw	r3, #49576	; 0xc1a8
   1386c:	movt	r3, #2
   13870:	ldr	r3, [r3, #48]	; 0x30
   13874:	cmp	r3, #0
   13878:	bne	13954 <__assert_fail@plt+0x2888>
   1387c:	movw	r3, #49576	; 0xc1a8
   13880:	movt	r3, #2
   13884:	ldrb	r3, [r3, #40]	; 0x28
   13888:	cmp	sl, #0
   1388c:	movne	sl, #0
   13890:	andeq	sl, r3, #1
   13894:	cmp	sl, #0
   13898:	bne	13978 <__assert_fail@plt+0x28ac>
   1389c:	movw	r3, #49576	; 0xc1a8
   138a0:	movt	r3, #2
   138a4:	ldrb	r3, [r3, #40]	; 0x28
   138a8:	cmp	r3, #0
   138ac:	beq	13928 <__assert_fail@plt+0x285c>
   138b0:	movw	r3, #49576	; 0xc1a8
   138b4:	movt	r3, #2
   138b8:	ldr	r2, [r3, #32]
   138bc:	ldr	r3, [r3, #44]	; 0x2c
   138c0:	orrs	r3, r2, r3
   138c4:	bne	13928 <__assert_fail@plt+0x285c>
   138c8:	movw	r3, #49576	; 0xc1a8
   138cc:	movt	r3, #2
   138d0:	ldr	r3, [r3, #48]	; 0x30
   138d4:	cmp	r3, #0
   138d8:	bne	141dc <__assert_fail@plt+0x3110>
   138dc:	movw	r3, #49576	; 0xc1a8
   138e0:	movt	r3, #2
   138e4:	ldr	r3, [r3, #28]
   138e8:	cmp	r3, #0
   138ec:	bne	141f4 <__assert_fail@plt+0x3128>
   138f0:	movw	r3, #49576	; 0xc1a8
   138f4:	movt	r3, #2
   138f8:	ldr	r4, [r3, #72]	; 0x48
   138fc:	cmp	r4, #0
   13900:	bne	1393c <__assert_fail@plt+0x2870>
   13904:	mov	r2, #5
   13908:	movw	r1, #45520	; 0xb1d0
   1390c:	movt	r1, #1
   13910:	mov	r0, #0
   13914:	bl	10ec8 <dcgettext@plt>
   13918:	mov	r2, r0
   1391c:	mov	r1, #0
   13920:	mov	r0, r1
   13924:	bl	10f4c <error@plt>
   13928:	movw	r3, #49576	; 0xc1a8
   1392c:	movt	r3, #2
   13930:	ldr	r4, [r3, #72]	; 0x48
   13934:	cmp	r4, #0
   13938:	beq	140e4 <__assert_fail@plt+0x3018>
   1393c:	mov	r3, #0
   13940:	str	r3, [sp, #36]	; 0x24
   13944:	mov	r8, r3
   13948:	mov	r1, #1
   1394c:	mov	r0, #2
   13950:	b	139f0 <__assert_fail@plt+0x2924>
   13954:	mov	r2, #5
   13958:	movw	r1, #45452	; 0xb18c
   1395c:	movt	r1, #1
   13960:	mov	r0, #0
   13964:	bl	10ec8 <dcgettext@plt>
   13968:	mov	r2, r0
   1396c:	mov	r1, #0
   13970:	mov	r0, #1
   13974:	bl	10f4c <error@plt>
   13978:	mov	r2, #5
   1397c:	movw	r1, #45496	; 0xb1b8
   13980:	movt	r1, #1
   13984:	mov	r0, #0
   13988:	bl	10ec8 <dcgettext@plt>
   1398c:	mov	r2, r0
   13990:	mov	r1, #0
   13994:	mov	r0, r1
   13998:	bl	10f4c <error@plt>
   1399c:	b	1389c <__assert_fail@plt+0x27d0>
   139a0:	mov	r2, #5
   139a4:	movw	r1, #45552	; 0xb1f0
   139a8:	movt	r1, #1
   139ac:	mov	r0, #0
   139b0:	bl	10ec8 <dcgettext@plt>
   139b4:	mov	r5, r0
   139b8:	mov	r0, r4
   139bc:	bl	176fc <__assert_fail@plt+0x6630>
   139c0:	mov	r3, r0
   139c4:	mov	r2, r5
   139c8:	mov	r1, #0
   139cc:	mov	r0, #1
   139d0:	bl	10f4c <error@plt>
   139d4:	add	r5, r3, #1
   139d8:	ldrb	r2, [r4, r5]
   139dc:	cmp	r2, #37	; 0x25
   139e0:	bne	13a0c <__assert_fail@plt+0x2940>
   139e4:	mov	r2, r0
   139e8:	add	r3, r3, r2
   139ec:	add	r8, r8, #1
   139f0:	ldrb	r2, [r4, r3]
   139f4:	cmp	r2, #37	; 0x25
   139f8:	beq	139d4 <__assert_fail@plt+0x2908>
   139fc:	cmp	r2, #0
   13a00:	beq	139a0 <__assert_fail@plt+0x28d4>
   13a04:	mov	r2, r1
   13a08:	b	139e8 <__assert_fail@plt+0x291c>
   13a0c:	mov	r3, #0
   13a10:	str	r3, [sp, #28]
   13a14:	movw	r3, #45584	; 0xb210
   13a18:	movt	r3, #1
   13a1c:	str	r3, [sp, #24]
   13a20:	mov	sl, #1
   13a24:	movw	fp, #49576	; 0xc1a8
   13a28:	movt	fp, #2
   13a2c:	ldr	r1, [sp, #24]
   13a30:	add	r0, r4, r5
   13a34:	bl	110c0 <strspn@plt>
   13a38:	add	r5, r5, r0
   13a3c:	add	r9, r4, r5
   13a40:	ldrb	r3, [r4, r5]
   13a44:	cmp	r3, #39	; 0x27
   13a48:	streq	sl, [fp, #48]	; 0x30
   13a4c:	addeq	r5, r5, #1
   13a50:	beq	13a2c <__assert_fail@plt+0x2960>
   13a54:	cmp	r3, #48	; 0x30
   13a58:	addeq	r5, r5, #1
   13a5c:	streq	sl, [sp, #28]
   13a60:	beq	13a2c <__assert_fail@plt+0x2960>
   13a64:	cmp	r0, #0
   13a68:	bne	13a2c <__assert_fail@plt+0x2960>
   13a6c:	bl	10fd0 <__errno_location@plt>
   13a70:	mov	r5, r0
   13a74:	mov	r3, #0
   13a78:	str	r3, [r0]
   13a7c:	mov	r2, #10
   13a80:	add	r1, sp, #36	; 0x24
   13a84:	mov	r0, r9
   13a88:	bl	10e44 <strtol@plt>
   13a8c:	mov	sl, r0
   13a90:	ldr	r3, [r5]
   13a94:	cmp	r0, #-2147483648	; 0x80000000
   13a98:	cmpne	r3, #34	; 0x22
   13a9c:	beq	13af8 <__assert_fail@plt+0x2a2c>
   13aa0:	ldr	r3, [sp, #36]	; 0x24
   13aa4:	cmp	r3, r9
   13aa8:	cmpne	r0, #0
   13aac:	bne	13b2c <__assert_fail@plt+0x2a60>
   13ab0:	ldr	r2, [sp, #36]	; 0x24
   13ab4:	sub	r3, r2, r4
   13ab8:	ldrb	r2, [r2]
   13abc:	cmp	r2, #0
   13ac0:	beq	13be8 <__assert_fail@plt+0x2b1c>
   13ac4:	cmp	r2, #46	; 0x2e
   13ac8:	beq	13c1c <__assert_fail@plt+0x2b50>
   13acc:	ldrb	r2, [r4, r3]
   13ad0:	cmp	r2, #102	; 0x66
   13ad4:	bne	13cbc <__assert_fail@plt+0x2bf0>
   13ad8:	add	r3, r3, #1
   13adc:	add	r5, r4, r3
   13ae0:	ldrb	r2, [r4, r3]
   13ae4:	cmp	r2, #0
   13ae8:	beq	141d0 <__assert_fail@plt+0x3104>
   13aec:	mov	r1, #1
   13af0:	mov	r0, #2
   13af4:	b	13d34 <__assert_fail@plt+0x2c68>
   13af8:	mov	r2, #5
   13afc:	movw	r1, #45588	; 0xb214
   13b00:	movt	r1, #1
   13b04:	mov	r0, #0
   13b08:	bl	10ec8 <dcgettext@plt>
   13b0c:	mov	r5, r0
   13b10:	mov	r0, r4
   13b14:	bl	176fc <__assert_fail@plt+0x6630>
   13b18:	mov	r3, r0
   13b1c:	mov	r2, r5
   13b20:	mov	r1, #0
   13b24:	mov	r0, #1
   13b28:	bl	10f4c <error@plt>
   13b2c:	movw	r3, #49576	; 0xc1a8
   13b30:	movt	r3, #2
   13b34:	ldrb	r3, [r3, #40]	; 0x28
   13b38:	cmp	r3, #0
   13b3c:	beq	13ba0 <__assert_fail@plt+0x2ad4>
   13b40:	movw	r3, #49576	; 0xc1a8
   13b44:	movt	r3, #2
   13b48:	ldr	r3, [r3, #28]
   13b4c:	cmp	r3, #0
   13b50:	beq	13ba0 <__assert_fail@plt+0x2ad4>
   13b54:	ldr	r3, [sp, #28]
   13b58:	eor	r3, r3, #1
   13b5c:	cmp	r0, #0
   13b60:	orrle	r3, r3, #1
   13b64:	cmp	r3, #0
   13b68:	bne	13b7c <__assert_fail@plt+0x2ab0>
   13b6c:	movw	r3, #49576	; 0xc1a8
   13b70:	movt	r3, #2
   13b74:	str	sl, [r3, #52]	; 0x34
   13b78:	b	13ab0 <__assert_fail@plt+0x29e4>
   13b7c:	mov	r2, #5
   13b80:	movw	r1, #45624	; 0xb238
   13b84:	movt	r1, #1
   13b88:	mov	r0, #0
   13b8c:	bl	10ec8 <dcgettext@plt>
   13b90:	mov	r2, r0
   13b94:	mov	r1, #0
   13b98:	mov	r0, r1
   13b9c:	bl	10f4c <error@plt>
   13ba0:	cmp	sl, #0
   13ba4:	blt	13bc4 <__assert_fail@plt+0x2af8>
   13ba8:	ldr	r3, [sp, #28]
   13bac:	cmp	r3, #0
   13bb0:	bne	13b6c <__assert_fail@plt+0x2aa0>
   13bb4:	movw	r3, #49576	; 0xc1a8
   13bb8:	movt	r3, #2
   13bbc:	str	sl, [r3, #28]
   13bc0:	b	13ab0 <__assert_fail@plt+0x29e4>
   13bc4:	movw	r3, #49416	; 0xc108
   13bc8:	movt	r3, #2
   13bcc:	mov	r2, #0
   13bd0:	str	r2, [r3, #32]
   13bd4:	movw	r3, #49576	; 0xc1a8
   13bd8:	movt	r3, #2
   13bdc:	rsb	sl, sl, #0
   13be0:	str	sl, [r3, #28]
   13be4:	b	13ab0 <__assert_fail@plt+0x29e4>
   13be8:	mov	r2, #5
   13bec:	movw	r1, #45664	; 0xb260
   13bf0:	movt	r1, #1
   13bf4:	mov	r0, #0
   13bf8:	bl	10ec8 <dcgettext@plt>
   13bfc:	mov	r5, r0
   13c00:	mov	r0, r4
   13c04:	bl	176fc <__assert_fail@plt+0x6630>
   13c08:	mov	r3, r0
   13c0c:	mov	r2, r5
   13c10:	mov	r1, #0
   13c14:	mov	r0, #1
   13c18:	bl	10f4c <error@plt>
   13c1c:	mov	r2, #0
   13c20:	str	r2, [r5]
   13c24:	add	r9, r3, #1
   13c28:	mov	r2, #10
   13c2c:	add	r1, sp, #36	; 0x24
   13c30:	add	r0, r4, r9
   13c34:	bl	10e44 <strtol@plt>
   13c38:	movw	r3, #49416	; 0xc108
   13c3c:	movt	r3, #2
   13c40:	str	r0, [r3, #24]
   13c44:	ldr	r3, [r5]
   13c48:	cmp	r3, #34	; 0x22
   13c4c:	movne	r3, #0
   13c50:	moveq	r3, #1
   13c54:	orrs	r3, r3, r0, lsr #31
   13c58:	bne	13c88 <__assert_fail@plt+0x2bbc>
   13c5c:	bl	10fa0 <__ctype_b_loc@plt>
   13c60:	ldrb	r2, [r4, r9]
   13c64:	ldr	r1, [r0]
   13c68:	lsl	r3, r2, #1
   13c6c:	ldrh	r3, [r1, r3]
   13c70:	cmp	r2, #43	; 0x2b
   13c74:	orreq	r3, r3, #1
   13c78:	tst	r3, #1
   13c7c:	ldreq	r3, [sp, #36]	; 0x24
   13c80:	subeq	r3, r3, r4
   13c84:	beq	13acc <__assert_fail@plt+0x2a00>
   13c88:	mov	r2, #5
   13c8c:	movw	r1, #45688	; 0xb278
   13c90:	movt	r1, #1
   13c94:	mov	r0, #0
   13c98:	bl	10ec8 <dcgettext@plt>
   13c9c:	mov	r5, r0
   13ca0:	mov	r0, r4
   13ca4:	bl	176fc <__assert_fail@plt+0x6630>
   13ca8:	mov	r3, r0
   13cac:	mov	r2, r5
   13cb0:	mov	r1, #0
   13cb4:	mov	r0, #1
   13cb8:	bl	10f4c <error@plt>
   13cbc:	mov	r2, #5
   13cc0:	movw	r1, #45720	; 0xb298
   13cc4:	movt	r1, #1
   13cc8:	mov	r0, #0
   13ccc:	bl	10ec8 <dcgettext@plt>
   13cd0:	mov	r5, r0
   13cd4:	mov	r0, r4
   13cd8:	bl	176fc <__assert_fail@plt+0x6630>
   13cdc:	mov	r3, r0
   13ce0:	mov	r2, r5
   13ce4:	mov	r1, #0
   13ce8:	mov	r0, #1
   13cec:	bl	10f4c <error@plt>
   13cf0:	mov	r2, #5
   13cf4:	movw	r1, #45780	; 0xb2d4
   13cf8:	movt	r1, #1
   13cfc:	mov	r0, #0
   13d00:	bl	10ec8 <dcgettext@plt>
   13d04:	mov	r5, r0
   13d08:	mov	r0, r4
   13d0c:	bl	176fc <__assert_fail@plt+0x6630>
   13d10:	mov	r3, r0
   13d14:	mov	r2, r5
   13d18:	mov	r1, #0
   13d1c:	mov	r0, #1
   13d20:	bl	10f4c <error@plt>
   13d24:	add	r3, r3, r2
   13d28:	ldrb	r2, [r4, r3]
   13d2c:	cmp	r2, #0
   13d30:	beq	140a4 <__assert_fail@plt+0x2fd8>
   13d34:	cmp	r2, #37	; 0x25
   13d38:	movne	r2, r1
   13d3c:	bne	13d24 <__assert_fail@plt+0x2c58>
   13d40:	add	r2, r4, r3
   13d44:	ldrb	r2, [r2, #1]
   13d48:	cmp	r2, #37	; 0x25
   13d4c:	bne	13cf0 <__assert_fail@plt+0x2c24>
   13d50:	mov	r2, r0
   13d54:	b	13d24 <__assert_fail@plt+0x2c58>
   13d58:	mov	r0, r5
   13d5c:	bl	1813c <__assert_fail@plt+0x7070>
   13d60:	movw	r3, #49576	; 0xc1a8
   13d64:	movt	r3, #2
   13d68:	str	r0, [r3, #56]	; 0x38
   13d6c:	b	140d0 <__assert_fail@plt+0x3004>
   13d70:	movw	r3, #49552	; 0xc190
   13d74:	movt	r3, #2
   13d78:	ldr	r8, [r3]
   13d7c:	mov	r1, r4
   13d80:	mov	r0, #0
   13d84:	bl	176e0 <__assert_fail@plt+0x6614>
   13d88:	mov	r9, r0
   13d8c:	movw	r3, #49576	; 0xc1a8
   13d90:	movt	r3, #2
   13d94:	ldr	r2, [r3, #48]	; 0x30
   13d98:	movw	r4, #45216	; 0xb0a0
   13d9c:	movt	r4, #1
   13da0:	movw	r3, #45220	; 0xb0a4
   13da4:	movt	r3, #1
   13da8:	cmp	r2, #0
   13dac:	moveq	r4, r3
   13db0:	movw	r3, #49576	; 0xc1a8
   13db4:	movt	r3, #2
   13db8:	ldr	sl, [r3, #28]
   13dbc:	movw	r3, #49416	; 0xc108
   13dc0:	movt	r3, #2
   13dc4:	ldr	r2, [r3, #32]
   13dc8:	movw	r5, #45224	; 0xb0a8
   13dcc:	movt	r5, #1
   13dd0:	movw	r3, #45232	; 0xb0b0
   13dd4:	movt	r3, #1
   13dd8:	cmp	r2, #0
   13ddc:	movne	r5, r3
   13de0:	movw	r3, #49576	; 0xc1a8
   13de4:	movt	r3, #2
   13de8:	ldr	r1, [r3, #60]	; 0x3c
   13dec:	movw	r3, #43468	; 0xa9cc
   13df0:	movt	r3, #1
   13df4:	cmp	r1, #0
   13df8:	moveq	r1, r3
   13dfc:	mov	r0, #1
   13e00:	bl	176e0 <__assert_fail@plt+0x6614>
   13e04:	mov	fp, r0
   13e08:	movw	r3, #49576	; 0xc1a8
   13e0c:	movt	r3, #2
   13e10:	ldr	r1, [r3, #56]	; 0x38
   13e14:	movw	r3, #43468	; 0xa9cc
   13e18:	movt	r3, #1
   13e1c:	cmp	r1, #0
   13e20:	moveq	r1, r3
   13e24:	mov	r0, #2
   13e28:	bl	176e0 <__assert_fail@plt+0x6614>
   13e2c:	str	r0, [sp, #16]
   13e30:	str	fp, [sp, #12]
   13e34:	str	r5, [sp, #8]
   13e38:	str	sl, [sp, #4]
   13e3c:	str	r4, [sp]
   13e40:	mov	r3, r9
   13e44:	movw	r2, #45820	; 0xb2fc
   13e48:	movt	r2, #1
   13e4c:	mov	r1, #1
   13e50:	mov	r0, r8
   13e54:	bl	1100c <__fprintf_chk@plt>
   13e58:	b	140e4 <__assert_fail@plt+0x3018>
   13e5c:	mov	r2, #5
   13e60:	movw	r1, #45928	; 0xb368
   13e64:	movt	r1, #1
   13e68:	mov	r0, #0
   13e6c:	bl	10ec8 <dcgettext@plt>
   13e70:	mov	r2, r0
   13e74:	mov	r1, #0
   13e78:	mov	r0, #1
   13e7c:	bl	10f4c <error@plt>
   13e80:	mov	r0, #1
   13e84:	movt	r0, #1
   13e88:	bl	11060 <nl_langinfo@plt>
   13e8c:	ldrb	r3, [r0]
   13e90:	cmp	r3, #0
   13e94:	bne	14120 <__assert_fail@plt+0x3054>
   13e98:	mov	r2, #5
   13e9c:	movw	r1, #45968	; 0xb390
   13ea0:	movt	r1, #1
   13ea4:	mov	r0, #0
   13ea8:	bl	10ec8 <dcgettext@plt>
   13eac:	mov	r2, r0
   13eb0:	mov	r1, #0
   13eb4:	mov	r0, r1
   13eb8:	bl	10f4c <error@plt>
   13ebc:	b	14120 <__assert_fail@plt+0x3054>
   13ec0:	mov	r2, #5
   13ec4:	movw	r1, #46008	; 0xb3b8
   13ec8:	movt	r1, #1
   13ecc:	mov	r0, #0
   13ed0:	bl	10ec8 <dcgettext@plt>
   13ed4:	mov	r2, r0
   13ed8:	mov	r1, #0
   13edc:	mov	r0, r1
   13ee0:	bl	10f4c <error@plt>
   13ee4:	b	141bc <__assert_fail@plt+0x30f0>
   13ee8:	mov	r1, r8
   13eec:	ldr	r0, [r6, r3, lsl #2]
   13ef0:	bl	12a2c <__assert_fail@plt+0x1960>
   13ef4:	and	r4, r4, r0
   13ef8:	ldr	r3, [r5]
   13efc:	add	r3, r3, #1
   13f00:	str	r3, [r5]
   13f04:	ldr	r3, [r5]
   13f08:	cmp	r3, r7
   13f0c:	blt	13ee8 <__assert_fail@plt+0x2e1c>
   13f10:	movw	r3, #49576	; 0xc1a8
   13f14:	movt	r3, #2
   13f18:	ldrb	r3, [r3, #40]	; 0x28
   13f1c:	cmp	r4, #0
   13f20:	movne	r3, #0
   13f24:	andeq	r3, r3, #1
   13f28:	cmp	r3, #0
   13f2c:	bne	14060 <__assert_fail@plt+0x2f94>
   13f30:	cmp	r4, #0
   13f34:	movne	r0, #0
   13f38:	beq	14084 <__assert_fail@plt+0x2fb8>
   13f3c:	bl	10fac <exit@plt>
   13f40:	mov	r3, #0
   13f44:	str	r3, [sp, #32]
   13f48:	str	r3, [sp, #36]	; 0x24
   13f4c:	movw	r4, #49576	; 0xc1a8
   13f50:	movt	r4, #2
   13f54:	movw	r6, #49560	; 0xc198
   13f58:	movt	r6, #2
   13f5c:	movw	r5, #49416	; 0xc108
   13f60:	movt	r5, #2
   13f64:	b	13f7c <__assert_fail@plt+0x2eb0>
   13f68:	movw	r3, #49564	; 0xc19c
   13f6c:	movt	r3, #2
   13f70:	ldr	r1, [r3]
   13f74:	ldr	r0, [sp, #32]
   13f78:	bl	10e20 <fputs_unlocked@plt>
   13f7c:	ldrd	r2, [r4, #64]	; 0x40
   13f80:	subs	r0, r2, #1
   13f84:	sbc	r1, r3, #0
   13f88:	str	r0, [r4, #64]	; 0x40
   13f8c:	str	r1, [r4, #68]	; 0x44
   13f90:	orrs	r3, r2, r3
   13f94:	beq	13fb4 <__assert_fail@plt+0x2ee8>
   13f98:	ldr	r3, [r6]
   13f9c:	ldrb	r2, [r5, #40]	; 0x28
   13fa0:	add	r1, sp, #36	; 0x24
   13fa4:	add	r0, sp, #32
   13fa8:	bl	11090 <getdelim@plt>
   13fac:	cmp	r0, #0
   13fb0:	bgt	13f68 <__assert_fail@plt+0x2e9c>
   13fb4:	mov	r4, #1
   13fb8:	movw	r6, #49560	; 0xc198
   13fbc:	movt	r6, #2
   13fc0:	movw	r5, #49416	; 0xc108
   13fc4:	movt	r5, #2
   13fc8:	b	13ffc <__assert_fail@plt+0x2f30>
   13fcc:	sub	r0, r0, #1
   13fd0:	ldr	r3, [sp, #32]
   13fd4:	ldrb	r1, [r3, r0]
   13fd8:	ldrb	r2, [r5, #40]	; 0x28
   13fdc:	cmp	r1, r2
   13fe0:	moveq	r1, #1
   13fe4:	movne	r1, #0
   13fe8:	moveq	r2, #0
   13fec:	strbeq	r2, [r3, r0]
   13ff0:	ldr	r0, [sp, #32]
   13ff4:	bl	12a2c <__assert_fail@plt+0x1960>
   13ff8:	and	r4, r4, r0
   13ffc:	ldr	r3, [r6]
   14000:	ldrb	r2, [r5, #40]	; 0x28
   14004:	add	r1, sp, #36	; 0x24
   14008:	add	r0, sp, #32
   1400c:	bl	11090 <getdelim@plt>
   14010:	cmp	r0, #0
   14014:	bgt	13fcc <__assert_fail@plt+0x2f00>
   14018:	movw	r3, #49560	; 0xc198
   1401c:	movt	r3, #2
   14020:	ldr	r3, [r3]
   14024:	ldr	r3, [r3]
   14028:	tst	r3, #32
   1402c:	beq	13f10 <__assert_fail@plt+0x2e44>
   14030:	bl	10fd0 <__errno_location@plt>
   14034:	ldr	r5, [r0]
   14038:	mov	r2, #5
   1403c:	movw	r1, #46052	; 0xb3e4
   14040:	movt	r1, #1
   14044:	mov	r0, #0
   14048:	bl	10ec8 <dcgettext@plt>
   1404c:	mov	r2, r0
   14050:	mov	r1, r5
   14054:	mov	r0, #0
   14058:	bl	10f4c <error@plt>
   1405c:	b	13f10 <__assert_fail@plt+0x2e44>
   14060:	mov	r2, #5
   14064:	movw	r1, #46072	; 0xb3f8
   14068:	movt	r1, #1
   1406c:	mov	r0, #0
   14070:	bl	10ec8 <dcgettext@plt>
   14074:	mov	r2, r0
   14078:	mov	r1, #0
   1407c:	mov	r0, r1
   14080:	bl	10f4c <error@plt>
   14084:	movw	r3, #49576	; 0xc1a8
   14088:	movt	r3, #2
   1408c:	ldr	r3, [r3, #36]	; 0x24
   14090:	sub	r3, r3, #2
   14094:	cmp	r3, #2
   14098:	movcc	r0, #0
   1409c:	movcs	r0, #2
   140a0:	b	13f3c <__assert_fail@plt+0x2e70>
   140a4:	cmp	r8, #0
   140a8:	beq	13d58 <__assert_fail@plt+0x2c8c>
   140ac:	mov	r1, r8
   140b0:	mov	r0, r4
   140b4:	bl	180fc <__assert_fail@plt+0x7030>
   140b8:	movw	r3, #49576	; 0xc1a8
   140bc:	movt	r3, #2
   140c0:	str	r0, [r3, #60]	; 0x3c
   140c4:	ldrb	r3, [r5]
   140c8:	cmp	r3, #0
   140cc:	bne	13d58 <__assert_fail@plt+0x2c8c>
   140d0:	movw	r3, #49576	; 0xc1a8
   140d4:	movt	r3, #2
   140d8:	ldrb	r3, [r3, #20]
   140dc:	cmp	r3, #0
   140e0:	bne	13d70 <__assert_fail@plt+0x2ca4>
   140e4:	movw	r3, #49576	; 0xc1a8
   140e8:	movt	r3, #2
   140ec:	ldr	r3, [r3, #48]	; 0x30
   140f0:	cmp	r3, #0
   140f4:	beq	14120 <__assert_fail@plt+0x3054>
   140f8:	movw	r3, #49576	; 0xc1a8
   140fc:	movt	r3, #2
   14100:	ldr	r3, [r3, #44]	; 0x2c
   14104:	cmp	r3, #0
   14108:	bne	13e5c <__assert_fail@plt+0x2d90>
   1410c:	movw	r3, #49576	; 0xc1a8
   14110:	movt	r3, #2
   14114:	ldrb	r3, [r3, #40]	; 0x28
   14118:	cmp	r3, #0
   1411c:	bne	13e80 <__assert_fail@plt+0x2db4>
   14120:	movw	r4, #49576	; 0xc1a8
   14124:	movt	r4, #2
   14128:	ldr	r0, [r4, #28]
   1412c:	bl	11478 <__assert_fail@plt+0x3ac>
   14130:	ldr	r3, [r4, #28]
   14134:	cmp	r3, #0
   14138:	movne	r2, #0
   1413c:	bne	14158 <__assert_fail@plt+0x308c>
   14140:	movw	r3, #49416	; 0xc108
   14144:	movt	r3, #2
   14148:	ldr	r2, [r3, #36]	; 0x24
   1414c:	cmp	r2, #256	; 0x100
   14150:	movne	r2, #0
   14154:	moveq	r2, #1
   14158:	movw	r3, #49576	; 0xc1a8
   1415c:	movt	r3, #2
   14160:	str	r2, [r3, #24]
   14164:	ldr	r3, [r3, #36]	; 0x24
   14168:	cmp	r3, #0
   1416c:	beq	14180 <__assert_fail@plt+0x30b4>
   14170:	movw	r3, #49416	; 0xc108
   14174:	movt	r3, #2
   14178:	mov	r2, #0
   1417c:	str	r2, [r3]
   14180:	movw	r3, #49544	; 0xc188
   14184:	movt	r3, #2
   14188:	ldr	r3, [r3]
   1418c:	cmp	r3, r7
   14190:	bge	13f40 <__assert_fail@plt+0x2e74>
   14194:	movw	r3, #49576	; 0xc1a8
   14198:	movt	r3, #2
   1419c:	ldrb	r3, [r3, #40]	; 0x28
   141a0:	cmp	r3, #0
   141a4:	beq	141bc <__assert_fail@plt+0x30f0>
   141a8:	movw	r3, #49576	; 0xc1a8
   141ac:	movt	r3, #2
   141b0:	ldrd	r2, [r3, #64]	; 0x40
   141b4:	orrs	r3, r2, r3
   141b8:	bne	13ec0 <__assert_fail@plt+0x2df4>
   141bc:	mov	r4, #1
   141c0:	movw	r5, #49544	; 0xc188
   141c4:	movt	r5, #2
   141c8:	mov	r8, r4
   141cc:	b	13f04 <__assert_fail@plt+0x2e38>
   141d0:	cmp	r8, #0
   141d4:	beq	140d0 <__assert_fail@plt+0x3004>
   141d8:	b	140ac <__assert_fail@plt+0x2fe0>
   141dc:	movw	r3, #49576	; 0xc1a8
   141e0:	movt	r3, #2
   141e4:	ldr	r4, [r3, #72]	; 0x48
   141e8:	cmp	r4, #0
   141ec:	bne	1393c <__assert_fail@plt+0x2870>
   141f0:	b	1410c <__assert_fail@plt+0x3040>
   141f4:	movw	r3, #49576	; 0xc1a8
   141f8:	movt	r3, #2
   141fc:	ldr	r4, [r3, #72]	; 0x48
   14200:	cmp	r4, #0
   14204:	bne	1393c <__assert_fail@plt+0x2870>
   14208:	b	14120 <__assert_fail@plt+0x3054>
   1420c:	andeq	r0, r0, r0
   14210:	ldr	r0, [r0]
   14214:	ldr	r3, [r1]
   14218:	cmp	r0, r3
   1421c:	blt	14230 <__assert_fail@plt+0x3164>
   14220:	cmp	r0, r3
   14224:	movle	r0, #0
   14228:	movgt	r0, #1
   1422c:	bx	lr
   14230:	mvn	r0, #0
   14234:	bx	lr
   14238:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1423c:	strd	r6, [sp, #8]
   14240:	str	r8, [sp, #16]
   14244:	str	lr, [sp, #20]
   14248:	mov	r6, r0
   1424c:	mov	r7, r1
   14250:	mov	r4, r2
   14254:	mov	r5, r3
   14258:	movw	r3, #49652	; 0xc1f4
   1425c:	movt	r3, #2
   14260:	ldr	r2, [r3]
   14264:	ldr	r3, [r3, #4]
   14268:	cmp	r2, r3
   1426c:	beq	142b4 <__assert_fail@plt+0x31e8>
   14270:	movw	r3, #49652	; 0xc1f4
   14274:	movt	r3, #2
   14278:	ldr	r2, [r3]
   1427c:	ldr	r1, [r3, #8]
   14280:	lsl	r2, r2, #4
   14284:	strd	r6, [r1, r2]
   14288:	ldr	r2, [r3]
   1428c:	ldr	r1, [r3, #8]
   14290:	add	r1, r1, r2, lsl #4
   14294:	strd	r4, [r1, #8]
   14298:	add	r2, r2, #1
   1429c:	str	r2, [r3]
   142a0:	ldrd	r4, [sp]
   142a4:	ldrd	r6, [sp, #8]
   142a8:	ldr	r8, [sp, #16]
   142ac:	add	sp, sp, #20
   142b0:	pop	{pc}		; (ldr pc, [sp], #4)
   142b4:	movw	r8, #49652	; 0xc1f4
   142b8:	movt	r8, #2
   142bc:	mov	r2, #16
   142c0:	add	r1, r8, #4
   142c4:	ldr	r0, [r8, #8]
   142c8:	bl	17e98 <__assert_fail@plt+0x6dcc>
   142cc:	str	r0, [r8, #8]
   142d0:	b	14270 <__assert_fail@plt+0x31a4>
   142d4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   142d8:	strd	r6, [sp, #8]
   142dc:	strd	r8, [sp, #16]
   142e0:	strd	sl, [sp, #24]
   142e4:	str	lr, [sp, #32]
   142e8:	sub	sp, sp, #44	; 0x2c
   142ec:	mov	r5, r0
   142f0:	str	r1, [sp, #28]
   142f4:	ands	r3, r1, #1
   142f8:	str	r3, [sp, #24]
   142fc:	beq	14328 <__assert_fail@plt+0x325c>
   14300:	movw	r1, #46656	; 0xb640
   14304:	movt	r1, #1
   14308:	bl	10e38 <strcmp@plt>
   1430c:	cmp	r0, #0
   14310:	bne	14350 <__assert_fail@plt+0x3284>
   14314:	add	r5, r5, #1
   14318:	mov	sl, #1
   1431c:	mov	fp, #0
   14320:	mov	r7, #1
   14324:	b	14334 <__assert_fail@plt+0x3268>
   14328:	mov	sl, #0
   1432c:	mov	fp, #0
   14330:	mov	r7, #0
   14334:	mov	r8, r7
   14338:	mov	r6, #0
   1433c:	mov	r9, r6
   14340:	mov	r2, #1
   14344:	mov	r3, #0
   14348:	strd	r2, [sp]
   1434c:	b	144f0 <__assert_fail@plt+0x3424>
   14350:	mov	sl, #0
   14354:	mov	fp, #0
   14358:	mov	r7, #0
   1435c:	b	14334 <__assert_fail@plt+0x3268>
   14360:	mov	r6, r7
   14364:	mov	sl, #0
   14368:	mov	fp, sl
   1436c:	mov	r8, #1
   14370:	str	r8, [sp]
   14374:	str	sl, [sp, #4]
   14378:	b	144f0 <__assert_fail@plt+0x3424>
   1437c:	cmp	r8, #0
   14380:	bne	143b4 <__assert_fail@plt+0x32e8>
   14384:	orrs	r3, sl, fp
   14388:	movne	r6, #0
   1438c:	andeq	r6, r7, #1
   14390:	cmp	r6, #0
   14394:	bne	143f0 <__assert_fail@plt+0x3324>
   14398:	cmp	r7, #0
   1439c:	beq	14360 <__assert_fail@plt+0x3294>
   143a0:	mov	r8, r7
   143a4:	strd	sl, [sp]
   143a8:	mov	sl, #0
   143ac:	mov	fp, sl
   143b0:	b	144f0 <__assert_fail@plt+0x3424>
   143b4:	ldr	r3, [sp, #28]
   143b8:	tst	r3, #4
   143bc:	mov	r2, #5
   143c0:	movwne	r1, #46496	; 0xb5a0
   143c4:	movtne	r1, #1
   143c8:	movweq	r1, #46528	; 0xb5c0
   143cc:	movteq	r1, #1
   143d0:	mov	r0, #0
   143d4:	bl	10ec8 <dcgettext@plt>
   143d8:	mov	r2, r0
   143dc:	mov	r1, #0
   143e0:	mov	r0, r1
   143e4:	bl	10f4c <error@plt>
   143e8:	mov	r0, #1
   143ec:	bl	12c14 <__assert_fail@plt+0x1b48>
   143f0:	ldr	r3, [sp, #28]
   143f4:	tst	r3, #4
   143f8:	mov	r2, #5
   143fc:	movwne	r1, #46548	; 0xb5d4
   14400:	movtne	r1, #1
   14404:	movweq	r1, #46596	; 0xb604
   14408:	movteq	r1, #1
   1440c:	mov	r0, #0
   14410:	bl	10ec8 <dcgettext@plt>
   14414:	mov	r2, r0
   14418:	mov	r1, #0
   1441c:	mov	r0, r1
   14420:	bl	10f4c <error@plt>
   14424:	mov	r0, #1
   14428:	bl	12c14 <__assert_fail@plt+0x1b48>
   1442c:	mov	r2, #5
   14430:	movw	r1, #46624	; 0xb620
   14434:	movt	r1, #1
   14438:	mov	r0, #0
   1443c:	bl	10ec8 <dcgettext@plt>
   14440:	mov	r2, r0
   14444:	mov	r1, #0
   14448:	mov	r0, r1
   1444c:	bl	10f4c <error@plt>
   14450:	mov	r0, #1
   14454:	bl	12c14 <__assert_fail@plt+0x1b48>
   14458:	cmp	r9, #0
   1445c:	beq	1455c <__assert_fail@plt+0x3490>
   14460:	ldrd	r2, [sp]
   14464:	cmp	r3, fp
   14468:	cmpeq	r2, sl
   1446c:	bhi	14484 <__assert_fail@plt+0x33b8>
   14470:	mov	r2, sl
   14474:	mov	r3, fp
   14478:	ldrd	r0, [sp]
   1447c:	bl	14238 <__assert_fail@plt+0x316c>
   14480:	b	144cc <__assert_fail@plt+0x3400>
   14484:	mov	r2, #5
   14488:	movw	r1, #46660	; 0xb644
   1448c:	movt	r1, #1
   14490:	mov	r0, #0
   14494:	bl	10ec8 <dcgettext@plt>
   14498:	mov	r2, r0
   1449c:	mov	r1, #0
   144a0:	mov	r0, r1
   144a4:	bl	10f4c <error@plt>
   144a8:	mov	r0, #1
   144ac:	bl	12c14 <__assert_fail@plt+0x1b48>
   144b0:	orrs	r3, sl, fp
   144b4:	beq	14570 <__assert_fail@plt+0x34a4>
   144b8:	mov	r2, sl
   144bc:	mov	r3, fp
   144c0:	mov	r0, sl
   144c4:	mov	r1, fp
   144c8:	bl	14238 <__assert_fail@plt+0x316c>
   144cc:	ldrb	r3, [r5, #-1]
   144d0:	cmp	r3, #0
   144d4:	beq	14740 <__assert_fail@plt+0x3674>
   144d8:	mov	sl, #0
   144dc:	mov	fp, sl
   144e0:	mov	r6, sl
   144e4:	mov	r8, sl
   144e8:	mov	r9, sl
   144ec:	mov	r7, sl
   144f0:	str	r5, [sp, #12]
   144f4:	ldrb	r4, [r5], #1
   144f8:	cmp	r4, #45	; 0x2d
   144fc:	beq	1437c <__assert_fail@plt+0x32b0>
   14500:	cmp	r4, #44	; 0x2c
   14504:	beq	1452c <__assert_fail@plt+0x3460>
   14508:	bl	10fa0 <__ctype_b_loc@plt>
   1450c:	ldr	r2, [r0]
   14510:	lsl	r3, r4, #1
   14514:	ldrh	r3, [r2, r3]
   14518:	cmp	r4, #0
   1451c:	andne	r3, r3, #1
   14520:	moveq	r3, #1
   14524:	cmp	r3, #0
   14528:	beq	145ac <__assert_fail@plt+0x34e0>
   1452c:	cmp	r8, #0
   14530:	beq	144b0 <__assert_fail@plt+0x33e4>
   14534:	orr	r7, r7, r9
   14538:	tst	r7, #255	; 0xff
   1453c:	bne	14458 <__assert_fail@plt+0x338c>
   14540:	ldr	r3, [sp, #24]
   14544:	cmp	r3, #0
   14548:	beq	1442c <__assert_fail@plt+0x3360>
   1454c:	mov	r3, #1
   14550:	str	r3, [sp]
   14554:	mov	r3, #0
   14558:	str	r3, [sp, #4]
   1455c:	mvn	r2, #0
   14560:	mvn	r3, #0
   14564:	ldrd	r0, [sp]
   14568:	bl	14238 <__assert_fail@plt+0x316c>
   1456c:	b	144cc <__assert_fail@plt+0x3400>
   14570:	ldr	r3, [sp, #28]
   14574:	tst	r3, #4
   14578:	mov	r2, #5
   1457c:	movwne	r1, #46548	; 0xb5d4
   14580:	movtne	r1, #1
   14584:	movweq	r1, #46596	; 0xb604
   14588:	movteq	r1, #1
   1458c:	mov	r0, #0
   14590:	bl	10ec8 <dcgettext@plt>
   14594:	mov	r2, r0
   14598:	mov	r1, #0
   1459c:	mov	r0, r1
   145a0:	bl	10f4c <error@plt>
   145a4:	mov	r0, #1
   145a8:	bl	12c14 <__assert_fail@plt+0x1b48>
   145ac:	sub	r3, r4, #48	; 0x30
   145b0:	cmp	r3, #9
   145b4:	bhi	146f4 <__assert_fail@plt+0x3628>
   145b8:	cmp	r6, #0
   145bc:	beq	145d4 <__assert_fail@plt+0x3508>
   145c0:	movw	r3, #49652	; 0xc1f4
   145c4:	movt	r3, #2
   145c8:	ldr	r3, [r3, #12]
   145cc:	cmp	r3, #0
   145d0:	bne	145e4 <__assert_fail@plt+0x3518>
   145d4:	movw	r3, #49652	; 0xc1f4
   145d8:	movt	r3, #2
   145dc:	ldr	r2, [sp, #12]
   145e0:	str	r2, [r3, #12]
   145e4:	cmp	r8, #0
   145e8:	moveq	r7, #1
   145ec:	cmp	r8, #0
   145f0:	movne	r9, r8
   145f4:	add	r3, pc, #972	; 0x3cc
   145f8:	ldrd	r2, [r3]
   145fc:	cmp	fp, r3
   14600:	cmpeq	sl, r2
   14604:	bhi	14674 <__assert_fail@plt+0x35a8>
   14608:	lsl	r1, fp, #2
   1460c:	lsl	r3, sl, #2
   14610:	orr	r2, r1, sl, lsr #30
   14614:	adds	r3, r3, sl
   14618:	adc	r2, r2, fp
   1461c:	adds	r3, r3, r3
   14620:	str	r3, [sp, #16]
   14624:	adc	r3, r2, r2
   14628:	str	r3, [sp, #20]
   1462c:	sub	r4, r4, #48	; 0x30
   14630:	ldrd	r2, [sp, #16]
   14634:	adds	r2, r2, r4
   14638:	adc	r3, r3, r4, asr #31
   1463c:	cmp	r3, fp
   14640:	cmpeq	r2, sl
   14644:	movcc	r0, #1
   14648:	movcs	r0, #0
   1464c:	and	r1, r2, r3
   14650:	cmn	r1, #1
   14654:	movne	r1, #0
   14658:	moveq	r1, #1
   1465c:	orrs	r1, r0, r1
   14660:	bne	14674 <__assert_fail@plt+0x35a8>
   14664:	mov	sl, r2
   14668:	mov	fp, r3
   1466c:	mov	r6, #1
   14670:	b	144f0 <__assert_fail@plt+0x3424>
   14674:	movw	r3, #49652	; 0xc1f4
   14678:	movt	r3, #2
   1467c:	ldr	r4, [r3, #12]
   14680:	movw	r1, #46688	; 0xb660
   14684:	movt	r1, #1
   14688:	mov	r0, r4
   1468c:	bl	110c0 <strspn@plt>
   14690:	mov	r1, r0
   14694:	mov	r0, r4
   14698:	bl	180fc <__assert_fail@plt+0x7030>
   1469c:	mov	r4, r0
   146a0:	ldr	r3, [sp, #28]
   146a4:	tst	r3, #4
   146a8:	mov	r2, #5
   146ac:	movwne	r1, #46700	; 0xb66c
   146b0:	movtne	r1, #1
   146b4:	movweq	r1, #46740	; 0xb694
   146b8:	movteq	r1, #1
   146bc:	mov	r0, #0
   146c0:	bl	10ec8 <dcgettext@plt>
   146c4:	mov	r5, r0
   146c8:	mov	r0, r4
   146cc:	bl	176fc <__assert_fail@plt+0x6630>
   146d0:	mov	r3, r0
   146d4:	mov	r2, r5
   146d8:	mov	r1, #0
   146dc:	mov	r0, r1
   146e0:	bl	10f4c <error@plt>
   146e4:	mov	r0, r4
   146e8:	bl	14f60 <__assert_fail@plt+0x3e94>
   146ec:	mov	r0, #1
   146f0:	bl	12c14 <__assert_fail@plt+0x1b48>
   146f4:	ldr	r3, [sp, #28]
   146f8:	tst	r3, #4
   146fc:	mov	r2, #5
   14700:	movwne	r1, #46772	; 0xb6b4
   14704:	movtne	r1, #1
   14708:	movweq	r1, #46808	; 0xb6d8
   1470c:	movteq	r1, #1
   14710:	mov	r0, #0
   14714:	bl	10ec8 <dcgettext@plt>
   14718:	mov	r4, r0
   1471c:	ldr	r0, [sp, #12]
   14720:	bl	176fc <__assert_fail@plt+0x6630>
   14724:	mov	r3, r0
   14728:	mov	r2, r4
   1472c:	mov	r1, #0
   14730:	mov	r0, r1
   14734:	bl	10f4c <error@plt>
   14738:	mov	r0, #1
   1473c:	bl	12c14 <__assert_fail@plt+0x1b48>
   14740:	movw	r3, #49652	; 0xc1f4
   14744:	movt	r3, #2
   14748:	ldr	r1, [r3]
   1474c:	cmp	r1, #0
   14750:	beq	14788 <__assert_fail@plt+0x36bc>
   14754:	movw	r0, #49652	; 0xc1f4
   14758:	movt	r0, #2
   1475c:	movw	r3, #16912	; 0x4210
   14760:	movt	r3, #1
   14764:	mov	r2, #16
   14768:	ldr	r0, [r0, #8]
   1476c:	bl	11078 <qsort@plt>
   14770:	mvn	r8, #-268435455	; 0xf0000001
   14774:	mov	sl, #16
   14778:	mov	fp, #0
   1477c:	movw	r9, #49652	; 0xc1f4
   14780:	movt	r9, #2
   14784:	b	147cc <__assert_fail@plt+0x3700>
   14788:	ldr	r3, [sp, #28]
   1478c:	tst	r3, #4
   14790:	mov	r2, #5
   14794:	movwne	r1, #46832	; 0xb6f0
   14798:	movtne	r1, #1
   1479c:	movweq	r1, #46876	; 0xb71c
   147a0:	movteq	r1, #1
   147a4:	mov	r0, #0
   147a8:	bl	10ec8 <dcgettext@plt>
   147ac:	mov	r2, r0
   147b0:	mov	r1, #0
   147b4:	mov	r0, r1
   147b8:	bl	10f4c <error@plt>
   147bc:	mov	r0, #1
   147c0:	bl	12c14 <__assert_fail@plt+0x1b48>
   147c4:	add	sl, sl, #16
   147c8:	sub	r8, r8, #1
   147cc:	ldr	r2, [r9]
   147d0:	cmp	r2, fp
   147d4:	bls	1487c <__assert_fail@plt+0x37b0>
   147d8:	add	fp, fp, #1
   147dc:	cmp	r2, fp
   147e0:	bls	147c4 <__assert_fail@plt+0x36f8>
   147e4:	ldr	r1, [r9, #8]
   147e8:	add	r0, r1, sl
   147ec:	sub	r3, sl, #16
   147f0:	str	r3, [sp, #12]
   147f4:	add	r3, r1, r3
   147f8:	ldrd	r6, [r3, #8]
   147fc:	ldrd	r4, [r1, sl]
   14800:	cmp	r5, r7
   14804:	cmpeq	r4, r6
   14808:	bhi	147c4 <__assert_fail@plt+0x36f8>
   1480c:	add	ip, sl, #16
   14810:	str	ip, [sp]
   14814:	ldrd	r4, [r0, #8]
   14818:	cmp	r5, r7
   1481c:	cmpeq	r4, r6
   14820:	movcc	r4, r6
   14824:	movcc	r5, r7
   14828:	strd	r4, [r3, #8]
   1482c:	add	r2, r2, r8
   14830:	lsl	r2, r2, #4
   14834:	ldr	r3, [sp]
   14838:	add	r1, r1, r3
   1483c:	bl	10e68 <memmove@plt>
   14840:	ldr	r2, [r9]
   14844:	sub	r2, r2, #1
   14848:	str	r2, [r9]
   1484c:	cmp	r2, fp
   14850:	bls	147c4 <__assert_fail@plt+0x36f8>
   14854:	ldr	r1, [r9, #8]
   14858:	add	r0, r1, sl
   1485c:	ldr	r3, [sp, #12]
   14860:	add	r3, r1, r3
   14864:	ldrd	r6, [r3, #8]
   14868:	ldrd	r4, [r1, sl]
   1486c:	cmp	r5, r7
   14870:	cmpeq	r4, r6
   14874:	bls	14814 <__assert_fail@plt+0x3748>
   14878:	b	147c4 <__assert_fail@plt+0x36f8>
   1487c:	mov	r4, r2
   14880:	ldr	r3, [sp, #28]
   14884:	tst	r3, #2
   14888:	bne	148ec <__assert_fail@plt+0x3820>
   1488c:	movw	r4, #49652	; 0xc1f4
   14890:	movt	r4, #2
   14894:	ldr	r1, [r4]
   14898:	add	r1, r1, #1
   1489c:	str	r1, [r4]
   148a0:	lsl	r1, r1, #4
   148a4:	ldr	r0, [r4, #8]
   148a8:	bl	17d30 <__assert_fail@plt+0x6c64>
   148ac:	str	r0, [r4, #8]
   148b0:	ldr	r3, [r4]
   148b4:	sub	r3, r3, #-268435455	; 0xf0000001
   148b8:	lsl	r3, r3, #4
   148bc:	add	r2, r0, r3
   148c0:	mvn	r4, #0
   148c4:	mvn	r5, #0
   148c8:	strd	r4, [r2, #8]
   148cc:	strd	r4, [r0, r3]
   148d0:	add	sp, sp, #44	; 0x2c
   148d4:	ldrd	r4, [sp]
   148d8:	ldrd	r6, [sp, #8]
   148dc:	ldrd	r8, [sp, #16]
   148e0:	ldrd	sl, [sp, #24]
   148e4:	add	sp, sp, #32
   148e8:	pop	{pc}		; (ldr pc, [sp], #4)
   148ec:	movw	r3, #49652	; 0xc1f4
   148f0:	movt	r3, #2
   148f4:	ldr	r6, [r3, #8]
   148f8:	mov	r2, #0
   148fc:	str	r2, [r3, #8]
   14900:	str	r2, [r3]
   14904:	str	r2, [r3, #4]
   14908:	ldrd	r0, [r6]
   1490c:	cmp	r1, #0
   14910:	cmpeq	r0, #1
   14914:	bhi	14930 <__assert_fail@plt+0x3864>
   14918:	cmp	r4, #1
   1491c:	bls	1498c <__assert_fail@plt+0x38c0>
   14920:	mov	r5, r6
   14924:	sub	r7, r6, #16
   14928:	add	r7, r7, r4, lsl #4
   1492c:	b	14954 <__assert_fail@plt+0x3888>
   14930:	subs	r2, r0, #1
   14934:	sbc	r3, r1, #0
   14938:	mov	r0, #1
   1493c:	mov	r1, #0
   14940:	bl	14238 <__assert_fail@plt+0x316c>
   14944:	b	14918 <__assert_fail@plt+0x384c>
   14948:	add	r5, r5, #16
   1494c:	cmp	r5, r7
   14950:	beq	1498c <__assert_fail@plt+0x38c0>
   14954:	ldr	r3, [r5, #8]
   14958:	ldr	r2, [r5, #12]
   1495c:	adds	r8, r3, #1
   14960:	adc	r9, r2, #0
   14964:	ldrd	r0, [r5, #16]
   14968:	cmp	r9, r1
   1496c:	cmpeq	r8, r0
   14970:	beq	14948 <__assert_fail@plt+0x387c>
   14974:	subs	r2, r0, #1
   14978:	sbc	r3, r1, #0
   1497c:	mov	r0, r8
   14980:	mov	r1, r9
   14984:	bl	14238 <__assert_fail@plt+0x316c>
   14988:	b	14948 <__assert_fail@plt+0x387c>
   1498c:	add	r4, r6, r4, lsl #4
   14990:	ldrd	r4, [r4, #-8]
   14994:	mvn	r2, #0
   14998:	mvn	r3, #0
   1499c:	cmp	r5, r3
   149a0:	cmpeq	r4, r2
   149a4:	bne	149b4 <__assert_fail@plt+0x38e8>
   149a8:	mov	r0, r6
   149ac:	bl	14f60 <__assert_fail@plt+0x3e94>
   149b0:	b	1488c <__assert_fail@plt+0x37c0>
   149b4:	adds	r0, r4, #1
   149b8:	adc	r1, r5, #0
   149bc:	bl	14238 <__assert_fail@plt+0x316c>
   149c0:	b	149a8 <__assert_fail@plt+0x38dc>
   149c4:	nop	{0}
   149c8:	ldmibls	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   149cc:	ldmibne	r9, {r0, r3, r4, r7, r8, fp, ip, pc}
   149d0:	str	r4, [sp, #-8]!
   149d4:	str	lr, [sp, #4]
   149d8:	mov	r0, #1
   149dc:	bl	12c14 <__assert_fail@plt+0x1b48>
   149e0:	ldr	r4, [sp]
   149e4:	add	sp, sp, #4
   149e8:	pop	{pc}		; (ldr pc, [sp], #4)
   149ec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   149f0:	strd	r6, [sp, #8]
   149f4:	strd	r8, [sp, #16]
   149f8:	strd	sl, [sp, #24]
   149fc:	str	lr, [sp, #32]
   14a00:	sub	sp, sp, #12
   14a04:	str	r0, [sp]
   14a08:	mov	r5, r1
   14a0c:	mov	r6, r2
   14a10:	str	r2, [sp, #4]
   14a14:	mov	r9, r3
   14a18:	bl	10fb8 <strlen@plt>
   14a1c:	ldr	r4, [r5]
   14a20:	cmp	r4, #0
   14a24:	beq	14ae0 <__assert_fail@plt+0x3a14>
   14a28:	mov	r8, r0
   14a2c:	mov	fp, #0
   14a30:	mvn	sl, #0
   14a34:	mov	r7, fp
   14a38:	b	14a58 <__assert_fail@plt+0x398c>
   14a3c:	mov	sl, r7
   14a40:	b	14ac0 <__assert_fail@plt+0x39f4>
   14a44:	add	r7, r7, #1
   14a48:	ldr	r4, [r5, #4]!
   14a4c:	add	r6, r6, r9
   14a50:	cmp	r4, #0
   14a54:	beq	14ab8 <__assert_fail@plt+0x39ec>
   14a58:	mov	r2, r8
   14a5c:	ldr	r1, [sp]
   14a60:	mov	r0, r4
   14a64:	bl	1109c <strncmp@plt>
   14a68:	cmp	r0, #0
   14a6c:	bne	14a44 <__assert_fail@plt+0x3978>
   14a70:	mov	r0, r4
   14a74:	bl	10fb8 <strlen@plt>
   14a78:	cmp	r0, r8
   14a7c:	beq	14a3c <__assert_fail@plt+0x3970>
   14a80:	cmn	sl, #1
   14a84:	moveq	sl, r7
   14a88:	beq	14a44 <__assert_fail@plt+0x3978>
   14a8c:	ldr	r3, [sp, #4]
   14a90:	cmp	r3, #0
   14a94:	moveq	fp, #1
   14a98:	beq	14a44 <__assert_fail@plt+0x3978>
   14a9c:	mov	r2, r9
   14aa0:	mov	r1, r6
   14aa4:	mla	r0, r9, sl, r3
   14aa8:	bl	10eb0 <memcmp@plt>
   14aac:	cmp	r0, #0
   14ab0:	movne	fp, #1
   14ab4:	b	14a44 <__assert_fail@plt+0x3978>
   14ab8:	cmp	fp, #0
   14abc:	mvnne	sl, #1
   14ac0:	mov	r0, sl
   14ac4:	add	sp, sp, #12
   14ac8:	ldrd	r4, [sp]
   14acc:	ldrd	r6, [sp, #8]
   14ad0:	ldrd	r8, [sp, #16]
   14ad4:	ldrd	sl, [sp, #24]
   14ad8:	add	sp, sp, #32
   14adc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae0:	mvn	sl, #0
   14ae4:	b	14ac0 <__assert_fail@plt+0x39f4>
   14ae8:	strd	r4, [sp, #-16]!
   14aec:	str	r6, [sp, #8]
   14af0:	str	lr, [sp, #12]
   14af4:	mov	r6, r0
   14af8:	ldr	r0, [r1]
   14afc:	cmp	r0, #0
   14b00:	beq	14b48 <__assert_fail@plt+0x3a7c>
   14b04:	mov	r4, r1
   14b08:	mov	r5, #0
   14b0c:	mov	r1, r6
   14b10:	bl	10e38 <strcmp@plt>
   14b14:	cmp	r0, #0
   14b18:	beq	14b34 <__assert_fail@plt+0x3a68>
   14b1c:	add	r5, r5, #1
   14b20:	ldr	r0, [r4, #4]!
   14b24:	cmp	r0, #0
   14b28:	bne	14b0c <__assert_fail@plt+0x3a40>
   14b2c:	mvn	r0, #0
   14b30:	b	14b38 <__assert_fail@plt+0x3a6c>
   14b34:	mov	r0, r5
   14b38:	ldrd	r4, [sp]
   14b3c:	ldr	r6, [sp, #8]
   14b40:	add	sp, sp, #12
   14b44:	pop	{pc}		; (ldr pc, [sp], #4)
   14b48:	mvn	r0, #0
   14b4c:	b	14b38 <__assert_fail@plt+0x3a6c>
   14b50:	strd	r4, [sp, #-16]!
   14b54:	str	r6, [sp, #8]
   14b58:	str	lr, [sp, #12]
   14b5c:	sub	sp, sp, #8
   14b60:	mov	r6, r0
   14b64:	mov	r5, r1
   14b68:	cmn	r2, #1
   14b6c:	mov	r2, #5
   14b70:	movweq	r1, #46916	; 0xb744
   14b74:	movteq	r1, #1
   14b78:	movwne	r1, #46944	; 0xb760
   14b7c:	movtne	r1, #1
   14b80:	mov	r0, #0
   14b84:	bl	10ec8 <dcgettext@plt>
   14b88:	mov	r4, r0
   14b8c:	mov	r2, r5
   14b90:	mov	r1, #8
   14b94:	mov	r0, #0
   14b98:	bl	17380 <__assert_fail@plt+0x62b4>
   14b9c:	mov	r5, r0
   14ba0:	mov	r1, r6
   14ba4:	mov	r0, #1
   14ba8:	bl	176e0 <__assert_fail@plt+0x6614>
   14bac:	str	r0, [sp]
   14bb0:	mov	r3, r5
   14bb4:	mov	r2, r4
   14bb8:	mov	r1, #0
   14bbc:	mov	r0, r1
   14bc0:	bl	10f4c <error@plt>
   14bc4:	add	sp, sp, #8
   14bc8:	ldrd	r4, [sp]
   14bcc:	ldr	r6, [sp, #8]
   14bd0:	add	sp, sp, #12
   14bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bd8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14bdc:	strd	r6, [sp, #8]
   14be0:	strd	r8, [sp, #16]
   14be4:	strd	sl, [sp, #24]
   14be8:	str	lr, [sp, #32]
   14bec:	sub	sp, sp, #12
   14bf0:	mov	r7, r0
   14bf4:	mov	r4, r1
   14bf8:	mov	r8, r2
   14bfc:	mov	r2, #5
   14c00:	movw	r1, #46976	; 0xb780
   14c04:	movt	r1, #1
   14c08:	mov	r0, #0
   14c0c:	bl	10ec8 <dcgettext@plt>
   14c10:	movw	r3, #49552	; 0xc190
   14c14:	movt	r3, #2
   14c18:	ldr	r1, [r3]
   14c1c:	bl	10e20 <fputs_unlocked@plt>
   14c20:	ldr	r5, [r7]
   14c24:	cmp	r5, #0
   14c28:	beq	14cd4 <__assert_fail@plt+0x3c08>
   14c2c:	mov	r3, #0
   14c30:	str	r3, [sp]
   14c34:	mov	r6, r3
   14c38:	movw	sl, #49552	; 0xc190
   14c3c:	movt	sl, #2
   14c40:	movw	fp, #47000	; 0xb798
   14c44:	movt	fp, #1
   14c48:	movw	r3, #47008	; 0xb7a0
   14c4c:	movt	r3, #1
   14c50:	str	r3, [sp, #4]
   14c54:	b	14c90 <__assert_fail@plt+0x3bc4>
   14c58:	ldr	r9, [sl]
   14c5c:	mov	r0, r5
   14c60:	bl	176fc <__assert_fail@plt+0x6630>
   14c64:	mov	r3, r0
   14c68:	mov	r2, fp
   14c6c:	mov	r1, #1
   14c70:	mov	r0, r9
   14c74:	bl	1100c <__fprintf_chk@plt>
   14c78:	str	r4, [sp]
   14c7c:	add	r6, r6, #1
   14c80:	ldr	r5, [r7, #4]!
   14c84:	add	r4, r4, r8
   14c88:	cmp	r5, #0
   14c8c:	beq	14cd4 <__assert_fail@plt+0x3c08>
   14c90:	cmp	r6, #0
   14c94:	beq	14c58 <__assert_fail@plt+0x3b8c>
   14c98:	mov	r2, r8
   14c9c:	mov	r1, r4
   14ca0:	ldr	r0, [sp]
   14ca4:	bl	10eb0 <memcmp@plt>
   14ca8:	cmp	r0, #0
   14cac:	bne	14c58 <__assert_fail@plt+0x3b8c>
   14cb0:	ldr	r9, [sl]
   14cb4:	mov	r0, r5
   14cb8:	bl	176fc <__assert_fail@plt+0x6630>
   14cbc:	mov	r3, r0
   14cc0:	ldr	r2, [sp, #4]
   14cc4:	mov	r1, #1
   14cc8:	mov	r0, r9
   14ccc:	bl	1100c <__fprintf_chk@plt>
   14cd0:	b	14c7c <__assert_fail@plt+0x3bb0>
   14cd4:	movw	r3, #49552	; 0xc190
   14cd8:	movt	r3, #2
   14cdc:	ldr	r0, [r3]
   14ce0:	ldr	r3, [r0, #20]
   14ce4:	ldr	r2, [r0, #24]
   14ce8:	cmp	r3, r2
   14cec:	addcc	r2, r3, #1
   14cf0:	strcc	r2, [r0, #20]
   14cf4:	movcc	r2, #10
   14cf8:	strbcc	r2, [r3]
   14cfc:	bcs	14d1c <__assert_fail@plt+0x3c50>
   14d00:	add	sp, sp, #12
   14d04:	ldrd	r4, [sp]
   14d08:	ldrd	r6, [sp, #8]
   14d0c:	ldrd	r8, [sp, #16]
   14d10:	ldrd	sl, [sp, #24]
   14d14:	add	sp, sp, #32
   14d18:	pop	{pc}		; (ldr pc, [sp], #4)
   14d1c:	mov	r1, #10
   14d20:	bl	11030 <__overflow@plt>
   14d24:	b	14d00 <__assert_fail@plt+0x3c34>
   14d28:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d2c:	strd	r6, [sp, #8]
   14d30:	str	r8, [sp, #16]
   14d34:	str	lr, [sp, #20]
   14d38:	mov	r7, r0
   14d3c:	mov	r5, r1
   14d40:	mov	r4, r2
   14d44:	mov	r6, r3
   14d48:	ldrb	r3, [sp, #32]
   14d4c:	cmp	r3, #0
   14d50:	beq	14d84 <__assert_fail@plt+0x3cb8>
   14d54:	ldr	r3, [sp, #24]
   14d58:	mov	r2, r6
   14d5c:	mov	r1, r4
   14d60:	mov	r0, r5
   14d64:	bl	149ec <__assert_fail@plt+0x3920>
   14d68:	cmp	r0, #0
   14d6c:	blt	14d94 <__assert_fail@plt+0x3cc8>
   14d70:	ldrd	r4, [sp]
   14d74:	ldrd	r6, [sp, #8]
   14d78:	ldr	r8, [sp, #16]
   14d7c:	add	sp, sp, #20
   14d80:	pop	{pc}		; (ldr pc, [sp], #4)
   14d84:	mov	r1, r2
   14d88:	mov	r0, r5
   14d8c:	bl	14ae8 <__assert_fail@plt+0x3a1c>
   14d90:	b	14d68 <__assert_fail@plt+0x3c9c>
   14d94:	mov	r2, r0
   14d98:	mov	r1, r5
   14d9c:	mov	r0, r7
   14da0:	bl	14b50 <__assert_fail@plt+0x3a84>
   14da4:	ldr	r2, [sp, #24]
   14da8:	mov	r1, r6
   14dac:	mov	r0, r4
   14db0:	bl	14bd8 <__assert_fail@plt+0x3b0c>
   14db4:	ldr	r3, [sp, #28]
   14db8:	blx	r3
   14dbc:	mvn	r0, #0
   14dc0:	b	14d70 <__assert_fail@plt+0x3ca4>
   14dc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14dc8:	strd	r6, [sp, #8]
   14dcc:	str	r8, [sp, #16]
   14dd0:	str	lr, [sp, #20]
   14dd4:	ldr	r7, [r1]
   14dd8:	cmp	r7, #0
   14ddc:	beq	14e18 <__assert_fail@plt+0x3d4c>
   14de0:	mov	r6, r3
   14de4:	mov	r8, r0
   14de8:	mov	r4, r2
   14dec:	mov	r5, r1
   14df0:	mov	r2, r6
   14df4:	mov	r1, r4
   14df8:	mov	r0, r8
   14dfc:	bl	10eb0 <memcmp@plt>
   14e00:	cmp	r0, #0
   14e04:	beq	14e18 <__assert_fail@plt+0x3d4c>
   14e08:	ldr	r7, [r5, #4]!
   14e0c:	add	r4, r4, r6
   14e10:	cmp	r7, #0
   14e14:	bne	14df0 <__assert_fail@plt+0x3d24>
   14e18:	mov	r0, r7
   14e1c:	ldrd	r4, [sp]
   14e20:	ldrd	r6, [sp, #8]
   14e24:	ldr	r8, [sp, #16]
   14e28:	add	sp, sp, #20
   14e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e30:	movw	r3, #49668	; 0xc204
   14e34:	movt	r3, #2
   14e38:	str	r0, [r3]
   14e3c:	bx	lr
   14e40:	movw	r3, #49668	; 0xc204
   14e44:	movt	r3, #2
   14e48:	strb	r0, [r3, #4]
   14e4c:	bx	lr
   14e50:	strd	r4, [sp, #-16]!
   14e54:	str	r6, [sp, #8]
   14e58:	str	lr, [sp, #12]
   14e5c:	sub	sp, sp, #8
   14e60:	movw	r3, #49564	; 0xc19c
   14e64:	movt	r3, #2
   14e68:	ldr	r0, [r3]
   14e6c:	bl	18eb0 <__assert_fail@plt+0x7de4>
   14e70:	cmp	r0, #0
   14e74:	beq	14e9c <__assert_fail@plt+0x3dd0>
   14e78:	movw	r3, #49668	; 0xc204
   14e7c:	movt	r3, #2
   14e80:	ldrb	r3, [r3, #4]
   14e84:	cmp	r3, #0
   14e88:	beq	14ec8 <__assert_fail@plt+0x3dfc>
   14e8c:	bl	10fd0 <__errno_location@plt>
   14e90:	ldr	r3, [r0]
   14e94:	cmp	r3, #32
   14e98:	bne	14ec8 <__assert_fail@plt+0x3dfc>
   14e9c:	movw	r3, #49552	; 0xc190
   14ea0:	movt	r3, #2
   14ea4:	ldr	r0, [r3]
   14ea8:	bl	18eb0 <__assert_fail@plt+0x7de4>
   14eac:	cmp	r0, #0
   14eb0:	bne	14f50 <__assert_fail@plt+0x3e84>
   14eb4:	add	sp, sp, #8
   14eb8:	ldrd	r4, [sp]
   14ebc:	ldr	r6, [sp, #8]
   14ec0:	add	sp, sp, #12
   14ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ec8:	mov	r2, #5
   14ecc:	movw	r1, #47016	; 0xb7a8
   14ed0:	movt	r1, #1
   14ed4:	mov	r0, #0
   14ed8:	bl	10ec8 <dcgettext@plt>
   14edc:	mov	r4, r0
   14ee0:	movw	r3, #49668	; 0xc204
   14ee4:	movt	r3, #2
   14ee8:	ldr	r5, [r3]
   14eec:	cmp	r5, #0
   14ef0:	beq	14f30 <__assert_fail@plt+0x3e64>
   14ef4:	bl	10fd0 <__errno_location@plt>
   14ef8:	ldr	r6, [r0]
   14efc:	mov	r0, r5
   14f00:	bl	174f8 <__assert_fail@plt+0x642c>
   14f04:	str	r4, [sp]
   14f08:	mov	r3, r0
   14f0c:	movw	r2, #40144	; 0x9cd0
   14f10:	movt	r2, #1
   14f14:	mov	r1, r6
   14f18:	mov	r0, #0
   14f1c:	bl	10f4c <error@plt>
   14f20:	movw	r3, #49468	; 0xc13c
   14f24:	movt	r3, #2
   14f28:	ldr	r0, [r3]
   14f2c:	bl	10e80 <_exit@plt>
   14f30:	bl	10fd0 <__errno_location@plt>
   14f34:	mov	r3, r4
   14f38:	movw	r2, #39520	; 0x9a60
   14f3c:	movt	r2, #1
   14f40:	ldr	r1, [r0]
   14f44:	mov	r0, #0
   14f48:	bl	10f4c <error@plt>
   14f4c:	b	14f20 <__assert_fail@plt+0x3e54>
   14f50:	movw	r3, #49468	; 0xc13c
   14f54:	movt	r3, #2
   14f58:	ldr	r0, [r3]
   14f5c:	bl	10e80 <_exit@plt>
   14f60:	strd	r4, [sp, #-12]!
   14f64:	str	lr, [sp, #8]
   14f68:	sub	sp, sp, #12
   14f6c:	mov	r5, r0
   14f70:	bl	10fd0 <__errno_location@plt>
   14f74:	mov	r4, r0
   14f78:	ldr	r3, [r0]
   14f7c:	str	r3, [sp]
   14f80:	str	r3, [sp, #4]
   14f84:	mov	r3, #0
   14f88:	str	r3, [r0]
   14f8c:	mov	r0, r5
   14f90:	bl	10e74 <free@plt>
   14f94:	ldr	r3, [r4]
   14f98:	clz	r3, r3
   14f9c:	lsr	r3, r3, #5
   14fa0:	add	r2, sp, #8
   14fa4:	add	r3, r2, r3, lsl #2
   14fa8:	ldr	r3, [r3, #-8]
   14fac:	str	r3, [r4]
   14fb0:	add	sp, sp, #12
   14fb4:	ldrd	r4, [sp]
   14fb8:	add	sp, sp, #8
   14fbc:	pop	{pc}		; (ldr pc, [sp], #4)
   14fc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14fc4:	strd	r6, [sp, #8]
   14fc8:	strd	r8, [sp, #16]
   14fcc:	strd	sl, [sp, #24]
   14fd0:	str	lr, [sp, #32]
   14fd4:	sub	sp, sp, #20
   14fd8:	str	r0, [sp, #8]
   14fdc:	mov	sl, r1
   14fe0:	mov	r5, r2
   14fe4:	mov	r9, r3
   14fe8:	ldr	r6, [sp, #60]	; 0x3c
   14fec:	bl	10fb8 <strlen@plt>
   14ff0:	mov	r8, r0
   14ff4:	tst	r6, #2
   14ff8:	movne	r3, #0
   14ffc:	strne	r3, [sp, #4]
   15000:	beq	15060 <__assert_fail@plt+0x3f94>
   15004:	mov	r7, r8
   15008:	mov	fp, #0
   1500c:	ldr	r3, [r9]
   15010:	cmp	r3, r7
   15014:	movcc	r8, r3
   15018:	movcc	r4, #0
   1501c:	bcc	15034 <__assert_fail@plt+0x3f68>
   15020:	cmp	r7, r3
   15024:	subcc	r4, r3, r7
   15028:	movcc	r3, r7
   1502c:	movcs	r3, r7
   15030:	movcs	r4, #0
   15034:	str	r3, [r9]
   15038:	ldr	r3, [sp, #56]	; 0x38
   1503c:	cmp	r3, #0
   15040:	beq	15224 <__assert_fail@plt+0x4158>
   15044:	cmp	r3, #1
   15048:	moveq	r7, #0
   1504c:	beq	1522c <__assert_fail@plt+0x4160>
   15050:	lsr	r7, r4, #1
   15054:	and	r4, r4, #1
   15058:	add	r4, r4, r7
   1505c:	b	1522c <__assert_fail@plt+0x4160>
   15060:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   15064:	cmp	r0, #1
   15068:	movls	r3, #0
   1506c:	strls	r3, [sp, #4]
   15070:	bls	15004 <__assert_fail@plt+0x3f38>
   15074:	mov	r2, #0
   15078:	ldr	r1, [sp, #8]
   1507c:	mov	r0, r2
   15080:	bl	1106c <mbstowcs@plt>
   15084:	mov	r4, r0
   15088:	cmn	r0, #1
   1508c:	bne	150b8 <__assert_fail@plt+0x3fec>
   15090:	tst	r6, #1
   15094:	moveq	r3, #0
   15098:	streq	r3, [sp, #4]
   1509c:	moveq	fp, r3
   150a0:	beq	15254 <__assert_fail@plt+0x4188>
   150a4:	mov	r7, r8
   150a8:	mov	r3, #0
   150ac:	str	r3, [sp, #4]
   150b0:	mov	fp, r3
   150b4:	b	1500c <__assert_fail@plt+0x3f40>
   150b8:	add	fp, r0, #1
   150bc:	lsl	r4, fp, #2
   150c0:	mov	r0, r4
   150c4:	bl	18e18 <__assert_fail@plt+0x7d4c>
   150c8:	subs	r3, r0, #0
   150cc:	str	r3, [sp, #4]
   150d0:	beq	15110 <__assert_fail@plt+0x4044>
   150d4:	mov	r2, fp
   150d8:	ldr	r1, [sp, #8]
   150dc:	ldr	r0, [sp, #4]
   150e0:	bl	1106c <mbstowcs@plt>
   150e4:	cmp	r0, #0
   150e8:	beq	15004 <__assert_fail@plt+0x3f38>
   150ec:	ldr	r7, [sp, #4]
   150f0:	add	r4, r7, r4
   150f4:	mov	r3, #0
   150f8:	str	r3, [r4, #-4]
   150fc:	ldr	r0, [r7]
   15100:	cmp	r0, r3
   15104:	beq	15318 <__assert_fail@plt+0x424c>
   15108:	mov	r4, r3
   1510c:	b	15138 <__assert_fail@plt+0x406c>
   15110:	tst	r6, #1
   15114:	moveq	fp, r3
   15118:	mvneq	r4, #0
   1511c:	beq	15254 <__assert_fail@plt+0x4188>
   15120:	mov	r7, r8
   15124:	ldr	fp, [sp, #4]
   15128:	b	1500c <__assert_fail@plt+0x3f40>
   1512c:	ldr	r0, [r7, #4]!
   15130:	cmp	r0, #0
   15134:	beq	15154 <__assert_fail@plt+0x4088>
   15138:	bl	10eec <iswprint@plt>
   1513c:	cmp	r0, #0
   15140:	bne	1512c <__assert_fail@plt+0x4060>
   15144:	movw	r3, #65533	; 0xfffd
   15148:	str	r3, [r7]
   1514c:	mov	r4, #1
   15150:	b	1512c <__assert_fail@plt+0x4060>
   15154:	mov	r1, fp
   15158:	ldr	r0, [sp, #4]
   1515c:	bl	11048 <wcswidth@plt>
   15160:	mov	r7, r0
   15164:	cmp	r4, #0
   15168:	beq	15328 <__assert_fail@plt+0x425c>
   1516c:	mov	r2, #0
   15170:	ldr	r1, [sp, #4]
   15174:	mov	r0, r2
   15178:	bl	10f40 <wcstombs@plt>
   1517c:	add	r3, r0, #1
   15180:	str	r3, [sp, #12]
   15184:	ldr	r0, [sp, #12]
   15188:	bl	18e18 <__assert_fail@plt+0x7d4c>
   1518c:	subs	fp, r0, #0
   15190:	beq	151b0 <__assert_fail@plt+0x40e4>
   15194:	ldr	r8, [r9]
   15198:	ldr	r4, [sp, #4]
   1519c:	ldr	r0, [r4]
   151a0:	cmp	r0, #0
   151a4:	beq	151f8 <__assert_fail@plt+0x412c>
   151a8:	mov	r7, #0
   151ac:	b	151dc <__assert_fail@plt+0x4110>
   151b0:	tst	r6, #1
   151b4:	mvneq	r4, #0
   151b8:	bne	1500c <__assert_fail@plt+0x3f40>
   151bc:	b	15254 <__assert_fail@plt+0x4188>
   151c0:	add	r3, r0, r7
   151c4:	cmp	r8, r3
   151c8:	bcc	15200 <__assert_fail@plt+0x4134>
   151cc:	ldr	r0, [r4, #4]!
   151d0:	mov	r7, r3
   151d4:	cmp	r0, #0
   151d8:	beq	15200 <__assert_fail@plt+0x4134>
   151dc:	bl	10e5c <wcwidth@plt>
   151e0:	cmn	r0, #1
   151e4:	bne	151c0 <__assert_fail@plt+0x40f4>
   151e8:	movw	r3, #65533	; 0xfffd
   151ec:	str	r3, [r4]
   151f0:	mov	r0, #1
   151f4:	b	151c0 <__assert_fail@plt+0x40f4>
   151f8:	mov	r7, r0
   151fc:	ldr	r4, [sp, #4]
   15200:	mov	r3, #0
   15204:	str	r3, [r4]
   15208:	ldr	r2, [sp, #12]
   1520c:	ldr	r1, [sp, #4]
   15210:	mov	r0, fp
   15214:	bl	10f40 <wcstombs@plt>
   15218:	mov	r8, r0
   1521c:	str	fp, [sp, #8]
   15220:	b	1500c <__assert_fail@plt+0x3f40>
   15224:	mov	r7, r4
   15228:	ldr	r4, [sp, #56]	; 0x38
   1522c:	and	r3, r6, #4
   15230:	cmp	r3, #0
   15234:	movne	r4, #0
   15238:	and	r6, r6, #8
   1523c:	cmp	r6, #0
   15240:	movne	r7, #0
   15244:	cmp	r5, #0
   15248:	bne	15284 <__assert_fail@plt+0x41b8>
   1524c:	add	r4, r4, r8
   15250:	add	r4, r4, r7
   15254:	ldr	r0, [sp, #4]
   15258:	bl	14f60 <__assert_fail@plt+0x3e94>
   1525c:	mov	r0, fp
   15260:	bl	14f60 <__assert_fail@plt+0x3e94>
   15264:	mov	r0, r4
   15268:	add	sp, sp, #20
   1526c:	ldrd	r4, [sp]
   15270:	ldrd	r6, [sp, #8]
   15274:	ldrd	r8, [sp, #16]
   15278:	ldrd	sl, [sp, #24]
   1527c:	add	sp, sp, #32
   15280:	pop	{pc}		; (ldr pc, [sp], #4)
   15284:	sub	r5, r5, #1
   15288:	add	r5, sl, r5
   1528c:	cmp	r4, #0
   15290:	cmpne	sl, r5
   15294:	bcs	15308 <__assert_fail@plt+0x423c>
   15298:	mov	r0, sl
   1529c:	mov	r1, #32
   152a0:	strb	r1, [r0], #1
   152a4:	sub	r3, sl, r0
   152a8:	rsb	r2, r4, #0
   152ac:	cmp	r2, r3
   152b0:	cmpne	r5, r0
   152b4:	bhi	152a0 <__assert_fail@plt+0x41d4>
   152b8:	mov	r3, #0
   152bc:	strb	r3, [r0]
   152c0:	sub	r2, r5, r0
   152c4:	cmp	r2, r8
   152c8:	movcs	r2, r8
   152cc:	ldr	r1, [sp, #8]
   152d0:	bl	10f88 <mempcpy@plt>
   152d4:	cmp	r7, #0
   152d8:	cmpne	r5, r0
   152dc:	bls	15310 <__assert_fail@plt+0x4244>
   152e0:	mov	r3, r0
   152e4:	mov	r1, #32
   152e8:	strb	r1, [r3], #1
   152ec:	sub	r2, r3, r7
   152f0:	cmp	r2, r0
   152f4:	cmpne	r5, r3
   152f8:	bhi	152e8 <__assert_fail@plt+0x421c>
   152fc:	mov	r2, #0
   15300:	strb	r2, [r3]
   15304:	b	1524c <__assert_fail@plt+0x4180>
   15308:	mov	r0, sl
   1530c:	b	152b8 <__assert_fail@plt+0x41ec>
   15310:	mov	r3, r0
   15314:	b	152fc <__assert_fail@plt+0x4230>
   15318:	mov	r1, fp
   1531c:	ldr	r0, [sp, #4]
   15320:	bl	11048 <wcswidth@plt>
   15324:	mov	r7, r0
   15328:	ldr	r3, [r9]
   1532c:	cmp	r3, r7
   15330:	addcc	r3, r8, #1
   15334:	strcc	r3, [sp, #12]
   15338:	bcc	15184 <__assert_fail@plt+0x40b8>
   1533c:	mov	fp, #0
   15340:	b	15020 <__assert_fail@plt+0x3f54>
   15344:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15348:	strd	r6, [sp, #8]
   1534c:	strd	r8, [sp, #16]
   15350:	strd	sl, [sp, #24]
   15354:	str	lr, [sp, #32]
   15358:	sub	sp, sp, #12
   1535c:	mov	fp, r0
   15360:	mov	r6, r1
   15364:	mov	sl, r2
   15368:	mov	r9, r3
   1536c:	ldr	r8, [r1]
   15370:	mov	r0, r8
   15374:	mov	r7, #0
   15378:	add	r4, r0, #1
   1537c:	mov	r1, r4
   15380:	mov	r0, r7
   15384:	bl	18e54 <__assert_fail@plt+0x7d88>
   15388:	subs	r5, r0, #0
   1538c:	beq	153c8 <__assert_fail@plt+0x42fc>
   15390:	str	r8, [r6]
   15394:	str	r9, [sp, #4]
   15398:	str	sl, [sp]
   1539c:	mov	r3, r6
   153a0:	mov	r2, r4
   153a4:	mov	r1, r5
   153a8:	mov	r0, fp
   153ac:	bl	14fc0 <__assert_fail@plt+0x3ef4>
   153b0:	cmn	r0, #1
   153b4:	beq	153f0 <__assert_fail@plt+0x4324>
   153b8:	mov	r7, r5
   153bc:	cmp	r4, r0
   153c0:	bls	15378 <__assert_fail@plt+0x42ac>
   153c4:	b	153d0 <__assert_fail@plt+0x4304>
   153c8:	mov	r0, r7
   153cc:	bl	14f60 <__assert_fail@plt+0x3e94>
   153d0:	mov	r0, r5
   153d4:	add	sp, sp, #12
   153d8:	ldrd	r4, [sp]
   153dc:	ldrd	r6, [sp, #8]
   153e0:	ldrd	r8, [sp, #16]
   153e4:	ldrd	sl, [sp, #24]
   153e8:	add	sp, sp, #32
   153ec:	pop	{pc}		; (ldr pc, [sp], #4)
   153f0:	mov	r0, r5
   153f4:	bl	14f60 <__assert_fail@plt+0x3e94>
   153f8:	mov	r5, #0
   153fc:	b	153d0 <__assert_fail@plt+0x4304>
   15400:	strd	r4, [sp, #-16]!
   15404:	str	r6, [sp, #8]
   15408:	str	lr, [sp, #12]
   1540c:	subs	r4, r0, #0
   15410:	beq	154ac <__assert_fail@plt+0x43e0>
   15414:	mov	r1, #47	; 0x2f
   15418:	mov	r0, r4
   1541c:	bl	11054 <strrchr@plt>
   15420:	subs	r5, r0, #0
   15424:	beq	15484 <__assert_fail@plt+0x43b8>
   15428:	add	r6, r5, #1
   1542c:	sub	r3, r6, r4
   15430:	cmp	r3, #6
   15434:	ble	15484 <__assert_fail@plt+0x43b8>
   15438:	mov	r2, #7
   1543c:	movw	r1, #47084	; 0xb7ec
   15440:	movt	r1, #1
   15444:	sub	r0, r5, #6
   15448:	bl	1109c <strncmp@plt>
   1544c:	cmp	r0, #0
   15450:	bne	15484 <__assert_fail@plt+0x43b8>
   15454:	mov	r2, #3
   15458:	movw	r1, #47092	; 0xb7f4
   1545c:	movt	r1, #1
   15460:	mov	r0, r6
   15464:	bl	1109c <strncmp@plt>
   15468:	cmp	r0, #0
   1546c:	movne	r4, r6
   15470:	bne	15484 <__assert_fail@plt+0x43b8>
   15474:	add	r4, r5, #4
   15478:	movw	r3, #49536	; 0xc180
   1547c:	movt	r3, #2
   15480:	str	r4, [r3]
   15484:	movw	r3, #49676	; 0xc20c
   15488:	movt	r3, #2
   1548c:	str	r4, [r3]
   15490:	movw	r3, #49540	; 0xc184
   15494:	movt	r3, #2
   15498:	str	r4, [r3]
   1549c:	ldrd	r4, [sp]
   154a0:	ldr	r6, [sp, #8]
   154a4:	add	sp, sp, #12
   154a8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ac:	movw	r3, #49552	; 0xc190
   154b0:	movt	r3, #2
   154b4:	ldr	r3, [r3]
   154b8:	mov	r2, #55	; 0x37
   154bc:	mov	r1, #1
   154c0:	movw	r0, #47028	; 0xb7b4
   154c4:	movt	r0, #1
   154c8:	bl	10ef8 <fwrite@plt>
   154cc:	bl	110a8 <abort@plt>
   154d0:	mov	r2, #0
   154d4:	mov	r3, #0
   154d8:	strd	r2, [r0]
   154dc:	strd	r2, [r0, #8]
   154e0:	strd	r2, [r0, #16]
   154e4:	strd	r2, [r0, #24]
   154e8:	strd	r2, [r0, #32]
   154ec:	strd	r2, [r0, #40]	; 0x28
   154f0:	cmp	r1, #10
   154f4:	beq	15500 <__assert_fail@plt+0x4434>
   154f8:	str	r1, [r0]
   154fc:	bx	lr
   15500:	str	r4, [sp, #-8]!
   15504:	str	lr, [sp, #4]
   15508:	bl	110a8 <abort@plt>
   1550c:	strd	r4, [sp, #-16]!
   15510:	str	r6, [sp, #8]
   15514:	str	lr, [sp, #12]
   15518:	mov	r5, r0
   1551c:	mov	r6, r1
   15520:	mov	r2, #5
   15524:	mov	r1, r0
   15528:	mov	r0, #0
   1552c:	bl	10ec8 <dcgettext@plt>
   15530:	mov	r4, r0
   15534:	cmp	r5, r0
   15538:	beq	15550 <__assert_fail@plt+0x4484>
   1553c:	mov	r0, r4
   15540:	ldrd	r4, [sp]
   15544:	ldr	r6, [sp, #8]
   15548:	add	sp, sp, #12
   1554c:	pop	{pc}		; (ldr pc, [sp], #4)
   15550:	bl	19128 <__assert_fail@plt+0x805c>
   15554:	ldrb	r3, [r0]
   15558:	bic	r3, r3, #32
   1555c:	cmp	r3, #85	; 0x55
   15560:	bne	155e4 <__assert_fail@plt+0x4518>
   15564:	ldrb	r3, [r0, #1]
   15568:	bic	r3, r3, #32
   1556c:	cmp	r3, #84	; 0x54
   15570:	bne	155a8 <__assert_fail@plt+0x44dc>
   15574:	ldrb	r3, [r0, #2]
   15578:	bic	r3, r3, #32
   1557c:	cmp	r3, #70	; 0x46
   15580:	bne	155a8 <__assert_fail@plt+0x44dc>
   15584:	ldrb	r3, [r0, #3]
   15588:	cmp	r3, #45	; 0x2d
   1558c:	bne	155a8 <__assert_fail@plt+0x44dc>
   15590:	ldrb	r3, [r0, #4]
   15594:	cmp	r3, #56	; 0x38
   15598:	bne	155a8 <__assert_fail@plt+0x44dc>
   1559c:	ldrb	r3, [r0, #5]
   155a0:	cmp	r3, #0
   155a4:	beq	155c4 <__assert_fail@plt+0x44f8>
   155a8:	movw	r4, #47180	; 0xb84c
   155ac:	movt	r4, #1
   155b0:	movw	r3, #47200	; 0xb860
   155b4:	movt	r3, #1
   155b8:	cmp	r6, #9
   155bc:	movne	r4, r3
   155c0:	b	1553c <__assert_fail@plt+0x4470>
   155c4:	ldrb	r2, [r4]
   155c8:	movw	r4, #47196	; 0xb85c
   155cc:	movt	r4, #1
   155d0:	movw	r3, #47184	; 0xb850
   155d4:	movt	r3, #1
   155d8:	cmp	r2, #96	; 0x60
   155dc:	movne	r4, r3
   155e0:	b	1553c <__assert_fail@plt+0x4470>
   155e4:	cmp	r3, #71	; 0x47
   155e8:	bne	155a8 <__assert_fail@plt+0x44dc>
   155ec:	ldrb	r3, [r0, #1]
   155f0:	bic	r3, r3, #32
   155f4:	cmp	r3, #66	; 0x42
   155f8:	bne	155a8 <__assert_fail@plt+0x44dc>
   155fc:	ldrb	r3, [r0, #2]
   15600:	cmp	r3, #49	; 0x31
   15604:	bne	155a8 <__assert_fail@plt+0x44dc>
   15608:	ldrb	r3, [r0, #3]
   1560c:	cmp	r3, #56	; 0x38
   15610:	bne	155a8 <__assert_fail@plt+0x44dc>
   15614:	ldrb	r3, [r0, #4]
   15618:	cmp	r3, #48	; 0x30
   1561c:	bne	155a8 <__assert_fail@plt+0x44dc>
   15620:	ldrb	r3, [r0, #5]
   15624:	cmp	r3, #51	; 0x33
   15628:	bne	155a8 <__assert_fail@plt+0x44dc>
   1562c:	ldrb	r3, [r0, #6]
   15630:	cmp	r3, #48	; 0x30
   15634:	bne	155a8 <__assert_fail@plt+0x44dc>
   15638:	ldrb	r3, [r0, #7]
   1563c:	cmp	r3, #0
   15640:	bne	155a8 <__assert_fail@plt+0x44dc>
   15644:	ldrb	r2, [r4]
   15648:	movw	r4, #47192	; 0xb858
   1564c:	movt	r4, #1
   15650:	movw	r3, #47188	; 0xb854
   15654:	movt	r3, #1
   15658:	cmp	r2, #96	; 0x60
   1565c:	movne	r4, r3
   15660:	b	1553c <__assert_fail@plt+0x4470>
   15664:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15668:	strd	r6, [sp, #8]
   1566c:	strd	r8, [sp, #16]
   15670:	strd	sl, [sp, #24]
   15674:	str	lr, [sp, #32]
   15678:	sub	sp, sp, #116	; 0x74
   1567c:	str	r0, [sp, #64]	; 0x40
   15680:	mov	r8, r1
   15684:	str	r2, [sp, #48]	; 0x30
   15688:	str	r3, [sp, #24]
   1568c:	ldr	r7, [sp, #152]	; 0x98
   15690:	bl	10f10 <__ctype_get_mb_cur_max@plt>
   15694:	str	r0, [sp, #76]	; 0x4c
   15698:	ldr	r3, [sp, #156]	; 0x9c
   1569c:	ubfx	r3, r3, #1, #1
   156a0:	str	r3, [sp, #32]
   156a4:	mov	r3, #1
   156a8:	str	r3, [sp, #40]	; 0x28
   156ac:	mov	r3, #0
   156b0:	str	r3, [sp, #68]	; 0x44
   156b4:	str	r3, [sp, #36]	; 0x24
   156b8:	str	r3, [sp, #28]
   156bc:	str	r3, [sp, #52]	; 0x34
   156c0:	str	r3, [sp, #60]	; 0x3c
   156c4:	str	r3, [sp, #72]	; 0x48
   156c8:	movw	r3, #47204	; 0xb864
   156cc:	movt	r3, #1
   156d0:	str	r3, [sp, #80]	; 0x50
   156d4:	mov	r9, r8
   156d8:	mov	sl, r7
   156dc:	cmp	sl, #10
   156e0:	ldrls	pc, [pc, sl, lsl #2]
   156e4:	b	158a8 <__assert_fail@plt+0x47dc>
   156e8:	andeq	r5, r1, r8, asr #14
   156ec:	andeq	r5, r1, ip, lsl r7
   156f0:	andeq	r5, r1, r0, lsl #17
   156f4:	andeq	r5, r1, r4, lsl r7
   156f8:	andeq	r5, r1, r4, lsr r8
   156fc:	andeq	r5, r1, r8, asr r7
   15700:	andeq	r6, r1, r4, lsr #22
   15704:	andeq	r5, r1, ip, lsr #17
   15708:	muleq	r1, r4, r7
   1570c:	muleq	r1, r4, r7
   15710:	muleq	r1, r4, r7
   15714:	mov	r3, #1
   15718:	str	r3, [sp, #28]
   1571c:	mov	r3, #1
   15720:	str	r3, [sp, #32]
   15724:	str	r3, [sp, #52]	; 0x34
   15728:	movw	r3, #47200	; 0xb860
   1572c:	movt	r3, #1
   15730:	str	r3, [sp, #60]	; 0x3c
   15734:	mov	fp, #0
   15738:	mov	sl, #2
   1573c:	mov	r6, #0
   15740:	ldr	r8, [sp, #64]	; 0x40
   15744:	b	15fbc <__assert_fail@plt+0x4ef0>
   15748:	mov	fp, sl
   1574c:	mov	r3, #0
   15750:	str	r3, [sp, #32]
   15754:	b	1573c <__assert_fail@plt+0x4670>
   15758:	ldr	r3, [sp, #32]
   1575c:	cmp	r3, #0
   15760:	bne	158c0 <__assert_fail@plt+0x47f4>
   15764:	cmp	r9, #0
   15768:	beq	158e4 <__assert_fail@plt+0x4818>
   1576c:	mov	r3, #34	; 0x22
   15770:	ldr	r2, [sp, #64]	; 0x40
   15774:	strb	r3, [r2]
   15778:	mov	fp, #1
   1577c:	str	fp, [sp, #28]
   15780:	str	fp, [sp, #52]	; 0x34
   15784:	movw	r3, #47180	; 0xb84c
   15788:	movt	r3, #1
   1578c:	str	r3, [sp, #60]	; 0x3c
   15790:	b	1573c <__assert_fail@plt+0x4670>
   15794:	cmp	sl, #10
   15798:	bne	157cc <__assert_fail@plt+0x4700>
   1579c:	ldr	r3, [sp, #32]
   157a0:	cmp	r3, #0
   157a4:	movne	fp, #0
   157a8:	beq	157f4 <__assert_fail@plt+0x4728>
   157ac:	ldr	r0, [sp, #168]	; 0xa8
   157b0:	bl	10fb8 <strlen@plt>
   157b4:	str	r0, [sp, #52]	; 0x34
   157b8:	ldr	r3, [sp, #168]	; 0xa8
   157bc:	str	r3, [sp, #60]	; 0x3c
   157c0:	mov	r3, #1
   157c4:	str	r3, [sp, #28]
   157c8:	b	1573c <__assert_fail@plt+0x4670>
   157cc:	mov	r1, sl
   157d0:	ldr	r0, [sp, #80]	; 0x50
   157d4:	bl	1550c <__assert_fail@plt+0x4440>
   157d8:	str	r0, [sp, #164]	; 0xa4
   157dc:	mov	r1, sl
   157e0:	movw	r0, #47200	; 0xb860
   157e4:	movt	r0, #1
   157e8:	bl	1550c <__assert_fail@plt+0x4440>
   157ec:	str	r0, [sp, #168]	; 0xa8
   157f0:	b	1579c <__assert_fail@plt+0x46d0>
   157f4:	ldr	r3, [sp, #164]	; 0xa4
   157f8:	ldrb	r3, [r3]
   157fc:	cmp	r3, #0
   15800:	beq	1582c <__assert_fail@plt+0x4760>
   15804:	ldr	r2, [sp, #164]	; 0xa4
   15808:	mov	fp, #0
   1580c:	ldr	r1, [sp, #64]	; 0x40
   15810:	cmp	r9, fp
   15814:	strbhi	r3, [r1, fp]
   15818:	add	fp, fp, #1
   1581c:	ldrb	r3, [r2, #1]!
   15820:	cmp	r3, #0
   15824:	bne	15810 <__assert_fail@plt+0x4744>
   15828:	b	157ac <__assert_fail@plt+0x46e0>
   1582c:	mov	fp, #0
   15830:	b	157ac <__assert_fail@plt+0x46e0>
   15834:	ldr	r3, [sp, #32]
   15838:	cmp	r3, #0
   1583c:	bne	1571c <__assert_fail@plt+0x4650>
   15840:	mov	r3, #1
   15844:	str	r3, [sp, #28]
   15848:	cmp	r9, #0
   1584c:	beq	15900 <__assert_fail@plt+0x4834>
   15850:	mov	r3, #39	; 0x27
   15854:	ldr	r2, [sp, #64]	; 0x40
   15858:	strb	r3, [r2]
   1585c:	mov	r3, #0
   15860:	str	r3, [sp, #32]
   15864:	mov	fp, #1
   15868:	str	fp, [sp, #52]	; 0x34
   1586c:	movw	r3, #47200	; 0xb860
   15870:	movt	r3, #1
   15874:	str	r3, [sp, #60]	; 0x3c
   15878:	mov	sl, #2
   1587c:	b	1573c <__assert_fail@plt+0x4670>
   15880:	ldr	r3, [sp, #32]
   15884:	cmp	r3, #0
   15888:	beq	15848 <__assert_fail@plt+0x477c>
   1588c:	mov	r3, #1
   15890:	str	r3, [sp, #52]	; 0x34
   15894:	movw	r3, #47200	; 0xb860
   15898:	movt	r3, #1
   1589c:	str	r3, [sp, #60]	; 0x3c
   158a0:	mov	fp, #0
   158a4:	b	1573c <__assert_fail@plt+0x4670>
   158a8:	bl	110a8 <abort@plt>
   158ac:	mov	fp, #0
   158b0:	str	fp, [sp, #32]
   158b4:	mov	r3, #1
   158b8:	str	r3, [sp, #28]
   158bc:	b	1573c <__assert_fail@plt+0x4670>
   158c0:	ldr	r3, [sp, #32]
   158c4:	str	r3, [sp, #28]
   158c8:	mov	r3, #1
   158cc:	str	r3, [sp, #52]	; 0x34
   158d0:	movw	r3, #47180	; 0xb84c
   158d4:	movt	r3, #1
   158d8:	str	r3, [sp, #60]	; 0x3c
   158dc:	mov	fp, #0
   158e0:	b	1573c <__assert_fail@plt+0x4670>
   158e4:	mov	fp, #1
   158e8:	str	fp, [sp, #28]
   158ec:	str	fp, [sp, #52]	; 0x34
   158f0:	movw	r3, #47180	; 0xb84c
   158f4:	movt	r3, #1
   158f8:	str	r3, [sp, #60]	; 0x3c
   158fc:	b	1573c <__assert_fail@plt+0x4670>
   15900:	mov	r3, #0
   15904:	str	r3, [sp, #32]
   15908:	mov	fp, #1
   1590c:	str	fp, [sp, #52]	; 0x34
   15910:	movw	r3, #47200	; 0xb860
   15914:	movt	r3, #1
   15918:	str	r3, [sp, #60]	; 0x3c
   1591c:	mov	sl, #2
   15920:	b	1573c <__assert_fail@plt+0x4670>
   15924:	mov	r3, r2
   15928:	add	r4, r6, r2
   1592c:	ldr	r2, [sp, #24]
   15930:	cmp	r3, #1
   15934:	movls	r3, #0
   15938:	movhi	r3, #1
   1593c:	cmn	r2, #1
   15940:	movne	r3, #0
   15944:	cmp	r3, #0
   15948:	beq	15958 <__assert_fail@plt+0x488c>
   1594c:	ldr	r0, [sp, #48]	; 0x30
   15950:	bl	10fb8 <strlen@plt>
   15954:	str	r0, [sp, #24]
   15958:	ldr	r3, [sp, #24]
   1595c:	cmp	r4, r3
   15960:	bhi	16b4c <__assert_fail@plt+0x5a80>
   15964:	ldr	r3, [sp, #48]	; 0x30
   15968:	add	r4, r3, r6
   1596c:	ldr	r2, [sp, #52]	; 0x34
   15970:	ldr	r1, [sp, #60]	; 0x3c
   15974:	mov	r0, r4
   15978:	bl	10eb0 <memcmp@plt>
   1597c:	cmp	r0, #0
   15980:	bne	16b4c <__assert_fail@plt+0x5a80>
   15984:	ldr	r3, [sp, #32]
   15988:	cmp	r3, #0
   1598c:	bne	15b9c <__assert_fail@plt+0x4ad0>
   15990:	ldrb	r4, [r4]
   15994:	cmp	r4, #126	; 0x7e
   15998:	ldrls	pc, [pc, r4, lsl #2]
   1599c:	b	16450 <__assert_fail@plt+0x5384>
   159a0:	andeq	r5, r1, r0, ror #23
   159a4:	andeq	r6, r1, r0, asr r4
   159a8:	andeq	r6, r1, r0, asr r4
   159ac:	andeq	r6, r1, r0, asr r4
   159b0:	andeq	r6, r1, r0, asr r4
   159b4:	andeq	r6, r1, r0, asr r4
   159b8:	andeq	r6, r1, r0, asr r4
   159bc:	strdeq	r6, [r1], -r8
   159c0:	andeq	r5, r1, ip, ror lr
   159c4:	andeq	r6, r1, r0, lsr #4
   159c8:	andeq	r6, r1, ip, asr #5
   159cc:	andeq	r6, r1, r4, lsr r2
   159d0:	muleq	r1, r0, lr
   159d4:	andeq	r5, r1, r4, lsr #29
   159d8:	andeq	r6, r1, r0, asr r4
   159dc:	andeq	r6, r1, r0, asr r4
   159e0:	andeq	r6, r1, r0, asr r4
   159e4:	andeq	r6, r1, r0, asr r4
   159e8:	andeq	r6, r1, r0, asr r4
   159ec:	andeq	r6, r1, r0, asr r4
   159f0:	andeq	r6, r1, r0, asr r4
   159f4:	andeq	r6, r1, r0, asr r4
   159f8:	andeq	r6, r1, r0, asr r4
   159fc:	andeq	r6, r1, r0, asr r4
   15a00:	andeq	r6, r1, r0, asr r4
   15a04:	andeq	r6, r1, r0, asr r4
   15a08:	andeq	r6, r1, r0, asr r4
   15a0c:	andeq	r6, r1, r0, asr r4
   15a10:	andeq	r6, r1, r0, asr r4
   15a14:	andeq	r6, r1, r0, asr r4
   15a18:	andeq	r6, r1, r0, asr r4
   15a1c:	andeq	r6, r1, r0, asr r4
   15a20:	andeq	r6, r1, ip, ror #6
   15a24:	muleq	r1, r0, r3
   15a28:	muleq	r1, r0, r3
   15a2c:	andeq	r6, r1, r8, lsr #6
   15a30:	muleq	r1, r0, r3
   15a34:			; <UNDEFINED> instruction: 0x000168b0
   15a38:	muleq	r1, r0, r3
   15a3c:			; <UNDEFINED> instruction: 0x000163b0
   15a40:	muleq	r1, r0, r3
   15a44:	muleq	r1, r0, r3
   15a48:	muleq	r1, r0, r3
   15a4c:			; <UNDEFINED> instruction: 0x000168b0
   15a50:			; <UNDEFINED> instruction: 0x000168b0
   15a54:			; <UNDEFINED> instruction: 0x000168b0
   15a58:			; <UNDEFINED> instruction: 0x000168b0
   15a5c:			; <UNDEFINED> instruction: 0x000168b0
   15a60:			; <UNDEFINED> instruction: 0x000168b0
   15a64:			; <UNDEFINED> instruction: 0x000168b0
   15a68:			; <UNDEFINED> instruction: 0x000168b0
   15a6c:			; <UNDEFINED> instruction: 0x000168b0
   15a70:			; <UNDEFINED> instruction: 0x000168b0
   15a74:			; <UNDEFINED> instruction: 0x000168b0
   15a78:			; <UNDEFINED> instruction: 0x000168b0
   15a7c:			; <UNDEFINED> instruction: 0x000168b0
   15a80:			; <UNDEFINED> instruction: 0x000168b0
   15a84:			; <UNDEFINED> instruction: 0x000168b0
   15a88:			; <UNDEFINED> instruction: 0x000168b0
   15a8c:	muleq	r1, r0, r3
   15a90:	muleq	r1, r0, r3
   15a94:	muleq	r1, r0, r3
   15a98:	muleq	r1, r0, r3
   15a9c:	andeq	r5, r1, r0, lsl sp
   15aa0:	andeq	r6, r1, r0, asr r4
   15aa4:			; <UNDEFINED> instruction: 0x000168b0
   15aa8:			; <UNDEFINED> instruction: 0x000168b0
   15aac:			; <UNDEFINED> instruction: 0x000168b0
   15ab0:			; <UNDEFINED> instruction: 0x000168b0
   15ab4:			; <UNDEFINED> instruction: 0x000168b0
   15ab8:			; <UNDEFINED> instruction: 0x000168b0
   15abc:			; <UNDEFINED> instruction: 0x000168b0
   15ac0:			; <UNDEFINED> instruction: 0x000168b0
   15ac4:			; <UNDEFINED> instruction: 0x000168b0
   15ac8:			; <UNDEFINED> instruction: 0x000168b0
   15acc:			; <UNDEFINED> instruction: 0x000168b0
   15ad0:			; <UNDEFINED> instruction: 0x000168b0
   15ad4:			; <UNDEFINED> instruction: 0x000168b0
   15ad8:			; <UNDEFINED> instruction: 0x000168b0
   15adc:			; <UNDEFINED> instruction: 0x000168b0
   15ae0:			; <UNDEFINED> instruction: 0x000168b0
   15ae4:			; <UNDEFINED> instruction: 0x000168b0
   15ae8:			; <UNDEFINED> instruction: 0x000168b0
   15aec:			; <UNDEFINED> instruction: 0x000168b0
   15af0:			; <UNDEFINED> instruction: 0x000168b0
   15af4:			; <UNDEFINED> instruction: 0x000168b0
   15af8:			; <UNDEFINED> instruction: 0x000168b0
   15afc:			; <UNDEFINED> instruction: 0x000168b0
   15b00:			; <UNDEFINED> instruction: 0x000168b0
   15b04:			; <UNDEFINED> instruction: 0x000168b0
   15b08:			; <UNDEFINED> instruction: 0x000168b0
   15b0c:	muleq	r1, r0, r3
   15b10:	andeq	r6, r1, r8, asr #4
   15b14:			; <UNDEFINED> instruction: 0x000168b0
   15b18:	muleq	r1, r0, r3
   15b1c:			; <UNDEFINED> instruction: 0x000168b0
   15b20:	muleq	r1, r0, r3
   15b24:			; <UNDEFINED> instruction: 0x000168b0
   15b28:			; <UNDEFINED> instruction: 0x000168b0
   15b2c:			; <UNDEFINED> instruction: 0x000168b0
   15b30:			; <UNDEFINED> instruction: 0x000168b0
   15b34:			; <UNDEFINED> instruction: 0x000168b0
   15b38:			; <UNDEFINED> instruction: 0x000168b0
   15b3c:			; <UNDEFINED> instruction: 0x000168b0
   15b40:			; <UNDEFINED> instruction: 0x000168b0
   15b44:			; <UNDEFINED> instruction: 0x000168b0
   15b48:			; <UNDEFINED> instruction: 0x000168b0
   15b4c:			; <UNDEFINED> instruction: 0x000168b0
   15b50:			; <UNDEFINED> instruction: 0x000168b0
   15b54:			; <UNDEFINED> instruction: 0x000168b0
   15b58:			; <UNDEFINED> instruction: 0x000168b0
   15b5c:			; <UNDEFINED> instruction: 0x000168b0
   15b60:			; <UNDEFINED> instruction: 0x000168b0
   15b64:			; <UNDEFINED> instruction: 0x000168b0
   15b68:			; <UNDEFINED> instruction: 0x000168b0
   15b6c:			; <UNDEFINED> instruction: 0x000168b0
   15b70:			; <UNDEFINED> instruction: 0x000168b0
   15b74:			; <UNDEFINED> instruction: 0x000168b0
   15b78:			; <UNDEFINED> instruction: 0x000168b0
   15b7c:			; <UNDEFINED> instruction: 0x000168b0
   15b80:			; <UNDEFINED> instruction: 0x000168b0
   15b84:			; <UNDEFINED> instruction: 0x000168b0
   15b88:			; <UNDEFINED> instruction: 0x000168b0
   15b8c:	andeq	r6, r1, r8, lsl #6
   15b90:	muleq	r1, r0, r3
   15b94:	andeq	r6, r1, r8, lsl #6
   15b98:	andeq	r6, r1, r8, lsr #6
   15b9c:	mov	r8, r9
   15ba0:	mov	r7, sl
   15ba4:	b	16aa4 <__assert_fail@plt+0x59d8>
   15ba8:	ldr	r3, [sp, #28]
   15bac:	cmp	r3, #0
   15bb0:	bne	15bd0 <__assert_fail@plt+0x4b04>
   15bb4:	ldr	r3, [sp, #156]	; 0x9c
   15bb8:	tst	r3, #1
   15bbc:	bne	15fb8 <__assert_fail@plt+0x4eec>
   15bc0:	ldr	r3, [sp, #28]
   15bc4:	str	r3, [sp, #44]	; 0x2c
   15bc8:	mov	r5, r3
   15bcc:	b	15ed8 <__assert_fail@plt+0x4e0c>
   15bd0:	ldr	r3, [sp, #32]
   15bd4:	cmp	r3, #0
   15bd8:	bne	16a54 <__assert_fail@plt+0x5988>
   15bdc:	str	r3, [sp, #44]	; 0x2c
   15be0:	ldr	r3, [sp, #36]	; 0x24
   15be4:	eor	r3, r3, #1
   15be8:	cmp	sl, #2
   15bec:	movne	r3, #0
   15bf0:	andeq	r3, r3, #1
   15bf4:	cmp	r3, #0
   15bf8:	beq	15c50 <__assert_fail@plt+0x4b84>
   15bfc:	cmp	r9, fp
   15c00:	movhi	r2, #39	; 0x27
   15c04:	strbhi	r2, [r8, fp]
   15c08:	add	r2, fp, #1
   15c0c:	cmp	r9, r2
   15c10:	movhi	r1, #36	; 0x24
   15c14:	strbhi	r1, [r8, r2]
   15c18:	add	r2, fp, #2
   15c1c:	cmp	r9, r2
   15c20:	movhi	r1, #39	; 0x27
   15c24:	strbhi	r1, [r8, r2]
   15c28:	add	r2, fp, #3
   15c2c:	cmp	r9, r2
   15c30:	bls	16b10 <__assert_fail@plt+0x5a44>
   15c34:	mov	r1, #92	; 0x5c
   15c38:	strb	r1, [r8, r2]
   15c3c:	add	fp, fp, #4
   15c40:	str	r3, [sp, #36]	; 0x24
   15c44:	mov	r5, #0
   15c48:	mov	r4, #48	; 0x30
   15c4c:	b	15f24 <__assert_fail@plt+0x4e58>
   15c50:	cmp	r9, fp
   15c54:	bhi	15c7c <__assert_fail@plt+0x4bb0>
   15c58:	add	r1, fp, #1
   15c5c:	ldr	r2, [sp, #56]	; 0x38
   15c60:	cmp	r2, #0
   15c64:	bne	15ca4 <__assert_fail@plt+0x4bd8>
   15c68:	mov	r3, r5
   15c6c:	ldr	r5, [sp, #56]	; 0x38
   15c70:	mov	fp, r1
   15c74:	mov	r4, #48	; 0x30
   15c78:	b	15ed8 <__assert_fail@plt+0x4e0c>
   15c7c:	mov	r2, #92	; 0x5c
   15c80:	strb	r2, [r8, fp]
   15c84:	add	r1, fp, #1
   15c88:	ldr	r2, [sp, #56]	; 0x38
   15c8c:	cmp	r2, #0
   15c90:	moveq	r3, r5
   15c94:	moveq	r5, r2
   15c98:	moveq	fp, r1
   15c9c:	moveq	r4, #48	; 0x30
   15ca0:	beq	15f24 <__assert_fail@plt+0x4e58>
   15ca4:	add	r2, r6, #1
   15ca8:	ldr	r0, [sp, #24]
   15cac:	cmp	r2, r0
   15cb0:	bcs	15ccc <__assert_fail@plt+0x4c00>
   15cb4:	ldr	r0, [sp, #48]	; 0x30
   15cb8:	ldrb	r2, [r0, r2]
   15cbc:	sub	r2, r2, #48	; 0x30
   15cc0:	uxtb	r2, r2
   15cc4:	cmp	r2, #9
   15cc8:	bls	15ce4 <__assert_fail@plt+0x4c18>
   15ccc:	mov	r2, r3
   15cd0:	mov	r3, r5
   15cd4:	mov	r5, r2
   15cd8:	mov	fp, r1
   15cdc:	mov	r4, #48	; 0x30
   15ce0:	b	15efc <__assert_fail@plt+0x4e30>
   15ce4:	cmp	r9, r1
   15ce8:	movhi	r2, #48	; 0x30
   15cec:	strbhi	r2, [r8, r1]
   15cf0:	add	r2, fp, #2
   15cf4:	cmp	r9, r2
   15cf8:	movhi	r1, #48	; 0x30
   15cfc:	strbhi	r1, [r8, r2]
   15d00:	add	r1, fp, #3
   15d04:	b	15ccc <__assert_fail@plt+0x4c00>
   15d08:	mov	r3, #0
   15d0c:	str	r3, [sp, #44]	; 0x2c
   15d10:	cmp	sl, #2
   15d14:	beq	15d30 <__assert_fail@plt+0x4c64>
   15d18:	cmp	sl, #5
   15d1c:	beq	15d48 <__assert_fail@plt+0x4c7c>
   15d20:	mov	r5, #0
   15d24:	mov	r3, r5
   15d28:	mov	r4, #63	; 0x3f
   15d2c:	b	15ed8 <__assert_fail@plt+0x4e0c>
   15d30:	ldr	r3, [sp, #32]
   15d34:	cmp	r3, #0
   15d38:	bne	16a60 <__assert_fail@plt+0x5994>
   15d3c:	mov	r5, r3
   15d40:	mov	r4, #63	; 0x3f
   15d44:	b	16440 <__assert_fail@plt+0x5374>
   15d48:	ldr	r3, [sp, #156]	; 0x9c
   15d4c:	tst	r3, #4
   15d50:	beq	16878 <__assert_fail@plt+0x57ac>
   15d54:	add	r2, r6, #2
   15d58:	ldr	r3, [sp, #24]
   15d5c:	cmp	r2, r3
   15d60:	bcs	16888 <__assert_fail@plt+0x57bc>
   15d64:	ldr	r3, [sp, #48]	; 0x30
   15d68:	add	r3, r3, r6
   15d6c:	ldrb	r4, [r3, #1]
   15d70:	cmp	r4, #63	; 0x3f
   15d74:	movne	r5, #0
   15d78:	movne	r3, r5
   15d7c:	movne	r4, #63	; 0x3f
   15d80:	bne	15ed8 <__assert_fail@plt+0x4e0c>
   15d84:	ldr	r3, [sp, #48]	; 0x30
   15d88:	ldrb	r1, [r3, r2]
   15d8c:	sub	r3, r1, #33	; 0x21
   15d90:	cmp	r3, #29
   15d94:	ldrls	pc, [pc, r3, lsl #2]
   15d98:	b	16898 <__assert_fail@plt+0x57cc>
   15d9c:	andeq	r5, r1, r4, lsl lr
   15da0:	muleq	r1, r8, r8
   15da4:	muleq	r1, r8, r8
   15da8:	muleq	r1, r8, r8
   15dac:	muleq	r1, r8, r8
   15db0:	muleq	r1, r8, r8
   15db4:	andeq	r5, r1, r4, lsl lr
   15db8:	andeq	r5, r1, r4, lsl lr
   15dbc:	andeq	r5, r1, r4, lsl lr
   15dc0:	muleq	r1, r8, r8
   15dc4:	muleq	r1, r8, r8
   15dc8:	muleq	r1, r8, r8
   15dcc:	andeq	r5, r1, r4, lsl lr
   15dd0:	muleq	r1, r8, r8
   15dd4:	andeq	r5, r1, r4, lsl lr
   15dd8:	muleq	r1, r8, r8
   15ddc:	muleq	r1, r8, r8
   15de0:	muleq	r1, r8, r8
   15de4:	muleq	r1, r8, r8
   15de8:	muleq	r1, r8, r8
   15dec:	muleq	r1, r8, r8
   15df0:	muleq	r1, r8, r8
   15df4:	muleq	r1, r8, r8
   15df8:	muleq	r1, r8, r8
   15dfc:	muleq	r1, r8, r8
   15e00:	muleq	r1, r8, r8
   15e04:	muleq	r1, r8, r8
   15e08:	andeq	r5, r1, r4, lsl lr
   15e0c:	andeq	r5, r1, r4, lsl lr
   15e10:	andeq	r5, r1, r4, lsl lr
   15e14:	ldr	r3, [sp, #32]
   15e18:	cmp	r3, #0
   15e1c:	bne	16b04 <__assert_fail@plt+0x5a38>
   15e20:	cmp	r9, fp
   15e24:	movhi	r3, #63	; 0x3f
   15e28:	strbhi	r3, [r8, fp]
   15e2c:	add	r3, fp, #1
   15e30:	cmp	r9, r3
   15e34:	movhi	r0, #34	; 0x22
   15e38:	strbhi	r0, [r8, r3]
   15e3c:	add	r3, fp, #2
   15e40:	cmp	r9, r3
   15e44:	movhi	r0, #34	; 0x22
   15e48:	strbhi	r0, [r8, r3]
   15e4c:	add	r3, fp, #3
   15e50:	cmp	r9, r3
   15e54:	movhi	r0, #63	; 0x3f
   15e58:	strbhi	r0, [r8, r3]
   15e5c:	add	fp, fp, #4
   15e60:	ldr	r3, [sp, #32]
   15e64:	mov	r5, r3
   15e68:	mov	r4, r1
   15e6c:	mov	r6, r2
   15e70:	b	15ed8 <__assert_fail@plt+0x4e0c>
   15e74:	mov	r3, #0
   15e78:	str	r3, [sp, #44]	; 0x2c
   15e7c:	mov	r4, #8
   15e80:	mov	r3, #98	; 0x62
   15e84:	b	15ec4 <__assert_fail@plt+0x4df8>
   15e88:	mov	r3, #0
   15e8c:	str	r3, [sp, #44]	; 0x2c
   15e90:	mov	r4, #12
   15e94:	mov	r3, #102	; 0x66
   15e98:	b	15ec4 <__assert_fail@plt+0x4df8>
   15e9c:	mov	r3, #0
   15ea0:	str	r3, [sp, #44]	; 0x2c
   15ea4:	mov	r4, #13
   15ea8:	mov	r3, #114	; 0x72
   15eac:	ldr	r2, [sp, #32]
   15eb0:	cmp	sl, #2
   15eb4:	movne	r2, #0
   15eb8:	andeq	r2, r2, #1
   15ebc:	cmp	r2, #0
   15ec0:	bne	162e4 <__assert_fail@plt+0x5218>
   15ec4:	ldr	r2, [sp, #28]
   15ec8:	cmp	r2, #0
   15ecc:	bne	168cc <__assert_fail@plt+0x5800>
   15ed0:	mov	r5, r2
   15ed4:	mov	r3, r2
   15ed8:	ldr	r2, [sp, #28]
   15edc:	eor	r2, r2, #1
   15ee0:	cmp	sl, #2
   15ee4:	orreq	r2, r2, #1
   15ee8:	eor	r2, r2, #1
   15eec:	ldr	r1, [sp, #32]
   15ef0:	orr	r2, r1, r2
   15ef4:	tst	r2, #255	; 0xff
   15ef8:	beq	15f24 <__assert_fail@plt+0x4e58>
   15efc:	ldr	r2, [sp, #160]	; 0xa0
   15f00:	cmp	r2, #0
   15f04:	beq	15f24 <__assert_fail@plt+0x4e58>
   15f08:	ubfx	r1, r4, #5, #8
   15f0c:	and	r2, r4, #31
   15f10:	ldr	r0, [sp, #160]	; 0xa0
   15f14:	ldr	r1, [r0, r1, lsl #2]
   15f18:	lsr	r2, r1, r2
   15f1c:	tst	r2, #1
   15f20:	bne	15f30 <__assert_fail@plt+0x4e64>
   15f24:	ldr	r2, [sp, #44]	; 0x2c
   15f28:	cmp	r2, #0
   15f2c:	beq	16284 <__assert_fail@plt+0x51b8>
   15f30:	ldr	r3, [sp, #32]
   15f34:	cmp	r3, #0
   15f38:	bne	16a84 <__assert_fail@plt+0x59b8>
   15f3c:	ldr	r3, [sp, #36]	; 0x24
   15f40:	eor	r3, r3, #1
   15f44:	cmp	sl, #2
   15f48:	movne	r3, #0
   15f4c:	andeq	r3, r3, #1
   15f50:	cmp	r3, #0
   15f54:	beq	15f8c <__assert_fail@plt+0x4ec0>
   15f58:	cmp	r9, fp
   15f5c:	movhi	r2, #39	; 0x27
   15f60:	strbhi	r2, [r8, fp]
   15f64:	add	r2, fp, #1
   15f68:	cmp	r9, r2
   15f6c:	movhi	r1, #36	; 0x24
   15f70:	strbhi	r1, [r8, r2]
   15f74:	add	r2, fp, #2
   15f78:	cmp	r9, r2
   15f7c:	movhi	r1, #39	; 0x27
   15f80:	strbhi	r1, [r8, r2]
   15f84:	add	fp, fp, #3
   15f88:	str	r3, [sp, #36]	; 0x24
   15f8c:	cmp	r9, fp
   15f90:	movhi	r3, #92	; 0x5c
   15f94:	strbhi	r3, [r8, fp]
   15f98:	add	fp, fp, #1
   15f9c:	cmp	fp, r9
   15fa0:	strbcc	r4, [r8, fp]
   15fa4:	add	fp, fp, #1
   15fa8:	cmp	r5, #0
   15fac:	ldr	r3, [sp, #40]	; 0x28
   15fb0:	moveq	r3, r5
   15fb4:	str	r3, [sp, #40]	; 0x28
   15fb8:	add	r6, r6, #1
   15fbc:	ldr	r3, [sp, #24]
   15fc0:	cmn	r3, #1
   15fc4:	beq	168f4 <__assert_fail@plt+0x5828>
   15fc8:	ldr	r3, [sp, #24]
   15fcc:	subs	r5, r3, r6
   15fd0:	movne	r5, #1
   15fd4:	cmp	r5, #0
   15fd8:	beq	16908 <__assert_fail@plt+0x583c>
   15fdc:	ldr	r3, [sp, #28]
   15fe0:	cmp	sl, #2
   15fe4:	moveq	r3, #0
   15fe8:	andne	r3, r3, #1
   15fec:	str	r3, [sp, #56]	; 0x38
   15ff0:	ldr	r2, [sp, #52]	; 0x34
   15ff4:	adds	r7, r2, #0
   15ff8:	movne	r7, #1
   15ffc:	ands	r3, r3, r7
   16000:	str	r3, [sp, #44]	; 0x2c
   16004:	bne	15924 <__assert_fail@plt+0x4858>
   16008:	ldr	r3, [sp, #48]	; 0x30
   1600c:	ldrb	r4, [r3, r6]
   16010:	cmp	r4, #126	; 0x7e
   16014:	ldrls	pc, [pc, r4, lsl #2]
   16018:	b	16450 <__assert_fail@plt+0x5384>
   1601c:	andeq	r5, r1, r8, lsr #23
   16020:	andeq	r6, r1, r0, asr r4
   16024:	andeq	r6, r1, r0, asr r4
   16028:	andeq	r6, r1, r0, asr r4
   1602c:	andeq	r6, r1, r0, asr r4
   16030:	andeq	r6, r1, r0, asr r4
   16034:	andeq	r6, r1, r0, asr r4
   16038:	strdeq	r6, [r1], -r0
   1603c:	andeq	r5, r1, ip, ror lr
   16040:	andeq	r6, r1, r0, lsr #4
   16044:	andeq	r6, r1, r4, asr #5
   16048:	andeq	r6, r1, r4, lsr r2
   1604c:	muleq	r1, r0, lr
   16050:	andeq	r5, r1, r4, lsr #29
   16054:	andeq	r6, r1, r0, asr r4
   16058:	andeq	r6, r1, r0, asr r4
   1605c:	andeq	r6, r1, r0, asr r4
   16060:	andeq	r6, r1, r0, asr r4
   16064:	andeq	r6, r1, r0, asr r4
   16068:	andeq	r6, r1, r0, asr r4
   1606c:	andeq	r6, r1, r0, asr r4
   16070:	andeq	r6, r1, r0, asr r4
   16074:	andeq	r6, r1, r0, asr r4
   16078:	andeq	r6, r1, r0, asr r4
   1607c:	andeq	r6, r1, r0, asr r4
   16080:	andeq	r6, r1, r0, asr r4
   16084:	andeq	r6, r1, r0, asr r4
   16088:	andeq	r6, r1, r0, asr r4
   1608c:	andeq	r6, r1, r0, asr r4
   16090:	andeq	r6, r1, r0, asr r4
   16094:	andeq	r6, r1, r0, asr r4
   16098:	andeq	r6, r1, r0, asr r4
   1609c:	andeq	r6, r1, ip, ror #6
   160a0:	andeq	r6, r1, r8, ror #6
   160a4:	andeq	r6, r1, r8, ror #6
   160a8:	andeq	r6, r1, r8, lsr #6
   160ac:	andeq	r6, r1, r8, ror #6
   160b0:	andeq	r6, r1, r0, ror r8
   160b4:	andeq	r6, r1, r8, ror #6
   160b8:			; <UNDEFINED> instruction: 0x000163b0
   160bc:	andeq	r6, r1, r8, ror #6
   160c0:	andeq	r6, r1, r8, ror #6
   160c4:	andeq	r6, r1, r8, ror #6
   160c8:	andeq	r6, r1, r0, ror r8
   160cc:	andeq	r6, r1, r0, ror r8
   160d0:	andeq	r6, r1, r0, ror r8
   160d4:	andeq	r6, r1, r0, ror r8
   160d8:	andeq	r6, r1, r0, ror r8
   160dc:	andeq	r6, r1, r0, ror r8
   160e0:	andeq	r6, r1, r0, ror r8
   160e4:	andeq	r6, r1, r0, ror r8
   160e8:	andeq	r6, r1, r0, ror r8
   160ec:	andeq	r6, r1, r0, ror r8
   160f0:	andeq	r6, r1, r0, ror r8
   160f4:	andeq	r6, r1, r0, ror r8
   160f8:	andeq	r6, r1, r0, ror r8
   160fc:	andeq	r6, r1, r0, ror r8
   16100:	andeq	r6, r1, r0, ror r8
   16104:	andeq	r6, r1, r0, ror r8
   16108:	andeq	r6, r1, r8, ror #6
   1610c:	andeq	r6, r1, r8, ror #6
   16110:	andeq	r6, r1, r8, ror #6
   16114:	andeq	r6, r1, r8, ror #6
   16118:	andeq	r5, r1, r0, lsl sp
   1611c:	andeq	r6, r1, r0, asr r4
   16120:	andeq	r6, r1, r0, ror r8
   16124:	andeq	r6, r1, r0, ror r8
   16128:	andeq	r6, r1, r0, ror r8
   1612c:	andeq	r6, r1, r0, ror r8
   16130:	andeq	r6, r1, r0, ror r8
   16134:	andeq	r6, r1, r0, ror r8
   16138:	andeq	r6, r1, r0, ror r8
   1613c:	andeq	r6, r1, r0, ror r8
   16140:	andeq	r6, r1, r0, ror r8
   16144:	andeq	r6, r1, r0, ror r8
   16148:	andeq	r6, r1, r0, ror r8
   1614c:	andeq	r6, r1, r0, ror r8
   16150:	andeq	r6, r1, r0, ror r8
   16154:	andeq	r6, r1, r0, ror r8
   16158:	andeq	r6, r1, r0, ror r8
   1615c:	andeq	r6, r1, r0, ror r8
   16160:	andeq	r6, r1, r0, ror r8
   16164:	andeq	r6, r1, r0, ror r8
   16168:	andeq	r6, r1, r0, ror r8
   1616c:	andeq	r6, r1, r0, ror r8
   16170:	andeq	r6, r1, r0, ror r8
   16174:	andeq	r6, r1, r0, ror r8
   16178:	andeq	r6, r1, r0, ror r8
   1617c:	andeq	r6, r1, r0, ror r8
   16180:	andeq	r6, r1, r0, ror r8
   16184:	andeq	r6, r1, r0, ror r8
   16188:	andeq	r6, r1, r8, ror #6
   1618c:	andeq	r6, r1, r8, asr #4
   16190:	andeq	r6, r1, r0, ror r8
   16194:	andeq	r6, r1, r8, ror #6
   16198:	andeq	r6, r1, r0, ror r8
   1619c:	andeq	r6, r1, r8, ror #6
   161a0:	andeq	r6, r1, r0, ror r8
   161a4:	andeq	r6, r1, r0, ror r8
   161a8:	andeq	r6, r1, r0, ror r8
   161ac:	andeq	r6, r1, r0, ror r8
   161b0:	andeq	r6, r1, r0, ror r8
   161b4:	andeq	r6, r1, r0, ror r8
   161b8:	andeq	r6, r1, r0, ror r8
   161bc:	andeq	r6, r1, r0, ror r8
   161c0:	andeq	r6, r1, r0, ror r8
   161c4:	andeq	r6, r1, r0, ror r8
   161c8:	andeq	r6, r1, r0, ror r8
   161cc:	andeq	r6, r1, r0, ror r8
   161d0:	andeq	r6, r1, r0, ror r8
   161d4:	andeq	r6, r1, r0, ror r8
   161d8:	andeq	r6, r1, r0, ror r8
   161dc:	andeq	r6, r1, r0, ror r8
   161e0:	andeq	r6, r1, r0, ror r8
   161e4:	andeq	r6, r1, r0, ror r8
   161e8:	andeq	r6, r1, r0, ror r8
   161ec:	andeq	r6, r1, r0, ror r8
   161f0:	andeq	r6, r1, r0, ror r8
   161f4:	andeq	r6, r1, r0, ror r8
   161f8:	andeq	r6, r1, r0, ror r8
   161fc:	andeq	r6, r1, r0, ror r8
   16200:	andeq	r6, r1, r0, ror r8
   16204:	andeq	r6, r1, r0, ror r8
   16208:	andeq	r6, r1, r8, lsl #6
   1620c:	andeq	r6, r1, r8, ror #6
   16210:	andeq	r6, r1, r8, lsl #6
   16214:	andeq	r6, r1, r8, lsr #6
   16218:	mov	r3, #0
   1621c:	str	r3, [sp, #44]	; 0x2c
   16220:	mov	r4, #9
   16224:	mov	r3, #116	; 0x74
   16228:	b	15eac <__assert_fail@plt+0x4de0>
   1622c:	mov	r3, #0
   16230:	str	r3, [sp, #44]	; 0x2c
   16234:	mov	r4, #11
   16238:	mov	r3, #118	; 0x76
   1623c:	b	15ec4 <__assert_fail@plt+0x4df8>
   16240:	mov	r3, #0
   16244:	str	r3, [sp, #44]	; 0x2c
   16248:	cmp	sl, #2
   1624c:	beq	16270 <__assert_fail@plt+0x51a4>
   16250:	ldr	r3, [sp, #28]
   16254:	ldr	r2, [sp, #32]
   16258:	and	r3, r3, r2
   1625c:	tst	r7, r3
   16260:	bne	168e4 <__assert_fail@plt+0x5818>
   16264:	mov	r4, #92	; 0x5c
   16268:	mov	r3, r4
   1626c:	b	15ec4 <__assert_fail@plt+0x4df8>
   16270:	ldr	r3, [sp, #32]
   16274:	cmp	r3, #0
   16278:	bne	16a6c <__assert_fail@plt+0x59a0>
   1627c:	mov	r5, r3
   16280:	mov	r4, #92	; 0x5c
   16284:	eor	r3, r3, #1
   16288:	ldr	r2, [sp, #36]	; 0x24
   1628c:	and	r3, r3, r2
   16290:	tst	r3, #255	; 0xff
   16294:	beq	15f9c <__assert_fail@plt+0x4ed0>
   16298:	cmp	r9, fp
   1629c:	movhi	r3, #39	; 0x27
   162a0:	strbhi	r3, [r8, fp]
   162a4:	add	r3, fp, #1
   162a8:	cmp	r9, r3
   162ac:	movhi	r2, #39	; 0x27
   162b0:	strbhi	r2, [r8, r3]
   162b4:	add	fp, fp, #2
   162b8:	mov	r3, #0
   162bc:	str	r3, [sp, #36]	; 0x24
   162c0:	b	15f9c <__assert_fail@plt+0x4ed0>
   162c4:	mov	r3, #110	; 0x6e
   162c8:	b	15eac <__assert_fail@plt+0x4de0>
   162cc:	mov	r3, #110	; 0x6e
   162d0:	b	15eac <__assert_fail@plt+0x4de0>
   162d4:	mov	r3, #0
   162d8:	str	r3, [sp, #44]	; 0x2c
   162dc:	mov	r3, #110	; 0x6e
   162e0:	b	15eac <__assert_fail@plt+0x4de0>
   162e4:	mov	r8, r9
   162e8:	mov	r7, #2
   162ec:	b	16a8c <__assert_fail@plt+0x59c0>
   162f0:	mov	r3, #97	; 0x61
   162f4:	b	15ec4 <__assert_fail@plt+0x4df8>
   162f8:	mov	r3, #97	; 0x61
   162fc:	b	15ec4 <__assert_fail@plt+0x4df8>
   16300:	mov	r3, #0
   16304:	str	r3, [sp, #44]	; 0x2c
   16308:	ldr	r3, [sp, #24]
   1630c:	cmn	r3, #1
   16310:	beq	1633c <__assert_fail@plt+0x5270>
   16314:	ldr	r3, [sp, #24]
   16318:	subs	r3, r3, #1
   1631c:	movne	r3, #1
   16320:	cmp	r3, #0
   16324:	bne	168a4 <__assert_fail@plt+0x57d8>
   16328:	cmp	r6, #0
   1632c:	beq	1636c <__assert_fail@plt+0x52a0>
   16330:	mov	r5, #0
   16334:	mov	r3, r5
   16338:	b	15ed8 <__assert_fail@plt+0x4e0c>
   1633c:	ldr	r3, [sp, #48]	; 0x30
   16340:	ldrb	r3, [r3, #1]
   16344:	adds	r3, r3, #0
   16348:	movne	r3, #1
   1634c:	b	16320 <__assert_fail@plt+0x5254>
   16350:	mov	r3, #0
   16354:	str	r3, [sp, #44]	; 0x2c
   16358:	b	16328 <__assert_fail@plt+0x525c>
   1635c:	mov	r3, #0
   16360:	str	r3, [sp, #44]	; 0x2c
   16364:	b	1636c <__assert_fail@plt+0x52a0>
   16368:	ldr	r5, [sp, #44]	; 0x2c
   1636c:	ldr	r3, [sp, #32]
   16370:	cmp	sl, #2
   16374:	movne	r3, #0
   16378:	andeq	r3, r3, #1
   1637c:	cmp	r3, #0
   16380:	beq	15ed8 <__assert_fail@plt+0x4e0c>
   16384:	mov	r8, r9
   16388:	mov	r7, #2
   1638c:	b	16a8c <__assert_fail@plt+0x59c0>
   16390:	ldr	r5, [sp, #32]
   16394:	b	1636c <__assert_fail@plt+0x52a0>
   16398:	mov	r3, #0
   1639c:	str	r3, [sp, #44]	; 0x2c
   163a0:	mov	r5, r3
   163a4:	b	1636c <__assert_fail@plt+0x52a0>
   163a8:	mov	r3, #0
   163ac:	str	r3, [sp, #44]	; 0x2c
   163b0:	cmp	sl, #2
   163b4:	strne	r5, [sp, #68]	; 0x44
   163b8:	movne	r3, #0
   163bc:	movne	r4, #39	; 0x27
   163c0:	bne	15ed8 <__assert_fail@plt+0x4e0c>
   163c4:	ldr	r3, [sp, #32]
   163c8:	cmp	r3, #0
   163cc:	bne	16a78 <__assert_fail@plt+0x59ac>
   163d0:	ldr	r3, [sp, #72]	; 0x48
   163d4:	clz	r3, r3
   163d8:	lsr	r3, r3, #5
   163dc:	cmp	r9, #0
   163e0:	moveq	r3, #0
   163e4:	cmp	r3, #0
   163e8:	movne	r3, #0
   163ec:	bne	16414 <__assert_fail@plt+0x5348>
   163f0:	cmp	r9, fp
   163f4:	movhi	r3, #39	; 0x27
   163f8:	strbhi	r3, [r8, fp]
   163fc:	add	r3, fp, #1
   16400:	cmp	r9, r3
   16404:	movhi	r2, #92	; 0x5c
   16408:	strbhi	r2, [r8, r3]
   1640c:	mov	r3, r9
   16410:	ldr	r9, [sp, #72]	; 0x48
   16414:	add	r2, fp, #2
   16418:	cmp	r2, r3
   1641c:	movcc	r1, #39	; 0x27
   16420:	strbcc	r1, [r8, r2]
   16424:	add	fp, fp, #3
   16428:	str	r5, [sp, #68]	; 0x44
   1642c:	ldr	r2, [sp, #32]
   16430:	str	r2, [sp, #36]	; 0x24
   16434:	str	r9, [sp, #72]	; 0x48
   16438:	mov	r9, r3
   1643c:	mov	r4, #39	; 0x27
   16440:	mov	r3, #0
   16444:	b	15f24 <__assert_fail@plt+0x4e58>
   16448:	mov	r3, #0
   1644c:	str	r3, [sp, #44]	; 0x2c
   16450:	ldr	r7, [sp, #76]	; 0x4c
   16454:	cmp	r7, #1
   16458:	bne	16490 <__assert_fail@plt+0x53c4>
   1645c:	bl	10fa0 <__ctype_b_loc@plt>
   16460:	ldr	r2, [r0]
   16464:	lsl	r3, r4, #1
   16468:	ldrh	r5, [r2, r3]
   1646c:	ubfx	r5, r5, #14, #1
   16470:	mov	ip, r7
   16474:	eor	r3, r5, #1
   16478:	ldr	r2, [sp, #28]
   1647c:	and	r3, r3, r2
   16480:	ands	r3, r3, #255	; 0xff
   16484:	beq	15ed8 <__assert_fail@plt+0x4e0c>
   16488:	mov	r5, #0
   1648c:	b	166ec <__assert_fail@plt+0x5620>
   16490:	mov	r2, #0
   16494:	mov	r3, #0
   16498:	strd	r2, [sp, #104]	; 0x68
   1649c:	ldr	r3, [sp, #24]
   164a0:	cmn	r3, #1
   164a4:	beq	164c8 <__assert_fail@plt+0x53fc>
   164a8:	mov	r3, #0
   164ac:	str	r4, [sp, #88]	; 0x58
   164b0:	str	fp, [sp, #92]	; 0x5c
   164b4:	str	r8, [sp, #56]	; 0x38
   164b8:	mov	r8, r3
   164bc:	str	r9, [sp, #84]	; 0x54
   164c0:	ldr	r9, [sp, #48]	; 0x30
   164c4:	b	16614 <__assert_fail@plt+0x5548>
   164c8:	ldr	r0, [sp, #48]	; 0x30
   164cc:	bl	10fb8 <strlen@plt>
   164d0:	str	r0, [sp, #24]
   164d4:	b	164a8 <__assert_fail@plt+0x53dc>
   164d8:	mov	r1, fp
   164dc:	ldr	r4, [sp, #88]	; 0x58
   164e0:	mov	r2, r8
   164e4:	mov	ip, r8
   164e8:	ldr	fp, [sp, #92]	; 0x5c
   164ec:	ldr	r8, [sp, #56]	; 0x38
   164f0:	ldr	r9, [sp, #84]	; 0x54
   164f4:	ldr	r0, [sp, #24]
   164f8:	cmp	r7, r0
   164fc:	bcs	166b4 <__assert_fail@plt+0x55e8>
   16500:	ldrb	r3, [r1]
   16504:	cmp	r3, #0
   16508:	beq	166bc <__assert_fail@plt+0x55f0>
   1650c:	mov	r3, r1
   16510:	add	r2, r2, #1
   16514:	add	r1, r6, r2
   16518:	cmp	r0, r1
   1651c:	bls	166c4 <__assert_fail@plt+0x55f8>
   16520:	ldrb	r1, [r3, #1]!
   16524:	cmp	r1, #0
   16528:	bne	16510 <__assert_fail@plt+0x5444>
   1652c:	mov	ip, r2
   16530:	mov	r5, #0
   16534:	b	166e4 <__assert_fail@plt+0x5618>
   16538:	ldr	r3, [sp, #56]	; 0x38
   1653c:	str	r3, [sp, #64]	; 0x40
   16540:	ldr	r8, [sp, #84]	; 0x54
   16544:	mov	r7, #2
   16548:	b	16a8c <__assert_fail@plt+0x59c0>
   1654c:	cmp	r2, r7
   16550:	beq	165f0 <__assert_fail@plt+0x5524>
   16554:	ldrb	r3, [r2], #1
   16558:	sub	r3, r3, #91	; 0x5b
   1655c:	cmp	r3, #33	; 0x21
   16560:	ldrls	pc, [pc, r3, lsl #2]
   16564:	b	1654c <__assert_fail@plt+0x5480>
   16568:	andeq	r6, r1, r8, lsr r5
   1656c:	andeq	r6, r1, r8, lsr r5
   16570:	andeq	r6, r1, ip, asr #10
   16574:	andeq	r6, r1, r8, lsr r5
   16578:	andeq	r6, r1, ip, asr #10
   1657c:	andeq	r6, r1, r8, lsr r5
   16580:	andeq	r6, r1, ip, asr #10
   16584:	andeq	r6, r1, ip, asr #10
   16588:	andeq	r6, r1, ip, asr #10
   1658c:	andeq	r6, r1, ip, asr #10
   16590:	andeq	r6, r1, ip, asr #10
   16594:	andeq	r6, r1, ip, asr #10
   16598:	andeq	r6, r1, ip, asr #10
   1659c:	andeq	r6, r1, ip, asr #10
   165a0:	andeq	r6, r1, ip, asr #10
   165a4:	andeq	r6, r1, ip, asr #10
   165a8:	andeq	r6, r1, ip, asr #10
   165ac:	andeq	r6, r1, ip, asr #10
   165b0:	andeq	r6, r1, ip, asr #10
   165b4:	andeq	r6, r1, ip, asr #10
   165b8:	andeq	r6, r1, ip, asr #10
   165bc:	andeq	r6, r1, ip, asr #10
   165c0:	andeq	r6, r1, ip, asr #10
   165c4:	andeq	r6, r1, ip, asr #10
   165c8:	andeq	r6, r1, ip, asr #10
   165cc:	andeq	r6, r1, ip, asr #10
   165d0:	andeq	r6, r1, ip, asr #10
   165d4:	andeq	r6, r1, ip, asr #10
   165d8:	andeq	r6, r1, ip, asr #10
   165dc:	andeq	r6, r1, ip, asr #10
   165e0:	andeq	r6, r1, ip, asr #10
   165e4:	andeq	r6, r1, ip, asr #10
   165e8:	andeq	r6, r1, ip, asr #10
   165ec:	andeq	r6, r1, r8, lsr r5
   165f0:	ldr	r0, [sp, #100]	; 0x64
   165f4:	bl	10eec <iswprint@plt>
   165f8:	cmp	r0, #0
   165fc:	moveq	r5, #0
   16600:	add	r8, r8, r4
   16604:	add	r0, sp, #104	; 0x68
   16608:	bl	10ea4 <mbsinit@plt>
   1660c:	cmp	r0, #0
   16610:	bne	16680 <__assert_fail@plt+0x55b4>
   16614:	add	r7, r6, r8
   16618:	add	fp, r9, r7
   1661c:	add	r3, sp, #104	; 0x68
   16620:	ldr	r2, [sp, #24]
   16624:	sub	r2, r2, r7
   16628:	mov	r1, fp
   1662c:	add	r0, sp, #100	; 0x64
   16630:	bl	1916c <__assert_fail@plt+0x80a0>
   16634:	subs	r4, r0, #0
   16638:	beq	166d0 <__assert_fail@plt+0x5604>
   1663c:	cmn	r4, #1
   16640:	beq	16698 <__assert_fail@plt+0x55cc>
   16644:	cmn	r4, #2
   16648:	beq	164d8 <__assert_fail@plt+0x540c>
   1664c:	ldr	r3, [sp, #32]
   16650:	cmp	sl, #2
   16654:	movne	r3, #0
   16658:	andeq	r3, r3, #1
   1665c:	cmp	r3, #0
   16660:	beq	165f0 <__assert_fail@plt+0x5524>
   16664:	cmp	r4, #1
   16668:	bls	165f0 <__assert_fail@plt+0x5524>
   1666c:	add	r2, r7, #1
   16670:	add	r2, r9, r2
   16674:	add	r3, r9, r4
   16678:	add	r7, r3, r7
   1667c:	b	16554 <__assert_fail@plt+0x5488>
   16680:	ldr	r4, [sp, #88]	; 0x58
   16684:	mov	ip, r8
   16688:	ldr	fp, [sp, #92]	; 0x5c
   1668c:	ldr	r8, [sp, #56]	; 0x38
   16690:	ldr	r9, [sp, #84]	; 0x54
   16694:	b	166e4 <__assert_fail@plt+0x5618>
   16698:	ldr	r4, [sp, #88]	; 0x58
   1669c:	mov	ip, r8
   166a0:	ldr	fp, [sp, #92]	; 0x5c
   166a4:	ldr	r8, [sp, #56]	; 0x38
   166a8:	ldr	r9, [sp, #84]	; 0x54
   166ac:	mov	r5, #0
   166b0:	b	166e4 <__assert_fail@plt+0x5618>
   166b4:	mov	r5, #0
   166b8:	b	166e4 <__assert_fail@plt+0x5618>
   166bc:	mov	r5, #0
   166c0:	b	166e4 <__assert_fail@plt+0x5618>
   166c4:	mov	ip, r2
   166c8:	mov	r5, #0
   166cc:	b	166e4 <__assert_fail@plt+0x5618>
   166d0:	ldr	r4, [sp, #88]	; 0x58
   166d4:	mov	ip, r8
   166d8:	ldr	fp, [sp, #92]	; 0x5c
   166dc:	ldr	r8, [sp, #56]	; 0x38
   166e0:	ldr	r9, [sp, #84]	; 0x54
   166e4:	cmp	ip, #1
   166e8:	bls	16474 <__assert_fail@plt+0x53a8>
   166ec:	add	lr, r6, ip
   166f0:	ldr	r3, [sp, #48]	; 0x30
   166f4:	add	r1, r3, r6
   166f8:	mov	r3, #0
   166fc:	eor	r0, r5, #1
   16700:	ldr	r2, [sp, #28]
   16704:	and	r0, r0, r2
   16708:	uxtb	r0, r0
   1670c:	str	r0, [sp, #56]	; 0x38
   16710:	mov	r7, #92	; 0x5c
   16714:	ldr	ip, [sp, #36]	; 0x24
   16718:	str	r5, [sp, #84]	; 0x54
   1671c:	ldr	r2, [sp, #44]	; 0x2c
   16720:	b	16790 <__assert_fail@plt+0x56c4>
   16724:	cmp	r2, #0
   16728:	beq	16738 <__assert_fail@plt+0x566c>
   1672c:	cmp	r9, fp
   16730:	strbhi	r7, [r8, fp]
   16734:	add	fp, fp, #1
   16738:	add	r5, r6, #1
   1673c:	cmp	r5, lr
   16740:	bcs	1684c <__assert_fail@plt+0x5780>
   16744:	eor	r2, r3, #1
   16748:	and	r2, r2, ip
   1674c:	ands	r2, r2, #255	; 0xff
   16750:	beq	16868 <__assert_fail@plt+0x579c>
   16754:	cmp	r9, fp
   16758:	movhi	r2, #39	; 0x27
   1675c:	strbhi	r2, [r8, fp]
   16760:	add	r2, fp, #1
   16764:	cmp	r9, r2
   16768:	movhi	ip, #39	; 0x27
   1676c:	strbhi	ip, [r8, r2]
   16770:	add	fp, fp, #2
   16774:	ldr	ip, [sp, #56]	; 0x38
   16778:	mov	r2, ip
   1677c:	mov	r6, r5
   16780:	cmp	r9, fp
   16784:	strbhi	r4, [r8, fp]
   16788:	add	fp, fp, #1
   1678c:	ldrb	r4, [r1, #1]!
   16790:	cmp	r0, #0
   16794:	beq	16724 <__assert_fail@plt+0x5658>
   16798:	ldr	r3, [sp, #32]
   1679c:	cmp	r3, #0
   167a0:	bne	16a34 <__assert_fail@plt+0x5968>
   167a4:	eor	r3, ip, #1
   167a8:	cmp	sl, #2
   167ac:	movne	r3, #0
   167b0:	andeq	r3, r3, #1
   167b4:	cmp	r3, #0
   167b8:	beq	167f0 <__assert_fail@plt+0x5724>
   167bc:	cmp	r9, fp
   167c0:	movhi	ip, #39	; 0x27
   167c4:	strbhi	ip, [r8, fp]
   167c8:	add	ip, fp, #1
   167cc:	cmp	r9, ip
   167d0:	movhi	r5, #36	; 0x24
   167d4:	strbhi	r5, [r8, ip]
   167d8:	add	ip, fp, #2
   167dc:	cmp	r9, ip
   167e0:	movhi	r5, #39	; 0x27
   167e4:	strbhi	r5, [r8, ip]
   167e8:	add	fp, fp, #3
   167ec:	mov	ip, r3
   167f0:	cmp	r9, fp
   167f4:	strbhi	r7, [r8, fp]
   167f8:	add	r3, fp, #1
   167fc:	cmp	r9, r3
   16800:	bls	16810 <__assert_fail@plt+0x5744>
   16804:	lsr	r5, r4, #6
   16808:	add	r5, r5, #48	; 0x30
   1680c:	strb	r5, [r8, r3]
   16810:	add	r3, fp, #2
   16814:	cmp	r9, r3
   16818:	bls	16828 <__assert_fail@plt+0x575c>
   1681c:	ubfx	r5, r4, #3, #3
   16820:	add	r5, r5, #48	; 0x30
   16824:	strb	r5, [r8, r3]
   16828:	add	fp, fp, #3
   1682c:	and	r4, r4, #7
   16830:	add	r4, r4, #48	; 0x30
   16834:	add	r5, r6, #1
   16838:	cmp	r5, lr
   1683c:	bcs	16858 <__assert_fail@plt+0x578c>
   16840:	ldr	r3, [sp, #56]	; 0x38
   16844:	mov	r6, r5
   16848:	b	16780 <__assert_fail@plt+0x56b4>
   1684c:	str	ip, [sp, #36]	; 0x24
   16850:	ldr	r5, [sp, #84]	; 0x54
   16854:	b	16284 <__assert_fail@plt+0x51b8>
   16858:	str	ip, [sp, #36]	; 0x24
   1685c:	ldr	r5, [sp, #84]	; 0x54
   16860:	mov	r3, r0
   16864:	b	16284 <__assert_fail@plt+0x51b8>
   16868:	mov	r6, r5
   1686c:	b	16780 <__assert_fail@plt+0x56b4>
   16870:	ldr	r3, [sp, #44]	; 0x2c
   16874:	b	15ed8 <__assert_fail@plt+0x4e0c>
   16878:	mov	r5, #0
   1687c:	mov	r3, r5
   16880:	mov	r4, #63	; 0x3f
   16884:	b	15ed8 <__assert_fail@plt+0x4e0c>
   16888:	mov	r5, #0
   1688c:	mov	r3, r5
   16890:	mov	r4, #63	; 0x3f
   16894:	b	15ed8 <__assert_fail@plt+0x4e0c>
   16898:	mov	r5, #0
   1689c:	mov	r3, r5
   168a0:	b	15ed8 <__assert_fail@plt+0x4e0c>
   168a4:	mov	r5, #0
   168a8:	mov	r3, r5
   168ac:	b	15ed8 <__assert_fail@plt+0x4e0c>
   168b0:	ldr	r5, [sp, #44]	; 0x2c
   168b4:	ldr	r3, [sp, #32]
   168b8:	b	15ed8 <__assert_fail@plt+0x4e0c>
   168bc:	ldr	r5, [sp, #44]	; 0x2c
   168c0:	mov	r3, #0
   168c4:	str	r3, [sp, #44]	; 0x2c
   168c8:	b	15ed8 <__assert_fail@plt+0x4e0c>
   168cc:	mov	r4, r3
   168d0:	mov	r5, #0
   168d4:	b	15f30 <__assert_fail@plt+0x4e64>
   168d8:	mov	r5, #0
   168dc:	mov	r4, #97	; 0x61
   168e0:	b	15f30 <__assert_fail@plt+0x4e64>
   168e4:	mov	r5, #0
   168e8:	mov	r3, r5
   168ec:	mov	r4, #92	; 0x5c
   168f0:	b	16284 <__assert_fail@plt+0x51b8>
   168f4:	ldr	r3, [sp, #48]	; 0x30
   168f8:	ldrb	r5, [r3, r6]
   168fc:	adds	r5, r5, #0
   16900:	movne	r5, #1
   16904:	b	15fd4 <__assert_fail@plt+0x4f08>
   16908:	cmp	sl, #2
   1690c:	movne	r3, #0
   16910:	moveq	r3, #1
   16914:	ldr	r1, [sp, #32]
   16918:	cmp	fp, #0
   1691c:	andeq	r2, r3, r1
   16920:	movne	r2, #0
   16924:	cmp	r2, #0
   16928:	bne	16a48 <__assert_fail@plt+0x597c>
   1692c:	eor	r2, r1, #1
   16930:	uxtb	r2, r2
   16934:	and	r3, r3, r2
   16938:	ldr	r1, [sp, #68]	; 0x44
   1693c:	ands	r3, r1, r3
   16940:	beq	169d4 <__assert_fail@plt+0x5908>
   16944:	ldr	r2, [sp, #40]	; 0x28
   16948:	cmp	r2, #0
   1694c:	bne	16984 <__assert_fail@plt+0x58b8>
   16950:	ldr	r2, [sp, #72]	; 0x48
   16954:	adds	r2, r2, #0
   16958:	movne	r2, #1
   1695c:	cmp	r9, #0
   16960:	movne	r2, #0
   16964:	str	r2, [sp, #68]	; 0x44
   16968:	mov	sl, #2
   1696c:	ldr	r1, [sp, #40]	; 0x28
   16970:	str	r1, [sp, #32]
   16974:	cmp	r2, #0
   16978:	beq	169c8 <__assert_fail@plt+0x58fc>
   1697c:	ldr	r9, [sp, #72]	; 0x48
   16980:	b	156dc <__assert_fail@plt+0x4610>
   16984:	ldr	r3, [sp, #168]	; 0xa8
   16988:	str	r3, [sp, #16]
   1698c:	ldr	r3, [sp, #164]	; 0xa4
   16990:	str	r3, [sp, #12]
   16994:	ldr	r3, [sp, #160]	; 0xa0
   16998:	str	r3, [sp, #8]
   1699c:	ldr	r3, [sp, #156]	; 0x9c
   169a0:	str	r3, [sp, #4]
   169a4:	mov	r3, #5
   169a8:	str	r3, [sp]
   169ac:	ldr	r3, [sp, #24]
   169b0:	ldr	r2, [sp, #48]	; 0x30
   169b4:	ldr	r1, [sp, #72]	; 0x48
   169b8:	ldr	r0, [sp, #64]	; 0x40
   169bc:	bl	15664 <__assert_fail@plt+0x4598>
   169c0:	mov	fp, r0
   169c4:	b	16ae4 <__assert_fail@plt+0x5a18>
   169c8:	mov	r8, r9
   169cc:	mov	r2, r3
   169d0:	b	169d8 <__assert_fail@plt+0x590c>
   169d4:	mov	r8, r9
   169d8:	ldr	r3, [sp, #60]	; 0x3c
   169dc:	cmp	r3, #0
   169e0:	moveq	r2, #0
   169e4:	andne	r2, r2, #1
   169e8:	cmp	r2, #0
   169ec:	beq	16a1c <__assert_fail@plt+0x5950>
   169f0:	mov	r2, r3
   169f4:	ldrb	r3, [r3]
   169f8:	cmp	r3, #0
   169fc:	beq	16a1c <__assert_fail@plt+0x5950>
   16a00:	ldr	r1, [sp, #64]	; 0x40
   16a04:	cmp	r8, fp
   16a08:	strbhi	r3, [r1, fp]
   16a0c:	add	fp, fp, #1
   16a10:	ldrb	r3, [r2, #1]!
   16a14:	cmp	r3, #0
   16a18:	bne	16a04 <__assert_fail@plt+0x5938>
   16a1c:	cmp	r8, fp
   16a20:	bls	16ae4 <__assert_fail@plt+0x5a18>
   16a24:	mov	r3, #0
   16a28:	ldr	r2, [sp, #64]	; 0x40
   16a2c:	strb	r3, [r2, fp]
   16a30:	b	16ae4 <__assert_fail@plt+0x5a18>
   16a34:	mov	r8, r9
   16a38:	mov	r7, sl
   16a3c:	ldr	r3, [sp, #32]
   16a40:	str	r3, [sp, #28]
   16a44:	b	16a8c <__assert_fail@plt+0x59c0>
   16a48:	mov	r8, r9
   16a4c:	mov	r7, #2
   16a50:	b	16a8c <__assert_fail@plt+0x59c0>
   16a54:	mov	r8, r9
   16a58:	mov	r7, sl
   16a5c:	b	16a8c <__assert_fail@plt+0x59c0>
   16a60:	mov	r8, r9
   16a64:	mov	r7, sl
   16a68:	b	16a8c <__assert_fail@plt+0x59c0>
   16a6c:	mov	r8, r9
   16a70:	mov	r7, sl
   16a74:	b	16a8c <__assert_fail@plt+0x59c0>
   16a78:	mov	r8, r9
   16a7c:	mov	r7, sl
   16a80:	b	16a8c <__assert_fail@plt+0x59c0>
   16a84:	mov	r8, r9
   16a88:	mov	r7, sl
   16a8c:	ldr	r3, [sp, #28]
   16a90:	cmp	r7, #2
   16a94:	movne	r3, #0
   16a98:	andeq	r3, r3, #1
   16a9c:	cmp	r3, #0
   16aa0:	movne	r7, #4
   16aa4:	ldr	r3, [sp, #168]	; 0xa8
   16aa8:	str	r3, [sp, #16]
   16aac:	ldr	r3, [sp, #164]	; 0xa4
   16ab0:	str	r3, [sp, #12]
   16ab4:	mov	r3, #0
   16ab8:	str	r3, [sp, #8]
   16abc:	ldr	r3, [sp, #156]	; 0x9c
   16ac0:	bic	r3, r3, #2
   16ac4:	str	r3, [sp, #4]
   16ac8:	str	r7, [sp]
   16acc:	ldr	r3, [sp, #24]
   16ad0:	ldr	r2, [sp, #48]	; 0x30
   16ad4:	mov	r1, r8
   16ad8:	ldr	r0, [sp, #64]	; 0x40
   16adc:	bl	15664 <__assert_fail@plt+0x4598>
   16ae0:	mov	fp, r0
   16ae4:	mov	r0, fp
   16ae8:	add	sp, sp, #116	; 0x74
   16aec:	ldrd	r4, [sp]
   16af0:	ldrd	r6, [sp, #8]
   16af4:	ldrd	r8, [sp, #16]
   16af8:	ldrd	sl, [sp, #24]
   16afc:	add	sp, sp, #32
   16b00:	pop	{pc}		; (ldr pc, [sp], #4)
   16b04:	mov	r8, r9
   16b08:	mov	r7, sl
   16b0c:	b	16aa4 <__assert_fail@plt+0x59d8>
   16b10:	add	fp, fp, #4
   16b14:	str	r3, [sp, #36]	; 0x24
   16b18:	mov	r5, #0
   16b1c:	mov	r4, #48	; 0x30
   16b20:	b	15ed8 <__assert_fail@plt+0x4e0c>
   16b24:	mov	r3, #1
   16b28:	str	r3, [sp, #32]
   16b2c:	str	r3, [sp, #28]
   16b30:	str	r3, [sp, #52]	; 0x34
   16b34:	movw	r3, #47180	; 0xb84c
   16b38:	movt	r3, #1
   16b3c:	str	r3, [sp, #60]	; 0x3c
   16b40:	mov	fp, #0
   16b44:	mov	sl, #5
   16b48:	b	1573c <__assert_fail@plt+0x4670>
   16b4c:	ldr	r3, [sp, #48]	; 0x30
   16b50:	ldrb	r4, [r3, r6]
   16b54:	cmp	r4, #126	; 0x7e
   16b58:	ldrls	pc, [pc, r4, lsl #2]
   16b5c:	b	16448 <__assert_fail@plt+0x537c>
   16b60:	ldrdeq	r5, [r1], -r0
   16b64:	andeq	r6, r1, r8, asr #8
   16b68:	andeq	r6, r1, r8, asr #8
   16b6c:	andeq	r6, r1, r8, asr #8
   16b70:	andeq	r6, r1, r8, asr #8
   16b74:	andeq	r6, r1, r8, asr #8
   16b78:	andeq	r6, r1, r8, asr #8
   16b7c:	ldrdeq	r6, [r1], -r8
   16b80:	andeq	r5, r1, r4, ror lr
   16b84:	andeq	r6, r1, r8, lsl r2
   16b88:	ldrdeq	r6, [r1], -r4
   16b8c:	andeq	r6, r1, ip, lsr #4
   16b90:	andeq	r5, r1, r8, lsl #29
   16b94:	muleq	r1, ip, lr
   16b98:	andeq	r6, r1, r8, asr #8
   16b9c:	andeq	r6, r1, r8, asr #8
   16ba0:	andeq	r6, r1, r8, asr #8
   16ba4:	andeq	r6, r1, r8, asr #8
   16ba8:	andeq	r6, r1, r8, asr #8
   16bac:	andeq	r6, r1, r8, asr #8
   16bb0:	andeq	r6, r1, r8, asr #8
   16bb4:	andeq	r6, r1, r8, asr #8
   16bb8:	andeq	r6, r1, r8, asr #8
   16bbc:	andeq	r6, r1, r8, asr #8
   16bc0:	andeq	r6, r1, r8, asr #8
   16bc4:	andeq	r6, r1, r8, asr #8
   16bc8:	andeq	r6, r1, r8, asr #8
   16bcc:	andeq	r6, r1, r8, asr #8
   16bd0:	andeq	r6, r1, r8, asr #8
   16bd4:	andeq	r6, r1, r8, asr #8
   16bd8:	andeq	r6, r1, r8, asr #8
   16bdc:	andeq	r6, r1, r8, asr #8
   16be0:	andeq	r6, r1, ip, asr r3
   16be4:	muleq	r1, r8, r3
   16be8:	muleq	r1, r8, r3
   16bec:	andeq	r6, r1, r0, asr r3
   16bf0:	muleq	r1, r8, r3
   16bf4:			; <UNDEFINED> instruction: 0x000168bc
   16bf8:	muleq	r1, r8, r3
   16bfc:	andeq	r6, r1, r8, lsr #7
   16c00:	muleq	r1, r8, r3
   16c04:	muleq	r1, r8, r3
   16c08:	muleq	r1, r8, r3
   16c0c:			; <UNDEFINED> instruction: 0x000168bc
   16c10:			; <UNDEFINED> instruction: 0x000168bc
   16c14:			; <UNDEFINED> instruction: 0x000168bc
   16c18:			; <UNDEFINED> instruction: 0x000168bc
   16c1c:			; <UNDEFINED> instruction: 0x000168bc
   16c20:			; <UNDEFINED> instruction: 0x000168bc
   16c24:			; <UNDEFINED> instruction: 0x000168bc
   16c28:			; <UNDEFINED> instruction: 0x000168bc
   16c2c:			; <UNDEFINED> instruction: 0x000168bc
   16c30:			; <UNDEFINED> instruction: 0x000168bc
   16c34:			; <UNDEFINED> instruction: 0x000168bc
   16c38:			; <UNDEFINED> instruction: 0x000168bc
   16c3c:			; <UNDEFINED> instruction: 0x000168bc
   16c40:			; <UNDEFINED> instruction: 0x000168bc
   16c44:			; <UNDEFINED> instruction: 0x000168bc
   16c48:			; <UNDEFINED> instruction: 0x000168bc
   16c4c:	muleq	r1, r8, r3
   16c50:	muleq	r1, r8, r3
   16c54:	muleq	r1, r8, r3
   16c58:	muleq	r1, r8, r3
   16c5c:	andeq	r5, r1, r8, lsl #26
   16c60:	andeq	r6, r1, r8, asr #8
   16c64:			; <UNDEFINED> instruction: 0x000168bc
   16c68:			; <UNDEFINED> instruction: 0x000168bc
   16c6c:			; <UNDEFINED> instruction: 0x000168bc
   16c70:			; <UNDEFINED> instruction: 0x000168bc
   16c74:			; <UNDEFINED> instruction: 0x000168bc
   16c78:			; <UNDEFINED> instruction: 0x000168bc
   16c7c:			; <UNDEFINED> instruction: 0x000168bc
   16c80:			; <UNDEFINED> instruction: 0x000168bc
   16c84:			; <UNDEFINED> instruction: 0x000168bc
   16c88:			; <UNDEFINED> instruction: 0x000168bc
   16c8c:			; <UNDEFINED> instruction: 0x000168bc
   16c90:			; <UNDEFINED> instruction: 0x000168bc
   16c94:			; <UNDEFINED> instruction: 0x000168bc
   16c98:			; <UNDEFINED> instruction: 0x000168bc
   16c9c:			; <UNDEFINED> instruction: 0x000168bc
   16ca0:			; <UNDEFINED> instruction: 0x000168bc
   16ca4:			; <UNDEFINED> instruction: 0x000168bc
   16ca8:			; <UNDEFINED> instruction: 0x000168bc
   16cac:			; <UNDEFINED> instruction: 0x000168bc
   16cb0:			; <UNDEFINED> instruction: 0x000168bc
   16cb4:			; <UNDEFINED> instruction: 0x000168bc
   16cb8:			; <UNDEFINED> instruction: 0x000168bc
   16cbc:			; <UNDEFINED> instruction: 0x000168bc
   16cc0:			; <UNDEFINED> instruction: 0x000168bc
   16cc4:			; <UNDEFINED> instruction: 0x000168bc
   16cc8:			; <UNDEFINED> instruction: 0x000168bc
   16ccc:	muleq	r1, r8, r3
   16cd0:	andeq	r6, r1, r0, asr #4
   16cd4:			; <UNDEFINED> instruction: 0x000168bc
   16cd8:	muleq	r1, r8, r3
   16cdc:			; <UNDEFINED> instruction: 0x000168bc
   16ce0:	muleq	r1, r8, r3
   16ce4:			; <UNDEFINED> instruction: 0x000168bc
   16ce8:			; <UNDEFINED> instruction: 0x000168bc
   16cec:			; <UNDEFINED> instruction: 0x000168bc
   16cf0:			; <UNDEFINED> instruction: 0x000168bc
   16cf4:			; <UNDEFINED> instruction: 0x000168bc
   16cf8:			; <UNDEFINED> instruction: 0x000168bc
   16cfc:			; <UNDEFINED> instruction: 0x000168bc
   16d00:			; <UNDEFINED> instruction: 0x000168bc
   16d04:			; <UNDEFINED> instruction: 0x000168bc
   16d08:			; <UNDEFINED> instruction: 0x000168bc
   16d0c:			; <UNDEFINED> instruction: 0x000168bc
   16d10:			; <UNDEFINED> instruction: 0x000168bc
   16d14:			; <UNDEFINED> instruction: 0x000168bc
   16d18:			; <UNDEFINED> instruction: 0x000168bc
   16d1c:			; <UNDEFINED> instruction: 0x000168bc
   16d20:			; <UNDEFINED> instruction: 0x000168bc
   16d24:			; <UNDEFINED> instruction: 0x000168bc
   16d28:			; <UNDEFINED> instruction: 0x000168bc
   16d2c:			; <UNDEFINED> instruction: 0x000168bc
   16d30:			; <UNDEFINED> instruction: 0x000168bc
   16d34:			; <UNDEFINED> instruction: 0x000168bc
   16d38:			; <UNDEFINED> instruction: 0x000168bc
   16d3c:			; <UNDEFINED> instruction: 0x000168bc
   16d40:			; <UNDEFINED> instruction: 0x000168bc
   16d44:			; <UNDEFINED> instruction: 0x000168bc
   16d48:			; <UNDEFINED> instruction: 0x000168bc
   16d4c:	andeq	r6, r1, r0, lsl #6
   16d50:	muleq	r1, r8, r3
   16d54:	andeq	r6, r1, r0, lsl #6
   16d58:	andeq	r6, r1, r0, asr r3
   16d5c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16d60:	strd	r6, [sp, #8]
   16d64:	strd	r8, [sp, #16]
   16d68:	strd	sl, [sp, #24]
   16d6c:	str	lr, [sp, #32]
   16d70:	sub	sp, sp, #52	; 0x34
   16d74:	mov	r5, r0
   16d78:	str	r1, [sp, #24]
   16d7c:	str	r2, [sp, #28]
   16d80:	mov	r4, r3
   16d84:	bl	10fd0 <__errno_location@plt>
   16d88:	str	r0, [sp, #32]
   16d8c:	ldr	r3, [r0]
   16d90:	str	r3, [sp, #36]	; 0x24
   16d94:	movw	r3, #49472	; 0xc140
   16d98:	movt	r3, #2
   16d9c:	ldr	r6, [r3]
   16da0:	cmn	r5, #-2147483647	; 0x80000001
   16da4:	movne	r3, #0
   16da8:	moveq	r3, #1
   16dac:	orrs	r3, r3, r5, lsr #31
   16db0:	bne	16f14 <__assert_fail@plt+0x5e48>
   16db4:	movw	r3, #49472	; 0xc140
   16db8:	movt	r3, #2
   16dbc:	ldr	r2, [r3, #4]
   16dc0:	cmp	r2, r5
   16dc4:	bgt	16e34 <__assert_fail@plt+0x5d68>
   16dc8:	str	r2, [sp, #44]	; 0x2c
   16dcc:	add	r3, r3, #8
   16dd0:	cmp	r6, r3
   16dd4:	beq	16f18 <__assert_fail@plt+0x5e4c>
   16dd8:	sub	r2, r5, r2
   16ddc:	mov	r3, #8
   16de0:	str	r3, [sp]
   16de4:	mvn	r3, #-2147483648	; 0x80000000
   16de8:	add	r2, r2, #1
   16dec:	add	r1, sp, #44	; 0x2c
   16df0:	mov	r0, r6
   16df4:	bl	17f1c <__assert_fail@plt+0x6e50>
   16df8:	mov	r6, r0
   16dfc:	movw	r3, #49472	; 0xc140
   16e00:	movt	r3, #2
   16e04:	str	r0, [r3]
   16e08:	movw	r7, #49472	; 0xc140
   16e0c:	movt	r7, #2
   16e10:	ldr	r0, [r7, #4]
   16e14:	ldr	r2, [sp, #44]	; 0x2c
   16e18:	sub	r2, r2, r0
   16e1c:	lsl	r2, r2, #3
   16e20:	mov	r1, #0
   16e24:	add	r0, r6, r0, lsl #3
   16e28:	bl	10fe8 <memset@plt>
   16e2c:	ldr	r3, [sp, #44]	; 0x2c
   16e30:	str	r3, [r7, #4]
   16e34:	add	fp, r6, r5, lsl #3
   16e38:	ldr	r8, [r6, r5, lsl #3]
   16e3c:	ldr	r7, [fp, #4]
   16e40:	ldr	r3, [r4, #4]
   16e44:	orr	r9, r3, #1
   16e48:	add	sl, r4, #8
   16e4c:	ldr	r3, [r4, #44]	; 0x2c
   16e50:	str	r3, [sp, #16]
   16e54:	ldr	r3, [r4, #40]	; 0x28
   16e58:	str	r3, [sp, #12]
   16e5c:	str	sl, [sp, #8]
   16e60:	str	r9, [sp, #4]
   16e64:	ldr	r3, [r4]
   16e68:	str	r3, [sp]
   16e6c:	ldr	r3, [sp, #28]
   16e70:	ldr	r2, [sp, #24]
   16e74:	mov	r1, r8
   16e78:	mov	r0, r7
   16e7c:	bl	15664 <__assert_fail@plt+0x4598>
   16e80:	cmp	r8, r0
   16e84:	bhi	16ee8 <__assert_fail@plt+0x5e1c>
   16e88:	add	r8, r0, #1
   16e8c:	str	r8, [r6, r5, lsl #3]
   16e90:	movw	r3, #49680	; 0xc210
   16e94:	movt	r3, #2
   16e98:	cmp	r7, r3
   16e9c:	beq	16ea8 <__assert_fail@plt+0x5ddc>
   16ea0:	mov	r0, r7
   16ea4:	bl	14f60 <__assert_fail@plt+0x3e94>
   16ea8:	mov	r0, r8
   16eac:	bl	17d18 <__assert_fail@plt+0x6c4c>
   16eb0:	mov	r7, r0
   16eb4:	str	r0, [fp, #4]
   16eb8:	ldr	r3, [r4, #44]	; 0x2c
   16ebc:	str	r3, [sp, #16]
   16ec0:	ldr	r3, [r4, #40]	; 0x28
   16ec4:	str	r3, [sp, #12]
   16ec8:	str	sl, [sp, #8]
   16ecc:	str	r9, [sp, #4]
   16ed0:	ldr	r3, [r4]
   16ed4:	str	r3, [sp]
   16ed8:	ldr	r3, [sp, #28]
   16edc:	ldr	r2, [sp, #24]
   16ee0:	mov	r1, r8
   16ee4:	bl	15664 <__assert_fail@plt+0x4598>
   16ee8:	ldr	r3, [sp, #32]
   16eec:	ldr	r2, [sp, #36]	; 0x24
   16ef0:	str	r2, [r3]
   16ef4:	mov	r0, r7
   16ef8:	add	sp, sp, #52	; 0x34
   16efc:	ldrd	r4, [sp]
   16f00:	ldrd	r6, [sp, #8]
   16f04:	ldrd	r8, [sp, #16]
   16f08:	ldrd	sl, [sp, #24]
   16f0c:	add	sp, sp, #32
   16f10:	pop	{pc}		; (ldr pc, [sp], #4)
   16f14:	bl	110a8 <abort@plt>
   16f18:	sub	r2, r5, r2
   16f1c:	mov	r3, #8
   16f20:	str	r3, [sp]
   16f24:	mvn	r3, #-2147483648	; 0x80000000
   16f28:	add	r2, r2, #1
   16f2c:	add	r1, sp, #44	; 0x2c
   16f30:	mov	r0, #0
   16f34:	bl	17f1c <__assert_fail@plt+0x6e50>
   16f38:	mov	r6, r0
   16f3c:	movw	r3, #49472	; 0xc140
   16f40:	movt	r3, #2
   16f44:	str	r0, [r3]
   16f48:	ldrd	r2, [r3, #8]
   16f4c:	strd	r2, [r0]
   16f50:	b	16e08 <__assert_fail@plt+0x5d3c>
   16f54:	strd	r4, [sp, #-16]!
   16f58:	str	r6, [sp, #8]
   16f5c:	str	lr, [sp, #12]
   16f60:	mov	r4, r0
   16f64:	bl	10fd0 <__errno_location@plt>
   16f68:	mov	r5, r0
   16f6c:	ldr	r6, [r0]
   16f70:	cmp	r4, #0
   16f74:	ldr	r3, [pc, #32]	; 16f9c <__assert_fail@plt+0x5ed0>
   16f78:	moveq	r4, r3
   16f7c:	mov	r1, #48	; 0x30
   16f80:	mov	r0, r4
   16f84:	bl	1808c <__assert_fail@plt+0x6fc0>
   16f88:	str	r6, [r5]
   16f8c:	ldrd	r4, [sp]
   16f90:	ldr	r6, [sp, #8]
   16f94:	add	sp, sp, #12
   16f98:	pop	{pc}		; (ldr pc, [sp], #4)
   16f9c:	andeq	ip, r2, r0, lsl r3
   16fa0:	subs	r3, r0, #0
   16fa4:	ldr	r2, [pc, #8]	; 16fb4 <__assert_fail@plt+0x5ee8>
   16fa8:	moveq	r3, r2
   16fac:	ldr	r0, [r3]
   16fb0:	bx	lr
   16fb4:	andeq	ip, r2, r0, lsl r3
   16fb8:	subs	r3, r0, #0
   16fbc:	ldr	r2, [pc, #8]	; 16fcc <__assert_fail@plt+0x5f00>
   16fc0:	moveq	r3, r2
   16fc4:	str	r1, [r3]
   16fc8:	bx	lr
   16fcc:	andeq	ip, r2, r0, lsl r3
   16fd0:	push	{lr}		; (str lr, [sp, #-4]!)
   16fd4:	subs	r3, r0, #0
   16fd8:	ldr	r0, [pc, #44]	; 1700c <__assert_fail@plt+0x5f40>
   16fdc:	moveq	r3, r0
   16fe0:	add	r3, r3, #8
   16fe4:	lsr	lr, r1, #5
   16fe8:	and	r1, r1, #31
   16fec:	ldr	ip, [r3, lr, lsl #2]
   16ff0:	lsr	r0, ip, r1
   16ff4:	eor	r2, r2, r0
   16ff8:	and	r2, r2, #1
   16ffc:	eor	r1, ip, r2, lsl r1
   17000:	str	r1, [r3, lr, lsl #2]
   17004:	and	r0, r0, #1
   17008:	pop	{pc}		; (ldr pc, [sp], #4)
   1700c:	andeq	ip, r2, r0, lsl r3
   17010:	subs	r3, r0, #0
   17014:	ldr	r2, [pc, #12]	; 17028 <__assert_fail@plt+0x5f5c>
   17018:	moveq	r3, r2
   1701c:	ldr	r0, [r3, #4]
   17020:	str	r1, [r3, #4]
   17024:	bx	lr
   17028:	andeq	ip, r2, r0, lsl r3
   1702c:	subs	r3, r0, #0
   17030:	ldr	r0, [pc, #44]	; 17064 <__assert_fail@plt+0x5f98>
   17034:	moveq	r3, r0
   17038:	mov	r0, #10
   1703c:	str	r0, [r3]
   17040:	cmp	r2, #0
   17044:	cmpne	r1, #0
   17048:	beq	17058 <__assert_fail@plt+0x5f8c>
   1704c:	str	r1, [r3, #40]	; 0x28
   17050:	str	r2, [r3, #44]	; 0x2c
   17054:	bx	lr
   17058:	str	r4, [sp, #-8]!
   1705c:	str	lr, [sp, #4]
   17060:	bl	110a8 <abort@plt>
   17064:	andeq	ip, r2, r0, lsl r3
   17068:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1706c:	strd	r6, [sp, #8]
   17070:	strd	r8, [sp, #16]
   17074:	str	sl, [sp, #24]
   17078:	str	lr, [sp, #28]
   1707c:	sub	sp, sp, #24
   17080:	mov	r7, r0
   17084:	mov	r8, r1
   17088:	mov	r9, r2
   1708c:	mov	sl, r3
   17090:	ldr	r4, [sp, #56]	; 0x38
   17094:	cmp	r4, #0
   17098:	ldr	r3, [pc, #104]	; 17108 <__assert_fail@plt+0x603c>
   1709c:	moveq	r4, r3
   170a0:	bl	10fd0 <__errno_location@plt>
   170a4:	mov	r5, r0
   170a8:	ldr	r6, [r0]
   170ac:	ldr	r3, [r4, #44]	; 0x2c
   170b0:	str	r3, [sp, #16]
   170b4:	ldr	r3, [r4, #40]	; 0x28
   170b8:	str	r3, [sp, #12]
   170bc:	add	r3, r4, #8
   170c0:	str	r3, [sp, #8]
   170c4:	ldr	r3, [r4, #4]
   170c8:	str	r3, [sp, #4]
   170cc:	ldr	r3, [r4]
   170d0:	str	r3, [sp]
   170d4:	mov	r3, sl
   170d8:	mov	r2, r9
   170dc:	mov	r1, r8
   170e0:	mov	r0, r7
   170e4:	bl	15664 <__assert_fail@plt+0x4598>
   170e8:	str	r6, [r5]
   170ec:	add	sp, sp, #24
   170f0:	ldrd	r4, [sp]
   170f4:	ldrd	r6, [sp, #8]
   170f8:	ldrd	r8, [sp, #16]
   170fc:	ldr	sl, [sp, #24]
   17100:	add	sp, sp, #28
   17104:	pop	{pc}		; (ldr pc, [sp], #4)
   17108:	andeq	ip, r2, r0, lsl r3
   1710c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17110:	strd	r6, [sp, #8]
   17114:	strd	r8, [sp, #16]
   17118:	strd	sl, [sp, #24]
   1711c:	str	lr, [sp, #32]
   17120:	sub	sp, sp, #44	; 0x2c
   17124:	mov	r8, r0
   17128:	mov	sl, r1
   1712c:	mov	r6, r2
   17130:	subs	r4, r3, #0
   17134:	ldr	r3, [pc, #200]	; 17204 <__assert_fail@plt+0x6138>
   17138:	moveq	r4, r3
   1713c:	bl	10fd0 <__errno_location@plt>
   17140:	mov	r7, r0
   17144:	ldr	fp, [r0]
   17148:	ldr	r5, [r4, #4]
   1714c:	cmp	r6, #0
   17150:	orreq	r5, r5, #1
   17154:	add	r9, r4, #8
   17158:	ldr	r3, [r4, #44]	; 0x2c
   1715c:	str	r3, [sp, #16]
   17160:	ldr	r3, [r4, #40]	; 0x28
   17164:	str	r3, [sp, #12]
   17168:	str	r9, [sp, #8]
   1716c:	str	r5, [sp, #4]
   17170:	ldr	r3, [r4]
   17174:	str	r3, [sp]
   17178:	str	sl, [sp, #36]	; 0x24
   1717c:	mov	r3, sl
   17180:	str	r8, [sp, #32]
   17184:	mov	r2, r8
   17188:	mov	r1, #0
   1718c:	mov	r0, r1
   17190:	bl	15664 <__assert_fail@plt+0x4598>
   17194:	mov	sl, r0
   17198:	add	r8, r0, #1
   1719c:	mov	r0, r8
   171a0:	bl	17d18 <__assert_fail@plt+0x6c4c>
   171a4:	str	r0, [sp, #28]
   171a8:	ldr	r3, [r4, #44]	; 0x2c
   171ac:	str	r3, [sp, #16]
   171b0:	ldr	r3, [r4, #40]	; 0x28
   171b4:	str	r3, [sp, #12]
   171b8:	str	r9, [sp, #8]
   171bc:	str	r5, [sp, #4]
   171c0:	ldr	r3, [r4]
   171c4:	str	r3, [sp]
   171c8:	ldr	r3, [sp, #36]	; 0x24
   171cc:	ldr	r2, [sp, #32]
   171d0:	mov	r1, r8
   171d4:	bl	15664 <__assert_fail@plt+0x4598>
   171d8:	str	fp, [r7]
   171dc:	cmp	r6, #0
   171e0:	strne	sl, [r6]
   171e4:	ldr	r0, [sp, #28]
   171e8:	add	sp, sp, #44	; 0x2c
   171ec:	ldrd	r4, [sp]
   171f0:	ldrd	r6, [sp, #8]
   171f4:	ldrd	r8, [sp, #16]
   171f8:	ldrd	sl, [sp, #24]
   171fc:	add	sp, sp, #32
   17200:	pop	{pc}		; (ldr pc, [sp], #4)
   17204:	andeq	ip, r2, r0, lsl r3
   17208:	str	r4, [sp, #-8]!
   1720c:	str	lr, [sp, #4]
   17210:	mov	r3, r2
   17214:	mov	r2, #0
   17218:	bl	1710c <__assert_fail@plt+0x6040>
   1721c:	ldr	r4, [sp]
   17220:	add	sp, sp, #4
   17224:	pop	{pc}		; (ldr pc, [sp], #4)
   17228:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1722c:	strd	r6, [sp, #8]
   17230:	str	r8, [sp, #16]
   17234:	str	lr, [sp, #20]
   17238:	movw	r3, #49472	; 0xc140
   1723c:	movt	r3, #2
   17240:	ldr	r7, [r3]
   17244:	ldr	r3, [r3, #4]
   17248:	cmp	r3, #1
   1724c:	ble	17278 <__assert_fail@plt+0x61ac>
   17250:	mov	r4, #1
   17254:	add	r6, r7, #4
   17258:	movw	r5, #49472	; 0xc140
   1725c:	movt	r5, #2
   17260:	ldr	r0, [r6, r4, lsl #3]
   17264:	bl	14f60 <__assert_fail@plt+0x3e94>
   17268:	add	r4, r4, #1
   1726c:	ldr	r3, [r5, #4]
   17270:	cmp	r3, r4
   17274:	bgt	17260 <__assert_fail@plt+0x6194>
   17278:	ldr	r0, [r7, #4]
   1727c:	movw	r3, #49680	; 0xc210
   17280:	movt	r3, #2
   17284:	cmp	r0, r3
   17288:	beq	172ac <__assert_fail@plt+0x61e0>
   1728c:	bl	14f60 <__assert_fail@plt+0x3e94>
   17290:	movw	r3, #49472	; 0xc140
   17294:	movt	r3, #2
   17298:	mov	r2, #256	; 0x100
   1729c:	str	r2, [r3, #8]
   172a0:	movw	r2, #49680	; 0xc210
   172a4:	movt	r2, #2
   172a8:	str	r2, [r3, #12]
   172ac:	ldr	r3, [pc, #64]	; 172f4 <__assert_fail@plt+0x6228>
   172b0:	cmp	r7, r3
   172b4:	beq	172d0 <__assert_fail@plt+0x6204>
   172b8:	mov	r0, r7
   172bc:	bl	14f60 <__assert_fail@plt+0x3e94>
   172c0:	movw	r3, #49472	; 0xc140
   172c4:	movt	r3, #2
   172c8:	add	r2, r3, #8
   172cc:	str	r2, [r3]
   172d0:	movw	r3, #49472	; 0xc140
   172d4:	movt	r3, #2
   172d8:	mov	r2, #1
   172dc:	str	r2, [r3, #4]
   172e0:	ldrd	r4, [sp]
   172e4:	ldrd	r6, [sp, #8]
   172e8:	ldr	r8, [sp, #16]
   172ec:	add	sp, sp, #20
   172f0:	pop	{pc}		; (ldr pc, [sp], #4)
   172f4:	andeq	ip, r2, r8, asr #2
   172f8:	str	r4, [sp, #-8]!
   172fc:	str	lr, [sp, #4]
   17300:	ldr	r3, [pc, #16]	; 17318 <__assert_fail@plt+0x624c>
   17304:	mvn	r2, #0
   17308:	bl	16d5c <__assert_fail@plt+0x5c90>
   1730c:	ldr	r4, [sp]
   17310:	add	sp, sp, #4
   17314:	pop	{pc}		; (ldr pc, [sp], #4)
   17318:	andeq	ip, r2, r0, lsl r3
   1731c:	str	r4, [sp, #-8]!
   17320:	str	lr, [sp, #4]
   17324:	ldr	r3, [pc, #12]	; 17338 <__assert_fail@plt+0x626c>
   17328:	bl	16d5c <__assert_fail@plt+0x5c90>
   1732c:	ldr	r4, [sp]
   17330:	add	sp, sp, #4
   17334:	pop	{pc}		; (ldr pc, [sp], #4)
   17338:	andeq	ip, r2, r0, lsl r3
   1733c:	str	r4, [sp, #-8]!
   17340:	str	lr, [sp, #4]
   17344:	mov	r1, r0
   17348:	mov	r0, #0
   1734c:	bl	172f8 <__assert_fail@plt+0x622c>
   17350:	ldr	r4, [sp]
   17354:	add	sp, sp, #4
   17358:	pop	{pc}		; (ldr pc, [sp], #4)
   1735c:	str	r4, [sp, #-8]!
   17360:	str	lr, [sp, #4]
   17364:	mov	r2, r1
   17368:	mov	r1, r0
   1736c:	mov	r0, #0
   17370:	bl	1731c <__assert_fail@plt+0x6250>
   17374:	ldr	r4, [sp]
   17378:	add	sp, sp, #4
   1737c:	pop	{pc}		; (ldr pc, [sp], #4)
   17380:	strd	r4, [sp, #-12]!
   17384:	str	lr, [sp, #8]
   17388:	sub	sp, sp, #52	; 0x34
   1738c:	mov	r4, r0
   17390:	mov	r5, r2
   17394:	mov	r0, sp
   17398:	bl	154d0 <__assert_fail@plt+0x4404>
   1739c:	mov	r3, sp
   173a0:	mvn	r2, #0
   173a4:	mov	r1, r5
   173a8:	mov	r0, r4
   173ac:	bl	16d5c <__assert_fail@plt+0x5c90>
   173b0:	add	sp, sp, #52	; 0x34
   173b4:	ldrd	r4, [sp]
   173b8:	add	sp, sp, #8
   173bc:	pop	{pc}		; (ldr pc, [sp], #4)
   173c0:	strd	r4, [sp, #-16]!
   173c4:	str	r6, [sp, #8]
   173c8:	str	lr, [sp, #12]
   173cc:	sub	sp, sp, #48	; 0x30
   173d0:	mov	r4, r0
   173d4:	mov	r5, r2
   173d8:	mov	r6, r3
   173dc:	mov	r0, sp
   173e0:	bl	154d0 <__assert_fail@plt+0x4404>
   173e4:	mov	r3, sp
   173e8:	mov	r2, r6
   173ec:	mov	r1, r5
   173f0:	mov	r0, r4
   173f4:	bl	16d5c <__assert_fail@plt+0x5c90>
   173f8:	add	sp, sp, #48	; 0x30
   173fc:	ldrd	r4, [sp]
   17400:	ldr	r6, [sp, #8]
   17404:	add	sp, sp, #12
   17408:	pop	{pc}		; (ldr pc, [sp], #4)
   1740c:	str	r4, [sp, #-8]!
   17410:	str	lr, [sp, #4]
   17414:	mov	r2, r1
   17418:	mov	r1, r0
   1741c:	mov	r0, #0
   17420:	bl	17380 <__assert_fail@plt+0x62b4>
   17424:	ldr	r4, [sp]
   17428:	add	sp, sp, #4
   1742c:	pop	{pc}		; (ldr pc, [sp], #4)
   17430:	str	r4, [sp, #-8]!
   17434:	str	lr, [sp, #4]
   17438:	mov	r3, r2
   1743c:	mov	r2, r1
   17440:	mov	r1, r0
   17444:	mov	r0, #0
   17448:	bl	173c0 <__assert_fail@plt+0x62f4>
   1744c:	ldr	r4, [sp]
   17450:	add	sp, sp, #4
   17454:	pop	{pc}		; (ldr pc, [sp], #4)
   17458:	strd	r4, [sp, #-12]!
   1745c:	str	lr, [sp, #8]
   17460:	sub	sp, sp, #52	; 0x34
   17464:	mov	r4, r0
   17468:	mov	r5, r1
   1746c:	mov	r1, r2
   17470:	ldr	r0, [pc, #92]	; 174d4 <__assert_fail@plt+0x6408>
   17474:	ldrd	r2, [r0]
   17478:	strd	r2, [sp]
   1747c:	ldrd	r2, [r0, #8]
   17480:	strd	r2, [sp, #8]
   17484:	ldrd	r2, [r0, #16]
   17488:	strd	r2, [sp, #16]
   1748c:	ldrd	r2, [r0, #24]
   17490:	strd	r2, [sp, #24]
   17494:	ldrd	r2, [r0, #32]
   17498:	strd	r2, [sp, #32]
   1749c:	ldrd	r2, [r0, #40]	; 0x28
   174a0:	strd	r2, [sp, #40]	; 0x28
   174a4:	mov	r2, #1
   174a8:	mov	r0, sp
   174ac:	bl	16fd0 <__assert_fail@plt+0x5f04>
   174b0:	mov	r3, sp
   174b4:	mov	r2, r5
   174b8:	mov	r1, r4
   174bc:	mov	r0, #0
   174c0:	bl	16d5c <__assert_fail@plt+0x5c90>
   174c4:	add	sp, sp, #52	; 0x34
   174c8:	ldrd	r4, [sp]
   174cc:	add	sp, sp, #8
   174d0:	pop	{pc}		; (ldr pc, [sp], #4)
   174d4:	andeq	ip, r2, r0, lsl r3
   174d8:	str	r4, [sp, #-8]!
   174dc:	str	lr, [sp, #4]
   174e0:	mov	r2, r1
   174e4:	mvn	r1, #0
   174e8:	bl	17458 <__assert_fail@plt+0x638c>
   174ec:	ldr	r4, [sp]
   174f0:	add	sp, sp, #4
   174f4:	pop	{pc}		; (ldr pc, [sp], #4)
   174f8:	str	r4, [sp, #-8]!
   174fc:	str	lr, [sp, #4]
   17500:	mov	r1, #58	; 0x3a
   17504:	bl	174d8 <__assert_fail@plt+0x640c>
   17508:	ldr	r4, [sp]
   1750c:	add	sp, sp, #4
   17510:	pop	{pc}		; (ldr pc, [sp], #4)
   17514:	str	r4, [sp, #-8]!
   17518:	str	lr, [sp, #4]
   1751c:	mov	r2, #58	; 0x3a
   17520:	bl	17458 <__assert_fail@plt+0x638c>
   17524:	ldr	r4, [sp]
   17528:	add	sp, sp, #4
   1752c:	pop	{pc}		; (ldr pc, [sp], #4)
   17530:	strd	r4, [sp, #-12]!
   17534:	str	lr, [sp, #8]
   17538:	sub	sp, sp, #100	; 0x64
   1753c:	mov	r4, r0
   17540:	mov	r5, r2
   17544:	mov	r0, sp
   17548:	bl	154d0 <__assert_fail@plt+0x4404>
   1754c:	ldrd	r2, [sp]
   17550:	strd	r2, [sp, #48]	; 0x30
   17554:	ldrd	r2, [sp, #8]
   17558:	strd	r2, [sp, #56]	; 0x38
   1755c:	ldrd	r2, [sp, #16]
   17560:	strd	r2, [sp, #64]	; 0x40
   17564:	ldrd	r2, [sp, #24]
   17568:	strd	r2, [sp, #72]	; 0x48
   1756c:	ldrd	r2, [sp, #32]
   17570:	strd	r2, [sp, #80]	; 0x50
   17574:	ldrd	r2, [sp, #40]	; 0x28
   17578:	strd	r2, [sp, #88]	; 0x58
   1757c:	mov	r2, #1
   17580:	mov	r1, #58	; 0x3a
   17584:	add	r0, sp, #48	; 0x30
   17588:	bl	16fd0 <__assert_fail@plt+0x5f04>
   1758c:	add	r3, sp, #48	; 0x30
   17590:	mvn	r2, #0
   17594:	mov	r1, r5
   17598:	mov	r0, r4
   1759c:	bl	16d5c <__assert_fail@plt+0x5c90>
   175a0:	add	sp, sp, #100	; 0x64
   175a4:	ldrd	r4, [sp]
   175a8:	add	sp, sp, #8
   175ac:	pop	{pc}		; (ldr pc, [sp], #4)
   175b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   175b4:	strd	r6, [sp, #8]
   175b8:	str	lr, [sp, #16]
   175bc:	sub	sp, sp, #52	; 0x34
   175c0:	mov	r4, r0
   175c4:	mov	r5, r3
   175c8:	ldr	r3, [pc, #92]	; 1762c <__assert_fail@plt+0x6560>
   175cc:	ldrd	r6, [r3]
   175d0:	strd	r6, [sp]
   175d4:	ldrd	r6, [r3, #8]
   175d8:	strd	r6, [sp, #8]
   175dc:	ldrd	r6, [r3, #16]
   175e0:	strd	r6, [sp, #16]
   175e4:	ldrd	r6, [r3, #24]
   175e8:	strd	r6, [sp, #24]
   175ec:	ldrd	r6, [r3, #32]
   175f0:	strd	r6, [sp, #32]
   175f4:	ldrd	r6, [r3, #40]	; 0x28
   175f8:	strd	r6, [sp, #40]	; 0x28
   175fc:	mov	r0, sp
   17600:	bl	1702c <__assert_fail@plt+0x5f60>
   17604:	mov	r3, sp
   17608:	ldr	r2, [sp, #72]	; 0x48
   1760c:	mov	r1, r5
   17610:	mov	r0, r4
   17614:	bl	16d5c <__assert_fail@plt+0x5c90>
   17618:	add	sp, sp, #52	; 0x34
   1761c:	ldrd	r4, [sp]
   17620:	ldrd	r6, [sp, #8]
   17624:	add	sp, sp, #16
   17628:	pop	{pc}		; (ldr pc, [sp], #4)
   1762c:	andeq	ip, r2, r0, lsl r3
   17630:	push	{lr}		; (str lr, [sp, #-4]!)
   17634:	sub	sp, sp, #12
   17638:	mvn	ip, #0
   1763c:	str	ip, [sp]
   17640:	bl	175b0 <__assert_fail@plt+0x64e4>
   17644:	add	sp, sp, #12
   17648:	pop	{pc}		; (ldr pc, [sp], #4)
   1764c:	str	r4, [sp, #-8]!
   17650:	str	lr, [sp, #4]
   17654:	mov	r3, r2
   17658:	mov	r2, r1
   1765c:	mov	r1, r0
   17660:	mov	r0, #0
   17664:	bl	17630 <__assert_fail@plt+0x6564>
   17668:	ldr	r4, [sp]
   1766c:	add	sp, sp, #4
   17670:	pop	{pc}		; (ldr pc, [sp], #4)
   17674:	push	{lr}		; (str lr, [sp, #-4]!)
   17678:	sub	sp, sp, #12
   1767c:	str	r3, [sp]
   17680:	mov	r3, r2
   17684:	mov	r2, r1
   17688:	mov	r1, r0
   1768c:	mov	r0, #0
   17690:	bl	175b0 <__assert_fail@plt+0x64e4>
   17694:	add	sp, sp, #12
   17698:	pop	{pc}		; (ldr pc, [sp], #4)
   1769c:	str	r4, [sp, #-8]!
   176a0:	str	lr, [sp, #4]
   176a4:	ldr	r3, [pc, #12]	; 176b8 <__assert_fail@plt+0x65ec>
   176a8:	bl	16d5c <__assert_fail@plt+0x5c90>
   176ac:	ldr	r4, [sp]
   176b0:	add	sp, sp, #4
   176b4:	pop	{pc}		; (ldr pc, [sp], #4)
   176b8:	andeq	ip, r2, r0, asr r1
   176bc:	str	r4, [sp, #-8]!
   176c0:	str	lr, [sp, #4]
   176c4:	mov	r2, r1
   176c8:	mov	r1, r0
   176cc:	mov	r0, #0
   176d0:	bl	1769c <__assert_fail@plt+0x65d0>
   176d4:	ldr	r4, [sp]
   176d8:	add	sp, sp, #4
   176dc:	pop	{pc}		; (ldr pc, [sp], #4)
   176e0:	str	r4, [sp, #-8]!
   176e4:	str	lr, [sp, #4]
   176e8:	mvn	r2, #0
   176ec:	bl	1769c <__assert_fail@plt+0x65d0>
   176f0:	ldr	r4, [sp]
   176f4:	add	sp, sp, #4
   176f8:	pop	{pc}		; (ldr pc, [sp], #4)
   176fc:	str	r4, [sp, #-8]!
   17700:	str	lr, [sp, #4]
   17704:	mov	r1, r0
   17708:	mov	r0, #0
   1770c:	bl	176e0 <__assert_fail@plt+0x6614>
   17710:	ldr	r4, [sp]
   17714:	add	sp, sp, #4
   17718:	pop	{pc}		; (ldr pc, [sp], #4)
   1771c:	strd	r4, [sp, #-16]!
   17720:	str	r6, [sp, #8]
   17724:	str	lr, [sp, #12]
   17728:	sub	sp, sp, #32
   1772c:	mov	r4, r0
   17730:	ldr	r5, [sp, #48]	; 0x30
   17734:	ldr	r6, [sp, #52]	; 0x34
   17738:	cmp	r1, #0
   1773c:	beq	17808 <__assert_fail@plt+0x673c>
   17740:	str	r3, [sp, #4]
   17744:	str	r2, [sp]
   17748:	mov	r3, r1
   1774c:	movw	r2, #47308	; 0xb8cc
   17750:	movt	r2, #1
   17754:	mov	r1, #1
   17758:	bl	1100c <__fprintf_chk@plt>
   1775c:	mov	r2, #5
   17760:	movw	r1, #47328	; 0xb8e0
   17764:	movt	r1, #1
   17768:	mov	r0, #0
   1776c:	bl	10ec8 <dcgettext@plt>
   17770:	movw	r3, #2022	; 0x7e6
   17774:	str	r3, [sp]
   17778:	mov	r3, r0
   1777c:	movw	r2, #48056	; 0xbbb8
   17780:	movt	r2, #1
   17784:	mov	r1, #1
   17788:	mov	r0, r4
   1778c:	bl	1100c <__fprintf_chk@plt>
   17790:	mov	r1, r4
   17794:	mov	r0, #10
   17798:	bl	10ebc <fputc_unlocked@plt>
   1779c:	mov	r2, #5
   177a0:	movw	r1, #47332	; 0xb8e4
   177a4:	movt	r1, #1
   177a8:	mov	r0, #0
   177ac:	bl	10ec8 <dcgettext@plt>
   177b0:	movw	r3, #47504	; 0xb990
   177b4:	movt	r3, #1
   177b8:	mov	r2, r0
   177bc:	mov	r1, #1
   177c0:	mov	r0, r4
   177c4:	bl	1100c <__fprintf_chk@plt>
   177c8:	mov	r1, r4
   177cc:	mov	r0, #10
   177d0:	bl	10ebc <fputc_unlocked@plt>
   177d4:	cmp	r6, #9
   177d8:	ldrls	pc, [pc, r6, lsl #2]
   177dc:	b	17ae0 <__assert_fail@plt+0x6a14>
   177e0:	andeq	r7, r1, ip, asr #16
   177e4:	andeq	r7, r1, r4, lsr #16
   177e8:	andeq	r7, r1, r0, ror #16
   177ec:	muleq	r1, r4, r8
   177f0:	ldrdeq	r7, [r1], -r0
   177f4:	andeq	r7, r1, r4, lsl r9
   177f8:	andeq	r7, r1, r0, ror #18
   177fc:			; <UNDEFINED> instruction: 0x000179b4
   17800:	andeq	r7, r1, r0, lsl sl
   17804:	andeq	r7, r1, r4, ror sl
   17808:	str	r3, [sp]
   1780c:	mov	r3, r2
   17810:	movw	r2, #47320	; 0xb8d8
   17814:	movt	r2, #1
   17818:	mov	r1, #1
   1781c:	bl	1100c <__fprintf_chk@plt>
   17820:	b	1775c <__assert_fail@plt+0x6690>
   17824:	mov	r2, #5
   17828:	movw	r1, #47540	; 0xb9b4
   1782c:	movt	r1, #1
   17830:	mov	r0, #0
   17834:	bl	10ec8 <dcgettext@plt>
   17838:	ldr	r3, [r5]
   1783c:	mov	r2, r0
   17840:	mov	r1, #1
   17844:	mov	r0, r4
   17848:	bl	1100c <__fprintf_chk@plt>
   1784c:	add	sp, sp, #32
   17850:	ldrd	r4, [sp]
   17854:	ldr	r6, [sp, #8]
   17858:	add	sp, sp, #12
   1785c:	pop	{pc}		; (ldr pc, [sp], #4)
   17860:	mov	r2, #5
   17864:	movw	r1, #47556	; 0xb9c4
   17868:	movt	r1, #1
   1786c:	mov	r0, #0
   17870:	bl	10ec8 <dcgettext@plt>
   17874:	ldr	r3, [r5, #4]
   17878:	str	r3, [sp]
   1787c:	ldr	r3, [r5]
   17880:	mov	r2, r0
   17884:	mov	r1, #1
   17888:	mov	r0, r4
   1788c:	bl	1100c <__fprintf_chk@plt>
   17890:	b	1784c <__assert_fail@plt+0x6780>
   17894:	mov	r2, #5
   17898:	movw	r1, #47580	; 0xb9dc
   1789c:	movt	r1, #1
   178a0:	mov	r0, #0
   178a4:	bl	10ec8 <dcgettext@plt>
   178a8:	ldr	r3, [r5, #8]
   178ac:	str	r3, [sp, #4]
   178b0:	ldr	r3, [r5, #4]
   178b4:	str	r3, [sp]
   178b8:	ldr	r3, [r5]
   178bc:	mov	r2, r0
   178c0:	mov	r1, #1
   178c4:	mov	r0, r4
   178c8:	bl	1100c <__fprintf_chk@plt>
   178cc:	b	1784c <__assert_fail@plt+0x6780>
   178d0:	mov	r2, #5
   178d4:	movw	r1, #47608	; 0xb9f8
   178d8:	movt	r1, #1
   178dc:	mov	r0, #0
   178e0:	bl	10ec8 <dcgettext@plt>
   178e4:	ldr	r3, [r5, #12]
   178e8:	str	r3, [sp, #8]
   178ec:	ldr	r3, [r5, #8]
   178f0:	str	r3, [sp, #4]
   178f4:	ldr	r3, [r5, #4]
   178f8:	str	r3, [sp]
   178fc:	ldr	r3, [r5]
   17900:	mov	r2, r0
   17904:	mov	r1, #1
   17908:	mov	r0, r4
   1790c:	bl	1100c <__fprintf_chk@plt>
   17910:	b	1784c <__assert_fail@plt+0x6780>
   17914:	mov	r2, #5
   17918:	movw	r1, #47640	; 0xba18
   1791c:	movt	r1, #1
   17920:	mov	r0, #0
   17924:	bl	10ec8 <dcgettext@plt>
   17928:	ldr	r3, [r5, #16]
   1792c:	str	r3, [sp, #12]
   17930:	ldr	r3, [r5, #12]
   17934:	str	r3, [sp, #8]
   17938:	ldr	r3, [r5, #8]
   1793c:	str	r3, [sp, #4]
   17940:	ldr	r3, [r5, #4]
   17944:	str	r3, [sp]
   17948:	ldr	r3, [r5]
   1794c:	mov	r2, r0
   17950:	mov	r1, #1
   17954:	mov	r0, r4
   17958:	bl	1100c <__fprintf_chk@plt>
   1795c:	b	1784c <__assert_fail@plt+0x6780>
   17960:	mov	r2, #5
   17964:	movw	r1, #47676	; 0xba3c
   17968:	movt	r1, #1
   1796c:	mov	r0, #0
   17970:	bl	10ec8 <dcgettext@plt>
   17974:	ldr	r3, [r5, #20]
   17978:	str	r3, [sp, #16]
   1797c:	ldr	r3, [r5, #16]
   17980:	str	r3, [sp, #12]
   17984:	ldr	r3, [r5, #12]
   17988:	str	r3, [sp, #8]
   1798c:	ldr	r3, [r5, #8]
   17990:	str	r3, [sp, #4]
   17994:	ldr	r3, [r5, #4]
   17998:	str	r3, [sp]
   1799c:	ldr	r3, [r5]
   179a0:	mov	r2, r0
   179a4:	mov	r1, #1
   179a8:	mov	r0, r4
   179ac:	bl	1100c <__fprintf_chk@plt>
   179b0:	b	1784c <__assert_fail@plt+0x6780>
   179b4:	mov	r2, #5
   179b8:	movw	r1, #47716	; 0xba64
   179bc:	movt	r1, #1
   179c0:	mov	r0, #0
   179c4:	bl	10ec8 <dcgettext@plt>
   179c8:	ldr	r3, [r5, #24]
   179cc:	str	r3, [sp, #20]
   179d0:	ldr	r3, [r5, #20]
   179d4:	str	r3, [sp, #16]
   179d8:	ldr	r3, [r5, #16]
   179dc:	str	r3, [sp, #12]
   179e0:	ldr	r3, [r5, #12]
   179e4:	str	r3, [sp, #8]
   179e8:	ldr	r3, [r5, #8]
   179ec:	str	r3, [sp, #4]
   179f0:	ldr	r3, [r5, #4]
   179f4:	str	r3, [sp]
   179f8:	ldr	r3, [r5]
   179fc:	mov	r2, r0
   17a00:	mov	r1, #1
   17a04:	mov	r0, r4
   17a08:	bl	1100c <__fprintf_chk@plt>
   17a0c:	b	1784c <__assert_fail@plt+0x6780>
   17a10:	mov	r2, #5
   17a14:	movw	r1, #47760	; 0xba90
   17a18:	movt	r1, #1
   17a1c:	mov	r0, #0
   17a20:	bl	10ec8 <dcgettext@plt>
   17a24:	ldr	r3, [r5, #28]
   17a28:	str	r3, [sp, #24]
   17a2c:	ldr	r3, [r5, #24]
   17a30:	str	r3, [sp, #20]
   17a34:	ldr	r3, [r5, #20]
   17a38:	str	r3, [sp, #16]
   17a3c:	ldr	r3, [r5, #16]
   17a40:	str	r3, [sp, #12]
   17a44:	ldr	r3, [r5, #12]
   17a48:	str	r3, [sp, #8]
   17a4c:	ldr	r3, [r5, #8]
   17a50:	str	r3, [sp, #4]
   17a54:	ldr	r3, [r5, #4]
   17a58:	str	r3, [sp]
   17a5c:	ldr	r3, [r5]
   17a60:	mov	r2, r0
   17a64:	mov	r1, #1
   17a68:	mov	r0, r4
   17a6c:	bl	1100c <__fprintf_chk@plt>
   17a70:	b	1784c <__assert_fail@plt+0x6780>
   17a74:	mov	r2, #5
   17a78:	movw	r1, #47808	; 0xbac0
   17a7c:	movt	r1, #1
   17a80:	mov	r0, #0
   17a84:	bl	10ec8 <dcgettext@plt>
   17a88:	ldr	r3, [r5, #32]
   17a8c:	str	r3, [sp, #28]
   17a90:	ldr	r3, [r5, #28]
   17a94:	str	r3, [sp, #24]
   17a98:	ldr	r3, [r5, #24]
   17a9c:	str	r3, [sp, #20]
   17aa0:	ldr	r3, [r5, #20]
   17aa4:	str	r3, [sp, #16]
   17aa8:	ldr	r3, [r5, #16]
   17aac:	str	r3, [sp, #12]
   17ab0:	ldr	r3, [r5, #12]
   17ab4:	str	r3, [sp, #8]
   17ab8:	ldr	r3, [r5, #8]
   17abc:	str	r3, [sp, #4]
   17ac0:	ldr	r3, [r5, #4]
   17ac4:	str	r3, [sp]
   17ac8:	ldr	r3, [r5]
   17acc:	mov	r2, r0
   17ad0:	mov	r1, #1
   17ad4:	mov	r0, r4
   17ad8:	bl	1100c <__fprintf_chk@plt>
   17adc:	b	1784c <__assert_fail@plt+0x6780>
   17ae0:	mov	r2, #5
   17ae4:	movw	r1, #47860	; 0xbaf4
   17ae8:	movt	r1, #1
   17aec:	mov	r0, #0
   17af0:	bl	10ec8 <dcgettext@plt>
   17af4:	ldr	r3, [r5, #32]
   17af8:	str	r3, [sp, #28]
   17afc:	ldr	r3, [r5, #28]
   17b00:	str	r3, [sp, #24]
   17b04:	ldr	r3, [r5, #24]
   17b08:	str	r3, [sp, #20]
   17b0c:	ldr	r3, [r5, #20]
   17b10:	str	r3, [sp, #16]
   17b14:	ldr	r3, [r5, #16]
   17b18:	str	r3, [sp, #12]
   17b1c:	ldr	r3, [r5, #12]
   17b20:	str	r3, [sp, #8]
   17b24:	ldr	r3, [r5, #8]
   17b28:	str	r3, [sp, #4]
   17b2c:	ldr	r3, [r5, #4]
   17b30:	str	r3, [sp]
   17b34:	ldr	r3, [r5]
   17b38:	mov	r2, r0
   17b3c:	mov	r1, #1
   17b40:	mov	r0, r4
   17b44:	bl	1100c <__fprintf_chk@plt>
   17b48:	b	1784c <__assert_fail@plt+0x6780>
   17b4c:	strd	r4, [sp, #-12]!
   17b50:	str	lr, [sp, #8]
   17b54:	sub	sp, sp, #12
   17b58:	ldr	r5, [sp, #24]
   17b5c:	ldr	ip, [r5]
   17b60:	cmp	ip, #0
   17b64:	beq	17b9c <__assert_fail@plt+0x6ad0>
   17b68:	mov	lr, r5
   17b6c:	mov	ip, #0
   17b70:	add	ip, ip, #1
   17b74:	ldr	r4, [lr, #4]!
   17b78:	cmp	r4, #0
   17b7c:	bne	17b70 <__assert_fail@plt+0x6aa4>
   17b80:	str	ip, [sp, #4]
   17b84:	str	r5, [sp]
   17b88:	bl	1771c <__assert_fail@plt+0x6650>
   17b8c:	add	sp, sp, #12
   17b90:	ldrd	r4, [sp]
   17b94:	add	sp, sp, #8
   17b98:	pop	{pc}		; (ldr pc, [sp], #4)
   17b9c:	mov	ip, #0
   17ba0:	b	17b80 <__assert_fail@plt+0x6ab4>
   17ba4:	strd	r4, [sp, #-12]!
   17ba8:	str	lr, [sp, #8]
   17bac:	sub	sp, sp, #52	; 0x34
   17bb0:	ldr	r5, [sp, #64]	; 0x40
   17bb4:	add	r4, sp, #8
   17bb8:	mov	ip, #0
   17bbc:	ldr	lr, [r5], #4
   17bc0:	str	lr, [r4], #4
   17bc4:	cmp	lr, #0
   17bc8:	beq	17bd8 <__assert_fail@plt+0x6b0c>
   17bcc:	add	ip, ip, #1
   17bd0:	cmp	ip, #10
   17bd4:	bne	17bbc <__assert_fail@plt+0x6af0>
   17bd8:	str	ip, [sp, #4]
   17bdc:	add	ip, sp, #8
   17be0:	str	ip, [sp]
   17be4:	bl	1771c <__assert_fail@plt+0x6650>
   17be8:	add	sp, sp, #52	; 0x34
   17bec:	ldrd	r4, [sp]
   17bf0:	add	sp, sp, #8
   17bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   17bf8:	push	{r3}		; (str r3, [sp, #-4]!)
   17bfc:	push	{lr}		; (str lr, [sp, #-4]!)
   17c00:	sub	sp, sp, #16
   17c04:	add	r3, sp, #24
   17c08:	str	r3, [sp, #12]
   17c0c:	str	r3, [sp]
   17c10:	ldr	r3, [sp, #20]
   17c14:	bl	17ba4 <__assert_fail@plt+0x6ad8>
   17c18:	add	sp, sp, #16
   17c1c:	pop	{lr}		; (ldr lr, [sp], #4)
   17c20:	add	sp, sp, #4
   17c24:	bx	lr
   17c28:	str	r4, [sp, #-8]!
   17c2c:	str	lr, [sp, #4]
   17c30:	movw	r3, #49564	; 0xc19c
   17c34:	movt	r3, #2
   17c38:	ldr	r1, [r3]
   17c3c:	mov	r0, #10
   17c40:	bl	10ebc <fputc_unlocked@plt>
   17c44:	mov	r2, #5
   17c48:	movw	r1, #47920	; 0xbb30
   17c4c:	movt	r1, #1
   17c50:	mov	r0, #0
   17c54:	bl	10ec8 <dcgettext@plt>
   17c58:	movw	r2, #47940	; 0xbb44
   17c5c:	movt	r2, #1
   17c60:	mov	r1, r0
   17c64:	mov	r0, #1
   17c68:	bl	10ff4 <__printf_chk@plt>
   17c6c:	mov	r2, #5
   17c70:	movw	r1, #47964	; 0xbb5c
   17c74:	movt	r1, #1
   17c78:	mov	r0, #0
   17c7c:	bl	10ec8 <dcgettext@plt>
   17c80:	movw	r3, #45004	; 0xafcc
   17c84:	movt	r3, #1
   17c88:	movw	r2, #45044	; 0xaff4
   17c8c:	movt	r2, #1
   17c90:	mov	r1, r0
   17c94:	mov	r0, #1
   17c98:	bl	10ff4 <__printf_chk@plt>
   17c9c:	mov	r2, #5
   17ca0:	movw	r1, #47984	; 0xbb70
   17ca4:	movt	r1, #1
   17ca8:	mov	r0, #0
   17cac:	bl	10ec8 <dcgettext@plt>
   17cb0:	movw	r2, #48024	; 0xbb98
   17cb4:	movt	r2, #1
   17cb8:	mov	r1, r0
   17cbc:	mov	r0, #1
   17cc0:	bl	10ff4 <__printf_chk@plt>
   17cc4:	ldr	r4, [sp]
   17cc8:	add	sp, sp, #4
   17ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   17cd0:	str	r4, [sp, #-8]!
   17cd4:	str	lr, [sp, #4]
   17cd8:	bl	18e18 <__assert_fail@plt+0x7d4c>
   17cdc:	cmp	r0, #0
   17ce0:	beq	17cf0 <__assert_fail@plt+0x6c24>
   17ce4:	ldr	r4, [sp]
   17ce8:	add	sp, sp, #4
   17cec:	pop	{pc}		; (ldr pc, [sp], #4)
   17cf0:	bl	18164 <__assert_fail@plt+0x7098>
   17cf4:	str	r4, [sp, #-8]!
   17cf8:	str	lr, [sp, #4]
   17cfc:	bl	18e18 <__assert_fail@plt+0x7d4c>
   17d00:	cmp	r0, #0
   17d04:	beq	17d14 <__assert_fail@plt+0x6c48>
   17d08:	ldr	r4, [sp]
   17d0c:	add	sp, sp, #4
   17d10:	pop	{pc}		; (ldr pc, [sp], #4)
   17d14:	bl	18164 <__assert_fail@plt+0x7098>
   17d18:	str	r4, [sp, #-8]!
   17d1c:	str	lr, [sp, #4]
   17d20:	bl	17cd0 <__assert_fail@plt+0x6c04>
   17d24:	ldr	r4, [sp]
   17d28:	add	sp, sp, #4
   17d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d30:	strd	r4, [sp, #-16]!
   17d34:	str	r6, [sp, #8]
   17d38:	str	lr, [sp, #12]
   17d3c:	mov	r5, r0
   17d40:	mov	r4, r1
   17d44:	bl	18e54 <__assert_fail@plt+0x7d88>
   17d48:	cmp	r0, #0
   17d4c:	beq	17d60 <__assert_fail@plt+0x6c94>
   17d50:	ldrd	r4, [sp]
   17d54:	ldr	r6, [sp, #8]
   17d58:	add	sp, sp, #12
   17d5c:	pop	{pc}		; (ldr pc, [sp], #4)
   17d60:	adds	r4, r4, #0
   17d64:	movne	r4, #1
   17d68:	cmp	r5, #0
   17d6c:	moveq	r4, #1
   17d70:	cmp	r4, #0
   17d74:	beq	17d50 <__assert_fail@plt+0x6c84>
   17d78:	bl	18164 <__assert_fail@plt+0x7098>
   17d7c:	str	r4, [sp, #-8]!
   17d80:	str	lr, [sp, #4]
   17d84:	cmp	r1, #0
   17d88:	orreq	r1, r1, #1
   17d8c:	bl	18e54 <__assert_fail@plt+0x7d88>
   17d90:	cmp	r0, #0
   17d94:	beq	17da4 <__assert_fail@plt+0x6cd8>
   17d98:	ldr	r4, [sp]
   17d9c:	add	sp, sp, #4
   17da0:	pop	{pc}		; (ldr pc, [sp], #4)
   17da4:	bl	18164 <__assert_fail@plt+0x7098>
   17da8:	strd	r4, [sp, #-16]!
   17dac:	str	r6, [sp, #8]
   17db0:	str	lr, [sp, #12]
   17db4:	mov	r4, r0
   17db8:	mov	r6, r1
   17dbc:	mov	r5, r2
   17dc0:	bl	191dc <__assert_fail@plt+0x8110>
   17dc4:	cmp	r0, #0
   17dc8:	beq	17ddc <__assert_fail@plt+0x6d10>
   17dcc:	ldrd	r4, [sp]
   17dd0:	ldr	r6, [sp, #8]
   17dd4:	add	sp, sp, #12
   17dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   17ddc:	cmp	r4, #0
   17de0:	beq	17df0 <__assert_fail@plt+0x6d24>
   17de4:	cmp	r6, #0
   17de8:	cmpne	r5, #0
   17dec:	beq	17dcc <__assert_fail@plt+0x6d00>
   17df0:	bl	18164 <__assert_fail@plt+0x7098>
   17df4:	str	r4, [sp, #-8]!
   17df8:	str	lr, [sp, #4]
   17dfc:	bl	17da8 <__assert_fail@plt+0x6cdc>
   17e00:	ldr	r4, [sp]
   17e04:	add	sp, sp, #4
   17e08:	pop	{pc}		; (ldr pc, [sp], #4)
   17e0c:	str	r4, [sp, #-8]!
   17e10:	str	lr, [sp, #4]
   17e14:	mov	ip, r1
   17e18:	mov	r3, r2
   17e1c:	cmp	r2, #0
   17e20:	cmpne	r1, #0
   17e24:	moveq	r3, #1
   17e28:	moveq	ip, r3
   17e2c:	mov	r2, r3
   17e30:	mov	r1, ip
   17e34:	bl	191dc <__assert_fail@plt+0x8110>
   17e38:	cmp	r0, #0
   17e3c:	beq	17e4c <__assert_fail@plt+0x6d80>
   17e40:	ldr	r4, [sp]
   17e44:	add	sp, sp, #4
   17e48:	pop	{pc}		; (ldr pc, [sp], #4)
   17e4c:	bl	18164 <__assert_fail@plt+0x7098>
   17e50:	str	r4, [sp, #-8]!
   17e54:	str	lr, [sp, #4]
   17e58:	mov	r2, r1
   17e5c:	mov	r1, r0
   17e60:	mov	r0, #0
   17e64:	bl	17da8 <__assert_fail@plt+0x6cdc>
   17e68:	ldr	r4, [sp]
   17e6c:	add	sp, sp, #4
   17e70:	pop	{pc}		; (ldr pc, [sp], #4)
   17e74:	str	r4, [sp, #-8]!
   17e78:	str	lr, [sp, #4]
   17e7c:	mov	r2, r1
   17e80:	mov	r1, r0
   17e84:	mov	r0, #0
   17e88:	bl	17e0c <__assert_fail@plt+0x6d40>
   17e8c:	ldr	r4, [sp]
   17e90:	add	sp, sp, #4
   17e94:	pop	{pc}		; (ldr pc, [sp], #4)
   17e98:	strd	r4, [sp, #-16]!
   17e9c:	str	r6, [sp, #8]
   17ea0:	str	lr, [sp, #12]
   17ea4:	mov	r5, r1
   17ea8:	ldr	r4, [r1]
   17eac:	cmp	r0, #0
   17eb0:	beq	17ee0 <__assert_fail@plt+0x6e14>
   17eb4:	lsr	r3, r4, #1
   17eb8:	add	r3, r3, #1
   17ebc:	adds	r4, r4, r3
   17ec0:	bcs	17efc <__assert_fail@plt+0x6e30>
   17ec4:	mov	r1, r4
   17ec8:	bl	17da8 <__assert_fail@plt+0x6cdc>
   17ecc:	str	r4, [r5]
   17ed0:	ldrd	r4, [sp]
   17ed4:	ldr	r6, [sp, #8]
   17ed8:	add	sp, sp, #12
   17edc:	pop	{pc}		; (ldr pc, [sp], #4)
   17ee0:	cmp	r4, #0
   17ee4:	bne	17ec4 <__assert_fail@plt+0x6df8>
   17ee8:	mov	r4, #64	; 0x40
   17eec:	udiv	r4, r4, r2
   17ef0:	cmp	r2, #64	; 0x40
   17ef4:	addhi	r4, r4, #1
   17ef8:	b	17ec4 <__assert_fail@plt+0x6df8>
   17efc:	bl	18164 <__assert_fail@plt+0x7098>
   17f00:	str	r4, [sp, #-8]!
   17f04:	str	lr, [sp, #4]
   17f08:	mov	r2, #1
   17f0c:	bl	17e98 <__assert_fail@plt+0x6dcc>
   17f10:	ldr	r4, [sp]
   17f14:	add	sp, sp, #4
   17f18:	pop	{pc}		; (ldr pc, [sp], #4)
   17f1c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17f20:	strd	r6, [sp, #8]
   17f24:	str	r8, [sp, #16]
   17f28:	str	lr, [sp, #20]
   17f2c:	mov	r5, r1
   17f30:	ldr	lr, [sp, #24]
   17f34:	ldr	ip, [r1]
   17f38:	asr	r4, ip, #1
   17f3c:	adds	r4, ip, r4
   17f40:	movvs	r1, #1
   17f44:	movvc	r1, #0
   17f48:	cmp	r1, #0
   17f4c:	mvnne	r4, #-2147483648	; 0x80000000
   17f50:	mvn	r8, r3
   17f54:	lsr	r8, r8, #31
   17f58:	cmp	r3, r4
   17f5c:	movge	r1, #0
   17f60:	andlt	r1, r8, #1
   17f64:	cmp	r1, #0
   17f68:	movne	r4, r3
   17f6c:	smull	r6, r7, r4, lr
   17f70:	asr	r1, r6, #31
   17f74:	cmp	r1, r7
   17f78:	bne	17f90 <__assert_fail@plt+0x6ec4>
   17f7c:	mov	r1, r6
   17f80:	cmp	r6, #63	; 0x3f
   17f84:	movle	r1, #64	; 0x40
   17f88:	ble	17f94 <__assert_fail@plt+0x6ec8>
   17f8c:	b	17fa0 <__assert_fail@plt+0x6ed4>
   17f90:	mvn	r1, #-2147483648	; 0x80000000
   17f94:	sdiv	r4, r1, lr
   17f98:	mls	r6, lr, r4, r1
   17f9c:	sub	r1, r1, r6
   17fa0:	cmp	r0, #0
   17fa4:	moveq	r6, #0
   17fa8:	streq	r6, [r5]
   17fac:	sub	r6, r4, ip
   17fb0:	cmp	r6, r2
   17fb4:	bge	17fec <__assert_fail@plt+0x6f20>
   17fb8:	adds	r2, ip, r2
   17fbc:	mov	r4, r2
   17fc0:	bvs	18008 <__assert_fail@plt+0x6f3c>
   17fc4:	cmp	r2, r3
   17fc8:	movle	r3, #0
   17fcc:	andgt	r3, r8, #1
   17fd0:	cmp	r3, #0
   17fd4:	bne	18008 <__assert_fail@plt+0x6f3c>
   17fd8:	smull	r2, r3, r2, lr
   17fdc:	asr	ip, r2, #31
   17fe0:	mov	r1, r2
   17fe4:	cmp	ip, r3
   17fe8:	bne	18008 <__assert_fail@plt+0x6f3c>
   17fec:	bl	17d30 <__assert_fail@plt+0x6c64>
   17ff0:	str	r4, [r5]
   17ff4:	ldrd	r4, [sp]
   17ff8:	ldrd	r6, [sp, #8]
   17ffc:	ldr	r8, [sp, #16]
   18000:	add	sp, sp, #20
   18004:	pop	{pc}		; (ldr pc, [sp], #4)
   18008:	bl	18164 <__assert_fail@plt+0x7098>
   1800c:	str	r4, [sp, #-8]!
   18010:	str	lr, [sp, #4]
   18014:	bl	18da4 <__assert_fail@plt+0x7cd8>
   18018:	cmp	r0, #0
   1801c:	beq	1802c <__assert_fail@plt+0x6f60>
   18020:	ldr	r4, [sp]
   18024:	add	sp, sp, #4
   18028:	pop	{pc}		; (ldr pc, [sp], #4)
   1802c:	bl	18164 <__assert_fail@plt+0x7098>
   18030:	str	r4, [sp, #-8]!
   18034:	str	lr, [sp, #4]
   18038:	mov	r1, #1
   1803c:	bl	1800c <__assert_fail@plt+0x6f40>
   18040:	ldr	r4, [sp]
   18044:	add	sp, sp, #4
   18048:	pop	{pc}		; (ldr pc, [sp], #4)
   1804c:	str	r4, [sp, #-8]!
   18050:	str	lr, [sp, #4]
   18054:	bl	18da4 <__assert_fail@plt+0x7cd8>
   18058:	cmp	r0, #0
   1805c:	beq	1806c <__assert_fail@plt+0x6fa0>
   18060:	ldr	r4, [sp]
   18064:	add	sp, sp, #4
   18068:	pop	{pc}		; (ldr pc, [sp], #4)
   1806c:	bl	18164 <__assert_fail@plt+0x7098>
   18070:	str	r4, [sp, #-8]!
   18074:	str	lr, [sp, #4]
   18078:	mov	r1, #1
   1807c:	bl	1804c <__assert_fail@plt+0x6f80>
   18080:	ldr	r4, [sp]
   18084:	add	sp, sp, #4
   18088:	pop	{pc}		; (ldr pc, [sp], #4)
   1808c:	strd	r4, [sp, #-16]!
   18090:	str	r6, [sp, #8]
   18094:	str	lr, [sp, #12]
   18098:	mov	r5, r0
   1809c:	mov	r4, r1
   180a0:	mov	r0, r1
   180a4:	bl	17cd0 <__assert_fail@plt+0x6c04>
   180a8:	mov	r2, r4
   180ac:	mov	r1, r5
   180b0:	bl	10e8c <memcpy@plt>
   180b4:	ldrd	r4, [sp]
   180b8:	ldr	r6, [sp, #8]
   180bc:	add	sp, sp, #12
   180c0:	pop	{pc}		; (ldr pc, [sp], #4)
   180c4:	strd	r4, [sp, #-16]!
   180c8:	str	r6, [sp, #8]
   180cc:	str	lr, [sp, #12]
   180d0:	mov	r5, r0
   180d4:	mov	r4, r1
   180d8:	mov	r0, r1
   180dc:	bl	17cf4 <__assert_fail@plt+0x6c28>
   180e0:	mov	r2, r4
   180e4:	mov	r1, r5
   180e8:	bl	10e8c <memcpy@plt>
   180ec:	ldrd	r4, [sp]
   180f0:	ldr	r6, [sp, #8]
   180f4:	add	sp, sp, #12
   180f8:	pop	{pc}		; (ldr pc, [sp], #4)
   180fc:	strd	r4, [sp, #-16]!
   18100:	str	r6, [sp, #8]
   18104:	str	lr, [sp, #12]
   18108:	mov	r5, r0
   1810c:	mov	r4, r1
   18110:	add	r0, r1, #1
   18114:	bl	17cf4 <__assert_fail@plt+0x6c28>
   18118:	mov	r2, #0
   1811c:	strb	r2, [r0, r4]
   18120:	mov	r2, r4
   18124:	mov	r1, r5
   18128:	bl	10e8c <memcpy@plt>
   1812c:	ldrd	r4, [sp]
   18130:	ldr	r6, [sp, #8]
   18134:	add	sp, sp, #12
   18138:	pop	{pc}		; (ldr pc, [sp], #4)
   1813c:	str	r4, [sp, #-8]!
   18140:	str	lr, [sp, #4]
   18144:	mov	r4, r0
   18148:	bl	10fb8 <strlen@plt>
   1814c:	add	r1, r0, #1
   18150:	mov	r0, r4
   18154:	bl	1808c <__assert_fail@plt+0x6fc0>
   18158:	ldr	r4, [sp]
   1815c:	add	sp, sp, #4
   18160:	pop	{pc}		; (ldr pc, [sp], #4)
   18164:	str	r4, [sp, #-8]!
   18168:	str	lr, [sp, #4]
   1816c:	movw	r3, #49468	; 0xc13c
   18170:	movt	r3, #2
   18174:	ldr	r4, [r3]
   18178:	mov	r2, #5
   1817c:	movw	r1, #48104	; 0xbbe8
   18180:	movt	r1, #1
   18184:	mov	r0, #0
   18188:	bl	10ec8 <dcgettext@plt>
   1818c:	mov	r3, r0
   18190:	movw	r2, #39520	; 0x9a60
   18194:	movt	r2, #1
   18198:	mov	r1, #0
   1819c:	mov	r0, r4
   181a0:	bl	10f4c <error@plt>
   181a4:	bl	110a8 <abort@plt>
   181a8:	cmp	r2, #0
   181ac:	beq	18218 <__assert_fail@plt+0x714c>
   181b0:	strd	r4, [sp, #-20]!	; 0xffffffec
   181b4:	strd	r6, [sp, #8]
   181b8:	str	lr, [sp, #16]
   181bc:	mov	r4, r0
   181c0:	sub	ip, r2, #1
   181c4:	mov	r0, #0
   181c8:	mov	r6, r0
   181cc:	mov	r7, #1
   181d0:	b	181e4 <__assert_fail@plt+0x7118>
   181d4:	orr	r0, r0, r3
   181d8:	sub	ip, ip, #1
   181dc:	cmn	ip, #1
   181e0:	beq	18220 <__assert_fail@plt+0x7154>
   181e4:	ldr	lr, [r4]
   181e8:	smull	r2, r3, lr, r1
   181ec:	asr	r5, r2, #31
   181f0:	cmp	r5, r3
   181f4:	streq	r2, [r4]
   181f8:	moveq	r3, r6
   181fc:	beq	181d4 <__assert_fail@plt+0x7108>
   18200:	cmp	lr, #0
   18204:	movlt	r3, #-2147483648	; 0x80000000
   18208:	mvnge	r3, #-2147483648	; 0x80000000
   1820c:	str	r3, [r4]
   18210:	mov	r3, r7
   18214:	b	181d4 <__assert_fail@plt+0x7108>
   18218:	mov	r0, #0
   1821c:	bx	lr
   18220:	ldrd	r4, [sp]
   18224:	ldrd	r6, [sp, #8]
   18228:	add	sp, sp, #16
   1822c:	pop	{pc}		; (ldr pc, [sp], #4)
   18230:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18234:	strd	r6, [sp, #8]
   18238:	str	r8, [sp, #16]
   1823c:	strd	sl, [sp, #20]
   18240:	str	lr, [sp, #28]
   18244:	sub	sp, sp, #8
   18248:	cmp	r2, #36	; 0x24
   1824c:	bhi	182b8 <__assert_fail@plt+0x71ec>
   18250:	mov	r5, r0
   18254:	mov	r4, r1
   18258:	mov	r6, r2
   1825c:	mov	r8, r3
   18260:	cmp	r1, #0
   18264:	addeq	r4, sp, #4
   18268:	bl	10fd0 <__errno_location@plt>
   1826c:	mov	r7, r0
   18270:	mov	r3, #0
   18274:	str	r3, [r0]
   18278:	mov	r2, r6
   1827c:	mov	r1, r4
   18280:	mov	r0, r5
   18284:	bl	10e44 <strtol@plt>
   18288:	str	r0, [sp]
   1828c:	ldr	r6, [r4]
   18290:	cmp	r6, r5
   18294:	beq	182d8 <__assert_fail@plt+0x720c>
   18298:	ldr	r3, [r7]
   1829c:	cmp	r3, #0
   182a0:	beq	183f8 <__assert_fail@plt+0x732c>
   182a4:	cmp	r3, #34	; 0x22
   182a8:	moveq	r5, #1
   182ac:	beq	183fc <__assert_fail@plt+0x7330>
   182b0:	mov	r5, #4
   182b4:	b	18420 <__assert_fail@plt+0x7354>
   182b8:	movw	r3, #48124	; 0xbbfc
   182bc:	movt	r3, #1
   182c0:	mov	r2, #85	; 0x55
   182c4:	movw	r1, #48132	; 0xbc04
   182c8:	movt	r1, #1
   182cc:	movw	r0, #48148	; 0xbc14
   182d0:	movt	r0, #1
   182d4:	bl	110cc <__assert_fail@plt>
   182d8:	ldr	r3, [sp, #40]	; 0x28
   182dc:	cmp	r3, #0
   182e0:	beq	18720 <__assert_fail@plt+0x7654>
   182e4:	ldrb	r1, [r5]
   182e8:	cmp	r1, #0
   182ec:	moveq	r5, #4
   182f0:	beq	18420 <__assert_fail@plt+0x7354>
   182f4:	mov	r0, r3
   182f8:	bl	10fc4 <strchr@plt>
   182fc:	cmp	r0, #0
   18300:	beq	18728 <__assert_fail@plt+0x765c>
   18304:	mov	r3, #1
   18308:	str	r3, [sp]
   1830c:	ldrb	r7, [r6]
   18310:	mov	r5, #0
   18314:	mov	r1, r7
   18318:	ldr	r0, [sp, #40]	; 0x28
   1831c:	bl	10fc4 <strchr@plt>
   18320:	cmp	r0, #0
   18324:	beq	18440 <__assert_fail@plt+0x7374>
   18328:	sub	r3, r7, #69	; 0x45
   1832c:	cmp	r3, #47	; 0x2f
   18330:	ldrls	pc, [pc, r3, lsl #2]
   18334:	b	1858c <__assert_fail@plt+0x74c0>
   18338:	andeq	r8, r1, r0, asr r4
   1833c:	andeq	r8, r1, ip, lsl #11
   18340:	andeq	r8, r1, r0, asr r4
   18344:	andeq	r8, r1, ip, lsl #11
   18348:	andeq	r8, r1, ip, lsl #11
   1834c:	andeq	r8, r1, ip, lsl #11
   18350:	andeq	r8, r1, r0, asr r4
   18354:	andeq	r8, r1, ip, lsl #11
   18358:	andeq	r8, r1, r0, asr r4
   1835c:	andeq	r8, r1, ip, lsl #11
   18360:	andeq	r8, r1, ip, lsl #11
   18364:	andeq	r8, r1, r0, asr r4
   18368:	andeq	r8, r1, ip, lsl #11
   1836c:	andeq	r8, r1, ip, lsl #11
   18370:	andeq	r8, r1, ip, lsl #11
   18374:	andeq	r8, r1, r0, asr r4
   18378:	andeq	r8, r1, ip, lsl #11
   1837c:	andeq	r8, r1, ip, lsl #11
   18380:	andeq	r8, r1, ip, lsl #11
   18384:	andeq	r8, r1, ip, lsl #11
   18388:	andeq	r8, r1, r0, asr r4
   1838c:	andeq	r8, r1, r0, asr r4
   18390:	andeq	r8, r1, ip, lsl #11
   18394:	andeq	r8, r1, ip, lsl #11
   18398:	andeq	r8, r1, ip, lsl #11
   1839c:	andeq	r8, r1, ip, lsl #11
   183a0:	andeq	r8, r1, ip, lsl #11
   183a4:	andeq	r8, r1, ip, lsl #11
   183a8:	andeq	r8, r1, ip, lsl #11
   183ac:	andeq	r8, r1, ip, lsl #11
   183b0:	andeq	r8, r1, ip, lsl #11
   183b4:	andeq	r8, r1, ip, lsl #11
   183b8:	andeq	r8, r1, ip, lsl #11
   183bc:	andeq	r8, r1, ip, lsl #11
   183c0:	andeq	r8, r1, r0, asr r4
   183c4:	andeq	r8, r1, ip, lsl #11
   183c8:	andeq	r8, r1, ip, lsl #11
   183cc:	andeq	r8, r1, ip, lsl #11
   183d0:	andeq	r8, r1, r0, asr r4
   183d4:	andeq	r8, r1, ip, lsl #11
   183d8:	andeq	r8, r1, r0, asr r4
   183dc:	andeq	r8, r1, ip, lsl #11
   183e0:	andeq	r8, r1, ip, lsl #11
   183e4:	andeq	r8, r1, ip, lsl #11
   183e8:	andeq	r8, r1, ip, lsl #11
   183ec:	andeq	r8, r1, ip, lsl #11
   183f0:	andeq	r8, r1, ip, lsl #11
   183f4:	andeq	r8, r1, r0, asr r4
   183f8:	mov	r5, #0
   183fc:	ldr	r3, [sp, #40]	; 0x28
   18400:	cmp	r3, #0
   18404:	streq	r0, [r8]
   18408:	beq	18420 <__assert_fail@plt+0x7354>
   1840c:	ldrb	r7, [r6]
   18410:	cmp	r7, #0
   18414:	bne	18314 <__assert_fail@plt+0x7248>
   18418:	ldr	r3, [sp]
   1841c:	str	r3, [r8]
   18420:	mov	r0, r5
   18424:	add	sp, sp, #8
   18428:	ldrd	r4, [sp]
   1842c:	ldrd	r6, [sp, #8]
   18430:	ldr	r8, [sp, #16]
   18434:	ldrd	sl, [sp, #20]
   18438:	add	sp, sp, #28
   1843c:	pop	{pc}		; (ldr pc, [sp], #4)
   18440:	ldr	r3, [sp]
   18444:	str	r3, [r8]
   18448:	orr	r5, r5, #2
   1844c:	b	18420 <__assert_fail@plt+0x7354>
   18450:	mov	r1, #48	; 0x30
   18454:	ldr	r0, [sp, #40]	; 0x28
   18458:	bl	10fc4 <strchr@plt>
   1845c:	cmp	r0, #0
   18460:	beq	18598 <__assert_fail@plt+0x74cc>
   18464:	ldrb	r3, [r6, #1]
   18468:	cmp	r3, #68	; 0x44
   1846c:	beq	185a4 <__assert_fail@plt+0x74d8>
   18470:	cmp	r3, #105	; 0x69
   18474:	beq	18574 <__assert_fail@plt+0x74a8>
   18478:	cmp	r3, #66	; 0x42
   1847c:	moveq	r6, #2
   18480:	movne	r6, #1
   18484:	moveq	r1, #1000	; 0x3e8
   18488:	movne	r1, #1024	; 0x400
   1848c:	sub	r7, r7, #66	; 0x42
   18490:	cmp	r7, #53	; 0x35
   18494:	ldrls	pc, [pc, r7, lsl #2]
   18498:	b	186ec <__assert_fail@plt+0x7620>
   1849c:	strdeq	r8, [r1], -r0
   184a0:	andeq	r8, r1, ip, ror #13
   184a4:	andeq	r8, r1, ip, ror #13
   184a8:	andeq	r8, r1, r0, lsr r6
   184ac:	andeq	r8, r1, ip, ror #13
   184b0:	andeq	r8, r1, r0, asr #12
   184b4:	andeq	r8, r1, ip, ror #13
   184b8:	andeq	r8, r1, ip, ror #13
   184bc:	andeq	r8, r1, ip, ror #13
   184c0:	andeq	r8, r1, r0, asr r6
   184c4:	andeq	r8, r1, ip, ror #13
   184c8:	andeq	r8, r1, r0, ror #12
   184cc:	andeq	r8, r1, ip, ror #13
   184d0:	andeq	r8, r1, ip, ror #13
   184d4:	andeq	r8, r1, r0, ror r6
   184d8:	andeq	r8, r1, ip, ror #13
   184dc:	andeq	r8, r1, ip, ror #13
   184e0:	andeq	r8, r1, ip, ror #13
   184e4:	andeq	r8, r1, r0, lsl #13
   184e8:	andeq	r8, r1, ip, ror #13
   184ec:	andeq	r8, r1, ip, ror #13
   184f0:	andeq	r8, r1, ip, ror #13
   184f4:	andeq	r8, r1, ip, ror #13
   184f8:	andeq	r8, r1, ip, asr #13
   184fc:	ldrdeq	r8, [r1], -ip
   18500:	andeq	r8, r1, ip, ror #13
   18504:	andeq	r8, r1, ip, ror #13
   18508:	andeq	r8, r1, ip, ror #13
   1850c:	andeq	r8, r1, ip, ror #13
   18510:	andeq	r8, r1, ip, ror #13
   18514:	andeq	r8, r1, ip, ror #13
   18518:	andeq	r8, r1, ip, ror #13
   1851c:			; <UNDEFINED> instruction: 0x000185b0
   18520:	strdeq	r8, [r1], -ip
   18524:	andeq	r8, r1, ip, ror #13
   18528:	andeq	r8, r1, ip, ror #13
   1852c:	andeq	r8, r1, ip, ror #13
   18530:	andeq	r8, r1, r0, asr #12
   18534:	andeq	r8, r1, ip, ror #13
   18538:	andeq	r8, r1, ip, ror #13
   1853c:	andeq	r8, r1, ip, ror #13
   18540:	andeq	r8, r1, r0, asr r6
   18544:	andeq	r8, r1, ip, ror #13
   18548:	andeq	r8, r1, r0, ror #12
   1854c:	andeq	r8, r1, ip, ror #13
   18550:	andeq	r8, r1, ip, ror #13
   18554:	andeq	r8, r1, ip, ror #13
   18558:	andeq	r8, r1, ip, ror #13
   1855c:	andeq	r8, r1, ip, ror #13
   18560:	andeq	r8, r1, ip, ror #13
   18564:	andeq	r8, r1, r0, lsl #13
   18568:	andeq	r8, r1, ip, ror #13
   1856c:	andeq	r8, r1, ip, ror #13
   18570:	muleq	r1, r0, r6
   18574:	ldrb	r3, [r6, #2]
   18578:	cmp	r3, #66	; 0x42
   1857c:	movne	r6, #1
   18580:	moveq	r6, #3
   18584:	mov	r1, #1024	; 0x400
   18588:	b	1848c <__assert_fail@plt+0x73c0>
   1858c:	mov	r6, #1
   18590:	mov	r1, #1024	; 0x400
   18594:	b	1848c <__assert_fail@plt+0x73c0>
   18598:	mov	r6, #1
   1859c:	mov	r1, #1024	; 0x400
   185a0:	b	1848c <__assert_fail@plt+0x73c0>
   185a4:	mov	r6, #2
   185a8:	mov	r1, #1000	; 0x3e8
   185ac:	b	1848c <__assert_fail@plt+0x73c0>
   185b0:	ldr	r3, [sp]
   185b4:	asr	r1, r3, #31
   185b8:	lsl	r2, r1, #9
   185bc:	orr	r2, r2, r3, lsr #23
   185c0:	lsl	r1, r3, #9
   185c4:	asr	r0, r1, #31
   185c8:	cmp	r0, r2
   185cc:	streq	r1, [sp]
   185d0:	moveq	r0, #0
   185d4:	beq	18700 <__assert_fail@plt+0x7634>
   185d8:	cmp	r3, #0
   185dc:	movlt	r3, #-2147483648	; 0x80000000
   185e0:	mvnge	r3, #-2147483648	; 0x80000000
   185e4:	str	r3, [sp]
   185e8:	mov	r0, #1
   185ec:	b	18700 <__assert_fail@plt+0x7634>
   185f0:	ldr	r3, [sp]
   185f4:	asr	r1, r3, #31
   185f8:	lsl	r2, r1, #10
   185fc:	orr	r2, r2, r3, lsr #22
   18600:	lsl	r1, r3, #10
   18604:	asr	r0, r1, #31
   18608:	cmp	r0, r2
   1860c:	streq	r1, [sp]
   18610:	moveq	r0, #0
   18614:	beq	18700 <__assert_fail@plt+0x7634>
   18618:	cmp	r3, #0
   1861c:	movlt	r3, #-2147483648	; 0x80000000
   18620:	mvnge	r3, #-2147483648	; 0x80000000
   18624:	str	r3, [sp]
   18628:	mov	r0, #1
   1862c:	b	18700 <__assert_fail@plt+0x7634>
   18630:	mov	r2, #6
   18634:	mov	r0, sp
   18638:	bl	181a8 <__assert_fail@plt+0x70dc>
   1863c:	b	18700 <__assert_fail@plt+0x7634>
   18640:	mov	r2, #3
   18644:	mov	r0, sp
   18648:	bl	181a8 <__assert_fail@plt+0x70dc>
   1864c:	b	18700 <__assert_fail@plt+0x7634>
   18650:	mov	r2, #1
   18654:	mov	r0, sp
   18658:	bl	181a8 <__assert_fail@plt+0x70dc>
   1865c:	b	18700 <__assert_fail@plt+0x7634>
   18660:	mov	r2, #2
   18664:	mov	r0, sp
   18668:	bl	181a8 <__assert_fail@plt+0x70dc>
   1866c:	b	18700 <__assert_fail@plt+0x7634>
   18670:	mov	r2, #5
   18674:	mov	r0, sp
   18678:	bl	181a8 <__assert_fail@plt+0x70dc>
   1867c:	b	18700 <__assert_fail@plt+0x7634>
   18680:	mov	r2, #4
   18684:	mov	r0, sp
   18688:	bl	181a8 <__assert_fail@plt+0x70dc>
   1868c:	b	18700 <__assert_fail@plt+0x7634>
   18690:	ldr	r1, [sp]
   18694:	asr	fp, r1, #31
   18698:	adds	r2, r1, r1
   1869c:	adc	r3, fp, fp
   186a0:	asr	r0, r2, #31
   186a4:	cmp	r0, r3
   186a8:	streq	r2, [sp]
   186ac:	moveq	r0, #0
   186b0:	beq	18700 <__assert_fail@plt+0x7634>
   186b4:	cmp	r1, #0
   186b8:	movlt	r3, #-2147483648	; 0x80000000
   186bc:	mvnge	r3, #-2147483648	; 0x80000000
   186c0:	str	r3, [sp]
   186c4:	mov	r0, #1
   186c8:	b	18700 <__assert_fail@plt+0x7634>
   186cc:	mov	r2, #8
   186d0:	mov	r0, sp
   186d4:	bl	181a8 <__assert_fail@plt+0x70dc>
   186d8:	b	18700 <__assert_fail@plt+0x7634>
   186dc:	mov	r2, #7
   186e0:	mov	r0, sp
   186e4:	bl	181a8 <__assert_fail@plt+0x70dc>
   186e8:	b	18700 <__assert_fail@plt+0x7634>
   186ec:	ldr	r3, [sp]
   186f0:	str	r3, [r8]
   186f4:	orr	r5, r5, #2
   186f8:	b	18420 <__assert_fail@plt+0x7354>
   186fc:	mov	r0, #0
   18700:	orr	r5, r5, r0
   18704:	ldr	r3, [r4]
   18708:	add	r2, r3, r6
   1870c:	str	r2, [r4]
   18710:	ldrb	r3, [r3, r6]
   18714:	cmp	r3, #0
   18718:	orrne	r5, r5, #2
   1871c:	b	18418 <__assert_fail@plt+0x734c>
   18720:	mov	r5, #4
   18724:	b	18420 <__assert_fail@plt+0x7354>
   18728:	mov	r5, #4
   1872c:	b	18420 <__assert_fail@plt+0x7354>
   18730:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18734:	strd	r6, [sp, #8]
   18738:	strd	r8, [sp, #16]
   1873c:	strd	sl, [sp, #24]
   18740:	str	lr, [sp, #32]
   18744:	sub	sp, sp, #12
   18748:	str	r0, [sp, #4]
   1874c:	cmp	r2, #0
   18750:	beq	1884c <__assert_fail@plt+0x7780>
   18754:	sub	ip, r2, #1
   18758:	ldrd	r2, [r0]
   1875c:	mov	r0, #0
   18760:	mov	r8, r1
   18764:	asr	r9, r1, #31
   18768:	str	r1, [sp]
   1876c:	b	187bc <__assert_fail@plt+0x76f0>
   18770:	orrs	r4, r2, r3
   18774:	movne	lr, #1
   18778:	b	187cc <__assert_fail@plt+0x7700>
   1877c:	mov	sl, r3
   18780:	ldr	fp, [sp]
   18784:	umull	r6, r7, r1, r2
   18788:	mov	r4, r7
   1878c:	mov	r5, #0
   18790:	umlal	r4, r5, sl, fp
   18794:	cmp	r5, #0
   18798:	bne	18800 <__assert_fail@plt+0x7734>
   1879c:	cmp	lr, #0
   187a0:	bne	18818 <__assert_fail@plt+0x774c>
   187a4:	mov	r2, r6
   187a8:	mov	r3, r4
   187ac:	orr	r0, r0, lr
   187b0:	sub	ip, ip, #1
   187b4:	cmn	ip, #1
   187b8:	beq	18828 <__assert_fail@plt+0x775c>
   187bc:	mov	lr, #0
   187c0:	cmp	r8, #0
   187c4:	sbcs	r4, r9, #0
   187c8:	blt	18770 <__assert_fail@plt+0x76a4>
   187cc:	cmp	r9, #0
   187d0:	bne	187ec <__assert_fail@plt+0x7720>
   187d4:	cmp	r3, #0
   187d8:	bne	1877c <__assert_fail@plt+0x76b0>
   187dc:	umull	r2, r3, r1, r2
   187e0:	mov	r6, r2
   187e4:	mov	r4, r3
   187e8:	b	1879c <__assert_fail@plt+0x76d0>
   187ec:	cmp	r3, #0
   187f0:	bne	18800 <__assert_fail@plt+0x7734>
   187f4:	mov	sl, r9
   187f8:	mov	fp, r2
   187fc:	b	18784 <__assert_fail@plt+0x76b8>
   18800:	mul	r4, r1, r3
   18804:	mla	r4, r2, r9, r4
   18808:	umull	r6, r7, r1, r2
   1880c:	add	r4, r4, r7
   18810:	mov	lr, #1
   18814:	b	1879c <__assert_fail@plt+0x76d0>
   18818:	mvn	r2, #0
   1881c:	mvn	r3, #0
   18820:	mov	lr, #1
   18824:	b	187ac <__assert_fail@plt+0x76e0>
   18828:	ldr	r1, [sp, #4]
   1882c:	strd	r2, [r1]
   18830:	add	sp, sp, #12
   18834:	ldrd	r4, [sp]
   18838:	ldrd	r6, [sp, #8]
   1883c:	ldrd	r8, [sp, #16]
   18840:	ldrd	sl, [sp, #24]
   18844:	add	sp, sp, #32
   18848:	pop	{pc}		; (ldr pc, [sp], #4)
   1884c:	mov	r0, #0
   18850:	b	18830 <__assert_fail@plt+0x7764>
   18854:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18858:	strd	r6, [sp, #8]
   1885c:	strd	r8, [sp, #16]
   18860:	str	lr, [sp, #24]
   18864:	sub	sp, sp, #20
   18868:	cmp	r2, #36	; 0x24
   1886c:	bhi	188c0 <__assert_fail@plt+0x77f4>
   18870:	mov	r5, r0
   18874:	mov	r6, r1
   18878:	mov	r7, r2
   1887c:	mov	r9, r3
   18880:	cmp	r1, #0
   18884:	addeq	r6, sp, #12
   18888:	bl	10fd0 <__errno_location@plt>
   1888c:	mov	r8, r0
   18890:	mov	r3, #0
   18894:	str	r3, [r0]
   18898:	ldrb	r4, [r5]
   1889c:	bl	10fa0 <__ctype_b_loc@plt>
   188a0:	ldr	r1, [r0]
   188a4:	mov	r2, r5
   188a8:	lsl	r3, r4, #1
   188ac:	ldrh	r3, [r1, r3]
   188b0:	tst	r3, #8192	; 0x2000
   188b4:	beq	188e0 <__assert_fail@plt+0x7814>
   188b8:	ldrb	r4, [r2, #1]!
   188bc:	b	188a8 <__assert_fail@plt+0x77dc>
   188c0:	movw	r3, #48188	; 0xbc3c
   188c4:	movt	r3, #1
   188c8:	mov	r2, #85	; 0x55
   188cc:	movw	r1, #48132	; 0xbc04
   188d0:	movt	r1, #1
   188d4:	movw	r0, #48148	; 0xbc14
   188d8:	movt	r0, #1
   188dc:	bl	110cc <__assert_fail@plt>
   188e0:	cmp	r4, #45	; 0x2d
   188e4:	moveq	r4, #4
   188e8:	beq	18a7c <__assert_fail@plt+0x79b0>
   188ec:	mov	r3, #0
   188f0:	mov	r2, r7
   188f4:	mov	r1, r6
   188f8:	mov	r0, r5
   188fc:	bl	10e98 <__strtoull_internal@plt>
   18900:	strd	r0, [sp]
   18904:	ldr	r7, [r6]
   18908:	cmp	r7, r5
   1890c:	beq	18930 <__assert_fail@plt+0x7864>
   18910:	ldr	r3, [r8]
   18914:	cmp	r3, #0
   18918:	beq	18a54 <__assert_fail@plt+0x7988>
   1891c:	cmp	r3, #34	; 0x22
   18920:	moveq	r4, #1
   18924:	beq	18a58 <__assert_fail@plt+0x798c>
   18928:	mov	r4, #4
   1892c:	b	18a7c <__assert_fail@plt+0x79b0>
   18930:	ldr	r3, [sp, #48]	; 0x30
   18934:	cmp	r3, #0
   18938:	beq	18d94 <__assert_fail@plt+0x7cc8>
   1893c:	ldrb	r1, [r5]
   18940:	cmp	r1, #0
   18944:	moveq	r4, #4
   18948:	beq	18a7c <__assert_fail@plt+0x79b0>
   1894c:	mov	r0, r3
   18950:	bl	10fc4 <strchr@plt>
   18954:	cmp	r0, #0
   18958:	beq	18d9c <__assert_fail@plt+0x7cd0>
   1895c:	mov	r2, #1
   18960:	mov	r3, #0
   18964:	strd	r2, [sp]
   18968:	ldrb	r5, [r7]
   1896c:	mov	r4, #0
   18970:	mov	r1, r5
   18974:	ldr	r0, [sp, #48]	; 0x30
   18978:	bl	10fc4 <strchr@plt>
   1897c:	cmp	r0, #0
   18980:	beq	18a98 <__assert_fail@plt+0x79cc>
   18984:	sub	r3, r5, #69	; 0x45
   18988:	cmp	r3, #47	; 0x2f
   1898c:	ldrls	pc, [pc, r3, lsl #2]
   18990:	b	18be4 <__assert_fail@plt+0x7b18>
   18994:	andeq	r8, r1, r8, lsr #21
   18998:	andeq	r8, r1, r4, ror #23
   1899c:	andeq	r8, r1, r8, lsr #21
   189a0:	andeq	r8, r1, r4, ror #23
   189a4:	andeq	r8, r1, r4, ror #23
   189a8:	andeq	r8, r1, r4, ror #23
   189ac:	andeq	r8, r1, r8, lsr #21
   189b0:	andeq	r8, r1, r4, ror #23
   189b4:	andeq	r8, r1, r8, lsr #21
   189b8:	andeq	r8, r1, r4, ror #23
   189bc:	andeq	r8, r1, r4, ror #23
   189c0:	andeq	r8, r1, r8, lsr #21
   189c4:	andeq	r8, r1, r4, ror #23
   189c8:	andeq	r8, r1, r4, ror #23
   189cc:	andeq	r8, r1, r4, ror #23
   189d0:	andeq	r8, r1, r8, lsr #21
   189d4:	andeq	r8, r1, r4, ror #23
   189d8:	andeq	r8, r1, r4, ror #23
   189dc:	andeq	r8, r1, r4, ror #23
   189e0:	andeq	r8, r1, r4, ror #23
   189e4:	andeq	r8, r1, r8, lsr #21
   189e8:	andeq	r8, r1, r8, lsr #21
   189ec:	andeq	r8, r1, r4, ror #23
   189f0:	andeq	r8, r1, r4, ror #23
   189f4:	andeq	r8, r1, r4, ror #23
   189f8:	andeq	r8, r1, r4, ror #23
   189fc:	andeq	r8, r1, r4, ror #23
   18a00:	andeq	r8, r1, r4, ror #23
   18a04:	andeq	r8, r1, r4, ror #23
   18a08:	andeq	r8, r1, r4, ror #23
   18a0c:	andeq	r8, r1, r4, ror #23
   18a10:	andeq	r8, r1, r4, ror #23
   18a14:	andeq	r8, r1, r4, ror #23
   18a18:	andeq	r8, r1, r4, ror #23
   18a1c:	andeq	r8, r1, r8, lsr #21
   18a20:	andeq	r8, r1, r4, ror #23
   18a24:	andeq	r8, r1, r4, ror #23
   18a28:	andeq	r8, r1, r4, ror #23
   18a2c:	andeq	r8, r1, r8, lsr #21
   18a30:	andeq	r8, r1, r4, ror #23
   18a34:	andeq	r8, r1, r8, lsr #21
   18a38:	andeq	r8, r1, r4, ror #23
   18a3c:	andeq	r8, r1, r4, ror #23
   18a40:	andeq	r8, r1, r4, ror #23
   18a44:	andeq	r8, r1, r4, ror #23
   18a48:	andeq	r8, r1, r4, ror #23
   18a4c:	andeq	r8, r1, r4, ror #23
   18a50:	andeq	r8, r1, r8, lsr #21
   18a54:	mov	r4, #0
   18a58:	ldr	r3, [sp, #48]	; 0x30
   18a5c:	cmp	r3, #0
   18a60:	strdeq	r0, [r9]
   18a64:	beq	18a7c <__assert_fail@plt+0x79b0>
   18a68:	ldrb	r5, [r7]
   18a6c:	cmp	r5, #0
   18a70:	bne	18970 <__assert_fail@plt+0x78a4>
   18a74:	ldrd	r2, [sp]
   18a78:	strd	r2, [r9]
   18a7c:	mov	r0, r4
   18a80:	add	sp, sp, #20
   18a84:	ldrd	r4, [sp]
   18a88:	ldrd	r6, [sp, #8]
   18a8c:	ldrd	r8, [sp, #16]
   18a90:	add	sp, sp, #24
   18a94:	pop	{pc}		; (ldr pc, [sp], #4)
   18a98:	ldrd	r2, [sp]
   18a9c:	strd	r2, [r9]
   18aa0:	orr	r4, r4, #2
   18aa4:	b	18a7c <__assert_fail@plt+0x79b0>
   18aa8:	mov	r1, #48	; 0x30
   18aac:	ldr	r0, [sp, #48]	; 0x30
   18ab0:	bl	10fc4 <strchr@plt>
   18ab4:	cmp	r0, #0
   18ab8:	beq	18bf0 <__assert_fail@plt+0x7b24>
   18abc:	ldrb	r3, [r7, #1]
   18ac0:	cmp	r3, #68	; 0x44
   18ac4:	beq	18bfc <__assert_fail@plt+0x7b30>
   18ac8:	cmp	r3, #105	; 0x69
   18acc:	beq	18bcc <__assert_fail@plt+0x7b00>
   18ad0:	cmp	r3, #66	; 0x42
   18ad4:	moveq	r7, #2
   18ad8:	movne	r7, #1
   18adc:	moveq	r1, #1000	; 0x3e8
   18ae0:	movne	r1, #1024	; 0x400
   18ae4:	sub	r5, r5, #66	; 0x42
   18ae8:	cmp	r5, #53	; 0x35
   18aec:	ldrls	pc, [pc, r5, lsl #2]
   18af0:	b	18d60 <__assert_fail@plt+0x7c94>
   18af4:	andeq	r8, r1, r0, asr ip
   18af8:	andeq	r8, r1, r0, ror #26
   18afc:	andeq	r8, r1, r0, ror #26
   18b00:	muleq	r1, r8, ip
   18b04:	andeq	r8, r1, r0, ror #26
   18b08:	andeq	r8, r1, r8, lsr #25
   18b0c:	andeq	r8, r1, r0, ror #26
   18b10:	andeq	r8, r1, r0, ror #26
   18b14:	andeq	r8, r1, r0, ror #26
   18b18:			; <UNDEFINED> instruction: 0x00018cb8
   18b1c:	andeq	r8, r1, r0, ror #26
   18b20:	andeq	r8, r1, r8, asr #25
   18b24:	andeq	r8, r1, r0, ror #26
   18b28:	andeq	r8, r1, r0, ror #26
   18b2c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18b30:	andeq	r8, r1, r0, ror #26
   18b34:	andeq	r8, r1, r0, ror #26
   18b38:	andeq	r8, r1, r0, ror #26
   18b3c:	andeq	r8, r1, r8, ror #25
   18b40:	andeq	r8, r1, r0, ror #26
   18b44:	andeq	r8, r1, r0, ror #26
   18b48:	andeq	r8, r1, r0, ror #26
   18b4c:	andeq	r8, r1, r0, ror #26
   18b50:	andeq	r8, r1, r0, asr #26
   18b54:	andeq	r8, r1, r0, asr sp
   18b58:	andeq	r8, r1, r0, ror #26
   18b5c:	andeq	r8, r1, r0, ror #26
   18b60:	andeq	r8, r1, r0, ror #26
   18b64:	andeq	r8, r1, r0, ror #26
   18b68:	andeq	r8, r1, r0, ror #26
   18b6c:	andeq	r8, r1, r0, ror #26
   18b70:	andeq	r8, r1, r0, ror #26
   18b74:	andeq	r8, r1, r8, lsl #24
   18b78:	andeq	r8, r1, r0, ror sp
   18b7c:	andeq	r8, r1, r0, ror #26
   18b80:	andeq	r8, r1, r0, ror #26
   18b84:	andeq	r8, r1, r0, ror #26
   18b88:	andeq	r8, r1, r8, lsr #25
   18b8c:	andeq	r8, r1, r0, ror #26
   18b90:	andeq	r8, r1, r0, ror #26
   18b94:	andeq	r8, r1, r0, ror #26
   18b98:			; <UNDEFINED> instruction: 0x00018cb8
   18b9c:	andeq	r8, r1, r0, ror #26
   18ba0:	andeq	r8, r1, r8, asr #25
   18ba4:	andeq	r8, r1, r0, ror #26
   18ba8:	andeq	r8, r1, r0, ror #26
   18bac:	andeq	r8, r1, r0, ror #26
   18bb0:	andeq	r8, r1, r0, ror #26
   18bb4:	andeq	r8, r1, r0, ror #26
   18bb8:	andeq	r8, r1, r0, ror #26
   18bbc:	andeq	r8, r1, r8, ror #25
   18bc0:	andeq	r8, r1, r0, ror #26
   18bc4:	andeq	r8, r1, r0, ror #26
   18bc8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18bcc:	ldrb	r3, [r7, #2]
   18bd0:	cmp	r3, #66	; 0x42
   18bd4:	movne	r7, #1
   18bd8:	moveq	r7, #3
   18bdc:	mov	r1, #1024	; 0x400
   18be0:	b	18ae4 <__assert_fail@plt+0x7a18>
   18be4:	mov	r7, #1
   18be8:	mov	r1, #1024	; 0x400
   18bec:	b	18ae4 <__assert_fail@plt+0x7a18>
   18bf0:	mov	r7, #1
   18bf4:	mov	r1, #1024	; 0x400
   18bf8:	b	18ae4 <__assert_fail@plt+0x7a18>
   18bfc:	mov	r7, #2
   18c00:	mov	r1, #1000	; 0x3e8
   18c04:	b	18ae4 <__assert_fail@plt+0x7a18>
   18c08:	ldr	r3, [sp]
   18c0c:	ldr	ip, [sp, #4]
   18c10:	lsl	r2, ip, #9
   18c14:	orr	r2, r2, r3, lsr #23
   18c18:	lsl	r3, r3, #9
   18c1c:	mov	r0, #0
   18c20:	mov	r1, r0
   18c24:	lsr	r0, ip, #23
   18c28:	orrs	r1, r0, r1
   18c2c:	streq	r3, [sp]
   18c30:	streq	r2, [sp, #4]
   18c34:	moveq	r0, #0
   18c38:	beq	18d74 <__assert_fail@plt+0x7ca8>
   18c3c:	mvn	r2, #0
   18c40:	mvn	r3, #0
   18c44:	strd	r2, [sp]
   18c48:	mov	r0, #1
   18c4c:	b	18d74 <__assert_fail@plt+0x7ca8>
   18c50:	ldr	r3, [sp]
   18c54:	ldr	ip, [sp, #4]
   18c58:	lsl	r2, ip, #10
   18c5c:	orr	r2, r2, r3, lsr #22
   18c60:	lsl	r3, r3, #10
   18c64:	mov	r0, #0
   18c68:	mov	r1, r0
   18c6c:	lsr	r0, ip, #22
   18c70:	orrs	r1, r0, r1
   18c74:	streq	r3, [sp]
   18c78:	streq	r2, [sp, #4]
   18c7c:	moveq	r0, #0
   18c80:	beq	18d74 <__assert_fail@plt+0x7ca8>
   18c84:	mvn	r2, #0
   18c88:	mvn	r3, #0
   18c8c:	strd	r2, [sp]
   18c90:	mov	r0, #1
   18c94:	b	18d74 <__assert_fail@plt+0x7ca8>
   18c98:	mov	r2, #6
   18c9c:	mov	r0, sp
   18ca0:	bl	18730 <__assert_fail@plt+0x7664>
   18ca4:	b	18d74 <__assert_fail@plt+0x7ca8>
   18ca8:	mov	r2, #3
   18cac:	mov	r0, sp
   18cb0:	bl	18730 <__assert_fail@plt+0x7664>
   18cb4:	b	18d74 <__assert_fail@plt+0x7ca8>
   18cb8:	mov	r2, #1
   18cbc:	mov	r0, sp
   18cc0:	bl	18730 <__assert_fail@plt+0x7664>
   18cc4:	b	18d74 <__assert_fail@plt+0x7ca8>
   18cc8:	mov	r2, #2
   18ccc:	mov	r0, sp
   18cd0:	bl	18730 <__assert_fail@plt+0x7664>
   18cd4:	b	18d74 <__assert_fail@plt+0x7ca8>
   18cd8:	mov	r2, #5
   18cdc:	mov	r0, sp
   18ce0:	bl	18730 <__assert_fail@plt+0x7664>
   18ce4:	b	18d74 <__assert_fail@plt+0x7ca8>
   18ce8:	mov	r2, #4
   18cec:	mov	r0, sp
   18cf0:	bl	18730 <__assert_fail@plt+0x7664>
   18cf4:	b	18d74 <__assert_fail@plt+0x7ca8>
   18cf8:	ldr	r3, [sp]
   18cfc:	ldr	r2, [sp, #4]
   18d00:	adds	r3, r3, r3
   18d04:	adc	r2, r2, r2
   18d08:	mov	r1, #0
   18d0c:	mov	r0, r1
   18d10:	ldr	r1, [sp, #4]
   18d14:	lsr	r1, r1, #31
   18d18:	orrs	r1, r1, r0
   18d1c:	streq	r3, [sp]
   18d20:	streq	r2, [sp, #4]
   18d24:	moveq	r0, #0
   18d28:	beq	18d74 <__assert_fail@plt+0x7ca8>
   18d2c:	mvn	r2, #0
   18d30:	mvn	r3, #0
   18d34:	strd	r2, [sp]
   18d38:	mov	r0, #1
   18d3c:	b	18d74 <__assert_fail@plt+0x7ca8>
   18d40:	mov	r2, #8
   18d44:	mov	r0, sp
   18d48:	bl	18730 <__assert_fail@plt+0x7664>
   18d4c:	b	18d74 <__assert_fail@plt+0x7ca8>
   18d50:	mov	r2, #7
   18d54:	mov	r0, sp
   18d58:	bl	18730 <__assert_fail@plt+0x7664>
   18d5c:	b	18d74 <__assert_fail@plt+0x7ca8>
   18d60:	ldrd	r2, [sp]
   18d64:	strd	r2, [r9]
   18d68:	orr	r4, r4, #2
   18d6c:	b	18a7c <__assert_fail@plt+0x79b0>
   18d70:	mov	r0, #0
   18d74:	orr	r4, r4, r0
   18d78:	ldr	r3, [r6]
   18d7c:	add	r2, r3, r7
   18d80:	str	r2, [r6]
   18d84:	ldrb	r3, [r3, r7]
   18d88:	cmp	r3, #0
   18d8c:	orrne	r4, r4, #2
   18d90:	b	18a74 <__assert_fail@plt+0x79a8>
   18d94:	mov	r4, #4
   18d98:	b	18a7c <__assert_fail@plt+0x79b0>
   18d9c:	mov	r4, #4
   18da0:	b	18a7c <__assert_fail@plt+0x79b0>
   18da4:	strd	r4, [sp, #-16]!
   18da8:	str	r6, [sp, #8]
   18dac:	str	lr, [sp, #12]
   18db0:	cmp	r1, #0
   18db4:	cmpne	r0, #0
   18db8:	beq	18df4 <__assert_fail@plt+0x7d28>
   18dbc:	mov	r2, r0
   18dc0:	mov	r3, r1
   18dc4:	umull	r4, r5, r0, r1
   18dc8:	adds	r1, r5, #0
   18dcc:	movne	r1, #1
   18dd0:	cmp	r4, #0
   18dd4:	movlt	r1, #1
   18dd8:	cmp	r1, #0
   18ddc:	beq	18dfc <__assert_fail@plt+0x7d30>
   18de0:	bl	10fd0 <__errno_location@plt>
   18de4:	mov	r3, #12
   18de8:	str	r3, [r0]
   18dec:	mov	r0, #0
   18df0:	b	18e08 <__assert_fail@plt+0x7d3c>
   18df4:	mov	r3, #1
   18df8:	mov	r2, r3
   18dfc:	mov	r1, r3
   18e00:	mov	r0, r2
   18e04:	bl	10e14 <calloc@plt>
   18e08:	ldrd	r4, [sp]
   18e0c:	ldr	r6, [sp, #8]
   18e10:	add	sp, sp, #12
   18e14:	pop	{pc}		; (ldr pc, [sp], #4)
   18e18:	str	r4, [sp, #-8]!
   18e1c:	str	lr, [sp, #4]
   18e20:	cmp	r0, #0
   18e24:	beq	18e40 <__assert_fail@plt+0x7d74>
   18e28:	bge	18e44 <__assert_fail@plt+0x7d78>
   18e2c:	bl	10fd0 <__errno_location@plt>
   18e30:	mov	r3, #12
   18e34:	str	r3, [r0]
   18e38:	mov	r0, #0
   18e3c:	b	18e48 <__assert_fail@plt+0x7d7c>
   18e40:	mov	r0, #1
   18e44:	bl	10f58 <malloc@plt>
   18e48:	ldr	r4, [sp]
   18e4c:	add	sp, sp, #4
   18e50:	pop	{pc}		; (ldr pc, [sp], #4)
   18e54:	str	r4, [sp, #-8]!
   18e58:	str	lr, [sp, #4]
   18e5c:	cmp	r0, #0
   18e60:	beq	18e84 <__assert_fail@plt+0x7db8>
   18e64:	cmp	r1, #0
   18e68:	beq	18e90 <__assert_fail@plt+0x7dc4>
   18e6c:	cmp	r1, #0
   18e70:	blt	18e9c <__assert_fail@plt+0x7dd0>
   18e74:	bl	10ed4 <realloc@plt>
   18e78:	ldr	r4, [sp]
   18e7c:	add	sp, sp, #4
   18e80:	pop	{pc}		; (ldr pc, [sp], #4)
   18e84:	mov	r0, r1
   18e88:	bl	18e18 <__assert_fail@plt+0x7d4c>
   18e8c:	b	18e78 <__assert_fail@plt+0x7dac>
   18e90:	bl	14f60 <__assert_fail@plt+0x3e94>
   18e94:	mov	r0, #0
   18e98:	b	18e78 <__assert_fail@plt+0x7dac>
   18e9c:	bl	10fd0 <__errno_location@plt>
   18ea0:	mov	r3, #12
   18ea4:	str	r3, [r0]
   18ea8:	mov	r0, #0
   18eac:	b	18e78 <__assert_fail@plt+0x7dac>
   18eb0:	strd	r4, [sp, #-16]!
   18eb4:	str	r6, [sp, #8]
   18eb8:	str	lr, [sp, #12]
   18ebc:	mov	r5, r0
   18ec0:	bl	10f28 <__fpending@plt>
   18ec4:	mov	r6, r0
   18ec8:	ldr	r4, [r5]
   18ecc:	and	r4, r4, #32
   18ed0:	mov	r0, r5
   18ed4:	bl	18f3c <__assert_fail@plt+0x7e70>
   18ed8:	cmp	r4, #0
   18edc:	bne	18f10 <__assert_fail@plt+0x7e44>
   18ee0:	cmp	r0, #0
   18ee4:	beq	18f00 <__assert_fail@plt+0x7e34>
   18ee8:	cmp	r6, #0
   18eec:	bne	18f2c <__assert_fail@plt+0x7e60>
   18ef0:	bl	10fd0 <__errno_location@plt>
   18ef4:	ldr	r0, [r0]
   18ef8:	subs	r0, r0, #9
   18efc:	mvnne	r0, #0
   18f00:	ldrd	r4, [sp]
   18f04:	ldr	r6, [sp, #8]
   18f08:	add	sp, sp, #12
   18f0c:	pop	{pc}		; (ldr pc, [sp], #4)
   18f10:	cmp	r0, #0
   18f14:	bne	18f34 <__assert_fail@plt+0x7e68>
   18f18:	bl	10fd0 <__errno_location@plt>
   18f1c:	mov	r3, #0
   18f20:	str	r3, [r0]
   18f24:	mvn	r0, #0
   18f28:	b	18f00 <__assert_fail@plt+0x7e34>
   18f2c:	mvn	r0, #0
   18f30:	b	18f00 <__assert_fail@plt+0x7e34>
   18f34:	mvn	r0, #0
   18f38:	b	18f00 <__assert_fail@plt+0x7e34>
   18f3c:	strd	r4, [sp, #-16]!
   18f40:	str	r6, [sp, #8]
   18f44:	str	lr, [sp, #12]
   18f48:	sub	sp, sp, #8
   18f4c:	mov	r4, r0
   18f50:	bl	11000 <fileno@plt>
   18f54:	cmp	r0, #0
   18f58:	blt	18fd0 <__assert_fail@plt+0x7f04>
   18f5c:	mov	r0, r4
   18f60:	bl	10f70 <__freading@plt>
   18f64:	cmp	r0, #0
   18f68:	beq	18f9c <__assert_fail@plt+0x7ed0>
   18f6c:	mov	r0, r4
   18f70:	bl	11000 <fileno@plt>
   18f74:	mov	r3, #1
   18f78:	str	r3, [sp]
   18f7c:	mov	r2, #0
   18f80:	mov	r3, #0
   18f84:	bl	10f04 <lseek64@plt>
   18f88:	mvn	r2, #0
   18f8c:	mvn	r3, #0
   18f90:	cmp	r1, r3
   18f94:	cmpeq	r0, r2
   18f98:	beq	18fdc <__assert_fail@plt+0x7f10>
   18f9c:	mov	r0, r4
   18fa0:	bl	18ff8 <__assert_fail@plt+0x7f2c>
   18fa4:	cmp	r0, #0
   18fa8:	beq	18fdc <__assert_fail@plt+0x7f10>
   18fac:	bl	10fd0 <__errno_location@plt>
   18fb0:	mov	r5, r0
   18fb4:	ldr	r6, [r0]
   18fb8:	mov	r0, r4
   18fbc:	bl	11018 <fclose@plt>
   18fc0:	cmp	r6, #0
   18fc4:	strne	r6, [r5]
   18fc8:	mvnne	r0, #0
   18fcc:	b	18fe4 <__assert_fail@plt+0x7f18>
   18fd0:	mov	r0, r4
   18fd4:	bl	11018 <fclose@plt>
   18fd8:	b	18fe4 <__assert_fail@plt+0x7f18>
   18fdc:	mov	r0, r4
   18fe0:	bl	11018 <fclose@plt>
   18fe4:	add	sp, sp, #8
   18fe8:	ldrd	r4, [sp]
   18fec:	ldr	r6, [sp, #8]
   18ff0:	add	sp, sp, #12
   18ff4:	pop	{pc}		; (ldr pc, [sp], #4)
   18ff8:	str	r4, [sp, #-8]!
   18ffc:	str	lr, [sp, #4]
   19000:	sub	sp, sp, #8
   19004:	subs	r4, r0, #0
   19008:	beq	1901c <__assert_fail@plt+0x7f50>
   1900c:	mov	r0, r4
   19010:	bl	10f70 <__freading@plt>
   19014:	cmp	r0, #0
   19018:	bne	19034 <__assert_fail@plt+0x7f68>
   1901c:	mov	r0, r4
   19020:	bl	10e50 <fflush@plt>
   19024:	add	sp, sp, #8
   19028:	ldr	r4, [sp]
   1902c:	add	sp, sp, #4
   19030:	pop	{pc}		; (ldr pc, [sp], #4)
   19034:	ldr	r3, [r4]
   19038:	tst	r3, #256	; 0x100
   1903c:	bne	1904c <__assert_fail@plt+0x7f80>
   19040:	mov	r0, r4
   19044:	bl	10e50 <fflush@plt>
   19048:	b	19024 <__assert_fail@plt+0x7f58>
   1904c:	mov	r3, #1
   19050:	str	r3, [sp]
   19054:	mov	r2, #0
   19058:	mov	r3, #0
   1905c:	mov	r0, r4
   19060:	bl	19068 <__assert_fail@plt+0x7f9c>
   19064:	b	19040 <__assert_fail@plt+0x7f74>
   19068:	str	r4, [sp, #-16]!
   1906c:	strd	r6, [sp, #4]
   19070:	str	lr, [sp, #12]
   19074:	sub	sp, sp, #8
   19078:	mov	r4, r0
   1907c:	mov	r6, r2
   19080:	mov	r7, r3
   19084:	ldr	r2, [r0, #8]
   19088:	ldr	r3, [r0, #4]
   1908c:	cmp	r2, r3
   19090:	beq	190c0 <__assert_fail@plt+0x7ff4>
   19094:	ldr	r3, [sp, #24]
   19098:	str	r3, [sp]
   1909c:	mov	r2, r6
   190a0:	mov	r3, r7
   190a4:	mov	r0, r4
   190a8:	bl	11024 <fseeko64@plt>
   190ac:	add	sp, sp, #8
   190b0:	ldr	r4, [sp]
   190b4:	ldrd	r6, [sp, #4]
   190b8:	add	sp, sp, #12
   190bc:	pop	{pc}		; (ldr pc, [sp], #4)
   190c0:	ldr	r2, [r0, #20]
   190c4:	ldr	r3, [r0, #16]
   190c8:	cmp	r2, r3
   190cc:	bne	19094 <__assert_fail@plt+0x7fc8>
   190d0:	ldr	r3, [r0, #36]	; 0x24
   190d4:	cmp	r3, #0
   190d8:	bne	19094 <__assert_fail@plt+0x7fc8>
   190dc:	bl	11000 <fileno@plt>
   190e0:	ldr	r3, [sp, #24]
   190e4:	str	r3, [sp]
   190e8:	mov	r2, r6
   190ec:	mov	r3, r7
   190f0:	bl	10f04 <lseek64@plt>
   190f4:	mvn	r2, #0
   190f8:	mvn	r3, #0
   190fc:	cmp	r1, r3
   19100:	cmpeq	r0, r2
   19104:	beq	19120 <__assert_fail@plt+0x8054>
   19108:	ldr	r3, [r4]
   1910c:	bic	r3, r3, #16
   19110:	str	r3, [r4]
   19114:	strd	r0, [r4, #80]	; 0x50
   19118:	mov	r0, #0
   1911c:	b	190ac <__assert_fail@plt+0x7fe0>
   19120:	mvn	r0, #0
   19124:	b	190ac <__assert_fail@plt+0x7fe0>
   19128:	str	r4, [sp, #-8]!
   1912c:	str	lr, [sp, #4]
   19130:	mov	r0, #14
   19134:	bl	11060 <nl_langinfo@plt>
   19138:	cmp	r0, #0
   1913c:	beq	19160 <__assert_fail@plt+0x8094>
   19140:	ldrb	r2, [r0]
   19144:	movw	r3, #48200	; 0xbc48
   19148:	movt	r3, #1
   1914c:	cmp	r2, #0
   19150:	moveq	r0, r3
   19154:	ldr	r4, [sp]
   19158:	add	sp, sp, #4
   1915c:	pop	{pc}		; (ldr pc, [sp], #4)
   19160:	movw	r0, #48200	; 0xbc48
   19164:	movt	r0, #1
   19168:	b	19154 <__assert_fail@plt+0x8088>
   1916c:	strd	r4, [sp, #-20]!	; 0xffffffec
   19170:	strd	r6, [sp, #8]
   19174:	str	lr, [sp, #16]
   19178:	sub	sp, sp, #12
   1917c:	mov	r7, r1
   19180:	mov	r5, r2
   19184:	subs	r6, r0, #0
   19188:	addeq	r6, sp, #4
   1918c:	mov	r0, r6
   19190:	bl	10f34 <mbrtowc@plt>
   19194:	mov	r4, r0
   19198:	cmp	r5, #0
   1919c:	cmnne	r0, #3
   191a0:	bhi	191bc <__assert_fail@plt+0x80f0>
   191a4:	mov	r0, r4
   191a8:	add	sp, sp, #12
   191ac:	ldrd	r4, [sp]
   191b0:	ldrd	r6, [sp, #8]
   191b4:	add	sp, sp, #16
   191b8:	pop	{pc}		; (ldr pc, [sp], #4)
   191bc:	mov	r0, #0
   191c0:	bl	19218 <__assert_fail@plt+0x814c>
   191c4:	cmp	r0, #0
   191c8:	bne	191a4 <__assert_fail@plt+0x80d8>
   191cc:	ldrb	r3, [r7]
   191d0:	str	r3, [r6]
   191d4:	mov	r4, #1
   191d8:	b	191a4 <__assert_fail@plt+0x80d8>
   191dc:	str	r4, [sp, #-8]!
   191e0:	str	lr, [sp, #4]
   191e4:	umull	r2, r3, r1, r2
   191e8:	cmp	r3, #0
   191ec:	bne	19204 <__assert_fail@plt+0x8138>
   191f0:	mov	r1, r2
   191f4:	bl	18e54 <__assert_fail@plt+0x7d88>
   191f8:	ldr	r4, [sp]
   191fc:	add	sp, sp, #4
   19200:	pop	{pc}		; (ldr pc, [sp], #4)
   19204:	bl	10fd0 <__errno_location@plt>
   19208:	mov	r3, #12
   1920c:	str	r3, [r0]
   19210:	mov	r0, #0
   19214:	b	191f8 <__assert_fail@plt+0x812c>
   19218:	push	{lr}		; (str lr, [sp, #-4]!)
   1921c:	sub	sp, sp, #268	; 0x10c
   19220:	movw	r2, #257	; 0x101
   19224:	add	r1, sp, #4
   19228:	bl	19274 <__assert_fail@plt+0x81a8>
   1922c:	cmp	r0, #0
   19230:	movne	r0, #0
   19234:	bne	1926c <__assert_fail@plt+0x81a0>
   19238:	movw	r1, #48208	; 0xbc50
   1923c:	movt	r1, #1
   19240:	add	r0, sp, #4
   19244:	bl	10e38 <strcmp@plt>
   19248:	cmp	r0, #0
   1924c:	beq	19268 <__assert_fail@plt+0x819c>
   19250:	movw	r1, #48212	; 0xbc54
   19254:	movt	r1, #1
   19258:	add	r0, sp, #4
   1925c:	bl	10e38 <strcmp@plt>
   19260:	adds	r0, r0, #0
   19264:	movne	r0, #1
   19268:	and	r0, r0, #1
   1926c:	add	sp, sp, #268	; 0x10c
   19270:	pop	{pc}		; (ldr pc, [sp], #4)
   19274:	strd	r4, [sp, #-16]!
   19278:	str	r6, [sp, #8]
   1927c:	str	lr, [sp, #12]
   19280:	mov	r6, r1
   19284:	mov	r4, r2
   19288:	mov	r1, #0
   1928c:	bl	1103c <setlocale@plt>
   19290:	subs	r5, r0, #0
   19294:	beq	192d8 <__assert_fail@plt+0x820c>
   19298:	mov	r0, r5
   1929c:	bl	10fb8 <strlen@plt>
   192a0:	cmp	r4, r0
   192a4:	bhi	192f4 <__assert_fail@plt+0x8228>
   192a8:	cmp	r4, #0
   192ac:	moveq	r0, #34	; 0x22
   192b0:	beq	19308 <__assert_fail@plt+0x823c>
   192b4:	sub	r4, r4, #1
   192b8:	mov	r2, r4
   192bc:	mov	r1, r5
   192c0:	mov	r0, r6
   192c4:	bl	10e8c <memcpy@plt>
   192c8:	mov	r3, #0
   192cc:	strb	r3, [r6, r4]
   192d0:	mov	r0, #34	; 0x22
   192d4:	b	19308 <__assert_fail@plt+0x823c>
   192d8:	cmp	r4, #0
   192dc:	moveq	r0, #22
   192e0:	beq	19308 <__assert_fail@plt+0x823c>
   192e4:	mov	r3, #0
   192e8:	strb	r3, [r6]
   192ec:	mov	r0, #22
   192f0:	b	19308 <__assert_fail@plt+0x823c>
   192f4:	add	r2, r0, #1
   192f8:	mov	r1, r5
   192fc:	mov	r0, r6
   19300:	bl	10e8c <memcpy@plt>
   19304:	mov	r0, #0
   19308:	ldrd	r4, [sp]
   1930c:	ldr	r6, [sp, #8]
   19310:	add	sp, sp, #12
   19314:	pop	{pc}		; (ldr pc, [sp], #4)
   19318:	str	r4, [sp, #-8]!
   1931c:	str	lr, [sp, #4]
   19320:	mov	r1, #0
   19324:	bl	1103c <setlocale@plt>
   19328:	ldr	r4, [sp]
   1932c:	add	sp, sp, #4
   19330:	pop	{pc}		; (ldr pc, [sp], #4)
   19334:	eor	r1, r1, #-2147483648	; 0x80000000
   19338:	b	19340 <__assert_fail@plt+0x8274>
   1933c:	eor	r3, r3, #-2147483648	; 0x80000000
   19340:	push	{r4, r5, lr}
   19344:	lsl	r4, r1, #1
   19348:	lsl	r5, r3, #1
   1934c:	teq	r4, r5
   19350:	teqeq	r0, r2
   19354:	orrsne	ip, r4, r0
   19358:	orrsne	ip, r5, r2
   1935c:	mvnsne	ip, r4, asr #21
   19360:	mvnsne	ip, r5, asr #21
   19364:	beq	19550 <__assert_fail@plt+0x8484>
   19368:	lsr	r4, r4, #21
   1936c:	rsbs	r5, r4, r5, lsr #21
   19370:	rsblt	r5, r5, #0
   19374:	ble	19394 <__assert_fail@plt+0x82c8>
   19378:	add	r4, r4, r5
   1937c:	eor	r2, r0, r2
   19380:	eor	r3, r1, r3
   19384:	eor	r0, r2, r0
   19388:	eor	r1, r3, r1
   1938c:	eor	r2, r0, r2
   19390:	eor	r3, r1, r3
   19394:	cmp	r5, #54	; 0x36
   19398:	pophi	{r4, r5, pc}
   1939c:	tst	r1, #-2147483648	; 0x80000000
   193a0:	lsl	r1, r1, #12
   193a4:	mov	ip, #1048576	; 0x100000
   193a8:	orr	r1, ip, r1, lsr #12
   193ac:	beq	193b8 <__assert_fail@plt+0x82ec>
   193b0:	rsbs	r0, r0, #0
   193b4:	rsc	r1, r1, #0
   193b8:	tst	r3, #-2147483648	; 0x80000000
   193bc:	lsl	r3, r3, #12
   193c0:	orr	r3, ip, r3, lsr #12
   193c4:	beq	193d0 <__assert_fail@plt+0x8304>
   193c8:	rsbs	r2, r2, #0
   193cc:	rsc	r3, r3, #0
   193d0:	teq	r4, r5
   193d4:	beq	19538 <__assert_fail@plt+0x846c>
   193d8:	sub	r4, r4, #1
   193dc:	rsbs	lr, r5, #32
   193e0:	blt	193fc <__assert_fail@plt+0x8330>
   193e4:	lsl	ip, r2, lr
   193e8:	adds	r0, r0, r2, lsr r5
   193ec:	adc	r1, r1, #0
   193f0:	adds	r0, r0, r3, lsl lr
   193f4:	adcs	r1, r1, r3, asr r5
   193f8:	b	19418 <__assert_fail@plt+0x834c>
   193fc:	sub	r5, r5, #32
   19400:	add	lr, lr, #32
   19404:	cmp	r2, #1
   19408:	lsl	ip, r3, lr
   1940c:	orrcs	ip, ip, #2
   19410:	adds	r0, r0, r3, asr r5
   19414:	adcs	r1, r1, r3, asr #31
   19418:	and	r5, r1, #-2147483648	; 0x80000000
   1941c:	bpl	1942c <__assert_fail@plt+0x8360>
   19420:	rsbs	ip, ip, #0
   19424:	rscs	r0, r0, #0
   19428:	rsc	r1, r1, #0
   1942c:	cmp	r1, #1048576	; 0x100000
   19430:	bcc	19470 <__assert_fail@plt+0x83a4>
   19434:	cmp	r1, #2097152	; 0x200000
   19438:	bcc	19458 <__assert_fail@plt+0x838c>
   1943c:	lsrs	r1, r1, #1
   19440:	rrxs	r0, r0
   19444:	rrx	ip, ip
   19448:	add	r4, r4, #1
   1944c:	lsl	r2, r4, #21
   19450:	cmn	r2, #4194304	; 0x400000
   19454:	bcs	195b0 <__assert_fail@plt+0x84e4>
   19458:	cmp	ip, #-2147483648	; 0x80000000
   1945c:	lsrseq	ip, r0, #1
   19460:	adcs	r0, r0, #0
   19464:	adc	r1, r1, r4, lsl #20
   19468:	orr	r1, r1, r5
   1946c:	pop	{r4, r5, pc}
   19470:	lsls	ip, ip, #1
   19474:	adcs	r0, r0, r0
   19478:	adc	r1, r1, r1
   1947c:	tst	r1, #1048576	; 0x100000
   19480:	sub	r4, r4, #1
   19484:	bne	19458 <__assert_fail@plt+0x838c>
   19488:	teq	r1, #0
   1948c:	moveq	r1, r0
   19490:	moveq	r0, #0
   19494:	clz	r3, r1
   19498:	addeq	r3, r3, #32
   1949c:	sub	r3, r3, #11
   194a0:	subs	r2, r3, #32
   194a4:	bge	194c8 <__assert_fail@plt+0x83fc>
   194a8:	adds	r2, r2, #12
   194ac:	ble	194c4 <__assert_fail@plt+0x83f8>
   194b0:	add	ip, r2, #20
   194b4:	rsb	r2, r2, #12
   194b8:	lsl	r0, r1, ip
   194bc:	lsr	r1, r1, r2
   194c0:	b	194d8 <__assert_fail@plt+0x840c>
   194c4:	add	r2, r2, #20
   194c8:	rsble	ip, r2, #32
   194cc:	lsl	r1, r1, r2
   194d0:	orrle	r1, r1, r0, lsr ip
   194d4:	lslle	r0, r0, r2
   194d8:	subs	r4, r4, r3
   194dc:	addge	r1, r1, r4, lsl #20
   194e0:	orrge	r1, r1, r5
   194e4:	popge	{r4, r5, pc}
   194e8:	mvn	r4, r4
   194ec:	subs	r4, r4, #31
   194f0:	bge	1952c <__assert_fail@plt+0x8460>
   194f4:	adds	r4, r4, #12
   194f8:	bgt	19514 <__assert_fail@plt+0x8448>
   194fc:	add	r4, r4, #20
   19500:	rsb	r2, r4, #32
   19504:	lsr	r0, r0, r4
   19508:	orr	r0, r0, r1, lsl r2
   1950c:	orr	r1, r5, r1, lsr r4
   19510:	pop	{r4, r5, pc}
   19514:	rsb	r4, r4, #12
   19518:	rsb	r2, r4, #32
   1951c:	lsr	r0, r0, r2
   19520:	orr	r0, r0, r1, lsl r4
   19524:	mov	r1, r5
   19528:	pop	{r4, r5, pc}
   1952c:	lsr	r0, r1, r4
   19530:	mov	r1, r5
   19534:	pop	{r4, r5, pc}
   19538:	teq	r4, #0
   1953c:	eor	r3, r3, #1048576	; 0x100000
   19540:	eoreq	r1, r1, #1048576	; 0x100000
   19544:	addeq	r4, r4, #1
   19548:	subne	r5, r5, #1
   1954c:	b	193d8 <__assert_fail@plt+0x830c>
   19550:	mvns	ip, r4, asr #21
   19554:	mvnsne	ip, r5, asr #21
   19558:	beq	195c0 <__assert_fail@plt+0x84f4>
   1955c:	teq	r4, r5
   19560:	teqeq	r0, r2
   19564:	beq	19578 <__assert_fail@plt+0x84ac>
   19568:	orrs	ip, r4, r0
   1956c:	moveq	r1, r3
   19570:	moveq	r0, r2
   19574:	pop	{r4, r5, pc}
   19578:	teq	r1, r3
   1957c:	movne	r1, #0
   19580:	movne	r0, #0
   19584:	popne	{r4, r5, pc}
   19588:	lsrs	ip, r4, #21
   1958c:	bne	195a0 <__assert_fail@plt+0x84d4>
   19590:	lsls	r0, r0, #1
   19594:	adcs	r1, r1, r1
   19598:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1959c:	pop	{r4, r5, pc}
   195a0:	adds	r4, r4, #4194304	; 0x400000
   195a4:	addcc	r1, r1, #1048576	; 0x100000
   195a8:	popcc	{r4, r5, pc}
   195ac:	and	r5, r1, #-2147483648	; 0x80000000
   195b0:	orr	r1, r5, #2130706432	; 0x7f000000
   195b4:	orr	r1, r1, #15728640	; 0xf00000
   195b8:	mov	r0, #0
   195bc:	pop	{r4, r5, pc}
   195c0:	mvns	ip, r4, asr #21
   195c4:	movne	r1, r3
   195c8:	movne	r0, r2
   195cc:	mvnseq	ip, r5, asr #21
   195d0:	movne	r3, r1
   195d4:	movne	r2, r0
   195d8:	orrs	r4, r0, r1, lsl #12
   195dc:	orrseq	r5, r2, r3, lsl #12
   195e0:	teqeq	r1, r3
   195e4:	orrne	r1, r1, #524288	; 0x80000
   195e8:	pop	{r4, r5, pc}
   195ec:	teq	r0, #0
   195f0:	moveq	r1, #0
   195f4:	bxeq	lr
   195f8:	push	{r4, r5, lr}
   195fc:	mov	r4, #1024	; 0x400
   19600:	add	r4, r4, #50	; 0x32
   19604:	mov	r5, #0
   19608:	mov	r1, #0
   1960c:	b	19488 <__assert_fail@plt+0x83bc>
   19610:	teq	r0, #0
   19614:	moveq	r1, #0
   19618:	bxeq	lr
   1961c:	push	{r4, r5, lr}
   19620:	mov	r4, #1024	; 0x400
   19624:	add	r4, r4, #50	; 0x32
   19628:	ands	r5, r0, #-2147483648	; 0x80000000
   1962c:	rsbmi	r0, r0, #0
   19630:	mov	r1, #0
   19634:	b	19488 <__assert_fail@plt+0x83bc>
   19638:	lsls	r2, r0, #1
   1963c:	asr	r1, r2, #3
   19640:	rrx	r1, r1
   19644:	lsl	r0, r2, #28
   19648:	andsne	r3, r2, #-16777216	; 0xff000000
   1964c:	teqne	r3, #-16777216	; 0xff000000
   19650:	eorne	r1, r1, #939524096	; 0x38000000
   19654:	bxne	lr
   19658:	bics	r2, r2, #-16777216	; 0xff000000
   1965c:	bxeq	lr
   19660:	teq	r3, #-16777216	; 0xff000000
   19664:	orreq	r1, r1, #524288	; 0x80000
   19668:	bxeq	lr
   1966c:	push	{r4, r5, lr}
   19670:	mov	r4, #896	; 0x380
   19674:	and	r5, r1, #-2147483648	; 0x80000000
   19678:	bic	r1, r1, #-2147483648	; 0x80000000
   1967c:	b	19488 <__assert_fail@plt+0x83bc>
   19680:	orrs	r2, r0, r1
   19684:	bxeq	lr
   19688:	push	{r4, r5, lr}
   1968c:	mov	r5, #0
   19690:	b	196b0 <__assert_fail@plt+0x85e4>
   19694:	orrs	r2, r0, r1
   19698:	bxeq	lr
   1969c:	push	{r4, r5, lr}
   196a0:	ands	r5, r1, #-2147483648	; 0x80000000
   196a4:	bpl	196b0 <__assert_fail@plt+0x85e4>
   196a8:	rsbs	r0, r0, #0
   196ac:	rsc	r1, r1, #0
   196b0:	mov	r4, #1024	; 0x400
   196b4:	add	r4, r4, #50	; 0x32
   196b8:	lsrs	ip, r1, #22
   196bc:	beq	1942c <__assert_fail@plt+0x8360>
   196c0:	mov	r2, #3
   196c4:	lsrs	ip, ip, #3
   196c8:	addne	r2, r2, #3
   196cc:	lsrs	ip, ip, #3
   196d0:	addne	r2, r2, #3
   196d4:	add	r2, r2, ip, lsr #3
   196d8:	rsb	r3, r2, #32
   196dc:	lsl	ip, r0, r3
   196e0:	lsr	r0, r0, r2
   196e4:	orr	r0, r0, r1, lsl r3
   196e8:	lsr	r1, r1, r2
   196ec:	add	r4, r4, r2
   196f0:	b	1942c <__assert_fail@plt+0x8360>
   196f4:	vmov	d7, r0, r1
   196f8:	vcmpe.f64	d7, #0.0
   196fc:	vmrs	APSR_nzcv, fpscr
   19700:	bmi	19708 <__assert_fail@plt+0x863c>
   19704:	b	19720 <__assert_fail@plt+0x8654>
   19708:	push	{r4, lr}
   1970c:	eor	r1, r1, #-2147483648	; 0x80000000
   19710:	bl	19720 <__assert_fail@plt+0x8654>
   19714:	rsbs	r0, r0, #0
   19718:	rsc	r1, r1, #0
   1971c:	pop	{r4, pc}
   19720:	vmov	d6, r0, r1
   19724:	vldr	d7, [pc, #36]	; 19750 <__assert_fail@plt+0x8684>
   19728:	vldr	d5, [pc, #40]	; 19758 <__assert_fail@plt+0x868c>
   1972c:	vmul.f64	d7, d6, d7
   19730:	vcvt.u32.f64	s14, d7
   19734:	vcvt.f64.u32	d4, s14
   19738:	vmov	r1, s14
   1973c:	vmls.f64	d6, d4, d5
   19740:	vcvt.u32.f64	s15, d6
   19744:	vmov	r0, s15
   19748:	bx	lr
   1974c:	nop			; (mov r0, r0)
   19750:	andeq	r0, r0, r0
   19754:	ldclcc	0, cr0, [r0]
   19758:	andeq	r0, r0, r0
   1975c:	mvnsmi	r0, r0
   19760:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19764:	mov	r7, r0
   19768:	ldr	r6, [pc, #72]	; 197b8 <__assert_fail@plt+0x86ec>
   1976c:	ldr	r5, [pc, #72]	; 197bc <__assert_fail@plt+0x86f0>
   19770:	add	r6, pc, r6
   19774:	add	r5, pc, r5
   19778:	sub	r6, r6, r5
   1977c:	mov	r8, r1
   19780:	mov	r9, r2
   19784:	bl	10df4 <calloc@plt-0x20>
   19788:	asrs	r6, r6, #2
   1978c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19790:	mov	r4, #0
   19794:	add	r4, r4, #1
   19798:	ldr	r3, [r5], #4
   1979c:	mov	r2, r9
   197a0:	mov	r1, r8
   197a4:	mov	r0, r7
   197a8:	blx	r3
   197ac:	cmp	r6, r4
   197b0:	bne	19794 <__assert_fail@plt+0x86c8>
   197b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   197b8:	muleq	r1, ip, r7
   197bc:	muleq	r1, r4, r7
   197c0:	bx	lr
   197c4:	ldr	r3, [pc, #12]	; 197d8 <__assert_fail@plt+0x870c>
   197c8:	mov	r1, #0
   197cc:	add	r3, pc, r3
   197d0:	ldr	r2, [r3]
   197d4:	b	10fdc <__cxa_atexit@plt>
   197d8:	andeq	r2, r1, r0, lsr r9

Disassembly of section .fini:

000197dc <.fini>:
   197dc:	push	{r3, lr}
   197e0:	pop	{r3, pc}
