
../repos/prog2/0.11.1:     file format elf32-littlearm


Disassembly of section .init:

00010598 <.init>:
   10598:	push	{r3, lr}
   1059c:	bl	10630 <_start@@Base+0x3c>
   105a0:	pop	{r3, pc}

Disassembly of section .plt:

000105a4 <printf@plt-0x14>:
   105a4:	push	{lr}		; (str lr, [sp, #-4]!)
   105a8:	ldr	lr, [pc, #4]	; 105b4 <printf@plt-0x4>
   105ac:	add	lr, pc, lr
   105b0:	ldr	pc, [lr, #8]!
   105b4:	andeq	r0, r1, ip, asr #20

000105b8 <printf@plt>:
   105b8:	add	ip, pc, #0, 12
   105bc:	add	ip, ip, #16, 20	; 0x10000
   105c0:	ldr	pc, [ip, #2636]!	; 0xa4c

000105c4 <__libc_start_main@plt>:
   105c4:	add	ip, pc, #0, 12
   105c8:	add	ip, ip, #16, 20	; 0x10000
   105cc:	ldr	pc, [ip, #2628]!	; 0xa44

000105d0 <__gmon_start__@plt>:
   105d0:	add	ip, pc, #0, 12
   105d4:	add	ip, ip, #16, 20	; 0x10000
   105d8:	ldr	pc, [ip, #2620]!	; 0xa3c

000105dc <__isoc99_scanf@plt>:
   105dc:	add	ip, pc, #0, 12
   105e0:	add	ip, ip, #16, 20	; 0x10000
   105e4:	ldr	pc, [ip, #2612]!	; 0xa34

000105e8 <abort@plt>:
   105e8:	add	ip, pc, #0, 12
   105ec:	add	ip, ip, #16, 20	; 0x10000
   105f0:	ldr	pc, [ip, #2604]!	; 0xa2c

Disassembly of section .text:

000105f4 <_start@@Base>:
   105f4:	mov	fp, #0
   105f8:	mov	lr, #0
   105fc:	pop	{r1}		; (ldr r1, [sp], #4)
   10600:	mov	r2, sp
   10604:	push	{r2}		; (str r2, [sp, #-4]!)
   10608:	push	{r0}		; (str r0, [sp, #-4]!)
   1060c:	ldr	ip, [pc, #16]	; 10624 <_start@@Base+0x30>
   10610:	push	{ip}		; (str ip, [sp, #-4]!)
   10614:	ldr	r0, [pc, #12]	; 10628 <_start@@Base+0x34>
   10618:	ldr	r3, [pc, #12]	; 1062c <_start@@Base+0x38>
   1061c:	bl	105c4 <__libc_start_main@plt>
   10620:	bl	105e8 <abort@plt>
   10624:	andeq	r0, r1, r0, asr r8
   10628:	andeq	r0, r1, r4, ror #14
   1062c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   10630:	ldr	r3, [pc, #20]	; 1064c <_start@@Base+0x58>
   10634:	ldr	r2, [pc, #20]	; 10650 <_start@@Base+0x5c>
   10638:	add	r3, pc, r3
   1063c:	ldr	r2, [r3, r2]
   10640:	cmp	r2, #0
   10644:	bxeq	lr
   10648:	b	105d0 <__gmon_start__@plt>
   1064c:	andeq	r0, r1, r0, asr #19
   10650:	andeq	r0, r0, r0, lsr #32
   10654:	ldr	r3, [pc, #28]	; 10678 <_start@@Base+0x84>
   10658:	ldr	r0, [pc, #28]	; 1067c <_start@@Base+0x88>
   1065c:	sub	r3, r3, r0
   10660:	cmp	r3, #6
   10664:	bxls	lr
   10668:	ldr	r3, [pc, #16]	; 10680 <_start@@Base+0x8c>
   1066c:	cmp	r3, #0
   10670:	bxeq	lr
   10674:	bx	r3
   10678:	andeq	r1, r2, pc, lsr #32
   1067c:	andeq	r1, r2, ip, lsr #32
   10680:	andeq	r0, r0, r0
   10684:	ldr	r1, [pc, #36]	; 106b0 <_start@@Base+0xbc>
   10688:	ldr	r0, [pc, #36]	; 106b4 <_start@@Base+0xc0>
   1068c:	sub	r1, r1, r0
   10690:	asr	r1, r1, #2
   10694:	add	r1, r1, r1, lsr #31
   10698:	asrs	r1, r1, #1
   1069c:	bxeq	lr
   106a0:	ldr	r3, [pc, #16]	; 106b8 <_start@@Base+0xc4>
   106a4:	cmp	r3, #0
   106a8:	bxeq	lr
   106ac:	bx	r3
   106b0:	andeq	r1, r2, ip, lsr #32
   106b4:	andeq	r1, r2, ip, lsr #32
   106b8:	andeq	r0, r0, r0
   106bc:	push	{r4, lr}
   106c0:	ldr	r4, [pc, #24]	; 106e0 <_start@@Base+0xec>
   106c4:	ldrb	r3, [r4]
   106c8:	cmp	r3, #0
   106cc:	popne	{r4, pc}
   106d0:	bl	10654 <_start@@Base+0x60>
   106d4:	mov	r3, #1
   106d8:	strb	r3, [r4]
   106dc:	pop	{r4, pc}
   106e0:	andeq	r1, r2, ip, lsr #32
   106e4:	ldr	r0, [pc, #40]	; 10714 <_start@@Base+0x120>
   106e8:	ldr	r3, [r0]
   106ec:	cmp	r3, #0
   106f0:	bne	106f8 <_start@@Base+0x104>
   106f4:	b	10684 <_start@@Base+0x90>
   106f8:	ldr	r3, [pc, #24]	; 10718 <_start@@Base+0x124>
   106fc:	cmp	r3, #0
   10700:	beq	106f4 <_start@@Base+0x100>
   10704:	push	{r4, lr}
   10708:	blx	r3
   1070c:	pop	{r4, lr}
   10710:	b	10684 <_start@@Base+0x90>
   10714:	andeq	r0, r2, r4, lsl pc
   10718:	andeq	r0, r0, r0

0001071c <invert@@Base>:
   1071c:	subs	r2, r0, #0
   10720:	beq	10758 <invert@@Base+0x3c>
   10724:	mov	r0, #0
   10728:	ldr	ip, [pc, #48]	; 10760 <invert@@Base+0x44>
   1072c:	add	r0, r0, r0, lsl #2
   10730:	smull	r3, r1, ip, r2
   10734:	asr	r3, r2, #31
   10738:	rsb	r3, r3, r1, asr #2
   1073c:	add	r1, r3, r3, lsl #2
   10740:	sub	r2, r2, r1, lsl #1
   10744:	add	r0, r2, r0, lsl #1
   10748:	mov	r2, r3
   1074c:	cmp	r3, #0
   10750:	bne	1072c <invert@@Base+0x10>
   10754:	bx	lr
   10758:	mov	r0, r2
   1075c:	bx	lr
   10760:	strbtvs	r6, [r6], -r7, ror #12

00010764 <main@@Base>:
   10764:	push	{r4, r5, r6, r7, lr}
   10768:	sub	sp, sp, #20
   1076c:	add	r1, sp, #12
   10770:	ldr	r0, [pc, #108]	; 107e4 <main@@Base+0x80>
   10774:	bl	105dc <__isoc99_scanf@plt>
   10778:	ldr	r3, [sp, #12]
   1077c:	cmp	r3, #0
   10780:	ble	107d8 <main@@Base+0x74>
   10784:	mov	r4, #0
   10788:	ldr	r7, [pc, #88]	; 107e8 <main@@Base+0x84>
   1078c:	ldr	r6, [pc, #88]	; 107ec <main@@Base+0x88>
   10790:	add	r2, sp, #4
   10794:	add	r1, sp, #8
   10798:	mov	r0, r7
   1079c:	bl	105dc <__isoc99_scanf@plt>
   107a0:	ldr	r0, [sp, #8]
   107a4:	bl	1071c <invert@@Base>
   107a8:	mov	r5, r0
   107ac:	ldr	r0, [sp, #4]
   107b0:	bl	1071c <invert@@Base>
   107b4:	add	r0, r5, r0
   107b8:	bl	1071c <invert@@Base>
   107bc:	mov	r1, r0
   107c0:	mov	r0, r6
   107c4:	bl	105b8 <printf@plt>
   107c8:	add	r4, r4, #1
   107cc:	ldr	r3, [sp, #12]
   107d0:	cmp	r3, r4
   107d4:	bgt	10790 <main@@Base+0x2c>
   107d8:	mov	r0, #0
   107dc:	add	sp, sp, #20
   107e0:	pop	{r4, r5, r6, r7, pc}
   107e4:	andeq	r0, r1, r0, ror #16
   107e8:	andeq	r0, r1, r4, ror #16
   107ec:	andeq	r0, r1, ip, ror #16

000107f0 <__libc_csu_init@@Base>:
   107f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   107f4:	mov	r7, r0
   107f8:	ldr	r6, [pc, #72]	; 10848 <__libc_csu_init@@Base+0x58>
   107fc:	ldr	r5, [pc, #72]	; 1084c <__libc_csu_init@@Base+0x5c>
   10800:	add	r6, pc, r6
   10804:	add	r5, pc, r5
   10808:	sub	r6, r6, r5
   1080c:	mov	r8, r1
   10810:	mov	r9, r2
   10814:	bl	10598 <printf@plt-0x20>
   10818:	asrs	r6, r6, #2
   1081c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10820:	mov	r4, #0
   10824:	add	r4, r4, #1
   10828:	ldr	r3, [r5], #4
   1082c:	mov	r2, r9
   10830:	mov	r1, r8
   10834:	mov	r0, r7
   10838:	blx	r3
   1083c:	cmp	r6, r4
   10840:	bne	10824 <__libc_csu_init@@Base+0x34>
   10844:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10848:	andeq	r0, r1, r8, lsl #14
   1084c:	andeq	r0, r1, r0, lsl #14

00010850 <__libc_csu_fini@@Base>:
   10850:	bx	lr

Disassembly of section .fini:

00010854 <.fini>:
   10854:	push	{r3, lr}
   10858:	pop	{r3, pc}
