
../repos/dvidelabs-flatcc-3b39ef7/test/flatc_compat/flatc_compat:     file format elf32-littlearm


Disassembly of section .init:

00010c94 <.init>:
   10c94:	push	{r3, lr}
   10c98:	bl	11270 <_start@@Base+0x3c>
   10c9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ca0 <strcmp@plt-0x14>:
   10ca0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ca4:	ldr	lr, [pc, #4]	; 10cb0 <strcmp@plt-0x4>
   10ca8:	add	lr, pc, lr
   10cac:	ldr	pc, [lr, #8]!
   10cb0:	andeq	r4, r1, r0, asr r3

00010cb4 <strcmp@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #20, 20	; 0x14000
   10cbc:	ldr	pc, [ip, #848]!	; 0x350

00010cc0 <printf@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #20, 20	; 0x14000
   10cc8:	ldr	pc, [ip, #840]!	; 0x348

00010ccc <fopen@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #20, 20	; 0x14000
   10cd4:	ldr	pc, [ip, #832]!	; 0x340

00010cd8 <free@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #20, 20	; 0x14000
   10ce0:	ldr	pc, [ip, #824]!	; 0x338

00010ce4 <memcpy@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #20, 20	; 0x14000
   10cec:	ldr	pc, [ip, #816]!	; 0x330

00010cf0 <ftell@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #20, 20	; 0x14000
   10cf8:	ldr	pc, [ip, #808]!	; 0x328

00010cfc <rewind@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #20, 20	; 0x14000
   10d04:	ldr	pc, [ip, #800]!	; 0x320

00010d08 <fwrite@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #20, 20	; 0x14000
   10d10:	ldr	pc, [ip, #792]!	; 0x318

00010d14 <fread@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #20, 20	; 0x14000
   10d1c:	ldr	pc, [ip, #784]!	; 0x310

00010d20 <puts@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #20, 20	; 0x14000
   10d28:	ldr	pc, [ip, #776]!	; 0x308

00010d2c <malloc@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #20, 20	; 0x14000
   10d34:	ldr	pc, [ip, #768]!	; 0x300

00010d38 <__libc_start_main@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #20, 20	; 0x14000
   10d40:	ldr	pc, [ip, #760]!	; 0x2f8

00010d44 <__gmon_start__@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #20, 20	; 0x14000
   10d4c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d50 <exit@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #20, 20	; 0x14000
   10d58:	ldr	pc, [ip, #744]!	; 0x2e8

00010d5c <fprintf@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #20, 20	; 0x14000
   10d64:	ldr	pc, [ip, #736]!	; 0x2e0

00010d68 <posix_memalign@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #20, 20	; 0x14000
   10d70:	ldr	pc, [ip, #728]!	; 0x2d8

00010d74 <strncpy@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #20, 20	; 0x14000
   10d7c:	ldr	pc, [ip, #720]!	; 0x2d0

00010d80 <fclose@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #20, 20	; 0x14000
   10d88:	ldr	pc, [ip, #712]!	; 0x2c8

00010d8c <fputc@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #20, 20	; 0x14000
   10d94:	ldr	pc, [ip, #704]!	; 0x2c0

00010d98 <fseek@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #20, 20	; 0x14000
   10da0:	ldr	pc, [ip, #696]!	; 0x2b8

00010da4 <abort@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #688]!	; 0x2b0

00010db0 <__assert_fail@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #680]!	; 0x2a8

Disassembly of section .text:

00010dc0 <main@@Base>:
   10dc0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10dc4:	sub	r3, r0, #1
   10dc8:	cmp	r3, #1
   10dcc:	strd	r6, [sp, #8]
   10dd0:	strd	r8, [sp, #16]
   10dd4:	ldr	r8, [pc, #1032]	; 111e4 <main@@Base+0x424>
   10dd8:	strd	sl, [sp, #24]
   10ddc:	str	lr, [sp, #32]
   10de0:	sub	sp, sp, #44	; 0x2c
   10de4:	add	r8, pc, r8
   10de8:	bhi	111bc <main@@Base+0x3fc>
   10dec:	ldr	r3, [pc, #1012]	; 111e8 <main@@Base+0x428>
   10df0:	cmp	r0, #2
   10df4:	ldreq	r2, [r1, #4]
   10df8:	ldr	r1, [pc, #1004]	; 111ec <main@@Base+0x42c>
   10dfc:	ldr	r3, [r8, r3]
   10e00:	add	r1, pc, r1
   10e04:	streq	r2, [r3]
   10e08:	ldr	r0, [r3]
   10e0c:	bl	10ccc <fopen@plt>
   10e10:	subs	r7, r0, #0
   10e14:	beq	11144 <main@@Base+0x384>
   10e18:	mov	r2, #2
   10e1c:	mov	r1, #0
   10e20:	bl	10d98 <fseek@plt>
   10e24:	mov	r0, r7
   10e28:	bl	10cf0 <ftell@plt>
   10e2c:	mov	r4, r0
   10e30:	mov	r0, r7
   10e34:	cmp	r4, #1024	; 0x400
   10e38:	bhi	110e0 <main@@Base+0x320>
   10e3c:	bl	10cfc <rewind@plt>
   10e40:	cmp	r4, #0
   10e44:	movne	r0, r4
   10e48:	moveq	r0, #1
   10e4c:	bl	10d2c <malloc@plt>
   10e50:	subs	r6, r0, #0
   10e54:	beq	11170 <main@@Base+0x3b0>
   10e58:	mov	r5, #0
   10e5c:	b	10e64 <main@@Base+0xa4>
   10e60:	add	r5, r5, r0
   10e64:	mov	r3, r7
   10e68:	sub	r2, r4, r5
   10e6c:	mov	r1, #1
   10e70:	add	r0, r6, r5
   10e74:	bl	10d14 <fread@plt>
   10e78:	cmp	r0, #0
   10e7c:	bne	10e60 <main@@Base+0xa0>
   10e80:	cmp	r4, r5
   10e84:	mov	r9, r0
   10e88:	mov	r0, r7
   10e8c:	bne	10fdc <main@@Base+0x21c>
   10e90:	bl	10d80 <fclose@plt>
   10e94:	mov	r3, #0
   10e98:	add	r2, r4, #255	; 0xff
   10e9c:	add	r9, sp, #20
   10ea0:	bic	r2, r2, #255	; 0xff
   10ea4:	mov	r0, r9
   10ea8:	mov	r1, #256	; 0x100
   10eac:	str	r3, [sp, #20]
   10eb0:	bl	10d68 <posix_memalign@plt>
   10eb4:	cmp	r0, #0
   10eb8:	ldreq	r5, [sp, #20]
   10ebc:	beq	10ee0 <main@@Base+0x120>
   10ec0:	ldr	r5, [sp, #20]
   10ec4:	cmp	r5, #0
   10ec8:	beq	10ee0 <main@@Base+0x120>
   10ecc:	mov	r0, r5
   10ed0:	bl	10cd8 <free@plt>
   10ed4:	mov	r3, #0
   10ed8:	mov	r5, r3
   10edc:	str	r3, [sp, #20]
   10ee0:	mov	r2, r4
   10ee4:	mov	r1, r6
   10ee8:	mov	r0, r5
   10eec:	bl	10ce4 <memcpy@plt>
   10ef0:	mov	r0, r6
   10ef4:	bl	10cd8 <free@plt>
   10ef8:	ldr	r3, [pc, #752]	; 111f0 <main@@Base+0x430>
   10efc:	ldr	r2, [pc, #752]	; 111f4 <main@@Base+0x434>
   10f00:	ldr	r1, [pc, #752]	; 111f8 <main@@Base+0x438>
   10f04:	ldr	fp, [r8, r3]
   10f08:	add	r2, pc, r2
   10f0c:	add	r1, pc, r1
   10f10:	ldr	r7, [fp]
   10f14:	mov	r0, r7
   10f18:	bl	10d5c <fprintf@plt>
   10f1c:	cmp	r4, #0
   10f20:	beq	11018 <main@@Base+0x258>
   10f24:	ldr	r3, [pc, #720]	; 111fc <main@@Base+0x43c>
   10f28:	sub	sl, r5, #1
   10f2c:	mov	r6, #0
   10f30:	add	r3, pc, r3
   10f34:	str	r3, [sp, #8]
   10f38:	ldr	r3, [pc, #704]	; 11200 <main@@Base+0x440>
   10f3c:	add	r3, pc, r3
   10f40:	str	r3, [sp, #12]
   10f44:	ldr	r3, [pc, #696]	; 11204 <main@@Base+0x444>
   10f48:	add	r3, pc, r3
   10f4c:	str	r3, [sp, #4]
   10f50:	b	10fbc <main@@Base+0x1fc>
   10f54:	cmp	r6, #0
   10f58:	beq	10f6c <main@@Base+0x1ac>
   10f5c:	mov	r2, r9
   10f60:	mov	r0, r7
   10f64:	ldr	r1, [sp, #12]
   10f68:	bl	10d5c <fprintf@plt>
   10f6c:	mov	r2, r6
   10f70:	mov	r0, r7
   10f74:	ldr	r1, [sp, #8]
   10f78:	bl	10d5c <fprintf@plt>
   10f7c:	ldrb	r2, [sl, #1]!
   10f80:	mov	r0, r7
   10f84:	add	r6, r6, #1
   10f88:	ldr	r1, [sp, #4]
   10f8c:	bl	10d5c <fprintf@plt>
   10f90:	add	r3, sp, #40	; 0x28
   10f94:	mov	r2, #0
   10f98:	add	r8, r3, r8
   10f9c:	ldrb	r3, [sl]
   10fa0:	strb	r2, [r8, #-19]	; 0xffffffed
   10fa4:	sub	r2, r3, #32
   10fa8:	cmp	r2, #94	; 0x5e
   10fac:	movhi	r3, #46	; 0x2e
   10fb0:	cmp	r6, r4
   10fb4:	strb	r3, [r8, #-20]	; 0xffffffec
   10fb8:	beq	110a8 <main@@Base+0x2e8>
   10fbc:	ands	r8, r6, #15
   10fc0:	beq	10f54 <main@@Base+0x194>
   10fc4:	tst	r6, #7
   10fc8:	bne	10f7c <main@@Base+0x1bc>
   10fcc:	mov	r1, r7
   10fd0:	mov	r0, #32
   10fd4:	bl	10d8c <fputc@plt>
   10fd8:	b	10f7c <main@@Base+0x1bc>
   10fdc:	bl	10d80 <fclose@plt>
   10fe0:	mov	r0, r6
   10fe4:	mov	r6, r9
   10fe8:	bl	10cd8 <free@plt>
   10fec:	b	10e94 <main@@Base+0xd4>
   10ff0:	ldr	r3, [pc, #504]	; 111f0 <main@@Base+0x430>
   10ff4:	ldr	r2, [pc, #524]	; 11208 <main@@Base+0x448>
   10ff8:	ldr	r1, [pc, #524]	; 1120c <main@@Base+0x44c>
   10ffc:	ldr	fp, [r8, r3]
   11000:	add	r2, pc, r2
   11004:	ldr	r5, [sp, #20]
   11008:	add	r1, pc, r1
   1100c:	ldr	r7, [fp]
   11010:	mov	r0, r7
   11014:	bl	10d5c <fprintf@plt>
   11018:	ldr	r8, [pc, #496]	; 11210 <main@@Base+0x450>
   1101c:	mov	r2, r9
   11020:	mov	r0, r7
   11024:	ldr	r6, [pc, #488]	; 11214 <main@@Base+0x454>
   11028:	ldr	r1, [pc, #488]	; 11218 <main@@Base+0x458>
   1102c:	add	r8, pc, r8
   11030:	add	r6, pc, r6
   11034:	add	r1, pc, r1
   11038:	bl	10d5c <fprintf@plt>
   1103c:	mov	r3, r8
   11040:	mov	r1, r4
   11044:	mov	r2, r6
   11048:	mov	r0, r5
   1104c:	bl	13618 <flatcc_verify_table_as_root@@Base>
   11050:	cmp	r0, #0
   11054:	bne	1117c <main@@Base+0x3bc>
   11058:	mov	r3, r8
   1105c:	mov	r2, r6
   11060:	mov	r1, r4
   11064:	mov	r0, r5
   11068:	bl	13618 <flatcc_verify_table_as_root@@Base>
   1106c:	cmp	r0, #0
   11070:	bne	1119c <main@@Base+0x3dc>
   11074:	mov	r0, r5
   11078:	bl	11dbc <verify_monster@@Base>
   1107c:	mov	r4, r0
   11080:	mov	r0, r5
   11084:	bl	10cd8 <free@plt>
   11088:	mov	r0, r4
   1108c:	add	sp, sp, #44	; 0x2c
   11090:	ldrd	r4, [sp]
   11094:	ldrd	r6, [sp, #8]
   11098:	ldrd	r8, [sp, #16]
   1109c:	ldrd	sl, [sp, #24]
   110a0:	add	sp, sp, #32
   110a4:	pop	{pc}		; (ldr pc, [sp], #4)
   110a8:	tst	r4, #15
   110ac:	beq	11018 <main@@Base+0x258>
   110b0:	ldr	r8, [pc, #356]	; 1121c <main@@Base+0x45c>
   110b4:	mov	r6, r4
   110b8:	add	r8, pc, r8
   110bc:	add	r6, r6, #1
   110c0:	mov	r3, r7
   110c4:	mov	r2, #3
   110c8:	mov	r1, #1
   110cc:	mov	r0, r8
   110d0:	bl	10d08 <fwrite@plt>
   110d4:	tst	r6, #15
   110d8:	bne	110bc <main@@Base+0x2fc>
   110dc:	b	11018 <main@@Base+0x258>
   110e0:	bl	10d80 <fclose@plt>
   110e4:	mov	r6, #0
   110e8:	add	r9, sp, #20
   110ec:	add	r2, r4, #255	; 0xff
   110f0:	mov	r1, #256	; 0x100
   110f4:	bic	r2, r2, #255	; 0xff
   110f8:	mov	r0, r9
   110fc:	str	r6, [sp, #20]
   11100:	bl	10d68 <posix_memalign@plt>
   11104:	subs	r1, r0, #0
   11108:	bne	10ec0 <main@@Base+0x100>
   1110c:	ldr	r5, [sp, #20]
   11110:	mov	r2, r4
   11114:	mov	r0, r5
   11118:	bl	10ce4 <memcpy@plt>
   1111c:	ldr	r3, [pc, #204]	; 111f0 <main@@Base+0x430>
   11120:	ldr	r2, [pc, #248]	; 11220 <main@@Base+0x460>
   11124:	ldr	r1, [pc, #248]	; 11224 <main@@Base+0x464>
   11128:	ldr	fp, [r8, r3]
   1112c:	add	r2, pc, r2
   11130:	add	r1, pc, r1
   11134:	ldr	r7, [fp]
   11138:	mov	r0, r7
   1113c:	bl	10d5c <fprintf@plt>
   11140:	b	10f24 <main@@Base+0x164>
   11144:	add	r9, sp, #20
   11148:	mov	r2, r7
   1114c:	str	r7, [sp, #20]
   11150:	mov	r0, r9
   11154:	mov	r1, #256	; 0x100
   11158:	bl	10d68 <posix_memalign@plt>
   1115c:	subs	r4, r0, #0
   11160:	beq	10ff0 <main@@Base+0x230>
   11164:	mov	r6, r7
   11168:	mov	r4, r7
   1116c:	b	10ec0 <main@@Base+0x100>
   11170:	mov	r0, r7
   11174:	bl	10d80 <fclose@plt>
   11178:	b	10e94 <main@@Base+0xd4>
   1117c:	ldr	r0, [pc, #164]	; 11228 <main@@Base+0x468>
   11180:	mov	r2, #38	; 0x26
   11184:	mov	r1, #1
   11188:	mvn	r4, #0
   1118c:	ldr	r3, [fp]
   11190:	add	r0, pc, r0
   11194:	bl	10d08 <fwrite@plt>
   11198:	b	11080 <main@@Base+0x2c0>
   1119c:	ldr	r0, [pc, #136]	; 1122c <main@@Base+0x46c>
   111a0:	mov	r2, #62	; 0x3e
   111a4:	mov	r1, #1
   111a8:	mvn	r4, #0
   111ac:	ldr	r3, [fp]
   111b0:	add	r0, pc, r0
   111b4:	bl	10d08 <fwrite@plt>
   111b8:	b	11080 <main@@Base+0x2c0>
   111bc:	ldr	r3, [pc, #44]	; 111f0 <main@@Base+0x430>
   111c0:	mov	r2, #63	; 0x3f
   111c4:	mov	r1, #1
   111c8:	ldr	r0, [pc, #96]	; 11230 <main@@Base+0x470>
   111cc:	ldr	r3, [r8, r3]
   111d0:	add	r0, pc, r0
   111d4:	ldr	r3, [r3]
   111d8:	bl	10d08 <fwrite@plt>
   111dc:	mov	r0, #1
   111e0:	bl	10d50 <exit@plt>
   111e4:	andeq	r4, r1, r4, lsl r2
   111e8:	andeq	r0, r0, ip, rrx
   111ec:	andeq	r3, r0, r4, lsl #16
   111f0:	andeq	r0, r0, r4, rrx
   111f4:	andeq	r3, r0, r0, lsl #14
   111f8:	andeq	r3, r0, r4, lsl r7
   111fc:	andeq	r3, r0, r8, lsl #14
   11200:	andeq	r3, r0, ip, ror #13
   11204:	strdeq	r3, [r0], -r8
   11208:	andeq	r3, r0, r8, lsl #12
   1120c:	andeq	r3, r0, r8, lsl r6
   11210:	andeq	r0, r0, ip, lsl #12
   11214:	andeq	r3, r0, r0, lsl #12
   11218:	strdeq	r3, [r0], -r4
   1121c:	muleq	r0, r0, r5
   11220:	ldrdeq	r3, [r0], -ip
   11224:	strdeq	r3, [r0], -r0
   11228:			; <UNDEFINED> instruction: 0x000034bc
   1122c:	andeq	r3, r0, r4, asr #9
   11230:	strdeq	r3, [r0], -r4

00011234 <_start@@Base>:
   11234:	mov	fp, #0
   11238:	mov	lr, #0
   1123c:	pop	{r1}		; (ldr r1, [sp], #4)
   11240:	mov	r2, sp
   11244:	push	{r2}		; (str r2, [sp, #-4]!)
   11248:	push	{r0}		; (str r0, [sp, #-4]!)
   1124c:	ldr	ip, [pc, #16]	; 11264 <_start@@Base+0x30>
   11250:	push	{ip}		; (str ip, [sp, #-4]!)
   11254:	ldr	r0, [pc, #12]	; 11268 <_start@@Base+0x34>
   11258:	ldr	r3, [pc, #12]	; 1126c <_start@@Base+0x38>
   1125c:	bl	10d38 <__libc_start_main@plt>
   11260:	bl	10da4 <abort@plt>
   11264:	andeq	r3, r1, r4, ror pc
   11268:	andeq	r0, r1, r0, asr #27
   1126c:	andeq	r3, r1, r4, lsl pc
   11270:	ldr	r3, [pc, #20]	; 1128c <_start@@Base+0x58>
   11274:	ldr	r2, [pc, #20]	; 11290 <_start@@Base+0x5c>
   11278:	add	r3, pc, r3
   1127c:	ldr	r2, [r3, r2]
   11280:	cmp	r2, #0
   11284:	bxeq	lr
   11288:	b	10d44 <__gmon_start__@plt>
   1128c:	andeq	r3, r1, r0, lsl #27
   11290:	andeq	r0, r0, r8, rrx
   11294:	ldr	r0, [pc, #24]	; 112b4 <_start@@Base+0x80>
   11298:	ldr	r3, [pc, #24]	; 112b8 <_start@@Base+0x84>
   1129c:	cmp	r3, r0
   112a0:	bxeq	lr
   112a4:	ldr	r3, [pc, #16]	; 112bc <_start@@Base+0x88>
   112a8:	cmp	r3, #0
   112ac:	bxeq	lr
   112b0:	bx	r3
   112b4:	andeq	r5, r2, ip, ror r0
   112b8:	andeq	r5, r2, ip, ror r0
   112bc:	andeq	r0, r0, r0
   112c0:	ldr	r0, [pc, #36]	; 112ec <_start@@Base+0xb8>
   112c4:	ldr	r1, [pc, #36]	; 112f0 <_start@@Base+0xbc>
   112c8:	sub	r1, r1, r0
   112cc:	asr	r1, r1, #2
   112d0:	add	r1, r1, r1, lsr #31
   112d4:	asrs	r1, r1, #1
   112d8:	bxeq	lr
   112dc:	ldr	r3, [pc, #16]	; 112f4 <_start@@Base+0xc0>
   112e0:	cmp	r3, #0
   112e4:	bxeq	lr
   112e8:	bx	r3
   112ec:	andeq	r5, r2, ip, ror r0
   112f0:	andeq	r5, r2, ip, ror r0
   112f4:	andeq	r0, r0, r0
   112f8:	push	{r4, lr}
   112fc:	ldr	r4, [pc, #24]	; 1131c <_start@@Base+0xe8>
   11300:	ldrb	r3, [r4]
   11304:	cmp	r3, #0
   11308:	popne	{r4, pc}
   1130c:	bl	11294 <_start@@Base+0x60>
   11310:	mov	r3, #1
   11314:	strb	r3, [r4]
   11318:	pop	{r4, pc}
   1131c:	andeq	r5, r2, ip, ror r0
   11320:	b	112c0 <_start@@Base+0x8c>
   11324:	andeq	r0, r0, r0
   11328:	mov	r0, #0
   1132c:	bx	lr
   11330:	mov	r3, #4
   11334:	mov	r1, #0
   11338:	mov	r2, r3
   1133c:	b	12944 <flatcc_verify_field@@Base>
   11340:	ldr	r3, [pc, #32]	; 11368 <_start@@Base+0x134>
   11344:	movw	r2, #699	; 0x2bb
   11348:	str	r4, [sp, #-8]!
   1134c:	ldr	r1, [pc, #24]	; 1136c <_start@@Base+0x138>
   11350:	str	lr, [sp, #4]
   11354:	ldr	r0, [pc, #20]	; 11370 <_start@@Base+0x13c>
   11358:	add	r3, pc, r3
   1135c:	add	r1, pc, r1
   11360:	add	r0, pc, r0
   11364:	bl	10db0 <__assert_fail@plt>
   11368:	andeq	r2, r0, r4, lsr #24
   1136c:	andeq	r2, r0, ip, asr #24
   11370:	andeq	r2, r0, r4, asr #25
   11374:	mov	r3, #8
   11378:	mov	r1, #0
   1137c:	str	r4, [sp, #-8]!
   11380:	mov	r2, r3
   11384:	mov	r4, r0
   11388:	str	lr, [sp, #4]
   1138c:	bl	12944 <flatcc_verify_field@@Base>
   11390:	cmp	r0, #0
   11394:	beq	113a4 <_start@@Base+0x170>
   11398:	ldr	r4, [sp]
   1139c:	add	sp, sp, #4
   113a0:	pop	{pc}		; (ldr pc, [sp], #4)
   113a4:	mov	r3, #4
   113a8:	mov	r0, r4
   113ac:	ldr	r4, [sp]
   113b0:	mov	r2, r3
   113b4:	mov	r1, #1
   113b8:	ldr	lr, [sp, #4]
   113bc:	add	sp, sp, #8
   113c0:	b	12944 <flatcc_verify_field@@Base>
   113c4:	mov	r3, #1
   113c8:	mov	r1, #0
   113cc:	str	r4, [sp, #-8]!
   113d0:	mov	r2, r3
   113d4:	mov	r4, r0
   113d8:	str	lr, [sp, #4]
   113dc:	bl	12944 <flatcc_verify_field@@Base>
   113e0:	cmp	r0, #0
   113e4:	beq	113f4 <_start@@Base+0x1c0>
   113e8:	ldr	r4, [sp]
   113ec:	add	sp, sp, #4
   113f0:	pop	{pc}		; (ldr pc, [sp], #4)
   113f4:	mov	r3, #1
   113f8:	mov	r0, r4
   113fc:	mov	r2, r3
   11400:	mov	r1, r3
   11404:	bl	12944 <flatcc_verify_field@@Base>
   11408:	cmp	r0, #0
   1140c:	bne	113e8 <_start@@Base+0x1b4>
   11410:	mov	r3, #1
   11414:	mov	r1, #2
   11418:	mov	r2, r3
   1141c:	mov	r0, r4
   11420:	bl	12944 <flatcc_verify_field@@Base>
   11424:	cmp	r0, #0
   11428:	bne	113e8 <_start@@Base+0x1b4>
   1142c:	mov	r3, #1
   11430:	mov	r0, r4
   11434:	ldr	r4, [sp]
   11438:	mov	r2, r3
   1143c:	mov	r1, #3
   11440:	ldr	lr, [sp, #4]
   11444:	add	sp, sp, #8
   11448:	b	12944 <flatcc_verify_field@@Base>
   1144c:	mov	r2, #0
   11450:	str	r4, [sp, #-8]!
   11454:	mov	r4, r0
   11458:	mov	r1, r2
   1145c:	str	lr, [sp, #4]
   11460:	bl	129b0 <flatcc_verify_string_field@@Base>
   11464:	cmp	r0, #0
   11468:	beq	11478 <_start@@Base+0x244>
   1146c:	ldr	r4, [sp]
   11470:	add	sp, sp, #4
   11474:	pop	{pc}		; (ldr pc, [sp], #4)
   11478:	mov	r3, #8
   1147c:	mov	r1, #1
   11480:	mov	r2, r3
   11484:	mov	r0, r4
   11488:	bl	12944 <flatcc_verify_field@@Base>
   1148c:	cmp	r0, #0
   11490:	bne	1146c <_start@@Base+0x238>
   11494:	mov	r3, #2
   11498:	mov	r0, r4
   1149c:	ldr	r4, [sp]
   114a0:	mov	r2, r3
   114a4:	mov	r1, r3
   114a8:	ldr	lr, [sp, #4]
   114ac:	add	sp, sp, #8
   114b0:	b	12944 <flatcc_verify_field@@Base>
   114b4:	mov	r2, #0
   114b8:	str	r4, [sp, #-8]!
   114bc:	mov	r4, r0
   114c0:	mov	r1, r2
   114c4:	str	lr, [sp, #4]
   114c8:	bl	129b0 <flatcc_verify_string_field@@Base>
   114cc:	cmp	r0, #0
   114d0:	beq	114e0 <_start@@Base+0x2ac>
   114d4:	ldr	r4, [sp]
   114d8:	add	sp, sp, #4
   114dc:	pop	{pc}		; (ldr pc, [sp], #4)
   114e0:	mov	r3, #4
   114e4:	mov	r1, #1
   114e8:	mov	r2, r3
   114ec:	mov	r0, r4
   114f0:	bl	12944 <flatcc_verify_field@@Base>
   114f4:	cmp	r0, #0
   114f8:	bne	114d4 <_start@@Base+0x2a0>
   114fc:	mov	r2, r0
   11500:	mov	r1, #2
   11504:	mov	r0, r4
   11508:	bl	129b0 <flatcc_verify_string_field@@Base>
   1150c:	cmp	r0, #0
   11510:	bne	114d4 <_start@@Base+0x2a0>
   11514:	mov	r3, #8
   11518:	mov	r1, #3
   1151c:	mov	r2, r3
   11520:	mov	r0, r4
   11524:	bl	12944 <flatcc_verify_field@@Base>
   11528:	cmp	r0, #0
   1152c:	bne	114d4 <_start@@Base+0x2a0>
   11530:	mov	r2, r0
   11534:	mov	r1, #4
   11538:	mov	r0, r4
   1153c:	bl	129b0 <flatcc_verify_string_field@@Base>
   11540:	cmp	r0, #0
   11544:	bne	114d4 <_start@@Base+0x2a0>
   11548:	mov	r3, #8
   1154c:	mov	r1, #5
   11550:	mov	r2, r3
   11554:	mov	r0, r4
   11558:	bl	12944 <flatcc_verify_field@@Base>
   1155c:	cmp	r0, #0
   11560:	bne	114d4 <_start@@Base+0x2a0>
   11564:	mov	r3, #4
   11568:	mov	r1, #6
   1156c:	mov	r2, r3
   11570:	mov	r0, r4
   11574:	bl	12944 <flatcc_verify_field@@Base>
   11578:	cmp	r0, #0
   1157c:	bne	114d4 <_start@@Base+0x2a0>
   11580:	mov	r3, #8
   11584:	mov	r1, #7
   11588:	mov	r2, r3
   1158c:	mov	r0, r4
   11590:	bl	12944 <flatcc_verify_field@@Base>
   11594:	cmp	r0, #0
   11598:	bne	114d4 <_start@@Base+0x2a0>
   1159c:	mov	r3, #4
   115a0:	mov	r0, r4
   115a4:	ldr	r4, [sp]
   115a8:	mov	r2, r3
   115ac:	mov	r1, #8
   115b0:	ldr	lr, [sp, #4]
   115b4:	add	sp, sp, #8
   115b8:	b	12944 <flatcc_verify_field@@Base>
   115bc:	ldr	r3, [pc, #112]	; 11634 <_start@@Base+0x400>
   115c0:	mov	r2, #0
   115c4:	mov	r1, r2
   115c8:	str	r4, [sp, #-8]!
   115cc:	mov	r4, r0
   115d0:	str	lr, [sp, #4]
   115d4:	add	r3, pc, r3
   115d8:	bl	12d78 <flatcc_verify_table_field@@Base>
   115dc:	cmp	r0, #0
   115e0:	beq	115f0 <_start@@Base+0x3bc>
   115e4:	ldr	r4, [sp]
   115e8:	add	sp, sp, #4
   115ec:	pop	{pc}		; (ldr pc, [sp], #4)
   115f0:	ldr	r3, [pc, #64]	; 11638 <_start@@Base+0x404>
   115f4:	mov	r2, r0
   115f8:	mov	r1, #1
   115fc:	mov	r0, r4
   11600:	add	r3, pc, r3
   11604:	bl	12d78 <flatcc_verify_table_field@@Base>
   11608:	cmp	r0, #0
   1160c:	bne	115e4 <_start@@Base+0x3b0>
   11610:	ldr	r3, [pc, #36]	; 1163c <_start@@Base+0x408>
   11614:	mov	r2, r0
   11618:	mov	r1, #2
   1161c:	mov	r0, r4
   11620:	ldr	r4, [sp]
   11624:	ldr	lr, [sp, #4]
   11628:	add	sp, sp, #8
   1162c:	add	r3, pc, r3
   11630:	b	12d78 <flatcc_verify_table_field@@Base>
   11634:			; <UNDEFINED> instruction: 0xfffffed8
   11638:	andeq	r0, r0, r4, ror #14
   1163c:			; <UNDEFINED> instruction: 0xfffffd40
   11640:	mov	r3, #16
   11644:	mov	r2, #32
   11648:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1164c:	mov	r1, #0
   11650:	strd	r6, [sp, #8]
   11654:	mov	r4, r0
   11658:	str	r8, [sp, #16]
   1165c:	str	lr, [sp, #20]
   11660:	sub	sp, sp, #8
   11664:	bl	12944 <flatcc_verify_field@@Base>
   11668:	cmp	r0, #0
   1166c:	beq	11688 <_start@@Base+0x454>
   11670:	add	sp, sp, #8
   11674:	ldrd	r4, [sp]
   11678:	ldrd	r6, [sp, #8]
   1167c:	ldr	r8, [sp, #16]
   11680:	add	sp, sp, #20
   11684:	pop	{pc}		; (ldr pc, [sp], #4)
   11688:	mov	r3, #2
   1168c:	mov	r0, r4
   11690:	mov	r2, r3
   11694:	mov	r1, r3
   11698:	bl	12944 <flatcc_verify_field@@Base>
   1169c:	cmp	r0, #0
   116a0:	bne	11670 <_start@@Base+0x43c>
   116a4:	mov	r3, #2
   116a8:	mov	r1, #1
   116ac:	mov	r2, r3
   116b0:	mov	r0, r4
   116b4:	bl	12944 <flatcc_verify_field@@Base>
   116b8:	cmp	r0, #0
   116bc:	bne	11670 <_start@@Base+0x43c>
   116c0:	mov	r2, #1
   116c4:	mov	r1, #3
   116c8:	mov	r0, r4
   116cc:	bl	129b0 <flatcc_verify_string_field@@Base>
   116d0:	cmp	r0, #0
   116d4:	bne	11670 <_start@@Base+0x43c>
   116d8:	mov	r3, #1
   116dc:	mov	r1, #6
   116e0:	mov	r2, r3
   116e4:	mov	r0, r4
   116e8:	bl	12944 <flatcc_verify_field@@Base>
   116ec:	cmp	r0, #0
   116f0:	bne	11670 <_start@@Base+0x43c>
   116f4:	mov	r5, #1
   116f8:	mvn	r6, #0
   116fc:	mov	r2, r0
   11700:	mov	r3, r5
   11704:	mov	r1, #5
   11708:	mov	r0, r4
   1170c:	stm	sp, {r5, r6}
   11710:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11714:	cmp	r0, #0
   11718:	bne	11670 <_start@@Base+0x43c>
   1171c:	ldr	r3, [pc, #888]	; 11a9c <_start@@Base+0x868>
   11720:	mov	r2, r0
   11724:	mov	r1, #11
   11728:	mov	r0, r4
   1172c:	add	r3, pc, r3
   11730:	bl	12ee4 <flatcc_verify_table_vector_field@@Base>
   11734:	cmp	r0, #0
   11738:	bne	11670 <_start@@Base+0x43c>
   1173c:	mov	r2, r0
   11740:	mov	r1, #10
   11744:	mov	r0, r4
   11748:	bl	12b94 <flatcc_verify_string_vector_field@@Base>
   1174c:	cmp	r0, #0
   11750:	bne	11670 <_start@@Base+0x43c>
   11754:	mov	r2, r0
   11758:	mov	r1, #28
   1175c:	mov	r0, r4
   11760:	bl	12b94 <flatcc_verify_string_vector_field@@Base>
   11764:	cmp	r0, #0
   11768:	bne	11670 <_start@@Base+0x43c>
   1176c:	mov	r2, r0
   11770:	mov	r3, r5
   11774:	stm	sp, {r5, r6}
   11778:	mov	r1, #24
   1177c:	mov	r0, r4
   11780:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11784:	cmp	r0, #0
   11788:	bne	11670 <_start@@Base+0x43c>
   1178c:	mvn	ip, #-536870912	; 0xe0000000
   11790:	mov	r5, #4
   11794:	mov	r3, #8
   11798:	mov	r2, #0
   1179c:	mov	r1, #29
   117a0:	mov	r0, r4
   117a4:	stm	sp, {r5, ip}
   117a8:	bl	12a90 <flatcc_verify_vector_field@@Base>
   117ac:	cmp	r0, #0
   117b0:	bne	11670 <_start@@Base+0x43c>
   117b4:	ldr	r7, [pc, #740]	; 11aa0 <_start@@Base+0x86c>
   117b8:	mov	r2, r0
   117bc:	mov	r1, #12
   117c0:	mov	r0, r4
   117c4:	add	r7, pc, r7
   117c8:	mov	r3, r7
   117cc:	bl	12d78 <flatcc_verify_table_field@@Base>
   117d0:	cmp	r0, #0
   117d4:	bne	11670 <_start@@Base+0x43c>
   117d8:	ldr	r3, [pc, #708]	; 11aa4 <_start@@Base+0x870>
   117dc:	mov	r2, r0
   117e0:	mov	r1, #8
   117e4:	mov	r0, r4
   117e8:	add	r3, pc, r3
   117ec:	bl	13b2c <flatcc_verify_union_field@@Base>
   117f0:	cmp	r0, #0
   117f4:	bne	11670 <_start@@Base+0x43c>
   117f8:	mvn	r6, #-1073741824	; 0xc0000000
   117fc:	mov	r8, #2
   11800:	mov	r2, r0
   11804:	mov	r3, r5
   11808:	mov	r1, #9
   1180c:	mov	r0, r4
   11810:	str	r8, [sp]
   11814:	str	r6, [sp, #4]
   11818:	bl	12a90 <flatcc_verify_vector_field@@Base>
   1181c:	cmp	r0, #0
   11820:	bne	11670 <_start@@Base+0x43c>
   11824:	mov	r2, r0
   11828:	mov	r3, r5
   1182c:	str	r8, [sp]
   11830:	mov	r1, #31
   11834:	mov	r0, r4
   11838:	str	r6, [sp, #4]
   1183c:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11840:	cmp	r0, #0
   11844:	bne	11670 <_start@@Base+0x43c>
   11848:	mov	r6, #1
   1184c:	mov	r3, r0
   11850:	mov	r2, r0
   11854:	mov	r1, #13
   11858:	mov	r0, r4
   1185c:	strd	r6, [sp]
   11860:	bl	13958 <flatcc_verify_table_as_nested_root@@Base>
   11864:	cmp	r0, #0
   11868:	bne	11670 <_start@@Base+0x43c>
   1186c:	ldr	r3, [pc, #564]	; 11aa8 <_start@@Base+0x874>
   11870:	mov	r2, r0
   11874:	mov	r1, #14
   11878:	mov	r0, r4
   1187c:	add	r3, pc, r3
   11880:	bl	12d78 <flatcc_verify_table_field@@Base>
   11884:	cmp	r0, #0
   11888:	bne	11670 <_start@@Base+0x43c>
   1188c:	mov	r3, r6
   11890:	mov	r2, r6
   11894:	mov	r1, #15
   11898:	mov	r0, r4
   1189c:	bl	12944 <flatcc_verify_field@@Base>
   118a0:	cmp	r0, #0
   118a4:	bne	11670 <_start@@Base+0x43c>
   118a8:	mov	r3, r5
   118ac:	mov	r2, r5
   118b0:	mov	r1, #16
   118b4:	mov	r0, r4
   118b8:	bl	12944 <flatcc_verify_field@@Base>
   118bc:	cmp	r0, #0
   118c0:	bne	11670 <_start@@Base+0x43c>
   118c4:	mov	r3, r5
   118c8:	mov	r2, r5
   118cc:	mov	r1, #17
   118d0:	mov	r0, r4
   118d4:	bl	12944 <flatcc_verify_field@@Base>
   118d8:	cmp	r0, #0
   118dc:	bne	11670 <_start@@Base+0x43c>
   118e0:	mov	r3, #8
   118e4:	mov	r1, #18
   118e8:	mov	r2, r3
   118ec:	mov	r0, r4
   118f0:	bl	12944 <flatcc_verify_field@@Base>
   118f4:	cmp	r0, #0
   118f8:	bne	11670 <_start@@Base+0x43c>
   118fc:	mov	r3, #8
   11900:	mov	r1, #19
   11904:	mov	r2, r3
   11908:	mov	r0, r4
   1190c:	bl	12944 <flatcc_verify_field@@Base>
   11910:	cmp	r0, #0
   11914:	bne	11670 <_start@@Base+0x43c>
   11918:	mov	r3, r5
   1191c:	mov	r1, #20
   11920:	mov	r2, r5
   11924:	mov	r0, r4
   11928:	bl	12944 <flatcc_verify_field@@Base>
   1192c:	cmp	r0, #0
   11930:	bne	11670 <_start@@Base+0x43c>
   11934:	mov	r3, r5
   11938:	mov	r1, #21
   1193c:	mov	r2, r5
   11940:	mov	r0, r4
   11944:	bl	12944 <flatcc_verify_field@@Base>
   11948:	cmp	r0, #0
   1194c:	bne	11670 <_start@@Base+0x43c>
   11950:	mov	r3, #8
   11954:	mov	r1, #22
   11958:	mov	r2, r3
   1195c:	mov	r0, r4
   11960:	bl	12944 <flatcc_verify_field@@Base>
   11964:	cmp	r0, #0
   11968:	bne	11670 <_start@@Base+0x43c>
   1196c:	mov	r3, #8
   11970:	mov	r1, #23
   11974:	mov	r2, r3
   11978:	mov	r0, r4
   1197c:	bl	12944 <flatcc_verify_field@@Base>
   11980:	cmp	r0, #0
   11984:	bne	11670 <_start@@Base+0x43c>
   11988:	mov	r3, r5
   1198c:	mov	r1, #25
   11990:	mov	r2, r5
   11994:	mov	r0, r4
   11998:	bl	12944 <flatcc_verify_field@@Base>
   1199c:	cmp	r0, #0
   119a0:	bne	11670 <_start@@Base+0x43c>
   119a4:	mov	r3, r5
   119a8:	mov	r1, #26
   119ac:	mov	r2, r5
   119b0:	mov	r0, r4
   119b4:	bl	12944 <flatcc_verify_field@@Base>
   119b8:	cmp	r0, #0
   119bc:	bne	11670 <_start@@Base+0x43c>
   119c0:	mov	r3, r5
   119c4:	mov	r1, #27
   119c8:	mov	r2, r5
   119cc:	mov	r0, r4
   119d0:	bl	12944 <flatcc_verify_field@@Base>
   119d4:	cmp	r0, #0
   119d8:	bne	11670 <_start@@Base+0x43c>
   119dc:	mvn	ip, #0
   119e0:	mov	r1, r6
   119e4:	mov	r2, r0
   119e8:	mov	r3, r6
   119ec:	mov	r0, r4
   119f0:	stm	sp, {r1, ip}
   119f4:	mov	r1, #30
   119f8:	bl	12a90 <flatcc_verify_vector_field@@Base>
   119fc:	cmp	r0, #0
   11a00:	bne	11670 <_start@@Base+0x43c>
   11a04:	mov	r5, #8
   11a08:	mvn	r6, #-536870912	; 0xe0000000
   11a0c:	mov	r3, r5
   11a10:	mov	r2, #0
   11a14:	mov	r1, #32
   11a18:	mov	r0, r4
   11a1c:	stm	sp, {r5, r6}
   11a20:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11a24:	cmp	r0, #0
   11a28:	bne	11670 <_start@@Base+0x43c>
   11a2c:	mov	r2, r0
   11a30:	mov	r3, r5
   11a34:	stm	sp, {r5, r6}
   11a38:	mov	r1, #33	; 0x21
   11a3c:	mov	r0, r4
   11a40:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11a44:	cmp	r0, #0
   11a48:	bne	11670 <_start@@Base+0x43c>
   11a4c:	ldr	r3, [pc, #88]	; 11aac <_start@@Base+0x878>
   11a50:	mov	r2, r0
   11a54:	mov	r1, #34	; 0x22
   11a58:	mov	r0, r4
   11a5c:	add	r3, pc, r3
   11a60:	bl	12d78 <flatcc_verify_table_field@@Base>
   11a64:	cmp	r0, #0
   11a68:	bne	11670 <_start@@Base+0x43c>
   11a6c:	ldr	r3, [pc, #60]	; 11ab0 <_start@@Base+0x87c>
   11a70:	mov	r2, r0
   11a74:	mov	r1, #35	; 0x23
   11a78:	mov	r0, r4
   11a7c:	add	r3, pc, r3
   11a80:	add	sp, sp, #8
   11a84:	ldrd	r4, [sp]
   11a88:	ldrd	r6, [sp, #8]
   11a8c:	ldr	r8, [sp, #16]
   11a90:	ldr	lr, [sp, #20]
   11a94:	add	sp, sp, #24
   11a98:	b	12d78 <flatcc_verify_table_field@@Base>
   11a9c:			; <UNDEFINED> instruction: 0xffffff0c
   11aa0:			; <UNDEFINED> instruction: 0xfffffe74
   11aa4:	andeq	r0, r0, r8, asr r3
   11aa8:			; <UNDEFINED> instruction: 0xfffffbc8
   11aac:			; <UNDEFINED> instruction: 0xfffff8c4
   11ab0:	andeq	r0, r0, r0, lsr r0
   11ab4:	strd	r4, [sp, #-16]!
   11ab8:	mov	r4, #1
   11abc:	mvn	r5, #0
   11ac0:	str	r6, [sp, #8]
   11ac4:	mov	r2, #0
   11ac8:	mov	r3, r4
   11acc:	str	lr, [sp, #12]
   11ad0:	sub	sp, sp, #8
   11ad4:	mov	r1, r2
   11ad8:	mov	r6, r0
   11adc:	strd	r4, [sp]
   11ae0:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11ae4:	subs	r2, r0, #0
   11ae8:	beq	11b04 <_start@@Base+0x8d0>
   11aec:	mov	r0, r2
   11af0:	add	sp, sp, #8
   11af4:	ldrd	r4, [sp]
   11af8:	ldr	r6, [sp, #8]
   11afc:	add	sp, sp, #12
   11b00:	pop	{pc}		; (ldr pc, [sp], #4)
   11b04:	mov	r3, r4
   11b08:	mov	r1, r4
   11b0c:	strd	r4, [sp]
   11b10:	mov	r0, r6
   11b14:	bl	12a90 <flatcc_verify_vector_field@@Base>
   11b18:	subs	r2, r0, #0
   11b1c:	bne	11aec <_start@@Base+0x8b8>
   11b20:	ldr	ip, [pc, #28]	; 11b44 <_start@@Base+0x910>
   11b24:	mov	r3, r2
   11b28:	mov	r0, r6
   11b2c:	mov	r1, #2
   11b30:	add	ip, pc, ip
   11b34:	stm	sp, {r4, ip}
   11b38:	bl	13958 <flatcc_verify_table_as_nested_root@@Base>
   11b3c:	mov	r2, r0
   11b40:	b	11aec <_start@@Base+0x8b8>
   11b44:			; <UNDEFINED> instruction: 0xfffffb08
   11b48:	ldrb	r3, [r0, #12]
   11b4c:	sub	r3, r3, #1
   11b50:	cmp	r3, #3
   11b54:	addls	pc, pc, r3, lsl #2
   11b58:	b	11b9c <_start@@Base+0x968>
   11b5c:	b	11b90 <_start@@Base+0x95c>
   11b60:	b	11b84 <_start@@Base+0x950>
   11b64:	b	11b78 <_start@@Base+0x944>
   11b68:	b	11b6c <_start@@Base+0x938>
   11b6c:	ldr	r1, [pc, #48]	; 11ba4 <_start@@Base+0x970>
   11b70:	add	r1, pc, r1
   11b74:	b	13208 <flatcc_verify_union_table@@Base>
   11b78:	ldr	r1, [pc, #40]	; 11ba8 <_start@@Base+0x974>
   11b7c:	add	r1, pc, r1
   11b80:	b	13208 <flatcc_verify_union_table@@Base>
   11b84:	ldr	r1, [pc, #32]	; 11bac <_start@@Base+0x978>
   11b88:	add	r1, pc, r1
   11b8c:	b	13208 <flatcc_verify_union_table@@Base>
   11b90:	ldr	r1, [pc, #24]	; 11bb0 <_start@@Base+0x97c>
   11b94:	add	r1, pc, r1
   11b98:	b	13208 <flatcc_verify_union_table@@Base>
   11b9c:	mov	r0, #0
   11ba0:	bx	lr
   11ba4:	andeq	r0, r0, ip, lsr r0
   11ba8:	andeq	r0, r0, r0, ror #3
   11bac:			; <UNDEFINED> instruction: 0xfffff834
   11bb0:			; <UNDEFINED> instruction: 0xfffffaa4
   11bb4:	ldr	r3, [pc, #112]	; 11c2c <_start@@Base+0x9f8>
   11bb8:	mov	r2, #0
   11bbc:	mov	r1, r2
   11bc0:	str	r4, [sp, #-8]!
   11bc4:	mov	r4, r0
   11bc8:	str	lr, [sp, #4]
   11bcc:	add	r3, pc, r3
   11bd0:	bl	12d78 <flatcc_verify_table_field@@Base>
   11bd4:	cmp	r0, #0
   11bd8:	beq	11be8 <_start@@Base+0x9b4>
   11bdc:	ldr	r4, [sp]
   11be0:	add	sp, sp, #4
   11be4:	pop	{pc}		; (ldr pc, [sp], #4)
   11be8:	ldr	r3, [pc, #64]	; 11c30 <_start@@Base+0x9fc>
   11bec:	mov	r2, r0
   11bf0:	mov	r1, #1
   11bf4:	mov	r0, r4
   11bf8:	add	r3, pc, r3
   11bfc:	bl	12d78 <flatcc_verify_table_field@@Base>
   11c00:	cmp	r0, #0
   11c04:	bne	11bdc <_start@@Base+0x9a8>
   11c08:	ldr	r3, [pc, #36]	; 11c34 <_start@@Base+0xa00>
   11c0c:	mov	r2, r0
   11c10:	mov	r1, #3
   11c14:	mov	r0, r4
   11c18:	ldr	r4, [sp]
   11c1c:	ldr	lr, [sp, #4]
   11c20:	add	sp, sp, #8
   11c24:	add	r3, pc, r3
   11c28:	b	13c80 <flatcc_verify_union_vector_field@@Base>
   11c2c:			; <UNDEFINED> instruction: 0xfffff9e8
   11c30:	andeq	r0, r0, r8, lsr r0
   11c34:			; <UNDEFINED> instruction: 0xffffff1c
   11c38:	strd	r4, [sp, #-16]!
   11c3c:	mov	r2, #0
   11c40:	mov	r1, #1
   11c44:	ldr	r4, [pc, #164]	; 11cf0 <_start@@Base+0xabc>
   11c48:	mov	r5, r0
   11c4c:	str	r6, [sp, #8]
   11c50:	str	lr, [sp, #12]
   11c54:	add	r4, pc, r4
   11c58:	mov	r3, r4
   11c5c:	bl	13b2c <flatcc_verify_union_field@@Base>
   11c60:	cmp	r0, #0
   11c64:	beq	11c78 <_start@@Base+0xa44>
   11c68:	ldrd	r4, [sp]
   11c6c:	ldr	r6, [sp, #8]
   11c70:	add	sp, sp, #12
   11c74:	pop	{pc}		; (ldr pc, [sp], #4)
   11c78:	mov	r2, r0
   11c7c:	mov	r3, r4
   11c80:	mov	r1, #3
   11c84:	mov	r0, r5
   11c88:	bl	13b2c <flatcc_verify_union_field@@Base>
   11c8c:	cmp	r0, #0
   11c90:	bne	11c68 <_start@@Base+0xa34>
   11c94:	mov	r2, r0
   11c98:	mov	r3, r4
   11c9c:	mov	r1, #5
   11ca0:	mov	r0, r5
   11ca4:	bl	13b2c <flatcc_verify_union_field@@Base>
   11ca8:	cmp	r0, #0
   11cac:	bne	11c68 <_start@@Base+0xa34>
   11cb0:	mov	r2, r0
   11cb4:	mov	r3, r4
   11cb8:	mov	r1, #7
   11cbc:	mov	r0, r5
   11cc0:	bl	13b2c <flatcc_verify_union_field@@Base>
   11cc4:	cmp	r0, #0
   11cc8:	bne	11c68 <_start@@Base+0xa34>
   11ccc:	mov	r3, r4
   11cd0:	mov	r2, r0
   11cd4:	ldr	r6, [sp, #8]
   11cd8:	mov	r0, r5
   11cdc:	mov	r1, #9
   11ce0:	ldrd	r4, [sp]
   11ce4:	ldr	lr, [sp, #12]
   11ce8:	add	sp, sp, #16
   11cec:	b	13c80 <flatcc_verify_union_vector_field@@Base>
   11cf0:	muleq	r0, r8, r0
   11cf4:	ldrb	r3, [r0, #12]
   11cf8:	mov	r2, r0
   11cfc:	cmp	r3, #10
   11d00:	bhi	11d28 <_start@@Base+0xaf4>
   11d04:	cmp	r3, #9
   11d08:	bcs	11d40 <_start@@Base+0xb0c>
   11d0c:	cmp	r3, #2
   11d10:	beq	11d54 <_start@@Base+0xb20>
   11d14:	cmp	r3, #8
   11d18:	bne	11d4c <_start@@Base+0xb18>
   11d1c:	mov	r2, #2
   11d20:	mov	r1, r2
   11d24:	b	13304 <flatcc_verify_union_struct@@Base>
   11d28:	cmp	r3, #11
   11d2c:	beq	11d38 <_start@@Base+0xb04>
   11d30:	cmp	r3, #255	; 0xff
   11d34:	bne	11d4c <_start@@Base+0xb18>
   11d38:	mov	r0, r2
   11d3c:	b	13364 <flatcc_verify_union_string@@Base>
   11d40:	mov	r2, #4
   11d44:	mov	r1, r2
   11d48:	b	13304 <flatcc_verify_union_struct@@Base>
   11d4c:	mov	r0, #0
   11d50:	bx	lr
   11d54:	ldr	r1, [pc, #4]	; 11d60 <_start@@Base+0xb2c>
   11d58:	add	r1, pc, r1
   11d5c:	b	13208 <flatcc_verify_union_table@@Base>
   11d60:			; <UNDEFINED> instruction: 0xfffff5d0
   11d64:	mov	r0, #0
   11d68:	bx	lr
   11d6c:	mov	r3, #8
   11d70:	mov	r1, #0
   11d74:	str	r4, [sp, #-8]!
   11d78:	mov	r2, r3
   11d7c:	mov	r4, r0
   11d80:	str	lr, [sp, #4]
   11d84:	bl	12944 <flatcc_verify_field@@Base>
   11d88:	cmp	r0, #0
   11d8c:	beq	11d9c <_start@@Base+0xb68>
   11d90:	ldr	r4, [sp]
   11d94:	add	sp, sp, #4
   11d98:	pop	{pc}		; (ldr pc, [sp], #4)
   11d9c:	mov	r3, #4
   11da0:	mov	r0, r4
   11da4:	ldr	r4, [sp]
   11da8:	mov	r2, r3
   11dac:	mov	r1, #1
   11db0:	ldr	lr, [sp, #4]
   11db4:	add	sp, sp, #8
   11db8:	b	12944 <flatcc_verify_field@@Base>

00011dbc <verify_monster@@Base>:
   11dbc:	cmp	r0, #0
   11dc0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11dc4:	strd	r6, [sp, #8]
   11dc8:	strd	r8, [sp, #16]
   11dcc:	str	sl, [sp, #24]
   11dd0:	str	lr, [sp, #28]
   11dd4:	beq	11dec <verify_monster@@Base+0x30>
   11dd8:	ldr	r2, [r0, #4]
   11ddc:	movw	r3, #20301	; 0x4f4d
   11de0:	movt	r3, #21326	; 0x534e
   11de4:	cmp	r2, r3
   11de8:	beq	11e14 <verify_monster@@Base+0x58>
   11dec:	ldr	r0, [pc, #1144]	; 1226c <verify_monster@@Base+0x4b0>
   11df0:	add	r0, pc, r0
   11df4:	bl	10d20 <puts@plt>
   11df8:	mvn	r0, #0
   11dfc:	ldrd	r4, [sp]
   11e00:	ldrd	r6, [sp, #8]
   11e04:	ldrd	r8, [sp, #16]
   11e08:	ldr	sl, [sp, #24]
   11e0c:	add	sp, sp, #28
   11e10:	pop	{pc}		; (ldr pc, [sp], #4)
   11e14:	ldr	r3, [r0]
   11e18:	adds	r5, r0, r3
   11e1c:	beq	11dec <verify_monster@@Base+0x30>
   11e20:	ldr	r4, [r0, r3]
   11e24:	sub	r4, r5, r4
   11e28:	ldrh	r6, [r4]
   11e2c:	cmp	r6, #9
   11e30:	bls	1211c <verify_monster@@Base+0x360>
   11e34:	ldrh	r3, [r4, #8]
   11e38:	cmp	r3, #0
   11e3c:	beq	1211c <verify_monster@@Base+0x360>
   11e40:	ldrsh	r3, [r5, r3]
   11e44:	cmp	r3, #80	; 0x50
   11e48:	bne	1211c <verify_monster@@Base+0x360>
   11e4c:	ldrh	r3, [r4, #4]
   11e50:	cmp	r3, #0
   11e54:	beq	12540 <verify_monster@@Base+0x784>
   11e58:	adds	r3, r5, r3
   11e5c:	beq	12540 <verify_monster@@Base+0x784>
   11e60:	sub	r0, r3, r0
   11e64:	tst	r0, #15
   11e68:	bne	124b4 <verify_monster@@Base+0x6f8>
   11e6c:	vldr	s15, [pc, #1004]	; 12260 <verify_monster@@Base+0x4a4>
   11e70:	vldr	s14, [r3]
   11e74:	vcmp.f32	s14, s15
   11e78:	vmrs	APSR_nzcv, fpscr
   11e7c:	bne	1248c <verify_monster@@Base+0x6d0>
   11e80:	vldr	s15, [pc, #988]	; 12264 <verify_monster@@Base+0x4a8>
   11e84:	vldr	s14, [r3, #4]
   11e88:	vcmp.f32	s14, s15
   11e8c:	vmrs	APSR_nzcv, fpscr
   11e90:	bne	124a0 <verify_monster@@Base+0x6e4>
   11e94:	vldr	s15, [pc, #972]	; 12268 <verify_monster@@Base+0x4ac>
   11e98:	vldr	s14, [r3, #8]
   11e9c:	vcmp.f32	s14, s15
   11ea0:	vmrs	APSR_nzcv, fpscr
   11ea4:	bne	124dc <verify_monster@@Base+0x720>
   11ea8:	vldr	d7, [pc, #928]	; 12250 <verify_monster@@Base+0x494>
   11eac:	vldr	d6, [r3, #16]
   11eb0:	vcmp.f64	d6, d7
   11eb4:	vmrs	APSR_nzcv, fpscr
   11eb8:	bne	124c8 <verify_monster@@Base+0x70c>
   11ebc:	ldrsb	r2, [r3, #24]
   11ec0:	cmp	r2, #2
   11ec4:	bne	12464 <verify_monster@@Base+0x6a8>
   11ec8:	ldrsh	r2, [r3, #26]
   11ecc:	cmp	r2, #5
   11ed0:	bne	12450 <verify_monster@@Base+0x694>
   11ed4:	ldrsb	r3, [r3, #28]
   11ed8:	cmp	r3, #6
   11edc:	bne	12450 <verify_monster@@Base+0x694>
   11ee0:	cmp	r6, #11
   11ee4:	bls	125a4 <verify_monster@@Base+0x7e8>
   11ee8:	ldrh	r0, [r4, #10]
   11eec:	cmp	r0, #0
   11ef0:	beq	125a4 <verify_monster@@Base+0x7e8>
   11ef4:	ldr	r3, [r5, r0]
   11ef8:	add	r0, r5, r0
   11efc:	add	r3, r3, #4
   11f00:	adds	r0, r0, r3
   11f04:	beq	12108 <verify_monster@@Base+0x34c>
   11f08:	ldr	r3, [r0, #-4]
   11f0c:	cmp	r3, #9
   11f10:	bne	12108 <verify_monster@@Base+0x34c>
   11f14:	ldr	r1, [pc, #852]	; 12270 <verify_monster@@Base+0x4b4>
   11f18:	add	r1, pc, r1
   11f1c:	bl	10cb4 <strcmp@plt>
   11f20:	subs	r1, r0, #0
   11f24:	bne	12478 <verify_monster@@Base+0x6bc>
   11f28:	cmp	r6, #15
   11f2c:	bls	120f4 <verify_monster@@Base+0x338>
   11f30:	ldrh	r3, [r4, #14]
   11f34:	cmp	r3, #0
   11f38:	beq	120f4 <verify_monster@@Base+0x338>
   11f3c:	ldr	r2, [r5, r3]
   11f40:	add	r3, r5, r3
   11f44:	add	r2, r2, #4
   11f48:	adds	r3, r3, r2
   11f4c:	beq	120f4 <verify_monster@@Base+0x338>
   11f50:	ldr	r2, [r3, #-4]
   11f54:	cmp	r2, #5
   11f58:	subeq	r3, r3, #1
   11f5c:	bne	120f4 <verify_monster@@Base+0x338>
   11f60:	ldrb	r2, [r3, #1]!
   11f64:	cmp	r2, r1
   11f68:	bne	12158 <verify_monster@@Base+0x39c>
   11f6c:	add	r1, r1, #1
   11f70:	cmp	r1, #5
   11f74:	bne	11f60 <verify_monster@@Base+0x1a4>
   11f78:	cmp	r6, #25
   11f7c:	bls	125c4 <verify_monster@@Base+0x808>
   11f80:	ldrh	r3, [r4, #24]
   11f84:	cmp	r3, #0
   11f88:	beq	125c4 <verify_monster@@Base+0x808>
   11f8c:	ldr	r2, [r5, r3]
   11f90:	add	r3, r5, r3
   11f94:	add	r2, r2, #4
   11f98:	adds	r7, r3, r2
   11f9c:	beq	125c4 <verify_monster@@Base+0x808>
   11fa0:	ldr	r1, [r7, #-4]
   11fa4:	cmp	r1, #2
   11fa8:	bne	12504 <verify_monster@@Base+0x748>
   11fac:	ldr	r0, [r3, r2]
   11fb0:	ldr	r1, [pc, #700]	; 12274 <verify_monster@@Base+0x4b8>
   11fb4:	add	r0, r0, #4
   11fb8:	add	r0, r7, r0
   11fbc:	add	r1, pc, r1
   11fc0:	bl	10cb4 <strcmp@plt>
   11fc4:	cmp	r0, #0
   11fc8:	bne	1257c <verify_monster@@Base+0x7c0>
   11fcc:	ldr	r0, [r7, #4]
   11fd0:	ldr	r1, [pc, #672]	; 12278 <verify_monster@@Base+0x4bc>
   11fd4:	add	r0, r0, #8
   11fd8:	add	r0, r7, r0
   11fdc:	add	r1, pc, r1
   11fe0:	bl	10cb4 <strcmp@plt>
   11fe4:	cmp	r0, #0
   11fe8:	bne	124f0 <verify_monster@@Base+0x734>
   11fec:	ldrh	r3, [r4, #18]
   11ff0:	cmp	r3, #0
   11ff4:	beq	12130 <verify_monster@@Base+0x374>
   11ff8:	ldrb	r3, [r5, r3]
   11ffc:	cmp	r3, #1
   12000:	bne	12130 <verify_monster@@Base+0x374>
   12004:	ldrh	r3, [r4, #20]
   12008:	cmp	r3, #0
   1200c:	beq	12590 <verify_monster@@Base+0x7d4>
   12010:	ldr	r2, [r5, r3]
   12014:	add	r3, r5, r3
   12018:	adds	r0, r3, r2
   1201c:	beq	12590 <verify_monster@@Base+0x7d4>
   12020:	ldr	r3, [r3, r2]
   12024:	sub	r3, r0, r3
   12028:	ldrh	r2, [r3]
   1202c:	cmp	r2, #11
   12030:	bls	125a4 <verify_monster@@Base+0x7e8>
   12034:	ldrh	r2, [r3, #10]
   12038:	cmp	r2, #0
   1203c:	beq	125a4 <verify_monster@@Base+0x7e8>
   12040:	ldr	r3, [r0, r2]
   12044:	add	r0, r0, r2
   12048:	ldr	r1, [pc, #556]	; 1227c <verify_monster@@Base+0x4c0>
   1204c:	add	r3, r3, #4
   12050:	add	r0, r0, r3
   12054:	add	r1, pc, r1
   12058:	bl	10cb4 <strcmp@plt>
   1205c:	cmp	r0, #0
   12060:	bne	12518 <verify_monster@@Base+0x75c>
   12064:	ldrh	r3, [r4, #22]
   12068:	cmp	r3, #0
   1206c:	beq	12144 <verify_monster@@Base+0x388>
   12070:	ldr	r1, [r5, r3]
   12074:	add	r3, r5, r3
   12078:	add	r1, r1, #4
   1207c:	adds	r2, r3, r1
   12080:	beq	12144 <verify_monster@@Base+0x388>
   12084:	ldr	ip, [r2, #-4]
   12088:	cmp	ip, #2
   1208c:	bne	12144 <verify_monster@@Base+0x388>
   12090:	ldrsh	r3, [r3, r1]
   12094:	cmp	r3, #10
   12098:	bne	12568 <verify_monster@@Base+0x7ac>
   1209c:	ldrsb	r3, [r2, #2]
   120a0:	cmp	r3, #20
   120a4:	bne	12554 <verify_monster@@Base+0x798>
   120a8:	cmn	r2, #4
   120ac:	beq	1243c <verify_monster@@Base+0x680>
   120b0:	ldrsh	r3, [r2, #4]
   120b4:	cmp	r3, #30
   120b8:	bne	1243c <verify_monster@@Base+0x680>
   120bc:	ldrsb	r3, [r2, #6]
   120c0:	cmp	r3, #40	; 0x28
   120c4:	bne	1252c <verify_monster@@Base+0x770>
   120c8:	cmp	r6, #37	; 0x25
   120cc:	bhi	1216c <verify_monster@@Base+0x3b0>
   120d0:	ldr	r3, [pc, #424]	; 12280 <verify_monster@@Base+0x4c4>
   120d4:	mov	r2, #148	; 0x94
   120d8:	ldr	r1, [pc, #420]	; 12284 <verify_monster@@Base+0x4c8>
   120dc:	ldr	r0, [pc, #420]	; 12288 <verify_monster@@Base+0x4cc>
   120e0:	add	r3, pc, r3
   120e4:	add	r3, r3, #28
   120e8:	add	r1, pc, r1
   120ec:	add	r0, pc, r0
   120f0:	bl	10db0 <__assert_fail@plt>
   120f4:	ldr	r0, [pc, #400]	; 1228c <verify_monster@@Base+0x4d0>
   120f8:	add	r0, pc, r0
   120fc:	bl	10d20 <puts@plt>
   12100:	mvn	r0, #0
   12104:	b	11dfc <verify_monster@@Base+0x40>
   12108:	ldr	r0, [pc, #384]	; 12290 <verify_monster@@Base+0x4d4>
   1210c:	add	r0, pc, r0
   12110:	bl	10d20 <puts@plt>
   12114:	mvn	r0, #0
   12118:	b	11dfc <verify_monster@@Base+0x40>
   1211c:	ldr	r0, [pc, #368]	; 12294 <verify_monster@@Base+0x4d8>
   12120:	add	r0, pc, r0
   12124:	bl	10d20 <puts@plt>
   12128:	mvn	r0, #0
   1212c:	b	11dfc <verify_monster@@Base+0x40>
   12130:	ldr	r0, [pc, #352]	; 12298 <verify_monster@@Base+0x4dc>
   12134:	add	r0, pc, r0
   12138:	bl	10d20 <puts@plt>
   1213c:	mvn	r0, #0
   12140:	b	11dfc <verify_monster@@Base+0x40>
   12144:	ldr	r0, [pc, #336]	; 1229c <verify_monster@@Base+0x4e0>
   12148:	add	r0, pc, r0
   1214c:	bl	10d20 <puts@plt>
   12150:	mvn	r0, #0
   12154:	b	11dfc <verify_monster@@Base+0x40>
   12158:	ldr	r0, [pc, #320]	; 122a0 <verify_monster@@Base+0x4e4>
   1215c:	add	r0, pc, r0
   12160:	bl	10cc0 <printf@plt>
   12164:	mvn	r0, #0
   12168:	b	11dfc <verify_monster@@Base+0x40>
   1216c:	ldrh	r3, [r4, #36]	; 0x24
   12170:	cmp	r3, #0
   12174:	beq	120d0 <verify_monster@@Base+0x314>
   12178:	ldr	r2, [r5, r3]
   1217c:	movw	r3, #51521	; 0xc941
   12180:	movt	r3, #56697	; 0xdd79
   12184:	cmp	r2, r3
   12188:	bne	120d0 <verify_monster@@Base+0x314>
   1218c:	cmp	r6, #39	; 0x27
   12190:	bhi	121b8 <verify_monster@@Base+0x3fc>
   12194:	ldr	r3, [pc, #264]	; 122a4 <verify_monster@@Base+0x4e8>
   12198:	mov	r2, #149	; 0x95
   1219c:	ldr	r1, [pc, #260]	; 122a8 <verify_monster@@Base+0x4ec>
   121a0:	ldr	r0, [pc, #260]	; 122ac <verify_monster@@Base+0x4f0>
   121a4:	add	r3, pc, r3
   121a8:	add	r3, r3, #28
   121ac:	add	r1, pc, r1
   121b0:	add	r0, pc, r0
   121b4:	bl	10db0 <__assert_fail@plt>
   121b8:	ldrh	r3, [r4, #38]	; 0x26
   121bc:	cmp	r3, #0
   121c0:	beq	12194 <verify_monster@@Base+0x3d8>
   121c4:	ldr	r3, [r5, r3]
   121c8:	cmp	r3, r2
   121cc:	bne	12194 <verify_monster@@Base+0x3d8>
   121d0:	cmp	r6, #41	; 0x29
   121d4:	bhi	121fc <verify_monster@@Base+0x440>
   121d8:	ldr	r3, [pc, #208]	; 122b0 <verify_monster@@Base+0x4f4>
   121dc:	mov	r2, #150	; 0x96
   121e0:	ldr	r1, [pc, #204]	; 122b4 <verify_monster@@Base+0x4f8>
   121e4:	ldr	r0, [pc, #204]	; 122b8 <verify_monster@@Base+0x4fc>
   121e8:	add	r3, pc, r3
   121ec:	add	r3, r3, #28
   121f0:	add	r1, pc, r1
   121f4:	add	r0, pc, r0
   121f8:	bl	10db0 <__assert_fail@plt>
   121fc:	ldrh	r1, [r4, #40]	; 0x28
   12200:	cmp	r1, #0
   12204:	beq	121d8 <verify_monster@@Base+0x41c>
   12208:	add	r3, pc, #72	; 0x48
   1220c:	ldrd	r2, [r3]
   12210:	ldrd	r8, [r5, r1]
   12214:	cmp	r9, r3
   12218:	cmpeq	r8, r2
   1221c:	bne	121d8 <verify_monster@@Base+0x41c>
   12220:	cmp	r6, #43	; 0x2b
   12224:	bhi	122ec <verify_monster@@Base+0x530>
   12228:	ldr	r3, [pc, #140]	; 122bc <verify_monster@@Base+0x500>
   1222c:	mov	r2, #151	; 0x97
   12230:	ldr	r1, [pc, #136]	; 122c0 <verify_monster@@Base+0x504>
   12234:	ldr	r0, [pc, #136]	; 122c4 <verify_monster@@Base+0x508>
   12238:	add	r3, pc, r3
   1223c:	add	r3, r3, #28
   12240:	add	r1, pc, r1
   12244:	add	r0, pc, r0
   12248:	bl	10db0 <__assert_fail@plt>
   1224c:	nop	{0}
   12250:	andeq	r0, r0, r0
   12254:	andmi	r0, r8, r0
   12258:	vrhadd.s<illegal width 64>	d25, d27, d1
   1225c:	cdpvs	0, 0, cr8, cr15, cr13, {6}
   12260:	svccc	0x00800000
   12264:	andmi	r0, r0, r0
   12268:	submi	r0, r0, r0
   1226c:	andeq	r2, r0, ip, asr r2
   12270:	muleq	r0, ip, r2
   12274:	muleq	r0, r8, r2
   12278:	andeq	r2, r0, r4, lsr #5
   1227c:	andeq	r2, r0, r4, lsl #5
   12280:	muleq	r0, ip, lr
   12284:	muleq	r0, r4, r2
   12288:	strdeq	r2, [r0], -r8
   1228c:	ldrdeq	r2, [r0], -ip
   12290:	andeq	r2, r0, ip, lsl #1
   12294:	andeq	r1, r0, r4, asr #30
   12298:	andeq	r2, r0, ip, ror r1
   1229c:			; <UNDEFINED> instruction: 0x000021b0
   122a0:	muleq	r0, r4, r0
   122a4:	ldrdeq	r1, [r0], -r8
   122a8:	ldrdeq	r2, [r0], -r0
   122ac:	andeq	r2, r0, ip, ror #4
   122b0:	muleq	r0, r4, sp
   122b4:	andeq	r2, r0, ip, lsl #3
   122b8:	andeq	r2, r0, r0, ror #4
   122bc:	andeq	r1, r0, r4, asr #26
   122c0:	andeq	r2, r0, ip, lsr r1
   122c4:	andeq	r2, r0, r0, asr r2
   122c8:	andeq	r1, r0, ip, asr ip
   122cc:	andeq	r2, r0, r4, asr r0
   122d0:	andeq	r2, r0, r8, lsr #3
   122d4:	andeq	r1, r0, r0, lsl ip
   122d8:	andeq	r2, r0, r8
   122dc:	muleq	r0, r4, r1
   122e0:	andeq	r1, r0, r4, asr #23
   122e4:			; <UNDEFINED> instruction: 0x00001fbc
   122e8:	andeq	r2, r0, r0, lsl #3
   122ec:	ldrh	r3, [r4, #42]	; 0x2a
   122f0:	cmp	r3, #0
   122f4:	beq	12228 <verify_monster@@Base+0x46c>
   122f8:	ldrd	r2, [r3, r5]
   122fc:	cmp	r3, r9
   12300:	cmpeq	r2, r8
   12304:	bne	12228 <verify_monster@@Base+0x46c>
   12308:	cmp	r6, #45	; 0x2d
   1230c:	bhi	12334 <verify_monster@@Base+0x578>
   12310:	ldr	r3, [pc, #-80]	; 122c8 <verify_monster@@Base+0x50c>
   12314:	mov	r2, #152	; 0x98
   12318:	ldr	r1, [pc, #-84]	; 122cc <verify_monster@@Base+0x510>
   1231c:	ldr	r0, [pc, #-84]	; 122d0 <verify_monster@@Base+0x514>
   12320:	add	r3, pc, r3
   12324:	add	r3, r3, #28
   12328:	add	r1, pc, r1
   1232c:	add	r0, pc, r0
   12330:	bl	10db0 <__assert_fail@plt>
   12334:	ldrh	r3, [r4, #44]	; 0x2c
   12338:	cmp	r3, #0
   1233c:	beq	12310 <verify_monster@@Base+0x554>
   12340:	ldr	r2, [r5, r3]
   12344:	movw	r3, #42097	; 0xa471
   12348:	movt	r3, #36481	; 0x8e81
   1234c:	cmp	r2, r3
   12350:	bne	12310 <verify_monster@@Base+0x554>
   12354:	cmp	r6, #47	; 0x2f
   12358:	bhi	12380 <verify_monster@@Base+0x5c4>
   1235c:	ldr	r3, [pc, #-144]	; 122d4 <verify_monster@@Base+0x518>
   12360:	mov	r2, #153	; 0x99
   12364:	ldr	r1, [pc, #-148]	; 122d8 <verify_monster@@Base+0x51c>
   12368:	ldr	r0, [pc, #-148]	; 122dc <verify_monster@@Base+0x520>
   1236c:	add	r3, pc, r3
   12370:	add	r3, r3, #28
   12374:	add	r1, pc, r1
   12378:	add	r0, pc, r0
   1237c:	bl	10db0 <__assert_fail@plt>
   12380:	ldrh	r3, [r4, #46]	; 0x2e
   12384:	cmp	r3, #0
   12388:	beq	1235c <verify_monster@@Base+0x5a0>
   1238c:	ldr	r2, [r5, r3]
   12390:	movw	r3, #42097	; 0xa471
   12394:	movt	r3, #36481	; 0x8e81
   12398:	cmp	r2, r3
   1239c:	bne	1235c <verify_monster@@Base+0x5a0>
   123a0:	cmp	r6, #49	; 0x31
   123a4:	bhi	123cc <verify_monster@@Base+0x610>
   123a8:	ldr	r3, [pc, #-208]	; 122e0 <verify_monster@@Base+0x524>
   123ac:	mov	r2, #154	; 0x9a
   123b0:	ldr	r1, [pc, #-212]	; 122e4 <verify_monster@@Base+0x528>
   123b4:	ldr	r0, [pc, #-212]	; 122e8 <verify_monster@@Base+0x52c>
   123b8:	add	r3, pc, r3
   123bc:	add	r3, r3, #28
   123c0:	add	r1, pc, r1
   123c4:	add	r0, pc, r0
   123c8:	bl	10db0 <__assert_fail@plt>
   123cc:	ldrh	r3, [r4, #48]	; 0x30
   123d0:	cmp	r3, #0
   123d4:	beq	123a8 <verify_monster@@Base+0x5ec>
   123d8:	add	r9, pc, #504	; 0x1f8
   123dc:	ldrd	r8, [r9]
   123e0:	ldrd	r2, [r3, r5]
   123e4:	cmp	r3, r9
   123e8:	cmpeq	r2, r8
   123ec:	bne	123a8 <verify_monster@@Base+0x5ec>
   123f0:	cmp	r6, #51	; 0x33
   123f4:	bhi	1241c <verify_monster@@Base+0x660>
   123f8:	ldr	r3, [pc, #480]	; 125e0 <verify_monster@@Base+0x824>
   123fc:	mov	r2, #155	; 0x9b
   12400:	ldr	r1, [pc, #476]	; 125e4 <verify_monster@@Base+0x828>
   12404:	ldr	r0, [pc, #476]	; 125e8 <verify_monster@@Base+0x82c>
   12408:	add	r3, pc, r3
   1240c:	add	r3, r3, #28
   12410:	add	r1, pc, r1
   12414:	add	r0, pc, r0
   12418:	bl	10db0 <__assert_fail@plt>
   1241c:	ldrh	r1, [r4, #50]	; 0x32
   12420:	cmp	r1, #0
   12424:	beq	123f8 <verify_monster@@Base+0x63c>
   12428:	ldrd	r4, [r5, r1]
   1242c:	cmp	r5, r3
   12430:	cmpeq	r4, r2
   12434:	beq	11dfc <verify_monster@@Base+0x40>
   12438:	b	123f8 <verify_monster@@Base+0x63c>
   1243c:	ldr	r0, [pc, #424]	; 125ec <verify_monster@@Base+0x830>
   12440:	add	r0, pc, r0
   12444:	bl	10d20 <puts@plt>
   12448:	mvn	r0, #0
   1244c:	b	11dfc <verify_monster@@Base+0x40>
   12450:	ldr	r0, [pc, #408]	; 125f0 <verify_monster@@Base+0x834>
   12454:	add	r0, pc, r0
   12458:	bl	10d20 <puts@plt>
   1245c:	mvn	r0, #0
   12460:	b	11dfc <verify_monster@@Base+0x40>
   12464:	ldr	r0, [pc, #392]	; 125f4 <verify_monster@@Base+0x838>
   12468:	add	r0, pc, r0
   1246c:	bl	10d20 <puts@plt>
   12470:	mvn	r0, #0
   12474:	b	11dfc <verify_monster@@Base+0x40>
   12478:	ldr	r0, [pc, #376]	; 125f8 <verify_monster@@Base+0x83c>
   1247c:	add	r0, pc, r0
   12480:	bl	10d20 <puts@plt>
   12484:	mvn	r0, #0
   12488:	b	11dfc <verify_monster@@Base+0x40>
   1248c:	ldr	r0, [pc, #360]	; 125fc <verify_monster@@Base+0x840>
   12490:	add	r0, pc, r0
   12494:	bl	10d20 <puts@plt>
   12498:	mvn	r0, #0
   1249c:	b	11dfc <verify_monster@@Base+0x40>
   124a0:	ldr	r0, [pc, #344]	; 12600 <verify_monster@@Base+0x844>
   124a4:	add	r0, pc, r0
   124a8:	bl	10d20 <puts@plt>
   124ac:	mvn	r0, #0
   124b0:	b	11dfc <verify_monster@@Base+0x40>
   124b4:	ldr	r0, [pc, #328]	; 12604 <verify_monster@@Base+0x848>
   124b8:	add	r0, pc, r0
   124bc:	bl	10d20 <puts@plt>
   124c0:	mvn	r0, #0
   124c4:	b	11dfc <verify_monster@@Base+0x40>
   124c8:	ldr	r0, [pc, #312]	; 12608 <verify_monster@@Base+0x84c>
   124cc:	add	r0, pc, r0
   124d0:	bl	10d20 <puts@plt>
   124d4:	mvn	r0, #0
   124d8:	b	11dfc <verify_monster@@Base+0x40>
   124dc:	ldr	r0, [pc, #296]	; 1260c <verify_monster@@Base+0x850>
   124e0:	add	r0, pc, r0
   124e4:	bl	10d20 <puts@plt>
   124e8:	mvn	r0, #0
   124ec:	b	11dfc <verify_monster@@Base+0x40>
   124f0:	ldr	r0, [pc, #280]	; 12610 <verify_monster@@Base+0x854>
   124f4:	add	r0, pc, r0
   124f8:	bl	10d20 <puts@plt>
   124fc:	mvn	r0, #0
   12500:	b	11dfc <verify_monster@@Base+0x40>
   12504:	ldr	r0, [pc, #264]	; 12614 <verify_monster@@Base+0x858>
   12508:	add	r0, pc, r0
   1250c:	bl	10d20 <puts@plt>
   12510:	mvn	r0, #0
   12514:	b	11dfc <verify_monster@@Base+0x40>
   12518:	ldr	r0, [pc, #248]	; 12618 <verify_monster@@Base+0x85c>
   1251c:	add	r0, pc, r0
   12520:	bl	10d20 <puts@plt>
   12524:	mvn	r0, #0
   12528:	b	11dfc <verify_monster@@Base+0x40>
   1252c:	ldr	r0, [pc, #232]	; 1261c <verify_monster@@Base+0x860>
   12530:	add	r0, pc, r0
   12534:	bl	10d20 <puts@plt>
   12538:	mvn	r0, #0
   1253c:	b	11dfc <verify_monster@@Base+0x40>
   12540:	ldr	r0, [pc, #216]	; 12620 <verify_monster@@Base+0x864>
   12544:	add	r0, pc, r0
   12548:	bl	10d20 <puts@plt>
   1254c:	mvn	r0, #0
   12550:	b	11dfc <verify_monster@@Base+0x40>
   12554:	ldr	r0, [pc, #200]	; 12624 <verify_monster@@Base+0x868>
   12558:	add	r0, pc, r0
   1255c:	bl	10d20 <puts@plt>
   12560:	mvn	r0, #0
   12564:	b	11dfc <verify_monster@@Base+0x40>
   12568:	ldr	r0, [pc, #184]	; 12628 <verify_monster@@Base+0x86c>
   1256c:	add	r0, pc, r0
   12570:	bl	10d20 <puts@plt>
   12574:	mvn	r0, #0
   12578:	b	11dfc <verify_monster@@Base+0x40>
   1257c:	ldr	r0, [pc, #168]	; 1262c <verify_monster@@Base+0x870>
   12580:	add	r0, pc, r0
   12584:	bl	10d20 <puts@plt>
   12588:	mvn	r0, #0
   1258c:	b	11dfc <verify_monster@@Base+0x40>
   12590:	ldr	r0, [pc, #152]	; 12630 <verify_monster@@Base+0x874>
   12594:	add	r0, pc, r0
   12598:	bl	10d20 <puts@plt>
   1259c:	mvn	r0, #0
   125a0:	b	11dfc <verify_monster@@Base+0x40>
   125a4:	ldr	r3, [pc, #136]	; 12634 <verify_monster@@Base+0x878>
   125a8:	movw	r2, #699	; 0x2bb
   125ac:	ldr	r1, [pc, #132]	; 12638 <verify_monster@@Base+0x87c>
   125b0:	ldr	r0, [pc, #132]	; 1263c <verify_monster@@Base+0x880>
   125b4:	add	r3, pc, r3
   125b8:	add	r1, pc, r1
   125bc:	add	r0, pc, r0
   125c0:	bl	10db0 <__assert_fail@plt>
   125c4:	ldr	r0, [pc, #116]	; 12640 <verify_monster@@Base+0x884>
   125c8:	add	r0, pc, r0
   125cc:	bl	10d20 <puts@plt>
   125d0:	mvn	r0, #0
   125d4:	b	11dfc <verify_monster@@Base+0x40>
   125d8:			; <UNDEFINED> instruction: 0xc767ddf1
   125dc:	mvnsmi	r4, #220, 16	; 0xdc0000
   125e0:	andeq	r1, r0, r4, ror fp
   125e4:	andeq	r1, r0, ip, ror #30
   125e8:	andeq	r2, r0, r0, ror r1
   125ec:	andeq	r1, r0, ip, lsl #30
   125f0:	andeq	r1, r0, r8, lsl #26
   125f4:	ldrdeq	r1, [r0], -ip
   125f8:	andeq	r1, r0, r4, asr #26
   125fc:	andeq	r1, r0, r4, lsr ip
   12600:	andeq	r1, r0, r4, asr #24
   12604:	andeq	r1, r0, r4, ror #23
   12608:	andeq	r1, r0, r4, ror #24
   1260c:	andeq	r1, r0, ip, lsr #24
   12610:	muleq	r0, r4, sp
   12614:	andeq	r1, r0, r4, lsr #26
   12618:	andeq	r1, r0, r4, asr #27
   1261c:	andeq	r1, r0, r4, lsr lr
   12620:	andeq	r1, r0, r4, asr #22
   12624:	ldrdeq	r1, [r0], -ip
   12628:			; <UNDEFINED> instruction: 0x00001db0
   1262c:	ldrdeq	r1, [r0], -ip
   12630:	andeq	r1, r0, ip, lsr #26
   12634:	andeq	r1, r0, r8, asr #19
   12638:	strdeq	r1, [r0], -r0
   1263c:			; <UNDEFINED> instruction: 0x00001bb8
   12640:	andeq	r1, r0, r8, asr #24

00012644 <flatcc_verify_error_string@@Base>:
   12644:	cmp	r0, #36	; 0x24
   12648:	addls	pc, pc, r0, lsl #2
   1264c:	b	128a0 <flatcc_verify_error_string@@Base+0x25c>
   12650:	b	126e4 <flatcc_verify_error_string@@Base+0xa0>
   12654:	b	12894 <flatcc_verify_error_string@@Base+0x250>
   12658:	b	12888 <flatcc_verify_error_string@@Base+0x244>
   1265c:	b	1287c <flatcc_verify_error_string@@Base+0x238>
   12660:	b	12870 <flatcc_verify_error_string@@Base+0x22c>
   12664:	b	12864 <flatcc_verify_error_string@@Base+0x220>
   12668:	b	12858 <flatcc_verify_error_string@@Base+0x214>
   1266c:	b	1284c <flatcc_verify_error_string@@Base+0x208>
   12670:	b	12840 <flatcc_verify_error_string@@Base+0x1fc>
   12674:	b	12834 <flatcc_verify_error_string@@Base+0x1f0>
   12678:	b	12828 <flatcc_verify_error_string@@Base+0x1e4>
   1267c:	b	1281c <flatcc_verify_error_string@@Base+0x1d8>
   12680:	b	12810 <flatcc_verify_error_string@@Base+0x1cc>
   12684:	b	12804 <flatcc_verify_error_string@@Base+0x1c0>
   12688:	b	127f8 <flatcc_verify_error_string@@Base+0x1b4>
   1268c:	b	127ec <flatcc_verify_error_string@@Base+0x1a8>
   12690:	b	127e0 <flatcc_verify_error_string@@Base+0x19c>
   12694:	b	127d4 <flatcc_verify_error_string@@Base+0x190>
   12698:	b	127c8 <flatcc_verify_error_string@@Base+0x184>
   1269c:	b	127bc <flatcc_verify_error_string@@Base+0x178>
   126a0:	b	127b0 <flatcc_verify_error_string@@Base+0x16c>
   126a4:	b	127a4 <flatcc_verify_error_string@@Base+0x160>
   126a8:	b	12798 <flatcc_verify_error_string@@Base+0x154>
   126ac:	b	1278c <flatcc_verify_error_string@@Base+0x148>
   126b0:	b	12780 <flatcc_verify_error_string@@Base+0x13c>
   126b4:	b	12774 <flatcc_verify_error_string@@Base+0x130>
   126b8:	b	12768 <flatcc_verify_error_string@@Base+0x124>
   126bc:	b	1275c <flatcc_verify_error_string@@Base+0x118>
   126c0:	b	12750 <flatcc_verify_error_string@@Base+0x10c>
   126c4:	b	12744 <flatcc_verify_error_string@@Base+0x100>
   126c8:	b	12738 <flatcc_verify_error_string@@Base+0xf4>
   126cc:	b	1272c <flatcc_verify_error_string@@Base+0xe8>
   126d0:	b	12720 <flatcc_verify_error_string@@Base+0xdc>
   126d4:	b	12714 <flatcc_verify_error_string@@Base+0xd0>
   126d8:	b	12708 <flatcc_verify_error_string@@Base+0xc4>
   126dc:	b	126fc <flatcc_verify_error_string@@Base+0xb8>
   126e0:	b	126f0 <flatcc_verify_error_string@@Base+0xac>
   126e4:	ldr	r0, [pc, #448]	; 128ac <flatcc_verify_error_string@@Base+0x268>
   126e8:	add	r0, pc, r0
   126ec:	bx	lr
   126f0:	ldr	r0, [pc, #440]	; 128b0 <flatcc_verify_error_string@@Base+0x26c>
   126f4:	add	r0, pc, r0
   126f8:	bx	lr
   126fc:	ldr	r0, [pc, #432]	; 128b4 <flatcc_verify_error_string@@Base+0x270>
   12700:	add	r0, pc, r0
   12704:	bx	lr
   12708:	ldr	r0, [pc, #424]	; 128b8 <flatcc_verify_error_string@@Base+0x274>
   1270c:	add	r0, pc, r0
   12710:	bx	lr
   12714:	ldr	r0, [pc, #416]	; 128bc <flatcc_verify_error_string@@Base+0x278>
   12718:	add	r0, pc, r0
   1271c:	bx	lr
   12720:	ldr	r0, [pc, #408]	; 128c0 <flatcc_verify_error_string@@Base+0x27c>
   12724:	add	r0, pc, r0
   12728:	bx	lr
   1272c:	ldr	r0, [pc, #400]	; 128c4 <flatcc_verify_error_string@@Base+0x280>
   12730:	add	r0, pc, r0
   12734:	bx	lr
   12738:	ldr	r0, [pc, #392]	; 128c8 <flatcc_verify_error_string@@Base+0x284>
   1273c:	add	r0, pc, r0
   12740:	bx	lr
   12744:	ldr	r0, [pc, #384]	; 128cc <flatcc_verify_error_string@@Base+0x288>
   12748:	add	r0, pc, r0
   1274c:	bx	lr
   12750:	ldr	r0, [pc, #376]	; 128d0 <flatcc_verify_error_string@@Base+0x28c>
   12754:	add	r0, pc, r0
   12758:	bx	lr
   1275c:	ldr	r0, [pc, #368]	; 128d4 <flatcc_verify_error_string@@Base+0x290>
   12760:	add	r0, pc, r0
   12764:	bx	lr
   12768:	ldr	r0, [pc, #360]	; 128d8 <flatcc_verify_error_string@@Base+0x294>
   1276c:	add	r0, pc, r0
   12770:	bx	lr
   12774:	ldr	r0, [pc, #352]	; 128dc <flatcc_verify_error_string@@Base+0x298>
   12778:	add	r0, pc, r0
   1277c:	bx	lr
   12780:	ldr	r0, [pc, #344]	; 128e0 <flatcc_verify_error_string@@Base+0x29c>
   12784:	add	r0, pc, r0
   12788:	bx	lr
   1278c:	ldr	r0, [pc, #336]	; 128e4 <flatcc_verify_error_string@@Base+0x2a0>
   12790:	add	r0, pc, r0
   12794:	bx	lr
   12798:	ldr	r0, [pc, #328]	; 128e8 <flatcc_verify_error_string@@Base+0x2a4>
   1279c:	add	r0, pc, r0
   127a0:	bx	lr
   127a4:	ldr	r0, [pc, #320]	; 128ec <flatcc_verify_error_string@@Base+0x2a8>
   127a8:	add	r0, pc, r0
   127ac:	bx	lr
   127b0:	ldr	r0, [pc, #312]	; 128f0 <flatcc_verify_error_string@@Base+0x2ac>
   127b4:	add	r0, pc, r0
   127b8:	bx	lr
   127bc:	ldr	r0, [pc, #304]	; 128f4 <flatcc_verify_error_string@@Base+0x2b0>
   127c0:	add	r0, pc, r0
   127c4:	bx	lr
   127c8:	ldr	r0, [pc, #296]	; 128f8 <flatcc_verify_error_string@@Base+0x2b4>
   127cc:	add	r0, pc, r0
   127d0:	bx	lr
   127d4:	ldr	r0, [pc, #288]	; 128fc <flatcc_verify_error_string@@Base+0x2b8>
   127d8:	add	r0, pc, r0
   127dc:	bx	lr
   127e0:	ldr	r0, [pc, #280]	; 12900 <flatcc_verify_error_string@@Base+0x2bc>
   127e4:	add	r0, pc, r0
   127e8:	bx	lr
   127ec:	ldr	r0, [pc, #272]	; 12904 <flatcc_verify_error_string@@Base+0x2c0>
   127f0:	add	r0, pc, r0
   127f4:	bx	lr
   127f8:	ldr	r0, [pc, #264]	; 12908 <flatcc_verify_error_string@@Base+0x2c4>
   127fc:	add	r0, pc, r0
   12800:	bx	lr
   12804:	ldr	r0, [pc, #256]	; 1290c <flatcc_verify_error_string@@Base+0x2c8>
   12808:	add	r0, pc, r0
   1280c:	bx	lr
   12810:	ldr	r0, [pc, #248]	; 12910 <flatcc_verify_error_string@@Base+0x2cc>
   12814:	add	r0, pc, r0
   12818:	bx	lr
   1281c:	ldr	r0, [pc, #240]	; 12914 <flatcc_verify_error_string@@Base+0x2d0>
   12820:	add	r0, pc, r0
   12824:	bx	lr
   12828:	ldr	r0, [pc, #232]	; 12918 <flatcc_verify_error_string@@Base+0x2d4>
   1282c:	add	r0, pc, r0
   12830:	bx	lr
   12834:	ldr	r0, [pc, #224]	; 1291c <flatcc_verify_error_string@@Base+0x2d8>
   12838:	add	r0, pc, r0
   1283c:	bx	lr
   12840:	ldr	r0, [pc, #216]	; 12920 <flatcc_verify_error_string@@Base+0x2dc>
   12844:	add	r0, pc, r0
   12848:	bx	lr
   1284c:	ldr	r0, [pc, #208]	; 12924 <flatcc_verify_error_string@@Base+0x2e0>
   12850:	add	r0, pc, r0
   12854:	bx	lr
   12858:	ldr	r0, [pc, #200]	; 12928 <flatcc_verify_error_string@@Base+0x2e4>
   1285c:	add	r0, pc, r0
   12860:	bx	lr
   12864:	ldr	r0, [pc, #192]	; 1292c <flatcc_verify_error_string@@Base+0x2e8>
   12868:	add	r0, pc, r0
   1286c:	bx	lr
   12870:	ldr	r0, [pc, #184]	; 12930 <flatcc_verify_error_string@@Base+0x2ec>
   12874:	add	r0, pc, r0
   12878:	bx	lr
   1287c:	ldr	r0, [pc, #176]	; 12934 <flatcc_verify_error_string@@Base+0x2f0>
   12880:	add	r0, pc, r0
   12884:	bx	lr
   12888:	ldr	r0, [pc, #168]	; 12938 <flatcc_verify_error_string@@Base+0x2f4>
   1288c:	add	r0, pc, r0
   12890:	bx	lr
   12894:	ldr	r0, [pc, #160]	; 1293c <flatcc_verify_error_string@@Base+0x2f8>
   12898:	add	r0, pc, r0
   1289c:	bx	lr
   128a0:	ldr	r0, [pc, #152]	; 12940 <flatcc_verify_error_string@@Base+0x2fc>
   128a4:	add	r0, pc, r0
   128a8:	bx	lr
   128ac:	ldrdeq	r1, [r0], -r4
   128b0:	andeq	r2, r0, r8, lsr #8
   128b4:	strdeq	r2, [r0], -r4
   128b8:			; <UNDEFINED> instruction: 0x000023b4
   128bc:	andeq	r2, r0, r0, lsl #7
   128c0:	andeq	r2, r0, ip, asr #6
   128c4:	andeq	r2, r0, r8, lsr #6
   128c8:	strdeq	r2, [r0], -r4
   128cc:	andeq	r2, r0, r0, asr #5
   128d0:	muleq	r0, ip, r2
   128d4:	andeq	r2, r0, r4, ror r2
   128d8:	andeq	r2, r0, r4, asr r2
   128dc:	andeq	r2, r0, r8, lsl r2
   128e0:	andeq	r2, r0, r0, ror #3
   128e4:	andeq	r2, r0, r8, lsr #3
   128e8:	andeq	r2, r0, r8, ror #2
   128ec:	andeq	r2, r0, r0, lsr r1
   128f0:	andeq	r2, r0, ip, lsl #2
   128f4:	ldrdeq	r2, [r0], -r8
   128f8:	strheq	r2, [r0], -r8
   128fc:	andeq	r2, r0, r4, lsl #1
   12900:	andeq	r2, r0, r0, asr r0
   12904:	andeq	r2, r0, ip, lsl r0
   12908:	strdeq	r1, [r0], -r4
   1290c:	andeq	r1, r0, ip, asr #31
   12910:	andeq	r1, r0, r8, lsr #31
   12914:	andeq	r1, r0, r8, lsl #31
   12918:	andeq	r1, r0, r4, ror #30
   1291c:	andeq	r1, r0, r4, asr #30
   12920:	andeq	r1, r0, r4, lsr #30
   12924:	strdeq	r1, [r0], -ip
   12928:	ldrdeq	r1, [r0], -r0
   1292c:	andeq	r1, r0, r0, lsr #29
   12930:	andeq	r1, r0, ip, ror lr
   12934:	andeq	r1, r0, r4, asr lr
   12938:	andeq	r1, r0, r4, lsr lr
   1293c:	muleq	r0, r4, r2
   12940:	andeq	r1, r0, r0, lsl lr

00012944 <flatcc_verify_field@@Base>:
   12944:	ldrh	ip, [r0, #22]
   12948:	add	r1, r1, #2
   1294c:	lsl	r1, r1, #1
   12950:	uxth	r1, r1
   12954:	cmp	ip, r1
   12958:	bls	129a0 <flatcc_verify_field@@Base+0x5c>
   1295c:	ldr	ip, [r0, #12]
   12960:	ldrh	r1, [ip, r1]
   12964:	cmp	r1, #0
   12968:	beq	129a0 <flatcc_verify_field@@Base+0x5c>
   1296c:	ldrh	ip, [r0, #20]
   12970:	add	r2, r2, r1
   12974:	cmp	r2, ip
   12978:	bhi	129a8 <flatcc_verify_field@@Base+0x64>
   1297c:	ldr	r2, [r0]
   12980:	sub	r3, r3, #1
   12984:	ldr	r0, [r0, #16]
   12988:	add	r2, r2, r0
   1298c:	add	r1, r2, r1
   12990:	tst	r1, r3
   12994:	moveq	r0, #0
   12998:	movne	r0, #12
   1299c:	bx	lr
   129a0:	mov	r0, #0
   129a4:	bx	lr
   129a8:	mov	r0, #13
   129ac:	bx	lr

000129b0 <flatcc_verify_string_field@@Base>:
   129b0:	ldrh	r3, [r0, #22]
   129b4:	add	r1, r1, #2
   129b8:	lsl	r1, r1, #1
   129bc:	uxth	r1, r1
   129c0:	cmp	r3, r1
   129c4:	bls	12a60 <flatcc_verify_string_field@@Base+0xb0>
   129c8:	ldr	r3, [r0, #12]
   129cc:	ldrh	r3, [r3, r1]
   129d0:	cmp	r3, #0
   129d4:	beq	12a60 <flatcc_verify_string_field@@Base+0xb0>
   129d8:	ldrh	r2, [r0, #20]
   129dc:	add	r1, r3, #4
   129e0:	cmp	r1, r2
   129e4:	bhi	12a70 <flatcc_verify_string_field@@Base+0xc0>
   129e8:	ldr	r2, [r0, #16]
   129ec:	add	r3, r3, r2
   129f0:	tst	r3, #3
   129f4:	bne	12a78 <flatcc_verify_string_field@@Base+0xc8>
   129f8:	cmp	r3, #0
   129fc:	beq	12a88 <flatcc_verify_string_field@@Base+0xd8>
   12a00:	ldr	r1, [r0]
   12a04:	ldr	r2, [r1, r3]
   12a08:	add	r2, r3, r2
   12a0c:	cmp	r3, r2
   12a10:	bcs	12a58 <flatcc_verify_string_field@@Base+0xa8>
   12a14:	ldr	r3, [r0, #4]
   12a18:	add	r0, r2, #4
   12a1c:	cmp	r3, r0
   12a20:	bcc	12a58 <flatcc_verify_string_field@@Base+0xa8>
   12a24:	tst	r2, #3
   12a28:	bne	12a58 <flatcc_verify_string_field@@Base+0xa8>
   12a2c:	ldr	r2, [r1, r2]
   12a30:	sub	r3, r3, r0
   12a34:	add	ip, r2, #1
   12a38:	cmp	r3, ip
   12a3c:	bcc	12a80 <flatcc_verify_string_field@@Base+0xd0>
   12a40:	add	r1, r1, r0
   12a44:	ldrb	r3, [r1, r2]
   12a48:	cmp	r3, #0
   12a4c:	moveq	r0, #0
   12a50:	movne	r0, #7
   12a54:	bx	lr
   12a58:	mov	r0, #17
   12a5c:	bx	lr
   12a60:	cmp	r2, #0
   12a64:	moveq	r0, #0
   12a68:	movne	r0, #4
   12a6c:	bx	lr
   12a70:	mov	r0, #13
   12a74:	bx	lr
   12a78:	mov	r0, #12
   12a7c:	bx	lr
   12a80:	mov	r0, #8
   12a84:	bx	lr
   12a88:	mov	r0, r3
   12a8c:	bx	lr

00012a90 <flatcc_verify_vector_field@@Base>:
   12a90:	ldrh	ip, [r0, #22]
   12a94:	add	r1, r1, #2
   12a98:	lsl	r1, r1, #1
   12a9c:	str	r4, [sp, #-8]!
   12aa0:	str	lr, [sp, #4]
   12aa4:	uxth	r1, r1
   12aa8:	ldrh	lr, [sp, #8]
   12aac:	cmp	ip, r1
   12ab0:	bls	12b74 <flatcc_verify_vector_field@@Base+0xe4>
   12ab4:	ldr	ip, [r0, #12]
   12ab8:	ldrh	r1, [ip, r1]
   12abc:	cmp	r1, #0
   12ac0:	beq	12b74 <flatcc_verify_vector_field@@Base+0xe4>
   12ac4:	ldrh	r2, [r0, #20]
   12ac8:	add	ip, r1, #4
   12acc:	cmp	ip, r2
   12ad0:	movhi	r0, #13
   12ad4:	bhi	12b58 <flatcc_verify_vector_field@@Base+0xc8>
   12ad8:	ldr	r2, [r0, #16]
   12adc:	add	r2, r1, r2
   12ae0:	tst	r2, #3
   12ae4:	movne	r0, #12
   12ae8:	bne	12b58 <flatcc_verify_vector_field@@Base+0xc8>
   12aec:	cmp	r2, #0
   12af0:	beq	12b8c <flatcc_verify_vector_field@@Base+0xfc>
   12af4:	ldr	r4, [r0]
   12af8:	ldr	ip, [r4, r2]
   12afc:	add	ip, r2, ip
   12b00:	cmp	r2, ip
   12b04:	bcs	12b64 <flatcc_verify_vector_field@@Base+0xd4>
   12b08:	ldr	r1, [r0, #4]
   12b0c:	add	r0, ip, #4
   12b10:	cmp	r1, r0
   12b14:	bcc	12b64 <flatcc_verify_vector_field@@Base+0xd4>
   12b18:	cmp	lr, #4
   12b1c:	movcc	lr, #4
   12b20:	sub	lr, lr, #1
   12b24:	orr	lr, lr, #3
   12b28:	tst	lr, r0
   12b2c:	bne	12b64 <flatcc_verify_vector_field@@Base+0xd4>
   12b30:	ldr	r2, [r4, ip]
   12b34:	ldr	ip, [sp, #12]
   12b38:	cmp	ip, r2
   12b3c:	movcc	r0, #25
   12b40:	bcc	12b58 <flatcc_verify_vector_field@@Base+0xc8>
   12b44:	mul	r2, r2, r3
   12b48:	sub	r0, r1, r0
   12b4c:	cmp	r0, r2
   12b50:	movcc	r0, #26
   12b54:	movcs	r0, #0
   12b58:	ldr	r4, [sp]
   12b5c:	add	sp, sp, #4
   12b60:	pop	{pc}		; (ldr pc, [sp], #4)
   12b64:	ldr	r4, [sp]
   12b68:	add	sp, sp, #4
   12b6c:	mov	r0, #16
   12b70:	pop	{pc}		; (ldr pc, [sp], #4)
   12b74:	cmp	r2, #0
   12b78:	ldr	r4, [sp]
   12b7c:	add	sp, sp, #4
   12b80:	moveq	r0, #0
   12b84:	movne	r0, #4
   12b88:	pop	{pc}		; (ldr pc, [sp], #4)
   12b8c:	mov	r0, r2
   12b90:	b	12b58 <flatcc_verify_vector_field@@Base+0xc8>

00012b94 <flatcc_verify_string_vector_field@@Base>:
   12b94:	ldrh	r3, [r0, #22]
   12b98:	add	r1, r1, #2
   12b9c:	lsl	r1, r1, #1
   12ba0:	uxth	r1, r1
   12ba4:	cmp	r3, r1
   12ba8:	bls	12d04 <flatcc_verify_string_vector_field@@Base+0x170>
   12bac:	ldr	r3, [r0, #12]
   12bb0:	ldrh	r3, [r3, r1]
   12bb4:	cmp	r3, #0
   12bb8:	beq	12d04 <flatcc_verify_string_vector_field@@Base+0x170>
   12bbc:	ldrh	r2, [r0, #20]
   12bc0:	add	r1, r3, #4
   12bc4:	cmp	r1, r2
   12bc8:	bhi	12d14 <flatcc_verify_string_vector_field@@Base+0x180>
   12bcc:	ldr	r2, [r0, #16]
   12bd0:	add	r3, r3, r2
   12bd4:	tst	r3, #3
   12bd8:	bne	12d1c <flatcc_verify_string_vector_field@@Base+0x188>
   12bdc:	cmp	r3, #0
   12be0:	beq	12d54 <flatcc_verify_string_vector_field@@Base+0x1c0>
   12be4:	ldr	r1, [r0]
   12be8:	ldr	r2, [r1, r3]
   12bec:	add	r2, r3, r2
   12bf0:	cmp	r3, r2
   12bf4:	bcs	12cfc <flatcc_verify_string_vector_field@@Base+0x168>
   12bf8:	ldr	ip, [r0, #4]
   12bfc:	add	r0, r2, #4
   12c00:	cmp	ip, r0
   12c04:	bcc	12cfc <flatcc_verify_string_vector_field@@Base+0x168>
   12c08:	tst	r0, #3
   12c0c:	bne	12cfc <flatcc_verify_string_vector_field@@Base+0x168>
   12c10:	ldr	r3, [r1, r2]
   12c14:	strd	r4, [sp, #-16]!
   12c18:	str	r6, [sp, #8]
   12c1c:	str	lr, [sp, #12]
   12c20:	cmn	r3, #-1073741823	; 0xc0000001
   12c24:	bhi	12d24 <flatcc_verify_string_vector_field@@Base+0x190>
   12c28:	lsl	lr, r3, #2
   12c2c:	sub	r4, ip, r0
   12c30:	cmp	r4, lr
   12c34:	bcc	12d24 <flatcc_verify_string_vector_field@@Base+0x190>
   12c38:	cmp	r3, #0
   12c3c:	beq	12d70 <flatcc_verify_string_vector_field@@Base+0x1dc>
   12c40:	ldr	r2, [r1, r0]
   12c44:	add	r2, r0, r2
   12c48:	cmp	r0, r2
   12c4c:	bcs	12d68 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12c50:	add	r4, r2, #4
   12c54:	cmp	ip, r4
   12c58:	bcc	12d68 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12c5c:	tst	r2, #3
   12c60:	bne	12d68 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12c64:	ldr	r3, [r1, r2]
   12c68:	sub	r5, ip, r4
   12c6c:	add	r6, r3, #1
   12c70:	cmp	r6, r5
   12c74:	addls	lr, r0, lr
   12c78:	bhi	12cd0 <flatcc_verify_string_vector_field@@Base+0x13c>
   12c7c:	add	r3, r1, r3
   12c80:	add	r0, r0, #4
   12c84:	ldrb	r3, [r3, r4]
   12c88:	cmp	r3, #0
   12c8c:	bne	12d5c <flatcc_verify_string_vector_field@@Base+0x1c8>
   12c90:	cmp	r0, lr
   12c94:	beq	12d70 <flatcc_verify_string_vector_field@@Base+0x1dc>
   12c98:	ldr	r2, [r1, r0]
   12c9c:	add	r2, r0, r2
   12ca0:	cmp	r2, r0
   12ca4:	add	r4, r2, #4
   12ca8:	bls	12d68 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12cac:	cmp	ip, r4
   12cb0:	bcc	12d68 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12cb4:	tst	r2, #3
   12cb8:	sub	r5, ip, r4
   12cbc:	bne	12d68 <flatcc_verify_string_vector_field@@Base+0x1d4>
   12cc0:	ldr	r3, [r1, r2]
   12cc4:	add	r6, r3, #1
   12cc8:	cmp	r5, r6
   12ccc:	bcs	12c7c <flatcc_verify_string_vector_field@@Base+0xe8>
   12cd0:	ldr	r3, [r1, r2]
   12cd4:	add	r2, r3, #1
   12cd8:	cmp	r5, r2
   12cdc:	movcc	r0, #8
   12ce0:	bcc	12d44 <flatcc_verify_string_vector_field@@Base+0x1b0>
   12ce4:	add	r3, r1, r3
   12ce8:	ldrb	r3, [r3, r4]
   12cec:	cmp	r3, #0
   12cf0:	moveq	r0, #0
   12cf4:	movne	r0, #7
   12cf8:	b	12d44 <flatcc_verify_string_vector_field@@Base+0x1b0>
   12cfc:	mov	r0, #16
   12d00:	bx	lr
   12d04:	cmp	r2, #0
   12d08:	movne	r0, #4
   12d0c:	moveq	r0, #0
   12d10:	bx	lr
   12d14:	mov	r0, #13
   12d18:	bx	lr
   12d1c:	mov	r0, #12
   12d20:	bx	lr
   12d24:	ldr	r3, [r1, r2]
   12d28:	cmn	r3, #-1073741823	; 0xc0000001
   12d2c:	movhi	r0, #25
   12d30:	bhi	12d44 <flatcc_verify_string_vector_field@@Base+0x1b0>
   12d34:	sub	r0, ip, r0
   12d38:	cmp	r0, r3, lsl #2
   12d3c:	movcs	r0, #0
   12d40:	movcc	r0, #26
   12d44:	ldrd	r4, [sp]
   12d48:	ldr	r6, [sp, #8]
   12d4c:	add	sp, sp, #12
   12d50:	pop	{pc}		; (ldr pc, [sp], #4)
   12d54:	mov	r0, r3
   12d58:	bx	lr
   12d5c:	cmp	ip, r4
   12d60:	subcs	r5, ip, r4
   12d64:	bcs	12cd0 <flatcc_verify_string_vector_field@@Base+0x13c>
   12d68:	mov	r0, #17
   12d6c:	b	12d44 <flatcc_verify_string_vector_field@@Base+0x1b0>
   12d70:	mov	r0, r3
   12d74:	b	12d44 <flatcc_verify_string_vector_field@@Base+0x1b0>

00012d78 <flatcc_verify_table_field@@Base>:
   12d78:	ldrh	ip, [r0, #22]
   12d7c:	add	r1, r1, #2
   12d80:	lsl	r1, r1, #1
   12d84:	uxth	r1, r1
   12d88:	cmp	ip, r1
   12d8c:	bls	12eac <flatcc_verify_table_field@@Base+0x134>
   12d90:	ldr	ip, [r0, #12]
   12d94:	ldrh	r1, [ip, r1]
   12d98:	cmp	r1, #0
   12d9c:	beq	12eac <flatcc_verify_table_field@@Base+0x134>
   12da0:	ldrh	r2, [r0, #20]
   12da4:	add	ip, r1, #4
   12da8:	cmp	ip, r2
   12dac:	bhi	12ebc <flatcc_verify_table_field@@Base+0x144>
   12db0:	ldr	r2, [r0, #16]
   12db4:	add	r1, r1, r2
   12db8:	tst	r1, #3
   12dbc:	bne	12ec4 <flatcc_verify_table_field@@Base+0x14c>
   12dc0:	cmp	r1, #0
   12dc4:	beq	12ecc <flatcc_verify_table_field@@Base+0x154>
   12dc8:	ldr	ip, [r0]
   12dcc:	strd	r4, [sp, #-12]!
   12dd0:	ldr	r2, [r0, #8]
   12dd4:	str	lr, [sp, #8]
   12dd8:	sub	sp, sp, #28
   12ddc:	ldr	lr, [r0, #4]
   12de0:	ldr	r0, [ip, r1]
   12de4:	sub	r2, r2, #1
   12de8:	cmp	r2, #0
   12dec:	moveq	r0, #3
   12df0:	str	r2, [sp, #8]
   12df4:	beq	12e9c <flatcc_verify_table_field@@Base+0x124>
   12df8:	add	r2, r1, r0
   12dfc:	cmp	r1, r2
   12e00:	bcs	12e98 <flatcc_verify_table_field@@Base+0x120>
   12e04:	add	r1, r2, #4
   12e08:	cmp	lr, r1
   12e0c:	bcc	12e98 <flatcc_verify_table_field@@Base+0x120>
   12e10:	tst	r2, #3
   12e14:	bne	12e98 <flatcc_verify_table_field@@Base+0x120>
   12e18:	str	r2, [sp, #16]
   12e1c:	ldr	r1, [ip, r2]
   12e20:	subs	r1, r2, r1
   12e24:	bmi	12ed4 <flatcc_verify_table_field@@Base+0x15c>
   12e28:	tst	r1, #1
   12e2c:	bne	12ed4 <flatcc_verify_table_field@@Base+0x15c>
   12e30:	add	r4, r1, #2
   12e34:	cmp	lr, r4
   12e38:	movcc	r0, #27
   12e3c:	bcc	12e9c <flatcc_verify_table_field@@Base+0x124>
   12e40:	ldrh	r0, [ip, r1]
   12e44:	add	r5, ip, r1
   12e48:	add	r1, r0, r1
   12e4c:	strh	r0, [sp, #22]
   12e50:	cmp	lr, r1
   12e54:	bcc	12edc <flatcc_verify_table_field@@Base+0x164>
   12e58:	tst	r0, #1
   12e5c:	bne	12edc <flatcc_verify_table_field@@Base+0x164>
   12e60:	cmp	r0, #3
   12e64:	movls	r0, #28
   12e68:	bls	12e9c <flatcc_verify_table_field@@Base+0x124>
   12e6c:	ldrh	r1, [ip, r4]
   12e70:	sub	r2, lr, r2
   12e74:	cmp	r2, r1
   12e78:	strh	r1, [sp, #20]
   12e7c:	movcc	r0, #20
   12e80:	bcc	12e9c <flatcc_verify_table_field@@Base+0x124>
   12e84:	mov	r0, sp
   12e88:	stm	sp, {ip, lr}
   12e8c:	str	r5, [sp, #12]
   12e90:	blx	r3
   12e94:	b	12e9c <flatcc_verify_table_field@@Base+0x124>
   12e98:	mov	r0, #15
   12e9c:	add	sp, sp, #28
   12ea0:	ldrd	r4, [sp]
   12ea4:	add	sp, sp, #8
   12ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   12eac:	cmp	r2, #0
   12eb0:	moveq	r0, #0
   12eb4:	movne	r0, #4
   12eb8:	bx	lr
   12ebc:	mov	r0, #13
   12ec0:	bx	lr
   12ec4:	mov	r0, #12
   12ec8:	bx	lr
   12ecc:	mov	r0, r1
   12ed0:	bx	lr
   12ed4:	mov	r0, #29
   12ed8:	b	12e9c <flatcc_verify_table_field@@Base+0x124>
   12edc:	mov	r0, #30
   12ee0:	b	12e9c <flatcc_verify_table_field@@Base+0x124>

00012ee4 <flatcc_verify_table_vector_field@@Base>:
   12ee4:	ldrh	ip, [r0, #22]
   12ee8:	add	r1, r1, #2
   12eec:	lsl	r1, r1, #1
   12ef0:	uxth	r1, r1
   12ef4:	cmp	ip, r1
   12ef8:	bls	13180 <flatcc_verify_table_vector_field@@Base+0x29c>
   12efc:	ldr	ip, [r0, #12]
   12f00:	ldrh	r1, [ip, r1]
   12f04:	cmp	r1, #0
   12f08:	beq	13180 <flatcc_verify_table_vector_field@@Base+0x29c>
   12f0c:	ldrh	r2, [r0, #20]
   12f10:	add	ip, r1, #4
   12f14:	cmp	ip, r2
   12f18:	bhi	13190 <flatcc_verify_table_vector_field@@Base+0x2ac>
   12f1c:	ldr	r2, [r0, #16]
   12f20:	add	r1, r1, r2
   12f24:	tst	r1, #3
   12f28:	bne	131a8 <flatcc_verify_table_vector_field@@Base+0x2c4>
   12f2c:	cmp	r1, #0
   12f30:	beq	13188 <flatcc_verify_table_vector_field@@Base+0x2a4>
   12f34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12f38:	strd	r6, [sp, #8]
   12f3c:	ldr	r7, [r0, #8]
   12f40:	strd	r8, [sp, #16]
   12f44:	ldr	r8, [r0]
   12f48:	strd	sl, [sp, #24]
   12f4c:	str	lr, [sp, #32]
   12f50:	sub	sp, sp, #36	; 0x24
   12f54:	cmp	r7, #0
   12f58:	ldr	ip, [r8, r1]
   12f5c:	ble	131a0 <flatcc_verify_table_vector_field@@Base+0x2bc>
   12f60:	add	ip, r1, ip
   12f64:	cmp	r1, ip
   12f68:	bcs	13160 <flatcc_verify_table_vector_field@@Base+0x27c>
   12f6c:	ldr	r9, [r0, #4]
   12f70:	add	r5, ip, #4
   12f74:	cmp	r9, r5
   12f78:	bcc	13160 <flatcc_verify_table_vector_field@@Base+0x27c>
   12f7c:	tst	r5, #3
   12f80:	bne	13160 <flatcc_verify_table_vector_field@@Base+0x27c>
   12f84:	ldr	r1, [r8, ip]
   12f88:	cmn	r1, #-1073741823	; 0xc0000001
   12f8c:	bhi	131b0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   12f90:	lsl	r2, r1, #2
   12f94:	sub	r0, r9, r5
   12f98:	cmp	r0, r2
   12f9c:	bcc	131b0 <flatcc_verify_table_vector_field@@Base+0x2cc>
   12fa0:	cmp	r1, #0
   12fa4:	beq	131d0 <flatcc_verify_table_vector_field@@Base+0x2ec>
   12fa8:	sub	r7, r7, #2
   12fac:	add	sl, r8, r5
   12fb0:	ldr	r1, [r8, r5]
   12fb4:	cmp	r7, #0
   12fb8:	str	r7, [sp, #16]
   12fbc:	beq	131a0 <flatcc_verify_table_vector_field@@Base+0x2bc>
   12fc0:	mov	r6, r3
   12fc4:	add	r3, r5, r1
   12fc8:	cmp	r5, r3
   12fcc:	bcs	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   12fd0:	add	r1, r3, #4
   12fd4:	cmp	r9, r1
   12fd8:	bcc	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   12fdc:	tst	r3, #3
   12fe0:	bne	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   12fe4:	movw	fp, #65532	; 0xfffc
   12fe8:	movt	fp, #65535	; 0xffff
   12fec:	sub	fp, fp, ip
   12ff0:	add	r1, sp, #8
   12ff4:	add	fp, sl, fp
   12ff8:	add	ip, ip, #8
   12ffc:	add	r2, r5, r2
   13000:	add	r4, r8, ip
   13004:	str	r1, [sp, #4]
   13008:	mov	r1, fp
   1300c:	mov	fp, r2
   13010:	add	sl, r1, r5
   13014:	str	r1, [sp]
   13018:	str	r3, [sp, #24]
   1301c:	ldr	r2, [r8, r3]
   13020:	subs	r2, r3, r2
   13024:	bmi	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   13028:	tst	r2, #1
   1302c:	bne	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   13030:	add	lr, r2, #2
   13034:	cmp	r9, lr
   13038:	bcc	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   1303c:	ldrh	r0, [r8, r2]
   13040:	add	ip, r8, r2
   13044:	add	r2, r0, r2
   13048:	strh	r0, [sp, #30]
   1304c:	cmp	r9, r2
   13050:	bcc	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   13054:	tst	r0, #1
   13058:	bne	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   1305c:	cmp	r0, #3
   13060:	bls	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   13064:	ldrh	r2, [r8, lr]
   13068:	sub	r3, r9, r3
   1306c:	cmp	r3, r2
   13070:	strh	r2, [sp, #28]
   13074:	bcc	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   13078:	ldr	r0, [sp, #4]
   1307c:	strd	r8, [sp, #8]
   13080:	str	ip, [sp, #20]
   13084:	blx	r6
   13088:	cmp	r0, #0
   1308c:	ldr	r1, [sp]
   13090:	bne	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   13094:	add	r5, r5, #4
   13098:	cmp	r5, fp
   1309c:	beq	131d0 <flatcc_verify_table_vector_field@@Base+0x2ec>
   130a0:	mov	sl, r4
   130a4:	ldr	r3, [r4], #4
   130a8:	str	r7, [sp, #16]
   130ac:	add	r3, r3, r5
   130b0:	cmp	r5, r3
   130b4:	bcc	131d8 <flatcc_verify_table_vector_field@@Base+0x2f4>
   130b8:	ldr	r3, [sl]
   130bc:	str	r7, [sp, #16]
   130c0:	add	r3, r5, r3
   130c4:	cmp	r3, r5
   130c8:	bls	131f0 <flatcc_verify_table_vector_field@@Base+0x30c>
   130cc:	add	r2, r3, #4
   130d0:	cmp	r9, r2
   130d4:	bcc	131f0 <flatcc_verify_table_vector_field@@Base+0x30c>
   130d8:	tst	r3, #3
   130dc:	bne	131f0 <flatcc_verify_table_vector_field@@Base+0x30c>
   130e0:	str	r3, [sp, #24]
   130e4:	ldr	r2, [r8, r3]
   130e8:	subs	r2, r3, r2
   130ec:	bmi	131f8 <flatcc_verify_table_vector_field@@Base+0x314>
   130f0:	tst	r2, #1
   130f4:	bne	131f8 <flatcc_verify_table_vector_field@@Base+0x314>
   130f8:	add	r0, r2, #2
   130fc:	cmp	r9, r0
   13100:	movcc	r0, #27
   13104:	bcc	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   13108:	ldrh	r1, [r8, r2]
   1310c:	add	ip, r8, r2
   13110:	add	r2, r1, r2
   13114:	strh	r1, [sp, #30]
   13118:	cmp	r9, r2
   1311c:	bcc	13200 <flatcc_verify_table_vector_field@@Base+0x31c>
   13120:	tst	r1, #1
   13124:	bne	13200 <flatcc_verify_table_vector_field@@Base+0x31c>
   13128:	cmp	r1, #3
   1312c:	movls	r0, #28
   13130:	bls	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   13134:	ldrh	r2, [r8, r0]
   13138:	sub	r3, r9, r3
   1313c:	cmp	r3, r2
   13140:	strh	r2, [sp, #28]
   13144:	movcc	r0, #20
   13148:	bcc	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   1314c:	add	r0, sp, #8
   13150:	strd	r8, [sp, #8]
   13154:	str	ip, [sp, #20]
   13158:	blx	r6
   1315c:	b	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   13160:	mov	r0, #16
   13164:	add	sp, sp, #36	; 0x24
   13168:	ldrd	r4, [sp]
   1316c:	ldrd	r6, [sp, #8]
   13170:	ldrd	r8, [sp, #16]
   13174:	ldrd	sl, [sp, #24]
   13178:	add	sp, sp, #32
   1317c:	pop	{pc}		; (ldr pc, [sp], #4)
   13180:	cmp	r2, #0
   13184:	bne	13198 <flatcc_verify_table_vector_field@@Base+0x2b4>
   13188:	mov	r0, #0
   1318c:	bx	lr
   13190:	mov	r0, #13
   13194:	bx	lr
   13198:	mov	r0, #4
   1319c:	bx	lr
   131a0:	mov	r0, #3
   131a4:	b	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   131a8:	mov	r0, #12
   131ac:	bx	lr
   131b0:	ldr	r3, [r8, ip]
   131b4:	cmn	r3, #-1073741823	; 0xc0000001
   131b8:	movhi	r0, #25
   131bc:	bhi	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   131c0:	sub	r5, r9, r5
   131c4:	cmp	r5, r3, lsl #2
   131c8:	movcc	r0, #26
   131cc:	bcc	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   131d0:	mov	r0, #0
   131d4:	b	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   131d8:	add	r2, r3, #4
   131dc:	cmp	r9, r2
   131e0:	bcc	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   131e4:	tst	r3, #3
   131e8:	beq	13010 <flatcc_verify_table_vector_field@@Base+0x12c>
   131ec:	b	130b8 <flatcc_verify_table_vector_field@@Base+0x1d4>
   131f0:	mov	r0, #15
   131f4:	b	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   131f8:	mov	r0, #29
   131fc:	b	13164 <flatcc_verify_table_vector_field@@Base+0x280>
   13200:	mov	r0, #30
   13204:	b	13164 <flatcc_verify_table_vector_field@@Base+0x280>

00013208 <flatcc_verify_union_table@@Base>:
   13208:	strd	r4, [sp, #-12]!
   1320c:	ldr	r3, [r0, #8]
   13210:	ldr	ip, [r0, #4]
   13214:	ldr	r2, [r0, #16]
   13218:	sub	r3, r3, #1
   1321c:	str	lr, [sp, #8]
   13220:	sub	sp, sp, #28
   13224:	cmp	r3, #0
   13228:	ldr	lr, [r0]
   1322c:	str	r3, [sp, #8]
   13230:	ldr	r3, [r0, #20]
   13234:	moveq	r0, #3
   13238:	beq	1324c <flatcc_verify_union_table@@Base+0x44>
   1323c:	add	r3, r2, r3
   13240:	cmp	r2, r3
   13244:	bcc	1325c <flatcc_verify_union_table@@Base+0x54>
   13248:	mov	r0, #15
   1324c:	add	sp, sp, #28
   13250:	ldrd	r4, [sp]
   13254:	add	sp, sp, #8
   13258:	pop	{pc}		; (ldr pc, [sp], #4)
   1325c:	add	r2, r3, #4
   13260:	cmp	ip, r2
   13264:	bcc	13248 <flatcc_verify_union_table@@Base+0x40>
   13268:	tst	r3, #3
   1326c:	bne	13248 <flatcc_verify_union_table@@Base+0x40>
   13270:	str	r3, [sp, #16]
   13274:	ldr	r2, [lr, r3]
   13278:	subs	r2, r3, r2
   1327c:	bmi	132fc <flatcc_verify_union_table@@Base+0xf4>
   13280:	tst	r2, #1
   13284:	bne	132fc <flatcc_verify_union_table@@Base+0xf4>
   13288:	add	r4, r2, #2
   1328c:	cmp	ip, r4
   13290:	movcc	r0, #27
   13294:	bcc	1324c <flatcc_verify_union_table@@Base+0x44>
   13298:	ldrh	r0, [lr, r2]
   1329c:	add	r5, lr, r2
   132a0:	add	r2, r0, r2
   132a4:	strh	r0, [sp, #22]
   132a8:	cmp	ip, r2
   132ac:	bcc	132f4 <flatcc_verify_union_table@@Base+0xec>
   132b0:	tst	r0, #1
   132b4:	bne	132f4 <flatcc_verify_union_table@@Base+0xec>
   132b8:	cmp	r0, #3
   132bc:	movls	r0, #28
   132c0:	bls	1324c <flatcc_verify_union_table@@Base+0x44>
   132c4:	ldrh	r2, [lr, r4]
   132c8:	sub	r3, ip, r3
   132cc:	cmp	r3, r2
   132d0:	strh	r2, [sp, #20]
   132d4:	movcc	r0, #20
   132d8:	bcc	1324c <flatcc_verify_union_table@@Base+0x44>
   132dc:	mov	r0, sp
   132e0:	str	lr, [sp]
   132e4:	str	ip, [sp, #4]
   132e8:	str	r5, [sp, #12]
   132ec:	blx	r1
   132f0:	b	1324c <flatcc_verify_union_table@@Base+0x44>
   132f4:	mov	r0, #30
   132f8:	b	1324c <flatcc_verify_union_table@@Base+0x44>
   132fc:	mov	r0, #29
   13300:	b	1324c <flatcc_verify_union_table@@Base+0x44>

00013304 <flatcc_verify_union_struct@@Base>:
   13304:	push	{lr}		; (str lr, [sp, #-4]!)
   13308:	ldr	ip, [r0, #20]
   1330c:	ldr	lr, [r0, #4]
   13310:	ldr	r3, [r0, #16]
   13314:	cmp	ip, #0
   13318:	beq	1334c <flatcc_verify_union_struct@@Base+0x48>
   1331c:	add	r3, r3, ip
   13320:	cmp	lr, r3
   13324:	bcc	1334c <flatcc_verify_union_struct@@Base+0x48>
   13328:	adds	r1, r1, r3
   1332c:	bcs	1335c <flatcc_verify_union_struct@@Base+0x58>
   13330:	cmp	lr, r1
   13334:	bcc	13354 <flatcc_verify_union_struct@@Base+0x50>
   13338:	sub	r2, r2, #1
   1333c:	tst	r2, r3
   13340:	moveq	r0, #0
   13344:	movne	r0, #11
   13348:	pop	{pc}		; (ldr pc, [sp], #4)
   1334c:	mov	r0, #18
   13350:	pop	{pc}		; (ldr pc, [sp], #4)
   13354:	mov	r0, #9
   13358:	pop	{pc}		; (ldr pc, [sp], #4)
   1335c:	mov	r0, #10
   13360:	b	13348 <flatcc_verify_union_struct@@Base+0x44>

00013364 <flatcc_verify_union_string@@Base>:
   13364:	ldrd	r2, [r0, #16]
   13368:	add	r3, r2, r3
   1336c:	cmp	r2, r3
   13370:	bcs	133bc <flatcc_verify_union_string@@Base+0x58>
   13374:	ldr	r2, [r0, #4]
   13378:	add	r1, r3, #4
   1337c:	cmp	r2, r1
   13380:	bcc	133bc <flatcc_verify_union_string@@Base+0x58>
   13384:	tst	r3, #3
   13388:	bne	133bc <flatcc_verify_union_string@@Base+0x58>
   1338c:	ldr	r0, [r0]
   13390:	sub	r2, r2, r1
   13394:	ldr	r3, [r0, r3]
   13398:	add	ip, r3, #1
   1339c:	cmp	r2, ip
   133a0:	bcc	133c4 <flatcc_verify_union_string@@Base+0x60>
   133a4:	add	r1, r0, r1
   133a8:	ldrb	r3, [r1, r3]
   133ac:	cmp	r3, #0
   133b0:	moveq	r0, #0
   133b4:	movne	r0, #7
   133b8:	bx	lr
   133bc:	mov	r0, #17
   133c0:	bx	lr
   133c4:	mov	r0, #8
   133c8:	bx	lr

000133cc <flatcc_verify_buffer_header@@Base>:
   133cc:	tst	r0, #3
   133d0:	bne	1343c <flatcc_verify_buffer_header@@Base+0x70>
   133d4:	cmn	r1, #9
   133d8:	bhi	13444 <flatcc_verify_buffer_header@@Base+0x78>
   133dc:	cmp	r1, #7
   133e0:	bls	13434 <flatcc_verify_buffer_header@@Base+0x68>
   133e4:	cmp	r2, #0
   133e8:	beq	1344c <flatcc_verify_buffer_header@@Base+0x80>
   133ec:	mov	r1, r2
   133f0:	mov	r2, #4
   133f4:	str	r4, [sp, #-8]!
   133f8:	str	lr, [sp, #4]
   133fc:	sub	sp, sp, #8
   13400:	mov	r4, r0
   13404:	add	r0, sp, r2
   13408:	bl	10d74 <strncpy@plt>
   1340c:	ldr	r2, [r4, #4]
   13410:	ldr	r3, [sp, #4]
   13414:	cmp	r3, #0
   13418:	cmpne	r2, r3
   1341c:	movne	r0, #2
   13420:	moveq	r0, #0
   13424:	add	sp, sp, #8
   13428:	ldr	r4, [sp]
   1342c:	add	sp, sp, #4
   13430:	pop	{pc}		; (ldr pc, [sp], #4)
   13434:	mov	r0, #1
   13438:	bx	lr
   1343c:	mov	r0, #5
   13440:	bx	lr
   13444:	mov	r0, #6
   13448:	bx	lr
   1344c:	mov	r0, #0
   13450:	bx	lr

00013454 <flatcc_verify_typed_buffer_header@@Base>:
   13454:	tst	r0, #3
   13458:	bne	13490 <flatcc_verify_typed_buffer_header@@Base+0x3c>
   1345c:	cmn	r1, #9
   13460:	bhi	134a0 <flatcc_verify_typed_buffer_header@@Base+0x4c>
   13464:	cmp	r1, #7
   13468:	bls	13488 <flatcc_verify_typed_buffer_header@@Base+0x34>
   1346c:	cmp	r2, #0
   13470:	beq	13498 <flatcc_verify_typed_buffer_header@@Base+0x44>
   13474:	ldr	r0, [r0, #4]
   13478:	cmp	r2, r0
   1347c:	movne	r0, #2
   13480:	moveq	r0, #0
   13484:	bx	lr
   13488:	mov	r0, #1
   1348c:	bx	lr
   13490:	mov	r0, #5
   13494:	bx	lr
   13498:	mov	r0, r2
   1349c:	bx	lr
   134a0:	mov	r0, #6
   134a4:	bx	lr

000134a8 <flatcc_verify_struct_as_root@@Base>:
   134a8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   134ac:	mov	r4, r3
   134b0:	mov	r5, r1
   134b4:	strd	r6, [sp, #8]
   134b8:	mov	r7, r0
   134bc:	ldrh	r6, [sp, #24]
   134c0:	str	r8, [sp, #16]
   134c4:	mov	r8, r2
   134c8:	str	lr, [sp, #20]
   134cc:	bl	133cc <flatcc_verify_buffer_header@@Base>
   134d0:	cmp	r0, #0
   134d4:	bne	1352c <flatcc_verify_struct_as_root@@Base+0x84>
   134d8:	ldr	r2, [r7]
   134dc:	cmp	r5, r2
   134e0:	movcs	r3, #0
   134e4:	movcc	r3, #1
   134e8:	cmp	r2, #0
   134ec:	moveq	r3, #1
   134f0:	cmp	r3, #0
   134f4:	movne	r0, #18
   134f8:	bne	13518 <flatcc_verify_struct_as_root@@Base+0x70>
   134fc:	adds	r4, r4, r2
   13500:	bcs	13558 <flatcc_verify_struct_as_root@@Base+0xb0>
   13504:	cmp	r5, r4
   13508:	bcc	13550 <flatcc_verify_struct_as_root@@Base+0xa8>
   1350c:	sub	r6, r6, #1
   13510:	tst	r6, r2
   13514:	movne	r0, #11
   13518:	ldrd	r4, [sp]
   1351c:	ldrd	r6, [sp, #8]
   13520:	ldr	r8, [sp, #16]
   13524:	add	sp, sp, #20
   13528:	pop	{pc}		; (ldr pc, [sp], #4)
   1352c:	mov	r2, r8
   13530:	mov	r1, r5
   13534:	ldrd	r4, [sp]
   13538:	mov	r0, r7
   1353c:	ldrd	r6, [sp, #8]
   13540:	ldr	r8, [sp, #16]
   13544:	ldr	lr, [sp, #20]
   13548:	add	sp, sp, #24
   1354c:	b	133cc <flatcc_verify_buffer_header@@Base>
   13550:	mov	r0, #9
   13554:	b	13518 <flatcc_verify_struct_as_root@@Base+0x70>
   13558:	mov	r0, #10
   1355c:	b	13518 <flatcc_verify_struct_as_root@@Base+0x70>

00013560 <flatcc_verify_struct_as_typed_root@@Base>:
   13560:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13564:	mov	r4, r3
   13568:	mov	r5, r1
   1356c:	strd	r6, [sp, #8]
   13570:	mov	r7, r0
   13574:	ldrh	r6, [sp, #24]
   13578:	str	r8, [sp, #16]
   1357c:	mov	r8, r2
   13580:	str	lr, [sp, #20]
   13584:	bl	13454 <flatcc_verify_typed_buffer_header@@Base>
   13588:	cmp	r0, #0
   1358c:	bne	135e4 <flatcc_verify_struct_as_typed_root@@Base+0x84>
   13590:	ldr	r2, [r7]
   13594:	cmp	r5, r2
   13598:	movcs	r3, #0
   1359c:	movcc	r3, #1
   135a0:	cmp	r2, #0
   135a4:	moveq	r3, #1
   135a8:	cmp	r3, #0
   135ac:	movne	r0, #18
   135b0:	bne	135d0 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   135b4:	adds	r4, r4, r2
   135b8:	bcs	13610 <flatcc_verify_struct_as_typed_root@@Base+0xb0>
   135bc:	cmp	r5, r4
   135c0:	bcc	13608 <flatcc_verify_struct_as_typed_root@@Base+0xa8>
   135c4:	sub	r6, r6, #1
   135c8:	tst	r6, r2
   135cc:	movne	r0, #11
   135d0:	ldrd	r4, [sp]
   135d4:	ldrd	r6, [sp, #8]
   135d8:	ldr	r8, [sp, #16]
   135dc:	add	sp, sp, #20
   135e0:	pop	{pc}		; (ldr pc, [sp], #4)
   135e4:	mov	r2, r8
   135e8:	mov	r1, r5
   135ec:	ldrd	r4, [sp]
   135f0:	mov	r0, r7
   135f4:	ldrd	r6, [sp, #8]
   135f8:	ldr	r8, [sp, #16]
   135fc:	ldr	lr, [sp, #20]
   13600:	add	sp, sp, #24
   13604:	b	13454 <flatcc_verify_typed_buffer_header@@Base>
   13608:	mov	r0, #9
   1360c:	b	135d0 <flatcc_verify_struct_as_typed_root@@Base+0x70>
   13610:	mov	r0, #10
   13614:	b	135d0 <flatcc_verify_struct_as_typed_root@@Base+0x70>

00013618 <flatcc_verify_table_as_root@@Base>:
   13618:	strd	r4, [sp, #-20]!	; 0xffffffec
   1361c:	mov	r4, r0
   13620:	mov	r5, r1
   13624:	strd	r6, [sp, #8]
   13628:	mov	r7, r3
   1362c:	mov	r6, r2
   13630:	str	lr, [sp, #16]
   13634:	sub	sp, sp, #28
   13638:	bl	133cc <flatcc_verify_buffer_header@@Base>
   1363c:	cmp	r0, #0
   13640:	bne	13704 <flatcc_verify_table_as_root@@Base+0xec>
   13644:	ldr	r3, [r4]
   13648:	mov	r2, #99	; 0x63
   1364c:	str	r2, [sp, #8]
   13650:	cmp	r3, #0
   13654:	bne	13670 <flatcc_verify_table_as_root@@Base+0x58>
   13658:	mov	r0, #15
   1365c:	add	sp, sp, #28
   13660:	ldrd	r4, [sp]
   13664:	ldrd	r6, [sp, #8]
   13668:	add	sp, sp, #16
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	add	r2, r3, #4
   13674:	cmp	r5, r2
   13678:	bcc	13658 <flatcc_verify_table_as_root@@Base+0x40>
   1367c:	tst	r3, #3
   13680:	bne	13658 <flatcc_verify_table_as_root@@Base+0x40>
   13684:	ldr	r2, [r4, r3]
   13688:	str	r3, [sp, #16]
   1368c:	subs	r2, r3, r2
   13690:	bmi	13718 <flatcc_verify_table_as_root@@Base+0x100>
   13694:	tst	r2, #1
   13698:	bne	13718 <flatcc_verify_table_as_root@@Base+0x100>
   1369c:	add	r0, r2, #2
   136a0:	cmp	r5, r0
   136a4:	movcc	r0, #27
   136a8:	bcc	1365c <flatcc_verify_table_as_root@@Base+0x44>
   136ac:	ldrh	r1, [r4, r2]
   136b0:	add	ip, r4, r2
   136b4:	add	r2, r1, r2
   136b8:	strh	r1, [sp, #22]
   136bc:	cmp	r5, r2
   136c0:	bcc	13720 <flatcc_verify_table_as_root@@Base+0x108>
   136c4:	tst	r1, #1
   136c8:	bne	13720 <flatcc_verify_table_as_root@@Base+0x108>
   136cc:	cmp	r1, #3
   136d0:	movls	r0, #28
   136d4:	bls	1365c <flatcc_verify_table_as_root@@Base+0x44>
   136d8:	ldrh	r2, [r4, r0]
   136dc:	sub	r3, r5, r3
   136e0:	cmp	r3, r2
   136e4:	strh	r2, [sp, #20]
   136e8:	movcc	r0, #20
   136ec:	bcc	1365c <flatcc_verify_table_as_root@@Base+0x44>
   136f0:	mov	r0, sp
   136f4:	strd	r4, [sp]
   136f8:	str	ip, [sp, #12]
   136fc:	blx	r7
   13700:	b	1365c <flatcc_verify_table_as_root@@Base+0x44>
   13704:	mov	r2, r6
   13708:	mov	r1, r5
   1370c:	mov	r0, r4
   13710:	bl	133cc <flatcc_verify_buffer_header@@Base>
   13714:	b	1365c <flatcc_verify_table_as_root@@Base+0x44>
   13718:	mov	r0, #29
   1371c:	b	1365c <flatcc_verify_table_as_root@@Base+0x44>
   13720:	mov	r0, #30
   13724:	b	1365c <flatcc_verify_table_as_root@@Base+0x44>

00013728 <flatcc_verify_table_as_typed_root@@Base>:
   13728:	strd	r4, [sp, #-20]!	; 0xffffffec
   1372c:	mov	r4, r0
   13730:	mov	r5, r1
   13734:	strd	r6, [sp, #8]
   13738:	mov	r7, r3
   1373c:	mov	r6, r2
   13740:	str	lr, [sp, #16]
   13744:	sub	sp, sp, #28
   13748:	bl	13454 <flatcc_verify_typed_buffer_header@@Base>
   1374c:	cmp	r0, #0
   13750:	bne	13814 <flatcc_verify_table_as_typed_root@@Base+0xec>
   13754:	ldr	r3, [r4]
   13758:	mov	r2, #99	; 0x63
   1375c:	str	r2, [sp, #8]
   13760:	cmp	r3, #0
   13764:	bne	13780 <flatcc_verify_table_as_typed_root@@Base+0x58>
   13768:	mov	r0, #15
   1376c:	add	sp, sp, #28
   13770:	ldrd	r4, [sp]
   13774:	ldrd	r6, [sp, #8]
   13778:	add	sp, sp, #16
   1377c:	pop	{pc}		; (ldr pc, [sp], #4)
   13780:	add	r2, r3, #4
   13784:	cmp	r5, r2
   13788:	bcc	13768 <flatcc_verify_table_as_typed_root@@Base+0x40>
   1378c:	tst	r3, #3
   13790:	bne	13768 <flatcc_verify_table_as_typed_root@@Base+0x40>
   13794:	ldr	r2, [r4, r3]
   13798:	str	r3, [sp, #16]
   1379c:	subs	r2, r3, r2
   137a0:	bmi	13828 <flatcc_verify_table_as_typed_root@@Base+0x100>
   137a4:	tst	r2, #1
   137a8:	bne	13828 <flatcc_verify_table_as_typed_root@@Base+0x100>
   137ac:	add	r0, r2, #2
   137b0:	cmp	r5, r0
   137b4:	movcc	r0, #27
   137b8:	bcc	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>
   137bc:	ldrh	r1, [r4, r2]
   137c0:	add	ip, r4, r2
   137c4:	add	r2, r1, r2
   137c8:	strh	r1, [sp, #22]
   137cc:	cmp	r5, r2
   137d0:	bcc	13830 <flatcc_verify_table_as_typed_root@@Base+0x108>
   137d4:	tst	r1, #1
   137d8:	bne	13830 <flatcc_verify_table_as_typed_root@@Base+0x108>
   137dc:	cmp	r1, #3
   137e0:	movls	r0, #28
   137e4:	bls	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>
   137e8:	ldrh	r2, [r4, r0]
   137ec:	sub	r3, r5, r3
   137f0:	cmp	r3, r2
   137f4:	strh	r2, [sp, #20]
   137f8:	movcc	r0, #20
   137fc:	bcc	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>
   13800:	mov	r0, sp
   13804:	strd	r4, [sp]
   13808:	str	ip, [sp, #12]
   1380c:	blx	r7
   13810:	b	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>
   13814:	mov	r2, r6
   13818:	mov	r1, r5
   1381c:	mov	r0, r4
   13820:	bl	13454 <flatcc_verify_typed_buffer_header@@Base>
   13824:	b	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>
   13828:	mov	r0, #29
   1382c:	b	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>
   13830:	mov	r0, #30
   13834:	b	1376c <flatcc_verify_table_as_typed_root@@Base+0x44>

00013838 <flatcc_verify_struct_as_nested_root@@Base>:
   13838:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1383c:	mov	r4, r1
   13840:	strd	r6, [sp, #8]
   13844:	mov	r6, r3
   13848:	strd	r8, [sp, #16]
   1384c:	mvn	r9, #0
   13850:	mov	r8, r0
   13854:	strd	sl, [sp, #24]
   13858:	mov	sl, #1
   1385c:	mov	fp, r2
   13860:	str	lr, [sp, #32]
   13864:	sub	sp, sp, #12
   13868:	ldrh	r5, [sp, #52]	; 0x34
   1386c:	str	sl, [sp]
   13870:	str	r9, [sp, #4]
   13874:	ldr	r7, [sp, #48]	; 0x30
   13878:	mov	r3, r5
   1387c:	bl	12a90 <flatcc_verify_vector_field@@Base>
   13880:	cmp	r0, #0
   13884:	bne	13920 <flatcc_verify_struct_as_nested_root@@Base+0xe8>
   13888:	ldrh	r3, [r8, #22]
   1388c:	add	r1, r4, #2
   13890:	lsl	r1, r1, #1
   13894:	uxth	r1, r1
   13898:	cmp	r3, r1
   1389c:	bls	13900 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   138a0:	ldr	r3, [r8, #12]
   138a4:	ldrh	r3, [r3, r1]
   138a8:	cmp	r3, #0
   138ac:	beq	13900 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   138b0:	ldr	r2, [r8]
   138b4:	ldr	r1, [r8, #16]
   138b8:	add	r3, r3, r1
   138bc:	adds	r0, r2, r3
   138c0:	beq	13900 <flatcc_verify_struct_as_nested_root@@Base+0xc8>
   138c4:	ldr	ip, [r2, r3]
   138c8:	mov	r3, r7
   138cc:	mov	r2, r6
   138d0:	ldr	r1, [r0, ip]
   138d4:	add	r0, r0, ip
   138d8:	add	r0, r0, #4
   138dc:	str	r5, [sp, #48]	; 0x30
   138e0:	add	sp, sp, #12
   138e4:	ldrd	r4, [sp]
   138e8:	ldrd	r6, [sp, #8]
   138ec:	ldrd	r8, [sp, #16]
   138f0:	ldrd	sl, [sp, #24]
   138f4:	ldr	lr, [sp, #32]
   138f8:	add	sp, sp, #36	; 0x24
   138fc:	b	134a8 <flatcc_verify_struct_as_root@@Base>
   13900:	mov	r0, #0
   13904:	add	sp, sp, #12
   13908:	ldrd	r4, [sp]
   1390c:	ldrd	r6, [sp, #8]
   13910:	ldrd	r8, [sp, #16]
   13914:	ldrd	sl, [sp, #24]
   13918:	add	sp, sp, #32
   1391c:	pop	{pc}		; (ldr pc, [sp], #4)
   13920:	mov	r3, r5
   13924:	mov	r2, fp
   13928:	str	sl, [sp, #48]	; 0x30
   1392c:	mov	r1, r4
   13930:	mov	r0, r8
   13934:	str	r9, [sp, #52]	; 0x34
   13938:	add	sp, sp, #12
   1393c:	ldrd	r4, [sp]
   13940:	ldrd	r6, [sp, #8]
   13944:	ldrd	r8, [sp, #16]
   13948:	ldrd	sl, [sp, #24]
   1394c:	ldr	lr, [sp, #32]
   13950:	add	sp, sp, #36	; 0x24
   13954:	b	12a90 <flatcc_verify_vector_field@@Base>

00013958 <flatcc_verify_table_as_nested_root@@Base>:
   13958:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1395c:	mov	r5, r0
   13960:	mov	r4, r1
   13964:	strd	r6, [sp, #8]
   13968:	mvn	r7, #0
   1396c:	mov	r6, r3
   13970:	strd	r8, [sp, #16]
   13974:	mov	r8, #1
   13978:	str	sl, [sp, #24]
   1397c:	mov	sl, r2
   13980:	str	lr, [sp, #28]
   13984:	sub	sp, sp, #32
   13988:	ldrh	r9, [sp, #64]	; 0x40
   1398c:	str	r8, [sp]
   13990:	str	r7, [sp, #4]
   13994:	mov	r3, r9
   13998:	bl	12a90 <flatcc_verify_vector_field@@Base>
   1399c:	cmp	r0, #0
   139a0:	bne	13ae0 <flatcc_verify_table_as_nested_root@@Base+0x188>
   139a4:	ldrh	r3, [r5, #22]
   139a8:	add	r1, r4, #2
   139ac:	lsl	r1, r1, #1
   139b0:	uxth	r1, r1
   139b4:	cmp	r3, r1
   139b8:	bls	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   139bc:	ldr	r3, [r5, #12]
   139c0:	ldrh	r3, [r3, r1]
   139c4:	cmp	r3, #0
   139c8:	beq	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   139cc:	ldr	r2, [r5]
   139d0:	ldr	r1, [r5, #16]
   139d4:	add	r3, r3, r1
   139d8:	adds	r1, r2, r3
   139dc:	beq	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   139e0:	ldr	r4, [r2, r3]
   139e4:	mov	r2, r6
   139e8:	ldr	r7, [r1, r4]
   139ec:	add	r4, r1, r4
   139f0:	add	r8, r4, #4
   139f4:	mov	r0, r8
   139f8:	mov	r1, r7
   139fc:	bl	133cc <flatcc_verify_buffer_header@@Base>
   13a00:	cmp	r0, #0
   13a04:	bne	13b08 <flatcc_verify_table_as_nested_root@@Base+0x1b0>
   13a08:	ldr	r3, [r5, #8]
   13a0c:	ldr	r2, [r4, #4]
   13a10:	sub	r3, r3, #1
   13a14:	cmp	r3, #0
   13a18:	moveq	r0, #3
   13a1c:	str	r3, [sp, #16]
   13a20:	beq	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13a24:	cmp	r2, #0
   13a28:	beq	13b00 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   13a2c:	add	r3, r2, #4
   13a30:	cmp	r7, r3
   13a34:	bcc	13b00 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   13a38:	tst	r2, #3
   13a3c:	bne	13b00 <flatcc_verify_table_as_nested_root@@Base+0x1a8>
   13a40:	str	r2, [sp, #24]
   13a44:	ldr	r3, [r8, r2]
   13a48:	subs	r3, r2, r3
   13a4c:	bmi	13b1c <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   13a50:	tst	r3, #1
   13a54:	bne	13b1c <flatcc_verify_table_as_nested_root@@Base+0x1c4>
   13a58:	add	r0, r3, #2
   13a5c:	cmp	r7, r0
   13a60:	movcc	r0, #27
   13a64:	bcc	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13a68:	ldrh	r1, [r8, r3]
   13a6c:	add	ip, r8, r3
   13a70:	add	r3, r1, r3
   13a74:	strh	r1, [sp, #30]
   13a78:	cmp	r7, r3
   13a7c:	bcc	13b24 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   13a80:	tst	r1, #1
   13a84:	bne	13b24 <flatcc_verify_table_as_nested_root@@Base+0x1cc>
   13a88:	cmp	r1, #3
   13a8c:	movls	r0, #28
   13a90:	bls	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13a94:	ldrh	r3, [r8, r0]
   13a98:	sub	r2, r7, r2
   13a9c:	cmp	r2, r3
   13aa0:	strh	r3, [sp, #28]
   13aa4:	movcc	r0, #20
   13aa8:	bcc	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13aac:	add	r0, sp, #8
   13ab0:	ldr	r3, [sp, #68]	; 0x44
   13ab4:	str	r8, [sp, #8]
   13ab8:	str	r7, [sp, #12]
   13abc:	str	ip, [sp, #20]
   13ac0:	blx	r3
   13ac4:	add	sp, sp, #32
   13ac8:	ldrd	r4, [sp]
   13acc:	ldrd	r6, [sp, #8]
   13ad0:	ldrd	r8, [sp, #16]
   13ad4:	ldr	sl, [sp, #24]
   13ad8:	add	sp, sp, #28
   13adc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae0:	mov	r3, r9
   13ae4:	mov	r2, sl
   13ae8:	str	r8, [sp]
   13aec:	mov	r1, r4
   13af0:	mov	r0, r5
   13af4:	str	r7, [sp, #4]
   13af8:	bl	12a90 <flatcc_verify_vector_field@@Base>
   13afc:	b	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13b00:	mov	r0, #15
   13b04:	b	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13b08:	mov	r2, r6
   13b0c:	mov	r1, r7
   13b10:	mov	r0, r8
   13b14:	bl	133cc <flatcc_verify_buffer_header@@Base>
   13b18:	b	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13b1c:	mov	r0, #29
   13b20:	b	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>
   13b24:	mov	r0, #30
   13b28:	b	13ac4 <flatcc_verify_table_as_nested_root@@Base+0x16c>

00013b2c <flatcc_verify_union_field@@Base>:
   13b2c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13b30:	add	r1, r1, #1
   13b34:	ldr	r4, [r0, #12]
   13b38:	lsl	r1, r1, #1
   13b3c:	strd	r6, [sp, #8]
   13b40:	str	lr, [sp, #16]
   13b44:	uxth	r1, r1
   13b48:	sub	sp, sp, #28
   13b4c:	ldrh	lr, [r0, #22]
   13b50:	cmp	r1, lr
   13b54:	bcs	13c00 <flatcc_verify_union_field@@Base+0xd4>
   13b58:	ldrh	ip, [r4, r1]
   13b5c:	cmp	ip, #0
   13b60:	beq	13c00 <flatcc_verify_union_field@@Base+0xd4>
   13b64:	ldrh	r5, [r0, #20]
   13b68:	add	r6, ip, #1
   13b6c:	cmp	r6, r5
   13b70:	bhi	13c50 <flatcc_verify_union_field@@Base+0x124>
   13b74:	ldr	r6, [r0]
   13b78:	add	r1, r1, #2
   13b7c:	uxth	r1, r1
   13b80:	ldr	r7, [r0, #16]
   13b84:	cmp	lr, r1
   13b88:	add	lr, ip, r7
   13b8c:	ldrb	ip, [r6, lr]
   13b90:	bls	13c58 <flatcc_verify_union_field@@Base+0x12c>
   13b94:	cmp	ip, #0
   13b98:	ldrh	r1, [r4, r1]
   13b9c:	beq	13c40 <flatcc_verify_union_field@@Base+0x114>
   13ba0:	cmp	r1, #0
   13ba4:	beq	13c68 <flatcc_verify_union_field@@Base+0x13c>
   13ba8:	add	r2, r1, #4
   13bac:	cmp	r5, r2
   13bb0:	bcc	13c50 <flatcc_verify_union_field@@Base+0x124>
   13bb4:	add	r1, r1, r7
   13bb8:	tst	r1, #3
   13bbc:	movne	r0, #12
   13bc0:	bne	13c2c <flatcc_verify_union_field@@Base+0x100>
   13bc4:	cmp	r1, #0
   13bc8:	beq	13c78 <flatcc_verify_union_field@@Base+0x14c>
   13bcc:	mov	r2, r0
   13bd0:	str	r1, [sp, #16]
   13bd4:	mov	r0, sp
   13bd8:	ldr	ip, [r2, #4]
   13bdc:	ldr	r2, [r2, #8]
   13be0:	stm	sp, {r6, ip}
   13be4:	str	r2, [sp, #8]
   13be8:	ldr	r2, [r6, r1]
   13bec:	str	r2, [sp, #20]
   13bf0:	ldrb	r2, [r6, lr]
   13bf4:	strb	r2, [sp, #12]
   13bf8:	blx	r3
   13bfc:	b	13c2c <flatcc_verify_union_field@@Base+0x100>
   13c00:	add	r1, r1, #2
   13c04:	uxth	r1, r1
   13c08:	cmp	lr, r1
   13c0c:	bls	13c20 <flatcc_verify_union_field@@Base+0xf4>
   13c10:	ldrh	r3, [r4, r1]
   13c14:	cmp	r3, #0
   13c18:	movne	r0, #23
   13c1c:	bne	13c2c <flatcc_verify_union_field@@Base+0x100>
   13c20:	cmp	r2, #0
   13c24:	moveq	r0, #0
   13c28:	movne	r0, #21
   13c2c:	add	sp, sp, #28
   13c30:	ldrd	r4, [sp]
   13c34:	ldrd	r6, [sp, #8]
   13c38:	add	sp, sp, #16
   13c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   13c40:	cmp	r1, #0
   13c44:	movne	r0, #24
   13c48:	moveq	r0, #0
   13c4c:	b	13c2c <flatcc_verify_union_field@@Base+0x100>
   13c50:	mov	r0, #13
   13c54:	b	13c2c <flatcc_verify_union_field@@Base+0x100>
   13c58:	cmp	ip, #0
   13c5c:	bne	13c68 <flatcc_verify_union_field@@Base+0x13c>
   13c60:	mov	r0, ip
   13c64:	b	13c2c <flatcc_verify_union_field@@Base+0x100>
   13c68:	cmp	r2, #0
   13c6c:	moveq	r0, #0
   13c70:	movne	r0, #4
   13c74:	b	13c2c <flatcc_verify_union_field@@Base+0x100>
   13c78:	mov	r0, r1
   13c7c:	b	13c2c <flatcc_verify_union_field@@Base+0x100>

00013c80 <flatcc_verify_union_vector_field@@Base>:
   13c80:	ldrh	ip, [r0, #22]
   13c84:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13c88:	add	r4, r1, #1
   13c8c:	sub	r1, r1, #1
   13c90:	lsl	r4, r4, #1
   13c94:	strd	r6, [sp, #8]
   13c98:	uxth	r6, r1
   13c9c:	strd	r8, [sp, #16]
   13ca0:	uxth	r4, r4
   13ca4:	strd	sl, [sp, #24]
   13ca8:	cmp	r4, ip
   13cac:	str	lr, [sp, #32]
   13cb0:	sub	sp, sp, #36	; 0x24
   13cb4:	ldr	lr, [r0, #12]
   13cb8:	bcs	13e78 <flatcc_verify_union_vector_field@@Base+0x1f8>
   13cbc:	ldrh	r1, [lr, r4]
   13cc0:	cmp	r1, #0
   13cc4:	beq	13e78 <flatcc_verify_union_vector_field@@Base+0x1f8>
   13cc8:	mov	r9, #1
   13ccc:	mvn	fp, #0
   13cd0:	mov	r8, r3
   13cd4:	mov	r1, r6
   13cd8:	mov	r3, r9
   13cdc:	stm	sp, {r9, fp}
   13ce0:	mov	r7, r2
   13ce4:	mov	r5, r0
   13ce8:	bl	12a90 <flatcc_verify_vector_field@@Base>
   13cec:	subs	sl, r0, #0
   13cf0:	bne	13ebc <flatcc_verify_union_vector_field@@Base+0x23c>
   13cf4:	ldrh	r1, [r5, #22]
   13cf8:	cmp	r4, r1
   13cfc:	bcs	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d00:	ldr	ip, [r5, #12]
   13d04:	ldrh	r3, [ip, r4]
   13d08:	cmp	r3, #0
   13d0c:	beq	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d10:	ldr	r0, [r5]
   13d14:	ldr	r2, [r5, #16]
   13d18:	add	r3, r3, r2
   13d1c:	adds	lr, r0, r3
   13d20:	beq	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d24:	add	r4, r4, #2
   13d28:	uxth	r4, r4
   13d2c:	cmp	r1, r4
   13d30:	bls	13ea4 <flatcc_verify_union_vector_field@@Base+0x224>
   13d34:	ldrh	r1, [ip, r4]
   13d38:	cmp	r1, #0
   13d3c:	beq	13ea4 <flatcc_verify_union_vector_field@@Base+0x224>
   13d40:	ldrh	ip, [r5, #20]
   13d44:	add	r4, r1, #4
   13d48:	cmp	r4, ip
   13d4c:	movhi	sl, #13
   13d50:	bhi	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d54:	add	r2, r2, r1
   13d58:	tst	r2, #3
   13d5c:	movne	sl, #12
   13d60:	bne	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d64:	cmp	r2, #0
   13d68:	beq	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d6c:	ldr	ip, [r5, #8]
   13d70:	ldr	r1, [r0, r2]
   13d74:	cmp	ip, #0
   13d78:	movle	sl, #3
   13d7c:	ble	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13d80:	add	r1, r2, r1
   13d84:	cmp	r2, r1
   13d88:	bcs	13eb4 <flatcc_verify_union_vector_field@@Base+0x234>
   13d8c:	ldr	r4, [r5, #4]
   13d90:	add	r2, r1, #4
   13d94:	cmp	r4, r2
   13d98:	bcc	13eb4 <flatcc_verify_union_vector_field@@Base+0x234>
   13d9c:	tst	r2, #3
   13da0:	bne	13eb4 <flatcc_verify_union_vector_field@@Base+0x234>
   13da4:	ldr	r5, [r0, r1]
   13da8:	add	r6, r0, r1
   13dac:	cmn	r5, #-1073741823	; 0xc0000001
   13db0:	bhi	13edc <flatcc_verify_union_vector_field@@Base+0x25c>
   13db4:	sub	r7, r4, r2
   13db8:	cmp	r7, r5, lsl #2
   13dbc:	bcc	13edc <flatcc_verify_union_vector_field@@Base+0x25c>
   13dc0:	ldr	r3, [r0, r3]
   13dc4:	ldr	r7, [lr, r3]
   13dc8:	add	lr, lr, r3
   13dcc:	cmp	r7, r5
   13dd0:	bne	13efc <flatcc_verify_union_vector_field@@Base+0x27c>
   13dd4:	sub	ip, ip, #1
   13dd8:	cmp	r7, #0
   13ddc:	str	r0, [sp, #8]
   13de0:	str	r4, [sp, #12]
   13de4:	str	ip, [sp, #16]
   13de8:	beq	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13dec:	add	r5, lr, #4
   13df0:	rsb	r4, r0, #4
   13df4:	add	r7, r7, r5
   13df8:	add	r9, sp, #8
   13dfc:	b	13e10 <flatcc_verify_union_vector_field@@Base+0x190>
   13e00:	cmp	r2, #0
   13e04:	bne	13f04 <flatcc_verify_union_vector_field@@Base+0x284>
   13e08:	cmp	r5, r7
   13e0c:	beq	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13e10:	add	r1, r4, r6
   13e14:	ldr	r3, [r6, #4]!
   13e18:	mov	r0, r9
   13e1c:	add	r5, r5, #1
   13e20:	ldrb	r2, [r5, #-1]
   13e24:	cmp	r3, #0
   13e28:	beq	13e00 <flatcc_verify_union_vector_field@@Base+0x180>
   13e2c:	cmp	r2, #0
   13e30:	beq	13f0c <flatcc_verify_union_vector_field@@Base+0x28c>
   13e34:	strb	r2, [sp, #20]
   13e38:	str	r1, [sp, #24]
   13e3c:	str	r3, [sp, #28]
   13e40:	blx	r8
   13e44:	cmp	r0, #0
   13e48:	beq	13e08 <flatcc_verify_union_vector_field@@Base+0x188>
   13e4c:	mov	r0, r9
   13e50:	blx	r8
   13e54:	mov	sl, r0
   13e58:	mov	r0, sl
   13e5c:	add	sp, sp, #36	; 0x24
   13e60:	ldrd	r4, [sp]
   13e64:	ldrd	r6, [sp, #8]
   13e68:	ldrd	r8, [sp, #16]
   13e6c:	ldrd	sl, [sp, #24]
   13e70:	add	sp, sp, #32
   13e74:	pop	{pc}		; (ldr pc, [sp], #4)
   13e78:	add	r1, r4, #2
   13e7c:	uxth	r1, r1
   13e80:	cmp	ip, r1
   13e84:	bls	13e94 <flatcc_verify_union_vector_field@@Base+0x214>
   13e88:	ldrh	r1, [lr, r1]
   13e8c:	cmp	r1, #0
   13e90:	bne	13cc8 <flatcc_verify_union_vector_field@@Base+0x48>
   13e94:	cmp	r2, #0
   13e98:	movne	sl, #22
   13e9c:	beq	13cc8 <flatcc_verify_union_vector_field@@Base+0x48>
   13ea0:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13ea4:	cmp	r7, #0
   13ea8:	moveq	sl, #0
   13eac:	movne	sl, #4
   13eb0:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13eb4:	mov	sl, #16
   13eb8:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13ebc:	mov	r2, r7
   13ec0:	mov	r1, r6
   13ec4:	stm	sp, {r9, fp}
   13ec8:	mov	r3, r9
   13ecc:	mov	r0, r5
   13ed0:	bl	12a90 <flatcc_verify_vector_field@@Base>
   13ed4:	mov	sl, r0
   13ed8:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13edc:	ldr	r3, [r0, r1]
   13ee0:	cmn	r3, #-1073741823	; 0xc0000001
   13ee4:	movhi	sl, #25
   13ee8:	bhi	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13eec:	sub	r2, r4, r2
   13ef0:	cmp	r2, r3, lsl #2
   13ef4:	movcc	sl, #26
   13ef8:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13efc:	mov	sl, #34	; 0x22
   13f00:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13f04:	mov	sl, #32
   13f08:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>
   13f0c:	mov	sl, #33	; 0x21
   13f10:	b	13e58 <flatcc_verify_union_vector_field@@Base+0x1d8>

00013f14 <__libc_csu_init@@Base>:
   13f14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f18:	mov	r7, r0
   13f1c:	ldr	r6, [pc, #72]	; 13f6c <__libc_csu_init@@Base+0x58>
   13f20:	ldr	r5, [pc, #72]	; 13f70 <__libc_csu_init@@Base+0x5c>
   13f24:	add	r6, pc, r6
   13f28:	add	r5, pc, r5
   13f2c:	sub	r6, r6, r5
   13f30:	mov	r8, r1
   13f34:	mov	r9, r2
   13f38:	bl	10c94 <strcmp@plt-0x20>
   13f3c:	asrs	r6, r6, #2
   13f40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f44:	mov	r4, #0
   13f48:	add	r4, r4, #1
   13f4c:	ldr	r3, [r5], #4
   13f50:	mov	r2, r9
   13f54:	mov	r1, r8
   13f58:	mov	r0, r7
   13f5c:	blx	r3
   13f60:	cmp	r6, r4
   13f64:	bne	13f48 <__libc_csu_init@@Base+0x34>
   13f68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13f6c:	andeq	r0, r1, r8, ror #31
   13f70:	andeq	r0, r1, r0, ror #31

00013f74 <__libc_csu_fini@@Base>:
   13f74:	bx	lr

Disassembly of section .fini:

00013f78 <.fini>:
   13f78:	push	{r3, lr}
   13f7c:	pop	{r3, pc}
