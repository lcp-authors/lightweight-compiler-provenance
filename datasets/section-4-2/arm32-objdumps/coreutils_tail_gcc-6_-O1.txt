
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

0001107c <.init>:
   1107c:	push	{r3, lr}
   11080:	bl	1145c <__assert_fail@plt+0x48>
   11084:	pop	{r3, pc}

Disassembly of section .plt:

00011088 <fstatfs64@plt-0x14>:
   11088:	push	{lr}		; (str lr, [sp, #-4]!)
   1108c:	ldr	lr, [pc, #4]	; 11098 <fstatfs64@plt-0x4>
   11090:	add	lr, pc, lr
   11094:	ldr	pc, [lr, #8]!
   11098:	andeq	fp, r1, r8, ror #30

0001109c <fstatfs64@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #110592	; 0x1b000
   110a4:	ldr	pc, [ip, #3944]!	; 0xf68

000110a8 <calloc@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #110592	; 0x1b000
   110b0:	ldr	pc, [ip, #3936]!	; 0xf60

000110b4 <fputs_unlocked@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #110592	; 0x1b000
   110bc:	ldr	pc, [ip, #3928]!	; 0xf58

000110c0 <raise@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #110592	; 0x1b000
   110c8:	ldr	pc, [ip, #3920]!	; 0xf50

000110cc <strcmp@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #110592	; 0x1b000
   110d4:	ldr	pc, [ip, #3912]!	; 0xf48

000110d8 <strtol@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #110592	; 0x1b000
   110e0:	ldr	pc, [ip, #3904]!	; 0xf40

000110e4 <pause@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #110592	; 0x1b000
   110ec:	ldr	pc, [ip, #3896]!	; 0xf38

000110f0 <read@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #110592	; 0x1b000
   110f8:	ldr	pc, [ip, #3888]!	; 0xf30

000110fc <fflush@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #110592	; 0x1b000
   11104:	ldr	pc, [ip, #3880]!	; 0xf28

00011108 <free@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #110592	; 0x1b000
   11110:	ldr	pc, [ip, #3872]!	; 0xf20

00011114 <nanosleep@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #110592	; 0x1b000
   1111c:	ldr	pc, [ip, #3864]!	; 0xf18

00011120 <_exit@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #110592	; 0x1b000
   11128:	ldr	pc, [ip, #3856]!	; 0xf10

0001112c <memcpy@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #110592	; 0x1b000
   11134:	ldr	pc, [ip, #3848]!	; 0xf08

00011138 <__strtoull_internal@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #110592	; 0x1b000
   11140:	ldr	pc, [ip, #3840]!	; 0xf00

00011144 <mbsinit@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #110592	; 0x1b000
   1114c:	ldr	pc, [ip, #3832]!	; 0xef8

00011150 <fwrite_unlocked@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #110592	; 0x1b000
   11158:	ldr	pc, [ip, #3824]!	; 0xef0

0001115c <memcmp@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #110592	; 0x1b000
   11164:	ldr	pc, [ip, #3816]!	; 0xee8

00011168 <fputc_unlocked@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #110592	; 0x1b000
   11170:	ldr	pc, [ip, #3808]!	; 0xee0

00011174 <dcgettext@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #110592	; 0x1b000
   1117c:	ldr	pc, [ip, #3800]!	; 0xed8

00011180 <realloc@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #110592	; 0x1b000
   11188:	ldr	pc, [ip, #3792]!	; 0xed0

0001118c <textdomain@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #110592	; 0x1b000
   11194:	ldr	pc, [ip, #3784]!	; 0xec8

00011198 <rawmemchr@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #110592	; 0x1b000
   111a0:	ldr	pc, [ip, #3776]!	; 0xec0

000111a4 <fflush_unlocked@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #110592	; 0x1b000
   111ac:	ldr	pc, [ip, #3768]!	; 0xeb8

000111b0 <iswprint@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #110592	; 0x1b000
   111b8:	ldr	pc, [ip, #3760]!	; 0xeb0

000111bc <poll@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #110592	; 0x1b000
   111c4:	ldr	pc, [ip, #3752]!	; 0xea8

000111c8 <__fxstat64@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #110592	; 0x1b000
   111d0:	ldr	pc, [ip, #3744]!	; 0xea0

000111d4 <__poll_chk@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #110592	; 0x1b000
   111dc:	ldr	pc, [ip, #3736]!	; 0xe98

000111e0 <fwrite@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #110592	; 0x1b000
   111e8:	ldr	pc, [ip, #3728]!	; 0xe90

000111ec <lseek64@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #110592	; 0x1b000
   111f4:	ldr	pc, [ip, #3720]!	; 0xe88

000111f8 <__ctype_get_mb_cur_max@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #110592	; 0x1b000
   11200:	ldr	pc, [ip, #3712]!	; 0xe80

00011204 <__fpending@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #110592	; 0x1b000
   1120c:	ldr	pc, [ip, #3704]!	; 0xe78

00011210 <mbrtowc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #110592	; 0x1b000
   11218:	ldr	pc, [ip, #3696]!	; 0xe70

0001121c <error@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #110592	; 0x1b000
   11224:	ldr	pc, [ip, #3688]!	; 0xe68

00011228 <open64@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #110592	; 0x1b000
   11230:	ldr	pc, [ip, #3680]!	; 0xe60

00011234 <getenv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #110592	; 0x1b000
   1123c:	ldr	pc, [ip, #3672]!	; 0xe58

00011240 <malloc@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #110592	; 0x1b000
   11248:	ldr	pc, [ip, #3664]!	; 0xe50

0001124c <__libc_start_main@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #110592	; 0x1b000
   11254:	ldr	pc, [ip, #3656]!	; 0xe48

00011258 <__freading@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #110592	; 0x1b000
   11260:	ldr	pc, [ip, #3648]!	; 0xe40

00011264 <__gmon_start__@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #110592	; 0x1b000
   1126c:	ldr	pc, [ip, #3640]!	; 0xe38

00011270 <getopt_long@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #110592	; 0x1b000
   11278:	ldr	pc, [ip, #3632]!	; 0xe30

0001127c <kill@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #110592	; 0x1b000
   11284:	ldr	pc, [ip, #3624]!	; 0xe28

00011288 <__ctype_b_loc@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #110592	; 0x1b000
   11290:	ldr	pc, [ip, #3616]!	; 0xe20

00011294 <exit@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #110592	; 0x1b000
   1129c:	ldr	pc, [ip, #3608]!	; 0xe18

000112a0 <strlen@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #110592	; 0x1b000
   112a8:	ldr	pc, [ip, #3600]!	; 0xe10

000112ac <inotify_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #110592	; 0x1b000
   112b4:	ldr	pc, [ip, #3592]!	; 0xe08

000112b8 <strchr@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #110592	; 0x1b000
   112c0:	ldr	pc, [ip, #3584]!	; 0xe00

000112c4 <memrchr@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #110592	; 0x1b000
   112cc:	ldr	pc, [ip, #3576]!	; 0xdf8

000112d0 <inotify_add_watch@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #110592	; 0x1b000
   112d8:	ldr	pc, [ip, #3568]!	; 0xdf0

000112dc <__errno_location@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #110592	; 0x1b000
   112e4:	ldr	pc, [ip, #3560]!	; 0xde8

000112e8 <__cxa_atexit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #110592	; 0x1b000
   112f0:	ldr	pc, [ip, #3552]!	; 0xde0

000112f4 <memset@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #110592	; 0x1b000
   112fc:	ldr	pc, [ip, #3544]!	; 0xdd8

00011300 <__printf_chk@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #110592	; 0x1b000
   11308:	ldr	pc, [ip, #3536]!	; 0xdd0

0001130c <strtod@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #110592	; 0x1b000
   11314:	ldr	pc, [ip, #3528]!	; 0xdc8

00011318 <fileno@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #110592	; 0x1b000
   11320:	ldr	pc, [ip, #3520]!	; 0xdc0

00011324 <__fprintf_chk@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #110592	; 0x1b000
   1132c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011330 <memchr@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #110592	; 0x1b000
   11338:	ldr	pc, [ip, #3504]!	; 0xdb0

0001133c <fclose@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #110592	; 0x1b000
   11344:	ldr	pc, [ip, #3496]!	; 0xda8

00011348 <fseeko64@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #110592	; 0x1b000
   11350:	ldr	pc, [ip, #3488]!	; 0xda0

00011354 <strtod_l@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #110592	; 0x1b000
   1135c:	ldr	pc, [ip, #3480]!	; 0xd98

00011360 <fcntl64@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #110592	; 0x1b000
   11368:	ldr	pc, [ip, #3472]!	; 0xd90

0001136c <__overflow@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #110592	; 0x1b000
   11374:	ldr	pc, [ip, #3464]!	; 0xd88

00011378 <setlocale@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #110592	; 0x1b000
   11380:	ldr	pc, [ip, #3456]!	; 0xd80

00011384 <strrchr@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #110592	; 0x1b000
   1138c:	ldr	pc, [ip, #3448]!	; 0xd78

00011390 <nl_langinfo@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #110592	; 0x1b000
   11398:	ldr	pc, [ip, #3440]!	; 0xd70

0001139c <newlocale@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #110592	; 0x1b000
   113a4:	ldr	pc, [ip, #3432]!	; 0xd68

000113a8 <clearerr_unlocked@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #110592	; 0x1b000
   113b0:	ldr	pc, [ip, #3424]!	; 0xd60

000113b4 <bindtextdomain@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #110592	; 0x1b000
   113bc:	ldr	pc, [ip, #3416]!	; 0xd58

000113c0 <__xstat64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #110592	; 0x1b000
   113c8:	ldr	pc, [ip, #3408]!	; 0xd50

000113cc <isatty@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #110592	; 0x1b000
   113d4:	ldr	pc, [ip, #3400]!	; 0xd48

000113d8 <inotify_rm_watch@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #110592	; 0x1b000
   113e0:	ldr	pc, [ip, #3392]!	; 0xd40

000113e4 <strncmp@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #110592	; 0x1b000
   113ec:	ldr	pc, [ip, #3384]!	; 0xd38

000113f0 <abort@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #110592	; 0x1b000
   113f8:	ldr	pc, [ip, #3376]!	; 0xd30

000113fc <close@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #110592	; 0x1b000
   11404:	ldr	pc, [ip, #3368]!	; 0xd28

00011408 <__lxstat64@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #110592	; 0x1b000
   11410:	ldr	pc, [ip, #3360]!	; 0xd20

00011414 <__assert_fail@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #110592	; 0x1b000
   1141c:	ldr	pc, [ip, #3352]!	; 0xd18

Disassembly of section .text:

00011420 <.text>:
   11420:	mov	fp, #0
   11424:	mov	lr, #0
   11428:	pop	{r1}		; (ldr r1, [sp], #4)
   1142c:	mov	r2, sp
   11430:	push	{r2}		; (str r2, [sp, #-4]!)
   11434:	push	{r0}		; (str r0, [sp, #-4]!)
   11438:	ldr	ip, [pc, #16]	; 11450 <__assert_fail@plt+0x3c>
   1143c:	push	{ip}		; (str ip, [sp, #-4]!)
   11440:	ldr	r0, [pc, #12]	; 11454 <__assert_fail@plt+0x40>
   11444:	ldr	r3, [pc, #12]	; 11458 <__assert_fail@plt+0x44>
   11448:	bl	1124c <__libc_start_main@plt>
   1144c:	bl	113f0 <abort@plt>
   11450:	andeq	fp, r1, r8, asr r4
   11454:	andeq	r3, r1, r4, lsl r2
   11458:	strdeq	fp, [r1], -r8
   1145c:	ldr	r3, [pc, #20]	; 11478 <__assert_fail@plt+0x64>
   11460:	ldr	r2, [pc, #20]	; 1147c <__assert_fail@plt+0x68>
   11464:	add	r3, pc, r3
   11468:	ldr	r2, [r3, r2]
   1146c:	cmp	r2, #0
   11470:	bxeq	lr
   11474:	b	11264 <__gmon_start__@plt>
   11478:	muleq	r1, r4, fp
   1147c:	andeq	r0, r0, r8, lsr r1
   11480:	ldr	r3, [pc, #28]	; 114a4 <__assert_fail@plt+0x90>
   11484:	ldr	r0, [pc, #28]	; 114a8 <__assert_fail@plt+0x94>
   11488:	sub	r3, r3, r0
   1148c:	cmp	r3, #6
   11490:	bxls	lr
   11494:	ldr	r3, [pc, #16]	; 114ac <__assert_fail@plt+0x98>
   11498:	cmp	r3, #0
   1149c:	bxeq	lr
   114a0:	bx	r3
   114a4:	andeq	sp, r2, pc, lsr #3
   114a8:	andeq	sp, r2, ip, lsr #3
   114ac:	andeq	r0, r0, r0
   114b0:	ldr	r1, [pc, #36]	; 114dc <__assert_fail@plt+0xc8>
   114b4:	ldr	r0, [pc, #36]	; 114e0 <__assert_fail@plt+0xcc>
   114b8:	sub	r1, r1, r0
   114bc:	asr	r1, r1, #2
   114c0:	add	r1, r1, r1, lsr #31
   114c4:	asrs	r1, r1, #1
   114c8:	bxeq	lr
   114cc:	ldr	r3, [pc, #16]	; 114e4 <__assert_fail@plt+0xd0>
   114d0:	cmp	r3, #0
   114d4:	bxeq	lr
   114d8:	bx	r3
   114dc:	andeq	sp, r2, ip, lsr #3
   114e0:	andeq	sp, r2, ip, lsr #3
   114e4:	andeq	r0, r0, r0
   114e8:	push	{r4, lr}
   114ec:	ldr	r4, [pc, #24]	; 1150c <__assert_fail@plt+0xf8>
   114f0:	ldrb	r3, [r4]
   114f4:	cmp	r3, #0
   114f8:	popne	{r4, pc}
   114fc:	bl	11480 <__assert_fail@plt+0x6c>
   11500:	mov	r3, #1
   11504:	strb	r3, [r4]
   11508:	pop	{r4, pc}
   1150c:	andeq	sp, r2, ip, asr #3
   11510:	ldr	r0, [pc, #40]	; 11540 <__assert_fail@plt+0x12c>
   11514:	ldr	r3, [r0]
   11518:	cmp	r3, #0
   1151c:	bne	11524 <__assert_fail@plt+0x110>
   11520:	b	114b0 <__assert_fail@plt+0x9c>
   11524:	ldr	r3, [pc, #24]	; 11544 <__assert_fail@plt+0x130>
   11528:	cmp	r3, #0
   1152c:	beq	11520 <__assert_fail@plt+0x10c>
   11530:	push	{r4, lr}
   11534:	blx	r3
   11538:	pop	{r4, lr}
   1153c:	b	114b0 <__assert_fail@plt+0x9c>
   11540:	andeq	ip, r2, r4, lsl pc
   11544:	andeq	r0, r0, r0
   11548:	push	{r4, lr}
   1154c:	ldr	r0, [r0, #60]	; 0x3c
   11550:	bl	1af50 <__assert_fail@plt+0x9b3c>
   11554:	mov	r0, r1
   11558:	pop	{r4, pc}
   1155c:	ldr	r0, [r0, #60]	; 0x3c
   11560:	ldr	r3, [r1, #60]	; 0x3c
   11564:	cmp	r0, r3
   11568:	movne	r0, #0
   1156c:	moveq	r0, #1
   11570:	bx	lr
   11574:	push	{r4, lr}
   11578:	ldr	r3, [pc, #48]	; 115b0 <__assert_fail@plt+0x19c>
   1157c:	ldrb	ip, [r3]
   11580:	mov	r3, r0
   11584:	ldr	r1, [pc, #40]	; 115b4 <__assert_fail@plt+0x1a0>
   11588:	ldr	r2, [pc, #40]	; 115b8 <__assert_fail@plt+0x1a4>
   1158c:	cmp	ip, #0
   11590:	moveq	r2, r1
   11594:	ldr	r1, [pc, #32]	; 115bc <__assert_fail@plt+0x1a8>
   11598:	mov	r0, #1
   1159c:	bl	11300 <__printf_chk@plt>
   115a0:	mov	r2, #0
   115a4:	ldr	r3, [pc, #4]	; 115b0 <__assert_fail@plt+0x19c>
   115a8:	strb	r2, [r3]
   115ac:	pop	{r4, pc}
   115b0:	andeq	sp, r2, r8, asr #2
   115b4:	andeq	fp, r1, r0, ror #11
   115b8:	andeq	ip, r1, r8, lsr #2
   115bc:	ldrdeq	fp, [r1], -r4
   115c0:	push	{r4, lr}
   115c4:	ldr	r4, [r0]
   115c8:	ldr	r1, [pc, #36]	; 115f4 <__assert_fail@plt+0x1e0>
   115cc:	mov	r0, r4
   115d0:	bl	110cc <strcmp@plt>
   115d4:	cmp	r0, #0
   115d8:	beq	115e4 <__assert_fail@plt+0x1d0>
   115dc:	mov	r0, r4
   115e0:	pop	{r4, pc}
   115e4:	mov	r2, #5
   115e8:	ldr	r1, [pc, #8]	; 115f8 <__assert_fail@plt+0x1e4>
   115ec:	bl	11174 <dcgettext@plt>
   115f0:	pop	{r4, pc}
   115f4:	andeq	fp, r1, r4, ror #11
   115f8:	andeq	fp, r1, r8, ror #11
   115fc:	add	r3, r0, #1
   11600:	cmp	r3, #1
   11604:	bxls	lr
   11608:	push	{r4, r5, r6, r7, lr}
   1160c:	sub	sp, sp, #12
   11610:	mov	r5, r1
   11614:	mov	r4, r0
   11618:	bl	113fc <close@plt>
   1161c:	cmp	r0, #0
   11620:	bne	1162c <__assert_fail@plt+0x218>
   11624:	add	sp, sp, #12
   11628:	pop	{r4, r5, r6, r7, pc}
   1162c:	bl	112dc <__errno_location@plt>
   11630:	ldr	r6, [r0]
   11634:	mov	r2, #5
   11638:	ldr	r1, [pc, #48]	; 11670 <__assert_fail@plt+0x25c>
   1163c:	mov	r0, #0
   11640:	bl	11174 <dcgettext@plt>
   11644:	mov	r7, r0
   11648:	mov	r1, r5
   1164c:	mov	r0, #4
   11650:	bl	19094 <__assert_fail@plt+0x7c80>
   11654:	str	r4, [sp]
   11658:	mov	r3, r0
   1165c:	mov	r2, r7
   11660:	mov	r1, r6
   11664:	mov	r0, #0
   11668:	bl	1121c <error@plt>
   1166c:	b	11624 <__assert_fail@plt+0x210>
   11670:	strdeq	fp, [r1], -r8
   11674:	push	{r4, r5, r6, lr}
   11678:	subs	r4, r1, #0
   1167c:	popeq	{r4, r5, r6, pc}
   11680:	ldr	r3, [pc, #92]	; 116e4 <__assert_fail@plt+0x2d0>
   11684:	ldr	r3, [r3]
   11688:	mov	r2, r4
   1168c:	mov	r1, #1
   11690:	bl	11150 <fwrite_unlocked@plt>
   11694:	cmp	r4, r0
   11698:	popls	{r4, r5, r6, pc}
   1169c:	ldr	r3, [pc, #64]	; 116e4 <__assert_fail@plt+0x2d0>
   116a0:	ldr	r0, [r3]
   116a4:	bl	113a8 <clearerr_unlocked@plt>
   116a8:	bl	112dc <__errno_location@plt>
   116ac:	ldr	r4, [r0]
   116b0:	mov	r2, #5
   116b4:	ldr	r1, [pc, #44]	; 116e8 <__assert_fail@plt+0x2d4>
   116b8:	mov	r0, #0
   116bc:	bl	11174 <dcgettext@plt>
   116c0:	mov	r5, r0
   116c4:	ldr	r1, [pc, #32]	; 116ec <__assert_fail@plt+0x2d8>
   116c8:	mov	r0, #4
   116cc:	bl	19094 <__assert_fail@plt+0x7c80>
   116d0:	mov	r3, r0
   116d4:	mov	r2, r5
   116d8:	mov	r1, r4
   116dc:	mov	r0, #1
   116e0:	bl	1121c <error@plt>
   116e4:	andeq	sp, r2, r4, asr #3
   116e8:	andeq	fp, r1, ip, lsl #12
   116ec:	andeq	fp, r1, r0, lsr #12
   116f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116f4:	sub	sp, sp, #8192	; 0x2000
   116f8:	sub	sp, sp, #12
   116fc:	str	r0, [sp, #4]
   11700:	str	r1, [sp]
   11704:	mov	r4, r2
   11708:	mov	r5, r3
   1170c:	add	r3, sp, #8192	; 0x2000
   11710:	add	r3, r3, #48	; 0x30
   11714:	ldr	r9, [r3]
   11718:	orrs	r3, r4, r5
   1171c:	moveq	r0, #0
   11720:	beq	117a4 <__assert_fail@plt+0x390>
   11724:	mov	fp, #8192	; 0x2000
   11728:	ldr	sl, [pc, #220]	; 1180c <__assert_fail@plt+0x3f8>
   1172c:	mov	r2, fp
   11730:	add	r1, sp, #8
   11734:	ldr	r0, [sp]
   11738:	bl	192dc <__assert_fail@plt+0x7ec8>
   1173c:	cmp	r0, #0
   11740:	beq	11804 <__assert_fail@plt+0x3f0>
   11744:	cmn	r0, #1
   11748:	beq	117b0 <__assert_fail@plt+0x39c>
   1174c:	add	r3, sp, #8
   11750:	add	r6, r3, r0
   11754:	ldrd	r2, [r9]
   11758:	adds	r2, r2, r0
   1175c:	adc	r3, r3, #0
   11760:	strd	r2, [r9]
   11764:	ldrb	r7, [sl]
   11768:	add	r0, sp, #8
   1176c:	mov	r8, r6
   11770:	sub	r2, r6, r0
   11774:	mov	r1, r7
   11778:	bl	11330 <memchr@plt>
   1177c:	cmp	r0, #0
   11780:	beq	1172c <__assert_fail@plt+0x318>
   11784:	add	r0, r0, #1
   11788:	subs	r4, r4, #1
   1178c:	sbc	r5, r5, #0
   11790:	orrs	r3, r4, r5
   11794:	bne	1176c <__assert_fail@plt+0x358>
   11798:	cmp	r6, r0
   1179c:	movls	r0, #0
   117a0:	bhi	117f4 <__assert_fail@plt+0x3e0>
   117a4:	add	sp, sp, #8192	; 0x2000
   117a8:	add	sp, sp, #12
   117ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117b0:	bl	112dc <__errno_location@plt>
   117b4:	ldr	r4, [r0]
   117b8:	mov	r2, #5
   117bc:	ldr	r1, [pc, #76]	; 11810 <__assert_fail@plt+0x3fc>
   117c0:	mov	r0, #0
   117c4:	bl	11174 <dcgettext@plt>
   117c8:	mov	r5, r0
   117cc:	ldr	r1, [sp, #4]
   117d0:	mov	r0, #4
   117d4:	bl	19094 <__assert_fail@plt+0x7c80>
   117d8:	mov	r3, r0
   117dc:	mov	r2, r5
   117e0:	mov	r1, r4
   117e4:	mov	r0, #0
   117e8:	bl	1121c <error@plt>
   117ec:	mov	r0, #1
   117f0:	b	117a4 <__assert_fail@plt+0x390>
   117f4:	sub	r1, r8, r0
   117f8:	bl	11674 <__assert_fail@plt+0x260>
   117fc:	mov	r0, #0
   11800:	b	117a4 <__assert_fail@plt+0x390>
   11804:	mvn	r0, #0
   11808:	b	117a4 <__assert_fail@plt+0x390>
   1180c:	ldrdeq	sp, [r2], -r0
   11810:	andeq	fp, r1, r0, lsr r6
   11814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11818:	sub	sp, sp, #8192	; 0x2000
   1181c:	sub	sp, sp, #12
   11820:	mov	fp, r0
   11824:	str	r1, [sp, #4]
   11828:	str	r2, [sp]
   1182c:	add	r3, sp, #8192	; 0x2000
   11830:	add	r3, r3, #48	; 0x30
   11834:	ldrd	r6, [r3]
   11838:	mov	r4, r6
   1183c:	mov	r5, r7
   11840:	mov	r8, #0
   11844:	mov	r9, #0
   11848:	b	118b4 <__assert_fail@plt+0x4a0>
   1184c:	bl	112dc <__errno_location@plt>
   11850:	ldr	r4, [r0]
   11854:	cmp	r4, #11
   11858:	bne	11870 <__assert_fail@plt+0x45c>
   1185c:	mov	r0, r8
   11860:	mov	r1, r9
   11864:	add	sp, sp, #8192	; 0x2000
   11868:	add	sp, sp, #12
   1186c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11870:	mov	r2, #5
   11874:	ldr	r1, [pc, #208]	; 1194c <__assert_fail@plt+0x538>
   11878:	mov	r0, #0
   1187c:	bl	11174 <dcgettext@plt>
   11880:	mov	r5, r0
   11884:	ldr	r1, [sp, #4]
   11888:	mov	r0, #4
   1188c:	bl	19094 <__assert_fail@plt+0x7c80>
   11890:	mov	r3, r0
   11894:	mov	r2, r5
   11898:	mov	r1, r4
   1189c:	mov	r0, #1
   118a0:	bl	1121c <error@plt>
   118a4:	ldr	r0, [sp, #4]
   118a8:	bl	11574 <__assert_fail@plt+0x160>
   118ac:	b	118ec <__assert_fail@plt+0x4d8>
   118b0:	mov	fp, #0
   118b4:	mov	r2, r4
   118b8:	cmp	r5, #0
   118bc:	cmpeq	r4, #8192	; 0x2000
   118c0:	movhi	r2, #8192	; 0x2000
   118c4:	add	r1, sp, #8
   118c8:	ldr	r0, [sp]
   118cc:	bl	192dc <__assert_fail@plt+0x7ec8>
   118d0:	mov	sl, r0
   118d4:	cmn	r0, #1
   118d8:	beq	1184c <__assert_fail@plt+0x438>
   118dc:	cmp	r0, #0
   118e0:	beq	1185c <__assert_fail@plt+0x448>
   118e4:	cmp	fp, #0
   118e8:	bne	118a4 <__assert_fail@plt+0x490>
   118ec:	mov	r1, sl
   118f0:	add	r0, sp, #8
   118f4:	bl	11674 <__assert_fail@plt+0x260>
   118f8:	mov	fp, #0
   118fc:	adds	r8, r8, sl
   11900:	adc	r9, r9, fp
   11904:	mvn	r2, #0
   11908:	mvn	r3, #0
   1190c:	cmp	r7, r3
   11910:	cmpeq	r6, r2
   11914:	beq	118b0 <__assert_fail@plt+0x49c>
   11918:	subs	r4, r4, sl
   1191c:	sbc	r5, r5, fp
   11920:	orrs	r3, r4, r5
   11924:	moveq	r3, #1
   11928:	movne	r3, #0
   1192c:	mvn	r0, #1
   11930:	mvn	r1, #0
   11934:	cmp	r7, r1
   11938:	cmpeq	r6, r0
   1193c:	orreq	r3, r3, #1
   11940:	cmp	r3, #0
   11944:	beq	118b0 <__assert_fail@plt+0x49c>
   11948:	b	1185c <__assert_fail@plt+0x448>
   1194c:	andeq	fp, r1, r0, lsr r6
   11950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11954:	sub	sp, sp, #8192	; 0x2000
   11958:	sub	sp, sp, #4
   1195c:	mov	r4, r2
   11960:	mov	r5, r3
   11964:	add	r3, sp, #8192	; 0x2000
   11968:	add	r3, r3, #40	; 0x28
   1196c:	ldr	r6, [r3]
   11970:	orrs	r3, r4, r5
   11974:	beq	11a34 <__assert_fail@plt+0x620>
   11978:	mov	r9, r0
   1197c:	mov	r7, r1
   11980:	mov	r8, #8192	; 0x2000
   11984:	mov	r2, r8
   11988:	mov	r1, sp
   1198c:	mov	r0, r7
   11990:	bl	192dc <__assert_fail@plt+0x7ec8>
   11994:	cmp	r0, #0
   11998:	beq	11a3c <__assert_fail@plt+0x628>
   1199c:	cmn	r0, #1
   119a0:	beq	119dc <__assert_fail@plt+0x5c8>
   119a4:	mov	fp, #0
   119a8:	ldrd	r2, [r6]
   119ac:	adds	r2, r2, r0
   119b0:	adc	r3, r3, fp
   119b4:	strd	r2, [r6]
   119b8:	cmp	fp, r5
   119bc:	cmpeq	r0, r4
   119c0:	bhi	11a20 <__assert_fail@plt+0x60c>
   119c4:	subs	r4, r4, r0
   119c8:	sbc	r5, r5, fp
   119cc:	orrs	r3, r4, r5
   119d0:	bne	11984 <__assert_fail@plt+0x570>
   119d4:	mov	r0, #0
   119d8:	b	11a40 <__assert_fail@plt+0x62c>
   119dc:	bl	112dc <__errno_location@plt>
   119e0:	ldr	r4, [r0]
   119e4:	mov	r2, #5
   119e8:	ldr	r1, [pc, #92]	; 11a4c <__assert_fail@plt+0x638>
   119ec:	mov	r0, #0
   119f0:	bl	11174 <dcgettext@plt>
   119f4:	mov	r5, r0
   119f8:	mov	r1, r9
   119fc:	mov	r0, #4
   11a00:	bl	19094 <__assert_fail@plt+0x7c80>
   11a04:	mov	r3, r0
   11a08:	mov	r2, r5
   11a0c:	mov	r1, r4
   11a10:	mov	r0, #0
   11a14:	bl	1121c <error@plt>
   11a18:	mov	r0, #1
   11a1c:	b	11a40 <__assert_fail@plt+0x62c>
   11a20:	sub	r1, r0, r4
   11a24:	add	r0, sp, r4
   11a28:	bl	11674 <__assert_fail@plt+0x260>
   11a2c:	mov	r0, #0
   11a30:	b	11a40 <__assert_fail@plt+0x62c>
   11a34:	mov	r0, #0
   11a38:	b	11a40 <__assert_fail@plt+0x62c>
   11a3c:	mvn	r0, #0
   11a40:	add	sp, sp, #8192	; 0x2000
   11a44:	add	sp, sp, #4
   11a48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a4c:	andeq	fp, r1, r0, lsr r6
   11a50:	push	{r4, r5, r6, r7, lr}
   11a54:	sub	sp, sp, #36	; 0x24
   11a58:	mov	r6, r2
   11a5c:	mov	r7, r3
   11a60:	ldr	r4, [sp, #56]	; 0x38
   11a64:	str	r4, [sp]
   11a68:	bl	111ec <lseek64@plt>
   11a6c:	cmp	r0, #0
   11a70:	sbcs	r3, r1, #0
   11a74:	blt	11a80 <__assert_fail@plt+0x66c>
   11a78:	add	sp, sp, #36	; 0x24
   11a7c:	pop	{r4, r5, r6, r7, pc}
   11a80:	add	r2, sp, #8
   11a84:	mov	r0, r6
   11a88:	mov	r1, r7
   11a8c:	bl	17640 <__assert_fail@plt+0x622c>
   11a90:	mov	r5, r0
   11a94:	cmp	r4, #1
   11a98:	beq	11afc <__assert_fail@plt+0x6e8>
   11a9c:	cmp	r4, #2
   11aa0:	beq	11b44 <__assert_fail@plt+0x730>
   11aa4:	cmp	r4, #0
   11aa8:	beq	11ab0 <__assert_fail@plt+0x69c>
   11aac:	bl	113f0 <abort@plt>
   11ab0:	bl	112dc <__errno_location@plt>
   11ab4:	ldr	r4, [r0]
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #200]	; 11b8c <__assert_fail@plt+0x778>
   11ac0:	mov	r0, #0
   11ac4:	bl	11174 <dcgettext@plt>
   11ac8:	mov	r6, r0
   11acc:	ldr	r2, [sp, #60]	; 0x3c
   11ad0:	mov	r1, #3
   11ad4:	mov	r0, #0
   11ad8:	bl	19160 <__assert_fail@plt+0x7d4c>
   11adc:	str	r5, [sp]
   11ae0:	mov	r3, r0
   11ae4:	mov	r2, r6
   11ae8:	mov	r1, r4
   11aec:	mov	r0, #0
   11af0:	bl	1121c <error@plt>
   11af4:	mov	r0, #1
   11af8:	bl	11294 <exit@plt>
   11afc:	bl	112dc <__errno_location@plt>
   11b00:	ldr	r4, [r0]
   11b04:	mov	r2, #5
   11b08:	ldr	r1, [pc, #128]	; 11b90 <__assert_fail@plt+0x77c>
   11b0c:	mov	r0, #0
   11b10:	bl	11174 <dcgettext@plt>
   11b14:	mov	r6, r0
   11b18:	ldr	r2, [sp, #60]	; 0x3c
   11b1c:	mov	r1, #3
   11b20:	mov	r0, #0
   11b24:	bl	19160 <__assert_fail@plt+0x7d4c>
   11b28:	str	r5, [sp]
   11b2c:	mov	r3, r0
   11b30:	mov	r2, r6
   11b34:	mov	r1, r4
   11b38:	mov	r0, #0
   11b3c:	bl	1121c <error@plt>
   11b40:	b	11af4 <__assert_fail@plt+0x6e0>
   11b44:	bl	112dc <__errno_location@plt>
   11b48:	ldr	r4, [r0]
   11b4c:	mov	r2, #5
   11b50:	ldr	r1, [pc, #60]	; 11b94 <__assert_fail@plt+0x780>
   11b54:	mov	r0, #0
   11b58:	bl	11174 <dcgettext@plt>
   11b5c:	mov	r6, r0
   11b60:	ldr	r2, [sp, #60]	; 0x3c
   11b64:	mov	r1, #3
   11b68:	mov	r0, #0
   11b6c:	bl	19160 <__assert_fail@plt+0x7d4c>
   11b70:	str	r5, [sp]
   11b74:	mov	r3, r0
   11b78:	mov	r2, r6
   11b7c:	mov	r1, r4
   11b80:	mov	r0, #0
   11b84:	bl	1121c <error@plt>
   11b88:	b	11af4 <__assert_fail@plt+0x6e0>
   11b8c:	andeq	fp, r1, r4, asr #12
   11b90:	andeq	fp, r1, r4, ror #12
   11b94:	andeq	fp, r1, ip, lsl #13
   11b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b9c:	sub	sp, sp, #8192	; 0x2000
   11ba0:	sub	sp, sp, #20
   11ba4:	str	r0, [sp, #8]
   11ba8:	str	r1, [sp, #12]
   11bac:	mov	r4, r2
   11bb0:	mov	r5, r3
   11bb4:	orrs	r3, r4, r5
   11bb8:	moveq	r0, #1
   11bbc:	beq	11e2c <__assert_fail@plt+0xa18>
   11bc0:	mov	lr, r0
   11bc4:	mov	ip, r1
   11bc8:	add	r3, sp, #8256	; 0x2040
   11bcc:	add	r1, sp, #8192	; 0x2000
   11bd0:	add	r1, r1, #56	; 0x38
   11bd4:	ldrd	r2, [r3]
   11bd8:	ldrd	r0, [r1]
   11bdc:	subs	r2, r2, r0
   11be0:	sbc	r3, r3, r1
   11be4:	asr	r0, r3, #31
   11be8:	eor	r2, r2, r0
   11bec:	subs	r2, r2, r0
   11bf0:	ldr	r8, [pc, #748]	; 11ee4 <__assert_fail@plt+0xad0>
   11bf4:	and	r8, r8, r2
   11bf8:	eor	r8, r8, r0
   11bfc:	subs	r8, r8, r0
   11c00:	cmp	r8, #0
   11c04:	moveq	r8, #8192	; 0x2000
   11c08:	add	r3, sp, #8256	; 0x2040
   11c0c:	ldrd	r6, [r3]
   11c10:	subs	r6, r6, r8
   11c14:	sbc	r7, r7, #0
   11c18:	str	lr, [sp, #4]
   11c1c:	mov	r3, #0
   11c20:	str	r3, [sp]
   11c24:	mov	r2, r6
   11c28:	mov	r3, r7
   11c2c:	mov	r9, ip
   11c30:	mov	r0, ip
   11c34:	bl	11a50 <__assert_fail@plt+0x63c>
   11c38:	mov	r2, r8
   11c3c:	add	r1, sp, #16
   11c40:	mov	r0, r9
   11c44:	bl	192dc <__assert_fail@plt+0x7ec8>
   11c48:	mov	sl, r0
   11c4c:	cmn	r0, #1
   11c50:	beq	11ca4 <__assert_fail@plt+0x890>
   11c54:	adds	r2, r6, r0
   11c58:	adc	r3, r7, #0
   11c5c:	add	r1, sp, #8256	; 0x2040
   11c60:	add	r1, r1, #8
   11c64:	ldr	r1, [r1]
   11c68:	strd	r2, [r1]
   11c6c:	cmp	r0, #0
   11c70:	beq	11c98 <__assert_fail@plt+0x884>
   11c74:	add	r3, sp, #16
   11c78:	add	r3, r3, r0
   11c7c:	ldrb	r2, [r3, #-1]
   11c80:	ldr	r3, [pc, #608]	; 11ee8 <__assert_fail@plt+0xad4>
   11c84:	ldrb	r3, [r3]
   11c88:	cmp	r2, r3
   11c8c:	beq	11c98 <__assert_fail@plt+0x884>
   11c90:	subs	r4, r4, #1
   11c94:	sbc	r5, r5, #0
   11c98:	ldr	fp, [pc, #584]	; 11ee8 <__assert_fail@plt+0xad4>
   11c9c:	add	r8, sp, #16
   11ca0:	b	11da8 <__assert_fail@plt+0x994>
   11ca4:	bl	112dc <__errno_location@plt>
   11ca8:	ldr	r4, [r0]
   11cac:	mov	r2, #5
   11cb0:	ldr	r1, [pc, #564]	; 11eec <__assert_fail@plt+0xad8>
   11cb4:	mov	r0, #0
   11cb8:	bl	11174 <dcgettext@plt>
   11cbc:	mov	r5, r0
   11cc0:	ldr	r1, [sp, #8]
   11cc4:	mov	r0, #4
   11cc8:	bl	19094 <__assert_fail@plt+0x7c80>
   11ccc:	mov	r3, r0
   11cd0:	mov	r2, r5
   11cd4:	mov	r1, r4
   11cd8:	mov	r0, #0
   11cdc:	bl	1121c <error@plt>
   11ce0:	mov	r0, #0
   11ce4:	b	11e2c <__assert_fail@plt+0xa18>
   11ce8:	mov	r4, r0
   11cec:	mov	r5, r1
   11cf0:	mov	r1, r9
   11cf4:	mov	r0, r8
   11cf8:	bl	112c4 <memrchr@plt>
   11cfc:	subs	r3, r0, #0
   11d00:	beq	11d28 <__assert_fail@plt+0x914>
   11d04:	sub	r2, r3, r8
   11d08:	subs	r0, r4, #1
   11d0c:	sbc	r1, r5, #0
   11d10:	orrs	ip, r4, r5
   11d14:	beq	11dbc <__assert_fail@plt+0x9a8>
   11d18:	cmp	r2, #0
   11d1c:	bne	11ce8 <__assert_fail@plt+0x8d4>
   11d20:	mov	r4, r0
   11d24:	mov	r5, r1
   11d28:	add	r3, sp, #8192	; 0x2000
   11d2c:	add	r3, r3, #56	; 0x38
   11d30:	ldrd	r2, [r3]
   11d34:	cmp	r7, r3
   11d38:	cmpeq	r6, r2
   11d3c:	beq	11e38 <__assert_fail@plt+0xa24>
   11d40:	subs	r6, r6, #8192	; 0x2000
   11d44:	sbc	r7, r7, #0
   11d48:	ldr	r3, [sp, #8]
   11d4c:	str	r3, [sp, #4]
   11d50:	mov	r3, #0
   11d54:	str	r3, [sp]
   11d58:	mov	r2, r6
   11d5c:	mov	r3, r7
   11d60:	ldr	r9, [sp, #12]
   11d64:	mov	r0, r9
   11d68:	bl	11a50 <__assert_fail@plt+0x63c>
   11d6c:	mov	r2, #8192	; 0x2000
   11d70:	mov	r1, r8
   11d74:	mov	r0, r9
   11d78:	bl	192dc <__assert_fail@plt+0x7ec8>
   11d7c:	mov	sl, r0
   11d80:	cmn	r0, #1
   11d84:	beq	11e98 <__assert_fail@plt+0xa84>
   11d88:	adds	r2, r6, r0
   11d8c:	adc	r3, r7, #0
   11d90:	add	r1, sp, #8256	; 0x2040
   11d94:	add	r1, r1, #8
   11d98:	ldr	r1, [r1]
   11d9c:	strd	r2, [r1]
   11da0:	cmp	r0, #0
   11da4:	beq	11edc <__assert_fail@plt+0xac8>
   11da8:	cmp	sl, #0
   11dac:	beq	11d28 <__assert_fail@plt+0x914>
   11db0:	ldrb	r9, [fp]
   11db4:	mov	r2, sl
   11db8:	b	11cf0 <__assert_fail@plt+0x8dc>
   11dbc:	sub	r1, sl, #1
   11dc0:	sub	r1, r1, r2
   11dc4:	add	r0, r3, #1
   11dc8:	bl	11674 <__assert_fail@plt+0x260>
   11dcc:	adds	r2, r6, sl
   11dd0:	adc	r3, r7, #0
   11dd4:	add	r1, sp, #8256	; 0x2040
   11dd8:	ldrd	r0, [r1]
   11ddc:	subs	r0, r0, r2
   11de0:	sbc	r1, r1, r3
   11de4:	mov	r2, r0
   11de8:	mov	r3, r1
   11dec:	strd	r2, [sp]
   11df0:	ldr	r2, [sp, #12]
   11df4:	ldr	r1, [sp, #8]
   11df8:	mov	r0, #0
   11dfc:	bl	11814 <__assert_fail@plt+0x400>
   11e00:	add	r3, sp, #8256	; 0x2040
   11e04:	add	r3, r3, #8
   11e08:	ldr	r3, [r3]
   11e0c:	ldrd	r2, [r3]
   11e10:	adds	r0, r0, r2
   11e14:	adc	r1, r1, r3
   11e18:	add	r3, sp, #8256	; 0x2040
   11e1c:	add	r3, r3, #8
   11e20:	ldr	r3, [r3]
   11e24:	strd	r0, [r3]
   11e28:	mov	r0, #1
   11e2c:	add	sp, sp, #8192	; 0x2000
   11e30:	add	sp, sp, #20
   11e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e38:	ldr	r5, [sp, #8]
   11e3c:	str	r5, [sp, #4]
   11e40:	mov	r4, #0
   11e44:	str	r4, [sp]
   11e48:	mov	r2, r6
   11e4c:	mov	r3, r7
   11e50:	ldr	r8, [sp, #12]
   11e54:	mov	r0, r8
   11e58:	bl	11a50 <__assert_fail@plt+0x63c>
   11e5c:	add	r3, sp, #8256	; 0x2040
   11e60:	ldrd	r0, [r3]
   11e64:	strd	r0, [sp]
   11e68:	mov	r2, r8
   11e6c:	mov	r1, r5
   11e70:	mov	r0, r4
   11e74:	bl	11814 <__assert_fail@plt+0x400>
   11e78:	adds	r0, r0, r6
   11e7c:	adc	r1, r1, r7
   11e80:	add	r3, sp, #8256	; 0x2040
   11e84:	add	r3, r3, #8
   11e88:	ldr	r3, [r3]
   11e8c:	strd	r0, [r3]
   11e90:	mov	r0, #1
   11e94:	b	11e2c <__assert_fail@plt+0xa18>
   11e98:	bl	112dc <__errno_location@plt>
   11e9c:	ldr	r4, [r0]
   11ea0:	mov	r2, #5
   11ea4:	ldr	r1, [pc, #64]	; 11eec <__assert_fail@plt+0xad8>
   11ea8:	mov	r0, #0
   11eac:	bl	11174 <dcgettext@plt>
   11eb0:	mov	r5, r0
   11eb4:	ldr	r1, [sp, #8]
   11eb8:	mov	r0, #4
   11ebc:	bl	19094 <__assert_fail@plt+0x7c80>
   11ec0:	mov	r3, r0
   11ec4:	mov	r2, r5
   11ec8:	mov	r1, r4
   11ecc:	mov	r0, #0
   11ed0:	bl	1121c <error@plt>
   11ed4:	mov	r0, #0
   11ed8:	b	11e2c <__assert_fail@plt+0xa18>
   11edc:	mov	r0, #1
   11ee0:	b	11e2c <__assert_fail@plt+0xa18>
   11ee4:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   11ee8:	ldrdeq	sp, [r2], -r0
   11eec:	andeq	fp, r1, r0, lsr r6
   11ef0:	push	{r4, r5, r6, lr}
   11ef4:	sub	sp, sp, #88	; 0x58
   11ef8:	mov	r5, r1
   11efc:	mov	r1, sp
   11f00:	bl	1109c <fstatfs64@plt>
   11f04:	cmp	r0, #0
   11f08:	beq	11f5c <__assert_fail@plt+0xb48>
   11f0c:	bl	112dc <__errno_location@plt>
   11f10:	ldr	r4, [r0]
   11f14:	cmp	r4, #38	; 0x26
   11f18:	moveq	r0, #1
   11f1c:	beq	12254 <__assert_fail@plt+0xe40>
   11f20:	mov	r2, #5
   11f24:	ldr	r1, [pc, #1524]	; 12520 <__assert_fail@plt+0x110c>
   11f28:	mov	r0, #0
   11f2c:	bl	11174 <dcgettext@plt>
   11f30:	mov	r6, r0
   11f34:	mov	r1, r5
   11f38:	mov	r0, #4
   11f3c:	bl	19094 <__assert_fail@plt+0x7c80>
   11f40:	mov	r3, r0
   11f44:	mov	r2, r6
   11f48:	mov	r1, r4
   11f4c:	mov	r0, #0
   11f50:	bl	1121c <error@plt>
   11f54:	mov	r0, #1
   11f58:	b	12254 <__assert_fail@plt+0xe40>
   11f5c:	ldr	r3, [sp]
   11f60:	ldr	r2, [pc, #1468]	; 12524 <__assert_fail@plt+0x1110>
   11f64:	cmp	r3, r2
   11f68:	beq	12060 <__assert_fail@plt+0xc4c>
   11f6c:	bls	11fcc <__assert_fail@plt+0xbb8>
   11f70:	ldr	r2, [pc, #1456]	; 12528 <__assert_fail@plt+0x1114>
   11f74:	cmp	r3, r2
   11f78:	beq	12060 <__assert_fail@plt+0xc4c>
   11f7c:	bls	12294 <__assert_fail@plt+0xe80>
   11f80:	ldr	r2, [pc, #1444]	; 1252c <__assert_fail@plt+0x1118>
   11f84:	cmp	r3, r2
   11f88:	beq	12060 <__assert_fail@plt+0xc4c>
   11f8c:	bhi	12474 <__assert_fail@plt+0x1060>
   11f90:	ldr	r2, [pc, #1432]	; 12530 <__assert_fail@plt+0x111c>
   11f94:	cmp	r3, r2
   11f98:	beq	12060 <__assert_fail@plt+0xc4c>
   11f9c:	bhi	1241c <__assert_fail@plt+0x1008>
   11fa0:	ldr	r2, [pc, #1420]	; 12534 <__assert_fail@plt+0x1120>
   11fa4:	cmp	r3, r2
   11fa8:	beq	12060 <__assert_fail@plt+0xc4c>
   11fac:	bhi	123fc <__assert_fail@plt+0xfe8>
   11fb0:	ldr	r2, [pc, #1408]	; 12538 <__assert_fail@plt+0x1124>
   11fb4:	cmp	r3, r2
   11fb8:	beq	12060 <__assert_fail@plt+0xc4c>
   11fbc:	add	r2, r2, #2
   11fc0:	cmp	r3, r2
   11fc4:	bne	12250 <__assert_fail@plt+0xe3c>
   11fc8:	b	12060 <__assert_fail@plt+0xc4c>
   11fcc:	ldr	r2, [pc, #1384]	; 1253c <__assert_fail@plt+0x1128>
   11fd0:	cmp	r3, r2
   11fd4:	bhi	12138 <__assert_fail@plt+0xd24>
   11fd8:	sub	r2, r2, #2
   11fdc:	cmp	r3, r2
   11fe0:	bcs	12060 <__assert_fail@plt+0xc4c>
   11fe4:	ldr	r2, [pc, #1364]	; 12540 <__assert_fail@plt+0x112c>
   11fe8:	cmp	r3, r2
   11fec:	beq	12060 <__assert_fail@plt+0xc4c>
   11ff0:	bls	1202c <__assert_fail@plt+0xc18>
   11ff4:	ldr	r2, [pc, #1352]	; 12544 <__assert_fail@plt+0x1130>
   11ff8:	cmp	r3, r2
   11ffc:	beq	12060 <__assert_fail@plt+0xc4c>
   12000:	bhi	120e4 <__assert_fail@plt+0xcd0>
   12004:	ldr	r2, [pc, #1340]	; 12548 <__assert_fail@plt+0x1134>
   12008:	cmp	r3, r2
   1200c:	beq	12060 <__assert_fail@plt+0xc4c>
   12010:	bhi	120c8 <__assert_fail@plt+0xcb4>
   12014:	cmp	r3, #16384	; 0x4000
   12018:	beq	12060 <__assert_fail@plt+0xc4c>
   1201c:	sub	r2, r2, #2
   12020:	cmp	r3, r2
   12024:	bne	12250 <__assert_fail@plt+0xe3c>
   12028:	b	12060 <__assert_fail@plt+0xc4c>
   1202c:	ldr	r2, [pc, #1304]	; 1254c <__assert_fail@plt+0x1138>
   12030:	cmp	r3, r2
   12034:	beq	12060 <__assert_fail@plt+0xc4c>
   12038:	bhi	12080 <__assert_fail@plt+0xc6c>
   1203c:	ldr	r2, [pc, #1292]	; 12550 <__assert_fail@plt+0x113c>
   12040:	cmp	r3, r2
   12044:	beq	12060 <__assert_fail@plt+0xc4c>
   12048:	cmp	r3, #392	; 0x188
   1204c:	bcs	12068 <__assert_fail@plt+0xc54>
   12050:	cmp	r3, #47	; 0x2f
   12054:	beq	12060 <__assert_fail@plt+0xc4c>
   12058:	cmp	r3, #51	; 0x33
   1205c:	bne	12250 <__assert_fail@plt+0xe3c>
   12060:	mov	r0, #0
   12064:	b	12254 <__assert_fail@plt+0xe40>
   12068:	cmp	r3, #1984	; 0x7c0
   1206c:	beq	12060 <__assert_fail@plt+0xc4c>
   12070:	ldr	r2, [pc, #1244]	; 12554 <__assert_fail@plt+0x1140>
   12074:	cmp	r3, r2
   12078:	bne	12250 <__assert_fail@plt+0xe3c>
   1207c:	b	12060 <__assert_fail@plt+0xc4c>
   12080:	ldr	r2, [pc, #1232]	; 12558 <__assert_fail@plt+0x1144>
   12084:	cmp	r3, r2
   12088:	beq	12060 <__assert_fail@plt+0xc4c>
   1208c:	bhi	120ac <__assert_fail@plt+0xc98>
   12090:	ldr	r2, [pc, #1220]	; 1255c <__assert_fail@plt+0x1148>
   12094:	cmp	r3, r2
   12098:	beq	12060 <__assert_fail@plt+0xc4c>
   1209c:	add	r2, r2, #16
   120a0:	cmp	r3, r2
   120a4:	bne	12250 <__assert_fail@plt+0xe3c>
   120a8:	b	12060 <__assert_fail@plt+0xc4c>
   120ac:	ldr	r2, [pc, #1196]	; 12560 <__assert_fail@plt+0x114c>
   120b0:	cmp	r3, r2
   120b4:	beq	12060 <__assert_fail@plt+0xc4c>
   120b8:	add	r2, r2, #16
   120bc:	cmp	r3, r2
   120c0:	bne	12250 <__assert_fail@plt+0xe3c>
   120c4:	b	12060 <__assert_fail@plt+0xc4c>
   120c8:	ldr	r2, [pc, #1172]	; 12564 <__assert_fail@plt+0x1150>
   120cc:	cmp	r3, r2
   120d0:	beq	12060 <__assert_fail@plt+0xc4c>
   120d4:	ldr	r2, [pc, #1164]	; 12568 <__assert_fail@plt+0x1154>
   120d8:	cmp	r3, r2
   120dc:	bne	12250 <__assert_fail@plt+0xe3c>
   120e0:	b	12060 <__assert_fail@plt+0xc4c>
   120e4:	ldr	r2, [pc, #1152]	; 1256c <__assert_fail@plt+0x1158>
   120e8:	cmp	r3, r2
   120ec:	beq	12060 <__assert_fail@plt+0xc4c>
   120f0:	bls	1211c <__assert_fail@plt+0xd08>
   120f4:	ldr	r2, [pc, #1140]	; 12570 <__assert_fail@plt+0x115c>
   120f8:	cmp	r3, r2
   120fc:	beq	12060 <__assert_fail@plt+0xc4c>
   12100:	ldr	r2, [pc, #1132]	; 12574 <__assert_fail@plt+0x1160>
   12104:	cmp	r3, r2
   12108:	beq	12060 <__assert_fail@plt+0xc4c>
   1210c:	ldr	r2, [pc, #1124]	; 12578 <__assert_fail@plt+0x1164>
   12110:	cmp	r3, r2
   12114:	bne	12250 <__assert_fail@plt+0xe3c>
   12118:	b	12060 <__assert_fail@plt+0xc4c>
   1211c:	ldr	r2, [pc, #1112]	; 1257c <__assert_fail@plt+0x1168>
   12120:	cmp	r3, r2
   12124:	beq	12060 <__assert_fail@plt+0xc4c>
   12128:	add	r2, r2, #22
   1212c:	cmp	r3, r2
   12130:	bne	12250 <__assert_fail@plt+0xe3c>
   12134:	b	12060 <__assert_fail@plt+0xc4c>
   12138:	ldr	r2, [pc, #1088]	; 12580 <__assert_fail@plt+0x116c>
   1213c:	cmp	r3, r2
   12140:	beq	12060 <__assert_fail@plt+0xc4c>
   12144:	bhi	121e8 <__assert_fail@plt+0xdd4>
   12148:	ldr	r2, [pc, #1076]	; 12584 <__assert_fail@plt+0x1170>
   1214c:	cmp	r3, r2
   12150:	beq	12060 <__assert_fail@plt+0xc4c>
   12154:	bhi	121a0 <__assert_fail@plt+0xd8c>
   12158:	ldr	r2, [pc, #1064]	; 12588 <__assert_fail@plt+0x1174>
   1215c:	cmp	r3, r2
   12160:	beq	12060 <__assert_fail@plt+0xc4c>
   12164:	bhi	12184 <__assert_fail@plt+0xd70>
   12168:	ldr	r2, [pc, #1052]	; 1258c <__assert_fail@plt+0x1178>
   1216c:	cmp	r3, r2
   12170:	beq	12060 <__assert_fail@plt+0xc4c>
   12174:	add	r2, r2, #10
   12178:	cmp	r3, r2
   1217c:	bne	12250 <__assert_fail@plt+0xe3c>
   12180:	b	12060 <__assert_fail@plt+0xc4c>
   12184:	ldr	r2, [pc, #1028]	; 12590 <__assert_fail@plt+0x117c>
   12188:	cmp	r3, r2
   1218c:	beq	12060 <__assert_fail@plt+0xc4c>
   12190:	add	r2, r2, #524	; 0x20c
   12194:	cmp	r3, r2
   12198:	bne	12250 <__assert_fail@plt+0xe3c>
   1219c:	b	12060 <__assert_fail@plt+0xc4c>
   121a0:	ldr	r2, [pc, #1004]	; 12594 <__assert_fail@plt+0x1180>
   121a4:	cmp	r3, r2
   121a8:	beq	12060 <__assert_fail@plt+0xc4c>
   121ac:	bhi	121cc <__assert_fail@plt+0xdb8>
   121b0:	ldr	r2, [pc, #992]	; 12598 <__assert_fail@plt+0x1184>
   121b4:	cmp	r3, r2
   121b8:	beq	12060 <__assert_fail@plt+0xc4c>
   121bc:	ldr	r2, [pc, #984]	; 1259c <__assert_fail@plt+0x1188>
   121c0:	cmp	r3, r2
   121c4:	bne	12250 <__assert_fail@plt+0xe3c>
   121c8:	b	12060 <__assert_fail@plt+0xc4c>
   121cc:	ldr	r2, [pc, #972]	; 125a0 <__assert_fail@plt+0x118c>
   121d0:	cmp	r3, r2
   121d4:	beq	12060 <__assert_fail@plt+0xc4c>
   121d8:	add	r2, r2, #3
   121dc:	cmp	r3, r2
   121e0:	bne	12250 <__assert_fail@plt+0xe3c>
   121e4:	b	12060 <__assert_fail@plt+0xc4c>
   121e8:	ldr	r2, [pc, #948]	; 125a4 <__assert_fail@plt+0x1190>
   121ec:	cmp	r3, r2
   121f0:	beq	12060 <__assert_fail@plt+0xc4c>
   121f4:	bls	12230 <__assert_fail@plt+0xe1c>
   121f8:	ldr	r2, [pc, #936]	; 125a8 <__assert_fail@plt+0x1194>
   121fc:	cmp	r3, r2
   12200:	beq	12060 <__assert_fail@plt+0xc4c>
   12204:	bls	12278 <__assert_fail@plt+0xe64>
   12208:	ldr	r2, [pc, #924]	; 125ac <__assert_fail@plt+0x1198>
   1220c:	cmp	r3, r2
   12210:	beq	12060 <__assert_fail@plt+0xc4c>
   12214:	ldr	r2, [pc, #916]	; 125b0 <__assert_fail@plt+0x119c>
   12218:	cmp	r3, r2
   1221c:	beq	12060 <__assert_fail@plt+0xc4c>
   12220:	ldr	r2, [pc, #908]	; 125b4 <__assert_fail@plt+0x11a0>
   12224:	cmp	r3, r2
   12228:	bne	12250 <__assert_fail@plt+0xe3c>
   1222c:	b	12060 <__assert_fail@plt+0xc4c>
   12230:	ldr	r2, [pc, #896]	; 125b8 <__assert_fail@plt+0x11a4>
   12234:	cmp	r3, r2
   12238:	beq	12060 <__assert_fail@plt+0xc4c>
   1223c:	bhi	1225c <__assert_fail@plt+0xe48>
   12240:	ldr	r2, [pc, #884]	; 125bc <__assert_fail@plt+0x11a8>
   12244:	add	r2, r3, r2
   12248:	cmp	r2, #3
   1224c:	bls	12060 <__assert_fail@plt+0xc4c>
   12250:	mov	r0, #1
   12254:	add	sp, sp, #88	; 0x58
   12258:	pop	{r4, r5, r6, pc}
   1225c:	ldr	r2, [pc, #860]	; 125c0 <__assert_fail@plt+0x11ac>
   12260:	cmp	r3, r2
   12264:	beq	12060 <__assert_fail@plt+0xc4c>
   12268:	ldr	r2, [pc, #852]	; 125c4 <__assert_fail@plt+0x11b0>
   1226c:	cmp	r3, r2
   12270:	bne	12250 <__assert_fail@plt+0xe3c>
   12274:	b	12060 <__assert_fail@plt+0xc4c>
   12278:	ldr	r2, [pc, #840]	; 125c8 <__assert_fail@plt+0x11b4>
   1227c:	cmp	r3, r2
   12280:	beq	12060 <__assert_fail@plt+0xc4c>
   12284:	ldr	r2, [pc, #832]	; 125cc <__assert_fail@plt+0x11b8>
   12288:	cmp	r3, r2
   1228c:	bne	12250 <__assert_fail@plt+0xe3c>
   12290:	b	12060 <__assert_fail@plt+0xc4c>
   12294:	ldr	r2, [pc, #820]	; 125d0 <__assert_fail@plt+0x11bc>
   12298:	cmp	r3, r2
   1229c:	beq	12060 <__assert_fail@plt+0xc4c>
   122a0:	bls	122e8 <__assert_fail@plt+0xed4>
   122a4:	ldr	r2, [pc, #808]	; 125d4 <__assert_fail@plt+0x11c0>
   122a8:	cmp	r3, r2
   122ac:	beq	12060 <__assert_fail@plt+0xc4c>
   122b0:	bhi	123a8 <__assert_fail@plt+0xf94>
   122b4:	ldr	r2, [pc, #796]	; 125d8 <__assert_fail@plt+0x11c4>
   122b8:	cmp	r3, r2
   122bc:	beq	12060 <__assert_fail@plt+0xc4c>
   122c0:	bhi	1238c <__assert_fail@plt+0xf78>
   122c4:	sub	r2, r2, #8960	; 0x2300
   122c8:	sub	r2, r2, #1
   122cc:	cmp	r3, r2
   122d0:	beq	12060 <__assert_fail@plt+0xc4c>
   122d4:	add	r2, r2, #5824	; 0x16c0
   122d8:	add	r2, r2, #57	; 0x39
   122dc:	cmp	r3, r2
   122e0:	bne	12250 <__assert_fail@plt+0xe3c>
   122e4:	b	12060 <__assert_fail@plt+0xc4c>
   122e8:	ldr	r2, [pc, #748]	; 125dc <__assert_fail@plt+0x11c8>
   122ec:	cmp	r3, r2
   122f0:	beq	12060 <__assert_fail@plt+0xc4c>
   122f4:	bhi	12344 <__assert_fail@plt+0xf30>
   122f8:	ldr	r2, [pc, #736]	; 125e0 <__assert_fail@plt+0x11cc>
   122fc:	cmp	r3, r2
   12300:	beq	12060 <__assert_fail@plt+0xc4c>
   12304:	bhi	12324 <__assert_fail@plt+0xf10>
   12308:	ldr	r2, [pc, #724]	; 125e4 <__assert_fail@plt+0x11d0>
   1230c:	cmp	r3, r2
   12310:	beq	12060 <__assert_fail@plt+0xc4c>
   12314:	ldr	r2, [pc, #716]	; 125e8 <__assert_fail@plt+0x11d4>
   12318:	cmp	r3, r2
   1231c:	bne	12250 <__assert_fail@plt+0xe3c>
   12320:	b	12060 <__assert_fail@plt+0xc4c>
   12324:	ldr	r2, [pc, #704]	; 125ec <__assert_fail@plt+0x11d8>
   12328:	cmp	r3, r2
   1232c:	beq	12060 <__assert_fail@plt+0xc4c>
   12330:	add	r2, r2, #194560	; 0x2f800
   12334:	add	r2, r2, #796	; 0x31c
   12338:	cmp	r3, r2
   1233c:	bne	12250 <__assert_fail@plt+0xe3c>
   12340:	b	12060 <__assert_fail@plt+0xc4c>
   12344:	ldr	r2, [pc, #676]	; 125f0 <__assert_fail@plt+0x11dc>
   12348:	cmp	r3, r2
   1234c:	beq	12060 <__assert_fail@plt+0xc4c>
   12350:	bhi	12370 <__assert_fail@plt+0xf5c>
   12354:	ldr	r2, [pc, #664]	; 125f4 <__assert_fail@plt+0x11e0>
   12358:	cmp	r3, r2
   1235c:	beq	12060 <__assert_fail@plt+0xc4c>
   12360:	ldr	r2, [pc, #656]	; 125f8 <__assert_fail@plt+0x11e4>
   12364:	cmp	r3, r2
   12368:	bne	12250 <__assert_fail@plt+0xe3c>
   1236c:	b	12060 <__assert_fail@plt+0xc4c>
   12370:	ldr	r2, [pc, #644]	; 125fc <__assert_fail@plt+0x11e8>
   12374:	cmp	r3, r2
   12378:	beq	12060 <__assert_fail@plt+0xc4c>
   1237c:	ldr	r2, [pc, #636]	; 12600 <__assert_fail@plt+0x11ec>
   12380:	cmp	r3, r2
   12384:	bne	12250 <__assert_fail@plt+0xe3c>
   12388:	b	12060 <__assert_fail@plt+0xc4c>
   1238c:	ldr	r2, [pc, #624]	; 12604 <__assert_fail@plt+0x11f0>
   12390:	cmp	r3, r2
   12394:	beq	12060 <__assert_fail@plt+0xc4c>
   12398:	ldr	r2, [pc, #616]	; 12608 <__assert_fail@plt+0x11f4>
   1239c:	cmp	r3, r2
   123a0:	bne	12250 <__assert_fail@plt+0xe3c>
   123a4:	b	12060 <__assert_fail@plt+0xc4c>
   123a8:	ldr	r2, [pc, #604]	; 1260c <__assert_fail@plt+0x11f8>
   123ac:	cmp	r3, r2
   123b0:	beq	12060 <__assert_fail@plt+0xc4c>
   123b4:	bls	123e0 <__assert_fail@plt+0xfcc>
   123b8:	ldr	r2, [pc, #592]	; 12610 <__assert_fail@plt+0x11fc>
   123bc:	cmp	r3, r2
   123c0:	beq	12060 <__assert_fail@plt+0xc4c>
   123c4:	ldr	r2, [pc, #584]	; 12614 <__assert_fail@plt+0x1200>
   123c8:	cmp	r3, r2
   123cc:	beq	12060 <__assert_fail@plt+0xc4c>
   123d0:	ldr	r2, [pc, #576]	; 12618 <__assert_fail@plt+0x1204>
   123d4:	cmp	r3, r2
   123d8:	bne	12250 <__assert_fail@plt+0xe3c>
   123dc:	b	12060 <__assert_fail@plt+0xc4c>
   123e0:	ldr	r2, [pc, #564]	; 1261c <__assert_fail@plt+0x1208>
   123e4:	cmp	r3, r2
   123e8:	beq	12060 <__assert_fail@plt+0xc4c>
   123ec:	ldr	r2, [pc, #556]	; 12620 <__assert_fail@plt+0x120c>
   123f0:	cmp	r3, r2
   123f4:	bne	12250 <__assert_fail@plt+0xe3c>
   123f8:	b	12060 <__assert_fail@plt+0xc4c>
   123fc:	ldr	r2, [pc, #544]	; 12624 <__assert_fail@plt+0x1210>
   12400:	cmp	r3, r2
   12404:	beq	12060 <__assert_fail@plt+0xc4c>
   12408:	add	r2, r2, #129024	; 0x1f800
   1240c:	add	r2, r2, #600	; 0x258
   12410:	cmp	r3, r2
   12414:	bne	12250 <__assert_fail@plt+0xe3c>
   12418:	b	12060 <__assert_fail@plt+0xc4c>
   1241c:	ldr	r2, [pc, #516]	; 12628 <__assert_fail@plt+0x1214>
   12420:	cmp	r3, r2
   12424:	beq	12060 <__assert_fail@plt+0xc4c>
   12428:	bls	12458 <__assert_fail@plt+0x1044>
   1242c:	ldr	r2, [pc, #504]	; 1262c <__assert_fail@plt+0x1218>
   12430:	cmp	r3, r2
   12434:	beq	12060 <__assert_fail@plt+0xc4c>
   12438:	add	r2, r2, #65280	; 0xff00
   1243c:	add	r2, r2, #17
   12440:	cmp	r3, r2
   12444:	beq	12060 <__assert_fail@plt+0xc4c>
   12448:	ldr	r2, [pc, #480]	; 12630 <__assert_fail@plt+0x121c>
   1244c:	cmp	r3, r2
   12450:	bne	12250 <__assert_fail@plt+0xe3c>
   12454:	b	12060 <__assert_fail@plt+0xc4c>
   12458:	ldr	r2, [pc, #468]	; 12634 <__assert_fail@plt+0x1220>
   1245c:	cmp	r3, r2
   12460:	beq	12060 <__assert_fail@plt+0xc4c>
   12464:	ldr	r2, [pc, #460]	; 12638 <__assert_fail@plt+0x1224>
   12468:	cmp	r3, r2
   1246c:	bne	12250 <__assert_fail@plt+0xe3c>
   12470:	b	12060 <__assert_fail@plt+0xc4c>
   12474:	ldr	r2, [pc, #448]	; 1263c <__assert_fail@plt+0x1228>
   12478:	cmp	r3, r2
   1247c:	beq	12060 <__assert_fail@plt+0xc4c>
   12480:	bhi	124cc <__assert_fail@plt+0x10b8>
   12484:	ldr	r2, [pc, #436]	; 12640 <__assert_fail@plt+0x122c>
   12488:	cmp	r3, r2
   1248c:	beq	12060 <__assert_fail@plt+0xc4c>
   12490:	bhi	124b0 <__assert_fail@plt+0x109c>
   12494:	add	r2, r2, #-268435456	; 0xf0000000
   12498:	cmp	r3, r2
   1249c:	beq	12060 <__assert_fail@plt+0xc4c>
   124a0:	ldr	r2, [pc, #412]	; 12644 <__assert_fail@plt+0x1230>
   124a4:	cmp	r3, r2
   124a8:	bne	12250 <__assert_fail@plt+0xe3c>
   124ac:	b	12060 <__assert_fail@plt+0xc4c>
   124b0:	ldr	r2, [pc, #400]	; 12648 <__assert_fail@plt+0x1234>
   124b4:	cmp	r3, r2
   124b8:	beq	12060 <__assert_fail@plt+0xc4c>
   124bc:	ldr	r2, [pc, #392]	; 1264c <__assert_fail@plt+0x1238>
   124c0:	cmp	r3, r2
   124c4:	bne	12250 <__assert_fail@plt+0xe3c>
   124c8:	b	12060 <__assert_fail@plt+0xc4c>
   124cc:	ldr	r2, [pc, #380]	; 12650 <__assert_fail@plt+0x123c>
   124d0:	cmp	r3, r2
   124d4:	beq	12060 <__assert_fail@plt+0xc4c>
   124d8:	bls	12504 <__assert_fail@plt+0x10f0>
   124dc:	ldr	r2, [pc, #368]	; 12654 <__assert_fail@plt+0x1240>
   124e0:	cmp	r3, r2
   124e4:	beq	12060 <__assert_fail@plt+0xc4c>
   124e8:	ldr	r2, [pc, #360]	; 12658 <__assert_fail@plt+0x1244>
   124ec:	cmp	r3, r2
   124f0:	beq	12060 <__assert_fail@plt+0xc4c>
   124f4:	ldr	r2, [pc, #352]	; 1265c <__assert_fail@plt+0x1248>
   124f8:	cmp	r3, r2
   124fc:	bne	12250 <__assert_fail@plt+0xe3c>
   12500:	b	12060 <__assert_fail@plt+0xc4c>
   12504:	ldr	r2, [pc, #340]	; 12660 <__assert_fail@plt+0x124c>
   12508:	cmp	r3, r2
   1250c:	beq	12060 <__assert_fail@plt+0xc4c>
   12510:	ldr	r2, [pc, #332]	; 12664 <__assert_fail@plt+0x1250>
   12514:	cmp	r3, r2
   12518:	bne	12250 <__assert_fail@plt+0xe3c>
   1251c:	b	12060 <__assert_fail@plt+0xc4c>
   12520:			; <UNDEFINED> instruction: 0x0001b6b8
   12524:	stmiacs	sp, {r0, r2, r6, r8, sl, fp, ip, sp}^
   12528:	rsbvs	r6, r4, #494927872	; 0x1d800000
   1252c:	ldrbtvc	r6, [r2], #-355	; 0xfffffe9d
   12530:	ldrbvs	r6, [r9, -r9, ror #18]
   12534:	cmnvs	r7, #112, 4
   12538:	rsbvs	r6, r5, #112, 10	; 0x1c000000
   1253c:	andeq	r9, r0, r2, lsr #31
   12540:	andeq	r3, r0, r4, lsr r4
   12544:	andeq	r4, r0, r8, asr r8
   12548:	andeq	r4, r0, r6
   1254c:	andeq	r1, r0, sp, ror r3
   12550:	andeq	r0, r0, r7, lsl #3
   12554:	andeq	r1, r0, r3, ror r3
   12558:	ldrdeq	r1, [r0], -r1	; <UNPREDICTABLE>
   1255c:	andeq	r1, r0, pc, ror r3
   12560:	andeq	r2, r0, r8, ror #8
   12564:	andeq	r4, r0, r4, asr #4
   12568:	andeq	r4, r0, fp, lsr #16
   1256c:	strdeq	r5, [r0], -r5	; <UNPREDICTABLE>
   12570:			; <UNDEFINED> instruction: 0x000072b6
   12574:	andeq	r9, r0, r0, ror #12
   12578:	andeq	r7, r0, r5, ror r2
   1257c:	andeq	r4, r0, r4, asr #26
   12580:			; <UNDEFINED> instruction: 0x012fd16d
   12584:	andeq	r1, r1, r4, asr r9
   12588:	andeq	lr, r0, r1, asr pc
   1258c:	strdeq	sl, [r0], -r5
   12590:	andeq	lr, r0, r3, asr pc
   12594:	sbceq	pc, r0, lr, ror #31
   12598:	eoreq	lr, r7, fp, ror #1
   1259c:	subeq	r4, r1, r3, asr sl
   125a0:			; <UNDEFINED> instruction: 0x01021994
   125a4:	teqne	r0, r4, asr r8
   125a8:	stmibne	r0, {r1, r9}
   125ac:			; <UNDEFINED> instruction: 0x2011bab0
   125b0:	strcs	r1, [r5], #-2309	; 0xfffff6fb
   125b4:	blne	feb910f4 <optarg@@GLIBC_2.4+0xfeb63f2c>
   125b8:	strbeq	r5, [r5, -r1, lsr #16]!
   125bc:	vcmla.f32	q8, q0, d12[0], #90
   125c0:	stmdbeq	r4, {r2, r4, r5, r8, fp, ip}
   125c4:	bleq	feb59d74 <optarg@@GLIBC_2.4+0xfeb2cbac>
   125c8:	cmnne	r6, #-1744830463	; 0x98000001
   125cc:	strne	r3, [r1, #-838]	; 0xfffffcba
   125d0:	movtpl	r4, #21325	; 0x534d
   125d4:			; <UNDEFINED> instruction: 0x565a4653
   125d8:	movtpl	r5, #25678	; 0x644e
   125dc:	movtmi	r5, #7507	; 0x1d53
   125e0:	cmpcc	r3, sl, asr #12
   125e4:	blcs	feb59d94 <optarg@@GLIBC_2.4+0xfeb2cbcc>
   125e8:	svccs	0x00c12fc1
   125ec:	submi	r5, r6, #-1006632960	; 0xc4000000
   125f0:	strbmi	r4, [sp, #-1101]	; 0xfffffbb3
   125f4:	strbmi	r4, [sp], #-322	; 0xfffffebe
   125f8:	ldrmi	ip, [sp, #-3368]!	; 0xfffff2d8
   125fc:	ldrbmi	r4, [r8, #-1619]	; 0xfffff9ad
   12600:	rsbpl	r4, r5, #1884160	; 0x1cc000
   12604:	movtpl	r4, #62283	; 0xf34b
   12608:	ldrpl	r0, [r9], #-256	; 0xffffff00
   1260c:	bpl	f2cdd4 <optarg@@GLIBC_2.4+0xeffc0c>
   12610:	stclpl	13, cr2, [sl, #980]	; 0x3d4
   12614:	cmnvs	r5, ip, ror #14
   12618:	bpl	13e3f6c <optarg@@GLIBC_2.4+0x13b6da4>
   1261c:	stmdapl	r9!, {r0, r3, r5, fp, ip, lr}
   12620:	stmdapl	r6, {r1, r6, r8, r9, ip, lr}^
   12624:	strbtvs	r6, [r2], #-1824	; 0xfffff8e0
   12628:	mrcvs	6, 3, r6, cr3, cr3, {3}
   1262c:	cmnvc	r1, #104, 6	; 0xa0000001
   12630:	cmnvc	r3, #120586240	; 0x7300000
   12634:	ldmdavs	r9, {r1, r5, r8, ip}
   12638:	stclvs	15, cr6, [pc], #-448	; 12480 <__assert_fail@plt+0x106c>
   1263c:	ldmdbgt	lr!, {r3, r5, r6, r8, pc}^
   12640:	strls	r5, [r4, #2294]	; 0x8f6
   12644:			; <UNDEFINED> instruction: 0x9123683e
   12648:	blge	fee98c20 <optarg@@GLIBC_2.4+0xfee6ba58>
   1264c:			; <UNDEFINED> instruction: 0xc7571590
   12650:	rscs	lr, r5, r2, ror #3
   12654:			; <UNDEFINED> instruction: 0xf97cff8c
   12658:			; <UNDEFINED> instruction: 0xf995e849
   1265c:	vshr.s32	d18, d0, #11
   12660:	bgt	fffa4eac <optarg@@GLIBC_2.4+0xfff77ce4>
   12664:	logle<illegal precision>z	f0, f4
   12668:	ldr	r3, [r0, #48]	; 0x30
   1266c:	cmn	r3, #1
   12670:	bxeq	lr
   12674:	push	{r4, r5, r6, r7, lr}
   12678:	sub	sp, sp, #116	; 0x74
   1267c:	mov	r5, r1
   12680:	mov	r4, r0
   12684:	bl	115c0 <__assert_fail@plt+0x1ac>
   12688:	mov	r6, r0
   1268c:	add	r2, sp, #8
   12690:	ldr	r1, [r4, #48]	; 0x30
   12694:	mov	r0, #3
   12698:	bl	111c8 <__fxstat64@plt>
   1269c:	cmp	r0, #0
   126a0:	bne	1270c <__assert_fail@plt+0x12f8>
   126a4:	ldr	r3, [r4, #40]	; 0x28
   126a8:	and	r3, r3, #61440	; 0xf000
   126ac:	cmp	r3, #32768	; 0x8000
   126b0:	beq	12730 <__assert_fail@plt+0x131c>
   126b4:	ldr	r3, [pc, #392]	; 12844 <__assert_fail@plt+0x1430>
   126b8:	ldrb	r0, [r3, #1]
   126bc:	cmp	r0, #0
   126c0:	beq	126d0 <__assert_fail@plt+0x12bc>
   126c4:	ldr	r0, [r5]
   126c8:	subs	r0, r0, r4
   126cc:	movne	r0, #1
   126d0:	mvn	r2, #0
   126d4:	mvn	r3, #0
   126d8:	strd	r2, [sp]
   126dc:	ldr	r2, [r4, #48]	; 0x30
   126e0:	mov	r1, r6
   126e4:	and	r0, r0, #1
   126e8:	bl	11814 <__assert_fail@plt+0x400>
   126ec:	ldrd	r2, [r4, #8]
   126f0:	adds	r6, r2, r0
   126f4:	adc	r7, r3, r1
   126f8:	strd	r6, [r4, #8]
   126fc:	orrs	r3, r0, r1
   12700:	bne	12804 <__assert_fail@plt+0x13f0>
   12704:	add	sp, sp, #116	; 0x74
   12708:	pop	{r4, r5, r6, r7, pc}
   1270c:	bl	112dc <__errno_location@plt>
   12710:	ldr	r3, [r0]
   12714:	str	r3, [r4, #52]	; 0x34
   12718:	mov	r1, r6
   1271c:	ldr	r0, [r4, #48]	; 0x30
   12720:	bl	115fc <__assert_fail@plt+0x1e8>
   12724:	mvn	r3, #0
   12728:	str	r3, [r4, #48]	; 0x30
   1272c:	b	12704 <__assert_fail@plt+0x12f0>
   12730:	ldrd	r0, [sp, #56]	; 0x38
   12734:	ldrd	r2, [r4, #8]
   12738:	cmp	r0, r2
   1273c:	sbcs	ip, r1, r3
   12740:	blt	127a0 <__assert_fail@plt+0x138c>
   12744:	cmp	r1, r3
   12748:	cmpeq	r0, r2
   1274c:	bne	126b4 <__assert_fail@plt+0x12a0>
   12750:	ldr	r3, [r4, #16]
   12754:	ldr	r1, [r4, #20]
   12758:	ldr	r2, [sp, #88]	; 0x58
   1275c:	cmp	r2, r3
   12760:	movlt	r3, #1
   12764:	movge	r3, #0
   12768:	movgt	r2, #1
   1276c:	movle	r2, #0
   12770:	sub	r2, r3, r2
   12774:	ldr	r3, [sp, #92]	; 0x5c
   12778:	cmp	r3, r1
   1277c:	movlt	r3, #1
   12780:	movge	r3, #0
   12784:	movgt	r1, #1
   12788:	movle	r1, #0
   1278c:	sub	r3, r3, r1
   12790:	add	r3, r3, r2, lsl #1
   12794:	cmp	r3, #0
   12798:	beq	12704 <__assert_fail@plt+0x12f0>
   1279c:	b	126b4 <__assert_fail@plt+0x12a0>
   127a0:	mov	r2, #5
   127a4:	ldr	r1, [pc, #156]	; 12848 <__assert_fail@plt+0x1434>
   127a8:	mov	r0, #0
   127ac:	bl	11174 <dcgettext@plt>
   127b0:	mov	r7, r0
   127b4:	mov	r2, r6
   127b8:	mov	r1, #3
   127bc:	mov	r0, #0
   127c0:	bl	19160 <__assert_fail@plt+0x7d4c>
   127c4:	mov	r3, r0
   127c8:	mov	r2, r7
   127cc:	mov	r1, #0
   127d0:	mov	r0, r1
   127d4:	bl	1121c <error@plt>
   127d8:	str	r6, [sp, #4]
   127dc:	mov	r3, #0
   127e0:	str	r3, [sp]
   127e4:	mov	r2, #0
   127e8:	mov	r3, #0
   127ec:	ldr	r0, [r4, #48]	; 0x30
   127f0:	bl	11a50 <__assert_fail@plt+0x63c>
   127f4:	mov	r2, #0
   127f8:	mov	r3, #0
   127fc:	strd	r2, [r4, #8]
   12800:	b	126b4 <__assert_fail@plt+0x12a0>
   12804:	str	r4, [r5]
   12808:	ldr	r3, [pc, #60]	; 1284c <__assert_fail@plt+0x1438>
   1280c:	ldr	r0, [r3]
   12810:	bl	111a4 <fflush_unlocked@plt>
   12814:	cmp	r0, #0
   12818:	beq	12704 <__assert_fail@plt+0x12f0>
   1281c:	bl	112dc <__errno_location@plt>
   12820:	ldr	r4, [r0]
   12824:	mov	r2, #5
   12828:	ldr	r1, [pc, #32]	; 12850 <__assert_fail@plt+0x143c>
   1282c:	mov	r0, #0
   12830:	bl	11174 <dcgettext@plt>
   12834:	mov	r2, r0
   12838:	mov	r1, r4
   1283c:	mov	r0, #1
   12840:	bl	1121c <error@plt>
   12844:	ldrdeq	sp, [r2], -r0
   12848:	strdeq	fp, [r1], -r0
   1284c:	andeq	sp, r2, r4, asr #3
   12850:	andeq	fp, r1, r4, lsl #14
   12854:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12858:	sub	sp, sp, #112	; 0x70
   1285c:	mov	r4, r0
   12860:	mov	r7, r1
   12864:	ldr	r5, [r0]
   12868:	ldr	r1, [pc, #1312]	; 12d90 <__assert_fail@plt+0x197c>
   1286c:	mov	r0, r5
   12870:	bl	110cc <strcmp@plt>
   12874:	ldrb	r9, [r4, #46]	; 0x2e
   12878:	ldr	r8, [r4, #52]	; 0x34
   1287c:	subs	r6, r0, #0
   12880:	moveq	r5, r6
   12884:	beq	128a0 <__assert_fail@plt+0x148c>
   12888:	cmp	r7, #0
   1288c:	moveq	r1, #2048	; 0x800
   12890:	movne	r1, #0
   12894:	mov	r0, r5
   12898:	bl	16624 <__assert_fail@plt+0x5210>
   1289c:	mov	r5, r0
   128a0:	ldr	r2, [r4, #48]	; 0x30
   128a4:	ldr	r3, [r4, #52]	; 0x34
   128a8:	cmn	r2, #1
   128ac:	movne	r2, #0
   128b0:	moveq	r2, #1
   128b4:	clz	r3, r3
   128b8:	lsr	r3, r3, #5
   128bc:	cmp	r2, r3
   128c0:	beq	129d0 <__assert_fail@plt+0x15bc>
   128c4:	ldr	r2, [pc, #1224]	; 12d94 <__assert_fail@plt+0x1980>
   128c8:	ldrb	sl, [r2, #2]
   128cc:	adds	r3, r5, #1
   128d0:	movne	r3, #1
   128d4:	eor	r1, sl, #1
   128d8:	orr	r3, r3, r1
   128dc:	strb	r3, [r4, #46]	; 0x2e
   128e0:	ldrb	r3, [r2, #3]
   128e4:	cmp	r3, #0
   128e8:	beq	129e4 <__assert_fail@plt+0x15d0>
   128ec:	cmn	r5, #1
   128f0:	beq	12a58 <__assert_fail@plt+0x1644>
   128f4:	add	r2, sp, #8
   128f8:	mov	r1, r5
   128fc:	mov	r0, #3
   12900:	bl	111c8 <__fxstat64@plt>
   12904:	cmp	r0, #0
   12908:	blt	12a58 <__assert_fail@plt+0x1644>
   1290c:	ldr	r3, [sp, #24]
   12910:	and	r2, r3, #61440	; 0xf000
   12914:	sub	r2, r2, #4096	; 0x1000
   12918:	bics	r2, r2, #4096	; 0x1000
   1291c:	movne	r2, #1
   12920:	moveq	r2, #0
   12924:	and	r3, r3, #45056	; 0xb000
   12928:	cmp	r3, #32768	; 0x8000
   1292c:	moveq	r3, #0
   12930:	andne	r3, r2, #1
   12934:	cmp	r3, #0
   12938:	beq	12b44 <__assert_fail@plt+0x1730>
   1293c:	mvn	r2, #0
   12940:	str	r2, [r4, #52]	; 0x34
   12944:	mov	r2, #0
   12948:	strb	r2, [r4, #46]	; 0x2e
   1294c:	cmp	sl, r2
   12950:	beq	12964 <__assert_fail@plt+0x1550>
   12954:	ldr	r3, [pc, #1084]	; 12d98 <__assert_fail@plt+0x1984>
   12958:	ldr	r3, [r3, #4]
   1295c:	subs	r3, r3, #1
   12960:	movne	r3, #1
   12964:	strb	r3, [r4, #44]	; 0x2c
   12968:	adds	r8, r8, #1
   1296c:	movne	r8, #1
   12970:	orrs	r3, r9, r8
   12974:	beq	12a78 <__assert_fail@plt+0x1664>
   12978:	mov	r2, #5
   1297c:	ldr	r1, [pc, #1048]	; 12d9c <__assert_fail@plt+0x1988>
   12980:	mov	r0, #0
   12984:	bl	11174 <dcgettext@plt>
   12988:	mov	r6, r0
   1298c:	mov	r0, r4
   12990:	bl	115c0 <__assert_fail@plt+0x1ac>
   12994:	mov	r1, r0
   12998:	mov	r0, #4
   1299c:	bl	19094 <__assert_fail@plt+0x7c80>
   129a0:	mov	r7, r0
   129a4:	ldrb	r3, [r4, #44]	; 0x2c
   129a8:	cmp	r3, #0
   129ac:	ldreq	r0, [pc, #1004]	; 12da0 <__assert_fail@plt+0x198c>
   129b0:	bne	12b30 <__assert_fail@plt+0x171c>
   129b4:	str	r0, [sp]
   129b8:	mov	r3, r7
   129bc:	mov	r2, r6
   129c0:	mov	r1, #0
   129c4:	mov	r0, r1
   129c8:	bl	1121c <error@plt>
   129cc:	b	12a78 <__assert_fail@plt+0x1664>
   129d0:	ldr	r3, [pc, #972]	; 12da4 <__assert_fail@plt+0x1990>
   129d4:	ldr	r2, [pc, #972]	; 12da8 <__assert_fail@plt+0x1994>
   129d8:	ldr	r1, [pc, #972]	; 12dac <__assert_fail@plt+0x1998>
   129dc:	ldr	r0, [pc, #972]	; 12db0 <__assert_fail@plt+0x199c>
   129e0:	bl	11414 <__assert_fail@plt>
   129e4:	add	r2, sp, #8
   129e8:	ldr	r1, [r4]
   129ec:	mov	r0, #3
   129f0:	bl	11408 <__lxstat64@plt>
   129f4:	cmp	r0, #0
   129f8:	bne	128ec <__assert_fail@plt+0x14d8>
   129fc:	ldr	r3, [sp, #24]
   12a00:	and	r3, r3, #61440	; 0xf000
   12a04:	cmp	r3, #40960	; 0xa000
   12a08:	bne	128ec <__assert_fail@plt+0x14d8>
   12a0c:	mvn	r3, #0
   12a10:	str	r3, [r4, #52]	; 0x34
   12a14:	mov	r3, #1
   12a18:	strb	r3, [r4, #44]	; 0x2c
   12a1c:	mov	r2, #5
   12a20:	ldr	r1, [pc, #908]	; 12db4 <__assert_fail@plt+0x19a0>
   12a24:	bl	11174 <dcgettext@plt>
   12a28:	mov	r6, r0
   12a2c:	mov	r0, r4
   12a30:	bl	115c0 <__assert_fail@plt+0x1ac>
   12a34:	mov	r1, r0
   12a38:	mov	r0, #4
   12a3c:	bl	19094 <__assert_fail@plt+0x7c80>
   12a40:	mov	r3, r0
   12a44:	mov	r2, r6
   12a48:	mov	r1, #0
   12a4c:	mov	r0, r1
   12a50:	bl	1121c <error@plt>
   12a54:	b	12a78 <__assert_fail@plt+0x1664>
   12a58:	bl	112dc <__errno_location@plt>
   12a5c:	ldr	r6, [r0]
   12a60:	str	r6, [r4, #52]	; 0x34
   12a64:	ldrb	r3, [r4, #46]	; 0x2e
   12a68:	cmp	r3, #0
   12a6c:	bne	12af4 <__assert_fail@plt+0x16e0>
   12a70:	cmp	r9, #0
   12a74:	bne	12ab4 <__assert_fail@plt+0x16a0>
   12a78:	mov	r0, r4
   12a7c:	bl	115c0 <__assert_fail@plt+0x1ac>
   12a80:	mov	r1, r0
   12a84:	mov	r0, r5
   12a88:	bl	115fc <__assert_fail@plt+0x1e8>
   12a8c:	ldr	r5, [r4, #48]	; 0x30
   12a90:	mov	r0, r4
   12a94:	bl	115c0 <__assert_fail@plt+0x1ac>
   12a98:	mov	r1, r0
   12a9c:	mov	r0, r5
   12aa0:	bl	115fc <__assert_fail@plt+0x1e8>
   12aa4:	mvn	r3, #0
   12aa8:	str	r3, [r4, #48]	; 0x30
   12aac:	add	sp, sp, #112	; 0x70
   12ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ab4:	mov	r2, #5
   12ab8:	ldr	r1, [pc, #760]	; 12db8 <__assert_fail@plt+0x19a4>
   12abc:	mov	r0, #0
   12ac0:	bl	11174 <dcgettext@plt>
   12ac4:	mov	r7, r0
   12ac8:	mov	r0, r4
   12acc:	bl	115c0 <__assert_fail@plt+0x1ac>
   12ad0:	mov	r1, r0
   12ad4:	mov	r0, #4
   12ad8:	bl	19094 <__assert_fail@plt+0x7c80>
   12adc:	mov	r3, r0
   12ae0:	mov	r2, r7
   12ae4:	mov	r1, r6
   12ae8:	mov	r0, #0
   12aec:	bl	1121c <error@plt>
   12af0:	b	12a78 <__assert_fail@plt+0x1664>
   12af4:	ldr	r6, [r0]
   12af8:	cmp	r8, r6
   12afc:	beq	12a78 <__assert_fail@plt+0x1664>
   12b00:	mov	r0, r4
   12b04:	bl	115c0 <__assert_fail@plt+0x1ac>
   12b08:	mov	r2, r0
   12b0c:	mov	r1, #3
   12b10:	mov	r0, #0
   12b14:	bl	19160 <__assert_fail@plt+0x7d4c>
   12b18:	mov	r3, r0
   12b1c:	ldr	r2, [pc, #664]	; 12dbc <__assert_fail@plt+0x19a8>
   12b20:	mov	r1, r6
   12b24:	mov	r0, #0
   12b28:	bl	1121c <error@plt>
   12b2c:	b	12a78 <__assert_fail@plt+0x1664>
   12b30:	mov	r2, #5
   12b34:	ldr	r1, [pc, #644]	; 12dc0 <__assert_fail@plt+0x19ac>
   12b38:	mov	r0, #0
   12b3c:	bl	11174 <dcgettext@plt>
   12b40:	b	129b4 <__assert_fail@plt+0x15a0>
   12b44:	mov	r0, r4
   12b48:	bl	115c0 <__assert_fail@plt+0x1ac>
   12b4c:	mov	r1, r0
   12b50:	mov	r0, r5
   12b54:	bl	11ef0 <__assert_fail@plt+0xadc>
   12b58:	strb	r0, [r4, #45]	; 0x2d
   12b5c:	cmp	r0, #0
   12b60:	beq	12b74 <__assert_fail@plt+0x1760>
   12b64:	ldr	r3, [pc, #552]	; 12d94 <__assert_fail@plt+0x1980>
   12b68:	ldrb	r3, [r3, #3]
   12b6c:	cmp	r3, #0
   12b70:	beq	12c44 <__assert_fail@plt+0x1830>
   12b74:	mov	r3, #0
   12b78:	str	r3, [r4, #52]	; 0x34
   12b7c:	bics	r3, r8, #2
   12b80:	beq	12cac <__assert_fail@plt+0x1898>
   12b84:	ldr	r3, [r4, #48]	; 0x30
   12b88:	cmn	r3, #1
   12b8c:	bne	12c98 <__assert_fail@plt+0x1884>
   12b90:	mov	r2, #5
   12b94:	ldr	r1, [pc, #552]	; 12dc4 <__assert_fail@plt+0x19b0>
   12b98:	mov	r0, #0
   12b9c:	bl	11174 <dcgettext@plt>
   12ba0:	mov	r8, r0
   12ba4:	mov	r0, r4
   12ba8:	bl	115c0 <__assert_fail@plt+0x1ac>
   12bac:	mov	r1, r0
   12bb0:	mov	r0, #4
   12bb4:	bl	19094 <__assert_fail@plt+0x7c80>
   12bb8:	mov	r3, r0
   12bbc:	mov	r2, r8
   12bc0:	mov	r1, #0
   12bc4:	mov	r0, r1
   12bc8:	bl	1121c <error@plt>
   12bcc:	cmp	r6, #0
   12bd0:	movne	r1, r7
   12bd4:	mvneq	r1, #0
   12bd8:	str	r5, [r4, #48]	; 0x30
   12bdc:	mov	r6, #0
   12be0:	mov	r7, #0
   12be4:	strd	r6, [r4, #8]
   12be8:	ldr	r3, [sp, #88]	; 0x58
   12bec:	str	r3, [r4, #16]
   12bf0:	ldr	r3, [sp, #92]	; 0x5c
   12bf4:	str	r3, [r4, #20]
   12bf8:	ldrd	r2, [sp, #8]
   12bfc:	strd	r2, [r4, #24]
   12c00:	ldrd	r2, [sp, #104]	; 0x68
   12c04:	strd	r2, [r4, #32]
   12c08:	ldr	r3, [sp, #24]
   12c0c:	str	r3, [r4, #40]	; 0x28
   12c10:	str	r1, [r4, #56]	; 0x38
   12c14:	strd	r6, [r4, #72]	; 0x48
   12c18:	mov	r8, #0
   12c1c:	strb	r8, [r4, #44]	; 0x2c
   12c20:	mov	r0, r4
   12c24:	bl	115c0 <__assert_fail@plt+0x1ac>
   12c28:	str	r0, [sp, #4]
   12c2c:	str	r8, [sp]
   12c30:	mov	r2, r6
   12c34:	mov	r3, r7
   12c38:	mov	r0, r5
   12c3c:	bl	11a50 <__assert_fail@plt+0x63c>
   12c40:	b	12aac <__assert_fail@plt+0x1698>
   12c44:	mvn	r3, #0
   12c48:	str	r3, [r4, #52]	; 0x34
   12c4c:	mov	r2, #5
   12c50:	ldr	r1, [pc, #368]	; 12dc8 <__assert_fail@plt+0x19b4>
   12c54:	mov	r0, #0
   12c58:	bl	11174 <dcgettext@plt>
   12c5c:	mov	r6, r0
   12c60:	mov	r0, r4
   12c64:	bl	115c0 <__assert_fail@plt+0x1ac>
   12c68:	mov	r1, r0
   12c6c:	mov	r0, #4
   12c70:	bl	19094 <__assert_fail@plt+0x7c80>
   12c74:	mov	r3, r0
   12c78:	mov	r2, r6
   12c7c:	mov	r1, #0
   12c80:	mov	r0, r1
   12c84:	bl	1121c <error@plt>
   12c88:	mov	r3, #1
   12c8c:	strb	r3, [r4, #44]	; 0x2c
   12c90:	strb	r3, [r4, #45]	; 0x2d
   12c94:	b	12a78 <__assert_fail@plt+0x1664>
   12c98:	ldr	r3, [pc, #260]	; 12da4 <__assert_fail@plt+0x1990>
   12c9c:	ldr	r2, [pc, #296]	; 12dcc <__assert_fail@plt+0x19b8>
   12ca0:	ldr	r1, [pc, #260]	; 12dac <__assert_fail@plt+0x1998>
   12ca4:	ldr	r0, [pc, #292]	; 12dd0 <__assert_fail@plt+0x19bc>
   12ca8:	bl	11414 <__assert_fail@plt>
   12cac:	ldr	r3, [r4, #48]	; 0x30
   12cb0:	cmn	r3, #1
   12cb4:	beq	12d24 <__assert_fail@plt+0x1910>
   12cb8:	ldrd	r0, [r4, #32]
   12cbc:	ldrd	r2, [sp, #104]	; 0x68
   12cc0:	cmp	r1, r3
   12cc4:	cmpeq	r0, r2
   12cc8:	beq	12d64 <__assert_fail@plt+0x1950>
   12ccc:	mov	r2, #5
   12cd0:	ldr	r1, [pc, #252]	; 12dd4 <__assert_fail@plt+0x19c0>
   12cd4:	mov	r0, #0
   12cd8:	bl	11174 <dcgettext@plt>
   12cdc:	mov	r8, r0
   12ce0:	mov	r0, r4
   12ce4:	bl	115c0 <__assert_fail@plt+0x1ac>
   12ce8:	mov	r1, r0
   12cec:	mov	r0, #4
   12cf0:	bl	19094 <__assert_fail@plt+0x7c80>
   12cf4:	mov	r3, r0
   12cf8:	mov	r2, r8
   12cfc:	mov	r1, #0
   12d00:	mov	r0, r1
   12d04:	bl	1121c <error@plt>
   12d08:	ldr	r8, [r4, #48]	; 0x30
   12d0c:	mov	r0, r4
   12d10:	bl	115c0 <__assert_fail@plt+0x1ac>
   12d14:	mov	r1, r0
   12d18:	mov	r0, r8
   12d1c:	bl	115fc <__assert_fail@plt+0x1e8>
   12d20:	b	12bcc <__assert_fail@plt+0x17b8>
   12d24:	mov	r2, #5
   12d28:	ldr	r1, [pc, #168]	; 12dd8 <__assert_fail@plt+0x19c4>
   12d2c:	mov	r0, #0
   12d30:	bl	11174 <dcgettext@plt>
   12d34:	mov	r8, r0
   12d38:	mov	r0, r4
   12d3c:	bl	115c0 <__assert_fail@plt+0x1ac>
   12d40:	mov	r1, r0
   12d44:	mov	r0, #4
   12d48:	bl	19094 <__assert_fail@plt+0x7c80>
   12d4c:	mov	r3, r0
   12d50:	mov	r2, r8
   12d54:	mov	r1, #0
   12d58:	mov	r0, r1
   12d5c:	bl	1121c <error@plt>
   12d60:	b	12bcc <__assert_fail@plt+0x17b8>
   12d64:	ldrd	r0, [r4, #24]
   12d68:	ldrd	r2, [sp, #8]
   12d6c:	cmp	r1, r3
   12d70:	cmpeq	r0, r2
   12d74:	bne	12ccc <__assert_fail@plt+0x18b8>
   12d78:	mov	r0, r4
   12d7c:	bl	115c0 <__assert_fail@plt+0x1ac>
   12d80:	mov	r1, r0
   12d84:	mov	r0, r5
   12d88:	bl	115fc <__assert_fail@plt+0x1e8>
   12d8c:	b	12aac <__assert_fail@plt+0x1698>
   12d90:	andeq	fp, r1, r4, ror #11
   12d94:	ldrdeq	sp, [r2], -r0
   12d98:	andeq	sp, r2, r8, asr #2
   12d9c:	andeq	fp, r1, r4, lsl #15
   12da0:	andeq	ip, r1, r8, lsr #2
   12da4:	andeq	fp, r1, r0, lsl #9
   12da8:	andeq	r0, r0, r2, ror #7
   12dac:	andeq	fp, r1, r0, lsl r7
   12db0:	andeq	fp, r1, ip, lsl r7
   12db4:	andeq	fp, r1, r0, lsr r7
   12db8:	andeq	fp, r1, r8, ror #14
   12dbc:	andeq	ip, r1, r8, lsl #8
   12dc0:			; <UNDEFINED> instruction: 0x0001b7b4
   12dc4:	andeq	fp, r1, r0, lsl r8
   12dc8:	ldrdeq	fp, [r1], -r0
   12dcc:	andeq	r0, r0, pc, lsr #8
   12dd0:	andeq	fp, r1, r4, lsl #16
   12dd4:	andeq	fp, r1, r4, asr r8
   12dd8:	andeq	fp, r1, ip, lsr #16
   12ddc:	push	{lr}		; (str lr, [sp, #-4]!)
   12de0:	sub	sp, sp, #60	; 0x3c
   12de4:	subs	r6, r0, #0
   12de8:	beq	12e24 <__assert_fail@plt+0x1a10>
   12dec:	ldr	r3, [pc, #940]	; 131a0 <__assert_fail@plt+0x1d8c>
   12df0:	ldr	r4, [r3]
   12df4:	mov	r2, #5
   12df8:	ldr	r1, [pc, #932]	; 131a4 <__assert_fail@plt+0x1d90>
   12dfc:	mov	r0, #0
   12e00:	bl	11174 <dcgettext@plt>
   12e04:	ldr	r3, [pc, #924]	; 131a8 <__assert_fail@plt+0x1d94>
   12e08:	ldr	r3, [r3]
   12e0c:	mov	r2, r0
   12e10:	mov	r1, #1
   12e14:	mov	r0, r4
   12e18:	bl	11324 <__fprintf_chk@plt>
   12e1c:	mov	r0, r6
   12e20:	bl	11294 <exit@plt>
   12e24:	mov	r2, #5
   12e28:	ldr	r1, [pc, #892]	; 131ac <__assert_fail@plt+0x1d98>
   12e2c:	mov	r0, #0
   12e30:	bl	11174 <dcgettext@plt>
   12e34:	ldr	r3, [pc, #876]	; 131a8 <__assert_fail@plt+0x1d94>
   12e38:	ldr	r2, [r3]
   12e3c:	mov	r1, r0
   12e40:	mov	r0, #1
   12e44:	bl	11300 <__printf_chk@plt>
   12e48:	mov	r2, #5
   12e4c:	ldr	r1, [pc, #860]	; 131b0 <__assert_fail@plt+0x1d9c>
   12e50:	mov	r0, #0
   12e54:	bl	11174 <dcgettext@plt>
   12e58:	mov	r2, #10
   12e5c:	mov	r1, r0
   12e60:	mov	r0, #1
   12e64:	bl	11300 <__printf_chk@plt>
   12e68:	mov	r2, #5
   12e6c:	ldr	r1, [pc, #832]	; 131b4 <__assert_fail@plt+0x1da0>
   12e70:	mov	r0, #0
   12e74:	bl	11174 <dcgettext@plt>
   12e78:	ldr	r4, [pc, #824]	; 131b8 <__assert_fail@plt+0x1da4>
   12e7c:	ldr	r1, [r4]
   12e80:	bl	110b4 <fputs_unlocked@plt>
   12e84:	mov	r2, #5
   12e88:	ldr	r1, [pc, #812]	; 131bc <__assert_fail@plt+0x1da8>
   12e8c:	mov	r0, #0
   12e90:	bl	11174 <dcgettext@plt>
   12e94:	ldr	r1, [r4]
   12e98:	bl	110b4 <fputs_unlocked@plt>
   12e9c:	mov	r2, #5
   12ea0:	ldr	r1, [pc, #792]	; 131c0 <__assert_fail@plt+0x1dac>
   12ea4:	mov	r0, #0
   12ea8:	bl	11174 <dcgettext@plt>
   12eac:	ldr	r1, [r4]
   12eb0:	bl	110b4 <fputs_unlocked@plt>
   12eb4:	mov	r2, #5
   12eb8:	ldr	r1, [pc, #772]	; 131c4 <__assert_fail@plt+0x1db0>
   12ebc:	mov	r0, #0
   12ec0:	bl	11174 <dcgettext@plt>
   12ec4:	ldr	r1, [r4]
   12ec8:	bl	110b4 <fputs_unlocked@plt>
   12ecc:	mov	r2, #5
   12ed0:	ldr	r1, [pc, #752]	; 131c8 <__assert_fail@plt+0x1db4>
   12ed4:	mov	r0, #0
   12ed8:	bl	11174 <dcgettext@plt>
   12edc:	mov	r3, #5
   12ee0:	mov	r2, #10
   12ee4:	mov	r1, r0
   12ee8:	mov	r0, #1
   12eec:	bl	11300 <__printf_chk@plt>
   12ef0:	mov	r2, #5
   12ef4:	ldr	r1, [pc, #720]	; 131cc <__assert_fail@plt+0x1db8>
   12ef8:	mov	r0, #0
   12efc:	bl	11174 <dcgettext@plt>
   12f00:	ldr	r1, [r4]
   12f04:	bl	110b4 <fputs_unlocked@plt>
   12f08:	mov	r2, #5
   12f0c:	ldr	r1, [pc, #700]	; 131d0 <__assert_fail@plt+0x1dbc>
   12f10:	mov	r0, #0
   12f14:	bl	11174 <dcgettext@plt>
   12f18:	ldr	r1, [r4]
   12f1c:	bl	110b4 <fputs_unlocked@plt>
   12f20:	mov	r2, #5
   12f24:	ldr	r1, [pc, #680]	; 131d4 <__assert_fail@plt+0x1dc0>
   12f28:	mov	r0, #0
   12f2c:	bl	11174 <dcgettext@plt>
   12f30:	ldr	r1, [r4]
   12f34:	bl	110b4 <fputs_unlocked@plt>
   12f38:	mov	r2, #5
   12f3c:	ldr	r1, [pc, #660]	; 131d8 <__assert_fail@plt+0x1dc4>
   12f40:	mov	r0, #0
   12f44:	bl	11174 <dcgettext@plt>
   12f48:	ldr	r1, [r4]
   12f4c:	bl	110b4 <fputs_unlocked@plt>
   12f50:	mov	r2, #5
   12f54:	ldr	r1, [pc, #640]	; 131dc <__assert_fail@plt+0x1dc8>
   12f58:	mov	r0, #0
   12f5c:	bl	11174 <dcgettext@plt>
   12f60:	ldr	r1, [r4]
   12f64:	bl	110b4 <fputs_unlocked@plt>
   12f68:	mov	r2, #5
   12f6c:	ldr	r1, [pc, #620]	; 131e0 <__assert_fail@plt+0x1dcc>
   12f70:	mov	r0, #0
   12f74:	bl	11174 <dcgettext@plt>
   12f78:	ldr	r1, [r4]
   12f7c:	bl	110b4 <fputs_unlocked@plt>
   12f80:	mov	r2, #5
   12f84:	ldr	r1, [pc, #600]	; 131e4 <__assert_fail@plt+0x1dd0>
   12f88:	mov	r0, #0
   12f8c:	bl	11174 <dcgettext@plt>
   12f90:	ldr	r1, [r4]
   12f94:	bl	110b4 <fputs_unlocked@plt>
   12f98:	mov	ip, sp
   12f9c:	ldr	lr, [pc, #580]	; 131e8 <__assert_fail@plt+0x1dd4>
   12fa0:	ldm	lr!, {r0, r1, r2, r3}
   12fa4:	stmia	ip!, {r0, r1, r2, r3}
   12fa8:	ldm	lr!, {r0, r1, r2, r3}
   12fac:	stmia	ip!, {r0, r1, r2, r3}
   12fb0:	ldm	lr!, {r0, r1, r2, r3}
   12fb4:	stmia	ip!, {r0, r1, r2, r3}
   12fb8:	ldm	lr, {r0, r1}
   12fbc:	stm	ip, {r0, r1}
   12fc0:	ldr	r1, [sp]
   12fc4:	cmp	r1, #0
   12fc8:	moveq	r4, sp
   12fcc:	beq	12ff4 <__assert_fail@plt+0x1be0>
   12fd0:	mov	r4, sp
   12fd4:	ldr	r5, [pc, #528]	; 131ec <__assert_fail@plt+0x1dd8>
   12fd8:	mov	r0, r5
   12fdc:	bl	110cc <strcmp@plt>
   12fe0:	cmp	r0, #0
   12fe4:	beq	12ff4 <__assert_fail@plt+0x1be0>
   12fe8:	ldr	r1, [r4, #8]!
   12fec:	cmp	r1, #0
   12ff0:	bne	12fd8 <__assert_fail@plt+0x1bc4>
   12ff4:	ldr	r4, [r4, #4]
   12ff8:	cmp	r4, #0
   12ffc:	beq	13110 <__assert_fail@plt+0x1cfc>
   13000:	mov	r2, #5
   13004:	ldr	r1, [pc, #484]	; 131f0 <__assert_fail@plt+0x1ddc>
   13008:	mov	r0, #0
   1300c:	bl	11174 <dcgettext@plt>
   13010:	ldr	r3, [pc, #476]	; 131f4 <__assert_fail@plt+0x1de0>
   13014:	ldr	r2, [pc, #476]	; 131f8 <__assert_fail@plt+0x1de4>
   13018:	mov	r1, r0
   1301c:	mov	r0, #1
   13020:	bl	11300 <__printf_chk@plt>
   13024:	mov	r1, #0
   13028:	mov	r0, #5
   1302c:	bl	11378 <setlocale@plt>
   13030:	cmp	r0, #0
   13034:	beq	1304c <__assert_fail@plt+0x1c38>
   13038:	mov	r2, #3
   1303c:	ldr	r1, [pc, #440]	; 131fc <__assert_fail@plt+0x1de8>
   13040:	bl	113e4 <strncmp@plt>
   13044:	cmp	r0, #0
   13048:	bne	130ac <__assert_fail@plt+0x1c98>
   1304c:	mov	r2, #5
   13050:	ldr	r1, [pc, #424]	; 13200 <__assert_fail@plt+0x1dec>
   13054:	mov	r0, #0
   13058:	bl	11174 <dcgettext@plt>
   1305c:	ldr	r5, [pc, #392]	; 131ec <__assert_fail@plt+0x1dd8>
   13060:	mov	r3, r5
   13064:	ldr	r2, [pc, #392]	; 131f4 <__assert_fail@plt+0x1de0>
   13068:	mov	r1, r0
   1306c:	mov	r0, #1
   13070:	bl	11300 <__printf_chk@plt>
   13074:	mov	r2, #5
   13078:	ldr	r1, [pc, #388]	; 13204 <__assert_fail@plt+0x1df0>
   1307c:	mov	r0, #0
   13080:	bl	11174 <dcgettext@plt>
   13084:	mov	r1, r0
   13088:	ldr	r2, [pc, #376]	; 13208 <__assert_fail@plt+0x1df4>
   1308c:	ldr	r3, [pc, #376]	; 1320c <__assert_fail@plt+0x1df8>
   13090:	cmp	r4, r5
   13094:	movne	r3, r2
   13098:	mov	r2, r4
   1309c:	mov	r0, #1
   130a0:	bl	11300 <__printf_chk@plt>
   130a4:	b	12e1c <__assert_fail@plt+0x1a08>
   130a8:	ldr	r4, [pc, #316]	; 131ec <__assert_fail@plt+0x1dd8>
   130ac:	mov	r2, #5
   130b0:	ldr	r1, [pc, #344]	; 13210 <__assert_fail@plt+0x1dfc>
   130b4:	mov	r0, #0
   130b8:	bl	11174 <dcgettext@plt>
   130bc:	ldr	r3, [pc, #244]	; 131b8 <__assert_fail@plt+0x1da4>
   130c0:	ldr	r1, [r3]
   130c4:	bl	110b4 <fputs_unlocked@plt>
   130c8:	b	1304c <__assert_fail@plt+0x1c38>
   130cc:	mov	r2, #5
   130d0:	ldr	r1, [pc, #296]	; 13200 <__assert_fail@plt+0x1dec>
   130d4:	mov	r0, #0
   130d8:	bl	11174 <dcgettext@plt>
   130dc:	ldr	r4, [pc, #264]	; 131ec <__assert_fail@plt+0x1dd8>
   130e0:	mov	r3, r4
   130e4:	ldr	r2, [pc, #264]	; 131f4 <__assert_fail@plt+0x1de0>
   130e8:	mov	r1, r0
   130ec:	mov	r0, #1
   130f0:	bl	11300 <__printf_chk@plt>
   130f4:	mov	r2, #5
   130f8:	ldr	r1, [pc, #260]	; 13204 <__assert_fail@plt+0x1df0>
   130fc:	mov	r0, #0
   13100:	bl	11174 <dcgettext@plt>
   13104:	mov	r1, r0
   13108:	ldr	r3, [pc, #252]	; 1320c <__assert_fail@plt+0x1df8>
   1310c:	b	13098 <__assert_fail@plt+0x1c84>
   13110:	mov	r2, #5
   13114:	ldr	r1, [pc, #212]	; 131f0 <__assert_fail@plt+0x1ddc>
   13118:	mov	r0, #0
   1311c:	bl	11174 <dcgettext@plt>
   13120:	ldr	r3, [pc, #204]	; 131f4 <__assert_fail@plt+0x1de0>
   13124:	ldr	r2, [pc, #204]	; 131f8 <__assert_fail@plt+0x1de4>
   13128:	mov	r1, r0
   1312c:	mov	r0, #1
   13130:	bl	11300 <__printf_chk@plt>
   13134:	mov	r1, #0
   13138:	mov	r0, #5
   1313c:	bl	11378 <setlocale@plt>
   13140:	cmp	r0, #0
   13144:	beq	130cc <__assert_fail@plt+0x1cb8>
   13148:	mov	r2, #3
   1314c:	ldr	r1, [pc, #168]	; 131fc <__assert_fail@plt+0x1de8>
   13150:	bl	113e4 <strncmp@plt>
   13154:	cmp	r0, #0
   13158:	bne	130a8 <__assert_fail@plt+0x1c94>
   1315c:	mov	r2, #5
   13160:	ldr	r1, [pc, #152]	; 13200 <__assert_fail@plt+0x1dec>
   13164:	mov	r0, #0
   13168:	bl	11174 <dcgettext@plt>
   1316c:	ldr	r4, [pc, #120]	; 131ec <__assert_fail@plt+0x1dd8>
   13170:	mov	r3, r4
   13174:	ldr	r2, [pc, #120]	; 131f4 <__assert_fail@plt+0x1de0>
   13178:	mov	r1, r0
   1317c:	mov	r0, #1
   13180:	bl	11300 <__printf_chk@plt>
   13184:	mov	r2, #5
   13188:	ldr	r1, [pc, #116]	; 13204 <__assert_fail@plt+0x1df0>
   1318c:	mov	r0, #0
   13190:	bl	11174 <dcgettext@plt>
   13194:	mov	r1, r0
   13198:	ldr	r3, [pc, #108]	; 1320c <__assert_fail@plt+0x1df8>
   1319c:	b	13098 <__assert_fail@plt+0x1c84>
   131a0:	andeq	sp, r2, r0, asr #3
   131a4:	andeq	fp, r1, r8, lsl #17
   131a8:	andeq	sp, r2, ip, ror #3
   131ac:			; <UNDEFINED> instruction: 0x0001b8b0
   131b0:	ldrdeq	fp, [r1], -r4
   131b4:	andeq	fp, r1, r8, asr r9
   131b8:	andeq	sp, r2, r4, asr #3
   131bc:	muleq	r1, r0, r9
   131c0:	ldrdeq	fp, [r1], -ip
   131c4:	andeq	fp, r1, r0, ror sl
   131c8:	andeq	fp, r1, ip, asr fp
   131cc:	andeq	fp, r1, r8, lsl #27
   131d0:	andeq	fp, r1, r0, ror #28
   131d4:	andeq	fp, r1, ip, lsr #31
   131d8:	andeq	fp, r1, ip, ror #31
   131dc:	andeq	ip, r1, ip, lsl r0
   131e0:	andeq	ip, r1, r4, asr r0
   131e4:	andeq	ip, r1, ip, lsr #2
   131e8:	andeq	fp, r1, r8, lsl #9
   131ec:	andeq	fp, r1, r0, lsl #17
   131f0:	andeq	ip, r1, r4, ror #5
   131f4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   131f8:	andeq	ip, r1, r4, lsr #6
   131fc:	andeq	ip, r1, r4, lsr r3
   13200:	andeq	ip, r1, r0, lsl #7
   13204:	muleq	r1, ip, r3
   13208:	andeq	ip, r1, r8, lsr #2
   1320c:	andeq	ip, r1, r4, asr #16
   13210:	andeq	ip, r1, r8, lsr r3
   13214:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13218:	vpush	{d8-d11}
   1321c:	sub	sp, sp, #324	; 0x144
   13220:	mov	r4, r0
   13224:	mov	r5, r1
   13228:	mov	r2, #10
   1322c:	mov	r3, #0
   13230:	add	r1, sp, #312	; 0x138
   13234:	strd	r2, [r1]
   13238:	ldr	r0, [r5]
   1323c:	bl	17778 <__assert_fail@plt+0x6364>
   13240:	ldr	r1, [pc, #1296]	; 13758 <__assert_fail@plt+0x2344>
   13244:	mov	r0, #6
   13248:	bl	11378 <setlocale@plt>
   1324c:	ldr	r6, [pc, #1092]	; 13698 <__assert_fail@plt+0x2284>
   13250:	ldr	r1, [pc, #1092]	; 1369c <__assert_fail@plt+0x2288>
   13254:	mov	r0, r6
   13258:	bl	113b4 <bindtextdomain@plt>
   1325c:	mov	r0, r6
   13260:	bl	1118c <textdomain@plt>
   13264:	ldr	r0, [pc, #1076]	; 136a0 <__assert_fail@plt+0x228c>
   13268:	bl	1b45c <__assert_fail@plt+0xa048>
   1326c:	ldr	r3, [pc, #1208]	; 1372c <__assert_fail@plt+0x2318>
   13270:	mov	r2, #0
   13274:	strb	r2, [r3, #4]
   13278:	mov	r1, #1
   1327c:	strb	r1, [r3, #5]
   13280:	strb	r2, [r3, #1]
   13284:	strb	r2, [r3, #6]
   13288:	strb	r2, [r3, #7]
   1328c:	mov	r2, #10
   13290:	strb	r2, [r3]
   13294:	cmp	r4, #2
   13298:	beq	13358 <__assert_fail@plt+0x1f44>
   1329c:	cmp	r4, #3
   132a0:	beq	13348 <__assert_fail@plt+0x1f34>
   132a4:	sub	r3, r4, #3
   132a8:	cmp	r3, #1
   132ac:	movhi	r3, #0
   132b0:	bls	13394 <__assert_fail@plt+0x1f80>
   132b4:	sub	r4, r4, r3
   132b8:	add	r5, r5, r3, lsl #2
   132bc:	vldr	d8, [pc, #964]	; 13688 <__assert_fail@plt+0x2274>
   132c0:	mov	r3, #0
   132c4:	str	r3, [sp, #24]
   132c8:	ldr	r6, [pc, #980]	; 136a4 <__assert_fail@plt+0x2290>
   132cc:	ldr	r7, [pc, #980]	; 136a8 <__assert_fail@plt+0x2294>
   132d0:	ldr	r8, [pc, #1108]	; 1372c <__assert_fail@plt+0x2318>
   132d4:	ldr	sl, [pc, #976]	; 136ac <__assert_fail@plt+0x2298>
   132d8:	add	fp, r6, #64	; 0x40
   132dc:	vldr	d9, [pc, #940]	; 13690 <__assert_fail@plt+0x227c>
   132e0:	mov	r3, #0
   132e4:	str	r3, [sp]
   132e8:	add	r3, r6, #84	; 0x54
   132ec:	mov	r2, r7
   132f0:	mov	r1, r5
   132f4:	mov	r0, r4
   132f8:	bl	11270 <getopt_long@plt>
   132fc:	cmn	r0, #1
   13300:	beq	1393c <__assert_fail@plt+0x2528>
   13304:	cmp	r0, #113	; 0x71
   13308:	beq	13930 <__assert_fail@plt+0x251c>
   1330c:	ble	13528 <__assert_fail@plt+0x2114>
   13310:	ldr	r3, [pc, #920]	; 136b0 <__assert_fail@plt+0x229c>
   13314:	cmp	r0, r3
   13318:	beq	13804 <__assert_fail@plt+0x23f0>
   1331c:	bgt	13764 <__assert_fail@plt+0x2350>
   13320:	cmp	r0, #118	; 0x76
   13324:	beq	13794 <__assert_fail@plt+0x2380>
   13328:	ble	1361c <__assert_fail@plt+0x2208>
   1332c:	cmp	r0, #122	; 0x7a
   13330:	beq	138ac <__assert_fail@plt+0x2498>
   13334:	cmp	r0, #256	; 0x100
   13338:	bne	13928 <__assert_fail@plt+0x2514>
   1333c:	mov	r3, #1
   13340:	strb	r3, [r8, #2]
   13344:	b	132e0 <__assert_fail@plt+0x1ecc>
   13348:	ldr	r3, [r5, #8]
   1334c:	ldrb	r2, [r3]
   13350:	cmp	r2, #45	; 0x2d
   13354:	beq	13388 <__assert_fail@plt+0x1f74>
   13358:	bl	17714 <__assert_fail@plt+0x6300>
   1335c:	sub	r3, r0, #199680	; 0x30c00
   13360:	sub	r2, r3, #432	; 0x1b0
   13364:	ldr	r3, [r5, #4]
   13368:	add	ip, r3, #1
   1336c:	ldrb	r1, [r3]
   13370:	cmp	r1, #43	; 0x2b
   13374:	beq	133b0 <__assert_fail@plt+0x1f9c>
   13378:	cmp	r1, #45	; 0x2d
   1337c:	beq	13414 <__assert_fail@plt+0x2000>
   13380:	mov	r3, #0
   13384:	b	132b4 <__assert_fail@plt+0x1ea0>
   13388:	ldrb	r3, [r3, #1]
   1338c:	cmp	r3, #0
   13390:	beq	13358 <__assert_fail@plt+0x1f44>
   13394:	ldr	r1, [pc, #792]	; 136b4 <__assert_fail@plt+0x22a0>
   13398:	ldr	r0, [r5, #8]
   1339c:	bl	110cc <strcmp@plt>
   133a0:	cmp	r0, #0
   133a4:	beq	13358 <__assert_fail@plt+0x1f44>
   133a8:	mov	r3, #0
   133ac:	b	132b4 <__assert_fail@plt+0x1ea0>
   133b0:	cmp	r2, #696	; 0x2b8
   133b4:	movls	r3, #0
   133b8:	bls	132b4 <__assert_fail@plt+0x1ea0>
   133bc:	mov	r6, #1
   133c0:	ldrb	r3, [r3, #1]
   133c4:	sub	r2, r3, #48	; 0x30
   133c8:	cmp	r2, #9
   133cc:	bhi	13450 <__assert_fail@plt+0x203c>
   133d0:	mov	r2, ip
   133d4:	ldrb	r3, [r2, #1]!
   133d8:	sub	r1, r3, #48	; 0x30
   133dc:	cmp	r1, #9
   133e0:	bls	133d4 <__assert_fail@plt+0x1fc0>
   133e4:	cmp	r3, #99	; 0x63
   133e8:	beq	13458 <__assert_fail@plt+0x2044>
   133ec:	cmp	r3, #108	; 0x6c
   133f0:	beq	134c8 <__assert_fail@plt+0x20b4>
   133f4:	cmp	r3, #98	; 0x62
   133f8:	movne	r3, r2
   133fc:	movne	r8, #1
   13400:	movne	r0, #10
   13404:	bne	13464 <__assert_fail@plt+0x2050>
   13408:	mov	r8, #0
   1340c:	mov	r0, #5120	; 0x1400
   13410:	b	13460 <__assert_fail@plt+0x204c>
   13414:	ldr	r2, [pc, #668]	; 136b8 <__assert_fail@plt+0x22a4>
   13418:	cmp	r0, r2
   1341c:	ble	13448 <__assert_fail@plt+0x2034>
   13420:	ldrb	r2, [r3, #1]
   13424:	cmp	r2, #99	; 0x63
   13428:	movne	r2, #0
   1342c:	moveq	r2, #1
   13430:	ldrb	r2, [ip, r2]
   13434:	cmp	r2, #0
   13438:	movne	r6, #0
   1343c:	bne	133c0 <__assert_fail@plt+0x1fac>
   13440:	mov	r3, #0
   13444:	b	132b4 <__assert_fail@plt+0x1ea0>
   13448:	mov	r6, #0
   1344c:	b	133c0 <__assert_fail@plt+0x1fac>
   13450:	mov	r2, ip
   13454:	b	133e4 <__assert_fail@plt+0x1fd0>
   13458:	mov	r8, #0
   1345c:	mov	r0, #10
   13460:	add	r3, r2, #1
   13464:	ldrb	r1, [r3]
   13468:	cmp	r1, #102	; 0x66
   1346c:	addeq	r3, r3, #1
   13470:	moveq	r7, #1
   13474:	movne	r7, #0
   13478:	ldrb	r3, [r3]
   1347c:	cmp	r3, #0
   13480:	bne	13520 <__assert_fail@plt+0x210c>
   13484:	cmp	ip, r2
   13488:	beq	134d4 <__assert_fail@plt+0x20c0>
   1348c:	ldr	r3, [pc, #552]	; 136bc <__assert_fail@plt+0x22a8>
   13490:	str	r3, [sp]
   13494:	add	r3, sp, #312	; 0x138
   13498:	mov	r2, #10
   1349c:	mov	r1, #0
   134a0:	mov	r0, ip
   134a4:	bl	1a280 <__assert_fail@plt+0x8e6c>
   134a8:	bics	r3, r0, #2
   134ac:	bne	134e4 <__assert_fail@plt+0x20d0>
   134b0:	ldr	r3, [pc, #628]	; 1372c <__assert_fail@plt+0x2318>
   134b4:	strb	r6, [r3, #6]
   134b8:	strb	r8, [r3, #5]
   134bc:	strb	r7, [r3, #7]
   134c0:	mov	r3, #1
   134c4:	b	132b4 <__assert_fail@plt+0x1ea0>
   134c8:	mov	r8, #1
   134cc:	mov	r0, #10
   134d0:	b	13460 <__assert_fail@plt+0x204c>
   134d4:	asr	r1, r0, #31
   134d8:	add	r3, sp, #312	; 0x138
   134dc:	strd	r0, [r3]
   134e0:	b	134b0 <__assert_fail@plt+0x209c>
   134e4:	bl	112dc <__errno_location@plt>
   134e8:	ldr	r4, [r0]
   134ec:	mov	r2, #5
   134f0:	ldr	r1, [pc, #456]	; 136c0 <__assert_fail@plt+0x22ac>
   134f4:	mov	r0, #0
   134f8:	bl	11174 <dcgettext@plt>
   134fc:	mov	r6, r0
   13500:	ldr	r0, [r5, #4]
   13504:	bl	192c8 <__assert_fail@plt+0x7eb4>
   13508:	str	r0, [sp]
   1350c:	mov	r3, r6
   13510:	ldr	r2, [pc, #428]	; 136c4 <__assert_fail@plt+0x22b0>
   13514:	mov	r1, r4
   13518:	mov	r0, #1
   1351c:	bl	1121c <error@plt>
   13520:	mov	r3, #0
   13524:	b	132b4 <__assert_fail@plt+0x1ea0>
   13528:	cmp	r0, #57	; 0x39
   1352c:	bgt	13554 <__assert_fail@plt+0x2140>
   13530:	mov	r9, r0
   13534:	cmp	r0, #48	; 0x30
   13538:	bge	13904 <__assert_fail@plt+0x24f0>
   1353c:	cmn	r0, #3
   13540:	beq	138b8 <__assert_fail@plt+0x24a4>
   13544:	cmn	r0, #2
   13548:	bne	13928 <__assert_fail@plt+0x2514>
   1354c:	mov	r0, #0
   13550:	bl	12ddc <__assert_fail@plt+0x19c8>
   13554:	cmp	r0, #99	; 0x63
   13558:	beq	13590 <__assert_fail@plt+0x217c>
   1355c:	bgt	13580 <__assert_fail@plt+0x216c>
   13560:	cmp	r0, #70	; 0x46
   13564:	bne	13928 <__assert_fail@plt+0x2514>
   13568:	mov	r3, #1
   1356c:	strb	r3, [r8, #7]
   13570:	ldr	r2, [pc, #440]	; 13730 <__assert_fail@plt+0x231c>
   13574:	str	r3, [r2, #4]
   13578:	strb	r3, [r8, #2]
   1357c:	b	132e0 <__assert_fail@plt+0x1ecc>
   13580:	cmp	r0, #102	; 0x66
   13584:	beq	137a0 <__assert_fail@plt+0x238c>
   13588:	cmp	r0, #110	; 0x6e
   1358c:	bne	13928 <__assert_fail@plt+0x2514>
   13590:	cmp	r0, #110	; 0x6e
   13594:	movne	r3, #0
   13598:	moveq	r3, #1
   1359c:	strb	r3, [r8, #5]
   135a0:	ldr	r2, [sl]
   135a4:	ldrb	r3, [r2]
   135a8:	cmp	r3, #43	; 0x2b
   135ac:	moveq	r3, #1
   135b0:	strbeq	r3, [r8, #6]
   135b4:	beq	135c4 <__assert_fail@plt+0x21b0>
   135b8:	cmp	r3, #45	; 0x2d
   135bc:	addeq	r2, r2, #1
   135c0:	streq	r2, [sl]
   135c4:	ldr	r9, [sl]
   135c8:	cmp	r0, #110	; 0x6e
   135cc:	mov	r2, #5
   135d0:	ldreq	r1, [pc, #240]	; 136c8 <__assert_fail@plt+0x22b4>
   135d4:	ldrne	r1, [pc, #240]	; 136cc <__assert_fail@plt+0x22b8>
   135d8:	mov	r0, #0
   135dc:	bl	11174 <dcgettext@plt>
   135e0:	mov	r3, #0
   135e4:	str	r3, [sp, #16]
   135e8:	str	r0, [sp, #12]
   135ec:	ldr	r3, [pc, #220]	; 136d0 <__assert_fail@plt+0x22bc>
   135f0:	str	r3, [sp, #8]
   135f4:	mvn	r2, #0
   135f8:	mvn	r3, #0
   135fc:	strd	r2, [sp]
   13600:	mov	r2, #0
   13604:	mov	r3, #0
   13608:	mov	r0, r9
   1360c:	bl	1a030 <__assert_fail@plt+0x8c1c>
   13610:	add	r3, sp, #312	; 0x138
   13614:	strd	r0, [r3]
   13618:	b	132e0 <__assert_fail@plt+0x1ecc>
   1361c:	cmp	r0, #115	; 0x73
   13620:	bne	13928 <__assert_fail@plt+0x2514>
   13624:	ldr	r3, [pc, #168]	; 136d4 <__assert_fail@plt+0x22c0>
   13628:	add	r2, sp, #208	; 0xd0
   1362c:	mov	r1, #0
   13630:	ldr	r0, [sl]
   13634:	bl	1a0f0 <__assert_fail@plt+0x8cdc>
   13638:	cmp	r0, #0
   1363c:	beq	13650 <__assert_fail@plt+0x223c>
   13640:	vldr	d8, [sp, #208]	; 0xd0
   13644:	vcmpe.f64	d8, d9
   13648:	vmrs	APSR_nzcv, fpscr
   1364c:	bge	132e0 <__assert_fail@plt+0x1ecc>
   13650:	mov	r2, #5
   13654:	ldr	r1, [pc, #124]	; 136d8 <__assert_fail@plt+0x22c4>
   13658:	mov	r0, #0
   1365c:	bl	11174 <dcgettext@plt>
   13660:	mov	r4, r0
   13664:	ldr	r3, [pc, #64]	; 136ac <__assert_fail@plt+0x2298>
   13668:	ldr	r0, [r3]
   1366c:	bl	192c8 <__assert_fail@plt+0x7eb4>
   13670:	mov	r3, r0
   13674:	mov	r2, r4
   13678:	mov	r1, #0
   1367c:	mov	r0, #1
   13680:	bl	1121c <error@plt>
   13684:	nop			; (mov r0, r0)
   13688:	andeq	r0, r0, r0
   1368c:	svccc	0x00f00000	; IMB
	...
   13698:	andeq	ip, r1, r8, lsr #6
   1369c:	ldrdeq	ip, [r1], -r4
   136a0:	andeq	r6, r1, r4, lsl #4
   136a4:	andeq	fp, r1, r0, lsl #9
   136a8:	andeq	ip, r1, r4, lsr #10
   136ac:	andeq	sp, r2, r8, asr #3
   136b0:	andeq	r0, r0, r1, lsl #2
   136b4:	andeq	ip, r1, ip, ror #7
   136b8:	andeq	r0, r3, pc, lsr #27
   136bc:	strdeq	ip, [r1], -r0
   136c0:	strdeq	ip, [r1], -r4
   136c4:	andeq	ip, r1, r4, lsl #8
   136c8:	andeq	ip, r1, ip, lsl #8
   136cc:	andeq	ip, r1, r4, lsr #8
   136d0:	andeq	ip, r1, ip, lsr r4
   136d4:	andeq	r6, r1, r4, ror #2
   136d8:	muleq	r1, ip, r4
   136dc:	andeq	r0, r0, r3, lsl #2
   136e0:	andeq	sp, r2, r4, ror #2
   136e4:	andeq	ip, r1, ip, asr #8
   136e8:	andeq	ip, r1, r8, asr r4
   136ec:	muleq	r1, r0, r4
   136f0:			; <UNDEFINED> instruction: 0x0001c4bc
   136f4:	andeq	ip, r1, ip, asr #9
   136f8:	andeq	ip, r1, r0, ror #9
   136fc:	strdeq	ip, [r1], -r0
   13700:	andeq	sp, r2, r0, ror #2
   13704:	andeq	ip, r1, r4, lsr #6
   13708:	andeq	fp, r1, r0, lsl #17
   1370c:	andeq	sp, r2, r4, asr #3
   13710:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13714:	andeq	ip, r1, ip, lsr r5
   13718:			; <UNDEFINED> instruction: 0x0002d1b8
   1371c:	andeq	ip, r1, ip, ror r5
   13720:			; <UNDEFINED> instruction: 0x0001c5b4
   13724:	strdeq	ip, [r1], -r4
   13728:	andeq	sp, r2, r0, asr r1
   1372c:	ldrdeq	sp, [r2], -r0
   13730:	andeq	sp, r2, r8, asr #2
   13734:	andeq	ip, r1, r4, asr #12
   13738:	andeq	ip, r1, r8, lsr #12
   1373c:	andeq	fp, r1, r4, ror #11
   13740:	andeq	ip, r1, r4, lsl #13
   13744:	andeq	r2, r0, ip
   13748:	andeq	ip, r1, r0, lsr #13
   1374c:	strdeq	r1, [r0], -pc	; <UNPREDICTABLE>
   13750:	andeq	r2, r0, r8
   13754:			; <UNDEFINED> instruction: 0x0001c6b0
   13758:	andeq	ip, r1, r8, lsr #2
   1375c:	andeq	fp, r1, r0, lsr r6
   13760:			; <UNDEFINED> instruction: 0x0001b7b4
   13764:	ldr	r3, [pc, #-144]	; 136dc <__assert_fail@plt+0x22c8>
   13768:	cmp	r0, r3
   1376c:	beq	138a0 <__assert_fail@plt+0x248c>
   13770:	blt	13854 <__assert_fail@plt+0x2440>
   13774:	cmp	r0, #260	; 0x104
   13778:	beq	137a0 <__assert_fail@plt+0x238c>
   1377c:	add	r3, r3, #2
   13780:	cmp	r0, r3
   13784:	bne	13928 <__assert_fail@plt+0x2514>
   13788:	mov	r3, #1
   1378c:	strb	r3, [r8, #3]
   13790:	b	132e0 <__assert_fail@plt+0x1ecc>
   13794:	mov	r3, #1
   13798:	str	r3, [sp, #24]
   1379c:	b	132e0 <__assert_fail@plt+0x1ecc>
   137a0:	mov	r3, #1
   137a4:	strb	r3, [r8, #7]
   137a8:	ldr	r1, [sl]
   137ac:	cmp	r1, #0
   137b0:	beq	137f4 <__assert_fail@plt+0x23e0>
   137b4:	mov	r3, #1
   137b8:	str	r3, [sp, #8]
   137bc:	ldr	r3, [pc, #-228]	; 136e0 <__assert_fail@plt+0x22cc>
   137c0:	ldr	r3, [r3]
   137c4:	str	r3, [sp, #4]
   137c8:	mov	r3, #4
   137cc:	str	r3, [sp]
   137d0:	mov	r3, fp
   137d4:	add	r2, r6, #72	; 0x48
   137d8:	ldr	r0, [pc, #-252]	; 136e4 <__assert_fail@plt+0x22d0>
   137dc:	bl	15fd0 <__assert_fail@plt+0x4bbc>
   137e0:	add	r0, r6, r0, lsl #2
   137e4:	ldr	r2, [r0, #64]	; 0x40
   137e8:	ldr	r3, [pc, #-192]	; 13730 <__assert_fail@plt+0x231c>
   137ec:	str	r2, [r3, #4]
   137f0:	b	132e0 <__assert_fail@plt+0x1ecc>
   137f4:	mov	r2, #2
   137f8:	ldr	r3, [pc, #-208]	; 13730 <__assert_fail@plt+0x231c>
   137fc:	str	r2, [r3, #4]
   13800:	b	132e0 <__assert_fail@plt+0x1ecc>
   13804:	ldr	r9, [sl]
   13808:	mov	r2, #5
   1380c:	ldr	r1, [pc, #-300]	; 136e8 <__assert_fail@plt+0x22d4>
   13810:	mov	r0, #0
   13814:	bl	11174 <dcgettext@plt>
   13818:	mov	r3, #0
   1381c:	str	r3, [sp, #16]
   13820:	str	r0, [sp, #12]
   13824:	ldr	r3, [pc, #-212]	; 13758 <__assert_fail@plt+0x2344>
   13828:	str	r3, [sp, #8]
   1382c:	mvn	r2, #0
   13830:	mvn	r3, #0
   13834:	strd	r2, [sp]
   13838:	mov	r2, #0
   1383c:	mov	r3, #0
   13840:	mov	r0, r9
   13844:	bl	1a030 <__assert_fail@plt+0x8c1c>
   13848:	ldr	r3, [pc, #-288]	; 13730 <__assert_fail@plt+0x231c>
   1384c:	strd	r0, [r3, #16]
   13850:	b	132e0 <__assert_fail@plt+0x1ecc>
   13854:	ldr	r9, [sl]
   13858:	mov	r2, #5
   1385c:	ldr	r1, [pc, #-376]	; 136ec <__assert_fail@plt+0x22d8>
   13860:	mov	r0, #0
   13864:	bl	11174 <dcgettext@plt>
   13868:	mov	r3, #0
   1386c:	str	r3, [sp, #16]
   13870:	str	r0, [sp, #12]
   13874:	ldr	r3, [pc, #-292]	; 13758 <__assert_fail@plt+0x2344>
   13878:	str	r3, [sp, #8]
   1387c:	mvn	r2, #-2147483648	; 0x80000000
   13880:	mov	r3, #0
   13884:	strd	r2, [sp]
   13888:	mov	r2, #0
   1388c:	mov	r3, #0
   13890:	mov	r0, r9
   13894:	bl	1a030 <__assert_fail@plt+0x8c1c>
   13898:	str	r0, [r8, #8]
   1389c:	b	132e0 <__assert_fail@plt+0x1ecc>
   138a0:	mov	r3, #1
   138a4:	strb	r3, [r8, #12]
   138a8:	b	132e0 <__assert_fail@plt+0x1ecc>
   138ac:	mov	r3, #0
   138b0:	strb	r3, [r8]
   138b4:	b	132e0 <__assert_fail@plt+0x1ecc>
   138b8:	mov	r4, #0
   138bc:	str	r4, [sp, #16]
   138c0:	ldr	r3, [pc, #-472]	; 136f0 <__assert_fail@plt+0x22dc>
   138c4:	str	r3, [sp, #12]
   138c8:	ldr	r3, [pc, #-476]	; 136f4 <__assert_fail@plt+0x22e0>
   138cc:	str	r3, [sp, #8]
   138d0:	ldr	r3, [pc, #-480]	; 136f8 <__assert_fail@plt+0x22e4>
   138d4:	str	r3, [sp, #4]
   138d8:	ldr	r3, [pc, #-484]	; 136fc <__assert_fail@plt+0x22e8>
   138dc:	str	r3, [sp]
   138e0:	ldr	r3, [pc, #-488]	; 13700 <__assert_fail@plt+0x22ec>
   138e4:	ldr	r3, [r3]
   138e8:	ldr	r2, [pc, #-492]	; 13704 <__assert_fail@plt+0x22f0>
   138ec:	ldr	r1, [pc, #-492]	; 13708 <__assert_fail@plt+0x22f4>
   138f0:	ldr	r0, [pc, #-492]	; 1370c <__assert_fail@plt+0x22f8>
   138f4:	ldr	r0, [r0]
   138f8:	bl	19848 <__assert_fail@plt+0x8434>
   138fc:	mov	r0, r4
   13900:	bl	11294 <exit@plt>
   13904:	mov	r2, #5
   13908:	ldr	r1, [pc, #-512]	; 13710 <__assert_fail@plt+0x22fc>
   1390c:	mov	r0, #0
   13910:	bl	11174 <dcgettext@plt>
   13914:	mov	r3, r9
   13918:	mov	r2, r0
   1391c:	mov	r1, #0
   13920:	mov	r0, #1
   13924:	bl	1121c <error@plt>
   13928:	mov	r0, #1
   1392c:	bl	12ddc <__assert_fail@plt+0x19c8>
   13930:	mov	r3, #2
   13934:	str	r3, [sp, #24]
   13938:	b	132e0 <__assert_fail@plt+0x1ecc>
   1393c:	mov	r9, r0
   13940:	ldr	r3, [pc, #-540]	; 1372c <__assert_fail@plt+0x2318>
   13944:	ldrb	r3, [r3, #2]
   13948:	cmp	r3, #0
   1394c:	beq	139b0 <__assert_fail@plt+0x259c>
   13950:	ldr	r3, [pc, #-556]	; 1372c <__assert_fail@plt+0x2318>
   13954:	ldrb	r3, [r3, #7]
   13958:	cmp	r3, #0
   1395c:	beq	13984 <__assert_fail@plt+0x2570>
   13960:	ldr	r3, [pc, #-568]	; 13730 <__assert_fail@plt+0x231c>
   13964:	ldr	r3, [r3, #4]
   13968:	cmp	r3, #2
   1396c:	beq	13b1c <__assert_fail@plt+0x2708>
   13970:	ldr	r3, [pc, #-588]	; 1372c <__assert_fail@plt+0x2318>
   13974:	ldr	r0, [r3, #8]
   13978:	cmp	r0, #0
   1397c:	beq	139ec <__assert_fail@plt+0x25d8>
   13980:	b	139cc <__assert_fail@plt+0x25b8>
   13984:	mov	r6, #0
   13988:	ldr	r3, [pc, #-612]	; 1372c <__assert_fail@plt+0x2318>
   1398c:	strb	r6, [r3, #2]
   13990:	mov	r2, #5
   13994:	ldr	r1, [pc, #-648]	; 13714 <__assert_fail@plt+0x2300>
   13998:	mov	r0, r6
   1399c:	bl	11174 <dcgettext@plt>
   139a0:	mov	r2, r0
   139a4:	mov	r1, r6
   139a8:	mov	r0, r6
   139ac:	bl	1121c <error@plt>
   139b0:	ldr	r3, [pc, #-652]	; 1372c <__assert_fail@plt+0x2318>
   139b4:	ldr	r0, [r3, #8]
   139b8:	cmp	r0, #0
   139bc:	beq	139ec <__assert_fail@plt+0x25d8>
   139c0:	ldrb	r3, [r3, #7]
   139c4:	cmp	r3, #0
   139c8:	beq	13b40 <__assert_fail@plt+0x272c>
   139cc:	mov	r1, #0
   139d0:	bl	1127c <kill@plt>
   139d4:	cmp	r0, #0
   139d8:	beq	139ec <__assert_fail@plt+0x25d8>
   139dc:	bl	112dc <__errno_location@plt>
   139e0:	ldr	r3, [r0]
   139e4:	cmp	r3, #38	; 0x26
   139e8:	beq	13b64 <__assert_fail@plt+0x2750>
   139ec:	ldr	r3, [pc, #-712]	; 1372c <__assert_fail@plt+0x2318>
   139f0:	ldrb	r3, [r3, #6]
   139f4:	cmp	r3, #0
   139f8:	beq	13a1c <__assert_fail@plt+0x2608>
   139fc:	add	r3, sp, #312	; 0x138
   13a00:	ldrd	r2, [r3]
   13a04:	orrs	r1, r2, r3
   13a08:	beq	13a1c <__assert_fail@plt+0x2608>
   13a0c:	subs	r2, r2, #1
   13a10:	sbc	r3, r3, #0
   13a14:	add	r1, sp, #312	; 0x138
   13a18:	strd	r2, [r1]
   13a1c:	ldr	r3, [pc, #-780]	; 13718 <__assert_fail@plt+0x2304>
   13a20:	ldr	r3, [r3]
   13a24:	cmp	r4, r3
   13a28:	ble	13b94 <__assert_fail@plt+0x2780>
   13a2c:	add	r5, r5, r3, lsl #2
   13a30:	subs	r8, r4, r3
   13a34:	bne	13b9c <__assert_fail@plt+0x2788>
   13a38:	add	r3, sp, #312	; 0x138
   13a3c:	ldrd	r2, [r3]
   13a40:	orrs	r3, r2, r3
   13a44:	bne	13a68 <__assert_fail@plt+0x2654>
   13a48:	ldr	r3, [pc, #-804]	; 1372c <__assert_fail@plt+0x2318>
   13a4c:	ldrb	r3, [r3, #7]
   13a50:	cmp	r3, #0
   13a54:	bne	13a68 <__assert_fail@plt+0x2654>
   13a58:	ldr	r3, [pc, #-820]	; 1372c <__assert_fail@plt+0x2318>
   13a5c:	ldrb	r3, [r3, #6]
   13a60:	cmp	r3, #0
   13a64:	beq	15d04 <__assert_fail@plt+0x48f0>
   13a68:	mov	r1, #80	; 0x50
   13a6c:	mov	r0, r8
   13a70:	bl	19a0c <__assert_fail@plt+0x85f8>
   13a74:	mov	ip, r0
   13a78:	str	r0, [sp, #76]	; 0x4c
   13a7c:	cmp	r8, #0
   13a80:	beq	1573c <__assert_fail@plt+0x4328>
   13a84:	mov	r3, #0
   13a88:	mov	r0, #80	; 0x50
   13a8c:	mul	r2, r0, r3
   13a90:	ldr	r1, [r5, r3, lsl #2]
   13a94:	str	r1, [ip, r2]
   13a98:	add	r3, r3, #1
   13a9c:	cmp	r3, r8
   13aa0:	bne	13a8c <__assert_fail@plt+0x2678>
   13aa4:	ldr	r2, [sp, #24]
   13aa8:	cmp	r2, #1
   13aac:	beq	13acc <__assert_fail@plt+0x26b8>
   13ab0:	cmp	r3, #1
   13ab4:	movls	r3, #0
   13ab8:	movhi	r3, #1
   13abc:	cmp	r2, #0
   13ac0:	movne	r3, #0
   13ac4:	cmp	r3, #0
   13ac8:	beq	13ae8 <__assert_fail@plt+0x26d4>
   13acc:	mov	r2, #1
   13ad0:	ldr	r3, [pc, #-940]	; 1372c <__assert_fail@plt+0x2318>
   13ad4:	strb	r2, [r3, #1]
   13ad8:	cmp	r8, #0
   13adc:	moveq	r3, #1
   13ae0:	streq	r3, [sp, #52]	; 0x34
   13ae4:	beq	147b8 <__assert_fail@plt+0x33a4>
   13ae8:	ldr	r3, [sp, #76]	; 0x4c
   13aec:	str	r3, [sp, #32]
   13af0:	mov	r3, #0
   13af4:	str	r3, [sp, #60]	; 0x3c
   13af8:	mov	r3, #1
   13afc:	str	r3, [sp, #52]	; 0x34
   13b00:	ldr	fp, [pc, #-988]	; 1372c <__assert_fail@plt+0x2318>
   13b04:	mvn	r3, #0
   13b08:	str	r3, [sp, #88]	; 0x58
   13b0c:	str	r3, [sp, #92]	; 0x5c
   13b10:	str	r9, [sp, #80]	; 0x50
   13b14:	str	r8, [sp, #72]	; 0x48
   13b18:	b	15894 <__assert_fail@plt+0x4480>
   13b1c:	mov	r2, #5
   13b20:	ldr	r1, [pc, #-1036]	; 1371c <__assert_fail@plt+0x2308>
   13b24:	mov	r0, #0
   13b28:	bl	11174 <dcgettext@plt>
   13b2c:	mov	r2, r0
   13b30:	mov	r1, #0
   13b34:	mov	r0, r1
   13b38:	bl	1121c <error@plt>
   13b3c:	b	139b0 <__assert_fail@plt+0x259c>
   13b40:	mov	r2, #5
   13b44:	ldr	r1, [pc, #-1068]	; 13720 <__assert_fail@plt+0x230c>
   13b48:	mov	r0, #0
   13b4c:	bl	11174 <dcgettext@plt>
   13b50:	mov	r2, r0
   13b54:	mov	r1, #0
   13b58:	mov	r0, r1
   13b5c:	bl	1121c <error@plt>
   13b60:	b	139ec <__assert_fail@plt+0x25d8>
   13b64:	mov	r2, #5
   13b68:	ldr	r1, [pc, #-1100]	; 13724 <__assert_fail@plt+0x2310>
   13b6c:	mov	r0, #0
   13b70:	bl	11174 <dcgettext@plt>
   13b74:	mov	r2, r0
   13b78:	mov	r1, #0
   13b7c:	mov	r0, r1
   13b80:	bl	1121c <error@plt>
   13b84:	mov	r2, #0
   13b88:	ldr	r3, [pc, #-1124]	; 1372c <__assert_fail@plt+0x2318>
   13b8c:	str	r2, [r3, #8]
   13b90:	b	139ec <__assert_fail@plt+0x25d8>
   13b94:	ldr	r5, [pc, #-1140]	; 13728 <__assert_fail@plt+0x2314>
   13b98:	mov	r8, #1
   13b9c:	sub	r7, r5, #4
   13ba0:	mov	r6, #0
   13ba4:	mov	r4, r6
   13ba8:	ldr	sl, [pc, #-1140]	; 1373c <__assert_fail@plt+0x2328>
   13bac:	mov	r1, sl
   13bb0:	ldr	r0, [r7, #4]!
   13bb4:	bl	110cc <strcmp@plt>
   13bb8:	cmp	r0, #0
   13bbc:	moveq	r6, #1
   13bc0:	add	r4, r4, #1
   13bc4:	cmp	r4, r8
   13bc8:	bcc	13bac <__assert_fail@plt+0x2798>
   13bcc:	cmp	r6, #0
   13bd0:	beq	13a38 <__assert_fail@plt+0x2624>
   13bd4:	ldr	r3, [pc, #-1196]	; 13730 <__assert_fail@plt+0x231c>
   13bd8:	ldr	r3, [r3, #4]
   13bdc:	cmp	r3, #1
   13be0:	beq	13c4c <__assert_fail@plt+0x2838>
   13be4:	ldr	r3, [pc, #-1216]	; 1372c <__assert_fail@plt+0x2318>
   13be8:	ldrb	r3, [r3, #7]
   13bec:	tst	r6, r3
   13bf0:	beq	13a38 <__assert_fail@plt+0x2624>
   13bf4:	ldr	r3, [pc, #-1232]	; 1372c <__assert_fail@plt+0x2318>
   13bf8:	ldr	r3, [r3, #8]
   13bfc:	cmp	r3, #0
   13c00:	bne	13c18 <__assert_fail@plt+0x2804>
   13c04:	ldr	r3, [pc, #-1244]	; 13730 <__assert_fail@plt+0x231c>
   13c08:	ldr	r3, [r3, #4]
   13c0c:	cmp	r3, #2
   13c10:	cmpeq	r8, #1
   13c14:	beq	13c80 <__assert_fail@plt+0x286c>
   13c18:	mov	r0, #0
   13c1c:	bl	113cc <isatty@plt>
   13c20:	cmp	r0, #0
   13c24:	beq	13a38 <__assert_fail@plt+0x2624>
   13c28:	mov	r2, #5
   13c2c:	ldr	r1, [pc, #-1280]	; 13734 <__assert_fail@plt+0x2320>
   13c30:	mov	r0, #0
   13c34:	bl	11174 <dcgettext@plt>
   13c38:	mov	r2, r0
   13c3c:	mov	r1, #0
   13c40:	mov	r0, r1
   13c44:	bl	1121c <error@plt>
   13c48:	b	13a38 <__assert_fail@plt+0x2624>
   13c4c:	mov	r2, #5
   13c50:	ldr	r1, [pc, #-1312]	; 13738 <__assert_fail@plt+0x2324>
   13c54:	mov	r0, #0
   13c58:	bl	11174 <dcgettext@plt>
   13c5c:	mov	r4, r0
   13c60:	ldr	r1, [pc, #-1324]	; 1373c <__assert_fail@plt+0x2328>
   13c64:	mov	r0, #4
   13c68:	bl	19094 <__assert_fail@plt+0x7c80>
   13c6c:	mov	r3, r0
   13c70:	mov	r2, r4
   13c74:	mov	r1, #0
   13c78:	mov	r0, #1
   13c7c:	bl	1121c <error@plt>
   13c80:	add	r2, sp, #208	; 0xd0
   13c84:	mov	r1, #0
   13c88:	mov	r0, #3
   13c8c:	bl	111c8 <__fxstat64@plt>
   13c90:	cmp	r0, #0
   13c94:	bne	13c18 <__assert_fail@plt+0x2804>
   13c98:	ldr	r3, [sp, #224]	; 0xe0
   13c9c:	and	r3, r3, #61440	; 0xf000
   13ca0:	cmp	r3, #32768	; 0x8000
   13ca4:	bne	13a38 <__assert_fail@plt+0x2624>
   13ca8:	b	13c18 <__assert_fail@plt+0x2804>
   13cac:	mov	r1, #0
   13cb0:	mov	r0, r4
   13cb4:	bl	16624 <__assert_fail@plt+0x5210>
   13cb8:	mov	r3, r0
   13cbc:	str	r0, [sp, #28]
   13cc0:	ldrb	r4, [fp, #2]
   13cc4:	eor	r4, r4, #1
   13cc8:	cmn	r0, #1
   13ccc:	moveq	r3, r4
   13cd0:	orrne	r3, r4, #1
   13cd4:	ldr	r2, [sp, #32]
   13cd8:	strb	r3, [r2, #46]	; 0x2e
   13cdc:	bne	158d8 <__assert_fail@plt+0x44c4>
   13ce0:	ldrb	r3, [fp, #7]
   13ce4:	cmp	r3, #0
   13ce8:	beq	13d18 <__assert_fail@plt+0x2904>
   13cec:	mvn	r3, #0
   13cf0:	ldr	r5, [sp, #48]	; 0x30
   13cf4:	str	r3, [r5, #48]	; 0x30
   13cf8:	bl	112dc <__errno_location@plt>
   13cfc:	ldr	r3, [r0]
   13d00:	str	r3, [r5, #52]	; 0x34
   13d04:	strb	r4, [r5, #44]	; 0x2c
   13d08:	mov	r2, #0
   13d0c:	mov	r3, #0
   13d10:	strd	r2, [r5, #32]
   13d14:	strd	r2, [r5, #24]
   13d18:	bl	112dc <__errno_location@plt>
   13d1c:	ldr	r4, [r0]
   13d20:	mov	r2, #5
   13d24:	ldr	r1, [pc, #-1516]	; 13740 <__assert_fail@plt+0x232c>
   13d28:	mov	r0, #0
   13d2c:	bl	11174 <dcgettext@plt>
   13d30:	mov	r5, r0
   13d34:	ldr	r0, [sp, #48]	; 0x30
   13d38:	bl	115c0 <__assert_fail@plt+0x1ac>
   13d3c:	mov	r1, r0
   13d40:	mov	r0, #4
   13d44:	bl	19094 <__assert_fail@plt+0x7c80>
   13d48:	mov	r3, r0
   13d4c:	mov	r2, r5
   13d50:	mov	r1, r4
   13d54:	mov	r0, #0
   13d58:	bl	1121c <error@plt>
   13d5c:	mov	r3, #0
   13d60:	str	r3, [sp, #36]	; 0x24
   13d64:	b	15860 <__assert_fail@plt+0x444c>
   13d68:	ldr	r0, [sp, #48]	; 0x30
   13d6c:	bl	115c0 <__assert_fail@plt+0x1ac>
   13d70:	bl	11574 <__assert_fail@plt+0x160>
   13d74:	b	158e4 <__assert_fail@plt+0x44d0>
   13d78:	add	r2, sp, #208	; 0xd0
   13d7c:	ldr	r1, [sp, #28]
   13d80:	mov	r0, #3
   13d84:	bl	111c8 <__fxstat64@plt>
   13d88:	cmp	r0, #0
   13d8c:	bne	13e4c <__assert_fail@plt+0x2a38>
   13d90:	ldrb	r3, [fp, #6]
   13d94:	str	r3, [sp, #84]	; 0x54
   13d98:	cmp	r3, #0
   13d9c:	bne	13e94 <__assert_fail@plt+0x2a80>
   13da0:	ldrb	r3, [fp, #12]
   13da4:	cmp	r3, #0
   13da8:	bne	15774 <__assert_fail@plt+0x4360>
   13dac:	ldr	r3, [sp, #224]	; 0xe0
   13db0:	and	r3, r3, #61440	; 0xf000
   13db4:	cmp	r3, #32768	; 0x8000
   13db8:	bne	15774 <__assert_fail@plt+0x4360>
   13dbc:	mov	r3, #1
   13dc0:	str	r3, [sp]
   13dc4:	mov	r2, #0
   13dc8:	mov	r3, #0
   13dcc:	ldr	r6, [sp, #28]
   13dd0:	mov	r0, r6
   13dd4:	bl	111ec <lseek64@plt>
   13dd8:	mov	r4, r0
   13ddc:	mov	r5, r1
   13de0:	mvn	r2, #0
   13de4:	mvn	r3, #0
   13de8:	cmp	r1, r3
   13dec:	cmpeq	r0, r2
   13df0:	beq	15774 <__assert_fail@plt+0x4360>
   13df4:	mov	r3, #2
   13df8:	str	r3, [sp]
   13dfc:	mov	r2, #0
   13e00:	mov	r3, #0
   13e04:	mov	r0, r6
   13e08:	bl	111ec <lseek64@plt>
   13e0c:	cmp	r4, r0
   13e10:	sbcs	r3, r5, r1
   13e14:	bge	15754 <__assert_fail@plt+0x4340>
   13e18:	strd	r0, [sp, #104]	; 0x68
   13e1c:	orrs	r3, r0, r1
   13e20:	beq	15848 <__assert_fail@plt+0x4434>
   13e24:	add	r3, sp, #104	; 0x68
   13e28:	str	r3, [sp, #16]
   13e2c:	strd	r0, [sp, #8]
   13e30:	strd	r4, [sp]
   13e34:	ldrd	r2, [sp, #40]	; 0x28
   13e38:	ldr	r1, [sp, #28]
   13e3c:	ldr	r0, [sp, #68]	; 0x44
   13e40:	bl	11b98 <__assert_fail@plt+0x784>
   13e44:	str	r0, [sp, #36]	; 0x24
   13e48:	b	15848 <__assert_fail@plt+0x4434>
   13e4c:	bl	112dc <__errno_location@plt>
   13e50:	ldr	r4, [r0]
   13e54:	mov	r2, #5
   13e58:	ldr	r1, [pc, #-1816]	; 13748 <__assert_fail@plt+0x2334>
   13e5c:	mov	r0, #0
   13e60:	bl	11174 <dcgettext@plt>
   13e64:	mov	r5, r0
   13e68:	ldr	r1, [sp, #68]	; 0x44
   13e6c:	mov	r0, #4
   13e70:	bl	19094 <__assert_fail@plt+0x7c80>
   13e74:	mov	r3, r0
   13e78:	mov	r2, r5
   13e7c:	mov	r1, r4
   13e80:	mov	r0, #0
   13e84:	bl	1121c <error@plt>
   13e88:	mov	r3, #0
   13e8c:	str	r3, [sp, #36]	; 0x24
   13e90:	b	15848 <__assert_fail@plt+0x4434>
   13e94:	add	r3, sp, #104	; 0x68
   13e98:	str	r3, [sp]
   13e9c:	ldrd	r2, [sp, #40]	; 0x28
   13ea0:	ldr	r1, [sp, #28]
   13ea4:	ldr	r0, [sp, #68]	; 0x44
   13ea8:	bl	116f0 <__assert_fail@plt+0x2dc>
   13eac:	cmp	r0, #0
   13eb0:	lsrne	r3, r0, #31
   13eb4:	strne	r3, [sp, #36]	; 0x24
   13eb8:	bne	15848 <__assert_fail@plt+0x4434>
   13ebc:	ldr	r3, [sp, #88]	; 0x58
   13ec0:	str	r3, [sp]
   13ec4:	ldr	r3, [sp, #92]	; 0x5c
   13ec8:	str	r3, [sp, #4]
   13ecc:	ldr	r2, [sp, #28]
   13ed0:	ldr	r1, [sp, #68]	; 0x44
   13ed4:	mov	r0, #0
   13ed8:	bl	11814 <__assert_fail@plt+0x400>
   13edc:	ldrd	r2, [sp, #104]	; 0x68
   13ee0:	adds	r2, r2, r0
   13ee4:	adc	r3, r3, r1
   13ee8:	strd	r2, [sp, #104]	; 0x68
   13eec:	ldr	r3, [sp, #84]	; 0x54
   13ef0:	str	r3, [sp, #36]	; 0x24
   13ef4:	b	15848 <__assert_fail@plt+0x4434>
   13ef8:	add	r0, r0, #1
   13efc:	ldr	r3, [r4, #4]
   13f00:	add	r3, r3, #1
   13f04:	str	r3, [r4, #4]
   13f08:	sub	r2, r6, r0
   13f0c:	ldr	r1, [sp, #24]
   13f10:	bl	11330 <memchr@plt>
   13f14:	cmp	r0, #0
   13f18:	bne	13ef8 <__assert_fail@plt+0x2ae4>
   13f1c:	add	r3, r7, #8192	; 0x2000
   13f20:	ldr	r3, [r3, #4]
   13f24:	add	sl, sl, r3
   13f28:	add	r3, r9, #8192	; 0x2000
   13f2c:	ldr	r0, [r3]
   13f30:	add	r3, r8, r0
   13f34:	ldr	r2, [pc, #-2032]	; 1374c <__assert_fail@plt+0x2338>
   13f38:	cmp	r3, r2
   13f3c:	bls	13fdc <__assert_fail@plt+0x2bc8>
   13f40:	add	r9, r9, #8192	; 0x2000
   13f44:	str	r7, [r9, #8]
   13f48:	add	r3, r5, #8192	; 0x2000
   13f4c:	ldr	r3, [r3, #4]
   13f50:	sub	r3, sl, r3
   13f54:	mov	r1, #0
   13f58:	ldrd	r8, [sp, #40]	; 0x28
   13f5c:	cmp	r9, r1
   13f60:	cmpeq	r8, r3
   13f64:	bcs	14018 <__assert_fail@plt+0x2c04>
   13f68:	add	r2, r5, #8192	; 0x2000
   13f6c:	mov	sl, r3
   13f70:	mov	r9, r7
   13f74:	mov	r7, r5
   13f78:	ldr	r5, [r2, #8]
   13f7c:	str	r7, [sp, #56]	; 0x38
   13f80:	mov	r2, #8192	; 0x2000
   13f84:	mov	r1, r7
   13f88:	ldr	r0, [sp, #28]
   13f8c:	bl	192dc <__assert_fail@plt+0x7ec8>
   13f90:	mov	r8, r0
   13f94:	sub	r3, r0, #1
   13f98:	cmn	r3, #3
   13f9c:	bhi	1402c <__assert_fail@plt+0x2c18>
   13fa0:	add	r1, r7, #8192	; 0x2000
   13fa4:	str	r0, [r1]
   13fa8:	ldrd	r2, [sp, #104]	; 0x68
   13fac:	adds	r2, r2, r0
   13fb0:	adc	r3, r3, #0
   13fb4:	strd	r2, [sp, #104]	; 0x68
   13fb8:	mov	r3, #0
   13fbc:	str	r3, [r1, #4]
   13fc0:	str	r3, [r1, #8]
   13fc4:	add	r6, r7, r0
   13fc8:	ldrb	r3, [fp]
   13fcc:	str	r3, [sp, #24]
   13fd0:	mov	r0, r7
   13fd4:	mov	r4, r1
   13fd8:	b	13f08 <__assert_fail@plt+0x2af4>
   13fdc:	mov	r2, r8
   13fe0:	ldr	r1, [sp, #56]	; 0x38
   13fe4:	add	r0, r9, r0
   13fe8:	bl	1112c <memcpy@plt>
   13fec:	add	r3, r9, #8192	; 0x2000
   13ff0:	add	r1, r7, #8192	; 0x2000
   13ff4:	ldr	r2, [r3]
   13ff8:	ldr	r0, [r1]
   13ffc:	add	r2, r2, r0
   14000:	str	r2, [r3]
   14004:	ldr	r2, [r3, #4]
   14008:	ldr	r1, [r1, #4]
   1400c:	add	r2, r2, r1
   14010:	str	r2, [r3, #4]
   14014:	b	13f7c <__assert_fail@plt+0x2b68>
   14018:	ldr	r0, [pc, #-2268]	; 13744 <__assert_fail@plt+0x2330>
   1401c:	bl	19914 <__assert_fail@plt+0x8500>
   14020:	mov	r9, r7
   14024:	mov	r7, r0
   14028:	b	13f7c <__assert_fail@plt+0x2b68>
   1402c:	mov	r0, r7
   14030:	bl	16660 <__assert_fail@plt+0x524c>
   14034:	cmn	r8, #1
   14038:	beq	14094 <__assert_fail@plt+0x2c80>
   1403c:	add	r3, r9, #8192	; 0x2000
   14040:	ldr	r2, [r3]
   14044:	ldrd	r0, [sp, #40]	; 0x28
   14048:	orr	r3, r0, r1
   1404c:	cmp	r3, #0
   14050:	cmpne	r2, #0
   14054:	moveq	r3, #1
   14058:	movne	r3, #0
   1405c:	streq	r3, [sp, #36]	; 0x24
   14060:	beq	14178 <__assert_fail@plt+0x2d64>
   14064:	ldrb	r6, [fp]
   14068:	add	r2, r9, r2
   1406c:	ldrb	r3, [r2, #-1]
   14070:	cmp	r3, r6
   14074:	addne	r9, r9, #8192	; 0x2000
   14078:	ldrne	r3, [r9, #4]
   1407c:	addne	r3, r3, #1
   14080:	strne	r3, [r9, #4]
   14084:	addne	sl, sl, #1
   14088:	mov	r4, r5
   1408c:	ldrd	r0, [sp, #40]	; 0x28
   14090:	b	140e8 <__assert_fail@plt+0x2cd4>
   14094:	bl	112dc <__errno_location@plt>
   14098:	ldr	r4, [r0]
   1409c:	mov	r2, #5
   140a0:	ldr	r1, [pc, #-2380]	; 1375c <__assert_fail@plt+0x2348>
   140a4:	mov	r0, #0
   140a8:	bl	11174 <dcgettext@plt>
   140ac:	mov	r6, r0
   140b0:	ldr	r1, [sp, #68]	; 0x44
   140b4:	mov	r0, #4
   140b8:	bl	19094 <__assert_fail@plt+0x7c80>
   140bc:	mov	r3, r0
   140c0:	mov	r2, r6
   140c4:	mov	r1, r4
   140c8:	mov	r0, #0
   140cc:	bl	1121c <error@plt>
   140d0:	ldr	r3, [sp, #84]	; 0x54
   140d4:	str	r3, [sp, #36]	; 0x24
   140d8:	b	14178 <__assert_fail@plt+0x2d64>
   140dc:	add	r4, r4, #8192	; 0x2000
   140e0:	ldr	r4, [r4, #8]
   140e4:	mov	sl, r3
   140e8:	add	r3, r4, #8192	; 0x2000
   140ec:	ldr	r3, [r3, #4]
   140f0:	sub	r3, sl, r3
   140f4:	mov	r9, #0
   140f8:	cmp	r1, r9
   140fc:	cmpeq	r0, r3
   14100:	bcc	140dc <__assert_fail@plt+0x2cc8>
   14104:	mov	r0, r4
   14108:	add	r3, r4, #8192	; 0x2000
   1410c:	ldr	r7, [r3]
   14110:	add	r7, r4, r7
   14114:	mov	r3, #0
   14118:	ldrd	r8, [sp, #40]	; 0x28
   1411c:	cmp	r9, r3
   14120:	cmpeq	r8, sl
   14124:	movcc	r3, r8
   14128:	subcc	r8, sl, r3
   1412c:	bcc	14154 <__assert_fail@plt+0x2d40>
   14130:	sub	r1, r7, r0
   14134:	bl	11674 <__assert_fail@plt+0x260>
   14138:	add	r4, r4, #8192	; 0x2000
   1413c:	ldr	r0, [r4, #8]
   14140:	b	14170 <__assert_fail@plt+0x2d5c>
   14144:	mov	r1, r6
   14148:	bl	11198 <rawmemchr@plt>
   1414c:	add	r0, r0, #1
   14150:	sub	r8, r8, #1
   14154:	cmp	r8, #0
   14158:	bne	14144 <__assert_fail@plt+0x2d30>
   1415c:	b	14130 <__assert_fail@plt+0x2d1c>
   14160:	add	r4, r0, #8192	; 0x2000
   14164:	ldr	r1, [r4]
   14168:	bl	11674 <__assert_fail@plt+0x260>
   1416c:	ldr	r0, [r4, #8]
   14170:	cmp	r0, #0
   14174:	bne	14160 <__assert_fail@plt+0x2d4c>
   14178:	cmp	r5, #0
   1417c:	movne	r0, r5
   14180:	beq	15848 <__assert_fail@plt+0x4434>
   14184:	add	r3, r0, #8192	; 0x2000
   14188:	ldr	r4, [r3, #8]
   1418c:	bl	16660 <__assert_fail@plt+0x524c>
   14190:	mov	r0, r4
   14194:	cmp	r4, #0
   14198:	bne	14184 <__assert_fail@plt+0x2d70>
   1419c:	b	15848 <__assert_fail@plt+0x4434>
   141a0:	bl	112dc <__errno_location@plt>
   141a4:	ldr	r4, [r0]
   141a8:	mov	r2, #5
   141ac:	ldr	r1, [pc, #-2668]	; 13748 <__assert_fail@plt+0x2334>
   141b0:	mov	r0, #0
   141b4:	bl	11174 <dcgettext@plt>
   141b8:	mov	r5, r0
   141bc:	ldr	r1, [sp, #68]	; 0x44
   141c0:	mov	r0, #4
   141c4:	bl	19094 <__assert_fail@plt+0x7c80>
   141c8:	mov	r3, r0
   141cc:	mov	r2, r5
   141d0:	mov	r1, r4
   141d4:	mov	r0, #0
   141d8:	bl	1121c <error@plt>
   141dc:	b	15848 <__assert_fail@plt+0x4434>
   141e0:	ldr	r3, [sp, #68]	; 0x44
   141e4:	str	r3, [sp, #4]
   141e8:	mov	r3, #1
   141ec:	str	r3, [sp]
   141f0:	mov	r2, r4
   141f4:	mov	r3, r5
   141f8:	ldr	r0, [sp, #28]
   141fc:	bl	11a50 <__assert_fail@plt+0x63c>
   14200:	cmp	r0, #0
   14204:	sbcs	r3, r1, #0
   14208:	bge	15994 <__assert_fail@plt+0x4580>
   1420c:	b	15968 <__assert_fail@plt+0x4554>
   14210:	add	r3, sp, #104	; 0x68
   14214:	str	r3, [sp]
   14218:	ldrd	r2, [sp, #40]	; 0x28
   1421c:	ldr	r1, [sp, #28]
   14220:	ldr	r0, [sp, #68]	; 0x44
   14224:	bl	11950 <__assert_fail@plt+0x53c>
   14228:	cmp	r0, #0
   1422c:	lsrne	r3, r0, #31
   14230:	strne	r3, [sp, #36]	; 0x24
   14234:	bne	15848 <__assert_fail@plt+0x4434>
   14238:	mvn	r2, #0
   1423c:	mvn	r3, #0
   14240:	strd	r2, [sp, #40]	; 0x28
   14244:	b	15818 <__assert_fail@plt+0x4404>
   14248:	ldrb	r3, [fp, #12]
   1424c:	cmp	r3, #0
   14250:	bne	157ac <__assert_fail@plt+0x4398>
   14254:	ldrd	r2, [sp, #40]	; 0x28
   14258:	cmp	r2, #0
   1425c:	sbcs	r3, r3, #0
   14260:	blt	157ac <__assert_fail@plt+0x4398>
   14264:	ldr	r3, [sp, #224]	; 0xe0
   14268:	and	r3, r3, #53248	; 0xd000
   1426c:	cmp	r3, #32768	; 0x8000
   14270:	bne	14298 <__assert_fail@plt+0x2e84>
   14274:	add	r3, sp, #256	; 0x100
   14278:	ldrd	r6, [r3]
   1427c:	mvn	r4, #0
   14280:	mvn	r5, #0
   14284:	ldr	r2, [sp, #264]	; 0x108
   14288:	sub	r3, r2, #1
   1428c:	cmn	r3, #-536870911	; 0xe0000001
   14290:	movhi	r2, #512	; 0x200
   14294:	b	157cc <__assert_fail@plt+0x43b8>
   14298:	mov	r3, #2
   1429c:	str	r3, [sp]
   142a0:	ldrd	r6, [sp, #40]	; 0x28
   142a4:	rsbs	r2, r6, #0
   142a8:	rsc	r3, r7, #0
   142ac:	ldr	r0, [sp, #28]
   142b0:	bl	111ec <lseek64@plt>
   142b4:	mov	r4, r0
   142b8:	mov	r5, r1
   142bc:	mvn	r0, #0
   142c0:	mvn	r1, #0
   142c4:	cmp	r5, r1
   142c8:	cmpeq	r4, r0
   142cc:	beq	157ac <__assert_fail@plt+0x4398>
   142d0:	adds	r2, r6, r4
   142d4:	adc	r3, r7, r5
   142d8:	mov	r6, r2
   142dc:	mov	r7, r3
   142e0:	b	14284 <__assert_fail@plt+0x2e70>
   142e4:	ldr	r4, [pc, #-2972]	; 13750 <__assert_fail@plt+0x233c>
   142e8:	mov	r0, r4
   142ec:	bl	19914 <__assert_fail@plt+0x8500>
   142f0:	mov	r5, r0
   142f4:	add	r3, r0, #8192	; 0x2000
   142f8:	mov	r7, #0
   142fc:	str	r7, [r3]
   14300:	str	r7, [r3, #4]
   14304:	mov	r0, r4
   14308:	bl	19914 <__assert_fail@plt+0x8500>
   1430c:	mov	r4, r0
   14310:	mov	r8, r5
   14314:	mov	r9, r7
   14318:	str	fp, [sp, #24]
   1431c:	ldrd	sl, [sp, #40]	; 0x28
   14320:	b	1435c <__assert_fail@plt+0x2f48>
   14324:	mov	r2, r0
   14328:	mov	r1, r4
   1432c:	add	r0, r8, r3
   14330:	bl	1112c <memcpy@plt>
   14334:	add	r2, r8, #8192	; 0x2000
   14338:	add	r1, r4, #8192	; 0x2000
   1433c:	ldr	r3, [r2]
   14340:	ldr	r1, [r1]
   14344:	add	r3, r3, r1
   14348:	str	r3, [r2]
   1434c:	mov	r0, r4
   14350:	mov	r4, r8
   14354:	mov	r8, r4
   14358:	mov	r4, r0
   1435c:	mov	r2, #8192	; 0x2000
   14360:	mov	r1, r4
   14364:	ldr	r0, [sp, #28]
   14368:	bl	192dc <__assert_fail@plt+0x7ec8>
   1436c:	sub	r3, r0, #1
   14370:	cmn	r3, #3
   14374:	bhi	143f4 <__assert_fail@plt+0x2fe0>
   14378:	ldrd	r2, [sp, #104]	; 0x68
   1437c:	adds	r2, r2, r0
   14380:	adc	r3, r3, #0
   14384:	strd	r2, [sp, #104]	; 0x68
   14388:	add	r3, r4, #8192	; 0x2000
   1438c:	str	r0, [r3]
   14390:	str	r9, [r3, #4]
   14394:	add	r7, r7, r0
   14398:	add	r3, r8, #8192	; 0x2000
   1439c:	ldr	r3, [r3]
   143a0:	add	r2, r0, r3
   143a4:	ldr	r1, [pc, #-3168]	; 1374c <__assert_fail@plt+0x2338>
   143a8:	cmp	r2, r1
   143ac:	bls	14324 <__assert_fail@plt+0x2f10>
   143b0:	add	r8, r8, #8192	; 0x2000
   143b4:	str	r4, [r8, #4]
   143b8:	add	r3, r5, #8192	; 0x2000
   143bc:	ldr	r3, [r3]
   143c0:	sub	r3, r7, r3
   143c4:	mov	r1, #0
   143c8:	cmp	fp, r1
   143cc:	cmpeq	sl, r3
   143d0:	bcs	143e8 <__assert_fail@plt+0x2fd4>
   143d4:	add	r2, r5, #8192	; 0x2000
   143d8:	mov	r7, r3
   143dc:	mov	r0, r5
   143e0:	ldr	r5, [r2, #4]
   143e4:	b	14354 <__assert_fail@plt+0x2f40>
   143e8:	ldr	r0, [pc, #-3232]	; 13750 <__assert_fail@plt+0x233c>
   143ec:	bl	19914 <__assert_fail@plt+0x8500>
   143f0:	b	14354 <__assert_fail@plt+0x2f40>
   143f4:	mov	r6, r0
   143f8:	ldr	fp, [sp, #24]
   143fc:	mov	r0, r4
   14400:	bl	16660 <__assert_fail@plt+0x524c>
   14404:	cmn	r6, #1
   14408:	movne	r4, r5
   1440c:	ldrdne	r0, [sp, #40]	; 0x28
   14410:	movne	ip, r7
   14414:	bne	14468 <__assert_fail@plt+0x3054>
   14418:	bl	112dc <__errno_location@plt>
   1441c:	ldr	r4, [r0]
   14420:	mov	r2, #5
   14424:	ldr	r1, [pc, #-3280]	; 1375c <__assert_fail@plt+0x2348>
   14428:	mov	r0, #0
   1442c:	bl	11174 <dcgettext@plt>
   14430:	mov	r6, r0
   14434:	ldr	r1, [sp, #68]	; 0x44
   14438:	mov	r0, #4
   1443c:	bl	19094 <__assert_fail@plt+0x7c80>
   14440:	mov	r3, r0
   14444:	mov	r2, r6
   14448:	mov	r1, r4
   1444c:	mov	r0, #0
   14450:	bl	1121c <error@plt>
   14454:	mov	r0, r5
   14458:	b	144f4 <__assert_fail@plt+0x30e0>
   1445c:	add	r4, r4, #8192	; 0x2000
   14460:	ldr	r4, [r4, #4]
   14464:	mov	ip, r3
   14468:	add	r3, r4, #8192	; 0x2000
   1446c:	ldr	r2, [r3]
   14470:	sub	r3, ip, r2
   14474:	mov	r7, #0
   14478:	cmp	r1, r7
   1447c:	cmpeq	r0, r3
   14480:	bcc	1445c <__assert_fail@plt+0x3048>
   14484:	mov	r0, ip
   14488:	mov	r1, #0
   1448c:	ldrd	r8, [sp, #40]	; 0x28
   14490:	cmp	r9, r1
   14494:	cmpeq	r8, ip
   14498:	movcc	r3, r8
   1449c:	subcc	r0, ip, r3
   144a0:	movcs	r0, #0
   144a4:	sub	r1, r2, r0
   144a8:	add	r0, r4, r0
   144ac:	bl	11674 <__assert_fail@plt+0x260>
   144b0:	add	r4, r4, #8192	; 0x2000
   144b4:	ldr	r0, [r4, #4]
   144b8:	b	144cc <__assert_fail@plt+0x30b8>
   144bc:	add	r4, r0, #8192	; 0x2000
   144c0:	ldr	r1, [r4]
   144c4:	bl	11674 <__assert_fail@plt+0x260>
   144c8:	ldr	r0, [r4, #4]
   144cc:	cmp	r0, #0
   144d0:	bne	144bc <__assert_fail@plt+0x30a8>
   144d4:	mov	r3, #1
   144d8:	str	r3, [sp, #36]	; 0x24
   144dc:	mov	r0, r5
   144e0:	b	144f4 <__assert_fail@plt+0x30e0>
   144e4:	add	r3, r0, #8192	; 0x2000
   144e8:	ldr	r4, [r3, #4]
   144ec:	bl	16660 <__assert_fail@plt+0x524c>
   144f0:	mov	r0, r4
   144f4:	cmp	r0, #0
   144f8:	bne	144e4 <__assert_fail@plt+0x30d0>
   144fc:	b	15848 <__assert_fail@plt+0x4434>
   14500:	ldr	r3, [sp, #68]	; 0x44
   14504:	str	r3, [sp, #4]
   14508:	mov	r3, #1
   1450c:	str	r3, [sp]
   14510:	mov	r2, #0
   14514:	mov	r3, #0
   14518:	ldr	r0, [sp, #28]
   1451c:	bl	11a50 <__assert_fail@plt+0x63c>
   14520:	mov	r4, r0
   14524:	mov	r5, r1
   14528:	b	157f0 <__assert_fail@plt+0x43dc>
   1452c:	subs	r4, r6, r0
   14530:	sbc	r5, r7, r1
   14534:	ldr	r3, [sp, #68]	; 0x44
   14538:	str	r3, [sp, #4]
   1453c:	mov	r3, #0
   14540:	str	r3, [sp]
   14544:	mov	r2, r4
   14548:	mov	r3, r5
   1454c:	ldr	r0, [sp, #28]
   14550:	bl	11a50 <__assert_fail@plt+0x63c>
   14554:	b	15814 <__assert_fail@plt+0x4400>
   14558:	ldr	r3, [sp, #36]	; 0x24
   1455c:	sub	r3, r3, #1
   14560:	ldr	r2, [sp, #48]	; 0x30
   14564:	str	r3, [r2, #52]	; 0x34
   14568:	add	r2, sp, #208	; 0xd0
   1456c:	ldr	r1, [sp, #28]
   14570:	mov	r0, #3
   14574:	bl	111c8 <__fxstat64@plt>
   14578:	cmp	r0, #0
   1457c:	blt	14660 <__assert_fail@plt+0x324c>
   14580:	ldr	r1, [sp, #224]	; 0xe0
   14584:	and	r3, r1, #61440	; 0xf000
   14588:	sub	r3, r3, #4096	; 0x1000
   1458c:	bics	r3, r3, #4096	; 0x1000
   14590:	movne	r3, #1
   14594:	moveq	r3, #0
   14598:	and	r2, r1, #45056	; 0xb000
   1459c:	cmp	r2, #32768	; 0x8000
   145a0:	moveq	r3, #0
   145a4:	andne	r3, r3, #1
   145a8:	cmp	r3, #0
   145ac:	beq	146c4 <__assert_fail@plt+0x32b0>
   145b0:	mvn	r3, #0
   145b4:	ldr	r6, [sp, #48]	; 0x30
   145b8:	str	r3, [r6, #52]	; 0x34
   145bc:	mov	r4, #0
   145c0:	strb	r4, [r6, #46]	; 0x2e
   145c4:	ldrb	r3, [fp, #2]
   145c8:	eor	r3, r3, #1
   145cc:	strb	r3, [r6, #44]	; 0x2c
   145d0:	mov	r2, #5
   145d4:	ldr	r1, [pc, #-3720]	; 13754 <__assert_fail@plt+0x2340>
   145d8:	mov	r0, r4
   145dc:	bl	11174 <dcgettext@plt>
   145e0:	mov	r5, r0
   145e4:	mov	r0, r6
   145e8:	bl	115c0 <__assert_fail@plt+0x1ac>
   145ec:	mov	r2, r0
   145f0:	mov	r1, #3
   145f4:	mov	r0, r4
   145f8:	bl	19160 <__assert_fail@plt+0x7d4c>
   145fc:	mov	r4, r0
   14600:	ldrb	r3, [r6, #44]	; 0x2c
   14604:	cmp	r3, #0
   14608:	ldreq	r0, [pc, #-3768]	; 13758 <__assert_fail@plt+0x2344>
   1460c:	bne	146b0 <__assert_fail@plt+0x329c>
   14610:	str	r0, [sp]
   14614:	mov	r3, r4
   14618:	mov	r2, r5
   1461c:	mov	r1, #0
   14620:	mov	r0, r1
   14624:	bl	1121c <error@plt>
   14628:	ldrb	r3, [fp, #2]
   1462c:	eor	r3, r3, #1
   14630:	ldr	r4, [sp, #48]	; 0x30
   14634:	strb	r3, [r4, #44]	; 0x2c
   14638:	mov	r0, r4
   1463c:	bl	115c0 <__assert_fail@plt+0x1ac>
   14640:	mov	r1, r0
   14644:	ldr	r0, [sp, #28]
   14648:	bl	115fc <__assert_fail@plt+0x1e8>
   1464c:	mvn	r3, #0
   14650:	str	r3, [r4, #48]	; 0x30
   14654:	mov	r3, #0
   14658:	str	r3, [sp, #36]	; 0x24
   1465c:	b	15860 <__assert_fail@plt+0x444c>
   14660:	bl	112dc <__errno_location@plt>
   14664:	ldr	r4, [r0]
   14668:	ldr	r6, [sp, #48]	; 0x30
   1466c:	str	r4, [r6, #52]	; 0x34
   14670:	mov	r2, #5
   14674:	ldr	r1, [pc, #-3872]	; 1375c <__assert_fail@plt+0x2348>
   14678:	mov	r0, #0
   1467c:	bl	11174 <dcgettext@plt>
   14680:	mov	r5, r0
   14684:	mov	r0, r6
   14688:	bl	115c0 <__assert_fail@plt+0x1ac>
   1468c:	mov	r1, r0
   14690:	mov	r0, #4
   14694:	bl	19094 <__assert_fail@plt+0x7c80>
   14698:	mov	r3, r0
   1469c:	mov	r2, r5
   146a0:	mov	r1, r4
   146a4:	mov	r0, #0
   146a8:	bl	1121c <error@plt>
   146ac:	b	14628 <__assert_fail@plt+0x3214>
   146b0:	mov	r2, #5
   146b4:	ldr	r1, [pc, #-3932]	; 13760 <__assert_fail@plt+0x234c>
   146b8:	mov	r0, #0
   146bc:	bl	11174 <dcgettext@plt>
   146c0:	b	14610 <__assert_fail@plt+0x31fc>
   146c4:	ldr	r3, [sp, #36]	; 0x24
   146c8:	cmp	r3, #0
   146cc:	beq	14628 <__assert_fail@plt+0x3214>
   146d0:	ldr	r0, [sp, #80]	; 0x50
   146d4:	ldr	r3, [sp, #64]	; 0x40
   146d8:	cmp	r3, #0
   146dc:	movne	r0, #1
   146e0:	ldr	r4, [sp, #48]	; 0x30
   146e4:	mov	r3, r4
   146e8:	ldr	r5, [sp, #28]
   146ec:	str	r5, [r3, #48]	; 0x30
   146f0:	ldrd	r2, [sp, #104]	; 0x68
   146f4:	strd	r2, [r4, #8]
   146f8:	ldr	r3, [sp, #288]	; 0x120
   146fc:	str	r3, [r4, #16]
   14700:	ldr	r3, [sp, #292]	; 0x124
   14704:	str	r3, [r4, #20]
   14708:	ldrd	r2, [sp, #208]	; 0xd0
   1470c:	strd	r2, [r4, #24]
   14710:	add	r3, sp, #304	; 0x130
   14714:	ldrd	r2, [r3]
   14718:	strd	r2, [r4, #32]
   1471c:	str	r1, [r4, #40]	; 0x28
   14720:	str	r0, [r4, #56]	; 0x38
   14724:	mov	r2, #0
   14728:	mov	r3, #0
   1472c:	strd	r2, [r4, #72]	; 0x48
   14730:	mov	r3, #0
   14734:	strb	r3, [r4, #44]	; 0x2c
   14738:	mov	r0, r4
   1473c:	bl	115c0 <__assert_fail@plt+0x1ac>
   14740:	mov	r1, r0
   14744:	mov	r0, r5
   14748:	bl	11ef0 <__assert_fail@plt+0xadc>
   1474c:	strb	r0, [r4, #45]	; 0x2d
   14750:	b	15860 <__assert_fail@plt+0x444c>
   14754:	ldr	r0, [sp, #28]
   14758:	bl	113fc <close@plt>
   1475c:	cmp	r0, #0
   14760:	beq	15860 <__assert_fail@plt+0x444c>
   14764:	bl	112dc <__errno_location@plt>
   14768:	ldr	r5, [r0]
   1476c:	mov	r2, #5
   14770:	ldr	r1, [pc, #2696]	; 15200 <__assert_fail@plt+0x3dec>
   14774:	mov	r0, #0
   14778:	bl	11174 <dcgettext@plt>
   1477c:	mov	r6, r0
   14780:	ldr	r0, [sp, #48]	; 0x30
   14784:	bl	115c0 <__assert_fail@plt+0x1ac>
   14788:	mov	r1, r0
   1478c:	mov	r0, #4
   14790:	bl	19094 <__assert_fail@plt+0x7c80>
   14794:	mov	r3, r0
   14798:	mov	r2, r6
   1479c:	mov	r1, r5
   147a0:	mov	r0, #0
   147a4:	bl	1121c <error@plt>
   147a8:	str	r4, [sp, #36]	; 0x24
   147ac:	b	15860 <__assert_fail@plt+0x444c>
   147b0:	ldr	r9, [sp, #80]	; 0x50
   147b4:	mov	r8, r2
   147b8:	ldr	r3, [pc, #2728]	; 15268 <__assert_fail@plt+0x3e54>
   147bc:	ldrb	r3, [r3, #7]
   147c0:	str	r3, [sp, #56]	; 0x38
   147c4:	cmp	r3, #0
   147c8:	beq	15bf0 <__assert_fail@plt+0x47dc>
   147cc:	ldr	r2, [sp, #76]	; 0x4c
   147d0:	str	r2, [sp, #40]	; 0x28
   147d4:	mov	r3, #80	; 0x50
   147d8:	mul	r3, r3, r8
   147dc:	mov	r1, r3
   147e0:	str	r3, [sp, #72]	; 0x48
   147e4:	mov	r3, r2
   147e8:	add	r7, r3, r1
   147ec:	mov	r4, r3
   147f0:	mov	r6, #0
   147f4:	mvn	sl, #0
   147f8:	mov	fp, #1
   147fc:	b	159c8 <__assert_fail@plt+0x45b4>
   14800:	cmp	r6, #0
   14804:	beq	15bf0 <__assert_fail@plt+0x47dc>
   14808:	add	r2, sp, #104	; 0x68
   1480c:	mov	r1, #1
   14810:	mov	r0, #3
   14814:	bl	111c8 <__fxstat64@plt>
   14818:	cmp	r0, #0
   1481c:	blt	14858 <__assert_fail@plt+0x3444>
   14820:	ldr	r2, [pc, #2624]	; 15268 <__assert_fail@plt+0x3e54>
   14824:	ldr	r3, [sp, #120]	; 0x78
   14828:	and	r3, r3, #61440	; 0xf000
   1482c:	cmp	r3, #4096	; 0x1000
   14830:	movne	r3, #0
   14834:	moveq	r3, #1
   14838:	strb	r3, [r2, #13]
   1483c:	ldrb	r3, [r2, #3]
   14840:	cmp	r3, #0
   14844:	bne	14ca8 <__assert_fail@plt+0x3894>
   14848:	ldr	r4, [sp, #76]	; 0x4c
   1484c:	mov	sl, #0
   14850:	ldr	r5, [pc, #2556]	; 15254 <__assert_fail@plt+0x3e40>
   14854:	b	14888 <__assert_fail@plt+0x3474>
   14858:	bl	112dc <__errno_location@plt>
   1485c:	ldr	r4, [r0]
   14860:	mov	r2, #5
   14864:	ldr	r1, [pc, #2456]	; 15204 <__assert_fail@plt+0x3df0>
   14868:	mov	r0, #0
   1486c:	bl	11174 <dcgettext@plt>
   14870:	mov	r2, r0
   14874:	mov	r1, r4
   14878:	mov	r0, #1
   1487c:	bl	1121c <error@plt>
   14880:	add	sl, sl, #1
   14884:	add	r4, r4, #80	; 0x50
   14888:	cmp	sl, r8
   1488c:	beq	148b4 <__assert_fail@plt+0x34a0>
   14890:	ldrb	r3, [r4, #44]	; 0x2c
   14894:	cmp	r3, #0
   14898:	bne	14880 <__assert_fail@plt+0x346c>
   1489c:	mov	r1, r5
   148a0:	ldr	r0, [r4]
   148a4:	bl	110cc <strcmp@plt>
   148a8:	cmp	r0, #0
   148ac:	bne	14880 <__assert_fail@plt+0x346c>
   148b0:	b	14ca8 <__assert_fail@plt+0x3894>
   148b4:	ldr	r3, [sp, #76]	; 0x4c
   148b8:	mov	r2, #0
   148bc:	b	148c8 <__assert_fail@plt+0x34b4>
   148c0:	add	r2, r2, #1
   148c4:	add	r3, r3, #80	; 0x50
   148c8:	cmp	sl, r2
   148cc:	beq	148ec <__assert_fail@plt+0x34d8>
   148d0:	ldr	r1, [r3, #48]	; 0x30
   148d4:	cmp	r1, #0
   148d8:	blt	148c0 <__assert_fail@plt+0x34ac>
   148dc:	ldrb	r1, [r3, #45]	; 0x2d
   148e0:	cmp	r1, #0
   148e4:	beq	148c0 <__assert_fail@plt+0x34ac>
   148e8:	b	14ca8 <__assert_fail@plt+0x3894>
   148ec:	ldr	r3, [sp, #76]	; 0x4c
   148f0:	mov	r2, #0
   148f4:	b	14900 <__assert_fail@plt+0x34ec>
   148f8:	add	r2, r2, #1
   148fc:	add	r3, r3, #80	; 0x50
   14900:	cmp	sl, r2
   14904:	beq	14ca8 <__assert_fail@plt+0x3894>
   14908:	ldr	r1, [r3, #48]	; 0x30
   1490c:	cmp	r1, #0
   14910:	blt	148f8 <__assert_fail@plt+0x34e4>
   14914:	ldrb	r1, [r3, #45]	; 0x2d
   14918:	cmp	r1, #0
   1491c:	bne	148f8 <__assert_fail@plt+0x34e4>
   14920:	str	r1, [sp, #32]
   14924:	mov	r4, #0
   14928:	mov	r6, #80	; 0x50
   1492c:	mov	r5, #3
   14930:	b	14938 <__assert_fail@plt+0x3524>
   14934:	add	r4, r4, #1
   14938:	cmp	sl, r4
   1493c:	beq	15a18 <__assert_fail@plt+0x4604>
   14940:	mul	r3, r6, r4
   14944:	add	r2, sp, #208	; 0xd0
   14948:	ldr	r1, [sp, #76]	; 0x4c
   1494c:	ldr	r1, [r1, r3]
   14950:	mov	r0, r5
   14954:	bl	11408 <__lxstat64@plt>
   14958:	cmp	r0, #0
   1495c:	bne	14934 <__assert_fail@plt+0x3520>
   14960:	ldr	r3, [sp, #224]	; 0xe0
   14964:	and	r3, r3, #61440	; 0xf000
   14968:	cmp	r3, #40960	; 0xa000
   1496c:	bne	14934 <__assert_fail@plt+0x3520>
   14970:	b	14ca8 <__assert_fail@plt+0x3894>
   14974:	ldr	r2, [r3, #48]	; 0x30
   14978:	cmp	r2, #0
   1497c:	blt	14994 <__assert_fail@plt+0x3580>
   14980:	ldr	r2, [r3, #40]	; 0x28
   14984:	and	r2, r2, #61440	; 0xf000
   14988:	cmp	r2, #4096	; 0x1000
   1498c:	cmpne	r2, #32768	; 0x8000
   14990:	bne	14ca8 <__assert_fail@plt+0x3894>
   14994:	add	r1, r1, #1
   14998:	add	r3, r3, #80	; 0x50
   1499c:	cmp	sl, r1
   149a0:	bne	14974 <__assert_fail@plt+0x3560>
   149a4:	ldr	r3, [sp, #52]	; 0x34
   149a8:	cmp	r3, #0
   149ac:	bne	149c0 <__assert_fail@plt+0x35ac>
   149b0:	ldr	r3, [pc, #2212]	; 1525c <__assert_fail@plt+0x3e48>
   149b4:	ldr	r3, [r3, #4]
   149b8:	cmp	r3, #2
   149bc:	beq	14ca8 <__assert_fail@plt+0x3894>
   149c0:	bl	112ac <inotify_init@plt>
   149c4:	subs	fp, r0, #0
   149c8:	blt	14c80 <__assert_fail@plt+0x386c>
   149cc:	ldr	r3, [pc, #2192]	; 15264 <__assert_fail@plt+0x3e50>
   149d0:	ldr	r0, [r3]
   149d4:	bl	111a4 <fflush_unlocked@plt>
   149d8:	subs	r3, r0, #0
   149dc:	str	r3, [sp, #60]	; 0x3c
   149e0:	bne	14a44 <__assert_fail@plt+0x3630>
   149e4:	mov	r1, #0
   149e8:	str	r1, [sp]
   149ec:	ldr	r3, [pc, #2068]	; 15208 <__assert_fail@plt+0x3df4>
   149f0:	ldr	r2, [pc, #2068]	; 1520c <__assert_fail@plt+0x3df8>
   149f4:	mov	r0, sl
   149f8:	bl	16fa8 <__assert_fail@plt+0x5b94>
   149fc:	subs	r3, r0, #0
   14a00:	str	r3, [sp, #24]
   14a04:	beq	14a6c <__assert_fail@plt+0x3658>
   14a08:	ldr	r3, [pc, #2124]	; 1525c <__assert_fail@plt+0x3e48>
   14a0c:	ldr	r2, [r3, #4]
   14a10:	ldr	r3, [pc, #2040]	; 15210 <__assert_fail@plt+0x3dfc>
   14a14:	cmp	r2, #1
   14a18:	movne	r3, #2
   14a1c:	str	r3, [sp, #64]	; 0x40
   14a20:	ldr	r7, [sp, #76]	; 0x4c
   14a24:	ldr	r3, [sp, #32]
   14a28:	str	r3, [sp, #36]	; 0x24
   14a2c:	mov	r3, #0
   14a30:	str	r3, [sp, #28]
   14a34:	str	r3, [sp, #48]	; 0x30
   14a38:	ldr	r3, [sp, #56]	; 0x38
   14a3c:	str	r3, [sp, #80]	; 0x50
   14a40:	b	14bb8 <__assert_fail@plt+0x37a4>
   14a44:	bl	112dc <__errno_location@plt>
   14a48:	ldr	r4, [r0]
   14a4c:	mov	r2, #5
   14a50:	ldr	r1, [pc, #2032]	; 15248 <__assert_fail@plt+0x3e34>
   14a54:	mov	r0, #0
   14a58:	bl	11174 <dcgettext@plt>
   14a5c:	mov	r2, r0
   14a60:	mov	r1, r4
   14a64:	mov	r0, #1
   14a68:	bl	1121c <error@plt>
   14a6c:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   14a70:	mov	r0, r5
   14a74:	bl	162f8 <__assert_fail@plt+0x4ee4>
   14a78:	mov	r6, r0
   14a7c:	ldrb	r3, [r5, r0]
   14a80:	str	r3, [sp, #68]	; 0x44
   14a84:	mov	r0, r5
   14a88:	bl	160a4 <__assert_fail@plt+0x4c90>
   14a8c:	sub	r0, r0, r5
   14a90:	str	r0, [r7, #68]	; 0x44
   14a94:	mov	r3, #0
   14a98:	strb	r3, [r5, r6]
   14a9c:	cmp	r6, r3
   14aa0:	ldrne	r1, [r7]
   14aa4:	ldreq	r1, [pc, #1896]	; 15214 <__assert_fail@plt+0x3e00>
   14aa8:	ldr	r2, [pc, #1896]	; 15218 <__assert_fail@plt+0x3e04>
   14aac:	mov	r0, fp
   14ab0:	bl	112d0 <inotify_add_watch@plt>
   14ab4:	str	r0, [r7, #64]	; 0x40
   14ab8:	ldr	r3, [r7]
   14abc:	ldrb	r2, [sp, #68]	; 0x44
   14ac0:	strb	r2, [r3, r6]
   14ac4:	ldr	r3, [r7, #64]	; 0x40
   14ac8:	cmp	r3, #0
   14acc:	bge	14c08 <__assert_fail@plt+0x37f4>
   14ad0:	bl	112dc <__errno_location@plt>
   14ad4:	ldr	r5, [r0]
   14ad8:	cmp	r5, #28
   14adc:	beq	14b18 <__assert_fail@plt+0x3704>
   14ae0:	mov	r2, #5
   14ae4:	ldr	r1, [pc, #1840]	; 1521c <__assert_fail@plt+0x3e08>
   14ae8:	mov	r0, #0
   14aec:	bl	11174 <dcgettext@plt>
   14af0:	mov	r6, r0
   14af4:	ldr	r1, [r7]
   14af8:	mov	r0, #4
   14afc:	bl	19094 <__assert_fail@plt+0x7c80>
   14b00:	mov	r3, r0
   14b04:	mov	r2, r6
   14b08:	mov	r1, r5
   14b0c:	mov	r0, #0
   14b10:	bl	1121c <error@plt>
   14b14:	b	14c64 <__assert_fail@plt+0x3850>
   14b18:	mov	r2, #5
   14b1c:	ldr	r1, [pc, #1816]	; 1523c <__assert_fail@plt+0x3e28>
   14b20:	mov	r0, #0
   14b24:	bl	11174 <dcgettext@plt>
   14b28:	mov	r2, r0
   14b2c:	mov	r1, #0
   14b30:	mov	r0, r1
   14b34:	bl	1121c <error@plt>
   14b38:	b	14c64 <__assert_fail@plt+0x3850>
   14b3c:	ldr	r3, [r4, #48]	; 0x30
   14b40:	ldr	r2, [sp, #36]	; 0x24
   14b44:	ldr	r1, [sp, #56]	; 0x38
   14b48:	cmn	r3, #1
   14b4c:	movne	r2, r1
   14b50:	str	r2, [sp, #36]	; 0x24
   14b54:	bl	112dc <__errno_location@plt>
   14b58:	ldr	r5, [r0]
   14b5c:	bic	r3, r5, #16
   14b60:	cmp	r3, #12
   14b64:	beq	14c44 <__assert_fail@plt+0x3830>
   14b68:	ldr	r3, [r4, #52]	; 0x34
   14b6c:	cmp	r5, r3
   14b70:	beq	14ba8 <__assert_fail@plt+0x3794>
   14b74:	mov	r2, #5
   14b78:	ldr	r1, [pc, #1720]	; 15238 <__assert_fail@plt+0x3e24>
   14b7c:	mov	r0, #0
   14b80:	bl	11174 <dcgettext@plt>
   14b84:	mov	r6, r0
   14b88:	ldr	r1, [r4]
   14b8c:	mov	r0, #4
   14b90:	bl	19094 <__assert_fail@plt+0x7c80>
   14b94:	mov	r3, r0
   14b98:	mov	r2, r6
   14b9c:	mov	r1, r5
   14ba0:	mov	r0, #0
   14ba4:	bl	1121c <error@plt>
   14ba8:	ldr	r3, [sp, #28]
   14bac:	add	r3, r3, #1
   14bb0:	str	r3, [sp, #28]
   14bb4:	add	r7, r7, #80	; 0x50
   14bb8:	ldr	r3, [sp, #28]
   14bbc:	cmp	sl, r3
   14bc0:	beq	15a24 <__assert_fail@plt+0x4610>
   14bc4:	mov	r4, r7
   14bc8:	ldrb	r3, [r7, #44]	; 0x2c
   14bcc:	cmp	r3, #0
   14bd0:	bne	14ba8 <__assert_fail@plt+0x3794>
   14bd4:	ldr	r5, [r7]
   14bd8:	mov	r0, r5
   14bdc:	bl	112a0 <strlen@plt>
   14be0:	ldr	r3, [sp, #48]	; 0x30
   14be4:	cmp	r3, r0
   14be8:	movcc	r3, r0
   14bec:	str	r3, [sp, #48]	; 0x30
   14bf0:	mvn	r3, #0
   14bf4:	str	r3, [r7, #60]	; 0x3c
   14bf8:	ldr	r3, [pc, #1628]	; 1525c <__assert_fail@plt+0x3e48>
   14bfc:	ldr	r3, [r3, #4]
   14c00:	cmp	r3, #1
   14c04:	beq	14a70 <__assert_fail@plt+0x365c>
   14c08:	ldr	r2, [sp, #64]	; 0x40
   14c0c:	ldr	r1, [r4]
   14c10:	mov	r0, fp
   14c14:	bl	112d0 <inotify_add_watch@plt>
   14c18:	str	r0, [r4, #60]	; 0x3c
   14c1c:	cmp	r0, #0
   14c20:	blt	14b3c <__assert_fail@plt+0x3728>
   14c24:	mov	r1, r4
   14c28:	ldr	r0, [sp, #24]
   14c2c:	bl	174f4 <__assert_fail@plt+0x60e0>
   14c30:	cmp	r0, #0
   14c34:	beq	14d30 <__assert_fail@plt+0x391c>
   14c38:	ldr	r3, [sp, #80]	; 0x50
   14c3c:	str	r3, [sp, #32]
   14c40:	b	14ba8 <__assert_fail@plt+0x3794>
   14c44:	mov	r2, #5
   14c48:	ldr	r1, [pc, #1516]	; 1523c <__assert_fail@plt+0x3e28>
   14c4c:	mov	r0, #0
   14c50:	bl	11174 <dcgettext@plt>
   14c54:	mov	r2, r0
   14c58:	mov	r1, #0
   14c5c:	mov	r0, r1
   14c60:	bl	1121c <error@plt>
   14c64:	ldr	r0, [sp, #24]
   14c68:	bl	17138 <__assert_fail@plt+0x5d24>
   14c6c:	mov	r0, fp
   14c70:	bl	113fc <close@plt>
   14c74:	bl	112dc <__errno_location@plt>
   14c78:	mov	r3, #0
   14c7c:	str	r3, [r0]
   14c80:	bl	112dc <__errno_location@plt>
   14c84:	ldr	r4, [r0]
   14c88:	mov	r2, #5
   14c8c:	ldr	r1, [pc, #1420]	; 15220 <__assert_fail@plt+0x3e0c>
   14c90:	mov	r0, #0
   14c94:	bl	11174 <dcgettext@plt>
   14c98:	mov	r2, r0
   14c9c:	mov	r1, r4
   14ca0:	mov	r0, #0
   14ca4:	bl	1121c <error@plt>
   14ca8:	ldr	r3, [pc, #1464]	; 15268 <__assert_fail@plt+0x3e54>
   14cac:	mov	r2, #1
   14cb0:	strb	r2, [r3, #3]
   14cb4:	ldr	r3, [r3, #8]
   14cb8:	cmp	r3, #0
   14cbc:	movne	r3, #0
   14cc0:	strne	r3, [sp, #28]
   14cc4:	bne	14d08 <__assert_fail@plt+0x38f4>
   14cc8:	ldr	r3, [pc, #1420]	; 1525c <__assert_fail@plt+0x3e48>
   14ccc:	ldr	r3, [r3, #4]
   14cd0:	cmp	r3, #2
   14cd4:	cmpeq	r8, r2
   14cd8:	movne	r3, #0
   14cdc:	strne	r3, [sp, #28]
   14ce0:	bne	14d08 <__assert_fail@plt+0x38f4>
   14ce4:	ldr	r2, [sp, #76]	; 0x4c
   14ce8:	ldr	r3, [r2, #48]	; 0x30
   14cec:	cmn	r3, #1
   14cf0:	beq	153e4 <__assert_fail@plt+0x3fd0>
   14cf4:	ldr	r3, [r2, #40]	; 0x28
   14cf8:	and	r3, r3, #61440	; 0xf000
   14cfc:	subs	r3, r3, #32768	; 0x8000
   14d00:	movne	r3, #1
   14d04:	str	r3, [sp, #28]
   14d08:	ldr	r3, [sp, #28]
   14d0c:	str	r3, [sp, #32]
   14d10:	sub	r3, r8, #1
   14d14:	str	r3, [sp, #36]	; 0x24
   14d18:	mov	r3, #0
   14d1c:	str	r3, [sp, #48]	; 0x30
   14d20:	str	r3, [sp, #60]	; 0x3c
   14d24:	str	r3, [sp, #64]	; 0x40
   14d28:	mov	r9, r8
   14d2c:	b	15cec <__assert_fail@plt+0x48d8>
   14d30:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   14d34:	ldr	r3, [sp, #72]	; 0x48
   14d38:	sub	r3, r3, #80	; 0x50
   14d3c:	ldr	r2, [sp, #76]	; 0x4c
   14d40:	add	r3, r2, r3
   14d44:	add	r1, sp, #320	; 0x140
   14d48:	str	r3, [r1, #-220]!	; 0xffffff24
   14d4c:	str	r1, [sp, #28]
   14d50:	mov	r6, r2
   14d54:	mov	r5, #0
   14d58:	ldr	r7, [pc, #1276]	; 1525c <__assert_fail@plt+0x3e48>
   14d5c:	b	14d80 <__assert_fail@plt+0x396c>
   14d60:	mov	r1, #0
   14d64:	mov	r0, r6
   14d68:	bl	12854 <__assert_fail@plt+0x1440>
   14d6c:	ldr	r1, [sp, #28]
   14d70:	mov	r0, r4
   14d74:	bl	12668 <__assert_fail@plt+0x1254>
   14d78:	add	r5, r5, #1
   14d7c:	add	r6, r6, #80	; 0x50
   14d80:	cmp	sl, r5
   14d84:	beq	14e3c <__assert_fail@plt+0x3a28>
   14d88:	mov	r4, r6
   14d8c:	ldrb	r3, [r6, #44]	; 0x2c
   14d90:	cmp	r3, #0
   14d94:	bne	14d78 <__assert_fail@plt+0x3964>
   14d98:	ldr	r3, [r7, #4]
   14d9c:	cmp	r3, #1
   14da0:	beq	14d60 <__assert_fail@plt+0x394c>
   14da4:	ldr	r3, [r6, #48]	; 0x30
   14da8:	cmn	r3, #1
   14dac:	beq	14d6c <__assert_fail@plt+0x3958>
   14db0:	add	r2, sp, #208	; 0xd0
   14db4:	ldr	r1, [r6]
   14db8:	mov	r0, #3
   14dbc:	bl	113c0 <__xstat64@plt>
   14dc0:	cmp	r0, #0
   14dc4:	bne	14d6c <__assert_fail@plt+0x3958>
   14dc8:	ldrd	r0, [r6, #24]
   14dcc:	ldrd	r2, [sp, #208]	; 0xd0
   14dd0:	cmp	r1, r3
   14dd4:	cmpeq	r0, r2
   14dd8:	bne	14df4 <__assert_fail@plt+0x39e0>
   14ddc:	ldrd	r0, [r6, #32]
   14de0:	add	r3, sp, #304	; 0x130
   14de4:	ldrd	r2, [r3]
   14de8:	cmp	r1, r3
   14dec:	cmpeq	r0, r2
   14df0:	beq	14d6c <__assert_fail@plt+0x3958>
   14df4:	bl	112dc <__errno_location@plt>
   14df8:	ldr	r5, [r0]
   14dfc:	mov	r2, #5
   14e00:	ldr	r1, [pc, #1052]	; 15224 <__assert_fail@plt+0x3e10>
   14e04:	mov	r0, #0
   14e08:	bl	11174 <dcgettext@plt>
   14e0c:	mov	r6, r0
   14e10:	mov	r0, r4
   14e14:	bl	115c0 <__assert_fail@plt+0x1ac>
   14e18:	mov	r1, r0
   14e1c:	mov	r0, #4
   14e20:	bl	19094 <__assert_fail@plt+0x7c80>
   14e24:	mov	r3, r0
   14e28:	mov	r2, r6
   14e2c:	mov	r1, r5
   14e30:	mov	r0, #0
   14e34:	bl	1121c <error@plt>
   14e38:	b	14c64 <__assert_fail@plt+0x3850>
   14e3c:	ldr	r3, [sp, #48]	; 0x30
   14e40:	add	r3, r3, #17
   14e44:	str	r3, [sp, #36]	; 0x24
   14e48:	mov	r0, r3
   14e4c:	bl	19914 <__assert_fail@plt+0x8500>
   14e50:	str	r0, [sp, #28]
   14e54:	mov	r3, #0
   14e58:	mov	r1, #3
   14e5c:	str	r1, [sp, #48]	; 0x30
   14e60:	vldr	d9, [pc, #896]	; 151e8 <__assert_fail@plt+0x3dd4>
   14e64:	vldr	d11, [pc, #900]	; 151f0 <__assert_fail@plt+0x3ddc>
   14e68:	vldr	d10, [pc, #904]	; 151f8 <__assert_fail@plt+0x3de4>
   14e6c:	str	r9, [sp, #32]
   14e70:	mov	r9, r3
   14e74:	str	r8, [sp, #72]	; 0x48
   14e78:	mov	r8, r3
   14e7c:	b	151c0 <__assert_fail@plt+0x3dac>
   14e80:	ldr	r3, [pc, #992]	; 15268 <__assert_fail@plt+0x3e54>
   14e84:	ldrb	r3, [r3, #2]
   14e88:	cmp	r3, #0
   14e8c:	bne	151d0 <__assert_fail@plt+0x3dbc>
   14e90:	ldr	r0, [sp, #24]
   14e94:	bl	16b3c <__assert_fail@plt+0x5728>
   14e98:	cmp	r0, #0
   14e9c:	bne	151d0 <__assert_fail@plt+0x3dbc>
   14ea0:	mov	r2, #5
   14ea4:	ldr	r1, [pc, #948]	; 15260 <__assert_fail@plt+0x3e4c>
   14ea8:	bl	11174 <dcgettext@plt>
   14eac:	mov	r2, r0
   14eb0:	mov	r1, #0
   14eb4:	mov	r0, #1
   14eb8:	bl	1121c <error@plt>
   14ebc:	mov	r0, #0
   14ec0:	bl	11294 <exit@plt>
   14ec4:	ldr	r2, [sp, #32]
   14ec8:	str	fp, [sp, #208]	; 0xd0
   14ecc:	strh	r4, [sp, #212]	; 0xd4
   14ed0:	str	r4, [sp, #216]	; 0xd8
   14ed4:	mov	r3, #0
   14ed8:	strh	r3, [sp, #222]	; 0xde
   14edc:	strh	r3, [sp, #220]	; 0xdc
   14ee0:	ldrb	r1, [r5, #13]
   14ee4:	mov	r3, #16
   14ee8:	add	r1, r1, #1
   14eec:	add	r0, sp, #208	; 0xd0
   14ef0:	bl	111d4 <__poll_chk@plt>
   14ef4:	cmp	r0, #0
   14ef8:	bne	14f84 <__assert_fail@plt+0x3b70>
   14efc:	ldr	r0, [r5, #8]
   14f00:	cmp	r0, #0
   14f04:	beq	14ec4 <__assert_fail@plt+0x3ab0>
   14f08:	cmp	r6, #0
   14f0c:	bne	14ebc <__assert_fail@plt+0x3aa8>
   14f10:	mov	r1, #0
   14f14:	bl	1127c <kill@plt>
   14f18:	cmp	r0, #0
   14f1c:	beq	14f38 <__assert_fail@plt+0x3b24>
   14f20:	bl	112dc <__errno_location@plt>
   14f24:	ldr	r3, [r0]
   14f28:	cmp	r3, #1
   14f2c:	ldrne	r2, [sp, #60]	; 0x3c
   14f30:	ldrne	r6, [sp, #80]	; 0x50
   14f34:	bne	14ec8 <__assert_fail@plt+0x3ab4>
   14f38:	vcmpe.f64	d8, d9
   14f3c:	vmrs	APSR_nzcv, fpscr
   14f40:	bls	14f7c <__assert_fail@plt+0x3b68>
   14f44:	vcmpe.f64	d8, d11
   14f48:	vmrs	APSR_nzcv, fpscr
   14f4c:	ldrpl	r2, [sp, #32]
   14f50:	bpl	14ec8 <__assert_fail@plt+0x3ab4>
   14f54:	vmul.f64	d6, d8, d10
   14f58:	vcvt.s32.f64	s15, d6
   14f5c:	vcvt.f64.s32	d5, s15
   14f60:	vcmpe.f64	d6, d5
   14f64:	vmrs	APSR_nzcv, fpscr
   14f68:	movgt	r2, #1
   14f6c:	movle	r2, #0
   14f70:	vmov	r3, s15
   14f74:	add	r2, r3, r2
   14f78:	b	14ec8 <__assert_fail@plt+0x3ab4>
   14f7c:	ldr	r2, [sp, #60]	; 0x3c
   14f80:	b	14ec8 <__assert_fail@plt+0x3ab4>
   14f84:	str	r6, [sp, #68]	; 0x44
   14f88:	blt	15008 <__assert_fail@plt+0x3bf4>
   14f8c:	ldrsh	r3, [sp, #222]	; 0xde
   14f90:	cmp	r3, #0
   14f94:	bne	15030 <__assert_fail@plt+0x3c1c>
   14f98:	ldr	r2, [sp, #36]	; 0x24
   14f9c:	ldr	r1, [sp, #28]
   14fa0:	mov	r0, fp
   14fa4:	bl	192dc <__assert_fail@plt+0x7ec8>
   14fa8:	subs	r9, r0, #0
   14fac:	beq	14fc8 <__assert_fail@plt+0x3bb4>
   14fb0:	cmn	r9, #1
   14fb4:	bne	15040 <__assert_fail@plt+0x3c2c>
   14fb8:	bl	112dc <__errno_location@plt>
   14fbc:	ldr	r3, [r0]
   14fc0:	cmp	r3, #22
   14fc4:	bne	15094 <__assert_fail@plt+0x3c80>
   14fc8:	ldr	r3, [sp, #48]	; 0x30
   14fcc:	cmp	r3, #0
   14fd0:	beq	15094 <__assert_fail@plt+0x3c80>
   14fd4:	ldr	r3, [sp, #48]	; 0x30
   14fd8:	sub	r3, r3, #1
   14fdc:	str	r3, [sp, #48]	; 0x30
   14fe0:	ldr	r3, [sp, #36]	; 0x24
   14fe4:	lsl	r3, r3, #1
   14fe8:	str	r3, [sp, #36]	; 0x24
   14fec:	mov	r1, r3
   14ff0:	ldr	r0, [sp, #28]
   14ff4:	bl	19948 <__assert_fail@plt+0x8534>
   14ff8:	str	r0, [sp, #28]
   14ffc:	mov	r9, #0
   15000:	mov	r8, r9
   15004:	b	151c0 <__assert_fail@plt+0x3dac>
   15008:	bl	112dc <__errno_location@plt>
   1500c:	ldr	r4, [r0]
   15010:	mov	r2, #5
   15014:	ldr	r1, [pc, #524]	; 15228 <__assert_fail@plt+0x3e14>
   15018:	mov	r0, #0
   1501c:	bl	11174 <dcgettext@plt>
   15020:	mov	r2, r0
   15024:	mov	r1, r4
   15028:	mov	r0, #1
   1502c:	bl	1121c <error@plt>
   15030:	mov	r0, #13
   15034:	bl	110c0 <raise@plt>
   15038:	mov	r0, #1
   1503c:	bl	11294 <exit@plt>
   15040:	sub	r3, r9, #1
   15044:	cmn	r3, #3
   15048:	bhi	15094 <__assert_fail@plt+0x3c80>
   1504c:	mov	r8, #0
   15050:	ldr	r3, [sp, #28]
   15054:	add	r5, r3, r8
   15058:	ldr	r2, [r5, #12]
   1505c:	add	r3, r8, #16
   15060:	add	r8, r2, r3
   15064:	ldr	r7, [r5, #4]
   15068:	clz	r3, r2
   1506c:	lsr	r3, r3, #5
   15070:	ands	r3, r3, r7, lsr #10
   15074:	bne	15108 <__assert_fail@plt+0x3cf4>
   15078:	cmp	r2, #0
   1507c:	beq	153b8 <__assert_fail@plt+0x3fa4>
   15080:	ldr	r4, [sp, #40]	; 0x28
   15084:	mov	r6, #0
   15088:	add	r3, r5, #16
   1508c:	str	r3, [sp, #84]	; 0x54
   15090:	b	1511c <__assert_fail@plt+0x3d08>
   15094:	bl	112dc <__errno_location@plt>
   15098:	ldr	r4, [r0]
   1509c:	mov	r2, #5
   150a0:	ldr	r1, [pc, #388]	; 1522c <__assert_fail@plt+0x3e18>
   150a4:	mov	r0, #0
   150a8:	bl	11174 <dcgettext@plt>
   150ac:	mov	r2, r0
   150b0:	mov	r1, r4
   150b4:	mov	r0, #1
   150b8:	bl	1121c <error@plt>
   150bc:	add	r3, r3, #1
   150c0:	cmp	sl, r3
   150c4:	beq	15078 <__assert_fail@plt+0x3c64>
   150c8:	ldr	r1, [sp, #76]	; 0x4c
   150cc:	mla	r1, r0, r3, r1
   150d0:	ldr	ip, [r5]
   150d4:	ldr	r1, [r1, #64]	; 0x40
   150d8:	cmp	ip, r1
   150dc:	bne	150bc <__assert_fail@plt+0x3ca8>
   150e0:	ldr	r8, [sp, #72]	; 0x48
   150e4:	mov	r2, #5
   150e8:	ldr	r1, [pc, #320]	; 15230 <__assert_fail@plt+0x3e1c>
   150ec:	mov	r0, #0
   150f0:	bl	11174 <dcgettext@plt>
   150f4:	mov	r2, r0
   150f8:	mov	r1, #0
   150fc:	mov	r0, r1
   15100:	bl	1121c <error@plt>
   15104:	b	14c64 <__assert_fail@plt+0x3850>
   15108:	mov	r3, #0
   1510c:	mov	r0, #80	; 0x50
   15110:	b	150c0 <__assert_fail@plt+0x3cac>
   15114:	add	r6, r6, #1
   15118:	add	r4, r4, #80	; 0x50
   1511c:	cmp	sl, r6
   15120:	beq	151c0 <__assert_fail@plt+0x3dac>
   15124:	ldr	r2, [r4, #64]	; 0x40
   15128:	ldr	r3, [r5]
   1512c:	cmp	r2, r3
   15130:	bne	15114 <__assert_fail@plt+0x3d00>
   15134:	ldr	r1, [r4]
   15138:	ldr	r3, [r4, #68]	; 0x44
   1513c:	add	r1, r1, r3
   15140:	ldr	r0, [sp, #84]	; 0x54
   15144:	bl	110cc <strcmp@plt>
   15148:	cmp	r0, #0
   1514c:	bne	15114 <__assert_fail@plt+0x3d00>
   15150:	mov	r3, #80	; 0x50
   15154:	mul	r6, r3, r6
   15158:	ldr	r3, [sp, #76]	; 0x4c
   1515c:	add	r4, r3, r6
   15160:	tst	r7, #512	; 0x200
   15164:	beq	1526c <__assert_fail@plt+0x3e58>
   15168:	ldr	r3, [pc, #236]	; 1525c <__assert_fail@plt+0x3e48>
   1516c:	ldr	r3, [r3, #4]
   15170:	cmp	r3, #1
   15174:	beq	153a8 <__assert_fail@plt+0x3f94>
   15178:	cmp	r4, #0
   1517c:	beq	151c0 <__assert_fail@plt+0x3dac>
   15180:	ldr	r2, [r5, #4]
   15184:	ldr	r3, [pc, #168]	; 15234 <__assert_fail@plt+0x3e20>
   15188:	and	r3, r3, r2
   1518c:	cmp	r3, #0
   15190:	beq	153d4 <__assert_fail@plt+0x3fc0>
   15194:	tst	r2, #1024	; 0x400
   15198:	beq	151b4 <__assert_fail@plt+0x3da0>
   1519c:	ldr	r1, [r4, #60]	; 0x3c
   151a0:	mov	r0, fp
   151a4:	bl	113d8 <inotify_rm_watch@plt>
   151a8:	mov	r1, r4
   151ac:	ldr	r0, [sp, #24]
   151b0:	bl	1752c <__assert_fail@plt+0x6118>
   151b4:	mov	r1, #0
   151b8:	mov	r0, r4
   151bc:	bl	12854 <__assert_fail@plt+0x1440>
   151c0:	ldr	r3, [pc, #148]	; 1525c <__assert_fail@plt+0x3e48>
   151c4:	ldr	r3, [r3, #4]
   151c8:	cmp	r3, #1
   151cc:	beq	14e80 <__assert_fail@plt+0x3a6c>
   151d0:	cmp	r8, r9
   151d4:	bcc	15050 <__assert_fail@plt+0x3c3c>
   151d8:	ldr	r5, [pc, #136]	; 15268 <__assert_fail@plt+0x3e54>
   151dc:	mov	r4, #1
   151e0:	ldr	r6, [sp, #68]	; 0x44
   151e4:	b	14efc <__assert_fail@plt+0x3ae8>
	...
   151f4:	cmpmi	r0, sp, asr #4
   151f8:	andeq	r0, r0, r0
   151fc:	addmi	r4, pc, r0
   15200:	andeq	fp, r1, r0, lsr r6
   15204:	andeq	fp, r1, r0, lsr #12
   15208:	andeq	r1, r1, ip, asr r5
   1520c:	andeq	r1, r1, r8, asr #10
   15210:	andeq	r0, r0, r6, lsl #24
   15214:	ldrdeq	ip, [r1], -r0
   15218:	andeq	r0, r0, r4, lsl #15
   1521c:	andeq	ip, r1, r0, ror #13
   15220:	andeq	ip, r1, ip, asr #15
   15224:	andeq	ip, r1, r0, lsr r7
   15228:	andeq	ip, r1, r4, asr r7
   1522c:	andeq	ip, r1, r0, lsl #15
   15230:	muleq	r1, ip, r7
   15234:	andeq	r0, r0, r4, lsl #28
   15238:	andeq	ip, r1, r0, lsr #14
   1523c:	andeq	ip, r1, r4, lsl #14
   15240:	andeq	ip, r1, r8, lsl #8
   15244:	strdeq	fp, [r1], -r0
   15248:	andeq	fp, r1, r4, lsl #14
   1524c:	andeq	ip, r1, r0, lsr #16
   15250:	andeq	r2, r0, ip
   15254:	andeq	fp, r1, r4, ror #11
   15258:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1525c:	andeq	sp, r2, r8, asr #2
   15260:	andeq	ip, r1, r0, asr #14
   15264:	andeq	sp, r2, r4, asr #3
   15268:	ldrdeq	sp, [r2], -r0
   1526c:	ldr	r2, [sp, #64]	; 0x40
   15270:	ldr	r3, [sp, #76]	; 0x4c
   15274:	ldr	r1, [r3, r6]
   15278:	mov	r0, fp
   1527c:	bl	112d0 <inotify_add_watch@plt>
   15280:	subs	r7, r0, #0
   15284:	bge	152d8 <__assert_fail@plt+0x3ec4>
   15288:	bl	112dc <__errno_location@plt>
   1528c:	ldr	r3, [r0]
   15290:	str	r3, [sp, #84]	; 0x54
   15294:	bic	r3, r3, #16
   15298:	cmp	r3, #12
   1529c:	beq	15380 <__assert_fail@plt+0x3f6c>
   152a0:	mov	r2, #5
   152a4:	ldr	r1, [pc, #-116]	; 15238 <__assert_fail@plt+0x3e24>
   152a8:	mov	r0, #0
   152ac:	bl	11174 <dcgettext@plt>
   152b0:	str	r0, [sp, #88]	; 0x58
   152b4:	ldr	r3, [sp, #76]	; 0x4c
   152b8:	ldr	r1, [r3, r6]
   152bc:	mov	r0, #4
   152c0:	bl	19094 <__assert_fail@plt+0x7c80>
   152c4:	mov	r3, r0
   152c8:	ldr	r2, [sp, #88]	; 0x58
   152cc:	ldr	r1, [sp, #84]	; 0x54
   152d0:	mov	r0, #0
   152d4:	bl	1121c <error@plt>
   152d8:	ldr	r1, [r4, #60]	; 0x3c
   152dc:	subs	r3, r7, r1
   152e0:	movne	r3, #1
   152e4:	orrs	r3, r3, r1, lsr #31
   152e8:	beq	15168 <__assert_fail@plt+0x3d54>
   152ec:	cmp	r1, #0
   152f0:	blt	15308 <__assert_fail@plt+0x3ef4>
   152f4:	mov	r0, fp
   152f8:	bl	113d8 <inotify_rm_watch@plt>
   152fc:	mov	r1, r4
   15300:	ldr	r0, [sp, #24]
   15304:	bl	1752c <__assert_fail@plt+0x6118>
   15308:	str	r7, [r4, #60]	; 0x3c
   1530c:	cmn	r7, #1
   15310:	beq	151c0 <__assert_fail@plt+0x3dac>
   15314:	mov	r1, r4
   15318:	ldr	r0, [sp, #24]
   1531c:	bl	1752c <__assert_fail@plt+0x6118>
   15320:	mov	r6, r0
   15324:	cmp	r0, #0
   15328:	cmpne	r4, r0
   1532c:	beq	15368 <__assert_fail@plt+0x3f54>
   15330:	ldr	r3, [pc, #-220]	; 1525c <__assert_fail@plt+0x3e48>
   15334:	ldr	r3, [r3, #4]
   15338:	cmp	r3, #1
   1533c:	bne	15348 <__assert_fail@plt+0x3f34>
   15340:	mov	r1, #0
   15344:	bl	12854 <__assert_fail@plt+0x1440>
   15348:	mvn	r3, #0
   1534c:	str	r3, [r6, #60]	; 0x3c
   15350:	ldr	r7, [r6, #48]	; 0x30
   15354:	mov	r0, r6
   15358:	bl	115c0 <__assert_fail@plt+0x1ac>
   1535c:	mov	r1, r0
   15360:	mov	r0, r7
   15364:	bl	115fc <__assert_fail@plt+0x1e8>
   15368:	mov	r1, r4
   1536c:	ldr	r0, [sp, #24]
   15370:	bl	174f4 <__assert_fail@plt+0x60e0>
   15374:	cmp	r0, #0
   15378:	bne	15168 <__assert_fail@plt+0x3d54>
   1537c:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   15380:	ldr	r8, [sp, #72]	; 0x48
   15384:	mov	r2, #5
   15388:	ldr	r1, [pc, #-340]	; 1523c <__assert_fail@plt+0x3e28>
   1538c:	mov	r0, #0
   15390:	bl	11174 <dcgettext@plt>
   15394:	mov	r2, r0
   15398:	mov	r1, #0
   1539c:	mov	r0, r1
   153a0:	bl	1121c <error@plt>
   153a4:	b	14c64 <__assert_fail@plt+0x3850>
   153a8:	mov	r1, #0
   153ac:	mov	r0, r4
   153b0:	bl	12854 <__assert_fail@plt+0x1440>
   153b4:	b	15178 <__assert_fail@plt+0x3d64>
   153b8:	ldr	r3, [r5]
   153bc:	str	r3, [sp, #268]	; 0x10c
   153c0:	add	r1, sp, #208	; 0xd0
   153c4:	ldr	r0, [sp, #24]
   153c8:	bl	16cf0 <__assert_fail@plt+0x58dc>
   153cc:	mov	r4, r0
   153d0:	b	15178 <__assert_fail@plt+0x3d64>
   153d4:	add	r1, sp, #100	; 0x64
   153d8:	mov	r0, r4
   153dc:	bl	12668 <__assert_fail@plt+0x1254>
   153e0:	b	151c0 <__assert_fail@plt+0x3dac>
   153e4:	mov	r3, #0
   153e8:	str	r3, [sp, #28]
   153ec:	b	14d08 <__assert_fail@plt+0x38f4>
   153f0:	ldr	r1, [sp, #32]
   153f4:	mov	r0, r6
   153f8:	bl	12854 <__assert_fail@plt+0x1440>
   153fc:	b	15ab4 <__assert_fail@plt+0x46a0>
   15400:	add	r2, sp, #208	; 0xd0
   15404:	mov	r1, r5
   15408:	mov	r0, #3
   1540c:	bl	111c8 <__fxstat64@plt>
   15410:	cmp	r0, #0
   15414:	bne	1549c <__assert_fail@plt+0x4088>
   15418:	ldr	ip, [sp, #224]	; 0xe0
   1541c:	ldr	r3, [r4, #40]	; 0x28
   15420:	cmp	r3, ip
   15424:	beq	154e0 <__assert_fail@plt+0x40cc>
   15428:	ldr	r3, [sp, #288]	; 0x120
   1542c:	str	r3, [r4, #16]
   15430:	ldr	r3, [sp, #292]	; 0x124
   15434:	str	r3, [r4, #20]
   15438:	str	ip, [r4, #40]	; 0x28
   1543c:	mov	r3, #0
   15440:	str	r3, [r4, #72]	; 0x48
   15444:	str	r3, [r4, #76]	; 0x4c
   15448:	and	r7, r7, #61440	; 0xf000
   1544c:	cmp	r7, #32768	; 0x8000
   15450:	beq	155ac <__assert_fail@plt+0x4198>
   15454:	ldr	r3, [sp, #36]	; 0x24
   15458:	cmp	r8, r3
   1545c:	beq	15474 <__assert_fail@plt+0x4060>
   15460:	ldr	r3, [pc, #-512]	; 15268 <__assert_fail@plt+0x3e54>
   15464:	ldrb	r3, [r3, #1]
   15468:	cmp	r3, #0
   1546c:	streq	r8, [sp, #36]	; 0x24
   15470:	bne	1562c <__assert_fail@plt+0x4218>
   15474:	ldr	r3, [r4, #56]	; 0x38
   15478:	cmp	r3, #0
   1547c:	mvnne	r2, #1
   15480:	mvnne	r3, #0
   15484:	bne	15a88 <__assert_fail@plt+0x4674>
   15488:	cmp	r7, #32768	; 0x8000
   1548c:	beq	1563c <__assert_fail@plt+0x4228>
   15490:	mvn	r2, #0
   15494:	mov	r3, r2
   15498:	b	15a88 <__assert_fail@plt+0x4674>
   1549c:	mvn	r3, #0
   154a0:	str	r3, [r4, #48]	; 0x30
   154a4:	bl	112dc <__errno_location@plt>
   154a8:	ldr	r7, [r0]
   154ac:	str	r7, [r4, #52]	; 0x34
   154b0:	ldr	r2, [sp, #24]
   154b4:	mov	r1, #3
   154b8:	mov	r0, #0
   154bc:	bl	19160 <__assert_fail@plt+0x7d4c>
   154c0:	mov	r3, r0
   154c4:	ldr	r2, [pc, #-652]	; 15240 <__assert_fail@plt+0x3e2c>
   154c8:	mov	r1, r7
   154cc:	mov	r0, #0
   154d0:	bl	1121c <error@plt>
   154d4:	mov	r0, r5
   154d8:	bl	113fc <close@plt>
   154dc:	b	15ab4 <__assert_fail@plt+0x46a0>
   154e0:	and	r3, ip, #61440	; 0xf000
   154e4:	cmp	r3, #32768	; 0x8000
   154e8:	beq	15590 <__assert_fail@plt+0x417c>
   154ec:	ldr	r3, [r4, #16]
   154f0:	ldr	r1, [r4, #20]
   154f4:	ldr	r2, [sp, #288]	; 0x120
   154f8:	cmp	r2, r3
   154fc:	movlt	r2, #1
   15500:	movge	r2, #0
   15504:	movgt	r3, #1
   15508:	movle	r3, #0
   1550c:	sub	r2, r2, r3
   15510:	ldr	r3, [sp, #292]	; 0x124
   15514:	cmp	r3, r1
   15518:	movlt	r3, #1
   1551c:	movge	r3, #0
   15520:	movgt	r1, #1
   15524:	movle	r1, #0
   15528:	sub	r3, r3, r1
   1552c:	add	r3, r3, r2, lsl #1
   15530:	cmp	r3, #0
   15534:	bne	15428 <__assert_fail@plt+0x4014>
   15538:	ldrd	r0, [r4, #72]	; 0x48
   1553c:	adds	r2, r0, #1
   15540:	adc	r3, r1, #0
   15544:	strd	r2, [r4, #72]	; 0x48
   15548:	ldr	r3, [pc, #-756]	; 1525c <__assert_fail@plt+0x3e48>
   1554c:	ldrd	r2, [r3, #16]
   15550:	cmp	r1, r3
   15554:	cmpeq	r0, r2
   15558:	bcc	15ab4 <__assert_fail@plt+0x46a0>
   1555c:	ldr	r3, [pc, #-776]	; 1525c <__assert_fail@plt+0x3e48>
   15560:	ldr	r3, [r3, #4]
   15564:	cmp	r3, #1
   15568:	bne	15ab4 <__assert_fail@plt+0x46a0>
   1556c:	ldr	r1, [r4, #56]	; 0x38
   15570:	adds	r1, r1, #0
   15574:	movne	r1, #1
   15578:	mov	r0, r4
   1557c:	bl	12854 <__assert_fail@plt+0x1440>
   15580:	mov	r3, #0
   15584:	str	r3, [r4, #72]	; 0x48
   15588:	str	r3, [r4, #76]	; 0x4c
   1558c:	b	15ab4 <__assert_fail@plt+0x46a0>
   15590:	ldrd	r0, [r4, #8]
   15594:	add	r3, sp, #256	; 0x100
   15598:	ldrd	r2, [r3]
   1559c:	cmp	r1, r3
   155a0:	cmpeq	r0, r2
   155a4:	bne	15428 <__assert_fail@plt+0x4014>
   155a8:	b	154ec <__assert_fail@plt+0x40d8>
   155ac:	ldrd	r2, [r4, #8]
   155b0:	add	r1, sp, #256	; 0x100
   155b4:	ldrd	r0, [r1]
   155b8:	cmp	r0, r2
   155bc:	sbcs	r3, r1, r3
   155c0:	bge	15454 <__assert_fail@plt+0x4040>
   155c4:	mov	r2, #5
   155c8:	ldr	r1, [pc, #-908]	; 15244 <__assert_fail@plt+0x3e30>
   155cc:	mov	r0, #0
   155d0:	bl	11174 <dcgettext@plt>
   155d4:	mov	fp, r0
   155d8:	ldr	r2, [sp, #24]
   155dc:	mov	r1, #3
   155e0:	mov	r0, #0
   155e4:	bl	19160 <__assert_fail@plt+0x7d4c>
   155e8:	mov	r3, r0
   155ec:	mov	r2, fp
   155f0:	mov	r1, #0
   155f4:	mov	r0, r1
   155f8:	bl	1121c <error@plt>
   155fc:	ldr	r3, [sp, #24]
   15600:	str	r3, [sp, #4]
   15604:	mov	r3, #0
   15608:	str	r3, [sp]
   1560c:	ldr	r2, [sp, #60]	; 0x3c
   15610:	ldr	r3, [sp, #64]	; 0x40
   15614:	mov	r0, r5
   15618:	bl	11a50 <__assert_fail@plt+0x63c>
   1561c:	mov	r3, #0
   15620:	str	r3, [r4, #8]
   15624:	str	r3, [r4, #12]
   15628:	b	15454 <__assert_fail@plt+0x4040>
   1562c:	ldr	r0, [sp, #24]
   15630:	bl	11574 <__assert_fail@plt+0x160>
   15634:	str	r8, [sp, #36]	; 0x24
   15638:	b	15474 <__assert_fail@plt+0x4060>
   1563c:	ldrb	r3, [r4, #45]	; 0x2d
   15640:	cmp	r3, #0
   15644:	beq	15660 <__assert_fail@plt+0x424c>
   15648:	ldrd	r0, [r4, #8]
   1564c:	add	r3, sp, #256	; 0x100
   15650:	ldrd	r2, [r3]
   15654:	subs	r2, r2, r0
   15658:	sbc	r3, r3, r1
   1565c:	b	15a88 <__assert_fail@plt+0x4674>
   15660:	mvn	r2, #0
   15664:	mov	r3, r2
   15668:	b	15a88 <__assert_fail@plt+0x4674>
   1566c:	bl	112dc <__errno_location@plt>
   15670:	ldr	r4, [r0]
   15674:	mov	r2, #5
   15678:	ldr	r1, [pc, #-1080]	; 15248 <__assert_fail@plt+0x3e34>
   1567c:	mov	r0, #0
   15680:	bl	11174 <dcgettext@plt>
   15684:	mov	r2, r0
   15688:	mov	r1, r4
   1568c:	mov	r0, #1
   15690:	bl	1121c <error@plt>
   15694:	mov	r1, #1
   15698:	str	r1, [sp, #208]	; 0xd0
   1569c:	mov	r3, #8
   156a0:	strh	r3, [sp, #212]	; 0xd4
   156a4:	mov	r2, #0
   156a8:	add	r0, sp, #208	; 0xd0
   156ac:	bl	111bc <poll@plt>
   156b0:	cmp	r0, #0
   156b4:	blt	15cb8 <__assert_fail@plt+0x48a4>
   156b8:	ldrh	r3, [sp, #214]	; 0xd6
   156bc:	tst	r3, #8
   156c0:	beq	15cb8 <__assert_fail@plt+0x48a4>
   156c4:	mov	r0, #13
   156c8:	bl	110c0 <raise@plt>
   156cc:	mov	r0, #1
   156d0:	bl	11294 <exit@plt>
   156d4:	mov	r1, #0
   156d8:	bl	1127c <kill@plt>
   156dc:	cmp	r0, #0
   156e0:	beq	15cdc <__assert_fail@plt+0x48c8>
   156e4:	bl	112dc <__errno_location@plt>
   156e8:	ldr	r3, [r0]
   156ec:	cmp	r3, #1
   156f0:	ldrne	r3, [sp, #56]	; 0x38
   156f4:	strne	r3, [sp, #48]	; 0x30
   156f8:	bne	15cec <__assert_fail@plt+0x48d8>
   156fc:	b	15cdc <__assert_fail@plt+0x48c8>
   15700:	bl	112dc <__errno_location@plt>
   15704:	ldr	r4, [r0]
   15708:	mov	r2, #5
   1570c:	ldr	r1, [pc, #-1224]	; 1524c <__assert_fail@plt+0x3e38>
   15710:	mov	r0, #0
   15714:	bl	11174 <dcgettext@plt>
   15718:	mov	r2, r0
   1571c:	mov	r1, r4
   15720:	mov	r0, #1
   15724:	bl	1121c <error@plt>
   15728:	bl	112dc <__errno_location@plt>
   1572c:	ldr	r2, [pc, #-1248]	; 15254 <__assert_fail@plt+0x3e40>
   15730:	ldr	r1, [r0]
   15734:	mov	r0, #1
   15738:	bl	1121c <error@plt>
   1573c:	ldr	r3, [sp, #24]
   15740:	cmp	r3, #1
   15744:	beq	13acc <__assert_fail@plt+0x26b8>
   15748:	mov	r3, #1
   1574c:	str	r3, [sp, #52]	; 0x34
   15750:	b	147b8 <__assert_fail@plt+0x33a4>
   15754:	ldr	r3, [sp, #68]	; 0x44
   15758:	str	r3, [sp, #4]
   1575c:	mov	r3, #0
   15760:	str	r3, [sp]
   15764:	mov	r2, r4
   15768:	mov	r3, r5
   1576c:	ldr	r0, [sp, #28]
   15770:	bl	11a50 <__assert_fail@plt+0x63c>
   15774:	ldr	r4, [pc, #-1324]	; 15250 <__assert_fail@plt+0x3e3c>
   15778:	mov	r0, r4
   1577c:	bl	19914 <__assert_fail@plt+0x8500>
   15780:	mov	r5, r0
   15784:	add	r3, r0, #8192	; 0x2000
   15788:	mov	sl, #0
   1578c:	str	sl, [r3, #4]
   15790:	str	sl, [r3]
   15794:	str	sl, [r3, #8]
   15798:	mov	r0, r4
   1579c:	bl	19914 <__assert_fail@plt+0x8500>
   157a0:	mov	r7, r0
   157a4:	mov	r9, r5
   157a8:	b	13f7c <__assert_fail@plt+0x2b68>
   157ac:	ldr	r2, [sp, #264]	; 0x108
   157b0:	sub	r3, r2, #1
   157b4:	cmn	r3, #-536870911	; 0xe0000001
   157b8:	bhi	142e4 <__assert_fail@plt+0x2ed0>
   157bc:	mvn	r4, #0
   157c0:	mvn	r5, #0
   157c4:	ldr	r6, [sp, #88]	; 0x58
   157c8:	ldr	r7, [sp, #92]	; 0x5c
   157cc:	asr	r3, r2, #31
   157d0:	cmp	r2, r6
   157d4:	sbcs	r3, r3, r7
   157d8:	bge	142e4 <__assert_fail@plt+0x2ed0>
   157dc:	mvn	r2, #0
   157e0:	mvn	r3, #0
   157e4:	cmp	r5, r3
   157e8:	cmpeq	r4, r2
   157ec:	beq	14500 <__assert_fail@plt+0x30ec>
   157f0:	cmp	r4, r6
   157f4:	sbcs	r3, r5, r7
   157f8:	bge	15814 <__assert_fail@plt+0x4400>
   157fc:	subs	r2, r6, r4
   15800:	sbc	r3, r7, r5
   15804:	ldrd	r0, [sp, #40]	; 0x28
   15808:	cmp	r1, r3
   1580c:	cmpeq	r0, r2
   15810:	bcc	1452c <__assert_fail@plt+0x3118>
   15814:	strd	r4, [sp, #104]	; 0x68
   15818:	ldrd	r2, [sp, #40]	; 0x28
   1581c:	strd	r2, [sp]
   15820:	ldr	r2, [sp, #28]
   15824:	ldr	r1, [sp, #68]	; 0x44
   15828:	mov	r0, #0
   1582c:	bl	11814 <__assert_fail@plt+0x400>
   15830:	ldrd	r2, [sp, #104]	; 0x68
   15834:	adds	r2, r2, r0
   15838:	adc	r3, r3, r1
   1583c:	strd	r2, [sp, #104]	; 0x68
   15840:	mov	r3, #1
   15844:	str	r3, [sp, #36]	; 0x24
   15848:	ldrb	r4, [fp, #7]
   1584c:	cmp	r4, #0
   15850:	bne	14558 <__assert_fail@plt+0x3144>
   15854:	ldr	r3, [sp, #64]	; 0x40
   15858:	cmp	r3, #0
   1585c:	bne	14754 <__assert_fail@plt+0x3340>
   15860:	ldr	r3, [sp, #36]	; 0x24
   15864:	ldr	r2, [sp, #52]	; 0x34
   15868:	and	r3, r3, r2
   1586c:	str	r3, [sp, #52]	; 0x34
   15870:	ldr	r3, [sp, #60]	; 0x3c
   15874:	add	r3, r3, #1
   15878:	str	r3, [sp, #60]	; 0x3c
   1587c:	ldr	r2, [sp, #32]
   15880:	add	r2, r2, #80	; 0x50
   15884:	str	r2, [sp, #32]
   15888:	ldr	r2, [sp, #72]	; 0x48
   1588c:	cmp	r3, r2
   15890:	beq	147b0 <__assert_fail@plt+0x339c>
   15894:	ldr	r5, [sp, #32]
   15898:	str	r5, [sp, #48]	; 0x30
   1589c:	add	r3, sp, #312	; 0x138
   158a0:	ldrd	r2, [r3]
   158a4:	strd	r2, [sp, #40]	; 0x28
   158a8:	ldr	r4, [r5]
   158ac:	ldr	r1, [pc, #-1632]	; 15254 <__assert_fail@plt+0x3e40>
   158b0:	mov	r0, r4
   158b4:	bl	110cc <strcmp@plt>
   158b8:	subs	r3, r0, #0
   158bc:	mov	r1, r3
   158c0:	str	r3, [sp, #64]	; 0x40
   158c4:	bne	13cac <__assert_fail@plt+0x2898>
   158c8:	mov	r3, #1
   158cc:	strb	r3, [fp, #4]
   158d0:	strb	r3, [r5, #46]	; 0x2e
   158d4:	str	r1, [sp, #28]
   158d8:	ldrb	r3, [fp, #1]
   158dc:	cmp	r3, #0
   158e0:	bne	13d68 <__assert_fail@plt+0x2954>
   158e4:	ldr	r0, [sp, #48]	; 0x30
   158e8:	bl	115c0 <__assert_fail@plt+0x1ac>
   158ec:	str	r0, [sp, #68]	; 0x44
   158f0:	mov	r2, #0
   158f4:	mov	r3, #0
   158f8:	strd	r2, [sp, #104]	; 0x68
   158fc:	ldrb	r3, [fp, #5]
   15900:	str	r3, [sp, #36]	; 0x24
   15904:	cmp	r3, #0
   15908:	bne	13d78 <__assert_fail@plt+0x2964>
   1590c:	add	r2, sp, #208	; 0xd0
   15910:	ldr	r1, [sp, #28]
   15914:	mov	r0, #3
   15918:	bl	111c8 <__fxstat64@plt>
   1591c:	cmp	r0, #0
   15920:	bne	141a0 <__assert_fail@plt+0x2d8c>
   15924:	ldrb	r3, [fp, #6]
   15928:	str	r3, [sp, #36]	; 0x24
   1592c:	cmp	r3, #0
   15930:	beq	14248 <__assert_fail@plt+0x2e34>
   15934:	ldrb	r3, [fp, #12]
   15938:	cmp	r3, #0
   1593c:	bne	14210 <__assert_fail@plt+0x2dfc>
   15940:	ldrd	r2, [sp, #40]	; 0x28
   15944:	mov	r4, r2
   15948:	mov	r5, r3
   1594c:	cmp	r2, #0
   15950:	sbcs	r3, r3, #0
   15954:	blt	14210 <__assert_fail@plt+0x2dfc>
   15958:	ldr	r3, [sp, #224]	; 0xe0
   1595c:	and	r3, r3, #61440	; 0xf000
   15960:	cmp	r3, #32768	; 0x8000
   15964:	beq	141e0 <__assert_fail@plt+0x2dcc>
   15968:	mov	r3, #1
   1596c:	str	r3, [sp]
   15970:	mov	r2, r4
   15974:	mov	r3, r5
   15978:	ldr	r0, [sp, #28]
   1597c:	bl	111ec <lseek64@plt>
   15980:	mvn	r2, #0
   15984:	mvn	r3, #0
   15988:	cmp	r1, r3
   1598c:	cmpeq	r0, r2
   15990:	beq	14210 <__assert_fail@plt+0x2dfc>
   15994:	ldrd	r2, [sp, #104]	; 0x68
   15998:	ldrd	r0, [sp, #40]	; 0x28
   1599c:	adds	r0, r0, r2
   159a0:	adc	r1, r1, r3
   159a4:	mov	r2, r0
   159a8:	mov	r3, r1
   159ac:	strd	r2, [sp, #104]	; 0x68
   159b0:	mvn	r2, #0
   159b4:	mvn	r3, #0
   159b8:	strd	r2, [sp, #40]	; 0x28
   159bc:	b	15818 <__assert_fail@plt+0x4404>
   159c0:	add	r6, r6, #1
   159c4:	add	r4, r4, #80	; 0x50
   159c8:	cmp	r7, r4
   159cc:	beq	14800 <__assert_fail@plt+0x33ec>
   159d0:	ldr	r1, [pc, #-1924]	; 15254 <__assert_fail@plt+0x3e40>
   159d4:	ldr	r0, [r4]
   159d8:	bl	110cc <strcmp@plt>
   159dc:	cmp	r0, #0
   159e0:	bne	159c0 <__assert_fail@plt+0x45ac>
   159e4:	ldrb	r3, [r4, #44]	; 0x2c
   159e8:	cmp	r3, #0
   159ec:	bne	159c0 <__assert_fail@plt+0x45ac>
   159f0:	ldr	r3, [r4, #48]	; 0x30
   159f4:	cmp	r3, #0
   159f8:	blt	159c0 <__assert_fail@plt+0x45ac>
   159fc:	ldr	r3, [r4, #40]	; 0x28
   15a00:	and	r3, r3, #61440	; 0xf000
   15a04:	cmp	r3, #4096	; 0x1000
   15a08:	bne	159c0 <__assert_fail@plt+0x45ac>
   15a0c:	str	sl, [r4, #48]	; 0x30
   15a10:	strb	fp, [r4, #44]	; 0x2c
   15a14:	b	159c4 <__assert_fail@plt+0x45b0>
   15a18:	ldr	r3, [sp, #76]	; 0x4c
   15a1c:	mov	r1, #0
   15a20:	b	1499c <__assert_fail@plt+0x3588>
   15a24:	ldr	r3, [pc, #-2000]	; 1525c <__assert_fail@plt+0x3e48>
   15a28:	ldr	r3, [r3, #4]
   15a2c:	ldr	r2, [sp, #36]	; 0x24
   15a30:	cmp	r3, #2
   15a34:	movne	r2, #0
   15a38:	andeq	r2, r2, #1
   15a3c:	str	r2, [sp, #68]	; 0x44
   15a40:	cmp	r2, #0
   15a44:	bne	14c64 <__assert_fail@plt+0x3850>
   15a48:	ldr	r2, [sp, #32]
   15a4c:	cmp	r3, #2
   15a50:	orrne	r2, r2, #1
   15a54:	str	r2, [sp, #80]	; 0x50
   15a58:	cmp	r2, #0
   15a5c:	bne	14d34 <__assert_fail@plt+0x3920>
   15a60:	mov	r0, #1
   15a64:	bl	11294 <exit@plt>
   15a68:	cmp	r0, #0
   15a6c:	blt	15b44 <__assert_fail@plt+0x4730>
   15a70:	str	fp, [r4, #56]	; 0x38
   15a74:	ldr	r3, [r4, #56]	; 0x38
   15a78:	cmp	r3, #0
   15a7c:	mvnne	r2, #1
   15a80:	mvnne	r3, #0
   15a84:	beq	15400 <__assert_fail@plt+0x3fec>
   15a88:	strd	r2, [sp]
   15a8c:	mov	r2, r5
   15a90:	ldr	r1, [sp, #24]
   15a94:	mov	r0, #0
   15a98:	bl	11814 <__assert_fail@plt+0x400>
   15a9c:	orrs	r3, r0, r1
   15aa0:	orrne	sl, sl, #1
   15aa4:	ldrd	r2, [r4, #8]
   15aa8:	adds	r2, r2, r0
   15aac:	adc	r3, r3, r1
   15ab0:	strd	r2, [r4, #8]
   15ab4:	add	r8, r8, #1
   15ab8:	add	r6, r6, #80	; 0x50
   15abc:	cmp	r8, r9
   15ac0:	beq	15c1c <__assert_fail@plt+0x4808>
   15ac4:	mov	r4, r6
   15ac8:	ldrb	r3, [r6, #44]	; 0x2c
   15acc:	cmp	r3, #0
   15ad0:	bne	15ab4 <__assert_fail@plt+0x46a0>
   15ad4:	ldr	r5, [r6, #48]	; 0x30
   15ad8:	cmp	r5, #0
   15adc:	blt	153f0 <__assert_fail@plt+0x3fdc>
   15ae0:	mov	r0, r6
   15ae4:	bl	115c0 <__assert_fail@plt+0x1ac>
   15ae8:	str	r0, [sp, #24]
   15aec:	ldr	r7, [r6, #40]	; 0x28
   15af0:	ldr	r3, [sp, #28]
   15af4:	and	fp, r3, #1
   15af8:	ldr	r3, [r6, #56]	; 0x38
   15afc:	cmp	r3, fp
   15b00:	beq	15a74 <__assert_fail@plt+0x4660>
   15b04:	mov	r1, #3
   15b08:	mov	r0, r5
   15b0c:	bl	163cc <__assert_fail@plt+0x4fb8>
   15b10:	ldr	r3, [sp, #32]
   15b14:	cmp	r3, #0
   15b18:	bne	15a68 <__assert_fail@plt+0x4654>
   15b1c:	cmp	r0, #0
   15b20:	blt	15b44 <__assert_fail@plt+0x4730>
   15b24:	orr	r2, r0, #2048	; 0x800
   15b28:	cmp	r0, r2
   15b2c:	beq	15a70 <__assert_fail@plt+0x465c>
   15b30:	mov	r1, #4
   15b34:	mov	r0, r5
   15b38:	bl	163cc <__assert_fail@plt+0x4fb8>
   15b3c:	cmn	r0, #1
   15b40:	bne	15a70 <__assert_fail@plt+0x465c>
   15b44:	ldr	r3, [r4, #40]	; 0x28
   15b48:	and	r3, r3, #61440	; 0xf000
   15b4c:	cmp	r3, #32768	; 0x8000
   15b50:	bne	15b64 <__assert_fail@plt+0x4750>
   15b54:	bl	112dc <__errno_location@plt>
   15b58:	ldr	r3, [r0]
   15b5c:	cmp	r3, #1
   15b60:	beq	15a74 <__assert_fail@plt+0x4660>
   15b64:	bl	112dc <__errno_location@plt>
   15b68:	ldr	r4, [r0]
   15b6c:	mov	r2, #5
   15b70:	ldr	r1, [pc, #-2336]	; 15258 <__assert_fail@plt+0x3e44>
   15b74:	mov	r0, #0
   15b78:	bl	11174 <dcgettext@plt>
   15b7c:	mov	r5, r0
   15b80:	ldr	r2, [sp, #24]
   15b84:	mov	r1, #3
   15b88:	mov	r0, #0
   15b8c:	bl	19160 <__assert_fail@plt+0x7d4c>
   15b90:	mov	r3, r0
   15b94:	mov	r2, r5
   15b98:	mov	r1, r4
   15b9c:	mov	r0, #1
   15ba0:	bl	1121c <error@plt>
   15ba4:	ldr	r3, [pc, #-2372]	; 15268 <__assert_fail@plt+0x3e54>
   15ba8:	ldrb	ip, [r3, #2]
   15bac:	cmp	ip, #0
   15bb0:	beq	15bd0 <__assert_fail@plt+0x47bc>
   15bb4:	mov	sl, #0
   15bb8:	ldr	r3, [pc, #-2404]	; 1525c <__assert_fail@plt+0x3e48>
   15bbc:	ldr	r3, [r3, #4]
   15bc0:	cmp	r3, #1
   15bc4:	beq	15c84 <__assert_fail@plt+0x4870>
   15bc8:	cmp	r9, #0
   15bcc:	bne	15c2c <__assert_fail@plt+0x4818>
   15bd0:	mov	r2, #5
   15bd4:	ldr	r1, [pc, #-2428]	; 15260 <__assert_fail@plt+0x3e4c>
   15bd8:	mov	r0, #0
   15bdc:	bl	11174 <dcgettext@plt>
   15be0:	mov	r2, r0
   15be4:	mov	r1, #0
   15be8:	mov	r0, r1
   15bec:	bl	1121c <error@plt>
   15bf0:	ldr	r3, [pc, #-2448]	; 15268 <__assert_fail@plt+0x3e54>
   15bf4:	ldrb	r3, [r3, #4]
   15bf8:	cmp	r3, #0
   15bfc:	beq	15c10 <__assert_fail@plt+0x47fc>
   15c00:	mov	r0, #0
   15c04:	bl	113fc <close@plt>
   15c08:	cmp	r0, #0
   15c0c:	blt	15728 <__assert_fail@plt+0x4314>
   15c10:	ldr	r3, [sp, #52]	; 0x34
   15c14:	eor	r0, r3, #1
   15c18:	bl	11294 <exit@plt>
   15c1c:	ldr	r3, [pc, #-2492]	; 15268 <__assert_fail@plt+0x3e54>
   15c20:	ldrb	ip, [r3, #2]
   15c24:	cmp	ip, #0
   15c28:	bne	15bb8 <__assert_fail@plt+0x47a4>
   15c2c:	ldr	r2, [sp, #76]	; 0x4c
   15c30:	ldr	r3, [r2, #48]	; 0x30
   15c34:	cmp	r3, #0
   15c38:	bge	15c84 <__assert_fail@plt+0x4870>
   15c3c:	ldrb	r3, [r2, #44]	; 0x2c
   15c40:	eor	r3, r3, #1
   15c44:	tst	ip, r3
   15c48:	bne	15c84 <__assert_fail@plt+0x4870>
   15c4c:	ldr	r3, [sp, #40]	; 0x28
   15c50:	mov	r1, #0
   15c54:	add	r1, r1, #1
   15c58:	cmp	r1, r9
   15c5c:	beq	15bd0 <__assert_fail@plt+0x47bc>
   15c60:	mov	r0, r3
   15c64:	ldr	r2, [r3, #128]	; 0x80
   15c68:	cmp	r2, #0
   15c6c:	bge	15c84 <__assert_fail@plt+0x4870>
   15c70:	add	r3, r3, #80	; 0x50
   15c74:	ldrb	r2, [r0, #124]	; 0x7c
   15c78:	eor	r2, r2, #1
   15c7c:	tst	ip, r2
   15c80:	beq	15c54 <__assert_fail@plt+0x4840>
   15c84:	eor	r3, sl, #1
   15c88:	ldr	r2, [sp, #32]
   15c8c:	orrs	r3, r2, r3
   15c90:	beq	15ca8 <__assert_fail@plt+0x4894>
   15c94:	ldr	r3, [pc, #-2616]	; 15264 <__assert_fail@plt+0x3e50>
   15c98:	ldr	r0, [r3]
   15c9c:	bl	111a4 <fflush_unlocked@plt>
   15ca0:	cmp	r0, #0
   15ca4:	bne	1566c <__assert_fail@plt+0x4258>
   15ca8:	ldr	r3, [pc, #-2632]	; 15268 <__assert_fail@plt+0x3e54>
   15cac:	ldrb	r3, [r3, #13]
   15cb0:	cmp	r3, #0
   15cb4:	bne	15694 <__assert_fail@plt+0x4280>
   15cb8:	cmp	sl, #0
   15cbc:	bne	15cec <__assert_fail@plt+0x48d8>
   15cc0:	ldr	r3, [sp, #48]	; 0x30
   15cc4:	cmp	r3, #0
   15cc8:	bne	15bf0 <__assert_fail@plt+0x47dc>
   15ccc:	ldr	r3, [pc, #-2668]	; 15268 <__assert_fail@plt+0x3e54>
   15cd0:	ldr	r0, [r3, #8]
   15cd4:	cmp	r0, #0
   15cd8:	bne	156d4 <__assert_fail@plt+0x42c0>
   15cdc:	vmov.f64	d0, d8
   15ce0:	bl	1a068 <__assert_fail@plt+0x8c54>
   15ce4:	cmp	r0, #0
   15ce8:	bne	15700 <__assert_fail@plt+0x42ec>
   15cec:	cmp	r9, #0
   15cf0:	beq	15ba4 <__assert_fail@plt+0x4790>
   15cf4:	ldr	r6, [sp, #40]	; 0x28
   15cf8:	mov	sl, #0
   15cfc:	mov	r8, sl
   15d00:	b	15ac4 <__assert_fail@plt+0x46b0>
   15d04:	mov	r0, #0
   15d08:	add	sp, sp, #324	; 0x144
   15d0c:	vpop	{d8-d11}
   15d10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15d14:	push	{r4, lr}
   15d18:	mov	r0, #1
   15d1c:	bl	12ddc <__assert_fail@plt+0x19c8>
   15d20:	pop	{r4, pc}
   15d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15d28:	sub	sp, sp, #12
   15d2c:	str	r0, [sp, #4]
   15d30:	mov	r6, r1
   15d34:	mov	fp, r2
   15d38:	mov	r8, r3
   15d3c:	bl	112a0 <strlen@plt>
   15d40:	str	r0, [sp]
   15d44:	ldr	r4, [r6]
   15d48:	cmp	r4, #0
   15d4c:	beq	15df4 <__assert_fail@plt+0x49e0>
   15d50:	mov	r5, fp
   15d54:	mov	sl, #0
   15d58:	mvn	r9, #0
   15d5c:	mov	r7, sl
   15d60:	b	15d80 <__assert_fail@plt+0x496c>
   15d64:	mov	r9, r7
   15d68:	b	15de8 <__assert_fail@plt+0x49d4>
   15d6c:	add	r7, r7, #1
   15d70:	ldr	r4, [r6, #4]!
   15d74:	add	r5, r5, r8
   15d78:	cmp	r4, #0
   15d7c:	beq	15de0 <__assert_fail@plt+0x49cc>
   15d80:	ldr	r2, [sp]
   15d84:	ldr	r1, [sp, #4]
   15d88:	mov	r0, r4
   15d8c:	bl	113e4 <strncmp@plt>
   15d90:	cmp	r0, #0
   15d94:	bne	15d6c <__assert_fail@plt+0x4958>
   15d98:	mov	r0, r4
   15d9c:	bl	112a0 <strlen@plt>
   15da0:	ldr	r3, [sp]
   15da4:	cmp	r3, r0
   15da8:	beq	15d64 <__assert_fail@plt+0x4950>
   15dac:	cmn	r9, #1
   15db0:	moveq	r9, r7
   15db4:	beq	15d6c <__assert_fail@plt+0x4958>
   15db8:	cmp	fp, #0
   15dbc:	moveq	sl, #1
   15dc0:	beq	15d6c <__assert_fail@plt+0x4958>
   15dc4:	mov	r2, r8
   15dc8:	mov	r1, r5
   15dcc:	mla	r0, r8, r9, fp
   15dd0:	bl	1115c <memcmp@plt>
   15dd4:	cmp	r0, #0
   15dd8:	movne	sl, #1
   15ddc:	b	15d6c <__assert_fail@plt+0x4958>
   15de0:	cmp	sl, #0
   15de4:	mvnne	r9, #1
   15de8:	mov	r0, r9
   15dec:	add	sp, sp, #12
   15df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df4:	mvn	r9, #0
   15df8:	b	15de8 <__assert_fail@plt+0x49d4>
   15dfc:	push	{r4, r5, r6, lr}
   15e00:	mov	r6, r0
   15e04:	ldr	r0, [r1]
   15e08:	cmp	r0, #0
   15e0c:	beq	15e48 <__assert_fail@plt+0x4a34>
   15e10:	mov	r4, r1
   15e14:	mov	r5, #0
   15e18:	mov	r1, r6
   15e1c:	bl	110cc <strcmp@plt>
   15e20:	cmp	r0, #0
   15e24:	beq	15e40 <__assert_fail@plt+0x4a2c>
   15e28:	add	r5, r5, #1
   15e2c:	ldr	r0, [r4, #4]!
   15e30:	cmp	r0, #0
   15e34:	bne	15e18 <__assert_fail@plt+0x4a04>
   15e38:	mvn	r0, #0
   15e3c:	pop	{r4, r5, r6, pc}
   15e40:	mov	r0, r5
   15e44:	pop	{r4, r5, r6, pc}
   15e48:	mvn	r0, #0
   15e4c:	pop	{r4, r5, r6, pc}
   15e50:	push	{r4, r5, r6, lr}
   15e54:	sub	sp, sp, #8
   15e58:	mov	r5, r0
   15e5c:	mov	r4, r1
   15e60:	cmn	r2, #1
   15e64:	mov	r2, #5
   15e68:	ldreq	r1, [pc, #76]	; 15ebc <__assert_fail@plt+0x4aa8>
   15e6c:	ldrne	r1, [pc, #76]	; 15ec0 <__assert_fail@plt+0x4aac>
   15e70:	mov	r0, #0
   15e74:	bl	11174 <dcgettext@plt>
   15e78:	mov	r6, r0
   15e7c:	mov	r2, r4
   15e80:	mov	r1, #8
   15e84:	mov	r0, #0
   15e88:	bl	19028 <__assert_fail@plt+0x7c14>
   15e8c:	mov	r4, r0
   15e90:	mov	r1, r5
   15e94:	mov	r0, #1
   15e98:	bl	192b8 <__assert_fail@plt+0x7ea4>
   15e9c:	str	r0, [sp]
   15ea0:	mov	r3, r4
   15ea4:	mov	r2, r6
   15ea8:	mov	r1, #0
   15eac:	mov	r0, r1
   15eb0:	bl	1121c <error@plt>
   15eb4:	add	sp, sp, #8
   15eb8:	pop	{r4, r5, r6, pc}
   15ebc:	andeq	ip, r1, ip, ror #18
   15ec0:	andeq	ip, r1, r8, lsl #19
   15ec4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15ec8:	mov	r7, r0
   15ecc:	mov	r4, r1
   15ed0:	mov	r8, r2
   15ed4:	mov	r2, #5
   15ed8:	ldr	r1, [pc, #224]	; 15fc0 <__assert_fail@plt+0x4bac>
   15edc:	mov	r0, #0
   15ee0:	bl	11174 <dcgettext@plt>
   15ee4:	ldr	r3, [pc, #216]	; 15fc4 <__assert_fail@plt+0x4bb0>
   15ee8:	ldr	r1, [r3]
   15eec:	bl	110b4 <fputs_unlocked@plt>
   15ef0:	ldr	r5, [r7]
   15ef4:	cmp	r5, #0
   15ef8:	beq	15f88 <__assert_fail@plt+0x4b74>
   15efc:	mov	r9, #0
   15f00:	mov	r6, r9
   15f04:	ldr	sl, [pc, #184]	; 15fc4 <__assert_fail@plt+0x4bb0>
   15f08:	b	15f44 <__assert_fail@plt+0x4b30>
   15f0c:	ldr	r9, [sl]
   15f10:	mov	r0, r5
   15f14:	bl	192c8 <__assert_fail@plt+0x7eb4>
   15f18:	mov	r3, r0
   15f1c:	ldr	r2, [pc, #164]	; 15fc8 <__assert_fail@plt+0x4bb4>
   15f20:	mov	r1, #1
   15f24:	mov	r0, r9
   15f28:	bl	11324 <__fprintf_chk@plt>
   15f2c:	mov	r9, r4
   15f30:	add	r6, r6, #1
   15f34:	ldr	r5, [r7, #4]!
   15f38:	add	r4, r4, r8
   15f3c:	cmp	r5, #0
   15f40:	beq	15f88 <__assert_fail@plt+0x4b74>
   15f44:	cmp	r6, #0
   15f48:	beq	15f0c <__assert_fail@plt+0x4af8>
   15f4c:	mov	r2, r8
   15f50:	mov	r1, r4
   15f54:	mov	r0, r9
   15f58:	bl	1115c <memcmp@plt>
   15f5c:	cmp	r0, #0
   15f60:	bne	15f0c <__assert_fail@plt+0x4af8>
   15f64:	ldr	fp, [sl]
   15f68:	mov	r0, r5
   15f6c:	bl	192c8 <__assert_fail@plt+0x7eb4>
   15f70:	mov	r3, r0
   15f74:	ldr	r2, [pc, #80]	; 15fcc <__assert_fail@plt+0x4bb8>
   15f78:	mov	r1, #1
   15f7c:	mov	r0, fp
   15f80:	bl	11324 <__fprintf_chk@plt>
   15f84:	b	15f30 <__assert_fail@plt+0x4b1c>
   15f88:	ldr	r3, [pc, #52]	; 15fc4 <__assert_fail@plt+0x4bb0>
   15f8c:	ldr	r0, [r3]
   15f90:	ldr	r3, [r0, #20]
   15f94:	ldr	r2, [r0, #24]
   15f98:	cmp	r3, r2
   15f9c:	bcs	15fb4 <__assert_fail@plt+0x4ba0>
   15fa0:	add	r2, r3, #1
   15fa4:	str	r2, [r0, #20]
   15fa8:	mov	r2, #10
   15fac:	strb	r2, [r3]
   15fb0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fb4:	mov	r1, #10
   15fb8:	bl	1136c <__overflow@plt>
   15fbc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15fc0:	andeq	ip, r1, r8, lsr #19
   15fc4:	andeq	sp, r2, r0, asr #3
   15fc8:	andeq	ip, r1, r0, asr #19
   15fcc:	andeq	ip, r1, r8, asr #19
   15fd0:	push	{r4, r5, r6, r7, r8, lr}
   15fd4:	mov	r7, r0
   15fd8:	mov	r5, r1
   15fdc:	mov	r4, r2
   15fe0:	mov	r6, r3
   15fe4:	ldrb	r3, [sp, #32]
   15fe8:	cmp	r3, #0
   15fec:	beq	1603c <__assert_fail@plt+0x4c28>
   15ff0:	ldr	r3, [sp, #24]
   15ff4:	mov	r2, r6
   15ff8:	mov	r1, r4
   15ffc:	mov	r0, r5
   16000:	bl	15d24 <__assert_fail@plt+0x4910>
   16004:	cmp	r0, #0
   16008:	popge	{r4, r5, r6, r7, r8, pc}
   1600c:	mov	r2, r0
   16010:	mov	r1, r5
   16014:	mov	r0, r7
   16018:	bl	15e50 <__assert_fail@plt+0x4a3c>
   1601c:	ldr	r2, [sp, #24]
   16020:	mov	r1, r6
   16024:	mov	r0, r4
   16028:	bl	15ec4 <__assert_fail@plt+0x4ab0>
   1602c:	ldr	r3, [sp, #28]
   16030:	blx	r3
   16034:	mvn	r0, #0
   16038:	pop	{r4, r5, r6, r7, r8, pc}
   1603c:	mov	r1, r2
   16040:	mov	r0, r5
   16044:	bl	15dfc <__assert_fail@plt+0x49e8>
   16048:	b	16004 <__assert_fail@plt+0x4bf0>
   1604c:	push	{r4, r5, r6, r7, r8, lr}
   16050:	ldr	r6, [r1]
   16054:	cmp	r6, #0
   16058:	beq	1609c <__assert_fail@plt+0x4c88>
   1605c:	mov	r7, r3
   16060:	mov	r8, r0
   16064:	mov	r4, r2
   16068:	mov	r5, r1
   1606c:	mov	r2, r7
   16070:	mov	r1, r4
   16074:	mov	r0, r8
   16078:	bl	1115c <memcmp@plt>
   1607c:	cmp	r0, #0
   16080:	beq	16094 <__assert_fail@plt+0x4c80>
   16084:	ldr	r6, [r5, #4]!
   16088:	add	r4, r4, r7
   1608c:	cmp	r6, #0
   16090:	bne	1606c <__assert_fail@plt+0x4c58>
   16094:	mov	r0, r6
   16098:	pop	{r4, r5, r6, r7, r8, pc}
   1609c:	mov	r6, #0
   160a0:	b	16094 <__assert_fail@plt+0x4c80>
   160a4:	ldrb	r3, [r0]
   160a8:	cmp	r3, #47	; 0x2f
   160ac:	bne	160bc <__assert_fail@plt+0x4ca8>
   160b0:	ldrb	r3, [r0, #1]!
   160b4:	cmp	r3, #47	; 0x2f
   160b8:	beq	160b0 <__assert_fail@plt+0x4c9c>
   160bc:	ldrb	r2, [r0]
   160c0:	cmp	r2, #0
   160c4:	bxeq	lr
   160c8:	push	{lr}		; (str lr, [sp, #-4]!)
   160cc:	mov	r1, r0
   160d0:	mov	r3, #0
   160d4:	mov	lr, #1
   160d8:	mov	ip, r3
   160dc:	b	160ec <__assert_fail@plt+0x4cd8>
   160e0:	ldrb	r2, [r1, #1]!
   160e4:	cmp	r2, #0
   160e8:	beq	16108 <__assert_fail@plt+0x4cf4>
   160ec:	cmp	r2, #47	; 0x2f
   160f0:	moveq	r3, lr
   160f4:	beq	160e0 <__assert_fail@plt+0x4ccc>
   160f8:	cmp	r3, #0
   160fc:	movne	r0, r1
   16100:	movne	r3, ip
   16104:	b	160e0 <__assert_fail@plt+0x4ccc>
   16108:	pop	{pc}		; (ldr pc, [sp], #4)
   1610c:	push	{r4, lr}
   16110:	mov	r4, r0
   16114:	bl	112a0 <strlen@plt>
   16118:	cmp	r0, #1
   1611c:	popls	{r4, pc}
   16120:	sub	r3, r0, #1
   16124:	add	r2, r4, r3
   16128:	ldrb	r1, [r4, r3]
   1612c:	cmp	r1, #47	; 0x2f
   16130:	popne	{r4, pc}
   16134:	cmp	r3, #1
   16138:	beq	1615c <__assert_fail@plt+0x4d48>
   1613c:	sub	r0, r3, #1
   16140:	ldrb	r1, [r2, #-1]!
   16144:	cmp	r1, #47	; 0x2f
   16148:	beq	16154 <__assert_fail@plt+0x4d40>
   1614c:	mov	r0, r3
   16150:	pop	{r4, pc}
   16154:	mov	r3, r0
   16158:	b	16134 <__assert_fail@plt+0x4d20>
   1615c:	mov	r0, #1
   16160:	pop	{r4, pc}
   16164:	push	{r4, r5, r6, r7, lr}
   16168:	vpush	{d8}
   1616c:	sub	sp, sp, #12
   16170:	mov	r5, r0
   16174:	mov	r4, r1
   16178:	add	r1, sp, #4
   1617c:	bl	1130c <strtod@plt>
   16180:	vmov.f64	d8, d0
   16184:	ldr	r3, [sp, #4]
   16188:	ldrb	r3, [r3]
   1618c:	cmp	r3, #0
   16190:	bne	161b0 <__assert_fail@plt+0x4d9c>
   16194:	cmp	r4, #0
   16198:	ldrne	r3, [sp, #4]
   1619c:	strne	r3, [r4]
   161a0:	vmov.f64	d0, d8
   161a4:	add	sp, sp, #12
   161a8:	vpop	{d8}
   161ac:	pop	{r4, r5, r6, r7, pc}
   161b0:	bl	112dc <__errno_location@plt>
   161b4:	mov	r6, r0
   161b8:	ldr	r7, [r0]
   161bc:	mov	r1, sp
   161c0:	mov	r0, r5
   161c4:	bl	1a7d0 <__assert_fail@plt+0x93bc>
   161c8:	ldr	r3, [sp]
   161cc:	ldr	r2, [sp, #4]
   161d0:	cmp	r2, r3
   161d4:	strcc	r3, [sp, #4]
   161d8:	vmovcc.f64	d8, d0
   161dc:	strcs	r7, [r6]
   161e0:	b	16194 <__assert_fail@plt+0x4d80>
   161e4:	ldr	r3, [pc, #4]	; 161f0 <__assert_fail@plt+0x4ddc>
   161e8:	str	r0, [r3]
   161ec:	bx	lr
   161f0:	andeq	sp, r2, r0, ror #3
   161f4:	ldr	r3, [pc, #4]	; 16200 <__assert_fail@plt+0x4dec>
   161f8:	strb	r0, [r3, #4]
   161fc:	bx	lr
   16200:	andeq	sp, r2, r0, ror #3
   16204:	push	{r4, r5, r6, lr}
   16208:	sub	sp, sp, #8
   1620c:	ldr	r3, [pc, #200]	; 162dc <__assert_fail@plt+0x4ec8>
   16210:	ldr	r0, [r3]
   16214:	bl	1a85c <__assert_fail@plt+0x9448>
   16218:	cmp	r0, #0
   1621c:	beq	16240 <__assert_fail@plt+0x4e2c>
   16220:	ldr	r3, [pc, #184]	; 162e0 <__assert_fail@plt+0x4ecc>
   16224:	ldrb	r3, [r3, #4]
   16228:	cmp	r3, #0
   1622c:	beq	1625c <__assert_fail@plt+0x4e48>
   16230:	bl	112dc <__errno_location@plt>
   16234:	ldr	r3, [r0]
   16238:	cmp	r3, #32
   1623c:	bne	1625c <__assert_fail@plt+0x4e48>
   16240:	ldr	r3, [pc, #156]	; 162e4 <__assert_fail@plt+0x4ed0>
   16244:	ldr	r0, [r3]
   16248:	bl	1a85c <__assert_fail@plt+0x9448>
   1624c:	cmp	r0, #0
   16250:	bne	162d0 <__assert_fail@plt+0x4ebc>
   16254:	add	sp, sp, #8
   16258:	pop	{r4, r5, r6, pc}
   1625c:	mov	r2, #5
   16260:	ldr	r1, [pc, #128]	; 162e8 <__assert_fail@plt+0x4ed4>
   16264:	mov	r0, #0
   16268:	bl	11174 <dcgettext@plt>
   1626c:	mov	r4, r0
   16270:	ldr	r3, [pc, #104]	; 162e0 <__assert_fail@plt+0x4ecc>
   16274:	ldr	r5, [r3]
   16278:	cmp	r5, #0
   1627c:	beq	162b4 <__assert_fail@plt+0x4ea0>
   16280:	bl	112dc <__errno_location@plt>
   16284:	ldr	r6, [r0]
   16288:	mov	r0, r5
   1628c:	bl	19140 <__assert_fail@plt+0x7d2c>
   16290:	str	r4, [sp]
   16294:	mov	r3, r0
   16298:	ldr	r2, [pc, #76]	; 162ec <__assert_fail@plt+0x4ed8>
   1629c:	mov	r1, r6
   162a0:	mov	r0, #0
   162a4:	bl	1121c <error@plt>
   162a8:	ldr	r3, [pc, #64]	; 162f0 <__assert_fail@plt+0x4edc>
   162ac:	ldr	r0, [r3]
   162b0:	bl	11120 <_exit@plt>
   162b4:	bl	112dc <__errno_location@plt>
   162b8:	mov	r3, r4
   162bc:	ldr	r2, [pc, #48]	; 162f4 <__assert_fail@plt+0x4ee0>
   162c0:	ldr	r1, [r0]
   162c4:	mov	r0, #0
   162c8:	bl	1121c <error@plt>
   162cc:	b	162a8 <__assert_fail@plt+0x4e94>
   162d0:	ldr	r3, [pc, #24]	; 162f0 <__assert_fail@plt+0x4edc>
   162d4:	ldr	r0, [r3]
   162d8:	bl	11120 <_exit@plt>
   162dc:	andeq	sp, r2, r4, asr #3
   162e0:	andeq	sp, r2, r0, ror #3
   162e4:	andeq	sp, r2, r0, asr #3
   162e8:	andeq	fp, r1, r4, lsl #14
   162ec:	andeq	ip, r1, r4, lsl #8
   162f0:	andeq	sp, r2, r8, ror #2
   162f4:	andeq	ip, r1, r8, lsl #8
   162f8:	push	{r4, r5, r6, lr}
   162fc:	mov	r5, r0
   16300:	ldrb	r4, [r0]
   16304:	cmp	r4, #47	; 0x2f
   16308:	movne	r4, #0
   1630c:	moveq	r4, #1
   16310:	bl	160a4 <__assert_fail@plt+0x4c90>
   16314:	sub	r0, r0, r5
   16318:	cmp	r0, r4
   1631c:	bls	16354 <__assert_fail@plt+0x4f40>
   16320:	sub	r3, r0, #1
   16324:	add	r2, r5, r3
   16328:	ldrb	r1, [r5, r3]
   1632c:	cmp	r1, #47	; 0x2f
   16330:	bne	1635c <__assert_fail@plt+0x4f48>
   16334:	cmp	r4, r3
   16338:	beq	16368 <__assert_fail@plt+0x4f54>
   1633c:	sub	r0, r3, #1
   16340:	ldrb	r1, [r2, #-1]!
   16344:	cmp	r1, #47	; 0x2f
   16348:	bne	16364 <__assert_fail@plt+0x4f50>
   1634c:	mov	r3, r0
   16350:	b	16334 <__assert_fail@plt+0x4f20>
   16354:	mov	r4, r0
   16358:	b	16368 <__assert_fail@plt+0x4f54>
   1635c:	mov	r4, r0
   16360:	b	16368 <__assert_fail@plt+0x4f54>
   16364:	mov	r4, r3
   16368:	mov	r0, r4
   1636c:	pop	{r4, r5, r6, pc}
   16370:	push	{r4, r5, r6, r7, r8, lr}
   16374:	mov	r7, r0
   16378:	bl	162f8 <__assert_fail@plt+0x4ee4>
   1637c:	mov	r4, r0
   16380:	add	r6, r0, #1
   16384:	cmp	r0, #0
   16388:	movne	r0, r6
   1638c:	addeq	r0, r6, #1
   16390:	bl	1a750 <__assert_fail@plt+0x933c>
   16394:	subs	r5, r0, #0
   16398:	beq	163c4 <__assert_fail@plt+0x4fb0>
   1639c:	mov	r2, r4
   163a0:	mov	r1, r7
   163a4:	mov	r0, r5
   163a8:	bl	1112c <memcpy@plt>
   163ac:	cmp	r4, #0
   163b0:	moveq	r3, #46	; 0x2e
   163b4:	strbeq	r3, [r5, r4]
   163b8:	moveq	r4, r6
   163bc:	mov	r3, #0
   163c0:	strb	r3, [r5, r4]
   163c4:	mov	r0, r5
   163c8:	pop	{r4, r5, r6, r7, r8, pc}
   163cc:	push	{r1, r2, r3}
   163d0:	push	{r4, r5, r6, lr}
   163d4:	sub	sp, sp, #12
   163d8:	mov	r5, r0
   163dc:	ldr	r1, [sp, #28]
   163e0:	add	r3, sp, #32
   163e4:	str	r3, [sp, #4]
   163e8:	cmp	r1, #0
   163ec:	beq	16434 <__assert_fail@plt+0x5020>
   163f0:	ldr	r3, [pc, #540]	; 16614 <__assert_fail@plt+0x5200>
   163f4:	cmp	r1, r3
   163f8:	beq	16464 <__assert_fail@plt+0x5050>
   163fc:	cmp	r1, #11
   16400:	beq	16604 <__assert_fail@plt+0x51f0>
   16404:	bgt	16590 <__assert_fail@plt+0x517c>
   16408:	cmp	r1, #3
   1640c:	beq	16604 <__assert_fail@plt+0x51f0>
   16410:	ble	16550 <__assert_fail@plt+0x513c>
   16414:	cmp	r1, #8
   16418:	beq	16570 <__assert_fail@plt+0x515c>
   1641c:	ble	16568 <__assert_fail@plt+0x5154>
   16420:	cmp	r1, #9
   16424:	beq	16604 <__assert_fail@plt+0x51f0>
   16428:	cmp	r1, #10
   1642c:	bne	165c8 <__assert_fail@plt+0x51b4>
   16430:	b	16570 <__assert_fail@plt+0x515c>
   16434:	ldr	r3, [sp, #4]
   16438:	add	r2, r3, #4
   1643c:	str	r2, [sp, #4]
   16440:	ldr	r2, [r3]
   16444:	mov	r1, #0
   16448:	bl	11360 <fcntl64@plt>
   1644c:	mov	r4, r0
   16450:	mov	r0, r4
   16454:	add	sp, sp, #12
   16458:	pop	{r4, r5, r6, lr}
   1645c:	add	sp, sp, #12
   16460:	bx	lr
   16464:	ldr	r3, [sp, #4]
   16468:	add	r2, r3, #4
   1646c:	str	r2, [sp, #4]
   16470:	ldr	r6, [r3]
   16474:	ldr	r3, [pc, #412]	; 16618 <__assert_fail@plt+0x5204>
   16478:	ldr	r3, [r3]
   1647c:	cmp	r3, #0
   16480:	blt	164e0 <__assert_fail@plt+0x50cc>
   16484:	mov	r2, r6
   16488:	ldr	r1, [pc, #388]	; 16614 <__assert_fail@plt+0x5200>
   1648c:	bl	11360 <fcntl64@plt>
   16490:	subs	r4, r0, #0
   16494:	blt	164a8 <__assert_fail@plt+0x5094>
   16498:	mov	r2, #1
   1649c:	ldr	r3, [pc, #372]	; 16618 <__assert_fail@plt+0x5204>
   164a0:	str	r2, [r3]
   164a4:	b	16450 <__assert_fail@plt+0x503c>
   164a8:	bl	112dc <__errno_location@plt>
   164ac:	ldr	r3, [r0]
   164b0:	cmp	r3, #22
   164b4:	bne	16498 <__assert_fail@plt+0x5084>
   164b8:	mov	r2, r6
   164bc:	mov	r1, #0
   164c0:	mov	r0, r5
   164c4:	bl	11360 <fcntl64@plt>
   164c8:	subs	r4, r0, #0
   164cc:	blt	16450 <__assert_fail@plt+0x503c>
   164d0:	mvn	r2, #0
   164d4:	ldr	r3, [pc, #316]	; 16618 <__assert_fail@plt+0x5204>
   164d8:	str	r2, [r3]
   164dc:	b	16504 <__assert_fail@plt+0x50f0>
   164e0:	mov	r2, r6
   164e4:	mov	r1, #0
   164e8:	bl	11360 <fcntl64@plt>
   164ec:	subs	r4, r0, #0
   164f0:	blt	16450 <__assert_fail@plt+0x503c>
   164f4:	ldr	r3, [pc, #284]	; 16618 <__assert_fail@plt+0x5204>
   164f8:	ldr	r3, [r3]
   164fc:	cmn	r3, #1
   16500:	bne	16450 <__assert_fail@plt+0x503c>
   16504:	mov	r1, #1
   16508:	mov	r0, r4
   1650c:	bl	11360 <fcntl64@plt>
   16510:	subs	r2, r0, #0
   16514:	blt	16530 <__assert_fail@plt+0x511c>
   16518:	orr	r2, r2, #1
   1651c:	mov	r1, #2
   16520:	mov	r0, r4
   16524:	bl	11360 <fcntl64@plt>
   16528:	cmn	r0, #1
   1652c:	bne	16450 <__assert_fail@plt+0x503c>
   16530:	bl	112dc <__errno_location@plt>
   16534:	mov	r5, r0
   16538:	ldr	r6, [r0]
   1653c:	mov	r0, r4
   16540:	bl	113fc <close@plt>
   16544:	str	r6, [r5]
   16548:	mvn	r4, #0
   1654c:	b	16450 <__assert_fail@plt+0x503c>
   16550:	cmp	r1, #1
   16554:	beq	16604 <__assert_fail@plt+0x51f0>
   16558:	bgt	16570 <__assert_fail@plt+0x515c>
   1655c:	cmp	r1, #0
   16560:	bne	165c8 <__assert_fail@plt+0x51b4>
   16564:	b	16570 <__assert_fail@plt+0x515c>
   16568:	cmp	r1, #4
   1656c:	bne	165c8 <__assert_fail@plt+0x51b4>
   16570:	ldr	r3, [sp, #4]
   16574:	add	r2, r3, #4
   16578:	str	r2, [sp, #4]
   1657c:	ldr	r2, [r3]
   16580:	mov	r0, r5
   16584:	bl	11360 <fcntl64@plt>
   16588:	mov	r4, r0
   1658c:	b	16450 <__assert_fail@plt+0x503c>
   16590:	ldr	r3, [pc, #132]	; 1661c <__assert_fail@plt+0x5208>
   16594:	cmp	r1, r3
   16598:	bgt	165e8 <__assert_fail@plt+0x51d4>
   1659c:	sub	r3, r3, #1
   165a0:	cmp	r1, r3
   165a4:	bge	16570 <__assert_fail@plt+0x515c>
   165a8:	sub	r3, r3, #5
   165ac:	cmp	r1, r3
   165b0:	beq	16604 <__assert_fail@plt+0x51f0>
   165b4:	add	r3, r3, #1
   165b8:	cmp	r1, r3
   165bc:	beq	16570 <__assert_fail@plt+0x515c>
   165c0:	cmp	r1, #1024	; 0x400
   165c4:	beq	16570 <__assert_fail@plt+0x515c>
   165c8:	ldr	r3, [sp, #4]
   165cc:	add	r2, r3, #4
   165d0:	str	r2, [sp, #4]
   165d4:	ldr	r2, [r3]
   165d8:	mov	r0, r5
   165dc:	bl	11360 <fcntl64@plt>
   165e0:	mov	r4, r0
   165e4:	b	16450 <__assert_fail@plt+0x503c>
   165e8:	ldr	r3, [pc, #48]	; 16620 <__assert_fail@plt+0x520c>
   165ec:	cmp	r1, r3
   165f0:	beq	16570 <__assert_fail@plt+0x515c>
   165f4:	blt	16604 <__assert_fail@plt+0x51f0>
   165f8:	add	r3, r3, #1
   165fc:	cmp	r1, r3
   16600:	bne	165c8 <__assert_fail@plt+0x51b4>
   16604:	mov	r0, r5
   16608:	bl	11360 <fcntl64@plt>
   1660c:	mov	r4, r0
   16610:	b	16450 <__assert_fail@plt+0x503c>
   16614:	andeq	r0, r0, r6, lsl #8
   16618:	andeq	sp, r2, r8, ror #3
   1661c:	andeq	r0, r0, r7, lsl #8
   16620:	andeq	r0, r0, r9, lsl #8
   16624:	push	{r1, r2, r3}
   16628:	push	{lr}		; (str lr, [sp, #-4]!)
   1662c:	sub	sp, sp, #8
   16630:	ldr	r1, [sp, #12]
   16634:	tst	r1, #64	; 0x40
   16638:	addne	r3, sp, #20
   1663c:	strne	r3, [sp, #4]
   16640:	ldrne	r2, [sp, #16]
   16644:	moveq	r2, #0
   16648:	bl	11228 <open64@plt>
   1664c:	bl	19350 <__assert_fail@plt+0x7f3c>
   16650:	add	sp, sp, #8
   16654:	pop	{lr}		; (ldr lr, [sp], #4)
   16658:	add	sp, sp, #12
   1665c:	bx	lr
   16660:	push	{r4, r5, lr}
   16664:	sub	sp, sp, #12
   16668:	mov	r5, r0
   1666c:	bl	112dc <__errno_location@plt>
   16670:	mov	r4, r0
   16674:	ldr	r3, [r0]
   16678:	str	r3, [sp]
   1667c:	str	r3, [sp, #4]
   16680:	mov	r3, #0
   16684:	str	r3, [r0]
   16688:	mov	r0, r5
   1668c:	bl	11108 <free@plt>
   16690:	ldr	r3, [r4]
   16694:	cmp	r3, #0
   16698:	moveq	r3, #4
   1669c:	movne	r3, #0
   166a0:	add	r2, sp, #8
   166a4:	add	r3, r2, r3
   166a8:	ldr	r3, [r3, #-8]
   166ac:	str	r3, [r4]
   166b0:	add	sp, sp, #12
   166b4:	pop	{r4, r5, pc}
   166b8:	push	{r4, lr}
   166bc:	ror	r0, r0, #3
   166c0:	bl	1af50 <__assert_fail@plt+0x9b3c>
   166c4:	mov	r0, r1
   166c8:	pop	{r4, pc}
   166cc:	cmp	r1, r0
   166d0:	movne	r0, #0
   166d4:	moveq	r0, #1
   166d8:	bx	lr
   166dc:	ldr	r3, [r0, #20]
   166e0:	ldr	r2, [pc, #176]	; 16798 <__assert_fail@plt+0x5384>
   166e4:	cmp	r3, r2
   166e8:	beq	16780 <__assert_fail@plt+0x536c>
   166ec:	vldr	s15, [r3, #8]
   166f0:	vldr	s14, [pc, #144]	; 16788 <__assert_fail@plt+0x5374>
   166f4:	vcmpe.f32	s15, s14
   166f8:	vmrs	APSR_nzcv, fpscr
   166fc:	ble	1675c <__assert_fail@plt+0x5348>
   16700:	vldr	s14, [pc, #132]	; 1678c <__assert_fail@plt+0x5378>
   16704:	vcmpe.f32	s15, s14
   16708:	vmrs	APSR_nzcv, fpscr
   1670c:	bpl	1675c <__assert_fail@plt+0x5348>
   16710:	vldr	s13, [r3, #12]
   16714:	vldr	s14, [pc, #116]	; 16790 <__assert_fail@plt+0x537c>
   16718:	vcmpe.f32	s13, s14
   1671c:	vmrs	APSR_nzcv, fpscr
   16720:	ble	1675c <__assert_fail@plt+0x5348>
   16724:	vldr	s14, [r3]
   16728:	vcmpe.f32	s14, #0.0
   1672c:	vmrs	APSR_nzcv, fpscr
   16730:	blt	1675c <__assert_fail@plt+0x5348>
   16734:	vldr	s13, [pc, #76]	; 16788 <__assert_fail@plt+0x5374>
   16738:	vadd.f32	s14, s14, s13
   1673c:	vldr	s13, [r3, #4]
   16740:	vcmpe.f32	s14, s13
   16744:	vmrs	APSR_nzcv, fpscr
   16748:	bpl	1675c <__assert_fail@plt+0x5348>
   1674c:	vldr	s12, [pc, #64]	; 16794 <__assert_fail@plt+0x5380>
   16750:	vcmpe.f32	s13, s12
   16754:	vmrs	APSR_nzcv, fpscr
   16758:	bls	1676c <__assert_fail@plt+0x5358>
   1675c:	ldr	r3, [pc, #52]	; 16798 <__assert_fail@plt+0x5384>
   16760:	str	r3, [r0, #20]
   16764:	mov	r0, #0
   16768:	bx	lr
   1676c:	vcmpe.f32	s15, s14
   16770:	vmrs	APSR_nzcv, fpscr
   16774:	ble	1675c <__assert_fail@plt+0x5348>
   16778:	mov	r0, #1
   1677c:	bx	lr
   16780:	mov	r0, #1
   16784:	bx	lr
   16788:	stclcc	12, cr12, [ip, #820]	; 0x334
   1678c:	svccc	0x00666666
   16790:	svccc	0x008ccccd
   16794:	svccc	0x00800000
   16798:	ldrdeq	ip, [r1], -r0
   1679c:	push	{r4, lr}
   167a0:	mov	r4, r0
   167a4:	mov	r0, r1
   167a8:	ldr	r3, [r4, #24]
   167ac:	ldr	r1, [r4, #8]
   167b0:	blx	r3
   167b4:	ldr	r3, [r4, #8]
   167b8:	cmp	r0, r3
   167bc:	bcs	167cc <__assert_fail@plt+0x53b8>
   167c0:	ldr	r3, [r4]
   167c4:	add	r0, r3, r0, lsl #3
   167c8:	pop	{r4, pc}
   167cc:	bl	113f0 <abort@plt>
   167d0:	push	{r4, r5, r6, r7, r8, lr}
   167d4:	ldrb	r3, [r1, #16]
   167d8:	cmp	r3, #0
   167dc:	bne	1680c <__assert_fail@plt+0x53f8>
   167e0:	vmov	s15, r0
   167e4:	vcvt.f32.u32	s13, s15
   167e8:	vldr	s14, [r1, #8]
   167ec:	vdiv.f32	s15, s13, s14
   167f0:	vldr	s14, [pc, #204]	; 168c4 <__assert_fail@plt+0x54b0>
   167f4:	vcmpe.f32	s15, s14
   167f8:	vmrs	APSR_nzcv, fpscr
   167fc:	movge	r7, #0
   16800:	bge	16844 <__assert_fail@plt+0x5430>
   16804:	vcvt.u32.f32	s15, s15
   16808:	vmov	r0, s15
   1680c:	cmp	r0, #10
   16810:	movcc	r0, #10
   16814:	orr	r7, r0, #1
   16818:	cmn	r7, #1
   1681c:	ldrne	r8, [pc, #164]	; 168c8 <__assert_fail@plt+0x54b4>
   16820:	bne	16870 <__assert_fail@plt+0x545c>
   16824:	lsr	r3, r7, #30
   16828:	lsl	r2, r7, #2
   1682c:	adds	r3, r3, #0
   16830:	movne	r3, #1
   16834:	cmp	r2, #0
   16838:	movlt	r3, #1
   1683c:	cmp	r3, #0
   16840:	movne	r7, #0
   16844:	mov	r0, r7
   16848:	pop	{r4, r5, r6, r7, r8, pc}
   1684c:	mov	r4, #3
   16850:	mov	r1, r4
   16854:	mov	r0, r7
   16858:	bl	1af50 <__assert_fail@plt+0x9b3c>
   1685c:	cmp	r1, #0
   16860:	bne	16824 <__assert_fail@plt+0x5410>
   16864:	add	r7, r7, #2
   16868:	cmn	r7, #1
   1686c:	beq	16824 <__assert_fail@plt+0x5410>
   16870:	cmp	r7, #9
   16874:	bls	1684c <__assert_fail@plt+0x5438>
   16878:	umull	r2, r3, r8, r7
   1687c:	lsr	r3, r3, #1
   16880:	add	r3, r3, r3, lsl #1
   16884:	cmp	r7, r3
   16888:	beq	16864 <__assert_fail@plt+0x5450>
   1688c:	mov	r6, #16
   16890:	mov	r5, #9
   16894:	mov	r4, #3
   16898:	add	r5, r5, r6
   1689c:	add	r4, r4, #2
   168a0:	cmp	r5, r7
   168a4:	bcs	16850 <__assert_fail@plt+0x543c>
   168a8:	add	r6, r6, #8
   168ac:	mov	r1, r4
   168b0:	mov	r0, r7
   168b4:	bl	1af50 <__assert_fail@plt+0x9b3c>
   168b8:	cmp	r1, #0
   168bc:	bne	16898 <__assert_fail@plt+0x5484>
   168c0:	b	16864 <__assert_fail@plt+0x5450>
   168c4:	svcmi	0x00800000
   168c8:	bge	feac137c <optarg@@GLIBC_2.4+0xfea941b4>
   168cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168d0:	ldr	r7, [r1]
   168d4:	ldr	r3, [r1, #4]
   168d8:	cmp	r7, r3
   168dc:	bcs	16a10 <__assert_fail@plt+0x55fc>
   168e0:	mov	fp, r2
   168e4:	mov	sl, r1
   168e8:	mov	r6, r0
   168ec:	add	r7, r7, #8
   168f0:	mov	r9, #0
   168f4:	b	1695c <__assert_fail@plt+0x5548>
   168f8:	str	r5, [r0]
   168fc:	ldr	r2, [r6, #12]
   16900:	add	r2, r2, #1
   16904:	str	r2, [r6, #12]
   16908:	str	r9, [r4]
   1690c:	ldr	r2, [r6, #36]	; 0x24
   16910:	str	r2, [r4, #4]
   16914:	str	r4, [r6, #36]	; 0x24
   16918:	b	169a4 <__assert_fail@plt+0x5590>
   1691c:	mov	r0, #8
   16920:	bl	1a750 <__assert_fail@plt+0x933c>
   16924:	cmp	r0, #0
   16928:	beq	16a18 <__assert_fail@plt+0x5604>
   1692c:	str	r4, [r0]
   16930:	ldr	r3, [r5, #4]
   16934:	str	r3, [r0, #4]
   16938:	str	r0, [r5, #4]
   1693c:	str	r9, [r8, #-8]
   16940:	ldr	r3, [sl, #12]
   16944:	sub	r3, r3, #1
   16948:	str	r3, [sl, #12]
   1694c:	add	r7, r7, #8
   16950:	ldr	r3, [sl, #4]
   16954:	cmp	r3, r8
   16958:	bls	16a08 <__assert_fail@plt+0x55f4>
   1695c:	mov	r8, r7
   16960:	ldr	r3, [r7, #-8]
   16964:	cmp	r3, #0
   16968:	beq	1694c <__assert_fail@plt+0x5538>
   1696c:	ldr	r4, [r7, #-4]
   16970:	cmp	r4, #0
   16974:	beq	169b0 <__assert_fail@plt+0x559c>
   16978:	ldr	r5, [r4]
   1697c:	mov	r1, r5
   16980:	mov	r0, r6
   16984:	bl	1679c <__assert_fail@plt+0x5388>
   16988:	ldr	r3, [r4, #4]
   1698c:	ldr	r2, [r0]
   16990:	cmp	r2, #0
   16994:	beq	168f8 <__assert_fail@plt+0x54e4>
   16998:	ldr	r2, [r0, #4]
   1699c:	str	r2, [r4, #4]
   169a0:	str	r4, [r0, #4]
   169a4:	mov	r4, r3
   169a8:	cmp	r3, #0
   169ac:	bne	16978 <__assert_fail@plt+0x5564>
   169b0:	ldr	r4, [r8, #-8]
   169b4:	str	r9, [r8, #-4]
   169b8:	cmp	fp, #0
   169bc:	bne	1694c <__assert_fail@plt+0x5538>
   169c0:	mov	r1, r4
   169c4:	mov	r0, r6
   169c8:	bl	1679c <__assert_fail@plt+0x5388>
   169cc:	mov	r5, r0
   169d0:	ldr	r3, [r0]
   169d4:	cmp	r3, #0
   169d8:	beq	169f4 <__assert_fail@plt+0x55e0>
   169dc:	ldr	r0, [r6, #36]	; 0x24
   169e0:	cmp	r0, #0
   169e4:	beq	1691c <__assert_fail@plt+0x5508>
   169e8:	ldr	r3, [r0, #4]
   169ec:	str	r3, [r6, #36]	; 0x24
   169f0:	b	1692c <__assert_fail@plt+0x5518>
   169f4:	str	r4, [r0]
   169f8:	ldr	r3, [r6, #12]
   169fc:	add	r3, r3, #1
   16a00:	str	r3, [r6, #12]
   16a04:	b	1693c <__assert_fail@plt+0x5528>
   16a08:	mov	r0, #1
   16a0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a10:	mov	r0, #1
   16a14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a18:	mov	r0, fp
   16a1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a20:	push	{r4, r5, r6, r7, r8, lr}
   16a24:	mov	r6, r0
   16a28:	mov	r5, r1
   16a2c:	mov	r8, r2
   16a30:	mov	r7, r3
   16a34:	bl	1679c <__assert_fail@plt+0x5388>
   16a38:	str	r0, [r8]
   16a3c:	ldr	r3, [r0]
   16a40:	cmp	r3, #0
   16a44:	beq	16b1c <__assert_fail@plt+0x5708>
   16a48:	mov	r4, r0
   16a4c:	cmp	r5, r3
   16a50:	beq	16ae4 <__assert_fail@plt+0x56d0>
   16a54:	ldr	r2, [r6, #28]
   16a58:	mov	r1, r3
   16a5c:	mov	r0, r5
   16a60:	blx	r2
   16a64:	cmp	r0, #0
   16a68:	bne	16ae4 <__assert_fail@plt+0x56d0>
   16a6c:	ldr	r3, [r4, #4]
   16a70:	cmp	r3, #0
   16a74:	beq	16b24 <__assert_fail@plt+0x5710>
   16a78:	ldr	r1, [r3]
   16a7c:	cmp	r5, r1
   16a80:	beq	16ab4 <__assert_fail@plt+0x56a0>
   16a84:	ldr	r3, [r6, #28]
   16a88:	mov	r0, r5
   16a8c:	blx	r3
   16a90:	cmp	r0, #0
   16a94:	bne	16ab4 <__assert_fail@plt+0x56a0>
   16a98:	ldr	r4, [r4, #4]
   16a9c:	ldr	r3, [r4, #4]
   16aa0:	cmp	r3, #0
   16aa4:	beq	16b1c <__assert_fail@plt+0x5708>
   16aa8:	ldr	r1, [r3]
   16aac:	cmp	r5, r1
   16ab0:	bne	16a84 <__assert_fail@plt+0x5670>
   16ab4:	ldr	r2, [r4, #4]
   16ab8:	ldr	r3, [r2]
   16abc:	cmp	r7, #0
   16ac0:	beq	16b1c <__assert_fail@plt+0x5708>
   16ac4:	ldr	r1, [r2, #4]
   16ac8:	str	r1, [r4, #4]
   16acc:	mov	r1, #0
   16ad0:	str	r1, [r2]
   16ad4:	ldr	r1, [r6, #36]	; 0x24
   16ad8:	str	r1, [r2, #4]
   16adc:	str	r2, [r6, #36]	; 0x24
   16ae0:	b	16b1c <__assert_fail@plt+0x5708>
   16ae4:	ldr	r3, [r4]
   16ae8:	cmp	r7, #0
   16aec:	beq	16b1c <__assert_fail@plt+0x5708>
   16af0:	ldr	r2, [r4, #4]
   16af4:	cmp	r2, #0
   16af8:	ldmne	r2, {r0, r1}
   16afc:	stmne	r4, {r0, r1}
   16b00:	movne	r1, #0
   16b04:	strne	r1, [r2]
   16b08:	ldrne	r1, [r6, #36]	; 0x24
   16b0c:	strne	r1, [r2, #4]
   16b10:	strne	r2, [r6, #36]	; 0x24
   16b14:	moveq	r2, #0
   16b18:	streq	r2, [r4]
   16b1c:	mov	r0, r3
   16b20:	pop	{r4, r5, r6, r7, r8, pc}
   16b24:	mov	r3, #0
   16b28:	b	16b1c <__assert_fail@plt+0x5708>
   16b2c:	ldr	r0, [r0, #8]
   16b30:	bx	lr
   16b34:	ldr	r0, [r0, #12]
   16b38:	bx	lr
   16b3c:	ldr	r0, [r0, #16]
   16b40:	bx	lr
   16b44:	ldr	r1, [r0]
   16b48:	ldr	ip, [r0, #4]
   16b4c:	cmp	r1, ip
   16b50:	bcs	16ba8 <__assert_fail@plt+0x5794>
   16b54:	mov	r0, #0
   16b58:	b	16b74 <__assert_fail@plt+0x5760>
   16b5c:	mov	r2, #1
   16b60:	cmp	r0, r2
   16b64:	movcc	r0, r2
   16b68:	add	r1, r1, #8
   16b6c:	cmp	r1, ip
   16b70:	bcs	16ba4 <__assert_fail@plt+0x5790>
   16b74:	ldr	r3, [r1]
   16b78:	cmp	r3, #0
   16b7c:	beq	16b68 <__assert_fail@plt+0x5754>
   16b80:	ldr	r3, [r1, #4]
   16b84:	cmp	r3, #0
   16b88:	beq	16b5c <__assert_fail@plt+0x5748>
   16b8c:	mov	r2, #1
   16b90:	add	r2, r2, #1
   16b94:	ldr	r3, [r3, #4]
   16b98:	cmp	r3, #0
   16b9c:	bne	16b90 <__assert_fail@plt+0x577c>
   16ba0:	b	16b60 <__assert_fail@plt+0x574c>
   16ba4:	bx	lr
   16ba8:	mov	r0, #0
   16bac:	bx	lr
   16bb0:	push	{lr}		; (str lr, [sp, #-4]!)
   16bb4:	ldr	r1, [r0]
   16bb8:	ldr	lr, [r0, #4]
   16bbc:	cmp	r1, lr
   16bc0:	bcs	16c10 <__assert_fail@plt+0x57fc>
   16bc4:	mov	r2, #0
   16bc8:	mov	ip, r2
   16bcc:	b	16bdc <__assert_fail@plt+0x57c8>
   16bd0:	add	r1, r1, #8
   16bd4:	cmp	r1, lr
   16bd8:	bcs	16c18 <__assert_fail@plt+0x5804>
   16bdc:	ldr	r3, [r1]
   16be0:	cmp	r3, #0
   16be4:	beq	16bd0 <__assert_fail@plt+0x57bc>
   16be8:	add	ip, ip, #1
   16bec:	add	r2, r2, #1
   16bf0:	ldr	r3, [r1, #4]
   16bf4:	cmp	r3, #0
   16bf8:	beq	16bd0 <__assert_fail@plt+0x57bc>
   16bfc:	add	r2, r2, #1
   16c00:	ldr	r3, [r3, #4]
   16c04:	cmp	r3, #0
   16c08:	bne	16bfc <__assert_fail@plt+0x57e8>
   16c0c:	b	16bd0 <__assert_fail@plt+0x57bc>
   16c10:	mov	r2, #0
   16c14:	mov	ip, r2
   16c18:	ldr	r3, [r0, #12]
   16c1c:	cmp	r3, ip
   16c20:	beq	16c2c <__assert_fail@plt+0x5818>
   16c24:	mov	r0, #0
   16c28:	pop	{pc}		; (ldr pc, [sp], #4)
   16c2c:	ldr	r0, [r0, #16]
   16c30:	cmp	r0, r2
   16c34:	movne	r0, #0
   16c38:	moveq	r0, #1
   16c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   16c40:	push	{r4, r5, r6, r7, r8, lr}
   16c44:	sub	sp, sp, #8
   16c48:	mov	r6, r0
   16c4c:	mov	r4, r1
   16c50:	ldr	r5, [r0, #8]
   16c54:	ldr	r7, [r0, #12]
   16c58:	bl	16b44 <__assert_fail@plt+0x5730>
   16c5c:	mov	r8, r0
   16c60:	ldr	r3, [r6, #16]
   16c64:	ldr	r2, [pc, #116]	; 16ce0 <__assert_fail@plt+0x58cc>
   16c68:	mov	r1, #1
   16c6c:	mov	r0, r4
   16c70:	bl	11324 <__fprintf_chk@plt>
   16c74:	mov	r3, r5
   16c78:	ldr	r2, [pc, #100]	; 16ce4 <__assert_fail@plt+0x58d0>
   16c7c:	mov	r1, #1
   16c80:	mov	r0, r4
   16c84:	bl	11324 <__fprintf_chk@plt>
   16c88:	vmov	s15, r7
   16c8c:	vcvt.f64.u32	d6, s15
   16c90:	vldr	d7, [pc, #64]	; 16cd8 <__assert_fail@plt+0x58c4>
   16c94:	vmul.f64	d6, d6, d7
   16c98:	vmov	s15, r5
   16c9c:	vcvt.f64.u32	d7, s15
   16ca0:	vdiv.f64	d5, d6, d7
   16ca4:	vstr	d5, [sp]
   16ca8:	mov	r3, r7
   16cac:	ldr	r2, [pc, #52]	; 16ce8 <__assert_fail@plt+0x58d4>
   16cb0:	mov	r1, #1
   16cb4:	mov	r0, r4
   16cb8:	bl	11324 <__fprintf_chk@plt>
   16cbc:	mov	r3, r8
   16cc0:	ldr	r2, [pc, #36]	; 16cec <__assert_fail@plt+0x58d8>
   16cc4:	mov	r1, #1
   16cc8:	mov	r0, r4
   16ccc:	bl	11324 <__fprintf_chk@plt>
   16cd0:	add	sp, sp, #8
   16cd4:	pop	{r4, r5, r6, r7, r8, pc}
   16cd8:	andeq	r0, r0, r0
   16cdc:	subsmi	r0, r9, r0
   16ce0:	andeq	ip, r1, r4, ror #19
   16ce4:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   16ce8:	andeq	ip, r1, r4, lsl sl
   16cec:	andeq	ip, r1, r8, lsr sl
   16cf0:	push	{r4, r5, r6, lr}
   16cf4:	mov	r6, r0
   16cf8:	mov	r5, r1
   16cfc:	bl	1679c <__assert_fail@plt+0x5388>
   16d00:	ldr	r1, [r0]
   16d04:	cmp	r1, #0
   16d08:	beq	16d5c <__assert_fail@plt+0x5948>
   16d0c:	mov	r4, r0
   16d10:	cmp	r0, #0
   16d14:	beq	16d64 <__assert_fail@plt+0x5950>
   16d18:	cmp	r5, r1
   16d1c:	beq	16d4c <__assert_fail@plt+0x5938>
   16d20:	ldr	r3, [r6, #28]
   16d24:	mov	r0, r5
   16d28:	blx	r3
   16d2c:	cmp	r0, #0
   16d30:	bne	16d4c <__assert_fail@plt+0x5938>
   16d34:	ldr	r4, [r4, #4]
   16d38:	cmp	r4, #0
   16d3c:	beq	16d54 <__assert_fail@plt+0x5940>
   16d40:	ldr	r1, [r4]
   16d44:	cmp	r5, r1
   16d48:	bne	16d20 <__assert_fail@plt+0x590c>
   16d4c:	ldr	r0, [r4]
   16d50:	pop	{r4, r5, r6, pc}
   16d54:	mov	r0, #0
   16d58:	pop	{r4, r5, r6, pc}
   16d5c:	mov	r0, #0
   16d60:	pop	{r4, r5, r6, pc}
   16d64:	mov	r0, #0
   16d68:	pop	{r4, r5, r6, pc}
   16d6c:	ldr	r3, [r0, #16]
   16d70:	cmp	r3, #0
   16d74:	beq	16db8 <__assert_fail@plt+0x59a4>
   16d78:	ldr	r3, [r0]
   16d7c:	ldr	r2, [r0, #4]
   16d80:	cmp	r3, r2
   16d84:	bcs	16db0 <__assert_fail@plt+0x599c>
   16d88:	ldr	r0, [r3]
   16d8c:	cmp	r0, #0
   16d90:	bne	16dac <__assert_fail@plt+0x5998>
   16d94:	add	r3, r3, #8
   16d98:	cmp	r3, r2
   16d9c:	bcs	16db0 <__assert_fail@plt+0x599c>
   16da0:	ldr	r0, [r3]
   16da4:	cmp	r0, #0
   16da8:	beq	16d94 <__assert_fail@plt+0x5980>
   16dac:	bx	lr
   16db0:	push	{r4, lr}
   16db4:	bl	113f0 <abort@plt>
   16db8:	mov	r0, #0
   16dbc:	b	16dac <__assert_fail@plt+0x5998>
   16dc0:	push	{r4, r5, r6, lr}
   16dc4:	mov	r5, r0
   16dc8:	mov	r4, r1
   16dcc:	bl	1679c <__assert_fail@plt+0x5388>
   16dd0:	mov	r2, r0
   16dd4:	mov	r3, r0
   16dd8:	ldr	r1, [r3]
   16ddc:	cmp	r4, r1
   16de0:	beq	16df4 <__assert_fail@plt+0x59e0>
   16de4:	ldr	r3, [r3, #4]
   16de8:	cmp	r3, #0
   16dec:	bne	16dd8 <__assert_fail@plt+0x59c4>
   16df0:	b	16e00 <__assert_fail@plt+0x59ec>
   16df4:	ldr	r3, [r3, #4]
   16df8:	cmp	r3, #0
   16dfc:	bne	16e20 <__assert_fail@plt+0x5a0c>
   16e00:	ldr	r3, [r5, #4]
   16e04:	add	r2, r2, #8
   16e08:	cmp	r2, r3
   16e0c:	bcs	16e28 <__assert_fail@plt+0x5a14>
   16e10:	ldr	r0, [r2]
   16e14:	cmp	r0, #0
   16e18:	beq	16e04 <__assert_fail@plt+0x59f0>
   16e1c:	pop	{r4, r5, r6, pc}
   16e20:	ldr	r0, [r3]
   16e24:	pop	{r4, r5, r6, pc}
   16e28:	mov	r0, #0
   16e2c:	pop	{r4, r5, r6, pc}
   16e30:	push	{r4, r5, lr}
   16e34:	ldr	r4, [r0]
   16e38:	ldr	r3, [r0, #4]
   16e3c:	cmp	r4, r3
   16e40:	bcs	16eac <__assert_fail@plt+0x5a98>
   16e44:	mov	r5, r0
   16e48:	mov	r0, #0
   16e4c:	b	16e60 <__assert_fail@plt+0x5a4c>
   16e50:	add	r4, r4, #8
   16e54:	ldr	r3, [r5, #4]
   16e58:	cmp	r3, r4
   16e5c:	bls	16ea8 <__assert_fail@plt+0x5a94>
   16e60:	ldr	r3, [r4]
   16e64:	cmp	r3, #0
   16e68:	beq	16e50 <__assert_fail@plt+0x5a3c>
   16e6c:	cmp	r4, #0
   16e70:	beq	16e50 <__assert_fail@plt+0x5a3c>
   16e74:	cmp	r2, r0
   16e78:	popls	{r4, r5, pc}
   16e7c:	add	ip, r1, r0, lsl #2
   16e80:	mov	r3, r4
   16e84:	add	r0, r0, #1
   16e88:	ldr	lr, [r3]
   16e8c:	str	lr, [ip], #4
   16e90:	ldr	r3, [r3, #4]
   16e94:	cmp	r3, #0
   16e98:	beq	16e50 <__assert_fail@plt+0x5a3c>
   16e9c:	cmp	r2, r0
   16ea0:	bne	16e84 <__assert_fail@plt+0x5a70>
   16ea4:	pop	{r4, r5, pc}
   16ea8:	pop	{r4, r5, pc}
   16eac:	mov	r0, #0
   16eb0:	pop	{r4, r5, pc}
   16eb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16eb8:	ldr	r8, [r0]
   16ebc:	ldr	r3, [r0, #4]
   16ec0:	cmp	r8, r3
   16ec4:	bcs	16f2c <__assert_fail@plt+0x5b18>
   16ec8:	mov	r7, r2
   16ecc:	mov	r6, r1
   16ed0:	mov	r9, r0
   16ed4:	mov	r5, #0
   16ed8:	b	16eec <__assert_fail@plt+0x5ad8>
   16edc:	add	r8, r8, #8
   16ee0:	ldr	r3, [r9, #4]
   16ee4:	cmp	r3, r8
   16ee8:	bls	16f30 <__assert_fail@plt+0x5b1c>
   16eec:	ldr	r3, [r8]
   16ef0:	cmp	r3, #0
   16ef4:	beq	16edc <__assert_fail@plt+0x5ac8>
   16ef8:	cmp	r8, #0
   16efc:	beq	16edc <__assert_fail@plt+0x5ac8>
   16f00:	mov	r4, r8
   16f04:	mov	r1, r7
   16f08:	ldr	r0, [r4]
   16f0c:	blx	r6
   16f10:	cmp	r0, #0
   16f14:	beq	16f30 <__assert_fail@plt+0x5b1c>
   16f18:	add	r5, r5, #1
   16f1c:	ldr	r4, [r4, #4]
   16f20:	cmp	r4, #0
   16f24:	bne	16f04 <__assert_fail@plt+0x5af0>
   16f28:	b	16edc <__assert_fail@plt+0x5ac8>
   16f2c:	mov	r5, #0
   16f30:	mov	r0, r5
   16f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f38:	ldrb	r3, [r0]
   16f3c:	cmp	r3, #0
   16f40:	beq	16f78 <__assert_fail@plt+0x5b64>
   16f44:	push	{r4, r5, r6, lr}
   16f48:	mov	r4, r0
   16f4c:	mov	r5, r1
   16f50:	mov	r1, #0
   16f54:	rsb	r0, r1, r1, lsl #5
   16f58:	mov	r1, r5
   16f5c:	add	r0, r0, r3
   16f60:	bl	1af50 <__assert_fail@plt+0x9b3c>
   16f64:	ldrb	r3, [r4, #1]!
   16f68:	cmp	r3, #0
   16f6c:	bne	16f54 <__assert_fail@plt+0x5b40>
   16f70:	mov	r0, r1
   16f74:	pop	{r4, r5, r6, pc}
   16f78:	mov	r1, #0
   16f7c:	mov	r0, r1
   16f80:	bx	lr
   16f84:	push	{lr}		; (str lr, [sp, #-4]!)
   16f88:	mov	ip, r0
   16f8c:	ldr	lr, [pc, #16]	; 16fa4 <__assert_fail@plt+0x5b90>
   16f90:	ldm	lr!, {r0, r1, r2, r3}
   16f94:	stmia	ip!, {r0, r1, r2, r3}
   16f98:	ldr	r3, [lr]
   16f9c:	str	r3, [ip]
   16fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   16fa4:	ldrdeq	ip, [r1], -r0
   16fa8:	push	{r4, r5, r6, r7, r8, lr}
   16fac:	mov	r8, r0
   16fb0:	mov	r5, r1
   16fb4:	subs	r7, r2, #0
   16fb8:	ldr	r2, [pc, #180]	; 17074 <__assert_fail@plt+0x5c60>
   16fbc:	cmp	r7, #0
   16fc0:	moveq	r7, r2
   16fc4:	subs	r6, r3, #0
   16fc8:	ldr	r3, [pc, #168]	; 17078 <__assert_fail@plt+0x5c64>
   16fcc:	cmp	r6, #0
   16fd0:	moveq	r6, r3
   16fd4:	mov	r0, #40	; 0x28
   16fd8:	bl	1a750 <__assert_fail@plt+0x933c>
   16fdc:	subs	r4, r0, #0
   16fe0:	beq	1705c <__assert_fail@plt+0x5c48>
   16fe4:	ldr	r3, [pc, #144]	; 1707c <__assert_fail@plt+0x5c68>
   16fe8:	cmp	r5, #0
   16fec:	moveq	r5, r3
   16ff0:	str	r5, [r4, #20]
   16ff4:	mov	r0, r4
   16ff8:	bl	166dc <__assert_fail@plt+0x52c8>
   16ffc:	cmp	r0, #0
   17000:	beq	17064 <__assert_fail@plt+0x5c50>
   17004:	mov	r1, r5
   17008:	mov	r0, r8
   1700c:	bl	167d0 <__assert_fail@plt+0x53bc>
   17010:	str	r0, [r4, #8]
   17014:	cmp	r0, #0
   17018:	beq	17064 <__assert_fail@plt+0x5c50>
   1701c:	mov	r1, #8
   17020:	bl	1a700 <__assert_fail@plt+0x92ec>
   17024:	str	r0, [r4]
   17028:	cmp	r0, #0
   1702c:	beq	17064 <__assert_fail@plt+0x5c50>
   17030:	ldr	r3, [r4, #8]
   17034:	add	r0, r0, r3, lsl #3
   17038:	str	r0, [r4, #4]
   1703c:	mov	r3, #0
   17040:	str	r3, [r4, #12]
   17044:	str	r3, [r4, #16]
   17048:	str	r7, [r4, #24]
   1704c:	str	r6, [r4, #28]
   17050:	ldr	r2, [sp, #24]
   17054:	str	r2, [r4, #32]
   17058:	str	r3, [r4, #36]	; 0x24
   1705c:	mov	r0, r4
   17060:	pop	{r4, r5, r6, r7, r8, pc}
   17064:	mov	r0, r4
   17068:	bl	16660 <__assert_fail@plt+0x524c>
   1706c:	mov	r4, #0
   17070:	b	1705c <__assert_fail@plt+0x5c48>
   17074:			; <UNDEFINED> instruction: 0x000166b8
   17078:	andeq	r6, r1, ip, asr #13
   1707c:	ldrdeq	ip, [r1], -r0
   17080:	push	{r4, r5, r6, r7, r8, lr}
   17084:	mov	r5, r0
   17088:	ldr	r7, [r0]
   1708c:	ldr	r3, [r0, #4]
   17090:	cmp	r7, r3
   17094:	bcs	17128 <__assert_fail@plt+0x5d14>
   17098:	add	r7, r7, #8
   1709c:	mov	r6, #0
   170a0:	b	17108 <__assert_fail@plt+0x5cf4>
   170a4:	str	r6, [r4]
   170a8:	ldr	r3, [r4, #4]
   170ac:	ldr	r2, [r5, #36]	; 0x24
   170b0:	str	r2, [r4, #4]
   170b4:	str	r4, [r5, #36]	; 0x24
   170b8:	mov	r4, r3
   170bc:	cmp	r3, #0
   170c0:	beq	170dc <__assert_fail@plt+0x5cc8>
   170c4:	ldr	r3, [r5, #32]
   170c8:	cmp	r3, #0
   170cc:	beq	170a4 <__assert_fail@plt+0x5c90>
   170d0:	ldr	r0, [r4]
   170d4:	blx	r3
   170d8:	b	170a4 <__assert_fail@plt+0x5c90>
   170dc:	ldr	r3, [r5, #32]
   170e0:	cmp	r3, #0
   170e4:	beq	170f0 <__assert_fail@plt+0x5cdc>
   170e8:	ldr	r0, [r8, #-8]
   170ec:	blx	r3
   170f0:	str	r6, [r8, #-8]
   170f4:	str	r6, [r8, #-4]
   170f8:	add	r7, r7, #8
   170fc:	ldr	r3, [r5, #4]
   17100:	cmp	r3, r8
   17104:	bls	17128 <__assert_fail@plt+0x5d14>
   17108:	mov	r8, r7
   1710c:	ldr	r3, [r7, #-8]
   17110:	cmp	r3, #0
   17114:	beq	170f8 <__assert_fail@plt+0x5ce4>
   17118:	ldr	r4, [r7, #-4]
   1711c:	cmp	r4, #0
   17120:	bne	170c4 <__assert_fail@plt+0x5cb0>
   17124:	b	170dc <__assert_fail@plt+0x5cc8>
   17128:	mov	r3, #0
   1712c:	str	r3, [r5, #12]
   17130:	str	r3, [r5, #16]
   17134:	pop	{r4, r5, r6, r7, r8, pc}
   17138:	push	{r4, r5, r6, lr}
   1713c:	mov	r5, r0
   17140:	ldr	r3, [r0, #32]
   17144:	cmp	r3, #0
   17148:	beq	171b0 <__assert_fail@plt+0x5d9c>
   1714c:	ldr	r3, [r0, #16]
   17150:	cmp	r3, #0
   17154:	beq	171b0 <__assert_fail@plt+0x5d9c>
   17158:	ldr	r6, [r0]
   1715c:	ldr	r3, [r0, #4]
   17160:	cmp	r6, r3
   17164:	bcc	1717c <__assert_fail@plt+0x5d68>
   17168:	b	171f0 <__assert_fail@plt+0x5ddc>
   1716c:	add	r6, r6, #8
   17170:	ldr	r3, [r5, #4]
   17174:	cmp	r3, r6
   17178:	bls	171b0 <__assert_fail@plt+0x5d9c>
   1717c:	ldr	r3, [r6]
   17180:	cmp	r3, #0
   17184:	beq	1716c <__assert_fail@plt+0x5d58>
   17188:	cmp	r6, #0
   1718c:	beq	1716c <__assert_fail@plt+0x5d58>
   17190:	mov	r4, r6
   17194:	ldr	r3, [r5, #32]
   17198:	ldr	r0, [r4]
   1719c:	blx	r3
   171a0:	ldr	r4, [r4, #4]
   171a4:	cmp	r4, #0
   171a8:	bne	17194 <__assert_fail@plt+0x5d80>
   171ac:	b	1716c <__assert_fail@plt+0x5d58>
   171b0:	ldr	r6, [r5]
   171b4:	ldr	r3, [r5, #4]
   171b8:	cmp	r6, r3
   171bc:	bcs	171f0 <__assert_fail@plt+0x5ddc>
   171c0:	ldr	r0, [r6, #4]
   171c4:	cmp	r0, #0
   171c8:	beq	171e0 <__assert_fail@plt+0x5dcc>
   171cc:	ldr	r4, [r0, #4]
   171d0:	bl	16660 <__assert_fail@plt+0x524c>
   171d4:	mov	r0, r4
   171d8:	cmp	r4, #0
   171dc:	bne	171cc <__assert_fail@plt+0x5db8>
   171e0:	add	r6, r6, #8
   171e4:	ldr	r3, [r5, #4]
   171e8:	cmp	r3, r6
   171ec:	bhi	171c0 <__assert_fail@plt+0x5dac>
   171f0:	ldr	r0, [r5, #36]	; 0x24
   171f4:	cmp	r0, #0
   171f8:	beq	17210 <__assert_fail@plt+0x5dfc>
   171fc:	ldr	r4, [r0, #4]
   17200:	bl	16660 <__assert_fail@plt+0x524c>
   17204:	mov	r0, r4
   17208:	cmp	r4, #0
   1720c:	bne	171fc <__assert_fail@plt+0x5de8>
   17210:	ldr	r0, [r5]
   17214:	bl	16660 <__assert_fail@plt+0x524c>
   17218:	mov	r0, r5
   1721c:	bl	16660 <__assert_fail@plt+0x524c>
   17220:	pop	{r4, r5, r6, pc}
   17224:	push	{r4, r5, lr}
   17228:	sub	sp, sp, #44	; 0x2c
   1722c:	mov	r4, r0
   17230:	mov	r0, r1
   17234:	ldr	r1, [r4, #20]
   17238:	bl	167d0 <__assert_fail@plt+0x53bc>
   1723c:	subs	r5, r0, #0
   17240:	beq	17338 <__assert_fail@plt+0x5f24>
   17244:	ldr	r3, [r4, #8]
   17248:	cmp	r5, r3
   1724c:	beq	17348 <__assert_fail@plt+0x5f34>
   17250:	mov	r1, #8
   17254:	mov	r0, r5
   17258:	bl	1a700 <__assert_fail@plt+0x92ec>
   1725c:	str	r0, [sp]
   17260:	cmp	r0, #0
   17264:	beq	17350 <__assert_fail@plt+0x5f3c>
   17268:	str	r5, [sp, #8]
   1726c:	add	r0, r0, r5, lsl #3
   17270:	str	r0, [sp, #4]
   17274:	mov	r2, #0
   17278:	str	r2, [sp, #12]
   1727c:	str	r2, [sp, #16]
   17280:	ldr	r3, [r4, #20]
   17284:	str	r3, [sp, #20]
   17288:	ldr	r3, [r4, #24]
   1728c:	str	r3, [sp, #24]
   17290:	ldr	r3, [r4, #28]
   17294:	str	r3, [sp, #28]
   17298:	ldr	r3, [r4, #32]
   1729c:	str	r3, [sp, #32]
   172a0:	ldr	r3, [r4, #36]	; 0x24
   172a4:	str	r3, [sp, #36]	; 0x24
   172a8:	mov	r1, r4
   172ac:	mov	r0, sp
   172b0:	bl	168cc <__assert_fail@plt+0x54b8>
   172b4:	subs	r5, r0, #0
   172b8:	bne	17300 <__assert_fail@plt+0x5eec>
   172bc:	ldr	r3, [sp, #36]	; 0x24
   172c0:	str	r3, [r4, #36]	; 0x24
   172c4:	mov	r2, #1
   172c8:	mov	r1, sp
   172cc:	mov	r0, r4
   172d0:	bl	168cc <__assert_fail@plt+0x54b8>
   172d4:	cmp	r0, #0
   172d8:	beq	17334 <__assert_fail@plt+0x5f20>
   172dc:	mov	r2, #0
   172e0:	mov	r1, sp
   172e4:	mov	r0, r4
   172e8:	bl	168cc <__assert_fail@plt+0x54b8>
   172ec:	cmp	r0, #0
   172f0:	beq	17334 <__assert_fail@plt+0x5f20>
   172f4:	ldr	r0, [sp]
   172f8:	bl	16660 <__assert_fail@plt+0x524c>
   172fc:	b	1733c <__assert_fail@plt+0x5f28>
   17300:	ldr	r0, [r4]
   17304:	bl	16660 <__assert_fail@plt+0x524c>
   17308:	ldr	r3, [sp]
   1730c:	str	r3, [r4]
   17310:	ldr	r3, [sp, #4]
   17314:	str	r3, [r4, #4]
   17318:	ldr	r3, [sp, #8]
   1731c:	str	r3, [r4, #8]
   17320:	ldr	r3, [sp, #12]
   17324:	str	r3, [r4, #12]
   17328:	ldr	r3, [sp, #36]	; 0x24
   1732c:	str	r3, [r4, #36]	; 0x24
   17330:	b	1733c <__assert_fail@plt+0x5f28>
   17334:	bl	113f0 <abort@plt>
   17338:	mov	r5, #0
   1733c:	mov	r0, r5
   17340:	add	sp, sp, #44	; 0x2c
   17344:	pop	{r4, r5, pc}
   17348:	mov	r5, #1
   1734c:	b	1733c <__assert_fail@plt+0x5f28>
   17350:	mov	r5, #0
   17354:	b	1733c <__assert_fail@plt+0x5f28>
   17358:	push	{r4, r5, r6, lr}
   1735c:	sub	sp, sp, #8
   17360:	subs	r6, r1, #0
   17364:	beq	173a0 <__assert_fail@plt+0x5f8c>
   17368:	mov	r4, r0
   1736c:	mov	r5, r2
   17370:	mov	r3, #0
   17374:	add	r2, sp, #4
   17378:	mov	r1, r6
   1737c:	bl	16a20 <__assert_fail@plt+0x560c>
   17380:	cmp	r0, #0
   17384:	beq	173a4 <__assert_fail@plt+0x5f90>
   17388:	cmp	r5, #0
   1738c:	moveq	r0, #0
   17390:	strne	r0, [r5]
   17394:	movne	r0, #0
   17398:	add	sp, sp, #8
   1739c:	pop	{r4, r5, r6, pc}
   173a0:	bl	113f0 <abort@plt>
   173a4:	vldr	s15, [r4, #12]
   173a8:	vcvt.f32.u32	s14, s15
   173ac:	ldr	r3, [r4, #20]
   173b0:	vldr	s15, [r4, #8]
   173b4:	vcvt.f32.u32	s15, s15
   173b8:	vldr	s13, [r3, #8]
   173bc:	vmul.f32	s15, s15, s13
   173c0:	vcmpe.f32	s14, s15
   173c4:	vmrs	APSR_nzcv, fpscr
   173c8:	bgt	17418 <__assert_fail@plt+0x6004>
   173cc:	ldr	r3, [sp, #4]
   173d0:	ldr	r2, [r3]
   173d4:	cmp	r2, #0
   173d8:	beq	174bc <__assert_fail@plt+0x60a8>
   173dc:	ldr	r0, [r4, #36]	; 0x24
   173e0:	cmp	r0, #0
   173e4:	beq	174a4 <__assert_fail@plt+0x6090>
   173e8:	ldr	r3, [r0, #4]
   173ec:	str	r3, [r4, #36]	; 0x24
   173f0:	str	r6, [r0]
   173f4:	ldr	r3, [sp, #4]
   173f8:	ldr	r2, [r3, #4]
   173fc:	str	r2, [r0, #4]
   17400:	str	r0, [r3, #4]
   17404:	ldr	r3, [r4, #16]
   17408:	add	r3, r3, #1
   1740c:	str	r3, [r4, #16]
   17410:	mov	r0, #1
   17414:	b	17398 <__assert_fail@plt+0x5f84>
   17418:	mov	r0, r4
   1741c:	bl	166dc <__assert_fail@plt+0x52c8>
   17420:	ldr	r3, [r4, #20]
   17424:	vldr	s13, [r3, #8]
   17428:	vldr	s15, [r4, #8]
   1742c:	vcvt.f32.u32	s15, s15
   17430:	vldr	s14, [r4, #12]
   17434:	vcvt.f32.u32	s14, s14
   17438:	vmul.f32	s12, s13, s15
   1743c:	vcmpe.f32	s14, s12
   17440:	vmrs	APSR_nzcv, fpscr
   17444:	ble	173cc <__assert_fail@plt+0x5fb8>
   17448:	ldrb	r2, [r3, #16]
   1744c:	cmp	r2, #0
   17450:	vldr	s14, [r3, #12]
   17454:	vmul.f32	s15, s15, s14
   17458:	vmuleq.f32	s15, s15, s13
   1745c:	vldr	s14, [pc, #140]	; 174f0 <__assert_fail@plt+0x60dc>
   17460:	vcmpe.f32	s15, s14
   17464:	vmrs	APSR_nzcv, fpscr
   17468:	bge	174e0 <__assert_fail@plt+0x60cc>
   1746c:	vcvt.u32.f32	s15, s15
   17470:	vmov	r1, s15
   17474:	mov	r0, r4
   17478:	bl	17224 <__assert_fail@plt+0x5e10>
   1747c:	cmp	r0, #0
   17480:	beq	174e8 <__assert_fail@plt+0x60d4>
   17484:	mov	r3, #0
   17488:	add	r2, sp, #4
   1748c:	mov	r1, r6
   17490:	mov	r0, r4
   17494:	bl	16a20 <__assert_fail@plt+0x560c>
   17498:	cmp	r0, #0
   1749c:	beq	173cc <__assert_fail@plt+0x5fb8>
   174a0:	bl	113f0 <abort@plt>
   174a4:	mov	r0, #8
   174a8:	bl	1a750 <__assert_fail@plt+0x933c>
   174ac:	cmp	r0, #0
   174b0:	bne	173f0 <__assert_fail@plt+0x5fdc>
   174b4:	mvn	r0, #0
   174b8:	b	17398 <__assert_fail@plt+0x5f84>
   174bc:	str	r6, [r3]
   174c0:	ldr	r3, [r4, #16]
   174c4:	add	r3, r3, #1
   174c8:	str	r3, [r4, #16]
   174cc:	ldr	r3, [r4, #12]
   174d0:	add	r3, r3, #1
   174d4:	str	r3, [r4, #12]
   174d8:	mov	r0, #1
   174dc:	b	17398 <__assert_fail@plt+0x5f84>
   174e0:	mvn	r0, #0
   174e4:	b	17398 <__assert_fail@plt+0x5f84>
   174e8:	mvn	r0, #0
   174ec:	b	17398 <__assert_fail@plt+0x5f84>
   174f0:	svcmi	0x00800000
   174f4:	push	{r4, lr}
   174f8:	sub	sp, sp, #8
   174fc:	mov	r4, r1
   17500:	add	r2, sp, #4
   17504:	bl	17358 <__assert_fail@plt+0x5f44>
   17508:	cmn	r0, #1
   1750c:	beq	17524 <__assert_fail@plt+0x6110>
   17510:	cmp	r0, #0
   17514:	movne	r0, r4
   17518:	ldreq	r0, [sp, #4]
   1751c:	add	sp, sp, #8
   17520:	pop	{r4, pc}
   17524:	mov	r0, #0
   17528:	b	1751c <__assert_fail@plt+0x6108>
   1752c:	push	{r4, r5, r6, lr}
   17530:	sub	sp, sp, #8
   17534:	mov	r4, r0
   17538:	mov	r3, #1
   1753c:	add	r2, sp, #4
   17540:	bl	16a20 <__assert_fail@plt+0x560c>
   17544:	subs	r5, r0, #0
   17548:	beq	17568 <__assert_fail@plt+0x6154>
   1754c:	ldr	r3, [r4, #16]
   17550:	sub	r3, r3, #1
   17554:	str	r3, [r4, #16]
   17558:	ldr	r3, [sp, #4]
   1755c:	ldr	r3, [r3]
   17560:	cmp	r3, #0
   17564:	beq	17574 <__assert_fail@plt+0x6160>
   17568:	mov	r0, r5
   1756c:	add	sp, sp, #8
   17570:	pop	{r4, r5, r6, pc}
   17574:	ldr	r3, [r4, #12]
   17578:	sub	r3, r3, #1
   1757c:	str	r3, [r4, #12]
   17580:	vmov	s15, r3
   17584:	vcvt.f32.u32	s15, s15
   17588:	ldr	r3, [r4, #20]
   1758c:	vldr	s14, [r4, #8]
   17590:	vcvt.f32.u32	s14, s14
   17594:	vldr	s13, [r3]
   17598:	vmul.f32	s14, s14, s13
   1759c:	vcmpe.f32	s15, s14
   175a0:	vmrs	APSR_nzcv, fpscr
   175a4:	bpl	17568 <__assert_fail@plt+0x6154>
   175a8:	mov	r0, r4
   175ac:	bl	166dc <__assert_fail@plt+0x52c8>
   175b0:	ldr	r3, [r4, #20]
   175b4:	vldr	s15, [r4, #8]
   175b8:	vcvt.f32.u32	s15, s15
   175bc:	vldr	s14, [r4, #12]
   175c0:	vcvt.f32.u32	s13, s14
   175c4:	vldr	s14, [r3]
   175c8:	vmul.f32	s14, s15, s14
   175cc:	vcmpe.f32	s13, s14
   175d0:	vmrs	APSR_nzcv, fpscr
   175d4:	bpl	17568 <__assert_fail@plt+0x6154>
   175d8:	ldrb	r2, [r3, #16]
   175dc:	cmp	r2, #0
   175e0:	vldr	s14, [r3, #4]
   175e4:	vmuleq.f32	s15, s15, s14
   175e8:	vldreq	s14, [r3, #8]
   175ec:	vmul.f32	s15, s15, s14
   175f0:	vcvt.u32.f32	s15, s15
   175f4:	vmov	r1, s15
   175f8:	mov	r0, r4
   175fc:	bl	17224 <__assert_fail@plt+0x5e10>
   17600:	cmp	r0, #0
   17604:	bne	17568 <__assert_fail@plt+0x6154>
   17608:	ldr	r0, [r4, #36]	; 0x24
   1760c:	cmp	r0, #0
   17610:	beq	17628 <__assert_fail@plt+0x6214>
   17614:	ldr	r6, [r0, #4]
   17618:	bl	16660 <__assert_fail@plt+0x524c>
   1761c:	mov	r0, r6
   17620:	cmp	r6, #0
   17624:	bne	17614 <__assert_fail@plt+0x6200>
   17628:	mov	r3, #0
   1762c:	str	r3, [r4, #36]	; 0x24
   17630:	b	17568 <__assert_fail@plt+0x6154>
   17634:	push	{r4, lr}
   17638:	bl	1752c <__assert_fail@plt+0x6118>
   1763c:	pop	{r4, pc}
   17640:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17644:	mov	r4, r0
   17648:	mov	r5, r1
   1764c:	add	r6, r2, #20
   17650:	mov	r3, #0
   17654:	strb	r3, [r2, #20]
   17658:	cmp	r0, #0
   1765c:	sbcs	r3, r1, #0
   17660:	movlt	r8, #10
   17664:	movlt	r9, #0
   17668:	blt	176c0 <__assert_fail@plt+0x62ac>
   1766c:	mov	r8, #10
   17670:	mov	r9, #0
   17674:	mov	r2, r8
   17678:	mov	r3, r9
   1767c:	mov	r0, r4
   17680:	mov	r1, r5
   17684:	bl	1b1b0 <__assert_fail@plt+0x9d9c>
   17688:	add	r2, r2, #48	; 0x30
   1768c:	strb	r2, [r6, #-1]!
   17690:	mov	r2, r8
   17694:	mov	r3, r9
   17698:	mov	r0, r4
   1769c:	mov	r1, r5
   176a0:	bl	1b1b0 <__assert_fail@plt+0x9d9c>
   176a4:	mov	r4, r0
   176a8:	mov	r5, r1
   176ac:	orrs	r3, r4, r5
   176b0:	bne	17674 <__assert_fail@plt+0x6260>
   176b4:	mov	r0, r6
   176b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   176bc:	mov	r6, r7
   176c0:	sub	r7, r6, #1
   176c4:	mov	r2, r8
   176c8:	mov	r3, r9
   176cc:	mov	r0, r4
   176d0:	mov	r1, r5
   176d4:	bl	1b1b0 <__assert_fail@plt+0x9d9c>
   176d8:	rsb	r2, r2, #48	; 0x30
   176dc:	strb	r2, [r6, #-1]
   176e0:	mov	r2, r8
   176e4:	mov	r3, r9
   176e8:	mov	r0, r4
   176ec:	mov	r1, r5
   176f0:	bl	1b1b0 <__assert_fail@plt+0x9d9c>
   176f4:	mov	r4, r0
   176f8:	mov	r5, r1
   176fc:	orrs	r3, r4, r5
   17700:	bne	176bc <__assert_fail@plt+0x62a8>
   17704:	sub	r6, r6, #2
   17708:	mov	r3, #45	; 0x2d
   1770c:	strb	r3, [r7, #-1]
   17710:	b	176b4 <__assert_fail@plt+0x62a0>
   17714:	push	{lr}		; (str lr, [sp, #-4]!)
   17718:	sub	sp, sp, #12
   1771c:	ldr	r0, [pc, #76]	; 17770 <__assert_fail@plt+0x635c>
   17720:	bl	11234 <getenv@plt>
   17724:	cmp	r0, #0
   17728:	beq	17768 <__assert_fail@plt+0x6354>
   1772c:	ldrb	r3, [r0]
   17730:	cmp	r3, #0
   17734:	ldreq	r0, [pc, #56]	; 17774 <__assert_fail@plt+0x6360>
   17738:	bne	17744 <__assert_fail@plt+0x6330>
   1773c:	add	sp, sp, #12
   17740:	pop	{pc}		; (ldr pc, [sp], #4)
   17744:	mov	r2, #10
   17748:	add	r1, sp, #4
   1774c:	bl	110d8 <strtol@plt>
   17750:	ldr	r3, [sp, #4]
   17754:	ldrb	r2, [r3]
   17758:	ldr	r3, [pc, #20]	; 17774 <__assert_fail@plt+0x6360>
   1775c:	cmp	r2, #0
   17760:	movne	r0, r3
   17764:	b	1773c <__assert_fail@plt+0x6328>
   17768:	ldr	r0, [pc, #4]	; 17774 <__assert_fail@plt+0x6360>
   1776c:	b	1773c <__assert_fail@plt+0x6328>
   17770:	andeq	ip, r1, r0, asr sl
   17774:	andeq	r1, r3, r9, rrx
   17778:	push	{r4, r5, r6, lr}
   1777c:	subs	r4, r0, #0
   17780:	beq	177f8 <__assert_fail@plt+0x63e4>
   17784:	mov	r1, #47	; 0x2f
   17788:	mov	r0, r4
   1778c:	bl	11384 <strrchr@plt>
   17790:	cmp	r0, #0
   17794:	addne	r5, r0, #1
   17798:	moveq	r5, r4
   1779c:	sub	r3, r5, r4
   177a0:	cmp	r3, #6
   177a4:	ble	177e4 <__assert_fail@plt+0x63d0>
   177a8:	mov	r2, #7
   177ac:	ldr	r1, [pc, #96]	; 17814 <__assert_fail@plt+0x6400>
   177b0:	sub	r0, r5, #7
   177b4:	bl	113e4 <strncmp@plt>
   177b8:	cmp	r0, #0
   177bc:	bne	177e4 <__assert_fail@plt+0x63d0>
   177c0:	mov	r2, #3
   177c4:	ldr	r1, [pc, #76]	; 17818 <__assert_fail@plt+0x6404>
   177c8:	mov	r0, r5
   177cc:	bl	113e4 <strncmp@plt>
   177d0:	cmp	r0, #0
   177d4:	addeq	r4, r5, #3
   177d8:	ldreq	r3, [pc, #60]	; 1781c <__assert_fail@plt+0x6408>
   177dc:	streq	r4, [r3]
   177e0:	movne	r4, r5
   177e4:	ldr	r3, [pc, #52]	; 17820 <__assert_fail@plt+0x640c>
   177e8:	str	r4, [r3]
   177ec:	ldr	r3, [pc, #48]	; 17824 <__assert_fail@plt+0x6410>
   177f0:	str	r4, [r3]
   177f4:	pop	{r4, r5, r6, pc}
   177f8:	ldr	r3, [pc, #40]	; 17828 <__assert_fail@plt+0x6414>
   177fc:	ldr	r3, [r3]
   17800:	mov	r2, #55	; 0x37
   17804:	mov	r1, #1
   17808:	ldr	r0, [pc, #28]	; 1782c <__assert_fail@plt+0x6418>
   1780c:	bl	111e0 <fwrite@plt>
   17810:	bl	113f0 <abort@plt>
   17814:	muleq	r1, r8, sl
   17818:	andeq	ip, r1, r0, lsr #21
   1781c:			; <UNDEFINED> instruction: 0x0002d1b0
   17820:	andeq	sp, r2, ip, ror #3
   17824:			; <UNDEFINED> instruction: 0x0002d1b4
   17828:	andeq	sp, r2, r0, asr #3
   1782c:	andeq	ip, r1, r0, ror #20
   17830:	push	{r4, r5, r6, lr}
   17834:	mov	r5, r0
   17838:	mov	r4, r1
   1783c:	mov	r2, #48	; 0x30
   17840:	mov	r1, #0
   17844:	bl	112f4 <memset@plt>
   17848:	cmp	r4, #10
   1784c:	beq	1785c <__assert_fail@plt+0x6448>
   17850:	str	r4, [r5]
   17854:	mov	r0, r5
   17858:	pop	{r4, r5, r6, pc}
   1785c:	bl	113f0 <abort@plt>
   17860:	push	{r4, r5, r6, lr}
   17864:	mov	r4, r0
   17868:	mov	r5, r1
   1786c:	mov	r2, #5
   17870:	mov	r1, r0
   17874:	mov	r0, #0
   17878:	bl	11174 <dcgettext@plt>
   1787c:	cmp	r4, r0
   17880:	popne	{r4, r5, r6, pc}
   17884:	bl	1ab70 <__assert_fail@plt+0x975c>
   17888:	ldrb	r3, [r0]
   1788c:	bic	r3, r3, #32
   17890:	cmp	r3, #85	; 0x55
   17894:	beq	17910 <__assert_fail@plt+0x64fc>
   17898:	cmp	r3, #71	; 0x47
   1789c:	bne	1796c <__assert_fail@plt+0x6558>
   178a0:	ldrb	r3, [r0, #1]
   178a4:	bic	r3, r3, #32
   178a8:	cmp	r3, #66	; 0x42
   178ac:	bne	1796c <__assert_fail@plt+0x6558>
   178b0:	ldrb	r3, [r0, #2]
   178b4:	cmp	r3, #49	; 0x31
   178b8:	bne	1796c <__assert_fail@plt+0x6558>
   178bc:	ldrb	r3, [r0, #3]
   178c0:	cmp	r3, #56	; 0x38
   178c4:	bne	1796c <__assert_fail@plt+0x6558>
   178c8:	ldrb	r3, [r0, #4]
   178cc:	cmp	r3, #48	; 0x30
   178d0:	bne	1796c <__assert_fail@plt+0x6558>
   178d4:	ldrb	r3, [r0, #5]
   178d8:	cmp	r3, #51	; 0x33
   178dc:	bne	1796c <__assert_fail@plt+0x6558>
   178e0:	ldrb	r3, [r0, #6]
   178e4:	cmp	r3, #48	; 0x30
   178e8:	bne	1796c <__assert_fail@plt+0x6558>
   178ec:	ldrb	r3, [r0, #7]
   178f0:	cmp	r3, #0
   178f4:	bne	1796c <__assert_fail@plt+0x6558>
   178f8:	ldrb	r2, [r4]
   178fc:	ldr	r3, [pc, #124]	; 17980 <__assert_fail@plt+0x656c>
   17900:	ldr	r0, [pc, #124]	; 17984 <__assert_fail@plt+0x6570>
   17904:	cmp	r2, #96	; 0x60
   17908:	movne	r0, r3
   1790c:	pop	{r4, r5, r6, pc}
   17910:	ldrb	r3, [r0, #1]
   17914:	bic	r3, r3, #32
   17918:	cmp	r3, #84	; 0x54
   1791c:	bne	1796c <__assert_fail@plt+0x6558>
   17920:	ldrb	r3, [r0, #2]
   17924:	bic	r3, r3, #32
   17928:	cmp	r3, #70	; 0x46
   1792c:	bne	1796c <__assert_fail@plt+0x6558>
   17930:	ldrb	r3, [r0, #3]
   17934:	cmp	r3, #45	; 0x2d
   17938:	bne	1796c <__assert_fail@plt+0x6558>
   1793c:	ldrb	r3, [r0, #4]
   17940:	cmp	r3, #56	; 0x38
   17944:	bne	1796c <__assert_fail@plt+0x6558>
   17948:	ldrb	r3, [r0, #5]
   1794c:	cmp	r3, #0
   17950:	bne	1796c <__assert_fail@plt+0x6558>
   17954:	ldrb	r2, [r4]
   17958:	ldr	r3, [pc, #40]	; 17988 <__assert_fail@plt+0x6574>
   1795c:	ldr	r0, [pc, #40]	; 1798c <__assert_fail@plt+0x6578>
   17960:	cmp	r2, #96	; 0x60
   17964:	movne	r0, r3
   17968:	pop	{r4, r5, r6, pc}
   1796c:	ldr	r3, [pc, #28]	; 17990 <__assert_fail@plt+0x657c>
   17970:	ldr	r0, [pc, #28]	; 17994 <__assert_fail@plt+0x6580>
   17974:	cmp	r5, #9
   17978:	movne	r0, r3
   1797c:	pop	{r4, r5, r6, pc}
   17980:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   17984:	andeq	ip, r1, r8, lsl #22
   17988:	strdeq	ip, [r1], -r8
   1798c:	andeq	ip, r1, ip, lsl #22
   17990:	andeq	ip, r1, r0, lsl #22
   17994:	andeq	ip, r1, r4, lsl #22
   17998:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1799c:	sub	sp, sp, #116	; 0x74
   179a0:	str	r0, [sp, #36]	; 0x24
   179a4:	mov	sl, r1
   179a8:	str	r2, [sp, #52]	; 0x34
   179ac:	str	r3, [sp, #28]
   179b0:	ldr	r8, [sp, #152]	; 0x98
   179b4:	bl	111f8 <__ctype_get_mb_cur_max@plt>
   179b8:	str	r0, [sp, #84]	; 0x54
   179bc:	ldr	r3, [sp, #156]	; 0x9c
   179c0:	lsr	r3, r3, #1
   179c4:	and	r3, r3, #1
   179c8:	str	r3, [sp, #32]
   179cc:	mov	r3, #1
   179d0:	str	r3, [sp, #40]	; 0x28
   179d4:	mov	r3, #0
   179d8:	str	r3, [sp, #80]	; 0x50
   179dc:	str	r3, [sp, #44]	; 0x2c
   179e0:	str	r3, [sp, #48]	; 0x30
   179e4:	str	r3, [sp, #60]	; 0x3c
   179e8:	str	r3, [sp, #72]	; 0x48
   179ec:	str	r3, [sp, #76]	; 0x4c
   179f0:	mov	r7, sl
   179f4:	mov	sl, r8
   179f8:	cmp	sl, #10
   179fc:	ldrls	pc, [pc, sl, lsl #2]
   17a00:	b	17bb8 <__assert_fail@plt+0x67a4>
   17a04:	andeq	r7, r1, r8, ror #20
   17a08:	andeq	r7, r1, r8, lsr sl
   17a0c:	muleq	r1, r4, fp
   17a10:	andeq	r7, r1, r0, lsr sl
   17a14:	andeq	r7, r1, r8, asr #22
   17a18:	andeq	r7, r1, r8, ror sl
   17a1c:	andeq	r8, r1, r4, ror #21
   17a20:			; <UNDEFINED> instruction: 0x00017bbc
   17a24:			; <UNDEFINED> instruction: 0x00017ab4
   17a28:			; <UNDEFINED> instruction: 0x00017ab4
   17a2c:			; <UNDEFINED> instruction: 0x00017ab4
   17a30:	mov	r3, #1
   17a34:	str	r3, [sp, #48]	; 0x30
   17a38:	mov	r3, #1
   17a3c:	str	r3, [sp, #32]
   17a40:	str	r3, [sp, #60]	; 0x3c
   17a44:	ldr	r3, [pc, #4068]	; 18a30 <__assert_fail@plt+0x761c>
   17a48:	str	r3, [sp, #72]	; 0x48
   17a4c:	mov	fp, #0
   17a50:	mov	sl, #2
   17a54:	mov	r6, #0
   17a58:	ldr	r3, [sp, #48]	; 0x30
   17a5c:	eor	r3, r3, #1
   17a60:	str	r3, [sp, #68]	; 0x44
   17a64:	b	1834c <__assert_fail@plt+0x6f38>
   17a68:	mov	r3, #0
   17a6c:	str	r3, [sp, #32]
   17a70:	mov	fp, r3
   17a74:	b	17a54 <__assert_fail@plt+0x6640>
   17a78:	ldr	r3, [sp, #32]
   17a7c:	cmp	r3, #0
   17a80:	bne	17bd4 <__assert_fail@plt+0x67c0>
   17a84:	cmp	r7, #0
   17a88:	beq	17bf4 <__assert_fail@plt+0x67e0>
   17a8c:	ldr	r3, [sp, #36]	; 0x24
   17a90:	mov	r2, #34	; 0x22
   17a94:	strb	r2, [r3]
   17a98:	mov	r3, #1
   17a9c:	str	r3, [sp, #48]	; 0x30
   17aa0:	str	r3, [sp, #60]	; 0x3c
   17aa4:	ldr	r3, [pc, #3980]	; 18a38 <__assert_fail@plt+0x7624>
   17aa8:	str	r3, [sp, #72]	; 0x48
   17aac:	mov	fp, #1
   17ab0:	b	17a54 <__assert_fail@plt+0x6640>
   17ab4:	cmp	sl, #10
   17ab8:	beq	17adc <__assert_fail@plt+0x66c8>
   17abc:	mov	r1, sl
   17ac0:	ldr	r0, [pc, #3948]	; 18a34 <__assert_fail@plt+0x7620>
   17ac4:	bl	17860 <__assert_fail@plt+0x644c>
   17ac8:	str	r0, [sp, #164]	; 0xa4
   17acc:	mov	r1, sl
   17ad0:	ldr	r0, [pc, #3928]	; 18a30 <__assert_fail@plt+0x761c>
   17ad4:	bl	17860 <__assert_fail@plt+0x644c>
   17ad8:	str	r0, [sp, #168]	; 0xa8
   17adc:	ldr	r3, [sp, #32]
   17ae0:	cmp	r3, #0
   17ae4:	movne	fp, #0
   17ae8:	bne	17b20 <__assert_fail@plt+0x670c>
   17aec:	ldr	r3, [sp, #164]	; 0xa4
   17af0:	ldrb	r3, [r3]
   17af4:	cmp	r3, #0
   17af8:	beq	17b40 <__assert_fail@plt+0x672c>
   17afc:	ldr	r2, [sp, #164]	; 0xa4
   17b00:	mov	fp, #0
   17b04:	ldr	r1, [sp, #36]	; 0x24
   17b08:	cmp	r7, fp
   17b0c:	strbhi	r3, [r1, fp]
   17b10:	add	fp, fp, #1
   17b14:	ldrb	r3, [r2, #1]!
   17b18:	cmp	r3, #0
   17b1c:	bne	17b08 <__assert_fail@plt+0x66f4>
   17b20:	ldr	r0, [sp, #168]	; 0xa8
   17b24:	bl	112a0 <strlen@plt>
   17b28:	str	r0, [sp, #60]	; 0x3c
   17b2c:	ldr	r3, [sp, #168]	; 0xa8
   17b30:	str	r3, [sp, #72]	; 0x48
   17b34:	mov	r3, #1
   17b38:	str	r3, [sp, #48]	; 0x30
   17b3c:	b	17a54 <__assert_fail@plt+0x6640>
   17b40:	mov	fp, #0
   17b44:	b	17b20 <__assert_fail@plt+0x670c>
   17b48:	ldr	r3, [sp, #32]
   17b4c:	cmp	r3, #0
   17b50:	bne	17c10 <__assert_fail@plt+0x67fc>
   17b54:	mov	r3, #1
   17b58:	str	r3, [sp, #48]	; 0x30
   17b5c:	cmp	r7, #0
   17b60:	beq	17c2c <__assert_fail@plt+0x6818>
   17b64:	ldr	r3, [sp, #36]	; 0x24
   17b68:	mov	r2, #39	; 0x27
   17b6c:	strb	r2, [r3]
   17b70:	mov	r3, #0
   17b74:	str	r3, [sp, #32]
   17b78:	mov	r3, #1
   17b7c:	str	r3, [sp, #60]	; 0x3c
   17b80:	ldr	r3, [pc, #3752]	; 18a30 <__assert_fail@plt+0x761c>
   17b84:	str	r3, [sp, #72]	; 0x48
   17b88:	mov	fp, #1
   17b8c:	mov	sl, #2
   17b90:	b	17a54 <__assert_fail@plt+0x6640>
   17b94:	ldr	r3, [sp, #32]
   17b98:	cmp	r3, #0
   17b9c:	beq	17b5c <__assert_fail@plt+0x6748>
   17ba0:	mov	r3, #1
   17ba4:	str	r3, [sp, #60]	; 0x3c
   17ba8:	ldr	r3, [pc, #3712]	; 18a30 <__assert_fail@plt+0x761c>
   17bac:	str	r3, [sp, #72]	; 0x48
   17bb0:	mov	fp, #0
   17bb4:	b	17a54 <__assert_fail@plt+0x6640>
   17bb8:	bl	113f0 <abort@plt>
   17bbc:	mov	r3, #0
   17bc0:	str	r3, [sp, #32]
   17bc4:	mov	r3, #1
   17bc8:	str	r3, [sp, #48]	; 0x30
   17bcc:	mov	fp, #0
   17bd0:	b	17a54 <__assert_fail@plt+0x6640>
   17bd4:	ldr	r3, [sp, #32]
   17bd8:	str	r3, [sp, #48]	; 0x30
   17bdc:	mov	r3, #1
   17be0:	str	r3, [sp, #60]	; 0x3c
   17be4:	ldr	r3, [pc, #3660]	; 18a38 <__assert_fail@plt+0x7624>
   17be8:	str	r3, [sp, #72]	; 0x48
   17bec:	mov	fp, #0
   17bf0:	b	17a54 <__assert_fail@plt+0x6640>
   17bf4:	mov	r3, #1
   17bf8:	str	r3, [sp, #48]	; 0x30
   17bfc:	str	r3, [sp, #60]	; 0x3c
   17c00:	ldr	r3, [pc, #3632]	; 18a38 <__assert_fail@plt+0x7624>
   17c04:	str	r3, [sp, #72]	; 0x48
   17c08:	mov	fp, #1
   17c0c:	b	17a54 <__assert_fail@plt+0x6640>
   17c10:	mov	r3, #1
   17c14:	str	r3, [sp, #60]	; 0x3c
   17c18:	ldr	r3, [pc, #3600]	; 18a30 <__assert_fail@plt+0x761c>
   17c1c:	str	r3, [sp, #72]	; 0x48
   17c20:	mov	fp, #0
   17c24:	mov	sl, #2
   17c28:	b	17a54 <__assert_fail@plt+0x6640>
   17c2c:	mov	r3, #0
   17c30:	str	r3, [sp, #32]
   17c34:	mov	r3, #1
   17c38:	str	r3, [sp, #60]	; 0x3c
   17c3c:	ldr	r3, [pc, #3564]	; 18a30 <__assert_fail@plt+0x761c>
   17c40:	str	r3, [sp, #72]	; 0x48
   17c44:	mov	fp, #1
   17c48:	mov	sl, #2
   17c4c:	b	17a54 <__assert_fail@plt+0x6640>
   17c50:	mov	r3, #0
   17c54:	str	r3, [sp, #56]	; 0x38
   17c58:	ldr	r3, [sp, #52]	; 0x34
   17c5c:	add	r2, r3, r6
   17c60:	str	r2, [sp, #64]	; 0x40
   17c64:	ldrb	r4, [r3, r6]
   17c68:	cmp	r4, #126	; 0x7e
   17c6c:	ldrls	pc, [pc, r4, lsl #2]
   17c70:	b	184ac <__assert_fail@plt+0x7098>
   17c74:	andeq	r7, r1, ip, lsl #29
   17c78:	andeq	r8, r1, ip, lsr #9
   17c7c:	andeq	r8, r1, ip, lsr #9
   17c80:	andeq	r8, r1, ip, lsr #9
   17c84:	andeq	r8, r1, ip, lsr #9
   17c88:	andeq	r8, r1, ip, lsr #9
   17c8c:	andeq	r8, r1, ip, lsr #9
   17c90:	andeq	r8, r1, r8, ror #3
   17c94:	andeq	r7, r1, r4, lsl #29
   17c98:	andeq	r8, r1, r0, lsr #3
   17c9c:	muleq	r1, r8, r1
   17ca0:	andeq	r8, r1, r8, lsl #2
   17ca4:	andeq	r8, r1, r0, lsl #2
   17ca8:	andeq	r7, r1, ip, ror lr
   17cac:	andeq	r8, r1, ip, lsr #9
   17cb0:	andeq	r8, r1, ip, lsr #9
   17cb4:	andeq	r8, r1, ip, lsr #9
   17cb8:	andeq	r8, r1, ip, lsr #9
   17cbc:	andeq	r8, r1, ip, lsr #9
   17cc0:	andeq	r8, r1, ip, lsr #9
   17cc4:	andeq	r8, r1, ip, lsr #9
   17cc8:	andeq	r8, r1, ip, lsr #9
   17ccc:	andeq	r8, r1, ip, lsr #9
   17cd0:	andeq	r8, r1, ip, lsr #9
   17cd4:	andeq	r8, r1, ip, lsr #9
   17cd8:	andeq	r8, r1, ip, lsr #9
   17cdc:	andeq	r8, r1, ip, lsr #9
   17ce0:	andeq	r8, r1, ip, lsr #9
   17ce4:	andeq	r8, r1, ip, lsr #9
   17ce8:	andeq	r8, r1, ip, lsr #9
   17cec:	andeq	r8, r1, ip, lsr #9
   17cf0:	andeq	r8, r1, ip, lsr #9
   17cf4:	andeq	r8, r1, ip, lsr r2
   17cf8:	andeq	r8, r1, r8, lsr r2
   17cfc:	andeq	r8, r1, r8, lsr r2
   17d00:	andeq	r8, r1, r0, lsl r2
   17d04:	andeq	r8, r1, r8, lsr r2
   17d08:	andeq	r8, r1, r0, lsl #17
   17d0c:	andeq	r8, r1, r8, lsr r2
   17d10:	andeq	r8, r1, r0, lsl r4
   17d14:	andeq	r8, r1, r8, lsr r2
   17d18:	andeq	r8, r1, r8, lsr r2
   17d1c:	andeq	r8, r1, r8, lsr r2
   17d20:	andeq	r8, r1, r0, lsl #17
   17d24:	andeq	r8, r1, r0, lsl #17
   17d28:	andeq	r8, r1, r0, lsl #17
   17d2c:	andeq	r8, r1, r0, lsl #17
   17d30:	andeq	r8, r1, r0, lsl #17
   17d34:	andeq	r8, r1, r0, lsl #17
   17d38:	andeq	r8, r1, r0, lsl #17
   17d3c:	andeq	r8, r1, r0, lsl #17
   17d40:	andeq	r8, r1, r0, lsl #17
   17d44:	andeq	r8, r1, r0, lsl #17
   17d48:	andeq	r8, r1, r0, lsl #17
   17d4c:	andeq	r8, r1, r0, lsl #17
   17d50:	andeq	r8, r1, r0, lsl #17
   17d54:	andeq	r8, r1, r0, lsl #17
   17d58:	andeq	r8, r1, r0, lsl #17
   17d5c:	andeq	r8, r1, r0, lsl #17
   17d60:	andeq	r8, r1, r8, lsr r2
   17d64:	andeq	r8, r1, r8, lsr r2
   17d68:	andeq	r8, r1, r8, lsr r2
   17d6c:	andeq	r8, r1, r8, lsr r2
   17d70:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   17d74:	andeq	r8, r1, ip, lsr #9
   17d78:	andeq	r8, r1, r0, lsl #17
   17d7c:	andeq	r8, r1, r0, lsl #17
   17d80:	andeq	r8, r1, r0, lsl #17
   17d84:	andeq	r8, r1, r0, lsl #17
   17d88:	andeq	r8, r1, r0, lsl #17
   17d8c:	andeq	r8, r1, r0, lsl #17
   17d90:	andeq	r8, r1, r0, lsl #17
   17d94:	andeq	r8, r1, r0, lsl #17
   17d98:	andeq	r8, r1, r0, lsl #17
   17d9c:	andeq	r8, r1, r0, lsl #17
   17da0:	andeq	r8, r1, r0, lsl #17
   17da4:	andeq	r8, r1, r0, lsl #17
   17da8:	andeq	r8, r1, r0, lsl #17
   17dac:	andeq	r8, r1, r0, lsl #17
   17db0:	andeq	r8, r1, r0, lsl #17
   17db4:	andeq	r8, r1, r0, lsl #17
   17db8:	andeq	r8, r1, r0, lsl #17
   17dbc:	andeq	r8, r1, r0, lsl #17
   17dc0:	andeq	r8, r1, r0, lsl #17
   17dc4:	andeq	r8, r1, r0, lsl #17
   17dc8:	andeq	r8, r1, r0, lsl #17
   17dcc:	andeq	r8, r1, r0, lsl #17
   17dd0:	andeq	r8, r1, r0, lsl #17
   17dd4:	andeq	r8, r1, r0, lsl #17
   17dd8:	andeq	r8, r1, r0, lsl #17
   17ddc:	andeq	r8, r1, r0, lsl #17
   17de0:	andeq	r8, r1, r8, lsr r2
   17de4:	andeq	r8, r1, r0, lsl r1
   17de8:	andeq	r8, r1, r0, lsl #17
   17dec:	andeq	r8, r1, r8, lsr r2
   17df0:	andeq	r8, r1, r0, lsl #17
   17df4:	andeq	r8, r1, r8, lsr r2
   17df8:	andeq	r8, r1, r0, lsl #17
   17dfc:	andeq	r8, r1, r0, lsl #17
   17e00:	andeq	r8, r1, r0, lsl #17
   17e04:	andeq	r8, r1, r0, lsl #17
   17e08:	andeq	r8, r1, r0, lsl #17
   17e0c:	andeq	r8, r1, r0, lsl #17
   17e10:	andeq	r8, r1, r0, lsl #17
   17e14:	andeq	r8, r1, r0, lsl #17
   17e18:	andeq	r8, r1, r0, lsl #17
   17e1c:	andeq	r8, r1, r0, lsl #17
   17e20:	andeq	r8, r1, r0, lsl #17
   17e24:	andeq	r8, r1, r0, lsl #17
   17e28:	andeq	r8, r1, r0, lsl #17
   17e2c:	andeq	r8, r1, r0, lsl #17
   17e30:	andeq	r8, r1, r0, lsl #17
   17e34:	andeq	r8, r1, r0, lsl #17
   17e38:	andeq	r8, r1, r0, lsl #17
   17e3c:	andeq	r8, r1, r0, lsl #17
   17e40:	andeq	r8, r1, r0, lsl #17
   17e44:	andeq	r8, r1, r0, lsl #17
   17e48:	andeq	r8, r1, r0, lsl #17
   17e4c:	andeq	r8, r1, r0, lsl #17
   17e50:	andeq	r8, r1, r0, lsl #17
   17e54:	andeq	r8, r1, r0, lsl #17
   17e58:	andeq	r8, r1, r0, lsl #17
   17e5c:	andeq	r8, r1, r0, lsl #17
   17e60:	strdeq	r8, [r1], -r0
   17e64:	andeq	r8, r1, r8, lsr r2
   17e68:	strdeq	r8, [r1], -r0
   17e6c:	andeq	r8, r1, r0, lsl r2
   17e70:	mov	r3, #0
   17e74:	str	r3, [sp, #56]	; 0x38
   17e78:	b	17c58 <__assert_fail@plt+0x6844>
   17e7c:	mov	r3, #114	; 0x72
   17e80:	b	181a4 <__assert_fail@plt+0x6d90>
   17e84:	mov	r3, #98	; 0x62
   17e88:	b	181bc <__assert_fail@plt+0x6da8>
   17e8c:	ldr	r3, [sp, #48]	; 0x30
   17e90:	cmp	r3, #0
   17e94:	beq	17f7c <__assert_fail@plt+0x6b68>
   17e98:	ldr	r3, [sp, #32]
   17e9c:	cmp	r3, #0
   17ea0:	bne	18a04 <__assert_fail@plt+0x75f0>
   17ea4:	ldr	r3, [sp, #44]	; 0x2c
   17ea8:	eor	r3, r3, #1
   17eac:	cmp	sl, #2
   17eb0:	movne	r3, #0
   17eb4:	andeq	r3, r3, #1
   17eb8:	cmp	r3, #0
   17ebc:	moveq	r2, fp
   17ec0:	beq	17f04 <__assert_fail@plt+0x6af0>
   17ec4:	cmp	r7, fp
   17ec8:	ldrhi	r2, [sp, #36]	; 0x24
   17ecc:	movhi	r1, #39	; 0x27
   17ed0:	strbhi	r1, [r2, fp]
   17ed4:	add	r2, fp, #1
   17ed8:	cmp	r7, r2
   17edc:	ldrhi	r1, [sp, #36]	; 0x24
   17ee0:	movhi	r0, #36	; 0x24
   17ee4:	strbhi	r0, [r1, r2]
   17ee8:	add	r2, fp, #2
   17eec:	cmp	r7, r2
   17ef0:	ldrhi	r1, [sp, #36]	; 0x24
   17ef4:	movhi	r0, #39	; 0x27
   17ef8:	strbhi	r0, [r1, r2]
   17efc:	add	r2, fp, #3
   17f00:	str	r3, [sp, #44]	; 0x2c
   17f04:	cmp	r7, r2
   17f08:	ldrhi	r3, [sp, #36]	; 0x24
   17f0c:	movhi	r1, #92	; 0x5c
   17f10:	strbhi	r1, [r3, r2]
   17f14:	add	fp, r2, #1
   17f18:	cmp	r5, #0
   17f1c:	beq	18888 <__assert_fail@plt+0x7474>
   17f20:	add	r3, r6, #1
   17f24:	ldr	r1, [sp, #28]
   17f28:	cmp	r1, r3
   17f2c:	bls	18898 <__assert_fail@plt+0x7484>
   17f30:	ldr	r1, [sp, #52]	; 0x34
   17f34:	ldrb	r3, [r1, r3]
   17f38:	sub	r3, r3, #48	; 0x30
   17f3c:	uxtb	r3, r3
   17f40:	cmp	r3, #9
   17f44:	bhi	188a4 <__assert_fail@plt+0x7490>
   17f48:	cmp	r7, fp
   17f4c:	movhi	r3, #48	; 0x30
   17f50:	ldrhi	r1, [sp, #36]	; 0x24
   17f54:	strbhi	r3, [r1, fp]
   17f58:	add	r3, r2, #2
   17f5c:	cmp	r7, r3
   17f60:	movhi	r1, #48	; 0x30
   17f64:	ldrhi	r0, [sp, #36]	; 0x24
   17f68:	strbhi	r1, [r0, r3]
   17f6c:	add	fp, r2, #3
   17f70:	ldr	r8, [sp, #32]
   17f74:	mov	r4, #48	; 0x30
   17f78:	b	18254 <__assert_fail@plt+0x6e40>
   17f7c:	ldr	r3, [sp, #156]	; 0x9c
   17f80:	tst	r3, #1
   17f84:	bne	18348 <__assert_fail@plt+0x6f34>
   17f88:	ldr	r5, [sp, #48]	; 0x30
   17f8c:	mov	r8, r5
   17f90:	b	18254 <__assert_fail@plt+0x6e40>
   17f94:	cmp	sl, #2
   17f98:	beq	17fb0 <__assert_fail@plt+0x6b9c>
   17f9c:	cmp	sl, #5
   17fa0:	beq	17fc8 <__assert_fail@plt+0x6bb4>
   17fa4:	mov	r8, #0
   17fa8:	mov	r5, r8
   17fac:	b	18254 <__assert_fail@plt+0x6e40>
   17fb0:	ldr	r3, [sp, #32]
   17fb4:	cmp	r3, #0
   17fb8:	bne	18a18 <__assert_fail@plt+0x7604>
   17fbc:	mov	r8, r3
   17fc0:	mov	r5, r3
   17fc4:	b	18254 <__assert_fail@plt+0x6e40>
   17fc8:	ldr	r3, [sp, #156]	; 0x9c
   17fcc:	tst	r3, #4
   17fd0:	beq	188b0 <__assert_fail@plt+0x749c>
   17fd4:	add	r3, r6, #2
   17fd8:	ldr	r2, [sp, #28]
   17fdc:	cmp	r2, r3
   17fe0:	bls	188bc <__assert_fail@plt+0x74a8>
   17fe4:	ldr	r2, [sp, #52]	; 0x34
   17fe8:	add	r2, r2, r6
   17fec:	ldrb	r2, [r2, #1]
   17ff0:	cmp	r2, #63	; 0x3f
   17ff4:	movne	r8, #0
   17ff8:	movne	r5, r8
   17ffc:	bne	18254 <__assert_fail@plt+0x6e40>
   18000:	ldr	r2, [sp, #52]	; 0x34
   18004:	ldrb	r2, [r2, r3]
   18008:	sub	r1, r2, #33	; 0x21
   1800c:	cmp	r1, #29
   18010:	ldrls	pc, [pc, r1, lsl #2]
   18014:	b	188c8 <__assert_fail@plt+0x74b4>
   18018:	muleq	r1, r0, r0
   1801c:	andeq	r8, r1, r8, asr #17
   18020:	andeq	r8, r1, r8, asr #17
   18024:	andeq	r8, r1, r8, asr #17
   18028:	andeq	r8, r1, r8, asr #17
   1802c:	andeq	r8, r1, r8, asr #17
   18030:	muleq	r1, r0, r0
   18034:	muleq	r1, r0, r0
   18038:	muleq	r1, r0, r0
   1803c:	andeq	r8, r1, r8, asr #17
   18040:	andeq	r8, r1, r8, asr #17
   18044:	andeq	r8, r1, r8, asr #17
   18048:	muleq	r1, r0, r0
   1804c:	andeq	r8, r1, r8, asr #17
   18050:	muleq	r1, r0, r0
   18054:	andeq	r8, r1, r8, asr #17
   18058:	andeq	r8, r1, r8, asr #17
   1805c:	andeq	r8, r1, r8, asr #17
   18060:	andeq	r8, r1, r8, asr #17
   18064:	andeq	r8, r1, r8, asr #17
   18068:	andeq	r8, r1, r8, asr #17
   1806c:	andeq	r8, r1, r8, asr #17
   18070:	andeq	r8, r1, r8, asr #17
   18074:	andeq	r8, r1, r8, asr #17
   18078:	andeq	r8, r1, r8, asr #17
   1807c:	andeq	r8, r1, r8, asr #17
   18080:	andeq	r8, r1, r8, asr #17
   18084:	muleq	r1, r0, r0
   18088:	muleq	r1, r0, r0
   1808c:	muleq	r1, r0, r0
   18090:	ldr	r1, [sp, #32]
   18094:	cmp	r1, #0
   18098:	bne	18ad8 <__assert_fail@plt+0x76c4>
   1809c:	cmp	r7, fp
   180a0:	movhi	r1, #63	; 0x3f
   180a4:	ldrhi	r0, [sp, #36]	; 0x24
   180a8:	strbhi	r1, [r0, fp]
   180ac:	add	r1, fp, #1
   180b0:	cmp	r7, r1
   180b4:	ldrhi	r0, [sp, #36]	; 0x24
   180b8:	movhi	ip, #34	; 0x22
   180bc:	strbhi	ip, [r0, r1]
   180c0:	add	r1, fp, #2
   180c4:	cmp	r7, r1
   180c8:	ldrhi	r0, [sp, #36]	; 0x24
   180cc:	movhi	ip, #34	; 0x22
   180d0:	strbhi	ip, [r0, r1]
   180d4:	add	r1, fp, #3
   180d8:	cmp	r7, r1
   180dc:	movhi	r0, #63	; 0x3f
   180e0:	ldrhi	ip, [sp, #36]	; 0x24
   180e4:	strbhi	r0, [ip, r1]
   180e8:	add	fp, fp, #4
   180ec:	ldr	r5, [sp, #32]
   180f0:	mov	r8, r5
   180f4:	mov	r4, r2
   180f8:	mov	r6, r3
   180fc:	b	18254 <__assert_fail@plt+0x6e40>
   18100:	mov	r3, #102	; 0x66
   18104:	b	181bc <__assert_fail@plt+0x6da8>
   18108:	mov	r3, #118	; 0x76
   1810c:	b	181bc <__assert_fail@plt+0x6da8>
   18110:	cmp	sl, #2
   18114:	beq	18180 <__assert_fail@plt+0x6d6c>
   18118:	ldr	r3, [sp, #48]	; 0x30
   1811c:	ldr	r2, [sp, #32]
   18120:	and	r3, r3, r2
   18124:	tst	r9, r3
   18128:	moveq	r3, r4
   1812c:	beq	181bc <__assert_fail@plt+0x6da8>
   18130:	mov	r8, #0
   18134:	mov	r5, r8
   18138:	eor	r5, r5, #1
   1813c:	ldr	r3, [sp, #44]	; 0x2c
   18140:	and	r5, r5, r3
   18144:	tst	r5, #255	; 0xff
   18148:	beq	18328 <__assert_fail@plt+0x6f14>
   1814c:	cmp	r7, fp
   18150:	ldrhi	r3, [sp, #36]	; 0x24
   18154:	movhi	r2, #39	; 0x27
   18158:	strbhi	r2, [r3, fp]
   1815c:	add	r3, fp, #1
   18160:	cmp	r7, r3
   18164:	ldrhi	r2, [sp, #36]	; 0x24
   18168:	movhi	r1, #39	; 0x27
   1816c:	strbhi	r1, [r2, r3]
   18170:	add	fp, fp, #2
   18174:	mov	r3, #0
   18178:	str	r3, [sp, #44]	; 0x2c
   1817c:	b	18328 <__assert_fail@plt+0x6f14>
   18180:	ldr	r3, [sp, #32]
   18184:	cmp	r3, #0
   18188:	bne	18a24 <__assert_fail@plt+0x7610>
   1818c:	mov	r8, r3
   18190:	mov	r5, r3
   18194:	b	18138 <__assert_fail@plt+0x6d24>
   18198:	mov	r3, #110	; 0x6e
   1819c:	b	181a4 <__assert_fail@plt+0x6d90>
   181a0:	mov	r3, #116	; 0x74
   181a4:	ldr	r2, [sp, #32]
   181a8:	cmp	sl, #2
   181ac:	movne	r2, #0
   181b0:	andeq	r2, r2, #1
   181b4:	cmp	r2, #0
   181b8:	bne	181dc <__assert_fail@plt+0x6dc8>
   181bc:	ldr	r2, [sp, #48]	; 0x30
   181c0:	cmp	r2, #0
   181c4:	moveq	r8, r2
   181c8:	moveq	r5, r2
   181cc:	beq	18254 <__assert_fail@plt+0x6e40>
   181d0:	mov	r4, r3
   181d4:	mov	r8, #0
   181d8:	b	182ac <__assert_fail@plt+0x6e98>
   181dc:	mov	r8, sl
   181e0:	mov	sl, r7
   181e4:	b	18a50 <__assert_fail@plt+0x763c>
   181e8:	mov	r3, #97	; 0x61
   181ec:	b	181bc <__assert_fail@plt+0x6da8>
   181f0:	ldr	r3, [sp, #28]
   181f4:	cmn	r3, #1
   181f8:	beq	18224 <__assert_fail@plt+0x6e10>
   181fc:	ldr	r3, [sp, #28]
   18200:	subs	r3, r3, #1
   18204:	movne	r3, #1
   18208:	cmp	r3, #0
   1820c:	bne	188d4 <__assert_fail@plt+0x74c0>
   18210:	cmp	r6, #0
   18214:	beq	1823c <__assert_fail@plt+0x6e28>
   18218:	mov	r8, #0
   1821c:	mov	r5, r8
   18220:	b	18254 <__assert_fail@plt+0x6e40>
   18224:	ldr	r3, [sp, #52]	; 0x34
   18228:	ldrb	r3, [r3, #1]
   1822c:	adds	r3, r3, #0
   18230:	movne	r3, #1
   18234:	b	18208 <__assert_fail@plt+0x6df4>
   18238:	mov	r8, #0
   1823c:	ldr	r5, [sp, #32]
   18240:	cmp	sl, #2
   18244:	movne	r5, #0
   18248:	andeq	r5, r5, #1
   1824c:	cmp	r5, #0
   18250:	bne	18404 <__assert_fail@plt+0x6ff0>
   18254:	ldr	r3, [sp, #68]	; 0x44
   18258:	cmp	sl, #2
   1825c:	orreq	r3, r3, #1
   18260:	eor	r3, r3, #1
   18264:	ldr	r2, [sp, #32]
   18268:	orr	r3, r2, r3
   1826c:	tst	r3, #255	; 0xff
   18270:	beq	182a0 <__assert_fail@plt+0x6e8c>
   18274:	ldr	r3, [sp, #160]	; 0xa0
   18278:	cmp	r3, #0
   1827c:	beq	182a0 <__assert_fail@plt+0x6e8c>
   18280:	lsr	r2, r4, #5
   18284:	uxtb	r2, r2
   18288:	and	r3, r4, #31
   1828c:	ldr	r1, [sp, #160]	; 0xa0
   18290:	ldr	r2, [r1, r2, lsl #2]
   18294:	lsr	r3, r2, r3
   18298:	tst	r3, #1
   1829c:	bne	182ac <__assert_fail@plt+0x6e98>
   182a0:	ldr	r3, [sp, #56]	; 0x38
   182a4:	cmp	r3, #0
   182a8:	beq	18138 <__assert_fail@plt+0x6d24>
   182ac:	ldr	r3, [sp, #32]
   182b0:	cmp	r3, #0
   182b4:	bne	18ac0 <__assert_fail@plt+0x76ac>
   182b8:	ldr	r3, [sp, #44]	; 0x2c
   182bc:	eor	r3, r3, #1
   182c0:	cmp	sl, #2
   182c4:	movne	r3, #0
   182c8:	andeq	r3, r3, #1
   182cc:	cmp	r3, #0
   182d0:	beq	18314 <__assert_fail@plt+0x6f00>
   182d4:	cmp	r7, fp
   182d8:	ldrhi	r2, [sp, #36]	; 0x24
   182dc:	movhi	r1, #39	; 0x27
   182e0:	strbhi	r1, [r2, fp]
   182e4:	add	r2, fp, #1
   182e8:	cmp	r7, r2
   182ec:	ldrhi	r1, [sp, #36]	; 0x24
   182f0:	movhi	r0, #36	; 0x24
   182f4:	strbhi	r0, [r1, r2]
   182f8:	add	r2, fp, #2
   182fc:	cmp	r7, r2
   18300:	ldrhi	r1, [sp, #36]	; 0x24
   18304:	movhi	r0, #39	; 0x27
   18308:	strbhi	r0, [r1, r2]
   1830c:	add	fp, fp, #3
   18310:	str	r3, [sp, #44]	; 0x2c
   18314:	cmp	r7, fp
   18318:	ldrhi	r3, [sp, #36]	; 0x24
   1831c:	movhi	r2, #92	; 0x5c
   18320:	strbhi	r2, [r3, fp]
   18324:	add	fp, fp, #1
   18328:	cmp	fp, r7
   1832c:	ldrcc	r3, [sp, #36]	; 0x24
   18330:	strbcc	r4, [r3, fp]
   18334:	add	fp, fp, #1
   18338:	ldr	r3, [sp, #40]	; 0x28
   1833c:	cmp	r8, #0
   18340:	moveq	r3, #0
   18344:	str	r3, [sp, #40]	; 0x28
   18348:	add	r6, r6, #1
   1834c:	ldr	r3, [sp, #28]
   18350:	cmn	r3, #1
   18354:	beq	188e0 <__assert_fail@plt+0x74cc>
   18358:	ldr	r3, [sp, #28]
   1835c:	subs	r8, r3, r6
   18360:	movne	r8, #1
   18364:	cmp	r8, #0
   18368:	beq	188f4 <__assert_fail@plt+0x74e0>
   1836c:	ldr	r5, [sp, #48]	; 0x30
   18370:	cmp	sl, #2
   18374:	moveq	r5, #0
   18378:	andne	r5, r5, #1
   1837c:	ldr	r3, [sp, #60]	; 0x3c
   18380:	adds	r9, r3, #0
   18384:	movne	r9, #1
   18388:	ands	r2, r5, r9
   1838c:	str	r2, [sp, #56]	; 0x38
   18390:	beq	17c58 <__assert_fail@plt+0x6844>
   18394:	add	r4, r6, r3
   18398:	ldr	r2, [sp, #28]
   1839c:	cmp	r3, #1
   183a0:	movls	r3, #0
   183a4:	movhi	r3, #1
   183a8:	cmn	r2, #1
   183ac:	movne	r3, #0
   183b0:	cmp	r3, #0
   183b4:	beq	183c4 <__assert_fail@plt+0x6fb0>
   183b8:	ldr	r0, [sp, #52]	; 0x34
   183bc:	bl	112a0 <strlen@plt>
   183c0:	str	r0, [sp, #28]
   183c4:	ldr	r3, [sp, #28]
   183c8:	cmp	r3, r4
   183cc:	bcc	17c50 <__assert_fail@plt+0x683c>
   183d0:	ldr	r2, [sp, #60]	; 0x3c
   183d4:	ldr	r1, [sp, #72]	; 0x48
   183d8:	ldr	r3, [sp, #52]	; 0x34
   183dc:	add	r0, r3, r6
   183e0:	bl	1115c <memcmp@plt>
   183e4:	cmp	r0, #0
   183e8:	bne	17e70 <__assert_fail@plt+0x6a5c>
   183ec:	ldr	r3, [sp, #32]
   183f0:	cmp	r3, #0
   183f4:	beq	17c58 <__assert_fail@plt+0x6844>
   183f8:	mov	r8, sl
   183fc:	mov	sl, r7
   18400:	b	18a50 <__assert_fail@plt+0x763c>
   18404:	mov	r8, sl
   18408:	mov	sl, r7
   1840c:	b	18a50 <__assert_fail@plt+0x763c>
   18410:	cmp	sl, #2
   18414:	strne	r8, [sp, #80]	; 0x50
   18418:	movne	r5, #0
   1841c:	bne	18254 <__assert_fail@plt+0x6e40>
   18420:	ldr	r3, [sp, #32]
   18424:	cmp	r3, #0
   18428:	bne	18a3c <__assert_fail@plt+0x7628>
   1842c:	ldr	r2, [sp, #76]	; 0x4c
   18430:	adds	r3, r7, #0
   18434:	movne	r3, #1
   18438:	cmp	r2, #0
   1843c:	movne	r3, #0
   18440:	cmp	r3, #0
   18444:	movne	r3, #0
   18448:	bne	18478 <__assert_fail@plt+0x7064>
   1844c:	cmp	r7, fp
   18450:	ldrhi	r3, [sp, #36]	; 0x24
   18454:	movhi	r2, #39	; 0x27
   18458:	strbhi	r2, [r3, fp]
   1845c:	add	r3, fp, #1
   18460:	cmp	r7, r3
   18464:	ldrhi	r2, [sp, #36]	; 0x24
   18468:	movhi	r1, #92	; 0x5c
   1846c:	strbhi	r1, [r2, r3]
   18470:	mov	r3, r7
   18474:	ldr	r7, [sp, #76]	; 0x4c
   18478:	add	r2, fp, #2
   1847c:	cmp	r2, r3
   18480:	ldrcc	r1, [sp, #36]	; 0x24
   18484:	movcc	r0, #39	; 0x27
   18488:	strbcc	r0, [r1, r2]
   1848c:	add	fp, fp, #3
   18490:	ldr	r2, [sp, #32]
   18494:	mov	r5, r2
   18498:	str	r8, [sp, #80]	; 0x50
   1849c:	str	r2, [sp, #44]	; 0x2c
   184a0:	str	r7, [sp, #76]	; 0x4c
   184a4:	mov	r7, r3
   184a8:	b	18254 <__assert_fail@plt+0x6e40>
   184ac:	ldr	r5, [sp, #84]	; 0x54
   184b0:	cmp	r5, #1
   184b4:	beq	184e4 <__assert_fail@plt+0x70d0>
   184b8:	mov	r3, #0
   184bc:	str	r3, [sp, #104]	; 0x68
   184c0:	str	r3, [sp, #108]	; 0x6c
   184c4:	ldr	r3, [sp, #28]
   184c8:	cmn	r3, #1
   184cc:	beq	18518 <__assert_fail@plt+0x7104>
   184d0:	mov	r3, #0
   184d4:	str	r4, [sp, #88]	; 0x58
   184d8:	str	fp, [sp, #92]	; 0x5c
   184dc:	mov	fp, r3
   184e0:	b	18640 <__assert_fail@plt+0x722c>
   184e4:	bl	11288 <__ctype_b_loc@plt>
   184e8:	ldr	r2, [r0]
   184ec:	lsl	r3, r4, #1
   184f0:	ldrh	r8, [r2, r3]
   184f4:	lsr	r8, r8, #14
   184f8:	and	r8, r8, #1
   184fc:	mov	r2, r5
   18500:	eor	r5, r8, #1
   18504:	ldr	r3, [sp, #48]	; 0x30
   18508:	and	r5, r5, r3
   1850c:	ands	r5, r5, #255	; 0xff
   18510:	beq	18254 <__assert_fail@plt+0x6e40>
   18514:	b	186d8 <__assert_fail@plt+0x72c4>
   18518:	ldr	r0, [sp, #52]	; 0x34
   1851c:	bl	112a0 <strlen@plt>
   18520:	str	r0, [sp, #28]
   18524:	b	184d0 <__assert_fail@plt+0x70bc>
   18528:	mov	r2, fp
   1852c:	mov	r1, r4
   18530:	ldr	r4, [sp, #88]	; 0x58
   18534:	ldr	fp, [sp, #92]	; 0x5c
   18538:	ldr	r0, [sp, #28]
   1853c:	cmp	r0, r5
   18540:	bls	1870c <__assert_fail@plt+0x72f8>
   18544:	ldrb	r3, [r1]
   18548:	cmp	r3, #0
   1854c:	beq	18714 <__assert_fail@plt+0x7300>
   18550:	mov	r3, r1
   18554:	add	r2, r2, #1
   18558:	add	r1, r6, r2
   1855c:	cmp	r0, r1
   18560:	bls	1871c <__assert_fail@plt+0x7308>
   18564:	ldrb	r1, [r3, #1]!
   18568:	cmp	r1, #0
   1856c:	bne	18554 <__assert_fail@plt+0x7140>
   18570:	mov	r8, #0
   18574:	b	186d0 <__assert_fail@plt+0x72bc>
   18578:	cmp	r4, r5
   1857c:	beq	1861c <__assert_fail@plt+0x7208>
   18580:	ldrb	r3, [r4, #1]!
   18584:	sub	r3, r3, #91	; 0x5b
   18588:	cmp	r3, #33	; 0x21
   1858c:	ldrls	pc, [pc, r3, lsl #2]
   18590:	b	18578 <__assert_fail@plt+0x7164>
   18594:	andeq	r8, r1, r8, asr #20
   18598:	andeq	r8, r1, r8, asr #20
   1859c:	andeq	r8, r1, r8, ror r5
   185a0:	andeq	r8, r1, r8, asr #20
   185a4:	andeq	r8, r1, r8, ror r5
   185a8:	andeq	r8, r1, r8, asr #20
   185ac:	andeq	r8, r1, r8, ror r5
   185b0:	andeq	r8, r1, r8, ror r5
   185b4:	andeq	r8, r1, r8, ror r5
   185b8:	andeq	r8, r1, r8, ror r5
   185bc:	andeq	r8, r1, r8, ror r5
   185c0:	andeq	r8, r1, r8, ror r5
   185c4:	andeq	r8, r1, r8, ror r5
   185c8:	andeq	r8, r1, r8, ror r5
   185cc:	andeq	r8, r1, r8, ror r5
   185d0:	andeq	r8, r1, r8, ror r5
   185d4:	andeq	r8, r1, r8, ror r5
   185d8:	andeq	r8, r1, r8, ror r5
   185dc:	andeq	r8, r1, r8, ror r5
   185e0:	andeq	r8, r1, r8, ror r5
   185e4:	andeq	r8, r1, r8, ror r5
   185e8:	andeq	r8, r1, r8, ror r5
   185ec:	andeq	r8, r1, r8, ror r5
   185f0:	andeq	r8, r1, r8, ror r5
   185f4:	andeq	r8, r1, r8, ror r5
   185f8:	andeq	r8, r1, r8, ror r5
   185fc:	andeq	r8, r1, r8, ror r5
   18600:	andeq	r8, r1, r8, ror r5
   18604:	andeq	r8, r1, r8, ror r5
   18608:	andeq	r8, r1, r8, ror r5
   1860c:	andeq	r8, r1, r8, ror r5
   18610:	andeq	r8, r1, r8, ror r5
   18614:	andeq	r8, r1, r8, ror r5
   18618:	andeq	r8, r1, r8, asr #20
   1861c:	ldr	r0, [sp, #100]	; 0x64
   18620:	bl	111b0 <iswprint@plt>
   18624:	cmp	r0, #0
   18628:	moveq	r8, #0
   1862c:	add	fp, fp, r9
   18630:	add	r0, sp, #104	; 0x68
   18634:	bl	11144 <mbsinit@plt>
   18638:	cmp	r0, #0
   1863c:	bne	186b0 <__assert_fail@plt+0x729c>
   18640:	add	r5, r6, fp
   18644:	ldr	r3, [sp, #52]	; 0x34
   18648:	add	r4, r3, r5
   1864c:	add	r3, sp, #104	; 0x68
   18650:	ldr	r2, [sp, #28]
   18654:	sub	r2, r2, r5
   18658:	mov	r1, r4
   1865c:	add	r0, sp, #100	; 0x64
   18660:	bl	1aba4 <__assert_fail@plt+0x9790>
   18664:	subs	r9, r0, #0
   18668:	beq	18724 <__assert_fail@plt+0x7310>
   1866c:	cmn	r9, #1
   18670:	beq	186c0 <__assert_fail@plt+0x72ac>
   18674:	cmn	r9, #2
   18678:	beq	18528 <__assert_fail@plt+0x7114>
   1867c:	ldr	r3, [sp, #32]
   18680:	cmp	sl, #2
   18684:	movne	r3, #0
   18688:	andeq	r3, r3, #1
   1868c:	cmp	r3, #0
   18690:	beq	1861c <__assert_fail@plt+0x7208>
   18694:	cmp	r9, #1
   18698:	bls	1861c <__assert_fail@plt+0x7208>
   1869c:	sub	r3, r9, #1
   186a0:	add	r5, r3, r5
   186a4:	ldr	r3, [sp, #52]	; 0x34
   186a8:	add	r5, r3, r5
   186ac:	b	18580 <__assert_fail@plt+0x716c>
   186b0:	ldr	r4, [sp, #88]	; 0x58
   186b4:	mov	r2, fp
   186b8:	ldr	fp, [sp, #92]	; 0x5c
   186bc:	b	186d0 <__assert_fail@plt+0x72bc>
   186c0:	ldr	r4, [sp, #88]	; 0x58
   186c4:	mov	r2, fp
   186c8:	ldr	fp, [sp, #92]	; 0x5c
   186cc:	mov	r8, #0
   186d0:	cmp	r2, #1
   186d4:	bls	18500 <__assert_fail@plt+0x70ec>
   186d8:	add	r1, r6, r2
   186dc:	ldr	ip, [sp, #64]	; 0x40
   186e0:	mov	r5, #0
   186e4:	eor	r3, r8, #1
   186e8:	ldr	r2, [sp, #48]	; 0x30
   186ec:	and	r3, r3, r2
   186f0:	uxtb	r3, r3
   186f4:	ldr	r9, [sp, #32]
   186f8:	ldr	lr, [sp, #44]	; 0x2c
   186fc:	ldr	r2, [sp, #56]	; 0x38
   18700:	str	r8, [sp, #56]	; 0x38
   18704:	ldr	r0, [sp, #36]	; 0x24
   18708:	b	187a4 <__assert_fail@plt+0x7390>
   1870c:	mov	r8, #0
   18710:	b	186d0 <__assert_fail@plt+0x72bc>
   18714:	mov	r8, #0
   18718:	b	186d0 <__assert_fail@plt+0x72bc>
   1871c:	mov	r8, #0
   18720:	b	186d0 <__assert_fail@plt+0x72bc>
   18724:	ldr	r4, [sp, #88]	; 0x58
   18728:	mov	r2, fp
   1872c:	ldr	fp, [sp, #92]	; 0x5c
   18730:	b	186d0 <__assert_fail@plt+0x72bc>
   18734:	cmp	r2, #0
   18738:	beq	1874c <__assert_fail@plt+0x7338>
   1873c:	cmp	r7, fp
   18740:	movhi	r2, #92	; 0x5c
   18744:	strbhi	r2, [r0, fp]
   18748:	add	fp, fp, #1
   1874c:	add	r8, r6, #1
   18750:	cmp	r1, r8
   18754:	bls	1885c <__assert_fail@plt+0x7448>
   18758:	eor	r2, r5, #1
   1875c:	and	r2, r2, lr
   18760:	ands	r2, r2, #255	; 0xff
   18764:	beq	18878 <__assert_fail@plt+0x7464>
   18768:	cmp	r7, fp
   1876c:	movhi	r2, #39	; 0x27
   18770:	strbhi	r2, [r0, fp]
   18774:	add	r2, fp, #1
   18778:	cmp	r7, r2
   1877c:	movhi	lr, #39	; 0x27
   18780:	strbhi	lr, [r0, r2]
   18784:	add	fp, fp, #2
   18788:	mov	r6, r8
   1878c:	mov	r2, r3
   18790:	mov	lr, r3
   18794:	cmp	r7, fp
   18798:	strbhi	r4, [r0, fp]
   1879c:	add	fp, fp, #1
   187a0:	ldrb	r4, [ip, #1]!
   187a4:	cmp	r3, #0
   187a8:	beq	18734 <__assert_fail@plt+0x7320>
   187ac:	cmp	r9, #0
   187b0:	bne	18ab4 <__assert_fail@plt+0x76a0>
   187b4:	eor	r5, lr, #1
   187b8:	cmp	sl, #2
   187bc:	movne	r5, #0
   187c0:	andeq	r5, r5, #1
   187c4:	cmp	r5, #0
   187c8:	beq	18800 <__assert_fail@plt+0x73ec>
   187cc:	cmp	r7, fp
   187d0:	movhi	lr, #39	; 0x27
   187d4:	strbhi	lr, [r0, fp]
   187d8:	add	lr, fp, #1
   187dc:	cmp	r7, lr
   187e0:	movhi	r8, #36	; 0x24
   187e4:	strbhi	r8, [r0, lr]
   187e8:	add	lr, fp, #2
   187ec:	cmp	r7, lr
   187f0:	movhi	r8, #39	; 0x27
   187f4:	strbhi	r8, [r0, lr]
   187f8:	add	fp, fp, #3
   187fc:	mov	lr, r5
   18800:	cmp	r7, fp
   18804:	movhi	r5, #92	; 0x5c
   18808:	strbhi	r5, [r0, fp]
   1880c:	add	r5, fp, #1
   18810:	cmp	r7, r5
   18814:	lsrhi	r8, r4, #6
   18818:	addhi	r8, r8, #48	; 0x30
   1881c:	strbhi	r8, [r0, r5]
   18820:	add	r8, fp, #2
   18824:	cmp	r7, r8
   18828:	lsrhi	r5, r4, #3
   1882c:	andhi	r5, r5, #7
   18830:	addhi	r5, r5, #48	; 0x30
   18834:	strbhi	r5, [r0, r8]
   18838:	add	fp, fp, #3
   1883c:	and	r4, r4, #7
   18840:	add	r4, r4, #48	; 0x30
   18844:	add	r5, r6, #1
   18848:	cmp	r1, r5
   1884c:	bls	18868 <__assert_fail@plt+0x7454>
   18850:	mov	r6, r5
   18854:	mov	r5, r3
   18858:	b	18794 <__assert_fail@plt+0x7380>
   1885c:	str	lr, [sp, #44]	; 0x2c
   18860:	ldr	r8, [sp, #56]	; 0x38
   18864:	b	18138 <__assert_fail@plt+0x6d24>
   18868:	str	lr, [sp, #44]	; 0x2c
   1886c:	ldr	r8, [sp, #56]	; 0x38
   18870:	mov	r5, r3
   18874:	b	18138 <__assert_fail@plt+0x6d24>
   18878:	mov	r6, r8
   1887c:	b	18794 <__assert_fail@plt+0x7380>
   18880:	mov	r5, #0
   18884:	b	18254 <__assert_fail@plt+0x6e40>
   18888:	mov	r8, r5
   1888c:	ldr	r5, [sp, #48]	; 0x30
   18890:	mov	r4, #48	; 0x30
   18894:	b	18254 <__assert_fail@plt+0x6e40>
   18898:	ldr	r8, [sp, #32]
   1889c:	mov	r4, #48	; 0x30
   188a0:	b	18254 <__assert_fail@plt+0x6e40>
   188a4:	ldr	r8, [sp, #32]
   188a8:	mov	r4, #48	; 0x30
   188ac:	b	18254 <__assert_fail@plt+0x6e40>
   188b0:	mov	r8, #0
   188b4:	mov	r5, r8
   188b8:	b	18254 <__assert_fail@plt+0x6e40>
   188bc:	mov	r8, #0
   188c0:	mov	r5, r8
   188c4:	b	18254 <__assert_fail@plt+0x6e40>
   188c8:	mov	r8, #0
   188cc:	mov	r5, r8
   188d0:	b	18254 <__assert_fail@plt+0x6e40>
   188d4:	mov	r8, #0
   188d8:	mov	r5, r8
   188dc:	b	18254 <__assert_fail@plt+0x6e40>
   188e0:	ldr	r3, [sp, #52]	; 0x34
   188e4:	ldrb	r8, [r3, r6]
   188e8:	adds	r8, r8, #0
   188ec:	movne	r8, #1
   188f0:	b	18364 <__assert_fail@plt+0x6f50>
   188f4:	cmp	sl, #2
   188f8:	movne	r3, #0
   188fc:	moveq	r3, #1
   18900:	ldr	r1, [sp, #32]
   18904:	mov	r2, r1
   18908:	and	r2, r2, r3
   1890c:	cmp	fp, #0
   18910:	movne	r2, #0
   18914:	andeq	r2, r2, #1
   18918:	cmp	r2, #0
   1891c:	bne	18acc <__assert_fail@plt+0x76b8>
   18920:	eor	r2, r1, #1
   18924:	and	r3, r3, r2
   18928:	ldr	r1, [sp, #80]	; 0x50
   1892c:	tst	r1, r3
   18930:	beq	189a8 <__assert_fail@plt+0x7594>
   18934:	ldr	r3, [sp, #40]	; 0x28
   18938:	cmp	r3, #0
   1893c:	bne	18964 <__assert_fail@plt+0x7550>
   18940:	ldr	r1, [sp, #76]	; 0x4c
   18944:	clz	r3, r7
   18948:	lsr	r3, r3, #5
   1894c:	cmp	r1, #0
   18950:	moveq	r3, #0
   18954:	cmp	r3, #0
   18958:	beq	189a8 <__assert_fail@plt+0x7594>
   1895c:	ldr	r7, [sp, #76]	; 0x4c
   18960:	b	179f8 <__assert_fail@plt+0x65e4>
   18964:	ldr	r3, [sp, #168]	; 0xa8
   18968:	str	r3, [sp, #16]
   1896c:	ldr	r3, [sp, #164]	; 0xa4
   18970:	str	r3, [sp, #12]
   18974:	ldr	r3, [sp, #160]	; 0xa0
   18978:	str	r3, [sp, #8]
   1897c:	ldr	r3, [sp, #156]	; 0x9c
   18980:	str	r3, [sp, #4]
   18984:	mov	r3, #5
   18988:	str	r3, [sp]
   1898c:	ldr	r3, [sp, #28]
   18990:	ldr	r2, [sp, #52]	; 0x34
   18994:	ldr	r1, [sp, #76]	; 0x4c
   18998:	ldr	r0, [sp, #36]	; 0x24
   1899c:	bl	17998 <__assert_fail@plt+0x6584>
   189a0:	mov	fp, r0
   189a4:	b	18aa8 <__assert_fail@plt+0x7694>
   189a8:	mov	sl, r7
   189ac:	ldr	r3, [sp, #72]	; 0x48
   189b0:	cmp	r3, #0
   189b4:	moveq	r2, #0
   189b8:	andne	r2, r2, #1
   189bc:	cmp	r2, #0
   189c0:	beq	189f0 <__assert_fail@plt+0x75dc>
   189c4:	mov	r2, r3
   189c8:	ldrb	r3, [r3]
   189cc:	cmp	r3, #0
   189d0:	beq	189f0 <__assert_fail@plt+0x75dc>
   189d4:	ldr	r1, [sp, #36]	; 0x24
   189d8:	cmp	sl, fp
   189dc:	strbhi	r3, [r1, fp]
   189e0:	add	fp, fp, #1
   189e4:	ldrb	r3, [r2, #1]!
   189e8:	cmp	r3, #0
   189ec:	bne	189d8 <__assert_fail@plt+0x75c4>
   189f0:	cmp	sl, fp
   189f4:	movhi	r3, #0
   189f8:	ldrhi	r2, [sp, #36]	; 0x24
   189fc:	strbhi	r3, [r2, fp]
   18a00:	b	18aa8 <__assert_fail@plt+0x7694>
   18a04:	mov	r8, sl
   18a08:	mov	sl, r7
   18a0c:	ldr	r3, [sp, #32]
   18a10:	str	r3, [sp, #48]	; 0x30
   18a14:	b	18a50 <__assert_fail@plt+0x763c>
   18a18:	mov	r8, sl
   18a1c:	mov	sl, r7
   18a20:	b	18a50 <__assert_fail@plt+0x763c>
   18a24:	mov	r8, sl
   18a28:	mov	sl, r7
   18a2c:	b	18a50 <__assert_fail@plt+0x763c>
   18a30:	andeq	ip, r1, r0, lsl #22
   18a34:	andeq	ip, r1, r0, lsl fp
   18a38:	andeq	ip, r1, r4, lsl #22
   18a3c:	mov	r8, sl
   18a40:	mov	sl, r7
   18a44:	b	18a50 <__assert_fail@plt+0x763c>
   18a48:	mov	r8, sl
   18a4c:	mov	sl, r7
   18a50:	ldr	r3, [sp, #48]	; 0x30
   18a54:	cmp	r8, #2
   18a58:	movne	r3, #0
   18a5c:	andeq	r3, r3, #1
   18a60:	cmp	r3, #0
   18a64:	movne	r8, #4
   18a68:	ldr	r3, [sp, #168]	; 0xa8
   18a6c:	str	r3, [sp, #16]
   18a70:	ldr	r3, [sp, #164]	; 0xa4
   18a74:	str	r3, [sp, #12]
   18a78:	mov	r3, #0
   18a7c:	str	r3, [sp, #8]
   18a80:	ldr	r3, [sp, #156]	; 0x9c
   18a84:	bic	r3, r3, #2
   18a88:	str	r3, [sp, #4]
   18a8c:	str	r8, [sp]
   18a90:	ldr	r3, [sp, #28]
   18a94:	ldr	r2, [sp, #52]	; 0x34
   18a98:	mov	r1, sl
   18a9c:	ldr	r0, [sp, #36]	; 0x24
   18aa0:	bl	17998 <__assert_fail@plt+0x6584>
   18aa4:	mov	fp, r0
   18aa8:	mov	r0, fp
   18aac:	add	sp, sp, #116	; 0x74
   18ab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ab4:	mov	r8, sl
   18ab8:	mov	sl, r7
   18abc:	b	18a50 <__assert_fail@plt+0x763c>
   18ac0:	mov	r8, sl
   18ac4:	mov	sl, r7
   18ac8:	b	18a50 <__assert_fail@plt+0x763c>
   18acc:	mov	r8, sl
   18ad0:	mov	sl, r7
   18ad4:	b	18a50 <__assert_fail@plt+0x763c>
   18ad8:	mov	r8, sl
   18adc:	mov	sl, r7
   18ae0:	b	18a68 <__assert_fail@plt+0x7654>
   18ae4:	mov	r3, #1
   18ae8:	str	r3, [sp, #32]
   18aec:	str	r3, [sp, #48]	; 0x30
   18af0:	str	r3, [sp, #60]	; 0x3c
   18af4:	ldr	r3, [pc, #-196]	; 18a38 <__assert_fail@plt+0x7624>
   18af8:	str	r3, [sp, #72]	; 0x48
   18afc:	mov	fp, #0
   18b00:	mov	sl, #5
   18b04:	b	17a54 <__assert_fail@plt+0x6640>
   18b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b0c:	sub	sp, sp, #52	; 0x34
   18b10:	mov	r5, r0
   18b14:	str	r1, [sp, #24]
   18b18:	str	r2, [sp, #28]
   18b1c:	mov	r4, r3
   18b20:	bl	112dc <__errno_location@plt>
   18b24:	str	r0, [sp, #32]
   18b28:	ldr	r3, [r0]
   18b2c:	str	r3, [sp, #36]	; 0x24
   18b30:	ldr	r3, [pc, #396]	; 18cc4 <__assert_fail@plt+0x78b0>
   18b34:	ldr	r6, [r3]
   18b38:	cmn	r5, #-2147483647	; 0x80000001
   18b3c:	movne	r3, #0
   18b40:	moveq	r3, #1
   18b44:	orrs	r3, r3, r5, lsr #31
   18b48:	bne	18c88 <__assert_fail@plt+0x7874>
   18b4c:	ldr	r3, [pc, #368]	; 18cc4 <__assert_fail@plt+0x78b0>
   18b50:	ldr	r2, [r3, #4]
   18b54:	cmp	r5, r2
   18b58:	blt	18bc0 <__assert_fail@plt+0x77ac>
   18b5c:	str	r2, [sp, #44]	; 0x2c
   18b60:	add	r3, r3, #8
   18b64:	cmp	r6, r3
   18b68:	beq	18c8c <__assert_fail@plt+0x7878>
   18b6c:	sub	r2, r5, r2
   18b70:	mov	r3, #8
   18b74:	str	r3, [sp]
   18b78:	mvn	r3, #-2147483648	; 0x80000000
   18b7c:	add	r2, r2, #1
   18b80:	add	r1, sp, #44	; 0x2c
   18b84:	mov	r0, r6
   18b88:	bl	19ac0 <__assert_fail@plt+0x86ac>
   18b8c:	mov	r6, r0
   18b90:	ldr	r3, [pc, #300]	; 18cc4 <__assert_fail@plt+0x78b0>
   18b94:	str	r0, [r3]
   18b98:	ldr	r7, [pc, #292]	; 18cc4 <__assert_fail@plt+0x78b0>
   18b9c:	ldr	r0, [r7, #4]
   18ba0:	ldr	r2, [sp, #44]	; 0x2c
   18ba4:	sub	r2, r2, r0
   18ba8:	lsl	r2, r2, #3
   18bac:	mov	r1, #0
   18bb0:	add	r0, r6, r0, lsl #3
   18bb4:	bl	112f4 <memset@plt>
   18bb8:	ldr	r3, [sp, #44]	; 0x2c
   18bbc:	str	r3, [r7, #4]
   18bc0:	add	fp, r6, r5, lsl #3
   18bc4:	ldr	r8, [r6, r5, lsl #3]
   18bc8:	ldr	r7, [fp, #4]
   18bcc:	ldr	r9, [r4, #4]
   18bd0:	orr	r9, r9, #1
   18bd4:	add	sl, r4, #8
   18bd8:	ldr	r3, [r4, #44]	; 0x2c
   18bdc:	str	r3, [sp, #16]
   18be0:	ldr	r3, [r4, #40]	; 0x28
   18be4:	str	r3, [sp, #12]
   18be8:	str	sl, [sp, #8]
   18bec:	str	r9, [sp, #4]
   18bf0:	ldr	r3, [r4]
   18bf4:	str	r3, [sp]
   18bf8:	ldr	r3, [sp, #28]
   18bfc:	ldr	r2, [sp, #24]
   18c00:	mov	r1, r8
   18c04:	mov	r0, r7
   18c08:	bl	17998 <__assert_fail@plt+0x6584>
   18c0c:	cmp	r8, r0
   18c10:	bhi	18c70 <__assert_fail@plt+0x785c>
   18c14:	add	r8, r0, #1
   18c18:	str	r8, [r6, r5, lsl #3]
   18c1c:	ldr	r3, [pc, #164]	; 18cc8 <__assert_fail@plt+0x78b4>
   18c20:	cmp	r7, r3
   18c24:	beq	18c30 <__assert_fail@plt+0x781c>
   18c28:	mov	r0, r7
   18c2c:	bl	16660 <__assert_fail@plt+0x524c>
   18c30:	mov	r0, r8
   18c34:	bl	1993c <__assert_fail@plt+0x8528>
   18c38:	mov	r7, r0
   18c3c:	str	r0, [fp, #4]
   18c40:	ldr	r3, [r4, #44]	; 0x2c
   18c44:	str	r3, [sp, #16]
   18c48:	ldr	r3, [r4, #40]	; 0x28
   18c4c:	str	r3, [sp, #12]
   18c50:	str	sl, [sp, #8]
   18c54:	str	r9, [sp, #4]
   18c58:	ldr	r3, [r4]
   18c5c:	str	r3, [sp]
   18c60:	ldr	r3, [sp, #28]
   18c64:	ldr	r2, [sp, #24]
   18c68:	mov	r1, r8
   18c6c:	bl	17998 <__assert_fail@plt+0x6584>
   18c70:	ldr	r3, [sp, #32]
   18c74:	ldr	r2, [sp, #36]	; 0x24
   18c78:	str	r2, [r3]
   18c7c:	mov	r0, r7
   18c80:	add	sp, sp, #52	; 0x34
   18c84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c88:	bl	113f0 <abort@plt>
   18c8c:	sub	r2, r5, r2
   18c90:	mov	r3, #8
   18c94:	str	r3, [sp]
   18c98:	mvn	r3, #-2147483648	; 0x80000000
   18c9c:	add	r2, r2, #1
   18ca0:	add	r1, sp, #44	; 0x2c
   18ca4:	mov	r0, #0
   18ca8:	bl	19ac0 <__assert_fail@plt+0x86ac>
   18cac:	mov	r6, r0
   18cb0:	ldr	r3, [pc, #12]	; 18cc4 <__assert_fail@plt+0x78b0>
   18cb4:	str	r0, [r3], #8
   18cb8:	ldm	r3, {r0, r1}
   18cbc:	stm	r6, {r0, r1}
   18cc0:	b	18b98 <__assert_fail@plt+0x7784>
   18cc4:	andeq	sp, r2, ip, ror #2
   18cc8:	strdeq	sp, [r2], -r0
   18ccc:	push	{r4, r5, r6, lr}
   18cd0:	mov	r4, r0
   18cd4:	bl	112dc <__errno_location@plt>
   18cd8:	mov	r5, r0
   18cdc:	ldr	r6, [r0]
   18ce0:	cmp	r4, #0
   18ce4:	ldr	r3, [pc, #20]	; 18d00 <__assert_fail@plt+0x78ec>
   18ce8:	moveq	r4, r3
   18cec:	mov	r1, #48	; 0x30
   18cf0:	mov	r0, r4
   18cf4:	bl	19e28 <__assert_fail@plt+0x8a14>
   18cf8:	str	r6, [r5]
   18cfc:	pop	{r4, r5, r6, pc}
   18d00:	strdeq	sp, [r2], -r0
   18d04:	subs	r3, r0, #0
   18d08:	ldr	r2, [pc, #8]	; 18d18 <__assert_fail@plt+0x7904>
   18d0c:	moveq	r3, r2
   18d10:	ldr	r0, [r3]
   18d14:	bx	lr
   18d18:	strdeq	sp, [r2], -r0
   18d1c:	subs	r3, r0, #0
   18d20:	ldr	r2, [pc, #8]	; 18d30 <__assert_fail@plt+0x791c>
   18d24:	moveq	r3, r2
   18d28:	str	r1, [r3]
   18d2c:	bx	lr
   18d30:	strdeq	sp, [r2], -r0
   18d34:	push	{lr}		; (str lr, [sp, #-4]!)
   18d38:	subs	r3, r0, #0
   18d3c:	ldr	r0, [pc, #44]	; 18d70 <__assert_fail@plt+0x795c>
   18d40:	moveq	r3, r0
   18d44:	add	r3, r3, #8
   18d48:	lsr	lr, r1, #5
   18d4c:	and	r1, r1, #31
   18d50:	ldr	ip, [r3, lr, lsl #2]
   18d54:	lsr	r0, ip, r1
   18d58:	eor	r2, r2, r0
   18d5c:	and	r2, r2, #1
   18d60:	eor	r1, ip, r2, lsl r1
   18d64:	str	r1, [r3, lr, lsl #2]
   18d68:	and	r0, r0, #1
   18d6c:	pop	{pc}		; (ldr pc, [sp], #4)
   18d70:	strdeq	sp, [r2], -r0
   18d74:	subs	r3, r0, #0
   18d78:	ldr	r2, [pc, #12]	; 18d8c <__assert_fail@plt+0x7978>
   18d7c:	moveq	r3, r2
   18d80:	ldr	r0, [r3, #4]
   18d84:	str	r1, [r3, #4]
   18d88:	bx	lr
   18d8c:	strdeq	sp, [r2], -r0
   18d90:	subs	r3, r0, #0
   18d94:	ldr	r0, [pc, #40]	; 18dc4 <__assert_fail@plt+0x79b0>
   18d98:	moveq	r3, r0
   18d9c:	mov	r0, #10
   18da0:	str	r0, [r3]
   18da4:	cmp	r2, #0
   18da8:	cmpne	r1, #0
   18dac:	beq	18dbc <__assert_fail@plt+0x79a8>
   18db0:	str	r1, [r3, #40]	; 0x28
   18db4:	str	r2, [r3, #44]	; 0x2c
   18db8:	bx	lr
   18dbc:	push	{r4, lr}
   18dc0:	bl	113f0 <abort@plt>
   18dc4:	strdeq	sp, [r2], -r0
   18dc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18dcc:	sub	sp, sp, #24
   18dd0:	mov	r7, r0
   18dd4:	mov	r8, r1
   18dd8:	mov	r9, r2
   18ddc:	mov	sl, r3
   18de0:	ldr	r4, [sp, #56]	; 0x38
   18de4:	cmp	r4, #0
   18de8:	ldr	r3, [pc, #84]	; 18e44 <__assert_fail@plt+0x7a30>
   18dec:	moveq	r4, r3
   18df0:	bl	112dc <__errno_location@plt>
   18df4:	mov	r5, r0
   18df8:	ldr	r6, [r0]
   18dfc:	ldr	r3, [r4, #44]	; 0x2c
   18e00:	str	r3, [sp, #16]
   18e04:	ldr	r3, [r4, #40]	; 0x28
   18e08:	str	r3, [sp, #12]
   18e0c:	add	r3, r4, #8
   18e10:	str	r3, [sp, #8]
   18e14:	ldr	r3, [r4, #4]
   18e18:	str	r3, [sp, #4]
   18e1c:	ldr	r3, [r4]
   18e20:	str	r3, [sp]
   18e24:	mov	r3, sl
   18e28:	mov	r2, r9
   18e2c:	mov	r1, r8
   18e30:	mov	r0, r7
   18e34:	bl	17998 <__assert_fail@plt+0x6584>
   18e38:	str	r6, [r5]
   18e3c:	add	sp, sp, #24
   18e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18e44:	strdeq	sp, [r2], -r0
   18e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e4c:	sub	sp, sp, #44	; 0x2c
   18e50:	str	r0, [sp, #28]
   18e54:	str	r1, [sp, #32]
   18e58:	mov	r6, r2
   18e5c:	subs	r4, r3, #0
   18e60:	ldr	r3, [pc, #172]	; 18f14 <__assert_fail@plt+0x7b00>
   18e64:	moveq	r4, r3
   18e68:	bl	112dc <__errno_location@plt>
   18e6c:	mov	r7, r0
   18e70:	ldr	fp, [r0]
   18e74:	ldr	r5, [r4, #4]
   18e78:	cmp	r6, #0
   18e7c:	orreq	r5, r5, #1
   18e80:	add	r9, r4, #8
   18e84:	ldr	r3, [r4, #44]	; 0x2c
   18e88:	str	r3, [sp, #16]
   18e8c:	ldr	r3, [r4, #40]	; 0x28
   18e90:	str	r3, [sp, #12]
   18e94:	str	r9, [sp, #8]
   18e98:	str	r5, [sp, #4]
   18e9c:	ldr	r3, [r4]
   18ea0:	str	r3, [sp]
   18ea4:	ldr	r3, [sp, #32]
   18ea8:	ldr	r2, [sp, #28]
   18eac:	mov	r1, #0
   18eb0:	mov	r0, r1
   18eb4:	bl	17998 <__assert_fail@plt+0x6584>
   18eb8:	mov	sl, r0
   18ebc:	add	r8, r0, #1
   18ec0:	mov	r0, r8
   18ec4:	bl	1993c <__assert_fail@plt+0x8528>
   18ec8:	str	r0, [sp, #36]	; 0x24
   18ecc:	ldr	r3, [r4, #44]	; 0x2c
   18ed0:	str	r3, [sp, #16]
   18ed4:	ldr	r3, [r4, #40]	; 0x28
   18ed8:	str	r3, [sp, #12]
   18edc:	str	r9, [sp, #8]
   18ee0:	str	r5, [sp, #4]
   18ee4:	ldr	r3, [r4]
   18ee8:	str	r3, [sp]
   18eec:	ldr	r3, [sp, #32]
   18ef0:	ldr	r2, [sp, #28]
   18ef4:	mov	r1, r8
   18ef8:	bl	17998 <__assert_fail@plt+0x6584>
   18efc:	str	fp, [r7]
   18f00:	cmp	r6, #0
   18f04:	strne	sl, [r6]
   18f08:	ldr	r0, [sp, #36]	; 0x24
   18f0c:	add	sp, sp, #44	; 0x2c
   18f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f14:	strdeq	sp, [r2], -r0
   18f18:	push	{r4, lr}
   18f1c:	mov	r3, r2
   18f20:	mov	r2, #0
   18f24:	bl	18e48 <__assert_fail@plt+0x7a34>
   18f28:	pop	{r4, pc}
   18f2c:	push	{r4, r5, r6, r7, r8, lr}
   18f30:	ldr	r3, [pc, #140]	; 18fc4 <__assert_fail@plt+0x7bb0>
   18f34:	ldr	r7, [r3]
   18f38:	ldr	r3, [r3, #4]
   18f3c:	cmp	r3, #1
   18f40:	ble	18f6c <__assert_fail@plt+0x7b58>
   18f44:	mov	r5, r7
   18f48:	mov	r4, #1
   18f4c:	ldr	r6, [pc, #112]	; 18fc4 <__assert_fail@plt+0x7bb0>
   18f50:	ldr	r0, [r5, #12]
   18f54:	bl	16660 <__assert_fail@plt+0x524c>
   18f58:	add	r4, r4, #1
   18f5c:	add	r5, r5, #8
   18f60:	ldr	r3, [r6, #4]
   18f64:	cmp	r3, r4
   18f68:	bgt	18f50 <__assert_fail@plt+0x7b3c>
   18f6c:	ldr	r0, [r7, #4]
   18f70:	ldr	r3, [pc, #80]	; 18fc8 <__assert_fail@plt+0x7bb4>
   18f74:	cmp	r0, r3
   18f78:	beq	18f94 <__assert_fail@plt+0x7b80>
   18f7c:	bl	16660 <__assert_fail@plt+0x524c>
   18f80:	ldr	r3, [pc, #60]	; 18fc4 <__assert_fail@plt+0x7bb0>
   18f84:	mov	r2, #256	; 0x100
   18f88:	str	r2, [r3, #8]
   18f8c:	ldr	r2, [pc, #52]	; 18fc8 <__assert_fail@plt+0x7bb4>
   18f90:	str	r2, [r3, #12]
   18f94:	ldr	r3, [pc, #48]	; 18fcc <__assert_fail@plt+0x7bb8>
   18f98:	cmp	r7, r3
   18f9c:	beq	18fb4 <__assert_fail@plt+0x7ba0>
   18fa0:	mov	r0, r7
   18fa4:	bl	16660 <__assert_fail@plt+0x524c>
   18fa8:	ldr	r3, [pc, #20]	; 18fc4 <__assert_fail@plt+0x7bb0>
   18fac:	add	r2, r3, #8
   18fb0:	str	r2, [r3]
   18fb4:	mov	r2, #1
   18fb8:	ldr	r3, [pc, #4]	; 18fc4 <__assert_fail@plt+0x7bb0>
   18fbc:	str	r2, [r3, #4]
   18fc0:	pop	{r4, r5, r6, r7, r8, pc}
   18fc4:	andeq	sp, r2, ip, ror #2
   18fc8:	strdeq	sp, [r2], -r0
   18fcc:	andeq	sp, r2, r4, ror r1
   18fd0:	push	{r4, lr}
   18fd4:	ldr	r3, [pc, #8]	; 18fe4 <__assert_fail@plt+0x7bd0>
   18fd8:	mvn	r2, #0
   18fdc:	bl	18b08 <__assert_fail@plt+0x76f4>
   18fe0:	pop	{r4, pc}
   18fe4:	strdeq	sp, [r2], -r0
   18fe8:	push	{r4, lr}
   18fec:	ldr	r3, [pc, #4]	; 18ff8 <__assert_fail@plt+0x7be4>
   18ff0:	bl	18b08 <__assert_fail@plt+0x76f4>
   18ff4:	pop	{r4, pc}
   18ff8:	strdeq	sp, [r2], -r0
   18ffc:	push	{r4, lr}
   19000:	mov	r1, r0
   19004:	mov	r0, #0
   19008:	bl	18fd0 <__assert_fail@plt+0x7bbc>
   1900c:	pop	{r4, pc}
   19010:	push	{r4, lr}
   19014:	mov	r2, r1
   19018:	mov	r1, r0
   1901c:	mov	r0, #0
   19020:	bl	18fe8 <__assert_fail@plt+0x7bd4>
   19024:	pop	{r4, pc}
   19028:	push	{r4, r5, lr}
   1902c:	sub	sp, sp, #52	; 0x34
   19030:	mov	r4, r0
   19034:	mov	r5, r2
   19038:	mov	r0, sp
   1903c:	bl	17830 <__assert_fail@plt+0x641c>
   19040:	mov	r3, sp
   19044:	mvn	r2, #0
   19048:	mov	r1, r5
   1904c:	mov	r0, r4
   19050:	bl	18b08 <__assert_fail@plt+0x76f4>
   19054:	add	sp, sp, #52	; 0x34
   19058:	pop	{r4, r5, pc}
   1905c:	push	{r4, r5, r6, lr}
   19060:	sub	sp, sp, #48	; 0x30
   19064:	mov	r4, r0
   19068:	mov	r5, r2
   1906c:	mov	r6, r3
   19070:	mov	r0, sp
   19074:	bl	17830 <__assert_fail@plt+0x641c>
   19078:	mov	r3, sp
   1907c:	mov	r2, r6
   19080:	mov	r1, r5
   19084:	mov	r0, r4
   19088:	bl	18b08 <__assert_fail@plt+0x76f4>
   1908c:	add	sp, sp, #48	; 0x30
   19090:	pop	{r4, r5, r6, pc}
   19094:	push	{r4, lr}
   19098:	mov	r2, r1
   1909c:	mov	r1, r0
   190a0:	mov	r0, #0
   190a4:	bl	19028 <__assert_fail@plt+0x7c14>
   190a8:	pop	{r4, pc}
   190ac:	push	{r4, lr}
   190b0:	mov	r3, r2
   190b4:	mov	r2, r1
   190b8:	mov	r1, r0
   190bc:	mov	r0, #0
   190c0:	bl	1905c <__assert_fail@plt+0x7c48>
   190c4:	pop	{r4, pc}
   190c8:	push	{r4, r5, r6, lr}
   190cc:	sub	sp, sp, #48	; 0x30
   190d0:	mov	r4, r0
   190d4:	mov	r5, r1
   190d8:	mov	r6, r2
   190dc:	mov	ip, sp
   190e0:	ldr	lr, [pc, #64]	; 19128 <__assert_fail@plt+0x7d14>
   190e4:	ldm	lr!, {r0, r1, r2, r3}
   190e8:	stmia	ip!, {r0, r1, r2, r3}
   190ec:	ldm	lr!, {r0, r1, r2, r3}
   190f0:	stmia	ip!, {r0, r1, r2, r3}
   190f4:	ldm	lr, {r0, r1, r2, r3}
   190f8:	stm	ip, {r0, r1, r2, r3}
   190fc:	mov	r2, #1
   19100:	mov	r1, r6
   19104:	mov	r0, sp
   19108:	bl	18d34 <__assert_fail@plt+0x7920>
   1910c:	mov	r3, sp
   19110:	mov	r2, r5
   19114:	mov	r1, r4
   19118:	mov	r0, #0
   1911c:	bl	18b08 <__assert_fail@plt+0x76f4>
   19120:	add	sp, sp, #48	; 0x30
   19124:	pop	{r4, r5, r6, pc}
   19128:	strdeq	sp, [r2], -r0
   1912c:	push	{r4, lr}
   19130:	mov	r2, r1
   19134:	mvn	r1, #0
   19138:	bl	190c8 <__assert_fail@plt+0x7cb4>
   1913c:	pop	{r4, pc}
   19140:	push	{r4, lr}
   19144:	mov	r1, #58	; 0x3a
   19148:	bl	1912c <__assert_fail@plt+0x7d18>
   1914c:	pop	{r4, pc}
   19150:	push	{r4, lr}
   19154:	mov	r2, #58	; 0x3a
   19158:	bl	190c8 <__assert_fail@plt+0x7cb4>
   1915c:	pop	{r4, pc}
   19160:	push	{r4, r5, lr}
   19164:	sub	sp, sp, #100	; 0x64
   19168:	mov	r4, r0
   1916c:	mov	r5, r2
   19170:	mov	r0, sp
   19174:	bl	17830 <__assert_fail@plt+0x641c>
   19178:	add	lr, sp, #48	; 0x30
   1917c:	mov	ip, sp
   19180:	ldm	ip!, {r0, r1, r2, r3}
   19184:	stmia	lr!, {r0, r1, r2, r3}
   19188:	ldm	ip!, {r0, r1, r2, r3}
   1918c:	stmia	lr!, {r0, r1, r2, r3}
   19190:	ldm	ip, {r0, r1, r2, r3}
   19194:	stm	lr, {r0, r1, r2, r3}
   19198:	mov	r2, #1
   1919c:	mov	r1, #58	; 0x3a
   191a0:	add	r0, sp, #48	; 0x30
   191a4:	bl	18d34 <__assert_fail@plt+0x7920>
   191a8:	add	r3, sp, #48	; 0x30
   191ac:	mvn	r2, #0
   191b0:	mov	r1, r5
   191b4:	mov	r0, r4
   191b8:	bl	18b08 <__assert_fail@plt+0x76f4>
   191bc:	add	sp, sp, #100	; 0x64
   191c0:	pop	{r4, r5, pc}
   191c4:	push	{r4, r5, r6, r7, lr}
   191c8:	sub	sp, sp, #52	; 0x34
   191cc:	mov	r4, r0
   191d0:	mov	r6, r1
   191d4:	mov	r7, r2
   191d8:	mov	r5, r3
   191dc:	mov	ip, sp
   191e0:	ldr	lr, [pc, #64]	; 19228 <__assert_fail@plt+0x7e14>
   191e4:	ldm	lr!, {r0, r1, r2, r3}
   191e8:	stmia	ip!, {r0, r1, r2, r3}
   191ec:	ldm	lr!, {r0, r1, r2, r3}
   191f0:	stmia	ip!, {r0, r1, r2, r3}
   191f4:	ldm	lr, {r0, r1, r2, r3}
   191f8:	stm	ip, {r0, r1, r2, r3}
   191fc:	mov	r2, r7
   19200:	mov	r1, r6
   19204:	mov	r0, sp
   19208:	bl	18d90 <__assert_fail@plt+0x797c>
   1920c:	mov	r3, sp
   19210:	ldr	r2, [sp, #72]	; 0x48
   19214:	mov	r1, r5
   19218:	mov	r0, r4
   1921c:	bl	18b08 <__assert_fail@plt+0x76f4>
   19220:	add	sp, sp, #52	; 0x34
   19224:	pop	{r4, r5, r6, r7, pc}
   19228:	strdeq	sp, [r2], -r0
   1922c:	push	{lr}		; (str lr, [sp, #-4]!)
   19230:	sub	sp, sp, #12
   19234:	mvn	ip, #0
   19238:	str	ip, [sp]
   1923c:	bl	191c4 <__assert_fail@plt+0x7db0>
   19240:	add	sp, sp, #12
   19244:	pop	{pc}		; (ldr pc, [sp], #4)
   19248:	push	{r4, lr}
   1924c:	mov	r3, r2
   19250:	mov	r2, r1
   19254:	mov	r1, r0
   19258:	mov	r0, #0
   1925c:	bl	1922c <__assert_fail@plt+0x7e18>
   19260:	pop	{r4, pc}
   19264:	push	{lr}		; (str lr, [sp, #-4]!)
   19268:	sub	sp, sp, #12
   1926c:	str	r3, [sp]
   19270:	mov	r3, r2
   19274:	mov	r2, r1
   19278:	mov	r1, r0
   1927c:	mov	r0, #0
   19280:	bl	191c4 <__assert_fail@plt+0x7db0>
   19284:	add	sp, sp, #12
   19288:	pop	{pc}		; (ldr pc, [sp], #4)
   1928c:	push	{r4, lr}
   19290:	ldr	r3, [pc, #4]	; 1929c <__assert_fail@plt+0x7e88>
   19294:	bl	18b08 <__assert_fail@plt+0x76f4>
   19298:	pop	{r4, pc}
   1929c:	andeq	sp, r2, ip, ror r1
   192a0:	push	{r4, lr}
   192a4:	mov	r2, r1
   192a8:	mov	r1, r0
   192ac:	mov	r0, #0
   192b0:	bl	1928c <__assert_fail@plt+0x7e78>
   192b4:	pop	{r4, pc}
   192b8:	push	{r4, lr}
   192bc:	mvn	r2, #0
   192c0:	bl	1928c <__assert_fail@plt+0x7e78>
   192c4:	pop	{r4, pc}
   192c8:	push	{r4, lr}
   192cc:	mov	r1, r0
   192d0:	mov	r0, #0
   192d4:	bl	192b8 <__assert_fail@plt+0x7ea4>
   192d8:	pop	{r4, pc}
   192dc:	push	{r4, r5, r6, r7, r8, lr}
   192e0:	mov	r8, r0
   192e4:	mov	r7, r1
   192e8:	mov	r4, r2
   192ec:	ldr	r5, [pc, #88]	; 1934c <__assert_fail@plt+0x7f38>
   192f0:	b	192f8 <__assert_fail@plt+0x7ee4>
   192f4:	mov	r4, r5
   192f8:	mov	r2, r4
   192fc:	mov	r1, r7
   19300:	mov	r0, r8
   19304:	bl	110f0 <read@plt>
   19308:	subs	r6, r0, #0
   1930c:	bge	19344 <__assert_fail@plt+0x7f30>
   19310:	bl	112dc <__errno_location@plt>
   19314:	ldr	r3, [r0]
   19318:	cmp	r3, #4
   1931c:	beq	192f8 <__assert_fail@plt+0x7ee4>
   19320:	cmp	r4, r5
   19324:	movls	r4, #0
   19328:	movhi	r4, #1
   1932c:	cmp	r3, #22
   19330:	movne	r4, #0
   19334:	cmp	r4, #0
   19338:	bne	192f4 <__assert_fail@plt+0x7ee0>
   1933c:	mov	r0, r6
   19340:	pop	{r4, r5, r6, r7, r8, pc}
   19344:	mov	r0, r6
   19348:	pop	{r4, r5, r6, r7, r8, pc}
   1934c:	svcvc	0x00f00000	; IMB
   19350:	push	{r4, r5, r6, r7, r8, lr}
   19354:	mov	r4, r0
   19358:	cmp	r0, #2
   1935c:	bls	19368 <__assert_fail@plt+0x7f54>
   19360:	mov	r0, r4
   19364:	pop	{r4, r5, r6, r7, r8, pc}
   19368:	bl	1ac48 <__assert_fail@plt+0x9834>
   1936c:	mov	r6, r0
   19370:	bl	112dc <__errno_location@plt>
   19374:	mov	r5, r0
   19378:	ldr	r7, [r0]
   1937c:	mov	r0, r4
   19380:	bl	113fc <close@plt>
   19384:	str	r7, [r5]
   19388:	mov	r4, r6
   1938c:	b	19360 <__assert_fail@plt+0x7f4c>
   19390:	push	{r4, r5, r6, lr}
   19394:	sub	sp, sp, #32
   19398:	mov	r4, r0
   1939c:	ldr	r5, [sp, #48]	; 0x30
   193a0:	ldr	r6, [sp, #52]	; 0x34
   193a4:	cmp	r1, #0
   193a8:	beq	19460 <__assert_fail@plt+0x804c>
   193ac:	str	r3, [sp, #4]
   193b0:	str	r2, [sp]
   193b4:	mov	r3, r1
   193b8:	ldr	r2, [pc, #940]	; 1976c <__assert_fail@plt+0x8358>
   193bc:	mov	r1, #1
   193c0:	bl	11324 <__fprintf_chk@plt>
   193c4:	mov	r2, #5
   193c8:	ldr	r1, [pc, #928]	; 19770 <__assert_fail@plt+0x835c>
   193cc:	mov	r0, #0
   193d0:	bl	11174 <dcgettext@plt>
   193d4:	ldr	r3, [pc, #920]	; 19774 <__assert_fail@plt+0x8360>
   193d8:	str	r3, [sp]
   193dc:	mov	r3, r0
   193e0:	ldr	r2, [pc, #912]	; 19778 <__assert_fail@plt+0x8364>
   193e4:	mov	r1, #1
   193e8:	mov	r0, r4
   193ec:	bl	11324 <__fprintf_chk@plt>
   193f0:	mov	r1, r4
   193f4:	mov	r0, #10
   193f8:	bl	11168 <fputc_unlocked@plt>
   193fc:	mov	r2, #5
   19400:	ldr	r1, [pc, #884]	; 1977c <__assert_fail@plt+0x8368>
   19404:	mov	r0, #0
   19408:	bl	11174 <dcgettext@plt>
   1940c:	ldr	r3, [pc, #876]	; 19780 <__assert_fail@plt+0x836c>
   19410:	mov	r2, r0
   19414:	mov	r1, #1
   19418:	mov	r0, r4
   1941c:	bl	11324 <__fprintf_chk@plt>
   19420:	mov	r1, r4
   19424:	mov	r0, #10
   19428:	bl	11168 <fputc_unlocked@plt>
   1942c:	cmp	r6, #9
   19430:	ldrls	pc, [pc, r6, lsl #2]
   19434:	b	19704 <__assert_fail@plt+0x82f0>
   19438:	muleq	r1, ip, r4
   1943c:	andeq	r9, r1, r8, ror r4
   19440:	andeq	r9, r1, r4, lsr #9
   19444:	ldrdeq	r9, [r1], -r4
   19448:	andeq	r9, r1, ip, lsl #10
   1944c:	andeq	r9, r1, ip, asr #10
   19450:	muleq	r1, r4, r5
   19454:	andeq	r9, r1, r4, ror #11
   19458:	andeq	r9, r1, ip, lsr r6
   1945c:	muleq	r1, ip, r6
   19460:	str	r3, [sp]
   19464:	mov	r3, r2
   19468:	ldr	r2, [pc, #788]	; 19784 <__assert_fail@plt+0x8370>
   1946c:	mov	r1, #1
   19470:	bl	11324 <__fprintf_chk@plt>
   19474:	b	193c4 <__assert_fail@plt+0x7fb0>
   19478:	mov	r2, #5
   1947c:	ldr	r1, [pc, #772]	; 19788 <__assert_fail@plt+0x8374>
   19480:	mov	r0, #0
   19484:	bl	11174 <dcgettext@plt>
   19488:	ldr	r3, [r5]
   1948c:	mov	r2, r0
   19490:	mov	r1, #1
   19494:	mov	r0, r4
   19498:	bl	11324 <__fprintf_chk@plt>
   1949c:	add	sp, sp, #32
   194a0:	pop	{r4, r5, r6, pc}
   194a4:	mov	r2, #5
   194a8:	ldr	r1, [pc, #732]	; 1978c <__assert_fail@plt+0x8378>
   194ac:	mov	r0, #0
   194b0:	bl	11174 <dcgettext@plt>
   194b4:	ldr	r3, [r5]
   194b8:	ldr	r2, [r5, #4]
   194bc:	str	r2, [sp]
   194c0:	mov	r2, r0
   194c4:	mov	r1, #1
   194c8:	mov	r0, r4
   194cc:	bl	11324 <__fprintf_chk@plt>
   194d0:	b	1949c <__assert_fail@plt+0x8088>
   194d4:	mov	r2, #5
   194d8:	ldr	r1, [pc, #688]	; 19790 <__assert_fail@plt+0x837c>
   194dc:	mov	r0, #0
   194e0:	bl	11174 <dcgettext@plt>
   194e4:	ldr	r3, [r5]
   194e8:	ldr	r2, [r5, #8]
   194ec:	str	r2, [sp, #4]
   194f0:	ldr	r2, [r5, #4]
   194f4:	str	r2, [sp]
   194f8:	mov	r2, r0
   194fc:	mov	r1, #1
   19500:	mov	r0, r4
   19504:	bl	11324 <__fprintf_chk@plt>
   19508:	b	1949c <__assert_fail@plt+0x8088>
   1950c:	mov	r2, #5
   19510:	ldr	r1, [pc, #636]	; 19794 <__assert_fail@plt+0x8380>
   19514:	mov	r0, #0
   19518:	bl	11174 <dcgettext@plt>
   1951c:	ldr	r3, [r5]
   19520:	ldr	r2, [r5, #12]
   19524:	str	r2, [sp, #8]
   19528:	ldr	r2, [r5, #8]
   1952c:	str	r2, [sp, #4]
   19530:	ldr	r2, [r5, #4]
   19534:	str	r2, [sp]
   19538:	mov	r2, r0
   1953c:	mov	r1, #1
   19540:	mov	r0, r4
   19544:	bl	11324 <__fprintf_chk@plt>
   19548:	b	1949c <__assert_fail@plt+0x8088>
   1954c:	mov	r2, #5
   19550:	ldr	r1, [pc, #576]	; 19798 <__assert_fail@plt+0x8384>
   19554:	mov	r0, #0
   19558:	bl	11174 <dcgettext@plt>
   1955c:	ldr	r3, [r5]
   19560:	ldr	r2, [r5, #16]
   19564:	str	r2, [sp, #12]
   19568:	ldr	r2, [r5, #12]
   1956c:	str	r2, [sp, #8]
   19570:	ldr	r2, [r5, #8]
   19574:	str	r2, [sp, #4]
   19578:	ldr	r2, [r5, #4]
   1957c:	str	r2, [sp]
   19580:	mov	r2, r0
   19584:	mov	r1, #1
   19588:	mov	r0, r4
   1958c:	bl	11324 <__fprintf_chk@plt>
   19590:	b	1949c <__assert_fail@plt+0x8088>
   19594:	mov	r2, #5
   19598:	ldr	r1, [pc, #508]	; 1979c <__assert_fail@plt+0x8388>
   1959c:	mov	r0, #0
   195a0:	bl	11174 <dcgettext@plt>
   195a4:	ldr	r3, [r5]
   195a8:	ldr	r2, [r5, #20]
   195ac:	str	r2, [sp, #16]
   195b0:	ldr	r2, [r5, #16]
   195b4:	str	r2, [sp, #12]
   195b8:	ldr	r2, [r5, #12]
   195bc:	str	r2, [sp, #8]
   195c0:	ldr	r2, [r5, #8]
   195c4:	str	r2, [sp, #4]
   195c8:	ldr	r2, [r5, #4]
   195cc:	str	r2, [sp]
   195d0:	mov	r2, r0
   195d4:	mov	r1, #1
   195d8:	mov	r0, r4
   195dc:	bl	11324 <__fprintf_chk@plt>
   195e0:	b	1949c <__assert_fail@plt+0x8088>
   195e4:	mov	r2, #5
   195e8:	ldr	r1, [pc, #432]	; 197a0 <__assert_fail@plt+0x838c>
   195ec:	mov	r0, #0
   195f0:	bl	11174 <dcgettext@plt>
   195f4:	ldr	r3, [r5]
   195f8:	ldr	r2, [r5, #24]
   195fc:	str	r2, [sp, #20]
   19600:	ldr	r2, [r5, #20]
   19604:	str	r2, [sp, #16]
   19608:	ldr	r2, [r5, #16]
   1960c:	str	r2, [sp, #12]
   19610:	ldr	r2, [r5, #12]
   19614:	str	r2, [sp, #8]
   19618:	ldr	r2, [r5, #8]
   1961c:	str	r2, [sp, #4]
   19620:	ldr	r2, [r5, #4]
   19624:	str	r2, [sp]
   19628:	mov	r2, r0
   1962c:	mov	r1, #1
   19630:	mov	r0, r4
   19634:	bl	11324 <__fprintf_chk@plt>
   19638:	b	1949c <__assert_fail@plt+0x8088>
   1963c:	mov	r2, #5
   19640:	ldr	r1, [pc, #348]	; 197a4 <__assert_fail@plt+0x8390>
   19644:	mov	r0, #0
   19648:	bl	11174 <dcgettext@plt>
   1964c:	ldr	r3, [r5]
   19650:	ldr	r2, [r5, #28]
   19654:	str	r2, [sp, #24]
   19658:	ldr	r2, [r5, #24]
   1965c:	str	r2, [sp, #20]
   19660:	ldr	r2, [r5, #20]
   19664:	str	r2, [sp, #16]
   19668:	ldr	r2, [r5, #16]
   1966c:	str	r2, [sp, #12]
   19670:	ldr	r2, [r5, #12]
   19674:	str	r2, [sp, #8]
   19678:	ldr	r2, [r5, #8]
   1967c:	str	r2, [sp, #4]
   19680:	ldr	r2, [r5, #4]
   19684:	str	r2, [sp]
   19688:	mov	r2, r0
   1968c:	mov	r1, #1
   19690:	mov	r0, r4
   19694:	bl	11324 <__fprintf_chk@plt>
   19698:	b	1949c <__assert_fail@plt+0x8088>
   1969c:	mov	r2, #5
   196a0:	ldr	r1, [pc, #256]	; 197a8 <__assert_fail@plt+0x8394>
   196a4:	mov	r0, #0
   196a8:	bl	11174 <dcgettext@plt>
   196ac:	ldr	r3, [r5]
   196b0:	ldr	r2, [r5, #32]
   196b4:	str	r2, [sp, #28]
   196b8:	ldr	r2, [r5, #28]
   196bc:	str	r2, [sp, #24]
   196c0:	ldr	r2, [r5, #24]
   196c4:	str	r2, [sp, #20]
   196c8:	ldr	r2, [r5, #20]
   196cc:	str	r2, [sp, #16]
   196d0:	ldr	r2, [r5, #16]
   196d4:	str	r2, [sp, #12]
   196d8:	ldr	r2, [r5, #12]
   196dc:	str	r2, [sp, #8]
   196e0:	ldr	r2, [r5, #8]
   196e4:	str	r2, [sp, #4]
   196e8:	ldr	r2, [r5, #4]
   196ec:	str	r2, [sp]
   196f0:	mov	r2, r0
   196f4:	mov	r1, #1
   196f8:	mov	r0, r4
   196fc:	bl	11324 <__fprintf_chk@plt>
   19700:	b	1949c <__assert_fail@plt+0x8088>
   19704:	mov	r2, #5
   19708:	ldr	r1, [pc, #156]	; 197ac <__assert_fail@plt+0x8398>
   1970c:	mov	r0, #0
   19710:	bl	11174 <dcgettext@plt>
   19714:	ldr	r3, [r5]
   19718:	ldr	r2, [r5, #32]
   1971c:	str	r2, [sp, #28]
   19720:	ldr	r2, [r5, #28]
   19724:	str	r2, [sp, #24]
   19728:	ldr	r2, [r5, #24]
   1972c:	str	r2, [sp, #20]
   19730:	ldr	r2, [r5, #20]
   19734:	str	r2, [sp, #16]
   19738:	ldr	r2, [r5, #16]
   1973c:	str	r2, [sp, #12]
   19740:	ldr	r2, [r5, #12]
   19744:	str	r2, [sp, #8]
   19748:	ldr	r2, [r5, #8]
   1974c:	str	r2, [sp, #4]
   19750:	ldr	r2, [r5, #4]
   19754:	str	r2, [sp]
   19758:	mov	r2, r0
   1975c:	mov	r1, #1
   19760:	mov	r0, r4
   19764:	bl	11324 <__fprintf_chk@plt>
   19768:	b	1949c <__assert_fail@plt+0x8088>
   1976c:	andeq	ip, r1, r8, ror fp
   19770:	andeq	ip, r1, ip, lsl #23
   19774:	andeq	r0, r0, r6, ror #15
   19778:	andeq	ip, r1, r4, ror #28
   1977c:	muleq	r1, r0, fp
   19780:	andeq	ip, r1, ip, lsr ip
   19784:	andeq	ip, r1, r4, lsl #23
   19788:	andeq	ip, r1, r0, ror #24
   1978c:	andeq	ip, r1, r0, ror ip
   19790:	andeq	ip, r1, r8, lsl #25
   19794:	andeq	ip, r1, r4, lsr #25
   19798:	andeq	ip, r1, r4, asr #25
   1979c:	andeq	ip, r1, r8, ror #25
   197a0:	andeq	ip, r1, r0, lsl sp
   197a4:	andeq	ip, r1, ip, lsr sp
   197a8:	andeq	ip, r1, ip, ror #26
   197ac:	andeq	ip, r1, r0, lsr #27
   197b0:	push	{r4, r5, lr}
   197b4:	sub	sp, sp, #12
   197b8:	ldr	r5, [sp, #24]
   197bc:	ldr	ip, [r5]
   197c0:	cmp	ip, #0
   197c4:	beq	197f4 <__assert_fail@plt+0x83e0>
   197c8:	mov	lr, r5
   197cc:	mov	ip, #0
   197d0:	add	ip, ip, #1
   197d4:	ldr	r4, [lr, #4]!
   197d8:	cmp	r4, #0
   197dc:	bne	197d0 <__assert_fail@plt+0x83bc>
   197e0:	str	ip, [sp, #4]
   197e4:	str	r5, [sp]
   197e8:	bl	19390 <__assert_fail@plt+0x7f7c>
   197ec:	add	sp, sp, #12
   197f0:	pop	{r4, r5, pc}
   197f4:	mov	ip, #0
   197f8:	b	197e0 <__assert_fail@plt+0x83cc>
   197fc:	push	{r4, r5, lr}
   19800:	sub	sp, sp, #52	; 0x34
   19804:	ldr	r4, [sp, #64]	; 0x40
   19808:	sub	r4, r4, #4
   1980c:	add	r5, sp, #4
   19810:	mov	ip, #0
   19814:	ldr	lr, [r4, #4]!
   19818:	str	lr, [r5, #4]!
   1981c:	cmp	lr, #0
   19820:	beq	19830 <__assert_fail@plt+0x841c>
   19824:	add	ip, ip, #1
   19828:	cmp	ip, #10
   1982c:	bne	19814 <__assert_fail@plt+0x8400>
   19830:	str	ip, [sp, #4]
   19834:	add	ip, sp, #8
   19838:	str	ip, [sp]
   1983c:	bl	19390 <__assert_fail@plt+0x7f7c>
   19840:	add	sp, sp, #52	; 0x34
   19844:	pop	{r4, r5, pc}
   19848:	push	{r3}		; (str r3, [sp, #-4]!)
   1984c:	push	{lr}		; (str lr, [sp, #-4]!)
   19850:	sub	sp, sp, #16
   19854:	add	r3, sp, #24
   19858:	str	r3, [sp, #12]
   1985c:	str	r3, [sp]
   19860:	ldr	r3, [sp, #20]
   19864:	bl	197fc <__assert_fail@plt+0x83e8>
   19868:	add	sp, sp, #16
   1986c:	pop	{lr}		; (ldr lr, [sp], #4)
   19870:	add	sp, sp, #4
   19874:	bx	lr
   19878:	push	{r4, lr}
   1987c:	ldr	r3, [pc, #112]	; 198f4 <__assert_fail@plt+0x84e0>
   19880:	ldr	r1, [r3]
   19884:	mov	r0, #10
   19888:	bl	11168 <fputc_unlocked@plt>
   1988c:	mov	r2, #5
   19890:	ldr	r1, [pc, #96]	; 198f8 <__assert_fail@plt+0x84e4>
   19894:	mov	r0, #0
   19898:	bl	11174 <dcgettext@plt>
   1989c:	ldr	r2, [pc, #88]	; 198fc <__assert_fail@plt+0x84e8>
   198a0:	mov	r1, r0
   198a4:	mov	r0, #1
   198a8:	bl	11300 <__printf_chk@plt>
   198ac:	mov	r2, #5
   198b0:	ldr	r1, [pc, #72]	; 19900 <__assert_fail@plt+0x84ec>
   198b4:	mov	r0, #0
   198b8:	bl	11174 <dcgettext@plt>
   198bc:	ldr	r3, [pc, #64]	; 19904 <__assert_fail@plt+0x84f0>
   198c0:	ldr	r2, [pc, #64]	; 19908 <__assert_fail@plt+0x84f4>
   198c4:	mov	r1, r0
   198c8:	mov	r0, #1
   198cc:	bl	11300 <__printf_chk@plt>
   198d0:	mov	r2, #5
   198d4:	ldr	r1, [pc, #48]	; 1990c <__assert_fail@plt+0x84f8>
   198d8:	mov	r0, #0
   198dc:	bl	11174 <dcgettext@plt>
   198e0:	ldr	r2, [pc, #40]	; 19910 <__assert_fail@plt+0x84fc>
   198e4:	mov	r1, r0
   198e8:	mov	r0, #1
   198ec:	bl	11300 <__printf_chk@plt>
   198f0:	pop	{r4, pc}
   198f4:	andeq	sp, r2, r4, asr #3
   198f8:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   198fc:	strdeq	ip, [r1], -r0
   19900:	andeq	ip, r1, r8, lsl #28
   19904:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   19908:	andeq	ip, r1, r4, lsr #6
   1990c:	andeq	ip, r1, ip, lsl lr
   19910:	andeq	ip, r1, r4, asr #28
   19914:	push	{r4, lr}
   19918:	bl	1a750 <__assert_fail@plt+0x933c>
   1991c:	cmp	r0, #0
   19920:	popne	{r4, pc}
   19924:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19928:	push	{r4, lr}
   1992c:	bl	1a750 <__assert_fail@plt+0x933c>
   19930:	cmp	r0, #0
   19934:	popne	{r4, pc}
   19938:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   1993c:	push	{r4, lr}
   19940:	bl	19914 <__assert_fail@plt+0x8500>
   19944:	pop	{r4, pc}
   19948:	push	{r4, r5, r6, lr}
   1994c:	mov	r5, r0
   19950:	mov	r4, r1
   19954:	bl	1a780 <__assert_fail@plt+0x936c>
   19958:	cmp	r0, #0
   1995c:	popne	{r4, r5, r6, pc}
   19960:	adds	r4, r4, #0
   19964:	movne	r4, #1
   19968:	cmp	r5, #0
   1996c:	orreq	r4, r4, #1
   19970:	cmp	r4, #0
   19974:	popeq	{r4, r5, r6, pc}
   19978:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   1997c:	push	{r4, lr}
   19980:	cmp	r1, #0
   19984:	orreq	r1, r1, #1
   19988:	bl	1a780 <__assert_fail@plt+0x936c>
   1998c:	cmp	r0, #0
   19990:	popne	{r4, pc}
   19994:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19998:	push	{r4, r5, r6, lr}
   1999c:	mov	r6, r0
   199a0:	mov	r5, r1
   199a4:	mov	r4, r2
   199a8:	bl	1abfc <__assert_fail@plt+0x97e8>
   199ac:	cmp	r0, #0
   199b0:	popne	{r4, r5, r6, pc}
   199b4:	cmp	r6, #0
   199b8:	beq	199c8 <__assert_fail@plt+0x85b4>
   199bc:	cmp	r5, #0
   199c0:	cmpne	r4, #0
   199c4:	popeq	{r4, r5, r6, pc}
   199c8:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   199cc:	push	{r4, lr}
   199d0:	bl	19998 <__assert_fail@plt+0x8584>
   199d4:	pop	{r4, pc}
   199d8:	push	{r4, lr}
   199dc:	mov	ip, r1
   199e0:	mov	r3, r2
   199e4:	cmp	r2, #0
   199e8:	cmpne	r1, #0
   199ec:	moveq	r3, #1
   199f0:	moveq	ip, r3
   199f4:	mov	r2, r3
   199f8:	mov	r1, ip
   199fc:	bl	1abfc <__assert_fail@plt+0x97e8>
   19a00:	cmp	r0, #0
   19a04:	popne	{r4, pc}
   19a08:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19a0c:	push	{r4, lr}
   19a10:	mov	r2, r1
   19a14:	mov	r1, r0
   19a18:	mov	r0, #0
   19a1c:	bl	19998 <__assert_fail@plt+0x8584>
   19a20:	pop	{r4, pc}
   19a24:	push	{r4, lr}
   19a28:	mov	r2, r1
   19a2c:	mov	r1, r0
   19a30:	mov	r0, #0
   19a34:	bl	199d8 <__assert_fail@plt+0x85c4>
   19a38:	pop	{r4, pc}
   19a3c:	push	{r4, r5, r6, r7, r8, lr}
   19a40:	mov	r5, r1
   19a44:	mov	r6, r2
   19a48:	ldr	r4, [r1]
   19a4c:	subs	r7, r0, #0
   19a50:	beq	19a6c <__assert_fail@plt+0x8658>
   19a54:	lsr	r2, r4, #1
   19a58:	add	r3, r2, #1
   19a5c:	mvn	r3, r3
   19a60:	cmp	r4, r3
   19a64:	bls	19a90 <__assert_fail@plt+0x867c>
   19a68:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19a6c:	cmp	r4, #0
   19a70:	bne	19a98 <__assert_fail@plt+0x8684>
   19a74:	mov	r1, r2
   19a78:	mov	r0, #64	; 0x40
   19a7c:	bl	1ad64 <__assert_fail@plt+0x9950>
   19a80:	cmp	r0, #0
   19a84:	movne	r4, r0
   19a88:	addeq	r4, r0, #1
   19a8c:	b	19a98 <__assert_fail@plt+0x8684>
   19a90:	add	r4, r4, #1
   19a94:	add	r4, r4, r2
   19a98:	mov	r2, r6
   19a9c:	mov	r1, r4
   19aa0:	mov	r0, r7
   19aa4:	bl	19998 <__assert_fail@plt+0x8584>
   19aa8:	str	r4, [r5]
   19aac:	pop	{r4, r5, r6, r7, r8, pc}
   19ab0:	push	{r4, lr}
   19ab4:	mov	r2, #1
   19ab8:	bl	19a3c <__assert_fail@plt+0x8628>
   19abc:	pop	{r4, pc}
   19ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19ac4:	sub	sp, sp, #12
   19ac8:	mov	fp, r0
   19acc:	mov	sl, r1
   19ad0:	mov	r9, r2
   19ad4:	mov	r7, r3
   19ad8:	ldr	r6, [sp, #48]	; 0x30
   19adc:	ldr	r5, [r1]
   19ae0:	asrs	r4, r5, #1
   19ae4:	bmi	19c40 <__assert_fail@plt+0x882c>
   19ae8:	cmp	r5, #0
   19aec:	blt	19c54 <__assert_fail@plt+0x8840>
   19af0:	mvn	r3, #-2147483648	; 0x80000000
   19af4:	sub	r3, r3, r4
   19af8:	cmp	r5, r3
   19afc:	movle	r3, #0
   19b00:	movgt	r3, #1
   19b04:	cmp	r3, #0
   19b08:	addeq	r4, r4, r5
   19b0c:	mvnne	r4, #-2147483648	; 0x80000000
   19b10:	mvn	r8, r7
   19b14:	lsr	r8, r8, #31
   19b18:	cmp	r7, r4
   19b1c:	movge	r3, #0
   19b20:	andlt	r3, r8, #1
   19b24:	cmp	r3, #0
   19b28:	movne	r4, r7
   19b2c:	cmp	r6, #0
   19b30:	blt	19c68 <__assert_fail@plt+0x8854>
   19b34:	cmp	r6, #0
   19b38:	beq	19d14 <__assert_fail@plt+0x8900>
   19b3c:	cmp	r4, #0
   19b40:	blt	19cc4 <__assert_fail@plt+0x88b0>
   19b44:	mov	r1, r6
   19b48:	mvn	r0, #-2147483648	; 0x80000000
   19b4c:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19b50:	cmp	r0, r4
   19b54:	movge	r0, #0
   19b58:	movlt	r0, #1
   19b5c:	cmp	r0, #0
   19b60:	mvnne	r3, #-2147483648	; 0x80000000
   19b64:	strne	r3, [sp, #4]
   19b68:	beq	19cfc <__assert_fail@plt+0x88e8>
   19b6c:	mov	r1, r6
   19b70:	ldr	r0, [sp, #4]
   19b74:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19b78:	mov	r4, r0
   19b7c:	mov	r1, r6
   19b80:	ldr	r0, [sp, #4]
   19b84:	bl	1b190 <__assert_fail@plt+0x9d7c>
   19b88:	ldr	r3, [sp, #4]
   19b8c:	sub	r1, r3, r1
   19b90:	cmp	fp, #0
   19b94:	moveq	r3, #0
   19b98:	streq	r3, [sl]
   19b9c:	sub	r3, r4, r5
   19ba0:	cmp	r3, r9
   19ba4:	bge	19c2c <__assert_fail@plt+0x8818>
   19ba8:	cmp	r9, #0
   19bac:	blt	19d20 <__assert_fail@plt+0x890c>
   19bb0:	cmp	r5, #0
   19bb4:	blt	19d34 <__assert_fail@plt+0x8920>
   19bb8:	mvn	r3, #-2147483648	; 0x80000000
   19bbc:	sub	r3, r3, r9
   19bc0:	cmp	r5, r3
   19bc4:	movle	r3, #0
   19bc8:	movgt	r3, #1
   19bcc:	cmp	r3, #0
   19bd0:	bne	19ddc <__assert_fail@plt+0x89c8>
   19bd4:	add	r5, r5, r9
   19bd8:	mov	r4, r5
   19bdc:	cmp	r7, r5
   19be0:	movge	r7, #0
   19be4:	andlt	r7, r8, #1
   19be8:	cmp	r7, #0
   19bec:	bne	19ddc <__assert_fail@plt+0x89c8>
   19bf0:	cmp	r6, #0
   19bf4:	blt	19d48 <__assert_fail@plt+0x8934>
   19bf8:	cmp	r6, #0
   19bfc:	beq	19c28 <__assert_fail@plt+0x8814>
   19c00:	cmp	r5, #0
   19c04:	blt	19da4 <__assert_fail@plt+0x8990>
   19c08:	mov	r1, r6
   19c0c:	mvn	r0, #-2147483648	; 0x80000000
   19c10:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19c14:	cmp	r5, r0
   19c18:	movle	r0, #0
   19c1c:	movgt	r0, #1
   19c20:	cmp	r0, #0
   19c24:	bne	19ddc <__assert_fail@plt+0x89c8>
   19c28:	mul	r1, r5, r6
   19c2c:	mov	r0, fp
   19c30:	bl	19948 <__assert_fail@plt+0x8534>
   19c34:	str	r4, [sl]
   19c38:	add	sp, sp, #12
   19c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c40:	rsb	r3, r4, #-2147483648	; 0x80000000
   19c44:	cmp	r5, r3
   19c48:	movge	r3, #0
   19c4c:	movlt	r3, #1
   19c50:	b	19b04 <__assert_fail@plt+0x86f0>
   19c54:	rsb	r3, r5, #-2147483648	; 0x80000000
   19c58:	cmp	r4, r3
   19c5c:	movge	r3, #0
   19c60:	movlt	r3, #1
   19c64:	b	19b04 <__assert_fail@plt+0x86f0>
   19c68:	cmp	r4, #0
   19c6c:	blt	19c94 <__assert_fail@plt+0x8880>
   19c70:	cmn	r6, #1
   19c74:	beq	19cb0 <__assert_fail@plt+0x889c>
   19c78:	mov	r1, r6
   19c7c:	mov	r0, #-2147483648	; 0x80000000
   19c80:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19c84:	cmp	r0, r4
   19c88:	movge	r0, #0
   19c8c:	movlt	r0, #1
   19c90:	b	19b5c <__assert_fail@plt+0x8748>
   19c94:	mov	r1, r6
   19c98:	mvn	r0, #-2147483648	; 0x80000000
   19c9c:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19ca0:	cmp	r0, r4
   19ca4:	movle	r0, #0
   19ca8:	movgt	r0, #1
   19cac:	b	19b5c <__assert_fail@plt+0x8748>
   19cb0:	add	r0, r4, #-2147483648	; 0x80000000
   19cb4:	cmp	r0, #0
   19cb8:	movle	r0, #0
   19cbc:	movgt	r0, #1
   19cc0:	b	19b5c <__assert_fail@plt+0x8748>
   19cc4:	cmn	r4, #1
   19cc8:	beq	19ce8 <__assert_fail@plt+0x88d4>
   19ccc:	mov	r1, r4
   19cd0:	mov	r0, #-2147483648	; 0x80000000
   19cd4:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19cd8:	cmp	r6, r0
   19cdc:	movle	r0, #0
   19ce0:	movgt	r0, #1
   19ce4:	b	19b5c <__assert_fail@plt+0x8748>
   19ce8:	add	r0, r6, #-2147483648	; 0x80000000
   19cec:	cmp	r0, #0
   19cf0:	movle	r0, #0
   19cf4:	movgt	r0, #1
   19cf8:	b	19b5c <__assert_fail@plt+0x8748>
   19cfc:	mul	r1, r6, r4
   19d00:	cmp	r1, #63	; 0x3f
   19d04:	movle	r3, #64	; 0x40
   19d08:	strle	r3, [sp, #4]
   19d0c:	bgt	19b90 <__assert_fail@plt+0x877c>
   19d10:	b	19b6c <__assert_fail@plt+0x8758>
   19d14:	mov	r3, #64	; 0x40
   19d18:	str	r3, [sp, #4]
   19d1c:	b	19b6c <__assert_fail@plt+0x8758>
   19d20:	rsb	r3, r9, #-2147483648	; 0x80000000
   19d24:	cmp	r5, r3
   19d28:	movge	r3, #0
   19d2c:	movlt	r3, #1
   19d30:	b	19bcc <__assert_fail@plt+0x87b8>
   19d34:	rsb	r3, r5, #-2147483648	; 0x80000000
   19d38:	cmp	r9, r3
   19d3c:	movge	r3, #0
   19d40:	movlt	r3, #1
   19d44:	b	19bcc <__assert_fail@plt+0x87b8>
   19d48:	cmp	r5, #0
   19d4c:	blt	19d74 <__assert_fail@plt+0x8960>
   19d50:	cmn	r6, #1
   19d54:	beq	19d90 <__assert_fail@plt+0x897c>
   19d58:	mov	r1, r6
   19d5c:	mov	r0, #-2147483648	; 0x80000000
   19d60:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19d64:	cmp	r5, r0
   19d68:	movle	r0, #0
   19d6c:	movgt	r0, #1
   19d70:	b	19c20 <__assert_fail@plt+0x880c>
   19d74:	mov	r1, r6
   19d78:	mvn	r0, #-2147483648	; 0x80000000
   19d7c:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19d80:	cmp	r5, r0
   19d84:	movge	r0, #0
   19d88:	movlt	r0, #1
   19d8c:	b	19c20 <__assert_fail@plt+0x880c>
   19d90:	add	r0, r5, #-2147483648	; 0x80000000
   19d94:	cmp	r0, #0
   19d98:	movle	r0, #0
   19d9c:	movgt	r0, #1
   19da0:	b	19c20 <__assert_fail@plt+0x880c>
   19da4:	cmn	r5, #1
   19da8:	beq	19dc8 <__assert_fail@plt+0x89b4>
   19dac:	mov	r1, r5
   19db0:	mov	r0, #-2147483648	; 0x80000000
   19db4:	bl	1af70 <__assert_fail@plt+0x9b5c>
   19db8:	cmp	r6, r0
   19dbc:	movle	r0, #0
   19dc0:	movgt	r0, #1
   19dc4:	b	19c20 <__assert_fail@plt+0x880c>
   19dc8:	add	r0, r6, #-2147483648	; 0x80000000
   19dcc:	cmp	r0, #0
   19dd0:	movle	r0, #0
   19dd4:	movgt	r0, #1
   19dd8:	b	19c20 <__assert_fail@plt+0x880c>
   19ddc:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19de0:	push	{r4, lr}
   19de4:	bl	1a700 <__assert_fail@plt+0x92ec>
   19de8:	cmp	r0, #0
   19dec:	popne	{r4, pc}
   19df0:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19df4:	push	{r4, lr}
   19df8:	mov	r1, #1
   19dfc:	bl	19de0 <__assert_fail@plt+0x89cc>
   19e00:	pop	{r4, pc}
   19e04:	push	{r4, lr}
   19e08:	bl	1a700 <__assert_fail@plt+0x92ec>
   19e0c:	cmp	r0, #0
   19e10:	popne	{r4, pc}
   19e14:	bl	19eb8 <__assert_fail@plt+0x8aa4>
   19e18:	push	{r4, lr}
   19e1c:	mov	r1, #1
   19e20:	bl	19e04 <__assert_fail@plt+0x89f0>
   19e24:	pop	{r4, pc}
   19e28:	push	{r4, r5, r6, lr}
   19e2c:	mov	r5, r0
   19e30:	mov	r4, r1
   19e34:	mov	r0, r1
   19e38:	bl	19914 <__assert_fail@plt+0x8500>
   19e3c:	mov	r2, r4
   19e40:	mov	r1, r5
   19e44:	bl	1112c <memcpy@plt>
   19e48:	pop	{r4, r5, r6, pc}
   19e4c:	push	{r4, r5, r6, lr}
   19e50:	mov	r5, r0
   19e54:	mov	r4, r1
   19e58:	mov	r0, r1
   19e5c:	bl	19928 <__assert_fail@plt+0x8514>
   19e60:	mov	r2, r4
   19e64:	mov	r1, r5
   19e68:	bl	1112c <memcpy@plt>
   19e6c:	pop	{r4, r5, r6, pc}
   19e70:	push	{r4, r5, r6, lr}
   19e74:	mov	r5, r0
   19e78:	mov	r4, r1
   19e7c:	add	r0, r1, #1
   19e80:	bl	19928 <__assert_fail@plt+0x8514>
   19e84:	mov	r2, #0
   19e88:	strb	r2, [r0, r4]
   19e8c:	mov	r2, r4
   19e90:	mov	r1, r5
   19e94:	bl	1112c <memcpy@plt>
   19e98:	pop	{r4, r5, r6, pc}
   19e9c:	push	{r4, lr}
   19ea0:	mov	r4, r0
   19ea4:	bl	112a0 <strlen@plt>
   19ea8:	add	r1, r0, #1
   19eac:	mov	r0, r4
   19eb0:	bl	19e28 <__assert_fail@plt+0x8a14>
   19eb4:	pop	{r4, pc}
   19eb8:	push	{r4, lr}
   19ebc:	ldr	r3, [pc, #40]	; 19eec <__assert_fail@plt+0x8ad8>
   19ec0:	ldr	r4, [r3]
   19ec4:	mov	r2, #5
   19ec8:	ldr	r1, [pc, #32]	; 19ef0 <__assert_fail@plt+0x8adc>
   19ecc:	mov	r0, #0
   19ed0:	bl	11174 <dcgettext@plt>
   19ed4:	mov	r3, r0
   19ed8:	ldr	r2, [pc, #20]	; 19ef4 <__assert_fail@plt+0x8ae0>
   19edc:	mov	r1, #0
   19ee0:	mov	r0, r4
   19ee4:	bl	1121c <error@plt>
   19ee8:	bl	113f0 <abort@plt>
   19eec:	andeq	sp, r2, r8, ror #2
   19ef0:	muleq	r1, r4, lr
   19ef4:	andeq	ip, r1, r8, lsl #8
   19ef8:	push	{r4, r5, r6, r7, lr}
   19efc:	sub	sp, sp, #20
   19f00:	mov	r7, r0
   19f04:	mov	r4, r2
   19f08:	mov	r5, r3
   19f0c:	ldr	r6, [sp, #56]	; 0x38
   19f10:	ldr	r3, [sp, #48]	; 0x30
   19f14:	str	r3, [sp]
   19f18:	add	r3, sp, #8
   19f1c:	mov	r2, r1
   19f20:	mov	r1, #0
   19f24:	bl	1a280 <__assert_fail@plt+0x8e6c>
   19f28:	cmp	r0, #0
   19f2c:	bne	19fac <__assert_fail@plt+0x8b98>
   19f30:	ldrd	r0, [sp, #8]
   19f34:	ldrd	r2, [sp, #40]	; 0x28
   19f38:	cmp	r1, r3
   19f3c:	cmpeq	r0, r2
   19f40:	movhi	r3, #1
   19f44:	movls	r3, #0
   19f48:	cmp	r1, r5
   19f4c:	cmpeq	r0, r4
   19f50:	orrcc	r3, r3, #1
   19f54:	cmp	r3, #0
   19f58:	beq	1a024 <__assert_fail@plt+0x8c10>
   19f5c:	mvn	r2, #-1073741824	; 0xc0000000
   19f60:	mov	r3, #0
   19f64:	cmp	r1, r3
   19f68:	cmpeq	r0, r2
   19f6c:	bls	19f9c <__assert_fail@plt+0x8b88>
   19f70:	bl	112dc <__errno_location@plt>
   19f74:	mov	r3, #75	; 0x4b
   19f78:	str	r3, [r0]
   19f7c:	cmp	r6, #0
   19f80:	bne	19ffc <__assert_fail@plt+0x8be8>
   19f84:	mov	r6, #1
   19f88:	bl	112dc <__errno_location@plt>
   19f8c:	ldr	r4, [r0]
   19f90:	cmp	r4, #22
   19f94:	moveq	r4, #0
   19f98:	b	1a004 <__assert_fail@plt+0x8bf0>
   19f9c:	bl	112dc <__errno_location@plt>
   19fa0:	mov	r3, #34	; 0x22
   19fa4:	str	r3, [r0]
   19fa8:	b	19f7c <__assert_fail@plt+0x8b68>
   19fac:	cmp	r0, #1
   19fb0:	beq	19fc8 <__assert_fail@plt+0x8bb4>
   19fb4:	cmp	r0, #3
   19fb8:	beq	19fec <__assert_fail@plt+0x8bd8>
   19fbc:	cmp	r6, #0
   19fc0:	moveq	r6, #1
   19fc4:	b	19f88 <__assert_fail@plt+0x8b74>
   19fc8:	bl	112dc <__errno_location@plt>
   19fcc:	mov	r3, #75	; 0x4b
   19fd0:	str	r3, [r0]
   19fd4:	cmp	r6, #0
   19fd8:	bne	19f88 <__assert_fail@plt+0x8b74>
   19fdc:	bl	112dc <__errno_location@plt>
   19fe0:	ldr	r4, [r0]
   19fe4:	mov	r6, #1
   19fe8:	b	1a004 <__assert_fail@plt+0x8bf0>
   19fec:	bl	112dc <__errno_location@plt>
   19ff0:	mov	r3, #0
   19ff4:	str	r3, [r0]
   19ff8:	b	19fd4 <__assert_fail@plt+0x8bc0>
   19ffc:	bl	112dc <__errno_location@plt>
   1a000:	ldr	r4, [r0]
   1a004:	mov	r0, r7
   1a008:	bl	192c8 <__assert_fail@plt+0x7eb4>
   1a00c:	str	r0, [sp]
   1a010:	ldr	r3, [sp, #52]	; 0x34
   1a014:	ldr	r2, [pc, #16]	; 1a02c <__assert_fail@plt+0x8c18>
   1a018:	mov	r1, r4
   1a01c:	mov	r0, r6
   1a020:	bl	1121c <error@plt>
   1a024:	add	sp, sp, #20
   1a028:	pop	{r4, r5, r6, r7, pc}
   1a02c:	andeq	ip, r1, r4, lsl #8
   1a030:	push	{r4, r5, lr}
   1a034:	sub	sp, sp, #28
   1a038:	ldr	r1, [sp, #56]	; 0x38
   1a03c:	str	r1, [sp, #16]
   1a040:	ldr	r1, [sp, #52]	; 0x34
   1a044:	str	r1, [sp, #12]
   1a048:	ldr	r1, [sp, #48]	; 0x30
   1a04c:	str	r1, [sp, #8]
   1a050:	ldrd	r4, [sp, #40]	; 0x28
   1a054:	strd	r4, [sp]
   1a058:	mov	r1, #10
   1a05c:	bl	19ef8 <__assert_fail@plt+0x8ae4>
   1a060:	add	sp, sp, #28
   1a064:	pop	{r4, r5, pc}
   1a068:	push	{r4, r5, lr}
   1a06c:	vpush	{d8}
   1a070:	sub	sp, sp, #12
   1a074:	vmov.f64	d8, d0
   1a078:	vldr	d7, [pc, #104]	; 1a0e8 <__assert_fail@plt+0x8cd4>
   1a07c:	vcmpe.f64	d0, d7
   1a080:	vmrs	APSR_nzcv, fpscr
   1a084:	blt	1a09c <__assert_fail@plt+0x8c88>
   1a088:	bl	110e4 <pause@plt>
   1a08c:	bl	112dc <__errno_location@plt>
   1a090:	ldr	r3, [r0]
   1a094:	cmp	r3, #4
   1a098:	beq	1a088 <__assert_fail@plt+0x8c74>
   1a09c:	vmov.f64	d0, d8
   1a0a0:	mov	r0, sp
   1a0a4:	bl	1a8d8 <__assert_fail@plt+0x94c4>
   1a0a8:	bl	112dc <__errno_location@plt>
   1a0ac:	mov	r4, r0
   1a0b0:	mov	r5, #0
   1a0b4:	str	r5, [r4]
   1a0b8:	mov	r1, sp
   1a0bc:	mov	r0, sp
   1a0c0:	bl	11114 <nanosleep@plt>
   1a0c4:	cmp	r0, #0
   1a0c8:	beq	1a0dc <__assert_fail@plt+0x8cc8>
   1a0cc:	ldr	r3, [r4]
   1a0d0:	bics	r3, r3, #4
   1a0d4:	beq	1a0b4 <__assert_fail@plt+0x8ca0>
   1a0d8:	mvn	r0, #0
   1a0dc:	add	sp, sp, #12
   1a0e0:	vpop	{d8}
   1a0e4:	pop	{r4, r5, pc}
   1a0e8:	andeq	r0, r0, r0
   1a0ec:	mvnmi	r0, r0
   1a0f0:	push	{r4, r5, r6, r7, r8, lr}
   1a0f4:	sub	sp, sp, #8
   1a0f8:	mov	r5, r0
   1a0fc:	mov	r4, r1
   1a100:	mov	r7, r2
   1a104:	mov	r8, r3
   1a108:	bl	112dc <__errno_location@plt>
   1a10c:	mov	r6, r0
   1a110:	mov	r3, #0
   1a114:	str	r3, [r0]
   1a118:	add	r1, sp, #4
   1a11c:	mov	r0, r5
   1a120:	blx	r8
   1a124:	ldr	r3, [sp, #4]
   1a128:	cmp	r5, r3
   1a12c:	beq	1a190 <__assert_fail@plt+0x8d7c>
   1a130:	cmp	r4, #0
   1a134:	beq	1a16c <__assert_fail@plt+0x8d58>
   1a138:	vcmp.f64	d0, #0.0
   1a13c:	vmrs	APSR_nzcv, fpscr
   1a140:	moveq	r0, #1
   1a144:	beq	1a15c <__assert_fail@plt+0x8d48>
   1a148:	ldr	r0, [r6]
   1a14c:	subs	r0, r0, #34	; 0x22
   1a150:	movne	r0, #1
   1a154:	cmp	r4, #0
   1a158:	beq	1a160 <__assert_fail@plt+0x8d4c>
   1a15c:	str	r3, [r4]
   1a160:	vstr	d0, [r7]
   1a164:	add	sp, sp, #8
   1a168:	pop	{r4, r5, r6, r7, r8, pc}
   1a16c:	ldrb	r2, [r3]
   1a170:	cmp	r2, #0
   1a174:	movne	r0, #0
   1a178:	bne	1a160 <__assert_fail@plt+0x8d4c>
   1a17c:	vcmp.f64	d0, #0.0
   1a180:	vmrs	APSR_nzcv, fpscr
   1a184:	bne	1a148 <__assert_fail@plt+0x8d34>
   1a188:	mov	r0, #1
   1a18c:	b	1a160 <__assert_fail@plt+0x8d4c>
   1a190:	mov	r0, #0
   1a194:	b	1a154 <__assert_fail@plt+0x8d40>
   1a198:	push	{r4, r5, r6, lr}
   1a19c:	mov	r5, r0
   1a1a0:	subs	r4, r1, #0
   1a1a4:	blt	1a1f8 <__assert_fail@plt+0x8de4>
   1a1a8:	cmp	r4, #0
   1a1ac:	moveq	r3, #0
   1a1b0:	beq	1a1dc <__assert_fail@plt+0x8dc8>
   1a1b4:	mov	r2, r4
   1a1b8:	asr	r3, r4, #31
   1a1bc:	mvn	r0, #0
   1a1c0:	mvn	r1, #0
   1a1c4:	bl	1b284 <__assert_fail@plt+0x9e70>
   1a1c8:	ldrd	r2, [r5]
   1a1cc:	cmp	r1, r3
   1a1d0:	cmpeq	r0, r2
   1a1d4:	movcc	r3, #1
   1a1d8:	movcs	r3, #0
   1a1dc:	cmp	r3, #0
   1a1e0:	beq	1a218 <__assert_fail@plt+0x8e04>
   1a1e4:	mvn	r2, #0
   1a1e8:	mvn	r3, #0
   1a1ec:	strd	r2, [r5]
   1a1f0:	mov	r0, #1
   1a1f4:	pop	{r4, r5, r6, pc}
   1a1f8:	mov	r1, r4
   1a1fc:	mov	r0, #0
   1a200:	bl	1af70 <__assert_fail@plt+0x9b5c>
   1a204:	ldrd	r2, [r5]
   1a208:	orrs	r3, r2, r3
   1a20c:	movne	r3, #1
   1a210:	moveq	r3, #0
   1a214:	b	1a1dc <__assert_fail@plt+0x8dc8>
   1a218:	asr	r3, r4, #31
   1a21c:	ldr	r1, [r5, #4]
   1a220:	ldr	r2, [r5]
   1a224:	mul	r3, r3, r2
   1a228:	mla	r1, r4, r1, r3
   1a22c:	umull	r2, r3, r2, r4
   1a230:	add	r3, r1, r3
   1a234:	strd	r2, [r5]
   1a238:	mov	r0, #0
   1a23c:	pop	{r4, r5, r6, pc}
   1a240:	push	{r4, r5, r6, r7, r8, lr}
   1a244:	subs	r4, r2, #0
   1a248:	beq	1a278 <__assert_fail@plt+0x8e64>
   1a24c:	mov	r7, r1
   1a250:	mov	r6, r0
   1a254:	mov	r5, #0
   1a258:	mov	r1, r7
   1a25c:	mov	r0, r6
   1a260:	bl	1a198 <__assert_fail@plt+0x8d84>
   1a264:	orr	r5, r5, r0
   1a268:	subs	r4, r4, #1
   1a26c:	bne	1a258 <__assert_fail@plt+0x8e44>
   1a270:	mov	r0, r5
   1a274:	pop	{r4, r5, r6, r7, r8, pc}
   1a278:	mov	r5, #0
   1a27c:	b	1a270 <__assert_fail@plt+0x8e5c>
   1a280:	push	{r4, r5, r6, r7, r8, r9, lr}
   1a284:	sub	sp, sp, #20
   1a288:	cmp	r2, #36	; 0x24
   1a28c:	bhi	1a2cc <__assert_fail@plt+0x8eb8>
   1a290:	mov	r5, r0
   1a294:	mov	r6, r1
   1a298:	mov	r7, r2
   1a29c:	mov	r9, r3
   1a2a0:	cmp	r1, #0
   1a2a4:	addeq	r6, sp, #12
   1a2a8:	bl	112dc <__errno_location@plt>
   1a2ac:	mov	r8, r0
   1a2b0:	mov	r3, #0
   1a2b4:	str	r3, [r0]
   1a2b8:	ldrb	r4, [r5]
   1a2bc:	bl	11288 <__ctype_b_loc@plt>
   1a2c0:	ldr	r1, [r0]
   1a2c4:	mov	r2, r5
   1a2c8:	b	1a2e4 <__assert_fail@plt+0x8ed0>
   1a2cc:	ldr	r3, [pc, #1056]	; 1a6f4 <__assert_fail@plt+0x92e0>
   1a2d0:	mov	r2, #85	; 0x55
   1a2d4:	ldr	r1, [pc, #1052]	; 1a6f8 <__assert_fail@plt+0x92e4>
   1a2d8:	ldr	r0, [pc, #1052]	; 1a6fc <__assert_fail@plt+0x92e8>
   1a2dc:	bl	11414 <__assert_fail@plt>
   1a2e0:	ldrb	r4, [r2, #1]!
   1a2e4:	lsl	r3, r4, #1
   1a2e8:	ldrh	r3, [r1, r3]
   1a2ec:	tst	r3, #8192	; 0x2000
   1a2f0:	bne	1a2e0 <__assert_fail@plt+0x8ecc>
   1a2f4:	cmp	r4, #45	; 0x2d
   1a2f8:	moveq	r4, #4
   1a2fc:	bne	1a30c <__assert_fail@plt+0x8ef8>
   1a300:	mov	r0, r4
   1a304:	add	sp, sp, #20
   1a308:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a30c:	mov	r3, #0
   1a310:	mov	r2, r7
   1a314:	mov	r1, r6
   1a318:	mov	r0, r5
   1a31c:	bl	11138 <__strtoull_internal@plt>
   1a320:	strd	r0, [sp]
   1a324:	ldr	r7, [r6]
   1a328:	cmp	r5, r7
   1a32c:	beq	1a350 <__assert_fail@plt+0x8f3c>
   1a330:	ldr	r3, [r8]
   1a334:	cmp	r3, #0
   1a338:	beq	1a398 <__assert_fail@plt+0x8f84>
   1a33c:	cmp	r3, #34	; 0x22
   1a340:	moveq	r4, #1
   1a344:	beq	1a39c <__assert_fail@plt+0x8f88>
   1a348:	mov	r4, #4
   1a34c:	b	1a300 <__assert_fail@plt+0x8eec>
   1a350:	ldr	r3, [sp, #48]	; 0x30
   1a354:	cmp	r3, #0
   1a358:	moveq	r4, #4
   1a35c:	beq	1a300 <__assert_fail@plt+0x8eec>
   1a360:	ldrb	r1, [r7]
   1a364:	cmp	r1, #0
   1a368:	moveq	r4, #4
   1a36c:	beq	1a300 <__assert_fail@plt+0x8eec>
   1a370:	mov	r0, r3
   1a374:	bl	112b8 <strchr@plt>
   1a378:	cmp	r0, #0
   1a37c:	moveq	r4, #4
   1a380:	beq	1a300 <__assert_fail@plt+0x8eec>
   1a384:	mov	r2, #1
   1a388:	mov	r3, #0
   1a38c:	strd	r2, [sp]
   1a390:	mov	r4, #0
   1a394:	b	1a3a8 <__assert_fail@plt+0x8f94>
   1a398:	mov	r4, #0
   1a39c:	ldr	r3, [sp, #48]	; 0x30
   1a3a0:	cmp	r3, #0
   1a3a4:	beq	1a498 <__assert_fail@plt+0x9084>
   1a3a8:	ldrb	r5, [r7]
   1a3ac:	cmp	r5, #0
   1a3b0:	beq	1a630 <__assert_fail@plt+0x921c>
   1a3b4:	mov	r1, r5
   1a3b8:	ldr	r0, [sp, #48]	; 0x30
   1a3bc:	bl	112b8 <strchr@plt>
   1a3c0:	cmp	r0, #0
   1a3c4:	beq	1a4a0 <__assert_fail@plt+0x908c>
   1a3c8:	sub	r3, r5, #69	; 0x45
   1a3cc:	cmp	r3, #47	; 0x2f
   1a3d0:	ldrls	pc, [pc, r3, lsl #2]
   1a3d4:	b	1a50c <__assert_fail@plt+0x90f8>
   1a3d8:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3dc:	andeq	sl, r1, ip, lsl #10
   1a3e0:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3e4:	andeq	sl, r1, ip, lsl #10
   1a3e8:	andeq	sl, r1, ip, lsl #10
   1a3ec:	andeq	sl, r1, ip, lsl #10
   1a3f0:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3f4:	andeq	sl, r1, ip, lsl #10
   1a3f8:			; <UNDEFINED> instruction: 0x0001a4b0
   1a3fc:	andeq	sl, r1, ip, lsl #10
   1a400:	andeq	sl, r1, ip, lsl #10
   1a404:			; <UNDEFINED> instruction: 0x0001a4b0
   1a408:	andeq	sl, r1, ip, lsl #10
   1a40c:	andeq	sl, r1, ip, lsl #10
   1a410:	andeq	sl, r1, ip, lsl #10
   1a414:			; <UNDEFINED> instruction: 0x0001a4b0
   1a418:	andeq	sl, r1, ip, lsl #10
   1a41c:	andeq	sl, r1, ip, lsl #10
   1a420:	andeq	sl, r1, ip, lsl #10
   1a424:	andeq	sl, r1, ip, lsl #10
   1a428:			; <UNDEFINED> instruction: 0x0001a4b0
   1a42c:			; <UNDEFINED> instruction: 0x0001a4b0
   1a430:	andeq	sl, r1, ip, lsl #10
   1a434:	andeq	sl, r1, ip, lsl #10
   1a438:	andeq	sl, r1, ip, lsl #10
   1a43c:	andeq	sl, r1, ip, lsl #10
   1a440:	andeq	sl, r1, ip, lsl #10
   1a444:	andeq	sl, r1, ip, lsl #10
   1a448:	andeq	sl, r1, ip, lsl #10
   1a44c:	andeq	sl, r1, ip, lsl #10
   1a450:	andeq	sl, r1, ip, lsl #10
   1a454:	andeq	sl, r1, ip, lsl #10
   1a458:	andeq	sl, r1, ip, lsl #10
   1a45c:	andeq	sl, r1, ip, lsl #10
   1a460:			; <UNDEFINED> instruction: 0x0001a4b0
   1a464:	andeq	sl, r1, ip, lsl #10
   1a468:	andeq	sl, r1, ip, lsl #10
   1a46c:	andeq	sl, r1, ip, lsl #10
   1a470:			; <UNDEFINED> instruction: 0x0001a4b0
   1a474:	andeq	sl, r1, ip, lsl #10
   1a478:			; <UNDEFINED> instruction: 0x0001a4b0
   1a47c:	andeq	sl, r1, ip, lsl #10
   1a480:	andeq	sl, r1, ip, lsl #10
   1a484:	andeq	sl, r1, ip, lsl #10
   1a488:	andeq	sl, r1, ip, lsl #10
   1a48c:	andeq	sl, r1, ip, lsl #10
   1a490:	andeq	sl, r1, ip, lsl #10
   1a494:			; <UNDEFINED> instruction: 0x0001a4b0
   1a498:	strd	r0, [r9]
   1a49c:	b	1a300 <__assert_fail@plt+0x8eec>
   1a4a0:	ldrd	r2, [sp]
   1a4a4:	strd	r2, [r9]
   1a4a8:	orr	r4, r4, #2
   1a4ac:	b	1a300 <__assert_fail@plt+0x8eec>
   1a4b0:	mov	r1, #48	; 0x30
   1a4b4:	ldr	r0, [sp, #48]	; 0x30
   1a4b8:	bl	112b8 <strchr@plt>
   1a4bc:	cmp	r0, #0
   1a4c0:	beq	1a5fc <__assert_fail@plt+0x91e8>
   1a4c4:	ldrb	r3, [r7, #1]
   1a4c8:	cmp	r3, #68	; 0x44
   1a4cc:	beq	1a4e8 <__assert_fail@plt+0x90d4>
   1a4d0:	cmp	r3, #105	; 0x69
   1a4d4:	beq	1a4f4 <__assert_fail@plt+0x90e0>
   1a4d8:	cmp	r3, #66	; 0x42
   1a4dc:	movne	r7, #1
   1a4e0:	movne	r1, #1024	; 0x400
   1a4e4:	bne	1a514 <__assert_fail@plt+0x9100>
   1a4e8:	mov	r7, #2
   1a4ec:	mov	r1, #1000	; 0x3e8
   1a4f0:	b	1a514 <__assert_fail@plt+0x9100>
   1a4f4:	ldrb	r7, [r7, #2]
   1a4f8:	cmp	r7, #66	; 0x42
   1a4fc:	movne	r7, #1
   1a500:	moveq	r7, #3
   1a504:	mov	r1, #1024	; 0x400
   1a508:	b	1a514 <__assert_fail@plt+0x9100>
   1a50c:	mov	r7, #1
   1a510:	mov	r1, #1024	; 0x400
   1a514:	sub	r5, r5, #66	; 0x42
   1a518:	cmp	r5, #53	; 0x35
   1a51c:	ldrls	pc, [pc, r5, lsl #2]
   1a520:	b	1a6dc <__assert_fail@plt+0x92c8>
   1a524:	andeq	sl, r1, ip, lsr r6
   1a528:	ldrdeq	sl, [r1], -ip
   1a52c:	ldrdeq	sl, [r1], -ip
   1a530:	andeq	sl, r1, ip, asr #12
   1a534:	ldrdeq	sl, [r1], -ip
   1a538:	andeq	sl, r1, ip, asr r6
   1a53c:	ldrdeq	sl, [r1], -ip
   1a540:	ldrdeq	sl, [r1], -ip
   1a544:	ldrdeq	sl, [r1], -ip
   1a548:	andeq	sl, r1, ip, ror #12
   1a54c:	ldrdeq	sl, [r1], -ip
   1a550:	andeq	sl, r1, ip, ror r6
   1a554:	ldrdeq	sl, [r1], -ip
   1a558:	ldrdeq	sl, [r1], -ip
   1a55c:	andeq	sl, r1, ip, lsl #13
   1a560:	ldrdeq	sl, [r1], -ip
   1a564:	ldrdeq	sl, [r1], -ip
   1a568:	ldrdeq	sl, [r1], -ip
   1a56c:	muleq	r1, ip, r6
   1a570:	ldrdeq	sl, [r1], -ip
   1a574:	ldrdeq	sl, [r1], -ip
   1a578:	ldrdeq	sl, [r1], -ip
   1a57c:	ldrdeq	sl, [r1], -ip
   1a580:			; <UNDEFINED> instruction: 0x0001a6bc
   1a584:	andeq	sl, r1, ip, asr #13
   1a588:	ldrdeq	sl, [r1], -ip
   1a58c:	ldrdeq	sl, [r1], -ip
   1a590:	ldrdeq	sl, [r1], -ip
   1a594:	ldrdeq	sl, [r1], -ip
   1a598:	ldrdeq	sl, [r1], -ip
   1a59c:	ldrdeq	sl, [r1], -ip
   1a5a0:	ldrdeq	sl, [r1], -ip
   1a5a4:	andeq	sl, r1, r8, lsl #12
   1a5a8:	andeq	sl, r1, ip, ror #13
   1a5ac:	ldrdeq	sl, [r1], -ip
   1a5b0:	ldrdeq	sl, [r1], -ip
   1a5b4:	ldrdeq	sl, [r1], -ip
   1a5b8:	andeq	sl, r1, ip, asr r6
   1a5bc:	ldrdeq	sl, [r1], -ip
   1a5c0:	ldrdeq	sl, [r1], -ip
   1a5c4:	ldrdeq	sl, [r1], -ip
   1a5c8:	andeq	sl, r1, ip, ror #12
   1a5cc:	ldrdeq	sl, [r1], -ip
   1a5d0:	andeq	sl, r1, ip, ror r6
   1a5d4:	ldrdeq	sl, [r1], -ip
   1a5d8:	ldrdeq	sl, [r1], -ip
   1a5dc:	ldrdeq	sl, [r1], -ip
   1a5e0:	ldrdeq	sl, [r1], -ip
   1a5e4:	ldrdeq	sl, [r1], -ip
   1a5e8:	ldrdeq	sl, [r1], -ip
   1a5ec:	muleq	r1, ip, r6
   1a5f0:	ldrdeq	sl, [r1], -ip
   1a5f4:	ldrdeq	sl, [r1], -ip
   1a5f8:	andeq	sl, r1, ip, lsr #13
   1a5fc:	mov	r7, #1
   1a600:	mov	r1, #1024	; 0x400
   1a604:	b	1a514 <__assert_fail@plt+0x9100>
   1a608:	mov	r1, #512	; 0x200
   1a60c:	mov	r0, sp
   1a610:	bl	1a198 <__assert_fail@plt+0x8d84>
   1a614:	orr	r4, r4, r0
   1a618:	ldr	r3, [r6]
   1a61c:	add	r2, r3, r7
   1a620:	str	r2, [r6]
   1a624:	ldrb	r3, [r3, r7]
   1a628:	cmp	r3, #0
   1a62c:	orrne	r4, r4, #2
   1a630:	ldrd	r2, [sp]
   1a634:	strd	r2, [r9]
   1a638:	b	1a300 <__assert_fail@plt+0x8eec>
   1a63c:	mov	r1, #1024	; 0x400
   1a640:	mov	r0, sp
   1a644:	bl	1a198 <__assert_fail@plt+0x8d84>
   1a648:	b	1a614 <__assert_fail@plt+0x9200>
   1a64c:	mov	r2, #6
   1a650:	mov	r0, sp
   1a654:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a658:	b	1a614 <__assert_fail@plt+0x9200>
   1a65c:	mov	r2, #3
   1a660:	mov	r0, sp
   1a664:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a668:	b	1a614 <__assert_fail@plt+0x9200>
   1a66c:	mov	r2, #1
   1a670:	mov	r0, sp
   1a674:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a678:	b	1a614 <__assert_fail@plt+0x9200>
   1a67c:	mov	r2, #2
   1a680:	mov	r0, sp
   1a684:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a688:	b	1a614 <__assert_fail@plt+0x9200>
   1a68c:	mov	r2, #5
   1a690:	mov	r0, sp
   1a694:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a698:	b	1a614 <__assert_fail@plt+0x9200>
   1a69c:	mov	r2, #4
   1a6a0:	mov	r0, sp
   1a6a4:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a6a8:	b	1a614 <__assert_fail@plt+0x9200>
   1a6ac:	mov	r1, #2
   1a6b0:	mov	r0, sp
   1a6b4:	bl	1a198 <__assert_fail@plt+0x8d84>
   1a6b8:	b	1a614 <__assert_fail@plt+0x9200>
   1a6bc:	mov	r2, #8
   1a6c0:	mov	r0, sp
   1a6c4:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a6c8:	b	1a614 <__assert_fail@plt+0x9200>
   1a6cc:	mov	r2, #7
   1a6d0:	mov	r0, sp
   1a6d4:	bl	1a240 <__assert_fail@plt+0x8e2c>
   1a6d8:	b	1a614 <__assert_fail@plt+0x9200>
   1a6dc:	ldrd	r2, [sp]
   1a6e0:	strd	r2, [r9]
   1a6e4:	orr	r4, r4, #2
   1a6e8:	b	1a300 <__assert_fail@plt+0x8eec>
   1a6ec:	mov	r0, #0
   1a6f0:	b	1a614 <__assert_fail@plt+0x9200>
   1a6f4:	andeq	ip, r1, r8, lsr #29
   1a6f8:			; <UNDEFINED> instruction: 0x0001ceb4
   1a6fc:	andeq	ip, r1, r4, asr #29
   1a700:	push	{r4, lr}
   1a704:	mov	r2, r0
   1a708:	mov	r3, r1
   1a70c:	cmp	r1, #0
   1a710:	cmpne	r0, #0
   1a714:	moveq	r3, #1
   1a718:	moveq	r2, r3
   1a71c:	umull	r0, r1, r2, r3
   1a720:	cmp	r0, #0
   1a724:	cmpge	r1, #0
   1a728:	bne	1a73c <__assert_fail@plt+0x9328>
   1a72c:	mov	r1, r3
   1a730:	mov	r0, r2
   1a734:	bl	110a8 <calloc@plt>
   1a738:	pop	{r4, pc}
   1a73c:	bl	112dc <__errno_location@plt>
   1a740:	mov	r3, #12
   1a744:	str	r3, [r0]
   1a748:	mov	r0, #0
   1a74c:	pop	{r4, pc}
   1a750:	push	{r4, lr}
   1a754:	cmp	r0, #0
   1a758:	moveq	r0, #1
   1a75c:	cmp	r0, #0
   1a760:	blt	1a76c <__assert_fail@plt+0x9358>
   1a764:	bl	11240 <malloc@plt>
   1a768:	pop	{r4, pc}
   1a76c:	bl	112dc <__errno_location@plt>
   1a770:	mov	r3, #12
   1a774:	str	r3, [r0]
   1a778:	mov	r0, #0
   1a77c:	pop	{r4, pc}
   1a780:	push	{r4, lr}
   1a784:	cmp	r0, #0
   1a788:	beq	1a7a4 <__assert_fail@plt+0x9390>
   1a78c:	cmp	r1, #0
   1a790:	beq	1a7b0 <__assert_fail@plt+0x939c>
   1a794:	cmp	r1, #0
   1a798:	blt	1a7bc <__assert_fail@plt+0x93a8>
   1a79c:	bl	11180 <realloc@plt>
   1a7a0:	pop	{r4, pc}
   1a7a4:	mov	r0, r1
   1a7a8:	bl	1a750 <__assert_fail@plt+0x933c>
   1a7ac:	pop	{r4, pc}
   1a7b0:	bl	16660 <__assert_fail@plt+0x524c>
   1a7b4:	mov	r0, #0
   1a7b8:	pop	{r4, pc}
   1a7bc:	bl	112dc <__errno_location@plt>
   1a7c0:	mov	r3, #12
   1a7c4:	str	r3, [r0]
   1a7c8:	mov	r0, #0
   1a7cc:	pop	{r4, pc}
   1a7d0:	push	{r4, r5, r6, lr}
   1a7d4:	mov	r5, r0
   1a7d8:	mov	r4, r1
   1a7dc:	ldr	r3, [pc, #108]	; 1a850 <__assert_fail@plt+0x943c>
   1a7e0:	ldr	r3, [r3]
   1a7e4:	cmp	r3, #0
   1a7e8:	beq	1a80c <__assert_fail@plt+0x93f8>
   1a7ec:	ldr	r3, [pc, #92]	; 1a850 <__assert_fail@plt+0x943c>
   1a7f0:	ldr	r2, [r3]
   1a7f4:	cmp	r2, #0
   1a7f8:	beq	1a828 <__assert_fail@plt+0x9414>
   1a7fc:	mov	r1, r4
   1a800:	mov	r0, r5
   1a804:	bl	11354 <strtod_l@plt>
   1a808:	pop	{r4, r5, r6, pc}
   1a80c:	mov	r2, #0
   1a810:	ldr	r1, [pc, #60]	; 1a854 <__assert_fail@plt+0x9440>
   1a814:	ldr	r0, [pc, #60]	; 1a858 <__assert_fail@plt+0x9444>
   1a818:	bl	1139c <newlocale@plt>
   1a81c:	ldr	r3, [pc, #44]	; 1a850 <__assert_fail@plt+0x943c>
   1a820:	str	r0, [r3]
   1a824:	b	1a7ec <__assert_fail@plt+0x93d8>
   1a828:	cmp	r4, #0
   1a82c:	beq	1a83c <__assert_fail@plt+0x9428>
   1a830:	str	r5, [r4]
   1a834:	vldr	d0, [pc, #12]	; 1a848 <__assert_fail@plt+0x9434>
   1a838:	pop	{r4, r5, r6, pc}
   1a83c:	vldr	d0, [pc, #4]	; 1a848 <__assert_fail@plt+0x9434>
   1a840:	pop	{r4, r5, r6, pc}
   1a844:	nop			; (mov r0, r0)
	...
   1a850:	andeq	sp, r2, r0, lsr #6
   1a854:	andeq	ip, r1, ip, ror #29
   1a858:			; <UNDEFINED> instruction: 0x00001fbf
   1a85c:	push	{r4, r5, r6, lr}
   1a860:	mov	r5, r0
   1a864:	bl	11204 <__fpending@plt>
   1a868:	mov	r6, r0
   1a86c:	ldr	r4, [r5]
   1a870:	and	r4, r4, #32
   1a874:	mov	r0, r5
   1a878:	bl	1a9bc <__assert_fail@plt+0x95a8>
   1a87c:	cmp	r4, #0
   1a880:	bne	1a8a8 <__assert_fail@plt+0x9494>
   1a884:	cmp	r0, #0
   1a888:	popeq	{r4, r5, r6, pc}
   1a88c:	cmp	r6, #0
   1a890:	bne	1a8c4 <__assert_fail@plt+0x94b0>
   1a894:	bl	112dc <__errno_location@plt>
   1a898:	ldr	r0, [r0]
   1a89c:	subs	r0, r0, #9
   1a8a0:	mvnne	r0, #0
   1a8a4:	pop	{r4, r5, r6, pc}
   1a8a8:	cmp	r0, #0
   1a8ac:	bne	1a8cc <__assert_fail@plt+0x94b8>
   1a8b0:	bl	112dc <__errno_location@plt>
   1a8b4:	mov	r3, #0
   1a8b8:	str	r3, [r0]
   1a8bc:	mvn	r0, #0
   1a8c0:	pop	{r4, r5, r6, pc}
   1a8c4:	mvn	r0, #0
   1a8c8:	pop	{r4, r5, r6, pc}
   1a8cc:	mvn	r0, #0
   1a8d0:	pop	{r4, r5, r6, pc}
   1a8d4:	andeq	r0, r0, r0
   1a8d8:	vldr	d7, [pc, #184]	; 1a998 <__assert_fail@plt+0x9584>
   1a8dc:	vcmpe.f64	d0, d7
   1a8e0:	vmrs	APSR_nzcv, fpscr
   1a8e4:	ble	1a96c <__assert_fail@plt+0x9558>
   1a8e8:	vldr	d7, [pc, #176]	; 1a9a0 <__assert_fail@plt+0x958c>
   1a8ec:	vcmpe.f64	d0, d7
   1a8f0:	vmrs	APSR_nzcv, fpscr
   1a8f4:	bpl	1a980 <__assert_fail@plt+0x956c>
   1a8f8:	vcvt.s32.f64	s14, d0
   1a8fc:	vcvt.f64.s32	d6, s14
   1a900:	vsub.f64	d0, d0, d6
   1a904:	vldr	d6, [pc, #156]	; 1a9a8 <__assert_fail@plt+0x9594>
   1a908:	vmul.f64	d0, d0, d6
   1a90c:	vcvt.s32.f64	s15, d0
   1a910:	vcvt.f64.s32	d6, s15
   1a914:	vcmpe.f64	d0, d6
   1a918:	vmrs	APSR_nzcv, fpscr
   1a91c:	movgt	r3, #1
   1a920:	movle	r3, #0
   1a924:	vmov	r2, s15
   1a928:	add	r3, r2, r3
   1a92c:	ldr	ip, [pc, #124]	; 1a9b0 <__assert_fail@plt+0x959c>
   1a930:	smull	r2, ip, ip, r3
   1a934:	asr	r1, r3, #31
   1a938:	rsb	ip, r1, ip, asr #28
   1a93c:	vmov	r2, s14
   1a940:	add	r2, ip, r2
   1a944:	ldr	r1, [pc, #104]	; 1a9b4 <__assert_fail@plt+0x95a0>
   1a948:	mul	r1, r1, ip
   1a94c:	subs	r3, r3, r1
   1a950:	submi	r2, r2, #1
   1a954:	addmi	r3, r3, #998244352	; 0x3b800000
   1a958:	addmi	r3, r3, #1753088	; 0x1ac000
   1a95c:	addmi	r3, r3, #2560	; 0xa00
   1a960:	str	r2, [r0]
   1a964:	str	r3, [r0, #4]
   1a968:	bx	lr
   1a96c:	mov	r3, #-2147483648	; 0x80000000
   1a970:	str	r3, [r0]
   1a974:	mov	r3, #0
   1a978:	str	r3, [r0, #4]
   1a97c:	bx	lr
   1a980:	mvn	r3, #-2147483648	; 0x80000000
   1a984:	str	r3, [r0]
   1a988:	ldr	r3, [pc, #40]	; 1a9b8 <__assert_fail@plt+0x95a4>
   1a98c:	str	r3, [r0, #4]
   1a990:	bx	lr
   1a994:	nop			; (mov r0, r0)
   1a998:	andeq	r0, r0, r0
   1a99c:	mvngt	r0, r0
   1a9a0:	andeq	r0, r0, r0
   1a9a4:	mvnmi	r0, r0
   1a9a8:	andeq	r0, r0, r0
   1a9ac:	bicmi	ip, sp, r5, ror #26
   1a9b0:	ldrtmi	r2, [r8], #4001	; 0xfa1
   1a9b4:	blcc	fe6cd1bc <optarg@@GLIBC_2.4+0xfe69fff4>
   1a9b8:	blcc	fe6cd1bc <optarg@@GLIBC_2.4+0xfe69fff4>
   1a9bc:	push	{r4, r5, r6, lr}
   1a9c0:	sub	sp, sp, #8
   1a9c4:	mov	r4, r0
   1a9c8:	bl	11318 <fileno@plt>
   1a9cc:	cmp	r0, #0
   1a9d0:	blt	1aa48 <__assert_fail@plt+0x9634>
   1a9d4:	mov	r0, r4
   1a9d8:	bl	11258 <__freading@plt>
   1a9dc:	cmp	r0, #0
   1a9e0:	beq	1aa14 <__assert_fail@plt+0x9600>
   1a9e4:	mov	r0, r4
   1a9e8:	bl	11318 <fileno@plt>
   1a9ec:	mov	r3, #1
   1a9f0:	str	r3, [sp]
   1a9f4:	mov	r2, #0
   1a9f8:	mov	r3, #0
   1a9fc:	bl	111ec <lseek64@plt>
   1aa00:	mvn	r2, #0
   1aa04:	mvn	r3, #0
   1aa08:	cmp	r1, r3
   1aa0c:	cmpeq	r0, r2
   1aa10:	beq	1aa54 <__assert_fail@plt+0x9640>
   1aa14:	mov	r0, r4
   1aa18:	bl	1aa64 <__assert_fail@plt+0x9650>
   1aa1c:	cmp	r0, #0
   1aa20:	beq	1aa54 <__assert_fail@plt+0x9640>
   1aa24:	bl	112dc <__errno_location@plt>
   1aa28:	mov	r5, r0
   1aa2c:	ldr	r6, [r0]
   1aa30:	mov	r0, r4
   1aa34:	bl	1133c <fclose@plt>
   1aa38:	cmp	r6, #0
   1aa3c:	strne	r6, [r5]
   1aa40:	mvnne	r0, #0
   1aa44:	b	1aa5c <__assert_fail@plt+0x9648>
   1aa48:	mov	r0, r4
   1aa4c:	bl	1133c <fclose@plt>
   1aa50:	b	1aa5c <__assert_fail@plt+0x9648>
   1aa54:	mov	r0, r4
   1aa58:	bl	1133c <fclose@plt>
   1aa5c:	add	sp, sp, #8
   1aa60:	pop	{r4, r5, r6, pc}
   1aa64:	push	{r4, lr}
   1aa68:	sub	sp, sp, #8
   1aa6c:	subs	r4, r0, #0
   1aa70:	beq	1aa84 <__assert_fail@plt+0x9670>
   1aa74:	mov	r0, r4
   1aa78:	bl	11258 <__freading@plt>
   1aa7c:	cmp	r0, #0
   1aa80:	bne	1aa94 <__assert_fail@plt+0x9680>
   1aa84:	mov	r0, r4
   1aa88:	bl	110fc <fflush@plt>
   1aa8c:	add	sp, sp, #8
   1aa90:	pop	{r4, pc}
   1aa94:	ldr	r3, [r4]
   1aa98:	tst	r3, #256	; 0x100
   1aa9c:	bne	1aaac <__assert_fail@plt+0x9698>
   1aaa0:	mov	r0, r4
   1aaa4:	bl	110fc <fflush@plt>
   1aaa8:	b	1aa8c <__assert_fail@plt+0x9678>
   1aaac:	mov	r3, #1
   1aab0:	str	r3, [sp]
   1aab4:	mov	r2, #0
   1aab8:	mov	r3, #0
   1aabc:	mov	r0, r4
   1aac0:	bl	1aac8 <__assert_fail@plt+0x96b4>
   1aac4:	b	1aaa0 <__assert_fail@plt+0x968c>
   1aac8:	push	{r4, r5, r6, r7, lr}
   1aacc:	sub	sp, sp, #12
   1aad0:	mov	r4, r0
   1aad4:	mov	r6, r2
   1aad8:	mov	r7, r3
   1aadc:	ldr	r5, [sp, #32]
   1aae0:	ldr	r2, [r0, #8]
   1aae4:	ldr	r3, [r0, #4]
   1aae8:	cmp	r2, r3
   1aaec:	beq	1ab0c <__assert_fail@plt+0x96f8>
   1aaf0:	str	r5, [sp]
   1aaf4:	mov	r2, r6
   1aaf8:	mov	r3, r7
   1aafc:	mov	r0, r4
   1ab00:	bl	11348 <fseeko64@plt>
   1ab04:	add	sp, sp, #12
   1ab08:	pop	{r4, r5, r6, r7, pc}
   1ab0c:	ldr	r2, [r0, #20]
   1ab10:	ldr	r3, [r0, #16]
   1ab14:	cmp	r2, r3
   1ab18:	bne	1aaf0 <__assert_fail@plt+0x96dc>
   1ab1c:	ldr	r3, [r0, #36]	; 0x24
   1ab20:	cmp	r3, #0
   1ab24:	bne	1aaf0 <__assert_fail@plt+0x96dc>
   1ab28:	bl	11318 <fileno@plt>
   1ab2c:	str	r5, [sp]
   1ab30:	mov	r2, r6
   1ab34:	mov	r3, r7
   1ab38:	bl	111ec <lseek64@plt>
   1ab3c:	mvn	r2, #0
   1ab40:	mvn	r3, #0
   1ab44:	cmp	r1, r3
   1ab48:	cmpeq	r0, r2
   1ab4c:	beq	1ab68 <__assert_fail@plt+0x9754>
   1ab50:	ldr	r3, [r4]
   1ab54:	bic	r3, r3, #16
   1ab58:	str	r3, [r4]
   1ab5c:	strd	r0, [r4, #80]	; 0x50
   1ab60:	mov	r0, #0
   1ab64:	b	1ab04 <__assert_fail@plt+0x96f0>
   1ab68:	mvn	r0, #0
   1ab6c:	b	1ab04 <__assert_fail@plt+0x96f0>
   1ab70:	push	{r4, lr}
   1ab74:	mov	r0, #14
   1ab78:	bl	11390 <nl_langinfo@plt>
   1ab7c:	cmp	r0, #0
   1ab80:	beq	1ab98 <__assert_fail@plt+0x9784>
   1ab84:	ldrb	r2, [r0]
   1ab88:	ldr	r3, [pc, #16]	; 1aba0 <__assert_fail@plt+0x978c>
   1ab8c:	cmp	r2, #0
   1ab90:	moveq	r0, r3
   1ab94:	pop	{r4, pc}
   1ab98:	ldr	r0, [pc]	; 1aba0 <__assert_fail@plt+0x978c>
   1ab9c:	pop	{r4, pc}
   1aba0:	strdeq	ip, [r1], -r0
   1aba4:	push	{r4, r5, r6, r7, lr}
   1aba8:	sub	sp, sp, #12
   1abac:	mov	r7, r1
   1abb0:	mov	r5, r2
   1abb4:	subs	r6, r0, #0
   1abb8:	addeq	r6, sp, #4
   1abbc:	mov	r0, r6
   1abc0:	bl	11210 <mbrtowc@plt>
   1abc4:	mov	r4, r0
   1abc8:	cmp	r5, #0
   1abcc:	cmnne	r0, #3
   1abd0:	bhi	1abe0 <__assert_fail@plt+0x97cc>
   1abd4:	mov	r0, r4
   1abd8:	add	sp, sp, #12
   1abdc:	pop	{r4, r5, r6, r7, pc}
   1abe0:	mov	r0, #0
   1abe4:	bl	1ac5c <__assert_fail@plt+0x9848>
   1abe8:	cmp	r0, #0
   1abec:	ldrbeq	r3, [r7]
   1abf0:	streq	r3, [r6]
   1abf4:	moveq	r4, #1
   1abf8:	b	1abd4 <__assert_fail@plt+0x97c0>
   1abfc:	push	{r4, r5, r6, lr}
   1ac00:	mov	r6, r0
   1ac04:	mov	r5, r1
   1ac08:	subs	r4, r2, #0
   1ac0c:	beq	1ac38 <__assert_fail@plt+0x9824>
   1ac10:	mov	r1, r4
   1ac14:	mvn	r0, #0
   1ac18:	bl	1ad64 <__assert_fail@plt+0x9950>
   1ac1c:	cmp	r0, r5
   1ac20:	bcs	1ac38 <__assert_fail@plt+0x9824>
   1ac24:	bl	112dc <__errno_location@plt>
   1ac28:	mov	r3, #12
   1ac2c:	str	r3, [r0]
   1ac30:	mov	r0, #0
   1ac34:	pop	{r4, r5, r6, pc}
   1ac38:	mul	r1, r5, r4
   1ac3c:	mov	r0, r6
   1ac40:	bl	1a780 <__assert_fail@plt+0x936c>
   1ac44:	pop	{r4, r5, r6, pc}
   1ac48:	push	{r4, lr}
   1ac4c:	mov	r2, #3
   1ac50:	mov	r1, #0
   1ac54:	bl	163cc <__assert_fail@plt+0x4fb8>
   1ac58:	pop	{r4, pc}
   1ac5c:	push	{lr}		; (str lr, [sp, #-4]!)
   1ac60:	sub	sp, sp, #268	; 0x10c
   1ac64:	ldr	r2, [pc, #68]	; 1acb0 <__assert_fail@plt+0x989c>
   1ac68:	add	r1, sp, #4
   1ac6c:	bl	1acbc <__assert_fail@plt+0x98a8>
   1ac70:	cmp	r0, #0
   1ac74:	movne	r0, #0
   1ac78:	bne	1aca8 <__assert_fail@plt+0x9894>
   1ac7c:	ldr	r1, [pc, #48]	; 1acb4 <__assert_fail@plt+0x98a0>
   1ac80:	add	r0, sp, #4
   1ac84:	bl	110cc <strcmp@plt>
   1ac88:	cmp	r0, #0
   1ac8c:	moveq	r0, #0
   1ac90:	beq	1aca8 <__assert_fail@plt+0x9894>
   1ac94:	ldr	r1, [pc, #28]	; 1acb8 <__assert_fail@plt+0x98a4>
   1ac98:	add	r0, sp, #4
   1ac9c:	bl	110cc <strcmp@plt>
   1aca0:	adds	r0, r0, #0
   1aca4:	movne	r0, #1
   1aca8:	add	sp, sp, #268	; 0x10c
   1acac:	pop	{pc}		; (ldr pc, [sp], #4)
   1acb0:	andeq	r0, r0, r1, lsl #2
   1acb4:	andeq	ip, r1, ip, ror #29
   1acb8:	strdeq	ip, [r1], -r8
   1acbc:	push	{r4, r5, r6, lr}
   1acc0:	mov	r6, r1
   1acc4:	mov	r4, r2
   1acc8:	mov	r1, #0
   1accc:	bl	11378 <setlocale@plt>
   1acd0:	subs	r5, r0, #0
   1acd4:	beq	1acf8 <__assert_fail@plt+0x98e4>
   1acd8:	mov	r0, r5
   1acdc:	bl	112a0 <strlen@plt>
   1ace0:	cmp	r4, r0
   1ace4:	bhi	1ad10 <__assert_fail@plt+0x98fc>
   1ace8:	cmp	r4, #0
   1acec:	bne	1ad28 <__assert_fail@plt+0x9914>
   1acf0:	mov	r0, #34	; 0x22
   1acf4:	pop	{r4, r5, r6, pc}
   1acf8:	cmp	r4, #0
   1acfc:	beq	1ad4c <__assert_fail@plt+0x9938>
   1ad00:	mov	r3, #0
   1ad04:	strb	r3, [r6]
   1ad08:	mov	r0, #22
   1ad0c:	pop	{r4, r5, r6, pc}
   1ad10:	add	r2, r0, #1
   1ad14:	mov	r1, r5
   1ad18:	mov	r0, r6
   1ad1c:	bl	1112c <memcpy@plt>
   1ad20:	mov	r0, #0
   1ad24:	pop	{r4, r5, r6, pc}
   1ad28:	sub	r4, r4, #1
   1ad2c:	mov	r2, r4
   1ad30:	mov	r1, r5
   1ad34:	mov	r0, r6
   1ad38:	bl	1112c <memcpy@plt>
   1ad3c:	mov	r3, #0
   1ad40:	strb	r3, [r6, r4]
   1ad44:	mov	r0, #34	; 0x22
   1ad48:	pop	{r4, r5, r6, pc}
   1ad4c:	mov	r0, #22
   1ad50:	pop	{r4, r5, r6, pc}
   1ad54:	push	{r4, lr}
   1ad58:	mov	r1, #0
   1ad5c:	bl	11378 <setlocale@plt>
   1ad60:	pop	{r4, pc}
   1ad64:	subs	r2, r1, #1
   1ad68:	bxeq	lr
   1ad6c:	bcc	1af44 <__assert_fail@plt+0x9b30>
   1ad70:	cmp	r0, r1
   1ad74:	bls	1af28 <__assert_fail@plt+0x9b14>
   1ad78:	tst	r1, r2
   1ad7c:	beq	1af34 <__assert_fail@plt+0x9b20>
   1ad80:	clz	r3, r0
   1ad84:	clz	r2, r1
   1ad88:	sub	r3, r2, r3
   1ad8c:	rsbs	r3, r3, #31
   1ad90:	addne	r3, r3, r3, lsl #1
   1ad94:	mov	r2, #0
   1ad98:	addne	pc, pc, r3, lsl #2
   1ad9c:	nop			; (mov r0, r0)
   1ada0:	cmp	r0, r1, lsl #31
   1ada4:	adc	r2, r2, r2
   1ada8:	subcs	r0, r0, r1, lsl #31
   1adac:	cmp	r0, r1, lsl #30
   1adb0:	adc	r2, r2, r2
   1adb4:	subcs	r0, r0, r1, lsl #30
   1adb8:	cmp	r0, r1, lsl #29
   1adbc:	adc	r2, r2, r2
   1adc0:	subcs	r0, r0, r1, lsl #29
   1adc4:	cmp	r0, r1, lsl #28
   1adc8:	adc	r2, r2, r2
   1adcc:	subcs	r0, r0, r1, lsl #28
   1add0:	cmp	r0, r1, lsl #27
   1add4:	adc	r2, r2, r2
   1add8:	subcs	r0, r0, r1, lsl #27
   1addc:	cmp	r0, r1, lsl #26
   1ade0:	adc	r2, r2, r2
   1ade4:	subcs	r0, r0, r1, lsl #26
   1ade8:	cmp	r0, r1, lsl #25
   1adec:	adc	r2, r2, r2
   1adf0:	subcs	r0, r0, r1, lsl #25
   1adf4:	cmp	r0, r1, lsl #24
   1adf8:	adc	r2, r2, r2
   1adfc:	subcs	r0, r0, r1, lsl #24
   1ae00:	cmp	r0, r1, lsl #23
   1ae04:	adc	r2, r2, r2
   1ae08:	subcs	r0, r0, r1, lsl #23
   1ae0c:	cmp	r0, r1, lsl #22
   1ae10:	adc	r2, r2, r2
   1ae14:	subcs	r0, r0, r1, lsl #22
   1ae18:	cmp	r0, r1, lsl #21
   1ae1c:	adc	r2, r2, r2
   1ae20:	subcs	r0, r0, r1, lsl #21
   1ae24:	cmp	r0, r1, lsl #20
   1ae28:	adc	r2, r2, r2
   1ae2c:	subcs	r0, r0, r1, lsl #20
   1ae30:	cmp	r0, r1, lsl #19
   1ae34:	adc	r2, r2, r2
   1ae38:	subcs	r0, r0, r1, lsl #19
   1ae3c:	cmp	r0, r1, lsl #18
   1ae40:	adc	r2, r2, r2
   1ae44:	subcs	r0, r0, r1, lsl #18
   1ae48:	cmp	r0, r1, lsl #17
   1ae4c:	adc	r2, r2, r2
   1ae50:	subcs	r0, r0, r1, lsl #17
   1ae54:	cmp	r0, r1, lsl #16
   1ae58:	adc	r2, r2, r2
   1ae5c:	subcs	r0, r0, r1, lsl #16
   1ae60:	cmp	r0, r1, lsl #15
   1ae64:	adc	r2, r2, r2
   1ae68:	subcs	r0, r0, r1, lsl #15
   1ae6c:	cmp	r0, r1, lsl #14
   1ae70:	adc	r2, r2, r2
   1ae74:	subcs	r0, r0, r1, lsl #14
   1ae78:	cmp	r0, r1, lsl #13
   1ae7c:	adc	r2, r2, r2
   1ae80:	subcs	r0, r0, r1, lsl #13
   1ae84:	cmp	r0, r1, lsl #12
   1ae88:	adc	r2, r2, r2
   1ae8c:	subcs	r0, r0, r1, lsl #12
   1ae90:	cmp	r0, r1, lsl #11
   1ae94:	adc	r2, r2, r2
   1ae98:	subcs	r0, r0, r1, lsl #11
   1ae9c:	cmp	r0, r1, lsl #10
   1aea0:	adc	r2, r2, r2
   1aea4:	subcs	r0, r0, r1, lsl #10
   1aea8:	cmp	r0, r1, lsl #9
   1aeac:	adc	r2, r2, r2
   1aeb0:	subcs	r0, r0, r1, lsl #9
   1aeb4:	cmp	r0, r1, lsl #8
   1aeb8:	adc	r2, r2, r2
   1aebc:	subcs	r0, r0, r1, lsl #8
   1aec0:	cmp	r0, r1, lsl #7
   1aec4:	adc	r2, r2, r2
   1aec8:	subcs	r0, r0, r1, lsl #7
   1aecc:	cmp	r0, r1, lsl #6
   1aed0:	adc	r2, r2, r2
   1aed4:	subcs	r0, r0, r1, lsl #6
   1aed8:	cmp	r0, r1, lsl #5
   1aedc:	adc	r2, r2, r2
   1aee0:	subcs	r0, r0, r1, lsl #5
   1aee4:	cmp	r0, r1, lsl #4
   1aee8:	adc	r2, r2, r2
   1aeec:	subcs	r0, r0, r1, lsl #4
   1aef0:	cmp	r0, r1, lsl #3
   1aef4:	adc	r2, r2, r2
   1aef8:	subcs	r0, r0, r1, lsl #3
   1aefc:	cmp	r0, r1, lsl #2
   1af00:	adc	r2, r2, r2
   1af04:	subcs	r0, r0, r1, lsl #2
   1af08:	cmp	r0, r1, lsl #1
   1af0c:	adc	r2, r2, r2
   1af10:	subcs	r0, r0, r1, lsl #1
   1af14:	cmp	r0, r1
   1af18:	adc	r2, r2, r2
   1af1c:	subcs	r0, r0, r1
   1af20:	mov	r0, r2
   1af24:	bx	lr
   1af28:	moveq	r0, #1
   1af2c:	movne	r0, #0
   1af30:	bx	lr
   1af34:	clz	r2, r1
   1af38:	rsb	r2, r2, #31
   1af3c:	lsr	r0, r0, r2
   1af40:	bx	lr
   1af44:	cmp	r0, #0
   1af48:	mvnne	r0, #0
   1af4c:	b	1b2c0 <__assert_fail@plt+0x9eac>
   1af50:	cmp	r1, #0
   1af54:	beq	1af44 <__assert_fail@plt+0x9b30>
   1af58:	push	{r0, r1, lr}
   1af5c:	bl	1ad64 <__assert_fail@plt+0x9950>
   1af60:	pop	{r1, r2, lr}
   1af64:	mul	r3, r2, r0
   1af68:	sub	r1, r1, r3
   1af6c:	bx	lr
   1af70:	cmp	r1, #0
   1af74:	beq	1b180 <__assert_fail@plt+0x9d6c>
   1af78:	eor	ip, r0, r1
   1af7c:	rsbmi	r1, r1, #0
   1af80:	subs	r2, r1, #1
   1af84:	beq	1b14c <__assert_fail@plt+0x9d38>
   1af88:	movs	r3, r0
   1af8c:	rsbmi	r3, r0, #0
   1af90:	cmp	r3, r1
   1af94:	bls	1b158 <__assert_fail@plt+0x9d44>
   1af98:	tst	r1, r2
   1af9c:	beq	1b168 <__assert_fail@plt+0x9d54>
   1afa0:	clz	r2, r3
   1afa4:	clz	r0, r1
   1afa8:	sub	r2, r0, r2
   1afac:	rsbs	r2, r2, #31
   1afb0:	addne	r2, r2, r2, lsl #1
   1afb4:	mov	r0, #0
   1afb8:	addne	pc, pc, r2, lsl #2
   1afbc:	nop			; (mov r0, r0)
   1afc0:	cmp	r3, r1, lsl #31
   1afc4:	adc	r0, r0, r0
   1afc8:	subcs	r3, r3, r1, lsl #31
   1afcc:	cmp	r3, r1, lsl #30
   1afd0:	adc	r0, r0, r0
   1afd4:	subcs	r3, r3, r1, lsl #30
   1afd8:	cmp	r3, r1, lsl #29
   1afdc:	adc	r0, r0, r0
   1afe0:	subcs	r3, r3, r1, lsl #29
   1afe4:	cmp	r3, r1, lsl #28
   1afe8:	adc	r0, r0, r0
   1afec:	subcs	r3, r3, r1, lsl #28
   1aff0:	cmp	r3, r1, lsl #27
   1aff4:	adc	r0, r0, r0
   1aff8:	subcs	r3, r3, r1, lsl #27
   1affc:	cmp	r3, r1, lsl #26
   1b000:	adc	r0, r0, r0
   1b004:	subcs	r3, r3, r1, lsl #26
   1b008:	cmp	r3, r1, lsl #25
   1b00c:	adc	r0, r0, r0
   1b010:	subcs	r3, r3, r1, lsl #25
   1b014:	cmp	r3, r1, lsl #24
   1b018:	adc	r0, r0, r0
   1b01c:	subcs	r3, r3, r1, lsl #24
   1b020:	cmp	r3, r1, lsl #23
   1b024:	adc	r0, r0, r0
   1b028:	subcs	r3, r3, r1, lsl #23
   1b02c:	cmp	r3, r1, lsl #22
   1b030:	adc	r0, r0, r0
   1b034:	subcs	r3, r3, r1, lsl #22
   1b038:	cmp	r3, r1, lsl #21
   1b03c:	adc	r0, r0, r0
   1b040:	subcs	r3, r3, r1, lsl #21
   1b044:	cmp	r3, r1, lsl #20
   1b048:	adc	r0, r0, r0
   1b04c:	subcs	r3, r3, r1, lsl #20
   1b050:	cmp	r3, r1, lsl #19
   1b054:	adc	r0, r0, r0
   1b058:	subcs	r3, r3, r1, lsl #19
   1b05c:	cmp	r3, r1, lsl #18
   1b060:	adc	r0, r0, r0
   1b064:	subcs	r3, r3, r1, lsl #18
   1b068:	cmp	r3, r1, lsl #17
   1b06c:	adc	r0, r0, r0
   1b070:	subcs	r3, r3, r1, lsl #17
   1b074:	cmp	r3, r1, lsl #16
   1b078:	adc	r0, r0, r0
   1b07c:	subcs	r3, r3, r1, lsl #16
   1b080:	cmp	r3, r1, lsl #15
   1b084:	adc	r0, r0, r0
   1b088:	subcs	r3, r3, r1, lsl #15
   1b08c:	cmp	r3, r1, lsl #14
   1b090:	adc	r0, r0, r0
   1b094:	subcs	r3, r3, r1, lsl #14
   1b098:	cmp	r3, r1, lsl #13
   1b09c:	adc	r0, r0, r0
   1b0a0:	subcs	r3, r3, r1, lsl #13
   1b0a4:	cmp	r3, r1, lsl #12
   1b0a8:	adc	r0, r0, r0
   1b0ac:	subcs	r3, r3, r1, lsl #12
   1b0b0:	cmp	r3, r1, lsl #11
   1b0b4:	adc	r0, r0, r0
   1b0b8:	subcs	r3, r3, r1, lsl #11
   1b0bc:	cmp	r3, r1, lsl #10
   1b0c0:	adc	r0, r0, r0
   1b0c4:	subcs	r3, r3, r1, lsl #10
   1b0c8:	cmp	r3, r1, lsl #9
   1b0cc:	adc	r0, r0, r0
   1b0d0:	subcs	r3, r3, r1, lsl #9
   1b0d4:	cmp	r3, r1, lsl #8
   1b0d8:	adc	r0, r0, r0
   1b0dc:	subcs	r3, r3, r1, lsl #8
   1b0e0:	cmp	r3, r1, lsl #7
   1b0e4:	adc	r0, r0, r0
   1b0e8:	subcs	r3, r3, r1, lsl #7
   1b0ec:	cmp	r3, r1, lsl #6
   1b0f0:	adc	r0, r0, r0
   1b0f4:	subcs	r3, r3, r1, lsl #6
   1b0f8:	cmp	r3, r1, lsl #5
   1b0fc:	adc	r0, r0, r0
   1b100:	subcs	r3, r3, r1, lsl #5
   1b104:	cmp	r3, r1, lsl #4
   1b108:	adc	r0, r0, r0
   1b10c:	subcs	r3, r3, r1, lsl #4
   1b110:	cmp	r3, r1, lsl #3
   1b114:	adc	r0, r0, r0
   1b118:	subcs	r3, r3, r1, lsl #3
   1b11c:	cmp	r3, r1, lsl #2
   1b120:	adc	r0, r0, r0
   1b124:	subcs	r3, r3, r1, lsl #2
   1b128:	cmp	r3, r1, lsl #1
   1b12c:	adc	r0, r0, r0
   1b130:	subcs	r3, r3, r1, lsl #1
   1b134:	cmp	r3, r1
   1b138:	adc	r0, r0, r0
   1b13c:	subcs	r3, r3, r1
   1b140:	cmp	ip, #0
   1b144:	rsbmi	r0, r0, #0
   1b148:	bx	lr
   1b14c:	teq	ip, r0
   1b150:	rsbmi	r0, r0, #0
   1b154:	bx	lr
   1b158:	movcc	r0, #0
   1b15c:	asreq	r0, ip, #31
   1b160:	orreq	r0, r0, #1
   1b164:	bx	lr
   1b168:	clz	r2, r1
   1b16c:	rsb	r2, r2, #31
   1b170:	cmp	ip, #0
   1b174:	lsr	r0, r3, r2
   1b178:	rsbmi	r0, r0, #0
   1b17c:	bx	lr
   1b180:	cmp	r0, #0
   1b184:	mvngt	r0, #-2147483648	; 0x80000000
   1b188:	movlt	r0, #-2147483648	; 0x80000000
   1b18c:	b	1b2c0 <__assert_fail@plt+0x9eac>
   1b190:	cmp	r1, #0
   1b194:	beq	1b180 <__assert_fail@plt+0x9d6c>
   1b198:	push	{r0, r1, lr}
   1b19c:	bl	1af78 <__assert_fail@plt+0x9b64>
   1b1a0:	pop	{r1, r2, lr}
   1b1a4:	mul	r3, r2, r0
   1b1a8:	sub	r1, r1, r3
   1b1ac:	bx	lr
   1b1b0:	cmp	r3, #0
   1b1b4:	cmpeq	r2, #0
   1b1b8:	bne	1b1dc <__assert_fail@plt+0x9dc8>
   1b1bc:	cmp	r1, #0
   1b1c0:	movlt	r1, #-2147483648	; 0x80000000
   1b1c4:	movlt	r0, #0
   1b1c8:	blt	1b1d8 <__assert_fail@plt+0x9dc4>
   1b1cc:	cmpeq	r0, #0
   1b1d0:	mvnne	r1, #-2147483648	; 0x80000000
   1b1d4:	mvnne	r0, #0
   1b1d8:	b	1b2c0 <__assert_fail@plt+0x9eac>
   1b1dc:	sub	sp, sp, #8
   1b1e0:	push	{sp, lr}
   1b1e4:	cmp	r1, #0
   1b1e8:	blt	1b208 <__assert_fail@plt+0x9df4>
   1b1ec:	cmp	r3, #0
   1b1f0:	blt	1b23c <__assert_fail@plt+0x9e28>
   1b1f4:	bl	1b2d0 <__assert_fail@plt+0x9ebc>
   1b1f8:	ldr	lr, [sp, #4]
   1b1fc:	add	sp, sp, #8
   1b200:	pop	{r2, r3}
   1b204:	bx	lr
   1b208:	rsbs	r0, r0, #0
   1b20c:	sbc	r1, r1, r1, lsl #1
   1b210:	cmp	r3, #0
   1b214:	blt	1b260 <__assert_fail@plt+0x9e4c>
   1b218:	bl	1b2d0 <__assert_fail@plt+0x9ebc>
   1b21c:	ldr	lr, [sp, #4]
   1b220:	add	sp, sp, #8
   1b224:	pop	{r2, r3}
   1b228:	rsbs	r0, r0, #0
   1b22c:	sbc	r1, r1, r1, lsl #1
   1b230:	rsbs	r2, r2, #0
   1b234:	sbc	r3, r3, r3, lsl #1
   1b238:	bx	lr
   1b23c:	rsbs	r2, r2, #0
   1b240:	sbc	r3, r3, r3, lsl #1
   1b244:	bl	1b2d0 <__assert_fail@plt+0x9ebc>
   1b248:	ldr	lr, [sp, #4]
   1b24c:	add	sp, sp, #8
   1b250:	pop	{r2, r3}
   1b254:	rsbs	r0, r0, #0
   1b258:	sbc	r1, r1, r1, lsl #1
   1b25c:	bx	lr
   1b260:	rsbs	r2, r2, #0
   1b264:	sbc	r3, r3, r3, lsl #1
   1b268:	bl	1b2d0 <__assert_fail@plt+0x9ebc>
   1b26c:	ldr	lr, [sp, #4]
   1b270:	add	sp, sp, #8
   1b274:	pop	{r2, r3}
   1b278:	rsbs	r2, r2, #0
   1b27c:	sbc	r3, r3, r3, lsl #1
   1b280:	bx	lr
   1b284:	cmp	r3, #0
   1b288:	cmpeq	r2, #0
   1b28c:	bne	1b2a4 <__assert_fail@plt+0x9e90>
   1b290:	cmp	r1, #0
   1b294:	cmpeq	r0, #0
   1b298:	mvnne	r1, #0
   1b29c:	mvnne	r0, #0
   1b2a0:	b	1b2c0 <__assert_fail@plt+0x9eac>
   1b2a4:	sub	sp, sp, #8
   1b2a8:	push	{sp, lr}
   1b2ac:	bl	1b2d0 <__assert_fail@plt+0x9ebc>
   1b2b0:	ldr	lr, [sp, #4]
   1b2b4:	add	sp, sp, #8
   1b2b8:	pop	{r2, r3}
   1b2bc:	bx	lr
   1b2c0:	push	{r1, lr}
   1b2c4:	mov	r0, #8
   1b2c8:	bl	110c0 <raise@plt>
   1b2cc:	pop	{r1, pc}
   1b2d0:	cmp	r1, r3
   1b2d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b2d8:	cmpeq	r0, r2
   1b2dc:	mov	r4, r0
   1b2e0:	mov	r5, r1
   1b2e4:	ldr	r9, [sp, #28]
   1b2e8:	movcc	r0, #0
   1b2ec:	movcc	r1, #0
   1b2f0:	bcc	1b3e8 <__assert_fail@plt+0x9fd4>
   1b2f4:	cmp	r3, #0
   1b2f8:	clzeq	ip, r2
   1b2fc:	clzne	ip, r3
   1b300:	addeq	ip, ip, #32
   1b304:	cmp	r5, #0
   1b308:	clzeq	r1, r4
   1b30c:	addeq	r1, r1, #32
   1b310:	clzne	r1, r5
   1b314:	sub	ip, ip, r1
   1b318:	sub	lr, ip, #32
   1b31c:	lsl	r7, r3, ip
   1b320:	rsb	r8, ip, #32
   1b324:	orr	r7, r7, r2, lsl lr
   1b328:	orr	r7, r7, r2, lsr r8
   1b32c:	lsl	r6, r2, ip
   1b330:	cmp	r5, r7
   1b334:	cmpeq	r4, r6
   1b338:	movcc	r0, #0
   1b33c:	movcc	r1, #0
   1b340:	bcc	1b35c <__assert_fail@plt+0x9f48>
   1b344:	mov	r3, #1
   1b348:	subs	r4, r4, r6
   1b34c:	lsl	r1, r3, lr
   1b350:	lsl	r0, r3, ip
   1b354:	orr	r1, r1, r3, lsr r8
   1b358:	sbc	r5, r5, r7
   1b35c:	cmp	ip, #0
   1b360:	beq	1b3e8 <__assert_fail@plt+0x9fd4>
   1b364:	lsrs	r3, r7, #1
   1b368:	rrx	r2, r6
   1b36c:	mov	r6, ip
   1b370:	b	1b394 <__assert_fail@plt+0x9f80>
   1b374:	subs	r4, r4, r2
   1b378:	sbc	r5, r5, r3
   1b37c:	adds	r4, r4, r4
   1b380:	adc	r5, r5, r5
   1b384:	adds	r4, r4, #1
   1b388:	adc	r5, r5, #0
   1b38c:	subs	r6, r6, #1
   1b390:	beq	1b3b0 <__assert_fail@plt+0x9f9c>
   1b394:	cmp	r5, r3
   1b398:	cmpeq	r4, r2
   1b39c:	bcs	1b374 <__assert_fail@plt+0x9f60>
   1b3a0:	adds	r4, r4, r4
   1b3a4:	adc	r5, r5, r5
   1b3a8:	subs	r6, r6, #1
   1b3ac:	bne	1b394 <__assert_fail@plt+0x9f80>
   1b3b0:	lsr	r6, r4, ip
   1b3b4:	lsr	r7, r5, ip
   1b3b8:	orr	r6, r6, r5, lsl r8
   1b3bc:	adds	r2, r0, r4
   1b3c0:	orr	r6, r6, r5, lsr lr
   1b3c4:	adc	r3, r1, r5
   1b3c8:	lsl	r1, r7, ip
   1b3cc:	orr	r1, r1, r6, lsl lr
   1b3d0:	lsl	r0, r6, ip
   1b3d4:	orr	r1, r1, r6, lsr r8
   1b3d8:	subs	r0, r2, r0
   1b3dc:	mov	r4, r6
   1b3e0:	mov	r5, r7
   1b3e4:	sbc	r1, r3, r1
   1b3e8:	cmp	r9, #0
   1b3ec:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b3f0:	strd	r4, [r9]
   1b3f4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b3f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b3fc:	mov	r7, r0
   1b400:	ldr	r6, [pc, #72]	; 1b450 <__assert_fail@plt+0xa03c>
   1b404:	ldr	r5, [pc, #72]	; 1b454 <__assert_fail@plt+0xa040>
   1b408:	add	r6, pc, r6
   1b40c:	add	r5, pc, r5
   1b410:	sub	r6, r6, r5
   1b414:	mov	r8, r1
   1b418:	mov	r9, r2
   1b41c:	bl	1107c <fstatfs64@plt-0x20>
   1b420:	asrs	r6, r6, #2
   1b424:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b428:	mov	r4, #0
   1b42c:	add	r4, r4, #1
   1b430:	ldr	r3, [r5], #4
   1b434:	mov	r2, r9
   1b438:	mov	r1, r8
   1b43c:	mov	r0, r7
   1b440:	blx	r3
   1b444:	cmp	r6, r4
   1b448:	bne	1b42c <__assert_fail@plt+0xa018>
   1b44c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b450:	andeq	r1, r1, r0, lsl #22
   1b454:	strdeq	r1, [r1], -r8
   1b458:	bx	lr
   1b45c:	ldr	r3, [pc, #12]	; 1b470 <__assert_fail@plt+0xa05c>
   1b460:	mov	r1, #0
   1b464:	add	r3, pc, r3
   1b468:	ldr	r2, [r3]
   1b46c:	b	112e8 <__cxa_atexit@plt>
   1b470:	ldrdeq	r1, [r1], -r8

Disassembly of section .fini:

0001b474 <.fini>:
   1b474:	push	{r3, lr}
   1b478:	pop	{r3, pc}
