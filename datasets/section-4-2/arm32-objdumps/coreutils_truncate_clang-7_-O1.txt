
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	11058 <__assert_fail@plt+0x48>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r6, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #90112	; 0x16000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <fputs_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #90112	; 0x16000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #90112	; 0x16000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <strcmp@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #90112	; 0x16000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <fflush@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #90112	; 0x16000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <free@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #90112	; 0x16000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <_exit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #90112	; 0x16000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <memcpy@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #90112	; 0x16000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <mbsinit@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #90112	; 0x16000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <ftruncate64@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #90112	; 0x16000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <memcmp@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #90112	; 0x16000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <dcgettext@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #90112	; 0x16000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #90112	; 0x16000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <textdomain@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #90112	; 0x16000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <iswprint@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #90112	; 0x16000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <__fxstat64@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #90112	; 0x16000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <fwrite@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #90112	; 0x16000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <lseek64@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #90112	; 0x16000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <__ctype_get_mb_cur_max@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #90112	; 0x16000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <__fpending@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #90112	; 0x16000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <ferror_unlocked@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #90112	; 0x16000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <mbrtowc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #90112	; 0x16000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <error@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #90112	; 0x16000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <open64@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #90112	; 0x16000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <malloc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #90112	; 0x16000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <__libc_start_main@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #90112	; 0x16000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <__freading@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #90112	; 0x16000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <__gmon_start__@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #90112	; 0x16000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <getopt_long@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #90112	; 0x16000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <__ctype_b_loc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #90112	; 0x16000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #90112	; 0x16000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <strlen@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #90112	; 0x16000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <strchr@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #90112	; 0x16000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__errno_location@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #90112	; 0x16000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <__cxa_atexit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #90112	; 0x16000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <memset@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #90112	; 0x16000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <__printf_chk@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #90112	; 0x16000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <fileno@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #90112	; 0x16000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <__fprintf_chk@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #90112	; 0x16000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <strtoimax@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #90112	; 0x16000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <fclose@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #90112	; 0x16000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <fseeko64@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #90112	; 0x16000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <setlocale@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #90112	; 0x16000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <strrchr@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #90112	; 0x16000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <nl_langinfo@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #90112	; 0x16000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <bindtextdomain@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #90112	; 0x16000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <__xstat64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #90112	; 0x16000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <strncmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #90112	; 0x16000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <abort@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #90112	; 0x16000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <close@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #90112	; 0x16000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <__assert_fail@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #90112	; 0x16000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

Disassembly of section .text:

0001101c <.text>:
   1101c:	mov	fp, #0
   11020:	mov	lr, #0
   11024:	pop	{r1}		; (ldr r1, [sp], #4)
   11028:	mov	r2, sp
   1102c:	push	{r2}		; (str r2, [sp, #-4]!)
   11030:	push	{r0}		; (str r0, [sp, #-4]!)
   11034:	ldr	ip, [pc, #16]	; 1104c <__assert_fail@plt+0x3c>
   11038:	push	{ip}		; (str ip, [sp, #-4]!)
   1103c:	ldr	r0, [pc, #12]	; 11050 <__assert_fail@plt+0x40>
   11040:	ldr	r3, [pc, #12]	; 11054 <__assert_fail@plt+0x44>
   11044:	bl	10ee4 <__libc_start_main@plt>
   11048:	bl	10ff8 <abort@plt>
   1104c:	andeq	r5, r1, r4, asr #15
   11050:	andeq	r1, r1, r4, asr r4
   11054:	andeq	r5, r1, r4, ror #14
   11058:	ldr	r3, [pc, #20]	; 11074 <__assert_fail@plt+0x64>
   1105c:	ldr	r2, [pc, #20]	; 11078 <__assert_fail@plt+0x68>
   11060:	add	r3, pc, r3
   11064:	ldr	r2, [r3, r2]
   11068:	cmp	r2, #0
   1106c:	bxeq	lr
   11070:	b	10efc <__gmon_start__@plt>
   11074:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11078:	ldrdeq	r0, [r0], -r8
   1107c:	ldr	r0, [pc, #24]	; 1109c <__assert_fail@plt+0x8c>
   11080:	ldr	r3, [pc, #24]	; 110a0 <__assert_fail@plt+0x90>
   11084:	cmp	r3, r0
   11088:	bxeq	lr
   1108c:	ldr	r3, [pc, #16]	; 110a4 <__assert_fail@plt+0x94>
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	bx	r3
   1109c:	andeq	r7, r2, r0, lsr r1
   110a0:	andeq	r7, r2, r0, lsr r1
   110a4:	andeq	r0, r0, r0
   110a8:	ldr	r0, [pc, #36]	; 110d4 <__assert_fail@plt+0xc4>
   110ac:	ldr	r1, [pc, #36]	; 110d8 <__assert_fail@plt+0xc8>
   110b0:	sub	r1, r1, r0
   110b4:	asr	r1, r1, #2
   110b8:	add	r1, r1, r1, lsr #31
   110bc:	asrs	r1, r1, #1
   110c0:	bxeq	lr
   110c4:	ldr	r3, [pc, #16]	; 110dc <__assert_fail@plt+0xcc>
   110c8:	cmp	r3, #0
   110cc:	bxeq	lr
   110d0:	bx	r3
   110d4:	andeq	r7, r2, r0, lsr r1
   110d8:	andeq	r7, r2, r0, lsr r1
   110dc:	andeq	r0, r0, r0
   110e0:	push	{r4, lr}
   110e4:	ldr	r4, [pc, #24]	; 11104 <__assert_fail@plt+0xf4>
   110e8:	ldrb	r3, [r4]
   110ec:	cmp	r3, #0
   110f0:	popne	{r4, pc}
   110f4:	bl	1107c <__assert_fail@plt+0x6c>
   110f8:	mov	r3, #1
   110fc:	strb	r3, [r4]
   11100:	pop	{r4, pc}
   11104:	andeq	r7, r2, ip, asr #2
   11108:	b	110a8 <__assert_fail@plt+0x98>
   1110c:	push	{fp, lr}
   11110:	mov	fp, sp
   11114:	mov	r4, r0
   11118:	cmp	r0, #0
   1111c:	bne	1122c <__assert_fail@plt+0x21c>
   11120:	movw	r1, #22579	; 0x5833
   11124:	movt	r1, #1
   11128:	mov	r0, #0
   1112c:	mov	r2, #5
   11130:	bl	10e3c <dcgettext@plt>
   11134:	mov	r1, r0
   11138:	movw	r0, #29024	; 0x7160
   1113c:	movt	r0, #2
   11140:	ldr	r2, [r0]
   11144:	mov	r0, #1
   11148:	bl	10f68 <__printf_chk@plt>
   1114c:	movw	r1, #22608	; 0x5850
   11150:	movt	r1, #1
   11154:	mov	r0, #0
   11158:	mov	r2, #5
   1115c:	bl	10e3c <dcgettext@plt>
   11160:	movw	r5, #28996	; 0x7144
   11164:	movt	r5, #2
   11168:	ldr	r1, [r5]
   1116c:	bl	10dc4 <fputs_unlocked@plt>
   11170:	bl	11270 <__assert_fail@plt+0x260>
   11174:	movw	r1, #22883	; 0x5963
   11178:	movt	r1, #1
   1117c:	mov	r0, #0
   11180:	mov	r2, #5
   11184:	bl	10e3c <dcgettext@plt>
   11188:	ldr	r1, [r5]
   1118c:	bl	10dc4 <fputs_unlocked@plt>
   11190:	movw	r1, #22933	; 0x5995
   11194:	movt	r1, #1
   11198:	mov	r0, #0
   1119c:	mov	r2, #5
   111a0:	bl	10e3c <dcgettext@plt>
   111a4:	ldr	r1, [r5]
   111a8:	bl	10dc4 <fputs_unlocked@plt>
   111ac:	movw	r1, #23010	; 0x59e2
   111b0:	movt	r1, #1
   111b4:	mov	r0, #0
   111b8:	mov	r2, #5
   111bc:	bl	10e3c <dcgettext@plt>
   111c0:	ldr	r1, [r5]
   111c4:	bl	10dc4 <fputs_unlocked@plt>
   111c8:	movw	r1, #23122	; 0x5a52
   111cc:	movt	r1, #1
   111d0:	mov	r0, #0
   111d4:	mov	r2, #5
   111d8:	bl	10e3c <dcgettext@plt>
   111dc:	ldr	r1, [r5]
   111e0:	bl	10dc4 <fputs_unlocked@plt>
   111e4:	movw	r1, #23167	; 0x5a7f
   111e8:	movt	r1, #1
   111ec:	mov	r0, #0
   111f0:	mov	r2, #5
   111f4:	bl	10e3c <dcgettext@plt>
   111f8:	ldr	r1, [r5]
   111fc:	bl	10dc4 <fputs_unlocked@plt>
   11200:	bl	112a0 <__assert_fail@plt+0x290>
   11204:	movw	r1, #23221	; 0x5ab5
   11208:	movt	r1, #1
   1120c:	mov	r0, #0
   11210:	mov	r2, #5
   11214:	bl	10e3c <dcgettext@plt>
   11218:	ldr	r1, [r5]
   1121c:	bl	10dc4 <fputs_unlocked@plt>
   11220:	bl	112d0 <__assert_fail@plt+0x2c0>
   11224:	mov	r0, r4
   11228:	bl	10f20 <exit@plt>
   1122c:	movw	r0, #28992	; 0x7140
   11230:	movt	r0, #2
   11234:	ldr	r5, [r0]
   11238:	movw	r1, #22540	; 0x580c
   1123c:	movt	r1, #1
   11240:	mov	r0, #0
   11244:	mov	r2, #5
   11248:	bl	10e3c <dcgettext@plt>
   1124c:	mov	r2, r0
   11250:	movw	r0, #29024	; 0x7160
   11254:	movt	r0, #2
   11258:	ldr	r3, [r0]
   1125c:	mov	r0, r5
   11260:	mov	r1, #1
   11264:	bl	10f80 <__fprintf_chk@plt>
   11268:	mov	r0, r4
   1126c:	bl	10f20 <exit@plt>
   11270:	push	{fp, lr}
   11274:	mov	fp, sp
   11278:	movw	r1, #23807	; 0x5cff
   1127c:	movt	r1, #1
   11280:	mov	r0, #0
   11284:	mov	r2, #5
   11288:	bl	10e3c <dcgettext@plt>
   1128c:	movw	r1, #28996	; 0x7144
   11290:	movt	r1, #2
   11294:	ldr	r1, [r1]
   11298:	pop	{fp, lr}
   1129c:	b	10dc4 <fputs_unlocked@plt>
   112a0:	push	{fp, lr}
   112a4:	mov	fp, sp
   112a8:	movw	r1, #23882	; 0x5d4a
   112ac:	movt	r1, #1
   112b0:	mov	r0, #0
   112b4:	mov	r2, #5
   112b8:	bl	10e3c <dcgettext@plt>
   112bc:	movw	r1, #28996	; 0x7144
   112c0:	movt	r1, #2
   112c4:	ldr	r1, [r1]
   112c8:	pop	{fp, lr}
   112cc:	b	10dc4 <fputs_unlocked@plt>
   112d0:	push	{r4, r5, fp, lr}
   112d4:	add	fp, sp, #8
   112d8:	sub	sp, sp, #56	; 0x38
   112dc:	movw	r0, #24720	; 0x6090
   112e0:	movt	r0, #1
   112e4:	add	r1, r0, #32
   112e8:	mov	r5, sp
   112ec:	mov	r2, #48	; 0x30
   112f0:	vld1.64	{d16-d17}, [r1]
   112f4:	add	r1, r5, #32
   112f8:	add	r3, r0, #16
   112fc:	vld1.64	{d18-d19}, [r0], r2
   11300:	vld1.64	{d20-d21}, [r3]
   11304:	vldr	d22, [r0]
   11308:	vst1.64	{d16-d17}, [r1]
   1130c:	add	r0, r5, #16
   11310:	vst1.64	{d20-d21}, [r0]
   11314:	mov	r0, r5
   11318:	vst1.64	{d18-d19}, [r0], r2
   1131c:	vstr	d22, [r0]
   11320:	ldr	r1, [sp]
   11324:	cmp	r1, #0
   11328:	beq	11350 <__assert_fail@plt+0x340>
   1132c:	mov	r5, sp
   11330:	movw	r4, #23412	; 0x5b74
   11334:	movt	r4, #1
   11338:	mov	r0, r4
   1133c:	bl	10ddc <strcmp@plt>
   11340:	cmp	r0, #0
   11344:	ldrne	r1, [r5, #8]!
   11348:	cmpne	r1, #0
   1134c:	bne	11338 <__assert_fail@plt+0x328>
   11350:	ldr	r4, [r5, #4]
   11354:	movw	r1, #24189	; 0x5e7d
   11358:	movt	r1, #1
   1135c:	mov	r0, #0
   11360:	mov	r2, #5
   11364:	bl	10e3c <dcgettext@plt>
   11368:	mov	r1, r0
   1136c:	movw	r2, #23536	; 0x5bf0
   11370:	movt	r2, #1
   11374:	movw	r3, #24212	; 0x5e94
   11378:	movt	r3, #1
   1137c:	mov	r0, #1
   11380:	bl	10f68 <__printf_chk@plt>
   11384:	movw	r5, #23412	; 0x5b74
   11388:	movt	r5, #1
   1138c:	cmp	r4, #0
   11390:	moveq	r4, r5
   11394:	mov	r0, #5
   11398:	mov	r1, #0
   1139c:	bl	10fb0 <setlocale@plt>
   113a0:	cmp	r0, #0
   113a4:	beq	113e4 <__assert_fail@plt+0x3d4>
   113a8:	movw	r1, #24252	; 0x5ebc
   113ac:	movt	r1, #1
   113b0:	mov	r2, #3
   113b4:	bl	10fec <strncmp@plt>
   113b8:	cmp	r0, #0
   113bc:	beq	113e4 <__assert_fail@plt+0x3d4>
   113c0:	movw	r1, #24256	; 0x5ec0
   113c4:	movt	r1, #1
   113c8:	mov	r0, #0
   113cc:	mov	r2, #5
   113d0:	bl	10e3c <dcgettext@plt>
   113d4:	movw	r1, #28996	; 0x7144
   113d8:	movt	r1, #2
   113dc:	ldr	r1, [r1]
   113e0:	bl	10dc4 <fputs_unlocked@plt>
   113e4:	movw	r1, #24327	; 0x5f07
   113e8:	movt	r1, #1
   113ec:	mov	r0, #0
   113f0:	mov	r2, #5
   113f4:	bl	10e3c <dcgettext@plt>
   113f8:	mov	r1, r0
   113fc:	movw	r2, #24212	; 0x5e94
   11400:	movt	r2, #1
   11404:	mov	r0, #1
   11408:	mov	r3, r5
   1140c:	bl	10f68 <__printf_chk@plt>
   11410:	movw	r1, #24354	; 0x5f22
   11414:	movt	r1, #1
   11418:	mov	r0, #0
   1141c:	mov	r2, #5
   11420:	bl	10e3c <dcgettext@plt>
   11424:	mov	r1, r0
   11428:	movw	r0, #24122	; 0x5e3a
   1142c:	movt	r0, #1
   11430:	movw	r3, #24404	; 0x5f54
   11434:	movt	r3, #1
   11438:	cmp	r4, r5
   1143c:	moveq	r3, r0
   11440:	mov	r0, #1
   11444:	mov	r2, r4
   11448:	bl	10f68 <__printf_chk@plt>
   1144c:	sub	sp, fp, #8
   11450:	pop	{r4, r5, fp, pc}
   11454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11458:	add	fp, sp, #28
   1145c:	sub	sp, sp, #156	; 0x9c
   11460:	str	r0, [sp, #32]
   11464:	str	r1, [sp, #24]
   11468:	ldr	r0, [r1]
   1146c:	bl	12130 <__assert_fail@plt+0x1120>
   11470:	movw	r1, #24404	; 0x5f54
   11474:	movt	r1, #1
   11478:	mov	r0, #6
   1147c:	bl	10fb0 <setlocale@plt>
   11480:	movw	r4, #23540	; 0x5bf4
   11484:	movt	r4, #1
   11488:	movw	r1, #23421	; 0x5b7d
   1148c:	movt	r1, #1
   11490:	mov	r0, r4
   11494:	bl	10fd4 <bindtextdomain@plt>
   11498:	mov	r0, r4
   1149c:	bl	10e54 <textdomain@plt>
   114a0:	movw	r0, #8264	; 0x2048
   114a4:	movt	r0, #1
   114a8:	bl	157c8 <__assert_fail@plt+0x47b8>
   114ac:	mov	r6, #0
   114b0:	movw	r4, #29000	; 0x7148
   114b4:	movt	r4, #2
   114b8:	movw	r8, #29012	; 0x7154
   114bc:	movt	r8, #2
   114c0:	mov	r0, #0
   114c4:	str	r0, [sp, #44]	; 0x2c
   114c8:	mov	sl, #0
   114cc:	movw	r9, #23445	; 0x5b95
   114d0:	movt	r9, #1
   114d4:	ldr	r5, [sp, #24]
   114d8:	ldr	r7, [sp, #32]
   114dc:	b	114e8 <__assert_fail@plt+0x4d8>
   114e0:	mov	r1, #1
   114e4:	strb	r1, [r0]
   114e8:	str	r6, [sp]
   114ec:	mov	r0, r7
   114f0:	mov	r1, r5
   114f4:	mov	r2, r9
   114f8:	movw	r3, #24608	; 0x6020
   114fc:	movt	r3, #1
   11500:	bl	10f08 <getopt_long@plt>
   11504:	cmp	r0, #98	; 0x62
   11508:	ble	11788 <__assert_fail@plt+0x778>
   1150c:	sub	r0, r0, #99	; 0x63
   11510:	cmp	r0, #16
   11514:	bhi	11a78 <__assert_fail@plt+0xa68>
   11518:	add	r1, pc, #0
   1151c:	ldr	pc, [r1, r0, lsl #2]
   11520:	andeq	r1, r1, r4, ror #10
   11524:	andeq	r1, r1, r8, ror sl
   11528:	andeq	r1, r1, r8, ror sl
   1152c:	andeq	r1, r1, r8, ror sl
   11530:	andeq	r1, r1, r8, ror sl
   11534:	andeq	r1, r1, r8, ror sl
   11538:	andeq	r1, r1, r8, ror sl
   1153c:	andeq	r1, r1, r8, ror sl
   11540:	andeq	r1, r1, r8, ror sl
   11544:	andeq	r1, r1, r8, ror sl
   11548:	andeq	r1, r1, r8, ror sl
   1154c:	andeq	r1, r1, r8, ror sl
   11550:	andeq	r1, r1, r0, ror r5
   11554:	andeq	r1, r1, r8, ror sl
   11558:	andeq	r1, r1, r8, ror sl
   1155c:	andeq	r1, r1, ip, ror r5
   11560:	andeq	r1, r1, r8, lsl #11
   11564:	movw	r0, #29008	; 0x7150
   11568:	movt	r0, #2
   1156c:	b	114e0 <__assert_fail@plt+0x4d0>
   11570:	movw	r0, #29009	; 0x7151
   11574:	movt	r0, #2
   11578:	b	114e0 <__assert_fail@plt+0x4d0>
   1157c:	ldr	r0, [r4]
   11580:	str	r0, [r8]
   11584:	b	114e8 <__assert_fail@plt+0x4d8>
   11588:	bl	10f14 <__ctype_b_loc@plt>
   1158c:	mov	r5, r0
   11590:	ldr	r7, [r0]
   11594:	ldr	r6, [r4]
   11598:	ldrb	r0, [r6]
   1159c:	bl	11bb8 <__assert_fail@plt+0xba8>
   115a0:	add	r1, r7, r0, lsl #1
   115a4:	ldrb	r1, [r1, #1]
   115a8:	tst	r1, #32
   115ac:	beq	115d8 <__assert_fail@plt+0x5c8>
   115b0:	add	r6, r6, #1
   115b4:	str	r6, [r4]
   115b8:	ldr	r7, [r5]
   115bc:	ldrb	r0, [r6], #1
   115c0:	bl	11bb8 <__assert_fail@plt+0xba8>
   115c4:	add	r1, r7, r0, lsl #1
   115c8:	ldrb	r1, [r1, #1]
   115cc:	tst	r1, #32
   115d0:	bne	115b4 <__assert_fail@plt+0x5a4>
   115d4:	sub	r6, r6, #1
   115d8:	sub	r1, r0, #37	; 0x25
   115dc:	cmp	r1, #25
   115e0:	bhi	11678 <__assert_fail@plt+0x668>
   115e4:	mov	r0, #3
   115e8:	add	r2, pc, #0
   115ec:	ldr	pc, [r2, r1, lsl #2]
   115f0:	andeq	r1, r1, r8, asr r6
   115f4:	andeq	r1, r1, r8, ror r6
   115f8:	andeq	r1, r1, r8, ror r6
   115fc:	andeq	r1, r1, r8, ror r6
   11600:	andeq	r1, r1, r8, ror r6
   11604:	andeq	r1, r1, r8, ror r6
   11608:	andeq	r1, r1, r8, ror r6
   1160c:	andeq	r1, r1, r8, ror r6
   11610:	andeq	r1, r1, r8, ror r6
   11614:	andeq	r1, r1, r8, ror r6
   11618:	andeq	r1, r1, r0, ror #12
   1161c:	andeq	r1, r1, r8, ror r6
   11620:	andeq	r1, r1, r8, ror r6
   11624:	andeq	r1, r1, r8, ror r6
   11628:	andeq	r1, r1, r8, ror r6
   1162c:	andeq	r1, r1, r8, ror r6
   11630:	andeq	r1, r1, r8, ror r6
   11634:	andeq	r1, r1, r8, ror r6
   11638:	andeq	r1, r1, r8, ror r6
   1163c:	andeq	r1, r1, r8, ror r6
   11640:	andeq	r1, r1, r8, ror r6
   11644:	andeq	r1, r1, r8, ror r6
   11648:	andeq	r1, r1, r8, ror r6
   1164c:	andeq	r1, r1, ip, ror #12
   11650:	andeq	r1, r1, r8, ror r6
   11654:	andeq	r1, r1, r8, ror #12
   11658:	mov	r0, #5
   1165c:	b	1166c <__assert_fail@plt+0x65c>
   11660:	mov	r0, #4
   11664:	b	1166c <__assert_fail@plt+0x65c>
   11668:	mov	r0, #2
   1166c:	add	r1, r6, #1
   11670:	str	r1, [r4]
   11674:	str	r0, [sp, #44]	; 0x2c
   11678:	ldr	r7, [r5]
   1167c:	ldr	r6, [r4]
   11680:	ldrb	r0, [r6]
   11684:	bl	11bb8 <__assert_fail@plt+0xba8>
   11688:	add	r1, r7, r0, lsl #1
   1168c:	ldrb	r1, [r1, #1]
   11690:	tst	r1, #32
   11694:	beq	116c0 <__assert_fail@plt+0x6b0>
   11698:	add	r6, r6, #1
   1169c:	str	r6, [r4]
   116a0:	ldr	r7, [r5]
   116a4:	ldrb	r0, [r6], #1
   116a8:	bl	11bb8 <__assert_fail@plt+0xba8>
   116ac:	add	r1, r7, r0, lsl #1
   116b0:	ldrb	r1, [r1, #1]
   116b4:	tst	r1, #32
   116b8:	bne	1169c <__assert_fail@plt+0x68c>
   116bc:	sub	r6, r6, #1
   116c0:	cmp	r0, #45	; 0x2d
   116c4:	cmpne	r0, #43	; 0x2b
   116c8:	bne	116e0 <__assert_fail@plt+0x6d0>
   116cc:	mov	r9, #1
   116d0:	ldr	r0, [sp, #44]	; 0x2c
   116d4:	cmp	r0, #0
   116d8:	beq	116e4 <__assert_fail@plt+0x6d4>
   116dc:	b	11a80 <__assert_fail@plt+0xa70>
   116e0:	ldr	r9, [sp, #44]	; 0x2c
   116e4:	mov	r0, #0
   116e8:	movw	r1, #23504	; 0x5bd0
   116ec:	movt	r1, #1
   116f0:	mov	r2, #5
   116f4:	bl	10e3c <dcgettext@plt>
   116f8:	mvn	r1, #0
   116fc:	str	r1, [sp]
   11700:	mvn	r1, #-2147483648	; 0x80000000
   11704:	str	r1, [sp, #4]
   11708:	movw	r1, #23490	; 0x5bc2
   1170c:	movt	r1, #1
   11710:	str	r1, [sp, #8]
   11714:	str	r0, [sp, #12]
   11718:	mov	r0, #0
   1171c:	str	r0, [sp, #16]
   11720:	mov	r0, r6
   11724:	mov	r6, #0
   11728:	mov	r2, #0
   1172c:	mov	r3, #-2147483648	; 0x80000000
   11730:	bl	14738 <__assert_fail@plt+0x3728>
   11734:	str	r0, [sp, #40]	; 0x28
   11738:	str	r1, [sp, #36]	; 0x24
   1173c:	orr	r0, r9, #1
   11740:	mov	sl, #1
   11744:	cmp	r0, #5
   11748:	str	r9, [sp, #44]	; 0x2c
   1174c:	bne	114cc <__assert_fail@plt+0x4bc>
   11750:	ldr	r0, [sp, #40]	; 0x28
   11754:	ldr	r1, [sp, #36]	; 0x24
   11758:	orrs	r0, r0, r1
   1175c:	str	r9, [sp, #44]	; 0x2c
   11760:	bne	114cc <__assert_fail@plt+0x4bc>
   11764:	movw	r1, #23519	; 0x5bdf
   11768:	movt	r1, #1
   1176c:	mov	r0, #0
   11770:	mov	r2, #5
   11774:	bl	10e3c <dcgettext@plt>
   11778:	mov	r2, r0
   1177c:	mov	r0, #1
   11780:	mov	r1, #0
   11784:	bl	10ec0 <error@plt>
   11788:	cmn	r0, #1
   1178c:	bne	11a18 <__assert_fail@plt+0xa08>
   11790:	ldr	r0, [r8]
   11794:	cmp	r0, #0
   11798:	mov	r1, r0
   1179c:	movwne	r1, #1
   117a0:	orr	r1, sl, r1
   117a4:	tst	r1, #1
   117a8:	beq	11a8c <__assert_fail@plt+0xa7c>
   117ac:	movw	r1, #28984	; 0x7138
   117b0:	movt	r1, #2
   117b4:	ldr	r6, [r1]
   117b8:	cmp	r0, #0
   117bc:	beq	117d4 <__assert_fail@plt+0x7c4>
   117c0:	ldr	r1, [sp, #44]	; 0x2c
   117c4:	cmp	r1, #0
   117c8:	eoreq	r1, sl, #1
   117cc:	tsteq	r1, #1
   117d0:	beq	11afc <__assert_fail@plt+0xaec>
   117d4:	movw	r1, #29009	; 0x7151
   117d8:	movt	r1, #2
   117dc:	ldrb	r1, [r1]
   117e0:	mvn	r1, r1
   117e4:	orr	r1, sl, r1
   117e8:	tst	r1, #1
   117ec:	beq	11a98 <__assert_fail@plt+0xa88>
   117f0:	cmp	r6, r7
   117f4:	bge	11ad0 <__assert_fail@plt+0xac0>
   117f8:	mvn	r1, #0
   117fc:	str	r1, [sp, #32]
   11800:	cmp	r0, #0
   11804:	beq	11840 <__assert_fail@plt+0x830>
   11808:	add	r1, sp, #48	; 0x30
   1180c:	bl	157e0 <__assert_fail@plt+0x47d0>
   11810:	cmp	r0, #0
   11814:	bne	11b58 <__assert_fail@plt+0xb48>
   11818:	add	r0, sp, #48	; 0x30
   1181c:	bl	11bbc <__assert_fail@plt+0xbac>
   11820:	cmp	r0, #0
   11824:	beq	1184c <__assert_fail@plt+0x83c>
   11828:	ldr	r0, [sp, #100]	; 0x64
   1182c:	cmn	r0, #1
   11830:	ble	11b78 <__assert_fail@plt+0xb68>
   11834:	mov	r2, r0
   11838:	ldr	r4, [sp, #96]	; 0x60
   1183c:	b	118ac <__assert_fail@plt+0x89c>
   11840:	mvn	r0, #0
   11844:	str	r0, [sp, #28]
   11848:	b	118e0 <__assert_fail@plt+0x8d0>
   1184c:	ldr	r0, [r8]
   11850:	mov	r1, #0
   11854:	bl	10ecc <open64@plt>
   11858:	cmp	r0, #0
   1185c:	blt	11b78 <__assert_fail@plt+0xb68>
   11860:	mov	r9, r0
   11864:	mov	r0, #2
   11868:	str	r0, [sp]
   1186c:	mov	r0, r9
   11870:	mov	r2, #0
   11874:	mov	r3, #0
   11878:	bl	10e84 <lseek64@plt>
   1187c:	mov	r4, r0
   11880:	mov	r7, r1
   11884:	bl	10f44 <__errno_location@plt>
   11888:	mov	r5, r0
   1188c:	ldr	r8, [r0]
   11890:	mov	r0, r9
   11894:	bl	11004 <close@plt>
   11898:	mvn	r1, #0
   1189c:	subs	r0, r1, r4
   118a0:	sbcs	r0, r1, r7
   118a4:	bge	11b6c <__assert_fail@plt+0xb5c>
   118a8:	mov	r2, r7
   118ac:	ldr	r5, [sp, #24]
   118b0:	ands	r0, sl, #1
   118b4:	ldr	r0, [sp, #36]	; 0x24
   118b8:	moveq	r0, r2
   118bc:	str	r0, [sp, #36]	; 0x24
   118c0:	ldr	r0, [sp, #40]	; 0x28
   118c4:	moveq	r0, r4
   118c8:	str	r0, [sp, #40]	; 0x28
   118cc:	mvn	r0, #0
   118d0:	moveq	r2, r0
   118d4:	str	r2, [sp, #28]
   118d8:	movne	r0, r4
   118dc:	str	r0, [sp, #32]
   118e0:	ldr	sl, [r5, r6, lsl #2]
   118e4:	movw	r0, #29008	; 0x7150
   118e8:	movt	r0, #2
   118ec:	ldrb	r0, [r0]
   118f0:	movw	r4, #2113	; 0x841
   118f4:	cmp	r0, #0
   118f8:	movwne	r4, #2049	; 0x801
   118fc:	cmp	sl, #0
   11900:	beq	11a08 <__assert_fail@plt+0x9f8>
   11904:	add	r0, r5, r6, lsl #2
   11908:	add	r7, r0, #4
   1190c:	mov	r5, #0
   11910:	mov	r0, sl
   11914:	mov	r1, r4
   11918:	movw	r2, #438	; 0x1b6
   1191c:	bl	10ecc <open64@plt>
   11920:	cmn	r0, #1
   11924:	ble	11984 <__assert_fail@plt+0x974>
   11928:	mov	r8, r0
   1192c:	ldr	r0, [sp, #32]
   11930:	str	r0, [sp]
   11934:	ldr	r0, [sp, #28]
   11938:	str	r0, [sp, #4]
   1193c:	ldr	r0, [sp, #44]	; 0x2c
   11940:	str	r0, [sp, #8]
   11944:	mov	r0, r8
   11948:	mov	r1, sl
   1194c:	ldr	r2, [sp, #40]	; 0x28
   11950:	ldr	r3, [sp, #36]	; 0x24
   11954:	bl	11bd8 <__assert_fail@plt+0xbc8>
   11958:	mov	r9, r0
   1195c:	mov	r0, r8
   11960:	bl	11004 <close@plt>
   11964:	cmp	r0, #0
   11968:	beq	119f0 <__assert_fail@plt+0x9e0>
   1196c:	bl	10f44 <__errno_location@plt>
   11970:	ldr	r5, [r0]
   11974:	mov	r0, #0
   11978:	movw	r1, #23788	; 0x5cec
   1197c:	movt	r1, #1
   11980:	b	119bc <__assert_fail@plt+0x9ac>
   11984:	movw	r0, #29008	; 0x7150
   11988:	movt	r0, #2
   1198c:	ldrb	r0, [r0]
   11990:	cmp	r0, #1
   11994:	bne	119a8 <__assert_fail@plt+0x998>
   11998:	bl	10f44 <__errno_location@plt>
   1199c:	ldr	r0, [r0]
   119a0:	cmp	r0, #2
   119a4:	beq	119f8 <__assert_fail@plt+0x9e8>
   119a8:	bl	10f44 <__errno_location@plt>
   119ac:	ldr	r5, [r0]
   119b0:	mov	r0, #0
   119b4:	movw	r1, #23761	; 0x5cd1
   119b8:	movt	r1, #1
   119bc:	mov	r2, #5
   119c0:	bl	10e3c <dcgettext@plt>
   119c4:	mov	r6, r0
   119c8:	mov	r0, #4
   119cc:	mov	r1, sl
   119d0:	bl	13774 <__assert_fail@plt+0x2764>
   119d4:	mov	r3, r0
   119d8:	mov	r0, #0
   119dc:	mov	r1, r5
   119e0:	mov	r2, r6
   119e4:	bl	10ec0 <error@plt>
   119e8:	mov	r5, #1
   119ec:	b	119f8 <__assert_fail@plt+0x9e8>
   119f0:	eor	r0, r9, #1
   119f4:	orr	r5, r5, r0
   119f8:	ldr	sl, [r7], #4
   119fc:	cmp	sl, #0
   11a00:	bne	11910 <__assert_fail@plt+0x900>
   11a04:	b	11a0c <__assert_fail@plt+0x9fc>
   11a08:	mov	r5, #0
   11a0c:	and	r0, r5, #1
   11a10:	sub	sp, fp, #28
   11a14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a18:	cmn	r0, #3
   11a1c:	bne	11a68 <__assert_fail@plt+0xa58>
   11a20:	movw	r0, #28904	; 0x70e8
   11a24:	movt	r0, #2
   11a28:	ldr	r3, [r0]
   11a2c:	movw	r0, #28996	; 0x7144
   11a30:	movt	r0, #2
   11a34:	ldr	r0, [r0]
   11a38:	mov	r1, #0
   11a3c:	movw	r2, #23550	; 0x5bfe
   11a40:	movt	r2, #1
   11a44:	str	r2, [sp]
   11a48:	str	r1, [sp, #4]
   11a4c:	movw	r1, #23412	; 0x5b74
   11a50:	movt	r1, #1
   11a54:	movw	r2, #23536	; 0x5bf0
   11a58:	movt	r2, #1
   11a5c:	bl	14138 <__assert_fail@plt+0x3128>
   11a60:	mov	r0, #0
   11a64:	bl	10f20 <exit@plt>
   11a68:	cmn	r0, #2
   11a6c:	bne	11a78 <__assert_fail@plt+0xa68>
   11a70:	mov	r0, #0
   11a74:	bl	1110c <__assert_fail@plt+0xfc>
   11a78:	mov	r0, #1
   11a7c:	bl	1110c <__assert_fail@plt+0xfc>
   11a80:	movw	r1, #23452	; 0x5b9c
   11a84:	movt	r1, #1
   11a88:	b	11ad8 <__assert_fail@plt+0xac8>
   11a8c:	movw	r1, #23564	; 0x5c0c
   11a90:	movt	r1, #1
   11a94:	b	11b04 <__assert_fail@plt+0xaf4>
   11a98:	movw	r1, #23655	; 0x5c67
   11a9c:	movt	r1, #1
   11aa0:	mov	r0, #0
   11aa4:	mov	r2, #5
   11aa8:	bl	10e3c <dcgettext@plt>
   11aac:	mov	r4, r0
   11ab0:	movw	r1, #23687	; 0x5c87
   11ab4:	movt	r1, #1
   11ab8:	mov	r0, #0
   11abc:	bl	13960 <__assert_fail@plt+0x2950>
   11ac0:	mov	r5, r0
   11ac4:	movw	r1, #23597	; 0x5c2d
   11ac8:	movt	r1, #1
   11acc:	b	11b30 <__assert_fail@plt+0xb20>
   11ad0:	movw	r1, #23699	; 0x5c93
   11ad4:	movt	r1, #1
   11ad8:	mov	r0, #0
   11adc:	mov	r2, #5
   11ae0:	bl	10e3c <dcgettext@plt>
   11ae4:	mov	r2, r0
   11ae8:	mov	r0, #0
   11aec:	mov	r1, #0
   11af0:	bl	10ec0 <error@plt>
   11af4:	mov	r0, #1
   11af8:	bl	1110c <__assert_fail@plt+0xfc>
   11afc:	movw	r1, #23616	; 0x5c40
   11b00:	movt	r1, #1
   11b04:	mov	r0, #0
   11b08:	mov	r2, #5
   11b0c:	bl	10e3c <dcgettext@plt>
   11b10:	mov	r4, r0
   11b14:	movw	r1, #23597	; 0x5c2d
   11b18:	movt	r1, #1
   11b1c:	mov	r0, #0
   11b20:	bl	13960 <__assert_fail@plt+0x2950>
   11b24:	mov	r5, r0
   11b28:	movw	r1, #23604	; 0x5c34
   11b2c:	movt	r1, #1
   11b30:	mov	r0, #1
   11b34:	bl	13960 <__assert_fail@plt+0x2950>
   11b38:	str	r0, [sp]
   11b3c:	mov	r0, #0
   11b40:	mov	r1, #0
   11b44:	mov	r2, r4
   11b48:	mov	r3, r5
   11b4c:	bl	10ec0 <error@plt>
   11b50:	mov	r0, #1
   11b54:	bl	1110c <__assert_fail@plt+0xfc>
   11b58:	bl	10f44 <__errno_location@plt>
   11b5c:	ldr	r4, [r0]
   11b60:	movw	r1, #23720	; 0x5ca8
   11b64:	movt	r1, #1
   11b68:	b	11b88 <__assert_fail@plt+0xb78>
   11b6c:	str	r8, [r5]
   11b70:	movw	r8, #29012	; 0x7154
   11b74:	movt	r8, #2
   11b78:	bl	10f44 <__errno_location@plt>
   11b7c:	ldr	r4, [r0]
   11b80:	movw	r1, #23735	; 0x5cb7
   11b84:	movt	r1, #1
   11b88:	mov	r0, #0
   11b8c:	mov	r2, #5
   11b90:	bl	10e3c <dcgettext@plt>
   11b94:	mov	r5, r0
   11b98:	ldr	r1, [r8]
   11b9c:	mov	r0, #4
   11ba0:	bl	13774 <__assert_fail@plt+0x2764>
   11ba4:	mov	r3, r0
   11ba8:	mov	r0, #1
   11bac:	mov	r1, r4
   11bb0:	mov	r2, r5
   11bb4:	bl	10ec0 <error@plt>
   11bb8:	bx	lr
   11bbc:	ldr	r0, [r0, #16]
   11bc0:	and	r0, r0, #53248	; 0xd000
   11bc4:	orr	r0, r0, #8192	; 0x2000
   11bc8:	cmp	r0, #40960	; 0xa000
   11bcc:	moveq	r0, #1
   11bd0:	movne	r0, #0
   11bd4:	bx	lr
   11bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bdc:	add	fp, sp, #28
   11be0:	sub	sp, sp, #132	; 0x84
   11be4:	mov	r9, r3
   11be8:	mov	sl, r2
   11bec:	mov	r8, r1
   11bf0:	mov	r6, r0
   11bf4:	movw	r5, #29009	; 0x7151
   11bf8:	movt	r5, #2
   11bfc:	ldrb	r0, [r5]
   11c00:	ldr	r7, [fp, #12]
   11c04:	ldr	r4, [fp, #16]
   11c08:	cmp	r0, #0
   11c0c:	bne	11c20 <__assert_fail@plt+0xc10>
   11c10:	cmn	r7, #1
   11c14:	bgt	11ccc <__assert_fail@plt+0xcbc>
   11c18:	cmp	r4, #0
   11c1c:	beq	11ccc <__assert_fail@plt+0xcbc>
   11c20:	add	r1, sp, #24
   11c24:	mov	r0, r6
   11c28:	bl	157f0 <__assert_fail@plt+0x47e0>
   11c2c:	cmp	r0, #0
   11c30:	beq	11c78 <__assert_fail@plt+0xc68>
   11c34:	bl	10f44 <__errno_location@plt>
   11c38:	ldr	r5, [r0]
   11c3c:	mov	r9, #0
   11c40:	movw	r1, #24428	; 0x5f6c
   11c44:	movt	r1, #1
   11c48:	mov	r0, #0
   11c4c:	mov	r2, #5
   11c50:	bl	10e3c <dcgettext@plt>
   11c54:	mov	r6, r0
   11c58:	mov	r0, #4
   11c5c:	mov	r1, r8
   11c60:	bl	13774 <__assert_fail@plt+0x2764>
   11c64:	mov	r3, r0
   11c68:	mov	r0, #0
   11c6c:	mov	r1, r5
   11c70:	mov	r2, r6
   11c74:	b	11fa4 <__assert_fail@plt+0xf94>
   11c78:	ldrb	r0, [r5]
   11c7c:	cmp	r0, #1
   11c80:	bne	11ccc <__assert_fail@plt+0xcbc>
   11c84:	str	r8, [sp, #20]
   11c88:	ldr	r0, [sp, #80]	; 0x50
   11c8c:	mov	r1, #512	; 0x200
   11c90:	cmp	r0, #536870913	; 0x20000001
   11c94:	mov	r8, #512	; 0x200
   11c98:	movcc	r8, r0
   11c9c:	cmp	r0, #0
   11ca0:	movle	r8, r1
   11ca4:	cmn	r8, #1
   11ca8:	ble	11d78 <__assert_fail@plt+0xd68>
   11cac:	cmp	r8, #0
   11cb0:	beq	11f08 <__assert_fail@plt+0xef8>
   11cb4:	cmn	r9, #1
   11cb8:	ble	11edc <__assert_fail@plt+0xecc>
   11cbc:	asr	r3, r8, #31
   11cc0:	mvn	r0, #0
   11cc4:	mvn	r1, #-2147483648	; 0x80000000
   11cc8:	b	11d94 <__assert_fail@plt+0xd84>
   11ccc:	mov	r5, sl
   11cd0:	cmp	r4, #0
   11cd4:	beq	11f24 <__assert_fail@plt+0xf14>
   11cd8:	cmn	r7, #1
   11cdc:	ble	11ce8 <__assert_fail@plt+0xcd8>
   11ce0:	ldr	sl, [fp, #8]
   11ce4:	b	11d40 <__assert_fail@plt+0xd30>
   11ce8:	add	r0, sp, #24
   11cec:	bl	11bbc <__assert_fail@plt+0xbac>
   11cf0:	cmp	r0, #0
   11cf4:	beq	11d0c <__assert_fail@plt+0xcfc>
   11cf8:	ldr	r7, [sp, #76]	; 0x4c
   11cfc:	cmn	r7, #1
   11d00:	ble	11e8c <__assert_fail@plt+0xe7c>
   11d04:	ldr	sl, [sp, #72]	; 0x48
   11d08:	b	11d40 <__assert_fail@plt+0xd30>
   11d0c:	str	r9, [sp, #20]
   11d10:	mov	r0, #2
   11d14:	str	r0, [sp]
   11d18:	mov	r0, r6
   11d1c:	mov	r9, #0
   11d20:	mov	r2, #0
   11d24:	mov	r3, #0
   11d28:	bl	10e84 <lseek64@plt>
   11d2c:	cmn	r1, #1
   11d30:	ble	11ec8 <__assert_fail@plt+0xeb8>
   11d34:	mov	sl, r0
   11d38:	mov	r7, r1
   11d3c:	ldr	r9, [sp, #20]
   11d40:	sub	r0, r4, #2
   11d44:	cmp	r0, #3
   11d48:	bhi	11dac <__assert_fail@plt+0xd9c>
   11d4c:	add	r1, pc, #0
   11d50:	ldr	pc, [r1, r0, lsl #2]
   11d54:	andeq	r1, r1, r4, ror #26
   11d58:			; <UNDEFINED> instruction: 0x00011db8
   11d5c:	andeq	r1, r1, r0, ror #27
   11d60:	andeq	r1, r1, r4, lsl #28
   11d64:	mov	r4, r6
   11d68:	mov	r0, #0
   11d6c:	subs	r1, r5, sl
   11d70:	sbcs	r1, r9, r7
   11d74:	b	11dc8 <__assert_fail@plt+0xdb8>
   11d78:	cmn	r9, #1
   11d7c:	ble	11fbc <__assert_fail@plt+0xfac>
   11d80:	cmn	r8, #1
   11d84:	beq	11f08 <__assert_fail@plt+0xef8>
   11d88:	asr	r3, r8, #31
   11d8c:	mov	r0, #0
   11d90:	mov	r1, #-2147483648	; 0x80000000
   11d94:	mov	r2, r8
   11d98:	bl	15558 <__assert_fail@plt+0x4548>
   11d9c:	subs	r0, r0, sl
   11da0:	sbcs	r0, r1, r9
   11da4:	bge	11f08 <__assert_fail@plt+0xef8>
   11da8:	b	11fdc <__assert_fail@plt+0xfcc>
   11dac:	mov	r4, r6
   11db0:	mov	r0, r9
   11db4:	b	11e30 <__assert_fail@plt+0xe20>
   11db8:	mov	r4, r6
   11dbc:	mov	r0, #0
   11dc0:	subs	r1, sl, r5
   11dc4:	sbcs	r1, r7, r9
   11dc8:	movwlt	r0, #1
   11dcc:	cmp	r0, #0
   11dd0:	movne	r9, r7
   11dd4:	movne	r5, sl
   11dd8:	mov	r3, r9
   11ddc:	b	11f2c <__assert_fail@plt+0xf1c>
   11de0:	mov	r4, r6
   11de4:	mov	r0, sl
   11de8:	mov	r1, r7
   11dec:	mov	r2, r5
   11df0:	mov	r3, r9
   11df4:	bl	15558 <__assert_fail@plt+0x4548>
   11df8:	subs	r5, sl, r2
   11dfc:	sbc	r3, r7, r3
   11e00:	b	11f2c <__assert_fail@plt+0xf1c>
   11e04:	mov	r4, r6
   11e08:	mov	r0, sl
   11e0c:	mov	r1, r7
   11e10:	mov	r2, r5
   11e14:	mov	r3, r9
   11e18:	bl	15558 <__assert_fail@plt+0x4548>
   11e1c:	subs	r5, r5, r2
   11e20:	sbc	r0, r9, r3
   11e24:	orrs	r1, r2, r3
   11e28:	moveq	r5, r1
   11e2c:	moveq	r0, r1
   11e30:	mov	r9, #0
   11e34:	cmn	r7, #1
   11e38:	mov	r1, #0
   11e3c:	movwgt	r1, #1
   11e40:	adds	r5, sl, r5
   11e44:	adc	r3, r7, r0
   11e48:	cmn	r3, #1
   11e4c:	mov	r2, #0
   11e50:	movwgt	r2, #1
   11e54:	subs	r2, r1, r2
   11e58:	movwne	r2, #1
   11e5c:	cmn	r0, #1
   11e60:	mov	r0, #0
   11e64:	movwgt	r0, #1
   11e68:	sub	r0, r1, r0
   11e6c:	clz	r0, r0
   11e70:	lsr	r0, r0, #5
   11e74:	and	r0, r0, r2
   11e78:	cmp	r0, #1
   11e7c:	bne	11f2c <__assert_fail@plt+0xf1c>
   11e80:	movw	r1, #24532	; 0x5fd4
   11e84:	movt	r1, #1
   11e88:	b	11e98 <__assert_fail@plt+0xe88>
   11e8c:	mov	r9, #0
   11e90:	movw	r1, #24490	; 0x5faa
   11e94:	movt	r1, #1
   11e98:	mov	r0, #0
   11e9c:	mov	r2, #5
   11ea0:	bl	10e3c <dcgettext@plt>
   11ea4:	mov	r5, r0
   11ea8:	mov	r0, #4
   11eac:	mov	r1, r8
   11eb0:	bl	13774 <__assert_fail@plt+0x2764>
   11eb4:	mov	r3, r0
   11eb8:	mov	r0, #0
   11ebc:	mov	r1, #0
   11ec0:	mov	r2, r5
   11ec4:	b	11fa4 <__assert_fail@plt+0xf94>
   11ec8:	bl	10f44 <__errno_location@plt>
   11ecc:	ldr	r5, [r0]
   11ed0:	movw	r1, #23735	; 0x5cb7
   11ed4:	movt	r1, #1
   11ed8:	b	11c48 <__assert_fail@plt+0xc38>
   11edc:	and	r0, sl, r9
   11ee0:	cmn	r0, #1
   11ee4:	beq	11f08 <__assert_fail@plt+0xef8>
   11ee8:	mov	r0, #0
   11eec:	mov	r1, #-2147483648	; 0x80000000
   11ef0:	mov	r2, sl
   11ef4:	mov	r3, r9
   11ef8:	bl	15558 <__assert_fail@plt+0x4548>
   11efc:	subs	r0, r0, r8
   11f00:	sbcs	r0, r1, r8, asr #31
   11f04:	blt	11fdc <__assert_fail@plt+0xfcc>
   11f08:	umull	r5, r0, r8, sl
   11f0c:	mla	r0, r8, r9, r0
   11f10:	asr	r1, r8, #31
   11f14:	mla	r9, r1, sl, r0
   11f18:	ldr	r8, [sp, #20]
   11f1c:	cmp	r4, #0
   11f20:	bne	11cd8 <__assert_fail@plt+0xcc8>
   11f24:	mov	r4, r6
   11f28:	mov	r3, r9
   11f2c:	mov	r9, #0
   11f30:	rsbs	r0, r5, #0
   11f34:	rscs	r0, r3, #0
   11f38:	mov	r6, #0
   11f3c:	movwlt	r6, #1
   11f40:	cmp	r6, #0
   11f44:	moveq	r5, r6
   11f48:	movne	r6, r3
   11f4c:	mov	r0, r4
   11f50:	mov	r2, r5
   11f54:	mov	r3, r6
   11f58:	bl	10e24 <ftruncate64@plt>
   11f5c:	cmp	r0, #0
   11f60:	beq	11fb4 <__assert_fail@plt+0xfa4>
   11f64:	bl	10f44 <__errno_location@plt>
   11f68:	ldr	r7, [r0]
   11f6c:	movw	r1, #24567	; 0x5ff7
   11f70:	movt	r1, #1
   11f74:	mov	r0, #0
   11f78:	mov	r2, #5
   11f7c:	bl	10e3c <dcgettext@plt>
   11f80:	mov	r4, r0
   11f84:	mov	r0, #4
   11f88:	mov	r1, r8
   11f8c:	bl	13774 <__assert_fail@plt+0x2764>
   11f90:	mov	r3, r0
   11f94:	stm	sp, {r5, r6}
   11f98:	mov	r0, #0
   11f9c:	mov	r1, r7
   11fa0:	mov	r2, r4
   11fa4:	bl	10ec0 <error@plt>
   11fa8:	mov	r0, r9
   11fac:	sub	sp, fp, #28
   11fb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fb4:	mov	r9, #1
   11fb8:	b	11fa8 <__assert_fail@plt+0xf98>
   11fbc:	asr	r3, r8, #31
   11fc0:	mvn	r0, #0
   11fc4:	mvn	r1, #-2147483648	; 0x80000000
   11fc8:	mov	r2, r8
   11fcc:	bl	15558 <__assert_fail@plt+0x4548>
   11fd0:	subs	r0, sl, r0
   11fd4:	sbcs	r0, r9, r1
   11fd8:	bge	11f08 <__assert_fail@plt+0xef8>
   11fdc:	mov	r4, r9
   11fe0:	mov	r9, #0
   11fe4:	movw	r1, #24444	; 0x5f7c
   11fe8:	movt	r1, #1
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	bl	10e3c <dcgettext@plt>
   11ff8:	mov	r5, r0
   11ffc:	mov	r0, #4
   12000:	ldr	r1, [sp, #20]
   12004:	bl	13774 <__assert_fail@plt+0x2764>
   12008:	str	sl, [sp]
   1200c:	stmib	sp, {r4, r8}
   12010:	str	r0, [sp, #12]
   12014:	mov	r0, #0
   12018:	mov	r1, #0
   1201c:	mov	r2, r5
   12020:	bl	10ec0 <error@plt>
   12024:	b	11fa8 <__assert_fail@plt+0xf98>
   12028:	movw	r1, #29016	; 0x7158
   1202c:	movt	r1, #2
   12030:	str	r0, [r1]
   12034:	bx	lr
   12038:	movw	r1, #29020	; 0x715c
   1203c:	movt	r1, #2
   12040:	strb	r0, [r1]
   12044:	bx	lr
   12048:	push	{r4, r5, r6, sl, fp, lr}
   1204c:	add	fp, sp, #16
   12050:	sub	sp, sp, #8
   12054:	movw	r0, #28996	; 0x7144
   12058:	movt	r0, #2
   1205c:	ldr	r0, [r0]
   12060:	bl	150cc <__assert_fail@plt+0x40bc>
   12064:	cmp	r0, #0
   12068:	beq	12090 <__assert_fail@plt+0x1080>
   1206c:	movw	r0, #29020	; 0x715c
   12070:	movt	r0, #2
   12074:	ldrb	r0, [r0]
   12078:	cmp	r0, #0
   1207c:	beq	120b0 <__assert_fail@plt+0x10a0>
   12080:	bl	10f44 <__errno_location@plt>
   12084:	ldr	r0, [r0]
   12088:	cmp	r0, #32
   1208c:	bne	120b0 <__assert_fail@plt+0x10a0>
   12090:	movw	r0, #28992	; 0x7140
   12094:	movt	r0, #2
   12098:	ldr	r0, [r0]
   1209c:	bl	150cc <__assert_fail@plt+0x40bc>
   120a0:	cmp	r0, #0
   120a4:	subeq	sp, fp, #16
   120a8:	popeq	{r4, r5, r6, sl, fp, pc}
   120ac:	b	12120 <__assert_fail@plt+0x1110>
   120b0:	movw	r1, #24791	; 0x60d7
   120b4:	movt	r1, #1
   120b8:	mov	r0, #0
   120bc:	mov	r2, #5
   120c0:	bl	10e3c <dcgettext@plt>
   120c4:	mov	r4, r0
   120c8:	movw	r0, #29016	; 0x7158
   120cc:	movt	r0, #2
   120d0:	ldr	r6, [r0]
   120d4:	bl	10f44 <__errno_location@plt>
   120d8:	ldr	r5, [r0]
   120dc:	cmp	r6, #0
   120e0:	bne	120fc <__assert_fail@plt+0x10ec>
   120e4:	movw	r2, #24807	; 0x60e7
   120e8:	movt	r2, #1
   120ec:	mov	r0, #0
   120f0:	mov	r1, r5
   120f4:	mov	r3, r4
   120f8:	b	1211c <__assert_fail@plt+0x110c>
   120fc:	mov	r0, r6
   12100:	bl	13818 <__assert_fail@plt+0x2808>
   12104:	mov	r3, r0
   12108:	str	r4, [sp]
   1210c:	movw	r2, #24803	; 0x60e3
   12110:	movt	r2, #1
   12114:	mov	r0, #0
   12118:	mov	r1, r5
   1211c:	bl	10ec0 <error@plt>
   12120:	movw	r0, #28908	; 0x70ec
   12124:	movt	r0, #2
   12128:	ldr	r0, [r0]
   1212c:	bl	10e00 <_exit@plt>
   12130:	push	{r4, r5, fp, lr}
   12134:	add	fp, sp, #8
   12138:	cmp	r0, #0
   1213c:	beq	121d0 <__assert_fail@plt+0x11c0>
   12140:	mov	r4, r0
   12144:	mov	r1, #47	; 0x2f
   12148:	bl	10fbc <strrchr@plt>
   1214c:	cmp	r0, #0
   12150:	mov	r5, r4
   12154:	addne	r5, r0, #1
   12158:	sub	r0, r5, r4
   1215c:	cmp	r0, #7
   12160:	blt	121b4 <__assert_fail@plt+0x11a4>
   12164:	sub	r0, r5, #7
   12168:	movw	r1, #24866	; 0x6122
   1216c:	movt	r1, #1
   12170:	mov	r2, #7
   12174:	bl	10fec <strncmp@plt>
   12178:	cmp	r0, #0
   1217c:	bne	121b4 <__assert_fail@plt+0x11a4>
   12180:	movw	r1, #24874	; 0x612a
   12184:	movt	r1, #1
   12188:	mov	r0, r5
   1218c:	mov	r2, #3
   12190:	bl	10fec <strncmp@plt>
   12194:	cmp	r0, #0
   12198:	beq	121a4 <__assert_fail@plt+0x1194>
   1219c:	mov	r4, r5
   121a0:	b	121b4 <__assert_fail@plt+0x11a4>
   121a4:	add	r4, r5, #3
   121a8:	movw	r0, #28976	; 0x7130
   121ac:	movt	r0, #2
   121b0:	str	r4, [r0]
   121b4:	movw	r0, #28980	; 0x7134
   121b8:	movt	r0, #2
   121bc:	str	r4, [r0]
   121c0:	movw	r0, #29024	; 0x7160
   121c4:	movt	r0, #2
   121c8:	str	r4, [r0]
   121cc:	pop	{r4, r5, fp, pc}
   121d0:	movw	r0, #28992	; 0x7140
   121d4:	movt	r0, #2
   121d8:	ldr	r3, [r0]
   121dc:	movw	r0, #24810	; 0x60ea
   121e0:	movt	r0, #1
   121e4:	mov	r1, #55	; 0x37
   121e8:	mov	r2, #1
   121ec:	bl	10e78 <fwrite@plt>
   121f0:	bl	10ff8 <abort@plt>
   121f4:	push	{r4, r5, r6, sl, fp, lr}
   121f8:	add	fp, sp, #16
   121fc:	mov	r4, r0
   12200:	movw	r0, #29032	; 0x7168
   12204:	movt	r0, #2
   12208:	cmp	r4, #0
   1220c:	moveq	r4, r0
   12210:	bl	10f44 <__errno_location@plt>
   12214:	mov	r5, r0
   12218:	ldr	r6, [r0]
   1221c:	mov	r0, r4
   12220:	mov	r1, #48	; 0x30
   12224:	bl	14534 <__assert_fail@plt+0x3524>
   12228:	str	r6, [r5]
   1222c:	pop	{r4, r5, r6, sl, fp, pc}
   12230:	movw	r1, #29032	; 0x7168
   12234:	movt	r1, #2
   12238:	cmp	r0, #0
   1223c:	movne	r1, r0
   12240:	ldr	r0, [r1]
   12244:	bx	lr
   12248:	movw	r2, #29032	; 0x7168
   1224c:	movt	r2, #2
   12250:	cmp	r0, #0
   12254:	movne	r2, r0
   12258:	str	r1, [r2]
   1225c:	bx	lr
   12260:	movw	r3, #29032	; 0x7168
   12264:	movt	r3, #2
   12268:	cmp	r0, #0
   1226c:	movne	r3, r0
   12270:	ubfx	r0, r1, #5, #3
   12274:	add	r0, r3, r0, lsl #2
   12278:	ldr	r3, [r0, #8]
   1227c:	and	r1, r1, #31
   12280:	eor	r2, r2, r3, lsr r1
   12284:	and	r2, r2, #1
   12288:	eor	r2, r3, r2, lsl r1
   1228c:	str	r2, [r0, #8]
   12290:	mov	r0, #1
   12294:	and	r0, r0, r3, lsr r1
   12298:	bx	lr
   1229c:	movw	r2, #29032	; 0x7168
   122a0:	movt	r2, #2
   122a4:	cmp	r0, #0
   122a8:	movne	r2, r0
   122ac:	ldr	r0, [r2, #4]
   122b0:	str	r1, [r2, #4]
   122b4:	bx	lr
   122b8:	movw	r3, #29032	; 0x7168
   122bc:	movt	r3, #2
   122c0:	cmp	r0, #0
   122c4:	movne	r3, r0
   122c8:	mov	r0, #10
   122cc:	str	r0, [r3]
   122d0:	cmp	r1, #0
   122d4:	cmpne	r2, #0
   122d8:	bne	122e8 <__assert_fail@plt+0x12d8>
   122dc:	push	{fp, lr}
   122e0:	mov	fp, sp
   122e4:	bl	10ff8 <abort@plt>
   122e8:	str	r1, [r3, #40]	; 0x28
   122ec:	str	r2, [r3, #44]	; 0x2c
   122f0:	bx	lr
   122f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122f8:	add	fp, sp, #28
   122fc:	sub	sp, sp, #20
   12300:	mov	r8, r3
   12304:	mov	r9, r2
   12308:	mov	sl, r1
   1230c:	mov	r7, r0
   12310:	ldr	r0, [fp, #8]
   12314:	movw	r5, #29032	; 0x7168
   12318:	movt	r5, #2
   1231c:	cmp	r0, #0
   12320:	movne	r5, r0
   12324:	bl	10f44 <__errno_location@plt>
   12328:	mov	r4, r0
   1232c:	ldm	r5, {r0, r1}
   12330:	ldr	r2, [r5, #40]	; 0x28
   12334:	ldr	r3, [r5, #44]	; 0x2c
   12338:	ldr	r6, [r4]
   1233c:	add	r5, r5, #8
   12340:	stm	sp, {r0, r1, r5}
   12344:	str	r2, [sp, #12]
   12348:	str	r3, [sp, #16]
   1234c:	mov	r0, r7
   12350:	mov	r1, sl
   12354:	mov	r2, r9
   12358:	mov	r3, r8
   1235c:	bl	1236c <__assert_fail@plt+0x135c>
   12360:	str	r6, [r4]
   12364:	sub	sp, fp, #28
   12368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1236c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12370:	add	fp, sp, #28
   12374:	sub	sp, sp, #156	; 0x9c
   12378:	mov	r9, r3
   1237c:	str	r2, [fp, #-84]	; 0xffffffac
   12380:	mov	r6, r1
   12384:	mov	r7, r0
   12388:	ldr	r0, [fp, #12]
   1238c:	and	r1, r0, #4
   12390:	str	r1, [sp, #32]
   12394:	and	r1, r0, #1
   12398:	str	r1, [sp, #36]	; 0x24
   1239c:	ubfx	sl, r0, #1, #1
   123a0:	bl	10e90 <__ctype_get_mb_cur_max@plt>
   123a4:	str	r0, [sp, #40]	; 0x28
   123a8:	ldr	r0, [fp, #24]
   123ac:	str	r0, [sp, #76]	; 0x4c
   123b0:	ldr	r0, [fp, #20]
   123b4:	str	r0, [sp, #68]	; 0x44
   123b8:	ldr	r0, [fp, #8]
   123bc:	str	r0, [fp, #-60]	; 0xffffffc4
   123c0:	mov	r0, #0
   123c4:	str	r0, [sp, #72]	; 0x48
   123c8:	mov	r0, #0
   123cc:	str	r0, [sp, #92]	; 0x5c
   123d0:	mov	r0, #0
   123d4:	str	r0, [fp, #-72]	; 0xffffffb8
   123d8:	mov	r0, #0
   123dc:	mov	r1, #0
   123e0:	str	r1, [fp, #-56]	; 0xffffffc8
   123e4:	mov	r1, #0
   123e8:	str	r1, [sp, #56]	; 0x38
   123ec:	mov	r5, #1
   123f0:	str	r7, [sp, #80]	; 0x50
   123f4:	mov	r4, r6
   123f8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   123fc:	cmp	r6, #10
   12400:	bhi	13368 <__assert_fail@plt+0x2358>
   12404:	add	r1, pc, #20
   12408:	mov	r8, #0
   1240c:	mov	r2, #1
   12410:	mov	r3, #0
   12414:	ldr	ip, [fp, #-84]	; 0xffffffac
   12418:	mov	lr, r9
   1241c:	ldr	pc, [r1, r6, lsl #2]
   12420:	strdeq	r2, [r1], -r8
   12424:	andeq	r2, r1, r8, lsr #10
   12428:	andeq	r2, r1, r8, ror #9
   1242c:	andeq	r2, r1, r0, ror #9
   12430:	andeq	r2, r1, ip, lsl r5
   12434:	andeq	r2, r1, ip, ror r5
   12438:	andeq	r2, r1, r8, lsl #10
   1243c:	ldrdeq	r2, [r1], -r8
   12440:	andeq	r2, r1, ip, asr #8
   12444:	andeq	r2, r1, ip, asr #8
   12448:	andeq	r2, r1, r4, ror r4
   1244c:	movw	r0, #24956	; 0x617c
   12450:	movt	r0, #1
   12454:	mov	r1, r6
   12458:	bl	13974 <__assert_fail@plt+0x2964>
   1245c:	str	r0, [sp, #68]	; 0x44
   12460:	movw	r0, #24958	; 0x617e
   12464:	movt	r0, #1
   12468:	mov	r1, r6
   1246c:	bl	13974 <__assert_fail@plt+0x2964>
   12470:	str	r0, [sp, #76]	; 0x4c
   12474:	mov	r8, #0
   12478:	tst	sl, #1
   1247c:	bne	124b4 <__assert_fail@plt+0x14a4>
   12480:	ldr	r0, [sp, #68]	; 0x44
   12484:	ldrb	r0, [r0]
   12488:	cmp	r0, #0
   1248c:	beq	124b4 <__assert_fail@plt+0x14a4>
   12490:	ldr	r1, [sp, #68]	; 0x44
   12494:	add	r1, r1, #1
   12498:	mov	r8, #0
   1249c:	cmp	r8, r4
   124a0:	strbcc	r0, [r7, r8]
   124a4:	ldrb	r0, [r1, r8]
   124a8:	add	r8, r8, #1
   124ac:	cmp	r0, #0
   124b0:	bne	1249c <__assert_fail@plt+0x148c>
   124b4:	ldr	r6, [sp, #76]	; 0x4c
   124b8:	mov	r0, r6
   124bc:	bl	10f2c <strlen@plt>
   124c0:	str	r0, [fp, #-72]	; 0xffffffb8
   124c4:	str	r6, [sp, #92]	; 0x5c
   124c8:	mov	r2, #1
   124cc:	mov	r3, sl
   124d0:	ldr	ip, [fp, #-84]	; 0xffffffac
   124d4:	mov	lr, r9
   124d8:	ldr	r6, [fp, #-60]	; 0xffffffc4
   124dc:	b	125d8 <__assert_fail@plt+0x15c8>
   124e0:	mov	r0, #1
   124e4:	b	12528 <__assert_fail@plt+0x1518>
   124e8:	tst	sl, #1
   124ec:	bne	12528 <__assert_fail@plt+0x1518>
   124f0:	mov	r2, r0
   124f4:	b	12550 <__assert_fail@plt+0x1540>
   124f8:	mov	r6, #0
   124fc:	mov	r8, #0
   12500:	mov	r2, r0
   12504:	b	125d4 <__assert_fail@plt+0x15c4>
   12508:	mov	r0, #1
   1250c:	str	r0, [fp, #-72]	; 0xffffffb8
   12510:	mov	r8, #0
   12514:	mov	r6, #5
   12518:	b	12594 <__assert_fail@plt+0x1584>
   1251c:	mov	r2, #1
   12520:	tst	sl, #1
   12524:	beq	12550 <__assert_fail@plt+0x1540>
   12528:	mov	r1, #1
   1252c:	str	r1, [fp, #-72]	; 0xffffffb8
   12530:	mov	r8, #0
   12534:	mov	r6, #2
   12538:	movw	r1, #24958	; 0x617e
   1253c:	movt	r1, #1
   12540:	str	r1, [sp, #92]	; 0x5c
   12544:	mov	r2, r0
   12548:	mov	r3, #1
   1254c:	b	125d8 <__assert_fail@plt+0x15c8>
   12550:	mov	r8, #1
   12554:	mov	r6, #2
   12558:	cmp	r4, #0
   1255c:	movne	r0, #39	; 0x27
   12560:	strbne	r0, [r7]
   12564:	movw	r0, #24958	; 0x617e
   12568:	movt	r0, #1
   1256c:	str	r0, [sp, #92]	; 0x5c
   12570:	mov	r0, #1
   12574:	str	r0, [fp, #-72]	; 0xffffffb8
   12578:	b	125d4 <__assert_fail@plt+0x15c4>
   1257c:	mov	r6, #5
   12580:	tst	sl, #1
   12584:	beq	125ac <__assert_fail@plt+0x159c>
   12588:	mov	r0, #1
   1258c:	str	r0, [fp, #-72]	; 0xffffffb8
   12590:	mov	r8, #0
   12594:	movw	r0, #24954	; 0x617a
   12598:	movt	r0, #1
   1259c:	str	r0, [sp, #92]	; 0x5c
   125a0:	mov	r2, #1
   125a4:	mov	r3, #1
   125a8:	b	125d8 <__assert_fail@plt+0x15c8>
   125ac:	cmp	r4, #0
   125b0:	movne	r0, #34	; 0x22
   125b4:	strbne	r0, [r7]
   125b8:	mov	r8, #1
   125bc:	movw	r0, #24954	; 0x617a
   125c0:	movt	r0, #1
   125c4:	str	r0, [sp, #92]	; 0x5c
   125c8:	mov	r0, #1
   125cc:	str	r0, [fp, #-72]	; 0xffffffb8
   125d0:	mov	r2, #1
   125d4:	mov	r3, #0
   125d8:	ldr	r0, [fp, #16]
   125dc:	cmp	r0, #0
   125e0:	movwne	r0, #1
   125e4:	and	r0, r0, r3
   125e8:	str	r0, [fp, #-88]	; 0xffffffa8
   125ec:	ldr	r0, [fp, #-72]	; 0xffffffb8
   125f0:	cmp	r0, #0
   125f4:	movwne	r0, #1
   125f8:	and	r1, r0, r3
   125fc:	and	r1, r2, r1
   12600:	str	r1, [sp, #48]	; 0x30
   12604:	str	r6, [fp, #-60]	; 0xffffffc4
   12608:	subs	r6, r6, #2
   1260c:	clz	r1, r6
   12610:	lsr	r1, r1, #5
   12614:	and	r1, r1, r3
   12618:	str	r1, [sp, #60]	; 0x3c
   1261c:	str	r6, [fp, #-80]	; 0xffffffb0
   12620:	mov	r1, r6
   12624:	movwne	r1, #1
   12628:	str	r3, [fp, #-76]	; 0xffffffb4
   1262c:	eor	r3, r3, #1
   12630:	str	r3, [sp, #88]	; 0x58
   12634:	orr	r3, r1, r3
   12638:	str	r3, [sp, #64]	; 0x40
   1263c:	and	r1, r1, r2
   12640:	str	r1, [fp, #-68]	; 0xffffffbc
   12644:	and	r0, r0, r1
   12648:	str	r0, [fp, #-64]	; 0xffffffc0
   1264c:	str	r2, [sp, #84]	; 0x54
   12650:	eor	r0, r2, #1
   12654:	str	r0, [sp, #52]	; 0x34
   12658:	mov	r6, #0
   1265c:	cmn	lr, #1
   12660:	beq	12670 <__assert_fail@plt+0x1660>
   12664:	cmp	r6, lr
   12668:	bne	1267c <__assert_fail@plt+0x166c>
   1266c:	b	131e8 <__assert_fail@plt+0x21d8>
   12670:	ldrb	r0, [ip, r6]
   12674:	cmp	r0, #0
   12678:	beq	131e8 <__assert_fail@plt+0x21d8>
   1267c:	str	r5, [fp, #-48]	; 0xffffffd0
   12680:	mov	sl, #0
   12684:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12688:	cmp	r0, #0
   1268c:	beq	126c0 <__assert_fail@plt+0x16b0>
   12690:	ldr	r0, [fp, #-72]	; 0xffffffb8
   12694:	add	r5, r6, r0
   12698:	cmp	r0, #2
   1269c:	bcc	126b8 <__assert_fail@plt+0x16a8>
   126a0:	cmn	lr, #1
   126a4:	bne	126b8 <__assert_fail@plt+0x16a8>
   126a8:	mov	r0, ip
   126ac:	bl	10f2c <strlen@plt>
   126b0:	ldr	ip, [fp, #-84]	; 0xffffffac
   126b4:	mov	lr, r0
   126b8:	cmp	r5, lr
   126bc:	bls	126cc <__assert_fail@plt+0x16bc>
   126c0:	mov	r0, #0
   126c4:	str	r0, [fp, #-52]	; 0xffffffcc
   126c8:	b	12718 <__assert_fail@plt+0x1708>
   126cc:	mov	r5, r4
   126d0:	mov	r4, lr
   126d4:	add	r0, ip, r6
   126d8:	ldr	r1, [sp, #92]	; 0x5c
   126dc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   126e0:	bl	10e30 <memcmp@plt>
   126e4:	cmp	r0, #0
   126e8:	mov	r1, r0
   126ec:	movwne	r1, #1
   126f0:	ldr	r2, [sp, #88]	; 0x58
   126f4:	orr	r1, r1, r2
   126f8:	tst	r1, #1
   126fc:	beq	132ac <__assert_fail@plt+0x229c>
   12700:	clz	r0, r0
   12704:	lsr	r0, r0, #5
   12708:	str	r0, [fp, #-52]	; 0xffffffcc
   1270c:	ldr	ip, [fp, #-84]	; 0xffffffac
   12710:	mov	lr, r4
   12714:	mov	r4, r5
   12718:	ldrb	r5, [ip, r6]
   1271c:	cmp	r5, #126	; 0x7e
   12720:	bhi	12adc <__assert_fail@plt+0x1acc>
   12724:	mov	r9, #1
   12728:	mov	r2, #110	; 0x6e
   1272c:	mov	r0, #97	; 0x61
   12730:	add	r3, pc, #4
   12734:	mov	r1, #0
   12738:	ldr	pc, [r3, r5, lsl #2]
   1273c:	ldrdeq	r2, [r1], -r4
   12740:	ldrdeq	r2, [r1], -ip
   12744:	ldrdeq	r2, [r1], -ip
   12748:	ldrdeq	r2, [r1], -ip
   1274c:	ldrdeq	r2, [r1], -ip
   12750:	ldrdeq	r2, [r1], -ip
   12754:	ldrdeq	r2, [r1], -ip
   12758:	andeq	r2, r1, r0, lsr #23
   1275c:			; <UNDEFINED> instruction: 0x000129b4
   12760:	andeq	r2, r1, ip, lsr #19
   12764:	andeq	r2, r1, r0, asr #19
   12768:	andeq	r2, r1, r4, asr #20
   1276c:	andeq	r2, r1, r4, lsr #19
   12770:			; <UNDEFINED> instruction: 0x000129bc
   12774:	ldrdeq	r2, [r1], -ip
   12778:	ldrdeq	r2, [r1], -ip
   1277c:	ldrdeq	r2, [r1], -ip
   12780:	ldrdeq	r2, [r1], -ip
   12784:	ldrdeq	r2, [r1], -ip
   12788:	ldrdeq	r2, [r1], -ip
   1278c:	ldrdeq	r2, [r1], -ip
   12790:	ldrdeq	r2, [r1], -ip
   12794:	ldrdeq	r2, [r1], -ip
   12798:	ldrdeq	r2, [r1], -ip
   1279c:	ldrdeq	r2, [r1], -ip
   127a0:	ldrdeq	r2, [r1], -ip
   127a4:	ldrdeq	r2, [r1], -ip
   127a8:	ldrdeq	r2, [r1], -ip
   127ac:	ldrdeq	r2, [r1], -ip
   127b0:	ldrdeq	r2, [r1], -ip
   127b4:	ldrdeq	r2, [r1], -ip
   127b8:	ldrdeq	r2, [r1], -ip
   127bc:	andeq	r2, r1, r0, asr fp
   127c0:	andeq	r2, r1, r4, asr fp
   127c4:	andeq	r2, r1, r4, asr fp
   127c8:	andeq	r2, r1, ip, asr #18
   127cc:	andeq	r2, r1, r4, asr fp
   127d0:	andeq	r2, r1, r8, lsr r9
   127d4:	andeq	r2, r1, r4, asr fp
   127d8:	andeq	r2, r1, ip, asr #20
   127dc:	andeq	r2, r1, r4, asr fp
   127e0:	andeq	r2, r1, r4, asr fp
   127e4:	andeq	r2, r1, r4, asr fp
   127e8:	andeq	r2, r1, r8, lsr r9
   127ec:	andeq	r2, r1, r8, lsr r9
   127f0:	andeq	r2, r1, r8, lsr r9
   127f4:	andeq	r2, r1, r8, lsr r9
   127f8:	andeq	r2, r1, r8, lsr r9
   127fc:	andeq	r2, r1, r8, lsr r9
   12800:	andeq	r2, r1, r8, lsr r9
   12804:	andeq	r2, r1, r8, lsr r9
   12808:	andeq	r2, r1, r8, lsr r9
   1280c:	andeq	r2, r1, r8, lsr r9
   12810:	andeq	r2, r1, r8, lsr r9
   12814:	andeq	r2, r1, r8, lsr r9
   12818:	andeq	r2, r1, r8, lsr r9
   1281c:	andeq	r2, r1, r8, lsr r9
   12820:	andeq	r2, r1, r8, lsr r9
   12824:	andeq	r2, r1, r8, lsr r9
   12828:	andeq	r2, r1, r4, asr fp
   1282c:	andeq	r2, r1, r4, asr fp
   12830:	andeq	r2, r1, r4, asr fp
   12834:	andeq	r2, r1, r4, asr fp
   12838:	andeq	r2, r1, r4, lsl sl
   1283c:	ldrdeq	r2, [r1], -ip
   12840:	andeq	r2, r1, r8, lsr r9
   12844:	andeq	r2, r1, r8, lsr r9
   12848:	andeq	r2, r1, r8, lsr r9
   1284c:	andeq	r2, r1, r8, lsr r9
   12850:	andeq	r2, r1, r8, lsr r9
   12854:	andeq	r2, r1, r8, lsr r9
   12858:	andeq	r2, r1, r8, lsr r9
   1285c:	andeq	r2, r1, r8, lsr r9
   12860:	andeq	r2, r1, r8, lsr r9
   12864:	andeq	r2, r1, r8, lsr r9
   12868:	andeq	r2, r1, r8, lsr r9
   1286c:	andeq	r2, r1, r8, lsr r9
   12870:	andeq	r2, r1, r8, lsr r9
   12874:	andeq	r2, r1, r8, lsr r9
   12878:	andeq	r2, r1, r8, lsr r9
   1287c:	andeq	r2, r1, r8, lsr r9
   12880:	andeq	r2, r1, r8, lsr r9
   12884:	andeq	r2, r1, r8, lsr r9
   12888:	andeq	r2, r1, r8, lsr r9
   1288c:	andeq	r2, r1, r8, lsr r9
   12890:	andeq	r2, r1, r8, lsr r9
   12894:	andeq	r2, r1, r8, lsr r9
   12898:	andeq	r2, r1, r8, lsr r9
   1289c:	andeq	r2, r1, r8, lsr r9
   128a0:	andeq	r2, r1, r8, lsr r9
   128a4:	andeq	r2, r1, r8, lsr r9
   128a8:	andeq	r2, r1, r4, asr fp
   128ac:	andeq	r2, r1, r0, lsl #19
   128b0:	andeq	r2, r1, r8, lsr r9
   128b4:	andeq	r2, r1, r4, asr fp
   128b8:	andeq	r2, r1, r8, lsr r9
   128bc:	andeq	r2, r1, r4, asr fp
   128c0:	andeq	r2, r1, r8, lsr r9
   128c4:	andeq	r2, r1, r8, lsr r9
   128c8:	andeq	r2, r1, r8, lsr r9
   128cc:	andeq	r2, r1, r8, lsr r9
   128d0:	andeq	r2, r1, r8, lsr r9
   128d4:	andeq	r2, r1, r8, lsr r9
   128d8:	andeq	r2, r1, r8, lsr r9
   128dc:	andeq	r2, r1, r8, lsr r9
   128e0:	andeq	r2, r1, r8, lsr r9
   128e4:	andeq	r2, r1, r8, lsr r9
   128e8:	andeq	r2, r1, r8, lsr r9
   128ec:	andeq	r2, r1, r8, lsr r9
   128f0:	andeq	r2, r1, r8, lsr r9
   128f4:	andeq	r2, r1, r8, lsr r9
   128f8:	andeq	r2, r1, r8, lsr r9
   128fc:	andeq	r2, r1, r8, lsr r9
   12900:	andeq	r2, r1, r8, lsr r9
   12904:	andeq	r2, r1, r8, lsr r9
   12908:	andeq	r2, r1, r8, lsr r9
   1290c:	andeq	r2, r1, r8, lsr r9
   12910:	andeq	r2, r1, r8, lsr r9
   12914:	andeq	r2, r1, r8, lsr r9
   12918:	andeq	r2, r1, r8, lsr r9
   1291c:	andeq	r2, r1, r8, lsr r9
   12920:	andeq	r2, r1, r8, lsr r9
   12924:	andeq	r2, r1, r8, lsr r9
   12928:	andeq	r2, r1, r0, ror #18
   1292c:	andeq	r2, r1, r4, asr fp
   12930:	andeq	r2, r1, r0, ror #18
   12934:	andeq	r2, r1, ip, asr #18
   12938:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1293c:	cmp	r0, #0
   12940:	beq	12bb4 <__assert_fail@plt+0x1ba4>
   12944:	ldr	r0, [fp, #16]
   12948:	b	12bb8 <__assert_fail@plt+0x1ba8>
   1294c:	mov	r9, #0
   12950:	cmp	r6, #0
   12954:	beq	12b50 <__assert_fail@plt+0x1b40>
   12958:	mov	sl, #0
   1295c:	b	12938 <__assert_fail@plt+0x1928>
   12960:	mov	r9, #0
   12964:	cmn	lr, #1
   12968:	beq	12b34 <__assert_fail@plt+0x1b24>
   1296c:	cmp	r6, #0
   12970:	bne	12958 <__assert_fail@plt+0x1948>
   12974:	cmp	lr, #1
   12978:	beq	12b50 <__assert_fail@plt+0x1b40>
   1297c:	b	12958 <__assert_fail@plt+0x1948>
   12980:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12984:	cmp	r0, #2
   12988:	bne	12b7c <__assert_fail@plt+0x1b6c>
   1298c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12990:	tst	r0, #1
   12994:	bne	132c4 <__assert_fail@plt+0x22b4>
   12998:	mov	sl, #0
   1299c:	mov	r0, #92	; 0x5c
   129a0:	b	12b90 <__assert_fail@plt+0x1b80>
   129a4:	mov	r0, #102	; 0x66
   129a8:	b	12ba0 <__assert_fail@plt+0x1b90>
   129ac:	mov	r2, #116	; 0x74
   129b0:	b	129c0 <__assert_fail@plt+0x19b0>
   129b4:	mov	r0, #98	; 0x62
   129b8:	b	12ba0 <__assert_fail@plt+0x1b90>
   129bc:	mov	r2, #114	; 0x72
   129c0:	ldr	r0, [sp, #64]	; 0x40
   129c4:	tst	r0, #1
   129c8:	mov	r0, r2
   129cc:	bne	12ba0 <__assert_fail@plt+0x1b90>
   129d0:	b	132c4 <__assert_fail@plt+0x22b4>
   129d4:	ldr	r0, [sp, #84]	; 0x54
   129d8:	tst	r0, #1
   129dc:	beq	12c90 <__assert_fail@plt+0x1c80>
   129e0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   129e4:	tst	r0, #1
   129e8:	bne	132c4 <__assert_fail@plt+0x22b4>
   129ec:	ldr	r0, [fp, #-60]	; 0xffffffc4
   129f0:	cmp	r0, #2
   129f4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   129f8:	movwne	r0, #1
   129fc:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12a00:	orr	r0, r0, r2
   12a04:	tst	r0, #1
   12a08:	beq	13084 <__assert_fail@plt+0x2074>
   12a0c:	mov	r0, r8
   12a10:	b	130b8 <__assert_fail@plt+0x20a8>
   12a14:	mov	sl, #0
   12a18:	mov	r5, #63	; 0x3f
   12a1c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12a20:	cmp	r0, #5
   12a24:	beq	12e44 <__assert_fail@plt+0x1e34>
   12a28:	cmp	r0, #2
   12a2c:	bne	12ee4 <__assert_fail@plt+0x1ed4>
   12a30:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a34:	tst	r0, #1
   12a38:	mov	r9, #0
   12a3c:	beq	12938 <__assert_fail@plt+0x1928>
   12a40:	b	132c4 <__assert_fail@plt+0x22b4>
   12a44:	mov	r0, #118	; 0x76
   12a48:	b	12ba0 <__assert_fail@plt+0x1b90>
   12a4c:	mov	r5, #39	; 0x27
   12a50:	mov	r0, #1
   12a54:	str	r0, [sp, #56]	; 0x38
   12a58:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12a5c:	cmp	r0, #2
   12a60:	bne	12cb0 <__assert_fail@plt+0x1ca0>
   12a64:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12a68:	tst	r0, #1
   12a6c:	bne	132c4 <__assert_fail@plt+0x22b4>
   12a70:	ldr	r2, [sp, #72]	; 0x48
   12a74:	cmp	r2, #0
   12a78:	mov	r0, r2
   12a7c:	movwne	r0, #1
   12a80:	clz	r1, r4
   12a84:	lsr	r1, r1, #5
   12a88:	orrs	r0, r0, r1
   12a8c:	moveq	r2, r4
   12a90:	str	r2, [sp, #72]	; 0x48
   12a94:	moveq	r4, r0
   12a98:	cmp	r8, r4
   12a9c:	movcc	r0, #39	; 0x27
   12aa0:	strbcc	r0, [r7, r8]
   12aa4:	add	r0, r8, #1
   12aa8:	cmp	r0, r4
   12aac:	movcc	r1, #92	; 0x5c
   12ab0:	strbcc	r1, [r7, r0]
   12ab4:	add	r0, r8, #2
   12ab8:	cmp	r0, r4
   12abc:	movcc	r1, #39	; 0x27
   12ac0:	strbcc	r1, [r7, r0]
   12ac4:	add	r8, r8, #3
   12ac8:	mov	r0, #0
   12acc:	str	r0, [fp, #-56]	; 0xffffffc8
   12ad0:	mov	sl, #0
   12ad4:	mov	r9, #1
   12ad8:	b	12938 <__assert_fail@plt+0x1928>
   12adc:	str	r4, [sp, #24]
   12ae0:	ldr	r0, [sp, #40]	; 0x28
   12ae4:	cmp	r0, #1
   12ae8:	bne	12cb8 <__assert_fail@plt+0x1ca8>
   12aec:	str	lr, [sp, #28]
   12af0:	bl	10f14 <__ctype_b_loc@plt>
   12af4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12af8:	ldr	r0, [r0]
   12afc:	add	r0, r0, r5, lsl #1
   12b00:	ldrb	r0, [r0, #1]
   12b04:	ubfx	r9, r0, #6, #1
   12b08:	mov	r1, #1
   12b0c:	ldr	r4, [sp, #24]
   12b10:	ldr	r0, [sp, #52]	; 0x34
   12b14:	orr	r0, r9, r0
   12b18:	mov	r2, r1
   12b1c:	cmp	r1, #1
   12b20:	bhi	12eec <__assert_fail@plt+0x1edc>
   12b24:	tst	r0, #1
   12b28:	beq	12eec <__assert_fail@plt+0x1edc>
   12b2c:	ldr	lr, [sp, #28]
   12b30:	b	12938 <__assert_fail@plt+0x1928>
   12b34:	cmp	r6, #0
   12b38:	ldrbeq	r0, [ip, #1]
   12b3c:	cmpeq	r0, #0
   12b40:	beq	12b50 <__assert_fail@plt+0x1b40>
   12b44:	mvn	lr, #0
   12b48:	mov	sl, #0
   12b4c:	b	12938 <__assert_fail@plt+0x1928>
   12b50:	mov	r1, #1
   12b54:	ldr	r0, [fp, #-60]	; 0xffffffc4
   12b58:	cmp	r0, #2
   12b5c:	bne	12b74 <__assert_fail@plt+0x1b64>
   12b60:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12b64:	tst	r0, #1
   12b68:	mov	r9, r1
   12b6c:	beq	12938 <__assert_fail@plt+0x1928>
   12b70:	b	132c4 <__assert_fail@plt+0x22b4>
   12b74:	mov	r9, r1
   12b78:	b	12938 <__assert_fail@plt+0x1928>
   12b7c:	mov	sl, #0
   12b80:	mov	r0, #92	; 0x5c
   12b84:	ldr	r1, [sp, #48]	; 0x30
   12b88:	cmp	r1, #0
   12b8c:	beq	12ba0 <__assert_fail@plt+0x1b90>
   12b90:	mov	r9, #0
   12b94:	cmp	sl, #0
   12b98:	beq	13150 <__assert_fail@plt+0x2140>
   12b9c:	b	1318c <__assert_fail@plt+0x217c>
   12ba0:	mov	r9, #0
   12ba4:	ldr	r1, [sp, #84]	; 0x54
   12ba8:	tst	r1, #1
   12bac:	mov	sl, #0
   12bb0:	bne	12bf0 <__assert_fail@plt+0x1be0>
   12bb4:	ldr	r0, [fp, #-88]	; 0xffffffa8
   12bb8:	cmp	r0, #0
   12bbc:	mov	r0, r5
   12bc0:	beq	12be4 <__assert_fail@plt+0x1bd4>
   12bc4:	ubfx	r0, r5, #5, #3
   12bc8:	ldr	r1, [fp, #16]
   12bcc:	ldr	r0, [r1, r0, lsl #2]
   12bd0:	and	r1, r5, #31
   12bd4:	mov	r2, #1
   12bd8:	tst	r0, r2, lsl r1
   12bdc:	mov	r0, r5
   12be0:	bne	12bf0 <__assert_fail@plt+0x1be0>
   12be4:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12be8:	cmp	r1, #0
   12bec:	beq	13148 <__assert_fail@plt+0x2138>
   12bf0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12bf4:	tst	r1, #1
   12bf8:	bne	132c4 <__assert_fail@plt+0x22b4>
   12bfc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   12c00:	cmp	r1, #2
   12c04:	ldr	r1, [fp, #-80]	; 0xffffffb0
   12c08:	movwne	r1, #1
   12c0c:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12c10:	orr	r1, r1, r2
   12c14:	tst	r1, #1
   12c18:	beq	12c24 <__assert_fail@plt+0x1c14>
   12c1c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c20:	b	12c60 <__assert_fail@plt+0x1c50>
   12c24:	cmp	r8, r4
   12c28:	movcc	r1, #39	; 0x27
   12c2c:	strbcc	r1, [r7, r8]
   12c30:	add	r1, r8, #1
   12c34:	cmp	r1, r4
   12c38:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12c3c:	movcc	r2, #36	; 0x24
   12c40:	strbcc	r2, [r7, r1]
   12c44:	add	r1, r8, #2
   12c48:	cmp	r1, r4
   12c4c:	movcc	r2, #39	; 0x27
   12c50:	strbcc	r2, [r7, r1]
   12c54:	add	r8, r8, #3
   12c58:	mov	r1, #1
   12c5c:	str	r1, [fp, #-56]	; 0xffffffc8
   12c60:	cmp	r8, r4
   12c64:	movcc	r1, #92	; 0x5c
   12c68:	strbcc	r1, [r7, r8]
   12c6c:	add	r8, r8, #1
   12c70:	cmp	r8, r4
   12c74:	strbcc	r0, [r7, r8]
   12c78:	and	r5, r5, r9
   12c7c:	add	r8, r8, #1
   12c80:	add	r6, r6, #1
   12c84:	cmn	lr, #1
   12c88:	bne	12664 <__assert_fail@plt+0x1654>
   12c8c:	b	12670 <__assert_fail@plt+0x1660>
   12c90:	mov	r9, #0
   12c94:	ldr	r0, [sp, #36]	; 0x24
   12c98:	cmp	r0, #0
   12c9c:	mov	sl, #0
   12ca0:	mov	r5, #0
   12ca4:	beq	12bb4 <__assert_fail@plt+0x1ba4>
   12ca8:	ldr	r5, [fp, #-48]	; 0xffffffd0
   12cac:	b	12c80 <__assert_fail@plt+0x1c70>
   12cb0:	mov	r9, #1
   12cb4:	b	12938 <__assert_fail@plt+0x1928>
   12cb8:	mov	r0, #0
   12cbc:	str	r0, [fp, #-36]	; 0xffffffdc
   12cc0:	str	r0, [fp, #-40]	; 0xffffffd8
   12cc4:	cmn	lr, #1
   12cc8:	bne	12cdc <__assert_fail@plt+0x1ccc>
   12ccc:	mov	r0, ip
   12cd0:	bl	10f2c <strlen@plt>
   12cd4:	ldr	ip, [fp, #-84]	; 0xffffffac
   12cd8:	mov	lr, r0
   12cdc:	add	r0, ip, r6
   12ce0:	str	r0, [sp, #20]
   12ce4:	mov	r9, #1
   12ce8:	mov	r7, #0
   12cec:	sub	r4, fp, #40	; 0x28
   12cf0:	str	lr, [sp, #28]
   12cf4:	str	r7, [sp, #44]	; 0x2c
   12cf8:	add	r7, r7, r6
   12cfc:	add	r1, ip, r7
   12d00:	sub	r2, lr, r7
   12d04:	sub	r0, fp, #44	; 0x2c
   12d08:	mov	r3, r4
   12d0c:	bl	153b0 <__assert_fail@plt+0x43a0>
   12d10:	cmp	r0, #0
   12d14:	beq	131d4 <__assert_fail@plt+0x21c4>
   12d18:	cmn	r0, #1
   12d1c:	beq	13194 <__assert_fail@plt+0x2184>
   12d20:	cmn	r0, #2
   12d24:	ldr	lr, [sp, #28]
   12d28:	beq	1319c <__assert_fail@plt+0x218c>
   12d2c:	cmp	r0, #2
   12d30:	mov	r1, #0
   12d34:	movwcc	r1, #1
   12d38:	ldr	r2, [sp, #60]	; 0x3c
   12d3c:	eor	r2, r2, #1
   12d40:	orrs	r1, r2, r1
   12d44:	ldr	r4, [sp, #24]
   12d48:	bne	12e08 <__assert_fail@plt+0x1df8>
   12d4c:	ldr	r1, [sp, #44]	; 0x2c
   12d50:	ldr	r2, [sp, #20]
   12d54:	add	r1, r2, r1
   12d58:	mov	r2, #1
   12d5c:	ldrb	r3, [r1, r2]
   12d60:	sub	r3, r3, #91	; 0x5b
   12d64:	cmp	r3, #33	; 0x21
   12d68:	bhi	12dfc <__assert_fail@plt+0x1dec>
   12d6c:	add	r7, pc, #0
   12d70:	ldr	pc, [r7, r3, lsl #2]
   12d74:			; <UNDEFINED> instruction: 0x000132bc
   12d78:			; <UNDEFINED> instruction: 0x000132bc
   12d7c:	strdeq	r2, [r1], -ip
   12d80:			; <UNDEFINED> instruction: 0x000132bc
   12d84:	strdeq	r2, [r1], -ip
   12d88:			; <UNDEFINED> instruction: 0x000132bc
   12d8c:	strdeq	r2, [r1], -ip
   12d90:	strdeq	r2, [r1], -ip
   12d94:	strdeq	r2, [r1], -ip
   12d98:	strdeq	r2, [r1], -ip
   12d9c:	strdeq	r2, [r1], -ip
   12da0:	strdeq	r2, [r1], -ip
   12da4:	strdeq	r2, [r1], -ip
   12da8:	strdeq	r2, [r1], -ip
   12dac:	strdeq	r2, [r1], -ip
   12db0:	strdeq	r2, [r1], -ip
   12db4:	strdeq	r2, [r1], -ip
   12db8:	strdeq	r2, [r1], -ip
   12dbc:	strdeq	r2, [r1], -ip
   12dc0:	strdeq	r2, [r1], -ip
   12dc4:	strdeq	r2, [r1], -ip
   12dc8:	strdeq	r2, [r1], -ip
   12dcc:	strdeq	r2, [r1], -ip
   12dd0:	strdeq	r2, [r1], -ip
   12dd4:	strdeq	r2, [r1], -ip
   12dd8:	strdeq	r2, [r1], -ip
   12ddc:	strdeq	r2, [r1], -ip
   12de0:	strdeq	r2, [r1], -ip
   12de4:	strdeq	r2, [r1], -ip
   12de8:	strdeq	r2, [r1], -ip
   12dec:	strdeq	r2, [r1], -ip
   12df0:	strdeq	r2, [r1], -ip
   12df4:	strdeq	r2, [r1], -ip
   12df8:			; <UNDEFINED> instruction: 0x000132bc
   12dfc:	add	r2, r2, #1
   12e00:	cmp	r2, r0
   12e04:	bcc	12d5c <__assert_fail@plt+0x1d4c>
   12e08:	ldr	r7, [sp, #44]	; 0x2c
   12e0c:	add	r7, r0, r7
   12e10:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12e14:	bl	10e60 <iswprint@plt>
   12e18:	cmp	r0, #0
   12e1c:	movwne	r0, #1
   12e20:	and	r9, r9, r0
   12e24:	sub	r4, fp, #40	; 0x28
   12e28:	mov	r0, r4
   12e2c:	bl	10e18 <mbsinit@plt>
   12e30:	ldr	lr, [sp, #28]
   12e34:	cmp	r0, #0
   12e38:	ldr	ip, [fp, #-84]	; 0xffffffac
   12e3c:	beq	12cf4 <__assert_fail@plt+0x1ce4>
   12e40:	b	131dc <__assert_fail@plt+0x21cc>
   12e44:	ldr	r0, [sp, #32]
   12e48:	cmp	r0, #0
   12e4c:	beq	12ee4 <__assert_fail@plt+0x1ed4>
   12e50:	add	r0, r6, #2
   12e54:	cmp	r0, lr
   12e58:	bcs	12ee4 <__assert_fail@plt+0x1ed4>
   12e5c:	add	r1, ip, r6
   12e60:	ldrb	r1, [r1, #1]
   12e64:	cmp	r1, #63	; 0x3f
   12e68:	bne	12ee4 <__assert_fail@plt+0x1ed4>
   12e6c:	ldrb	r9, [ip, r0]
   12e70:	sub	r2, r9, #33	; 0x21
   12e74:	cmp	r2, #29
   12e78:	bhi	12ee4 <__assert_fail@plt+0x1ed4>
   12e7c:	mov	r3, #1
   12e80:	movw	r1, #20929	; 0x51c1
   12e84:	movt	r1, #14336	; 0x3800
   12e88:	tst	r1, r3, lsl r2
   12e8c:	beq	12ee4 <__assert_fail@plt+0x1ed4>
   12e90:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12e94:	tst	r1, #1
   12e98:	bne	132c4 <__assert_fail@plt+0x22b4>
   12e9c:	cmp	r8, r4
   12ea0:	movcc	r1, #63	; 0x3f
   12ea4:	strbcc	r1, [r7, r8]
   12ea8:	add	r2, r8, #1
   12eac:	cmp	r2, r4
   12eb0:	movcc	r1, #34	; 0x22
   12eb4:	strbcc	r1, [r7, r2]
   12eb8:	add	r2, r8, #2
   12ebc:	cmp	r2, r4
   12ec0:	movcc	r1, #34	; 0x22
   12ec4:	strbcc	r1, [r7, r2]
   12ec8:	add	r2, r8, #3
   12ecc:	cmp	r2, r4
   12ed0:	movcc	r1, #63	; 0x3f
   12ed4:	strbcc	r1, [r7, r2]
   12ed8:	add	r8, r8, #4
   12edc:	mov	r6, r0
   12ee0:	mov	r5, r9
   12ee4:	mov	r9, #0
   12ee8:	b	12938 <__assert_fail@plt+0x1928>
   12eec:	add	r1, r2, r6
   12ef0:	str	r1, [sp, #44]	; 0x2c
   12ef4:	add	r1, r6, #1
   12ef8:	mov	r3, #0
   12efc:	ldr	lr, [sp, #28]
   12f00:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12f04:	tst	r0, #1
   12f08:	bne	12ffc <__assert_fail@plt+0x1fec>
   12f0c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12f10:	tst	r2, #1
   12f14:	bne	132c4 <__assert_fail@plt+0x22b4>
   12f18:	cmp	r6, #2
   12f1c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   12f20:	movwne	r3, #1
   12f24:	ldr	r2, [fp, #-56]	; 0xffffffc8
   12f28:	orr	r3, r3, r2
   12f2c:	tst	r3, #1
   12f30:	bne	12f6c <__assert_fail@plt+0x1f5c>
   12f34:	cmp	r8, r4
   12f38:	movcc	r2, #39	; 0x27
   12f3c:	strbcc	r2, [r7, r8]
   12f40:	add	r3, r8, #1
   12f44:	cmp	r3, r4
   12f48:	movcc	r2, #36	; 0x24
   12f4c:	strbcc	r2, [r7, r3]
   12f50:	add	r3, r8, #2
   12f54:	cmp	r3, r4
   12f58:	movcc	r2, #39	; 0x27
   12f5c:	strbcc	r2, [r7, r3]
   12f60:	add	r8, r8, #3
   12f64:	mov	r2, #1
   12f68:	str	r2, [fp, #-56]	; 0xffffffc8
   12f6c:	cmp	r8, r4
   12f70:	movcc	r2, #92	; 0x5c
   12f74:	strbcc	r2, [r7, r8]
   12f78:	add	r3, r8, #1
   12f7c:	cmp	r3, r4
   12f80:	bcs	12fa0 <__assert_fail@plt+0x1f90>
   12f84:	and	r7, r5, #192	; 0xc0
   12f88:	mov	r2, #48	; 0x30
   12f8c:	orr	r7, r2, r7, lsr #6
   12f90:	ldr	r6, [sp, #80]	; 0x50
   12f94:	strb	r7, [r6, r3]
   12f98:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12f9c:	ldr	r7, [sp, #80]	; 0x50
   12fa0:	add	r3, r8, #2
   12fa4:	cmp	r3, r4
   12fa8:	bcs	12fc8 <__assert_fail@plt+0x1fb8>
   12fac:	lsr	r7, r5, #3
   12fb0:	mov	r2, #6
   12fb4:	bfi	r7, r2, #3, #29
   12fb8:	ldr	r6, [sp, #80]	; 0x50
   12fbc:	strb	r7, [r6, r3]
   12fc0:	ldr	r6, [fp, #-60]	; 0xffffffc4
   12fc4:	ldr	r7, [sp, #80]	; 0x50
   12fc8:	mov	r2, #6
   12fcc:	bfi	r5, r2, #3, #29
   12fd0:	add	r8, r8, #3
   12fd4:	mov	r3, #1
   12fd8:	b	13020 <__assert_fail@plt+0x2010>
   12fdc:	ldr	r7, [sp, #80]	; 0x50
   12fe0:	cmp	r8, r4
   12fe4:	strbcc	r5, [r7, r8]
   12fe8:	ldrb	r5, [ip, r1]
   12fec:	add	r1, r1, #1
   12ff0:	add	r8, r8, #1
   12ff4:	tst	r0, #1
   12ff8:	beq	12f0c <__assert_fail@plt+0x1efc>
   12ffc:	ldr	r2, [fp, #-52]	; 0xffffffcc
   13000:	tst	r2, #1
   13004:	beq	13018 <__assert_fail@plt+0x2008>
   13008:	cmp	r8, r4
   1300c:	movcc	r2, #92	; 0x5c
   13010:	strbcc	r2, [r7, r8]
   13014:	add	r8, r8, #1
   13018:	mov	r2, #0
   1301c:	str	r2, [fp, #-52]	; 0xffffffcc
   13020:	and	sl, r3, #1
   13024:	ldr	r2, [sp, #44]	; 0x2c
   13028:	cmp	r2, r1
   1302c:	bls	13138 <__assert_fail@plt+0x2128>
   13030:	cmp	sl, #0
   13034:	movwne	sl, #1
   13038:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1303c:	mvn	r7, r2
   13040:	orr	r7, r7, sl
   13044:	tst	r7, #1
   13048:	bne	12fdc <__assert_fail@plt+0x1fcc>
   1304c:	cmp	r8, r4
   13050:	ldrcc	r7, [sp, #80]	; 0x50
   13054:	movcc	r2, #39	; 0x27
   13058:	strbcc	r2, [r7, r8]
   1305c:	add	r7, r8, #1
   13060:	cmp	r7, r4
   13064:	ldrcc	r6, [sp, #80]	; 0x50
   13068:	movcc	r2, #39	; 0x27
   1306c:	strbcc	r2, [r6, r7]
   13070:	ldrcc	r6, [fp, #-60]	; 0xffffffc4
   13074:	add	r8, r8, #2
   13078:	mov	r2, #0
   1307c:	str	r2, [fp, #-56]	; 0xffffffc8
   13080:	b	12fdc <__assert_fail@plt+0x1fcc>
   13084:	cmp	r8, r4
   13088:	movcc	r0, #39	; 0x27
   1308c:	strbcc	r0, [r7, r8]
   13090:	add	r0, r8, #1
   13094:	cmp	r0, r4
   13098:	movcc	r1, #36	; 0x24
   1309c:	strbcc	r1, [r7, r0]
   130a0:	add	r0, r8, #2
   130a4:	cmp	r0, r4
   130a8:	movcc	r1, #39	; 0x27
   130ac:	strbcc	r1, [r7, r0]
   130b0:	add	r0, r8, #3
   130b4:	mov	r2, #1
   130b8:	cmp	r0, r4
   130bc:	movcc	r1, #92	; 0x5c
   130c0:	strbcc	r1, [r7, r0]
   130c4:	str	r2, [fp, #-56]	; 0xffffffc8
   130c8:	add	r8, r0, #1
   130cc:	ldr	r1, [fp, #-60]	; 0xffffffc4
   130d0:	cmp	r1, #2
   130d4:	beq	13128 <__assert_fail@plt+0x2118>
   130d8:	add	r1, r6, #1
   130dc:	mov	r9, #0
   130e0:	mov	sl, #1
   130e4:	mov	r5, #48	; 0x30
   130e8:	cmp	r1, lr
   130ec:	bcs	12938 <__assert_fail@plt+0x1928>
   130f0:	ldrb	r1, [ip, r1]
   130f4:	sub	r1, r1, #48	; 0x30
   130f8:	uxtb	r1, r1
   130fc:	cmp	r1, #9
   13100:	bhi	12938 <__assert_fail@plt+0x1928>
   13104:	cmp	r8, r4
   13108:	movcc	r1, #48	; 0x30
   1310c:	strbcc	r1, [r7, r8]
   13110:	add	r1, r0, #2
   13114:	cmp	r1, r4
   13118:	movcc	r2, #48	; 0x30
   1311c:	strbcc	r2, [r7, r1]
   13120:	add	r8, r0, #3
   13124:	b	12938 <__assert_fail@plt+0x1928>
   13128:	mov	r0, #48	; 0x30
   1312c:	mov	sl, #1
   13130:	mov	r9, #0
   13134:	b	12be4 <__assert_fail@plt+0x1bd4>
   13138:	sub	r6, r1, #1
   1313c:	cmp	sl, #0
   13140:	movwne	sl, #1
   13144:	mov	r0, r5
   13148:	cmp	sl, #0
   1314c:	bne	1318c <__assert_fail@plt+0x217c>
   13150:	ldr	r1, [fp, #-56]	; 0xffffffc8
   13154:	tst	r1, #1
   13158:	beq	1318c <__assert_fail@plt+0x217c>
   1315c:	cmp	r8, r4
   13160:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13164:	movcc	r1, #39	; 0x27
   13168:	strbcc	r1, [r7, r8]
   1316c:	add	r1, r8, #1
   13170:	cmp	r1, r4
   13174:	movcc	r2, #39	; 0x27
   13178:	strbcc	r2, [r7, r1]
   1317c:	add	r8, r8, #2
   13180:	mov	r1, #0
   13184:	str	r1, [fp, #-56]	; 0xffffffc8
   13188:	b	12c70 <__assert_fail@plt+0x1c60>
   1318c:	ldr	r5, [fp, #-48]	; 0xffffffd0
   13190:	b	12c70 <__assert_fail@plt+0x1c60>
   13194:	mov	r9, #0
   13198:	b	131d4 <__assert_fail@plt+0x21c4>
   1319c:	mov	r9, #0
   131a0:	cmp	r7, lr
   131a4:	bcs	131d4 <__assert_fail@plt+0x21c4>
   131a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   131ac:	ldr	r7, [sp, #44]	; 0x2c
   131b0:	ldr	r0, [sp, #20]
   131b4:	ldrb	r0, [r0, r7]
   131b8:	cmp	r0, #0
   131bc:	beq	131dc <__assert_fail@plt+0x21cc>
   131c0:	add	r7, r7, #1
   131c4:	add	r0, r6, r7
   131c8:	cmp	r0, lr
   131cc:	bcc	131b0 <__assert_fail@plt+0x21a0>
   131d0:	b	131dc <__assert_fail@plt+0x21cc>
   131d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   131d8:	ldr	r7, [sp, #44]	; 0x2c
   131dc:	mov	r1, r7
   131e0:	ldr	r7, [sp, #80]	; 0x50
   131e4:	b	12b0c <__assert_fail@plt+0x1afc>
   131e8:	ldr	r1, [fp, #-60]	; 0xffffffc4
   131ec:	eor	r0, r1, #2
   131f0:	orr	r0, r0, r8
   131f4:	clz	r0, r0
   131f8:	lsr	r0, r0, #5
   131fc:	ldr	r2, [fp, #-76]	; 0xffffffb4
   13200:	tst	r2, r0
   13204:	bne	132c4 <__assert_fail@plt+0x22b4>
   13208:	cmp	r1, #2
   1320c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   13210:	movwne	r0, #1
   13214:	orr	r0, r2, r0
   13218:	tst	r0, #1
   1321c:	ldreq	r0, [sp, #56]	; 0x38
   13220:	eoreq	r0, r0, #1
   13224:	tsteq	r0, #1
   13228:	bne	1325c <__assert_fail@plt+0x224c>
   1322c:	mov	r9, lr
   13230:	tst	r5, #1
   13234:	bne	1332c <__assert_fail@plt+0x231c>
   13238:	ldr	r0, [sp, #72]	; 0x48
   1323c:	cmp	r0, #0
   13240:	beq	1325c <__assert_fail@plt+0x224c>
   13244:	mov	r5, #0
   13248:	cmp	r4, #0
   1324c:	ldr	r0, [sp, #84]	; 0x54
   13250:	mov	sl, r2
   13254:	ldr	r6, [sp, #72]	; 0x48
   13258:	beq	123f4 <__assert_fail@plt+0x13e4>
   1325c:	ldr	r1, [sp, #92]	; 0x5c
   13260:	clz	r0, r1
   13264:	lsr	r0, r0, #5
   13268:	orr	r0, r0, r2
   1326c:	tst	r0, #1
   13270:	bne	1329c <__assert_fail@plt+0x228c>
   13274:	ldrb	r0, [r1]
   13278:	cmp	r0, #0
   1327c:	beq	1329c <__assert_fail@plt+0x228c>
   13280:	add	r1, r1, #1
   13284:	cmp	r8, r4
   13288:	strbcc	r0, [r7, r8]
   1328c:	add	r8, r8, #1
   13290:	ldrb	r0, [r1], #1
   13294:	cmp	r0, #0
   13298:	bne	13284 <__assert_fail@plt+0x2274>
   1329c:	cmp	r8, r4
   132a0:	movcc	r0, #0
   132a4:	strbcc	r0, [r7, r8]
   132a8:	b	13320 <__assert_fail@plt+0x2310>
   132ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   132b0:	mov	lr, r4
   132b4:	mov	r4, r5
   132b8:	b	132c4 <__assert_fail@plt+0x22b4>
   132bc:	ldr	r7, [sp, #80]	; 0x50
   132c0:	ldr	ip, [fp, #-84]	; 0xffffffac
   132c4:	mov	r0, #0
   132c8:	ldr	r1, [fp, #12]
   132cc:	bic	r1, r1, #2
   132d0:	ldr	r2, [sp, #84]	; 0x54
   132d4:	tst	r2, #1
   132d8:	ldr	r3, [fp, #-60]	; 0xffffffc4
   132dc:	mov	r2, r3
   132e0:	movwne	r2, #4
   132e4:	cmp	r3, #2
   132e8:	movne	r2, r3
   132ec:	str	r2, [sp]
   132f0:	str	r1, [sp, #4]
   132f4:	str	r0, [sp, #8]
   132f8:	ldr	r0, [sp, #68]	; 0x44
   132fc:	str	r0, [sp, #12]
   13300:	ldr	r0, [sp, #76]	; 0x4c
   13304:	str	r0, [sp, #16]
   13308:	mov	r0, r7
   1330c:	mov	r1, r4
   13310:	mov	r2, ip
   13314:	mov	r3, lr
   13318:	bl	1236c <__assert_fail@plt+0x135c>
   1331c:	mov	r8, r0
   13320:	mov	r0, r8
   13324:	sub	sp, fp, #28
   13328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1332c:	mov	r0, #5
   13330:	str	r0, [sp]
   13334:	ldr	r0, [fp, #12]
   13338:	str	r0, [sp, #4]
   1333c:	ldr	r0, [fp, #16]
   13340:	str	r0, [sp, #8]
   13344:	ldr	r0, [sp, #68]	; 0x44
   13348:	str	r0, [sp, #12]
   1334c:	ldr	r0, [sp, #76]	; 0x4c
   13350:	str	r0, [sp, #16]
   13354:	mov	r0, r7
   13358:	ldr	r1, [sp, #72]	; 0x48
   1335c:	ldr	r2, [fp, #-84]	; 0xffffffac
   13360:	mov	r3, r9
   13364:	b	13318 <__assert_fail@plt+0x2308>
   13368:	bl	10ff8 <abort@plt>
   1336c:	mov	r3, r2
   13370:	mov	r2, #0
   13374:	b	13378 <__assert_fail@plt+0x2368>
   13378:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1337c:	add	fp, sp, #28
   13380:	sub	sp, sp, #36	; 0x24
   13384:	mov	r4, r2
   13388:	str	r2, [sp, #24]
   1338c:	mov	r5, r1
   13390:	mov	r6, r0
   13394:	str	r0, [sp, #20]
   13398:	movw	r8, #29032	; 0x7168
   1339c:	movt	r8, #2
   133a0:	cmp	r3, #0
   133a4:	movne	r8, r3
   133a8:	bl	10f44 <__errno_location@plt>
   133ac:	str	r0, [sp, #28]
   133b0:	ldm	r8, {r3, r9}
   133b4:	ldr	r1, [r8, #40]	; 0x28
   133b8:	ldr	r2, [r8, #44]	; 0x2c
   133bc:	ldr	r7, [r0]
   133c0:	str	r7, [sp, #32]
   133c4:	add	sl, r8, #8
   133c8:	cmp	r4, #0
   133cc:	orreq	r9, r9, #1
   133d0:	stm	sp, {r3, r9, sl}
   133d4:	str	r1, [sp, #12]
   133d8:	str	r2, [sp, #16]
   133dc:	mov	r0, #0
   133e0:	mov	r1, #0
   133e4:	mov	r2, r6
   133e8:	mov	r3, r5
   133ec:	mov	r7, r5
   133f0:	bl	1236c <__assert_fail@plt+0x135c>
   133f4:	mov	r5, r0
   133f8:	add	r4, r0, #1
   133fc:	mov	r0, r4
   13400:	bl	1427c <__assert_fail@plt+0x326c>
   13404:	mov	r6, r0
   13408:	ldr	r0, [r8]
   1340c:	ldr	r1, [r8, #40]	; 0x28
   13410:	ldr	r2, [r8, #44]	; 0x2c
   13414:	stm	sp, {r0, r9, sl}
   13418:	str	r1, [sp, #12]
   1341c:	str	r2, [sp, #16]
   13420:	mov	r0, r6
   13424:	mov	r1, r4
   13428:	ldr	r2, [sp, #20]
   1342c:	mov	r3, r7
   13430:	bl	1236c <__assert_fail@plt+0x135c>
   13434:	ldr	r0, [sp, #24]
   13438:	ldr	r1, [sp, #32]
   1343c:	ldr	r2, [sp, #28]
   13440:	str	r1, [r2]
   13444:	cmp	r0, #0
   13448:	strne	r5, [r0]
   1344c:	mov	r0, r6
   13450:	sub	sp, fp, #28
   13454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13458:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1345c:	add	fp, sp, #24
   13460:	movw	r8, #28912	; 0x70f0
   13464:	movt	r8, #2
   13468:	ldr	r4, [r8]
   1346c:	movw	r5, #28916	; 0x70f4
   13470:	movt	r5, #2
   13474:	ldr	r0, [r5]
   13478:	cmp	r0, #2
   1347c:	blt	134a8 <__assert_fail@plt+0x2498>
   13480:	add	r7, r4, #12
   13484:	mov	r6, #0
   13488:	ldr	r0, [r7, r6, lsl #3]
   1348c:	bl	1525c <__assert_fail@plt+0x424c>
   13490:	add	r0, r6, #1
   13494:	ldr	r1, [r5]
   13498:	add	r2, r6, #2
   1349c:	cmp	r2, r1
   134a0:	mov	r6, r0
   134a4:	blt	13488 <__assert_fail@plt+0x2478>
   134a8:	ldr	r0, [r4, #4]
   134ac:	movw	r7, #29080	; 0x7198
   134b0:	movt	r7, #2
   134b4:	cmp	r0, r7
   134b8:	beq	134d0 <__assert_fail@plt+0x24c0>
   134bc:	bl	1525c <__assert_fail@plt+0x424c>
   134c0:	movw	r0, #28920	; 0x70f8
   134c4:	movt	r0, #2
   134c8:	mov	r6, #256	; 0x100
   134cc:	strd	r6, [r0]
   134d0:	movw	r6, #28920	; 0x70f8
   134d4:	movt	r6, #2
   134d8:	cmp	r4, r6
   134dc:	beq	134ec <__assert_fail@plt+0x24dc>
   134e0:	mov	r0, r4
   134e4:	bl	1525c <__assert_fail@plt+0x424c>
   134e8:	str	r6, [r8]
   134ec:	mov	r0, #1
   134f0:	str	r0, [r5]
   134f4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   134f8:	movw	r3, #29032	; 0x7168
   134fc:	movt	r3, #2
   13500:	mvn	r2, #0
   13504:	b	13508 <__assert_fail@plt+0x24f8>
   13508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1350c:	add	fp, sp, #28
   13510:	sub	sp, sp, #44	; 0x2c
   13514:	mov	r7, r3
   13518:	str	r2, [sp, #36]	; 0x24
   1351c:	str	r1, [sp, #32]
   13520:	mov	r5, r0
   13524:	bl	10f44 <__errno_location@plt>
   13528:	cmp	r5, #0
   1352c:	blt	13698 <__assert_fail@plt+0x2688>
   13530:	cmn	r5, #-2147483647	; 0x80000001
   13534:	beq	13698 <__assert_fail@plt+0x2688>
   13538:	movw	r4, #28912	; 0x70f0
   1353c:	movt	r4, #2
   13540:	ldr	r6, [r4]
   13544:	str	r0, [sp, #28]
   13548:	ldr	r0, [r0]
   1354c:	str	r0, [sp, #24]
   13550:	movw	r8, #28916	; 0x70f4
   13554:	movt	r8, #2
   13558:	ldr	r1, [r8]
   1355c:	cmp	r1, r5
   13560:	ble	1356c <__assert_fail@plt+0x255c>
   13564:	mov	sl, r6
   13568:	b	135d4 <__assert_fail@plt+0x25c4>
   1356c:	str	r1, [fp, #-32]	; 0xffffffe0
   13570:	mov	r0, #8
   13574:	str	r0, [sp]
   13578:	movw	r9, #28920	; 0x70f8
   1357c:	movt	r9, #2
   13580:	subs	r0, r6, r9
   13584:	movne	r0, r6
   13588:	add	r2, r5, #1
   1358c:	sub	r2, r2, r1
   13590:	sub	r1, fp, #32
   13594:	mvn	r3, #-2147483648	; 0x80000000
   13598:	bl	14364 <__assert_fail@plt+0x3354>
   1359c:	mov	sl, r0
   135a0:	str	r0, [r4]
   135a4:	cmp	r6, r9
   135a8:	ldrdeq	r0, [r9]
   135ac:	stmeq	sl, {r0, r1}
   135b0:	ldr	r1, [r8]
   135b4:	add	r0, sl, r1, lsl #3
   135b8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   135bc:	sub	r1, r2, r1
   135c0:	lsl	r2, r1, #3
   135c4:	mov	r1, #0
   135c8:	bl	10f5c <memset@plt>
   135cc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   135d0:	str	r0, [r8]
   135d4:	mov	r9, sl
   135d8:	ldr	r6, [r9, r5, lsl #3]!
   135dc:	ldr	r4, [r9, #4]!
   135e0:	ldm	r7, {r0, r1}
   135e4:	ldr	r2, [r7, #40]	; 0x28
   135e8:	ldr	r3, [r7, #44]	; 0x2c
   135ec:	orr	r8, r1, #1
   135f0:	add	r1, r7, #8
   135f4:	stm	sp, {r0, r8}
   135f8:	str	r1, [sp, #20]
   135fc:	add	r0, sp, #8
   13600:	stm	r0, {r1, r2, r3}
   13604:	mov	r0, r4
   13608:	mov	r1, r6
   1360c:	ldr	r2, [sp, #32]
   13610:	ldr	r3, [sp, #36]	; 0x24
   13614:	bl	1236c <__assert_fail@plt+0x135c>
   13618:	cmp	r6, r0
   1361c:	bhi	13680 <__assert_fail@plt+0x2670>
   13620:	add	r6, r0, #1
   13624:	str	r6, [sl, r5, lsl #3]
   13628:	movw	r0, #29080	; 0x7198
   1362c:	movt	r0, #2
   13630:	cmp	r4, r0
   13634:	beq	13640 <__assert_fail@plt+0x2630>
   13638:	mov	r0, r4
   1363c:	bl	1525c <__assert_fail@plt+0x424c>
   13640:	mov	r0, r6
   13644:	bl	1427c <__assert_fail@plt+0x326c>
   13648:	mov	r4, r0
   1364c:	str	r0, [r9]
   13650:	ldr	r0, [r7]
   13654:	ldr	r1, [r7, #40]	; 0x28
   13658:	ldr	r2, [r7, #44]	; 0x2c
   1365c:	stm	sp, {r0, r8}
   13660:	ldr	r0, [sp, #20]
   13664:	add	r3, sp, #8
   13668:	stm	r3, {r0, r1, r2}
   1366c:	mov	r0, r4
   13670:	mov	r1, r6
   13674:	ldr	r2, [sp, #32]
   13678:	ldr	r3, [sp, #36]	; 0x24
   1367c:	bl	1236c <__assert_fail@plt+0x135c>
   13680:	ldr	r0, [sp, #28]
   13684:	ldr	r1, [sp, #24]
   13688:	str	r1, [r0]
   1368c:	mov	r0, r4
   13690:	sub	sp, fp, #28
   13694:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13698:	bl	10ff8 <abort@plt>
   1369c:	movw	r3, #29032	; 0x7168
   136a0:	movt	r3, #2
   136a4:	b	13508 <__assert_fail@plt+0x24f8>
   136a8:	mov	r1, r0
   136ac:	mov	r0, #0
   136b0:	b	134f8 <__assert_fail@plt+0x24e8>
   136b4:	mov	r2, r1
   136b8:	mov	r1, r0
   136bc:	mov	r0, #0
   136c0:	b	1369c <__assert_fail@plt+0x268c>
   136c4:	push	{r4, r5, r6, sl, fp, lr}
   136c8:	add	fp, sp, #16
   136cc:	sub	sp, sp, #48	; 0x30
   136d0:	mov	r4, r2
   136d4:	mov	r5, r0
   136d8:	mov	r6, sp
   136dc:	mov	r0, r6
   136e0:	bl	13700 <__assert_fail@plt+0x26f0>
   136e4:	mov	r0, r5
   136e8:	mov	r1, r4
   136ec:	mvn	r2, #0
   136f0:	mov	r3, r6
   136f4:	bl	13508 <__assert_fail@plt+0x24f8>
   136f8:	sub	sp, fp, #16
   136fc:	pop	{r4, r5, r6, sl, fp, pc}
   13700:	vmov.i32	q8, #0	; 0x00000000
   13704:	mov	r2, #32
   13708:	mov	r3, r0
   1370c:	vst1.32	{d16-d17}, [r3], r2
   13710:	vst1.32	{d16-d17}, [r3]
   13714:	add	r2, r0, #16
   13718:	vst1.32	{d16-d17}, [r2]
   1371c:	cmp	r1, #10
   13720:	strne	r1, [r0]
   13724:	bxne	lr
   13728:	push	{fp, lr}
   1372c:	mov	fp, sp
   13730:	bl	10ff8 <abort@plt>
   13734:	push	{r4, r5, r6, r7, fp, lr}
   13738:	add	fp, sp, #16
   1373c:	sub	sp, sp, #48	; 0x30
   13740:	mov	r4, r3
   13744:	mov	r5, r2
   13748:	mov	r6, r0
   1374c:	mov	r7, sp
   13750:	mov	r0, r7
   13754:	bl	13700 <__assert_fail@plt+0x26f0>
   13758:	mov	r0, r6
   1375c:	mov	r1, r5
   13760:	mov	r2, r4
   13764:	mov	r3, r7
   13768:	bl	13508 <__assert_fail@plt+0x24f8>
   1376c:	sub	sp, fp, #16
   13770:	pop	{r4, r5, r6, r7, fp, pc}
   13774:	mov	r2, r1
   13778:	mov	r1, r0
   1377c:	mov	r0, #0
   13780:	b	136c4 <__assert_fail@plt+0x26b4>
   13784:	mov	r3, r2
   13788:	mov	r2, r1
   1378c:	mov	r1, r0
   13790:	mov	r0, #0
   13794:	b	13734 <__assert_fail@plt+0x2724>
   13798:	push	{r4, r5, r6, sl, fp, lr}
   1379c:	add	fp, sp, #16
   137a0:	sub	sp, sp, #48	; 0x30
   137a4:	mov	r4, r1
   137a8:	mov	r5, r0
   137ac:	mov	r0, #32
   137b0:	movw	r1, #29032	; 0x7168
   137b4:	movt	r1, #2
   137b8:	add	r3, r1, #16
   137bc:	vld1.64	{d16-d17}, [r1], r0
   137c0:	mov	r6, sp
   137c4:	vld1.64	{d18-d19}, [r3]
   137c8:	add	r3, r6, #16
   137cc:	vld1.64	{d20-d21}, [r1]
   137d0:	vst1.64	{d18-d19}, [r3]
   137d4:	mov	r1, r6
   137d8:	vst1.64	{d16-d17}, [r1], r0
   137dc:	vst1.64	{d20-d21}, [r1]
   137e0:	mov	r0, r6
   137e4:	mov	r1, r2
   137e8:	mov	r2, #1
   137ec:	bl	12260 <__assert_fail@plt+0x1250>
   137f0:	mov	r0, #0
   137f4:	mov	r1, r5
   137f8:	mov	r2, r4
   137fc:	mov	r3, r6
   13800:	bl	13508 <__assert_fail@plt+0x24f8>
   13804:	sub	sp, fp, #16
   13808:	pop	{r4, r5, r6, sl, fp, pc}
   1380c:	mov	r2, r1
   13810:	mvn	r1, #0
   13814:	b	13798 <__assert_fail@plt+0x2788>
   13818:	mov	r1, #58	; 0x3a
   1381c:	b	1380c <__assert_fail@plt+0x27fc>
   13820:	mov	r2, #58	; 0x3a
   13824:	b	13798 <__assert_fail@plt+0x2788>
   13828:	push	{r4, r5, r6, sl, fp, lr}
   1382c:	add	fp, sp, #16
   13830:	sub	sp, sp, #48	; 0x30
   13834:	mov	r4, r2
   13838:	mov	r5, r0
   1383c:	mov	r6, sp
   13840:	mov	r0, r6
   13844:	bl	13700 <__assert_fail@plt+0x26f0>
   13848:	mov	r0, r6
   1384c:	mov	r1, #58	; 0x3a
   13850:	mov	r2, #1
   13854:	bl	12260 <__assert_fail@plt+0x1250>
   13858:	mov	r0, r5
   1385c:	mov	r1, r4
   13860:	mvn	r2, #0
   13864:	mov	r3, r6
   13868:	bl	13508 <__assert_fail@plt+0x24f8>
   1386c:	sub	sp, fp, #16
   13870:	pop	{r4, r5, r6, sl, fp, pc}
   13874:	push	{fp, lr}
   13878:	mov	fp, sp
   1387c:	sub	sp, sp, #8
   13880:	mvn	ip, #0
   13884:	str	ip, [sp]
   13888:	bl	13894 <__assert_fail@plt+0x2884>
   1388c:	mov	sp, fp
   13890:	pop	{fp, pc}
   13894:	push	{r4, r5, r6, r7, fp, lr}
   13898:	add	fp, sp, #16
   1389c:	sub	sp, sp, #48	; 0x30
   138a0:	mov	r7, r3
   138a4:	mov	r5, r0
   138a8:	mov	r0, #32
   138ac:	movw	r3, #29032	; 0x7168
   138b0:	movt	r3, #2
   138b4:	add	r4, r3, #16
   138b8:	vld1.64	{d16-d17}, [r3], r0
   138bc:	mov	r6, sp
   138c0:	vld1.64	{d18-d19}, [r4]
   138c4:	add	r4, r6, #16
   138c8:	vld1.64	{d20-d21}, [r3]
   138cc:	vst1.64	{d18-d19}, [r4]
   138d0:	mov	r3, r6
   138d4:	vst1.64	{d16-d17}, [r3], r0
   138d8:	vst1.64	{d20-d21}, [r3]
   138dc:	mov	r0, r6
   138e0:	bl	122b8 <__assert_fail@plt+0x12a8>
   138e4:	ldr	r2, [fp, #8]
   138e8:	mov	r0, r5
   138ec:	mov	r1, r7
   138f0:	mov	r3, r6
   138f4:	bl	13508 <__assert_fail@plt+0x24f8>
   138f8:	sub	sp, fp, #16
   138fc:	pop	{r4, r5, r6, r7, fp, pc}
   13900:	mov	r3, r2
   13904:	mov	r2, r1
   13908:	mov	r1, r0
   1390c:	mov	r0, #0
   13910:	b	13874 <__assert_fail@plt+0x2864>
   13914:	push	{fp, lr}
   13918:	mov	fp, sp
   1391c:	sub	sp, sp, #8
   13920:	mov	ip, r2
   13924:	mov	r2, r1
   13928:	mov	r1, r0
   1392c:	str	r3, [sp]
   13930:	mov	r0, #0
   13934:	mov	r3, ip
   13938:	bl	13894 <__assert_fail@plt+0x2884>
   1393c:	mov	sp, fp
   13940:	pop	{fp, pc}
   13944:	movw	r3, #28928	; 0x7100
   13948:	movt	r3, #2
   1394c:	b	13508 <__assert_fail@plt+0x24f8>
   13950:	mov	r2, r1
   13954:	mov	r1, r0
   13958:	mov	r0, #0
   1395c:	b	13944 <__assert_fail@plt+0x2934>
   13960:	mvn	r2, #0
   13964:	b	13944 <__assert_fail@plt+0x2934>
   13968:	mov	r1, r0
   1396c:	mov	r0, #0
   13970:	b	13960 <__assert_fail@plt+0x2950>
   13974:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13978:	add	fp, sp, #24
   1397c:	sub	sp, sp, #16
   13980:	mov	r4, r1
   13984:	mov	r5, r0
   13988:	mov	r7, #0
   1398c:	mov	r0, #0
   13990:	mov	r1, r5
   13994:	mov	r2, #5
   13998:	bl	10e3c <dcgettext@plt>
   1399c:	cmp	r0, r5
   139a0:	beq	139ac <__assert_fail@plt+0x299c>
   139a4:	sub	sp, fp, #24
   139a8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   139ac:	bl	15378 <__assert_fail@plt+0x4368>
   139b0:	mov	r6, r0
   139b4:	mov	r8, #56	; 0x38
   139b8:	mov	r0, #45	; 0x2d
   139bc:	stm	sp, {r0, r8}
   139c0:	str	r7, [sp, #8]
   139c4:	str	r7, [sp, #12]
   139c8:	mov	r0, r6
   139cc:	mov	r1, #85	; 0x55
   139d0:	mov	r2, #84	; 0x54
   139d4:	mov	r3, #70	; 0x46
   139d8:	bl	13a70 <__assert_fail@plt+0x2a60>
   139dc:	cmp	r0, #0
   139e0:	beq	139fc <__assert_fail@plt+0x29ec>
   139e4:	ldrb	r1, [r5]
   139e8:	movw	r2, #24960	; 0x6180
   139ec:	movt	r2, #1
   139f0:	movw	r0, #24964	; 0x6184
   139f4:	movt	r0, #1
   139f8:	b	13a40 <__assert_fail@plt+0x2a30>
   139fc:	mov	r0, #48	; 0x30
   13a00:	mov	r1, #51	; 0x33
   13a04:	str	r8, [sp]
   13a08:	stmib	sp, {r0, r1}
   13a0c:	str	r0, [sp, #12]
   13a10:	mov	r0, r6
   13a14:	mov	r1, #71	; 0x47
   13a18:	mov	r2, #66	; 0x42
   13a1c:	mov	r3, #49	; 0x31
   13a20:	bl	13a70 <__assert_fail@plt+0x2a60>
   13a24:	cmp	r0, #0
   13a28:	beq	13a50 <__assert_fail@plt+0x2a40>
   13a2c:	ldrb	r1, [r5]
   13a30:	movw	r2, #24968	; 0x6188
   13a34:	movt	r2, #1
   13a38:	movw	r0, #24972	; 0x618c
   13a3c:	movt	r0, #1
   13a40:	cmp	r1, #96	; 0x60
   13a44:	moveq	r0, r2
   13a48:	sub	sp, fp, #24
   13a4c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a50:	movw	r1, #24954	; 0x617a
   13a54:	movt	r1, #1
   13a58:	movw	r0, #24958	; 0x617e
   13a5c:	movt	r0, #1
   13a60:	cmp	r4, #9
   13a64:	moveq	r0, r1
   13a68:	sub	sp, fp, #24
   13a6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13a70:	push	{r4, r5, r6, r7, fp, lr}
   13a74:	add	fp, sp, #16
   13a78:	sub	sp, sp, #16
   13a7c:	mov	r4, r3
   13a80:	mov	r5, r2
   13a84:	mov	r7, r1
   13a88:	mov	r6, r0
   13a8c:	mov	r0, r1
   13a90:	bl	1505c <__assert_fail@plt+0x404c>
   13a94:	ldrb	r1, [r6]
   13a98:	cmp	r0, #0
   13a9c:	andne	r1, r1, #223	; 0xdf
   13aa0:	mov	r0, #0
   13aa4:	cmp	r1, r7
   13aa8:	bne	13ae8 <__assert_fail@plt+0x2ad8>
   13aac:	cmp	r7, #0
   13ab0:	moveq	r0, #1
   13ab4:	subeq	sp, fp, #16
   13ab8:	popeq	{r4, r5, r6, r7, fp, pc}
   13abc:	ldr	r0, [fp, #20]
   13ac0:	ldr	r1, [fp, #16]
   13ac4:	ldr	r2, [fp, #12]
   13ac8:	ldr	r3, [fp, #8]
   13acc:	str	r2, [sp]
   13ad0:	str	r1, [sp, #4]
   13ad4:	str	r0, [sp, #8]
   13ad8:	mov	r0, r6
   13adc:	mov	r1, r5
   13ae0:	mov	r2, r4
   13ae4:	bl	13af0 <__assert_fail@plt+0x2ae0>
   13ae8:	sub	sp, fp, #16
   13aec:	pop	{r4, r5, r6, r7, fp, pc}
   13af0:	push	{r4, r5, r6, r7, fp, lr}
   13af4:	add	fp, sp, #16
   13af8:	sub	sp, sp, #8
   13afc:	mov	r4, r3
   13b00:	mov	r5, r2
   13b04:	mov	r7, r1
   13b08:	mov	r6, r0
   13b0c:	mov	r0, r1
   13b10:	bl	1505c <__assert_fail@plt+0x404c>
   13b14:	ldrb	r1, [r6, #1]
   13b18:	cmp	r0, #0
   13b1c:	andne	r1, r1, #223	; 0xdf
   13b20:	mov	r0, #0
   13b24:	cmp	r1, r7
   13b28:	bne	13b60 <__assert_fail@plt+0x2b50>
   13b2c:	cmp	r7, #0
   13b30:	moveq	r0, #1
   13b34:	subeq	sp, fp, #16
   13b38:	popeq	{r4, r5, r6, r7, fp, pc}
   13b3c:	ldr	r0, [fp, #16]
   13b40:	ldr	r1, [fp, #12]
   13b44:	ldr	r3, [fp, #8]
   13b48:	str	r1, [sp]
   13b4c:	str	r0, [sp, #4]
   13b50:	mov	r0, r6
   13b54:	mov	r1, r5
   13b58:	mov	r2, r4
   13b5c:	bl	13b68 <__assert_fail@plt+0x2b58>
   13b60:	sub	sp, fp, #16
   13b64:	pop	{r4, r5, r6, r7, fp, pc}
   13b68:	push	{r4, r5, r6, r7, fp, lr}
   13b6c:	add	fp, sp, #16
   13b70:	sub	sp, sp, #8
   13b74:	mov	r4, r3
   13b78:	mov	r5, r2
   13b7c:	mov	r7, r1
   13b80:	mov	r6, r0
   13b84:	mov	r0, r1
   13b88:	bl	1505c <__assert_fail@plt+0x404c>
   13b8c:	ldrb	r1, [r6, #2]
   13b90:	cmp	r0, #0
   13b94:	andne	r1, r1, #223	; 0xdf
   13b98:	mov	r0, #0
   13b9c:	cmp	r1, r7
   13ba0:	bne	13bd0 <__assert_fail@plt+0x2bc0>
   13ba4:	cmp	r7, #0
   13ba8:	moveq	r0, #1
   13bac:	subeq	sp, fp, #16
   13bb0:	popeq	{r4, r5, r6, r7, fp, pc}
   13bb4:	ldr	r0, [fp, #12]
   13bb8:	ldr	r3, [fp, #8]
   13bbc:	str	r0, [sp]
   13bc0:	mov	r0, r6
   13bc4:	mov	r1, r5
   13bc8:	mov	r2, r4
   13bcc:	bl	13bd8 <__assert_fail@plt+0x2bc8>
   13bd0:	sub	sp, fp, #16
   13bd4:	pop	{r4, r5, r6, r7, fp, pc}
   13bd8:	push	{r4, r5, r6, r7, fp, lr}
   13bdc:	add	fp, sp, #16
   13be0:	mov	r4, r3
   13be4:	mov	r5, r2
   13be8:	mov	r7, r1
   13bec:	mov	r6, r0
   13bf0:	mov	r0, r1
   13bf4:	bl	1505c <__assert_fail@plt+0x404c>
   13bf8:	ldrb	r1, [r6, #3]
   13bfc:	ldr	r3, [fp, #8]
   13c00:	cmp	r0, #0
   13c04:	andne	r1, r1, #223	; 0xdf
   13c08:	mov	r0, #0
   13c0c:	cmp	r1, r7
   13c10:	popne	{r4, r5, r6, r7, fp, pc}
   13c14:	cmp	r7, #0
   13c18:	beq	13c30 <__assert_fail@plt+0x2c20>
   13c1c:	mov	r0, r6
   13c20:	mov	r1, r5
   13c24:	mov	r2, r4
   13c28:	pop	{r4, r5, r6, r7, fp, lr}
   13c2c:	b	13c38 <__assert_fail@plt+0x2c28>
   13c30:	mov	r0, #1
   13c34:	pop	{r4, r5, r6, r7, fp, pc}
   13c38:	push	{r4, r5, r6, r7, fp, lr}
   13c3c:	add	fp, sp, #16
   13c40:	mov	r4, r3
   13c44:	mov	r5, r2
   13c48:	mov	r7, r1
   13c4c:	mov	r6, r0
   13c50:	mov	r0, r1
   13c54:	bl	1505c <__assert_fail@plt+0x404c>
   13c58:	ldrb	r1, [r6, #4]
   13c5c:	cmp	r0, #0
   13c60:	andne	r1, r1, #223	; 0xdf
   13c64:	mov	r0, #0
   13c68:	cmp	r1, r7
   13c6c:	popne	{r4, r5, r6, r7, fp, pc}
   13c70:	cmp	r7, #0
   13c74:	beq	13c8c <__assert_fail@plt+0x2c7c>
   13c78:	mov	r0, r6
   13c7c:	mov	r1, r5
   13c80:	mov	r2, r4
   13c84:	pop	{r4, r5, r6, r7, fp, lr}
   13c88:	b	13c94 <__assert_fail@plt+0x2c84>
   13c8c:	mov	r0, #1
   13c90:	pop	{r4, r5, r6, r7, fp, pc}
   13c94:	push	{r4, r5, r6, sl, fp, lr}
   13c98:	add	fp, sp, #16
   13c9c:	mov	r4, r2
   13ca0:	mov	r6, r1
   13ca4:	mov	r5, r0
   13ca8:	mov	r0, r1
   13cac:	bl	1505c <__assert_fail@plt+0x404c>
   13cb0:	ldrb	r1, [r5, #5]
   13cb4:	cmp	r0, #0
   13cb8:	andne	r1, r1, #223	; 0xdf
   13cbc:	mov	r0, #0
   13cc0:	cmp	r1, r6
   13cc4:	popne	{r4, r5, r6, sl, fp, pc}
   13cc8:	cmp	r6, #0
   13ccc:	beq	13ce0 <__assert_fail@plt+0x2cd0>
   13cd0:	mov	r0, r5
   13cd4:	mov	r1, r4
   13cd8:	pop	{r4, r5, r6, sl, fp, lr}
   13cdc:	b	13ce8 <__assert_fail@plt+0x2cd8>
   13ce0:	mov	r0, #1
   13ce4:	pop	{r4, r5, r6, sl, fp, pc}
   13ce8:	push	{r4, r5, fp, lr}
   13cec:	add	fp, sp, #8
   13cf0:	mov	r5, r1
   13cf4:	mov	r4, r0
   13cf8:	mov	r0, r1
   13cfc:	bl	1505c <__assert_fail@plt+0x404c>
   13d00:	ldrb	r1, [r4, #6]
   13d04:	cmp	r0, #0
   13d08:	andne	r1, r1, #223	; 0xdf
   13d0c:	mov	r0, #0
   13d10:	cmp	r1, r5
   13d14:	popne	{r4, r5, fp, pc}
   13d18:	cmp	r5, #0
   13d1c:	beq	13d2c <__assert_fail@plt+0x2d1c>
   13d20:	mov	r0, r4
   13d24:	pop	{r4, r5, fp, lr}
   13d28:	b	13d34 <__assert_fail@plt+0x2d24>
   13d2c:	mov	r0, #1
   13d30:	pop	{r4, r5, fp, pc}
   13d34:	push	{r4, sl, fp, lr}
   13d38:	add	fp, sp, #8
   13d3c:	mov	r4, r0
   13d40:	mov	r0, #0
   13d44:	bl	1505c <__assert_fail@plt+0x404c>
   13d48:	ldrb	r1, [r4, #7]
   13d4c:	cmp	r0, #0
   13d50:	beq	13d68 <__assert_fail@plt+0x2d58>
   13d54:	tst	r1, #223	; 0xdf
   13d58:	moveq	r0, #1
   13d5c:	popeq	{r4, sl, fp, pc}
   13d60:	mov	r0, #0
   13d64:	pop	{r4, sl, fp, pc}
   13d68:	cmp	r1, #0
   13d6c:	moveq	r0, #1
   13d70:	popeq	{r4, sl, fp, pc}
   13d74:	mov	r0, #0
   13d78:	pop	{r4, sl, fp, pc}
   13d7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13d80:	add	fp, sp, #24
   13d84:	sub	sp, sp, #32
   13d88:	mov	r4, r2
   13d8c:	mov	r8, r0
   13d90:	ldr	r6, [fp, #12]
   13d94:	ldr	r7, [fp, #8]
   13d98:	cmp	r1, #0
   13d9c:	beq	13dc4 <__assert_fail@plt+0x2db4>
   13da0:	mov	r5, r1
   13da4:	str	r4, [sp]
   13da8:	str	r3, [sp, #4]
   13dac:	movw	r2, #25060	; 0x61e4
   13db0:	movt	r2, #1
   13db4:	mov	r0, r8
   13db8:	mov	r1, #1
   13dbc:	mov	r3, r5
   13dc0:	b	13ddc <__assert_fail@plt+0x2dcc>
   13dc4:	str	r3, [sp]
   13dc8:	movw	r2, #25072	; 0x61f0
   13dcc:	movt	r2, #1
   13dd0:	mov	r0, r8
   13dd4:	mov	r1, #1
   13dd8:	mov	r3, r4
   13ddc:	bl	10f80 <__fprintf_chk@plt>
   13de0:	movw	r1, #25079	; 0x61f7
   13de4:	movt	r1, #1
   13de8:	mov	r0, #0
   13dec:	mov	r2, #5
   13df0:	bl	10e3c <dcgettext@plt>
   13df4:	mov	r3, r0
   13df8:	movw	r0, #2022	; 0x7e6
   13dfc:	str	r0, [sp]
   13e00:	movw	r2, #25797	; 0x64c5
   13e04:	movt	r2, #1
   13e08:	mov	r0, r8
   13e0c:	mov	r1, #1
   13e10:	bl	10f80 <__fprintf_chk@plt>
   13e14:	movw	r4, #24403	; 0x5f53
   13e18:	movt	r4, #1
   13e1c:	mov	r0, r4
   13e20:	mov	r1, r8
   13e24:	bl	10dc4 <fputs_unlocked@plt>
   13e28:	movw	r1, #25083	; 0x61fb
   13e2c:	movt	r1, #1
   13e30:	mov	r0, #0
   13e34:	mov	r2, #5
   13e38:	bl	10e3c <dcgettext@plt>
   13e3c:	mov	r2, r0
   13e40:	movw	r3, #25254	; 0x62a6
   13e44:	movt	r3, #1
   13e48:	mov	r0, r8
   13e4c:	mov	r1, #1
   13e50:	bl	10f80 <__fprintf_chk@plt>
   13e54:	mov	r0, r4
   13e58:	mov	r1, r8
   13e5c:	bl	10dc4 <fputs_unlocked@plt>
   13e60:	cmp	r6, #9
   13e64:	bhi	13ea0 <__assert_fail@plt+0x2e90>
   13e68:	add	r0, pc, #0
   13e6c:	ldr	pc, [r0, r6, lsl #2]
   13e70:	muleq	r1, r8, lr
   13e74:	andeq	r3, r1, ip, lsr #29
   13e78:	ldrdeq	r3, [r1], -ip
   13e7c:	andeq	r3, r1, r4, lsl #30
   13e80:	andeq	r3, r1, ip, lsr #30
   13e84:	andeq	r3, r1, r4, asr pc
   13e88:	andeq	r3, r1, ip, ror pc
   13e8c:			; <UNDEFINED> instruction: 0x00013fb4
   13e90:	andeq	r4, r1, r4, asr r0
   13e94:	strdeq	r3, [r1], -ip
   13e98:	sub	sp, fp, #24
   13e9c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13ea0:	movw	r1, #25607	; 0x6407
   13ea4:	movt	r1, #1
   13ea8:	b	14004 <__assert_fail@plt+0x2ff4>
   13eac:	movw	r1, #25288	; 0x62c8
   13eb0:	movt	r1, #1
   13eb4:	mov	r0, #0
   13eb8:	mov	r2, #5
   13ebc:	bl	10e3c <dcgettext@plt>
   13ec0:	mov	r2, r0
   13ec4:	ldr	r3, [r7]
   13ec8:	mov	r0, r8
   13ecc:	mov	r1, #1
   13ed0:	sub	sp, fp, #24
   13ed4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13ed8:	b	10f80 <__fprintf_chk@plt>
   13edc:	movw	r1, #25304	; 0x62d8
   13ee0:	movt	r1, #1
   13ee4:	mov	r0, #0
   13ee8:	mov	r2, #5
   13eec:	bl	10e3c <dcgettext@plt>
   13ef0:	mov	r2, r0
   13ef4:	ldr	r3, [r7]
   13ef8:	ldr	r0, [r7, #4]
   13efc:	str	r0, [sp]
   13f00:	b	13ff0 <__assert_fail@plt+0x2fe0>
   13f04:	movw	r1, #25327	; 0x62ef
   13f08:	movt	r1, #1
   13f0c:	mov	r0, #0
   13f10:	mov	r2, #5
   13f14:	bl	10e3c <dcgettext@plt>
   13f18:	mov	r2, r0
   13f1c:	ldr	r3, [r7]
   13f20:	ldmib	r7, {r0, r1}
   13f24:	stm	sp, {r0, r1}
   13f28:	b	13ff0 <__assert_fail@plt+0x2fe0>
   13f2c:	movw	r1, #25355	; 0x630b
   13f30:	movt	r1, #1
   13f34:	mov	r0, #0
   13f38:	mov	r2, #5
   13f3c:	bl	10e3c <dcgettext@plt>
   13f40:	mov	r2, r0
   13f44:	ldr	r3, [r7]
   13f48:	ldmib	r7, {r0, r1, r7}
   13f4c:	stm	sp, {r0, r1, r7}
   13f50:	b	13ff0 <__assert_fail@plt+0x2fe0>
   13f54:	movw	r1, #25387	; 0x632b
   13f58:	movt	r1, #1
   13f5c:	mov	r0, #0
   13f60:	mov	r2, #5
   13f64:	bl	10e3c <dcgettext@plt>
   13f68:	mov	r2, r0
   13f6c:	ldr	r3, [r7]
   13f70:	ldmib	r7, {r0, r1, r6, r7}
   13f74:	stm	sp, {r0, r1, r6, r7}
   13f78:	b	13ff0 <__assert_fail@plt+0x2fe0>
   13f7c:	movw	r1, #25423	; 0x634f
   13f80:	movt	r1, #1
   13f84:	mov	r0, #0
   13f88:	mov	r2, #5
   13f8c:	bl	10e3c <dcgettext@plt>
   13f90:	mov	r2, r0
   13f94:	ldr	r3, [r7]
   13f98:	ldmib	r7, {r0, r1, r6}
   13f9c:	ldr	r5, [r7, #16]
   13fa0:	ldr	r7, [r7, #20]
   13fa4:	stm	sp, {r0, r1, r6}
   13fa8:	str	r5, [sp, #12]
   13fac:	str	r7, [sp, #16]
   13fb0:	b	13ff0 <__assert_fail@plt+0x2fe0>
   13fb4:	movw	r1, #25463	; 0x6377
   13fb8:	movt	r1, #1
   13fbc:	mov	r0, #0
   13fc0:	mov	r2, #5
   13fc4:	bl	10e3c <dcgettext@plt>
   13fc8:	mov	r2, r0
   13fcc:	ldr	r3, [r7]
   13fd0:	ldmib	r7, {r0, r1, r6}
   13fd4:	ldr	r5, [r7, #16]
   13fd8:	ldr	r4, [r7, #20]
   13fdc:	ldr	r7, [r7, #24]
   13fe0:	stm	sp, {r0, r1, r6}
   13fe4:	str	r5, [sp, #12]
   13fe8:	str	r4, [sp, #16]
   13fec:	str	r7, [sp, #20]
   13ff0:	mov	r0, r8
   13ff4:	mov	r1, #1
   13ff8:	b	140a4 <__assert_fail@plt+0x3094>
   13ffc:	movw	r1, #25555	; 0x63d3
   14000:	movt	r1, #1
   14004:	mov	r0, #0
   14008:	mov	r2, #5
   1400c:	bl	10e3c <dcgettext@plt>
   14010:	mov	ip, r0
   14014:	ldr	r3, [r7]
   14018:	ldr	r0, [r7, #4]
   1401c:	ldr	r1, [r7, #8]
   14020:	ldr	r6, [r7, #12]
   14024:	ldr	r5, [r7, #16]
   14028:	ldr	r4, [r7, #20]
   1402c:	ldr	r2, [r7, #24]
   14030:	ldr	lr, [r7, #28]
   14034:	ldr	r7, [r7, #32]
   14038:	stm	sp, {r0, r1, r6}
   1403c:	str	r5, [sp, #12]
   14040:	str	r4, [sp, #16]
   14044:	str	r2, [sp, #20]
   14048:	str	lr, [sp, #24]
   1404c:	str	r7, [sp, #28]
   14050:	b	14098 <__assert_fail@plt+0x3088>
   14054:	movw	r1, #25507	; 0x63a3
   14058:	movt	r1, #1
   1405c:	mov	r0, #0
   14060:	mov	r2, #5
   14064:	bl	10e3c <dcgettext@plt>
   14068:	mov	ip, r0
   1406c:	ldr	r3, [r7]
   14070:	ldmib	r7, {r0, r1, r6}
   14074:	ldr	r5, [r7, #16]
   14078:	ldr	r4, [r7, #20]
   1407c:	ldr	r2, [r7, #24]
   14080:	ldr	r7, [r7, #28]
   14084:	stm	sp, {r0, r1, r6}
   14088:	str	r5, [sp, #12]
   1408c:	str	r4, [sp, #16]
   14090:	str	r2, [sp, #20]
   14094:	str	r7, [sp, #24]
   14098:	mov	r0, r8
   1409c:	mov	r1, #1
   140a0:	mov	r2, ip
   140a4:	bl	10f80 <__fprintf_chk@plt>
   140a8:	sub	sp, fp, #24
   140ac:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   140b0:	push	{r4, sl, fp, lr}
   140b4:	add	fp, sp, #8
   140b8:	sub	sp, sp, #8
   140bc:	mov	lr, #0
   140c0:	ldr	ip, [fp, #8]
   140c4:	ldr	r4, [ip, lr, lsl #2]
   140c8:	add	lr, lr, #1
   140cc:	cmp	r4, #0
   140d0:	bne	140c4 <__assert_fail@plt+0x30b4>
   140d4:	sub	r4, lr, #1
   140d8:	str	ip, [sp]
   140dc:	str	r4, [sp, #4]
   140e0:	bl	13d7c <__assert_fail@plt+0x2d6c>
   140e4:	sub	sp, fp, #8
   140e8:	pop	{r4, sl, fp, pc}
   140ec:	push	{r4, r5, fp, lr}
   140f0:	add	fp, sp, #8
   140f4:	sub	sp, sp, #48	; 0x30
   140f8:	mov	ip, #0
   140fc:	ldr	r4, [fp, #8]
   14100:	add	lr, sp, #8
   14104:	ldr	r5, [r4]
   14108:	str	r5, [lr, ip, lsl #2]
   1410c:	cmp	r5, #0
   14110:	beq	14124 <__assert_fail@plt+0x3114>
   14114:	add	ip, ip, #1
   14118:	add	r4, r4, #4
   1411c:	cmp	ip, #10
   14120:	bcc	14104 <__assert_fail@plt+0x30f4>
   14124:	str	lr, [sp]
   14128:	str	ip, [sp, #4]
   1412c:	bl	13d7c <__assert_fail@plt+0x2d6c>
   14130:	sub	sp, fp, #8
   14134:	pop	{r4, r5, fp, pc}
   14138:	push	{fp, lr}
   1413c:	mov	fp, sp
   14140:	sub	sp, sp, #8
   14144:	add	ip, fp, #8
   14148:	str	ip, [sp, #4]
   1414c:	str	ip, [sp]
   14150:	bl	140ec <__assert_fail@plt+0x30dc>
   14154:	mov	sp, fp
   14158:	pop	{fp, pc}
   1415c:	push	{fp, lr}
   14160:	mov	fp, sp
   14164:	movw	r0, #28996	; 0x7144
   14168:	movt	r0, #2
   1416c:	ldr	r1, [r0]
   14170:	movw	r0, #24403	; 0x5f53
   14174:	movt	r0, #1
   14178:	bl	10dc4 <fputs_unlocked@plt>
   1417c:	movw	r1, #25667	; 0x6443
   14180:	movt	r1, #1
   14184:	mov	r0, #0
   14188:	mov	r2, #5
   1418c:	bl	10e3c <dcgettext@plt>
   14190:	mov	r1, r0
   14194:	movw	r2, #25687	; 0x6457
   14198:	movt	r2, #1
   1419c:	mov	r0, #1
   141a0:	bl	10f68 <__printf_chk@plt>
   141a4:	movw	r1, #25709	; 0x646d
   141a8:	movt	r1, #1
   141ac:	mov	r0, #0
   141b0:	mov	r2, #5
   141b4:	bl	10e3c <dcgettext@plt>
   141b8:	mov	r1, r0
   141bc:	movw	r2, #23536	; 0x5bf0
   141c0:	movt	r2, #1
   141c4:	movw	r3, #24212	; 0x5e94
   141c8:	movt	r3, #1
   141cc:	mov	r0, #1
   141d0:	bl	10f68 <__printf_chk@plt>
   141d4:	movw	r1, #25729	; 0x6481
   141d8:	movt	r1, #1
   141dc:	mov	r0, #0
   141e0:	mov	r2, #5
   141e4:	bl	10e3c <dcgettext@plt>
   141e8:	mov	r1, r0
   141ec:	movw	r2, #25768	; 0x64a8
   141f0:	movt	r2, #1
   141f4:	mov	r0, #1
   141f8:	pop	{fp, lr}
   141fc:	b	10f68 <__printf_chk@plt>
   14200:	b	14204 <__assert_fail@plt+0x31f4>
   14204:	push	{r4, r5, r6, sl, fp, lr}
   14208:	add	fp, sp, #16
   1420c:	mov	r4, r2
   14210:	mov	r5, r1
   14214:	mov	r6, r0
   14218:	bl	15410 <__assert_fail@plt+0x4400>
   1421c:	cmp	r0, #0
   14220:	popne	{r4, r5, r6, sl, fp, pc}
   14224:	cmp	r6, #0
   14228:	beq	1423c <__assert_fail@plt+0x322c>
   1422c:	cmp	r5, #0
   14230:	cmpne	r4, #0
   14234:	bne	1423c <__assert_fail@plt+0x322c>
   14238:	pop	{r4, r5, r6, sl, fp, pc}
   1423c:	bl	145f0 <__assert_fail@plt+0x35e0>
   14240:	push	{fp, lr}
   14244:	mov	fp, sp
   14248:	bl	14d24 <__assert_fail@plt+0x3d14>
   1424c:	bl	14254 <__assert_fail@plt+0x3244>
   14250:	pop	{fp, pc}
   14254:	cmp	r0, #0
   14258:	bxne	lr
   1425c:	push	{fp, lr}
   14260:	mov	fp, sp
   14264:	bl	145f0 <__assert_fail@plt+0x35e0>
   14268:	push	{fp, lr}
   1426c:	mov	fp, sp
   14270:	bl	15344 <__assert_fail@plt+0x4334>
   14274:	bl	14254 <__assert_fail@plt+0x3244>
   14278:	pop	{fp, pc}
   1427c:	b	14240 <__assert_fail@plt+0x3230>
   14280:	push	{r4, r5, fp, lr}
   14284:	add	fp, sp, #8
   14288:	mov	r4, r1
   1428c:	mov	r5, r0
   14290:	bl	14d54 <__assert_fail@plt+0x3d44>
   14294:	cmp	r0, #0
   14298:	popne	{r4, r5, fp, pc}
   1429c:	cmp	r5, #0
   142a0:	beq	142b0 <__assert_fail@plt+0x32a0>
   142a4:	cmp	r4, #0
   142a8:	bne	142b0 <__assert_fail@plt+0x32a0>
   142ac:	pop	{r4, r5, fp, pc}
   142b0:	bl	145f0 <__assert_fail@plt+0x35e0>
   142b4:	push	{fp, lr}
   142b8:	mov	fp, sp
   142bc:	bl	15348 <__assert_fail@plt+0x4338>
   142c0:	bl	14254 <__assert_fail@plt+0x3244>
   142c4:	pop	{fp, pc}
   142c8:	push	{fp, lr}
   142cc:	mov	fp, sp
   142d0:	bl	15358 <__assert_fail@plt+0x4348>
   142d4:	bl	14254 <__assert_fail@plt+0x3244>
   142d8:	pop	{fp, pc}
   142dc:	push	{fp, lr}
   142e0:	mov	fp, sp
   142e4:	mov	r2, r1
   142e8:	mov	r1, r0
   142ec:	mov	r0, #0
   142f0:	bl	14204 <__assert_fail@plt+0x31f4>
   142f4:	pop	{fp, pc}
   142f8:	mov	r2, r1
   142fc:	mov	r1, r0
   14300:	mov	r0, #0
   14304:	b	142c8 <__assert_fail@plt+0x32b8>
   14308:	mov	r2, #1
   1430c:	b	14310 <__assert_fail@plt+0x3300>
   14310:	push	{r4, r5, fp, lr}
   14314:	add	fp, sp, #8
   14318:	mov	r4, r1
   1431c:	ldr	r5, [r1]
   14320:	cmp	r0, #0
   14324:	beq	1433c <__assert_fail@plt+0x332c>
   14328:	mov	r1, #1
   1432c:	add	r1, r1, r5, lsr #1
   14330:	adds	r5, r5, r1
   14334:	bcc	14354 <__assert_fail@plt+0x3344>
   14338:	bl	145f0 <__assert_fail@plt+0x35e0>
   1433c:	cmp	r5, #0
   14340:	bne	14354 <__assert_fail@plt+0x3344>
   14344:	mov	r1, #64	; 0x40
   14348:	udiv	r5, r1, r2
   1434c:	cmp	r2, #64	; 0x40
   14350:	addhi	r5, r5, #1
   14354:	mov	r1, r5
   14358:	bl	14204 <__assert_fail@plt+0x31f4>
   1435c:	str	r5, [r4]
   14360:	pop	{r4, r5, fp, pc}
   14364:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14368:	add	fp, sp, #24
   1436c:	mov	r8, r1
   14370:	ldr	r6, [r1]
   14374:	add	r1, r6, r6, asr #1
   14378:	cmp	r1, r6
   1437c:	mvnvs	r1, #-2147483648	; 0x80000000
   14380:	cmp	r1, r3
   14384:	mov	r5, r1
   14388:	movgt	r5, r3
   1438c:	cmn	r3, #1
   14390:	movle	r5, r1
   14394:	ldr	r4, [fp, #8]
   14398:	cmn	r4, #1
   1439c:	ble	143c4 <__assert_fail@plt+0x33b4>
   143a0:	cmp	r4, #0
   143a4:	beq	14418 <__assert_fail@plt+0x3408>
   143a8:	cmn	r5, #1
   143ac:	ble	143ec <__assert_fail@plt+0x33dc>
   143b0:	mvn	r7, #-2147483648	; 0x80000000
   143b4:	udiv	r1, r7, r4
   143b8:	cmp	r1, r5
   143bc:	bge	14418 <__assert_fail@plt+0x3408>
   143c0:	b	14428 <__assert_fail@plt+0x3418>
   143c4:	cmn	r5, #1
   143c8:	ble	14408 <__assert_fail@plt+0x33f8>
   143cc:	cmn	r4, #1
   143d0:	beq	14418 <__assert_fail@plt+0x3408>
   143d4:	mov	r1, #-2147483648	; 0x80000000
   143d8:	sdiv	r1, r1, r4
   143dc:	mvn	r7, #-2147483648	; 0x80000000
   143e0:	cmp	r1, r5
   143e4:	bge	14418 <__assert_fail@plt+0x3408>
   143e8:	b	14428 <__assert_fail@plt+0x3418>
   143ec:	beq	14418 <__assert_fail@plt+0x3408>
   143f0:	mov	r1, #-2147483648	; 0x80000000
   143f4:	sdiv	r1, r1, r5
   143f8:	mvn	r7, #-2147483648	; 0x80000000
   143fc:	cmp	r1, r4
   14400:	bge	14418 <__assert_fail@plt+0x3408>
   14404:	b	14428 <__assert_fail@plt+0x3418>
   14408:	mvn	r7, #-2147483648	; 0x80000000
   1440c:	sdiv	r1, r7, r4
   14410:	cmp	r5, r1
   14414:	blt	14428 <__assert_fail@plt+0x3418>
   14418:	mul	r1, r5, r4
   1441c:	mov	r7, #64	; 0x40
   14420:	cmp	r1, #63	; 0x3f
   14424:	bgt	14430 <__assert_fail@plt+0x3420>
   14428:	sdiv	r5, r7, r4
   1442c:	mul	r1, r5, r4
   14430:	cmp	r0, #0
   14434:	moveq	r7, #0
   14438:	streq	r7, [r8]
   1443c:	sub	r7, r5, r6
   14440:	cmp	r7, r2
   14444:	bge	144f0 <__assert_fail@plt+0x34e0>
   14448:	add	r5, r6, r2
   1444c:	mov	r1, #0
   14450:	cmp	r5, r3
   14454:	mov	r2, #0
   14458:	movwgt	r2, #1
   1445c:	cmn	r3, #1
   14460:	movwgt	r1, #1
   14464:	cmp	r5, r6
   14468:	bvs	144d8 <__assert_fail@plt+0x34c8>
   1446c:	ands	r1, r1, r2
   14470:	bne	144d8 <__assert_fail@plt+0x34c8>
   14474:	cmn	r4, #1
   14478:	ble	144a0 <__assert_fail@plt+0x3490>
   1447c:	cmp	r4, #0
   14480:	beq	144ec <__assert_fail@plt+0x34dc>
   14484:	cmn	r5, #1
   14488:	ble	144c4 <__assert_fail@plt+0x34b4>
   1448c:	mvn	r1, #-2147483648	; 0x80000000
   14490:	udiv	r1, r1, r4
   14494:	cmp	r1, r5
   14498:	bge	144ec <__assert_fail@plt+0x34dc>
   1449c:	b	144d8 <__assert_fail@plt+0x34c8>
   144a0:	cmn	r5, #1
   144a4:	ble	144dc <__assert_fail@plt+0x34cc>
   144a8:	cmn	r4, #1
   144ac:	beq	144ec <__assert_fail@plt+0x34dc>
   144b0:	mov	r1, #-2147483648	; 0x80000000
   144b4:	sdiv	r1, r1, r4
   144b8:	cmp	r1, r5
   144bc:	bge	144ec <__assert_fail@plt+0x34dc>
   144c0:	b	144d8 <__assert_fail@plt+0x34c8>
   144c4:	beq	144ec <__assert_fail@plt+0x34dc>
   144c8:	mov	r1, #-2147483648	; 0x80000000
   144cc:	sdiv	r1, r1, r5
   144d0:	cmp	r1, r4
   144d4:	bge	144ec <__assert_fail@plt+0x34dc>
   144d8:	bl	145f0 <__assert_fail@plt+0x35e0>
   144dc:	mvn	r1, #-2147483648	; 0x80000000
   144e0:	sdiv	r1, r1, r4
   144e4:	cmp	r5, r1
   144e8:	blt	144d8 <__assert_fail@plt+0x34c8>
   144ec:	mul	r1, r5, r4
   144f0:	bl	14280 <__assert_fail@plt+0x3270>
   144f4:	str	r5, [r8]
   144f8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   144fc:	mov	r1, #1
   14500:	b	14504 <__assert_fail@plt+0x34f4>
   14504:	push	{fp, lr}
   14508:	mov	fp, sp
   1450c:	bl	14cd0 <__assert_fail@plt+0x3cc0>
   14510:	bl	14254 <__assert_fail@plt+0x3244>
   14514:	pop	{fp, pc}
   14518:	mov	r1, #1
   1451c:	b	14520 <__assert_fail@plt+0x3510>
   14520:	push	{fp, lr}
   14524:	mov	fp, sp
   14528:	bl	15354 <__assert_fail@plt+0x4344>
   1452c:	bl	14254 <__assert_fail@plt+0x3244>
   14530:	pop	{fp, pc}
   14534:	push	{r4, r5, r6, sl, fp, lr}
   14538:	add	fp, sp, #16
   1453c:	mov	r4, r1
   14540:	mov	r5, r0
   14544:	mov	r0, r1
   14548:	bl	14240 <__assert_fail@plt+0x3230>
   1454c:	mov	r6, r0
   14550:	mov	r1, r5
   14554:	mov	r2, r4
   14558:	bl	10e0c <memcpy@plt>
   1455c:	mov	r0, r6
   14560:	pop	{r4, r5, r6, sl, fp, pc}
   14564:	push	{r4, r5, r6, sl, fp, lr}
   14568:	add	fp, sp, #16
   1456c:	mov	r4, r1
   14570:	mov	r5, r0
   14574:	mov	r0, r1
   14578:	bl	14268 <__assert_fail@plt+0x3258>
   1457c:	mov	r6, r0
   14580:	mov	r1, r5
   14584:	mov	r2, r4
   14588:	bl	10e0c <memcpy@plt>
   1458c:	mov	r0, r6
   14590:	pop	{r4, r5, r6, sl, fp, pc}
   14594:	push	{r4, r5, r6, sl, fp, lr}
   14598:	add	fp, sp, #16
   1459c:	mov	r4, r1
   145a0:	mov	r5, r0
   145a4:	add	r0, r1, #1
   145a8:	bl	14268 <__assert_fail@plt+0x3258>
   145ac:	mov	r6, r0
   145b0:	mov	r0, #0
   145b4:	strb	r0, [r6, r4]
   145b8:	mov	r0, r6
   145bc:	mov	r1, r5
   145c0:	mov	r2, r4
   145c4:	bl	10e0c <memcpy@plt>
   145c8:	mov	r0, r6
   145cc:	pop	{r4, r5, r6, sl, fp, pc}
   145d0:	push	{r4, sl, fp, lr}
   145d4:	add	fp, sp, #8
   145d8:	mov	r4, r0
   145dc:	bl	10f2c <strlen@plt>
   145e0:	add	r1, r0, #1
   145e4:	mov	r0, r4
   145e8:	pop	{r4, sl, fp, lr}
   145ec:	b	14534 <__assert_fail@plt+0x3524>
   145f0:	push	{fp, lr}
   145f4:	mov	fp, sp
   145f8:	movw	r0, #28908	; 0x70ec
   145fc:	movt	r0, #2
   14600:	ldr	r4, [r0]
   14604:	movw	r1, #25844	; 0x64f4
   14608:	movt	r1, #1
   1460c:	mov	r0, #0
   14610:	mov	r2, #5
   14614:	bl	10e3c <dcgettext@plt>
   14618:	mov	r3, r0
   1461c:	movw	r2, #24807	; 0x60e7
   14620:	movt	r2, #1
   14624:	mov	r0, r4
   14628:	mov	r1, #0
   1462c:	bl	10ec0 <error@plt>
   14630:	bl	10ff8 <abort@plt>
   14634:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14638:	add	fp, sp, #24
   1463c:	sub	sp, sp, #16
   14640:	mov	r5, r3
   14644:	mov	r6, r2
   14648:	mov	r2, r1
   1464c:	mov	r8, r0
   14650:	ldr	r0, [fp, #16]
   14654:	str	r0, [sp]
   14658:	add	r3, sp, #8
   1465c:	mov	r0, r8
   14660:	mov	r1, #0
   14664:	bl	14740 <__assert_fail@plt+0x3730>
   14668:	cmp	r0, #0
   1466c:	bne	1471c <__assert_fail@plt+0x370c>
   14670:	ldr	r7, [sp, #8]
   14674:	ldr	r4, [sp, #12]
   14678:	subs	r0, r7, r6
   1467c:	sbcs	r0, r4, r5
   14680:	blt	146a4 <__assert_fail@plt+0x3694>
   14684:	ldr	r0, [fp, #12]
   14688:	ldr	r1, [fp, #8]
   1468c:	subs	r1, r1, r7
   14690:	sbcs	r0, r0, r4
   14694:	ldrge	r0, [sp, #8]
   14698:	ldrge	r1, [sp, #12]
   1469c:	subge	sp, fp, #24
   146a0:	popge	{r4, r5, r6, r7, r8, sl, fp, pc}
   146a4:	subs	r0, r7, #1073741824	; 0x40000000
   146a8:	sbcs	r0, r4, #0
   146ac:	blt	146bc <__assert_fail@plt+0x36ac>
   146b0:	bl	10f44 <__errno_location@plt>
   146b4:	mov	r1, #75	; 0x4b
   146b8:	b	146d8 <__assert_fail@plt+0x36c8>
   146bc:	bl	10f44 <__errno_location@plt>
   146c0:	mvn	r1, #0
   146c4:	mvn	r2, #1073741824	; 0x40000000
   146c8:	subs	r2, r2, r7
   146cc:	sbcs	r1, r1, r4
   146d0:	movlt	r1, #34	; 0x22
   146d4:	movge	r1, #75	; 0x4b
   146d8:	str	r1, [r0]
   146dc:	ldr	r5, [fp, #24]
   146e0:	ldr	r6, [fp, #20]
   146e4:	bl	10f44 <__errno_location@plt>
   146e8:	ldr	r4, [r0]
   146ec:	mov	r0, r8
   146f0:	bl	13968 <__assert_fail@plt+0x2958>
   146f4:	str	r0, [sp]
   146f8:	subs	r1, r4, #22
   146fc:	movne	r1, r4
   14700:	cmp	r5, #0
   14704:	movweq	r5, #1
   14708:	movw	r2, #24803	; 0x60e3
   1470c:	movt	r2, #1
   14710:	mov	r0, r5
   14714:	mov	r3, r6
   14718:	bl	10ec0 <error@plt>
   1471c:	cmp	r0, #1
   14720:	beq	146b0 <__assert_fail@plt+0x36a0>
   14724:	cmp	r0, #3
   14728:	bne	146dc <__assert_fail@plt+0x36cc>
   1472c:	bl	10f44 <__errno_location@plt>
   14730:	mov	r1, #0
   14734:	b	146d8 <__assert_fail@plt+0x36c8>
   14738:	mov	r1, #10
   1473c:	b	14634 <__assert_fail@plt+0x3624>
   14740:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14744:	add	fp, sp, #28
   14748:	sub	sp, sp, #20
   1474c:	cmp	r2, #37	; 0x25
   14750:	bcs	14b64 <__assert_fail@plt+0x3b54>
   14754:	mov	r9, r3
   14758:	mov	r7, r2
   1475c:	mov	r6, r1
   14760:	mov	r4, r0
   14764:	ldr	sl, [fp, #8]
   14768:	bl	10f44 <__errno_location@plt>
   1476c:	mov	r5, r0
   14770:	mov	r0, #0
   14774:	str	r0, [r5]
   14778:	add	r8, sp, #16
   1477c:	cmp	r6, #0
   14780:	movne	r8, r6
   14784:	mov	r0, r4
   14788:	mov	r1, r8
   1478c:	mov	r2, r7
   14790:	bl	10f8c <strtoimax@plt>
   14794:	str	r1, [sp, #12]
   14798:	str	r0, [sp, #8]
   1479c:	ldr	r7, [r8]
   147a0:	cmp	r7, r4
   147a4:	beq	147d0 <__assert_fail@plt+0x37c0>
   147a8:	ldr	r0, [r5]
   147ac:	cmp	r0, #0
   147b0:	beq	14808 <__assert_fail@plt+0x37f8>
   147b4:	mov	r5, #4
   147b8:	cmp	r0, #34	; 0x22
   147bc:	bne	14b58 <__assert_fail@plt+0x3b48>
   147c0:	mov	r5, #1
   147c4:	cmp	sl, #0
   147c8:	bne	14814 <__assert_fail@plt+0x3804>
   147cc:	b	14b4c <__assert_fail@plt+0x3b3c>
   147d0:	mov	r5, #4
   147d4:	cmp	sl, #0
   147d8:	ldrbne	r1, [r7]
   147dc:	cmpne	r1, #0
   147e0:	beq	14b58 <__assert_fail@plt+0x3b48>
   147e4:	mov	r0, sl
   147e8:	bl	10f38 <strchr@plt>
   147ec:	cmp	r0, #0
   147f0:	beq	14b58 <__assert_fail@plt+0x3b48>
   147f4:	mov	r5, #0
   147f8:	str	r5, [sp, #12]
   147fc:	mov	r0, #1
   14800:	str	r0, [sp, #8]
   14804:	b	14814 <__assert_fail@plt+0x3804>
   14808:	mov	r5, r0
   1480c:	cmp	sl, #0
   14810:	beq	14b4c <__assert_fail@plt+0x3b3c>
   14814:	ldrb	r4, [r7]
   14818:	cmp	r4, #0
   1481c:	beq	14b4c <__assert_fail@plt+0x3b3c>
   14820:	mov	r0, sl
   14824:	mov	r1, r4
   14828:	bl	10f38 <strchr@plt>
   1482c:	cmp	r0, #0
   14830:	beq	14a48 <__assert_fail@plt+0x3a38>
   14834:	sub	r0, r4, #69	; 0x45
   14838:	mov	r1, #1
   1483c:	str	r1, [sp, #4]
   14840:	mov	r6, #1024	; 0x400
   14844:	cmp	r0, #47	; 0x2f
   14848:	bhi	14944 <__assert_fail@plt+0x3934>
   1484c:	add	r1, pc, #0
   14850:	ldr	pc, [r1, r0, lsl #2]
   14854:	andeq	r4, r1, r4, lsl r9
   14858:	andeq	r4, r1, r4, asr #18
   1485c:	andeq	r4, r1, r4, lsl r9
   14860:	andeq	r4, r1, r4, asr #18
   14864:	andeq	r4, r1, r4, asr #18
   14868:	andeq	r4, r1, r4, asr #18
   1486c:	andeq	r4, r1, r4, lsl r9
   14870:	andeq	r4, r1, r4, asr #18
   14874:	andeq	r4, r1, r4, lsl r9
   14878:	andeq	r4, r1, r4, asr #18
   1487c:	andeq	r4, r1, r4, asr #18
   14880:	andeq	r4, r1, r4, lsl r9
   14884:	andeq	r4, r1, r4, asr #18
   14888:	andeq	r4, r1, r4, asr #18
   1488c:	andeq	r4, r1, r4, asr #18
   14890:	andeq	r4, r1, r4, lsl r9
   14894:	andeq	r4, r1, r4, asr #18
   14898:	andeq	r4, r1, r4, asr #18
   1489c:	andeq	r4, r1, r4, asr #18
   148a0:	andeq	r4, r1, r4, asr #18
   148a4:	andeq	r4, r1, r4, lsl r9
   148a8:	andeq	r4, r1, r4, lsl r9
   148ac:	andeq	r4, r1, r4, asr #18
   148b0:	andeq	r4, r1, r4, asr #18
   148b4:	andeq	r4, r1, r4, asr #18
   148b8:	andeq	r4, r1, r4, asr #18
   148bc:	andeq	r4, r1, r4, asr #18
   148c0:	andeq	r4, r1, r4, asr #18
   148c4:	andeq	r4, r1, r4, asr #18
   148c8:	andeq	r4, r1, r4, asr #18
   148cc:	andeq	r4, r1, r4, asr #18
   148d0:	andeq	r4, r1, r4, asr #18
   148d4:	andeq	r4, r1, r4, asr #18
   148d8:	andeq	r4, r1, r4, asr #18
   148dc:	andeq	r4, r1, r4, lsl r9
   148e0:	andeq	r4, r1, r4, asr #18
   148e4:	andeq	r4, r1, r4, asr #18
   148e8:	andeq	r4, r1, r4, asr #18
   148ec:	andeq	r4, r1, r4, lsl r9
   148f0:	andeq	r4, r1, r4, asr #18
   148f4:	andeq	r4, r1, r4, lsl r9
   148f8:	andeq	r4, r1, r4, asr #18
   148fc:	andeq	r4, r1, r4, asr #18
   14900:	andeq	r4, r1, r4, asr #18
   14904:	andeq	r4, r1, r4, asr #18
   14908:	andeq	r4, r1, r4, asr #18
   1490c:	andeq	r4, r1, r4, asr #18
   14910:	andeq	r4, r1, r4, lsl r9
   14914:	mov	r0, sl
   14918:	mov	r1, #48	; 0x30
   1491c:	bl	10f38 <strchr@plt>
   14920:	cmp	r0, #0
   14924:	beq	14944 <__assert_fail@plt+0x3934>
   14928:	ldrb	r0, [r7, #1]
   1492c:	cmp	r0, #66	; 0x42
   14930:	cmpne	r0, #68	; 0x44
   14934:	bne	14a5c <__assert_fail@plt+0x3a4c>
   14938:	mov	r0, #2
   1493c:	str	r0, [sp, #4]
   14940:	mov	r6, #1000	; 0x3e8
   14944:	sub	r1, r4, #66	; 0x42
   14948:	cmp	r1, #53	; 0x35
   1494c:	bhi	14a48 <__assert_fail@plt+0x3a38>
   14950:	mov	r0, #0
   14954:	add	r2, pc, #0
   14958:	ldr	pc, [r2, r1, lsl #2]
   1495c:	andeq	r4, r1, ip, asr #21
   14960:	andeq	r4, r1, r8, asr #20
   14964:	andeq	r4, r1, r8, asr #20
   14968:	ldrdeq	r4, [r1], -r8
   1496c:	andeq	r4, r1, r8, asr #20
   14970:	andeq	r4, r1, r4, lsr sl
   14974:	andeq	r4, r1, r8, asr #20
   14978:	andeq	r4, r1, r8, asr #20
   1497c:	andeq	r4, r1, r8, asr #20
   14980:	andeq	r4, r1, ip, ror sl
   14984:	andeq	r4, r1, r8, asr #20
   14988:	muleq	r1, r0, sl
   1498c:	andeq	r4, r1, r8, asr #20
   14990:	andeq	r4, r1, r8, asr #20
   14994:	andeq	r4, r1, ip, ror #21
   14998:	andeq	r4, r1, r8, asr #20
   1499c:	andeq	r4, r1, r8, asr #20
   149a0:	andeq	r4, r1, r8, asr #20
   149a4:	andeq	r4, r1, r4, lsr #21
   149a8:	andeq	r4, r1, r8, asr #20
   149ac:	andeq	r4, r1, r8, asr #20
   149b0:	andeq	r4, r1, r8, asr #20
   149b4:	andeq	r4, r1, r8, asr #20
   149b8:	andeq	r4, r1, r0, lsl #22
   149bc:			; <UNDEFINED> instruction: 0x00014ab8
   149c0:	andeq	r4, r1, r8, asr #20
   149c4:	andeq	r4, r1, r8, asr #20
   149c8:	andeq	r4, r1, r8, asr #20
   149cc:	andeq	r4, r1, r8, asr #20
   149d0:	andeq	r4, r1, r8, asr #20
   149d4:	andeq	r4, r1, r8, asr #20
   149d8:	andeq	r4, r1, r8, asr #20
   149dc:	andeq	r4, r1, r4, lsl fp
   149e0:	andeq	r4, r1, ip, lsr #22
   149e4:	andeq	r4, r1, r8, asr #20
   149e8:	andeq	r4, r1, r8, asr #20
   149ec:	andeq	r4, r1, r8, asr #20
   149f0:	andeq	r4, r1, r4, lsr sl
   149f4:	andeq	r4, r1, r8, asr #20
   149f8:	andeq	r4, r1, r8, asr #20
   149fc:	andeq	r4, r1, r8, asr #20
   14a00:	andeq	r4, r1, ip, ror sl
   14a04:	andeq	r4, r1, r8, asr #20
   14a08:	muleq	r1, r0, sl
   14a0c:	andeq	r4, r1, r8, asr #20
   14a10:	andeq	r4, r1, r8, asr #20
   14a14:	andeq	r4, r1, r8, asr #20
   14a18:	andeq	r4, r1, r8, asr #20
   14a1c:	andeq	r4, r1, r8, asr #20
   14a20:	andeq	r4, r1, r8, asr #20
   14a24:	andeq	r4, r1, r4, lsr #21
   14a28:	andeq	r4, r1, r8, asr #20
   14a2c:	andeq	r4, r1, r8, asr #20
   14a30:	andeq	r4, r1, r0, lsr #22
   14a34:	add	r0, sp, #8
   14a38:	mov	r1, r6
   14a3c:	mov	r2, #3
   14a40:	bl	14c88 <__assert_fail@plt+0x3c78>
   14a44:	b	14b2c <__assert_fail@plt+0x3b1c>
   14a48:	ldr	r0, [sp, #8]
   14a4c:	ldr	r1, [sp, #12]
   14a50:	strd	r0, [r9]
   14a54:	orr	r5, r5, #2
   14a58:	b	14b58 <__assert_fail@plt+0x3b48>
   14a5c:	cmp	r0, #105	; 0x69
   14a60:	bne	14944 <__assert_fail@plt+0x3934>
   14a64:	ldrb	r0, [r7, #2]
   14a68:	mov	r1, #1
   14a6c:	cmp	r0, #66	; 0x42
   14a70:	movweq	r1, #3
   14a74:	str	r1, [sp, #4]
   14a78:	b	14944 <__assert_fail@plt+0x3934>
   14a7c:	add	r0, sp, #8
   14a80:	mov	r1, r6
   14a84:	mov	r2, #1
   14a88:	bl	14c88 <__assert_fail@plt+0x3c78>
   14a8c:	b	14b2c <__assert_fail@plt+0x3b1c>
   14a90:	add	r0, sp, #8
   14a94:	mov	r1, r6
   14a98:	mov	r2, #2
   14a9c:	bl	14c88 <__assert_fail@plt+0x3c78>
   14aa0:	b	14b2c <__assert_fail@plt+0x3b1c>
   14aa4:	add	r0, sp, #8
   14aa8:	mov	r1, r6
   14aac:	mov	r2, #4
   14ab0:	bl	14c88 <__assert_fail@plt+0x3c78>
   14ab4:	b	14b2c <__assert_fail@plt+0x3b1c>
   14ab8:	add	r0, sp, #8
   14abc:	mov	r1, r6
   14ac0:	mov	r2, #7
   14ac4:	bl	14c88 <__assert_fail@plt+0x3c78>
   14ac8:	b	14b2c <__assert_fail@plt+0x3b1c>
   14acc:	add	r0, sp, #8
   14ad0:	mov	r1, #1024	; 0x400
   14ad4:	b	14b28 <__assert_fail@plt+0x3b18>
   14ad8:	add	r0, sp, #8
   14adc:	mov	r1, r6
   14ae0:	mov	r2, #6
   14ae4:	bl	14c88 <__assert_fail@plt+0x3c78>
   14ae8:	b	14b2c <__assert_fail@plt+0x3b1c>
   14aec:	add	r0, sp, #8
   14af0:	mov	r1, r6
   14af4:	mov	r2, #5
   14af8:	bl	14c88 <__assert_fail@plt+0x3c78>
   14afc:	b	14b2c <__assert_fail@plt+0x3b1c>
   14b00:	add	r0, sp, #8
   14b04:	mov	r1, r6
   14b08:	mov	r2, #8
   14b0c:	bl	14c88 <__assert_fail@plt+0x3c78>
   14b10:	b	14b2c <__assert_fail@plt+0x3b1c>
   14b14:	add	r0, sp, #8
   14b18:	mov	r1, #512	; 0x200
   14b1c:	b	14b28 <__assert_fail@plt+0x3b18>
   14b20:	add	r0, sp, #8
   14b24:	mov	r1, #2
   14b28:	bl	14b84 <__assert_fail@plt+0x3b74>
   14b2c:	ldr	r1, [r8]
   14b30:	ldr	r3, [sp, #4]
   14b34:	add	r2, r1, r3
   14b38:	str	r2, [r8]
   14b3c:	ldrb	r1, [r1, r3]
   14b40:	orr	r5, r0, r5
   14b44:	cmp	r1, #0
   14b48:	orrne	r5, r5, #2
   14b4c:	ldr	r0, [sp, #8]
   14b50:	ldr	r1, [sp, #12]
   14b54:	strd	r0, [r9]
   14b58:	mov	r0, r5
   14b5c:	sub	sp, fp, #28
   14b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b64:	movw	r0, #25861	; 0x6505
   14b68:	movt	r0, #1
   14b6c:	movw	r1, #25899	; 0x652b
   14b70:	movt	r1, #1
   14b74:	movw	r3, #25915	; 0x653b
   14b78:	movt	r3, #1
   14b7c:	mov	r2, #85	; 0x55
   14b80:	bl	11010 <__assert_fail@plt>
   14b84:	push	{r4, r5, r6, r7, fp, lr}
   14b88:	add	fp, sp, #16
   14b8c:	mov	r5, r1
   14b90:	mov	r4, r0
   14b94:	cmn	r1, #1
   14b98:	ble	14bc0 <__assert_fail@plt+0x3bb0>
   14b9c:	cmp	r5, #0
   14ba0:	beq	14c24 <__assert_fail@plt+0x3c14>
   14ba4:	ldrd	r6, [r4]
   14ba8:	cmn	r7, #1
   14bac:	ble	14bf8 <__assert_fail@plt+0x3be8>
   14bb0:	asr	r3, r5, #31
   14bb4:	mvn	r0, #0
   14bb8:	mvn	r1, #-2147483648	; 0x80000000
   14bbc:	b	14be0 <__assert_fail@plt+0x3bd0>
   14bc0:	ldrd	r6, [r4]
   14bc4:	cmn	r7, #1
   14bc8:	ble	14c40 <__assert_fail@plt+0x3c30>
   14bcc:	cmn	r5, #1
   14bd0:	beq	14c24 <__assert_fail@plt+0x3c14>
   14bd4:	asr	r3, r5, #31
   14bd8:	mov	r0, #0
   14bdc:	mov	r1, #-2147483648	; 0x80000000
   14be0:	mov	r2, r5
   14be4:	bl	15558 <__assert_fail@plt+0x4548>
   14be8:	subs	r0, r0, r6
   14bec:	sbcs	r0, r1, r7
   14bf0:	bge	14c24 <__assert_fail@plt+0x3c14>
   14bf4:	b	14c60 <__assert_fail@plt+0x3c50>
   14bf8:	and	r0, r6, r7
   14bfc:	cmn	r0, #1
   14c00:	beq	14c24 <__assert_fail@plt+0x3c14>
   14c04:	mov	r0, #0
   14c08:	mov	r1, #-2147483648	; 0x80000000
   14c0c:	mov	r2, r6
   14c10:	mov	r3, r7
   14c14:	bl	15558 <__assert_fail@plt+0x4548>
   14c18:	subs	r0, r0, r5
   14c1c:	sbcs	r0, r1, r5, asr #31
   14c20:	blt	14c60 <__assert_fail@plt+0x3c50>
   14c24:	ldrd	r0, [r4]
   14c28:	umull	r2, r3, r0, r5
   14c2c:	asr	r7, r5, #31
   14c30:	mla	r0, r0, r7, r3
   14c34:	mla	r1, r1, r5, r0
   14c38:	mov	r0, #0
   14c3c:	b	14c7c <__assert_fail@plt+0x3c6c>
   14c40:	asr	r3, r5, #31
   14c44:	mvn	r0, #0
   14c48:	mvn	r1, #-2147483648	; 0x80000000
   14c4c:	mov	r2, r5
   14c50:	bl	15558 <__assert_fail@plt+0x4548>
   14c54:	subs	r0, r6, r0
   14c58:	sbcs	r0, r7, r1
   14c5c:	bge	14c24 <__assert_fail@plt+0x3c14>
   14c60:	ldr	r0, [r4, #4]
   14c64:	mvn	r1, #-2147483648	; 0x80000000
   14c68:	cmp	r0, #0
   14c6c:	movlt	r1, #-2147483648	; 0x80000000
   14c70:	mvn	r2, #0
   14c74:	movwlt	r2, #0
   14c78:	mov	r0, #1
   14c7c:	str	r2, [r4]
   14c80:	str	r1, [r4, #4]
   14c84:	pop	{r4, r5, r6, r7, fp, pc}
   14c88:	push	{r4, r5, r6, r7, fp, lr}
   14c8c:	add	fp, sp, #16
   14c90:	cmp	r2, #0
   14c94:	moveq	r6, #0
   14c98:	moveq	r0, r6
   14c9c:	popeq	{r4, r5, r6, r7, fp, pc}
   14ca0:	mov	r4, r2
   14ca4:	mov	r5, r1
   14ca8:	mov	r7, r0
   14cac:	mov	r6, #0
   14cb0:	mov	r0, r7
   14cb4:	mov	r1, r5
   14cb8:	bl	14b84 <__assert_fail@plt+0x3b74>
   14cbc:	orr	r6, r0, r6
   14cc0:	subs	r4, r4, #1
   14cc4:	bne	14cb0 <__assert_fail@plt+0x3ca0>
   14cc8:	mov	r0, r6
   14ccc:	pop	{r4, r5, r6, r7, fp, pc}
   14cd0:	clz	r2, r1
   14cd4:	lsr	r2, r2, #5
   14cd8:	clz	r3, r0
   14cdc:	lsr	r3, r3, #5
   14ce0:	orrs	r2, r3, r2
   14ce4:	movwne	r1, #1
   14ce8:	movwne	r0, #1
   14cec:	cmp	r1, #0
   14cf0:	beq	14d20 <__assert_fail@plt+0x3d10>
   14cf4:	mvn	r2, #-2147483648	; 0x80000000
   14cf8:	udiv	r2, r2, r1
   14cfc:	cmp	r2, r0
   14d00:	bcs	14d20 <__assert_fail@plt+0x3d10>
   14d04:	push	{fp, lr}
   14d08:	mov	fp, sp
   14d0c:	bl	10f44 <__errno_location@plt>
   14d10:	mov	r1, #12
   14d14:	str	r1, [r0]
   14d18:	mov	r0, #0
   14d1c:	pop	{fp, pc}
   14d20:	b	10db8 <calloc@plt>
   14d24:	cmp	r0, #0
   14d28:	movweq	r0, #1
   14d2c:	cmn	r0, #1
   14d30:	ble	14d38 <__assert_fail@plt+0x3d28>
   14d34:	b	10ed8 <malloc@plt>
   14d38:	push	{fp, lr}
   14d3c:	mov	fp, sp
   14d40:	bl	10f44 <__errno_location@plt>
   14d44:	mov	r1, #12
   14d48:	str	r1, [r0]
   14d4c:	mov	r0, #0
   14d50:	pop	{fp, pc}
   14d54:	push	{fp, lr}
   14d58:	mov	fp, sp
   14d5c:	cmp	r0, #0
   14d60:	beq	14d7c <__assert_fail@plt+0x3d6c>
   14d64:	cmp	r1, #0
   14d68:	beq	14d88 <__assert_fail@plt+0x3d78>
   14d6c:	cmn	r1, #1
   14d70:	ble	14d94 <__assert_fail@plt+0x3d84>
   14d74:	pop	{fp, lr}
   14d78:	b	10e48 <realloc@plt>
   14d7c:	mov	r0, r1
   14d80:	pop	{fp, lr}
   14d84:	b	14d24 <__assert_fail@plt+0x3d14>
   14d88:	bl	1525c <__assert_fail@plt+0x424c>
   14d8c:	mov	r0, #0
   14d90:	pop	{fp, pc}
   14d94:	bl	10f44 <__errno_location@plt>
   14d98:	mov	r1, #12
   14d9c:	str	r1, [r0]
   14da0:	mov	r0, #0
   14da4:	pop	{fp, pc}
   14da8:	mov	r1, r0
   14dac:	sub	r2, r0, #65	; 0x41
   14db0:	mov	r0, #1
   14db4:	cmp	r2, #26
   14db8:	subcs	r2, r1, #97	; 0x61
   14dbc:	cmpcs	r2, #26
   14dc0:	bcs	14dc8 <__assert_fail@plt+0x3db8>
   14dc4:	bx	lr
   14dc8:	sub	r1, r1, #48	; 0x30
   14dcc:	cmp	r1, #10
   14dd0:	movcs	r0, #0
   14dd4:	bx	lr
   14dd8:	mov	r1, r0
   14ddc:	sub	r2, r0, #65	; 0x41
   14de0:	mov	r0, #1
   14de4:	cmp	r2, #26
   14de8:	subcs	r1, r1, #97	; 0x61
   14dec:	cmpcs	r1, #26
   14df0:	movcs	r0, #0
   14df4:	bx	lr
   14df8:	mov	r1, #0
   14dfc:	cmp	r0, #128	; 0x80
   14e00:	movwcc	r1, #1
   14e04:	mov	r0, r1
   14e08:	bx	lr
   14e0c:	sub	r1, r0, #9
   14e10:	clz	r1, r1
   14e14:	lsr	r1, r1, #5
   14e18:	sub	r0, r0, #32
   14e1c:	clz	r0, r0
   14e20:	lsr	r0, r0, #5
   14e24:	orr	r0, r0, r1
   14e28:	bx	lr
   14e2c:	mov	r1, r0
   14e30:	mov	r0, #1
   14e34:	cmp	r1, #32
   14e38:	bxcc	lr
   14e3c:	cmp	r1, #127	; 0x7f
   14e40:	movne	r0, #0
   14e44:	bx	lr
   14e48:	sub	r1, r0, #48	; 0x30
   14e4c:	mov	r0, #0
   14e50:	cmp	r1, #10
   14e54:	movwcc	r0, #1
   14e58:	bx	lr
   14e5c:	sub	r1, r0, #33	; 0x21
   14e60:	mov	r0, #0
   14e64:	cmp	r1, #94	; 0x5e
   14e68:	movwcc	r0, #1
   14e6c:	bx	lr
   14e70:	sub	r1, r0, #97	; 0x61
   14e74:	mov	r0, #0
   14e78:	cmp	r1, #26
   14e7c:	movwcc	r0, #1
   14e80:	bx	lr
   14e84:	sub	r1, r0, #32
   14e88:	mov	r0, #0
   14e8c:	cmp	r1, #95	; 0x5f
   14e90:	movwcc	r0, #1
   14e94:	bx	lr
   14e98:	sub	r1, r0, #33	; 0x21
   14e9c:	cmp	r1, #93	; 0x5d
   14ea0:	bhi	1502c <__assert_fail@plt+0x401c>
   14ea4:	mov	r0, #1
   14ea8:	add	r2, pc, #0
   14eac:	ldr	pc, [r2, r1, lsl #2]
   14eb0:	andeq	r5, r1, r8, lsr #32
   14eb4:	andeq	r5, r1, r8, lsr #32
   14eb8:	andeq	r5, r1, r8, lsr #32
   14ebc:	andeq	r5, r1, r8, lsr #32
   14ec0:	andeq	r5, r1, r8, lsr #32
   14ec4:	andeq	r5, r1, r8, lsr #32
   14ec8:	andeq	r5, r1, r8, lsr #32
   14ecc:	andeq	r5, r1, r8, lsr #32
   14ed0:	andeq	r5, r1, r8, lsr #32
   14ed4:	andeq	r5, r1, r8, lsr #32
   14ed8:	andeq	r5, r1, r8, lsr #32
   14edc:	andeq	r5, r1, r8, lsr #32
   14ee0:	andeq	r5, r1, r8, lsr #32
   14ee4:	andeq	r5, r1, r8, lsr #32
   14ee8:	andeq	r5, r1, r8, lsr #32
   14eec:	andeq	r5, r1, ip, lsr #32
   14ef0:	andeq	r5, r1, ip, lsr #32
   14ef4:	andeq	r5, r1, ip, lsr #32
   14ef8:	andeq	r5, r1, ip, lsr #32
   14efc:	andeq	r5, r1, ip, lsr #32
   14f00:	andeq	r5, r1, ip, lsr #32
   14f04:	andeq	r5, r1, ip, lsr #32
   14f08:	andeq	r5, r1, ip, lsr #32
   14f0c:	andeq	r5, r1, ip, lsr #32
   14f10:	andeq	r5, r1, ip, lsr #32
   14f14:	andeq	r5, r1, r8, lsr #32
   14f18:	andeq	r5, r1, r8, lsr #32
   14f1c:	andeq	r5, r1, r8, lsr #32
   14f20:	andeq	r5, r1, r8, lsr #32
   14f24:	andeq	r5, r1, r8, lsr #32
   14f28:	andeq	r5, r1, r8, lsr #32
   14f2c:	andeq	r5, r1, r8, lsr #32
   14f30:	andeq	r5, r1, ip, lsr #32
   14f34:	andeq	r5, r1, ip, lsr #32
   14f38:	andeq	r5, r1, ip, lsr #32
   14f3c:	andeq	r5, r1, ip, lsr #32
   14f40:	andeq	r5, r1, ip, lsr #32
   14f44:	andeq	r5, r1, ip, lsr #32
   14f48:	andeq	r5, r1, ip, lsr #32
   14f4c:	andeq	r5, r1, ip, lsr #32
   14f50:	andeq	r5, r1, ip, lsr #32
   14f54:	andeq	r5, r1, ip, lsr #32
   14f58:	andeq	r5, r1, ip, lsr #32
   14f5c:	andeq	r5, r1, ip, lsr #32
   14f60:	andeq	r5, r1, ip, lsr #32
   14f64:	andeq	r5, r1, ip, lsr #32
   14f68:	andeq	r5, r1, ip, lsr #32
   14f6c:	andeq	r5, r1, ip, lsr #32
   14f70:	andeq	r5, r1, ip, lsr #32
   14f74:	andeq	r5, r1, ip, lsr #32
   14f78:	andeq	r5, r1, ip, lsr #32
   14f7c:	andeq	r5, r1, ip, lsr #32
   14f80:	andeq	r5, r1, ip, lsr #32
   14f84:	andeq	r5, r1, ip, lsr #32
   14f88:	andeq	r5, r1, ip, lsr #32
   14f8c:	andeq	r5, r1, ip, lsr #32
   14f90:	andeq	r5, r1, ip, lsr #32
   14f94:	andeq	r5, r1, ip, lsr #32
   14f98:	andeq	r5, r1, r8, lsr #32
   14f9c:	andeq	r5, r1, r8, lsr #32
   14fa0:	andeq	r5, r1, r8, lsr #32
   14fa4:	andeq	r5, r1, r8, lsr #32
   14fa8:	andeq	r5, r1, r8, lsr #32
   14fac:	andeq	r5, r1, r8, lsr #32
   14fb0:	andeq	r5, r1, ip, lsr #32
   14fb4:	andeq	r5, r1, ip, lsr #32
   14fb8:	andeq	r5, r1, ip, lsr #32
   14fbc:	andeq	r5, r1, ip, lsr #32
   14fc0:	andeq	r5, r1, ip, lsr #32
   14fc4:	andeq	r5, r1, ip, lsr #32
   14fc8:	andeq	r5, r1, ip, lsr #32
   14fcc:	andeq	r5, r1, ip, lsr #32
   14fd0:	andeq	r5, r1, ip, lsr #32
   14fd4:	andeq	r5, r1, ip, lsr #32
   14fd8:	andeq	r5, r1, ip, lsr #32
   14fdc:	andeq	r5, r1, ip, lsr #32
   14fe0:	andeq	r5, r1, ip, lsr #32
   14fe4:	andeq	r5, r1, ip, lsr #32
   14fe8:	andeq	r5, r1, ip, lsr #32
   14fec:	andeq	r5, r1, ip, lsr #32
   14ff0:	andeq	r5, r1, ip, lsr #32
   14ff4:	andeq	r5, r1, ip, lsr #32
   14ff8:	andeq	r5, r1, ip, lsr #32
   14ffc:	andeq	r5, r1, ip, lsr #32
   15000:	andeq	r5, r1, ip, lsr #32
   15004:	andeq	r5, r1, ip, lsr #32
   15008:	andeq	r5, r1, ip, lsr #32
   1500c:	andeq	r5, r1, ip, lsr #32
   15010:	andeq	r5, r1, ip, lsr #32
   15014:	andeq	r5, r1, ip, lsr #32
   15018:	andeq	r5, r1, r8, lsr #32
   1501c:	andeq	r5, r1, r8, lsr #32
   15020:	andeq	r5, r1, r8, lsr #32
   15024:	andeq	r5, r1, r8, lsr #32
   15028:	bx	lr
   1502c:	mov	r0, #0
   15030:	bx	lr
   15034:	sub	r0, r0, #9
   15038:	cmp	r0, #23
   1503c:	movhi	r0, #0
   15040:	bxhi	lr
   15044:	bic	r0, r0, #-16777216	; 0xff000000
   15048:	movw	r1, #31
   1504c:	movt	r1, #128	; 0x80
   15050:	mov	r2, #1
   15054:	and	r0, r2, r1, lsr r0
   15058:	bx	lr
   1505c:	sub	r1, r0, #65	; 0x41
   15060:	mov	r0, #0
   15064:	cmp	r1, #26
   15068:	movwcc	r0, #1
   1506c:	bx	lr
   15070:	mov	r1, r0
   15074:	sub	r2, r0, #48	; 0x30
   15078:	mov	r0, #1
   1507c:	cmp	r2, #22
   15080:	bhi	15098 <__assert_fail@plt+0x4088>
   15084:	mov	ip, #1
   15088:	movw	r3, #1023	; 0x3ff
   1508c:	movt	r3, #126	; 0x7e
   15090:	tst	r3, ip, lsl r2
   15094:	bxne	lr
   15098:	sub	r1, r1, #97	; 0x61
   1509c:	cmp	r1, #6
   150a0:	movcs	r0, #0
   150a4:	bxcs	lr
   150a8:	bx	lr
   150ac:	sub	r1, r0, #65	; 0x41
   150b0:	cmp	r1, #26
   150b4:	addcc	r0, r0, #32
   150b8:	bx	lr
   150bc:	sub	r1, r0, #97	; 0x61
   150c0:	cmp	r1, #26
   150c4:	subcc	r0, r0, #32
   150c8:	bx	lr
   150cc:	push	{r4, r5, r6, sl, fp, lr}
   150d0:	add	fp, sp, #16
   150d4:	mov	r4, r0
   150d8:	bl	10e9c <__fpending@plt>
   150dc:	mov	r5, r0
   150e0:	mov	r0, r4
   150e4:	bl	10ea8 <ferror_unlocked@plt>
   150e8:	mov	r6, r0
   150ec:	mov	r0, r4
   150f0:	bl	15154 <__assert_fail@plt+0x4144>
   150f4:	cmp	r6, #0
   150f8:	beq	15118 <__assert_fail@plt+0x4108>
   150fc:	mvn	r4, #0
   15100:	cmp	r0, #0
   15104:	bne	1514c <__assert_fail@plt+0x413c>
   15108:	bl	10f44 <__errno_location@plt>
   1510c:	mov	r1, #0
   15110:	str	r1, [r0]
   15114:	b	1514c <__assert_fail@plt+0x413c>
   15118:	cmp	r0, #0
   1511c:	mov	r4, r0
   15120:	mvnne	r4, #0
   15124:	cmp	r5, #0
   15128:	bne	1514c <__assert_fail@plt+0x413c>
   1512c:	cmp	r0, #0
   15130:	beq	1514c <__assert_fail@plt+0x413c>
   15134:	bl	10f44 <__errno_location@plt>
   15138:	ldr	r0, [r0]
   1513c:	subs	r4, r0, #9
   15140:	mvnne	r4, #0
   15144:	mov	r0, r4
   15148:	pop	{r4, r5, r6, sl, fp, pc}
   1514c:	mov	r0, r4
   15150:	pop	{r4, r5, r6, sl, fp, pc}
   15154:	push	{r4, r5, fp, lr}
   15158:	add	fp, sp, #8
   1515c:	sub	sp, sp, #8
   15160:	mov	r4, r0
   15164:	bl	10f74 <fileno@plt>
   15168:	cmn	r0, #1
   1516c:	ble	151e4 <__assert_fail@plt+0x41d4>
   15170:	mov	r0, r4
   15174:	bl	10ef0 <__freading@plt>
   15178:	cmp	r0, #0
   1517c:	beq	151a8 <__assert_fail@plt+0x4198>
   15180:	mov	r0, r4
   15184:	bl	10f74 <fileno@plt>
   15188:	mov	r1, #1
   1518c:	str	r1, [sp]
   15190:	mov	r2, #0
   15194:	mov	r3, #0
   15198:	bl	10e84 <lseek64@plt>
   1519c:	and	r0, r0, r1
   151a0:	cmn	r0, #1
   151a4:	beq	151e4 <__assert_fail@plt+0x41d4>
   151a8:	mov	r0, r4
   151ac:	bl	151f4 <__assert_fail@plt+0x41e4>
   151b0:	cmp	r0, #0
   151b4:	beq	151e4 <__assert_fail@plt+0x41d4>
   151b8:	bl	10f44 <__errno_location@plt>
   151bc:	ldr	r5, [r0]
   151c0:	mov	r0, r4
   151c4:	bl	10f98 <fclose@plt>
   151c8:	cmp	r5, #0
   151cc:	beq	151dc <__assert_fail@plt+0x41cc>
   151d0:	bl	10f44 <__errno_location@plt>
   151d4:	str	r5, [r0]
   151d8:	mvn	r0, #0
   151dc:	sub	sp, fp, #8
   151e0:	pop	{r4, r5, fp, pc}
   151e4:	mov	r0, r4
   151e8:	sub	sp, fp, #8
   151ec:	pop	{r4, r5, fp, lr}
   151f0:	b	10f98 <fclose@plt>
   151f4:	push	{r4, sl, fp, lr}
   151f8:	add	fp, sp, #8
   151fc:	mov	r4, r0
   15200:	cmp	r0, #0
   15204:	beq	1521c <__assert_fail@plt+0x420c>
   15208:	mov	r0, r4
   1520c:	bl	10ef0 <__freading@plt>
   15210:	cmp	r0, #0
   15214:	movne	r0, r4
   15218:	blne	15228 <__assert_fail@plt+0x4218>
   1521c:	mov	r0, r4
   15220:	pop	{r4, sl, fp, lr}
   15224:	b	10de8 <fflush@plt>
   15228:	ldrb	r1, [r0, #1]
   1522c:	tst	r1, #1
   15230:	bxeq	lr
   15234:	push	{fp, lr}
   15238:	mov	fp, sp
   1523c:	sub	sp, sp, #8
   15240:	mov	r1, #1
   15244:	str	r1, [sp]
   15248:	mov	r2, #0
   1524c:	mov	r3, #0
   15250:	bl	15284 <__assert_fail@plt+0x4274>
   15254:	mov	sp, fp
   15258:	pop	{fp, pc}
   1525c:	push	{r4, r5, r6, sl, fp, lr}
   15260:	add	fp, sp, #16
   15264:	mov	r4, r0
   15268:	bl	10f44 <__errno_location@plt>
   1526c:	mov	r5, r0
   15270:	ldr	r6, [r0]
   15274:	mov	r0, r4
   15278:	bl	10df4 <free@plt>
   1527c:	str	r6, [r5]
   15280:	pop	{r4, r5, r6, sl, fp, pc}
   15284:	push	{r4, r5, r6, r7, fp, lr}
   15288:	add	fp, sp, #16
   1528c:	sub	sp, sp, #8
   15290:	mov	r5, r3
   15294:	mov	r6, r2
   15298:	mov	r4, r0
   1529c:	ldr	r0, [r0, #4]
   152a0:	ldr	r1, [r4, #8]
   152a4:	cmp	r1, r0
   152a8:	bne	152c4 <__assert_fail@plt+0x42b4>
   152ac:	ldrd	r0, [r4, #16]
   152b0:	cmp	r1, r0
   152b4:	bne	152c4 <__assert_fail@plt+0x42b4>
   152b8:	ldr	r0, [r4, #36]	; 0x24
   152bc:	cmp	r0, #0
   152c0:	beq	152dc <__assert_fail@plt+0x42cc>
   152c4:	mov	r0, r4
   152c8:	mov	r2, r6
   152cc:	mov	r3, r5
   152d0:	sub	sp, fp, #16
   152d4:	pop	{r4, r5, r6, r7, fp, lr}
   152d8:	b	10fa4 <fseeko64@plt>
   152dc:	ldr	r7, [fp, #8]
   152e0:	mov	r0, r4
   152e4:	bl	10f74 <fileno@plt>
   152e8:	str	r7, [sp]
   152ec:	mov	r2, r6
   152f0:	mov	r3, r5
   152f4:	bl	10e84 <lseek64@plt>
   152f8:	and	r2, r0, r1
   152fc:	cmn	r2, #1
   15300:	mvneq	r0, #0
   15304:	subeq	sp, fp, #16
   15308:	popeq	{r4, r5, r6, r7, fp, pc}
   1530c:	strd	r0, [r4, #80]	; 0x50
   15310:	ldr	r0, [r4]
   15314:	bic	r0, r0, #16
   15318:	str	r0, [r4]
   1531c:	mov	r0, #0
   15320:	sub	sp, fp, #16
   15324:	pop	{r4, r5, r6, r7, fp, pc}
   15328:	push	{fp, lr}
   1532c:	mov	fp, sp
   15330:	bl	10f44 <__errno_location@plt>
   15334:	mov	r1, #12
   15338:	str	r1, [r0]
   1533c:	mov	r0, #0
   15340:	pop	{fp, pc}
   15344:	b	14d24 <__assert_fail@plt+0x3d14>
   15348:	cmp	r1, #0
   1534c:	orreq	r1, r1, #1
   15350:	b	14d54 <__assert_fail@plt+0x3d44>
   15354:	b	14cd0 <__assert_fail@plt+0x3cc0>
   15358:	clz	r3, r2
   1535c:	lsr	ip, r3, #5
   15360:	clz	r3, r1
   15364:	lsr	r3, r3, #5
   15368:	orrs	r3, r3, ip
   1536c:	movwne	r1, #1
   15370:	movwne	r2, #1
   15374:	b	15410 <__assert_fail@plt+0x4400>
   15378:	push	{fp, lr}
   1537c:	mov	fp, sp
   15380:	mov	r0, #14
   15384:	bl	10fc8 <nl_langinfo@plt>
   15388:	movw	r1, #24404	; 0x5f54
   1538c:	movt	r1, #1
   15390:	cmp	r0, #0
   15394:	movne	r1, r0
   15398:	ldrb	r2, [r1]
   1539c:	movw	r0, #25993	; 0x6589
   153a0:	movt	r0, #1
   153a4:	cmp	r2, #0
   153a8:	movne	r0, r1
   153ac:	pop	{fp, pc}
   153b0:	push	{r4, r5, r6, r7, fp, lr}
   153b4:	add	fp, sp, #16
   153b8:	sub	sp, sp, #8
   153bc:	mov	r7, r2
   153c0:	mov	r4, r1
   153c4:	add	r5, sp, #4
   153c8:	cmp	r0, #0
   153cc:	movne	r5, r0
   153d0:	mov	r0, r5
   153d4:	bl	10eb4 <mbrtowc@plt>
   153d8:	mov	r6, r0
   153dc:	cmp	r7, #0
   153e0:	beq	15404 <__assert_fail@plt+0x43f4>
   153e4:	cmn	r6, #2
   153e8:	bcc	15404 <__assert_fail@plt+0x43f4>
   153ec:	mov	r0, #0
   153f0:	bl	1544c <__assert_fail@plt+0x443c>
   153f4:	cmp	r0, #0
   153f8:	ldrbeq	r0, [r4]
   153fc:	streq	r0, [r5]
   15400:	moveq	r6, #1
   15404:	mov	r0, r6
   15408:	sub	sp, fp, #16
   1540c:	pop	{r4, r5, r6, r7, fp, pc}
   15410:	cmp	r2, #0
   15414:	beq	15444 <__assert_fail@plt+0x4434>
   15418:	mvn	r3, #0
   1541c:	udiv	r3, r3, r2
   15420:	cmp	r3, r1
   15424:	bcs	15444 <__assert_fail@plt+0x4434>
   15428:	push	{fp, lr}
   1542c:	mov	fp, sp
   15430:	bl	10f44 <__errno_location@plt>
   15434:	mov	r1, #12
   15438:	str	r1, [r0]
   1543c:	mov	r0, #0
   15440:	pop	{fp, pc}
   15444:	mul	r1, r2, r1
   15448:	b	14d54 <__assert_fail@plt+0x3d44>
   1544c:	push	{r4, sl, fp, lr}
   15450:	add	fp, sp, #8
   15454:	sub	sp, sp, #264	; 0x108
   15458:	add	r1, sp, #7
   1545c:	movw	r2, #257	; 0x101
   15460:	bl	154b0 <__assert_fail@plt+0x44a0>
   15464:	mov	r4, #0
   15468:	cmp	r0, #0
   1546c:	bne	154a4 <__assert_fail@plt+0x4494>
   15470:	add	r0, sp, #7
   15474:	movw	r1, #25999	; 0x658f
   15478:	movt	r1, #1
   1547c:	bl	10ddc <strcmp@plt>
   15480:	cmp	r0, #0
   15484:	beq	154a4 <__assert_fail@plt+0x4494>
   15488:	add	r0, sp, #7
   1548c:	movw	r1, #26001	; 0x6591
   15490:	movt	r1, #1
   15494:	bl	10ddc <strcmp@plt>
   15498:	mov	r4, r0
   1549c:	cmp	r0, #0
   154a0:	movwne	r4, #1
   154a4:	mov	r0, r4
   154a8:	sub	sp, fp, #8
   154ac:	pop	{r4, sl, fp, pc}
   154b0:	b	154b4 <__assert_fail@plt+0x44a4>
   154b4:	push	{r4, r5, r6, r7, fp, lr}
   154b8:	add	fp, sp, #16
   154bc:	mov	r6, r2
   154c0:	mov	r4, r1
   154c4:	bl	15550 <__assert_fail@plt+0x4540>
   154c8:	cmp	r0, #0
   154cc:	beq	154fc <__assert_fail@plt+0x44ec>
   154d0:	mov	r7, r0
   154d4:	bl	10f2c <strlen@plt>
   154d8:	cmp	r0, r6
   154dc:	bcs	1551c <__assert_fail@plt+0x450c>
   154e0:	add	r2, r0, #1
   154e4:	mov	r0, r4
   154e8:	mov	r1, r7
   154ec:	bl	10e0c <memcpy@plt>
   154f0:	mov	r5, #0
   154f4:	mov	r0, r5
   154f8:	pop	{r4, r5, r6, r7, fp, pc}
   154fc:	mov	r5, #22
   15500:	cmp	r6, #0
   15504:	movne	r0, #0
   15508:	strbne	r0, [r4]
   1550c:	movne	r0, r5
   15510:	popne	{r4, r5, r6, r7, fp, pc}
   15514:	mov	r0, r5
   15518:	pop	{r4, r5, r6, r7, fp, pc}
   1551c:	mov	r5, #34	; 0x22
   15520:	cmp	r6, #0
   15524:	beq	15544 <__assert_fail@plt+0x4534>
   15528:	sub	r6, r6, #1
   1552c:	mov	r0, r4
   15530:	mov	r1, r7
   15534:	mov	r2, r6
   15538:	bl	10e0c <memcpy@plt>
   1553c:	mov	r0, #0
   15540:	strb	r0, [r4, r6]
   15544:	mov	r0, r5
   15548:	pop	{r4, r5, r6, r7, fp, pc}
   1554c:	b	15550 <__assert_fail@plt+0x4540>
   15550:	mov	r1, #0
   15554:	b	10fb0 <setlocale@plt>
   15558:	cmp	r3, #0
   1555c:	cmpeq	r2, #0
   15560:	bne	15584 <__assert_fail@plt+0x4574>
   15564:	cmp	r1, #0
   15568:	movlt	r1, #-2147483648	; 0x80000000
   1556c:	movlt	r0, #0
   15570:	blt	15580 <__assert_fail@plt+0x4570>
   15574:	cmpeq	r0, #0
   15578:	mvnne	r1, #-2147483648	; 0x80000000
   1557c:	mvnne	r0, #0
   15580:	b	1562c <__assert_fail@plt+0x461c>
   15584:	sub	sp, sp, #8
   15588:	push	{sp, lr}
   1558c:	cmp	r1, #0
   15590:	blt	155b0 <__assert_fail@plt+0x45a0>
   15594:	cmp	r3, #0
   15598:	blt	155e4 <__assert_fail@plt+0x45d4>
   1559c:	bl	1563c <__assert_fail@plt+0x462c>
   155a0:	ldr	lr, [sp, #4]
   155a4:	add	sp, sp, #8
   155a8:	pop	{r2, r3}
   155ac:	bx	lr
   155b0:	rsbs	r0, r0, #0
   155b4:	sbc	r1, r1, r1, lsl #1
   155b8:	cmp	r3, #0
   155bc:	blt	15608 <__assert_fail@plt+0x45f8>
   155c0:	bl	1563c <__assert_fail@plt+0x462c>
   155c4:	ldr	lr, [sp, #4]
   155c8:	add	sp, sp, #8
   155cc:	pop	{r2, r3}
   155d0:	rsbs	r0, r0, #0
   155d4:	sbc	r1, r1, r1, lsl #1
   155d8:	rsbs	r2, r2, #0
   155dc:	sbc	r3, r3, r3, lsl #1
   155e0:	bx	lr
   155e4:	rsbs	r2, r2, #0
   155e8:	sbc	r3, r3, r3, lsl #1
   155ec:	bl	1563c <__assert_fail@plt+0x462c>
   155f0:	ldr	lr, [sp, #4]
   155f4:	add	sp, sp, #8
   155f8:	pop	{r2, r3}
   155fc:	rsbs	r0, r0, #0
   15600:	sbc	r1, r1, r1, lsl #1
   15604:	bx	lr
   15608:	rsbs	r2, r2, #0
   1560c:	sbc	r3, r3, r3, lsl #1
   15610:	bl	1563c <__assert_fail@plt+0x462c>
   15614:	ldr	lr, [sp, #4]
   15618:	add	sp, sp, #8
   1561c:	pop	{r2, r3}
   15620:	rsbs	r2, r2, #0
   15624:	sbc	r3, r3, r3, lsl #1
   15628:	bx	lr
   1562c:	push	{r1, lr}
   15630:	mov	r0, #8
   15634:	bl	10dd0 <raise@plt>
   15638:	pop	{r1, pc}
   1563c:	cmp	r1, r3
   15640:	cmpeq	r0, r2
   15644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15648:	mov	r4, r0
   1564c:	movcc	r0, #0
   15650:	mov	r5, r1
   15654:	ldr	lr, [sp, #36]	; 0x24
   15658:	movcc	r1, r0
   1565c:	bcc	15758 <__assert_fail@plt+0x4748>
   15660:	cmp	r3, #0
   15664:	clzeq	ip, r2
   15668:	clzne	ip, r3
   1566c:	addeq	ip, ip, #32
   15670:	cmp	r5, #0
   15674:	clzeq	r1, r4
   15678:	addeq	r1, r1, #32
   1567c:	clzne	r1, r5
   15680:	sub	ip, ip, r1
   15684:	sub	sl, ip, #32
   15688:	lsl	r9, r3, ip
   1568c:	rsb	fp, ip, #32
   15690:	orr	r9, r9, r2, lsl sl
   15694:	orr	r9, r9, r2, lsr fp
   15698:	lsl	r8, r2, ip
   1569c:	cmp	r5, r9
   156a0:	cmpeq	r4, r8
   156a4:	movcc	r0, #0
   156a8:	movcc	r1, r0
   156ac:	bcc	156c8 <__assert_fail@plt+0x46b8>
   156b0:	mov	r0, #1
   156b4:	subs	r4, r4, r8
   156b8:	lsl	r1, r0, sl
   156bc:	orr	r1, r1, r0, lsr fp
   156c0:	lsl	r0, r0, ip
   156c4:	sbc	r5, r5, r9
   156c8:	cmp	ip, #0
   156cc:	beq	15758 <__assert_fail@plt+0x4748>
   156d0:	lsr	r6, r8, #1
   156d4:	orr	r6, r6, r9, lsl #31
   156d8:	lsr	r7, r9, #1
   156dc:	mov	r2, ip
   156e0:	b	15704 <__assert_fail@plt+0x46f4>
   156e4:	subs	r3, r4, r6
   156e8:	sbc	r8, r5, r7
   156ec:	adds	r3, r3, r3
   156f0:	adc	r8, r8, r8
   156f4:	adds	r4, r3, #1
   156f8:	adc	r5, r8, #0
   156fc:	subs	r2, r2, #1
   15700:	beq	15720 <__assert_fail@plt+0x4710>
   15704:	cmp	r5, r7
   15708:	cmpeq	r4, r6
   1570c:	bcs	156e4 <__assert_fail@plt+0x46d4>
   15710:	adds	r4, r4, r4
   15714:	adc	r5, r5, r5
   15718:	subs	r2, r2, #1
   1571c:	bne	15704 <__assert_fail@plt+0x46f4>
   15720:	lsr	r3, r4, ip
   15724:	orr	r3, r3, r5, lsl fp
   15728:	lsr	r2, r5, ip
   1572c:	orr	r3, r3, r5, lsr sl
   15730:	adds	r0, r0, r4
   15734:	mov	r4, r3
   15738:	lsl	r3, r2, ip
   1573c:	orr	r3, r3, r4, lsl sl
   15740:	lsl	ip, r4, ip
   15744:	orr	r3, r3, r4, lsr fp
   15748:	adc	r1, r1, r5
   1574c:	subs	r0, r0, ip
   15750:	mov	r5, r2
   15754:	sbc	r1, r1, r3
   15758:	cmp	lr, #0
   1575c:	strdne	r4, [lr]
   15760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15764:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15768:	mov	r7, r0
   1576c:	ldr	r6, [pc, #72]	; 157bc <__assert_fail@plt+0x47ac>
   15770:	ldr	r5, [pc, #72]	; 157c0 <__assert_fail@plt+0x47b0>
   15774:	add	r6, pc, r6
   15778:	add	r5, pc, r5
   1577c:	sub	r6, r6, r5
   15780:	mov	r8, r1
   15784:	mov	r9, r2
   15788:	bl	10d98 <calloc@plt-0x20>
   1578c:	asrs	r6, r6, #2
   15790:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15794:	mov	r4, #0
   15798:	add	r4, r4, #1
   1579c:	ldr	r3, [r5], #4
   157a0:	mov	r2, r9
   157a4:	mov	r1, r8
   157a8:	mov	r0, r7
   157ac:	blx	r3
   157b0:	cmp	r6, r4
   157b4:	bne	15798 <__assert_fail@plt+0x4788>
   157b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157bc:	muleq	r1, r0, r7
   157c0:	andeq	r1, r1, r8, lsl #15
   157c4:	bx	lr
   157c8:	ldr	r3, [pc, #12]	; 157dc <__assert_fail@plt+0x47cc>
   157cc:	mov	r1, #0
   157d0:	add	r3, pc, r3
   157d4:	ldr	r2, [r3]
   157d8:	b	10f50 <__cxa_atexit@plt>
   157dc:	andeq	r1, r1, ip, lsl #18
   157e0:	mov	r2, r1
   157e4:	mov	r1, r0
   157e8:	mov	r0, #3
   157ec:	b	10fe0 <__xstat64@plt>
   157f0:	mov	r2, r1
   157f4:	mov	r1, r0
   157f8:	mov	r0, #3
   157fc:	b	10e6c <__fxstat64@plt>

Disassembly of section .fini:

00015800 <.fini>:
   15800:	push	{r3, lr}
   15804:	pop	{r3, pc}
