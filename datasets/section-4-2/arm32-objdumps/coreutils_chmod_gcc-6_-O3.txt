
../repos/coreutils/src/chmod:     file format elf32-littlearm


Disassembly of section .init:

00010e98 <.init>:
   10e98:	push	{r3, lr}
   10e9c:	bl	11f3c <__assert_fail@plt+0xd90>
   10ea0:	pop	{r3, pc}

Disassembly of section .plt:

00010ea4 <fstatfs64@plt-0x14>:
   10ea4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea8:	ldr	lr, [pc, #4]	; 10eb4 <fstatfs64@plt-0x4>
   10eac:	add	lr, pc, lr
   10eb0:	ldr	pc, [lr, #8]!
   10eb4:	andeq	sp, r1, ip, asr #2

00010eb8 <fstatfs64@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #118784	; 0x1d000
   10ec0:	ldr	pc, [ip, #332]!	; 0x14c

00010ec4 <calloc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #118784	; 0x1d000
   10ecc:	ldr	pc, [ip, #324]!	; 0x144

00010ed0 <fputs_unlocked@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #118784	; 0x1d000
   10ed8:	ldr	pc, [ip, #316]!	; 0x13c

00010edc <raise@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #118784	; 0x1d000
   10ee4:	ldr	pc, [ip, #308]!	; 0x134

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #118784	; 0x1d000
   10ef0:	ldr	pc, [ip, #300]!	; 0x12c

00010ef4 <fflush@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #118784	; 0x1d000
   10efc:	ldr	pc, [ip, #292]!	; 0x124

00010f00 <memmove@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #118784	; 0x1d000
   10f08:	ldr	pc, [ip, #284]!	; 0x11c

00010f0c <free@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #118784	; 0x1d000
   10f14:	ldr	pc, [ip, #276]!	; 0x114

00010f18 <_exit@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #118784	; 0x1d000
   10f20:	ldr	pc, [ip, #268]!	; 0x10c

00010f24 <memcpy@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #118784	; 0x1d000
   10f2c:	ldr	pc, [ip, #260]!	; 0x104

00010f30 <mbsinit@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #118784	; 0x1d000
   10f38:	ldr	pc, [ip, #252]!	; 0xfc

00010f3c <memcmp@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #118784	; 0x1d000
   10f44:	ldr	pc, [ip, #244]!	; 0xf4

00010f48 <fputc_unlocked@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #118784	; 0x1d000
   10f50:	ldr	pc, [ip, #236]!	; 0xec

00010f54 <dcgettext@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #118784	; 0x1d000
   10f5c:	ldr	pc, [ip, #228]!	; 0xe4

00010f60 <realloc@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #118784	; 0x1d000
   10f68:	ldr	pc, [ip, #220]!	; 0xdc

00010f6c <textdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #118784	; 0x1d000
   10f74:	ldr	pc, [ip, #212]!	; 0xd4

00010f78 <__fxstatat64@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #118784	; 0x1d000
   10f80:	ldr	pc, [ip, #204]!	; 0xcc

00010f84 <iswprint@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #118784	; 0x1d000
   10f8c:	ldr	pc, [ip, #196]!	; 0xc4

00010f90 <__fxstat64@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #118784	; 0x1d000
   10f98:	ldr	pc, [ip, #188]!	; 0xbc

00010f9c <fwrite@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #118784	; 0x1d000
   10fa4:	ldr	pc, [ip, #180]!	; 0xb4

00010fa8 <lseek64@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #118784	; 0x1d000
   10fb0:	ldr	pc, [ip, #172]!	; 0xac

00010fb4 <__ctype_get_mb_cur_max@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #118784	; 0x1d000
   10fbc:	ldr	pc, [ip, #164]!	; 0xa4

00010fc0 <__fpending@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #118784	; 0x1d000
   10fc8:	ldr	pc, [ip, #156]!	; 0x9c

00010fcc <mbrtowc@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #118784	; 0x1d000
   10fd4:	ldr	pc, [ip, #148]!	; 0x94

00010fd8 <error@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #118784	; 0x1d000
   10fe0:	ldr	pc, [ip, #140]!	; 0x8c

00010fe4 <open64@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #118784	; 0x1d000
   10fec:	ldr	pc, [ip, #132]!	; 0x84

00010ff0 <malloc@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #118784	; 0x1d000
   10ff8:	ldr	pc, [ip, #124]!	; 0x7c

00010ffc <__libc_start_main@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #118784	; 0x1d000
   11004:	ldr	pc, [ip, #116]!	; 0x74

00011008 <__freading@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #118784	; 0x1d000
   11010:	ldr	pc, [ip, #108]!	; 0x6c

00011014 <__gmon_start__@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #118784	; 0x1d000
   1101c:	ldr	pc, [ip, #100]!	; 0x64

00011020 <getopt_long@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #118784	; 0x1d000
   11028:	ldr	pc, [ip, #92]!	; 0x5c

0001102c <__ctype_b_loc@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #118784	; 0x1d000
   11034:	ldr	pc, [ip, #84]!	; 0x54

00011038 <exit@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #118784	; 0x1d000
   11040:	ldr	pc, [ip, #76]!	; 0x4c

00011044 <strlen@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #118784	; 0x1d000
   1104c:	ldr	pc, [ip, #68]!	; 0x44

00011050 <openat64@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #118784	; 0x1d000
   11058:	ldr	pc, [ip, #60]!	; 0x3c

0001105c <fchmodat@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #118784	; 0x1d000
   11064:	ldr	pc, [ip, #52]!	; 0x34

00011068 <__errno_location@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #118784	; 0x1d000
   11070:	ldr	pc, [ip, #44]!	; 0x2c

00011074 <__sprintf_chk@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #118784	; 0x1d000
   1107c:	ldr	pc, [ip, #36]!	; 0x24

00011080 <__cxa_atexit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #118784	; 0x1d000
   11088:	ldr	pc, [ip, #28]!

0001108c <memset@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #118784	; 0x1d000
   11094:	ldr	pc, [ip, #20]!

00011098 <__printf_chk@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #118784	; 0x1d000
   110a0:	ldr	pc, [ip, #12]!

000110a4 <fileno@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #118784	; 0x1d000
   110ac:	ldr	pc, [ip, #4]!

000110b0 <__fprintf_chk@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #28, 20	; 0x1c000
   110b8:	ldr	pc, [ip, #4092]!	; 0xffc

000110bc <fclose@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #28, 20	; 0x1c000
   110c4:	ldr	pc, [ip, #4084]!	; 0xff4

000110c8 <fseeko64@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #28, 20	; 0x1c000
   110d0:	ldr	pc, [ip, #4076]!	; 0xfec

000110d4 <fcntl64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #28, 20	; 0x1c000
   110dc:	ldr	pc, [ip, #4068]!	; 0xfe4

000110e0 <setlocale@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #28, 20	; 0x1c000
   110e8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110ec <strrchr@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #28, 20	; 0x1c000
   110f4:	ldr	pc, [ip, #4052]!	; 0xfd4

000110f8 <nl_langinfo@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #28, 20	; 0x1c000
   11100:	ldr	pc, [ip, #4044]!	; 0xfcc

00011104 <readdir64@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #28, 20	; 0x1c000
   1110c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011110 <fdopendir@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #28, 20	; 0x1c000
   11118:	ldr	pc, [ip, #4028]!	; 0xfbc

0001111c <dirfd@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #28, 20	; 0x1c000
   11124:	ldr	pc, [ip, #4020]!	; 0xfb4

00011128 <fchdir@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #28, 20	; 0x1c000
   11130:	ldr	pc, [ip, #4012]!	; 0xfac

00011134 <qsort@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #28, 20	; 0x1c000
   1113c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #28, 20	; 0x1c000
   11148:	ldr	pc, [ip, #3996]!	; 0xf9c

0001114c <umask@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3988]!	; 0xf94

00011158 <chmod@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3980]!	; 0xf8c

00011164 <__xstat64@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3972]!	; 0xf84

00011170 <strncmp@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3964]!	; 0xf7c

0001117c <abort@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3956]!	; 0xf74

00011188 <close@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3948]!	; 0xf6c

00011194 <__lxstat64@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3940]!	; 0xf64

000111a0 <closedir@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3932]!	; 0xf5c

000111ac <__assert_fail@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3924]!	; 0xf54

Disassembly of section .text:

000111b8 <.text>:
   111b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111bc:	sub	sp, sp, #164	; 0xa4
   111c0:	add	r9, sp, #160	; 0xa0
   111c4:	mov	r6, #0
   111c8:	mov	r5, r0
   111cc:	ldr	r0, [r1]
   111d0:	mov	r4, r1
   111d4:	str	r6, [r9, #-120]!	; 0xffffff88
   111d8:	bl	16e34 <__assert_fail@plt+0x5c88>
   111dc:	ldr	r1, [pc, #3180]	; 11e50 <__assert_fail@plt+0xca4>
   111e0:	mov	r0, #6
   111e4:	bl	110e0 <setlocale@plt>
   111e8:	ldr	fp, [pc, #3172]	; 11e54 <__assert_fail@plt+0xca8>
   111ec:	ldr	r1, [pc, #3172]	; 11e58 <__assert_fail@plt+0xcac>
   111f0:	ldr	r0, [pc, #3172]	; 11e5c <__assert_fail@plt+0xcb0>
   111f4:	bl	11140 <bindtextdomain@plt>
   111f8:	ldr	r0, [pc, #3164]	; 11e5c <__assert_fail@plt+0xcb0>
   111fc:	bl	10f6c <textdomain@plt>
   11200:	ldr	r0, [pc, #3160]	; 11e60 <__assert_fail@plt+0xcb4>
   11204:	str	r6, [sp, #20]
   11208:	str	r6, [sp, #16]
   1120c:	str	r6, [sp, #24]
   11210:	mov	r8, r6
   11214:	bl	1ce88 <__assert_fail@plt+0xbcdc>
   11218:	ldr	r7, [pc, #3140]	; 11e64 <__assert_fail@plt+0xcb8>
   1121c:	strb	r6, [fp]
   11220:	strb	r6, [fp, #1]
   11224:	strb	r6, [fp, #2]
   11228:	ldr	r6, [pc, #3128]	; 11e68 <__assert_fail@plt+0xcbc>
   1122c:	mov	sl, #0
   11230:	str	sl, [sp]
   11234:	mov	r3, r7
   11238:	mov	r2, r6
   1123c:	mov	r1, r4
   11240:	mov	r0, r5
   11244:	bl	11020 <getopt_long@plt>
   11248:	cmn	r0, #1
   1124c:	beq	11424 <__assert_fail@plt+0x278>
   11250:	cmp	r0, #99	; 0x63
   11254:	beq	113d8 <__assert_fail@plt+0x22c>
   11258:	ble	11298 <__assert_fail@plt+0xec>
   1125c:	cmp	r0, #118	; 0x76
   11260:	beq	113e8 <__assert_fail@plt+0x23c>
   11264:	ble	11334 <__assert_fail@plt+0x188>
   11268:	cmp	r0, #256	; 0x100
   1126c:	beq	113f4 <__assert_fail@plt+0x248>
   11270:	ble	1146c <__assert_fail@plt+0x2c0>
   11274:	ldr	r3, [pc, #3056]	; 11e6c <__assert_fail@plt+0xcc0>
   11278:	cmp	r0, r3
   1127c:	beq	112fc <__assert_fail@plt+0x150>
   11280:	add	r3, r3, #1
   11284:	cmp	r0, r3
   11288:	bne	1132c <__assert_fail@plt+0x180>
   1128c:	ldr	r3, [pc, #3036]	; 11e70 <__assert_fail@plt+0xcc4>
   11290:	ldr	r8, [r3]
   11294:	b	1122c <__assert_fail@plt+0x80>
   11298:	cmp	r0, #55	; 0x37
   1129c:	bgt	11308 <__assert_fail@plt+0x15c>
   112a0:	cmp	r0, #48	; 0x30
   112a4:	bge	11358 <__assert_fail@plt+0x1ac>
   112a8:	cmn	r0, #2
   112ac:	beq	112f4 <__assert_fail@plt+0x148>
   112b0:	bgt	1145c <__assert_fail@plt+0x2b0>
   112b4:	cmn	r0, #3
   112b8:	bne	1132c <__assert_fail@plt+0x180>
   112bc:	ldr	r3, [pc, #2992]	; 11e74 <__assert_fail@plt+0xcc8>
   112c0:	ldr	r0, [pc, #2992]	; 11e78 <__assert_fail@plt+0xccc>
   112c4:	ldr	r1, [pc, #2992]	; 11e7c <__assert_fail@plt+0xcd0>
   112c8:	ldr	r2, [pc, #2992]	; 11e80 <__assert_fail@plt+0xcd4>
   112cc:	str	sl, [sp, #8]
   112d0:	ldr	r0, [r0]
   112d4:	ldr	r3, [r3]
   112d8:	str	r1, [sp, #4]
   112dc:	str	r2, [sp]
   112e0:	ldr	r1, [pc, #2972]	; 11e84 <__assert_fail@plt+0xcd8>
   112e4:	ldr	r2, [pc, #2972]	; 11e88 <__assert_fail@plt+0xcdc>
   112e8:	bl	1b760 <__assert_fail@plt+0xa5b4>
   112ec:	mov	r0, sl
   112f0:	bl	11038 <exit@plt>
   112f4:	mov	r0, sl
   112f8:	bl	12028 <__assert_fail@plt+0xe7c>
   112fc:	mov	r3, #1
   11300:	str	r3, [sp, #20]
   11304:	b	1122c <__assert_fail@plt+0x80>
   11308:	cmp	r0, #82	; 0x52
   1130c:	moveq	r3, #1
   11310:	strbeq	r3, [fp, #2]
   11314:	beq	1122c <__assert_fail@plt+0x80>
   11318:	ble	11478 <__assert_fail@plt+0x2cc>
   1131c:	cmp	r0, #88	; 0x58
   11320:	beq	11358 <__assert_fail@plt+0x1ac>
   11324:	cmp	r0, #97	; 0x61
   11328:	beq	11358 <__assert_fail@plt+0x1ac>
   1132c:	mov	r0, #1
   11330:	bl	12028 <__assert_fail@plt+0xe7c>
   11334:	cmp	r0, #111	; 0x6f
   11338:	beq	11358 <__assert_fail@plt+0x1ac>
   1133c:	bgt	11484 <__assert_fail@plt+0x2d8>
   11340:	cmp	r0, #102	; 0x66
   11344:	moveq	r3, #1
   11348:	strbeq	r3, [fp, #1]
   1134c:	beq	1122c <__assert_fail@plt+0x80>
   11350:	cmp	r0, #103	; 0x67
   11354:	bne	1132c <__assert_fail@plt+0x180>
   11358:	ldr	r3, [pc, #2860]	; 11e8c <__assert_fail@plt+0xce0>
   1135c:	ldr	r1, [sp, #16]
   11360:	ldr	r3, [r3]
   11364:	mov	r2, r1
   11368:	sub	r3, r3, #-1073741823	; 0xc0000001
   1136c:	cmp	r1, #0
   11370:	addne	r2, r2, #1
   11374:	ldr	r3, [r4, r3, lsl #2]
   11378:	mov	sl, r2
   1137c:	mov	r0, r3
   11380:	str	r2, [sp, #28]
   11384:	str	r3, [sp, #32]
   11388:	bl	11044 <strlen@plt>
   1138c:	ldr	r1, [sp, #40]	; 0x28
   11390:	ldr	r3, [sp, #32]
   11394:	add	sl, r0, sl
   11398:	cmp	sl, r1
   1139c:	mov	r2, r0
   113a0:	bcs	113fc <__assert_fail@plt+0x250>
   113a4:	mov	r1, r3
   113a8:	ldr	lr, [sp, #16]
   113ac:	ldr	r3, [sp, #24]
   113b0:	ldr	r0, [sp, #28]
   113b4:	mov	ip, #44	; 0x2c
   113b8:	add	r0, r3, r0
   113bc:	strb	ip, [r3, lr]
   113c0:	add	r2, r2, #1
   113c4:	bl	10f24 <memcpy@plt>
   113c8:	mov	r3, #1
   113cc:	str	sl, [sp, #16]
   113d0:	strb	r3, [fp]
   113d4:	b	1122c <__assert_fail@plt+0x80>
   113d8:	ldr	r2, [pc, #2736]	; 11e90 <__assert_fail@plt+0xce4>
   113dc:	mov	r3, #1
   113e0:	str	r3, [r2]
   113e4:	b	1122c <__assert_fail@plt+0x80>
   113e8:	ldr	r3, [pc, #2720]	; 11e90 <__assert_fail@plt+0xce4>
   113ec:	str	sl, [r3]
   113f0:	b	1122c <__assert_fail@plt+0x80>
   113f4:	str	sl, [sp, #20]
   113f8:	b	1122c <__assert_fail@plt+0x80>
   113fc:	str	r0, [sp, #36]	; 0x24
   11400:	add	ip, sl, #1
   11404:	ldr	r0, [sp, #24]
   11408:	mov	r1, r9
   1140c:	str	ip, [sp, #40]	; 0x28
   11410:	bl	1ba7c <__assert_fail@plt+0xa8d0>
   11414:	ldr	r2, [sp, #36]	; 0x24
   11418:	ldr	r3, [sp, #32]
   1141c:	str	r0, [sp, #24]
   11420:	b	113a4 <__assert_fail@plt+0x1f8>
   11424:	cmp	r8, sl
   11428:	ldr	r3, [sp, #24]
   1142c:	beq	119c8 <__assert_fail@plt+0x81c>
   11430:	cmp	r3, sl
   11434:	beq	11490 <__assert_fail@plt+0x2e4>
   11438:	mov	r2, #5
   1143c:	ldr	r1, [pc, #2640]	; 11e94 <__assert_fail@plt+0xce8>
   11440:	mov	r0, sl
   11444:	bl	10f54 <dcgettext@plt>
   11448:	mov	r1, sl
   1144c:	mov	r2, r0
   11450:	mov	r0, sl
   11454:	bl	10fd8 <error@plt>
   11458:	b	1132c <__assert_fail@plt+0x180>
   1145c:	sub	r0, r0, #43	; 0x2b
   11460:	cmp	r0, #1
   11464:	bhi	1132c <__assert_fail@plt+0x180>
   11468:	b	11358 <__assert_fail@plt+0x1ac>
   1146c:	cmp	r0, #120	; 0x78
   11470:	bgt	1132c <__assert_fail@plt+0x180>
   11474:	b	11358 <__assert_fail@plt+0x1ac>
   11478:	cmp	r0, #61	; 0x3d
   1147c:	bne	1132c <__assert_fail@plt+0x180>
   11480:	b	11358 <__assert_fail@plt+0x1ac>
   11484:	cmp	r0, #114	; 0x72
   11488:	blt	1132c <__assert_fail@plt+0x180>
   1148c:	b	11358 <__assert_fail@plt+0x1ac>
   11490:	ldr	r6, [pc, #2548]	; 11e8c <__assert_fail@plt+0xce0>
   11494:	ldr	r3, [r6]
   11498:	cmp	r5, r3
   1149c:	ble	11954 <__assert_fail@plt+0x7a8>
   114a0:	mov	r0, r8
   114a4:	bl	16c0c <__assert_fail@plt+0x5a60>
   114a8:	cmp	r0, #0
   114ac:	str	r0, [fp, #28]
   114b0:	beq	11d34 <__assert_fail@plt+0xb88>
   114b4:	ldrb	r3, [fp, #2]
   114b8:	ldr	r2, [sp, #20]
   114bc:	ands	r3, r2, r3
   114c0:	streq	r3, [fp, #24]
   114c4:	bne	11bb0 <__assert_fail@plt+0xa04>
   114c8:	ldr	r0, [r6]
   114cc:	mov	r2, #0
   114d0:	ldr	r1, [pc, #2496]	; 11e98 <__assert_fail@plt+0xcec>
   114d4:	add	r0, r4, r0, lsl #2
   114d8:	bl	1bfd0 <__assert_fail@plt+0xae24>
   114dc:	ldr	sl, [pc, #2476]	; 11e90 <__assert_fail@plt+0xce4>
   114e0:	add	r3, sp, #45	; 0x2d
   114e4:	mov	r9, #1
   114e8:	str	r3, [sp, #28]
   114ec:	add	r3, sp, #57	; 0x39
   114f0:	str	r3, [sp, #32]
   114f4:	mov	r8, r0
   114f8:	mov	r0, r8
   114fc:	bl	143ac <__assert_fail@plt+0x3200>
   11500:	subs	r4, r0, #0
   11504:	beq	11a2c <__assert_fail@plt+0x880>
   11508:	ldrh	r3, [r4, #56]	; 0x38
   1150c:	ldr	r6, [r4, #28]
   11510:	ldr	r5, [r4, #24]
   11514:	sub	r3, r3, #2
   11518:	cmp	r3, #11
   1151c:	ldrls	pc, [pc, r3, lsl #2]
   11520:	b	115f0 <__assert_fail@plt+0x444>
   11524:	ldrdeq	r1, [r1], -ip
   11528:	strdeq	r1, [r1], -r0
   1152c:	andeq	r1, r1, r0, ror #10
   11530:	strdeq	r1, [r1], -r0
   11534:	andeq	r1, r1, r4, asr r5
   11538:	ldrdeq	r1, [r1], -r8
   1153c:	strdeq	r1, [r1], -r0
   11540:	strdeq	r1, [r1], -r0
   11544:	andeq	r1, r1, r8, ror r8
   11548:	strdeq	r1, [r1], -r0
   1154c:	strdeq	r1, [r1], -r0
   11550:	andeq	r1, r1, r8, lsr #16
   11554:	mov	r5, #1
   11558:	and	r9, r9, r5
   1155c:	b	114f8 <__assert_fail@plt+0x34c>
   11560:	ldrb	r5, [fp, #1]
   11564:	cmp	r5, #0
   11568:	moveq	r2, #5
   1156c:	ldreq	r1, [pc, #2344]	; 11e9c <__assert_fail@plt+0xcf0>
   11570:	beq	118a4 <__assert_fail@plt+0x6f8>
   11574:	ldr	r3, [sl]
   11578:	cmp	r3, #2
   1157c:	beq	115bc <__assert_fail@plt+0x410>
   11580:	ldr	r3, [sl]
   11584:	cmp	r3, #0
   11588:	bne	115bc <__assert_fail@plt+0x410>
   1158c:	mov	r1, r6
   11590:	mov	r0, #4
   11594:	bl	19390 <__assert_fail@plt+0x81e4>
   11598:	mov	r2, #5
   1159c:	ldr	r1, [pc, #2300]	; 11ea0 <__assert_fail@plt+0xcf4>
   115a0:	mov	r5, r0
   115a4:	mov	r0, #0
   115a8:	bl	10f54 <dcgettext@plt>
   115ac:	mov	r2, r5
   115b0:	mov	r1, r0
   115b4:	mov	r0, #1
   115b8:	bl	11098 <__printf_chk@plt>
   115bc:	mov	r5, #0
   115c0:	ldrb	r3, [fp, #2]
   115c4:	cmp	r3, #0
   115c8:	beq	1191c <__assert_fail@plt+0x770>
   115cc:	cmp	r5, #1
   115d0:	movls	r5, #0
   115d4:	movhi	r5, #1
   115d8:	b	11558 <__assert_fail@plt+0x3ac>
   115dc:	mov	r1, r4
   115e0:	mov	r0, r8
   115e4:	bl	1c018 <__assert_fail@plt+0xae6c>
   115e8:	cmp	r0, #0
   115ec:	bne	11b48 <__assert_fail@plt+0x99c>
   115f0:	ldr	ip, [fp, #24]
   115f4:	cmp	ip, #0
   115f8:	beq	11610 <__assert_fail@plt+0x464>
   115fc:	ldrd	r0, [r4, #160]	; 0xa0
   11600:	ldrd	r2, [ip]
   11604:	cmp	r1, r3
   11608:	cmpeq	r0, r2
   1160c:	beq	11ab0 <__assert_fail@plt+0x904>
   11610:	ldr	r3, [r4, #80]	; 0x50
   11614:	mov	r0, r3
   11618:	str	r3, [sp, #16]
   1161c:	and	r3, r3, #61440	; 0xf000
   11620:	cmp	r3, #40960	; 0xa000
   11624:	mov	r1, r3
   11628:	str	r3, [sp, #24]
   1162c:	beq	11978 <__assert_fail@plt+0x7cc>
   11630:	mov	r7, #0
   11634:	str	r7, [sp]
   11638:	ldr	r3, [fp, #28]
   1163c:	ldr	r2, [fp, #4]
   11640:	sub	r1, r1, #16384	; 0x4000
   11644:	clz	r1, r1
   11648:	lsr	r1, r1, #5
   1164c:	bl	16c6c <__assert_fail@plt+0x5ac0>
   11650:	mov	r3, r7
   11654:	mov	r1, r5
   11658:	mov	r2, r0
   1165c:	str	r0, [sp, #20]
   11660:	ldr	r0, [r8, #32]
   11664:	bl	12488 <__assert_fail@plt+0x12dc>
   11668:	cmp	r0, #0
   1166c:	bne	11a90 <__assert_fail@plt+0x8e4>
   11670:	ldr	r3, [sl]
   11674:	cmp	r3, #2
   11678:	moveq	r5, #4
   1167c:	beq	11770 <__assert_fail@plt+0x5c4>
   11680:	ldr	r3, [sp, #20]
   11684:	tst	r3, #3584	; 0xe00
   11688:	beq	11d2c <__assert_fail@plt+0xb80>
   1168c:	str	r0, [sp]
   11690:	mov	r2, r5
   11694:	add	r3, sp, #56	; 0x38
   11698:	ldr	r1, [r8, #32]
   1169c:	mov	r0, #3
   116a0:	bl	10f78 <__fxstatat64@plt>
   116a4:	cmp	r0, #0
   116a8:	beq	11c84 <__assert_fail@plt+0xad8>
   116ac:	ldrb	r5, [fp, #1]
   116b0:	cmp	r5, #0
   116b4:	bne	116f4 <__assert_fail@plt+0x548>
   116b8:	bl	11068 <__errno_location@plt>
   116bc:	mov	r2, #5
   116c0:	ldr	r1, [pc, #2012]	; 11ea4 <__assert_fail@plt+0xcf8>
   116c4:	ldr	r7, [r0]
   116c8:	mov	r0, r5
   116cc:	bl	10f54 <dcgettext@plt>
   116d0:	mov	r1, r6
   116d4:	str	r0, [sp, #36]	; 0x24
   116d8:	mov	r0, #4
   116dc:	bl	19390 <__assert_fail@plt+0x81e4>
   116e0:	ldr	r2, [sp, #36]	; 0x24
   116e4:	mov	r1, r7
   116e8:	mov	r3, r0
   116ec:	mov	r0, r5
   116f0:	bl	10fd8 <error@plt>
   116f4:	ldr	r3, [sl]
   116f8:	cmp	r3, #0
   116fc:	movne	r5, #3
   11700:	bne	11770 <__assert_fail@plt+0x5c4>
   11704:	mov	r1, r6
   11708:	mov	r0, #4
   1170c:	bl	19390 <__assert_fail@plt+0x81e4>
   11710:	add	r1, sp, #44	; 0x2c
   11714:	mov	r5, #0
   11718:	mov	r7, r0
   1171c:	ldr	r0, [sp, #20]
   11720:	bl	125b0 <__assert_fail@plt+0x1404>
   11724:	add	r1, sp, #56	; 0x38
   11728:	ldr	r0, [sp, #16]
   1172c:	strb	r5, [sp, #54]	; 0x36
   11730:	bl	125b0 <__assert_fail@plt+0x1404>
   11734:	mov	r0, r5
   11738:	mov	r2, #5
   1173c:	ldr	r1, [pc, #1892]	; 11ea8 <__assert_fail@plt+0xcfc>
   11740:	strb	r5, [sp, #66]	; 0x42
   11744:	bl	10f54 <dcgettext@plt>
   11748:	ldr	r3, [sp, #20]
   1174c:	ldr	r2, [sp, #28]
   11750:	mov	r5, #3
   11754:	lsl	r3, r3, #20
   11758:	str	r2, [sp]
   1175c:	lsr	r3, r3, #20
   11760:	mov	r2, r7
   11764:	mov	r1, r0
   11768:	mov	r0, #1
   1176c:	bl	11098 <__printf_chk@plt>
   11770:	ldrb	r3, [fp]
   11774:	cmp	r3, #0
   11778:	beq	115c0 <__assert_fail@plt+0x414>
   1177c:	ldr	r3, [sp, #24]
   11780:	mov	r7, #0
   11784:	str	r7, [sp]
   11788:	sub	r1, r3, #16384	; 0x4000
   1178c:	mov	r2, r7
   11790:	clz	r1, r1
   11794:	ldr	r0, [sp, #16]
   11798:	lsr	r1, r1, #5
   1179c:	ldr	r3, [fp, #28]
   117a0:	bl	16c6c <__assert_fail@plt+0x5ac0>
   117a4:	ldr	r2, [sp, #20]
   117a8:	bics	r2, r2, r0
   117ac:	beq	115c0 <__assert_fail@plt+0x414>
   117b0:	str	r0, [sp, #16]
   117b4:	add	r1, sp, #44	; 0x2c
   117b8:	ldr	r0, [sp, #20]
   117bc:	bl	125b0 <__assert_fail@plt+0x1404>
   117c0:	ldr	r3, [sp, #16]
   117c4:	add	r1, sp, #56	; 0x38
   117c8:	mov	r0, r3
   117cc:	bl	125b0 <__assert_fail@plt+0x1404>
   117d0:	mov	r2, #5
   117d4:	ldr	r1, [pc, #1744]	; 11eac <__assert_fail@plt+0xd00>
   117d8:	mov	r0, r7
   117dc:	strb	r7, [sp, #66]	; 0x42
   117e0:	strb	r7, [sp, #54]	; 0x36
   117e4:	bl	10f54 <dcgettext@plt>
   117e8:	mov	r2, r6
   117ec:	mov	r1, #3
   117f0:	mov	r5, r0
   117f4:	mov	r0, r7
   117f8:	bl	19e0c <__assert_fail@plt+0x8c60>
   117fc:	ldr	r3, [sp, #32]
   11800:	mov	r2, r5
   11804:	str	r3, [sp, #4]
   11808:	ldr	r3, [sp, #28]
   1180c:	mov	r1, r7
   11810:	str	r3, [sp]
   11814:	mov	r5, #1
   11818:	mov	r3, r0
   1181c:	mov	r0, r7
   11820:	bl	10fd8 <error@plt>
   11824:	b	115c0 <__assert_fail@plt+0x414>
   11828:	ldrb	r5, [fp, #1]
   1182c:	cmp	r5, #0
   11830:	bne	11574 <__assert_fail@plt+0x3c8>
   11834:	mov	r2, #5
   11838:	ldr	r1, [pc, #1648]	; 11eb0 <__assert_fail@plt+0xd04>
   1183c:	mov	r0, r5
   11840:	bl	10f54 <dcgettext@plt>
   11844:	mov	r1, r6
   11848:	mov	r7, r0
   1184c:	mov	r0, #4
   11850:	bl	19390 <__assert_fail@plt+0x81e4>
   11854:	mov	r2, r7
   11858:	mov	r1, r5
   1185c:	mov	r3, r0
   11860:	mov	r0, r5
   11864:	bl	10fd8 <error@plt>
   11868:	ldr	r3, [sl]
   1186c:	cmp	r3, #2
   11870:	bne	11580 <__assert_fail@plt+0x3d4>
   11874:	b	115bc <__assert_fail@plt+0x410>
   11878:	ldr	r3, [r4, #48]	; 0x30
   1187c:	cmp	r3, #0
   11880:	bne	11890 <__assert_fail@plt+0x6e4>
   11884:	ldr	r3, [r4, #16]
   11888:	cmp	r3, #0
   1188c:	beq	11c04 <__assert_fail@plt+0xa58>
   11890:	ldrb	r5, [fp, #1]
   11894:	cmp	r5, #0
   11898:	moveq	r2, #5
   1189c:	ldreq	r1, [pc, #1552]	; 11eb4 <__assert_fail@plt+0xd08>
   118a0:	bne	11ddc <__assert_fail@plt+0xc30>
   118a4:	mov	r0, r5
   118a8:	ldr	r7, [r4, #32]
   118ac:	bl	10f54 <dcgettext@plt>
   118b0:	mov	r1, r6
   118b4:	str	r0, [sp, #16]
   118b8:	mov	r0, #4
   118bc:	bl	19390 <__assert_fail@plt+0x81e4>
   118c0:	ldr	r2, [sp, #16]
   118c4:	mov	r1, r7
   118c8:	mov	r3, r0
   118cc:	mov	r0, r5
   118d0:	bl	10fd8 <error@plt>
   118d4:	b	11574 <__assert_fail@plt+0x3c8>
   118d8:	ldrb	r5, [fp, #1]
   118dc:	cmp	r5, #0
   118e0:	bne	11574 <__assert_fail@plt+0x3c8>
   118e4:	mov	r2, r6
   118e8:	mov	r1, #3
   118ec:	mov	r0, r5
   118f0:	ldr	r7, [r4, #32]
   118f4:	bl	19e0c <__assert_fail@plt+0x8c60>
   118f8:	mov	r1, r7
   118fc:	ldr	r2, [pc, #1460]	; 11eb8 <__assert_fail@plt+0xd0c>
   11900:	mov	r3, r0
   11904:	mov	r0, r5
   11908:	bl	10fd8 <error@plt>
   1190c:	ldr	r3, [sl]
   11910:	cmp	r3, #2
   11914:	bne	11580 <__assert_fail@plt+0x3d4>
   11918:	b	115bc <__assert_fail@plt+0x410>
   1191c:	mov	r1, r4
   11920:	mov	r2, #4
   11924:	mov	r0, r8
   11928:	bl	14d04 <__assert_fail@plt+0x3b58>
   1192c:	b	115cc <__assert_fail@plt+0x420>
   11930:	ldr	r2, [r6]
   11934:	add	r3, r2, #1
   11938:	ldr	r2, [r4, r2, lsl #2]
   1193c:	cmp	r5, r3
   11940:	str	r3, [r6]
   11944:	str	r2, [sp, #24]
   11948:	bgt	11b88 <__assert_fail@plt+0x9dc>
   1194c:	cmp	r2, #0
   11950:	bne	119e0 <__assert_fail@plt+0x834>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #1372]	; 11ebc <__assert_fail@plt+0xd10>
   1195c:	mov	r0, #0
   11960:	bl	10f54 <dcgettext@plt>
   11964:	mov	r1, #0
   11968:	mov	r2, r0
   1196c:	mov	r0, r1
   11970:	bl	10fd8 <error@plt>
   11974:	b	1132c <__assert_fail@plt+0x180>
   11978:	ldr	r5, [sl]
   1197c:	cmp	r5, #2
   11980:	beq	115c0 <__assert_fail@plt+0x414>
   11984:	cmp	r5, #0
   11988:	movne	r5, #2
   1198c:	bne	115c0 <__assert_fail@plt+0x414>
   11990:	mov	r1, r6
   11994:	mov	r0, #4
   11998:	bl	19390 <__assert_fail@plt+0x81e4>
   1199c:	mov	r2, #5
   119a0:	ldr	r1, [pc, #1304]	; 11ec0 <__assert_fail@plt+0xd14>
   119a4:	mov	r6, r0
   119a8:	mov	r0, r5
   119ac:	bl	10f54 <dcgettext@plt>
   119b0:	mov	r2, r6
   119b4:	mov	r5, #2
   119b8:	mov	r1, r0
   119bc:	mov	r0, #1
   119c0:	bl	11098 <__printf_chk@plt>
   119c4:	b	115c0 <__assert_fail@plt+0x414>
   119c8:	cmp	r3, #0
   119cc:	ldr	r6, [pc, #1208]	; 11e8c <__assert_fail@plt+0xce0>
   119d0:	beq	11930 <__assert_fail@plt+0x784>
   119d4:	ldr	r3, [r6]
   119d8:	cmp	r5, r3
   119dc:	bgt	11b88 <__assert_fail@plt+0x9dc>
   119e0:	sub	r3, r3, #-1073741823	; 0xc0000001
   119e4:	ldr	r2, [sp, #24]
   119e8:	ldr	r3, [r4, r3, lsl #2]
   119ec:	cmp	r3, r2
   119f0:	bne	11954 <__assert_fail@plt+0x7a8>
   119f4:	mov	r2, #5
   119f8:	ldr	r1, [pc, #1220]	; 11ec4 <__assert_fail@plt+0xd18>
   119fc:	mov	r0, #0
   11a00:	bl	10f54 <dcgettext@plt>
   11a04:	sub	r5, r5, #-1073741823	; 0xc0000001
   11a08:	mov	r6, r0
   11a0c:	ldr	r0, [r4, r5, lsl #2]
   11a10:	bl	1ad00 <__assert_fail@plt+0x9b54>
   11a14:	mov	r1, #0
   11a18:	mov	r2, r6
   11a1c:	mov	r3, r0
   11a20:	mov	r0, r1
   11a24:	bl	10fd8 <error@plt>
   11a28:	b	1132c <__assert_fail@plt+0x180>
   11a2c:	bl	11068 <__errno_location@plt>
   11a30:	ldr	r6, [r0]
   11a34:	mov	r5, r0
   11a38:	cmp	r6, #0
   11a3c:	beq	11a50 <__assert_fail@plt+0x8a4>
   11a40:	ldrb	r9, [fp, #1]
   11a44:	cmp	r9, #0
   11a48:	movne	r9, r4
   11a4c:	beq	11c60 <__assert_fail@plt+0xab4>
   11a50:	mov	r0, r8
   11a54:	bl	141e4 <__assert_fail@plt+0x3038>
   11a58:	cmp	r0, #0
   11a5c:	beq	11a88 <__assert_fail@plt+0x8dc>
   11a60:	mov	r2, #5
   11a64:	ldr	r1, [pc, #1116]	; 11ec8 <__assert_fail@plt+0xd1c>
   11a68:	mov	r0, #0
   11a6c:	ldr	r4, [r5]
   11a70:	bl	10f54 <dcgettext@plt>
   11a74:	mov	r1, r4
   11a78:	mov	r9, #0
   11a7c:	mov	r2, r0
   11a80:	mov	r0, #0
   11a84:	bl	10fd8 <error@plt>
   11a88:	eor	r0, r9, #1
   11a8c:	bl	11038 <exit@plt>
   11a90:	ldrb	r5, [fp, #1]
   11a94:	cmp	r5, #0
   11a98:	beq	11c20 <__assert_fail@plt+0xa74>
   11a9c:	ldr	r5, [sl]
   11aa0:	cmp	r5, #2
   11aa4:	bne	11df4 <__assert_fail@plt+0xc48>
   11aa8:	mov	r5, #1
   11aac:	b	115c0 <__assert_fail@plt+0x414>
   11ab0:	ldrd	r2, [r4, #64]	; 0x40
   11ab4:	ldrd	r0, [ip, #8]
   11ab8:	cmp	r3, r1
   11abc:	cmpeq	r2, r0
   11ac0:	bne	11610 <__assert_fail@plt+0x464>
   11ac4:	ldr	r1, [pc, #1024]	; 11ecc <__assert_fail@plt+0xd20>
   11ac8:	mov	r0, r6
   11acc:	bl	10ee8 <strcmp@plt>
   11ad0:	mov	r2, #5
   11ad4:	subs	r5, r0, #0
   11ad8:	bne	11d58 <__assert_fail@plt+0xbac>
   11adc:	ldr	r1, [pc, #1004]	; 11ed0 <__assert_fail@plt+0xd24>
   11ae0:	bl	10f54 <dcgettext@plt>
   11ae4:	mov	r1, r6
   11ae8:	mov	r7, r0
   11aec:	mov	r0, #4
   11af0:	bl	19390 <__assert_fail@plt+0x81e4>
   11af4:	mov	r2, r7
   11af8:	mov	r1, r5
   11afc:	mov	r3, r0
   11b00:	mov	r0, r5
   11b04:	bl	10fd8 <error@plt>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #960]	; 11ed4 <__assert_fail@plt+0xd28>
   11b10:	mov	r0, #0
   11b14:	bl	10f54 <dcgettext@plt>
   11b18:	mov	r1, #0
   11b1c:	mov	r5, #0
   11b20:	mov	r2, r0
   11b24:	mov	r0, r1
   11b28:	bl	10fd8 <error@plt>
   11b2c:	mov	r1, r4
   11b30:	mov	r2, #4
   11b34:	mov	r0, r8
   11b38:	bl	14d04 <__assert_fail@plt+0x3b58>
   11b3c:	mov	r0, r8
   11b40:	bl	143ac <__assert_fail@plt+0x3200>
   11b44:	b	11558 <__assert_fail@plt+0x3ac>
   11b48:	mov	r2, #5
   11b4c:	ldr	r1, [pc, #900]	; 11ed8 <__assert_fail@plt+0xd2c>
   11b50:	mov	r0, #0
   11b54:	bl	10f54 <dcgettext@plt>
   11b58:	mov	r2, r6
   11b5c:	mov	r1, #3
   11b60:	mov	r5, #0
   11b64:	mov	r4, r0
   11b68:	mov	r0, #0
   11b6c:	bl	19e0c <__assert_fail@plt+0x8c60>
   11b70:	mov	r1, #0
   11b74:	mov	r2, r4
   11b78:	mov	r3, r0
   11b7c:	mov	r0, r1
   11b80:	bl	10fd8 <error@plt>
   11b84:	b	11558 <__assert_fail@plt+0x3ac>
   11b88:	ldr	r0, [sp, #24]
   11b8c:	bl	1687c <__assert_fail@plt+0x56d0>
   11b90:	cmp	r0, #0
   11b94:	mov	r5, r0
   11b98:	str	r0, [fp, #28]
   11b9c:	beq	11da8 <__assert_fail@plt+0xbfc>
   11ba0:	mov	r0, #0
   11ba4:	bl	1114c <umask@plt>
   11ba8:	str	r0, [fp, #4]
   11bac:	b	114b4 <__assert_fail@plt+0x308>
   11bb0:	ldr	r0, [pc, #804]	; 11edc <__assert_fail@plt+0xd30>
   11bb4:	bl	1ae80 <__assert_fail@plt+0x9cd4>
   11bb8:	cmp	r0, #0
   11bbc:	mov	r5, r0
   11bc0:	str	r0, [fp, #24]
   11bc4:	bne	114c8 <__assert_fail@plt+0x31c>
   11bc8:	bl	11068 <__errno_location@plt>
   11bcc:	ldr	r1, [pc, #780]	; 11ee0 <__assert_fail@plt+0xd34>
   11bd0:	mov	r2, #5
   11bd4:	ldr	r4, [r0]
   11bd8:	mov	r0, r5
   11bdc:	bl	10f54 <dcgettext@plt>
   11be0:	ldr	r1, [pc, #740]	; 11ecc <__assert_fail@plt+0xd20>
   11be4:	mov	r5, r0
   11be8:	mov	r0, #4
   11bec:	bl	19390 <__assert_fail@plt+0x81e4>
   11bf0:	mov	r2, r5
   11bf4:	mov	r1, r4
   11bf8:	mov	r3, r0
   11bfc:	mov	r0, #1
   11c00:	bl	10fd8 <error@plt>
   11c04:	mov	r5, #1
   11c08:	str	r5, [r4, #16]
   11c0c:	mov	r1, r4
   11c10:	mov	r2, r5
   11c14:	mov	r0, r8
   11c18:	bl	14d04 <__assert_fail@plt+0x3b58>
   11c1c:	b	11558 <__assert_fail@plt+0x3ac>
   11c20:	bl	11068 <__errno_location@plt>
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #692]	; 11ee4 <__assert_fail@plt+0xd38>
   11c2c:	ldr	r7, [r0]
   11c30:	mov	r0, r5
   11c34:	bl	10f54 <dcgettext@plt>
   11c38:	mov	r1, r6
   11c3c:	str	r0, [sp, #36]	; 0x24
   11c40:	mov	r0, #4
   11c44:	bl	19390 <__assert_fail@plt+0x81e4>
   11c48:	ldr	r2, [sp, #36]	; 0x24
   11c4c:	mov	r1, r7
   11c50:	mov	r3, r0
   11c54:	mov	r0, r5
   11c58:	bl	10fd8 <error@plt>
   11c5c:	b	11a9c <__assert_fail@plt+0x8f0>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #636]	; 11ee8 <__assert_fail@plt+0xd3c>
   11c68:	mov	r0, r9
   11c6c:	bl	10f54 <dcgettext@plt>
   11c70:	mov	r1, r6
   11c74:	mov	r2, r0
   11c78:	mov	r0, r9
   11c7c:	bl	10fd8 <error@plt>
   11c80:	b	11a50 <__assert_fail@plt+0x8a4>
   11c84:	ldr	r3, [sp, #72]	; 0x48
   11c88:	ldr	r2, [sp, #16]
   11c8c:	eor	r3, r3, r2
   11c90:	ldr	r2, [pc, #596]	; 11eec <__assert_fail@plt+0xd40>
   11c94:	tst	r3, r2
   11c98:	beq	116f4 <__assert_fail@plt+0x548>
   11c9c:	mov	r1, r6
   11ca0:	mov	r0, #4
   11ca4:	bl	19390 <__assert_fail@plt+0x81e4>
   11ca8:	add	r1, sp, #44	; 0x2c
   11cac:	mov	r5, #0
   11cb0:	mov	r7, r0
   11cb4:	ldr	r0, [sp, #20]
   11cb8:	bl	125b0 <__assert_fail@plt+0x1404>
   11cbc:	add	r1, sp, #56	; 0x38
   11cc0:	ldr	r0, [sp, #16]
   11cc4:	strb	r5, [sp, #54]	; 0x36
   11cc8:	bl	125b0 <__assert_fail@plt+0x1404>
   11ccc:	mov	r0, r5
   11cd0:	mov	r2, #5
   11cd4:	ldr	r1, [pc, #532]	; 11ef0 <__assert_fail@plt+0xd44>
   11cd8:	strb	r5, [sp, #66]	; 0x42
   11cdc:	bl	10f54 <dcgettext@plt>
   11ce0:	ldr	r3, [sp, #20]
   11ce4:	mov	r5, #4
   11ce8:	lsl	r3, r3, #20
   11cec:	lsr	r3, r3, #20
   11cf0:	str	r3, [sp, #4]
   11cf4:	ldr	r3, [sp, #16]
   11cf8:	add	lr, sp, #45	; 0x2d
   11cfc:	add	ip, sp, #57	; 0x39
   11d00:	lsl	r3, r3, #20
   11d04:	mov	r1, r0
   11d08:	mov	r2, r7
   11d0c:	str	lr, [sp, #8]
   11d10:	str	ip, [sp]
   11d14:	lsr	r3, r3, #20
   11d18:	mov	r0, #1
   11d1c:	bl	11098 <__printf_chk@plt>
   11d20:	cmp	r5, #2
   11d24:	bls	115c0 <__assert_fail@plt+0x414>
   11d28:	b	11770 <__assert_fail@plt+0x5c4>
   11d2c:	ldr	r3, [sp, #20]
   11d30:	b	11c88 <__assert_fail@plt+0xadc>
   11d34:	bl	11068 <__errno_location@plt>
   11d38:	ldr	r1, [pc, #416]	; 11ee0 <__assert_fail@plt+0xd34>
   11d3c:	mov	r2, #5
   11d40:	ldr	r4, [r0]
   11d44:	ldr	r0, [sp, #24]
   11d48:	bl	10f54 <dcgettext@plt>
   11d4c:	mov	r1, r8
   11d50:	mov	r5, r0
   11d54:	b	11be8 <__assert_fail@plt+0xa3c>
   11d58:	ldr	r1, [pc, #404]	; 11ef4 <__assert_fail@plt+0xd48>
   11d5c:	mov	r0, #0
   11d60:	bl	10f54 <dcgettext@plt>
   11d64:	mov	r2, r6
   11d68:	mov	r1, #4
   11d6c:	mov	r5, r0
   11d70:	mov	r0, #0
   11d74:	bl	18fb0 <__assert_fail@plt+0x7e04>
   11d78:	ldr	r2, [pc, #332]	; 11ecc <__assert_fail@plt+0xd20>
   11d7c:	mov	r1, #4
   11d80:	mov	r6, r0
   11d84:	mov	r0, #1
   11d88:	bl	18fb0 <__assert_fail@plt+0x7e04>
   11d8c:	mov	r1, #0
   11d90:	mov	r3, r6
   11d94:	mov	r2, r5
   11d98:	str	r0, [sp]
   11d9c:	mov	r0, r1
   11da0:	bl	10fd8 <error@plt>
   11da4:	b	11b08 <__assert_fail@plt+0x95c>
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #324]	; 11ef8 <__assert_fail@plt+0xd4c>
   11db0:	bl	10f54 <dcgettext@plt>
   11db4:	mov	r4, r0
   11db8:	ldr	r0, [sp, #24]
   11dbc:	bl	1ad00 <__assert_fail@plt+0x9b54>
   11dc0:	mov	r2, r4
   11dc4:	mov	r1, r5
   11dc8:	mov	r3, r0
   11dcc:	mov	r0, r5
   11dd0:	bl	10fd8 <error@plt>
   11dd4:	mov	r0, #1
   11dd8:	bl	12028 <__assert_fail@plt+0xe7c>
   11ddc:	ldr	r3, [sl]
   11de0:	cmp	r3, #2
   11de4:	beq	115bc <__assert_fail@plt+0x410>
   11de8:	cmp	r3, #0
   11dec:	beq	1158c <__assert_fail@plt+0x3e0>
   11df0:	b	115bc <__assert_fail@plt+0x410>
   11df4:	cmp	r5, #0
   11df8:	bne	11aa8 <__assert_fail@plt+0x8fc>
   11dfc:	mov	r1, r6
   11e00:	mov	r0, #4
   11e04:	bl	19390 <__assert_fail@plt+0x81e4>
   11e08:	add	r1, sp, #44	; 0x2c
   11e0c:	mov	r7, r0
   11e10:	ldr	r0, [sp, #20]
   11e14:	bl	125b0 <__assert_fail@plt+0x1404>
   11e18:	add	r1, sp, #56	; 0x38
   11e1c:	ldr	r0, [sp, #16]
   11e20:	strb	r5, [sp, #54]	; 0x36
   11e24:	bl	125b0 <__assert_fail@plt+0x1404>
   11e28:	mov	r0, r5
   11e2c:	mov	r2, #5
   11e30:	ldr	r1, [pc, #196]	; 11efc <__assert_fail@plt+0xd50>
   11e34:	strb	r5, [sp, #66]	; 0x42
   11e38:	bl	10f54 <dcgettext@plt>
   11e3c:	ldr	r3, [sp, #20]
   11e40:	mov	r5, #1
   11e44:	lsl	r3, r3, #20
   11e48:	lsr	r3, r3, #20
   11e4c:	b	11cf0 <__assert_fail@plt+0xb44>
   11e50:	strheq	sp, [r1], -r4
   11e54:	andeq	lr, r2, r8, lsl #3
   11e58:	andeq	sp, r1, ip, lsr #8
   11e5c:	andeq	sp, r1, r4, lsl #7
   11e60:	andeq	r2, r1, r4, lsr #7
   11e64:	andeq	ip, r1, r4, ror #29
   11e68:	andeq	sp, r1, r4, ror #8
   11e6c:	andeq	r0, r0, r1, lsl #2
   11e70:	andeq	lr, r2, r0, lsl #3
   11e74:	andeq	lr, r2, ip, lsl r1
   11e78:	andeq	lr, r2, ip, ror r1
   11e7c:	andeq	sp, r1, r4, asr #8
   11e80:	andeq	sp, r1, r4, asr r4
   11e84:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   11e88:	andeq	sp, r1, r0, lsl #7
   11e8c:	andeq	lr, r2, r0, ror r1
   11e90:	andeq	lr, r2, r8, lsl r1
   11e94:	andeq	sp, r1, r8, lsr #9
   11e98:	andeq	r0, r0, r1, lsl r4
   11e9c:	andeq	sp, r1, ip, asr r5
   11ea0:	andeq	sp, r1, r0, ror r7
   11ea4:	andeq	sp, r1, r0, asr r7
   11ea8:	andeq	sp, r1, r4, lsr r8
   11eac:	andeq	sp, r1, ip, lsl #15
   11eb0:	andeq	sp, r1, r8, ror r5
   11eb4:	andeq	sp, r1, r8, asr #10
   11eb8:	andeq	sp, r1, r0, asr r9
   11ebc:	ldrdeq	sp, [r1], -r4
   11ec0:	andeq	sp, r1, r8, lsl r7
   11ec4:	andeq	sp, r1, r4, ror #9
   11ec8:			; <UNDEFINED> instruction: 0x0001d7b0
   11ecc:	andeq	sp, r1, r4, lsr r5
   11ed0:	andeq	sp, r1, ip, asr r6
   11ed4:	andeq	sp, r1, r8, asr #13
   11ed8:	andeq	sp, r1, r0, lsr #11
   11edc:	muleq	r2, r0, r1
   11ee0:	andeq	sp, r1, r0, lsl #10
   11ee4:	strdeq	sp, [r1], -ip
   11ee8:	andeq	sp, r1, r8, lsr r5
   11eec:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   11ef0:	andeq	sp, r1, r0, lsl #16
   11ef4:	andeq	sp, r1, ip, lsl #13
   11ef8:	andeq	sp, r1, r0, lsr #10
   11efc:	andeq	sp, r1, r4, asr #15
   11f00:	mov	fp, #0
   11f04:	mov	lr, #0
   11f08:	pop	{r1}		; (ldr r1, [sp], #4)
   11f0c:	mov	r2, sp
   11f10:	push	{r2}		; (str r2, [sp, #-4]!)
   11f14:	push	{r0}		; (str r0, [sp, #-4]!)
   11f18:	ldr	ip, [pc, #16]	; 11f30 <__assert_fail@plt+0xd84>
   11f1c:	push	{ip}		; (str ip, [sp, #-4]!)
   11f20:	ldr	r0, [pc, #12]	; 11f34 <__assert_fail@plt+0xd88>
   11f24:	ldr	r3, [pc, #12]	; 11f38 <__assert_fail@plt+0xd8c>
   11f28:	bl	10ffc <__libc_start_main@plt>
   11f2c:	bl	1117c <abort@plt>
   11f30:	andeq	ip, r1, r4, lsl #29
   11f34:			; <UNDEFINED> instruction: 0x000111b8
   11f38:	andeq	ip, r1, r4, lsr #28
   11f3c:	ldr	r3, [pc, #20]	; 11f58 <__assert_fail@plt+0xdac>
   11f40:	ldr	r2, [pc, #20]	; 11f5c <__assert_fail@plt+0xdb0>
   11f44:	add	r3, pc, r3
   11f48:	ldr	r2, [r3, r2]
   11f4c:	cmp	r2, #0
   11f50:	bxeq	lr
   11f54:	b	11014 <__gmon_start__@plt>
   11f58:	strheq	ip, [r1], -r4
   11f5c:	andeq	r0, r0, ip, lsl #2
   11f60:	ldr	r3, [pc, #28]	; 11f84 <__assert_fail@plt+0xdd8>
   11f64:	ldr	r0, [pc, #28]	; 11f88 <__assert_fail@plt+0xddc>
   11f68:	sub	r3, r3, r0
   11f6c:	cmp	r3, #6
   11f70:	bxls	lr
   11f74:	ldr	r3, [pc, #16]	; 11f8c <__assert_fail@plt+0xde0>
   11f78:	cmp	r3, #0
   11f7c:	bxeq	lr
   11f80:	bx	r3
   11f84:	andeq	lr, r2, r7, ror #2
   11f88:	andeq	lr, r2, r4, ror #2
   11f8c:	andeq	r0, r0, r0
   11f90:	ldr	r1, [pc, #36]	; 11fbc <__assert_fail@plt+0xe10>
   11f94:	ldr	r0, [pc, #36]	; 11fc0 <__assert_fail@plt+0xe14>
   11f98:	sub	r1, r1, r0
   11f9c:	asr	r1, r1, #2
   11fa0:	add	r1, r1, r1, lsr #31
   11fa4:	asrs	r1, r1, #1
   11fa8:	bxeq	lr
   11fac:	ldr	r3, [pc, #16]	; 11fc4 <__assert_fail@plt+0xe18>
   11fb0:	cmp	r3, #0
   11fb4:	bxeq	lr
   11fb8:	bx	r3
   11fbc:	andeq	lr, r2, r4, ror #2
   11fc0:	andeq	lr, r2, r4, ror #2
   11fc4:	andeq	r0, r0, r0
   11fc8:	push	{r4, lr}
   11fcc:	ldr	r4, [pc, #24]	; 11fec <__assert_fail@plt+0xe40>
   11fd0:	ldrb	r3, [r4]
   11fd4:	cmp	r3, #0
   11fd8:	popne	{r4, pc}
   11fdc:	bl	11f60 <__assert_fail@plt+0xdb4>
   11fe0:	mov	r3, #1
   11fe4:	strb	r3, [r4]
   11fe8:	pop	{r4, pc}
   11fec:	andeq	lr, r2, r4, lsl #3
   11ff0:	ldr	r0, [pc, #40]	; 12020 <__assert_fail@plt+0xe74>
   11ff4:	ldr	r3, [r0]
   11ff8:	cmp	r3, #0
   11ffc:	bne	12004 <__assert_fail@plt+0xe58>
   12000:	b	11f90 <__assert_fail@plt+0xde4>
   12004:	ldr	r3, [pc, #24]	; 12024 <__assert_fail@plt+0xe78>
   12008:	cmp	r3, #0
   1200c:	beq	12000 <__assert_fail@plt+0xe54>
   12010:	push	{r4, lr}
   12014:	blx	r3
   12018:	pop	{r4, lr}
   1201c:	b	11f90 <__assert_fail@plt+0xde4>
   12020:	andeq	sp, r2, r4, lsl pc
   12024:	andeq	r0, r0, r0
   12028:	subs	r5, r0, #0
   1202c:	push	{r7, lr}
   12030:	sub	sp, sp, #64	; 0x40
   12034:	beq	12070 <__assert_fail@plt+0xec4>
   12038:	ldr	r3, [pc, #740]	; 12324 <__assert_fail@plt+0x1178>
   1203c:	mov	r2, #5
   12040:	ldr	r1, [pc, #736]	; 12328 <__assert_fail@plt+0x117c>
   12044:	mov	r0, #0
   12048:	ldr	r4, [r3]
   1204c:	bl	10f54 <dcgettext@plt>
   12050:	ldr	r3, [pc, #724]	; 1232c <__assert_fail@plt+0x1180>
   12054:	mov	r1, #1
   12058:	ldr	r3, [r3]
   1205c:	mov	r2, r0
   12060:	mov	r0, r4
   12064:	bl	110b0 <__fprintf_chk@plt>
   12068:	mov	r0, r5
   1206c:	bl	11038 <exit@plt>
   12070:	mov	r2, #5
   12074:	ldr	r1, [pc, #692]	; 12330 <__assert_fail@plt+0x1184>
   12078:	bl	10f54 <dcgettext@plt>
   1207c:	ldr	r3, [pc, #680]	; 1232c <__assert_fail@plt+0x1180>
   12080:	ldr	r7, [pc, #684]	; 12334 <__assert_fail@plt+0x1188>
   12084:	ldr	r4, [pc, #684]	; 12338 <__assert_fail@plt+0x118c>
   12088:	ldr	r3, [r3]
   1208c:	mov	r2, r3
   12090:	str	r3, [sp]
   12094:	mov	r1, r0
   12098:	mov	r0, #1
   1209c:	bl	11098 <__printf_chk@plt>
   120a0:	mov	r2, #5
   120a4:	ldr	r1, [pc, #656]	; 1233c <__assert_fail@plt+0x1190>
   120a8:	mov	r0, r5
   120ac:	bl	10f54 <dcgettext@plt>
   120b0:	ldr	r1, [r7]
   120b4:	bl	10ed0 <fputs_unlocked@plt>
   120b8:	mov	r2, #5
   120bc:	ldr	r1, [pc, #636]	; 12340 <__assert_fail@plt+0x1194>
   120c0:	mov	r0, r5
   120c4:	bl	10f54 <dcgettext@plt>
   120c8:	ldr	r1, [r7]
   120cc:	bl	10ed0 <fputs_unlocked@plt>
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #616]	; 12344 <__assert_fail@plt+0x1198>
   120d8:	mov	r0, r5
   120dc:	bl	10f54 <dcgettext@plt>
   120e0:	ldr	r1, [r7]
   120e4:	bl	10ed0 <fputs_unlocked@plt>
   120e8:	mov	r2, #5
   120ec:	ldr	r1, [pc, #596]	; 12348 <__assert_fail@plt+0x119c>
   120f0:	mov	r0, r5
   120f4:	bl	10f54 <dcgettext@plt>
   120f8:	ldr	r1, [r7]
   120fc:	bl	10ed0 <fputs_unlocked@plt>
   12100:	mov	r2, #5
   12104:	ldr	r1, [pc, #576]	; 1234c <__assert_fail@plt+0x11a0>
   12108:	mov	r0, r5
   1210c:	bl	10f54 <dcgettext@plt>
   12110:	ldr	r1, [r7]
   12114:	bl	10ed0 <fputs_unlocked@plt>
   12118:	mov	r2, #5
   1211c:	ldr	r1, [pc, #556]	; 12350 <__assert_fail@plt+0x11a4>
   12120:	mov	r0, r5
   12124:	bl	10f54 <dcgettext@plt>
   12128:	ldr	r1, [r7]
   1212c:	bl	10ed0 <fputs_unlocked@plt>
   12130:	mov	r2, #5
   12134:	ldr	r1, [pc, #536]	; 12354 <__assert_fail@plt+0x11a8>
   12138:	mov	r0, r5
   1213c:	bl	10f54 <dcgettext@plt>
   12140:	ldr	r1, [r7]
   12144:	bl	10ed0 <fputs_unlocked@plt>
   12148:	mov	r2, #5
   1214c:	ldr	r1, [pc, #516]	; 12358 <__assert_fail@plt+0x11ac>
   12150:	mov	r0, r5
   12154:	bl	10f54 <dcgettext@plt>
   12158:	ldr	r1, [r7]
   1215c:	bl	10ed0 <fputs_unlocked@plt>
   12160:	ldm	r4!, {r0, r1, r2, r3}
   12164:	add	lr, sp, #8
   12168:	stmia	lr!, {r0, r1, r2, r3}
   1216c:	ldm	r4!, {r0, r1, r2, r3}
   12170:	ldr	ip, [sp, #8]
   12174:	stmia	lr!, {r0, r1, r2, r3}
   12178:	cmp	ip, #0
   1217c:	ldm	r4!, {r0, r1, r2, r3}
   12180:	stmia	lr!, {r0, r1, r2, r3}
   12184:	ldm	r4, {r0, r1}
   12188:	addeq	r4, sp, #8
   1218c:	stm	lr, {r0, r1}
   12190:	beq	121c0 <__assert_fail@plt+0x1014>
   12194:	ldr	r6, [pc, #448]	; 1235c <__assert_fail@plt+0x11b0>
   12198:	add	r4, sp, #8
   1219c:	b	121ac <__assert_fail@plt+0x1000>
   121a0:	ldr	ip, [r4, #8]!
   121a4:	cmp	ip, #0
   121a8:	beq	121c0 <__assert_fail@plt+0x1014>
   121ac:	mov	r1, ip
   121b0:	mov	r0, r6
   121b4:	bl	10ee8 <strcmp@plt>
   121b8:	cmp	r0, #0
   121bc:	bne	121a0 <__assert_fail@plt+0xff4>
   121c0:	ldr	r4, [r4, #4]
   121c4:	mov	r2, #5
   121c8:	cmp	r4, #0
   121cc:	ldr	r1, [pc, #396]	; 12360 <__assert_fail@plt+0x11b4>
   121d0:	beq	12278 <__assert_fail@plt+0x10cc>
   121d4:	mov	r0, #0
   121d8:	bl	10f54 <dcgettext@plt>
   121dc:	ldr	r3, [pc, #384]	; 12364 <__assert_fail@plt+0x11b8>
   121e0:	ldr	r2, [pc, #384]	; 12368 <__assert_fail@plt+0x11bc>
   121e4:	mov	r1, r0
   121e8:	mov	r0, #1
   121ec:	bl	11098 <__printf_chk@plt>
   121f0:	mov	r1, #0
   121f4:	mov	r0, #5
   121f8:	bl	110e0 <setlocale@plt>
   121fc:	cmp	r0, #0
   12200:	ldreq	r6, [pc, #340]	; 1235c <__assert_fail@plt+0x11b0>
   12204:	beq	12220 <__assert_fail@plt+0x1074>
   12208:	mov	r2, #3
   1220c:	ldr	r1, [pc, #344]	; 1236c <__assert_fail@plt+0x11c0>
   12210:	bl	11170 <strncmp@plt>
   12214:	ldr	r6, [pc, #320]	; 1235c <__assert_fail@plt+0x11b0>
   12218:	cmp	r0, #0
   1221c:	bne	12308 <__assert_fail@plt+0x115c>
   12220:	mov	r2, #5
   12224:	ldr	r1, [pc, #324]	; 12370 <__assert_fail@plt+0x11c4>
   12228:	mov	r0, #0
   1222c:	bl	10f54 <dcgettext@plt>
   12230:	ldr	r3, [pc, #292]	; 1235c <__assert_fail@plt+0x11b0>
   12234:	ldr	r2, [pc, #296]	; 12364 <__assert_fail@plt+0x11b8>
   12238:	mov	r1, r0
   1223c:	mov	r0, #1
   12240:	bl	11098 <__printf_chk@plt>
   12244:	mov	r2, #5
   12248:	ldr	r1, [pc, #292]	; 12374 <__assert_fail@plt+0x11c8>
   1224c:	mov	r0, #0
   12250:	bl	10f54 <dcgettext@plt>
   12254:	ldr	r2, [pc, #284]	; 12378 <__assert_fail@plt+0x11cc>
   12258:	cmp	r4, r6
   1225c:	ldr	r3, [pc, #280]	; 1237c <__assert_fail@plt+0x11d0>
   12260:	movne	r3, r2
   12264:	mov	r1, r0
   12268:	mov	r2, r4
   1226c:	mov	r0, #1
   12270:	bl	11098 <__printf_chk@plt>
   12274:	b	12068 <__assert_fail@plt+0xebc>
   12278:	mov	r0, r4
   1227c:	bl	10f54 <dcgettext@plt>
   12280:	ldr	r3, [pc, #220]	; 12364 <__assert_fail@plt+0x11b8>
   12284:	ldr	r2, [pc, #220]	; 12368 <__assert_fail@plt+0x11bc>
   12288:	mov	r1, r0
   1228c:	mov	r0, #1
   12290:	bl	11098 <__printf_chk@plt>
   12294:	mov	r1, r4
   12298:	mov	r0, #5
   1229c:	bl	110e0 <setlocale@plt>
   122a0:	cmp	r0, #0
   122a4:	beq	122bc <__assert_fail@plt+0x1110>
   122a8:	mov	r2, #3
   122ac:	ldr	r1, [pc, #184]	; 1236c <__assert_fail@plt+0x11c0>
   122b0:	bl	11170 <strncmp@plt>
   122b4:	cmp	r0, #0
   122b8:	bne	12300 <__assert_fail@plt+0x1154>
   122bc:	mov	r2, #5
   122c0:	ldr	r1, [pc, #168]	; 12370 <__assert_fail@plt+0x11c4>
   122c4:	mov	r0, #0
   122c8:	bl	10f54 <dcgettext@plt>
   122cc:	ldr	r3, [pc, #136]	; 1235c <__assert_fail@plt+0x11b0>
   122d0:	ldr	r2, [pc, #140]	; 12364 <__assert_fail@plt+0x11b8>
   122d4:	mov	r4, r3
   122d8:	mov	r1, r0
   122dc:	mov	r0, #1
   122e0:	bl	11098 <__printf_chk@plt>
   122e4:	ldr	r1, [pc, #136]	; 12374 <__assert_fail@plt+0x11c8>
   122e8:	mov	r2, #5
   122ec:	mov	r0, #0
   122f0:	bl	10f54 <dcgettext@plt>
   122f4:	ldr	r3, [pc, #128]	; 1237c <__assert_fail@plt+0x11d0>
   122f8:	mov	r1, r0
   122fc:	b	12268 <__assert_fail@plt+0x10bc>
   12300:	ldr	r6, [pc, #84]	; 1235c <__assert_fail@plt+0x11b0>
   12304:	mov	r4, r6
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #108]	; 12380 <__assert_fail@plt+0x11d4>
   12310:	mov	r0, #0
   12314:	bl	10f54 <dcgettext@plt>
   12318:	ldr	r1, [r7]
   1231c:	bl	10ed0 <fputs_unlocked@plt>
   12320:	b	12220 <__assert_fail@plt+0x1074>
   12324:	andeq	lr, r2, r8, ror r1
   12328:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   1232c:			; <UNDEFINED> instruction: 0x0002e1b0
   12330:	andeq	ip, r1, r4, asr #31
   12334:	andeq	lr, r2, ip, ror r1
   12338:	andeq	ip, r1, ip, lsr #29
   1233c:	andeq	sp, r1, ip, asr #32
   12340:	strheq	sp, [r1], -r8
   12344:	andeq	sp, r1, r4, lsl #3
   12348:	andeq	sp, r1, r4, lsl #4
   1234c:	andeq	sp, r1, r8, asr #4
   12350:	andeq	sp, r1, ip, lsl #5
   12354:			; <UNDEFINED> instruction: 0x0001d2bc
   12358:	strdeq	sp, [r1], -r4
   1235c:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   12360:	andeq	sp, r1, r0, asr #6
   12364:	andeq	sp, r1, r8, asr r3
   12368:	andeq	sp, r1, r0, lsl #7
   1236c:	muleq	r1, r0, r3
   12370:	ldrdeq	sp, [r1], -ip
   12374:	strdeq	sp, [r1], -r8
   12378:	strheq	sp, [r1], -r4
   1237c:	andeq	sp, r1, r0, ror #16
   12380:	muleq	r1, r4, r3
   12384:	ldr	r3, [pc, #4]	; 12390 <__assert_fail@plt+0x11e4>
   12388:	str	r0, [r3]
   1238c:	bx	lr
   12390:	andeq	lr, r2, r8, lsr #3
   12394:	ldr	r3, [pc, #4]	; 123a0 <__assert_fail@plt+0x11f4>
   12398:	strb	r0, [r3, #4]
   1239c:	bx	lr
   123a0:	andeq	lr, r2, r8, lsr #3
   123a4:	ldr	r3, [pc, #192]	; 1246c <__assert_fail@plt+0x12c0>
   123a8:	push	{r4, r5, r6, lr}
   123ac:	sub	sp, sp, #8
   123b0:	ldr	r0, [r3]
   123b4:	bl	1c120 <__assert_fail@plt+0xaf74>
   123b8:	cmp	r0, #0
   123bc:	beq	123e0 <__assert_fail@plt+0x1234>
   123c0:	ldr	r4, [pc, #168]	; 12470 <__assert_fail@plt+0x12c4>
   123c4:	ldrb	r3, [r4, #4]
   123c8:	cmp	r3, #0
   123cc:	beq	123fc <__assert_fail@plt+0x1250>
   123d0:	bl	11068 <__errno_location@plt>
   123d4:	ldr	r3, [r0]
   123d8:	cmp	r3, #32
   123dc:	bne	123fc <__assert_fail@plt+0x1250>
   123e0:	ldr	r3, [pc, #140]	; 12474 <__assert_fail@plt+0x12c8>
   123e4:	ldr	r0, [r3]
   123e8:	bl	1c120 <__assert_fail@plt+0xaf74>
   123ec:	cmp	r0, #0
   123f0:	bne	12444 <__assert_fail@plt+0x1298>
   123f4:	add	sp, sp, #8
   123f8:	pop	{r4, r5, r6, pc}
   123fc:	mov	r2, #5
   12400:	ldr	r1, [pc, #112]	; 12478 <__assert_fail@plt+0x12cc>
   12404:	mov	r0, #0
   12408:	bl	10f54 <dcgettext@plt>
   1240c:	ldr	r4, [r4]
   12410:	cmp	r4, #0
   12414:	mov	r5, r0
   12418:	beq	12450 <__assert_fail@plt+0x12a4>
   1241c:	bl	11068 <__errno_location@plt>
   12420:	ldr	r6, [r0]
   12424:	mov	r0, r4
   12428:	bl	19aa0 <__assert_fail@plt+0x88f4>
   1242c:	mov	r1, r6
   12430:	str	r5, [sp]
   12434:	ldr	r2, [pc, #64]	; 1247c <__assert_fail@plt+0x12d0>
   12438:	mov	r3, r0
   1243c:	mov	r0, #0
   12440:	bl	10fd8 <error@plt>
   12444:	ldr	r3, [pc, #52]	; 12480 <__assert_fail@plt+0x12d4>
   12448:	ldr	r0, [r3]
   1244c:	bl	10f18 <_exit@plt>
   12450:	bl	11068 <__errno_location@plt>
   12454:	mov	r3, r5
   12458:	ldr	r2, [pc, #36]	; 12484 <__assert_fail@plt+0x12d8>
   1245c:	ldr	r1, [r0]
   12460:	mov	r0, r4
   12464:	bl	10fd8 <error@plt>
   12468:	b	12444 <__assert_fail@plt+0x1298>
   1246c:	andeq	lr, r2, ip, ror r1
   12470:	andeq	lr, r2, r8, lsr #3
   12474:	andeq	lr, r2, r8, ror r1
   12478:	andeq	sp, r1, r0, asr #18
   1247c:	andeq	sp, r1, ip, asr #18
   12480:	andeq	lr, r2, r0, lsr #2
   12484:	andeq	sp, r1, r0, asr r9
   12488:	cmp	r3, #256	; 0x100
   1248c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12490:	mov	r6, r2
   12494:	sub	sp, sp, #144	; 0x90
   12498:	mov	r7, r0
   1249c:	mov	r8, r1
   124a0:	movne	r4, r3
   124a4:	beq	124cc <__assert_fail@plt+0x1320>
   124a8:	mov	r3, r4
   124ac:	mov	r2, r6
   124b0:	mov	r1, r8
   124b4:	mov	r0, r7
   124b8:	bl	1105c <fchmodat@plt>
   124bc:	mov	r5, r0
   124c0:	mov	r0, r5
   124c4:	add	sp, sp, #144	; 0x90
   124c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   124cc:	mov	r2, #2654208	; 0x288000
   124d0:	bl	11050 <openat64@plt>
   124d4:	subs	r5, r0, #0
   124d8:	blt	124c0 <__assert_fail@plt+0x1314>
   124dc:	mov	r3, #4096	; 0x1000
   124e0:	str	r3, [sp]
   124e4:	ldr	r2, [pc, #188]	; 125a8 <__assert_fail@plt+0x13fc>
   124e8:	add	r3, sp, #40	; 0x28
   124ec:	mov	r1, r5
   124f0:	mov	r0, #3
   124f4:	bl	10f78 <__fxstatat64@plt>
   124f8:	subs	r4, r0, #0
   124fc:	bne	1256c <__assert_fail@plt+0x13c0>
   12500:	ldr	r3, [sp, #56]	; 0x38
   12504:	and	r3, r3, #61440	; 0xf000
   12508:	cmp	r3, #40960	; 0xa000
   1250c:	beq	1258c <__assert_fail@plt+0x13e0>
   12510:	ldr	r3, [pc, #148]	; 125ac <__assert_fail@plt+0x1400>
   12514:	mov	r2, #26
   12518:	str	r5, [sp]
   1251c:	mov	r1, #1
   12520:	add	r0, sp, #12
   12524:	bl	11074 <__sprintf_chk@plt>
   12528:	mov	r1, r6
   1252c:	add	r0, sp, #12
   12530:	bl	11158 <chmod@plt>
   12534:	mov	r9, r0
   12538:	bl	11068 <__errno_location@plt>
   1253c:	mov	sl, r0
   12540:	mov	r0, r5
   12544:	ldr	r5, [sl]
   12548:	bl	11188 <close@plt>
   1254c:	cmp	r9, #0
   12550:	moveq	r5, r9
   12554:	beq	124c0 <__assert_fail@plt+0x1314>
   12558:	cmp	r5, #2
   1255c:	beq	124a8 <__assert_fail@plt+0x12fc>
   12560:	str	r5, [sl]
   12564:	mov	r5, r9
   12568:	b	124c0 <__assert_fail@plt+0x1314>
   1256c:	bl	11068 <__errno_location@plt>
   12570:	mov	r4, r0
   12574:	mov	r0, r5
   12578:	ldr	r6, [r4]
   1257c:	mvn	r5, #0
   12580:	bl	11188 <close@plt>
   12584:	str	r6, [r4]
   12588:	b	124c0 <__assert_fail@plt+0x1314>
   1258c:	mov	r0, r5
   12590:	bl	11188 <close@plt>
   12594:	bl	11068 <__errno_location@plt>
   12598:	mov	r3, #95	; 0x5f
   1259c:	mvn	r5, #0
   125a0:	str	r3, [r0]
   125a4:	b	124c0 <__assert_fail@plt+0x1314>
   125a8:	strheq	sp, [r1], -r4
   125ac:	andeq	sp, r1, r4, asr r9
   125b0:	and	r3, r0, #61440	; 0xf000
   125b4:	cmp	r3, #32768	; 0x8000
   125b8:	moveq	r3, #45	; 0x2d
   125bc:	beq	12608 <__assert_fail@plt+0x145c>
   125c0:	cmp	r3, #16384	; 0x4000
   125c4:	moveq	r3, #100	; 0x64
   125c8:	beq	12608 <__assert_fail@plt+0x145c>
   125cc:	cmp	r3, #24576	; 0x6000
   125d0:	moveq	r3, #98	; 0x62
   125d4:	beq	12608 <__assert_fail@plt+0x145c>
   125d8:	cmp	r3, #8192	; 0x2000
   125dc:	moveq	r3, #99	; 0x63
   125e0:	beq	12608 <__assert_fail@plt+0x145c>
   125e4:	cmp	r3, #40960	; 0xa000
   125e8:	moveq	r3, #108	; 0x6c
   125ec:	beq	12608 <__assert_fail@plt+0x145c>
   125f0:	cmp	r3, #4096	; 0x1000
   125f4:	moveq	r3, #112	; 0x70
   125f8:	beq	12608 <__assert_fail@plt+0x145c>
   125fc:	cmp	r3, #49152	; 0xc000
   12600:	moveq	r3, #115	; 0x73
   12604:	movne	r3, #63	; 0x3f
   12608:	tst	r0, #256	; 0x100
   1260c:	movne	ip, #114	; 0x72
   12610:	moveq	ip, #45	; 0x2d
   12614:	tst	r0, #128	; 0x80
   12618:	movne	r2, #119	; 0x77
   1261c:	moveq	r2, #45	; 0x2d
   12620:	tst	r0, #2048	; 0x800
   12624:	strb	r3, [r1]
   12628:	strb	ip, [r1, #1]
   1262c:	strb	r2, [r1, #2]
   12630:	beq	126c8 <__assert_fail@plt+0x151c>
   12634:	tst	r0, #64	; 0x40
   12638:	movne	ip, #115	; 0x73
   1263c:	moveq	ip, #83	; 0x53
   12640:	tst	r0, #32
   12644:	movne	r2, #114	; 0x72
   12648:	moveq	r2, #45	; 0x2d
   1264c:	tst	r0, #16
   12650:	movne	r3, #119	; 0x77
   12654:	moveq	r3, #45	; 0x2d
   12658:	tst	r0, #1024	; 0x400
   1265c:	strb	ip, [r1, #3]
   12660:	strb	r2, [r1, #4]
   12664:	strb	r3, [r1, #5]
   12668:	beq	126e8 <__assert_fail@plt+0x153c>
   1266c:	tst	r0, #8
   12670:	movne	ip, #115	; 0x73
   12674:	moveq	ip, #83	; 0x53
   12678:	tst	r0, #4
   1267c:	movne	r2, #114	; 0x72
   12680:	moveq	r2, #45	; 0x2d
   12684:	tst	r0, #2
   12688:	movne	r3, #119	; 0x77
   1268c:	moveq	r3, #45	; 0x2d
   12690:	tst	r0, #512	; 0x200
   12694:	strb	ip, [r1, #6]
   12698:	strb	r2, [r1, #7]
   1269c:	strb	r3, [r1, #8]
   126a0:	beq	126d8 <__assert_fail@plt+0x152c>
   126a4:	tst	r0, #1
   126a8:	movne	r0, #116	; 0x74
   126ac:	moveq	r0, #84	; 0x54
   126b0:	mov	r2, #32
   126b4:	mov	r3, #0
   126b8:	strb	r0, [r1, #9]
   126bc:	strb	r2, [r1, #10]
   126c0:	strb	r3, [r1, #11]
   126c4:	bx	lr
   126c8:	tst	r0, #64	; 0x40
   126cc:	movne	ip, #120	; 0x78
   126d0:	moveq	ip, #45	; 0x2d
   126d4:	b	12640 <__assert_fail@plt+0x1494>
   126d8:	tst	r0, #1
   126dc:	movne	r0, #120	; 0x78
   126e0:	moveq	r0, #45	; 0x2d
   126e4:	b	126b0 <__assert_fail@plt+0x1504>
   126e8:	tst	r0, #8
   126ec:	movne	ip, #120	; 0x78
   126f0:	moveq	ip, #45	; 0x2d
   126f4:	b	12678 <__assert_fail@plt+0x14cc>
   126f8:	ldr	r3, [r0, #16]
   126fc:	and	r2, r3, #61440	; 0xf000
   12700:	cmp	r2, #32768	; 0x8000
   12704:	moveq	r2, #45	; 0x2d
   12708:	beq	12754 <__assert_fail@plt+0x15a8>
   1270c:	cmp	r2, #16384	; 0x4000
   12710:	moveq	r2, #100	; 0x64
   12714:	beq	12754 <__assert_fail@plt+0x15a8>
   12718:	cmp	r2, #24576	; 0x6000
   1271c:	moveq	r2, #98	; 0x62
   12720:	beq	12754 <__assert_fail@plt+0x15a8>
   12724:	cmp	r2, #8192	; 0x2000
   12728:	moveq	r2, #99	; 0x63
   1272c:	beq	12754 <__assert_fail@plt+0x15a8>
   12730:	cmp	r2, #40960	; 0xa000
   12734:	moveq	r2, #108	; 0x6c
   12738:	beq	12754 <__assert_fail@plt+0x15a8>
   1273c:	cmp	r2, #4096	; 0x1000
   12740:	moveq	r2, #112	; 0x70
   12744:	beq	12754 <__assert_fail@plt+0x15a8>
   12748:	cmp	r2, #49152	; 0xc000
   1274c:	moveq	r2, #115	; 0x73
   12750:	movne	r2, #63	; 0x3f
   12754:	tst	r3, #256	; 0x100
   12758:	movne	ip, #114	; 0x72
   1275c:	moveq	ip, #45	; 0x2d
   12760:	tst	r3, #128	; 0x80
   12764:	movne	r0, #119	; 0x77
   12768:	moveq	r0, #45	; 0x2d
   1276c:	tst	r3, #2048	; 0x800
   12770:	strb	r2, [r1]
   12774:	strb	ip, [r1, #1]
   12778:	strb	r0, [r1, #2]
   1277c:	beq	12814 <__assert_fail@plt+0x1668>
   12780:	tst	r3, #64	; 0x40
   12784:	movne	ip, #115	; 0x73
   12788:	moveq	ip, #83	; 0x53
   1278c:	tst	r3, #32
   12790:	movne	r0, #114	; 0x72
   12794:	moveq	r0, #45	; 0x2d
   12798:	tst	r3, #16
   1279c:	movne	r2, #119	; 0x77
   127a0:	moveq	r2, #45	; 0x2d
   127a4:	tst	r3, #1024	; 0x400
   127a8:	strb	ip, [r1, #3]
   127ac:	strb	r0, [r1, #4]
   127b0:	strb	r2, [r1, #5]
   127b4:	beq	12834 <__assert_fail@plt+0x1688>
   127b8:	tst	r3, #8
   127bc:	movne	ip, #115	; 0x73
   127c0:	moveq	ip, #83	; 0x53
   127c4:	tst	r3, #4
   127c8:	movne	r0, #114	; 0x72
   127cc:	moveq	r0, #45	; 0x2d
   127d0:	tst	r3, #2
   127d4:	movne	r2, #119	; 0x77
   127d8:	moveq	r2, #45	; 0x2d
   127dc:	tst	r3, #512	; 0x200
   127e0:	strb	ip, [r1, #6]
   127e4:	strb	r0, [r1, #7]
   127e8:	strb	r2, [r1, #8]
   127ec:	beq	12824 <__assert_fail@plt+0x1678>
   127f0:	tst	r3, #1
   127f4:	movne	r0, #116	; 0x74
   127f8:	moveq	r0, #84	; 0x54
   127fc:	mov	r2, #32
   12800:	mov	r3, #0
   12804:	strb	r0, [r1, #9]
   12808:	strb	r2, [r1, #10]
   1280c:	strb	r3, [r1, #11]
   12810:	bx	lr
   12814:	tst	r3, #64	; 0x40
   12818:	movne	ip, #120	; 0x78
   1281c:	moveq	ip, #45	; 0x2d
   12820:	b	1278c <__assert_fail@plt+0x15e0>
   12824:	tst	r3, #1
   12828:	movne	r0, #120	; 0x78
   1282c:	moveq	r0, #45	; 0x2d
   12830:	b	127fc <__assert_fail@plt+0x1650>
   12834:	tst	r3, #8
   12838:	movne	ip, #120	; 0x78
   1283c:	moveq	ip, #45	; 0x2d
   12840:	b	127c4 <__assert_fail@plt+0x1618>
   12844:	ldrd	r2, [r1, #8]
   12848:	push	{r4, r5}
   1284c:	ldrd	r4, [r0, #8]
   12850:	cmp	r5, r3
   12854:	cmpeq	r4, r2
   12858:	movne	r0, #0
   1285c:	beq	12868 <__assert_fail@plt+0x16bc>
   12860:	pop	{r4, r5}
   12864:	bx	lr
   12868:	ldrd	r4, [r0]
   1286c:	ldrd	r2, [r1]
   12870:	cmp	r5, r3
   12874:	cmpeq	r4, r2
   12878:	moveq	r0, #1
   1287c:	movne	r0, #0
   12880:	pop	{r4, r5}
   12884:	bx	lr
   12888:	push	{r4, lr}
   1288c:	mov	r2, r1
   12890:	mov	r3, #0
   12894:	ldrd	r0, [r0, #8]
   12898:	bl	1ccb0 <__assert_fail@plt+0xbb04>
   1289c:	mov	r0, r2
   128a0:	pop	{r4, pc}
   128a4:	push	{r4, lr}
   128a8:	mov	r2, r1
   128ac:	mov	r3, #0
   128b0:	ldrd	r0, [r0]
   128b4:	bl	1ccb0 <__assert_fail@plt+0xbb04>
   128b8:	mov	r0, r2
   128bc:	pop	{r4, pc}
   128c0:	push	{r4, r5}
   128c4:	ldrd	r2, [r1]
   128c8:	ldrd	r4, [r0]
   128cc:	cmp	r5, r3
   128d0:	cmpeq	r4, r2
   128d4:	moveq	r0, #1
   128d8:	movne	r0, #0
   128dc:	pop	{r4, r5}
   128e0:	bx	lr
   128e4:	ldr	r2, [r0]
   128e8:	ldr	r3, [r1]
   128ec:	ldrd	r0, [r2, #160]	; 0xa0
   128f0:	ldrd	r2, [r3, #160]	; 0xa0
   128f4:	cmp	r1, r3
   128f8:	cmpeq	r0, r2
   128fc:	movhi	r0, #1
   12900:	movls	r0, #0
   12904:	movcc	r3, #1
   12908:	movcs	r3, #0
   1290c:	sub	r0, r0, r3
   12910:	bx	lr
   12914:	push	{r4, r5, r6, r7, lr}
   12918:	sub	sp, sp, #100	; 0x64
   1291c:	ldr	r4, [r0, #44]	; 0x2c
   12920:	ldr	r3, [r4, #48]	; 0x30
   12924:	tst	r3, #512	; 0x200
   12928:	beq	1299c <__assert_fail@plt+0x17f0>
   1292c:	ldr	r6, [r4, #52]	; 0x34
   12930:	mov	r7, r1
   12934:	cmp	r6, #0
   12938:	mov	r5, r0
   1293c:	beq	12968 <__assert_fail@plt+0x17bc>
   12940:	ldrd	r2, [r5, #64]	; 0x40
   12944:	add	r1, sp, #96	; 0x60
   12948:	mov	r0, r6
   1294c:	strd	r2, [r1, #-88]!	; 0xffffffa8
   12950:	bl	153d0 <__assert_fail@plt+0x4224>
   12954:	cmp	r0, #0
   12958:	beq	12994 <__assert_fail@plt+0x17e8>
   1295c:	ldr	r0, [r0, #8]
   12960:	add	sp, sp, #100	; 0x64
   12964:	pop	{r4, r5, r6, r7, pc}
   12968:	ldr	r3, [pc, #168]	; 12a18 <__assert_fail@plt+0x186c>
   1296c:	mov	r1, r6
   12970:	str	r3, [sp]
   12974:	ldr	r2, [pc, #160]	; 12a1c <__assert_fail@plt+0x1870>
   12978:	ldr	r3, [pc, #160]	; 12a20 <__assert_fail@plt+0x1874>
   1297c:	mov	r0, #13
   12980:	bl	156b0 <__assert_fail@plt+0x4504>
   12984:	cmp	r0, #0
   12988:	mov	r6, r0
   1298c:	str	r0, [r4, #52]	; 0x34
   12990:	bne	12940 <__assert_fail@plt+0x1794>
   12994:	cmp	r7, #0
   12998:	bge	129a8 <__assert_fail@plt+0x17fc>
   1299c:	mov	r0, #0
   129a0:	add	sp, sp, #100	; 0x64
   129a4:	pop	{r4, r5, r6, r7, pc}
   129a8:	mov	r0, r7
   129ac:	add	r1, sp, #8
   129b0:	bl	10eb8 <fstatfs64@plt>
   129b4:	cmp	r0, #0
   129b8:	bne	1299c <__assert_fail@plt+0x17f0>
   129bc:	cmp	r6, #0
   129c0:	beq	12a0c <__assert_fail@plt+0x1860>
   129c4:	mov	r0, #16
   129c8:	bl	1c098 <__assert_fail@plt+0xaeec>
   129cc:	subs	r4, r0, #0
   129d0:	beq	12a0c <__assert_fail@plt+0x1860>
   129d4:	ldrd	r2, [r5, #64]	; 0x40
   129d8:	ldr	r1, [sp, #8]
   129dc:	mov	r0, r6
   129e0:	str	r1, [r4, #8]
   129e4:	strd	r2, [r4]
   129e8:	mov	r1, r4
   129ec:	bl	16018 <__assert_fail@plt+0x4e6c>
   129f0:	cmp	r0, #0
   129f4:	beq	12a04 <__assert_fail@plt+0x1858>
   129f8:	cmp	r4, r0
   129fc:	beq	12a0c <__assert_fail@plt+0x1860>
   12a00:	bl	1117c <abort@plt>
   12a04:	mov	r0, r4
   12a08:	bl	1c598 <__assert_fail@plt+0xb3ec>
   12a0c:	ldr	r0, [sp, #8]
   12a10:	add	sp, sp, #100	; 0x64
   12a14:	pop	{r4, r5, r6, r7, pc}
   12a18:	muleq	r1, r8, r5
   12a1c:	andeq	r2, r1, r4, lsr #17
   12a20:	andeq	r2, r1, r0, asr #17
   12a24:	push	{r4, r5, r6, lr}
   12a28:	mov	r4, r2
   12a2c:	ldr	r2, [r2, #48]	; 0x30
   12a30:	sub	sp, sp, #8
   12a34:	cmp	r2, #0
   12a38:	add	r5, r4, #64	; 0x40
   12a3c:	bne	12a94 <__assert_fail@plt+0x18e8>
   12a40:	tst	r1, #1
   12a44:	beq	12a94 <__assert_fail@plt+0x18e8>
   12a48:	mov	r2, r5
   12a4c:	ldr	r1, [r4, #24]
   12a50:	mov	r0, #3
   12a54:	bl	11164 <__xstat64@plt>
   12a58:	cmp	r0, #0
   12a5c:	beq	12ad0 <__assert_fail@plt+0x1924>
   12a60:	bl	11068 <__errno_location@plt>
   12a64:	ldr	r3, [r0]
   12a68:	mov	r6, r0
   12a6c:	cmp	r3, #2
   12a70:	beq	12b48 <__assert_fail@plt+0x199c>
   12a74:	str	r3, [r4, #32]
   12a78:	mov	r0, r5
   12a7c:	mov	r2, #104	; 0x68
   12a80:	mov	r1, #0
   12a84:	bl	1108c <memset@plt>
   12a88:	mov	r0, #10
   12a8c:	add	sp, sp, #8
   12a90:	pop	{r4, r5, r6, pc}
   12a94:	lsl	r1, r1, #30
   12a98:	orrs	r3, r3, r1, lsr #31
   12a9c:	bne	12a48 <__assert_fail@plt+0x189c>
   12aa0:	mov	r3, #256	; 0x100
   12aa4:	ldr	r2, [r4, #24]
   12aa8:	mov	r1, r0
   12aac:	str	r3, [sp]
   12ab0:	mov	r0, #3
   12ab4:	mov	r3, r5
   12ab8:	bl	10f78 <__fxstatat64@plt>
   12abc:	cmp	r0, #0
   12ac0:	beq	12ad0 <__assert_fail@plt+0x1924>
   12ac4:	bl	11068 <__errno_location@plt>
   12ac8:	ldr	r3, [r0]
   12acc:	b	12a74 <__assert_fail@plt+0x18c8>
   12ad0:	ldr	r0, [r4, #80]	; 0x50
   12ad4:	and	r0, r0, #61440	; 0xf000
   12ad8:	cmp	r0, #16384	; 0x4000
   12adc:	beq	12b00 <__assert_fail@plt+0x1954>
   12ae0:	cmp	r0, #40960	; 0xa000
   12ae4:	moveq	r0, #12
   12ae8:	beq	12a8c <__assert_fail@plt+0x18e0>
   12aec:	cmp	r0, #32768	; 0x8000
   12af0:	movne	r0, #3
   12af4:	moveq	r0, #8
   12af8:	add	sp, sp, #8
   12afc:	pop	{r4, r5, r6, pc}
   12b00:	ldrb	r3, [r4, #168]	; 0xa8
   12b04:	cmp	r3, #46	; 0x2e
   12b08:	beq	12b14 <__assert_fail@plt+0x1968>
   12b0c:	mov	r0, #1
   12b10:	b	12a8c <__assert_fail@plt+0x18e0>
   12b14:	ldrb	r3, [r4, #169]	; 0xa9
   12b18:	cmp	r3, #0
   12b1c:	beq	12b34 <__assert_fail@plt+0x1988>
   12b20:	ldr	r3, [r4, #168]	; 0xa8
   12b24:	bic	r3, r3, #-16777216	; 0xff000000
   12b28:	bic	r3, r3, #255	; 0xff
   12b2c:	cmp	r3, #11776	; 0x2e00
   12b30:	bne	12b0c <__assert_fail@plt+0x1960>
   12b34:	ldr	r0, [r4, #48]	; 0x30
   12b38:	cmp	r0, #0
   12b3c:	movne	r0, #5
   12b40:	moveq	r0, #1
   12b44:	b	12a8c <__assert_fail@plt+0x18e0>
   12b48:	mov	r2, r5
   12b4c:	ldr	r1, [r4, #24]
   12b50:	mov	r0, #3
   12b54:	bl	11194 <__lxstat64@plt>
   12b58:	cmp	r0, #0
   12b5c:	streq	r0, [r6]
   12b60:	moveq	r0, #13
   12b64:	beq	12a8c <__assert_fail@plt+0x18e0>
   12b68:	ldr	r3, [r6]
   12b6c:	b	12a74 <__assert_fail@plt+0x18c8>
   12b70:	ldr	r3, [pc, #172]	; 12c24 <__assert_fail@plt+0x1a78>
   12b74:	push	{r4, r5, lr}
   12b78:	and	r3, r3, r0
   12b7c:	cmp	r3, #0
   12b80:	sub	sp, sp, #28
   12b84:	bne	12bcc <__assert_fail@plt+0x1a20>
   12b88:	ldr	r3, [r2, #4]
   12b8c:	cmp	r3, #0
   12b90:	beq	12bc4 <__assert_fail@plt+0x1a18>
   12b94:	ldr	r0, [r3, #48]	; 0x30
   12b98:	cmp	r0, #0
   12b9c:	blt	12bc4 <__assert_fail@plt+0x1a18>
   12ba0:	ldr	ip, [r1]
   12ba4:	ldrd	r0, [ip, #16]
   12ba8:	orrs	r1, r0, r1
   12bac:	beq	12c20 <__assert_fail@plt+0x1a74>
   12bb0:	ldrd	r4, [ip]
   12bb4:	ldrd	r0, [r2, #160]	; 0xa0
   12bb8:	cmp	r5, r1
   12bbc:	cmpeq	r4, r0
   12bc0:	beq	12bfc <__assert_fail@plt+0x1a50>
   12bc4:	add	sp, sp, #28
   12bc8:	pop	{r4, r5, pc}
   12bcc:	ldrd	r4, [r2, #64]	; 0x40
   12bd0:	ldrd	r2, [r2, #160]	; 0xa0
   12bd4:	ldr	r0, [r1]
   12bd8:	mov	r1, sp
   12bdc:	strd	r4, [sp]
   12be0:	strd	r2, [sp, #8]
   12be4:	bl	162dc <__assert_fail@plt+0x5130>
   12be8:	cmp	r0, #0
   12bec:	beq	12c20 <__assert_fail@plt+0x1a74>
   12bf0:	bl	1c598 <__assert_fail@plt+0xb3ec>
   12bf4:	add	sp, sp, #28
   12bf8:	pop	{r4, r5, pc}
   12bfc:	ldrd	r0, [ip, #8]
   12c00:	ldrd	r4, [r2, #64]	; 0x40
   12c04:	cmp	r1, r5
   12c08:	cmpeq	r0, r4
   12c0c:	ldrdeq	r0, [r3, #64]	; 0x40
   12c10:	ldrdeq	r2, [r3, #160]	; 0xa0
   12c14:	strdeq	r0, [ip, #8]
   12c18:	strdeq	r2, [ip]
   12c1c:	b	12bc4 <__assert_fail@plt+0x1a18>
   12c20:	bl	1117c <abort@plt>
   12c24:	andeq	r0, r0, r2, lsl #2
   12c28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c2c:	subs	sl, r3, #0
   12c30:	sub	sp, sp, #104	; 0x68
   12c34:	mov	r5, r0
   12c38:	mov	r6, r1
   12c3c:	mov	r4, r2
   12c40:	ldr	r9, [r0, #48]	; 0x30
   12c44:	beq	12cc0 <__assert_fail@plt+0x1b14>
   12c48:	ldr	r1, [pc, #612]	; 12eb4 <__assert_fail@plt+0x1d08>
   12c4c:	mov	r0, sl
   12c50:	bl	10ee8 <strcmp@plt>
   12c54:	cmp	r0, #0
   12c58:	bne	12cc0 <__assert_fail@plt+0x1b14>
   12c5c:	tst	r9, #4
   12c60:	bne	12cc8 <__assert_fail@plt+0x1b1c>
   12c64:	cmp	r4, #0
   12c68:	bge	12ea0 <__assert_fail@plt+0x1cf4>
   12c6c:	tst	r9, #512	; 0x200
   12c70:	beq	12db4 <__assert_fail@plt+0x1c08>
   12c74:	add	r7, r5, #60	; 0x3c
   12c78:	mov	r0, r7
   12c7c:	bl	167e8 <__assert_fail@plt+0x563c>
   12c80:	cmp	r0, #0
   12c84:	beq	12e30 <__assert_fail@plt+0x1c84>
   12c88:	ldr	r2, [pc, #552]	; 12eb8 <__assert_fail@plt+0x1d0c>
   12c8c:	tst	r9, #16
   12c90:	ldr	r1, [pc, #548]	; 12ebc <__assert_fail@plt+0x1d10>
   12c94:	mov	r8, #1
   12c98:	movne	r1, r2
   12c9c:	mov	r2, r1
   12ca0:	ldr	r0, [r5, #32]
   12ca4:	mov	r1, sl
   12ca8:	bl	16da8 <__assert_fail@plt+0x5bfc>
   12cac:	mov	r7, r0
   12cb0:	cmp	r7, #0
   12cb4:	blt	12e74 <__assert_fail@plt+0x1cc8>
   12cb8:	ldr	r9, [r5, #48]	; 0x30
   12cbc:	b	12cfc <__assert_fail@plt+0x1b50>
   12cc0:	ands	r8, r9, #4
   12cc4:	beq	12cf0 <__assert_fail@plt+0x1b44>
   12cc8:	mvn	r3, r4
   12ccc:	lsr	r3, r3, #31
   12cd0:	ands	r9, r3, r9, lsr #9
   12cd4:	beq	12ce4 <__assert_fail@plt+0x1b38>
   12cd8:	mov	r0, r4
   12cdc:	bl	11188 <close@plt>
   12ce0:	mov	r9, #0
   12ce4:	mov	r0, r9
   12ce8:	add	sp, sp, #104	; 0x68
   12cec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12cf0:	cmp	r4, #0
   12cf4:	movge	r7, r4
   12cf8:	blt	12e80 <__assert_fail@plt+0x1cd4>
   12cfc:	tst	r9, #2
   12d00:	bne	12d20 <__assert_fail@plt+0x1b74>
   12d04:	cmp	sl, #0
   12d08:	beq	12d78 <__assert_fail@plt+0x1bcc>
   12d0c:	mov	r0, sl
   12d10:	ldr	r1, [pc, #412]	; 12eb4 <__assert_fail@plt+0x1d08>
   12d14:	bl	10ee8 <strcmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	bne	12d78 <__assert_fail@plt+0x1bcc>
   12d20:	mov	r2, sp
   12d24:	mov	r1, r7
   12d28:	mov	r0, #3
   12d2c:	bl	10f90 <__fxstat64@plt>
   12d30:	cmp	r0, #0
   12d34:	beq	12d90 <__assert_fail@plt+0x1be4>
   12d38:	mvn	r9, #0
   12d3c:	cmp	r4, #0
   12d40:	bge	12ce4 <__assert_fail@plt+0x1b38>
   12d44:	bl	11068 <__errno_location@plt>
   12d48:	mov	r4, r0
   12d4c:	mov	r0, r7
   12d50:	ldr	r5, [r4]
   12d54:	bl	11188 <close@plt>
   12d58:	str	r5, [r4]
   12d5c:	b	12ce4 <__assert_fail@plt+0x1b38>
   12d60:	ldrd	r0, [r6, #160]	; 0xa0
   12d64:	ldrd	r2, [sp, #96]	; 0x60
   12d68:	cmp	r1, r3
   12d6c:	cmpeq	r0, r2
   12d70:	bne	12da4 <__assert_fail@plt+0x1bf8>
   12d74:	ldr	r9, [r5, #48]	; 0x30
   12d78:	tst	r9, #512	; 0x200
   12d7c:	bne	12dd8 <__assert_fail@plt+0x1c2c>
   12d80:	mov	r0, r7
   12d84:	bl	11128 <fchdir@plt>
   12d88:	mov	r9, r0
   12d8c:	b	12d3c <__assert_fail@plt+0x1b90>
   12d90:	ldrd	r0, [r6, #64]	; 0x40
   12d94:	ldrd	r2, [sp]
   12d98:	cmp	r1, r3
   12d9c:	cmpeq	r0, r2
   12da0:	beq	12d60 <__assert_fail@plt+0x1bb4>
   12da4:	bl	11068 <__errno_location@plt>
   12da8:	mov	r3, #2
   12dac:	str	r3, [r0]
   12db0:	b	12d38 <__assert_fail@plt+0x1b8c>
   12db4:	ldr	r2, [pc, #252]	; 12eb8 <__assert_fail@plt+0x1d0c>
   12db8:	tst	r9, #16
   12dbc:	ldr	r1, [pc, #248]	; 12ebc <__assert_fail@plt+0x1d10>
   12dc0:	mov	r8, #1
   12dc4:	movne	r1, r2
   12dc8:	mov	r0, sl
   12dcc:	bl	1c500 <__assert_fail@plt+0xb354>
   12dd0:	mov	r7, r0
   12dd4:	b	12cb0 <__assert_fail@plt+0x1b04>
   12dd8:	ldr	r1, [r5, #32]
   12ddc:	cmn	r1, #100	; 0x64
   12de0:	sub	r3, r7, r1
   12de4:	clz	r3, r3
   12de8:	lsr	r3, r3, #5
   12dec:	moveq	r3, #0
   12df0:	cmp	r3, #0
   12df4:	bne	12e7c <__assert_fail@plt+0x1cd0>
   12df8:	cmp	r8, #0
   12dfc:	beq	12e60 <__assert_fail@plt+0x1cb4>
   12e00:	lsr	r3, r9, #2
   12e04:	eor	r3, r3, #1
   12e08:	cmp	r1, #0
   12e0c:	movlt	r3, #0
   12e10:	andge	r3, r3, #1
   12e14:	cmp	r3, #0
   12e18:	beq	12e24 <__assert_fail@plt+0x1c78>
   12e1c:	mov	r0, r1
   12e20:	bl	11188 <close@plt>
   12e24:	str	r7, [r5, #32]
   12e28:	mov	r9, #0
   12e2c:	b	12ce4 <__assert_fail@plt+0x1b38>
   12e30:	mov	r0, r7
   12e34:	bl	16834 <__assert_fail@plt+0x5688>
   12e38:	ldr	r9, [r5, #48]	; 0x30
   12e3c:	subs	r7, r0, #0
   12e40:	movlt	r8, #1
   12e44:	andlt	r3, r9, #512	; 0x200
   12e48:	blt	12e84 <__assert_fail@plt+0x1cd8>
   12e4c:	tst	r9, #2
   12e50:	mov	r4, r7
   12e54:	mov	r8, #1
   12e58:	beq	12d78 <__assert_fail@plt+0x1bcc>
   12e5c:	b	12d20 <__assert_fail@plt+0x1b74>
   12e60:	add	r0, r5, #60	; 0x3c
   12e64:	bl	167f0 <__assert_fail@plt+0x5644>
   12e68:	cmp	r0, #0
   12e6c:	bge	12e20 <__assert_fail@plt+0x1c74>
   12e70:	b	12e24 <__assert_fail@plt+0x1c78>
   12e74:	mvn	r9, #0
   12e78:	b	12ce4 <__assert_fail@plt+0x1b38>
   12e7c:	bl	1117c <abort@plt>
   12e80:	and	r3, r9, #512	; 0x200
   12e84:	ldr	r2, [pc, #48]	; 12ebc <__assert_fail@plt+0x1d10>
   12e88:	tst	r9, #16
   12e8c:	ldr	r1, [pc, #36]	; 12eb8 <__assert_fail@plt+0x1d0c>
   12e90:	moveq	r1, r2
   12e94:	cmp	r3, #0
   12e98:	bne	12c9c <__assert_fail@plt+0x1af0>
   12e9c:	b	12dc8 <__assert_fail@plt+0x1c1c>
   12ea0:	tst	r9, #2
   12ea4:	mov	r7, r4
   12ea8:	mov	r8, #1
   12eac:	beq	12d0c <__assert_fail@plt+0x1b60>
   12eb0:	b	12d20 <__assert_fail@plt+0x1b74>
   12eb4:	muleq	r1, r8, r9
   12eb8:	andeq	ip, r8, r0, lsl #18
   12ebc:	andeq	r4, r8, r0, lsl #18
   12ec0:	ldr	r3, [r0]
   12ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ec8:	sub	sp, sp, #68	; 0x44
   12ecc:	mov	r6, r0
   12ed0:	str	r3, [sp, #8]
   12ed4:	ldr	r3, [r3, #12]
   12ed8:	str	r1, [sp, #40]	; 0x28
   12edc:	cmp	r3, #0
   12ee0:	str	r3, [sp, #44]	; 0x2c
   12ee4:	beq	134cc <__assert_fail@plt+0x2320>
   12ee8:	mov	r0, r3
   12eec:	bl	1111c <dirfd@plt>
   12ef0:	cmp	r0, #0
   12ef4:	str	r0, [sp, #60]	; 0x3c
   12ef8:	blt	13908 <__assert_fail@plt+0x275c>
   12efc:	ldr	r3, [r6, #44]	; 0x2c
   12f00:	cmp	r3, #0
   12f04:	beq	13b8c <__assert_fail@plt+0x29e0>
   12f08:	mvn	r3, #0
   12f0c:	str	r3, [sp, #24]
   12f10:	ldr	r0, [r6, #48]	; 0x30
   12f14:	ldr	r2, [sp, #8]
   12f18:	mov	r3, #1
   12f1c:	str	r3, [sp, #52]	; 0x34
   12f20:	ldr	r3, [r2, #40]	; 0x28
   12f24:	ldr	r1, [r2, #28]
   12f28:	sub	r2, r3, #1
   12f2c:	ldrb	r1, [r1, r2]
   12f30:	cmp	r1, #47	; 0x2f
   12f34:	moveq	r3, r2
   12f38:	ands	r0, r0, #4
   12f3c:	movne	r0, #47	; 0x2f
   12f40:	ldrne	r2, [r6, #24]
   12f44:	streq	r0, [sp, #32]
   12f48:	addne	r1, r2, r3
   12f4c:	strbne	r0, [r2, r3]
   12f50:	addne	r2, r1, #1
   12f54:	strne	r2, [sp, #32]
   12f58:	ldr	r2, [sp, #8]
   12f5c:	add	r3, r3, #1
   12f60:	ldr	r1, [r6, #36]	; 0x24
   12f64:	ldr	r2, [r2, #48]	; 0x30
   12f68:	mov	r0, r3
   12f6c:	str	r3, [sp, #12]
   12f70:	sub	r1, r1, r0
   12f74:	mov	r3, #0
   12f78:	add	r2, r2, #1
   12f7c:	mov	r7, r3
   12f80:	str	r3, [sp, #48]	; 0x30
   12f84:	str	r1, [sp, #20]
   12f88:	str	r2, [sp, #28]
   12f8c:	str	r3, [sp, #36]	; 0x24
   12f90:	str	r3, [sp]
   12f94:	mov	sl, r3
   12f98:	str	r3, [sp, #16]
   12f9c:	b	13020 <__assert_fail@plt+0x1e74>
   12fa0:	tst	r3, #251	; 0xfb
   12fa4:	beq	13134 <__assert_fail@plt+0x1f88>
   12fa8:	lsr	r2, r1, #4
   12fac:	cmp	r3, #10
   12fb0:	orrne	r2, r2, #1
   12fb4:	tst	r2, #1
   12fb8:	beq	135f8 <__assert_fail@plt+0x244c>
   12fbc:	sub	r3, r3, #1
   12fc0:	mov	r2, #11
   12fc4:	cmp	r3, #11
   12fc8:	strh	r2, [r4, #56]	; 0x38
   12fcc:	bhi	13ba8 <__assert_fail@plt+0x29fc>
   12fd0:	ldr	r2, [pc, #3040]	; 13bb8 <__assert_fail@plt+0x2a0c>
   12fd4:	ldr	r1, [r2, r3, lsl #2]
   12fd8:	mov	r2, #1
   12fdc:	mov	r3, #0
   12fe0:	str	r1, [r4, #80]	; 0x50
   12fe4:	strd	r2, [r4, #112]	; 0x70
   12fe8:	ldr	r3, [sp, #16]
   12fec:	str	r7, [r4, #8]
   12ff0:	cmp	r3, #0
   12ff4:	streq	r4, [sp, #16]
   12ff8:	ldrne	r3, [sp]
   12ffc:	strne	r4, [r3, #8]
   13000:	ldr	r3, [pc, #2996]	; 13bbc <__assert_fail@plt+0x2a10>
   13004:	cmp	sl, r3
   13008:	beq	13284 <__assert_fail@plt+0x20d8>
   1300c:	ldr	r3, [sp, #24]
   13010:	add	sl, sl, #1
   13014:	cmp	r3, sl
   13018:	bls	1339c <__assert_fail@plt+0x21f0>
   1301c:	str	r4, [sp]
   13020:	ldr	r3, [sp, #8]
   13024:	ldr	r4, [r3, #12]
   13028:	cmp	r4, #0
   1302c:	beq	1339c <__assert_fail@plt+0x21f0>
   13030:	bl	11068 <__errno_location@plt>
   13034:	mov	fp, r0
   13038:	mov	r0, r4
   1303c:	str	r7, [fp]
   13040:	bl	11104 <readdir64@plt>
   13044:	subs	r8, r0, #0
   13048:	beq	13798 <__assert_fail@plt+0x25ec>
   1304c:	ldr	r3, [r6, #48]	; 0x30
   13050:	tst	r3, #32
   13054:	bne	13064 <__assert_fail@plt+0x1eb8>
   13058:	ldrb	r3, [r8, #19]
   1305c:	cmp	r3, #46	; 0x2e
   13060:	beq	132e8 <__assert_fail@plt+0x213c>
   13064:	add	r1, r8, #19
   13068:	mov	r0, r1
   1306c:	str	r1, [sp, #4]
   13070:	bl	11044 <strlen@plt>
   13074:	mov	r5, r0
   13078:	add	r0, r0, #176	; 0xb0
   1307c:	bic	r0, r0, #7
   13080:	bl	1c098 <__assert_fail@plt+0xaeec>
   13084:	subs	r4, r0, #0
   13088:	beq	13390 <__assert_fail@plt+0x21e4>
   1308c:	add	r9, r4, #168	; 0xa8
   13090:	ldr	r1, [sp, #4]
   13094:	mov	r2, r5
   13098:	mov	r0, r9
   1309c:	bl	10f24 <memcpy@plt>
   130a0:	ldr	r3, [sp, #20]
   130a4:	add	r1, r4, r5
   130a8:	ldr	r2, [r6, #24]
   130ac:	mov	r0, #196608	; 0x30000
   130b0:	cmp	r3, r5
   130b4:	strb	r7, [r1, #168]	; 0xa8
   130b8:	str	r5, [r4, #52]	; 0x34
   130bc:	str	r6, [r4, #44]	; 0x2c
   130c0:	str	r7, [r4, #32]
   130c4:	str	r7, [r4, #12]
   130c8:	str	r7, [r4, #16]
   130cc:	str	r7, [r4, #20]
   130d0:	str	r2, [r4, #28]
   130d4:	str	r0, [r4, #58]	; 0x3a
   130d8:	bls	1316c <__assert_fail@plt+0x1fc0>
   130dc:	ldr	r3, [sp, #12]
   130e0:	adds	r5, r3, r5
   130e4:	bcs	131ec <__assert_fail@plt+0x2040>
   130e8:	ldrd	r2, [r8]
   130ec:	ldr	r1, [r6, #48]	; 0x30
   130f0:	ldr	r0, [sp, #28]
   130f4:	strd	r2, [r4, #160]	; 0xa0
   130f8:	ldr	r3, [r6]
   130fc:	tst	r1, #4
   13100:	str	r0, [r4, #48]	; 0x30
   13104:	str	r5, [r4, #40]	; 0x28
   13108:	str	r3, [r4, #4]
   1310c:	streq	r9, [r4, #24]
   13110:	bne	13260 <__assert_fail@plt+0x20b4>
   13114:	ldr	r3, [r6, #44]	; 0x2c
   13118:	cmp	r3, #0
   1311c:	beq	13128 <__assert_fail@plt+0x1f7c>
   13120:	tst	r1, #1024	; 0x400
   13124:	beq	132d0 <__assert_fail@plt+0x2124>
   13128:	tst	r1, #8
   1312c:	ldrb	r3, [r8, #18]
   13130:	bne	12fa0 <__assert_fail@plt+0x1df4>
   13134:	sub	r3, r3, #1
   13138:	cmp	r3, #11
   1313c:	mov	r2, #11
   13140:	strh	r2, [r4, #56]	; 0x38
   13144:	strhi	r7, [r4, #80]	; 0x50
   13148:	movhi	r2, #2
   1314c:	movhi	r3, #0
   13150:	bhi	12fe4 <__assert_fail@plt+0x1e38>
   13154:	ldr	r2, [pc, #2652]	; 13bb8 <__assert_fail@plt+0x2a0c>
   13158:	ldr	r1, [r2, r3, lsl #2]
   1315c:	mov	r2, #2
   13160:	mov	r3, #0
   13164:	str	r1, [r4, #80]	; 0x50
   13168:	b	12fe4 <__assert_fail@plt+0x1e38>
   1316c:	ldr	r0, [r6, #36]	; 0x24
   13170:	ldr	r3, [sp, #12]
   13174:	add	r1, r0, #256	; 0x100
   13178:	add	r1, r1, #1
   1317c:	add	r1, r1, r3
   13180:	add	r1, r1, r5
   13184:	cmp	r0, r1
   13188:	bhi	13308 <__assert_fail@plt+0x215c>
   1318c:	mov	r0, r2
   13190:	str	r1, [r6, #36]	; 0x24
   13194:	str	r2, [sp, #4]
   13198:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   1319c:	ldr	r2, [sp, #4]
   131a0:	cmp	r0, #0
   131a4:	beq	13984 <__assert_fail@plt+0x27d8>
   131a8:	cmp	r2, r0
   131ac:	str	r0, [r6, #24]
   131b0:	beq	131d0 <__assert_fail@plt+0x2024>
   131b4:	ldr	r2, [r6, #48]	; 0x30
   131b8:	tst	r2, #4
   131bc:	ldrne	r3, [sp, #12]
   131c0:	addne	r3, r0, r3
   131c4:	strne	r3, [sp, #32]
   131c8:	mov	r3, #1
   131cc:	str	r3, [sp, #36]	; 0x24
   131d0:	ldr	r2, [r6, #36]	; 0x24
   131d4:	ldr	r3, [sp, #12]
   131d8:	sub	r3, r2, r3
   131dc:	str	r3, [sp, #20]
   131e0:	ldr	r3, [sp, #12]
   131e4:	adds	r5, r3, r5
   131e8:	bcc	130e8 <__assert_fail@plt+0x1f3c>
   131ec:	ldr	r8, [sp, #16]
   131f0:	mov	r0, r4
   131f4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   131f8:	cmp	r8, #0
   131fc:	beq	13224 <__assert_fail@plt+0x2078>
   13200:	ldr	r3, [r8, #12]
   13204:	ldr	r4, [r8, #8]
   13208:	subs	r0, r3, #0
   1320c:	beq	13214 <__assert_fail@plt+0x2068>
   13210:	bl	111a0 <closedir@plt>
   13214:	mov	r0, r8
   13218:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1321c:	subs	r8, r4, #0
   13220:	bne	13200 <__assert_fail@plt+0x2054>
   13224:	ldr	r4, [sp, #8]
   13228:	mov	r8, #0
   1322c:	ldr	r0, [r4, #12]
   13230:	bl	111a0 <closedir@plt>
   13234:	ldr	r3, [r6, #48]	; 0x30
   13238:	mov	r1, #7
   1323c:	orr	r3, r3, #8192	; 0x2000
   13240:	mov	r2, #36	; 0x24
   13244:	str	r8, [r4, #12]
   13248:	strh	r1, [r4, #56]	; 0x38
   1324c:	str	r3, [r6, #48]	; 0x30
   13250:	str	r2, [fp]
   13254:	mov	r0, r8
   13258:	add	sp, sp, #68	; 0x44
   1325c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13260:	ldr	r0, [r4, #28]
   13264:	ldr	r2, [r4, #52]	; 0x34
   13268:	mov	r1, r9
   1326c:	str	r0, [r4, #24]
   13270:	add	r2, r2, #1
   13274:	ldr	r0, [sp, #32]
   13278:	bl	10f00 <memmove@plt>
   1327c:	ldr	r1, [r6, #48]	; 0x30
   13280:	b	13114 <__assert_fail@plt+0x1f68>
   13284:	ldr	r3, [r6, #44]	; 0x2c
   13288:	cmp	r3, #0
   1328c:	bne	1300c <__assert_fail@plt+0x1e60>
   13290:	ldr	r1, [sp, #60]	; 0x3c
   13294:	ldr	r0, [sp, #8]
   13298:	bl	12914 <__assert_fail@plt+0x1768>
   1329c:	ldr	r3, [pc, #2332]	; 13bc0 <__assert_fail@plt+0x2a14>
   132a0:	cmp	r0, r3
   132a4:	beq	132c8 <__assert_fail@plt+0x211c>
   132a8:	ldr	r3, [pc, #2324]	; 13bc4 <__assert_fail@plt+0x2a18>
   132ac:	cmp	r0, r3
   132b0:	beq	132c8 <__assert_fail@plt+0x211c>
   132b4:	ldr	r3, [pc, #2316]	; 13bc8 <__assert_fail@plt+0x2a1c>
   132b8:	cmp	r0, r3
   132bc:	movne	r3, #1
   132c0:	strne	r3, [sp, #48]	; 0x30
   132c4:	bne	1300c <__assert_fail@plt+0x1e60>
   132c8:	str	r7, [sp, #48]	; 0x30
   132cc:	b	1300c <__assert_fail@plt+0x1e60>
   132d0:	mov	r3, r7
   132d4:	mov	r2, r4
   132d8:	ldr	r0, [r6, #32]
   132dc:	bl	12a24 <__assert_fail@plt+0x1878>
   132e0:	strh	r0, [r4, #56]	; 0x38
   132e4:	b	12fe8 <__assert_fail@plt+0x1e3c>
   132e8:	ldrb	r3, [r8, #20]
   132ec:	cmp	r3, #0
   132f0:	beq	13300 <__assert_fail@plt+0x2154>
   132f4:	ldrh	r3, [r8, #20]
   132f8:	cmp	r3, #46	; 0x2e
   132fc:	bne	13064 <__assert_fail@plt+0x1eb8>
   13300:	ldr	r4, [sp]
   13304:	b	1301c <__assert_fail@plt+0x1e70>
   13308:	mov	r0, r2
   1330c:	ldr	r8, [sp, #16]
   13310:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13314:	mov	r3, #36	; 0x24
   13318:	mov	r5, r3
   1331c:	str	r7, [r6, #24]
   13320:	str	r3, [fp]
   13324:	mov	r0, r4
   13328:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1332c:	cmp	r8, #0
   13330:	beq	13358 <__assert_fail@plt+0x21ac>
   13334:	ldr	r3, [r8, #12]
   13338:	ldr	r4, [r8, #8]
   1333c:	subs	r0, r3, #0
   13340:	beq	13348 <__assert_fail@plt+0x219c>
   13344:	bl	111a0 <closedir@plt>
   13348:	mov	r0, r8
   1334c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13350:	subs	r8, r4, #0
   13354:	bne	13334 <__assert_fail@plt+0x2188>
   13358:	ldr	r4, [sp, #8]
   1335c:	mov	r8, #0
   13360:	ldr	r0, [r4, #12]
   13364:	bl	111a0 <closedir@plt>
   13368:	ldr	r3, [r6, #48]	; 0x30
   1336c:	mov	r2, #7
   13370:	orr	r3, r3, #8192	; 0x2000
   13374:	str	r8, [r4, #12]
   13378:	strh	r2, [r4, #56]	; 0x38
   1337c:	mov	r0, r8
   13380:	str	r3, [r6, #48]	; 0x30
   13384:	str	r5, [fp]
   13388:	add	sp, sp, #68	; 0x44
   1338c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13390:	ldr	r8, [sp, #16]
   13394:	ldr	r5, [fp]
   13398:	b	13324 <__assert_fail@plt+0x2178>
   1339c:	ldr	r8, [sp, #16]
   133a0:	ldr	r3, [sp, #36]	; 0x24
   133a4:	cmp	r3, #0
   133a8:	bne	137f0 <__assert_fail@plt+0x2644>
   133ac:	ldr	r3, [r6, #48]	; 0x30
   133b0:	tst	r3, #4
   133b4:	beq	133e0 <__assert_fail@plt+0x2234>
   133b8:	ldr	r3, [r6, #36]	; 0x24
   133bc:	ldr	r2, [sp, #12]
   133c0:	cmp	sl, #0
   133c4:	cmpne	r3, r2
   133c8:	ldreq	r3, [sp, #32]
   133cc:	subeq	r3, r3, #1
   133d0:	streq	r3, [sp, #32]
   133d4:	ldr	r2, [sp, #32]
   133d8:	mov	r3, #0
   133dc:	strb	r3, [r2]
   133e0:	ldr	r3, [sp, #52]	; 0x34
   133e4:	ldr	r2, [sp, #44]	; 0x2c
   133e8:	cmp	r2, #0
   133ec:	movne	r3, #0
   133f0:	andeq	r3, r3, #1
   133f4:	cmp	r3, #0
   133f8:	beq	13488 <__assert_fail@plt+0x22dc>
   133fc:	ldr	r3, [sp, #40]	; 0x28
   13400:	cmp	sl, #0
   13404:	cmpne	r3, #1
   13408:	beq	13694 <__assert_fail@plt+0x24e8>
   1340c:	ldr	r3, [sp, #48]	; 0x30
   13410:	cmp	r3, #0
   13414:	bne	13874 <__assert_fail@plt+0x26c8>
   13418:	ldr	r4, [r6, #44]	; 0x2c
   1341c:	cmp	r4, #0
   13420:	cmpne	sl, #1
   13424:	bls	13254 <__assert_fail@plt+0x20a8>
   13428:	ldr	r3, [r6, #40]	; 0x28
   1342c:	cmp	sl, r3
   13430:	bls	13628 <__assert_fail@plt+0x247c>
   13434:	add	r1, sl, #40	; 0x28
   13438:	cmn	r1, #-1073741823	; 0xc0000001
   1343c:	str	r1, [r6, #40]	; 0x28
   13440:	bhi	1396c <__assert_fail@plt+0x27c0>
   13444:	lsl	r1, r1, #2
   13448:	ldr	r0, [r6, #8]
   1344c:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   13450:	cmp	r0, #0
   13454:	beq	1396c <__assert_fail@plt+0x27c0>
   13458:	str	r0, [r6, #8]
   1345c:	b	1362c <__assert_fail@plt+0x2480>
   13460:	ldr	r1, [sp, #8]
   13464:	ldr	r3, [pc, #1888]	; 13bcc <__assert_fail@plt+0x2a20>
   13468:	mvn	r2, #0
   1346c:	ldr	r1, [r1, #4]
   13470:	mov	r0, r6
   13474:	bl	12c28 <__assert_fail@plt+0x1a7c>
   13478:	adds	r5, r0, #0
   1347c:	movne	r5, #1
   13480:	cmp	r5, #0
   13484:	bne	13a30 <__assert_fail@plt+0x2884>
   13488:	cmp	sl, #0
   1348c:	bne	1340c <__assert_fail@plt+0x2260>
   13490:	ldr	r3, [sp, #40]	; 0x28
   13494:	cmp	r3, #3
   13498:	beq	139f8 <__assert_fail@plt+0x284c>
   1349c:	cmp	r8, #0
   134a0:	beq	13928 <__assert_fail@plt+0x277c>
   134a4:	ldr	r3, [r8, #12]
   134a8:	ldr	r4, [r8, #8]
   134ac:	subs	r0, r3, #0
   134b0:	beq	134b8 <__assert_fail@plt+0x230c>
   134b4:	bl	111a0 <closedir@plt>
   134b8:	mov	r0, r8
   134bc:	bl	1c598 <__assert_fail@plt+0xb3ec>
   134c0:	subs	r8, r4, #0
   134c4:	bne	134a4 <__assert_fail@plt+0x22f8>
   134c8:	b	13928 <__assert_fail@plt+0x277c>
   134cc:	ldr	r3, [r0, #48]	; 0x30
   134d0:	ldr	ip, [sp, #8]
   134d4:	and	r2, r3, #516	; 0x204
   134d8:	cmp	r2, #512	; 0x200
   134dc:	mvnne	r0, #99	; 0x63
   134e0:	ldreq	r0, [r0, #32]
   134e4:	ands	r2, r3, #16
   134e8:	ldr	r1, [ip, #24]
   134ec:	bne	13608 <__assert_fail@plt+0x245c>
   134f0:	add	r3, sp, #60	; 0x3c
   134f4:	bl	16de0 <__assert_fail@plt+0x5c34>
   134f8:	ldr	r3, [sp, #8]
   134fc:	cmp	r0, #0
   13500:	mov	r8, r0
   13504:	str	r0, [r3, #12]
   13508:	beq	13a78 <__assert_fail@plt+0x28cc>
   1350c:	ldrh	r3, [r3, #56]	; 0x38
   13510:	cmp	r3, #11
   13514:	beq	13aa0 <__assert_fail@plt+0x28f4>
   13518:	ldr	r0, [r6, #48]	; 0x30
   1351c:	tst	r0, #256	; 0x100
   13520:	bne	136fc <__assert_fail@plt+0x2550>
   13524:	ldr	r2, [r6, #44]	; 0x2c
   13528:	ldr	r3, [pc, #1696]	; 13bd0 <__assert_fail@plt+0x2a24>
   1352c:	cmp	r2, #0
   13530:	mvnne	r3, #0
   13534:	str	r3, [sp, #24]
   13538:	ldr	r3, [sp, #40]	; 0x28
   1353c:	cmp	r3, #2
   13540:	beq	139a4 <__assert_fail@plt+0x27f8>
   13544:	ldr	r3, [r6, #48]	; 0x30
   13548:	and	r3, r3, #56	; 0x38
   1354c:	cmp	r3, #24
   13550:	beq	13ac0 <__assert_fail@plt+0x2914>
   13554:	ldr	r3, [sp, #40]	; 0x28
   13558:	mov	r4, #1
   1355c:	sub	r5, r3, #3
   13560:	clz	r5, r5
   13564:	lsr	r5, r5, #5
   13568:	ldr	r3, [r6, #48]	; 0x30
   1356c:	tst	r3, #512	; 0x200
   13570:	bne	13a14 <__assert_fail@plt+0x2868>
   13574:	ldr	r2, [sp, #60]	; 0x3c
   13578:	cmp	r2, #0
   1357c:	blt	13598 <__assert_fail@plt+0x23ec>
   13580:	mov	r3, #0
   13584:	ldr	r1, [sp, #8]
   13588:	mov	r0, r6
   1358c:	bl	12c28 <__assert_fail@plt+0x1a7c>
   13590:	cmp	r0, #0
   13594:	beq	12f10 <__assert_fail@plt+0x1d64>
   13598:	tst	r4, r5
   1359c:	bne	13b18 <__assert_fail@plt+0x296c>
   135a0:	ldr	r4, [sp, #8]
   135a4:	ldrh	r3, [r4, #58]	; 0x3a
   135a8:	ldr	r0, [r4, #12]
   135ac:	orr	r3, r3, #1
   135b0:	strh	r3, [r4, #58]	; 0x3a
   135b4:	bl	111a0 <closedir@plt>
   135b8:	ldr	r0, [r6, #48]	; 0x30
   135bc:	mov	r3, #0
   135c0:	tst	r0, #512	; 0x200
   135c4:	str	r3, [r4, #12]
   135c8:	beq	135e4 <__assert_fail@plt+0x2438>
   135cc:	ldr	r3, [sp, #60]	; 0x3c
   135d0:	cmp	r3, #0
   135d4:	blt	135e4 <__assert_fail@plt+0x2438>
   135d8:	mov	r0, r3
   135dc:	bl	11188 <close@plt>
   135e0:	ldr	r0, [r6, #48]	; 0x30
   135e4:	ldr	r2, [sp, #8]
   135e8:	mov	r3, #0
   135ec:	str	r3, [sp, #52]	; 0x34
   135f0:	str	r3, [r2, #12]
   135f4:	b	12f20 <__assert_fail@plt+0x1d74>
   135f8:	mov	r3, #11
   135fc:	strh	r3, [r4, #56]	; 0x38
   13600:	mov	r3, #9
   13604:	b	13154 <__assert_fail@plt+0x1fa8>
   13608:	tst	r3, #1
   1360c:	moveq	r2, #32768	; 0x8000
   13610:	beq	134f0 <__assert_fail@plt+0x2344>
   13614:	ldr	r2, [ip, #48]	; 0x30
   13618:	cmp	r2, #0
   1361c:	movne	r2, #32768	; 0x8000
   13620:	moveq	r2, #0
   13624:	b	134f0 <__assert_fail@plt+0x2344>
   13628:	ldr	r0, [r6, #8]
   1362c:	cmp	r8, #0
   13630:	movne	r2, r0
   13634:	beq	13648 <__assert_fail@plt+0x249c>
   13638:	str	r8, [r2], #4
   1363c:	ldr	r8, [r8, #8]
   13640:	cmp	r8, #0
   13644:	bne	13638 <__assert_fail@plt+0x248c>
   13648:	mov	r3, r4
   1364c:	mov	r2, #4
   13650:	mov	r1, sl
   13654:	bl	11134 <qsort@plt>
   13658:	ldr	ip, [r6, #8]
   1365c:	sub	r3, sl, #1
   13660:	mov	r2, ip
   13664:	ldr	r8, [ip]
   13668:	ldr	r1, [r2]
   1366c:	ldr	r0, [r2, #4]!
   13670:	subs	r3, r3, #1
   13674:	str	r0, [r1, #8]
   13678:	bne	13668 <__assert_fail@plt+0x24bc>
   1367c:	add	sl, ip, sl, lsl #2
   13680:	mov	r0, r8
   13684:	ldr	r2, [sl, #-4]
   13688:	str	r3, [r2, #8]
   1368c:	add	sp, sp, #68	; 0x44
   13690:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13694:	ldr	r3, [sp, #8]
   13698:	ldr	r3, [r3, #48]	; 0x30
   1369c:	cmp	r3, #0
   136a0:	bne	13460 <__assert_fail@plt+0x22b4>
   136a4:	ldr	r2, [r6, #48]	; 0x30
   136a8:	tst	r2, #4
   136ac:	movne	r5, r3
   136b0:	addne	r4, r6, #60	; 0x3c
   136b4:	bne	136e4 <__assert_fail@plt+0x2538>
   136b8:	tst	r2, #512	; 0x200
   136bc:	bne	13b30 <__assert_fail@plt+0x2984>
   136c0:	ldr	r0, [r6, #28]
   136c4:	bl	11128 <fchdir@plt>
   136c8:	add	r4, r6, #60	; 0x3c
   136cc:	adds	r5, r0, #0
   136d0:	movne	r5, #1
   136d4:	b	136e4 <__assert_fail@plt+0x2538>
   136d8:	bl	16834 <__assert_fail@plt+0x5688>
   136dc:	cmp	r0, #0
   136e0:	bge	13964 <__assert_fail@plt+0x27b8>
   136e4:	mov	r0, r4
   136e8:	bl	167e8 <__assert_fail@plt+0x563c>
   136ec:	cmp	r0, #0
   136f0:	mov	r0, r4
   136f4:	beq	136d8 <__assert_fail@plt+0x252c>
   136f8:	b	13480 <__assert_fail@plt+0x22d4>
   136fc:	ldr	r5, [sp, #8]
   13700:	add	r1, r6, #56	; 0x38
   13704:	mov	r2, r5
   13708:	bl	12b70 <__assert_fail@plt+0x19c4>
   1370c:	mov	r3, #0
   13710:	mov	r2, r5
   13714:	ldr	r1, [r6, #48]	; 0x30
   13718:	ldr	r0, [r6, #32]
   1371c:	bl	12a24 <__assert_fail@plt+0x1878>
   13720:	ldr	r2, [r6, #48]	; 0x30
   13724:	ldr	r3, [pc, #1192]	; 13bd4 <__assert_fail@plt+0x2a28>
   13728:	mov	r7, r5
   1372c:	and	r3, r3, r2
   13730:	cmp	r3, #0
   13734:	beq	139b8 <__assert_fail@plt+0x280c>
   13738:	mov	r0, #24
   1373c:	bl	1c098 <__assert_fail@plt+0xaeec>
   13740:	subs	r4, r0, #0
   13744:	beq	13b5c <__assert_fail@plt+0x29b0>
   13748:	ldrd	r0, [r5, #160]	; 0xa0
   1374c:	ldrd	r2, [r5, #64]	; 0x40
   13750:	str	r5, [r4, #16]
   13754:	strd	r0, [r4, #8]
   13758:	strd	r2, [r4]
   1375c:	mov	r1, r4
   13760:	ldr	r0, [r6, #56]	; 0x38
   13764:	bl	16018 <__assert_fail@plt+0x4e6c>
   13768:	cmp	r4, r0
   1376c:	mov	r5, r0
   13770:	beq	13524 <__assert_fail@plt+0x2378>
   13774:	mov	r0, r4
   13778:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1377c:	cmp	r5, #0
   13780:	beq	13b5c <__assert_fail@plt+0x29b0>
   13784:	ldr	r2, [r5, #16]
   13788:	mov	r3, #2
   1378c:	str	r2, [r7]
   13790:	strh	r3, [r7, #56]	; 0x38
   13794:	b	13524 <__assert_fail@plt+0x2378>
   13798:	ldr	r3, [fp]
   1379c:	ldr	r8, [sp, #16]
   137a0:	cmp	r3, #0
   137a4:	beq	137c8 <__assert_fail@plt+0x261c>
   137a8:	ldr	r2, [sp, #44]	; 0x2c
   137ac:	ldr	r1, [sp, #8]
   137b0:	cmp	sl, #0
   137b4:	cmpeq	r2, #0
   137b8:	moveq	r2, #4
   137bc:	movne	r2, #7
   137c0:	str	r3, [r1, #32]
   137c4:	strh	r2, [r1, #56]	; 0x38
   137c8:	ldr	r4, [sp, #8]
   137cc:	ldr	r0, [r4, #12]
   137d0:	cmp	r0, #0
   137d4:	beq	133a0 <__assert_fail@plt+0x21f4>
   137d8:	bl	111a0 <closedir@plt>
   137dc:	mov	r3, #0
   137e0:	str	r3, [r4, #12]
   137e4:	ldr	r3, [sp, #36]	; 0x24
   137e8:	cmp	r3, #0
   137ec:	beq	133ac <__assert_fail@plt+0x2200>
   137f0:	ldr	r1, [r6, #4]
   137f4:	ldr	r0, [r6, #24]
   137f8:	cmp	r1, #0
   137fc:	beq	1382c <__assert_fail@plt+0x2680>
   13800:	ldr	r3, [r1, #24]
   13804:	add	r2, r1, #168	; 0xa8
   13808:	cmp	r3, r2
   1380c:	ldrne	r2, [r1, #28]
   13810:	str	r0, [r1, #28]
   13814:	subne	r3, r3, r2
   13818:	addne	r3, r0, r3
   1381c:	strne	r3, [r1, #24]
   13820:	ldr	r1, [r1, #8]
   13824:	cmp	r1, #0
   13828:	bne	13800 <__assert_fail@plt+0x2654>
   1382c:	mov	r3, r8
   13830:	b	13860 <__assert_fail@plt+0x26b4>
   13834:	ldr	r2, [r3, #24]
   13838:	cmp	r2, r1
   1383c:	ldrne	r1, [r3, #28]
   13840:	str	r0, [r3, #28]
   13844:	subne	r2, r2, r1
   13848:	addne	r2, r0, r2
   1384c:	strne	r2, [r3, #24]
   13850:	ldr	r2, [r3, #8]
   13854:	cmp	r2, #0
   13858:	ldreq	r2, [r3, #4]
   1385c:	mov	r3, r2
   13860:	ldr	r2, [r3, #48]	; 0x30
   13864:	add	r1, r3, #168	; 0xa8
   13868:	cmp	r2, #0
   1386c:	bge	13834 <__assert_fail@plt+0x2688>
   13870:	b	133ac <__assert_fail@plt+0x2200>
   13874:	ldr	r2, [r6, #40]	; 0x28
   13878:	ldr	r3, [pc, #856]	; 13bd8 <__assert_fail@plt+0x2a2c>
   1387c:	cmp	sl, r2
   13880:	str	r3, [r6, #44]	; 0x2c
   13884:	bhi	13938 <__assert_fail@plt+0x278c>
   13888:	ldr	r0, [r6, #8]
   1388c:	cmp	r8, #0
   13890:	movne	r3, r0
   13894:	beq	138a8 <__assert_fail@plt+0x26fc>
   13898:	str	r8, [r3], #4
   1389c:	ldr	r8, [r8, #8]
   138a0:	cmp	r8, #0
   138a4:	bne	13898 <__assert_fail@plt+0x26ec>
   138a8:	ldr	r3, [pc, #808]	; 13bd8 <__assert_fail@plt+0x2a2c>
   138ac:	mov	r2, #4
   138b0:	mov	r1, sl
   138b4:	bl	11134 <qsort@plt>
   138b8:	ldr	ip, [r6, #8]
   138bc:	subs	r3, sl, #1
   138c0:	ldr	r8, [ip]
   138c4:	moveq	r3, r8
   138c8:	beq	138ec <__assert_fail@plt+0x2740>
   138cc:	mov	r2, ip
   138d0:	ldr	r1, [r2]
   138d4:	ldr	r0, [r2, #4]!
   138d8:	subs	r3, r3, #1
   138dc:	str	r0, [r1, #8]
   138e0:	bne	138d0 <__assert_fail@plt+0x2724>
   138e4:	add	ip, ip, sl, lsl #2
   138e8:	ldr	r3, [ip, #-4]
   138ec:	mov	r2, #0
   138f0:	str	r2, [r3, #8]
   138f4:	mov	r3, #0
   138f8:	mov	r0, r8
   138fc:	str	r3, [r6, #44]	; 0x2c
   13900:	add	sp, sp, #68	; 0x44
   13904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13908:	ldr	r4, [sp, #8]
   1390c:	mov	r8, #0
   13910:	ldr	r0, [r4, #12]
   13914:	bl	111a0 <closedir@plt>
   13918:	ldr	r3, [sp, #40]	; 0x28
   1391c:	str	r8, [r4, #12]
   13920:	cmp	r3, #3
   13924:	beq	13a84 <__assert_fail@plt+0x28d8>
   13928:	mov	r8, #0
   1392c:	mov	r0, r8
   13930:	add	sp, sp, #68	; 0x44
   13934:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13938:	add	r1, sl, #40	; 0x28
   1393c:	cmn	r1, #-1073741823	; 0xc0000001
   13940:	str	r1, [r6, #40]	; 0x28
   13944:	bhi	139e0 <__assert_fail@plt+0x2834>
   13948:	lsl	r1, r1, #2
   1394c:	ldr	r0, [r6, #8]
   13950:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   13954:	cmp	r0, #0
   13958:	beq	139e0 <__assert_fail@plt+0x2834>
   1395c:	str	r0, [r6, #8]
   13960:	b	1388c <__assert_fail@plt+0x26e0>
   13964:	bl	11188 <close@plt>
   13968:	b	136e4 <__assert_fail@plt+0x2538>
   1396c:	ldr	r0, [r6, #8]
   13970:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13974:	mov	r3, #0
   13978:	str	r3, [r6, #8]
   1397c:	str	r3, [r6, #40]	; 0x28
   13980:	b	13254 <__assert_fail@plt+0x20a8>
   13984:	str	r0, [sp]
   13988:	ldr	r0, [r6, #24]
   1398c:	ldr	r8, [sp, #16]
   13990:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13994:	ldr	r1, [sp]
   13998:	ldr	r5, [fp]
   1399c:	str	r1, [r6, #24]
   139a0:	b	13324 <__assert_fail@plt+0x2178>
   139a4:	mov	r3, #0
   139a8:	str	r3, [sp, #52]	; 0x34
   139ac:	ldr	r0, [r6, #48]	; 0x30
   139b0:	ldr	r2, [sp, #8]
   139b4:	b	12f20 <__assert_fail@plt+0x1d74>
   139b8:	ldr	r4, [sp, #8]
   139bc:	ldr	r0, [r6, #56]	; 0x38
   139c0:	add	r1, r4, #64	; 0x40
   139c4:	bl	1c1c0 <__assert_fail@plt+0xb014>
   139c8:	cmp	r0, #0
   139cc:	movne	r2, r4
   139d0:	movne	r3, #2
   139d4:	strne	r4, [r2]
   139d8:	strhne	r3, [r4, #56]	; 0x38
   139dc:	b	13524 <__assert_fail@plt+0x2378>
   139e0:	ldr	r0, [r6, #8]
   139e4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   139e8:	mov	r3, #0
   139ec:	str	r3, [r6, #8]
   139f0:	str	r3, [r6, #40]	; 0x28
   139f4:	b	138f4 <__assert_fail@plt+0x2748>
   139f8:	ldr	r2, [sp, #8]
   139fc:	ldrh	r3, [r2, #56]	; 0x38
   13a00:	cmp	r3, #7
   13a04:	cmpne	r3, #4
   13a08:	movne	r3, #6
   13a0c:	strhne	r3, [r2, #56]	; 0x38
   13a10:	b	1349c <__assert_fail@plt+0x22f0>
   13a14:	mov	r2, #3
   13a18:	ldr	r1, [pc, #444]	; 13bdc <__assert_fail@plt+0x2a30>
   13a1c:	ldr	r0, [sp, #60]	; 0x3c
   13a20:	bl	1c32c <__assert_fail@plt+0xb180>
   13a24:	mov	r2, r0
   13a28:	str	r0, [sp, #60]	; 0x3c
   13a2c:	b	13578 <__assert_fail@plt+0x23cc>
   13a30:	ldr	r3, [r6, #48]	; 0x30
   13a34:	ldr	r1, [sp, #8]
   13a38:	orr	r3, r3, #8192	; 0x2000
   13a3c:	mov	r2, #7
   13a40:	cmp	r8, #0
   13a44:	strh	r2, [r1, #56]	; 0x38
   13a48:	str	r3, [r6, #48]	; 0x30
   13a4c:	beq	13928 <__assert_fail@plt+0x277c>
   13a50:	ldr	r3, [r8, #12]
   13a54:	ldr	r4, [r8, #8]
   13a58:	subs	r0, r3, #0
   13a5c:	beq	13a64 <__assert_fail@plt+0x28b8>
   13a60:	bl	111a0 <closedir@plt>
   13a64:	mov	r0, r8
   13a68:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13a6c:	subs	r8, r4, #0
   13a70:	bne	13a50 <__assert_fail@plt+0x28a4>
   13a74:	b	13928 <__assert_fail@plt+0x277c>
   13a78:	ldr	r3, [sp, #40]	; 0x28
   13a7c:	cmp	r3, #3
   13a80:	bne	13928 <__assert_fail@plt+0x277c>
   13a84:	ldr	r4, [sp, #8]
   13a88:	mov	r3, #4
   13a8c:	strh	r3, [r4, #56]	; 0x38
   13a90:	bl	11068 <__errno_location@plt>
   13a94:	ldr	r3, [r0]
   13a98:	str	r3, [r4, #32]
   13a9c:	b	13254 <__assert_fail@plt+0x20a8>
   13aa0:	ldr	r4, [sp, #8]
   13aa4:	mov	r3, #0
   13aa8:	mov	r2, r4
   13aac:	ldr	r1, [r6, #48]	; 0x30
   13ab0:	ldr	r0, [r6, #32]
   13ab4:	bl	12a24 <__assert_fail@plt+0x1878>
   13ab8:	strh	r0, [r4, #56]	; 0x38
   13abc:	b	13524 <__assert_fail@plt+0x2378>
   13ac0:	ldr	r3, [sp, #8]
   13ac4:	ldr	r3, [r3, #84]	; 0x54
   13ac8:	cmp	r3, #2
   13acc:	bne	13554 <__assert_fail@plt+0x23a8>
   13ad0:	ldr	r1, [sp, #60]	; 0x3c
   13ad4:	ldr	r0, [sp, #8]
   13ad8:	bl	12914 <__assert_fail@plt+0x1768>
   13adc:	ldr	r3, [pc, #220]	; 13bc0 <__assert_fail@plt+0x2a14>
   13ae0:	cmp	r0, r3
   13ae4:	beq	13554 <__assert_fail@plt+0x23a8>
   13ae8:	bgt	13b70 <__assert_fail@plt+0x29c4>
   13aec:	ldr	r3, [pc, #212]	; 13bc8 <__assert_fail@plt+0x2a1c>
   13af0:	cmp	r0, r3
   13af4:	beq	13554 <__assert_fail@plt+0x23a8>
   13af8:	cmp	r0, #0
   13afc:	beq	13554 <__assert_fail@plt+0x23a8>
   13b00:	ldr	r3, [sp, #40]	; 0x28
   13b04:	cmp	r3, #3
   13b08:	bne	139a4 <__assert_fail@plt+0x27f8>
   13b0c:	mov	r5, #1
   13b10:	mov	r4, #0
   13b14:	b	13568 <__assert_fail@plt+0x23bc>
   13b18:	bl	11068 <__errno_location@plt>
   13b1c:	ldr	r2, [sp, #8]
   13b20:	mov	r4, r2
   13b24:	ldr	r3, [r0]
   13b28:	str	r3, [r2, #32]
   13b2c:	b	135a4 <__assert_fail@plt+0x23f8>
   13b30:	add	r4, r6, #60	; 0x3c
   13b34:	mov	r0, r4
   13b38:	ldr	r1, [r6, #32]
   13b3c:	bl	167f0 <__assert_fail@plt+0x5644>
   13b40:	cmp	r0, #0
   13b44:	blt	13b4c <__assert_fail@plt+0x29a0>
   13b48:	bl	11188 <close@plt>
   13b4c:	mvn	r3, #99	; 0x63
   13b50:	str	r3, [r6, #32]
   13b54:	mov	r5, #0
   13b58:	b	136e4 <__assert_fail@plt+0x2538>
   13b5c:	bl	11068 <__errno_location@plt>
   13b60:	mov	r3, #12
   13b64:	mov	r8, #0
   13b68:	str	r3, [r0]
   13b6c:	b	13254 <__assert_fail@plt+0x20a8>
   13b70:	ldr	r3, [pc, #104]	; 13be0 <__assert_fail@plt+0x2a34>
   13b74:	cmp	r0, r3
   13b78:	beq	13554 <__assert_fail@plt+0x23a8>
   13b7c:	ldr	r3, [pc, #96]	; 13be4 <__assert_fail@plt+0x2a38>
   13b80:	cmp	r0, r3
   13b84:	bne	13b00 <__assert_fail@plt+0x2954>
   13b88:	b	13554 <__assert_fail@plt+0x23a8>
   13b8c:	ldr	r3, [pc, #60]	; 13bd0 <__assert_fail@plt+0x2a24>
   13b90:	ldr	r0, [r6, #48]	; 0x30
   13b94:	str	r3, [sp, #24]
   13b98:	mov	r3, #1
   13b9c:	str	r3, [sp, #52]	; 0x34
   13ba0:	ldr	r2, [sp, #8]
   13ba4:	b	12f20 <__assert_fail@plt+0x1d74>
   13ba8:	str	r7, [r4, #80]	; 0x50
   13bac:	mov	r2, #1
   13bb0:	mov	r3, #0
   13bb4:	b	12fe4 <__assert_fail@plt+0x1e38>
   13bb8:	andeq	sp, r1, r8, ror #18
   13bbc:	andeq	r2, r0, r0, lsl r7
   13bc0:	andeq	r6, r0, r9, ror #18
   13bc4:			; <UNDEFINED> instruction: 0x01021994
   13bc8:			; <UNDEFINED> instruction: 0xff534d42
   13bcc:	muleq	r1, r8, r9
   13bd0:	andeq	r8, r1, r0, lsr #13
   13bd4:	andeq	r0, r0, r2, lsl #2
   13bd8:	andeq	r2, r1, r4, ror #17
   13bdc:	andeq	r0, r0, r6, lsl #8
   13be0:	andeq	r9, r0, r0, lsr #31
   13be4:	movtpl	r4, #24911	; 0x614f
   13be8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bec:	bic	r8, r1, #4080	; 0xff0
   13bf0:	sub	sp, sp, #36	; 0x24
   13bf4:	bic	r8, r8, #15
   13bf8:	cmp	r8, #0
   13bfc:	str	r2, [sp, #12]
   13c00:	bne	140a8 <__assert_fail@plt+0x2efc>
   13c04:	and	r3, r1, #516	; 0x204
   13c08:	cmp	r3, #516	; 0x204
   13c0c:	mov	r5, r1
   13c10:	beq	1400c <__assert_fail@plt+0x2e60>
   13c14:	ands	r8, r1, #18
   13c18:	beq	1400c <__assert_fail@plt+0x2e60>
   13c1c:	mov	r9, r0
   13c20:	mov	r1, #96	; 0x60
   13c24:	mov	r0, #1
   13c28:	bl	1c050 <__assert_fail@plt+0xaea4>
   13c2c:	subs	r8, r0, #0
   13c30:	beq	13f64 <__assert_fail@plt+0x2db8>
   13c34:	ldr	r3, [sp, #12]
   13c38:	tst	r5, #2
   13c3c:	str	r3, [r8, #44]	; 0x2c
   13c40:	bicne	r3, r5, #512	; 0x200
   13c44:	orrne	r3, r3, #4
   13c48:	strne	r3, [r8, #48]	; 0x30
   13c4c:	ldr	r3, [r9]
   13c50:	streq	r5, [r8, #48]	; 0x30
   13c54:	mvn	r2, #99	; 0x63
   13c58:	cmp	r3, #0
   13c5c:	str	r2, [r8, #32]
   13c60:	beq	1410c <__assert_fail@plt+0x2f60>
   13c64:	mov	r6, r9
   13c68:	mov	r4, #0
   13c6c:	mov	r0, r3
   13c70:	bl	11044 <strlen@plt>
   13c74:	ldr	r3, [r6, #4]!
   13c78:	cmp	r4, r0
   13c7c:	movcc	r4, r0
   13c80:	cmp	r3, #0
   13c84:	bne	13c6c <__assert_fail@plt+0x2ac0>
   13c88:	add	r4, r4, #1
   13c8c:	cmp	r4, #4096	; 0x1000
   13c90:	movcc	r4, #4096	; 0x1000
   13c94:	ldr	r3, [r8, #36]	; 0x24
   13c98:	add	r1, r3, #256	; 0x100
   13c9c:	add	r1, r1, r4
   13ca0:	cmp	r3, r1
   13ca4:	bhi	13fd8 <__assert_fail@plt+0x2e2c>
   13ca8:	str	r1, [r8, #36]	; 0x24
   13cac:	ldr	r0, [r8, #24]
   13cb0:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   13cb4:	subs	r4, r0, #0
   13cb8:	beq	141a8 <__assert_fail@plt+0x2ffc>
   13cbc:	ldr	fp, [r9]
   13cc0:	str	r4, [r8, #24]
   13cc4:	cmp	fp, #0
   13cc8:	beq	1408c <__assert_fail@plt+0x2ee0>
   13ccc:	mov	r0, #176	; 0xb0
   13cd0:	bl	1c098 <__assert_fail@plt+0xaeec>
   13cd4:	subs	r3, r0, #0
   13cd8:	mov	r0, r3
   13cdc:	str	r3, [sp, #16]
   13ce0:	beq	13fcc <__assert_fail@plt+0x2e20>
   13ce4:	ldr	r2, [r8, #24]
   13ce8:	ldr	r3, [sp, #12]
   13cec:	mov	r1, #196608	; 0x30000
   13cf0:	cmp	r3, #0
   13cf4:	str	r2, [r0, #28]
   13cf8:	mov	r3, #0
   13cfc:	mvn	r2, #0
   13d00:	str	r8, [r0, #44]	; 0x2c
   13d04:	strb	r3, [r0, #168]	; 0xa8
   13d08:	str	r3, [r0, #52]	; 0x34
   13d0c:	str	r3, [r0, #32]
   13d10:	str	r3, [r0, #12]
   13d14:	str	r3, [r0, #16]
   13d18:	str	r3, [r0, #20]
   13d1c:	str	r1, [r0, #58]	; 0x3a
   13d20:	str	r2, [r0, #48]	; 0x30
   13d24:	ldr	fp, [r9]
   13d28:	beq	14100 <__assert_fail@plt+0x2f54>
   13d2c:	ldr	r3, [r8, #48]	; 0x30
   13d30:	lsr	r3, r3, #10
   13d34:	and	r3, r3, #1
   13d38:	str	r3, [sp, #24]
   13d3c:	cmp	fp, #0
   13d40:	beq	141c0 <__assert_fail@plt+0x3014>
   13d44:	lsr	r5, r5, #11
   13d48:	mov	r3, #0
   13d4c:	eor	r5, r5, #1
   13d50:	mov	r6, r3
   13d54:	str	r3, [sp, #28]
   13d58:	and	r3, r5, #1
   13d5c:	str	r3, [sp, #20]
   13d60:	mov	sl, r6
   13d64:	mov	r7, r6
   13d68:	b	13da8 <__assert_fail@plt+0x2bfc>
   13d6c:	mov	r3, #11
   13d70:	strh	r3, [r4, #56]	; 0x38
   13d74:	mov	r2, #2
   13d78:	mov	r3, #0
   13d7c:	strd	r2, [r4, #112]	; 0x70
   13d80:	ldr	r3, [sp, #12]
   13d84:	cmp	r3, #0
   13d88:	beq	13e88 <__assert_fail@plt+0x2cdc>
   13d8c:	ldr	fp, [r9, #4]!
   13d90:	str	r7, [r4, #8]
   13d94:	cmp	fp, #0
   13d98:	mov	r7, r4
   13d9c:	add	r4, sl, #1
   13da0:	beq	13eb4 <__assert_fail@plt+0x2d08>
   13da4:	mov	sl, r4
   13da8:	mov	r0, fp
   13dac:	bl	11044 <strlen@plt>
   13db0:	ldr	r3, [sp, #20]
   13db4:	cmp	r0, #2
   13db8:	movls	r3, #0
   13dbc:	andhi	r3, r3, #1
   13dc0:	cmp	r3, #0
   13dc4:	mov	r5, r0
   13dc8:	beq	13de0 <__assert_fail@plt+0x2c34>
   13dcc:	sub	r2, r0, #1
   13dd0:	add	r3, fp, r2
   13dd4:	ldrb	r2, [fp, r2]
   13dd8:	cmp	r2, #47	; 0x2f
   13ddc:	beq	13f70 <__assert_fail@plt+0x2dc4>
   13de0:	add	r0, r5, #176	; 0xb0
   13de4:	bic	r0, r0, #7
   13de8:	bl	1c098 <__assert_fail@plt+0xaeec>
   13dec:	subs	r4, r0, #0
   13df0:	beq	13f98 <__assert_fail@plt+0x2dec>
   13df4:	add	r3, r4, #168	; 0xa8
   13df8:	mov	r1, fp
   13dfc:	mov	r0, r3
   13e00:	mov	r2, r5
   13e04:	bl	10f24 <memcpy@plt>
   13e08:	add	r1, r4, r5
   13e0c:	ldr	r2, [r8, #24]
   13e10:	strb	r6, [r1, #168]	; 0xa8
   13e14:	str	r5, [r4, #52]	; 0x34
   13e18:	str	r8, [r4, #44]	; 0x2c
   13e1c:	str	r6, [r4, #32]
   13e20:	str	r6, [r4, #12]
   13e24:	str	r6, [r4, #16]
   13e28:	str	r6, [r4, #20]
   13e2c:	str	r6, [r4, #48]	; 0x30
   13e30:	str	r2, [r4, #28]
   13e34:	mov	r3, r0
   13e38:	ldr	r0, [sp, #24]
   13e3c:	str	r3, [r4, #24]
   13e40:	mov	r3, #196608	; 0x30000
   13e44:	cmp	r7, #0
   13e48:	moveq	r0, #0
   13e4c:	andne	r0, r0, #1
   13e50:	str	r3, [r4, #58]	; 0x3a
   13e54:	ldr	r3, [sp, #16]
   13e58:	cmp	r0, #0
   13e5c:	str	r3, [r4, #4]
   13e60:	bne	13d6c <__assert_fail@plt+0x2bc0>
   13e64:	mov	r3, r6
   13e68:	mov	r2, r4
   13e6c:	ldr	r1, [r8, #48]	; 0x30
   13e70:	ldr	r0, [r8, #32]
   13e74:	bl	12a24 <__assert_fail@plt+0x1878>
   13e78:	ldr	r3, [sp, #12]
   13e7c:	cmp	r3, #0
   13e80:	strh	r0, [r4, #56]	; 0x38
   13e84:	bne	13d8c <__assert_fail@plt+0x2be0>
   13e88:	cmp	r7, #0
   13e8c:	str	r3, [r4, #8]
   13e90:	ldrne	r3, [sp, #28]
   13e94:	ldr	fp, [r9, #4]!
   13e98:	strne	r4, [sp, #28]
   13e9c:	strne	r4, [r3, #8]
   13ea0:	streq	r4, [sp, #28]
   13ea4:	moveq	r7, r4
   13ea8:	cmp	fp, #0
   13eac:	add	r4, sl, #1
   13eb0:	bne	13da4 <__assert_fail@plt+0x2bf8>
   13eb4:	ldr	r3, [sp, #12]
   13eb8:	cmp	r3, #0
   13ebc:	cmpne	r4, #1
   13ec0:	bhi	140c4 <__assert_fail@plt+0x2f18>
   13ec4:	mov	r0, #176	; 0xb0
   13ec8:	bl	1c098 <__assert_fail@plt+0xaeec>
   13ecc:	cmp	r0, #0
   13ed0:	beq	141b8 <__assert_fail@plt+0x300c>
   13ed4:	ldr	r2, [r8, #48]	; 0x30
   13ed8:	ldr	r3, [pc, #744]	; 141c8 <__assert_fail@plt+0x301c>
   13edc:	ldr	lr, [r8, #24]
   13ee0:	and	r3, r3, r2
   13ee4:	mov	r1, #0
   13ee8:	cmp	r3, #0
   13eec:	mov	ip, #3
   13ef0:	mov	r2, #9
   13ef4:	mov	r3, #1
   13ef8:	str	r8, [r0, #44]	; 0x2c
   13efc:	str	r0, [r8]
   13f00:	str	r7, [r0, #8]
   13f04:	str	lr, [r0, #28]
   13f08:	strb	r1, [r0, #168]	; 0xa8
   13f0c:	str	r1, [r0, #52]	; 0x34
   13f10:	str	r1, [r0, #32]
   13f14:	str	r1, [r0, #12]
   13f18:	strh	r1, [r0, #58]	; 0x3a
   13f1c:	str	r1, [r0, #16]
   13f20:	str	r1, [r0, #20]
   13f24:	strh	ip, [r0, #60]	; 0x3c
   13f28:	strh	r2, [r0, #56]	; 0x38
   13f2c:	str	r3, [r0, #48]	; 0x30
   13f30:	bne	14024 <__assert_fail@plt+0x2e78>
   13f34:	mov	r0, #32
   13f38:	bl	1c098 <__assert_fail@plt+0xaeec>
   13f3c:	cmp	r0, #0
   13f40:	str	r0, [r8, #56]	; 0x38
   13f44:	beq	13f98 <__assert_fail@plt+0x2dec>
   13f48:	bl	1c19c <__assert_fail@plt+0xaff0>
   13f4c:	ldr	r3, [r8, #48]	; 0x30
   13f50:	tst	r3, #516	; 0x204
   13f54:	beq	14054 <__assert_fail@plt+0x2ea8>
   13f58:	mvn	r1, #0
   13f5c:	add	r0, r8, #60	; 0x3c
   13f60:	bl	167bc <__assert_fail@plt+0x5610>
   13f64:	mov	r0, r8
   13f68:	add	sp, sp, #36	; 0x24
   13f6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f70:	ldrb	r2, [r3, #-1]!
   13f74:	cmp	r2, #47	; 0x2f
   13f78:	bne	13de0 <__assert_fail@plt+0x2c34>
   13f7c:	sub	r5, r5, #1
   13f80:	cmp	r5, #1
   13f84:	bne	13f70 <__assert_fail@plt+0x2dc4>
   13f88:	mov	r0, #176	; 0xb0
   13f8c:	bl	1c098 <__assert_fail@plt+0xaeec>
   13f90:	subs	r4, r0, #0
   13f94:	bne	13df4 <__assert_fail@plt+0x2c48>
   13f98:	cmp	r7, #0
   13f9c:	beq	13fc4 <__assert_fail@plt+0x2e18>
   13fa0:	ldr	r3, [r7, #12]
   13fa4:	ldr	r4, [r7, #8]
   13fa8:	subs	r0, r3, #0
   13fac:	beq	13fb4 <__assert_fail@plt+0x2e08>
   13fb0:	bl	111a0 <closedir@plt>
   13fb4:	mov	r0, r7
   13fb8:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13fbc:	subs	r7, r4, #0
   13fc0:	bne	13fa0 <__assert_fail@plt+0x2df4>
   13fc4:	ldr	r0, [sp, #16]
   13fc8:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13fcc:	ldr	r0, [r8, #24]
   13fd0:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13fd4:	b	13ff4 <__assert_fail@plt+0x2e48>
   13fd8:	ldr	r0, [r8, #24]
   13fdc:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13fe0:	mov	r3, #0
   13fe4:	str	r3, [r8, #24]
   13fe8:	bl	11068 <__errno_location@plt>
   13fec:	mov	r3, #36	; 0x24
   13ff0:	str	r3, [r0]
   13ff4:	mov	r0, r8
   13ff8:	bl	1c598 <__assert_fail@plt+0xb3ec>
   13ffc:	mov	r8, #0
   14000:	mov	r0, r8
   14004:	add	sp, sp, #36	; 0x24
   14008:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1400c:	bl	11068 <__errno_location@plt>
   14010:	mov	r3, #22
   14014:	str	r3, [r0]
   14018:	mov	r0, r8
   1401c:	add	sp, sp, #36	; 0x24
   14020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14024:	ldr	r3, [pc, #416]	; 141cc <__assert_fail@plt+0x3020>
   14028:	ldr	r2, [pc, #416]	; 141d0 <__assert_fail@plt+0x3024>
   1402c:	str	r3, [sp]
   14030:	mov	r0, #31
   14034:	ldr	r3, [pc, #408]	; 141d4 <__assert_fail@plt+0x3028>
   14038:	bl	156b0 <__assert_fail@plt+0x4504>
   1403c:	cmp	r0, #0
   14040:	str	r0, [r8, #56]	; 0x38
   14044:	beq	13f98 <__assert_fail@plt+0x2dec>
   14048:	ldr	r3, [r8, #48]	; 0x30
   1404c:	tst	r3, #516	; 0x204
   14050:	bne	13f58 <__assert_fail@plt+0x2dac>
   14054:	ldr	r2, [pc, #380]	; 141d8 <__assert_fail@plt+0x302c>
   14058:	tst	r3, #16
   1405c:	ldr	r1, [pc, #376]	; 141dc <__assert_fail@plt+0x3030>
   14060:	moveq	r1, r2
   14064:	tst	r3, #512	; 0x200
   14068:	bne	1417c <__assert_fail@plt+0x2fd0>
   1406c:	ldr	r0, [pc, #364]	; 141e0 <__assert_fail@plt+0x3034>
   14070:	bl	1c500 <__assert_fail@plt+0xb354>
   14074:	cmp	r0, #0
   14078:	str	r0, [r8, #28]
   1407c:	ldrlt	r3, [r8, #48]	; 0x30
   14080:	orrlt	r3, r3, #4
   14084:	strlt	r3, [r8, #48]	; 0x30
   14088:	b	13f58 <__assert_fail@plt+0x2dac>
   1408c:	ldr	r3, [sp, #12]
   14090:	cmp	r3, #0
   14094:	strne	fp, [sp, #16]
   14098:	bne	13d2c <__assert_fail@plt+0x2b80>
   1409c:	str	r3, [sp, #16]
   140a0:	mov	r7, r3
   140a4:	b	13ec4 <__assert_fail@plt+0x2d18>
   140a8:	bl	11068 <__errno_location@plt>
   140ac:	mov	r8, #0
   140b0:	mov	r3, #22
   140b4:	str	r3, [r0]
   140b8:	mov	r0, r8
   140bc:	add	sp, sp, #36	; 0x24
   140c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140c4:	ldr	r2, [r8, #40]	; 0x28
   140c8:	ldr	r5, [r8, #44]	; 0x2c
   140cc:	cmp	r4, r2
   140d0:	bls	14114 <__assert_fail@plt+0x2f68>
   140d4:	add	r1, sl, #41	; 0x29
   140d8:	cmn	r1, #-1073741823	; 0xc0000001
   140dc:	str	r1, [r8, #40]	; 0x28
   140e0:	bhi	14190 <__assert_fail@plt+0x2fe4>
   140e4:	lsl	r1, r1, #2
   140e8:	ldr	r0, [r8, #8]
   140ec:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   140f0:	cmp	r0, #0
   140f4:	beq	14190 <__assert_fail@plt+0x2fe4>
   140f8:	str	r0, [r8, #8]
   140fc:	b	14118 <__assert_fail@plt+0x2f6c>
   14100:	mov	r3, #1
   14104:	str	r3, [sp, #24]
   14108:	b	13d3c <__assert_fail@plt+0x2b90>
   1410c:	mov	r4, #4096	; 0x1000
   14110:	b	13c94 <__assert_fail@plt+0x2ae8>
   14114:	ldr	r0, [r8, #8]
   14118:	mov	r2, r0
   1411c:	str	r7, [r2], #4
   14120:	ldr	r7, [r7, #8]
   14124:	cmp	r7, #0
   14128:	bne	1411c <__assert_fail@plt+0x2f70>
   1412c:	mov	r3, r5
   14130:	mov	r1, r4
   14134:	mov	r2, #4
   14138:	bl	11134 <qsort@plt>
   1413c:	ldr	ip, [r8, #8]
   14140:	cmp	sl, #0
   14144:	ldr	r7, [ip]
   14148:	moveq	r3, r7
   1414c:	beq	14170 <__assert_fail@plt+0x2fc4>
   14150:	mov	r2, sl
   14154:	mov	r3, ip
   14158:	ldr	r1, [r3]
   1415c:	ldr	r0, [r3, #4]!
   14160:	subs	r2, r2, #1
   14164:	str	r0, [r1, #8]
   14168:	bne	14158 <__assert_fail@plt+0x2fac>
   1416c:	ldr	r3, [ip, sl, lsl #2]
   14170:	mov	r2, #0
   14174:	str	r2, [r3, #8]
   14178:	b	13ec4 <__assert_fail@plt+0x2d18>
   1417c:	mov	r2, r1
   14180:	ldr	r0, [r8, #32]
   14184:	ldr	r1, [pc, #84]	; 141e0 <__assert_fail@plt+0x3034>
   14188:	bl	16da8 <__assert_fail@plt+0x5bfc>
   1418c:	b	14074 <__assert_fail@plt+0x2ec8>
   14190:	ldr	r0, [r8, #8]
   14194:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14198:	mov	r3, #0
   1419c:	str	r3, [r8, #8]
   141a0:	str	r3, [r8, #40]	; 0x28
   141a4:	b	13ec4 <__assert_fail@plt+0x2d18>
   141a8:	ldr	r0, [r8, #24]
   141ac:	bl	1c598 <__assert_fail@plt+0xb3ec>
   141b0:	str	r4, [r8, #24]
   141b4:	b	13ff4 <__assert_fail@plt+0x2e48>
   141b8:	str	r0, [r8]
   141bc:	b	13f98 <__assert_fail@plt+0x2dec>
   141c0:	mov	r7, fp
   141c4:	b	13ec4 <__assert_fail@plt+0x2d18>
   141c8:	andeq	r0, r0, r2, lsl #2
   141cc:	muleq	r1, r8, r5
   141d0:	andeq	r2, r1, r8, lsl #17
   141d4:	andeq	r2, r1, r4, asr #16
   141d8:	andeq	r4, r8, r0, lsl #18
   141dc:	andeq	ip, r8, r0, lsl #18
   141e0:	muleq	r1, ip, r9
   141e4:	ldr	r3, [r0]
   141e8:	push	{r4, r5, r6, lr}
   141ec:	cmp	r3, #0
   141f0:	mov	r6, r0
   141f4:	beq	14230 <__assert_fail@plt+0x3084>
   141f8:	ldr	r2, [r3, #48]	; 0x30
   141fc:	cmp	r2, #0
   14200:	blt	14370 <__assert_fail@plt+0x31c4>
   14204:	ldr	r4, [r3, #8]
   14208:	mov	r0, r3
   1420c:	cmp	r4, #0
   14210:	ldreq	r4, [r3, #4]
   14214:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14218:	mov	r3, r4
   1421c:	ldr	r2, [r4, #48]	; 0x30
   14220:	cmp	r2, #0
   14224:	bge	14204 <__assert_fail@plt+0x3058>
   14228:	mov	r0, r4
   1422c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14230:	ldr	r4, [r6, #4]
   14234:	cmp	r4, #0
   14238:	beq	14260 <__assert_fail@plt+0x30b4>
   1423c:	ldr	r3, [r4, #12]
   14240:	ldr	r5, [r4, #8]
   14244:	subs	r0, r3, #0
   14248:	beq	14250 <__assert_fail@plt+0x30a4>
   1424c:	bl	111a0 <closedir@plt>
   14250:	mov	r0, r4
   14254:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14258:	subs	r4, r5, #0
   1425c:	bne	1423c <__assert_fail@plt+0x3090>
   14260:	ldr	r0, [r6, #8]
   14264:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14268:	ldr	r0, [r6, #24]
   1426c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14270:	ldr	r3, [r6, #48]	; 0x30
   14274:	tst	r3, #512	; 0x200
   14278:	beq	14314 <__assert_fail@plt+0x3168>
   1427c:	ldr	r0, [r6, #32]
   14280:	cmp	r0, #0
   14284:	blt	14294 <__assert_fail@plt+0x30e8>
   14288:	bl	11188 <close@plt>
   1428c:	cmp	r0, #0
   14290:	bne	14364 <__assert_fail@plt+0x31b8>
   14294:	mov	r5, #0
   14298:	add	r4, r6, #60	; 0x3c
   1429c:	b	142ac <__assert_fail@plt+0x3100>
   142a0:	bl	16834 <__assert_fail@plt+0x5688>
   142a4:	cmp	r0, #0
   142a8:	bge	1430c <__assert_fail@plt+0x3160>
   142ac:	mov	r0, r4
   142b0:	bl	167e8 <__assert_fail@plt+0x563c>
   142b4:	cmp	r0, #0
   142b8:	mov	r0, r4
   142bc:	beq	142a0 <__assert_fail@plt+0x30f4>
   142c0:	ldr	r0, [r6, #52]	; 0x34
   142c4:	cmp	r0, #0
   142c8:	beq	142d0 <__assert_fail@plt+0x3124>
   142cc:	bl	159a0 <__assert_fail@plt+0x47f4>
   142d0:	ldr	r2, [r6, #48]	; 0x30
   142d4:	ldr	r3, [pc, #204]	; 143a8 <__assert_fail@plt+0x31fc>
   142d8:	ldr	r0, [r6, #56]	; 0x38
   142dc:	and	r3, r3, r2
   142e0:	cmp	r3, #0
   142e4:	beq	1435c <__assert_fail@plt+0x31b0>
   142e8:	cmp	r0, #0
   142ec:	beq	142f4 <__assert_fail@plt+0x3148>
   142f0:	bl	159a0 <__assert_fail@plt+0x47f4>
   142f4:	mov	r0, r6
   142f8:	bl	1c598 <__assert_fail@plt+0xb3ec>
   142fc:	cmp	r5, #0
   14300:	bne	14398 <__assert_fail@plt+0x31ec>
   14304:	mov	r0, r5
   14308:	pop	{r4, r5, r6, pc}
   1430c:	bl	11188 <close@plt>
   14310:	b	142ac <__assert_fail@plt+0x3100>
   14314:	tst	r3, #4
   14318:	bne	14294 <__assert_fail@plt+0x30e8>
   1431c:	ldr	r0, [r6, #28]
   14320:	bl	11128 <fchdir@plt>
   14324:	cmp	r0, #0
   14328:	beq	14378 <__assert_fail@plt+0x31cc>
   1432c:	bl	11068 <__errno_location@plt>
   14330:	mov	r4, r0
   14334:	ldr	r0, [r6, #28]
   14338:	ldr	r5, [r4]
   1433c:	bl	11188 <close@plt>
   14340:	adds	r0, r0, #0
   14344:	movne	r0, #1
   14348:	cmp	r5, #0
   1434c:	movne	r0, #0
   14350:	cmp	r0, #0
   14354:	beq	14298 <__assert_fail@plt+0x30ec>
   14358:	b	14390 <__assert_fail@plt+0x31e4>
   1435c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14360:	b	142f4 <__assert_fail@plt+0x3148>
   14364:	bl	11068 <__errno_location@plt>
   14368:	ldr	r5, [r0]
   1436c:	b	14298 <__assert_fail@plt+0x30ec>
   14370:	mov	r4, r3
   14374:	b	14228 <__assert_fail@plt+0x307c>
   14378:	ldr	r0, [r6, #28]
   1437c:	bl	11188 <close@plt>
   14380:	cmp	r0, #0
   14384:	beq	14294 <__assert_fail@plt+0x30e8>
   14388:	bl	11068 <__errno_location@plt>
   1438c:	mov	r4, r0
   14390:	ldr	r5, [r4]
   14394:	b	14298 <__assert_fail@plt+0x30ec>
   14398:	bl	11068 <__errno_location@plt>
   1439c:	str	r5, [r0]
   143a0:	mvn	r5, #0
   143a4:	b	14304 <__assert_fail@plt+0x3158>
   143a8:	andeq	r0, r0, r2, lsl #2
   143ac:	push	{r4, r5, r6, r7, r8, r9, lr}
   143b0:	sub	sp, sp, #12
   143b4:	ldr	r4, [r0]
   143b8:	cmp	r4, #0
   143bc:	beq	144f0 <__assert_fail@plt+0x3344>
   143c0:	ldr	r1, [r0, #48]	; 0x30
   143c4:	ands	r5, r1, #8192	; 0x2000
   143c8:	bne	144f0 <__assert_fail@plt+0x3344>
   143cc:	ldrh	r3, [r4, #60]	; 0x3c
   143d0:	mov	r2, #3
   143d4:	mov	r7, r0
   143d8:	cmp	r3, #1
   143dc:	strh	r2, [r4, #60]	; 0x3c
   143e0:	beq	14868 <__assert_fail@plt+0x36bc>
   143e4:	cmp	r3, #2
   143e8:	beq	14500 <__assert_fail@plt+0x3354>
   143ec:	ldrh	r2, [r4, #56]	; 0x38
   143f0:	cmp	r2, #1
   143f4:	bne	1442c <__assert_fail@plt+0x3280>
   143f8:	cmp	r3, #4
   143fc:	bne	14518 <__assert_fail@plt+0x336c>
   14400:	b	14534 <__assert_fail@plt+0x3388>
   14404:	str	r6, [r7]
   14408:	mov	r0, r4
   1440c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14410:	ldr	r3, [r6, #48]	; 0x30
   14414:	cmp	r3, #0
   14418:	beq	145a0 <__assert_fail@plt+0x33f4>
   1441c:	ldrh	r3, [r6, #60]	; 0x3c
   14420:	mov	r4, r6
   14424:	cmp	r3, #4
   14428:	bne	14754 <__assert_fail@plt+0x35a8>
   1442c:	ldr	r6, [r4, #8]
   14430:	cmp	r6, #0
   14434:	bne	14404 <__assert_fail@plt+0x3258>
   14438:	ldr	r6, [r4, #4]
   1443c:	ldr	r3, [r6, #12]
   14440:	cmp	r3, #0
   14444:	bne	14af8 <__assert_fail@plt+0x394c>
   14448:	str	r6, [r7]
   1444c:	mov	r0, r4
   14450:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14454:	ldr	r3, [r6, #48]	; 0x30
   14458:	cmn	r3, #1
   1445c:	beq	149e8 <__assert_fail@plt+0x383c>
   14460:	ldrh	r3, [r6, #56]	; 0x38
   14464:	cmp	r3, #11
   14468:	beq	147c8 <__assert_fail@plt+0x361c>
   1446c:	ldr	r3, [r6, #40]	; 0x28
   14470:	ldr	r2, [r7, #24]
   14474:	mov	r1, #0
   14478:	strb	r1, [r2, r3]
   1447c:	ldr	r3, [r6, #48]	; 0x30
   14480:	cmp	r3, r1
   14484:	beq	148e4 <__assert_fail@plt+0x3738>
   14488:	ldrh	r3, [r6, #58]	; 0x3a
   1448c:	tst	r3, #2
   14490:	beq	148a4 <__assert_fail@plt+0x36f8>
   14494:	ldr	r3, [r7, #48]	; 0x30
   14498:	tst	r3, #4
   1449c:	beq	14958 <__assert_fail@plt+0x37ac>
   144a0:	ldr	r0, [r6, #36]	; 0x24
   144a4:	bl	11188 <close@plt>
   144a8:	ldr	r3, [r7, #48]	; 0x30
   144ac:	ldrh	r2, [r6, #56]	; 0x38
   144b0:	cmp	r2, #2
   144b4:	beq	144e8 <__assert_fail@plt+0x333c>
   144b8:	ldr	r2, [r6, #32]
   144bc:	cmp	r2, #0
   144c0:	movne	r2, #7
   144c4:	strhne	r2, [r6, #56]	; 0x38
   144c8:	bne	144e8 <__assert_fail@plt+0x333c>
   144cc:	mov	r2, #6
   144d0:	mov	r0, r3
   144d4:	strh	r2, [r6, #56]	; 0x38
   144d8:	add	r1, r7, #56	; 0x38
   144dc:	mov	r2, r6
   144e0:	bl	12b70 <__assert_fail@plt+0x19c4>
   144e4:	ldr	r3, [r7, #48]	; 0x30
   144e8:	tst	r3, #8192	; 0x2000
   144ec:	beq	14594 <__assert_fail@plt+0x33e8>
   144f0:	mov	r6, #0
   144f4:	mov	r0, r6
   144f8:	add	sp, sp, #12
   144fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14500:	ldrh	r3, [r4, #56]	; 0x38
   14504:	sub	r2, r3, #12
   14508:	cmp	r2, #1
   1450c:	bls	149a0 <__assert_fail@plt+0x37f4>
   14510:	cmp	r3, #1
   14514:	bne	1442c <__assert_fail@plt+0x3280>
   14518:	tst	r1, #64	; 0x40
   1451c:	beq	147d4 <__assert_fail@plt+0x3628>
   14520:	ldrd	r8, [r4, #64]	; 0x40
   14524:	ldrd	r2, [r7, #16]
   14528:	cmp	r9, r3
   1452c:	cmpeq	r8, r2
   14530:	beq	147d4 <__assert_fail@plt+0x3628>
   14534:	ldrh	r3, [r4, #58]	; 0x3a
   14538:	tst	r3, #2
   1453c:	bne	14aec <__assert_fail@plt+0x3940>
   14540:	ldr	r5, [r7, #4]
   14544:	cmp	r5, #0
   14548:	beq	14578 <__assert_fail@plt+0x33cc>
   1454c:	ldr	r0, [r5, #12]
   14550:	ldr	r6, [r5, #8]
   14554:	cmp	r0, #0
   14558:	beq	14560 <__assert_fail@plt+0x33b4>
   1455c:	bl	111a0 <closedir@plt>
   14560:	mov	r0, r5
   14564:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14568:	cmp	r6, #0
   1456c:	mov	r5, r6
   14570:	bne	1454c <__assert_fail@plt+0x33a0>
   14574:	str	r6, [r7, #4]
   14578:	mov	r3, #6
   1457c:	strh	r3, [r4, #56]	; 0x38
   14580:	mov	r2, r4
   14584:	add	r1, r7, #56	; 0x38
   14588:	ldr	r0, [r7, #48]	; 0x30
   1458c:	mov	r6, r4
   14590:	bl	12b70 <__assert_fail@plt+0x19c4>
   14594:	mov	r0, r6
   14598:	add	sp, sp, #12
   1459c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   145a0:	ldr	r3, [r7, #48]	; 0x30
   145a4:	ands	r8, r3, #4
   145a8:	addne	r4, r7, #60	; 0x3c
   145ac:	bne	145e0 <__assert_fail@plt+0x3434>
   145b0:	tst	r3, #512	; 0x200
   145b4:	bne	14a08 <__assert_fail@plt+0x385c>
   145b8:	ldr	r0, [r7, #28]
   145bc:	bl	11128 <fchdir@plt>
   145c0:	add	r4, r7, #60	; 0x3c
   145c4:	adds	r5, r0, #0
   145c8:	movne	r5, #1
   145cc:	b	145e0 <__assert_fail@plt+0x3434>
   145d0:	mov	r0, r4
   145d4:	bl	16834 <__assert_fail@plt+0x5688>
   145d8:	cmp	r0, #0
   145dc:	bge	147cc <__assert_fail@plt+0x3620>
   145e0:	mov	r0, r4
   145e4:	bl	167e8 <__assert_fail@plt+0x563c>
   145e8:	cmp	r0, #0
   145ec:	beq	145d0 <__assert_fail@plt+0x3424>
   145f0:	cmp	r5, #0
   145f4:	bne	14ac8 <__assert_fail@plt+0x391c>
   145f8:	ldr	r2, [r7, #48]	; 0x30
   145fc:	ldr	r3, [pc, #1760]	; 14ce4 <__assert_fail@plt+0x3b38>
   14600:	ldr	r0, [r7, #56]	; 0x38
   14604:	and	r3, r3, r2
   14608:	cmp	r3, #0
   1460c:	beq	14ac0 <__assert_fail@plt+0x3914>
   14610:	cmp	r0, #0
   14614:	beq	1461c <__assert_fail@plt+0x3470>
   14618:	bl	159a0 <__assert_fail@plt+0x47f4>
   1461c:	ldr	r2, [r6, #52]	; 0x34
   14620:	add	r5, r6, #168	; 0xa8
   14624:	str	r2, [r6, #40]	; 0x28
   14628:	mov	r1, r5
   1462c:	add	r2, r2, #1
   14630:	ldr	r0, [r7, #24]
   14634:	bl	10f00 <memmove@plt>
   14638:	mov	r0, r5
   1463c:	mov	r1, #47	; 0x2f
   14640:	bl	110ec <strrchr@plt>
   14644:	cmp	r0, #0
   14648:	beq	14678 <__assert_fail@plt+0x34cc>
   1464c:	cmp	r5, r0
   14650:	beq	14adc <__assert_fail@plt+0x3930>
   14654:	add	r4, r0, #1
   14658:	mov	r0, r4
   1465c:	bl	11044 <strlen@plt>
   14660:	mov	r1, r4
   14664:	mov	r8, r0
   14668:	add	r2, r8, #1
   1466c:	mov	r0, r5
   14670:	bl	10f00 <memmove@plt>
   14674:	str	r8, [r6, #52]	; 0x34
   14678:	ldr	r1, [r7, #48]	; 0x30
   1467c:	ldr	r3, [pc, #1632]	; 14ce4 <__assert_fail@plt+0x3b38>
   14680:	ldr	r2, [r7, #24]
   14684:	and	r3, r3, r1
   14688:	cmp	r3, #0
   1468c:	str	r2, [r6, #28]
   14690:	str	r2, [r6, #24]
   14694:	beq	14884 <__assert_fail@plt+0x36d8>
   14698:	ldr	r2, [pc, #1608]	; 14ce8 <__assert_fail@plt+0x3b3c>
   1469c:	ldr	r3, [pc, #1608]	; 14cec <__assert_fail@plt+0x3b40>
   146a0:	str	r2, [sp]
   146a4:	mov	r1, #0
   146a8:	ldr	r2, [pc, #1600]	; 14cf0 <__assert_fail@plt+0x3b44>
   146ac:	mov	r0, #31
   146b0:	bl	156b0 <__assert_fail@plt+0x4504>
   146b4:	ldrh	r3, [r6, #56]	; 0x38
   146b8:	str	r0, [r7, #56]	; 0x38
   146bc:	cmp	r3, #11
   146c0:	str	r6, [r7]
   146c4:	beq	147ac <__assert_fail@plt+0x3600>
   146c8:	cmp	r3, #1
   146cc:	bne	14594 <__assert_fail@plt+0x33e8>
   146d0:	ldr	r3, [r6, #48]	; 0x30
   146d4:	cmp	r3, #0
   146d8:	ldrdeq	r2, [r6, #64]	; 0x40
   146dc:	strdeq	r2, [r7, #16]
   146e0:	ldr	r2, [r7, #48]	; 0x30
   146e4:	ldr	r3, [pc, #1528]	; 14ce4 <__assert_fail@plt+0x3b38>
   146e8:	and	r3, r3, r2
   146ec:	cmp	r3, #0
   146f0:	beq	14848 <__assert_fail@plt+0x369c>
   146f4:	mov	r0, #24
   146f8:	bl	1c098 <__assert_fail@plt+0xaeec>
   146fc:	subs	r8, r0, #0
   14700:	beq	149d4 <__assert_fail@plt+0x3828>
   14704:	ldrd	r4, [r6, #64]	; 0x40
   14708:	ldrd	r2, [r6, #160]	; 0xa0
   1470c:	ldr	r0, [r7, #56]	; 0x38
   14710:	strd	r4, [r8]
   14714:	strd	r2, [r8, #8]
   14718:	str	r6, [r8, #16]
   1471c:	mov	r1, r8
   14720:	bl	16018 <__assert_fail@plt+0x4e6c>
   14724:	cmp	r8, r0
   14728:	mov	r4, r0
   1472c:	beq	14594 <__assert_fail@plt+0x33e8>
   14730:	mov	r0, r8
   14734:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14738:	cmp	r4, #0
   1473c:	beq	149d4 <__assert_fail@plt+0x3828>
   14740:	ldr	r2, [r4, #16]
   14744:	mov	r3, #2
   14748:	str	r2, [r6]
   1474c:	strh	r3, [r6, #56]	; 0x38
   14750:	b	14594 <__assert_fail@plt+0x33e8>
   14754:	cmp	r3, #2
   14758:	beq	14b2c <__assert_fail@plt+0x3980>
   1475c:	ldr	r3, [r6, #4]
   14760:	mov	ip, #47	; 0x2f
   14764:	ldr	r2, [r7, #24]
   14768:	ldr	r0, [r3, #40]	; 0x28
   1476c:	ldr	lr, [r3, #28]
   14770:	sub	r3, r0, #1
   14774:	add	r1, r6, #168	; 0xa8
   14778:	ldrb	lr, [lr, r3]
   1477c:	cmp	lr, ip
   14780:	movne	r3, r0
   14784:	add	r0, r2, r3
   14788:	strb	ip, [r2, r3]
   1478c:	ldr	r2, [r6, #52]	; 0x34
   14790:	add	r0, r0, #1
   14794:	add	r2, r2, #1
   14798:	bl	10f00 <memmove@plt>
   1479c:	ldrh	r3, [r6, #56]	; 0x38
   147a0:	str	r6, [r7]
   147a4:	cmp	r3, #11
   147a8:	bne	146c8 <__assert_fail@plt+0x351c>
   147ac:	ldrd	r2, [r6, #112]	; 0x70
   147b0:	cmp	r3, #0
   147b4:	cmpeq	r2, #2
   147b8:	beq	14b58 <__assert_fail@plt+0x39ac>
   147bc:	cmp	r3, #0
   147c0:	cmpeq	r2, #1
   147c4:	beq	14594 <__assert_fail@plt+0x33e8>
   147c8:	bl	1117c <abort@plt>
   147cc:	bl	11188 <close@plt>
   147d0:	b	145e0 <__assert_fail@plt+0x3434>
   147d4:	ldr	r5, [r7, #4]
   147d8:	cmp	r5, #0
   147dc:	beq	14a68 <__assert_fail@plt+0x38bc>
   147e0:	tst	r1, #4096	; 0x1000
   147e4:	bne	14a34 <__assert_fail@plt+0x3888>
   147e8:	ldr	r3, [r4, #24]
   147ec:	mvn	r2, #0
   147f0:	mov	r1, r4
   147f4:	mov	r0, r7
   147f8:	bl	12c28 <__assert_fail@plt+0x1a7c>
   147fc:	cmp	r0, #0
   14800:	beq	14948 <__assert_fail@plt+0x379c>
   14804:	bl	11068 <__errno_location@plt>
   14808:	ldrh	r3, [r4, #58]	; 0x3a
   1480c:	ldr	r6, [r7, #4]
   14810:	orr	r3, r3, #1
   14814:	cmp	r6, #0
   14818:	ldr	r2, [r0]
   1481c:	strh	r3, [r4, #58]	; 0x3a
   14820:	str	r2, [r4, #32]
   14824:	beq	1494c <__assert_fail@plt+0x37a0>
   14828:	mov	r3, r6
   1482c:	ldr	r2, [r3, #4]
   14830:	ldr	r2, [r2, #24]
   14834:	str	r2, [r3, #24]
   14838:	ldr	r3, [r3, #8]
   1483c:	cmp	r3, #0
   14840:	bne	1482c <__assert_fail@plt+0x3680>
   14844:	b	1494c <__assert_fail@plt+0x37a0>
   14848:	ldr	r0, [r7, #56]	; 0x38
   1484c:	add	r1, r6, #64	; 0x40
   14850:	bl	1c1c0 <__assert_fail@plt+0xb014>
   14854:	cmp	r0, #0
   14858:	movne	r3, #2
   1485c:	strne	r6, [r6]
   14860:	strhne	r3, [r6, #56]	; 0x38
   14864:	b	14594 <__assert_fail@plt+0x33e8>
   14868:	mov	r3, r5
   1486c:	ldr	r0, [r0, #32]
   14870:	mov	r2, r4
   14874:	bl	12a24 <__assert_fail@plt+0x1878>
   14878:	mov	r6, r4
   1487c:	strh	r0, [r4, #56]	; 0x38
   14880:	b	14594 <__assert_fail@plt+0x33e8>
   14884:	mov	r0, #32
   14888:	bl	1c098 <__assert_fail@plt+0xaeec>
   1488c:	cmp	r0, #0
   14890:	str	r0, [r7, #56]	; 0x38
   14894:	beq	1479c <__assert_fail@plt+0x35f0>
   14898:	bl	1c19c <__assert_fail@plt+0xaff0>
   1489c:	ldrh	r3, [r6, #56]	; 0x38
   148a0:	b	146bc <__assert_fail@plt+0x3510>
   148a4:	tst	r3, #1
   148a8:	bne	144a8 <__assert_fail@plt+0x32fc>
   148ac:	ldr	r3, [pc, #1088]	; 14cf4 <__assert_fail@plt+0x3b48>
   148b0:	mvn	r2, #0
   148b4:	ldr	r1, [r6, #4]
   148b8:	mov	r0, r7
   148bc:	bl	12c28 <__assert_fail@plt+0x1a7c>
   148c0:	cmp	r0, #0
   148c4:	beq	144a8 <__assert_fail@plt+0x32fc>
   148c8:	bl	11068 <__errno_location@plt>
   148cc:	ldr	r3, [r7, #48]	; 0x30
   148d0:	orr	r3, r3, #8192	; 0x2000
   148d4:	ldr	r2, [r0]
   148d8:	str	r2, [r6, #32]
   148dc:	str	r3, [r7, #48]	; 0x30
   148e0:	b	144ac <__assert_fail@plt+0x3300>
   148e4:	ldr	r3, [r7, #48]	; 0x30
   148e8:	ands	r8, r3, #4
   148ec:	addne	r4, r7, #60	; 0x3c
   148f0:	bne	14924 <__assert_fail@plt+0x3778>
   148f4:	tst	r3, #512	; 0x200
   148f8:	bne	14ba4 <__assert_fail@plt+0x39f8>
   148fc:	ldr	r0, [r7, #28]
   14900:	bl	11128 <fchdir@plt>
   14904:	add	r4, r7, #60	; 0x3c
   14908:	adds	r5, r0, #0
   1490c:	movne	r5, #1
   14910:	b	14924 <__assert_fail@plt+0x3778>
   14914:	mov	r0, r4
   14918:	bl	16834 <__assert_fail@plt+0x5688>
   1491c:	cmp	r0, #0
   14920:	bge	14940 <__assert_fail@plt+0x3794>
   14924:	mov	r0, r4
   14928:	bl	167e8 <__assert_fail@plt+0x563c>
   1492c:	cmp	r0, #0
   14930:	beq	14914 <__assert_fail@plt+0x3768>
   14934:	cmp	r5, #0
   14938:	bne	148c8 <__assert_fail@plt+0x371c>
   1493c:	b	144a8 <__assert_fail@plt+0x32fc>
   14940:	bl	11188 <close@plt>
   14944:	b	14924 <__assert_fail@plt+0x3778>
   14948:	ldr	r6, [r7, #4]
   1494c:	mov	r3, #0
   14950:	str	r3, [r7, #4]
   14954:	b	1475c <__assert_fail@plt+0x35b0>
   14958:	tst	r3, #512	; 0x200
   1495c:	beq	14b78 <__assert_fail@plt+0x39cc>
   14960:	ldr	r1, [r7, #32]
   14964:	ldr	r4, [r6, #36]	; 0x24
   14968:	cmn	r1, #100	; 0x64
   1496c:	sub	r3, r4, r1
   14970:	clz	r3, r3
   14974:	lsr	r3, r3, #5
   14978:	moveq	r3, #0
   1497c:	cmp	r3, #0
   14980:	bne	147c8 <__assert_fail@plt+0x361c>
   14984:	add	r0, r7, #60	; 0x3c
   14988:	bl	167f0 <__assert_fail@plt+0x5644>
   1498c:	cmp	r0, #0
   14990:	blt	14998 <__assert_fail@plt+0x37ec>
   14994:	bl	11188 <close@plt>
   14998:	str	r4, [r7, #32]
   1499c:	b	144a0 <__assert_fail@plt+0x32f4>
   149a0:	mov	r3, #1
   149a4:	mov	r2, r4
   149a8:	ldr	r0, [r0, #32]
   149ac:	bl	12a24 <__assert_fail@plt+0x1878>
   149b0:	cmp	r0, #1
   149b4:	strh	r0, [r4, #56]	; 0x38
   149b8:	mov	r3, r0
   149bc:	beq	14be4 <__assert_fail@plt+0x3a38>
   149c0:	cmp	r0, #11
   149c4:	mov	r6, r4
   149c8:	str	r4, [r7]
   149cc:	bne	14594 <__assert_fail@plt+0x33e8>
   149d0:	b	147ac <__assert_fail@plt+0x3600>
   149d4:	bl	11068 <__errno_location@plt>
   149d8:	mov	r3, #12
   149dc:	mov	r6, #0
   149e0:	str	r3, [r0]
   149e4:	b	14594 <__assert_fail@plt+0x33e8>
   149e8:	mov	r0, r6
   149ec:	bl	1c598 <__assert_fail@plt+0xb3ec>
   149f0:	bl	11068 <__errno_location@plt>
   149f4:	mov	r3, #0
   149f8:	mov	r6, r3
   149fc:	str	r3, [r0]
   14a00:	str	r3, [r7]
   14a04:	b	14594 <__assert_fail@plt+0x33e8>
   14a08:	add	r4, r7, #60	; 0x3c
   14a0c:	mov	r0, r4
   14a10:	ldr	r1, [r7, #32]
   14a14:	bl	167f0 <__assert_fail@plt+0x5644>
   14a18:	cmp	r0, #0
   14a1c:	blt	14a24 <__assert_fail@plt+0x3878>
   14a20:	bl	11188 <close@plt>
   14a24:	mvn	r3, #99	; 0x63
   14a28:	mov	r5, r8
   14a2c:	str	r3, [r7, #32]
   14a30:	b	145e0 <__assert_fail@plt+0x3434>
   14a34:	bic	ip, r1, #4096	; 0x1000
   14a38:	str	ip, [r7, #48]	; 0x30
   14a3c:	ldr	r0, [r5, #12]
   14a40:	ldr	r6, [r5, #8]
   14a44:	cmp	r0, #0
   14a48:	beq	14a50 <__assert_fail@plt+0x38a4>
   14a4c:	bl	111a0 <closedir@plt>
   14a50:	mov	r0, r5
   14a54:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14a58:	cmp	r6, #0
   14a5c:	mov	r5, r6
   14a60:	bne	14a3c <__assert_fail@plt+0x3890>
   14a64:	str	r6, [r7, #4]
   14a68:	mov	r1, #3
   14a6c:	mov	r0, r7
   14a70:	bl	12ec0 <__assert_fail@plt+0x1d14>
   14a74:	cmp	r0, #0
   14a78:	mov	r6, r0
   14a7c:	str	r0, [r7, #4]
   14a80:	bne	1494c <__assert_fail@plt+0x37a0>
   14a84:	ldr	r0, [r7, #48]	; 0x30
   14a88:	tst	r0, #8192	; 0x2000
   14a8c:	bne	144f0 <__assert_fail@plt+0x3344>
   14a90:	ldr	r3, [r4, #32]
   14a94:	cmp	r3, #0
   14a98:	beq	14aac <__assert_fail@plt+0x3900>
   14a9c:	ldrh	r3, [r4, #56]	; 0x38
   14aa0:	cmp	r3, #4
   14aa4:	movne	r3, #7
   14aa8:	strhne	r3, [r4, #56]	; 0x38
   14aac:	add	r1, r7, #56	; 0x38
   14ab0:	mov	r2, r4
   14ab4:	bl	12b70 <__assert_fail@plt+0x19c4>
   14ab8:	mov	r6, r4
   14abc:	b	14594 <__assert_fail@plt+0x33e8>
   14ac0:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14ac4:	b	1461c <__assert_fail@plt+0x3470>
   14ac8:	ldr	r3, [r7, #48]	; 0x30
   14acc:	mov	r6, #0
   14ad0:	orr	r3, r3, #8192	; 0x2000
   14ad4:	str	r3, [r7, #48]	; 0x30
   14ad8:	b	14594 <__assert_fail@plt+0x33e8>
   14adc:	ldrb	r3, [r6, #169]	; 0xa9
   14ae0:	cmp	r3, #0
   14ae4:	bne	14654 <__assert_fail@plt+0x34a8>
   14ae8:	b	14678 <__assert_fail@plt+0x34cc>
   14aec:	ldr	r0, [r4, #36]	; 0x24
   14af0:	bl	11188 <close@plt>
   14af4:	b	14540 <__assert_fail@plt+0x3394>
   14af8:	ldr	r3, [r6, #40]	; 0x28
   14afc:	ldr	r2, [r7, #24]
   14b00:	mov	r0, #0
   14b04:	str	r6, [r7]
   14b08:	mov	r1, #3
   14b0c:	strb	r0, [r2, r3]
   14b10:	mov	r0, r7
   14b14:	bl	12ec0 <__assert_fail@plt+0x1d14>
   14b18:	subs	r6, r0, #0
   14b1c:	beq	14bd0 <__assert_fail@plt+0x3a24>
   14b20:	mov	r0, r4
   14b24:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14b28:	b	1475c <__assert_fail@plt+0x35b0>
   14b2c:	mov	r3, #1
   14b30:	mov	r2, r6
   14b34:	ldr	r1, [r7, #48]	; 0x30
   14b38:	ldr	r0, [r7, #32]
   14b3c:	bl	12a24 <__assert_fail@plt+0x1878>
   14b40:	cmp	r0, #1
   14b44:	strh	r0, [r6, #56]	; 0x38
   14b48:	beq	14bfc <__assert_fail@plt+0x3a50>
   14b4c:	mov	r3, #3
   14b50:	strh	r3, [r6, #60]	; 0x3c
   14b54:	b	1475c <__assert_fail@plt+0x35b0>
   14b58:	mov	r3, #0
   14b5c:	mov	r2, r6
   14b60:	ldr	r1, [r7, #48]	; 0x30
   14b64:	ldr	r0, [r7, #32]
   14b68:	bl	12a24 <__assert_fail@plt+0x1878>
   14b6c:	mov	r3, r0
   14b70:	strh	r0, [r6, #56]	; 0x38
   14b74:	b	146c8 <__assert_fail@plt+0x351c>
   14b78:	ldr	r0, [r6, #36]	; 0x24
   14b7c:	bl	11128 <fchdir@plt>
   14b80:	cmp	r0, #0
   14b84:	beq	144a0 <__assert_fail@plt+0x32f4>
   14b88:	bl	11068 <__errno_location@plt>
   14b8c:	ldr	r3, [r7, #48]	; 0x30
   14b90:	orr	r3, r3, #8192	; 0x2000
   14b94:	ldr	r2, [r0]
   14b98:	str	r2, [r6, #32]
   14b9c:	str	r3, [r7, #48]	; 0x30
   14ba0:	b	144a0 <__assert_fail@plt+0x32f4>
   14ba4:	add	r4, r7, #60	; 0x3c
   14ba8:	mov	r0, r4
   14bac:	ldr	r1, [r7, #32]
   14bb0:	bl	167f0 <__assert_fail@plt+0x5644>
   14bb4:	cmp	r0, #0
   14bb8:	blt	14bc0 <__assert_fail@plt+0x3a14>
   14bbc:	bl	11188 <close@plt>
   14bc0:	mvn	r3, #99	; 0x63
   14bc4:	mov	r5, r8
   14bc8:	str	r3, [r7, #32]
   14bcc:	b	14924 <__assert_fail@plt+0x3778>
   14bd0:	ldr	r3, [r7, #48]	; 0x30
   14bd4:	tst	r3, #8192	; 0x2000
   14bd8:	bne	144f0 <__assert_fail@plt+0x3344>
   14bdc:	ldr	r6, [r4, #4]
   14be0:	b	14448 <__assert_fail@plt+0x329c>
   14be4:	ldr	r1, [r7, #48]	; 0x30
   14be8:	tst	r1, #4
   14bec:	beq	14c48 <__assert_fail@plt+0x3a9c>
   14bf0:	str	r4, [r7]
   14bf4:	mov	r6, r4
   14bf8:	b	146c8 <__assert_fail@plt+0x351c>
   14bfc:	ldr	r3, [r7, #48]	; 0x30
   14c00:	tst	r3, #4
   14c04:	bne	14b4c <__assert_fail@plt+0x39a0>
   14c08:	ldr	r1, [pc, #232]	; 14cf8 <__assert_fail@plt+0x3b4c>
   14c0c:	tst	r3, #16
   14c10:	ldr	r2, [pc, #228]	; 14cfc <__assert_fail@plt+0x3b50>
   14c14:	movne	r2, r1
   14c18:	tst	r3, #512	; 0x200
   14c1c:	bne	14ca8 <__assert_fail@plt+0x3afc>
   14c20:	mov	r1, r2
   14c24:	ldr	r0, [pc, #212]	; 14d00 <__assert_fail@plt+0x3b54>
   14c28:	bl	1c500 <__assert_fail@plt+0xb354>
   14c2c:	cmp	r0, #0
   14c30:	str	r0, [r6, #36]	; 0x24
   14c34:	blt	14c90 <__assert_fail@plt+0x3ae4>
   14c38:	ldrh	r3, [r6, #58]	; 0x3a
   14c3c:	orr	r3, r3, #2
   14c40:	strh	r3, [r6, #58]	; 0x3a
   14c44:	b	14b4c <__assert_fail@plt+0x39a0>
   14c48:	ldr	r3, [pc, #168]	; 14cf8 <__assert_fail@plt+0x3b4c>
   14c4c:	tst	r1, #16
   14c50:	ldr	r2, [pc, #164]	; 14cfc <__assert_fail@plt+0x3b50>
   14c54:	movne	r2, r3
   14c58:	tst	r1, #512	; 0x200
   14c5c:	bne	14cd4 <__assert_fail@plt+0x3b28>
   14c60:	mov	r1, r2
   14c64:	ldr	r0, [pc, #148]	; 14d00 <__assert_fail@plt+0x3b54>
   14c68:	bl	1c500 <__assert_fail@plt+0xb354>
   14c6c:	cmp	r0, #0
   14c70:	str	r0, [r4, #36]	; 0x24
   14c74:	blt	14cb8 <__assert_fail@plt+0x3b0c>
   14c78:	ldrh	r2, [r4, #58]	; 0x3a
   14c7c:	ldrh	r3, [r4, #56]	; 0x38
   14c80:	mov	r6, r4
   14c84:	orr	r2, r2, #2
   14c88:	strh	r2, [r4, #58]	; 0x3a
   14c8c:	b	146bc <__assert_fail@plt+0x3510>
   14c90:	bl	11068 <__errno_location@plt>
   14c94:	mov	r2, #7
   14c98:	ldr	r3, [r0]
   14c9c:	strh	r2, [r6, #56]	; 0x38
   14ca0:	str	r3, [r6, #32]
   14ca4:	b	14b4c <__assert_fail@plt+0x39a0>
   14ca8:	ldr	r1, [pc, #80]	; 14d00 <__assert_fail@plt+0x3b54>
   14cac:	ldr	r0, [r7, #32]
   14cb0:	bl	16da8 <__assert_fail@plt+0x5bfc>
   14cb4:	b	14c2c <__assert_fail@plt+0x3a80>
   14cb8:	bl	11068 <__errno_location@plt>
   14cbc:	mov	r2, #7
   14cc0:	mov	r3, r2
   14cc4:	ldr	r1, [r0]
   14cc8:	strh	r2, [r4, #56]	; 0x38
   14ccc:	str	r1, [r4, #32]
   14cd0:	b	14bf0 <__assert_fail@plt+0x3a44>
   14cd4:	ldr	r1, [pc, #36]	; 14d00 <__assert_fail@plt+0x3b54>
   14cd8:	ldr	r0, [r7, #32]
   14cdc:	bl	16da8 <__assert_fail@plt+0x5bfc>
   14ce0:	b	14c6c <__assert_fail@plt+0x3ac0>
   14ce4:	andeq	r0, r0, r2, lsl #2
   14ce8:	muleq	r1, r8, r5
   14cec:	andeq	r2, r1, r4, asr #16
   14cf0:	andeq	r2, r1, r8, lsl #17
   14cf4:	muleq	r1, r8, r9
   14cf8:	andeq	ip, r8, r0, lsl #18
   14cfc:	andeq	r4, r8, r0, lsl #18
   14d00:	muleq	r1, ip, r9
   14d04:	cmp	r2, #4
   14d08:	bhi	14d1c <__assert_fail@plt+0x3b70>
   14d0c:	mov	r3, #0
   14d10:	strh	r2, [r1, #60]	; 0x3c
   14d14:	mov	r0, r3
   14d18:	bx	lr
   14d1c:	push	{r4, lr}
   14d20:	bl	11068 <__errno_location@plt>
   14d24:	mov	r2, #22
   14d28:	mov	r3, #1
   14d2c:	str	r2, [r0]
   14d30:	mov	r0, r3
   14d34:	pop	{r4, pc}
   14d38:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d3c:	bics	r4, r1, #4096	; 0x1000
   14d40:	bne	14eb4 <__assert_fail@plt+0x3d08>
   14d44:	mov	r6, r0
   14d48:	mov	r7, r1
   14d4c:	bl	11068 <__errno_location@plt>
   14d50:	ldr	r8, [r6]
   14d54:	str	r4, [r0]
   14d58:	ldr	r3, [r6, #48]	; 0x30
   14d5c:	mov	r9, r0
   14d60:	ands	r3, r3, #8192	; 0x2000
   14d64:	bne	14ecc <__assert_fail@plt+0x3d20>
   14d68:	ldrh	r2, [r8, #56]	; 0x38
   14d6c:	cmp	r2, #9
   14d70:	ldreq	r3, [r8, #8]
   14d74:	beq	14df8 <__assert_fail@plt+0x3c4c>
   14d78:	cmp	r2, #1
   14d7c:	bne	14df8 <__assert_fail@plt+0x3c4c>
   14d80:	ldr	r4, [r6, #4]
   14d84:	cmp	r4, #0
   14d88:	beq	14db0 <__assert_fail@plt+0x3c04>
   14d8c:	ldr	r0, [r4, #12]
   14d90:	ldr	r5, [r4, #8]
   14d94:	cmp	r0, #0
   14d98:	beq	14da0 <__assert_fail@plt+0x3bf4>
   14d9c:	bl	111a0 <closedir@plt>
   14da0:	mov	r0, r4
   14da4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   14da8:	subs	r4, r5, #0
   14dac:	bne	14d8c <__assert_fail@plt+0x3be0>
   14db0:	cmp	r7, #4096	; 0x1000
   14db4:	movne	r4, #1
   14db8:	beq	14e00 <__assert_fail@plt+0x3c54>
   14dbc:	ldr	r3, [r8, #48]	; 0x30
   14dc0:	cmp	r3, #0
   14dc4:	bne	14de4 <__assert_fail@plt+0x3c38>
   14dc8:	ldr	r3, [r8, #24]
   14dcc:	ldrb	r3, [r3]
   14dd0:	cmp	r3, #47	; 0x2f
   14dd4:	beq	14de4 <__assert_fail@plt+0x3c38>
   14dd8:	ldr	r3, [r6, #48]	; 0x30
   14ddc:	tst	r3, #4
   14de0:	beq	14e20 <__assert_fail@plt+0x3c74>
   14de4:	mov	r1, r4
   14de8:	mov	r0, r6
   14dec:	bl	12ec0 <__assert_fail@plt+0x1d14>
   14df0:	mov	r3, r0
   14df4:	str	r0, [r6, #4]
   14df8:	mov	r0, r3
   14dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e00:	ldr	r3, [r6, #48]	; 0x30
   14e04:	mov	r4, #2
   14e08:	orr	r3, r3, #4096	; 0x1000
   14e0c:	str	r3, [r6, #48]	; 0x30
   14e10:	ldr	r3, [r8, #48]	; 0x30
   14e14:	cmp	r3, #0
   14e18:	beq	14dc8 <__assert_fail@plt+0x3c1c>
   14e1c:	b	14de4 <__assert_fail@plt+0x3c38>
   14e20:	ldr	r2, [pc, #252]	; 14f24 <__assert_fail@plt+0x3d78>
   14e24:	tst	r3, #16
   14e28:	ldr	r1, [pc, #248]	; 14f28 <__assert_fail@plt+0x3d7c>
   14e2c:	moveq	r1, r2
   14e30:	tst	r3, #512	; 0x200
   14e34:	bne	14ef0 <__assert_fail@plt+0x3d44>
   14e38:	ldr	r0, [pc, #236]	; 14f2c <__assert_fail@plt+0x3d80>
   14e3c:	bl	1c500 <__assert_fail@plt+0xb354>
   14e40:	mov	r5, r0
   14e44:	cmp	r5, #0
   14e48:	movlt	r3, #0
   14e4c:	strlt	r3, [r6, #4]
   14e50:	blt	14df8 <__assert_fail@plt+0x3c4c>
   14e54:	mov	r1, r4
   14e58:	mov	r0, r6
   14e5c:	bl	12ec0 <__assert_fail@plt+0x1d14>
   14e60:	ldr	r3, [r6, #48]	; 0x30
   14e64:	ands	r4, r3, #512	; 0x200
   14e68:	str	r0, [r6, #4]
   14e6c:	beq	14ed4 <__assert_fail@plt+0x3d28>
   14e70:	ldr	r1, [r6, #32]
   14e74:	cmn	r1, #100	; 0x64
   14e78:	sub	r3, r5, r1
   14e7c:	clz	r3, r3
   14e80:	lsr	r3, r3, #5
   14e84:	moveq	r3, #0
   14e88:	cmp	r3, #0
   14e8c:	bne	14f20 <__assert_fail@plt+0x3d74>
   14e90:	add	r0, r6, #60	; 0x3c
   14e94:	bl	167f0 <__assert_fail@plt+0x5644>
   14e98:	cmp	r0, #0
   14e9c:	blt	14ea4 <__assert_fail@plt+0x3cf8>
   14ea0:	bl	11188 <close@plt>
   14ea4:	str	r5, [r6, #32]
   14ea8:	ldr	r3, [r6, #4]
   14eac:	mov	r0, r3
   14eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14eb4:	bl	11068 <__errno_location@plt>
   14eb8:	mov	r2, #22
   14ebc:	mov	r3, #0
   14ec0:	str	r2, [r0]
   14ec4:	mov	r0, r3
   14ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ecc:	mov	r3, r4
   14ed0:	b	14df8 <__assert_fail@plt+0x3c4c>
   14ed4:	mov	r0, r5
   14ed8:	bl	11128 <fchdir@plt>
   14edc:	cmp	r0, #0
   14ee0:	bne	14f08 <__assert_fail@plt+0x3d5c>
   14ee4:	mov	r0, r5
   14ee8:	bl	11188 <close@plt>
   14eec:	b	14ea8 <__assert_fail@plt+0x3cfc>
   14ef0:	mov	r2, r1
   14ef4:	ldr	r0, [r6, #32]
   14ef8:	ldr	r1, [pc, #44]	; 14f2c <__assert_fail@plt+0x3d80>
   14efc:	bl	16da8 <__assert_fail@plt+0x5bfc>
   14f00:	mov	r5, r0
   14f04:	b	14e44 <__assert_fail@plt+0x3c98>
   14f08:	ldr	r6, [r9]
   14f0c:	mov	r0, r5
   14f10:	bl	11188 <close@plt>
   14f14:	str	r6, [r9]
   14f18:	mov	r3, r4
   14f1c:	b	14df8 <__assert_fail@plt+0x3c4c>
   14f20:	bl	1117c <abort@plt>
   14f24:	andeq	r4, r8, r0, lsl #18
   14f28:	andeq	ip, r8, r0, lsl #18
   14f2c:	muleq	r1, ip, r9
   14f30:	push	{r4, lr}
   14f34:	ror	r0, r0, #3
   14f38:	bl	1ca50 <__assert_fail@plt+0xb8a4>
   14f3c:	mov	r0, r1
   14f40:	pop	{r4, pc}
   14f44:	sub	r0, r1, r0
   14f48:	clz	r0, r0
   14f4c:	lsr	r0, r0, #5
   14f50:	bx	lr
   14f54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14f58:	mov	r5, r1
   14f5c:	mov	r6, r0
   14f60:	ldr	r4, [r0, #24]
   14f64:	ldr	r1, [r0, #8]
   14f68:	mov	r0, r5
   14f6c:	mov	r8, r3
   14f70:	mov	sl, r2
   14f74:	blx	r4
   14f78:	ldr	r3, [r6, #8]
   14f7c:	cmp	r0, r3
   14f80:	bcs	15070 <__assert_fail@plt+0x3ec4>
   14f84:	ldr	r9, [r6]
   14f88:	mov	r7, r0
   14f8c:	add	r4, r9, r0, lsl #3
   14f90:	str	r4, [sl]
   14f94:	ldr	r3, [r9, r0, lsl #3]
   14f98:	cmp	r3, #0
   14f9c:	beq	15030 <__assert_fail@plt+0x3e84>
   14fa0:	cmp	r5, r3
   14fa4:	beq	14fc4 <__assert_fail@plt+0x3e18>
   14fa8:	mov	r1, r3
   14fac:	mov	r0, r5
   14fb0:	ldr	r3, [r6, #28]
   14fb4:	blx	r3
   14fb8:	cmp	r0, #0
   14fbc:	beq	15024 <__assert_fail@plt+0x3e78>
   14fc0:	ldr	r3, [r9, r7, lsl #3]
   14fc4:	cmp	r8, #0
   14fc8:	beq	14ff4 <__assert_fail@plt+0x3e48>
   14fcc:	ldr	r2, [r4, #4]
   14fd0:	cmp	r2, #0
   14fd4:	movne	ip, #0
   14fd8:	ldmne	r2, {r0, r1}
   14fdc:	streq	r2, [r9, r7, lsl #3]
   14fe0:	stmne	r4, {r0, r1}
   14fe4:	strne	ip, [r2]
   14fe8:	ldrne	r1, [r6, #36]	; 0x24
   14fec:	strne	r1, [r2, #4]
   14ff0:	strne	r2, [r6, #36]	; 0x24
   14ff4:	mov	r0, r3
   14ff8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ffc:	ldr	r3, [r2]
   15000:	cmp	r5, r3
   15004:	beq	15044 <__assert_fail@plt+0x3e98>
   15008:	mov	r1, r3
   1500c:	mov	r0, r5
   15010:	ldr	r3, [r6, #28]
   15014:	blx	r3
   15018:	cmp	r0, #0
   1501c:	bne	1503c <__assert_fail@plt+0x3e90>
   15020:	ldr	r4, [r4, #4]
   15024:	ldr	r2, [r4, #4]
   15028:	cmp	r2, #0
   1502c:	bne	14ffc <__assert_fail@plt+0x3e50>
   15030:	mov	r3, #0
   15034:	mov	r0, r3
   15038:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1503c:	ldr	r2, [r4, #4]
   15040:	ldr	r3, [r2]
   15044:	cmp	r8, #0
   15048:	beq	14ff4 <__assert_fail@plt+0x3e48>
   1504c:	ldr	r0, [r2, #4]
   15050:	mov	r1, #0
   15054:	str	r0, [r4, #4]
   15058:	str	r1, [r2]
   1505c:	ldr	r1, [r6, #36]	; 0x24
   15060:	mov	r0, r3
   15064:	str	r1, [r2, #4]
   15068:	str	r2, [r6, #36]	; 0x24
   1506c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15070:	bl	1117c <abort@plt>
   15074:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15078:	ldr	r6, [r1]
   1507c:	ldr	r3, [r1, #4]
   15080:	cmp	r6, r3
   15084:	bcs	15154 <__assert_fail@plt+0x3fa8>
   15088:	mov	r9, r2
   1508c:	mov	r5, r0
   15090:	mov	r8, r1
   15094:	add	r6, r6, #8
   15098:	mov	sl, #0
   1509c:	ldr	fp, [r6, #-8]
   150a0:	mov	r7, r6
   150a4:	cmp	fp, #0
   150a8:	beq	15148 <__assert_fail@plt+0x3f9c>
   150ac:	ldr	r4, [r6, #-4]
   150b0:	cmp	r4, #0
   150b4:	beq	15138 <__assert_fail@plt+0x3f8c>
   150b8:	ldr	r1, [r5, #8]
   150bc:	b	150d8 <__assert_fail@plt+0x3f2c>
   150c0:	ldr	r3, [ip, #4]
   150c4:	cmp	r2, #0
   150c8:	str	r3, [r4, #4]
   150cc:	str	r4, [ip, #4]
   150d0:	beq	15134 <__assert_fail@plt+0x3f88>
   150d4:	mov	r4, r2
   150d8:	ldr	fp, [r4]
   150dc:	ldr	r3, [r5, #24]
   150e0:	mov	r0, fp
   150e4:	blx	r3
   150e8:	ldr	r1, [r5, #8]
   150ec:	cmp	r0, r1
   150f0:	bcs	151f4 <__assert_fail@plt+0x4048>
   150f4:	ldr	r3, [r5]
   150f8:	ldr	r2, [r4, #4]
   150fc:	add	ip, r3, r0, lsl #3
   15100:	ldr	lr, [r3, r0, lsl #3]
   15104:	cmp	lr, #0
   15108:	bne	150c0 <__assert_fail@plt+0x3f14>
   1510c:	ldr	ip, [r5, #12]
   15110:	str	fp, [r3, r0, lsl #3]
   15114:	add	r3, ip, #1
   15118:	str	r3, [r5, #12]
   1511c:	str	lr, [r4]
   15120:	ldr	r3, [r5, #36]	; 0x24
   15124:	cmp	r2, #0
   15128:	str	r3, [r4, #4]
   1512c:	str	r4, [r5, #36]	; 0x24
   15130:	bne	150d4 <__assert_fail@plt+0x3f28>
   15134:	ldr	fp, [r6, #-8]
   15138:	cmp	r9, #0
   1513c:	str	sl, [r6, #-4]
   15140:	beq	1515c <__assert_fail@plt+0x3fb0>
   15144:	ldr	r3, [r8, #4]
   15148:	cmp	r3, r7
   1514c:	add	r6, r6, #8
   15150:	bhi	1509c <__assert_fail@plt+0x3ef0>
   15154:	mov	r0, #1
   15158:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1515c:	ldr	r3, [r5, #24]
   15160:	ldr	r1, [r5, #8]
   15164:	mov	r0, fp
   15168:	blx	r3
   1516c:	ldr	r3, [r5, #8]
   15170:	cmp	r0, r3
   15174:	bcs	151f4 <__assert_fail@plt+0x4048>
   15178:	ldr	r3, [r5]
   1517c:	add	r4, r3, r0, lsl #3
   15180:	ldr	r2, [r3, r0, lsl #3]
   15184:	cmp	r2, #0
   15188:	beq	151c8 <__assert_fail@plt+0x401c>
   1518c:	ldr	r0, [r5, #36]	; 0x24
   15190:	cmp	r0, #0
   15194:	beq	151dc <__assert_fail@plt+0x4030>
   15198:	ldr	r3, [r0, #4]
   1519c:	str	r3, [r5, #36]	; 0x24
   151a0:	ldr	r3, [r4, #4]
   151a4:	str	fp, [r0]
   151a8:	str	r3, [r0, #4]
   151ac:	str	r0, [r4, #4]
   151b0:	ldr	r2, [r8, #12]
   151b4:	str	sl, [r6, #-8]
   151b8:	sub	r2, r2, #1
   151bc:	ldr	r3, [r8, #4]
   151c0:	str	r2, [r8, #12]
   151c4:	b	15148 <__assert_fail@plt+0x3f9c>
   151c8:	ldr	r2, [r5, #12]
   151cc:	str	fp, [r3, r0, lsl #3]
   151d0:	add	r3, r2, #1
   151d4:	str	r3, [r5, #12]
   151d8:	b	151b0 <__assert_fail@plt+0x4004>
   151dc:	mov	r0, #8
   151e0:	bl	1c098 <__assert_fail@plt+0xaeec>
   151e4:	cmp	r0, #0
   151e8:	bne	151a0 <__assert_fail@plt+0x3ff4>
   151ec:	mov	r0, r9
   151f0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151f4:	bl	1117c <abort@plt>
   151f8:	ldr	r0, [r0, #8]
   151fc:	bx	lr
   15200:	ldr	r0, [r0, #12]
   15204:	bx	lr
   15208:	ldr	r0, [r0, #16]
   1520c:	bx	lr
   15210:	ldm	r0, {r1, ip}
   15214:	mov	r0, #0
   15218:	cmp	r1, ip
   1521c:	bcs	15264 <__assert_fail@plt+0x40b8>
   15220:	ldr	r3, [r1]
   15224:	cmp	r3, #0
   15228:	beq	15254 <__assert_fail@plt+0x40a8>
   1522c:	ldr	r3, [r1, #4]
   15230:	mov	r2, #1
   15234:	cmp	r3, #0
   15238:	beq	1524c <__assert_fail@plt+0x40a0>
   1523c:	ldr	r3, [r3, #4]
   15240:	add	r2, r2, #1
   15244:	cmp	r3, #0
   15248:	bne	1523c <__assert_fail@plt+0x4090>
   1524c:	cmp	r0, r2
   15250:	movcc	r0, r2
   15254:	add	r1, r1, #8
   15258:	cmp	r1, ip
   1525c:	bcc	15220 <__assert_fail@plt+0x4074>
   15260:	bx	lr
   15264:	bx	lr
   15268:	push	{lr}		; (str lr, [sp, #-4]!)
   1526c:	mov	r2, #0
   15270:	ldm	r0, {r1, lr}
   15274:	mov	ip, r2
   15278:	cmp	r1, lr
   1527c:	bcs	152bc <__assert_fail@plt+0x4110>
   15280:	ldr	r3, [r1]
   15284:	cmp	r3, #0
   15288:	beq	152b0 <__assert_fail@plt+0x4104>
   1528c:	ldr	r3, [r1, #4]
   15290:	add	ip, ip, #1
   15294:	cmp	r3, #0
   15298:	add	r2, r2, #1
   1529c:	beq	152b0 <__assert_fail@plt+0x4104>
   152a0:	ldr	r3, [r3, #4]
   152a4:	add	r2, r2, #1
   152a8:	cmp	r3, #0
   152ac:	bne	152a0 <__assert_fail@plt+0x40f4>
   152b0:	add	r1, r1, #8
   152b4:	cmp	r1, lr
   152b8:	bcc	15280 <__assert_fail@plt+0x40d4>
   152bc:	ldr	r3, [r0, #12]
   152c0:	cmp	r3, ip
   152c4:	ldreq	r0, [r0, #16]
   152c8:	subeq	r0, r0, r2
   152cc:	clzeq	r0, r0
   152d0:	lsreq	r0, r0, #5
   152d4:	movne	r0, #0
   152d8:	pop	{pc}		; (ldr pc, [sp], #4)
   152dc:	push	{r4, r5, r6, r7, lr}
   152e0:	mov	r5, r1
   152e4:	ldm	r0, {ip, lr}
   152e8:	sub	sp, sp, #12
   152ec:	ldr	r3, [r0, #16]
   152f0:	cmp	ip, lr
   152f4:	mov	r4, #0
   152f8:	ldr	r6, [r0, #8]
   152fc:	ldr	r7, [r0, #12]
   15300:	bcs	15344 <__assert_fail@plt+0x4198>
   15304:	ldr	r2, [ip]
   15308:	cmp	r2, #0
   1530c:	beq	15338 <__assert_fail@plt+0x418c>
   15310:	ldr	r2, [ip, #4]
   15314:	mov	r1, #1
   15318:	cmp	r2, #0
   1531c:	beq	15330 <__assert_fail@plt+0x4184>
   15320:	ldr	r2, [r2, #4]
   15324:	add	r1, r1, #1
   15328:	cmp	r2, #0
   1532c:	bne	15320 <__assert_fail@plt+0x4174>
   15330:	cmp	r4, r1
   15334:	movcc	r4, r1
   15338:	add	ip, ip, #8
   1533c:	cmp	ip, lr
   15340:	bcc	15304 <__assert_fail@plt+0x4158>
   15344:	ldr	r2, [pc, #116]	; 153c0 <__assert_fail@plt+0x4214>
   15348:	mov	r1, #1
   1534c:	mov	r0, r5
   15350:	bl	110b0 <__fprintf_chk@plt>
   15354:	mov	r3, r6
   15358:	ldr	r2, [pc, #100]	; 153c4 <__assert_fail@plt+0x4218>
   1535c:	mov	r1, #1
   15360:	mov	r0, r5
   15364:	bl	110b0 <__fprintf_chk@plt>
   15368:	vmov	s15, r7
   1536c:	vldr	d5, [pc, #68]	; 153b8 <__assert_fail@plt+0x420c>
   15370:	mov	r3, r7
   15374:	ldr	r2, [pc, #76]	; 153c8 <__assert_fail@plt+0x421c>
   15378:	vcvt.f64.u32	d6, s15
   1537c:	vmov	s15, r6
   15380:	mov	r1, #1
   15384:	mov	r0, r5
   15388:	vcvt.f64.u32	d7, s15
   1538c:	vmul.f64	d6, d6, d5
   15390:	vdiv.f64	d5, d6, d7
   15394:	vstr	d5, [sp]
   15398:	bl	110b0 <__fprintf_chk@plt>
   1539c:	mov	r3, r4
   153a0:	mov	r0, r5
   153a4:	ldr	r2, [pc, #32]	; 153cc <__assert_fail@plt+0x4220>
   153a8:	mov	r1, #1
   153ac:	add	sp, sp, #12
   153b0:	pop	{r4, r5, r6, r7, lr}
   153b4:	b	110b0 <__fprintf_chk@plt>
   153b8:	andeq	r0, r0, r0
   153bc:	subsmi	r0, r9, r0
   153c0:			; <UNDEFINED> instruction: 0x0001d9b4
   153c4:	andeq	sp, r1, ip, asr #19
   153c8:	andeq	sp, r1, r4, ror #19
   153cc:	andeq	sp, r1, r8, lsl #20
   153d0:	push	{r4, r5, r6, lr}
   153d4:	mov	r5, r1
   153d8:	ldr	r3, [r0, #24]
   153dc:	mov	r6, r0
   153e0:	ldr	r1, [r0, #8]
   153e4:	mov	r0, r5
   153e8:	blx	r3
   153ec:	ldr	r3, [r6, #8]
   153f0:	cmp	r0, r3
   153f4:	bcs	15454 <__assert_fail@plt+0x42a8>
   153f8:	ldr	r3, [r6]
   153fc:	add	r4, r3, r0, lsl #3
   15400:	ldr	r1, [r3, r0, lsl #3]
   15404:	cmp	r1, #0
   15408:	bne	15414 <__assert_fail@plt+0x4268>
   1540c:	b	1543c <__assert_fail@plt+0x4290>
   15410:	ldr	r1, [r4]
   15414:	cmp	r5, r1
   15418:	beq	15444 <__assert_fail@plt+0x4298>
   1541c:	ldr	r3, [r6, #28]
   15420:	mov	r0, r5
   15424:	blx	r3
   15428:	cmp	r0, #0
   1542c:	bne	1544c <__assert_fail@plt+0x42a0>
   15430:	ldr	r4, [r4, #4]
   15434:	cmp	r4, #0
   15438:	bne	15410 <__assert_fail@plt+0x4264>
   1543c:	mov	r0, #0
   15440:	pop	{r4, r5, r6, pc}
   15444:	mov	r0, r5
   15448:	pop	{r4, r5, r6, pc}
   1544c:	ldr	r0, [r4]
   15450:	pop	{r4, r5, r6, pc}
   15454:	bl	1117c <abort@plt>
   15458:	ldr	r3, [r0, #16]
   1545c:	cmp	r3, #0
   15460:	beq	15494 <__assert_fail@plt+0x42e8>
   15464:	ldr	r3, [r0]
   15468:	ldr	r2, [r0, #4]
   1546c:	cmp	r3, r2
   15470:	bcc	15484 <__assert_fail@plt+0x42d8>
   15474:	b	1549c <__assert_fail@plt+0x42f0>
   15478:	add	r3, r3, #8
   1547c:	cmp	r3, r2
   15480:	bcs	1549c <__assert_fail@plt+0x42f0>
   15484:	ldr	r0, [r3]
   15488:	cmp	r0, #0
   1548c:	beq	15478 <__assert_fail@plt+0x42cc>
   15490:	bx	lr
   15494:	mov	r0, r3
   15498:	bx	lr
   1549c:	push	{r4, lr}
   154a0:	bl	1117c <abort@plt>
   154a4:	push	{r4, r5, r6, lr}
   154a8:	mov	r4, r1
   154ac:	ldr	r3, [r0, #24]
   154b0:	mov	r5, r0
   154b4:	ldr	r1, [r0, #8]
   154b8:	mov	r0, r4
   154bc:	blx	r3
   154c0:	ldr	r3, [r5, #8]
   154c4:	cmp	r0, r3
   154c8:	bcs	1552c <__assert_fail@plt+0x4380>
   154cc:	ldr	r3, [r5]
   154d0:	add	r0, r3, r0, lsl #3
   154d4:	mov	r3, r0
   154d8:	b	154e4 <__assert_fail@plt+0x4338>
   154dc:	cmp	r3, #0
   154e0:	beq	154f8 <__assert_fail@plt+0x434c>
   154e4:	ldm	r3, {r2, r3}
   154e8:	cmp	r4, r2
   154ec:	bne	154dc <__assert_fail@plt+0x4330>
   154f0:	cmp	r3, #0
   154f4:	bne	15524 <__assert_fail@plt+0x4378>
   154f8:	ldr	r2, [r5, #4]
   154fc:	mov	r3, r0
   15500:	b	15510 <__assert_fail@plt+0x4364>
   15504:	ldr	r0, [r3]
   15508:	cmp	r0, #0
   1550c:	popne	{r4, r5, r6, pc}
   15510:	add	r3, r3, #8
   15514:	cmp	r3, r2
   15518:	bcc	15504 <__assert_fail@plt+0x4358>
   1551c:	mov	r0, #0
   15520:	pop	{r4, r5, r6, pc}
   15524:	ldr	r0, [r3]
   15528:	pop	{r4, r5, r6, pc}
   1552c:	bl	1117c <abort@plt>
   15530:	push	{r4, r5, r6, lr}
   15534:	mov	r5, r0
   15538:	ldr	r4, [r0]
   1553c:	ldr	r0, [r0, #4]
   15540:	cmp	r4, r0
   15544:	bcs	155c0 <__assert_fail@plt+0x4414>
   15548:	add	r4, r4, #8
   1554c:	mov	ip, #0
   15550:	ldr	r3, [r4, #-8]
   15554:	mov	r6, r4
   15558:	cmp	r3, #0
   1555c:	beq	155a8 <__assert_fail@plt+0x43fc>
   15560:	cmp	r2, ip
   15564:	bls	155b4 <__assert_fail@plt+0x4408>
   15568:	str	r3, [r1, ip, lsl #2]
   1556c:	ldr	r3, [r4, #-4]
   15570:	add	r0, ip, #1
   15574:	cmp	r3, #0
   15578:	add	ip, r1, ip, lsl #2
   1557c:	beq	155a0 <__assert_fail@plt+0x43f4>
   15580:	cmp	r2, r0
   15584:	beq	155bc <__assert_fail@plt+0x4410>
   15588:	ldr	lr, [r3]
   1558c:	add	r0, r0, #1
   15590:	str	lr, [ip, #4]!
   15594:	ldr	r3, [r3, #4]
   15598:	cmp	r3, #0
   1559c:	bne	15580 <__assert_fail@plt+0x43d4>
   155a0:	mov	ip, r0
   155a4:	ldr	r0, [r5, #4]
   155a8:	cmp	r0, r6
   155ac:	add	r4, r4, #8
   155b0:	bhi	15550 <__assert_fail@plt+0x43a4>
   155b4:	mov	r0, ip
   155b8:	pop	{r4, r5, r6, pc}
   155bc:	pop	{r4, r5, r6, pc}
   155c0:	mov	r0, #0
   155c4:	pop	{r4, r5, r6, pc}
   155c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   155cc:	ldr	r3, [r0, #4]
   155d0:	ldr	r8, [r0]
   155d4:	cmp	r8, r3
   155d8:	bcs	1563c <__assert_fail@plt+0x4490>
   155dc:	mov	r7, r2
   155e0:	mov	r6, r1
   155e4:	mov	r9, r0
   155e8:	mov	r5, #0
   155ec:	ldr	r0, [r8]
   155f0:	cmp	r0, #0
   155f4:	beq	15628 <__assert_fail@plt+0x447c>
   155f8:	mov	r4, r8
   155fc:	b	15604 <__assert_fail@plt+0x4458>
   15600:	ldr	r0, [r4]
   15604:	mov	r1, r7
   15608:	blx	r6
   1560c:	cmp	r0, #0
   15610:	beq	15634 <__assert_fail@plt+0x4488>
   15614:	ldr	r4, [r4, #4]
   15618:	add	r5, r5, #1
   1561c:	cmp	r4, #0
   15620:	bne	15600 <__assert_fail@plt+0x4454>
   15624:	ldr	r3, [r9, #4]
   15628:	add	r8, r8, #8
   1562c:	cmp	r3, r8
   15630:	bhi	155ec <__assert_fail@plt+0x4440>
   15634:	mov	r0, r5
   15638:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1563c:	mov	r5, #0
   15640:	b	15634 <__assert_fail@plt+0x4488>
   15644:	push	{r4, r5, r6, lr}
   15648:	mov	r4, r0
   1564c:	ldrb	r0, [r0]
   15650:	cmp	r0, #0
   15654:	beq	15684 <__assert_fail@plt+0x44d8>
   15658:	mov	r5, r1
   1565c:	mov	r1, #0
   15660:	rsb	r1, r1, r1, lsl #5
   15664:	add	r0, r1, r0
   15668:	mov	r1, r5
   1566c:	bl	1ca50 <__assert_fail@plt+0xb8a4>
   15670:	ldrb	r0, [r4, #1]!
   15674:	cmp	r0, #0
   15678:	bne	15660 <__assert_fail@plt+0x44b4>
   1567c:	mov	r0, r1
   15680:	pop	{r4, r5, r6, pc}
   15684:	mov	r1, r0
   15688:	b	1567c <__assert_fail@plt+0x44d0>
   1568c:	push	{lr}		; (str lr, [sp, #-4]!)
   15690:	mov	ip, r0
   15694:	ldr	lr, [pc, #16]	; 156ac <__assert_fail@plt+0x4500>
   15698:	ldm	lr!, {r0, r1, r2, r3}
   1569c:	ldr	lr, [lr]
   156a0:	stmia	ip!, {r0, r1, r2, r3}
   156a4:	str	lr, [ip]
   156a8:	pop	{pc}		; (ldr pc, [sp], #4)
   156ac:	andeq	sp, r1, r0, lsr #19
   156b0:	cmp	r2, #0
   156b4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156b8:	mov	r4, r0
   156bc:	ldr	sl, [pc, #548]	; 158e8 <__assert_fail@plt+0x473c>
   156c0:	mov	r0, #40	; 0x28
   156c4:	movne	sl, r2
   156c8:	cmp	r3, #0
   156cc:	ldr	fp, [pc, #536]	; 158ec <__assert_fail@plt+0x4740>
   156d0:	mov	r5, r1
   156d4:	movne	fp, r3
   156d8:	bl	1c098 <__assert_fail@plt+0xaeec>
   156dc:	subs	r8, r0, #0
   156e0:	beq	15778 <__assert_fail@plt+0x45cc>
   156e4:	cmp	r5, #0
   156e8:	ldr	r3, [pc, #512]	; 158f0 <__assert_fail@plt+0x4744>
   156ec:	beq	15780 <__assert_fail@plt+0x45d4>
   156f0:	cmp	r5, r3
   156f4:	str	r5, [r8, #20]
   156f8:	beq	15784 <__assert_fail@plt+0x45d8>
   156fc:	vldr	s15, [r5, #8]
   15700:	vldr	s14, [pc, #456]	; 158d0 <__assert_fail@plt+0x4724>
   15704:	vcmpe.f32	s15, s14
   15708:	vmrs	APSR_nzcv, fpscr
   1570c:	ble	15768 <__assert_fail@plt+0x45bc>
   15710:	vldr	s13, [pc, #444]	; 158d4 <__assert_fail@plt+0x4728>
   15714:	vcmpe.f32	s15, s13
   15718:	vmrs	APSR_nzcv, fpscr
   1571c:	bpl	15768 <__assert_fail@plt+0x45bc>
   15720:	vldr	s13, [pc, #432]	; 158d8 <__assert_fail@plt+0x472c>
   15724:	vldr	s12, [r5, #12]
   15728:	vcmpe.f32	s12, s13
   1572c:	vmrs	APSR_nzcv, fpscr
   15730:	ble	15768 <__assert_fail@plt+0x45bc>
   15734:	vldr	s13, [r5]
   15738:	vcmpe.f32	s13, #0.0
   1573c:	vmrs	APSR_nzcv, fpscr
   15740:	blt	15768 <__assert_fail@plt+0x45bc>
   15744:	vadd.f32	s14, s13, s14
   15748:	vldr	s13, [r5, #4]
   1574c:	vcmpe.f32	s14, s13
   15750:	vmrs	APSR_nzcv, fpscr
   15754:	bpl	15768 <__assert_fail@plt+0x45bc>
   15758:	vldr	s12, [pc, #380]	; 158dc <__assert_fail@plt+0x4730>
   1575c:	vcmpe.f32	s13, s12
   15760:	vmrs	APSR_nzcv, fpscr
   15764:	bls	158b4 <__assert_fail@plt+0x4708>
   15768:	str	r3, [r8, #20]
   1576c:	mov	r0, r8
   15770:	bl	1c598 <__assert_fail@plt+0xb3ec>
   15774:	mov	r8, #0
   15778:	mov	r0, r8
   1577c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15780:	str	r3, [r8, #20]
   15784:	vldr	s15, [pc, #340]	; 158e0 <__assert_fail@plt+0x4734>
   15788:	vmov	s14, r4
   1578c:	vldr	s13, [pc, #336]	; 158e4 <__assert_fail@plt+0x4738>
   15790:	vcvt.f32.u32	s12, s14
   15794:	vdiv.f32	s14, s12, s15
   15798:	vcmpe.f32	s14, s13
   1579c:	vmrs	APSR_nzcv, fpscr
   157a0:	bge	158a0 <__assert_fail@plt+0x46f4>
   157a4:	vcvt.u32.f32	s15, s14
   157a8:	vmov	r4, s15
   157ac:	cmp	r4, #10
   157b0:	movcc	r4, #10
   157b4:	orr	r7, r4, #1
   157b8:	cmn	r7, #1
   157bc:	ldrne	r9, [pc, #304]	; 158f4 <__assert_fail@plt+0x4748>
   157c0:	beq	15838 <__assert_fail@plt+0x468c>
   157c4:	cmp	r7, #9
   157c8:	bls	158ac <__assert_fail@plt+0x4700>
   157cc:	umull	r2, r3, r9, r7
   157d0:	lsr	r3, r3, #1
   157d4:	add	r3, r3, r3, lsl #1
   157d8:	cmp	r7, r3
   157dc:	beq	1582c <__assert_fail@plt+0x4680>
   157e0:	mov	r6, #16
   157e4:	mov	r5, #9
   157e8:	mov	r4, #3
   157ec:	b	15800 <__assert_fail@plt+0x4654>
   157f0:	bl	1ca50 <__assert_fail@plt+0xb8a4>
   157f4:	add	r6, r6, #8
   157f8:	cmp	r1, #0
   157fc:	beq	1582c <__assert_fail@plt+0x4680>
   15800:	add	r5, r5, r6
   15804:	add	r4, r4, #2
   15808:	cmp	r5, r7
   1580c:	mov	r0, r7
   15810:	mov	r1, r4
   15814:	bcc	157f0 <__assert_fail@plt+0x4644>
   15818:	mov	r1, r4
   1581c:	mov	r0, r7
   15820:	bl	1ca50 <__assert_fail@plt+0xb8a4>
   15824:	cmp	r1, #0
   15828:	bne	15838 <__assert_fail@plt+0x468c>
   1582c:	add	r7, r7, #2
   15830:	cmn	r7, #1
   15834:	bne	157c4 <__assert_fail@plt+0x4618>
   15838:	lsrs	r3, r7, #30
   1583c:	movne	r4, #1
   15840:	moveq	r4, #0
   15844:	tst	r7, #536870912	; 0x20000000
   15848:	bne	158a0 <__assert_fail@plt+0x46f4>
   1584c:	cmp	r4, #0
   15850:	bne	158a0 <__assert_fail@plt+0x46f4>
   15854:	str	r7, [r8, #8]
   15858:	mov	r0, r7
   1585c:	mov	r1, #8
   15860:	bl	1c050 <__assert_fail@plt+0xaea4>
   15864:	cmp	r0, #0
   15868:	str	r0, [r8]
   1586c:	beq	1576c <__assert_fail@plt+0x45c0>
   15870:	ldr	r3, [r8, #8]
   15874:	str	r4, [r8, #12]
   15878:	str	r4, [r8, #16]
   1587c:	add	r0, r0, r3, lsl #3
   15880:	ldr	r3, [sp, #40]	; 0x28
   15884:	str	r0, [r8, #4]
   15888:	str	sl, [r8, #24]
   1588c:	str	fp, [r8, #28]
   15890:	str	r3, [r8, #32]
   15894:	str	r4, [r8, #36]	; 0x24
   15898:	mov	r0, r8
   1589c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158a0:	mov	r3, #0
   158a4:	str	r3, [r8, #8]
   158a8:	b	1576c <__assert_fail@plt+0x45c0>
   158ac:	mov	r4, #3
   158b0:	b	15818 <__assert_fail@plt+0x466c>
   158b4:	vcmpe.f32	s15, s14
   158b8:	vmrs	APSR_nzcv, fpscr
   158bc:	ble	15768 <__assert_fail@plt+0x45bc>
   158c0:	ldrb	r3, [r5, #16]
   158c4:	cmp	r3, #0
   158c8:	bne	157ac <__assert_fail@plt+0x4600>
   158cc:	b	15788 <__assert_fail@plt+0x45dc>
   158d0:	stclcc	12, cr12, [ip, #820]	; 0x334
   158d4:	svccc	0x00666666
   158d8:	svccc	0x008ccccd
   158dc:	svccc	0x00800000
   158e0:	svccc	0x004ccccd
   158e4:	svcmi	0x00800000
   158e8:	andeq	r4, r1, r0, lsr pc
   158ec:	andeq	r4, r1, r4, asr #30
   158f0:	andeq	sp, r1, r0, lsr #19
   158f4:	bge	feac03a8 <optarg@@GLIBC_2.4+0xfea92228>
   158f8:	push	{r4, r5, r6, r7, r8, lr}
   158fc:	mov	r5, r0
   15900:	ldr	r7, [r0]
   15904:	ldr	r3, [r0, #4]
   15908:	cmp	r7, r3
   1590c:	addcc	r7, r7, #8
   15910:	movcc	r6, #0
   15914:	bcs	15990 <__assert_fail@plt+0x47e4>
   15918:	ldr	r2, [r7, #-8]
   1591c:	mov	r8, r7
   15920:	cmp	r2, #0
   15924:	beq	15984 <__assert_fail@plt+0x47d8>
   15928:	ldr	r4, [r7, #-4]
   1592c:	ldr	r2, [r5, #32]
   15930:	cmp	r4, #0
   15934:	beq	15968 <__assert_fail@plt+0x47bc>
   15938:	cmp	r2, #0
   1593c:	beq	1594c <__assert_fail@plt+0x47a0>
   15940:	ldr	r0, [r4]
   15944:	blx	r2
   15948:	ldr	r2, [r5, #32]
   1594c:	ldr	r3, [r4, #4]
   15950:	ldr	r1, [r5, #36]	; 0x24
   15954:	str	r6, [r4]
   15958:	str	r1, [r4, #4]
   1595c:	str	r4, [r5, #36]	; 0x24
   15960:	subs	r4, r3, #0
   15964:	bne	15938 <__assert_fail@plt+0x478c>
   15968:	cmp	r2, #0
   1596c:	beq	15978 <__assert_fail@plt+0x47cc>
   15970:	ldr	r0, [r7, #-8]
   15974:	blx	r2
   15978:	str	r6, [r7, #-8]
   1597c:	str	r6, [r7, #-4]
   15980:	ldr	r3, [r5, #4]
   15984:	cmp	r3, r8
   15988:	add	r7, r7, #8
   1598c:	bhi	15918 <__assert_fail@plt+0x476c>
   15990:	mov	r3, #0
   15994:	str	r3, [r5, #12]
   15998:	str	r3, [r5, #16]
   1599c:	pop	{r4, r5, r6, r7, r8, pc}
   159a0:	ldr	r3, [r0, #32]
   159a4:	push	{r4, r5, r6, lr}
   159a8:	cmp	r3, #0
   159ac:	mov	r5, r0
   159b0:	beq	15a10 <__assert_fail@plt+0x4864>
   159b4:	ldr	r3, [r0, #16]
   159b8:	cmp	r3, #0
   159bc:	beq	15a10 <__assert_fail@plt+0x4864>
   159c0:	ldr	r6, [r0]
   159c4:	ldr	r3, [r0, #4]
   159c8:	cmp	r6, r3
   159cc:	bcs	15a4c <__assert_fail@plt+0x48a0>
   159d0:	ldr	r0, [r6]
   159d4:	cmp	r0, #0
   159d8:	beq	15a00 <__assert_fail@plt+0x4854>
   159dc:	mov	r4, r6
   159e0:	b	159e8 <__assert_fail@plt+0x483c>
   159e4:	ldr	r0, [r4]
   159e8:	ldr	r3, [r5, #32]
   159ec:	blx	r3
   159f0:	ldr	r4, [r4, #4]
   159f4:	cmp	r4, #0
   159f8:	bne	159e4 <__assert_fail@plt+0x4838>
   159fc:	ldr	r3, [r5, #4]
   15a00:	add	r6, r6, #8
   15a04:	cmp	r3, r6
   15a08:	bhi	159d0 <__assert_fail@plt+0x4824>
   15a0c:	b	15a14 <__assert_fail@plt+0x4868>
   15a10:	ldr	r3, [r5, #4]
   15a14:	ldr	r6, [r5]
   15a18:	cmp	r6, r3
   15a1c:	bcs	15a4c <__assert_fail@plt+0x48a0>
   15a20:	ldr	r0, [r6, #4]
   15a24:	cmp	r0, #0
   15a28:	beq	15a40 <__assert_fail@plt+0x4894>
   15a2c:	ldr	r4, [r0, #4]
   15a30:	bl	1c598 <__assert_fail@plt+0xb3ec>
   15a34:	subs	r0, r4, #0
   15a38:	bne	15a2c <__assert_fail@plt+0x4880>
   15a3c:	ldr	r3, [r5, #4]
   15a40:	add	r6, r6, #8
   15a44:	cmp	r3, r6
   15a48:	bhi	15a20 <__assert_fail@plt+0x4874>
   15a4c:	ldr	r0, [r5, #36]	; 0x24
   15a50:	cmp	r0, #0
   15a54:	beq	15a68 <__assert_fail@plt+0x48bc>
   15a58:	ldr	r4, [r0, #4]
   15a5c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   15a60:	subs	r0, r4, #0
   15a64:	bne	15a58 <__assert_fail@plt+0x48ac>
   15a68:	ldr	r0, [r5]
   15a6c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   15a70:	mov	r0, r5
   15a74:	pop	{r4, r5, r6, lr}
   15a78:	b	1c598 <__assert_fail@plt+0xb3ec>
   15a7c:	ldr	r3, [r0, #20]
   15a80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a84:	mov	r8, r0
   15a88:	ldrb	r2, [r3, #16]
   15a8c:	sub	sp, sp, #40	; 0x28
   15a90:	cmp	r2, #0
   15a94:	bne	15ac0 <__assert_fail@plt+0x4914>
   15a98:	vmov	s15, r1
   15a9c:	vldr	s13, [r3, #8]
   15aa0:	vldr	s14, [pc, #648]	; 15d30 <__assert_fail@plt+0x4b84>
   15aa4:	vcvt.f32.u32	s12, s15
   15aa8:	vdiv.f32	s15, s12, s13
   15aac:	vcmpe.f32	s15, s14
   15ab0:	vmrs	APSR_nzcv, fpscr
   15ab4:	bge	15ce8 <__assert_fail@plt+0x4b3c>
   15ab8:	vcvt.u32.f32	s15, s15
   15abc:	vmov	r1, s15
   15ac0:	cmp	r1, #10
   15ac4:	movcc	r1, #10
   15ac8:	orr	r7, r1, #1
   15acc:	cmn	r7, #1
   15ad0:	ldrne	r9, [pc, #604]	; 15d34 <__assert_fail@plt+0x4b88>
   15ad4:	beq	15b4c <__assert_fail@plt+0x49a0>
   15ad8:	cmp	r7, #9
   15adc:	bls	15cf8 <__assert_fail@plt+0x4b4c>
   15ae0:	umull	r2, r3, r9, r7
   15ae4:	lsr	r3, r3, #1
   15ae8:	add	r3, r3, r3, lsl #1
   15aec:	cmp	r7, r3
   15af0:	beq	15b40 <__assert_fail@plt+0x4994>
   15af4:	mov	r6, #16
   15af8:	mov	r5, #9
   15afc:	mov	r4, #3
   15b00:	b	15b1c <__assert_fail@plt+0x4970>
   15b04:	mov	r1, r4
   15b08:	mov	r0, r7
   15b0c:	bl	1ca50 <__assert_fail@plt+0xb8a4>
   15b10:	add	r6, r6, #8
   15b14:	cmp	r1, #0
   15b18:	beq	15b40 <__assert_fail@plt+0x4994>
   15b1c:	add	r5, r5, r6
   15b20:	cmp	r5, r7
   15b24:	add	r4, r4, #2
   15b28:	bcc	15b04 <__assert_fail@plt+0x4958>
   15b2c:	mov	r1, r4
   15b30:	mov	r0, r7
   15b34:	bl	1ca50 <__assert_fail@plt+0xb8a4>
   15b38:	cmp	r1, #0
   15b3c:	bne	15b4c <__assert_fail@plt+0x49a0>
   15b40:	add	r7, r7, #2
   15b44:	cmn	r7, #1
   15b48:	bne	15ad8 <__assert_fail@plt+0x492c>
   15b4c:	lsrs	r3, r7, #30
   15b50:	movne	r4, #1
   15b54:	moveq	r4, #0
   15b58:	tst	r7, #536870912	; 0x20000000
   15b5c:	bne	15ce8 <__assert_fail@plt+0x4b3c>
   15b60:	cmp	r4, #0
   15b64:	bne	15ce8 <__assert_fail@plt+0x4b3c>
   15b68:	ldr	r3, [r8, #8]
   15b6c:	cmp	r3, r7
   15b70:	beq	15cd8 <__assert_fail@plt+0x4b2c>
   15b74:	mov	r1, #8
   15b78:	mov	r0, r7
   15b7c:	bl	1c050 <__assert_fail@plt+0xaea4>
   15b80:	cmp	r0, #0
   15b84:	str	r0, [sp]
   15b88:	beq	15ce8 <__assert_fail@plt+0x4b3c>
   15b8c:	ldr	r1, [r8, #24]
   15b90:	ldr	r5, [r8, #20]
   15b94:	ldr	lr, [r8, #28]
   15b98:	ldr	ip, [r8, #32]
   15b9c:	add	r0, r0, r7, lsl #3
   15ba0:	ldr	r3, [r8, #36]	; 0x24
   15ba4:	str	r0, [sp, #4]
   15ba8:	str	r1, [sp, #24]
   15bac:	mov	r2, r4
   15bb0:	mov	r0, sp
   15bb4:	mov	r1, r8
   15bb8:	str	r7, [sp, #8]
   15bbc:	str	r4, [sp, #12]
   15bc0:	str	r4, [sp, #16]
   15bc4:	str	r5, [sp, #20]
   15bc8:	str	lr, [sp, #28]
   15bcc:	str	ip, [sp, #32]
   15bd0:	str	r3, [sp, #36]	; 0x24
   15bd4:	bl	15074 <__assert_fail@plt+0x3ec8>
   15bd8:	subs	r9, r0, #0
   15bdc:	bne	15d00 <__assert_fail@plt+0x4b54>
   15be0:	ldr	r5, [sp]
   15be4:	ldr	r2, [sp, #4]
   15be8:	ldr	r3, [sp, #36]	; 0x24
   15bec:	cmp	r5, r2
   15bf0:	str	r3, [r8, #36]	; 0x24
   15bf4:	addcc	r5, r5, #8
   15bf8:	movcc	r7, r9
   15bfc:	bcs	15cac <__assert_fail@plt+0x4b00>
   15c00:	ldr	r3, [r5, #-8]
   15c04:	mov	r6, r5
   15c08:	cmp	r3, #0
   15c0c:	beq	15ca0 <__assert_fail@plt+0x4af4>
   15c10:	ldr	r4, [r5, #-4]
   15c14:	cmp	r4, #0
   15c18:	beq	15c9c <__assert_fail@plt+0x4af0>
   15c1c:	ldr	r1, [r8, #8]
   15c20:	b	15c3c <__assert_fail@plt+0x4a90>
   15c24:	ldr	r3, [ip, #4]
   15c28:	cmp	r2, #0
   15c2c:	str	r3, [r4, #4]
   15c30:	str	r4, [ip, #4]
   15c34:	beq	15c98 <__assert_fail@plt+0x4aec>
   15c38:	mov	r4, r2
   15c3c:	ldr	sl, [r4]
   15c40:	ldr	r3, [r8, #24]
   15c44:	mov	r0, sl
   15c48:	blx	r3
   15c4c:	ldr	r1, [r8, #8]
   15c50:	cmp	r0, r1
   15c54:	bcs	15d2c <__assert_fail@plt+0x4b80>
   15c58:	ldr	r3, [r8]
   15c5c:	ldr	r2, [r4, #4]
   15c60:	add	ip, r3, r0, lsl #3
   15c64:	ldr	lr, [r3, r0, lsl #3]
   15c68:	cmp	lr, #0
   15c6c:	bne	15c24 <__assert_fail@plt+0x4a78>
   15c70:	ldr	ip, [r8, #12]
   15c74:	str	sl, [r3, r0, lsl #3]
   15c78:	add	r3, ip, #1
   15c7c:	str	r3, [r8, #12]
   15c80:	str	lr, [r4]
   15c84:	ldr	r3, [r8, #36]	; 0x24
   15c88:	cmp	r2, #0
   15c8c:	str	r3, [r4, #4]
   15c90:	str	r4, [r8, #36]	; 0x24
   15c94:	bne	15c38 <__assert_fail@plt+0x4a8c>
   15c98:	ldr	r2, [sp, #4]
   15c9c:	str	r7, [r5, #-4]
   15ca0:	cmp	r6, r2
   15ca4:	add	r5, r5, #8
   15ca8:	bcc	15c00 <__assert_fail@plt+0x4a54>
   15cac:	mov	r1, sp
   15cb0:	mov	r0, r8
   15cb4:	mov	r2, #0
   15cb8:	bl	15074 <__assert_fail@plt+0x3ec8>
   15cbc:	cmp	r0, #0
   15cc0:	beq	15d2c <__assert_fail@plt+0x4b80>
   15cc4:	ldr	r0, [sp]
   15cc8:	bl	1c598 <__assert_fail@plt+0xb3ec>
   15ccc:	mov	r0, r9
   15cd0:	add	sp, sp, #40	; 0x28
   15cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15cd8:	mov	r9, #1
   15cdc:	mov	r0, r9
   15ce0:	add	sp, sp, #40	; 0x28
   15ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ce8:	mov	r9, #0
   15cec:	mov	r0, r9
   15cf0:	add	sp, sp, #40	; 0x28
   15cf4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15cf8:	mov	r4, #3
   15cfc:	b	15b2c <__assert_fail@plt+0x4980>
   15d00:	ldr	r0, [r8]
   15d04:	bl	1c598 <__assert_fail@plt+0xb3ec>
   15d08:	ldmib	sp, {r0, r1, r2}
   15d0c:	ldr	ip, [sp]
   15d10:	ldr	r3, [sp, #36]	; 0x24
   15d14:	stmib	r8, {r0, r1, r2}
   15d18:	mov	r0, r9
   15d1c:	str	ip, [r8]
   15d20:	str	r3, [r8, #36]	; 0x24
   15d24:	add	sp, sp, #40	; 0x28
   15d28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d2c:	bl	1117c <abort@plt>
   15d30:	svcmi	0x00800000
   15d34:	bge	feac07e8 <optarg@@GLIBC_2.4+0xfea92668>
   15d38:	push	{r4, r5, r6, r7, r8, r9, lr}
   15d3c:	subs	r5, r1, #0
   15d40:	sub	sp, sp, #12
   15d44:	beq	15f60 <__assert_fail@plt+0x4db4>
   15d48:	ldr	r3, [r0, #24]
   15d4c:	mov	r6, r0
   15d50:	ldr	r1, [r0, #8]
   15d54:	mov	r0, r5
   15d58:	mov	r7, r2
   15d5c:	blx	r3
   15d60:	ldr	r3, [r6, #8]
   15d64:	cmp	r0, r3
   15d68:	mov	r8, r0
   15d6c:	bcs	15f60 <__assert_fail@plt+0x4db4>
   15d70:	ldr	r9, [r6]
   15d74:	add	r4, r9, r0, lsl #3
   15d78:	ldr	r1, [r9, r0, lsl #3]
   15d7c:	str	r4, [sp, #4]
   15d80:	cmp	r1, #0
   15d84:	beq	15f64 <__assert_fail@plt+0x4db8>
   15d88:	cmp	r5, r1
   15d8c:	beq	15de4 <__assert_fail@plt+0x4c38>
   15d90:	ldr	r3, [r6, #28]
   15d94:	mov	r0, r5
   15d98:	blx	r3
   15d9c:	cmp	r0, #0
   15da0:	bne	15df8 <__assert_fail@plt+0x4c4c>
   15da4:	ldr	r3, [r4, #4]
   15da8:	cmp	r3, #0
   15dac:	bne	15dd8 <__assert_fail@plt+0x4c2c>
   15db0:	b	15e04 <__assert_fail@plt+0x4c58>
   15db4:	ldr	r3, [r6, #28]
   15db8:	mov	r0, r5
   15dbc:	blx	r3
   15dc0:	cmp	r0, #0
   15dc4:	bne	15e78 <__assert_fail@plt+0x4ccc>
   15dc8:	ldr	r4, [r4, #4]
   15dcc:	ldr	r3, [r4, #4]
   15dd0:	cmp	r3, #0
   15dd4:	beq	15e04 <__assert_fail@plt+0x4c58>
   15dd8:	ldr	r1, [r3]
   15ddc:	cmp	r5, r1
   15de0:	bne	15db4 <__assert_fail@plt+0x4c08>
   15de4:	mov	r0, #0
   15de8:	cmp	r7, #0
   15dec:	strne	r1, [r7]
   15df0:	add	sp, sp, #12
   15df4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15df8:	ldr	r1, [r9, r8, lsl #3]
   15dfc:	cmp	r1, #0
   15e00:	bne	15de4 <__assert_fail@plt+0x4c38>
   15e04:	vldr	s15, [r6, #8]
   15e08:	ldr	r3, [r6, #20]
   15e0c:	vldr	s14, [r6, #12]
   15e10:	vcvt.f32.u32	s15, s15
   15e14:	vldr	s13, [r3, #8]
   15e18:	vcvt.f32.u32	s14, s14
   15e1c:	vmul.f32	s12, s13, s15
   15e20:	vcmpe.f32	s14, s12
   15e24:	vmrs	APSR_nzcv, fpscr
   15e28:	bgt	15e84 <__assert_fail@plt+0x4cd8>
   15e2c:	ldr	r4, [sp, #4]
   15e30:	ldr	r3, [r4]
   15e34:	cmp	r3, #0
   15e38:	beq	15fc8 <__assert_fail@plt+0x4e1c>
   15e3c:	ldr	r3, [r6, #36]	; 0x24
   15e40:	cmp	r3, #0
   15e44:	beq	15fb0 <__assert_fail@plt+0x4e04>
   15e48:	ldr	r2, [r3, #4]
   15e4c:	str	r2, [r6, #36]	; 0x24
   15e50:	ldr	r2, [r6, #16]
   15e54:	ldr	r1, [r4, #4]
   15e58:	add	r2, r2, #1
   15e5c:	str	r5, [r3]
   15e60:	str	r1, [r3, #4]
   15e64:	mov	r0, #1
   15e68:	str	r3, [r4, #4]
   15e6c:	str	r2, [r6, #16]
   15e70:	add	sp, sp, #12
   15e74:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15e78:	ldr	r3, [r4, #4]
   15e7c:	ldr	r1, [r3]
   15e80:	b	15dfc <__assert_fail@plt+0x4c50>
   15e84:	ldr	r2, [pc, #392]	; 16014 <__assert_fail@plt+0x4e68>
   15e88:	cmp	r3, r2
   15e8c:	beq	15f10 <__assert_fail@plt+0x4d64>
   15e90:	vldr	s12, [pc, #352]	; 15ff8 <__assert_fail@plt+0x4e4c>
   15e94:	vcmpe.f32	s13, s12
   15e98:	vmrs	APSR_nzcv, fpscr
   15e9c:	ble	15ef8 <__assert_fail@plt+0x4d4c>
   15ea0:	vldr	s11, [pc, #340]	; 15ffc <__assert_fail@plt+0x4e50>
   15ea4:	vcmpe.f32	s13, s11
   15ea8:	vmrs	APSR_nzcv, fpscr
   15eac:	bpl	15ef8 <__assert_fail@plt+0x4d4c>
   15eb0:	vldr	s11, [r3, #12]
   15eb4:	vldr	s10, [pc, #324]	; 16000 <__assert_fail@plt+0x4e54>
   15eb8:	vcmpe.f32	s11, s10
   15ebc:	vmrs	APSR_nzcv, fpscr
   15ec0:	ble	15ef8 <__assert_fail@plt+0x4d4c>
   15ec4:	vldr	s10, [r3]
   15ec8:	vcmpe.f32	s10, #0.0
   15ecc:	vmrs	APSR_nzcv, fpscr
   15ed0:	blt	15ef8 <__assert_fail@plt+0x4d4c>
   15ed4:	vadd.f32	s12, s10, s12
   15ed8:	vldr	s10, [r3, #4]
   15edc:	vcmpe.f32	s12, s10
   15ee0:	vmrs	APSR_nzcv, fpscr
   15ee4:	bpl	15ef8 <__assert_fail@plt+0x4d4c>
   15ee8:	vldr	s9, [pc, #276]	; 16004 <__assert_fail@plt+0x4e58>
   15eec:	vcmpe.f32	s10, s9
   15ef0:	vmrs	APSR_nzcv, fpscr
   15ef4:	bls	15fd8 <__assert_fail@plt+0x4e2c>
   15ef8:	vldr	s13, [pc, #264]	; 16008 <__assert_fail@plt+0x4e5c>
   15efc:	str	r2, [r6, #20]
   15f00:	vmul.f32	s12, s15, s13
   15f04:	vcmpe.f32	s12, s14
   15f08:	vmrs	APSR_nzcv, fpscr
   15f0c:	bpl	15e2c <__assert_fail@plt+0x4c80>
   15f10:	vldr	s11, [pc, #244]	; 1600c <__assert_fail@plt+0x4e60>
   15f14:	vmul.f32	s15, s15, s11
   15f18:	vmul.f32	s15, s15, s13
   15f1c:	vldr	s14, [pc, #236]	; 16010 <__assert_fail@plt+0x4e64>
   15f20:	vcmpe.f32	s15, s14
   15f24:	vmrs	APSR_nzcv, fpscr
   15f28:	bge	15fd0 <__assert_fail@plt+0x4e24>
   15f2c:	vcvt.u32.f32	s15, s15
   15f30:	mov	r0, r6
   15f34:	vmov	r1, s15
   15f38:	bl	15a7c <__assert_fail@plt+0x48d0>
   15f3c:	cmp	r0, #0
   15f40:	beq	15fd0 <__assert_fail@plt+0x4e24>
   15f44:	mov	r3, #0
   15f48:	add	r2, sp, #4
   15f4c:	mov	r1, r5
   15f50:	mov	r0, r6
   15f54:	bl	14f54 <__assert_fail@plt+0x3da8>
   15f58:	cmp	r0, #0
   15f5c:	beq	15e2c <__assert_fail@plt+0x4c80>
   15f60:	bl	1117c <abort@plt>
   15f64:	vmov	s15, r3
   15f68:	ldr	r2, [r6, #12]
   15f6c:	ldr	r3, [r6, #20]
   15f70:	vcvt.f32.u32	s15, s15
   15f74:	vldr	s13, [r3, #8]
   15f78:	vmov	s14, r2
   15f7c:	vcvt.f32.u32	s14, s14
   15f80:	vmul.f32	s12, s13, s15
   15f84:	vcmpe.f32	s14, s12
   15f88:	vmrs	APSR_nzcv, fpscr
   15f8c:	bgt	15e84 <__assert_fail@plt+0x4cd8>
   15f90:	ldr	r3, [r6, #16]
   15f94:	add	r2, r2, #1
   15f98:	add	r3, r3, #1
   15f9c:	str	r5, [r4]
   15fa0:	mov	r0, #1
   15fa4:	str	r2, [r6, #12]
   15fa8:	str	r3, [r6, #16]
   15fac:	b	15df0 <__assert_fail@plt+0x4c44>
   15fb0:	mov	r0, #8
   15fb4:	bl	1c098 <__assert_fail@plt+0xaeec>
   15fb8:	subs	r3, r0, #0
   15fbc:	beq	15fd0 <__assert_fail@plt+0x4e24>
   15fc0:	ldr	r4, [sp, #4]
   15fc4:	b	15e50 <__assert_fail@plt+0x4ca4>
   15fc8:	ldr	r2, [r6, #12]
   15fcc:	b	15f90 <__assert_fail@plt+0x4de4>
   15fd0:	mvn	r0, #0
   15fd4:	b	15df0 <__assert_fail@plt+0x4c44>
   15fd8:	vcmpe.f32	s12, s13
   15fdc:	vmrs	APSR_nzcv, fpscr
   15fe0:	bpl	15ef8 <__assert_fail@plt+0x4d4c>
   15fe4:	ldrb	r3, [r3, #16]
   15fe8:	cmp	r3, #0
   15fec:	vmulne.f32	s15, s11, s15
   15ff0:	bne	15f1c <__assert_fail@plt+0x4d70>
   15ff4:	b	15f14 <__assert_fail@plt+0x4d68>
   15ff8:	stclcc	12, cr12, [ip, #820]	; 0x334
   15ffc:	svccc	0x00666666
   16000:	svccc	0x008ccccd
   16004:	svccc	0x00800000
   16008:	svccc	0x004ccccd
   1600c:	svccc	0x00b4fdf4
   16010:	svcmi	0x00800000
   16014:	andeq	sp, r1, r0, lsr #19
   16018:	push	{r4, r5, r6, r7, r8, lr}
   1601c:	subs	r5, r1, #0
   16020:	sub	sp, sp, #8
   16024:	beq	16228 <__assert_fail@plt+0x507c>
   16028:	ldr	r3, [r0, #24]
   1602c:	mov	r6, r0
   16030:	ldr	r1, [r0, #8]
   16034:	mov	r0, r5
   16038:	blx	r3
   1603c:	ldr	r3, [r6, #8]
   16040:	cmp	r0, r3
   16044:	mov	r7, r0
   16048:	bcs	16228 <__assert_fail@plt+0x507c>
   1604c:	ldr	r8, [r6]
   16050:	add	r4, r8, r0, lsl #3
   16054:	ldr	r1, [r8, r0, lsl #3]
   16058:	str	r4, [sp, #4]
   1605c:	cmp	r1, #0
   16060:	beq	1622c <__assert_fail@plt+0x5080>
   16064:	cmp	r5, r1
   16068:	beq	1608c <__assert_fail@plt+0x4ee0>
   1606c:	ldr	r3, [r6, #28]
   16070:	mov	r0, r5
   16074:	blx	r3
   16078:	cmp	r0, #0
   1607c:	beq	160bc <__assert_fail@plt+0x4f10>
   16080:	ldr	r1, [r8, r7, lsl #3]
   16084:	cmp	r1, #0
   16088:	beq	160c8 <__assert_fail@plt+0x4f1c>
   1608c:	mov	r0, r1
   16090:	add	sp, sp, #8
   16094:	pop	{r4, r5, r6, r7, r8, pc}
   16098:	ldr	r1, [r3]
   1609c:	cmp	r5, r1
   160a0:	beq	1608c <__assert_fail@plt+0x4ee0>
   160a4:	ldr	r3, [r6, #28]
   160a8:	mov	r0, r5
   160ac:	blx	r3
   160b0:	cmp	r0, #0
   160b4:	bne	16140 <__assert_fail@plt+0x4f94>
   160b8:	ldr	r4, [r4, #4]
   160bc:	ldr	r3, [r4, #4]
   160c0:	cmp	r3, #0
   160c4:	bne	16098 <__assert_fail@plt+0x4eec>
   160c8:	vldr	s15, [r6, #8]
   160cc:	ldr	r3, [r6, #20]
   160d0:	vldr	s14, [r6, #12]
   160d4:	vcvt.f32.u32	s15, s15
   160d8:	vldr	s13, [r3, #8]
   160dc:	vcvt.f32.u32	s14, s14
   160e0:	vmul.f32	s12, s13, s15
   160e4:	vcmpe.f32	s14, s12
   160e8:	vmrs	APSR_nzcv, fpscr
   160ec:	bgt	1614c <__assert_fail@plt+0x4fa0>
   160f0:	ldr	r4, [sp, #4]
   160f4:	ldr	r3, [r4]
   160f8:	cmp	r3, #0
   160fc:	beq	1628c <__assert_fail@plt+0x50e0>
   16100:	ldr	r0, [r6, #36]	; 0x24
   16104:	cmp	r0, #0
   16108:	beq	16274 <__assert_fail@plt+0x50c8>
   1610c:	ldr	r3, [r0, #4]
   16110:	str	r3, [r6, #36]	; 0x24
   16114:	ldr	r3, [r6, #16]
   16118:	ldr	r2, [r4, #4]
   1611c:	add	r3, r3, #1
   16120:	str	r5, [r0]
   16124:	str	r2, [r0, #4]
   16128:	str	r0, [r4, #4]
   1612c:	str	r3, [r6, #16]
   16130:	mov	r1, r5
   16134:	mov	r0, r1
   16138:	add	sp, sp, #8
   1613c:	pop	{r4, r5, r6, r7, r8, pc}
   16140:	ldr	r3, [r4, #4]
   16144:	ldr	r1, [r3]
   16148:	b	16084 <__assert_fail@plt+0x4ed8>
   1614c:	ldr	r2, [pc, #388]	; 162d8 <__assert_fail@plt+0x512c>
   16150:	cmp	r3, r2
   16154:	beq	161d8 <__assert_fail@plt+0x502c>
   16158:	vldr	s12, [pc, #348]	; 162bc <__assert_fail@plt+0x5110>
   1615c:	vcmpe.f32	s13, s12
   16160:	vmrs	APSR_nzcv, fpscr
   16164:	ble	161c0 <__assert_fail@plt+0x5014>
   16168:	vldr	s11, [pc, #336]	; 162c0 <__assert_fail@plt+0x5114>
   1616c:	vcmpe.f32	s13, s11
   16170:	vmrs	APSR_nzcv, fpscr
   16174:	bpl	161c0 <__assert_fail@plt+0x5014>
   16178:	vldr	s11, [r3, #12]
   1617c:	vldr	s10, [pc, #320]	; 162c4 <__assert_fail@plt+0x5118>
   16180:	vcmpe.f32	s11, s10
   16184:	vmrs	APSR_nzcv, fpscr
   16188:	ble	161c0 <__assert_fail@plt+0x5014>
   1618c:	vldr	s10, [r3]
   16190:	vcmpe.f32	s10, #0.0
   16194:	vmrs	APSR_nzcv, fpscr
   16198:	blt	161c0 <__assert_fail@plt+0x5014>
   1619c:	vadd.f32	s12, s10, s12
   161a0:	vldr	s10, [r3, #4]
   161a4:	vcmpe.f32	s12, s10
   161a8:	vmrs	APSR_nzcv, fpscr
   161ac:	bpl	161c0 <__assert_fail@plt+0x5014>
   161b0:	vldr	s9, [pc, #272]	; 162c8 <__assert_fail@plt+0x511c>
   161b4:	vcmpe.f32	s10, s9
   161b8:	vmrs	APSR_nzcv, fpscr
   161bc:	bls	1629c <__assert_fail@plt+0x50f0>
   161c0:	vldr	s13, [pc, #260]	; 162cc <__assert_fail@plt+0x5120>
   161c4:	str	r2, [r6, #20]
   161c8:	vmul.f32	s12, s15, s13
   161cc:	vcmpe.f32	s12, s14
   161d0:	vmrs	APSR_nzcv, fpscr
   161d4:	bpl	160f0 <__assert_fail@plt+0x4f44>
   161d8:	vldr	s11, [pc, #240]	; 162d0 <__assert_fail@plt+0x5124>
   161dc:	vmul.f32	s15, s15, s11
   161e0:	vmul.f32	s15, s15, s13
   161e4:	vldr	s14, [pc, #232]	; 162d4 <__assert_fail@plt+0x5128>
   161e8:	vcmpe.f32	s15, s14
   161ec:	vmrs	APSR_nzcv, fpscr
   161f0:	bge	16294 <__assert_fail@plt+0x50e8>
   161f4:	vcvt.u32.f32	s15, s15
   161f8:	mov	r0, r6
   161fc:	vmov	r1, s15
   16200:	bl	15a7c <__assert_fail@plt+0x48d0>
   16204:	cmp	r0, #0
   16208:	beq	16294 <__assert_fail@plt+0x50e8>
   1620c:	mov	r3, #0
   16210:	add	r2, sp, #4
   16214:	mov	r1, r5
   16218:	mov	r0, r6
   1621c:	bl	14f54 <__assert_fail@plt+0x3da8>
   16220:	cmp	r0, #0
   16224:	beq	160f0 <__assert_fail@plt+0x4f44>
   16228:	bl	1117c <abort@plt>
   1622c:	vmov	s15, r3
   16230:	ldr	r2, [r6, #12]
   16234:	ldr	r3, [r6, #20]
   16238:	vcvt.f32.u32	s15, s15
   1623c:	vldr	s13, [r3, #8]
   16240:	vmov	s14, r2
   16244:	vcvt.f32.u32	s14, s14
   16248:	vmul.f32	s12, s15, s13
   1624c:	vcmpe.f32	s12, s14
   16250:	vmrs	APSR_nzcv, fpscr
   16254:	bmi	1614c <__assert_fail@plt+0x4fa0>
   16258:	ldr	r3, [r6, #16]
   1625c:	add	r2, r2, #1
   16260:	add	r3, r3, #1
   16264:	str	r5, [r4]
   16268:	str	r2, [r6, #12]
   1626c:	str	r3, [r6, #16]
   16270:	b	16130 <__assert_fail@plt+0x4f84>
   16274:	mov	r0, #8
   16278:	bl	1c098 <__assert_fail@plt+0xaeec>
   1627c:	cmp	r0, #0
   16280:	beq	16294 <__assert_fail@plt+0x50e8>
   16284:	ldr	r4, [sp, #4]
   16288:	b	16114 <__assert_fail@plt+0x4f68>
   1628c:	ldr	r2, [r6, #12]
   16290:	b	16258 <__assert_fail@plt+0x50ac>
   16294:	mov	r1, #0
   16298:	b	1608c <__assert_fail@plt+0x4ee0>
   1629c:	vcmpe.f32	s12, s13
   162a0:	vmrs	APSR_nzcv, fpscr
   162a4:	bpl	161c0 <__assert_fail@plt+0x5014>
   162a8:	ldrb	r3, [r3, #16]
   162ac:	cmp	r3, #0
   162b0:	vmulne.f32	s15, s11, s15
   162b4:	bne	161e4 <__assert_fail@plt+0x5038>
   162b8:	b	161dc <__assert_fail@plt+0x5030>
   162bc:	stclcc	12, cr12, [ip, #820]	; 0x334
   162c0:	svccc	0x00666666
   162c4:	svccc	0x008ccccd
   162c8:	svccc	0x00800000
   162cc:	svccc	0x004ccccd
   162d0:	svccc	0x00b4fdf4
   162d4:	svcmi	0x00800000
   162d8:	andeq	sp, r1, r0, lsr #19
   162dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   162e0:	mov	r7, r1
   162e4:	ldr	r3, [r0, #24]
   162e8:	mov	r6, r0
   162ec:	ldr	r1, [r0, #8]
   162f0:	mov	r0, r7
   162f4:	blx	r3
   162f8:	ldr	r3, [r6, #8]
   162fc:	cmp	r0, r3
   16300:	bcs	1652c <__assert_fail@plt+0x5380>
   16304:	ldr	r9, [r6]
   16308:	mov	r8, r0
   1630c:	add	r5, r9, r0, lsl #3
   16310:	ldr	r4, [r9, r0, lsl #3]
   16314:	cmp	r4, #0
   16318:	beq	163c4 <__assert_fail@plt+0x5218>
   1631c:	cmp	r7, r4
   16320:	beq	16340 <__assert_fail@plt+0x5194>
   16324:	mov	r1, r4
   16328:	ldr	r3, [r6, #28]
   1632c:	mov	r0, r7
   16330:	blx	r3
   16334:	cmp	r0, #0
   16338:	beq	163b8 <__assert_fail@plt+0x520c>
   1633c:	ldr	r4, [r9, r8, lsl #3]
   16340:	ldr	r3, [r5, #4]
   16344:	cmp	r3, #0
   16348:	movne	r2, #0
   1634c:	ldmne	r3, {r0, r1}
   16350:	streq	r3, [r9, r8, lsl #3]
   16354:	stmne	r5, {r0, r1}
   16358:	strne	r2, [r3]
   1635c:	ldrne	r2, [r6, #36]	; 0x24
   16360:	strne	r2, [r3, #4]
   16364:	strne	r3, [r6, #36]	; 0x24
   16368:	cmp	r4, #0
   1636c:	beq	163c4 <__assert_fail@plt+0x5218>
   16370:	ldr	r2, [r9, r8, lsl #3]
   16374:	ldr	r3, [r6, #16]
   16378:	cmp	r2, #0
   1637c:	sub	r3, r3, #1
   16380:	str	r3, [r6, #16]
   16384:	beq	163f8 <__assert_fail@plt+0x524c>
   16388:	mov	r0, r4
   1638c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16390:	ldr	r4, [r3]
   16394:	cmp	r7, r4
   16398:	beq	163d8 <__assert_fail@plt+0x522c>
   1639c:	mov	r1, r4
   163a0:	ldr	r3, [r6, #28]
   163a4:	mov	r0, r7
   163a8:	blx	r3
   163ac:	cmp	r0, #0
   163b0:	bne	163d0 <__assert_fail@plt+0x5224>
   163b4:	ldr	r5, [r5, #4]
   163b8:	ldr	r3, [r5, #4]
   163bc:	cmp	r3, #0
   163c0:	bne	16390 <__assert_fail@plt+0x51e4>
   163c4:	mov	r4, #0
   163c8:	mov	r0, r4
   163cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163d0:	ldr	r3, [r5, #4]
   163d4:	ldr	r4, [r3]
   163d8:	ldr	r1, [r3, #4]
   163dc:	mov	r2, #0
   163e0:	str	r1, [r5, #4]
   163e4:	str	r2, [r3]
   163e8:	ldr	r2, [r6, #36]	; 0x24
   163ec:	str	r2, [r3, #4]
   163f0:	str	r3, [r6, #36]	; 0x24
   163f4:	b	16368 <__assert_fail@plt+0x51bc>
   163f8:	vldr	s15, [r6, #8]
   163fc:	ldr	r3, [r6, #12]
   16400:	ldr	r2, [r6, #20]
   16404:	sub	r3, r3, #1
   16408:	vcvt.f32.u32	s14, s15
   1640c:	vldr	s13, [r2]
   16410:	vmov	s15, r3
   16414:	str	r3, [r6, #12]
   16418:	vcvt.f32.u32	s15, s15
   1641c:	vmul.f32	s12, s13, s14
   16420:	vcmpe.f32	s15, s12
   16424:	vmrs	APSR_nzcv, fpscr
   16428:	bpl	16388 <__assert_fail@plt+0x51dc>
   1642c:	ldr	r3, [pc, #276]	; 16548 <__assert_fail@plt+0x539c>
   16430:	cmp	r2, r3
   16434:	beq	16514 <__assert_fail@plt+0x5368>
   16438:	vldr	s12, [r2, #8]
   1643c:	vldr	s11, [pc, #236]	; 16530 <__assert_fail@plt+0x5384>
   16440:	vcmpe.f32	s12, s11
   16444:	vmrs	APSR_nzcv, fpscr
   16448:	ble	164fc <__assert_fail@plt+0x5350>
   1644c:	vldr	s10, [pc, #224]	; 16534 <__assert_fail@plt+0x5388>
   16450:	vcmpe.f32	s12, s10
   16454:	vmrs	APSR_nzcv, fpscr
   16458:	bpl	164fc <__assert_fail@plt+0x5350>
   1645c:	vldr	s10, [pc, #212]	; 16538 <__assert_fail@plt+0x538c>
   16460:	vldr	s9, [r2, #12]
   16464:	vcmpe.f32	s9, s10
   16468:	vmrs	APSR_nzcv, fpscr
   1646c:	ble	164fc <__assert_fail@plt+0x5350>
   16470:	vcmpe.f32	s13, #0.0
   16474:	vmrs	APSR_nzcv, fpscr
   16478:	blt	164fc <__assert_fail@plt+0x5350>
   1647c:	vadd.f32	s13, s13, s11
   16480:	vldr	s11, [r2, #4]
   16484:	vcmpe.f32	s13, s11
   16488:	vmrs	APSR_nzcv, fpscr
   1648c:	bpl	164fc <__assert_fail@plt+0x5350>
   16490:	vldr	s10, [pc, #164]	; 1653c <__assert_fail@plt+0x5390>
   16494:	vcmpe.f32	s11, s10
   16498:	vmrs	APSR_nzcv, fpscr
   1649c:	bhi	164fc <__assert_fail@plt+0x5350>
   164a0:	vcmpe.f32	s12, s13
   164a4:	vmrs	APSR_nzcv, fpscr
   164a8:	ble	164fc <__assert_fail@plt+0x5350>
   164ac:	ldrb	r3, [r2, #16]
   164b0:	cmp	r3, #0
   164b4:	beq	1651c <__assert_fail@plt+0x5370>
   164b8:	vmul.f32	s15, s14, s11
   164bc:	vcvt.u32.f32	s15, s15
   164c0:	vmov	r1, s15
   164c4:	mov	r0, r6
   164c8:	bl	15a7c <__assert_fail@plt+0x48d0>
   164cc:	cmp	r0, #0
   164d0:	bne	16388 <__assert_fail@plt+0x51dc>
   164d4:	ldr	r0, [r6, #36]	; 0x24
   164d8:	cmp	r0, #0
   164dc:	beq	164f0 <__assert_fail@plt+0x5344>
   164e0:	ldr	r5, [r0, #4]
   164e4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   164e8:	subs	r0, r5, #0
   164ec:	bne	164e0 <__assert_fail@plt+0x5334>
   164f0:	mov	r3, #0
   164f4:	str	r3, [r6, #36]	; 0x24
   164f8:	b	16388 <__assert_fail@plt+0x51dc>
   164fc:	vldr	s13, [pc, #60]	; 16540 <__assert_fail@plt+0x5394>
   16500:	str	r3, [r6, #20]
   16504:	vmul.f32	s13, s14, s13
   16508:	vcmpe.f32	s15, s13
   1650c:	vmrs	APSR_nzcv, fpscr
   16510:	bpl	16388 <__assert_fail@plt+0x51dc>
   16514:	vldr	s12, [pc, #40]	; 16544 <__assert_fail@plt+0x5398>
   16518:	vldr	s11, [pc, #28]	; 1653c <__assert_fail@plt+0x5390>
   1651c:	vmul.f32	s15, s14, s11
   16520:	vmul.f32	s15, s15, s12
   16524:	vcvt.u32.f32	s15, s15
   16528:	b	164c0 <__assert_fail@plt+0x5314>
   1652c:	bl	1117c <abort@plt>
   16530:	stclcc	12, cr12, [ip, #820]	; 0x334
   16534:	svccc	0x00666666
   16538:	svccc	0x008ccccd
   1653c:	svccc	0x00800000
   16540:	andeq	r0, r0, r0
   16544:	svccc	0x004ccccd
   16548:	andeq	sp, r1, r0, lsr #19
   1654c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16550:	mov	r7, r1
   16554:	ldr	r3, [r0, #24]
   16558:	mov	r6, r0
   1655c:	ldr	r1, [r0, #8]
   16560:	mov	r0, r7
   16564:	blx	r3
   16568:	ldr	r3, [r6, #8]
   1656c:	cmp	r0, r3
   16570:	bcs	1679c <__assert_fail@plt+0x55f0>
   16574:	ldr	r9, [r6]
   16578:	mov	r8, r0
   1657c:	add	r5, r9, r0, lsl #3
   16580:	ldr	r4, [r9, r0, lsl #3]
   16584:	cmp	r4, #0
   16588:	beq	16634 <__assert_fail@plt+0x5488>
   1658c:	cmp	r7, r4
   16590:	beq	165b0 <__assert_fail@plt+0x5404>
   16594:	mov	r1, r4
   16598:	ldr	r3, [r6, #28]
   1659c:	mov	r0, r7
   165a0:	blx	r3
   165a4:	cmp	r0, #0
   165a8:	beq	16628 <__assert_fail@plt+0x547c>
   165ac:	ldr	r4, [r9, r8, lsl #3]
   165b0:	ldr	r3, [r5, #4]
   165b4:	cmp	r3, #0
   165b8:	movne	r2, #0
   165bc:	ldmne	r3, {r0, r1}
   165c0:	streq	r3, [r9, r8, lsl #3]
   165c4:	stmne	r5, {r0, r1}
   165c8:	strne	r2, [r3]
   165cc:	ldrne	r2, [r6, #36]	; 0x24
   165d0:	strne	r2, [r3, #4]
   165d4:	strne	r3, [r6, #36]	; 0x24
   165d8:	cmp	r4, #0
   165dc:	beq	16634 <__assert_fail@plt+0x5488>
   165e0:	ldr	r2, [r9, r8, lsl #3]
   165e4:	ldr	r3, [r6, #16]
   165e8:	cmp	r2, #0
   165ec:	sub	r3, r3, #1
   165f0:	str	r3, [r6, #16]
   165f4:	beq	16668 <__assert_fail@plt+0x54bc>
   165f8:	mov	r0, r4
   165fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16600:	ldr	r4, [r3]
   16604:	cmp	r7, r4
   16608:	beq	16648 <__assert_fail@plt+0x549c>
   1660c:	mov	r1, r4
   16610:	ldr	r3, [r6, #28]
   16614:	mov	r0, r7
   16618:	blx	r3
   1661c:	cmp	r0, #0
   16620:	bne	16640 <__assert_fail@plt+0x5494>
   16624:	ldr	r5, [r5, #4]
   16628:	ldr	r3, [r5, #4]
   1662c:	cmp	r3, #0
   16630:	bne	16600 <__assert_fail@plt+0x5454>
   16634:	mov	r4, #0
   16638:	mov	r0, r4
   1663c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16640:	ldr	r3, [r5, #4]
   16644:	ldr	r4, [r3]
   16648:	ldr	r1, [r3, #4]
   1664c:	mov	r2, #0
   16650:	str	r1, [r5, #4]
   16654:	str	r2, [r3]
   16658:	ldr	r2, [r6, #36]	; 0x24
   1665c:	str	r2, [r3, #4]
   16660:	str	r3, [r6, #36]	; 0x24
   16664:	b	165d8 <__assert_fail@plt+0x542c>
   16668:	vldr	s15, [r6, #8]
   1666c:	ldr	r3, [r6, #12]
   16670:	ldr	r2, [r6, #20]
   16674:	sub	r3, r3, #1
   16678:	vcvt.f32.u32	s14, s15
   1667c:	vldr	s13, [r2]
   16680:	vmov	s15, r3
   16684:	str	r3, [r6, #12]
   16688:	vcvt.f32.u32	s15, s15
   1668c:	vmul.f32	s12, s13, s14
   16690:	vcmpe.f32	s15, s12
   16694:	vmrs	APSR_nzcv, fpscr
   16698:	bpl	165f8 <__assert_fail@plt+0x544c>
   1669c:	ldr	r3, [pc, #276]	; 167b8 <__assert_fail@plt+0x560c>
   166a0:	cmp	r2, r3
   166a4:	beq	16784 <__assert_fail@plt+0x55d8>
   166a8:	vldr	s12, [r2, #8]
   166ac:	vldr	s11, [pc, #236]	; 167a0 <__assert_fail@plt+0x55f4>
   166b0:	vcmpe.f32	s12, s11
   166b4:	vmrs	APSR_nzcv, fpscr
   166b8:	ble	1676c <__assert_fail@plt+0x55c0>
   166bc:	vldr	s10, [pc, #224]	; 167a4 <__assert_fail@plt+0x55f8>
   166c0:	vcmpe.f32	s12, s10
   166c4:	vmrs	APSR_nzcv, fpscr
   166c8:	bpl	1676c <__assert_fail@plt+0x55c0>
   166cc:	vldr	s10, [pc, #212]	; 167a8 <__assert_fail@plt+0x55fc>
   166d0:	vldr	s9, [r2, #12]
   166d4:	vcmpe.f32	s9, s10
   166d8:	vmrs	APSR_nzcv, fpscr
   166dc:	ble	1676c <__assert_fail@plt+0x55c0>
   166e0:	vcmpe.f32	s13, #0.0
   166e4:	vmrs	APSR_nzcv, fpscr
   166e8:	blt	1676c <__assert_fail@plt+0x55c0>
   166ec:	vadd.f32	s13, s13, s11
   166f0:	vldr	s11, [r2, #4]
   166f4:	vcmpe.f32	s13, s11
   166f8:	vmrs	APSR_nzcv, fpscr
   166fc:	bpl	1676c <__assert_fail@plt+0x55c0>
   16700:	vldr	s10, [pc, #164]	; 167ac <__assert_fail@plt+0x5600>
   16704:	vcmpe.f32	s11, s10
   16708:	vmrs	APSR_nzcv, fpscr
   1670c:	bhi	1676c <__assert_fail@plt+0x55c0>
   16710:	vcmpe.f32	s12, s13
   16714:	vmrs	APSR_nzcv, fpscr
   16718:	ble	1676c <__assert_fail@plt+0x55c0>
   1671c:	ldrb	r3, [r2, #16]
   16720:	cmp	r3, #0
   16724:	beq	1678c <__assert_fail@plt+0x55e0>
   16728:	vmul.f32	s15, s14, s11
   1672c:	vcvt.u32.f32	s15, s15
   16730:	vmov	r1, s15
   16734:	mov	r0, r6
   16738:	bl	15a7c <__assert_fail@plt+0x48d0>
   1673c:	cmp	r0, #0
   16740:	bne	165f8 <__assert_fail@plt+0x544c>
   16744:	ldr	r0, [r6, #36]	; 0x24
   16748:	cmp	r0, #0
   1674c:	beq	16760 <__assert_fail@plt+0x55b4>
   16750:	ldr	r5, [r0, #4]
   16754:	bl	1c598 <__assert_fail@plt+0xb3ec>
   16758:	subs	r0, r5, #0
   1675c:	bne	16750 <__assert_fail@plt+0x55a4>
   16760:	mov	r3, #0
   16764:	str	r3, [r6, #36]	; 0x24
   16768:	b	165f8 <__assert_fail@plt+0x544c>
   1676c:	vldr	s13, [pc, #60]	; 167b0 <__assert_fail@plt+0x5604>
   16770:	str	r3, [r6, #20]
   16774:	vmul.f32	s13, s14, s13
   16778:	vcmpe.f32	s15, s13
   1677c:	vmrs	APSR_nzcv, fpscr
   16780:	bpl	165f8 <__assert_fail@plt+0x544c>
   16784:	vldr	s12, [pc, #40]	; 167b4 <__assert_fail@plt+0x5608>
   16788:	vldr	s11, [pc, #28]	; 167ac <__assert_fail@plt+0x5600>
   1678c:	vmul.f32	s15, s14, s11
   16790:	vmul.f32	s15, s15, s12
   16794:	vcvt.u32.f32	s15, s15
   16798:	b	16730 <__assert_fail@plt+0x5584>
   1679c:	bl	1117c <abort@plt>
   167a0:	stclcc	12, cr12, [ip, #820]	; 0x334
   167a4:	svccc	0x00666666
   167a8:	svccc	0x008ccccd
   167ac:	svccc	0x00800000
   167b0:	andeq	r0, r0, r0
   167b4:	svccc	0x004ccccd
   167b8:	andeq	sp, r1, r0, lsr #19
   167bc:	mov	r3, #0
   167c0:	mov	r2, #1
   167c4:	str	r1, [r0]
   167c8:	str	r1, [r0, #4]
   167cc:	str	r1, [r0, #8]
   167d0:	str	r1, [r0, #12]
   167d4:	str	r1, [r0, #16]
   167d8:	strb	r2, [r0, #28]
   167dc:	str	r3, [r0, #20]
   167e0:	str	r3, [r0, #24]
   167e4:	bx	lr
   167e8:	ldrb	r0, [r0, #28]
   167ec:	bx	lr
   167f0:	ldrb	ip, [r0, #28]
   167f4:	ldr	r3, [r0, #20]
   167f8:	mov	r2, r0
   167fc:	eor	ip, ip, #1
   16800:	add	r3, ip, r3
   16804:	and	r3, r3, #3
   16808:	ldr	r0, [r0, r3, lsl #2]
   1680c:	str	r1, [r2, r3, lsl #2]
   16810:	ldr	r1, [r2, #24]
   16814:	str	r3, [r2, #20]
   16818:	cmp	r3, r1
   1681c:	addeq	r3, ip, r3
   16820:	andeq	r3, r3, #3
   16824:	streq	r3, [r2, #24]
   16828:	mov	r3, #0
   1682c:	strb	r3, [r2, #28]
   16830:	bx	lr
   16834:	ldrb	r3, [r0, #28]
   16838:	cmp	r3, #0
   1683c:	bne	16874 <__assert_fail@plt+0x56c8>
   16840:	ldr	r3, [r0, #20]
   16844:	ldr	r1, [r0, #16]
   16848:	ldr	r2, [r0, r3, lsl #2]
   1684c:	str	r1, [r0, r3, lsl #2]
   16850:	ldr	r1, [r0, #24]
   16854:	cmp	r3, r1
   16858:	addne	r3, r3, #3
   1685c:	moveq	r3, #1
   16860:	andne	r3, r3, #3
   16864:	strbeq	r3, [r0, #28]
   16868:	strne	r3, [r0, #20]
   1686c:	mov	r0, r2
   16870:	bx	lr
   16874:	push	{r4, lr}
   16878:	bl	1117c <abort@plt>
   1687c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16880:	mov	r4, r0
   16884:	ldrb	r3, [r0]
   16888:	sub	r2, r3, #48	; 0x30
   1688c:	cmp	r2, #7
   16890:	bls	16928 <__assert_fail@plt+0x577c>
   16894:	cmp	r3, #0
   16898:	moveq	r0, #1
   1689c:	beq	168cc <__assert_fail@plt+0x5720>
   168a0:	mov	r1, r4
   168a4:	mov	r0, #1
   168a8:	and	r2, r3, #239	; 0xef
   168ac:	cmp	r3, #43	; 0x2b
   168b0:	cmpne	r2, #45	; 0x2d
   168b4:	ldrb	r3, [r1, #1]!
   168b8:	moveq	r2, #1
   168bc:	movne	r2, #0
   168c0:	cmp	r3, #0
   168c4:	add	r0, r0, r2
   168c8:	bne	168a8 <__assert_fail@plt+0x56fc>
   168cc:	mov	r1, #16
   168d0:	ldr	r6, [pc, #816]	; 16c08 <__assert_fail@plt+0x5a5c>
   168d4:	bl	1ba2c <__assert_fail@plt+0xa880>
   168d8:	mov	r9, #3
   168dc:	mov	r2, #0
   168e0:	mov	sl, #1
   168e4:	mov	fp, #2
   168e8:	mov	lr, #0
   168ec:	ldrb	ip, [r4]
   168f0:	mov	r3, r4
   168f4:	add	r4, r4, #1
   168f8:	cmp	ip, #97	; 0x61
   168fc:	beq	16b70 <__assert_fail@plt+0x59c4>
   16900:	bls	16970 <__assert_fail@plt+0x57c4>
   16904:	cmp	ip, #111	; 0x6f
   16908:	beq	16b78 <__assert_fail@plt+0x59cc>
   1690c:	cmp	ip, #117	; 0x75
   16910:	beq	16968 <__assert_fail@plt+0x57bc>
   16914:	cmp	ip, #103	; 0x67
   16918:	beq	16b84 <__assert_fail@plt+0x59d8>
   1691c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   16920:	mov	r0, #0
   16924:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16928:	ldr	r0, [pc, #728]	; 16c08 <__assert_fail@plt+0x5a5c>
   1692c:	mov	r3, r4
   16930:	mov	r5, #0
   16934:	b	16948 <__assert_fail@plt+0x579c>
   16938:	ldrb	r2, [r3]
   1693c:	sub	r1, r2, #48	; 0x30
   16940:	cmp	r1, #7
   16944:	bhi	16b90 <__assert_fail@plt+0x59e4>
   16948:	ldrb	r2, [r3], #1
   1694c:	lsl	r5, r5, #3
   16950:	sub	r5, r5, #48	; 0x30
   16954:	add	r5, r2, r5
   16958:	cmp	r5, r0
   1695c:	bls	16938 <__assert_fail@plt+0x578c>
   16960:	mov	r0, #0
   16964:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16968:	orr	lr, lr, #2496	; 0x9c0
   1696c:	b	168ec <__assert_fail@plt+0x5740>
   16970:	cmp	ip, #45	; 0x2d
   16974:	beq	16988 <__assert_fail@plt+0x57dc>
   16978:	cmp	ip, #61	; 0x3d
   1697c:	beq	16988 <__assert_fail@plt+0x57dc>
   16980:	cmp	ip, #43	; 0x2b
   16984:	bne	1691c <__assert_fail@plt+0x5770>
   16988:	add	r7, r2, #1
   1698c:	add	r2, r0, r2, lsl #4
   16990:	b	169f0 <__assert_fail@plt+0x5844>
   16994:	cmp	r4, #111	; 0x6f
   16998:	beq	16b5c <__assert_fail@plt+0x59b0>
   1699c:	cmp	r4, #117	; 0x75
   169a0:	bne	16a88 <__assert_fail@plt+0x58dc>
   169a4:	ldrb	r4, [r3, #2]
   169a8:	mov	r8, r9
   169ac:	add	r3, r3, #2
   169b0:	mov	r1, #448	; 0x1c0
   169b4:	cmp	lr, #0
   169b8:	strb	ip, [r2]
   169bc:	str	r1, [r2, #8]
   169c0:	mov	ip, r4
   169c4:	andne	r1, r1, lr
   169c8:	strb	r8, [r2, #1]
   169cc:	str	lr, [r2, #4]
   169d0:	and	r4, ip, #239	; 0xef
   169d4:	cmp	ip, #43	; 0x2b
   169d8:	cmpne	r4, #45	; 0x2d
   169dc:	str	r1, [r2, #12]
   169e0:	add	r1, r7, #1
   169e4:	add	r2, r2, #16
   169e8:	bne	16be4 <__assert_fail@plt+0x5a38>
   169ec:	mov	r7, r1
   169f0:	ldrb	r4, [r3, #1]
   169f4:	add	r1, r3, #1
   169f8:	cmp	r4, #103	; 0x67
   169fc:	beq	16a74 <__assert_fail@plt+0x58c8>
   16a00:	bhi	16994 <__assert_fail@plt+0x57e8>
   16a04:	sub	r3, r4, #48	; 0x30
   16a08:	cmp	r3, #7
   16a0c:	movls	r3, #0
   16a10:	bhi	16a88 <__assert_fail@plt+0x58dc>
   16a14:	ldrb	r4, [r1], #1
   16a18:	lsl	r3, r3, #3
   16a1c:	sub	r3, r3, #48	; 0x30
   16a20:	add	r3, r4, r3
   16a24:	cmp	r3, r6
   16a28:	bhi	1691c <__assert_fail@plt+0x5770>
   16a2c:	ldrb	r4, [r1]
   16a30:	sub	r5, r4, #48	; 0x30
   16a34:	cmp	r5, #7
   16a38:	bls	16a14 <__assert_fail@plt+0x5868>
   16a3c:	cmp	lr, #0
   16a40:	bne	1691c <__assert_fail@plt+0x5770>
   16a44:	cmp	r4, #0
   16a48:	cmpne	r4, #44	; 0x2c
   16a4c:	bne	1691c <__assert_fail@plt+0x5770>
   16a50:	ldr	lr, [pc, #432]	; 16c08 <__assert_fail@plt+0x5a5c>
   16a54:	strb	ip, [r2]
   16a58:	str	r3, [r2, #8]
   16a5c:	strb	sl, [r2, #1]
   16a60:	mov	r3, r1
   16a64:	str	r6, [r2, #4]
   16a68:	mov	ip, r4
   16a6c:	mov	r1, lr
   16a70:	b	169d0 <__assert_fail@plt+0x5824>
   16a74:	ldrb	r4, [r3, #2]
   16a78:	mov	r8, r9
   16a7c:	add	r3, r3, #2
   16a80:	mov	r1, #56	; 0x38
   16a84:	b	169b4 <__assert_fail@plt+0x5808>
   16a88:	mov	r3, r1
   16a8c:	mov	r8, sl
   16a90:	mov	r1, #0
   16a94:	sub	r5, r4, #88	; 0x58
   16a98:	cmp	r5, #32
   16a9c:	ldrls	pc, [pc, r5, lsl #2]
   16aa0:	b	169b4 <__assert_fail@plt+0x5808>
   16aa4:	andeq	r6, r1, r8, lsr #22
   16aa8:			; <UNDEFINED> instruction: 0x000169b4
   16aac:			; <UNDEFINED> instruction: 0x000169b4
   16ab0:			; <UNDEFINED> instruction: 0x000169b4
   16ab4:			; <UNDEFINED> instruction: 0x000169b4
   16ab8:			; <UNDEFINED> instruction: 0x000169b4
   16abc:			; <UNDEFINED> instruction: 0x000169b4
   16ac0:			; <UNDEFINED> instruction: 0x000169b4
   16ac4:			; <UNDEFINED> instruction: 0x000169b4
   16ac8:			; <UNDEFINED> instruction: 0x000169b4
   16acc:			; <UNDEFINED> instruction: 0x000169b4
   16ad0:			; <UNDEFINED> instruction: 0x000169b4
   16ad4:			; <UNDEFINED> instruction: 0x000169b4
   16ad8:			; <UNDEFINED> instruction: 0x000169b4
   16adc:			; <UNDEFINED> instruction: 0x000169b4
   16ae0:			; <UNDEFINED> instruction: 0x000169b4
   16ae4:			; <UNDEFINED> instruction: 0x000169b4
   16ae8:			; <UNDEFINED> instruction: 0x000169b4
   16aec:			; <UNDEFINED> instruction: 0x000169b4
   16af0:			; <UNDEFINED> instruction: 0x000169b4
   16af4:			; <UNDEFINED> instruction: 0x000169b4
   16af8:			; <UNDEFINED> instruction: 0x000169b4
   16afc:			; <UNDEFINED> instruction: 0x000169b4
   16b00:			; <UNDEFINED> instruction: 0x000169b4
   16b04:			; <UNDEFINED> instruction: 0x000169b4
   16b08:			; <UNDEFINED> instruction: 0x000169b4
   16b0c:	andeq	r6, r1, r4, asr fp
   16b10:	andeq	r6, r1, ip, asr #22
   16b14:	andeq	r6, r1, r4, asr #22
   16b18:			; <UNDEFINED> instruction: 0x000169b4
   16b1c:			; <UNDEFINED> instruction: 0x000169b4
   16b20:	andeq	r6, r1, ip, lsr fp
   16b24:	andeq	r6, r1, r4, lsr fp
   16b28:	mov	r8, fp
   16b2c:	ldrb	r4, [r3, #1]!
   16b30:	b	16a94 <__assert_fail@plt+0x58e8>
   16b34:	orr	r1, r1, #73	; 0x49
   16b38:	b	16b2c <__assert_fail@plt+0x5980>
   16b3c:	orr	r1, r1, #146	; 0x92
   16b40:	b	16b2c <__assert_fail@plt+0x5980>
   16b44:	orr	r1, r1, #512	; 0x200
   16b48:	b	16b2c <__assert_fail@plt+0x5980>
   16b4c:	orr	r1, r1, #3072	; 0xc00
   16b50:	b	16b2c <__assert_fail@plt+0x5980>
   16b54:	orr	r1, r1, #292	; 0x124
   16b58:	b	16b2c <__assert_fail@plt+0x5980>
   16b5c:	ldrb	r4, [r3, #2]
   16b60:	mov	r8, r9
   16b64:	add	r3, r3, #2
   16b68:	mov	r1, #7
   16b6c:	b	169b4 <__assert_fail@plt+0x5808>
   16b70:	ldr	lr, [pc, #144]	; 16c08 <__assert_fail@plt+0x5a5c>
   16b74:	b	168ec <__assert_fail@plt+0x5740>
   16b78:	orr	lr, lr, #516	; 0x204
   16b7c:	orr	lr, lr, #3
   16b80:	b	168ec <__assert_fail@plt+0x5740>
   16b84:	orr	lr, lr, #1072	; 0x430
   16b88:	orr	lr, lr, #8
   16b8c:	b	168ec <__assert_fail@plt+0x5740>
   16b90:	cmp	r2, #0
   16b94:	bne	16960 <__assert_fail@plt+0x57b4>
   16b98:	sub	r3, r3, r4
   16b9c:	cmp	r3, #4
   16ba0:	andle	r4, r5, #3072	; 0xc00
   16ba4:	mov	r0, #32
   16ba8:	mvnle	r4, r4, lsr #10
   16bac:	ldrgt	r4, [pc, #84]	; 16c08 <__assert_fail@plt+0x5a5c>
   16bb0:	mvnle	r4, r4, lsl #10
   16bb4:	bl	1b948 <__assert_fail@plt+0xa79c>
   16bb8:	ldr	r2, [pc, #72]	; 16c08 <__assert_fail@plt+0x5a5c>
   16bbc:	mov	ip, #61	; 0x3d
   16bc0:	mov	r1, #1
   16bc4:	mov	r3, #0
   16bc8:	str	r5, [r0, #8]
   16bcc:	str	r4, [r0, #12]
   16bd0:	strb	ip, [r0]
   16bd4:	strb	r1, [r0, #1]
   16bd8:	str	r2, [r0, #4]
   16bdc:	strb	r3, [r0, #17]
   16be0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16be4:	cmp	ip, #44	; 0x2c
   16be8:	addeq	r4, r3, #1
   16bec:	moveq	r2, r7
   16bf0:	beq	168e8 <__assert_fail@plt+0x573c>
   16bf4:	cmp	ip, #0
   16bf8:	bne	1691c <__assert_fail@plt+0x5770>
   16bfc:	add	r7, r0, r7, lsl #4
   16c00:	strb	ip, [r7, #1]
   16c04:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c08:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16c0c:	push	{r4, r5, lr}
   16c10:	sub	sp, sp, #108	; 0x6c
   16c14:	mov	r1, r0
   16c18:	mov	r2, sp
   16c1c:	mov	r0, #3
   16c20:	bl	11164 <__xstat64@plt>
   16c24:	subs	r4, r0, #0
   16c28:	movne	r0, #0
   16c2c:	bne	16c60 <__assert_fail@plt+0x5ab4>
   16c30:	mov	r0, #32
   16c34:	ldr	r5, [sp, #16]
   16c38:	bl	1b948 <__assert_fail@plt+0xa79c>
   16c3c:	ldr	r3, [pc, #36]	; 16c68 <__assert_fail@plt+0x5abc>
   16c40:	mov	r1, #61	; 0x3d
   16c44:	mov	r2, #1
   16c48:	str	r5, [r0, #8]
   16c4c:	strb	r4, [r0, #17]
   16c50:	strb	r1, [r0]
   16c54:	strb	r2, [r0, #1]
   16c58:	str	r3, [r0, #4]
   16c5c:	str	r3, [r0, #12]
   16c60:	add	sp, sp, #108	; 0x6c
   16c64:	pop	{r4, r5, pc}
   16c68:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c70:	ldrb	r4, [r3, #1]
   16c74:	ldr	r7, [pc, #292]	; 16da0 <__assert_fail@plt+0x5bf4>
   16c78:	ldr	r9, [sp, #36]	; 0x24
   16c7c:	cmp	r4, #0
   16c80:	and	r0, r0, r7
   16c84:	beq	16d98 <__assert_fail@plt+0x5bec>
   16c88:	cmp	r1, #0
   16c8c:	ldr	r8, [pc, #272]	; 16da4 <__assert_fail@plt+0x5bf8>
   16c90:	add	r3, r3, #16
   16c94:	mvn	r2, r2
   16c98:	movne	r6, #3072	; 0xc00
   16c9c:	moveq	r6, #0
   16ca0:	mov	r5, #0
   16ca4:	b	16d2c <__assert_fail@plt+0x5b80>
   16ca8:	cmp	r4, #3
   16cac:	bne	16ce8 <__assert_fail@plt+0x5b3c>
   16cb0:	and	r4, ip, r0
   16cb4:	and	ip, r4, #292	; 0x124
   16cb8:	cmp	ip, #0
   16cbc:	moveq	ip, #146	; 0x92
   16cc0:	movne	ip, r8
   16cc4:	moveq	fp, #0
   16cc8:	movne	fp, #292	; 0x124
   16ccc:	tst	r4, #146	; 0x92
   16cd0:	movne	fp, ip
   16cd4:	tst	r4, #73	; 0x49
   16cd8:	moveq	ip, #0
   16cdc:	movne	ip, #73	; 0x49
   16ce0:	orr	ip, ip, fp
   16ce4:	orr	ip, ip, r4
   16ce8:	ldrb	r4, [r3, #-16]
   16cec:	cmp	lr, #0
   16cf0:	movne	fp, lr
   16cf4:	moveq	fp, r2
   16cf8:	bic	ip, ip, sl
   16cfc:	cmp	r4, #45	; 0x2d
   16d00:	and	ip, ip, fp
   16d04:	beq	16d8c <__assert_fail@plt+0x5be0>
   16d08:	cmp	r4, #61	; 0x3d
   16d0c:	beq	16d54 <__assert_fail@plt+0x5ba8>
   16d10:	cmp	r4, #43	; 0x2b
   16d14:	orreq	r5, r5, ip
   16d18:	orreq	r0, r0, ip
   16d1c:	add	r3, r3, #16
   16d20:	ldrb	r4, [r3, #-15]
   16d24:	cmp	r4, #0
   16d28:	beq	16d80 <__assert_fail@plt+0x5bd4>
   16d2c:	ldr	lr, [r3, #-4]
   16d30:	cmp	r4, #2
   16d34:	bic	sl, r6, lr
   16d38:	ldr	ip, [r3, #-8]
   16d3c:	ldr	lr, [r3, #-12]
   16d40:	bne	16ca8 <__assert_fail@plt+0x5afc>
   16d44:	and	r4, r0, #73	; 0x49
   16d48:	orrs	r4, r4, r1
   16d4c:	orrne	ip, ip, #73	; 0x49
   16d50:	b	16ce8 <__assert_fail@plt+0x5b3c>
   16d54:	add	r3, r3, #16
   16d58:	cmp	lr, #0
   16d5c:	ldrb	r4, [r3, #-15]
   16d60:	mvnne	lr, lr
   16d64:	orr	lr, lr, sl
   16d68:	and	r0, r0, lr
   16d6c:	cmp	r4, #0
   16d70:	bic	lr, r7, lr
   16d74:	orr	r0, ip, r0
   16d78:	orr	r5, r5, lr
   16d7c:	bne	16d2c <__assert_fail@plt+0x5b80>
   16d80:	cmp	r9, #0
   16d84:	strne	r5, [r9]
   16d88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d8c:	orr	r5, r5, ip
   16d90:	bic	r0, r0, ip
   16d94:	b	16d1c <__assert_fail@plt+0x5b70>
   16d98:	mov	r5, r4
   16d9c:	b	16d80 <__assert_fail@plt+0x5bd4>
   16da0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   16da4:			; <UNDEFINED> instruction: 0x000001b6
   16da8:	push	{r2, r3}
   16dac:	push	{lr}		; (str lr, [sp, #-4]!)
   16db0:	sub	sp, sp, #12
   16db4:	ldr	r2, [sp, #16]
   16db8:	ands	r3, r2, #64	; 0x40
   16dbc:	addne	r3, sp, #20
   16dc0:	strne	r3, [sp, #4]
   16dc4:	ldrne	r3, [sp, #20]
   16dc8:	bl	11050 <openat64@plt>
   16dcc:	bl	1aed0 <__assert_fail@plt+0x9d24>
   16dd0:	add	sp, sp, #12
   16dd4:	pop	{lr}		; (ldr lr, [sp], #4)
   16dd8:	add	sp, sp, #8
   16ddc:	bx	lr
   16de0:	orr	r2, r2, #540672	; 0x84000
   16de4:	push	{r4, r5, r6, lr}
   16de8:	orr	r2, r2, #2304	; 0x900
   16dec:	mov	r6, r3
   16df0:	bl	16da8 <__assert_fail@plt+0x5bfc>
   16df4:	subs	r5, r0, #0
   16df8:	blt	16e2c <__assert_fail@plt+0x5c80>
   16dfc:	bl	11110 <fdopendir@plt>
   16e00:	subs	r4, r0, #0
   16e04:	beq	16e14 <__assert_fail@plt+0x5c68>
   16e08:	str	r5, [r6]
   16e0c:	mov	r0, r4
   16e10:	pop	{r4, r5, r6, pc}
   16e14:	bl	11068 <__errno_location@plt>
   16e18:	mov	r6, r0
   16e1c:	mov	r0, r5
   16e20:	ldr	r5, [r6]
   16e24:	bl	11188 <close@plt>
   16e28:	b	16e08 <__assert_fail@plt+0x5c5c>
   16e2c:	mov	r4, #0
   16e30:	b	16e0c <__assert_fail@plt+0x5c60>
   16e34:	push	{r4, r5, r6, lr}
   16e38:	subs	r4, r0, #0
   16e3c:	beq	16eb0 <__assert_fail@plt+0x5d04>
   16e40:	mov	r1, #47	; 0x2f
   16e44:	bl	110ec <strrchr@plt>
   16e48:	subs	r5, r0, #0
   16e4c:	beq	16e9c <__assert_fail@plt+0x5cf0>
   16e50:	add	r6, r5, #1
   16e54:	sub	r3, r6, r4
   16e58:	cmp	r3, #6
   16e5c:	ble	16e9c <__assert_fail@plt+0x5cf0>
   16e60:	mov	r2, #7
   16e64:	ldr	r1, [pc, #96]	; 16ecc <__assert_fail@plt+0x5d20>
   16e68:	sub	r0, r5, #6
   16e6c:	bl	11170 <strncmp@plt>
   16e70:	cmp	r0, #0
   16e74:	bne	16e9c <__assert_fail@plt+0x5cf0>
   16e78:	mov	r2, #3
   16e7c:	ldr	r1, [pc, #76]	; 16ed0 <__assert_fail@plt+0x5d24>
   16e80:	mov	r0, r6
   16e84:	bl	11170 <strncmp@plt>
   16e88:	cmp	r0, #0
   16e8c:	movne	r4, r6
   16e90:	ldreq	r3, [pc, #60]	; 16ed4 <__assert_fail@plt+0x5d28>
   16e94:	addeq	r4, r5, #4
   16e98:	streq	r4, [r3]
   16e9c:	ldr	r2, [pc, #52]	; 16ed8 <__assert_fail@plt+0x5d2c>
   16ea0:	ldr	r3, [pc, #52]	; 16edc <__assert_fail@plt+0x5d30>
   16ea4:	str	r4, [r2]
   16ea8:	str	r4, [r3]
   16eac:	pop	{r4, r5, r6, pc}
   16eb0:	ldr	r3, [pc, #40]	; 16ee0 <__assert_fail@plt+0x5d34>
   16eb4:	mov	r2, #55	; 0x37
   16eb8:	mov	r1, #1
   16ebc:	ldr	r3, [r3]
   16ec0:	ldr	r0, [pc, #28]	; 16ee4 <__assert_fail@plt+0x5d38>
   16ec4:	bl	10f9c <fwrite@plt>
   16ec8:	bl	1117c <abort@plt>
   16ecc:	andeq	sp, r1, r8, asr sl
   16ed0:	andeq	sp, r1, r0, ror #20
   16ed4:	andeq	lr, r2, r8, ror #2
   16ed8:			; <UNDEFINED> instruction: 0x0002e1b0
   16edc:	andeq	lr, r2, ip, ror #2
   16ee0:	andeq	lr, r2, r8, ror r1
   16ee4:	andeq	sp, r1, r0, lsr #20
   16ee8:	push	{r4, r5, r6, lr}
   16eec:	mov	r4, r0
   16ef0:	mov	r5, r1
   16ef4:	bl	1c690 <__assert_fail@plt+0xb4e4>
   16ef8:	ldrb	r3, [r0]
   16efc:	bic	r3, r3, #32
   16f00:	cmp	r3, #85	; 0x55
   16f04:	bne	16f64 <__assert_fail@plt+0x5db8>
   16f08:	ldrb	r3, [r0, #1]
   16f0c:	bic	r3, r3, #32
   16f10:	cmp	r3, #84	; 0x54
   16f14:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f18:	ldrb	r3, [r0, #2]
   16f1c:	bic	r3, r3, #32
   16f20:	cmp	r3, #70	; 0x46
   16f24:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f28:	ldrb	r3, [r0, #3]
   16f2c:	cmp	r3, #45	; 0x2d
   16f30:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f34:	ldrb	r3, [r0, #4]
   16f38:	cmp	r3, #56	; 0x38
   16f3c:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f40:	ldrb	r3, [r0, #5]
   16f44:	cmp	r3, #0
   16f48:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f4c:	ldrb	r2, [r4]
   16f50:	ldr	r3, [pc, #152]	; 16ff0 <__assert_fail@plt+0x5e44>
   16f54:	ldr	r0, [pc, #152]	; 16ff4 <__assert_fail@plt+0x5e48>
   16f58:	cmp	r2, #96	; 0x60
   16f5c:	movne	r0, r3
   16f60:	pop	{r4, r5, r6, pc}
   16f64:	cmp	r3, #71	; 0x47
   16f68:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f6c:	ldrb	r3, [r0, #1]
   16f70:	bic	r3, r3, #32
   16f74:	cmp	r3, #66	; 0x42
   16f78:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f7c:	ldrb	r3, [r0, #2]
   16f80:	cmp	r3, #49	; 0x31
   16f84:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f88:	ldrb	r3, [r0, #3]
   16f8c:	cmp	r3, #56	; 0x38
   16f90:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16f94:	ldrb	r3, [r0, #4]
   16f98:	cmp	r3, #48	; 0x30
   16f9c:	beq	16fb4 <__assert_fail@plt+0x5e08>
   16fa0:	ldr	r3, [pc, #80]	; 16ff8 <__assert_fail@plt+0x5e4c>
   16fa4:	cmp	r5, #9
   16fa8:	ldr	r0, [pc, #76]	; 16ffc <__assert_fail@plt+0x5e50>
   16fac:	movne	r0, r3
   16fb0:	pop	{r4, r5, r6, pc}
   16fb4:	ldrb	r3, [r0, #5]
   16fb8:	cmp	r3, #51	; 0x33
   16fbc:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16fc0:	ldrb	r3, [r0, #6]
   16fc4:	cmp	r3, #48	; 0x30
   16fc8:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16fcc:	ldrb	r3, [r0, #7]
   16fd0:	cmp	r3, #0
   16fd4:	bne	16fa0 <__assert_fail@plt+0x5df4>
   16fd8:	ldrb	r2, [r4]
   16fdc:	ldr	r3, [pc, #28]	; 17000 <__assert_fail@plt+0x5e54>
   16fe0:	ldr	r0, [pc, #28]	; 17004 <__assert_fail@plt+0x5e58>
   16fe4:	cmp	r2, #96	; 0x60
   16fe8:	movne	r0, r3
   16fec:	pop	{r4, r5, r6, pc}
   16ff0:			; <UNDEFINED> instruction: 0x0001dabc
   16ff4:			; <UNDEFINED> instruction: 0x0001dab8
   16ff8:	andeq	sp, r1, ip, asr #21
   16ffc:	andeq	sp, r1, r8, asr #21
   17000:	andeq	sp, r1, r4, asr #21
   17004:	andeq	sp, r1, r0, asr #21
   17008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1700c:	sub	sp, sp, #140	; 0x8c
   17010:	mov	r9, r1
   17014:	str	r3, [sp, #24]
   17018:	mov	r3, #1
   1701c:	mov	sl, r0
   17020:	str	r2, [sp, #44]	; 0x2c
   17024:	str	r3, [sp, #28]
   17028:	bl	10fb4 <__ctype_get_mb_cur_max@plt>
   1702c:	ldr	r3, [sp, #180]	; 0xb4
   17030:	mov	fp, r9
   17034:	mov	r9, sl
   17038:	lsr	r3, r3, #1
   1703c:	and	r3, r3, #1
   17040:	str	r3, [sp, #40]	; 0x28
   17044:	ldr	r3, [sp, #180]	; 0xb4
   17048:	mov	r2, #0
   1704c:	and	r3, r3, #4
   17050:	str	r3, [sp, #100]	; 0x64
   17054:	ldr	r3, [sp, #180]	; 0xb4
   17058:	str	r2, [sp, #76]	; 0x4c
   1705c:	and	r3, r3, #1
   17060:	str	r3, [sp, #96]	; 0x60
   17064:	str	r2, [sp, #36]	; 0x24
   17068:	str	r2, [sp, #56]	; 0x38
   1706c:	str	r2, [sp, #68]	; 0x44
   17070:	str	r2, [sp, #72]	; 0x48
   17074:	str	r2, [sp, #84]	; 0x54
   17078:	str	r0, [sp, #80]	; 0x50
   1707c:	ldr	r3, [sp, #176]	; 0xb0
   17080:	cmp	r3, #10
   17084:	ldrls	pc, [pc, r3, lsl #2]
   17088:	b	18260 <__assert_fail@plt+0x70b4>
   1708c:	strheq	r7, [r1], -r8
   17090:	ldrdeq	r7, [r1], -r8
   17094:	andeq	r7, r1, r0, lsr r5
   17098:	andeq	r7, r1, ip, lsl #8
   1709c:	andeq	r7, r1, r4, lsl #11
   170a0:	andeq	r7, r1, r4, ror #10
   170a4:	andeq	r7, r1, ip, lsr #8
   170a8:	andeq	r7, r1, r0, asr r4
   170ac:	andeq	r7, r1, r8, ror r4
   170b0:	andeq	r7, r1, r8, ror r4
   170b4:	andeq	r7, r1, r8, ror r4
   170b8:	mov	r3, #0
   170bc:	ldr	r1, [sp, #56]	; 0x38
   170c0:	ldr	r2, [sp, #176]	; 0xb0
   170c4:	ldr	lr, [sp, #176]	; 0xb0
   170c8:	mov	r8, r3
   170cc:	mov	ip, r3
   170d0:	str	r3, [sp, #40]	; 0x28
   170d4:	mov	r3, r1
   170d8:	cmp	r2, #2
   170dc:	moveq	r3, #0
   170e0:	andne	r3, r3, #1
   170e4:	mov	r0, r3
   170e8:	str	r3, [sp, #92]	; 0x5c
   170ec:	ldr	r3, [sp, #68]	; 0x44
   170f0:	sub	lr, lr, #2
   170f4:	adds	r2, r3, #0
   170f8:	movne	r2, #1
   170fc:	and	r3, r1, ip
   17100:	and	r3, r2, r3
   17104:	clz	lr, lr
   17108:	str	r3, [sp, #88]	; 0x58
   1710c:	lsr	lr, lr, #5
   17110:	mov	r3, ip
   17114:	and	r3, r3, lr
   17118:	mov	sl, #0
   1711c:	and	r0, r2, r0
   17120:	str	r3, [sp, #64]	; 0x40
   17124:	eor	r3, r1, #1
   17128:	str	lr, [sp, #52]	; 0x34
   1712c:	str	r0, [sp, #48]	; 0x30
   17130:	str	r3, [sp, #60]	; 0x3c
   17134:	ldr	r3, [sp, #24]
   17138:	cmn	r3, #1
   1713c:	beq	1766c <__assert_fail@plt+0x64c0>
   17140:	subs	r7, r3, sl
   17144:	movne	r7, #1
   17148:	cmp	r7, #0
   1714c:	beq	17684 <__assert_fail@plt+0x64d8>
   17150:	ldr	r3, [sp, #48]	; 0x30
   17154:	cmp	r3, #0
   17158:	beq	179f0 <__assert_fail@plt+0x6844>
   1715c:	ldr	r2, [sp, #68]	; 0x44
   17160:	ldr	r1, [sp, #24]
   17164:	cmp	r2, #1
   17168:	mov	r3, r2
   1716c:	movls	r3, #0
   17170:	movhi	r3, #1
   17174:	cmn	r1, #1
   17178:	movne	r3, #0
   1717c:	cmp	r3, #0
   17180:	add	r4, sl, r2
   17184:	beq	17194 <__assert_fail@plt+0x5fe8>
   17188:	ldr	r0, [sp, #44]	; 0x2c
   1718c:	bl	11044 <strlen@plt>
   17190:	str	r0, [sp, #24]
   17194:	ldr	r3, [sp, #24]
   17198:	cmp	r3, r4
   1719c:	ldr	r3, [sp, #44]	; 0x2c
   171a0:	add	r5, r3, sl
   171a4:	bcc	179f8 <__assert_fail@plt+0x684c>
   171a8:	mov	r0, r5
   171ac:	ldr	r2, [sp, #68]	; 0x44
   171b0:	ldr	r1, [sp, #72]	; 0x48
   171b4:	bl	10f3c <memcmp@plt>
   171b8:	cmp	r0, #0
   171bc:	bne	179f8 <__assert_fail@plt+0x684c>
   171c0:	ldr	r3, [sp, #40]	; 0x28
   171c4:	cmp	r3, #0
   171c8:	bne	183b4 <__assert_fail@plt+0x7208>
   171cc:	ldrb	r4, [r5]
   171d0:	cmp	r4, #126	; 0x7e
   171d4:	ldrls	pc, [pc, r4, lsl #2]
   171d8:	b	182f0 <__assert_fail@plt+0x7144>
   171dc:			; <UNDEFINED> instruction: 0x000178b0
   171e0:	strdeq	r8, [r1], -r0
   171e4:	strdeq	r8, [r1], -r0
   171e8:	strdeq	r8, [r1], -r0
   171ec:	strdeq	r8, [r1], -r0
   171f0:	strdeq	r8, [r1], -r0
   171f4:	strdeq	r8, [r1], -r0
   171f8:	muleq	r1, ip, r8
   171fc:	andeq	r7, r1, r8, lsl #17
   17200:	andeq	r7, r1, r4, ror #16
   17204:	andeq	r7, r1, r4, asr #16
   17208:	andeq	r7, r1, r4, ror r8
   1720c:	andeq	r7, r1, ip, lsr #15
   17210:	andeq	r7, r1, r0, ror #19
   17214:	strdeq	r8, [r1], -r0
   17218:	strdeq	r8, [r1], -r0
   1721c:	strdeq	r8, [r1], -r0
   17220:	strdeq	r8, [r1], -r0
   17224:	strdeq	r8, [r1], -r0
   17228:	strdeq	r8, [r1], -r0
   1722c:	strdeq	r8, [r1], -r0
   17230:	strdeq	r8, [r1], -r0
   17234:	strdeq	r8, [r1], -r0
   17238:	strdeq	r8, [r1], -r0
   1723c:	strdeq	r8, [r1], -r0
   17240:	strdeq	r8, [r1], -r0
   17244:	strdeq	r8, [r1], -r0
   17248:	strdeq	r8, [r1], -r0
   1724c:	strdeq	r8, [r1], -r0
   17250:	strdeq	r8, [r1], -r0
   17254:	strdeq	r8, [r1], -r0
   17258:	strdeq	r8, [r1], -r0
   1725c:	ldrdeq	r7, [r1], -r0
   17260:			; <UNDEFINED> instruction: 0x000179b0
   17264:			; <UNDEFINED> instruction: 0x000179b0
   17268:	muleq	r1, r0, r9
   1726c:			; <UNDEFINED> instruction: 0x000179b0
   17270:	muleq	r1, ip, r7
   17274:			; <UNDEFINED> instruction: 0x000179b0
   17278:	andeq	r7, r1, r8, ror r7
   1727c:			; <UNDEFINED> instruction: 0x000179b0
   17280:			; <UNDEFINED> instruction: 0x000179b0
   17284:			; <UNDEFINED> instruction: 0x000179b0
   17288:	muleq	r1, ip, r7
   1728c:	muleq	r1, ip, r7
   17290:	muleq	r1, ip, r7
   17294:	muleq	r1, ip, r7
   17298:	muleq	r1, ip, r7
   1729c:	muleq	r1, ip, r7
   172a0:	muleq	r1, ip, r7
   172a4:	muleq	r1, ip, r7
   172a8:	muleq	r1, ip, r7
   172ac:	muleq	r1, ip, r7
   172b0:	muleq	r1, ip, r7
   172b4:	muleq	r1, ip, r7
   172b8:	muleq	r1, ip, r7
   172bc:	muleq	r1, ip, r7
   172c0:	muleq	r1, ip, r7
   172c4:	muleq	r1, ip, r7
   172c8:			; <UNDEFINED> instruction: 0x000179b0
   172cc:			; <UNDEFINED> instruction: 0x000179b0
   172d0:			; <UNDEFINED> instruction: 0x000179b0
   172d4:			; <UNDEFINED> instruction: 0x000179b0
   172d8:	andeq	r7, r1, r8, lsr #14
   172dc:	strdeq	r8, [r1], -r0
   172e0:	muleq	r1, ip, r7
   172e4:	muleq	r1, ip, r7
   172e8:	muleq	r1, ip, r7
   172ec:	muleq	r1, ip, r7
   172f0:	muleq	r1, ip, r7
   172f4:	muleq	r1, ip, r7
   172f8:	muleq	r1, ip, r7
   172fc:	muleq	r1, ip, r7
   17300:	muleq	r1, ip, r7
   17304:	muleq	r1, ip, r7
   17308:	muleq	r1, ip, r7
   1730c:	muleq	r1, ip, r7
   17310:	muleq	r1, ip, r7
   17314:	muleq	r1, ip, r7
   17318:	muleq	r1, ip, r7
   1731c:	muleq	r1, ip, r7
   17320:	muleq	r1, ip, r7
   17324:	muleq	r1, ip, r7
   17328:	muleq	r1, ip, r7
   1732c:	muleq	r1, ip, r7
   17330:	muleq	r1, ip, r7
   17334:	muleq	r1, ip, r7
   17338:	muleq	r1, ip, r7
   1733c:	muleq	r1, ip, r7
   17340:	muleq	r1, ip, r7
   17344:	muleq	r1, ip, r7
   17348:			; <UNDEFINED> instruction: 0x000179b0
   1734c:	strdeq	r7, [r1], -r4
   17350:	muleq	r1, ip, r7
   17354:			; <UNDEFINED> instruction: 0x000179b0
   17358:	muleq	r1, ip, r7
   1735c:			; <UNDEFINED> instruction: 0x000179b0
   17360:	muleq	r1, ip, r7
   17364:	muleq	r1, ip, r7
   17368:	muleq	r1, ip, r7
   1736c:	muleq	r1, ip, r7
   17370:	muleq	r1, ip, r7
   17374:	muleq	r1, ip, r7
   17378:	muleq	r1, ip, r7
   1737c:	muleq	r1, ip, r7
   17380:	muleq	r1, ip, r7
   17384:	muleq	r1, ip, r7
   17388:	muleq	r1, ip, r7
   1738c:	muleq	r1, ip, r7
   17390:	muleq	r1, ip, r7
   17394:	muleq	r1, ip, r7
   17398:	muleq	r1, ip, r7
   1739c:	muleq	r1, ip, r7
   173a0:	muleq	r1, ip, r7
   173a4:	muleq	r1, ip, r7
   173a8:	muleq	r1, ip, r7
   173ac:	muleq	r1, ip, r7
   173b0:	muleq	r1, ip, r7
   173b4:	muleq	r1, ip, r7
   173b8:	muleq	r1, ip, r7
   173bc:	muleq	r1, ip, r7
   173c0:	muleq	r1, ip, r7
   173c4:	muleq	r1, ip, r7
   173c8:	andeq	r7, r1, ip, lsr #11
   173cc:			; <UNDEFINED> instruction: 0x000179b0
   173d0:	andeq	r7, r1, ip, lsr #11
   173d4:	muleq	r1, r0, r9
   173d8:	mov	r3, #1
   173dc:	str	r3, [sp, #40]	; 0x28
   173e0:	str	r3, [sp, #68]	; 0x44
   173e4:	mov	r8, #0
   173e8:	ldr	r3, [pc, #4056]	; 183c8 <__assert_fail@plt+0x721c>
   173ec:	str	r3, [sp, #72]	; 0x48
   173f0:	mov	r3, #2
   173f4:	str	r3, [sp, #176]	; 0xb0
   173f8:	ldr	r1, [sp, #56]	; 0x38
   173fc:	mov	r2, r3
   17400:	ldr	ip, [sp, #40]	; 0x28
   17404:	mov	lr, r3
   17408:	b	170d4 <__assert_fail@plt+0x5f28>
   1740c:	mov	r3, #1
   17410:	str	r3, [sp, #56]	; 0x38
   17414:	str	r3, [sp, #68]	; 0x44
   17418:	str	r3, [sp, #40]	; 0x28
   1741c:	ldr	r3, [pc, #4004]	; 183c8 <__assert_fail@plt+0x721c>
   17420:	mov	r8, #0
   17424:	str	r3, [sp, #72]	; 0x48
   17428:	b	173f0 <__assert_fail@plt+0x6244>
   1742c:	mov	r3, #1
   17430:	str	r3, [sp, #56]	; 0x38
   17434:	str	r3, [sp, #68]	; 0x44
   17438:	str	r3, [sp, #40]	; 0x28
   1743c:	ldr	r3, [pc, #3976]	; 183cc <__assert_fail@plt+0x7220>
   17440:	mov	r8, #0
   17444:	str	r3, [sp, #72]	; 0x48
   17448:	mov	r3, #5
   1744c:	b	173f4 <__assert_fail@plt+0x6248>
   17450:	mov	r3, #0
   17454:	str	r3, [sp, #40]	; 0x28
   17458:	mov	r3, #1
   1745c:	str	r3, [sp, #56]	; 0x38
   17460:	mov	r8, #0
   17464:	mov	r1, r3
   17468:	ldr	r2, [sp, #176]	; 0xb0
   1746c:	ldr	ip, [sp, #40]	; 0x28
   17470:	ldr	lr, [sp, #176]	; 0xb0
   17474:	b	170d4 <__assert_fail@plt+0x5f28>
   17478:	ldr	r3, [sp, #176]	; 0xb0
   1747c:	cmp	r3, #10
   17480:	beq	174c4 <__assert_fail@plt+0x6318>
   17484:	mov	r2, #5
   17488:	ldr	r1, [pc, #3904]	; 183d0 <__assert_fail@plt+0x7224>
   1748c:	mov	r0, #0
   17490:	bl	10f54 <dcgettext@plt>
   17494:	ldr	r2, [pc, #3892]	; 183d0 <__assert_fail@plt+0x7224>
   17498:	cmp	r0, r2
   1749c:	str	r0, [sp, #188]	; 0xbc
   174a0:	beq	1855c <__assert_fail@plt+0x73b0>
   174a4:	mov	r2, #5
   174a8:	ldr	r1, [pc, #3864]	; 183c8 <__assert_fail@plt+0x721c>
   174ac:	mov	r0, #0
   174b0:	bl	10f54 <dcgettext@plt>
   174b4:	ldr	r2, [pc, #3852]	; 183c8 <__assert_fail@plt+0x721c>
   174b8:	cmp	r0, r2
   174bc:	str	r0, [sp, #192]	; 0xc0
   174c0:	beq	1854c <__assert_fail@plt+0x73a0>
   174c4:	ldr	r8, [sp, #40]	; 0x28
   174c8:	cmp	r8, #0
   174cc:	movne	r8, #0
   174d0:	bne	17500 <__assert_fail@plt+0x6354>
   174d4:	ldr	r3, [sp, #188]	; 0xbc
   174d8:	ldrb	r3, [r3]
   174dc:	cmp	r3, #0
   174e0:	beq	17500 <__assert_fail@plt+0x6354>
   174e4:	ldr	r2, [sp, #188]	; 0xbc
   174e8:	cmp	fp, r8
   174ec:	strbhi	r3, [r9, r8]
   174f0:	ldrb	r3, [r2, #1]!
   174f4:	add	r8, r8, #1
   174f8:	cmp	r3, #0
   174fc:	bne	174e8 <__assert_fail@plt+0x633c>
   17500:	ldr	r0, [sp, #192]	; 0xc0
   17504:	bl	11044 <strlen@plt>
   17508:	ldr	r3, [sp, #192]	; 0xc0
   1750c:	ldr	r2, [sp, #176]	; 0xb0
   17510:	str	r3, [sp, #72]	; 0x48
   17514:	mov	r3, #1
   17518:	str	r3, [sp, #56]	; 0x38
   1751c:	mov	r1, r3
   17520:	ldr	ip, [sp, #40]	; 0x28
   17524:	ldr	lr, [sp, #176]	; 0xb0
   17528:	str	r0, [sp, #68]	; 0x44
   1752c:	b	170d4 <__assert_fail@plt+0x5f28>
   17530:	ldr	r3, [sp, #40]	; 0x28
   17534:	cmp	r3, #0
   17538:	beq	181e0 <__assert_fail@plt+0x7034>
   1753c:	mov	r3, #1
   17540:	str	r3, [sp, #68]	; 0x44
   17544:	ldr	r3, [pc, #3708]	; 183c8 <__assert_fail@plt+0x721c>
   17548:	str	r3, [sp, #72]	; 0x48
   1754c:	mov	r8, #0
   17550:	ldr	r1, [sp, #56]	; 0x38
   17554:	ldr	r2, [sp, #176]	; 0xb0
   17558:	ldr	ip, [sp, #40]	; 0x28
   1755c:	ldr	lr, [sp, #176]	; 0xb0
   17560:	b	170d4 <__assert_fail@plt+0x5f28>
   17564:	ldr	r3, [sp, #40]	; 0x28
   17568:	cmp	r3, #0
   1756c:	beq	18264 <__assert_fail@plt+0x70b8>
   17570:	str	r3, [sp, #56]	; 0x38
   17574:	mov	r3, #1
   17578:	str	r3, [sp, #68]	; 0x44
   1757c:	ldr	r3, [pc, #3656]	; 183cc <__assert_fail@plt+0x7220>
   17580:	b	17548 <__assert_fail@plt+0x639c>
   17584:	ldr	r3, [sp, #40]	; 0x28
   17588:	cmp	r3, #0
   1758c:	mov	r3, #1
   17590:	streq	r3, [sp, #56]	; 0x38
   17594:	beq	181e0 <__assert_fail@plt+0x7034>
   17598:	str	r3, [sp, #68]	; 0x44
   1759c:	ldr	r3, [pc, #3620]	; 183c8 <__assert_fail@plt+0x721c>
   175a0:	mov	r8, #0
   175a4:	str	r3, [sp, #72]	; 0x48
   175a8:	b	173f0 <__assert_fail@plt+0x6244>
   175ac:	ldr	r3, [sp, #24]
   175b0:	ldr	r6, [sp, #48]	; 0x30
   175b4:	cmn	r3, #1
   175b8:	beq	17c14 <__assert_fail@plt+0x6a68>
   175bc:	subs	r3, r3, #1
   175c0:	movne	r3, #1
   175c4:	cmp	r3, #0
   175c8:	beq	17994 <__assert_fail@plt+0x67e8>
   175cc:	ldr	r1, [sp, #52]	; 0x34
   175d0:	mov	r7, r3
   175d4:	mov	r3, #0
   175d8:	str	r3, [sp, #32]
   175dc:	ldr	r3, [sp, #60]	; 0x3c
   175e0:	orr	r2, r1, r3
   175e4:	ldr	r3, [sp, #40]	; 0x28
   175e8:	eor	r2, r2, #1
   175ec:	orr	r2, r3, r2
   175f0:	tst	r2, #255	; 0xff
   175f4:	bne	17f18 <__assert_fail@plt+0x6d6c>
   175f8:	cmp	r6, #0
   175fc:	bne	177d8 <__assert_fail@plt+0x662c>
   17600:	ldr	r3, [sp, #36]	; 0x24
   17604:	add	sl, sl, #1
   17608:	and	r3, r3, r7
   1760c:	uxtb	r6, r3
   17610:	cmp	r6, #0
   17614:	beq	17640 <__assert_fail@plt+0x6494>
   17618:	cmp	fp, r8
   1761c:	movhi	r3, #39	; 0x27
   17620:	strbhi	r3, [r9, r8]
   17624:	add	r3, r8, #1
   17628:	cmp	fp, r3
   1762c:	movhi	r2, #39	; 0x27
   17630:	add	r8, r8, #2
   17634:	strbhi	r2, [r9, r3]
   17638:	mov	r3, #0
   1763c:	str	r3, [sp, #36]	; 0x24
   17640:	ldr	r2, [sp, #32]
   17644:	cmp	r8, fp
   17648:	ldr	r3, [sp, #28]
   1764c:	strbcc	r4, [r9, r8]
   17650:	cmp	r2, #0
   17654:	moveq	r3, #0
   17658:	str	r3, [sp, #28]
   1765c:	ldr	r3, [sp, #24]
   17660:	add	r8, r8, #1
   17664:	cmn	r3, #1
   17668:	bne	17140 <__assert_fail@plt+0x5f94>
   1766c:	ldr	r3, [sp, #44]	; 0x2c
   17670:	ldrb	r3, [r3, sl]
   17674:	adds	r7, r3, #0
   17678:	movne	r7, #1
   1767c:	cmp	r7, #0
   17680:	bne	17150 <__assert_fail@plt+0x5fa4>
   17684:	ldr	r3, [sp, #64]	; 0x40
   17688:	cmp	r8, #0
   1768c:	movne	r3, #0
   17690:	andeq	r3, r3, #1
   17694:	cmp	r3, #0
   17698:	str	r3, [sp, #64]	; 0x40
   1769c:	bne	18140 <__assert_fail@plt+0x6f94>
   176a0:	ldr	r3, [sp, #40]	; 0x28
   176a4:	ldr	r2, [sp, #52]	; 0x34
   176a8:	eor	r3, r3, #1
   176ac:	ands	r2, r2, r3
   176b0:	beq	1856c <__assert_fail@plt+0x73c0>
   176b4:	ldr	r3, [sp, #76]	; 0x4c
   176b8:	cmp	r3, #0
   176bc:	beq	1853c <__assert_fail@plt+0x7390>
   176c0:	ldr	r3, [sp, #28]
   176c4:	cmp	r3, #0
   176c8:	bne	184f8 <__assert_fail@plt+0x734c>
   176cc:	ldr	r2, [sp, #84]	; 0x54
   176d0:	clz	r3, fp
   176d4:	cmp	r2, #0
   176d8:	lsr	r3, r3, #5
   176dc:	moveq	r3, #0
   176e0:	cmp	r3, #0
   176e4:	beq	18498 <__assert_fail@plt+0x72ec>
   176e8:	mov	fp, r2
   176ec:	str	r3, [sp, #76]	; 0x4c
   176f0:	b	1707c <__assert_fail@plt+0x5ed0>
   176f4:	ldr	r3, [sp, #176]	; 0xb0
   176f8:	ldr	r6, [sp, #48]	; 0x30
   176fc:	cmp	r3, #2
   17700:	beq	17c38 <__assert_fail@plt+0x6a8c>
   17704:	ldr	r3, [sp, #88]	; 0x58
   17708:	cmp	r3, #0
   1770c:	beq	181bc <__assert_fail@plt+0x7010>
   17710:	mov	r3, #0
   17714:	add	sl, sl, #1
   17718:	ldr	r6, [sp, #36]	; 0x24
   1771c:	str	r3, [sp, #32]
   17720:	mov	r4, #92	; 0x5c
   17724:	b	17610 <__assert_fail@plt+0x6464>
   17728:	ldr	r3, [sp, #176]	; 0xb0
   1772c:	ldr	r6, [sp, #48]	; 0x30
   17730:	cmp	r3, #2
   17734:	beq	17c68 <__assert_fail@plt+0x6abc>
   17738:	cmp	r3, #5
   1773c:	bne	181cc <__assert_fail@plt+0x7020>
   17740:	ldr	r3, [sp, #100]	; 0x64
   17744:	cmp	r3, #0
   17748:	beq	18230 <__assert_fail@plt+0x7084>
   1774c:	ldr	r2, [sp, #24]
   17750:	add	r3, sl, #2
   17754:	cmp	r2, r3
   17758:	bls	17768 <__assert_fail@plt+0x65bc>
   1775c:	ldrb	r4, [r5, #1]
   17760:	cmp	r4, #63	; 0x3f
   17764:	beq	183d8 <__assert_fail@plt+0x722c>
   17768:	mov	r1, #0
   1776c:	str	r1, [sp, #32]
   17770:	mov	r4, #63	; 0x3f
   17774:	b	175dc <__assert_fail@plt+0x6430>
   17778:	ldr	r3, [sp, #176]	; 0xb0
   1777c:	ldr	r6, [sp, #48]	; 0x30
   17780:	cmp	r3, #2
   17784:	beq	17c94 <__assert_fail@plt+0x6ae8>
   17788:	str	r7, [sp, #32]
   1778c:	str	r7, [sp, #76]	; 0x4c
   17790:	mov	r1, #0
   17794:	mov	r4, #39	; 0x27
   17798:	b	175dc <__assert_fail@plt+0x6430>
   1779c:	ldr	r6, [sp, #48]	; 0x30
   177a0:	ldr	r1, [sp, #52]	; 0x34
   177a4:	str	r7, [sp, #32]
   177a8:	b	175dc <__assert_fail@plt+0x6430>
   177ac:	ldr	r6, [sp, #48]	; 0x30
   177b0:	ldr	r1, [sp, #52]	; 0x34
   177b4:	mov	r4, #12
   177b8:	mov	r3, #102	; 0x66
   177bc:	ldr	r2, [sp, #56]	; 0x38
   177c0:	cmp	r2, #0
   177c4:	streq	r2, [sp, #32]
   177c8:	beq	175dc <__assert_fail@plt+0x6430>
   177cc:	mov	r4, r3
   177d0:	mov	r3, #0
   177d4:	str	r3, [sp, #32]
   177d8:	ldr	r3, [sp, #40]	; 0x28
   177dc:	cmp	r3, #0
   177e0:	bne	17f50 <__assert_fail@plt+0x6da4>
   177e4:	ldr	r3, [sp, #36]	; 0x24
   177e8:	eor	r3, r3, #1
   177ec:	and	r3, r3, r1
   177f0:	ands	r3, r3, #255	; 0xff
   177f4:	beq	1782c <__assert_fail@plt+0x6680>
   177f8:	cmp	fp, r8
   177fc:	movhi	r2, #39	; 0x27
   17800:	strbhi	r2, [r9, r8]
   17804:	add	r2, r8, #1
   17808:	cmp	fp, r2
   1780c:	movhi	r1, #36	; 0x24
   17810:	strbhi	r1, [r9, r2]
   17814:	add	r2, r8, #2
   17818:	cmp	fp, r2
   1781c:	add	r8, r8, #3
   17820:	movhi	r1, #39	; 0x27
   17824:	strbhi	r1, [r9, r2]
   17828:	str	r3, [sp, #36]	; 0x24
   1782c:	cmp	fp, r8
   17830:	movhi	r3, #92	; 0x5c
   17834:	strbhi	r3, [r9, r8]
   17838:	add	sl, sl, #1
   1783c:	add	r8, r8, #1
   17840:	b	17640 <__assert_fail@plt+0x6494>
   17844:	ldr	r6, [sp, #48]	; 0x30
   17848:	mov	r4, #10
   1784c:	mov	r3, #110	; 0x6e
   17850:	ldr	r2, [sp, #64]	; 0x40
   17854:	cmp	r2, #0
   17858:	bne	182d8 <__assert_fail@plt+0x712c>
   1785c:	ldr	r1, [sp, #52]	; 0x34
   17860:	b	177bc <__assert_fail@plt+0x6610>
   17864:	ldr	r6, [sp, #48]	; 0x30
   17868:	ldr	r1, [sp, #52]	; 0x34
   1786c:	mov	r3, #116	; 0x74
   17870:	b	177bc <__assert_fail@plt+0x6610>
   17874:	ldr	r6, [sp, #48]	; 0x30
   17878:	ldr	r1, [sp, #52]	; 0x34
   1787c:	mov	r4, #11
   17880:	mov	r3, #118	; 0x76
   17884:	b	177bc <__assert_fail@plt+0x6610>
   17888:	ldr	r6, [sp, #48]	; 0x30
   1788c:	ldr	r1, [sp, #52]	; 0x34
   17890:	mov	r4, #8
   17894:	mov	r3, #98	; 0x62
   17898:	b	177bc <__assert_fail@plt+0x6610>
   1789c:	ldr	r6, [sp, #48]	; 0x30
   178a0:	ldr	r1, [sp, #52]	; 0x34
   178a4:	mov	r4, #7
   178a8:	mov	r3, #97	; 0x61
   178ac:	b	177bc <__assert_fail@plt+0x6610>
   178b0:	ldr	r3, [sp, #56]	; 0x38
   178b4:	ldr	r6, [sp, #48]	; 0x30
   178b8:	cmp	r3, #0
   178bc:	beq	17d80 <__assert_fail@plt+0x6bd4>
   178c0:	ldr	r3, [sp, #40]	; 0x28
   178c4:	cmp	r3, #0
   178c8:	bne	183b4 <__assert_fail@plt+0x7208>
   178cc:	ldr	r3, [sp, #36]	; 0x24
   178d0:	ldr	r2, [sp, #52]	; 0x34
   178d4:	eor	r3, r3, #1
   178d8:	ands	r3, r2, r3
   178dc:	moveq	r2, r8
   178e0:	beq	17918 <__assert_fail@plt+0x676c>
   178e4:	cmp	fp, r8
   178e8:	movhi	r2, #39	; 0x27
   178ec:	strbhi	r2, [r9, r8]
   178f0:	add	r2, r8, #1
   178f4:	cmp	fp, r2
   178f8:	movhi	r1, #36	; 0x24
   178fc:	strbhi	r1, [r9, r2]
   17900:	add	r2, r8, #2
   17904:	cmp	fp, r2
   17908:	movhi	r1, #39	; 0x27
   1790c:	strbhi	r1, [r9, r2]
   17910:	add	r2, r8, #3
   17914:	str	r3, [sp, #36]	; 0x24
   17918:	cmp	fp, r2
   1791c:	movhi	r3, #92	; 0x5c
   17920:	strbhi	r3, [r9, r2]
   17924:	ldr	r3, [sp, #92]	; 0x5c
   17928:	add	r8, r2, #1
   1792c:	cmp	r3, #0
   17930:	beq	182b4 <__assert_fail@plt+0x7108>
   17934:	ldr	r1, [sp, #24]
   17938:	add	r3, sl, #1
   1793c:	cmp	r1, r3
   17940:	bls	17978 <__assert_fail@plt+0x67cc>
   17944:	ldr	r1, [sp, #44]	; 0x2c
   17948:	ldrb	r3, [r1, r3]
   1794c:	sub	r3, r3, #48	; 0x30
   17950:	cmp	r3, #9
   17954:	bhi	17978 <__assert_fail@plt+0x67cc>
   17958:	cmp	fp, r8
   1795c:	movhi	r3, #48	; 0x30
   17960:	strbhi	r3, [r9, r8]
   17964:	add	r3, r2, #2
   17968:	cmp	fp, r3
   1796c:	add	r8, r2, #3
   17970:	movhi	r1, #48	; 0x30
   17974:	strbhi	r1, [r9, r3]
   17978:	ldr	r3, [sp, #40]	; 0x28
   1797c:	ldr	r1, [sp, #52]	; 0x34
   17980:	mov	r7, r3
   17984:	str	r3, [sp, #32]
   17988:	mov	r4, #48	; 0x30
   1798c:	b	175dc <__assert_fail@plt+0x6430>
   17990:	ldr	r6, [sp, #48]	; 0x30
   17994:	cmp	sl, #0
   17998:	streq	r7, [sp, #32]
   1799c:	beq	179bc <__assert_fail@plt+0x6810>
   179a0:	mov	r3, #0
   179a4:	ldr	r1, [sp, #52]	; 0x34
   179a8:	str	r3, [sp, #32]
   179ac:	b	175dc <__assert_fail@plt+0x6430>
   179b0:	ldr	r6, [sp, #48]	; 0x30
   179b4:	mov	r3, #0
   179b8:	str	r3, [sp, #32]
   179bc:	ldr	r3, [sp, #64]	; 0x40
   179c0:	cmp	r3, #0
   179c4:	bne	18140 <__assert_fail@plt+0x6f94>
   179c8:	ldr	r1, [sp, #52]	; 0x34
   179cc:	b	175dc <__assert_fail@plt+0x6430>
   179d0:	ldr	r3, [sp, #48]	; 0x30
   179d4:	mov	r6, r3
   179d8:	str	r3, [sp, #32]
   179dc:	b	179bc <__assert_fail@plt+0x6810>
   179e0:	ldr	r6, [sp, #48]	; 0x30
   179e4:	mov	r4, #13
   179e8:	mov	r3, #114	; 0x72
   179ec:	b	17850 <__assert_fail@plt+0x66a4>
   179f0:	ldr	r3, [sp, #44]	; 0x2c
   179f4:	add	r5, r3, sl
   179f8:	ldrb	r4, [r5]
   179fc:	cmp	r4, #126	; 0x7e
   17a00:	ldrls	pc, [pc, r4, lsl #2]
   17a04:	b	17da0 <__assert_fail@plt+0x6bf4>
   17a08:	andeq	r7, r1, r0, ror sp
   17a0c:	andeq	r7, r1, r0, lsr #27
   17a10:	andeq	r7, r1, r0, lsr #27
   17a14:	andeq	r7, r1, r0, lsr #27
   17a18:	andeq	r7, r1, r0, lsr #27
   17a1c:	andeq	r7, r1, r0, lsr #27
   17a20:	andeq	r7, r1, r0, lsr #27
   17a24:	andeq	r7, r1, r8, ror #26
   17a28:	andeq	r7, r1, r0, ror #26
   17a2c:	andeq	r7, r1, r4, asr sp
   17a30:	andeq	r7, r1, ip, asr #26
   17a34:	andeq	r7, r1, r4, asr #26
   17a38:	andeq	r7, r1, ip, lsr sp
   17a3c:	andeq	r7, r1, r4, lsr sp
   17a40:	andeq	r7, r1, r0, lsr #27
   17a44:	andeq	r7, r1, r0, lsr #27
   17a48:	andeq	r7, r1, r0, lsr #27
   17a4c:	andeq	r7, r1, r0, lsr #27
   17a50:	andeq	r7, r1, r0, lsr #27
   17a54:	andeq	r7, r1, r0, lsr #27
   17a58:	andeq	r7, r1, r0, lsr #27
   17a5c:	andeq	r7, r1, r0, lsr #27
   17a60:	andeq	r7, r1, r0, lsr #27
   17a64:	andeq	r7, r1, r0, lsr #27
   17a68:	andeq	r7, r1, r0, lsr #27
   17a6c:	andeq	r7, r1, r0, lsr #27
   17a70:	andeq	r7, r1, r0, lsr #27
   17a74:	andeq	r7, r1, r0, lsr #27
   17a78:	andeq	r7, r1, r0, lsr #27
   17a7c:	andeq	r7, r1, r0, lsr #27
   17a80:	andeq	r7, r1, r0, lsr #27
   17a84:	andeq	r7, r1, r0, lsr #27
   17a88:	andeq	r7, r1, r8, lsr #26
   17a8c:	andeq	r7, r1, r0, lsr #26
   17a90:	andeq	r7, r1, r0, lsr #26
   17a94:	andeq	r7, r1, r8, lsl sp
   17a98:	andeq	r7, r1, r0, lsr #26
   17a9c:	andeq	r7, r1, r0, lsl sp
   17aa0:	andeq	r7, r1, r0, lsr #26
   17aa4:	andeq	r7, r1, r4, lsl #25
   17aa8:	andeq	r7, r1, r0, lsr #26
   17aac:	andeq	r7, r1, r0, lsr #26
   17ab0:	andeq	r7, r1, r0, lsr #26
   17ab4:	andeq	r7, r1, r0, lsl sp
   17ab8:	andeq	r7, r1, r0, lsl sp
   17abc:	andeq	r7, r1, r0, lsl sp
   17ac0:	andeq	r7, r1, r0, lsl sp
   17ac4:	andeq	r7, r1, r0, lsl sp
   17ac8:	andeq	r7, r1, r0, lsl sp
   17acc:	andeq	r7, r1, r0, lsl sp
   17ad0:	andeq	r7, r1, r0, lsl sp
   17ad4:	andeq	r7, r1, r0, lsl sp
   17ad8:	andeq	r7, r1, r0, lsl sp
   17adc:	andeq	r7, r1, r0, lsl sp
   17ae0:	andeq	r7, r1, r0, lsl sp
   17ae4:	andeq	r7, r1, r0, lsl sp
   17ae8:	andeq	r7, r1, r0, lsl sp
   17aec:	andeq	r7, r1, r0, lsl sp
   17af0:	andeq	r7, r1, r0, lsl sp
   17af4:	andeq	r7, r1, r0, lsr #26
   17af8:	andeq	r7, r1, r0, lsr #26
   17afc:	andeq	r7, r1, r0, lsr #26
   17b00:	andeq	r7, r1, r0, lsr #26
   17b04:	andeq	r7, r1, r8, asr ip
   17b08:	andeq	r7, r1, r0, lsr #27
   17b0c:	andeq	r7, r1, r0, lsl sp
   17b10:	andeq	r7, r1, r0, lsl sp
   17b14:	andeq	r7, r1, r0, lsl sp
   17b18:	andeq	r7, r1, r0, lsl sp
   17b1c:	andeq	r7, r1, r0, lsl sp
   17b20:	andeq	r7, r1, r0, lsl sp
   17b24:	andeq	r7, r1, r0, lsl sp
   17b28:	andeq	r7, r1, r0, lsl sp
   17b2c:	andeq	r7, r1, r0, lsl sp
   17b30:	andeq	r7, r1, r0, lsl sp
   17b34:	andeq	r7, r1, r0, lsl sp
   17b38:	andeq	r7, r1, r0, lsl sp
   17b3c:	andeq	r7, r1, r0, lsl sp
   17b40:	andeq	r7, r1, r0, lsl sp
   17b44:	andeq	r7, r1, r0, lsl sp
   17b48:	andeq	r7, r1, r0, lsl sp
   17b4c:	andeq	r7, r1, r0, lsl sp
   17b50:	andeq	r7, r1, r0, lsl sp
   17b54:	andeq	r7, r1, r0, lsl sp
   17b58:	andeq	r7, r1, r0, lsl sp
   17b5c:	andeq	r7, r1, r0, lsl sp
   17b60:	andeq	r7, r1, r0, lsl sp
   17b64:	andeq	r7, r1, r0, lsl sp
   17b68:	andeq	r7, r1, r0, lsl sp
   17b6c:	andeq	r7, r1, r0, lsl sp
   17b70:	andeq	r7, r1, r0, lsl sp
   17b74:	andeq	r7, r1, r0, lsr #26
   17b78:	andeq	r7, r1, r8, lsr #24
   17b7c:	andeq	r7, r1, r0, lsl sp
   17b80:	andeq	r7, r1, r0, lsr #26
   17b84:	andeq	r7, r1, r0, lsl sp
   17b88:	andeq	r7, r1, r0, lsr #26
   17b8c:	andeq	r7, r1, r0, lsl sp
   17b90:	andeq	r7, r1, r0, lsl sp
   17b94:	andeq	r7, r1, r0, lsl sp
   17b98:	andeq	r7, r1, r0, lsl sp
   17b9c:	andeq	r7, r1, r0, lsl sp
   17ba0:	andeq	r7, r1, r0, lsl sp
   17ba4:	andeq	r7, r1, r0, lsl sp
   17ba8:	andeq	r7, r1, r0, lsl sp
   17bac:	andeq	r7, r1, r0, lsl sp
   17bb0:	andeq	r7, r1, r0, lsl sp
   17bb4:	andeq	r7, r1, r0, lsl sp
   17bb8:	andeq	r7, r1, r0, lsl sp
   17bbc:	andeq	r7, r1, r0, lsl sp
   17bc0:	andeq	r7, r1, r0, lsl sp
   17bc4:	andeq	r7, r1, r0, lsl sp
   17bc8:	andeq	r7, r1, r0, lsl sp
   17bcc:	andeq	r7, r1, r0, lsl sp
   17bd0:	andeq	r7, r1, r0, lsl sp
   17bd4:	andeq	r7, r1, r0, lsl sp
   17bd8:	andeq	r7, r1, r0, lsl sp
   17bdc:	andeq	r7, r1, r0, lsl sp
   17be0:	andeq	r7, r1, r0, lsl sp
   17be4:	andeq	r7, r1, r0, lsl sp
   17be8:	andeq	r7, r1, r0, lsl sp
   17bec:	andeq	r7, r1, r0, lsl sp
   17bf0:	andeq	r7, r1, r0, lsl sp
   17bf4:	andeq	r7, r1, r4, lsl #24
   17bf8:	andeq	r7, r1, r0, lsr #26
   17bfc:	andeq	r7, r1, r4, lsl #24
   17c00:	andeq	r7, r1, r8, lsl sp
   17c04:	ldr	r3, [sp, #24]
   17c08:	mov	r6, #0
   17c0c:	cmn	r3, #1
   17c10:	bne	175bc <__assert_fail@plt+0x6410>
   17c14:	ldr	r3, [sp, #44]	; 0x2c
   17c18:	ldrb	r3, [r3, #1]
   17c1c:	adds	r3, r3, #0
   17c20:	movne	r3, #1
   17c24:	b	175c4 <__assert_fail@plt+0x6418>
   17c28:	ldr	r3, [sp, #176]	; 0xb0
   17c2c:	mov	r6, #0
   17c30:	cmp	r3, #2
   17c34:	bne	17704 <__assert_fail@plt+0x6558>
   17c38:	ldr	r3, [sp, #64]	; 0x40
   17c3c:	cmp	r3, #0
   17c40:	bne	18478 <__assert_fail@plt+0x72cc>
   17c44:	add	sl, sl, #1
   17c48:	ldr	r6, [sp, #36]	; 0x24
   17c4c:	str	r3, [sp, #32]
   17c50:	mov	r4, #92	; 0x5c
   17c54:	b	17610 <__assert_fail@plt+0x6464>
   17c58:	ldr	r3, [sp, #176]	; 0xb0
   17c5c:	mov	r6, #0
   17c60:	cmp	r3, #2
   17c64:	bne	17738 <__assert_fail@plt+0x658c>
   17c68:	ldr	r3, [sp, #40]	; 0x28
   17c6c:	cmp	r3, #0
   17c70:	bne	17f54 <__assert_fail@plt+0x6da8>
   17c74:	mov	r1, r7
   17c78:	str	r3, [sp, #32]
   17c7c:	mov	r4, #63	; 0x3f
   17c80:	b	175dc <__assert_fail@plt+0x6430>
   17c84:	ldr	r3, [sp, #176]	; 0xb0
   17c88:	mov	r6, #0
   17c8c:	cmp	r3, #2
   17c90:	bne	17788 <__assert_fail@plt+0x65dc>
   17c94:	ldr	r3, [sp, #64]	; 0x40
   17c98:	cmp	r3, #0
   17c9c:	bne	18478 <__assert_fail@plt+0x72cc>
   17ca0:	ldr	r2, [sp, #84]	; 0x54
   17ca4:	adds	r3, fp, #0
   17ca8:	movne	r3, #1
   17cac:	cmp	r2, #0
   17cb0:	movne	r3, #0
   17cb4:	cmp	r3, #0
   17cb8:	strne	fp, [sp, #84]	; 0x54
   17cbc:	movne	fp, #0
   17cc0:	bne	17cf0 <__assert_fail@plt+0x6b44>
   17cc4:	cmp	fp, r8
   17cc8:	movhi	r3, #39	; 0x27
   17ccc:	strbhi	r3, [r9, r8]
   17cd0:	add	r3, r8, #1
   17cd4:	cmp	fp, r3
   17cd8:	movhi	r2, #92	; 0x5c
   17cdc:	strbhi	r2, [r9, r3]
   17ce0:	add	r3, r8, #2
   17ce4:	cmp	fp, r3
   17ce8:	movhi	r2, #39	; 0x27
   17cec:	strbhi	r2, [r9, r3]
   17cf0:	ldr	r3, [sp, #64]	; 0x40
   17cf4:	add	r8, r8, #3
   17cf8:	mov	r1, r7
   17cfc:	str	r7, [sp, #32]
   17d00:	str	r7, [sp, #76]	; 0x4c
   17d04:	str	r3, [sp, #36]	; 0x24
   17d08:	mov	r4, #39	; 0x27
   17d0c:	b	175dc <__assert_fail@plt+0x6430>
   17d10:	mov	r6, #0
   17d14:	b	177a0 <__assert_fail@plt+0x65f4>
   17d18:	mov	r6, #0
   17d1c:	b	17994 <__assert_fail@plt+0x67e8>
   17d20:	mov	r6, #0
   17d24:	b	179b4 <__assert_fail@plt+0x6808>
   17d28:	str	r7, [sp, #32]
   17d2c:	mov	r6, #0
   17d30:	b	179bc <__assert_fail@plt+0x6810>
   17d34:	mov	r6, #0
   17d38:	b	179e4 <__assert_fail@plt+0x6838>
   17d3c:	mov	r6, #0
   17d40:	b	177b0 <__assert_fail@plt+0x6604>
   17d44:	mov	r6, #0
   17d48:	b	17878 <__assert_fail@plt+0x66cc>
   17d4c:	mov	r6, #0
   17d50:	b	17848 <__assert_fail@plt+0x669c>
   17d54:	mov	r6, #0
   17d58:	mov	r3, #116	; 0x74
   17d5c:	b	17850 <__assert_fail@plt+0x66a4>
   17d60:	mov	r6, #0
   17d64:	b	1788c <__assert_fail@plt+0x66e0>
   17d68:	mov	r6, #0
   17d6c:	b	178a0 <__assert_fail@plt+0x66f4>
   17d70:	ldr	r3, [sp, #56]	; 0x38
   17d74:	mov	r6, #0
   17d78:	cmp	r3, #0
   17d7c:	bne	178c0 <__assert_fail@plt+0x6714>
   17d80:	ldr	r3, [sp, #96]	; 0x60
   17d84:	cmp	r3, #0
   17d88:	addne	sl, sl, #1
   17d8c:	bne	17134 <__assert_fail@plt+0x5f88>
   17d90:	ldr	r1, [sp, #52]	; 0x34
   17d94:	str	r3, [sp, #32]
   17d98:	mov	r4, r3
   17d9c:	b	175dc <__assert_fail@plt+0x6430>
   17da0:	mov	r6, #0
   17da4:	ldr	r3, [sp, #80]	; 0x50
   17da8:	cmp	r3, #1
   17dac:	bne	17f9c <__assert_fail@plt+0x6df0>
   17db0:	bl	1102c <__ctype_b_loc@plt>
   17db4:	ldr	r2, [sp, #80]	; 0x50
   17db8:	sxth	r3, r4
   17dbc:	mov	r1, r2
   17dc0:	lsl	r3, r3, #1
   17dc4:	ldr	r2, [r0]
   17dc8:	ldrh	r3, [r2, r3]
   17dcc:	and	r3, r3, #16384	; 0x4000
   17dd0:	cmp	r3, #0
   17dd4:	movne	r3, #1
   17dd8:	moveq	r3, #0
   17ddc:	str	r3, [sp, #32]
   17de0:	moveq	r3, #1
   17de4:	movne	r3, #0
   17de8:	ldr	r2, [sp, #56]	; 0x38
   17dec:	and	r3, r3, r2
   17df0:	ands	r3, r3, #255	; 0xff
   17df4:	beq	179c8 <__assert_fail@plt+0x681c>
   17df8:	add	r1, sl, r1
   17dfc:	mov	r0, #0
   17e00:	ldr	r7, [sp, #40]	; 0x28
   17e04:	ldr	r2, [sp, #36]	; 0x24
   17e08:	ldr	lr, [sp, #52]	; 0x34
   17e0c:	b	17ebc <__assert_fail@plt+0x6d10>
   17e10:	cmp	r7, #0
   17e14:	bne	18210 <__assert_fail@plt+0x7064>
   17e18:	eor	r0, r2, #1
   17e1c:	ands	r0, lr, r0
   17e20:	beq	17e58 <__assert_fail@plt+0x6cac>
   17e24:	cmp	fp, r8
   17e28:	movhi	r2, #39	; 0x27
   17e2c:	strbhi	r2, [r9, r8]
   17e30:	add	r2, r8, #1
   17e34:	cmp	fp, r2
   17e38:	movhi	ip, #36	; 0x24
   17e3c:	strbhi	ip, [r9, r2]
   17e40:	add	r2, r8, #2
   17e44:	cmp	fp, r2
   17e48:	movhi	ip, #39	; 0x27
   17e4c:	strbhi	ip, [r9, r2]
   17e50:	add	r8, r8, #3
   17e54:	mov	r2, r0
   17e58:	cmp	fp, r8
   17e5c:	movhi	r0, #92	; 0x5c
   17e60:	strbhi	r0, [r9, r8]
   17e64:	add	r0, r8, #1
   17e68:	cmp	fp, r0
   17e6c:	lsrhi	ip, r4, #6
   17e70:	addhi	ip, ip, #48	; 0x30
   17e74:	strbhi	ip, [r9, r0]
   17e78:	add	ip, r8, #2
   17e7c:	cmp	fp, ip
   17e80:	lsrhi	r0, r4, #3
   17e84:	andhi	r0, r0, #7
   17e88:	addhi	r0, r0, #48	; 0x30
   17e8c:	add	sl, sl, #1
   17e90:	strbhi	r0, [r9, ip]
   17e94:	and	r4, r4, #7
   17e98:	cmp	sl, r1
   17e9c:	add	r4, r4, #48	; 0x30
   17ea0:	add	r8, r8, #3
   17ea4:	bcs	18228 <__assert_fail@plt+0x707c>
   17ea8:	mov	r0, r3
   17eac:	cmp	fp, r8
   17eb0:	strbhi	r4, [r9, r8]
   17eb4:	ldrb	r4, [r5, #1]!
   17eb8:	add	r8, r8, #1
   17ebc:	cmp	r3, #0
   17ec0:	bne	17e10 <__assert_fail@plt+0x6c64>
   17ec4:	cmp	r6, #0
   17ec8:	bne	17f6c <__assert_fail@plt+0x6dc0>
   17ecc:	eor	r6, r0, #1
   17ed0:	and	r6, r6, r2
   17ed4:	add	sl, sl, #1
   17ed8:	cmp	r1, sl
   17edc:	uxtb	r6, r6
   17ee0:	bls	17f94 <__assert_fail@plt+0x6de8>
   17ee4:	cmp	r6, #0
   17ee8:	beq	17eac <__assert_fail@plt+0x6d00>
   17eec:	cmp	fp, r8
   17ef0:	movhi	r2, #39	; 0x27
   17ef4:	strbhi	r2, [r9, r8]
   17ef8:	add	r2, r8, #1
   17efc:	cmp	fp, r2
   17f00:	movhi	ip, #39	; 0x27
   17f04:	strbhi	ip, [r9, r2]
   17f08:	add	r8, r8, #2
   17f0c:	mov	r6, r3
   17f10:	mov	r2, r3
   17f14:	b	17eac <__assert_fail@plt+0x6d00>
   17f18:	ldr	r3, [sp, #184]	; 0xb8
   17f1c:	cmp	r3, #0
   17f20:	beq	175f8 <__assert_fail@plt+0x644c>
   17f24:	lsr	r2, r4, #5
   17f28:	mov	r0, r3
   17f2c:	uxtb	r2, r2
   17f30:	and	r3, r4, #31
   17f34:	ldr	r2, [r0, r2, lsl #2]
   17f38:	lsr	r3, r2, r3
   17f3c:	tst	r3, #1
   17f40:	beq	175f8 <__assert_fail@plt+0x644c>
   17f44:	ldr	r3, [sp, #40]	; 0x28
   17f48:	cmp	r3, #0
   17f4c:	beq	177e4 <__assert_fail@plt+0x6638>
   17f50:	mov	r3, r1
   17f54:	str	r3, [sp, #64]	; 0x40
   17f58:	mov	sl, r9
   17f5c:	ldr	r3, [sp, #56]	; 0x38
   17f60:	mov	r9, fp
   17f64:	ldr	r2, [sp, #64]	; 0x40
   17f68:	b	18158 <__assert_fail@plt+0x6fac>
   17f6c:	cmp	fp, r8
   17f70:	eor	r6, r0, #1
   17f74:	movhi	ip, #92	; 0x5c
   17f78:	and	r6, r6, r2
   17f7c:	add	sl, sl, #1
   17f80:	strbhi	ip, [r9, r8]
   17f84:	cmp	r1, sl
   17f88:	add	r8, r8, #1
   17f8c:	uxtb	r6, r6
   17f90:	bhi	17ee4 <__assert_fail@plt+0x6d38>
   17f94:	str	r2, [sp, #36]	; 0x24
   17f98:	b	17610 <__assert_fail@plt+0x6464>
   17f9c:	ldr	r3, [sp, #24]
   17fa0:	cmn	r3, #1
   17fa4:	mov	r3, #0
   17fa8:	str	r3, [sp, #128]	; 0x80
   17fac:	str	r3, [sp, #132]	; 0x84
   17fb0:	beq	182a4 <__assert_fail@plt+0x70f8>
   17fb4:	mov	r2, r7
   17fb8:	mov	r3, #0
   17fbc:	str	r7, [sp, #104]	; 0x68
   17fc0:	str	r5, [sp, #116]	; 0x74
   17fc4:	mov	r7, r3
   17fc8:	mov	r5, r2
   17fcc:	str	r4, [sp, #32]
   17fd0:	str	r6, [sp, #108]	; 0x6c
   17fd4:	str	r8, [sp, #112]	; 0x70
   17fd8:	ldr	r3, [sp, #44]	; 0x2c
   17fdc:	add	r6, sl, r7
   17fe0:	add	r4, r3, r6
   17fe4:	ldr	r3, [sp, #24]
   17fe8:	mov	r1, r4
   17fec:	sub	r2, r3, r6
   17ff0:	add	r0, sp, #124	; 0x7c
   17ff4:	add	r3, sp, #128	; 0x80
   17ff8:	bl	1c6c4 <__assert_fail@plt+0xb518>
   17ffc:	subs	r8, r0, #0
   18000:	beq	18388 <__assert_fail@plt+0x71dc>
   18004:	cmn	r8, #1
   18008:	beq	18360 <__assert_fail@plt+0x71b4>
   1800c:	cmn	r8, #2
   18010:	beq	182f8 <__assert_fail@plt+0x714c>
   18014:	ldr	r3, [sp, #64]	; 0x40
   18018:	cmp	r3, #0
   1801c:	beq	180dc <__assert_fail@plt+0x6f30>
   18020:	cmp	r8, #1
   18024:	beq	180dc <__assert_fail@plt+0x6f30>
   18028:	sub	r3, r8, #1
   1802c:	add	r6, r3, r6
   18030:	ldr	r3, [sp, #44]	; 0x2c
   18034:	add	r6, r3, r6
   18038:	ldrb	r3, [r4, #1]!
   1803c:	sub	r3, r3, #91	; 0x5b
   18040:	cmp	r3, #33	; 0x21
   18044:	ldrls	pc, [pc, r3, lsl #2]
   18048:	b	180d4 <__assert_fail@plt+0x6f28>
   1804c:	andeq	r8, r1, r0, asr #2
   18050:	andeq	r8, r1, r0, asr #2
   18054:	ldrdeq	r8, [r1], -r4
   18058:	andeq	r8, r1, r0, asr #2
   1805c:	ldrdeq	r8, [r1], -r4
   18060:	andeq	r8, r1, r0, asr #2
   18064:	ldrdeq	r8, [r1], -r4
   18068:	ldrdeq	r8, [r1], -r4
   1806c:	ldrdeq	r8, [r1], -r4
   18070:	ldrdeq	r8, [r1], -r4
   18074:	ldrdeq	r8, [r1], -r4
   18078:	ldrdeq	r8, [r1], -r4
   1807c:	ldrdeq	r8, [r1], -r4
   18080:	ldrdeq	r8, [r1], -r4
   18084:	ldrdeq	r8, [r1], -r4
   18088:	ldrdeq	r8, [r1], -r4
   1808c:	ldrdeq	r8, [r1], -r4
   18090:	ldrdeq	r8, [r1], -r4
   18094:	ldrdeq	r8, [r1], -r4
   18098:	ldrdeq	r8, [r1], -r4
   1809c:	ldrdeq	r8, [r1], -r4
   180a0:	ldrdeq	r8, [r1], -r4
   180a4:	ldrdeq	r8, [r1], -r4
   180a8:	ldrdeq	r8, [r1], -r4
   180ac:	ldrdeq	r8, [r1], -r4
   180b0:	ldrdeq	r8, [r1], -r4
   180b4:	ldrdeq	r8, [r1], -r4
   180b8:	ldrdeq	r8, [r1], -r4
   180bc:	ldrdeq	r8, [r1], -r4
   180c0:	ldrdeq	r8, [r1], -r4
   180c4:	ldrdeq	r8, [r1], -r4
   180c8:	ldrdeq	r8, [r1], -r4
   180cc:	ldrdeq	r8, [r1], -r4
   180d0:	andeq	r8, r1, r0, asr #2
   180d4:	cmp	r6, r4
   180d8:	bne	18038 <__assert_fail@plt+0x6e8c>
   180dc:	ldr	r0, [sp, #124]	; 0x7c
   180e0:	bl	10f84 <iswprint@plt>
   180e4:	add	r7, r7, r8
   180e8:	cmp	r0, #0
   180ec:	add	r0, sp, #128	; 0x80
   180f0:	moveq	r5, #0
   180f4:	bl	10f30 <mbsinit@plt>
   180f8:	cmp	r0, #0
   180fc:	beq	17fd8 <__assert_fail@plt+0x6e2c>
   18100:	ldr	r4, [sp, #32]
   18104:	str	r5, [sp, #32]
   18108:	ldr	r3, [sp, #32]
   1810c:	mov	r1, r7
   18110:	eor	r3, r3, #1
   18114:	ldr	r7, [sp, #104]	; 0x68
   18118:	ldr	r6, [sp, #108]	; 0x6c
   1811c:	ldr	r8, [sp, #112]	; 0x70
   18120:	ldr	r5, [sp, #116]	; 0x74
   18124:	uxtb	r3, r3
   18128:	cmp	r1, #1
   1812c:	bls	17de8 <__assert_fail@plt+0x6c3c>
   18130:	ldr	r2, [sp, #56]	; 0x38
   18134:	and	r3, r3, r2
   18138:	uxtb	r3, r3
   1813c:	b	17df8 <__assert_fail@plt+0x6c4c>
   18140:	mov	r3, #2
   18144:	str	r3, [sp, #176]	; 0xb0
   18148:	ldr	r2, [sp, #64]	; 0x40
   1814c:	ldr	r3, [sp, #56]	; 0x38
   18150:	mov	sl, r9
   18154:	mov	r9, fp
   18158:	and	r3, r3, r2
   1815c:	tst	r3, #255	; 0xff
   18160:	ldr	r3, [sp, #176]	; 0xb0
   18164:	movne	r3, #4
   18168:	str	r3, [sp, #176]	; 0xb0
   1816c:	ldr	r3, [sp, #180]	; 0xb4
   18170:	mov	ip, #0
   18174:	bic	r3, r3, #2
   18178:	str	r3, [sp, #4]
   1817c:	ldr	r3, [sp, #192]	; 0xc0
   18180:	ldr	r2, [sp, #44]	; 0x2c
   18184:	str	r3, [sp, #16]
   18188:	ldr	r3, [sp, #188]	; 0xbc
   1818c:	mov	r1, r9
   18190:	str	r3, [sp, #12]
   18194:	ldr	r3, [sp, #176]	; 0xb0
   18198:	mov	r0, sl
   1819c:	str	r3, [sp]
   181a0:	str	ip, [sp, #8]
   181a4:	ldr	r3, [sp, #24]
   181a8:	bl	17008 <__assert_fail@plt+0x5e5c>
   181ac:	mov	fp, r0
   181b0:	mov	r0, fp
   181b4:	add	sp, sp, #140	; 0x8c
   181b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181bc:	mov	r4, #92	; 0x5c
   181c0:	mov	r1, #0
   181c4:	mov	r3, r4
   181c8:	b	177bc <__assert_fail@plt+0x6610>
   181cc:	mov	r3, #0
   181d0:	ldr	r1, [sp, #52]	; 0x34
   181d4:	str	r3, [sp, #32]
   181d8:	mov	r4, #63	; 0x3f
   181dc:	b	175dc <__assert_fail@plt+0x6430>
   181e0:	cmp	fp, #0
   181e4:	beq	18240 <__assert_fail@plt+0x7094>
   181e8:	mov	r3, #39	; 0x27
   181ec:	strb	r3, [r9]
   181f0:	mov	r3, #0
   181f4:	str	r3, [sp, #40]	; 0x28
   181f8:	mov	r3, #1
   181fc:	str	r3, [sp, #68]	; 0x44
   18200:	ldr	r3, [pc, #448]	; 183c8 <__assert_fail@plt+0x721c>
   18204:	mov	r8, #1
   18208:	str	r3, [sp, #72]	; 0x48
   1820c:	b	173f0 <__assert_fail@plt+0x6244>
   18210:	ldr	r3, [sp, #40]	; 0x28
   18214:	mov	sl, r9
   18218:	str	r3, [sp, #56]	; 0x38
   1821c:	mov	r9, fp
   18220:	ldr	r2, [sp, #64]	; 0x40
   18224:	b	18158 <__assert_fail@plt+0x6fac>
   18228:	str	r2, [sp, #36]	; 0x24
   1822c:	b	17640 <__assert_fail@plt+0x6494>
   18230:	mov	r1, #0
   18234:	str	r3, [sp, #32]
   18238:	mov	r4, #63	; 0x3f
   1823c:	b	175dc <__assert_fail@plt+0x6430>
   18240:	ldr	r3, [pc, #384]	; 183c8 <__assert_fail@plt+0x721c>
   18244:	str	r3, [sp, #72]	; 0x48
   18248:	mov	r3, #0
   1824c:	str	r3, [sp, #40]	; 0x28
   18250:	mov	r3, #1
   18254:	str	r3, [sp, #68]	; 0x44
   18258:	mov	r8, r3
   1825c:	b	173f0 <__assert_fail@plt+0x6244>
   18260:	bl	1117c <abort@plt>
   18264:	cmp	fp, #0
   18268:	beq	182c8 <__assert_fail@plt+0x711c>
   1826c:	mov	r2, #1
   18270:	mov	r3, #34	; 0x22
   18274:	strb	r3, [r9]
   18278:	mov	r8, r2
   1827c:	mov	r3, r2
   18280:	str	r2, [sp, #68]	; 0x44
   18284:	str	r3, [sp, #56]	; 0x38
   18288:	ldr	r3, [pc, #316]	; 183cc <__assert_fail@plt+0x7220>
   1828c:	ldr	r1, [sp, #56]	; 0x38
   18290:	str	r3, [sp, #72]	; 0x48
   18294:	ldr	r2, [sp, #176]	; 0xb0
   18298:	ldr	ip, [sp, #40]	; 0x28
   1829c:	ldr	lr, [sp, #176]	; 0xb0
   182a0:	b	170d4 <__assert_fail@plt+0x5f28>
   182a4:	ldr	r0, [sp, #44]	; 0x2c
   182a8:	bl	11044 <strlen@plt>
   182ac:	str	r0, [sp, #24]
   182b0:	b	17fb4 <__assert_fail@plt+0x6e08>
   182b4:	mov	r7, #0
   182b8:	ldr	r1, [sp, #52]	; 0x34
   182bc:	str	r3, [sp, #32]
   182c0:	mov	r4, #48	; 0x30
   182c4:	b	175dc <__assert_fail@plt+0x6430>
   182c8:	mov	r3, #1
   182cc:	str	r3, [sp, #68]	; 0x44
   182d0:	mov	r8, r3
   182d4:	b	18284 <__assert_fail@plt+0x70d8>
   182d8:	mov	r3, #2
   182dc:	mov	sl, r9
   182e0:	str	r3, [sp, #176]	; 0xb0
   182e4:	mov	r9, fp
   182e8:	ldr	r3, [sp, #56]	; 0x38
   182ec:	b	18158 <__assert_fail@plt+0x6fac>
   182f0:	ldr	r6, [sp, #48]	; 0x30
   182f4:	b	17da4 <__assert_fail@plt+0x6bf8>
   182f8:	ldr	r0, [sp, #24]
   182fc:	mov	ip, r6
   18300:	cmp	r0, ip
   18304:	mov	r1, r7
   18308:	mov	r2, r4
   1830c:	ldr	r7, [sp, #104]	; 0x68
   18310:	ldr	r4, [sp, #32]
   18314:	ldr	r6, [sp, #108]	; 0x6c
   18318:	ldr	r8, [sp, #112]	; 0x70
   1831c:	ldr	r5, [sp, #116]	; 0x74
   18320:	bls	18350 <__assert_fail@plt+0x71a4>
   18324:	ldrb	r3, [r2]
   18328:	cmp	r3, #0
   1832c:	bne	18340 <__assert_fail@plt+0x7194>
   18330:	b	18460 <__assert_fail@plt+0x72b4>
   18334:	ldrb	r3, [r2, #1]!
   18338:	cmp	r3, #0
   1833c:	beq	18460 <__assert_fail@plt+0x72b4>
   18340:	add	r1, r1, #1
   18344:	add	r3, sl, r1
   18348:	cmp	r0, r3
   1834c:	bhi	18334 <__assert_fail@plt+0x7188>
   18350:	mov	r2, #0
   18354:	mov	r3, r7
   18358:	str	r2, [sp, #32]
   1835c:	b	18128 <__assert_fail@plt+0x6f7c>
   18360:	mov	r1, r7
   18364:	ldr	r7, [sp, #104]	; 0x68
   18368:	mov	r2, #0
   1836c:	ldr	r4, [sp, #32]
   18370:	ldr	r6, [sp, #108]	; 0x6c
   18374:	ldr	r8, [sp, #112]	; 0x70
   18378:	ldr	r5, [sp, #116]	; 0x74
   1837c:	mov	r3, r7
   18380:	str	r2, [sp, #32]
   18384:	b	18128 <__assert_fail@plt+0x6f7c>
   18388:	mov	r3, r5
   1838c:	eor	r3, r3, #1
   18390:	ldr	r4, [sp, #32]
   18394:	mov	r1, r7
   18398:	str	r5, [sp, #32]
   1839c:	ldr	r7, [sp, #104]	; 0x68
   183a0:	ldr	r6, [sp, #108]	; 0x6c
   183a4:	ldr	r8, [sp, #112]	; 0x70
   183a8:	ldr	r5, [sp, #116]	; 0x74
   183ac:	uxtb	r3, r3
   183b0:	b	18128 <__assert_fail@plt+0x6f7c>
   183b4:	mov	sl, r9
   183b8:	str	r3, [sp, #56]	; 0x38
   183bc:	mov	r9, fp
   183c0:	ldr	r2, [sp, #64]	; 0x40
   183c4:	b	18158 <__assert_fail@plt+0x6fac>
   183c8:	andeq	sp, r1, ip, asr #21
   183cc:	andeq	sp, r1, r8, asr #21
   183d0:	ldrdeq	sp, [r1], -r0
   183d4:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   183d8:	ldr	r2, [sp, #44]	; 0x2c
   183dc:	ldrb	r1, [r2, r3]
   183e0:	sub	r2, r1, #33	; 0x21
   183e4:	uxtb	r2, r2
   183e8:	cmp	r2, #29
   183ec:	bhi	1846c <__assert_fail@plt+0x72c0>
   183f0:	ldr	r0, [pc, #-36]	; 183d4 <__assert_fail@plt+0x7228>
   183f4:	mov	ip, #1
   183f8:	ands	r2, r0, ip, lsl r2
   183fc:	beq	1848c <__assert_fail@plt+0x72e0>
   18400:	ldr	r2, [sp, #40]	; 0x28
   18404:	cmp	r2, #0
   18408:	bne	18580 <__assert_fail@plt+0x73d4>
   1840c:	add	r2, r8, #1
   18410:	cmp	fp, r8
   18414:	strbhi	r4, [r9, r8]
   18418:	cmp	fp, r2
   1841c:	movhi	r0, #34	; 0x22
   18420:	strbhi	r0, [r9, r2]
   18424:	add	r2, r8, #2
   18428:	cmp	fp, r2
   1842c:	movhi	r0, #34	; 0x22
   18430:	strbhi	r0, [r9, r2]
   18434:	add	r2, r8, #3
   18438:	cmp	fp, r2
   1843c:	mov	sl, r3
   18440:	ldr	r3, [sp, #40]	; 0x28
   18444:	movhi	r0, #63	; 0x3f
   18448:	mov	r4, r1
   1844c:	strbhi	r0, [r9, r2]
   18450:	add	r8, r8, #4
   18454:	mov	r1, r3
   18458:	str	r3, [sp, #32]
   1845c:	b	175dc <__assert_fail@plt+0x6430>
   18460:	str	r3, [sp, #32]
   18464:	mov	r3, r7
   18468:	b	18128 <__assert_fail@plt+0x6f7c>
   1846c:	mov	r1, #0
   18470:	str	r1, [sp, #32]
   18474:	b	175dc <__assert_fail@plt+0x6430>
   18478:	mov	sl, r9
   1847c:	ldr	r3, [sp, #56]	; 0x38
   18480:	mov	r9, fp
   18484:	ldr	r2, [sp, #64]	; 0x40
   18488:	b	18158 <__assert_fail@plt+0x6fac>
   1848c:	str	r2, [sp, #32]
   18490:	mov	r1, #0
   18494:	b	175dc <__assert_fail@plt+0x6430>
   18498:	ldr	r2, [sp, #76]	; 0x4c
   1849c:	mov	sl, r9
   184a0:	mov	r9, fp
   184a4:	mov	fp, r8
   184a8:	ldr	r1, [sp, #72]	; 0x48
   184ac:	cmp	r1, #0
   184b0:	moveq	r3, #0
   184b4:	andne	r3, r2, #1
   184b8:	cmp	r3, #0
   184bc:	beq	184e8 <__assert_fail@plt+0x733c>
   184c0:	ldrb	r3, [r1]
   184c4:	cmp	r3, #0
   184c8:	beq	184e8 <__assert_fail@plt+0x733c>
   184cc:	mov	r2, r1
   184d0:	cmp	r9, fp
   184d4:	strbhi	r3, [sl, fp]
   184d8:	ldrb	r3, [r2, #1]!
   184dc:	add	fp, fp, #1
   184e0:	cmp	r3, #0
   184e4:	bne	184d0 <__assert_fail@plt+0x7324>
   184e8:	cmp	r9, fp
   184ec:	movhi	r3, #0
   184f0:	strbhi	r3, [sl, fp]
   184f4:	b	181b0 <__assert_fail@plt+0x7004>
   184f8:	ldr	r3, [sp, #192]	; 0xc0
   184fc:	mov	ip, #5
   18500:	str	r3, [sp, #16]
   18504:	ldr	r3, [sp, #188]	; 0xbc
   18508:	ldr	r2, [sp, #44]	; 0x2c
   1850c:	str	r3, [sp, #12]
   18510:	ldr	r3, [sp, #184]	; 0xb8
   18514:	ldr	r1, [sp, #84]	; 0x54
   18518:	str	r3, [sp, #8]
   1851c:	ldr	r3, [sp, #180]	; 0xb4
   18520:	mov	r0, r9
   18524:	str	r3, [sp, #4]
   18528:	str	ip, [sp]
   1852c:	ldr	r3, [sp, #24]
   18530:	bl	17008 <__assert_fail@plt+0x5e5c>
   18534:	mov	fp, r0
   18538:	b	181b0 <__assert_fail@plt+0x7004>
   1853c:	mov	sl, r9
   18540:	mov	r9, fp
   18544:	mov	fp, r8
   18548:	b	184a8 <__assert_fail@plt+0x72fc>
   1854c:	ldr	r1, [sp, #176]	; 0xb0
   18550:	bl	16ee8 <__assert_fail@plt+0x5d3c>
   18554:	str	r0, [sp, #192]	; 0xc0
   18558:	b	174c4 <__assert_fail@plt+0x6318>
   1855c:	ldr	r1, [sp, #176]	; 0xb0
   18560:	bl	16ee8 <__assert_fail@plt+0x5d3c>
   18564:	str	r0, [sp, #188]	; 0xbc
   18568:	b	174a4 <__assert_fail@plt+0x62f8>
   1856c:	mov	sl, r9
   18570:	mov	r2, r3
   18574:	mov	r9, fp
   18578:	mov	fp, r8
   1857c:	b	184a8 <__assert_fail@plt+0x72fc>
   18580:	mov	sl, r9
   18584:	mov	r9, fp
   18588:	b	1816c <__assert_fail@plt+0x6fc0>
   1858c:	push	{r4, r5, r6, lr}
   18590:	mov	r5, r0
   18594:	bl	11068 <__errno_location@plt>
   18598:	cmp	r5, #0
   1859c:	mov	r1, #48	; 0x30
   185a0:	mov	r4, r0
   185a4:	ldr	r0, [pc, #16]	; 185bc <__assert_fail@plt+0x7410>
   185a8:	ldr	r6, [r4]
   185ac:	movne	r0, r5
   185b0:	bl	1beb4 <__assert_fail@plt+0xad08>
   185b4:	str	r6, [r4]
   185b8:	pop	{r4, r5, r6, pc}
   185bc:			; <UNDEFINED> instruction: 0x0002e1b4
   185c0:	ldr	r3, [pc, #12]	; 185d4 <__assert_fail@plt+0x7428>
   185c4:	cmp	r0, #0
   185c8:	moveq	r0, r3
   185cc:	ldr	r0, [r0]
   185d0:	bx	lr
   185d4:			; <UNDEFINED> instruction: 0x0002e1b4
   185d8:	ldr	r3, [pc, #12]	; 185ec <__assert_fail@plt+0x7440>
   185dc:	cmp	r0, #0
   185e0:	moveq	r0, r3
   185e4:	str	r1, [r0]
   185e8:	bx	lr
   185ec:			; <UNDEFINED> instruction: 0x0002e1b4
   185f0:	ldr	r3, [pc, #52]	; 1862c <__assert_fail@plt+0x7480>
   185f4:	cmp	r0, #0
   185f8:	moveq	r0, r3
   185fc:	add	r3, r0, #8
   18600:	push	{lr}		; (str lr, [sp, #-4]!)
   18604:	lsr	lr, r1, #5
   18608:	and	r1, r1, #31
   1860c:	ldr	ip, [r3, lr, lsl #2]
   18610:	lsr	r0, ip, r1
   18614:	eor	r2, r2, r0
   18618:	and	r2, r2, #1
   1861c:	and	r0, r0, #1
   18620:	eor	r1, ip, r2, lsl r1
   18624:	str	r1, [r3, lr, lsl #2]
   18628:	pop	{pc}		; (ldr pc, [sp], #4)
   1862c:			; <UNDEFINED> instruction: 0x0002e1b4
   18630:	ldr	r3, [pc, #16]	; 18648 <__assert_fail@plt+0x749c>
   18634:	cmp	r0, #0
   18638:	movne	r3, r0
   1863c:	ldr	r0, [r3, #4]
   18640:	str	r1, [r3, #4]
   18644:	bx	lr
   18648:			; <UNDEFINED> instruction: 0x0002e1b4
   1864c:	ldr	r3, [pc, #44]	; 18680 <__assert_fail@plt+0x74d4>
   18650:	cmp	r0, #0
   18654:	moveq	r0, r3
   18658:	mov	ip, #10
   1865c:	cmp	r2, #0
   18660:	cmpne	r1, #0
   18664:	str	ip, [r0]
   18668:	beq	18678 <__assert_fail@plt+0x74cc>
   1866c:	str	r1, [r0, #40]	; 0x28
   18670:	str	r2, [r0, #44]	; 0x2c
   18674:	bx	lr
   18678:	push	{r4, lr}
   1867c:	bl	1117c <abort@plt>
   18680:			; <UNDEFINED> instruction: 0x0002e1b4
   18684:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18688:	sub	sp, sp, #24
   1868c:	ldr	ip, [pc, #108]	; 18700 <__assert_fail@plt+0x7554>
   18690:	ldr	r4, [sp, #56]	; 0x38
   18694:	mov	r9, r2
   18698:	cmp	r4, #0
   1869c:	moveq	r4, ip
   186a0:	mov	sl, r3
   186a4:	mov	r7, r0
   186a8:	mov	r8, r1
   186ac:	bl	11068 <__errno_location@plt>
   186b0:	ldr	r3, [r4, #44]	; 0x2c
   186b4:	mov	r1, r8
   186b8:	ldr	r6, [r0]
   186bc:	str	r3, [sp, #16]
   186c0:	ldr	r2, [r4, #40]	; 0x28
   186c4:	add	r3, r4, #8
   186c8:	str	r3, [sp, #8]
   186cc:	str	r2, [sp, #12]
   186d0:	ldr	r2, [r4, #4]
   186d4:	mov	r5, r0
   186d8:	str	r2, [sp, #4]
   186dc:	ldr	ip, [r4]
   186e0:	mov	r3, sl
   186e4:	mov	r2, r9
   186e8:	mov	r0, r7
   186ec:	str	ip, [sp]
   186f0:	bl	17008 <__assert_fail@plt+0x5e5c>
   186f4:	str	r6, [r5]
   186f8:	add	sp, sp, #24
   186fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18700:			; <UNDEFINED> instruction: 0x0002e1b4
   18704:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18708:	cmp	r2, #0
   1870c:	sub	sp, sp, #36	; 0x24
   18710:	ldr	r4, [pc, #164]	; 187bc <__assert_fail@plt+0x7610>
   18714:	mov	r8, r1
   18718:	movne	r4, r2
   1871c:	mov	r7, r0
   18720:	bl	11068 <__errno_location@plt>
   18724:	ldr	r3, [r4, #44]	; 0x2c
   18728:	ldr	r5, [r4, #4]
   1872c:	add	r9, r4, #8
   18730:	orr	r5, r5, #1
   18734:	mov	r1, #0
   18738:	mov	r2, r7
   1873c:	ldr	fp, [r0]
   18740:	str	r3, [sp, #16]
   18744:	ldr	r3, [r4, #40]	; 0x28
   18748:	stmib	sp, {r5, r9}
   1874c:	str	r3, [sp, #12]
   18750:	ldr	r3, [r4]
   18754:	mov	r6, r0
   18758:	str	r3, [sp]
   1875c:	mov	r0, r1
   18760:	mov	r3, r8
   18764:	bl	17008 <__assert_fail@plt+0x5e5c>
   18768:	add	r1, r0, #1
   1876c:	mov	r0, r1
   18770:	str	r1, [sp, #28]
   18774:	bl	1b970 <__assert_fail@plt+0xa7c4>
   18778:	ldr	r3, [r4, #44]	; 0x2c
   1877c:	ldr	r1, [sp, #28]
   18780:	str	r3, [sp, #16]
   18784:	ldr	r3, [r4, #40]	; 0x28
   18788:	str	r5, [sp, #4]
   1878c:	str	r3, [sp, #12]
   18790:	str	r9, [sp, #8]
   18794:	ldr	ip, [r4]
   18798:	mov	r3, r8
   1879c:	mov	r2, r7
   187a0:	str	ip, [sp]
   187a4:	mov	sl, r0
   187a8:	bl	17008 <__assert_fail@plt+0x5e5c>
   187ac:	mov	r0, sl
   187b0:	str	fp, [r6]
   187b4:	add	sp, sp, #36	; 0x24
   187b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   187bc:			; <UNDEFINED> instruction: 0x0002e1b4
   187c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187c4:	cmp	r3, #0
   187c8:	sub	sp, sp, #44	; 0x2c
   187cc:	ldr	r4, [pc, #192]	; 18894 <__assert_fail@plt+0x76e8>
   187d0:	mov	r6, r2
   187d4:	movne	r4, r3
   187d8:	mov	r9, r1
   187dc:	mov	r8, r0
   187e0:	bl	11068 <__errno_location@plt>
   187e4:	ldr	r3, [r4, #44]	; 0x2c
   187e8:	ldr	r5, [r4, #4]
   187ec:	add	sl, r4, #8
   187f0:	cmp	r6, #0
   187f4:	orreq	r5, r5, #1
   187f8:	mov	r1, #0
   187fc:	ldr	r2, [r0]
   18800:	str	r3, [sp, #16]
   18804:	ldr	r3, [r4, #40]	; 0x28
   18808:	stmib	sp, {r5, sl}
   1880c:	str	r3, [sp, #12]
   18810:	ldr	r3, [r4]
   18814:	mov	r7, r0
   18818:	str	r2, [sp, #28]
   1881c:	str	r3, [sp]
   18820:	mov	r2, r8
   18824:	mov	r3, r9
   18828:	mov	r0, r1
   1882c:	bl	17008 <__assert_fail@plt+0x5e5c>
   18830:	add	r1, r0, #1
   18834:	mov	fp, r0
   18838:	mov	r0, r1
   1883c:	str	r1, [sp, #36]	; 0x24
   18840:	bl	1b970 <__assert_fail@plt+0xa7c4>
   18844:	ldr	r3, [r4, #44]	; 0x2c
   18848:	mov	r2, r8
   1884c:	str	r3, [sp, #16]
   18850:	ldr	r3, [r4, #40]	; 0x28
   18854:	str	r5, [sp, #4]
   18858:	str	r3, [sp, #12]
   1885c:	str	sl, [sp, #8]
   18860:	ldr	ip, [r4]
   18864:	ldr	r1, [sp, #36]	; 0x24
   18868:	mov	r3, r9
   1886c:	str	ip, [sp]
   18870:	str	r0, [sp, #32]
   18874:	bl	17008 <__assert_fail@plt+0x5e5c>
   18878:	ldr	r2, [sp, #28]
   1887c:	cmp	r6, #0
   18880:	str	r2, [r7]
   18884:	ldr	r0, [sp, #32]
   18888:	strne	fp, [r6]
   1888c:	add	sp, sp, #44	; 0x2c
   18890:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18894:			; <UNDEFINED> instruction: 0x0002e1b4
   18898:	push	{r4, r5, r6, r7, r8, lr}
   1889c:	ldr	r6, [pc, #116]	; 18918 <__assert_fail@plt+0x776c>
   188a0:	ldr	r3, [r6, #4]
   188a4:	ldr	r7, [r6]
   188a8:	cmp	r3, #1
   188ac:	movgt	r5, r7
   188b0:	movgt	r4, #1
   188b4:	ble	188d4 <__assert_fail@plt+0x7728>
   188b8:	ldr	r0, [r5, #12]
   188bc:	bl	1c598 <__assert_fail@plt+0xb3ec>
   188c0:	ldr	r3, [r6, #4]
   188c4:	add	r4, r4, #1
   188c8:	cmp	r3, r4
   188cc:	add	r5, r5, #8
   188d0:	bgt	188b8 <__assert_fail@plt+0x770c>
   188d4:	ldr	r0, [r7, #4]
   188d8:	ldr	r4, [pc, #60]	; 1891c <__assert_fail@plt+0x7770>
   188dc:	cmp	r0, r4
   188e0:	beq	188f4 <__assert_fail@plt+0x7748>
   188e4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   188e8:	mov	r3, #256	; 0x100
   188ec:	str	r4, [r6, #12]
   188f0:	str	r3, [r6, #8]
   188f4:	ldr	r4, [pc, #36]	; 18920 <__assert_fail@plt+0x7774>
   188f8:	cmp	r7, r4
   188fc:	beq	1890c <__assert_fail@plt+0x7760>
   18900:	mov	r0, r7
   18904:	bl	1c598 <__assert_fail@plt+0xb3ec>
   18908:	str	r4, [r6]
   1890c:	mov	r3, #1
   18910:	str	r3, [r6, #4]
   18914:	pop	{r4, r5, r6, r7, r8, pc}
   18918:	andeq	lr, r2, r4, lsr #2
   1891c:	andeq	lr, r2, r4, ror #3
   18920:	andeq	lr, r2, ip, lsr #2
   18924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18928:	sub	sp, sp, #44	; 0x2c
   1892c:	mov	r5, r0
   18930:	mov	sl, r1
   18934:	bl	11068 <__errno_location@plt>
   18938:	ldr	r4, [pc, #400]	; 18ad0 <__assert_fail@plt+0x7924>
   1893c:	cmn	r5, #-2147483647	; 0x80000001
   18940:	ldr	r6, [r4]
   18944:	mov	r8, r0
   18948:	movne	r0, #0
   1894c:	moveq	r0, #1
   18950:	ldr	r3, [r8]
   18954:	orrs	r0, r0, r5, lsr #31
   18958:	str	r3, [sp, #24]
   1895c:	bne	18acc <__assert_fail@plt+0x7920>
   18960:	ldr	r2, [r4, #4]
   18964:	cmp	r5, r2
   18968:	blt	189c8 <__assert_fail@plt+0x781c>
   1896c:	add	r7, r4, #8
   18970:	cmp	r6, r7
   18974:	str	r2, [sp, #36]	; 0x24
   18978:	beq	18a9c <__assert_fail@plt+0x78f0>
   1897c:	mov	r3, #8
   18980:	sub	r2, r5, r2
   18984:	mov	r0, r6
   18988:	str	r3, [sp]
   1898c:	add	r2, r2, #1
   18990:	mvn	r3, #-2147483648	; 0x80000000
   18994:	add	r1, sp, #36	; 0x24
   18998:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1899c:	mov	r6, r0
   189a0:	str	r0, [r4]
   189a4:	ldr	r0, [r4, #4]
   189a8:	ldr	r2, [sp, #36]	; 0x24
   189ac:	mov	r1, #0
   189b0:	sub	r2, r2, r0
   189b4:	add	r0, r6, r0, lsl #3
   189b8:	lsl	r2, r2, #3
   189bc:	bl	1108c <memset@plt>
   189c0:	ldr	r3, [sp, #36]	; 0x24
   189c4:	str	r3, [r4, #4]
   189c8:	ldr	r4, [pc, #260]	; 18ad4 <__assert_fail@plt+0x7928>
   189cc:	add	fp, r6, r5, lsl #3
   189d0:	ldr	r9, [r6, r5, lsl #3]
   189d4:	ldr	r0, [r4, #4]
   189d8:	ldr	r3, [r4]
   189dc:	ldr	r7, [fp, #4]
   189e0:	ldr	r1, [r4, #44]	; 0x2c
   189e4:	ldr	r2, [r4, #40]	; 0x28
   189e8:	orr	r0, r0, #1
   189ec:	str	r3, [sp]
   189f0:	add	r3, r4, #8
   189f4:	str	r0, [sp, #28]
   189f8:	str	r0, [sp, #4]
   189fc:	str	r1, [sp, #16]
   18a00:	str	r2, [sp, #12]
   18a04:	str	r3, [sp, #8]
   18a08:	mov	r0, r7
   18a0c:	mov	r1, r9
   18a10:	mvn	r3, #0
   18a14:	mov	r2, sl
   18a18:	bl	17008 <__assert_fail@plt+0x5e5c>
   18a1c:	cmp	r9, r0
   18a20:	bhi	18a88 <__assert_fail@plt+0x78dc>
   18a24:	add	r3, r4, #48	; 0x30
   18a28:	add	r9, r0, #1
   18a2c:	cmp	r7, r3
   18a30:	str	r9, [r6, r5, lsl #3]
   18a34:	beq	18a40 <__assert_fail@plt+0x7894>
   18a38:	mov	r0, r7
   18a3c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   18a40:	mov	r0, r9
   18a44:	bl	1b970 <__assert_fail@plt+0xa7c4>
   18a48:	ldr	ip, [r4, #44]	; 0x2c
   18a4c:	ldr	r3, [r4]
   18a50:	ldr	lr, [r4, #40]	; 0x28
   18a54:	ldr	r4, [pc, #124]	; 18ad8 <__assert_fail@plt+0x792c>
   18a58:	mov	r2, sl
   18a5c:	mov	r1, r9
   18a60:	str	r0, [fp, #4]
   18a64:	str	r4, [sp, #8]
   18a68:	ldr	r4, [sp, #28]
   18a6c:	str	r3, [sp]
   18a70:	str	r4, [sp, #4]
   18a74:	str	ip, [sp, #16]
   18a78:	str	lr, [sp, #12]
   18a7c:	mvn	r3, #0
   18a80:	mov	r7, r0
   18a84:	bl	17008 <__assert_fail@plt+0x5e5c>
   18a88:	ldr	r3, [sp, #24]
   18a8c:	mov	r0, r7
   18a90:	str	r3, [r8]
   18a94:	add	sp, sp, #44	; 0x2c
   18a98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a9c:	mov	r3, #8
   18aa0:	sub	r2, r5, r2
   18aa4:	str	r3, [sp]
   18aa8:	add	r1, sp, #36	; 0x24
   18aac:	add	r2, r2, #1
   18ab0:	mvn	r3, #-2147483648	; 0x80000000
   18ab4:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18ab8:	mov	r6, r0
   18abc:	ldm	r7, {r0, r1}
   18ac0:	str	r6, [r4]
   18ac4:	stm	r6, {r0, r1}
   18ac8:	b	189a4 <__assert_fail@plt+0x77f8>
   18acc:	bl	1117c <abort@plt>
   18ad0:	andeq	lr, r2, r4, lsr #2
   18ad4:			; <UNDEFINED> instruction: 0x0002e1b4
   18ad8:			; <UNDEFINED> instruction: 0x0002e1bc
   18adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ae0:	sub	sp, sp, #52	; 0x34
   18ae4:	mov	r5, r0
   18ae8:	mov	sl, r1
   18aec:	mov	fp, r2
   18af0:	bl	11068 <__errno_location@plt>
   18af4:	ldr	r4, [pc, #408]	; 18c94 <__assert_fail@plt+0x7ae8>
   18af8:	cmn	r5, #-2147483647	; 0x80000001
   18afc:	ldr	r6, [r4]
   18b00:	mov	r8, r0
   18b04:	movne	r0, #0
   18b08:	moveq	r0, #1
   18b0c:	ldr	r3, [r8]
   18b10:	orrs	r0, r0, r5, lsr #31
   18b14:	str	r3, [sp, #28]
   18b18:	bne	18c90 <__assert_fail@plt+0x7ae4>
   18b1c:	ldr	r2, [r4, #4]
   18b20:	cmp	r5, r2
   18b24:	blt	18b84 <__assert_fail@plt+0x79d8>
   18b28:	add	r7, r4, #8
   18b2c:	cmp	r6, r7
   18b30:	str	r2, [sp, #44]	; 0x2c
   18b34:	beq	18c60 <__assert_fail@plt+0x7ab4>
   18b38:	mov	r3, #8
   18b3c:	sub	r2, r5, r2
   18b40:	mov	r0, r6
   18b44:	str	r3, [sp]
   18b48:	add	r2, r2, #1
   18b4c:	mvn	r3, #-2147483648	; 0x80000000
   18b50:	add	r1, sp, #44	; 0x2c
   18b54:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18b58:	mov	r6, r0
   18b5c:	str	r0, [r4]
   18b60:	ldr	r0, [r4, #4]
   18b64:	ldr	r2, [sp, #44]	; 0x2c
   18b68:	mov	r1, #0
   18b6c:	sub	r2, r2, r0
   18b70:	add	r0, r6, r0, lsl #3
   18b74:	lsl	r2, r2, #3
   18b78:	bl	1108c <memset@plt>
   18b7c:	ldr	r3, [sp, #44]	; 0x2c
   18b80:	str	r3, [r4, #4]
   18b84:	ldr	r4, [pc, #268]	; 18c98 <__assert_fail@plt+0x7aec>
   18b88:	add	r3, r6, r5, lsl #3
   18b8c:	str	r3, [sp, #32]
   18b90:	ldr	r7, [r3, #4]
   18b94:	ldr	r0, [r4, #4]
   18b98:	ldr	r3, [r4]
   18b9c:	ldr	r9, [r6, r5, lsl #3]
   18ba0:	ldr	r1, [r4, #44]	; 0x2c
   18ba4:	ldr	r2, [r4, #40]	; 0x28
   18ba8:	orr	r0, r0, #1
   18bac:	str	r3, [sp]
   18bb0:	add	r3, r4, #8
   18bb4:	str	r0, [sp, #36]	; 0x24
   18bb8:	str	r0, [sp, #4]
   18bbc:	str	r1, [sp, #16]
   18bc0:	str	r2, [sp, #12]
   18bc4:	str	r3, [sp, #8]
   18bc8:	mov	r0, r7
   18bcc:	mov	r1, r9
   18bd0:	mov	r3, fp
   18bd4:	mov	r2, sl
   18bd8:	bl	17008 <__assert_fail@plt+0x5e5c>
   18bdc:	cmp	r9, r0
   18be0:	bhi	18c4c <__assert_fail@plt+0x7aa0>
   18be4:	add	r3, r4, #48	; 0x30
   18be8:	add	r9, r0, #1
   18bec:	cmp	r7, r3
   18bf0:	str	r9, [r6, r5, lsl #3]
   18bf4:	beq	18c00 <__assert_fail@plt+0x7a54>
   18bf8:	mov	r0, r7
   18bfc:	bl	1c598 <__assert_fail@plt+0xb3ec>
   18c00:	mov	r0, r9
   18c04:	bl	1b970 <__assert_fail@plt+0xa7c4>
   18c08:	ldr	ip, [sp, #32]
   18c0c:	ldr	lr, [r4, #44]	; 0x2c
   18c10:	ldr	r5, [r4, #40]	; 0x28
   18c14:	mov	r3, fp
   18c18:	mov	r2, sl
   18c1c:	mov	r1, r9
   18c20:	str	r0, [ip, #4]
   18c24:	ldr	ip, [r4]
   18c28:	ldr	r4, [pc, #108]	; 18c9c <__assert_fail@plt+0x7af0>
   18c2c:	str	lr, [sp, #16]
   18c30:	str	r4, [sp, #8]
   18c34:	ldr	r4, [sp, #36]	; 0x24
   18c38:	str	r5, [sp, #12]
   18c3c:	str	r4, [sp, #4]
   18c40:	str	ip, [sp]
   18c44:	mov	r7, r0
   18c48:	bl	17008 <__assert_fail@plt+0x5e5c>
   18c4c:	ldr	r3, [sp, #28]
   18c50:	mov	r0, r7
   18c54:	str	r3, [r8]
   18c58:	add	sp, sp, #52	; 0x34
   18c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c60:	mov	r3, #8
   18c64:	sub	r2, r5, r2
   18c68:	str	r3, [sp]
   18c6c:	add	r1, sp, #44	; 0x2c
   18c70:	add	r2, r2, #1
   18c74:	mvn	r3, #-2147483648	; 0x80000000
   18c78:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18c7c:	mov	r6, r0
   18c80:	ldm	r7, {r0, r1}
   18c84:	str	r6, [r4]
   18c88:	stm	r6, {r0, r1}
   18c8c:	b	18b60 <__assert_fail@plt+0x79b4>
   18c90:	bl	1117c <abort@plt>
   18c94:	andeq	lr, r2, r4, lsr #2
   18c98:			; <UNDEFINED> instruction: 0x0002e1b4
   18c9c:			; <UNDEFINED> instruction: 0x0002e1bc
   18ca0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18ca4:	sub	sp, sp, #44	; 0x2c
   18ca8:	mov	sl, r0
   18cac:	bl	11068 <__errno_location@plt>
   18cb0:	ldr	r4, [pc, #352]	; 18e18 <__assert_fail@plt+0x7c6c>
   18cb4:	ldr	r2, [r4, #4]
   18cb8:	ldr	r5, [r4]
   18cbc:	cmp	r2, #0
   18cc0:	ldr	r3, [r0]
   18cc4:	mov	r8, r0
   18cc8:	str	r3, [sp, #28]
   18ccc:	bgt	18d28 <__assert_fail@plt+0x7b7c>
   18cd0:	add	r6, r4, #8
   18cd4:	cmp	r5, r6
   18cd8:	str	r2, [sp, #36]	; 0x24
   18cdc:	beq	18de8 <__assert_fail@plt+0x7c3c>
   18ce0:	mov	r3, #8
   18ce4:	mov	r0, r5
   18ce8:	str	r3, [sp]
   18cec:	rsb	r2, r2, #1
   18cf0:	mvn	r3, #-2147483648	; 0x80000000
   18cf4:	add	r1, sp, #36	; 0x24
   18cf8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18cfc:	mov	r5, r0
   18d00:	str	r0, [r4]
   18d04:	ldr	r0, [r4, #4]
   18d08:	ldr	r2, [sp, #36]	; 0x24
   18d0c:	mov	r1, #0
   18d10:	sub	r2, r2, r0
   18d14:	add	r0, r5, r0, lsl #3
   18d18:	lsl	r2, r2, #3
   18d1c:	bl	1108c <memset@plt>
   18d20:	ldr	r3, [sp, #36]	; 0x24
   18d24:	str	r3, [r4, #4]
   18d28:	ldr	r4, [pc, #236]	; 18e1c <__assert_fail@plt+0x7c70>
   18d2c:	ldr	r9, [r5]
   18d30:	ldr	r6, [r5, #4]
   18d34:	ldr	r7, [r4, #4]
   18d38:	ldr	r1, [r4, #44]	; 0x2c
   18d3c:	ldr	r2, [r4, #40]	; 0x28
   18d40:	ldr	r3, [r4]
   18d44:	orr	r7, r7, #1
   18d48:	add	fp, r4, #8
   18d4c:	str	r1, [sp, #16]
   18d50:	str	r2, [sp, #12]
   18d54:	str	r3, [sp]
   18d58:	str	r7, [sp, #4]
   18d5c:	str	fp, [sp, #8]
   18d60:	mov	r1, r9
   18d64:	mov	r0, r6
   18d68:	mvn	r3, #0
   18d6c:	mov	r2, sl
   18d70:	bl	17008 <__assert_fail@plt+0x5e5c>
   18d74:	cmp	r9, r0
   18d78:	bhi	18dd4 <__assert_fail@plt+0x7c28>
   18d7c:	add	r3, r4, #48	; 0x30
   18d80:	add	r9, r0, #1
   18d84:	cmp	r6, r3
   18d88:	str	r9, [r5]
   18d8c:	beq	18d98 <__assert_fail@plt+0x7bec>
   18d90:	mov	r0, r6
   18d94:	bl	1c598 <__assert_fail@plt+0xb3ec>
   18d98:	mov	r0, r9
   18d9c:	bl	1b970 <__assert_fail@plt+0xa7c4>
   18da0:	ldr	ip, [r4, #44]	; 0x2c
   18da4:	ldr	r3, [r4]
   18da8:	ldr	lr, [r4, #40]	; 0x28
   18dac:	mov	r2, sl
   18db0:	mov	r1, r9
   18db4:	str	r0, [r5, #4]
   18db8:	str	r3, [sp]
   18dbc:	stmib	sp, {r7, fp}
   18dc0:	str	ip, [sp, #16]
   18dc4:	str	lr, [sp, #12]
   18dc8:	mvn	r3, #0
   18dcc:	mov	r6, r0
   18dd0:	bl	17008 <__assert_fail@plt+0x5e5c>
   18dd4:	ldr	r3, [sp, #28]
   18dd8:	mov	r0, r6
   18ddc:	str	r3, [r8]
   18de0:	add	sp, sp, #44	; 0x2c
   18de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de8:	mov	r3, #8
   18dec:	str	r3, [sp]
   18df0:	add	r1, sp, #36	; 0x24
   18df4:	rsb	r2, r2, #1
   18df8:	mvn	r3, #-2147483648	; 0x80000000
   18dfc:	mov	r0, #0
   18e00:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18e04:	mov	r5, r0
   18e08:	ldm	r6, {r0, r1}
   18e0c:	str	r5, [r4]
   18e10:	stm	r5, {r0, r1}
   18e14:	b	18d04 <__assert_fail@plt+0x7b58>
   18e18:	andeq	lr, r2, r4, lsr #2
   18e1c:			; <UNDEFINED> instruction: 0x0002e1b4
   18e20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18e24:	sub	sp, sp, #44	; 0x2c
   18e28:	mov	r9, r0
   18e2c:	mov	sl, r1
   18e30:	bl	11068 <__errno_location@plt>
   18e34:	ldr	r4, [pc, #364]	; 18fa8 <__assert_fail@plt+0x7dfc>
   18e38:	ldr	r2, [r4, #4]
   18e3c:	ldr	r5, [r4]
   18e40:	cmp	r2, #0
   18e44:	ldr	r3, [r0]
   18e48:	mov	r7, r0
   18e4c:	str	r3, [sp, #24]
   18e50:	bgt	18eac <__assert_fail@plt+0x7d00>
   18e54:	add	r6, r4, #8
   18e58:	cmp	r5, r6
   18e5c:	str	r2, [sp, #36]	; 0x24
   18e60:	beq	18f78 <__assert_fail@plt+0x7dcc>
   18e64:	mov	r3, #8
   18e68:	mov	r0, r5
   18e6c:	str	r3, [sp]
   18e70:	rsb	r2, r2, #1
   18e74:	mvn	r3, #-2147483648	; 0x80000000
   18e78:	add	r1, sp, #36	; 0x24
   18e7c:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18e80:	mov	r5, r0
   18e84:	str	r0, [r4]
   18e88:	ldr	r0, [r4, #4]
   18e8c:	ldr	r2, [sp, #36]	; 0x24
   18e90:	mov	r1, #0
   18e94:	sub	r2, r2, r0
   18e98:	add	r0, r5, r0, lsl #3
   18e9c:	lsl	r2, r2, #3
   18ea0:	bl	1108c <memset@plt>
   18ea4:	ldr	r3, [sp, #36]	; 0x24
   18ea8:	str	r3, [r4, #4]
   18eac:	ldr	r4, [pc, #248]	; 18fac <__assert_fail@plt+0x7e00>
   18eb0:	ldr	r8, [r5]
   18eb4:	ldr	r6, [r5, #4]
   18eb8:	ldr	r0, [r4, #4]
   18ebc:	ldr	r1, [r4, #44]	; 0x2c
   18ec0:	ldr	r2, [r4, #40]	; 0x28
   18ec4:	ldr	r3, [r4]
   18ec8:	orr	r0, r0, #1
   18ecc:	add	fp, r4, #8
   18ed0:	str	r0, [sp, #28]
   18ed4:	str	r0, [sp, #4]
   18ed8:	str	r1, [sp, #16]
   18edc:	str	r2, [sp, #12]
   18ee0:	str	r3, [sp]
   18ee4:	str	fp, [sp, #8]
   18ee8:	mov	r1, r8
   18eec:	mov	r0, r6
   18ef0:	mov	r3, sl
   18ef4:	mov	r2, r9
   18ef8:	bl	17008 <__assert_fail@plt+0x5e5c>
   18efc:	cmp	r8, r0
   18f00:	bhi	18f64 <__assert_fail@plt+0x7db8>
   18f04:	add	r3, r4, #48	; 0x30
   18f08:	add	r8, r0, #1
   18f0c:	cmp	r6, r3
   18f10:	str	r8, [r5]
   18f14:	beq	18f20 <__assert_fail@plt+0x7d74>
   18f18:	mov	r0, r6
   18f1c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   18f20:	mov	r0, r8
   18f24:	bl	1b970 <__assert_fail@plt+0xa7c4>
   18f28:	ldr	lr, [r4, #44]	; 0x2c
   18f2c:	ldr	ip, [r4]
   18f30:	mov	r3, sl
   18f34:	mov	r2, r9
   18f38:	mov	r1, r8
   18f3c:	str	r0, [r5, #4]
   18f40:	ldr	r5, [r4, #40]	; 0x28
   18f44:	ldr	r4, [sp, #28]
   18f48:	str	fp, [sp, #8]
   18f4c:	str	r4, [sp, #4]
   18f50:	str	lr, [sp, #16]
   18f54:	str	r5, [sp, #12]
   18f58:	str	ip, [sp]
   18f5c:	mov	r6, r0
   18f60:	bl	17008 <__assert_fail@plt+0x5e5c>
   18f64:	ldr	r3, [sp, #24]
   18f68:	mov	r0, r6
   18f6c:	str	r3, [r7]
   18f70:	add	sp, sp, #44	; 0x2c
   18f74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18f78:	mov	r3, #8
   18f7c:	str	r3, [sp]
   18f80:	add	r1, sp, #36	; 0x24
   18f84:	rsb	r2, r2, #1
   18f88:	mvn	r3, #-2147483648	; 0x80000000
   18f8c:	mov	r0, #0
   18f90:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   18f94:	mov	r5, r0
   18f98:	ldm	r6, {r0, r1}
   18f9c:	str	r5, [r4]
   18fa0:	stm	r5, {r0, r1}
   18fa4:	b	18e88 <__assert_fail@plt+0x7cdc>
   18fa8:	andeq	lr, r2, r4, lsr #2
   18fac:			; <UNDEFINED> instruction: 0x0002e1b4
   18fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18fb4:	sub	sp, sp, #132	; 0x84
   18fb8:	mov	r5, r1
   18fbc:	mov	r4, r0
   18fc0:	mov	r9, r2
   18fc4:	add	r0, sp, #80	; 0x50
   18fc8:	mov	r2, #48	; 0x30
   18fcc:	mov	r1, #0
   18fd0:	bl	1108c <memset@plt>
   18fd4:	cmp	r5, #10
   18fd8:	beq	19190 <__assert_fail@plt+0x7fe4>
   18fdc:	add	lr, sp, #80	; 0x50
   18fe0:	str	r5, [sp, #80]	; 0x50
   18fe4:	ldm	lr!, {r0, r1, r2, r3}
   18fe8:	add	ip, sp, #32
   18fec:	ldr	r6, [pc, #416]	; 19194 <__assert_fail@plt+0x7fe8>
   18ff0:	stmia	ip!, {r0, r1, r2, r3}
   18ff4:	ldm	lr!, {r0, r1, r2, r3}
   18ff8:	stmia	ip!, {r0, r1, r2, r3}
   18ffc:	ldm	lr, {r0, r1, r2, r3}
   19000:	stm	ip, {r0, r1, r2, r3}
   19004:	bl	11068 <__errno_location@plt>
   19008:	cmn	r4, #-2147483647	; 0x80000001
   1900c:	ldr	r5, [r6]
   19010:	mov	r7, r0
   19014:	movne	r0, #0
   19018:	moveq	r0, #1
   1901c:	ldr	r3, [r7]
   19020:	orrs	r0, r0, r4, lsr #31
   19024:	str	r3, [sp, #24]
   19028:	bne	19190 <__assert_fail@plt+0x7fe4>
   1902c:	ldr	r2, [r6, #4]
   19030:	cmp	r4, r2
   19034:	blt	19094 <__assert_fail@plt+0x7ee8>
   19038:	add	r8, r6, #8
   1903c:	cmp	r5, r8
   19040:	str	r2, [sp, #80]	; 0x50
   19044:	beq	19160 <__assert_fail@plt+0x7fb4>
   19048:	mov	r3, #8
   1904c:	sub	r2, r4, r2
   19050:	mov	r0, r5
   19054:	str	r3, [sp]
   19058:	add	r2, r2, #1
   1905c:	add	r1, sp, #80	; 0x50
   19060:	mvn	r3, #-2147483648	; 0x80000000
   19064:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19068:	mov	r5, r0
   1906c:	str	r0, [r6]
   19070:	ldr	r0, [r6, #4]
   19074:	ldr	r2, [sp, #80]	; 0x50
   19078:	mov	r1, #0
   1907c:	sub	r2, r2, r0
   19080:	add	r0, r5, r0, lsl #3
   19084:	lsl	r2, r2, #3
   19088:	bl	1108c <memset@plt>
   1908c:	ldr	r3, [sp, #80]	; 0x50
   19090:	str	r3, [r6, #4]
   19094:	add	fp, r5, r4, lsl #3
   19098:	ldr	r1, [sp, #36]	; 0x24
   1909c:	ldr	r8, [r5, r4, lsl #3]
   190a0:	ldr	r6, [fp, #4]
   190a4:	ldr	r2, [sp, #72]	; 0x48
   190a8:	ldr	r3, [sp, #32]
   190ac:	ldr	ip, [sp, #76]	; 0x4c
   190b0:	orr	r1, r1, #1
   190b4:	add	sl, sp, #40	; 0x28
   190b8:	str	r1, [sp, #28]
   190bc:	str	r1, [sp, #4]
   190c0:	str	r2, [sp, #12]
   190c4:	str	r3, [sp]
   190c8:	mov	r0, r6
   190cc:	mov	r1, r8
   190d0:	str	ip, [sp, #16]
   190d4:	str	sl, [sp, #8]
   190d8:	mvn	r3, #0
   190dc:	mov	r2, r9
   190e0:	bl	17008 <__assert_fail@plt+0x5e5c>
   190e4:	cmp	r8, r0
   190e8:	bhi	1914c <__assert_fail@plt+0x7fa0>
   190ec:	ldr	r3, [pc, #164]	; 19198 <__assert_fail@plt+0x7fec>
   190f0:	add	r8, r0, #1
   190f4:	cmp	r6, r3
   190f8:	str	r8, [r5, r4, lsl #3]
   190fc:	beq	19108 <__assert_fail@plt+0x7f5c>
   19100:	mov	r0, r6
   19104:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19108:	mov	r0, r8
   1910c:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19110:	ldr	lr, [sp, #76]	; 0x4c
   19114:	ldr	r3, [sp, #32]
   19118:	ldr	ip, [sp, #72]	; 0x48
   1911c:	ldr	r4, [sp, #28]
   19120:	mov	r2, r9
   19124:	mov	r1, r8
   19128:	str	r0, [fp, #4]
   1912c:	str	r3, [sp]
   19130:	str	sl, [sp, #8]
   19134:	str	r4, [sp, #4]
   19138:	str	lr, [sp, #16]
   1913c:	str	ip, [sp, #12]
   19140:	mvn	r3, #0
   19144:	mov	r6, r0
   19148:	bl	17008 <__assert_fail@plt+0x5e5c>
   1914c:	ldr	r3, [sp, #24]
   19150:	mov	r0, r6
   19154:	str	r3, [r7]
   19158:	add	sp, sp, #132	; 0x84
   1915c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19160:	mov	r3, #8
   19164:	sub	r2, r4, r2
   19168:	add	r1, sp, #80	; 0x50
   1916c:	str	r3, [sp]
   19170:	add	r2, r2, #1
   19174:	mvn	r3, #-2147483648	; 0x80000000
   19178:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1917c:	mov	r5, r0
   19180:	ldm	r8, {r0, r1}
   19184:	str	r5, [r6]
   19188:	stm	r5, {r0, r1}
   1918c:	b	19070 <__assert_fail@plt+0x7ec4>
   19190:	bl	1117c <abort@plt>
   19194:	andeq	lr, r2, r4, lsr #2
   19198:	andeq	lr, r2, r4, ror #3
   1919c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   191a0:	sub	sp, sp, #132	; 0x84
   191a4:	mov	r5, r1
   191a8:	mov	r4, r0
   191ac:	mov	r9, r2
   191b0:	add	r0, sp, #80	; 0x50
   191b4:	mov	r2, #48	; 0x30
   191b8:	mov	r1, #0
   191bc:	mov	sl, r3
   191c0:	bl	1108c <memset@plt>
   191c4:	cmp	r5, #10
   191c8:	beq	19384 <__assert_fail@plt+0x81d8>
   191cc:	add	lr, sp, #80	; 0x50
   191d0:	str	r5, [sp, #80]	; 0x50
   191d4:	ldm	lr!, {r0, r1, r2, r3}
   191d8:	add	ip, sp, #32
   191dc:	ldr	r6, [pc, #420]	; 19388 <__assert_fail@plt+0x81dc>
   191e0:	stmia	ip!, {r0, r1, r2, r3}
   191e4:	ldm	lr!, {r0, r1, r2, r3}
   191e8:	stmia	ip!, {r0, r1, r2, r3}
   191ec:	ldm	lr, {r0, r1, r2, r3}
   191f0:	stm	ip, {r0, r1, r2, r3}
   191f4:	bl	11068 <__errno_location@plt>
   191f8:	cmn	r4, #-2147483647	; 0x80000001
   191fc:	ldr	r5, [r6]
   19200:	mov	r7, r0
   19204:	movne	r0, #0
   19208:	moveq	r0, #1
   1920c:	ldr	r3, [r7]
   19210:	orrs	r0, r0, r4, lsr #31
   19214:	str	r3, [sp, #24]
   19218:	bne	19384 <__assert_fail@plt+0x81d8>
   1921c:	ldr	r2, [r6, #4]
   19220:	cmp	r4, r2
   19224:	blt	19284 <__assert_fail@plt+0x80d8>
   19228:	add	r8, r6, #8
   1922c:	cmp	r5, r8
   19230:	str	r2, [sp, #80]	; 0x50
   19234:	beq	19354 <__assert_fail@plt+0x81a8>
   19238:	mov	r3, #8
   1923c:	sub	r2, r4, r2
   19240:	mov	r0, r5
   19244:	str	r3, [sp]
   19248:	add	r2, r2, #1
   1924c:	add	r1, sp, #80	; 0x50
   19250:	mvn	r3, #-2147483648	; 0x80000000
   19254:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19258:	mov	r5, r0
   1925c:	str	r0, [r6]
   19260:	ldr	r0, [r6, #4]
   19264:	ldr	r2, [sp, #80]	; 0x50
   19268:	mov	r1, #0
   1926c:	sub	r2, r2, r0
   19270:	add	r0, r5, r0, lsl #3
   19274:	lsl	r2, r2, #3
   19278:	bl	1108c <memset@plt>
   1927c:	ldr	r3, [sp, #80]	; 0x50
   19280:	str	r3, [r6, #4]
   19284:	add	fp, r5, r4, lsl #3
   19288:	ldr	r3, [sp, #32]
   1928c:	ldr	r1, [sp, #36]	; 0x24
   19290:	ldr	r8, [r5, r4, lsl #3]
   19294:	ldr	r6, [fp, #4]
   19298:	ldr	r2, [sp, #72]	; 0x48
   1929c:	ldr	ip, [sp, #76]	; 0x4c
   192a0:	orr	r1, r1, #1
   192a4:	str	r3, [sp]
   192a8:	add	r3, sp, #40	; 0x28
   192ac:	str	r1, [sp, #28]
   192b0:	str	r1, [sp, #4]
   192b4:	str	r2, [sp, #12]
   192b8:	str	r3, [sp, #8]
   192bc:	mov	r0, r6
   192c0:	mov	r1, r8
   192c4:	str	ip, [sp, #16]
   192c8:	mov	r3, sl
   192cc:	mov	r2, r9
   192d0:	bl	17008 <__assert_fail@plt+0x5e5c>
   192d4:	cmp	r8, r0
   192d8:	bhi	19340 <__assert_fail@plt+0x8194>
   192dc:	ldr	r3, [pc, #168]	; 1938c <__assert_fail@plt+0x81e0>
   192e0:	add	r8, r0, #1
   192e4:	cmp	r6, r3
   192e8:	str	r8, [r5, r4, lsl #3]
   192ec:	beq	192f8 <__assert_fail@plt+0x814c>
   192f0:	mov	r0, r6
   192f4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   192f8:	mov	r0, r8
   192fc:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19300:	add	lr, sp, #40	; 0x28
   19304:	ldr	ip, [sp, #76]	; 0x4c
   19308:	ldr	r4, [sp, #72]	; 0x48
   1930c:	ldr	r5, [sp, #28]
   19310:	mov	r3, sl
   19314:	mov	r2, r9
   19318:	mov	r1, r8
   1931c:	str	r0, [fp, #4]
   19320:	str	lr, [sp, #8]
   19324:	ldr	lr, [sp, #32]
   19328:	str	r5, [sp, #4]
   1932c:	str	ip, [sp, #16]
   19330:	str	r4, [sp, #12]
   19334:	str	lr, [sp]
   19338:	mov	r6, r0
   1933c:	bl	17008 <__assert_fail@plt+0x5e5c>
   19340:	ldr	r3, [sp, #24]
   19344:	mov	r0, r6
   19348:	str	r3, [r7]
   1934c:	add	sp, sp, #132	; 0x84
   19350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19354:	mov	r3, #8
   19358:	sub	r2, r4, r2
   1935c:	add	r1, sp, #80	; 0x50
   19360:	str	r3, [sp]
   19364:	add	r2, r2, #1
   19368:	mvn	r3, #-2147483648	; 0x80000000
   1936c:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19370:	mov	r5, r0
   19374:	ldm	r8, {r0, r1}
   19378:	str	r5, [r6]
   1937c:	stm	r5, {r0, r1}
   19380:	b	19260 <__assert_fail@plt+0x80b4>
   19384:	bl	1117c <abort@plt>
   19388:	andeq	lr, r2, r4, lsr #2
   1938c:	andeq	lr, r2, r4, ror #3
   19390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19394:	sub	sp, sp, #124	; 0x7c
   19398:	mov	r4, r0
   1939c:	mov	r9, r1
   193a0:	add	r0, sp, #72	; 0x48
   193a4:	mov	r2, #48	; 0x30
   193a8:	mov	r1, #0
   193ac:	bl	1108c <memset@plt>
   193b0:	cmp	r4, #10
   193b4:	beq	19540 <__assert_fail@plt+0x8394>
   193b8:	add	lr, sp, #72	; 0x48
   193bc:	str	r4, [sp, #72]	; 0x48
   193c0:	ldm	lr!, {r0, r1, r2, r3}
   193c4:	add	ip, sp, #24
   193c8:	ldr	r5, [pc, #372]	; 19544 <__assert_fail@plt+0x8398>
   193cc:	stmia	ip!, {r0, r1, r2, r3}
   193d0:	ldm	lr!, {r0, r1, r2, r3}
   193d4:	stmia	ip!, {r0, r1, r2, r3}
   193d8:	ldm	lr, {r0, r1, r2, r3}
   193dc:	stm	ip, {r0, r1, r2, r3}
   193e0:	bl	11068 <__errno_location@plt>
   193e4:	ldr	r2, [r5, #4]
   193e8:	ldr	r4, [r5]
   193ec:	cmp	r2, #0
   193f0:	mov	r7, r0
   193f4:	ldr	fp, [r0]
   193f8:	bgt	19454 <__assert_fail@plt+0x82a8>
   193fc:	add	r6, r5, #8
   19400:	cmp	r4, r6
   19404:	str	r2, [sp, #72]	; 0x48
   19408:	beq	19510 <__assert_fail@plt+0x8364>
   1940c:	mov	r3, #8
   19410:	mov	r0, r4
   19414:	str	r3, [sp]
   19418:	rsb	r2, r2, #1
   1941c:	add	r1, sp, #72	; 0x48
   19420:	mvn	r3, #-2147483648	; 0x80000000
   19424:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19428:	mov	r4, r0
   1942c:	str	r0, [r5]
   19430:	ldr	r0, [r5, #4]
   19434:	ldr	r2, [sp, #72]	; 0x48
   19438:	mov	r1, #0
   1943c:	sub	r2, r2, r0
   19440:	add	r0, r4, r0, lsl #3
   19444:	lsl	r2, r2, #3
   19448:	bl	1108c <memset@plt>
   1944c:	ldr	r3, [sp, #72]	; 0x48
   19450:	str	r3, [r5, #4]
   19454:	ldr	r6, [sp, #28]
   19458:	ldr	r8, [r4]
   1945c:	ldr	r5, [r4, #4]
   19460:	ldr	r2, [sp, #64]	; 0x40
   19464:	ldr	r3, [sp, #24]
   19468:	ldr	ip, [sp, #68]	; 0x44
   1946c:	orr	r6, r6, #1
   19470:	add	sl, sp, #32
   19474:	str	r2, [sp, #12]
   19478:	str	r3, [sp]
   1947c:	str	r6, [sp, #4]
   19480:	mov	r1, r8
   19484:	mov	r0, r5
   19488:	str	ip, [sp, #16]
   1948c:	str	sl, [sp, #8]
   19490:	mvn	r3, #0
   19494:	mov	r2, r9
   19498:	bl	17008 <__assert_fail@plt+0x5e5c>
   1949c:	cmp	r8, r0
   194a0:	bhi	19500 <__assert_fail@plt+0x8354>
   194a4:	ldr	r3, [pc, #156]	; 19548 <__assert_fail@plt+0x839c>
   194a8:	add	r8, r0, #1
   194ac:	cmp	r5, r3
   194b0:	str	r8, [r4]
   194b4:	beq	194c0 <__assert_fail@plt+0x8314>
   194b8:	mov	r0, r5
   194bc:	bl	1c598 <__assert_fail@plt+0xb3ec>
   194c0:	mov	r0, r8
   194c4:	bl	1b970 <__assert_fail@plt+0xa7c4>
   194c8:	ldr	lr, [sp, #68]	; 0x44
   194cc:	ldr	r3, [sp, #24]
   194d0:	ldr	ip, [sp, #64]	; 0x40
   194d4:	mov	r2, r9
   194d8:	mov	r1, r8
   194dc:	str	r0, [r4, #4]
   194e0:	str	r3, [sp]
   194e4:	str	sl, [sp, #8]
   194e8:	str	r6, [sp, #4]
   194ec:	str	lr, [sp, #16]
   194f0:	str	ip, [sp, #12]
   194f4:	mvn	r3, #0
   194f8:	mov	r5, r0
   194fc:	bl	17008 <__assert_fail@plt+0x5e5c>
   19500:	mov	r0, r5
   19504:	str	fp, [r7]
   19508:	add	sp, sp, #124	; 0x7c
   1950c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19510:	mov	r3, #8
   19514:	add	r1, sp, #72	; 0x48
   19518:	str	r3, [sp]
   1951c:	rsb	r2, r2, #1
   19520:	mvn	r3, #-2147483648	; 0x80000000
   19524:	mov	r0, #0
   19528:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1952c:	mov	r4, r0
   19530:	ldm	r6, {r0, r1}
   19534:	str	r4, [r5]
   19538:	stm	r4, {r0, r1}
   1953c:	b	19430 <__assert_fail@plt+0x8284>
   19540:	bl	1117c <abort@plt>
   19544:	andeq	lr, r2, r4, lsr #2
   19548:	andeq	lr, r2, r4, ror #3
   1954c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19550:	sub	sp, sp, #132	; 0x84
   19554:	mov	r4, r0
   19558:	mov	r9, r1
   1955c:	mov	sl, r2
   19560:	add	r0, sp, #80	; 0x50
   19564:	mov	r2, #48	; 0x30
   19568:	mov	r1, #0
   1956c:	bl	1108c <memset@plt>
   19570:	cmp	r4, #10
   19574:	beq	19708 <__assert_fail@plt+0x855c>
   19578:	add	lr, sp, #80	; 0x50
   1957c:	str	r4, [sp, #80]	; 0x50
   19580:	ldm	lr!, {r0, r1, r2, r3}
   19584:	add	ip, sp, #32
   19588:	ldr	r5, [pc, #380]	; 1970c <__assert_fail@plt+0x8560>
   1958c:	stmia	ip!, {r0, r1, r2, r3}
   19590:	ldm	lr!, {r0, r1, r2, r3}
   19594:	stmia	ip!, {r0, r1, r2, r3}
   19598:	ldm	lr, {r0, r1, r2, r3}
   1959c:	stm	ip, {r0, r1, r2, r3}
   195a0:	bl	11068 <__errno_location@plt>
   195a4:	ldr	r2, [r5, #4]
   195a8:	ldr	r4, [r5]
   195ac:	cmp	r2, #0
   195b0:	ldr	r3, [r0]
   195b4:	mov	r7, r0
   195b8:	str	r3, [sp, #28]
   195bc:	bgt	19618 <__assert_fail@plt+0x846c>
   195c0:	add	r6, r5, #8
   195c4:	cmp	r4, r6
   195c8:	str	r2, [sp, #80]	; 0x50
   195cc:	beq	196d8 <__assert_fail@plt+0x852c>
   195d0:	mov	r3, #8
   195d4:	mov	r0, r4
   195d8:	str	r3, [sp]
   195dc:	rsb	r2, r2, #1
   195e0:	add	r1, sp, #80	; 0x50
   195e4:	mvn	r3, #-2147483648	; 0x80000000
   195e8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   195ec:	mov	r4, r0
   195f0:	str	r0, [r5]
   195f4:	ldr	r0, [r5, #4]
   195f8:	ldr	r2, [sp, #80]	; 0x50
   195fc:	mov	r1, #0
   19600:	sub	r2, r2, r0
   19604:	add	r0, r4, r0, lsl #3
   19608:	lsl	r2, r2, #3
   1960c:	bl	1108c <memset@plt>
   19610:	ldr	r3, [sp, #80]	; 0x50
   19614:	str	r3, [r5, #4]
   19618:	ldr	r6, [sp, #36]	; 0x24
   1961c:	ldr	r8, [r4]
   19620:	ldr	r5, [r4, #4]
   19624:	ldr	r2, [sp, #72]	; 0x48
   19628:	ldr	r3, [sp, #32]
   1962c:	ldr	ip, [sp, #76]	; 0x4c
   19630:	orr	r6, r6, #1
   19634:	add	fp, sp, #40	; 0x28
   19638:	str	r2, [sp, #12]
   1963c:	str	r3, [sp]
   19640:	str	r6, [sp, #4]
   19644:	mov	r1, r8
   19648:	mov	r0, r5
   1964c:	str	ip, [sp, #16]
   19650:	str	fp, [sp, #8]
   19654:	mov	r3, sl
   19658:	mov	r2, r9
   1965c:	bl	17008 <__assert_fail@plt+0x5e5c>
   19660:	cmp	r8, r0
   19664:	bhi	196c4 <__assert_fail@plt+0x8518>
   19668:	ldr	r3, [pc, #160]	; 19710 <__assert_fail@plt+0x8564>
   1966c:	add	r8, r0, #1
   19670:	cmp	r5, r3
   19674:	str	r8, [r4]
   19678:	beq	19684 <__assert_fail@plt+0x84d8>
   1967c:	mov	r0, r5
   19680:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19684:	mov	r0, r8
   19688:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1968c:	ldr	ip, [sp, #76]	; 0x4c
   19690:	ldr	lr, [sp, #32]
   19694:	mov	r3, sl
   19698:	mov	r2, r9
   1969c:	mov	r1, r8
   196a0:	str	r0, [r4, #4]
   196a4:	ldr	r4, [sp, #72]	; 0x48
   196a8:	str	fp, [sp, #8]
   196ac:	str	r6, [sp, #4]
   196b0:	str	ip, [sp, #16]
   196b4:	str	r4, [sp, #12]
   196b8:	str	lr, [sp]
   196bc:	mov	r5, r0
   196c0:	bl	17008 <__assert_fail@plt+0x5e5c>
   196c4:	ldr	r3, [sp, #28]
   196c8:	mov	r0, r5
   196cc:	str	r3, [r7]
   196d0:	add	sp, sp, #132	; 0x84
   196d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196d8:	mov	r3, #8
   196dc:	add	r1, sp, #80	; 0x50
   196e0:	str	r3, [sp]
   196e4:	rsb	r2, r2, #1
   196e8:	mvn	r3, #-2147483648	; 0x80000000
   196ec:	mov	r0, #0
   196f0:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   196f4:	mov	r4, r0
   196f8:	ldm	r6, {r0, r1}
   196fc:	str	r4, [r5]
   19700:	stm	r4, {r0, r1}
   19704:	b	195f4 <__assert_fail@plt+0x8448>
   19708:	bl	1117c <abort@plt>
   1970c:	andeq	lr, r2, r4, lsr #2
   19710:	andeq	lr, r2, r4, ror #3
   19714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19718:	mov	r4, r2
   1971c:	ldr	lr, [pc, #432]	; 198d4 <__assert_fail@plt+0x8728>
   19720:	mov	sl, r0
   19724:	mov	fp, r1
   19728:	ldm	lr!, {r0, r1, r2, r3}
   1972c:	sub	sp, sp, #92	; 0x5c
   19730:	add	ip, sp, #40	; 0x28
   19734:	lsr	r7, r4, #5
   19738:	stmia	ip!, {r0, r1, r2, r3}
   1973c:	add	r6, sp, #48	; 0x30
   19740:	ldm	lr!, {r0, r1, r2, r3}
   19744:	and	r4, r4, #31
   19748:	ldr	r5, [pc, #392]	; 198d8 <__assert_fail@plt+0x872c>
   1974c:	stmia	ip!, {r0, r1, r2, r3}
   19750:	ldm	lr, {r0, r1, r2, r3}
   19754:	stm	ip, {r0, r1, r2, r3}
   19758:	ldr	r2, [r6, r7, lsl #2]
   1975c:	lsr	r3, r2, r4
   19760:	eor	r3, r3, #1
   19764:	and	r3, r3, #1
   19768:	eor	r4, r2, r3, lsl r4
   1976c:	str	r4, [r6, r7, lsl #2]
   19770:	bl	11068 <__errno_location@plt>
   19774:	ldr	r2, [r5, #4]
   19778:	ldr	r4, [r5]
   1977c:	cmp	r2, #0
   19780:	ldr	r3, [r0]
   19784:	mov	r8, r0
   19788:	str	r3, [sp, #28]
   1978c:	bgt	197e8 <__assert_fail@plt+0x863c>
   19790:	add	r7, r5, #8
   19794:	cmp	r4, r7
   19798:	str	r2, [sp, #36]	; 0x24
   1979c:	beq	198a4 <__assert_fail@plt+0x86f8>
   197a0:	mov	r3, #8
   197a4:	mov	r0, r4
   197a8:	str	r3, [sp]
   197ac:	rsb	r2, r2, #1
   197b0:	mvn	r3, #-2147483648	; 0x80000000
   197b4:	add	r1, sp, #36	; 0x24
   197b8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   197bc:	mov	r4, r0
   197c0:	str	r0, [r5]
   197c4:	ldr	r0, [r5, #4]
   197c8:	ldr	r2, [sp, #36]	; 0x24
   197cc:	mov	r1, #0
   197d0:	sub	r2, r2, r0
   197d4:	add	r0, r4, r0, lsl #3
   197d8:	lsl	r2, r2, #3
   197dc:	bl	1108c <memset@plt>
   197e0:	ldr	r3, [sp, #36]	; 0x24
   197e4:	str	r3, [r5, #4]
   197e8:	ldr	r7, [sp, #44]	; 0x2c
   197ec:	ldr	r9, [r4]
   197f0:	ldr	r5, [r4, #4]
   197f4:	ldr	r2, [sp, #80]	; 0x50
   197f8:	ldr	r3, [sp, #40]	; 0x28
   197fc:	ldr	ip, [sp, #84]	; 0x54
   19800:	orr	r7, r7, #1
   19804:	str	r2, [sp, #12]
   19808:	str	r3, [sp]
   1980c:	str	r7, [sp, #4]
   19810:	str	r6, [sp, #8]
   19814:	mov	r1, r9
   19818:	mov	r0, r5
   1981c:	str	ip, [sp, #16]
   19820:	mov	r3, fp
   19824:	mov	r2, sl
   19828:	bl	17008 <__assert_fail@plt+0x5e5c>
   1982c:	cmp	r9, r0
   19830:	bhi	19890 <__assert_fail@plt+0x86e4>
   19834:	ldr	r3, [pc, #160]	; 198dc <__assert_fail@plt+0x8730>
   19838:	add	r9, r0, #1
   1983c:	cmp	r5, r3
   19840:	str	r9, [r4]
   19844:	beq	19850 <__assert_fail@plt+0x86a4>
   19848:	mov	r0, r5
   1984c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19850:	mov	r0, r9
   19854:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19858:	ldr	ip, [sp, #84]	; 0x54
   1985c:	ldr	lr, [sp, #40]	; 0x28
   19860:	mov	r3, fp
   19864:	mov	r2, sl
   19868:	mov	r1, r9
   1986c:	str	r0, [r4, #4]
   19870:	ldr	r4, [sp, #80]	; 0x50
   19874:	str	r6, [sp, #8]
   19878:	str	r7, [sp, #4]
   1987c:	str	ip, [sp, #16]
   19880:	str	r4, [sp, #12]
   19884:	str	lr, [sp]
   19888:	mov	r5, r0
   1988c:	bl	17008 <__assert_fail@plt+0x5e5c>
   19890:	ldr	r3, [sp, #28]
   19894:	mov	r0, r5
   19898:	str	r3, [r8]
   1989c:	add	sp, sp, #92	; 0x5c
   198a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   198a4:	mov	r3, #8
   198a8:	str	r3, [sp]
   198ac:	add	r1, sp, #36	; 0x24
   198b0:	rsb	r2, r2, #1
   198b4:	mvn	r3, #-2147483648	; 0x80000000
   198b8:	mov	r0, #0
   198bc:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   198c0:	mov	r4, r0
   198c4:	ldm	r7, {r0, r1}
   198c8:	str	r4, [r5]
   198cc:	stm	r4, {r0, r1}
   198d0:	b	197c4 <__assert_fail@plt+0x8618>
   198d4:			; <UNDEFINED> instruction: 0x0002e1b4
   198d8:	andeq	lr, r2, r4, lsr #2
   198dc:	andeq	lr, r2, r4, ror #3
   198e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198e4:	mov	r4, r1
   198e8:	ldr	lr, [pc, #420]	; 19a94 <__assert_fail@plt+0x88e8>
   198ec:	mov	r6, r0
   198f0:	sub	sp, sp, #84	; 0x54
   198f4:	ldm	lr!, {r0, r1, r2, r3}
   198f8:	add	ip, sp, #32
   198fc:	lsr	r8, r4, #5
   19900:	add	r5, sp, #40	; 0x28
   19904:	stmia	ip!, {r0, r1, r2, r3}
   19908:	and	r4, r4, #31
   1990c:	ldm	lr!, {r0, r1, r2, r3}
   19910:	ldr	r7, [pc, #384]	; 19a98 <__assert_fail@plt+0x88ec>
   19914:	stmia	ip!, {r0, r1, r2, r3}
   19918:	ldm	lr, {r0, r1, r2, r3}
   1991c:	stm	ip, {r0, r1, r2, r3}
   19920:	ldr	r2, [r5, r8, lsl #2]
   19924:	lsr	r3, r2, r4
   19928:	eor	r3, r3, #1
   1992c:	and	r3, r3, #1
   19930:	eor	r4, r2, r3, lsl r4
   19934:	str	r4, [r5, r8, lsl #2]
   19938:	bl	11068 <__errno_location@plt>
   1993c:	ldr	r2, [r7, #4]
   19940:	ldr	r4, [r7]
   19944:	cmp	r2, #0
   19948:	mov	r9, r0
   1994c:	ldr	sl, [r0]
   19950:	bgt	199ac <__assert_fail@plt+0x8800>
   19954:	add	r8, r7, #8
   19958:	cmp	r4, r8
   1995c:	str	r2, [sp, #28]
   19960:	beq	19a64 <__assert_fail@plt+0x88b8>
   19964:	mov	r3, #8
   19968:	mov	r0, r4
   1996c:	str	r3, [sp]
   19970:	rsb	r2, r2, #1
   19974:	mvn	r3, #-2147483648	; 0x80000000
   19978:	add	r1, sp, #28
   1997c:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19980:	mov	r4, r0
   19984:	str	r0, [r7]
   19988:	ldr	r0, [r7, #4]
   1998c:	ldr	r2, [sp, #28]
   19990:	mov	r1, #0
   19994:	sub	r2, r2, r0
   19998:	add	r0, r4, r0, lsl #3
   1999c:	lsl	r2, r2, #3
   199a0:	bl	1108c <memset@plt>
   199a4:	ldr	r3, [sp, #28]
   199a8:	str	r3, [r7, #4]
   199ac:	ldr	r8, [sp, #36]	; 0x24
   199b0:	ldr	fp, [r4]
   199b4:	ldr	r7, [r4, #4]
   199b8:	ldr	r2, [sp, #72]	; 0x48
   199bc:	ldr	r3, [sp, #32]
   199c0:	ldr	ip, [sp, #76]	; 0x4c
   199c4:	orr	r8, r8, #1
   199c8:	str	r2, [sp, #12]
   199cc:	str	r3, [sp]
   199d0:	str	r8, [sp, #4]
   199d4:	str	r5, [sp, #8]
   199d8:	mov	r1, fp
   199dc:	mov	r0, r7
   199e0:	str	ip, [sp, #16]
   199e4:	mvn	r3, #0
   199e8:	mov	r2, r6
   199ec:	bl	17008 <__assert_fail@plt+0x5e5c>
   199f0:	cmp	fp, r0
   199f4:	bhi	19a54 <__assert_fail@plt+0x88a8>
   199f8:	ldr	r3, [pc, #156]	; 19a9c <__assert_fail@plt+0x88f0>
   199fc:	add	fp, r0, #1
   19a00:	cmp	r7, r3
   19a04:	str	fp, [r4]
   19a08:	beq	19a14 <__assert_fail@plt+0x8868>
   19a0c:	mov	r0, r7
   19a10:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19a14:	mov	r0, fp
   19a18:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19a1c:	ldr	lr, [sp, #76]	; 0x4c
   19a20:	ldr	r3, [sp, #32]
   19a24:	ldr	ip, [sp, #72]	; 0x48
   19a28:	mov	r2, r6
   19a2c:	mov	r1, fp
   19a30:	str	r0, [r4, #4]
   19a34:	str	r3, [sp]
   19a38:	str	r5, [sp, #8]
   19a3c:	str	r8, [sp, #4]
   19a40:	str	lr, [sp, #16]
   19a44:	str	ip, [sp, #12]
   19a48:	mvn	r3, #0
   19a4c:	mov	r7, r0
   19a50:	bl	17008 <__assert_fail@plt+0x5e5c>
   19a54:	mov	r0, r7
   19a58:	str	sl, [r9]
   19a5c:	add	sp, sp, #84	; 0x54
   19a60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a64:	mov	r3, #8
   19a68:	str	r3, [sp]
   19a6c:	add	r1, sp, #28
   19a70:	rsb	r2, r2, #1
   19a74:	mvn	r3, #-2147483648	; 0x80000000
   19a78:	mov	r0, #0
   19a7c:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19a80:	mov	r4, r0
   19a84:	ldm	r8, {r0, r1}
   19a88:	str	r4, [r7]
   19a8c:	stm	r4, {r0, r1}
   19a90:	b	19988 <__assert_fail@plt+0x87dc>
   19a94:			; <UNDEFINED> instruction: 0x0002e1b4
   19a98:	andeq	lr, r2, r4, lsr #2
   19a9c:	andeq	lr, r2, r4, ror #3
   19aa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19aa4:	mov	r6, r0
   19aa8:	ldr	lr, [pc, #404]	; 19c44 <__assert_fail@plt+0x8a98>
   19aac:	sub	sp, sp, #84	; 0x54
   19ab0:	add	ip, sp, #32
   19ab4:	ldm	lr!, {r0, r1, r2, r3}
   19ab8:	ldr	r5, [pc, #392]	; 19c48 <__assert_fail@plt+0x8a9c>
   19abc:	stmia	ip!, {r0, r1, r2, r3}
   19ac0:	ldm	lr!, {r0, r1, r2, r3}
   19ac4:	ldr	r4, [sp, #44]	; 0x2c
   19ac8:	stmia	ip!, {r0, r1, r2, r3}
   19acc:	ldm	lr, {r0, r1, r2, r3}
   19ad0:	mvn	lr, r4
   19ad4:	and	lr, lr, #67108864	; 0x4000000
   19ad8:	eor	lr, lr, r4
   19adc:	stm	ip, {r0, r1, r2, r3}
   19ae0:	str	lr, [sp, #44]	; 0x2c
   19ae4:	bl	11068 <__errno_location@plt>
   19ae8:	ldr	r2, [r5, #4]
   19aec:	ldr	r4, [r5]
   19af0:	cmp	r2, #0
   19af4:	mov	r8, r0
   19af8:	ldr	sl, [r0]
   19afc:	bgt	19b58 <__assert_fail@plt+0x89ac>
   19b00:	add	r7, r5, #8
   19b04:	cmp	r4, r7
   19b08:	str	r2, [sp, #28]
   19b0c:	beq	19c14 <__assert_fail@plt+0x8a68>
   19b10:	mov	r3, #8
   19b14:	mov	r0, r4
   19b18:	str	r3, [sp]
   19b1c:	rsb	r2, r2, #1
   19b20:	mvn	r3, #-2147483648	; 0x80000000
   19b24:	add	r1, sp, #28
   19b28:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19b2c:	mov	r4, r0
   19b30:	str	r0, [r5]
   19b34:	ldr	r0, [r5, #4]
   19b38:	ldr	r2, [sp, #28]
   19b3c:	mov	r1, #0
   19b40:	sub	r2, r2, r0
   19b44:	add	r0, r4, r0, lsl #3
   19b48:	lsl	r2, r2, #3
   19b4c:	bl	1108c <memset@plt>
   19b50:	ldr	r3, [sp, #28]
   19b54:	str	r3, [r5, #4]
   19b58:	ldr	r7, [sp, #36]	; 0x24
   19b5c:	ldr	r9, [r4]
   19b60:	ldr	r5, [r4, #4]
   19b64:	ldr	r2, [sp, #72]	; 0x48
   19b68:	ldr	r3, [sp, #32]
   19b6c:	ldr	ip, [sp, #76]	; 0x4c
   19b70:	orr	r7, r7, #1
   19b74:	add	fp, sp, #40	; 0x28
   19b78:	str	r2, [sp, #12]
   19b7c:	str	r3, [sp]
   19b80:	str	r7, [sp, #4]
   19b84:	mov	r1, r9
   19b88:	mov	r0, r5
   19b8c:	str	ip, [sp, #16]
   19b90:	str	fp, [sp, #8]
   19b94:	mvn	r3, #0
   19b98:	mov	r2, r6
   19b9c:	bl	17008 <__assert_fail@plt+0x5e5c>
   19ba0:	cmp	r9, r0
   19ba4:	bhi	19c04 <__assert_fail@plt+0x8a58>
   19ba8:	ldr	r3, [pc, #156]	; 19c4c <__assert_fail@plt+0x8aa0>
   19bac:	add	r9, r0, #1
   19bb0:	cmp	r5, r3
   19bb4:	str	r9, [r4]
   19bb8:	beq	19bc4 <__assert_fail@plt+0x8a18>
   19bbc:	mov	r0, r5
   19bc0:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19bc4:	mov	r0, r9
   19bc8:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19bcc:	ldr	lr, [sp, #76]	; 0x4c
   19bd0:	ldr	r3, [sp, #32]
   19bd4:	ldr	ip, [sp, #72]	; 0x48
   19bd8:	mov	r2, r6
   19bdc:	mov	r1, r9
   19be0:	str	r0, [r4, #4]
   19be4:	str	r3, [sp]
   19be8:	str	fp, [sp, #8]
   19bec:	str	r7, [sp, #4]
   19bf0:	str	lr, [sp, #16]
   19bf4:	str	ip, [sp, #12]
   19bf8:	mvn	r3, #0
   19bfc:	mov	r5, r0
   19c00:	bl	17008 <__assert_fail@plt+0x5e5c>
   19c04:	mov	r0, r5
   19c08:	str	sl, [r8]
   19c0c:	add	sp, sp, #84	; 0x54
   19c10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c14:	mov	r3, #8
   19c18:	str	r3, [sp]
   19c1c:	add	r1, sp, #28
   19c20:	rsb	r2, r2, #1
   19c24:	mvn	r3, #-2147483648	; 0x80000000
   19c28:	mov	r0, #0
   19c2c:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19c30:	mov	r4, r0
   19c34:	ldm	r7, {r0, r1}
   19c38:	str	r4, [r5]
   19c3c:	stm	r4, {r0, r1}
   19c40:	b	19b34 <__assert_fail@plt+0x8988>
   19c44:			; <UNDEFINED> instruction: 0x0002e1b4
   19c48:	andeq	lr, r2, r4, lsr #2
   19c4c:	andeq	lr, r2, r4, ror #3
   19c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c54:	mov	r9, r0
   19c58:	ldr	lr, [pc, #416]	; 19e00 <__assert_fail@plt+0x8c54>
   19c5c:	mov	sl, r1
   19c60:	sub	sp, sp, #92	; 0x5c
   19c64:	ldm	lr!, {r0, r1, r2, r3}
   19c68:	add	ip, sp, #40	; 0x28
   19c6c:	ldr	r5, [pc, #400]	; 19e04 <__assert_fail@plt+0x8c58>
   19c70:	stmia	ip!, {r0, r1, r2, r3}
   19c74:	ldm	lr!, {r0, r1, r2, r3}
   19c78:	ldr	r4, [sp, #52]	; 0x34
   19c7c:	stmia	ip!, {r0, r1, r2, r3}
   19c80:	ldm	lr, {r0, r1, r2, r3}
   19c84:	mvn	lr, r4
   19c88:	and	lr, lr, #67108864	; 0x4000000
   19c8c:	eor	lr, lr, r4
   19c90:	stm	ip, {r0, r1, r2, r3}
   19c94:	str	lr, [sp, #52]	; 0x34
   19c98:	bl	11068 <__errno_location@plt>
   19c9c:	ldr	r2, [r5, #4]
   19ca0:	ldr	r4, [r5]
   19ca4:	cmp	r2, #0
   19ca8:	ldr	r3, [r0]
   19cac:	mov	r7, r0
   19cb0:	str	r3, [sp, #28]
   19cb4:	bgt	19d10 <__assert_fail@plt+0x8b64>
   19cb8:	add	r6, r5, #8
   19cbc:	cmp	r4, r6
   19cc0:	str	r2, [sp, #36]	; 0x24
   19cc4:	beq	19dd0 <__assert_fail@plt+0x8c24>
   19cc8:	mov	r3, #8
   19ccc:	mov	r0, r4
   19cd0:	str	r3, [sp]
   19cd4:	rsb	r2, r2, #1
   19cd8:	mvn	r3, #-2147483648	; 0x80000000
   19cdc:	add	r1, sp, #36	; 0x24
   19ce0:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19ce4:	mov	r4, r0
   19ce8:	str	r0, [r5]
   19cec:	ldr	r0, [r5, #4]
   19cf0:	ldr	r2, [sp, #36]	; 0x24
   19cf4:	mov	r1, #0
   19cf8:	sub	r2, r2, r0
   19cfc:	add	r0, r4, r0, lsl #3
   19d00:	lsl	r2, r2, #3
   19d04:	bl	1108c <memset@plt>
   19d08:	ldr	r3, [sp, #36]	; 0x24
   19d0c:	str	r3, [r5, #4]
   19d10:	ldr	r6, [sp, #44]	; 0x2c
   19d14:	ldr	r8, [r4]
   19d18:	ldr	r5, [r4, #4]
   19d1c:	ldr	r2, [sp, #80]	; 0x50
   19d20:	ldr	r3, [sp, #40]	; 0x28
   19d24:	ldr	ip, [sp, #84]	; 0x54
   19d28:	orr	r6, r6, #1
   19d2c:	add	fp, sp, #48	; 0x30
   19d30:	str	r2, [sp, #12]
   19d34:	str	r3, [sp]
   19d38:	str	r6, [sp, #4]
   19d3c:	mov	r1, r8
   19d40:	mov	r0, r5
   19d44:	str	ip, [sp, #16]
   19d48:	str	fp, [sp, #8]
   19d4c:	mov	r3, sl
   19d50:	mov	r2, r9
   19d54:	bl	17008 <__assert_fail@plt+0x5e5c>
   19d58:	cmp	r8, r0
   19d5c:	bhi	19dbc <__assert_fail@plt+0x8c10>
   19d60:	ldr	r3, [pc, #160]	; 19e08 <__assert_fail@plt+0x8c5c>
   19d64:	add	r8, r0, #1
   19d68:	cmp	r5, r3
   19d6c:	str	r8, [r4]
   19d70:	beq	19d7c <__assert_fail@plt+0x8bd0>
   19d74:	mov	r0, r5
   19d78:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19d7c:	mov	r0, r8
   19d80:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19d84:	ldr	ip, [sp, #84]	; 0x54
   19d88:	ldr	lr, [sp, #40]	; 0x28
   19d8c:	mov	r3, sl
   19d90:	mov	r2, r9
   19d94:	mov	r1, r8
   19d98:	str	r0, [r4, #4]
   19d9c:	ldr	r4, [sp, #80]	; 0x50
   19da0:	str	fp, [sp, #8]
   19da4:	str	r6, [sp, #4]
   19da8:	str	ip, [sp, #16]
   19dac:	str	r4, [sp, #12]
   19db0:	str	lr, [sp]
   19db4:	mov	r5, r0
   19db8:	bl	17008 <__assert_fail@plt+0x5e5c>
   19dbc:	ldr	r3, [sp, #28]
   19dc0:	mov	r0, r5
   19dc4:	str	r3, [r7]
   19dc8:	add	sp, sp, #92	; 0x5c
   19dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19dd0:	mov	r3, #8
   19dd4:	str	r3, [sp]
   19dd8:	add	r1, sp, #36	; 0x24
   19ddc:	rsb	r2, r2, #1
   19de0:	mvn	r3, #-2147483648	; 0x80000000
   19de4:	mov	r0, #0
   19de8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19dec:	mov	r4, r0
   19df0:	ldm	r6, {r0, r1}
   19df4:	str	r4, [r5]
   19df8:	stm	r4, {r0, r1}
   19dfc:	b	19cec <__assert_fail@plt+0x8b40>
   19e00:			; <UNDEFINED> instruction: 0x0002e1b4
   19e04:	andeq	lr, r2, r4, lsr #2
   19e08:	andeq	lr, r2, r4, ror #3
   19e0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e10:	sub	sp, sp, #180	; 0xb4
   19e14:	mov	r6, r1
   19e18:	mov	r4, r0
   19e1c:	mov	r9, r2
   19e20:	add	r0, sp, #80	; 0x50
   19e24:	mov	r2, #48	; 0x30
   19e28:	mov	r1, #0
   19e2c:	bl	1108c <memset@plt>
   19e30:	cmp	r6, #10
   19e34:	beq	1a014 <__assert_fail@plt+0x8e68>
   19e38:	add	r5, sp, #80	; 0x50
   19e3c:	str	r6, [sp, #80]	; 0x50
   19e40:	ldm	r5!, {r0, r1, r2, r3}
   19e44:	add	ip, sp, #128	; 0x80
   19e48:	mov	r7, ip
   19e4c:	add	lr, sp, #32
   19e50:	stmia	ip!, {r0, r1, r2, r3}
   19e54:	mov	r8, #67108864	; 0x4000000
   19e58:	ldm	r5!, {r0, r1, r2, r3}
   19e5c:	ldr	r6, [pc, #436]	; 1a018 <__assert_fail@plt+0x8e6c>
   19e60:	stmia	ip!, {r0, r1, r2, r3}
   19e64:	ldm	r5, {r0, r1, r2, r3}
   19e68:	stm	ip, {r0, r1, r2, r3}
   19e6c:	ldm	r7!, {r0, r1, r2, r3}
   19e70:	stmia	lr!, {r0, r1, r2, r3}
   19e74:	ldm	r7!, {r0, r1, r2, r3}
   19e78:	str	r8, [sp, #44]	; 0x2c
   19e7c:	stmia	lr!, {r0, r1, r2, r3}
   19e80:	ldm	ip, {r0, r1, r2, r3}
   19e84:	stm	lr, {r0, r1, r2, r3}
   19e88:	bl	11068 <__errno_location@plt>
   19e8c:	cmn	r4, #-2147483647	; 0x80000001
   19e90:	ldr	r5, [r6]
   19e94:	mov	r7, r0
   19e98:	movne	r0, #0
   19e9c:	moveq	r0, #1
   19ea0:	ldr	r3, [r7]
   19ea4:	orrs	r0, r0, r4, lsr #31
   19ea8:	str	r3, [sp, #24]
   19eac:	bne	1a014 <__assert_fail@plt+0x8e68>
   19eb0:	ldr	r2, [r6, #4]
   19eb4:	cmp	r4, r2
   19eb8:	blt	19f18 <__assert_fail@plt+0x8d6c>
   19ebc:	add	r8, r6, #8
   19ec0:	cmp	r5, r8
   19ec4:	str	r2, [sp, #80]	; 0x50
   19ec8:	beq	19fe4 <__assert_fail@plt+0x8e38>
   19ecc:	mov	r3, #8
   19ed0:	sub	r2, r4, r2
   19ed4:	mov	r0, r5
   19ed8:	str	r3, [sp]
   19edc:	add	r2, r2, #1
   19ee0:	add	r1, sp, #80	; 0x50
   19ee4:	mvn	r3, #-2147483648	; 0x80000000
   19ee8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   19eec:	mov	r5, r0
   19ef0:	str	r0, [r6]
   19ef4:	ldr	r0, [r6, #4]
   19ef8:	ldr	r2, [sp, #80]	; 0x50
   19efc:	mov	r1, #0
   19f00:	sub	r2, r2, r0
   19f04:	add	r0, r5, r0, lsl #3
   19f08:	lsl	r2, r2, #3
   19f0c:	bl	1108c <memset@plt>
   19f10:	ldr	r3, [sp, #80]	; 0x50
   19f14:	str	r3, [r6, #4]
   19f18:	add	fp, r5, r4, lsl #3
   19f1c:	ldr	r1, [sp, #36]	; 0x24
   19f20:	ldr	r8, [r5, r4, lsl #3]
   19f24:	ldr	r6, [fp, #4]
   19f28:	ldr	r2, [sp, #72]	; 0x48
   19f2c:	ldr	r3, [sp, #32]
   19f30:	ldr	ip, [sp, #76]	; 0x4c
   19f34:	orr	r1, r1, #1
   19f38:	add	sl, sp, #40	; 0x28
   19f3c:	str	r1, [sp, #28]
   19f40:	str	r1, [sp, #4]
   19f44:	str	r2, [sp, #12]
   19f48:	str	r3, [sp]
   19f4c:	mov	r0, r6
   19f50:	mov	r1, r8
   19f54:	str	ip, [sp, #16]
   19f58:	str	sl, [sp, #8]
   19f5c:	mvn	r3, #0
   19f60:	mov	r2, r9
   19f64:	bl	17008 <__assert_fail@plt+0x5e5c>
   19f68:	cmp	r8, r0
   19f6c:	bhi	19fd0 <__assert_fail@plt+0x8e24>
   19f70:	ldr	r3, [pc, #164]	; 1a01c <__assert_fail@plt+0x8e70>
   19f74:	add	r8, r0, #1
   19f78:	cmp	r6, r3
   19f7c:	str	r8, [r5, r4, lsl #3]
   19f80:	beq	19f8c <__assert_fail@plt+0x8de0>
   19f84:	mov	r0, r6
   19f88:	bl	1c598 <__assert_fail@plt+0xb3ec>
   19f8c:	mov	r0, r8
   19f90:	bl	1b970 <__assert_fail@plt+0xa7c4>
   19f94:	ldr	lr, [sp, #76]	; 0x4c
   19f98:	ldr	r3, [sp, #32]
   19f9c:	ldr	ip, [sp, #72]	; 0x48
   19fa0:	ldr	r4, [sp, #28]
   19fa4:	mov	r2, r9
   19fa8:	mov	r1, r8
   19fac:	str	r0, [fp, #4]
   19fb0:	str	r3, [sp]
   19fb4:	str	sl, [sp, #8]
   19fb8:	str	r4, [sp, #4]
   19fbc:	str	lr, [sp, #16]
   19fc0:	str	ip, [sp, #12]
   19fc4:	mvn	r3, #0
   19fc8:	mov	r6, r0
   19fcc:	bl	17008 <__assert_fail@plt+0x5e5c>
   19fd0:	ldr	r3, [sp, #24]
   19fd4:	mov	r0, r6
   19fd8:	str	r3, [r7]
   19fdc:	add	sp, sp, #180	; 0xb4
   19fe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe4:	mov	r3, #8
   19fe8:	sub	r2, r4, r2
   19fec:	add	r1, sp, #80	; 0x50
   19ff0:	str	r3, [sp]
   19ff4:	add	r2, r2, #1
   19ff8:	mvn	r3, #-2147483648	; 0x80000000
   19ffc:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a000:	mov	r5, r0
   1a004:	ldm	r8, {r0, r1}
   1a008:	str	r5, [r6]
   1a00c:	stm	r5, {r0, r1}
   1a010:	b	19ef4 <__assert_fail@plt+0x8d48>
   1a014:	bl	1117c <abort@plt>
   1a018:	andeq	lr, r2, r4, lsr #2
   1a01c:	andeq	lr, r2, r4, ror #3
   1a020:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a024:	mov	r7, r1
   1a028:	ldr	lr, [pc, #492]	; 1a21c <__assert_fail@plt+0x9070>
   1a02c:	mov	r8, r2
   1a030:	mov	r4, r0
   1a034:	mov	fp, r3
   1a038:	ldm	lr!, {r0, r1, r2, r3}
   1a03c:	sub	sp, sp, #100	; 0x64
   1a040:	add	ip, sp, #48	; 0x30
   1a044:	mov	sl, #10
   1a048:	stmia	ip!, {r0, r1, r2, r3}
   1a04c:	cmp	r8, #0
   1a050:	cmpne	r7, #0
   1a054:	ldm	lr!, {r0, r1, r2, r3}
   1a058:	str	sl, [sp, #48]	; 0x30
   1a05c:	stmia	ip!, {r0, r1, r2, r3}
   1a060:	ldm	lr, {r0, r1, r2, r3}
   1a064:	stm	ip, {r0, r1, r2, r3}
   1a068:	beq	1a218 <__assert_fail@plt+0x906c>
   1a06c:	str	r7, [sp, #88]	; 0x58
   1a070:	str	r8, [sp, #92]	; 0x5c
   1a074:	bl	11068 <__errno_location@plt>
   1a078:	ldr	r6, [pc, #416]	; 1a220 <__assert_fail@plt+0x9074>
   1a07c:	cmn	r4, #-2147483647	; 0x80000001
   1a080:	ldr	r5, [r6]
   1a084:	mov	r9, r0
   1a088:	movne	r0, #0
   1a08c:	moveq	r0, #1
   1a090:	ldr	r3, [r9]
   1a094:	orrs	r0, r0, r4, lsr #31
   1a098:	str	r3, [sp, #28]
   1a09c:	bne	1a218 <__assert_fail@plt+0x906c>
   1a0a0:	ldr	r2, [r6, #4]
   1a0a4:	cmp	r4, r2
   1a0a8:	movlt	r3, sl
   1a0ac:	blt	1a118 <__assert_fail@plt+0x8f6c>
   1a0b0:	add	r7, r6, #8
   1a0b4:	cmp	r5, r7
   1a0b8:	str	r2, [sp, #44]	; 0x2c
   1a0bc:	beq	1a1e8 <__assert_fail@plt+0x903c>
   1a0c0:	mov	r3, #8
   1a0c4:	sub	r2, r4, r2
   1a0c8:	mov	r0, r5
   1a0cc:	str	r3, [sp]
   1a0d0:	add	r2, r2, #1
   1a0d4:	mvn	r3, #-2147483648	; 0x80000000
   1a0d8:	add	r1, sp, #44	; 0x2c
   1a0dc:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a0e0:	mov	r5, r0
   1a0e4:	str	r0, [r6]
   1a0e8:	ldr	r0, [r6, #4]
   1a0ec:	ldr	r2, [sp, #44]	; 0x2c
   1a0f0:	mov	r1, #0
   1a0f4:	sub	r2, r2, r0
   1a0f8:	add	r0, r5, r0, lsl #3
   1a0fc:	lsl	r2, r2, #3
   1a100:	bl	1108c <memset@plt>
   1a104:	ldr	r3, [sp, #48]	; 0x30
   1a108:	ldr	r7, [sp, #88]	; 0x58
   1a10c:	ldr	r8, [sp, #92]	; 0x5c
   1a110:	ldr	r2, [sp, #44]	; 0x2c
   1a114:	str	r2, [r6, #4]
   1a118:	add	r2, r5, r4, lsl #3
   1a11c:	mov	r1, r2
   1a120:	str	r2, [sp, #32]
   1a124:	ldr	r2, [sp, #52]	; 0x34
   1a128:	ldr	r6, [r1, #4]
   1a12c:	ldr	sl, [r5, r4, lsl #3]
   1a130:	orr	r2, r2, #1
   1a134:	str	r3, [sp]
   1a138:	add	r3, sp, #56	; 0x38
   1a13c:	str	r2, [sp, #36]	; 0x24
   1a140:	str	r2, [sp, #4]
   1a144:	str	r3, [sp, #8]
   1a148:	mov	r0, r6
   1a14c:	str	r8, [sp, #16]
   1a150:	str	r7, [sp, #12]
   1a154:	mov	r1, sl
   1a158:	mvn	r3, #0
   1a15c:	mov	r2, fp
   1a160:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a164:	cmp	sl, r0
   1a168:	bhi	1a1d4 <__assert_fail@plt+0x9028>
   1a16c:	ldr	r3, [pc, #176]	; 1a224 <__assert_fail@plt+0x9078>
   1a170:	add	r7, r0, #1
   1a174:	cmp	r6, r3
   1a178:	str	r7, [r5, r4, lsl #3]
   1a17c:	beq	1a188 <__assert_fail@plt+0x8fdc>
   1a180:	mov	r0, r6
   1a184:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1a188:	mov	r0, r7
   1a18c:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1a190:	ldr	r3, [sp, #32]
   1a194:	ldr	lr, [sp, #92]	; 0x5c
   1a198:	ldr	ip, [sp, #88]	; 0x58
   1a19c:	ldr	r4, [sp, #36]	; 0x24
   1a1a0:	mov	r2, fp
   1a1a4:	mov	r1, r7
   1a1a8:	str	r0, [r3, #4]
   1a1ac:	add	r3, sp, #56	; 0x38
   1a1b0:	str	r3, [sp, #8]
   1a1b4:	ldr	r3, [sp, #48]	; 0x30
   1a1b8:	str	r4, [sp, #4]
   1a1bc:	str	r3, [sp]
   1a1c0:	str	lr, [sp, #16]
   1a1c4:	str	ip, [sp, #12]
   1a1c8:	mvn	r3, #0
   1a1cc:	mov	r6, r0
   1a1d0:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a1d4:	ldr	r3, [sp, #28]
   1a1d8:	mov	r0, r6
   1a1dc:	str	r3, [r9]
   1a1e0:	add	sp, sp, #100	; 0x64
   1a1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1e8:	mov	r3, #8
   1a1ec:	sub	r2, r4, r2
   1a1f0:	str	r3, [sp]
   1a1f4:	add	r1, sp, #44	; 0x2c
   1a1f8:	add	r2, r2, #1
   1a1fc:	mvn	r3, #-2147483648	; 0x80000000
   1a200:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a204:	mov	r5, r0
   1a208:	ldm	r7, {r0, r1}
   1a20c:	str	r5, [r6]
   1a210:	stm	r5, {r0, r1}
   1a214:	b	1a0e8 <__assert_fail@plt+0x8f3c>
   1a218:	bl	1117c <abort@plt>
   1a21c:			; <UNDEFINED> instruction: 0x0002e1b4
   1a220:	andeq	lr, r2, r4, lsr #2
   1a224:	andeq	lr, r2, r4, ror #3
   1a228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a22c:	mov	r7, r1
   1a230:	ldr	lr, [pc, #492]	; 1a424 <__assert_fail@plt+0x9278>
   1a234:	mov	r8, r2
   1a238:	mov	r4, r0
   1a23c:	mov	fp, r3
   1a240:	ldm	lr!, {r0, r1, r2, r3}
   1a244:	sub	sp, sp, #100	; 0x64
   1a248:	add	ip, sp, #48	; 0x30
   1a24c:	mov	sl, #10
   1a250:	stmia	ip!, {r0, r1, r2, r3}
   1a254:	cmp	r8, #0
   1a258:	cmpne	r7, #0
   1a25c:	ldm	lr!, {r0, r1, r2, r3}
   1a260:	str	sl, [sp, #48]	; 0x30
   1a264:	stmia	ip!, {r0, r1, r2, r3}
   1a268:	ldm	lr, {r0, r1, r2, r3}
   1a26c:	stm	ip, {r0, r1, r2, r3}
   1a270:	beq	1a420 <__assert_fail@plt+0x9274>
   1a274:	str	r7, [sp, #88]	; 0x58
   1a278:	str	r8, [sp, #92]	; 0x5c
   1a27c:	bl	11068 <__errno_location@plt>
   1a280:	ldr	r6, [pc, #416]	; 1a428 <__assert_fail@plt+0x927c>
   1a284:	cmn	r4, #-2147483647	; 0x80000001
   1a288:	ldr	r5, [r6]
   1a28c:	mov	r9, r0
   1a290:	movne	r0, #0
   1a294:	moveq	r0, #1
   1a298:	ldr	r3, [r9]
   1a29c:	orrs	r0, r0, r4, lsr #31
   1a2a0:	str	r3, [sp, #28]
   1a2a4:	bne	1a420 <__assert_fail@plt+0x9274>
   1a2a8:	ldr	r2, [r6, #4]
   1a2ac:	cmp	r4, r2
   1a2b0:	movlt	r3, sl
   1a2b4:	blt	1a320 <__assert_fail@plt+0x9174>
   1a2b8:	add	r7, r6, #8
   1a2bc:	cmp	r5, r7
   1a2c0:	str	r2, [sp, #44]	; 0x2c
   1a2c4:	beq	1a3f0 <__assert_fail@plt+0x9244>
   1a2c8:	mov	r3, #8
   1a2cc:	sub	r2, r4, r2
   1a2d0:	mov	r0, r5
   1a2d4:	str	r3, [sp]
   1a2d8:	add	r2, r2, #1
   1a2dc:	mvn	r3, #-2147483648	; 0x80000000
   1a2e0:	add	r1, sp, #44	; 0x2c
   1a2e4:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a2e8:	mov	r5, r0
   1a2ec:	str	r0, [r6]
   1a2f0:	ldr	r0, [r6, #4]
   1a2f4:	ldr	r2, [sp, #44]	; 0x2c
   1a2f8:	mov	r1, #0
   1a2fc:	sub	r2, r2, r0
   1a300:	add	r0, r5, r0, lsl #3
   1a304:	lsl	r2, r2, #3
   1a308:	bl	1108c <memset@plt>
   1a30c:	ldr	r3, [sp, #48]	; 0x30
   1a310:	ldr	r7, [sp, #88]	; 0x58
   1a314:	ldr	r8, [sp, #92]	; 0x5c
   1a318:	ldr	r2, [sp, #44]	; 0x2c
   1a31c:	str	r2, [r6, #4]
   1a320:	add	r2, r5, r4, lsl #3
   1a324:	mov	r1, r2
   1a328:	str	r2, [sp, #32]
   1a32c:	ldr	r2, [sp, #52]	; 0x34
   1a330:	ldr	r6, [r1, #4]
   1a334:	ldr	sl, [r5, r4, lsl #3]
   1a338:	orr	r2, r2, #1
   1a33c:	str	r3, [sp]
   1a340:	add	r3, sp, #56	; 0x38
   1a344:	str	r2, [sp, #36]	; 0x24
   1a348:	str	r2, [sp, #4]
   1a34c:	str	r3, [sp, #8]
   1a350:	mov	r0, r6
   1a354:	str	r8, [sp, #16]
   1a358:	str	r7, [sp, #12]
   1a35c:	mov	r1, sl
   1a360:	ldr	r3, [sp, #136]	; 0x88
   1a364:	mov	r2, fp
   1a368:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a36c:	cmp	sl, r0
   1a370:	bhi	1a3dc <__assert_fail@plt+0x9230>
   1a374:	ldr	r3, [pc, #176]	; 1a42c <__assert_fail@plt+0x9280>
   1a378:	add	r7, r0, #1
   1a37c:	cmp	r6, r3
   1a380:	str	r7, [r5, r4, lsl #3]
   1a384:	beq	1a390 <__assert_fail@plt+0x91e4>
   1a388:	mov	r0, r6
   1a38c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1a390:	mov	r0, r7
   1a394:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1a398:	ldr	r3, [sp, #32]
   1a39c:	ldr	lr, [sp, #92]	; 0x5c
   1a3a0:	ldr	ip, [sp, #88]	; 0x58
   1a3a4:	ldr	r4, [sp, #36]	; 0x24
   1a3a8:	mov	r2, fp
   1a3ac:	mov	r1, r7
   1a3b0:	str	r0, [r3, #4]
   1a3b4:	add	r3, sp, #56	; 0x38
   1a3b8:	str	r3, [sp, #8]
   1a3bc:	ldr	r3, [sp, #48]	; 0x30
   1a3c0:	str	r4, [sp, #4]
   1a3c4:	str	r3, [sp]
   1a3c8:	str	lr, [sp, #16]
   1a3cc:	str	ip, [sp, #12]
   1a3d0:	ldr	r3, [sp, #136]	; 0x88
   1a3d4:	mov	r6, r0
   1a3d8:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a3dc:	ldr	r3, [sp, #28]
   1a3e0:	mov	r0, r6
   1a3e4:	str	r3, [r9]
   1a3e8:	add	sp, sp, #100	; 0x64
   1a3ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a3f0:	mov	r3, #8
   1a3f4:	sub	r2, r4, r2
   1a3f8:	str	r3, [sp]
   1a3fc:	add	r1, sp, #44	; 0x2c
   1a400:	add	r2, r2, #1
   1a404:	mvn	r3, #-2147483648	; 0x80000000
   1a408:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a40c:	mov	r5, r0
   1a410:	ldm	r7, {r0, r1}
   1a414:	str	r5, [r6]
   1a418:	stm	r5, {r0, r1}
   1a41c:	b	1a2f0 <__assert_fail@plt+0x9144>
   1a420:	bl	1117c <abort@plt>
   1a424:			; <UNDEFINED> instruction: 0x0002e1b4
   1a428:	andeq	lr, r2, r4, lsr #2
   1a42c:	andeq	lr, r2, r4, ror #3
   1a430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a434:	mov	r5, r0
   1a438:	ldr	lr, [pc, #452]	; 1a604 <__assert_fail@plt+0x9458>
   1a43c:	mov	r6, r1
   1a440:	mov	sl, r2
   1a444:	ldm	lr!, {r0, r1, r2, r3}
   1a448:	sub	sp, sp, #92	; 0x5c
   1a44c:	add	ip, sp, #40	; 0x28
   1a450:	cmp	r6, #0
   1a454:	cmpne	r5, #0
   1a458:	stmia	ip!, {r0, r1, r2, r3}
   1a45c:	mov	r9, #10
   1a460:	ldm	lr!, {r0, r1, r2, r3}
   1a464:	moveq	fp, #1
   1a468:	movne	fp, #0
   1a46c:	str	r9, [sp, #40]	; 0x28
   1a470:	stmia	ip!, {r0, r1, r2, r3}
   1a474:	ldm	lr, {r0, r1, r2, r3}
   1a478:	stm	ip, {r0, r1, r2, r3}
   1a47c:	beq	1a600 <__assert_fail@plt+0x9454>
   1a480:	str	r5, [sp, #80]	; 0x50
   1a484:	str	r6, [sp, #84]	; 0x54
   1a488:	bl	11068 <__errno_location@plt>
   1a48c:	ldr	r7, [pc, #372]	; 1a608 <__assert_fail@plt+0x945c>
   1a490:	ldr	r2, [r7, #4]
   1a494:	ldr	r4, [r7]
   1a498:	cmp	r2, #0
   1a49c:	ldr	r3, [r0]
   1a4a0:	mov	r8, r0
   1a4a4:	str	r3, [sp, #24]
   1a4a8:	movgt	r3, r9
   1a4ac:	bgt	1a514 <__assert_fail@plt+0x9368>
   1a4b0:	add	r5, r7, #8
   1a4b4:	cmp	r4, r5
   1a4b8:	str	r2, [sp, #36]	; 0x24
   1a4bc:	beq	1a5d0 <__assert_fail@plt+0x9424>
   1a4c0:	mov	r3, #8
   1a4c4:	mov	r0, r4
   1a4c8:	str	r3, [sp]
   1a4cc:	rsb	r2, r2, #1
   1a4d0:	mvn	r3, #-2147483648	; 0x80000000
   1a4d4:	add	r1, sp, #36	; 0x24
   1a4d8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a4dc:	mov	r4, r0
   1a4e0:	str	r0, [r7]
   1a4e4:	ldr	r0, [r7, #4]
   1a4e8:	ldr	r2, [sp, #36]	; 0x24
   1a4ec:	mov	r1, #0
   1a4f0:	sub	r2, r2, r0
   1a4f4:	add	r0, r4, r0, lsl #3
   1a4f8:	lsl	r2, r2, #3
   1a4fc:	bl	1108c <memset@plt>
   1a500:	ldr	r3, [sp, #40]	; 0x28
   1a504:	ldr	r5, [sp, #80]	; 0x50
   1a508:	ldr	r6, [sp, #84]	; 0x54
   1a50c:	ldr	r2, [sp, #36]	; 0x24
   1a510:	str	r2, [r7, #4]
   1a514:	ldr	r2, [sp, #44]	; 0x2c
   1a518:	ldr	r9, [r4]
   1a51c:	ldr	r7, [r4, #4]
   1a520:	orr	r2, r2, #1
   1a524:	add	fp, sp, #48	; 0x30
   1a528:	str	r2, [sp, #28]
   1a52c:	str	r2, [sp, #4]
   1a530:	str	r3, [sp]
   1a534:	str	r6, [sp, #16]
   1a538:	str	r5, [sp, #12]
   1a53c:	mov	r1, r9
   1a540:	mov	r0, r7
   1a544:	str	fp, [sp, #8]
   1a548:	mvn	r3, #0
   1a54c:	mov	r2, sl
   1a550:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a554:	cmp	r9, r0
   1a558:	bhi	1a5bc <__assert_fail@plt+0x9410>
   1a55c:	ldr	r3, [pc, #168]	; 1a60c <__assert_fail@plt+0x9460>
   1a560:	add	r5, r0, #1
   1a564:	cmp	r7, r3
   1a568:	str	r5, [r4]
   1a56c:	beq	1a578 <__assert_fail@plt+0x93cc>
   1a570:	mov	r0, r7
   1a574:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1a578:	mov	r0, r5
   1a57c:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1a580:	ldr	lr, [sp, #84]	; 0x54
   1a584:	ldr	r3, [sp, #40]	; 0x28
   1a588:	ldr	ip, [sp, #80]	; 0x50
   1a58c:	mov	r2, sl
   1a590:	mov	r1, r5
   1a594:	str	r0, [r4, #4]
   1a598:	ldr	r4, [sp, #28]
   1a59c:	str	r3, [sp]
   1a5a0:	str	fp, [sp, #8]
   1a5a4:	str	r4, [sp, #4]
   1a5a8:	str	lr, [sp, #16]
   1a5ac:	str	ip, [sp, #12]
   1a5b0:	mvn	r3, #0
   1a5b4:	mov	r7, r0
   1a5b8:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a5bc:	ldr	r3, [sp, #24]
   1a5c0:	mov	r0, r7
   1a5c4:	str	r3, [r8]
   1a5c8:	add	sp, sp, #92	; 0x5c
   1a5cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5d0:	mov	r3, #8
   1a5d4:	str	r3, [sp]
   1a5d8:	add	r1, sp, #36	; 0x24
   1a5dc:	rsb	r2, r2, #1
   1a5e0:	mov	r0, fp
   1a5e4:	mvn	r3, #-2147483648	; 0x80000000
   1a5e8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a5ec:	mov	r4, r0
   1a5f0:	ldm	r5, {r0, r1}
   1a5f4:	str	r4, [r7]
   1a5f8:	stm	r4, {r0, r1}
   1a5fc:	b	1a4e4 <__assert_fail@plt+0x9338>
   1a600:	bl	1117c <abort@plt>
   1a604:			; <UNDEFINED> instruction: 0x0002e1b4
   1a608:	andeq	lr, r2, r4, lsr #2
   1a60c:	andeq	lr, r2, r4, ror #3
   1a610:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a614:	mov	r5, r0
   1a618:	ldr	lr, [pc, #464]	; 1a7f0 <__assert_fail@plt+0x9644>
   1a61c:	mov	r6, r1
   1a620:	mov	sl, r2
   1a624:	mov	fp, r3
   1a628:	ldm	lr!, {r0, r1, r2, r3}
   1a62c:	sub	sp, sp, #92	; 0x5c
   1a630:	add	ip, sp, #40	; 0x28
   1a634:	cmp	r6, #0
   1a638:	cmpne	r5, #0
   1a63c:	stmia	ip!, {r0, r1, r2, r3}
   1a640:	moveq	r4, #1
   1a644:	ldm	lr!, {r0, r1, r2, r3}
   1a648:	movne	r4, #0
   1a64c:	mov	r9, #10
   1a650:	str	r4, [sp, #28]
   1a654:	stmia	ip!, {r0, r1, r2, r3}
   1a658:	ldm	lr, {r0, r1, r2, r3}
   1a65c:	str	r9, [sp, #40]	; 0x28
   1a660:	stm	ip, {r0, r1, r2, r3}
   1a664:	beq	1a7ec <__assert_fail@plt+0x9640>
   1a668:	str	r5, [sp, #80]	; 0x50
   1a66c:	str	r6, [sp, #84]	; 0x54
   1a670:	bl	11068 <__errno_location@plt>
   1a674:	ldr	r7, [pc, #376]	; 1a7f4 <__assert_fail@plt+0x9648>
   1a678:	ldr	r2, [r7, #4]
   1a67c:	ldr	r4, [r7]
   1a680:	cmp	r2, #0
   1a684:	ldr	r3, [r0]
   1a688:	mov	r8, r0
   1a68c:	str	r3, [sp, #24]
   1a690:	movgt	r3, r9
   1a694:	bgt	1a6fc <__assert_fail@plt+0x9550>
   1a698:	add	r5, r7, #8
   1a69c:	cmp	r4, r5
   1a6a0:	str	r2, [sp, #36]	; 0x24
   1a6a4:	beq	1a7bc <__assert_fail@plt+0x9610>
   1a6a8:	mov	r3, #8
   1a6ac:	mov	r0, r4
   1a6b0:	str	r3, [sp]
   1a6b4:	rsb	r2, r2, #1
   1a6b8:	mvn	r3, #-2147483648	; 0x80000000
   1a6bc:	add	r1, sp, #36	; 0x24
   1a6c0:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a6c4:	mov	r4, r0
   1a6c8:	str	r0, [r7]
   1a6cc:	ldr	r0, [r7, #4]
   1a6d0:	ldr	r2, [sp, #36]	; 0x24
   1a6d4:	mov	r1, #0
   1a6d8:	sub	r2, r2, r0
   1a6dc:	add	r0, r4, r0, lsl #3
   1a6e0:	lsl	r2, r2, #3
   1a6e4:	bl	1108c <memset@plt>
   1a6e8:	ldr	r3, [sp, #40]	; 0x28
   1a6ec:	ldr	r5, [sp, #80]	; 0x50
   1a6f0:	ldr	r6, [sp, #84]	; 0x54
   1a6f4:	ldr	r2, [sp, #36]	; 0x24
   1a6f8:	str	r2, [r7, #4]
   1a6fc:	ldr	r2, [sp, #44]	; 0x2c
   1a700:	ldr	r9, [r4]
   1a704:	ldr	r7, [r4, #4]
   1a708:	orr	r2, r2, #1
   1a70c:	str	r3, [sp]
   1a710:	add	r3, sp, #48	; 0x30
   1a714:	str	r2, [sp, #28]
   1a718:	str	r2, [sp, #4]
   1a71c:	str	r3, [sp, #8]
   1a720:	str	r6, [sp, #16]
   1a724:	str	r5, [sp, #12]
   1a728:	mov	r1, r9
   1a72c:	mov	r0, r7
   1a730:	mov	r3, fp
   1a734:	mov	r2, sl
   1a738:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a73c:	cmp	r9, r0
   1a740:	bhi	1a7a8 <__assert_fail@plt+0x95fc>
   1a744:	ldr	r3, [pc, #172]	; 1a7f8 <__assert_fail@plt+0x964c>
   1a748:	add	r5, r0, #1
   1a74c:	cmp	r7, r3
   1a750:	str	r5, [r4]
   1a754:	beq	1a760 <__assert_fail@plt+0x95b4>
   1a758:	mov	r0, r7
   1a75c:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1a760:	mov	r0, r5
   1a764:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1a768:	add	lr, sp, #48	; 0x30
   1a76c:	ldr	ip, [sp, #84]	; 0x54
   1a770:	mov	r1, r5
   1a774:	ldr	r5, [sp, #28]
   1a778:	mov	r3, fp
   1a77c:	mov	r2, sl
   1a780:	str	r0, [r4, #4]
   1a784:	ldr	r4, [sp, #80]	; 0x50
   1a788:	str	lr, [sp, #8]
   1a78c:	ldr	lr, [sp, #40]	; 0x28
   1a790:	str	r5, [sp, #4]
   1a794:	str	ip, [sp, #16]
   1a798:	str	r4, [sp, #12]
   1a79c:	str	lr, [sp]
   1a7a0:	mov	r7, r0
   1a7a4:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a7a8:	ldr	r3, [sp, #24]
   1a7ac:	mov	r0, r7
   1a7b0:	str	r3, [r8]
   1a7b4:	add	sp, sp, #92	; 0x5c
   1a7b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a7bc:	mov	r3, #8
   1a7c0:	str	r3, [sp]
   1a7c4:	add	r1, sp, #36	; 0x24
   1a7c8:	rsb	r2, r2, #1
   1a7cc:	ldr	r0, [sp, #28]
   1a7d0:	mvn	r3, #-2147483648	; 0x80000000
   1a7d4:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a7d8:	mov	r4, r0
   1a7dc:	ldm	r5, {r0, r1}
   1a7e0:	str	r4, [r7]
   1a7e4:	stm	r4, {r0, r1}
   1a7e8:	b	1a6cc <__assert_fail@plt+0x9520>
   1a7ec:	bl	1117c <abort@plt>
   1a7f0:			; <UNDEFINED> instruction: 0x0002e1b4
   1a7f4:	andeq	lr, r2, r4, lsr #2
   1a7f8:	andeq	lr, r2, r4, ror #3
   1a7fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a800:	sub	sp, sp, #52	; 0x34
   1a804:	mov	r5, r0
   1a808:	mov	sl, r1
   1a80c:	mov	fp, r2
   1a810:	bl	11068 <__errno_location@plt>
   1a814:	ldr	r4, [pc, #404]	; 1a9b0 <__assert_fail@plt+0x9804>
   1a818:	cmn	r5, #-2147483647	; 0x80000001
   1a81c:	ldr	r6, [r4]
   1a820:	mov	r8, r0
   1a824:	movne	r0, #0
   1a828:	moveq	r0, #1
   1a82c:	ldr	r3, [r8]
   1a830:	orrs	r0, r0, r5, lsr #31
   1a834:	str	r3, [sp, #28]
   1a838:	bne	1a9ac <__assert_fail@plt+0x9800>
   1a83c:	ldr	r2, [r4, #4]
   1a840:	cmp	r5, r2
   1a844:	blt	1a8a4 <__assert_fail@plt+0x96f8>
   1a848:	add	r7, r4, #8
   1a84c:	cmp	r6, r7
   1a850:	str	r2, [sp, #44]	; 0x2c
   1a854:	beq	1a97c <__assert_fail@plt+0x97d0>
   1a858:	mov	r3, #8
   1a85c:	sub	r2, r5, r2
   1a860:	mov	r0, r6
   1a864:	str	r3, [sp]
   1a868:	add	r2, r2, #1
   1a86c:	mvn	r3, #-2147483648	; 0x80000000
   1a870:	add	r1, sp, #44	; 0x2c
   1a874:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a878:	mov	r6, r0
   1a87c:	str	r0, [r4]
   1a880:	ldr	r0, [r4, #4]
   1a884:	ldr	r2, [sp, #44]	; 0x2c
   1a888:	mov	r1, #0
   1a88c:	sub	r2, r2, r0
   1a890:	add	r0, r6, r0, lsl #3
   1a894:	lsl	r2, r2, #3
   1a898:	bl	1108c <memset@plt>
   1a89c:	ldr	r3, [sp, #44]	; 0x2c
   1a8a0:	str	r3, [r4, #4]
   1a8a4:	ldr	r2, [r4, #56]	; 0x38
   1a8a8:	add	r3, r6, r5, lsl #3
   1a8ac:	ldr	r1, [r4, #20]
   1a8b0:	ldr	r7, [r3, #4]
   1a8b4:	ldr	r9, [r6, r5, lsl #3]
   1a8b8:	ldr	ip, [r4, #60]	; 0x3c
   1a8bc:	str	r3, [sp, #32]
   1a8c0:	ldr	r3, [r4, #16]
   1a8c4:	str	r2, [sp, #12]
   1a8c8:	ldr	r2, [pc, #228]	; 1a9b4 <__assert_fail@plt+0x9808>
   1a8cc:	orr	r1, r1, #1
   1a8d0:	str	r1, [sp, #36]	; 0x24
   1a8d4:	str	r1, [sp, #4]
   1a8d8:	str	r2, [sp, #8]
   1a8dc:	str	r3, [sp]
   1a8e0:	mov	r0, r7
   1a8e4:	mov	r1, r9
   1a8e8:	str	ip, [sp, #16]
   1a8ec:	mov	r3, fp
   1a8f0:	mov	r2, sl
   1a8f4:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a8f8:	cmp	r9, r0
   1a8fc:	bhi	1a968 <__assert_fail@plt+0x97bc>
   1a900:	ldr	r3, [pc, #176]	; 1a9b8 <__assert_fail@plt+0x980c>
   1a904:	add	r9, r0, #1
   1a908:	cmp	r7, r3
   1a90c:	str	r9, [r6, r5, lsl #3]
   1a910:	beq	1a91c <__assert_fail@plt+0x9770>
   1a914:	mov	r0, r7
   1a918:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1a91c:	mov	r0, r9
   1a920:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1a924:	ldr	ip, [sp, #32]
   1a928:	ldr	lr, [r4, #60]	; 0x3c
   1a92c:	ldr	r5, [r4, #56]	; 0x38
   1a930:	mov	r3, fp
   1a934:	mov	r2, sl
   1a938:	mov	r1, r9
   1a93c:	str	r0, [ip, #4]
   1a940:	ldr	ip, [r4, #16]
   1a944:	ldr	r4, [pc, #104]	; 1a9b4 <__assert_fail@plt+0x9808>
   1a948:	str	lr, [sp, #16]
   1a94c:	str	r4, [sp, #8]
   1a950:	ldr	r4, [sp, #36]	; 0x24
   1a954:	str	r5, [sp, #12]
   1a958:	str	r4, [sp, #4]
   1a95c:	str	ip, [sp]
   1a960:	mov	r7, r0
   1a964:	bl	17008 <__assert_fail@plt+0x5e5c>
   1a968:	ldr	r3, [sp, #28]
   1a96c:	mov	r0, r7
   1a970:	str	r3, [r8]
   1a974:	add	sp, sp, #52	; 0x34
   1a978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a97c:	mov	r3, #8
   1a980:	sub	r2, r5, r2
   1a984:	str	r3, [sp]
   1a988:	add	r1, sp, #44	; 0x2c
   1a98c:	add	r2, r2, #1
   1a990:	mvn	r3, #-2147483648	; 0x80000000
   1a994:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1a998:	mov	r6, r0
   1a99c:	ldm	r7, {r0, r1}
   1a9a0:	str	r6, [r4]
   1a9a4:	stm	r6, {r0, r1}
   1a9a8:	b	1a880 <__assert_fail@plt+0x96d4>
   1a9ac:	bl	1117c <abort@plt>
   1a9b0:	andeq	lr, r2, r4, lsr #2
   1a9b4:	andeq	lr, r2, ip, lsr r1
   1a9b8:	andeq	lr, r2, r4, ror #3
   1a9bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a9c0:	sub	sp, sp, #44	; 0x2c
   1a9c4:	mov	r9, r0
   1a9c8:	mov	sl, r1
   1a9cc:	bl	11068 <__errno_location@plt>
   1a9d0:	ldr	r4, [pc, #360]	; 1ab40 <__assert_fail@plt+0x9994>
   1a9d4:	ldr	r2, [r4, #4]
   1a9d8:	ldr	r5, [r4]
   1a9dc:	cmp	r2, #0
   1a9e0:	ldr	r3, [r0]
   1a9e4:	mov	r7, r0
   1a9e8:	str	r3, [sp, #24]
   1a9ec:	bgt	1aa48 <__assert_fail@plt+0x989c>
   1a9f0:	add	r6, r4, #8
   1a9f4:	cmp	r5, r6
   1a9f8:	str	r2, [sp, #36]	; 0x24
   1a9fc:	beq	1ab10 <__assert_fail@plt+0x9964>
   1aa00:	mov	r3, #8
   1aa04:	mov	r0, r5
   1aa08:	str	r3, [sp]
   1aa0c:	rsb	r2, r2, #1
   1aa10:	mvn	r3, #-2147483648	; 0x80000000
   1aa14:	add	r1, sp, #36	; 0x24
   1aa18:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1aa1c:	mov	r5, r0
   1aa20:	str	r0, [r4]
   1aa24:	ldr	r0, [r4, #4]
   1aa28:	ldr	r2, [sp, #36]	; 0x24
   1aa2c:	mov	r1, #0
   1aa30:	sub	r2, r2, r0
   1aa34:	add	r0, r5, r0, lsl #3
   1aa38:	lsl	r2, r2, #3
   1aa3c:	bl	1108c <memset@plt>
   1aa40:	ldr	r3, [sp, #36]	; 0x24
   1aa44:	str	r3, [r4, #4]
   1aa48:	ldr	r1, [r4, #20]
   1aa4c:	ldr	r8, [r5]
   1aa50:	ldr	r6, [r5, #4]
   1aa54:	ldr	r2, [r4, #56]	; 0x38
   1aa58:	ldr	r3, [r4, #16]
   1aa5c:	ldr	ip, [r4, #60]	; 0x3c
   1aa60:	ldr	fp, [pc, #220]	; 1ab44 <__assert_fail@plt+0x9998>
   1aa64:	orr	r1, r1, #1
   1aa68:	str	r1, [sp, #28]
   1aa6c:	str	r1, [sp, #4]
   1aa70:	str	r2, [sp, #12]
   1aa74:	str	r3, [sp]
   1aa78:	mov	r1, r8
   1aa7c:	mov	r0, r6
   1aa80:	str	ip, [sp, #16]
   1aa84:	str	fp, [sp, #8]
   1aa88:	mov	r3, sl
   1aa8c:	mov	r2, r9
   1aa90:	bl	17008 <__assert_fail@plt+0x5e5c>
   1aa94:	cmp	r8, r0
   1aa98:	bhi	1aafc <__assert_fail@plt+0x9950>
   1aa9c:	ldr	r3, [pc, #164]	; 1ab48 <__assert_fail@plt+0x999c>
   1aaa0:	add	r8, r0, #1
   1aaa4:	cmp	r6, r3
   1aaa8:	str	r8, [r5]
   1aaac:	beq	1aab8 <__assert_fail@plt+0x990c>
   1aab0:	mov	r0, r6
   1aab4:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1aab8:	mov	r0, r8
   1aabc:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1aac0:	ldr	lr, [r4, #60]	; 0x3c
   1aac4:	ldr	ip, [r4, #16]
   1aac8:	mov	r3, sl
   1aacc:	mov	r2, r9
   1aad0:	mov	r1, r8
   1aad4:	str	r0, [r5, #4]
   1aad8:	ldr	r5, [r4, #56]	; 0x38
   1aadc:	ldr	r4, [sp, #28]
   1aae0:	str	fp, [sp, #8]
   1aae4:	str	r4, [sp, #4]
   1aae8:	str	lr, [sp, #16]
   1aaec:	str	r5, [sp, #12]
   1aaf0:	str	ip, [sp]
   1aaf4:	mov	r6, r0
   1aaf8:	bl	17008 <__assert_fail@plt+0x5e5c>
   1aafc:	ldr	r3, [sp, #24]
   1ab00:	mov	r0, r6
   1ab04:	str	r3, [r7]
   1ab08:	add	sp, sp, #44	; 0x2c
   1ab0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab10:	mov	r3, #8
   1ab14:	str	r3, [sp]
   1ab18:	add	r1, sp, #36	; 0x24
   1ab1c:	rsb	r2, r2, #1
   1ab20:	mvn	r3, #-2147483648	; 0x80000000
   1ab24:	mov	r0, #0
   1ab28:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1ab2c:	mov	r5, r0
   1ab30:	ldm	r6, {r0, r1}
   1ab34:	str	r5, [r4]
   1ab38:	stm	r5, {r0, r1}
   1ab3c:	b	1aa24 <__assert_fail@plt+0x9878>
   1ab40:	andeq	lr, r2, r4, lsr #2
   1ab44:	andeq	lr, r2, ip, lsr r1
   1ab48:	andeq	lr, r2, r4, ror #3
   1ab4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab50:	sub	sp, sp, #44	; 0x2c
   1ab54:	mov	r5, r0
   1ab58:	mov	sl, r1
   1ab5c:	bl	11068 <__errno_location@plt>
   1ab60:	ldr	r4, [pc, #396]	; 1acf4 <__assert_fail@plt+0x9b48>
   1ab64:	cmn	r5, #-2147483647	; 0x80000001
   1ab68:	ldr	r6, [r4]
   1ab6c:	mov	r8, r0
   1ab70:	movne	r0, #0
   1ab74:	moveq	r0, #1
   1ab78:	ldr	r3, [r8]
   1ab7c:	orrs	r0, r0, r5, lsr #31
   1ab80:	str	r3, [sp, #24]
   1ab84:	bne	1acf0 <__assert_fail@plt+0x9b44>
   1ab88:	ldr	r2, [r4, #4]
   1ab8c:	cmp	r5, r2
   1ab90:	blt	1abf0 <__assert_fail@plt+0x9a44>
   1ab94:	add	r7, r4, #8
   1ab98:	cmp	r6, r7
   1ab9c:	str	r2, [sp, #36]	; 0x24
   1aba0:	beq	1acc0 <__assert_fail@plt+0x9b14>
   1aba4:	mov	r3, #8
   1aba8:	sub	r2, r5, r2
   1abac:	mov	r0, r6
   1abb0:	str	r3, [sp]
   1abb4:	add	r2, r2, #1
   1abb8:	mvn	r3, #-2147483648	; 0x80000000
   1abbc:	add	r1, sp, #36	; 0x24
   1abc0:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1abc4:	mov	r6, r0
   1abc8:	str	r0, [r4]
   1abcc:	ldr	r0, [r4, #4]
   1abd0:	ldr	r2, [sp, #36]	; 0x24
   1abd4:	mov	r1, #0
   1abd8:	sub	r2, r2, r0
   1abdc:	add	r0, r6, r0, lsl #3
   1abe0:	lsl	r2, r2, #3
   1abe4:	bl	1108c <memset@plt>
   1abe8:	ldr	r3, [sp, #36]	; 0x24
   1abec:	str	r3, [r4, #4]
   1abf0:	ldr	r2, [r4, #56]	; 0x38
   1abf4:	add	fp, r6, r5, lsl #3
   1abf8:	ldr	r1, [r4, #20]
   1abfc:	ldr	r9, [r6, r5, lsl #3]
   1ac00:	ldr	r7, [fp, #4]
   1ac04:	ldr	r3, [r4, #16]
   1ac08:	ldr	ip, [r4, #60]	; 0x3c
   1ac0c:	str	r2, [sp, #12]
   1ac10:	ldr	r2, [pc, #224]	; 1acf8 <__assert_fail@plt+0x9b4c>
   1ac14:	orr	r1, r1, #1
   1ac18:	str	r1, [sp, #28]
   1ac1c:	str	r1, [sp, #4]
   1ac20:	str	r2, [sp, #8]
   1ac24:	str	r3, [sp]
   1ac28:	mov	r0, r7
   1ac2c:	mov	r1, r9
   1ac30:	str	ip, [sp, #16]
   1ac34:	mvn	r3, #0
   1ac38:	mov	r2, sl
   1ac3c:	bl	17008 <__assert_fail@plt+0x5e5c>
   1ac40:	cmp	r9, r0
   1ac44:	bhi	1acac <__assert_fail@plt+0x9b00>
   1ac48:	ldr	r3, [pc, #172]	; 1acfc <__assert_fail@plt+0x9b50>
   1ac4c:	add	r9, r0, #1
   1ac50:	cmp	r7, r3
   1ac54:	str	r9, [r6, r5, lsl #3]
   1ac58:	beq	1ac64 <__assert_fail@plt+0x9ab8>
   1ac5c:	mov	r0, r7
   1ac60:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1ac64:	mov	r0, r9
   1ac68:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1ac6c:	ldr	ip, [r4, #60]	; 0x3c
   1ac70:	ldr	r3, [r4, #16]
   1ac74:	ldr	lr, [r4, #56]	; 0x38
   1ac78:	ldr	r4, [pc, #120]	; 1acf8 <__assert_fail@plt+0x9b4c>
   1ac7c:	mov	r2, sl
   1ac80:	mov	r1, r9
   1ac84:	str	r0, [fp, #4]
   1ac88:	str	r4, [sp, #8]
   1ac8c:	ldr	r4, [sp, #28]
   1ac90:	str	r3, [sp]
   1ac94:	str	r4, [sp, #4]
   1ac98:	str	ip, [sp, #16]
   1ac9c:	str	lr, [sp, #12]
   1aca0:	mvn	r3, #0
   1aca4:	mov	r7, r0
   1aca8:	bl	17008 <__assert_fail@plt+0x5e5c>
   1acac:	ldr	r3, [sp, #24]
   1acb0:	mov	r0, r7
   1acb4:	str	r3, [r8]
   1acb8:	add	sp, sp, #44	; 0x2c
   1acbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1acc0:	mov	r3, #8
   1acc4:	sub	r2, r5, r2
   1acc8:	str	r3, [sp]
   1accc:	add	r1, sp, #36	; 0x24
   1acd0:	add	r2, r2, #1
   1acd4:	mvn	r3, #-2147483648	; 0x80000000
   1acd8:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1acdc:	mov	r6, r0
   1ace0:	ldm	r7, {r0, r1}
   1ace4:	str	r6, [r4]
   1ace8:	stm	r6, {r0, r1}
   1acec:	b	1abcc <__assert_fail@plt+0x9a20>
   1acf0:	bl	1117c <abort@plt>
   1acf4:	andeq	lr, r2, r4, lsr #2
   1acf8:	andeq	lr, r2, ip, lsr r1
   1acfc:	andeq	lr, r2, r4, ror #3
   1ad00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ad04:	sub	sp, sp, #44	; 0x2c
   1ad08:	mov	sl, r0
   1ad0c:	bl	11068 <__errno_location@plt>
   1ad10:	ldr	r4, [pc, #348]	; 1ae74 <__assert_fail@plt+0x9cc8>
   1ad14:	ldr	r2, [r4, #4]
   1ad18:	ldr	r5, [r4]
   1ad1c:	cmp	r2, #0
   1ad20:	ldr	r3, [r0]
   1ad24:	mov	r8, r0
   1ad28:	str	r3, [sp, #28]
   1ad2c:	bgt	1ad88 <__assert_fail@plt+0x9bdc>
   1ad30:	add	r6, r4, #8
   1ad34:	cmp	r5, r6
   1ad38:	str	r2, [sp, #36]	; 0x24
   1ad3c:	beq	1ae44 <__assert_fail@plt+0x9c98>
   1ad40:	mov	r3, #8
   1ad44:	mov	r0, r5
   1ad48:	str	r3, [sp]
   1ad4c:	rsb	r2, r2, #1
   1ad50:	mvn	r3, #-2147483648	; 0x80000000
   1ad54:	add	r1, sp, #36	; 0x24
   1ad58:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1ad5c:	mov	r5, r0
   1ad60:	str	r0, [r4]
   1ad64:	ldr	r0, [r4, #4]
   1ad68:	ldr	r2, [sp, #36]	; 0x24
   1ad6c:	mov	r1, #0
   1ad70:	sub	r2, r2, r0
   1ad74:	add	r0, r5, r0, lsl #3
   1ad78:	lsl	r2, r2, #3
   1ad7c:	bl	1108c <memset@plt>
   1ad80:	ldr	r3, [sp, #36]	; 0x24
   1ad84:	str	r3, [r4, #4]
   1ad88:	ldr	r7, [r4, #20]
   1ad8c:	ldr	r9, [r5]
   1ad90:	ldr	r6, [r5, #4]
   1ad94:	ldr	r2, [r4, #56]	; 0x38
   1ad98:	ldr	r3, [r4, #16]
   1ad9c:	ldr	ip, [r4, #60]	; 0x3c
   1ada0:	ldr	fp, [pc, #208]	; 1ae78 <__assert_fail@plt+0x9ccc>
   1ada4:	orr	r7, r7, #1
   1ada8:	str	r2, [sp, #12]
   1adac:	str	r3, [sp]
   1adb0:	str	r7, [sp, #4]
   1adb4:	mov	r1, r9
   1adb8:	mov	r0, r6
   1adbc:	str	ip, [sp, #16]
   1adc0:	str	fp, [sp, #8]
   1adc4:	mvn	r3, #0
   1adc8:	mov	r2, sl
   1adcc:	bl	17008 <__assert_fail@plt+0x5e5c>
   1add0:	cmp	r9, r0
   1add4:	bhi	1ae30 <__assert_fail@plt+0x9c84>
   1add8:	ldr	r3, [pc, #156]	; 1ae7c <__assert_fail@plt+0x9cd0>
   1addc:	add	r9, r0, #1
   1ade0:	cmp	r6, r3
   1ade4:	str	r9, [r5]
   1ade8:	beq	1adf4 <__assert_fail@plt+0x9c48>
   1adec:	mov	r0, r6
   1adf0:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1adf4:	mov	r0, r9
   1adf8:	bl	1b970 <__assert_fail@plt+0xa7c4>
   1adfc:	ldr	ip, [r4, #60]	; 0x3c
   1ae00:	ldr	r3, [r4, #16]
   1ae04:	ldr	lr, [r4, #56]	; 0x38
   1ae08:	mov	r2, sl
   1ae0c:	mov	r1, r9
   1ae10:	str	r0, [r5, #4]
   1ae14:	str	r3, [sp]
   1ae18:	stmib	sp, {r7, fp}
   1ae1c:	str	ip, [sp, #16]
   1ae20:	str	lr, [sp, #12]
   1ae24:	mvn	r3, #0
   1ae28:	mov	r6, r0
   1ae2c:	bl	17008 <__assert_fail@plt+0x5e5c>
   1ae30:	ldr	r3, [sp, #28]
   1ae34:	mov	r0, r6
   1ae38:	str	r3, [r8]
   1ae3c:	add	sp, sp, #44	; 0x2c
   1ae40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ae44:	mov	r3, #8
   1ae48:	str	r3, [sp]
   1ae4c:	add	r1, sp, #36	; 0x24
   1ae50:	rsb	r2, r2, #1
   1ae54:	mvn	r3, #-2147483648	; 0x80000000
   1ae58:	mov	r0, #0
   1ae5c:	bl	1bb8c <__assert_fail@plt+0xa9e0>
   1ae60:	mov	r5, r0
   1ae64:	ldm	r6, {r0, r1}
   1ae68:	str	r5, [r4]
   1ae6c:	stm	r5, {r0, r1}
   1ae70:	b	1ad64 <__assert_fail@plt+0x9bb8>
   1ae74:	andeq	lr, r2, r4, lsr #2
   1ae78:	andeq	lr, r2, ip, lsr r1
   1ae7c:	andeq	lr, r2, r4, ror #3
   1ae80:	push	{r4, r6, r7, lr}
   1ae84:	sub	sp, sp, #104	; 0x68
   1ae88:	mov	r4, r0
   1ae8c:	mov	r2, sp
   1ae90:	ldr	r1, [pc, #52]	; 1aecc <__assert_fail@plt+0x9d20>
   1ae94:	mov	r0, #3
   1ae98:	bl	11194 <__lxstat64@plt>
   1ae9c:	cmp	r0, #0
   1aea0:	bne	1aec0 <__assert_fail@plt+0x9d14>
   1aea4:	ldrd	r6, [sp, #96]	; 0x60
   1aea8:	ldrd	r2, [sp]
   1aeac:	mov	r0, r4
   1aeb0:	strd	r6, [r4]
   1aeb4:	strd	r2, [r4, #8]
   1aeb8:	add	sp, sp, #104	; 0x68
   1aebc:	pop	{r4, r6, r7, pc}
   1aec0:	mov	r0, #0
   1aec4:	add	sp, sp, #104	; 0x68
   1aec8:	pop	{r4, r6, r7, pc}
   1aecc:	andeq	sp, r1, r4, lsr r5
   1aed0:	cmp	r0, #2
   1aed4:	push	{r4, r5, r6, r7, r8, lr}
   1aed8:	mov	r4, r0
   1aedc:	bhi	1af04 <__assert_fail@plt+0x9d58>
   1aee0:	bl	1c764 <__assert_fail@plt+0xb5b8>
   1aee4:	mov	r7, r0
   1aee8:	bl	11068 <__errno_location@plt>
   1aeec:	mov	r5, r0
   1aef0:	mov	r0, r4
   1aef4:	ldr	r6, [r5]
   1aef8:	mov	r4, r7
   1aefc:	bl	11188 <close@plt>
   1af00:	str	r6, [r5]
   1af04:	mov	r0, r4
   1af08:	pop	{r4, r5, r6, r7, r8, pc}
   1af0c:	push	{r4, r5, r6, lr}
   1af10:	sub	sp, sp, #32
   1af14:	cmp	r1, #0
   1af18:	mov	r4, r0
   1af1c:	ldr	r5, [sp, #48]	; 0x30
   1af20:	ldr	r6, [sp, #52]	; 0x34
   1af24:	beq	1b23c <__assert_fail@plt+0xa090>
   1af28:	stm	sp, {r2, r3}
   1af2c:	mov	r3, r1
   1af30:	ldr	r2, [pc, #808]	; 1b260 <__assert_fail@plt+0xa0b4>
   1af34:	mov	r1, #1
   1af38:	bl	110b0 <__fprintf_chk@plt>
   1af3c:	mov	r2, #5
   1af40:	ldr	r1, [pc, #796]	; 1b264 <__assert_fail@plt+0xa0b8>
   1af44:	mov	r0, #0
   1af48:	bl	10f54 <dcgettext@plt>
   1af4c:	ldr	r3, [pc, #788]	; 1b268 <__assert_fail@plt+0xa0bc>
   1af50:	ldr	r2, [pc, #788]	; 1b26c <__assert_fail@plt+0xa0c0>
   1af54:	str	r3, [sp]
   1af58:	mov	r1, #1
   1af5c:	mov	r3, r0
   1af60:	mov	r0, r4
   1af64:	bl	110b0 <__fprintf_chk@plt>
   1af68:	mov	r1, r4
   1af6c:	mov	r0, #10
   1af70:	bl	10f48 <fputc_unlocked@plt>
   1af74:	mov	r2, #5
   1af78:	ldr	r1, [pc, #752]	; 1b270 <__assert_fail@plt+0xa0c4>
   1af7c:	mov	r0, #0
   1af80:	bl	10f54 <dcgettext@plt>
   1af84:	mov	r1, #1
   1af88:	ldr	r3, [pc, #740]	; 1b274 <__assert_fail@plt+0xa0c8>
   1af8c:	mov	r2, r0
   1af90:	mov	r0, r4
   1af94:	bl	110b0 <__fprintf_chk@plt>
   1af98:	mov	r1, r4
   1af9c:	mov	r0, #10
   1afa0:	bl	10f48 <fputc_unlocked@plt>
   1afa4:	cmp	r6, #9
   1afa8:	ldrls	pc, [pc, r6, lsl #2]
   1afac:	b	1b254 <__assert_fail@plt+0xa0a8>
   1afb0:	andeq	fp, r1, r4, lsr r0
   1afb4:	andeq	fp, r1, ip, lsr r0
   1afb8:	andeq	fp, r1, r8, rrx
   1afbc:	muleq	r1, ip, r0
   1afc0:	ldrdeq	fp, [r1], -r8
   1afc4:	andeq	fp, r1, r4, lsl r1
   1afc8:	andeq	fp, r1, r0, asr r1
   1afcc:	muleq	r1, r4, r1
   1afd0:	andeq	fp, r1, r4, ror #3
   1afd4:	ldrdeq	sl, [r1], -r8
   1afd8:	ldr	r1, [pc, #664]	; 1b278 <__assert_fail@plt+0xa0cc>
   1afdc:	mov	r2, #5
   1afe0:	mov	r0, #0
   1afe4:	bl	10f54 <dcgettext@plt>
   1afe8:	ldr	ip, [r5, #32]
   1afec:	ldr	r1, [r5, #28]
   1aff0:	ldr	r2, [r5, #24]
   1aff4:	ldr	r3, [r5]
   1aff8:	ldr	r6, [r5, #20]
   1affc:	str	ip, [sp, #28]
   1b000:	ldr	lr, [r5, #16]
   1b004:	str	r1, [sp, #24]
   1b008:	ldr	ip, [r5, #12]
   1b00c:	str	r2, [sp, #20]
   1b010:	ldr	r1, [r5, #8]
   1b014:	ldr	r2, [r5, #4]
   1b018:	str	r6, [sp, #16]
   1b01c:	stmib	sp, {r1, ip, lr}
   1b020:	mov	r1, #1
   1b024:	str	r2, [sp]
   1b028:	mov	r2, r0
   1b02c:	mov	r0, r4
   1b030:	bl	110b0 <__fprintf_chk@plt>
   1b034:	add	sp, sp, #32
   1b038:	pop	{r4, r5, r6, pc}
   1b03c:	mov	r2, #5
   1b040:	ldr	r1, [pc, #564]	; 1b27c <__assert_fail@plt+0xa0d0>
   1b044:	mov	r0, #0
   1b048:	bl	10f54 <dcgettext@plt>
   1b04c:	ldr	r3, [r5]
   1b050:	mov	r1, #1
   1b054:	mov	r2, r0
   1b058:	mov	r0, r4
   1b05c:	add	sp, sp, #32
   1b060:	pop	{r4, r5, r6, lr}
   1b064:	b	110b0 <__fprintf_chk@plt>
   1b068:	mov	r2, #5
   1b06c:	ldr	r1, [pc, #524]	; 1b280 <__assert_fail@plt+0xa0d4>
   1b070:	mov	r0, #0
   1b074:	bl	10f54 <dcgettext@plt>
   1b078:	ldr	r2, [r5, #4]
   1b07c:	ldr	r3, [r5]
   1b080:	mov	r1, #1
   1b084:	str	r2, [sp, #48]	; 0x30
   1b088:	mov	r2, r0
   1b08c:	mov	r0, r4
   1b090:	add	sp, sp, #32
   1b094:	pop	{r4, r5, r6, lr}
   1b098:	b	110b0 <__fprintf_chk@plt>
   1b09c:	mov	r2, #5
   1b0a0:	ldr	r1, [pc, #476]	; 1b284 <__assert_fail@plt+0xa0d8>
   1b0a4:	mov	r0, #0
   1b0a8:	bl	10f54 <dcgettext@plt>
   1b0ac:	ldr	r1, [r5, #8]
   1b0b0:	ldr	r2, [r5, #4]
   1b0b4:	ldr	r3, [r5]
   1b0b8:	str	r1, [sp, #52]	; 0x34
   1b0bc:	str	r2, [sp, #48]	; 0x30
   1b0c0:	mov	r1, #1
   1b0c4:	mov	r2, r0
   1b0c8:	mov	r0, r4
   1b0cc:	add	sp, sp, #32
   1b0d0:	pop	{r4, r5, r6, lr}
   1b0d4:	b	110b0 <__fprintf_chk@plt>
   1b0d8:	mov	r2, #5
   1b0dc:	ldr	r1, [pc, #420]	; 1b288 <__assert_fail@plt+0xa0dc>
   1b0e0:	mov	r0, #0
   1b0e4:	bl	10f54 <dcgettext@plt>
   1b0e8:	ldr	r1, [r5, #8]
   1b0ec:	ldr	ip, [r5, #12]
   1b0f0:	ldr	r2, [r5, #4]
   1b0f4:	ldr	r3, [r5]
   1b0f8:	stmib	sp, {r1, ip}
   1b0fc:	str	r2, [sp]
   1b100:	mov	r1, #1
   1b104:	mov	r2, r0
   1b108:	mov	r0, r4
   1b10c:	bl	110b0 <__fprintf_chk@plt>
   1b110:	b	1b034 <__assert_fail@plt+0x9e88>
   1b114:	mov	r2, #5
   1b118:	ldr	r1, [pc, #364]	; 1b28c <__assert_fail@plt+0xa0e0>
   1b11c:	mov	r0, #0
   1b120:	bl	10f54 <dcgettext@plt>
   1b124:	add	r1, r5, #8
   1b128:	ldr	r2, [r5, #4]
   1b12c:	ldm	r1, {r1, ip, lr}
   1b130:	ldr	r3, [r5]
   1b134:	str	r2, [sp]
   1b138:	stmib	sp, {r1, ip, lr}
   1b13c:	mov	r1, #1
   1b140:	mov	r2, r0
   1b144:	mov	r0, r4
   1b148:	bl	110b0 <__fprintf_chk@plt>
   1b14c:	b	1b034 <__assert_fail@plt+0x9e88>
   1b150:	mov	r2, #5
   1b154:	ldr	r1, [pc, #308]	; 1b290 <__assert_fail@plt+0xa0e4>
   1b158:	mov	r0, #0
   1b15c:	bl	10f54 <dcgettext@plt>
   1b160:	add	r1, r5, #8
   1b164:	ldr	r2, [r5, #4]
   1b168:	ldm	r1, {r1, ip, lr}
   1b16c:	ldr	r6, [r5, #20]
   1b170:	ldr	r3, [r5]
   1b174:	stmib	sp, {r1, ip, lr}
   1b178:	mov	r1, #1
   1b17c:	str	r2, [sp]
   1b180:	str	r6, [sp, #16]
   1b184:	mov	r2, r0
   1b188:	mov	r0, r4
   1b18c:	bl	110b0 <__fprintf_chk@plt>
   1b190:	b	1b034 <__assert_fail@plt+0x9e88>
   1b194:	mov	r2, #5
   1b198:	ldr	r1, [pc, #244]	; 1b294 <__assert_fail@plt+0xa0e8>
   1b19c:	mov	r0, #0
   1b1a0:	bl	10f54 <dcgettext@plt>
   1b1a4:	ldr	r2, [r5, #24]
   1b1a8:	ldr	r3, [r5]
   1b1ac:	ldr	r6, [r5, #20]
   1b1b0:	ldr	lr, [r5, #16]
   1b1b4:	ldr	ip, [r5, #12]
   1b1b8:	str	r2, [sp, #20]
   1b1bc:	ldr	r1, [r5, #8]
   1b1c0:	ldr	r2, [r5, #4]
   1b1c4:	str	r6, [sp, #16]
   1b1c8:	stmib	sp, {r1, ip, lr}
   1b1cc:	mov	r1, #1
   1b1d0:	str	r2, [sp]
   1b1d4:	mov	r2, r0
   1b1d8:	mov	r0, r4
   1b1dc:	bl	110b0 <__fprintf_chk@plt>
   1b1e0:	b	1b034 <__assert_fail@plt+0x9e88>
   1b1e4:	mov	r2, #5
   1b1e8:	ldr	r1, [pc, #168]	; 1b298 <__assert_fail@plt+0xa0ec>
   1b1ec:	mov	r0, #0
   1b1f0:	bl	10f54 <dcgettext@plt>
   1b1f4:	ldr	r1, [r5, #28]
   1b1f8:	ldr	r2, [r5, #24]
   1b1fc:	ldr	r3, [r5]
   1b200:	ldr	r6, [r5, #20]
   1b204:	ldr	lr, [r5, #16]
   1b208:	str	r1, [sp, #24]
   1b20c:	ldr	ip, [r5, #12]
   1b210:	str	r2, [sp, #20]
   1b214:	ldr	r1, [r5, #8]
   1b218:	ldr	r2, [r5, #4]
   1b21c:	str	r6, [sp, #16]
   1b220:	stmib	sp, {r1, ip, lr}
   1b224:	mov	r1, #1
   1b228:	str	r2, [sp]
   1b22c:	mov	r2, r0
   1b230:	mov	r0, r4
   1b234:	bl	110b0 <__fprintf_chk@plt>
   1b238:	b	1b034 <__assert_fail@plt+0x9e88>
   1b23c:	str	r3, [sp]
   1b240:	mov	r1, #1
   1b244:	mov	r3, r2
   1b248:	ldr	r2, [pc, #76]	; 1b29c <__assert_fail@plt+0xa0f0>
   1b24c:	bl	110b0 <__fprintf_chk@plt>
   1b250:	b	1af3c <__assert_fail@plt+0x9d90>
   1b254:	mov	r2, #5
   1b258:	ldr	r1, [pc, #64]	; 1b2a0 <__assert_fail@plt+0xa0f4>
   1b25c:	b	1afe0 <__assert_fail@plt+0x9e34>
   1b260:	andeq	sp, r1, r8, lsr fp
   1b264:	andeq	sp, r1, ip, asr #22
   1b268:	andeq	r0, r0, r6, ror #15
   1b26c:	andeq	sp, r1, r4, lsr #28
   1b270:	andeq	sp, r1, r0, asr fp
   1b274:	strdeq	sp, [r1], -ip
   1b278:	andeq	sp, r1, ip, lsr #26
   1b27c:	andeq	sp, r1, r0, lsr #24
   1b280:	andeq	sp, r1, r0, lsr ip
   1b284:	andeq	sp, r1, r8, asr #24
   1b288:	andeq	sp, r1, r4, ror #24
   1b28c:	andeq	sp, r1, r4, lsl #25
   1b290:	andeq	sp, r1, r8, lsr #25
   1b294:	ldrdeq	sp, [r1], -r0
   1b298:	strdeq	sp, [r1], -ip
   1b29c:	andeq	sp, r1, r4, asr #22
   1b2a0:	andeq	sp, r1, r0, ror #26
   1b2a4:	push	{r4, r5, lr}
   1b2a8:	sub	sp, sp, #12
   1b2ac:	ldr	r5, [sp, #24]
   1b2b0:	ldr	ip, [r5]
   1b2b4:	cmp	ip, #0
   1b2b8:	beq	1b2d4 <__assert_fail@plt+0xa128>
   1b2bc:	mov	lr, r5
   1b2c0:	mov	ip, #0
   1b2c4:	ldr	r4, [lr, #4]!
   1b2c8:	add	ip, ip, #1
   1b2cc:	cmp	r4, #0
   1b2d0:	bne	1b2c4 <__assert_fail@plt+0xa118>
   1b2d4:	stm	sp, {r5, ip}
   1b2d8:	bl	1af0c <__assert_fail@plt+0x9d60>
   1b2dc:	add	sp, sp, #12
   1b2e0:	pop	{r4, r5, pc}
   1b2e4:	push	{r4, r5, lr}
   1b2e8:	sub	sp, sp, #76	; 0x4c
   1b2ec:	mov	r5, r0
   1b2f0:	ldr	ip, [sp, #88]	; 0x58
   1b2f4:	ldr	r0, [ip]
   1b2f8:	cmp	r0, #0
   1b2fc:	str	r0, [sp, #32]
   1b300:	beq	1b6d4 <__assert_fail@plt+0xa528>
   1b304:	ldr	r0, [ip, #4]
   1b308:	cmp	r0, #0
   1b30c:	str	r0, [sp, #36]	; 0x24
   1b310:	beq	1b6dc <__assert_fail@plt+0xa530>
   1b314:	ldr	r0, [ip, #8]
   1b318:	cmp	r0, #0
   1b31c:	str	r0, [sp, #40]	; 0x28
   1b320:	beq	1b6e4 <__assert_fail@plt+0xa538>
   1b324:	ldr	r0, [ip, #12]
   1b328:	cmp	r0, #0
   1b32c:	str	r0, [sp, #44]	; 0x2c
   1b330:	beq	1b6ec <__assert_fail@plt+0xa540>
   1b334:	ldr	r0, [ip, #16]
   1b338:	cmp	r0, #0
   1b33c:	str	r0, [sp, #48]	; 0x30
   1b340:	beq	1b6f4 <__assert_fail@plt+0xa548>
   1b344:	ldr	r0, [ip, #20]
   1b348:	cmp	r0, #0
   1b34c:	str	r0, [sp, #52]	; 0x34
   1b350:	beq	1b6fc <__assert_fail@plt+0xa550>
   1b354:	ldr	r0, [ip, #24]
   1b358:	cmp	r0, #0
   1b35c:	str	r0, [sp, #56]	; 0x38
   1b360:	beq	1b704 <__assert_fail@plt+0xa558>
   1b364:	ldr	r0, [ip, #28]
   1b368:	cmp	r0, #0
   1b36c:	str	r0, [sp, #60]	; 0x3c
   1b370:	beq	1b70c <__assert_fail@plt+0xa560>
   1b374:	ldr	r0, [ip, #32]
   1b378:	cmp	r0, #0
   1b37c:	str	r0, [sp, #64]	; 0x40
   1b380:	beq	1b714 <__assert_fail@plt+0xa568>
   1b384:	ldr	r0, [ip, #36]	; 0x24
   1b388:	cmp	r0, #0
   1b38c:	movne	r4, #10
   1b390:	moveq	r4, #9
   1b394:	cmp	r1, #0
   1b398:	beq	1b6ac <__assert_fail@plt+0xa500>
   1b39c:	stm	sp, {r2, r3}
   1b3a0:	mov	r0, r5
   1b3a4:	mov	r3, r1
   1b3a8:	ldr	r2, [pc, #876]	; 1b71c <__assert_fail@plt+0xa570>
   1b3ac:	mov	r1, #1
   1b3b0:	bl	110b0 <__fprintf_chk@plt>
   1b3b4:	mov	r2, #5
   1b3b8:	ldr	r1, [pc, #864]	; 1b720 <__assert_fail@plt+0xa574>
   1b3bc:	mov	r0, #0
   1b3c0:	bl	10f54 <dcgettext@plt>
   1b3c4:	ldr	r3, [pc, #856]	; 1b724 <__assert_fail@plt+0xa578>
   1b3c8:	ldr	r2, [pc, #856]	; 1b728 <__assert_fail@plt+0xa57c>
   1b3cc:	str	r3, [sp]
   1b3d0:	mov	r1, #1
   1b3d4:	mov	r3, r0
   1b3d8:	mov	r0, r5
   1b3dc:	bl	110b0 <__fprintf_chk@plt>
   1b3e0:	mov	r1, r5
   1b3e4:	mov	r0, #10
   1b3e8:	bl	10f48 <fputc_unlocked@plt>
   1b3ec:	mov	r2, #5
   1b3f0:	ldr	r1, [pc, #820]	; 1b72c <__assert_fail@plt+0xa580>
   1b3f4:	mov	r0, #0
   1b3f8:	bl	10f54 <dcgettext@plt>
   1b3fc:	mov	r1, #1
   1b400:	ldr	r3, [pc, #808]	; 1b730 <__assert_fail@plt+0xa584>
   1b404:	mov	r2, r0
   1b408:	mov	r0, r5
   1b40c:	bl	110b0 <__fprintf_chk@plt>
   1b410:	mov	r1, r5
   1b414:	mov	r0, #10
   1b418:	bl	10f48 <fputc_unlocked@plt>
   1b41c:	cmp	r4, #9
   1b420:	ldrls	pc, [pc, r4, lsl #2]
   1b424:	b	1b6c8 <__assert_fail@plt+0xa51c>
   1b428:	andeq	fp, r1, ip, lsr #9
   1b42c:			; <UNDEFINED> instruction: 0x0001b4b4
   1b430:	andeq	fp, r1, r0, ror #9
   1b434:	andeq	fp, r1, r4, lsl r5
   1b438:	andeq	fp, r1, ip, asr #10
   1b43c:	andeq	fp, r1, r8, lsl #11
   1b440:	andeq	fp, r1, r4, asr #11
   1b444:	andeq	fp, r1, r8, lsl #12
   1b448:	andeq	fp, r1, r4, asr r6
   1b44c:	andeq	fp, r1, r0, asr r4
   1b450:	ldr	r1, [pc, #732]	; 1b734 <__assert_fail@plt+0xa588>
   1b454:	mov	r2, #5
   1b458:	mov	r0, #0
   1b45c:	bl	10f54 <dcgettext@plt>
   1b460:	ldr	ip, [sp, #64]	; 0x40
   1b464:	ldr	r1, [sp, #60]	; 0x3c
   1b468:	ldr	r2, [sp, #56]	; 0x38
   1b46c:	ldr	lr, [sp, #48]	; 0x30
   1b470:	str	ip, [sp, #28]
   1b474:	str	r1, [sp, #24]
   1b478:	ldr	ip, [sp, #44]	; 0x2c
   1b47c:	ldr	r1, [sp, #40]	; 0x28
   1b480:	ldr	r4, [sp, #52]	; 0x34
   1b484:	str	r2, [sp, #20]
   1b488:	ldr	r2, [sp, #36]	; 0x24
   1b48c:	stmib	sp, {r1, ip, lr}
   1b490:	mov	r1, #1
   1b494:	str	r2, [sp]
   1b498:	ldr	r3, [sp, #32]
   1b49c:	str	r4, [sp, #16]
   1b4a0:	mov	r2, r0
   1b4a4:	mov	r0, r5
   1b4a8:	bl	110b0 <__fprintf_chk@plt>
   1b4ac:	add	sp, sp, #76	; 0x4c
   1b4b0:	pop	{r4, r5, pc}
   1b4b4:	mov	r2, #5
   1b4b8:	ldr	r1, [pc, #632]	; 1b738 <__assert_fail@plt+0xa58c>
   1b4bc:	mov	r0, #0
   1b4c0:	bl	10f54 <dcgettext@plt>
   1b4c4:	ldr	r3, [sp, #32]
   1b4c8:	mov	r1, #1
   1b4cc:	mov	r2, r0
   1b4d0:	mov	r0, r5
   1b4d4:	add	sp, sp, #76	; 0x4c
   1b4d8:	pop	{r4, r5, lr}
   1b4dc:	b	110b0 <__fprintf_chk@plt>
   1b4e0:	mov	r2, #5
   1b4e4:	ldr	r1, [pc, #592]	; 1b73c <__assert_fail@plt+0xa590>
   1b4e8:	mov	r0, #0
   1b4ec:	bl	10f54 <dcgettext@plt>
   1b4f0:	ldr	r2, [sp, #36]	; 0x24
   1b4f4:	ldr	r3, [sp, #32]
   1b4f8:	str	r2, [sp, #88]	; 0x58
   1b4fc:	mov	r1, #1
   1b500:	mov	r2, r0
   1b504:	mov	r0, r5
   1b508:	add	sp, sp, #76	; 0x4c
   1b50c:	pop	{r4, r5, lr}
   1b510:	b	110b0 <__fprintf_chk@plt>
   1b514:	mov	r2, #5
   1b518:	ldr	r1, [pc, #544]	; 1b740 <__assert_fail@plt+0xa594>
   1b51c:	mov	r0, #0
   1b520:	bl	10f54 <dcgettext@plt>
   1b524:	ldr	r1, [sp, #40]	; 0x28
   1b528:	ldr	r2, [sp, #36]	; 0x24
   1b52c:	str	r1, [sp, #4]
   1b530:	str	r2, [sp]
   1b534:	ldr	r3, [sp, #32]
   1b538:	mov	r1, #1
   1b53c:	mov	r2, r0
   1b540:	mov	r0, r5
   1b544:	bl	110b0 <__fprintf_chk@plt>
   1b548:	b	1b4ac <__assert_fail@plt+0xa300>
   1b54c:	mov	r2, #5
   1b550:	ldr	r1, [pc, #492]	; 1b744 <__assert_fail@plt+0xa598>
   1b554:	mov	r0, #0
   1b558:	bl	10f54 <dcgettext@plt>
   1b55c:	ldr	r1, [sp, #40]	; 0x28
   1b560:	ldr	ip, [sp, #44]	; 0x2c
   1b564:	ldr	r2, [sp, #36]	; 0x24
   1b568:	ldr	r3, [sp, #32]
   1b56c:	stmib	sp, {r1, ip}
   1b570:	str	r2, [sp]
   1b574:	mov	r1, #1
   1b578:	mov	r2, r0
   1b57c:	mov	r0, r5
   1b580:	bl	110b0 <__fprintf_chk@plt>
   1b584:	b	1b4ac <__assert_fail@plt+0xa300>
   1b588:	mov	r2, #5
   1b58c:	ldr	r1, [pc, #436]	; 1b748 <__assert_fail@plt+0xa59c>
   1b590:	mov	r0, #0
   1b594:	bl	10f54 <dcgettext@plt>
   1b598:	add	r1, sp, #40	; 0x28
   1b59c:	ldr	r2, [sp, #36]	; 0x24
   1b5a0:	ldm	r1, {r1, ip, lr}
   1b5a4:	ldr	r3, [sp, #32]
   1b5a8:	str	r2, [sp]
   1b5ac:	stmib	sp, {r1, ip, lr}
   1b5b0:	mov	r1, #1
   1b5b4:	mov	r2, r0
   1b5b8:	mov	r0, r5
   1b5bc:	bl	110b0 <__fprintf_chk@plt>
   1b5c0:	b	1b4ac <__assert_fail@plt+0xa300>
   1b5c4:	mov	r2, #5
   1b5c8:	ldr	r1, [pc, #380]	; 1b74c <__assert_fail@plt+0xa5a0>
   1b5cc:	mov	r0, #0
   1b5d0:	bl	10f54 <dcgettext@plt>
   1b5d4:	add	r1, sp, #40	; 0x28
   1b5d8:	ldr	r2, [sp, #36]	; 0x24
   1b5dc:	ldm	r1, {r1, ip, lr}
   1b5e0:	ldr	r4, [sp, #52]	; 0x34
   1b5e4:	str	r2, [sp]
   1b5e8:	stmib	sp, {r1, ip, lr}
   1b5ec:	mov	r1, #1
   1b5f0:	ldr	r3, [sp, #32]
   1b5f4:	str	r4, [sp, #16]
   1b5f8:	mov	r2, r0
   1b5fc:	mov	r0, r5
   1b600:	bl	110b0 <__fprintf_chk@plt>
   1b604:	b	1b4ac <__assert_fail@plt+0xa300>
   1b608:	mov	r2, #5
   1b60c:	ldr	r1, [pc, #316]	; 1b750 <__assert_fail@plt+0xa5a4>
   1b610:	mov	r0, #0
   1b614:	bl	10f54 <dcgettext@plt>
   1b618:	add	r1, sp, #40	; 0x28
   1b61c:	ldr	r2, [sp, #56]	; 0x38
   1b620:	ldm	r1, {r1, ip, lr}
   1b624:	ldr	r4, [sp, #52]	; 0x34
   1b628:	str	r2, [sp, #20]
   1b62c:	ldr	r2, [sp, #36]	; 0x24
   1b630:	stmib	sp, {r1, ip, lr}
   1b634:	mov	r1, #1
   1b638:	str	r2, [sp]
   1b63c:	ldr	r3, [sp, #32]
   1b640:	str	r4, [sp, #16]
   1b644:	mov	r2, r0
   1b648:	mov	r0, r5
   1b64c:	bl	110b0 <__fprintf_chk@plt>
   1b650:	b	1b4ac <__assert_fail@plt+0xa300>
   1b654:	mov	r2, #5
   1b658:	ldr	r1, [pc, #244]	; 1b754 <__assert_fail@plt+0xa5a8>
   1b65c:	mov	r0, #0
   1b660:	bl	10f54 <dcgettext@plt>
   1b664:	ldr	r1, [sp, #60]	; 0x3c
   1b668:	ldr	r2, [sp, #56]	; 0x38
   1b66c:	ldr	lr, [sp, #48]	; 0x30
   1b670:	ldr	ip, [sp, #44]	; 0x2c
   1b674:	str	r1, [sp, #24]
   1b678:	ldr	r1, [sp, #40]	; 0x28
   1b67c:	ldr	r4, [sp, #52]	; 0x34
   1b680:	str	r2, [sp, #20]
   1b684:	ldr	r2, [sp, #36]	; 0x24
   1b688:	stmib	sp, {r1, ip, lr}
   1b68c:	mov	r1, #1
   1b690:	str	r2, [sp]
   1b694:	ldr	r3, [sp, #32]
   1b698:	str	r4, [sp, #16]
   1b69c:	mov	r2, r0
   1b6a0:	mov	r0, r5
   1b6a4:	bl	110b0 <__fprintf_chk@plt>
   1b6a8:	b	1b4ac <__assert_fail@plt+0xa300>
   1b6ac:	str	r3, [sp]
   1b6b0:	mov	r1, #1
   1b6b4:	mov	r3, r2
   1b6b8:	mov	r0, r5
   1b6bc:	ldr	r2, [pc, #148]	; 1b758 <__assert_fail@plt+0xa5ac>
   1b6c0:	bl	110b0 <__fprintf_chk@plt>
   1b6c4:	b	1b3b4 <__assert_fail@plt+0xa208>
   1b6c8:	mov	r2, #5
   1b6cc:	ldr	r1, [pc, #136]	; 1b75c <__assert_fail@plt+0xa5b0>
   1b6d0:	b	1b458 <__assert_fail@plt+0xa2ac>
   1b6d4:	mov	r4, r0
   1b6d8:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b6dc:	mov	r4, #1
   1b6e0:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b6e4:	mov	r4, #2
   1b6e8:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b6ec:	mov	r4, #3
   1b6f0:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b6f4:	mov	r4, #4
   1b6f8:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b6fc:	mov	r4, #5
   1b700:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b704:	mov	r4, #6
   1b708:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b70c:	mov	r4, #7
   1b710:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b714:	mov	r4, #8
   1b718:	b	1b394 <__assert_fail@plt+0xa1e8>
   1b71c:	andeq	sp, r1, r8, lsr fp
   1b720:	andeq	sp, r1, ip, asr #22
   1b724:	andeq	r0, r0, r6, ror #15
   1b728:	andeq	sp, r1, r4, lsr #28
   1b72c:	andeq	sp, r1, r0, asr fp
   1b730:	strdeq	sp, [r1], -ip
   1b734:	andeq	sp, r1, ip, lsr #26
   1b738:	andeq	sp, r1, r0, lsr #24
   1b73c:	andeq	sp, r1, r0, lsr ip
   1b740:	andeq	sp, r1, r8, asr #24
   1b744:	andeq	sp, r1, r4, ror #24
   1b748:	andeq	sp, r1, r4, lsl #25
   1b74c:	andeq	sp, r1, r8, lsr #25
   1b750:	ldrdeq	sp, [r1], -r0
   1b754:	strdeq	sp, [r1], -ip
   1b758:	andeq	sp, r1, r4, asr #22
   1b75c:	andeq	sp, r1, r0, ror #26
   1b760:	push	{r3}		; (str r3, [sp, #-4]!)
   1b764:	push	{lr}		; (str lr, [sp, #-4]!)
   1b768:	sub	sp, sp, #56	; 0x38
   1b76c:	add	r3, sp, #64	; 0x40
   1b770:	ldr	ip, [sp, #64]	; 0x40
   1b774:	str	r3, [sp, #12]
   1b778:	cmp	ip, #0
   1b77c:	str	ip, [sp, #16]
   1b780:	beq	1b818 <__assert_fail@plt+0xa66c>
   1b784:	ldr	ip, [sp, #68]	; 0x44
   1b788:	cmp	ip, #0
   1b78c:	str	ip, [sp, #20]
   1b790:	beq	1b838 <__assert_fail@plt+0xa68c>
   1b794:	ldr	ip, [sp, #72]	; 0x48
   1b798:	cmp	ip, #0
   1b79c:	str	ip, [sp, #24]
   1b7a0:	beq	1b840 <__assert_fail@plt+0xa694>
   1b7a4:	ldr	ip, [sp, #76]	; 0x4c
   1b7a8:	cmp	ip, #0
   1b7ac:	str	ip, [sp, #28]
   1b7b0:	beq	1b848 <__assert_fail@plt+0xa69c>
   1b7b4:	ldr	ip, [sp, #80]	; 0x50
   1b7b8:	cmp	ip, #0
   1b7bc:	str	ip, [sp, #32]
   1b7c0:	beq	1b850 <__assert_fail@plt+0xa6a4>
   1b7c4:	ldr	ip, [sp, #84]	; 0x54
   1b7c8:	cmp	ip, #0
   1b7cc:	str	ip, [sp, #36]	; 0x24
   1b7d0:	beq	1b858 <__assert_fail@plt+0xa6ac>
   1b7d4:	ldr	ip, [sp, #88]	; 0x58
   1b7d8:	cmp	ip, #0
   1b7dc:	str	ip, [sp, #40]	; 0x28
   1b7e0:	beq	1b860 <__assert_fail@plt+0xa6b4>
   1b7e4:	ldr	ip, [sp, #92]	; 0x5c
   1b7e8:	cmp	ip, #0
   1b7ec:	str	ip, [sp, #44]	; 0x2c
   1b7f0:	beq	1b868 <__assert_fail@plt+0xa6bc>
   1b7f4:	ldr	ip, [sp, #96]	; 0x60
   1b7f8:	cmp	ip, #0
   1b7fc:	str	ip, [sp, #48]	; 0x30
   1b800:	beq	1b870 <__assert_fail@plt+0xa6c4>
   1b804:	ldr	ip, [sp, #100]	; 0x64
   1b808:	cmp	ip, #0
   1b80c:	str	ip, [sp, #52]	; 0x34
   1b810:	movne	ip, #10
   1b814:	moveq	ip, #9
   1b818:	add	r3, sp, #16
   1b81c:	stm	sp, {r3, ip}
   1b820:	ldr	r3, [sp, #60]	; 0x3c
   1b824:	bl	1af0c <__assert_fail@plt+0x9d60>
   1b828:	add	sp, sp, #56	; 0x38
   1b82c:	pop	{lr}		; (ldr lr, [sp], #4)
   1b830:	add	sp, sp, #4
   1b834:	bx	lr
   1b838:	mov	ip, #1
   1b83c:	b	1b818 <__assert_fail@plt+0xa66c>
   1b840:	mov	ip, #2
   1b844:	b	1b818 <__assert_fail@plt+0xa66c>
   1b848:	mov	ip, #3
   1b84c:	b	1b818 <__assert_fail@plt+0xa66c>
   1b850:	mov	ip, #4
   1b854:	b	1b818 <__assert_fail@plt+0xa66c>
   1b858:	mov	ip, #5
   1b85c:	b	1b818 <__assert_fail@plt+0xa66c>
   1b860:	mov	ip, #6
   1b864:	b	1b818 <__assert_fail@plt+0xa66c>
   1b868:	mov	ip, #7
   1b86c:	b	1b818 <__assert_fail@plt+0xa66c>
   1b870:	mov	ip, #8
   1b874:	b	1b818 <__assert_fail@plt+0xa66c>
   1b878:	ldr	r3, [pc, #116]	; 1b8f4 <__assert_fail@plt+0xa748>
   1b87c:	push	{r4, lr}
   1b880:	mov	r0, #10
   1b884:	ldr	r1, [r3]
   1b888:	bl	10f48 <fputc_unlocked@plt>
   1b88c:	mov	r2, #5
   1b890:	ldr	r1, [pc, #96]	; 1b8f8 <__assert_fail@plt+0xa74c>
   1b894:	mov	r0, #0
   1b898:	bl	10f54 <dcgettext@plt>
   1b89c:	ldr	r2, [pc, #88]	; 1b8fc <__assert_fail@plt+0xa750>
   1b8a0:	mov	r1, r0
   1b8a4:	mov	r0, #1
   1b8a8:	bl	11098 <__printf_chk@plt>
   1b8ac:	mov	r2, #5
   1b8b0:	ldr	r1, [pc, #72]	; 1b900 <__assert_fail@plt+0xa754>
   1b8b4:	mov	r0, #0
   1b8b8:	bl	10f54 <dcgettext@plt>
   1b8bc:	ldr	r3, [pc, #64]	; 1b904 <__assert_fail@plt+0xa758>
   1b8c0:	ldr	r2, [pc, #64]	; 1b908 <__assert_fail@plt+0xa75c>
   1b8c4:	mov	r1, r0
   1b8c8:	mov	r0, #1
   1b8cc:	bl	11098 <__printf_chk@plt>
   1b8d0:	mov	r2, #5
   1b8d4:	ldr	r1, [pc, #48]	; 1b90c <__assert_fail@plt+0xa760>
   1b8d8:	mov	r0, #0
   1b8dc:	bl	10f54 <dcgettext@plt>
   1b8e0:	ldr	r2, [pc, #40]	; 1b910 <__assert_fail@plt+0xa764>
   1b8e4:	pop	{r4, lr}
   1b8e8:	mov	r1, r0
   1b8ec:	mov	r0, #1
   1b8f0:	b	11098 <__printf_chk@plt>
   1b8f4:	andeq	lr, r2, ip, ror r1
   1b8f8:	muleq	r1, ip, sp
   1b8fc:			; <UNDEFINED> instruction: 0x0001ddb0
   1b900:	andeq	sp, r1, r8, asr #27
   1b904:	andeq	sp, r1, r8, asr r3
   1b908:	andeq	sp, r1, r0, lsl #7
   1b90c:	ldrdeq	sp, [r1], -ip
   1b910:	andeq	sp, r1, r4, lsl #28
   1b914:	push	{r4, r5, r6, lr}
   1b918:	mov	r6, r0
   1b91c:	mov	r5, r1
   1b920:	mov	r4, r2
   1b924:	bl	1c718 <__assert_fail@plt+0xb56c>
   1b928:	cmp	r0, #0
   1b92c:	popne	{r4, r5, r6, pc}
   1b930:	cmp	r6, #0
   1b934:	beq	1b944 <__assert_fail@plt+0xa798>
   1b938:	cmp	r5, #0
   1b93c:	cmpne	r4, #0
   1b940:	popeq	{r4, r5, r6, pc}
   1b944:	bl	1bf90 <__assert_fail@plt+0xade4>
   1b948:	push	{r4, lr}
   1b94c:	bl	1c098 <__assert_fail@plt+0xaeec>
   1b950:	cmp	r0, #0
   1b954:	popne	{r4, pc}
   1b958:	bl	1bf90 <__assert_fail@plt+0xade4>
   1b95c:	push	{r4, lr}
   1b960:	bl	1c098 <__assert_fail@plt+0xaeec>
   1b964:	cmp	r0, #0
   1b968:	popne	{r4, pc}
   1b96c:	bl	1bf90 <__assert_fail@plt+0xade4>
   1b970:	push	{r4, lr}
   1b974:	bl	1c098 <__assert_fail@plt+0xaeec>
   1b978:	cmp	r0, #0
   1b97c:	popne	{r4, pc}
   1b980:	bl	1bf90 <__assert_fail@plt+0xade4>
   1b984:	push	{r4, r5, r6, lr}
   1b988:	mov	r5, r0
   1b98c:	mov	r4, r1
   1b990:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   1b994:	cmp	r0, #0
   1b998:	popne	{r4, r5, r6, pc}
   1b99c:	adds	r4, r4, #0
   1b9a0:	movne	r4, #1
   1b9a4:	cmp	r5, #0
   1b9a8:	orreq	r4, r4, #1
   1b9ac:	cmp	r4, #0
   1b9b0:	popeq	{r4, r5, r6, pc}
   1b9b4:	bl	1bf90 <__assert_fail@plt+0xade4>
   1b9b8:	push	{r4, lr}
   1b9bc:	cmp	r1, #0
   1b9c0:	orreq	r1, r1, #1
   1b9c4:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   1b9c8:	cmp	r0, #0
   1b9cc:	popne	{r4, pc}
   1b9d0:	bl	1bf90 <__assert_fail@plt+0xade4>
   1b9d4:	push	{r4, r5, r6, lr}
   1b9d8:	mov	r6, r0
   1b9dc:	mov	r5, r1
   1b9e0:	mov	r4, r2
   1b9e4:	bl	1c718 <__assert_fail@plt+0xb56c>
   1b9e8:	cmp	r0, #0
   1b9ec:	popne	{r4, r5, r6, pc}
   1b9f0:	cmp	r6, #0
   1b9f4:	beq	1ba04 <__assert_fail@plt+0xa858>
   1b9f8:	cmp	r5, #0
   1b9fc:	cmpne	r4, #0
   1ba00:	popeq	{r4, r5, r6, pc}
   1ba04:	bl	1bf90 <__assert_fail@plt+0xade4>
   1ba08:	cmp	r2, #0
   1ba0c:	cmpne	r1, #0
   1ba10:	moveq	r2, #1
   1ba14:	moveq	r1, r2
   1ba18:	push	{r4, lr}
   1ba1c:	bl	1c718 <__assert_fail@plt+0xb56c>
   1ba20:	cmp	r0, #0
   1ba24:	popne	{r4, pc}
   1ba28:	bl	1bf90 <__assert_fail@plt+0xade4>
   1ba2c:	push	{r4, lr}
   1ba30:	mov	r2, r1
   1ba34:	mov	r1, r0
   1ba38:	mov	r0, #0
   1ba3c:	bl	1c718 <__assert_fail@plt+0xb56c>
   1ba40:	cmp	r0, #0
   1ba44:	popne	{r4, pc}
   1ba48:	bl	1bf90 <__assert_fail@plt+0xade4>
   1ba4c:	cmp	r1, #0
   1ba50:	cmpne	r0, #0
   1ba54:	moveq	r2, #1
   1ba58:	movne	r2, r1
   1ba5c:	moveq	r1, r2
   1ba60:	movne	r1, r0
   1ba64:	push	{r4, lr}
   1ba68:	mov	r0, #0
   1ba6c:	bl	1c718 <__assert_fail@plt+0xb56c>
   1ba70:	cmp	r0, #0
   1ba74:	popne	{r4, pc}
   1ba78:	bl	1bf90 <__assert_fail@plt+0xade4>
   1ba7c:	cmp	r0, #0
   1ba80:	push	{r4, r5, r6, lr}
   1ba84:	mov	r5, r1
   1ba88:	ldr	r4, [r1]
   1ba8c:	beq	1bac8 <__assert_fail@plt+0xa91c>
   1ba90:	lsr	r2, r4, #1
   1ba94:	add	r3, r2, #1
   1ba98:	mvn	r3, r3
   1ba9c:	cmp	r4, r3
   1baa0:	bhi	1bae4 <__assert_fail@plt+0xa938>
   1baa4:	add	r4, r4, #1
   1baa8:	add	r4, r4, r2
   1baac:	mov	r1, r4
   1bab0:	mov	r2, #1
   1bab4:	bl	1c718 <__assert_fail@plt+0xb56c>
   1bab8:	cmp	r0, #0
   1babc:	beq	1bae8 <__assert_fail@plt+0xa93c>
   1bac0:	str	r4, [r5]
   1bac4:	pop	{r4, r5, r6, pc}
   1bac8:	cmp	r4, #0
   1bacc:	moveq	r4, #64	; 0x40
   1bad0:	mov	r1, r4
   1bad4:	mov	r2, #1
   1bad8:	bl	1c718 <__assert_fail@plt+0xb56c>
   1badc:	cmp	r0, #0
   1bae0:	bne	1bac0 <__assert_fail@plt+0xa914>
   1bae4:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bae8:	cmp	r4, #0
   1baec:	bne	1bae4 <__assert_fail@plt+0xa938>
   1baf0:	str	r4, [r5]
   1baf4:	pop	{r4, r5, r6, pc}
   1baf8:	cmp	r0, #0
   1bafc:	push	{r4, r5, r6, lr}
   1bb00:	mov	r5, r1
   1bb04:	ldr	r4, [r1]
   1bb08:	mov	r6, r2
   1bb0c:	beq	1bb50 <__assert_fail@plt+0xa9a4>
   1bb10:	lsr	r1, r4, #1
   1bb14:	add	r3, r1, #1
   1bb18:	mvn	r3, r3
   1bb1c:	cmp	r4, r3
   1bb20:	bhi	1bb88 <__assert_fail@plt+0xa9dc>
   1bb24:	add	r4, r4, #1
   1bb28:	add	r4, r4, r1
   1bb2c:	mov	r1, r4
   1bb30:	bl	1c718 <__assert_fail@plt+0xb56c>
   1bb34:	cmp	r0, #0
   1bb38:	bne	1bb48 <__assert_fail@plt+0xa99c>
   1bb3c:	cmp	r4, #0
   1bb40:	cmpne	r6, #0
   1bb44:	bne	1bb88 <__assert_fail@plt+0xa9dc>
   1bb48:	str	r4, [r5]
   1bb4c:	pop	{r4, r5, r6, pc}
   1bb50:	cmp	r4, #0
   1bb54:	bne	1bb70 <__assert_fail@plt+0xa9c4>
   1bb58:	mov	r1, r2
   1bb5c:	mov	r0, #64	; 0x40
   1bb60:	bl	1c864 <__assert_fail@plt+0xb6b8>
   1bb64:	cmp	r0, #0
   1bb68:	movne	r4, r0
   1bb6c:	addeq	r4, r0, #1
   1bb70:	mov	r2, r6
   1bb74:	mov	r1, r4
   1bb78:	mov	r0, #0
   1bb7c:	bl	1c718 <__assert_fail@plt+0xb56c>
   1bb80:	cmp	r0, #0
   1bb84:	bne	1bb48 <__assert_fail@plt+0xa99c>
   1bb88:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bb8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb90:	sub	sp, sp, #12
   1bb94:	ldr	r6, [r1]
   1bb98:	mov	r8, r1
   1bb9c:	mov	r9, r0
   1bba0:	asrs	r4, r6, #1
   1bba4:	mov	sl, r2
   1bba8:	mov	fp, r3
   1bbac:	ldr	r7, [sp, #48]	; 0x30
   1bbb0:	bmi	1bd2c <__assert_fail@plt+0xab80>
   1bbb4:	mvn	r1, #-2147483648	; 0x80000000
   1bbb8:	sub	r1, r1, r4
   1bbbc:	cmp	r6, r1
   1bbc0:	movle	r1, #0
   1bbc4:	movgt	r1, #1
   1bbc8:	mvn	r3, fp
   1bbcc:	cmp	r1, #0
   1bbd0:	addeq	r4, r4, r6
   1bbd4:	mvnne	r4, #-2147483648	; 0x80000000
   1bbd8:	lsr	r3, r3, #31
   1bbdc:	cmp	fp, r4
   1bbe0:	movge	r2, #0
   1bbe4:	andlt	r2, r3, #1
   1bbe8:	cmp	r2, #0
   1bbec:	beq	1bcdc <__assert_fail@plt+0xab30>
   1bbf0:	cmp	r7, #0
   1bbf4:	blt	1bdc4 <__assert_fail@plt+0xac18>
   1bbf8:	bne	1bdbc <__assert_fail@plt+0xac10>
   1bbfc:	mov	r5, #64	; 0x40
   1bc00:	mov	r1, r7
   1bc04:	mov	r0, r5
   1bc08:	str	r3, [sp, #4]
   1bc0c:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1bc10:	mov	r1, r7
   1bc14:	mov	r4, r0
   1bc18:	mov	r0, r5
   1bc1c:	bl	1cc90 <__assert_fail@plt+0xbae4>
   1bc20:	ldr	r3, [sp, #4]
   1bc24:	sub	r5, r5, r1
   1bc28:	cmp	r9, #0
   1bc2c:	sub	r2, r4, r6
   1bc30:	streq	r9, [r8]
   1bc34:	cmp	r2, sl
   1bc38:	bge	1bcbc <__assert_fail@plt+0xab10>
   1bc3c:	cmp	sl, #0
   1bc40:	blt	1bd5c <__assert_fail@plt+0xabb0>
   1bc44:	cmp	r6, #0
   1bc48:	blt	1bc68 <__assert_fail@plt+0xaabc>
   1bc4c:	mvn	r2, #-2147483648	; 0x80000000
   1bc50:	sub	r2, r2, sl
   1bc54:	cmp	r6, r2
   1bc58:	movle	r2, #0
   1bc5c:	movgt	r2, #1
   1bc60:	cmp	r2, #0
   1bc64:	bne	1bd58 <__assert_fail@plt+0xabac>
   1bc68:	add	r6, r6, sl
   1bc6c:	cmp	fp, r6
   1bc70:	movge	r3, #0
   1bc74:	andlt	r3, r3, #1
   1bc78:	cmp	r3, #0
   1bc7c:	mov	r4, r6
   1bc80:	bne	1bd58 <__assert_fail@plt+0xabac>
   1bc84:	cmp	r7, #0
   1bc88:	blt	1bd70 <__assert_fail@plt+0xabc4>
   1bc8c:	beq	1bcb8 <__assert_fail@plt+0xab0c>
   1bc90:	cmp	r6, #0
   1bc94:	blt	1be14 <__assert_fail@plt+0xac68>
   1bc98:	mov	r1, r7
   1bc9c:	mvn	r0, #-2147483648	; 0x80000000
   1bca0:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1bca4:	cmp	r6, r0
   1bca8:	movle	r0, #0
   1bcac:	movgt	r0, #1
   1bcb0:	cmp	r0, #0
   1bcb4:	bne	1bd58 <__assert_fail@plt+0xabac>
   1bcb8:	mul	r5, r6, r7
   1bcbc:	mov	r1, r5
   1bcc0:	mov	r0, r9
   1bcc4:	bl	1c0c4 <__assert_fail@plt+0xaf18>
   1bcc8:	cmp	r0, #0
   1bccc:	beq	1bd40 <__assert_fail@plt+0xab94>
   1bcd0:	str	r4, [r8]
   1bcd4:	add	sp, sp, #12
   1bcd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bcdc:	cmp	r7, #0
   1bce0:	blt	1bd9c <__assert_fail@plt+0xabf0>
   1bce4:	beq	1bbfc <__assert_fail@plt+0xaa50>
   1bce8:	cmp	r4, #0
   1bcec:	blt	1bdcc <__assert_fail@plt+0xac20>
   1bcf0:	mov	r1, r7
   1bcf4:	mvn	r0, #-2147483648	; 0x80000000
   1bcf8:	str	r3, [sp, #4]
   1bcfc:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1bd00:	ldr	r3, [sp, #4]
   1bd04:	cmp	r0, r4
   1bd08:	movge	r0, #0
   1bd0c:	movlt	r0, #1
   1bd10:	cmp	r0, #0
   1bd14:	mvnne	r5, #-2147483648	; 0x80000000
   1bd18:	bne	1bc00 <__assert_fail@plt+0xaa54>
   1bd1c:	mul	r5, r7, r4
   1bd20:	cmp	r5, #63	; 0x3f
   1bd24:	bgt	1bc28 <__assert_fail@plt+0xaa7c>
   1bd28:	b	1bbfc <__assert_fail@plt+0xaa50>
   1bd2c:	rsb	r1, r4, #-2147483648	; 0x80000000
   1bd30:	cmp	r6, r1
   1bd34:	movge	r1, #0
   1bd38:	movlt	r1, #1
   1bd3c:	b	1bbc8 <__assert_fail@plt+0xaa1c>
   1bd40:	adds	r5, r5, #0
   1bd44:	movne	r5, #1
   1bd48:	cmp	r9, #0
   1bd4c:	orreq	r5, r5, #1
   1bd50:	cmp	r5, #0
   1bd54:	beq	1bcd0 <__assert_fail@plt+0xab24>
   1bd58:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bd5c:	rsb	r2, sl, #-2147483648	; 0x80000000
   1bd60:	cmp	r6, r2
   1bd64:	movge	r2, #0
   1bd68:	movlt	r2, #1
   1bd6c:	b	1bc60 <__assert_fail@plt+0xaab4>
   1bd70:	cmp	r6, #0
   1bd74:	blt	1bdf8 <__assert_fail@plt+0xac4c>
   1bd78:	cmn	r7, #1
   1bd7c:	beq	1bcb8 <__assert_fail@plt+0xab0c>
   1bd80:	mov	r1, r7
   1bd84:	mov	r0, #-2147483648	; 0x80000000
   1bd88:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1bd8c:	cmp	r6, r0
   1bd90:	movle	r0, #0
   1bd94:	movgt	r0, #1
   1bd98:	b	1bcb0 <__assert_fail@plt+0xab04>
   1bd9c:	cmp	r4, #0
   1bda0:	blt	1be38 <__assert_fail@plt+0xac8c>
   1bda4:	cmn	r7, #1
   1bda8:	beq	1bd1c <__assert_fail@plt+0xab70>
   1bdac:	str	r3, [sp, #4]
   1bdb0:	mov	r1, r7
   1bdb4:	mov	r0, #-2147483648	; 0x80000000
   1bdb8:	b	1bcfc <__assert_fail@plt+0xab50>
   1bdbc:	mov	r4, fp
   1bdc0:	b	1bcf0 <__assert_fail@plt+0xab44>
   1bdc4:	mov	r4, fp
   1bdc8:	b	1bda4 <__assert_fail@plt+0xabf8>
   1bdcc:	cmn	r4, #1
   1bdd0:	beq	1bd1c <__assert_fail@plt+0xab70>
   1bdd4:	mov	r1, r4
   1bdd8:	mov	r0, #-2147483648	; 0x80000000
   1bddc:	str	r3, [sp, #4]
   1bde0:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1bde4:	ldr	r3, [sp, #4]
   1bde8:	cmp	r7, r0
   1bdec:	movle	r0, #0
   1bdf0:	movgt	r0, #1
   1bdf4:	b	1bd10 <__assert_fail@plt+0xab64>
   1bdf8:	mov	r1, r7
   1bdfc:	mvn	r0, #-2147483648	; 0x80000000
   1be00:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1be04:	cmp	r6, r0
   1be08:	movge	r0, #0
   1be0c:	movlt	r0, #1
   1be10:	b	1bcb0 <__assert_fail@plt+0xab04>
   1be14:	cmn	r6, #1
   1be18:	beq	1bcb8 <__assert_fail@plt+0xab0c>
   1be1c:	mov	r1, r6
   1be20:	mov	r0, #-2147483648	; 0x80000000
   1be24:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1be28:	cmp	r7, r0
   1be2c:	movle	r0, #0
   1be30:	movgt	r0, #1
   1be34:	b	1bcb0 <__assert_fail@plt+0xab04>
   1be38:	mov	r1, r7
   1be3c:	mvn	r0, #-2147483648	; 0x80000000
   1be40:	str	r3, [sp, #4]
   1be44:	bl	1ca70 <__assert_fail@plt+0xb8c4>
   1be48:	ldr	r3, [sp, #4]
   1be4c:	cmp	r0, r4
   1be50:	movle	r0, #0
   1be54:	movgt	r0, #1
   1be58:	b	1bd10 <__assert_fail@plt+0xab64>
   1be5c:	push	{r4, lr}
   1be60:	mov	r1, #1
   1be64:	bl	1c050 <__assert_fail@plt+0xaea4>
   1be68:	cmp	r0, #0
   1be6c:	popne	{r4, pc}
   1be70:	bl	1bf90 <__assert_fail@plt+0xade4>
   1be74:	push	{r4, lr}
   1be78:	mov	r1, #1
   1be7c:	bl	1c050 <__assert_fail@plt+0xaea4>
   1be80:	cmp	r0, #0
   1be84:	popne	{r4, pc}
   1be88:	bl	1bf90 <__assert_fail@plt+0xade4>
   1be8c:	push	{r4, lr}
   1be90:	bl	1c050 <__assert_fail@plt+0xaea4>
   1be94:	cmp	r0, #0
   1be98:	popne	{r4, pc}
   1be9c:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bea0:	push	{r4, lr}
   1bea4:	bl	1c050 <__assert_fail@plt+0xaea4>
   1bea8:	cmp	r0, #0
   1beac:	popne	{r4, pc}
   1beb0:	bl	1bf90 <__assert_fail@plt+0xade4>
   1beb4:	push	{r4, r5, r6, lr}
   1beb8:	mov	r6, r0
   1bebc:	mov	r0, r1
   1bec0:	mov	r4, r1
   1bec4:	bl	1c098 <__assert_fail@plt+0xaeec>
   1bec8:	subs	r5, r0, #0
   1becc:	beq	1bee4 <__assert_fail@plt+0xad38>
   1bed0:	mov	r2, r4
   1bed4:	mov	r1, r6
   1bed8:	bl	10f24 <memcpy@plt>
   1bedc:	mov	r0, r5
   1bee0:	pop	{r4, r5, r6, pc}
   1bee4:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bee8:	push	{r4, r5, r6, lr}
   1beec:	mov	r6, r0
   1bef0:	mov	r0, r1
   1bef4:	mov	r4, r1
   1bef8:	bl	1c098 <__assert_fail@plt+0xaeec>
   1befc:	subs	r5, r0, #0
   1bf00:	beq	1bf18 <__assert_fail@plt+0xad6c>
   1bf04:	mov	r2, r4
   1bf08:	mov	r1, r6
   1bf0c:	bl	10f24 <memcpy@plt>
   1bf10:	mov	r0, r5
   1bf14:	pop	{r4, r5, r6, pc}
   1bf18:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bf1c:	push	{r4, r5, r6, lr}
   1bf20:	mov	r6, r0
   1bf24:	add	r0, r1, #1
   1bf28:	mov	r4, r1
   1bf2c:	bl	1c098 <__assert_fail@plt+0xaeec>
   1bf30:	subs	r5, r0, #0
   1bf34:	beq	1bf54 <__assert_fail@plt+0xada8>
   1bf38:	mov	r3, #0
   1bf3c:	mov	r1, r6
   1bf40:	strb	r3, [r5, r4]
   1bf44:	mov	r2, r4
   1bf48:	bl	10f24 <memcpy@plt>
   1bf4c:	mov	r0, r5
   1bf50:	pop	{r4, r5, r6, pc}
   1bf54:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bf58:	push	{r4, r5, r6, lr}
   1bf5c:	mov	r6, r0
   1bf60:	bl	11044 <strlen@plt>
   1bf64:	add	r4, r0, #1
   1bf68:	mov	r0, r4
   1bf6c:	bl	1c098 <__assert_fail@plt+0xaeec>
   1bf70:	subs	r5, r0, #0
   1bf74:	beq	1bf8c <__assert_fail@plt+0xade0>
   1bf78:	mov	r2, r4
   1bf7c:	mov	r1, r6
   1bf80:	bl	10f24 <memcpy@plt>
   1bf84:	mov	r0, r5
   1bf88:	pop	{r4, r5, r6, pc}
   1bf8c:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bf90:	ldr	r3, [pc, #44]	; 1bfc4 <__assert_fail@plt+0xae18>
   1bf94:	push	{r4, lr}
   1bf98:	mov	r2, #5
   1bf9c:	ldr	r1, [pc, #36]	; 1bfc8 <__assert_fail@plt+0xae1c>
   1bfa0:	mov	r0, #0
   1bfa4:	ldr	r4, [r3]
   1bfa8:	bl	10f54 <dcgettext@plt>
   1bfac:	ldr	r2, [pc, #24]	; 1bfcc <__assert_fail@plt+0xae20>
   1bfb0:	mov	r1, #0
   1bfb4:	mov	r3, r0
   1bfb8:	mov	r0, r4
   1bfbc:	bl	10fd8 <error@plt>
   1bfc0:	bl	1117c <abort@plt>
   1bfc4:	andeq	lr, r2, r0, lsr #2
   1bfc8:	andeq	sp, r1, r4, asr lr
   1bfcc:	andeq	sp, r1, r0, asr r9
   1bfd0:	push	{r4, lr}
   1bfd4:	orr	r1, r1, #512	; 0x200
   1bfd8:	bl	13be8 <__assert_fail@plt+0x2a3c>
   1bfdc:	cmp	r0, #0
   1bfe0:	popne	{r4, pc}
   1bfe4:	bl	11068 <__errno_location@plt>
   1bfe8:	ldr	r3, [r0]
   1bfec:	cmp	r3, #22
   1bff0:	beq	1bff8 <__assert_fail@plt+0xae4c>
   1bff4:	bl	1bf90 <__assert_fail@plt+0xade4>
   1bff8:	ldr	r3, [pc, #12]	; 1c00c <__assert_fail@plt+0xae60>
   1bffc:	mov	r2, #41	; 0x29
   1c000:	ldr	r1, [pc, #8]	; 1c010 <__assert_fail@plt+0xae64>
   1c004:	ldr	r0, [pc, #8]	; 1c014 <__assert_fail@plt+0xae68>
   1c008:	bl	111ac <__assert_fail@plt>
   1c00c:	andeq	sp, r1, r8, ror #28
   1c010:	andeq	sp, r1, r4, ror lr
   1c014:	andeq	sp, r1, r0, lsl #29
   1c018:	ldr	r3, [r0, #48]	; 0x30
   1c01c:	and	r3, r3, #17
   1c020:	cmp	r3, #16
   1c024:	beq	1c048 <__assert_fail@plt+0xae9c>
   1c028:	cmp	r3, #17
   1c02c:	beq	1c038 <__assert_fail@plt+0xae8c>
   1c030:	mov	r0, #0
   1c034:	bx	lr
   1c038:	ldr	r0, [r1, #48]	; 0x30
   1c03c:	adds	r0, r0, #0
   1c040:	movne	r0, #1
   1c044:	bx	lr
   1c048:	mov	r0, #1
   1c04c:	bx	lr
   1c050:	cmp	r1, #0
   1c054:	cmpne	r0, #0
   1c058:	moveq	r1, #1
   1c05c:	moveq	r0, r1
   1c060:	umull	r2, r3, r0, r1
   1c064:	adds	r3, r3, #0
   1c068:	movne	r3, #1
   1c06c:	cmp	r2, #0
   1c070:	blt	1c080 <__assert_fail@plt+0xaed4>
   1c074:	cmp	r3, #0
   1c078:	bne	1c080 <__assert_fail@plt+0xaed4>
   1c07c:	b	10ec4 <calloc@plt>
   1c080:	push	{r4, lr}
   1c084:	bl	11068 <__errno_location@plt>
   1c088:	mov	r3, #12
   1c08c:	str	r3, [r0]
   1c090:	mov	r0, #0
   1c094:	pop	{r4, pc}
   1c098:	cmp	r0, #0
   1c09c:	moveq	r0, #1
   1c0a0:	cmp	r0, #0
   1c0a4:	blt	1c0ac <__assert_fail@plt+0xaf00>
   1c0a8:	b	10ff0 <malloc@plt>
   1c0ac:	push	{r4, lr}
   1c0b0:	bl	11068 <__errno_location@plt>
   1c0b4:	mov	r3, #12
   1c0b8:	str	r3, [r0]
   1c0bc:	mov	r0, #0
   1c0c0:	pop	{r4, pc}
   1c0c4:	cmp	r0, #0
   1c0c8:	beq	1c0ec <__assert_fail@plt+0xaf40>
   1c0cc:	cmp	r1, #0
   1c0d0:	push	{lr}		; (str lr, [sp, #-4]!)
   1c0d4:	sub	sp, sp, #12
   1c0d8:	beq	1c0f4 <__assert_fail@plt+0xaf48>
   1c0dc:	blt	1c10c <__assert_fail@plt+0xaf60>
   1c0e0:	add	sp, sp, #12
   1c0e4:	pop	{lr}		; (ldr lr, [sp], #4)
   1c0e8:	b	10f60 <realloc@plt>
   1c0ec:	mov	r0, r1
   1c0f0:	b	1c098 <__assert_fail@plt+0xaeec>
   1c0f4:	str	r1, [sp, #4]
   1c0f8:	bl	1c598 <__assert_fail@plt+0xb3ec>
   1c0fc:	ldr	r3, [sp, #4]
   1c100:	mov	r0, r3
   1c104:	add	sp, sp, #12
   1c108:	pop	{pc}		; (ldr pc, [sp], #4)
   1c10c:	bl	11068 <__errno_location@plt>
   1c110:	mov	r2, #12
   1c114:	mov	r3, #0
   1c118:	str	r2, [r0]
   1c11c:	b	1c100 <__assert_fail@plt+0xaf54>
   1c120:	push	{r4, r5, r6, lr}
   1c124:	mov	r4, r0
   1c128:	bl	10fc0 <__fpending@plt>
   1c12c:	ldr	r5, [r4]
   1c130:	and	r5, r5, #32
   1c134:	mov	r6, r0
   1c138:	mov	r0, r4
   1c13c:	bl	1c28c <__assert_fail@plt+0xb0e0>
   1c140:	cmp	r5, #0
   1c144:	mov	r4, r0
   1c148:	bne	1c168 <__assert_fail@plt+0xafbc>
   1c14c:	cmp	r0, #0
   1c150:	beq	1c160 <__assert_fail@plt+0xafb4>
   1c154:	cmp	r6, #0
   1c158:	beq	1c184 <__assert_fail@plt+0xafd8>
   1c15c:	mvn	r4, #0
   1c160:	mov	r0, r4
   1c164:	pop	{r4, r5, r6, pc}
   1c168:	cmp	r0, #0
   1c16c:	bne	1c15c <__assert_fail@plt+0xafb0>
   1c170:	bl	11068 <__errno_location@plt>
   1c174:	str	r4, [r0]
   1c178:	mvn	r4, #0
   1c17c:	mov	r0, r4
   1c180:	pop	{r4, r5, r6, pc}
   1c184:	bl	11068 <__errno_location@plt>
   1c188:	ldr	r4, [r0]
   1c18c:	subs	r4, r4, #9
   1c190:	mvnne	r4, #0
   1c194:	mov	r0, r4
   1c198:	pop	{r4, r5, r6, pc}
   1c19c:	push	{r4, r5}
   1c1a0:	mov	r4, #0
   1c1a4:	mov	r5, #0
   1c1a8:	ldr	r3, [pc, #12]	; 1c1bc <__assert_fail@plt+0xb010>
   1c1ac:	strd	r4, [r0, #16]
   1c1b0:	str	r3, [r0, #24]
   1c1b4:	pop	{r4, r5}
   1c1b8:	bx	lr
   1c1bc:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1c1c0:	ldr	r3, [pc, #180]	; 1c27c <__assert_fail@plt+0xb0d0>
   1c1c4:	ldr	r2, [r0, #24]
   1c1c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c1cc:	cmp	r2, r3
   1c1d0:	bne	1c268 <__assert_fail@plt+0xb0bc>
   1c1d4:	ldrd	r6, [r0, #16]
   1c1d8:	orrs	r3, r6, r7
   1c1dc:	bne	1c208 <__assert_fail@plt+0xb05c>
   1c1e0:	mov	r2, #1
   1c1e4:	mov	r3, #0
   1c1e8:	ldrd	r8, [r1, #96]	; 0x60
   1c1ec:	strd	r2, [r0, #16]
   1c1f0:	ldrd	r2, [r1]
   1c1f4:	mov	r1, #0
   1c1f8:	strd	r8, [r0]
   1c1fc:	strd	r2, [r0, #8]
   1c200:	mov	r0, r1
   1c204:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c208:	ldrd	r8, [r1, #96]	; 0x60
   1c20c:	ldrd	r2, [r0]
   1c210:	cmp	r9, r3
   1c214:	cmpeq	r8, r2
   1c218:	beq	1c250 <__assert_fail@plt+0xb0a4>
   1c21c:	adds	r2, r6, #1
   1c220:	adc	r3, r7, #0
   1c224:	and	r6, r6, r2
   1c228:	and	r7, r7, r3
   1c22c:	orrs	ip, r6, r7
   1c230:	strd	r2, [r0, #16]
   1c234:	movne	r1, #0
   1c238:	bne	1c200 <__assert_fail@plt+0xb054>
   1c23c:	orrs	r3, r2, r3
   1c240:	bne	1c1f0 <__assert_fail@plt+0xb044>
   1c244:	mov	r1, #1
   1c248:	mov	r0, r1
   1c24c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c250:	ldrd	r4, [r1]
   1c254:	ldrd	r2, [r0, #8]
   1c258:	cmp	r5, r3
   1c25c:	cmpeq	r4, r2
   1c260:	bne	1c21c <__assert_fail@plt+0xb070>
   1c264:	b	1c244 <__assert_fail@plt+0xb098>
   1c268:	ldr	r3, [pc, #16]	; 1c280 <__assert_fail@plt+0xb0d4>
   1c26c:	mov	r2, #60	; 0x3c
   1c270:	ldr	r1, [pc, #12]	; 1c284 <__assert_fail@plt+0xb0d8>
   1c274:	ldr	r0, [pc, #12]	; 1c288 <__assert_fail@plt+0xb0dc>
   1c278:	bl	111ac <__assert_fail@plt>
   1c27c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   1c280:	muleq	r1, r0, lr
   1c284:	muleq	r1, ip, lr
   1c288:			; <UNDEFINED> instruction: 0x0001deb0
   1c28c:	push	{r4, r5, lr}
   1c290:	sub	sp, sp, #12
   1c294:	mov	r4, r0
   1c298:	bl	110a4 <fileno@plt>
   1c29c:	cmp	r0, #0
   1c2a0:	mov	r0, r4
   1c2a4:	blt	1c320 <__assert_fail@plt+0xb174>
   1c2a8:	bl	11008 <__freading@plt>
   1c2ac:	cmp	r0, #0
   1c2b0:	bne	1c2ec <__assert_fail@plt+0xb140>
   1c2b4:	mov	r0, r4
   1c2b8:	bl	1c538 <__assert_fail@plt+0xb38c>
   1c2bc:	cmp	r0, #0
   1c2c0:	beq	1c31c <__assert_fail@plt+0xb170>
   1c2c4:	bl	11068 <__errno_location@plt>
   1c2c8:	mov	r5, r0
   1c2cc:	mov	r0, r4
   1c2d0:	ldr	r4, [r5]
   1c2d4:	bl	110bc <fclose@plt>
   1c2d8:	cmp	r4, #0
   1c2dc:	mvnne	r0, #0
   1c2e0:	strne	r4, [r5]
   1c2e4:	add	sp, sp, #12
   1c2e8:	pop	{r4, r5, pc}
   1c2ec:	mov	r0, r4
   1c2f0:	bl	110a4 <fileno@plt>
   1c2f4:	mov	r3, #1
   1c2f8:	str	r3, [sp]
   1c2fc:	mov	r2, #0
   1c300:	mov	r3, #0
   1c304:	bl	10fa8 <lseek64@plt>
   1c308:	mvn	r3, #0
   1c30c:	mvn	r2, #0
   1c310:	cmp	r1, r3
   1c314:	cmpeq	r0, r2
   1c318:	bne	1c2b4 <__assert_fail@plt+0xb108>
   1c31c:	mov	r0, r4
   1c320:	add	sp, sp, #12
   1c324:	pop	{r4, r5, lr}
   1c328:	b	110bc <fclose@plt>
   1c32c:	push	{r1, r2, r3}
   1c330:	push	{r4, r5, r6, r7, lr}
   1c334:	sub	sp, sp, #8
   1c338:	add	r3, sp, #32
   1c33c:	ldr	r1, [sp, #28]
   1c340:	str	r3, [sp, #4]
   1c344:	cmp	r1, #0
   1c348:	beq	1c3e0 <__assert_fail@plt+0xb234>
   1c34c:	ldr	r2, [pc, #412]	; 1c4f0 <__assert_fail@plt+0xb344>
   1c350:	mov	r5, r0
   1c354:	cmp	r1, r2
   1c358:	bne	1c3a4 <__assert_fail@plt+0xb1f8>
   1c35c:	ldr	r6, [pc, #400]	; 1c4f4 <__assert_fail@plt+0xb348>
   1c360:	ldr	r7, [r3]
   1c364:	add	r2, sp, #36	; 0x24
   1c368:	ldr	r3, [r6]
   1c36c:	str	r2, [sp, #4]
   1c370:	cmp	r3, #0
   1c374:	mov	r2, r7
   1c378:	blt	1c4a4 <__assert_fail@plt+0xb2f8>
   1c37c:	bl	110d4 <fcntl64@plt>
   1c380:	subs	r4, r0, #0
   1c384:	blt	1c428 <__assert_fail@plt+0xb27c>
   1c388:	mov	r3, #1
   1c38c:	str	r3, [r6]
   1c390:	mov	r0, r4
   1c394:	add	sp, sp, #8
   1c398:	pop	{r4, r5, r6, r7, lr}
   1c39c:	add	sp, sp, #12
   1c3a0:	bx	lr
   1c3a4:	cmp	r1, #11
   1c3a8:	beq	1c3d0 <__assert_fail@plt+0xb224>
   1c3ac:	bgt	1c3f0 <__assert_fail@plt+0xb244>
   1c3b0:	cmp	r1, #3
   1c3b4:	beq	1c3d0 <__assert_fail@plt+0xb224>
   1c3b8:	ble	1c4e4 <__assert_fail@plt+0xb338>
   1c3bc:	cmp	r1, #8
   1c3c0:	beq	1c410 <__assert_fail@plt+0xb264>
   1c3c4:	ble	1c410 <__assert_fail@plt+0xb264>
   1c3c8:	cmp	r1, #9
   1c3cc:	bne	1c410 <__assert_fail@plt+0xb264>
   1c3d0:	mov	r0, r5
   1c3d4:	bl	110d4 <fcntl64@plt>
   1c3d8:	mov	r4, r0
   1c3dc:	b	1c390 <__assert_fail@plt+0xb1e4>
   1c3e0:	ldr	r2, [sp, #32]
   1c3e4:	bl	110d4 <fcntl64@plt>
   1c3e8:	mov	r4, r0
   1c3ec:	b	1c390 <__assert_fail@plt+0xb1e4>
   1c3f0:	ldr	r3, [pc, #256]	; 1c4f8 <__assert_fail@plt+0xb34c>
   1c3f4:	cmp	r1, r3
   1c3f8:	bgt	1c4c4 <__assert_fail@plt+0xb318>
   1c3fc:	cmp	r1, r2
   1c400:	bge	1c410 <__assert_fail@plt+0xb264>
   1c404:	sub	r3, r3, #6
   1c408:	cmp	r1, r3
   1c40c:	beq	1c3d0 <__assert_fail@plt+0xb224>
   1c410:	ldr	r3, [sp, #4]
   1c414:	mov	r0, r5
   1c418:	ldr	r2, [r3]
   1c41c:	bl	110d4 <fcntl64@plt>
   1c420:	mov	r4, r0
   1c424:	b	1c390 <__assert_fail@plt+0xb1e4>
   1c428:	bl	11068 <__errno_location@plt>
   1c42c:	ldr	r3, [r0]
   1c430:	cmp	r3, #22
   1c434:	bne	1c388 <__assert_fail@plt+0xb1dc>
   1c438:	mov	r2, r7
   1c43c:	mov	r0, r5
   1c440:	mov	r1, #0
   1c444:	bl	110d4 <fcntl64@plt>
   1c448:	subs	r4, r0, #0
   1c44c:	blt	1c390 <__assert_fail@plt+0xb1e4>
   1c450:	mvn	r3, #0
   1c454:	str	r3, [r6]
   1c458:	mov	r1, #1
   1c45c:	mov	r0, r4
   1c460:	bl	110d4 <fcntl64@plt>
   1c464:	subs	r2, r0, #0
   1c468:	blt	1c484 <__assert_fail@plt+0xb2d8>
   1c46c:	orr	r2, r2, #1
   1c470:	mov	r1, #2
   1c474:	mov	r0, r4
   1c478:	bl	110d4 <fcntl64@plt>
   1c47c:	cmn	r0, #1
   1c480:	bne	1c390 <__assert_fail@plt+0xb1e4>
   1c484:	bl	11068 <__errno_location@plt>
   1c488:	mov	r5, r0
   1c48c:	mov	r0, r4
   1c490:	ldr	r6, [r5]
   1c494:	mvn	r4, #0
   1c498:	bl	11188 <close@plt>
   1c49c:	str	r6, [r5]
   1c4a0:	b	1c390 <__assert_fail@plt+0xb1e4>
   1c4a4:	mov	r1, #0
   1c4a8:	bl	110d4 <fcntl64@plt>
   1c4ac:	subs	r4, r0, #0
   1c4b0:	blt	1c390 <__assert_fail@plt+0xb1e4>
   1c4b4:	ldr	r3, [r6]
   1c4b8:	cmn	r3, #1
   1c4bc:	beq	1c458 <__assert_fail@plt+0xb2ac>
   1c4c0:	b	1c390 <__assert_fail@plt+0xb1e4>
   1c4c4:	ldr	r3, [pc, #48]	; 1c4fc <__assert_fail@plt+0xb350>
   1c4c8:	cmp	r1, r3
   1c4cc:	beq	1c410 <__assert_fail@plt+0xb264>
   1c4d0:	blt	1c3d0 <__assert_fail@plt+0xb224>
   1c4d4:	add	r3, r3, #1
   1c4d8:	cmp	r1, r3
   1c4dc:	bne	1c410 <__assert_fail@plt+0xb264>
   1c4e0:	b	1c3d0 <__assert_fail@plt+0xb224>
   1c4e4:	cmp	r1, #1
   1c4e8:	bne	1c410 <__assert_fail@plt+0xb264>
   1c4ec:	b	1c3d0 <__assert_fail@plt+0xb224>
   1c4f0:	andeq	r0, r0, r6, lsl #8
   1c4f4:	andeq	lr, r2, r4, ror #5
   1c4f8:	andeq	r0, r0, r7, lsl #8
   1c4fc:	andeq	r0, r0, r9, lsl #8
   1c500:	push	{r1, r2, r3}
   1c504:	push	{lr}		; (str lr, [sp, #-4]!)
   1c508:	sub	sp, sp, #8
   1c50c:	ldr	r1, [sp, #12]
   1c510:	ands	r2, r1, #64	; 0x40
   1c514:	addne	r3, sp, #16
   1c518:	ldrne	r2, [sp, #16]
   1c51c:	strne	r3, [sp, #4]
   1c520:	bl	10fe4 <open64@plt>
   1c524:	bl	1aed0 <__assert_fail@plt+0x9d24>
   1c528:	add	sp, sp, #8
   1c52c:	pop	{lr}		; (ldr lr, [sp], #4)
   1c530:	add	sp, sp, #12
   1c534:	bx	lr
   1c538:	push	{r4, lr}
   1c53c:	subs	r4, r0, #0
   1c540:	sub	sp, sp, #8
   1c544:	beq	1c560 <__assert_fail@plt+0xb3b4>
   1c548:	bl	11008 <__freading@plt>
   1c54c:	cmp	r0, #0
   1c550:	beq	1c560 <__assert_fail@plt+0xb3b4>
   1c554:	ldr	r3, [r4]
   1c558:	tst	r3, #256	; 0x100
   1c55c:	bne	1c570 <__assert_fail@plt+0xb3c4>
   1c560:	mov	r0, r4
   1c564:	add	sp, sp, #8
   1c568:	pop	{r4, lr}
   1c56c:	b	10ef4 <fflush@plt>
   1c570:	mov	r3, #1
   1c574:	str	r3, [sp]
   1c578:	mov	r2, #0
   1c57c:	mov	r3, #0
   1c580:	mov	r0, r4
   1c584:	bl	1c5f0 <__assert_fail@plt+0xb444>
   1c588:	mov	r0, r4
   1c58c:	add	sp, sp, #8
   1c590:	pop	{r4, lr}
   1c594:	b	10ef4 <fflush@plt>
   1c598:	push	{r4, r5, lr}
   1c59c:	sub	sp, sp, #12
   1c5a0:	mov	r5, r0
   1c5a4:	bl	11068 <__errno_location@plt>
   1c5a8:	mov	r2, #0
   1c5ac:	mov	r4, r0
   1c5b0:	ldr	r3, [r0]
   1c5b4:	str	r2, [r4]
   1c5b8:	mov	r0, r5
   1c5bc:	str	r3, [sp]
   1c5c0:	str	r3, [sp, #4]
   1c5c4:	bl	10f0c <free@plt>
   1c5c8:	ldr	r3, [r4]
   1c5cc:	add	r2, sp, #8
   1c5d0:	cmp	r3, #0
   1c5d4:	moveq	r3, #4
   1c5d8:	movne	r3, #0
   1c5dc:	add	r3, r2, r3
   1c5e0:	ldr	r3, [r3, #-8]
   1c5e4:	str	r3, [r4]
   1c5e8:	add	sp, sp, #12
   1c5ec:	pop	{r4, r5, pc}
   1c5f0:	push	{r4, r5, r6, r7, r8, lr}
   1c5f4:	sub	sp, sp, #8
   1c5f8:	ldmib	r0, {ip, lr}
   1c5fc:	mov	r4, r0
   1c600:	ldr	r5, [sp, #32]
   1c604:	cmp	lr, ip
   1c608:	beq	1c620 <__assert_fail@plt+0xb474>
   1c60c:	str	r5, [sp, #32]
   1c610:	mov	r0, r4
   1c614:	add	sp, sp, #8
   1c618:	pop	{r4, r5, r6, r7, r8, lr}
   1c61c:	b	110c8 <fseeko64@plt>
   1c620:	ldr	lr, [r0, #20]
   1c624:	ldr	ip, [r0, #16]
   1c628:	cmp	lr, ip
   1c62c:	bne	1c60c <__assert_fail@plt+0xb460>
   1c630:	ldr	r8, [r0, #36]	; 0x24
   1c634:	cmp	r8, #0
   1c638:	bne	1c60c <__assert_fail@plt+0xb460>
   1c63c:	mov	r6, r2
   1c640:	mov	r7, r3
   1c644:	bl	110a4 <fileno@plt>
   1c648:	mov	r2, r6
   1c64c:	mov	r3, r7
   1c650:	str	r5, [sp]
   1c654:	bl	10fa8 <lseek64@plt>
   1c658:	mvn	r3, #0
   1c65c:	mvn	r2, #0
   1c660:	cmp	r1, r3
   1c664:	cmpeq	r0, r2
   1c668:	beq	1c688 <__assert_fail@plt+0xb4dc>
   1c66c:	ldr	r3, [r4]
   1c670:	strd	r0, [r4, #80]	; 0x50
   1c674:	mov	r0, r8
   1c678:	bic	r3, r3, #16
   1c67c:	str	r3, [r4]
   1c680:	add	sp, sp, #8
   1c684:	pop	{r4, r5, r6, r7, r8, pc}
   1c688:	mvn	r0, #0
   1c68c:	b	1c680 <__assert_fail@plt+0xb4d4>
   1c690:	push	{r4, lr}
   1c694:	mov	r0, #14
   1c698:	bl	110f8 <nl_langinfo@plt>
   1c69c:	cmp	r0, #0
   1c6a0:	beq	1c6b8 <__assert_fail@plt+0xb50c>
   1c6a4:	ldrb	r2, [r0]
   1c6a8:	ldr	r3, [pc, #16]	; 1c6c0 <__assert_fail@plt+0xb514>
   1c6ac:	cmp	r2, #0
   1c6b0:	moveq	r0, r3
   1c6b4:	pop	{r4, pc}
   1c6b8:	ldr	r0, [pc]	; 1c6c0 <__assert_fail@plt+0xb514>
   1c6bc:	pop	{r4, pc}
   1c6c0:	andeq	sp, r1, r8, asr #29
   1c6c4:	push	{r4, r5, r6, r7, lr}
   1c6c8:	subs	r6, r0, #0
   1c6cc:	sub	sp, sp, #12
   1c6d0:	addeq	r6, sp, #4
   1c6d4:	mov	r0, r6
   1c6d8:	mov	r5, r2
   1c6dc:	mov	r7, r1
   1c6e0:	bl	10fcc <mbrtowc@plt>
   1c6e4:	cmp	r5, #0
   1c6e8:	cmnne	r0, #3
   1c6ec:	mov	r4, r0
   1c6f0:	bls	1c70c <__assert_fail@plt+0xb560>
   1c6f4:	mov	r0, #0
   1c6f8:	bl	1c770 <__assert_fail@plt+0xb5c4>
   1c6fc:	cmp	r0, #0
   1c700:	moveq	r4, #1
   1c704:	ldrbeq	r3, [r7]
   1c708:	streq	r3, [r6]
   1c70c:	mov	r0, r4
   1c710:	add	sp, sp, #12
   1c714:	pop	{r4, r5, r6, r7, pc}
   1c718:	push	{r4, r5, r6, lr}
   1c71c:	subs	r4, r2, #0
   1c720:	mov	r6, r0
   1c724:	mov	r5, r1
   1c728:	beq	1c754 <__assert_fail@plt+0xb5a8>
   1c72c:	mov	r1, r4
   1c730:	mvn	r0, #0
   1c734:	bl	1c864 <__assert_fail@plt+0xb6b8>
   1c738:	cmp	r0, r5
   1c73c:	bcs	1c754 <__assert_fail@plt+0xb5a8>
   1c740:	bl	11068 <__errno_location@plt>
   1c744:	mov	r3, #12
   1c748:	str	r3, [r0]
   1c74c:	mov	r0, #0
   1c750:	pop	{r4, r5, r6, pc}
   1c754:	mul	r1, r5, r4
   1c758:	mov	r0, r6
   1c75c:	pop	{r4, r5, r6, lr}
   1c760:	b	1c0c4 <__assert_fail@plt+0xaf18>
   1c764:	mov	r2, #3
   1c768:	mov	r1, #0
   1c76c:	b	1c32c <__assert_fail@plt+0xb180>
   1c770:	push	{lr}		; (str lr, [sp, #-4]!)
   1c774:	sub	sp, sp, #268	; 0x10c
   1c778:	add	r1, sp, #4
   1c77c:	ldr	r2, [pc, #60]	; 1c7c0 <__assert_fail@plt+0xb614>
   1c780:	bl	1c7cc <__assert_fail@plt+0xb620>
   1c784:	cmp	r0, #0
   1c788:	movne	r0, #0
   1c78c:	bne	1c7b8 <__assert_fail@plt+0xb60c>
   1c790:	ldr	r1, [pc, #44]	; 1c7c4 <__assert_fail@plt+0xb618>
   1c794:	add	r0, sp, #4
   1c798:	bl	10ee8 <strcmp@plt>
   1c79c:	cmp	r0, #0
   1c7a0:	beq	1c7b8 <__assert_fail@plt+0xb60c>
   1c7a4:	add	r0, sp, #4
   1c7a8:	ldr	r1, [pc, #24]	; 1c7c8 <__assert_fail@plt+0xb61c>
   1c7ac:	bl	10ee8 <strcmp@plt>
   1c7b0:	adds	r0, r0, #0
   1c7b4:	movne	r0, #1
   1c7b8:	add	sp, sp, #268	; 0x10c
   1c7bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1c7c0:	andeq	r0, r0, r1, lsl #2
   1c7c4:	ldrdeq	sp, [r1], -r0
   1c7c8:	ldrdeq	sp, [r1], -r4
   1c7cc:	push	{r4, r5, r6, lr}
   1c7d0:	mov	r5, r1
   1c7d4:	mov	r1, #0
   1c7d8:	mov	r4, r2
   1c7dc:	bl	110e0 <setlocale@plt>
   1c7e0:	subs	r6, r0, #0
   1c7e4:	beq	1c840 <__assert_fail@plt+0xb694>
   1c7e8:	bl	11044 <strlen@plt>
   1c7ec:	cmp	r4, r0
   1c7f0:	bhi	1c828 <__assert_fail@plt+0xb67c>
   1c7f4:	cmp	r4, #0
   1c7f8:	bne	1c804 <__assert_fail@plt+0xb658>
   1c7fc:	mov	r0, #34	; 0x22
   1c800:	pop	{r4, r5, r6, pc}
   1c804:	sub	r4, r4, #1
   1c808:	mov	r1, r6
   1c80c:	mov	r2, r4
   1c810:	mov	r0, r5
   1c814:	bl	10f24 <memcpy@plt>
   1c818:	mov	r3, #0
   1c81c:	strb	r3, [r5, r4]
   1c820:	mov	r0, #34	; 0x22
   1c824:	pop	{r4, r5, r6, pc}
   1c828:	add	r2, r0, #1
   1c82c:	mov	r1, r6
   1c830:	mov	r0, r5
   1c834:	bl	10f24 <memcpy@plt>
   1c838:	mov	r0, #0
   1c83c:	pop	{r4, r5, r6, pc}
   1c840:	cmp	r4, #0
   1c844:	beq	1c854 <__assert_fail@plt+0xb6a8>
   1c848:	strb	r6, [r5]
   1c84c:	mov	r0, #22
   1c850:	pop	{r4, r5, r6, pc}
   1c854:	mov	r0, #22
   1c858:	pop	{r4, r5, r6, pc}
   1c85c:	mov	r1, #0
   1c860:	b	110e0 <setlocale@plt>
   1c864:	subs	r2, r1, #1
   1c868:	bxeq	lr
   1c86c:	bcc	1ca44 <__assert_fail@plt+0xb898>
   1c870:	cmp	r0, r1
   1c874:	bls	1ca28 <__assert_fail@plt+0xb87c>
   1c878:	tst	r1, r2
   1c87c:	beq	1ca34 <__assert_fail@plt+0xb888>
   1c880:	clz	r3, r0
   1c884:	clz	r2, r1
   1c888:	sub	r3, r2, r3
   1c88c:	rsbs	r3, r3, #31
   1c890:	addne	r3, r3, r3, lsl #1
   1c894:	mov	r2, #0
   1c898:	addne	pc, pc, r3, lsl #2
   1c89c:	nop			; (mov r0, r0)
   1c8a0:	cmp	r0, r1, lsl #31
   1c8a4:	adc	r2, r2, r2
   1c8a8:	subcs	r0, r0, r1, lsl #31
   1c8ac:	cmp	r0, r1, lsl #30
   1c8b0:	adc	r2, r2, r2
   1c8b4:	subcs	r0, r0, r1, lsl #30
   1c8b8:	cmp	r0, r1, lsl #29
   1c8bc:	adc	r2, r2, r2
   1c8c0:	subcs	r0, r0, r1, lsl #29
   1c8c4:	cmp	r0, r1, lsl #28
   1c8c8:	adc	r2, r2, r2
   1c8cc:	subcs	r0, r0, r1, lsl #28
   1c8d0:	cmp	r0, r1, lsl #27
   1c8d4:	adc	r2, r2, r2
   1c8d8:	subcs	r0, r0, r1, lsl #27
   1c8dc:	cmp	r0, r1, lsl #26
   1c8e0:	adc	r2, r2, r2
   1c8e4:	subcs	r0, r0, r1, lsl #26
   1c8e8:	cmp	r0, r1, lsl #25
   1c8ec:	adc	r2, r2, r2
   1c8f0:	subcs	r0, r0, r1, lsl #25
   1c8f4:	cmp	r0, r1, lsl #24
   1c8f8:	adc	r2, r2, r2
   1c8fc:	subcs	r0, r0, r1, lsl #24
   1c900:	cmp	r0, r1, lsl #23
   1c904:	adc	r2, r2, r2
   1c908:	subcs	r0, r0, r1, lsl #23
   1c90c:	cmp	r0, r1, lsl #22
   1c910:	adc	r2, r2, r2
   1c914:	subcs	r0, r0, r1, lsl #22
   1c918:	cmp	r0, r1, lsl #21
   1c91c:	adc	r2, r2, r2
   1c920:	subcs	r0, r0, r1, lsl #21
   1c924:	cmp	r0, r1, lsl #20
   1c928:	adc	r2, r2, r2
   1c92c:	subcs	r0, r0, r1, lsl #20
   1c930:	cmp	r0, r1, lsl #19
   1c934:	adc	r2, r2, r2
   1c938:	subcs	r0, r0, r1, lsl #19
   1c93c:	cmp	r0, r1, lsl #18
   1c940:	adc	r2, r2, r2
   1c944:	subcs	r0, r0, r1, lsl #18
   1c948:	cmp	r0, r1, lsl #17
   1c94c:	adc	r2, r2, r2
   1c950:	subcs	r0, r0, r1, lsl #17
   1c954:	cmp	r0, r1, lsl #16
   1c958:	adc	r2, r2, r2
   1c95c:	subcs	r0, r0, r1, lsl #16
   1c960:	cmp	r0, r1, lsl #15
   1c964:	adc	r2, r2, r2
   1c968:	subcs	r0, r0, r1, lsl #15
   1c96c:	cmp	r0, r1, lsl #14
   1c970:	adc	r2, r2, r2
   1c974:	subcs	r0, r0, r1, lsl #14
   1c978:	cmp	r0, r1, lsl #13
   1c97c:	adc	r2, r2, r2
   1c980:	subcs	r0, r0, r1, lsl #13
   1c984:	cmp	r0, r1, lsl #12
   1c988:	adc	r2, r2, r2
   1c98c:	subcs	r0, r0, r1, lsl #12
   1c990:	cmp	r0, r1, lsl #11
   1c994:	adc	r2, r2, r2
   1c998:	subcs	r0, r0, r1, lsl #11
   1c99c:	cmp	r0, r1, lsl #10
   1c9a0:	adc	r2, r2, r2
   1c9a4:	subcs	r0, r0, r1, lsl #10
   1c9a8:	cmp	r0, r1, lsl #9
   1c9ac:	adc	r2, r2, r2
   1c9b0:	subcs	r0, r0, r1, lsl #9
   1c9b4:	cmp	r0, r1, lsl #8
   1c9b8:	adc	r2, r2, r2
   1c9bc:	subcs	r0, r0, r1, lsl #8
   1c9c0:	cmp	r0, r1, lsl #7
   1c9c4:	adc	r2, r2, r2
   1c9c8:	subcs	r0, r0, r1, lsl #7
   1c9cc:	cmp	r0, r1, lsl #6
   1c9d0:	adc	r2, r2, r2
   1c9d4:	subcs	r0, r0, r1, lsl #6
   1c9d8:	cmp	r0, r1, lsl #5
   1c9dc:	adc	r2, r2, r2
   1c9e0:	subcs	r0, r0, r1, lsl #5
   1c9e4:	cmp	r0, r1, lsl #4
   1c9e8:	adc	r2, r2, r2
   1c9ec:	subcs	r0, r0, r1, lsl #4
   1c9f0:	cmp	r0, r1, lsl #3
   1c9f4:	adc	r2, r2, r2
   1c9f8:	subcs	r0, r0, r1, lsl #3
   1c9fc:	cmp	r0, r1, lsl #2
   1ca00:	adc	r2, r2, r2
   1ca04:	subcs	r0, r0, r1, lsl #2
   1ca08:	cmp	r0, r1, lsl #1
   1ca0c:	adc	r2, r2, r2
   1ca10:	subcs	r0, r0, r1, lsl #1
   1ca14:	cmp	r0, r1
   1ca18:	adc	r2, r2, r2
   1ca1c:	subcs	r0, r0, r1
   1ca20:	mov	r0, r2
   1ca24:	bx	lr
   1ca28:	moveq	r0, #1
   1ca2c:	movne	r0, #0
   1ca30:	bx	lr
   1ca34:	clz	r2, r1
   1ca38:	rsb	r2, r2, #31
   1ca3c:	lsr	r0, r0, r2
   1ca40:	bx	lr
   1ca44:	cmp	r0, #0
   1ca48:	mvnne	r0, #0
   1ca4c:	b	1ccec <__assert_fail@plt+0xbb40>
   1ca50:	cmp	r1, #0
   1ca54:	beq	1ca44 <__assert_fail@plt+0xb898>
   1ca58:	push	{r0, r1, lr}
   1ca5c:	bl	1c864 <__assert_fail@plt+0xb6b8>
   1ca60:	pop	{r1, r2, lr}
   1ca64:	mul	r3, r2, r0
   1ca68:	sub	r1, r1, r3
   1ca6c:	bx	lr
   1ca70:	cmp	r1, #0
   1ca74:	beq	1cc80 <__assert_fail@plt+0xbad4>
   1ca78:	eor	ip, r0, r1
   1ca7c:	rsbmi	r1, r1, #0
   1ca80:	subs	r2, r1, #1
   1ca84:	beq	1cc4c <__assert_fail@plt+0xbaa0>
   1ca88:	movs	r3, r0
   1ca8c:	rsbmi	r3, r0, #0
   1ca90:	cmp	r3, r1
   1ca94:	bls	1cc58 <__assert_fail@plt+0xbaac>
   1ca98:	tst	r1, r2
   1ca9c:	beq	1cc68 <__assert_fail@plt+0xbabc>
   1caa0:	clz	r2, r3
   1caa4:	clz	r0, r1
   1caa8:	sub	r2, r0, r2
   1caac:	rsbs	r2, r2, #31
   1cab0:	addne	r2, r2, r2, lsl #1
   1cab4:	mov	r0, #0
   1cab8:	addne	pc, pc, r2, lsl #2
   1cabc:	nop			; (mov r0, r0)
   1cac0:	cmp	r3, r1, lsl #31
   1cac4:	adc	r0, r0, r0
   1cac8:	subcs	r3, r3, r1, lsl #31
   1cacc:	cmp	r3, r1, lsl #30
   1cad0:	adc	r0, r0, r0
   1cad4:	subcs	r3, r3, r1, lsl #30
   1cad8:	cmp	r3, r1, lsl #29
   1cadc:	adc	r0, r0, r0
   1cae0:	subcs	r3, r3, r1, lsl #29
   1cae4:	cmp	r3, r1, lsl #28
   1cae8:	adc	r0, r0, r0
   1caec:	subcs	r3, r3, r1, lsl #28
   1caf0:	cmp	r3, r1, lsl #27
   1caf4:	adc	r0, r0, r0
   1caf8:	subcs	r3, r3, r1, lsl #27
   1cafc:	cmp	r3, r1, lsl #26
   1cb00:	adc	r0, r0, r0
   1cb04:	subcs	r3, r3, r1, lsl #26
   1cb08:	cmp	r3, r1, lsl #25
   1cb0c:	adc	r0, r0, r0
   1cb10:	subcs	r3, r3, r1, lsl #25
   1cb14:	cmp	r3, r1, lsl #24
   1cb18:	adc	r0, r0, r0
   1cb1c:	subcs	r3, r3, r1, lsl #24
   1cb20:	cmp	r3, r1, lsl #23
   1cb24:	adc	r0, r0, r0
   1cb28:	subcs	r3, r3, r1, lsl #23
   1cb2c:	cmp	r3, r1, lsl #22
   1cb30:	adc	r0, r0, r0
   1cb34:	subcs	r3, r3, r1, lsl #22
   1cb38:	cmp	r3, r1, lsl #21
   1cb3c:	adc	r0, r0, r0
   1cb40:	subcs	r3, r3, r1, lsl #21
   1cb44:	cmp	r3, r1, lsl #20
   1cb48:	adc	r0, r0, r0
   1cb4c:	subcs	r3, r3, r1, lsl #20
   1cb50:	cmp	r3, r1, lsl #19
   1cb54:	adc	r0, r0, r0
   1cb58:	subcs	r3, r3, r1, lsl #19
   1cb5c:	cmp	r3, r1, lsl #18
   1cb60:	adc	r0, r0, r0
   1cb64:	subcs	r3, r3, r1, lsl #18
   1cb68:	cmp	r3, r1, lsl #17
   1cb6c:	adc	r0, r0, r0
   1cb70:	subcs	r3, r3, r1, lsl #17
   1cb74:	cmp	r3, r1, lsl #16
   1cb78:	adc	r0, r0, r0
   1cb7c:	subcs	r3, r3, r1, lsl #16
   1cb80:	cmp	r3, r1, lsl #15
   1cb84:	adc	r0, r0, r0
   1cb88:	subcs	r3, r3, r1, lsl #15
   1cb8c:	cmp	r3, r1, lsl #14
   1cb90:	adc	r0, r0, r0
   1cb94:	subcs	r3, r3, r1, lsl #14
   1cb98:	cmp	r3, r1, lsl #13
   1cb9c:	adc	r0, r0, r0
   1cba0:	subcs	r3, r3, r1, lsl #13
   1cba4:	cmp	r3, r1, lsl #12
   1cba8:	adc	r0, r0, r0
   1cbac:	subcs	r3, r3, r1, lsl #12
   1cbb0:	cmp	r3, r1, lsl #11
   1cbb4:	adc	r0, r0, r0
   1cbb8:	subcs	r3, r3, r1, lsl #11
   1cbbc:	cmp	r3, r1, lsl #10
   1cbc0:	adc	r0, r0, r0
   1cbc4:	subcs	r3, r3, r1, lsl #10
   1cbc8:	cmp	r3, r1, lsl #9
   1cbcc:	adc	r0, r0, r0
   1cbd0:	subcs	r3, r3, r1, lsl #9
   1cbd4:	cmp	r3, r1, lsl #8
   1cbd8:	adc	r0, r0, r0
   1cbdc:	subcs	r3, r3, r1, lsl #8
   1cbe0:	cmp	r3, r1, lsl #7
   1cbe4:	adc	r0, r0, r0
   1cbe8:	subcs	r3, r3, r1, lsl #7
   1cbec:	cmp	r3, r1, lsl #6
   1cbf0:	adc	r0, r0, r0
   1cbf4:	subcs	r3, r3, r1, lsl #6
   1cbf8:	cmp	r3, r1, lsl #5
   1cbfc:	adc	r0, r0, r0
   1cc00:	subcs	r3, r3, r1, lsl #5
   1cc04:	cmp	r3, r1, lsl #4
   1cc08:	adc	r0, r0, r0
   1cc0c:	subcs	r3, r3, r1, lsl #4
   1cc10:	cmp	r3, r1, lsl #3
   1cc14:	adc	r0, r0, r0
   1cc18:	subcs	r3, r3, r1, lsl #3
   1cc1c:	cmp	r3, r1, lsl #2
   1cc20:	adc	r0, r0, r0
   1cc24:	subcs	r3, r3, r1, lsl #2
   1cc28:	cmp	r3, r1, lsl #1
   1cc2c:	adc	r0, r0, r0
   1cc30:	subcs	r3, r3, r1, lsl #1
   1cc34:	cmp	r3, r1
   1cc38:	adc	r0, r0, r0
   1cc3c:	subcs	r3, r3, r1
   1cc40:	cmp	ip, #0
   1cc44:	rsbmi	r0, r0, #0
   1cc48:	bx	lr
   1cc4c:	teq	ip, r0
   1cc50:	rsbmi	r0, r0, #0
   1cc54:	bx	lr
   1cc58:	movcc	r0, #0
   1cc5c:	asreq	r0, ip, #31
   1cc60:	orreq	r0, r0, #1
   1cc64:	bx	lr
   1cc68:	clz	r2, r1
   1cc6c:	rsb	r2, r2, #31
   1cc70:	cmp	ip, #0
   1cc74:	lsr	r0, r3, r2
   1cc78:	rsbmi	r0, r0, #0
   1cc7c:	bx	lr
   1cc80:	cmp	r0, #0
   1cc84:	mvngt	r0, #-2147483648	; 0x80000000
   1cc88:	movlt	r0, #-2147483648	; 0x80000000
   1cc8c:	b	1ccec <__assert_fail@plt+0xbb40>
   1cc90:	cmp	r1, #0
   1cc94:	beq	1cc80 <__assert_fail@plt+0xbad4>
   1cc98:	push	{r0, r1, lr}
   1cc9c:	bl	1ca78 <__assert_fail@plt+0xb8cc>
   1cca0:	pop	{r1, r2, lr}
   1cca4:	mul	r3, r2, r0
   1cca8:	sub	r1, r1, r3
   1ccac:	bx	lr
   1ccb0:	cmp	r3, #0
   1ccb4:	cmpeq	r2, #0
   1ccb8:	bne	1ccd0 <__assert_fail@plt+0xbb24>
   1ccbc:	cmp	r1, #0
   1ccc0:	cmpeq	r0, #0
   1ccc4:	mvnne	r1, #0
   1ccc8:	mvnne	r0, #0
   1cccc:	b	1ccec <__assert_fail@plt+0xbb40>
   1ccd0:	sub	sp, sp, #8
   1ccd4:	push	{sp, lr}
   1ccd8:	bl	1ccfc <__assert_fail@plt+0xbb50>
   1ccdc:	ldr	lr, [sp, #4]
   1cce0:	add	sp, sp, #8
   1cce4:	pop	{r2, r3}
   1cce8:	bx	lr
   1ccec:	push	{r1, lr}
   1ccf0:	mov	r0, #8
   1ccf4:	bl	10edc <raise@plt>
   1ccf8:	pop	{r1, pc}
   1ccfc:	cmp	r1, r3
   1cd00:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cd04:	cmpeq	r0, r2
   1cd08:	mov	r4, r0
   1cd0c:	mov	r5, r1
   1cd10:	ldr	r9, [sp, #28]
   1cd14:	movcc	r0, #0
   1cd18:	movcc	r1, #0
   1cd1c:	bcc	1ce14 <__assert_fail@plt+0xbc68>
   1cd20:	cmp	r3, #0
   1cd24:	clzeq	ip, r2
   1cd28:	clzne	ip, r3
   1cd2c:	addeq	ip, ip, #32
   1cd30:	cmp	r5, #0
   1cd34:	clzeq	r1, r4
   1cd38:	addeq	r1, r1, #32
   1cd3c:	clzne	r1, r5
   1cd40:	sub	ip, ip, r1
   1cd44:	sub	lr, ip, #32
   1cd48:	lsl	r7, r3, ip
   1cd4c:	rsb	r8, ip, #32
   1cd50:	orr	r7, r7, r2, lsl lr
   1cd54:	orr	r7, r7, r2, lsr r8
   1cd58:	lsl	r6, r2, ip
   1cd5c:	cmp	r5, r7
   1cd60:	cmpeq	r4, r6
   1cd64:	movcc	r0, #0
   1cd68:	movcc	r1, #0
   1cd6c:	bcc	1cd88 <__assert_fail@plt+0xbbdc>
   1cd70:	mov	r3, #1
   1cd74:	subs	r4, r4, r6
   1cd78:	lsl	r1, r3, lr
   1cd7c:	lsl	r0, r3, ip
   1cd80:	orr	r1, r1, r3, lsr r8
   1cd84:	sbc	r5, r5, r7
   1cd88:	cmp	ip, #0
   1cd8c:	beq	1ce14 <__assert_fail@plt+0xbc68>
   1cd90:	lsrs	r3, r7, #1
   1cd94:	rrx	r2, r6
   1cd98:	mov	r6, ip
   1cd9c:	b	1cdc0 <__assert_fail@plt+0xbc14>
   1cda0:	subs	r4, r4, r2
   1cda4:	sbc	r5, r5, r3
   1cda8:	adds	r4, r4, r4
   1cdac:	adc	r5, r5, r5
   1cdb0:	adds	r4, r4, #1
   1cdb4:	adc	r5, r5, #0
   1cdb8:	subs	r6, r6, #1
   1cdbc:	beq	1cddc <__assert_fail@plt+0xbc30>
   1cdc0:	cmp	r5, r3
   1cdc4:	cmpeq	r4, r2
   1cdc8:	bcs	1cda0 <__assert_fail@plt+0xbbf4>
   1cdcc:	adds	r4, r4, r4
   1cdd0:	adc	r5, r5, r5
   1cdd4:	subs	r6, r6, #1
   1cdd8:	bne	1cdc0 <__assert_fail@plt+0xbc14>
   1cddc:	lsr	r6, r4, ip
   1cde0:	lsr	r7, r5, ip
   1cde4:	orr	r6, r6, r5, lsl r8
   1cde8:	adds	r2, r0, r4
   1cdec:	orr	r6, r6, r5, lsr lr
   1cdf0:	adc	r3, r1, r5
   1cdf4:	lsl	r1, r7, ip
   1cdf8:	orr	r1, r1, r6, lsl lr
   1cdfc:	lsl	r0, r6, ip
   1ce00:	orr	r1, r1, r6, lsr r8
   1ce04:	subs	r0, r2, r0
   1ce08:	mov	r4, r6
   1ce0c:	mov	r5, r7
   1ce10:	sbc	r1, r3, r1
   1ce14:	cmp	r9, #0
   1ce18:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1ce1c:	strd	r4, [r9]
   1ce20:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1ce24:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce28:	mov	r7, r0
   1ce2c:	ldr	r6, [pc, #72]	; 1ce7c <__assert_fail@plt+0xbcd0>
   1ce30:	ldr	r5, [pc, #72]	; 1ce80 <__assert_fail@plt+0xbcd4>
   1ce34:	add	r6, pc, r6
   1ce38:	add	r5, pc, r5
   1ce3c:	sub	r6, r6, r5
   1ce40:	mov	r8, r1
   1ce44:	mov	r9, r2
   1ce48:	bl	10e98 <fstatfs64@plt-0x20>
   1ce4c:	asrs	r6, r6, #2
   1ce50:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce54:	mov	r4, #0
   1ce58:	add	r4, r4, #1
   1ce5c:	ldr	r3, [r5], #4
   1ce60:	mov	r2, r9
   1ce64:	mov	r1, r8
   1ce68:	mov	r0, r7
   1ce6c:	blx	r3
   1ce70:	cmp	r6, r4
   1ce74:	bne	1ce58 <__assert_fail@plt+0xbcac>
   1ce78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce7c:	ldrdeq	r1, [r1], -r4
   1ce80:	andeq	r1, r1, ip, asr #1
   1ce84:	bx	lr
   1ce88:	ldr	r3, [pc, #12]	; 1ce9c <__assert_fail@plt+0xbcf0>
   1ce8c:	mov	r1, #0
   1ce90:	add	r3, pc, r3
   1ce94:	ldr	r2, [r3]
   1ce98:	b	11080 <__cxa_atexit@plt>
   1ce9c:	andeq	r1, r1, ip, ror r2

Disassembly of section .fini:

0001cea0 <.fini>:
   1cea0:	push	{r3, lr}
   1cea4:	pop	{r3, pc}
