
../repos/charybdis/modules/.libs/m_challenge.so:     file format elf32-littlearm


Disassembly of section .init:

0000083c <_init>:
 83c:	push	{r3, lr}
 840:	bl	9d0 <call_weak_fn>
 844:	pop	{r3, pc}

Disassembly of section .plt:

00000848 <.plt>:
 848:	push	{lr}		; (str lr, [sp, #-4]!)
 84c:	ldr	lr, [pc, #4]	; 858 <.plt+0x10>
 850:	add	lr, pc, lr
 854:	ldr	pc, [lr, #8]!
 858:	.word	0x000117a8

0000085c <calloc@plt>:
 85c:	add	ip, pc, #0, 12
 860:	add	ip, ip, #69632	; 0x11000
 864:	ldr	pc, [ip, #1960]!	; 0x7a8

00000868 <rb_current_time@plt>:
 868:	add	ip, pc, #0, 12
 86c:	add	ip, ip, #69632	; 0x11000
 870:	ldr	pc, [ip, #1952]!	; 0x7a0

00000874 <__cxa_finalize@plt>:
 874:	add	ip, pc, #0, 12
 878:	add	ip, ip, #69632	; 0x11000
 87c:	ldr	pc, [ip, #1944]!	; 0x798

00000880 <RSA_public_encrypt@plt>:
 880:	add	ip, pc, #0, 12
 884:	add	ip, ip, #69632	; 0x11000
 888:	ldr	pc, [ip, #1936]!	; 0x790

0000088c <sendto_one@plt>:
 88c:	add	ip, pc, #0, 12
 890:	add	ip, ip, #69632	; 0x11000
 894:	ldr	pc, [ip, #1928]!	; 0x788

00000898 <free@plt>:
 898:	add	ip, pc, #0, 12
 89c:	add	ip, ip, #69632	; 0x11000
 8a0:	ldr	pc, [ip, #1920]!	; 0x780

000008a4 <rb_strcasecmp@plt>:
 8a4:	add	ip, pc, #0, 12
 8a8:	add	ip, ip, #69632	; 0x11000
 8ac:	ldr	pc, [ip, #1912]!	; 0x778

000008b0 <RSA_size@plt>:
 8b0:	add	ip, pc, #0, 12
 8b4:	add	ip, ip, #69632	; 0x11000
 8b8:	ldr	pc, [ip, #1904]!	; 0x770

000008bc <rb_outofmemory@plt>:
 8bc:	add	ip, pc, #0, 12
 8c0:	add	ip, ip, #69632	; 0x11000
 8c4:	ldr	pc, [ip, #1896]!	; 0x768

000008c8 <memcmp@plt>:
 8c8:	add	ip, pc, #0, 12
 8cc:	add	ip, ip, #69632	; 0x11000
 8d0:	ldr	pc, [ip, #1888]!	; 0x760

000008d4 <sendto_realops_snomask@plt>:
 8d4:	add	ip, pc, #0, 12
 8d8:	add	ip, ip, #69632	; 0x11000
 8dc:	ldr	pc, [ip, #1880]!	; 0x758

000008e0 <rb_base64_decode@plt>:
 8e0:	add	ip, pc, #0, 12
 8e4:	add	ip, ip, #69632	; 0x11000
 8e8:	ldr	pc, [ip, #1872]!	; 0x750

000008ec <strcpy@plt>:
 8ec:	add	ip, pc, #0, 12
 8f0:	add	ip, ip, #69632	; 0x11000
 8f4:	ldr	pc, [ip, #1864]!	; 0x748

000008f8 <malloc@plt>:
 8f8:	add	ip, pc, #0, 12
 8fc:	add	ip, ip, #69632	; 0x11000
 900:	ldr	pc, [ip, #1856]!	; 0x740

00000904 <rb_get_random@plt>:
 904:	add	ip, pc, #0, 12
 908:	add	ip, ip, #69632	; 0x11000
 90c:	ldr	pc, [ip, #1848]!	; 0x738

00000910 <__gmon_start__@plt>:
 910:	add	ip, pc, #0, 12
 914:	add	ip, ip, #69632	; 0x11000
 918:	ldr	pc, [ip, #1840]!	; 0x730

0000091c <OPENSSL_init_crypto@plt>:
 91c:	add	ip, pc, #0, 12
 920:	add	ip, ip, #69632	; 0x11000
 924:	ldr	pc, [ip, #1832]!	; 0x728

00000928 <send_oper_motd@plt>:
 928:	add	ip, pc, #0, 12
 92c:	add	ip, ip, #69632	; 0x11000
 930:	ldr	pc, [ip, #1824]!	; 0x720

00000934 <sendto_one_numeric@plt>:
 934:	add	ip, pc, #0, 12
 938:	add	ip, ip, #69632	; 0x11000
 93c:	ldr	pc, [ip, #1816]!	; 0x718

00000940 <strlen@plt>:
 940:	add	ip, pc, #0, 12
 944:	add	ip, ip, #69632	; 0x11000
 948:	ldr	pc, [ip, #1808]!	; 0x710

0000094c <SHA1_Update@plt>:
 94c:	add	ip, pc, #0, 12
 950:	add	ip, ip, #69632	; 0x11000
 954:	ldr	pc, [ip, #1800]!	; 0x708

00000958 <ERR_error_string@plt>:
 958:	add	ip, pc, #0, 12
 95c:	add	ip, ip, #69632	; 0x11000
 960:	ldr	pc, [ip, #1792]!	; 0x700

00000964 <ilog@plt>:
 964:	add	ip, pc, #0, 12
 968:	add	ip, ip, #69632	; 0x11000
 96c:	ldr	pc, [ip, #1784]!	; 0x6f8

00000970 <SHA1_Init@plt>:
 970:	add	ip, pc, #0, 12
 974:	add	ip, ip, #69632	; 0x11000
 978:	ldr	pc, [ip, #1776]!	; 0x6f0

0000097c <ERR_get_error@plt>:
 97c:	add	ip, pc, #0, 12
 980:	add	ip, ip, #69632	; 0x11000
 984:	ldr	pc, [ip, #1768]!	; 0x6e8

00000988 <sendto_one_notice@plt>:
 988:	add	ip, pc, #0, 12
 98c:	add	ip, ip, #69632	; 0x11000
 990:	ldr	pc, [ip, #1760]!	; 0x6e0

00000994 <rb_strlcpy@plt>:
 994:	add	ip, pc, #0, 12
 998:	add	ip, ip, #69632	; 0x11000
 99c:	ldr	pc, [ip, #1752]!	; 0x6d8

000009a0 <find_oper_conf@plt>:
 9a0:	add	ip, pc, #0, 12
 9a4:	add	ip, ip, #69632	; 0x11000
 9a8:	ldr	pc, [ip, #1744]!	; 0x6d0

000009ac <oper_up@plt>:
 9ac:	add	ip, pc, #0, 12
 9b0:	add	ip, ip, #69632	; 0x11000
 9b4:	ldr	pc, [ip, #1736]!	; 0x6c8

000009b8 <rb_base64_encode@plt>:
 9b8:	add	ip, pc, #0, 12
 9bc:	add	ip, ip, #69632	; 0x11000
 9c0:	ldr	pc, [ip, #1728]!	; 0x6c0

000009c4 <SHA1_Final@plt>:
 9c4:	add	ip, pc, #0, 12
 9c8:	add	ip, ip, #69632	; 0x11000
 9cc:	ldr	pc, [ip, #1720]!	; 0x6b8

Disassembly of section .text:

000009d0 <call_weak_fn>:
     9d0:	ldr	r3, [pc, #20]	; 9ec <call_weak_fn+0x1c>
     9d4:	ldr	r2, [pc, #20]	; 9f0 <call_weak_fn+0x20>
     9d8:	add	r3, pc, r3
     9dc:	ldr	r2, [r3, r2]
     9e0:	cmp	r2, #0
     9e4:	bxeq	lr
     9e8:	b	910 <__gmon_start__@plt>
     9ec:	.word	0x00011620
     9f0:	.word	0x00000090

000009f4 <deregister_tm_clones>:
     9f4:	ldr	r0, [pc, #44]	; a28 <deregister_tm_clones+0x34>
     9f8:	ldr	r3, [pc, #44]	; a2c <deregister_tm_clones+0x38>
     9fc:	add	r0, pc, r0
     a00:	add	r3, pc, r3
     a04:	cmp	r3, r0
     a08:	ldr	r3, [pc, #32]	; a30 <deregister_tm_clones+0x3c>
     a0c:	add	r3, pc, r3
     a10:	bxeq	lr
     a14:	ldr	r2, [pc, #24]	; a34 <deregister_tm_clones+0x40>
     a18:	ldr	r3, [r3, r2]
     a1c:	cmp	r3, #0
     a20:	bxeq	lr
     a24:	bx	r3
     a28:	.word	0x00011714
     a2c:	.word	0x00011710
     a30:	.word	0x000115ec
     a34:	.word	0x0000008c

00000a38 <register_tm_clones>:
     a38:	ldr	r0, [pc, #56]	; a78 <register_tm_clones+0x40>
     a3c:	ldr	r3, [pc, #56]	; a7c <register_tm_clones+0x44>
     a40:	add	r0, pc, r0
     a44:	add	r3, pc, r3
     a48:	sub	r1, r3, r0
     a4c:	ldr	r3, [pc, #44]	; a80 <register_tm_clones+0x48>
     a50:	asr	r1, r1, #2
     a54:	add	r3, pc, r3
     a58:	add	r1, r1, r1, lsr #31
     a5c:	asrs	r1, r1, #1
     a60:	bxeq	lr
     a64:	ldr	r2, [pc, #24]	; a84 <register_tm_clones+0x4c>
     a68:	ldr	r3, [r3, r2]
     a6c:	cmp	r3, #0
     a70:	bxeq	lr
     a74:	bx	r3
     a78:	.word	0x000116d0
     a7c:	.word	0x000116cc
     a80:	.word	0x000115a4
     a84:	.word	0x00000094

00000a88 <__do_global_dtors_aux>:
     a88:	ldr	r3, [pc, #76]	; adc <__do_global_dtors_aux+0x54>
     a8c:	ldr	r2, [pc, #76]	; ae0 <__do_global_dtors_aux+0x58>
     a90:	add	r3, pc, r3
     a94:	add	r2, pc, r2
     a98:	ldrb	r3, [r3]
     a9c:	cmp	r3, #0
     aa0:	bxne	lr
     aa4:	ldr	r3, [pc, #56]	; ae4 <__do_global_dtors_aux+0x5c>
     aa8:	push	{r4, lr}
     aac:	ldr	r3, [r2, r3]
     ab0:	cmp	r3, #0
     ab4:	beq	ac4 <__do_global_dtors_aux+0x3c>
     ab8:	ldr	r3, [pc, #40]	; ae8 <__do_global_dtors_aux+0x60>
     abc:	ldr	r0, [pc, r3]
     ac0:	bl	874 <__cxa_finalize@plt>
     ac4:	bl	9f4 <deregister_tm_clones>
     ac8:	ldr	r3, [pc, #28]	; aec <__do_global_dtors_aux+0x64>
     acc:	mov	r2, #1
     ad0:	add	r3, pc, r3
     ad4:	strb	r2, [r3]
     ad8:	pop	{r4, pc}
     adc:	.word	0x00011680
     ae0:	.word	0x00011564
     ae4:	.word	0x00000088
     ae8:	.word	0x000115dc
     aec:	.word	0x00011640

00000af0 <frame_dummy>:
     af0:	b	a38 <register_tm_clones>

00000af4 <rb_free>:
     af4:	cmp	r0, #0
     af8:	bxeq	lr
     afc:	b	898 <free@plt>

00000b00 <cleanup_challenge>:
     b00:	ldr	r3, [r0, #432]	; 0x1b0
     b04:	cmp	r3, #0
     b08:	bxeq	lr
     b0c:	push	{r4, lr}
     b10:	mov	r4, r0
     b14:	ldr	r0, [r3, #284]	; 0x11c
     b18:	bl	af4 <rb_free>
     b1c:	ldr	r3, [r4, #24]
     b20:	ldr	r0, [r3, #32]
     b24:	bl	af4 <rb_free>
     b28:	ldr	r1, [r4, #24]
     b2c:	mov	r3, #0
     b30:	ldr	r2, [r4, #432]	; 0x1b0
     b34:	str	r3, [r2, #284]	; 0x11c
     b38:	str	r3, [r1, #32]
     b3c:	str	r3, [r2, #304]	; 0x130
     b40:	pop	{r4, pc}

00000b44 <m_challenge>:
     b44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b48:	mov	r3, #0
     b4c:	sub	sp, sp, #668	; 0x29c
     b50:	mov	r4, r2
     b54:	str	r3, [sp, #28]
     b58:	ldr	r3, [r2, #56]	; 0x38
     b5c:	ldr	r5, [pc, #1596]	; 11a0 <m_challenge+0x65c>
     b60:	ldr	r8, [sp, #704]	; 0x2c0
     b64:	tst	r3, #4096	; 0x1000
     b68:	add	r5, pc, r5
     b6c:	beq	ba0 <m_challenge+0x5c>
     b70:	ldr	r3, [pc, #1580]	; 11a4 <m_challenge+0x660>
     b74:	mov	r0, r4
     b78:	ldr	r1, [pc, #1576]	; 11a8 <m_challenge+0x664>
     b7c:	ldr	r2, [r5, r3]
     b80:	add	r3, r4, #88	; 0x58
     b84:	add	r1, pc, r1
     b88:	add	r2, r2, #88	; 0x58
     b8c:	bl	88c <sendto_one@plt>
     b90:	mov	r0, r4
     b94:	bl	928 <send_oper_motd@plt>
     b98:	add	sp, sp, #668	; 0x29c
     b9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     ba0:	ldr	r3, [r8, #4]
     ba4:	ldrb	r3, [r3]
     ba8:	cmp	r3, #43	; 0x2b
     bac:	bne	df8 <m_challenge+0x2b4>
     bb0:	ldr	r3, [r2, #432]	; 0x1b0
     bb4:	ldr	r3, [r3, #284]	; 0x11c
     bb8:	cmp	r3, #0
     bbc:	beq	b98 <m_challenge+0x54>
     bc0:	bl	868 <rb_current_time@plt>
     bc4:	ldr	r3, [r4, #432]	; 0x1b0
     bc8:	add	sl, r4, #288	; 0x120
     bcc:	add	r7, r4, #152	; 0x98
     bd0:	add	sl, sl, #3
     bd4:	add	r6, r4, #88	; 0x58
     bd8:	add	r9, r4, #163	; 0xa3
     bdc:	ldr	r3, [r3, #304]	; 0x130
     be0:	sub	r0, r0, r3
     be4:	cmp	r0, #180	; 0xb4
     be8:	ble	c68 <m_challenge+0x124>
     bec:	ldr	r3, [pc, #1456]	; 11a4 <m_challenge+0x660>
     bf0:	mov	r0, r4
     bf4:	ldr	r1, [pc, #1456]	; 11ac <m_challenge+0x668>
     bf8:	ldr	r2, [r5, r3]
     bfc:	mov	r3, r6
     c00:	add	r1, pc, r1
     c04:	add	r2, r2, #88	; 0x58
     c08:	bl	88c <sendto_one@plt>
     c0c:	ldr	r1, [pc, #1436]	; 11b0 <m_challenge+0x66c>
     c10:	mov	r3, r6
     c14:	mov	r0, #4
     c18:	ldr	r2, [r4, #24]
     c1c:	stm	sp, {r7, r9, sl}
     c20:	add	r1, pc, r1
     c24:	ldr	r2, [r2, #32]
     c28:	bl	964 <ilog@plt>
     c2c:	ldr	r3, [pc, #1408]	; 11b4 <m_challenge+0x670>
     c30:	ldr	r3, [r5, r3]
     c34:	ldr	r3, [r3, #84]	; 0x54
     c38:	cmp	r3, #0
     c3c:	beq	c5c <m_challenge+0x118>
     c40:	ldr	r2, [pc, #1392]	; 11b8 <m_challenge+0x674>
     c44:	mov	r1, #256	; 0x100
     c48:	mov	r3, r6
     c4c:	mov	r0, r1
     c50:	stm	sp, {r7, r9}
     c54:	add	r2, pc, r2
     c58:	bl	8d4 <sendto_realops_snomask@plt>
     c5c:	mov	r0, r4
     c60:	bl	b00 <cleanup_challenge>
     c64:	b	b98 <m_challenge+0x54>
     c68:	ldr	fp, [r8, #4]
     c6c:	add	fp, fp, #1
     c70:	mov	r0, fp
     c74:	str	fp, [r8, #4]
     c78:	bl	940 <strlen@plt>
     c7c:	mov	r1, r0
     c80:	add	r2, sp, #28
     c84:	mov	r0, fp
     c88:	bl	8e0 <rb_base64_decode@plt>
     c8c:	ldr	r2, [sp, #28]
     c90:	mov	r8, r0
     c94:	cmp	r2, #20
     c98:	bne	cb4 <m_challenge+0x170>
     c9c:	ldr	r3, [r4, #432]	; 0x1b0
     ca0:	mov	r1, r0
     ca4:	ldr	r0, [r3, #284]	; 0x11c
     ca8:	bl	8c8 <memcmp@plt>
     cac:	cmp	r0, #0
     cb0:	beq	d30 <m_challenge+0x1ec>
     cb4:	ldr	r3, [pc, #1256]	; 11a4 <m_challenge+0x660>
     cb8:	mov	r0, r4
     cbc:	ldr	r1, [pc, #1272]	; 11bc <m_challenge+0x678>
     cc0:	ldr	r2, [r5, r3]
     cc4:	mov	r3, r6
     cc8:	add	r1, pc, r1
     ccc:	add	r2, r2, #88	; 0x58
     cd0:	bl	88c <sendto_one@plt>
     cd4:	ldr	r1, [pc, #1252]	; 11c0 <m_challenge+0x67c>
     cd8:	mov	r3, r6
     cdc:	mov	r0, #4
     ce0:	ldr	r2, [r4, #24]
     ce4:	stm	sp, {r7, r9, sl}
     ce8:	add	r1, pc, r1
     cec:	ldr	r2, [r2, #32]
     cf0:	bl	964 <ilog@plt>
     cf4:	ldr	r3, [pc, #1208]	; 11b4 <m_challenge+0x670>
     cf8:	ldr	r3, [r5, r3]
     cfc:	ldr	r3, [r3, #84]	; 0x54
     d00:	cmp	r3, #0
     d04:	beq	d24 <m_challenge+0x1e0>
     d08:	ldr	r2, [pc, #1204]	; 11c4 <m_challenge+0x680>
     d0c:	mov	r1, #256	; 0x100
     d10:	mov	r3, r6
     d14:	mov	r0, r1
     d18:	stm	sp, {r7, r9}
     d1c:	add	r2, pc, r2
     d20:	bl	8d4 <sendto_realops_snomask@plt>
     d24:	mov	r0, r8
     d28:	bl	af4 <rb_free>
     d2c:	b	c5c <m_challenge+0x118>
     d30:	mov	r0, r8
     d34:	bl	af4 <rb_free>
     d38:	ldr	r3, [r4, #24]
     d3c:	mov	r2, sl
     d40:	add	r1, r4, #227	; 0xe3
     d44:	mov	r0, r7
     d48:	ldr	r3, [r3, #32]
     d4c:	bl	9a0 <find_oper_conf@plt>
     d50:	subs	r8, r0, #0
     d54:	bne	dc0 <m_challenge+0x27c>
     d58:	ldr	r2, [pc, #1128]	; 11c8 <m_challenge+0x684>
     d5c:	movw	r1, #491	; 0x1eb
     d60:	mov	r0, r4
     d64:	add	r2, pc, r2
     d68:	bl	934 <sendto_one_numeric@plt>
     d6c:	ldr	r1, [pc, #1112]	; 11cc <m_challenge+0x688>
     d70:	mov	r3, r6
     d74:	mov	r0, #4
     d78:	ldr	r2, [r4, #24]
     d7c:	stm	sp, {r7, r9, sl}
     d80:	add	r1, pc, r1
     d84:	ldr	r2, [r2, #32]
     d88:	bl	964 <ilog@plt>
     d8c:	ldr	r3, [pc, #1056]	; 11b4 <m_challenge+0x670>
     d90:	ldr	r3, [r5, r3]
     d94:	ldr	r3, [r3, #84]	; 0x54
     d98:	cmp	r3, #0
     d9c:	beq	b98 <m_challenge+0x54>
     da0:	ldr	r2, [pc, #1064]	; 11d0 <m_challenge+0x68c>
     da4:	mov	r3, r6
     da8:	stm	sp, {r7, r9}
     dac:	add	r2, pc, r2
     db0:	mov	r1, #256	; 0x100
     db4:	mov	r0, #256	; 0x100
     db8:	bl	8d4 <sendto_realops_snomask@plt>
     dbc:	b	b98 <m_challenge+0x54>
     dc0:	mov	r0, r4
     dc4:	bl	b00 <cleanup_challenge>
     dc8:	mov	r1, r8
     dcc:	mov	r0, r4
     dd0:	bl	9ac <oper_up@plt>
     dd4:	ldr	r1, [pc, #1016]	; 11d4 <m_challenge+0x690>
     dd8:	mov	r3, r6
     ddc:	mov	r0, #3
     de0:	ldr	r2, [r4, #24]
     de4:	stm	sp, {r7, r9, sl}
     de8:	add	r1, pc, r1
     dec:	ldr	r2, [r2, #32]
     df0:	bl	964 <ilog@plt>
     df4:	b	b98 <m_challenge+0x54>
     df8:	add	r9, r4, #288	; 0x120
     dfc:	mov	r0, r2
     e00:	add	r7, r4, #152	; 0x98
     e04:	add	r9, r9, #3
     e08:	bl	b00 <cleanup_challenge>
     e0c:	mov	r2, r9
     e10:	add	r1, r4, #227	; 0xe3
     e14:	ldr	r3, [r8, #4]
     e18:	mov	r0, r7
     e1c:	bl	9a0 <find_oper_conf@plt>
     e20:	subs	r6, r0, #0
     e24:	bne	e90 <m_challenge+0x34c>
     e28:	ldr	r2, [pc, #936]	; 11d8 <m_challenge+0x694>
     e2c:	mov	r0, r4
     e30:	movw	r1, #491	; 0x1eb
     e34:	add	r6, r4, #88	; 0x58
     e38:	add	r4, r4, #163	; 0xa3
     e3c:	add	r2, pc, r2
     e40:	bl	934 <sendto_one_numeric@plt>
     e44:	ldr	r1, [pc, #912]	; 11dc <m_challenge+0x698>
     e48:	mov	r3, r6
     e4c:	mov	r0, #4
     e50:	str	r7, [sp]
     e54:	stmib	sp, {r4, r9}
     e58:	ldr	r2, [r8, #4]
     e5c:	add	r1, pc, r1
     e60:	bl	964 <ilog@plt>
     e64:	ldr	r3, [pc, #840]	; 11b4 <m_challenge+0x670>
     e68:	ldr	r3, [r5, r3]
     e6c:	ldr	r3, [r3, #84]	; 0x54
     e70:	cmp	r3, #0
     e74:	beq	b98 <m_challenge+0x54>
     e78:	ldr	r2, [pc, #864]	; 11e0 <m_challenge+0x69c>
     e7c:	mov	r3, r6
     e80:	str	r7, [sp]
     e84:	str	r4, [sp, #4]
     e88:	add	r2, pc, r2
     e8c:	b	db0 <m_challenge+0x26c>
     e90:	ldr	r3, [r6, #40]	; 0x28
     e94:	cmp	r3, #0
     e98:	bne	eb0 <m_challenge+0x36c>
     e9c:	ldr	r1, [pc, #832]	; 11e4 <m_challenge+0x6a0>
     ea0:	add	r1, pc, r1
     ea4:	mov	r0, r4
     ea8:	bl	988 <sendto_one_notice@plt>
     eac:	b	b98 <m_challenge+0x54>
     eb0:	ldr	r3, [r6, #20]
     eb4:	tst	r3, #524288	; 0x80000
     eb8:	beq	f34 <m_challenge+0x3f0>
     ebc:	ldr	sl, [r4, #56]	; 0x38
     ec0:	ands	sl, sl, #16384	; 0x4000
     ec4:	bne	f34 <m_challenge+0x3f0>
     ec8:	ldr	r2, [pc, #792]	; 11e8 <m_challenge+0x6a4>
     ecc:	mov	r0, r4
     ed0:	movw	r1, #491	; 0x1eb
     ed4:	add	r6, r4, #88	; 0x58
     ed8:	add	r4, r4, #163	; 0xa3
     edc:	add	r2, pc, r2
     ee0:	bl	934 <sendto_one_numeric@plt>
     ee4:	ldr	r1, [pc, #768]	; 11ec <m_challenge+0x6a8>
     ee8:	mov	r3, r6
     eec:	mov	r0, #4
     ef0:	str	r7, [sp]
     ef4:	stmib	sp, {r4, r9}
     ef8:	ldr	r2, [r8, #4]
     efc:	add	r1, pc, r1
     f00:	bl	964 <ilog@plt>
     f04:	ldr	r3, [pc, #680]	; 11b4 <m_challenge+0x670>
     f08:	ldr	r3, [r5, r3]
     f0c:	ldr	r3, [r3, #84]	; 0x54
     f10:	cmp	r3, #0
     f14:	beq	b98 <m_challenge+0x54>
     f18:	ldr	r2, [pc, #720]	; 11f0 <m_challenge+0x6ac>
     f1c:	mov	r3, r6
     f20:	str	r7, [sp]
     f24:	str	r4, [sp, #4]
     f28:	add	r2, pc, r2
     f2c:	mov	r1, #0
     f30:	b	db4 <m_challenge+0x270>
     f34:	ldr	r1, [r6, #16]
     f38:	cmp	r1, #0
     f3c:	beq	fc0 <m_challenge+0x47c>
     f40:	ldr	r0, [r4, #444]	; 0x1bc
     f44:	cmp	r0, #0
     f48:	bne	fb4 <m_challenge+0x470>
     f4c:	ldr	r2, [pc, #672]	; 11f4 <m_challenge+0x6b0>
     f50:	mov	r0, r4
     f54:	movw	r1, #491	; 0x1eb
     f58:	add	r6, r4, #88	; 0x58
     f5c:	add	r4, r4, #163	; 0xa3
     f60:	add	r2, pc, r2
     f64:	bl	934 <sendto_one_numeric@plt>
     f68:	ldr	r1, [pc, #648]	; 11f8 <m_challenge+0x6b4>
     f6c:	mov	r3, r6
     f70:	mov	r0, #4
     f74:	str	r7, [sp]
     f78:	stmib	sp, {r4, r9}
     f7c:	ldr	r2, [r8, #4]
     f80:	add	r1, pc, r1
     f84:	bl	964 <ilog@plt>
     f88:	ldr	r3, [pc, #548]	; 11b4 <m_challenge+0x670>
     f8c:	ldr	r3, [r5, r3]
     f90:	ldr	r3, [r3, #84]	; 0x54
     f94:	cmp	r3, #0
     f98:	beq	b98 <m_challenge+0x54>
     f9c:	ldr	r2, [pc, #600]	; 11fc <m_challenge+0x6b8>
     fa0:	mov	r3, r6
     fa4:	str	r7, [sp]
     fa8:	str	r4, [sp, #4]
     fac:	add	r2, pc, r2
     fb0:	b	f2c <m_challenge+0x3e8>
     fb4:	bl	8a4 <rb_strcasecmp@plt>
     fb8:	cmp	r0, #0
     fbc:	bne	f4c <m_challenge+0x408>
     fc0:	ldr	sl, [r6, #40]	; 0x28
     fc4:	cmp	sl, #0
     fc8:	bne	fd8 <m_challenge+0x494>
     fcc:	ldr	r1, [pc, #556]	; 1200 <m_challenge+0x6bc>
     fd0:	add	r1, pc, r1
     fd4:	b	ea4 <m_challenge+0x360>
     fd8:	add	r9, sp, #128	; 0x80
     fdc:	mov	r1, #128	; 0x80
     fe0:	ldr	r8, [r4, #432]	; 0x1b0
     fe4:	mov	r0, r9
     fe8:	bl	904 <rb_get_random@plt>
     fec:	cmp	r0, #0
     ff0:	beq	1104 <m_challenge+0x5c0>
     ff4:	add	r7, sp, #32
     ff8:	mov	r0, r7
     ffc:	bl	970 <SHA1_Init@plt>
    1000:	mov	r2, #128	; 0x80
    1004:	mov	r1, r9
    1008:	mov	r0, r7
    100c:	bl	94c <SHA1_Update@plt>
    1010:	mov	r0, #20
    1014:	bl	8f8 <malloc@plt>
    1018:	mov	r1, r7
    101c:	str	r0, [r8, #284]	; 0x11c
    1020:	bl	9c4 <SHA1_Final@plt>
    1024:	mov	r0, sl
    1028:	bl	8b0 <RSA_size@plt>
    102c:	mov	r1, r0
    1030:	mov	r0, #1
    1034:	bl	85c <calloc@plt>
    1038:	subs	r7, r0, #0
    103c:	bne	1044 <m_challenge+0x500>
    1040:	bl	8bc <rb_outofmemory@plt>
    1044:	mov	r3, #4
    1048:	mov	r1, r9
    104c:	mov	r2, r7
    1050:	mov	r0, #128	; 0x80
    1054:	str	r3, [sp]
    1058:	mov	r3, sl
    105c:	bl	880 <RSA_public_encrypt@plt>
    1060:	subs	r1, r0, #0
    1064:	mov	r0, r7
    1068:	blt	10f0 <m_challenge+0x5ac>
    106c:	bl	9b8 <rb_base64_encode@plt>
    1070:	mov	r9, r0
    1074:	mov	r0, r7
    1078:	bl	af4 <rb_free>
    107c:	ldr	r7, [r4, #432]	; 0x1b0
    1080:	mov	r8, r9
    1084:	add	fp, sp, #256	; 0x100
    1088:	bl	868 <rb_current_time@plt>
    108c:	ldr	r3, [pc, #368]	; 1204 <m_challenge+0x6c0>
    1090:	str	r0, [r7, #304]	; 0x130
    1094:	add	r3, pc, r3
    1098:	str	r3, [sp, #20]
    109c:	movw	r2, #405	; 0x195
    10a0:	mov	r1, r8
    10a4:	mov	r0, fp
    10a8:	add	sl, r4, #88	; 0x58
    10ac:	bl	994 <rb_strlcpy@plt>
    10b0:	ldr	r3, [pc, #236]	; 11a4 <m_challenge+0x660>
    10b4:	str	r0, [sp, #16]
    10b8:	mov	r0, r4
    10bc:	ldr	r1, [sp, #20]
    10c0:	ldr	r7, [r5, r3]
    10c4:	mov	r3, sl
    10c8:	str	fp, [sp]
    10cc:	add	r7, r7, #88	; 0x58
    10d0:	mov	r2, r7
    10d4:	bl	88c <sendto_one@plt>
    10d8:	ldr	r3, [sp, #16]
    10dc:	movw	r2, #405	; 0x195
    10e0:	cmp	r3, r2
    10e4:	bls	1150 <m_challenge+0x60c>
    10e8:	add	r8, r8, #404	; 0x194
    10ec:	b	109c <m_challenge+0x558>
    10f0:	bl	af4 <rb_free>
    10f4:	ldr	r0, [r8, #284]	; 0x11c
    10f8:	bl	af4 <rb_free>
    10fc:	mov	r3, #0
    1100:	str	r3, [r8, #284]	; 0x11c
    1104:	ldr	r6, [pc, #252]	; 1208 <m_challenge+0x6c4>
    1108:	mov	r2, #0
    110c:	mov	r0, #2
    1110:	mov	r1, #0
    1114:	mov	r5, #100	; 0x64
    1118:	bl	91c <OPENSSL_init_crypto@plt>
    111c:	add	r6, pc, r6
    1120:	bl	97c <ERR_get_error@plt>
    1124:	cmp	r0, #0
    1128:	beq	fcc <m_challenge+0x488>
    112c:	mov	r1, #0
    1130:	bl	958 <ERR_error_string@plt>
    1134:	mov	r2, r0
    1138:	mov	r1, r6
    113c:	mov	r0, #0
    1140:	bl	964 <ilog@plt>
    1144:	subs	r5, r5, #1
    1148:	bne	1120 <m_challenge+0x5dc>
    114c:	b	fcc <m_challenge+0x488>
    1150:	ldr	r1, [pc, #180]	; 120c <m_challenge+0x6c8>
    1154:	mov	r3, sl
    1158:	mov	r2, r7
    115c:	mov	r0, r4
    1160:	add	r1, pc, r1
    1164:	bl	88c <sendto_one@plt>
    1168:	mov	r0, r9
    116c:	bl	af4 <rb_free>
    1170:	ldr	r5, [r6]
    1174:	ldr	r4, [r4, #24]
    1178:	mov	r0, r5
    117c:	bl	940 <strlen@plt>
    1180:	add	r0, r0, #1
    1184:	bl	8f8 <malloc@plt>
    1188:	subs	r6, r0, #0
    118c:	beq	1040 <m_challenge+0x4fc>
    1190:	mov	r1, r5
    1194:	bl	8ec <strcpy@plt>
    1198:	str	r6, [r4, #32]
    119c:	b	b98 <m_challenge+0x54>
    11a0:	.word	0x00011490
    11a4:	.word	0x00000098
    11a8:	.word	0x000006d7
    11ac:	.word	0x000006e7
    11b0:	.word	0x000006e6
    11b4:	.word	0x0000009c
    11b8:	.word	0x000006dc
    11bc:	.word	0x0000061f
    11c0:	.word	0x00000670
    11c4:	.word	0x00000665
    11c8:	.word	0x00000644
    11cc:	.word	0x00000661
    11d0:	.word	0x00000659
    11d4:	.word	0x00000654
    11d8:	.word	0x0000056c
    11dc:	.word	0x00000585
    11e0:	.word	0x0000057d
    11e4:	.word	0x000005b5
    11e8:	.word	0x000004cc
    11ec:	.word	0x0000059d
    11f0:	.word	0x000005ae
    11f4:	.word	0x00000448
    11f8:	.word	0x0000058f
    11fc:	.word	0x000005b2
    1200:	.word	0x000005da
    1204:	.word	0x00000543
    1208:	.word	0x000004ad
    120c:	.word	0x00000486

Disassembly of section .fini:

00001210 <_fini>:
    1210:	push	{r3, lr}
    1214:	pop	{r3, pc}
