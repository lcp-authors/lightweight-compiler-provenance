
../repos/prog2/1.4:     file format elf32-littlearm


Disassembly of section .init:

00010640 <.init>:
   10640:	push	{r3, lr}
   10644:	bl	10a28 <_start@@Base+0x3c>
   10648:	pop	{r3, pc}

Disassembly of section .plt:

0001064c <printf@plt-0x14>:
   1064c:	push	{lr}		; (str lr, [sp, #-4]!)
   10650:	ldr	lr, [pc, #4]	; 1065c <printf@plt-0x4>
   10654:	add	lr, pc, lr
   10658:	ldr	pc, [lr, #8]!
   1065c:	andeq	r0, r1, r4, lsr #19

00010660 <printf@plt>:
   10660:	add	ip, pc, #0, 12
   10664:	add	ip, ip, #16, 20	; 0x10000
   10668:	ldr	pc, [ip, #2468]!	; 0x9a4

0001066c <fopen@plt>:
   1066c:	add	ip, pc, #0, 12
   10670:	add	ip, ip, #16, 20	; 0x10000
   10674:	ldr	pc, [ip, #2460]!	; 0x99c

00010678 <free@plt>:
   10678:	add	ip, pc, #0, 12
   1067c:	add	ip, ip, #16, 20	; 0x10000
   10680:	ldr	pc, [ip, #2452]!	; 0x994

00010684 <malloc@plt>:
   10684:	add	ip, pc, #0, 12
   10688:	add	ip, ip, #16, 20	; 0x10000
   1068c:	ldr	pc, [ip, #2444]!	; 0x98c

00010690 <__libc_start_main@plt>:
   10690:	add	ip, pc, #0, 12
   10694:	add	ip, ip, #16, 20	; 0x10000
   10698:	ldr	pc, [ip, #2436]!	; 0x984

0001069c <__gmon_start__@plt>:
   1069c:	add	ip, pc, #0, 12
   106a0:	add	ip, ip, #16, 20	; 0x10000
   106a4:	ldr	pc, [ip, #2428]!	; 0x97c

000106a8 <exit@plt>:
   106a8:	add	ip, pc, #0, 12
   106ac:	add	ip, ip, #16, 20	; 0x10000
   106b0:	ldr	pc, [ip, #2420]!	; 0x974

000106b4 <fclose@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2412]!	; 0x96c

000106c0 <fseek@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2404]!	; 0x964

000106cc <abort@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2396]!	; 0x95c

000106d8 <getc@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2388]!	; 0x954

Disassembly of section .text:

000106e4 <main@@Base>:
   106e4:	push	{r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   106e8:	ldr	r1, [pc, #728]	; 109c8 <main@@Base+0x2e4>
   106ec:	ldr	r0, [pc, #728]	; 109cc <main@@Base+0x2e8>
   106f0:	bl	1066c <fopen@plt>
   106f4:	mov	r4, r0
   106f8:	bl	106d8 <getc@plt>
   106fc:	cmp	r0, #66	; 0x42
   10700:	beq	10714 <main@@Base+0x30>
   10704:	ldr	r0, [pc, #708]	; 109d0 <main@@Base+0x2ec>
   10708:	bl	10660 <printf@plt>
   1070c:	mov	r0, #1
   10710:	bl	106a8 <exit@plt>
   10714:	mov	r0, r4
   10718:	bl	106d8 <getc@plt>
   1071c:	cmp	r0, #77	; 0x4d
   10720:	bne	10704 <main@@Base+0x20>
   10724:	mov	r0, r4
   10728:	bl	106d8 <getc@plt>
   1072c:	mov	r6, r0
   10730:	mov	r0, r4
   10734:	bl	106d8 <getc@plt>
   10738:	mov	r7, r0
   1073c:	mov	r0, r4
   10740:	bl	106d8 <getc@plt>
   10744:	lsl	r5, r0, #16
   10748:	mov	r0, r4
   1074c:	bl	106d8 <getc@plt>
   10750:	orr	r5, r5, r7, lsl #8
   10754:	orr	r5, r5, r6
   10758:	orr	r1, r5, r0, lsl #24
   1075c:	ldr	r0, [pc, #624]	; 109d4 <main@@Base+0x2f0>
   10760:	bl	10660 <printf@plt>
   10764:	mov	r2, #1
   10768:	mov	r1, #4
   1076c:	mov	r0, r4
   10770:	bl	106c0 <fseek@plt>
   10774:	mov	r0, r4
   10778:	bl	106d8 <getc@plt>
   1077c:	mov	r5, r0
   10780:	mov	r0, r4
   10784:	bl	106d8 <getc@plt>
   10788:	mov	r7, r0
   1078c:	mov	r0, r4
   10790:	bl	106d8 <getc@plt>
   10794:	lsl	r6, r0, #16
   10798:	mov	r0, r4
   1079c:	bl	106d8 <getc@plt>
   107a0:	orr	r6, r6, r7, lsl #8
   107a4:	mov	r2, #1
   107a8:	mov	r1, #4
   107ac:	orr	r6, r6, r5
   107b0:	orr	r6, r6, r0, lsl #24
   107b4:	mov	r0, r4
   107b8:	bl	106c0 <fseek@plt>
   107bc:	mov	r0, r4
   107c0:	bl	106d8 <getc@plt>
   107c4:	mov	r5, r0
   107c8:	mov	r0, r4
   107cc:	bl	106d8 <getc@plt>
   107d0:	mov	r7, r0
   107d4:	mov	r0, r4
   107d8:	bl	106d8 <getc@plt>
   107dc:	lsl	r9, r0, #16
   107e0:	mov	r0, r4
   107e4:	bl	106d8 <getc@plt>
   107e8:	orr	r9, r9, r7, lsl #8
   107ec:	orr	r9, r9, r5
   107f0:	orr	r9, r9, r0, lsl #24
   107f4:	ldr	r0, [pc, #476]	; 109d8 <main@@Base+0x2f4>
   107f8:	mov	r1, r9
   107fc:	bl	10660 <printf@plt>
   10800:	mov	r0, r4
   10804:	bl	106d8 <getc@plt>
   10808:	mov	r7, r0
   1080c:	mov	r0, r4
   10810:	bl	106d8 <getc@plt>
   10814:	mov	r8, r0
   10818:	mov	r0, r4
   1081c:	bl	106d8 <getc@plt>
   10820:	lsl	r5, r0, #16
   10824:	mov	r0, r4
   10828:	bl	106d8 <getc@plt>
   1082c:	orr	r5, r5, r8, lsl #8
   10830:	orr	r5, r5, r7
   10834:	orr	r5, r5, r0, lsl #24
   10838:	ldr	r0, [pc, #412]	; 109dc <main@@Base+0x2f8>
   1083c:	mov	r1, r5
   10840:	bl	10660 <printf@plt>
   10844:	mov	r0, r4
   10848:	bl	106d8 <getc@plt>
   1084c:	mov	r7, r0
   10850:	mov	r0, r4
   10854:	bl	106d8 <getc@plt>
   10858:	orr	r0, r7, r0, lsl #8
   1085c:	cmp	r0, #1
   10860:	beq	10874 <main@@Base+0x190>
   10864:	ldr	r0, [pc, #372]	; 109e0 <main@@Base+0x2fc>
   10868:	bl	10660 <printf@plt>
   1086c:	mov	r0, #2
   10870:	b	10710 <main@@Base+0x2c>
   10874:	mov	r0, r4
   10878:	bl	106d8 <getc@plt>
   1087c:	mov	r7, r0
   10880:	mov	r0, r4
   10884:	bl	106d8 <getc@plt>
   10888:	orr	r7, r7, r0, lsl #8
   1088c:	ldr	r0, [pc, #336]	; 109e4 <main@@Base+0x300>
   10890:	mov	r1, r7
   10894:	bl	10660 <printf@plt>
   10898:	cmp	r7, #24
   1089c:	beq	108b0 <main@@Base+0x1cc>
   108a0:	ldr	r0, [pc, #320]	; 109e8 <main@@Base+0x304>
   108a4:	bl	10660 <printf@plt>
   108a8:	mov	r0, #3
   108ac:	b	10710 <main@@Base+0x2c>
   108b0:	mov	r1, r6
   108b4:	lsl	r6, r5, #2
   108b8:	mov	r2, #0
   108bc:	mov	r0, r4
   108c0:	add	sl, r9, r9, lsl #1
   108c4:	mov	r8, #0
   108c8:	bl	106c0 <fseek@plt>
   108cc:	mov	r0, r6
   108d0:	bl	10684 <malloc@plt>
   108d4:	mov	r7, r0
   108d8:	cmp	r8, r5
   108dc:	blt	10948 <main@@Base+0x264>
   108e0:	sub	sl, r5, #1
   108e4:	add	r6, r7, r6
   108e8:	cmp	sl, #0
   108ec:	bge	109b0 <main@@Base+0x2cc>
   108f0:	mov	r0, r4
   108f4:	mov	r4, #0
   108f8:	bl	106b4 <fclose@plt>
   108fc:	mov	r2, #0
   10900:	mov	r0, r7
   10904:	mov	r1, r2
   10908:	bl	10adc <print_pixelinfo@@Base>
   1090c:	mov	r2, #0
   10910:	mov	r1, #532	; 0x214
   10914:	mov	r0, r7
   10918:	bl	10adc <print_pixelinfo@@Base>
   1091c:	movw	r2, #443	; 0x1bb
   10920:	mov	r1, #408	; 0x198
   10924:	mov	r0, r7
   10928:	bl	10adc <print_pixelinfo@@Base>
   1092c:	cmp	r4, r5
   10930:	blt	109b8 <main@@Base+0x2d4>
   10934:	mov	r0, r7
   10938:	bl	10678 <free@plt>
   1093c:	mov	r0, #0
   10940:	add	sp, sp, #4
   10944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10948:	mov	r0, sl
   1094c:	bl	10684 <malloc@plt>
   10950:	str	r0, [r7, r8, lsl #2]
   10954:	add	r8, r8, #1
   10958:	b	108d8 <main@@Base+0x1f4>
   1095c:	mov	r0, r4
   10960:	add	fp, r8, r8, lsl #1
   10964:	add	r8, r8, #1
   10968:	bl	106d8 <getc@plt>
   1096c:	ldr	r3, [r6, #-4]
   10970:	add	r3, r3, fp
   10974:	strb	r0, [r3, #2]
   10978:	mov	r0, r4
   1097c:	bl	106d8 <getc@plt>
   10980:	ldr	r3, [r6, #-4]
   10984:	add	r3, r3, fp
   10988:	strb	r0, [r3, #1]
   1098c:	mov	r0, r4
   10990:	bl	106d8 <getc@plt>
   10994:	ldr	r3, [r6, #-4]
   10998:	strb	r0, [r3, fp]
   1099c:	cmp	r8, r9
   109a0:	blt	1095c <main@@Base+0x278>
   109a4:	sub	sl, sl, #1
   109a8:	sub	r6, r6, #4
   109ac:	b	108e8 <main@@Base+0x204>
   109b0:	mov	r8, #0
   109b4:	b	1099c <main@@Base+0x2b8>
   109b8:	ldr	r0, [r7, r4, lsl #2]
   109bc:	add	r4, r4, #1
   109c0:	bl	10678 <free@plt>
   109c4:	b	1092c <main@@Base+0x248>
   109c8:	andeq	r0, r1, sl, lsr #23
   109cc:	andeq	r0, r1, ip, lsr #23
   109d0:	andeq	r0, r1, r1, asr #23
   109d4:	strdeq	r0, [r1], -fp
   109d8:	andeq	r0, r1, lr, lsl ip
   109dc:	andeq	r0, r1, r5, lsr ip
   109e0:	andeq	r0, r1, fp, asr #24
   109e4:	andeq	r0, r1, fp, lsr #25
   109e8:			; <UNDEFINED> instruction: 0x00010cbf

000109ec <_start@@Base>:
   109ec:	mov	fp, #0
   109f0:	mov	lr, #0
   109f4:	pop	{r1}		; (ldr r1, [sp], #4)
   109f8:	mov	r2, sp
   109fc:	push	{r2}		; (str r2, [sp, #-4]!)
   10a00:	push	{r0}		; (str r0, [sp, #-4]!)
   10a04:	ldr	ip, [pc, #16]	; 10a1c <_start@@Base+0x30>
   10a08:	push	{ip}		; (str ip, [sp, #-4]!)
   10a0c:	ldr	r0, [pc, #12]	; 10a20 <_start@@Base+0x34>
   10a10:	ldr	r3, [pc, #12]	; 10a24 <_start@@Base+0x38>
   10a14:	bl	10690 <__libc_start_main@plt>
   10a18:	bl	106cc <abort@plt>
   10a1c:	andeq	r0, r1, r4, ror fp
   10a20:	andeq	r0, r1, r4, ror #13
   10a24:	andeq	r0, r1, r4, lsl fp
   10a28:	ldr	r3, [pc, #20]	; 10a44 <_start@@Base+0x58>
   10a2c:	ldr	r2, [pc, #20]	; 10a48 <_start@@Base+0x5c>
   10a30:	add	r3, pc, r3
   10a34:	ldr	r2, [r3, r2]
   10a38:	cmp	r2, #0
   10a3c:	bxeq	lr
   10a40:	b	1069c <__gmon_start__@plt>
   10a44:	andeq	r0, r1, r8, asr #11
   10a48:	andeq	r0, r0, r8, lsr r0
   10a4c:	ldr	r0, [pc, #24]	; 10a6c <_start@@Base+0x80>
   10a50:	ldr	r3, [pc, #24]	; 10a70 <_start@@Base+0x84>
   10a54:	cmp	r3, r0
   10a58:	bxeq	lr
   10a5c:	ldr	r3, [pc, #16]	; 10a74 <_start@@Base+0x88>
   10a60:	cmp	r3, #0
   10a64:	bxeq	lr
   10a68:	bx	r3
   10a6c:	andeq	r1, r2, r4, asr #32
   10a70:	andeq	r1, r2, r4, asr #32
   10a74:	andeq	r0, r0, r0
   10a78:	ldr	r0, [pc, #36]	; 10aa4 <_start@@Base+0xb8>
   10a7c:	ldr	r1, [pc, #36]	; 10aa8 <_start@@Base+0xbc>
   10a80:	sub	r1, r1, r0
   10a84:	asr	r1, r1, #2
   10a88:	add	r1, r1, r1, lsr #31
   10a8c:	asrs	r1, r1, #1
   10a90:	bxeq	lr
   10a94:	ldr	r3, [pc, #16]	; 10aac <_start@@Base+0xc0>
   10a98:	cmp	r3, #0
   10a9c:	bxeq	lr
   10aa0:	bx	r3
   10aa4:	andeq	r1, r2, r4, asr #32
   10aa8:	andeq	r1, r2, r4, asr #32
   10aac:	andeq	r0, r0, r0
   10ab0:	push	{r4, lr}
   10ab4:	ldr	r4, [pc, #24]	; 10ad4 <_start@@Base+0xe8>
   10ab8:	ldrb	r3, [r4]
   10abc:	cmp	r3, #0
   10ac0:	popne	{r4, pc}
   10ac4:	bl	10a4c <_start@@Base+0x60>
   10ac8:	mov	r3, #1
   10acc:	strb	r3, [r4]
   10ad0:	pop	{r4, pc}
   10ad4:	andeq	r1, r2, r4, asr #32
   10ad8:	b	10a78 <_start@@Base+0x8c>

00010adc <print_pixelinfo@@Base>:
   10adc:	ldr	ip, [r0, r1, lsl #2]
   10ae0:	add	r3, r2, r2, lsl #1
   10ae4:	push	{r0, r1, r2, lr}
   10ae8:	add	r0, ip, r3
   10aec:	ldrb	r3, [ip, r3]
   10af0:	ldrb	ip, [r0, #2]
   10af4:	str	ip, [sp, #4]
   10af8:	ldrb	r0, [r0, #1]
   10afc:	str	r0, [sp]
   10b00:	ldr	r0, [pc, #8]	; 10b10 <print_pixelinfo@@Base+0x34>
   10b04:	bl	10660 <printf@plt>
   10b08:	add	sp, sp, #12
   10b0c:	pop	{pc}		; (ldr pc, [sp], #4)
   10b10:	andeq	r0, r1, r4, lsl #23

00010b14 <__libc_csu_init@@Base>:
   10b14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b18:	mov	r7, r0
   10b1c:	ldr	r6, [pc, #72]	; 10b6c <__libc_csu_init@@Base+0x58>
   10b20:	ldr	r5, [pc, #72]	; 10b70 <__libc_csu_init@@Base+0x5c>
   10b24:	add	r6, pc, r6
   10b28:	add	r5, pc, r5
   10b2c:	sub	r6, r6, r5
   10b30:	mov	r8, r1
   10b34:	mov	r9, r2
   10b38:	bl	10640 <printf@plt-0x20>
   10b3c:	asrs	r6, r6, #2
   10b40:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b44:	mov	r4, #0
   10b48:	add	r4, r4, #1
   10b4c:	ldr	r3, [r5], #4
   10b50:	mov	r2, r9
   10b54:	mov	r1, r8
   10b58:	mov	r0, r7
   10b5c:	blx	r3
   10b60:	cmp	r6, r4
   10b64:	bne	10b48 <__libc_csu_init@@Base+0x34>
   10b68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b6c:	andeq	r0, r1, r8, ror #7
   10b70:	andeq	r0, r1, r0, ror #7

00010b74 <__libc_csu_fini@@Base>:
   10b74:	bx	lr

Disassembly of section .fini:

00010b78 <.fini>:
   10b78:	push	{r3, lr}
   10b7c:	pop	{r3, pc}
