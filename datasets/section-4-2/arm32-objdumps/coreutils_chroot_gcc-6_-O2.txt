
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	118b4 <__assert_fail@plt+0x70c>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <calloc@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <calloc@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	r7, r1, r0, asr r1

00010eb4 <calloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <endgrent@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <getpwnam@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <getpwuid@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <execvp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <__strtoull_internal@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <mbsinit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <fputc_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <dcgettext@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <chdir@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <iswprint@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <setgroups@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <fwrite@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <chroot@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <__fpending@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <getenv@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <setgid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <malloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <__libc_start_main@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <__freading@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__ctype_b_loc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <strtoul@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #32]!

00011088 <strlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #24]!

00011094 <strchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <getgrouplist@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <memset@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__printf_chk@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <fileno@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <__fprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <fclose@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <fseeko64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strtok@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <setlocale@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <endpwent@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3992]!	; 0xf98

00011154 <getgroups@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3984]!	; 0xf90

00011160 <canonicalize_file_name@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3976]!	; 0xf88

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3968]!	; 0xf80

00011178 <strncmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3960]!	; 0xf78

00011184 <abort@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3952]!	; 0xf70

00011190 <getgrgid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3944]!	; 0xf68

0001119c <getgrnam@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3936]!	; 0xf60

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b4 <.text>:
   111b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   111b8:	sub	sp, sp, #44	; 0x2c
   111bc:	mvn	r3, #0
   111c0:	mov	r4, #0
   111c4:	mov	r7, r0
   111c8:	ldr	r0, [r1]
   111cc:	str	r3, [sp, #20]
   111d0:	str	r3, [sp, #24]
   111d4:	mov	r6, r1
   111d8:	str	r4, [sp, #28]
   111dc:	str	r4, [sp, #32]
   111e0:	bl	1208c <__assert_fail@plt+0xee4>
   111e4:	ldr	r1, [pc, #1552]	; 117fc <__assert_fail@plt+0x654>
   111e8:	mov	r0, #6
   111ec:	bl	11118 <setlocale@plt>
   111f0:	ldr	r1, [pc, #1544]	; 11800 <__assert_fail@plt+0x658>
   111f4:	ldr	r0, [pc, #1544]	; 11804 <__assert_fail@plt+0x65c>
   111f8:	bl	1116c <bindtextdomain@plt>
   111fc:	ldr	r0, [pc, #1536]	; 11804 <__assert_fail@plt+0x65c>
   11200:	bl	10f8c <textdomain@plt>
   11204:	ldr	r3, [pc, #1532]	; 11808 <__assert_fail@plt+0x660>
   11208:	mov	r2, #125	; 0x7d
   1120c:	ldr	r0, [pc, #1528]	; 1180c <__assert_fail@plt+0x664>
   11210:	str	r4, [sp, #12]
   11214:	str	r2, [r3]
   11218:	bl	16664 <__assert_fail@plt+0x54bc>
   1121c:	ldr	r9, [pc, #1516]	; 11810 <__assert_fail@plt+0x668>
   11220:	ldr	r8, [pc, #1516]	; 11814 <__assert_fail@plt+0x66c>
   11224:	ldr	fp, [pc, #1516]	; 11818 <__assert_fail@plt+0x670>
   11228:	mov	sl, r4
   1122c:	mov	r5, #0
   11230:	str	r5, [sp]
   11234:	mov	r3, r9
   11238:	mov	r2, r8
   1123c:	mov	r1, r6
   11240:	mov	r0, r7
   11244:	bl	11058 <getopt_long@plt>
   11248:	cmn	r0, #1
   1124c:	beq	11324 <__assert_fail@plt+0x17c>
   11250:	cmp	r0, #256	; 0x100
   11254:	beq	11314 <__assert_fail@plt+0x16c>
   11258:	bgt	11274 <__assert_fail@plt+0xcc>
   1125c:	cmn	r0, #3
   11260:	beq	11290 <__assert_fail@plt+0xe8>
   11264:	cmn	r0, #2
   11268:	bne	1130c <__assert_fail@plt+0x164>
   1126c:	mov	r0, r5
   11270:	bl	11bd8 <__assert_fail@plt+0xa30>
   11274:	cmp	r0, fp
   11278:	beq	112c0 <__assert_fail@plt+0x118>
   1127c:	ldr	r3, [pc, #1432]	; 1181c <__assert_fail@plt+0x674>
   11280:	cmp	r0, r3
   11284:	bne	1130c <__assert_fail@plt+0x164>
   11288:	mov	r4, #1
   1128c:	b	1122c <__assert_fail@plt+0x84>
   11290:	ldr	r1, [pc, #1416]	; 11820 <__assert_fail@plt+0x678>
   11294:	ldr	r3, [pc, #1416]	; 11824 <__assert_fail@plt+0x67c>
   11298:	ldr	r2, [pc, #1416]	; 11828 <__assert_fail@plt+0x680>
   1129c:	str	r5, [sp, #4]
   112a0:	ldr	r0, [r1]
   112a4:	ldr	r3, [r3]
   112a8:	ldr	r1, [pc, #1404]	; 1182c <__assert_fail@plt+0x684>
   112ac:	str	r2, [sp]
   112b0:	ldr	r2, [pc, #1400]	; 11830 <__assert_fail@plt+0x688>
   112b4:	bl	14738 <__assert_fail@plt+0x3590>
   112b8:	mov	r0, r5
   112bc:	bl	11070 <exit@plt>
   112c0:	ldr	r3, [pc, #1388]	; 11834 <__assert_fail@plt+0x68c>
   112c4:	ldr	sl, [r3]
   112c8:	mov	r0, sl
   112cc:	bl	11088 <strlen@plt>
   112d0:	cmp	r0, #0
   112d4:	beq	1122c <__assert_fail@plt+0x84>
   112d8:	sub	r0, r0, #1
   112dc:	ldrb	r3, [sl, r0]
   112e0:	cmp	r3, #58	; 0x3a
   112e4:	strbeq	r5, [sl, r0]
   112e8:	b	1122c <__assert_fail@plt+0x84>
   112ec:	mov	r2, #5
   112f0:	ldr	r1, [pc, #1344]	; 11838 <__assert_fail@plt+0x690>
   112f4:	mov	r0, r5
   112f8:	bl	10f74 <dcgettext@plt>
   112fc:	mov	r1, r5
   11300:	mov	r2, r0
   11304:	mov	r0, r5
   11308:	bl	11004 <error@plt>
   1130c:	mov	r0, #125	; 0x7d
   11310:	bl	11bd8 <__assert_fail@plt+0xa30>
   11314:	ldr	r3, [pc, #1304]	; 11834 <__assert_fail@plt+0x68c>
   11318:	ldr	r3, [r3]
   1131c:	str	r3, [sp, #12]
   11320:	b	1122c <__assert_fail@plt+0x84>
   11324:	ldr	r8, [pc, #1296]	; 1183c <__assert_fail@plt+0x694>
   11328:	ldr	r3, [r8]
   1132c:	cmp	r7, r3
   11330:	ble	112ec <__assert_fail@plt+0x144>
   11334:	ldr	r5, [r6, r3, lsl #2]
   11338:	mov	r0, r5
   1133c:	bl	11160 <canonicalize_file_name@plt>
   11340:	subs	r9, r0, #0
   11344:	beq	1135c <__assert_fail@plt+0x1b4>
   11348:	mov	r1, r9
   1134c:	ldr	r0, [pc, #1260]	; 11840 <__assert_fail@plt+0x698>
   11350:	bl	10ef0 <strcmp@plt>
   11354:	cmp	r0, #0
   11358:	beq	11510 <__assert_fail@plt+0x368>
   1135c:	mov	r0, r9
   11360:	bl	12034 <__assert_fail@plt+0xe8c>
   11364:	cmp	r4, #0
   11368:	bne	117b0 <__assert_fail@plt+0x608>
   1136c:	cmp	sl, #0
   11370:	beq	1138c <__assert_fail@plt+0x1e4>
   11374:	str	r4, [sp]
   11378:	mov	r3, r4
   1137c:	add	r2, sp, #24
   11380:	add	r1, sp, #20
   11384:	mov	r0, sl
   11388:	bl	14254 <__assert_fail@plt+0x30ac>
   1138c:	ldr	r0, [sp, #20]
   11390:	cmn	r0, #1
   11394:	beq	11684 <__assert_fail@plt+0x4dc>
   11398:	ldr	r3, [sp, #12]
   1139c:	cmp	r3, #0
   113a0:	beq	11738 <__assert_fail@plt+0x590>
   113a4:	ldr	r3, [sp, #24]
   113a8:	cmn	r3, #1
   113ac:	beq	116e0 <__assert_fail@plt+0x538>
   113b0:	mov	r4, #0
   113b4:	ldr	r3, [sp, #12]
   113b8:	ldrb	r3, [r3]
   113bc:	cmp	r3, #0
   113c0:	bne	116c8 <__assert_fail@plt+0x520>
   113c4:	mov	r0, r5
   113c8:	bl	10fe0 <chroot@plt>
   113cc:	cmp	r0, #0
   113d0:	bne	115fc <__assert_fail@plt+0x454>
   113d4:	ldr	r0, [pc, #1124]	; 11840 <__assert_fail@plt+0x698>
   113d8:	bl	10f98 <chdir@plt>
   113dc:	cmp	r0, #0
   113e0:	bne	11790 <__assert_fail@plt+0x5e8>
   113e4:	ldr	r3, [r8]
   113e8:	add	r3, r3, #1
   113ec:	cmp	r7, r3
   113f0:	addne	r6, r6, r3, lsl #2
   113f4:	beq	1165c <__assert_fail@plt+0x4b4>
   113f8:	cmp	sl, #0
   113fc:	beq	11538 <__assert_fail@plt+0x390>
   11400:	mov	r3, #0
   11404:	mov	r0, sl
   11408:	str	r3, [sp]
   1140c:	add	r2, sp, #24
   11410:	add	r1, sp, #20
   11414:	bl	14254 <__assert_fail@plt+0x30ac>
   11418:	subs	r5, r0, #0
   1141c:	beq	11538 <__assert_fail@plt+0x390>
   11420:	ldr	r0, [sp, #20]
   11424:	cmn	r0, #1
   11428:	beq	11638 <__assert_fail@plt+0x490>
   1142c:	ldr	r3, [sp, #12]
   11430:	cmp	r3, #0
   11434:	beq	115d8 <__assert_fail@plt+0x430>
   11438:	ldr	r3, [sp, #24]
   1143c:	cmn	r3, #1
   11440:	movne	r3, #0
   11444:	strne	r3, [sp, #36]	; 0x24
   11448:	ldrne	r5, [sp, #28]
   1144c:	beq	115d8 <__assert_fail@plt+0x430>
   11450:	ldr	r3, [sp, #12]
   11454:	ldrb	r3, [r3]
   11458:	cmp	r3, #0
   1145c:	bne	115a0 <__assert_fail@plt+0x3f8>
   11460:	mov	r1, r5
   11464:	ldr	r0, [sp, #32]
   11468:	bl	10fb0 <setgroups@plt>
   1146c:	cmp	r0, #0
   11470:	bne	11780 <__assert_fail@plt+0x5d8>
   11474:	ldr	r0, [sp, #36]	; 0x24
   11478:	bl	12034 <__assert_fail@plt+0xe8c>
   1147c:	ldr	r0, [sp, #28]
   11480:	bl	12034 <__assert_fail@plt+0xe8c>
   11484:	ldr	r0, [sp, #24]
   11488:	cmn	r0, #1
   1148c:	beq	1149c <__assert_fail@plt+0x2f4>
   11490:	bl	1101c <setgid@plt>
   11494:	cmp	r0, #0
   11498:	bne	117ec <__assert_fail@plt+0x644>
   1149c:	ldr	r0, [sp, #20]
   114a0:	cmn	r0, #1
   114a4:	beq	114b4 <__assert_fail@plt+0x30c>
   114a8:	bl	11148 <setuid@plt>
   114ac:	cmp	r0, #0
   114b0:	bne	117a0 <__assert_fail@plt+0x5f8>
   114b4:	mov	r1, r6
   114b8:	ldr	r0, [r6]
   114bc:	bl	10f38 <execvp@plt>
   114c0:	bl	110a0 <__errno_location@plt>
   114c4:	mov	r2, #5
   114c8:	ldr	r1, [pc, #884]	; 11844 <__assert_fail@plt+0x69c>
   114cc:	ldr	r4, [r0]
   114d0:	mov	r0, #0
   114d4:	bl	10f74 <dcgettext@plt>
   114d8:	mov	r5, r0
   114dc:	ldr	r0, [r6]
   114e0:	bl	13f4c <__assert_fail@plt+0x2da4>
   114e4:	mov	r1, r4
   114e8:	cmp	r4, #2
   114ec:	mov	r2, r5
   114f0:	movne	r4, #126	; 0x7e
   114f4:	moveq	r4, #127	; 0x7f
   114f8:	mov	r3, r0
   114fc:	mov	r0, #0
   11500:	bl	11004 <error@plt>
   11504:	mov	r0, r4
   11508:	add	sp, sp, #44	; 0x2c
   1150c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11510:	mov	r0, r9
   11514:	bl	12034 <__assert_fail@plt+0xe8c>
   11518:	mov	r0, r5
   1151c:	bl	10fe0 <chroot@plt>
   11520:	cmp	r0, #0
   11524:	bne	115fc <__assert_fail@plt+0x454>
   11528:	cmp	r4, #0
   1152c:	movne	r4, r0
   11530:	bne	113e4 <__assert_fail@plt+0x23c>
   11534:	b	113d4 <__assert_fail@plt+0x22c>
   11538:	ldr	r0, [sp, #20]
   1153c:	cmn	r0, #1
   11540:	bne	1142c <__assert_fail@plt+0x284>
   11544:	ldr	r3, [sp, #12]
   11548:	ldr	r5, [sp, #28]
   1154c:	cmp	r3, #0
   11550:	mov	r3, #0
   11554:	str	r3, [sp, #36]	; 0x24
   11558:	bne	11450 <__assert_fail@plt+0x2a8>
   1155c:	ldr	r1, [sp, #24]
   11560:	cmp	r4, #0
   11564:	cmnne	r1, #1
   11568:	beq	11588 <__assert_fail@plt+0x3e0>
   1156c:	mov	r0, r4
   11570:	add	r2, sp, #36	; 0x24
   11574:	bl	14dbc <__assert_fail@plt+0x3c14>
   11578:	cmp	r0, #0
   1157c:	strgt	r0, [sp, #32]
   11580:	ldrgt	r5, [sp, #36]	; 0x24
   11584:	ble	1174c <__assert_fail@plt+0x5a4>
   11588:	ldr	r3, [sp, #20]
   1158c:	ldr	r2, [sp, #12]
   11590:	cmn	r3, #1
   11594:	cmpeq	r2, #0
   11598:	bne	11460 <__assert_fail@plt+0x2b8>
   1159c:	b	11474 <__assert_fail@plt+0x2cc>
   115a0:	add	r2, sp, #40	; 0x28
   115a4:	add	r1, sp, #36	; 0x24
   115a8:	ldr	r3, [r2, #-8]!
   115ac:	ldr	r0, [sp, #12]
   115b0:	clz	r3, r3
   115b4:	lsr	r3, r3, #5
   115b8:	bl	119a0 <__assert_fail@plt+0x7f8>
   115bc:	cmp	r0, #0
   115c0:	beq	116c0 <__assert_fail@plt+0x518>
   115c4:	ldr	r3, [sp, #32]
   115c8:	cmp	r3, #0
   115cc:	moveq	r4, #125	; 0x7d
   115d0:	beq	11504 <__assert_fail@plt+0x35c>
   115d4:	b	11588 <__assert_fail@plt+0x3e0>
   115d8:	bl	10efc <getpwuid@plt>
   115dc:	ldr	r3, [sp, #24]
   115e0:	subs	r5, r0, #0
   115e4:	beq	11704 <__assert_fail@plt+0x55c>
   115e8:	cmn	r3, #1
   115ec:	ldr	r4, [r5]
   115f0:	ldreq	r3, [r5, #12]
   115f4:	streq	r3, [sp, #24]
   115f8:	b	11544 <__assert_fail@plt+0x39c>
   115fc:	bl	110a0 <__errno_location@plt>
   11600:	mov	r2, #5
   11604:	ldr	r1, [pc, #572]	; 11848 <__assert_fail@plt+0x6a0>
   11608:	ldr	r4, [r0]
   1160c:	mov	r0, #0
   11610:	bl	10f74 <dcgettext@plt>
   11614:	mov	r1, r5
   11618:	mov	r6, r0
   1161c:	mov	r0, #4
   11620:	bl	13d0c <__assert_fail@plt+0x2b64>
   11624:	mov	r2, r6
   11628:	mov	r1, r4
   1162c:	mov	r3, r0
   11630:	mov	r0, #125	; 0x7d
   11634:	bl	11004 <error@plt>
   11638:	ldr	r3, [sp, #24]
   1163c:	cmn	r3, #1
   11640:	bne	11544 <__assert_fail@plt+0x39c>
   11644:	bl	110a0 <__errno_location@plt>
   11648:	mov	r3, r5
   1164c:	ldr	r2, [pc, #504]	; 1184c <__assert_fail@plt+0x6a4>
   11650:	ldr	r1, [r0]
   11654:	mov	r0, #125	; 0x7d
   11658:	bl	11004 <error@plt>
   1165c:	ldr	r0, [pc, #492]	; 11850 <__assert_fail@plt+0x6a8>
   11660:	bl	11010 <getenv@plt>
   11664:	mov	r2, #0
   11668:	ldr	r3, [pc, #484]	; 11854 <__assert_fail@plt+0x6ac>
   1166c:	ldr	r1, [pc, #484]	; 11858 <__assert_fail@plt+0x6b0>
   11670:	stmib	r6, {r1, r2}
   11674:	cmp	r0, r2
   11678:	moveq	r0, r3
   1167c:	str	r0, [r6]
   11680:	b	113f8 <__assert_fail@plt+0x250>
   11684:	mov	r4, #0
   11688:	ldr	r3, [sp, #12]
   1168c:	cmp	r3, #0
   11690:	bne	113b4 <__assert_fail@plt+0x20c>
   11694:	ldr	r1, [sp, #24]
   11698:	cmn	r1, #1
   1169c:	beq	113c4 <__assert_fail@plt+0x21c>
   116a0:	cmp	r4, #0
   116a4:	beq	113c4 <__assert_fail@plt+0x21c>
   116a8:	add	r2, sp, #28
   116ac:	mov	r0, r4
   116b0:	bl	14dbc <__assert_fail@plt+0x3c14>
   116b4:	cmp	r0, #0
   116b8:	strgt	r0, [sp, #32]
   116bc:	b	113c4 <__assert_fail@plt+0x21c>
   116c0:	ldr	r5, [sp, #36]	; 0x24
   116c4:	b	11588 <__assert_fail@plt+0x3e0>
   116c8:	mov	r3, #0
   116cc:	add	r2, sp, #32
   116d0:	add	r1, sp, #28
   116d4:	ldr	r0, [sp, #12]
   116d8:	bl	119a0 <__assert_fail@plt+0x7f8>
   116dc:	b	113c4 <__assert_fail@plt+0x21c>
   116e0:	bl	10efc <getpwuid@plt>
   116e4:	cmp	r0, #0
   116e8:	beq	113b0 <__assert_fail@plt+0x208>
   116ec:	ldr	r3, [sp, #24]
   116f0:	ldr	r4, [r0]
   116f4:	cmn	r3, #1
   116f8:	ldreq	r3, [r0, #12]
   116fc:	streq	r3, [sp, #24]
   11700:	b	11688 <__assert_fail@plt+0x4e0>
   11704:	cmn	r3, #1
   11708:	bne	11544 <__assert_fail@plt+0x39c>
   1170c:	bl	110a0 <__errno_location@plt>
   11710:	mov	r2, #5
   11714:	ldr	r1, [pc, #320]	; 1185c <__assert_fail@plt+0x6b4>
   11718:	ldr	r4, [r0]
   1171c:	mov	r0, r5
   11720:	bl	10f74 <dcgettext@plt>
   11724:	mov	r1, r4
   11728:	ldr	r3, [sp, #20]
   1172c:	mov	r2, r0
   11730:	mov	r0, #125	; 0x7d
   11734:	bl	11004 <error@plt>
   11738:	bl	10efc <getpwuid@plt>
   1173c:	cmp	r0, #0
   11740:	bne	116ec <__assert_fail@plt+0x544>
   11744:	ldr	r4, [sp, #12]
   11748:	b	113c4 <__assert_fail@plt+0x21c>
   1174c:	ldr	r3, [sp, #32]
   11750:	cmp	r3, #0
   11754:	bne	11588 <__assert_fail@plt+0x3e0>
   11758:	bl	110a0 <__errno_location@plt>
   1175c:	ldr	r1, [pc, #252]	; 11860 <__assert_fail@plt+0x6b8>
   11760:	mov	r2, #5
   11764:	ldr	r4, [r0]
   11768:	mov	r0, #0
   1176c:	bl	10f74 <dcgettext@plt>
   11770:	mov	r1, r4
   11774:	mov	r2, r0
   11778:	mov	r0, #125	; 0x7d
   1177c:	bl	11004 <error@plt>
   11780:	bl	110a0 <__errno_location@plt>
   11784:	mov	r2, #5
   11788:	ldr	r1, [pc, #212]	; 11864 <__assert_fail@plt+0x6bc>
   1178c:	b	11764 <__assert_fail@plt+0x5bc>
   11790:	bl	110a0 <__errno_location@plt>
   11794:	mov	r2, #5
   11798:	ldr	r1, [pc, #200]	; 11868 <__assert_fail@plt+0x6c0>
   1179c:	b	11764 <__assert_fail@plt+0x5bc>
   117a0:	bl	110a0 <__errno_location@plt>
   117a4:	mov	r2, #5
   117a8:	ldr	r1, [pc, #188]	; 1186c <__assert_fail@plt+0x6c4>
   117ac:	b	11764 <__assert_fail@plt+0x5bc>
   117b0:	mov	r2, #5
   117b4:	ldr	r1, [pc, #180]	; 11870 <__assert_fail@plt+0x6c8>
   117b8:	mov	r0, #0
   117bc:	bl	10f74 <dcgettext@plt>
   117c0:	ldr	r1, [pc, #120]	; 11840 <__assert_fail@plt+0x698>
   117c4:	mov	r4, r0
   117c8:	mov	r0, #4
   117cc:	bl	13d0c <__assert_fail@plt+0x2b64>
   117d0:	mov	r1, #0
   117d4:	mov	r2, r4
   117d8:	mov	r3, r0
   117dc:	mov	r0, r1
   117e0:	bl	11004 <error@plt>
   117e4:	mov	r0, #125	; 0x7d
   117e8:	bl	11bd8 <__assert_fail@plt+0xa30>
   117ec:	bl	110a0 <__errno_location@plt>
   117f0:	mov	r2, #5
   117f4:	ldr	r1, [pc, #120]	; 11874 <__assert_fail@plt+0x6cc>
   117f8:	b	11764 <__assert_fail@plt+0x5bc>
   117fc:	andeq	r6, r1, r0, lsl #19
   11800:	andeq	r6, r1, r8, ror sl
   11804:	andeq	r6, r1, r8, asr #19
   11808:	andeq	r8, r2, ip, lsl r1
   1180c:	andeq	r1, r1, r0, asr pc
   11810:	andeq	r6, r1, r0, asr #13
   11814:	andeq	r6, r1, r0, lsr #21
   11818:	andeq	r0, r0, r1, lsl #2
   1181c:	andeq	r0, r0, r2, lsl #2
   11820:	andeq	r8, r2, r4, ror r1
   11824:	andeq	r8, r2, r8, lsl r1
   11828:	muleq	r1, r0, sl
   1182c:	andeq	r6, r1, r0, asr r7
   11830:	andeq	r6, r1, r4, asr #19
   11834:	andeq	r8, r2, r8, ror r1
   11838:	andeq	r6, r1, r4, lsr #21
   1183c:	andeq	r8, r2, r8, ror #2
   11840:	ldrdeq	r6, [r1], -r0
   11844:	ldrdeq	r6, [r1], -ip
   11848:	andeq	r6, r1, ip, ror #21
   1184c:			; <UNDEFINED> instruction: 0x00016cb4
   11850:	andeq	r6, r1, r0, lsr fp
   11854:	andeq	r6, r1, r0, ror sl
   11858:	andeq	r6, r1, r8, lsr fp
   1185c:	andeq	r6, r1, ip, lsr fp
   11860:	andeq	r6, r1, r4, ror #22
   11864:	andeq	r6, r1, r8, lsl #23
   11868:	andeq	r6, r1, r0, lsl fp
   1186c:	andeq	r6, r1, r4, asr #23
   11870:			; <UNDEFINED> instruction: 0x00016ab4
   11874:	andeq	r6, r1, ip, lsr #23
   11878:	mov	fp, #0
   1187c:	mov	lr, #0
   11880:	pop	{r1}		; (ldr r1, [sp], #4)
   11884:	mov	r2, sp
   11888:	push	{r2}		; (str r2, [sp, #-4]!)
   1188c:	push	{r0}		; (str r0, [sp, #-4]!)
   11890:	ldr	ip, [pc, #16]	; 118a8 <__assert_fail@plt+0x700>
   11894:	push	{ip}		; (str ip, [sp, #-4]!)
   11898:	ldr	r0, [pc, #12]	; 118ac <__assert_fail@plt+0x704>
   1189c:	ldr	r3, [pc, #12]	; 118b0 <__assert_fail@plt+0x708>
   118a0:	bl	11034 <__libc_start_main@plt>
   118a4:	bl	11184 <abort@plt>
   118a8:	andeq	r6, r1, r0, ror #12
   118ac:			; <UNDEFINED> instruction: 0x000111b4
   118b0:	andeq	r6, r1, r0, lsl #12
   118b4:	ldr	r3, [pc, #20]	; 118d0 <__assert_fail@plt+0x728>
   118b8:	ldr	r2, [pc, #20]	; 118d4 <__assert_fail@plt+0x72c>
   118bc:	add	r3, pc, r3
   118c0:	ldr	r2, [r3, r2]
   118c4:	cmp	r2, #0
   118c8:	bxeq	lr
   118cc:	b	1104c <__gmon_start__@plt>
   118d0:	andeq	r6, r1, ip, lsr r7
   118d4:	andeq	r0, r0, ip, lsl #2
   118d8:	ldr	r3, [pc, #28]	; 118fc <__assert_fail@plt+0x754>
   118dc:	ldr	r0, [pc, #28]	; 11900 <__assert_fail@plt+0x758>
   118e0:	sub	r3, r3, r0
   118e4:	cmp	r3, #6
   118e8:	bxls	lr
   118ec:	ldr	r3, [pc, #16]	; 11904 <__assert_fail@plt+0x75c>
   118f0:	cmp	r3, #0
   118f4:	bxeq	lr
   118f8:	bx	r3
   118fc:	andeq	r8, r2, r3, ror #2
   11900:	andeq	r8, r2, r0, ror #2
   11904:	andeq	r0, r0, r0
   11908:	ldr	r1, [pc, #36]	; 11934 <__assert_fail@plt+0x78c>
   1190c:	ldr	r0, [pc, #36]	; 11938 <__assert_fail@plt+0x790>
   11910:	sub	r1, r1, r0
   11914:	asr	r1, r1, #2
   11918:	add	r1, r1, r1, lsr #31
   1191c:	asrs	r1, r1, #1
   11920:	bxeq	lr
   11924:	ldr	r3, [pc, #16]	; 1193c <__assert_fail@plt+0x794>
   11928:	cmp	r3, #0
   1192c:	bxeq	lr
   11930:	bx	r3
   11934:	andeq	r8, r2, r0, ror #2
   11938:	andeq	r8, r2, r0, ror #2
   1193c:	andeq	r0, r0, r0
   11940:	push	{r4, lr}
   11944:	ldr	r4, [pc, #24]	; 11964 <__assert_fail@plt+0x7bc>
   11948:	ldrb	r3, [r4]
   1194c:	cmp	r3, #0
   11950:	popne	{r4, pc}
   11954:	bl	118d8 <__assert_fail@plt+0x730>
   11958:	mov	r3, #1
   1195c:	strb	r3, [r4]
   11960:	pop	{r4, pc}
   11964:	andeq	r8, r2, ip, ror r1
   11968:	ldr	r0, [pc, #40]	; 11998 <__assert_fail@plt+0x7f0>
   1196c:	ldr	r3, [r0]
   11970:	cmp	r3, #0
   11974:	bne	1197c <__assert_fail@plt+0x7d4>
   11978:	b	11908 <__assert_fail@plt+0x760>
   1197c:	ldr	r3, [pc, #24]	; 1199c <__assert_fail@plt+0x7f4>
   11980:	cmp	r3, #0
   11984:	beq	11978 <__assert_fail@plt+0x7d0>
   11988:	push	{r4, lr}
   1198c:	blx	r3
   11990:	pop	{r4, lr}
   11994:	b	11908 <__assert_fail@plt+0x760>
   11998:	andeq	r7, r2, r4, lsl pc
   1199c:	andeq	r0, r0, r0
   119a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119a4:	sub	sp, sp, #60	; 0x3c
   119a8:	mov	r7, #0
   119ac:	str	r1, [sp, #20]
   119b0:	str	r2, [sp, #28]
   119b4:	str	r3, [sp, #16]
   119b8:	str	r7, [sp, #44]	; 0x2c
   119bc:	str	r0, [sp, #32]
   119c0:	bl	14d60 <__assert_fail@plt+0x3bb8>
   119c4:	ldr	r1, [pc, #508]	; 11bc8 <__assert_fail@plt+0xa20>
   119c8:	str	r0, [sp, #24]
   119cc:	bl	1110c <strtok@plt>
   119d0:	subs	r4, r0, #0
   119d4:	beq	11ba4 <__assert_fail@plt+0x9fc>
   119d8:	mov	r6, r7
   119dc:	str	r7, [sp, #12]
   119e0:	ldr	sl, [pc, #484]	; 11bcc <__assert_fail@plt+0xa24>
   119e4:	ldr	r7, [pc, #476]	; 11bc8 <__assert_fail@plt+0xa20>
   119e8:	mov	r5, r6
   119ec:	mov	r8, r6
   119f0:	mov	r9, #10
   119f4:	str	sl, [sp]
   119f8:	add	r3, sp, #48	; 0x30
   119fc:	mov	r2, r9
   11a00:	mov	r1, r6
   11a04:	mov	r0, r4
   11a08:	bl	15384 <__assert_fail@plt+0x41dc>
   11a0c:	cmp	r0, #0
   11a10:	bne	11af0 <__assert_fail@plt+0x948>
   11a14:	ldrd	r2, [sp, #48]	; 0x30
   11a18:	mov	r1, #0
   11a1c:	mvn	r0, #0
   11a20:	cmp	r3, r1
   11a24:	cmpeq	r2, r0
   11a28:	bhi	11af0 <__assert_fail@plt+0x948>
   11a2c:	bl	11064 <__ctype_b_loc@plt>
   11a30:	ldr	r1, [r0]
   11a34:	mov	r0, r4
   11a38:	ldrb	r2, [r4], #1
   11a3c:	lsl	r3, r2, #1
   11a40:	ldrh	fp, [r1, r3]
   11a44:	ands	fp, fp, #8192	; 0x2000
   11a48:	bne	11a34 <__assert_fail@plt+0x88c>
   11a4c:	cmp	r2, #43	; 0x2b
   11a50:	beq	11a68 <__assert_fail@plt+0x8c0>
   11a54:	bl	1119c <getgrnam@plt>
   11a58:	cmp	r0, #0
   11a5c:	ldrne	r3, [r0, #8]
   11a60:	strne	fp, [sp, #52]	; 0x34
   11a64:	strne	r3, [sp, #48]	; 0x30
   11a68:	ldr	r3, [sp, #44]	; 0x2c
   11a6c:	cmp	r3, r5
   11a70:	beq	11b18 <__assert_fail@plt+0x970>
   11a74:	ldr	r3, [sp, #48]	; 0x30
   11a78:	str	r3, [r8, r5, lsl #2]
   11a7c:	add	r5, r5, #1
   11a80:	mov	r1, r7
   11a84:	mov	r0, r6
   11a88:	bl	1110c <strtok@plt>
   11a8c:	subs	r4, r0, #0
   11a90:	bne	119f4 <__assert_fail@plt+0x84c>
   11a94:	ldr	r3, [sp, #12]
   11a98:	add	r3, r3, #1
   11a9c:	cmp	r5, #0
   11aa0:	movne	r3, #0
   11aa4:	andeq	r3, r3, #1
   11aa8:	cmp	r3, #0
   11aac:	beq	11bac <__assert_fail@plt+0xa04>
   11ab0:	ldr	r3, [sp, #16]
   11ab4:	cmp	r3, #0
   11ab8:	beq	11b3c <__assert_fail@plt+0x994>
   11abc:	mov	r2, #5
   11ac0:	ldr	r1, [pc, #264]	; 11bd0 <__assert_fail@plt+0xa28>
   11ac4:	mov	r0, #0
   11ac8:	bl	10f74 <dcgettext@plt>
   11acc:	mov	r4, r0
   11ad0:	ldr	r0, [sp, #32]
   11ad4:	bl	13f4c <__assert_fail@plt+0x2da4>
   11ad8:	mov	r1, #0
   11adc:	mov	r2, r4
   11ae0:	mov	r3, r0
   11ae4:	mov	r0, r1
   11ae8:	bl	11004 <error@plt>
   11aec:	b	11b3c <__assert_fail@plt+0x994>
   11af0:	mov	r0, r4
   11af4:	bl	1119c <getgrnam@plt>
   11af8:	cmp	r0, #0
   11afc:	beq	11b30 <__assert_fail@plt+0x988>
   11b00:	ldr	r3, [r0, #8]
   11b04:	str	r6, [sp, #52]	; 0x34
   11b08:	str	r3, [sp, #48]	; 0x30
   11b0c:	ldr	r3, [sp, #44]	; 0x2c
   11b10:	cmp	r3, r5
   11b14:	bne	11a74 <__assert_fail@plt+0x8cc>
   11b18:	mov	r0, r8
   11b1c:	mov	r2, #4
   11b20:	add	r1, sp, #44	; 0x2c
   11b24:	bl	1493c <__assert_fail@plt+0x3794>
   11b28:	mov	r8, r0
   11b2c:	b	11a74 <__assert_fail@plt+0x8cc>
   11b30:	ldr	r3, [sp, #16]
   11b34:	cmp	r3, #0
   11b38:	bne	11b60 <__assert_fail@plt+0x9b8>
   11b3c:	ldr	r3, [sp, #20]
   11b40:	str	r8, [r3]
   11b44:	mvn	r3, #0
   11b48:	str	r3, [sp, #12]
   11b4c:	ldr	r0, [sp, #24]
   11b50:	bl	12034 <__assert_fail@plt+0xe8c>
   11b54:	ldr	r0, [sp, #12]
   11b58:	add	sp, sp, #60	; 0x3c
   11b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b60:	bl	110a0 <__errno_location@plt>
   11b64:	mvn	r3, #0
   11b68:	mov	r2, #5
   11b6c:	ldr	r1, [pc, #96]	; 11bd4 <__assert_fail@plt+0xa2c>
   11b70:	str	r3, [sp, #12]
   11b74:	ldr	fp, [r0]
   11b78:	mov	r0, r6
   11b7c:	bl	10f74 <dcgettext@plt>
   11b80:	str	r0, [sp, #36]	; 0x24
   11b84:	mov	r0, r4
   11b88:	bl	13f4c <__assert_fail@plt+0x2da4>
   11b8c:	ldr	r2, [sp, #36]	; 0x24
   11b90:	mov	r1, fp
   11b94:	mov	r3, r0
   11b98:	mov	r0, r6
   11b9c:	bl	11004 <error@plt>
   11ba0:	b	11a80 <__assert_fail@plt+0x8d8>
   11ba4:	mov	r8, r4
   11ba8:	b	11ab0 <__assert_fail@plt+0x908>
   11bac:	ldr	r3, [sp, #12]
   11bb0:	cmp	r3, #0
   11bb4:	ldr	r3, [sp, #20]
   11bb8:	str	r8, [r3]
   11bbc:	ldreq	r3, [sp, #28]
   11bc0:	streq	r5, [r3]
   11bc4:	b	11b4c <__assert_fail@plt+0x9a4>
   11bc8:	andeq	r6, r1, r0, lsr #14
   11bcc:	andeq	r6, r1, r0, lsl #19
   11bd0:	andeq	r6, r1, r8, lsr r7
   11bd4:	andeq	r6, r1, r4, lsr #14
   11bd8:	subs	r6, r0, #0
   11bdc:	push	{r7, lr}
   11be0:	sub	sp, sp, #56	; 0x38
   11be4:	beq	11c20 <__assert_fail@plt+0xa78>
   11be8:	ldr	r3, [pc, #736]	; 11ed0 <__assert_fail@plt+0xd28>
   11bec:	mov	r2, #5
   11bf0:	ldr	r1, [pc, #732]	; 11ed4 <__assert_fail@plt+0xd2c>
   11bf4:	mov	r0, #0
   11bf8:	ldr	r4, [r3]
   11bfc:	bl	10f74 <dcgettext@plt>
   11c00:	ldr	r3, [pc, #720]	; 11ed8 <__assert_fail@plt+0xd30>
   11c04:	mov	r1, #1
   11c08:	ldr	r3, [r3]
   11c0c:	mov	r2, r0
   11c10:	mov	r0, r4
   11c14:	bl	110e8 <__fprintf_chk@plt>
   11c18:	mov	r0, r6
   11c1c:	bl	11070 <exit@plt>
   11c20:	mov	r2, #5
   11c24:	ldr	r1, [pc, #688]	; 11edc <__assert_fail@plt+0xd34>
   11c28:	bl	10f74 <dcgettext@plt>
   11c2c:	ldr	r3, [pc, #676]	; 11ed8 <__assert_fail@plt+0xd30>
   11c30:	ldr	r7, [pc, #680]	; 11ee0 <__assert_fail@plt+0xd38>
   11c34:	ldr	r3, [r3]
   11c38:	mov	r2, r3
   11c3c:	mov	r1, r0
   11c40:	mov	r0, #1
   11c44:	bl	110d0 <__printf_chk@plt>
   11c48:	mov	r2, #5
   11c4c:	ldr	r1, [pc, #656]	; 11ee4 <__assert_fail@plt+0xd3c>
   11c50:	mov	r0, r6
   11c54:	bl	10f74 <dcgettext@plt>
   11c58:	ldr	r1, [r7]
   11c5c:	bl	10ecc <fputs_unlocked@plt>
   11c60:	mov	r2, #5
   11c64:	ldr	r1, [pc, #636]	; 11ee8 <__assert_fail@plt+0xd40>
   11c68:	mov	r0, r6
   11c6c:	bl	10f74 <dcgettext@plt>
   11c70:	ldr	r1, [r7]
   11c74:	bl	10ecc <fputs_unlocked@plt>
   11c78:	mov	r2, #5
   11c7c:	ldr	r1, [pc, #616]	; 11eec <__assert_fail@plt+0xd44>
   11c80:	mov	r0, r6
   11c84:	bl	10f74 <dcgettext@plt>
   11c88:	ldr	r1, [r7]
   11c8c:	bl	10ecc <fputs_unlocked@plt>
   11c90:	mov	r2, #5
   11c94:	ldr	r1, [pc, #596]	; 11ef0 <__assert_fail@plt+0xd48>
   11c98:	mov	r0, r6
   11c9c:	bl	10f74 <dcgettext@plt>
   11ca0:	ldr	r1, [pc, #588]	; 11ef4 <__assert_fail@plt+0xd4c>
   11ca4:	mov	r4, r0
   11ca8:	mov	r0, #4
   11cac:	bl	13d0c <__assert_fail@plt+0x2b64>
   11cb0:	mov	r1, r4
   11cb4:	ldr	r4, [pc, #572]	; 11ef8 <__assert_fail@plt+0xd50>
   11cb8:	mov	r2, r0
   11cbc:	mov	r0, #1
   11cc0:	bl	110d0 <__printf_chk@plt>
   11cc4:	mov	r2, #5
   11cc8:	ldr	r1, [pc, #556]	; 11efc <__assert_fail@plt+0xd54>
   11ccc:	mov	r0, r6
   11cd0:	bl	10f74 <dcgettext@plt>
   11cd4:	ldr	r1, [r7]
   11cd8:	bl	10ecc <fputs_unlocked@plt>
   11cdc:	mov	r2, #5
   11ce0:	ldr	r1, [pc, #536]	; 11f00 <__assert_fail@plt+0xd58>
   11ce4:	mov	r0, r6
   11ce8:	bl	10f74 <dcgettext@plt>
   11cec:	ldr	r1, [r7]
   11cf0:	bl	10ecc <fputs_unlocked@plt>
   11cf4:	mov	r2, #5
   11cf8:	ldr	r1, [pc, #516]	; 11f04 <__assert_fail@plt+0xd5c>
   11cfc:	mov	r0, r6
   11d00:	bl	10f74 <dcgettext@plt>
   11d04:	ldr	r1, [r7]
   11d08:	bl	10ecc <fputs_unlocked@plt>
   11d0c:	ldm	r4!, {r0, r1, r2, r3}
   11d10:	mov	lr, sp
   11d14:	stmia	lr!, {r0, r1, r2, r3}
   11d18:	ldm	r4!, {r0, r1, r2, r3}
   11d1c:	ldr	ip, [sp]
   11d20:	stmia	lr!, {r0, r1, r2, r3}
   11d24:	cmp	ip, #0
   11d28:	ldm	r4!, {r0, r1, r2, r3}
   11d2c:	stmia	lr!, {r0, r1, r2, r3}
   11d30:	ldm	r4, {r0, r1}
   11d34:	moveq	r4, sp
   11d38:	stm	lr, {r0, r1}
   11d3c:	beq	11d6c <__assert_fail@plt+0xbc4>
   11d40:	ldr	r5, [pc, #448]	; 11f08 <__assert_fail@plt+0xd60>
   11d44:	mov	r4, sp
   11d48:	b	11d58 <__assert_fail@plt+0xbb0>
   11d4c:	ldr	ip, [r4, #8]!
   11d50:	cmp	ip, #0
   11d54:	beq	11d6c <__assert_fail@plt+0xbc4>
   11d58:	mov	r1, ip
   11d5c:	mov	r0, r5
   11d60:	bl	10ef0 <strcmp@plt>
   11d64:	cmp	r0, #0
   11d68:	bne	11d4c <__assert_fail@plt+0xba4>
   11d6c:	ldr	r4, [r4, #4]
   11d70:	mov	r2, #5
   11d74:	cmp	r4, #0
   11d78:	ldr	r1, [pc, #396]	; 11f0c <__assert_fail@plt+0xd64>
   11d7c:	beq	11e24 <__assert_fail@plt+0xc7c>
   11d80:	mov	r0, #0
   11d84:	bl	10f74 <dcgettext@plt>
   11d88:	ldr	r3, [pc, #384]	; 11f10 <__assert_fail@plt+0xd68>
   11d8c:	ldr	r2, [pc, #384]	; 11f14 <__assert_fail@plt+0xd6c>
   11d90:	mov	r1, r0
   11d94:	mov	r0, #1
   11d98:	bl	110d0 <__printf_chk@plt>
   11d9c:	mov	r1, #0
   11da0:	mov	r0, #5
   11da4:	bl	11118 <setlocale@plt>
   11da8:	cmp	r0, #0
   11dac:	ldreq	r5, [pc, #340]	; 11f08 <__assert_fail@plt+0xd60>
   11db0:	beq	11dcc <__assert_fail@plt+0xc24>
   11db4:	mov	r2, #3
   11db8:	ldr	r1, [pc, #344]	; 11f18 <__assert_fail@plt+0xd70>
   11dbc:	bl	11178 <strncmp@plt>
   11dc0:	ldr	r5, [pc, #320]	; 11f08 <__assert_fail@plt+0xd60>
   11dc4:	cmp	r0, #0
   11dc8:	bne	11eb4 <__assert_fail@plt+0xd0c>
   11dcc:	mov	r2, #5
   11dd0:	ldr	r1, [pc, #324]	; 11f1c <__assert_fail@plt+0xd74>
   11dd4:	mov	r0, #0
   11dd8:	bl	10f74 <dcgettext@plt>
   11ddc:	ldr	r3, [pc, #292]	; 11f08 <__assert_fail@plt+0xd60>
   11de0:	ldr	r2, [pc, #296]	; 11f10 <__assert_fail@plt+0xd68>
   11de4:	mov	r1, r0
   11de8:	mov	r0, #1
   11dec:	bl	110d0 <__printf_chk@plt>
   11df0:	mov	r2, #5
   11df4:	ldr	r1, [pc, #292]	; 11f20 <__assert_fail@plt+0xd78>
   11df8:	mov	r0, #0
   11dfc:	bl	10f74 <dcgettext@plt>
   11e00:	ldr	r2, [pc, #284]	; 11f24 <__assert_fail@plt+0xd7c>
   11e04:	cmp	r4, r5
   11e08:	ldr	r3, [pc, #280]	; 11f28 <__assert_fail@plt+0xd80>
   11e0c:	movne	r3, r2
   11e10:	mov	r1, r0
   11e14:	mov	r2, r4
   11e18:	mov	r0, #1
   11e1c:	bl	110d0 <__printf_chk@plt>
   11e20:	b	11c18 <__assert_fail@plt+0xa70>
   11e24:	mov	r0, r4
   11e28:	bl	10f74 <dcgettext@plt>
   11e2c:	ldr	r3, [pc, #220]	; 11f10 <__assert_fail@plt+0xd68>
   11e30:	ldr	r2, [pc, #220]	; 11f14 <__assert_fail@plt+0xd6c>
   11e34:	mov	r1, r0
   11e38:	mov	r0, #1
   11e3c:	bl	110d0 <__printf_chk@plt>
   11e40:	mov	r1, r4
   11e44:	mov	r0, #5
   11e48:	bl	11118 <setlocale@plt>
   11e4c:	cmp	r0, #0
   11e50:	beq	11e68 <__assert_fail@plt+0xcc0>
   11e54:	mov	r2, #3
   11e58:	ldr	r1, [pc, #184]	; 11f18 <__assert_fail@plt+0xd70>
   11e5c:	bl	11178 <strncmp@plt>
   11e60:	cmp	r0, #0
   11e64:	bne	11eac <__assert_fail@plt+0xd04>
   11e68:	mov	r2, #5
   11e6c:	ldr	r1, [pc, #168]	; 11f1c <__assert_fail@plt+0xd74>
   11e70:	mov	r0, #0
   11e74:	bl	10f74 <dcgettext@plt>
   11e78:	ldr	r3, [pc, #136]	; 11f08 <__assert_fail@plt+0xd60>
   11e7c:	ldr	r2, [pc, #140]	; 11f10 <__assert_fail@plt+0xd68>
   11e80:	mov	r4, r3
   11e84:	mov	r1, r0
   11e88:	mov	r0, #1
   11e8c:	bl	110d0 <__printf_chk@plt>
   11e90:	ldr	r1, [pc, #136]	; 11f20 <__assert_fail@plt+0xd78>
   11e94:	mov	r2, #5
   11e98:	mov	r0, #0
   11e9c:	bl	10f74 <dcgettext@plt>
   11ea0:	ldr	r3, [pc, #128]	; 11f28 <__assert_fail@plt+0xd80>
   11ea4:	mov	r1, r0
   11ea8:	b	11e14 <__assert_fail@plt+0xc6c>
   11eac:	ldr	r5, [pc, #84]	; 11f08 <__assert_fail@plt+0xd60>
   11eb0:	mov	r4, r5
   11eb4:	mov	r2, #5
   11eb8:	ldr	r1, [pc, #108]	; 11f2c <__assert_fail@plt+0xd84>
   11ebc:	mov	r0, #0
   11ec0:	bl	10f74 <dcgettext@plt>
   11ec4:	ldr	r1, [r7]
   11ec8:	bl	10ecc <fputs_unlocked@plt>
   11ecc:	b	11dcc <__assert_fail@plt+0xc24>
   11ed0:	andeq	r8, r2, r0, ror r1
   11ed4:	andeq	r6, r1, r8, asr r7
   11ed8:	andeq	r8, r2, r8, lsl #3
   11edc:	andeq	r6, r1, r0, lsl #15
   11ee0:	andeq	r8, r2, r4, ror r1
   11ee4:	andeq	r6, r1, r0, asr #15
   11ee8:	strdeq	r6, [r1], -r4
   11eec:	andeq	r6, r1, r0, asr #16
   11ef0:	andeq	r6, r1, ip, lsl #17
   11ef4:	ldrdeq	r6, [r1], -r0
   11ef8:	andeq	r6, r1, r8, lsl #13
   11efc:	ldrdeq	r6, [r1], -r4
   11f00:	andeq	r6, r1, r4, lsl #18
   11f04:	andeq	r6, r1, ip, lsr r9
   11f08:	andeq	r6, r1, r0, asr r7
   11f0c:	andeq	r6, r1, r4, lsl #19
   11f10:	muleq	r1, ip, r9
   11f14:	andeq	r6, r1, r4, asr #19
   11f18:	ldrdeq	r6, [r1], -r4
   11f1c:	andeq	r6, r1, r0, lsr #20
   11f20:	andeq	r6, r1, ip, lsr sl
   11f24:	andeq	r6, r1, r0, lsl #19
   11f28:	andeq	r6, r1, r0, lsl #24
   11f2c:	ldrdeq	r6, [r1], -r8
   11f30:	ldr	r3, [pc, #4]	; 11f3c <__assert_fail@plt+0xd94>
   11f34:	str	r0, [r3]
   11f38:	bx	lr
   11f3c:	andeq	r8, r2, r0, lsl #3
   11f40:	ldr	r3, [pc, #4]	; 11f4c <__assert_fail@plt+0xda4>
   11f44:	strb	r0, [r3, #4]
   11f48:	bx	lr
   11f4c:	andeq	r8, r2, r0, lsl #3
   11f50:	ldr	r3, [pc, #192]	; 12018 <__assert_fail@plt+0xe70>
   11f54:	push	{r4, r5, r6, lr}
   11f58:	sub	sp, sp, #8
   11f5c:	ldr	r0, [r3]
   11f60:	bl	159fc <__assert_fail@plt+0x4854>
   11f64:	cmp	r0, #0
   11f68:	beq	11f8c <__assert_fail@plt+0xde4>
   11f6c:	ldr	r4, [pc, #168]	; 1201c <__assert_fail@plt+0xe74>
   11f70:	ldrb	r3, [r4, #4]
   11f74:	cmp	r3, #0
   11f78:	beq	11fa8 <__assert_fail@plt+0xe00>
   11f7c:	bl	110a0 <__errno_location@plt>
   11f80:	ldr	r3, [r0]
   11f84:	cmp	r3, #32
   11f88:	bne	11fa8 <__assert_fail@plt+0xe00>
   11f8c:	ldr	r3, [pc, #140]	; 12020 <__assert_fail@plt+0xe78>
   11f90:	ldr	r0, [r3]
   11f94:	bl	159fc <__assert_fail@plt+0x4854>
   11f98:	cmp	r0, #0
   11f9c:	bne	11ff0 <__assert_fail@plt+0xe48>
   11fa0:	add	sp, sp, #8
   11fa4:	pop	{r4, r5, r6, pc}
   11fa8:	mov	r2, #5
   11fac:	ldr	r1, [pc, #112]	; 12024 <__assert_fail@plt+0xe7c>
   11fb0:	mov	r0, #0
   11fb4:	bl	10f74 <dcgettext@plt>
   11fb8:	ldr	r4, [r4]
   11fbc:	cmp	r4, #0
   11fc0:	mov	r5, r0
   11fc4:	beq	11ffc <__assert_fail@plt+0xe54>
   11fc8:	bl	110a0 <__errno_location@plt>
   11fcc:	ldr	r6, [r0]
   11fd0:	mov	r0, r4
   11fd4:	bl	13db4 <__assert_fail@plt+0x2c0c>
   11fd8:	mov	r1, r6
   11fdc:	str	r5, [sp]
   11fe0:	ldr	r2, [pc, #64]	; 12028 <__assert_fail@plt+0xe80>
   11fe4:	mov	r3, r0
   11fe8:	mov	r0, #0
   11fec:	bl	11004 <error@plt>
   11ff0:	ldr	r3, [pc, #52]	; 1202c <__assert_fail@plt+0xe84>
   11ff4:	ldr	r0, [r3]
   11ff8:	bl	10f20 <_exit@plt>
   11ffc:	bl	110a0 <__errno_location@plt>
   12000:	mov	r3, r5
   12004:	ldr	r2, [pc, #36]	; 12030 <__assert_fail@plt+0xe88>
   12008:	ldr	r1, [r0]
   1200c:	mov	r0, r4
   12010:	bl	11004 <error@plt>
   12014:	b	11ff0 <__assert_fail@plt+0xe48>
   12018:	andeq	r8, r2, r4, ror r1
   1201c:	andeq	r8, r2, r0, lsl #3
   12020:	andeq	r8, r2, r0, ror r1
   12024:	andeq	r6, r1, r4, lsr #25
   12028:			; <UNDEFINED> instruction: 0x00016cb0
   1202c:	andeq	r8, r2, ip, lsl r1
   12030:			; <UNDEFINED> instruction: 0x00016cb4
   12034:	push	{r4, r5, lr}
   12038:	sub	sp, sp, #12
   1203c:	mov	r5, r0
   12040:	bl	110a0 <__errno_location@plt>
   12044:	mov	r2, #0
   12048:	mov	r4, r0
   1204c:	ldr	r3, [r0]
   12050:	str	r2, [r4]
   12054:	mov	r0, r5
   12058:	str	r3, [sp]
   1205c:	str	r3, [sp, #4]
   12060:	bl	10f14 <free@plt>
   12064:	ldr	r3, [r4]
   12068:	add	r2, sp, #8
   1206c:	cmp	r3, #0
   12070:	moveq	r3, #4
   12074:	movne	r3, #0
   12078:	add	r3, r2, r3
   1207c:	ldr	r3, [r3, #-8]
   12080:	str	r3, [r4]
   12084:	add	sp, sp, #12
   12088:	pop	{r4, r5, pc}
   1208c:	push	{r4, r5, r6, lr}
   12090:	subs	r4, r0, #0
   12094:	beq	12108 <__assert_fail@plt+0xf60>
   12098:	mov	r1, #47	; 0x2f
   1209c:	bl	11130 <strrchr@plt>
   120a0:	subs	r5, r0, #0
   120a4:	beq	120f4 <__assert_fail@plt+0xf4c>
   120a8:	add	r6, r5, #1
   120ac:	sub	r3, r6, r4
   120b0:	cmp	r3, #6
   120b4:	ble	120f4 <__assert_fail@plt+0xf4c>
   120b8:	mov	r2, #7
   120bc:	ldr	r1, [pc, #96]	; 12124 <__assert_fail@plt+0xf7c>
   120c0:	sub	r0, r5, #6
   120c4:	bl	11178 <strncmp@plt>
   120c8:	cmp	r0, #0
   120cc:	bne	120f4 <__assert_fail@plt+0xf4c>
   120d0:	mov	r2, #3
   120d4:	ldr	r1, [pc, #76]	; 12128 <__assert_fail@plt+0xf80>
   120d8:	mov	r0, r6
   120dc:	bl	11178 <strncmp@plt>
   120e0:	cmp	r0, #0
   120e4:	movne	r4, r6
   120e8:	ldreq	r3, [pc, #60]	; 1212c <__assert_fail@plt+0xf84>
   120ec:	addeq	r4, r5, #4
   120f0:	streq	r4, [r3]
   120f4:	ldr	r2, [pc, #52]	; 12130 <__assert_fail@plt+0xf88>
   120f8:	ldr	r3, [pc, #52]	; 12134 <__assert_fail@plt+0xf8c>
   120fc:	str	r4, [r2]
   12100:	str	r4, [r3]
   12104:	pop	{r4, r5, r6, pc}
   12108:	ldr	r3, [pc, #40]	; 12138 <__assert_fail@plt+0xf90>
   1210c:	mov	r2, #55	; 0x37
   12110:	mov	r1, #1
   12114:	ldr	r3, [r3]
   12118:	ldr	r0, [pc, #28]	; 1213c <__assert_fail@plt+0xf94>
   1211c:	bl	10fbc <fwrite@plt>
   12120:	bl	11184 <abort@plt>
   12124:	strdeq	r6, [r1], -r0
   12128:	strdeq	r6, [r1], -r8
   1212c:	andeq	r8, r2, r0, ror #2
   12130:	andeq	r8, r2, r8, lsl #3
   12134:	andeq	r8, r2, r4, ror #2
   12138:	andeq	r8, r2, r0, ror r1
   1213c:			; <UNDEFINED> instruction: 0x00016cb8
   12140:	push	{r4, r5, r6, lr}
   12144:	mov	r2, #48	; 0x30
   12148:	mov	r4, r1
   1214c:	mov	r1, #0
   12150:	mov	r5, r0
   12154:	bl	110c4 <memset@plt>
   12158:	cmp	r4, #10
   1215c:	beq	1216c <__assert_fail@plt+0xfc4>
   12160:	str	r4, [r5]
   12164:	mov	r0, r5
   12168:	pop	{r4, r5, r6, pc}
   1216c:	bl	11184 <abort@plt>
   12170:	push	{r4, r5, r6, lr}
   12174:	mov	r4, r0
   12178:	mov	r5, r1
   1217c:	bl	15c80 <__assert_fail@plt+0x4ad8>
   12180:	ldrb	r3, [r0]
   12184:	bic	r3, r3, #32
   12188:	cmp	r3, #85	; 0x55
   1218c:	bne	121ec <__assert_fail@plt+0x1044>
   12190:	ldrb	r3, [r0, #1]
   12194:	bic	r3, r3, #32
   12198:	cmp	r3, #84	; 0x54
   1219c:	bne	12228 <__assert_fail@plt+0x1080>
   121a0:	ldrb	r3, [r0, #2]
   121a4:	bic	r3, r3, #32
   121a8:	cmp	r3, #70	; 0x46
   121ac:	bne	12228 <__assert_fail@plt+0x1080>
   121b0:	ldrb	r3, [r0, #3]
   121b4:	cmp	r3, #45	; 0x2d
   121b8:	bne	12228 <__assert_fail@plt+0x1080>
   121bc:	ldrb	r3, [r0, #4]
   121c0:	cmp	r3, #56	; 0x38
   121c4:	bne	12228 <__assert_fail@plt+0x1080>
   121c8:	ldrb	r3, [r0, #5]
   121cc:	cmp	r3, #0
   121d0:	bne	12228 <__assert_fail@plt+0x1080>
   121d4:	ldrb	r2, [r4]
   121d8:	ldr	r3, [pc, #152]	; 12278 <__assert_fail@plt+0x10d0>
   121dc:	ldr	r0, [pc, #152]	; 1227c <__assert_fail@plt+0x10d4>
   121e0:	cmp	r2, #96	; 0x60
   121e4:	movne	r0, r3
   121e8:	pop	{r4, r5, r6, pc}
   121ec:	cmp	r3, #71	; 0x47
   121f0:	bne	12228 <__assert_fail@plt+0x1080>
   121f4:	ldrb	r3, [r0, #1]
   121f8:	bic	r3, r3, #32
   121fc:	cmp	r3, #66	; 0x42
   12200:	bne	12228 <__assert_fail@plt+0x1080>
   12204:	ldrb	r3, [r0, #2]
   12208:	cmp	r3, #49	; 0x31
   1220c:	bne	12228 <__assert_fail@plt+0x1080>
   12210:	ldrb	r3, [r0, #3]
   12214:	cmp	r3, #56	; 0x38
   12218:	bne	12228 <__assert_fail@plt+0x1080>
   1221c:	ldrb	r3, [r0, #4]
   12220:	cmp	r3, #48	; 0x30
   12224:	beq	1223c <__assert_fail@plt+0x1094>
   12228:	ldr	r3, [pc, #80]	; 12280 <__assert_fail@plt+0x10d8>
   1222c:	cmp	r5, #9
   12230:	ldr	r0, [pc, #76]	; 12284 <__assert_fail@plt+0x10dc>
   12234:	movne	r0, r3
   12238:	pop	{r4, r5, r6, pc}
   1223c:	ldrb	r3, [r0, #5]
   12240:	cmp	r3, #51	; 0x33
   12244:	bne	12228 <__assert_fail@plt+0x1080>
   12248:	ldrb	r3, [r0, #6]
   1224c:	cmp	r3, #48	; 0x30
   12250:	bne	12228 <__assert_fail@plt+0x1080>
   12254:	ldrb	r3, [r0, #7]
   12258:	cmp	r3, #0
   1225c:	bne	12228 <__assert_fail@plt+0x1080>
   12260:	ldrb	r2, [r4]
   12264:	ldr	r3, [pc, #28]	; 12288 <__assert_fail@plt+0x10e0>
   12268:	ldr	r0, [pc, #28]	; 1228c <__assert_fail@plt+0x10e4>
   1226c:	cmp	r2, #96	; 0x60
   12270:	movne	r0, r3
   12274:	pop	{r4, r5, r6, pc}
   12278:	andeq	r6, r1, r4, asr sp
   1227c:	andeq	r6, r1, r0, asr sp
   12280:	andeq	r6, r1, r4, ror #26
   12284:	andeq	r6, r1, r0, ror #26
   12288:	andeq	r6, r1, ip, asr sp
   1228c:	andeq	r6, r1, r8, asr sp
   12290:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12294:	sub	sp, sp, #116	; 0x74
   12298:	mov	sl, r0
   1229c:	str	r3, [sp, #24]
   122a0:	mov	r3, #1
   122a4:	mov	r8, r1
   122a8:	str	r2, [sp, #56]	; 0x38
   122ac:	str	r3, [sp, #36]	; 0x24
   122b0:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   122b4:	ldr	r3, [sp, #156]	; 0x9c
   122b8:	mov	fp, r8
   122bc:	mov	r2, #0
   122c0:	lsr	r3, r3, #1
   122c4:	and	r3, r3, #1
   122c8:	str	r2, [sp, #68]	; 0x44
   122cc:	str	r3, [sp, #28]
   122d0:	str	r2, [sp, #40]	; 0x28
   122d4:	str	r2, [sp, #44]	; 0x2c
   122d8:	str	r2, [sp, #52]	; 0x34
   122dc:	str	r2, [sp, #64]	; 0x40
   122e0:	str	r2, [sp, #72]	; 0x48
   122e4:	str	sl, [sp, #32]
   122e8:	str	r0, [sp, #76]	; 0x4c
   122ec:	ldr	r3, [sp, #152]	; 0x98
   122f0:	cmp	r3, #10
   122f4:	ldrls	pc, [pc, r3, lsl #2]
   122f8:	b	134b8 <__assert_fail@plt+0x2310>
   122fc:	andeq	r2, r1, r8, lsr #6
   12300:	andeq	r2, r1, r0, lsl r6
   12304:	andeq	r2, r1, r4, lsr r6
   12308:	andeq	r2, r1, r8, asr r6
   1230c:	andeq	r2, r1, r4, lsl #15
   12310:	andeq	r2, r1, r8, asr r7
   12314:	andeq	r2, r1, r0, lsr r7
   12318:	andeq	r2, r1, ip, ror #12
   1231c:	andeq	r2, r1, r4, lsl #13
   12320:	andeq	r2, r1, r4, lsl #13
   12324:	andeq	r2, r1, r4, lsl #13
   12328:	mov	r3, #0
   1232c:	mov	r7, r3
   12330:	str	r3, [sp, #28]
   12334:	ldr	r3, [sp, #44]	; 0x2c
   12338:	mov	sl, #0
   1233c:	eor	r3, r3, #1
   12340:	str	r3, [sp, #60]	; 0x3c
   12344:	ldr	r3, [sp, #24]
   12348:	cmn	r3, #1
   1234c:	beq	128b0 <__assert_fail@plt+0x1708>
   12350:	ldr	r3, [sp, #24]
   12354:	subs	r5, r3, sl
   12358:	movne	r5, #1
   1235c:	cmp	r5, #0
   12360:	beq	128c8 <__assert_fail@plt+0x1720>
   12364:	ldr	r3, [sp, #152]	; 0x98
   12368:	ldr	r8, [sp, #44]	; 0x2c
   1236c:	cmp	r3, #2
   12370:	moveq	r8, #0
   12374:	andne	r8, r8, #1
   12378:	ldr	r3, [sp, #52]	; 0x34
   1237c:	adds	r9, r3, #0
   12380:	movne	r9, #1
   12384:	ands	r6, r9, r8
   12388:	beq	12d30 <__assert_fail@plt+0x1b88>
   1238c:	ldr	r2, [sp, #52]	; 0x34
   12390:	ldr	r1, [sp, #24]
   12394:	cmp	r2, #1
   12398:	mov	r3, r2
   1239c:	movls	r3, #0
   123a0:	movhi	r3, #1
   123a4:	cmn	r1, #1
   123a8:	movne	r3, #0
   123ac:	cmp	r3, #0
   123b0:	add	r4, sl, r2
   123b4:	beq	123c4 <__assert_fail@plt+0x121c>
   123b8:	ldr	r0, [sp, #56]	; 0x38
   123bc:	bl	11088 <strlen@plt>
   123c0:	str	r0, [sp, #24]
   123c4:	ldr	r3, [sp, #24]
   123c8:	cmp	r3, r4
   123cc:	ldr	r3, [sp, #56]	; 0x38
   123d0:	add	r3, r3, sl
   123d4:	str	r3, [sp, #48]	; 0x30
   123d8:	bcc	12d3c <__assert_fail@plt+0x1b94>
   123dc:	mov	r0, r3
   123e0:	ldr	r2, [sp, #52]	; 0x34
   123e4:	ldr	r1, [sp, #64]	; 0x40
   123e8:	bl	10f5c <memcmp@plt>
   123ec:	cmp	r0, #0
   123f0:	bne	12d3c <__assert_fail@plt+0x1b94>
   123f4:	ldr	r3, [sp, #28]
   123f8:	cmp	r3, #0
   123fc:	bne	135b8 <__assert_fail@plt+0x2410>
   12400:	ldr	r3, [sp, #48]	; 0x30
   12404:	ldrb	r4, [r3]
   12408:	cmp	r4, #126	; 0x7e
   1240c:	ldrls	pc, [pc, r4, lsl #2]
   12410:	b	12cd0 <__assert_fail@plt+0x1b28>
   12414:	strdeq	r2, [r1], -r4
   12418:	ldrdeq	r2, [r1], -r0
   1241c:	ldrdeq	r2, [r1], -r0
   12420:	ldrdeq	r2, [r1], -r0
   12424:	ldrdeq	r2, [r1], -r0
   12428:	ldrdeq	r2, [r1], -r0
   1242c:	ldrdeq	r2, [r1], -r0
   12430:	ldrdeq	r2, [r1], -r8
   12434:			; <UNDEFINED> instruction: 0x00012abc
   12438:			; <UNDEFINED> instruction: 0x00012cb8
   1243c:	andeq	r2, r1, ip, lsl sl
   12440:	andeq	r2, r1, r0, lsl #20
   12444:	muleq	r1, r4, ip
   12448:	andeq	r2, r1, r0, ror ip
   1244c:	ldrdeq	r2, [r1], -r0
   12450:	ldrdeq	r2, [r1], -r0
   12454:	ldrdeq	r2, [r1], -r0
   12458:	ldrdeq	r2, [r1], -r0
   1245c:	ldrdeq	r2, [r1], -r0
   12460:	ldrdeq	r2, [r1], -r0
   12464:	ldrdeq	r2, [r1], -r0
   12468:	ldrdeq	r2, [r1], -r0
   1246c:	ldrdeq	r2, [r1], -r0
   12470:	ldrdeq	r2, [r1], -r0
   12474:	ldrdeq	r2, [r1], -r0
   12478:	ldrdeq	r2, [r1], -r0
   1247c:	ldrdeq	r2, [r1], -r0
   12480:	ldrdeq	r2, [r1], -r0
   12484:	ldrdeq	r2, [r1], -r0
   12488:	ldrdeq	r2, [r1], -r0
   1248c:	ldrdeq	r2, [r1], -r0
   12490:	ldrdeq	r2, [r1], -r0
   12494:			; <UNDEFINED> instruction: 0x00012cb0
   12498:	andeq	r2, r1, r4, ror #23
   1249c:	andeq	r2, r1, r4, ror #23
   124a0:	strdeq	r2, [r1], -r4
   124a4:	andeq	r2, r1, r4, ror #23
   124a8:	andeq	r2, r1, ip, ror ip
   124ac:	andeq	r2, r1, r4, ror #23
   124b0:	andeq	r2, r1, r0, asr ip
   124b4:	andeq	r2, r1, r4, ror #23
   124b8:	andeq	r2, r1, r4, ror #23
   124bc:	andeq	r2, r1, r4, ror #23
   124c0:	andeq	r2, r1, ip, ror ip
   124c4:	andeq	r2, r1, ip, ror ip
   124c8:	andeq	r2, r1, ip, ror ip
   124cc:	andeq	r2, r1, ip, ror ip
   124d0:	andeq	r2, r1, ip, ror ip
   124d4:	andeq	r2, r1, ip, ror ip
   124d8:	andeq	r2, r1, ip, ror ip
   124dc:	andeq	r2, r1, ip, ror ip
   124e0:	andeq	r2, r1, ip, ror ip
   124e4:	andeq	r2, r1, ip, ror ip
   124e8:	andeq	r2, r1, ip, ror ip
   124ec:	andeq	r2, r1, ip, ror ip
   124f0:	andeq	r2, r1, ip, ror ip
   124f4:	andeq	r2, r1, ip, ror ip
   124f8:	andeq	r2, r1, ip, ror ip
   124fc:	andeq	r2, r1, ip, ror ip
   12500:	andeq	r2, r1, r4, ror #23
   12504:	andeq	r2, r1, r4, ror #23
   12508:	andeq	r2, r1, r4, ror #23
   1250c:	andeq	r2, r1, r4, ror #23
   12510:	andeq	r2, r1, r0, lsr #24
   12514:	ldrdeq	r2, [r1], -r0
   12518:	andeq	r2, r1, ip, ror ip
   1251c:	andeq	r2, r1, ip, ror ip
   12520:	andeq	r2, r1, ip, ror ip
   12524:	andeq	r2, r1, ip, ror ip
   12528:	andeq	r2, r1, ip, ror ip
   1252c:	andeq	r2, r1, ip, ror ip
   12530:	andeq	r2, r1, ip, ror ip
   12534:	andeq	r2, r1, ip, ror ip
   12538:	andeq	r2, r1, ip, ror ip
   1253c:	andeq	r2, r1, ip, ror ip
   12540:	andeq	r2, r1, ip, ror ip
   12544:	andeq	r2, r1, ip, ror ip
   12548:	andeq	r2, r1, ip, ror ip
   1254c:	andeq	r2, r1, ip, ror ip
   12550:	andeq	r2, r1, ip, ror ip
   12554:	andeq	r2, r1, ip, ror ip
   12558:	andeq	r2, r1, ip, ror ip
   1255c:	andeq	r2, r1, ip, ror ip
   12560:	andeq	r2, r1, ip, ror ip
   12564:	andeq	r2, r1, ip, ror ip
   12568:	andeq	r2, r1, ip, ror ip
   1256c:	andeq	r2, r1, ip, ror ip
   12570:	andeq	r2, r1, ip, ror ip
   12574:	andeq	r2, r1, ip, ror ip
   12578:	andeq	r2, r1, ip, ror ip
   1257c:	andeq	r2, r1, ip, ror ip
   12580:	andeq	r2, r1, r4, ror #23
   12584:	andeq	r2, r1, r0, asr #18
   12588:	andeq	r2, r1, ip, ror ip
   1258c:	andeq	r2, r1, r4, ror #23
   12590:	andeq	r2, r1, ip, ror ip
   12594:	andeq	r2, r1, r4, ror #23
   12598:	andeq	r2, r1, ip, ror ip
   1259c:	andeq	r2, r1, ip, ror ip
   125a0:	andeq	r2, r1, ip, ror ip
   125a4:	andeq	r2, r1, ip, ror ip
   125a8:	andeq	r2, r1, ip, ror ip
   125ac:	andeq	r2, r1, ip, ror ip
   125b0:	andeq	r2, r1, ip, ror ip
   125b4:	andeq	r2, r1, ip, ror ip
   125b8:	andeq	r2, r1, ip, ror ip
   125bc:	andeq	r2, r1, ip, ror ip
   125c0:	andeq	r2, r1, ip, ror ip
   125c4:	andeq	r2, r1, ip, ror ip
   125c8:	andeq	r2, r1, ip, ror ip
   125cc:	andeq	r2, r1, ip, ror ip
   125d0:	andeq	r2, r1, ip, ror ip
   125d4:	andeq	r2, r1, ip, ror ip
   125d8:	andeq	r2, r1, ip, ror ip
   125dc:	andeq	r2, r1, ip, ror ip
   125e0:	andeq	r2, r1, ip, ror ip
   125e4:	andeq	r2, r1, ip, ror ip
   125e8:	andeq	r2, r1, ip, ror ip
   125ec:	andeq	r2, r1, ip, ror ip
   125f0:	andeq	r2, r1, ip, ror ip
   125f4:	andeq	r2, r1, ip, ror ip
   125f8:	andeq	r2, r1, ip, ror ip
   125fc:	andeq	r2, r1, ip, ror ip
   12600:	ldrdeq	r2, [r1], -r4
   12604:	andeq	r2, r1, r4, ror #23
   12608:	ldrdeq	r2, [r1], -r4
   1260c:	strdeq	r2, [r1], -r4
   12610:	mov	r3, #1
   12614:	str	r3, [sp, #28]
   12618:	str	r3, [sp, #52]	; 0x34
   1261c:	ldr	r3, [pc, #4000]	; 135c4 <__assert_fail@plt+0x241c>
   12620:	mov	r7, #0
   12624:	str	r3, [sp, #64]	; 0x40
   12628:	mov	r3, #2
   1262c:	str	r3, [sp, #152]	; 0x98
   12630:	b	12334 <__assert_fail@plt+0x118c>
   12634:	ldr	r3, [sp, #28]
   12638:	cmp	r3, #0
   1263c:	beq	12798 <__assert_fail@plt+0x15f0>
   12640:	mov	r3, #1
   12644:	str	r3, [sp, #52]	; 0x34
   12648:	ldr	r3, [pc, #3956]	; 135c4 <__assert_fail@plt+0x241c>
   1264c:	mov	r7, #0
   12650:	str	r3, [sp, #64]	; 0x40
   12654:	b	12334 <__assert_fail@plt+0x118c>
   12658:	mov	r3, #1
   1265c:	str	r3, [sp, #44]	; 0x2c
   12660:	str	r3, [sp, #52]	; 0x34
   12664:	str	r3, [sp, #28]
   12668:	b	1261c <__assert_fail@plt+0x1474>
   1266c:	mov	r3, #0
   12670:	str	r3, [sp, #28]
   12674:	mov	r3, #1
   12678:	str	r3, [sp, #44]	; 0x2c
   1267c:	mov	r7, #0
   12680:	b	12334 <__assert_fail@plt+0x118c>
   12684:	ldr	r3, [sp, #152]	; 0x98
   12688:	cmp	r3, #10
   1268c:	beq	126d0 <__assert_fail@plt+0x1528>
   12690:	mov	r2, #5
   12694:	ldr	r1, [pc, #3884]	; 135c8 <__assert_fail@plt+0x2420>
   12698:	mov	r0, #0
   1269c:	bl	10f74 <dcgettext@plt>
   126a0:	ldr	r2, [pc, #3872]	; 135c8 <__assert_fail@plt+0x2420>
   126a4:	cmp	r0, r2
   126a8:	str	r0, [sp, #164]	; 0xa4
   126ac:	beq	136b4 <__assert_fail@plt+0x250c>
   126b0:	mov	r2, #5
   126b4:	ldr	r1, [pc, #3848]	; 135c4 <__assert_fail@plt+0x241c>
   126b8:	mov	r0, #0
   126bc:	bl	10f74 <dcgettext@plt>
   126c0:	ldr	r2, [pc, #3836]	; 135c4 <__assert_fail@plt+0x241c>
   126c4:	cmp	r0, r2
   126c8:	str	r0, [sp, #168]	; 0xa8
   126cc:	beq	136a4 <__assert_fail@plt+0x24fc>
   126d0:	ldr	r7, [sp, #28]
   126d4:	cmp	r7, #0
   126d8:	movne	r7, #0
   126dc:	bne	12710 <__assert_fail@plt+0x1568>
   126e0:	ldr	r3, [sp, #164]	; 0xa4
   126e4:	ldrb	r3, [r3]
   126e8:	cmp	r3, #0
   126ec:	beq	136c4 <__assert_fail@plt+0x251c>
   126f0:	ldr	r2, [sp, #164]	; 0xa4
   126f4:	ldr	r1, [sp, #32]
   126f8:	cmp	fp, r7
   126fc:	strbhi	r3, [r1, r7]
   12700:	ldrb	r3, [r2, #1]!
   12704:	add	r7, r7, #1
   12708:	cmp	r3, #0
   1270c:	bne	126f8 <__assert_fail@plt+0x1550>
   12710:	ldr	r0, [sp, #168]	; 0xa8
   12714:	bl	11088 <strlen@plt>
   12718:	ldr	r3, [sp, #168]	; 0xa8
   1271c:	str	r3, [sp, #64]	; 0x40
   12720:	mov	r3, #1
   12724:	str	r3, [sp, #44]	; 0x2c
   12728:	str	r0, [sp, #52]	; 0x34
   1272c:	b	12334 <__assert_fail@plt+0x118c>
   12730:	mov	r3, #1
   12734:	str	r3, [sp, #44]	; 0x2c
   12738:	str	r3, [sp, #52]	; 0x34
   1273c:	str	r3, [sp, #28]
   12740:	ldr	r3, [pc, #3716]	; 135cc <__assert_fail@plt+0x2424>
   12744:	mov	r7, #0
   12748:	str	r3, [sp, #64]	; 0x40
   1274c:	mov	r3, #5
   12750:	str	r3, [sp, #152]	; 0x98
   12754:	b	12334 <__assert_fail@plt+0x118c>
   12758:	ldr	r3, [sp, #28]
   1275c:	cmp	r3, #0
   12760:	beq	13460 <__assert_fail@plt+0x22b8>
   12764:	ldr	r3, [sp, #28]
   12768:	mov	r7, #0
   1276c:	str	r3, [sp, #44]	; 0x2c
   12770:	mov	r3, #1
   12774:	str	r3, [sp, #52]	; 0x34
   12778:	ldr	r3, [pc, #3660]	; 135cc <__assert_fail@plt+0x2424>
   1277c:	str	r3, [sp, #64]	; 0x40
   12780:	b	12334 <__assert_fail@plt+0x118c>
   12784:	ldr	r3, [sp, #28]
   12788:	cmp	r3, #0
   1278c:	mov	r3, #1
   12790:	streq	r3, [sp, #44]	; 0x2c
   12794:	bne	12618 <__assert_fail@plt+0x1470>
   12798:	cmp	fp, #0
   1279c:	beq	13490 <__assert_fail@plt+0x22e8>
   127a0:	ldr	r3, [sp, #32]
   127a4:	mov	r2, #39	; 0x27
   127a8:	mov	r7, #1
   127ac:	strb	r2, [r3]
   127b0:	mov	r3, #0
   127b4:	str	r3, [sp, #28]
   127b8:	mov	r3, #1
   127bc:	str	r3, [sp, #52]	; 0x34
   127c0:	ldr	r3, [pc, #3580]	; 135c4 <__assert_fail@plt+0x241c>
   127c4:	str	r3, [sp, #64]	; 0x40
   127c8:	mov	r3, #2
   127cc:	str	r3, [sp, #152]	; 0x98
   127d0:	b	12334 <__assert_fail@plt+0x118c>
   127d4:	ldr	r3, [sp, #24]
   127d8:	cmn	r3, #1
   127dc:	beq	133f4 <__assert_fail@plt+0x224c>
   127e0:	ldr	r3, [sp, #24]
   127e4:	subs	r3, r3, #1
   127e8:	movne	r3, #1
   127ec:	cmp	r3, #0
   127f0:	bne	127fc <__assert_fail@plt+0x1654>
   127f4:	cmp	sl, #0
   127f8:	beq	12be8 <__assert_fail@plt+0x1a40>
   127fc:	ldr	r3, [sp, #152]	; 0x98
   12800:	mov	r5, #0
   12804:	sub	r2, r3, #2
   12808:	mov	r8, r5
   1280c:	clz	r2, r2
   12810:	lsr	r2, r2, #5
   12814:	ldr	r3, [sp, #60]	; 0x3c
   12818:	ldr	r1, [sp, #28]
   1281c:	orr	r3, r2, r3
   12820:	eor	r3, r3, #1
   12824:	orr	r3, r1, r3
   12828:	tst	r3, #255	; 0xff
   1282c:	bne	12f58 <__assert_fail@plt+0x1db0>
   12830:	cmp	r6, #0
   12834:	bne	12984 <__assert_fail@plt+0x17dc>
   12838:	ldr	r3, [sp, #40]	; 0x28
   1283c:	eor	r8, r8, #1
   12840:	and	r8, r8, r3
   12844:	add	sl, sl, #1
   12848:	uxtb	r6, r8
   1284c:	cmp	r6, #0
   12850:	beq	12884 <__assert_fail@plt+0x16dc>
   12854:	cmp	fp, r7
   12858:	movhi	r2, #39	; 0x27
   1285c:	ldrhi	r3, [sp, #32]
   12860:	strbhi	r2, [r3, r7]
   12864:	add	r3, r7, #1
   12868:	cmp	fp, r3
   1286c:	movhi	r1, #39	; 0x27
   12870:	ldrhi	r2, [sp, #32]
   12874:	add	r7, r7, #2
   12878:	strbhi	r1, [r2, r3]
   1287c:	mov	r3, #0
   12880:	str	r3, [sp, #40]	; 0x28
   12884:	cmp	r7, fp
   12888:	ldrcc	r3, [sp, #32]
   1288c:	strbcc	r4, [r3, r7]
   12890:	ldr	r3, [sp, #36]	; 0x24
   12894:	cmp	r5, #0
   12898:	moveq	r3, #0
   1289c:	str	r3, [sp, #36]	; 0x24
   128a0:	ldr	r3, [sp, #24]
   128a4:	add	r7, r7, #1
   128a8:	cmn	r3, #1
   128ac:	bne	12350 <__assert_fail@plt+0x11a8>
   128b0:	ldr	r3, [sp, #56]	; 0x38
   128b4:	ldrb	r5, [r3, sl]
   128b8:	adds	r5, r5, #0
   128bc:	movne	r5, #1
   128c0:	cmp	r5, #0
   128c4:	bne	12364 <__assert_fail@plt+0x11bc>
   128c8:	ldr	r3, [sp, #152]	; 0x98
   128cc:	ldr	r1, [sp, #28]
   128d0:	sub	r3, r3, #2
   128d4:	clz	r3, r3
   128d8:	lsr	r3, r3, #5
   128dc:	and	r9, r1, r3
   128e0:	cmp	r7, #0
   128e4:	movne	r2, #0
   128e8:	andeq	r2, r9, #1
   128ec:	cmp	r2, #0
   128f0:	bne	132cc <__assert_fail@plt+0x2124>
   128f4:	eor	r2, r1, #1
   128f8:	ands	r3, r3, r2
   128fc:	beq	13788 <__assert_fail@plt+0x25e0>
   12900:	ldr	r2, [sp, #68]	; 0x44
   12904:	cmp	r2, #0
   12908:	beq	13774 <__assert_fail@plt+0x25cc>
   1290c:	ldr	r3, [sp, #36]	; 0x24
   12910:	cmp	r3, #0
   12914:	bne	1372c <__assert_fail@plt+0x2584>
   12918:	ldr	r2, [sp, #72]	; 0x48
   1291c:	clz	r3, fp
   12920:	cmp	r2, #0
   12924:	lsr	r3, r3, #5
   12928:	moveq	r3, #0
   1292c:	cmp	r3, #0
   12930:	beq	136cc <__assert_fail@plt+0x2524>
   12934:	str	r3, [sp, #68]	; 0x44
   12938:	ldr	fp, [sp, #72]	; 0x48
   1293c:	b	122ec <__assert_fail@plt+0x1144>
   12940:	ldr	r3, [sp, #152]	; 0x98
   12944:	cmp	r3, #2
   12948:	beq	12f9c <__assert_fail@plt+0x1df4>
   1294c:	ldr	r3, [sp, #44]	; 0x2c
   12950:	ldr	r2, [sp, #28]
   12954:	and	r2, r3, r2
   12958:	ands	r2, r9, r2
   1295c:	bne	12fa8 <__assert_fail@plt+0x1e00>
   12960:	mov	r4, #92	; 0x5c
   12964:	mov	r3, r4
   12968:	ldr	r1, [sp, #44]	; 0x2c
   1296c:	cmp	r1, #0
   12970:	moveq	r5, #0
   12974:	moveq	r8, r1
   12978:	beq	12814 <__assert_fail@plt+0x166c>
   1297c:	mov	r4, r3
   12980:	mov	r5, #0
   12984:	ldr	r3, [sp, #28]
   12988:	cmp	r3, #0
   1298c:	bne	12f90 <__assert_fail@plt+0x1de8>
   12990:	ldr	r3, [sp, #40]	; 0x28
   12994:	eor	r9, r3, #1
   12998:	and	r9, r9, r2
   1299c:	ands	r9, r9, #255	; 0xff
   129a0:	beq	129e4 <__assert_fail@plt+0x183c>
   129a4:	cmp	fp, r7
   129a8:	movhi	r2, #39	; 0x27
   129ac:	ldrhi	r3, [sp, #32]
   129b0:	str	r9, [sp, #40]	; 0x28
   129b4:	strbhi	r2, [r3, r7]
   129b8:	add	r3, r7, #1
   129bc:	cmp	fp, r3
   129c0:	movhi	r1, #36	; 0x24
   129c4:	ldrhi	r2, [sp, #32]
   129c8:	strbhi	r1, [r2, r3]
   129cc:	add	r3, r7, #2
   129d0:	cmp	fp, r3
   129d4:	add	r7, r7, #3
   129d8:	ldrhi	r2, [sp, #32]
   129dc:	movhi	r1, #39	; 0x27
   129e0:	strbhi	r1, [r2, r3]
   129e4:	cmp	fp, r7
   129e8:	movhi	r2, #92	; 0x5c
   129ec:	ldrhi	r3, [sp, #32]
   129f0:	add	sl, sl, #1
   129f4:	strbhi	r2, [r3, r7]
   129f8:	add	r7, r7, #1
   129fc:	b	12884 <__assert_fail@plt+0x16dc>
   12a00:	ldr	r3, [sp, #152]	; 0x98
   12a04:	mov	r4, #11
   12a08:	sub	r2, r3, #2
   12a0c:	mov	r3, #118	; 0x76
   12a10:	clz	r2, r2
   12a14:	lsr	r2, r2, #5
   12a18:	b	12968 <__assert_fail@plt+0x17c0>
   12a1c:	mov	r4, #10
   12a20:	mov	r3, #110	; 0x6e
   12a24:	ldr	r2, [sp, #152]	; 0x98
   12a28:	ldr	r1, [sp, #28]
   12a2c:	sub	r2, r2, #2
   12a30:	clz	r2, r2
   12a34:	lsr	r2, r2, #5
   12a38:	ands	r1, r1, r2
   12a3c:	beq	12968 <__assert_fail@plt+0x17c0>
   12a40:	ldr	sl, [sp, #32]
   12a44:	mov	r8, fp
   12a48:	mov	r2, r1
   12a4c:	mov	r3, #2
   12a50:	str	r3, [sp, #152]	; 0x98
   12a54:	ldr	r9, [sp, #44]	; 0x2c
   12a58:	ldr	r3, [sp, #152]	; 0x98
   12a5c:	and	r9, r9, r2
   12a60:	tst	r9, #255	; 0xff
   12a64:	movne	r3, #4
   12a68:	str	r3, [sp, #152]	; 0x98
   12a6c:	ldr	r3, [sp, #156]	; 0x9c
   12a70:	mov	ip, #0
   12a74:	bic	r3, r3, #2
   12a78:	str	r3, [sp, #4]
   12a7c:	ldr	r3, [sp, #168]	; 0xa8
   12a80:	ldr	r2, [sp, #56]	; 0x38
   12a84:	str	r3, [sp, #16]
   12a88:	ldr	r3, [sp, #164]	; 0xa4
   12a8c:	mov	r1, r8
   12a90:	str	r3, [sp, #12]
   12a94:	ldr	r3, [sp, #152]	; 0x98
   12a98:	mov	r0, sl
   12a9c:	str	r3, [sp]
   12aa0:	str	ip, [sp, #8]
   12aa4:	ldr	r3, [sp, #24]
   12aa8:	bl	12290 <__assert_fail@plt+0x10e8>
   12aac:	mov	fp, r0
   12ab0:	mov	r0, fp
   12ab4:	add	sp, sp, #116	; 0x74
   12ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12abc:	ldr	r3, [sp, #152]	; 0x98
   12ac0:	mov	r4, #8
   12ac4:	sub	r2, r3, #2
   12ac8:	mov	r3, #98	; 0x62
   12acc:	clz	r2, r2
   12ad0:	lsr	r2, r2, #5
   12ad4:	b	12968 <__assert_fail@plt+0x17c0>
   12ad8:	ldr	r3, [sp, #152]	; 0x98
   12adc:	mov	r4, #7
   12ae0:	sub	r2, r3, #2
   12ae4:	mov	r3, #97	; 0x61
   12ae8:	clz	r2, r2
   12aec:	lsr	r2, r2, #5
   12af0:	b	12968 <__assert_fail@plt+0x17c0>
   12af4:	ldr	r3, [sp, #44]	; 0x2c
   12af8:	cmp	r3, #0
   12afc:	beq	132e0 <__assert_fail@plt+0x2138>
   12b00:	ldr	r3, [sp, #28]
   12b04:	cmp	r3, #0
   12b08:	bne	135b8 <__assert_fail@plt+0x2410>
   12b0c:	ldr	r3, [sp, #152]	; 0x98
   12b10:	sub	r2, r3, #2
   12b14:	ldr	r3, [sp, #40]	; 0x28
   12b18:	clz	r2, r2
   12b1c:	eor	r3, r3, #1
   12b20:	lsr	r2, r2, #5
   12b24:	ands	r3, r2, r3
   12b28:	moveq	r1, r7
   12b2c:	beq	12b70 <__assert_fail@plt+0x19c8>
   12b30:	cmp	fp, r7
   12b34:	movhi	r0, #39	; 0x27
   12b38:	ldrhi	r1, [sp, #32]
   12b3c:	str	r3, [sp, #40]	; 0x28
   12b40:	strbhi	r0, [r1, r7]
   12b44:	add	r1, r7, #1
   12b48:	cmp	fp, r1
   12b4c:	movhi	ip, #36	; 0x24
   12b50:	ldrhi	r0, [sp, #32]
   12b54:	strbhi	ip, [r0, r1]
   12b58:	add	r1, r7, #2
   12b5c:	cmp	fp, r1
   12b60:	movhi	ip, #39	; 0x27
   12b64:	ldrhi	r0, [sp, #32]
   12b68:	strbhi	ip, [r0, r1]
   12b6c:	add	r1, r7, #3
   12b70:	cmp	fp, r1
   12b74:	movhi	r0, #92	; 0x5c
   12b78:	ldrhi	r3, [sp, #32]
   12b7c:	add	r7, r1, #1
   12b80:	strbhi	r0, [r3, r1]
   12b84:	cmp	r8, #0
   12b88:	beq	134cc <__assert_fail@plt+0x2324>
   12b8c:	ldr	r0, [sp, #24]
   12b90:	add	r3, sl, #1
   12b94:	cmp	r3, r0
   12b98:	bcs	13408 <__assert_fail@plt+0x2260>
   12b9c:	ldr	r0, [sp, #56]	; 0x38
   12ba0:	ldrb	r3, [r0, r3]
   12ba4:	sub	r3, r3, #48	; 0x30
   12ba8:	cmp	r3, #9
   12bac:	bhi	13408 <__assert_fail@plt+0x2260>
   12bb0:	cmp	fp, r7
   12bb4:	movhi	r3, #48	; 0x30
   12bb8:	ldrhi	r0, [sp, #32]
   12bbc:	ldr	r5, [sp, #28]
   12bc0:	mov	r4, #48	; 0x30
   12bc4:	strbhi	r3, [r0, r7]
   12bc8:	add	r3, r1, #2
   12bcc:	cmp	fp, r3
   12bd0:	movhi	r0, #48	; 0x30
   12bd4:	ldrhi	ip, [sp, #32]
   12bd8:	add	r7, r1, #3
   12bdc:	strbhi	r0, [ip, r3]
   12be0:	b	12814 <__assert_fail@plt+0x166c>
   12be4:	mov	r5, #0
   12be8:	ldr	r3, [sp, #152]	; 0x98
   12bec:	sub	r2, r3, #2
   12bf0:	ldr	r3, [sp, #28]
   12bf4:	clz	r2, r2
   12bf8:	lsr	r2, r2, #5
   12bfc:	ands	r8, r3, r2
   12c00:	beq	12814 <__assert_fail@plt+0x166c>
   12c04:	mov	r3, r8
   12c08:	mov	r2, r3
   12c0c:	mov	r3, #2
   12c10:	ldr	sl, [sp, #32]
   12c14:	mov	r8, fp
   12c18:	str	r3, [sp, #152]	; 0x98
   12c1c:	b	12a54 <__assert_fail@plt+0x18ac>
   12c20:	ldr	r3, [sp, #152]	; 0x98
   12c24:	cmp	r3, #2
   12c28:	beq	1334c <__assert_fail@plt+0x21a4>
   12c2c:	cmp	r3, #5
   12c30:	beq	1330c <__assert_fail@plt+0x2164>
   12c34:	mov	r5, #0
   12c38:	sub	r2, r3, #2
   12c3c:	mov	r8, r5
   12c40:	clz	r2, r2
   12c44:	mov	r4, #63	; 0x3f
   12c48:	lsr	r2, r2, #5
   12c4c:	b	12814 <__assert_fail@plt+0x166c>
   12c50:	ldr	r3, [sp, #152]	; 0x98
   12c54:	cmp	r3, #2
   12c58:	beq	1336c <__assert_fail@plt+0x21c4>
   12c5c:	mov	r2, #0
   12c60:	str	r5, [sp, #68]	; 0x44
   12c64:	mov	r8, r2
   12c68:	mov	r4, #39	; 0x27
   12c6c:	b	12814 <__assert_fail@plt+0x166c>
   12c70:	mov	r4, #13
   12c74:	mov	r3, #114	; 0x72
   12c78:	b	12a24 <__assert_fail@plt+0x187c>
   12c7c:	ldr	r3, [sp, #152]	; 0x98
   12c80:	mov	r8, #0
   12c84:	sub	r2, r3, #2
   12c88:	clz	r2, r2
   12c8c:	lsr	r2, r2, #5
   12c90:	b	12814 <__assert_fail@plt+0x166c>
   12c94:	ldr	r3, [sp, #152]	; 0x98
   12c98:	mov	r4, #12
   12c9c:	sub	r2, r3, #2
   12ca0:	mov	r3, #102	; 0x66
   12ca4:	clz	r2, r2
   12ca8:	lsr	r2, r2, #5
   12cac:	b	12968 <__assert_fail@plt+0x17c0>
   12cb0:	mov	r5, r6
   12cb4:	b	12be8 <__assert_fail@plt+0x1a40>
   12cb8:	ldr	r3, [sp, #152]	; 0x98
   12cbc:	sub	r2, r3, #2
   12cc0:	mov	r3, #116	; 0x74
   12cc4:	clz	r2, r2
   12cc8:	lsr	r2, r2, #5
   12ccc:	b	12968 <__assert_fail@plt+0x17c0>
   12cd0:	ldr	r8, [sp, #76]	; 0x4c
   12cd4:	cmp	r8, #1
   12cd8:	bne	13188 <__assert_fail@plt+0x1fe0>
   12cdc:	bl	11064 <__ctype_b_loc@plt>
   12ce0:	sxth	r3, r4
   12ce4:	mov	ip, r8
   12ce8:	lsl	r3, r3, #1
   12cec:	ldr	r2, [r0]
   12cf0:	ldrh	r3, [r2, r3]
   12cf4:	and	r3, r3, #16384	; 0x4000
   12cf8:	cmp	r3, #0
   12cfc:	movne	r5, #1
   12d00:	moveq	r5, #0
   12d04:	moveq	r3, #1
   12d08:	movne	r3, #0
   12d0c:	ldr	r2, [sp, #44]	; 0x2c
   12d10:	and	r3, r3, r2
   12d14:	ands	r8, r3, #255	; 0xff
   12d18:	bne	1301c <__assert_fail@plt+0x1e74>
   12d1c:	ldr	r3, [sp, #152]	; 0x98
   12d20:	sub	r2, r3, #2
   12d24:	clz	r2, r2
   12d28:	lsr	r2, r2, #5
   12d2c:	b	12814 <__assert_fail@plt+0x166c>
   12d30:	ldr	r3, [sp, #56]	; 0x38
   12d34:	add	r3, r3, sl
   12d38:	str	r3, [sp, #48]	; 0x30
   12d3c:	ldr	r3, [sp, #48]	; 0x30
   12d40:	mov	r6, #0
   12d44:	ldrb	r4, [r3]
   12d48:	cmp	r4, #126	; 0x7e
   12d4c:	ldrls	pc, [pc, r4, lsl #2]
   12d50:	b	12cd0 <__assert_fail@plt+0x1b28>
   12d54:	strdeq	r2, [r1], -r4
   12d58:	ldrdeq	r2, [r1], -r0
   12d5c:	ldrdeq	r2, [r1], -r0
   12d60:	ldrdeq	r2, [r1], -r0
   12d64:	ldrdeq	r2, [r1], -r0
   12d68:	ldrdeq	r2, [r1], -r0
   12d6c:	ldrdeq	r2, [r1], -r0
   12d70:	ldrdeq	r2, [r1], -r8
   12d74:			; <UNDEFINED> instruction: 0x00012abc
   12d78:	andeq	r2, r1, r0, asr pc
   12d7c:	andeq	r2, r1, ip, lsl sl
   12d80:	andeq	r2, r1, r0, lsl #20
   12d84:	muleq	r1, r4, ip
   12d88:	andeq	r2, r1, r0, ror ip
   12d8c:	ldrdeq	r2, [r1], -r0
   12d90:	ldrdeq	r2, [r1], -r0
   12d94:	ldrdeq	r2, [r1], -r0
   12d98:	ldrdeq	r2, [r1], -r0
   12d9c:	ldrdeq	r2, [r1], -r0
   12da0:	ldrdeq	r2, [r1], -r0
   12da4:	ldrdeq	r2, [r1], -r0
   12da8:	ldrdeq	r2, [r1], -r0
   12dac:	ldrdeq	r2, [r1], -r0
   12db0:	ldrdeq	r2, [r1], -r0
   12db4:	ldrdeq	r2, [r1], -r0
   12db8:	ldrdeq	r2, [r1], -r0
   12dbc:	ldrdeq	r2, [r1], -r0
   12dc0:	ldrdeq	r2, [r1], -r0
   12dc4:	ldrdeq	r2, [r1], -r0
   12dc8:	ldrdeq	r2, [r1], -r0
   12dcc:	ldrdeq	r2, [r1], -r0
   12dd0:	ldrdeq	r2, [r1], -r0
   12dd4:	andeq	r2, r1, r8, ror #23
   12dd8:	andeq	r2, r1, r4, ror #23
   12ddc:	andeq	r2, r1, r4, ror #23
   12de0:	strdeq	r2, [r1], -r4
   12de4:	andeq	r2, r1, r4, ror #23
   12de8:	andeq	r2, r1, ip, ror ip
   12dec:	andeq	r2, r1, r4, ror #23
   12df0:	andeq	r2, r1, r0, asr ip
   12df4:	andeq	r2, r1, r4, ror #23
   12df8:	andeq	r2, r1, r4, ror #23
   12dfc:	andeq	r2, r1, r4, ror #23
   12e00:	andeq	r2, r1, ip, ror ip
   12e04:	andeq	r2, r1, ip, ror ip
   12e08:	andeq	r2, r1, ip, ror ip
   12e0c:	andeq	r2, r1, ip, ror ip
   12e10:	andeq	r2, r1, ip, ror ip
   12e14:	andeq	r2, r1, ip, ror ip
   12e18:	andeq	r2, r1, ip, ror ip
   12e1c:	andeq	r2, r1, ip, ror ip
   12e20:	andeq	r2, r1, ip, ror ip
   12e24:	andeq	r2, r1, ip, ror ip
   12e28:	andeq	r2, r1, ip, ror ip
   12e2c:	andeq	r2, r1, ip, ror ip
   12e30:	andeq	r2, r1, ip, ror ip
   12e34:	andeq	r2, r1, ip, ror ip
   12e38:	andeq	r2, r1, ip, ror ip
   12e3c:	andeq	r2, r1, ip, ror ip
   12e40:	andeq	r2, r1, r4, ror #23
   12e44:	andeq	r2, r1, r4, ror #23
   12e48:	andeq	r2, r1, r4, ror #23
   12e4c:	andeq	r2, r1, r4, ror #23
   12e50:	andeq	r2, r1, r0, lsr #24
   12e54:	ldrdeq	r2, [r1], -r0
   12e58:	andeq	r2, r1, ip, ror ip
   12e5c:	andeq	r2, r1, ip, ror ip
   12e60:	andeq	r2, r1, ip, ror ip
   12e64:	andeq	r2, r1, ip, ror ip
   12e68:	andeq	r2, r1, ip, ror ip
   12e6c:	andeq	r2, r1, ip, ror ip
   12e70:	andeq	r2, r1, ip, ror ip
   12e74:	andeq	r2, r1, ip, ror ip
   12e78:	andeq	r2, r1, ip, ror ip
   12e7c:	andeq	r2, r1, ip, ror ip
   12e80:	andeq	r2, r1, ip, ror ip
   12e84:	andeq	r2, r1, ip, ror ip
   12e88:	andeq	r2, r1, ip, ror ip
   12e8c:	andeq	r2, r1, ip, ror ip
   12e90:	andeq	r2, r1, ip, ror ip
   12e94:	andeq	r2, r1, ip, ror ip
   12e98:	andeq	r2, r1, ip, ror ip
   12e9c:	andeq	r2, r1, ip, ror ip
   12ea0:	andeq	r2, r1, ip, ror ip
   12ea4:	andeq	r2, r1, ip, ror ip
   12ea8:	andeq	r2, r1, ip, ror ip
   12eac:	andeq	r2, r1, ip, ror ip
   12eb0:	andeq	r2, r1, ip, ror ip
   12eb4:	andeq	r2, r1, ip, ror ip
   12eb8:	andeq	r2, r1, ip, ror ip
   12ebc:	andeq	r2, r1, ip, ror ip
   12ec0:	andeq	r2, r1, r4, ror #23
   12ec4:	andeq	r2, r1, r0, asr #18
   12ec8:	andeq	r2, r1, ip, ror ip
   12ecc:	andeq	r2, r1, r4, ror #23
   12ed0:	andeq	r2, r1, ip, ror ip
   12ed4:	andeq	r2, r1, r4, ror #23
   12ed8:	andeq	r2, r1, ip, ror ip
   12edc:	andeq	r2, r1, ip, ror ip
   12ee0:	andeq	r2, r1, ip, ror ip
   12ee4:	andeq	r2, r1, ip, ror ip
   12ee8:	andeq	r2, r1, ip, ror ip
   12eec:	andeq	r2, r1, ip, ror ip
   12ef0:	andeq	r2, r1, ip, ror ip
   12ef4:	andeq	r2, r1, ip, ror ip
   12ef8:	andeq	r2, r1, ip, ror ip
   12efc:	andeq	r2, r1, ip, ror ip
   12f00:	andeq	r2, r1, ip, ror ip
   12f04:	andeq	r2, r1, ip, ror ip
   12f08:	andeq	r2, r1, ip, ror ip
   12f0c:	andeq	r2, r1, ip, ror ip
   12f10:	andeq	r2, r1, ip, ror ip
   12f14:	andeq	r2, r1, ip, ror ip
   12f18:	andeq	r2, r1, ip, ror ip
   12f1c:	andeq	r2, r1, ip, ror ip
   12f20:	andeq	r2, r1, ip, ror ip
   12f24:	andeq	r2, r1, ip, ror ip
   12f28:	andeq	r2, r1, ip, ror ip
   12f2c:	andeq	r2, r1, ip, ror ip
   12f30:	andeq	r2, r1, ip, ror ip
   12f34:	andeq	r2, r1, ip, ror ip
   12f38:	andeq	r2, r1, ip, ror ip
   12f3c:	andeq	r2, r1, ip, ror ip
   12f40:	ldrdeq	r2, [r1], -r4
   12f44:	andeq	r2, r1, r4, ror #23
   12f48:	ldrdeq	r2, [r1], -r4
   12f4c:	strdeq	r2, [r1], -r4
   12f50:	mov	r3, #116	; 0x74
   12f54:	b	12a24 <__assert_fail@plt+0x187c>
   12f58:	ldr	r3, [sp, #160]	; 0xa0
   12f5c:	cmp	r3, #0
   12f60:	beq	12830 <__assert_fail@plt+0x1688>
   12f64:	lsr	r3, r4, #5
   12f68:	ldr	r0, [sp, #160]	; 0xa0
   12f6c:	uxtb	r3, r3
   12f70:	and	r1, r4, #31
   12f74:	ldr	r0, [r0, r3, lsl #2]
   12f78:	lsr	r3, r0, r1
   12f7c:	tst	r3, #1
   12f80:	beq	12830 <__assert_fail@plt+0x1688>
   12f84:	ldr	r3, [sp, #28]
   12f88:	cmp	r3, #0
   12f8c:	beq	12990 <__assert_fail@plt+0x17e8>
   12f90:	ldr	sl, [sp, #32]
   12f94:	mov	r8, fp
   12f98:	b	12a54 <__assert_fail@plt+0x18ac>
   12f9c:	ldr	r3, [sp, #28]
   12fa0:	cmp	r3, #0
   12fa4:	bne	134f8 <__assert_fail@plt+0x2350>
   12fa8:	add	sl, sl, #1
   12fac:	ldr	r6, [sp, #40]	; 0x28
   12fb0:	mov	r5, #0
   12fb4:	mov	r4, #92	; 0x5c
   12fb8:	b	1284c <__assert_fail@plt+0x16a4>
   12fbc:	cmp	r9, r8
   12fc0:	bne	13230 <__assert_fail@plt+0x2088>
   12fc4:	ldr	r0, [sp, #100]	; 0x64
   12fc8:	bl	10fa4 <iswprint@plt>
   12fcc:	add	r5, r5, r4
   12fd0:	cmp	r0, #0
   12fd4:	add	r0, sp, #104	; 0x68
   12fd8:	moveq	r6, #0
   12fdc:	bl	10f50 <mbsinit@plt>
   12fe0:	cmp	r0, #0
   12fe4:	beq	131c4 <__assert_fail@plt+0x201c>
   12fe8:	mov	r2, r6
   12fec:	mov	ip, r5
   12ff0:	eor	r5, r2, #1
   12ff4:	ldr	r4, [sp, #80]	; 0x50
   12ff8:	ldr	r6, [sp, #84]	; 0x54
   12ffc:	ldr	r7, [sp, #88]	; 0x58
   13000:	uxtb	r5, r5
   13004:	cmp	ip, #1
   13008:	bls	13508 <__assert_fail@plt+0x2360>
   1300c:	ldr	r3, [sp, #44]	; 0x2c
   13010:	and	r8, r3, r5
   13014:	mov	r5, r2
   13018:	uxtb	r8, r8
   1301c:	add	r2, sl, ip
   13020:	ldr	r0, [sp, #48]	; 0x30
   13024:	mov	r1, #0
   13028:	str	r5, [sp, #48]	; 0x30
   1302c:	ldr	r9, [sp, #28]
   13030:	ldr	ip, [sp, #40]	; 0x28
   13034:	ldr	r3, [sp, #32]
   13038:	ldr	r5, [sp, #152]	; 0x98
   1303c:	b	130f8 <__assert_fail@plt+0x1f50>
   13040:	cmp	r9, #0
   13044:	bne	1341c <__assert_fail@plt+0x2274>
   13048:	eor	r1, ip, #1
   1304c:	cmp	r5, #2
   13050:	movne	r1, #0
   13054:	andeq	r1, r1, #1
   13058:	cmp	r1, #0
   1305c:	beq	13094 <__assert_fail@plt+0x1eec>
   13060:	cmp	fp, r7
   13064:	movhi	ip, #39	; 0x27
   13068:	strbhi	ip, [r3, r7]
   1306c:	add	ip, r7, #1
   13070:	cmp	fp, ip
   13074:	movhi	lr, #36	; 0x24
   13078:	strbhi	lr, [r3, ip]
   1307c:	add	ip, r7, #2
   13080:	cmp	fp, ip
   13084:	movhi	lr, #39	; 0x27
   13088:	strbhi	lr, [r3, ip]
   1308c:	add	r7, r7, #3
   13090:	mov	ip, r1
   13094:	cmp	fp, r7
   13098:	movhi	r1, #92	; 0x5c
   1309c:	strbhi	r1, [r3, r7]
   130a0:	add	r1, r7, #1
   130a4:	cmp	fp, r1
   130a8:	lsrhi	lr, r4, #6
   130ac:	addhi	lr, lr, #48	; 0x30
   130b0:	strbhi	lr, [r3, r1]
   130b4:	add	lr, r7, #2
   130b8:	cmp	fp, lr
   130bc:	lsrhi	r1, r4, #3
   130c0:	andhi	r1, r1, #7
   130c4:	addhi	r1, r1, #48	; 0x30
   130c8:	add	sl, sl, #1
   130cc:	strbhi	r1, [r3, lr]
   130d0:	and	r4, r4, #7
   130d4:	cmp	r2, sl
   130d8:	add	r4, r4, #48	; 0x30
   130dc:	add	r7, r7, #3
   130e0:	bls	13440 <__assert_fail@plt+0x2298>
   130e4:	mov	r1, r8
   130e8:	cmp	fp, r7
   130ec:	strbhi	r4, [r3, r7]
   130f0:	ldrb	r4, [r0, #1]!
   130f4:	add	r7, r7, #1
   130f8:	cmp	r8, #0
   130fc:	bne	13040 <__assert_fail@plt+0x1e98>
   13100:	cmp	r6, #0
   13104:	bne	13154 <__assert_fail@plt+0x1fac>
   13108:	eor	r6, r1, #1
   1310c:	and	r6, r6, ip
   13110:	add	sl, sl, #1
   13114:	cmp	r2, sl
   13118:	uxtb	r6, r6
   1311c:	bls	1317c <__assert_fail@plt+0x1fd4>
   13120:	cmp	r6, #0
   13124:	beq	130e8 <__assert_fail@plt+0x1f40>
   13128:	cmp	fp, r7
   1312c:	movhi	ip, #39	; 0x27
   13130:	strbhi	ip, [r3, r7]
   13134:	add	ip, r7, #1
   13138:	cmp	fp, ip
   1313c:	movhi	lr, #39	; 0x27
   13140:	strbhi	lr, [r3, ip]
   13144:	add	r7, r7, #2
   13148:	mov	r6, r8
   1314c:	mov	ip, r8
   13150:	b	130e8 <__assert_fail@plt+0x1f40>
   13154:	cmp	fp, r7
   13158:	eor	r6, r1, #1
   1315c:	movhi	lr, #92	; 0x5c
   13160:	and	r6, r6, ip
   13164:	add	sl, sl, #1
   13168:	strbhi	lr, [r3, r7]
   1316c:	cmp	r2, sl
   13170:	add	r7, r7, #1
   13174:	uxtb	r6, r6
   13178:	bhi	13120 <__assert_fail@plt+0x1f78>
   1317c:	str	ip, [sp, #40]	; 0x28
   13180:	ldr	r5, [sp, #48]	; 0x30
   13184:	b	1284c <__assert_fail@plt+0x16a4>
   13188:	ldr	r3, [sp, #24]
   1318c:	cmn	r3, #1
   13190:	mov	r3, #0
   13194:	str	r3, [sp, #104]	; 0x68
   13198:	str	r3, [sp, #108]	; 0x6c
   1319c:	beq	134bc <__assert_fail@plt+0x2314>
   131a0:	mov	r2, r5
   131a4:	mov	r3, #0
   131a8:	str	r7, [sp, #88]	; 0x58
   131ac:	ldr	r7, [sp, #152]	; 0x98
   131b0:	str	r5, [sp, #92]	; 0x5c
   131b4:	str	r6, [sp, #84]	; 0x54
   131b8:	mov	r5, r3
   131bc:	mov	r6, r2
   131c0:	str	r4, [sp, #80]	; 0x50
   131c4:	ldr	r3, [sp, #56]	; 0x38
   131c8:	add	r9, sl, r5
   131cc:	add	r8, r3, r9
   131d0:	ldr	r3, [sp, #24]
   131d4:	mov	r1, r8
   131d8:	sub	r2, r3, r9
   131dc:	add	r0, sp, #100	; 0x64
   131e0:	add	r3, sp, #104	; 0x68
   131e4:	bl	15cb4 <__assert_fail@plt+0x4b0c>
   131e8:	subs	r4, r0, #0
   131ec:	beq	13594 <__assert_fail@plt+0x23ec>
   131f0:	cmn	r4, #1
   131f4:	beq	13574 <__assert_fail@plt+0x23cc>
   131f8:	cmn	r4, #2
   131fc:	beq	13514 <__assert_fail@plt+0x236c>
   13200:	ldr	r2, [sp, #28]
   13204:	cmp	r7, #2
   13208:	movne	r2, #0
   1320c:	andeq	r2, r2, #1
   13210:	cmp	r2, #0
   13214:	beq	12fc4 <__assert_fail@plt+0x1e1c>
   13218:	cmp	r4, #1
   1321c:	beq	12fc4 <__assert_fail@plt+0x1e1c>
   13220:	sub	r3, r4, #1
   13224:	add	r9, r3, r9
   13228:	ldr	r3, [sp, #56]	; 0x38
   1322c:	add	r9, r3, r9
   13230:	ldrb	r3, [r8, #1]!
   13234:	sub	r3, r3, #91	; 0x5b
   13238:	cmp	r3, #33	; 0x21
   1323c:	ldrls	pc, [pc, r3, lsl #2]
   13240:	b	12fbc <__assert_fail@plt+0x1e14>
   13244:	andeq	r3, r1, ip, asr #5
   13248:	andeq	r3, r1, ip, asr #5
   1324c:			; <UNDEFINED> instruction: 0x00012fbc
   13250:	andeq	r3, r1, ip, asr #5
   13254:			; <UNDEFINED> instruction: 0x00012fbc
   13258:	andeq	r3, r1, ip, asr #5
   1325c:			; <UNDEFINED> instruction: 0x00012fbc
   13260:			; <UNDEFINED> instruction: 0x00012fbc
   13264:			; <UNDEFINED> instruction: 0x00012fbc
   13268:			; <UNDEFINED> instruction: 0x00012fbc
   1326c:			; <UNDEFINED> instruction: 0x00012fbc
   13270:			; <UNDEFINED> instruction: 0x00012fbc
   13274:			; <UNDEFINED> instruction: 0x00012fbc
   13278:			; <UNDEFINED> instruction: 0x00012fbc
   1327c:			; <UNDEFINED> instruction: 0x00012fbc
   13280:			; <UNDEFINED> instruction: 0x00012fbc
   13284:			; <UNDEFINED> instruction: 0x00012fbc
   13288:			; <UNDEFINED> instruction: 0x00012fbc
   1328c:			; <UNDEFINED> instruction: 0x00012fbc
   13290:			; <UNDEFINED> instruction: 0x00012fbc
   13294:			; <UNDEFINED> instruction: 0x00012fbc
   13298:			; <UNDEFINED> instruction: 0x00012fbc
   1329c:			; <UNDEFINED> instruction: 0x00012fbc
   132a0:			; <UNDEFINED> instruction: 0x00012fbc
   132a4:			; <UNDEFINED> instruction: 0x00012fbc
   132a8:			; <UNDEFINED> instruction: 0x00012fbc
   132ac:			; <UNDEFINED> instruction: 0x00012fbc
   132b0:			; <UNDEFINED> instruction: 0x00012fbc
   132b4:			; <UNDEFINED> instruction: 0x00012fbc
   132b8:			; <UNDEFINED> instruction: 0x00012fbc
   132bc:			; <UNDEFINED> instruction: 0x00012fbc
   132c0:			; <UNDEFINED> instruction: 0x00012fbc
   132c4:			; <UNDEFINED> instruction: 0x00012fbc
   132c8:	andeq	r3, r1, ip, asr #5
   132cc:	mov	r3, #2
   132d0:	ldr	sl, [sp, #32]
   132d4:	mov	r8, fp
   132d8:	str	r3, [sp, #152]	; 0x98
   132dc:	b	12a54 <__assert_fail@plt+0x18ac>
   132e0:	ldr	r3, [sp, #156]	; 0x9c
   132e4:	tst	r3, #1
   132e8:	bne	13414 <__assert_fail@plt+0x226c>
   132ec:	ldr	r3, [sp, #152]	; 0x98
   132f0:	ldr	r4, [sp, #44]	; 0x2c
   132f4:	sub	r2, r3, #2
   132f8:	mov	r5, #0
   132fc:	clz	r2, r2
   13300:	mov	r8, r4
   13304:	lsr	r2, r2, #5
   13308:	b	12814 <__assert_fail@plt+0x166c>
   1330c:	ldr	r3, [sp, #156]	; 0x9c
   13310:	ands	r9, r3, #4
   13314:	beq	1344c <__assert_fail@plt+0x22a4>
   13318:	ldr	r2, [sp, #24]
   1331c:	add	r3, sl, #2
   13320:	cmp	r3, r2
   13324:	bcs	13338 <__assert_fail@plt+0x2190>
   13328:	ldr	r2, [sp, #48]	; 0x30
   1332c:	ldrb	r4, [r2, #1]
   13330:	cmp	r4, #63	; 0x3f
   13334:	beq	135d4 <__assert_fail@plt+0x242c>
   13338:	mov	r2, #0
   1333c:	mov	r8, r2
   13340:	mov	r5, r2
   13344:	mov	r4, #63	; 0x3f
   13348:	b	12814 <__assert_fail@plt+0x166c>
   1334c:	ldr	r3, [sp, #28]
   13350:	cmp	r3, #0
   13354:	bne	13678 <__assert_fail@plt+0x24d0>
   13358:	mov	r2, r5
   1335c:	mov	r8, r3
   13360:	mov	r5, #0
   13364:	mov	r4, #63	; 0x3f
   13368:	b	12814 <__assert_fail@plt+0x166c>
   1336c:	ldr	r3, [sp, #28]
   13370:	cmp	r3, #0
   13374:	bne	13678 <__assert_fail@plt+0x24d0>
   13378:	ldr	r2, [sp, #72]	; 0x48
   1337c:	adds	r3, fp, #0
   13380:	movne	r3, #1
   13384:	cmp	r2, #0
   13388:	movne	r3, #0
   1338c:	cmp	r3, #0
   13390:	strne	fp, [sp, #72]	; 0x48
   13394:	movne	fp, #0
   13398:	bne	133d4 <__assert_fail@plt+0x222c>
   1339c:	cmp	fp, r7
   133a0:	movhi	r2, #39	; 0x27
   133a4:	ldrhi	r3, [sp, #32]
   133a8:	strbhi	r2, [r3, r7]
   133ac:	add	r3, r7, #1
   133b0:	cmp	fp, r3
   133b4:	movhi	r1, #92	; 0x5c
   133b8:	ldrhi	r2, [sp, #32]
   133bc:	strbhi	r1, [r2, r3]
   133c0:	add	r3, r7, #2
   133c4:	cmp	fp, r3
   133c8:	movhi	r1, #39	; 0x27
   133cc:	ldrhi	r2, [sp, #32]
   133d0:	strbhi	r1, [r2, r3]
   133d4:	ldr	r3, [sp, #28]
   133d8:	add	r7, r7, #3
   133dc:	mov	r2, r5
   133e0:	mov	r8, r3
   133e4:	str	r5, [sp, #68]	; 0x44
   133e8:	str	r3, [sp, #40]	; 0x28
   133ec:	mov	r4, #39	; 0x27
   133f0:	b	12814 <__assert_fail@plt+0x166c>
   133f4:	ldr	r3, [sp, #56]	; 0x38
   133f8:	ldrb	r3, [r3, #1]
   133fc:	adds	r3, r3, #0
   13400:	movne	r3, #1
   13404:	b	127ec <__assert_fail@plt+0x1644>
   13408:	ldr	r5, [sp, #28]
   1340c:	mov	r4, #48	; 0x30
   13410:	b	12814 <__assert_fail@plt+0x166c>
   13414:	add	sl, sl, #1
   13418:	b	12344 <__assert_fail@plt+0x119c>
   1341c:	mov	sl, r3
   13420:	ldr	r3, [sp, #28]
   13424:	mov	r8, fp
   13428:	str	r3, [sp, #44]	; 0x2c
   1342c:	ldr	r3, [sp, #152]	; 0x98
   13430:	sub	r2, r3, #2
   13434:	clz	r2, r2
   13438:	lsr	r2, r2, #5
   1343c:	b	12a54 <__assert_fail@plt+0x18ac>
   13440:	str	ip, [sp, #40]	; 0x28
   13444:	ldr	r5, [sp, #48]	; 0x30
   13448:	b	12884 <__assert_fail@plt+0x16dc>
   1344c:	mov	r2, r9
   13450:	mov	r8, r9
   13454:	mov	r5, #0
   13458:	mov	r4, #63	; 0x3f
   1345c:	b	12814 <__assert_fail@plt+0x166c>
   13460:	cmp	fp, #0
   13464:	beq	134dc <__assert_fail@plt+0x2334>
   13468:	ldr	r1, [sp, #32]
   1346c:	mov	r3, #34	; 0x22
   13470:	mov	r2, #1
   13474:	strb	r3, [r1]
   13478:	ldr	r3, [pc, #332]	; 135cc <__assert_fail@plt+0x2424>
   1347c:	str	r2, [sp, #52]	; 0x34
   13480:	mov	r7, r2
   13484:	str	r2, [sp, #44]	; 0x2c
   13488:	str	r3, [sp, #64]	; 0x40
   1348c:	b	12334 <__assert_fail@plt+0x118c>
   13490:	ldr	r3, [pc, #300]	; 135c4 <__assert_fail@plt+0x241c>
   13494:	str	r3, [sp, #64]	; 0x40
   13498:	mov	r3, #0
   1349c:	str	r3, [sp, #28]
   134a0:	mov	r3, #1
   134a4:	str	r3, [sp, #52]	; 0x34
   134a8:	mov	r7, r3
   134ac:	mov	r3, #2
   134b0:	str	r3, [sp, #152]	; 0x98
   134b4:	b	12334 <__assert_fail@plt+0x118c>
   134b8:	bl	11184 <abort@plt>
   134bc:	ldr	r0, [sp, #56]	; 0x38
   134c0:	bl	11088 <strlen@plt>
   134c4:	str	r0, [sp, #24]
   134c8:	b	131a0 <__assert_fail@plt+0x1ff8>
   134cc:	mov	r5, r8
   134d0:	mov	r4, #48	; 0x30
   134d4:	ldr	r8, [sp, #44]	; 0x2c
   134d8:	b	12814 <__assert_fail@plt+0x166c>
   134dc:	mov	r3, #1
   134e0:	str	r3, [sp, #52]	; 0x34
   134e4:	mov	r7, r3
   134e8:	str	r3, [sp, #44]	; 0x2c
   134ec:	ldr	r3, [pc, #216]	; 135cc <__assert_fail@plt+0x2424>
   134f0:	str	r3, [sp, #64]	; 0x40
   134f4:	b	12334 <__assert_fail@plt+0x118c>
   134f8:	ldr	sl, [sp, #32]
   134fc:	mov	r8, fp
   13500:	mov	r2, r3
   13504:	b	12a54 <__assert_fail@plt+0x18ac>
   13508:	mov	r3, r5
   1350c:	mov	r5, r2
   13510:	b	12d0c <__assert_fail@plt+0x1b64>
   13514:	ldr	r1, [sp, #24]
   13518:	mov	r2, r5
   1351c:	cmp	r1, r9
   13520:	mov	ip, r5
   13524:	ldr	r4, [sp, #80]	; 0x50
   13528:	ldr	r5, [sp, #92]	; 0x5c
   1352c:	ldr	r6, [sp, #84]	; 0x54
   13530:	ldr	r7, [sp, #88]	; 0x58
   13534:	bls	13568 <__assert_fail@plt+0x23c0>
   13538:	ldrb	r3, [r8]
   1353c:	cmp	r3, #0
   13540:	bne	13554 <__assert_fail@plt+0x23ac>
   13544:	b	1356c <__assert_fail@plt+0x23c4>
   13548:	ldrb	r3, [r8, #1]!
   1354c:	cmp	r3, #0
   13550:	beq	1366c <__assert_fail@plt+0x24c4>
   13554:	add	r2, r2, #1
   13558:	add	r3, sl, r2
   1355c:	cmp	r1, r3
   13560:	bhi	13548 <__assert_fail@plt+0x23a0>
   13564:	mov	ip, r2
   13568:	mov	r3, #0
   1356c:	mov	r2, r3
   13570:	b	13004 <__assert_fail@plt+0x1e5c>
   13574:	mov	r3, #0
   13578:	mov	ip, r5
   1357c:	ldr	r4, [sp, #80]	; 0x50
   13580:	ldr	r5, [sp, #92]	; 0x5c
   13584:	ldr	r6, [sp, #84]	; 0x54
   13588:	ldr	r7, [sp, #88]	; 0x58
   1358c:	mov	r2, r3
   13590:	b	13004 <__assert_fail@plt+0x1e5c>
   13594:	mov	r3, r6
   13598:	mov	ip, r5
   1359c:	eor	r5, r3, #1
   135a0:	mov	r2, r6
   135a4:	ldr	r4, [sp, #80]	; 0x50
   135a8:	ldr	r6, [sp, #84]	; 0x54
   135ac:	ldr	r7, [sp, #88]	; 0x58
   135b0:	uxtb	r5, r5
   135b4:	b	13004 <__assert_fail@plt+0x1e5c>
   135b8:	ldr	sl, [sp, #32]
   135bc:	mov	r8, fp
   135c0:	b	13428 <__assert_fail@plt+0x2280>
   135c4:	andeq	r6, r1, r4, ror #26
   135c8:	andeq	r6, r1, r8, ror #26
   135cc:	andeq	r6, r1, r0, ror #26
   135d0:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   135d4:	ldr	r2, [sp, #56]	; 0x38
   135d8:	ldrb	r1, [r2, r3]
   135dc:	sub	r2, r1, #33	; 0x21
   135e0:	uxtb	r2, r2
   135e4:	cmp	r2, #29
   135e8:	bhi	13688 <__assert_fail@plt+0x24e0>
   135ec:	ldr	r0, [pc, #-36]	; 135d0 <__assert_fail@plt+0x2428>
   135f0:	mov	ip, #1
   135f4:	ands	r2, r0, ip, lsl r2
   135f8:	beq	13698 <__assert_fail@plt+0x24f0>
   135fc:	ldr	r2, [sp, #28]
   13600:	cmp	r2, #0
   13604:	bne	13798 <__assert_fail@plt+0x25f0>
   13608:	cmp	fp, r7
   1360c:	ldr	r8, [sp, #28]
   13610:	ldrhi	r2, [sp, #32]
   13614:	mov	sl, r3
   13618:	mov	r5, r8
   1361c:	strbhi	r4, [r2, r7]
   13620:	add	r2, r7, #1
   13624:	cmp	fp, r2
   13628:	movhi	r0, #34	; 0x22
   1362c:	ldrhi	ip, [sp, #32]
   13630:	mov	r4, r1
   13634:	strbhi	r0, [ip, r2]
   13638:	add	r2, r7, #2
   1363c:	cmp	fp, r2
   13640:	movhi	r0, #34	; 0x22
   13644:	ldrhi	ip, [sp, #32]
   13648:	strbhi	r0, [ip, r2]
   1364c:	add	r2, r7, #3
   13650:	cmp	fp, r2
   13654:	movhi	r0, #63	; 0x3f
   13658:	ldrhi	ip, [sp, #32]
   1365c:	add	r7, r7, #4
   13660:	strbhi	r0, [ip, r2]
   13664:	mov	r2, r8
   13668:	b	12814 <__assert_fail@plt+0x166c>
   1366c:	mov	ip, r2
   13670:	mov	r2, r3
   13674:	b	13004 <__assert_fail@plt+0x1e5c>
   13678:	ldr	sl, [sp, #32]
   1367c:	mov	r8, fp
   13680:	ldr	r2, [sp, #28]
   13684:	b	12a54 <__assert_fail@plt+0x18ac>
   13688:	mov	r2, #0
   1368c:	mov	r8, r2
   13690:	mov	r5, r2
   13694:	b	12814 <__assert_fail@plt+0x166c>
   13698:	mov	r8, r2
   1369c:	mov	r5, #0
   136a0:	b	12814 <__assert_fail@plt+0x166c>
   136a4:	ldr	r1, [sp, #152]	; 0x98
   136a8:	bl	12170 <__assert_fail@plt+0xfc8>
   136ac:	str	r0, [sp, #168]	; 0xa8
   136b0:	b	126d0 <__assert_fail@plt+0x1528>
   136b4:	ldr	r1, [sp, #152]	; 0x98
   136b8:	bl	12170 <__assert_fail@plt+0xfc8>
   136bc:	str	r0, [sp, #164]	; 0xa4
   136c0:	b	126b0 <__assert_fail@plt+0x1508>
   136c4:	ldr	r7, [sp, #28]
   136c8:	b	12710 <__assert_fail@plt+0x1568>
   136cc:	ldr	sl, [sp, #32]
   136d0:	ldr	r2, [sp, #68]	; 0x44
   136d4:	mov	r8, fp
   136d8:	mov	fp, r7
   136dc:	ldr	r3, [sp, #64]	; 0x40
   136e0:	cmp	r3, #0
   136e4:	moveq	r2, #0
   136e8:	andne	r2, r2, #1
   136ec:	cmp	r2, #0
   136f0:	beq	1371c <__assert_fail@plt+0x2574>
   136f4:	mov	r2, r3
   136f8:	ldrb	r3, [r3]
   136fc:	cmp	r3, #0
   13700:	beq	1371c <__assert_fail@plt+0x2574>
   13704:	cmp	r8, fp
   13708:	strbhi	r3, [sl, fp]
   1370c:	ldrb	r3, [r2, #1]!
   13710:	add	fp, fp, #1
   13714:	cmp	r3, #0
   13718:	bne	13704 <__assert_fail@plt+0x255c>
   1371c:	cmp	r8, fp
   13720:	movhi	r3, #0
   13724:	strbhi	r3, [sl, fp]
   13728:	b	12ab0 <__assert_fail@plt+0x1908>
   1372c:	ldr	r3, [sp, #168]	; 0xa8
   13730:	ldr	sl, [sp, #32]
   13734:	str	r3, [sp, #16]
   13738:	ldr	r3, [sp, #164]	; 0xa4
   1373c:	mov	ip, #5
   13740:	str	r3, [sp, #12]
   13744:	ldr	r3, [sp, #160]	; 0xa0
   13748:	ldr	r2, [sp, #56]	; 0x38
   1374c:	str	r3, [sp, #8]
   13750:	ldr	r3, [sp, #156]	; 0x9c
   13754:	ldr	r1, [sp, #72]	; 0x48
   13758:	str	r3, [sp, #4]
   1375c:	mov	r0, sl
   13760:	ldr	r3, [sp, #24]
   13764:	str	ip, [sp]
   13768:	bl	12290 <__assert_fail@plt+0x10e8>
   1376c:	mov	fp, r0
   13770:	b	12ab0 <__assert_fail@plt+0x1908>
   13774:	mov	r8, fp
   13778:	ldr	sl, [sp, #32]
   1377c:	mov	fp, r7
   13780:	mov	r2, r3
   13784:	b	136dc <__assert_fail@plt+0x2534>
   13788:	mov	r8, fp
   1378c:	ldr	sl, [sp, #32]
   13790:	mov	fp, r7
   13794:	b	136dc <__assert_fail@plt+0x2534>
   13798:	ldr	sl, [sp, #32]
   1379c:	mov	r8, fp
   137a0:	b	12a6c <__assert_fail@plt+0x18c4>
   137a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137a8:	sub	sp, sp, #52	; 0x34
   137ac:	mov	r4, r0
   137b0:	mov	r5, r3
   137b4:	mov	sl, r1
   137b8:	mov	fp, r2
   137bc:	bl	110a0 <__errno_location@plt>
   137c0:	ldr	r7, [pc, #412]	; 13964 <__assert_fail@plt+0x27bc>
   137c4:	cmn	r4, #-2147483647	; 0x80000001
   137c8:	ldr	r6, [r7]
   137cc:	mov	r8, r0
   137d0:	movne	r0, #0
   137d4:	moveq	r0, #1
   137d8:	ldr	r3, [r8]
   137dc:	orrs	r0, r0, r4, lsr #31
   137e0:	str	r3, [sp, #24]
   137e4:	bne	13960 <__assert_fail@plt+0x27b8>
   137e8:	ldr	r2, [r7, #4]
   137ec:	cmp	r4, r2
   137f0:	blt	13850 <__assert_fail@plt+0x26a8>
   137f4:	add	r9, r7, #8
   137f8:	cmp	r6, r9
   137fc:	str	r2, [sp, #44]	; 0x2c
   13800:	beq	13930 <__assert_fail@plt+0x2788>
   13804:	mov	r3, #8
   13808:	sub	r2, r4, r2
   1380c:	mov	r0, r6
   13810:	str	r3, [sp]
   13814:	add	r2, r2, #1
   13818:	mvn	r3, #-2147483648	; 0x80000000
   1381c:	add	r1, sp, #44	; 0x2c
   13820:	bl	149c0 <__assert_fail@plt+0x3818>
   13824:	mov	r6, r0
   13828:	str	r0, [r7]
   1382c:	ldr	r0, [r7, #4]
   13830:	ldr	r2, [sp, #44]	; 0x2c
   13834:	mov	r1, #0
   13838:	sub	r2, r2, r0
   1383c:	add	r0, r6, r0, lsl #3
   13840:	lsl	r2, r2, #3
   13844:	bl	110c4 <memset@plt>
   13848:	ldr	r3, [sp, #44]	; 0x2c
   1384c:	str	r3, [r7, #4]
   13850:	add	r3, r6, r4, lsl #3
   13854:	ldr	r1, [r5, #4]
   13858:	ldr	r7, [r3, #4]
   1385c:	ldr	r9, [r6, r4, lsl #3]
   13860:	ldr	r2, [r5, #40]	; 0x28
   13864:	ldr	ip, [r5, #44]	; 0x2c
   13868:	add	r0, r5, #8
   1386c:	str	r3, [sp, #28]
   13870:	ldr	r3, [r5]
   13874:	orr	r1, r1, #1
   13878:	mov	lr, r0
   1387c:	str	r1, [sp, #32]
   13880:	str	r0, [sp, #36]	; 0x24
   13884:	str	r1, [sp, #4]
   13888:	str	r2, [sp, #12]
   1388c:	str	r3, [sp]
   13890:	mov	r0, r7
   13894:	mov	r1, r9
   13898:	str	ip, [sp, #16]
   1389c:	str	lr, [sp, #8]
   138a0:	mov	r3, fp
   138a4:	mov	r2, sl
   138a8:	bl	12290 <__assert_fail@plt+0x10e8>
   138ac:	cmp	r9, r0
   138b0:	bhi	1391c <__assert_fail@plt+0x2774>
   138b4:	ldr	r3, [pc, #172]	; 13968 <__assert_fail@plt+0x27c0>
   138b8:	add	r9, r0, #1
   138bc:	cmp	r7, r3
   138c0:	str	r9, [r6, r4, lsl #3]
   138c4:	beq	138d0 <__assert_fail@plt+0x2728>
   138c8:	mov	r0, r7
   138cc:	bl	12034 <__assert_fail@plt+0xe8c>
   138d0:	mov	r0, r9
   138d4:	bl	1485c <__assert_fail@plt+0x36b4>
   138d8:	ldr	lr, [sp, #28]
   138dc:	ldr	ip, [r5, #44]	; 0x2c
   138e0:	ldr	r4, [r5, #40]	; 0x28
   138e4:	mov	r3, fp
   138e8:	mov	r2, sl
   138ec:	mov	r1, r9
   138f0:	str	r0, [lr, #4]
   138f4:	ldr	lr, [r5]
   138f8:	ldr	r5, [sp, #36]	; 0x24
   138fc:	str	ip, [sp, #16]
   13900:	str	r5, [sp, #8]
   13904:	ldr	r5, [sp, #32]
   13908:	str	r4, [sp, #12]
   1390c:	str	r5, [sp, #4]
   13910:	str	lr, [sp]
   13914:	mov	r7, r0
   13918:	bl	12290 <__assert_fail@plt+0x10e8>
   1391c:	ldr	r3, [sp, #24]
   13920:	mov	r0, r7
   13924:	str	r3, [r8]
   13928:	add	sp, sp, #52	; 0x34
   1392c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13930:	mov	r3, #8
   13934:	sub	r2, r4, r2
   13938:	str	r3, [sp]
   1393c:	add	r1, sp, #44	; 0x2c
   13940:	add	r2, r2, #1
   13944:	mvn	r3, #-2147483648	; 0x80000000
   13948:	bl	149c0 <__assert_fail@plt+0x3818>
   1394c:	mov	r6, r0
   13950:	ldm	r9, {r0, r1}
   13954:	str	r6, [r7]
   13958:	stm	r6, {r0, r1}
   1395c:	b	1382c <__assert_fail@plt+0x2684>
   13960:	bl	11184 <abort@plt>
   13964:	andeq	r8, r2, r0, lsr #2
   13968:	andeq	r8, r2, ip, lsl #3
   1396c:	push	{r4, r5, r6, lr}
   13970:	mov	r5, r0
   13974:	bl	110a0 <__errno_location@plt>
   13978:	cmp	r5, #0
   1397c:	mov	r1, #48	; 0x30
   13980:	mov	r4, r0
   13984:	ldr	r0, [pc, #16]	; 1399c <__assert_fail@plt+0x27f4>
   13988:	ldr	r6, [r4]
   1398c:	movne	r0, r5
   13990:	bl	14cbc <__assert_fail@plt+0x3b14>
   13994:	str	r6, [r4]
   13998:	pop	{r4, r5, r6, pc}
   1399c:	andeq	r8, r2, ip, lsl #5
   139a0:	ldr	r3, [pc, #12]	; 139b4 <__assert_fail@plt+0x280c>
   139a4:	cmp	r0, #0
   139a8:	moveq	r0, r3
   139ac:	ldr	r0, [r0]
   139b0:	bx	lr
   139b4:	andeq	r8, r2, ip, lsl #5
   139b8:	ldr	r3, [pc, #12]	; 139cc <__assert_fail@plt+0x2824>
   139bc:	cmp	r0, #0
   139c0:	moveq	r0, r3
   139c4:	str	r1, [r0]
   139c8:	bx	lr
   139cc:	andeq	r8, r2, ip, lsl #5
   139d0:	ldr	r3, [pc, #52]	; 13a0c <__assert_fail@plt+0x2864>
   139d4:	cmp	r0, #0
   139d8:	moveq	r0, r3
   139dc:	add	r3, r0, #8
   139e0:	push	{lr}		; (str lr, [sp, #-4]!)
   139e4:	lsr	lr, r1, #5
   139e8:	and	r1, r1, #31
   139ec:	ldr	ip, [r3, lr, lsl #2]
   139f0:	lsr	r0, ip, r1
   139f4:	eor	r2, r2, r0
   139f8:	and	r2, r2, #1
   139fc:	and	r0, r0, #1
   13a00:	eor	r1, ip, r2, lsl r1
   13a04:	str	r1, [r3, lr, lsl #2]
   13a08:	pop	{pc}		; (ldr pc, [sp], #4)
   13a0c:	andeq	r8, r2, ip, lsl #5
   13a10:	ldr	r3, [pc, #16]	; 13a28 <__assert_fail@plt+0x2880>
   13a14:	cmp	r0, #0
   13a18:	movne	r3, r0
   13a1c:	ldr	r0, [r3, #4]
   13a20:	str	r1, [r3, #4]
   13a24:	bx	lr
   13a28:	andeq	r8, r2, ip, lsl #5
   13a2c:	ldr	r3, [pc, #44]	; 13a60 <__assert_fail@plt+0x28b8>
   13a30:	cmp	r0, #0
   13a34:	moveq	r0, r3
   13a38:	mov	ip, #10
   13a3c:	cmp	r2, #0
   13a40:	cmpne	r1, #0
   13a44:	str	ip, [r0]
   13a48:	beq	13a58 <__assert_fail@plt+0x28b0>
   13a4c:	str	r1, [r0, #40]	; 0x28
   13a50:	str	r2, [r0, #44]	; 0x2c
   13a54:	bx	lr
   13a58:	push	{r4, lr}
   13a5c:	bl	11184 <abort@plt>
   13a60:	andeq	r8, r2, ip, lsl #5
   13a64:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13a68:	sub	sp, sp, #24
   13a6c:	ldr	ip, [pc, #108]	; 13ae0 <__assert_fail@plt+0x2938>
   13a70:	ldr	r4, [sp, #56]	; 0x38
   13a74:	mov	r9, r2
   13a78:	cmp	r4, #0
   13a7c:	moveq	r4, ip
   13a80:	mov	sl, r3
   13a84:	mov	r7, r0
   13a88:	mov	r8, r1
   13a8c:	bl	110a0 <__errno_location@plt>
   13a90:	ldr	r3, [r4, #44]	; 0x2c
   13a94:	mov	r1, r8
   13a98:	ldr	r6, [r0]
   13a9c:	str	r3, [sp, #16]
   13aa0:	ldr	r2, [r4, #40]	; 0x28
   13aa4:	add	r3, r4, #8
   13aa8:	str	r3, [sp, #8]
   13aac:	str	r2, [sp, #12]
   13ab0:	ldr	r2, [r4, #4]
   13ab4:	mov	r5, r0
   13ab8:	str	r2, [sp, #4]
   13abc:	ldr	ip, [r4]
   13ac0:	mov	r3, sl
   13ac4:	mov	r2, r9
   13ac8:	mov	r0, r7
   13acc:	str	ip, [sp]
   13ad0:	bl	12290 <__assert_fail@plt+0x10e8>
   13ad4:	str	r6, [r5]
   13ad8:	add	sp, sp, #24
   13adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13ae0:	andeq	r8, r2, ip, lsl #5
   13ae4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ae8:	cmp	r3, #0
   13aec:	sub	sp, sp, #44	; 0x2c
   13af0:	ldr	r4, [pc, #192]	; 13bb8 <__assert_fail@plt+0x2a10>
   13af4:	mov	r6, r2
   13af8:	movne	r4, r3
   13afc:	mov	r9, r1
   13b00:	mov	r8, r0
   13b04:	bl	110a0 <__errno_location@plt>
   13b08:	ldr	r3, [r4, #44]	; 0x2c
   13b0c:	ldr	r5, [r4, #4]
   13b10:	add	sl, r4, #8
   13b14:	cmp	r6, #0
   13b18:	orreq	r5, r5, #1
   13b1c:	mov	r1, #0
   13b20:	ldr	r2, [r0]
   13b24:	str	r3, [sp, #16]
   13b28:	ldr	r3, [r4, #40]	; 0x28
   13b2c:	stmib	sp, {r5, sl}
   13b30:	str	r3, [sp, #12]
   13b34:	ldr	r3, [r4]
   13b38:	mov	r7, r0
   13b3c:	str	r2, [sp, #28]
   13b40:	str	r3, [sp]
   13b44:	mov	r2, r8
   13b48:	mov	r3, r9
   13b4c:	mov	r0, r1
   13b50:	bl	12290 <__assert_fail@plt+0x10e8>
   13b54:	add	r1, r0, #1
   13b58:	mov	fp, r0
   13b5c:	mov	r0, r1
   13b60:	str	r1, [sp, #36]	; 0x24
   13b64:	bl	1485c <__assert_fail@plt+0x36b4>
   13b68:	ldr	r3, [r4, #44]	; 0x2c
   13b6c:	mov	r2, r8
   13b70:	str	r3, [sp, #16]
   13b74:	ldr	r3, [r4, #40]	; 0x28
   13b78:	str	r5, [sp, #4]
   13b7c:	str	r3, [sp, #12]
   13b80:	str	sl, [sp, #8]
   13b84:	ldr	ip, [r4]
   13b88:	ldr	r1, [sp, #36]	; 0x24
   13b8c:	mov	r3, r9
   13b90:	str	ip, [sp]
   13b94:	str	r0, [sp, #32]
   13b98:	bl	12290 <__assert_fail@plt+0x10e8>
   13b9c:	ldr	r2, [sp, #28]
   13ba0:	cmp	r6, #0
   13ba4:	str	r2, [r7]
   13ba8:	ldr	r0, [sp, #32]
   13bac:	strne	fp, [r6]
   13bb0:	add	sp, sp, #44	; 0x2c
   13bb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb8:	andeq	r8, r2, ip, lsl #5
   13bbc:	mov	r3, r2
   13bc0:	mov	r2, #0
   13bc4:	b	13ae4 <__assert_fail@plt+0x293c>
   13bc8:	push	{r4, r5, r6, r7, r8, lr}
   13bcc:	ldr	r6, [pc, #116]	; 13c48 <__assert_fail@plt+0x2aa0>
   13bd0:	ldr	r3, [r6, #4]
   13bd4:	ldr	r7, [r6]
   13bd8:	cmp	r3, #1
   13bdc:	movgt	r5, r7
   13be0:	movgt	r4, #1
   13be4:	ble	13c04 <__assert_fail@plt+0x2a5c>
   13be8:	ldr	r0, [r5, #12]
   13bec:	bl	12034 <__assert_fail@plt+0xe8c>
   13bf0:	ldr	r3, [r6, #4]
   13bf4:	add	r4, r4, #1
   13bf8:	cmp	r3, r4
   13bfc:	add	r5, r5, #8
   13c00:	bgt	13be8 <__assert_fail@plt+0x2a40>
   13c04:	ldr	r0, [r7, #4]
   13c08:	ldr	r4, [pc, #60]	; 13c4c <__assert_fail@plt+0x2aa4>
   13c0c:	cmp	r0, r4
   13c10:	beq	13c24 <__assert_fail@plt+0x2a7c>
   13c14:	bl	12034 <__assert_fail@plt+0xe8c>
   13c18:	mov	r3, #256	; 0x100
   13c1c:	str	r4, [r6, #12]
   13c20:	str	r3, [r6, #8]
   13c24:	ldr	r4, [pc, #36]	; 13c50 <__assert_fail@plt+0x2aa8>
   13c28:	cmp	r7, r4
   13c2c:	beq	13c3c <__assert_fail@plt+0x2a94>
   13c30:	mov	r0, r7
   13c34:	bl	12034 <__assert_fail@plt+0xe8c>
   13c38:	str	r4, [r6]
   13c3c:	mov	r3, #1
   13c40:	str	r3, [r6, #4]
   13c44:	pop	{r4, r5, r6, r7, r8, pc}
   13c48:	andeq	r8, r2, r0, lsr #2
   13c4c:	andeq	r8, r2, ip, lsl #3
   13c50:	andeq	r8, r2, r8, lsr #2
   13c54:	ldr	r3, [pc, #4]	; 13c60 <__assert_fail@plt+0x2ab8>
   13c58:	mvn	r2, #0
   13c5c:	b	137a4 <__assert_fail@plt+0x25fc>
   13c60:	andeq	r8, r2, ip, lsl #5
   13c64:	ldr	r3, [pc]	; 13c6c <__assert_fail@plt+0x2ac4>
   13c68:	b	137a4 <__assert_fail@plt+0x25fc>
   13c6c:	andeq	r8, r2, ip, lsl #5
   13c70:	mov	r1, r0
   13c74:	ldr	r3, [pc, #8]	; 13c84 <__assert_fail@plt+0x2adc>
   13c78:	mvn	r2, #0
   13c7c:	mov	r0, #0
   13c80:	b	137a4 <__assert_fail@plt+0x25fc>
   13c84:	andeq	r8, r2, ip, lsl #5
   13c88:	mov	r2, r1
   13c8c:	ldr	r3, [pc, #8]	; 13c9c <__assert_fail@plt+0x2af4>
   13c90:	mov	r1, r0
   13c94:	mov	r0, #0
   13c98:	b	137a4 <__assert_fail@plt+0x25fc>
   13c9c:	andeq	r8, r2, ip, lsl #5
   13ca0:	push	{r4, r5, lr}
   13ca4:	sub	sp, sp, #52	; 0x34
   13ca8:	mov	r5, r2
   13cac:	mov	r4, r0
   13cb0:	mov	r0, sp
   13cb4:	bl	12140 <__assert_fail@plt+0xf98>
   13cb8:	mov	r3, sp
   13cbc:	mov	r1, r5
   13cc0:	mov	r0, r4
   13cc4:	mvn	r2, #0
   13cc8:	bl	137a4 <__assert_fail@plt+0x25fc>
   13ccc:	add	sp, sp, #52	; 0x34
   13cd0:	pop	{r4, r5, pc}
   13cd4:	push	{r4, r5, r6, lr}
   13cd8:	sub	sp, sp, #48	; 0x30
   13cdc:	mov	r5, r2
   13ce0:	mov	r6, r3
   13ce4:	mov	r4, r0
   13ce8:	mov	r0, sp
   13cec:	bl	12140 <__assert_fail@plt+0xf98>
   13cf0:	mov	r3, sp
   13cf4:	mov	r2, r6
   13cf8:	mov	r1, r5
   13cfc:	mov	r0, r4
   13d00:	bl	137a4 <__assert_fail@plt+0x25fc>
   13d04:	add	sp, sp, #48	; 0x30
   13d08:	pop	{r4, r5, r6, pc}
   13d0c:	mov	r2, r1
   13d10:	mov	r1, r0
   13d14:	mov	r0, #0
   13d18:	b	13ca0 <__assert_fail@plt+0x2af8>
   13d1c:	mov	r3, r2
   13d20:	mov	r2, r1
   13d24:	mov	r1, r0
   13d28:	mov	r0, #0
   13d2c:	b	13cd4 <__assert_fail@plt+0x2b2c>
   13d30:	push	{r4, r5, r6, r7, r8, lr}
   13d34:	mov	r7, r0
   13d38:	ldr	lr, [pc, #100]	; 13da4 <__assert_fail@plt+0x2bfc>
   13d3c:	mov	r8, r1
   13d40:	mov	r4, r2
   13d44:	ldm	lr!, {r0, r1, r2, r3}
   13d48:	sub	sp, sp, #48	; 0x30
   13d4c:	mov	ip, sp
   13d50:	lsr	r5, r4, #5
   13d54:	stmia	ip!, {r0, r1, r2, r3}
   13d58:	add	r6, sp, #8
   13d5c:	ldm	lr!, {r0, r1, r2, r3}
   13d60:	and	r4, r4, #31
   13d64:	stmia	ip!, {r0, r1, r2, r3}
   13d68:	ldm	lr, {r0, r1, r2, r3}
   13d6c:	stm	ip, {r0, r1, r2, r3}
   13d70:	mov	r2, r8
   13d74:	ldr	lr, [r6, r5, lsl #2]
   13d78:	mov	r1, r7
   13d7c:	mov	r3, sp
   13d80:	lsr	ip, lr, r4
   13d84:	eor	ip, ip, #1
   13d88:	and	ip, ip, #1
   13d8c:	mov	r0, #0
   13d90:	eor	r4, lr, ip, lsl r4
   13d94:	str	r4, [r6, r5, lsl #2]
   13d98:	bl	137a4 <__assert_fail@plt+0x25fc>
   13d9c:	add	sp, sp, #48	; 0x30
   13da0:	pop	{r4, r5, r6, r7, r8, pc}
   13da4:	andeq	r8, r2, ip, lsl #5
   13da8:	mov	r2, r1
   13dac:	mvn	r1, #0
   13db0:	b	13d30 <__assert_fail@plt+0x2b88>
   13db4:	mov	r2, #58	; 0x3a
   13db8:	mvn	r1, #0
   13dbc:	b	13d30 <__assert_fail@plt+0x2b88>
   13dc0:	mov	r2, #58	; 0x3a
   13dc4:	b	13d30 <__assert_fail@plt+0x2b88>
   13dc8:	push	{r4, r5, r6, r7, lr}
   13dcc:	sub	sp, sp, #100	; 0x64
   13dd0:	mov	r6, r0
   13dd4:	mov	r0, sp
   13dd8:	mov	r7, r2
   13ddc:	bl	12140 <__assert_fail@plt+0xf98>
   13de0:	mov	ip, sp
   13de4:	add	lr, sp, #48	; 0x30
   13de8:	ldm	ip!, {r0, r1, r2, r3}
   13dec:	stmia	lr!, {r0, r1, r2, r3}
   13df0:	ldm	ip!, {r0, r1, r2, r3}
   13df4:	ldr	r5, [sp, #60]	; 0x3c
   13df8:	stmia	lr!, {r0, r1, r2, r3}
   13dfc:	mvn	r4, r5
   13e00:	ldm	ip, {r0, r1, r2, r3}
   13e04:	and	ip, r4, #67108864	; 0x4000000
   13e08:	eor	ip, ip, r5
   13e0c:	str	ip, [sp, #60]	; 0x3c
   13e10:	stm	lr, {r0, r1, r2, r3}
   13e14:	mov	r1, r7
   13e18:	mov	r0, r6
   13e1c:	add	r3, sp, #48	; 0x30
   13e20:	mvn	r2, #0
   13e24:	bl	137a4 <__assert_fail@plt+0x25fc>
   13e28:	add	sp, sp, #100	; 0x64
   13e2c:	pop	{r4, r5, r6, r7, pc}
   13e30:	push	{r4, r5, r6, r7, r8, lr}
   13e34:	mov	r5, r1
   13e38:	ldr	lr, [pc, #100]	; 13ea4 <__assert_fail@plt+0x2cfc>
   13e3c:	mov	r4, r2
   13e40:	mov	r7, r0
   13e44:	mov	r8, r3
   13e48:	ldm	lr!, {r0, r1, r2, r3}
   13e4c:	sub	sp, sp, #48	; 0x30
   13e50:	mov	ip, sp
   13e54:	mov	r6, #10
   13e58:	stmia	ip!, {r0, r1, r2, r3}
   13e5c:	cmp	r4, #0
   13e60:	cmpne	r5, #0
   13e64:	ldm	lr!, {r0, r1, r2, r3}
   13e68:	str	r6, [sp]
   13e6c:	stmia	ip!, {r0, r1, r2, r3}
   13e70:	ldm	lr, {r0, r1, r2, r3}
   13e74:	stm	ip, {r0, r1, r2, r3}
   13e78:	beq	13ea0 <__assert_fail@plt+0x2cf8>
   13e7c:	mov	r3, sp
   13e80:	mov	r1, r8
   13e84:	mov	r0, r7
   13e88:	ldr	r2, [sp, #72]	; 0x48
   13e8c:	str	r5, [sp, #40]	; 0x28
   13e90:	str	r4, [sp, #44]	; 0x2c
   13e94:	bl	137a4 <__assert_fail@plt+0x25fc>
   13e98:	add	sp, sp, #48	; 0x30
   13e9c:	pop	{r4, r5, r6, r7, r8, pc}
   13ea0:	bl	11184 <abort@plt>
   13ea4:	andeq	r8, r2, ip, lsl #5
   13ea8:	push	{lr}		; (str lr, [sp, #-4]!)
   13eac:	sub	sp, sp, #12
   13eb0:	mvn	ip, #0
   13eb4:	str	ip, [sp]
   13eb8:	bl	13e30 <__assert_fail@plt+0x2c88>
   13ebc:	add	sp, sp, #12
   13ec0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec4:	push	{lr}		; (str lr, [sp, #-4]!)
   13ec8:	sub	sp, sp, #12
   13ecc:	mvn	ip, #0
   13ed0:	mov	r3, r2
   13ed4:	str	ip, [sp]
   13ed8:	mov	r2, r1
   13edc:	mov	r1, r0
   13ee0:	mov	r0, #0
   13ee4:	bl	13e30 <__assert_fail@plt+0x2c88>
   13ee8:	add	sp, sp, #12
   13eec:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ef4:	sub	sp, sp, #12
   13ef8:	str	r3, [sp]
   13efc:	mov	r3, r2
   13f00:	mov	r2, r1
   13f04:	mov	r1, r0
   13f08:	mov	r0, #0
   13f0c:	bl	13e30 <__assert_fail@plt+0x2c88>
   13f10:	add	sp, sp, #12
   13f14:	pop	{pc}		; (ldr pc, [sp], #4)
   13f18:	ldr	r3, [pc]	; 13f20 <__assert_fail@plt+0x2d78>
   13f1c:	b	137a4 <__assert_fail@plt+0x25fc>
   13f20:	andeq	r8, r2, r0, lsr r1
   13f24:	mov	r2, r1
   13f28:	ldr	r3, [pc, #8]	; 13f38 <__assert_fail@plt+0x2d90>
   13f2c:	mov	r1, r0
   13f30:	mov	r0, #0
   13f34:	b	137a4 <__assert_fail@plt+0x25fc>
   13f38:	andeq	r8, r2, r0, lsr r1
   13f3c:	ldr	r3, [pc, #4]	; 13f48 <__assert_fail@plt+0x2da0>
   13f40:	mvn	r2, #0
   13f44:	b	137a4 <__assert_fail@plt+0x25fc>
   13f48:	andeq	r8, r2, r0, lsr r1
   13f4c:	mov	r1, r0
   13f50:	ldr	r3, [pc, #8]	; 13f60 <__assert_fail@plt+0x2db8>
   13f54:	mvn	r2, #0
   13f58:	mov	r0, #0
   13f5c:	b	137a4 <__assert_fail@plt+0x25fc>
   13f60:	andeq	r8, r2, r0, lsr r1
   13f64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f68:	subs	sl, r3, #0
   13f6c:	sub	sp, sp, #44	; 0x2c
   13f70:	ldr	r3, [r2]
   13f74:	ldrne	fp, [sl]
   13f78:	str	r3, [sp, #12]
   13f7c:	ldr	r3, [sp, #80]	; 0x50
   13f80:	mvneq	fp, #0
   13f84:	cmp	r3, #0
   13f88:	mov	r9, r2
   13f8c:	ldrne	r2, [sp, #80]	; 0x50
   13f90:	movne	r3, #0
   13f94:	mov	r4, r1
   13f98:	strne	r3, [r2]
   13f9c:	ldr	r3, [sp, #84]	; 0x54
   13fa0:	cmp	r3, #0
   13fa4:	movne	r3, #0
   13fa8:	ldrne	r2, [sp, #84]	; 0x54
   13fac:	strne	r3, [r2]
   13fb0:	cmp	r1, #0
   13fb4:	beq	1416c <__assert_fail@plt+0x2fc4>
   13fb8:	subs	r6, r1, r0
   13fbc:	bne	14104 <__assert_fail@plt+0x2f5c>
   13fc0:	ldrb	r5, [r1, #1]
   13fc4:	cmp	r5, #0
   13fc8:	movne	r5, r6
   13fcc:	beq	1417c <__assert_fail@plt+0x2fd4>
   13fd0:	cmp	r5, #0
   13fd4:	add	r7, r4, #1
   13fd8:	beq	141cc <__assert_fail@plt+0x3024>
   13fdc:	ldrb	r3, [r5]
   13fe0:	cmp	r3, #43	; 0x2b
   13fe4:	beq	14078 <__assert_fail@plt+0x2ed0>
   13fe8:	mov	r0, r5
   13fec:	bl	10ee4 <getpwnam@plt>
   13ff0:	cmp	r0, #0
   13ff4:	beq	14078 <__assert_fail@plt+0x2ed0>
   13ff8:	cmp	r4, #0
   13ffc:	clz	r6, r7
   14000:	ldr	r3, [r0, #8]
   14004:	lsr	r6, r6, #5
   14008:	moveq	r6, #0
   1400c:	cmp	r6, #0
   14010:	str	r3, [sp, #12]
   14014:	bne	14134 <__assert_fail@plt+0x2f8c>
   14018:	adds	r4, r7, #0
   1401c:	mov	r8, r6
   14020:	movne	r4, #1
   14024:	bl	11124 <endpwent@plt>
   14028:	cmp	r4, #0
   1402c:	beq	140a8 <__assert_fail@plt+0x2f00>
   14030:	ldrb	r3, [r7]
   14034:	cmp	r3, #43	; 0x2b
   14038:	bne	140d8 <__assert_fail@plt+0x2f30>
   1403c:	ldr	r2, [pc, #512]	; 14244 <__assert_fail@plt+0x309c>
   14040:	add	r3, sp, #16
   14044:	str	r2, [sp]
   14048:	mov	r1, #0
   1404c:	mov	r2, #10
   14050:	mov	r0, r7
   14054:	bl	14e94 <__assert_fail@plt+0x3cec>
   14058:	cmp	r0, #0
   1405c:	bne	14164 <__assert_fail@plt+0x2fbc>
   14060:	ldr	r3, [sp, #16]
   14064:	ldr	r8, [pc, #476]	; 14248 <__assert_fail@plt+0x30a0>
   14068:	cmn	r3, #1
   1406c:	movne	fp, r3
   14070:	movne	r8, #0
   14074:	b	140f0 <__assert_fail@plt+0x2f48>
   14078:	adds	r4, r4, #0
   1407c:	movne	r4, #1
   14080:	cmp	r7, #0
   14084:	movne	r4, #0
   14088:	cmp	r4, #0
   1408c:	beq	141f8 <__assert_fail@plt+0x3050>
   14090:	mov	r4, #0
   14094:	bl	11124 <endpwent@plt>
   14098:	cmp	r4, #0
   1409c:	ldr	r8, [pc, #424]	; 1424c <__assert_fail@plt+0x30a4>
   140a0:	mov	r6, r4
   140a4:	bne	14030 <__assert_fail@plt+0x2e88>
   140a8:	cmp	r8, #0
   140ac:	beq	14180 <__assert_fail@plt+0x2fd8>
   140b0:	mov	r0, r5
   140b4:	bl	12034 <__assert_fail@plt+0xe8c>
   140b8:	mov	r0, r6
   140bc:	bl	12034 <__assert_fail@plt+0xe8c>
   140c0:	mov	r1, r8
   140c4:	mov	r2, #5
   140c8:	mov	r0, #0
   140cc:	bl	10f74 <dcgettext@plt>
   140d0:	add	sp, sp, #44	; 0x2c
   140d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d8:	mov	r0, r7
   140dc:	bl	1119c <getgrnam@plt>
   140e0:	cmp	r0, #0
   140e4:	movne	r8, #0
   140e8:	ldrne	fp, [r0, #8]
   140ec:	beq	1403c <__assert_fail@plt+0x2e94>
   140f0:	bl	10ec0 <endgrent@plt>
   140f4:	mov	r0, r7
   140f8:	bl	14d60 <__assert_fail@plt+0x3bb8>
   140fc:	mov	r6, r0
   14100:	b	140a8 <__assert_fail@plt+0x2f00>
   14104:	add	r1, r6, #1
   14108:	bl	14cf0 <__assert_fail@plt+0x3b48>
   1410c:	ldrb	r7, [r4, #1]
   14110:	mov	r3, #0
   14114:	cmp	r7, r3
   14118:	mov	r5, r0
   1411c:	strb	r3, [r0, r6]
   14120:	bne	13fd0 <__assert_fail@plt+0x2e28>
   14124:	ldrb	r3, [r5]
   14128:	cmp	r3, #43	; 0x2b
   1412c:	bne	13fe8 <__assert_fail@plt+0x2e40>
   14130:	b	14078 <__assert_fail@plt+0x2ed0>
   14134:	ldr	fp, [r0, #12]
   14138:	mov	r0, fp
   1413c:	bl	11190 <getgrgid@plt>
   14140:	subs	r1, r0, #0
   14144:	beq	141d8 <__assert_fail@plt+0x3030>
   14148:	ldr	r0, [r1]
   1414c:	bl	14d60 <__assert_fail@plt+0x3bb8>
   14150:	mov	r4, #0
   14154:	mov	r8, r4
   14158:	mov	r6, r0
   1415c:	bl	10ec0 <endgrent@plt>
   14160:	b	14024 <__assert_fail@plt+0x2e7c>
   14164:	ldr	r8, [pc, #220]	; 14248 <__assert_fail@plt+0x30a0>
   14168:	b	140f0 <__assert_fail@plt+0x2f48>
   1416c:	ldrb	r3, [r0]
   14170:	cmp	r3, #0
   14174:	moveq	r5, r1
   14178:	bne	141e8 <__assert_fail@plt+0x3040>
   1417c:	mov	r6, r5
   14180:	ldr	r3, [sp, #12]
   14184:	cmp	sl, #0
   14188:	str	r3, [r9]
   1418c:	ldr	r3, [sp, #80]	; 0x50
   14190:	strne	fp, [sl]
   14194:	cmp	r3, #0
   14198:	strne	r5, [r3]
   1419c:	ldr	r3, [sp, #84]	; 0x54
   141a0:	movne	r5, #0
   141a4:	cmp	r3, #0
   141a8:	strne	r6, [r3]
   141ac:	movne	r6, #0
   141b0:	mov	r0, r5
   141b4:	bl	12034 <__assert_fail@plt+0xe8c>
   141b8:	mov	r0, r6
   141bc:	bl	12034 <__assert_fail@plt+0xe8c>
   141c0:	mov	r0, #0
   141c4:	add	sp, sp, #44	; 0x2c
   141c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141cc:	cmp	r7, #0
   141d0:	bne	14030 <__assert_fail@plt+0x2e88>
   141d4:	b	1417c <__assert_fail@plt+0x2fd4>
   141d8:	add	r2, sp, #16
   141dc:	mov	r0, fp
   141e0:	bl	15c18 <__assert_fail@plt+0x4a70>
   141e4:	b	1414c <__assert_fail@plt+0x2fa4>
   141e8:	bl	14d60 <__assert_fail@plt+0x3bb8>
   141ec:	mov	r7, r4
   141f0:	mov	r5, r0
   141f4:	b	13fdc <__assert_fail@plt+0x2e34>
   141f8:	ldr	r2, [pc, #68]	; 14244 <__assert_fail@plt+0x309c>
   141fc:	add	r3, sp, #16
   14200:	str	r2, [sp]
   14204:	mov	r1, r4
   14208:	mov	r2, #10
   1420c:	mov	r0, r5
   14210:	bl	14e94 <__assert_fail@plt+0x3cec>
   14214:	subs	r8, r0, #0
   14218:	bne	1423c <__assert_fail@plt+0x3094>
   1421c:	ldr	r3, [sp, #16]
   14220:	cmn	r3, #1
   14224:	beq	1423c <__assert_fail@plt+0x3094>
   14228:	adds	r4, r7, #0
   1422c:	movne	r4, #1
   14230:	str	r3, [sp, #12]
   14234:	mov	r6, #0
   14238:	b	14024 <__assert_fail@plt+0x2e7c>
   1423c:	ldr	r8, [pc, #12]	; 14250 <__assert_fail@plt+0x30a8>
   14240:	b	14234 <__assert_fail@plt+0x308c>
   14244:	andeq	r6, r1, r0, lsl #19
   14248:	strdeq	r6, [r1], -r0
   1424c:	andeq	r6, r1, r0, ror #27
   14250:	ldrdeq	r6, [r1], -r0
   14254:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14258:	sub	sp, sp, #8
   1425c:	subs	r7, r2, #0
   14260:	mov	r8, r1
   14264:	mov	r9, r3
   14268:	ldr	sl, [sp, #40]	; 0x28
   1426c:	beq	142f0 <__assert_fail@plt+0x3148>
   14270:	mov	r1, #58	; 0x3a
   14274:	mov	r4, r0
   14278:	bl	11094 <strchr@plt>
   1427c:	stm	sp, {r9, sl}
   14280:	mov	r3, r7
   14284:	mov	r2, r8
   14288:	mov	r6, r0
   1428c:	mov	r1, r0
   14290:	mov	r0, r4
   14294:	bl	13f64 <__assert_fail@plt+0x2dbc>
   14298:	cmp	r6, #0
   1429c:	mov	r5, r0
   142a0:	bne	142dc <__assert_fail@plt+0x3134>
   142a4:	cmp	r0, #0
   142a8:	beq	142e8 <__assert_fail@plt+0x3140>
   142ac:	mov	r1, #46	; 0x2e
   142b0:	mov	r0, r4
   142b4:	bl	11094 <strchr@plt>
   142b8:	subs	r1, r0, #0
   142bc:	beq	142dc <__assert_fail@plt+0x3134>
   142c0:	stm	sp, {r9, sl}
   142c4:	mov	r3, r7
   142c8:	mov	r2, r8
   142cc:	mov	r0, r4
   142d0:	bl	13f64 <__assert_fail@plt+0x2dbc>
   142d4:	cmp	r0, #0
   142d8:	beq	142e8 <__assert_fail@plt+0x3140>
   142dc:	mov	r0, r5
   142e0:	add	sp, sp, #8
   142e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142e8:	mov	r5, r6
   142ec:	b	142dc <__assert_fail@plt+0x3134>
   142f0:	mov	r2, r1
   142f4:	stm	sp, {r9, sl}
   142f8:	mov	r3, r7
   142fc:	mov	r1, r7
   14300:	bl	13f64 <__assert_fail@plt+0x2dbc>
   14304:	mov	r5, r0
   14308:	mov	r0, r5
   1430c:	add	sp, sp, #8
   14310:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14314:	push	{r4, r5, r6, lr}
   14318:	sub	sp, sp, #32
   1431c:	cmp	r1, #0
   14320:	mov	r4, r0
   14324:	ldr	r5, [sp, #48]	; 0x30
   14328:	ldr	r6, [sp, #52]	; 0x34
   1432c:	beq	14644 <__assert_fail@plt+0x349c>
   14330:	stm	sp, {r2, r3}
   14334:	mov	r3, r1
   14338:	ldr	r2, [pc, #808]	; 14668 <__assert_fail@plt+0x34c0>
   1433c:	mov	r1, #1
   14340:	bl	110e8 <__fprintf_chk@plt>
   14344:	mov	r2, #5
   14348:	ldr	r1, [pc, #796]	; 1466c <__assert_fail@plt+0x34c4>
   1434c:	mov	r0, #0
   14350:	bl	10f74 <dcgettext@plt>
   14354:	ldr	r3, [pc, #788]	; 14670 <__assert_fail@plt+0x34c8>
   14358:	ldr	r2, [pc, #788]	; 14674 <__assert_fail@plt+0x34cc>
   1435c:	str	r3, [sp]
   14360:	mov	r1, #1
   14364:	mov	r3, r0
   14368:	mov	r0, r4
   1436c:	bl	110e8 <__fprintf_chk@plt>
   14370:	mov	r1, r4
   14374:	mov	r0, #10
   14378:	bl	10f68 <fputc_unlocked@plt>
   1437c:	mov	r2, #5
   14380:	ldr	r1, [pc, #752]	; 14678 <__assert_fail@plt+0x34d0>
   14384:	mov	r0, #0
   14388:	bl	10f74 <dcgettext@plt>
   1438c:	mov	r1, #1
   14390:	ldr	r3, [pc, #740]	; 1467c <__assert_fail@plt+0x34d4>
   14394:	mov	r2, r0
   14398:	mov	r0, r4
   1439c:	bl	110e8 <__fprintf_chk@plt>
   143a0:	mov	r1, r4
   143a4:	mov	r0, #10
   143a8:	bl	10f68 <fputc_unlocked@plt>
   143ac:	cmp	r6, #9
   143b0:	ldrls	pc, [pc, r6, lsl #2]
   143b4:	b	1465c <__assert_fail@plt+0x34b4>
   143b8:	andeq	r4, r1, ip, lsr r4
   143bc:	andeq	r4, r1, r4, asr #8
   143c0:	andeq	r4, r1, r0, ror r4
   143c4:	andeq	r4, r1, r4, lsr #9
   143c8:	andeq	r4, r1, r0, ror #9
   143cc:	andeq	r4, r1, ip, lsl r5
   143d0:	andeq	r4, r1, r8, asr r5
   143d4:	muleq	r1, ip, r5
   143d8:	andeq	r4, r1, ip, ror #11
   143dc:	andeq	r4, r1, r0, ror #7
   143e0:	ldr	r1, [pc, #664]	; 14680 <__assert_fail@plt+0x34d8>
   143e4:	mov	r2, #5
   143e8:	mov	r0, #0
   143ec:	bl	10f74 <dcgettext@plt>
   143f0:	ldr	ip, [r5, #32]
   143f4:	ldr	r1, [r5, #28]
   143f8:	ldr	r2, [r5, #24]
   143fc:	ldr	r3, [r5]
   14400:	ldr	r6, [r5, #20]
   14404:	str	ip, [sp, #28]
   14408:	ldr	lr, [r5, #16]
   1440c:	str	r1, [sp, #24]
   14410:	ldr	ip, [r5, #12]
   14414:	str	r2, [sp, #20]
   14418:	ldr	r1, [r5, #8]
   1441c:	ldr	r2, [r5, #4]
   14420:	str	r6, [sp, #16]
   14424:	stmib	sp, {r1, ip, lr}
   14428:	mov	r1, #1
   1442c:	str	r2, [sp]
   14430:	mov	r2, r0
   14434:	mov	r0, r4
   14438:	bl	110e8 <__fprintf_chk@plt>
   1443c:	add	sp, sp, #32
   14440:	pop	{r4, r5, r6, pc}
   14444:	mov	r2, #5
   14448:	ldr	r1, [pc, #564]	; 14684 <__assert_fail@plt+0x34dc>
   1444c:	mov	r0, #0
   14450:	bl	10f74 <dcgettext@plt>
   14454:	ldr	r3, [r5]
   14458:	mov	r1, #1
   1445c:	mov	r2, r0
   14460:	mov	r0, r4
   14464:	add	sp, sp, #32
   14468:	pop	{r4, r5, r6, lr}
   1446c:	b	110e8 <__fprintf_chk@plt>
   14470:	mov	r2, #5
   14474:	ldr	r1, [pc, #524]	; 14688 <__assert_fail@plt+0x34e0>
   14478:	mov	r0, #0
   1447c:	bl	10f74 <dcgettext@plt>
   14480:	ldr	r2, [r5, #4]
   14484:	ldr	r3, [r5]
   14488:	mov	r1, #1
   1448c:	str	r2, [sp, #48]	; 0x30
   14490:	mov	r2, r0
   14494:	mov	r0, r4
   14498:	add	sp, sp, #32
   1449c:	pop	{r4, r5, r6, lr}
   144a0:	b	110e8 <__fprintf_chk@plt>
   144a4:	mov	r2, #5
   144a8:	ldr	r1, [pc, #476]	; 1468c <__assert_fail@plt+0x34e4>
   144ac:	mov	r0, #0
   144b0:	bl	10f74 <dcgettext@plt>
   144b4:	ldr	r1, [r5, #8]
   144b8:	ldr	r2, [r5, #4]
   144bc:	ldr	r3, [r5]
   144c0:	str	r1, [sp, #52]	; 0x34
   144c4:	str	r2, [sp, #48]	; 0x30
   144c8:	mov	r1, #1
   144cc:	mov	r2, r0
   144d0:	mov	r0, r4
   144d4:	add	sp, sp, #32
   144d8:	pop	{r4, r5, r6, lr}
   144dc:	b	110e8 <__fprintf_chk@plt>
   144e0:	mov	r2, #5
   144e4:	ldr	r1, [pc, #420]	; 14690 <__assert_fail@plt+0x34e8>
   144e8:	mov	r0, #0
   144ec:	bl	10f74 <dcgettext@plt>
   144f0:	ldr	r1, [r5, #8]
   144f4:	ldr	ip, [r5, #12]
   144f8:	ldr	r2, [r5, #4]
   144fc:	ldr	r3, [r5]
   14500:	stmib	sp, {r1, ip}
   14504:	str	r2, [sp]
   14508:	mov	r1, #1
   1450c:	mov	r2, r0
   14510:	mov	r0, r4
   14514:	bl	110e8 <__fprintf_chk@plt>
   14518:	b	1443c <__assert_fail@plt+0x3294>
   1451c:	mov	r2, #5
   14520:	ldr	r1, [pc, #364]	; 14694 <__assert_fail@plt+0x34ec>
   14524:	mov	r0, #0
   14528:	bl	10f74 <dcgettext@plt>
   1452c:	add	r1, r5, #8
   14530:	ldr	r2, [r5, #4]
   14534:	ldm	r1, {r1, ip, lr}
   14538:	ldr	r3, [r5]
   1453c:	str	r2, [sp]
   14540:	stmib	sp, {r1, ip, lr}
   14544:	mov	r1, #1
   14548:	mov	r2, r0
   1454c:	mov	r0, r4
   14550:	bl	110e8 <__fprintf_chk@plt>
   14554:	b	1443c <__assert_fail@plt+0x3294>
   14558:	mov	r2, #5
   1455c:	ldr	r1, [pc, #308]	; 14698 <__assert_fail@plt+0x34f0>
   14560:	mov	r0, #0
   14564:	bl	10f74 <dcgettext@plt>
   14568:	add	r1, r5, #8
   1456c:	ldr	r2, [r5, #4]
   14570:	ldm	r1, {r1, ip, lr}
   14574:	ldr	r6, [r5, #20]
   14578:	ldr	r3, [r5]
   1457c:	stmib	sp, {r1, ip, lr}
   14580:	mov	r1, #1
   14584:	str	r2, [sp]
   14588:	str	r6, [sp, #16]
   1458c:	mov	r2, r0
   14590:	mov	r0, r4
   14594:	bl	110e8 <__fprintf_chk@plt>
   14598:	b	1443c <__assert_fail@plt+0x3294>
   1459c:	mov	r2, #5
   145a0:	ldr	r1, [pc, #244]	; 1469c <__assert_fail@plt+0x34f4>
   145a4:	mov	r0, #0
   145a8:	bl	10f74 <dcgettext@plt>
   145ac:	ldr	r2, [r5, #24]
   145b0:	ldr	r3, [r5]
   145b4:	ldr	r6, [r5, #20]
   145b8:	ldr	lr, [r5, #16]
   145bc:	ldr	ip, [r5, #12]
   145c0:	str	r2, [sp, #20]
   145c4:	ldr	r1, [r5, #8]
   145c8:	ldr	r2, [r5, #4]
   145cc:	str	r6, [sp, #16]
   145d0:	stmib	sp, {r1, ip, lr}
   145d4:	mov	r1, #1
   145d8:	str	r2, [sp]
   145dc:	mov	r2, r0
   145e0:	mov	r0, r4
   145e4:	bl	110e8 <__fprintf_chk@plt>
   145e8:	b	1443c <__assert_fail@plt+0x3294>
   145ec:	mov	r2, #5
   145f0:	ldr	r1, [pc, #168]	; 146a0 <__assert_fail@plt+0x34f8>
   145f4:	mov	r0, #0
   145f8:	bl	10f74 <dcgettext@plt>
   145fc:	ldr	r1, [r5, #28]
   14600:	ldr	r2, [r5, #24]
   14604:	ldr	r3, [r5]
   14608:	ldr	r6, [r5, #20]
   1460c:	ldr	lr, [r5, #16]
   14610:	str	r1, [sp, #24]
   14614:	ldr	ip, [r5, #12]
   14618:	str	r2, [sp, #20]
   1461c:	ldr	r1, [r5, #8]
   14620:	ldr	r2, [r5, #4]
   14624:	str	r6, [sp, #16]
   14628:	stmib	sp, {r1, ip, lr}
   1462c:	mov	r1, #1
   14630:	str	r2, [sp]
   14634:	mov	r2, r0
   14638:	mov	r0, r4
   1463c:	bl	110e8 <__fprintf_chk@plt>
   14640:	b	1443c <__assert_fail@plt+0x3294>
   14644:	str	r3, [sp]
   14648:	mov	r1, #1
   1464c:	mov	r3, r2
   14650:	ldr	r2, [pc, #76]	; 146a4 <__assert_fail@plt+0x34fc>
   14654:	bl	110e8 <__fprintf_chk@plt>
   14658:	b	14344 <__assert_fail@plt+0x319c>
   1465c:	mov	r2, #5
   14660:	ldr	r1, [pc, #64]	; 146a8 <__assert_fail@plt+0x3500>
   14664:	b	143e8 <__assert_fail@plt+0x3240>
   14668:	andeq	r6, r1, r0, lsl #28
   1466c:	andeq	r6, r1, r4, lsl lr
   14670:	andeq	r0, r0, r6, ror #15
   14674:	andeq	r7, r1, ip, ror #1
   14678:	andeq	r6, r1, r8, lsl lr
   1467c:	andeq	r6, r1, r4, asr #29
   14680:	strdeq	r6, [r1], -r4
   14684:	andeq	r6, r1, r8, ror #29
   14688:	strdeq	r6, [r1], -r8
   1468c:	andeq	r6, r1, r0, lsl pc
   14690:	andeq	r6, r1, ip, lsr #30
   14694:	andeq	r6, r1, ip, asr #30
   14698:	andeq	r6, r1, r0, ror pc
   1469c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   146a0:	andeq	r6, r1, r4, asr #31
   146a4:	andeq	r6, r1, ip, lsl #28
   146a8:	andeq	r7, r1, r8, lsr #32
   146ac:	push	{r4, r5, lr}
   146b0:	sub	sp, sp, #12
   146b4:	ldr	r5, [sp, #24]
   146b8:	ldr	ip, [r5]
   146bc:	cmp	ip, #0
   146c0:	beq	146dc <__assert_fail@plt+0x3534>
   146c4:	mov	lr, r5
   146c8:	mov	ip, #0
   146cc:	ldr	r4, [lr, #4]!
   146d0:	add	ip, ip, #1
   146d4:	cmp	r4, #0
   146d8:	bne	146cc <__assert_fail@plt+0x3524>
   146dc:	stm	sp, {r5, ip}
   146e0:	bl	14314 <__assert_fail@plt+0x316c>
   146e4:	add	sp, sp, #12
   146e8:	pop	{r4, r5, pc}
   146ec:	push	{r4, r5, lr}
   146f0:	sub	sp, sp, #52	; 0x34
   146f4:	add	r5, sp, #4
   146f8:	ldr	r4, [sp, #64]	; 0x40
   146fc:	mov	ip, #0
   14700:	sub	r4, r4, #4
   14704:	ldr	lr, [r4, #4]!
   14708:	cmp	lr, #0
   1470c:	str	lr, [r5, #4]!
   14710:	beq	14720 <__assert_fail@plt+0x3578>
   14714:	add	ip, ip, #1
   14718:	cmp	ip, #10
   1471c:	bne	14704 <__assert_fail@plt+0x355c>
   14720:	add	lr, sp, #8
   14724:	str	ip, [sp, #4]
   14728:	str	lr, [sp]
   1472c:	bl	14314 <__assert_fail@plt+0x316c>
   14730:	add	sp, sp, #52	; 0x34
   14734:	pop	{r4, r5, pc}
   14738:	push	{r3}		; (str r3, [sp, #-4]!)
   1473c:	push	{r4, lr}
   14740:	sub	sp, sp, #60	; 0x3c
   14744:	add	lr, sp, #56	; 0x38
   14748:	add	r3, sp, #72	; 0x48
   1474c:	str	r3, [lr, #-44]!	; 0xffffffd4
   14750:	add	r4, sp, #68	; 0x44
   14754:	mov	r3, #0
   14758:	ldr	ip, [r4, #4]!
   1475c:	cmp	ip, #0
   14760:	str	ip, [lr, #4]!
   14764:	beq	14774 <__assert_fail@plt+0x35cc>
   14768:	add	r3, r3, #1
   1476c:	cmp	r3, #10
   14770:	bne	14758 <__assert_fail@plt+0x35b0>
   14774:	add	ip, sp, #16
   14778:	str	r3, [sp, #4]
   1477c:	str	ip, [sp]
   14780:	ldr	r3, [sp, #68]	; 0x44
   14784:	bl	14314 <__assert_fail@plt+0x316c>
   14788:	add	sp, sp, #60	; 0x3c
   1478c:	pop	{r4, lr}
   14790:	add	sp, sp, #4
   14794:	bx	lr
   14798:	ldr	r3, [pc, #116]	; 14814 <__assert_fail@plt+0x366c>
   1479c:	push	{r4, lr}
   147a0:	mov	r0, #10
   147a4:	ldr	r1, [r3]
   147a8:	bl	10f68 <fputc_unlocked@plt>
   147ac:	mov	r2, #5
   147b0:	ldr	r1, [pc, #96]	; 14818 <__assert_fail@plt+0x3670>
   147b4:	mov	r0, #0
   147b8:	bl	10f74 <dcgettext@plt>
   147bc:	ldr	r2, [pc, #88]	; 1481c <__assert_fail@plt+0x3674>
   147c0:	mov	r1, r0
   147c4:	mov	r0, #1
   147c8:	bl	110d0 <__printf_chk@plt>
   147cc:	mov	r2, #5
   147d0:	ldr	r1, [pc, #72]	; 14820 <__assert_fail@plt+0x3678>
   147d4:	mov	r0, #0
   147d8:	bl	10f74 <dcgettext@plt>
   147dc:	ldr	r3, [pc, #64]	; 14824 <__assert_fail@plt+0x367c>
   147e0:	ldr	r2, [pc, #64]	; 14828 <__assert_fail@plt+0x3680>
   147e4:	mov	r1, r0
   147e8:	mov	r0, #1
   147ec:	bl	110d0 <__printf_chk@plt>
   147f0:	mov	r2, #5
   147f4:	ldr	r1, [pc, #48]	; 1482c <__assert_fail@plt+0x3684>
   147f8:	mov	r0, #0
   147fc:	bl	10f74 <dcgettext@plt>
   14800:	ldr	r2, [pc, #40]	; 14830 <__assert_fail@plt+0x3688>
   14804:	pop	{r4, lr}
   14808:	mov	r1, r0
   1480c:	mov	r0, #1
   14810:	b	110d0 <__printf_chk@plt>
   14814:	andeq	r8, r2, r4, ror r1
   14818:	andeq	r7, r1, r4, rrx
   1481c:	andeq	r7, r1, r8, ror r0
   14820:	muleq	r1, r0, r0
   14824:	muleq	r1, ip, r9
   14828:	andeq	r6, r1, r4, asr #19
   1482c:	andeq	r7, r1, r4, lsr #1
   14830:	andeq	r7, r1, ip, asr #1
   14834:	push	{r4, lr}
   14838:	bl	15974 <__assert_fail@plt+0x47cc>
   1483c:	cmp	r0, #0
   14840:	popne	{r4, pc}
   14844:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14848:	push	{r4, lr}
   1484c:	bl	15974 <__assert_fail@plt+0x47cc>
   14850:	cmp	r0, #0
   14854:	popne	{r4, pc}
   14858:	bl	14d7c <__assert_fail@plt+0x3bd4>
   1485c:	push	{r4, lr}
   14860:	bl	15974 <__assert_fail@plt+0x47cc>
   14864:	cmp	r0, #0
   14868:	popne	{r4, pc}
   1486c:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14870:	push	{r4, r5, r6, lr}
   14874:	mov	r5, r0
   14878:	mov	r4, r1
   1487c:	bl	159a0 <__assert_fail@plt+0x47f8>
   14880:	cmp	r0, #0
   14884:	popne	{r4, r5, r6, pc}
   14888:	adds	r4, r4, #0
   1488c:	movne	r4, #1
   14890:	cmp	r5, #0
   14894:	orreq	r4, r4, #1
   14898:	cmp	r4, #0
   1489c:	popeq	{r4, r5, r6, pc}
   148a0:	bl	14d7c <__assert_fail@plt+0x3bd4>
   148a4:	push	{r4, lr}
   148a8:	cmp	r1, #0
   148ac:	orreq	r1, r1, #1
   148b0:	bl	159a0 <__assert_fail@plt+0x47f8>
   148b4:	cmp	r0, #0
   148b8:	popne	{r4, pc}
   148bc:	bl	14d7c <__assert_fail@plt+0x3bd4>
   148c0:	push	{r4, r5, r6, lr}
   148c4:	mov	r6, r0
   148c8:	mov	r5, r1
   148cc:	mov	r4, r2
   148d0:	bl	15f00 <__assert_fail@plt+0x4d58>
   148d4:	cmp	r0, #0
   148d8:	popne	{r4, r5, r6, pc}
   148dc:	cmp	r6, #0
   148e0:	beq	148f0 <__assert_fail@plt+0x3748>
   148e4:	cmp	r5, #0
   148e8:	cmpne	r4, #0
   148ec:	popeq	{r4, r5, r6, pc}
   148f0:	bl	14d7c <__assert_fail@plt+0x3bd4>
   148f4:	b	148c0 <__assert_fail@plt+0x3718>
   148f8:	cmp	r2, #0
   148fc:	cmpne	r1, #0
   14900:	moveq	r2, #1
   14904:	moveq	r1, r2
   14908:	push	{r4, lr}
   1490c:	bl	15f00 <__assert_fail@plt+0x4d58>
   14910:	cmp	r0, #0
   14914:	popne	{r4, pc}
   14918:	bl	14d7c <__assert_fail@plt+0x3bd4>
   1491c:	mov	r2, r1
   14920:	mov	r1, r0
   14924:	mov	r0, #0
   14928:	b	148c0 <__assert_fail@plt+0x3718>
   1492c:	mov	r2, r1
   14930:	mov	r1, r0
   14934:	mov	r0, #0
   14938:	b	148f8 <__assert_fail@plt+0x3750>
   1493c:	push	{r4, r5, r6, lr}
   14940:	subs	r6, r0, #0
   14944:	sub	sp, sp, #8
   14948:	mov	r5, r1
   1494c:	ldr	r4, [r1]
   14950:	beq	1498c <__assert_fail@plt+0x37e4>
   14954:	lsr	r1, r4, #1
   14958:	add	r3, r1, #1
   1495c:	mvn	r3, r3
   14960:	cmp	r4, r3
   14964:	bhi	14988 <__assert_fail@plt+0x37e0>
   14968:	add	r4, r4, #1
   1496c:	add	r4, r4, r1
   14970:	mov	r0, r6
   14974:	mov	r1, r4
   14978:	bl	148c0 <__assert_fail@plt+0x3718>
   1497c:	str	r4, [r5]
   14980:	add	sp, sp, #8
   14984:	pop	{r4, r5, r6, pc}
   14988:	bl	14d7c <__assert_fail@plt+0x3bd4>
   1498c:	cmp	r4, #0
   14990:	bne	14970 <__assert_fail@plt+0x37c8>
   14994:	mov	r1, r2
   14998:	mov	r0, #64	; 0x40
   1499c:	str	r2, [sp, #4]
   149a0:	bl	16040 <__assert_fail@plt+0x4e98>
   149a4:	ldr	r2, [sp, #4]
   149a8:	cmp	r0, #0
   149ac:	movne	r4, r0
   149b0:	addeq	r4, r0, #1
   149b4:	b	14970 <__assert_fail@plt+0x37c8>
   149b8:	mov	r2, #1
   149bc:	b	1493c <__assert_fail@plt+0x3794>
   149c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149c4:	sub	sp, sp, #12
   149c8:	ldr	r6, [r1]
   149cc:	mov	sl, r1
   149d0:	mov	r9, r0
   149d4:	asrs	r4, r6, #1
   149d8:	mov	r5, r2
   149dc:	mov	fp, r3
   149e0:	ldr	r7, [sp, #48]	; 0x30
   149e4:	bmi	14b50 <__assert_fail@plt+0x39a8>
   149e8:	mvn	r3, #-2147483648	; 0x80000000
   149ec:	sub	r3, r3, r4
   149f0:	cmp	r6, r3
   149f4:	movle	r3, #0
   149f8:	movgt	r3, #1
   149fc:	mvn	r8, fp
   14a00:	cmp	r3, #0
   14a04:	addeq	r4, r4, r6
   14a08:	mvnne	r4, #-2147483648	; 0x80000000
   14a0c:	lsr	r8, r8, #31
   14a10:	cmp	fp, r4
   14a14:	movge	r3, #0
   14a18:	andlt	r3, r8, #1
   14a1c:	cmp	r3, #0
   14a20:	beq	14b08 <__assert_fail@plt+0x3960>
   14a24:	cmp	r7, #0
   14a28:	blt	14bd8 <__assert_fail@plt+0x3a30>
   14a2c:	bne	14bd0 <__assert_fail@plt+0x3a28>
   14a30:	mov	r2, #64	; 0x40
   14a34:	mov	r1, r7
   14a38:	mov	r0, r2
   14a3c:	str	r2, [sp, #4]
   14a40:	bl	1624c <__assert_fail@plt+0x50a4>
   14a44:	ldr	r2, [sp, #4]
   14a48:	mov	r1, r7
   14a4c:	mov	r4, r0
   14a50:	mov	r0, r2
   14a54:	bl	1646c <__assert_fail@plt+0x52c4>
   14a58:	ldr	r2, [sp, #4]
   14a5c:	sub	r1, r2, r1
   14a60:	cmp	r9, #0
   14a64:	sub	r3, r4, r6
   14a68:	streq	r9, [sl]
   14a6c:	cmp	r3, r5
   14a70:	bge	14af4 <__assert_fail@plt+0x394c>
   14a74:	cmp	r5, #0
   14a78:	blt	14b64 <__assert_fail@plt+0x39bc>
   14a7c:	cmp	r6, #0
   14a80:	blt	14aa0 <__assert_fail@plt+0x38f8>
   14a84:	mvn	r3, #-2147483648	; 0x80000000
   14a88:	sub	r3, r3, r5
   14a8c:	cmp	r6, r3
   14a90:	movle	r3, #0
   14a94:	movgt	r3, #1
   14a98:	cmp	r3, #0
   14a9c:	bne	14c60 <__assert_fail@plt+0x3ab8>
   14aa0:	add	r5, r6, r5
   14aa4:	cmp	fp, r5
   14aa8:	movge	r8, #0
   14aac:	andlt	r8, r8, #1
   14ab0:	cmp	r8, #0
   14ab4:	mov	r4, r5
   14ab8:	bne	14c60 <__assert_fail@plt+0x3ab8>
   14abc:	cmp	r7, #0
   14ac0:	blt	14b78 <__assert_fail@plt+0x39d0>
   14ac4:	beq	14af0 <__assert_fail@plt+0x3948>
   14ac8:	cmp	r5, #0
   14acc:	blt	14c20 <__assert_fail@plt+0x3a78>
   14ad0:	mov	r1, r7
   14ad4:	mvn	r0, #-2147483648	; 0x80000000
   14ad8:	bl	1624c <__assert_fail@plt+0x50a4>
   14adc:	cmp	r5, r0
   14ae0:	movle	r0, #0
   14ae4:	movgt	r0, #1
   14ae8:	cmp	r0, #0
   14aec:	bne	14c60 <__assert_fail@plt+0x3ab8>
   14af0:	mul	r1, r5, r7
   14af4:	mov	r0, r9
   14af8:	bl	14870 <__assert_fail@plt+0x36c8>
   14afc:	str	r4, [sl]
   14b00:	add	sp, sp, #12
   14b04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b08:	cmp	r7, #0
   14b0c:	blt	14ba4 <__assert_fail@plt+0x39fc>
   14b10:	beq	14a30 <__assert_fail@plt+0x3888>
   14b14:	cmp	r4, #0
   14b18:	blt	14be0 <__assert_fail@plt+0x3a38>
   14b1c:	mov	r1, r7
   14b20:	mvn	r0, #-2147483648	; 0x80000000
   14b24:	bl	1624c <__assert_fail@plt+0x50a4>
   14b28:	cmp	r0, r4
   14b2c:	movge	r0, #0
   14b30:	movlt	r0, #1
   14b34:	cmp	r0, #0
   14b38:	mvnne	r2, #-2147483648	; 0x80000000
   14b3c:	bne	14a34 <__assert_fail@plt+0x388c>
   14b40:	mul	r1, r7, r4
   14b44:	cmp	r1, #63	; 0x3f
   14b48:	bgt	14a60 <__assert_fail@plt+0x38b8>
   14b4c:	b	14a30 <__assert_fail@plt+0x3888>
   14b50:	rsb	r3, r4, #-2147483648	; 0x80000000
   14b54:	cmp	r6, r3
   14b58:	movge	r3, #0
   14b5c:	movlt	r3, #1
   14b60:	b	149fc <__assert_fail@plt+0x3854>
   14b64:	rsb	r3, r5, #-2147483648	; 0x80000000
   14b68:	cmp	r6, r3
   14b6c:	movge	r3, #0
   14b70:	movlt	r3, #1
   14b74:	b	14a98 <__assert_fail@plt+0x38f0>
   14b78:	cmp	r5, #0
   14b7c:	blt	14c04 <__assert_fail@plt+0x3a5c>
   14b80:	cmn	r7, #1
   14b84:	beq	14af0 <__assert_fail@plt+0x3948>
   14b88:	mov	r1, r7
   14b8c:	mov	r0, #-2147483648	; 0x80000000
   14b90:	bl	1624c <__assert_fail@plt+0x50a4>
   14b94:	cmp	r5, r0
   14b98:	movle	r0, #0
   14b9c:	movgt	r0, #1
   14ba0:	b	14ae8 <__assert_fail@plt+0x3940>
   14ba4:	cmp	r4, #0
   14ba8:	blt	14c44 <__assert_fail@plt+0x3a9c>
   14bac:	cmn	r7, #1
   14bb0:	beq	14b40 <__assert_fail@plt+0x3998>
   14bb4:	mov	r1, r7
   14bb8:	mov	r0, #-2147483648	; 0x80000000
   14bbc:	bl	1624c <__assert_fail@plt+0x50a4>
   14bc0:	cmp	r0, r4
   14bc4:	movge	r0, #0
   14bc8:	movlt	r0, #1
   14bcc:	b	14b34 <__assert_fail@plt+0x398c>
   14bd0:	mov	r4, fp
   14bd4:	b	14b1c <__assert_fail@plt+0x3974>
   14bd8:	mov	r4, fp
   14bdc:	b	14bac <__assert_fail@plt+0x3a04>
   14be0:	cmn	r4, #1
   14be4:	beq	14b40 <__assert_fail@plt+0x3998>
   14be8:	mov	r1, r4
   14bec:	mov	r0, #-2147483648	; 0x80000000
   14bf0:	bl	1624c <__assert_fail@plt+0x50a4>
   14bf4:	cmp	r7, r0
   14bf8:	movle	r0, #0
   14bfc:	movgt	r0, #1
   14c00:	b	14b34 <__assert_fail@plt+0x398c>
   14c04:	mov	r1, r7
   14c08:	mvn	r0, #-2147483648	; 0x80000000
   14c0c:	bl	1624c <__assert_fail@plt+0x50a4>
   14c10:	cmp	r5, r0
   14c14:	movge	r0, #0
   14c18:	movlt	r0, #1
   14c1c:	b	14ae8 <__assert_fail@plt+0x3940>
   14c20:	cmn	r5, #1
   14c24:	beq	14af0 <__assert_fail@plt+0x3948>
   14c28:	mov	r1, r5
   14c2c:	mov	r0, #-2147483648	; 0x80000000
   14c30:	bl	1624c <__assert_fail@plt+0x50a4>
   14c34:	cmp	r7, r0
   14c38:	movle	r0, #0
   14c3c:	movgt	r0, #1
   14c40:	b	14ae8 <__assert_fail@plt+0x3940>
   14c44:	mov	r1, r7
   14c48:	mvn	r0, #-2147483648	; 0x80000000
   14c4c:	bl	1624c <__assert_fail@plt+0x50a4>
   14c50:	cmp	r0, r4
   14c54:	movle	r0, #0
   14c58:	movgt	r0, #1
   14c5c:	b	14b34 <__assert_fail@plt+0x398c>
   14c60:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14c64:	push	{r4, lr}
   14c68:	mov	r1, #1
   14c6c:	bl	1592c <__assert_fail@plt+0x4784>
   14c70:	cmp	r0, #0
   14c74:	popne	{r4, pc}
   14c78:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14c7c:	push	{r4, lr}
   14c80:	mov	r1, #1
   14c84:	bl	1592c <__assert_fail@plt+0x4784>
   14c88:	cmp	r0, #0
   14c8c:	popne	{r4, pc}
   14c90:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14c94:	push	{r4, lr}
   14c98:	bl	1592c <__assert_fail@plt+0x4784>
   14c9c:	cmp	r0, #0
   14ca0:	popne	{r4, pc}
   14ca4:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14ca8:	push	{r4, lr}
   14cac:	bl	1592c <__assert_fail@plt+0x4784>
   14cb0:	cmp	r0, #0
   14cb4:	popne	{r4, pc}
   14cb8:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14cbc:	push	{r4, r5, r6, lr}
   14cc0:	mov	r6, r0
   14cc4:	mov	r0, r1
   14cc8:	mov	r4, r1
   14ccc:	bl	15974 <__assert_fail@plt+0x47cc>
   14cd0:	subs	r5, r0, #0
   14cd4:	beq	14cec <__assert_fail@plt+0x3b44>
   14cd8:	mov	r2, r4
   14cdc:	mov	r1, r6
   14ce0:	bl	10f2c <memcpy@plt>
   14ce4:	mov	r0, r5
   14ce8:	pop	{r4, r5, r6, pc}
   14cec:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14cf0:	push	{r4, r5, r6, lr}
   14cf4:	mov	r6, r0
   14cf8:	mov	r0, r1
   14cfc:	mov	r4, r1
   14d00:	bl	15974 <__assert_fail@plt+0x47cc>
   14d04:	subs	r5, r0, #0
   14d08:	beq	14d20 <__assert_fail@plt+0x3b78>
   14d0c:	mov	r2, r4
   14d10:	mov	r1, r6
   14d14:	bl	10f2c <memcpy@plt>
   14d18:	mov	r0, r5
   14d1c:	pop	{r4, r5, r6, pc}
   14d20:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14d24:	push	{r4, r5, r6, lr}
   14d28:	mov	r6, r0
   14d2c:	add	r0, r1, #1
   14d30:	mov	r4, r1
   14d34:	bl	15974 <__assert_fail@plt+0x47cc>
   14d38:	subs	r5, r0, #0
   14d3c:	beq	14d5c <__assert_fail@plt+0x3bb4>
   14d40:	mov	r3, #0
   14d44:	mov	r1, r6
   14d48:	strb	r3, [r5, r4]
   14d4c:	mov	r2, r4
   14d50:	bl	10f2c <memcpy@plt>
   14d54:	mov	r0, r5
   14d58:	pop	{r4, r5, r6, pc}
   14d5c:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14d60:	push	{r4, lr}
   14d64:	mov	r4, r0
   14d68:	bl	11088 <strlen@plt>
   14d6c:	add	r1, r0, #1
   14d70:	mov	r0, r4
   14d74:	pop	{r4, lr}
   14d78:	b	14cbc <__assert_fail@plt+0x3b14>
   14d7c:	ldr	r3, [pc, #44]	; 14db0 <__assert_fail@plt+0x3c08>
   14d80:	push	{r4, lr}
   14d84:	mov	r2, #5
   14d88:	ldr	r1, [pc, #36]	; 14db4 <__assert_fail@plt+0x3c0c>
   14d8c:	mov	r0, #0
   14d90:	ldr	r4, [r3]
   14d94:	bl	10f74 <dcgettext@plt>
   14d98:	ldr	r2, [pc, #24]	; 14db8 <__assert_fail@plt+0x3c10>
   14d9c:	mov	r1, #0
   14da0:	mov	r3, r0
   14da4:	mov	r0, r4
   14da8:	bl	11004 <error@plt>
   14dac:	bl	11184 <abort@plt>
   14db0:	andeq	r8, r2, ip, lsl r1
   14db4:	andeq	r7, r1, ip, lsl r1
   14db8:			; <UNDEFINED> instruction: 0x00016cb4
   14dbc:	push	{r4, lr}
   14dc0:	bl	15d40 <__assert_fail@plt+0x4b98>
   14dc4:	cmn	r0, #1
   14dc8:	mov	r4, r0
   14dcc:	beq	14dd8 <__assert_fail@plt+0x3c30>
   14dd0:	mov	r0, r4
   14dd4:	pop	{r4, pc}
   14dd8:	bl	110a0 <__errno_location@plt>
   14ddc:	ldr	r3, [r0]
   14de0:	cmp	r3, #12
   14de4:	bne	14dd0 <__assert_fail@plt+0x3c28>
   14de8:	bl	14d7c <__assert_fail@plt+0x3bd4>
   14dec:	cmp	r2, #0
   14df0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14df4:	beq	14e8c <__assert_fail@plt+0x3ce4>
   14df8:	mov	r5, #0
   14dfc:	sub	r4, r2, #1
   14e00:	mov	r6, r1
   14e04:	mov	r7, r0
   14e08:	mov	r9, r5
   14e0c:	mvn	sl, #0
   14e10:	mov	r8, #1
   14e14:	b	14e38 <__assert_fail@plt+0x3c90>
   14e18:	ldr	r3, [r7]
   14e1c:	mul	r3, r6, r3
   14e20:	sub	r4, r4, #1
   14e24:	mov	r2, r9
   14e28:	cmn	r4, #1
   14e2c:	str	r3, [r7]
   14e30:	orr	r5, r5, r2
   14e34:	beq	14e74 <__assert_fail@plt+0x3ccc>
   14e38:	cmp	r6, #0
   14e3c:	blt	14e7c <__assert_fail@plt+0x3cd4>
   14e40:	mov	r1, r6
   14e44:	mov	r0, sl
   14e48:	beq	14e18 <__assert_fail@plt+0x3c70>
   14e4c:	bl	16040 <__assert_fail@plt+0x4e98>
   14e50:	ldr	r3, [r7]
   14e54:	cmp	r0, r3
   14e58:	bcs	14e1c <__assert_fail@plt+0x3c74>
   14e5c:	sub	r4, r4, #1
   14e60:	mov	r2, r8
   14e64:	cmn	r4, #1
   14e68:	str	sl, [r7]
   14e6c:	orr	r5, r5, r2
   14e70:	bne	14e38 <__assert_fail@plt+0x3c90>
   14e74:	mov	r0, r5
   14e78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e7c:	ldr	r3, [r7]
   14e80:	cmp	r3, #0
   14e84:	bne	14e5c <__assert_fail@plt+0x3cb4>
   14e88:	b	14e1c <__assert_fail@plt+0x3c74>
   14e8c:	mov	r5, r2
   14e90:	b	14e74 <__assert_fail@plt+0x3ccc>
   14e94:	cmp	r2, #36	; 0x24
   14e98:	push	{r4, r5, r6, r7, r8, r9, lr}
   14e9c:	sub	sp, sp, #12
   14ea0:	bhi	152cc <__assert_fail@plt+0x4124>
   14ea4:	cmp	r1, #0
   14ea8:	mov	r6, r1
   14eac:	mov	r9, r2
   14eb0:	mov	r5, r0
   14eb4:	mov	r8, r3
   14eb8:	moveq	r6, sp
   14ebc:	bl	110a0 <__errno_location@plt>
   14ec0:	mov	r3, #0
   14ec4:	str	r3, [r0]
   14ec8:	mov	r7, r0
   14ecc:	bl	11064 <__ctype_b_loc@plt>
   14ed0:	ldrb	r1, [r5]
   14ed4:	mov	r2, r5
   14ed8:	ldr	r0, [r0]
   14edc:	b	14ee4 <__assert_fail@plt+0x3d3c>
   14ee0:	ldrb	r1, [r2, #1]!
   14ee4:	lsl	r3, r1, #1
   14ee8:	ldrh	r3, [r0, r3]
   14eec:	ands	r4, r3, #8192	; 0x2000
   14ef0:	bne	14ee0 <__assert_fail@plt+0x3d38>
   14ef4:	cmp	r1, #45	; 0x2d
   14ef8:	bne	14f0c <__assert_fail@plt+0x3d64>
   14efc:	mov	r4, #4
   14f00:	mov	r0, r4
   14f04:	add	sp, sp, #12
   14f08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f0c:	mov	r2, r9
   14f10:	mov	r1, r6
   14f14:	mov	r0, r5
   14f18:	bl	1107c <strtoul@plt>
   14f1c:	ldr	r9, [r6]
   14f20:	cmp	r5, r9
   14f24:	str	r0, [sp, #4]
   14f28:	beq	14f70 <__assert_fail@plt+0x3dc8>
   14f2c:	ldr	r4, [r7]
   14f30:	cmp	r4, #0
   14f34:	bne	14f60 <__assert_fail@plt+0x3db8>
   14f38:	ldr	r3, [sp, #40]	; 0x28
   14f3c:	cmp	r3, #0
   14f40:	beq	14f50 <__assert_fail@plt+0x3da8>
   14f44:	ldrb	r7, [r9]
   14f48:	cmp	r7, #0
   14f4c:	bne	14fa4 <__assert_fail@plt+0x3dfc>
   14f50:	str	r0, [r8]
   14f54:	mov	r0, r4
   14f58:	add	sp, sp, #12
   14f5c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f60:	cmp	r4, #34	; 0x22
   14f64:	bne	14efc <__assert_fail@plt+0x3d54>
   14f68:	mov	r4, #1
   14f6c:	b	14f38 <__assert_fail@plt+0x3d90>
   14f70:	ldr	r3, [sp, #40]	; 0x28
   14f74:	cmp	r3, #0
   14f78:	beq	14efc <__assert_fail@plt+0x3d54>
   14f7c:	ldrb	r1, [r9]
   14f80:	cmp	r1, #0
   14f84:	beq	14efc <__assert_fail@plt+0x3d54>
   14f88:	mov	r0, r3
   14f8c:	bl	11094 <strchr@plt>
   14f90:	cmp	r0, #0
   14f94:	beq	14efc <__assert_fail@plt+0x3d54>
   14f98:	ldrb	r7, [r9]
   14f9c:	mov	r3, #1
   14fa0:	str	r3, [sp, #4]
   14fa4:	mov	r1, r7
   14fa8:	ldr	r0, [sp, #40]	; 0x28
   14fac:	bl	11094 <strchr@plt>
   14fb0:	cmp	r0, #0
   14fb4:	beq	15294 <__assert_fail@plt+0x40ec>
   14fb8:	sub	r3, r7, #69	; 0x45
   14fbc:	cmp	r3, #47	; 0x2f
   14fc0:	ldrls	pc, [pc, r3, lsl #2]
   14fc4:	b	15088 <__assert_fail@plt+0x3ee0>
   14fc8:	andeq	r5, r1, r8, ror r1
   14fcc:	andeq	r5, r1, r8, lsl #1
   14fd0:	andeq	r5, r1, r8, ror r1
   14fd4:	andeq	r5, r1, r8, lsl #1
   14fd8:	andeq	r5, r1, r8, lsl #1
   14fdc:	andeq	r5, r1, r8, lsl #1
   14fe0:	andeq	r5, r1, r8, ror r1
   14fe4:	andeq	r5, r1, r8, lsl #1
   14fe8:	andeq	r5, r1, r8, ror r1
   14fec:	andeq	r5, r1, r8, lsl #1
   14ff0:	andeq	r5, r1, r8, lsl #1
   14ff4:	andeq	r5, r1, r8, ror r1
   14ff8:	andeq	r5, r1, r8, lsl #1
   14ffc:	andeq	r5, r1, r8, lsl #1
   15000:	andeq	r5, r1, r8, lsl #1
   15004:	andeq	r5, r1, r8, ror r1
   15008:	andeq	r5, r1, r8, lsl #1
   1500c:	andeq	r5, r1, r8, lsl #1
   15010:	andeq	r5, r1, r8, lsl #1
   15014:	andeq	r5, r1, r8, lsl #1
   15018:	andeq	r5, r1, r8, ror r1
   1501c:	andeq	r5, r1, r8, ror r1
   15020:	andeq	r5, r1, r8, lsl #1
   15024:	andeq	r5, r1, r8, lsl #1
   15028:	andeq	r5, r1, r8, lsl #1
   1502c:	andeq	r5, r1, r8, lsl #1
   15030:	andeq	r5, r1, r8, lsl #1
   15034:	andeq	r5, r1, r8, lsl #1
   15038:	andeq	r5, r1, r8, lsl #1
   1503c:	andeq	r5, r1, r8, lsl #1
   15040:	andeq	r5, r1, r8, lsl #1
   15044:	andeq	r5, r1, r8, lsl #1
   15048:	andeq	r5, r1, r8, lsl #1
   1504c:	andeq	r5, r1, r8, lsl #1
   15050:	andeq	r5, r1, r8, ror r1
   15054:	andeq	r5, r1, r8, lsl #1
   15058:	andeq	r5, r1, r8, lsl #1
   1505c:	andeq	r5, r1, r8, lsl #1
   15060:	andeq	r5, r1, r8, ror r1
   15064:	andeq	r5, r1, r8, lsl #1
   15068:	andeq	r5, r1, r8, ror r1
   1506c:	andeq	r5, r1, r8, lsl #1
   15070:	andeq	r5, r1, r8, lsl #1
   15074:	andeq	r5, r1, r8, lsl #1
   15078:	andeq	r5, r1, r8, lsl #1
   1507c:	andeq	r5, r1, r8, lsl #1
   15080:	andeq	r5, r1, r8, lsl #1
   15084:	andeq	r5, r1, r8, ror r1
   15088:	mov	r5, #1
   1508c:	mov	r1, #1024	; 0x400
   15090:	sub	r7, r7, #66	; 0x42
   15094:	cmp	r7, #53	; 0x35
   15098:	ldrls	pc, [pc, r7, lsl #2]
   1509c:	b	15294 <__assert_fail@plt+0x40ec>
   150a0:	andeq	r5, r1, r8, ror r2
   150a4:	muleq	r1, r4, r2
   150a8:	muleq	r1, r4, r2
   150ac:	andeq	r5, r1, r0, ror r2
   150b0:	muleq	r1, r4, r2
   150b4:	andeq	r5, r1, r8, ror #4
   150b8:	muleq	r1, r4, r2
   150bc:	muleq	r1, r4, r2
   150c0:	muleq	r1, r4, r2
   150c4:	andeq	r5, r1, r0, ror #4
   150c8:	muleq	r1, r4, r2
   150cc:	andeq	r5, r1, r8, asr r2
   150d0:	muleq	r1, r4, r2
   150d4:	muleq	r1, r4, r2
   150d8:	andeq	r5, r1, r0, asr r2
   150dc:	muleq	r1, r4, r2
   150e0:	muleq	r1, r4, r2
   150e4:	muleq	r1, r4, r2
   150e8:	andeq	r5, r1, r4, lsr r2
   150ec:	muleq	r1, r4, r2
   150f0:	muleq	r1, r4, r2
   150f4:	muleq	r1, r4, r2
   150f8:	muleq	r1, r4, r2
   150fc:	andeq	r5, r1, ip, lsr #4
   15100:	andeq	r5, r1, r0, lsl r2
   15104:	muleq	r1, r4, r2
   15108:	muleq	r1, r4, r2
   1510c:	muleq	r1, r4, r2
   15110:	muleq	r1, r4, r2
   15114:	muleq	r1, r4, r2
   15118:	muleq	r1, r4, r2
   1511c:	muleq	r1, r4, r2
   15120:	strdeq	r5, [r1], -r4
   15124:	andeq	r5, r1, r8, ror #3
   15128:	muleq	r1, r4, r2
   1512c:	muleq	r1, r4, r2
   15130:	muleq	r1, r4, r2
   15134:	andeq	r5, r1, r8, ror #4
   15138:	muleq	r1, r4, r2
   1513c:	muleq	r1, r4, r2
   15140:	muleq	r1, r4, r2
   15144:	andeq	r5, r1, r0, ror #4
   15148:	muleq	r1, r4, r2
   1514c:	andeq	r5, r1, r8, asr r2
   15150:	muleq	r1, r4, r2
   15154:	muleq	r1, r4, r2
   15158:	muleq	r1, r4, r2
   1515c:	muleq	r1, r4, r2
   15160:	muleq	r1, r4, r2
   15164:	muleq	r1, r4, r2
   15168:	andeq	r5, r1, r4, lsr r2
   1516c:	muleq	r1, r4, r2
   15170:	muleq	r1, r4, r2
   15174:			; <UNDEFINED> instruction: 0x000151b4
   15178:	mov	r1, #48	; 0x30
   1517c:	ldr	r0, [sp, #40]	; 0x28
   15180:	bl	11094 <strchr@plt>
   15184:	cmp	r0, #0
   15188:	beq	15088 <__assert_fail@plt+0x3ee0>
   1518c:	ldrb	r3, [r9, #1]
   15190:	cmp	r3, #68	; 0x44
   15194:	beq	151a8 <__assert_fail@plt+0x4000>
   15198:	cmp	r3, #105	; 0x69
   1519c:	beq	152a4 <__assert_fail@plt+0x40fc>
   151a0:	cmp	r3, #66	; 0x42
   151a4:	bne	15088 <__assert_fail@plt+0x3ee0>
   151a8:	mov	r5, #2
   151ac:	mov	r1, #1000	; 0x3e8
   151b0:	b	15090 <__assert_fail@plt+0x3ee8>
   151b4:	ldr	r0, [sp, #4]
   151b8:	cmp	r0, #0
   151bc:	lslge	r0, r0, #1
   151c0:	strge	r0, [sp, #4]
   151c4:	movge	r3, #0
   151c8:	blt	152bc <__assert_fail@plt+0x4114>
   151cc:	add	r2, r9, r5
   151d0:	str	r2, [r6]
   151d4:	ldrb	r2, [r9, r5]
   151d8:	orr	r4, r4, r3
   151dc:	cmp	r2, #0
   151e0:	orrne	r4, r4, #2
   151e4:	b	14f50 <__assert_fail@plt+0x3da8>
   151e8:	ldr	r0, [sp, #4]
   151ec:	mov	r3, #0
   151f0:	b	151cc <__assert_fail@plt+0x4024>
   151f4:	ldr	r0, [sp, #4]
   151f8:	cmp	r0, #8388608	; 0x800000
   151fc:	bcs	152bc <__assert_fail@plt+0x4114>
   15200:	lsl	r0, r0, #9
   15204:	str	r0, [sp, #4]
   15208:	mov	r3, #0
   1520c:	b	151cc <__assert_fail@plt+0x4024>
   15210:	mov	r2, #7
   15214:	add	r0, sp, #4
   15218:	bl	14dec <__assert_fail@plt+0x3c44>
   1521c:	ldr	r9, [r6]
   15220:	mov	r3, r0
   15224:	ldr	r0, [sp, #4]
   15228:	b	151cc <__assert_fail@plt+0x4024>
   1522c:	mov	r2, #8
   15230:	b	15214 <__assert_fail@plt+0x406c>
   15234:	mov	r2, #4
   15238:	add	r0, sp, r2
   1523c:	bl	14dec <__assert_fail@plt+0x3c44>
   15240:	ldr	r9, [r6]
   15244:	mov	r3, r0
   15248:	ldr	r0, [sp, #4]
   1524c:	b	151cc <__assert_fail@plt+0x4024>
   15250:	mov	r2, #5
   15254:	b	15214 <__assert_fail@plt+0x406c>
   15258:	mov	r2, #2
   1525c:	b	15214 <__assert_fail@plt+0x406c>
   15260:	mov	r2, #1
   15264:	b	15214 <__assert_fail@plt+0x406c>
   15268:	mov	r2, #3
   1526c:	b	15214 <__assert_fail@plt+0x406c>
   15270:	mov	r2, #6
   15274:	b	15214 <__assert_fail@plt+0x406c>
   15278:	ldr	r0, [sp, #4]
   1527c:	cmp	r0, #4194304	; 0x400000
   15280:	bcs	152bc <__assert_fail@plt+0x4114>
   15284:	lsl	r0, r0, #10
   15288:	str	r0, [sp, #4]
   1528c:	mov	r3, #0
   15290:	b	151cc <__assert_fail@plt+0x4024>
   15294:	ldr	r3, [sp, #4]
   15298:	orr	r4, r4, #2
   1529c:	str	r3, [r8]
   152a0:	b	14f00 <__assert_fail@plt+0x3d58>
   152a4:	ldrb	r5, [r9, #2]
   152a8:	mov	r1, #1024	; 0x400
   152ac:	cmp	r5, #66	; 0x42
   152b0:	movne	r5, #1
   152b4:	moveq	r5, #3
   152b8:	b	15090 <__assert_fail@plt+0x3ee8>
   152bc:	mvn	r0, #0
   152c0:	str	r0, [sp, #4]
   152c4:	mov	r3, #1
   152c8:	b	151cc <__assert_fail@plt+0x4024>
   152cc:	ldr	r3, [pc, #12]	; 152e0 <__assert_fail@plt+0x4138>
   152d0:	mov	r2, #85	; 0x55
   152d4:	ldr	r1, [pc, #8]	; 152e4 <__assert_fail@plt+0x413c>
   152d8:	ldr	r0, [pc, #8]	; 152e8 <__assert_fail@plt+0x4140>
   152dc:	bl	111a8 <__assert_fail@plt>
   152e0:	andeq	r7, r1, r0, lsr r1
   152e4:	andeq	r7, r1, ip, lsr r1
   152e8:	andeq	r7, r1, ip, asr #2
   152ec:	push	{r4, r5, r6, r7, r8, lr}
   152f0:	subs	r5, r1, #0
   152f4:	mov	r4, r0
   152f8:	blt	1536c <__assert_fail@plt+0x41c4>
   152fc:	moveq	r6, #0
   15300:	moveq	r7, #0
   15304:	bne	1532c <__assert_fail@plt+0x4184>
   15308:	ldr	r2, [r4]
   1530c:	ldr	r1, [r4, #4]
   15310:	mov	r0, #0
   15314:	mul	ip, r2, r7
   15318:	umull	r2, r3, r2, r5
   1531c:	mla	r5, r5, r1, ip
   15320:	add	r3, r5, r3
   15324:	strd	r2, [r4]
   15328:	pop	{r4, r5, r6, r7, r8, pc}
   1532c:	asr	r7, r5, #31
   15330:	mov	r2, r5
   15334:	mov	r3, r7
   15338:	mvn	r0, #0
   1533c:	mvn	r1, #0
   15340:	bl	1648c <__assert_fail@plt+0x52e4>
   15344:	ldrd	r2, [r4]
   15348:	mov	r6, r5
   1534c:	cmp	r1, r3
   15350:	cmpeq	r0, r2
   15354:	bcs	15308 <__assert_fail@plt+0x4160>
   15358:	mvn	r2, #0
   1535c:	mvn	r3, #0
   15360:	mov	r0, #1
   15364:	strd	r2, [r4]
   15368:	pop	{r4, r5, r6, r7, r8, pc}
   1536c:	ldrd	r2, [r0]
   15370:	orrs	r3, r2, r3
   15374:	moveq	r6, r5
   15378:	asreq	r7, r6, #31
   1537c:	bne	15358 <__assert_fail@plt+0x41b0>
   15380:	b	15308 <__assert_fail@plt+0x4160>
   15384:	cmp	r2, #36	; 0x24
   15388:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1538c:	sub	sp, sp, #20
   15390:	bhi	15904 <__assert_fail@plt+0x475c>
   15394:	cmp	r1, #0
   15398:	mov	r8, r2
   1539c:	mov	r7, r0
   153a0:	mov	r5, r1
   153a4:	mov	r6, r3
   153a8:	addeq	r5, sp, #4
   153ac:	bl	110a0 <__errno_location@plt>
   153b0:	mov	r3, #0
   153b4:	str	r3, [r0]
   153b8:	mov	r9, r0
   153bc:	bl	11064 <__ctype_b_loc@plt>
   153c0:	ldrb	r3, [r7]
   153c4:	mov	r2, r7
   153c8:	ldr	r0, [r0]
   153cc:	b	153d4 <__assert_fail@plt+0x422c>
   153d0:	ldrb	r3, [r2, #1]!
   153d4:	lsl	r1, r3, #1
   153d8:	ldrh	r4, [r0, r1]
   153dc:	ands	r4, r4, #8192	; 0x2000
   153e0:	bne	153d0 <__assert_fail@plt+0x4228>
   153e4:	cmp	r3, #45	; 0x2d
   153e8:	bne	153fc <__assert_fail@plt+0x4254>
   153ec:	mov	r4, #4
   153f0:	mov	r0, r4
   153f4:	add	sp, sp, #20
   153f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   153fc:	mov	r2, r8
   15400:	mov	r3, r4
   15404:	mov	r1, r5
   15408:	mov	r0, r7
   1540c:	bl	10f44 <__strtoull_internal@plt>
   15410:	ldr	r8, [r5]
   15414:	cmp	r7, r8
   15418:	mov	r2, r0
   1541c:	str	r0, [sp, #8]
   15420:	str	r1, [sp, #12]
   15424:	beq	15470 <__assert_fail@plt+0x42c8>
   15428:	ldr	r4, [r9]
   1542c:	cmp	r4, #0
   15430:	bne	15460 <__assert_fail@plt+0x42b8>
   15434:	ldr	r3, [sp, #56]	; 0x38
   15438:	cmp	r3, #0
   1543c:	beq	1544c <__assert_fail@plt+0x42a4>
   15440:	ldrb	r9, [r8]
   15444:	cmp	r9, #0
   15448:	bne	154a8 <__assert_fail@plt+0x4300>
   1544c:	mov	r0, r4
   15450:	str	r2, [r6]
   15454:	str	r1, [r6, #4]
   15458:	add	sp, sp, #20
   1545c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15460:	cmp	r4, #34	; 0x22
   15464:	bne	153ec <__assert_fail@plt+0x4244>
   15468:	mov	r4, #1
   1546c:	b	15434 <__assert_fail@plt+0x428c>
   15470:	ldr	r3, [sp, #56]	; 0x38
   15474:	cmp	r3, #0
   15478:	beq	153ec <__assert_fail@plt+0x4244>
   1547c:	ldrb	r1, [r8]
   15480:	cmp	r1, #0
   15484:	beq	153ec <__assert_fail@plt+0x4244>
   15488:	mov	r0, r3
   1548c:	bl	11094 <strchr@plt>
   15490:	cmp	r0, #0
   15494:	beq	153ec <__assert_fail@plt+0x4244>
   15498:	ldrb	r9, [r8]
   1549c:	mov	r2, #1
   154a0:	mov	r3, #0
   154a4:	strd	r2, [sp, #8]
   154a8:	mov	r1, r9
   154ac:	ldr	r0, [sp, #56]	; 0x38
   154b0:	bl	11094 <strchr@plt>
   154b4:	cmp	r0, #0
   154b8:	beq	158c0 <__assert_fail@plt+0x4718>
   154bc:	sub	r3, r9, #69	; 0x45
   154c0:	cmp	r3, #47	; 0x2f
   154c4:	ldrls	pc, [pc, r3, lsl #2]
   154c8:	b	1558c <__assert_fail@plt+0x43e4>
   154cc:	andeq	r5, r1, ip, ror r6
   154d0:	andeq	r5, r1, ip, lsl #11
   154d4:	andeq	r5, r1, ip, ror r6
   154d8:	andeq	r5, r1, ip, lsl #11
   154dc:	andeq	r5, r1, ip, lsl #11
   154e0:	andeq	r5, r1, ip, lsl #11
   154e4:	andeq	r5, r1, ip, ror r6
   154e8:	andeq	r5, r1, ip, lsl #11
   154ec:	andeq	r5, r1, ip, ror r6
   154f0:	andeq	r5, r1, ip, lsl #11
   154f4:	andeq	r5, r1, ip, lsl #11
   154f8:	andeq	r5, r1, ip, ror r6
   154fc:	andeq	r5, r1, ip, lsl #11
   15500:	andeq	r5, r1, ip, lsl #11
   15504:	andeq	r5, r1, ip, lsl #11
   15508:	andeq	r5, r1, ip, ror r6
   1550c:	andeq	r5, r1, ip, lsl #11
   15510:	andeq	r5, r1, ip, lsl #11
   15514:	andeq	r5, r1, ip, lsl #11
   15518:	andeq	r5, r1, ip, lsl #11
   1551c:	andeq	r5, r1, ip, ror r6
   15520:	andeq	r5, r1, ip, ror r6
   15524:	andeq	r5, r1, ip, lsl #11
   15528:	andeq	r5, r1, ip, lsl #11
   1552c:	andeq	r5, r1, ip, lsl #11
   15530:	andeq	r5, r1, ip, lsl #11
   15534:	andeq	r5, r1, ip, lsl #11
   15538:	andeq	r5, r1, ip, lsl #11
   1553c:	andeq	r5, r1, ip, lsl #11
   15540:	andeq	r5, r1, ip, lsl #11
   15544:	andeq	r5, r1, ip, lsl #11
   15548:	andeq	r5, r1, ip, lsl #11
   1554c:	andeq	r5, r1, ip, lsl #11
   15550:	andeq	r5, r1, ip, lsl #11
   15554:	andeq	r5, r1, ip, ror r6
   15558:	andeq	r5, r1, ip, lsl #11
   1555c:	andeq	r5, r1, ip, lsl #11
   15560:	andeq	r5, r1, ip, lsl #11
   15564:	andeq	r5, r1, ip, ror r6
   15568:	andeq	r5, r1, ip, lsl #11
   1556c:	andeq	r5, r1, ip, ror r6
   15570:	andeq	r5, r1, ip, lsl #11
   15574:	andeq	r5, r1, ip, lsl #11
   15578:	andeq	r5, r1, ip, lsl #11
   1557c:	andeq	r5, r1, ip, lsl #11
   15580:	andeq	r5, r1, ip, lsl #11
   15584:	andeq	r5, r1, ip, lsl #11
   15588:	andeq	r5, r1, ip, ror r6
   1558c:	mov	r7, #1
   15590:	mov	sl, #1024	; 0x400
   15594:	sub	r9, r9, #66	; 0x42
   15598:	cmp	r9, #53	; 0x35
   1559c:	ldrls	pc, [pc, r9, lsl #2]
   155a0:	b	158c0 <__assert_fail@plt+0x4718>
   155a4:	andeq	r5, r1, ip, lsl #16
   155a8:	andeq	r5, r1, r0, asr #17
   155ac:	andeq	r5, r1, r0, asr #17
   155b0:	andeq	r5, r1, r4, ror #15
   155b4:	andeq	r5, r1, r0, asr #17
   155b8:			; <UNDEFINED> instruction: 0x000157bc
   155bc:	andeq	r5, r1, r0, asr #17
   155c0:	andeq	r5, r1, r0, asr #17
   155c4:	andeq	r5, r1, r0, asr #17
   155c8:	muleq	r1, ip, r7
   155cc:	andeq	r5, r1, r0, asr #17
   155d0:	andeq	r5, r1, r8, ror #16
   155d4:	andeq	r5, r1, r0, asr #17
   155d8:	andeq	r5, r1, r0, asr #17
   155dc:	andeq	r5, r1, r0, asr #16
   155e0:	andeq	r5, r1, r0, asr #17
   155e4:	andeq	r5, r1, r0, asr #17
   155e8:	andeq	r5, r1, r0, asr #17
   155ec:	muleq	r1, r8, r8
   155f0:	andeq	r5, r1, r0, asr #17
   155f4:	andeq	r5, r1, r0, asr #17
   155f8:	andeq	r5, r1, r0, asr #17
   155fc:	andeq	r5, r1, r0, asr #17
   15600:	andeq	r5, r1, r4, ror r7
   15604:	andeq	r5, r1, r0, asr #14
   15608:	andeq	r5, r1, r0, asr #17
   1560c:	andeq	r5, r1, r0, asr #17
   15610:	andeq	r5, r1, r0, asr #17
   15614:	andeq	r5, r1, r0, asr #17
   15618:	andeq	r5, r1, r0, asr #17
   1561c:	andeq	r5, r1, r0, asr #17
   15620:	andeq	r5, r1, r0, asr #17
   15624:	andeq	r5, r1, ip, lsl #14
   15628:	strdeq	r5, [r1], -ip
   1562c:	andeq	r5, r1, r0, asr #17
   15630:	andeq	r5, r1, r0, asr #17
   15634:	andeq	r5, r1, r0, asr #17
   15638:			; <UNDEFINED> instruction: 0x000157bc
   1563c:	andeq	r5, r1, r0, asr #17
   15640:	andeq	r5, r1, r0, asr #17
   15644:	andeq	r5, r1, r0, asr #17
   15648:	muleq	r1, ip, r7
   1564c:	andeq	r5, r1, r0, asr #17
   15650:	andeq	r5, r1, r8, ror #16
   15654:	andeq	r5, r1, r0, asr #17
   15658:	andeq	r5, r1, r0, asr #17
   1565c:	andeq	r5, r1, r0, asr #17
   15660:	andeq	r5, r1, r0, asr #17
   15664:	andeq	r5, r1, r0, asr #17
   15668:	andeq	r5, r1, r0, asr #17
   1566c:	muleq	r1, r8, r8
   15670:	andeq	r5, r1, r0, asr #17
   15674:	andeq	r5, r1, r0, asr #17
   15678:			; <UNDEFINED> instruction: 0x000156b8
   1567c:	mov	r1, #48	; 0x30
   15680:	ldr	r0, [sp, #56]	; 0x38
   15684:	bl	11094 <strchr@plt>
   15688:	cmp	r0, #0
   1568c:	beq	1558c <__assert_fail@plt+0x43e4>
   15690:	ldrb	r3, [r8, #1]
   15694:	cmp	r3, #68	; 0x44
   15698:	beq	156ac <__assert_fail@plt+0x4504>
   1569c:	cmp	r3, #105	; 0x69
   156a0:	beq	158d0 <__assert_fail@plt+0x4728>
   156a4:	cmp	r3, #66	; 0x42
   156a8:	bne	1558c <__assert_fail@plt+0x43e4>
   156ac:	mov	r7, #2
   156b0:	mov	sl, #1000	; 0x3e8
   156b4:	b	15594 <__assert_fail@plt+0x43ec>
   156b8:	ldrd	r2, [sp, #8]
   156bc:	cmp	r2, #0
   156c0:	sbcs	r1, r3, #0
   156c4:	blt	158e8 <__assert_fail@plt+0x4740>
   156c8:	adds	r2, r2, r2
   156cc:	adc	r3, r3, r3
   156d0:	mov	r1, r3
   156d4:	mov	r9, #0
   156d8:	str	r2, [sp, #8]
   156dc:	str	r3, [sp, #12]
   156e0:	add	r3, r8, r7
   156e4:	str	r3, [r5]
   156e8:	ldrb	r3, [r8, r7]
   156ec:	orr	r4, r4, r9
   156f0:	cmp	r3, #0
   156f4:	orrne	r4, r4, #2
   156f8:	b	1544c <__assert_fail@plt+0x42a4>
   156fc:	ldr	r2, [sp, #8]
   15700:	ldr	r1, [sp, #12]
   15704:	mov	r9, #0
   15708:	b	156e0 <__assert_fail@plt+0x4538>
   1570c:	ldrd	r2, [sp, #8]
   15710:	ldr	r1, [pc, #512]	; 15918 <__assert_fail@plt+0x4770>
   15714:	mvn	r0, #0
   15718:	cmp	r3, r1
   1571c:	cmpeq	r2, r0
   15720:	bhi	158e8 <__assert_fail@plt+0x4740>
   15724:	lsl	r1, r3, #9
   15728:	orr	r1, r1, r2, lsr #23
   1572c:	lsl	r2, r2, #9
   15730:	str	r1, [sp, #12]
   15734:	str	r2, [sp, #8]
   15738:	mov	r9, #0
   1573c:	b	156e0 <__assert_fail@plt+0x4538>
   15740:	mov	fp, #7
   15744:	mov	r9, #0
   15748:	add	r8, sp, #8
   1574c:	mov	r1, sl
   15750:	mov	r0, r8
   15754:	bl	152ec <__assert_fail@plt+0x4144>
   15758:	subs	fp, fp, #1
   1575c:	orr	r9, r9, r0
   15760:	bne	1574c <__assert_fail@plt+0x45a4>
   15764:	ldr	r8, [r5]
   15768:	ldr	r2, [sp, #8]
   1576c:	ldr	r1, [sp, #12]
   15770:	b	156e0 <__assert_fail@plt+0x4538>
   15774:	mov	fp, #8
   15778:	mov	r9, #0
   1577c:	add	r8, sp, fp
   15780:	mov	r1, sl
   15784:	mov	r0, r8
   15788:	bl	152ec <__assert_fail@plt+0x4144>
   1578c:	subs	fp, fp, #1
   15790:	orr	r9, r9, r0
   15794:	bne	15780 <__assert_fail@plt+0x45d8>
   15798:	b	15764 <__assert_fail@plt+0x45bc>
   1579c:	mov	r1, sl
   157a0:	add	r0, sp, #8
   157a4:	bl	152ec <__assert_fail@plt+0x4144>
   157a8:	ldr	r8, [r5]
   157ac:	ldr	r2, [sp, #8]
   157b0:	ldr	r1, [sp, #12]
   157b4:	mov	r9, r0
   157b8:	b	156e0 <__assert_fail@plt+0x4538>
   157bc:	mov	fp, #3
   157c0:	mov	r9, #0
   157c4:	add	r8, sp, #8
   157c8:	mov	r1, sl
   157cc:	mov	r0, r8
   157d0:	bl	152ec <__assert_fail@plt+0x4144>
   157d4:	subs	fp, fp, #1
   157d8:	orr	r9, r9, r0
   157dc:	bne	157c8 <__assert_fail@plt+0x4620>
   157e0:	b	15764 <__assert_fail@plt+0x45bc>
   157e4:	mov	fp, #6
   157e8:	mov	r9, #0
   157ec:	add	r8, sp, #8
   157f0:	mov	r1, sl
   157f4:	mov	r0, r8
   157f8:	bl	152ec <__assert_fail@plt+0x4144>
   157fc:	subs	fp, fp, #1
   15800:	orr	r9, r9, r0
   15804:	bne	157f0 <__assert_fail@plt+0x4648>
   15808:	b	15764 <__assert_fail@plt+0x45bc>
   1580c:	ldrd	r0, [sp, #8]
   15810:	ldr	r3, [pc, #260]	; 1591c <__assert_fail@plt+0x4774>
   15814:	mvn	r2, #0
   15818:	cmp	r1, r3
   1581c:	cmpeq	r0, r2
   15820:	bhi	158e8 <__assert_fail@plt+0x4740>
   15824:	lsl	r1, r1, #10
   15828:	orr	r1, r1, r0, lsr #22
   1582c:	lsl	r2, r0, #10
   15830:	str	r1, [sp, #12]
   15834:	str	r2, [sp, #8]
   15838:	mov	r9, #0
   1583c:	b	156e0 <__assert_fail@plt+0x4538>
   15840:	mov	fp, #5
   15844:	mov	r9, #0
   15848:	add	r8, sp, #8
   1584c:	mov	r1, sl
   15850:	mov	r0, r8
   15854:	bl	152ec <__assert_fail@plt+0x4144>
   15858:	subs	fp, fp, #1
   1585c:	orr	r9, r9, r0
   15860:	bne	1584c <__assert_fail@plt+0x46a4>
   15864:	b	15764 <__assert_fail@plt+0x45bc>
   15868:	mov	r1, sl
   1586c:	add	r0, sp, #8
   15870:	bl	152ec <__assert_fail@plt+0x4144>
   15874:	mov	r1, sl
   15878:	mov	r9, r0
   1587c:	add	r0, sp, #8
   15880:	bl	152ec <__assert_fail@plt+0x4144>
   15884:	ldr	r8, [r5]
   15888:	ldr	r2, [sp, #8]
   1588c:	ldr	r1, [sp, #12]
   15890:	orr	r9, r9, r0
   15894:	b	156e0 <__assert_fail@plt+0x4538>
   15898:	mov	fp, #4
   1589c:	mov	r9, #0
   158a0:	add	r8, sp, #8
   158a4:	mov	r1, sl
   158a8:	mov	r0, r8
   158ac:	bl	152ec <__assert_fail@plt+0x4144>
   158b0:	subs	fp, fp, #1
   158b4:	orr	r9, r9, r0
   158b8:	bne	158a4 <__assert_fail@plt+0x46fc>
   158bc:	b	15764 <__assert_fail@plt+0x45bc>
   158c0:	ldrd	r2, [sp, #8]
   158c4:	orr	r4, r4, #2
   158c8:	strd	r2, [r6]
   158cc:	b	153f0 <__assert_fail@plt+0x4248>
   158d0:	ldrb	r7, [r8, #2]
   158d4:	mov	sl, #1024	; 0x400
   158d8:	cmp	r7, #66	; 0x42
   158dc:	movne	r7, #1
   158e0:	moveq	r7, #3
   158e4:	b	15594 <__assert_fail@plt+0x43ec>
   158e8:	mvn	r1, #0
   158ec:	mvn	r0, #0
   158f0:	mvn	r2, #0
   158f4:	strd	r0, [sp, #8]
   158f8:	mov	r9, #1
   158fc:	mov	r1, r2
   15900:	b	156e0 <__assert_fail@plt+0x4538>
   15904:	ldr	r3, [pc, #20]	; 15920 <__assert_fail@plt+0x4778>
   15908:	mov	r2, #85	; 0x55
   1590c:	ldr	r1, [pc, #16]	; 15924 <__assert_fail@plt+0x477c>
   15910:	ldr	r0, [pc, #16]	; 15928 <__assert_fail@plt+0x4780>
   15914:	bl	111a8 <__assert_fail@plt>
   15918:	ldrshteq	pc, [pc], #-255	; <UNPREDICTABLE>
   1591c:	ldrshteq	pc, [pc], -pc	; <UNPREDICTABLE>
   15920:	andeq	r7, r1, r4, ror r1
   15924:	andeq	r7, r1, ip, lsr r1
   15928:	andeq	r7, r1, ip, asr #2
   1592c:	cmp	r1, #0
   15930:	cmpne	r0, #0
   15934:	moveq	r1, #1
   15938:	moveq	r0, r1
   1593c:	umull	r2, r3, r0, r1
   15940:	adds	r3, r3, #0
   15944:	movne	r3, #1
   15948:	cmp	r2, #0
   1594c:	blt	1595c <__assert_fail@plt+0x47b4>
   15950:	cmp	r3, #0
   15954:	bne	1595c <__assert_fail@plt+0x47b4>
   15958:	b	10eb4 <calloc@plt>
   1595c:	push	{r4, lr}
   15960:	bl	110a0 <__errno_location@plt>
   15964:	mov	r3, #12
   15968:	str	r3, [r0]
   1596c:	mov	r0, #0
   15970:	pop	{r4, pc}
   15974:	cmp	r0, #0
   15978:	moveq	r0, #1
   1597c:	cmp	r0, #0
   15980:	blt	15988 <__assert_fail@plt+0x47e0>
   15984:	b	11028 <malloc@plt>
   15988:	push	{r4, lr}
   1598c:	bl	110a0 <__errno_location@plt>
   15990:	mov	r3, #12
   15994:	str	r3, [r0]
   15998:	mov	r0, #0
   1599c:	pop	{r4, pc}
   159a0:	cmp	r0, #0
   159a4:	beq	159c8 <__assert_fail@plt+0x4820>
   159a8:	cmp	r1, #0
   159ac:	push	{lr}		; (str lr, [sp, #-4]!)
   159b0:	sub	sp, sp, #12
   159b4:	beq	159d0 <__assert_fail@plt+0x4828>
   159b8:	blt	159e8 <__assert_fail@plt+0x4840>
   159bc:	add	sp, sp, #12
   159c0:	pop	{lr}		; (ldr lr, [sp], #4)
   159c4:	b	10f80 <realloc@plt>
   159c8:	mov	r0, r1
   159cc:	b	15974 <__assert_fail@plt+0x47cc>
   159d0:	str	r1, [sp, #4]
   159d4:	bl	12034 <__assert_fail@plt+0xe8c>
   159d8:	ldr	r3, [sp, #4]
   159dc:	mov	r0, r3
   159e0:	add	sp, sp, #12
   159e4:	pop	{pc}		; (ldr pc, [sp], #4)
   159e8:	bl	110a0 <__errno_location@plt>
   159ec:	mov	r2, #12
   159f0:	mov	r3, #0
   159f4:	str	r2, [r0]
   159f8:	b	159dc <__assert_fail@plt+0x4834>
   159fc:	push	{r4, r5, r6, lr}
   15a00:	mov	r4, r0
   15a04:	bl	10fec <__fpending@plt>
   15a08:	ldr	r5, [r4]
   15a0c:	and	r5, r5, #32
   15a10:	mov	r6, r0
   15a14:	mov	r0, r4
   15a18:	bl	15a78 <__assert_fail@plt+0x48d0>
   15a1c:	cmp	r5, #0
   15a20:	mov	r4, r0
   15a24:	bne	15a44 <__assert_fail@plt+0x489c>
   15a28:	cmp	r0, #0
   15a2c:	beq	15a3c <__assert_fail@plt+0x4894>
   15a30:	cmp	r6, #0
   15a34:	beq	15a60 <__assert_fail@plt+0x48b8>
   15a38:	mvn	r4, #0
   15a3c:	mov	r0, r4
   15a40:	pop	{r4, r5, r6, pc}
   15a44:	cmp	r0, #0
   15a48:	bne	15a38 <__assert_fail@plt+0x4890>
   15a4c:	bl	110a0 <__errno_location@plt>
   15a50:	str	r4, [r0]
   15a54:	mvn	r4, #0
   15a58:	mov	r0, r4
   15a5c:	pop	{r4, r5, r6, pc}
   15a60:	bl	110a0 <__errno_location@plt>
   15a64:	ldr	r4, [r0]
   15a68:	subs	r4, r4, #9
   15a6c:	mvnne	r4, #0
   15a70:	mov	r0, r4
   15a74:	pop	{r4, r5, r6, pc}
   15a78:	push	{r4, r5, lr}
   15a7c:	sub	sp, sp, #12
   15a80:	mov	r4, r0
   15a84:	bl	110dc <fileno@plt>
   15a88:	cmp	r0, #0
   15a8c:	mov	r0, r4
   15a90:	blt	15b0c <__assert_fail@plt+0x4964>
   15a94:	bl	11040 <__freading@plt>
   15a98:	cmp	r0, #0
   15a9c:	bne	15ad8 <__assert_fail@plt+0x4930>
   15aa0:	mov	r0, r4
   15aa4:	bl	15b18 <__assert_fail@plt+0x4970>
   15aa8:	cmp	r0, #0
   15aac:	beq	15b08 <__assert_fail@plt+0x4960>
   15ab0:	bl	110a0 <__errno_location@plt>
   15ab4:	mov	r5, r0
   15ab8:	mov	r0, r4
   15abc:	ldr	r4, [r5]
   15ac0:	bl	110f4 <fclose@plt>
   15ac4:	cmp	r4, #0
   15ac8:	mvnne	r0, #0
   15acc:	strne	r4, [r5]
   15ad0:	add	sp, sp, #12
   15ad4:	pop	{r4, r5, pc}
   15ad8:	mov	r0, r4
   15adc:	bl	110dc <fileno@plt>
   15ae0:	mov	r3, #1
   15ae4:	str	r3, [sp]
   15ae8:	mov	r2, #0
   15aec:	mov	r3, #0
   15af0:	bl	10fc8 <lseek64@plt>
   15af4:	mvn	r3, #0
   15af8:	mvn	r2, #0
   15afc:	cmp	r1, r3
   15b00:	cmpeq	r0, r2
   15b04:	bne	15aa0 <__assert_fail@plt+0x48f8>
   15b08:	mov	r0, r4
   15b0c:	add	sp, sp, #12
   15b10:	pop	{r4, r5, lr}
   15b14:	b	110f4 <fclose@plt>
   15b18:	push	{r4, lr}
   15b1c:	subs	r4, r0, #0
   15b20:	sub	sp, sp, #8
   15b24:	beq	15b40 <__assert_fail@plt+0x4998>
   15b28:	bl	11040 <__freading@plt>
   15b2c:	cmp	r0, #0
   15b30:	beq	15b40 <__assert_fail@plt+0x4998>
   15b34:	ldr	r3, [r4]
   15b38:	tst	r3, #256	; 0x100
   15b3c:	bne	15b50 <__assert_fail@plt+0x49a8>
   15b40:	mov	r0, r4
   15b44:	add	sp, sp, #8
   15b48:	pop	{r4, lr}
   15b4c:	b	10f08 <fflush@plt>
   15b50:	mov	r3, #1
   15b54:	str	r3, [sp]
   15b58:	mov	r2, #0
   15b5c:	mov	r3, #0
   15b60:	mov	r0, r4
   15b64:	bl	15b78 <__assert_fail@plt+0x49d0>
   15b68:	mov	r0, r4
   15b6c:	add	sp, sp, #8
   15b70:	pop	{r4, lr}
   15b74:	b	10f08 <fflush@plt>
   15b78:	push	{r4, r5, r6, r7, r8, lr}
   15b7c:	sub	sp, sp, #8
   15b80:	ldmib	r0, {ip, lr}
   15b84:	mov	r4, r0
   15b88:	ldr	r5, [sp, #32]
   15b8c:	cmp	lr, ip
   15b90:	beq	15ba8 <__assert_fail@plt+0x4a00>
   15b94:	str	r5, [sp, #32]
   15b98:	mov	r0, r4
   15b9c:	add	sp, sp, #8
   15ba0:	pop	{r4, r5, r6, r7, r8, lr}
   15ba4:	b	11100 <fseeko64@plt>
   15ba8:	ldr	lr, [r0, #20]
   15bac:	ldr	ip, [r0, #16]
   15bb0:	cmp	lr, ip
   15bb4:	bne	15b94 <__assert_fail@plt+0x49ec>
   15bb8:	ldr	r8, [r0, #36]	; 0x24
   15bbc:	cmp	r8, #0
   15bc0:	bne	15b94 <__assert_fail@plt+0x49ec>
   15bc4:	mov	r6, r2
   15bc8:	mov	r7, r3
   15bcc:	bl	110dc <fileno@plt>
   15bd0:	mov	r2, r6
   15bd4:	mov	r3, r7
   15bd8:	str	r5, [sp]
   15bdc:	bl	10fc8 <lseek64@plt>
   15be0:	mvn	r3, #0
   15be4:	mvn	r2, #0
   15be8:	cmp	r1, r3
   15bec:	cmpeq	r0, r2
   15bf0:	beq	15c10 <__assert_fail@plt+0x4a68>
   15bf4:	ldr	r3, [r4]
   15bf8:	strd	r0, [r4, #80]	; 0x50
   15bfc:	mov	r0, r8
   15c00:	bic	r3, r3, #16
   15c04:	str	r3, [r4]
   15c08:	add	sp, sp, #8
   15c0c:	pop	{r4, r5, r6, r7, r8, pc}
   15c10:	mvn	r0, #0
   15c14:	b	15c08 <__assert_fail@plt+0x4a60>
   15c18:	push	{r4, r5, r6, r8, r9, lr}
   15c1c:	mov	r4, r0
   15c20:	mov	r5, r1
   15c24:	add	r6, r2, #20
   15c28:	mov	r8, #10
   15c2c:	mov	r9, #0
   15c30:	mov	r3, #0
   15c34:	strb	r3, [r2, #20]
   15c38:	mov	r0, r4
   15c3c:	mov	r1, r5
   15c40:	mov	r2, r8
   15c44:	mov	r3, r9
   15c48:	bl	1648c <__assert_fail@plt+0x52e4>
   15c4c:	mov	r0, r4
   15c50:	mov	r1, r5
   15c54:	mov	r3, r9
   15c58:	add	r2, r2, #48	; 0x30
   15c5c:	strb	r2, [r6, #-1]!
   15c60:	mov	r2, r8
   15c64:	bl	1648c <__assert_fail@plt+0x52e4>
   15c68:	mov	r4, r0
   15c6c:	mov	r5, r1
   15c70:	orrs	r3, r4, r5
   15c74:	bne	15c38 <__assert_fail@plt+0x4a90>
   15c78:	mov	r0, r6
   15c7c:	pop	{r4, r5, r6, r8, r9, pc}
   15c80:	push	{r4, lr}
   15c84:	mov	r0, #14
   15c88:	bl	1113c <nl_langinfo@plt>
   15c8c:	cmp	r0, #0
   15c90:	beq	15ca8 <__assert_fail@plt+0x4b00>
   15c94:	ldrb	r2, [r0]
   15c98:	ldr	r3, [pc, #16]	; 15cb0 <__assert_fail@plt+0x4b08>
   15c9c:	cmp	r2, #0
   15ca0:	moveq	r0, r3
   15ca4:	pop	{r4, pc}
   15ca8:	ldr	r0, [pc]	; 15cb0 <__assert_fail@plt+0x4b08>
   15cac:	pop	{r4, pc}
   15cb0:	andeq	r7, r1, r0, lsl #3
   15cb4:	push	{r4, r5, r6, r7, lr}
   15cb8:	subs	r6, r0, #0
   15cbc:	sub	sp, sp, #12
   15cc0:	addeq	r6, sp, #4
   15cc4:	mov	r0, r6
   15cc8:	mov	r5, r2
   15ccc:	mov	r7, r1
   15cd0:	bl	10ff8 <mbrtowc@plt>
   15cd4:	cmp	r5, #0
   15cd8:	cmnne	r0, #3
   15cdc:	mov	r4, r0
   15ce0:	bls	15cfc <__assert_fail@plt+0x4b54>
   15ce4:	mov	r0, #0
   15ce8:	bl	15f4c <__assert_fail@plt+0x4da4>
   15cec:	cmp	r0, #0
   15cf0:	moveq	r4, #1
   15cf4:	ldrbeq	r3, [r7]
   15cf8:	streq	r3, [r6]
   15cfc:	mov	r0, r4
   15d00:	add	sp, sp, #12
   15d04:	pop	{r4, r5, r6, r7, pc}
   15d08:	lsrs	r3, r1, #30
   15d0c:	movne	r3, #1
   15d10:	moveq	r3, #0
   15d14:	lsls	r1, r1, #2
   15d18:	bmi	15d28 <__assert_fail@plt+0x4b80>
   15d1c:	cmp	r3, #0
   15d20:	bne	15d28 <__assert_fail@plt+0x4b80>
   15d24:	b	159a0 <__assert_fail@plt+0x47f8>
   15d28:	push	{r4, lr}
   15d2c:	bl	110a0 <__errno_location@plt>
   15d30:	mov	r3, #12
   15d34:	str	r3, [r0]
   15d38:	mov	r0, #0
   15d3c:	pop	{r4, pc}
   15d40:	push	{r4, r5, r6, r7, r8, lr}
   15d44:	subs	r7, r0, #0
   15d48:	sub	sp, sp, #8
   15d4c:	mov	r6, r1
   15d50:	mov	r8, r2
   15d54:	beq	15df0 <__assert_fail@plt+0x4c48>
   15d58:	mov	r3, #10
   15d5c:	mov	r1, r3
   15d60:	mov	r0, #0
   15d64:	str	r3, [sp, #4]
   15d68:	bl	15d08 <__assert_fail@plt+0x4b60>
   15d6c:	subs	r4, r0, #0
   15d70:	beq	15db0 <__assert_fail@plt+0x4c08>
   15d74:	mov	r1, r6
   15d78:	add	r3, sp, #4
   15d7c:	mov	r2, r4
   15d80:	mov	r0, r7
   15d84:	ldr	r5, [sp, #4]
   15d88:	bl	110b8 <getgrouplist@plt>
   15d8c:	ldr	r1, [sp, #4]
   15d90:	cmp	r0, #0
   15d94:	blt	15dbc <__assert_fail@plt+0x4c14>
   15d98:	mov	r0, r4
   15d9c:	bl	15d08 <__assert_fail@plt+0x4b60>
   15da0:	cmp	r0, #0
   15da4:	bne	15de0 <__assert_fail@plt+0x4c38>
   15da8:	mov	r0, r4
   15dac:	bl	12034 <__assert_fail@plt+0xe8c>
   15db0:	mvn	r0, #0
   15db4:	add	sp, sp, #8
   15db8:	pop	{r4, r5, r6, r7, r8, pc}
   15dbc:	cmp	r5, r1
   15dc0:	lsleq	r1, r1, #1
   15dc4:	mov	r0, r4
   15dc8:	streq	r1, [sp, #4]
   15dcc:	bl	15d08 <__assert_fail@plt+0x4b60>
   15dd0:	cmp	r0, #0
   15dd4:	beq	15da8 <__assert_fail@plt+0x4c00>
   15dd8:	mov	r4, r0
   15ddc:	b	15d74 <__assert_fail@plt+0x4bcc>
   15de0:	str	r0, [r8]
   15de4:	ldr	r0, [sp, #4]
   15de8:	add	sp, sp, #8
   15dec:	pop	{r4, r5, r6, r7, r8, pc}
   15df0:	mov	r1, r7
   15df4:	bl	11154 <getgroups@plt>
   15df8:	cmp	r0, #0
   15dfc:	str	r0, [sp, #4]
   15e00:	blt	15eb4 <__assert_fail@plt+0x4d0c>
   15e04:	adds	r5, r6, #1
   15e08:	movne	r5, #1
   15e0c:	cmp	r0, #0
   15e10:	movne	r3, r5
   15e14:	orreq	r3, r5, #1
   15e18:	cmp	r3, #0
   15e1c:	addne	r0, r0, #1
   15e20:	strne	r0, [sp, #4]
   15e24:	mov	r1, r0
   15e28:	mov	r0, #0
   15e2c:	bl	15d08 <__assert_fail@plt+0x4b60>
   15e30:	subs	r4, r0, #0
   15e34:	beq	15db0 <__assert_fail@plt+0x4c08>
   15e38:	ldr	r0, [sp, #4]
   15e3c:	cmn	r6, #1
   15e40:	sub	r0, r0, r5
   15e44:	beq	15eec <__assert_fail@plt+0x4d44>
   15e48:	add	r1, r4, #4
   15e4c:	bl	11154 <getgroups@plt>
   15e50:	cmp	r0, #0
   15e54:	addge	r0, r0, #1
   15e58:	strge	r6, [r4]
   15e5c:	blt	15da8 <__assert_fail@plt+0x4c00>
   15e60:	cmp	r0, #1
   15e64:	str	r4, [r8]
   15e68:	ble	15db4 <__assert_fail@plt+0x4c0c>
   15e6c:	add	ip, r4, r0, lsl #2
   15e70:	add	r3, r4, #4
   15e74:	cmp	ip, r3
   15e78:	ldr	lr, [r4]
   15e7c:	bhi	15ea0 <__assert_fail@plt+0x4cf8>
   15e80:	b	15db4 <__assert_fail@plt+0x4c0c>
   15e84:	ldr	r1, [r4]
   15e88:	cmp	r2, r1
   15e8c:	strne	r2, [r4, #4]
   15e90:	addne	r4, r4, #4
   15e94:	beq	15eac <__assert_fail@plt+0x4d04>
   15e98:	cmp	ip, r3
   15e9c:	bls	15db4 <__assert_fail@plt+0x4c0c>
   15ea0:	ldr	r2, [r3], #4
   15ea4:	cmp	lr, r2
   15ea8:	bne	15e84 <__assert_fail@plt+0x4cdc>
   15eac:	sub	r0, r0, #1
   15eb0:	b	15e98 <__assert_fail@plt+0x4cf0>
   15eb4:	bl	110a0 <__errno_location@plt>
   15eb8:	ldr	r3, [r0]
   15ebc:	cmp	r3, #38	; 0x26
   15ec0:	bne	15db0 <__assert_fail@plt+0x4c08>
   15ec4:	mov	r0, r7
   15ec8:	mov	r1, #4
   15ecc:	bl	159a0 <__assert_fail@plt+0x47f8>
   15ed0:	subs	r3, r0, #0
   15ed4:	beq	15db0 <__assert_fail@plt+0x4c08>
   15ed8:	adds	r0, r6, #1
   15edc:	str	r3, [r8]
   15ee0:	movne	r0, #1
   15ee4:	str	r6, [r3]
   15ee8:	b	15db4 <__assert_fail@plt+0x4c0c>
   15eec:	mov	r1, r4
   15ef0:	bl	11154 <getgroups@plt>
   15ef4:	cmp	r0, #0
   15ef8:	bge	15e60 <__assert_fail@plt+0x4cb8>
   15efc:	b	15da8 <__assert_fail@plt+0x4c00>
   15f00:	push	{r4, r5, r6, lr}
   15f04:	subs	r4, r2, #0
   15f08:	mov	r6, r0
   15f0c:	mov	r5, r1
   15f10:	beq	15f3c <__assert_fail@plt+0x4d94>
   15f14:	mov	r1, r4
   15f18:	mvn	r0, #0
   15f1c:	bl	16040 <__assert_fail@plt+0x4e98>
   15f20:	cmp	r0, r5
   15f24:	bcs	15f3c <__assert_fail@plt+0x4d94>
   15f28:	bl	110a0 <__errno_location@plt>
   15f2c:	mov	r3, #12
   15f30:	str	r3, [r0]
   15f34:	mov	r0, #0
   15f38:	pop	{r4, r5, r6, pc}
   15f3c:	mul	r1, r5, r4
   15f40:	mov	r0, r6
   15f44:	pop	{r4, r5, r6, lr}
   15f48:	b	159a0 <__assert_fail@plt+0x47f8>
   15f4c:	push	{lr}		; (str lr, [sp, #-4]!)
   15f50:	sub	sp, sp, #268	; 0x10c
   15f54:	add	r1, sp, #4
   15f58:	ldr	r2, [pc, #60]	; 15f9c <__assert_fail@plt+0x4df4>
   15f5c:	bl	15fa8 <__assert_fail@plt+0x4e00>
   15f60:	cmp	r0, #0
   15f64:	movne	r0, #0
   15f68:	bne	15f94 <__assert_fail@plt+0x4dec>
   15f6c:	ldr	r1, [pc, #44]	; 15fa0 <__assert_fail@plt+0x4df8>
   15f70:	add	r0, sp, #4
   15f74:	bl	10ef0 <strcmp@plt>
   15f78:	cmp	r0, #0
   15f7c:	beq	15f94 <__assert_fail@plt+0x4dec>
   15f80:	add	r0, sp, #4
   15f84:	ldr	r1, [pc, #24]	; 15fa4 <__assert_fail@plt+0x4dfc>
   15f88:	bl	10ef0 <strcmp@plt>
   15f8c:	adds	r0, r0, #0
   15f90:	movne	r0, #1
   15f94:	add	sp, sp, #268	; 0x10c
   15f98:	pop	{pc}		; (ldr pc, [sp], #4)
   15f9c:	andeq	r0, r0, r1, lsl #2
   15fa0:	andeq	r7, r1, r8, lsl #3
   15fa4:	andeq	r7, r1, ip, lsl #3
   15fa8:	push	{r4, r5, r6, lr}
   15fac:	mov	r5, r1
   15fb0:	mov	r1, #0
   15fb4:	mov	r4, r2
   15fb8:	bl	11118 <setlocale@plt>
   15fbc:	subs	r6, r0, #0
   15fc0:	beq	1601c <__assert_fail@plt+0x4e74>
   15fc4:	bl	11088 <strlen@plt>
   15fc8:	cmp	r4, r0
   15fcc:	bhi	16004 <__assert_fail@plt+0x4e5c>
   15fd0:	cmp	r4, #0
   15fd4:	bne	15fe0 <__assert_fail@plt+0x4e38>
   15fd8:	mov	r0, #34	; 0x22
   15fdc:	pop	{r4, r5, r6, pc}
   15fe0:	sub	r4, r4, #1
   15fe4:	mov	r1, r6
   15fe8:	mov	r2, r4
   15fec:	mov	r0, r5
   15ff0:	bl	10f2c <memcpy@plt>
   15ff4:	mov	r3, #0
   15ff8:	strb	r3, [r5, r4]
   15ffc:	mov	r0, #34	; 0x22
   16000:	pop	{r4, r5, r6, pc}
   16004:	add	r2, r0, #1
   16008:	mov	r1, r6
   1600c:	mov	r0, r5
   16010:	bl	10f2c <memcpy@plt>
   16014:	mov	r0, #0
   16018:	pop	{r4, r5, r6, pc}
   1601c:	cmp	r4, #0
   16020:	beq	16030 <__assert_fail@plt+0x4e88>
   16024:	strb	r6, [r5]
   16028:	mov	r0, #22
   1602c:	pop	{r4, r5, r6, pc}
   16030:	mov	r0, #22
   16034:	pop	{r4, r5, r6, pc}
   16038:	mov	r1, #0
   1603c:	b	11118 <setlocale@plt>
   16040:	subs	r2, r1, #1
   16044:	bxeq	lr
   16048:	bcc	16220 <__assert_fail@plt+0x5078>
   1604c:	cmp	r0, r1
   16050:	bls	16204 <__assert_fail@plt+0x505c>
   16054:	tst	r1, r2
   16058:	beq	16210 <__assert_fail@plt+0x5068>
   1605c:	clz	r3, r0
   16060:	clz	r2, r1
   16064:	sub	r3, r2, r3
   16068:	rsbs	r3, r3, #31
   1606c:	addne	r3, r3, r3, lsl #1
   16070:	mov	r2, #0
   16074:	addne	pc, pc, r3, lsl #2
   16078:	nop			; (mov r0, r0)
   1607c:	cmp	r0, r1, lsl #31
   16080:	adc	r2, r2, r2
   16084:	subcs	r0, r0, r1, lsl #31
   16088:	cmp	r0, r1, lsl #30
   1608c:	adc	r2, r2, r2
   16090:	subcs	r0, r0, r1, lsl #30
   16094:	cmp	r0, r1, lsl #29
   16098:	adc	r2, r2, r2
   1609c:	subcs	r0, r0, r1, lsl #29
   160a0:	cmp	r0, r1, lsl #28
   160a4:	adc	r2, r2, r2
   160a8:	subcs	r0, r0, r1, lsl #28
   160ac:	cmp	r0, r1, lsl #27
   160b0:	adc	r2, r2, r2
   160b4:	subcs	r0, r0, r1, lsl #27
   160b8:	cmp	r0, r1, lsl #26
   160bc:	adc	r2, r2, r2
   160c0:	subcs	r0, r0, r1, lsl #26
   160c4:	cmp	r0, r1, lsl #25
   160c8:	adc	r2, r2, r2
   160cc:	subcs	r0, r0, r1, lsl #25
   160d0:	cmp	r0, r1, lsl #24
   160d4:	adc	r2, r2, r2
   160d8:	subcs	r0, r0, r1, lsl #24
   160dc:	cmp	r0, r1, lsl #23
   160e0:	adc	r2, r2, r2
   160e4:	subcs	r0, r0, r1, lsl #23
   160e8:	cmp	r0, r1, lsl #22
   160ec:	adc	r2, r2, r2
   160f0:	subcs	r0, r0, r1, lsl #22
   160f4:	cmp	r0, r1, lsl #21
   160f8:	adc	r2, r2, r2
   160fc:	subcs	r0, r0, r1, lsl #21
   16100:	cmp	r0, r1, lsl #20
   16104:	adc	r2, r2, r2
   16108:	subcs	r0, r0, r1, lsl #20
   1610c:	cmp	r0, r1, lsl #19
   16110:	adc	r2, r2, r2
   16114:	subcs	r0, r0, r1, lsl #19
   16118:	cmp	r0, r1, lsl #18
   1611c:	adc	r2, r2, r2
   16120:	subcs	r0, r0, r1, lsl #18
   16124:	cmp	r0, r1, lsl #17
   16128:	adc	r2, r2, r2
   1612c:	subcs	r0, r0, r1, lsl #17
   16130:	cmp	r0, r1, lsl #16
   16134:	adc	r2, r2, r2
   16138:	subcs	r0, r0, r1, lsl #16
   1613c:	cmp	r0, r1, lsl #15
   16140:	adc	r2, r2, r2
   16144:	subcs	r0, r0, r1, lsl #15
   16148:	cmp	r0, r1, lsl #14
   1614c:	adc	r2, r2, r2
   16150:	subcs	r0, r0, r1, lsl #14
   16154:	cmp	r0, r1, lsl #13
   16158:	adc	r2, r2, r2
   1615c:	subcs	r0, r0, r1, lsl #13
   16160:	cmp	r0, r1, lsl #12
   16164:	adc	r2, r2, r2
   16168:	subcs	r0, r0, r1, lsl #12
   1616c:	cmp	r0, r1, lsl #11
   16170:	adc	r2, r2, r2
   16174:	subcs	r0, r0, r1, lsl #11
   16178:	cmp	r0, r1, lsl #10
   1617c:	adc	r2, r2, r2
   16180:	subcs	r0, r0, r1, lsl #10
   16184:	cmp	r0, r1, lsl #9
   16188:	adc	r2, r2, r2
   1618c:	subcs	r0, r0, r1, lsl #9
   16190:	cmp	r0, r1, lsl #8
   16194:	adc	r2, r2, r2
   16198:	subcs	r0, r0, r1, lsl #8
   1619c:	cmp	r0, r1, lsl #7
   161a0:	adc	r2, r2, r2
   161a4:	subcs	r0, r0, r1, lsl #7
   161a8:	cmp	r0, r1, lsl #6
   161ac:	adc	r2, r2, r2
   161b0:	subcs	r0, r0, r1, lsl #6
   161b4:	cmp	r0, r1, lsl #5
   161b8:	adc	r2, r2, r2
   161bc:	subcs	r0, r0, r1, lsl #5
   161c0:	cmp	r0, r1, lsl #4
   161c4:	adc	r2, r2, r2
   161c8:	subcs	r0, r0, r1, lsl #4
   161cc:	cmp	r0, r1, lsl #3
   161d0:	adc	r2, r2, r2
   161d4:	subcs	r0, r0, r1, lsl #3
   161d8:	cmp	r0, r1, lsl #2
   161dc:	adc	r2, r2, r2
   161e0:	subcs	r0, r0, r1, lsl #2
   161e4:	cmp	r0, r1, lsl #1
   161e8:	adc	r2, r2, r2
   161ec:	subcs	r0, r0, r1, lsl #1
   161f0:	cmp	r0, r1
   161f4:	adc	r2, r2, r2
   161f8:	subcs	r0, r0, r1
   161fc:	mov	r0, r2
   16200:	bx	lr
   16204:	moveq	r0, #1
   16208:	movne	r0, #0
   1620c:	bx	lr
   16210:	clz	r2, r1
   16214:	rsb	r2, r2, #31
   16218:	lsr	r0, r0, r2
   1621c:	bx	lr
   16220:	cmp	r0, #0
   16224:	mvnne	r0, #0
   16228:	b	164c8 <__assert_fail@plt+0x5320>
   1622c:	cmp	r1, #0
   16230:	beq	16220 <__assert_fail@plt+0x5078>
   16234:	push	{r0, r1, lr}
   16238:	bl	16040 <__assert_fail@plt+0x4e98>
   1623c:	pop	{r1, r2, lr}
   16240:	mul	r3, r2, r0
   16244:	sub	r1, r1, r3
   16248:	bx	lr
   1624c:	cmp	r1, #0
   16250:	beq	1645c <__assert_fail@plt+0x52b4>
   16254:	eor	ip, r0, r1
   16258:	rsbmi	r1, r1, #0
   1625c:	subs	r2, r1, #1
   16260:	beq	16428 <__assert_fail@plt+0x5280>
   16264:	movs	r3, r0
   16268:	rsbmi	r3, r0, #0
   1626c:	cmp	r3, r1
   16270:	bls	16434 <__assert_fail@plt+0x528c>
   16274:	tst	r1, r2
   16278:	beq	16444 <__assert_fail@plt+0x529c>
   1627c:	clz	r2, r3
   16280:	clz	r0, r1
   16284:	sub	r2, r0, r2
   16288:	rsbs	r2, r2, #31
   1628c:	addne	r2, r2, r2, lsl #1
   16290:	mov	r0, #0
   16294:	addne	pc, pc, r2, lsl #2
   16298:	nop			; (mov r0, r0)
   1629c:	cmp	r3, r1, lsl #31
   162a0:	adc	r0, r0, r0
   162a4:	subcs	r3, r3, r1, lsl #31
   162a8:	cmp	r3, r1, lsl #30
   162ac:	adc	r0, r0, r0
   162b0:	subcs	r3, r3, r1, lsl #30
   162b4:	cmp	r3, r1, lsl #29
   162b8:	adc	r0, r0, r0
   162bc:	subcs	r3, r3, r1, lsl #29
   162c0:	cmp	r3, r1, lsl #28
   162c4:	adc	r0, r0, r0
   162c8:	subcs	r3, r3, r1, lsl #28
   162cc:	cmp	r3, r1, lsl #27
   162d0:	adc	r0, r0, r0
   162d4:	subcs	r3, r3, r1, lsl #27
   162d8:	cmp	r3, r1, lsl #26
   162dc:	adc	r0, r0, r0
   162e0:	subcs	r3, r3, r1, lsl #26
   162e4:	cmp	r3, r1, lsl #25
   162e8:	adc	r0, r0, r0
   162ec:	subcs	r3, r3, r1, lsl #25
   162f0:	cmp	r3, r1, lsl #24
   162f4:	adc	r0, r0, r0
   162f8:	subcs	r3, r3, r1, lsl #24
   162fc:	cmp	r3, r1, lsl #23
   16300:	adc	r0, r0, r0
   16304:	subcs	r3, r3, r1, lsl #23
   16308:	cmp	r3, r1, lsl #22
   1630c:	adc	r0, r0, r0
   16310:	subcs	r3, r3, r1, lsl #22
   16314:	cmp	r3, r1, lsl #21
   16318:	adc	r0, r0, r0
   1631c:	subcs	r3, r3, r1, lsl #21
   16320:	cmp	r3, r1, lsl #20
   16324:	adc	r0, r0, r0
   16328:	subcs	r3, r3, r1, lsl #20
   1632c:	cmp	r3, r1, lsl #19
   16330:	adc	r0, r0, r0
   16334:	subcs	r3, r3, r1, lsl #19
   16338:	cmp	r3, r1, lsl #18
   1633c:	adc	r0, r0, r0
   16340:	subcs	r3, r3, r1, lsl #18
   16344:	cmp	r3, r1, lsl #17
   16348:	adc	r0, r0, r0
   1634c:	subcs	r3, r3, r1, lsl #17
   16350:	cmp	r3, r1, lsl #16
   16354:	adc	r0, r0, r0
   16358:	subcs	r3, r3, r1, lsl #16
   1635c:	cmp	r3, r1, lsl #15
   16360:	adc	r0, r0, r0
   16364:	subcs	r3, r3, r1, lsl #15
   16368:	cmp	r3, r1, lsl #14
   1636c:	adc	r0, r0, r0
   16370:	subcs	r3, r3, r1, lsl #14
   16374:	cmp	r3, r1, lsl #13
   16378:	adc	r0, r0, r0
   1637c:	subcs	r3, r3, r1, lsl #13
   16380:	cmp	r3, r1, lsl #12
   16384:	adc	r0, r0, r0
   16388:	subcs	r3, r3, r1, lsl #12
   1638c:	cmp	r3, r1, lsl #11
   16390:	adc	r0, r0, r0
   16394:	subcs	r3, r3, r1, lsl #11
   16398:	cmp	r3, r1, lsl #10
   1639c:	adc	r0, r0, r0
   163a0:	subcs	r3, r3, r1, lsl #10
   163a4:	cmp	r3, r1, lsl #9
   163a8:	adc	r0, r0, r0
   163ac:	subcs	r3, r3, r1, lsl #9
   163b0:	cmp	r3, r1, lsl #8
   163b4:	adc	r0, r0, r0
   163b8:	subcs	r3, r3, r1, lsl #8
   163bc:	cmp	r3, r1, lsl #7
   163c0:	adc	r0, r0, r0
   163c4:	subcs	r3, r3, r1, lsl #7
   163c8:	cmp	r3, r1, lsl #6
   163cc:	adc	r0, r0, r0
   163d0:	subcs	r3, r3, r1, lsl #6
   163d4:	cmp	r3, r1, lsl #5
   163d8:	adc	r0, r0, r0
   163dc:	subcs	r3, r3, r1, lsl #5
   163e0:	cmp	r3, r1, lsl #4
   163e4:	adc	r0, r0, r0
   163e8:	subcs	r3, r3, r1, lsl #4
   163ec:	cmp	r3, r1, lsl #3
   163f0:	adc	r0, r0, r0
   163f4:	subcs	r3, r3, r1, lsl #3
   163f8:	cmp	r3, r1, lsl #2
   163fc:	adc	r0, r0, r0
   16400:	subcs	r3, r3, r1, lsl #2
   16404:	cmp	r3, r1, lsl #1
   16408:	adc	r0, r0, r0
   1640c:	subcs	r3, r3, r1, lsl #1
   16410:	cmp	r3, r1
   16414:	adc	r0, r0, r0
   16418:	subcs	r3, r3, r1
   1641c:	cmp	ip, #0
   16420:	rsbmi	r0, r0, #0
   16424:	bx	lr
   16428:	teq	ip, r0
   1642c:	rsbmi	r0, r0, #0
   16430:	bx	lr
   16434:	movcc	r0, #0
   16438:	asreq	r0, ip, #31
   1643c:	orreq	r0, r0, #1
   16440:	bx	lr
   16444:	clz	r2, r1
   16448:	rsb	r2, r2, #31
   1644c:	cmp	ip, #0
   16450:	lsr	r0, r3, r2
   16454:	rsbmi	r0, r0, #0
   16458:	bx	lr
   1645c:	cmp	r0, #0
   16460:	mvngt	r0, #-2147483648	; 0x80000000
   16464:	movlt	r0, #-2147483648	; 0x80000000
   16468:	b	164c8 <__assert_fail@plt+0x5320>
   1646c:	cmp	r1, #0
   16470:	beq	1645c <__assert_fail@plt+0x52b4>
   16474:	push	{r0, r1, lr}
   16478:	bl	16254 <__assert_fail@plt+0x50ac>
   1647c:	pop	{r1, r2, lr}
   16480:	mul	r3, r2, r0
   16484:	sub	r1, r1, r3
   16488:	bx	lr
   1648c:	cmp	r3, #0
   16490:	cmpeq	r2, #0
   16494:	bne	164ac <__assert_fail@plt+0x5304>
   16498:	cmp	r1, #0
   1649c:	cmpeq	r0, #0
   164a0:	mvnne	r1, #0
   164a4:	mvnne	r0, #0
   164a8:	b	164c8 <__assert_fail@plt+0x5320>
   164ac:	sub	sp, sp, #8
   164b0:	push	{sp, lr}
   164b4:	bl	164d8 <__assert_fail@plt+0x5330>
   164b8:	ldr	lr, [sp, #4]
   164bc:	add	sp, sp, #8
   164c0:	pop	{r2, r3}
   164c4:	bx	lr
   164c8:	push	{r1, lr}
   164cc:	mov	r0, #8
   164d0:	bl	10ed8 <raise@plt>
   164d4:	pop	{r1, pc}
   164d8:	cmp	r1, r3
   164dc:	push	{r4, r5, r6, r7, r8, r9, lr}
   164e0:	cmpeq	r0, r2
   164e4:	mov	r4, r0
   164e8:	mov	r5, r1
   164ec:	ldr	r9, [sp, #28]
   164f0:	movcc	r0, #0
   164f4:	movcc	r1, #0
   164f8:	bcc	165f0 <__assert_fail@plt+0x5448>
   164fc:	cmp	r3, #0
   16500:	clzeq	ip, r2
   16504:	clzne	ip, r3
   16508:	addeq	ip, ip, #32
   1650c:	cmp	r5, #0
   16510:	clzeq	r1, r4
   16514:	addeq	r1, r1, #32
   16518:	clzne	r1, r5
   1651c:	sub	ip, ip, r1
   16520:	sub	lr, ip, #32
   16524:	lsl	r7, r3, ip
   16528:	rsb	r8, ip, #32
   1652c:	orr	r7, r7, r2, lsl lr
   16530:	orr	r7, r7, r2, lsr r8
   16534:	lsl	r6, r2, ip
   16538:	cmp	r5, r7
   1653c:	cmpeq	r4, r6
   16540:	movcc	r0, #0
   16544:	movcc	r1, #0
   16548:	bcc	16564 <__assert_fail@plt+0x53bc>
   1654c:	mov	r3, #1
   16550:	subs	r4, r4, r6
   16554:	lsl	r1, r3, lr
   16558:	lsl	r0, r3, ip
   1655c:	orr	r1, r1, r3, lsr r8
   16560:	sbc	r5, r5, r7
   16564:	cmp	ip, #0
   16568:	beq	165f0 <__assert_fail@plt+0x5448>
   1656c:	lsrs	r3, r7, #1
   16570:	rrx	r2, r6
   16574:	mov	r6, ip
   16578:	b	1659c <__assert_fail@plt+0x53f4>
   1657c:	subs	r4, r4, r2
   16580:	sbc	r5, r5, r3
   16584:	adds	r4, r4, r4
   16588:	adc	r5, r5, r5
   1658c:	adds	r4, r4, #1
   16590:	adc	r5, r5, #0
   16594:	subs	r6, r6, #1
   16598:	beq	165b8 <__assert_fail@plt+0x5410>
   1659c:	cmp	r5, r3
   165a0:	cmpeq	r4, r2
   165a4:	bcs	1657c <__assert_fail@plt+0x53d4>
   165a8:	adds	r4, r4, r4
   165ac:	adc	r5, r5, r5
   165b0:	subs	r6, r6, #1
   165b4:	bne	1659c <__assert_fail@plt+0x53f4>
   165b8:	lsr	r6, r4, ip
   165bc:	lsr	r7, r5, ip
   165c0:	orr	r6, r6, r5, lsl r8
   165c4:	adds	r2, r0, r4
   165c8:	orr	r6, r6, r5, lsr lr
   165cc:	adc	r3, r1, r5
   165d0:	lsl	r1, r7, ip
   165d4:	orr	r1, r1, r6, lsl lr
   165d8:	lsl	r0, r6, ip
   165dc:	orr	r1, r1, r6, lsr r8
   165e0:	subs	r0, r2, r0
   165e4:	mov	r4, r6
   165e8:	mov	r5, r7
   165ec:	sbc	r1, r3, r1
   165f0:	cmp	r9, #0
   165f4:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   165f8:	strd	r4, [r9]
   165fc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16604:	mov	r7, r0
   16608:	ldr	r6, [pc, #72]	; 16658 <__assert_fail@plt+0x54b0>
   1660c:	ldr	r5, [pc, #72]	; 1665c <__assert_fail@plt+0x54b4>
   16610:	add	r6, pc, r6
   16614:	add	r5, pc, r5
   16618:	sub	r6, r6, r5
   1661c:	mov	r8, r1
   16620:	mov	r9, r2
   16624:	bl	10e94 <calloc@plt-0x20>
   16628:	asrs	r6, r6, #2
   1662c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16630:	mov	r4, #0
   16634:	add	r4, r4, #1
   16638:	ldr	r3, [r5], #4
   1663c:	mov	r2, r9
   16640:	mov	r1, r8
   16644:	mov	r0, r7
   16648:	blx	r3
   1664c:	cmp	r6, r4
   16650:	bne	16634 <__assert_fail@plt+0x548c>
   16654:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16658:	strdeq	r1, [r1], -r8
   1665c:	strdeq	r1, [r1], -r0
   16660:	bx	lr
   16664:	ldr	r3, [pc, #12]	; 16678 <__assert_fail@plt+0x54d0>
   16668:	mov	r1, #0
   1666c:	add	r3, pc, r3
   16670:	ldr	r2, [r3]
   16674:	b	110ac <__cxa_atexit@plt>
   16678:	andeq	r1, r1, r0, lsr #21

Disassembly of section .fini:

0001667c <.fini>:
   1667c:	push	{r3, lr}
   16680:	pop	{r3, pc}
