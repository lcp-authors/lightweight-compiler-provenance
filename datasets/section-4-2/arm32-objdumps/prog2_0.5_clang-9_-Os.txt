
../repos/prog2/0.5:     file format elf32-littlearm


Disassembly of section .init:

000106bc <.init>:
   106bc:	push	{r3, lr}
   106c0:	bl	10784 <_start@@Base+0x3c>
   106c4:	pop	{r3, pc}

Disassembly of section .plt:

000106c8 <strcmp@plt-0x14>:
   106c8:	push	{lr}		; (str lr, [sp, #-4]!)
   106cc:	ldr	lr, [pc, #4]	; 106d8 <strcmp@plt-0x4>
   106d0:	add	lr, pc, lr
   106d4:	ldr	pc, [lr, #8]!
   106d8:	andeq	r0, r1, r8, lsr #18

000106dc <strcmp@plt>:
   106dc:	add	ip, pc, #0, 12
   106e0:	add	ip, ip, #16, 20	; 0x10000
   106e4:	ldr	pc, [ip, #2344]!	; 0x928

000106e8 <printf@plt>:
   106e8:	add	ip, pc, #0, 12
   106ec:	add	ip, ip, #16, 20	; 0x10000
   106f0:	ldr	pc, [ip, #2336]!	; 0x920

000106f4 <__libc_start_main@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #16, 20	; 0x10000
   106fc:	ldr	pc, [ip, #2328]!	; 0x918

00010700 <__gmon_start__@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #16, 20	; 0x10000
   10708:	ldr	pc, [ip, #2320]!	; 0x910

0001070c <bcmp@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #16, 20	; 0x10000
   10714:	ldr	pc, [ip, #2312]!	; 0x908

00010718 <strlen@plt>:
   10718:	add	ip, pc, #0, 12
   1071c:	add	ip, ip, #16, 20	; 0x10000
   10720:	ldr	pc, [ip, #2304]!	; 0x900

00010724 <memset@plt>:
   10724:	add	ip, pc, #0, 12
   10728:	add	ip, ip, #16, 20	; 0x10000
   1072c:	ldr	pc, [ip, #2296]!	; 0x8f8

00010730 <__isoc99_scanf@plt>:
   10730:	add	ip, pc, #0, 12
   10734:	add	ip, ip, #16, 20	; 0x10000
   10738:	ldr	pc, [ip, #2288]!	; 0x8f0

0001073c <abort@plt>:
   1073c:	add	ip, pc, #0, 12
   10740:	add	ip, ip, #16, 20	; 0x10000
   10744:	ldr	pc, [ip, #2280]!	; 0x8e8

Disassembly of section .text:

00010748 <_start@@Base>:
   10748:	mov	fp, #0
   1074c:	mov	lr, #0
   10750:	pop	{r1}		; (ldr r1, [sp], #4)
   10754:	mov	r2, sp
   10758:	push	{r2}		; (str r2, [sp, #-4]!)
   1075c:	push	{r0}		; (str r0, [sp, #-4]!)
   10760:	ldr	ip, [pc, #16]	; 10778 <_start@@Base+0x30>
   10764:	push	{ip}		; (str ip, [sp, #-4]!)
   10768:	ldr	r0, [pc, #12]	; 1077c <_start@@Base+0x34>
   1076c:	ldr	r3, [pc, #12]	; 10780 <_start@@Base+0x38>
   10770:	bl	106f4 <__libc_start_main@plt>
   10774:	bl	1073c <abort@plt>
   10778:	ldrdeq	r0, [r1], -ip
   1077c:	andeq	r0, r1, r0, lsl #17
   10780:	andeq	r0, r1, ip, ror r9
   10784:	ldr	r3, [pc, #20]	; 107a0 <_start@@Base+0x58>
   10788:	ldr	r2, [pc, #20]	; 107a4 <_start@@Base+0x5c>
   1078c:	add	r3, pc, r3
   10790:	ldr	r2, [r3, r2]
   10794:	cmp	r2, #0
   10798:	bxeq	lr
   1079c:	b	10700 <__gmon_start__@plt>
   107a0:	andeq	r0, r1, ip, ror #16
   107a4:	andeq	r0, r0, r0, lsr r0
   107a8:	ldr	r0, [pc, #24]	; 107c8 <_start@@Base+0x80>
   107ac:	ldr	r3, [pc, #24]	; 107cc <_start@@Base+0x84>
   107b0:	cmp	r3, r0
   107b4:	bxeq	lr
   107b8:	ldr	r3, [pc, #16]	; 107d0 <_start@@Base+0x88>
   107bc:	cmp	r3, #0
   107c0:	bxeq	lr
   107c4:	bx	r3
   107c8:	andeq	r1, r2, ip, lsr r0
   107cc:	andeq	r1, r2, ip, lsr r0
   107d0:	andeq	r0, r0, r0
   107d4:	ldr	r0, [pc, #36]	; 10800 <_start@@Base+0xb8>
   107d8:	ldr	r1, [pc, #36]	; 10804 <_start@@Base+0xbc>
   107dc:	sub	r1, r1, r0
   107e0:	asr	r1, r1, #2
   107e4:	add	r1, r1, r1, lsr #31
   107e8:	asrs	r1, r1, #1
   107ec:	bxeq	lr
   107f0:	ldr	r3, [pc, #16]	; 10808 <_start@@Base+0xc0>
   107f4:	cmp	r3, #0
   107f8:	bxeq	lr
   107fc:	bx	r3
   10800:	andeq	r1, r2, ip, lsr r0
   10804:	andeq	r1, r2, ip, lsr r0
   10808:	andeq	r0, r0, r0
   1080c:	push	{r4, lr}
   10810:	ldr	r4, [pc, #24]	; 10830 <_start@@Base+0xe8>
   10814:	ldrb	r3, [r4]
   10818:	cmp	r3, #0
   1081c:	popne	{r4, pc}
   10820:	bl	107a8 <_start@@Base+0x60>
   10824:	mov	r3, #1
   10828:	strb	r3, [r4]
   1082c:	pop	{r4, pc}
   10830:	andeq	r1, r2, ip, lsr r0
   10834:	b	107d4 <_start@@Base+0x8c>

00010838 <inverte@@Base>:
   10838:	push	{r4, r5, r6, r7, fp, lr}
   1083c:	add	fp, sp, #16
   10840:	mov	r4, r1
   10844:	mov	r5, r0
   10848:	bl	10718 <strlen@plt>
   1084c:	cmp	r0, #0
   10850:	beq	1087c <inverte@@Base+0x44>
   10854:	sub	r6, r5, #1
   10858:	mov	r7, #0
   1085c:	add	r0, r6, r0
   10860:	ldrb	r0, [r0, -r7]
   10864:	strb	r0, [r4, r7]
   10868:	mov	r0, r5
   1086c:	add	r7, r7, #1
   10870:	bl	10718 <strlen@plt>
   10874:	cmp	r0, r7
   10878:	bhi	1085c <inverte@@Base+0x24>
   1087c:	pop	{r4, r5, r6, r7, fp, pc}

00010880 <main@@Base>:
   10880:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10884:	add	fp, sp, #28
   10888:	sub	sp, sp, #212	; 0xd4
   1088c:	add	r4, sp, #104	; 0x68
   10890:	mov	r1, #0
   10894:	mov	r2, #100	; 0x64
   10898:	mov	r0, r4
   1089c:	bl	10724 <memset@plt>
   108a0:	mov	r0, sp
   108a4:	mov	r1, #0
   108a8:	mov	r2, #100	; 0x64
   108ac:	bl	10724 <memset@plt>
   108b0:	movw	r0, #2540	; 0x9ec
   108b4:	movt	r0, #1
   108b8:	bl	106e8 <printf@plt>
   108bc:	movw	r0, #2550	; 0x9f6
   108c0:	mov	r1, r4
   108c4:	movt	r0, #1
   108c8:	bl	10730 <__isoc99_scanf@plt>
   108cc:	movw	r1, #2553	; 0x9f9
   108d0:	mov	r0, r4
   108d4:	mov	r2, #2
   108d8:	movt	r1, #1
   108dc:	bl	1070c <bcmp@plt>
   108e0:	cmp	r0, #0
   108e4:	beq	10970 <main@@Base+0xf0>
   108e8:	movw	r9, #2555	; 0x9fb
   108ec:	movw	sl, #2581	; 0xa15
   108f0:	movw	r8, #2540	; 0x9ec
   108f4:	movw	r7, #2550	; 0x9f6
   108f8:	movw	r6, #2553	; 0x9f9
   108fc:	add	r4, sp, #104	; 0x68
   10900:	mov	r5, sp
   10904:	movt	r9, #1
   10908:	movt	sl, #1
   1090c:	movt	r8, #1
   10910:	movt	r7, #1
   10914:	movt	r6, #1
   10918:	mov	r0, r4
   1091c:	mov	r1, r5
   10920:	bl	10838 <inverte@@Base>
   10924:	mov	r0, r4
   10928:	mov	r1, r5
   1092c:	bl	106dc <strcmp@plt>
   10930:	cmp	r0, #0
   10934:	mov	r0, sl
   10938:	mov	r1, r4
   1093c:	moveq	r0, r9
   10940:	bl	106e8 <printf@plt>
   10944:	mov	r0, r8
   10948:	bl	106e8 <printf@plt>
   1094c:	mov	r0, r7
   10950:	mov	r1, r4
   10954:	bl	10730 <__isoc99_scanf@plt>
   10958:	mov	r0, r4
   1095c:	mov	r1, r6
   10960:	mov	r2, #2
   10964:	bl	1070c <bcmp@plt>
   10968:	cmp	r0, #0
   1096c:	bne	10918 <main@@Base+0x98>
   10970:	mov	r0, #0
   10974:	sub	sp, fp, #28
   10978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001097c <__libc_csu_init@@Base>:
   1097c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10980:	mov	r7, r0
   10984:	ldr	r6, [pc, #72]	; 109d4 <__libc_csu_init@@Base+0x58>
   10988:	ldr	r5, [pc, #72]	; 109d8 <__libc_csu_init@@Base+0x5c>
   1098c:	add	r6, pc, r6
   10990:	add	r5, pc, r5
   10994:	sub	r6, r6, r5
   10998:	mov	r8, r1
   1099c:	mov	r9, r2
   109a0:	bl	106bc <strcmp@plt-0x20>
   109a4:	asrs	r6, r6, #2
   109a8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   109ac:	mov	r4, #0
   109b0:	add	r4, r4, #1
   109b4:	ldr	r3, [r5], #4
   109b8:	mov	r2, r9
   109bc:	mov	r1, r8
   109c0:	mov	r0, r7
   109c4:	blx	r3
   109c8:	cmp	r6, r4
   109cc:	bne	109b0 <__libc_csu_init@@Base+0x34>
   109d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   109d4:	andeq	r0, r1, r8, ror r5
   109d8:	andeq	r0, r1, r0, ror r5

000109dc <__libc_csu_fini@@Base>:
   109dc:	bx	lr

Disassembly of section .fini:

000109e0 <.fini>:
   109e0:	push	{r3, lr}
   109e4:	pop	{r3, pc}
