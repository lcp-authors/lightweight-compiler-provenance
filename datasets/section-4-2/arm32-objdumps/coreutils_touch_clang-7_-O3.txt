
../repos/coreutils/src/touch:     file format elf32-littlearm


Disassembly of section .init:

00011248 <.init>:
   11248:	push	{r3, lr}
   1124c:	bl	11604 <__assert_fail@plt+0x48>
   11250:	pop	{r3, pc}

Disassembly of section .plt:

00011254 <calloc@plt-0x14>:
   11254:	push	{lr}		; (str lr, [sp, #-4]!)
   11258:	ldr	lr, [pc, #4]	; 11264 <calloc@plt-0x4>
   1125c:	add	lr, pc, lr
   11260:	ldr	pc, [lr, #8]!
   11264:	muleq	r2, ip, sp

00011268 <calloc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #139264	; 0x22000
   11270:	ldr	pc, [ip, #3484]!	; 0xd9c

00011274 <fputs_unlocked@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #139264	; 0x22000
   1127c:	ldr	pc, [ip, #3476]!	; 0xd94

00011280 <raise@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #139264	; 0x22000
   11288:	ldr	pc, [ip, #3468]!	; 0xd8c

0001128c <gmtime_r@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #139264	; 0x22000
   11294:	ldr	pc, [ip, #3460]!	; 0xd84

00011298 <utimensat@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #139264	; 0x22000
   112a0:	ldr	pc, [ip, #3452]!	; 0xd7c

000112a4 <strcmp@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #139264	; 0x22000
   112ac:	ldr	pc, [ip, #3444]!	; 0xd74

000112b0 <strtol@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #139264	; 0x22000
   112b8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112bc <mktime@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #139264	; 0x22000
   112c4:	ldr	pc, [ip, #3428]!	; 0xd64

000112c8 <fflush@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #139264	; 0x22000
   112d0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112d4 <free@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #139264	; 0x22000
   112dc:	ldr	pc, [ip, #3412]!	; 0xd54

000112e0 <clock_gettime@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #139264	; 0x22000
   112e8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112ec <_exit@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #139264	; 0x22000
   112f4:	ldr	pc, [ip, #3396]!	; 0xd44

000112f8 <memcpy@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #139264	; 0x22000
   11300:	ldr	pc, [ip, #3388]!	; 0xd3c

00011304 <mbsinit@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #139264	; 0x22000
   1130c:	ldr	pc, [ip, #3380]!	; 0xd34

00011310 <time@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #139264	; 0x22000
   11318:	ldr	pc, [ip, #3372]!	; 0xd2c

0001131c <memcmp@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #139264	; 0x22000
   11324:	ldr	pc, [ip, #3364]!	; 0xd24

00011328 <dcgettext@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #139264	; 0x22000
   11330:	ldr	pc, [ip, #3356]!	; 0xd1c

00011334 <dup2@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #139264	; 0x22000
   1133c:	ldr	pc, [ip, #3348]!	; 0xd14

00011340 <realloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #139264	; 0x22000
   11348:	ldr	pc, [ip, #3340]!	; 0xd0c

0001134c <localtime_r@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #139264	; 0x22000
   11354:	ldr	pc, [ip, #3332]!	; 0xd04

00011358 <textdomain@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #139264	; 0x22000
   11360:	ldr	pc, [ip, #3324]!	; 0xcfc

00011364 <iswprint@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #139264	; 0x22000
   1136c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011370 <tzset@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #139264	; 0x22000
   11378:	ldr	pc, [ip, #3308]!	; 0xcec

0001137c <fwrite@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #139264	; 0x22000
   11384:	ldr	pc, [ip, #3300]!	; 0xce4

00011388 <lseek64@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #139264	; 0x22000
   11390:	ldr	pc, [ip, #3292]!	; 0xcdc

00011394 <__ctype_get_mb_cur_max@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #139264	; 0x22000
   1139c:	ldr	pc, [ip, #3284]!	; 0xcd4

000113a0 <__fpending@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #139264	; 0x22000
   113a8:	ldr	pc, [ip, #3276]!	; 0xccc

000113ac <mbrtowc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #139264	; 0x22000
   113b4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113b8 <error@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #139264	; 0x22000
   113c0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #139264	; 0x22000
   113cc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113d0 <getenv@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #139264	; 0x22000
   113d8:	ldr	pc, [ip, #3244]!	; 0xcac

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #139264	; 0x22000
   113e4:	ldr	pc, [ip, #3236]!	; 0xca4

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #139264	; 0x22000
   113f0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113f4 <strftime@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #139264	; 0x22000
   113fc:	ldr	pc, [ip, #3220]!	; 0xc94

00011400 <__vfprintf_chk@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #139264	; 0x22000
   11408:	ldr	pc, [ip, #3212]!	; 0xc8c

0001140c <__freading@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #139264	; 0x22000
   11414:	ldr	pc, [ip, #3204]!	; 0xc84

00011418 <localtime@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #139264	; 0x22000
   11420:	ldr	pc, [ip, #3196]!	; 0xc7c

00011424 <__ctype_tolower_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #139264	; 0x22000
   1142c:	ldr	pc, [ip, #3188]!	; 0xc74

00011430 <__ctype_toupper_loc@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #139264	; 0x22000
   11438:	ldr	pc, [ip, #3180]!	; 0xc6c

0001143c <__gmon_start__@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #139264	; 0x22000
   11444:	ldr	pc, [ip, #3172]!	; 0xc64

00011448 <getopt_long@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #139264	; 0x22000
   11450:	ldr	pc, [ip, #3164]!	; 0xc5c

00011454 <__ctype_b_loc@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #139264	; 0x22000
   1145c:	ldr	pc, [ip, #3156]!	; 0xc54

00011460 <exit@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #139264	; 0x22000
   11468:	ldr	pc, [ip, #3148]!	; 0xc4c

0001146c <strlen@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #139264	; 0x22000
   11474:	ldr	pc, [ip, #3140]!	; 0xc44

00011478 <strchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #139264	; 0x22000
   11480:	ldr	pc, [ip, #3132]!	; 0xc3c

00011484 <setenv@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #139264	; 0x22000
   1148c:	ldr	pc, [ip, #3124]!	; 0xc34

00011490 <__errno_location@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #139264	; 0x22000
   11498:	ldr	pc, [ip, #3116]!	; 0xc2c

0001149c <__sprintf_chk@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #139264	; 0x22000
   114a4:	ldr	pc, [ip, #3108]!	; 0xc24

000114a8 <__cxa_atexit@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #139264	; 0x22000
   114b0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114b4 <memset@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #139264	; 0x22000
   114bc:	ldr	pc, [ip, #3092]!	; 0xc14

000114c0 <__printf_chk@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #139264	; 0x22000
   114c8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114cc <fileno@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #139264	; 0x22000
   114d4:	ldr	pc, [ip, #3076]!	; 0xc04

000114d8 <__fprintf_chk@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #139264	; 0x22000
   114e0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114e4 <fclose@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #139264	; 0x22000
   114ec:	ldr	pc, [ip, #3060]!	; 0xbf4

000114f0 <fseeko64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #139264	; 0x22000
   114f8:	ldr	pc, [ip, #3052]!	; 0xbec

000114fc <__overflow@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #139264	; 0x22000
   11504:	ldr	pc, [ip, #3044]!	; 0xbe4

00011508 <setlocale@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #139264	; 0x22000
   11510:	ldr	pc, [ip, #3036]!	; 0xbdc

00011514 <strrchr@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #139264	; 0x22000
   1151c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011520 <nl_langinfo@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #139264	; 0x22000
   11528:	ldr	pc, [ip, #3020]!	; 0xbcc

0001152c <fputc@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #139264	; 0x22000
   11534:	ldr	pc, [ip, #3012]!	; 0xbc4

00011538 <timegm@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #139264	; 0x22000
   11540:	ldr	pc, [ip, #3004]!	; 0xbbc

00011544 <futimens@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #139264	; 0x22000
   1154c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011550 <bindtextdomain@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #139264	; 0x22000
   11558:	ldr	pc, [ip, #2988]!	; 0xbac

0001155c <__xstat64@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #139264	; 0x22000
   11564:	ldr	pc, [ip, #2980]!	; 0xba4

00011568 <unsetenv@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #139264	; 0x22000
   11570:	ldr	pc, [ip, #2972]!	; 0xb9c

00011574 <fputs@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #139264	; 0x22000
   1157c:	ldr	pc, [ip, #2964]!	; 0xb94

00011580 <strncmp@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #139264	; 0x22000
   11588:	ldr	pc, [ip, #2956]!	; 0xb8c

0001158c <abort@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #139264	; 0x22000
   11594:	ldr	pc, [ip, #2948]!	; 0xb84

00011598 <close@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #139264	; 0x22000
   115a0:	ldr	pc, [ip, #2940]!	; 0xb7c

000115a4 <__lxstat64@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #139264	; 0x22000
   115ac:	ldr	pc, [ip, #2932]!	; 0xb74

000115b0 <__snprintf_chk@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #139264	; 0x22000
   115b8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115bc <__assert_fail@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #139264	; 0x22000
   115c4:	ldr	pc, [ip, #2916]!	; 0xb64

Disassembly of section .text:

000115c8 <.text>:
   115c8:	mov	fp, #0
   115cc:	mov	lr, #0
   115d0:	pop	{r1}		; (ldr r1, [sp], #4)
   115d4:	mov	r2, sp
   115d8:	push	{r2}		; (str r2, [sp, #-4]!)
   115dc:	push	{r0}		; (str r0, [sp, #-4]!)
   115e0:	ldr	ip, [pc, #16]	; 115f8 <__assert_fail@plt+0x3c>
   115e4:	push	{ip}		; (str ip, [sp, #-4]!)
   115e8:	ldr	r0, [pc, #12]	; 115fc <__assert_fail@plt+0x40>
   115ec:	ldr	r3, [pc, #12]	; 11600 <__assert_fail@plt+0x44>
   115f0:	bl	113e8 <__libc_start_main@plt>
   115f4:	bl	1158c <abort@plt>
   115f8:			; <UNDEFINED> instruction: 0x000211bc
   115fc:	andeq	r1, r1, r8, lsl #19
   11600:	andeq	r1, r2, ip, asr r1
   11604:	ldr	r3, [pc, #20]	; 11620 <__assert_fail@plt+0x64>
   11608:	ldr	r2, [pc, #20]	; 11624 <__assert_fail@plt+0x68>
   1160c:	add	r3, pc, r3
   11610:	ldr	r2, [r3, r2]
   11614:	cmp	r2, #0
   11618:	bxeq	lr
   1161c:	b	1143c <__gmon_start__@plt>
   11620:	andeq	r2, r2, ip, ror #19
   11624:	andeq	r0, r0, ip, lsr #2
   11628:	ldr	r0, [pc, #24]	; 11648 <__assert_fail@plt+0x8c>
   1162c:	ldr	r3, [pc, #24]	; 1164c <__assert_fail@plt+0x90>
   11630:	cmp	r3, r0
   11634:	bxeq	lr
   11638:	ldr	r3, [pc, #16]	; 11650 <__assert_fail@plt+0x94>
   1163c:	cmp	r3, #0
   11640:	bxeq	lr
   11644:	bx	r3
   11648:	andeq	r4, r3, r8, lsl #3
   1164c:	andeq	r4, r3, r8, lsl #3
   11650:	andeq	r0, r0, r0
   11654:	ldr	r0, [pc, #36]	; 11680 <__assert_fail@plt+0xc4>
   11658:	ldr	r1, [pc, #36]	; 11684 <__assert_fail@plt+0xc8>
   1165c:	sub	r1, r1, r0
   11660:	asr	r1, r1, #2
   11664:	add	r1, r1, r1, lsr #31
   11668:	asrs	r1, r1, #1
   1166c:	bxeq	lr
   11670:	ldr	r3, [pc, #16]	; 11688 <__assert_fail@plt+0xcc>
   11674:	cmp	r3, #0
   11678:	bxeq	lr
   1167c:	bx	r3
   11680:	andeq	r4, r3, r8, lsl #3
   11684:	andeq	r4, r3, r8, lsl #3
   11688:	andeq	r0, r0, r0
   1168c:	push	{r4, lr}
   11690:	ldr	r4, [pc, #24]	; 116b0 <__assert_fail@plt+0xf4>
   11694:	ldrb	r3, [r4]
   11698:	cmp	r3, #0
   1169c:	popne	{r4, pc}
   116a0:	bl	11628 <__assert_fail@plt+0x6c>
   116a4:	mov	r3, #1
   116a8:	strb	r3, [r4]
   116ac:	pop	{r4, pc}
   116b0:	andeq	r4, r3, ip, lsr #3
   116b4:	b	11654 <__assert_fail@plt+0x98>
   116b8:	push	{fp, lr}
   116bc:	mov	fp, sp
   116c0:	sub	sp, sp, #56	; 0x38
   116c4:	mov	r4, r0
   116c8:	cmp	r0, #0
   116cc:	bne	11944 <__assert_fail@plt+0x388>
   116d0:	movw	r1, #4619	; 0x120b
   116d4:	mov	r0, #0
   116d8:	mov	r2, #5
   116dc:	movt	r1, #2
   116e0:	bl	11328 <dcgettext@plt>
   116e4:	mov	r1, r0
   116e8:	movw	r0, #16856	; 0x41d8
   116ec:	movt	r0, #3
   116f0:	ldr	r2, [r0]
   116f4:	mov	r0, #1
   116f8:	bl	114c0 <__printf_chk@plt>
   116fc:	movw	r1, #4650	; 0x122a
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #2
   1170c:	bl	11328 <dcgettext@plt>
   11710:	movw	r7, #16804	; 0x41a4
   11714:	movt	r7, #3
   11718:	ldr	r1, [r7]
   1171c:	bl	11274 <fputs_unlocked@plt>
   11720:	movw	r1, #6268	; 0x187c
   11724:	mov	r0, #0
   11728:	mov	r2, #5
   1172c:	movt	r1, #2
   11730:	bl	11328 <dcgettext@plt>
   11734:	ldr	r1, [r7]
   11738:	bl	11274 <fputs_unlocked@plt>
   1173c:	movw	r1, #4942	; 0x134e
   11740:	mov	r0, #0
   11744:	mov	r2, #5
   11748:	movt	r1, #2
   1174c:	bl	11328 <dcgettext@plt>
   11750:	ldr	r1, [r7]
   11754:	bl	11274 <fputs_unlocked@plt>
   11758:	movw	r1, #5153	; 0x1421
   1175c:	mov	r0, #0
   11760:	mov	r2, #5
   11764:	movt	r1, #2
   11768:	bl	11328 <dcgettext@plt>
   1176c:	ldr	r1, [r7]
   11770:	bl	11274 <fputs_unlocked@plt>
   11774:	movw	r1, #5414	; 0x1526
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #2
   11784:	bl	11328 <dcgettext@plt>
   11788:	ldr	r1, [r7]
   1178c:	bl	11274 <fputs_unlocked@plt>
   11790:	movw	r1, #5757	; 0x167d
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #2
   117a0:	bl	11328 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	11274 <fputs_unlocked@plt>
   117ac:	movw	r1, #5802	; 0x16aa
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #2
   117bc:	bl	11328 <dcgettext@plt>
   117c0:	ldr	r1, [r7]
   117c4:	bl	11274 <fputs_unlocked@plt>
   117c8:	movw	r1, #5856	; 0x16e0
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #2
   117d8:	bl	11328 <dcgettext@plt>
   117dc:	ldr	r1, [r7]
   117e0:	bl	11274 <fputs_unlocked@plt>
   117e4:	movw	r0, #7024	; 0x1b70
   117e8:	mov	r2, #48	; 0x30
   117ec:	mov	r6, sp
   117f0:	movw	r5, #5926	; 0x1726
   117f4:	movt	r0, #2
   117f8:	movt	r5, #2
   117fc:	add	r1, r0, #32
   11800:	add	r3, r0, #16
   11804:	vld1.64	{d18-d19}, [r0], r2
   11808:	vld1.64	{d16-d17}, [r1]
   1180c:	vld1.64	{d20-d21}, [r3]
   11810:	add	r1, r6, #32
   11814:	vldr	d22, [r0]
   11818:	add	r0, r6, #16
   1181c:	vst1.64	{d16-d17}, [r1]
   11820:	movw	r1, #6343	; 0x18c7
   11824:	vst1.64	{d20-d21}, [r0]
   11828:	mov	r0, r6
   1182c:	vst1.64	{d18-d19}, [r0], r2
   11830:	movt	r1, #2
   11834:	vstr	d22, [r0]
   11838:	mov	r0, r5
   1183c:	bl	112a4 <strcmp@plt>
   11840:	cmp	r0, #0
   11844:	ldrne	r1, [r6, #8]!
   11848:	cmpne	r1, #0
   1184c:	bne	11838 <__assert_fail@plt+0x27c>
   11850:	ldr	r6, [r6, #4]
   11854:	movw	r1, #6438	; 0x1926
   11858:	mov	r0, #0
   1185c:	mov	r2, #5
   11860:	movt	r1, #2
   11864:	bl	11328 <dcgettext@plt>
   11868:	movw	r2, #5998	; 0x176e
   1186c:	movw	r3, #6461	; 0x193d
   11870:	mov	r1, r0
   11874:	mov	r0, #1
   11878:	movt	r2, #2
   1187c:	movt	r3, #2
   11880:	bl	114c0 <__printf_chk@plt>
   11884:	cmp	r6, #0
   11888:	mov	r0, #5
   1188c:	mov	r1, #0
   11890:	moveq	r6, r5
   11894:	bl	11508 <setlocale@plt>
   11898:	cmp	r0, #0
   1189c:	beq	118d4 <__assert_fail@plt+0x318>
   118a0:	movw	r1, #6501	; 0x1965
   118a4:	mov	r2, #3
   118a8:	movt	r1, #2
   118ac:	bl	11580 <strncmp@plt>
   118b0:	cmp	r0, #0
   118b4:	beq	118d4 <__assert_fail@plt+0x318>
   118b8:	movw	r1, #6505	; 0x1969
   118bc:	mov	r0, #0
   118c0:	mov	r2, #5
   118c4:	movt	r1, #2
   118c8:	bl	11328 <dcgettext@plt>
   118cc:	ldr	r1, [r7]
   118d0:	bl	11274 <fputs_unlocked@plt>
   118d4:	movw	r1, #6576	; 0x19b0
   118d8:	mov	r0, #0
   118dc:	mov	r2, #5
   118e0:	movt	r1, #2
   118e4:	bl	11328 <dcgettext@plt>
   118e8:	movw	r2, #6461	; 0x193d
   118ec:	mov	r1, r0
   118f0:	mov	r0, #1
   118f4:	mov	r3, r5
   118f8:	movt	r2, #2
   118fc:	bl	114c0 <__printf_chk@plt>
   11900:	movw	r1, #6603	; 0x19cb
   11904:	mov	r0, #0
   11908:	mov	r2, #5
   1190c:	movt	r1, #2
   11910:	bl	11328 <dcgettext@plt>
   11914:	movw	r3, #13217	; 0x33a1
   11918:	mov	r1, r0
   1191c:	movw	r0, #6371	; 0x18e3
   11920:	cmp	r6, r5
   11924:	mov	r2, r6
   11928:	movt	r0, #2
   1192c:	movt	r3, #2
   11930:	moveq	r3, r0
   11934:	mov	r0, #1
   11938:	bl	114c0 <__printf_chk@plt>
   1193c:	mov	r0, r4
   11940:	bl	11460 <exit@plt>
   11944:	movw	r0, #16800	; 0x41a0
   11948:	movw	r1, #4580	; 0x11e4
   1194c:	mov	r2, #5
   11950:	movt	r0, #3
   11954:	movt	r1, #2
   11958:	ldr	r5, [r0]
   1195c:	mov	r0, #0
   11960:	bl	11328 <dcgettext@plt>
   11964:	mov	r2, r0
   11968:	movw	r0, #16856	; 0x41d8
   1196c:	mov	r1, #1
   11970:	movt	r0, #3
   11974:	ldr	r3, [r0]
   11978:	mov	r0, r5
   1197c:	bl	114d8 <__fprintf_chk@plt>
   11980:	mov	r0, r4
   11984:	bl	11460 <exit@plt>
   11988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1198c:	add	fp, sp, #28
   11990:	sub	sp, sp, #172	; 0xac
   11994:	str	r0, [sp, #44]	; 0x2c
   11998:	ldr	r0, [r1]
   1199c:	str	r1, [sp, #40]	; 0x28
   119a0:	bl	1ba60 <__assert_fail@plt+0xa4a4>
   119a4:	movw	r1, #13217	; 0x33a1
   119a8:	mov	r0, #6
   119ac:	movt	r1, #2
   119b0:	bl	11508 <setlocale@plt>
   119b4:	movw	r6, #6002	; 0x1772
   119b8:	movw	r1, #5932	; 0x172c
   119bc:	movt	r6, #2
   119c0:	movt	r1, #2
   119c4:	mov	r0, r6
   119c8:	bl	11550 <bindtextdomain@plt>
   119cc:	mov	r0, r6
   119d0:	bl	11358 <textdomain@plt>
   119d4:	movw	r0, #10304	; 0x2840
   119d8:	movt	r0, #1
   119dc:	bl	211c0 <__assert_fail@plt+0xfc04>
   119e0:	movw	r0, #16816	; 0x41b0
   119e4:	mov	sl, #0
   119e8:	movw	r7, #5956	; 0x1744
   119ec:	movw	r6, #6848	; 0x1ac0
   119f0:	movw	r5, #16808	; 0x41a8
   119f4:	movw	r9, #16700	; 0x413c
   119f8:	mov	r4, #1
   119fc:	movt	r0, #3
   11a00:	movt	r7, #2
   11a04:	movt	r6, #2
   11a08:	movt	r5, #3
   11a0c:	movt	r9, #3
   11a10:	str	sl, [r0, #4]
   11a14:	strh	sl, [r0]
   11a18:	mov	r0, #0
   11a1c:	str	r0, [sp, #32]
   11a20:	mov	r0, #0
   11a24:	b	11a2c <__assert_fail@plt+0x470>
   11a28:	ldr	r0, [r5]
   11a2c:	str	r0, [sp, #36]	; 0x24
   11a30:	b	11a40 <__assert_fail@plt+0x484>
   11a34:	movw	r0, #16816	; 0x41b0
   11a38:	movt	r0, #3
   11a3c:	strb	r4, [r0, #2]
   11a40:	ldr	r0, [sp, #44]	; 0x2c
   11a44:	ldr	r1, [sp, #40]	; 0x28
   11a48:	mov	r2, r7
   11a4c:	mov	r3, r6
   11a50:	str	sl, [sp]
   11a54:	bl	11448 <getopt_long@plt>
   11a58:	cmp	r0, #96	; 0x60
   11a5c:	ble	11bd8 <__assert_fail@plt+0x61c>
   11a60:	sub	r1, r0, #97	; 0x61
   11a64:	cmp	r1, #19
   11a68:	bhi	11b60 <__assert_fail@plt+0x5a4>
   11a6c:	add	r0, pc, #0
   11a70:	ldr	pc, [r0, r1, lsl #2]
   11a74:	andeq	r1, r1, r4, asr #21
   11a78:	andeq	r2, r1, r8, asr #4
   11a7c:	andeq	r1, r1, r0, ror #21
   11a80:	andeq	r1, r1, r8, lsr #20
   11a84:	andeq	r2, r1, r8, asr #4
   11a88:	andeq	r1, r1, r0, asr #20
   11a8c:	andeq	r2, r1, r8, asr #4
   11a90:	andeq	r1, r1, r4, lsr sl
   11a94:	andeq	r2, r1, r8, asr #4
   11a98:	andeq	r2, r1, r8, asr #4
   11a9c:	andeq	r2, r1, r8, asr #4
   11aa0:	andeq	r2, r1, r8, asr #4
   11aa4:			; <UNDEFINED> instruction: 0x00011bbc
   11aa8:	andeq	r2, r1, r8, asr #4
   11aac:	andeq	r2, r1, r8, asr #4
   11ab0:	andeq	r2, r1, r8, asr #4
   11ab4:	andeq	r2, r1, r8, asr #4
   11ab8:	strdeq	r1, [r1], -r0
   11abc:	andeq	r2, r1, r8, asr #4
   11ac0:	andeq	r1, r1, ip, lsl #22
   11ac4:	movw	r0, #16816	; 0x41b0
   11ac8:	movt	r0, #3
   11acc:	mov	r1, r0
   11ad0:	ldr	r0, [r0, #4]
   11ad4:	orr	r0, r0, #1
   11ad8:	str	r0, [r1, #4]
   11adc:	b	11a40 <__assert_fail@plt+0x484>
   11ae0:	movw	r0, #16816	; 0x41b0
   11ae4:	movt	r0, #3
   11ae8:	strb	r4, [r0, #1]
   11aec:	b	11a40 <__assert_fail@plt+0x484>
   11af0:	movw	r0, #16816	; 0x41b0
   11af4:	movt	r0, #3
   11af8:	mov	r1, r0
   11afc:	strb	r4, [r0]
   11b00:	ldr	r0, [r5]
   11b04:	str	r0, [r1, #8]
   11b08:	b	11a40 <__assert_fail@plt+0x484>
   11b0c:	mov	r0, r5
   11b10:	movw	r4, #16816	; 0x41b0
   11b14:	ldr	r5, [sp, #36]	; 0x24
   11b18:	mov	r2, #6
   11b1c:	ldr	r1, [r0]
   11b20:	movt	r4, #3
   11b24:	mov	r8, r0
   11b28:	add	r0, r4, #16
   11b2c:	bl	1b67c <__assert_fail@plt+0xa0c0>
   11b30:	cmp	r0, #0
   11b34:	beq	12250 <__assert_fail@plt+0xc94>
   11b38:	ldr	r0, [r4, #16]
   11b3c:	str	sl, [r4, #20]
   11b40:	str	r5, [sp, #36]	; 0x24
   11b44:	str	sl, [r4, #28]
   11b48:	mov	r5, r8
   11b4c:	str	r0, [r4, #24]
   11b50:	mov	r0, #1
   11b54:	mov	r4, #1
   11b58:	str	r0, [sp, #32]
   11b5c:	b	11a40 <__assert_fail@plt+0x484>
   11b60:	cmp	r0, #256	; 0x100
   11b64:	bne	12248 <__assert_fail@plt+0xc8c>
   11b68:	ldr	r0, [r9]
   11b6c:	ldr	r1, [r5]
   11b70:	movw	r8, #6976	; 0x1b40
   11b74:	mov	r2, #4
   11b78:	str	r2, [sp]
   11b7c:	movw	r2, #6996	; 0x1b54
   11b80:	movt	r8, #2
   11b84:	movt	r2, #2
   11b88:	mov	r3, r8
   11b8c:	stmib	sp, {r0, r4}
   11b90:	movw	r0, #5991	; 0x1767
   11b94:	movt	r0, #2
   11b98:	bl	1266c <__assert_fail@plt+0x10b0>
   11b9c:	movw	r1, #16816	; 0x41b0
   11ba0:	ldr	r0, [r8, r0, lsl #2]
   11ba4:	movt	r1, #3
   11ba8:	mov	r2, r1
   11bac:	ldr	r1, [r1, #4]
   11bb0:	orr	r0, r1, r0
   11bb4:	str	r0, [r2, #4]
   11bb8:	b	11a40 <__assert_fail@plt+0x484>
   11bbc:	movw	r0, #16816	; 0x41b0
   11bc0:	movt	r0, #3
   11bc4:	mov	r1, r0
   11bc8:	ldr	r0, [r0, #4]
   11bcc:	orr	r0, r0, #2
   11bd0:	str	r0, [r1, #4]
   11bd4:	b	11a40 <__assert_fail@plt+0x484>
   11bd8:	cmn	r0, #1
   11bdc:	bne	121a4 <__assert_fail@plt+0xbe8>
   11be0:	movw	r6, #16816	; 0x41b0
   11be4:	ldr	r1, [sp, #32]
   11be8:	movt	r6, #3
   11bec:	ldr	r0, [r6, #4]
   11bf0:	cmp	r0, #0
   11bf4:	moveq	r0, #3
   11bf8:	streq	r0, [r6, #4]
   11bfc:	tst	r1, #1
   11c00:	ldrb	r0, [r6]
   11c04:	beq	11c2c <__assert_fail@plt+0x670>
   11c08:	ldr	r1, [sp, #36]	; 0x24
   11c0c:	eor	r0, r0, #1
   11c10:	clz	r1, r1
   11c14:	lsr	r1, r1, #5
   11c18:	tst	r1, r0
   11c1c:	bne	11ef0 <__assert_fail@plt+0x934>
   11c20:	movw	r1, #6078	; 0x17be
   11c24:	movt	r1, #2
   11c28:	b	1228c <__assert_fail@plt+0xcd0>
   11c2c:	cmp	r0, #0
   11c30:	beq	11c5c <__assert_fail@plt+0x6a0>
   11c34:	ldrb	r0, [r6, #2]
   11c38:	ldr	r1, [r6, #8]
   11c3c:	add	r2, sp, #64	; 0x40
   11c40:	cmp	r0, #1
   11c44:	bne	11e30 <__assert_fail@plt+0x874>
   11c48:	mov	r0, #3
   11c4c:	bl	115a4 <__lxstat64@plt>
   11c50:	cmp	r0, #0
   11c54:	beq	11e40 <__assert_fail@plt+0x884>
   11c58:	b	122b0 <__assert_fail@plt+0xcf4>
   11c5c:	ldr	r0, [sp, #36]	; 0x24
   11c60:	cmp	r0, #0
   11c64:	beq	11d14 <__assert_fail@plt+0x758>
   11c68:	ldr	r7, [sp, #36]	; 0x24
   11c6c:	mov	r4, r6
   11c70:	add	r6, sp, #64	; 0x40
   11c74:	mov	r0, r6
   11c78:	bl	12a2c <__assert_fail@plt+0x1470>
   11c7c:	add	r0, r4, #16
   11c80:	mov	r1, r7
   11c84:	mov	r2, r6
   11c88:	mov	r5, r7
   11c8c:	bl	1b51c <__assert_fail@plt+0x9f60>
   11c90:	cmp	r0, #0
   11c94:	beq	122f4 <__assert_fail@plt+0xd38>
   11c98:	ldr	r1, [r4, #4]
   11c9c:	ldr	r0, [r4, #16]
   11ca0:	ldr	r3, [r4, #20]
   11ca4:	mov	r6, r4
   11ca8:	str	r0, [r4, #24]
   11cac:	str	r3, [r4, #28]
   11cb0:	cmp	r1, #3
   11cb4:	ldreq	r1, [sp, #64]	; 0x40
   11cb8:	cmpeq	r1, r0
   11cbc:	bne	11ef0 <__assert_fail@plt+0x934>
   11cc0:	ldr	r1, [r6, #20]
   11cc4:	ldr	r2, [sp, #68]	; 0x44
   11cc8:	cmp	r1, r2
   11ccc:	bne	11ef0 <__assert_fail@plt+0x934>
   11cd0:	eor	r0, r0, #1
   11cd4:	str	r1, [sp, #60]	; 0x3c
   11cd8:	add	r2, sp, #56	; 0x38
   11cdc:	mov	r1, r5
   11ce0:	str	r0, [sp, #56]	; 0x38
   11ce4:	add	r0, sp, #48	; 0x30
   11ce8:	bl	1b51c <__assert_fail@plt+0x9f60>
   11cec:	cmp	r0, #0
   11cf0:	beq	122f4 <__assert_fail@plt+0xd38>
   11cf4:	ldr	r0, [sp, #56]	; 0x38
   11cf8:	ldr	r1, [sp, #48]	; 0x30
   11cfc:	cmp	r1, r0
   11d00:	bne	11ef0 <__assert_fail@plt+0x934>
   11d04:	ldr	r0, [sp, #60]	; 0x3c
   11d08:	ldr	r1, [sp, #52]	; 0x34
   11d0c:	cmp	r1, r0
   11d10:	bne	11ef0 <__assert_fail@plt+0x934>
   11d14:	movw	r5, #16792	; 0x4198
   11d18:	ldr	r1, [sp, #44]	; 0x2c
   11d1c:	movt	r5, #3
   11d20:	ldr	r0, [r5]
   11d24:	sub	r0, r1, r0
   11d28:	cmp	r0, #2
   11d2c:	blt	11ec4 <__assert_fail@plt+0x908>
   11d30:	bl	1b9fc <__assert_fail@plt+0xa440>
   11d34:	movw	r1, #3503	; 0xdaf
   11d38:	movt	r1, #3
   11d3c:	cmp	r0, r1
   11d40:	bgt	11ec4 <__assert_fail@plt+0x908>
   11d44:	ldr	r0, [r5]
   11d48:	ldr	r1, [sp, #40]	; 0x28
   11d4c:	mov	r2, #9
   11d50:	ldr	r1, [r1, r0, lsl #2]
   11d54:	movw	r0, #16816	; 0x41b0
   11d58:	movt	r0, #3
   11d5c:	add	r6, r0, #16
   11d60:	mov	r0, r6
   11d64:	bl	1b67c <__assert_fail@plt+0xa0c0>
   11d68:	cmp	r0, #0
   11d6c:	beq	11ec4 <__assert_fail@plt+0x908>
   11d70:	movw	r1, #16816	; 0x41b0
   11d74:	mov	r0, #0
   11d78:	movt	r1, #3
   11d7c:	mov	r2, r1
   11d80:	ldr	r1, [r1, #16]
   11d84:	str	r0, [r2, #20]
   11d88:	str	r0, [r2, #28]
   11d8c:	movw	r0, #6156	; 0x180c
   11d90:	movt	r0, #2
   11d94:	str	r1, [r2, #24]
   11d98:	bl	113d0 <getenv@plt>
   11d9c:	cmp	r0, #0
   11da0:	bne	11e18 <__assert_fail@plt+0x85c>
   11da4:	mov	r0, r6
   11da8:	bl	11418 <localtime@plt>
   11dac:	cmp	r0, #0
   11db0:	beq	11e18 <__assert_fail@plt+0x85c>
   11db4:	movw	r1, #6172	; 0x181c
   11db8:	mov	r6, r0
   11dbc:	mov	r0, #0
   11dc0:	mov	r2, #5
   11dc4:	movt	r1, #2
   11dc8:	bl	11328 <dcgettext@plt>
   11dcc:	mov	ip, r0
   11dd0:	ldr	r0, [r5]
   11dd4:	ldr	r1, [sp, #40]	; 0x28
   11dd8:	ldr	lr, [r6]
   11ddc:	ldr	r3, [r1, r0, lsl #2]
   11de0:	ldmib	r6, {r1, r7}
   11de4:	ldr	r2, [r6, #16]
   11de8:	ldr	r4, [r6, #12]
   11dec:	ldr	r6, [r6, #20]
   11df0:	movw	r0, #1900	; 0x76c
   11df4:	add	r2, r2, #1
   11df8:	add	r0, r6, r0
   11dfc:	stm	sp, {r0, r2, r4, r7}
   11e00:	str	r1, [sp, #16]
   11e04:	mov	r0, #0
   11e08:	mov	r1, #0
   11e0c:	mov	r2, ip
   11e10:	str	lr, [sp, #20]
   11e14:	bl	113b8 <error@plt>
   11e18:	ldr	r0, [r5]
   11e1c:	movw	r6, #16816	; 0x41b0
   11e20:	movt	r6, #3
   11e24:	add	r0, r0, #1
   11e28:	str	r0, [r5]
   11e2c:	b	11ef0 <__assert_fail@plt+0x934>
   11e30:	mov	r0, #3
   11e34:	bl	1155c <__xstat64@plt>
   11e38:	cmp	r0, #0
   11e3c:	bne	122b0 <__assert_fail@plt+0xcf4>
   11e40:	add	r0, sp, #64	; 0x40
   11e44:	ldr	r1, [sp, #36]	; 0x24
   11e48:	add	r0, r0, #72	; 0x48
   11e4c:	vld1.64	{d16-d17}, [r0]
   11e50:	add	r0, r6, #16
   11e54:	cmp	r1, #0
   11e58:	vst1.64	{d16-d17}, [r0 :128]
   11e5c:	beq	11ef0 <__assert_fail@plt+0x934>
   11e60:	ldr	r1, [r6, #4]
   11e64:	tst	r1, #1
   11e68:	beq	11e84 <__assert_fail@plt+0x8c8>
   11e6c:	ldr	r1, [sp, #36]	; 0x24
   11e70:	mov	r2, r0
   11e74:	bl	1b51c <__assert_fail@plt+0x9f60>
   11e78:	cmp	r0, #0
   11e7c:	beq	11ea4 <__assert_fail@plt+0x8e8>
   11e80:	ldr	r1, [r6, #4]
   11e84:	tst	r1, #2
   11e88:	beq	11ef0 <__assert_fail@plt+0x934>
   11e8c:	ldr	r1, [sp, #36]	; 0x24
   11e90:	add	r0, r6, #24
   11e94:	mov	r2, r0
   11e98:	bl	1b51c <__assert_fail@plt+0x9f60>
   11e9c:	cmp	r0, #0
   11ea0:	bne	11ef0 <__assert_fail@plt+0x934>
   11ea4:	movw	r1, #5968	; 0x1750
   11ea8:	mov	r0, #0
   11eac:	mov	r2, #5
   11eb0:	movt	r1, #2
   11eb4:	bl	11328 <dcgettext@plt>
   11eb8:	mov	r4, r0
   11ebc:	ldr	r0, [sp, #36]	; 0x24
   11ec0:	b	1226c <__assert_fail@plt+0xcb0>
   11ec4:	movw	r6, #16816	; 0x41b0
   11ec8:	movt	r6, #3
   11ecc:	ldr	r0, [r6, #4]
   11ed0:	cmp	r0, #3
   11ed4:	bne	11ee4 <__assert_fail@plt+0x928>
   11ed8:	mov	r0, #1
   11edc:	strb	r0, [r6, #3]
   11ee0:	b	11ef0 <__assert_fail@plt+0x934>
   11ee4:	mvn	r0, #-1073741824	; 0xc0000000
   11ee8:	str	r0, [r6, #28]
   11eec:	str	r0, [r6, #20]
   11ef0:	movw	r0, #16792	; 0x4198
   11ef4:	movt	r0, #3
   11ef8:	ldr	r1, [r0]
   11efc:	ldr	r0, [sp, #44]	; 0x2c
   11f00:	cmp	r1, r0
   11f04:	beq	12284 <__assert_fail@plt+0xcc8>
   11f08:	mov	r0, #0
   11f0c:	bge	1219c <__assert_fail@plt+0xbe0>
   11f10:	add	r0, r6, #20
   11f14:	mov	r5, #1
   11f18:	str	r0, [sp, #32]
   11f1c:	add	r0, r6, #28
   11f20:	str	r0, [sp, #28]
   11f24:	add	r0, r6, #16
   11f28:	str	r0, [sp, #36]	; 0x24
   11f2c:	ldr	r0, [sp, #40]	; 0x28
   11f30:	ldr	r9, [r0, r1, lsl #2]
   11f34:	movw	r1, #13308	; 0x33fc
   11f38:	movt	r1, #2
   11f3c:	mov	r0, r9
   11f40:	bl	112a4 <strcmp@plt>
   11f44:	cmp	r0, #0
   11f48:	mov	r8, #0
   11f4c:	mov	sl, #1
   11f50:	beq	11fac <__assert_fail@plt+0x9f0>
   11f54:	ldrb	r0, [r6, #1]
   11f58:	mvn	sl, #0
   11f5c:	cmp	r0, #0
   11f60:	beq	11f78 <__assert_fail@plt+0x9bc>
   11f64:	mov	r8, #0
   11f68:	ldr	r0, [r6, #4]
   11f6c:	cmp	r0, #1
   11f70:	bne	11fb8 <__assert_fail@plt+0x9fc>
   11f74:	b	11fe4 <__assert_fail@plt+0xa28>
   11f78:	ldrb	r0, [r6, #2]
   11f7c:	mov	r8, #0
   11f80:	cmp	r0, #0
   11f84:	bne	11fac <__assert_fail@plt+0x9f0>
   11f88:	mov	r0, #0
   11f8c:	mov	r1, r9
   11f90:	movw	r2, #2369	; 0x941
   11f94:	movw	r3, #438	; 0x1b6
   11f98:	mov	r8, #0
   11f9c:	bl	1292c <__assert_fail@plt+0x1370>
   11fa0:	mov	sl, r0
   11fa4:	cmn	r0, #1
   11fa8:	ble	11fd0 <__assert_fail@plt+0xa14>
   11fac:	ldr	r0, [r6, #4]
   11fb0:	cmp	r0, #1
   11fb4:	beq	11fe4 <__assert_fail@plt+0xa28>
   11fb8:	ldr	r1, [sp, #32]
   11fbc:	cmp	r0, #2
   11fc0:	beq	11fe8 <__assert_fail@plt+0xa2c>
   11fc4:	cmp	r0, #3
   11fc8:	beq	11ff0 <__assert_fail@plt+0xa34>
   11fcc:	b	12218 <__assert_fail@plt+0xc5c>
   11fd0:	bl	11490 <__errno_location@plt>
   11fd4:	ldr	r8, [r0]
   11fd8:	ldr	r0, [r6, #4]
   11fdc:	cmp	r0, #1
   11fe0:	bne	11fb8 <__assert_fail@plt+0x9fc>
   11fe4:	ldr	r1, [sp, #28]
   11fe8:	mvn	r0, #-1073741823	; 0xc0000001
   11fec:	str	r0, [r1]
   11ff0:	ldrb	r0, [r6, #2]
   11ff4:	ldrb	r1, [r6, #3]
   11ff8:	ldr	r3, [sp, #36]	; 0x24
   11ffc:	cmp	r0, #0
   12000:	movwne	r0, #256	; 0x100
   12004:	subs	r2, sl, #1
   12008:	movne	r2, r9
   1200c:	cmp	r1, #0
   12010:	str	r0, [sp]
   12014:	mov	r0, sl
   12018:	mvn	r1, #99	; 0x63
   1201c:	movwne	r3, #0
   12020:	bl	12994 <__assert_fail@plt+0x13d8>
   12024:	cmp	r0, #0
   12028:	beq	12058 <__assert_fail@plt+0xa9c>
   1202c:	bl	11490 <__errno_location@plt>
   12030:	ldr	r7, [r0]
   12034:	cmp	sl, #0
   12038:	beq	12064 <__assert_fail@plt+0xaa8>
   1203c:	cmp	sl, #1
   12040:	cmpeq	r7, #9
   12044:	beq	12090 <__assert_fail@plt+0xad4>
   12048:	cmp	r7, #0
   1204c:	bne	120a0 <__assert_fail@plt+0xae4>
   12050:	mov	r4, #1
   12054:	b	12170 <__assert_fail@plt+0xbb4>
   12058:	mov	r7, #0
   1205c:	cmp	sl, #0
   12060:	bne	1203c <__assert_fail@plt+0xa80>
   12064:	mov	r0, #0
   12068:	bl	11598 <close@plt>
   1206c:	cmp	r0, #0
   12070:	beq	12048 <__assert_fail@plt+0xa8c>
   12074:	bl	11490 <__errno_location@plt>
   12078:	ldr	r7, [r0]
   1207c:	movw	r1, #6790	; 0x1a86
   12080:	mov	r4, #0
   12084:	mov	r0, #0
   12088:	movt	r1, #2
   1208c:	b	120d4 <__assert_fail@plt+0xb18>
   12090:	ldrb	r0, [r6, #1]
   12094:	mov	r4, #1
   12098:	cmp	r0, #0
   1209c:	bne	12170 <__assert_fail@plt+0xbb4>
   120a0:	cmp	r8, #0
   120a4:	cmpne	r8, #21
   120a8:	bne	120fc <__assert_fail@plt+0xb40>
   120ac:	cmp	r7, #2
   120b0:	bne	120c4 <__assert_fail@plt+0xb08>
   120b4:	ldrb	r0, [r6, #1]
   120b8:	mov	r4, #1
   120bc:	cmp	r0, #0
   120c0:	bne	12170 <__assert_fail@plt+0xbb4>
   120c4:	movw	r1, #6825	; 0x1aa9
   120c8:	mov	r4, #0
   120cc:	mov	r0, #0
   120d0:	movt	r1, #2
   120d4:	mov	r2, #5
   120d8:	bl	11328 <dcgettext@plt>
   120dc:	mov	r6, r0
   120e0:	mov	r0, #4
   120e4:	mov	r1, r9
   120e8:	bl	1d4b4 <__assert_fail@plt+0xbef8>
   120ec:	mov	r3, r0
   120f0:	mov	r0, #0
   120f4:	mov	r1, r7
   120f8:	b	12160 <__assert_fail@plt+0xba4>
   120fc:	cmp	r8, #22
   12100:	bne	1212c <__assert_fail@plt+0xb70>
   12104:	mov	r0, #3
   12108:	mov	r1, r9
   1210c:	add	r2, sp, #64	; 0x40
   12110:	bl	1155c <__xstat64@plt>
   12114:	cmp	r0, #0
   12118:	bne	1212c <__assert_fail@plt+0xb70>
   1211c:	ldr	r0, [sp, #80]	; 0x50
   12120:	and	r0, r0, #61440	; 0xf000
   12124:	cmp	r0, #16384	; 0x4000
   12128:	beq	120ac <__assert_fail@plt+0xaf0>
   1212c:	movw	r1, #6809	; 0x1a99
   12130:	mov	r0, #0
   12134:	mov	r2, #5
   12138:	mov	r4, #0
   1213c:	movt	r1, #2
   12140:	bl	11328 <dcgettext@plt>
   12144:	mov	r6, r0
   12148:	mov	r0, #4
   1214c:	mov	r1, r9
   12150:	bl	1d4b4 <__assert_fail@plt+0xbef8>
   12154:	mov	r3, r0
   12158:	mov	r0, #0
   1215c:	mov	r1, r8
   12160:	mov	r2, r6
   12164:	movw	r6, #16816	; 0x41b0
   12168:	movt	r6, #3
   1216c:	bl	113b8 <error@plt>
   12170:	movw	r0, #16792	; 0x4198
   12174:	and	r5, r5, r4
   12178:	movt	r0, #3
   1217c:	mov	r2, r0
   12180:	ldr	r0, [r0]
   12184:	add	r1, r0, #1
   12188:	ldr	r0, [sp, #44]	; 0x2c
   1218c:	str	r1, [r2]
   12190:	cmp	r1, r0
   12194:	blt	11f2c <__assert_fail@plt+0x970>
   12198:	eor	r0, r5, #1
   1219c:	sub	sp, fp, #28
   121a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121a4:	cmn	r0, #3
   121a8:	bne	12238 <__assert_fail@plt+0xc7c>
   121ac:	movw	r0, #16696	; 0x4138
   121b0:	movw	r2, #6066	; 0x17b2
   121b4:	movw	r7, #6050	; 0x17a2
   121b8:	movw	r6, #6038	; 0x1796
   121bc:	movw	r5, #6023	; 0x1787
   121c0:	movw	r4, #6012	; 0x177c
   121c4:	mov	r1, #0
   121c8:	movt	r0, #3
   121cc:	movt	r2, #2
   121d0:	movt	r7, #2
   121d4:	movt	r6, #2
   121d8:	movt	r5, #2
   121dc:	movt	r4, #2
   121e0:	ldr	r3, [r0]
   121e4:	movw	r0, #16804	; 0x41a4
   121e8:	movt	r0, #3
   121ec:	ldr	r0, [r0]
   121f0:	stm	sp, {r4, r5, r6, r7}
   121f4:	str	r2, [sp, #16]
   121f8:	movw	r2, #5998	; 0x176e
   121fc:	str	r1, [sp, #20]
   12200:	movw	r1, #5926	; 0x1726
   12204:	movt	r1, #2
   12208:	movt	r2, #2
   1220c:	bl	1e79c <__assert_fail@plt+0xd1e0>
   12210:	mov	r0, #0
   12214:	bl	11460 <exit@plt>
   12218:	movw	r0, #6727	; 0x1a47
   1221c:	movw	r1, #6752	; 0x1a60
   12220:	movw	r3, #6764	; 0x1a6c
   12224:	mov	r2, #147	; 0x93
   12228:	movt	r0, #2
   1222c:	movt	r1, #2
   12230:	movt	r3, #2
   12234:	bl	115bc <__assert_fail@plt>
   12238:	cmn	r0, #2
   1223c:	bne	12248 <__assert_fail@plt+0xc8c>
   12240:	mov	r0, #0
   12244:	bl	116b8 <__assert_fail@plt+0xfc>
   12248:	mov	r0, #1
   1224c:	bl	116b8 <__assert_fail@plt+0xfc>
   12250:	movw	r1, #5968	; 0x1750
   12254:	mov	r0, #0
   12258:	mov	r2, #5
   1225c:	movt	r1, #2
   12260:	bl	11328 <dcgettext@plt>
   12264:	mov	r4, r0
   12268:	ldr	r0, [r8]
   1226c:	bl	1d9dc <__assert_fail@plt+0xc420>
   12270:	mov	r3, r0
   12274:	mov	r0, #1
   12278:	mov	r1, #0
   1227c:	mov	r2, r4
   12280:	bl	113b8 <error@plt>
   12284:	movw	r1, #6247	; 0x1867
   12288:	movt	r1, #2
   1228c:	mov	r0, #0
   12290:	mov	r2, #5
   12294:	bl	11328 <dcgettext@plt>
   12298:	mov	r2, r0
   1229c:	mov	r0, #0
   122a0:	mov	r1, #0
   122a4:	bl	113b8 <error@plt>
   122a8:	mov	r0, #1
   122ac:	bl	116b8 <__assert_fail@plt+0xfc>
   122b0:	bl	11490 <__errno_location@plt>
   122b4:	mov	r4, r6
   122b8:	ldr	r6, [r0]
   122bc:	movw	r1, #6125	; 0x17ed
   122c0:	mov	r0, #0
   122c4:	mov	r2, #5
   122c8:	movt	r1, #2
   122cc:	bl	11328 <dcgettext@plt>
   122d0:	ldr	r1, [r4, #8]
   122d4:	mov	r5, r0
   122d8:	mov	r0, #4
   122dc:	bl	1d4b4 <__assert_fail@plt+0xbef8>
   122e0:	mov	r3, r0
   122e4:	mov	r0, #1
   122e8:	mov	r1, r6
   122ec:	mov	r2, r5
   122f0:	bl	113b8 <error@plt>
   122f4:	movw	r1, #5968	; 0x1750
   122f8:	mov	r0, #0
   122fc:	mov	r2, #5
   12300:	movt	r1, #2
   12304:	bl	11328 <dcgettext@plt>
   12308:	mov	r4, r0
   1230c:	mov	r0, r5
   12310:	b	1226c <__assert_fail@plt+0xcb0>
   12314:	mov	r0, #1
   12318:	b	116b8 <__assert_fail@plt+0xfc>
   1231c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12320:	add	fp, sp, #28
   12324:	sub	sp, sp, #12
   12328:	mov	r4, r3
   1232c:	mov	r9, r2
   12330:	mov	r7, r1
   12334:	mov	r8, r0
   12338:	bl	1146c <strlen@plt>
   1233c:	ldr	r6, [r7]
   12340:	cmp	r6, #0
   12344:	beq	123f0 <__assert_fail@plt+0xe34>
   12348:	mov	r5, r0
   1234c:	cmp	r9, #0
   12350:	beq	12400 <__assert_fail@plt+0xe44>
   12354:	add	r0, r7, #4
   12358:	mvn	sl, #0
   1235c:	mov	r7, #0
   12360:	str	r9, [sp]
   12364:	str	r0, [sp, #8]
   12368:	mov	r0, #0
   1236c:	str	r0, [sp, #4]
   12370:	mov	r0, r9
   12374:	mov	r0, r6
   12378:	mov	r1, r8
   1237c:	mov	r2, r5
   12380:	bl	11580 <strncmp@plt>
   12384:	cmp	r0, #0
   12388:	bne	123d4 <__assert_fail@plt+0xe18>
   1238c:	mov	r0, r6
   12390:	bl	1146c <strlen@plt>
   12394:	cmp	r0, r5
   12398:	beq	123f4 <__assert_fail@plt+0xe38>
   1239c:	cmn	sl, #1
   123a0:	beq	123d0 <__assert_fail@plt+0xe14>
   123a4:	ldr	r0, [sp]
   123a8:	mov	r1, r9
   123ac:	mov	r2, r4
   123b0:	mla	r0, sl, r4, r0
   123b4:	bl	1131c <memcmp@plt>
   123b8:	ldr	r1, [sp, #4]
   123bc:	cmp	r0, #0
   123c0:	movwne	r0, #1
   123c4:	orr	r1, r1, r0
   123c8:	str	r1, [sp, #4]
   123cc:	b	123d4 <__assert_fail@plt+0xe18>
   123d0:	mov	sl, r7
   123d4:	ldr	r0, [sp, #8]
   123d8:	add	r9, r9, r4
   123dc:	ldr	r6, [r0, r7, lsl #2]
   123e0:	add	r7, r7, #1
   123e4:	cmp	r6, #0
   123e8:	bne	12374 <__assert_fail@plt+0xdb8>
   123ec:	b	12468 <__assert_fail@plt+0xeac>
   123f0:	mvn	r7, #0
   123f4:	mov	r0, r7
   123f8:	sub	sp, fp, #28
   123fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12400:	add	r4, r7, #4
   12404:	mov	r0, #0
   12408:	mvn	sl, #0
   1240c:	mov	r7, #0
   12410:	str	r0, [sp, #4]
   12414:	mov	r0, r6
   12418:	mov	r1, r8
   1241c:	mov	r2, r5
   12420:	bl	11580 <strncmp@plt>
   12424:	cmp	r0, #0
   12428:	bne	12458 <__assert_fail@plt+0xe9c>
   1242c:	mov	r0, r6
   12430:	bl	1146c <strlen@plt>
   12434:	cmp	r0, r5
   12438:	beq	123f4 <__assert_fail@plt+0xe38>
   1243c:	ldr	r1, [sp, #4]
   12440:	cmn	sl, #1
   12444:	add	r0, sl, #1
   12448:	movwne	r0, #1
   1244c:	moveq	sl, r7
   12450:	orr	r1, r1, r0
   12454:	str	r1, [sp, #4]
   12458:	ldr	r6, [r4, r7, lsl #2]
   1245c:	add	r7, r7, #1
   12460:	cmp	r6, #0
   12464:	bne	12414 <__assert_fail@plt+0xe58>
   12468:	ldr	r0, [sp, #4]
   1246c:	tst	r0, #1
   12470:	mvnne	sl, #1
   12474:	mov	r0, sl
   12478:	sub	sp, fp, #28
   1247c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12480:	push	{r4, r5, r6, r7, fp, lr}
   12484:	add	fp, sp, #16
   12488:	mov	r5, r0
   1248c:	ldr	r0, [r1]
   12490:	mvn	r4, #0
   12494:	cmp	r0, #0
   12498:	beq	124c8 <__assert_fail@plt+0xf0c>
   1249c:	add	r7, r1, #4
   124a0:	mov	r6, #0
   124a4:	mov	r1, r5
   124a8:	bl	112a4 <strcmp@plt>
   124ac:	cmp	r0, #0
   124b0:	moveq	r0, r6
   124b4:	popeq	{r4, r5, r6, r7, fp, pc}
   124b8:	ldr	r0, [r7, r6, lsl #2]
   124bc:	add	r6, r6, #1
   124c0:	cmp	r0, #0
   124c4:	bne	124a4 <__assert_fail@plt+0xee8>
   124c8:	mov	r0, r4
   124cc:	pop	{r4, r5, r6, r7, fp, pc}
   124d0:	push	{r4, r5, r6, sl, fp, lr}
   124d4:	add	fp, sp, #16
   124d8:	sub	sp, sp, #8
   124dc:	mov	r4, r1
   124e0:	movw	r1, #7122	; 0x1bd2
   124e4:	mov	r5, r0
   124e8:	movw	r0, #7095	; 0x1bb7
   124ec:	cmn	r2, #1
   124f0:	mov	r2, #5
   124f4:	movt	r0, #2
   124f8:	movt	r1, #2
   124fc:	moveq	r1, r0
   12500:	mov	r0, #0
   12504:	bl	11328 <dcgettext@plt>
   12508:	mov	r6, r0
   1250c:	mov	r0, #0
   12510:	mov	r1, #8
   12514:	mov	r2, r4
   12518:	bl	1d40c <__assert_fail@plt+0xbe50>
   1251c:	mov	r4, r0
   12520:	mov	r0, #1
   12524:	mov	r1, r5
   12528:	bl	1d9cc <__assert_fail@plt+0xc410>
   1252c:	str	r0, [sp]
   12530:	mov	r0, #0
   12534:	mov	r1, #0
   12538:	mov	r2, r6
   1253c:	mov	r3, r4
   12540:	bl	113b8 <error@plt>
   12544:	sub	sp, fp, #16
   12548:	pop	{r4, r5, r6, sl, fp, pc}
   1254c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12550:	add	fp, sp, #28
   12554:	sub	sp, sp, #4
   12558:	mov	r5, r1
   1255c:	movw	r1, #7151	; 0x1bef
   12560:	mov	sl, r2
   12564:	mov	r7, r0
   12568:	mov	r0, #0
   1256c:	mov	r2, #5
   12570:	mov	r8, #0
   12574:	movt	r1, #2
   12578:	bl	11328 <dcgettext@plt>
   1257c:	movw	r4, #16800	; 0x41a0
   12580:	movt	r4, #3
   12584:	ldr	r1, [r4]
   12588:	bl	11274 <fputs_unlocked@plt>
   1258c:	ldr	r6, [r7]
   12590:	cmp	r6, #0
   12594:	beq	12634 <__assert_fail@plt+0x1078>
   12598:	add	r9, r7, #4
   1259c:	mov	r7, #0
   125a0:	str	sl, [sp]
   125a4:	cmp	r8, #0
   125a8:	beq	125c4 <__assert_fail@plt+0x1008>
   125ac:	mov	r0, r7
   125b0:	mov	r1, r5
   125b4:	mov	r2, sl
   125b8:	bl	1131c <memcmp@plt>
   125bc:	cmp	r0, #0
   125c0:	beq	125f0 <__assert_fail@plt+0x1034>
   125c4:	ldr	r7, [r4]
   125c8:	mov	r0, r6
   125cc:	bl	1d9dc <__assert_fail@plt+0xc420>
   125d0:	movw	r2, #7172	; 0x1c04
   125d4:	mov	r3, r0
   125d8:	mov	r0, r7
   125dc:	mov	r1, #1
   125e0:	movt	r2, #2
   125e4:	bl	114d8 <__fprintf_chk@plt>
   125e8:	mov	r7, r5
   125ec:	b	12620 <__assert_fail@plt+0x1064>
   125f0:	mov	sl, r9
   125f4:	ldr	r9, [r4]
   125f8:	mov	r0, r6
   125fc:	bl	1d9dc <__assert_fail@plt+0xc420>
   12600:	mov	r3, r0
   12604:	mov	r0, r9
   12608:	mov	r9, sl
   1260c:	ldr	sl, [sp]
   12610:	movw	r2, #7180	; 0x1c0c
   12614:	mov	r1, #1
   12618:	movt	r2, #2
   1261c:	bl	114d8 <__fprintf_chk@plt>
   12620:	ldr	r6, [r9, -r8, lsl #2]
   12624:	add	r5, r5, sl
   12628:	sub	r8, r8, #1
   1262c:	cmp	r6, #0
   12630:	bne	125a4 <__assert_fail@plt+0xfe8>
   12634:	ldr	r0, [r4]
   12638:	ldr	r1, [r0, #20]
   1263c:	ldr	r2, [r0, #24]
   12640:	cmp	r1, r2
   12644:	addcc	r2, r1, #1
   12648:	strcc	r2, [r0, #20]
   1264c:	movcc	r0, #10
   12650:	strbcc	r0, [r1]
   12654:	subcc	sp, fp, #28
   12658:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1265c:	mov	r1, #10
   12660:	sub	sp, fp, #28
   12664:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12668:	b	114fc <__overflow@plt>
   1266c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12670:	add	fp, sp, #28
   12674:	sub	sp, sp, #12
   12678:	mov	sl, r0
   1267c:	ldr	r0, [fp, #16]
   12680:	ldr	r9, [fp, #8]
   12684:	mov	r5, r3
   12688:	mov	r8, r2
   1268c:	mov	r6, r1
   12690:	cmp	r0, #0
   12694:	beq	126c4 <__assert_fail@plt+0x1108>
   12698:	mov	r0, r6
   1269c:	mov	r1, r8
   126a0:	mov	r2, r5
   126a4:	mov	r3, r9
   126a8:	bl	1231c <__assert_fail@plt+0xd60>
   126ac:	mov	r4, r0
   126b0:	cmn	r4, #1
   126b4:	ble	12714 <__assert_fail@plt+0x1158>
   126b8:	mov	r0, r4
   126bc:	sub	sp, fp, #28
   126c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126c4:	ldr	r0, [r8]
   126c8:	movw	r7, #7095	; 0x1bb7
   126cc:	str	r5, [sp, #8]
   126d0:	movt	r7, #2
   126d4:	cmp	r0, #0
   126d8:	beq	1272c <__assert_fail@plt+0x1170>
   126dc:	add	r5, r8, #4
   126e0:	mov	r4, #0
   126e4:	mov	r1, r6
   126e8:	bl	112a4 <strcmp@plt>
   126ec:	cmp	r0, #0
   126f0:	beq	12708 <__assert_fail@plt+0x114c>
   126f4:	ldr	r0, [r5, r4, lsl #2]
   126f8:	add	r4, r4, #1
   126fc:	cmp	r0, #0
   12700:	bne	126e4 <__assert_fail@plt+0x1128>
   12704:	b	1272c <__assert_fail@plt+0x1170>
   12708:	ldr	r5, [sp, #8]
   1270c:	cmn	r4, #1
   12710:	bgt	126b8 <__assert_fail@plt+0x10fc>
   12714:	movw	r0, #7095	; 0x1bb7
   12718:	movw	r7, #7122	; 0x1bd2
   1271c:	str	r5, [sp, #8]
   12720:	movt	r0, #2
   12724:	movt	r7, #2
   12728:	moveq	r7, r0
   1272c:	ldr	r5, [fp, #12]
   12730:	mov	r0, #0
   12734:	mov	r1, r7
   12738:	mov	r2, #5
   1273c:	bl	11328 <dcgettext@plt>
   12740:	mov	r4, r0
   12744:	mov	r0, #0
   12748:	mov	r1, #8
   1274c:	mov	r2, r6
   12750:	bl	1d40c <__assert_fail@plt+0xbe50>
   12754:	mov	r6, r0
   12758:	mov	r0, #1
   1275c:	mov	r1, sl
   12760:	bl	1d9cc <__assert_fail@plt+0xc410>
   12764:	str	r0, [sp]
   12768:	mov	r0, #0
   1276c:	mov	r1, #0
   12770:	mov	r2, r4
   12774:	mov	r3, r6
   12778:	bl	113b8 <error@plt>
   1277c:	ldr	r1, [sp, #8]
   12780:	mov	r0, r8
   12784:	mov	r2, r9
   12788:	bl	1254c <__assert_fail@plt+0xf90>
   1278c:	blx	r5
   12790:	mvn	r4, #0
   12794:	mov	r0, r4
   12798:	sub	sp, fp, #28
   1279c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127a0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   127a4:	add	fp, sp, #24
   127a8:	ldr	r6, [r1]
   127ac:	cmp	r6, #0
   127b0:	beq	12814 <__assert_fail@plt+0x1258>
   127b4:	mov	r8, r1
   127b8:	mov	r7, r2
   127bc:	mov	r1, r2
   127c0:	mov	r2, r3
   127c4:	mov	r4, r3
   127c8:	mov	r9, r0
   127cc:	bl	1131c <memcmp@plt>
   127d0:	cmp	r0, #0
   127d4:	beq	1280c <__assert_fail@plt+0x1250>
   127d8:	add	r7, r7, r4
   127dc:	add	r5, r8, #4
   127e0:	ldr	r6, [r5]
   127e4:	cmp	r6, #0
   127e8:	beq	12814 <__assert_fail@plt+0x1258>
   127ec:	mov	r0, r9
   127f0:	mov	r1, r7
   127f4:	mov	r2, r4
   127f8:	bl	1131c <memcmp@plt>
   127fc:	add	r7, r7, r4
   12800:	add	r5, r5, #4
   12804:	cmp	r0, #0
   12808:	bne	127e0 <__assert_fail@plt+0x1224>
   1280c:	mov	r0, r6
   12810:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12814:	mov	r6, #0
   12818:	mov	r0, r6
   1281c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12820:	movw	r1, #16848	; 0x41d0
   12824:	movt	r1, #3
   12828:	str	r0, [r1, #4]
   1282c:	bx	lr
   12830:	movw	r1, #16848	; 0x41d0
   12834:	movt	r1, #3
   12838:	strb	r0, [r1]
   1283c:	bx	lr
   12840:	push	{r4, r5, r6, sl, fp, lr}
   12844:	add	fp, sp, #16
   12848:	sub	sp, sp, #8
   1284c:	movw	r0, #16804	; 0x41a4
   12850:	movt	r0, #3
   12854:	ldr	r0, [r0]
   12858:	bl	1f04c <__assert_fail@plt+0xda90>
   1285c:	cmp	r0, #0
   12860:	beq	12888 <__assert_fail@plt+0x12cc>
   12864:	movw	r5, #16848	; 0x41d0
   12868:	movt	r5, #3
   1286c:	ldrb	r0, [r5]
   12870:	cmp	r0, #0
   12874:	beq	128b4 <__assert_fail@plt+0x12f8>
   12878:	bl	11490 <__errno_location@plt>
   1287c:	ldr	r0, [r0]
   12880:	cmp	r0, #32
   12884:	bne	128b4 <__assert_fail@plt+0x12f8>
   12888:	movw	r0, #16800	; 0x41a0
   1288c:	movt	r0, #3
   12890:	ldr	r0, [r0]
   12894:	bl	1f04c <__assert_fail@plt+0xda90>
   12898:	cmp	r0, #0
   1289c:	subeq	sp, fp, #16
   128a0:	popeq	{r4, r5, r6, sl, fp, pc}
   128a4:	movw	r0, #16704	; 0x4140
   128a8:	movt	r0, #3
   128ac:	ldr	r0, [r0]
   128b0:	bl	112ec <_exit@plt>
   128b4:	movw	r1, #7185	; 0x1c11
   128b8:	mov	r0, #0
   128bc:	mov	r2, #5
   128c0:	movt	r1, #2
   128c4:	bl	11328 <dcgettext@plt>
   128c8:	ldr	r6, [r5, #4]
   128cc:	mov	r4, r0
   128d0:	bl	11490 <__errno_location@plt>
   128d4:	ldr	r5, [r0]
   128d8:	cmp	r6, #0
   128dc:	bne	128f8 <__assert_fail@plt+0x133c>
   128e0:	movw	r2, #7182	; 0x1c0e
   128e4:	mov	r0, #0
   128e8:	mov	r1, r5
   128ec:	mov	r3, r4
   128f0:	movt	r2, #2
   128f4:	b	12918 <__assert_fail@plt+0x135c>
   128f8:	mov	r0, r6
   128fc:	bl	1d654 <__assert_fail@plt+0xc098>
   12900:	movw	r2, #7197	; 0x1c1d
   12904:	mov	r3, r0
   12908:	str	r4, [sp]
   1290c:	mov	r0, #0
   12910:	mov	r1, r5
   12914:	movt	r2, #2
   12918:	bl	113b8 <error@plt>
   1291c:	movw	r0, #16704	; 0x4140
   12920:	movt	r0, #3
   12924:	ldr	r0, [r0]
   12928:	bl	112ec <_exit@plt>
   1292c:	push	{r4, r5, r6, r7, fp, lr}
   12930:	add	fp, sp, #16
   12934:	mov	r5, r0
   12938:	mov	r0, r1
   1293c:	mov	r1, r2
   12940:	mov	r2, r3
   12944:	bl	113c4 <open64@plt>
   12948:	mov	r4, r0
   1294c:	cmp	r0, r5
   12950:	beq	1298c <__assert_fail@plt+0x13d0>
   12954:	cmp	r4, #0
   12958:	blt	1298c <__assert_fail@plt+0x13d0>
   1295c:	mov	r0, r4
   12960:	mov	r1, r5
   12964:	bl	11334 <dup2@plt>
   12968:	mov	r5, r0
   1296c:	bl	11490 <__errno_location@plt>
   12970:	ldr	r7, [r0]
   12974:	mov	r6, r0
   12978:	mov	r0, r4
   1297c:	bl	11598 <close@plt>
   12980:	mov	r0, r5
   12984:	str	r7, [r6]
   12988:	pop	{r4, r5, r6, r7, fp, pc}
   1298c:	mov	r0, r4
   12990:	pop	{r4, r5, r6, r7, fp, pc}
   12994:	push	{r4, r5, r6, r7, fp, lr}
   12998:	add	fp, sp, #16
   1299c:	mov	r4, r3
   129a0:	mov	r5, r2
   129a4:	mov	r6, r1
   129a8:	mov	r7, r0
   129ac:	cmp	r0, #0
   129b0:	blt	12a04 <__assert_fail@plt+0x1448>
   129b4:	mov	r0, r7
   129b8:	mov	r1, r4
   129bc:	bl	11544 <futimens@plt>
   129c0:	cmp	r5, #0
   129c4:	beq	12a10 <__assert_fail@plt+0x1454>
   129c8:	cmp	r7, #0
   129cc:	blt	129ec <__assert_fail@plt+0x1430>
   129d0:	cmn	r0, #1
   129d4:	bne	12a10 <__assert_fail@plt+0x1454>
   129d8:	bl	11490 <__errno_location@plt>
   129dc:	ldr	r1, [r0]
   129e0:	mvn	r0, #0
   129e4:	cmp	r1, #38	; 0x26
   129e8:	bne	12a28 <__assert_fail@plt+0x146c>
   129ec:	ldr	r3, [fp, #8]
   129f0:	mov	r0, r6
   129f4:	mov	r1, r5
   129f8:	mov	r2, r4
   129fc:	bl	11298 <utimensat@plt>
   12a00:	b	12a10 <__assert_fail@plt+0x1454>
   12a04:	mov	r0, #1
   12a08:	cmp	r5, #0
   12a0c:	bne	129c8 <__assert_fail@plt+0x140c>
   12a10:	cmp	r0, #1
   12a14:	popne	{r4, r5, r6, r7, fp, pc}
   12a18:	bl	11490 <__errno_location@plt>
   12a1c:	mov	r1, #9
   12a20:	str	r1, [r0]
   12a24:	mvn	r0, #0
   12a28:	pop	{r4, r5, r6, r7, fp, pc}
   12a2c:	mov	r1, r0
   12a30:	mov	r0, #0
   12a34:	b	112e0 <clock_gettime@plt>
   12a38:	push	{fp, lr}
   12a3c:	mov	fp, sp
   12a40:	mov	r1, r0
   12a44:	mov	r0, #0
   12a48:	bl	112e0 <clock_gettime@plt>
   12a4c:	pop	{fp, pc}
   12a50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a54:	add	fp, sp, #28
   12a58:	sub	sp, sp, #4
   12a5c:	vpush	{d8-d9}
   12a60:	sub	sp, sp, #408	; 0x198
   12a64:	sub	sp, sp, #1024	; 0x400
   12a68:	sub	r1, fp, #72	; 0x48
   12a6c:	mov	r4, r0
   12a70:	add	r5, sp, #248	; 0xf8
   12a74:	vmov.i32	q4, #0	; 0x00000000
   12a78:	mov	sl, #0
   12a7c:	mov	r3, #0
   12a80:	add	r0, r1, #1
   12a84:	str	r0, [sp, #88]	; 0x58
   12a88:	add	r0, r1, #19
   12a8c:	str	r0, [sp, #200]	; 0xc8
   12a90:	add	r0, r4, #48	; 0x30
   12a94:	str	r0, [sp, #96]	; 0x60
   12a98:	add	r0, r4, #32
   12a9c:	str	r0, [sp, #104]	; 0x68
   12aa0:	add	r0, r4, #40	; 0x28
   12aa4:	str	r0, [sp, #92]	; 0x5c
   12aa8:	add	r0, r4, #64	; 0x40
   12aac:	str	r0, [sp, #160]	; 0xa0
   12ab0:	add	r0, r4, #56	; 0x38
   12ab4:	str	r0, [sp, #164]	; 0xa4
   12ab8:	add	r0, r4, #8
   12abc:	str	r0, [sp, #100]	; 0x64
   12ac0:	add	r0, r4, #96	; 0x60
   12ac4:	str	r0, [sp, #128]	; 0x80
   12ac8:	add	r0, r4, #104	; 0x68
   12acc:	str	r0, [sp, #124]	; 0x7c
   12ad0:	add	r0, r4, #112	; 0x70
   12ad4:	str	r0, [sp, #120]	; 0x78
   12ad8:	add	r0, r4, #120	; 0x78
   12adc:	str	r0, [sp, #116]	; 0x74
   12ae0:	add	r0, r4, #128	; 0x80
   12ae4:	str	r0, [sp, #112]	; 0x70
   12ae8:	add	r0, r4, #136	; 0x88
   12aec:	str	r0, [sp, #108]	; 0x6c
   12af0:	add	r0, r4, #80	; 0x50
   12af4:	str	r0, [sp, #148]	; 0x94
   12af8:	add	r0, r4, #72	; 0x48
   12afc:	str	r0, [sp, #144]	; 0x90
   12b00:	add	r0, r4, #88	; 0x58
   12b04:	str	r0, [sp, #84]	; 0x54
   12b08:	mov	r0, #0
   12b0c:	strh	r0, [fp, #-112]	; 0xffffff90
   12b10:	mvn	r0, #1
   12b14:	str	r0, [sp, #204]	; 0xcc
   12b18:	mov	r0, #0
   12b1c:	str	r0, [sp, #132]	; 0x84
   12b20:	mov	r0, #0
   12b24:	str	r0, [sp, #136]	; 0x88
   12b28:	mov	r0, #0
   12b2c:	str	r0, [sp, #140]	; 0x8c
   12b30:	mov	r0, #0
   12b34:	str	r0, [sp, #156]	; 0x9c
   12b38:	mov	r0, #0
   12b3c:	str	r0, [sp, #192]	; 0xc0
   12b40:	mov	r0, #0
   12b44:	str	r0, [sp, #152]	; 0x98
   12b48:	cmp	sl, #12
   12b4c:	beq	174f8 <__assert_fail@plt+0x5f3c>
   12b50:	movw	r0, #7264	; 0x1c60
   12b54:	movt	r0, #2
   12b58:	add	r0, r0, sl
   12b5c:	ldrsb	r9, [r0]
   12b60:	cmn	r9, #93	; 0x5d
   12b64:	beq	1404c <__assert_fail@plt+0x2a90>
   12b68:	ldr	r7, [sp, #204]	; 0xcc
   12b6c:	cmn	r7, #2
   12b70:	bne	13fb8 <__assert_fail@plt+0x29fc>
   12b74:	ldr	r6, [r4]
   12b78:	str	r3, [sp, #188]	; 0xbc
   12b7c:	ldrb	r0, [r6]
   12b80:	sub	r1, r0, #9
   12b84:	cmp	r1, #5
   12b88:	bcs	12ba4 <__assert_fail@plt+0x15e8>
   12b8c:	add	r6, r6, #1
   12b90:	str	r6, [r4]
   12b94:	ldrb	r0, [r6]
   12b98:	sub	r1, r0, #9
   12b9c:	cmp	r1, #5
   12ba0:	bcc	12b8c <__assert_fail@plt+0x15d0>
   12ba4:	cmp	r0, #32
   12ba8:	beq	12b8c <__assert_fail@plt+0x15d0>
   12bac:	sub	r1, r0, #48	; 0x30
   12bb0:	cmp	r1, #10
   12bb4:	bcs	12bc8 <__assert_fail@plt+0x160c>
   12bb8:	cmp	r0, #45	; 0x2d
   12bbc:	cmpne	r0, #43	; 0x2b
   12bc0:	beq	12d28 <__assert_fail@plt+0x176c>
   12bc4:	b	12ff0 <__assert_fail@plt+0x1a34>
   12bc8:	sub	r1, r0, #40	; 0x28
   12bcc:	cmp	r1, #82	; 0x52
   12bd0:	bhi	13e4c <__assert_fail@plt+0x2890>
   12bd4:	add	r2, pc, #0
   12bd8:	ldr	pc, [r2, r1, lsl #2]
   12bdc:	andeq	r2, r1, ip, ror #26
   12be0:	andeq	r3, r1, ip, asr #28
   12be4:	andeq	r3, r1, ip, asr #28
   12be8:	andeq	r2, r1, r8, lsr #26
   12bec:	andeq	r3, r1, ip, asr #28
   12bf0:	andeq	r2, r1, r8, lsr #26
   12bf4:	andeq	r3, r1, ip, asr #28
   12bf8:	andeq	r3, r1, ip, asr #28
   12bfc:	andeq	r3, r1, ip, asr #28
   12c00:	andeq	r3, r1, ip, asr #28
   12c04:	andeq	r3, r1, ip, asr #28
   12c08:	andeq	r3, r1, ip, asr #28
   12c0c:	andeq	r3, r1, ip, asr #28
   12c10:	andeq	r3, r1, ip, asr #28
   12c14:	andeq	r3, r1, ip, asr #28
   12c18:	andeq	r3, r1, ip, asr #28
   12c1c:	andeq	r3, r1, ip, asr #28
   12c20:	andeq	r3, r1, ip, asr #28
   12c24:	andeq	r3, r1, ip, asr #28
   12c28:	andeq	r3, r1, ip, asr #28
   12c2c:	andeq	r3, r1, ip, asr #28
   12c30:	andeq	r3, r1, ip, asr #28
   12c34:	andeq	r3, r1, ip, asr #28
   12c38:	andeq	r3, r1, ip, asr #28
   12c3c:	andeq	r3, r1, ip, asr #28
   12c40:	andeq	r3, r1, r0
   12c44:	andeq	r3, r1, r0
   12c48:	andeq	r3, r1, r0
   12c4c:	andeq	r3, r1, r0
   12c50:	andeq	r3, r1, r0
   12c54:	andeq	r3, r1, r0
   12c58:	andeq	r3, r1, r0
   12c5c:	andeq	r3, r1, r0
   12c60:	andeq	r3, r1, r0
   12c64:	andeq	r3, r1, r0
   12c68:	andeq	r3, r1, r0
   12c6c:	andeq	r3, r1, r0
   12c70:	andeq	r3, r1, r0
   12c74:	andeq	r3, r1, r0
   12c78:	andeq	r3, r1, r0
   12c7c:	andeq	r3, r1, r0
   12c80:	andeq	r3, r1, r0
   12c84:	andeq	r3, r1, r0
   12c88:	andeq	r3, r1, r0
   12c8c:	andeq	r3, r1, r0
   12c90:	andeq	r3, r1, r0
   12c94:	andeq	r3, r1, r0
   12c98:	andeq	r3, r1, r0
   12c9c:	andeq	r3, r1, r0
   12ca0:	andeq	r3, r1, r0
   12ca4:	andeq	r3, r1, r0
   12ca8:	andeq	r3, r1, ip, asr #28
   12cac:	andeq	r3, r1, ip, asr #28
   12cb0:	andeq	r3, r1, ip, asr #28
   12cb4:	andeq	r3, r1, ip, asr #28
   12cb8:	andeq	r3, r1, ip, asr #28
   12cbc:	andeq	r3, r1, ip, asr #28
   12cc0:	andeq	r3, r1, r0
   12cc4:	andeq	r3, r1, r0
   12cc8:	andeq	r3, r1, r0
   12ccc:	andeq	r3, r1, r0
   12cd0:	andeq	r3, r1, r0
   12cd4:	andeq	r3, r1, r0
   12cd8:	andeq	r3, r1, r0
   12cdc:	andeq	r3, r1, r0
   12ce0:	andeq	r3, r1, r0
   12ce4:	andeq	r3, r1, r0
   12ce8:	andeq	r3, r1, r0
   12cec:	andeq	r3, r1, r0
   12cf0:	andeq	r3, r1, r0
   12cf4:	andeq	r3, r1, r0
   12cf8:	andeq	r3, r1, r0
   12cfc:	andeq	r3, r1, r0
   12d00:	andeq	r3, r1, r0
   12d04:	andeq	r3, r1, r0
   12d08:	andeq	r3, r1, r0
   12d0c:	andeq	r3, r1, r0
   12d10:	andeq	r3, r1, r0
   12d14:	andeq	r3, r1, r0
   12d18:	andeq	r3, r1, r0
   12d1c:	andeq	r3, r1, r0
   12d20:	andeq	r3, r1, r0
   12d24:	andeq	r3, r1, r0
   12d28:	add	r2, r6, #1
   12d2c:	mov	r3, r6
   12d30:	b	12d3c <__assert_fail@plt+0x1780>
   12d34:	add	r3, r3, #1
   12d38:	add	r2, r2, #1
   12d3c:	str	r2, [r4]
   12d40:	ldrb	r1, [r2]
   12d44:	sub	r7, r1, #9
   12d48:	cmp	r7, #5
   12d4c:	bcc	12d34 <__assert_fail@plt+0x1778>
   12d50:	cmp	r1, #32
   12d54:	beq	12d34 <__assert_fail@plt+0x1778>
   12d58:	sub	r7, r1, #48	; 0x30
   12d5c:	mov	r6, r2
   12d60:	cmp	r7, #9
   12d64:	bhi	12b94 <__assert_fail@plt+0x15d8>
   12d68:	b	12dcc <__assert_fail@plt+0x1810>
   12d6c:	mov	r0, #0
   12d70:	mov	r1, r6
   12d74:	add	r6, r6, #1
   12d78:	str	r6, [r4]
   12d7c:	ldrb	r1, [r1]
   12d80:	cmp	r1, #40	; 0x28
   12d84:	beq	12db4 <__assert_fail@plt+0x17f8>
   12d88:	cmp	r1, #41	; 0x29
   12d8c:	beq	12da4 <__assert_fail@plt+0x17e8>
   12d90:	cmp	r1, #0
   12d94:	beq	12dc4 <__assert_fail@plt+0x1808>
   12d98:	cmp	r0, #0
   12d9c:	bne	12d70 <__assert_fail@plt+0x17b4>
   12da0:	b	12b94 <__assert_fail@plt+0x15d8>
   12da4:	sub	r0, r0, #1
   12da8:	cmp	r0, #0
   12dac:	bne	12d70 <__assert_fail@plt+0x17b4>
   12db0:	b	12b94 <__assert_fail@plt+0x15d8>
   12db4:	add	r0, r0, #1
   12db8:	cmp	r0, #0
   12dbc:	bne	12d70 <__assert_fail@plt+0x17b4>
   12dc0:	b	12b94 <__assert_fail@plt+0x15d8>
   12dc4:	ldr	r3, [sp, #188]	; 0xbc
   12dc8:	b	13ffc <__assert_fail@plt+0x2a40>
   12dcc:	cmp	r0, #45	; 0x2d
   12dd0:	bne	139ec <__assert_fail@plt+0x2430>
   12dd4:	mov	r0, #0
   12dd8:	cmp	r0, #0
   12ddc:	blt	12df4 <__assert_fail@plt+0x1838>
   12de0:	movw	r7, #52428	; 0xcccc
   12de4:	movt	r7, #3276	; 0xccc
   12de8:	cmp	r0, r7
   12dec:	ble	12e0c <__assert_fail@plt+0x1850>
   12df0:	b	13a9c <__assert_fail@plt+0x24e0>
   12df4:	cmn	r0, #1
   12df8:	beq	12e0c <__assert_fail@plt+0x1850>
   12dfc:	mov	r7, #-2147483648	; 0x80000000
   12e00:	sdiv	r7, r7, r0
   12e04:	cmp	r7, #10
   12e08:	blt	13a9c <__assert_fail@plt+0x24e0>
   12e0c:	add	r7, r0, r0, lsl #2
   12e10:	uxtb	r0, r1
   12e14:	rsb	r0, r0, #48	; 0x30
   12e18:	add	r0, r0, r7, lsl #1
   12e1c:	cmp	r0, r7, lsl #1
   12e20:	bvs	13a9c <__assert_fail@plt+0x24e0>
   12e24:	ldrb	r1, [r3, #2]
   12e28:	add	r7, r3, #1
   12e2c:	sub	r3, r1, #48	; 0x30
   12e30:	cmp	r3, #10
   12e34:	mov	r3, r7
   12e38:	bcc	12dd8 <__assert_fail@plt+0x181c>
   12e3c:	add	r6, r7, #1
   12e40:	mvn	ip, #0
   12e44:	mov	lr, #1
   12e48:	orr	r1, r1, #2
   12e4c:	cmp	r1, #46	; 0x2e
   12e50:	bne	13a64 <__assert_fail@plt+0x24a8>
   12e54:	ldrb	r1, [r7, #2]
   12e58:	sub	r3, r1, #48	; 0x30
   12e5c:	cmp	r3, #9
   12e60:	bhi	13a64 <__assert_fail@plt+0x24a8>
   12e64:	mov	r1, r7
   12e68:	str	lr, [sp, #240]	; 0xf0
   12e6c:	str	ip, [sp, #244]	; 0xf4
   12e70:	add	r3, r3, r3, lsl #2
   12e74:	ldrb	r2, [r1, #3]!
   12e78:	sub	r2, r2, #48	; 0x30
   12e7c:	cmp	r2, #10
   12e80:	str	r2, [sp, #236]	; 0xec
   12e84:	mov	r2, #3
   12e88:	movwcc	r2, #4
   12e8c:	addcc	r1, r7, #4
   12e90:	ldrb	r2, [r7, r2]
   12e94:	sub	r2, r2, #48	; 0x30
   12e98:	cmp	r2, #10
   12e9c:	str	r2, [sp, #232]	; 0xe8
   12ea0:	addcc	r1, r1, #1
   12ea4:	mov	r2, r1
   12ea8:	ldrb	r7, [r2], #1
   12eac:	sub	r7, r7, #48	; 0x30
   12eb0:	cmp	r7, #10
   12eb4:	str	r7, [sp, #228]	; 0xe4
   12eb8:	movcs	r2, r1
   12ebc:	mov	r1, r2
   12ec0:	ldrb	r7, [r1], #1
   12ec4:	sub	r7, r7, #48	; 0x30
   12ec8:	cmp	r7, #10
   12ecc:	str	r7, [sp, #224]	; 0xe0
   12ed0:	movcs	r1, r2
   12ed4:	mov	r2, r1
   12ed8:	ldrb	r6, [r2], #1
   12edc:	sub	r6, r6, #48	; 0x30
   12ee0:	cmp	r6, #10
   12ee4:	movcs	r2, r1
   12ee8:	mov	r1, r2
   12eec:	ldrb	r7, [r1], #1
   12ef0:	sub	r8, r7, #48	; 0x30
   12ef4:	cmp	r8, #10
   12ef8:	movcs	r1, r2
   12efc:	mov	r7, r1
   12f00:	ldrb	r2, [r7], #1
   12f04:	sub	lr, r2, #48	; 0x30
   12f08:	cmp	lr, #10
   12f0c:	movcs	r7, r1
   12f10:	mov	r1, r7
   12f14:	ldrb	r2, [r1], #1
   12f18:	sub	ip, r2, #48	; 0x30
   12f1c:	ldr	r2, [sp, #236]	; 0xec
   12f20:	cmp	ip, #10
   12f24:	movcs	r1, r7
   12f28:	lsl	r7, r3, #1
   12f2c:	cmp	r2, #10
   12f30:	addcc	r7, r2, r3, lsl #1
   12f34:	ldr	r2, [sp, #232]	; 0xe8
   12f38:	add	r3, r7, r7, lsl #2
   12f3c:	lsl	r7, r3, #1
   12f40:	cmp	r2, #10
   12f44:	addcc	r7, r2, r3, lsl #1
   12f48:	ldr	r2, [sp, #228]	; 0xe4
   12f4c:	add	r3, r7, r7, lsl #2
   12f50:	lsl	r7, r3, #1
   12f54:	cmp	r2, #10
   12f58:	addcc	r7, r2, r3, lsl #1
   12f5c:	ldr	r2, [sp, #224]	; 0xe0
   12f60:	add	r3, r7, r7, lsl #2
   12f64:	lsl	r7, r3, #1
   12f68:	cmp	r2, #10
   12f6c:	addcc	r7, r2, r3, lsl #1
   12f70:	cmp	r6, #10
   12f74:	add	r3, r7, r7, lsl #2
   12f78:	lsl	r7, r3, #1
   12f7c:	addcc	r7, r6, r3, lsl #1
   12f80:	cmp	r8, #10
   12f84:	add	r3, r7, r7, lsl #2
   12f88:	lsl	r6, r3, #1
   12f8c:	addcc	r6, r8, r3, lsl #1
   12f90:	ldr	r8, [sp, #240]	; 0xf0
   12f94:	cmp	lr, #10
   12f98:	add	r3, r6, r6, lsl #2
   12f9c:	lsl	r7, r3, #1
   12fa0:	addcc	r7, lr, r3, lsl #1
   12fa4:	cmp	ip, #10
   12fa8:	add	r7, r7, r7, lsl #2
   12fac:	lsl	r3, r7, #1
   12fb0:	addcc	r3, ip, r7, lsl #1
   12fb4:	cmp	r8, #0
   12fb8:	beq	13abc <__assert_fail@plt+0x2500>
   12fbc:	ldrb	r2, [r1]
   12fc0:	ldr	r6, [sp, #244]	; 0xf4
   12fc4:	sub	r7, r2, #48	; 0x30
   12fc8:	cmp	r7, #9
   12fcc:	bhi	13da4 <__assert_fail@plt+0x27e8>
   12fd0:	uxtb	r2, r2
   12fd4:	cmp	r2, #48	; 0x30
   12fd8:	bne	13da0 <__assert_fail@plt+0x27e4>
   12fdc:	ldrb	r2, [r1, #1]!
   12fe0:	sub	r7, r2, #48	; 0x30
   12fe4:	cmp	r7, #10
   12fe8:	bcc	12fd0 <__assert_fail@plt+0x1a14>
   12fec:	b	13da4 <__assert_fail@plt+0x27e8>
   12ff0:	mov	ip, #0
   12ff4:	mov	r2, r6
   12ff8:	mov	r1, r0
   12ffc:	b	139f4 <__assert_fail@plt+0x2438>
   13000:	sub	r1, fp, #72	; 0x48
   13004:	ldr	r2, [sp, #200]	; 0xc8
   13008:	cmp	r1, r2
   1300c:	mov	r2, #1
   13010:	strbcc	r0, [r1], #1
   13014:	ldrcc	r0, [r4]
   13018:	movcs	r0, r6
   1301c:	add	r6, r0, #1
   13020:	str	r6, [r4]
   13024:	ldrb	r0, [r0, #1]
   13028:	sub	r3, r0, #65	; 0x41
   1302c:	cmp	r3, #26
   13030:	subcs	r3, r0, #97	; 0x61
   13034:	cmpcs	r3, #26
   13038:	movcs	r2, #0
   1303c:	cmp	r0, #46	; 0x2e
   13040:	beq	13004 <__assert_fail@plt+0x1a48>
   13044:	cmp	r2, #0
   13048:	bne	13004 <__assert_fail@plt+0x1a48>
   1304c:	mov	r0, #0
   13050:	mvn	r3, #96	; 0x60
   13054:	strb	r0, [r1]
   13058:	ldrb	r0, [fp, #-72]	; 0xffffffb8
   1305c:	cmp	r0, #0
   13060:	beq	13088 <__assert_fail@plt+0x1acc>
   13064:	ldr	r1, [sp, #88]	; 0x58
   13068:	uxtab	r2, r3, r0
   1306c:	cmp	r2, #26
   13070:	subcc	r0, r0, #32
   13074:	strb	r0, [r1, #-1]
   13078:	ldrb	r0, [r1]
   1307c:	add	r1, r1, #1
   13080:	cmp	r0, #0
   13084:	bne	13068 <__assert_fail@plt+0x1aac>
   13088:	movw	r1, #10589	; 0x295d
   1308c:	sub	r0, fp, #72	; 0x48
   13090:	movt	r1, #2
   13094:	bl	112a4 <strcmp@plt>
   13098:	cmp	r0, #0
   1309c:	movw	r0, #8416	; 0x20e0
   130a0:	movt	r0, #2
   130a4:	beq	13f98 <__assert_fail@plt+0x29dc>
   130a8:	movw	r1, #10592	; 0x2960
   130ac:	sub	r6, fp, #72	; 0x48
   130b0:	mov	r0, r6
   130b4:	movt	r1, #2
   130b8:	bl	112a4 <strcmp@plt>
   130bc:	cmp	r0, #0
   130c0:	beq	13aac <__assert_fail@plt+0x24f0>
   130c4:	movw	r1, #10597	; 0x2965
   130c8:	mov	r0, r6
   130cc:	movt	r1, #2
   130d0:	bl	112a4 <strcmp@plt>
   130d4:	cmp	r0, #0
   130d8:	beq	13ac4 <__assert_fail@plt+0x2508>
   130dc:	movw	r1, #10600	; 0x2968
   130e0:	mov	r0, r6
   130e4:	movt	r1, #2
   130e8:	bl	112a4 <strcmp@plt>
   130ec:	cmp	r0, #0
   130f0:	beq	13ad4 <__assert_fail@plt+0x2518>
   130f4:	mov	r0, r6
   130f8:	bl	1146c <strlen@plt>
   130fc:	mov	r8, r0
   13100:	cmp	r0, #3
   13104:	beq	13ae4 <__assert_fail@plt+0x2528>
   13108:	cmp	r8, #4
   1310c:	ldrbeq	r0, [fp, #-69]	; 0xffffffbb
   13110:	cmpeq	r0, #46	; 0x2e
   13114:	beq	13ae4 <__assert_fail@plt+0x2528>
   13118:	movw	r1, #10605	; 0x296d
   1311c:	sub	r0, fp, #72	; 0x48
   13120:	movt	r1, #2
   13124:	bl	112a4 <strcmp@plt>
   13128:	cmp	r0, #0
   1312c:	movw	r0, #8476	; 0x211c
   13130:	movt	r0, #2
   13134:	beq	13f98 <__assert_fail@plt+0x29dc>
   13138:	movw	r1, #10613	; 0x2975
   1313c:	sub	r6, fp, #72	; 0x48
   13140:	mov	r0, r6
   13144:	movt	r1, #2
   13148:	bl	112a4 <strcmp@plt>
   1314c:	cmp	r0, #0
   13150:	beq	13e30 <__assert_fail@plt+0x2874>
   13154:	movw	r1, #10622	; 0x297e
   13158:	mov	r0, r6
   1315c:	movt	r1, #2
   13160:	bl	112a4 <strcmp@plt>
   13164:	cmp	r0, #0
   13168:	beq	13e3c <__assert_fail@plt+0x2880>
   1316c:	movw	r1, #10628	; 0x2984
   13170:	mov	r0, r6
   13174:	movt	r1, #2
   13178:	bl	112a4 <strcmp@plt>
   1317c:	cmp	r0, #0
   13180:	beq	13e5c <__assert_fail@plt+0x28a0>
   13184:	movw	r1, #10634	; 0x298a
   13188:	mov	r0, r6
   1318c:	movt	r1, #2
   13190:	bl	112a4 <strcmp@plt>
   13194:	cmp	r0, #0
   13198:	beq	13e6c <__assert_fail@plt+0x28b0>
   1319c:	movw	r1, #10638	; 0x298e
   131a0:	mov	r0, r6
   131a4:	movt	r1, #2
   131a8:	bl	112a4 <strcmp@plt>
   131ac:	cmp	r0, #0
   131b0:	beq	13e7c <__assert_fail@plt+0x28c0>
   131b4:	movw	r1, #10643	; 0x2993
   131b8:	mov	r0, r6
   131bc:	movt	r1, #2
   131c0:	bl	112a4 <strcmp@plt>
   131c4:	cmp	r0, #0
   131c8:	beq	13e8c <__assert_fail@plt+0x28d0>
   131cc:	movw	r1, #10648	; 0x2998
   131d0:	mov	r0, r6
   131d4:	movt	r1, #2
   131d8:	bl	112a4 <strcmp@plt>
   131dc:	cmp	r0, #0
   131e0:	beq	13e9c <__assert_fail@plt+0x28e0>
   131e4:	movw	r1, #10655	; 0x299f
   131e8:	mov	r0, r6
   131ec:	movt	r1, #2
   131f0:	bl	112a4 <strcmp@plt>
   131f4:	cmp	r0, #0
   131f8:	beq	13eac <__assert_fail@plt+0x28f0>
   131fc:	movw	r1, #10665	; 0x29a9
   13200:	mov	r0, r6
   13204:	movt	r1, #2
   13208:	bl	112a4 <strcmp@plt>
   1320c:	cmp	r0, #0
   13210:	beq	13ebc <__assert_fail@plt+0x2900>
   13214:	movw	r1, #10670	; 0x29ae
   13218:	mov	r0, r6
   1321c:	movt	r1, #2
   13220:	bl	112a4 <strcmp@plt>
   13224:	cmp	r0, #0
   13228:	beq	13ecc <__assert_fail@plt+0x2910>
   1322c:	movw	r1, #10678	; 0x29b6
   13230:	mov	r0, r6
   13234:	movt	r1, #2
   13238:	bl	112a4 <strcmp@plt>
   1323c:	cmp	r0, #0
   13240:	beq	13edc <__assert_fail@plt+0x2920>
   13244:	movw	r1, #10687	; 0x29bf
   13248:	sub	r0, fp, #72	; 0x48
   1324c:	movt	r1, #2
   13250:	bl	112a4 <strcmp@plt>
   13254:	cmp	r0, #0
   13258:	beq	13eec <__assert_fail@plt+0x2930>
   1325c:	movw	r1, #10696	; 0x29c8
   13260:	sub	r0, fp, #72	; 0x48
   13264:	movt	r1, #2
   13268:	bl	112a4 <strcmp@plt>
   1326c:	cmp	r0, #0
   13270:	beq	13efc <__assert_fail@plt+0x2940>
   13274:	movw	r1, #10703	; 0x29cf
   13278:	sub	r0, fp, #72	; 0x48
   1327c:	movt	r1, #2
   13280:	bl	112a4 <strcmp@plt>
   13284:	cmp	r0, #0
   13288:	beq	13f0c <__assert_fail@plt+0x2950>
   1328c:	movw	r1, #10710	; 0x29d6
   13290:	sub	r0, fp, #72	; 0x48
   13294:	movt	r1, #2
   13298:	bl	112a4 <strcmp@plt>
   1329c:	cmp	r0, #0
   132a0:	beq	13f1c <__assert_fail@plt+0x2960>
   132a4:	movw	r1, #10718	; 0x29de
   132a8:	sub	r0, fp, #72	; 0x48
   132ac:	movt	r1, #2
   132b0:	bl	112a4 <strcmp@plt>
   132b4:	cmp	r0, #0
   132b8:	beq	13f2c <__assert_fail@plt+0x2970>
   132bc:	movw	r1, #10723	; 0x29e3
   132c0:	sub	r0, fp, #72	; 0x48
   132c4:	movt	r1, #2
   132c8:	bl	112a4 <strcmp@plt>
   132cc:	cmp	r0, #0
   132d0:	beq	13f3c <__assert_fail@plt+0x2980>
   132d4:	movw	r1, #10733	; 0x29ed
   132d8:	sub	r0, fp, #72	; 0x48
   132dc:	movt	r1, #2
   132e0:	bl	112a4 <strcmp@plt>
   132e4:	cmp	r0, #0
   132e8:	beq	13f4c <__assert_fail@plt+0x2990>
   132ec:	movw	r1, #10740	; 0x29f4
   132f0:	sub	r0, fp, #72	; 0x48
   132f4:	movt	r1, #2
   132f8:	bl	112a4 <strcmp@plt>
   132fc:	cmp	r0, #0
   13300:	beq	13f5c <__assert_fail@plt+0x29a0>
   13304:	movw	r1, #10749	; 0x29fd
   13308:	sub	r0, fp, #72	; 0x48
   1330c:	movt	r1, #2
   13310:	bl	112a4 <strcmp@plt>
   13314:	cmp	r0, #0
   13318:	beq	13f6c <__assert_fail@plt+0x29b0>
   1331c:	movw	r1, #10754	; 0x2a02
   13320:	sub	r0, fp, #72	; 0x48
   13324:	movt	r1, #2
   13328:	bl	112a4 <strcmp@plt>
   1332c:	cmp	r0, #0
   13330:	beq	13f7c <__assert_fail@plt+0x29c0>
   13334:	movw	r1, #10760	; 0x2a08
   13338:	sub	r0, fp, #72	; 0x48
   1333c:	movt	r1, #2
   13340:	bl	112a4 <strcmp@plt>
   13344:	cmp	r0, #0
   13348:	beq	13f8c <__assert_fail@plt+0x29d0>
   1334c:	movw	r1, #10767	; 0x2a0f
   13350:	sub	r0, fp, #72	; 0x48
   13354:	movt	r1, #2
   13358:	bl	112a4 <strcmp@plt>
   1335c:	cmp	r0, #0
   13360:	beq	13d90 <__assert_fail@plt+0x27d4>
   13364:	mov	r0, r4
   13368:	sub	r1, fp, #72	; 0x48
   1336c:	bl	1b58c <__assert_fail@plt+0x9fd0>
   13370:	cmp	r0, #0
   13374:	bne	13f98 <__assert_fail@plt+0x29dc>
   13378:	movw	r1, #10436	; 0x28c4
   1337c:	sub	r0, fp, #72	; 0x48
   13380:	movt	r1, #2
   13384:	bl	112a4 <strcmp@plt>
   13388:	cmp	r0, #0
   1338c:	movw	r0, #8776	; 0x2248
   13390:	movt	r0, #2
   13394:	beq	13f98 <__assert_fail@plt+0x29dc>
   13398:	movw	r1, #10969	; 0x2ad9
   1339c:	sub	r0, fp, #72	; 0x48
   133a0:	movt	r1, #2
   133a4:	bl	112a4 <strcmp@plt>
   133a8:	cmp	r0, #0
   133ac:	movw	r0, #8788	; 0x2254
   133b0:	movt	r0, #2
   133b4:	beq	13f98 <__assert_fail@plt+0x29dc>
   133b8:	movw	r1, #10974	; 0x2ade
   133bc:	sub	r0, fp, #72	; 0x48
   133c0:	movt	r1, #2
   133c4:	bl	112a4 <strcmp@plt>
   133c8:	movw	r1, #8788	; 0x2254
   133cc:	cmp	r0, #0
   133d0:	movt	r1, #2
   133d4:	add	r6, r1, #12
   133d8:	beq	1716c <__assert_fail@plt+0x5bb0>
   133dc:	movw	r1, #10980	; 0x2ae4
   133e0:	sub	r0, fp, #72	; 0x48
   133e4:	movt	r1, #2
   133e8:	bl	112a4 <strcmp@plt>
   133ec:	movw	r1, #8788	; 0x2254
   133f0:	cmp	r0, #0
   133f4:	movt	r1, #2
   133f8:	add	r1, r1, #24
   133fc:	str	r1, [sp, #244]	; 0xf4
   13400:	beq	17174 <__assert_fail@plt+0x5bb8>
   13404:	movw	r1, #10990	; 0x2aee
   13408:	sub	r0, fp, #72	; 0x48
   1340c:	movt	r1, #2
   13410:	bl	112a4 <strcmp@plt>
   13414:	movw	r1, #8788	; 0x2254
   13418:	cmp	r0, #0
   1341c:	movt	r1, #2
   13420:	add	r1, r1, #36	; 0x24
   13424:	str	r1, [sp, #240]	; 0xf0
   13428:	beq	1717c <__assert_fail@plt+0x5bc0>
   1342c:	movw	r1, #10763	; 0x2a0b
   13430:	sub	r0, fp, #72	; 0x48
   13434:	movt	r1, #2
   13438:	bl	112a4 <strcmp@plt>
   1343c:	movw	r1, #8788	; 0x2254
   13440:	cmp	r0, #0
   13444:	movt	r1, #2
   13448:	add	r1, r1, #48	; 0x30
   1344c:	str	r1, [sp, #236]	; 0xec
   13450:	beq	17184 <__assert_fail@plt+0x5bc8>
   13454:	movw	r1, #10995	; 0x2af3
   13458:	sub	r0, fp, #72	; 0x48
   1345c:	movt	r1, #2
   13460:	bl	112a4 <strcmp@plt>
   13464:	movw	r1, #8788	; 0x2254
   13468:	cmp	r0, #0
   1346c:	movt	r1, #2
   13470:	add	r1, r1, #60	; 0x3c
   13474:	str	r1, [sp, #232]	; 0xe8
   13478:	beq	1718c <__assert_fail@plt+0x5bd0>
   1347c:	movw	r1, #11000	; 0x2af8
   13480:	sub	r0, fp, #72	; 0x48
   13484:	movt	r1, #2
   13488:	bl	112a4 <strcmp@plt>
   1348c:	movw	r1, #8788	; 0x2254
   13490:	cmp	r0, #0
   13494:	movt	r1, #2
   13498:	add	r1, r1, #72	; 0x48
   1349c:	str	r1, [sp, #228]	; 0xe4
   134a0:	beq	17194 <__assert_fail@plt+0x5bd8>
   134a4:	movw	r1, #11007	; 0x2aff
   134a8:	sub	r0, fp, #72	; 0x48
   134ac:	movt	r1, #2
   134b0:	bl	112a4 <strcmp@plt>
   134b4:	movw	r1, #8788	; 0x2254
   134b8:	cmp	r0, #0
   134bc:	movt	r1, #2
   134c0:	add	r1, r1, #84	; 0x54
   134c4:	str	r1, [sp, #224]	; 0xe0
   134c8:	beq	1719c <__assert_fail@plt+0x5be0>
   134cc:	movw	r1, #11011	; 0x2b03
   134d0:	sub	r0, fp, #72	; 0x48
   134d4:	movt	r1, #2
   134d8:	bl	112a4 <strcmp@plt>
   134dc:	movw	r1, #8788	; 0x2254
   134e0:	cmp	r0, #0
   134e4:	movt	r1, #2
   134e8:	add	r1, r1, #96	; 0x60
   134ec:	str	r1, [sp, #220]	; 0xdc
   134f0:	beq	171a4 <__assert_fail@plt+0x5be8>
   134f4:	movw	r1, #11018	; 0x2b0a
   134f8:	sub	r0, fp, #72	; 0x48
   134fc:	movt	r1, #2
   13500:	bl	112a4 <strcmp@plt>
   13504:	movw	r1, #8788	; 0x2254
   13508:	cmp	r0, #0
   1350c:	movt	r1, #2
   13510:	add	r7, r1, #108	; 0x6c
   13514:	beq	171ac <__assert_fail@plt+0x5bf0>
   13518:	sub	r1, r8, #1
   1351c:	sub	r0, fp, #72	; 0x48
   13520:	ldrb	r0, [r0, r1]
   13524:	str	r1, [sp, #216]	; 0xd8
   13528:	cmp	r0, #83	; 0x53
   1352c:	bne	13668 <__assert_fail@plt+0x20ac>
   13530:	ldr	r2, [sp, #216]	; 0xd8
   13534:	sub	r0, fp, #72	; 0x48
   13538:	mov	r1, #0
   1353c:	strb	r1, [r0, r2]
   13540:	movw	r1, #10969	; 0x2ad9
   13544:	movt	r1, #2
   13548:	bl	112a4 <strcmp@plt>
   1354c:	cmp	r0, #0
   13550:	movw	r0, #8788	; 0x2254
   13554:	movt	r0, #2
   13558:	beq	13f98 <__assert_fail@plt+0x29dc>
   1355c:	movw	r1, #10974	; 0x2ade
   13560:	sub	r0, fp, #72	; 0x48
   13564:	movt	r1, #2
   13568:	bl	112a4 <strcmp@plt>
   1356c:	cmp	r0, #0
   13570:	mov	r0, r6
   13574:	beq	13f98 <__assert_fail@plt+0x29dc>
   13578:	movw	r1, #10980	; 0x2ae4
   1357c:	sub	r0, fp, #72	; 0x48
   13580:	movt	r1, #2
   13584:	bl	112a4 <strcmp@plt>
   13588:	cmp	r0, #0
   1358c:	ldr	r0, [sp, #244]	; 0xf4
   13590:	beq	13f98 <__assert_fail@plt+0x29dc>
   13594:	movw	r1, #10990	; 0x2aee
   13598:	sub	r0, fp, #72	; 0x48
   1359c:	movt	r1, #2
   135a0:	bl	112a4 <strcmp@plt>
   135a4:	cmp	r0, #0
   135a8:	ldr	r0, [sp, #240]	; 0xf0
   135ac:	beq	13f98 <__assert_fail@plt+0x29dc>
   135b0:	movw	r1, #10763	; 0x2a0b
   135b4:	sub	r0, fp, #72	; 0x48
   135b8:	movt	r1, #2
   135bc:	bl	112a4 <strcmp@plt>
   135c0:	cmp	r0, #0
   135c4:	ldr	r0, [sp, #236]	; 0xec
   135c8:	beq	13f98 <__assert_fail@plt+0x29dc>
   135cc:	movw	r1, #10995	; 0x2af3
   135d0:	sub	r0, fp, #72	; 0x48
   135d4:	movt	r1, #2
   135d8:	bl	112a4 <strcmp@plt>
   135dc:	cmp	r0, #0
   135e0:	ldr	r0, [sp, #232]	; 0xe8
   135e4:	beq	13f98 <__assert_fail@plt+0x29dc>
   135e8:	movw	r1, #11000	; 0x2af8
   135ec:	sub	r0, fp, #72	; 0x48
   135f0:	movt	r1, #2
   135f4:	bl	112a4 <strcmp@plt>
   135f8:	cmp	r0, #0
   135fc:	ldr	r0, [sp, #228]	; 0xe4
   13600:	beq	13f98 <__assert_fail@plt+0x29dc>
   13604:	movw	r1, #11007	; 0x2aff
   13608:	sub	r0, fp, #72	; 0x48
   1360c:	movt	r1, #2
   13610:	bl	112a4 <strcmp@plt>
   13614:	cmp	r0, #0
   13618:	ldr	r0, [sp, #224]	; 0xe0
   1361c:	beq	13f98 <__assert_fail@plt+0x29dc>
   13620:	movw	r1, #11011	; 0x2b03
   13624:	sub	r0, fp, #72	; 0x48
   13628:	movt	r1, #2
   1362c:	bl	112a4 <strcmp@plt>
   13630:	cmp	r0, #0
   13634:	ldr	r0, [sp, #220]	; 0xdc
   13638:	beq	13f98 <__assert_fail@plt+0x29dc>
   1363c:	movw	r1, #11018	; 0x2b0a
   13640:	sub	r0, fp, #72	; 0x48
   13644:	movt	r1, #2
   13648:	bl	112a4 <strcmp@plt>
   1364c:	cmp	r0, #0
   13650:	mov	r0, r7
   13654:	beq	13f98 <__assert_fail@plt+0x29dc>
   13658:	ldr	r2, [sp, #216]	; 0xd8
   1365c:	sub	r0, fp, #72	; 0x48
   13660:	mov	r1, #83	; 0x53
   13664:	strb	r1, [r0, r2]
   13668:	movw	r1, #11022	; 0x2b0e
   1366c:	sub	r0, fp, #72	; 0x48
   13670:	movt	r1, #2
   13674:	bl	112a4 <strcmp@plt>
   13678:	cmp	r0, #0
   1367c:	movw	r0, #8920	; 0x22d8
   13680:	movt	r0, #2
   13684:	beq	13f98 <__assert_fail@plt+0x29dc>
   13688:	movw	r1, #11031	; 0x2b17
   1368c:	sub	r0, fp, #72	; 0x48
   13690:	movt	r1, #2
   13694:	bl	112a4 <strcmp@plt>
   13698:	cmp	r0, #0
   1369c:	beq	171b4 <__assert_fail@plt+0x5bf8>
   136a0:	movw	r1, #11041	; 0x2b21
   136a4:	sub	r0, fp, #72	; 0x48
   136a8:	movt	r1, #2
   136ac:	bl	112a4 <strcmp@plt>
   136b0:	cmp	r0, #0
   136b4:	beq	171c0 <__assert_fail@plt+0x5c04>
   136b8:	movw	r1, #11047	; 0x2b27
   136bc:	sub	r0, fp, #72	; 0x48
   136c0:	movt	r1, #2
   136c4:	bl	112a4 <strcmp@plt>
   136c8:	cmp	r0, #0
   136cc:	beq	171d0 <__assert_fail@plt+0x5c14>
   136d0:	movw	r1, #11051	; 0x2b2b
   136d4:	sub	r0, fp, #72	; 0x48
   136d8:	movt	r1, #2
   136dc:	bl	112a4 <strcmp@plt>
   136e0:	cmp	r0, #0
   136e4:	beq	171e0 <__assert_fail@plt+0x5c24>
   136e8:	movw	r1, #11056	; 0x2b30
   136ec:	sub	r0, fp, #72	; 0x48
   136f0:	movt	r1, #2
   136f4:	bl	112a4 <strcmp@plt>
   136f8:	cmp	r0, #0
   136fc:	beq	171f0 <__assert_fail@plt+0x5c34>
   13700:	movw	r1, #11061	; 0x2b35
   13704:	sub	r0, fp, #72	; 0x48
   13708:	movt	r1, #2
   1370c:	bl	112a4 <strcmp@plt>
   13710:	cmp	r0, #0
   13714:	beq	17200 <__assert_fail@plt+0x5c44>
   13718:	movw	r1, #11066	; 0x2b3a
   1371c:	sub	r0, fp, #72	; 0x48
   13720:	movt	r1, #2
   13724:	bl	112a4 <strcmp@plt>
   13728:	cmp	r0, #0
   1372c:	beq	17210 <__assert_fail@plt+0x5c54>
   13730:	movw	r1, #11072	; 0x2b40
   13734:	sub	r0, fp, #72	; 0x48
   13738:	movt	r1, #2
   1373c:	bl	112a4 <strcmp@plt>
   13740:	cmp	r0, #0
   13744:	beq	17220 <__assert_fail@plt+0x5c64>
   13748:	movw	r1, #11078	; 0x2b46
   1374c:	sub	r0, fp, #72	; 0x48
   13750:	movt	r1, #2
   13754:	bl	112a4 <strcmp@plt>
   13758:	cmp	r0, #0
   1375c:	beq	17230 <__assert_fail@plt+0x5c74>
   13760:	movw	r1, #11085	; 0x2b4d
   13764:	sub	r0, fp, #72	; 0x48
   13768:	movt	r1, #2
   1376c:	bl	112a4 <strcmp@plt>
   13770:	cmp	r0, #0
   13774:	beq	17240 <__assert_fail@plt+0x5c84>
   13778:	movw	r1, #11091	; 0x2b53
   1377c:	sub	r0, fp, #72	; 0x48
   13780:	movt	r1, #2
   13784:	bl	112a4 <strcmp@plt>
   13788:	cmp	r0, #0
   1378c:	beq	17250 <__assert_fail@plt+0x5c94>
   13790:	movw	r1, #11097	; 0x2b59
   13794:	sub	r0, fp, #72	; 0x48
   13798:	movt	r1, #2
   1379c:	bl	112a4 <strcmp@plt>
   137a0:	cmp	r0, #0
   137a4:	beq	17260 <__assert_fail@plt+0x5ca4>
   137a8:	movw	r1, #11105	; 0x2b61
   137ac:	sub	r0, fp, #72	; 0x48
   137b0:	movt	r1, #2
   137b4:	bl	112a4 <strcmp@plt>
   137b8:	cmp	r0, #0
   137bc:	beq	17270 <__assert_fail@plt+0x5cb4>
   137c0:	movw	r1, #11112	; 0x2b68
   137c4:	sub	r0, fp, #72	; 0x48
   137c8:	movt	r1, #2
   137cc:	bl	112a4 <strcmp@plt>
   137d0:	cmp	r0, #0
   137d4:	beq	17280 <__assert_fail@plt+0x5cc4>
   137d8:	movw	r1, #11118	; 0x2b6e
   137dc:	sub	r0, fp, #72	; 0x48
   137e0:	movt	r1, #2
   137e4:	bl	112a4 <strcmp@plt>
   137e8:	cmp	r0, #0
   137ec:	beq	17290 <__assert_fail@plt+0x5cd4>
   137f0:	movw	r1, #11124	; 0x2b74
   137f4:	sub	r0, fp, #72	; 0x48
   137f8:	movt	r1, #2
   137fc:	bl	112a4 <strcmp@plt>
   13800:	cmp	r0, #0
   13804:	beq	172a0 <__assert_fail@plt+0x5ce4>
   13808:	movw	r1, #11133	; 0x2b7d
   1380c:	sub	r0, fp, #72	; 0x48
   13810:	movt	r1, #2
   13814:	bl	112a4 <strcmp@plt>
   13818:	cmp	r0, #0
   1381c:	beq	172b0 <__assert_fail@plt+0x5cf4>
   13820:	movw	r1, #11141	; 0x2b85
   13824:	sub	r0, fp, #72	; 0x48
   13828:	movt	r1, #2
   1382c:	bl	112a4 <strcmp@plt>
   13830:	cmp	r0, #0
   13834:	beq	172c0 <__assert_fail@plt+0x5d04>
   13838:	movw	r1, #11145	; 0x2b89
   1383c:	sub	r0, fp, #72	; 0x48
   13840:	movt	r1, #2
   13844:	bl	112a4 <strcmp@plt>
   13848:	cmp	r0, #0
   1384c:	beq	172d0 <__assert_fail@plt+0x5d14>
   13850:	ldrb	r1, [fp, #-72]	; 0xffffffb8
   13854:	cmp	r8, #1
   13858:	bne	172e0 <__assert_fail@plt+0x5d24>
   1385c:	cmp	r1, #90	; 0x5a
   13860:	bhi	172e8 <__assert_fail@plt+0x5d2c>
   13864:	movw	r0, #9172	; 0x23d4
   13868:	add	r2, pc, #4
   1386c:	movt	r0, #2
   13870:	ldr	pc, [r2, r1, lsl #2]
   13874:	andeq	r7, r1, r0, ror #6
   13878:	andeq	r7, r1, r8, ror #5
   1387c:	andeq	r7, r1, r8, ror #5
   13880:	andeq	r7, r1, r8, ror #5
   13884:	andeq	r7, r1, r8, ror #5
   13888:	andeq	r7, r1, r8, ror #5
   1388c:	andeq	r7, r1, r8, ror #5
   13890:	andeq	r7, r1, r8, ror #5
   13894:	andeq	r7, r1, r8, ror #5
   13898:	andeq	r7, r1, r8, ror #5
   1389c:	andeq	r7, r1, r8, ror #5
   138a0:	andeq	r7, r1, r8, ror #5
   138a4:	andeq	r7, r1, r8, ror #5
   138a8:	andeq	r7, r1, r8, ror #5
   138ac:	andeq	r7, r1, r8, ror #5
   138b0:	andeq	r7, r1, r8, ror #5
   138b4:	andeq	r7, r1, r8, ror #5
   138b8:	andeq	r7, r1, r8, ror #5
   138bc:	andeq	r7, r1, r8, ror #5
   138c0:	andeq	r7, r1, r8, ror #5
   138c4:	andeq	r7, r1, r8, ror #5
   138c8:	andeq	r7, r1, r8, ror #5
   138cc:	andeq	r7, r1, r8, ror #5
   138d0:	andeq	r7, r1, r8, ror #5
   138d4:	andeq	r7, r1, r8, ror #5
   138d8:	andeq	r7, r1, r8, ror #5
   138dc:	andeq	r7, r1, r8, ror #5
   138e0:	andeq	r7, r1, r8, ror #5
   138e4:	andeq	r7, r1, r8, ror #5
   138e8:	andeq	r7, r1, r8, ror #5
   138ec:	andeq	r7, r1, r8, ror #5
   138f0:	andeq	r7, r1, r8, ror #5
   138f4:	andeq	r7, r1, r8, ror #5
   138f8:	andeq	r7, r1, r8, ror #5
   138fc:	andeq	r7, r1, r8, ror #5
   13900:	andeq	r7, r1, r8, ror #5
   13904:	andeq	r7, r1, r8, ror #5
   13908:	andeq	r7, r1, r8, ror #5
   1390c:	andeq	r7, r1, r8, ror #5
   13910:	andeq	r7, r1, r8, ror #5
   13914:	andeq	r7, r1, r8, ror #5
   13918:	andeq	r7, r1, r8, ror #5
   1391c:	andeq	r7, r1, r8, ror #5
   13920:	andeq	r7, r1, r8, ror #5
   13924:	andeq	r7, r1, r8, ror #5
   13928:	andeq	r7, r1, r8, ror #5
   1392c:	andeq	r7, r1, r8, ror #5
   13930:	andeq	r7, r1, r8, ror #5
   13934:	andeq	r7, r1, r8, ror #5
   13938:	andeq	r7, r1, r8, ror #5
   1393c:	andeq	r7, r1, r8, ror #5
   13940:	andeq	r7, r1, r8, ror #5
   13944:	andeq	r7, r1, r8, ror #5
   13948:	andeq	r7, r1, r8, ror #5
   1394c:	andeq	r7, r1, r8, ror #5
   13950:	andeq	r7, r1, r8, ror #5
   13954:	andeq	r7, r1, r8, ror #5
   13958:	andeq	r7, r1, r8, ror #5
   1395c:	andeq	r7, r1, r8, ror #5
   13960:	andeq	r7, r1, r8, ror #5
   13964:	andeq	r7, r1, r8, ror #5
   13968:	andeq	r7, r1, r8, ror #5
   1396c:	andeq	r7, r1, r8, ror #5
   13970:	andeq	r7, r1, r8, ror #5
   13974:	andeq	r7, r1, r8, ror #5
   13978:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   1397c:	andeq	r3, r1, r0, ror #19
   13980:	muleq	r1, r0, r3
   13984:	andeq	r7, r1, r0, lsr #7
   13988:			; <UNDEFINED> instruction: 0x000173b0
   1398c:	andeq	r7, r1, r0, asr #7
   13990:	ldrdeq	r7, [r1], -r0
   13994:	andeq	r7, r1, r0, ror #7
   13998:	strdeq	r7, [r1], -r0
   1399c:	andeq	r7, r1, r8, ror #5
   139a0:	andeq	r7, r1, r0, lsl #8
   139a4:	andeq	r7, r1, r0, lsl r4
   139a8:	andeq	r7, r1, r0, lsr #8
   139ac:	andeq	r7, r1, r0, lsr r4
   139b0:	andeq	r7, r1, r0, asr #8
   139b4:	andeq	r7, r1, r0, asr r4
   139b8:	andeq	r7, r1, r0, ror #8
   139bc:	andeq	r7, r1, r0, ror r4
   139c0:	andeq	r7, r1, r0, lsl #9
   139c4:	muleq	r1, r0, r4
   139c8:	andeq	r7, r1, r0, lsr #9
   139cc:			; <UNDEFINED> instruction: 0x000174b0
   139d0:	andeq	r7, r1, r0, asr #9
   139d4:	ldrdeq	r7, [r1], -r0
   139d8:	ldrdeq	r7, [r1], -ip
   139dc:	andeq	r7, r1, r8, ror #9
   139e0:	movw	r0, #9172	; 0x23d4
   139e4:	movt	r0, #2
   139e8:	b	13ab4 <__assert_fail@plt+0x24f8>
   139ec:	mov	ip, #1
   139f0:	mov	r6, r2
   139f4:	mov	r0, #0
   139f8:	cmn	r0, #1
   139fc:	ble	13a14 <__assert_fail@plt+0x2458>
   13a00:	movw	r3, #52428	; 0xcccc
   13a04:	movt	r3, #3276	; 0xccc
   13a08:	cmp	r0, r3
   13a0c:	ble	13a28 <__assert_fail@plt+0x246c>
   13a10:	b	13a9c <__assert_fail@plt+0x24e0>
   13a14:	beq	13a28 <__assert_fail@plt+0x246c>
   13a18:	mov	r3, #-2147483648	; 0x80000000
   13a1c:	sdiv	r3, r3, r0
   13a20:	cmp	r3, #10
   13a24:	blt	13a9c <__assert_fail@plt+0x24e0>
   13a28:	add	r3, r0, r0, lsl #2
   13a2c:	lsl	r0, r3, #1
   13a30:	uxtab	r0, r0, r1
   13a34:	sub	r0, r0, #48	; 0x30
   13a38:	cmp	r0, r3, lsl #1
   13a3c:	bvs	13a9c <__assert_fail@plt+0x24e0>
   13a40:	ldrb	r1, [r6, #1]!
   13a44:	sub	r3, r1, #48	; 0x30
   13a48:	cmp	r3, #10
   13a4c:	bcc	139f8 <__assert_fail@plt+0x243c>
   13a50:	sub	r7, r6, #1
   13a54:	mov	lr, #0
   13a58:	orr	r1, r1, #2
   13a5c:	cmp	r1, #46	; 0x2e
   13a60:	beq	12e54 <__assert_fail@plt+0x1898>
   13a64:	cmp	ip, #0
   13a68:	movw	r1, #274	; 0x112
   13a6c:	ldr	r3, [sp, #188]	; 0xbc
   13a70:	str	r6, [r4]
   13a74:	str	r0, [sp, #132]	; 0x84
   13a78:	movweq	r1, #275	; 0x113
   13a7c:	str	r1, [sp, #204]	; 0xcc
   13a80:	sub	r1, r6, r2
   13a84:	str	r1, [sp, #140]	; 0x8c
   13a88:	asr	r1, r0, #31
   13a8c:	str	r1, [sp, #136]	; 0x88
   13a90:	lsr	r1, ip, #31
   13a94:	str	r1, [sp, #192]	; 0xc0
   13a98:	b	13fdc <__assert_fail@plt+0x2a20>
   13a9c:	ldr	r3, [sp, #188]	; 0xbc
   13aa0:	mov	r0, #63	; 0x3f
   13aa4:	str	r0, [sp, #204]	; 0xcc
   13aa8:	b	13fdc <__assert_fail@plt+0x2a20>
   13aac:	movw	r0, #8416	; 0x20e0
   13ab0:	movt	r0, #2
   13ab4:	add	r0, r0, #12
   13ab8:	b	13f98 <__assert_fail@plt+0x29dc>
   13abc:	ldr	r6, [sp, #244]	; 0xf4
   13ac0:	b	13da4 <__assert_fail@plt+0x27e8>
   13ac4:	movw	r0, #8416	; 0x20e0
   13ac8:	movt	r0, #2
   13acc:	add	r0, r0, #24
   13ad0:	b	13f98 <__assert_fail@plt+0x29dc>
   13ad4:	movw	r0, #8416	; 0x20e0
   13ad8:	movt	r0, #2
   13adc:	add	r0, r0, #36	; 0x24
   13ae0:	b	13f98 <__assert_fail@plt+0x29dc>
   13ae4:	movw	r1, #10605	; 0x296d
   13ae8:	sub	r0, fp, #72	; 0x48
   13aec:	mov	r2, #3
   13af0:	movt	r1, #2
   13af4:	bl	11580 <strncmp@plt>
   13af8:	cmp	r0, #0
   13afc:	movw	r0, #8476	; 0x211c
   13b00:	movt	r0, #2
   13b04:	beq	13f98 <__assert_fail@plt+0x29dc>
   13b08:	movw	r1, #10613	; 0x2975
   13b0c:	sub	r6, fp, #72	; 0x48
   13b10:	mov	r2, #3
   13b14:	mov	r0, r6
   13b18:	movt	r1, #2
   13b1c:	bl	11580 <strncmp@plt>
   13b20:	cmp	r0, #0
   13b24:	beq	13e30 <__assert_fail@plt+0x2874>
   13b28:	movw	r1, #10622	; 0x297e
   13b2c:	mov	r0, r6
   13b30:	mov	r2, #3
   13b34:	movt	r1, #2
   13b38:	bl	11580 <strncmp@plt>
   13b3c:	cmp	r0, #0
   13b40:	beq	13e3c <__assert_fail@plt+0x2880>
   13b44:	movw	r1, #10628	; 0x2984
   13b48:	mov	r0, r6
   13b4c:	mov	r2, #3
   13b50:	movt	r1, #2
   13b54:	bl	11580 <strncmp@plt>
   13b58:	cmp	r0, #0
   13b5c:	beq	13e5c <__assert_fail@plt+0x28a0>
   13b60:	movw	r1, #10634	; 0x298a
   13b64:	mov	r0, r6
   13b68:	mov	r2, #3
   13b6c:	movt	r1, #2
   13b70:	bl	11580 <strncmp@plt>
   13b74:	cmp	r0, #0
   13b78:	beq	13e6c <__assert_fail@plt+0x28b0>
   13b7c:	movw	r1, #10638	; 0x298e
   13b80:	mov	r0, r6
   13b84:	mov	r2, #3
   13b88:	movt	r1, #2
   13b8c:	bl	11580 <strncmp@plt>
   13b90:	cmp	r0, #0
   13b94:	beq	13e7c <__assert_fail@plt+0x28c0>
   13b98:	movw	r1, #10643	; 0x2993
   13b9c:	mov	r0, r6
   13ba0:	mov	r2, #3
   13ba4:	movt	r1, #2
   13ba8:	bl	11580 <strncmp@plt>
   13bac:	cmp	r0, #0
   13bb0:	beq	13e8c <__assert_fail@plt+0x28d0>
   13bb4:	movw	r1, #10648	; 0x2998
   13bb8:	mov	r0, r6
   13bbc:	mov	r2, #3
   13bc0:	movt	r1, #2
   13bc4:	bl	11580 <strncmp@plt>
   13bc8:	cmp	r0, #0
   13bcc:	beq	13e9c <__assert_fail@plt+0x28e0>
   13bd0:	movw	r1, #10655	; 0x299f
   13bd4:	mov	r0, r6
   13bd8:	mov	r2, #3
   13bdc:	movt	r1, #2
   13be0:	bl	11580 <strncmp@plt>
   13be4:	cmp	r0, #0
   13be8:	beq	13eac <__assert_fail@plt+0x28f0>
   13bec:	movw	r1, #10665	; 0x29a9
   13bf0:	mov	r0, r6
   13bf4:	mov	r2, #3
   13bf8:	movt	r1, #2
   13bfc:	bl	11580 <strncmp@plt>
   13c00:	cmp	r0, #0
   13c04:	beq	13ebc <__assert_fail@plt+0x2900>
   13c08:	movw	r1, #10670	; 0x29ae
   13c0c:	mov	r0, r6
   13c10:	mov	r2, #3
   13c14:	movt	r1, #2
   13c18:	bl	11580 <strncmp@plt>
   13c1c:	cmp	r0, #0
   13c20:	beq	13ecc <__assert_fail@plt+0x2910>
   13c24:	movw	r1, #10678	; 0x29b6
   13c28:	mov	r0, r6
   13c2c:	mov	r2, #3
   13c30:	movt	r1, #2
   13c34:	bl	11580 <strncmp@plt>
   13c38:	cmp	r0, #0
   13c3c:	beq	13edc <__assert_fail@plt+0x2920>
   13c40:	movw	r1, #10687	; 0x29bf
   13c44:	sub	r0, fp, #72	; 0x48
   13c48:	mov	r2, #3
   13c4c:	movt	r1, #2
   13c50:	bl	11580 <strncmp@plt>
   13c54:	cmp	r0, #0
   13c58:	beq	13eec <__assert_fail@plt+0x2930>
   13c5c:	movw	r1, #10696	; 0x29c8
   13c60:	sub	r0, fp, #72	; 0x48
   13c64:	mov	r2, #3
   13c68:	movt	r1, #2
   13c6c:	bl	11580 <strncmp@plt>
   13c70:	cmp	r0, #0
   13c74:	beq	13efc <__assert_fail@plt+0x2940>
   13c78:	movw	r1, #10703	; 0x29cf
   13c7c:	sub	r0, fp, #72	; 0x48
   13c80:	mov	r2, #3
   13c84:	movt	r1, #2
   13c88:	bl	11580 <strncmp@plt>
   13c8c:	cmp	r0, #0
   13c90:	beq	13f0c <__assert_fail@plt+0x2950>
   13c94:	movw	r1, #10710	; 0x29d6
   13c98:	sub	r0, fp, #72	; 0x48
   13c9c:	mov	r2, #3
   13ca0:	movt	r1, #2
   13ca4:	bl	11580 <strncmp@plt>
   13ca8:	cmp	r0, #0
   13cac:	beq	13f1c <__assert_fail@plt+0x2960>
   13cb0:	movw	r1, #10718	; 0x29de
   13cb4:	sub	r0, fp, #72	; 0x48
   13cb8:	mov	r2, #3
   13cbc:	movt	r1, #2
   13cc0:	bl	11580 <strncmp@plt>
   13cc4:	cmp	r0, #0
   13cc8:	beq	13f2c <__assert_fail@plt+0x2970>
   13ccc:	movw	r1, #10723	; 0x29e3
   13cd0:	sub	r0, fp, #72	; 0x48
   13cd4:	mov	r2, #3
   13cd8:	movt	r1, #2
   13cdc:	bl	11580 <strncmp@plt>
   13ce0:	cmp	r0, #0
   13ce4:	beq	13f3c <__assert_fail@plt+0x2980>
   13ce8:	movw	r1, #10733	; 0x29ed
   13cec:	sub	r0, fp, #72	; 0x48
   13cf0:	mov	r2, #3
   13cf4:	movt	r1, #2
   13cf8:	bl	11580 <strncmp@plt>
   13cfc:	cmp	r0, #0
   13d00:	beq	13f4c <__assert_fail@plt+0x2990>
   13d04:	movw	r1, #10740	; 0x29f4
   13d08:	sub	r0, fp, #72	; 0x48
   13d0c:	mov	r2, #3
   13d10:	movt	r1, #2
   13d14:	bl	11580 <strncmp@plt>
   13d18:	cmp	r0, #0
   13d1c:	beq	13f5c <__assert_fail@plt+0x29a0>
   13d20:	movw	r1, #10749	; 0x29fd
   13d24:	sub	r0, fp, #72	; 0x48
   13d28:	mov	r2, #3
   13d2c:	movt	r1, #2
   13d30:	bl	11580 <strncmp@plt>
   13d34:	cmp	r0, #0
   13d38:	beq	13f6c <__assert_fail@plt+0x29b0>
   13d3c:	movw	r1, #10754	; 0x2a02
   13d40:	sub	r0, fp, #72	; 0x48
   13d44:	mov	r2, #3
   13d48:	movt	r1, #2
   13d4c:	bl	11580 <strncmp@plt>
   13d50:	cmp	r0, #0
   13d54:	beq	13f7c <__assert_fail@plt+0x29c0>
   13d58:	movw	r1, #10760	; 0x2a08
   13d5c:	sub	r0, fp, #72	; 0x48
   13d60:	mov	r2, #3
   13d64:	movt	r1, #2
   13d68:	bl	11580 <strncmp@plt>
   13d6c:	cmp	r0, #0
   13d70:	beq	13f8c <__assert_fail@plt+0x29d0>
   13d74:	movw	r1, #10767	; 0x2a0f
   13d78:	sub	r0, fp, #72	; 0x48
   13d7c:	mov	r2, #3
   13d80:	movt	r1, #2
   13d84:	bl	11580 <strncmp@plt>
   13d88:	cmp	r0, #0
   13d8c:	bne	13364 <__assert_fail@plt+0x1da8>
   13d90:	movw	r0, #8476	; 0x211c
   13d94:	movt	r0, #2
   13d98:	add	r0, r0, #276	; 0x114
   13d9c:	b	13f98 <__assert_fail@plt+0x29dc>
   13da0:	add	r3, r3, #1
   13da4:	sub	r1, r1, #1
   13da8:	ldrb	r2, [r1, #1]!
   13dac:	sub	r2, r2, #48	; 0x30
   13db0:	cmp	r2, #10
   13db4:	bcc	13da8 <__assert_fail@plt+0x27ec>
   13db8:	clz	r7, r3
   13dbc:	eor	r2, r8, #1
   13dc0:	lsr	r7, r7, #5
   13dc4:	orrs	r2, r2, r7
   13dc8:	bne	13de4 <__assert_fail@plt+0x2828>
   13dcc:	mov	r2, #63	; 0x3f
   13dd0:	cmp	r0, #1
   13dd4:	str	r2, [sp, #204]	; 0xcc
   13dd8:	bvc	13df0 <__assert_fail@plt+0x2834>
   13ddc:	ldr	r3, [sp, #188]	; 0xbc
   13de0:	b	13fdc <__assert_fail@plt+0x2a20>
   13de4:	mov	r2, r0
   13de8:	str	r3, [sp, #156]	; 0x9c
   13dec:	b	13e04 <__assert_fail@plt+0x2848>
   13df0:	sub	r2, r0, #1
   13df4:	movw	r0, #51712	; 0xca00
   13df8:	movt	r0, #15258	; 0x3b9a
   13dfc:	sub	r0, r0, r3
   13e00:	str	r0, [sp, #156]	; 0x9c
   13e04:	cmp	r6, #0
   13e08:	mov	r0, #276	; 0x114
   13e0c:	ldr	r3, [sp, #188]	; 0xbc
   13e10:	str	r1, [r4]
   13e14:	str	r2, [sp, #192]	; 0xc0
   13e18:	movweq	r0, #277	; 0x115
   13e1c:	str	r0, [sp, #204]	; 0xcc
   13e20:	mov	r0, r2
   13e24:	lsr	r0, r2, #8
   13e28:	str	r0, [sp, #152]	; 0x98
   13e2c:	b	13fdc <__assert_fail@plt+0x2a20>
   13e30:	movw	r0, #8476	; 0x211c
   13e34:	movt	r0, #2
   13e38:	b	13ab4 <__assert_fail@plt+0x24f8>
   13e3c:	movw	r0, #8476	; 0x211c
   13e40:	movt	r0, #2
   13e44:	add	r0, r0, #24
   13e48:	b	13f98 <__assert_fail@plt+0x29dc>
   13e4c:	add	r0, r6, #1
   13e50:	str	r0, [r4]
   13e54:	ldrb	r7, [r6]
   13e58:	b	13fb4 <__assert_fail@plt+0x29f8>
   13e5c:	movw	r0, #8476	; 0x211c
   13e60:	movt	r0, #2
   13e64:	add	r0, r0, #36	; 0x24
   13e68:	b	13f98 <__assert_fail@plt+0x29dc>
   13e6c:	movw	r0, #8476	; 0x211c
   13e70:	movt	r0, #2
   13e74:	add	r0, r0, #48	; 0x30
   13e78:	b	13f98 <__assert_fail@plt+0x29dc>
   13e7c:	movw	r0, #8476	; 0x211c
   13e80:	movt	r0, #2
   13e84:	add	r0, r0, #60	; 0x3c
   13e88:	b	13f98 <__assert_fail@plt+0x29dc>
   13e8c:	movw	r0, #8476	; 0x211c
   13e90:	movt	r0, #2
   13e94:	add	r0, r0, #72	; 0x48
   13e98:	b	13f98 <__assert_fail@plt+0x29dc>
   13e9c:	movw	r0, #8476	; 0x211c
   13ea0:	movt	r0, #2
   13ea4:	add	r0, r0, #84	; 0x54
   13ea8:	b	13f98 <__assert_fail@plt+0x29dc>
   13eac:	movw	r0, #8476	; 0x211c
   13eb0:	movt	r0, #2
   13eb4:	add	r0, r0, #96	; 0x60
   13eb8:	b	13f98 <__assert_fail@plt+0x29dc>
   13ebc:	movw	r0, #8476	; 0x211c
   13ec0:	movt	r0, #2
   13ec4:	add	r0, r0, #108	; 0x6c
   13ec8:	b	13f98 <__assert_fail@plt+0x29dc>
   13ecc:	movw	r0, #8476	; 0x211c
   13ed0:	movt	r0, #2
   13ed4:	add	r0, r0, #120	; 0x78
   13ed8:	b	13f98 <__assert_fail@plt+0x29dc>
   13edc:	movw	r0, #8476	; 0x211c
   13ee0:	movt	r0, #2
   13ee4:	add	r0, r0, #132	; 0x84
   13ee8:	b	13f98 <__assert_fail@plt+0x29dc>
   13eec:	movw	r0, #8476	; 0x211c
   13ef0:	movt	r0, #2
   13ef4:	add	r0, r0, #144	; 0x90
   13ef8:	b	13f98 <__assert_fail@plt+0x29dc>
   13efc:	movw	r0, #8476	; 0x211c
   13f00:	movt	r0, #2
   13f04:	add	r0, r0, #156	; 0x9c
   13f08:	b	13f98 <__assert_fail@plt+0x29dc>
   13f0c:	movw	r0, #8476	; 0x211c
   13f10:	movt	r0, #2
   13f14:	add	r0, r0, #168	; 0xa8
   13f18:	b	13f98 <__assert_fail@plt+0x29dc>
   13f1c:	movw	r0, #8476	; 0x211c
   13f20:	movt	r0, #2
   13f24:	add	r0, r0, #180	; 0xb4
   13f28:	b	13f98 <__assert_fail@plt+0x29dc>
   13f2c:	movw	r0, #8476	; 0x211c
   13f30:	movt	r0, #2
   13f34:	add	r0, r0, #192	; 0xc0
   13f38:	b	13f98 <__assert_fail@plt+0x29dc>
   13f3c:	movw	r0, #8476	; 0x211c
   13f40:	movt	r0, #2
   13f44:	add	r0, r0, #204	; 0xcc
   13f48:	b	13f98 <__assert_fail@plt+0x29dc>
   13f4c:	movw	r0, #8476	; 0x211c
   13f50:	movt	r0, #2
   13f54:	add	r0, r0, #216	; 0xd8
   13f58:	b	13f98 <__assert_fail@plt+0x29dc>
   13f5c:	movw	r0, #8476	; 0x211c
   13f60:	movt	r0, #2
   13f64:	add	r0, r0, #228	; 0xe4
   13f68:	b	13f98 <__assert_fail@plt+0x29dc>
   13f6c:	movw	r0, #8476	; 0x211c
   13f70:	movt	r0, #2
   13f74:	add	r0, r0, #240	; 0xf0
   13f78:	b	13f98 <__assert_fail@plt+0x29dc>
   13f7c:	movw	r0, #8476	; 0x211c
   13f80:	movt	r0, #2
   13f84:	add	r0, r0, #252	; 0xfc
   13f88:	b	13f98 <__assert_fail@plt+0x29dc>
   13f8c:	movw	r0, #8476	; 0x211c
   13f90:	movt	r0, #2
   13f94:	add	r0, r0, #264	; 0x108
   13f98:	ldr	r1, [r0, #8]
   13f9c:	ldr	r7, [r0, #4]
   13fa0:	asr	r0, r1, #31
   13fa4:	str	r1, [sp, #192]	; 0xc0
   13fa8:	str	r0, [sp, #156]	; 0x9c
   13fac:	lsr	r0, r1, #8
   13fb0:	str	r0, [sp, #152]	; 0x98
   13fb4:	ldr	r3, [sp, #188]	; 0xbc
   13fb8:	ldr	r0, [sp, #192]	; 0xc0
   13fbc:	cmp	r7, #1
   13fc0:	str	r0, [sp, #192]	; 0xc0
   13fc4:	blt	13ffc <__assert_fail@plt+0x2a40>
   13fc8:	lsr	r1, r7, #1
   13fcc:	mov	r0, #2
   13fd0:	str	r7, [sp, #204]	; 0xcc
   13fd4:	cmp	r1, #138	; 0x8a
   13fd8:	bhi	13fec <__assert_fail@plt+0x2a30>
   13fdc:	ldr	r1, [sp, #204]	; 0xcc
   13fe0:	movw	r0, #7378	; 0x1cd2
   13fe4:	movt	r0, #2
   13fe8:	ldrb	r0, [r0, r1]
   13fec:	add	r1, r0, r9
   13ff0:	cmp	r1, #112	; 0x70
   13ff4:	bhi	1404c <__assert_fail@plt+0x2a90>
   13ff8:	b	14014 <__assert_fail@plt+0x2a58>
   13ffc:	mov	r1, #0
   14000:	mov	r0, #0
   14004:	str	r1, [sp, #204]	; 0xcc
   14008:	add	r1, r0, r9
   1400c:	cmp	r1, #112	; 0x70
   14010:	bhi	1404c <__assert_fail@plt+0x2a90>
   14014:	movw	r2, #7656	; 0x1de8
   14018:	movt	r2, #2
   1401c:	add	r2, r2, r1
   14020:	ldrsb	r2, [r2]
   14024:	cmp	r0, r2
   14028:	bne	1404c <__assert_fail@plt+0x2a90>
   1402c:	movw	r0, #7769	; 0x1e59
   14030:	movt	r0, #2
   14034:	ldrb	sl, [r0, r1]
   14038:	orr	r0, r1, #4
   1403c:	cmp	r0, #111	; 0x6f
   14040:	bne	14254 <__assert_fail@plt+0x2c98>
   14044:	rsb	r6, sl, #0
   14048:	b	14060 <__assert_fail@plt+0x2aa4>
   1404c:	movw	r0, #7882	; 0x1eca
   14050:	movt	r0, #2
   14054:	ldrb	r6, [r0, sl]
   14058:	cmp	r6, #0
   1405c:	beq	17520 <__assert_fail@plt+0x5f64>
   14060:	movw	r0, #7996	; 0x1f3c
   14064:	mov	r1, r5
   14068:	str	r6, [sp, #208]	; 0xd0
   1406c:	movt	r0, #2
   14070:	ldrb	sl, [r0, r6]
   14074:	rsb	r0, sl, #1
   14078:	rsb	r0, r0, r0, lsl #3
   1407c:	ldr	r0, [r1, r0, lsl #3]!
   14080:	str	r0, [sp, #244]	; 0xf4
   14084:	ldr	r0, [r1, #44]	; 0x2c
   14088:	ldr	lr, [r1, #8]
   1408c:	ldr	r7, [r1, #12]
   14090:	ldr	r9, [r1, #16]
   14094:	ldr	r8, [r1, #20]
   14098:	ldr	r2, [r1, #24]
   1409c:	str	r0, [sp, #220]	; 0xdc
   140a0:	ldr	r0, [r1, #40]	; 0x28
   140a4:	str	r0, [sp, #228]	; 0xe4
   140a8:	ldr	r0, [r1, #36]	; 0x24
   140ac:	str	r0, [sp, #224]	; 0xe0
   140b0:	ldr	r0, [r1, #4]
   140b4:	str	r0, [sp, #240]	; 0xf0
   140b8:	ldr	r0, [r1, #28]
   140bc:	str	r0, [sp, #236]	; 0xec
   140c0:	ldr	r0, [r1, #32]
   140c4:	str	r0, [sp, #232]	; 0xe8
   140c8:	sub	r0, r6, #4
   140cc:	ldr	r6, [r1, #52]	; 0x34
   140d0:	ldr	r1, [r1, #48]	; 0x30
   140d4:	cmp	r0, #87	; 0x57
   140d8:	str	r6, [sp, #212]	; 0xd4
   140dc:	str	r1, [sp, #216]	; 0xd8
   140e0:	bhi	15fa4 <__assert_fail@plt+0x49e8>
   140e4:	add	r1, pc, #0
   140e8:	ldr	pc, [r1, r0, lsl #2]
   140ec:	strdeq	r5, [r1], -r0
   140f0:	andeq	r5, r1, r4, lsr #31
   140f4:	andeq	r5, r1, r4, lsr #31
   140f8:	andeq	r5, r1, r8, lsl sl
   140fc:	andeq	r5, r1, r4, lsl r5
   14100:	andeq	r5, r1, r0, lsl #23
   14104:	muleq	r1, r8, fp
   14108:	andeq	r5, r1, ip, ror #11
   1410c:	andeq	r5, r1, ip, lsr sl
   14110:	andeq	r5, r1, r4, asr sl
   14114:	andeq	r5, r1, r4, ror #24
   14118:	andeq	r5, r1, ip, ror #23
   1411c:	andeq	r5, r1, r4, lsr #31
   14120:	andeq	r5, r1, r4, lsr #31
   14124:	andeq	r4, r1, r8, ror #25
   14128:	andeq	r5, r1, r4, lsl #12
   1412c:	andeq	r5, r1, r0, lsr #9
   14130:	andeq	r5, r1, r4, lsr #31
   14134:	andeq	r4, r1, r8, lsl ip
   14138:			; <UNDEFINED> instruction: 0x00015ab0
   1413c:	andeq	r5, r1, r8, lsl #22
   14140:	andeq	r5, r1, r4, lsr #31
   14144:	andeq	r5, r1, r4, lsr #31
   14148:	andeq	r5, r1, r4, ror #25
   1414c:			; <UNDEFINED> instruction: 0x00015cb4
   14150:	andeq	r4, r1, r8, lsr #17
   14154:	andeq	r5, r1, r8, lsl #10
   14158:	andeq	r5, r1, r8, ror #27
   1415c:	andeq	r4, r1, r0, asr #17
   14160:	andeq	r5, r1, r8, ror #1
   14164:	andeq	r4, r1, r4, asr #24
   14168:	andeq	r5, r1, ip, ror r6
   1416c:	andeq	r4, r1, ip, lsr ip
   14170:	andeq	r6, r1, ip, asr #1
   14174:	strheq	r6, [r1], -r0
   14178:	muleq	r1, r0, sp
   1417c:	andeq	r5, r1, ip, lsr #10
   14180:	andeq	r5, r1, r8, ror fp
   14184:	andeq	r5, r1, r4, asr r5
   14188:	andeq	r6, r1, r0, lsl r1
   1418c:	andeq	r4, r1, ip, lsl #26
   14190:	andeq	r5, r1, r0, asr #25
   14194:	andeq	r6, r1, r8, ror #1
   14198:	andeq	r4, r1, ip, ror r8
   1419c:			; <UNDEFINED> instruction: 0x00015bb0
   141a0:	andeq	r5, r1, r4, lsr #31
   141a4:	andeq	r4, r1, r0, lsl #16
   141a8:	andeq	r4, r1, r0, lsr #9
   141ac:	muleq	r1, r8, sp
   141b0:	andeq	r5, r1, ip, lsl #13
   141b4:	muleq	r1, r4, sp
   141b8:	andeq	r4, r1, ip, asr #4
   141bc:	andeq	r5, r1, r0, ror #20
   141c0:	andeq	r5, r1, ip, asr #23
   141c4:	andeq	r4, r1, r0, asr #5
   141c8:	muleq	r1, r4, r4
   141cc:	andeq	r4, r1, r4, lsr r4
   141d0:	andeq	r6, r1, r0, lsl r2
   141d4:	andeq	r4, r1, r0, lsl r3
   141d8:	andeq	r5, r1, r4, lsr ip
   141dc:	andeq	r4, r1, r4, lsr #6
   141e0:	muleq	r1, r8, r0
   141e4:	andeq	r5, r1, r4, asr pc
   141e8:			; <UNDEFINED> instruction: 0x000142b0
   141ec:	andeq	r6, r1, r0, ror r2
   141f0:	strdeq	r5, [r1], -r8
   141f4:			; <UNDEFINED> instruction: 0x000142b8
   141f8:	andeq	r4, r1, ip, asr #5
   141fc:	andeq	r4, r1, ip, asr #5
   14200:	andeq	r6, r1, r8, ror r1
   14204:	andeq	r5, r1, r4, lsr #31
   14208:	andeq	r4, r1, ip, asr #4
   1420c:	andeq	r4, r1, r0, asr #5
   14210:			; <UNDEFINED> instruction: 0x000161b0
   14214:	andeq	r4, r1, r4, lsr #6
   14218:			; <UNDEFINED> instruction: 0x000142b0
   1421c:			; <UNDEFINED> instruction: 0x000142b8
   14220:	andeq	r4, r1, r0, lsl r3
   14224:	andeq	r5, r1, r4, lsr #31
   14228:	andeq	r5, r1, r4, lsr #31
   1422c:	andeq	r5, r1, r4, lsr #31
   14230:	andeq	r5, r1, r4, ror #12
   14234:	andeq	r5, r1, r4, lsr #31
   14238:	muleq	r1, r8, r2
   1423c:	andeq	r5, r1, r4, lsr lr
   14240:	andeq	r4, r1, r0, lsr r3
   14244:	muleq	r1, r8, r8
   14248:	andeq	r5, r1, r4, lsr #24
   1424c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   14250:	b	15d98 <__assert_fail@plt+0x47dc>
   14254:	ldr	r0, [sp, #192]	; 0xc0
   14258:	ldr	r1, [sp, #152]	; 0x98
   1425c:	uxtb	r0, r0
   14260:	orr	r0, r0, r1, lsl #8
   14264:	str	r0, [r5, #56]!	; 0x38
   14268:	ldr	r0, [sp, #156]	; 0x9c
   1426c:	str	r0, [r5, #4]
   14270:	ldr	r0, [sp, #132]	; 0x84
   14274:	str	r0, [r5, #8]
   14278:	ldr	r0, [sp, #136]	; 0x88
   1427c:	str	r0, [r5, #12]
   14280:	ldr	r0, [sp, #140]	; 0x8c
   14284:	str	r0, [r5, #16]
   14288:	mov	r0, #0
   1428c:	str	r0, [r5, #52]	; 0x34
   14290:	add	r0, r5, #36	; 0x24
   14294:	vst1.32	{d8-d9}, [r0]
   14298:	add	r0, r5, #20
   1429c:	vst1.32	{d8-d9}, [r0]
   142a0:	mvn	r0, #1
   142a4:	str	r0, [sp, #204]	; 0xcc
   142a8:	mov	r0, r3
   142ac:	b	1607c <__assert_fail@plt+0x4ac0>
   142b0:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   142b4:	b	15f58 <__assert_fail@plt+0x499c>
   142b8:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   142bc:	b	15dfc <__assert_fail@plt+0x4840>
   142c0:	ldr	lr, [r5, #-48]	; 0xffffffd0
   142c4:	ldr	r7, [r5, #-44]	; 0xffffffd4
   142c8:	b	15bd4 <__assert_fail@plt+0x4618>
   142cc:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   142d0:	mov	lr, #0
   142d4:	mov	r7, #0
   142d8:	mov	r9, #0
   142dc:	mov	r8, #0
   142e0:	mov	r2, #0
   142e4:	str	r0, [sp, #228]	; 0xe4
   142e8:	asr	r0, r0, #31
   142ec:	str	r1, [sp, #216]	; 0xd8
   142f0:	str	r0, [sp, #220]	; 0xdc
   142f4:	mov	r0, #0
   142f8:	str	r0, [sp, #236]	; 0xec
   142fc:	mov	r0, #0
   14300:	str	r0, [sp, #232]	; 0xe8
   14304:	mov	r0, #0
   14308:	str	r0, [sp, #224]	; 0xe0
   1430c:	b	15f94 <__assert_fail@plt+0x49d8>
   14310:	ldr	r9, [r5]
   14314:	ldr	r8, [r5, #4]
   14318:	mov	lr, #0
   1431c:	mov	r7, #0
   14320:	b	15bdc <__assert_fail@plt+0x4620>
   14324:	ldr	r2, [r5, #-48]	; 0xffffffd0
   14328:	ldr	r0, [r5, #-44]	; 0xffffffd4
   1432c:	b	15c3c <__assert_fail@plt+0x4680>
   14330:	ldr	r0, [r5, #-40]	; 0xffffffd8
   14334:	sub	r1, r5, #56	; 0x38
   14338:	str	r3, [sp, #188]	; 0xbc
   1433c:	str	sl, [sp, #172]	; 0xac
   14340:	str	lr, [sp, #180]	; 0xb4
   14344:	str	r9, [sp, #176]	; 0xb0
   14348:	str	r7, [sp, #168]	; 0xa8
   1434c:	str	r8, [sp, #184]	; 0xb8
   14350:	str	r2, [sp, #196]	; 0xc4
   14354:	vld1.64	{d16-d17}, [r1]
   14358:	str	r0, [sp, #80]	; 0x50
   1435c:	ldr	r0, [r4, #156]	; 0x9c
   14360:	cmp	r0, #0
   14364:	beq	143a0 <__assert_fail@plt+0x2de4>
   14368:	ldr	r1, [sp, #96]	; 0x60
   1436c:	ldr	r1, [r1]
   14370:	cmp	r1, #0
   14374:	bne	143a0 <__assert_fail@plt+0x2de4>
   14378:	ldrb	r1, [r4, #153]	; 0x99
   1437c:	cmp	r1, #0
   14380:	bne	143a0 <__assert_fail@plt+0x2de4>
   14384:	ldr	r1, [sp, #80]	; 0x50
   14388:	ldr	r6, [r5, #-36]	; 0xffffffdc
   1438c:	cmp	r1, #2
   14390:	bgt	1712c <__assert_fail@plt+0x5b70>
   14394:	ldr	r2, [r4, #172]	; 0xac
   14398:	cmp	r2, #0
   1439c:	bne	1712c <__assert_fail@plt+0x5b70>
   143a0:	ldr	r1, [sp, #80]	; 0x50
   143a4:	cmp	r1, #5
   143a8:	blt	16360 <__assert_fail@plt+0x4da4>
   143ac:	add	r0, r0, #1
   143b0:	vmov.32	r6, d17[0]
   143b4:	vmov.32	r9, d17[1]
   143b8:	mov	r8, r1
   143bc:	mov	r2, #100	; 0x64
   143c0:	mov	r3, #0
   143c4:	mov	r7, #100	; 0x64
   143c8:	str	r0, [r4, #156]	; 0x9c
   143cc:	mov	r0, r6
   143d0:	mov	r1, r9
   143d4:	bl	20f14 <__assert_fail@plt+0xf958>
   143d8:	umull	r2, r3, r0, r7
   143dc:	mla	r3, r1, r7, r3
   143e0:	ldr	r7, [sp, #160]	; 0xa0
   143e4:	subs	r2, r6, r2
   143e8:	sbc	r3, r9, r3
   143ec:	strd	r2, [r7]
   143f0:	mov	r2, #100	; 0x64
   143f4:	mov	r3, #0
   143f8:	bl	20f14 <__assert_fail@plt+0xf958>
   143fc:	mov	r0, r2
   14400:	ldr	r2, [sp, #164]	; 0xa4
   14404:	mov	r1, r3
   14408:	mov	r3, #0
   1440c:	strd	r0, [r2]
   14410:	mov	r0, r6
   14414:	mov	r1, r9
   14418:	movw	r2, #10000	; 0x2710
   1441c:	bl	20f14 <__assert_fail@plt+0xf958>
   14420:	ldr	r2, [sp, #92]	; 0x5c
   14424:	strd	r0, [r2]
   14428:	sub	r0, r8, #4
   1442c:	str	r0, [r4, #48]	; 0x30
   14430:	b	1688c <__assert_fail@plt+0x52d0>
   14434:	str	sl, [sp, #172]	; 0xac
   14438:	ldm	r5, {r2, sl}
   1443c:	cmn	sl, #1
   14440:	ble	163cc <__assert_fail@plt+0x4e10>
   14444:	ldr	r9, [r5, #-56]	; 0xffffffc8
   14448:	ldr	r8, [r5, #-52]	; 0xffffffcc
   1444c:	orrs	r0, r2, sl
   14450:	beq	162b0 <__assert_fail@plt+0x4cf4>
   14454:	cmn	r8, #1
   14458:	ble	16ce8 <__assert_fail@plt+0x572c>
   1445c:	mov	r6, r3
   14460:	mvn	r0, #0
   14464:	mvn	r1, #-2147483648	; 0x80000000
   14468:	mov	r3, sl
   1446c:	mov	r7, r2
   14470:	bl	20fe8 <__assert_fail@plt+0xfa2c>
   14474:	subs	r0, r0, r9
   14478:	mov	r2, r7
   1447c:	mov	r3, r6
   14480:	mov	r6, r9
   14484:	mov	r7, r8
   14488:	sbcs	r0, r1, r8
   1448c:	bge	162b8 <__assert_fail@plt+0x4cfc>
   14490:	b	1764c <__assert_fail@plt+0x6090>
   14494:	mov	r7, #0
   14498:	mov	lr, #1
   1449c:	b	15bd4 <__assert_fail@plt+0x4618>
   144a0:	str	r2, [sp, #196]	; 0xc4
   144a4:	ldr	r2, [r5, #-56]	; 0xffffffc8
   144a8:	str	r7, [sp, #168]	; 0xa8
   144ac:	ldr	r7, [r5]
   144b0:	str	lr, [sp, #180]	; 0xb4
   144b4:	str	sl, [sp, #172]	; 0xac
   144b8:	str	r3, [sp, #188]	; 0xbc
   144bc:	ldr	r3, [r4, #144]	; 0x90
   144c0:	ldr	r0, [r5, #-12]
   144c4:	ldr	r1, [r5, #-16]
   144c8:	ldr	lr, [r5, #-20]	; 0xffffffec
   144cc:	ldr	ip, [r5, #-24]	; 0xffffffe8
   144d0:	ldr	sl, [r5, #-28]	; 0xffffffe4
   144d4:	ldr	r6, [r5, #-8]
   144d8:	str	r8, [sp, #184]	; 0xb8
   144dc:	str	r9, [sp, #176]	; 0xb0
   144e0:	str	r2, [sp, #64]	; 0x40
   144e4:	ldr	r2, [r5, #-52]	; 0xffffffcc
   144e8:	cmn	r7, #1
   144ec:	str	r3, [sp, #68]	; 0x44
   144f0:	str	r2, [sp, #80]	; 0x50
   144f4:	ldr	r2, [r5, #-48]	; 0xffffffd0
   144f8:	str	r2, [sp, #60]	; 0x3c
   144fc:	ldr	r2, [r5, #-44]	; 0xffffffd4
   14500:	str	r2, [sp, #72]	; 0x48
   14504:	ldr	r2, [r5, #-40]	; 0xffffffd8
   14508:	str	r2, [sp, #56]	; 0x38
   1450c:	ldr	r2, [r5, #-36]	; 0xffffffdc
   14510:	str	r2, [sp, #76]	; 0x4c
   14514:	ldr	r2, [r5, #-32]	; 0xffffffe0
   14518:	ble	16414 <__assert_fail@plt+0x4e58>
   1451c:	ldr	r7, [sp, #108]	; 0x6c
   14520:	add	r6, r3, r6
   14524:	str	r6, [sp, #52]	; 0x34
   14528:	str	r6, [r4, #144]	; 0x90
   1452c:	ldr	r8, [r7]
   14530:	ldr	r3, [r7, #4]
   14534:	str	r0, [sp, #28]
   14538:	adds	r8, r8, r1
   1453c:	adc	r9, r3, r0
   14540:	strd	r8, [r7]
   14544:	ldr	r6, [sp, #112]	; 0x70
   14548:	ldr	r8, [r6]
   1454c:	ldr	r7, [r6, #4]
   14550:	str	lr, [sp, #36]	; 0x24
   14554:	adds	r8, r8, ip
   14558:	adc	lr, r7, lr
   1455c:	stm	r6, {r8, lr}
   14560:	ldr	r6, [sp, #116]	; 0x74
   14564:	ldr	r8, [r6]
   14568:	ldr	r0, [r6, #4]
   1456c:	str	sl, [sp, #40]	; 0x28
   14570:	adds	r8, r8, r2
   14574:	str	r0, [sp, #32]
   14578:	adc	ip, r0, sl
   1457c:	stm	r6, {r8, ip}
   14580:	ldr	sl, [sp, #120]	; 0x78
   14584:	ldr	r8, [sl]
   14588:	ldr	r2, [sl, #4]
   1458c:	ldr	r0, [sp, #56]	; 0x38
   14590:	adds	r6, r8, r0
   14594:	ldr	r0, [sp, #76]	; 0x4c
   14598:	adc	r0, r2, r0
   1459c:	str	r0, [sp, #44]	; 0x2c
   145a0:	str	r6, [sl]
   145a4:	str	r0, [sl, #4]
   145a8:	ldr	r8, [sp, #124]	; 0x7c
   145ac:	ldr	r6, [r8]
   145b0:	ldr	r0, [r8, #4]
   145b4:	ldr	r1, [sp, #60]	; 0x3c
   145b8:	ldr	sl, [sp, #72]	; 0x48
   145bc:	adds	r6, r6, r1
   145c0:	str	r0, [sp, #48]	; 0x30
   145c4:	adc	r0, r0, sl
   145c8:	str	r0, [sp, #56]	; 0x38
   145cc:	str	r6, [r8]
   145d0:	str	r0, [r8, #4]
   145d4:	ldr	r8, [sp, #128]	; 0x80
   145d8:	ldr	r6, [r8]
   145dc:	ldr	r1, [r8, #4]
   145e0:	ldr	r0, [sp, #64]	; 0x40
   145e4:	adds	r6, r6, r0
   145e8:	ldr	r0, [sp, #80]	; 0x50
   145ec:	str	r1, [sp, #60]	; 0x3c
   145f0:	adc	r0, r1, r0
   145f4:	cmn	r3, #1
   145f8:	mov	r1, #0
   145fc:	mov	r3, #0
   14600:	str	r0, [sp, #64]	; 0x40
   14604:	str	r6, [r8]
   14608:	str	r0, [r8, #4]
   1460c:	mov	r0, #0
   14610:	mov	r8, #0
   14614:	mov	r6, #0
   14618:	movwgt	r0, #1
   1461c:	cmn	r9, #1
   14620:	movwgt	r1, #1
   14624:	str	r0, [sp, #24]
   14628:	subs	r0, r0, r1
   1462c:	mov	r1, #0
   14630:	movwne	r0, #1
   14634:	str	r0, [sp, #20]
   14638:	ldr	r0, [sp, #28]
   1463c:	cmn	r0, #1
   14640:	mov	r0, #0
   14644:	movwgt	r0, #1
   14648:	cmn	r7, #1
   1464c:	movwgt	r1, #1
   14650:	str	r0, [sp, #28]
   14654:	cmn	lr, #1
   14658:	mov	r0, #0
   1465c:	mov	lr, #0
   14660:	movwgt	r0, #1
   14664:	str	r1, [sp, #16]
   14668:	subs	r0, r1, r0
   1466c:	mov	r1, #0
   14670:	movwne	r0, #1
   14674:	str	r0, [sp, #12]
   14678:	ldr	r0, [sp, #36]	; 0x24
   1467c:	cmn	r0, #1
   14680:	mov	r0, #0
   14684:	movwgt	r0, #1
   14688:	str	r0, [sp, #36]	; 0x24
   1468c:	ldr	r0, [sp, #32]
   14690:	cmn	r0, #1
   14694:	mov	r0, #0
   14698:	movwgt	r1, #1
   1469c:	cmn	ip, #1
   146a0:	mov	ip, #0
   146a4:	movwgt	r0, #1
   146a8:	str	r1, [sp, #32]
   146ac:	subs	r0, r1, r0
   146b0:	mov	r1, #0
   146b4:	movwne	r0, #1
   146b8:	str	r0, [sp, #8]
   146bc:	ldr	r0, [sp, #40]	; 0x28
   146c0:	cmn	r0, #1
   146c4:	ldr	r0, [sp, #44]	; 0x2c
   146c8:	movwgt	lr, #1
   146cc:	cmn	r2, #1
   146d0:	mov	r2, #0
   146d4:	movwgt	r8, #1
   146d8:	cmn	r0, #1
   146dc:	mov	r0, #0
   146e0:	movwgt	r0, #1
   146e4:	subs	r0, r8, r0
   146e8:	movwne	r0, #1
   146ec:	str	r0, [sp, #44]	; 0x2c
   146f0:	ldr	r0, [sp, #76]	; 0x4c
   146f4:	cmn	r0, #1
   146f8:	ldr	r0, [sp, #48]	; 0x30
   146fc:	movwgt	r3, #1
   14700:	cmn	r0, #1
   14704:	ldr	r0, [sp, #56]	; 0x38
   14708:	movwgt	ip, #1
   1470c:	cmn	r0, #1
   14710:	ldr	r0, [sp, #60]	; 0x3c
   14714:	movwgt	r1, #1
   14718:	subs	r7, ip, r1
   1471c:	mov	r1, #0
   14720:	movwne	r7, #1
   14724:	cmn	sl, #1
   14728:	mov	sl, #0
   1472c:	movwgt	sl, #1
   14730:	cmn	r0, #1
   14734:	ldr	r0, [sp, #64]	; 0x40
   14738:	movwgt	r2, #1
   1473c:	cmn	r0, #1
   14740:	ldr	r0, [sp, #80]	; 0x50
   14744:	movwgt	r1, #1
   14748:	subs	r1, r2, r1
   1474c:	movwne	r1, #1
   14750:	cmn	r0, #1
   14754:	ldr	r0, [sp, #52]	; 0x34
   14758:	movwgt	r6, #1
   1475c:	str	r6, [sp, #80]	; 0x50
   14760:	ldr	r6, [sp, #68]	; 0x44
   14764:	cmp	r0, r6
   14768:	bvs	179a8 <__assert_fail@plt+0x63ec>
   1476c:	ldr	r0, [sp, #24]
   14770:	ldr	r6, [sp, #28]
   14774:	sub	r0, r0, r6
   14778:	ldr	r6, [sp, #20]
   1477c:	clz	r0, r0
   14780:	lsr	r0, r0, #5
   14784:	ands	r0, r0, r6
   14788:	bne	179bc <__assert_fail@plt+0x6400>
   1478c:	ldr	r0, [sp, #16]
   14790:	ldr	r6, [sp, #36]	; 0x24
   14794:	sub	r0, r0, r6
   14798:	ldr	r6, [sp, #12]
   1479c:	clz	r0, r0
   147a0:	lsr	r0, r0, #5
   147a4:	ands	r0, r0, r6
   147a8:	bne	178b8 <__assert_fail@plt+0x62fc>
   147ac:	ldr	r0, [sp, #32]
   147b0:	ldr	r6, [sp, #8]
   147b4:	sub	r0, r0, lr
   147b8:	clz	r0, r0
   147bc:	lsr	r0, r0, #5
   147c0:	ands	r0, r0, r6
   147c4:	bne	1782c <__assert_fail@plt+0x6270>
   147c8:	sub	r0, r8, r3
   147cc:	ldr	r3, [sp, #44]	; 0x2c
   147d0:	clz	r0, r0
   147d4:	lsr	r0, r0, #5
   147d8:	ands	r0, r0, r3
   147dc:	bne	17764 <__assert_fail@plt+0x61a8>
   147e0:	sub	r0, ip, sl
   147e4:	clz	r0, r0
   147e8:	lsr	r0, r0, #5
   147ec:	ands	r0, r0, r7
   147f0:	bne	17660 <__assert_fail@plt+0x60a4>
   147f4:	ldr	r0, [sp, #80]	; 0x50
   147f8:	sub	r0, r2, r0
   147fc:	b	159e0 <__assert_fail@plt+0x4424>
   14800:	sub	r0, r5, #112	; 0x70
   14804:	vldr	d18, [r5, #-96]	; 0xffffffa0
   14808:	str	r2, [sp, #196]	; 0xc4
   1480c:	ldr	r2, [sp, #164]	; 0xa4
   14810:	str	r7, [sp, #168]	; 0xa8
   14814:	mov	r7, r3
   14818:	vld1.64	{d16-d17}, [r0]
   1481c:	ldr	r0, [sp, #104]	; 0x68
   14820:	vst1.64	{d16-d17}, [r0]!
   14824:	vstr	d18, [r0]
   14828:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   1482c:	rsbs	r0, r0, #0
   14830:	rsc	r3, r1, #0
   14834:	and	r1, r1, r3
   14838:	stm	r2, {r0, r3}
   1483c:	mov	r0, #1
   14840:	cmp	r1, #0
   14844:	blt	174fc <__assert_fail@plt+0x5f40>
   14848:	ldrd	r0, [r5, #8]
   1484c:	ldr	r2, [sp, #160]	; 0xa0
   14850:	rsbs	r0, r0, #0
   14854:	rsc	r3, r1, #0
   14858:	stm	r2, {r0, r3}
   1485c:	and	r1, r1, r3
   14860:	mov	r3, r7
   14864:	mov	r0, #1
   14868:	ldr	r7, [sp, #168]	; 0xa8
   1486c:	ldr	r2, [sp, #196]	; 0xc4
   14870:	cmp	r1, #0
   14874:	bge	15fa4 <__assert_fail@plt+0x49e8>
   14878:	b	174fc <__assert_fail@plt+0x5f40>
   1487c:	str	r2, [sp, #196]	; 0xc4
   14880:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   14884:	ldr	r2, [sp, #160]	; 0xa0
   14888:	strd	r0, [r2]
   1488c:	ldrd	r0, [r5]
   14890:	ldr	r2, [sp, #164]	; 0xa4
   14894:	b	15cd8 <__assert_fail@plt+0x471c>
   14898:	mvn	r0, #0
   1489c:	str	r0, [sp, #244]	; 0xf4
   148a0:	mvn	r0, #0
   148a4:	b	15fa0 <__assert_fail@plt+0x49e4>
   148a8:	mov	r0, #1
   148ac:	str	r0, [r4, #20]
   148b0:	ldr	r0, [r4, #168]	; 0xa8
   148b4:	add	r0, r0, #1
   148b8:	str	r0, [r4, #168]	; 0xa8
   148bc:	b	15fa4 <__assert_fail@plt+0x49e8>
   148c0:	ldr	r0, [r5, #-56]	; 0xffffffc8
   148c4:	str	r2, [sp, #196]	; 0xc4
   148c8:	str	lr, [sp, #180]	; 0xb4
   148cc:	str	sl, [sp, #172]	; 0xac
   148d0:	str	r8, [sp, #184]	; 0xb8
   148d4:	str	r9, [sp, #176]	; 0xb0
   148d8:	str	r7, [sp, #168]	; 0xa8
   148dc:	str	r3, [sp, #188]	; 0xbc
   148e0:	str	r0, [r4, #24]
   148e4:	ldr	r1, [r4, #144]	; 0x90
   148e8:	ldr	r0, [r5, #48]	; 0x30
   148ec:	ldr	sl, [r5, #4]
   148f0:	ldr	lr, [r5, #12]
   148f4:	ldr	ip, [r5, #20]
   148f8:	ldr	r6, [r5, #36]	; 0x24
   148fc:	ldr	r2, [r5, #44]	; 0x2c
   14900:	ldr	r8, [r5, #32]
   14904:	ldr	r9, [r5, #40]	; 0x28
   14908:	add	r0, r1, r0
   1490c:	str	r1, [sp, #80]	; 0x50
   14910:	ldr	r1, [r5]
   14914:	str	sl, [sp, #72]	; 0x48
   14918:	str	lr, [sp, #64]	; 0x40
   1491c:	str	ip, [sp, #52]	; 0x34
   14920:	str	r6, [sp, #32]
   14924:	str	r2, [sp, #28]
   14928:	str	r0, [sp, #76]	; 0x4c
   1492c:	str	r1, [sp, #68]	; 0x44
   14930:	ldr	r1, [r5, #8]
   14934:	str	r1, [sp, #60]	; 0x3c
   14938:	ldr	r1, [r5, #16]
   1493c:	str	r1, [sp, #56]	; 0x38
   14940:	ldr	r1, [r5, #24]
   14944:	str	r1, [sp, #48]	; 0x30
   14948:	ldr	r1, [r5, #28]
   1494c:	str	r0, [r4, #144]	; 0x90
   14950:	ldr	r0, [sp, #108]	; 0x6c
   14954:	str	r1, [sp, #40]	; 0x28
   14958:	ldm	r0, {r3, r7}
   1495c:	adds	r9, r3, r9
   14960:	adc	r3, r7, r2
   14964:	str	r9, [r0]
   14968:	str	r3, [r0, #4]
   1496c:	ldr	r9, [sp, #112]	; 0x70
   14970:	ldm	r9, {r0, r2}
   14974:	adds	r0, r0, r8
   14978:	str	r2, [sp, #24]
   1497c:	adc	r6, r2, r6
   14980:	stm	r9, {r0, r6}
   14984:	ldr	r0, [sp, #116]	; 0x74
   14988:	ldr	r2, [sp, #48]	; 0x30
   1498c:	ldrd	r8, [r0]
   14990:	adds	r8, r8, r2
   14994:	adc	r1, r9, r1
   14998:	str	r1, [sp, #36]	; 0x24
   1499c:	str	r8, [r0]
   149a0:	str	r1, [r0, #4]
   149a4:	ldr	r0, [sp, #120]	; 0x78
   149a8:	ldr	r8, [r0]
   149ac:	ldr	r2, [r0, #4]
   149b0:	ldr	r1, [sp, #56]	; 0x38
   149b4:	adds	r8, r8, r1
   149b8:	adc	r1, r2, ip
   149bc:	str	r1, [sp, #44]	; 0x2c
   149c0:	str	r8, [r0]
   149c4:	str	r1, [r0, #4]
   149c8:	ldr	ip, [sp, #124]	; 0x7c
   149cc:	ldr	r8, [ip]
   149d0:	ldr	r0, [ip, #4]
   149d4:	ldr	r1, [sp, #60]	; 0x3c
   149d8:	adds	r8, r8, r1
   149dc:	str	r0, [sp, #48]	; 0x30
   149e0:	adc	r1, r0, lr
   149e4:	mov	lr, #0
   149e8:	str	r1, [sp, #56]	; 0x38
   149ec:	str	r8, [ip]
   149f0:	str	r1, [ip, #4]
   149f4:	ldr	ip, [sp, #128]	; 0x80
   149f8:	ldr	r8, [ip]
   149fc:	ldr	r0, [ip, #4]
   14a00:	ldr	r1, [sp, #68]	; 0x44
   14a04:	adds	r8, r8, r1
   14a08:	str	r0, [sp, #60]	; 0x3c
   14a0c:	mov	r1, #0
   14a10:	adc	r0, r0, sl
   14a14:	cmn	r7, #1
   14a18:	mov	sl, #0
   14a1c:	str	r0, [sp, #68]	; 0x44
   14a20:	str	r8, [ip]
   14a24:	str	r0, [ip, #4]
   14a28:	mov	r0, #0
   14a2c:	mov	r8, #0
   14a30:	mov	ip, #0
   14a34:	movwgt	r0, #1
   14a38:	cmn	r3, #1
   14a3c:	mov	r3, #0
   14a40:	movwgt	r3, #1
   14a44:	str	r0, [sp, #20]
   14a48:	subs	r0, r0, r3
   14a4c:	mov	r3, #0
   14a50:	movwne	r0, #1
   14a54:	str	r0, [sp, #16]
   14a58:	ldr	r0, [sp, #28]
   14a5c:	cmn	r0, #1
   14a60:	mov	r0, #0
   14a64:	movwgt	r0, #1
   14a68:	str	r0, [sp, #28]
   14a6c:	ldr	r0, [sp, #24]
   14a70:	cmn	r0, #1
   14a74:	mov	r0, #0
   14a78:	movwgt	r1, #1
   14a7c:	cmn	r6, #1
   14a80:	ldr	r6, [sp, #76]	; 0x4c
   14a84:	movwgt	r0, #1
   14a88:	str	r1, [sp, #24]
   14a8c:	subs	r0, r1, r0
   14a90:	mov	r1, #0
   14a94:	movwne	r0, #1
   14a98:	str	r0, [sp, #12]
   14a9c:	ldr	r0, [sp, #32]
   14aa0:	cmn	r0, #1
   14aa4:	mov	r0, #0
   14aa8:	movwgt	r0, #1
   14aac:	cmn	r9, #1
   14ab0:	str	r0, [sp, #32]
   14ab4:	ldr	r0, [sp, #36]	; 0x24
   14ab8:	movwgt	r1, #1
   14abc:	str	r1, [sp, #36]	; 0x24
   14ac0:	cmn	r0, #1
   14ac4:	mov	r0, #0
   14ac8:	movwgt	r0, #1
   14acc:	subs	r0, r1, r0
   14ad0:	mov	r1, #0
   14ad4:	movwne	r0, #1
   14ad8:	str	r0, [sp, #8]
   14adc:	ldr	r0, [sp, #40]	; 0x28
   14ae0:	cmn	r0, #1
   14ae4:	ldr	r0, [sp, #44]	; 0x2c
   14ae8:	movwgt	lr, #1
   14aec:	cmn	r2, #1
   14af0:	mov	r2, #0
   14af4:	movwgt	r8, #1
   14af8:	cmn	r0, #1
   14afc:	mov	r0, #0
   14b00:	movwgt	r0, #1
   14b04:	subs	r0, r8, r0
   14b08:	movwne	r0, #1
   14b0c:	str	r0, [sp, #44]	; 0x2c
   14b10:	ldr	r0, [sp, #52]	; 0x34
   14b14:	cmn	r0, #1
   14b18:	ldr	r0, [sp, #48]	; 0x30
   14b1c:	movwgt	ip, #1
   14b20:	cmn	r0, #1
   14b24:	ldr	r0, [sp, #56]	; 0x38
   14b28:	movwgt	r2, #1
   14b2c:	cmn	r0, #1
   14b30:	ldr	r0, [sp, #64]	; 0x40
   14b34:	movwgt	r1, #1
   14b38:	subs	r7, r2, r1
   14b3c:	mov	r1, #0
   14b40:	movwne	r7, #1
   14b44:	cmn	r0, #1
   14b48:	ldr	r0, [sp, #60]	; 0x3c
   14b4c:	movwgt	sl, #1
   14b50:	cmn	r0, #1
   14b54:	ldr	r0, [sp, #68]	; 0x44
   14b58:	movwgt	r3, #1
   14b5c:	cmn	r0, #1
   14b60:	ldr	r0, [sp, #72]	; 0x48
   14b64:	movwgt	r1, #1
   14b68:	subs	r1, r3, r1
   14b6c:	movwne	r1, #1
   14b70:	cmn	r0, #1
   14b74:	mov	r0, #0
   14b78:	movwgt	r0, #1
   14b7c:	str	r0, [sp, #72]	; 0x48
   14b80:	ldr	r0, [sp, #80]	; 0x50
   14b84:	cmp	r6, r0
   14b88:	bvs	17980 <__assert_fail@plt+0x63c4>
   14b8c:	ldr	r0, [sp, #20]
   14b90:	ldr	r6, [sp, #28]
   14b94:	sub	r0, r0, r6
   14b98:	ldr	r6, [sp, #16]
   14b9c:	clz	r0, r0
   14ba0:	lsr	r0, r0, #5
   14ba4:	ands	r0, r0, r6
   14ba8:	bne	178e0 <__assert_fail@plt+0x6324>
   14bac:	ldr	r0, [sp, #24]
   14bb0:	ldr	r6, [sp, #32]
   14bb4:	sub	r0, r0, r6
   14bb8:	ldr	r6, [sp, #12]
   14bbc:	clz	r0, r0
   14bc0:	lsr	r0, r0, #5
   14bc4:	ands	r0, r0, r6
   14bc8:	bne	17890 <__assert_fail@plt+0x62d4>
   14bcc:	ldr	r0, [sp, #36]	; 0x24
   14bd0:	ldr	r6, [sp, #8]
   14bd4:	sub	r0, r0, lr
   14bd8:	clz	r0, r0
   14bdc:	lsr	r0, r0, #5
   14be0:	ands	r0, r0, r6
   14be4:	bne	177c8 <__assert_fail@plt+0x620c>
   14be8:	ldr	r6, [sp, #44]	; 0x2c
   14bec:	sub	r0, r8, ip
   14bf0:	clz	r0, r0
   14bf4:	lsr	r0, r0, #5
   14bf8:	ands	r0, r0, r6
   14bfc:	bne	176b0 <__assert_fail@plt+0x60f4>
   14c00:	sub	r0, r2, sl
   14c04:	clz	r0, r0
   14c08:	lsr	r0, r0, #5
   14c0c:	ands	r0, r0, r7
   14c10:	beq	15440 <__assert_fail@plt+0x3e84>
   14c14:	b	175fc <__assert_fail@plt+0x6040>
   14c18:	str	r2, [sp, #196]	; 0xc4
   14c1c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   14c20:	ldr	r2, [sp, #144]	; 0x90
   14c24:	vmov.i32	q8, #0	; 0x00000000
   14c28:	strd	r0, [r2]
   14c2c:	ldr	r2, [sp, #196]	; 0xc4
   14c30:	ldr	r0, [sp, #148]	; 0x94
   14c34:	vst1.64	{d16-d17}, [r0]
   14c38:	b	15b6c <__assert_fail@plt+0x45b0>
   14c3c:	ldr	r0, [r5, #-56]	; 0xffffffc8
   14c40:	b	15680 <__assert_fail@plt+0x40c4>
   14c44:	ldr	r1, [r5, #-40]	; 0xffffffd8
   14c48:	str	r7, [sp, #168]	; 0xa8
   14c4c:	ldr	r7, [r5, #4]
   14c50:	ldr	r0, [r5, #-48]	; 0xffffffd0
   14c54:	ldr	r6, [r5, #-44]	; 0xffffffd4
   14c58:	str	r2, [sp, #196]	; 0xc4
   14c5c:	mov	r2, #0
   14c60:	str	r9, [sp, #176]	; 0xb0
   14c64:	mov	r9, #100	; 0x64
   14c68:	str	r3, [sp, #188]	; 0xbc
   14c6c:	str	lr, [sp, #180]	; 0xb4
   14c70:	cmp	r1, #3
   14c74:	mov	r1, #0
   14c78:	movwlt	r1, #1
   14c7c:	cmp	r7, #0
   14c80:	movwlt	r2, #1
   14c84:	ands	r1, r2, r1
   14c88:	mov	r2, r6
   14c8c:	umull	r6, r1, r0, r9
   14c90:	mlane	r2, r2, r9, r1
   14c94:	moveq	r6, r0
   14c98:	cmn	r7, #1
   14c9c:	ble	16700 <__assert_fail@plt+0x5144>
   14ca0:	ldr	r0, [r5, #-56]	; 0xffffffc8
   14ca4:	ldr	ip, [r5]
   14ca8:	cmn	r2, #1
   14cac:	str	r7, [sp, #80]	; 0x50
   14cb0:	str	sl, [sp, #172]	; 0xac
   14cb4:	str	r8, [sp, #184]	; 0xb8
   14cb8:	str	r0, [sp, #76]	; 0x4c
   14cbc:	ble	16c70 <__assert_fail@plt+0x56b4>
   14cc0:	movw	r1, #8738	; 0x2222
   14cc4:	movw	r0, #8738	; 0x2222
   14cc8:	mov	r3, #1
   14ccc:	mov	r7, r6
   14cd0:	movt	r1, #8738	; 0x2222
   14cd4:	movt	r0, #546	; 0x222
   14cd8:	subs	r1, r1, r6
   14cdc:	sbcs	r0, r0, r2
   14ce0:	bge	16c80 <__assert_fail@plt+0x56c4>
   14ce4:	b	16e9c <__assert_fail@plt+0x58e0>
   14ce8:	str	r2, [sp, #196]	; 0xc4
   14cec:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   14cf0:	ldr	r2, [sp, #144]	; 0x90
   14cf4:	vmov.i32	q8, #0	; 0x00000000
   14cf8:	strd	r0, [r2]
   14cfc:	ldr	r2, [sp, #196]	; 0xc4
   14d00:	ldr	r0, [sp, #148]	; 0x94
   14d04:	vst1.64	{d16-d17}, [r0]
   14d08:	b	15658 <__assert_fail@plt+0x409c>
   14d0c:	str	r2, [sp, #196]	; 0xc4
   14d10:	ldrd	r0, [r5, #-112]	; 0xffffff90
   14d14:	ldr	r2, [sp, #164]	; 0xa4
   14d18:	str	r8, [sp, #184]	; 0xb8
   14d1c:	mov	r8, r7
   14d20:	mov	r7, r3
   14d24:	strd	r0, [r2]
   14d28:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   14d2c:	ldr	r2, [sp, #160]	; 0xa0
   14d30:	rsbs	r0, r0, #0
   14d34:	rsc	r3, r1, #0
   14d38:	and	r1, r1, r3
   14d3c:	stm	r2, {r0, r3}
   14d40:	mov	r0, #1
   14d44:	cmp	r1, #0
   14d48:	blt	174fc <__assert_fail@plt+0x5f40>
   14d4c:	ldrd	r0, [r5, #8]
   14d50:	ldr	r2, [sp, #92]	; 0x5c
   14d54:	rsbs	r0, r0, #0
   14d58:	rsc	r3, r1, #0
   14d5c:	stm	r2, {r0, r3}
   14d60:	and	r1, r1, r3
   14d64:	mov	r3, r7
   14d68:	mov	r7, r8
   14d6c:	mov	r0, #1
   14d70:	ldr	r8, [sp, #184]	; 0xb8
   14d74:	ldr	r2, [sp, #196]	; 0xc4
   14d78:	cmp	r1, #0
   14d7c:	blt	174fc <__assert_fail@plt+0x5f40>
   14d80:	ldr	r0, [r5, #16]
   14d84:	ldr	r1, [sp, #96]	; 0x60
   14d88:	str	r0, [r1]
   14d8c:	b	15fa4 <__assert_fail@plt+0x49e8>
   14d90:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   14d94:	b	15530 <__assert_fail@plt+0x3f74>
   14d98:	ldr	r1, [r4, #144]	; 0x90
   14d9c:	ldr	r0, [r5, #48]	; 0x30
   14da0:	str	r2, [sp, #196]	; 0xc4
   14da4:	str	lr, [sp, #180]	; 0xb4
   14da8:	str	sl, [sp, #172]	; 0xac
   14dac:	ldr	sl, [r5, #4]
   14db0:	ldr	lr, [r5, #12]
   14db4:	ldr	ip, [r5, #20]
   14db8:	ldr	r6, [r5, #36]	; 0x24
   14dbc:	ldr	r2, [r5, #44]	; 0x2c
   14dc0:	str	r8, [sp, #184]	; 0xb8
   14dc4:	str	r9, [sp, #176]	; 0xb0
   14dc8:	ldr	r8, [r5, #32]
   14dcc:	ldr	r9, [r5, #40]	; 0x28
   14dd0:	str	r7, [sp, #168]	; 0xa8
   14dd4:	str	r3, [sp, #188]	; 0xbc
   14dd8:	add	r0, r1, r0
   14ddc:	str	r1, [sp, #80]	; 0x50
   14de0:	ldr	r1, [r5]
   14de4:	str	sl, [sp, #72]	; 0x48
   14de8:	str	lr, [sp, #64]	; 0x40
   14dec:	str	ip, [sp, #52]	; 0x34
   14df0:	str	r6, [sp, #32]
   14df4:	str	r2, [sp, #28]
   14df8:	str	r0, [sp, #76]	; 0x4c
   14dfc:	str	r1, [sp, #68]	; 0x44
   14e00:	ldr	r1, [r5, #8]
   14e04:	str	r1, [sp, #60]	; 0x3c
   14e08:	ldr	r1, [r5, #16]
   14e0c:	str	r1, [sp, #56]	; 0x38
   14e10:	ldr	r1, [r5, #24]
   14e14:	str	r1, [sp, #48]	; 0x30
   14e18:	ldr	r1, [r5, #28]
   14e1c:	str	r0, [r4, #144]	; 0x90
   14e20:	ldr	r0, [sp, #108]	; 0x6c
   14e24:	str	r1, [sp, #40]	; 0x28
   14e28:	ldm	r0, {r3, r7}
   14e2c:	adds	r9, r3, r9
   14e30:	adc	r3, r7, r2
   14e34:	str	r9, [r0]
   14e38:	str	r3, [r0, #4]
   14e3c:	ldr	r9, [sp, #112]	; 0x70
   14e40:	ldm	r9, {r0, r2}
   14e44:	adds	r0, r0, r8
   14e48:	str	r2, [sp, #24]
   14e4c:	adc	r6, r2, r6
   14e50:	stm	r9, {r0, r6}
   14e54:	ldr	r0, [sp, #116]	; 0x74
   14e58:	ldr	r2, [sp, #48]	; 0x30
   14e5c:	ldrd	r8, [r0]
   14e60:	adds	r8, r8, r2
   14e64:	adc	r1, r9, r1
   14e68:	str	r1, [sp, #36]	; 0x24
   14e6c:	str	r8, [r0]
   14e70:	str	r1, [r0, #4]
   14e74:	ldr	r0, [sp, #120]	; 0x78
   14e78:	ldr	r8, [r0]
   14e7c:	ldr	r2, [r0, #4]
   14e80:	ldr	r1, [sp, #56]	; 0x38
   14e84:	adds	r8, r8, r1
   14e88:	adc	r1, r2, ip
   14e8c:	str	r1, [sp, #44]	; 0x2c
   14e90:	str	r8, [r0]
   14e94:	str	r1, [r0, #4]
   14e98:	ldr	ip, [sp, #124]	; 0x7c
   14e9c:	ldr	r8, [ip]
   14ea0:	ldr	r0, [ip, #4]
   14ea4:	ldr	r1, [sp, #60]	; 0x3c
   14ea8:	adds	r8, r8, r1
   14eac:	str	r0, [sp, #48]	; 0x30
   14eb0:	adc	r1, r0, lr
   14eb4:	mov	lr, #0
   14eb8:	str	r1, [sp, #56]	; 0x38
   14ebc:	str	r8, [ip]
   14ec0:	str	r1, [ip, #4]
   14ec4:	ldr	ip, [sp, #128]	; 0x80
   14ec8:	ldr	r8, [ip]
   14ecc:	ldr	r0, [ip, #4]
   14ed0:	ldr	r1, [sp, #68]	; 0x44
   14ed4:	adds	r8, r8, r1
   14ed8:	str	r0, [sp, #60]	; 0x3c
   14edc:	mov	r1, #0
   14ee0:	adc	r0, r0, sl
   14ee4:	cmn	r7, #1
   14ee8:	mov	sl, #0
   14eec:	str	r0, [sp, #68]	; 0x44
   14ef0:	str	r8, [ip]
   14ef4:	str	r0, [ip, #4]
   14ef8:	mov	r0, #0
   14efc:	mov	r8, #0
   14f00:	mov	ip, #0
   14f04:	movwgt	r0, #1
   14f08:	cmn	r3, #1
   14f0c:	mov	r3, #0
   14f10:	movwgt	r3, #1
   14f14:	str	r0, [sp, #20]
   14f18:	subs	r0, r0, r3
   14f1c:	mov	r3, #0
   14f20:	movwne	r0, #1
   14f24:	str	r0, [sp, #16]
   14f28:	ldr	r0, [sp, #28]
   14f2c:	cmn	r0, #1
   14f30:	mov	r0, #0
   14f34:	movwgt	r0, #1
   14f38:	str	r0, [sp, #28]
   14f3c:	ldr	r0, [sp, #24]
   14f40:	cmn	r0, #1
   14f44:	mov	r0, #0
   14f48:	movwgt	r1, #1
   14f4c:	cmn	r6, #1
   14f50:	ldr	r6, [sp, #76]	; 0x4c
   14f54:	movwgt	r0, #1
   14f58:	str	r1, [sp, #24]
   14f5c:	subs	r0, r1, r0
   14f60:	mov	r1, #0
   14f64:	movwne	r0, #1
   14f68:	str	r0, [sp, #12]
   14f6c:	ldr	r0, [sp, #32]
   14f70:	cmn	r0, #1
   14f74:	mov	r0, #0
   14f78:	movwgt	r0, #1
   14f7c:	cmn	r9, #1
   14f80:	str	r0, [sp, #32]
   14f84:	ldr	r0, [sp, #36]	; 0x24
   14f88:	movwgt	r1, #1
   14f8c:	str	r1, [sp, #36]	; 0x24
   14f90:	cmn	r0, #1
   14f94:	mov	r0, #0
   14f98:	movwgt	r0, #1
   14f9c:	subs	r0, r1, r0
   14fa0:	mov	r1, #0
   14fa4:	movwne	r0, #1
   14fa8:	str	r0, [sp, #8]
   14fac:	ldr	r0, [sp, #40]	; 0x28
   14fb0:	cmn	r0, #1
   14fb4:	ldr	r0, [sp, #44]	; 0x2c
   14fb8:	movwgt	lr, #1
   14fbc:	cmn	r2, #1
   14fc0:	mov	r2, #0
   14fc4:	movwgt	r8, #1
   14fc8:	cmn	r0, #1
   14fcc:	mov	r0, #0
   14fd0:	movwgt	r0, #1
   14fd4:	subs	r0, r8, r0
   14fd8:	movwne	r0, #1
   14fdc:	str	r0, [sp, #44]	; 0x2c
   14fe0:	ldr	r0, [sp, #52]	; 0x34
   14fe4:	cmn	r0, #1
   14fe8:	ldr	r0, [sp, #48]	; 0x30
   14fec:	movwgt	ip, #1
   14ff0:	cmn	r0, #1
   14ff4:	ldr	r0, [sp, #56]	; 0x38
   14ff8:	movwgt	r2, #1
   14ffc:	cmn	r0, #1
   15000:	ldr	r0, [sp, #64]	; 0x40
   15004:	movwgt	r1, #1
   15008:	subs	r7, r2, r1
   1500c:	mov	r1, #0
   15010:	movwne	r7, #1
   15014:	cmn	r0, #1
   15018:	ldr	r0, [sp, #60]	; 0x3c
   1501c:	movwgt	sl, #1
   15020:	cmn	r0, #1
   15024:	ldr	r0, [sp, #68]	; 0x44
   15028:	movwgt	r3, #1
   1502c:	cmn	r0, #1
   15030:	ldr	r0, [sp, #72]	; 0x48
   15034:	movwgt	r1, #1
   15038:	subs	r1, r3, r1
   1503c:	movwne	r1, #1
   15040:	cmn	r0, #1
   15044:	mov	r0, #0
   15048:	movwgt	r0, #1
   1504c:	str	r0, [sp, #72]	; 0x48
   15050:	ldr	r0, [sp, #80]	; 0x50
   15054:	cmp	r6, r0
   15058:	bvs	17958 <__assert_fail@plt+0x639c>
   1505c:	ldr	r0, [sp, #20]
   15060:	ldr	r6, [sp, #28]
   15064:	sub	r0, r0, r6
   15068:	ldr	r6, [sp, #16]
   1506c:	clz	r0, r0
   15070:	lsr	r0, r0, #5
   15074:	ands	r0, r0, r6
   15078:	bne	17908 <__assert_fail@plt+0x634c>
   1507c:	ldr	r0, [sp, #24]
   15080:	ldr	r6, [sp, #32]
   15084:	sub	r0, r0, r6
   15088:	ldr	r6, [sp, #12]
   1508c:	clz	r0, r0
   15090:	lsr	r0, r0, #5
   15094:	ands	r0, r0, r6
   15098:	bne	17854 <__assert_fail@plt+0x6298>
   1509c:	ldr	r0, [sp, #36]	; 0x24
   150a0:	ldr	r6, [sp, #8]
   150a4:	sub	r0, r0, lr
   150a8:	clz	r0, r0
   150ac:	lsr	r0, r0, #5
   150b0:	ands	r0, r0, r6
   150b4:	bne	177b4 <__assert_fail@plt+0x61f8>
   150b8:	ldr	r6, [sp, #44]	; 0x2c
   150bc:	sub	r0, r8, ip
   150c0:	clz	r0, r0
   150c4:	lsr	r0, r0, #5
   150c8:	ands	r0, r0, r6
   150cc:	bne	17700 <__assert_fail@plt+0x6144>
   150d0:	sub	r0, r2, sl
   150d4:	clz	r0, r0
   150d8:	lsr	r0, r0, #5
   150dc:	ands	r0, r0, r7
   150e0:	beq	159d8 <__assert_fail@plt+0x441c>
   150e4:	b	175c0 <__assert_fail@plt+0x6004>
   150e8:	movw	r0, #40336	; 0x9d90
   150ec:	str	r2, [sp, #196]	; 0xc4
   150f0:	str	lr, [sp, #180]	; 0xb4
   150f4:	str	sl, [sp, #172]	; 0xac
   150f8:	str	r8, [sp, #184]	; 0xb8
   150fc:	str	r9, [sp, #176]	; 0xb0
   15100:	str	r7, [sp, #168]	; 0xa8
   15104:	str	r3, [sp, #188]	; 0xbc
   15108:	movt	r0, #65535	; 0xffff
   1510c:	str	r0, [r4, #24]
   15110:	ldr	r1, [r4, #144]	; 0x90
   15114:	ldr	r0, [r5, #48]	; 0x30
   15118:	ldr	sl, [r5, #4]
   1511c:	ldr	lr, [r5, #12]
   15120:	ldr	ip, [r5, #20]
   15124:	ldr	r6, [r5, #36]	; 0x24
   15128:	ldr	r2, [r5, #44]	; 0x2c
   1512c:	ldr	r8, [r5, #32]
   15130:	ldr	r9, [r5, #40]	; 0x28
   15134:	add	r0, r1, r0
   15138:	str	r1, [sp, #80]	; 0x50
   1513c:	ldr	r1, [r5]
   15140:	str	sl, [sp, #72]	; 0x48
   15144:	str	lr, [sp, #64]	; 0x40
   15148:	str	ip, [sp, #52]	; 0x34
   1514c:	str	r6, [sp, #32]
   15150:	str	r2, [sp, #28]
   15154:	str	r0, [sp, #76]	; 0x4c
   15158:	str	r1, [sp, #68]	; 0x44
   1515c:	ldr	r1, [r5, #8]
   15160:	str	r1, [sp, #60]	; 0x3c
   15164:	ldr	r1, [r5, #16]
   15168:	str	r1, [sp, #56]	; 0x38
   1516c:	ldr	r1, [r5, #24]
   15170:	str	r1, [sp, #48]	; 0x30
   15174:	ldr	r1, [r5, #28]
   15178:	str	r0, [r4, #144]	; 0x90
   1517c:	ldr	r0, [sp, #108]	; 0x6c
   15180:	str	r1, [sp, #40]	; 0x28
   15184:	ldm	r0, {r3, r7}
   15188:	adds	r9, r3, r9
   1518c:	adc	r3, r7, r2
   15190:	str	r9, [r0]
   15194:	str	r3, [r0, #4]
   15198:	ldr	r9, [sp, #112]	; 0x70
   1519c:	ldm	r9, {r0, r2}
   151a0:	adds	r0, r0, r8
   151a4:	str	r2, [sp, #24]
   151a8:	adc	r6, r2, r6
   151ac:	stm	r9, {r0, r6}
   151b0:	ldr	r0, [sp, #116]	; 0x74
   151b4:	ldr	r2, [sp, #48]	; 0x30
   151b8:	ldrd	r8, [r0]
   151bc:	adds	r8, r8, r2
   151c0:	adc	r1, r9, r1
   151c4:	str	r1, [sp, #36]	; 0x24
   151c8:	str	r8, [r0]
   151cc:	str	r1, [r0, #4]
   151d0:	ldr	r0, [sp, #120]	; 0x78
   151d4:	ldr	r8, [r0]
   151d8:	ldr	r2, [r0, #4]
   151dc:	ldr	r1, [sp, #56]	; 0x38
   151e0:	adds	r8, r8, r1
   151e4:	adc	r1, r2, ip
   151e8:	str	r1, [sp, #44]	; 0x2c
   151ec:	str	r8, [r0]
   151f0:	str	r1, [r0, #4]
   151f4:	ldr	ip, [sp, #124]	; 0x7c
   151f8:	ldr	r8, [ip]
   151fc:	ldr	r0, [ip, #4]
   15200:	ldr	r1, [sp, #60]	; 0x3c
   15204:	adds	r8, r8, r1
   15208:	str	r0, [sp, #48]	; 0x30
   1520c:	adc	r1, r0, lr
   15210:	mov	lr, #0
   15214:	str	r1, [sp, #56]	; 0x38
   15218:	str	r8, [ip]
   1521c:	str	r1, [ip, #4]
   15220:	ldr	ip, [sp, #128]	; 0x80
   15224:	ldr	r8, [ip]
   15228:	ldr	r0, [ip, #4]
   1522c:	ldr	r1, [sp, #68]	; 0x44
   15230:	adds	r8, r8, r1
   15234:	str	r0, [sp, #60]	; 0x3c
   15238:	mov	r1, #0
   1523c:	adc	r0, r0, sl
   15240:	cmn	r7, #1
   15244:	mov	sl, #0
   15248:	str	r0, [sp, #68]	; 0x44
   1524c:	str	r8, [ip]
   15250:	str	r0, [ip, #4]
   15254:	mov	r0, #0
   15258:	mov	r8, #0
   1525c:	mov	ip, #0
   15260:	movwgt	r0, #1
   15264:	cmn	r3, #1
   15268:	mov	r3, #0
   1526c:	movwgt	r3, #1
   15270:	str	r0, [sp, #20]
   15274:	subs	r0, r0, r3
   15278:	mov	r3, #0
   1527c:	movwne	r0, #1
   15280:	str	r0, [sp, #16]
   15284:	ldr	r0, [sp, #28]
   15288:	cmn	r0, #1
   1528c:	mov	r0, #0
   15290:	movwgt	r0, #1
   15294:	str	r0, [sp, #28]
   15298:	ldr	r0, [sp, #24]
   1529c:	cmn	r0, #1
   152a0:	mov	r0, #0
   152a4:	movwgt	r1, #1
   152a8:	cmn	r6, #1
   152ac:	ldr	r6, [sp, #76]	; 0x4c
   152b0:	movwgt	r0, #1
   152b4:	str	r1, [sp, #24]
   152b8:	subs	r0, r1, r0
   152bc:	mov	r1, #0
   152c0:	movwne	r0, #1
   152c4:	str	r0, [sp, #12]
   152c8:	ldr	r0, [sp, #32]
   152cc:	cmn	r0, #1
   152d0:	mov	r0, #0
   152d4:	movwgt	r0, #1
   152d8:	cmn	r9, #1
   152dc:	str	r0, [sp, #32]
   152e0:	ldr	r0, [sp, #36]	; 0x24
   152e4:	movwgt	r1, #1
   152e8:	str	r1, [sp, #36]	; 0x24
   152ec:	cmn	r0, #1
   152f0:	mov	r0, #0
   152f4:	movwgt	r0, #1
   152f8:	subs	r0, r1, r0
   152fc:	mov	r1, #0
   15300:	movwne	r0, #1
   15304:	str	r0, [sp, #8]
   15308:	ldr	r0, [sp, #40]	; 0x28
   1530c:	cmn	r0, #1
   15310:	ldr	r0, [sp, #44]	; 0x2c
   15314:	movwgt	lr, #1
   15318:	cmn	r2, #1
   1531c:	mov	r2, #0
   15320:	movwgt	r8, #1
   15324:	cmn	r0, #1
   15328:	mov	r0, #0
   1532c:	movwgt	r0, #1
   15330:	subs	r0, r8, r0
   15334:	movwne	r0, #1
   15338:	str	r0, [sp, #44]	; 0x2c
   1533c:	ldr	r0, [sp, #52]	; 0x34
   15340:	cmn	r0, #1
   15344:	ldr	r0, [sp, #48]	; 0x30
   15348:	movwgt	ip, #1
   1534c:	cmn	r0, #1
   15350:	ldr	r0, [sp, #56]	; 0x38
   15354:	movwgt	r2, #1
   15358:	cmn	r0, #1
   1535c:	ldr	r0, [sp, #64]	; 0x40
   15360:	movwgt	r1, #1
   15364:	subs	r7, r2, r1
   15368:	mov	r1, #0
   1536c:	movwne	r7, #1
   15370:	cmn	r0, #1
   15374:	ldr	r0, [sp, #60]	; 0x3c
   15378:	movwgt	sl, #1
   1537c:	cmn	r0, #1
   15380:	ldr	r0, [sp, #68]	; 0x44
   15384:	movwgt	r3, #1
   15388:	cmn	r0, #1
   1538c:	ldr	r0, [sp, #72]	; 0x48
   15390:	movwgt	r1, #1
   15394:	subs	r1, r3, r1
   15398:	movwne	r1, #1
   1539c:	cmn	r0, #1
   153a0:	mov	r0, #0
   153a4:	movwgt	r0, #1
   153a8:	str	r0, [sp, #72]	; 0x48
   153ac:	ldr	r0, [sp, #80]	; 0x50
   153b0:	cmp	r6, r0
   153b4:	bvs	178f4 <__assert_fail@plt+0x6338>
   153b8:	ldr	r0, [sp, #20]
   153bc:	ldr	r6, [sp, #28]
   153c0:	sub	r0, r0, r6
   153c4:	ldr	r6, [sp, #16]
   153c8:	clz	r0, r0
   153cc:	lsr	r0, r0, #5
   153d0:	ands	r0, r0, r6
   153d4:	bne	178cc <__assert_fail@plt+0x6310>
   153d8:	ldr	r0, [sp, #24]
   153dc:	ldr	r6, [sp, #32]
   153e0:	sub	r0, r0, r6
   153e4:	ldr	r6, [sp, #12]
   153e8:	clz	r0, r0
   153ec:	lsr	r0, r0, #5
   153f0:	ands	r0, r0, r6
   153f4:	bne	17840 <__assert_fail@plt+0x6284>
   153f8:	ldr	r0, [sp, #36]	; 0x24
   153fc:	ldr	r6, [sp, #8]
   15400:	sub	r0, r0, lr
   15404:	clz	r0, r0
   15408:	lsr	r0, r0, #5
   1540c:	ands	r0, r0, r6
   15410:	bne	177f0 <__assert_fail@plt+0x6234>
   15414:	ldr	r6, [sp, #44]	; 0x2c
   15418:	sub	r0, r8, ip
   1541c:	clz	r0, r0
   15420:	lsr	r0, r0, #5
   15424:	ands	r0, r0, r6
   15428:	bne	176ec <__assert_fail@plt+0x6130>
   1542c:	sub	r0, r2, sl
   15430:	clz	r0, r0
   15434:	lsr	r0, r0, #5
   15438:	ands	r0, r0, r7
   1543c:	bne	175e8 <__assert_fail@plt+0x602c>
   15440:	ldr	r0, [sp, #72]	; 0x48
   15444:	ldr	sl, [sp, #172]	; 0xac
   15448:	ldr	r9, [sp, #176]	; 0xb0
   1544c:	ldr	r7, [sp, #168]	; 0xa8
   15450:	ldr	r8, [sp, #184]	; 0xb8
   15454:	sub	r0, r3, r0
   15458:	clz	r0, r0
   1545c:	lsr	r0, r0, #5
   15460:	ands	r0, r0, r1
   15464:	mov	r0, #1
   15468:	bne	174fc <__assert_fail@plt+0x5f40>
   1546c:	movw	r1, #10150	; 0x27a6
   15470:	mov	r0, #1
   15474:	mov	r2, #5
   15478:	strb	r0, [r4, #153]	; 0x99
   1547c:	movt	r1, #2
   15480:	mov	r0, #0
   15484:	bl	11328 <dcgettext@plt>
   15488:	mov	r1, r4
   1548c:	bl	17f74 <__assert_fail@plt+0x69b8>
   15490:	ldr	r2, [sp, #196]	; 0xc4
   15494:	ldr	r3, [sp, #188]	; 0xbc
   15498:	ldr	lr, [sp, #180]	; 0xb4
   1549c:	b	15fa4 <__assert_fail@plt+0x49e8>
   154a0:	str	sl, [sp, #172]	; 0xac
   154a4:	str	lr, [sp, #180]	; 0xb4
   154a8:	mov	r1, r3
   154ac:	mov	ip, r7
   154b0:	ldr	r0, [r5, #-56]	; 0xffffffc8
   154b4:	ldr	sl, [r5, #-52]	; 0xffffffcc
   154b8:	str	r2, [sp, #196]	; 0xc4
   154bc:	ldr	r2, [r5, #-272]	; 0xfffffef0
   154c0:	ldr	r3, [r5, #-268]	; 0xfffffef4
   154c4:	str	r8, [sp, #184]	; 0xb8
   154c8:	ldrd	r6, [r5, #-160]	; 0xffffff60
   154cc:	str	r0, [sp, #80]	; 0x50
   154d0:	ldr	r0, [sp, #144]	; 0x90
   154d4:	strd	r2, [r0]
   154d8:	mov	r3, r1
   154dc:	ldr	r2, [sp, #148]	; 0x94
   154e0:	strd	r6, [r2]
   154e4:	mov	r7, ip
   154e8:	ldr	r0, [sp, #80]	; 0x50
   154ec:	ldr	r2, [sp, #196]	; 0xc4
   154f0:	ldr	r8, [sp, #184]	; 0xb8
   154f4:	str	r0, [r4, #88]	; 0x58
   154f8:	str	sl, [r4, #92]	; 0x5c
   154fc:	ldr	sl, [sp, #172]	; 0xac
   15500:	ldr	lr, [sp, #180]	; 0xb4
   15504:	b	15658 <__assert_fail@plt+0x409c>
   15508:	ldr	r0, [r5]
   1550c:	str	r0, [r4, #24]
   15510:	b	15fa4 <__assert_fail@plt+0x49e8>
   15514:	ldr	r0, [r4, #172]	; 0xac
   15518:	movw	r1, #5993	; 0x1769
   1551c:	movt	r1, #2
   15520:	add	r0, r0, #1
   15524:	str	r0, [r4, #172]	; 0xac
   15528:	b	15c6c <__assert_fail@plt+0x46b0>
   1552c:	ldrd	r0, [r5, #-48]	; 0xffffffd0
   15530:	str	r2, [sp, #196]	; 0xc4
   15534:	ldr	r2, [sp, #100]	; 0x64
   15538:	strd	r0, [r2]
   1553c:	mov	r1, #1
   15540:	ldr	r0, [r5]
   15544:	ldr	r2, [sp, #196]	; 0xc4
   15548:	strb	r1, [r4, #188]	; 0xbc
   1554c:	str	r0, [r4, #16]
   15550:	b	15fa4 <__assert_fail@plt+0x49e8>
   15554:	str	r7, [sp, #168]	; 0xa8
   15558:	ldr	r7, [r5, #-208]	; 0xffffff30
   1555c:	ldrb	r0, [r4, #181]	; 0xb5
   15560:	str	r9, [sp, #176]	; 0xb0
   15564:	str	r2, [sp, #196]	; 0xc4
   15568:	cmp	r7, #4
   1556c:	blt	1631c <__assert_fail@plt+0x4d60>
   15570:	sub	r6, r5, #224	; 0xe0
   15574:	cmp	r0, #0
   15578:	beq	155bc <__assert_fail@plt+0x4000>
   1557c:	movw	r1, #10173	; 0x27bd
   15580:	mov	r0, #0
   15584:	mov	r2, #5
   15588:	str	sl, [sp, #172]	; 0xac
   1558c:	mov	sl, r3
   15590:	str	lr, [sp, #180]	; 0xb4
   15594:	movt	r1, #2
   15598:	bl	11328 <dcgettext@plt>
   1559c:	ldrd	r2, [r5, #-216]	; 0xffffff28
   155a0:	asr	r1, r7, #31
   155a4:	str	r7, [sp]
   155a8:	str	r1, [sp, #4]
   155ac:	bl	1823c <__assert_fail@plt+0x6c80>
   155b0:	mov	r3, sl
   155b4:	ldr	sl, [sp, #172]	; 0xac
   155b8:	ldr	lr, [sp, #180]	; 0xb4
   155bc:	vld1.64	{d16-d17}, [r6]!
   155c0:	ldr	r0, [sp, #104]	; 0x68
   155c4:	ldr	r2, [sp, #164]	; 0xa4
   155c8:	vldr	d18, [r6]
   155cc:	vst1.64	{d16-d17}, [r0]!
   155d0:	vstr	d18, [r0]
   155d4:	ldrd	r0, [r5, #-104]	; 0xffffff98
   155d8:	strd	r0, [r2]
   155dc:	ldrd	r0, [r5, #8]
   155e0:	ldr	r2, [sp, #160]	; 0xa0
   155e4:	strd	r0, [r2]
   155e8:	b	16c60 <__assert_fail@plt+0x56a4>
   155ec:	ldr	r0, [r4, #156]	; 0x9c
   155f0:	movw	r1, #6664	; 0x1a08
   155f4:	movt	r1, #2
   155f8:	add	r0, r0, #1
   155fc:	str	r0, [r4, #156]	; 0x9c
   15600:	b	15c6c <__assert_fail@plt+0x46b0>
   15604:	mov	r6, r7
   15608:	ldrd	r0, [r5, #-160]	; 0xffffff60
   1560c:	ldr	r7, [sp, #144]	; 0x90
   15610:	str	lr, [sp, #180]	; 0xb4
   15614:	str	r8, [sp, #184]	; 0xb8
   15618:	str	sl, [sp, #172]	; 0xac
   1561c:	mov	r8, r3
   15620:	mov	lr, r2
   15624:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   15628:	strd	r0, [r7]
   1562c:	mov	r7, r6
   15630:	ldr	r0, [sp, #148]	; 0x94
   15634:	strd	r2, [r0]
   15638:	mov	r2, lr
   1563c:	mov	r3, r8
   15640:	mov	r0, #0
   15644:	ldr	r8, [sp, #184]	; 0xb8
   15648:	ldr	sl, [sp, #172]	; 0xac
   1564c:	ldr	lr, [sp, #180]	; 0xb4
   15650:	str	r0, [r4, #88]	; 0x58
   15654:	str	r0, [r4, #92]	; 0x5c
   15658:	ldr	r0, [r5]
   1565c:	str	r0, [r4, #28]
   15660:	b	15fa4 <__assert_fail@plt+0x49e8>
   15664:	ldrd	r0, [r5, #8]
   15668:	str	r0, [sp, #244]	; 0xf4
   1566c:	adds	r0, r0, #-2147483648	; 0x80000000
   15670:	adcs	r0, r1, #0
   15674:	beq	15f9c <__assert_fail@plt+0x49e0>
   15678:	b	17548 <__assert_fail@plt+0x5f8c>
   1567c:	ldr	r0, [r5]
   15680:	add	r0, r0, #3600	; 0xe10
   15684:	str	r0, [r4, #24]
   15688:	b	15fa4 <__assert_fail@plt+0x49e8>
   1568c:	ldr	r1, [r4, #144]	; 0x90
   15690:	ldr	r0, [r5, #48]	; 0x30
   15694:	str	r2, [sp, #196]	; 0xc4
   15698:	str	lr, [sp, #180]	; 0xb4
   1569c:	str	sl, [sp, #172]	; 0xac
   156a0:	ldr	sl, [r5, #4]
   156a4:	ldr	lr, [r5, #12]
   156a8:	ldr	ip, [r5, #20]
   156ac:	ldr	r6, [r5, #36]	; 0x24
   156b0:	ldr	r2, [r5, #44]	; 0x2c
   156b4:	str	r8, [sp, #184]	; 0xb8
   156b8:	str	r9, [sp, #176]	; 0xb0
   156bc:	ldr	r8, [r5, #32]
   156c0:	ldr	r9, [r5, #40]	; 0x28
   156c4:	str	r7, [sp, #168]	; 0xa8
   156c8:	str	r3, [sp, #188]	; 0xbc
   156cc:	add	r0, r1, r0
   156d0:	str	r1, [sp, #80]	; 0x50
   156d4:	ldr	r1, [r5]
   156d8:	str	sl, [sp, #72]	; 0x48
   156dc:	str	lr, [sp, #64]	; 0x40
   156e0:	str	ip, [sp, #52]	; 0x34
   156e4:	str	r6, [sp, #32]
   156e8:	str	r2, [sp, #28]
   156ec:	str	r0, [sp, #76]	; 0x4c
   156f0:	str	r1, [sp, #68]	; 0x44
   156f4:	ldr	r1, [r5, #8]
   156f8:	str	r1, [sp, #60]	; 0x3c
   156fc:	ldr	r1, [r5, #16]
   15700:	str	r1, [sp, #56]	; 0x38
   15704:	ldr	r1, [r5, #24]
   15708:	str	r1, [sp, #48]	; 0x30
   1570c:	ldr	r1, [r5, #28]
   15710:	str	r0, [r4, #144]	; 0x90
   15714:	ldr	r0, [sp, #108]	; 0x6c
   15718:	str	r1, [sp, #40]	; 0x28
   1571c:	ldm	r0, {r3, r7}
   15720:	adds	r9, r3, r9
   15724:	adc	r3, r7, r2
   15728:	str	r9, [r0]
   1572c:	str	r3, [r0, #4]
   15730:	ldr	r9, [sp, #112]	; 0x70
   15734:	ldm	r9, {r0, r2}
   15738:	adds	r0, r0, r8
   1573c:	str	r2, [sp, #24]
   15740:	adc	r6, r2, r6
   15744:	stm	r9, {r0, r6}
   15748:	ldr	r0, [sp, #116]	; 0x74
   1574c:	ldr	r2, [sp, #48]	; 0x30
   15750:	ldrd	r8, [r0]
   15754:	adds	r8, r8, r2
   15758:	adc	r1, r9, r1
   1575c:	str	r1, [sp, #36]	; 0x24
   15760:	str	r8, [r0]
   15764:	str	r1, [r0, #4]
   15768:	ldr	r0, [sp, #120]	; 0x78
   1576c:	ldr	r8, [r0]
   15770:	ldr	r2, [r0, #4]
   15774:	ldr	r1, [sp, #56]	; 0x38
   15778:	adds	r8, r8, r1
   1577c:	adc	r1, r2, ip
   15780:	str	r1, [sp, #44]	; 0x2c
   15784:	str	r8, [r0]
   15788:	str	r1, [r0, #4]
   1578c:	ldr	ip, [sp, #124]	; 0x7c
   15790:	ldr	r8, [ip]
   15794:	ldr	r0, [ip, #4]
   15798:	ldr	r1, [sp, #60]	; 0x3c
   1579c:	adds	r8, r8, r1
   157a0:	str	r0, [sp, #48]	; 0x30
   157a4:	adc	r1, r0, lr
   157a8:	mov	lr, #0
   157ac:	str	r1, [sp, #56]	; 0x38
   157b0:	str	r8, [ip]
   157b4:	str	r1, [ip, #4]
   157b8:	ldr	ip, [sp, #128]	; 0x80
   157bc:	ldr	r8, [ip]
   157c0:	ldr	r0, [ip, #4]
   157c4:	ldr	r1, [sp, #68]	; 0x44
   157c8:	adds	r8, r8, r1
   157cc:	str	r0, [sp, #60]	; 0x3c
   157d0:	mov	r1, #0
   157d4:	adc	r0, r0, sl
   157d8:	cmn	r7, #1
   157dc:	mov	sl, #0
   157e0:	str	r0, [sp, #68]	; 0x44
   157e4:	str	r8, [ip]
   157e8:	str	r0, [ip, #4]
   157ec:	mov	r0, #0
   157f0:	mov	r8, #0
   157f4:	mov	ip, #0
   157f8:	movwgt	r0, #1
   157fc:	cmn	r3, #1
   15800:	mov	r3, #0
   15804:	movwgt	r3, #1
   15808:	str	r0, [sp, #20]
   1580c:	subs	r0, r0, r3
   15810:	mov	r3, #0
   15814:	movwne	r0, #1
   15818:	str	r0, [sp, #16]
   1581c:	ldr	r0, [sp, #28]
   15820:	cmn	r0, #1
   15824:	mov	r0, #0
   15828:	movwgt	r0, #1
   1582c:	str	r0, [sp, #28]
   15830:	ldr	r0, [sp, #24]
   15834:	cmn	r0, #1
   15838:	mov	r0, #0
   1583c:	movwgt	r1, #1
   15840:	cmn	r6, #1
   15844:	ldr	r6, [sp, #76]	; 0x4c
   15848:	movwgt	r0, #1
   1584c:	str	r1, [sp, #24]
   15850:	subs	r0, r1, r0
   15854:	mov	r1, #0
   15858:	movwne	r0, #1
   1585c:	str	r0, [sp, #12]
   15860:	ldr	r0, [sp, #32]
   15864:	cmn	r0, #1
   15868:	mov	r0, #0
   1586c:	movwgt	r0, #1
   15870:	cmn	r9, #1
   15874:	str	r0, [sp, #32]
   15878:	ldr	r0, [sp, #36]	; 0x24
   1587c:	movwgt	r1, #1
   15880:	str	r1, [sp, #36]	; 0x24
   15884:	cmn	r0, #1
   15888:	mov	r0, #0
   1588c:	movwgt	r0, #1
   15890:	subs	r0, r1, r0
   15894:	mov	r1, #0
   15898:	movwne	r0, #1
   1589c:	str	r0, [sp, #8]
   158a0:	ldr	r0, [sp, #40]	; 0x28
   158a4:	cmn	r0, #1
   158a8:	ldr	r0, [sp, #44]	; 0x2c
   158ac:	movwgt	lr, #1
   158b0:	cmn	r2, #1
   158b4:	mov	r2, #0
   158b8:	movwgt	r8, #1
   158bc:	cmn	r0, #1
   158c0:	mov	r0, #0
   158c4:	movwgt	r0, #1
   158c8:	subs	r0, r8, r0
   158cc:	movwne	r0, #1
   158d0:	str	r0, [sp, #44]	; 0x2c
   158d4:	ldr	r0, [sp, #52]	; 0x34
   158d8:	cmn	r0, #1
   158dc:	ldr	r0, [sp, #48]	; 0x30
   158e0:	movwgt	ip, #1
   158e4:	cmn	r0, #1
   158e8:	ldr	r0, [sp, #56]	; 0x38
   158ec:	movwgt	r2, #1
   158f0:	cmn	r0, #1
   158f4:	ldr	r0, [sp, #64]	; 0x40
   158f8:	movwgt	r1, #1
   158fc:	subs	r7, r2, r1
   15900:	mov	r1, #0
   15904:	movwne	r7, #1
   15908:	cmn	r0, #1
   1590c:	ldr	r0, [sp, #60]	; 0x3c
   15910:	movwgt	sl, #1
   15914:	cmn	r0, #1
   15918:	ldr	r0, [sp, #68]	; 0x44
   1591c:	movwgt	r3, #1
   15920:	cmn	r0, #1
   15924:	ldr	r0, [sp, #72]	; 0x48
   15928:	movwgt	r1, #1
   1592c:	subs	r1, r3, r1
   15930:	movwne	r1, #1
   15934:	cmn	r0, #1
   15938:	mov	r0, #0
   1593c:	movwgt	r0, #1
   15940:	str	r0, [sp, #72]	; 0x48
   15944:	ldr	r0, [sp, #80]	; 0x50
   15948:	cmp	r6, r0
   1594c:	bvs	1796c <__assert_fail@plt+0x63b0>
   15950:	ldr	r0, [sp, #20]
   15954:	ldr	r6, [sp, #28]
   15958:	sub	r0, r0, r6
   1595c:	ldr	r6, [sp, #16]
   15960:	clz	r0, r0
   15964:	lsr	r0, r0, #5
   15968:	ands	r0, r0, r6
   1596c:	bne	17944 <__assert_fail@plt+0x6388>
   15970:	ldr	r0, [sp, #24]
   15974:	ldr	r6, [sp, #32]
   15978:	sub	r0, r0, r6
   1597c:	ldr	r6, [sp, #12]
   15980:	clz	r0, r0
   15984:	lsr	r0, r0, #5
   15988:	ands	r0, r0, r6
   1598c:	bne	17868 <__assert_fail@plt+0x62ac>
   15990:	ldr	r0, [sp, #36]	; 0x24
   15994:	ldr	r6, [sp, #8]
   15998:	sub	r0, r0, lr
   1599c:	clz	r0, r0
   159a0:	lsr	r0, r0, #5
   159a4:	ands	r0, r0, r6
   159a8:	bne	177dc <__assert_fail@plt+0x6220>
   159ac:	ldr	r6, [sp, #44]	; 0x2c
   159b0:	sub	r0, r8, ip
   159b4:	clz	r0, r0
   159b8:	lsr	r0, r0, #5
   159bc:	ands	r0, r0, r6
   159c0:	bne	176d8 <__assert_fail@plt+0x611c>
   159c4:	sub	r0, r2, sl
   159c8:	clz	r0, r0
   159cc:	lsr	r0, r0, #5
   159d0:	ands	r0, r0, r7
   159d4:	bne	175d4 <__assert_fail@plt+0x6018>
   159d8:	ldr	r0, [sp, #72]	; 0x48
   159dc:	sub	r0, r3, r0
   159e0:	ldr	r3, [sp, #188]	; 0xbc
   159e4:	ldr	sl, [sp, #172]	; 0xac
   159e8:	ldr	lr, [sp, #180]	; 0xb4
   159ec:	b	16bd0 <__assert_fail@plt+0x5614>
   159f0:	str	r2, [sp, #196]	; 0xc4
   159f4:	ldrd	r0, [r5]
   159f8:	ldr	r2, [sp, #84]	; 0x54
   159fc:	strd	r0, [r2]
   15a00:	movw	r1, #10108	; 0x277c
   15a04:	mov	r0, #1
   15a08:	strb	r0, [r4, #152]	; 0x98
   15a0c:	movt	r1, #2
   15a10:	mov	r0, #0
   15a14:	b	15c74 <__assert_fail@plt+0x46b8>
   15a18:	ldr	r1, [r4, #172]	; 0xac
   15a1c:	ldr	r0, [r4, #156]	; 0x9c
   15a20:	add	r1, r1, #1
   15a24:	add	r0, r0, #1
   15a28:	str	r1, [r4, #172]	; 0xac
   15a2c:	movw	r1, #10126	; 0x278e
   15a30:	str	r0, [r4, #156]	; 0x9c
   15a34:	movt	r1, #2
   15a38:	b	15c6c <__assert_fail@plt+0x46b0>
   15a3c:	ldr	r0, [r4, #160]	; 0xa0
   15a40:	movw	r1, #10146	; 0x27a2
   15a44:	movt	r1, #2
   15a48:	add	r0, r0, #1
   15a4c:	str	r0, [r4, #160]	; 0xa0
   15a50:	b	15c6c <__assert_fail@plt+0x46b0>
   15a54:	movw	r1, #10150	; 0x27a6
   15a58:	movt	r1, #2
   15a5c:	b	15bf4 <__assert_fail@plt+0x4638>
   15a60:	mov	r0, #1
   15a64:	mov	lr, #0
   15a68:	mov	r7, #0
   15a6c:	mov	r9, #0
   15a70:	mov	r8, #0
   15a74:	mov	r2, #0
   15a78:	str	r0, [sp, #244]	; 0xf4
   15a7c:	mov	r0, #0
   15a80:	str	r0, [sp, #236]	; 0xec
   15a84:	mov	r0, #0
   15a88:	str	r0, [sp, #232]	; 0xe8
   15a8c:	mov	r0, #0
   15a90:	str	r0, [sp, #224]	; 0xe0
   15a94:	mov	r0, #0
   15a98:	str	r0, [sp, #228]	; 0xe4
   15a9c:	mov	r0, #0
   15aa0:	str	r0, [sp, #220]	; 0xdc
   15aa4:	mov	r0, #0
   15aa8:	str	r0, [sp, #216]	; 0xd8
   15aac:	b	15f9c <__assert_fail@plt+0x49e0>
   15ab0:	str	r8, [sp, #184]	; 0xb8
   15ab4:	mov	r0, r7
   15ab8:	mov	r6, r3
   15abc:	ldr	r8, [r5, #-160]	; 0xffffff60
   15ac0:	ldr	r1, [r5, #-156]	; 0xffffff64
   15ac4:	ldr	r7, [sp, #144]	; 0x90
   15ac8:	str	r2, [sp, #196]	; 0xc4
   15acc:	str	lr, [sp, #180]	; 0xb4
   15ad0:	ldrd	r2, [r5, #-48]	; 0xffffffd0
   15ad4:	str	r8, [r7]
   15ad8:	str	r1, [r7, #4]
   15adc:	mov	r7, r0
   15ae0:	ldr	r0, [sp, #148]	; 0x94
   15ae4:	ldr	r8, [sp, #184]	; 0xb8
   15ae8:	strd	r2, [r0]
   15aec:	mov	r0, #0
   15af0:	mov	r3, r6
   15af4:	ldr	r2, [sp, #196]	; 0xc4
   15af8:	ldr	lr, [sp, #180]	; 0xb4
   15afc:	str	r0, [r4, #88]	; 0x58
   15b00:	str	r0, [r4, #92]	; 0x5c
   15b04:	b	15b6c <__assert_fail@plt+0x45b0>
   15b08:	str	sl, [sp, #172]	; 0xac
   15b0c:	str	lr, [sp, #180]	; 0xb4
   15b10:	mov	r1, r3
   15b14:	mov	ip, r7
   15b18:	ldr	r0, [r5, #-56]	; 0xffffffc8
   15b1c:	ldr	sl, [r5, #-52]	; 0xffffffcc
   15b20:	str	r2, [sp, #196]	; 0xc4
   15b24:	ldr	r2, [r5, #-272]	; 0xfffffef0
   15b28:	ldr	r3, [r5, #-268]	; 0xfffffef4
   15b2c:	str	r8, [sp, #184]	; 0xb8
   15b30:	ldrd	r6, [r5, #-160]	; 0xffffff60
   15b34:	str	r0, [sp, #80]	; 0x50
   15b38:	ldr	r0, [sp, #144]	; 0x90
   15b3c:	strd	r2, [r0]
   15b40:	mov	r3, r1
   15b44:	ldr	r2, [sp, #148]	; 0x94
   15b48:	strd	r6, [r2]
   15b4c:	mov	r7, ip
   15b50:	ldr	r0, [sp, #80]	; 0x50
   15b54:	ldr	r2, [sp, #196]	; 0xc4
   15b58:	ldr	r8, [sp, #184]	; 0xb8
   15b5c:	str	r0, [r4, #88]	; 0x58
   15b60:	str	sl, [r4, #92]	; 0x5c
   15b64:	ldr	sl, [sp, #172]	; 0xac
   15b68:	ldr	lr, [sp, #180]	; 0xb4
   15b6c:	mov	r0, #2
   15b70:	str	r0, [r4, #28]
   15b74:	b	15fa4 <__assert_fail@plt+0x49e8>
   15b78:	ldrd	r0, [r5, #-104]	; 0xffffff98
   15b7c:	b	15cc4 <__assert_fail@plt+0x4708>
   15b80:	ldr	r0, [r4, #164]	; 0xa4
   15b84:	movw	r1, #10135	; 0x2797
   15b88:	movt	r1, #2
   15b8c:	add	r0, r0, #1
   15b90:	str	r0, [r4, #164]	; 0xa4
   15b94:	b	15c6c <__assert_fail@plt+0x46b0>
   15b98:	ldr	r0, [r4, #176]	; 0xb0
   15b9c:	movw	r1, #10141	; 0x279d
   15ba0:	movt	r1, #2
   15ba4:	add	r0, r0, #1
   15ba8:	str	r0, [r4, #176]	; 0xb0
   15bac:	b	15c6c <__assert_fail@plt+0x46b0>
   15bb0:	str	r2, [sp, #196]	; 0xc4
   15bb4:	ldrd	r0, [r5, #-104]	; 0xffffff98
   15bb8:	ldr	r2, [sp, #160]	; 0xa0
   15bbc:	strd	r0, [r2]
   15bc0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   15bc4:	ldr	r2, [sp, #164]	; 0xa4
   15bc8:	b	16100 <__assert_fail@plt+0x4b44>
   15bcc:	ldr	lr, [r5, #-56]	; 0xffffffc8
   15bd0:	ldr	r7, [r5, #-52]	; 0xffffffcc
   15bd4:	mov	r9, #0
   15bd8:	mov	r8, #0
   15bdc:	mov	r2, #0
   15be0:	mov	r0, #0
   15be4:	str	r0, [sp, #236]	; 0xec
   15be8:	b	15c50 <__assert_fail@plt+0x4694>
   15bec:	movw	r1, #10166	; 0x27b6
   15bf0:	movt	r1, #2
   15bf4:	str	r2, [sp, #196]	; 0xc4
   15bf8:	mov	r0, #0
   15bfc:	mov	r2, #5
   15c00:	str	r8, [sp, #184]	; 0xb8
   15c04:	mov	r8, r7
   15c08:	mov	r7, r3
   15c0c:	str	r9, [sp, #176]	; 0xb0
   15c10:	str	lr, [sp, #180]	; 0xb4
   15c14:	bl	11328 <dcgettext@plt>
   15c18:	mov	r1, r4
   15c1c:	bl	17f74 <__assert_fail@plt+0x69b8>
   15c20:	b	15c98 <__assert_fail@plt+0x46dc>
   15c24:	ldrd	r0, [r5, #8]
   15c28:	str	r1, [sp, #240]	; 0xf0
   15c2c:	str	r0, [sp, #244]	; 0xf4
   15c30:	b	15fa4 <__assert_fail@plt+0x49e8>
   15c34:	ldr	r2, [r5, #-56]	; 0xffffffc8
   15c38:	ldr	r0, [r5, #-52]	; 0xffffffcc
   15c3c:	str	r0, [sp, #236]	; 0xec
   15c40:	mov	lr, #0
   15c44:	mov	r7, #0
   15c48:	mov	r9, #0
   15c4c:	mov	r8, #0
   15c50:	mov	r0, #0
   15c54:	str	r0, [sp, #232]	; 0xe8
   15c58:	mov	r0, #0
   15c5c:	str	r0, [sp, #224]	; 0xe0
   15c60:	b	15f7c <__assert_fail@plt+0x49c0>
   15c64:	movw	r1, #10159	; 0x27af
   15c68:	movt	r1, #2
   15c6c:	mov	r0, #0
   15c70:	str	r2, [sp, #196]	; 0xc4
   15c74:	mov	r2, #5
   15c78:	str	r8, [sp, #184]	; 0xb8
   15c7c:	mov	r8, r7
   15c80:	mov	r7, r3
   15c84:	str	r9, [sp, #176]	; 0xb0
   15c88:	str	lr, [sp, #180]	; 0xb4
   15c8c:	bl	11328 <dcgettext@plt>
   15c90:	mov	r1, r4
   15c94:	bl	179f8 <__assert_fail@plt+0x643c>
   15c98:	mov	r3, r7
   15c9c:	mov	r7, r8
   15ca0:	ldr	r2, [sp, #196]	; 0xc4
   15ca4:	ldr	r9, [sp, #176]	; 0xb0
   15ca8:	ldr	r8, [sp, #184]	; 0xb8
   15cac:	ldr	lr, [sp, #180]	; 0xb4
   15cb0:	b	15fa4 <__assert_fail@plt+0x49e8>
   15cb4:	ldr	r0, [r5]
   15cb8:	str	r0, [r4, #20]
   15cbc:	b	15fa4 <__assert_fail@plt+0x49e8>
   15cc0:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   15cc4:	str	r2, [sp, #196]	; 0xc4
   15cc8:	ldr	r2, [sp, #164]	; 0xa4
   15ccc:	strd	r0, [r2]
   15cd0:	ldrd	r0, [r5, #8]
   15cd4:	ldr	r2, [sp, #160]	; 0xa0
   15cd8:	strd	r0, [r2]
   15cdc:	ldr	r2, [sp, #196]	; 0xc4
   15ce0:	b	15fa4 <__assert_fail@plt+0x49e8>
   15ce4:	ldr	r0, [r4, #176]	; 0xb0
   15ce8:	str	r7, [sp, #168]	; 0xa8
   15cec:	str	r2, [sp, #196]	; 0xc4
   15cf0:	mov	r2, #0
   15cf4:	str	r9, [sp, #176]	; 0xb0
   15cf8:	mov	r9, #100	; 0x64
   15cfc:	str	r3, [sp, #188]	; 0xbc
   15d00:	str	lr, [sp, #180]	; 0xb4
   15d04:	add	r0, r0, #1
   15d08:	str	r0, [r4, #176]	; 0xb0
   15d0c:	ldr	r1, [r5, #-40]	; 0xffffffd8
   15d10:	ldr	r7, [r5, #4]
   15d14:	ldr	r0, [r5, #-48]	; 0xffffffd0
   15d18:	ldr	r6, [r5, #-44]	; 0xffffffd4
   15d1c:	cmp	r1, #3
   15d20:	mov	r1, #0
   15d24:	movwlt	r1, #1
   15d28:	cmp	r7, #0
   15d2c:	movwlt	r2, #1
   15d30:	ands	r1, r2, r1
   15d34:	mov	r2, r6
   15d38:	umull	r6, r1, r0, r9
   15d3c:	mlane	r2, r2, r9, r1
   15d40:	moveq	r6, r0
   15d44:	cmn	r7, #1
   15d48:	ble	16758 <__assert_fail@plt+0x519c>
   15d4c:	ldr	r0, [r5, #-56]	; 0xffffffc8
   15d50:	ldr	lr, [r5]
   15d54:	cmn	r2, #1
   15d58:	str	r7, [sp, #80]	; 0x50
   15d5c:	str	sl, [sp, #172]	; 0xac
   15d60:	str	r8, [sp, #184]	; 0xb8
   15d64:	str	r0, [sp, #76]	; 0x4c
   15d68:	ble	16c88 <__assert_fail@plt+0x56cc>
   15d6c:	movw	r1, #8738	; 0x2222
   15d70:	movw	r0, #8738	; 0x2222
   15d74:	mov	r3, #1
   15d78:	mov	r7, r6
   15d7c:	movt	r1, #8738	; 0x2222
   15d80:	movt	r0, #546	; 0x222
   15d84:	subs	r1, r1, r6
   15d88:	sbcs	r0, r0, r2
   15d8c:	bge	16c98 <__assert_fail@plt+0x56dc>
   15d90:	b	17030 <__assert_fail@plt+0x5a74>
   15d94:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   15d98:	str	r0, [sp, #244]	; 0xf4
   15d9c:	mov	r0, #0
   15da0:	str	r1, [sp, #240]	; 0xf0
   15da4:	mov	lr, #0
   15da8:	mov	r7, #0
   15dac:	mov	r9, #0
   15db0:	mov	r8, #0
   15db4:	mov	r2, #0
   15db8:	str	r0, [sp, #236]	; 0xec
   15dbc:	mov	r0, #0
   15dc0:	str	r0, [sp, #232]	; 0xe8
   15dc4:	mov	r0, #0
   15dc8:	str	r0, [sp, #224]	; 0xe0
   15dcc:	mov	r0, #0
   15dd0:	str	r0, [sp, #228]	; 0xe4
   15dd4:	mov	r0, #0
   15dd8:	str	r0, [sp, #220]	; 0xdc
   15ddc:	mov	r0, #0
   15de0:	str	r0, [sp, #216]	; 0xd8
   15de4:	b	15fa4 <__assert_fail@plt+0x49e8>
   15de8:	movw	r0, #40336	; 0x9d90
   15dec:	movt	r0, #65535	; 0xffff
   15df0:	str	r0, [r4, #24]
   15df4:	b	15fa4 <__assert_fail@plt+0x49e8>
   15df8:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   15dfc:	str	r0, [sp, #228]	; 0xe4
   15e00:	mov	r0, #0
   15e04:	str	r1, [sp, #220]	; 0xdc
   15e08:	mov	lr, #0
   15e0c:	mov	r7, #0
   15e10:	mov	r9, #0
   15e14:	mov	r8, #0
   15e18:	mov	r2, #0
   15e1c:	str	r0, [sp, #236]	; 0xec
   15e20:	mov	r0, #0
   15e24:	str	r0, [sp, #232]	; 0xe8
   15e28:	mov	r0, #0
   15e2c:	str	r0, [sp, #224]	; 0xe0
   15e30:	b	15f8c <__assert_fail@plt+0x49d0>
   15e34:	mov	r1, r5
   15e38:	ldr	ip, [r4, #156]	; 0x9c
   15e3c:	str	r2, [sp, #196]	; 0xc4
   15e40:	vld1.64	{d16-d17}, [r1]!
   15e44:	cmp	ip, #0
   15e48:	ldr	r0, [r1]
   15e4c:	str	r0, [sp, #80]	; 0x50
   15e50:	beq	15e94 <__assert_fail@plt+0x48d8>
   15e54:	ldr	r2, [sp, #96]	; 0x60
   15e58:	ldr	r2, [r2]
   15e5c:	cmp	r2, #0
   15e60:	bne	15e94 <__assert_fail@plt+0x48d8>
   15e64:	ldrb	r2, [r4, #153]	; 0x99
   15e68:	cmp	r2, #0
   15e6c:	ldr	r2, [sp, #196]	; 0xc4
   15e70:	bne	15e94 <__assert_fail@plt+0x48d8>
   15e74:	ldr	r0, [sp, #80]	; 0x50
   15e78:	ldr	r6, [r1, #4]
   15e7c:	cmp	r0, #2
   15e80:	bgt	1714c <__assert_fail@plt+0x5b90>
   15e84:	ldr	r2, [r4, #172]	; 0xac
   15e88:	cmp	r2, #0
   15e8c:	ldr	r2, [sp, #196]	; 0xc4
   15e90:	bne	1714c <__assert_fail@plt+0x5b90>
   15e94:	ldr	r6, [sp, #80]	; 0x50
   15e98:	str	sl, [sp, #172]	; 0xac
   15e9c:	str	r3, [sp, #188]	; 0xbc
   15ea0:	str	r9, [sp, #176]	; 0xb0
   15ea4:	cmp	r6, #5
   15ea8:	blt	16394 <__assert_fail@plt+0x4dd8>
   15eac:	add	r0, ip, #1
   15eb0:	vmov.32	sl, d17[0]
   15eb4:	vmov.32	r1, d17[1]
   15eb8:	mov	r2, #100	; 0x64
   15ebc:	mov	r3, #0
   15ec0:	str	lr, [sp, #180]	; 0xb4
   15ec4:	str	r0, [r4, #156]	; 0x9c
   15ec8:	mov	r0, sl
   15ecc:	mov	r9, r1
   15ed0:	bl	20f14 <__assert_fail@plt+0xf958>
   15ed4:	mov	r6, #100	; 0x64
   15ed8:	umull	r2, r3, r0, r6
   15edc:	mla	r3, r1, r6, r3
   15ee0:	mov	r6, r7
   15ee4:	ldr	r7, [sp, #160]	; 0xa0
   15ee8:	subs	r2, sl, r2
   15eec:	sbc	r3, r9, r3
   15ef0:	strd	r2, [r7]
   15ef4:	mov	r2, #100	; 0x64
   15ef8:	mov	r3, #0
   15efc:	mov	r7, r6
   15f00:	bl	20f14 <__assert_fail@plt+0xf958>
   15f04:	mov	r0, r2
   15f08:	ldr	r2, [sp, #164]	; 0xa4
   15f0c:	mov	r1, r3
   15f10:	mov	r3, #0
   15f14:	strd	r0, [r2]
   15f18:	mov	r0, sl
   15f1c:	mov	r1, r9
   15f20:	movw	r2, #10000	; 0x2710
   15f24:	bl	20f14 <__assert_fail@plt+0xf958>
   15f28:	ldr	r2, [sp, #92]	; 0x5c
   15f2c:	ldr	r3, [sp, #188]	; 0xbc
   15f30:	ldr	lr, [sp, #180]	; 0xb4
   15f34:	strd	r0, [r2]
   15f38:	ldr	r0, [sp, #80]	; 0x50
   15f3c:	ldr	r2, [sp, #196]	; 0xc4
   15f40:	ldr	r9, [sp, #176]	; 0xb0
   15f44:	ldr	sl, [sp, #172]	; 0xac
   15f48:	sub	r0, r0, #4
   15f4c:	str	r0, [r4, #48]	; 0x30
   15f50:	b	15fa4 <__assert_fail@plt+0x49e8>
   15f54:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   15f58:	str	r0, [sp, #232]	; 0xe8
   15f5c:	mov	r0, #0
   15f60:	str	r1, [sp, #224]	; 0xe0
   15f64:	mov	lr, #0
   15f68:	mov	r7, #0
   15f6c:	mov	r9, #0
   15f70:	mov	r8, #0
   15f74:	mov	r2, #0
   15f78:	str	r0, [sp, #236]	; 0xec
   15f7c:	mov	r0, #0
   15f80:	str	r0, [sp, #228]	; 0xe4
   15f84:	mov	r0, #0
   15f88:	str	r0, [sp, #220]	; 0xdc
   15f8c:	mov	r0, #0
   15f90:	str	r0, [sp, #216]	; 0xd8
   15f94:	mov	r0, #0
   15f98:	str	r0, [sp, #244]	; 0xf4
   15f9c:	mov	r0, #0
   15fa0:	str	r0, [sp, #240]	; 0xf0
   15fa4:	sub	r0, sl, sl, lsl #3
   15fa8:	sub	r1, fp, #112	; 0x70
   15fac:	add	r5, r5, r0, lsl #3
   15fb0:	ldr	r0, [sp, #244]	; 0xf4
   15fb4:	str	r0, [r5, #56]!	; 0x38
   15fb8:	ldr	r0, [sp, #240]	; 0xf0
   15fbc:	stmib	r5, {r0, lr}
   15fc0:	str	r7, [r5, #12]
   15fc4:	str	r9, [r5, #16]
   15fc8:	str	r8, [r5, #20]
   15fcc:	str	r2, [r5, #24]
   15fd0:	ldr	r0, [sp, #236]	; 0xec
   15fd4:	str	r0, [r5, #28]
   15fd8:	ldr	r0, [sp, #232]	; 0xe8
   15fdc:	str	r0, [r5, #32]
   15fe0:	ldr	r0, [sp, #224]	; 0xe0
   15fe4:	str	r0, [r5, #36]	; 0x24
   15fe8:	ldr	r0, [sp, #228]	; 0xe4
   15fec:	str	r0, [r5, #40]	; 0x28
   15ff0:	ldr	r0, [sp, #220]	; 0xdc
   15ff4:	str	r0, [r5, #44]	; 0x2c
   15ff8:	ldr	r0, [sp, #216]	; 0xd8
   15ffc:	str	r0, [r5, #48]	; 0x30
   16000:	ldr	r0, [sp, #212]	; 0xd4
   16004:	str	r0, [r5, #52]	; 0x34
   16008:	sub	r0, r3, sl
   1600c:	ldr	r3, [sp, #208]	; 0xd0
   16010:	add	r1, r1, r0, lsl #1
   16014:	ldrsh	r2, [r1]
   16018:	movw	r1, #8088	; 0x1f98
   1601c:	movt	r1, #2
   16020:	ldrb	r1, [r1, r3]
   16024:	movw	r3, #8180	; 0x1ff4
   16028:	movt	r3, #2
   1602c:	sub	r1, r1, #28
   16030:	add	r3, r3, r1
   16034:	ldrsb	r3, [r3]
   16038:	add	r3, r2, r3
   1603c:	cmp	r3, #112	; 0x70
   16040:	bhi	1606c <__assert_fail@plt+0x4ab0>
   16044:	movw	r7, #7656	; 0x1de8
   16048:	movt	r7, #2
   1604c:	add	r7, r7, r3
   16050:	ldrsb	r7, [r7]
   16054:	cmp	r7, r2
   16058:	bne	1606c <__assert_fail@plt+0x4ab0>
   1605c:	movw	r1, #7769	; 0x1e59
   16060:	movt	r1, #2
   16064:	ldrb	sl, [r1, r3]
   16068:	b	1607c <__assert_fail@plt+0x4ac0>
   1606c:	movw	r2, #8206	; 0x200e
   16070:	movt	r2, #2
   16074:	add	r1, r2, r1
   16078:	ldrsb	sl, [r1]
   1607c:	add	r3, r0, #1
   16080:	sub	r1, fp, #112	; 0x70
   16084:	cmp	r0, #17
   16088:	add	r1, r1, r3, lsl #1
   1608c:	strh	sl, [r1]
   16090:	ble	12b48 <__assert_fail@plt+0x158c>
   16094:	b	1750c <__assert_fail@plt+0x5f50>
   16098:	mov	lr, #0
   1609c:	mov	r2, #1
   160a0:	mov	r7, #0
   160a4:	mov	r9, #0
   160a8:	mov	r8, #0
   160ac:	b	15be0 <__assert_fail@plt+0x4624>
   160b0:	ldr	r1, [sp, #100]	; 0x64
   160b4:	mov	r0, #0
   160b8:	str	r0, [r1]
   160bc:	str	r0, [r1, #4]
   160c0:	ldr	r0, [r5, #-56]	; 0xffffffc8
   160c4:	str	r0, [r4, #16]
   160c8:	b	15fa4 <__assert_fail@plt+0x49e8>
   160cc:	ldr	r1, [sp, #100]	; 0x64
   160d0:	mov	r0, #0
   160d4:	str	r0, [r1]
   160d8:	str	r0, [r1, #4]
   160dc:	ldr	r0, [r5]
   160e0:	str	r0, [r4, #16]
   160e4:	b	15fa4 <__assert_fail@plt+0x49e8>
   160e8:	str	r2, [sp, #196]	; 0xc4
   160ec:	ldrd	r0, [r5, #-168]	; 0xffffff58
   160f0:	ldr	r2, [sp, #164]	; 0xa4
   160f4:	strd	r0, [r2]
   160f8:	ldrd	r0, [r5, #-104]	; 0xffffff98
   160fc:	ldr	r2, [sp, #160]	; 0xa0
   16100:	strd	r0, [r2]
   16104:	mov	r0, r5
   16108:	vld1.64	{d16-d17}, [r0]!
   1610c:	b	16cd0 <__assert_fail@plt+0x5714>
   16110:	str	r2, [sp, #196]	; 0xc4
   16114:	ldrd	r0, [r5, #-104]	; 0xffffff98
   16118:	ldr	r2, [sp, #160]	; 0xa0
   1611c:	str	r8, [sp, #184]	; 0xb8
   16120:	mov	r8, r7
   16124:	mov	r7, r3
   16128:	strd	r0, [r2]
   1612c:	ldrd	r0, [r5, #-56]	; 0xffffffc8
   16130:	ldr	r2, [sp, #164]	; 0xa4
   16134:	strd	r0, [r2]
   16138:	ldrd	r0, [r5, #8]
   1613c:	ldr	r2, [sp, #92]	; 0x5c
   16140:	rsbs	r0, r0, #0
   16144:	rsc	r3, r1, #0
   16148:	stm	r2, {r0, r3}
   1614c:	and	r0, r1, r3
   16150:	cmp	r0, #0
   16154:	blt	1755c <__assert_fail@plt+0x5fa0>
   16158:	ldr	r0, [r5, #16]
   1615c:	ldr	r1, [sp, #96]	; 0x60
   16160:	mov	r3, r7
   16164:	mov	r7, r8
   16168:	ldr	r8, [sp, #184]	; 0xb8
   1616c:	ldr	r2, [sp, #196]	; 0xc4
   16170:	str	r0, [r1]
   16174:	b	15fa4 <__assert_fail@plt+0x49e8>
   16178:	mov	r0, #1
   1617c:	mov	lr, #0
   16180:	mov	r7, #0
   16184:	mov	r9, #0
   16188:	mov	r8, #0
   1618c:	mov	r2, #0
   16190:	str	r0, [sp, #228]	; 0xe4
   16194:	mov	r0, #0
   16198:	str	r0, [sp, #236]	; 0xec
   1619c:	mov	r0, #0
   161a0:	str	r0, [sp, #232]	; 0xe8
   161a4:	mov	r0, #0
   161a8:	str	r0, [sp, #224]	; 0xe0
   161ac:	b	15f84 <__assert_fail@plt+0x49c8>
   161b0:	str	sl, [sp, #172]	; 0xac
   161b4:	ldm	r5, {r2, sl}
   161b8:	cmn	sl, #1
   161bc:	ble	167b0 <__assert_fail@plt+0x51f4>
   161c0:	ldr	r9, [r5, #-48]	; 0xffffffd0
   161c4:	ldr	r8, [r5, #-44]	; 0xffffffd4
   161c8:	orrs	r0, r2, sl
   161cc:	beq	162b0 <__assert_fail@plt+0x4cf4>
   161d0:	cmn	r8, #1
   161d4:	ble	16d38 <__assert_fail@plt+0x577c>
   161d8:	mov	r6, r3
   161dc:	mvn	r0, #0
   161e0:	mvn	r1, #-2147483648	; 0x80000000
   161e4:	mov	r3, sl
   161e8:	mov	r7, r2
   161ec:	bl	20fe8 <__assert_fail@plt+0xfa2c>
   161f0:	subs	r0, r0, r9
   161f4:	mov	r2, r7
   161f8:	mov	r3, r6
   161fc:	mov	r6, r9
   16200:	mov	r7, r8
   16204:	sbcs	r0, r1, r8
   16208:	bge	162b8 <__assert_fail@plt+0x4cfc>
   1620c:	b	17624 <__assert_fail@plt+0x6068>
   16210:	str	sl, [sp, #172]	; 0xac
   16214:	ldm	r5, {r2, sl}
   16218:	cmn	sl, #1
   1621c:	ble	167f8 <__assert_fail@plt+0x523c>
   16220:	ldr	r9, [r5, #-48]	; 0xffffffd0
   16224:	ldr	r8, [r5, #-44]	; 0xffffffd4
   16228:	orrs	r0, r2, sl
   1622c:	beq	162b0 <__assert_fail@plt+0x4cf4>
   16230:	cmn	r8, #1
   16234:	ble	16d88 <__assert_fail@plt+0x57cc>
   16238:	mov	r6, r3
   1623c:	mvn	r0, #0
   16240:	mvn	r1, #-2147483648	; 0x80000000
   16244:	mov	r3, sl
   16248:	mov	r7, r2
   1624c:	bl	20fe8 <__assert_fail@plt+0xfa2c>
   16250:	subs	r0, r0, r9
   16254:	mov	r2, r7
   16258:	mov	r3, r6
   1625c:	mov	r6, r9
   16260:	mov	r7, r8
   16264:	sbcs	r0, r1, r8
   16268:	bge	162b8 <__assert_fail@plt+0x4cfc>
   1626c:	b	17638 <__assert_fail@plt+0x607c>
   16270:	mov	r0, #1
   16274:	mov	lr, #0
   16278:	mov	r7, #0
   1627c:	mov	r9, #0
   16280:	mov	r8, #0
   16284:	mov	r2, #0
   16288:	str	r0, [sp, #232]	; 0xe8
   1628c:	mov	r0, #0
   16290:	str	r0, [sp, #236]	; 0xec
   16294:	b	15c58 <__assert_fail@plt+0x469c>
   16298:	ldrd	r0, [r5, #8]
   1629c:	str	r0, [sp, #244]	; 0xf4
   162a0:	adds	r0, r0, #-2147483648	; 0x80000000
   162a4:	adcs	r0, r1, #0
   162a8:	beq	15f9c <__assert_fail@plt+0x49e0>
   162ac:	b	17534 <__assert_fail@plt+0x5f78>
   162b0:	mov	r6, r9
   162b4:	mov	r7, r8
   162b8:	umull	r9, r0, r6, r2
   162bc:	mov	lr, #0
   162c0:	mla	r0, r6, sl, r0
   162c4:	mov	r6, #0
   162c8:	ldr	sl, [sp, #172]	; 0xac
   162cc:	str	r6, [sp, #236]	; 0xec
   162d0:	mov	r6, #0
   162d4:	mla	r0, r7, r2, r0
   162d8:	mov	r7, #0
   162dc:	mov	r2, #0
   162e0:	str	r6, [sp, #232]	; 0xe8
   162e4:	mov	r6, #0
   162e8:	mov	r8, r0
   162ec:	str	r6, [sp, #224]	; 0xe0
   162f0:	mov	r6, #0
   162f4:	str	r6, [sp, #228]	; 0xe4
   162f8:	mov	r6, #0
   162fc:	str	r6, [sp, #220]	; 0xdc
   16300:	mov	r6, #0
   16304:	str	r6, [sp, #216]	; 0xd8
   16308:	mov	r6, #0
   1630c:	str	r6, [sp, #244]	; 0xf4
   16310:	mov	r6, #0
   16314:	str	r6, [sp, #240]	; 0xf0
   16318:	b	15fa4 <__assert_fail@plt+0x49e8>
   1631c:	cmp	r0, #0
   16320:	str	sl, [sp, #172]	; 0xac
   16324:	beq	16ca0 <__assert_fail@plt+0x56e4>
   16328:	movw	r1, #10231	; 0x27f7
   1632c:	mov	r0, #0
   16330:	mov	r2, #5
   16334:	mov	r7, r3
   16338:	str	lr, [sp, #180]	; 0xb4
   1633c:	movt	r1, #2
   16340:	bl	11328 <dcgettext@plt>
   16344:	mov	r6, r5
   16348:	ldr	r2, [r6, #-216]!	; 0xffffff28
   1634c:	ldr	r3, [r6, #4]
   16350:	bl	1823c <__assert_fail@plt+0x6c80>
   16354:	ldr	lr, [sp, #180]	; 0xb4
   16358:	mov	r3, r7
   1635c:	b	16ca4 <__assert_fail@plt+0x56e8>
   16360:	ldr	r0, [r4, #172]	; 0xac
   16364:	vmov.32	r7, d17[1]
   16368:	vmov.32	r9, d17[0]
   1636c:	mov	r6, #0
   16370:	cmp	r1, #3
   16374:	add	r0, r0, #1
   16378:	str	r0, [r4, #172]	; 0xac
   1637c:	bge	16840 <__assert_fail@plt+0x5284>
   16380:	mov	r0, r9
   16384:	mov	r1, r7
   16388:	mov	r2, #0
   1638c:	mov	r3, #0
   16390:	b	1686c <__assert_fail@plt+0x52b0>
   16394:	ldr	r0, [r4, #172]	; 0xac
   16398:	vmov.32	sl, d17[1]
   1639c:	vmov.32	r9, d17[0]
   163a0:	mov	r2, #0
   163a4:	cmp	r6, #3
   163a8:	str	r7, [sp, #168]	; 0xa8
   163ac:	add	r0, r0, #1
   163b0:	str	r0, [r4, #172]	; 0xac
   163b4:	bge	16c00 <__assert_fail@plt+0x5644>
   163b8:	mov	r0, r9
   163bc:	mov	r1, sl
   163c0:	mov	r6, #0
   163c4:	mov	r3, #0
   163c8:	b	16c34 <__assert_fail@plt+0x5678>
   163cc:	ldrd	r6, [r5, #-56]	; 0xffffffc8
   163d0:	cmn	r7, #1
   163d4:	ble	16dd8 <__assert_fail@plt+0x581c>
   163d8:	and	r0, r2, sl
   163dc:	cmn	r0, #1
   163e0:	beq	162b8 <__assert_fail@plt+0x4cfc>
   163e4:	str	r3, [sp, #188]	; 0xbc
   163e8:	mov	r0, #0
   163ec:	mov	r1, #-2147483648	; 0x80000000
   163f0:	mov	r3, sl
   163f4:	mov	r8, r2
   163f8:	bl	20f14 <__assert_fail@plt+0xf958>
   163fc:	ldr	r3, [sp, #188]	; 0xbc
   16400:	subs	r0, r0, r6
   16404:	mov	r2, r8
   16408:	sbcs	r0, r1, r7
   1640c:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16410:	b	17714 <__assert_fail@plt+0x6158>
   16414:	ldr	r9, [sp, #108]	; 0x6c
   16418:	sub	r7, r3, r6
   1641c:	str	r7, [r4, #144]	; 0x90
   16420:	mov	r7, r0
   16424:	ldr	r8, [r9]
   16428:	ldr	r3, [r9, #4]
   1642c:	subs	r8, r8, r1
   16430:	str	r3, [sp, #8]
   16434:	sbc	r0, r3, r0
   16438:	mov	r3, lr
   1643c:	str	r0, [sp, #12]
   16440:	str	r8, [r9]
   16444:	str	r0, [r9, #4]
   16448:	str	r6, [sp, #52]	; 0x34
   1644c:	ldr	r6, [sp, #112]	; 0x70
   16450:	ldr	r8, [r6]
   16454:	ldr	r0, [r6, #4]
   16458:	subs	r8, r8, ip
   1645c:	str	r0, [sp, #16]
   16460:	sbc	r9, r0, lr
   16464:	strd	r8, [r6]
   16468:	ldr	r0, [sp, #116]	; 0x74
   1646c:	ldr	r8, [r0]
   16470:	ldr	r1, [r0, #4]
   16474:	subs	r2, r8, r2
   16478:	str	r1, [sp, #20]
   1647c:	sbc	r1, r1, sl
   16480:	str	r1, [sp, #24]
   16484:	str	r2, [r0]
   16488:	str	r1, [r0, #4]
   1648c:	ldr	r0, [sp, #120]	; 0x78
   16490:	ldr	r2, [r0]
   16494:	ldr	r1, [r0, #4]
   16498:	ldr	r6, [sp, #56]	; 0x38
   1649c:	ldr	lr, [sp, #76]	; 0x4c
   164a0:	subs	r2, r2, r6
   164a4:	str	r1, [sp, #32]
   164a8:	sbc	r1, r1, lr
   164ac:	str	r1, [sp, #44]	; 0x2c
   164b0:	str	r2, [r0]
   164b4:	str	r1, [r0, #4]
   164b8:	ldr	r0, [sp, #124]	; 0x7c
   164bc:	ldr	r2, [r0]
   164c0:	ldr	r1, [r0, #4]
   164c4:	ldr	r6, [sp, #60]	; 0x3c
   164c8:	ldr	r8, [sp, #72]	; 0x48
   164cc:	subs	r2, r2, r6
   164d0:	str	r1, [sp, #48]	; 0x30
   164d4:	sbc	r1, r1, r8
   164d8:	str	r1, [sp, #56]	; 0x38
   164dc:	str	r2, [r0]
   164e0:	str	r1, [r0, #4]
   164e4:	ldr	r1, [sp, #128]	; 0x80
   164e8:	ldr	r2, [r1]
   164ec:	ldr	r0, [r1, #4]
   164f0:	ldr	r6, [sp, #64]	; 0x40
   164f4:	subs	ip, r2, r6
   164f8:	ldr	r6, [sp, #80]	; 0x50
   164fc:	str	r0, [sp, #60]	; 0x3c
   16500:	sbc	r2, r0, r6
   16504:	cmn	r7, #1
   16508:	mov	r0, #0
   1650c:	mov	r7, #0
   16510:	str	r2, [sp, #64]	; 0x40
   16514:	str	ip, [r1]
   16518:	str	r2, [r1, #4]
   1651c:	movwgt	r0, #1
   16520:	mov	r2, #0
   16524:	ldr	r1, [sp, #8]
   16528:	cmn	r1, #1
   1652c:	ldr	r1, [sp, #16]
   16530:	movwgt	r2, #1
   16534:	subs	r0, r2, r0
   16538:	movwne	r0, #1
   1653c:	str	r0, [sp, #28]
   16540:	ldr	r0, [sp, #12]
   16544:	cmn	r0, #1
   16548:	mov	r0, #0
   1654c:	movwgt	r0, #1
   16550:	subs	r0, r2, r0
   16554:	ldr	r2, [sp, #44]	; 0x2c
   16558:	movwne	r0, #1
   1655c:	cmn	r3, #1
   16560:	ldr	r3, [sp, #48]	; 0x30
   16564:	str	r0, [sp, #12]
   16568:	mov	r0, #0
   1656c:	movwgt	r0, #1
   16570:	cmn	r1, #1
   16574:	mov	r1, #0
   16578:	movwgt	r1, #1
   1657c:	subs	r0, r1, r0
   16580:	movwne	r0, #1
   16584:	cmn	r9, #1
   16588:	str	r0, [sp, #36]	; 0x24
   1658c:	mov	r0, #0
   16590:	movwgt	r0, #1
   16594:	subs	r0, r1, r0
   16598:	ldr	r1, [sp, #20]
   1659c:	movwne	r0, #1
   165a0:	cmn	sl, #1
   165a4:	str	r0, [sp, #16]
   165a8:	mov	r0, #0
   165ac:	movwgt	r0, #1
   165b0:	cmn	r1, #1
   165b4:	mov	r1, #0
   165b8:	movwgt	r1, #1
   165bc:	subs	sl, r1, r0
   165c0:	ldr	r0, [sp, #24]
   165c4:	movwne	sl, #1
   165c8:	cmn	r0, #1
   165cc:	mov	r0, #0
   165d0:	movwgt	r0, #1
   165d4:	subs	ip, r1, r0
   165d8:	ldr	r1, [sp, #32]
   165dc:	mov	r0, #0
   165e0:	movwne	ip, #1
   165e4:	cmn	lr, #1
   165e8:	movwgt	r0, #1
   165ec:	cmn	r1, #1
   165f0:	mov	r1, #0
   165f4:	movwgt	r1, #1
   165f8:	subs	r0, r1, r0
   165fc:	movwne	r0, #1
   16600:	cmn	r2, #1
   16604:	mov	r2, #0
   16608:	movwgt	r2, #1
   1660c:	subs	r2, r1, r2
   16610:	mov	r1, #0
   16614:	movwne	r2, #1
   16618:	cmn	r8, #1
   1661c:	movwgt	r1, #1
   16620:	cmn	r3, #1
   16624:	movwgt	r7, #1
   16628:	subs	r3, r7, r1
   1662c:	ldr	r1, [sp, #56]	; 0x38
   16630:	movwne	r3, #1
   16634:	cmn	r1, #1
   16638:	mov	r1, #0
   1663c:	movwgt	r1, #1
   16640:	subs	r1, r7, r1
   16644:	mov	r7, #0
   16648:	movwne	r1, #1
   1664c:	cmn	r6, #1
   16650:	ldr	r6, [sp, #60]	; 0x3c
   16654:	movwgt	r7, #1
   16658:	cmn	r6, #1
   1665c:	mov	r6, #0
   16660:	movwgt	r6, #1
   16664:	subs	r8, r6, r7
   16668:	ldr	r7, [sp, #64]	; 0x40
   1666c:	movwne	r8, #1
   16670:	cmn	r7, #1
   16674:	mov	r7, #0
   16678:	movwgt	r7, #1
   1667c:	subs	lr, r6, r7
   16680:	ldr	r6, [sp, #68]	; 0x44
   16684:	ldr	r7, [sp, #52]	; 0x34
   16688:	movwne	lr, #1
   1668c:	cmp	r6, r7
   16690:	bvs	179e4 <__assert_fail@plt+0x6428>
   16694:	ldr	r6, [sp, #28]
   16698:	ldr	r7, [sp, #12]
   1669c:	ands	r6, r6, r7
   166a0:	bne	179d0 <__assert_fail@plt+0x6414>
   166a4:	ldr	r6, [sp, #36]	; 0x24
   166a8:	ldr	r7, [sp, #16]
   166ac:	ands	r6, r6, r7
   166b0:	bne	17994 <__assert_fail@plt+0x63d8>
   166b4:	ands	r7, sl, ip
   166b8:	bne	178a4 <__assert_fail@plt+0x62e8>
   166bc:	ands	r0, r0, r2
   166c0:	ldr	sl, [sp, #172]	; 0xac
   166c4:	ldr	r9, [sp, #176]	; 0xb0
   166c8:	ldr	r7, [sp, #168]	; 0xa8
   166cc:	ldr	r0, [sp, #192]	; 0xc0
   166d0:	bne	17818 <__assert_fail@plt+0x625c>
   166d4:	str	r0, [sp, #192]	; 0xc0
   166d8:	ands	r0, r3, r1
   166dc:	bne	17750 <__assert_fail@plt+0x6194>
   166e0:	ands	r0, r8, lr
   166e4:	ldr	r3, [sp, #188]	; 0xbc
   166e8:	ldr	lr, [sp, #180]	; 0xb4
   166ec:	ldr	r8, [sp, #184]	; 0xb8
   166f0:	ldr	r2, [sp, #196]	; 0xc4
   166f4:	mov	r0, #1
   166f8:	beq	16bf4 <__assert_fail@plt+0x5638>
   166fc:	b	174fc <__assert_fail@plt+0x5f40>
   16700:	mov	r0, r6
   16704:	mov	r1, r2
   16708:	mov	r7, r2
   1670c:	mov	r2, #100	; 0x64
   16710:	mov	r3, #0
   16714:	bl	20f14 <__assert_fail@plt+0xf958>
   16718:	umull	r2, r3, r0, r9
   1671c:	mla	r3, r1, r9, r3
   16720:	subs	r2, r6, r2
   16724:	rsb	r1, r1, r1, lsl #4
   16728:	sbc	r3, r7, r3
   1672c:	mov	r7, #60	; 0x3c
   16730:	umull	r0, r7, r0, r7
   16734:	adds	r0, r0, r2
   16738:	add	r1, r7, r1, lsl #2
   1673c:	mov	r2, #1
   16740:	adc	r7, r1, r3
   16744:	adds	r1, r0, #1440	; 0x5a0
   16748:	adc	r3, r7, #0
   1674c:	cmp	r2, #0
   16750:	bne	16f60 <__assert_fail@plt+0x59a4>
   16754:	b	17584 <__assert_fail@plt+0x5fc8>
   16758:	mov	r0, r6
   1675c:	mov	r1, r2
   16760:	mov	r7, r2
   16764:	mov	r2, #100	; 0x64
   16768:	mov	r3, #0
   1676c:	bl	20f14 <__assert_fail@plt+0xf958>
   16770:	umull	r2, r3, r0, r9
   16774:	mla	r3, r1, r9, r3
   16778:	subs	r2, r6, r2
   1677c:	rsb	r1, r1, r1, lsl #4
   16780:	sbc	r3, r7, r3
   16784:	mov	r7, #60	; 0x3c
   16788:	umull	r0, r7, r0, r7
   1678c:	adds	ip, r0, r2
   16790:	add	r1, r7, r1, lsl #2
   16794:	mov	r2, #1
   16798:	adc	r7, r1, r3
   1679c:	adds	r1, ip, #1440	; 0x5a0
   167a0:	adc	r3, r7, #0
   167a4:	cmp	r2, #0
   167a8:	bne	170f8 <__assert_fail@plt+0x5b3c>
   167ac:	b	17598 <__assert_fail@plt+0x5fdc>
   167b0:	ldrd	r6, [r5, #-48]	; 0xffffffd0
   167b4:	cmn	r7, #1
   167b8:	ble	16e08 <__assert_fail@plt+0x584c>
   167bc:	and	r0, r2, sl
   167c0:	cmn	r0, #1
   167c4:	beq	162b8 <__assert_fail@plt+0x4cfc>
   167c8:	str	r3, [sp, #188]	; 0xbc
   167cc:	mov	r0, #0
   167d0:	mov	r1, #-2147483648	; 0x80000000
   167d4:	mov	r3, sl
   167d8:	mov	r8, r2
   167dc:	bl	20f14 <__assert_fail@plt+0xf958>
   167e0:	ldr	r3, [sp, #188]	; 0xbc
   167e4:	subs	r0, r0, r6
   167e8:	mov	r2, r8
   167ec:	sbcs	r0, r1, r7
   167f0:	bge	162b8 <__assert_fail@plt+0x4cfc>
   167f4:	b	1773c <__assert_fail@plt+0x6180>
   167f8:	ldrd	r6, [r5, #-48]	; 0xffffffd0
   167fc:	cmn	r7, #1
   16800:	ble	16e38 <__assert_fail@plt+0x587c>
   16804:	and	r0, r2, sl
   16808:	cmn	r0, #1
   1680c:	beq	162b8 <__assert_fail@plt+0x4cfc>
   16810:	str	r3, [sp, #188]	; 0xbc
   16814:	mov	r0, #0
   16818:	mov	r1, #-2147483648	; 0x80000000
   1681c:	mov	r3, sl
   16820:	mov	r8, r2
   16824:	bl	20f14 <__assert_fail@plt+0xf958>
   16828:	ldr	r3, [sp, #188]	; 0xbc
   1682c:	subs	r0, r0, r6
   16830:	mov	r2, r8
   16834:	sbcs	r0, r1, r7
   16838:	bge	162b8 <__assert_fail@plt+0x4cfc>
   1683c:	b	17728 <__assert_fail@plt+0x616c>
   16840:	mov	r0, r9
   16844:	mov	r1, r7
   16848:	mov	r2, #100	; 0x64
   1684c:	mov	r3, #0
   16850:	bl	20f14 <__assert_fail@plt+0xf958>
   16854:	mov	ip, #100	; 0x64
   16858:	mov	r6, #0
   1685c:	umull	r2, r3, r0, ip
   16860:	mla	r3, r1, ip, r3
   16864:	subs	r2, r9, r2
   16868:	sbc	r3, r7, r3
   1686c:	ldr	r7, [sp, #144]	; 0x90
   16870:	strd	r0, [r7]
   16874:	ldr	r0, [sp, #148]	; 0x94
   16878:	strd	r2, [r0]
   1687c:	mov	r0, #2
   16880:	str	r6, [r4, #88]	; 0x58
   16884:	str	r6, [r4, #92]	; 0x5c
   16888:	str	r0, [r4, #28]
   1688c:	ldr	r1, [r4, #144]	; 0x90
   16890:	ldr	r0, [r5, #48]	; 0x30
   16894:	ldr	sl, [r5, #12]
   16898:	ldr	ip, [r5, #20]
   1689c:	ldr	r3, [r5, #28]
   168a0:	ldr	r2, [r5, #44]	; 0x2c
   168a4:	ldr	r8, [r5, #24]
   168a8:	ldr	r9, [r5, #32]
   168ac:	ldr	lr, [r5, #40]	; 0x28
   168b0:	add	r0, r1, r0
   168b4:	str	r1, [sp, #76]	; 0x4c
   168b8:	ldr	r1, [r5]
   168bc:	str	sl, [sp, #64]	; 0x40
   168c0:	str	ip, [sp, #52]	; 0x34
   168c4:	str	r3, [sp, #40]	; 0x28
   168c8:	str	r2, [sp, #32]
   168cc:	str	r0, [sp, #72]	; 0x48
   168d0:	str	r1, [sp, #68]	; 0x44
   168d4:	ldr	r1, [r5, #4]
   168d8:	str	r1, [sp, #80]	; 0x50
   168dc:	ldr	r1, [r5, #8]
   168e0:	str	r1, [sp, #60]	; 0x3c
   168e4:	ldr	r1, [r5, #16]
   168e8:	str	r1, [sp, #56]	; 0x38
   168ec:	ldr	r1, [r5, #36]	; 0x24
   168f0:	str	r0, [r4, #144]	; 0x90
   168f4:	ldr	r0, [sp, #108]	; 0x6c
   168f8:	str	r1, [sp, #36]	; 0x24
   168fc:	ldrd	r6, [r0]
   16900:	adds	r6, r6, lr
   16904:	adc	lr, r7, r2
   16908:	stm	r0, {r6, lr}
   1690c:	ldr	r6, [sp, #112]	; 0x70
   16910:	ldm	r6, {r0, r2}
   16914:	adds	r9, r0, r9
   16918:	str	r2, [sp, #24]
   1691c:	adc	r0, r2, r1
   16920:	str	r0, [sp, #28]
   16924:	str	r9, [r6]
   16928:	str	r0, [r6, #4]
   1692c:	ldr	r0, [sp, #116]	; 0x74
   16930:	ldm	r0, {r2, r6}
   16934:	adds	r8, r2, r8
   16938:	adc	r2, r6, r3
   1693c:	str	r8, [r0]
   16940:	str	r2, [r0, #4]
   16944:	ldr	r0, [sp, #120]	; 0x78
   16948:	ldr	r1, [sp, #56]	; 0x38
   1694c:	ldrd	r8, [r0]
   16950:	adds	r8, r8, r1
   16954:	adc	r1, r9, ip
   16958:	str	r1, [sp, #44]	; 0x2c
   1695c:	str	r8, [r0]
   16960:	str	r1, [r0, #4]
   16964:	ldr	r0, [sp, #124]	; 0x7c
   16968:	ldr	r8, [r0]
   1696c:	ldr	r1, [r0, #4]
   16970:	ldr	r3, [sp, #60]	; 0x3c
   16974:	adds	r8, r8, r3
   16978:	str	r1, [sp, #48]	; 0x30
   1697c:	adc	r1, r1, sl
   16980:	mov	sl, #0
   16984:	str	r1, [sp, #56]	; 0x38
   16988:	str	r8, [r0]
   1698c:	str	r1, [r0, #4]
   16990:	ldr	ip, [sp, #128]	; 0x80
   16994:	ldr	r8, [ip]
   16998:	ldr	r0, [ip, #4]
   1699c:	ldr	r1, [sp, #68]	; 0x44
   169a0:	adds	r8, r8, r1
   169a4:	ldr	r1, [sp, #80]	; 0x50
   169a8:	str	r0, [sp, #60]	; 0x3c
   169ac:	adc	r3, r0, r1
   169b0:	cmn	r7, #1
   169b4:	mov	r0, #0
   169b8:	mov	r1, #0
   169bc:	movwgt	r0, #1
   169c0:	cmn	lr, #1
   169c4:	str	r3, [sp, #68]	; 0x44
   169c8:	str	r8, [ip]
   169cc:	str	r3, [ip, #4]
   169d0:	mov	r8, #0
   169d4:	mov	ip, #0
   169d8:	mov	r3, #0
   169dc:	movwgt	r1, #1
   169e0:	str	r0, [sp, #20]
   169e4:	subs	r0, r0, r1
   169e8:	mov	r1, #0
   169ec:	movwne	r0, #1
   169f0:	str	r0, [sp, #16]
   169f4:	ldr	r0, [sp, #32]
   169f8:	cmn	r0, #1
   169fc:	mov	r0, #0
   16a00:	movwgt	r0, #1
   16a04:	str	r0, [sp, #32]
   16a08:	ldr	r0, [sp, #24]
   16a0c:	cmn	r0, #1
   16a10:	ldr	r0, [sp, #28]
   16a14:	movwgt	r1, #1
   16a18:	str	r1, [sp, #28]
   16a1c:	cmn	r0, #1
   16a20:	mov	r0, #0
   16a24:	movwgt	r0, #1
   16a28:	subs	r0, r1, r0
   16a2c:	mov	r1, #0
   16a30:	movwne	r0, #1
   16a34:	str	r0, [sp, #24]
   16a38:	ldr	r0, [sp, #36]	; 0x24
   16a3c:	cmn	r0, #1
   16a40:	mov	r0, #0
   16a44:	movwgt	r0, #1
   16a48:	cmn	r6, #1
   16a4c:	ldr	r6, [sp, #76]	; 0x4c
   16a50:	movwgt	r1, #1
   16a54:	str	r0, [sp, #36]	; 0x24
   16a58:	cmn	r2, #1
   16a5c:	mov	r0, #0
   16a60:	mov	r2, #0
   16a64:	movwgt	r0, #1
   16a68:	str	r1, [sp, #12]
   16a6c:	subs	r0, r1, r0
   16a70:	mov	r1, #0
   16a74:	movwne	r0, #1
   16a78:	str	r0, [sp, #8]
   16a7c:	ldr	r0, [sp, #40]	; 0x28
   16a80:	cmn	r0, #1
   16a84:	mov	r0, #0
   16a88:	movwgt	r0, #1
   16a8c:	cmn	r9, #1
   16a90:	str	r0, [sp, #40]	; 0x28
   16a94:	ldr	r0, [sp, #44]	; 0x2c
   16a98:	movwgt	r8, #1
   16a9c:	cmn	r0, #1
   16aa0:	movwgt	r1, #1
   16aa4:	subs	r0, r8, r1
   16aa8:	mov	r1, #0
   16aac:	movwne	r0, #1
   16ab0:	str	r0, [sp, #44]	; 0x2c
   16ab4:	ldr	r0, [sp, #52]	; 0x34
   16ab8:	cmn	r0, #1
   16abc:	ldr	r0, [sp, #48]	; 0x30
   16ac0:	movwgt	ip, #1
   16ac4:	cmn	r0, #1
   16ac8:	ldr	r0, [sp, #56]	; 0x38
   16acc:	movwgt	r2, #1
   16ad0:	cmn	r0, #1
   16ad4:	ldr	r0, [sp, #64]	; 0x40
   16ad8:	movwgt	r1, #1
   16adc:	subs	r7, r2, r1
   16ae0:	mov	r1, #0
   16ae4:	movwne	r7, #1
   16ae8:	cmn	r0, #1
   16aec:	ldr	r0, [sp, #60]	; 0x3c
   16af0:	movwgt	r3, #1
   16af4:	cmn	r0, #1
   16af8:	ldr	r0, [sp, #68]	; 0x44
   16afc:	movwgt	sl, #1
   16b00:	cmn	r0, #1
   16b04:	ldr	r0, [sp, #80]	; 0x50
   16b08:	movwgt	r1, #1
   16b0c:	subs	r1, sl, r1
   16b10:	movwne	r1, #1
   16b14:	cmn	r0, #1
   16b18:	mov	r0, #0
   16b1c:	movwgt	r0, #1
   16b20:	str	r0, [sp, #80]	; 0x50
   16b24:	ldr	r0, [sp, #72]	; 0x48
   16b28:	cmp	r0, r6
   16b2c:	bvs	1791c <__assert_fail@plt+0x6360>
   16b30:	ldr	r0, [sp, #20]
   16b34:	ldr	r6, [sp, #32]
   16b38:	sub	lr, r0, r6
   16b3c:	ldr	r0, [sp, #16]
   16b40:	clz	r6, lr
   16b44:	lsr	r6, r6, #5
   16b48:	ands	r6, r6, r0
   16b4c:	bne	17930 <__assert_fail@plt+0x6374>
   16b50:	ldr	r0, [sp, #28]
   16b54:	ldr	r6, [sp, #36]	; 0x24
   16b58:	sub	r6, r0, r6
   16b5c:	ldr	r0, [sp, #24]
   16b60:	clz	r6, r6
   16b64:	lsr	r6, r6, #5
   16b68:	ands	r6, r6, r0
   16b6c:	bne	1787c <__assert_fail@plt+0x62c0>
   16b70:	ldr	r0, [sp, #12]
   16b74:	ldr	r6, [sp, #40]	; 0x28
   16b78:	ldr	lr, [sp, #180]	; 0xb4
   16b7c:	sub	r0, r0, r6
   16b80:	ldr	r6, [sp, #8]
   16b84:	clz	r0, r0
   16b88:	lsr	r0, r0, #5
   16b8c:	ands	r0, r0, r6
   16b90:	bne	17804 <__assert_fail@plt+0x6248>
   16b94:	ldr	r6, [sp, #44]	; 0x2c
   16b98:	sub	r0, r8, ip
   16b9c:	clz	r0, r0
   16ba0:	lsr	r0, r0, #5
   16ba4:	ands	r0, r0, r6
   16ba8:	bne	176c4 <__assert_fail@plt+0x6108>
   16bac:	sub	r0, r2, r3
   16bb0:	clz	r0, r0
   16bb4:	lsr	r0, r0, #5
   16bb8:	ands	r0, r0, r7
   16bbc:	bne	17610 <__assert_fail@plt+0x6054>
   16bc0:	ldr	r0, [sp, #80]	; 0x50
   16bc4:	ldr	r3, [sp, #188]	; 0xbc
   16bc8:	sub	r0, sl, r0
   16bcc:	ldr	sl, [sp, #172]	; 0xac
   16bd0:	clz	r0, r0
   16bd4:	lsr	r0, r0, #5
   16bd8:	ands	r0, r0, r1
   16bdc:	ldr	r9, [sp, #176]	; 0xb0
   16be0:	ldr	r7, [sp, #168]	; 0xa8
   16be4:	ldr	r8, [sp, #184]	; 0xb8
   16be8:	ldr	r2, [sp, #196]	; 0xc4
   16bec:	mov	r0, #1
   16bf0:	bne	174fc <__assert_fail@plt+0x5f40>
   16bf4:	mov	r0, #1
   16bf8:	strb	r0, [r4, #153]	; 0x99
   16bfc:	b	15fa4 <__assert_fail@plt+0x49e8>
   16c00:	mov	r0, r9
   16c04:	mov	r1, sl
   16c08:	mov	r2, #100	; 0x64
   16c0c:	mov	r3, #0
   16c10:	mov	r6, #100	; 0x64
   16c14:	mov	r7, lr
   16c18:	bl	20f14 <__assert_fail@plt+0xf958>
   16c1c:	mov	lr, r7
   16c20:	umull	r7, r3, r0, r6
   16c24:	mov	r2, #0
   16c28:	mla	r3, r1, r6, r3
   16c2c:	subs	r6, r9, r7
   16c30:	sbc	r3, sl, r3
   16c34:	ldr	r7, [sp, #144]	; 0x90
   16c38:	strd	r0, [r7]
   16c3c:	ldr	r0, [sp, #148]	; 0x94
   16c40:	str	r6, [r0]
   16c44:	str	r3, [r0, #4]
   16c48:	mov	r0, #2
   16c4c:	str	r2, [r4, #88]	; 0x58
   16c50:	str	r2, [r4, #92]	; 0x5c
   16c54:	ldr	r3, [sp, #188]	; 0xbc
   16c58:	ldr	sl, [sp, #172]	; 0xac
   16c5c:	str	r0, [r4, #28]
   16c60:	ldr	r9, [sp, #176]	; 0xb0
   16c64:	ldr	r7, [sp, #168]	; 0xa8
   16c68:	ldr	r2, [sp, #196]	; 0xc4
   16c6c:	b	15fa4 <__assert_fail@plt+0x49e8>
   16c70:	and	r0, r6, r2
   16c74:	mov	r7, r6
   16c78:	cmn	r0, #1
   16c7c:	bne	16e68 <__assert_fail@plt+0x58ac>
   16c80:	mov	r3, #0
   16c84:	b	16e9c <__assert_fail@plt+0x58e0>
   16c88:	and	r0, r6, r2
   16c8c:	mov	r7, r6
   16c90:	cmn	r0, #1
   16c94:	bne	16ffc <__assert_fail@plt+0x5a40>
   16c98:	mov	r3, #0
   16c9c:	b	17030 <__assert_fail@plt+0x5a74>
   16ca0:	sub	r6, r5, #216	; 0xd8
   16ca4:	ldrd	r0, [r6]
   16ca8:	ldr	r2, [sp, #164]	; 0xa4
   16cac:	ldr	r7, [sp, #168]	; 0xa8
   16cb0:	strd	r0, [r2]
   16cb4:	ldrd	r0, [r5, #-104]	; 0xffffff98
   16cb8:	ldr	r2, [sp, #160]	; 0xa0
   16cbc:	strd	r0, [r2]
   16cc0:	mov	r0, r5
   16cc4:	vld1.64	{d16-d17}, [r0]!
   16cc8:	ldr	sl, [sp, #172]	; 0xac
   16ccc:	ldr	r9, [sp, #176]	; 0xb0
   16cd0:	ldr	r2, [sp, #196]	; 0xc4
   16cd4:	vldr	d18, [r0]
   16cd8:	ldr	r0, [sp, #104]	; 0x68
   16cdc:	vst1.64	{d16-d17}, [r0]!
   16ce0:	vstr	d18, [r0]
   16ce4:	b	15fa4 <__assert_fail@plt+0x49e8>
   16ce8:	and	r0, r9, r8
   16cec:	mvn	r6, #0
   16cf0:	mvn	r7, #0
   16cf4:	cmn	r0, #1
   16cf8:	beq	162b8 <__assert_fail@plt+0x4cfc>
   16cfc:	str	r2, [sp, #244]	; 0xf4
   16d00:	mov	r6, r3
   16d04:	mov	r0, #0
   16d08:	mov	r1, #-2147483648	; 0x80000000
   16d0c:	mov	r2, r9
   16d10:	mov	r3, r8
   16d14:	bl	20f14 <__assert_fail@plt+0xf958>
   16d18:	ldr	r2, [sp, #244]	; 0xf4
   16d1c:	mov	r3, r6
   16d20:	mov	r6, r9
   16d24:	mov	r7, r8
   16d28:	subs	r0, r0, r2
   16d2c:	sbcs	r0, r1, sl
   16d30:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16d34:	b	1778c <__assert_fail@plt+0x61d0>
   16d38:	and	r0, r9, r8
   16d3c:	mvn	r6, #0
   16d40:	mvn	r7, #0
   16d44:	cmn	r0, #1
   16d48:	beq	162b8 <__assert_fail@plt+0x4cfc>
   16d4c:	str	r2, [sp, #244]	; 0xf4
   16d50:	mov	r6, r3
   16d54:	mov	r0, #0
   16d58:	mov	r1, #-2147483648	; 0x80000000
   16d5c:	mov	r2, r9
   16d60:	mov	r3, r8
   16d64:	bl	20f14 <__assert_fail@plt+0xf958>
   16d68:	ldr	r2, [sp, #244]	; 0xf4
   16d6c:	mov	r3, r6
   16d70:	mov	r6, r9
   16d74:	mov	r7, r8
   16d78:	subs	r0, r0, r2
   16d7c:	sbcs	r0, r1, sl
   16d80:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16d84:	b	17778 <__assert_fail@plt+0x61bc>
   16d88:	and	r0, r9, r8
   16d8c:	mvn	r6, #0
   16d90:	mvn	r7, #0
   16d94:	cmn	r0, #1
   16d98:	beq	162b8 <__assert_fail@plt+0x4cfc>
   16d9c:	str	r2, [sp, #244]	; 0xf4
   16da0:	mov	r6, r3
   16da4:	mov	r0, #0
   16da8:	mov	r1, #-2147483648	; 0x80000000
   16dac:	mov	r2, r9
   16db0:	mov	r3, r8
   16db4:	bl	20f14 <__assert_fail@plt+0xf958>
   16db8:	ldr	r2, [sp, #244]	; 0xf4
   16dbc:	mov	r3, r6
   16dc0:	mov	r6, r9
   16dc4:	mov	r7, r8
   16dc8:	subs	r0, r0, r2
   16dcc:	sbcs	r0, r1, sl
   16dd0:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16dd4:	b	177a0 <__assert_fail@plt+0x61e4>
   16dd8:	str	r3, [sp, #188]	; 0xbc
   16ddc:	mvn	r0, #0
   16de0:	mvn	r1, #-2147483648	; 0x80000000
   16de4:	mov	r3, sl
   16de8:	mov	r8, r2
   16dec:	bl	20f14 <__assert_fail@plt+0xf958>
   16df0:	ldr	r3, [sp, #188]	; 0xbc
   16df4:	subs	r0, r6, r0
   16df8:	mov	r2, r8
   16dfc:	sbcs	r0, r7, r1
   16e00:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16e04:	b	17674 <__assert_fail@plt+0x60b8>
   16e08:	str	r3, [sp, #188]	; 0xbc
   16e0c:	mvn	r0, #0
   16e10:	mvn	r1, #-2147483648	; 0x80000000
   16e14:	mov	r3, sl
   16e18:	mov	r8, r2
   16e1c:	bl	20f14 <__assert_fail@plt+0xf958>
   16e20:	ldr	r3, [sp, #188]	; 0xbc
   16e24:	subs	r0, r6, r0
   16e28:	mov	r2, r8
   16e2c:	sbcs	r0, r7, r1
   16e30:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16e34:	b	17688 <__assert_fail@plt+0x60cc>
   16e38:	str	r3, [sp, #188]	; 0xbc
   16e3c:	mvn	r0, #0
   16e40:	mvn	r1, #-2147483648	; 0x80000000
   16e44:	mov	r3, sl
   16e48:	mov	r8, r2
   16e4c:	bl	20f14 <__assert_fail@plt+0xf958>
   16e50:	ldr	r3, [sp, #188]	; 0xbc
   16e54:	subs	r0, r6, r0
   16e58:	mov	r2, r8
   16e5c:	sbcs	r0, r7, r1
   16e60:	bge	162b8 <__assert_fail@plt+0x4cfc>
   16e64:	b	1769c <__assert_fail@plt+0x60e0>
   16e68:	mov	r6, r2
   16e6c:	mov	r0, #0
   16e70:	mov	r1, #-2147483648	; 0x80000000
   16e74:	mov	r2, r7
   16e78:	mov	r8, ip
   16e7c:	mov	r3, r6
   16e80:	bl	20f14 <__assert_fail@plt+0xf958>
   16e84:	subs	r0, r0, #60	; 0x3c
   16e88:	mov	r3, #1
   16e8c:	mov	ip, r8
   16e90:	mov	r2, r6
   16e94:	sbcs	r0, r1, #0
   16e98:	movge	r3, #0
   16e9c:	mov	r0, #60	; 0x3c
   16ea0:	str	r3, [sp, #72]	; 0x48
   16ea4:	rsb	r3, r2, r2, lsl #4
   16ea8:	mov	r2, #0
   16eac:	umull	r8, r1, r7, r0
   16eb0:	ldr	r7, [sp, #80]	; 0x50
   16eb4:	add	r6, r1, r3, lsl #2
   16eb8:	adds	r0, r8, ip
   16ebc:	mov	r1, #0
   16ec0:	mov	r3, #0
   16ec4:	str	r0, [sp, #68]	; 0x44
   16ec8:	mov	r0, ip
   16ecc:	adc	r9, r6, r7
   16ed0:	cmn	r9, #1
   16ed4:	movwgt	r1, #1
   16ed8:	cmn	r6, #1
   16edc:	movwgt	r3, #1
   16ee0:	subs	sl, r3, r1
   16ee4:	mov	r1, #0
   16ee8:	movwne	sl, #1
   16eec:	cmn	r7, #1
   16ef0:	movwgt	r1, #1
   16ef4:	subs	r0, r8, r0
   16ef8:	ldr	r8, [sp, #184]	; 0xb8
   16efc:	sbc	r7, r6, r7
   16f00:	sub	ip, r3, r1
   16f04:	cmn	r7, #1
   16f08:	clz	lr, ip
   16f0c:	movwgt	r2, #1
   16f10:	lsr	lr, lr, #5
   16f14:	subs	r2, r3, r2
   16f18:	movwne	r2, #1
   16f1c:	cmp	r3, r1
   16f20:	movwne	ip, #1
   16f24:	and	r1, ip, r2
   16f28:	ldr	r2, [sp, #76]	; 0x4c
   16f2c:	ands	r2, r2, #1
   16f30:	ldr	r2, [sp, #72]	; 0x48
   16f34:	andeq	r1, lr, sl
   16f38:	ldr	sl, [sp, #172]	; 0xac
   16f3c:	moveq	r7, r9
   16f40:	orr	r1, r2, r1
   16f44:	eor	r2, r1, #1
   16f48:	ldr	r1, [sp, #68]	; 0x44
   16f4c:	moveq	r0, r1
   16f50:	adds	r1, r0, #1440	; 0x5a0
   16f54:	adc	r3, r7, #0
   16f58:	cmp	r2, #0
   16f5c:	beq	17584 <__assert_fail@plt+0x5fc8>
   16f60:	rsbs	r1, r1, #2880	; 0xb40
   16f64:	rscs	r1, r3, #0
   16f68:	bcc	17570 <__assert_fail@plt+0x5fb4>
   16f6c:	rsb	r0, r0, r0, lsl #4
   16f70:	mov	r3, #0
   16f74:	mov	r2, #0
   16f78:	lsl	r1, r0, #2
   16f7c:	str	r1, [r4, #24]
   16f80:	sbfx	r1, r0, #29, #1
   16f84:	ldrd	r6, [r5, #-112]	; 0xffffff90
   16f88:	cmn	r1, #1
   16f8c:	movwgt	r3, #1
   16f90:	adds	r0, r6, r0, lsl #2
   16f94:	mov	r6, #0
   16f98:	adc	r1, r1, r7
   16f9c:	str	r0, [r4, #24]
   16fa0:	cmn	r1, #1
   16fa4:	movwgt	r6, #1
   16fa8:	subs	r6, r3, r6
   16fac:	movwne	r6, #1
   16fb0:	cmn	r7, #1
   16fb4:	movwgt	r2, #1
   16fb8:	sub	r2, r3, r2
   16fbc:	clz	r2, r2
   16fc0:	lsr	r2, r2, #5
   16fc4:	tst	r2, r6
   16fc8:	bne	175ac <__assert_fail@plt+0x5ff0>
   16fcc:	asr	r2, r0, #31
   16fd0:	ldr	r3, [sp, #188]	; 0xbc
   16fd4:	ldr	lr, [sp, #180]	; 0xb4
   16fd8:	ldr	r9, [sp, #176]	; 0xb0
   16fdc:	ldr	r7, [sp, #168]	; 0xa8
   16fe0:	eor	r0, r0, r0
   16fe4:	eor	r1, r1, r2
   16fe8:	ldr	r2, [sp, #196]	; 0xc4
   16fec:	orrs	r0, r0, r1
   16ff0:	mov	r0, #1
   16ff4:	beq	15fa4 <__assert_fail@plt+0x49e8>
   16ff8:	b	174fc <__assert_fail@plt+0x5f40>
   16ffc:	mov	r6, r2
   17000:	mov	r0, #0
   17004:	mov	r1, #-2147483648	; 0x80000000
   17008:	mov	r2, r7
   1700c:	mov	r8, lr
   17010:	mov	r3, r6
   17014:	bl	20f14 <__assert_fail@plt+0xf958>
   17018:	subs	r0, r0, #60	; 0x3c
   1701c:	mov	r3, #1
   17020:	mov	lr, r8
   17024:	mov	r2, r6
   17028:	sbcs	r0, r1, #0
   1702c:	movge	r3, #0
   17030:	mov	r0, #60	; 0x3c
   17034:	str	r3, [sp, #72]	; 0x48
   17038:	rsb	r3, r2, r2, lsl #4
   1703c:	mov	r2, #0
   17040:	umull	r8, r1, r7, r0
   17044:	ldr	r7, [sp, #80]	; 0x50
   17048:	add	r6, r1, r3, lsl #2
   1704c:	adds	r0, r8, lr
   17050:	mov	r1, #0
   17054:	mov	r3, #0
   17058:	str	r0, [sp, #68]	; 0x44
   1705c:	mov	r0, lr
   17060:	adc	r9, r6, r7
   17064:	cmn	r9, #1
   17068:	movwgt	r1, #1
   1706c:	cmn	r6, #1
   17070:	movwgt	r3, #1
   17074:	subs	sl, r3, r1
   17078:	mov	r1, #0
   1707c:	movwne	sl, #1
   17080:	cmn	r7, #1
   17084:	movwgt	r1, #1
   17088:	subs	r8, r8, r0
   1708c:	ldr	r0, [sp, #76]	; 0x4c
   17090:	sbc	r7, r6, r7
   17094:	sub	ip, r3, r1
   17098:	cmn	r7, #1
   1709c:	clz	lr, ip
   170a0:	movwgt	r2, #1
   170a4:	lsr	lr, lr, #5
   170a8:	subs	r2, r3, r2
   170ac:	movwne	r2, #1
   170b0:	cmp	r3, r1
   170b4:	movwne	ip, #1
   170b8:	and	r1, ip, r2
   170bc:	ands	r2, r0, #1
   170c0:	mov	ip, r8
   170c4:	ldr	r8, [sp, #184]	; 0xb8
   170c8:	ldr	r2, [sp, #72]	; 0x48
   170cc:	andeq	r1, lr, sl
   170d0:	ldr	sl, [sp, #172]	; 0xac
   170d4:	moveq	r7, r9
   170d8:	orr	r1, r2, r1
   170dc:	eor	r2, r1, #1
   170e0:	ldr	r1, [sp, #68]	; 0x44
   170e4:	moveq	ip, r1
   170e8:	adds	r1, ip, #1440	; 0x5a0
   170ec:	adc	r3, r7, #0
   170f0:	cmp	r2, #0
   170f4:	beq	17598 <__assert_fail@plt+0x5fdc>
   170f8:	rsbs	r1, r1, #2880	; 0xb40
   170fc:	ldr	lr, [sp, #180]	; 0xb4
   17100:	ldr	r9, [sp, #176]	; 0xb0
   17104:	ldr	r7, [sp, #168]	; 0xa8
   17108:	ldr	r2, [sp, #196]	; 0xc4
   1710c:	mov	r0, #1
   17110:	rscs	r1, r3, #0
   17114:	ldr	r3, [sp, #188]	; 0xbc
   17118:	bcc	174fc <__assert_fail@plt+0x5f40>
   1711c:	rsb	r0, ip, ip, lsl #4
   17120:	lsl	r0, r0, #2
   17124:	str	r0, [r4, #24]
   17128:	b	15fa4 <__assert_fail@plt+0x49e8>
   1712c:	mov	r0, #1
   17130:	ldr	r1, [sp, #80]	; 0x50
   17134:	strb	r0, [r4, #180]	; 0xb4
   17138:	ldr	r0, [sp, #104]	; 0x68
   1713c:	vst1.64	{d16-d17}, [r0]
   17140:	ldr	r0, [sp, #96]	; 0x60
   17144:	stm	r0, {r1, r6}
   17148:	b	1688c <__assert_fail@plt+0x52d0>
   1714c:	mov	r0, #1
   17150:	ldr	r1, [sp, #80]	; 0x50
   17154:	strb	r0, [r4, #180]	; 0xb4
   17158:	ldr	r0, [sp, #104]	; 0x68
   1715c:	vst1.64	{d16-d17}, [r0]
   17160:	ldr	r0, [sp, #96]	; 0x60
   17164:	stm	r0, {r1, r6}
   17168:	b	15fa4 <__assert_fail@plt+0x49e8>
   1716c:	mov	r0, r6
   17170:	b	13f98 <__assert_fail@plt+0x29dc>
   17174:	ldr	r0, [sp, #244]	; 0xf4
   17178:	b	13f98 <__assert_fail@plt+0x29dc>
   1717c:	ldr	r0, [sp, #240]	; 0xf0
   17180:	b	13f98 <__assert_fail@plt+0x29dc>
   17184:	ldr	r0, [sp, #236]	; 0xec
   17188:	b	13f98 <__assert_fail@plt+0x29dc>
   1718c:	ldr	r0, [sp, #232]	; 0xe8
   17190:	b	13f98 <__assert_fail@plt+0x29dc>
   17194:	ldr	r0, [sp, #228]	; 0xe4
   17198:	b	13f98 <__assert_fail@plt+0x29dc>
   1719c:	ldr	r0, [sp, #224]	; 0xe0
   171a0:	b	13f98 <__assert_fail@plt+0x29dc>
   171a4:	ldr	r0, [sp, #220]	; 0xdc
   171a8:	b	13f98 <__assert_fail@plt+0x29dc>
   171ac:	mov	r0, r7
   171b0:	b	13f98 <__assert_fail@plt+0x29dc>
   171b4:	movw	r0, #8920	; 0x22d8
   171b8:	movt	r0, #2
   171bc:	b	13ab4 <__assert_fail@plt+0x24f8>
   171c0:	movw	r0, #8920	; 0x22d8
   171c4:	movt	r0, #2
   171c8:	add	r0, r0, #24
   171cc:	b	13f98 <__assert_fail@plt+0x29dc>
   171d0:	movw	r0, #8920	; 0x22d8
   171d4:	movt	r0, #2
   171d8:	add	r0, r0, #36	; 0x24
   171dc:	b	13f98 <__assert_fail@plt+0x29dc>
   171e0:	movw	r0, #8920	; 0x22d8
   171e4:	movt	r0, #2
   171e8:	add	r0, r0, #48	; 0x30
   171ec:	b	13f98 <__assert_fail@plt+0x29dc>
   171f0:	movw	r0, #8920	; 0x22d8
   171f4:	movt	r0, #2
   171f8:	add	r0, r0, #60	; 0x3c
   171fc:	b	13f98 <__assert_fail@plt+0x29dc>
   17200:	movw	r0, #8920	; 0x22d8
   17204:	movt	r0, #2
   17208:	add	r0, r0, #72	; 0x48
   1720c:	b	13f98 <__assert_fail@plt+0x29dc>
   17210:	movw	r0, #8920	; 0x22d8
   17214:	movt	r0, #2
   17218:	add	r0, r0, #84	; 0x54
   1721c:	b	13f98 <__assert_fail@plt+0x29dc>
   17220:	movw	r0, #8920	; 0x22d8
   17224:	movt	r0, #2
   17228:	add	r0, r0, #96	; 0x60
   1722c:	b	13f98 <__assert_fail@plt+0x29dc>
   17230:	movw	r0, #8920	; 0x22d8
   17234:	movt	r0, #2
   17238:	add	r0, r0, #108	; 0x6c
   1723c:	b	13f98 <__assert_fail@plt+0x29dc>
   17240:	movw	r0, #8920	; 0x22d8
   17244:	movt	r0, #2
   17248:	add	r0, r0, #120	; 0x78
   1724c:	b	13f98 <__assert_fail@plt+0x29dc>
   17250:	movw	r0, #8920	; 0x22d8
   17254:	movt	r0, #2
   17258:	add	r0, r0, #132	; 0x84
   1725c:	b	13f98 <__assert_fail@plt+0x29dc>
   17260:	movw	r0, #8920	; 0x22d8
   17264:	movt	r0, #2
   17268:	add	r0, r0, #144	; 0x90
   1726c:	b	13f98 <__assert_fail@plt+0x29dc>
   17270:	movw	r0, #8920	; 0x22d8
   17274:	movt	r0, #2
   17278:	add	r0, r0, #156	; 0x9c
   1727c:	b	13f98 <__assert_fail@plt+0x29dc>
   17280:	movw	r0, #8920	; 0x22d8
   17284:	movt	r0, #2
   17288:	add	r0, r0, #168	; 0xa8
   1728c:	b	13f98 <__assert_fail@plt+0x29dc>
   17290:	movw	r0, #8920	; 0x22d8
   17294:	movt	r0, #2
   17298:	add	r0, r0, #180	; 0xb4
   1729c:	b	13f98 <__assert_fail@plt+0x29dc>
   172a0:	movw	r0, #8920	; 0x22d8
   172a4:	movt	r0, #2
   172a8:	add	r0, r0, #192	; 0xc0
   172ac:	b	13f98 <__assert_fail@plt+0x29dc>
   172b0:	movw	r0, #8920	; 0x22d8
   172b4:	movt	r0, #2
   172b8:	add	r0, r0, #204	; 0xcc
   172bc:	b	13f98 <__assert_fail@plt+0x29dc>
   172c0:	movw	r0, #8920	; 0x22d8
   172c4:	movt	r0, #2
   172c8:	add	r0, r0, #216	; 0xd8
   172cc:	b	13f98 <__assert_fail@plt+0x29dc>
   172d0:	movw	r0, #8920	; 0x22d8
   172d4:	movt	r0, #2
   172d8:	add	r0, r0, #228	; 0xe4
   172dc:	b	13f98 <__assert_fail@plt+0x29dc>
   172e0:	cmp	r1, #0
   172e4:	beq	17360 <__assert_fail@plt+0x5da4>
   172e8:	ldr	r0, [sp, #88]	; 0x58
   172ec:	cmp	r1, #46	; 0x2e
   172f0:	sub	r2, fp, #72	; 0x48
   172f4:	sub	r1, r1, #46	; 0x2e
   172f8:	clz	r1, r1
   172fc:	lsr	r1, r1, #5
   17300:	moveq	r0, r2
   17304:	ldrb	r2, [fp, #-71]	; 0xffffffb9
   17308:	cmp	r2, #0
   1730c:	strb	r2, [r0]
   17310:	beq	17344 <__assert_fail@plt+0x5d88>
   17314:	ldr	r2, [sp, #88]	; 0x58
   17318:	ldrb	r3, [r2]
   1731c:	ldrb	r7, [r2, #1]!
   17320:	cmp	r3, #46	; 0x2e
   17324:	sub	r3, r3, #46	; 0x2e
   17328:	clz	r3, r3
   1732c:	addne	r0, r0, #1
   17330:	cmp	r7, #0
   17334:	lsr	r3, r3, #5
   17338:	strb	r7, [r0]
   1733c:	orr	r1, r1, r3
   17340:	bne	17318 <__assert_fail@plt+0x5d5c>
   17344:	tst	r1, #1
   17348:	beq	17360 <__assert_fail@plt+0x5da4>
   1734c:	mov	r0, r4
   17350:	sub	r1, fp, #72	; 0x48
   17354:	bl	1b58c <__assert_fail@plt+0x9fd0>
   17358:	cmp	r0, #0
   1735c:	bne	13f98 <__assert_fail@plt+0x29dc>
   17360:	ldrb	r0, [r4, #181]	; 0xb5
   17364:	mov	r7, #63	; 0x3f
   17368:	cmp	r0, #0
   1736c:	beq	13fb4 <__assert_fail@plt+0x29f8>
   17370:	movw	r1, #10563	; 0x2943
   17374:	mov	r0, #0
   17378:	mov	r2, #5
   1737c:	movt	r1, #2
   17380:	bl	11328 <dcgettext@plt>
   17384:	sub	r1, fp, #72	; 0x48
   17388:	bl	1823c <__assert_fail@plt+0x6c80>
   1738c:	b	13fb4 <__assert_fail@plt+0x29f8>
   17390:	movw	r0, #9172	; 0x23d4
   17394:	movt	r0, #2
   17398:	add	r0, r0, #24
   1739c:	b	13f98 <__assert_fail@plt+0x29dc>
   173a0:	movw	r0, #9172	; 0x23d4
   173a4:	movt	r0, #2
   173a8:	add	r0, r0, #36	; 0x24
   173ac:	b	13f98 <__assert_fail@plt+0x29dc>
   173b0:	movw	r0, #9172	; 0x23d4
   173b4:	movt	r0, #2
   173b8:	add	r0, r0, #48	; 0x30
   173bc:	b	13f98 <__assert_fail@plt+0x29dc>
   173c0:	movw	r0, #9172	; 0x23d4
   173c4:	movt	r0, #2
   173c8:	add	r0, r0, #60	; 0x3c
   173cc:	b	13f98 <__assert_fail@plt+0x29dc>
   173d0:	movw	r0, #9172	; 0x23d4
   173d4:	movt	r0, #2
   173d8:	add	r0, r0, #72	; 0x48
   173dc:	b	13f98 <__assert_fail@plt+0x29dc>
   173e0:	movw	r0, #9172	; 0x23d4
   173e4:	movt	r0, #2
   173e8:	add	r0, r0, #84	; 0x54
   173ec:	b	13f98 <__assert_fail@plt+0x29dc>
   173f0:	movw	r0, #9172	; 0x23d4
   173f4:	movt	r0, #2
   173f8:	add	r0, r0, #96	; 0x60
   173fc:	b	13f98 <__assert_fail@plt+0x29dc>
   17400:	movw	r0, #9172	; 0x23d4
   17404:	movt	r0, #2
   17408:	add	r0, r0, #108	; 0x6c
   1740c:	b	13f98 <__assert_fail@plt+0x29dc>
   17410:	movw	r0, #9172	; 0x23d4
   17414:	movt	r0, #2
   17418:	add	r0, r0, #120	; 0x78
   1741c:	b	13f98 <__assert_fail@plt+0x29dc>
   17420:	movw	r0, #9172	; 0x23d4
   17424:	movt	r0, #2
   17428:	add	r0, r0, #132	; 0x84
   1742c:	b	13f98 <__assert_fail@plt+0x29dc>
   17430:	movw	r0, #9172	; 0x23d4
   17434:	movt	r0, #2
   17438:	add	r0, r0, #144	; 0x90
   1743c:	b	13f98 <__assert_fail@plt+0x29dc>
   17440:	movw	r0, #9172	; 0x23d4
   17444:	movt	r0, #2
   17448:	add	r0, r0, #156	; 0x9c
   1744c:	b	13f98 <__assert_fail@plt+0x29dc>
   17450:	movw	r0, #9172	; 0x23d4
   17454:	movt	r0, #2
   17458:	add	r0, r0, #168	; 0xa8
   1745c:	b	13f98 <__assert_fail@plt+0x29dc>
   17460:	movw	r0, #9172	; 0x23d4
   17464:	movt	r0, #2
   17468:	add	r0, r0, #180	; 0xb4
   1746c:	b	13f98 <__assert_fail@plt+0x29dc>
   17470:	movw	r0, #9172	; 0x23d4
   17474:	movt	r0, #2
   17478:	add	r0, r0, #192	; 0xc0
   1747c:	b	13f98 <__assert_fail@plt+0x29dc>
   17480:	movw	r0, #9172	; 0x23d4
   17484:	movt	r0, #2
   17488:	add	r0, r0, #204	; 0xcc
   1748c:	b	13f98 <__assert_fail@plt+0x29dc>
   17490:	movw	r0, #9172	; 0x23d4
   17494:	movt	r0, #2
   17498:	add	r0, r0, #216	; 0xd8
   1749c:	b	13f98 <__assert_fail@plt+0x29dc>
   174a0:	movw	r0, #9172	; 0x23d4
   174a4:	movt	r0, #2
   174a8:	add	r0, r0, #228	; 0xe4
   174ac:	b	13f98 <__assert_fail@plt+0x29dc>
   174b0:	movw	r0, #9172	; 0x23d4
   174b4:	movt	r0, #2
   174b8:	add	r0, r0, #240	; 0xf0
   174bc:	b	13f98 <__assert_fail@plt+0x29dc>
   174c0:	movw	r0, #9172	; 0x23d4
   174c4:	movt	r0, #2
   174c8:	add	r0, r0, #252	; 0xfc
   174cc:	b	13f98 <__assert_fail@plt+0x29dc>
   174d0:	movw	r0, #9172	; 0x23d4
   174d4:	movt	r0, #2
   174d8:	b	13f94 <__assert_fail@plt+0x29d8>
   174dc:	movw	r0, #9172	; 0x23d4
   174e0:	movt	r0, #2
   174e4:	b	13d98 <__assert_fail@plt+0x27dc>
   174e8:	movw	r0, #9172	; 0x23d4
   174ec:	movt	r0, #2
   174f0:	add	r0, r0, #288	; 0x120
   174f4:	b	13f98 <__assert_fail@plt+0x29dc>
   174f8:	mov	r0, #0
   174fc:	sub	sp, fp, #48	; 0x30
   17500:	vpop	{d8-d9}
   17504:	add	sp, sp, #4
   17508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1750c:	mov	r0, #2
   17510:	sub	sp, fp, #48	; 0x30
   17514:	vpop	{d8-d9}
   17518:	add	sp, sp, #4
   1751c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17520:	mov	r0, #1
   17524:	sub	sp, fp, #48	; 0x30
   17528:	vpop	{d8-d9}
   1752c:	add	sp, sp, #4
   17530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17534:	mov	r0, #1
   17538:	sub	sp, fp, #48	; 0x30
   1753c:	vpop	{d8-d9}
   17540:	add	sp, sp, #4
   17544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17548:	mov	r0, #1
   1754c:	sub	sp, fp, #48	; 0x30
   17550:	vpop	{d8-d9}
   17554:	add	sp, sp, #4
   17558:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1755c:	mov	r0, #1
   17560:	sub	sp, fp, #48	; 0x30
   17564:	vpop	{d8-d9}
   17568:	add	sp, sp, #4
   1756c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17570:	mov	r0, #1
   17574:	sub	sp, fp, #48	; 0x30
   17578:	vpop	{d8-d9}
   1757c:	add	sp, sp, #4
   17580:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17584:	mov	r0, #1
   17588:	sub	sp, fp, #48	; 0x30
   1758c:	vpop	{d8-d9}
   17590:	add	sp, sp, #4
   17594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17598:	mov	r0, #1
   1759c:	sub	sp, fp, #48	; 0x30
   175a0:	vpop	{d8-d9}
   175a4:	add	sp, sp, #4
   175a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175ac:	mov	r0, #1
   175b0:	sub	sp, fp, #48	; 0x30
   175b4:	vpop	{d8-d9}
   175b8:	add	sp, sp, #4
   175bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175c0:	mov	r0, #1
   175c4:	sub	sp, fp, #48	; 0x30
   175c8:	vpop	{d8-d9}
   175cc:	add	sp, sp, #4
   175d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175d4:	mov	r0, #1
   175d8:	sub	sp, fp, #48	; 0x30
   175dc:	vpop	{d8-d9}
   175e0:	add	sp, sp, #4
   175e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175e8:	mov	r0, #1
   175ec:	sub	sp, fp, #48	; 0x30
   175f0:	vpop	{d8-d9}
   175f4:	add	sp, sp, #4
   175f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175fc:	mov	r0, #1
   17600:	sub	sp, fp, #48	; 0x30
   17604:	vpop	{d8-d9}
   17608:	add	sp, sp, #4
   1760c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17610:	mov	r0, #1
   17614:	sub	sp, fp, #48	; 0x30
   17618:	vpop	{d8-d9}
   1761c:	add	sp, sp, #4
   17620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17624:	mov	r0, #1
   17628:	sub	sp, fp, #48	; 0x30
   1762c:	vpop	{d8-d9}
   17630:	add	sp, sp, #4
   17634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17638:	mov	r0, #1
   1763c:	sub	sp, fp, #48	; 0x30
   17640:	vpop	{d8-d9}
   17644:	add	sp, sp, #4
   17648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1764c:	mov	r0, #1
   17650:	sub	sp, fp, #48	; 0x30
   17654:	vpop	{d8-d9}
   17658:	add	sp, sp, #4
   1765c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17660:	mov	r0, #1
   17664:	sub	sp, fp, #48	; 0x30
   17668:	vpop	{d8-d9}
   1766c:	add	sp, sp, #4
   17670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17674:	mov	r0, #1
   17678:	sub	sp, fp, #48	; 0x30
   1767c:	vpop	{d8-d9}
   17680:	add	sp, sp, #4
   17684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17688:	mov	r0, #1
   1768c:	sub	sp, fp, #48	; 0x30
   17690:	vpop	{d8-d9}
   17694:	add	sp, sp, #4
   17698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1769c:	mov	r0, #1
   176a0:	sub	sp, fp, #48	; 0x30
   176a4:	vpop	{d8-d9}
   176a8:	add	sp, sp, #4
   176ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176b0:	mov	r0, #1
   176b4:	sub	sp, fp, #48	; 0x30
   176b8:	vpop	{d8-d9}
   176bc:	add	sp, sp, #4
   176c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176c4:	mov	r0, #1
   176c8:	sub	sp, fp, #48	; 0x30
   176cc:	vpop	{d8-d9}
   176d0:	add	sp, sp, #4
   176d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176d8:	mov	r0, #1
   176dc:	sub	sp, fp, #48	; 0x30
   176e0:	vpop	{d8-d9}
   176e4:	add	sp, sp, #4
   176e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176ec:	mov	r0, #1
   176f0:	sub	sp, fp, #48	; 0x30
   176f4:	vpop	{d8-d9}
   176f8:	add	sp, sp, #4
   176fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17700:	mov	r0, #1
   17704:	sub	sp, fp, #48	; 0x30
   17708:	vpop	{d8-d9}
   1770c:	add	sp, sp, #4
   17710:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17714:	mov	r0, #1
   17718:	sub	sp, fp, #48	; 0x30
   1771c:	vpop	{d8-d9}
   17720:	add	sp, sp, #4
   17724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17728:	mov	r0, #1
   1772c:	sub	sp, fp, #48	; 0x30
   17730:	vpop	{d8-d9}
   17734:	add	sp, sp, #4
   17738:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1773c:	mov	r0, #1
   17740:	sub	sp, fp, #48	; 0x30
   17744:	vpop	{d8-d9}
   17748:	add	sp, sp, #4
   1774c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17750:	mov	r0, #1
   17754:	sub	sp, fp, #48	; 0x30
   17758:	vpop	{d8-d9}
   1775c:	add	sp, sp, #4
   17760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17764:	mov	r0, #1
   17768:	sub	sp, fp, #48	; 0x30
   1776c:	vpop	{d8-d9}
   17770:	add	sp, sp, #4
   17774:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17778:	mov	r0, #1
   1777c:	sub	sp, fp, #48	; 0x30
   17780:	vpop	{d8-d9}
   17784:	add	sp, sp, #4
   17788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1778c:	mov	r0, #1
   17790:	sub	sp, fp, #48	; 0x30
   17794:	vpop	{d8-d9}
   17798:	add	sp, sp, #4
   1779c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177a0:	mov	r0, #1
   177a4:	sub	sp, fp, #48	; 0x30
   177a8:	vpop	{d8-d9}
   177ac:	add	sp, sp, #4
   177b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177b4:	mov	r0, #1
   177b8:	sub	sp, fp, #48	; 0x30
   177bc:	vpop	{d8-d9}
   177c0:	add	sp, sp, #4
   177c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177c8:	mov	r0, #1
   177cc:	sub	sp, fp, #48	; 0x30
   177d0:	vpop	{d8-d9}
   177d4:	add	sp, sp, #4
   177d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177dc:	mov	r0, #1
   177e0:	sub	sp, fp, #48	; 0x30
   177e4:	vpop	{d8-d9}
   177e8:	add	sp, sp, #4
   177ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177f0:	mov	r0, #1
   177f4:	sub	sp, fp, #48	; 0x30
   177f8:	vpop	{d8-d9}
   177fc:	add	sp, sp, #4
   17800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17804:	mov	r0, #1
   17808:	sub	sp, fp, #48	; 0x30
   1780c:	vpop	{d8-d9}
   17810:	add	sp, sp, #4
   17814:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17818:	mov	r0, #1
   1781c:	sub	sp, fp, #48	; 0x30
   17820:	vpop	{d8-d9}
   17824:	add	sp, sp, #4
   17828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1782c:	mov	r0, #1
   17830:	sub	sp, fp, #48	; 0x30
   17834:	vpop	{d8-d9}
   17838:	add	sp, sp, #4
   1783c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17840:	mov	r0, #1
   17844:	sub	sp, fp, #48	; 0x30
   17848:	vpop	{d8-d9}
   1784c:	add	sp, sp, #4
   17850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17854:	mov	r0, #1
   17858:	sub	sp, fp, #48	; 0x30
   1785c:	vpop	{d8-d9}
   17860:	add	sp, sp, #4
   17864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17868:	mov	r0, #1
   1786c:	sub	sp, fp, #48	; 0x30
   17870:	vpop	{d8-d9}
   17874:	add	sp, sp, #4
   17878:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1787c:	mov	r0, #1
   17880:	sub	sp, fp, #48	; 0x30
   17884:	vpop	{d8-d9}
   17888:	add	sp, sp, #4
   1788c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17890:	mov	r0, #1
   17894:	sub	sp, fp, #48	; 0x30
   17898:	vpop	{d8-d9}
   1789c:	add	sp, sp, #4
   178a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178a4:	mov	r0, #1
   178a8:	sub	sp, fp, #48	; 0x30
   178ac:	vpop	{d8-d9}
   178b0:	add	sp, sp, #4
   178b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178b8:	mov	r0, #1
   178bc:	sub	sp, fp, #48	; 0x30
   178c0:	vpop	{d8-d9}
   178c4:	add	sp, sp, #4
   178c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178cc:	mov	r0, #1
   178d0:	sub	sp, fp, #48	; 0x30
   178d4:	vpop	{d8-d9}
   178d8:	add	sp, sp, #4
   178dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178e0:	mov	r0, #1
   178e4:	sub	sp, fp, #48	; 0x30
   178e8:	vpop	{d8-d9}
   178ec:	add	sp, sp, #4
   178f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178f4:	mov	r0, #1
   178f8:	sub	sp, fp, #48	; 0x30
   178fc:	vpop	{d8-d9}
   17900:	add	sp, sp, #4
   17904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17908:	mov	r0, #1
   1790c:	sub	sp, fp, #48	; 0x30
   17910:	vpop	{d8-d9}
   17914:	add	sp, sp, #4
   17918:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1791c:	mov	r0, #1
   17920:	sub	sp, fp, #48	; 0x30
   17924:	vpop	{d8-d9}
   17928:	add	sp, sp, #4
   1792c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17930:	mov	r0, #1
   17934:	sub	sp, fp, #48	; 0x30
   17938:	vpop	{d8-d9}
   1793c:	add	sp, sp, #4
   17940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17944:	mov	r0, #1
   17948:	sub	sp, fp, #48	; 0x30
   1794c:	vpop	{d8-d9}
   17950:	add	sp, sp, #4
   17954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17958:	mov	r0, #1
   1795c:	sub	sp, fp, #48	; 0x30
   17960:	vpop	{d8-d9}
   17964:	add	sp, sp, #4
   17968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1796c:	mov	r0, #1
   17970:	sub	sp, fp, #48	; 0x30
   17974:	vpop	{d8-d9}
   17978:	add	sp, sp, #4
   1797c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17980:	mov	r0, #1
   17984:	sub	sp, fp, #48	; 0x30
   17988:	vpop	{d8-d9}
   1798c:	add	sp, sp, #4
   17990:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17994:	mov	r0, #1
   17998:	sub	sp, fp, #48	; 0x30
   1799c:	vpop	{d8-d9}
   179a0:	add	sp, sp, #4
   179a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179a8:	mov	r0, #1
   179ac:	sub	sp, fp, #48	; 0x30
   179b0:	vpop	{d8-d9}
   179b4:	add	sp, sp, #4
   179b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179bc:	mov	r0, #1
   179c0:	sub	sp, fp, #48	; 0x30
   179c4:	vpop	{d8-d9}
   179c8:	add	sp, sp, #4
   179cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179d0:	mov	r0, #1
   179d4:	sub	sp, fp, #48	; 0x30
   179d8:	vpop	{d8-d9}
   179dc:	add	sp, sp, #4
   179e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179e4:	mov	r0, #1
   179e8:	sub	sp, fp, #48	; 0x30
   179ec:	vpop	{d8-d9}
   179f0:	add	sp, sp, #4
   179f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   179fc:	add	fp, sp, #24
   17a00:	sub	sp, sp, #128	; 0x80
   17a04:	mov	r5, r0
   17a08:	ldrb	r0, [r1, #181]	; 0xb5
   17a0c:	cmp	r0, #0
   17a10:	bne	17a1c <__assert_fail@plt+0x6460>
   17a14:	sub	sp, fp, #24
   17a18:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17a1c:	mov	r4, r1
   17a20:	movw	r1, #10301	; 0x283d
   17a24:	mov	r0, #0
   17a28:	mov	r2, #5
   17a2c:	mov	r7, #0
   17a30:	movt	r1, #2
   17a34:	bl	11328 <dcgettext@plt>
   17a38:	mov	r1, r5
   17a3c:	bl	1823c <__assert_fail@plt+0x6c80>
   17a40:	ldr	r0, [r4, #156]	; 0x9c
   17a44:	cmp	r0, #0
   17a48:	beq	17aa4 <__assert_fail@plt+0x64e8>
   17a4c:	ldrb	r0, [r4, #182]	; 0xb6
   17a50:	cmp	r0, #0
   17a54:	bne	17aa4 <__assert_fail@plt+0x64e8>
   17a58:	movw	r0, #16800	; 0x41a0
   17a5c:	ldrd	r2, [r4, #40]	; 0x28
   17a60:	ldr	r1, [r4, #56]	; 0x38
   17a64:	ldr	r7, [r4, #60]	; 0x3c
   17a68:	ldr	r6, [r4, #64]	; 0x40
   17a6c:	ldr	r5, [r4, #68]	; 0x44
   17a70:	movt	r0, #3
   17a74:	ldr	r0, [r0]
   17a78:	stm	sp, {r2, r3}
   17a7c:	movw	r2, #10318	; 0x284e
   17a80:	str	r1, [sp, #8]
   17a84:	mov	r1, #1
   17a88:	str	r7, [sp, #12]
   17a8c:	str	r6, [sp, #16]
   17a90:	str	r5, [sp, #20]
   17a94:	mov	r7, #1
   17a98:	movt	r2, #2
   17a9c:	bl	114d8 <__fprintf_chk@plt>
   17aa0:	strb	r7, [r4, #182]	; 0xb6
   17aa4:	ldrb	r0, [r4, #180]	; 0xb4
   17aa8:	ldrb	r1, [r4, #187]	; 0xbb
   17aac:	cmp	r0, r1
   17ab0:	beq	17b14 <__assert_fail@plt+0x6558>
   17ab4:	cmp	r7, #0
   17ab8:	beq	17ad0 <__assert_fail@plt+0x6514>
   17abc:	movw	r0, #16800	; 0x41a0
   17ac0:	movt	r0, #3
   17ac4:	ldr	r1, [r0]
   17ac8:	mov	r0, #32
   17acc:	bl	1152c <fputc@plt>
   17ad0:	movw	r0, #16800	; 0x41a0
   17ad4:	movw	r1, #10347	; 0x286b
   17ad8:	mov	r2, #5
   17adc:	movt	r0, #3
   17ae0:	movt	r1, #2
   17ae4:	ldr	r5, [r0]
   17ae8:	mov	r0, #0
   17aec:	bl	11328 <dcgettext@plt>
   17af0:	mov	r2, r0
   17af4:	ldrd	r0, [r4, #40]	; 0x28
   17af8:	mov	r7, #1
   17afc:	stm	sp, {r0, r1}
   17b00:	mov	r0, r5
   17b04:	mov	r1, #1
   17b08:	bl	114d8 <__fprintf_chk@plt>
   17b0c:	ldrb	r0, [r4, #180]	; 0xb4
   17b10:	strb	r0, [r4, #187]	; 0xbb
   17b14:	ldr	r0, [r4, #172]	; 0xac
   17b18:	cmp	r0, #0
   17b1c:	beq	17bc0 <__assert_fail@plt+0x6604>
   17b20:	ldrb	r0, [r4, #185]	; 0xb9
   17b24:	cmp	r0, #0
   17b28:	bne	17bc0 <__assert_fail@plt+0x6604>
   17b2c:	movw	r8, #16800	; 0x41a0
   17b30:	add	r6, r4, #76	; 0x4c
   17b34:	ldr	ip, [r4, #72]	; 0x48
   17b38:	movt	r8, #3
   17b3c:	ldr	r0, [r8]
   17b40:	ldm	r6, {r2, r3, r6}
   17b44:	ldr	r5, [r4, #88]	; 0x58
   17b48:	str	ip, [sp]
   17b4c:	stmib	sp, {r2, r3, r6}
   17b50:	movw	r2, #10360	; 0x2878
   17b54:	asr	r1, r5, #31
   17b58:	str	r5, [sp, #16]
   17b5c:	str	r1, [sp, #20]
   17b60:	eor	r1, r7, #1
   17b64:	movt	r2, #2
   17b68:	add	r2, r2, r1
   17b6c:	mov	r1, #1
   17b70:	bl	114d8 <__fprintf_chk@plt>
   17b74:	ldr	r3, [r4, #92]	; 0x5c
   17b78:	cmp	r3, #0
   17b7c:	beq	17b94 <__assert_fail@plt+0x65d8>
   17b80:	ldr	r0, [r8]
   17b84:	movw	r2, #10382	; 0x288e
   17b88:	mov	r1, #1
   17b8c:	movt	r2, #2
   17b90:	bl	114d8 <__fprintf_chk@plt>
   17b94:	ldr	r0, [r4, #28]
   17b98:	cmp	r0, #1
   17b9c:	bne	17bb8 <__assert_fail@plt+0x65fc>
   17ba0:	ldr	r3, [r8]
   17ba4:	movw	r0, #10388	; 0x2894
   17ba8:	mov	r1, #2
   17bac:	mov	r2, #1
   17bb0:	movt	r0, #2
   17bb4:	bl	1137c <fwrite@plt>
   17bb8:	mov	r7, #1
   17bbc:	strb	r7, [r4, #185]	; 0xb9
   17bc0:	ldr	r0, [r4, #160]	; 0xa0
   17bc4:	cmp	r0, #0
   17bc8:	beq	17d2c <__assert_fail@plt+0x6770>
   17bcc:	ldrb	r0, [r4, #183]	; 0xb7
   17bd0:	cmp	r0, #0
   17bd4:	bne	17d2c <__assert_fail@plt+0x6770>
   17bd8:	cmp	r7, #0
   17bdc:	beq	17bf4 <__assert_fail@plt+0x6638>
   17be0:	movw	r0, #16800	; 0x41a0
   17be4:	movt	r0, #3
   17be8:	ldr	r1, [r0]
   17bec:	mov	r0, #32
   17bf0:	bl	1152c <fputc@plt>
   17bf4:	movw	r0, #16800	; 0x41a0
   17bf8:	movw	r1, #10391	; 0x2897
   17bfc:	mov	r2, #5
   17c00:	mov	r7, #0
   17c04:	movt	r0, #3
   17c08:	movt	r1, #2
   17c0c:	ldr	r5, [r0]
   17c10:	mov	r0, #0
   17c14:	bl	11328 <dcgettext@plt>
   17c18:	mov	r6, r0
   17c1c:	ldrb	r0, [r4, #188]	; 0xbc
   17c20:	cmp	r0, #0
   17c24:	bne	17c3c <__assert_fail@plt+0x6680>
   17c28:	strb	r7, [sp, #28]
   17c2c:	ldr	r0, [r4, #16]
   17c30:	cmp	r0, #0
   17c34:	bge	17cb4 <__assert_fail@plt+0x66f8>
   17c38:	b	17d04 <__assert_fail@plt+0x6748>
   17c3c:	ldrd	r0, [r4, #8]
   17c40:	adds	r2, r0, #1
   17c44:	adc	r3, r1, #0
   17c48:	rsbs	r2, r2, #13
   17c4c:	rscs	r2, r3, #0
   17c50:	bcc	17c7c <__assert_fail@plt+0x66c0>
   17c54:	movw	r2, #8232	; 0x2028
   17c58:	mov	r3, #11
   17c5c:	movw	r1, #7182	; 0x1c0e
   17c60:	movt	r2, #2
   17c64:	movt	r1, #2
   17c68:	mla	r0, r0, r3, r2
   17c6c:	str	r1, [sp]
   17c70:	add	r0, r0, #11
   17c74:	str	r0, [sp, #4]
   17c78:	b	17c90 <__assert_fail@plt+0x66d4>
   17c7c:	str	r0, [sp, #8]
   17c80:	movw	r0, #10466	; 0x28e2
   17c84:	str	r1, [sp, #12]
   17c88:	movt	r0, #2
   17c8c:	str	r0, [sp]
   17c90:	add	r0, sp, #28
   17c94:	mov	r1, #100	; 0x64
   17c98:	mov	r2, #1
   17c9c:	mov	r3, #100	; 0x64
   17ca0:	bl	115b0 <__snprintf_chk@plt>
   17ca4:	mov	r7, r0
   17ca8:	ldr	r0, [r4, #16]
   17cac:	cmp	r0, #0
   17cb0:	blt	17d04 <__assert_fail@plt+0x6748>
   17cb4:	cmp	r7, #99	; 0x63
   17cb8:	bhi	17d04 <__assert_fail@plt+0x6748>
   17cbc:	cmp	r0, #6
   17cc0:	bgt	17d04 <__assert_fail@plt+0x6748>
   17cc4:	movw	r1, #8386	; 0x20c2
   17cc8:	cmp	r7, #0
   17ccc:	mov	r2, #1
   17cd0:	mvn	r3, #0
   17cd4:	movt	r1, #2
   17cd8:	add	r0, r1, r0, lsl #2
   17cdc:	movw	r1, #7181	; 0x1c0d
   17ce0:	movt	r1, #2
   17ce4:	str	r0, [sp, #4]
   17ce8:	add	r0, sp, #28
   17cec:	addeq	r1, r1, #1
   17cf0:	add	r0, r0, r7
   17cf4:	str	r1, [sp]
   17cf8:	rsb	r1, r7, #100	; 0x64
   17cfc:	bl	115b0 <__snprintf_chk@plt>
   17d00:	ldr	r0, [r4, #16]
   17d04:	ldrd	r2, [r4, #8]
   17d08:	mov	r1, #1
   17d0c:	mov	r7, #1
   17d10:	stm	sp, {r2, r3}
   17d14:	str	r0, [sp, #8]
   17d18:	add	r3, sp, #28
   17d1c:	mov	r0, r5
   17d20:	mov	r2, r6
   17d24:	bl	114d8 <__fprintf_chk@plt>
   17d28:	strb	r7, [r4, #183]	; 0xb7
   17d2c:	ldr	r0, [r4, #164]	; 0xa4
   17d30:	cmp	r0, #0
   17d34:	beq	17d94 <__assert_fail@plt+0x67d8>
   17d38:	ldrb	r0, [r4, #184]	; 0xb8
   17d3c:	cmp	r0, #0
   17d40:	bne	17d94 <__assert_fail@plt+0x67d8>
   17d44:	ldr	r0, [r4, #168]	; 0xa8
   17d48:	movw	r1, #13217	; 0x33a1
   17d4c:	movw	r2, #10435	; 0x28c3
   17d50:	ldr	r3, [r4, #20]
   17d54:	movt	r1, #2
   17d58:	movt	r2, #2
   17d5c:	cmp	r0, #0
   17d60:	movw	r0, #16800	; 0x41a0
   17d64:	movt	r0, #3
   17d68:	moveq	r2, r1
   17d6c:	eor	r1, r7, #1
   17d70:	mov	r7, #1
   17d74:	ldr	r0, [r0]
   17d78:	str	r2, [sp]
   17d7c:	movw	r2, #10423	; 0x28b7
   17d80:	movt	r2, #2
   17d84:	add	r2, r2, r1
   17d88:	mov	r1, #1
   17d8c:	bl	114d8 <__fprintf_chk@plt>
   17d90:	strb	r7, [r4, #184]	; 0xb8
   17d94:	ldr	r0, [r4, #176]	; 0xb0
   17d98:	cmp	r0, #0
   17d9c:	beq	17ef0 <__assert_fail@plt+0x6934>
   17da0:	ldrb	r0, [r4, #186]	; 0xba
   17da4:	cmp	r0, #0
   17da8:	bne	17ef0 <__assert_fail@plt+0x6934>
   17dac:	ldr	r5, [r4, #24]
   17db0:	mov	r0, #43	; 0x2b
   17db4:	movw	r1, #16800	; 0x41a0
   17db8:	movw	r3, #10471	; 0x28e7
   17dbc:	add	r9, sp, #28
   17dc0:	mov	r2, #27
   17dc4:	movt	r1, #3
   17dc8:	movt	r3, #2
   17dcc:	ldr	r8, [r1]
   17dd0:	cmp	r5, #0
   17dd4:	movwlt	r0, #45	; 0x2d
   17dd8:	str	r0, [sp]
   17ddc:	movw	r0, #46021	; 0xb3c5
   17de0:	movt	r0, #37282	; 0x91a2
   17de4:	smmla	r0, r5, r0, r5
   17de8:	asr	r1, r0, #11
   17dec:	add	r6, r1, r0, lsr #31
   17df0:	mov	r1, #1
   17df4:	cmp	r6, #0
   17df8:	mov	r0, r6
   17dfc:	rsbmi	r0, r6, #0
   17e00:	str	r0, [sp, #4]
   17e04:	mov	r0, r9
   17e08:	bl	1149c <__sprintf_chk@plt>
   17e0c:	mov	r1, #3600	; 0xe10
   17e10:	eor	r2, r7, #1
   17e14:	movw	r7, #10440	; 0x28c8
   17e18:	mls	r3, r6, r1, r5
   17e1c:	movt	r7, #2
   17e20:	cmp	r3, #0
   17e24:	mov	r1, r3
   17e28:	add	r2, r7, r2
   17e2c:	rsbmi	r1, r3, #0
   17e30:	cmp	r3, #0
   17e34:	beq	17ed8 <__assert_fail@plt+0x691c>
   17e38:	movw	r7, #33205	; 0x81b5
   17e3c:	mov	lr, #48	; 0x30
   17e40:	add	r0, r9, r0
   17e44:	mov	ip, #58	; 0x3a
   17e48:	movw	r9, #52429	; 0xcccd
   17e4c:	movt	r7, #6990	; 0x1b4e
   17e50:	strb	ip, [r0]
   17e54:	movt	r9, #52428	; 0xcccc
   17e58:	umull	r7, r6, r1, r7
   17e5c:	add	r6, lr, r6, lsr #6
   17e60:	strb	r6, [r0, #1]
   17e64:	movw	r6, #34953	; 0x8889
   17e68:	movt	r6, #34952	; 0x8888
   17e6c:	umull	r6, r5, r1, r6
   17e70:	lsr	r3, r5, #5
   17e74:	umull	r7, r6, r3, r9
   17e78:	lsr	r6, r6, #3
   17e7c:	add	r6, r6, r6, lsl #2
   17e80:	sub	r6, r3, r6, lsl #1
   17e84:	lsl	r3, r3, #4
   17e88:	sub	r3, r3, r5, lsr #5
   17e8c:	orr	r6, r6, #48	; 0x30
   17e90:	sub	r1, r1, r3, lsl #2
   17e94:	strb	r6, [r0, #2]
   17e98:	cmp	r1, #0
   17e9c:	bne	17ea8 <__assert_fail@plt+0x68ec>
   17ea0:	add	r0, r0, #3
   17ea4:	b	17ed0 <__assert_fail@plt+0x6914>
   17ea8:	umull	r3, r7, r1, r9
   17eac:	strb	ip, [r0, #3]
   17eb0:	orr	r3, lr, r7, lsr #3
   17eb4:	strb	r3, [r0, #4]
   17eb8:	lsr	r3, r7, #3
   17ebc:	add	r3, r3, r3, lsl #2
   17ec0:	sub	r1, r1, r3, lsl #1
   17ec4:	orr	r1, r1, #48	; 0x30
   17ec8:	strb	r1, [r0, #5]
   17ecc:	add	r0, r0, #6
   17ed0:	mov	r1, #0
   17ed4:	strb	r1, [r0]
   17ed8:	add	r3, sp, #28
   17edc:	mov	r0, r8
   17ee0:	mov	r1, #1
   17ee4:	mov	r7, #1
   17ee8:	bl	114d8 <__fprintf_chk@plt>
   17eec:	strb	r7, [r4, #186]	; 0xba
   17ef0:	ldrb	r0, [r4, #152]	; 0x98
   17ef4:	cmp	r0, #0
   17ef8:	beq	17f58 <__assert_fail@plt+0x699c>
   17efc:	ldr	r5, [r4, #88]	; 0x58
   17f00:	cmp	r7, #0
   17f04:	beq	17f1c <__assert_fail@plt+0x6960>
   17f08:	movw	r0, #16800	; 0x41a0
   17f0c:	movt	r0, #3
   17f10:	ldr	r1, [r0]
   17f14:	mov	r0, #32
   17f18:	bl	1152c <fputc@plt>
   17f1c:	movw	r0, #16800	; 0x41a0
   17f20:	movw	r1, #10447	; 0x28cf
   17f24:	mov	r2, #5
   17f28:	movt	r0, #3
   17f2c:	movt	r1, #2
   17f30:	ldr	r4, [r0]
   17f34:	mov	r0, #0
   17f38:	bl	11328 <dcgettext@plt>
   17f3c:	mov	r2, r0
   17f40:	asr	r0, r5, #31
   17f44:	mov	r1, #1
   17f48:	str	r5, [sp]
   17f4c:	str	r0, [sp, #4]
   17f50:	mov	r0, r4
   17f54:	bl	114d8 <__fprintf_chk@plt>
   17f58:	movw	r0, #16800	; 0x41a0
   17f5c:	movt	r0, #3
   17f60:	ldr	r1, [r0]
   17f64:	mov	r0, #10
   17f68:	bl	1152c <fputc@plt>
   17f6c:	sub	sp, fp, #24
   17f70:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17f74:	push	{r4, r5, r6, sl, fp, lr}
   17f78:	add	fp, sp, #16
   17f7c:	sub	sp, sp, #16
   17f80:	mov	r5, r0
   17f84:	ldrb	r0, [r1, #181]	; 0xb5
   17f88:	cmp	r0, #0
   17f8c:	subeq	sp, fp, #16
   17f90:	popeq	{r4, r5, r6, sl, fp, pc}
   17f94:	mov	r4, r1
   17f98:	movw	r1, #10301	; 0x283d
   17f9c:	mov	r0, #0
   17fa0:	mov	r2, #5
   17fa4:	mov	r6, #0
   17fa8:	movt	r1, #2
   17fac:	bl	11328 <dcgettext@plt>
   17fb0:	mov	r1, r5
   17fb4:	bl	1823c <__assert_fail@plt+0x6c80>
   17fb8:	ldr	r2, [r4, #96]	; 0x60
   17fbc:	ldr	r1, [r4, #100]	; 0x64
   17fc0:	orrs	r0, r2, r1
   17fc4:	beq	18010 <__assert_fail@plt+0x6a54>
   17fc8:	movw	r0, #16800	; 0x41a0
   17fcc:	movw	r3, #10494	; 0x28fe
   17fd0:	mov	r5, #1
   17fd4:	movt	r0, #3
   17fd8:	movt	r3, #2
   17fdc:	ldr	r0, [r0]
   17fe0:	str	r2, [sp]
   17fe4:	stmib	sp, {r1, r3}
   17fe8:	movw	r1, #10546	; 0x2932
   17fec:	movt	r1, #2
   17ff0:	add	r2, r1, #1
   17ff4:	mov	r1, #1
   17ff8:	bl	114d8 <__fprintf_chk@plt>
   17ffc:	ldr	r2, [r4, #104]	; 0x68
   18000:	ldr	r1, [r4, #108]	; 0x6c
   18004:	orrs	r0, r2, r1
   18008:	bne	18024 <__assert_fail@plt+0x6a68>
   1800c:	b	18058 <__assert_fail@plt+0x6a9c>
   18010:	ldr	r2, [r4, #104]	; 0x68
   18014:	ldr	r1, [r4, #108]	; 0x6c
   18018:	mov	r6, #1
   1801c:	orrs	r0, r2, r1
   18020:	beq	181d8 <__assert_fail@plt+0x6c1c>
   18024:	movw	r0, #16800	; 0x41a0
   18028:	movw	r3, #10502	; 0x2906
   1802c:	mov	r5, #1
   18030:	movt	r0, #3
   18034:	movt	r3, #2
   18038:	ldr	r0, [r0]
   1803c:	str	r2, [sp]
   18040:	stmib	sp, {r1, r3}
   18044:	movw	r1, #10546	; 0x2932
   18048:	movt	r1, #2
   1804c:	add	r2, r1, r6
   18050:	mov	r1, #1
   18054:	bl	114d8 <__fprintf_chk@plt>
   18058:	ldr	r2, [r4, #112]	; 0x70
   1805c:	ldr	r1, [r4, #116]	; 0x74
   18060:	orrs	r0, r2, r1
   18064:	beq	180a0 <__assert_fail@plt+0x6ae4>
   18068:	movw	r0, #16800	; 0x41a0
   1806c:	movw	r3, #10511	; 0x290f
   18070:	movt	r0, #3
   18074:	movt	r3, #2
   18078:	ldr	r0, [r0]
   1807c:	str	r2, [sp]
   18080:	movw	r2, #10546	; 0x2932
   18084:	stmib	sp, {r1, r3}
   18088:	eor	r1, r5, #1
   1808c:	mov	r5, #1
   18090:	movt	r2, #2
   18094:	add	r2, r2, r1
   18098:	mov	r1, #1
   1809c:	bl	114d8 <__fprintf_chk@plt>
   180a0:	ldr	r2, [r4, #120]	; 0x78
   180a4:	ldr	r1, [r4, #124]	; 0x7c
   180a8:	orrs	r0, r2, r1
   180ac:	beq	180e8 <__assert_fail@plt+0x6b2c>
   180b0:	movw	r0, #16800	; 0x41a0
   180b4:	movw	r3, #10518	; 0x2916
   180b8:	movt	r0, #3
   180bc:	movt	r3, #2
   180c0:	ldr	r0, [r0]
   180c4:	str	r2, [sp]
   180c8:	movw	r2, #10546	; 0x2932
   180cc:	stmib	sp, {r1, r3}
   180d0:	eor	r1, r5, #1
   180d4:	mov	r5, #1
   180d8:	movt	r2, #2
   180dc:	add	r2, r2, r1
   180e0:	mov	r1, #1
   180e4:	bl	114d8 <__fprintf_chk@plt>
   180e8:	ldr	r2, [r4, #128]	; 0x80
   180ec:	ldr	r1, [r4, #132]	; 0x84
   180f0:	orrs	r0, r2, r1
   180f4:	beq	18130 <__assert_fail@plt+0x6b74>
   180f8:	movw	r0, #16800	; 0x41a0
   180fc:	movw	r3, #10526	; 0x291e
   18100:	movt	r0, #3
   18104:	movt	r3, #2
   18108:	ldr	r0, [r0]
   1810c:	str	r2, [sp]
   18110:	movw	r2, #10546	; 0x2932
   18114:	stmib	sp, {r1, r3}
   18118:	eor	r1, r5, #1
   1811c:	mov	r5, #1
   18120:	movt	r2, #2
   18124:	add	r2, r2, r1
   18128:	mov	r1, #1
   1812c:	bl	114d8 <__fprintf_chk@plt>
   18130:	ldr	r2, [r4, #136]	; 0x88
   18134:	ldr	r1, [r4, #140]	; 0x8c
   18138:	orrs	r0, r2, r1
   1813c:	beq	18178 <__assert_fail@plt+0x6bbc>
   18140:	movw	r0, #16800	; 0x41a0
   18144:	movw	r3, #10118	; 0x2786
   18148:	movt	r0, #3
   1814c:	movt	r3, #2
   18150:	ldr	r0, [r0]
   18154:	str	r2, [sp]
   18158:	movw	r2, #10546	; 0x2932
   1815c:	stmib	sp, {r1, r3}
   18160:	eor	r1, r5, #1
   18164:	mov	r5, #1
   18168:	movt	r2, #2
   1816c:	add	r2, r2, r1
   18170:	mov	r1, #1
   18174:	bl	114d8 <__fprintf_chk@plt>
   18178:	ldr	r1, [r4, #144]	; 0x90
   1817c:	cmp	r1, #0
   18180:	beq	181bc <__assert_fail@plt+0x6c00>
   18184:	movw	r0, #16800	; 0x41a0
   18188:	movw	r2, #10534	; 0x2926
   1818c:	asr	r3, r1, #31
   18190:	movt	r0, #3
   18194:	movt	r2, #2
   18198:	ldr	r0, [r0]
   1819c:	stm	sp, {r1, r3}
   181a0:	str	r2, [sp, #8]
   181a4:	movw	r2, #10546	; 0x2932
   181a8:	eor	r1, r5, #1
   181ac:	movt	r2, #2
   181b0:	add	r2, r2, r1
   181b4:	mov	r1, #1
   181b8:	bl	114d8 <__fprintf_chk@plt>
   181bc:	movw	r0, #16800	; 0x41a0
   181c0:	movt	r0, #3
   181c4:	ldr	r1, [r0]
   181c8:	mov	r0, #10
   181cc:	sub	sp, fp, #16
   181d0:	pop	{r4, r5, r6, sl, fp, lr}
   181d4:	b	1152c <fputc@plt>
   181d8:	ldrd	r0, [r4, #112]	; 0x70
   181dc:	mov	r5, #0
   181e0:	orrs	r0, r0, r1
   181e4:	ldrdeq	r0, [r4, #120]	; 0x78
   181e8:	orrseq	r0, r0, r1
   181ec:	bne	18058 <__assert_fail@plt+0x6a9c>
   181f0:	ldrd	r0, [r4, #128]	; 0x80
   181f4:	orrs	r0, r0, r1
   181f8:	ldrdeq	r0, [r4, #136]	; 0x88
   181fc:	orrseq	r0, r0, r1
   18200:	bne	18058 <__assert_fail@plt+0x6a9c>
   18204:	ldr	r0, [r4, #144]	; 0x90
   18208:	cmp	r0, #0
   1820c:	bne	18058 <__assert_fail@plt+0x6a9c>
   18210:	movw	r1, #10478	; 0x28ee
   18214:	mov	r0, #0
   18218:	mov	r2, #5
   1821c:	movt	r1, #2
   18220:	bl	11328 <dcgettext@plt>
   18224:	movw	r1, #16800	; 0x41a0
   18228:	movt	r1, #3
   1822c:	ldr	r1, [r1]
   18230:	sub	sp, fp, #16
   18234:	pop	{r4, r5, r6, sl, fp, lr}
   18238:	b	11574 <fputs@plt>
   1823c:	sub	sp, sp, #12
   18240:	push	{r4, r5, fp, lr}
   18244:	add	fp, sp, #8
   18248:	sub	sp, sp, #4
   1824c:	movw	r5, #16800	; 0x41a0
   18250:	mov	r4, r0
   18254:	add	r0, fp, #8
   18258:	stm	r0, {r1, r2, r3}
   1825c:	movt	r5, #3
   18260:	movw	r0, #10556	; 0x293c
   18264:	mov	r1, #6
   18268:	mov	r2, #1
   1826c:	ldr	r3, [r5]
   18270:	movt	r0, #2
   18274:	bl	1137c <fwrite@plt>
   18278:	ldr	r0, [r5]
   1827c:	add	r3, fp, #8
   18280:	mov	r1, #1
   18284:	mov	r2, r4
   18288:	str	r3, [sp]
   1828c:	bl	11400 <__vfprintf_chk@plt>
   18290:	sub	sp, fp, #8
   18294:	pop	{r4, r5, fp, lr}
   18298:	add	sp, sp, #12
   1829c:	bx	lr
   182a0:	b	182a4 <__assert_fail@plt+0x6ce8>
   182a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   182a8:	add	fp, sp, #28
   182ac:	sub	sp, sp, #908	; 0x38c
   182b0:	mov	r6, r0
   182b4:	mov	r0, r1
   182b8:	str	r3, [sp, #88]	; 0x58
   182bc:	mov	r7, r2
   182c0:	mov	r4, r1
   182c4:	bl	1146c <strlen@plt>
   182c8:	mov	r5, r0
   182cc:	cmp	r7, #0
   182d0:	bne	182e0 <__assert_fail@plt+0x6d24>
   182d4:	sub	r7, fp, #456	; 0x1c8
   182d8:	mov	r0, r7
   182dc:	bl	12a2c <__assert_fail@plt+0x1470>
   182e0:	ldr	r0, [r7]
   182e4:	ldr	r2, [fp, #12]
   182e8:	add	r5, r4, r5
   182ec:	add	r4, r4, #4
   182f0:	str	r0, [sp, #96]	; 0x60
   182f4:	ldr	r0, [r7, #4]
   182f8:	str	r0, [sp, #92]	; 0x5c
   182fc:	ldrb	r0, [r4, #-4]
   18300:	sub	r1, r0, #9
   18304:	cmp	r1, #5
   18308:	bcs	18320 <__assert_fail@plt+0x6d64>
   1830c:	add	r4, r4, #1
   18310:	ldrb	r0, [r4, #-4]
   18314:	sub	r1, r0, #9
   18318:	cmp	r1, #5
   1831c:	bcc	1830c <__assert_fail@plt+0x6d50>
   18320:	cmp	r0, #32
   18324:	beq	1830c <__assert_fail@plt+0x6d50>
   18328:	add	r9, sp, #424	; 0x1a8
   1832c:	vmov.i32	q8, #0	; 0x00000000
   18330:	mov	r0, #52	; 0x34
   18334:	sub	r8, r4, #4
   18338:	str	r2, [sp, #72]	; 0x48
   1833c:	mov	r2, #4
   18340:	str	r6, [sp, #68]	; 0x44
   18344:	mov	r1, r9
   18348:	add	sl, r9, #16
   1834c:	vst1.64	{d16-d17}, [r1], r0
   18350:	mov	r0, #0
   18354:	vst1.64	{d16-d17}, [sl]
   18358:	str	r0, [r1]
   1835c:	add	r1, r9, #32
   18360:	str	r0, [sp, #472]	; 0x1d8
   18364:	mov	r0, r8
   18368:	str	r1, [sp, #84]	; 0x54
   1836c:	vst1.64	{d16-d17}, [r1]
   18370:	movw	r1, #11167	; 0x2b9f
   18374:	movt	r1, #2
   18378:	bl	11580 <strncmp@plt>
   1837c:	cmp	r0, #0
   18380:	str	r5, [sp, #76]	; 0x4c
   18384:	beq	1858c <__assert_fail@plt+0x6fd0>
   18388:	ldr	r6, [fp, #8]
   1838c:	mov	r5, r6
   18390:	mov	r4, #0
   18394:	add	r2, sp, #380	; 0x17c
   18398:	mov	r0, r5
   1839c:	mov	r1, r7
   183a0:	bl	1dab8 <__assert_fail@plt+0xc4fc>
   183a4:	cmp	r0, #0
   183a8:	mov	r7, #0
   183ac:	beq	1b4c0 <__assert_fail@plt+0x9f04>
   183b0:	ldr	r1, [sp, #88]	; 0x58
   183b4:	ldrb	r0, [r8]
   183b8:	str	r4, [sp, #80]	; 0x50
   183bc:	add	r7, sp, #380	; 0x17c
   183c0:	vmov.i32	q12, #0	; 0x00000000
   183c4:	and	r1, r1, #1
   183c8:	cmp	r0, #0
   183cc:	strb	r1, [sp, #325]	; 0x145
   183d0:	ldm	r7, {r1, r2, r3, r7}
   183d4:	ldr	r0, [sp, #396]	; 0x18c
   183d8:	str	r5, [sp, #88]	; 0x58
   183dc:	ldr	r5, [sp, #400]	; 0x190
   183e0:	vld1.64	{d18-d19}, [sl]
   183e4:	str	r7, [sp, #208]	; 0xd0
   183e8:	str	r3, [sp, #216]	; 0xd8
   183ec:	str	r2, [sp, #224]	; 0xe0
   183f0:	str	r1, [sp, #232]	; 0xe8
   183f4:	movw	r1, #11327	; 0x2c3f
   183f8:	add	r4, r0, #1
   183fc:	movw	r0, #1900	; 0x76c
   18400:	asr	r7, r7, #31
   18404:	asr	r3, r3, #31
   18408:	asr	r2, r2, #31
   1840c:	movt	r1, #2
   18410:	movne	r1, r8
   18414:	adds	r6, r5, r0
   18418:	mov	r0, #0
   1841c:	str	r0, [sp, #192]	; 0xc0
   18420:	str	r6, [sp, #184]	; 0xb8
   18424:	str	r4, [sp, #200]	; 0xc8
   18428:	str	r7, [sp, #212]	; 0xd4
   1842c:	str	r3, [sp, #220]	; 0xdc
   18430:	str	r2, [sp, #228]	; 0xe4
   18434:	str	r1, [sp, #144]	; 0x90
   18438:	asr	r1, r5, #31
   1843c:	mov	r2, #48	; 0x30
   18440:	add	r7, sp, #144	; 0x90
   18444:	ldr	r5, [sp, #88]	; 0x58
   18448:	vld1.64	{d16-d17}, [r9], r2
   1844c:	adc	r1, r1, #0
   18450:	ldr	r2, [sp, #84]	; 0x54
   18454:	add	r8, r7, #96	; 0x60
   18458:	str	r1, [sp, #188]	; 0xbc
   1845c:	asr	r1, r4, #31
   18460:	ldr	r4, [sp, #96]	; 0x60
   18464:	str	r1, [sp, #204]	; 0xcc
   18468:	ldr	r1, [sp, #92]	; 0x5c
   1846c:	vld1.64	{d20-d21}, [r2]
   18470:	add	r2, r7, #112	; 0x70
   18474:	vldr	d22, [r9]
   18478:	str	r1, [sp, #236]	; 0xec
   1847c:	mov	r1, #2
   18480:	str	r1, [sp, #172]	; 0xac
   18484:	vst1.64	{d18-d19}, [r2]
   18488:	add	r2, r7, #128	; 0x80
   1848c:	vst1.64	{d16-d17}, [r8]
   18490:	ldr	r1, [sp, #412]	; 0x19c
   18494:	vst1.64	{d20-d21}, [r2]
   18498:	add	r2, r7, #165	; 0xa5
   1849c:	vst1.8	{d24-d25}, [r2]
   184a0:	add	r2, r7, #156	; 0x9c
   184a4:	vst1.32	{d24-d25}, [r2]
   184a8:	add	r2, sp, #296	; 0x128
   184ac:	strh	r0, [r2]
   184b0:	vstr	d22, [sp, #288]	; 0x120
   184b4:	strh	r0, [r2, #34]	; 0x22
   184b8:	ldr	r2, [sp, #420]	; 0x1a4
   184bc:	strb	r0, [sp, #332]	; 0x14c
   184c0:	str	r0, [sp, #326]	; 0x146
   184c4:	str	r1, [fp, #-144]	; 0xffffff70
   184c8:	str	r2, [sp, #336]	; 0x150
   184cc:	movw	r2, #269	; 0x10d
   184d0:	str	r2, [sp, #340]	; 0x154
   184d4:	str	r1, [sp, #344]	; 0x158
   184d8:	str	r0, [sp, #348]	; 0x15c
   184dc:	add	r0, r4, #42752	; 0xa700
   184e0:	add	r0, r0, #7733248	; 0x760000
   184e4:	cmp	r0, r4
   184e8:	str	r0, [fp, #-348]	; 0xfffffea4
   184ec:	bvs	186e4 <__assert_fail@plt+0x7128>
   184f0:	sub	r1, fp, #348	; 0x15c
   184f4:	sub	r2, fp, #132	; 0x84
   184f8:	mov	r0, r5
   184fc:	bl	1dab8 <__assert_fail@plt+0xc4fc>
   18500:	cmp	r0, #0
   18504:	ldrne	r0, [fp, #-92]	; 0xffffffa4
   18508:	cmpne	r0, #0
   1850c:	bne	18604 <__assert_fail@plt+0x7048>
   18510:	add	r0, r4, #19968	; 0x4e00
   18514:	add	r0, r0, #15532032	; 0xed0000
   18518:	cmp	r0, r4
   1851c:	str	r0, [fp, #-348]	; 0xfffffea4
   18520:	bvs	186e4 <__assert_fail@plt+0x7128>
   18524:	sub	r1, fp, #348	; 0x15c
   18528:	sub	r2, fp, #132	; 0x84
   1852c:	mov	r0, r5
   18530:	bl	1dab8 <__assert_fail@plt+0xc4fc>
   18534:	cmp	r0, #0
   18538:	ldrne	r0, [fp, #-92]	; 0xffffffa4
   1853c:	cmpne	r0, #0
   18540:	bne	186bc <__assert_fail@plt+0x7100>
   18544:	movw	r0, #62720	; 0xf500
   18548:	movt	r0, #355	; 0x163
   1854c:	adds	r0, r4, r0
   18550:	str	r0, [fp, #-348]	; 0xfffffea4
   18554:	bvs	186e4 <__assert_fail@plt+0x7128>
   18558:	sub	r1, fp, #348	; 0x15c
   1855c:	sub	r2, fp, #132	; 0x84
   18560:	mov	r0, r5
   18564:	bl	1dab8 <__assert_fail@plt+0xc4fc>
   18568:	cmp	r0, #0
   1856c:	ldrne	r0, [fp, #-92]	; 0xffffffa4
   18570:	cmpne	r0, #0
   18574:	beq	186e4 <__assert_fail@plt+0x7128>
   18578:	ldr	r1, [fp, #-100]	; 0xffffff9c
   1857c:	ldr	r2, [sp, #344]	; 0x158
   18580:	cmp	r1, r2
   18584:	bne	186cc <__assert_fail@plt+0x7110>
   18588:	b	186e4 <__assert_fail@plt+0x7128>
   1858c:	ldr	r6, [fp, #8]
   18590:	mov	r0, #1
   18594:	mov	r1, r4
   18598:	ldrb	r2, [r1]
   1859c:	cmp	r2, #92	; 0x5c
   185a0:	beq	185c8 <__assert_fail@plt+0x700c>
   185a4:	cmp	r2, #0
   185a8:	beq	1838c <__assert_fail@plt+0x6dd0>
   185ac:	cmp	r2, #34	; 0x22
   185b0:	beq	185dc <__assert_fail@plt+0x7020>
   185b4:	add	r0, r0, #1
   185b8:	add	r1, r1, #1
   185bc:	ldrb	r2, [r1]
   185c0:	cmp	r2, #92	; 0x5c
   185c4:	bne	185a4 <__assert_fail@plt+0x6fe8>
   185c8:	ldrb	r2, [r1, #1]!
   185cc:	cmp	r2, #34	; 0x22
   185d0:	cmpne	r2, #92	; 0x5c
   185d4:	beq	185b4 <__assert_fail@plt+0x6ff8>
   185d8:	b	1838c <__assert_fail@plt+0x6dd0>
   185dc:	cmp	r0, #101	; 0x65
   185e0:	bcc	18618 <__assert_fail@plt+0x705c>
   185e4:	bl	1efc8 <__assert_fail@plt+0xda0c>
   185e8:	mov	r6, r0
   185ec:	cmp	r0, #0
   185f0:	mov	r5, r0
   185f4:	bne	18620 <__assert_fail@plt+0x7064>
   185f8:	mov	r7, #0
   185fc:	mov	r4, #0
   18600:	b	1b4d0 <__assert_fail@plt+0x9f14>
   18604:	ldr	r1, [fp, #-100]	; 0xffffff9c
   18608:	ldr	r2, [sp, #344]	; 0x158
   1860c:	cmp	r1, r2
   18610:	beq	18510 <__assert_fail@plt+0x6f54>
   18614:	b	186cc <__assert_fail@plt+0x7110>
   18618:	mov	r5, #0
   1861c:	sub	r6, fp, #448	; 0x1c0
   18620:	ldrb	r1, [r4]
   18624:	mov	r0, r6
   18628:	cmp	r1, #34	; 0x22
   1862c:	beq	18650 <__assert_fail@plt+0x7094>
   18630:	uxtb	r1, r1
   18634:	cmp	r1, #92	; 0x5c
   18638:	addeq	r4, r4, #1
   1863c:	ldrb	r1, [r4]
   18640:	strb	r1, [r0], #1
   18644:	ldrb	r1, [r4, #1]!
   18648:	cmp	r1, #34	; 0x22
   1864c:	bne	18630 <__assert_fail@plt+0x7074>
   18650:	mov	r1, #0
   18654:	strb	r1, [r0]
   18658:	mov	r0, r6
   1865c:	bl	1d9f4 <__assert_fail@plt+0xc438>
   18660:	cmp	r0, #0
   18664:	beq	186b0 <__assert_fail@plt+0x70f4>
   18668:	str	r6, [sp, #72]	; 0x48
   1866c:	ldr	r6, [fp, #8]
   18670:	add	r8, r4, #1
   18674:	mov	r4, r5
   18678:	mov	r5, r0
   1867c:	mov	r1, r0
   18680:	ldrb	r0, [r8]
   18684:	sub	r1, r0, #9
   18688:	cmp	r1, #5
   1868c:	bcs	186a4 <__assert_fail@plt+0x70e8>
   18690:	add	r8, r8, #1
   18694:	ldrb	r0, [r8]
   18698:	sub	r1, r0, #9
   1869c:	cmp	r1, #5
   186a0:	bcc	18690 <__assert_fail@plt+0x70d4>
   186a4:	cmp	r0, #32
   186a8:	beq	18690 <__assert_fail@plt+0x70d4>
   186ac:	b	18394 <__assert_fail@plt+0x6dd8>
   186b0:	mov	r7, #0
   186b4:	mov	r4, r5
   186b8:	b	1b4d0 <__assert_fail@plt+0x9f14>
   186bc:	ldr	r1, [fp, #-100]	; 0xffffff9c
   186c0:	ldr	r2, [sp, #344]	; 0x158
   186c4:	cmp	r1, r2
   186c8:	beq	18544 <__assert_fail@plt+0x6f88>
   186cc:	movw	r2, #269	; 0x10d
   186d0:	str	r2, [sp, #352]	; 0x160
   186d4:	str	r0, [sp, #348]	; 0x15c
   186d8:	mov	r0, #0
   186dc:	str	r1, [sp, #356]	; 0x164
   186e0:	str	r0, [sp, #360]	; 0x168
   186e4:	ldr	r0, [sp, #336]	; 0x150
   186e8:	ldr	r6, [fp, #8]
   186ec:	ldr	r4, [sp, #80]	; 0x50
   186f0:	cmp	r0, #0
   186f4:	ldrne	r1, [sp, #348]	; 0x15c
   186f8:	cmpne	r1, #0
   186fc:	bne	187d8 <__assert_fail@plt+0x721c>
   18700:	add	r0, sp, #144	; 0x90
   18704:	bl	12a50 <__assert_fail@plt+0x1494>
   18708:	ldrb	r1, [sp, #325]	; 0x145
   1870c:	cmp	r0, #0
   18710:	beq	18760 <__assert_fail@plt+0x71a4>
   18714:	cmp	r1, #0
   18718:	beq	187f8 <__assert_fail@plt+0x723c>
   1871c:	ldr	r0, [sp, #144]	; 0x90
   18720:	ldr	r3, [sp, #76]	; 0x4c
   18724:	movw	r2, #11195	; 0x2bbb
   18728:	movw	r1, #11172	; 0x2ba4
   1872c:	mov	r7, #0
   18730:	movt	r2, #2
   18734:	movt	r1, #2
   18738:	cmp	r3, r0
   1873c:	mov	r0, #0
   18740:	movhi	r1, r2
   18744:	mov	r2, #5
   18748:	bl	11328 <dcgettext@plt>
   1874c:	ldr	r1, [sp, #144]	; 0x90
   18750:	bl	1823c <__assert_fail@plt+0x6c80>
   18754:	cmp	r5, r6
   18758:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   1875c:	b	1b4d0 <__assert_fail@plt+0x9f14>
   18760:	cmp	r1, #0
   18764:	bne	18a1c <__assert_fail@plt+0x7460>
   18768:	ldrb	r0, [sp, #296]	; 0x128
   1876c:	cmp	r0, #0
   18770:	beq	18d44 <__assert_fail@plt+0x7788>
   18774:	add	r0, r7, #88	; 0x58
   18778:	ldr	r7, [sp, #68]	; 0x44
   1877c:	mov	r2, r6
   18780:	ldrd	r0, [r0]
   18784:	stm	r7, {r0, r1}
   18788:	ldrb	r0, [sp, #325]	; 0x145
   1878c:	ldr	r6, [sp, #72]	; 0x48
   18790:	cmp	r0, #0
   18794:	beq	1b4b8 <__assert_fail@plt+0x9efc>
   18798:	cmp	r6, #0
   1879c:	beq	18808 <__assert_fail@plt+0x724c>
   187a0:	movw	r1, #11324	; 0x2c3c
   187a4:	mov	r0, r6
   187a8:	movt	r1, #2
   187ac:	bl	112a4 <strcmp@plt>
   187b0:	cmp	r0, #0
   187b4:	beq	18814 <__assert_fail@plt+0x7258>
   187b8:	movw	r1, #12958	; 0x329e
   187bc:	mov	r0, #0
   187c0:	mov	r2, #5
   187c4:	movt	r1, #2
   187c8:	bl	11328 <dcgettext@plt>
   187cc:	mov	r1, r6
   187d0:	bl	1823c <__assert_fail@plt+0x6c80>
   187d4:	b	1882c <__assert_fail@plt+0x7270>
   187d8:	bl	112a4 <strcmp@plt>
   187dc:	cmp	r0, #0
   187e0:	bne	18700 <__assert_fail@plt+0x7144>
   187e4:	mov	r0, #0
   187e8:	str	r0, [sp, #348]	; 0x15c
   187ec:	mvn	r0, #0
   187f0:	str	r0, [sp, #344]	; 0x158
   187f4:	b	18700 <__assert_fail@plt+0x7144>
   187f8:	mov	r7, #0
   187fc:	cmp	r5, r6
   18800:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   18804:	b	1b4d0 <__assert_fail@plt+0x9f14>
   18808:	movw	r1, #12906	; 0x326a
   1880c:	movt	r1, #2
   18810:	b	1881c <__assert_fail@plt+0x7260>
   18814:	movw	r1, #12932	; 0x3284
   18818:	movt	r1, #2
   1881c:	mov	r0, #0
   18820:	mov	r2, #5
   18824:	bl	11328 <dcgettext@plt>
   18828:	bl	1823c <__assert_fail@plt+0x6c80>
   1882c:	ldr	r6, [r7]
   18830:	ldr	r5, [r7, #4]
   18834:	movw	r1, #12995	; 0x32c3
   18838:	mov	r0, #0
   1883c:	mov	r2, #5
   18840:	mov	r4, #0
   18844:	movt	r1, #2
   18848:	bl	11328 <dcgettext@plt>
   1884c:	asr	r3, r6, #31
   18850:	mov	r2, r6
   18854:	str	r5, [sp]
   18858:	bl	1823c <__assert_fail@plt+0x6c80>
   1885c:	sub	r1, fp, #132	; 0x84
   18860:	mov	r0, r7
   18864:	bl	1128c <gmtime_r@plt>
   18868:	cmp	r0, #0
   1886c:	beq	188b8 <__assert_fail@plt+0x72fc>
   18870:	movw	r1, #13029	; 0x32e5
   18874:	mov	r0, #0
   18878:	mov	r2, #5
   1887c:	movt	r1, #2
   18880:	bl	11328 <dcgettext@plt>
   18884:	movw	r2, #13503	; 0x34bf
   18888:	str	r4, [sp]
   1888c:	str	r4, [sp, #4]
   18890:	sub	r4, fp, #348	; 0x15c
   18894:	mov	r6, r0
   18898:	sub	r3, fp, #132	; 0x84
   1889c:	mov	r1, #100	; 0x64
   188a0:	movt	r2, #2
   188a4:	mov	r0, r4
   188a8:	bl	1f338 <__assert_fail@plt+0xdd7c>
   188ac:	mov	r0, r6
   188b0:	mov	r1, r4
   188b4:	bl	1823c <__assert_fail@plt+0x6c80>
   188b8:	ldr	r5, [sp, #88]	; 0x58
   188bc:	add	r2, sp, #100	; 0x64
   188c0:	mov	r1, r7
   188c4:	mov	r0, r5
   188c8:	bl	1dab8 <__assert_fail@plt+0xc4fc>
   188cc:	ldr	r6, [fp, #8]
   188d0:	cmp	r0, #0
   188d4:	beq	18a90 <__assert_fail@plt+0x74d4>
   188d8:	ldr	r4, [sp, #136]	; 0x88
   188dc:	movw	r1, #13046	; 0x32f6
   188e0:	mov	r0, #0
   188e4:	mov	r2, #5
   188e8:	mov	r5, #0
   188ec:	movt	r1, #2
   188f0:	bl	11328 <dcgettext@plt>
   188f4:	movw	r2, #13503	; 0x34bf
   188f8:	mov	r8, r0
   188fc:	sub	r0, fp, #348	; 0x15c
   18900:	add	r3, sp, #100	; 0x64
   18904:	mov	r1, #100	; 0x64
   18908:	str	r5, [sp]
   1890c:	str	r5, [sp, #4]
   18910:	movt	r2, #2
   18914:	bl	1f338 <__assert_fail@plt+0xdd7c>
   18918:	movw	r0, #46021	; 0xb3c5
   1891c:	movw	r3, #10471	; 0x28e7
   18920:	sub	r7, fp, #247	; 0xf7
   18924:	mov	r2, #27
   18928:	movt	r0, #37282	; 0x91a2
   1892c:	movt	r3, #2
   18930:	smmla	r0, r4, r0, r4
   18934:	asr	r1, r0, #11
   18938:	add	r5, r1, r0, lsr #31
   1893c:	mov	r1, #43	; 0x2b
   18940:	cmp	r5, #0
   18944:	mov	r0, r5
   18948:	rsbmi	r0, r5, #0
   1894c:	cmp	r4, #0
   18950:	movwlt	r1, #45	; 0x2d
   18954:	str	r0, [sp, #4]
   18958:	mov	r0, r7
   1895c:	str	r1, [sp]
   18960:	mov	r1, #1
   18964:	bl	1149c <__sprintf_chk@plt>
   18968:	mov	r1, #3600	; 0xe10
   1896c:	mls	r2, r5, r1, r4
   18970:	ldr	r5, [sp, #88]	; 0x58
   18974:	cmp	r2, #0
   18978:	mov	r1, r2
   1897c:	rsbmi	r1, r2, #0
   18980:	cmp	r2, #0
   18984:	beq	18a80 <__assert_fail@plt+0x74c4>
   18988:	movw	r3, #33205	; 0x81b5
   1898c:	add	r0, r7, r0
   18990:	mov	ip, #58	; 0x3a
   18994:	movt	r3, #6990	; 0x1b4e
   18998:	strb	ip, [r0]
   1899c:	umull	r3, r7, r1, r3
   189a0:	mov	r3, #48	; 0x30
   189a4:	add	r7, r3, r7, lsr #6
   189a8:	strb	r7, [r0, #1]
   189ac:	movw	r7, #34953	; 0x8889
   189b0:	movt	r7, #34952	; 0x8888
   189b4:	umull	r7, r5, r1, r7
   189b8:	movw	r7, #52429	; 0xcccd
   189bc:	lsr	r4, r5, #5
   189c0:	movt	r7, #52428	; 0xcccc
   189c4:	umull	r6, r2, r4, r7
   189c8:	lsr	r2, r2, #3
   189cc:	add	r2, r2, r2, lsl #2
   189d0:	sub	r2, r4, r2, lsl #1
   189d4:	orr	r2, r2, #48	; 0x30
   189d8:	strb	r2, [r0, #2]
   189dc:	lsl	r2, r4, #4
   189e0:	sub	r2, r2, r5, lsr #5
   189e4:	sub	r1, r1, r2, lsl #2
   189e8:	cmp	r1, #0
   189ec:	beq	18a6c <__assert_fail@plt+0x74b0>
   189f0:	umull	r2, r7, r1, r7
   189f4:	strb	ip, [r0, #3]
   189f8:	orr	r2, r3, r7, lsr #3
   189fc:	strb	r2, [r0, #4]
   18a00:	lsr	r2, r7, #3
   18a04:	add	r2, r2, r2, lsl #2
   18a08:	sub	r1, r1, r2, lsl #1
   18a0c:	orr	r1, r1, #48	; 0x30
   18a10:	strb	r1, [r0, #5]
   18a14:	add	r0, r0, #6
   18a18:	b	18a70 <__assert_fail@plt+0x74b4>
   18a1c:	movw	r1, #11235	; 0x2be3
   18a20:	mov	r0, #0
   18a24:	mov	r2, #5
   18a28:	movt	r1, #2
   18a2c:	bl	11328 <dcgettext@plt>
   18a30:	bl	1823c <__assert_fail@plt+0x6c80>
   18a34:	ldrb	r0, [sp, #296]	; 0x128
   18a38:	cmp	r0, #0
   18a3c:	bne	18a98 <__assert_fail@plt+0x74dc>
   18a40:	ldr	r0, [sp, #320]	; 0x140
   18a44:	cmp	r0, #0
   18a48:	bne	18aac <__assert_fail@plt+0x74f0>
   18a4c:	ldr	r0, [sp, #72]	; 0x48
   18a50:	cmp	r0, #0
   18a54:	bne	18b30 <__assert_fail@plt+0x7574>
   18a58:	movw	r0, #16800	; 0x41a0
   18a5c:	movw	r1, #11389	; 0x2c7d
   18a60:	movt	r0, #3
   18a64:	movt	r1, #2
   18a68:	b	18abc <__assert_fail@plt+0x7500>
   18a6c:	add	r0, r0, #3
   18a70:	ldr	r6, [fp, #8]
   18a74:	ldr	r5, [sp, #88]	; 0x58
   18a78:	mov	r1, #0
   18a7c:	strb	r1, [r0]
   18a80:	sub	r1, fp, #348	; 0x15c
   18a84:	sub	r2, fp, #247	; 0xf7
   18a88:	mov	r0, r8
   18a8c:	bl	1823c <__assert_fail@plt+0x6c80>
   18a90:	ldr	r4, [sp, #80]	; 0x50
   18a94:	b	1b4bc <__assert_fail@plt+0x9f00>
   18a98:	movw	r0, #16800	; 0x41a0
   18a9c:	movw	r1, #11252	; 0x2bf4
   18aa0:	movt	r0, #3
   18aa4:	movt	r1, #2
   18aa8:	b	18abc <__assert_fail@plt+0x7500>
   18aac:	movw	r0, #16800	; 0x41a0
   18ab0:	movw	r1, #11277	; 0x2c0d
   18ab4:	movt	r0, #3
   18ab8:	movt	r1, #2
   18abc:	ldr	r4, [r0]
   18ac0:	mov	r0, #0
   18ac4:	mov	r2, #5
   18ac8:	bl	11328 <dcgettext@plt>
   18acc:	mov	r2, r0
   18ad0:	mov	r0, r4
   18ad4:	mov	r1, #1
   18ad8:	bl	114d8 <__fprintf_chk@plt>
   18adc:	ldr	r1, [sp, #308]	; 0x134
   18ae0:	ldr	r0, [sp, #320]	; 0x140
   18ae4:	cmp	r1, #0
   18ae8:	beq	18bd0 <__assert_fail@plt+0x7614>
   18aec:	ldr	r4, [sp, #80]	; 0x50
   18af0:	cmp	r0, #0
   18af4:	bne	18bd4 <__assert_fail@plt+0x7618>
   18af8:	ldr	r0, [sp, #164]	; 0xa4
   18afc:	cmp	r0, #1
   18b00:	blt	18d24 <__assert_fail@plt+0x7768>
   18b04:	movw	r0, #16800	; 0x41a0
   18b08:	movw	r2, #11404	; 0x2c8c
   18b0c:	mov	r1, #1
   18b10:	movt	r0, #3
   18b14:	movt	r2, #2
   18b18:	ldr	r0, [r0]
   18b1c:	bl	114d8 <__fprintf_chk@plt>
   18b20:	ldr	r0, [sp, #320]	; 0x140
   18b24:	cmp	r0, #0
   18b28:	bne	18bdc <__assert_fail@plt+0x7620>
   18b2c:	b	18d24 <__assert_fail@plt+0x7768>
   18b30:	cmp	r5, r6
   18b34:	bne	18b8c <__assert_fail@plt+0x75d0>
   18b38:	mov	r9, r6
   18b3c:	ldr	r6, [sp, #72]	; 0x48
   18b40:	movw	r1, #11324	; 0x2c3c
   18b44:	movt	r1, #2
   18b48:	mov	r0, r6
   18b4c:	bl	112a4 <strcmp@plt>
   18b50:	movw	r1, #16800	; 0x41a0
   18b54:	cmp	r0, #0
   18b58:	movt	r1, #3
   18b5c:	ldr	r4, [r1]
   18b60:	bne	191c0 <__assert_fail@plt+0x7c04>
   18b64:	movw	r1, #11329	; 0x2c41
   18b68:	mov	r0, #0
   18b6c:	mov	r2, #5
   18b70:	movt	r1, #2
   18b74:	bl	11328 <dcgettext@plt>
   18b78:	mov	r2, r0
   18b7c:	mov	r0, r4
   18b80:	mov	r1, #1
   18b84:	bl	114d8 <__fprintf_chk@plt>
   18b88:	b	191e8 <__assert_fail@plt+0x7c2c>
   18b8c:	movw	r0, #16800	; 0x41a0
   18b90:	movw	r1, #11301	; 0x2c25
   18b94:	mov	r2, #5
   18b98:	movt	r0, #3
   18b9c:	movt	r1, #2
   18ba0:	ldr	r4, [r0]
   18ba4:	mov	r0, #0
   18ba8:	bl	11328 <dcgettext@plt>
   18bac:	ldr	r3, [sp, #72]	; 0x48
   18bb0:	mov	r2, r0
   18bb4:	mov	r0, r4
   18bb8:	mov	r1, #1
   18bbc:	bl	114d8 <__fprintf_chk@plt>
   18bc0:	ldr	r1, [sp, #308]	; 0x134
   18bc4:	ldr	r0, [sp, #320]	; 0x140
   18bc8:	cmp	r1, #0
   18bcc:	bne	18aec <__assert_fail@plt+0x7530>
   18bd0:	ldr	r4, [sp, #80]	; 0x50
   18bd4:	cmp	r0, #0
   18bd8:	beq	18d24 <__assert_fail@plt+0x7768>
   18bdc:	ldr	r5, [sp, #168]	; 0xa8
   18be0:	mov	r0, #43	; 0x2b
   18be4:	movw	r1, #16800	; 0x41a0
   18be8:	movw	r3, #10471	; 0x28e7
   18bec:	sub	r6, fp, #247	; 0xf7
   18bf0:	mov	r2, #27
   18bf4:	movt	r1, #3
   18bf8:	movt	r3, #2
   18bfc:	ldr	r9, [r1]
   18c00:	cmp	r5, #0
   18c04:	movwlt	r0, #45	; 0x2d
   18c08:	str	r0, [sp]
   18c0c:	movw	r0, #46021	; 0xb3c5
   18c10:	movt	r0, #37282	; 0x91a2
   18c14:	smmla	r0, r5, r0, r5
   18c18:	asr	r1, r0, #11
   18c1c:	add	r4, r1, r0, lsr #31
   18c20:	mov	r1, #1
   18c24:	cmp	r4, #0
   18c28:	mov	r0, r4
   18c2c:	rsbmi	r0, r4, #0
   18c30:	str	r0, [sp, #4]
   18c34:	mov	r0, r6
   18c38:	bl	1149c <__sprintf_chk@plt>
   18c3c:	mov	r1, #3600	; 0xe10
   18c40:	mls	r2, r4, r1, r5
   18c44:	ldr	r4, [sp, #80]	; 0x50
   18c48:	ldr	r5, [sp, #88]	; 0x58
   18c4c:	cmp	r2, #0
   18c50:	mov	r1, r2
   18c54:	rsbmi	r1, r2, #0
   18c58:	cmp	r2, #0
   18c5c:	beq	18d08 <__assert_fail@plt+0x774c>
   18c60:	movw	r3, #33205	; 0x81b5
   18c64:	add	r0, r6, r0
   18c68:	mov	lr, #48	; 0x30
   18c6c:	mov	ip, #58	; 0x3a
   18c70:	movt	r3, #6990	; 0x1b4e
   18c74:	strb	ip, [r0]
   18c78:	umull	r3, r6, r1, r3
   18c7c:	add	r6, lr, r6, lsr #6
   18c80:	strb	r6, [r0, #1]
   18c84:	movw	r6, #34953	; 0x8889
   18c88:	movt	r6, #34952	; 0x8888
   18c8c:	umull	r6, r5, r1, r6
   18c90:	movw	r6, #52429	; 0xcccd
   18c94:	lsr	r4, r5, #5
   18c98:	movt	r6, #52428	; 0xcccc
   18c9c:	umull	r2, r3, r4, r6
   18ca0:	lsr	r2, r3, #3
   18ca4:	add	r2, r2, r2, lsl #2
   18ca8:	sub	r2, r4, r2, lsl #1
   18cac:	orr	r2, r2, #48	; 0x30
   18cb0:	strb	r2, [r0, #2]
   18cb4:	lsl	r2, r4, #4
   18cb8:	sub	r2, r2, r5, lsr #5
   18cbc:	sub	r1, r1, r2, lsl #2
   18cc0:	cmp	r1, #0
   18cc4:	bne	18cd0 <__assert_fail@plt+0x7714>
   18cc8:	add	r0, r0, #3
   18ccc:	b	18cf8 <__assert_fail@plt+0x773c>
   18cd0:	umull	r2, r3, r1, r6
   18cd4:	strb	ip, [r0, #3]
   18cd8:	orr	r2, lr, r3, lsr #3
   18cdc:	strb	r2, [r0, #4]
   18ce0:	lsr	r2, r3, #3
   18ce4:	add	r2, r2, r2, lsl #2
   18ce8:	sub	r1, r1, r2, lsl #1
   18cec:	orr	r1, r1, #48	; 0x30
   18cf0:	strb	r1, [r0, #5]
   18cf4:	add	r0, r0, #6
   18cf8:	ldr	r4, [sp, #80]	; 0x50
   18cfc:	ldr	r5, [sp, #88]	; 0x58
   18d00:	mov	r1, #0
   18d04:	strb	r1, [r0]
   18d08:	movw	r2, #11410	; 0x2c92
   18d0c:	sub	r3, fp, #247	; 0xf7
   18d10:	mov	r0, r9
   18d14:	mov	r1, #1
   18d18:	movt	r2, #2
   18d1c:	bl	114d8 <__fprintf_chk@plt>
   18d20:	ldr	r6, [fp, #8]
   18d24:	movw	r0, #16800	; 0x41a0
   18d28:	movt	r0, #3
   18d2c:	ldr	r1, [r0]
   18d30:	mov	r0, #10
   18d34:	bl	1152c <fputc@plt>
   18d38:	ldrb	r0, [sp, #296]	; 0x128
   18d3c:	cmp	r0, #0
   18d40:	bne	18774 <__assert_fail@plt+0x71b8>
   18d44:	ldr	r1, [sp, #308]	; 0x134
   18d48:	ldr	r6, [sp, #320]	; 0x140
   18d4c:	ldr	r0, [sp, #300]	; 0x12c
   18d50:	ldr	r2, [sp, #304]	; 0x130
   18d54:	ldr	r3, [sp, #312]	; 0x138
   18d58:	add	r6, r6, r1
   18d5c:	ldr	r1, [sp, #316]	; 0x13c
   18d60:	orr	r5, r0, r1
   18d64:	orr	r2, r5, r2
   18d68:	ldrb	r5, [sp, #325]	; 0x145
   18d6c:	orr	r2, r2, r3
   18d70:	orr	r2, r2, r6
   18d74:	cmp	r2, #2
   18d78:	blt	18dd8 <__assert_fail@plt+0x781c>
   18d7c:	ldr	r6, [fp, #8]
   18d80:	mov	r7, #0
   18d84:	cmp	r5, #0
   18d88:	beq	18ee4 <__assert_fail@plt+0x7928>
   18d8c:	ldr	r5, [sp, #88]	; 0x58
   18d90:	cmp	r1, #2
   18d94:	blt	18e60 <__assert_fail@plt+0x78a4>
   18d98:	movw	r0, #11416	; 0x2c98
   18d9c:	movt	r0, #2
   18da0:	bl	1823c <__assert_fail@plt+0x6c80>
   18da4:	ldr	r0, [sp, #300]	; 0x12c
   18da8:	cmp	r0, #2
   18dac:	bge	18e68 <__assert_fail@plt+0x78ac>
   18db0:	ldr	r0, [sp, #304]	; 0x130
   18db4:	cmp	r0, #2
   18db8:	blt	18e80 <__assert_fail@plt+0x78c4>
   18dbc:	movw	r0, #11482	; 0x2cda
   18dc0:	movt	r0, #2
   18dc4:	bl	1823c <__assert_fail@plt+0x6c80>
   18dc8:	ldr	r0, [sp, #312]	; 0x138
   18dcc:	cmp	r0, #2
   18dd0:	bge	18e8c <__assert_fail@plt+0x78d0>
   18dd4:	b	18e98 <__assert_fail@plt+0x78dc>
   18dd8:	add	r0, r7, #40	; 0x28
   18ddc:	mvn	r2, #0
   18de0:	ldm	r0, {r4, r9}
   18de4:	cmp	r9, #0
   18de8:	blt	18ec4 <__assert_fail@plt+0x7908>
   18dec:	add	r0, r7, #48	; 0x30
   18df0:	ldr	r0, [r0]
   18df4:	cmp	r0, #2
   18df8:	bne	18ef4 <__assert_fail@plt+0x7938>
   18dfc:	subs	r1, r4, #69	; 0x45
   18e00:	mov	r0, #0
   18e04:	sbcs	r1, r9, #0
   18e08:	movwlt	r0, #1
   18e0c:	movw	r1, #1900	; 0x76c
   18e10:	cmp	r0, #0
   18e14:	movwne	r1, #2000	; 0x7d0
   18e18:	adds	sl, r1, r4
   18e1c:	adc	r6, r9, #0
   18e20:	cmp	r5, #0
   18e24:	beq	18e54 <__assert_fail@plt+0x7898>
   18e28:	movw	r1, #13065	; 0x3309
   18e2c:	mov	r0, #0
   18e30:	mov	r2, #5
   18e34:	movt	r1, #2
   18e38:	bl	11328 <dcgettext@plt>
   18e3c:	mov	r2, r4
   18e40:	mov	r3, r9
   18e44:	str	sl, [sp]
   18e48:	str	r6, [sp, #4]
   18e4c:	bl	1823c <__assert_fail@plt+0x6c80>
   18e50:	mvn	r2, #0
   18e54:	cmn	r6, #1
   18e58:	bgt	18efc <__assert_fail@plt+0x7940>
   18e5c:	b	18ecc <__assert_fail@plt+0x7910>
   18e60:	cmp	r0, #2
   18e64:	blt	18db0 <__assert_fail@plt+0x77f4>
   18e68:	movw	r0, #11449	; 0x2cb9
   18e6c:	movt	r0, #2
   18e70:	bl	1823c <__assert_fail@plt+0x6c80>
   18e74:	ldr	r0, [sp, #304]	; 0x130
   18e78:	cmp	r0, #2
   18e7c:	bge	18dbc <__assert_fail@plt+0x7800>
   18e80:	ldr	r0, [sp, #312]	; 0x138
   18e84:	cmp	r0, #2
   18e88:	blt	18e98 <__assert_fail@plt+0x78dc>
   18e8c:	movw	r0, #11515	; 0x2cfb
   18e90:	movt	r0, #2
   18e94:	bl	1823c <__assert_fail@plt+0x6c80>
   18e98:	ldr	r0, [sp, #308]	; 0x134
   18e9c:	ldr	r1, [sp, #320]	; 0x140
   18ea0:	add	r0, r1, r0
   18ea4:	cmp	r0, #2
   18ea8:	blt	1b4c0 <__assert_fail@plt+0x9f04>
   18eac:	movw	r0, #11559	; 0x2d27
   18eb0:	movt	r0, #2
   18eb4:	bl	1823c <__assert_fail@plt+0x6c80>
   18eb8:	cmp	r5, r6
   18ebc:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   18ec0:	b	1b4d0 <__assert_fail@plt+0x9f14>
   18ec4:	mov	sl, r4
   18ec8:	mov	r6, r9
   18ecc:	movw	r0, #63636	; 0xf894
   18ed0:	movt	r0, #65535	; 0xffff
   18ed4:	subs	r0, r0, sl
   18ed8:	str	r0, [fp, #-156]	; 0xffffff64
   18edc:	sbc	r1, r2, r6
   18ee0:	b	18f0c <__assert_fail@plt+0x7950>
   18ee4:	ldr	r5, [sp, #88]	; 0x58
   18ee8:	cmp	r5, r6
   18eec:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   18ef0:	b	1b4d0 <__assert_fail@plt+0x9f14>
   18ef4:	mov	sl, r4
   18ef8:	mov	r6, r9
   18efc:	movw	r0, #1900	; 0x76c
   18f00:	subs	r0, sl, r0
   18f04:	sbc	r1, r6, #0
   18f08:	str	r0, [fp, #-156]	; 0xffffff64
   18f0c:	ldr	r4, [sp, #80]	; 0x50
   18f10:	eor	r1, r1, r0, asr #31
   18f14:	clz	r0, r1
   18f18:	cmp	r1, #0
   18f1c:	lsr	r0, r0, #5
   18f20:	beq	18f54 <__assert_fail@plt+0x7998>
   18f24:	cmp	r5, #0
   18f28:	ldr	r5, [sp, #88]	; 0x58
   18f2c:	beq	18f58 <__assert_fail@plt+0x799c>
   18f30:	movw	r1, #13109	; 0x3335
   18f34:	mov	r0, #0
   18f38:	mov	r2, #5
   18f3c:	movt	r1, #2
   18f40:	bl	11328 <dcgettext@plt>
   18f44:	mov	r2, sl
   18f48:	mov	r3, r6
   18f4c:	bl	1823c <__assert_fail@plt+0x6c80>
   18f50:	b	18fbc <__assert_fail@plt+0x7a00>
   18f54:	ldr	r5, [sp, #88]	; 0x58
   18f58:	cmp	r0, #0
   18f5c:	beq	18fbc <__assert_fail@plt+0x7a00>
   18f60:	add	r0, r7, #56	; 0x38
   18f64:	mov	r6, #0
   18f68:	mov	r5, #0
   18f6c:	mov	r2, #0
   18f70:	ldm	r0, {r0, r3}
   18f74:	cmn	r3, #1
   18f78:	movwgt	r6, #1
   18f7c:	subs	r0, r0, #1
   18f80:	sbc	r1, r3, #0
   18f84:	str	r0, [fp, #-160]	; 0xffffff60
   18f88:	cmn	r1, #1
   18f8c:	movwgt	r5, #1
   18f90:	subs	r6, r6, r5
   18f94:	ldr	r5, [sp, #88]	; 0x58
   18f98:	movwne	r6, #1
   18f9c:	cmp	r3, #0
   18fa0:	movwlt	r2, #1
   18fa4:	tst	r2, r6
   18fa8:	asreq	r2, r0, #31
   18fac:	eoreq	r0, r0, r0
   18fb0:	eoreq	r1, r1, r2
   18fb4:	orrseq	r0, r0, r1
   18fb8:	beq	18ff4 <__assert_fail@plt+0x7a38>
   18fbc:	ldrb	r0, [sp, #325]	; 0x145
   18fc0:	ldr	r6, [fp, #8]
   18fc4:	mov	r7, #0
   18fc8:	cmp	r0, #0
   18fcc:	beq	1b4c0 <__assert_fail@plt+0x9f04>
   18fd0:	movw	r1, #11597	; 0x2d4d
   18fd4:	mov	r0, #0
   18fd8:	mov	r2, #5
   18fdc:	movt	r1, #2
   18fe0:	bl	11328 <dcgettext@plt>
   18fe4:	bl	1823c <__assert_fail@plt+0x6c80>
   18fe8:	cmp	r5, r6
   18fec:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   18ff0:	b	1b4d0 <__assert_fail@plt+0x9f14>
   18ff4:	add	r0, r7, #64	; 0x40
   18ff8:	ldrd	r0, [r0]
   18ffc:	teq	r1, r0, asr #31
   19000:	str	r0, [fp, #-164]	; 0xffffff5c
   19004:	bne	18fbc <__assert_fail@plt+0x7a00>
   19008:	ldr	r0, [sp, #316]	; 0x13c
   1900c:	cmp	r0, #0
   19010:	bne	19030 <__assert_fail@plt+0x7a74>
   19014:	ldrb	r1, [sp, #297]	; 0x129
   19018:	cmp	r1, #0
   1901c:	beq	19200 <__assert_fail@plt+0x7c44>
   19020:	ldr	r1, [sp, #300]	; 0x12c
   19024:	ldr	r2, [sp, #304]	; 0x130
   19028:	orrs	r1, r2, r1
   1902c:	bne	19200 <__assert_fail@plt+0x7c44>
   19030:	add	r4, r7, #72	; 0x48
   19034:	ldr	r1, [sp, #172]	; 0xac
   19038:	ldrd	r2, [r4]
   1903c:	cmp	r1, #0
   19040:	beq	19114 <__assert_fail@plt+0x7b58>
   19044:	cmp	r1, #1
   19048:	bne	191a0 <__assert_fail@plt+0x7be4>
   1904c:	eor	r6, r2, #12
   19050:	orrs	r6, r6, r3
   19054:	mvn	r6, #0
   19058:	movweq	r6, #12
   1905c:	subs	r5, r2, #1
   19060:	sbc	r3, r3, #0
   19064:	subs	r5, r5, #11
   19068:	sbcs	r3, r3, #0
   1906c:	addcc	r6, r2, #12
   19070:	mov	r2, r6
   19074:	ldr	r6, [fp, #8]
   19078:	cmn	r2, #1
   1907c:	str	r2, [fp, #-168]	; 0xffffff58
   19080:	ble	19144 <__assert_fail@plt+0x7b88>
   19084:	add	r1, r7, #80	; 0x50
   19088:	ldr	r2, [sp, #232]	; 0xe8
   1908c:	ldr	r1, [r1]
   19090:	str	r2, [fp, #-176]	; 0xffffff50
   19094:	str	r1, [fp, #-172]	; 0xffffff54
   19098:	ldrb	r1, [sp, #325]	; 0x145
   1909c:	cmp	r1, #0
   190a0:	beq	1922c <__assert_fail@plt+0x7c70>
   190a4:	movw	r2, #11711	; 0x2dbf
   190a8:	movw	r1, #11665	; 0x2d91
   190ac:	cmp	r0, #0
   190b0:	mov	r0, #0
   190b4:	movt	r2, #2
   190b8:	movt	r1, #2
   190bc:	moveq	r1, r2
   190c0:	mov	r2, #5
   190c4:	bl	11328 <dcgettext@plt>
   190c8:	sub	r2, fp, #176	; 0xb0
   190cc:	mov	r4, r0
   190d0:	movw	r3, #13140	; 0x3354
   190d4:	sub	r6, fp, #348	; 0x15c
   190d8:	ldm	r2, {r0, r1, r2}
   190dc:	movt	r3, #2
   190e0:	str	r3, [sp]
   190e4:	mov	r3, #100	; 0x64
   190e8:	str	r2, [sp, #4]
   190ec:	str	r1, [sp, #8]
   190f0:	str	r0, [sp, #12]
   190f4:	mov	r0, r6
   190f8:	mov	r1, #100	; 0x64
   190fc:	mov	r2, #1
   19100:	bl	115b0 <__snprintf_chk@plt>
   19104:	mov	r0, r4
   19108:	mov	r1, r6
   1910c:	bl	1823c <__assert_fail@plt+0x6c80>
   19110:	b	1922c <__assert_fail@plt+0x7c70>
   19114:	eor	r6, r2, #12
   19118:	orrs	r6, r6, r3
   1911c:	mvnne	r6, #0
   19120:	subs	r5, r2, #1
   19124:	sbc	r3, r3, #0
   19128:	subs	r5, r5, #11
   1912c:	sbcs	r3, r3, #0
   19130:	movcs	r2, r6
   19134:	ldr	r6, [fp, #8]
   19138:	cmn	r2, #1
   1913c:	str	r2, [fp, #-168]	; 0xffffff58
   19140:	bgt	19084 <__assert_fail@plt+0x7ac8>
   19144:	ldrb	r0, [sp, #325]	; 0x145
   19148:	cmp	r0, #0
   1914c:	beq	1b384 <__assert_fail@plt+0x9dc8>
   19150:	movw	r0, #10388	; 0x2894
   19154:	movw	r2, #13217	; 0x33a1
   19158:	movw	r5, #11634	; 0x2d72
   1915c:	cmp	r1, #1
   19160:	mov	r7, #0
   19164:	movt	r0, #2
   19168:	movt	r2, #2
   1916c:	movt	r5, #2
   19170:	moveq	r2, r0
   19174:	cmp	r1, #0
   19178:	movw	r1, #11637	; 0x2d75
   1917c:	mov	r0, #0
   19180:	movne	r5, r2
   19184:	movt	r1, #2
   19188:	mov	r2, #5
   1918c:	bl	11328 <dcgettext@plt>
   19190:	ldrd	r2, [r4]
   19194:	str	r5, [sp]
   19198:	bl	1823c <__assert_fail@plt+0x6c80>
   1919c:	b	1b388 <__assert_fail@plt+0x9dcc>
   191a0:	subs	r6, r2, #24
   191a4:	sbcs	r3, r3, #0
   191a8:	mvncs	r2, #0
   191ac:	ldr	r6, [fp, #8]
   191b0:	cmn	r2, #1
   191b4:	str	r2, [fp, #-168]	; 0xffffff58
   191b8:	bgt	19084 <__assert_fail@plt+0x7ac8>
   191bc:	b	19144 <__assert_fail@plt+0x7b88>
   191c0:	movw	r1, #11363	; 0x2c63
   191c4:	mov	r0, #0
   191c8:	mov	r2, #5
   191cc:	movt	r1, #2
   191d0:	bl	11328 <dcgettext@plt>
   191d4:	mov	r2, r0
   191d8:	mov	r0, r4
   191dc:	mov	r1, #1
   191e0:	mov	r3, r6
   191e4:	bl	114d8 <__fprintf_chk@plt>
   191e8:	mov	r6, r9
   191ec:	ldr	r1, [sp, #308]	; 0x134
   191f0:	ldr	r0, [sp, #320]	; 0x140
   191f4:	cmp	r1, #0
   191f8:	bne	18aec <__assert_fail@plt+0x7530>
   191fc:	b	18bd0 <__assert_fail@plt+0x7614>
   19200:	mov	r0, #0
   19204:	str	r0, [sp, #236]	; 0xec
   19208:	str	r0, [fp, #-172]	; 0xffffff54
   1920c:	str	r0, [fp, #-176]	; 0xffffff50
   19210:	str	r0, [fp, #-168]	; 0xffffff58
   19214:	ldrb	r0, [sp, #325]	; 0x145
   19218:	cmp	r0, #0
   1921c:	beq	1922c <__assert_fail@plt+0x7c70>
   19220:	movw	r0, #11755	; 0x2deb
   19224:	movt	r0, #2
   19228:	bl	1823c <__assert_fail@plt+0x6c80>
   1922c:	ldr	r0, [sp, #300]	; 0x12c
   19230:	ldr	r1, [sp, #304]	; 0x130
   19234:	ldr	r2, [sp, #316]	; 0x13c
   19238:	sub	sl, fp, #176	; 0xb0
   1923c:	orr	r0, r1, r0
   19240:	sub	r1, fp, #176	; 0xb0
   19244:	orrs	r0, r0, r2
   19248:	mvnne	r0, #0
   1924c:	strne	r0, [fp, #-144]	; 0xffffff70
   19250:	ldr	r0, [sp, #308]	; 0x134
   19254:	cmp	r0, #0
   19258:	ldrne	r0, [sp, #164]	; 0xa4
   1925c:	strne	r0, [fp, #-144]	; 0xffffff70
   19260:	ldreq	r0, [fp, #-144]	; 0xffffff70
   19264:	str	r0, [fp, #-188]	; 0xffffff44
   19268:	mvn	r0, #0
   1926c:	str	r0, [fp, #-152]	; 0xffffff68
   19270:	sub	r0, fp, #220	; 0xdc
   19274:	ldm	sl, {r4, r5, r6, sl}
   19278:	stm	r0, {r4, r5, r6, sl}
   1927c:	ldr	r9, [fp, #-160]	; 0xffffff60
   19280:	ldr	r0, [sp, #88]	; 0x58
   19284:	ldr	r7, [fp, #-156]	; 0xffffff64
   19288:	str	r9, [fp, #-204]	; 0xffffff34
   1928c:	str	r7, [fp, #-200]	; 0xffffff38
   19290:	bl	1df64 <__assert_fail@plt+0xc9a8>
   19294:	mov	ip, r0
   19298:	ldr	r0, [fp, #-152]	; 0xffffff68
   1929c:	cmp	r0, #0
   192a0:	blt	192e4 <__assert_fail@plt+0x7d28>
   192a4:	sub	r3, fp, #176	; 0xb0
   192a8:	ldm	r3, {r0, r1, r2, r3}
   192ac:	eor	r0, r0, r4
   192b0:	eor	r1, r1, r5
   192b4:	orr	r0, r1, r0
   192b8:	eor	r1, r2, r6
   192bc:	orr	r0, r0, r1
   192c0:	eor	r1, r3, sl
   192c4:	orr	r0, r0, r1
   192c8:	ldr	r1, [fp, #-160]	; 0xffffff60
   192cc:	eor	r1, r1, r9
   192d0:	orr	r0, r0, r1
   192d4:	ldr	r1, [fp, #-156]	; 0xffffff64
   192d8:	eor	r1, r1, r7
   192dc:	orrs	r0, r0, r1
   192e0:	beq	19528 <__assert_fail@plt+0x7f6c>
   192e4:	ldr	r9, [sp, #320]	; 0x140
   192e8:	cmp	r9, #0
   192ec:	beq	195d0 <__assert_fail@plt+0x8014>
   192f0:	ldr	r5, [sp, #168]	; 0xa8
   192f4:	mov	r0, #88	; 0x58
   192f8:	movw	r3, #10471	; 0x28e7
   192fc:	mov	r2, #27
   19300:	strb	r0, [fp, #-130]	; 0xffffff7e
   19304:	movw	r0, #22616	; 0x5858
   19308:	movt	r3, #2
   1930c:	strh	r0, [fp, #-132]	; 0xffffff7c
   19310:	mov	r0, #43	; 0x2b
   19314:	cmp	r5, #0
   19318:	movwlt	r0, #45	; 0x2d
   1931c:	str	r0, [sp]
   19320:	movw	r0, #46021	; 0xb3c5
   19324:	movt	r0, #37282	; 0x91a2
   19328:	smmla	r0, r5, r0, r5
   1932c:	asr	r1, r0, #11
   19330:	add	r4, r1, r0, lsr #31
   19334:	mov	r1, #1
   19338:	cmp	r4, #0
   1933c:	mov	r0, r4
   19340:	rsbmi	r0, r4, #0
   19344:	str	r0, [sp, #4]
   19348:	sub	r0, fp, #132	; 0x84
   1934c:	add	r6, r0, #3
   19350:	mov	r0, r6
   19354:	bl	1149c <__sprintf_chk@plt>
   19358:	mov	r1, #3600	; 0xe10
   1935c:	mls	r2, r4, r1, r5
   19360:	ldr	r5, [sp, #88]	; 0x58
   19364:	cmp	r2, #0
   19368:	mov	r1, r2
   1936c:	rsbmi	r1, r2, #0
   19370:	cmp	r2, #0
   19374:	beq	19418 <__assert_fail@plt+0x7e5c>
   19378:	movw	r2, #33205	; 0x81b5
   1937c:	add	r6, r6, r0
   19380:	mov	ip, #58	; 0x3a
   19384:	movt	r2, #6990	; 0x1b4e
   19388:	strb	ip, [r6]
   1938c:	umull	r2, r3, r1, r2
   19390:	mov	r2, #48	; 0x30
   19394:	add	r3, r2, r3, lsr #6
   19398:	strb	r3, [r6, #1]
   1939c:	movw	r3, #34953	; 0x8889
   193a0:	movt	r3, #34952	; 0x8888
   193a4:	umull	r3, r7, r1, r3
   193a8:	movw	r3, #52429	; 0xcccd
   193ac:	lsr	r5, r7, #5
   193b0:	movt	r3, #52428	; 0xcccc
   193b4:	umull	r4, r0, r5, r3
   193b8:	lsr	r0, r0, #3
   193bc:	add	r0, r0, r0, lsl #2
   193c0:	sub	r0, r5, r0, lsl #1
   193c4:	orr	r0, r0, #48	; 0x30
   193c8:	strb	r0, [r6, #2]
   193cc:	lsl	r0, r5, #4
   193d0:	sub	r0, r0, r7, lsr #5
   193d4:	sub	r7, r1, r0, lsl #2
   193d8:	add	r1, r6, #3
   193dc:	cmp	r7, #0
   193e0:	beq	1940c <__assert_fail@plt+0x7e50>
   193e4:	umull	r0, r3, r7, r3
   193e8:	strb	ip, [r1]
   193ec:	orr	r0, r2, r3, lsr #3
   193f0:	strb	r0, [r1, #1]
   193f4:	lsr	r0, r3, #3
   193f8:	add	r0, r0, r0, lsl #2
   193fc:	sub	r0, r7, r0, lsl #1
   19400:	orr	r0, r0, #48	; 0x30
   19404:	strb	r0, [r1, #2]
   19408:	add	r1, r1, #3
   1940c:	ldr	r5, [sp, #88]	; 0x58
   19410:	mov	r0, #0
   19414:	strb	r0, [r1]
   19418:	sub	r0, fp, #132	; 0x84
   1941c:	bl	1d9f4 <__assert_fail@plt+0xc438>
   19420:	cmp	r0, #0
   19424:	beq	1959c <__assert_fail@plt+0x7fe0>
   19428:	mov	r6, r0
   1942c:	mov	r0, #32
   19430:	sub	r3, fp, #220	; 0xdc
   19434:	sub	r1, fp, #176	; 0xb0
   19438:	ldr	r2, [fp, #-200]	; 0xffffff38
   1943c:	vld1.32	{d16-d17}, [r3], r0
   19440:	mov	r0, #24
   19444:	mov	r4, r1
   19448:	vst1.32	{d16-d17}, [r4], r0
   1944c:	mvn	r0, #0
   19450:	str	r0, [r4]
   19454:	ldr	r0, [fp, #-204]	; 0xffffff34
   19458:	str	r0, [fp, #-160]	; 0xffffff60
   1945c:	ldr	r0, [r3]
   19460:	str	r2, [fp, #-156]	; 0xffffff64
   19464:	str	r0, [fp, #-144]	; 0xffffff70
   19468:	mov	r0, r6
   1946c:	bl	1df64 <__assert_fail@plt+0xc9a8>
   19470:	ldr	r1, [r4]
   19474:	cmn	r1, #1
   19478:	ble	195c8 <__assert_fail@plt+0x800c>
   1947c:	str	r0, [sp, #96]	; 0x60
   19480:	ldr	r0, [fp, #-156]	; 0xffffff64
   19484:	sub	sl, fp, #220	; 0xdc
   19488:	str	r0, [sp, #92]	; 0x5c
   1948c:	ldr	r0, [fp, #-200]	; 0xffffff38
   19490:	str	r0, [sp, #84]	; 0x54
   19494:	ldr	r0, [fp, #-160]	; 0xffffff60
   19498:	str	r0, [sp, #76]	; 0x4c
   1949c:	ldr	r0, [fp, #-204]	; 0xffffff34
   194a0:	str	r0, [sp, #64]	; 0x40
   194a4:	ldr	r0, [fp, #-176]	; 0xffffff50
   194a8:	str	r0, [sp, #52]	; 0x34
   194ac:	ldr	r0, [fp, #-172]	; 0xffffff54
   194b0:	str	r0, [sp, #48]	; 0x30
   194b4:	ldr	r0, [fp, #-168]	; 0xffffff58
   194b8:	str	r0, [sp, #56]	; 0x38
   194bc:	ldr	r0, [fp, #-164]	; 0xffffff5c
   194c0:	str	r0, [sp, #60]	; 0x3c
   194c4:	mov	r0, r6
   194c8:	ldm	sl, {r4, r7, sl}
   194cc:	ldr	r5, [fp, #-208]	; 0xffffff30
   194d0:	bl	1da90 <__assert_fail@plt+0xc4d4>
   194d4:	ldr	r0, [sp, #52]	; 0x34
   194d8:	ldr	r1, [sp, #48]	; 0x30
   194dc:	ldr	r2, [sp, #64]	; 0x40
   194e0:	eor	r0, r0, r4
   194e4:	eor	r1, r1, r7
   194e8:	orr	r0, r1, r0
   194ec:	ldr	r1, [sp, #56]	; 0x38
   194f0:	eor	r1, r1, sl
   194f4:	orr	r0, r0, r1
   194f8:	ldr	r1, [sp, #60]	; 0x3c
   194fc:	eor	r1, r1, r5
   19500:	orr	r0, r0, r1
   19504:	ldr	r1, [sp, #76]	; 0x4c
   19508:	eor	r1, r1, r2
   1950c:	ldr	r2, [sp, #84]	; 0x54
   19510:	orr	r0, r0, r1
   19514:	ldr	r1, [sp, #92]	; 0x5c
   19518:	eor	r1, r1, r2
   1951c:	orrs	r0, r0, r1
   19520:	bne	195d0 <__assert_fail@plt+0x8014>
   19524:	ldr	ip, [sp, #96]	; 0x60
   19528:	ldr	r0, [sp, #304]	; 0x130
   1952c:	add	r9, sp, #144	; 0x90
   19530:	mvn	r2, #0
   19534:	cmp	r0, #0
   19538:	beq	1a378 <__assert_fail@plt+0x8dbc>
   1953c:	ldr	r0, [sp, #300]	; 0x12c
   19540:	cmp	r0, #0
   19544:	bne	1a378 <__assert_fail@plt+0x8dbc>
   19548:	ldr	r5, [sp, #152]	; 0x98
   1954c:	ldr	r4, [sp, #156]	; 0x9c
   19550:	subs	r0, r5, #1
   19554:	sbcs	r0, r4, #0
   19558:	blt	19814 <__assert_fail@plt+0x8258>
   1955c:	ldr	r0, [sp, #160]	; 0xa0
   19560:	ldr	r1, [fp, #-152]	; 0xffffff68
   19564:	subs	r0, r1, r0
   19568:	movwne	r0, #1
   1956c:	subs	r0, r5, r0
   19570:	add	r9, r9, #8
   19574:	sbcs	r0, r4, #0
   19578:	bge	19828 <__assert_fail@plt+0x826c>
   1957c:	subs	r0, r5, #1
   19580:	sbcs	r0, r4, #0
   19584:	blt	19c1c <__assert_fail@plt+0x8660>
   19588:	ldr	r0, [sp, #160]	; 0xa0
   1958c:	ldr	r1, [fp, #-152]	; 0xffffff68
   19590:	subs	r0, r1, r0
   19594:	movwne	r0, #1
   19598:	b	19c20 <__assert_fail@plt+0x8664>
   1959c:	ldrb	r0, [sp, #325]	; 0x145
   195a0:	cmp	r0, #0
   195a4:	beq	1a8d4 <__assert_fail@plt+0x9318>
   195a8:	movw	r1, #11807	; 0x2e1f
   195ac:	mov	r0, #0
   195b0:	mov	r2, #5
   195b4:	movt	r1, #2
   195b8:	bl	11328 <dcgettext@plt>
   195bc:	sub	r1, fp, #132	; 0x84
   195c0:	bl	1823c <__assert_fail@plt+0x6c80>
   195c4:	b	1a8d4 <__assert_fail@plt+0x9318>
   195c8:	mov	r0, r6
   195cc:	bl	1da90 <__assert_fail@plt+0xc4d4>
   195d0:	ldr	r2, [fp, #-168]	; 0xffffff58
   195d4:	ldr	r3, [fp, #-212]	; 0xffffff2c
   195d8:	ldrb	r1, [sp, #325]	; 0x145
   195dc:	ldr	r4, [sp, #80]	; 0x50
   195e0:	ldr	r5, [sp, #88]	; 0x58
   195e4:	subs	r0, r3, r2
   195e8:	movwne	r0, #1
   195ec:	cmp	r1, #0
   195f0:	beq	19c08 <__assert_fail@plt+0x864c>
   195f4:	str	r2, [sp, #68]	; 0x44
   195f8:	ldr	r6, [fp, #-176]	; 0xffffff50
   195fc:	ldr	r1, [fp, #-172]	; 0xffffff54
   19600:	ldr	r5, [fp, #-220]	; 0xffffff24
   19604:	ldr	r2, [fp, #-216]	; 0xffffff28
   19608:	str	r3, [sp, #64]	; 0x40
   1960c:	ldr	r3, [fp, #-164]	; 0xffffff5c
   19610:	ldr	r7, [fp, #-208]	; 0xffffff30
   19614:	str	r9, [sp, #92]	; 0x5c
   19618:	mov	r8, #0
   1961c:	str	r1, [sp, #52]	; 0x34
   19620:	str	r2, [sp, #48]	; 0x30
   19624:	eor	r1, r2, r1
   19628:	eor	r2, r5, r6
   1962c:	str	r5, [sp, #40]	; 0x28
   19630:	str	r6, [sp, #44]	; 0x2c
   19634:	str	r3, [sp, #84]	; 0x54
   19638:	str	r7, [sp, #76]	; 0x4c
   1963c:	orr	r1, r2, r1
   19640:	ldr	r2, [fp, #-204]	; 0xffffff34
   19644:	clz	r1, r1
   19648:	lsr	r1, r1, #5
   1964c:	and	r9, r1, r0
   19650:	sub	r0, r7, r3
   19654:	ldr	r1, [fp, #-200]	; 0xffffff38
   19658:	clz	r0, r0
   1965c:	str	r2, [sp, #96]	; 0x60
   19660:	lsr	r5, r0, #5
   19664:	ldr	r0, [fp, #-156]	; 0xffffff64
   19668:	str	r1, [sp, #56]	; 0x38
   1966c:	str	r0, [sp, #60]	; 0x3c
   19670:	eor	r0, r1, r0
   19674:	ldr	r1, [fp, #-160]	; 0xffffff60
   19678:	str	r1, [sp, #72]	; 0x48
   1967c:	eor	r1, r2, r1
   19680:	mov	r2, #5
   19684:	orr	r0, r1, r0
   19688:	movw	r1, #13155	; 0x3363
   1968c:	clz	r0, r0
   19690:	movt	r1, #2
   19694:	str	r0, [sp, #36]	; 0x24
   19698:	mov	r0, #0
   1969c:	bl	11328 <dcgettext@plt>
   196a0:	bl	1823c <__assert_fail@plt+0x6c80>
   196a4:	movw	r1, #13188	; 0x3384
   196a8:	mov	r0, #0
   196ac:	mov	r2, #5
   196b0:	movt	r1, #2
   196b4:	bl	11328 <dcgettext@plt>
   196b8:	movw	r2, #13503	; 0x34bf
   196bc:	sub	r7, fp, #132	; 0x84
   196c0:	mov	sl, r0
   196c4:	sub	r3, fp, #220	; 0xdc
   196c8:	mov	r1, #100	; 0x64
   196cc:	str	r8, [sp]
   196d0:	str	r8, [sp, #4]
   196d4:	movt	r2, #2
   196d8:	mov	r0, r7
   196dc:	bl	1f338 <__assert_fail@plt+0xdd7c>
   196e0:	cmp	r0, #99	; 0x63
   196e4:	bgt	19880 <__assert_fail@plt+0x82c4>
   196e8:	mov	r6, r0
   196ec:	ldr	r0, [sp, #320]	; 0x140
   196f0:	cmp	r0, #0
   196f4:	beq	19880 <__assert_fail@plt+0x82c4>
   196f8:	ldr	r4, [sp, #168]	; 0xa8
   196fc:	mov	r0, #43	; 0x2b
   19700:	str	r5, [sp, #32]
   19704:	movw	r3, #10471	; 0x28e7
   19708:	mov	r2, #27
   1970c:	movt	r3, #2
   19710:	cmp	r4, #0
   19714:	movwlt	r0, #45	; 0x2d
   19718:	str	r0, [sp]
   1971c:	movw	r0, #46021	; 0xb3c5
   19720:	movt	r0, #37282	; 0x91a2
   19724:	smmla	r0, r4, r0, r4
   19728:	asr	r1, r0, #11
   1972c:	add	r5, r1, r0, lsr #31
   19730:	mov	r1, #1
   19734:	cmp	r5, #0
   19738:	mov	r0, r5
   1973c:	rsbmi	r0, r5, #0
   19740:	str	r0, [sp, #4]
   19744:	add	r0, sp, #100	; 0x64
   19748:	bl	1149c <__sprintf_chk@plt>
   1974c:	mov	r2, r0
   19750:	mov	r0, #3600	; 0xe10
   19754:	rsb	r1, r6, #100	; 0x64
   19758:	mls	r3, r5, r0, r4
   1975c:	add	r0, r7, r6
   19760:	cmp	r3, #0
   19764:	mov	r4, r3
   19768:	rsbmi	r4, r3, #0
   1976c:	cmp	r3, #0
   19770:	beq	19858 <__assert_fail@plt+0x829c>
   19774:	add	r3, sp, #100	; 0x64
   19778:	mov	lr, #48	; 0x30
   1977c:	mov	ip, r9
   19780:	movw	r9, #52429	; 0xcccd
   19784:	add	r2, r3, r2
   19788:	mov	r3, #58	; 0x3a
   1978c:	movt	r9, #52428	; 0xcccc
   19790:	strb	r3, [r2]
   19794:	movw	r3, #33205	; 0x81b5
   19798:	movt	r3, #6990	; 0x1b4e
   1979c:	umull	r3, r5, r4, r3
   197a0:	add	r3, lr, r5, lsr #6
   197a4:	strb	r3, [r2, #1]
   197a8:	movw	r3, #34953	; 0x8889
   197ac:	movt	r3, #34952	; 0x8888
   197b0:	umull	r3, r7, r4, r3
   197b4:	lsr	r3, r7, #5
   197b8:	umull	r6, r5, r3, r9
   197bc:	lsr	r5, r5, #3
   197c0:	add	r5, r5, r5, lsl #2
   197c4:	sub	r5, r3, r5, lsl #1
   197c8:	lsl	r3, r3, #4
   197cc:	sub	r3, r3, r7, lsr #5
   197d0:	orr	r5, r5, #48	; 0x30
   197d4:	sub	r3, r4, r3, lsl #2
   197d8:	strb	r5, [r2, #2]
   197dc:	cmp	r3, #0
   197e0:	beq	19848 <__assert_fail@plt+0x828c>
   197e4:	umull	r7, r6, r3, r9
   197e8:	mov	r4, #58	; 0x3a
   197ec:	orr	r7, lr, r6, lsr #3
   197f0:	strb	r4, [r2, #3]
   197f4:	strb	r7, [r2, #4]
   197f8:	lsr	r7, r6, #3
   197fc:	add	r7, r7, r7, lsl #2
   19800:	sub	r3, r3, r7, lsl #1
   19804:	orr	r3, r3, #48	; 0x30
   19808:	strb	r3, [r2, #5]
   1980c:	add	r2, r2, #6
   19810:	b	1984c <__assert_fail@plt+0x8290>
   19814:	mov	r0, #0
   19818:	subs	r0, r5, r0
   1981c:	add	r9, r9, #8
   19820:	sbcs	r0, r4, #0
   19824:	blt	1957c <__assert_fail@plt+0x7fc0>
   19828:	subs	r0, r5, #1
   1982c:	sbcs	r0, r4, #0
   19830:	blt	19c58 <__assert_fail@plt+0x869c>
   19834:	ldr	r0, [sp, #160]	; 0xa0
   19838:	ldr	r1, [fp, #-152]	; 0xffffff68
   1983c:	subs	r0, r1, r0
   19840:	movwne	r0, #1
   19844:	b	19c5c <__assert_fail@plt+0x86a0>
   19848:	add	r2, r2, #3
   1984c:	mov	r3, #0
   19850:	mov	r9, ip
   19854:	strb	r3, [r2]
   19858:	movw	r2, #13529	; 0x34d9
   1985c:	mvn	r3, #0
   19860:	movt	r2, #2
   19864:	str	r2, [sp]
   19868:	add	r2, sp, #100	; 0x64
   1986c:	str	r2, [sp, #4]
   19870:	mov	r2, #1
   19874:	bl	115b0 <__snprintf_chk@plt>
   19878:	ldr	r4, [sp, #80]	; 0x50
   1987c:	ldr	r5, [sp, #32]
   19880:	ldr	r0, [sp, #36]	; 0x24
   19884:	sub	r6, fp, #132	; 0x84
   19888:	and	r5, r9, r5
   1988c:	mov	r1, r6
   19890:	lsr	r9, r0, #5
   19894:	mov	r0, sl
   19898:	bl	1823c <__assert_fail@plt+0x6c80>
   1989c:	movw	r1, #13218	; 0x33a2
   198a0:	mov	r0, #0
   198a4:	mov	r2, #5
   198a8:	movt	r1, #2
   198ac:	bl	11328 <dcgettext@plt>
   198b0:	movw	r2, #13503	; 0x34bf
   198b4:	mov	sl, r0
   198b8:	sub	r3, fp, #176	; 0xb0
   198bc:	mov	r0, r6
   198c0:	mov	r1, #100	; 0x64
   198c4:	str	r8, [sp]
   198c8:	str	r8, [sp, #4]
   198cc:	movt	r2, #2
   198d0:	bl	1f338 <__assert_fail@plt+0xdd7c>
   198d4:	cmp	r0, #99	; 0x63
   198d8:	bgt	19a30 <__assert_fail@plt+0x8474>
   198dc:	mov	r7, r0
   198e0:	ldr	r0, [sp, #320]	; 0x140
   198e4:	cmp	r0, #0
   198e8:	beq	19a30 <__assert_fail@plt+0x8474>
   198ec:	str	r5, [sp, #36]	; 0x24
   198f0:	ldr	r5, [sp, #168]	; 0xa8
   198f4:	mov	r0, #43	; 0x2b
   198f8:	movw	r3, #10471	; 0x28e7
   198fc:	add	r8, sp, #100	; 0x64
   19900:	mov	r2, #27
   19904:	movt	r3, #2
   19908:	cmp	r5, #0
   1990c:	movwlt	r0, #45	; 0x2d
   19910:	str	r0, [sp]
   19914:	movw	r0, #46021	; 0xb3c5
   19918:	movt	r0, #37282	; 0x91a2
   1991c:	smmla	r0, r5, r0, r5
   19920:	asr	r1, r0, #11
   19924:	add	r4, r1, r0, lsr #31
   19928:	mov	r1, #1
   1992c:	cmp	r4, #0
   19930:	mov	r0, r4
   19934:	rsbmi	r0, r4, #0
   19938:	str	r0, [sp, #4]
   1993c:	mov	r0, r8
   19940:	bl	1149c <__sprintf_chk@plt>
   19944:	mov	r2, r0
   19948:	mov	r0, #3600	; 0xe10
   1994c:	rsb	r1, r7, #100	; 0x64
   19950:	mls	r3, r4, r0, r5
   19954:	add	r0, r6, r7
   19958:	cmp	r3, #0
   1995c:	mov	r4, r3
   19960:	rsbmi	r4, r3, #0
   19964:	cmp	r3, #0
   19968:	beq	19a10 <__assert_fail@plt+0x8454>
   1996c:	add	r2, r8, r2
   19970:	mov	r3, #58	; 0x3a
   19974:	mov	lr, #48	; 0x30
   19978:	strb	r3, [r2]
   1997c:	movw	r3, #33205	; 0x81b5
   19980:	movt	r3, #6990	; 0x1b4e
   19984:	umull	r3, r5, r4, r3
   19988:	add	r3, lr, r5, lsr #6
   1998c:	movw	r5, #52429	; 0xcccd
   19990:	strb	r3, [r2, #1]
   19994:	movw	r3, #34953	; 0x8889
   19998:	movt	r5, #52428	; 0xcccc
   1999c:	movt	r3, #34952	; 0x8888
   199a0:	umull	r3, r7, r4, r3
   199a4:	lsr	r3, r7, #5
   199a8:	umull	r6, ip, r3, r5
   199ac:	lsr	r6, ip, #3
   199b0:	add	r6, r6, r6, lsl #2
   199b4:	sub	r6, r3, r6, lsl #1
   199b8:	lsl	r3, r3, #4
   199bc:	sub	r3, r3, r7, lsr #5
   199c0:	orr	r6, r6, #48	; 0x30
   199c4:	sub	r3, r4, r3, lsl #2
   199c8:	strb	r6, [r2, #2]
   199cc:	cmp	r3, #0
   199d0:	beq	19a04 <__assert_fail@plt+0x8448>
   199d4:	mov	r7, #58	; 0x3a
   199d8:	strb	r7, [r2, #3]
   199dc:	umull	r7, r6, r3, r5
   199e0:	orr	r7, lr, r6, lsr #3
   199e4:	strb	r7, [r2, #4]
   199e8:	lsr	r7, r6, #3
   199ec:	add	r7, r7, r7, lsl #2
   199f0:	sub	r3, r3, r7, lsl #1
   199f4:	orr	r3, r3, #48	; 0x30
   199f8:	strb	r3, [r2, #5]
   199fc:	add	r2, r2, #6
   19a00:	b	19a08 <__assert_fail@plt+0x844c>
   19a04:	add	r2, r2, #3
   19a08:	mov	r3, #0
   19a0c:	strb	r3, [r2]
   19a10:	movw	r2, #13529	; 0x34d9
   19a14:	mvn	r3, #0
   19a18:	movt	r2, #2
   19a1c:	stm	sp, {r2, r8}
   19a20:	mov	r2, #1
   19a24:	bl	115b0 <__snprintf_chk@plt>
   19a28:	ldr	r4, [sp, #80]	; 0x50
   19a2c:	ldr	r5, [sp, #36]	; 0x24
   19a30:	sub	r6, fp, #132	; 0x84
   19a34:	mov	r0, sl
   19a38:	and	r9, r5, r9
   19a3c:	mov	r1, r6
   19a40:	bl	1823c <__assert_fail@plt+0x6c80>
   19a44:	ldr	r2, [sp, #44]	; 0x2c
   19a48:	ldr	r3, [sp, #40]	; 0x28
   19a4c:	movw	r1, #13307	; 0x33fb
   19a50:	movw	r0, #13217	; 0x33a1
   19a54:	ldr	r7, [sp, #84]	; 0x54
   19a58:	ldr	r5, [sp, #76]	; 0x4c
   19a5c:	ldr	sl, [sp, #72]	; 0x48
   19a60:	movt	r1, #2
   19a64:	movt	r0, #2
   19a68:	cmp	r3, r2
   19a6c:	mov	r2, r1
   19a70:	ldr	r3, [sp, #48]	; 0x30
   19a74:	moveq	r2, r0
   19a78:	str	r2, [sp, #24]
   19a7c:	ldr	r2, [sp, #52]	; 0x34
   19a80:	cmp	r3, r2
   19a84:	mov	r2, r1
   19a88:	ldr	r3, [sp, #64]	; 0x40
   19a8c:	moveq	r2, r0
   19a90:	str	r2, [sp, #20]
   19a94:	ldr	r2, [sp, #68]	; 0x44
   19a98:	cmp	r3, r2
   19a9c:	mov	r2, r1
   19aa0:	ldr	r3, [sp, #56]	; 0x38
   19aa4:	moveq	r2, r0
   19aa8:	cmp	r5, r7
   19aac:	str	r2, [sp, #16]
   19ab0:	mov	r2, r1
   19ab4:	moveq	r2, r0
   19ab8:	str	r2, [sp, #12]
   19abc:	ldr	r2, [sp, #96]	; 0x60
   19ac0:	cmp	r2, sl
   19ac4:	ldr	r2, [sp, #60]	; 0x3c
   19ac8:	moveq	r1, r0
   19acc:	str	r1, [sp, #8]
   19ad0:	movw	r1, #13305	; 0x33f9
   19ad4:	movt	r1, #2
   19ad8:	cmp	r3, r2
   19adc:	mov	r2, #1
   19ae0:	mov	r3, #100	; 0x64
   19ae4:	moveq	r1, r0
   19ae8:	movw	r0, #13248	; 0x33c0
   19aec:	movt	r0, #2
   19af0:	str	r1, [sp, #4]
   19af4:	mov	r1, #100	; 0x64
   19af8:	str	r0, [sp]
   19afc:	mov	r0, r6
   19b00:	bl	115b0 <__snprintf_chk@plt>
   19b04:	ldr	r8, [sp, #92]	; 0x5c
   19b08:	cmp	r0, #0
   19b0c:	blt	19b48 <__assert_fail@plt+0x858c>
   19b10:	cmp	r0, #99	; 0x63
   19b14:	movcs	r0, #99	; 0x63
   19b18:	add	r0, r0, #1
   19b1c:	mov	r1, r0
   19b20:	sub	r0, r0, #1
   19b24:	cmp	r0, #1
   19b28:	blt	19b3c <__assert_fail@plt+0x8580>
   19b2c:	add	r2, r6, r1
   19b30:	ldrb	r2, [r2, #-2]
   19b34:	cmp	r2, #32
   19b38:	beq	19b1c <__assert_fail@plt+0x8560>
   19b3c:	add	r0, r6, r1
   19b40:	mov	r1, #0
   19b44:	strb	r1, [r0, #-1]
   19b48:	movw	r0, #13463	; 0x3497
   19b4c:	sub	r1, fp, #132	; 0x84
   19b50:	movt	r0, #2
   19b54:	bl	1823c <__assert_fail@plt+0x6c80>
   19b58:	movw	r1, #13310	; 0x33fe
   19b5c:	mov	r0, #0
   19b60:	mov	r2, #5
   19b64:	movt	r1, #2
   19b68:	bl	11328 <dcgettext@plt>
   19b6c:	bl	1823c <__assert_fail@plt+0x6c80>
   19b70:	cmp	r9, #0
   19b74:	beq	19b90 <__assert_fail@plt+0x85d4>
   19b78:	movw	r1, #13334	; 0x3416
   19b7c:	mov	r0, #0
   19b80:	mov	r2, #5
   19b84:	movt	r1, #2
   19b88:	bl	11328 <dcgettext@plt>
   19b8c:	bl	1823c <__assert_fail@plt+0x6c80>
   19b90:	cmp	r5, r7
   19b94:	ldr	r5, [sp, #88]	; 0x58
   19b98:	ldrne	r0, [sp, #96]	; 0x60
   19b9c:	cmpne	r0, sl
   19ba0:	beq	19bbc <__assert_fail@plt+0x8600>
   19ba4:	movw	r1, #13384	; 0x3448
   19ba8:	mov	r0, #0
   19bac:	mov	r2, #5
   19bb0:	movt	r1, #2
   19bb4:	bl	11328 <dcgettext@plt>
   19bb8:	bl	1823c <__assert_fail@plt+0x6c80>
   19bbc:	movw	r1, #13423	; 0x346f
   19bc0:	mov	r0, #0
   19bc4:	mov	r2, #5
   19bc8:	movt	r1, #2
   19bcc:	bl	11328 <dcgettext@plt>
   19bd0:	bl	1823c <__assert_fail@plt+0x6c80>
   19bd4:	movw	r0, #13467	; 0x349b
   19bd8:	movw	r1, #13486	; 0x34ae
   19bdc:	cmp	r8, #0
   19be0:	mov	r2, #5
   19be4:	movt	r0, #2
   19be8:	movt	r1, #2
   19bec:	movne	r1, r0
   19bf0:	mov	r0, #0
   19bf4:	bl	11328 <dcgettext@plt>
   19bf8:	mov	r1, r0
   19bfc:	movw	r0, #13456	; 0x3490
   19c00:	movt	r0, #2
   19c04:	bl	1823c <__assert_fail@plt+0x6c80>
   19c08:	ldr	r6, [fp, #8]
   19c0c:	mov	r7, #0
   19c10:	cmp	r5, r6
   19c14:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   19c18:	b	1b4d0 <__assert_fail@plt+0x9f14>
   19c1c:	mov	r0, #0
   19c20:	subs	r0, r5, r0
   19c24:	sbc	r1, r4, #0
   19c28:	eor	r0, r0, r2
   19c2c:	eor	r1, r1, r2
   19c30:	orrs	r0, r0, r1
   19c34:	beq	19ca8 <__assert_fail@plt+0x86ec>
   19c38:	subs	r0, r5, #1
   19c3c:	sbcs	r0, r4, #0
   19c40:	blt	19c84 <__assert_fail@plt+0x86c8>
   19c44:	ldr	r0, [sp, #160]	; 0xa0
   19c48:	ldr	r1, [fp, #-152]	; 0xffffff68
   19c4c:	subs	r0, r1, r0
   19c50:	movwne	r0, #1
   19c54:	b	19c88 <__assert_fail@plt+0x86cc>
   19c58:	mov	r0, #0
   19c5c:	movw	r3, #37449	; 0x9249
   19c60:	movw	r2, #9362	; 0x2492
   19c64:	subs	r0, r5, r0
   19c68:	movt	r3, #18724	; 0x4924
   19c6c:	sbc	r1, r4, #0
   19c70:	movt	r2, #4681	; 0x1249
   19c74:	subs	r0, r3, r0
   19c78:	sbcs	r0, r2, r1
   19c7c:	bge	19ca8 <__assert_fail@plt+0x86ec>
   19c80:	b	19dc0 <__assert_fail@plt+0x8804>
   19c84:	mov	r0, #0
   19c88:	subs	r2, r5, r0
   19c8c:	mov	r0, #0
   19c90:	mov	r1, #-2147483648	; 0x80000000
   19c94:	sbc	r3, r4, #0
   19c98:	bl	20f14 <__assert_fail@plt+0xf958>
   19c9c:	subs	r0, r0, #7
   19ca0:	sbcs	r0, r1, #0
   19ca4:	blt	19dc0 <__assert_fail@plt+0x8804>
   19ca8:	rsbs	r0, r5, #0
   19cac:	rscs	r0, r4, #0
   19cb0:	bge	19cc8 <__assert_fail@plt+0x870c>
   19cb4:	ldr	r1, [sp, #160]	; 0xa0
   19cb8:	ldr	r0, [fp, #-152]	; 0xffffff68
   19cbc:	subs	r2, r0, r1
   19cc0:	movwne	r2, #1
   19cc4:	b	19cd4 <__assert_fail@plt+0x8718>
   19cc8:	ldr	r0, [fp, #-152]	; 0xffffff68
   19ccc:	ldr	r1, [sp, #160]	; 0xa0
   19cd0:	mov	r2, #0
   19cd4:	add	r1, r1, #7
   19cd8:	subs	r2, r5, r2
   19cdc:	mov	r3, #7
   19ce0:	mov	r5, #0
   19ce4:	sub	r0, r1, r0
   19ce8:	movw	r1, #9363	; 0x2493
   19cec:	sbc	r7, r4, #0
   19cf0:	umull	r2, r3, r2, r3
   19cf4:	movt	r1, #37449	; 0x9249
   19cf8:	rsb	r7, r7, r7, lsl #3
   19cfc:	smmla	r1, r0, r1, r0
   19d00:	add	r3, r3, r7
   19d04:	asr	r7, r1, #2
   19d08:	add	r1, r7, r1, lsr #31
   19d0c:	sub	r1, r1, r1, lsl #3
   19d10:	add	r0, r0, r1
   19d14:	asr	r7, r0, #31
   19d18:	adds	r2, r0, r2
   19d1c:	mov	r0, #0
   19d20:	adc	r1, r7, r3
   19d24:	cmn	r1, #1
   19d28:	movwgt	r5, #1
   19d2c:	cmn	r7, #1
   19d30:	mov	r7, #0
   19d34:	movwgt	r7, #1
   19d38:	subs	r5, r7, r5
   19d3c:	movwne	r5, #1
   19d40:	cmn	r3, #1
   19d44:	mov	r3, #0
   19d48:	movwgt	r3, #1
   19d4c:	sub	r3, r7, r3
   19d50:	clz	r3, r3
   19d54:	lsr	r3, r3, #5
   19d58:	ands	r3, r3, r5
   19d5c:	bne	19dc0 <__assert_fail@plt+0x8804>
   19d60:	ldr	r7, [fp, #-164]	; 0xffffff5c
   19d64:	cmn	r1, #1
   19d68:	mov	r3, #0
   19d6c:	mov	r5, #0
   19d70:	movwgt	r3, #1
   19d74:	adds	r2, r2, r7
   19d78:	adc	r1, r1, r7, asr #31
   19d7c:	asr	r7, r7, #31
   19d80:	str	r2, [fp, #-164]	; 0xffffff5c
   19d84:	cmn	r1, #1
   19d88:	movwgt	r5, #1
   19d8c:	subs	r5, r3, r5
   19d90:	movwne	r5, #1
   19d94:	cmn	r7, #1
   19d98:	movwgt	r0, #1
   19d9c:	sub	r0, r3, r0
   19da0:	clz	r0, r0
   19da4:	lsr	r0, r0, #5
   19da8:	tst	r0, r5
   19dac:	asreq	r0, r2, #31
   19db0:	eoreq	r2, r2, r2
   19db4:	eoreq	r0, r1, r0
   19db8:	orrseq	r0, r2, r0
   19dbc:	beq	1a040 <__assert_fail@plt+0x8a84>
   19dc0:	ldrb	r0, [sp, #325]	; 0x145
   19dc4:	cmp	r0, #0
   19dc8:	ldr	r5, [sp, #88]	; 0x58
   19dcc:	beq	1a8d4 <__assert_fail@plt+0x9318>
   19dd0:	movw	r1, #11837	; 0x2e3d
   19dd4:	mov	r0, #0
   19dd8:	mov	r2, #5
   19ddc:	mov	r4, #0
   19de0:	movt	r1, #2
   19de4:	bl	11328 <dcgettext@plt>
   19de8:	ldrb	r1, [sp, #332]	; 0x14c
   19dec:	str	r0, [sp, #96]	; 0x60
   19df0:	cmp	r1, #0
   19df4:	beq	19e38 <__assert_fail@plt+0x887c>
   19df8:	ldrd	r0, [r9]
   19dfc:	adds	r2, r0, #1
   19e00:	adc	r3, r1, #0
   19e04:	rsbs	r2, r2, #13
   19e08:	rscs	r2, r3, #0
   19e0c:	bcc	19e4c <__assert_fail@plt+0x8890>
   19e10:	movw	r2, #8232	; 0x2028
   19e14:	mov	r3, #11
   19e18:	movw	r1, #7182	; 0x1c0e
   19e1c:	movt	r2, #2
   19e20:	movt	r1, #2
   19e24:	mla	r0, r0, r3, r2
   19e28:	str	r1, [sp]
   19e2c:	add	r0, r0, #11
   19e30:	str	r0, [sp, #4]
   19e34:	b	19e60 <__assert_fail@plt+0x88a4>
   19e38:	strb	r4, [fp, #-132]	; 0xffffff7c
   19e3c:	ldr	r6, [sp, #160]	; 0xa0
   19e40:	cmp	r6, #0
   19e44:	bge	19e84 <__assert_fail@plt+0x88c8>
   19e48:	b	19ed4 <__assert_fail@plt+0x8918>
   19e4c:	str	r0, [sp, #8]
   19e50:	movw	r0, #10466	; 0x28e2
   19e54:	str	r1, [sp, #12]
   19e58:	movt	r0, #2
   19e5c:	str	r0, [sp]
   19e60:	sub	r0, fp, #132	; 0x84
   19e64:	mov	r1, #100	; 0x64
   19e68:	mov	r2, #1
   19e6c:	mov	r3, #100	; 0x64
   19e70:	bl	115b0 <__snprintf_chk@plt>
   19e74:	mov	r4, r0
   19e78:	ldr	r6, [sp, #160]	; 0xa0
   19e7c:	cmp	r6, #0
   19e80:	blt	19ed4 <__assert_fail@plt+0x8918>
   19e84:	cmp	r4, #99	; 0x63
   19e88:	bhi	19ed4 <__assert_fail@plt+0x8918>
   19e8c:	cmp	r6, #6
   19e90:	bgt	19ed4 <__assert_fail@plt+0x8918>
   19e94:	movw	r0, #8386	; 0x20c2
   19e98:	movw	r1, #7181	; 0x1c0d
   19e9c:	cmp	r4, #0
   19ea0:	mov	r2, #1
   19ea4:	mvn	r3, #0
   19ea8:	movt	r0, #2
   19eac:	movt	r1, #2
   19eb0:	add	r0, r0, r6, lsl #2
   19eb4:	addeq	r1, r1, #1
   19eb8:	str	r0, [sp, #4]
   19ebc:	sub	r0, fp, #132	; 0x84
   19ec0:	str	r1, [sp]
   19ec4:	rsb	r1, r4, #100	; 0x64
   19ec8:	add	r0, r0, r4
   19ecc:	bl	115b0 <__snprintf_chk@plt>
   19ed0:	ldr	r6, [sp, #160]	; 0xa0
   19ed4:	ldr	r5, [sp, #88]	; 0x58
   19ed8:	ldm	r9, {r7, r8}
   19edc:	mov	r0, #0
   19ee0:	movw	r2, #13503	; 0x34bf
   19ee4:	sub	r4, fp, #348	; 0x15c
   19ee8:	sub	r3, fp, #176	; 0xb0
   19eec:	mov	r1, #100	; 0x64
   19ef0:	str	r0, [sp]
   19ef4:	str	r0, [sp, #4]
   19ef8:	movt	r2, #2
   19efc:	mov	r0, r4
   19f00:	bl	1f338 <__assert_fail@plt+0xdd7c>
   19f04:	cmp	r0, #99	; 0x63
   19f08:	bgt	1a110 <__assert_fail@plt+0x8b54>
   19f0c:	mov	r9, r0
   19f10:	ldr	r0, [sp, #320]	; 0x140
   19f14:	cmp	r0, #0
   19f18:	beq	1a110 <__assert_fail@plt+0x8b54>
   19f1c:	str	r8, [sp, #92]	; 0x5c
   19f20:	ldr	r8, [sp, #168]	; 0xa8
   19f24:	mov	r0, #43	; 0x2b
   19f28:	movw	r3, #10471	; 0x28e7
   19f2c:	add	r5, sp, #100	; 0x64
   19f30:	mov	r2, #27
   19f34:	str	r6, [sp, #76]	; 0x4c
   19f38:	str	r7, [sp, #84]	; 0x54
   19f3c:	movt	r3, #2
   19f40:	cmp	r8, #0
   19f44:	movwlt	r0, #45	; 0x2d
   19f48:	str	r0, [sp]
   19f4c:	movw	r0, #46021	; 0xb3c5
   19f50:	movt	r0, #37282	; 0x91a2
   19f54:	smmla	r0, r8, r0, r8
   19f58:	asr	r1, r0, #11
   19f5c:	add	sl, r1, r0, lsr #31
   19f60:	mov	r1, #1
   19f64:	cmp	sl, #0
   19f68:	mov	r0, sl
   19f6c:	rsbmi	r0, sl, #0
   19f70:	str	r0, [sp, #4]
   19f74:	mov	r0, r5
   19f78:	bl	1149c <__sprintf_chk@plt>
   19f7c:	mov	r2, r0
   19f80:	mov	r0, #3600	; 0xe10
   19f84:	sub	r4, fp, #348	; 0x15c
   19f88:	rsb	r1, r9, #100	; 0x64
   19f8c:	mls	r3, sl, r0, r8
   19f90:	add	r0, r4, r9
   19f94:	cmp	r3, #0
   19f98:	mov	r7, r3
   19f9c:	rsbmi	r7, r3, #0
   19fa0:	cmp	r3, #0
   19fa4:	beq	1a0e8 <__assert_fail@plt+0x8b2c>
   19fa8:	movw	r3, #33205	; 0x81b5
   19fac:	mov	lr, #48	; 0x30
   19fb0:	add	r2, r5, r2
   19fb4:	mov	ip, #58	; 0x3a
   19fb8:	movw	r8, #52429	; 0xcccd
   19fbc:	mov	r9, r5
   19fc0:	movt	r3, #6990	; 0x1b4e
   19fc4:	strb	ip, [r2]
   19fc8:	movt	r8, #52428	; 0xcccc
   19fcc:	umull	r3, r4, r7, r3
   19fd0:	add	r3, lr, r4, lsr #6
   19fd4:	strb	r3, [r2, #1]
   19fd8:	movw	r3, #34953	; 0x8889
   19fdc:	movt	r3, #34952	; 0x8888
   19fe0:	umull	r3, r4, r7, r3
   19fe4:	lsr	r3, r4, #5
   19fe8:	umull	r6, r5, r3, r8
   19fec:	lsr	r5, r5, #3
   19ff0:	add	r5, r5, r5, lsl #2
   19ff4:	sub	r5, r3, r5, lsl #1
   19ff8:	lsl	r3, r3, #4
   19ffc:	sub	r3, r3, r4, lsr #5
   1a000:	orr	r5, r5, #48	; 0x30
   1a004:	sub	r3, r7, r3, lsl #2
   1a008:	strb	r5, [r2, #2]
   1a00c:	cmp	r3, #0
   1a010:	beq	1a0d4 <__assert_fail@plt+0x8b18>
   1a014:	umull	r7, r6, r3, r8
   1a018:	strb	ip, [r2, #3]
   1a01c:	orr	r7, lr, r6, lsr #3
   1a020:	strb	r7, [r2, #4]
   1a024:	lsr	r7, r6, #3
   1a028:	add	r7, r7, r7, lsl #2
   1a02c:	sub	r3, r3, r7, lsl #1
   1a030:	orr	r3, r3, #48	; 0x30
   1a034:	strb	r3, [r2, #5]
   1a038:	add	r2, r2, #6
   1a03c:	b	1a0d8 <__assert_fail@plt+0x8b1c>
   1a040:	mvn	r0, #0
   1a044:	sub	r1, fp, #176	; 0xb0
   1a048:	str	r0, [fp, #-144]	; 0xffffff70
   1a04c:	ldr	r0, [sp, #88]	; 0x58
   1a050:	bl	1df64 <__assert_fail@plt+0xc9a8>
   1a054:	ldrb	r1, [sp, #325]	; 0x145
   1a058:	cmn	r0, #1
   1a05c:	beq	1a130 <__assert_fail@plt+0x8b74>
   1a060:	mov	sl, r0
   1a064:	cmp	r1, #0
   1a068:	beq	1a140 <__assert_fail@plt+0x8b84>
   1a06c:	movw	r1, #11917	; 0x2e8d
   1a070:	mov	r0, #0
   1a074:	mov	r2, #5
   1a078:	mov	r4, #0
   1a07c:	movt	r1, #2
   1a080:	bl	11328 <dcgettext@plt>
   1a084:	str	r0, [sp, #96]	; 0x60
   1a088:	ldrb	r0, [sp, #332]	; 0x14c
   1a08c:	cmp	r0, #0
   1a090:	beq	1a14c <__assert_fail@plt+0x8b90>
   1a094:	ldrd	r0, [r9]
   1a098:	adds	r2, r0, #1
   1a09c:	adc	r3, r1, #0
   1a0a0:	rsbs	r2, r2, #13
   1a0a4:	rscs	r2, r3, #0
   1a0a8:	bcc	1a160 <__assert_fail@plt+0x8ba4>
   1a0ac:	movw	r2, #8232	; 0x2028
   1a0b0:	mov	r3, #11
   1a0b4:	movw	r1, #7182	; 0x1c0e
   1a0b8:	movt	r2, #2
   1a0bc:	movt	r1, #2
   1a0c0:	mla	r0, r0, r3, r2
   1a0c4:	str	r1, [sp]
   1a0c8:	add	r0, r0, #11
   1a0cc:	str	r0, [sp, #4]
   1a0d0:	b	1a174 <__assert_fail@plt+0x8bb8>
   1a0d4:	add	r2, r2, #3
   1a0d8:	mov	r3, #0
   1a0dc:	sub	r4, fp, #348	; 0x15c
   1a0e0:	mov	r5, r9
   1a0e4:	strb	r3, [r2]
   1a0e8:	movw	r2, #13529	; 0x34d9
   1a0ec:	mvn	r3, #0
   1a0f0:	movt	r2, #2
   1a0f4:	stm	sp, {r2, r5}
   1a0f8:	mov	r2, #1
   1a0fc:	bl	115b0 <__snprintf_chk@plt>
   1a100:	ldr	r5, [sp, #88]	; 0x58
   1a104:	ldr	r8, [sp, #92]	; 0x5c
   1a108:	ldr	r7, [sp, #84]	; 0x54
   1a10c:	ldr	r6, [sp, #76]	; 0x4c
   1a110:	ldr	r0, [sp, #96]	; 0x60
   1a114:	sub	r1, fp, #132	; 0x84
   1a118:	mov	r2, r7
   1a11c:	mov	r3, r8
   1a120:	str	r6, [sp]
   1a124:	str	r4, [sp, #4]
   1a128:	bl	1823c <__assert_fail@plt+0x6c80>
   1a12c:	b	1a8d4 <__assert_fail@plt+0x9318>
   1a130:	cmp	r1, #0
   1a134:	ldr	r5, [sp, #88]	; 0x58
   1a138:	bne	19dd0 <__assert_fail@plt+0x8814>
   1a13c:	b	1a8d4 <__assert_fail@plt+0x9318>
   1a140:	add	r9, sp, #144	; 0x90
   1a144:	mov	ip, sl
   1a148:	b	1a740 <__assert_fail@plt+0x9184>
   1a14c:	strb	r4, [fp, #-132]	; 0xffffff7c
   1a150:	ldr	r0, [sp, #160]	; 0xa0
   1a154:	cmp	r0, #0
   1a158:	bge	1a198 <__assert_fail@plt+0x8bdc>
   1a15c:	b	1a1e4 <__assert_fail@plt+0x8c28>
   1a160:	str	r0, [sp, #8]
   1a164:	movw	r0, #10466	; 0x28e2
   1a168:	str	r1, [sp, #12]
   1a16c:	movt	r0, #2
   1a170:	str	r0, [sp]
   1a174:	sub	r0, fp, #132	; 0x84
   1a178:	mov	r1, #100	; 0x64
   1a17c:	mov	r2, #1
   1a180:	mov	r3, #100	; 0x64
   1a184:	bl	115b0 <__snprintf_chk@plt>
   1a188:	mov	r4, r0
   1a18c:	ldr	r0, [sp, #160]	; 0xa0
   1a190:	cmp	r0, #0
   1a194:	blt	1a1e4 <__assert_fail@plt+0x8c28>
   1a198:	cmp	r4, #99	; 0x63
   1a19c:	bhi	1a1e4 <__assert_fail@plt+0x8c28>
   1a1a0:	cmp	r0, #6
   1a1a4:	bgt	1a1e4 <__assert_fail@plt+0x8c28>
   1a1a8:	movw	r1, #8386	; 0x20c2
   1a1ac:	cmp	r4, #0
   1a1b0:	mov	r2, #1
   1a1b4:	mvn	r3, #0
   1a1b8:	movt	r1, #2
   1a1bc:	add	r0, r1, r0, lsl #2
   1a1c0:	movw	r1, #7181	; 0x1c0d
   1a1c4:	movt	r1, #2
   1a1c8:	str	r0, [sp, #4]
   1a1cc:	sub	r0, fp, #132	; 0x84
   1a1d0:	addeq	r1, r1, #1
   1a1d4:	add	r0, r0, r4
   1a1d8:	str	r1, [sp]
   1a1dc:	rsb	r1, r4, #100	; 0x64
   1a1e0:	bl	115b0 <__snprintf_chk@plt>
   1a1e4:	mov	r0, #0
   1a1e8:	movw	r2, #13503	; 0x34bf
   1a1ec:	sub	r6, fp, #348	; 0x15c
   1a1f0:	sub	r3, fp, #176	; 0xb0
   1a1f4:	mov	r1, #100	; 0x64
   1a1f8:	str	r0, [sp]
   1a1fc:	str	r0, [sp, #4]
   1a200:	movt	r2, #2
   1a204:	mov	r0, r6
   1a208:	bl	1f338 <__assert_fail@plt+0xdd7c>
   1a20c:	cmp	r0, #99	; 0x63
   1a210:	bgt	1a360 <__assert_fail@plt+0x8da4>
   1a214:	mov	r4, r0
   1a218:	ldr	r0, [sp, #320]	; 0x140
   1a21c:	cmp	r0, #0
   1a220:	beq	1a360 <__assert_fail@plt+0x8da4>
   1a224:	ldr	r5, [sp, #168]	; 0xa8
   1a228:	mov	r0, #43	; 0x2b
   1a22c:	movw	r3, #10471	; 0x28e7
   1a230:	mov	r2, #27
   1a234:	movt	r3, #2
   1a238:	cmp	r5, #0
   1a23c:	movwlt	r0, #45	; 0x2d
   1a240:	str	r0, [sp]
   1a244:	movw	r0, #46021	; 0xb3c5
   1a248:	movt	r0, #37282	; 0x91a2
   1a24c:	smmla	r0, r5, r0, r5
   1a250:	asr	r1, r0, #11
   1a254:	add	r7, r1, r0, lsr #31
   1a258:	mov	r1, #1
   1a25c:	cmp	r7, #0
   1a260:	mov	r0, r7
   1a264:	rsbmi	r0, r7, #0
   1a268:	str	r0, [sp, #4]
   1a26c:	add	r0, sp, #100	; 0x64
   1a270:	bl	1149c <__sprintf_chk@plt>
   1a274:	mov	r2, r0
   1a278:	mov	r0, #3600	; 0xe10
   1a27c:	rsb	r1, r4, #100	; 0x64
   1a280:	mls	r3, r7, r0, r5
   1a284:	add	r0, r6, r4
   1a288:	cmp	r3, #0
   1a28c:	mov	r7, r3
   1a290:	rsbmi	r7, r3, #0
   1a294:	cmp	r3, #0
   1a298:	beq	1a340 <__assert_fail@plt+0x8d84>
   1a29c:	movw	r6, #33205	; 0x81b5
   1a2a0:	add	r3, sp, #100	; 0x64
   1a2a4:	mov	lr, #48	; 0x30
   1a2a8:	mov	ip, #58	; 0x3a
   1a2ac:	movw	r9, #52429	; 0xcccd
   1a2b0:	movt	r6, #6990	; 0x1b4e
   1a2b4:	add	r2, r3, r2
   1a2b8:	movt	r9, #52428	; 0xcccc
   1a2bc:	umull	r6, r5, r7, r6
   1a2c0:	strb	ip, [r2]
   1a2c4:	add	r5, lr, r5, lsr #6
   1a2c8:	strb	r5, [r2, #1]
   1a2cc:	movw	r5, #34953	; 0x8889
   1a2d0:	movt	r5, #34952	; 0x8888
   1a2d4:	umull	r5, r4, r7, r5
   1a2d8:	lsr	r3, r4, #5
   1a2dc:	umull	r6, r5, r3, r9
   1a2e0:	lsr	r5, r5, #3
   1a2e4:	add	r5, r5, r5, lsl #2
   1a2e8:	sub	r5, r3, r5, lsl #1
   1a2ec:	lsl	r3, r3, #4
   1a2f0:	sub	r3, r3, r4, lsr #5
   1a2f4:	orr	r5, r5, #48	; 0x30
   1a2f8:	sub	r7, r7, r3, lsl #2
   1a2fc:	strb	r5, [r2, #2]
   1a300:	cmp	r7, #0
   1a304:	beq	1a334 <__assert_fail@plt+0x8d78>
   1a308:	umull	r3, r6, r7, r9
   1a30c:	strb	ip, [r2, #3]
   1a310:	orr	r3, lr, r6, lsr #3
   1a314:	strb	r3, [r2, #4]
   1a318:	lsr	r3, r6, #3
   1a31c:	add	r3, r3, r3, lsl #2
   1a320:	sub	r3, r7, r3, lsl #1
   1a324:	orr	r3, r3, #48	; 0x30
   1a328:	strb	r3, [r2, #5]
   1a32c:	add	r2, r2, #6
   1a330:	b	1a338 <__assert_fail@plt+0x8d7c>
   1a334:	add	r2, r2, #3
   1a338:	mov	r3, #0
   1a33c:	strb	r3, [r2]
   1a340:	movw	r2, #13529	; 0x34d9
   1a344:	mvn	r3, #0
   1a348:	movt	r2, #2
   1a34c:	str	r2, [sp]
   1a350:	add	r2, sp, #100	; 0x64
   1a354:	str	r2, [sp, #4]
   1a358:	mov	r2, #1
   1a35c:	bl	115b0 <__snprintf_chk@plt>
   1a360:	ldr	r0, [sp, #96]	; 0x60
   1a364:	sub	r1, fp, #132	; 0x84
   1a368:	sub	r2, fp, #348	; 0x15c
   1a36c:	bl	1823c <__assert_fail@plt+0x6c80>
   1a370:	add	r9, sp, #144	; 0x90
   1a374:	mov	ip, sl
   1a378:	ldrb	r0, [sp, #325]	; 0x145
   1a37c:	cmp	r0, #0
   1a380:	beq	1a740 <__assert_fail@plt+0x9184>
   1a384:	ldr	r0, [sp, #300]	; 0x12c
   1a388:	ldr	r1, [sp, #304]	; 0x130
   1a38c:	str	ip, [sp, #96]	; 0x60
   1a390:	orrs	r2, r1, r0
   1a394:	bne	1a470 <__assert_fail@plt+0x8eb4>
   1a398:	movw	r1, #11947	; 0x2eab
   1a39c:	mov	r0, #0
   1a3a0:	mov	r2, #5
   1a3a4:	movt	r1, #2
   1a3a8:	bl	11328 <dcgettext@plt>
   1a3ac:	mov	r4, r0
   1a3b0:	ldr	r0, [fp, #-156]	; 0xffffff64
   1a3b4:	movw	r1, #34079	; 0x851f
   1a3b8:	mvn	r3, #18
   1a3bc:	add	r6, sp, #100	; 0x64
   1a3c0:	movt	r1, #20971	; 0x51eb
   1a3c4:	smmul	r1, r0, r1
   1a3c8:	asr	r2, r1, #5
   1a3cc:	add	r1, r2, r1, lsr #31
   1a3d0:	mov	r2, #100	; 0x64
   1a3d4:	mls	r2, r1, r2, r0
   1a3d8:	add	r7, r1, #19
   1a3dc:	cmp	r2, #0
   1a3e0:	rsbmi	r2, r2, #0
   1a3e4:	cmn	r0, #2000	; 0x7d0
   1a3e8:	suble	r7, r3, r1
   1a3ec:	movw	r1, #63537	; 0xf831
   1a3f0:	movw	r3, #13557	; 0x34f5
   1a3f4:	str	r2, [sp, #4]
   1a3f8:	mov	r2, #13
   1a3fc:	movt	r1, #65535	; 0xffff
   1a400:	movt	r3, #2
   1a404:	str	r7, [sp]
   1a408:	add	r1, r1, #98	; 0x62
   1a40c:	cmp	r0, r1
   1a410:	mov	r0, r6
   1a414:	mov	r1, #1
   1a418:	addgt	r3, r3, #1
   1a41c:	bl	1149c <__sprintf_chk@plt>
   1a420:	ldr	r1, [fp, #-160]	; 0xffffff60
   1a424:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1a428:	movw	r2, #13536	; 0x34e0
   1a42c:	mov	r3, #100	; 0x64
   1a430:	movt	r2, #2
   1a434:	stm	sp, {r2, r6}
   1a438:	sub	r6, fp, #348	; 0x15c
   1a43c:	mov	r2, #1
   1a440:	add	r1, r1, #1
   1a444:	str	r0, [sp, #12]
   1a448:	mov	r0, r6
   1a44c:	str	r1, [sp, #8]
   1a450:	mov	r1, #100	; 0x64
   1a454:	bl	115b0 <__snprintf_chk@plt>
   1a458:	mov	r0, r4
   1a45c:	mov	r1, r6
   1a460:	bl	1823c <__assert_fail@plt+0x6c80>
   1a464:	ldr	r0, [sp, #300]	; 0x12c
   1a468:	ldr	r1, [sp, #304]	; 0x130
   1a46c:	add	r9, sp, #144	; 0x90
   1a470:	cmp	r1, #0
   1a474:	cmpne	r0, #0
   1a478:	beq	1a590 <__assert_fail@plt+0x8fd4>
   1a47c:	movw	r1, #11991	; 0x2ed7
   1a480:	mov	r0, #0
   1a484:	mov	r2, #5
   1a488:	mov	r4, #0
   1a48c:	movt	r1, #2
   1a490:	bl	11328 <dcgettext@plt>
   1a494:	mov	r6, r0
   1a498:	ldrb	r0, [sp, #332]	; 0x14c
   1a49c:	cmp	r0, #0
   1a4a0:	beq	1a4e8 <__assert_fail@plt+0x8f2c>
   1a4a4:	ldr	r0, [sp, #152]	; 0x98
   1a4a8:	ldr	r1, [sp, #156]	; 0x9c
   1a4ac:	adds	r2, r0, #1
   1a4b0:	adc	r3, r1, #0
   1a4b4:	rsbs	r2, r2, #13
   1a4b8:	rscs	r2, r3, #0
   1a4bc:	bcc	1a4fc <__assert_fail@plt+0x8f40>
   1a4c0:	movw	r2, #8232	; 0x2028
   1a4c4:	mov	r3, #11
   1a4c8:	movw	r1, #7182	; 0x1c0e
   1a4cc:	movt	r2, #2
   1a4d0:	movt	r1, #2
   1a4d4:	mla	r0, r0, r3, r2
   1a4d8:	str	r1, [sp]
   1a4dc:	add	r0, r0, #11
   1a4e0:	str	r0, [sp, #4]
   1a4e4:	b	1a510 <__assert_fail@plt+0x8f54>
   1a4e8:	strb	r4, [fp, #-132]	; 0xffffff7c
   1a4ec:	ldr	r0, [sp, #160]	; 0xa0
   1a4f0:	cmp	r0, #0
   1a4f4:	bge	1a534 <__assert_fail@plt+0x8f78>
   1a4f8:	b	1a580 <__assert_fail@plt+0x8fc4>
   1a4fc:	str	r0, [sp, #8]
   1a500:	movw	r0, #10466	; 0x28e2
   1a504:	str	r1, [sp, #12]
   1a508:	movt	r0, #2
   1a50c:	str	r0, [sp]
   1a510:	sub	r0, fp, #132	; 0x84
   1a514:	mov	r1, #100	; 0x64
   1a518:	mov	r2, #1
   1a51c:	mov	r3, #100	; 0x64
   1a520:	bl	115b0 <__snprintf_chk@plt>
   1a524:	mov	r4, r0
   1a528:	ldr	r0, [sp, #160]	; 0xa0
   1a52c:	cmp	r0, #0
   1a530:	blt	1a580 <__assert_fail@plt+0x8fc4>
   1a534:	cmp	r4, #99	; 0x63
   1a538:	bhi	1a580 <__assert_fail@plt+0x8fc4>
   1a53c:	cmp	r0, #6
   1a540:	bgt	1a580 <__assert_fail@plt+0x8fc4>
   1a544:	movw	r1, #8386	; 0x20c2
   1a548:	cmp	r4, #0
   1a54c:	mov	r2, #1
   1a550:	mvn	r3, #0
   1a554:	movt	r1, #2
   1a558:	add	r0, r1, r0, lsl #2
   1a55c:	movw	r1, #7181	; 0x1c0d
   1a560:	movt	r1, #2
   1a564:	str	r0, [sp, #4]
   1a568:	sub	r0, fp, #132	; 0x84
   1a56c:	addeq	r1, r1, #1
   1a570:	add	r0, r0, r4
   1a574:	str	r1, [sp]
   1a578:	rsb	r1, r4, #100	; 0x64
   1a57c:	bl	115b0 <__snprintf_chk@plt>
   1a580:	sub	r1, fp, #132	; 0x84
   1a584:	mov	r0, r6
   1a588:	bl	1823c <__assert_fail@plt+0x6c80>
   1a58c:	add	r9, sp, #144	; 0x90
   1a590:	movw	r1, #12048	; 0x2f10
   1a594:	mov	r0, #0
   1a598:	mov	r2, #5
   1a59c:	mov	r4, #0
   1a5a0:	movt	r1, #2
   1a5a4:	bl	11328 <dcgettext@plt>
   1a5a8:	movw	r2, #13503	; 0x34bf
   1a5ac:	sub	sl, fp, #348	; 0x15c
   1a5b0:	mov	r5, r0
   1a5b4:	sub	r3, fp, #176	; 0xb0
   1a5b8:	mov	r1, #100	; 0x64
   1a5bc:	str	r4, [sp]
   1a5c0:	str	r4, [sp, #4]
   1a5c4:	movt	r2, #2
   1a5c8:	mov	r0, sl
   1a5cc:	bl	1f338 <__assert_fail@plt+0xdd7c>
   1a5d0:	cmp	r0, #99	; 0x63
   1a5d4:	bgt	1a730 <__assert_fail@plt+0x9174>
   1a5d8:	mov	r4, r0
   1a5dc:	ldr	r0, [sp, #320]	; 0x140
   1a5e0:	cmp	r0, #0
   1a5e4:	beq	1a730 <__assert_fail@plt+0x9174>
   1a5e8:	str	r5, [sp, #92]	; 0x5c
   1a5ec:	ldr	r5, [sp, #168]	; 0xa8
   1a5f0:	mov	r0, #43	; 0x2b
   1a5f4:	movw	r3, #10471	; 0x28e7
   1a5f8:	add	r6, sp, #100	; 0x64
   1a5fc:	mov	r2, #27
   1a600:	movt	r3, #2
   1a604:	cmp	r5, #0
   1a608:	movwlt	r0, #45	; 0x2d
   1a60c:	str	r0, [sp]
   1a610:	movw	r0, #46021	; 0xb3c5
   1a614:	movt	r0, #37282	; 0x91a2
   1a618:	smmla	r0, r5, r0, r5
   1a61c:	asr	r1, r0, #11
   1a620:	add	r7, r1, r0, lsr #31
   1a624:	mov	r1, #1
   1a628:	cmp	r7, #0
   1a62c:	mov	r0, r7
   1a630:	rsbmi	r0, r7, #0
   1a634:	str	r0, [sp, #4]
   1a638:	mov	r0, r6
   1a63c:	bl	1149c <__sprintf_chk@plt>
   1a640:	mov	r2, r0
   1a644:	mov	r0, #3600	; 0xe10
   1a648:	rsb	r1, r4, #100	; 0x64
   1a64c:	mls	r3, r7, r0, r5
   1a650:	add	r0, sl, r4
   1a654:	cmp	r3, #0
   1a658:	mov	r7, r3
   1a65c:	rsbmi	r7, r3, #0
   1a660:	cmp	r3, #0
   1a664:	beq	1a710 <__assert_fail@plt+0x9154>
   1a668:	mov	sl, r6
   1a66c:	add	r2, r6, r2
   1a670:	movw	r6, #33205	; 0x81b5
   1a674:	mov	lr, #48	; 0x30
   1a678:	mov	ip, #58	; 0x3a
   1a67c:	movw	r9, #52429	; 0xcccd
   1a680:	movt	r6, #6990	; 0x1b4e
   1a684:	strb	ip, [r2]
   1a688:	movt	r9, #52428	; 0xcccc
   1a68c:	umull	r6, r5, r7, r6
   1a690:	add	r5, lr, r5, lsr #6
   1a694:	strb	r5, [r2, #1]
   1a698:	movw	r5, #34953	; 0x8889
   1a69c:	movt	r5, #34952	; 0x8888
   1a6a0:	umull	r5, r4, r7, r5
   1a6a4:	lsr	r3, r4, #5
   1a6a8:	umull	r6, r5, r3, r9
   1a6ac:	lsr	r5, r5, #3
   1a6b0:	add	r5, r5, r5, lsl #2
   1a6b4:	sub	r5, r3, r5, lsl #1
   1a6b8:	lsl	r3, r3, #4
   1a6bc:	sub	r3, r3, r4, lsr #5
   1a6c0:	orr	r5, r5, #48	; 0x30
   1a6c4:	sub	r7, r7, r3, lsl #2
   1a6c8:	strb	r5, [r2, #2]
   1a6cc:	cmp	r7, #0
   1a6d0:	beq	1a700 <__assert_fail@plt+0x9144>
   1a6d4:	umull	r3, r6, r7, r9
   1a6d8:	strb	ip, [r2, #3]
   1a6dc:	orr	r3, lr, r6, lsr #3
   1a6e0:	strb	r3, [r2, #4]
   1a6e4:	lsr	r3, r6, #3
   1a6e8:	add	r3, r3, r3, lsl #2
   1a6ec:	sub	r3, r7, r3, lsl #1
   1a6f0:	orr	r3, r3, #48	; 0x30
   1a6f4:	strb	r3, [r2, #5]
   1a6f8:	add	r2, r2, #6
   1a6fc:	b	1a704 <__assert_fail@plt+0x9148>
   1a700:	add	r2, r2, #3
   1a704:	mov	r3, #0
   1a708:	mov	r6, sl
   1a70c:	strb	r3, [r2]
   1a710:	movw	r2, #13529	; 0x34d9
   1a714:	mvn	r3, #0
   1a718:	movt	r2, #2
   1a71c:	stm	sp, {r2, r6}
   1a720:	mov	r2, #1
   1a724:	bl	115b0 <__snprintf_chk@plt>
   1a728:	ldr	r5, [sp, #92]	; 0x5c
   1a72c:	add	r9, sp, #144	; 0x90
   1a730:	sub	r1, fp, #348	; 0x15c
   1a734:	mov	r0, r5
   1a738:	bl	1823c <__assert_fail@plt+0x6c80>
   1a73c:	ldr	ip, [sp, #96]	; 0x60
   1a740:	ldrd	r4, [r8]
   1a744:	ldr	r3, [sp, #248]	; 0xf8
   1a748:	ldr	r2, [sp, #252]	; 0xfc
   1a74c:	ldr	r0, [sp, #256]	; 0x100
   1a750:	ldr	r1, [sp, #260]	; 0x104
   1a754:	orr	r2, r2, r5
   1a758:	orr	r3, r3, r4
   1a75c:	orr	r7, r2, r1
   1a760:	orr	r6, r3, r0
   1a764:	orrs	r7, r6, r7
   1a768:	beq	1aea0 <__assert_fail@plt+0x98e4>
   1a76c:	ldrb	r6, [sp, #325]	; 0x145
   1a770:	add	r9, r9, #112	; 0x70
   1a774:	cmp	r6, #0
   1a778:	beq	1a7d0 <__assert_fail@plt+0x9214>
   1a77c:	orrs	r2, r3, r2
   1a780:	ldrne	r2, [fp, #-164]	; 0xffffff5c
   1a784:	cmpne	r2, #15
   1a788:	beq	1a7a8 <__assert_fail@plt+0x91ec>
   1a78c:	movw	r1, #12074	; 0x2f2a
   1a790:	mov	r0, #0
   1a794:	mov	r2, #5
   1a798:	movt	r1, #2
   1a79c:	bl	11328 <dcgettext@plt>
   1a7a0:	bl	1823c <__assert_fail@plt+0x6c80>
   1a7a4:	ldrd	r0, [r9]
   1a7a8:	orrs	r0, r0, r1
   1a7ac:	ldrne	r0, [fp, #-168]	; 0xffffff58
   1a7b0:	cmpne	r0, #12
   1a7b4:	beq	1a7d0 <__assert_fail@plt+0x9214>
   1a7b8:	movw	r1, #12171	; 0x2f8b
   1a7bc:	mov	r0, #0
   1a7c0:	mov	r2, #5
   1a7c4:	movt	r1, #2
   1a7c8:	bl	11328 <dcgettext@plt>
   1a7cc:	bl	1823c <__assert_fail@plt+0x6c80>
   1a7d0:	ldr	r0, [fp, #-156]	; 0xffffff64
   1a7d4:	ldrd	r4, [r8]
   1a7d8:	mov	r3, #0
   1a7dc:	mov	r2, #0
   1a7e0:	asr	r1, r0, #31
   1a7e4:	cmn	r1, #1
   1a7e8:	movwgt	r3, #1
   1a7ec:	adds	r6, r0, r4
   1a7f0:	adc	r0, r1, r5
   1a7f4:	mov	r1, #0
   1a7f8:	cmn	r0, #1
   1a7fc:	movwgt	r1, #1
   1a800:	subs	r1, r3, r1
   1a804:	movwne	r1, #1
   1a808:	cmn	r5, #1
   1a80c:	movwgt	r2, #1
   1a810:	sub	r2, r3, r2
   1a814:	clz	r2, r2
   1a818:	lsr	r2, r2, #5
   1a81c:	tst	r2, r1
   1a820:	asreq	r1, r6, #31
   1a824:	eoreq	r2, r6, r6
   1a828:	eoreq	r0, r0, r1
   1a82c:	orrseq	r0, r2, r0
   1a830:	bne	1a8a0 <__assert_fail@plt+0x92e4>
   1a834:	add	r0, sp, #144	; 0x90
   1a838:	mov	r3, #0
   1a83c:	mov	r2, #0
   1a840:	add	sl, r0, #104	; 0x68
   1a844:	ldr	r0, [fp, #-160]	; 0xffffff60
   1a848:	ldrd	r4, [sl]
   1a84c:	asr	r1, r0, #31
   1a850:	cmn	r1, #1
   1a854:	movwgt	r3, #1
   1a858:	adds	r4, r0, r4
   1a85c:	adc	r0, r1, r5
   1a860:	mov	r1, #0
   1a864:	cmn	r0, #1
   1a868:	movwgt	r1, #1
   1a86c:	subs	r1, r3, r1
   1a870:	movwne	r1, #1
   1a874:	cmn	r5, #1
   1a878:	movwgt	r2, #1
   1a87c:	sub	r2, r3, r2
   1a880:	clz	r2, r2
   1a884:	lsr	r2, r2, #5
   1a888:	tst	r2, r1
   1a88c:	asreq	r1, r4, #31
   1a890:	eoreq	r2, r4, r4
   1a894:	eoreq	r0, r0, r1
   1a898:	orrseq	r0, r2, r0
   1a89c:	beq	1a8ec <__assert_fail@plt+0x9330>
   1a8a0:	ldrb	r0, [sp, #325]	; 0x145
   1a8a4:	ldr	r5, [sp, #88]	; 0x58
   1a8a8:	cmp	r0, #0
   1a8ac:	beq	1a8d4 <__assert_fail@plt+0x9318>
   1a8b0:	movw	r1, #12242	; 0x2fd2
   1a8b4:	mov	r0, #0
   1a8b8:	mov	r2, #5
   1a8bc:	movt	r1, #2
   1a8c0:	bl	11328 <dcgettext@plt>
   1a8c4:	movw	r1, #12256	; 0x2fe0
   1a8c8:	movw	r2, #2149	; 0x865
   1a8cc:	movt	r1, #2
   1a8d0:	bl	1823c <__assert_fail@plt+0x6c80>
   1a8d4:	ldr	r6, [fp, #8]
   1a8d8:	ldr	r4, [sp, #80]	; 0x50
   1a8dc:	mov	r7, #0
   1a8e0:	cmp	r5, r6
   1a8e4:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   1a8e8:	b	1b4d0 <__assert_fail@plt+0x9f14>
   1a8ec:	ldr	r5, [fp, #-164]	; 0xffffff5c
   1a8f0:	ldm	r9, {r0, r7}
   1a8f4:	mov	r3, #0
   1a8f8:	mov	r2, #0
   1a8fc:	asr	r1, r5, #31
   1a900:	cmn	r1, #1
   1a904:	movwgt	r3, #1
   1a908:	adds	r5, r5, r0
   1a90c:	adc	r0, r1, r7
   1a910:	mov	r1, #0
   1a914:	cmn	r0, #1
   1a918:	movwgt	r1, #1
   1a91c:	subs	r1, r3, r1
   1a920:	movwne	r1, #1
   1a924:	cmn	r7, #1
   1a928:	movwgt	r2, #1
   1a92c:	sub	r2, r3, r2
   1a930:	clz	r2, r2
   1a934:	lsr	r2, r2, #5
   1a938:	tst	r2, r1
   1a93c:	asreq	r1, r5, #31
   1a940:	eoreq	r2, r5, r5
   1a944:	eoreq	r0, r0, r1
   1a948:	orrseq	r0, r2, r0
   1a94c:	bne	1a8a0 <__assert_fail@plt+0x92e4>
   1a950:	str	r4, [fp, #-160]	; 0xffffff60
   1a954:	str	r6, [fp, #-156]	; 0xffffff64
   1a958:	str	r5, [sp, #92]	; 0x5c
   1a95c:	str	r5, [fp, #-164]	; 0xffffff5c
   1a960:	sub	r2, fp, #220	; 0xdc
   1a964:	sub	ip, fp, #176	; 0xb0
   1a968:	ldm	r2, {r0, r1, r2}
   1a96c:	ldr	r3, [fp, #-188]	; 0xffffff44
   1a970:	stm	ip, {r0, r1, r2}
   1a974:	sub	r1, fp, #176	; 0xb0
   1a978:	str	r3, [fp, #-144]	; 0xffffff70
   1a97c:	ldr	r0, [sp, #88]	; 0x58
   1a980:	bl	1df64 <__assert_fail@plt+0xc9a8>
   1a984:	ldrb	r1, [sp, #325]	; 0x145
   1a988:	cmn	r0, #1
   1a98c:	str	r0, [sp, #96]	; 0x60
   1a990:	beq	1ab54 <__assert_fail@plt+0x9598>
   1a994:	cmp	r1, #0
   1a998:	beq	1ae9c <__assert_fail@plt+0x98e0>
   1a99c:	movw	r1, #12336	; 0x3030
   1a9a0:	mov	r0, #0
   1a9a4:	mov	r2, #5
   1a9a8:	movt	r1, #2
   1a9ac:	bl	11328 <dcgettext@plt>
   1a9b0:	ldr	r7, [r8]
   1a9b4:	ldr	r5, [r8, #4]
   1a9b8:	ldr	r8, [sl]
   1a9bc:	ldr	r1, [sl, #4]
   1a9c0:	ldrd	r2, [r9]
   1a9c4:	str	r8, [sp]
   1a9c8:	stmib	sp, {r1, r2, r3}
   1a9cc:	mov	r2, r7
   1a9d0:	mov	r3, r5
   1a9d4:	bl	1823c <__assert_fail@plt+0x6c80>
   1a9d8:	movw	r1, #12400	; 0x3070
   1a9dc:	mov	r0, #0
   1a9e0:	mov	r2, #5
   1a9e4:	movt	r1, #2
   1a9e8:	bl	11328 <dcgettext@plt>
   1a9ec:	movw	r2, #13503	; 0x34bf
   1a9f0:	str	r0, [sp, #84]	; 0x54
   1a9f4:	mov	r0, #0
   1a9f8:	sub	r3, fp, #176	; 0xb0
   1a9fc:	mov	r1, #100	; 0x64
   1aa00:	str	r0, [sp]
   1aa04:	str	r0, [sp, #4]
   1aa08:	sub	r0, fp, #348	; 0x15c
   1aa0c:	movt	r2, #2
   1aa10:	bl	1f338 <__assert_fail@plt+0xdd7c>
   1aa14:	cmp	r0, #99	; 0x63
   1aa18:	bgt	1acf4 <__assert_fail@plt+0x9738>
   1aa1c:	mov	r8, r0
   1aa20:	ldr	r0, [sp, #320]	; 0x140
   1aa24:	cmp	r0, #0
   1aa28:	beq	1acf4 <__assert_fail@plt+0x9738>
   1aa2c:	ldr	r1, [sp, #168]	; 0xa8
   1aa30:	mov	r0, #43	; 0x2b
   1aa34:	movw	r3, #10471	; 0x28e7
   1aa38:	mov	r2, #27
   1aa3c:	movt	r3, #2
   1aa40:	cmp	r1, #0
   1aa44:	mov	r7, r1
   1aa48:	movwlt	r0, #45	; 0x2d
   1aa4c:	str	r0, [sp]
   1aa50:	movw	r0, #46021	; 0xb3c5
   1aa54:	movt	r0, #37282	; 0x91a2
   1aa58:	smmla	r0, r1, r0, r1
   1aa5c:	asr	r1, r0, #11
   1aa60:	add	r5, r1, r0, lsr #31
   1aa64:	mov	r1, #1
   1aa68:	cmp	r5, #0
   1aa6c:	mov	r0, r5
   1aa70:	rsbmi	r0, r5, #0
   1aa74:	str	r0, [sp, #4]
   1aa78:	add	r0, sp, #100	; 0x64
   1aa7c:	bl	1149c <__sprintf_chk@plt>
   1aa80:	mov	r2, r0
   1aa84:	mov	r0, #3600	; 0xe10
   1aa88:	rsb	r1, r8, #100	; 0x64
   1aa8c:	mls	r3, r5, r0, r7
   1aa90:	sub	r0, fp, #348	; 0x15c
   1aa94:	cmp	r3, #0
   1aa98:	mov	ip, r3
   1aa9c:	add	r0, r0, r8
   1aaa0:	rsbmi	ip, r3, #0
   1aaa4:	cmp	r3, #0
   1aaa8:	beq	1acd4 <__assert_fail@plt+0x9718>
   1aaac:	add	r3, sp, #100	; 0x64
   1aab0:	add	r2, r3, r2
   1aab4:	mov	r3, #58	; 0x3a
   1aab8:	strb	r3, [r2]
   1aabc:	movw	r3, #33205	; 0x81b5
   1aac0:	movt	r3, #6990	; 0x1b4e
   1aac4:	umull	r3, r5, ip, r3
   1aac8:	mov	r3, #48	; 0x30
   1aacc:	add	r3, r3, r5, lsr #6
   1aad0:	movw	r5, #52429	; 0xcccd
   1aad4:	strb	r3, [r2, #1]
   1aad8:	movw	r3, #34953	; 0x8889
   1aadc:	movt	r5, #52428	; 0xcccc
   1aae0:	movt	r3, #34952	; 0x8888
   1aae4:	umull	r3, r7, ip, r3
   1aae8:	lsr	r3, r7, #5
   1aaec:	umull	r8, lr, r3, r5
   1aaf0:	lsr	r5, lr, #3
   1aaf4:	add	r5, r5, r5, lsl #2
   1aaf8:	sub	r5, r3, r5, lsl #1
   1aafc:	lsl	r3, r3, #4
   1ab00:	sub	r3, r3, r7, lsr #5
   1ab04:	orr	r5, r5, #48	; 0x30
   1ab08:	sub	r3, ip, r3, lsl #2
   1ab0c:	strb	r5, [r2, #2]
   1ab10:	cmp	r3, #0
   1ab14:	beq	1acc8 <__assert_fail@plt+0x970c>
   1ab18:	mov	r7, #58	; 0x3a
   1ab1c:	strb	r7, [r2, #3]
   1ab20:	movw	r7, #52429	; 0xcccd
   1ab24:	movt	r7, #52428	; 0xcccc
   1ab28:	umull	r7, r5, r3, r7
   1ab2c:	mov	r7, #48	; 0x30
   1ab30:	orr	r7, r7, r5, lsr #3
   1ab34:	strb	r7, [r2, #4]
   1ab38:	lsr	r7, r5, #3
   1ab3c:	add	r7, r7, r7, lsl #2
   1ab40:	sub	r3, r3, r7, lsl #1
   1ab44:	orr	r3, r3, #48	; 0x30
   1ab48:	strb	r3, [r2, #5]
   1ab4c:	add	r2, r2, #6
   1ab50:	b	1accc <__assert_fail@plt+0x9710>
   1ab54:	ldr	r5, [sp, #88]	; 0x58
   1ab58:	cmp	r1, #0
   1ab5c:	beq	1a8d4 <__assert_fail@plt+0x9318>
   1ab60:	movw	r1, #12273	; 0x2ff1
   1ab64:	mov	r0, #0
   1ab68:	mov	r2, #5
   1ab6c:	mov	r4, #0
   1ab70:	movt	r1, #2
   1ab74:	bl	11328 <dcgettext@plt>
   1ab78:	movw	r2, #13503	; 0x34bf
   1ab7c:	sub	r7, fp, #348	; 0x15c
   1ab80:	mov	r9, r0
   1ab84:	sub	r3, fp, #176	; 0xb0
   1ab88:	mov	r1, #100	; 0x64
   1ab8c:	str	r4, [sp]
   1ab90:	str	r4, [sp, #4]
   1ab94:	movt	r2, #2
   1ab98:	mov	r0, r7
   1ab9c:	bl	1f338 <__assert_fail@plt+0xdd7c>
   1aba0:	cmp	r0, #99	; 0x63
   1aba4:	bgt	1b508 <__assert_fail@plt+0x9f4c>
   1aba8:	mov	r6, r0
   1abac:	ldr	r0, [sp, #320]	; 0x140
   1abb0:	cmp	r0, #0
   1abb4:	beq	1b508 <__assert_fail@plt+0x9f4c>
   1abb8:	ldr	r5, [sp, #168]	; 0xa8
   1abbc:	mov	r0, #43	; 0x2b
   1abc0:	movw	r3, #10471	; 0x28e7
   1abc4:	add	r8, sp, #100	; 0x64
   1abc8:	mov	r2, #27
   1abcc:	movt	r3, #2
   1abd0:	cmp	r5, #0
   1abd4:	movwlt	r0, #45	; 0x2d
   1abd8:	str	r0, [sp]
   1abdc:	movw	r0, #46021	; 0xb3c5
   1abe0:	movt	r0, #37282	; 0x91a2
   1abe4:	smmla	r0, r5, r0, r5
   1abe8:	asr	r1, r0, #11
   1abec:	add	r4, r1, r0, lsr #31
   1abf0:	mov	r1, #1
   1abf4:	cmp	r4, #0
   1abf8:	mov	r0, r4
   1abfc:	rsbmi	r0, r4, #0
   1ac00:	str	r0, [sp, #4]
   1ac04:	mov	r0, r8
   1ac08:	bl	1149c <__sprintf_chk@plt>
   1ac0c:	mov	r2, r0
   1ac10:	mov	r0, #3600	; 0xe10
   1ac14:	rsb	r1, r6, #100	; 0x64
   1ac18:	mls	r3, r4, r0, r5
   1ac1c:	add	r0, r7, r6
   1ac20:	cmp	r3, #0
   1ac24:	mov	r4, r3
   1ac28:	rsbmi	r4, r3, #0
   1ac2c:	cmp	r3, #0
   1ac30:	beq	1b4f0 <__assert_fail@plt+0x9f34>
   1ac34:	movw	r3, #33205	; 0x81b5
   1ac38:	mov	lr, #48	; 0x30
   1ac3c:	add	r2, r8, r2
   1ac40:	mov	ip, #58	; 0x3a
   1ac44:	movw	sl, #52429	; 0xcccd
   1ac48:	movt	r3, #6990	; 0x1b4e
   1ac4c:	strb	ip, [r2]
   1ac50:	movt	sl, #52428	; 0xcccc
   1ac54:	umull	r3, r5, r4, r3
   1ac58:	add	r3, lr, r5, lsr #6
   1ac5c:	strb	r3, [r2, #1]
   1ac60:	movw	r3, #34953	; 0x8889
   1ac64:	movt	r3, #34952	; 0x8888
   1ac68:	umull	r3, r7, r4, r3
   1ac6c:	lsr	r3, r7, #5
   1ac70:	umull	r6, r5, r3, sl
   1ac74:	lsr	r5, r5, #3
   1ac78:	add	r5, r5, r5, lsl #2
   1ac7c:	sub	r5, r3, r5, lsl #1
   1ac80:	lsl	r3, r3, #4
   1ac84:	sub	r3, r3, r7, lsr #5
   1ac88:	orr	r5, r5, #48	; 0x30
   1ac8c:	sub	r3, r4, r3, lsl #2
   1ac90:	strb	r5, [r2, #2]
   1ac94:	cmp	r3, #0
   1ac98:	beq	1b4e4 <__assert_fail@plt+0x9f28>
   1ac9c:	umull	r7, r6, r3, sl
   1aca0:	strb	ip, [r2, #3]
   1aca4:	orr	r7, lr, r6, lsr #3
   1aca8:	strb	r7, [r2, #4]
   1acac:	lsr	r7, r6, #3
   1acb0:	add	r7, r7, r7, lsl #2
   1acb4:	sub	r3, r3, r7, lsl #1
   1acb8:	orr	r3, r3, #48	; 0x30
   1acbc:	strb	r3, [r2, #5]
   1acc0:	add	r2, r2, #6
   1acc4:	b	1b4e8 <__assert_fail@plt+0x9f2c>
   1acc8:	add	r2, r2, #3
   1accc:	mov	r3, #0
   1acd0:	strb	r3, [r2]
   1acd4:	movw	r2, #13529	; 0x34d9
   1acd8:	mvn	r3, #0
   1acdc:	movt	r2, #2
   1ace0:	str	r2, [sp]
   1ace4:	add	r2, sp, #100	; 0x64
   1ace8:	str	r2, [sp, #4]
   1acec:	mov	r2, #1
   1acf0:	bl	115b0 <__snprintf_chk@plt>
   1acf4:	ldr	r0, [sp, #84]	; 0x54
   1acf8:	sub	r1, fp, #348	; 0x15c
   1acfc:	bl	1823c <__assert_fail@plt+0x6c80>
   1ad00:	ldr	r0, [fp, #-188]	; 0xffffff44
   1ad04:	cmn	r0, #1
   1ad08:	ldrne	r1, [fp, #-144]	; 0xffffff70
   1ad0c:	cmpne	r1, r0
   1ad10:	beq	1ad2c <__assert_fail@plt+0x9770>
   1ad14:	movw	r1, #12426	; 0x308a
   1ad18:	mov	r0, #0
   1ad1c:	mov	r2, #5
   1ad20:	movt	r1, #2
   1ad24:	bl	11328 <dcgettext@plt>
   1ad28:	bl	1823c <__assert_fail@plt+0x6c80>
   1ad2c:	ldrd	r0, [r9]
   1ad30:	orrs	r0, r0, r1
   1ad34:	bne	1ae9c <__assert_fail@plt+0x98e0>
   1ad38:	ldr	r0, [fp, #-164]	; 0xffffff5c
   1ad3c:	ldr	r1, [sp, #92]	; 0x5c
   1ad40:	cmp	r0, r1
   1ad44:	bne	1ad60 <__assert_fail@plt+0x97a4>
   1ad48:	ldrd	r0, [sl]
   1ad4c:	orrs	r0, r0, r1
   1ad50:	bne	1ae9c <__assert_fail@plt+0x98e0>
   1ad54:	ldr	r0, [fp, #-160]	; 0xffffff60
   1ad58:	cmp	r0, r4
   1ad5c:	beq	1ae9c <__assert_fail@plt+0x98e0>
   1ad60:	movw	r1, #12487	; 0x30c7
   1ad64:	mov	r0, #0
   1ad68:	mov	r2, #5
   1ad6c:	movt	r1, #2
   1ad70:	bl	11328 <dcgettext@plt>
   1ad74:	bl	1823c <__assert_fail@plt+0x6c80>
   1ad78:	movw	r1, #12546	; 0x3102
   1ad7c:	mov	r0, #0
   1ad80:	mov	r2, #5
   1ad84:	movt	r1, #2
   1ad88:	bl	11328 <dcgettext@plt>
   1ad8c:	str	r0, [sp, #84]	; 0x54
   1ad90:	movw	r0, #34079	; 0x851f
   1ad94:	mov	r5, #100	; 0x64
   1ad98:	mvn	r9, #18
   1ad9c:	movw	r7, #13557	; 0x34f5
   1ada0:	movt	r0, #20971	; 0x51eb
   1ada4:	movt	r7, #2
   1ada8:	smmul	r0, r6, r0
   1adac:	add	sl, r7, #1
   1adb0:	mov	r3, r7
   1adb4:	asr	r1, r0, #5
   1adb8:	add	r0, r1, r0, lsr #31
   1adbc:	mls	r1, r0, r5, r6
   1adc0:	add	r2, r0, #19
   1adc4:	cmp	r1, #0
   1adc8:	rsbmi	r1, r1, #0
   1adcc:	cmn	r6, #2000	; 0x7d0
   1add0:	suble	r2, r9, r0
   1add4:	movw	r0, #63537	; 0xf831
   1add8:	str	r1, [sp, #4]
   1addc:	mov	r1, #1
   1ade0:	movt	r0, #65535	; 0xffff
   1ade4:	str	r2, [sp]
   1ade8:	mov	r2, #13
   1adec:	add	r8, r0, #98	; 0x62
   1adf0:	cmp	r6, r8
   1adf4:	add	r6, sp, #100	; 0x64
   1adf8:	movgt	r3, sl
   1adfc:	mov	r0, r6
   1ae00:	bl	1149c <__sprintf_chk@plt>
   1ae04:	ldr	r0, [sp, #84]	; 0x54
   1ae08:	ldr	r3, [sp, #92]	; 0x5c
   1ae0c:	add	r2, r4, #1
   1ae10:	mov	r1, r6
   1ae14:	bl	1823c <__assert_fail@plt+0x6c80>
   1ae18:	movw	r1, #12581	; 0x3125
   1ae1c:	mov	r0, #0
   1ae20:	mov	r2, #5
   1ae24:	movt	r1, #2
   1ae28:	bl	11328 <dcgettext@plt>
   1ae2c:	mov	r4, r0
   1ae30:	ldr	r0, [fp, #-156]	; 0xffffff64
   1ae34:	movw	r1, #34079	; 0x851f
   1ae38:	movt	r1, #20971	; 0x51eb
   1ae3c:	smmul	r1, r0, r1
   1ae40:	asr	r2, r1, #5
   1ae44:	add	r2, r2, r1, lsr #31
   1ae48:	mls	r1, r2, r5, r0
   1ae4c:	add	r3, r2, #19
   1ae50:	cmp	r1, #0
   1ae54:	rsbmi	r1, r1, #0
   1ae58:	cmn	r0, #2000	; 0x7d0
   1ae5c:	suble	r3, r9, r2
   1ae60:	cmp	r0, r8
   1ae64:	str	r1, [sp, #4]
   1ae68:	mov	r0, r6
   1ae6c:	mov	r1, #1
   1ae70:	mov	r2, #13
   1ae74:	movgt	r7, sl
   1ae78:	str	r3, [sp]
   1ae7c:	mov	r3, r7
   1ae80:	bl	1149c <__sprintf_chk@plt>
   1ae84:	ldr	r0, [fp, #-160]	; 0xffffff60
   1ae88:	ldr	r3, [fp, #-164]	; 0xffffff5c
   1ae8c:	mov	r1, r6
   1ae90:	add	r2, r0, #1
   1ae94:	mov	r0, r4
   1ae98:	bl	1823c <__assert_fail@plt+0x6c80>
   1ae9c:	ldr	ip, [sp, #96]	; 0x60
   1aea0:	ldr	r0, [sp, #320]	; 0x140
   1aea4:	cmp	r0, #0
   1aea8:	beq	1aefc <__assert_fail@plt+0x9940>
   1aeac:	ldr	r0, [fp, #-140]	; 0xffffff74
   1aeb0:	ldr	r2, [sp, #168]	; 0xa8
   1aeb4:	asr	r1, r0, #31
   1aeb8:	subs	r0, r0, r2
   1aebc:	sbc	r1, r1, r2, asr #31
   1aec0:	adds	r9, r0, ip
   1aec4:	adc	r0, r1, ip, asr #31
   1aec8:	teq	r0, r9, asr #31
   1aecc:	beq	1af00 <__assert_fail@plt+0x9944>
   1aed0:	ldrb	r0, [sp, #325]	; 0x145
   1aed4:	ldr	r5, [sp, #88]	; 0x58
   1aed8:	cmp	r0, #0
   1aedc:	beq	1a8d4 <__assert_fail@plt+0x9318>
   1aee0:	movw	r1, #12616	; 0x3148
   1aee4:	mov	r0, #0
   1aee8:	mov	r2, #5
   1aeec:	movt	r1, #2
   1aef0:	bl	11328 <dcgettext@plt>
   1aef4:	ldr	r1, [sp, #168]	; 0xa8
   1aef8:	b	195c0 <__assert_fail@plt+0x8004>
   1aefc:	mov	r9, ip
   1af00:	ldrb	r0, [sp, #325]	; 0x145
   1af04:	cmp	r0, #0
   1af08:	beq	1b0b4 <__assert_fail@plt+0x9af8>
   1af0c:	movw	r1, #12659	; 0x3173
   1af10:	mov	r0, #0
   1af14:	mov	r2, #5
   1af18:	mov	r4, #0
   1af1c:	movt	r1, #2
   1af20:	bl	11328 <dcgettext@plt>
   1af24:	movw	r2, #13503	; 0x34bf
   1af28:	str	r4, [sp]
   1af2c:	str	r4, [sp, #4]
   1af30:	sub	r4, fp, #348	; 0x15c
   1af34:	mov	sl, r0
   1af38:	sub	r3, fp, #176	; 0xb0
   1af3c:	mov	r1, #100	; 0x64
   1af40:	movt	r2, #2
   1af44:	mov	r0, r4
   1af48:	bl	1f338 <__assert_fail@plt+0xdd7c>
   1af4c:	cmp	r0, #99	; 0x63
   1af50:	bgt	1b0a0 <__assert_fail@plt+0x9ae4>
   1af54:	mov	r6, r0
   1af58:	ldr	r0, [sp, #320]	; 0x140
   1af5c:	cmp	r0, #0
   1af60:	beq	1b0a0 <__assert_fail@plt+0x9ae4>
   1af64:	ldr	r5, [sp, #168]	; 0xa8
   1af68:	mov	r0, #43	; 0x2b
   1af6c:	movw	r3, #10471	; 0x28e7
   1af70:	mov	r2, #27
   1af74:	movt	r3, #2
   1af78:	cmp	r5, #0
   1af7c:	movwlt	r0, #45	; 0x2d
   1af80:	str	r0, [sp]
   1af84:	movw	r0, #46021	; 0xb3c5
   1af88:	movt	r0, #37282	; 0x91a2
   1af8c:	smmla	r0, r5, r0, r5
   1af90:	asr	r1, r0, #11
   1af94:	add	r7, r1, r0, lsr #31
   1af98:	mov	r1, #1
   1af9c:	cmp	r7, #0
   1afa0:	mov	r0, r7
   1afa4:	rsbmi	r0, r7, #0
   1afa8:	str	r0, [sp, #4]
   1afac:	add	r0, sp, #100	; 0x64
   1afb0:	bl	1149c <__sprintf_chk@plt>
   1afb4:	mov	r2, r0
   1afb8:	mov	r0, #3600	; 0xe10
   1afbc:	rsb	r1, r6, #100	; 0x64
   1afc0:	mls	r3, r7, r0, r5
   1afc4:	add	r0, r4, r6
   1afc8:	cmp	r3, #0
   1afcc:	mov	r7, r3
   1afd0:	rsbmi	r7, r3, #0
   1afd4:	cmp	r3, #0
   1afd8:	beq	1b080 <__assert_fail@plt+0x9ac4>
   1afdc:	movw	r6, #33205	; 0x81b5
   1afe0:	add	r3, sp, #100	; 0x64
   1afe4:	mov	lr, #48	; 0x30
   1afe8:	mov	ip, #58	; 0x3a
   1afec:	movw	r8, #52429	; 0xcccd
   1aff0:	movt	r6, #6990	; 0x1b4e
   1aff4:	add	r2, r3, r2
   1aff8:	movt	r8, #52428	; 0xcccc
   1affc:	umull	r6, r5, r7, r6
   1b000:	strb	ip, [r2]
   1b004:	add	r5, lr, r5, lsr #6
   1b008:	strb	r5, [r2, #1]
   1b00c:	movw	r5, #34953	; 0x8889
   1b010:	movt	r5, #34952	; 0x8888
   1b014:	umull	r5, r4, r7, r5
   1b018:	lsr	r3, r4, #5
   1b01c:	umull	r6, r5, r3, r8
   1b020:	lsr	r5, r5, #3
   1b024:	add	r5, r5, r5, lsl #2
   1b028:	sub	r5, r3, r5, lsl #1
   1b02c:	lsl	r3, r3, #4
   1b030:	sub	r3, r3, r4, lsr #5
   1b034:	orr	r5, r5, #48	; 0x30
   1b038:	sub	r7, r7, r3, lsl #2
   1b03c:	strb	r5, [r2, #2]
   1b040:	cmp	r7, #0
   1b044:	beq	1b074 <__assert_fail@plt+0x9ab8>
   1b048:	umull	r3, r6, r7, r8
   1b04c:	strb	ip, [r2, #3]
   1b050:	orr	r3, lr, r6, lsr #3
   1b054:	strb	r3, [r2, #4]
   1b058:	lsr	r3, r6, #3
   1b05c:	add	r3, r3, r3, lsl #2
   1b060:	sub	r3, r7, r3, lsl #1
   1b064:	orr	r3, r3, #48	; 0x30
   1b068:	strb	r3, [r2, #5]
   1b06c:	add	r2, r2, #6
   1b070:	b	1b078 <__assert_fail@plt+0x9abc>
   1b074:	add	r2, r2, #3
   1b078:	mov	r3, #0
   1b07c:	strb	r3, [r2]
   1b080:	movw	r2, #13529	; 0x34d9
   1b084:	mvn	r3, #0
   1b088:	movt	r2, #2
   1b08c:	str	r2, [sp]
   1b090:	add	r2, sp, #100	; 0x64
   1b094:	str	r2, [sp, #4]
   1b098:	mov	r2, #1
   1b09c:	bl	115b0 <__snprintf_chk@plt>
   1b0a0:	asr	r3, r9, #31
   1b0a4:	sub	r1, fp, #348	; 0x15c
   1b0a8:	mov	r0, sl
   1b0ac:	mov	r2, r9
   1b0b0:	bl	1823c <__assert_fail@plt+0x6c80>
   1b0b4:	ldr	r8, [sp, #288]	; 0x120
   1b0b8:	ldr	r0, [sp, #236]	; 0xec
   1b0bc:	movw	r7, #51712	; 0xca00
   1b0c0:	ldr	sl, [sp, #264]	; 0x108
   1b0c4:	ldr	r5, [sp, #268]	; 0x10c
   1b0c8:	mov	r3, #0
   1b0cc:	movt	r7, #15258	; 0x3b9a
   1b0d0:	mov	r2, r7
   1b0d4:	asr	r1, r8, #31
   1b0d8:	adds	r6, r8, r0
   1b0dc:	adc	r4, r1, r0, asr #31
   1b0e0:	mov	r0, r6
   1b0e4:	mov	r1, r4
   1b0e8:	bl	20f14 <__assert_fail@plt+0xf958>
   1b0ec:	adds	r0, r2, r7
   1b0f0:	mov	r2, r7
   1b0f4:	adc	r1, r3, #0
   1b0f8:	mov	r3, #0
   1b0fc:	bl	20f14 <__assert_fail@plt+0xf958>
   1b100:	subs	r0, r6, r2
   1b104:	str	r2, [sp, #84]	; 0x54
   1b108:	mov	r3, #0
   1b10c:	sbc	r1, r4, r2, asr #31
   1b110:	mov	r2, r7
   1b114:	bl	20f14 <__assert_fail@plt+0xf958>
   1b118:	cmn	r5, #1
   1b11c:	str	r0, [sp, #92]	; 0x5c
   1b120:	str	r1, [sp, #96]	; 0x60
   1b124:	ble	1b148 <__assert_fail@plt+0x9b8c>
   1b128:	movw	r1, #24175	; 0x5e6f
   1b12c:	movw	r0, #6699	; 0x1a2b
   1b130:	movt	r1, #15437	; 0x3c4d
   1b134:	movt	r0, #9
   1b138:	subs	r1, r1, sl
   1b13c:	sbcs	r0, r0, r5
   1b140:	bge	1b17c <__assert_fail@plt+0x9bc0>
   1b144:	b	1b35c <__assert_fail@plt+0x9da0>
   1b148:	mvn	r1, #0
   1b14c:	eor	r0, sl, r1
   1b150:	eor	r1, r5, r1
   1b154:	orrs	r0, r0, r1
   1b158:	beq	1b17c <__assert_fail@plt+0x9bc0>
   1b15c:	mov	r0, #0
   1b160:	mov	r1, #-2147483648	; 0x80000000
   1b164:	mov	r2, sl
   1b168:	mov	r3, r5
   1b16c:	bl	20f14 <__assert_fail@plt+0xf958>
   1b170:	subs	r0, r0, #3600	; 0xe10
   1b174:	sbcs	r0, r1, #0
   1b178:	blt	1b35c <__assert_fail@plt+0x9da0>
   1b17c:	mov	r0, #3600	; 0xe10
   1b180:	mov	r3, #0
   1b184:	umull	r1, r2, sl, r0
   1b188:	mla	r0, r5, r0, r2
   1b18c:	adds	r4, r9, r1
   1b190:	asr	r2, r9, #31
   1b194:	mov	r1, #0
   1b198:	adc	r6, r2, r0
   1b19c:	cmn	r6, #1
   1b1a0:	movwgt	r3, #1
   1b1a4:	cmn	r2, #1
   1b1a8:	mov	r2, #0
   1b1ac:	movwgt	r2, #1
   1b1b0:	subs	r3, r2, r3
   1b1b4:	movwne	r3, #1
   1b1b8:	cmn	r0, #1
   1b1bc:	movwgt	r1, #1
   1b1c0:	sub	r0, r2, r1
   1b1c4:	clz	r0, r0
   1b1c8:	lsr	r0, r0, #5
   1b1cc:	tst	r0, r3
   1b1d0:	bne	1b35c <__assert_fail@plt+0x9da0>
   1b1d4:	ldr	r9, [sp, #276]	; 0x114
   1b1d8:	ldr	r0, [sp, #272]	; 0x110
   1b1dc:	cmn	r9, #1
   1b1e0:	str	r0, [sp, #76]	; 0x4c
   1b1e4:	ble	1b20c <__assert_fail@plt+0x9c50>
   1b1e8:	ldr	r2, [sp, #76]	; 0x4c
   1b1ec:	movw	r1, #8738	; 0x2222
   1b1f0:	movw	r0, #8738	; 0x2222
   1b1f4:	movt	r1, #8738	; 0x2222
   1b1f8:	movt	r0, #546	; 0x222
   1b1fc:	subs	r1, r1, r2
   1b200:	sbcs	r0, r0, r9
   1b204:	bge	1b244 <__assert_fail@plt+0x9c88>
   1b208:	b	1b35c <__assert_fail@plt+0x9da0>
   1b20c:	ldr	r0, [sp, #76]	; 0x4c
   1b210:	mvn	r1, #0
   1b214:	eor	r0, r0, r1
   1b218:	eor	r1, r9, r1
   1b21c:	orrs	r0, r0, r1
   1b220:	beq	1b244 <__assert_fail@plt+0x9c88>
   1b224:	ldr	r2, [sp, #76]	; 0x4c
   1b228:	mov	r0, #0
   1b22c:	mov	r1, #-2147483648	; 0x80000000
   1b230:	mov	r3, r9
   1b234:	bl	20f14 <__assert_fail@plt+0xf958>
   1b238:	subs	r0, r0, #60	; 0x3c
   1b23c:	sbcs	r0, r1, #0
   1b240:	blt	1b35c <__assert_fail@plt+0x9da0>
   1b244:	ldr	r1, [sp, #76]	; 0x4c
   1b248:	mov	r0, #60	; 0x3c
   1b24c:	rsb	r2, r9, r9, lsl #4
   1b250:	umull	r0, r1, r1, r0
   1b254:	add	r1, r1, r2, lsl #2
   1b258:	adds	r3, r4, r0
   1b25c:	mov	r0, #0
   1b260:	mov	r2, #0
   1b264:	adc	r4, r6, r1
   1b268:	cmn	r4, #1
   1b26c:	movwgt	r0, #1
   1b270:	cmn	r6, #1
   1b274:	mov	r6, #0
   1b278:	movwgt	r6, #1
   1b27c:	subs	r0, r6, r0
   1b280:	movwne	r0, #1
   1b284:	cmn	r1, #1
   1b288:	mov	r1, #0
   1b28c:	movwgt	r1, #1
   1b290:	sub	r1, r6, r1
   1b294:	clz	r1, r1
   1b298:	lsr	r1, r1, #5
   1b29c:	ands	r0, r1, r0
   1b2a0:	bne	1b35c <__assert_fail@plt+0x9da0>
   1b2a4:	ldr	ip, [sp, #280]	; 0x118
   1b2a8:	ldr	r0, [sp, #284]	; 0x11c
   1b2ac:	cmn	r4, #1
   1b2b0:	mov	r6, #0
   1b2b4:	mov	r1, #0
   1b2b8:	movwgt	r6, #1
   1b2bc:	adds	r3, r3, ip
   1b2c0:	adc	r4, r4, r0
   1b2c4:	cmn	r4, #1
   1b2c8:	movwgt	r1, #1
   1b2cc:	subs	r1, r6, r1
   1b2d0:	movwne	r1, #1
   1b2d4:	cmn	r0, #1
   1b2d8:	movwgt	r2, #1
   1b2dc:	sub	r2, r6, r2
   1b2e0:	clz	r2, r2
   1b2e4:	lsr	r2, r2, #5
   1b2e8:	ands	r1, r2, r1
   1b2ec:	bne	1b35c <__assert_fail@plt+0x9da0>
   1b2f0:	ldr	r6, [sp, #92]	; 0x5c
   1b2f4:	cmn	r4, #1
   1b2f8:	mov	r2, #0
   1b2fc:	mov	r1, #0
   1b300:	movwgt	r2, #1
   1b304:	adds	r3, r3, r6
   1b308:	ldr	r6, [sp, #96]	; 0x60
   1b30c:	str	r3, [sp, #92]	; 0x5c
   1b310:	adc	r3, r4, r6
   1b314:	mov	r4, r3
   1b318:	cmn	r3, #1
   1b31c:	mov	r3, #0
   1b320:	movwgt	r3, #1
   1b324:	subs	r3, r2, r3
   1b328:	movwne	r3, #1
   1b32c:	cmn	r6, #1
   1b330:	movwgt	r1, #1
   1b334:	sub	r1, r2, r1
   1b338:	clz	r1, r1
   1b33c:	lsr	r1, r1, #5
   1b340:	tst	r1, r3
   1b344:	ldreq	r2, [sp, #92]	; 0x5c
   1b348:	asreq	r1, r2, #31
   1b34c:	eoreq	r2, r2, r2
   1b350:	eoreq	r1, r4, r1
   1b354:	orrseq	r1, r2, r1
   1b358:	beq	1b39c <__assert_fail@plt+0x9de0>
   1b35c:	ldrb	r0, [sp, #325]	; 0x145
   1b360:	cmp	r0, #0
   1b364:	beq	1b380 <__assert_fail@plt+0x9dc4>
   1b368:	movw	r1, #12686	; 0x318e
   1b36c:	mov	r0, #0
   1b370:	mov	r2, #5
   1b374:	movt	r1, #2
   1b378:	bl	11328 <dcgettext@plt>
   1b37c:	bl	1823c <__assert_fail@plt+0x6c80>
   1b380:	ldr	r6, [fp, #8]
   1b384:	mov	r7, #0
   1b388:	ldr	r4, [sp, #80]	; 0x50
   1b38c:	ldr	r5, [sp, #88]	; 0x58
   1b390:	cmp	r5, r6
   1b394:	bne	1b4c8 <__assert_fail@plt+0x9f0c>
   1b398:	b	1b4d0 <__assert_fail@plt+0x9f14>
   1b39c:	ldr	r1, [sp, #68]	; 0x44
   1b3a0:	ldr	r2, [sp, #92]	; 0x5c
   1b3a4:	str	r2, [r1]
   1b3a8:	ldr	r2, [sp, #84]	; 0x54
   1b3ac:	str	r2, [r1, #4]
   1b3b0:	ldrb	r1, [sp, #325]	; 0x145
   1b3b4:	cmp	r1, #0
   1b3b8:	beq	1b494 <__assert_fail@plt+0x9ed8>
   1b3bc:	ldr	r2, [sp, #76]	; 0x4c
   1b3c0:	orr	r1, sl, r8
   1b3c4:	orr	r1, r1, r2
   1b3c8:	orr	r2, r5, r8, asr #31
   1b3cc:	orr	r2, r2, r9
   1b3d0:	orr	r1, r1, ip
   1b3d4:	orr	r0, r2, r0
   1b3d8:	orrs	r0, r1, r0
   1b3dc:	beq	1b494 <__assert_fail@plt+0x9ed8>
   1b3e0:	add	r0, sp, #144	; 0x90
   1b3e4:	movw	r1, #12734	; 0x31be
   1b3e8:	mov	r2, #5
   1b3ec:	add	r6, r0, #120	; 0x78
   1b3f0:	add	r5, r0, #128	; 0x80
   1b3f4:	add	r7, r0, #136	; 0x88
   1b3f8:	movt	r1, #2
   1b3fc:	mov	r0, #0
   1b400:	bl	11328 <dcgettext@plt>
   1b404:	ldrd	r2, [r6]
   1b408:	ldr	r6, [r5]
   1b40c:	ldr	r5, [r5, #4]
   1b410:	ldrd	r8, [r7]
   1b414:	ldr	r1, [sp, #288]	; 0x120
   1b418:	str	r6, [sp]
   1b41c:	stmib	sp, {r5, r8, r9}
   1b420:	str	r1, [sp, #16]
   1b424:	bl	1823c <__assert_fail@plt+0x6c80>
   1b428:	movw	r1, #12810	; 0x320a
   1b42c:	mov	r0, #0
   1b430:	mov	r2, #5
   1b434:	movt	r1, #2
   1b438:	bl	11328 <dcgettext@plt>
   1b43c:	ldr	r2, [sp, #92]	; 0x5c
   1b440:	mov	r3, r4
   1b444:	bl	1823c <__assert_fail@plt+0x6c80>
   1b448:	ldr	r0, [fp, #-144]	; 0xffffff70
   1b44c:	cmn	r0, #1
   1b450:	beq	1b494 <__assert_fail@plt+0x9ed8>
   1b454:	ldr	r0, [sp, #88]	; 0x58
   1b458:	ldr	r1, [sp, #68]	; 0x44
   1b45c:	add	r2, sp, #100	; 0x64
   1b460:	bl	1dab8 <__assert_fail@plt+0xc4fc>
   1b464:	cmp	r0, #0
   1b468:	beq	1b494 <__assert_fail@plt+0x9ed8>
   1b46c:	ldr	r0, [sp, #132]	; 0x84
   1b470:	ldr	r1, [fp, #-144]	; 0xffffff70
   1b474:	cmp	r1, r0
   1b478:	beq	1b494 <__assert_fail@plt+0x9ed8>
   1b47c:	movw	r1, #12845	; 0x322d
   1b480:	mov	r0, #0
   1b484:	mov	r2, #5
   1b488:	movt	r1, #2
   1b48c:	bl	11328 <dcgettext@plt>
   1b490:	bl	1823c <__assert_fail@plt+0x6c80>
   1b494:	ldr	r6, [fp, #8]
   1b498:	ldr	r4, [sp, #80]	; 0x50
   1b49c:	ldr	r5, [sp, #88]	; 0x58
   1b4a0:	ldr	r7, [sp, #68]	; 0x44
   1b4a4:	mov	r2, r6
   1b4a8:	ldrb	r0, [sp, #325]	; 0x145
   1b4ac:	ldr	r6, [sp, #72]	; 0x48
   1b4b0:	cmp	r0, #0
   1b4b4:	bne	18798 <__assert_fail@plt+0x71dc>
   1b4b8:	mov	r6, r2
   1b4bc:	mov	r7, #1
   1b4c0:	cmp	r5, r6
   1b4c4:	beq	1b4d0 <__assert_fail@plt+0x9f14>
   1b4c8:	mov	r0, r5
   1b4cc:	bl	1da90 <__assert_fail@plt+0xc4d4>
   1b4d0:	mov	r0, r4
   1b4d4:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1b4d8:	mov	r0, r7
   1b4dc:	sub	sp, fp, #28
   1b4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b4e4:	add	r2, r2, #3
   1b4e8:	mov	r3, #0
   1b4ec:	strb	r3, [r2]
   1b4f0:	movw	r2, #13529	; 0x34d9
   1b4f4:	mvn	r3, #0
   1b4f8:	movt	r2, #2
   1b4fc:	stm	sp, {r2, r8}
   1b500:	mov	r2, #1
   1b504:	bl	115b0 <__snprintf_chk@plt>
   1b508:	sub	r1, fp, #348	; 0x15c
   1b50c:	mov	r0, r9
   1b510:	bl	1823c <__assert_fail@plt+0x6c80>
   1b514:	ldr	r5, [sp, #88]	; 0x58
   1b518:	b	1a8d4 <__assert_fail@plt+0x9318>
   1b51c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b520:	add	fp, sp, #24
   1b524:	sub	sp, sp, #8
   1b528:	mov	r6, r0
   1b52c:	movw	r0, #10298	; 0x283a
   1b530:	mov	r8, r2
   1b534:	mov	r5, r1
   1b538:	movt	r0, #2
   1b53c:	bl	113d0 <getenv@plt>
   1b540:	mov	r4, r0
   1b544:	bl	1d9f4 <__assert_fail@plt+0xc438>
   1b548:	cmp	r0, #0
   1b54c:	moveq	r0, #0
   1b550:	subeq	sp, fp, #24
   1b554:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b558:	mov	r7, r0
   1b55c:	stm	sp, {r0, r4}
   1b560:	mov	r0, r6
   1b564:	mov	r1, r5
   1b568:	mov	r2, r8
   1b56c:	mov	r3, #0
   1b570:	bl	182a4 <__assert_fail@plt+0x6ce8>
   1b574:	mov	r4, r0
   1b578:	mov	r0, r7
   1b57c:	bl	1da90 <__assert_fail@plt+0xc4d4>
   1b580:	mov	r0, r4
   1b584:	sub	sp, fp, #24
   1b588:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b58c:	push	{r4, r5, r6, sl, fp, lr}
   1b590:	add	fp, sp, #16
   1b594:	mov	r4, r1
   1b598:	movw	r1, #10776	; 0x2a18
   1b59c:	mov	r5, r0
   1b5a0:	movt	r1, #2
   1b5a4:	mov	r0, r4
   1b5a8:	bl	112a4 <strcmp@plt>
   1b5ac:	cmp	r0, #0
   1b5b0:	beq	1b660 <__assert_fail@plt+0xa0a4>
   1b5b4:	movw	r1, #10780	; 0x2a1c
   1b5b8:	mov	r0, r4
   1b5bc:	movt	r1, #2
   1b5c0:	bl	112a4 <strcmp@plt>
   1b5c4:	movw	r6, #9484	; 0x250c
   1b5c8:	cmp	r0, #0
   1b5cc:	movt	r6, #2
   1b5d0:	addeq	r5, r6, #12
   1b5d4:	moveq	r0, r5
   1b5d8:	popeq	{r4, r5, r6, sl, fp, pc}
   1b5dc:	movw	r1, #11273	; 0x2c09
   1b5e0:	mov	r0, r4
   1b5e4:	movt	r1, #2
   1b5e8:	bl	112a4 <strcmp@plt>
   1b5ec:	cmp	r0, #0
   1b5f0:	addeq	r5, r6, #24
   1b5f4:	moveq	r0, r5
   1b5f8:	popeq	{r4, r5, r6, sl, fp, pc}
   1b5fc:	ldr	r1, [r5, #192]	; 0xc0
   1b600:	cmp	r1, #0
   1b604:	beq	1b628 <__assert_fail@plt+0xa06c>
   1b608:	add	r5, r5, #204	; 0xcc
   1b60c:	mov	r0, r4
   1b610:	bl	112a4 <strcmp@plt>
   1b614:	cmp	r0, #0
   1b618:	beq	1b670 <__assert_fail@plt+0xa0b4>
   1b61c:	ldr	r1, [r5], #12
   1b620:	cmp	r1, #0
   1b624:	bne	1b60c <__assert_fail@plt+0xa050>
   1b628:	movw	r5, #9532	; 0x253c
   1b62c:	movw	r1, #10783	; 0x2a1f
   1b630:	movt	r5, #2
   1b634:	movt	r1, #2
   1b638:	mov	r0, r4
   1b63c:	bl	112a4 <strcmp@plt>
   1b640:	cmp	r0, #0
   1b644:	beq	1b674 <__assert_fail@plt+0xa0b8>
   1b648:	ldr	r1, [r5, #12]!
   1b64c:	cmp	r1, #0
   1b650:	bne	1b638 <__assert_fail@plt+0xa07c>
   1b654:	mov	r5, #0
   1b658:	mov	r0, r5
   1b65c:	pop	{r4, r5, r6, sl, fp, pc}
   1b660:	movw	r5, #9484	; 0x250c
   1b664:	movt	r5, #2
   1b668:	mov	r0, r5
   1b66c:	pop	{r4, r5, r6, sl, fp, pc}
   1b670:	sub	r5, r5, #12
   1b674:	mov	r0, r5
   1b678:	pop	{r4, r5, r6, sl, fp, pc}
   1b67c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b680:	add	fp, sp, #28
   1b684:	sub	sp, sp, #60	; 0x3c
   1b688:	str	r0, [sp, #8]
   1b68c:	mov	r0, r1
   1b690:	mov	r5, r2
   1b694:	mov	r6, r1
   1b698:	bl	1146c <strlen@plt>
   1b69c:	mov	r9, #0
   1b6a0:	mov	r7, r0
   1b6a4:	tst	r5, #4
   1b6a8:	beq	1b6d8 <__assert_fail@plt+0xa11c>
   1b6ac:	mov	r4, r0
   1b6b0:	mov	r0, r6
   1b6b4:	mov	r1, #46	; 0x2e
   1b6b8:	bl	11478 <strchr@plt>
   1b6bc:	cmp	r0, #0
   1b6c0:	beq	1b6d8 <__assert_fail@plt+0xa11c>
   1b6c4:	sub	r7, r0, r6
   1b6c8:	mov	r9, r0
   1b6cc:	sub	r1, r4, r7
   1b6d0:	cmp	r1, #3
   1b6d4:	bne	1b9cc <__assert_fail@plt+0xa410>
   1b6d8:	sub	r0, r7, #8
   1b6dc:	cmp	r0, #4
   1b6e0:	bhi	1b9cc <__assert_fail@plt+0xa410>
   1b6e4:	ands	r0, r7, #1
   1b6e8:	bne	1b9cc <__assert_fail@plt+0xa410>
   1b6ec:	mov	r0, #0
   1b6f0:	ldrb	r1, [r6, r0]
   1b6f4:	sub	r1, r1, #48	; 0x30
   1b6f8:	cmp	r1, #10
   1b6fc:	bcs	1b9cc <__assert_fail@plt+0xa410>
   1b700:	add	r0, r0, #1
   1b704:	cmp	r0, r7
   1b708:	blt	1b6f0 <__assert_fail@plt+0xa134>
   1b70c:	add	r0, r7, r7, lsr #31
   1b710:	cmp	r7, #2
   1b714:	asr	r0, r0, #1
   1b718:	blt	1b74c <__assert_fail@plt+0xa190>
   1b71c:	add	r1, r6, #1
   1b720:	add	r2, sp, #12
   1b724:	mov	r3, r0
   1b728:	ldrb	r7, [r1, #-1]
   1b72c:	ldrb	r6, [r1]
   1b730:	add	r1, r1, #2
   1b734:	subs	r3, r3, #1
   1b738:	add	r7, r7, r7, lsl #2
   1b73c:	add	r7, r6, r7, lsl #1
   1b740:	sub	r7, r7, #528	; 0x210
   1b744:	str	r7, [r2], #4
   1b748:	bne	1b728 <__assert_fail@plt+0xa16c>
   1b74c:	ands	r8, r5, #1
   1b750:	beq	1b75c <__assert_fail@plt+0xa1a0>
   1b754:	add	r1, sp, #12
   1b758:	b	1b7d8 <__assert_fail@plt+0xa21c>
   1b75c:	subs	r4, r0, #4
   1b760:	beq	1b790 <__assert_fail@plt+0xa1d4>
   1b764:	cmp	r0, #6
   1b768:	bne	1b7b4 <__assert_fail@plt+0xa1f8>
   1b76c:	tst	r5, #2
   1b770:	beq	1b9cc <__assert_fail@plt+0xa410>
   1b774:	ldr	r0, [sp, #12]
   1b778:	ldr	r1, [sp, #16]
   1b77c:	mov	r2, #100	; 0x64
   1b780:	mla	r0, r0, r2, r1
   1b784:	movw	r1, #1900	; 0x76c
   1b788:	sub	r6, r0, r1
   1b78c:	b	1b7cc <__assert_fail@plt+0xa210>
   1b790:	mov	r0, #0
   1b794:	bl	11310 <time@plt>
   1b798:	str	r0, [fp, #-32]	; 0xffffffe0
   1b79c:	sub	r0, fp, #32
   1b7a0:	bl	11418 <localtime@plt>
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b9cc <__assert_fail@plt+0xa410>
   1b7ac:	ldr	r6, [r0, #20]
   1b7b0:	b	1b7cc <__assert_fail@plt+0xa210>
   1b7b4:	ldr	r6, [sp, #12]
   1b7b8:	cmp	r6, #68	; 0x44
   1b7bc:	bgt	1b7cc <__assert_fail@plt+0xa210>
   1b7c0:	tst	r5, #8
   1b7c4:	bne	1b9cc <__assert_fail@plt+0xa410>
   1b7c8:	add	r6, r6, #100	; 0x64
   1b7cc:	add	r0, sp, #12
   1b7d0:	add	r1, r0, r4, lsl #2
   1b7d4:	mov	r0, #4
   1b7d8:	ldm	r1, {r7, sl}
   1b7dc:	ldr	r3, [r1, #8]
   1b7e0:	ldr	r4, [r1, #12]
   1b7e4:	cmp	r8, #0
   1b7e8:	beq	1b88c <__assert_fail@plt+0xa2d0>
   1b7ec:	cmp	r0, #4
   1b7f0:	beq	1b830 <__assert_fail@plt+0xa274>
   1b7f4:	cmp	r0, #6
   1b7f8:	bne	1b874 <__assert_fail@plt+0xa2b8>
   1b7fc:	tst	r5, #2
   1b800:	beq	1b9cc <__assert_fail@plt+0xa410>
   1b804:	ldr	r0, [r1, #16]
   1b808:	ldr	r1, [r1, #20]
   1b80c:	mov	r2, #100	; 0x64
   1b810:	mla	r0, r0, r2, r1
   1b814:	movw	r1, #1900	; 0x76c
   1b818:	sub	r6, r0, r1
   1b81c:	mov	r5, #0
   1b820:	cmp	r9, #0
   1b824:	mov	r0, #0
   1b828:	bne	1b89c <__assert_fail@plt+0xa2e0>
   1b82c:	b	1b8c8 <__assert_fail@plt+0xa30c>
   1b830:	mov	r0, #0
   1b834:	mov	r5, r4
   1b838:	mov	r4, r3
   1b83c:	bl	11310 <time@plt>
   1b840:	str	r0, [fp, #-32]	; 0xffffffe0
   1b844:	sub	r0, fp, #32
   1b848:	bl	11418 <localtime@plt>
   1b84c:	cmp	r0, #0
   1b850:	beq	1b9cc <__assert_fail@plt+0xa410>
   1b854:	ldr	r6, [r0, #20]
   1b858:	mov	r3, r4
   1b85c:	mov	r4, r5
   1b860:	mov	r5, #0
   1b864:	cmp	r9, #0
   1b868:	mov	r0, #0
   1b86c:	bne	1b89c <__assert_fail@plt+0xa2e0>
   1b870:	b	1b8c8 <__assert_fail@plt+0xa30c>
   1b874:	ldr	r6, [r1, #16]
   1b878:	cmp	r6, #68	; 0x44
   1b87c:	bgt	1b88c <__assert_fail@plt+0xa2d0>
   1b880:	tst	r5, #8
   1b884:	bne	1b9cc <__assert_fail@plt+0xa410>
   1b888:	add	r6, r6, #100	; 0x64
   1b88c:	mov	r5, #0
   1b890:	cmp	r9, #0
   1b894:	mov	r0, #0
   1b898:	beq	1b8c8 <__assert_fail@plt+0xa30c>
   1b89c:	ldrb	r0, [r9, #1]
   1b8a0:	sub	r1, r0, #48	; 0x30
   1b8a4:	cmp	r1, #9
   1b8a8:	bhi	1b9cc <__assert_fail@plt+0xa410>
   1b8ac:	ldrb	r1, [r9, #2]
   1b8b0:	sub	r2, r1, #48	; 0x30
   1b8b4:	cmp	r2, #9
   1b8b8:	bhi	1b9cc <__assert_fail@plt+0xa410>
   1b8bc:	add	r0, r0, r0, lsl #2
   1b8c0:	add	r0, r1, r0, lsl #1
   1b8c4:	sub	r0, r0, #528	; 0x210
   1b8c8:	str	r4, [sp, #16]
   1b8cc:	str	r0, [sp, #12]
   1b8d0:	str	r0, [sp, #4]
   1b8d4:	sub	r7, r7, #1
   1b8d8:	mvn	r0, #0
   1b8dc:	str	r3, [sp, #20]
   1b8e0:	str	sl, [sp, #24]
   1b8e4:	mov	r8, sl
   1b8e8:	mov	sl, r3
   1b8ec:	mov	r9, r4
   1b8f0:	str	r7, [sp, #28]
   1b8f4:	str	r6, [sp, #32]
   1b8f8:	str	r0, [sp, #36]	; 0x24
   1b8fc:	str	r0, [sp, #44]	; 0x2c
   1b900:	add	r0, sp, #12
   1b904:	bl	112bc <mktime@plt>
   1b908:	ldr	r1, [sp, #36]	; 0x24
   1b90c:	cmp	r1, #0
   1b910:	blt	1b9d0 <__assert_fail@plt+0xa414>
   1b914:	mov	ip, #0
   1b918:	ldr	r2, [sp, #32]
   1b91c:	ldr	r3, [sp, #28]
   1b920:	mov	r4, r6
   1b924:	ldr	r1, [sp, #20]
   1b928:	ldr	r5, [sp, #16]
   1b92c:	eor	r2, r2, r6
   1b930:	eor	r3, r3, r7
   1b934:	mov	r6, r7
   1b938:	ldr	r7, [sp, #24]
   1b93c:	orr	r2, r3, r2
   1b940:	ldr	r3, [sp, #12]
   1b944:	eor	r7, r7, r8
   1b948:	orr	r2, r2, r7
   1b94c:	eor	r7, r1, sl
   1b950:	ldr	r1, [sp, #4]
   1b954:	orr	r2, r2, r7
   1b958:	eor	r7, r5, r9
   1b95c:	orr	r2, r2, r7
   1b960:	eor	r3, r3, r1
   1b964:	orrs	r2, r2, r3
   1b968:	beq	1b9dc <__assert_fail@plt+0xa420>
   1b96c:	mov	r5, #0
   1b970:	cmp	r1, #60	; 0x3c
   1b974:	bne	1b9d0 <__assert_fail@plt+0xa414>
   1b978:	mov	r0, #59	; 0x3b
   1b97c:	mov	r1, #59	; 0x3b
   1b980:	str	r9, [sp, #16]
   1b984:	mov	r7, r6
   1b988:	str	r0, [sp, #4]
   1b98c:	mvn	r0, #0
   1b990:	str	r1, [sp, #12]
   1b994:	str	sl, [sp, #20]
   1b998:	str	r8, [sp, #24]
   1b99c:	str	r6, [sp, #28]
   1b9a0:	str	r4, [sp, #32]
   1b9a4:	mov	r6, r4
   1b9a8:	str	r0, [sp, #36]	; 0x24
   1b9ac:	str	r0, [sp, #44]	; 0x2c
   1b9b0:	add	r0, sp, #12
   1b9b4:	bl	112bc <mktime@plt>
   1b9b8:	ldr	r2, [sp, #36]	; 0x24
   1b9bc:	mov	ip, #1
   1b9c0:	cmp	r2, #0
   1b9c4:	bge	1b918 <__assert_fail@plt+0xa35c>
   1b9c8:	b	1b9d0 <__assert_fail@plt+0xa414>
   1b9cc:	mov	r5, #0
   1b9d0:	mov	r0, r5
   1b9d4:	sub	sp, fp, #28
   1b9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9dc:	adds	r0, r0, ip
   1b9e0:	mov	r5, #0
   1b9e4:	ldrvc	r1, [sp, #8]
   1b9e8:	movvc	r5, #1
   1b9ec:	strvc	r0, [r1]
   1b9f0:	mov	r0, r5
   1b9f4:	sub	sp, fp, #28
   1b9f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b9fc:	push	{r4, sl, fp, lr}
   1ba00:	add	fp, sp, #8
   1ba04:	sub	sp, sp, #8
   1ba08:	movw	r0, #13567	; 0x34ff
   1ba0c:	movt	r0, #2
   1ba10:	bl	113d0 <getenv@plt>
   1ba14:	cmp	r0, #0
   1ba18:	movw	r4, #4201	; 0x1069
   1ba1c:	ldrbne	r1, [r0]
   1ba20:	movt	r4, #3
   1ba24:	cmpne	r1, #0
   1ba28:	bne	1ba38 <__assert_fail@plt+0xa47c>
   1ba2c:	mov	r0, r4
   1ba30:	sub	sp, fp, #8
   1ba34:	pop	{r4, sl, fp, pc}
   1ba38:	add	r1, sp, #4
   1ba3c:	mov	r2, #10
   1ba40:	bl	112b0 <strtol@plt>
   1ba44:	ldr	r1, [sp, #4]
   1ba48:	ldrb	r1, [r1]
   1ba4c:	cmp	r1, #0
   1ba50:	moveq	r4, r0
   1ba54:	mov	r0, r4
   1ba58:	sub	sp, fp, #8
   1ba5c:	pop	{r4, sl, fp, pc}
   1ba60:	push	{r4, r5, fp, lr}
   1ba64:	add	fp, sp, #8
   1ba68:	cmp	r0, #0
   1ba6c:	beq	1bb00 <__assert_fail@plt+0xa544>
   1ba70:	mov	r1, #47	; 0x2f
   1ba74:	mov	r4, r0
   1ba78:	bl	11514 <strrchr@plt>
   1ba7c:	cmp	r0, #0
   1ba80:	mov	r5, r4
   1ba84:	addne	r5, r0, #1
   1ba88:	sub	r0, r5, r4
   1ba8c:	cmp	r0, #7
   1ba90:	blt	1bae4 <__assert_fail@plt+0xa528>
   1ba94:	movw	r1, #13639	; 0x3547
   1ba98:	sub	r0, r5, #7
   1ba9c:	mov	r2, #7
   1baa0:	movt	r1, #2
   1baa4:	bl	11580 <strncmp@plt>
   1baa8:	cmp	r0, #0
   1baac:	bne	1bae4 <__assert_fail@plt+0xa528>
   1bab0:	movw	r1, #13647	; 0x354f
   1bab4:	mov	r0, r5
   1bab8:	mov	r2, #3
   1babc:	movt	r1, #2
   1bac0:	bl	11580 <strncmp@plt>
   1bac4:	cmp	r0, #0
   1bac8:	beq	1bad4 <__assert_fail@plt+0xa518>
   1bacc:	mov	r4, r5
   1bad0:	b	1bae4 <__assert_fail@plt+0xa528>
   1bad4:	movw	r0, #16784	; 0x4190
   1bad8:	add	r4, r5, #3
   1badc:	movt	r0, #3
   1bae0:	str	r4, [r0]
   1bae4:	movw	r0, #16788	; 0x4194
   1bae8:	movt	r0, #3
   1baec:	str	r4, [r0]
   1baf0:	movw	r0, #16856	; 0x41d8
   1baf4:	movt	r0, #3
   1baf8:	str	r4, [r0]
   1bafc:	pop	{r4, r5, fp, pc}
   1bb00:	movw	r0, #16800	; 0x41a0
   1bb04:	mov	r1, #55	; 0x37
   1bb08:	mov	r2, #1
   1bb0c:	movt	r0, #3
   1bb10:	ldr	r3, [r0]
   1bb14:	movw	r0, #13583	; 0x350f
   1bb18:	movt	r0, #2
   1bb1c:	bl	1137c <fwrite@plt>
   1bb20:	bl	1158c <abort@plt>
   1bb24:	push	{r4, r5, r6, sl, fp, lr}
   1bb28:	add	fp, sp, #16
   1bb2c:	mov	r4, r0
   1bb30:	movw	r0, #16864	; 0x41e0
   1bb34:	movt	r0, #3
   1bb38:	cmp	r4, #0
   1bb3c:	moveq	r4, r0
   1bb40:	bl	11490 <__errno_location@plt>
   1bb44:	ldr	r6, [r0]
   1bb48:	mov	r5, r0
   1bb4c:	mov	r0, r4
   1bb50:	mov	r1, #48	; 0x30
   1bb54:	bl	1ee30 <__assert_fail@plt+0xd874>
   1bb58:	str	r6, [r5]
   1bb5c:	pop	{r4, r5, r6, sl, fp, pc}
   1bb60:	movw	r1, #16864	; 0x41e0
   1bb64:	cmp	r0, #0
   1bb68:	movt	r1, #3
   1bb6c:	movne	r1, r0
   1bb70:	ldr	r0, [r1]
   1bb74:	bx	lr
   1bb78:	movw	r2, #16864	; 0x41e0
   1bb7c:	cmp	r0, #0
   1bb80:	movt	r2, #3
   1bb84:	movne	r2, r0
   1bb88:	str	r1, [r2]
   1bb8c:	bx	lr
   1bb90:	movw	r3, #16864	; 0x41e0
   1bb94:	cmp	r0, #0
   1bb98:	movt	r3, #3
   1bb9c:	movne	r3, r0
   1bba0:	ubfx	r0, r1, #5, #3
   1bba4:	and	r1, r1, #31
   1bba8:	add	r0, r3, r0, lsl #2
   1bbac:	ldr	r3, [r0, #8]
   1bbb0:	eor	r2, r2, r3, lsr r1
   1bbb4:	and	r2, r2, #1
   1bbb8:	eor	r2, r3, r2, lsl r1
   1bbbc:	str	r2, [r0, #8]
   1bbc0:	mov	r0, #1
   1bbc4:	and	r0, r0, r3, lsr r1
   1bbc8:	bx	lr
   1bbcc:	movw	r2, #16864	; 0x41e0
   1bbd0:	cmp	r0, #0
   1bbd4:	movt	r2, #3
   1bbd8:	movne	r2, r0
   1bbdc:	ldr	r0, [r2, #4]
   1bbe0:	str	r1, [r2, #4]
   1bbe4:	bx	lr
   1bbe8:	movw	r3, #16864	; 0x41e0
   1bbec:	cmp	r0, #0
   1bbf0:	movt	r3, #3
   1bbf4:	movne	r3, r0
   1bbf8:	cmp	r1, #0
   1bbfc:	mov	r0, #10
   1bc00:	cmpne	r2, #0
   1bc04:	str	r0, [r3]
   1bc08:	bne	1bc18 <__assert_fail@plt+0xa65c>
   1bc0c:	push	{fp, lr}
   1bc10:	mov	fp, sp
   1bc14:	bl	1158c <abort@plt>
   1bc18:	str	r1, [r3, #40]	; 0x28
   1bc1c:	str	r2, [r3, #44]	; 0x2c
   1bc20:	bx	lr
   1bc24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc28:	add	fp, sp, #28
   1bc2c:	sub	sp, sp, #20
   1bc30:	mov	r7, r0
   1bc34:	ldr	r0, [fp, #8]
   1bc38:	movw	r5, #16864	; 0x41e0
   1bc3c:	mov	r8, r3
   1bc40:	mov	r9, r2
   1bc44:	mov	sl, r1
   1bc48:	movt	r5, #3
   1bc4c:	cmp	r0, #0
   1bc50:	movne	r5, r0
   1bc54:	bl	11490 <__errno_location@plt>
   1bc58:	mov	r4, r0
   1bc5c:	ldm	r5, {r0, r1}
   1bc60:	ldr	r2, [r5, #40]	; 0x28
   1bc64:	ldr	r3, [r5, #44]	; 0x2c
   1bc68:	add	r5, r5, #8
   1bc6c:	ldr	r6, [r4]
   1bc70:	stm	sp, {r0, r1, r5}
   1bc74:	str	r2, [sp, #12]
   1bc78:	str	r3, [sp, #16]
   1bc7c:	mov	r0, r7
   1bc80:	mov	r1, sl
   1bc84:	mov	r2, r9
   1bc88:	mov	r3, r8
   1bc8c:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1bc90:	str	r6, [r4]
   1bc94:	sub	sp, fp, #28
   1bc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bca0:	add	fp, sp, #28
   1bca4:	sub	sp, sp, #156	; 0x9c
   1bca8:	str	r0, [sp, #76]	; 0x4c
   1bcac:	ldr	r0, [fp, #12]
   1bcb0:	mov	r6, r1
   1bcb4:	str	r3, [sp, #84]	; 0x54
   1bcb8:	str	r2, [fp, #-84]	; 0xffffffac
   1bcbc:	and	r1, r0, #4
   1bcc0:	str	r1, [sp, #24]
   1bcc4:	and	r1, r0, #1
   1bcc8:	str	r1, [sp, #28]
   1bccc:	ubfx	r8, r0, #1, #1
   1bcd0:	bl	11394 <__ctype_get_mb_cur_max@plt>
   1bcd4:	str	r0, [sp, #32]
   1bcd8:	ldr	r0, [fp, #24]
   1bcdc:	ldr	r7, [fp, #8]
   1bce0:	mov	r1, #0
   1bce4:	mov	r2, #0
   1bce8:	mov	r4, #1
   1bcec:	str	r1, [sp, #52]	; 0x34
   1bcf0:	str	r0, [sp, #72]	; 0x48
   1bcf4:	ldr	r0, [fp, #20]
   1bcf8:	str	r0, [sp, #68]	; 0x44
   1bcfc:	mov	r0, #0
   1bd00:	str	r0, [sp, #48]	; 0x30
   1bd04:	mov	r0, #0
   1bd08:	str	r0, [sp, #92]	; 0x5c
   1bd0c:	mov	r0, #0
   1bd10:	str	r0, [fp, #-76]	; 0xffffffb4
   1bd14:	mov	r0, #0
   1bd18:	cmp	r7, #10
   1bd1c:	bhi	1d004 <__assert_fail@plt+0xba48>
   1bd20:	add	r1, pc, #28
   1bd24:	mov	sl, r6
   1bd28:	ldr	r6, [sp, #76]	; 0x4c
   1bd2c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1bd30:	ldr	lr, [sp, #84]	; 0x54
   1bd34:	mov	r9, #0
   1bd38:	mov	r3, #1
   1bd3c:	mov	r5, #0
   1bd40:	ldr	pc, [r1, r7, lsl #2]
   1bd44:	andeq	fp, r1, r4, lsl lr
   1bd48:	andeq	fp, r1, r0, asr lr
   1bd4c:	andeq	fp, r1, r4, lsr #28
   1bd50:	andeq	fp, r1, ip, lsl #28
   1bd54:	andeq	fp, r1, r4, asr #28
   1bd58:	andeq	fp, r1, r8, ror lr
   1bd5c:	andeq	fp, r1, r4, lsr lr
   1bd60:	andeq	ip, r1, r4, lsl #1
   1bd64:	andeq	fp, r1, r0, ror sp
   1bd68:	andeq	fp, r1, r0, ror sp
   1bd6c:	andeq	ip, r1, r8, lsl r0
   1bd70:	mov	r9, r4
   1bd74:	movw	r4, #13727	; 0x359f
   1bd78:	mov	r5, r8
   1bd7c:	mov	r8, r2
   1bd80:	mov	r0, #0
   1bd84:	mov	r2, #5
   1bd88:	movt	r4, #2
   1bd8c:	mov	r1, r4
   1bd90:	bl	11328 <dcgettext@plt>
   1bd94:	cmp	r0, r4
   1bd98:	str	r0, [sp, #68]	; 0x44
   1bd9c:	bne	1bf2c <__assert_fail@plt+0xa970>
   1bda0:	bl	1f2a0 <__assert_fail@plt+0xdce4>
   1bda4:	ldrb	r1, [r0]
   1bda8:	and	r1, r1, #223	; 0xdf
   1bdac:	cmp	r1, #71	; 0x47
   1bdb0:	beq	1bef8 <__assert_fail@plt+0xa93c>
   1bdb4:	cmp	r1, #85	; 0x55
   1bdb8:	bne	1bf10 <__assert_fail@plt+0xa954>
   1bdbc:	ldrb	r1, [r0, #1]
   1bdc0:	and	r1, r1, #223	; 0xdf
   1bdc4:	cmp	r1, #84	; 0x54
   1bdc8:	bne	1bf10 <__assert_fail@plt+0xa954>
   1bdcc:	ldrb	r1, [r0, #2]
   1bdd0:	and	r1, r1, #223	; 0xdf
   1bdd4:	cmp	r1, #70	; 0x46
   1bdd8:	bne	1bf10 <__assert_fail@plt+0xa954>
   1bddc:	ldrb	r1, [r0, #3]
   1bde0:	cmp	r1, #45	; 0x2d
   1bde4:	ldrbeq	r1, [r0, #4]
   1bde8:	cmpeq	r1, #56	; 0x38
   1bdec:	bne	1bf10 <__assert_fail@plt+0xa954>
   1bdf0:	ldrb	r0, [r0, #5]
   1bdf4:	cmp	r0, #0
   1bdf8:	movw	r0, #13729	; 0x35a1
   1bdfc:	movt	r0, #2
   1be00:	str	r0, [sp, #68]	; 0x44
   1be04:	bne	1bf10 <__assert_fail@plt+0xa954>
   1be08:	b	1bf2c <__assert_fail@plt+0xa970>
   1be0c:	mov	r0, #1
   1be10:	b	1be50 <__assert_fail@plt+0xa894>
   1be14:	mov	r7, #0
   1be18:	mov	r9, #0
   1be1c:	mov	r3, r0
   1be20:	b	1bef0 <__assert_fail@plt+0xa934>
   1be24:	tst	r8, #1
   1be28:	bne	1be50 <__assert_fail@plt+0xa894>
   1be2c:	mov	r3, r0
   1be30:	b	1bea8 <__assert_fail@plt+0xa8ec>
   1be34:	mov	r0, #1
   1be38:	mov	r9, #0
   1be3c:	mov	r7, #5
   1be40:	b	1be8c <__assert_fail@plt+0xa8d0>
   1be44:	mov	r3, #1
   1be48:	tst	r8, #1
   1be4c:	beq	1bea8 <__assert_fail@plt+0xa8ec>
   1be50:	mov	r1, #1
   1be54:	mov	r9, #0
   1be58:	mov	r7, #2
   1be5c:	mov	r3, r0
   1be60:	mov	r5, #1
   1be64:	str	r1, [fp, #-76]	; 0xffffffb4
   1be68:	movw	r1, #6245	; 0x1865
   1be6c:	movt	r1, #2
   1be70:	str	r1, [sp, #92]	; 0x5c
   1be74:	b	1c084 <__assert_fail@plt+0xaac8>
   1be78:	mov	r7, #5
   1be7c:	tst	r8, #1
   1be80:	beq	1bec8 <__assert_fail@plt+0xa90c>
   1be84:	mov	r0, #1
   1be88:	mov	r9, #0
   1be8c:	str	r0, [fp, #-76]	; 0xffffffb4
   1be90:	movw	r0, #11170	; 0x2ba2
   1be94:	mov	r3, #1
   1be98:	mov	r5, #1
   1be9c:	movt	r0, #2
   1bea0:	str	r0, [sp, #92]	; 0x5c
   1bea4:	b	1c084 <__assert_fail@plt+0xaac8>
   1bea8:	cmp	sl, #0
   1beac:	mov	r9, #1
   1beb0:	mov	r7, #2
   1beb4:	movne	r0, #39	; 0x27
   1beb8:	strbne	r0, [r6]
   1bebc:	movw	r0, #6245	; 0x1865
   1bec0:	movt	r0, #2
   1bec4:	b	1bee4 <__assert_fail@plt+0xa928>
   1bec8:	cmp	sl, #0
   1becc:	mov	r9, #1
   1bed0:	mov	r3, #1
   1bed4:	movne	r0, #34	; 0x22
   1bed8:	strbne	r0, [r6]
   1bedc:	movw	r0, #11170	; 0x2ba2
   1bee0:	movt	r0, #2
   1bee4:	str	r0, [sp, #92]	; 0x5c
   1bee8:	mov	r0, #1
   1beec:	str	r0, [fp, #-76]	; 0xffffffb4
   1bef0:	mov	r5, #0
   1bef4:	b	1c084 <__assert_fail@plt+0xaac8>
   1bef8:	ldrb	r1, [r0, #1]
   1befc:	and	r1, r1, #223	; 0xdf
   1bf00:	cmp	r1, #66	; 0x42
   1bf04:	ldrbeq	r1, [r0, #2]
   1bf08:	cmpeq	r1, #49	; 0x31
   1bf0c:	beq	1ce2c <__assert_fail@plt+0xb870>
   1bf10:	movw	r0, #6245	; 0x1865
   1bf14:	movw	r1, #11170	; 0x2ba2
   1bf18:	cmp	r7, #9
   1bf1c:	movt	r0, #2
   1bf20:	movt	r1, #2
   1bf24:	moveq	r0, r1
   1bf28:	str	r0, [sp, #68]	; 0x44
   1bf2c:	movw	r4, #6245	; 0x1865
   1bf30:	mov	r0, #0
   1bf34:	mov	r2, #5
   1bf38:	movt	r4, #2
   1bf3c:	mov	r1, r4
   1bf40:	bl	11328 <dcgettext@plt>
   1bf44:	cmp	r0, r4
   1bf48:	str	r0, [sp, #72]	; 0x48
   1bf4c:	beq	1bf5c <__assert_fail@plt+0xa9a0>
   1bf50:	mov	r4, r9
   1bf54:	mov	r2, r8
   1bf58:	b	1c014 <__assert_fail@plt+0xaa58>
   1bf5c:	bl	1f2a0 <__assert_fail@plt+0xdce4>
   1bf60:	ldrb	r1, [r0]
   1bf64:	mov	r4, r9
   1bf68:	and	r1, r1, #223	; 0xdf
   1bf6c:	cmp	r1, #71	; 0x47
   1bf70:	beq	1bfcc <__assert_fail@plt+0xaa10>
   1bf74:	cmp	r1, #85	; 0x55
   1bf78:	mov	r2, r8
   1bf7c:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1bf80:	ldrb	r1, [r0, #1]
   1bf84:	and	r1, r1, #223	; 0xdf
   1bf88:	cmp	r1, #84	; 0x54
   1bf8c:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1bf90:	ldrb	r1, [r0, #2]
   1bf94:	and	r1, r1, #223	; 0xdf
   1bf98:	cmp	r1, #70	; 0x46
   1bf9c:	ldrbeq	r1, [r0, #3]
   1bfa0:	cmpeq	r1, #45	; 0x2d
   1bfa4:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1bfa8:	ldrb	r1, [r0, #4]
   1bfac:	cmp	r1, #56	; 0x38
   1bfb0:	ldrbeq	r0, [r0, #5]
   1bfb4:	cmpeq	r0, #0
   1bfb8:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1bfbc:	movw	r0, #13733	; 0x35a5
   1bfc0:	movt	r0, #2
   1bfc4:	str	r0, [sp, #72]	; 0x48
   1bfc8:	b	1c014 <__assert_fail@plt+0xaa58>
   1bfcc:	ldrb	r1, [r0, #1]
   1bfd0:	mov	r2, r8
   1bfd4:	and	r1, r1, #223	; 0xdf
   1bfd8:	cmp	r1, #66	; 0x42
   1bfdc:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1bfe0:	ldrb	r1, [r0, #2]
   1bfe4:	cmp	r1, #49	; 0x31
   1bfe8:	ldrbeq	r1, [r0, #3]
   1bfec:	cmpeq	r1, #56	; 0x38
   1bff0:	beq	1ce70 <__assert_fail@plt+0xb8b4>
   1bff4:	movw	r0, #6245	; 0x1865
   1bff8:	cmp	r7, #9
   1bffc:	movt	r0, #2
   1c000:	mov	r1, r0
   1c004:	movw	r0, #11170	; 0x2ba2
   1c008:	movt	r0, #2
   1c00c:	moveq	r1, r0
   1c010:	str	r1, [sp, #72]	; 0x48
   1c014:	mov	r8, r5
   1c018:	mov	r9, #0
   1c01c:	tst	r8, #1
   1c020:	mov	r5, r8
   1c024:	str	r2, [fp, #-48]	; 0xffffffd0
   1c028:	bne	1c060 <__assert_fail@plt+0xaaa4>
   1c02c:	ldr	r0, [sp, #68]	; 0x44
   1c030:	ldrb	r0, [r0]
   1c034:	cmp	r0, #0
   1c038:	beq	1c060 <__assert_fail@plt+0xaaa4>
   1c03c:	ldr	r1, [sp, #68]	; 0x44
   1c040:	mov	r9, #0
   1c044:	add	r1, r1, #1
   1c048:	cmp	r9, sl
   1c04c:	strbcc	r0, [r6, r9]
   1c050:	ldrb	r0, [r1, r9]
   1c054:	add	r9, r9, #1
   1c058:	cmp	r0, #0
   1c05c:	bne	1c048 <__assert_fail@plt+0xaa8c>
   1c060:	ldr	r8, [sp, #72]	; 0x48
   1c064:	mov	r0, r8
   1c068:	bl	1146c <strlen@plt>
   1c06c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c070:	ldr	lr, [sp, #84]	; 0x54
   1c074:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c078:	str	r0, [fp, #-76]	; 0xffffffb4
   1c07c:	str	r8, [sp, #92]	; 0x5c
   1c080:	mov	r3, #1
   1c084:	ldr	r0, [fp, #16]
   1c088:	str	r7, [fp, #-64]	; 0xffffffc0
   1c08c:	str	r5, [fp, #-72]	; 0xffffffb8
   1c090:	str	r3, [sp, #80]	; 0x50
   1c094:	cmp	r0, #0
   1c098:	movwne	r0, #1
   1c09c:	and	r0, r0, r5
   1c0a0:	str	r0, [fp, #-88]	; 0xffffffa8
   1c0a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1c0a8:	cmp	r0, #0
   1c0ac:	movwne	r0, #1
   1c0b0:	subs	r7, r7, #2
   1c0b4:	and	r1, r0, r5
   1c0b8:	str	r7, [fp, #-80]	; 0xffffffb0
   1c0bc:	and	r1, r3, r1
   1c0c0:	str	r1, [sp, #40]	; 0x28
   1c0c4:	clz	r1, r7
   1c0c8:	lsr	r1, r1, #5
   1c0cc:	and	r1, r1, r5
   1c0d0:	eor	r5, r5, #1
   1c0d4:	str	r1, [sp, #36]	; 0x24
   1c0d8:	mov	r1, r7
   1c0dc:	str	r5, [sp, #88]	; 0x58
   1c0e0:	mov	r7, #0
   1c0e4:	movwne	r1, #1
   1c0e8:	orr	r5, r1, r5
   1c0ec:	and	r1, r1, r3
   1c0f0:	and	r0, r0, r1
   1c0f4:	str	r5, [sp, #60]	; 0x3c
   1c0f8:	str	r1, [fp, #-68]	; 0xffffffbc
   1c0fc:	str	r0, [fp, #-60]	; 0xffffffc4
   1c100:	eor	r0, r3, #1
   1c104:	str	r0, [sp, #44]	; 0x2c
   1c108:	cmn	lr, #1
   1c10c:	beq	1c11c <__assert_fail@plt+0xab60>
   1c110:	cmp	r7, lr
   1c114:	bne	1c128 <__assert_fail@plt+0xab6c>
   1c118:	b	1cda0 <__assert_fail@plt+0xb7e4>
   1c11c:	ldrb	r0, [ip, r7]
   1c120:	cmp	r0, #0
   1c124:	beq	1cda8 <__assert_fail@plt+0xb7ec>
   1c128:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1c12c:	mov	r8, #0
   1c130:	str	r4, [fp, #-52]	; 0xffffffcc
   1c134:	str	r2, [fp, #-48]	; 0xffffffd0
   1c138:	cmp	r0, #0
   1c13c:	beq	1c170 <__assert_fail@plt+0xabb4>
   1c140:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1c144:	add	r4, r7, r0
   1c148:	cmp	r0, #2
   1c14c:	bcc	1c168 <__assert_fail@plt+0xabac>
   1c150:	cmn	lr, #1
   1c154:	bne	1c168 <__assert_fail@plt+0xabac>
   1c158:	mov	r0, ip
   1c15c:	bl	1146c <strlen@plt>
   1c160:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c164:	mov	lr, r0
   1c168:	cmp	r4, lr
   1c16c:	bls	1c188 <__assert_fail@plt+0xabcc>
   1c170:	mov	r0, #0
   1c174:	str	r0, [fp, #-56]	; 0xffffffc8
   1c178:	ldrb	r5, [ip, r7]
   1c17c:	cmp	r5, #126	; 0x7e
   1c180:	bls	1c1d8 <__assert_fail@plt+0xac1c>
   1c184:	b	1c5e0 <__assert_fail@plt+0xb024>
   1c188:	ldr	r1, [sp, #92]	; 0x5c
   1c18c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1c190:	add	r0, ip, r7
   1c194:	mov	r4, lr
   1c198:	bl	1131c <memcmp@plt>
   1c19c:	ldr	r2, [sp, #88]	; 0x58
   1c1a0:	cmp	r0, #0
   1c1a4:	mov	r1, r0
   1c1a8:	movwne	r1, #1
   1c1ac:	orr	r1, r1, r2
   1c1b0:	tst	r1, #1
   1c1b4:	beq	1ceb4 <__assert_fail@plt+0xb8f8>
   1c1b8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c1bc:	clz	r0, r0
   1c1c0:	mov	lr, r4
   1c1c4:	lsr	r0, r0, #5
   1c1c8:	str	r0, [fp, #-56]	; 0xffffffc8
   1c1cc:	ldrb	r5, [ip, r7]
   1c1d0:	cmp	r5, #126	; 0x7e
   1c1d4:	bhi	1c5e0 <__assert_fail@plt+0xb024>
   1c1d8:	add	r3, pc, #16
   1c1dc:	mov	r4, #1
   1c1e0:	mov	r2, #110	; 0x6e
   1c1e4:	mov	r0, #97	; 0x61
   1c1e8:	mov	r1, #0
   1c1ec:	ldr	pc, [r3, r5, lsl #2]
   1c1f0:	andeq	ip, r1, r0, asr #9
   1c1f4:	andeq	ip, r1, r0, ror #11
   1c1f8:	andeq	ip, r1, r0, ror #11
   1c1fc:	andeq	ip, r1, r0, ror #11
   1c200:	andeq	ip, r1, r0, ror #11
   1c204:	andeq	ip, r1, r0, ror #11
   1c208:	andeq	ip, r1, r0, ror #11
   1c20c:			; <UNDEFINED> instruction: 0x0001c6bc
   1c210:	andeq	ip, r1, r0, lsr #9
   1c214:	andeq	ip, r1, r8, lsl #9
   1c218:	andeq	ip, r1, ip, lsr #9
   1c21c:	andeq	ip, r1, ip, lsr r5
   1c220:	andeq	ip, r1, r0, lsl #9
   1c224:	andeq	ip, r1, r8, lsr #9
   1c228:	andeq	ip, r1, r0, ror #11
   1c22c:	andeq	ip, r1, r0, ror #11
   1c230:	andeq	ip, r1, r0, ror #11
   1c234:	andeq	ip, r1, r0, ror #11
   1c238:	andeq	ip, r1, r0, ror #11
   1c23c:	andeq	ip, r1, r0, ror #11
   1c240:	andeq	ip, r1, r0, ror #11
   1c244:	andeq	ip, r1, r0, ror #11
   1c248:	andeq	ip, r1, r0, ror #11
   1c24c:	andeq	ip, r1, r0, ror #11
   1c250:	andeq	ip, r1, r0, ror #11
   1c254:	andeq	ip, r1, r0, ror #11
   1c258:	andeq	ip, r1, r0, ror #11
   1c25c:	andeq	ip, r1, r0, ror #11
   1c260:	andeq	ip, r1, r0, ror #11
   1c264:	andeq	ip, r1, r0, ror #11
   1c268:	andeq	ip, r1, r0, ror #11
   1c26c:	andeq	ip, r1, r0, ror #11
   1c270:	andeq	ip, r1, r8, lsr r6
   1c274:	andeq	ip, r1, ip, lsr r6
   1c278:	andeq	ip, r1, ip, lsr r6
   1c27c:	andeq	ip, r1, ip, lsl #8
   1c280:	andeq	ip, r1, ip, lsr r6
   1c284:	andeq	ip, r1, ip, ror #7
   1c288:	andeq	ip, r1, ip, lsr r6
   1c28c:	andeq	ip, r1, r4, asr #10
   1c290:	andeq	ip, r1, ip, lsr r6
   1c294:	andeq	ip, r1, ip, lsr r6
   1c298:	andeq	ip, r1, ip, lsr r6
   1c29c:	andeq	ip, r1, ip, ror #7
   1c2a0:	andeq	ip, r1, ip, ror #7
   1c2a4:	andeq	ip, r1, ip, ror #7
   1c2a8:	andeq	ip, r1, ip, ror #7
   1c2ac:	andeq	ip, r1, ip, ror #7
   1c2b0:	andeq	ip, r1, ip, ror #7
   1c2b4:	andeq	ip, r1, ip, ror #7
   1c2b8:	andeq	ip, r1, ip, ror #7
   1c2bc:	andeq	ip, r1, ip, ror #7
   1c2c0:	andeq	ip, r1, ip, ror #7
   1c2c4:	andeq	ip, r1, ip, ror #7
   1c2c8:	andeq	ip, r1, ip, ror #7
   1c2cc:	andeq	ip, r1, ip, ror #7
   1c2d0:	andeq	ip, r1, ip, ror #7
   1c2d4:	andeq	ip, r1, ip, ror #7
   1c2d8:	andeq	ip, r1, ip, ror #7
   1c2dc:	andeq	ip, r1, ip, lsr r6
   1c2e0:	andeq	ip, r1, ip, lsr r6
   1c2e4:	andeq	ip, r1, ip, lsr r6
   1c2e8:	andeq	ip, r1, ip, lsr r6
   1c2ec:	andeq	ip, r1, r0, lsl #10
   1c2f0:	andeq	ip, r1, r0, ror #11
   1c2f4:	andeq	ip, r1, ip, ror #7
   1c2f8:	andeq	ip, r1, ip, ror #7
   1c2fc:	andeq	ip, r1, ip, ror #7
   1c300:	andeq	ip, r1, ip, ror #7
   1c304:	andeq	ip, r1, ip, ror #7
   1c308:	andeq	ip, r1, ip, ror #7
   1c30c:	andeq	ip, r1, ip, ror #7
   1c310:	andeq	ip, r1, ip, ror #7
   1c314:	andeq	ip, r1, ip, ror #7
   1c318:	andeq	ip, r1, ip, ror #7
   1c31c:	andeq	ip, r1, ip, ror #7
   1c320:	andeq	ip, r1, ip, ror #7
   1c324:	andeq	ip, r1, ip, ror #7
   1c328:	andeq	ip, r1, ip, ror #7
   1c32c:	andeq	ip, r1, ip, ror #7
   1c330:	andeq	ip, r1, ip, ror #7
   1c334:	andeq	ip, r1, ip, ror #7
   1c338:	andeq	ip, r1, ip, ror #7
   1c33c:	andeq	ip, r1, ip, ror #7
   1c340:	andeq	ip, r1, ip, ror #7
   1c344:	andeq	ip, r1, ip, ror #7
   1c348:	andeq	ip, r1, ip, ror #7
   1c34c:	andeq	ip, r1, ip, ror #7
   1c350:	andeq	ip, r1, ip, ror #7
   1c354:	andeq	ip, r1, ip, ror #7
   1c358:	andeq	ip, r1, ip, ror #7
   1c35c:	andeq	ip, r1, ip, lsr r6
   1c360:	andeq	ip, r1, ip, asr #8
   1c364:	andeq	ip, r1, ip, ror #7
   1c368:	andeq	ip, r1, ip, lsr r6
   1c36c:	andeq	ip, r1, ip, ror #7
   1c370:	andeq	ip, r1, ip, lsr r6
   1c374:	andeq	ip, r1, ip, ror #7
   1c378:	andeq	ip, r1, ip, ror #7
   1c37c:	andeq	ip, r1, ip, ror #7
   1c380:	andeq	ip, r1, ip, ror #7
   1c384:	andeq	ip, r1, ip, ror #7
   1c388:	andeq	ip, r1, ip, ror #7
   1c38c:	andeq	ip, r1, ip, ror #7
   1c390:	andeq	ip, r1, ip, ror #7
   1c394:	andeq	ip, r1, ip, ror #7
   1c398:	andeq	ip, r1, ip, ror #7
   1c39c:	andeq	ip, r1, ip, ror #7
   1c3a0:	andeq	ip, r1, ip, ror #7
   1c3a4:	andeq	ip, r1, ip, ror #7
   1c3a8:	andeq	ip, r1, ip, ror #7
   1c3ac:	andeq	ip, r1, ip, ror #7
   1c3b0:	andeq	ip, r1, ip, ror #7
   1c3b4:	andeq	ip, r1, ip, ror #7
   1c3b8:	andeq	ip, r1, ip, ror #7
   1c3bc:	andeq	ip, r1, ip, ror #7
   1c3c0:	andeq	ip, r1, ip, ror #7
   1c3c4:	andeq	ip, r1, ip, ror #7
   1c3c8:	andeq	ip, r1, ip, ror #7
   1c3cc:	andeq	ip, r1, ip, ror #7
   1c3d0:	andeq	ip, r1, ip, ror #7
   1c3d4:	andeq	ip, r1, ip, ror #7
   1c3d8:	andeq	ip, r1, ip, ror #7
   1c3dc:	andeq	ip, r1, ip, lsr #8
   1c3e0:	andeq	ip, r1, ip, lsr r6
   1c3e4:	andeq	ip, r1, ip, lsr #8
   1c3e8:	andeq	ip, r1, ip, lsl #8
   1c3ec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c3f0:	cmp	r0, #0
   1c3f4:	beq	1c6d0 <__assert_fail@plt+0xb114>
   1c3f8:	ldr	r0, [fp, #16]
   1c3fc:	cmp	r0, #0
   1c400:	mov	r0, r5
   1c404:	bne	1c6e0 <__assert_fail@plt+0xb124>
   1c408:	b	1c700 <__assert_fail@plt+0xb144>
   1c40c:	mov	r4, #0
   1c410:	cmp	r7, #0
   1c414:	beq	1c638 <__assert_fail@plt+0xb07c>
   1c418:	mov	r8, #0
   1c41c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c420:	cmp	r0, #0
   1c424:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1c428:	b	1c6d0 <__assert_fail@plt+0xb114>
   1c42c:	mov	r4, #0
   1c430:	cmn	lr, #1
   1c434:	beq	1c610 <__assert_fail@plt+0xb054>
   1c438:	cmp	r7, #0
   1c43c:	bne	1c418 <__assert_fail@plt+0xae5c>
   1c440:	cmp	lr, #1
   1c444:	beq	1c638 <__assert_fail@plt+0xb07c>
   1c448:	b	1c418 <__assert_fail@plt+0xae5c>
   1c44c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c450:	cmp	r0, #2
   1c454:	bne	1c668 <__assert_fail@plt+0xb0ac>
   1c458:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c45c:	tst	r0, #1
   1c460:	bne	1cec8 <__assert_fail@plt+0xb90c>
   1c464:	mov	r8, #0
   1c468:	mov	r0, #92	; 0x5c
   1c46c:	mov	r4, #0
   1c470:	cmp	r8, #0
   1c474:	beq	1c688 <__assert_fail@plt+0xb0cc>
   1c478:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c47c:	b	1c77c <__assert_fail@plt+0xb1c0>
   1c480:	mov	r0, #102	; 0x66
   1c484:	b	1c6bc <__assert_fail@plt+0xb100>
   1c488:	mov	r2, #116	; 0x74
   1c48c:	ldr	r0, [sp, #60]	; 0x3c
   1c490:	tst	r0, #1
   1c494:	mov	r0, r2
   1c498:	bne	1c6bc <__assert_fail@plt+0xb100>
   1c49c:	b	1cec8 <__assert_fail@plt+0xb90c>
   1c4a0:	mov	r0, #98	; 0x62
   1c4a4:	b	1c6bc <__assert_fail@plt+0xb100>
   1c4a8:	mov	r2, #114	; 0x72
   1c4ac:	ldr	r0, [sp, #60]	; 0x3c
   1c4b0:	tst	r0, #1
   1c4b4:	mov	r0, r2
   1c4b8:	bne	1c6bc <__assert_fail@plt+0xb100>
   1c4bc:	b	1cec8 <__assert_fail@plt+0xb90c>
   1c4c0:	ldr	r0, [sp, #80]	; 0x50
   1c4c4:	tst	r0, #1
   1c4c8:	beq	1c7a4 <__assert_fail@plt+0xb1e8>
   1c4cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c4d0:	tst	r0, #1
   1c4d4:	bne	1cff0 <__assert_fail@plt+0xba34>
   1c4d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c4dc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c4e0:	cmp	r0, #2
   1c4e4:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1c4e8:	movwne	r0, #1
   1c4ec:	orr	r0, r0, r2
   1c4f0:	tst	r0, #1
   1c4f4:	beq	1ca9c <__assert_fail@plt+0xb4e0>
   1c4f8:	mov	r0, r9
   1c4fc:	b	1cad0 <__assert_fail@plt+0xb514>
   1c500:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c504:	mov	r8, #0
   1c508:	mov	r5, #63	; 0x3f
   1c50c:	cmp	r0, #5
   1c510:	beq	1c958 <__assert_fail@plt+0xb39c>
   1c514:	cmp	r0, #2
   1c518:	bne	1ca08 <__assert_fail@plt+0xb44c>
   1c51c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c520:	tst	r0, #1
   1c524:	bne	1cec8 <__assert_fail@plt+0xb90c>
   1c528:	mov	r4, #0
   1c52c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c530:	cmp	r0, #0
   1c534:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1c538:	b	1c6d0 <__assert_fail@plt+0xb114>
   1c53c:	mov	r0, #118	; 0x76
   1c540:	b	1c6bc <__assert_fail@plt+0xb100>
   1c544:	mov	r0, #1
   1c548:	mov	r5, #39	; 0x27
   1c54c:	str	r0, [sp, #52]	; 0x34
   1c550:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c554:	cmp	r0, #2
   1c558:	bne	1c5cc <__assert_fail@plt+0xb010>
   1c55c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c560:	tst	r0, #1
   1c564:	bne	1cec8 <__assert_fail@plt+0xb90c>
   1c568:	ldr	r2, [sp, #48]	; 0x30
   1c56c:	clz	r1, sl
   1c570:	mov	r8, #0
   1c574:	lsr	r1, r1, #5
   1c578:	cmp	r2, #0
   1c57c:	mov	r0, r2
   1c580:	movwne	r0, #1
   1c584:	orrs	r0, r0, r1
   1c588:	moveq	r2, sl
   1c58c:	moveq	sl, r0
   1c590:	cmp	r9, sl
   1c594:	str	r2, [sp, #48]	; 0x30
   1c598:	movcc	r0, #39	; 0x27
   1c59c:	strbcc	r0, [r6, r9]
   1c5a0:	add	r0, r9, #1
   1c5a4:	cmp	r0, sl
   1c5a8:	movcc	r1, #92	; 0x5c
   1c5ac:	strbcc	r1, [r6, r0]
   1c5b0:	add	r0, r9, #2
   1c5b4:	add	r9, r9, #3
   1c5b8:	cmp	r0, sl
   1c5bc:	movcc	r1, #39	; 0x27
   1c5c0:	strbcc	r1, [r6, r0]
   1c5c4:	mov	r0, #0
   1c5c8:	str	r0, [fp, #-48]	; 0xffffffd0
   1c5cc:	mov	r4, #1
   1c5d0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c5d4:	cmp	r0, #0
   1c5d8:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1c5dc:	b	1c6d0 <__assert_fail@plt+0xb114>
   1c5e0:	ldr	r0, [sp, #32]
   1c5e4:	cmp	r0, #1
   1c5e8:	bne	1c7d4 <__assert_fail@plt+0xb218>
   1c5ec:	str	lr, [sp, #84]	; 0x54
   1c5f0:	bl	11454 <__ctype_b_loc@plt>
   1c5f4:	ldr	r0, [r0]
   1c5f8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c5fc:	mov	r1, #1
   1c600:	add	r0, r0, r5, lsl #1
   1c604:	ldrb	r0, [r0, #1]
   1c608:	ubfx	r4, r0, #6, #1
   1c60c:	b	1cbcc <__assert_fail@plt+0xb610>
   1c610:	cmp	r7, #0
   1c614:	ldrbeq	r0, [ip, #1]
   1c618:	cmpeq	r0, #0
   1c61c:	beq	1c638 <__assert_fail@plt+0xb07c>
   1c620:	mvn	lr, #0
   1c624:	mov	r8, #0
   1c628:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c62c:	cmp	r0, #0
   1c630:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1c634:	b	1c6d0 <__assert_fail@plt+0xb114>
   1c638:	mov	r1, #1
   1c63c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1c640:	cmp	r0, #2
   1c644:	bne	1c654 <__assert_fail@plt+0xb098>
   1c648:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1c64c:	tst	r0, #1
   1c650:	bne	1cec8 <__assert_fail@plt+0xb90c>
   1c654:	mov	r4, r1
   1c658:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c65c:	cmp	r0, #0
   1c660:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1c664:	b	1c6d0 <__assert_fail@plt+0xb114>
   1c668:	ldr	r1, [sp, #40]	; 0x28
   1c66c:	mov	r8, #0
   1c670:	mov	r0, #92	; 0x5c
   1c674:	cmp	r1, #0
   1c678:	beq	1c6bc <__assert_fail@plt+0xb100>
   1c67c:	mov	r4, #0
   1c680:	cmp	r8, #0
   1c684:	bne	1c478 <__assert_fail@plt+0xaebc>
   1c688:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c68c:	tst	r2, #1
   1c690:	beq	1c77c <__assert_fail@plt+0xb1c0>
   1c694:	cmp	r9, sl
   1c698:	movcc	r1, #39	; 0x27
   1c69c:	strbcc	r1, [r6, r9]
   1c6a0:	add	r1, r9, #1
   1c6a4:	add	r9, r9, #2
   1c6a8:	cmp	r1, sl
   1c6ac:	movcc	r2, #39	; 0x27
   1c6b0:	strbcc	r2, [r6, r1]
   1c6b4:	mov	r2, #0
   1c6b8:	b	1c77c <__assert_fail@plt+0xb1c0>
   1c6bc:	ldr	r1, [sp, #80]	; 0x50
   1c6c0:	mov	r4, #0
   1c6c4:	mov	r8, #0
   1c6c8:	tst	r1, #1
   1c6cc:	bne	1c70c <__assert_fail@plt+0xb150>
   1c6d0:	ldr	r0, [fp, #-88]	; 0xffffffa8
   1c6d4:	cmp	r0, #0
   1c6d8:	mov	r0, r5
   1c6dc:	beq	1c700 <__assert_fail@plt+0xb144>
   1c6e0:	ldr	r1, [fp, #16]
   1c6e4:	ubfx	r0, r5, #5, #3
   1c6e8:	mov	r2, #1
   1c6ec:	ldr	r0, [r1, r0, lsl #2]
   1c6f0:	and	r1, r5, #31
   1c6f4:	tst	r0, r2, lsl r1
   1c6f8:	mov	r0, r5
   1c6fc:	bne	1c70c <__assert_fail@plt+0xb150>
   1c700:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1c704:	cmp	r1, #0
   1c708:	beq	1cb64 <__assert_fail@plt+0xb5a8>
   1c70c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c710:	tst	r1, #1
   1c714:	bne	1cea8 <__assert_fail@plt+0xb8ec>
   1c718:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1c71c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c720:	cmp	r1, #2
   1c724:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1c728:	movwne	r1, #1
   1c72c:	orr	r1, r1, r2
   1c730:	tst	r1, #1
   1c734:	bne	1c76c <__assert_fail@plt+0xb1b0>
   1c738:	cmp	r9, sl
   1c73c:	movcc	r1, #39	; 0x27
   1c740:	strbcc	r1, [r6, r9]
   1c744:	add	r1, r9, #1
   1c748:	cmp	r1, sl
   1c74c:	movcc	r2, #36	; 0x24
   1c750:	strbcc	r2, [r6, r1]
   1c754:	add	r1, r9, #2
   1c758:	add	r9, r9, #3
   1c75c:	cmp	r1, sl
   1c760:	movcc	r2, #39	; 0x27
   1c764:	strbcc	r2, [r6, r1]
   1c768:	mov	r2, #1
   1c76c:	cmp	r9, sl
   1c770:	movcc	r1, #92	; 0x5c
   1c774:	strbcc	r1, [r6, r9]
   1c778:	add	r9, r9, #1
   1c77c:	cmp	r9, sl
   1c780:	add	r7, r7, #1
   1c784:	strbcc	r0, [r6, r9]
   1c788:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1c78c:	add	r9, r9, #1
   1c790:	and	r0, r0, r4
   1c794:	mov	r4, r0
   1c798:	cmn	lr, #1
   1c79c:	bne	1c110 <__assert_fail@plt+0xab54>
   1c7a0:	b	1c11c <__assert_fail@plt+0xab60>
   1c7a4:	ldr	r0, [sp, #28]
   1c7a8:	mov	r4, #0
   1c7ac:	mov	r8, #0
   1c7b0:	mov	r5, #0
   1c7b4:	cmp	r0, #0
   1c7b8:	beq	1c6d0 <__assert_fail@plt+0xb114>
   1c7bc:	ldr	r4, [fp, #-52]	; 0xffffffcc
   1c7c0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1c7c4:	add	r7, r7, #1
   1c7c8:	cmn	lr, #1
   1c7cc:	bne	1c110 <__assert_fail@plt+0xab54>
   1c7d0:	b	1c11c <__assert_fail@plt+0xab60>
   1c7d4:	mov	r0, #0
   1c7d8:	cmn	lr, #1
   1c7dc:	str	r0, [fp, #-36]	; 0xffffffdc
   1c7e0:	str	r0, [fp, #-40]	; 0xffffffd8
   1c7e4:	bne	1c7f8 <__assert_fail@plt+0xb23c>
   1c7e8:	mov	r0, ip
   1c7ec:	bl	1146c <strlen@plt>
   1c7f0:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c7f4:	mov	lr, r0
   1c7f8:	ldr	r0, [sp, #36]	; 0x24
   1c7fc:	str	sl, [sp, #56]	; 0x38
   1c800:	str	lr, [sp, #84]	; 0x54
   1c804:	cmp	r0, #0
   1c808:	beq	1ca20 <__assert_fail@plt+0xb464>
   1c80c:	add	r0, ip, r7
   1c810:	mov	r4, #1
   1c814:	mov	r6, #0
   1c818:	sub	sl, fp, #40	; 0x28
   1c81c:	str	r0, [sp, #20]
   1c820:	str	r6, [sp, #64]	; 0x40
   1c824:	add	r6, r6, r7
   1c828:	sub	r0, fp, #44	; 0x2c
   1c82c:	mov	r3, sl
   1c830:	add	r1, ip, r6
   1c834:	sub	r2, lr, r6
   1c838:	bl	1f2d8 <__assert_fail@plt+0xdd1c>
   1c83c:	cmn	r0, #2
   1c840:	beq	1cb7c <__assert_fail@plt+0xb5c0>
   1c844:	ldr	sl, [sp, #56]	; 0x38
   1c848:	cmn	r0, #1
   1c84c:	beq	1cb70 <__assert_fail@plt+0xb5b4>
   1c850:	cmp	r0, #0
   1c854:	beq	1cb74 <__assert_fail@plt+0xb5b8>
   1c858:	cmp	r0, #2
   1c85c:	bcc	1c91c <__assert_fail@plt+0xb360>
   1c860:	ldr	r1, [sp, #64]	; 0x40
   1c864:	ldr	r2, [sp, #20]
   1c868:	add	r1, r2, r1
   1c86c:	mov	r2, #1
   1c870:	ldrb	r3, [r1, r2]
   1c874:	sub	r3, r3, #91	; 0x5b
   1c878:	cmp	r3, #33	; 0x21
   1c87c:	bhi	1c910 <__assert_fail@plt+0xb354>
   1c880:	add	r6, pc, #0
   1c884:	ldr	pc, [r6, r3, lsl #2]
   1c888:	ldrdeq	ip, [r1], -r4
   1c88c:	ldrdeq	ip, [r1], -r4
   1c890:	andeq	ip, r1, r0, lsl r9
   1c894:	ldrdeq	ip, [r1], -r4
   1c898:	andeq	ip, r1, r0, lsl r9
   1c89c:	ldrdeq	ip, [r1], -r4
   1c8a0:	andeq	ip, r1, r0, lsl r9
   1c8a4:	andeq	ip, r1, r0, lsl r9
   1c8a8:	andeq	ip, r1, r0, lsl r9
   1c8ac:	andeq	ip, r1, r0, lsl r9
   1c8b0:	andeq	ip, r1, r0, lsl r9
   1c8b4:	andeq	ip, r1, r0, lsl r9
   1c8b8:	andeq	ip, r1, r0, lsl r9
   1c8bc:	andeq	ip, r1, r0, lsl r9
   1c8c0:	andeq	ip, r1, r0, lsl r9
   1c8c4:	andeq	ip, r1, r0, lsl r9
   1c8c8:	andeq	ip, r1, r0, lsl r9
   1c8cc:	andeq	ip, r1, r0, lsl r9
   1c8d0:	andeq	ip, r1, r0, lsl r9
   1c8d4:	andeq	ip, r1, r0, lsl r9
   1c8d8:	andeq	ip, r1, r0, lsl r9
   1c8dc:	andeq	ip, r1, r0, lsl r9
   1c8e0:	andeq	ip, r1, r0, lsl r9
   1c8e4:	andeq	ip, r1, r0, lsl r9
   1c8e8:	andeq	ip, r1, r0, lsl r9
   1c8ec:	andeq	ip, r1, r0, lsl r9
   1c8f0:	andeq	ip, r1, r0, lsl r9
   1c8f4:	andeq	ip, r1, r0, lsl r9
   1c8f8:	andeq	ip, r1, r0, lsl r9
   1c8fc:	andeq	ip, r1, r0, lsl r9
   1c900:	andeq	ip, r1, r0, lsl r9
   1c904:	andeq	ip, r1, r0, lsl r9
   1c908:	andeq	ip, r1, r0, lsl r9
   1c90c:	ldrdeq	ip, [r1], -r4
   1c910:	add	r2, r2, #1
   1c914:	cmp	r2, r0
   1c918:	bcc	1c870 <__assert_fail@plt+0xb2b4>
   1c91c:	ldr	r6, [sp, #64]	; 0x40
   1c920:	add	r6, r0, r6
   1c924:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1c928:	bl	11364 <iswprint@plt>
   1c92c:	cmp	r0, #0
   1c930:	sub	sl, fp, #40	; 0x28
   1c934:	movwne	r0, #1
   1c938:	and	r4, r4, r0
   1c93c:	mov	r0, sl
   1c940:	bl	11304 <mbsinit@plt>
   1c944:	ldr	ip, [fp, #-84]	; 0xffffffac
   1c948:	ldr	lr, [sp, #84]	; 0x54
   1c94c:	cmp	r0, #0
   1c950:	beq	1c820 <__assert_fail@plt+0xb264>
   1c954:	b	1cbc0 <__assert_fail@plt+0xb604>
   1c958:	ldr	r0, [sp, #24]
   1c95c:	cmp	r0, #0
   1c960:	beq	1ca08 <__assert_fail@plt+0xb44c>
   1c964:	add	r0, r7, #2
   1c968:	cmp	r0, lr
   1c96c:	bcs	1ca08 <__assert_fail@plt+0xb44c>
   1c970:	add	r1, ip, r7
   1c974:	ldrb	r1, [r1, #1]
   1c978:	cmp	r1, #63	; 0x3f
   1c97c:	bne	1ca08 <__assert_fail@plt+0xb44c>
   1c980:	ldrb	r5, [ip, r0]
   1c984:	sub	r1, r5, #33	; 0x21
   1c988:	cmp	r1, #29
   1c98c:	bhi	1ca08 <__assert_fail@plt+0xb44c>
   1c990:	movw	r3, #20929	; 0x51c1
   1c994:	mov	r2, #1
   1c998:	movt	r3, #14336	; 0x3800
   1c99c:	tst	r3, r2, lsl r1
   1c9a0:	beq	1ca08 <__assert_fail@plt+0xb44c>
   1c9a4:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1c9a8:	tst	r1, #1
   1c9ac:	bne	1cff8 <__assert_fail@plt+0xba3c>
   1c9b0:	cmp	r9, sl
   1c9b4:	mov	r7, r0
   1c9b8:	mov	r4, #0
   1c9bc:	movcc	r1, #63	; 0x3f
   1c9c0:	strbcc	r1, [r6, r9]
   1c9c4:	add	r1, r9, #1
   1c9c8:	cmp	r1, sl
   1c9cc:	movcc	r2, #34	; 0x22
   1c9d0:	strbcc	r2, [r6, r1]
   1c9d4:	add	r1, r9, #2
   1c9d8:	cmp	r1, sl
   1c9dc:	movcc	r2, #34	; 0x22
   1c9e0:	strbcc	r2, [r6, r1]
   1c9e4:	add	r1, r9, #3
   1c9e8:	add	r9, r9, #4
   1c9ec:	cmp	r1, sl
   1c9f0:	movcc	r2, #63	; 0x3f
   1c9f4:	strbcc	r2, [r6, r1]
   1c9f8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1c9fc:	cmp	r0, #0
   1ca00:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1ca04:	b	1c6d0 <__assert_fail@plt+0xb114>
   1ca08:	mov	r5, #63	; 0x3f
   1ca0c:	mov	r4, #0
   1ca10:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ca14:	cmp	r0, #0
   1ca18:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1ca1c:	b	1c6d0 <__assert_fail@plt+0xb114>
   1ca20:	mov	r4, #1
   1ca24:	mov	r6, #0
   1ca28:	sub	sl, fp, #40	; 0x28
   1ca2c:	str	r6, [sp, #64]	; 0x40
   1ca30:	add	r6, r6, r7
   1ca34:	sub	r0, fp, #44	; 0x2c
   1ca38:	mov	r3, sl
   1ca3c:	add	r1, ip, r6
   1ca40:	sub	r2, lr, r6
   1ca44:	bl	1f2d8 <__assert_fail@plt+0xdd1c>
   1ca48:	cmn	r0, #2
   1ca4c:	beq	1cb7c <__assert_fail@plt+0xb5c0>
   1ca50:	cmn	r0, #1
   1ca54:	beq	1cb70 <__assert_fail@plt+0xb5b4>
   1ca58:	ldr	r6, [sp, #64]	; 0x40
   1ca5c:	cmp	r0, #0
   1ca60:	beq	1cbbc <__assert_fail@plt+0xb600>
   1ca64:	add	r6, r0, r6
   1ca68:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1ca6c:	bl	11364 <iswprint@plt>
   1ca70:	cmp	r0, #0
   1ca74:	sub	sl, fp, #40	; 0x28
   1ca78:	movwne	r0, #1
   1ca7c:	and	r4, r4, r0
   1ca80:	mov	r0, sl
   1ca84:	bl	11304 <mbsinit@plt>
   1ca88:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ca8c:	ldr	lr, [sp, #84]	; 0x54
   1ca90:	cmp	r0, #0
   1ca94:	beq	1ca2c <__assert_fail@plt+0xb470>
   1ca98:	b	1cbc0 <__assert_fail@plt+0xb604>
   1ca9c:	cmp	r9, sl
   1caa0:	mov	r2, #1
   1caa4:	movcc	r0, #39	; 0x27
   1caa8:	strbcc	r0, [r6, r9]
   1caac:	add	r0, r9, #1
   1cab0:	cmp	r0, sl
   1cab4:	movcc	r1, #36	; 0x24
   1cab8:	strbcc	r1, [r6, r0]
   1cabc:	add	r0, r9, #2
   1cac0:	cmp	r0, sl
   1cac4:	movcc	r1, #39	; 0x27
   1cac8:	strbcc	r1, [r6, r0]
   1cacc:	add	r0, r9, #3
   1cad0:	cmp	r0, sl
   1cad4:	add	r9, r0, #1
   1cad8:	str	r2, [fp, #-48]	; 0xffffffd0
   1cadc:	movcc	r1, #92	; 0x5c
   1cae0:	strbcc	r1, [r6, r0]
   1cae4:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1cae8:	cmp	r1, #2
   1caec:	beq	1cb4c <__assert_fail@plt+0xb590>
   1caf0:	add	r1, r7, #1
   1caf4:	mov	r4, #0
   1caf8:	mov	r8, #1
   1cafc:	mov	r5, #48	; 0x30
   1cb00:	cmp	r1, lr
   1cb04:	bcs	1c3ec <__assert_fail@plt+0xae30>
   1cb08:	ldrb	r1, [ip, r1]
   1cb0c:	sub	r1, r1, #48	; 0x30
   1cb10:	uxtb	r1, r1
   1cb14:	cmp	r1, #9
   1cb18:	bhi	1c3ec <__assert_fail@plt+0xae30>
   1cb1c:	cmp	r9, sl
   1cb20:	movcc	r1, #48	; 0x30
   1cb24:	strbcc	r1, [r6, r9]
   1cb28:	add	r1, r0, #2
   1cb2c:	add	r9, r0, #3
   1cb30:	cmp	r1, sl
   1cb34:	movcc	r2, #48	; 0x30
   1cb38:	strbcc	r2, [r6, r1]
   1cb3c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1cb40:	cmp	r0, #0
   1cb44:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1cb48:	b	1c6d0 <__assert_fail@plt+0xb114>
   1cb4c:	mov	r0, #48	; 0x30
   1cb50:	mov	r8, #1
   1cb54:	mov	r4, #0
   1cb58:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1cb5c:	cmp	r1, #0
   1cb60:	bne	1c70c <__assert_fail@plt+0xb150>
   1cb64:	cmp	r8, #0
   1cb68:	beq	1c688 <__assert_fail@plt+0xb0cc>
   1cb6c:	b	1c478 <__assert_fail@plt+0xaebc>
   1cb70:	mov	r4, #0
   1cb74:	ldr	ip, [fp, #-84]	; 0xffffffac
   1cb78:	b	1cbb4 <__assert_fail@plt+0xb5f8>
   1cb7c:	ldr	r1, [sp, #84]	; 0x54
   1cb80:	ldr	ip, [fp, #-84]	; 0xffffffac
   1cb84:	mov	r4, #0
   1cb88:	cmp	r6, r1
   1cb8c:	bcs	1cbb4 <__assert_fail@plt+0xb5f8>
   1cb90:	ldrb	r0, [ip, r6]
   1cb94:	cmp	r0, #0
   1cb98:	beq	1cbb4 <__assert_fail@plt+0xb5f8>
   1cb9c:	ldr	r0, [sp, #64]	; 0x40
   1cba0:	add	r0, r0, #1
   1cba4:	add	r6, r0, r7
   1cba8:	str	r0, [sp, #64]	; 0x40
   1cbac:	cmp	r6, r1
   1cbb0:	bcc	1cb90 <__assert_fail@plt+0xb5d4>
   1cbb4:	ldr	r6, [sp, #64]	; 0x40
   1cbb8:	b	1cbc0 <__assert_fail@plt+0xb604>
   1cbbc:	ldr	ip, [fp, #-84]	; 0xffffffac
   1cbc0:	mov	r1, r6
   1cbc4:	ldr	r6, [sp, #76]	; 0x4c
   1cbc8:	ldr	sl, [sp, #56]	; 0x38
   1cbcc:	ldr	r0, [sp, #44]	; 0x2c
   1cbd0:	cmp	r1, #1
   1cbd4:	orr	r2, r4, r0
   1cbd8:	mov	r0, r1
   1cbdc:	bhi	1cbfc <__assert_fail@plt+0xb640>
   1cbe0:	tst	r2, #1
   1cbe4:	beq	1cbfc <__assert_fail@plt+0xb640>
   1cbe8:	ldr	lr, [sp, #84]	; 0x54
   1cbec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1cbf0:	cmp	r0, #0
   1cbf4:	bne	1c3f8 <__assert_fail@plt+0xae3c>
   1cbf8:	b	1c6d0 <__assert_fail@plt+0xb114>
   1cbfc:	str	r2, [sp, #64]	; 0x40
   1cc00:	add	r0, r0, r7
   1cc04:	add	r1, r7, #1
   1cc08:	ldr	lr, [sp, #84]	; 0x54
   1cc0c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1cc10:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1cc14:	mov	r3, #0
   1cc18:	str	r0, [sp, #56]	; 0x38
   1cc1c:	ldr	r0, [sp, #64]	; 0x40
   1cc20:	tst	r0, #1
   1cc24:	bne	1cd0c <__assert_fail@plt+0xb750>
   1cc28:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1cc2c:	tst	r0, #1
   1cc30:	bne	1ceac <__assert_fail@plt+0xb8f0>
   1cc34:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1cc38:	cmp	r7, #2
   1cc3c:	movwne	r3, #1
   1cc40:	orr	r3, r3, r2
   1cc44:	tst	r3, #1
   1cc48:	bne	1cc80 <__assert_fail@plt+0xb6c4>
   1cc4c:	cmp	r9, sl
   1cc50:	add	r3, r9, #1
   1cc54:	movcc	r2, #39	; 0x27
   1cc58:	strbcc	r2, [r6, r9]
   1cc5c:	cmp	r3, sl
   1cc60:	movcc	r2, #36	; 0x24
   1cc64:	strbcc	r2, [r6, r3]
   1cc68:	add	r3, r9, #2
   1cc6c:	add	r9, r9, #3
   1cc70:	cmp	r3, sl
   1cc74:	movcc	r2, #39	; 0x27
   1cc78:	strbcc	r2, [r6, r3]
   1cc7c:	mov	r2, #1
   1cc80:	cmp	r9, sl
   1cc84:	mov	r0, r2
   1cc88:	movcc	r3, #92	; 0x5c
   1cc8c:	strbcc	r3, [r6, r9]
   1cc90:	add	r3, r9, #1
   1cc94:	cmp	r3, sl
   1cc98:	andcc	r7, r5, #192	; 0xc0
   1cc9c:	movcc	r2, #48	; 0x30
   1cca0:	orrcc	r7, r2, r7, lsr #6
   1cca4:	strbcc	r7, [r6, r3]
   1cca8:	add	r3, r9, #2
   1ccac:	add	r9, r9, #3
   1ccb0:	cmp	r3, sl
   1ccb4:	lsrcc	r7, r5, #3
   1ccb8:	movcc	r2, #6
   1ccbc:	bficc	r7, r2, #3, #29
   1ccc0:	mov	r2, #6
   1ccc4:	strbcc	r7, [r6, r3]
   1ccc8:	bfi	r5, r2, #3, #29
   1cccc:	mov	r3, #1
   1ccd0:	mov	r2, r0
   1ccd4:	ldr	r0, [sp, #56]	; 0x38
   1ccd8:	and	r8, r3, #1
   1ccdc:	cmp	r0, r1
   1cce0:	bhi	1cd40 <__assert_fail@plt+0xb784>
   1cce4:	b	1cd80 <__assert_fail@plt+0xb7c4>
   1cce8:	cmp	r9, sl
   1ccec:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ccf0:	strbcc	r5, [r6, r9]
   1ccf4:	add	r9, r9, #1
   1ccf8:	ldrb	r5, [ip, r1]
   1ccfc:	add	r1, r1, #1
   1cd00:	ldr	r0, [sp, #64]	; 0x40
   1cd04:	tst	r0, #1
   1cd08:	beq	1cc28 <__assert_fail@plt+0xb66c>
   1cd0c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   1cd10:	tst	r7, #1
   1cd14:	beq	1cd28 <__assert_fail@plt+0xb76c>
   1cd18:	cmp	r9, sl
   1cd1c:	movcc	r7, #92	; 0x5c
   1cd20:	strbcc	r7, [r6, r9]
   1cd24:	add	r9, r9, #1
   1cd28:	mov	r7, #0
   1cd2c:	str	r7, [fp, #-56]	; 0xffffffc8
   1cd30:	ldr	r0, [sp, #56]	; 0x38
   1cd34:	and	r8, r3, #1
   1cd38:	cmp	r0, r1
   1cd3c:	bls	1cd80 <__assert_fail@plt+0xb7c4>
   1cd40:	cmp	r8, #0
   1cd44:	mvn	r7, r2
   1cd48:	movwne	r8, #1
   1cd4c:	orr	r7, r7, r8
   1cd50:	tst	r7, #1
   1cd54:	bne	1cce8 <__assert_fail@plt+0xb72c>
   1cd58:	cmp	r9, sl
   1cd5c:	movcc	r7, #39	; 0x27
   1cd60:	strbcc	r7, [r6, r9]
   1cd64:	add	r7, r9, #1
   1cd68:	add	r9, r9, #2
   1cd6c:	cmp	r7, sl
   1cd70:	movcc	r2, #39	; 0x27
   1cd74:	strbcc	r2, [r6, r7]
   1cd78:	mov	r2, #0
   1cd7c:	b	1cce8 <__assert_fail@plt+0xb72c>
   1cd80:	cmp	r8, #0
   1cd84:	sub	r7, r1, #1
   1cd88:	mov	r0, r5
   1cd8c:	str	r2, [fp, #-48]	; 0xffffffd0
   1cd90:	movwne	r8, #1
   1cd94:	cmp	r8, #0
   1cd98:	beq	1c688 <__assert_fail@plt+0xb0cc>
   1cd9c:	b	1c478 <__assert_fail@plt+0xaebc>
   1cda0:	mov	lr, r7
   1cda4:	b	1cdac <__assert_fail@plt+0xb7f0>
   1cda8:	mvn	lr, #0
   1cdac:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1cdb0:	ldr	r1, [fp, #-72]	; 0xffffffb8
   1cdb4:	eor	r0, r7, #2
   1cdb8:	orr	r0, r0, r9
   1cdbc:	clz	r0, r0
   1cdc0:	lsr	r0, r0, #5
   1cdc4:	tst	r1, r0
   1cdc8:	bne	1cec8 <__assert_fail@plt+0xb90c>
   1cdcc:	mov	r0, r1
   1cdd0:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1cdd4:	cmp	r7, #2
   1cdd8:	movwne	r1, #1
   1cddc:	orr	r0, r0, r1
   1cde0:	tst	r0, #1
   1cde4:	ldreq	r0, [sp, #52]	; 0x34
   1cde8:	streq	lr, [sp, #84]	; 0x54
   1cdec:	eoreq	r0, r0, #1
   1cdf0:	tsteq	r0, #1
   1cdf4:	bne	1cf8c <__assert_fail@plt+0xb9d0>
   1cdf8:	tst	r4, #1
   1cdfc:	bne	1cf48 <__assert_fail@plt+0xb98c>
   1ce00:	ldr	r6, [sp, #48]	; 0x30
   1ce04:	mov	r8, #0
   1ce08:	cmp	r6, #0
   1ce0c:	beq	1cf84 <__assert_fail@plt+0xb9c8>
   1ce10:	ldr	r0, [sp, #80]	; 0x50
   1ce14:	mov	r1, #0
   1ce18:	cmp	sl, #0
   1ce1c:	mov	r4, #0
   1ce20:	str	r1, [fp, #-72]	; 0xffffffb8
   1ce24:	beq	1bd18 <__assert_fail@plt+0xa75c>
   1ce28:	b	1cf8c <__assert_fail@plt+0xb9d0>
   1ce2c:	ldrb	r1, [r0, #3]
   1ce30:	cmp	r1, #56	; 0x38
   1ce34:	ldrbeq	r1, [r0, #4]
   1ce38:	cmpeq	r1, #48	; 0x30
   1ce3c:	bne	1bf10 <__assert_fail@plt+0xa954>
   1ce40:	ldrb	r1, [r0, #5]
   1ce44:	cmp	r1, #51	; 0x33
   1ce48:	ldrbeq	r1, [r0, #6]
   1ce4c:	cmpeq	r1, #48	; 0x30
   1ce50:	bne	1bf10 <__assert_fail@plt+0xa954>
   1ce54:	ldrb	r0, [r0, #7]
   1ce58:	cmp	r0, #0
   1ce5c:	movw	r0, #13737	; 0x35a9
   1ce60:	movt	r0, #2
   1ce64:	str	r0, [sp, #68]	; 0x44
   1ce68:	bne	1bf10 <__assert_fail@plt+0xa954>
   1ce6c:	b	1bf2c <__assert_fail@plt+0xa970>
   1ce70:	ldrb	r1, [r0, #4]
   1ce74:	cmp	r1, #48	; 0x30
   1ce78:	ldrbeq	r1, [r0, #5]
   1ce7c:	cmpeq	r1, #51	; 0x33
   1ce80:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1ce84:	ldrb	r1, [r0, #6]
   1ce88:	cmp	r1, #48	; 0x30
   1ce8c:	ldrbeq	r0, [r0, #7]
   1ce90:	cmpeq	r0, #0
   1ce94:	bne	1bff4 <__assert_fail@plt+0xaa38>
   1ce98:	movw	r0, #13741	; 0x35ad
   1ce9c:	movt	r0, #2
   1cea0:	str	r0, [sp, #72]	; 0x48
   1cea4:	b	1c014 <__assert_fail@plt+0xaa58>
   1cea8:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1ceac:	ldr	r2, [sp, #80]	; 0x50
   1ceb0:	b	1cee8 <__assert_fail@plt+0xb92c>
   1ceb4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ceb8:	mov	r2, #1
   1cebc:	mov	lr, r4
   1cec0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1cec4:	b	1cee8 <__assert_fail@plt+0xb92c>
   1cec8:	ldr	r2, [sp, #80]	; 0x50
   1cecc:	mov	r7, #2
   1ced0:	b	1cee8 <__assert_fail@plt+0xb92c>
   1ced4:	ldr	r6, [sp, #76]	; 0x4c
   1ced8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1cedc:	ldr	lr, [sp, #84]	; 0x54
   1cee0:	ldr	r2, [sp, #80]	; 0x50
   1cee4:	mov	r7, #2
   1cee8:	mov	r0, #0
   1ceec:	ldr	r1, [fp, #12]
   1cef0:	tst	r2, #1
   1cef4:	mov	r2, r7
   1cef8:	mov	r3, lr
   1cefc:	str	r0, [sp, #8]
   1cf00:	ldr	r0, [sp, #68]	; 0x44
   1cf04:	movwne	r2, #4
   1cf08:	cmp	r7, #2
   1cf0c:	movne	r2, r7
   1cf10:	str	r2, [sp]
   1cf14:	mov	r2, ip
   1cf18:	bic	r1, r1, #2
   1cf1c:	str	r0, [sp, #12]
   1cf20:	ldr	r0, [sp, #72]	; 0x48
   1cf24:	str	r1, [sp, #4]
   1cf28:	mov	r1, sl
   1cf2c:	str	r0, [sp, #16]
   1cf30:	mov	r0, r6
   1cf34:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1cf38:	mov	r9, r0
   1cf3c:	mov	r0, r9
   1cf40:	sub	sp, fp, #28
   1cf44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf48:	mov	r0, #5
   1cf4c:	ldr	r1, [sp, #48]	; 0x30
   1cf50:	ldr	r2, [fp, #-84]	; 0xffffffac
   1cf54:	ldr	r3, [sp, #84]	; 0x54
   1cf58:	str	r0, [sp]
   1cf5c:	ldr	r0, [fp, #12]
   1cf60:	str	r0, [sp, #4]
   1cf64:	ldr	r0, [fp, #16]
   1cf68:	str	r0, [sp, #8]
   1cf6c:	ldr	r0, [sp, #68]	; 0x44
   1cf70:	str	r0, [sp, #12]
   1cf74:	ldr	r0, [sp, #72]	; 0x48
   1cf78:	str	r0, [sp, #16]
   1cf7c:	ldr	r0, [sp, #76]	; 0x4c
   1cf80:	b	1cf34 <__assert_fail@plt+0xb978>
   1cf84:	mov	r0, #0
   1cf88:	str	r0, [fp, #-72]	; 0xffffffb8
   1cf8c:	ldr	r1, [sp, #92]	; 0x5c
   1cf90:	cmp	r1, #0
   1cf94:	beq	1cfd4 <__assert_fail@plt+0xba18>
   1cf98:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1cf9c:	ldr	r2, [sp, #76]	; 0x4c
   1cfa0:	tst	r0, #1
   1cfa4:	bne	1cfd8 <__assert_fail@plt+0xba1c>
   1cfa8:	ldrb	r0, [r1]
   1cfac:	cmp	r0, #0
   1cfb0:	beq	1cfd8 <__assert_fail@plt+0xba1c>
   1cfb4:	add	r1, r1, #1
   1cfb8:	cmp	r9, sl
   1cfbc:	strbcc	r0, [r2, r9]
   1cfc0:	add	r9, r9, #1
   1cfc4:	ldrb	r0, [r1], #1
   1cfc8:	cmp	r0, #0
   1cfcc:	bne	1cfb8 <__assert_fail@plt+0xb9fc>
   1cfd0:	b	1cfd8 <__assert_fail@plt+0xba1c>
   1cfd4:	ldr	r2, [sp, #76]	; 0x4c
   1cfd8:	cmp	r9, sl
   1cfdc:	movcc	r0, #0
   1cfe0:	strbcc	r0, [r2, r9]
   1cfe4:	mov	r0, r9
   1cfe8:	sub	sp, fp, #28
   1cfec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cff0:	mov	r2, #1
   1cff4:	b	1cec0 <__assert_fail@plt+0xb904>
   1cff8:	ldr	r2, [sp, #80]	; 0x50
   1cffc:	mov	r7, #5
   1d000:	b	1cee8 <__assert_fail@plt+0xb92c>
   1d004:	bl	1158c <abort@plt>
   1d008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d00c:	add	fp, sp, #28
   1d010:	sub	sp, sp, #28
   1d014:	movw	r5, #16864	; 0x41e0
   1d018:	cmp	r2, #0
   1d01c:	mov	r4, r1
   1d020:	mov	r7, r0
   1d024:	str	r0, [sp, #20]
   1d028:	movt	r5, #3
   1d02c:	movne	r5, r2
   1d030:	bl	11490 <__errno_location@plt>
   1d034:	mov	sl, r0
   1d038:	ldm	r5, {r0, r1}
   1d03c:	ldr	r2, [r5, #40]	; 0x28
   1d040:	ldr	r3, [r5, #44]	; 0x2c
   1d044:	add	r9, r5, #8
   1d048:	ldr	r6, [sl]
   1d04c:	orr	r8, r1, #1
   1d050:	mov	r1, #0
   1d054:	str	r6, [sp, #24]
   1d058:	stm	sp, {r0, r8, r9}
   1d05c:	str	r2, [sp, #12]
   1d060:	str	r3, [sp, #16]
   1d064:	mov	r0, #0
   1d068:	mov	r2, r7
   1d06c:	mov	r3, r4
   1d070:	mov	r6, r4
   1d074:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1d078:	add	r7, r0, #1
   1d07c:	mov	r0, r7
   1d080:	bl	1ea00 <__assert_fail@plt+0xd444>
   1d084:	mov	r4, r0
   1d088:	ldr	r0, [r5]
   1d08c:	ldr	r2, [r5, #44]	; 0x2c
   1d090:	ldr	r1, [r5, #40]	; 0x28
   1d094:	mov	r3, r6
   1d098:	stm	sp, {r0, r8, r9}
   1d09c:	str	r2, [sp, #16]
   1d0a0:	str	r1, [sp, #12]
   1d0a4:	mov	r0, r4
   1d0a8:	mov	r1, r7
   1d0ac:	ldr	r2, [sp, #20]
   1d0b0:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1d0b4:	ldr	r0, [sp, #24]
   1d0b8:	str	r0, [sl]
   1d0bc:	mov	r0, r4
   1d0c0:	sub	sp, fp, #28
   1d0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d0cc:	add	fp, sp, #28
   1d0d0:	sub	sp, sp, #36	; 0x24
   1d0d4:	movw	r8, #16864	; 0x41e0
   1d0d8:	cmp	r3, #0
   1d0dc:	mov	r4, r2
   1d0e0:	str	r2, [sp, #24]
   1d0e4:	mov	r5, r1
   1d0e8:	mov	r6, r0
   1d0ec:	str	r0, [sp, #20]
   1d0f0:	movt	r8, #3
   1d0f4:	movne	r8, r3
   1d0f8:	bl	11490 <__errno_location@plt>
   1d0fc:	str	r0, [sp, #28]
   1d100:	cmp	r4, #0
   1d104:	add	sl, r8, #8
   1d108:	ldm	r8, {r3, r9}
   1d10c:	ldr	r7, [r0]
   1d110:	ldr	r1, [r8, #40]	; 0x28
   1d114:	ldr	r2, [r8, #44]	; 0x2c
   1d118:	mov	r0, #0
   1d11c:	orreq	r9, r9, #1
   1d120:	str	r7, [sp, #32]
   1d124:	mov	r7, r5
   1d128:	stm	sp, {r3, r9, sl}
   1d12c:	str	r1, [sp, #12]
   1d130:	str	r2, [sp, #16]
   1d134:	mov	r1, #0
   1d138:	mov	r2, r6
   1d13c:	mov	r3, r5
   1d140:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1d144:	add	r4, r0, #1
   1d148:	mov	r5, r0
   1d14c:	mov	r0, r4
   1d150:	bl	1ea00 <__assert_fail@plt+0xd444>
   1d154:	mov	r6, r0
   1d158:	ldr	r0, [r8]
   1d15c:	ldr	r2, [r8, #44]	; 0x2c
   1d160:	ldr	r1, [r8, #40]	; 0x28
   1d164:	mov	r3, r7
   1d168:	stm	sp, {r0, r9, sl}
   1d16c:	str	r2, [sp, #16]
   1d170:	str	r1, [sp, #12]
   1d174:	mov	r0, r6
   1d178:	mov	r1, r4
   1d17c:	ldr	r2, [sp, #20]
   1d180:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1d184:	ldr	r0, [sp, #24]
   1d188:	ldr	r1, [sp, #32]
   1d18c:	ldr	r2, [sp, #28]
   1d190:	cmp	r0, #0
   1d194:	str	r1, [r2]
   1d198:	strne	r5, [r0]
   1d19c:	mov	r0, r6
   1d1a0:	sub	sp, fp, #28
   1d1a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d1a8:	push	{r4, r5, r6, r7, fp, lr}
   1d1ac:	add	fp, sp, #16
   1d1b0:	movw	r4, #16760	; 0x4178
   1d1b4:	movt	r4, #3
   1d1b8:	ldrd	r6, [r4]
   1d1bc:	cmp	r7, #2
   1d1c0:	blt	1d1ec <__assert_fail@plt+0xbc30>
   1d1c4:	add	r5, r6, #12
   1d1c8:	mov	r7, #0
   1d1cc:	ldr	r0, [r5, r7, lsl #3]
   1d1d0:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1d1d4:	ldr	r1, [r4, #4]
   1d1d8:	add	r2, r7, #2
   1d1dc:	add	r0, r7, #1
   1d1e0:	mov	r7, r0
   1d1e4:	cmp	r2, r1
   1d1e8:	blt	1d1cc <__assert_fail@plt+0xbc10>
   1d1ec:	ldr	r0, [r6, #4]
   1d1f0:	movw	r5, #16912	; 0x4210
   1d1f4:	movt	r5, #3
   1d1f8:	cmp	r0, r5
   1d1fc:	beq	1d210 <__assert_fail@plt+0xbc54>
   1d200:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1d204:	mov	r0, #256	; 0x100
   1d208:	str	r0, [r4, #8]
   1d20c:	str	r5, [r4, #12]
   1d210:	add	r5, r4, #8
   1d214:	cmp	r6, r5
   1d218:	beq	1d228 <__assert_fail@plt+0xbc6c>
   1d21c:	mov	r0, r6
   1d220:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1d224:	str	r5, [r4]
   1d228:	mov	r0, #1
   1d22c:	str	r0, [r4, #4]
   1d230:	pop	{r4, r5, r6, r7, fp, pc}
   1d234:	movw	r3, #16864	; 0x41e0
   1d238:	mvn	r2, #0
   1d23c:	movt	r3, #3
   1d240:	b	1d244 <__assert_fail@plt+0xbc88>
   1d244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d248:	add	fp, sp, #28
   1d24c:	sub	sp, sp, #44	; 0x2c
   1d250:	mov	r7, r3
   1d254:	str	r2, [sp, #36]	; 0x24
   1d258:	str	r1, [sp, #32]
   1d25c:	mov	r5, r0
   1d260:	bl	11490 <__errno_location@plt>
   1d264:	cmp	r5, #0
   1d268:	blt	1d3cc <__assert_fail@plt+0xbe10>
   1d26c:	cmn	r5, #-2147483647	; 0x80000001
   1d270:	beq	1d3cc <__assert_fail@plt+0xbe10>
   1d274:	movw	r8, #16760	; 0x4178
   1d278:	mov	r4, r0
   1d27c:	movt	r8, #3
   1d280:	ldr	r6, [r8]
   1d284:	ldr	r1, [r8, #4]
   1d288:	ldr	r0, [r0]
   1d28c:	str	r4, [sp, #28]
   1d290:	cmp	r1, r5
   1d294:	str	r0, [sp, #24]
   1d298:	ble	1d2a4 <__assert_fail@plt+0xbce8>
   1d29c:	mov	sl, r6
   1d2a0:	b	1d308 <__assert_fail@plt+0xbd4c>
   1d2a4:	mov	r0, #8
   1d2a8:	add	r9, r8, #8
   1d2ac:	add	r2, r5, #1
   1d2b0:	str	r1, [fp, #-32]	; 0xffffffe0
   1d2b4:	mvn	r3, #-2147483648	; 0x80000000
   1d2b8:	str	r0, [sp]
   1d2bc:	subs	r0, r6, r9
   1d2c0:	sub	r2, r2, r1
   1d2c4:	sub	r1, fp, #32
   1d2c8:	movne	r0, r6
   1d2cc:	bl	1ec00 <__assert_fail@plt+0xd644>
   1d2d0:	str	r0, [r8]
   1d2d4:	cmp	r6, r9
   1d2d8:	mov	sl, r0
   1d2dc:	ldrdeq	r0, [r8, #8]
   1d2e0:	stmeq	sl, {r0, r1}
   1d2e4:	ldr	r1, [r8, #4]
   1d2e8:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1d2ec:	add	r0, sl, r1, lsl #3
   1d2f0:	sub	r1, r2, r1
   1d2f4:	lsl	r2, r1, #3
   1d2f8:	mov	r1, #0
   1d2fc:	bl	114b4 <memset@plt>
   1d300:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1d304:	str	r0, [r8, #4]
   1d308:	mov	r9, sl
   1d30c:	ldr	r6, [r9, r5, lsl #3]!
   1d310:	ldr	r4, [r9, #4]!
   1d314:	ldm	r7, {r0, r1}
   1d318:	ldr	r2, [r7, #40]	; 0x28
   1d31c:	ldr	r3, [r7, #44]	; 0x2c
   1d320:	orr	r8, r1, #1
   1d324:	add	r1, r7, #8
   1d328:	stm	sp, {r0, r8}
   1d32c:	add	r0, sp, #8
   1d330:	str	r1, [sp, #20]
   1d334:	stm	r0, {r1, r2, r3}
   1d338:	mov	r0, r4
   1d33c:	mov	r1, r6
   1d340:	ldr	r2, [sp, #32]
   1d344:	ldr	r3, [sp, #36]	; 0x24
   1d348:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1d34c:	cmp	r6, r0
   1d350:	bhi	1d3b4 <__assert_fail@plt+0xbdf8>
   1d354:	add	r6, r0, #1
   1d358:	movw	r0, #16912	; 0x4210
   1d35c:	movt	r0, #3
   1d360:	str	r6, [sl, r5, lsl #3]
   1d364:	cmp	r4, r0
   1d368:	beq	1d374 <__assert_fail@plt+0xbdb8>
   1d36c:	mov	r0, r4
   1d370:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1d374:	mov	r0, r6
   1d378:	bl	1ea00 <__assert_fail@plt+0xd444>
   1d37c:	str	r0, [r9]
   1d380:	mov	r4, r0
   1d384:	add	r3, sp, #8
   1d388:	ldr	r0, [r7]
   1d38c:	ldr	r1, [r7, #40]	; 0x28
   1d390:	ldr	r2, [r7, #44]	; 0x2c
   1d394:	stm	sp, {r0, r8}
   1d398:	ldr	r0, [sp, #20]
   1d39c:	stm	r3, {r0, r1, r2}
   1d3a0:	mov	r0, r4
   1d3a4:	mov	r1, r6
   1d3a8:	ldr	r2, [sp, #32]
   1d3ac:	ldr	r3, [sp, #36]	; 0x24
   1d3b0:	bl	1bc9c <__assert_fail@plt+0xa6e0>
   1d3b4:	ldr	r1, [sp, #24]
   1d3b8:	ldr	r0, [sp, #28]
   1d3bc:	str	r1, [r0]
   1d3c0:	mov	r0, r4
   1d3c4:	sub	sp, fp, #28
   1d3c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d3cc:	bl	1158c <abort@plt>
   1d3d0:	movw	r3, #16864	; 0x41e0
   1d3d4:	movt	r3, #3
   1d3d8:	b	1d244 <__assert_fail@plt+0xbc88>
   1d3dc:	movw	r3, #16864	; 0x41e0
   1d3e0:	mov	r1, r0
   1d3e4:	mov	r0, #0
   1d3e8:	mvn	r2, #0
   1d3ec:	movt	r3, #3
   1d3f0:	b	1d244 <__assert_fail@plt+0xbc88>
   1d3f4:	movw	r3, #16864	; 0x41e0
   1d3f8:	mov	r2, r1
   1d3fc:	mov	r1, r0
   1d400:	mov	r0, #0
   1d404:	movt	r3, #3
   1d408:	b	1d244 <__assert_fail@plt+0xbc88>
   1d40c:	push	{fp, lr}
   1d410:	mov	fp, sp
   1d414:	sub	sp, sp, #48	; 0x30
   1d418:	vmov.i32	q8, #0	; 0x00000000
   1d41c:	mov	ip, #32
   1d420:	mov	r3, sp
   1d424:	mov	lr, r2
   1d428:	cmp	r1, #10
   1d42c:	add	r2, r3, #16
   1d430:	vst1.64	{d16-d17}, [r3], ip
   1d434:	vst1.64	{d16-d17}, [r3]
   1d438:	vst1.64	{d16-d17}, [r2]
   1d43c:	beq	1d45c <__assert_fail@plt+0xbea0>
   1d440:	str	r1, [sp]
   1d444:	mov	r3, sp
   1d448:	mov	r1, lr
   1d44c:	mvn	r2, #0
   1d450:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d454:	mov	sp, fp
   1d458:	pop	{fp, pc}
   1d45c:	bl	1158c <abort@plt>
   1d460:	push	{r4, sl, fp, lr}
   1d464:	add	fp, sp, #8
   1d468:	sub	sp, sp, #48	; 0x30
   1d46c:	mov	ip, r3
   1d470:	mov	r3, sp
   1d474:	vmov.i32	q8, #0	; 0x00000000
   1d478:	mov	lr, #32
   1d47c:	cmp	r1, #10
   1d480:	add	r4, r3, #16
   1d484:	vst1.64	{d16-d17}, [r3], lr
   1d488:	vst1.64	{d16-d17}, [r3]
   1d48c:	vst1.64	{d16-d17}, [r4]
   1d490:	beq	1d4b0 <__assert_fail@plt+0xbef4>
   1d494:	str	r1, [sp]
   1d498:	mov	r1, r2
   1d49c:	mov	r3, sp
   1d4a0:	mov	r2, ip
   1d4a4:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d4a8:	sub	sp, fp, #8
   1d4ac:	pop	{r4, sl, fp, pc}
   1d4b0:	bl	1158c <abort@plt>
   1d4b4:	push	{fp, lr}
   1d4b8:	mov	fp, sp
   1d4bc:	sub	sp, sp, #48	; 0x30
   1d4c0:	mov	r3, sp
   1d4c4:	vmov.i32	q8, #0	; 0x00000000
   1d4c8:	mov	ip, #32
   1d4cc:	cmp	r0, #10
   1d4d0:	add	r2, r3, #16
   1d4d4:	vst1.64	{d16-d17}, [r3], ip
   1d4d8:	vst1.64	{d16-d17}, [r3]
   1d4dc:	vst1.64	{d16-d17}, [r2]
   1d4e0:	beq	1d500 <__assert_fail@plt+0xbf44>
   1d4e4:	str	r0, [sp]
   1d4e8:	mov	r3, sp
   1d4ec:	mov	r0, #0
   1d4f0:	mvn	r2, #0
   1d4f4:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d4f8:	mov	sp, fp
   1d4fc:	pop	{fp, pc}
   1d500:	bl	1158c <abort@plt>
   1d504:	push	{fp, lr}
   1d508:	mov	fp, sp
   1d50c:	sub	sp, sp, #48	; 0x30
   1d510:	mov	r3, sp
   1d514:	vmov.i32	q8, #0	; 0x00000000
   1d518:	mov	ip, #32
   1d51c:	cmp	r0, #10
   1d520:	add	lr, r3, #16
   1d524:	vst1.64	{d16-d17}, [r3], ip
   1d528:	vst1.64	{d16-d17}, [r3]
   1d52c:	vst1.64	{d16-d17}, [lr]
   1d530:	beq	1d54c <__assert_fail@plt+0xbf90>
   1d534:	str	r0, [sp]
   1d538:	mov	r3, sp
   1d53c:	mov	r0, #0
   1d540:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d544:	mov	sp, fp
   1d548:	pop	{fp, pc}
   1d54c:	bl	1158c <abort@plt>
   1d550:	push	{r4, sl, fp, lr}
   1d554:	add	fp, sp, #8
   1d558:	sub	sp, sp, #48	; 0x30
   1d55c:	mov	lr, r0
   1d560:	movw	r0, #16864	; 0x41e0
   1d564:	mov	r3, #32
   1d568:	mov	ip, r1
   1d56c:	mov	r4, #1
   1d570:	movt	r0, #3
   1d574:	add	r1, r0, #16
   1d578:	vld1.64	{d16-d17}, [r0], r3
   1d57c:	mov	r3, sp
   1d580:	vld1.64	{d18-d19}, [r1]
   1d584:	add	r1, r3, #16
   1d588:	vld1.64	{d20-d21}, [r0]
   1d58c:	add	r0, r3, #32
   1d590:	vst1.64	{d18-d19}, [r1]
   1d594:	mov	r1, r3
   1d598:	vst1.64	{d20-d21}, [r0]
   1d59c:	mov	r0, #28
   1d5a0:	and	r0, r0, r2, lsr #3
   1d5a4:	and	r2, r2, #31
   1d5a8:	vst1.64	{d16-d17}, [r1], r0
   1d5ac:	ldr	r0, [r1, #8]
   1d5b0:	bic	r4, r4, r0, lsr r2
   1d5b4:	eor	r0, r0, r4, lsl r2
   1d5b8:	mov	r2, ip
   1d5bc:	str	r0, [r1, #8]
   1d5c0:	mov	r0, #0
   1d5c4:	mov	r1, lr
   1d5c8:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d5cc:	sub	sp, fp, #8
   1d5d0:	pop	{r4, sl, fp, pc}
   1d5d4:	push	{fp, lr}
   1d5d8:	mov	fp, sp
   1d5dc:	sub	sp, sp, #48	; 0x30
   1d5e0:	mov	ip, r0
   1d5e4:	movw	r0, #16864	; 0x41e0
   1d5e8:	mov	r3, #32
   1d5ec:	movt	r0, #3
   1d5f0:	add	r2, r0, #16
   1d5f4:	vld1.64	{d16-d17}, [r0], r3
   1d5f8:	mov	r3, sp
   1d5fc:	vld1.64	{d18-d19}, [r2]
   1d600:	add	r2, r3, #16
   1d604:	vld1.64	{d20-d21}, [r0]
   1d608:	add	r0, r3, #32
   1d60c:	vst1.64	{d18-d19}, [r2]
   1d610:	mov	r2, r3
   1d614:	vst1.64	{d20-d21}, [r0]
   1d618:	mov	r0, #28
   1d61c:	and	r0, r0, r1, lsr #3
   1d620:	and	r1, r1, #31
   1d624:	vst1.64	{d16-d17}, [r2], r0
   1d628:	mov	r0, #1
   1d62c:	ldr	lr, [r2, #8]
   1d630:	bic	r0, r0, lr, lsr r1
   1d634:	eor	r0, lr, r0, lsl r1
   1d638:	mov	r1, ip
   1d63c:	str	r0, [r2, #8]
   1d640:	mov	r0, #0
   1d644:	mvn	r2, #0
   1d648:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d64c:	mov	sp, fp
   1d650:	pop	{fp, pc}
   1d654:	push	{fp, lr}
   1d658:	mov	fp, sp
   1d65c:	sub	sp, sp, #48	; 0x30
   1d660:	movw	r2, #16864	; 0x41e0
   1d664:	mov	r3, #32
   1d668:	mov	r1, r0
   1d66c:	movt	r2, #3
   1d670:	add	r0, r2, #16
   1d674:	vld1.64	{d16-d17}, [r2], r3
   1d678:	mov	r3, sp
   1d67c:	vld1.64	{d18-d19}, [r0]
   1d680:	add	r0, r3, #16
   1d684:	vld1.64	{d20-d21}, [r2]
   1d688:	mov	r2, r3
   1d68c:	vst1.64	{d18-d19}, [r0]
   1d690:	add	r0, r3, #32
   1d694:	vst1.64	{d20-d21}, [r0]
   1d698:	mov	r0, #12
   1d69c:	vst1.64	{d16-d17}, [r2], r0
   1d6a0:	ldr	r0, [r2]
   1d6a4:	orr	r0, r0, #67108864	; 0x4000000
   1d6a8:	str	r0, [r2]
   1d6ac:	mov	r0, #0
   1d6b0:	mvn	r2, #0
   1d6b4:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d6b8:	mov	sp, fp
   1d6bc:	pop	{fp, pc}
   1d6c0:	push	{fp, lr}
   1d6c4:	mov	fp, sp
   1d6c8:	sub	sp, sp, #48	; 0x30
   1d6cc:	mov	ip, r1
   1d6d0:	mov	r1, r0
   1d6d4:	movw	r0, #16864	; 0x41e0
   1d6d8:	mov	r3, #32
   1d6dc:	movt	r0, #3
   1d6e0:	add	r2, r0, #16
   1d6e4:	vld1.64	{d16-d17}, [r0], r3
   1d6e8:	mov	r3, sp
   1d6ec:	vld1.64	{d18-d19}, [r2]
   1d6f0:	add	r2, r3, #16
   1d6f4:	vld1.64	{d20-d21}, [r0]
   1d6f8:	add	r0, r3, #32
   1d6fc:	vst1.64	{d18-d19}, [r2]
   1d700:	mov	r2, r3
   1d704:	vst1.64	{d20-d21}, [r0]
   1d708:	mov	r0, #12
   1d70c:	vst1.64	{d16-d17}, [r2], r0
   1d710:	ldr	r0, [r2]
   1d714:	orr	r0, r0, #67108864	; 0x4000000
   1d718:	str	r0, [r2]
   1d71c:	mov	r0, #0
   1d720:	mov	r2, ip
   1d724:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d728:	mov	sp, fp
   1d72c:	pop	{fp, pc}
   1d730:	push	{r4, sl, fp, lr}
   1d734:	add	fp, sp, #8
   1d738:	sub	sp, sp, #96	; 0x60
   1d73c:	mov	ip, r2
   1d740:	mov	r2, sp
   1d744:	vmov.i32	q8, #0	; 0x00000000
   1d748:	mov	r4, #28
   1d74c:	cmp	r1, #10
   1d750:	mov	r3, r2
   1d754:	add	lr, r2, #16
   1d758:	vst1.64	{d16-d17}, [r3], r4
   1d75c:	vst1.64	{d16-d17}, [lr]
   1d760:	vst1.32	{d16-d17}, [r3]
   1d764:	beq	1d7b4 <__assert_fail@plt+0xc1f8>
   1d768:	vld1.64	{d16-d17}, [r2], r4
   1d76c:	vld1.64	{d18-d19}, [lr]
   1d770:	add	r3, sp, #48	; 0x30
   1d774:	add	r4, r3, #4
   1d778:	vld1.32	{d20-d21}, [r2]
   1d77c:	add	r2, r3, #20
   1d780:	vst1.32	{d16-d17}, [r4]
   1d784:	vst1.32	{d18-d19}, [r2]
   1d788:	add	r2, r3, #32
   1d78c:	vst1.32	{d20-d21}, [r2]
   1d790:	str	r1, [sp, #48]	; 0x30
   1d794:	mvn	r2, #0
   1d798:	ldr	r1, [sp, #60]	; 0x3c
   1d79c:	orr	r1, r1, #67108864	; 0x4000000
   1d7a0:	str	r1, [sp, #60]	; 0x3c
   1d7a4:	mov	r1, ip
   1d7a8:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d7ac:	sub	sp, fp, #8
   1d7b0:	pop	{r4, sl, fp, pc}
   1d7b4:	bl	1158c <abort@plt>
   1d7b8:	push	{r4, r5, fp, lr}
   1d7bc:	add	fp, sp, #8
   1d7c0:	sub	sp, sp, #48	; 0x30
   1d7c4:	mov	ip, r3
   1d7c8:	movw	r3, #16864	; 0x41e0
   1d7cc:	mov	lr, #32
   1d7d0:	cmp	r1, #0
   1d7d4:	mov	r5, sp
   1d7d8:	movt	r3, #3
   1d7dc:	cmpne	r2, #0
   1d7e0:	add	r4, r3, #16
   1d7e4:	vld1.64	{d16-d17}, [r3], lr
   1d7e8:	vld1.64	{d18-d19}, [r4]
   1d7ec:	add	r4, r5, #16
   1d7f0:	vld1.64	{d20-d21}, [r3]
   1d7f4:	vst1.64	{d16-d17}, [r5], lr
   1d7f8:	mov	r3, #10
   1d7fc:	vst1.64	{d18-d19}, [r4]
   1d800:	vst1.64	{d20-d21}, [r5]
   1d804:	str	r3, [sp]
   1d808:	bne	1d810 <__assert_fail@plt+0xc254>
   1d80c:	bl	1158c <abort@plt>
   1d810:	str	r2, [sp, #44]	; 0x2c
   1d814:	str	r1, [sp, #40]	; 0x28
   1d818:	mov	r3, sp
   1d81c:	mov	r1, ip
   1d820:	mvn	r2, #0
   1d824:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d828:	sub	sp, fp, #8
   1d82c:	pop	{r4, r5, fp, pc}
   1d830:	push	{r4, r5, fp, lr}
   1d834:	add	fp, sp, #8
   1d838:	sub	sp, sp, #48	; 0x30
   1d83c:	mov	lr, r3
   1d840:	movw	r3, #16864	; 0x41e0
   1d844:	mov	ip, #32
   1d848:	cmp	r1, #0
   1d84c:	mov	r5, sp
   1d850:	movt	r3, #3
   1d854:	cmpne	r2, #0
   1d858:	add	r4, r3, #16
   1d85c:	vld1.64	{d16-d17}, [r3], ip
   1d860:	vld1.64	{d18-d19}, [r4]
   1d864:	add	r4, r5, #16
   1d868:	vld1.64	{d20-d21}, [r3]
   1d86c:	vst1.64	{d16-d17}, [r5], ip
   1d870:	mov	r3, #10
   1d874:	vst1.64	{d18-d19}, [r4]
   1d878:	vst1.64	{d20-d21}, [r5]
   1d87c:	str	r3, [sp]
   1d880:	bne	1d888 <__assert_fail@plt+0xc2cc>
   1d884:	bl	1158c <abort@plt>
   1d888:	ldr	ip, [fp, #8]
   1d88c:	str	r2, [sp, #44]	; 0x2c
   1d890:	str	r1, [sp, #40]	; 0x28
   1d894:	mov	r3, sp
   1d898:	mov	r1, lr
   1d89c:	mov	r2, ip
   1d8a0:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d8a4:	sub	sp, fp, #8
   1d8a8:	pop	{r4, r5, fp, pc}
   1d8ac:	push	{r4, sl, fp, lr}
   1d8b0:	add	fp, sp, #8
   1d8b4:	sub	sp, sp, #48	; 0x30
   1d8b8:	mov	ip, r2
   1d8bc:	movw	r2, #16864	; 0x41e0
   1d8c0:	mov	lr, #32
   1d8c4:	cmp	r0, #0
   1d8c8:	mov	r4, sp
   1d8cc:	movt	r2, #3
   1d8d0:	cmpne	r1, #0
   1d8d4:	add	r3, r2, #16
   1d8d8:	vld1.64	{d16-d17}, [r2], lr
   1d8dc:	vld1.64	{d18-d19}, [r3]
   1d8e0:	add	r3, r4, #16
   1d8e4:	vld1.64	{d20-d21}, [r2]
   1d8e8:	vst1.64	{d16-d17}, [r4], lr
   1d8ec:	mov	r2, #10
   1d8f0:	vst1.64	{d18-d19}, [r3]
   1d8f4:	vst1.64	{d20-d21}, [r4]
   1d8f8:	str	r2, [sp]
   1d8fc:	bne	1d904 <__assert_fail@plt+0xc348>
   1d900:	bl	1158c <abort@plt>
   1d904:	str	r1, [sp, #44]	; 0x2c
   1d908:	str	r0, [sp, #40]	; 0x28
   1d90c:	mov	r3, sp
   1d910:	mov	r0, #0
   1d914:	mov	r1, ip
   1d918:	mvn	r2, #0
   1d91c:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d920:	sub	sp, fp, #8
   1d924:	pop	{r4, sl, fp, pc}
   1d928:	push	{r4, r5, fp, lr}
   1d92c:	add	fp, sp, #8
   1d930:	sub	sp, sp, #48	; 0x30
   1d934:	mov	lr, r2
   1d938:	movw	r2, #16864	; 0x41e0
   1d93c:	mov	ip, r3
   1d940:	mov	r3, #32
   1d944:	cmp	r0, #0
   1d948:	mov	r5, sp
   1d94c:	movt	r2, #3
   1d950:	cmpne	r1, #0
   1d954:	add	r4, r2, #16
   1d958:	vld1.64	{d16-d17}, [r2], r3
   1d95c:	vld1.64	{d18-d19}, [r4]
   1d960:	add	r4, r5, #16
   1d964:	vld1.64	{d20-d21}, [r2]
   1d968:	vst1.64	{d16-d17}, [r5], r3
   1d96c:	mov	r2, #10
   1d970:	vst1.64	{d18-d19}, [r4]
   1d974:	vst1.64	{d20-d21}, [r5]
   1d978:	str	r2, [sp]
   1d97c:	bne	1d984 <__assert_fail@plt+0xc3c8>
   1d980:	bl	1158c <abort@plt>
   1d984:	str	r1, [sp, #44]	; 0x2c
   1d988:	str	r0, [sp, #40]	; 0x28
   1d98c:	mov	r3, sp
   1d990:	mov	r0, #0
   1d994:	mov	r1, lr
   1d998:	mov	r2, ip
   1d99c:	bl	1d244 <__assert_fail@plt+0xbc88>
   1d9a0:	sub	sp, fp, #8
   1d9a4:	pop	{r4, r5, fp, pc}
   1d9a8:	movw	r3, #16712	; 0x4148
   1d9ac:	movt	r3, #3
   1d9b0:	b	1d244 <__assert_fail@plt+0xbc88>
   1d9b4:	movw	r3, #16712	; 0x4148
   1d9b8:	mov	r2, r1
   1d9bc:	mov	r1, r0
   1d9c0:	mov	r0, #0
   1d9c4:	movt	r3, #3
   1d9c8:	b	1d244 <__assert_fail@plt+0xbc88>
   1d9cc:	movw	r3, #16712	; 0x4148
   1d9d0:	mvn	r2, #0
   1d9d4:	movt	r3, #3
   1d9d8:	b	1d244 <__assert_fail@plt+0xbc88>
   1d9dc:	movw	r3, #16712	; 0x4148
   1d9e0:	mov	r1, r0
   1d9e4:	mov	r0, #0
   1d9e8:	mvn	r2, #0
   1d9ec:	movt	r3, #3
   1d9f0:	b	1d244 <__assert_fail@plt+0xbc88>
   1d9f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1d9f8:	add	fp, sp, #24
   1d9fc:	mov	r4, r0
   1da00:	cmp	r0, #0
   1da04:	beq	1da38 <__assert_fail@plt+0xc47c>
   1da08:	mov	r0, r4
   1da0c:	bl	1146c <strlen@plt>
   1da10:	add	r5, r0, #1
   1da14:	cmp	r5, #58	; 0x3a
   1da18:	bls	1da3c <__assert_fail@plt+0xc480>
   1da1c:	add	r0, r0, #10
   1da20:	bic	r0, r0, #3
   1da24:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1da28:	mov	r6, r0
   1da2c:	cmp	r0, #0
   1da30:	bne	1da50 <__assert_fail@plt+0xc494>
   1da34:	b	1da88 <__assert_fail@plt+0xc4cc>
   1da38:	mov	r5, #0
   1da3c:	mov	r0, #64	; 0x40
   1da40:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1da44:	mov	r6, r0
   1da48:	cmp	r0, #0
   1da4c:	beq	1da88 <__assert_fail@plt+0xc4cc>
   1da50:	cmp	r4, #0
   1da54:	mov	r0, r4
   1da58:	mov	r8, #0
   1da5c:	mov	r7, r6
   1da60:	movwne	r0, #1
   1da64:	str	r8, [r6]
   1da68:	strb	r0, [r6, #4]
   1da6c:	strb	r8, [r7, #5]!
   1da70:	beq	1da88 <__assert_fail@plt+0xc4cc>
   1da74:	mov	r0, r7
   1da78:	mov	r1, r4
   1da7c:	mov	r2, r5
   1da80:	bl	112f8 <memcpy@plt>
   1da84:	strb	r8, [r7, r5]
   1da88:	mov	r0, r6
   1da8c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1da90:	push	{r4, sl, fp, lr}
   1da94:	add	fp, sp, #8
   1da98:	cmp	r0, #2
   1da9c:	popcc	{r4, sl, fp, pc}
   1daa0:	ldr	r4, [r0]
   1daa4:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1daa8:	cmp	r4, #0
   1daac:	mov	r0, r4
   1dab0:	bne	1daa0 <__assert_fail@plt+0xc4e4>
   1dab4:	pop	{r4, sl, fp, pc}
   1dab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dabc:	add	fp, sp, #28
   1dac0:	sub	sp, sp, #4
   1dac4:	mov	r9, r2
   1dac8:	mov	r7, r1
   1dacc:	cmp	r0, #0
   1dad0:	beq	1db48 <__assert_fail@plt+0xc58c>
   1dad4:	mov	r6, r0
   1dad8:	movw	r0, #10298	; 0x283a
   1dadc:	movt	r0, #2
   1dae0:	bl	113d0 <getenv@plt>
   1dae4:	mov	r4, r0
   1dae8:	ldrb	r0, [r6, #4]
   1daec:	cmp	r4, #0
   1daf0:	beq	1db5c <__assert_fail@plt+0xc5a0>
   1daf4:	cmp	r0, #0
   1daf8:	beq	1db10 <__assert_fail@plt+0xc554>
   1dafc:	add	r0, r6, #5
   1db00:	mov	r1, r4
   1db04:	bl	112a4 <strcmp@plt>
   1db08:	cmp	r0, #0
   1db0c:	beq	1dc20 <__assert_fail@plt+0xc664>
   1db10:	mov	r0, r4
   1db14:	bl	1146c <strlen@plt>
   1db18:	add	sl, r0, #1
   1db1c:	mov	r8, #1
   1db20:	cmp	sl, #58	; 0x3a
   1db24:	bls	1db6c <__assert_fail@plt+0xc5b0>
   1db28:	add	r0, r0, #10
   1db2c:	bic	r0, r0, #3
   1db30:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1db34:	cmp	r0, #0
   1db38:	bne	1db7c <__assert_fail@plt+0xc5c0>
   1db3c:	mov	r0, #0
   1db40:	sub	sp, fp, #28
   1db44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1db48:	mov	r0, r7
   1db4c:	mov	r1, r9
   1db50:	sub	sp, fp, #28
   1db54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db58:	b	1128c <gmtime_r@plt>
   1db5c:	mov	r8, #0
   1db60:	cmp	r0, #0
   1db64:	mov	sl, #0
   1db68:	beq	1dc20 <__assert_fail@plt+0xc664>
   1db6c:	mov	r0, #64	; 0x40
   1db70:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1db74:	cmp	r0, #0
   1db78:	beq	1db3c <__assert_fail@plt+0xc580>
   1db7c:	mov	r5, r0
   1db80:	str	r7, [sp]
   1db84:	strb	r8, [r0, #4]
   1db88:	mov	r0, #0
   1db8c:	cmp	r8, #0
   1db90:	mov	r7, r5
   1db94:	str	r0, [r5]
   1db98:	strb	r0, [r7, #5]!
   1db9c:	beq	1dbb8 <__assert_fail@plt+0xc5fc>
   1dba0:	mov	r0, r7
   1dba4:	mov	r1, r4
   1dba8:	mov	r2, sl
   1dbac:	mov	r8, #0
   1dbb0:	bl	112f8 <memcpy@plt>
   1dbb4:	strb	r8, [r7, sl]
   1dbb8:	ldrb	r0, [r6, #4]
   1dbbc:	cmp	r0, #0
   1dbc0:	beq	1dc28 <__assert_fail@plt+0xc66c>
   1dbc4:	movw	r0, #10298	; 0x283a
   1dbc8:	add	r1, r6, #5
   1dbcc:	mov	r2, #1
   1dbd0:	movt	r0, #2
   1dbd4:	bl	11484 <setenv@plt>
   1dbd8:	ldr	r7, [sp]
   1dbdc:	cmp	r0, #0
   1dbe0:	beq	1dc40 <__assert_fail@plt+0xc684>
   1dbe4:	bl	11490 <__errno_location@plt>
   1dbe8:	ldr	r6, [r0]
   1dbec:	mov	r4, r0
   1dbf0:	cmp	r5, #2
   1dbf4:	bcc	1dc10 <__assert_fail@plt+0xc654>
   1dbf8:	ldr	r7, [r5]
   1dbfc:	mov	r0, r5
   1dc00:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1dc04:	cmp	r7, #0
   1dc08:	mov	r5, r7
   1dc0c:	bne	1dbf8 <__assert_fail@plt+0xc63c>
   1dc10:	str	r6, [r4]
   1dc14:	mov	r0, #0
   1dc18:	sub	sp, fp, #28
   1dc1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dc20:	mov	r5, #1
   1dc24:	b	1dc44 <__assert_fail@plt+0xc688>
   1dc28:	movw	r0, #10298	; 0x283a
   1dc2c:	movt	r0, #2
   1dc30:	bl	11568 <unsetenv@plt>
   1dc34:	ldr	r7, [sp]
   1dc38:	cmp	r0, #0
   1dc3c:	bne	1dbe4 <__assert_fail@plt+0xc628>
   1dc40:	bl	11370 <tzset@plt>
   1dc44:	mov	r0, r7
   1dc48:	mov	r1, r9
   1dc4c:	bl	1134c <localtime_r@plt>
   1dc50:	cmp	r0, #0
   1dc54:	beq	1dcd0 <__assert_fail@plt+0xc714>
   1dc58:	mov	r0, r6
   1dc5c:	mov	r1, r9
   1dc60:	bl	1dde0 <__assert_fail@plt+0xc824>
   1dc64:	mov	r6, r0
   1dc68:	cmp	r5, #1
   1dc6c:	beq	1dd3c <__assert_fail@plt+0xc780>
   1dc70:	bl	11490 <__errno_location@plt>
   1dc74:	mov	r8, r0
   1dc78:	ldr	sl, [r0]
   1dc7c:	ldrb	r0, [r5, #4]
   1dc80:	cmp	r0, #0
   1dc84:	beq	1dd44 <__assert_fail@plt+0xc788>
   1dc88:	movw	r0, #10298	; 0x283a
   1dc8c:	add	r1, r5, #5
   1dc90:	mov	r2, #1
   1dc94:	movt	r0, #2
   1dc98:	bl	11484 <setenv@plt>
   1dc9c:	cmp	r0, #0
   1dca0:	beq	1dd58 <__assert_fail@plt+0xc79c>
   1dca4:	ldr	sl, [r8]
   1dca8:	mov	r4, #0
   1dcac:	cmp	r5, #2
   1dcb0:	bcc	1ddc0 <__assert_fail@plt+0xc804>
   1dcb4:	ldr	r7, [r5]
   1dcb8:	mov	r0, r5
   1dcbc:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1dcc0:	cmp	r7, #0
   1dcc4:	mov	r5, r7
   1dcc8:	bne	1dcb4 <__assert_fail@plt+0xc6f8>
   1dccc:	b	1ddc0 <__assert_fail@plt+0xc804>
   1dcd0:	mov	r6, #0
   1dcd4:	cmp	r5, #1
   1dcd8:	beq	1dd3c <__assert_fail@plt+0xc780>
   1dcdc:	bl	11490 <__errno_location@plt>
   1dce0:	mov	r8, r0
   1dce4:	ldr	sl, [r0]
   1dce8:	ldrb	r0, [r5, #4]
   1dcec:	cmp	r0, #0
   1dcf0:	beq	1dd84 <__assert_fail@plt+0xc7c8>
   1dcf4:	movw	r0, #10298	; 0x283a
   1dcf8:	add	r1, r5, #5
   1dcfc:	mov	r2, #1
   1dd00:	movt	r0, #2
   1dd04:	bl	11484 <setenv@plt>
   1dd08:	cmp	r0, #0
   1dd0c:	beq	1dd98 <__assert_fail@plt+0xc7dc>
   1dd10:	ldr	sl, [r8]
   1dd14:	mov	r4, #0
   1dd18:	cmp	r5, #2
   1dd1c:	bcc	1ddc0 <__assert_fail@plt+0xc804>
   1dd20:	ldr	r7, [r5]
   1dd24:	mov	r0, r5
   1dd28:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1dd2c:	cmp	r7, #0
   1dd30:	mov	r5, r7
   1dd34:	bne	1dd20 <__assert_fail@plt+0xc764>
   1dd38:	b	1ddc0 <__assert_fail@plt+0xc804>
   1dd3c:	mov	r4, #1
   1dd40:	b	1ddc4 <__assert_fail@plt+0xc808>
   1dd44:	movw	r0, #10298	; 0x283a
   1dd48:	movt	r0, #2
   1dd4c:	bl	11568 <unsetenv@plt>
   1dd50:	cmp	r0, #0
   1dd54:	bne	1dca4 <__assert_fail@plt+0xc6e8>
   1dd58:	bl	11370 <tzset@plt>
   1dd5c:	mov	r4, #1
   1dd60:	cmp	r5, #2
   1dd64:	bcc	1ddc0 <__assert_fail@plt+0xc804>
   1dd68:	ldr	r7, [r5]
   1dd6c:	mov	r0, r5
   1dd70:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1dd74:	cmp	r7, #0
   1dd78:	mov	r5, r7
   1dd7c:	bne	1dd68 <__assert_fail@plt+0xc7ac>
   1dd80:	b	1ddc0 <__assert_fail@plt+0xc804>
   1dd84:	movw	r0, #10298	; 0x283a
   1dd88:	movt	r0, #2
   1dd8c:	bl	11568 <unsetenv@plt>
   1dd90:	cmp	r0, #0
   1dd94:	bne	1dd10 <__assert_fail@plt+0xc754>
   1dd98:	bl	11370 <tzset@plt>
   1dd9c:	mov	r4, #1
   1dda0:	cmp	r5, #2
   1dda4:	bcc	1ddc0 <__assert_fail@plt+0xc804>
   1dda8:	ldr	r7, [r5]
   1ddac:	mov	r0, r5
   1ddb0:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1ddb4:	cmp	r7, #0
   1ddb8:	mov	r5, r7
   1ddbc:	bne	1dda8 <__assert_fail@plt+0xc7ec>
   1ddc0:	str	sl, [r8]
   1ddc4:	cmp	r6, #0
   1ddc8:	moveq	r9, r6
   1ddcc:	cmp	r4, #0
   1ddd0:	moveq	r9, r4
   1ddd4:	mov	r0, r9
   1ddd8:	sub	sp, fp, #28
   1dddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dde0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dde4:	add	fp, sp, #28
   1dde8:	sub	sp, sp, #4
   1ddec:	ldr	r7, [r1, #40]	; 0x28
   1ddf0:	mov	r8, #1
   1ddf4:	cmp	r7, #0
   1ddf8:	beq	1de9c <__assert_fail@plt+0xc8e0>
   1ddfc:	mov	r5, r1
   1de00:	mov	r6, r0
   1de04:	cmp	r7, r1
   1de08:	bcc	1de18 <__assert_fail@plt+0xc85c>
   1de0c:	add	r0, r5, #44	; 0x2c
   1de10:	cmp	r7, r0
   1de14:	bcc	1de9c <__assert_fail@plt+0xc8e0>
   1de18:	ldrb	r0, [r7]
   1de1c:	cmp	r0, #0
   1de20:	beq	1de90 <__assert_fail@plt+0xc8d4>
   1de24:	add	r4, r6, #5
   1de28:	b	1de3c <__assert_fail@plt+0xc880>
   1de2c:	ldr	r0, [r6]
   1de30:	cmp	r0, #0
   1de34:	addne	r4, r0, #5
   1de38:	movne	r6, r0
   1de3c:	mov	r0, r4
   1de40:	mov	r1, r7
   1de44:	bl	112a4 <strcmp@plt>
   1de48:	cmp	r0, #0
   1de4c:	beq	1df40 <__assert_fail@plt+0xc984>
   1de50:	ldrb	r0, [r4]
   1de54:	cmp	r0, #0
   1de58:	bne	1de74 <__assert_fail@plt+0xc8b8>
   1de5c:	add	r0, r6, #5
   1de60:	cmp	r4, r0
   1de64:	bne	1dea8 <__assert_fail@plt+0xc8ec>
   1de68:	ldrb	r0, [r6, #4]
   1de6c:	cmp	r0, #0
   1de70:	beq	1dea8 <__assert_fail@plt+0xc8ec>
   1de74:	mov	r0, r4
   1de78:	bl	1146c <strlen@plt>
   1de7c:	add	r4, r4, r0
   1de80:	ldrb	r0, [r4, #1]!
   1de84:	cmp	r0, #0
   1de88:	bne	1de3c <__assert_fail@plt+0xc880>
   1de8c:	b	1de2c <__assert_fail@plt+0xc870>
   1de90:	movw	r4, #13217	; 0x33a1
   1de94:	movt	r4, #2
   1de98:	str	r4, [r5, #40]	; 0x28
   1de9c:	mov	r0, r8
   1dea0:	sub	sp, fp, #28
   1dea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dea8:	add	r0, r6, #64	; 0x40
   1deac:	sub	sl, r0, r4
   1deb0:	mov	r0, r7
   1deb4:	bl	1146c <strlen@plt>
   1deb8:	add	r9, r0, #1
   1debc:	cmp	r9, sl
   1dec0:	bge	1deec <__assert_fail@plt+0xc930>
   1dec4:	mov	r0, r4
   1dec8:	mov	r1, r7
   1decc:	mov	r2, r9
   1ded0:	bl	112f8 <memcpy@plt>
   1ded4:	mov	r0, #0
   1ded8:	strb	r0, [r4, r9]
   1dedc:	str	r4, [r5, #40]	; 0x28
   1dee0:	mov	r0, r8
   1dee4:	sub	sp, fp, #28
   1dee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1deec:	add	r0, r0, #10
   1def0:	cmp	r9, #59	; 0x3b
   1def4:	bic	r0, r0, #3
   1def8:	movwcc	r0, #64	; 0x40
   1defc:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1df00:	cmp	r0, #0
   1df04:	beq	1df50 <__assert_fail@plt+0xc994>
   1df08:	mov	sl, r0
   1df0c:	mov	r0, #0
   1df10:	mov	r1, r7
   1df14:	mov	r2, r9
   1df18:	str	r0, [sl]
   1df1c:	mov	r0, #1
   1df20:	add	r4, sl, #5
   1df24:	strh	r0, [sl, #4]
   1df28:	mov	r0, r4
   1df2c:	bl	112f8 <memcpy@plt>
   1df30:	mov	r0, #0
   1df34:	strb	r0, [r4, r9]
   1df38:	str	sl, [r6]
   1df3c:	strb	r0, [sl, #4]
   1df40:	str	r4, [r5, #40]	; 0x28
   1df44:	mov	r0, r8
   1df48:	sub	sp, fp, #28
   1df4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df50:	mov	r8, #0
   1df54:	str	r8, [r6]
   1df58:	mov	r0, r8
   1df5c:	sub	sp, fp, #28
   1df60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df68:	add	fp, sp, #28
   1df6c:	sub	sp, sp, #52	; 0x34
   1df70:	mov	r9, r1
   1df74:	cmp	r0, #0
   1df78:	beq	1dff4 <__assert_fail@plt+0xca38>
   1df7c:	mov	r7, r0
   1df80:	movw	r0, #10298	; 0x283a
   1df84:	movt	r0, #2
   1df88:	bl	113d0 <getenv@plt>
   1df8c:	mov	r6, r0
   1df90:	ldrb	r0, [r7, #4]
   1df94:	cmp	r6, #0
   1df98:	beq	1e004 <__assert_fail@plt+0xca48>
   1df9c:	cmp	r0, #0
   1dfa0:	beq	1dfb8 <__assert_fail@plt+0xc9fc>
   1dfa4:	add	r0, r7, #5
   1dfa8:	mov	r1, r6
   1dfac:	bl	112a4 <strcmp@plt>
   1dfb0:	cmp	r0, #0
   1dfb4:	beq	1e0c8 <__assert_fail@plt+0xcb0c>
   1dfb8:	mov	r0, r6
   1dfbc:	bl	1146c <strlen@plt>
   1dfc0:	add	r8, r0, #1
   1dfc4:	mov	sl, #1
   1dfc8:	cmp	r8, #58	; 0x3a
   1dfcc:	bls	1e014 <__assert_fail@plt+0xca58>
   1dfd0:	add	r0, r0, #10
   1dfd4:	bic	r0, r0, #3
   1dfd8:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1dfdc:	mvn	r4, #0
   1dfe0:	cmp	r0, #0
   1dfe4:	bne	1e028 <__assert_fail@plt+0xca6c>
   1dfe8:	mov	r0, r4
   1dfec:	sub	sp, fp, #28
   1dff0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dff4:	mov	r0, r9
   1dff8:	sub	sp, fp, #28
   1dffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e000:	b	11538 <timegm@plt>
   1e004:	mov	sl, #0
   1e008:	cmp	r0, #0
   1e00c:	mov	r8, #0
   1e010:	beq	1e0c8 <__assert_fail@plt+0xcb0c>
   1e014:	mov	r0, #64	; 0x40
   1e018:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1e01c:	mvn	r4, #0
   1e020:	cmp	r0, #0
   1e024:	beq	1dfe8 <__assert_fail@plt+0xca2c>
   1e028:	mov	r5, r0
   1e02c:	strb	sl, [r0, #4]
   1e030:	mov	r0, #0
   1e034:	cmp	sl, #0
   1e038:	mov	r4, r5
   1e03c:	str	r0, [r5]
   1e040:	strb	r0, [r4, #5]!
   1e044:	beq	1e060 <__assert_fail@plt+0xcaa4>
   1e048:	mov	r0, r4
   1e04c:	mov	r1, r6
   1e050:	mov	r2, r8
   1e054:	mov	sl, #0
   1e058:	bl	112f8 <memcpy@plt>
   1e05c:	strb	sl, [r4, r8]
   1e060:	ldrb	r0, [r7, #4]
   1e064:	cmp	r0, #0
   1e068:	beq	1e0d0 <__assert_fail@plt+0xcb14>
   1e06c:	movw	r0, #10298	; 0x283a
   1e070:	add	r1, r7, #5
   1e074:	mov	r2, #1
   1e078:	movt	r0, #2
   1e07c:	bl	11484 <setenv@plt>
   1e080:	mvn	r4, #0
   1e084:	cmp	r0, #0
   1e088:	beq	1e0e8 <__assert_fail@plt+0xcb2c>
   1e08c:	bl	11490 <__errno_location@plt>
   1e090:	ldr	r8, [r0]
   1e094:	mov	r6, r0
   1e098:	cmp	r5, #2
   1e09c:	bcc	1e0b8 <__assert_fail@plt+0xcafc>
   1e0a0:	ldr	r7, [r5]
   1e0a4:	mov	r0, r5
   1e0a8:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1e0ac:	cmp	r7, #0
   1e0b0:	mov	r5, r7
   1e0b4:	bne	1e0a0 <__assert_fail@plt+0xcae4>
   1e0b8:	str	r8, [r6]
   1e0bc:	mov	r0, r4
   1e0c0:	sub	sp, fp, #28
   1e0c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0c8:	mov	r5, #1
   1e0cc:	b	1e0ec <__assert_fail@plt+0xcb30>
   1e0d0:	movw	r0, #10298	; 0x283a
   1e0d4:	movt	r0, #2
   1e0d8:	bl	11568 <unsetenv@plt>
   1e0dc:	mvn	r4, #0
   1e0e0:	cmp	r0, #0
   1e0e4:	bne	1e08c <__assert_fail@plt+0xcad0>
   1e0e8:	bl	11370 <tzset@plt>
   1e0ec:	mov	r1, #32
   1e0f0:	mov	r2, r9
   1e0f4:	add	r0, sp, #8
   1e0f8:	vld1.32	{d16-d17}, [r2], r1
   1e0fc:	mov	r3, r0
   1e100:	vst1.32	{d16-d17}, [r3], r1
   1e104:	ldr	r1, [r9, #16]
   1e108:	ldr	r6, [r9, #20]
   1e10c:	str	r1, [sp, #24]
   1e110:	mvn	r1, #0
   1e114:	str	r1, [sp, #36]	; 0x24
   1e118:	str	r6, [sp, #28]
   1e11c:	ldr	r1, [r2]
   1e120:	str	r1, [r3]
   1e124:	bl	112bc <mktime@plt>
   1e128:	ldr	r1, [sp, #36]	; 0x24
   1e12c:	cmn	r1, #1
   1e130:	ble	1e1b8 <__assert_fail@plt+0xcbfc>
   1e134:	add	r8, sp, #8
   1e138:	str	r0, [sp, #4]
   1e13c:	mov	r0, r7
   1e140:	mov	r1, r8
   1e144:	bl	1dde0 <__assert_fail@plt+0xc824>
   1e148:	mov	sl, r0
   1e14c:	cmp	r5, #1
   1e150:	beq	1e21c <__assert_fail@plt+0xcc60>
   1e154:	bl	11490 <__errno_location@plt>
   1e158:	mov	r7, r0
   1e15c:	ldr	r4, [r0]
   1e160:	ldrb	r0, [r5, #4]
   1e164:	cmp	r0, #0
   1e168:	beq	1e23c <__assert_fail@plt+0xcc80>
   1e16c:	movw	r0, #10298	; 0x283a
   1e170:	add	r1, r5, #5
   1e174:	mov	r2, #1
   1e178:	movt	r0, #2
   1e17c:	bl	11484 <setenv@plt>
   1e180:	cmp	r0, #0
   1e184:	beq	1e250 <__assert_fail@plt+0xcc94>
   1e188:	ldr	r4, [r7]
   1e18c:	mov	r6, #0
   1e190:	cmp	r5, #2
   1e194:	bcc	1e280 <__assert_fail@plt+0xccc4>
   1e198:	str	r4, [sp]
   1e19c:	ldr	r4, [r5]
   1e1a0:	mov	r0, r5
   1e1a4:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1e1a8:	cmp	r4, #0
   1e1ac:	mov	r5, r4
   1e1b0:	bne	1e19c <__assert_fail@plt+0xcbe0>
   1e1b4:	b	1e27c <__assert_fail@plt+0xccc0>
   1e1b8:	cmp	r5, #1
   1e1bc:	beq	1e22c <__assert_fail@plt+0xcc70>
   1e1c0:	bl	11490 <__errno_location@plt>
   1e1c4:	mov	r4, r0
   1e1c8:	ldr	r6, [r0]
   1e1cc:	ldrb	r0, [r5, #4]
   1e1d0:	cmp	r0, #0
   1e1d4:	beq	1e2c4 <__assert_fail@plt+0xcd08>
   1e1d8:	movw	r0, #10298	; 0x283a
   1e1dc:	add	r1, r5, #5
   1e1e0:	mov	r2, #1
   1e1e4:	movt	r0, #2
   1e1e8:	bl	11484 <setenv@plt>
   1e1ec:	cmp	r0, #0
   1e1f0:	beq	1e2d8 <__assert_fail@plt+0xcd1c>
   1e1f4:	ldr	r6, [r4]
   1e1f8:	cmp	r5, #2
   1e1fc:	bcc	1e2fc <__assert_fail@plt+0xcd40>
   1e200:	ldr	r7, [r5]
   1e204:	mov	r0, r5
   1e208:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1e20c:	cmp	r7, #0
   1e210:	mov	r5, r7
   1e214:	bne	1e200 <__assert_fail@plt+0xcc44>
   1e218:	b	1e2fc <__assert_fail@plt+0xcd40>
   1e21c:	mov	r6, #1
   1e220:	and	r0, sl, r6
   1e224:	cmp	r0, #1
   1e228:	beq	1e290 <__assert_fail@plt+0xccd4>
   1e22c:	mvn	r4, #0
   1e230:	mov	r0, r4
   1e234:	sub	sp, fp, #28
   1e238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e23c:	movw	r0, #10298	; 0x283a
   1e240:	movt	r0, #2
   1e244:	bl	11568 <unsetenv@plt>
   1e248:	cmp	r0, #0
   1e24c:	bne	1e188 <__assert_fail@plt+0xcbcc>
   1e250:	bl	11370 <tzset@plt>
   1e254:	mov	r6, #1
   1e258:	cmp	r5, #2
   1e25c:	bcc	1e280 <__assert_fail@plt+0xccc4>
   1e260:	str	r4, [sp]
   1e264:	ldr	r4, [r5]
   1e268:	mov	r0, r5
   1e26c:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1e270:	cmp	r4, #0
   1e274:	mov	r5, r4
   1e278:	bne	1e264 <__assert_fail@plt+0xcca8>
   1e27c:	ldr	r4, [sp]
   1e280:	str	r4, [r7]
   1e284:	and	r0, sl, r6
   1e288:	cmp	r0, #1
   1e28c:	bne	1e22c <__assert_fail@plt+0xcc70>
   1e290:	mov	r0, #28
   1e294:	add	r1, r8, #16
   1e298:	ldr	r4, [sp, #4]
   1e29c:	vld1.32	{d16-d17}, [r8], r0
   1e2a0:	vld1.64	{d18-d19}, [r1]
   1e2a4:	add	r1, r9, #16
   1e2a8:	vld1.32	{d20-d21}, [r8]
   1e2ac:	vst1.32	{d16-d17}, [r9], r0
   1e2b0:	vst1.32	{d18-d19}, [r1]
   1e2b4:	vst1.32	{d20-d21}, [r9]
   1e2b8:	mov	r0, r4
   1e2bc:	sub	sp, fp, #28
   1e2c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e2c4:	movw	r0, #10298	; 0x283a
   1e2c8:	movt	r0, #2
   1e2cc:	bl	11568 <unsetenv@plt>
   1e2d0:	cmp	r0, #0
   1e2d4:	bne	1e1f4 <__assert_fail@plt+0xcc38>
   1e2d8:	bl	11370 <tzset@plt>
   1e2dc:	cmp	r5, #2
   1e2e0:	bcc	1e2fc <__assert_fail@plt+0xcd40>
   1e2e4:	ldr	r7, [r5]
   1e2e8:	mov	r0, r5
   1e2ec:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1e2f0:	cmp	r7, #0
   1e2f4:	mov	r5, r7
   1e2f8:	bne	1e2e4 <__assert_fail@plt+0xcd28>
   1e2fc:	str	r6, [r4]
   1e300:	mvn	r4, #0
   1e304:	mov	r0, r4
   1e308:	sub	sp, fp, #28
   1e30c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e310:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e314:	add	fp, sp, #24
   1e318:	sub	sp, sp, #32
   1e31c:	ldr	r6, [fp, #12]
   1e320:	ldr	r7, [fp, #8]
   1e324:	mov	r4, r2
   1e328:	mov	r8, r0
   1e32c:	cmp	r1, #0
   1e330:	beq	1e358 <__assert_fail@plt+0xcd9c>
   1e334:	movw	r2, #13828	; 0x3604
   1e338:	mov	r5, r1
   1e33c:	str	r3, [sp, #4]
   1e340:	str	r4, [sp]
   1e344:	mov	r0, r8
   1e348:	mov	r1, #1
   1e34c:	movt	r2, #2
   1e350:	mov	r3, r5
   1e354:	b	1e370 <__assert_fail@plt+0xcdb4>
   1e358:	movw	r2, #13840	; 0x3610
   1e35c:	str	r3, [sp]
   1e360:	mov	r0, r8
   1e364:	mov	r1, #1
   1e368:	mov	r3, r4
   1e36c:	movt	r2, #2
   1e370:	bl	114d8 <__fprintf_chk@plt>
   1e374:	movw	r1, #13847	; 0x3617
   1e378:	mov	r0, #0
   1e37c:	mov	r2, #5
   1e380:	movt	r1, #2
   1e384:	bl	11328 <dcgettext@plt>
   1e388:	movw	r2, #14565	; 0x38e5
   1e38c:	mov	r3, r0
   1e390:	movw	r0, #2022	; 0x7e6
   1e394:	mov	r1, #1
   1e398:	str	r0, [sp]
   1e39c:	movt	r2, #2
   1e3a0:	mov	r0, r8
   1e3a4:	bl	114d8 <__fprintf_chk@plt>
   1e3a8:	movw	r4, #13216	; 0x33a0
   1e3ac:	mov	r1, r8
   1e3b0:	movt	r4, #2
   1e3b4:	mov	r0, r4
   1e3b8:	bl	11274 <fputs_unlocked@plt>
   1e3bc:	movw	r1, #13851	; 0x361b
   1e3c0:	mov	r0, #0
   1e3c4:	mov	r2, #5
   1e3c8:	movt	r1, #2
   1e3cc:	bl	11328 <dcgettext@plt>
   1e3d0:	movw	r3, #14022	; 0x36c6
   1e3d4:	mov	r2, r0
   1e3d8:	mov	r0, r8
   1e3dc:	mov	r1, #1
   1e3e0:	movt	r3, #2
   1e3e4:	bl	114d8 <__fprintf_chk@plt>
   1e3e8:	mov	r0, r4
   1e3ec:	mov	r1, r8
   1e3f0:	bl	11274 <fputs_unlocked@plt>
   1e3f4:	cmp	r6, #9
   1e3f8:	bhi	1e434 <__assert_fail@plt+0xce78>
   1e3fc:	add	r0, pc, #0
   1e400:	ldr	pc, [r0, r6, lsl #2]
   1e404:	andeq	lr, r1, ip, lsr #8
   1e408:	andeq	lr, r1, r0, asr #8
   1e40c:	andeq	lr, r1, r0, ror r4
   1e410:	muleq	r1, r8, r4
   1e414:	andeq	lr, r1, r0, asr #9
   1e418:	andeq	lr, r1, r8, ror #9
   1e41c:	andeq	lr, r1, r0, lsl r5
   1e420:	andeq	lr, r1, r8, asr #10
   1e424:	strdeq	lr, [r1], -r0
   1e428:	muleq	r1, r8, r5
   1e42c:	sub	sp, fp, #24
   1e430:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e434:	movw	r1, #14375	; 0x3827
   1e438:	movt	r1, #2
   1e43c:	b	1e5a0 <__assert_fail@plt+0xcfe4>
   1e440:	movw	r1, #14056	; 0x36e8
   1e444:	mov	r0, #0
   1e448:	mov	r2, #5
   1e44c:	movt	r1, #2
   1e450:	bl	11328 <dcgettext@plt>
   1e454:	ldr	r3, [r7]
   1e458:	mov	r2, r0
   1e45c:	mov	r0, r8
   1e460:	mov	r1, #1
   1e464:	sub	sp, fp, #24
   1e468:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1e46c:	b	114d8 <__fprintf_chk@plt>
   1e470:	movw	r1, #14072	; 0x36f8
   1e474:	mov	r0, #0
   1e478:	mov	r2, #5
   1e47c:	movt	r1, #2
   1e480:	bl	11328 <dcgettext@plt>
   1e484:	mov	r2, r0
   1e488:	ldr	r3, [r7]
   1e48c:	ldr	r0, [r7, #4]
   1e490:	str	r0, [sp]
   1e494:	b	1e584 <__assert_fail@plt+0xcfc8>
   1e498:	movw	r1, #14095	; 0x370f
   1e49c:	mov	r0, #0
   1e4a0:	mov	r2, #5
   1e4a4:	movt	r1, #2
   1e4a8:	bl	11328 <dcgettext@plt>
   1e4ac:	ldr	r3, [r7]
   1e4b0:	mov	r2, r0
   1e4b4:	ldmib	r7, {r0, r1}
   1e4b8:	stm	sp, {r0, r1}
   1e4bc:	b	1e584 <__assert_fail@plt+0xcfc8>
   1e4c0:	movw	r1, #14123	; 0x372b
   1e4c4:	mov	r0, #0
   1e4c8:	mov	r2, #5
   1e4cc:	movt	r1, #2
   1e4d0:	bl	11328 <dcgettext@plt>
   1e4d4:	ldr	r3, [r7]
   1e4d8:	mov	r2, r0
   1e4dc:	ldmib	r7, {r0, r1, r7}
   1e4e0:	stm	sp, {r0, r1, r7}
   1e4e4:	b	1e584 <__assert_fail@plt+0xcfc8>
   1e4e8:	movw	r1, #14155	; 0x374b
   1e4ec:	mov	r0, #0
   1e4f0:	mov	r2, #5
   1e4f4:	movt	r1, #2
   1e4f8:	bl	11328 <dcgettext@plt>
   1e4fc:	ldr	r3, [r7]
   1e500:	mov	r2, r0
   1e504:	ldmib	r7, {r0, r1, r6, r7}
   1e508:	stm	sp, {r0, r1, r6, r7}
   1e50c:	b	1e584 <__assert_fail@plt+0xcfc8>
   1e510:	movw	r1, #14191	; 0x376f
   1e514:	mov	r0, #0
   1e518:	mov	r2, #5
   1e51c:	movt	r1, #2
   1e520:	bl	11328 <dcgettext@plt>
   1e524:	ldr	r3, [r7]
   1e528:	mov	r2, r0
   1e52c:	ldmib	r7, {r0, r1, r6}
   1e530:	ldr	r5, [r7, #16]
   1e534:	ldr	r7, [r7, #20]
   1e538:	stm	sp, {r0, r1, r6}
   1e53c:	str	r5, [sp, #12]
   1e540:	str	r7, [sp, #16]
   1e544:	b	1e584 <__assert_fail@plt+0xcfc8>
   1e548:	movw	r1, #14231	; 0x3797
   1e54c:	mov	r0, #0
   1e550:	mov	r2, #5
   1e554:	movt	r1, #2
   1e558:	bl	11328 <dcgettext@plt>
   1e55c:	ldr	r3, [r7]
   1e560:	mov	r2, r0
   1e564:	ldmib	r7, {r0, r1, r6}
   1e568:	ldr	r5, [r7, #16]
   1e56c:	ldr	r4, [r7, #20]
   1e570:	ldr	r7, [r7, #24]
   1e574:	stm	sp, {r0, r1, r6}
   1e578:	str	r5, [sp, #12]
   1e57c:	str	r4, [sp, #16]
   1e580:	str	r7, [sp, #20]
   1e584:	mov	r0, r8
   1e588:	mov	r1, #1
   1e58c:	bl	114d8 <__fprintf_chk@plt>
   1e590:	sub	sp, fp, #24
   1e594:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e598:	movw	r1, #14323	; 0x37f3
   1e59c:	movt	r1, #2
   1e5a0:	mov	r0, #0
   1e5a4:	mov	r2, #5
   1e5a8:	bl	11328 <dcgettext@plt>
   1e5ac:	mov	ip, r0
   1e5b0:	ldr	r3, [r7]
   1e5b4:	ldr	r0, [r7, #4]
   1e5b8:	ldr	r1, [r7, #8]
   1e5bc:	ldr	r6, [r7, #12]
   1e5c0:	ldr	r5, [r7, #16]
   1e5c4:	ldr	r4, [r7, #20]
   1e5c8:	ldr	r2, [r7, #24]
   1e5cc:	ldr	lr, [r7, #28]
   1e5d0:	ldr	r7, [r7, #32]
   1e5d4:	stm	sp, {r0, r1, r6}
   1e5d8:	str	r5, [sp, #12]
   1e5dc:	str	r4, [sp, #16]
   1e5e0:	str	r2, [sp, #20]
   1e5e4:	str	lr, [sp, #24]
   1e5e8:	str	r7, [sp, #28]
   1e5ec:	b	1e634 <__assert_fail@plt+0xd078>
   1e5f0:	movw	r1, #14275	; 0x37c3
   1e5f4:	mov	r0, #0
   1e5f8:	mov	r2, #5
   1e5fc:	movt	r1, #2
   1e600:	bl	11328 <dcgettext@plt>
   1e604:	mov	ip, r0
   1e608:	ldr	r3, [r7]
   1e60c:	ldmib	r7, {r0, r1, r6}
   1e610:	ldr	r5, [r7, #16]
   1e614:	ldr	r4, [r7, #20]
   1e618:	ldr	r2, [r7, #24]
   1e61c:	ldr	r7, [r7, #28]
   1e620:	stm	sp, {r0, r1, r6}
   1e624:	str	r5, [sp, #12]
   1e628:	str	r4, [sp, #16]
   1e62c:	str	r2, [sp, #20]
   1e630:	str	r7, [sp, #24]
   1e634:	mov	r0, r8
   1e638:	mov	r1, #1
   1e63c:	mov	r2, ip
   1e640:	bl	114d8 <__fprintf_chk@plt>
   1e644:	sub	sp, fp, #24
   1e648:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1e64c:	push	{r4, sl, fp, lr}
   1e650:	add	fp, sp, #8
   1e654:	sub	sp, sp, #8
   1e658:	ldr	ip, [fp, #8]
   1e65c:	mov	lr, #0
   1e660:	ldr	r4, [ip, lr, lsl #2]
   1e664:	add	lr, lr, #1
   1e668:	cmp	r4, #0
   1e66c:	bne	1e660 <__assert_fail@plt+0xd0a4>
   1e670:	sub	r4, lr, #1
   1e674:	str	ip, [sp]
   1e678:	str	r4, [sp, #4]
   1e67c:	bl	1e310 <__assert_fail@plt+0xcd54>
   1e680:	sub	sp, fp, #8
   1e684:	pop	{r4, sl, fp, pc}
   1e688:	push	{fp, lr}
   1e68c:	mov	fp, sp
   1e690:	sub	sp, sp, #48	; 0x30
   1e694:	ldr	ip, [fp, #8]
   1e698:	ldr	lr, [ip]
   1e69c:	cmp	lr, #0
   1e6a0:	str	lr, [sp, #8]
   1e6a4:	beq	1e740 <__assert_fail@plt+0xd184>
   1e6a8:	ldr	lr, [ip, #4]
   1e6ac:	cmp	lr, #0
   1e6b0:	str	lr, [sp, #12]
   1e6b4:	beq	1e748 <__assert_fail@plt+0xd18c>
   1e6b8:	ldr	lr, [ip, #8]
   1e6bc:	cmp	lr, #0
   1e6c0:	str	lr, [sp, #16]
   1e6c4:	beq	1e750 <__assert_fail@plt+0xd194>
   1e6c8:	ldr	lr, [ip, #12]
   1e6cc:	cmp	lr, #0
   1e6d0:	str	lr, [sp, #20]
   1e6d4:	beq	1e758 <__assert_fail@plt+0xd19c>
   1e6d8:	ldr	lr, [ip, #16]
   1e6dc:	cmp	lr, #0
   1e6e0:	str	lr, [sp, #24]
   1e6e4:	beq	1e760 <__assert_fail@plt+0xd1a4>
   1e6e8:	ldr	lr, [ip, #20]
   1e6ec:	cmp	lr, #0
   1e6f0:	str	lr, [sp, #28]
   1e6f4:	beq	1e768 <__assert_fail@plt+0xd1ac>
   1e6f8:	ldr	lr, [ip, #24]
   1e6fc:	cmp	lr, #0
   1e700:	str	lr, [sp, #32]
   1e704:	beq	1e770 <__assert_fail@plt+0xd1b4>
   1e708:	ldr	lr, [ip, #28]
   1e70c:	cmp	lr, #0
   1e710:	str	lr, [sp, #36]	; 0x24
   1e714:	beq	1e778 <__assert_fail@plt+0xd1bc>
   1e718:	ldr	lr, [ip, #32]
   1e71c:	cmp	lr, #0
   1e720:	str	lr, [sp, #40]	; 0x28
   1e724:	beq	1e780 <__assert_fail@plt+0xd1c4>
   1e728:	ldr	lr, [ip, #36]	; 0x24
   1e72c:	mov	ip, #10
   1e730:	cmp	lr, #0
   1e734:	str	lr, [sp, #44]	; 0x2c
   1e738:	movweq	ip, #9
   1e73c:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e740:	mov	ip, #0
   1e744:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e748:	mov	ip, #1
   1e74c:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e750:	mov	ip, #2
   1e754:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e758:	mov	ip, #3
   1e75c:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e760:	mov	ip, #4
   1e764:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e768:	mov	ip, #5
   1e76c:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e770:	mov	ip, #6
   1e774:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e778:	mov	ip, #7
   1e77c:	b	1e784 <__assert_fail@plt+0xd1c8>
   1e780:	mov	ip, #8
   1e784:	add	lr, sp, #8
   1e788:	str	ip, [sp, #4]
   1e78c:	str	lr, [sp]
   1e790:	bl	1e310 <__assert_fail@plt+0xcd54>
   1e794:	mov	sp, fp
   1e798:	pop	{fp, pc}
   1e79c:	push	{fp, lr}
   1e7a0:	mov	fp, sp
   1e7a4:	sub	sp, sp, #56	; 0x38
   1e7a8:	add	ip, fp, #8
   1e7ac:	str	ip, [sp, #12]
   1e7b0:	ldr	lr, [fp, #8]
   1e7b4:	cmp	lr, #0
   1e7b8:	str	lr, [sp, #16]
   1e7bc:	beq	1e858 <__assert_fail@plt+0xd29c>
   1e7c0:	ldr	lr, [ip, #4]
   1e7c4:	cmp	lr, #0
   1e7c8:	str	lr, [sp, #20]
   1e7cc:	beq	1e860 <__assert_fail@plt+0xd2a4>
   1e7d0:	ldr	lr, [ip, #8]
   1e7d4:	cmp	lr, #0
   1e7d8:	str	lr, [sp, #24]
   1e7dc:	beq	1e868 <__assert_fail@plt+0xd2ac>
   1e7e0:	ldr	lr, [ip, #12]
   1e7e4:	cmp	lr, #0
   1e7e8:	str	lr, [sp, #28]
   1e7ec:	beq	1e870 <__assert_fail@plt+0xd2b4>
   1e7f0:	ldr	lr, [ip, #16]
   1e7f4:	cmp	lr, #0
   1e7f8:	str	lr, [sp, #32]
   1e7fc:	beq	1e878 <__assert_fail@plt+0xd2bc>
   1e800:	ldr	lr, [ip, #20]
   1e804:	cmp	lr, #0
   1e808:	str	lr, [sp, #36]	; 0x24
   1e80c:	beq	1e880 <__assert_fail@plt+0xd2c4>
   1e810:	ldr	lr, [ip, #24]
   1e814:	cmp	lr, #0
   1e818:	str	lr, [sp, #40]	; 0x28
   1e81c:	beq	1e888 <__assert_fail@plt+0xd2cc>
   1e820:	ldr	lr, [ip, #28]
   1e824:	cmp	lr, #0
   1e828:	str	lr, [sp, #44]	; 0x2c
   1e82c:	beq	1e890 <__assert_fail@plt+0xd2d4>
   1e830:	ldr	lr, [ip, #32]
   1e834:	cmp	lr, #0
   1e838:	str	lr, [sp, #48]	; 0x30
   1e83c:	beq	1e898 <__assert_fail@plt+0xd2dc>
   1e840:	ldr	lr, [ip, #36]	; 0x24
   1e844:	mov	ip, #10
   1e848:	cmp	lr, #0
   1e84c:	str	lr, [sp, #52]	; 0x34
   1e850:	movweq	ip, #9
   1e854:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e858:	mov	ip, #0
   1e85c:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e860:	mov	ip, #1
   1e864:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e868:	mov	ip, #2
   1e86c:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e870:	mov	ip, #3
   1e874:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e878:	mov	ip, #4
   1e87c:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e880:	mov	ip, #5
   1e884:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e888:	mov	ip, #6
   1e88c:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e890:	mov	ip, #7
   1e894:	b	1e89c <__assert_fail@plt+0xd2e0>
   1e898:	mov	ip, #8
   1e89c:	add	lr, sp, #16
   1e8a0:	str	ip, [sp, #4]
   1e8a4:	str	lr, [sp]
   1e8a8:	bl	1e310 <__assert_fail@plt+0xcd54>
   1e8ac:	mov	sp, fp
   1e8b0:	pop	{fp, pc}
   1e8b4:	push	{fp, lr}
   1e8b8:	mov	fp, sp
   1e8bc:	movw	r0, #16804	; 0x41a4
   1e8c0:	movt	r0, #3
   1e8c4:	ldr	r1, [r0]
   1e8c8:	movw	r0, #13216	; 0x33a0
   1e8cc:	movt	r0, #2
   1e8d0:	bl	11274 <fputs_unlocked@plt>
   1e8d4:	movw	r1, #14435	; 0x3863
   1e8d8:	mov	r0, #0
   1e8dc:	mov	r2, #5
   1e8e0:	movt	r1, #2
   1e8e4:	bl	11328 <dcgettext@plt>
   1e8e8:	movw	r2, #14455	; 0x3877
   1e8ec:	mov	r1, r0
   1e8f0:	mov	r0, #1
   1e8f4:	movt	r2, #2
   1e8f8:	bl	114c0 <__printf_chk@plt>
   1e8fc:	movw	r1, #14477	; 0x388d
   1e900:	mov	r0, #0
   1e904:	mov	r2, #5
   1e908:	movt	r1, #2
   1e90c:	bl	11328 <dcgettext@plt>
   1e910:	movw	r2, #5998	; 0x176e
   1e914:	movw	r3, #6461	; 0x193d
   1e918:	mov	r1, r0
   1e91c:	mov	r0, #1
   1e920:	movt	r2, #2
   1e924:	movt	r3, #2
   1e928:	bl	114c0 <__printf_chk@plt>
   1e92c:	movw	r1, #14497	; 0x38a1
   1e930:	mov	r0, #0
   1e934:	mov	r2, #5
   1e938:	movt	r1, #2
   1e93c:	bl	11328 <dcgettext@plt>
   1e940:	movw	r2, #14536	; 0x38c8
   1e944:	mov	r1, r0
   1e948:	mov	r0, #1
   1e94c:	movt	r2, #2
   1e950:	pop	{fp, lr}
   1e954:	b	114c0 <__printf_chk@plt>
   1e958:	push	{r4, r5, r6, sl, fp, lr}
   1e95c:	add	fp, sp, #16
   1e960:	mov	r4, r2
   1e964:	mov	r5, r1
   1e968:	mov	r6, r0
   1e96c:	bl	20dd0 <__assert_fail@plt+0xf814>
   1e970:	cmp	r0, #0
   1e974:	popne	{r4, r5, r6, sl, fp, pc}
   1e978:	cmp	r6, #0
   1e97c:	beq	1e990 <__assert_fail@plt+0xd3d4>
   1e980:	cmp	r5, #0
   1e984:	cmpne	r4, #0
   1e988:	bne	1e990 <__assert_fail@plt+0xd3d4>
   1e98c:	pop	{r4, r5, r6, sl, fp, pc}
   1e990:	bl	1ef30 <__assert_fail@plt+0xd974>
   1e994:	push	{r4, r5, r6, sl, fp, lr}
   1e998:	add	fp, sp, #16
   1e99c:	mov	r4, r2
   1e9a0:	mov	r5, r1
   1e9a4:	mov	r6, r0
   1e9a8:	bl	20dd0 <__assert_fail@plt+0xf814>
   1e9ac:	cmp	r0, #0
   1e9b0:	popne	{r4, r5, r6, sl, fp, pc}
   1e9b4:	cmp	r6, #0
   1e9b8:	beq	1e9cc <__assert_fail@plt+0xd410>
   1e9bc:	cmp	r5, #0
   1e9c0:	cmpne	r4, #0
   1e9c4:	bne	1e9cc <__assert_fail@plt+0xd410>
   1e9c8:	pop	{r4, r5, r6, sl, fp, pc}
   1e9cc:	bl	1ef30 <__assert_fail@plt+0xd974>
   1e9d0:	push	{fp, lr}
   1e9d4:	mov	fp, sp
   1e9d8:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1e9dc:	cmp	r0, #0
   1e9e0:	popne	{fp, pc}
   1e9e4:	bl	1ef30 <__assert_fail@plt+0xd974>
   1e9e8:	push	{fp, lr}
   1e9ec:	mov	fp, sp
   1e9f0:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1e9f4:	cmp	r0, #0
   1e9f8:	popne	{fp, pc}
   1e9fc:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ea00:	push	{fp, lr}
   1ea04:	mov	fp, sp
   1ea08:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1ea0c:	cmp	r0, #0
   1ea10:	popne	{fp, pc}
   1ea14:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ea18:	push	{r4, r5, fp, lr}
   1ea1c:	add	fp, sp, #8
   1ea20:	mov	r4, r1
   1ea24:	mov	r5, r0
   1ea28:	bl	1eff8 <__assert_fail@plt+0xda3c>
   1ea2c:	cmp	r0, #0
   1ea30:	popne	{r4, r5, fp, pc}
   1ea34:	cmp	r5, #0
   1ea38:	beq	1ea48 <__assert_fail@plt+0xd48c>
   1ea3c:	cmp	r4, #0
   1ea40:	bne	1ea48 <__assert_fail@plt+0xd48c>
   1ea44:	pop	{r4, r5, fp, pc}
   1ea48:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ea4c:	push	{fp, lr}
   1ea50:	mov	fp, sp
   1ea54:	cmp	r1, #0
   1ea58:	orreq	r1, r1, #1
   1ea5c:	bl	1eff8 <__assert_fail@plt+0xda3c>
   1ea60:	cmp	r0, #0
   1ea64:	popne	{fp, pc}
   1ea68:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ea6c:	push	{fp, lr}
   1ea70:	mov	fp, sp
   1ea74:	clz	r3, r2
   1ea78:	lsr	ip, r3, #5
   1ea7c:	clz	r3, r1
   1ea80:	lsr	r3, r3, #5
   1ea84:	orrs	r3, r3, ip
   1ea88:	movwne	r1, #1
   1ea8c:	movwne	r2, #1
   1ea90:	bl	20dd0 <__assert_fail@plt+0xf814>
   1ea94:	cmp	r0, #0
   1ea98:	popne	{fp, pc}
   1ea9c:	bl	1ef30 <__assert_fail@plt+0xd974>
   1eaa0:	push	{fp, lr}
   1eaa4:	mov	fp, sp
   1eaa8:	mov	r2, r1
   1eaac:	mov	r1, r0
   1eab0:	mov	r0, #0
   1eab4:	bl	20dd0 <__assert_fail@plt+0xf814>
   1eab8:	cmp	r0, #0
   1eabc:	popne	{fp, pc}
   1eac0:	bl	1ef30 <__assert_fail@plt+0xd974>
   1eac4:	push	{fp, lr}
   1eac8:	mov	fp, sp
   1eacc:	mov	r2, r1
   1ead0:	mov	r1, r0
   1ead4:	clz	r0, r2
   1ead8:	clz	r3, r1
   1eadc:	lsr	r0, r0, #5
   1eae0:	lsr	r3, r3, #5
   1eae4:	orrs	r0, r3, r0
   1eae8:	movwne	r1, #1
   1eaec:	movwne	r2, #1
   1eaf0:	mov	r0, #0
   1eaf4:	bl	20dd0 <__assert_fail@plt+0xf814>
   1eaf8:	cmp	r0, #0
   1eafc:	popne	{fp, pc}
   1eb00:	bl	1ef30 <__assert_fail@plt+0xd974>
   1eb04:	push	{r4, r5, r6, sl, fp, lr}
   1eb08:	add	fp, sp, #16
   1eb0c:	ldr	r5, [r1]
   1eb10:	mov	r4, r1
   1eb14:	mov	r6, r0
   1eb18:	cmp	r0, #0
   1eb1c:	beq	1eb34 <__assert_fail@plt+0xd578>
   1eb20:	mov	r0, #1
   1eb24:	add	r0, r0, r5, lsr #1
   1eb28:	adds	r5, r5, r0
   1eb2c:	bcc	1eb3c <__assert_fail@plt+0xd580>
   1eb30:	b	1eb78 <__assert_fail@plt+0xd5bc>
   1eb34:	cmp	r5, #0
   1eb38:	movweq	r5, #64	; 0x40
   1eb3c:	mov	r0, r6
   1eb40:	mov	r1, r5
   1eb44:	mov	r2, #1
   1eb48:	bl	20dd0 <__assert_fail@plt+0xf814>
   1eb4c:	cmp	r5, #0
   1eb50:	mov	r1, r5
   1eb54:	movwne	r1, #1
   1eb58:	cmp	r0, #0
   1eb5c:	bne	1eb70 <__assert_fail@plt+0xd5b4>
   1eb60:	clz	r2, r6
   1eb64:	lsr	r2, r2, #5
   1eb68:	orrs	r1, r2, r1
   1eb6c:	bne	1eb78 <__assert_fail@plt+0xd5bc>
   1eb70:	str	r5, [r4]
   1eb74:	pop	{r4, r5, r6, sl, fp, pc}
   1eb78:	bl	1ef30 <__assert_fail@plt+0xd974>
   1eb7c:	push	{r4, r5, r6, r7, fp, lr}
   1eb80:	add	fp, sp, #16
   1eb84:	ldr	r5, [r1]
   1eb88:	mov	r6, r2
   1eb8c:	mov	r4, r1
   1eb90:	mov	r7, r0
   1eb94:	cmp	r0, #0
   1eb98:	beq	1ebb0 <__assert_fail@plt+0xd5f4>
   1eb9c:	mov	r0, #1
   1eba0:	add	r0, r0, r5, lsr #1
   1eba4:	adds	r5, r5, r0
   1eba8:	bcc	1ebc8 <__assert_fail@plt+0xd60c>
   1ebac:	b	1ebfc <__assert_fail@plt+0xd640>
   1ebb0:	cmp	r5, #0
   1ebb4:	bne	1ebc8 <__assert_fail@plt+0xd60c>
   1ebb8:	mov	r0, #64	; 0x40
   1ebbc:	cmp	r6, #64	; 0x40
   1ebc0:	udiv	r5, r0, r6
   1ebc4:	addhi	r5, r5, #1
   1ebc8:	mov	r0, r7
   1ebcc:	mov	r1, r5
   1ebd0:	mov	r2, r6
   1ebd4:	bl	20dd0 <__assert_fail@plt+0xf814>
   1ebd8:	cmp	r0, #0
   1ebdc:	bne	1ebf4 <__assert_fail@plt+0xd638>
   1ebe0:	cmp	r7, #0
   1ebe4:	beq	1ebfc <__assert_fail@plt+0xd640>
   1ebe8:	cmp	r6, #0
   1ebec:	cmpne	r5, #0
   1ebf0:	bne	1ebfc <__assert_fail@plt+0xd640>
   1ebf4:	str	r5, [r4]
   1ebf8:	pop	{r4, r5, r6, r7, fp, pc}
   1ebfc:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ec00:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1ec04:	add	fp, sp, #24
   1ec08:	mov	r8, r1
   1ec0c:	ldr	r1, [r1]
   1ec10:	mov	r5, r0
   1ec14:	add	r0, r1, r1, asr #1
   1ec18:	cmp	r0, r1
   1ec1c:	mvnvs	r0, #-2147483648	; 0x80000000
   1ec20:	cmp	r0, r3
   1ec24:	mov	r7, r0
   1ec28:	movgt	r7, r3
   1ec2c:	cmn	r3, #1
   1ec30:	movle	r7, r0
   1ec34:	ldr	r0, [fp, #8]
   1ec38:	cmn	r0, #1
   1ec3c:	ble	1ec64 <__assert_fail@plt+0xd6a8>
   1ec40:	cmp	r0, #0
   1ec44:	beq	1ecb8 <__assert_fail@plt+0xd6fc>
   1ec48:	cmn	r7, #1
   1ec4c:	ble	1ec8c <__assert_fail@plt+0xd6d0>
   1ec50:	mvn	r4, #-2147483648	; 0x80000000
   1ec54:	udiv	r6, r4, r0
   1ec58:	cmp	r6, r7
   1ec5c:	bge	1ecb8 <__assert_fail@plt+0xd6fc>
   1ec60:	b	1ecc8 <__assert_fail@plt+0xd70c>
   1ec64:	cmn	r7, #1
   1ec68:	ble	1eca8 <__assert_fail@plt+0xd6ec>
   1ec6c:	cmn	r0, #1
   1ec70:	beq	1ecb8 <__assert_fail@plt+0xd6fc>
   1ec74:	mov	r6, #-2147483648	; 0x80000000
   1ec78:	mvn	r4, #-2147483648	; 0x80000000
   1ec7c:	sdiv	r6, r6, r0
   1ec80:	cmp	r6, r7
   1ec84:	bge	1ecb8 <__assert_fail@plt+0xd6fc>
   1ec88:	b	1ecc8 <__assert_fail@plt+0xd70c>
   1ec8c:	beq	1ecb8 <__assert_fail@plt+0xd6fc>
   1ec90:	mov	r6, #-2147483648	; 0x80000000
   1ec94:	mvn	r4, #-2147483648	; 0x80000000
   1ec98:	sdiv	r6, r6, r7
   1ec9c:	cmp	r6, r0
   1eca0:	bge	1ecb8 <__assert_fail@plt+0xd6fc>
   1eca4:	b	1ecc8 <__assert_fail@plt+0xd70c>
   1eca8:	mvn	r4, #-2147483648	; 0x80000000
   1ecac:	sdiv	r6, r4, r0
   1ecb0:	cmp	r7, r6
   1ecb4:	blt	1ecc8 <__assert_fail@plt+0xd70c>
   1ecb8:	mul	r6, r7, r0
   1ecbc:	mov	r4, #64	; 0x40
   1ecc0:	cmp	r6, #63	; 0x3f
   1ecc4:	bgt	1ecd0 <__assert_fail@plt+0xd714>
   1ecc8:	sdiv	r7, r4, r0
   1eccc:	mul	r6, r7, r0
   1ecd0:	cmp	r5, #0
   1ecd4:	moveq	r4, #0
   1ecd8:	streq	r4, [r8]
   1ecdc:	sub	r4, r7, r1
   1ece0:	cmp	r4, r2
   1ece4:	bge	1ed90 <__assert_fail@plt+0xd7d4>
   1ece8:	add	r7, r1, r2
   1ecec:	mov	r6, #0
   1ecf0:	mov	r2, #0
   1ecf4:	cmp	r7, r3
   1ecf8:	movwgt	r6, #1
   1ecfc:	cmn	r3, #1
   1ed00:	movwgt	r2, #1
   1ed04:	cmp	r7, r1
   1ed08:	bvs	1edc4 <__assert_fail@plt+0xd808>
   1ed0c:	ands	r1, r2, r6
   1ed10:	bne	1edc4 <__assert_fail@plt+0xd808>
   1ed14:	cmn	r0, #1
   1ed18:	ble	1ed40 <__assert_fail@plt+0xd784>
   1ed1c:	cmp	r0, #0
   1ed20:	beq	1ed8c <__assert_fail@plt+0xd7d0>
   1ed24:	cmn	r7, #1
   1ed28:	ble	1ed64 <__assert_fail@plt+0xd7a8>
   1ed2c:	mvn	r1, #-2147483648	; 0x80000000
   1ed30:	udiv	r1, r1, r0
   1ed34:	cmp	r1, r7
   1ed38:	bge	1ed8c <__assert_fail@plt+0xd7d0>
   1ed3c:	b	1edc4 <__assert_fail@plt+0xd808>
   1ed40:	cmn	r7, #1
   1ed44:	ble	1ed7c <__assert_fail@plt+0xd7c0>
   1ed48:	cmn	r0, #1
   1ed4c:	beq	1ed8c <__assert_fail@plt+0xd7d0>
   1ed50:	mov	r1, #-2147483648	; 0x80000000
   1ed54:	sdiv	r1, r1, r0
   1ed58:	cmp	r1, r7
   1ed5c:	bge	1ed8c <__assert_fail@plt+0xd7d0>
   1ed60:	b	1edc4 <__assert_fail@plt+0xd808>
   1ed64:	beq	1ed8c <__assert_fail@plt+0xd7d0>
   1ed68:	mov	r1, #-2147483648	; 0x80000000
   1ed6c:	sdiv	r1, r1, r7
   1ed70:	cmp	r1, r0
   1ed74:	bge	1ed8c <__assert_fail@plt+0xd7d0>
   1ed78:	b	1edc4 <__assert_fail@plt+0xd808>
   1ed7c:	mvn	r1, #-2147483648	; 0x80000000
   1ed80:	sdiv	r1, r1, r0
   1ed84:	cmp	r7, r1
   1ed88:	blt	1edc4 <__assert_fail@plt+0xd808>
   1ed8c:	mul	r6, r7, r0
   1ed90:	mov	r0, r5
   1ed94:	mov	r1, r6
   1ed98:	bl	1eff8 <__assert_fail@plt+0xda3c>
   1ed9c:	cmp	r6, #0
   1eda0:	movwne	r6, #1
   1eda4:	cmp	r0, #0
   1eda8:	bne	1edbc <__assert_fail@plt+0xd800>
   1edac:	clz	r1, r5
   1edb0:	lsr	r1, r1, #5
   1edb4:	orrs	r1, r1, r6
   1edb8:	bne	1edc4 <__assert_fail@plt+0xd808>
   1edbc:	str	r7, [r8]
   1edc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1edc4:	bl	1ef30 <__assert_fail@plt+0xd974>
   1edc8:	push	{fp, lr}
   1edcc:	mov	fp, sp
   1edd0:	mov	r1, #1
   1edd4:	bl	1ef74 <__assert_fail@plt+0xd9b8>
   1edd8:	cmp	r0, #0
   1eddc:	popne	{fp, pc}
   1ede0:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ede4:	push	{fp, lr}
   1ede8:	mov	fp, sp
   1edec:	bl	1ef74 <__assert_fail@plt+0xd9b8>
   1edf0:	cmp	r0, #0
   1edf4:	popne	{fp, pc}
   1edf8:	bl	1ef30 <__assert_fail@plt+0xd974>
   1edfc:	push	{fp, lr}
   1ee00:	mov	fp, sp
   1ee04:	mov	r1, #1
   1ee08:	bl	1ef74 <__assert_fail@plt+0xd9b8>
   1ee0c:	cmp	r0, #0
   1ee10:	popne	{fp, pc}
   1ee14:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ee18:	push	{fp, lr}
   1ee1c:	mov	fp, sp
   1ee20:	bl	1ef74 <__assert_fail@plt+0xd9b8>
   1ee24:	cmp	r0, #0
   1ee28:	popne	{fp, pc}
   1ee2c:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ee30:	push	{r4, r5, r6, sl, fp, lr}
   1ee34:	add	fp, sp, #16
   1ee38:	mov	r5, r0
   1ee3c:	mov	r0, r1
   1ee40:	mov	r4, r1
   1ee44:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1ee48:	cmp	r0, #0
   1ee4c:	beq	1ee68 <__assert_fail@plt+0xd8ac>
   1ee50:	mov	r1, r5
   1ee54:	mov	r2, r4
   1ee58:	mov	r6, r0
   1ee5c:	bl	112f8 <memcpy@plt>
   1ee60:	mov	r0, r6
   1ee64:	pop	{r4, r5, r6, sl, fp, pc}
   1ee68:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ee6c:	push	{r4, r5, r6, sl, fp, lr}
   1ee70:	add	fp, sp, #16
   1ee74:	mov	r5, r0
   1ee78:	mov	r0, r1
   1ee7c:	mov	r4, r1
   1ee80:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1ee84:	cmp	r0, #0
   1ee88:	beq	1eea4 <__assert_fail@plt+0xd8e8>
   1ee8c:	mov	r1, r5
   1ee90:	mov	r2, r4
   1ee94:	mov	r6, r0
   1ee98:	bl	112f8 <memcpy@plt>
   1ee9c:	mov	r0, r6
   1eea0:	pop	{r4, r5, r6, sl, fp, pc}
   1eea4:	bl	1ef30 <__assert_fail@plt+0xd974>
   1eea8:	push	{r4, r5, r6, sl, fp, lr}
   1eeac:	add	fp, sp, #16
   1eeb0:	mov	r5, r0
   1eeb4:	add	r0, r1, #1
   1eeb8:	mov	r4, r1
   1eebc:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1eec0:	cmp	r0, #0
   1eec4:	beq	1eeec <__assert_fail@plt+0xd930>
   1eec8:	mov	r6, r0
   1eecc:	mov	r0, #0
   1eed0:	mov	r1, r5
   1eed4:	mov	r2, r4
   1eed8:	strb	r0, [r6, r4]
   1eedc:	mov	r0, r6
   1eee0:	bl	112f8 <memcpy@plt>
   1eee4:	mov	r0, r6
   1eee8:	pop	{r4, r5, r6, sl, fp, pc}
   1eeec:	bl	1ef30 <__assert_fail@plt+0xd974>
   1eef0:	push	{r4, r5, r6, sl, fp, lr}
   1eef4:	add	fp, sp, #16
   1eef8:	mov	r4, r0
   1eefc:	bl	1146c <strlen@plt>
   1ef00:	add	r5, r0, #1
   1ef04:	mov	r0, r5
   1ef08:	bl	1efc8 <__assert_fail@plt+0xda0c>
   1ef0c:	cmp	r0, #0
   1ef10:	beq	1ef2c <__assert_fail@plt+0xd970>
   1ef14:	mov	r1, r4
   1ef18:	mov	r2, r5
   1ef1c:	mov	r6, r0
   1ef20:	bl	112f8 <memcpy@plt>
   1ef24:	mov	r0, r6
   1ef28:	pop	{r4, r5, r6, sl, fp, pc}
   1ef2c:	bl	1ef30 <__assert_fail@plt+0xd974>
   1ef30:	push	{fp, lr}
   1ef34:	mov	fp, sp
   1ef38:	movw	r0, #16704	; 0x4140
   1ef3c:	movw	r1, #14612	; 0x3914
   1ef40:	mov	r2, #5
   1ef44:	movt	r0, #3
   1ef48:	movt	r1, #2
   1ef4c:	ldr	r4, [r0]
   1ef50:	mov	r0, #0
   1ef54:	bl	11328 <dcgettext@plt>
   1ef58:	movw	r2, #7182	; 0x1c0e
   1ef5c:	mov	r3, r0
   1ef60:	mov	r0, r4
   1ef64:	mov	r1, #0
   1ef68:	movt	r2, #2
   1ef6c:	bl	113b8 <error@plt>
   1ef70:	bl	1158c <abort@plt>
   1ef74:	clz	r2, r1
   1ef78:	clz	r3, r0
   1ef7c:	lsr	r2, r2, #5
   1ef80:	lsr	r3, r3, #5
   1ef84:	orrs	r2, r3, r2
   1ef88:	movwne	r1, #1
   1ef8c:	movwne	r0, #1
   1ef90:	cmp	r1, #0
   1ef94:	beq	1efc4 <__assert_fail@plt+0xda08>
   1ef98:	mvn	r2, #-2147483648	; 0x80000000
   1ef9c:	udiv	r2, r2, r1
   1efa0:	cmp	r2, r0
   1efa4:	bcs	1efc4 <__assert_fail@plt+0xda08>
   1efa8:	push	{fp, lr}
   1efac:	mov	fp, sp
   1efb0:	bl	11490 <__errno_location@plt>
   1efb4:	mov	r1, #12
   1efb8:	str	r1, [r0]
   1efbc:	mov	r0, #0
   1efc0:	pop	{fp, pc}
   1efc4:	b	11268 <calloc@plt>
   1efc8:	cmp	r0, #0
   1efcc:	movweq	r0, #1
   1efd0:	cmn	r0, #1
   1efd4:	ble	1efdc <__assert_fail@plt+0xda20>
   1efd8:	b	113dc <malloc@plt>
   1efdc:	push	{fp, lr}
   1efe0:	mov	fp, sp
   1efe4:	bl	11490 <__errno_location@plt>
   1efe8:	mov	r1, #12
   1efec:	str	r1, [r0]
   1eff0:	mov	r0, #0
   1eff4:	pop	{fp, pc}
   1eff8:	push	{fp, lr}
   1effc:	mov	fp, sp
   1f000:	cmp	r0, #0
   1f004:	beq	1f020 <__assert_fail@plt+0xda64>
   1f008:	cmp	r1, #0
   1f00c:	beq	1f02c <__assert_fail@plt+0xda70>
   1f010:	cmn	r1, #1
   1f014:	ble	1f038 <__assert_fail@plt+0xda7c>
   1f018:	pop	{fp, lr}
   1f01c:	b	11340 <realloc@plt>
   1f020:	mov	r0, r1
   1f024:	pop	{fp, lr}
   1f028:	b	1efc8 <__assert_fail@plt+0xda0c>
   1f02c:	bl	1f1d4 <__assert_fail@plt+0xdc18>
   1f030:	mov	r0, #0
   1f034:	pop	{fp, pc}
   1f038:	bl	11490 <__errno_location@plt>
   1f03c:	mov	r1, #12
   1f040:	str	r1, [r0]
   1f044:	mov	r0, #0
   1f048:	pop	{fp, pc}
   1f04c:	push	{r4, r5, r6, sl, fp, lr}
   1f050:	add	fp, sp, #16
   1f054:	mov	r4, r0
   1f058:	bl	113a0 <__fpending@plt>
   1f05c:	ldr	r6, [r4]
   1f060:	mov	r5, r0
   1f064:	mov	r0, r4
   1f068:	bl	1f0d0 <__assert_fail@plt+0xdb14>
   1f06c:	tst	r6, #32
   1f070:	bne	1f0a8 <__assert_fail@plt+0xdaec>
   1f074:	cmp	r0, #0
   1f078:	mov	r4, r0
   1f07c:	mvnne	r4, #0
   1f080:	cmp	r5, #0
   1f084:	bne	1f0b4 <__assert_fail@plt+0xdaf8>
   1f088:	cmp	r0, #0
   1f08c:	beq	1f0b4 <__assert_fail@plt+0xdaf8>
   1f090:	bl	11490 <__errno_location@plt>
   1f094:	ldr	r0, [r0]
   1f098:	subs	r4, r0, #9
   1f09c:	mvnne	r4, #0
   1f0a0:	mov	r0, r4
   1f0a4:	pop	{r4, r5, r6, sl, fp, pc}
   1f0a8:	mvn	r4, #0
   1f0ac:	cmp	r0, #0
   1f0b0:	beq	1f0bc <__assert_fail@plt+0xdb00>
   1f0b4:	mov	r0, r4
   1f0b8:	pop	{r4, r5, r6, sl, fp, pc}
   1f0bc:	bl	11490 <__errno_location@plt>
   1f0c0:	mov	r1, #0
   1f0c4:	str	r1, [r0]
   1f0c8:	mov	r0, r4
   1f0cc:	pop	{r4, r5, r6, sl, fp, pc}
   1f0d0:	push	{r4, r5, r6, sl, fp, lr}
   1f0d4:	add	fp, sp, #16
   1f0d8:	sub	sp, sp, #8
   1f0dc:	mov	r4, r0
   1f0e0:	bl	114cc <fileno@plt>
   1f0e4:	cmn	r0, #1
   1f0e8:	ble	1f15c <__assert_fail@plt+0xdba0>
   1f0ec:	mov	r0, r4
   1f0f0:	bl	1140c <__freading@plt>
   1f0f4:	cmp	r0, #0
   1f0f8:	beq	1f124 <__assert_fail@plt+0xdb68>
   1f0fc:	mov	r0, r4
   1f100:	bl	114cc <fileno@plt>
   1f104:	mov	r1, #1
   1f108:	mov	r2, #0
   1f10c:	mov	r3, #0
   1f110:	str	r1, [sp]
   1f114:	bl	11388 <lseek64@plt>
   1f118:	and	r0, r0, r1
   1f11c:	cmn	r0, #1
   1f120:	beq	1f15c <__assert_fail@plt+0xdba0>
   1f124:	mov	r0, r4
   1f128:	bl	1f16c <__assert_fail@plt+0xdbb0>
   1f12c:	cmp	r0, #0
   1f130:	beq	1f15c <__assert_fail@plt+0xdba0>
   1f134:	bl	11490 <__errno_location@plt>
   1f138:	ldr	r6, [r0]
   1f13c:	mov	r5, r0
   1f140:	mov	r0, r4
   1f144:	bl	114e4 <fclose@plt>
   1f148:	cmp	r6, #0
   1f14c:	strne	r6, [r5]
   1f150:	mvnne	r0, #0
   1f154:	sub	sp, fp, #16
   1f158:	pop	{r4, r5, r6, sl, fp, pc}
   1f15c:	mov	r0, r4
   1f160:	sub	sp, fp, #16
   1f164:	pop	{r4, r5, r6, sl, fp, lr}
   1f168:	b	114e4 <fclose@plt>
   1f16c:	push	{r4, sl, fp, lr}
   1f170:	add	fp, sp, #8
   1f174:	sub	sp, sp, #8
   1f178:	mov	r4, r0
   1f17c:	cmp	r0, #0
   1f180:	beq	1f19c <__assert_fail@plt+0xdbe0>
   1f184:	mov	r0, r4
   1f188:	bl	1140c <__freading@plt>
   1f18c:	cmp	r0, #0
   1f190:	ldrbne	r0, [r4, #1]
   1f194:	tstne	r0, #1
   1f198:	bne	1f1ac <__assert_fail@plt+0xdbf0>
   1f19c:	mov	r0, r4
   1f1a0:	sub	sp, fp, #8
   1f1a4:	pop	{r4, sl, fp, lr}
   1f1a8:	b	112c8 <fflush@plt>
   1f1ac:	mov	r0, #1
   1f1b0:	mov	r2, #0
   1f1b4:	mov	r3, #0
   1f1b8:	str	r0, [sp]
   1f1bc:	mov	r0, r4
   1f1c0:	bl	1f1fc <__assert_fail@plt+0xdc40>
   1f1c4:	mov	r0, r4
   1f1c8:	sub	sp, fp, #8
   1f1cc:	pop	{r4, sl, fp, lr}
   1f1d0:	b	112c8 <fflush@plt>
   1f1d4:	push	{r4, r5, r6, sl, fp, lr}
   1f1d8:	add	fp, sp, #16
   1f1dc:	mov	r4, r0
   1f1e0:	bl	11490 <__errno_location@plt>
   1f1e4:	ldr	r6, [r0]
   1f1e8:	mov	r5, r0
   1f1ec:	mov	r0, r4
   1f1f0:	bl	112d4 <free@plt>
   1f1f4:	str	r6, [r5]
   1f1f8:	pop	{r4, r5, r6, sl, fp, pc}
   1f1fc:	push	{r4, r5, r6, r7, fp, lr}
   1f200:	add	fp, sp, #16
   1f204:	sub	sp, sp, #8
   1f208:	mov	r4, r0
   1f20c:	ldr	r0, [r0, #4]
   1f210:	mov	r5, r3
   1f214:	mov	r6, r2
   1f218:	ldr	r1, [r4, #8]
   1f21c:	cmp	r1, r0
   1f220:	bne	1f23c <__assert_fail@plt+0xdc80>
   1f224:	ldrd	r0, [r4, #16]
   1f228:	cmp	r1, r0
   1f22c:	bne	1f23c <__assert_fail@plt+0xdc80>
   1f230:	ldr	r0, [r4, #36]	; 0x24
   1f234:	cmp	r0, #0
   1f238:	beq	1f254 <__assert_fail@plt+0xdc98>
   1f23c:	mov	r0, r4
   1f240:	mov	r2, r6
   1f244:	mov	r3, r5
   1f248:	sub	sp, fp, #16
   1f24c:	pop	{r4, r5, r6, r7, fp, lr}
   1f250:	b	114f0 <fseeko64@plt>
   1f254:	ldr	r7, [fp, #8]
   1f258:	mov	r0, r4
   1f25c:	bl	114cc <fileno@plt>
   1f260:	mov	r2, r6
   1f264:	mov	r3, r5
   1f268:	str	r7, [sp]
   1f26c:	bl	11388 <lseek64@plt>
   1f270:	and	r2, r0, r1
   1f274:	cmn	r2, #1
   1f278:	mvneq	r0, #0
   1f27c:	subeq	sp, fp, #16
   1f280:	popeq	{r4, r5, r6, r7, fp, pc}
   1f284:	strd	r0, [r4, #80]	; 0x50
   1f288:	ldr	r0, [r4]
   1f28c:	bic	r0, r0, #16
   1f290:	str	r0, [r4]
   1f294:	mov	r0, #0
   1f298:	sub	sp, fp, #16
   1f29c:	pop	{r4, r5, r6, r7, fp, pc}
   1f2a0:	push	{fp, lr}
   1f2a4:	mov	fp, sp
   1f2a8:	mov	r0, #14
   1f2ac:	bl	11520 <nl_langinfo@plt>
   1f2b0:	movw	r1, #13217	; 0x33a1
   1f2b4:	cmp	r0, #0
   1f2b8:	movt	r1, #2
   1f2bc:	movne	r1, r0
   1f2c0:	movw	r0, #14629	; 0x3925
   1f2c4:	ldrb	r2, [r1]
   1f2c8:	movt	r0, #2
   1f2cc:	cmp	r2, #0
   1f2d0:	movne	r0, r1
   1f2d4:	pop	{fp, pc}
   1f2d8:	push	{r4, r5, r6, r7, fp, lr}
   1f2dc:	add	fp, sp, #16
   1f2e0:	sub	sp, sp, #8
   1f2e4:	add	r5, sp, #4
   1f2e8:	cmp	r0, #0
   1f2ec:	mov	r7, r2
   1f2f0:	mov	r4, r1
   1f2f4:	movne	r5, r0
   1f2f8:	mov	r0, r5
   1f2fc:	bl	113ac <mbrtowc@plt>
   1f300:	mov	r6, r0
   1f304:	cmp	r7, #0
   1f308:	beq	1f32c <__assert_fail@plt+0xdd70>
   1f30c:	cmn	r6, #2
   1f310:	bcc	1f32c <__assert_fail@plt+0xdd70>
   1f314:	mov	r0, #0
   1f318:	bl	20e0c <__assert_fail@plt+0xf850>
   1f31c:	cmp	r0, #0
   1f320:	ldrbeq	r0, [r4]
   1f324:	moveq	r6, #1
   1f328:	streq	r0, [r5]
   1f32c:	mov	r0, r6
   1f330:	sub	sp, fp, #16
   1f334:	pop	{r4, r5, r6, r7, fp, pc}
   1f338:	push	{fp, lr}
   1f33c:	mov	fp, sp
   1f340:	sub	sp, sp, #24
   1f344:	mvn	ip, #0
   1f348:	str	ip, [sp, #8]
   1f34c:	mov	ip, #0
   1f350:	str	ip, [sp, #4]
   1f354:	str	ip, [sp]
   1f358:	ldr	ip, [fp, #12]
   1f35c:	str	ip, [sp, #16]
   1f360:	ldr	ip, [fp, #8]
   1f364:	str	ip, [sp, #12]
   1f368:	bl	1f374 <__assert_fail@plt+0xddb8>
   1f36c:	mov	sp, fp
   1f370:	pop	{fp, pc}
   1f374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f378:	add	fp, sp, #28
   1f37c:	sub	sp, sp, #132	; 0x84
   1f380:	sub	sp, sp, #1024	; 0x400
   1f384:	mov	r4, r3
   1f388:	mov	sl, r2
   1f38c:	str	r1, [sp, #96]	; 0x60
   1f390:	mov	r5, r0
   1f394:	bl	11490 <__errno_location@plt>
   1f398:	mov	r2, r4
   1f39c:	ldrb	r3, [sl]
   1f3a0:	str	r0, [sp, #68]	; 0x44
   1f3a4:	ldr	r0, [r0]
   1f3a8:	movw	r6, #13217	; 0x33a1
   1f3ac:	ldr	r1, [r2, #8]!
   1f3b0:	movt	r6, #2
   1f3b4:	str	r0, [sp, #64]	; 0x40
   1f3b8:	cmp	r1, #0
   1f3bc:	mov	r7, r1
   1f3c0:	movweq	r7, #12
   1f3c4:	cmp	r1, #12
   1f3c8:	subgt	r7, r1, #12
   1f3cc:	ldr	r1, [r2, #32]
   1f3d0:	cmp	r1, #0
   1f3d4:	movne	r6, r1
   1f3d8:	cmp	r3, #0
   1f3dc:	beq	20d78 <__assert_fail@plt+0xf7bc>
   1f3e0:	sub	r0, fp, #48	; 0x30
   1f3e4:	mvn	r1, #13
   1f3e8:	ldr	r9, [fp, #16]
   1f3ec:	str	r4, [sp, #80]	; 0x50
   1f3f0:	sub	r8, r6, #1
   1f3f4:	str	r6, [sp, #44]	; 0x2c
   1f3f8:	mov	lr, #0
   1f3fc:	mov	r6, #-2147483648	; 0x80000000
   1f400:	mov	ip, r5
   1f404:	str	r7, [sp, #52]	; 0x34
   1f408:	str	r2, [sp, #56]	; 0x38
   1f40c:	sub	r1, r1, r0
   1f410:	str	r8, [sp, #24]
   1f414:	str	r1, [sp, #36]	; 0x24
   1f418:	add	r1, r0, #13
   1f41c:	add	r0, r0, #14
   1f420:	str	r1, [sp, #28]
   1f424:	add	r1, sp, #104	; 0x68
   1f428:	str	r0, [sp, #72]	; 0x48
   1f42c:	add	r1, r1, #1
   1f430:	str	r1, [sp, #40]	; 0x28
   1f434:	add	r1, r4, #12
   1f438:	movw	r4, #52428	; 0xcccc
   1f43c:	str	r1, [sp, #48]	; 0x30
   1f440:	sub	r1, fp, #53	; 0x35
   1f444:	movt	r4, #3276	; 0xccc
   1f448:	add	r0, r1, #3
   1f44c:	str	r0, [sp, #60]	; 0x3c
   1f450:	add	r0, r1, #2
   1f454:	str	r0, [sp, #76]	; 0x4c
   1f458:	uxtb	r1, r3
   1f45c:	cmp	r1, #37	; 0x25
   1f460:	bne	1f47c <__assert_fail@plt+0xdec0>
   1f464:	ldr	r0, [fp, #8]
   1f468:	mov	r7, #0
   1f46c:	mov	r5, #0
   1f470:	str	sl, [sp, #88]	; 0x58
   1f474:	str	r0, [sp, #100]	; 0x64
   1f478:	b	1f57c <__assert_fail@plt+0xdfc0>
   1f47c:	ldr	r0, [sp, #96]	; 0x60
   1f480:	bic	r1, r9, r9, asr #31
   1f484:	cmp	r1, #1
   1f488:	mov	r5, r1
   1f48c:	movls	r5, #1
   1f490:	sub	r2, r0, lr
   1f494:	cmp	r5, r2
   1f498:	bcs	20dac <__assert_fail@plt+0xf7f0>
   1f49c:	cmp	ip, #0
   1f4a0:	beq	1f630 <__assert_fail@plt+0xe074>
   1f4a4:	cmp	r1, #2
   1f4a8:	bcc	1f4e4 <__assert_fail@plt+0xdf28>
   1f4ac:	sub	r4, r1, #1
   1f4b0:	mov	r0, ip
   1f4b4:	mov	r1, #32
   1f4b8:	mov	r6, lr
   1f4bc:	mov	r7, ip
   1f4c0:	mov	r2, r4
   1f4c4:	bl	114b4 <memset@plt>
   1f4c8:	ldrb	r3, [sl]
   1f4cc:	mov	ip, r7
   1f4d0:	mov	lr, r6
   1f4d4:	mov	r6, #-2147483648	; 0x80000000
   1f4d8:	add	ip, r7, r4
   1f4dc:	movw	r4, #52428	; 0xcccc
   1f4e0:	movt	r4, #3276	; 0xccc
   1f4e4:	strb	r3, [ip], #1
   1f4e8:	add	lr, r5, lr
   1f4ec:	ldrb	r3, [sl, #1]!
   1f4f0:	mvn	r9, #0
   1f4f4:	cmp	r3, #0
   1f4f8:	bne	1f458 <__assert_fail@plt+0xde9c>
   1f4fc:	b	20d80 <__assert_fail@plt+0xf7c4>
   1f500:	mov	r7, #1
   1f504:	b	1f57c <__assert_fail@plt+0xdfc0>
   1f508:	add	r3, pc, #0
   1f50c:	ldr	pc, [r3, r2, lsl #2]
   1f510:	andeq	pc, r1, r0, lsl #10
   1f514:	muleq	r1, r8, r5
   1f518:	muleq	r1, r8, r5
   1f51c:	muleq	r1, r8, r5
   1f520:	muleq	r1, r8, r5
   1f524:	muleq	r1, r8, r5
   1f528:	muleq	r1, r8, r5
   1f52c:	muleq	r1, r8, r5
   1f530:	andeq	pc, r1, r8, asr #10
   1f534:	muleq	r1, r8, r5
   1f538:	andeq	pc, r1, r8, asr #10
   1f53c:	muleq	r1, r8, r5
   1f540:	muleq	r1, r8, r5
   1f544:	andeq	pc, r1, r8, asr #10
   1f548:	add	r1, r1, #1
   1f54c:	add	sl, sl, #1
   1f550:	mov	r5, r0
   1f554:	ldrb	r0, [sl]
   1f558:	sub	r2, r0, #35	; 0x23
   1f55c:	cmp	r2, #13
   1f560:	bls	1f508 <__assert_fail@plt+0xdf4c>
   1f564:	cmp	r0, #95	; 0x5f
   1f568:	beq	1f548 <__assert_fail@plt+0xdf8c>
   1f56c:	cmp	r0, #94	; 0x5e
   1f570:	bne	1f598 <__assert_fail@plt+0xdfdc>
   1f574:	mov	r0, #1
   1f578:	str	r0, [sp, #100]	; 0x64
   1f57c:	add	r1, sl, #2
   1f580:	add	sl, sl, #1
   1f584:	ldrb	r0, [sl]
   1f588:	sub	r2, r0, #35	; 0x23
   1f58c:	cmp	r2, #13
   1f590:	bls	1f508 <__assert_fail@plt+0xdf4c>
   1f594:	b	1f564 <__assert_fail@plt+0xdfa8>
   1f598:	sub	r2, r0, #48	; 0x30
   1f59c:	cmp	r2, #9
   1f5a0:	bhi	1f610 <__assert_fail@plt+0xe054>
   1f5a4:	mov	r9, #0
   1f5a8:	cmn	r9, #1
   1f5ac:	ble	1f5bc <__assert_fail@plt+0xe000>
   1f5b0:	cmp	r9, r4
   1f5b4:	bgt	1f5cc <__assert_fail@plt+0xe010>
   1f5b8:	b	1f5e4 <__assert_fail@plt+0xe028>
   1f5bc:	beq	1f5e4 <__assert_fail@plt+0xe028>
   1f5c0:	sdiv	r2, r6, r9
   1f5c4:	cmp	r2, #10
   1f5c8:	bge	1f5e4 <__assert_fail@plt+0xe028>
   1f5cc:	mvn	r9, #-2147483648	; 0x80000000
   1f5d0:	ldrb	r0, [r1], #1
   1f5d4:	sub	r2, r0, #48	; 0x30
   1f5d8:	cmp	r2, #10
   1f5dc:	bcc	1f5a8 <__assert_fail@plt+0xdfec>
   1f5e0:	b	1f60c <__assert_fail@plt+0xe050>
   1f5e4:	add	r2, r9, r9, lsl #2
   1f5e8:	lsl	r3, r2, #1
   1f5ec:	uxtab	r0, r3, r0
   1f5f0:	sub	r9, r0, #48	; 0x30
   1f5f4:	cmp	r9, r2, lsl #1
   1f5f8:	mvnvs	r9, #-2147483648	; 0x80000000
   1f5fc:	ldrb	r0, [r1], #1
   1f600:	sub	r2, r0, #48	; 0x30
   1f604:	cmp	r2, #10
   1f608:	bcc	1f5a8 <__assert_fail@plt+0xdfec>
   1f60c:	sub	sl, r1, #1
   1f610:	cmp	r0, #79	; 0x4f
   1f614:	str	ip, [sp, #92]	; 0x5c
   1f618:	cmpne	r0, #69	; 0x45
   1f61c:	bne	1f64c <__assert_fail@plt+0xe090>
   1f620:	ldrb	r1, [sl, #1]!
   1f624:	cmp	r1, #122	; 0x7a
   1f628:	bls	1f65c <__assert_fail@plt+0xe0a0>
   1f62c:	b	20284 <__assert_fail@plt+0xecc8>
   1f630:	mov	ip, #0
   1f634:	add	lr, r5, lr
   1f638:	ldrb	r3, [sl, #1]!
   1f63c:	mvn	r9, #0
   1f640:	cmp	r3, #0
   1f644:	bne	1f458 <__assert_fail@plt+0xde9c>
   1f648:	b	20d80 <__assert_fail@plt+0xf7c4>
   1f64c:	mov	r1, r0
   1f650:	mov	r0, #0
   1f654:	cmp	r1, #122	; 0x7a
   1f658:	bhi	20284 <__assert_fail@plt+0xecc8>
   1f65c:	movw	r4, #14653	; 0x393d
   1f660:	add	r2, pc, #12
   1f664:	mov	r6, #0
   1f668:	mvn	r8, #0
   1f66c:	movt	r4, #2
   1f670:	ldr	pc, [r2, r1, lsl #2]
   1f674:	andeq	pc, r1, ip, asr #19
   1f678:	andeq	r0, r2, r4, lsl #5
   1f67c:	andeq	r0, r2, r4, lsl #5
   1f680:	andeq	r0, r2, r4, lsl #5
   1f684:	andeq	r0, r2, r4, lsl #5
   1f688:	andeq	r0, r2, r4, lsl #5
   1f68c:	andeq	r0, r2, r4, lsl #5
   1f690:	andeq	r0, r2, r4, lsl #5
   1f694:	andeq	r0, r2, r4, lsl #5
   1f698:	andeq	r0, r2, r4, lsl #5
   1f69c:	andeq	r0, r2, r4, lsl #5
   1f6a0:	andeq	r0, r2, r4, lsl #5
   1f6a4:	andeq	r0, r2, r4, lsl #5
   1f6a8:	andeq	r0, r2, r4, lsl #5
   1f6ac:	andeq	r0, r2, r4, lsl #5
   1f6b0:	andeq	r0, r2, r4, lsl #5
   1f6b4:	andeq	r0, r2, r4, lsl #5
   1f6b8:	andeq	r0, r2, r4, lsl #5
   1f6bc:	andeq	r0, r2, r4, lsl #5
   1f6c0:	andeq	r0, r2, r4, lsl #5
   1f6c4:	andeq	r0, r2, r4, lsl #5
   1f6c8:	andeq	r0, r2, r4, lsl #5
   1f6cc:	andeq	r0, r2, r4, lsl #5
   1f6d0:	andeq	r0, r2, r4, lsl #5
   1f6d4:	andeq	r0, r2, r4, lsl #5
   1f6d8:	andeq	r0, r2, r4, lsl #5
   1f6dc:	andeq	r0, r2, r4, lsl #5
   1f6e0:	andeq	r0, r2, r4, lsl #5
   1f6e4:	andeq	r0, r2, r4, lsl #5
   1f6e8:	andeq	r0, r2, r4, lsl #5
   1f6ec:	andeq	r0, r2, r4, lsl #5
   1f6f0:	andeq	r0, r2, r4, lsl #5
   1f6f4:	andeq	r0, r2, r4, lsl #5
   1f6f8:	andeq	r0, r2, r4, lsl #5
   1f6fc:	andeq	r0, r2, r4, lsl #5
   1f700:	andeq	r0, r2, r4, lsl #5
   1f704:	andeq	r0, r2, r4, lsl #5
   1f708:	ldrdeq	pc, [r1], -r8
   1f70c:	andeq	r0, r2, r4, lsl #5
   1f710:	andeq	r0, r2, r4, lsl #5
   1f714:	andeq	r0, r2, r4, lsl #5
   1f718:	andeq	r0, r2, r4, lsl #5
   1f71c:	andeq	r0, r2, r4, lsl #5
   1f720:	andeq	r0, r2, r4, lsl #5
   1f724:	andeq	r0, r2, r4, lsl #5
   1f728:	andeq	r0, r2, r4, lsl #5
   1f72c:	andeq	r0, r2, r4, lsl #5
   1f730:	andeq	r0, r2, r4, lsl #5
   1f734:	andeq	r0, r2, r4, lsl #5
   1f738:	andeq	r0, r2, r4, lsl #5
   1f73c:	andeq	r0, r2, r4, lsl #5
   1f740:	andeq	r0, r2, r4, lsl #5
   1f744:	andeq	r0, r2, r4, lsl #5
   1f748:	andeq	r0, r2, r4, lsl #5
   1f74c:	andeq	r0, r2, r4, lsl #5
   1f750:	andeq	r0, r2, r4, lsl #5
   1f754:	andeq	r0, r2, r4, lsl #5
   1f758:	andeq	r0, r2, r4, lsl #5
   1f75c:	andeq	pc, r1, r4, asr #20
   1f760:	andeq	r0, r2, r4, lsl #5
   1f764:	andeq	r0, r2, r4, lsl #5
   1f768:	andeq	r0, r2, r4, lsl #5
   1f76c:	andeq	r0, r2, r4, lsl #5
   1f770:	andeq	r0, r2, r4, lsl #5
   1f774:	andeq	r0, r2, r4, lsl #5
   1f778:	andeq	pc, r1, r0, asr #21
   1f77c:	andeq	pc, r1, r0, ror #21
   1f780:	andeq	pc, r1, r0, lsl #22
   1f784:	andeq	pc, r1, r4, lsl fp	; <UNPREDICTABLE>
   1f788:	andeq	r0, r2, r4, lsl #5
   1f78c:	andeq	pc, r1, r8, lsr #22
   1f790:	andeq	pc, r1, r0, ror #16
   1f794:	andeq	pc, r1, r4, asr fp	; <UNPREDICTABLE>
   1f798:	andeq	pc, r1, r8, ror #22
   1f79c:	andeq	r0, r2, r4, lsl #5
   1f7a0:	andeq	r0, r2, r4, lsl #5
   1f7a4:	andeq	r0, r2, r4, lsl #5
   1f7a8:	andeq	pc, r1, ip, ror fp	; <UNPREDICTABLE>
   1f7ac:	muleq	r1, r0, fp
   1f7b0:	andeq	r0, r2, r4, lsl #5
   1f7b4:			; <UNDEFINED> instruction: 0x0001fcb4
   1f7b8:	andeq	r0, r2, r4, lsl #5
   1f7bc:	strdeq	pc, [r1], -r0
   1f7c0:	ldrdeq	pc, [r1], -r4
   1f7c4:	andeq	pc, r1, r8, ror #25
   1f7c8:	muleq	r1, r8, sp
   1f7cc:	andeq	pc, r1, r0, ror #16
   1f7d0:	andeq	pc, r1, r4, asr #27
   1f7d4:	andeq	pc, r1, r0, lsl lr	; <UNPREDICTABLE>
   1f7d8:	andeq	pc, r1, r4, lsr #28
   1f7dc:	andeq	pc, r1, r0, ror #28
   1f7e0:	andeq	r0, r2, r4, lsl #5
   1f7e4:	andeq	r0, r2, r4, lsl #5
   1f7e8:	andeq	r0, r2, r4, lsl #5
   1f7ec:	andeq	r0, r2, r4, lsl #5
   1f7f0:	andeq	r0, r2, r4, lsl #5
   1f7f4:	andeq	r0, r2, r4, lsl #5
   1f7f8:	ldrdeq	pc, [r1], -r0
   1f7fc:			; <UNDEFINED> instruction: 0x0001f9b0
   1f800:	strdeq	pc, [r1], -r0
   1f804:	andeq	pc, r1, r4, lsl #30
   1f808:	andeq	pc, r1, r8, lsl pc	; <UNPREDICTABLE>
   1f80c:	andeq	r0, r2, r4, lsl #5
   1f810:	andeq	pc, r1, r0, ror #16
   1f814:			; <UNDEFINED> instruction: 0x0001f9b0
   1f818:	andeq	r0, r2, r4, lsl #5
   1f81c:	andeq	pc, r1, r8, lsr #30
   1f820:	andeq	pc, r1, r0, asr #30
   1f824:	andeq	pc, r1, r4, asr pc	; <UNPREDICTABLE>
   1f828:	andeq	r0, r2, r8, lsl #1
   1f82c:	strheq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f830:	andeq	r0, r2, r4, lsl #5
   1f834:			; <UNDEFINED> instruction: 0x0001fcb8
   1f838:	andeq	r0, r2, r0, lsl r1
   1f83c:	andeq	r0, r2, r4, asr #22
   1f840:	andeq	r0, r2, r0, lsr r1
   1f844:	ldrdeq	r0, [r2], -r0	; <UNPREDICTABLE>
   1f848:	andeq	r0, r2, r0, lsr r2
   1f84c:	andeq	r0, r2, r4, lsl #5
   1f850:	andeq	r0, r2, r4, ror #4
   1f854:	andeq	r0, r2, ip, ror r2
   1f858:	andeq	r0, r2, r0, asr #7
   1f85c:	andeq	pc, r1, r0, ror sl	; <UNPREDICTABLE>
   1f860:	cmp	r0, #69	; 0x45
   1f864:	beq	20284 <__assert_fail@plt+0xecc8>
   1f868:	ldr	r2, [sp, #80]	; 0x50
   1f86c:	str	lr, [sp, #84]	; 0x54
   1f870:	movw	ip, #9363	; 0x2493
   1f874:	movt	ip, #37449	; 0x9249
   1f878:	ldr	r6, [r2, #28]
   1f87c:	ldr	r8, [r2, #24]
   1f880:	ldr	lr, [r2, #20]
   1f884:	movw	r2, #382	; 0x17e
   1f888:	add	r2, r6, r2
   1f88c:	cmp	lr, #0
   1f890:	sub	r2, r2, r8
   1f894:	smmla	r4, r2, ip, r2
   1f898:	asr	r7, r4, #2
   1f89c:	add	r4, r7, r4, lsr #31
   1f8a0:	rsb	r4, r4, r4, lsl #3
   1f8a4:	sub	r2, r4, r2
   1f8a8:	add	r2, r6, r2
   1f8ac:	add	r4, r2, #3
   1f8b0:	mvn	r2, #99	; 0x63
   1f8b4:	movwlt	r2, #300	; 0x12c
   1f8b8:	cmn	r4, #1
   1f8bc:	add	r2, r2, lr
   1f8c0:	ble	2054c <__assert_fail@plt+0xef90>
   1f8c4:	movw	r7, #365	; 0x16d
   1f8c8:	tst	r2, #3
   1f8cc:	bne	1f918 <__assert_fail@plt+0xe35c>
   1f8d0:	movw	r7, #34079	; 0x851f
   1f8d4:	mov	ip, #100	; 0x64
   1f8d8:	movt	r7, #20971	; 0x51eb
   1f8dc:	smmul	r7, r2, r7
   1f8e0:	asr	r3, r7, #5
   1f8e4:	add	r3, r3, r7, lsr #31
   1f8e8:	mls	ip, r3, ip, r2
   1f8ec:	asr	r3, r7, #7
   1f8f0:	add	r3, r3, r7, lsr #31
   1f8f4:	mov	r7, #400	; 0x190
   1f8f8:	mls	r2, r3, r7, r2
   1f8fc:	movw	r7, #365	; 0x16d
   1f900:	cmp	r2, #0
   1f904:	movweq	r7, #366	; 0x16e
   1f908:	cmp	ip, #0
   1f90c:	movw	ip, #9363	; 0x2493
   1f910:	movt	ip, #37449	; 0x9249
   1f914:	movwne	r7, #366	; 0x16e
   1f918:	movw	r3, #382	; 0x17e
   1f91c:	add	r2, r8, r7
   1f920:	add	r3, r6, r3
   1f924:	sub	r2, r3, r2
   1f928:	smmla	r2, r2, ip, r2
   1f92c:	asr	r3, r2, #2
   1f930:	add	r2, r3, r2, lsr #31
   1f934:	movw	r3, #379	; 0x17b
   1f938:	rsb	r2, r2, r2, lsl #3
   1f93c:	add	r2, r2, r8
   1f940:	sub	r2, r2, r3
   1f944:	mov	r3, #1
   1f948:	cmn	r2, #1
   1f94c:	eor	r3, r3, r2, lsr #31
   1f950:	movgt	r4, r2
   1f954:	cmp	r1, #71	; 0x47
   1f958:	beq	205d0 <__assert_fail@plt+0xf014>
   1f95c:	cmp	r1, #103	; 0x67
   1f960:	bne	20624 <__assert_fail@plt+0xf068>
   1f964:	movw	r2, #34079	; 0x851f
   1f968:	mov	ip, #2
   1f96c:	movt	r2, #20971	; 0x51eb
   1f970:	smmul	r7, lr, r2
   1f974:	asr	r6, r7, #5
   1f978:	add	r7, r6, r7, lsr #31
   1f97c:	mov	r6, #100	; 0x64
   1f980:	mls	r7, r7, r6, lr
   1f984:	add	r7, r3, r7
   1f988:	smmul	r2, r7, r2
   1f98c:	asr	r4, r2, #5
   1f990:	add	r2, r4, r2, lsr #31
   1f994:	mls	r4, r2, r6, r7
   1f998:	mov	r2, #0
   1f99c:	cmn	r4, #1
   1f9a0:	ble	2086c <__assert_fail@plt+0xf2b0>
   1f9a4:	ldr	lr, [sp, #84]	; 0x54
   1f9a8:	mov	r3, r4
   1f9ac:	b	208ac <__assert_fail@plt+0xf2f0>
   1f9b0:	ldr	r2, [sp, #100]	; 0x64
   1f9b4:	mov	r6, #0
   1f9b8:	cmp	r0, #69	; 0x45
   1f9bc:	orr	r2, r7, r2
   1f9c0:	str	r2, [sp, #100]	; 0x64
   1f9c4:	beq	20284 <__assert_fail@plt+0xecc8>
   1f9c8:	b	20b44 <__assert_fail@plt+0xf588>
   1f9cc:	ldr	ip, [sp, #92]	; 0x5c
   1f9d0:	sub	r8, sl, #1
   1f9d4:	b	2028c <__assert_fail@plt+0xecd0>
   1f9d8:	ldr	r0, [sp, #88]	; 0x58
   1f9dc:	ldr	ip, [sp, #92]	; 0x5c
   1f9e0:	sub	r8, sl, #1
   1f9e4:	cmp	r8, r0
   1f9e8:	bne	2028c <__assert_fail@plt+0xecd0>
   1f9ec:	ldr	r1, [sp, #96]	; 0x60
   1f9f0:	subs	r0, r5, #45	; 0x2d
   1f9f4:	bicne	r0, r9, r9, asr #31
   1f9f8:	cmp	r0, #1
   1f9fc:	mov	r6, r0
   1fa00:	movls	r6, #1
   1fa04:	sub	r1, r1, lr
   1fa08:	cmp	r6, r1
   1fa0c:	bcs	20dac <__assert_fail@plt+0xf7f0>
   1fa10:	cmp	ip, #0
   1fa14:	beq	1fd90 <__assert_fail@plt+0xe7d4>
   1fa18:	mov	r1, #37	; 0x25
   1fa1c:	cmp	r0, #2
   1fa20:	bcc	20d68 <__assert_fail@plt+0xf7ac>
   1fa24:	uxtb	r1, r5
   1fa28:	sub	r4, r0, #1
   1fa2c:	cmp	r1, #48	; 0x30
   1fa30:	cmpne	r1, #43	; 0x2b
   1fa34:	bne	20d40 <__assert_fail@plt+0xf784>
   1fa38:	mov	r0, ip
   1fa3c:	mov	r1, #48	; 0x30
   1fa40:	b	20d48 <__assert_fail@plt+0xf78c>
   1fa44:	mov	r6, #1
   1fa48:	ldrb	r2, [sl, r6]
   1fa4c:	cmp	r2, #58	; 0x3a
   1fa50:	bne	1fa64 <__assert_fail@plt+0xe4a8>
   1fa54:	add	r6, r6, #1
   1fa58:	ldrb	r2, [sl, r6]
   1fa5c:	cmp	r2, #58	; 0x3a
   1fa60:	beq	1fa54 <__assert_fail@plt+0xe498>
   1fa64:	cmp	r2, #122	; 0x7a
   1fa68:	bne	20284 <__assert_fail@plt+0xecc8>
   1fa6c:	add	sl, sl, r6
   1fa70:	ldr	r3, [sp, #80]	; 0x50
   1fa74:	ldr	r2, [r3, #32]
   1fa78:	cmp	r2, #0
   1fa7c:	blt	20600 <__assert_fail@plt+0xf044>
   1fa80:	str	lr, [sp, #84]	; 0x54
   1fa84:	ldr	lr, [r3, #36]	; 0x24
   1fa88:	cmp	lr, #0
   1fa8c:	blt	2074c <__assert_fail@plt+0xf190>
   1fa90:	ldr	ip, [sp, #92]	; 0x5c
   1fa94:	mov	r2, #0
   1fa98:	bne	20754 <__assert_fail@plt+0xf198>
   1fa9c:	ldr	r2, [sp, #44]	; 0x2c
   1faa0:	ldrb	r2, [r2]
   1faa4:	sub	r2, r2, #45	; 0x2d
   1faa8:	clz	r2, r2
   1faac:	lsr	r2, r2, #5
   1fab0:	cmp	r6, #3
   1fab4:	bls	2075c <__assert_fail@plt+0xf1a0>
   1fab8:	ldr	lr, [sp, #84]	; 0x54
   1fabc:	b	20288 <__assert_fail@plt+0xeccc>
   1fac0:	cmp	r0, #0
   1fac4:	bne	20284 <__assert_fail@plt+0xecc8>
   1fac8:	ldr	r1, [sp, #100]	; 0x64
   1facc:	mov	r6, #0
   1fad0:	orr	r1, r7, r1
   1fad4:	str	r1, [sp, #100]	; 0x64
   1fad8:	mov	r1, #65	; 0x41
   1fadc:	b	20b44 <__assert_fail@plt+0xf588>
   1fae0:	cmp	r0, #69	; 0x45
   1fae4:	beq	20284 <__assert_fail@plt+0xecc8>
   1fae8:	ldr	r1, [sp, #100]	; 0x64
   1faec:	mov	r6, #0
   1faf0:	orr	r1, r7, r1
   1faf4:	str	r1, [sp, #100]	; 0x64
   1faf8:	mov	r1, #66	; 0x42
   1fafc:	b	20b44 <__assert_fail@plt+0xf588>
   1fb00:	cmp	r0, #69	; 0x45
   1fb04:	bne	20640 <__assert_fail@plt+0xf084>
   1fb08:	mov	r6, #0
   1fb0c:	mov	r1, #67	; 0x43
   1fb10:	b	20b44 <__assert_fail@plt+0xf588>
   1fb14:	cmp	r0, #0
   1fb18:	bne	20284 <__assert_fail@plt+0xecc8>
   1fb1c:	movw	r4, #14635	; 0x392b
   1fb20:	movt	r4, #2
   1fb24:	b	1fcf0 <__assert_fail@plt+0xe734>
   1fb28:	cmp	r0, #0
   1fb2c:	bne	20284 <__assert_fail@plt+0xecc8>
   1fb30:	movw	r4, #14644	; 0x3934
   1fb34:	cmp	r5, #0
   1fb38:	movt	r4, #2
   1fb3c:	bne	2088c <__assert_fail@plt+0xf2d0>
   1fb40:	cmp	r9, #0
   1fb44:	bge	2088c <__assert_fail@plt+0xf2d0>
   1fb48:	mov	r5, #43	; 0x2b
   1fb4c:	mov	r8, #4
   1fb50:	b	1fcf0 <__assert_fail@plt+0xe734>
   1fb54:	cmp	r0, #69	; 0x45
   1fb58:	beq	20284 <__assert_fail@plt+0xecc8>
   1fb5c:	ldr	r2, [sp, #56]	; 0x38
   1fb60:	ldr	r3, [r2]
   1fb64:	b	1ff68 <__assert_fail@plt+0xe9ac>
   1fb68:	mov	ip, #2
   1fb6c:	cmp	r0, #69	; 0x45
   1fb70:	beq	20284 <__assert_fail@plt+0xecc8>
   1fb74:	ldr	r3, [sp, #52]	; 0x34
   1fb78:	b	1ff6c <__assert_fail@plt+0xe9b0>
   1fb7c:	cmp	r0, #69	; 0x45
   1fb80:	beq	20284 <__assert_fail@plt+0xecc8>
   1fb84:	ldr	r2, [sp, #80]	; 0x50
   1fb88:	ldr	r3, [r2, #4]
   1fb8c:	b	1ff68 <__assert_fail@plt+0xe9ac>
   1fb90:	cmp	r0, #69	; 0x45
   1fb94:	beq	20284 <__assert_fail@plt+0xecc8>
   1fb98:	ldr	r0, [fp, #24]
   1fb9c:	cmp	r9, #1
   1fba0:	mov	r4, #9
   1fba4:	mov	r7, #8
   1fba8:	movwlt	r9, #9
   1fbac:	cmp	r9, r4
   1fbb0:	bge	1fbd8 <__assert_fail@plt+0xe61c>
   1fbb4:	movw	r1, #26215	; 0x6667
   1fbb8:	sub	r7, r7, #1
   1fbbc:	sub	r4, r4, #1
   1fbc0:	movt	r1, #26214	; 0x6666
   1fbc4:	smmul	r0, r0, r1
   1fbc8:	asr	r1, r0, #2
   1fbcc:	add	r0, r1, r0, lsr #31
   1fbd0:	cmp	r9, r4
   1fbd4:	blt	1fbb4 <__assert_fail@plt+0xe5f8>
   1fbd8:	movw	r1, #26215	; 0x6667
   1fbdc:	cmp	r4, #2
   1fbe0:	movt	r1, #26214	; 0x6666
   1fbe4:	blt	1fc04 <__assert_fail@plt+0xe648>
   1fbe8:	smmul	r2, r0, r1
   1fbec:	asr	r3, r2, #2
   1fbf0:	add	r2, r3, r2, lsr #31
   1fbf4:	add	r2, r2, r2, lsl #2
   1fbf8:	sub	r2, r0, r2, lsl #1
   1fbfc:	cmp	r2, #0
   1fc00:	beq	1fbb4 <__assert_fail@plt+0xe5f8>
   1fc04:	cmp	r4, #1
   1fc08:	mov	r2, r7
   1fc0c:	sub	ip, fp, #48	; 0x30
   1fc10:	blt	1fc48 <__assert_fail@plt+0xe68c>
   1fc14:	smmul	r3, r0, r1
   1fc18:	asr	r6, r3, #2
   1fc1c:	add	r3, r6, r3, lsr #31
   1fc20:	add	r6, r3, r3, lsl #2
   1fc24:	sub	r0, r0, r6, lsl #1
   1fc28:	add	r0, r0, #48	; 0x30
   1fc2c:	strb	r0, [ip, r2]
   1fc30:	sub	r0, r2, #1
   1fc34:	add	r2, r2, #1
   1fc38:	cmp	r2, #1
   1fc3c:	mov	r2, r0
   1fc40:	mov	r0, r3
   1fc44:	bgt	1fc14 <__assert_fail@plt+0xe658>
   1fc48:	ldr	r0, [sp, #96]	; 0x60
   1fc4c:	cmp	r5, #0
   1fc50:	movweq	r5, #48	; 0x30
   1fc54:	sub	r8, r0, lr
   1fc58:	cmp	r4, r8
   1fc5c:	bcs	20dac <__assert_fail@plt+0xf7f0>
   1fc60:	ldr	r6, [sp, #92]	; 0x5c
   1fc64:	mov	ip, #0
   1fc68:	cmp	r6, #0
   1fc6c:	beq	20964 <__assert_fail@plt+0xf3a8>
   1fc70:	ldr	r0, [sp, #100]	; 0x64
   1fc74:	tst	r0, #1
   1fc78:	beq	20948 <__assert_fail@plt+0xf38c>
   1fc7c:	cmp	r4, #0
   1fc80:	beq	20960 <__assert_fail@plt+0xf3a4>
   1fc84:	str	lr, [sp, #84]	; 0x54
   1fc88:	bl	11430 <__ctype_toupper_loc@plt>
   1fc8c:	ldr	lr, [sp, #84]	; 0x54
   1fc90:	sub	r3, fp, #48	; 0x30
   1fc94:	ldrb	r1, [r3, r7]
   1fc98:	ldr	r2, [r0]
   1fc9c:	ldr	r1, [r2, r1, lsl #2]
   1fca0:	strb	r1, [r6, r7]
   1fca4:	sub	r7, r7, #1
   1fca8:	cmn	r7, #1
   1fcac:	bne	1fc94 <__assert_fail@plt+0xe6d8>
   1fcb0:	b	20960 <__assert_fail@plt+0xf3a4>
   1fcb4:	mov	r6, #1
   1fcb8:	ldr	r2, [sp, #100]	; 0x64
   1fcbc:	eor	r1, r7, #1
   1fcc0:	orr	r6, r7, r6
   1fcc4:	and	r2, r2, r1
   1fcc8:	mov	r1, #112	; 0x70
   1fccc:	str	r2, [sp, #100]	; 0x64
   1fcd0:	b	20b44 <__assert_fail@plt+0xf588>
   1fcd4:	cmp	r0, #69	; 0x45
   1fcd8:	beq	20284 <__assert_fail@plt+0xecc8>
   1fcdc:	ldr	r2, [sp, #80]	; 0x50
   1fce0:	ldr	r3, [r2]
   1fce4:	b	1ff68 <__assert_fail@plt+0xe9ac>
   1fce8:	movw	r4, #13520	; 0x34d0
   1fcec:	movt	r4, #2
   1fcf0:	ldr	r0, [sp, #100]	; 0x64
   1fcf4:	mvn	r1, #0
   1fcf8:	mov	r2, r4
   1fcfc:	and	r0, r0, #1
   1fd00:	str	r0, [sp, #100]	; 0x64
   1fd04:	stm	sp, {r0, r5, r8}
   1fd08:	ldr	r0, [fp, #20]
   1fd0c:	str	lr, [sp, #84]	; 0x54
   1fd10:	ldr	r3, [sp, #80]	; 0x50
   1fd14:	str	r0, [sp, #12]
   1fd18:	ldr	r0, [fp, #24]
   1fd1c:	str	r0, [sp, #16]
   1fd20:	mov	r0, #0
   1fd24:	bl	1f374 <__assert_fail@plt+0xddb8>
   1fd28:	mov	r7, r0
   1fd2c:	subs	r0, r5, #45	; 0x2d
   1fd30:	ldr	lr, [sp, #84]	; 0x54
   1fd34:	ldr	r1, [sp, #96]	; 0x60
   1fd38:	movne	r0, r9
   1fd3c:	cmp	r9, #0
   1fd40:	mov	r6, r7
   1fd44:	movwlt	r0, #0
   1fd48:	cmp	r0, r7
   1fd4c:	movhi	r6, r0
   1fd50:	sub	r9, r1, lr
   1fd54:	cmp	r6, r9
   1fd58:	bcs	20dac <__assert_fail@plt+0xf7f0>
   1fd5c:	ldr	ip, [sp, #92]	; 0x5c
   1fd60:	cmp	ip, #0
   1fd64:	beq	1fd90 <__assert_fail@plt+0xe7d4>
   1fd68:	cmp	r0, r7
   1fd6c:	bls	203d4 <__assert_fail@plt+0xee18>
   1fd70:	cmp	r5, #48	; 0x30
   1fd74:	sub	r2, r0, r7
   1fd78:	cmpne	r5, #43	; 0x2b
   1fd7c:	str	r2, [sp, #88]	; 0x58
   1fd80:	bne	207f0 <__assert_fail@plt+0xf234>
   1fd84:	mov	r0, ip
   1fd88:	mov	r1, #48	; 0x30
   1fd8c:	b	207f8 <__assert_fail@plt+0xf23c>
   1fd90:	mov	ip, #0
   1fd94:	b	20848 <__assert_fail@plt+0xf28c>
   1fd98:	cmp	r0, #69	; 0x45
   1fd9c:	beq	20284 <__assert_fail@plt+0xecc8>
   1fda0:	ldr	r3, [sp, #80]	; 0x50
   1fda4:	ldr	r2, [r3, #24]
   1fda8:	ldr	r3, [r3, #28]
   1fdac:	add	r3, r3, #7
   1fdb0:	sub	r2, r3, r2
   1fdb4:	movw	r3, #9363	; 0x2493
   1fdb8:	movt	r3, #37449	; 0x9249
   1fdbc:	smmla	r2, r2, r3, r2
   1fdc0:	b	1fe04 <__assert_fail@plt+0xe848>
   1fdc4:	cmp	r0, #69	; 0x45
   1fdc8:	beq	20284 <__assert_fail@plt+0xecc8>
   1fdcc:	ldr	r3, [sp, #80]	; 0x50
   1fdd0:	movw	r7, #9363	; 0x2493
   1fdd4:	movt	r7, #37449	; 0x9249
   1fdd8:	ldr	r2, [r3, #24]
   1fddc:	ldr	r3, [r3, #28]
   1fde0:	add	r2, r2, #6
   1fde4:	smmla	r6, r2, r7, r2
   1fde8:	asr	r4, r6, #2
   1fdec:	add	r6, r4, r6, lsr #31
   1fdf0:	rsb	r6, r6, r6, lsl #3
   1fdf4:	sub	r2, r6, r2
   1fdf8:	add	r2, r3, r2
   1fdfc:	add	r2, r2, #7
   1fe00:	smmla	r2, r2, r7, r2
   1fe04:	asr	r3, r2, #2
   1fe08:	add	r3, r3, r2, lsr #31
   1fe0c:	b	1ff68 <__assert_fail@plt+0xe9ac>
   1fe10:	cmp	r0, #79	; 0x4f
   1fe14:	beq	20284 <__assert_fail@plt+0xecc8>
   1fe18:	mov	r6, #0
   1fe1c:	mov	r1, #88	; 0x58
   1fe20:	b	20b44 <__assert_fail@plt+0xf588>
   1fe24:	cmp	r0, #69	; 0x45
   1fe28:	beq	207e4 <__assert_fail@plt+0xf228>
   1fe2c:	cmp	r0, #79	; 0x4f
   1fe30:	beq	20284 <__assert_fail@plt+0xecc8>
   1fe34:	ldr	r2, [sp, #80]	; 0x50
   1fe38:	movw	r7, #63636	; 0xf894
   1fe3c:	mov	ip, #4
   1fe40:	movt	r7, #65535	; 0xffff
   1fe44:	ldr	r3, [r2, #20]
   1fe48:	mov	r2, #0
   1fe4c:	cmp	r3, r7
   1fe50:	movw	r7, #1900	; 0x76c
   1fe54:	movwlt	r2, #1
   1fe58:	add	r3, r3, r7
   1fe5c:	b	208ac <__assert_fail@plt+0xf2f0>
   1fe60:	ldr	r0, [sp, #44]	; 0x2c
   1fe64:	ldr	r8, [sp, #100]	; 0x64
   1fe68:	subs	r6, r5, #45	; 0x2d
   1fe6c:	str	lr, [sp, #84]	; 0x54
   1fe70:	bicne	r6, r9, r9, asr #31
   1fe74:	bl	1146c <strlen@plt>
   1fe78:	ldr	lr, [sp, #84]	; 0x54
   1fe7c:	mov	r9, r0
   1fe80:	cmp	r6, r0
   1fe84:	mov	r4, r0
   1fe88:	ldr	r0, [sp, #96]	; 0x60
   1fe8c:	movhi	r4, r6
   1fe90:	sub	r0, r0, lr
   1fe94:	cmp	r4, r0
   1fe98:	bcs	20dac <__assert_fail@plt+0xf7f0>
   1fe9c:	ldr	r0, [sp, #92]	; 0x5c
   1fea0:	cmp	r0, #0
   1fea4:	beq	206dc <__assert_fail@plt+0xf120>
   1fea8:	cmp	r6, r9
   1feac:	mov	ip, r0
   1feb0:	bls	209c8 <__assert_fail@plt+0xf40c>
   1feb4:	uxtb	r1, r5
   1feb8:	sub	r2, r6, r9
   1febc:	cmp	r1, #48	; 0x30
   1fec0:	cmpne	r1, #43	; 0x2b
   1fec4:	bne	209b0 <__assert_fail@plt+0xf3f4>
   1fec8:	mov	r1, #48	; 0x30
   1fecc:	b	209b4 <__assert_fail@plt+0xf3f8>
   1fed0:	cmp	r0, #0
   1fed4:	bne	20284 <__assert_fail@plt+0xecc8>
   1fed8:	ldr	r1, [sp, #100]	; 0x64
   1fedc:	mov	r6, #0
   1fee0:	orr	r1, r7, r1
   1fee4:	str	r1, [sp, #100]	; 0x64
   1fee8:	mov	r1, #97	; 0x61
   1feec:	b	20b44 <__assert_fail@plt+0xf588>
   1fef0:	cmp	r0, #79	; 0x4f
   1fef4:	beq	20284 <__assert_fail@plt+0xecc8>
   1fef8:	mov	r6, #0
   1fefc:	mov	r1, #99	; 0x63
   1ff00:	b	20b44 <__assert_fail@plt+0xf588>
   1ff04:	cmp	r0, #69	; 0x45
   1ff08:	beq	20284 <__assert_fail@plt+0xecc8>
   1ff0c:	ldr	r2, [sp, #48]	; 0x30
   1ff10:	ldr	r3, [r2]
   1ff14:	b	1ff68 <__assert_fail@plt+0xe9ac>
   1ff18:	ldr	r2, [sp, #48]	; 0x30
   1ff1c:	cmp	r0, #69	; 0x45
   1ff20:	bne	1ff4c <__assert_fail@plt+0xe990>
   1ff24:	b	20284 <__assert_fail@plt+0xecc8>
   1ff28:	cmp	r0, #69	; 0x45
   1ff2c:	beq	20284 <__assert_fail@plt+0xecc8>
   1ff30:	ldr	r2, [sp, #80]	; 0x50
   1ff34:	mov	ip, #3
   1ff38:	ldr	r3, [r2, #28]
   1ff3c:	b	2009c <__assert_fail@plt+0xeae0>
   1ff40:	ldr	r2, [sp, #56]	; 0x38
   1ff44:	cmp	r0, #69	; 0x45
   1ff48:	beq	20284 <__assert_fail@plt+0xecc8>
   1ff4c:	ldr	r3, [r2]
   1ff50:	b	1ff60 <__assert_fail@plt+0xe9a4>
   1ff54:	ldr	r3, [sp, #52]	; 0x34
   1ff58:	cmp	r0, #69	; 0x45
   1ff5c:	beq	20284 <__assert_fail@plt+0xecc8>
   1ff60:	cmp	r5, #0
   1ff64:	movweq	r5, #95	; 0x5f
   1ff68:	mov	ip, #2
   1ff6c:	lsr	r2, r3, #31
   1ff70:	cmp	r2, #0
   1ff74:	mov	r7, #0
   1ff78:	mov	r4, #0
   1ff7c:	movwne	r2, #1
   1ff80:	cmp	r0, #79	; 0x4f
   1ff84:	moveq	r6, #0
   1ff88:	cmpeq	r2, #0
   1ff8c:	beq	20b44 <__assert_fail@plt+0xf588>
   1ff90:	ldr	r8, [sp, #72]	; 0x48
   1ff94:	cmp	r2, #0
   1ff98:	rsbne	r3, r3, #0
   1ff9c:	tst	r7, #1
   1ffa0:	asr	r7, r7, #1
   1ffa4:	movne	r0, #58	; 0x3a
   1ffa8:	strbne	r0, [r8, #-1]!
   1ffac:	movw	r0, #52429	; 0xcccd
   1ffb0:	cmp	r3, #9
   1ffb4:	movt	r0, #52428	; 0xcccc
   1ffb8:	umull	r0, r1, r3, r0
   1ffbc:	lsr	r0, r1, #3
   1ffc0:	add	r1, r0, r0, lsl #2
   1ffc4:	sub	r1, r3, r1, lsl #1
   1ffc8:	mov	r3, r0
   1ffcc:	orr	r1, r1, #48	; 0x30
   1ffd0:	strb	r1, [r8, #-1]!
   1ffd4:	bhi	1ff9c <__assert_fail@plt+0xe9e0>
   1ffd8:	cmp	r7, #0
   1ffdc:	mov	r3, r0
   1ffe0:	bne	1ff9c <__assert_fail@plt+0xe9e0>
   1ffe4:	cmp	r9, #0
   1ffe8:	ldr	r7, [sp, #92]	; 0x5c
   1ffec:	str	sl, [sp, #88]	; 0x58
   1fff0:	movlt	r9, ip
   1fff4:	ldr	ip, [sp, #100]	; 0x64
   1fff8:	cmp	r4, #0
   1fffc:	movwne	r4, #43	; 0x2b
   20000:	cmp	r5, #0
   20004:	movweq	r5, #48	; 0x30
   20008:	ldr	r1, [sp, #72]	; 0x48
   2000c:	cmp	r2, #0
   20010:	mov	r0, r9
   20014:	movwne	r4, #45	; 0x2d
   20018:	cmp	r4, #0
   2001c:	subne	r0, r0, #1
   20020:	sub	r3, r1, r8
   20024:	sub	r6, r0, r3
   20028:	cmp	r6, #1
   2002c:	movwlt	r6, #0
   20030:	subs	sl, r5, #45	; 0x2d
   20034:	moveq	r6, sl
   20038:	cmp	r4, #0
   2003c:	beq	20080 <__assert_fail@plt+0xeac4>
   20040:	cmp	r5, #95	; 0x5f
   20044:	bne	203ec <__assert_fail@plt+0xee30>
   20048:	cmp	r7, #0
   2004c:	beq	203e0 <__assert_fail@plt+0xee24>
   20050:	mov	r0, r7
   20054:	mov	r1, #32
   20058:	mov	r2, r6
   2005c:	str	lr, [sp, #84]	; 0x54
   20060:	str	ip, [sp, #100]	; 0x64
   20064:	str	r3, [sp, #32]
   20068:	bl	114b4 <memset@plt>
   2006c:	ldr	r3, [sp, #32]
   20070:	ldr	ip, [sp, #100]	; 0x64
   20074:	ldr	lr, [sp, #84]	; 0x54
   20078:	add	r7, r7, r6
   2007c:	b	203e4 <__assert_fail@plt+0xee28>
   20080:	mov	r6, #-2147483648	; 0x80000000
   20084:	b	20414 <__assert_fail@plt+0xee58>
   20088:	cmp	r0, #69	; 0x45
   2008c:	beq	20284 <__assert_fail@plt+0xecc8>
   20090:	ldr	r2, [sp, #80]	; 0x50
   20094:	mov	ip, #2
   20098:	ldr	r3, [r2, #16]
   2009c:	mov	r2, #0
   200a0:	cmn	r3, #1
   200a4:	add	r3, r3, #1
   200a8:	movwlt	r2, #1
   200ac:	b	1ff70 <__assert_fail@plt+0xe9b4>
   200b0:	ldr	r1, [sp, #96]	; 0x60
   200b4:	subs	r0, r5, #45	; 0x2d
   200b8:	bicne	r0, r9, r9, asr #31
   200bc:	cmp	r0, #1
   200c0:	mov	r6, r0
   200c4:	movls	r6, #1
   200c8:	sub	r1, r1, lr
   200cc:	cmp	r6, r1
   200d0:	bcs	20dac <__assert_fail@plt+0xf7f0>
   200d4:	ldr	ip, [sp, #92]	; 0x5c
   200d8:	movw	r4, #52428	; 0xcccc
   200dc:	movt	r4, #3276	; 0xccc
   200e0:	cmp	ip, #0
   200e4:	beq	2047c <__assert_fail@plt+0xeec0>
   200e8:	cmp	r0, #2
   200ec:	bcc	20ad0 <__assert_fail@plt+0xf514>
   200f0:	uxtb	r1, r5
   200f4:	sub	r4, r0, #1
   200f8:	cmp	r1, #48	; 0x30
   200fc:	cmpne	r1, #43	; 0x2b
   20100:	bne	20aa4 <__assert_fail@plt+0xf4e8>
   20104:	mov	r0, ip
   20108:	mov	r1, #48	; 0x30
   2010c:	b	20aac <__assert_fail@plt+0xf4f0>
   20110:	ldr	r2, [sp, #80]	; 0x50
   20114:	mov	r3, #11
   20118:	mov	ip, #1
   2011c:	ldr	r2, [r2, #16]
   20120:	mul	r2, r2, r3
   20124:	add	r3, ip, r2, asr #5
   20128:	mov	r2, #0
   2012c:	b	1ff70 <__assert_fail@plt+0xe9b4>
   20130:	ldr	r2, [sp, #80]	; 0x50
   20134:	mov	r0, #28
   20138:	add	r1, sp, #104	; 0x68
   2013c:	mov	r6, lr
   20140:	mov	r4, r1
   20144:	mov	r3, r2
   20148:	add	r2, r2, #16
   2014c:	vld1.32	{d16-d17}, [r3], r0
   20150:	vld1.32	{d18-d19}, [r2]
   20154:	add	r2, r1, #16
   20158:	vld1.32	{d20-d21}, [r3]
   2015c:	vst1.64	{d16-d17}, [r4], r0
   20160:	mvn	r0, #0
   20164:	vst1.64	{d18-d19}, [r2]
   20168:	vst1.32	{d20-d21}, [r4]
   2016c:	str	r0, [r4]
   20170:	ldr	r0, [fp, #20]
   20174:	bl	1df64 <__assert_fail@plt+0xc9a8>
   20178:	ldr	r1, [r4]
   2017c:	cmp	r1, #0
   20180:	blt	20dc8 <__assert_fail@plt+0xf80c>
   20184:	cmp	r0, #0
   20188:	blt	206e4 <__assert_fail@plt+0xf128>
   2018c:	ldr	r4, [sp, #100]	; 0x64
   20190:	ldr	r1, [sp, #28]
   20194:	mov	r2, r0
   20198:	movw	r3, #26215	; 0x6667
   2019c:	movt	r3, #26214	; 0x6666
   201a0:	smmul	r3, r2, r3
   201a4:	asr	r7, r3, #2
   201a8:	add	r3, r7, r3, lsr #31
   201ac:	add	r7, r3, r3, lsl #2
   201b0:	sub	r7, r2, r7, lsl #1
   201b4:	add	r2, r2, #9
   201b8:	add	r7, r7, #48	; 0x30
   201bc:	cmp	r2, #18
   201c0:	mov	r2, r3
   201c4:	strb	r7, [r1], #-1
   201c8:	bhi	20198 <__assert_fail@plt+0xebdc>
   201cc:	b	20724 <__assert_fail@plt+0xf168>
   201d0:	ldr	r1, [sp, #96]	; 0x60
   201d4:	subs	r0, r5, #45	; 0x2d
   201d8:	bicne	r0, r9, r9, asr #31
   201dc:	cmp	r0, #1
   201e0:	mov	r6, r0
   201e4:	movls	r6, #1
   201e8:	sub	r1, r1, lr
   201ec:	cmp	r6, r1
   201f0:	bcs	20dac <__assert_fail@plt+0xf7f0>
   201f4:	ldr	ip, [sp, #92]	; 0x5c
   201f8:	movw	r4, #52428	; 0xcccc
   201fc:	movt	r4, #3276	; 0xccc
   20200:	cmp	ip, #0
   20204:	beq	2047c <__assert_fail@plt+0xeec0>
   20208:	cmp	r0, #2
   2020c:	bcc	20b08 <__assert_fail@plt+0xf54c>
   20210:	uxtb	r1, r5
   20214:	sub	r4, r0, #1
   20218:	cmp	r1, #48	; 0x30
   2021c:	cmpne	r1, #43	; 0x2b
   20220:	bne	20adc <__assert_fail@plt+0xf520>
   20224:	mov	r0, ip
   20228:	mov	r1, #48	; 0x30
   2022c:	b	20ae4 <__assert_fail@plt+0xf528>
   20230:	ldr	r2, [sp, #80]	; 0x50
   20234:	movw	r3, #9363	; 0x2493
   20238:	mov	ip, #1
   2023c:	movt	r3, #37449	; 0x9249
   20240:	ldr	r2, [r2, #24]
   20244:	add	r2, r2, #6
   20248:	smmla	r3, r2, r3, r2
   2024c:	asr	r7, r3, #2
   20250:	add	r3, r7, r3, lsr #31
   20254:	rsb	r3, r3, r3, lsl #3
   20258:	sub	r2, r2, r3
   2025c:	add	r3, r2, #1
   20260:	b	1ff6c <__assert_fail@plt+0xe9b0>
   20264:	cmp	r0, #69	; 0x45
   20268:	beq	20284 <__assert_fail@plt+0xecc8>
   2026c:	ldr	r2, [sp, #80]	; 0x50
   20270:	mov	ip, #1
   20274:	ldr	r3, [r2, #24]
   20278:	b	1ff6c <__assert_fail@plt+0xe9b0>
   2027c:	cmp	r0, #79	; 0x4f
   20280:	bne	20694 <__assert_fail@plt+0xf0d8>
   20284:	ldr	ip, [sp, #92]	; 0x5c
   20288:	mov	r8, sl
   2028c:	ldr	r1, [sp, #88]	; 0x58
   20290:	subs	r7, r5, #45	; 0x2d
   20294:	bicne	r7, r9, r9, asr #31
   20298:	sub	r0, r8, r1
   2029c:	add	r6, r0, #1
   202a0:	ldr	r0, [sp, #96]	; 0x60
   202a4:	cmp	r7, r6
   202a8:	mov	r4, r6
   202ac:	movhi	r4, r7
   202b0:	sub	r0, r0, lr
   202b4:	cmp	r4, r0
   202b8:	bcs	20dac <__assert_fail@plt+0xf7f0>
   202bc:	cmp	ip, #0
   202c0:	beq	202f4 <__assert_fail@plt+0xed38>
   202c4:	cmp	r7, r6
   202c8:	mov	r9, ip
   202cc:	bls	20320 <__assert_fail@plt+0xed64>
   202d0:	uxtb	r0, r5
   202d4:	mov	sl, lr
   202d8:	sub	r9, r7, r6
   202dc:	cmp	r0, #48	; 0x30
   202e0:	cmpne	r0, #43	; 0x2b
   202e4:	bne	202fc <__assert_fail@plt+0xed40>
   202e8:	mov	r0, ip
   202ec:	mov	r1, #48	; 0x30
   202f0:	b	20304 <__assert_fail@plt+0xed48>
   202f4:	mov	ip, #0
   202f8:	b	20398 <__assert_fail@plt+0xeddc>
   202fc:	mov	r0, ip
   20300:	mov	r1, #32
   20304:	mov	r2, r9
   20308:	mov	r5, ip
   2030c:	bl	114b4 <memset@plt>
   20310:	ldr	r1, [sp, #88]	; 0x58
   20314:	add	r9, r5, r9
   20318:	mov	lr, sl
   2031c:	mov	ip, r5
   20320:	ldr	r0, [sp, #100]	; 0x64
   20324:	tst	r0, #1
   20328:	beq	20380 <__assert_fail@plt+0xedc4>
   2032c:	cmp	r6, #0
   20330:	beq	20394 <__assert_fail@plt+0xedd8>
   20334:	add	r0, r8, #1
   20338:	sub	r5, r1, r8
   2033c:	mov	sl, lr
   20340:	sub	r0, r0, r1
   20344:	cmp	r7, r0
   20348:	movhi	r0, r7
   2034c:	add	r0, ip, r0
   20350:	sub	r7, r0, #1
   20354:	bl	11430 <__ctype_toupper_loc@plt>
   20358:	ldr	r3, [sp, #88]	; 0x58
   2035c:	mov	lr, sl
   20360:	ldrb	r1, [r3, -r5]
   20364:	ldr	r2, [r0]
   20368:	add	r5, r5, #1
   2036c:	cmp	r5, #1
   20370:	ldr	r1, [r2, r1, lsl #2]
   20374:	strb	r1, [r7], #-1
   20378:	bne	20360 <__assert_fail@plt+0xeda4>
   2037c:	b	20394 <__assert_fail@plt+0xedd8>
   20380:	mov	r0, r9
   20384:	mov	r2, r6
   20388:	mov	r5, lr
   2038c:	bl	112f8 <memcpy@plt>
   20390:	mov	lr, r5
   20394:	add	ip, r9, r6
   20398:	add	lr, r4, lr
   2039c:	mov	sl, r8
   203a0:	mov	r6, #-2147483648	; 0x80000000
   203a4:	movw	r4, #52428	; 0xcccc
   203a8:	movt	r4, #3276	; 0xccc
   203ac:	ldrb	r3, [sl, #1]!
   203b0:	mvn	r9, #0
   203b4:	cmp	r3, #0
   203b8:	bne	1f458 <__assert_fail@plt+0xde9c>
   203bc:	b	20d80 <__assert_fail@plt+0xf7c4>
   203c0:	cmp	r0, #69	; 0x45
   203c4:	bne	206a0 <__assert_fail@plt+0xf0e4>
   203c8:	mov	r6, #0
   203cc:	mov	r1, #121	; 0x79
   203d0:	b	20b44 <__assert_fail@plt+0xf588>
   203d4:	ldr	r3, [sp, #80]	; 0x50
   203d8:	ldr	r0, [sp, #100]	; 0x64
   203dc:	b	20814 <__assert_fail@plt+0xf258>
   203e0:	mov	r7, #0
   203e4:	sub	r9, r9, r6
   203e8:	add	lr, r6, lr
   203ec:	ldr	r0, [sp, #96]	; 0x60
   203f0:	mov	r6, #-2147483648	; 0x80000000
   203f4:	sub	r0, r0, lr
   203f8:	cmp	r0, #2
   203fc:	bcc	20dac <__assert_fail@plt+0xf7f0>
   20400:	cmp	r7, #0
   20404:	sub	r9, r9, #1
   20408:	add	lr, lr, #1
   2040c:	strbne	r4, [r7], #1
   20410:	moveq	r7, #0
   20414:	ldr	r0, [sp, #96]	; 0x60
   20418:	cmp	r5, #45	; 0x2d
   2041c:	mov	r4, r3
   20420:	bicne	sl, r9, r9, asr #31
   20424:	cmp	sl, r3
   20428:	movhi	r4, sl
   2042c:	sub	r0, r0, lr
   20430:	cmp	r4, r0
   20434:	bcs	20dac <__assert_fail@plt+0xf7f0>
   20438:	cmp	r7, #0
   2043c:	beq	20474 <__assert_fail@plt+0xeeb8>
   20440:	cmp	sl, r3
   20444:	mov	r9, r7
   20448:	bls	204a4 <__assert_fail@plt+0xeee8>
   2044c:	cmp	r5, #48	; 0x30
   20450:	sub	r6, sl, r3
   20454:	str	ip, [sp, #100]	; 0x64
   20458:	str	lr, [sp, #84]	; 0x54
   2045c:	str	r3, [sp, #32]
   20460:	cmpne	r5, #43	; 0x2b
   20464:	bne	20484 <__assert_fail@plt+0xeec8>
   20468:	mov	r0, r7
   2046c:	mov	r1, #48	; 0x30
   20470:	b	2048c <__assert_fail@plt+0xeed0>
   20474:	mov	ip, #0
   20478:	b	20528 <__assert_fail@plt+0xef6c>
   2047c:	mov	ip, #0
   20480:	b	20850 <__assert_fail@plt+0xf294>
   20484:	mov	r0, r7
   20488:	mov	r1, #32
   2048c:	mov	r2, r6
   20490:	bl	114b4 <memset@plt>
   20494:	ldr	lr, [sp, #84]	; 0x54
   20498:	ldr	ip, [sp, #100]	; 0x64
   2049c:	ldr	r3, [sp, #32]
   204a0:	add	r9, r7, r6
   204a4:	tst	ip, #1
   204a8:	beq	20500 <__assert_fail@plt+0xef44>
   204ac:	cmp	r3, #0
   204b0:	beq	20520 <__assert_fail@plt+0xef64>
   204b4:	ldr	r0, [sp, #36]	; 0x24
   204b8:	cmp	sl, r3
   204bc:	sub	r6, r8, #1
   204c0:	movls	sl, r3
   204c4:	add	r5, r0, r8
   204c8:	add	r0, r7, sl
   204cc:	mov	r8, lr
   204d0:	mov	sl, r3
   204d4:	sub	r7, r0, #1
   204d8:	bl	11430 <__ctype_toupper_loc@plt>
   204dc:	mov	r3, sl
   204e0:	mov	lr, r8
   204e4:	ldrb	r1, [r6, -r5]
   204e8:	ldr	r2, [r0]
   204ec:	adds	r5, r5, #1
   204f0:	ldr	r1, [r2, r1, lsl #2]
   204f4:	strb	r1, [r7], #-1
   204f8:	bne	204e4 <__assert_fail@plt+0xef28>
   204fc:	b	20520 <__assert_fail@plt+0xef64>
   20500:	mov	r0, r9
   20504:	mov	r1, r8
   20508:	mov	r2, r3
   2050c:	mov	r5, lr
   20510:	mov	r6, r3
   20514:	bl	112f8 <memcpy@plt>
   20518:	mov	r3, r6
   2051c:	mov	lr, r5
   20520:	add	ip, r9, r3
   20524:	mov	r6, #-2147483648	; 0x80000000
   20528:	ldr	sl, [sp, #88]	; 0x58
   2052c:	add	lr, r4, lr
   20530:	movw	r4, #52428	; 0xcccc
   20534:	movt	r4, #3276	; 0xccc
   20538:	ldrb	r3, [sl, #1]!
   2053c:	mvn	r9, #0
   20540:	cmp	r3, #0
   20544:	bne	1f458 <__assert_fail@plt+0xde9c>
   20548:	b	20d80 <__assert_fail@plt+0xf7c4>
   2054c:	sub	r2, r2, #1
   20550:	movw	r4, #365	; 0x16d
   20554:	tst	r2, #3
   20558:	bne	2059c <__assert_fail@plt+0xefe0>
   2055c:	movw	r4, #34079	; 0x851f
   20560:	movt	r4, #20971	; 0x51eb
   20564:	smmul	r4, r2, r4
   20568:	asr	r7, r4, #5
   2056c:	add	r3, r7, r4, lsr #31
   20570:	mov	r7, #100	; 0x64
   20574:	mls	r3, r3, r7, r2
   20578:	asr	r7, r4, #7
   2057c:	add	r4, r7, r4, lsr #31
   20580:	mov	r7, #400	; 0x190
   20584:	mls	r2, r4, r7, r2
   20588:	movw	r4, #365	; 0x16d
   2058c:	cmp	r2, #0
   20590:	movweq	r4, #366	; 0x16e
   20594:	cmp	r3, #0
   20598:	movwne	r4, #366	; 0x16e
   2059c:	add	r2, r4, r6
   205a0:	movw	r4, #382	; 0x17e
   205a4:	sub	r3, r4, r8
   205a8:	add	r2, r3, r2
   205ac:	smmla	r2, r2, ip, r2
   205b0:	asr	r4, r2, #2
   205b4:	add	r2, r4, r2, lsr #31
   205b8:	rsb	r2, r2, r2, lsl #3
   205bc:	sub	r2, r2, r3
   205c0:	mvn	r3, #0
   205c4:	add	r4, r2, #3
   205c8:	cmp	r1, #71	; 0x47
   205cc:	bne	1f95c <__assert_fail@plt+0xe3a0>
   205d0:	movw	r2, #63636	; 0xf894
   205d4:	mov	ip, #4
   205d8:	movt	r2, #65535	; 0xffff
   205dc:	sub	r7, r2, r3
   205e0:	add	r3, lr, r3
   205e4:	mov	r2, #0
   205e8:	cmp	lr, r7
   205ec:	ldr	lr, [sp, #84]	; 0x54
   205f0:	movw	r7, #1900	; 0x76c
   205f4:	movwlt	r2, #1
   205f8:	add	r3, r3, r7
   205fc:	b	208ac <__assert_fail@plt+0xf2f0>
   20600:	ldr	ip, [sp, #92]	; 0x5c
   20604:	movw	r4, #52428	; 0xcccc
   20608:	mov	r6, #-2147483648	; 0x80000000
   2060c:	movt	r4, #3276	; 0xccc
   20610:	ldrb	r3, [sl, #1]!
   20614:	mvn	r9, #0
   20618:	cmp	r3, #0
   2061c:	bne	1f458 <__assert_fail@plt+0xde9c>
   20620:	b	20d80 <__assert_fail@plt+0xf7c4>
   20624:	smmla	r2, r4, ip, r4
   20628:	ldr	lr, [sp, #84]	; 0x54
   2062c:	mov	ip, #2
   20630:	asr	r3, r2, #2
   20634:	add	r2, r3, r2, lsr #31
   20638:	add	r3, r2, #1
   2063c:	b	1ff6c <__assert_fail@plt+0xe9b0>
   20640:	ldr	r2, [sp, #80]	; 0x50
   20644:	movw	r6, #63636	; 0xf894
   20648:	mov	r3, #0
   2064c:	mvn	r4, #98	; 0x62
   20650:	mov	ip, #2
   20654:	movt	r6, #65535	; 0xffff
   20658:	ldr	r7, [r2, #20]
   2065c:	mov	r2, #0
   20660:	cmp	r7, r6
   20664:	movwge	r3, #1
   20668:	cmp	r7, r6
   2066c:	and	r3, r3, r7, lsr #31
   20670:	movwlt	r2, #1
   20674:	smlabb	r3, r3, r4, r7
   20678:	movw	r4, #34079	; 0x851f
   2067c:	movt	r4, #20971	; 0x51eb
   20680:	smmul	r3, r3, r4
   20684:	asr	r4, r3, #5
   20688:	add	r3, r4, r3, lsr #31
   2068c:	add	r3, r3, #19
   20690:	b	208ac <__assert_fail@plt+0xf2f0>
   20694:	mov	r6, #0
   20698:	mov	r1, #120	; 0x78
   2069c:	b	20b44 <__assert_fail@plt+0xf588>
   206a0:	ldr	r2, [sp, #80]	; 0x50
   206a4:	mov	ip, #2
   206a8:	ldr	r7, [r2, #20]
   206ac:	movw	r2, #34079	; 0x851f
   206b0:	movt	r2, #20971	; 0x51eb
   206b4:	smmul	r2, r7, r2
   206b8:	asr	r3, r2, #5
   206bc:	add	r2, r3, r2, lsr #31
   206c0:	mov	r3, #100	; 0x64
   206c4:	mls	r6, r2, r3, r7
   206c8:	mov	r2, #0
   206cc:	cmn	r6, #1
   206d0:	ble	20898 <__assert_fail@plt+0xf2dc>
   206d4:	mov	r3, r6
   206d8:	b	208ac <__assert_fail@plt+0xf2f0>
   206dc:	mov	ip, #0
   206e0:	b	20a98 <__assert_fail@plt+0xf4dc>
   206e4:	ldr	r4, [sp, #100]	; 0x64
   206e8:	ldr	r1, [sp, #28]
   206ec:	mov	r2, r0
   206f0:	movw	r3, #26215	; 0x6667
   206f4:	movt	r3, #26214	; 0x6666
   206f8:	smmul	r3, r2, r3
   206fc:	asr	r7, r3, #2
   20700:	add	r3, r7, r3, lsr #31
   20704:	add	r7, r3, r3, lsl #2
   20708:	rsb	r7, r2, r7, lsl #1
   2070c:	add	r2, r2, #9
   20710:	add	r7, r7, #48	; 0x30
   20714:	cmp	r2, #18
   20718:	mov	r2, r3
   2071c:	strb	r7, [r1], #-1
   20720:	bhi	206f0 <__assert_fail@plt+0xf134>
   20724:	ldr	r7, [sp, #92]	; 0x5c
   20728:	cmp	r9, #0
   2072c:	mov	ip, r4
   20730:	add	r8, r1, #1
   20734:	mov	lr, r6
   20738:	lsr	r2, r0, #31
   2073c:	mov	r4, #0
   20740:	str	sl, [sp, #88]	; 0x58
   20744:	movwlt	r9, #1
   20748:	b	20000 <__assert_fail@plt+0xea44>
   2074c:	ldr	ip, [sp, #92]	; 0x5c
   20750:	mov	r2, #1
   20754:	cmp	r6, #3
   20758:	bhi	1fab8 <__assert_fail@plt+0xe4fc>
   2075c:	movw	ip, #34953	; 0x8889
   20760:	movt	ip, #34952	; 0x8888
   20764:	smmla	r4, lr, ip, lr
   20768:	asr	r3, r4, #5
   2076c:	add	r4, r3, r4, lsr #31
   20770:	smmla	r3, r4, ip, r4
   20774:	asr	r7, r3, #5
   20778:	add	r3, r7, r3, lsr #31
   2077c:	rsb	r3, r3, r3, lsl #4
   20780:	sub	ip, r4, r3, lsl #2
   20784:	movw	r3, #46021	; 0xb3c5
   20788:	rsb	r4, r4, r4, lsl #4
   2078c:	movt	r3, #37282	; 0x91a2
   20790:	smmla	r3, lr, r3, lr
   20794:	asr	r7, r3, #11
   20798:	add	r3, r7, r3, lsr #31
   2079c:	sub	r7, lr, r4, lsl #2
   207a0:	add	r4, pc, #0
   207a4:	ldr	pc, [r4, r6, lsl #2]
   207a8:			; <UNDEFINED> instruction: 0x000207b8
   207ac:	andeq	r0, r2, ip, lsl fp
   207b0:	andeq	r0, r2, r4, lsl r9
   207b4:	andeq	r0, r2, ip, lsl #18
   207b8:	mov	r7, #100	; 0x64
   207bc:	mla	r3, r3, r7, ip
   207c0:	mov	ip, #5
   207c4:	ldr	lr, [sp, #84]	; 0x54
   207c8:	mov	r4, #1
   207cc:	mov	r7, #0
   207d0:	cmp	r0, #79	; 0x4f
   207d4:	moveq	r6, #0
   207d8:	cmpeq	r2, #0
   207dc:	bne	1ff90 <__assert_fail@plt+0xe9d4>
   207e0:	b	20b44 <__assert_fail@plt+0xf588>
   207e4:	mov	r6, #0
   207e8:	mov	r1, #89	; 0x59
   207ec:	b	20b44 <__assert_fail@plt+0xf588>
   207f0:	mov	r0, ip
   207f4:	mov	r1, #32
   207f8:	ldr	r2, [sp, #88]	; 0x58
   207fc:	bl	114b4 <memset@plt>
   20800:	ldr	r1, [sp, #88]	; 0x58
   20804:	ldr	ip, [sp, #92]	; 0x5c
   20808:	ldr	r3, [sp, #80]	; 0x50
   2080c:	ldr	r0, [sp, #100]	; 0x64
   20810:	add	ip, ip, r1
   20814:	stm	sp, {r0, r5, r8}
   20818:	ldr	r0, [fp, #20]
   2081c:	mov	r2, r4
   20820:	mov	r1, r9
   20824:	mov	r4, ip
   20828:	str	r0, [sp, #12]
   2082c:	ldr	r0, [fp, #24]
   20830:	str	r0, [sp, #16]
   20834:	mov	r0, ip
   20838:	bl	1f374 <__assert_fail@plt+0xddb8>
   2083c:	ldr	lr, [sp, #84]	; 0x54
   20840:	mov	ip, r4
   20844:	add	ip, r4, r7
   20848:	movw	r4, #52428	; 0xcccc
   2084c:	movt	r4, #3276	; 0xccc
   20850:	add	lr, r6, lr
   20854:	mov	r6, #-2147483648	; 0x80000000
   20858:	ldrb	r3, [sl, #1]!
   2085c:	mvn	r9, #0
   20860:	cmp	r3, #0
   20864:	bne	1f458 <__assert_fail@plt+0xde9c>
   20868:	b	20d80 <__assert_fail@plt+0xf7c4>
   2086c:	movw	r6, #63636	; 0xf894
   20870:	movt	r6, #65535	; 0xffff
   20874:	sub	r6, r6, r3
   20878:	add	r3, r4, #100	; 0x64
   2087c:	cmp	lr, r6
   20880:	ldr	lr, [sp, #84]	; 0x54
   20884:	rsblt	r3, r4, #0
   20888:	b	208ac <__assert_fail@plt+0xf2f0>
   2088c:	sub	r0, r9, #6
   20890:	bic	r8, r0, r0, asr #31
   20894:	b	1fcf0 <__assert_fail@plt+0xe734>
   20898:	movw	r4, #63636	; 0xf894
   2089c:	add	r3, r6, #100	; 0x64
   208a0:	movt	r4, #65535	; 0xffff
   208a4:	cmp	r7, r4
   208a8:	rsblt	r3, r6, #0
   208ac:	ldr	r4, [fp, #12]
   208b0:	cmp	r5, #0
   208b4:	mov	r7, #0
   208b8:	moveq	r5, r4
   208bc:	mov	r4, #0
   208c0:	cmp	r5, #43	; 0x2b
   208c4:	bne	1ff80 <__assert_fail@plt+0xe9c4>
   208c8:	cmp	ip, r9
   208cc:	mov	r4, #0
   208d0:	movw	r6, #9999	; 0x270f
   208d4:	mov	r8, lr
   208d8:	mov	lr, #0
   208dc:	movwlt	r4, #1
   208e0:	cmp	ip, #2
   208e4:	movweq	r6, #99	; 0x63
   208e8:	cmp	r6, r3
   208ec:	movwcc	lr, #1
   208f0:	orr	r4, r4, lr
   208f4:	mov	lr, r8
   208f8:	cmp	r0, #79	; 0x4f
   208fc:	moveq	r6, #0
   20900:	cmpeq	r2, #0
   20904:	bne	1ff90 <__assert_fail@plt+0xe9d4>
   20908:	b	20b44 <__assert_fail@plt+0xf588>
   2090c:	cmp	r7, #0
   20910:	beq	20b14 <__assert_fail@plt+0xf558>
   20914:	ldr	lr, [sp, #84]	; 0x54
   20918:	movw	r6, #10000	; 0x2710
   2091c:	mov	r4, #1
   20920:	mla	r3, r3, r6, r7
   20924:	mov	r7, #100	; 0x64
   20928:	mla	r3, ip, r7, r3
   2092c:	mov	ip, #9
   20930:	mov	r7, #20
   20934:	cmp	r0, #79	; 0x4f
   20938:	moveq	r6, #0
   2093c:	cmpeq	r2, #0
   20940:	bne	1ff90 <__assert_fail@plt+0xe9d4>
   20944:	b	20b44 <__assert_fail@plt+0xf588>
   20948:	sub	r1, fp, #48	; 0x30
   2094c:	mov	r0, r6
   20950:	mov	r2, r4
   20954:	mov	r7, lr
   20958:	bl	112f8 <memcpy@plt>
   2095c:	mov	lr, r7
   20960:	add	ip, r6, r4
   20964:	cmp	r5, #45	; 0x2d
   20968:	mov	r7, #0
   2096c:	mov	r6, #-2147483648	; 0x80000000
   20970:	subne	r0, r9, r4
   20974:	bicne	r7, r0, r0, asr #31
   20978:	sub	r0, r8, r4
   2097c:	cmp	r7, r0
   20980:	bcs	20dac <__assert_fail@plt+0xf7f0>
   20984:	cmp	ip, #0
   20988:	cmpne	r7, #0
   2098c:	beq	20d34 <__assert_fail@plt+0xf778>
   20990:	uxtb	r0, r5
   20994:	cmp	r0, #48	; 0x30
   20998:	cmpne	r0, #43	; 0x2b
   2099c:	bne	20d10 <__assert_fail@plt+0xf754>
   209a0:	mov	r0, ip
   209a4:	mov	r9, ip
   209a8:	mov	r1, #48	; 0x30
   209ac:	b	20d1c <__assert_fail@plt+0xf760>
   209b0:	mov	r1, #32
   209b4:	mov	r5, r2
   209b8:	bl	114b4 <memset@plt>
   209bc:	ldr	r0, [sp, #92]	; 0x5c
   209c0:	ldr	lr, [sp, #84]	; 0x54
   209c4:	add	ip, r0, r5
   209c8:	tst	r7, #1
   209cc:	beq	20a1c <__assert_fail@plt+0xf460>
   209d0:	ldr	r8, [sp, #24]
   209d4:	cmp	r9, #0
   209d8:	beq	20a94 <__assert_fail@plt+0xf4d8>
   209dc:	cmp	r6, r9
   209e0:	movls	r6, r9
   209e4:	add	r0, r0, r6
   209e8:	mov	r6, ip
   209ec:	sub	r5, r0, #1
   209f0:	bl	11424 <__ctype_tolower_loc@plt>
   209f4:	ldr	lr, [sp, #84]	; 0x54
   209f8:	mov	ip, r6
   209fc:	mov	r1, r9
   20a00:	ldrb	r2, [r8, r1]
   20a04:	ldr	r3, [r0]
   20a08:	subs	r1, r1, #1
   20a0c:	ldr	r2, [r3, r2, lsl #2]
   20a10:	strb	r2, [r5], #-1
   20a14:	bne	20a00 <__assert_fail@plt+0xf444>
   20a18:	b	20a94 <__assert_fail@plt+0xf4d8>
   20a1c:	eor	r1, r7, #1
   20a20:	and	r1, r8, r1
   20a24:	tst	r1, #1
   20a28:	beq	20a78 <__assert_fail@plt+0xf4bc>
   20a2c:	ldr	r8, [sp, #24]
   20a30:	cmp	r9, #0
   20a34:	beq	20a94 <__assert_fail@plt+0xf4d8>
   20a38:	cmp	r6, r9
   20a3c:	movls	r6, r9
   20a40:	add	r0, r0, r6
   20a44:	mov	r6, ip
   20a48:	sub	r5, r0, #1
   20a4c:	bl	11430 <__ctype_toupper_loc@plt>
   20a50:	ldr	lr, [sp, #84]	; 0x54
   20a54:	mov	ip, r6
   20a58:	mov	r1, r9
   20a5c:	ldrb	r2, [r8, r1]
   20a60:	ldr	r3, [r0]
   20a64:	subs	r1, r1, #1
   20a68:	ldr	r2, [r3, r2, lsl #2]
   20a6c:	strb	r2, [r5], #-1
   20a70:	bne	20a5c <__assert_fail@plt+0xf4a0>
   20a74:	b	20a94 <__assert_fail@plt+0xf4d8>
   20a78:	ldr	r1, [sp, #44]	; 0x2c
   20a7c:	mov	r0, ip
   20a80:	mov	r2, r9
   20a84:	mov	r5, ip
   20a88:	bl	112f8 <memcpy@plt>
   20a8c:	ldr	lr, [sp, #84]	; 0x54
   20a90:	mov	ip, r5
   20a94:	add	ip, ip, r9
   20a98:	mov	r6, #-2147483648	; 0x80000000
   20a9c:	add	lr, r4, lr
   20aa0:	b	203a4 <__assert_fail@plt+0xede8>
   20aa4:	mov	r0, ip
   20aa8:	mov	r1, #32
   20aac:	mov	r2, r4
   20ab0:	mov	r5, lr
   20ab4:	mov	r7, ip
   20ab8:	bl	114b4 <memset@plt>
   20abc:	mov	ip, r7
   20ac0:	mov	lr, r5
   20ac4:	add	ip, r7, r4
   20ac8:	movw	r4, #52428	; 0xcccc
   20acc:	movt	r4, #3276	; 0xccc
   20ad0:	mov	r0, #10
   20ad4:	strb	r0, [ip], #1
   20ad8:	b	20850 <__assert_fail@plt+0xf294>
   20adc:	mov	r0, ip
   20ae0:	mov	r1, #32
   20ae4:	mov	r2, r4
   20ae8:	mov	r5, lr
   20aec:	mov	r7, ip
   20af0:	bl	114b4 <memset@plt>
   20af4:	mov	ip, r7
   20af8:	mov	lr, r5
   20afc:	add	ip, r7, r4
   20b00:	movw	r4, #52428	; 0xcccc
   20b04:	movt	r4, #3276	; 0xccc
   20b08:	mov	r0, #9
   20b0c:	strb	r0, [ip], #1
   20b10:	b	20850 <__assert_fail@plt+0xf294>
   20b14:	cmp	ip, #0
   20b18:	beq	20d70 <__assert_fail@plt+0xf7b4>
   20b1c:	ldr	lr, [sp, #84]	; 0x54
   20b20:	mov	r7, #100	; 0x64
   20b24:	mov	r4, #1
   20b28:	mla	r3, r3, r7, ip
   20b2c:	mov	ip, #6
   20b30:	mov	r7, #4
   20b34:	cmp	r0, #79	; 0x4f
   20b38:	moveq	r6, #0
   20b3c:	cmpeq	r2, #0
   20b40:	bne	1ff90 <__assert_fail@plt+0xe9d4>
   20b44:	movw	r2, #9504	; 0x2520
   20b48:	cmp	r0, #0
   20b4c:	ldr	r3, [sp, #80]	; 0x50
   20b50:	str	lr, [sp, #84]	; 0x54
   20b54:	strh	r2, [fp, #-53]	; 0xffffffcb
   20b58:	ldr	r2, [sp, #76]	; 0x4c
   20b5c:	strbne	r0, [fp, #-51]	; 0xffffffcd
   20b60:	mov	r0, #0
   20b64:	ldrne	r2, [sp, #60]	; 0x3c
   20b68:	strb	r0, [r2, #1]
   20b6c:	strb	r1, [r2]
   20b70:	add	r0, sp, #104	; 0x68
   20b74:	sub	r2, fp, #53	; 0x35
   20b78:	mov	r1, #1024	; 0x400
   20b7c:	bl	113f4 <strftime@plt>
   20b80:	cmp	r0, #0
   20b84:	beq	20bec <__assert_fail@plt+0xf630>
   20b88:	subs	r8, r5, #45	; 0x2d
   20b8c:	sub	r4, r0, #1
   20b90:	ldr	lr, [sp, #84]	; 0x54
   20b94:	ldr	r0, [sp, #96]	; 0x60
   20b98:	movne	r8, r9
   20b9c:	cmp	r9, #0
   20ba0:	mov	r7, r4
   20ba4:	movwlt	r8, #0
   20ba8:	cmp	r8, r4
   20bac:	movhi	r7, r8
   20bb0:	sub	r0, r0, lr
   20bb4:	cmp	r7, r0
   20bb8:	bcs	20dac <__assert_fail@plt+0xf7f0>
   20bbc:	ldr	r0, [sp, #92]	; 0x5c
   20bc0:	cmp	r0, #0
   20bc4:	beq	20c14 <__assert_fail@plt+0xf658>
   20bc8:	cmp	r8, r4
   20bcc:	mov	r9, r0
   20bd0:	bls	20c38 <__assert_fail@plt+0xf67c>
   20bd4:	cmp	r5, #48	; 0x30
   20bd8:	sub	r9, r8, r4
   20bdc:	cmpne	r5, #43	; 0x2b
   20be0:	bne	20c1c <__assert_fail@plt+0xf660>
   20be4:	mov	r1, #48	; 0x30
   20be8:	b	20c20 <__assert_fail@plt+0xf664>
   20bec:	ldr	lr, [sp, #84]	; 0x54
   20bf0:	ldr	ip, [sp, #92]	; 0x5c
   20bf4:	movw	r4, #52428	; 0xcccc
   20bf8:	mov	r6, #-2147483648	; 0x80000000
   20bfc:	movt	r4, #3276	; 0xccc
   20c00:	ldrb	r3, [sl, #1]!
   20c04:	mvn	r9, #0
   20c08:	cmp	r3, #0
   20c0c:	bne	1f458 <__assert_fail@plt+0xde9c>
   20c10:	b	20d80 <__assert_fail@plt+0xf7c4>
   20c14:	mov	ip, #0
   20c18:	b	20cec <__assert_fail@plt+0xf730>
   20c1c:	mov	r1, #32
   20c20:	mov	r2, r9
   20c24:	mov	r5, r0
   20c28:	bl	114b4 <memset@plt>
   20c2c:	ldr	lr, [sp, #84]	; 0x54
   20c30:	add	r9, r5, r9
   20c34:	mov	r0, r5
   20c38:	tst	r6, #1
   20c3c:	beq	20c84 <__assert_fail@plt+0xf6c8>
   20c40:	cmp	r4, #0
   20c44:	add	r6, sp, #104	; 0x68
   20c48:	beq	20ce8 <__assert_fail@plt+0xf72c>
   20c4c:	cmp	r8, r4
   20c50:	movls	r8, r4
   20c54:	add	r0, r0, r8
   20c58:	sub	r5, r0, #1
   20c5c:	bl	11424 <__ctype_tolower_loc@plt>
   20c60:	ldr	lr, [sp, #84]	; 0x54
   20c64:	mov	r1, r4
   20c68:	ldrb	r2, [r6, r1]
   20c6c:	ldr	r3, [r0]
   20c70:	subs	r1, r1, #1
   20c74:	ldr	r2, [r3, r2, lsl #2]
   20c78:	strb	r2, [r5], #-1
   20c7c:	bne	20c68 <__assert_fail@plt+0xf6ac>
   20c80:	b	20ce8 <__assert_fail@plt+0xf72c>
   20c84:	ldr	r1, [sp, #100]	; 0x64
   20c88:	add	r6, sp, #104	; 0x68
   20c8c:	tst	r1, #1
   20c90:	beq	20cd4 <__assert_fail@plt+0xf718>
   20c94:	cmp	r4, #0
   20c98:	beq	20ce8 <__assert_fail@plt+0xf72c>
   20c9c:	cmp	r8, r4
   20ca0:	movls	r8, r4
   20ca4:	add	r0, r0, r8
   20ca8:	sub	r5, r0, #1
   20cac:	bl	11430 <__ctype_toupper_loc@plt>
   20cb0:	ldr	lr, [sp, #84]	; 0x54
   20cb4:	mov	r1, r4
   20cb8:	ldrb	r2, [r6, r1]
   20cbc:	ldr	r3, [r0]
   20cc0:	subs	r1, r1, #1
   20cc4:	ldr	r2, [r3, r2, lsl #2]
   20cc8:	strb	r2, [r5], #-1
   20ccc:	bne	20cb8 <__assert_fail@plt+0xf6fc>
   20cd0:	b	20ce8 <__assert_fail@plt+0xf72c>
   20cd4:	ldr	r1, [sp, #40]	; 0x28
   20cd8:	mov	r0, r9
   20cdc:	mov	r2, r4
   20ce0:	bl	112f8 <memcpy@plt>
   20ce4:	ldr	lr, [sp, #84]	; 0x54
   20ce8:	add	ip, r9, r4
   20cec:	movw	r4, #52428	; 0xcccc
   20cf0:	add	lr, r7, lr
   20cf4:	mov	r6, #-2147483648	; 0x80000000
   20cf8:	movt	r4, #3276	; 0xccc
   20cfc:	ldrb	r3, [sl, #1]!
   20d00:	mvn	r9, #0
   20d04:	cmp	r3, #0
   20d08:	bne	1f458 <__assert_fail@plt+0xde9c>
   20d0c:	b	20d80 <__assert_fail@plt+0xf7c4>
   20d10:	mov	r0, ip
   20d14:	mov	r9, ip
   20d18:	mov	r1, #32
   20d1c:	mov	r2, r7
   20d20:	mov	r5, lr
   20d24:	bl	114b4 <memset@plt>
   20d28:	mov	lr, r5
   20d2c:	add	ip, r9, r7
   20d30:	mov	r0, r9
   20d34:	add	r0, r7, lr
   20d38:	add	lr, r0, r4
   20d3c:	b	203a4 <__assert_fail@plt+0xede8>
   20d40:	mov	r0, ip
   20d44:	mov	r1, #32
   20d48:	mov	r2, r4
   20d4c:	mov	r5, lr
   20d50:	mov	r7, ip
   20d54:	bl	114b4 <memset@plt>
   20d58:	ldrb	r1, [sl]
   20d5c:	mov	ip, r7
   20d60:	mov	lr, r5
   20d64:	add	ip, r7, r4
   20d68:	strb	r1, [ip], #1
   20d6c:	b	20848 <__assert_fail@plt+0xf28c>
   20d70:	mov	ip, #3
   20d74:	b	207c4 <__assert_fail@plt+0xf208>
   20d78:	mov	lr, #0
   20d7c:	mov	ip, r5
   20d80:	ldr	r0, [sp, #96]	; 0x60
   20d84:	ldr	r1, [sp, #64]	; 0x40
   20d88:	cmp	r0, #0
   20d8c:	cmpne	ip, #0
   20d90:	movne	r0, #0
   20d94:	strbne	r0, [ip]
   20d98:	ldr	r0, [sp, #68]	; 0x44
   20d9c:	str	r1, [r0]
   20da0:	mov	r0, lr
   20da4:	sub	sp, fp, #28
   20da8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dac:	mov	r0, #34	; 0x22
   20db0:	ldr	r1, [sp, #68]	; 0x44
   20db4:	mov	lr, #0
   20db8:	str	r0, [r1]
   20dbc:	mov	r0, lr
   20dc0:	sub	sp, fp, #28
   20dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dc8:	mov	r0, #75	; 0x4b
   20dcc:	b	20db0 <__assert_fail@plt+0xf7f4>
   20dd0:	cmp	r2, #0
   20dd4:	beq	20e04 <__assert_fail@plt+0xf848>
   20dd8:	mvn	r3, #0
   20ddc:	udiv	r3, r3, r2
   20de0:	cmp	r3, r1
   20de4:	bcs	20e04 <__assert_fail@plt+0xf848>
   20de8:	push	{fp, lr}
   20dec:	mov	fp, sp
   20df0:	bl	11490 <__errno_location@plt>
   20df4:	mov	r1, #12
   20df8:	str	r1, [r0]
   20dfc:	mov	r0, #0
   20e00:	pop	{fp, pc}
   20e04:	mul	r1, r2, r1
   20e08:	b	1eff8 <__assert_fail@plt+0xda3c>
   20e0c:	push	{r4, sl, fp, lr}
   20e10:	add	fp, sp, #8
   20e14:	sub	sp, sp, #264	; 0x108
   20e18:	add	r1, sp, #7
   20e1c:	movw	r2, #257	; 0x101
   20e20:	bl	20e70 <__assert_fail@plt+0xf8b4>
   20e24:	mov	r4, #0
   20e28:	cmp	r0, #0
   20e2c:	bne	20e64 <__assert_fail@plt+0xf8a8>
   20e30:	movw	r1, #11020	; 0x2b0c
   20e34:	add	r0, sp, #7
   20e38:	movt	r1, #2
   20e3c:	bl	112a4 <strcmp@plt>
   20e40:	cmp	r0, #0
   20e44:	beq	20e64 <__assert_fail@plt+0xf8a8>
   20e48:	movw	r1, #14659	; 0x3943
   20e4c:	add	r0, sp, #7
   20e50:	movt	r1, #2
   20e54:	bl	112a4 <strcmp@plt>
   20e58:	mov	r4, r0
   20e5c:	cmp	r0, #0
   20e60:	movwne	r4, #1
   20e64:	mov	r0, r4
   20e68:	sub	sp, fp, #8
   20e6c:	pop	{r4, sl, fp, pc}
   20e70:	push	{r4, r5, r6, r7, fp, lr}
   20e74:	add	fp, sp, #16
   20e78:	mov	r4, r1
   20e7c:	mov	r1, #0
   20e80:	mov	r6, r2
   20e84:	bl	11508 <setlocale@plt>
   20e88:	cmp	r0, #0
   20e8c:	beq	20ebc <__assert_fail@plt+0xf900>
   20e90:	mov	r7, r0
   20e94:	bl	1146c <strlen@plt>
   20e98:	cmp	r0, r6
   20e9c:	bcs	20edc <__assert_fail@plt+0xf920>
   20ea0:	add	r2, r0, #1
   20ea4:	mov	r0, r4
   20ea8:	mov	r1, r7
   20eac:	bl	112f8 <memcpy@plt>
   20eb0:	mov	r5, #0
   20eb4:	mov	r0, r5
   20eb8:	pop	{r4, r5, r6, r7, fp, pc}
   20ebc:	cmp	r6, #0
   20ec0:	mov	r5, #22
   20ec4:	movne	r0, #0
   20ec8:	strbne	r0, [r4]
   20ecc:	movne	r0, r5
   20ed0:	popne	{r4, r5, r6, r7, fp, pc}
   20ed4:	mov	r0, r5
   20ed8:	pop	{r4, r5, r6, r7, fp, pc}
   20edc:	mov	r5, #34	; 0x22
   20ee0:	cmp	r6, #0
   20ee4:	beq	20f04 <__assert_fail@plt+0xf948>
   20ee8:	sub	r6, r6, #1
   20eec:	mov	r0, r4
   20ef0:	mov	r1, r7
   20ef4:	mov	r2, r6
   20ef8:	bl	112f8 <memcpy@plt>
   20efc:	mov	r0, #0
   20f00:	strb	r0, [r4, r6]
   20f04:	mov	r0, r5
   20f08:	pop	{r4, r5, r6, r7, fp, pc}
   20f0c:	mov	r1, #0
   20f10:	b	11508 <setlocale@plt>
   20f14:	cmp	r3, #0
   20f18:	cmpeq	r2, #0
   20f1c:	bne	20f40 <__assert_fail@plt+0xf984>
   20f20:	cmp	r1, #0
   20f24:	movlt	r1, #-2147483648	; 0x80000000
   20f28:	movlt	r0, #0
   20f2c:	blt	20f3c <__assert_fail@plt+0xf980>
   20f30:	cmpeq	r0, #0
   20f34:	mvnne	r1, #-2147483648	; 0x80000000
   20f38:	mvnne	r0, #0
   20f3c:	b	21024 <__assert_fail@plt+0xfa68>
   20f40:	sub	sp, sp, #8
   20f44:	push	{sp, lr}
   20f48:	cmp	r1, #0
   20f4c:	blt	20f6c <__assert_fail@plt+0xf9b0>
   20f50:	cmp	r3, #0
   20f54:	blt	20fa0 <__assert_fail@plt+0xf9e4>
   20f58:	bl	21034 <__assert_fail@plt+0xfa78>
   20f5c:	ldr	lr, [sp, #4]
   20f60:	add	sp, sp, #8
   20f64:	pop	{r2, r3}
   20f68:	bx	lr
   20f6c:	rsbs	r0, r0, #0
   20f70:	sbc	r1, r1, r1, lsl #1
   20f74:	cmp	r3, #0
   20f78:	blt	20fc4 <__assert_fail@plt+0xfa08>
   20f7c:	bl	21034 <__assert_fail@plt+0xfa78>
   20f80:	ldr	lr, [sp, #4]
   20f84:	add	sp, sp, #8
   20f88:	pop	{r2, r3}
   20f8c:	rsbs	r0, r0, #0
   20f90:	sbc	r1, r1, r1, lsl #1
   20f94:	rsbs	r2, r2, #0
   20f98:	sbc	r3, r3, r3, lsl #1
   20f9c:	bx	lr
   20fa0:	rsbs	r2, r2, #0
   20fa4:	sbc	r3, r3, r3, lsl #1
   20fa8:	bl	21034 <__assert_fail@plt+0xfa78>
   20fac:	ldr	lr, [sp, #4]
   20fb0:	add	sp, sp, #8
   20fb4:	pop	{r2, r3}
   20fb8:	rsbs	r0, r0, #0
   20fbc:	sbc	r1, r1, r1, lsl #1
   20fc0:	bx	lr
   20fc4:	rsbs	r2, r2, #0
   20fc8:	sbc	r3, r3, r3, lsl #1
   20fcc:	bl	21034 <__assert_fail@plt+0xfa78>
   20fd0:	ldr	lr, [sp, #4]
   20fd4:	add	sp, sp, #8
   20fd8:	pop	{r2, r3}
   20fdc:	rsbs	r2, r2, #0
   20fe0:	sbc	r3, r3, r3, lsl #1
   20fe4:	bx	lr
   20fe8:	cmp	r3, #0
   20fec:	cmpeq	r2, #0
   20ff0:	bne	21008 <__assert_fail@plt+0xfa4c>
   20ff4:	cmp	r1, #0
   20ff8:	cmpeq	r0, #0
   20ffc:	mvnne	r1, #0
   21000:	mvnne	r0, #0
   21004:	b	21024 <__assert_fail@plt+0xfa68>
   21008:	sub	sp, sp, #8
   2100c:	push	{sp, lr}
   21010:	bl	21034 <__assert_fail@plt+0xfa78>
   21014:	ldr	lr, [sp, #4]
   21018:	add	sp, sp, #8
   2101c:	pop	{r2, r3}
   21020:	bx	lr
   21024:	push	{r1, lr}
   21028:	mov	r0, #8
   2102c:	bl	11280 <raise@plt>
   21030:	pop	{r1, pc}
   21034:	cmp	r1, r3
   21038:	cmpeq	r0, r2
   2103c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21040:	mov	r4, r0
   21044:	movcc	r0, #0
   21048:	mov	r5, r1
   2104c:	ldr	lr, [sp, #36]	; 0x24
   21050:	movcc	r1, r0
   21054:	bcc	21150 <__assert_fail@plt+0xfb94>
   21058:	cmp	r3, #0
   2105c:	clzeq	ip, r2
   21060:	clzne	ip, r3
   21064:	addeq	ip, ip, #32
   21068:	cmp	r5, #0
   2106c:	clzeq	r1, r4
   21070:	addeq	r1, r1, #32
   21074:	clzne	r1, r5
   21078:	sub	ip, ip, r1
   2107c:	sub	sl, ip, #32
   21080:	lsl	r9, r3, ip
   21084:	rsb	fp, ip, #32
   21088:	orr	r9, r9, r2, lsl sl
   2108c:	orr	r9, r9, r2, lsr fp
   21090:	lsl	r8, r2, ip
   21094:	cmp	r5, r9
   21098:	cmpeq	r4, r8
   2109c:	movcc	r0, #0
   210a0:	movcc	r1, r0
   210a4:	bcc	210c0 <__assert_fail@plt+0xfb04>
   210a8:	mov	r0, #1
   210ac:	subs	r4, r4, r8
   210b0:	lsl	r1, r0, sl
   210b4:	orr	r1, r1, r0, lsr fp
   210b8:	lsl	r0, r0, ip
   210bc:	sbc	r5, r5, r9
   210c0:	cmp	ip, #0
   210c4:	beq	21150 <__assert_fail@plt+0xfb94>
   210c8:	lsr	r6, r8, #1
   210cc:	orr	r6, r6, r9, lsl #31
   210d0:	lsr	r7, r9, #1
   210d4:	mov	r2, ip
   210d8:	b	210fc <__assert_fail@plt+0xfb40>
   210dc:	subs	r3, r4, r6
   210e0:	sbc	r8, r5, r7
   210e4:	adds	r3, r3, r3
   210e8:	adc	r8, r8, r8
   210ec:	adds	r4, r3, #1
   210f0:	adc	r5, r8, #0
   210f4:	subs	r2, r2, #1
   210f8:	beq	21118 <__assert_fail@plt+0xfb5c>
   210fc:	cmp	r5, r7
   21100:	cmpeq	r4, r6
   21104:	bcs	210dc <__assert_fail@plt+0xfb20>
   21108:	adds	r4, r4, r4
   2110c:	adc	r5, r5, r5
   21110:	subs	r2, r2, #1
   21114:	bne	210fc <__assert_fail@plt+0xfb40>
   21118:	lsr	r3, r4, ip
   2111c:	orr	r3, r3, r5, lsl fp
   21120:	lsr	r2, r5, ip
   21124:	orr	r3, r3, r5, lsr sl
   21128:	adds	r0, r0, r4
   2112c:	mov	r4, r3
   21130:	lsl	r3, r2, ip
   21134:	orr	r3, r3, r4, lsl sl
   21138:	lsl	ip, r4, ip
   2113c:	orr	r3, r3, r4, lsr fp
   21140:	adc	r1, r1, r5
   21144:	subs	r0, r0, ip
   21148:	mov	r5, r2
   2114c:	sbc	r1, r1, r3
   21150:	cmp	lr, #0
   21154:	strdne	r4, [lr]
   21158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2115c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21160:	mov	r7, r0
   21164:	ldr	r6, [pc, #72]	; 211b4 <__assert_fail@plt+0xfbf8>
   21168:	ldr	r5, [pc, #72]	; 211b8 <__assert_fail@plt+0xfbfc>
   2116c:	add	r6, pc, r6
   21170:	add	r5, pc, r5
   21174:	sub	r6, r6, r5
   21178:	mov	r8, r1
   2117c:	mov	r9, r2
   21180:	bl	11248 <calloc@plt-0x20>
   21184:	asrs	r6, r6, #2
   21188:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2118c:	mov	r4, #0
   21190:	add	r4, r4, #1
   21194:	ldr	r3, [r5], #4
   21198:	mov	r2, r9
   2119c:	mov	r1, r8
   211a0:	mov	r0, r7
   211a4:	blx	r3
   211a8:	cmp	r6, r4
   211ac:	bne	21190 <__assert_fail@plt+0xfbd4>
   211b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   211b4:	muleq	r1, r8, sp
   211b8:	muleq	r1, r0, sp
   211bc:	bx	lr
   211c0:	ldr	r3, [pc, #12]	; 211d4 <__assert_fail@plt+0xfc18>
   211c4:	mov	r1, #0
   211c8:	add	r3, pc, r3
   211cc:	ldr	r2, [r3]
   211d0:	b	114a8 <__cxa_atexit@plt>
   211d4:	andeq	r2, r1, r4, ror #30

Disassembly of section .fini:

000211d8 <.fini>:
   211d8:	push	{r3, lr}
   211dc:	pop	{r3, pc}
