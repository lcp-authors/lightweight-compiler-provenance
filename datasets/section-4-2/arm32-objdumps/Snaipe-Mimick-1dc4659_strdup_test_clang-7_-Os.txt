
../repos/Snaipe-Mimick-1dc4659/sample/strdup/strdup_test:     file format elf32-littlearm


Disassembly of section .init:

000113a0 <.init>:
   113a0:	push	{r3, lr}
   113a4:	bl	114ec <_start@@Base+0x3c>
   113a8:	pop	{r3, pc}

Disassembly of section .plt:

000113ac <strstr@plt-0x14>:
   113ac:	push	{lr}		; (str lr, [sp, #-4]!)
   113b0:	ldr	lr, [pc, #4]	; 113bc <strstr@plt-0x4>
   113b4:	add	lr, pc, lr
   113b8:	ldr	pc, [lr, #8]!
   113bc:	andeq	r2, r1, r4, asr #24

000113c0 <strstr@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #73728	; 0x12000
   113c8:	ldr	pc, [ip, #3140]!	; 0xc44

000113cc <strcmp@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #73728	; 0x12000
   113d4:	ldr	pc, [ip, #3132]!	; 0xc3c

000113d8 <mprotect@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #73728	; 0x12000
   113e0:	ldr	pc, [ip, #3124]!	; 0xc34

000113e4 <free@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #73728	; 0x12000
   113ec:	ldr	pc, [ip, #3116]!	; 0xc2c

000113f0 <memcpy@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #73728	; 0x12000
   113f8:	ldr	pc, [ip, #3108]!	; 0xc24

000113fc <realloc@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #73728	; 0x12000
   11404:	ldr	pc, [ip, #3100]!	; 0xc1c

00011408 <malloc@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #73728	; 0x12000
   11410:	ldr	pc, [ip, #3092]!	; 0xc14

00011414 <__libc_start_main@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #73728	; 0x12000
   1141c:	ldr	pc, [ip, #3084]!	; 0xc0c

00011420 <__gmon_start__@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #73728	; 0x12000
   11428:	ldr	pc, [ip, #3076]!	; 0xc04

0001142c <strlen@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #73728	; 0x12000
   11434:	ldr	pc, [ip, #3068]!	; 0xbfc

00011438 <mmap@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #73728	; 0x12000
   11440:	ldr	pc, [ip, #3060]!	; 0xbf4

00011444 <strchr@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #73728	; 0x12000
   1144c:	ldr	pc, [ip, #3052]!	; 0xbec

00011450 <fprintf@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #73728	; 0x12000
   11458:	ldr	pc, [ip, #3044]!	; 0xbe4

0001145c <__errno_location@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #73728	; 0x12000
   11464:	ldr	pc, [ip, #3036]!	; 0xbdc

00011468 <snprintf@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #73728	; 0x12000
   11470:	ldr	pc, [ip, #3028]!	; 0xbd4

00011474 <munmap@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #73728	; 0x12000
   1147c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011480 <my_strdup@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #73728	; 0x12000
   11488:	ldr	pc, [ip, #3012]!	; 0xbc4

0001148c <strncmp@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #73728	; 0x12000
   11494:	ldr	pc, [ip, #3004]!	; 0xbbc

00011498 <abort@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #73728	; 0x12000
   114a0:	ldr	pc, [ip, #2996]!	; 0xbb4

Disassembly of section .text:

000114b0 <_start@@Base>:
   114b0:	mov	fp, #0
   114b4:	mov	lr, #0
   114b8:	pop	{r1}		; (ldr r1, [sp], #4)
   114bc:	mov	r2, sp
   114c0:	push	{r2}		; (str r2, [sp, #-4]!)
   114c4:	push	{r0}		; (str r0, [sp, #-4]!)
   114c8:	ldr	ip, [pc, #16]	; 114e0 <_start@@Base+0x30>
   114cc:	push	{ip}		; (str ip, [sp, #-4]!)
   114d0:	ldr	r0, [pc, #12]	; 114e4 <_start@@Base+0x34>
   114d4:	ldr	r3, [pc, #12]	; 114e8 <_start@@Base+0x38>
   114d8:	bl	11414 <__libc_start_main@plt>
   114dc:	bl	11498 <abort@plt>
   114e0:	andeq	r3, r1, r0, lsr r2
   114e4:	andeq	r1, r1, r8, asr r8
   114e8:	ldrdeq	r3, [r1], -r0
   114ec:	ldr	r3, [pc, #20]	; 11508 <_start@@Base+0x58>
   114f0:	ldr	r2, [pc, #20]	; 1150c <_start@@Base+0x5c>
   114f4:	add	r3, pc, r3
   114f8:	ldr	r2, [r3, r2]
   114fc:	cmp	r2, #0
   11500:	bxeq	lr
   11504:	b	11420 <__gmon_start__@plt>
   11508:	andeq	r2, r1, r4, lsl #22
   1150c:	andeq	r0, r0, r8, asr r0
   11510:	ldr	r0, [pc, #24]	; 11530 <_start@@Base+0x80>
   11514:	ldr	r3, [pc, #24]	; 11534 <_start@@Base+0x84>
   11518:	cmp	r3, r0
   1151c:	bxeq	lr
   11520:	ldr	r3, [pc, #16]	; 11538 <_start@@Base+0x88>
   11524:	cmp	r3, #0
   11528:	bxeq	lr
   1152c:	bx	r3
   11530:	andeq	r4, r2, r0, ror r0
   11534:	andeq	r4, r2, r0, ror r0
   11538:	andeq	r0, r0, r0
   1153c:	ldr	r0, [pc, #36]	; 11568 <_start@@Base+0xb8>
   11540:	ldr	r1, [pc, #36]	; 1156c <_start@@Base+0xbc>
   11544:	sub	r1, r1, r0
   11548:	asr	r1, r1, #2
   1154c:	add	r1, r1, r1, lsr #31
   11550:	asrs	r1, r1, #1
   11554:	bxeq	lr
   11558:	ldr	r3, [pc, #16]	; 11570 <_start@@Base+0xc0>
   1155c:	cmp	r3, #0
   11560:	bxeq	lr
   11564:	bx	r3
   11568:	andeq	r4, r2, r0, ror r0
   1156c:	andeq	r4, r2, r0, ror r0
   11570:	andeq	r0, r0, r0
   11574:	push	{r4, lr}
   11578:	ldr	r4, [pc, #24]	; 11598 <_start@@Base+0xe8>
   1157c:	ldrb	r3, [r4]
   11580:	cmp	r3, #0
   11584:	popne	{r4, pc}
   11588:	bl	11510 <_start@@Base+0x60>
   1158c:	mov	r3, #1
   11590:	strb	r3, [r4]
   11594:	pop	{r4, pc}
   11598:	andeq	r4, r2, r8, lsl #1
   1159c:	b	1153c <_start@@Base+0x8c>

000115a0 <test_simple_case@@Base>:
   115a0:	push	{fp, lr}
   115a4:	mov	fp, sp
   115a8:	sub	sp, sp, #88	; 0x58
   115ac:	movw	r0, #12884	; 0x3254
   115b0:	movt	r0, #1
   115b4:	bl	11730 <test_simple_case@@Base+0x190>
   115b8:	movw	lr, #0
   115bc:	str	r0, [sp, #20]
   115c0:	mov	r0, lr
   115c4:	bl	11f64 <mmk_matcher_init@@Base>
   115c8:	sub	r0, fp, #6
   115cc:	sub	lr, fp, #28
   115d0:	mov	r1, lr
   115d4:	vmov.i32	q8, #0	; 0x00000000
   115d8:	vst1.32	{d16-d17}, [r1]!
   115dc:	mov	r2, #0
   115e0:	str	r2, [r1]
   115e4:	str	r0, [fp, #-32]	; 0xffffffe0
   115e8:	sub	r0, fp, #32
   115ec:	str	r0, [fp, #-20]	; 0xffffffec
   115f0:	mov	r0, lr
   115f4:	bl	1310c <mmk_when_init@@Base>
   115f8:	movw	r0, #6
   115fc:	bl	11408 <malloc@plt>
   11600:	str	r0, [sp, #16]
   11604:	bl	11fa0 <mmk_matcher_term@@Base>
   11608:	movw	r0, #12902	; 0x3266
   1160c:	movt	r0, #1
   11610:	bl	11480 <my_strdup@plt>
   11614:	str	r0, [fp, #-36]	; 0xffffffdc
   11618:	movw	r0, #1
   1161c:	bl	11f64 <mmk_matcher_init@@Base>
   11620:	ldr	r0, [pc, #260]	; 1172c <test_simple_case@@Base+0x18c>
   11624:	movw	r1, #0
   11628:	bl	11fdc <mmk_matcher_add@@Base>
   1162c:	movw	r0, #6
   11630:	bl	11408 <malloc@plt>
   11634:	str	r0, [sp, #12]
   11638:	bl	11fa0 <mmk_matcher_term@@Base>
   1163c:	movw	r0, #1
   11640:	str	r0, [sp, #24]
   11644:	movw	r1, #0
   11648:	str	r1, [sp, #28]
   1164c:	str	r1, [sp, #32]
   11650:	str	r1, [sp, #36]	; 0x24
   11654:	str	r0, [sp, #40]	; 0x28
   11658:	str	r1, [sp, #44]	; 0x2c
   1165c:	add	r0, sp, #24
   11660:	bl	12bb0 <mmk_verify_times@@Base>
   11664:	str	r0, [fp, #-40]	; 0xffffffd8
   11668:	ldr	r0, [fp, #-40]	; 0xffffffd8
   1166c:	cmp	r0, #0
   11670:	bne	116ac <test_simple_case@@Base+0x10c>
   11674:	movw	r0, #16496	; 0x4070
   11678:	movt	r0, #2
   1167c:	ldr	r0, [r0]
   11680:	movw	r1, #12908	; 0x326c
   11684:	movt	r1, #1
   11688:	movw	r2, #12937	; 0x3289
   1168c:	movt	r2, #1
   11690:	movw	r3, #23
   11694:	movw	ip, #13003	; 0x32cb
   11698:	movt	ip, #1
   1169c:	str	ip, [sp]
   116a0:	bl	11450 <fprintf@plt>
   116a4:	str	r0, [sp, #8]
   116a8:	bl	11498 <abort@plt>
   116ac:	b	116b0 <test_simple_case@@Base+0x110>
   116b0:	b	116b4 <test_simple_case@@Base+0x114>
   116b4:	sub	r0, fp, #6
   116b8:	ldr	r1, [fp, #-36]	; 0xffffffdc
   116bc:	cmp	r1, r0
   116c0:	bne	116dc <test_simple_case@@Base+0x13c>
   116c4:	sub	r1, fp, #6
   116c8:	movw	r0, #16484	; 0x4064
   116cc:	movt	r0, #2
   116d0:	bl	113cc <strcmp@plt>
   116d4:	cmp	r0, #0
   116d8:	beq	11714 <test_simple_case@@Base+0x174>
   116dc:	movw	r0, #16496	; 0x4070
   116e0:	movt	r0, #2
   116e4:	ldr	r0, [r0]
   116e8:	movw	r1, #12908	; 0x326c
   116ec:	movt	r1, #1
   116f0:	movw	r2, #12937	; 0x3289
   116f4:	movt	r2, #1
   116f8:	movw	r3, #24
   116fc:	movw	ip, #13008	; 0x32d0
   11700:	movt	ip, #1
   11704:	str	ip, [sp]
   11708:	bl	11450 <fprintf@plt>
   1170c:	str	r0, [sp, #4]
   11710:	bl	11498 <abort@plt>
   11714:	b	11718 <test_simple_case@@Base+0x178>
   11718:	movw	r0, #5128	; 0x1408
   1171c:	movt	r0, #1
   11720:	bl	11f44 <mmk_reset@@Base>
   11724:	mov	sp, fp
   11728:	pop	{fp, pc}
   1172c:	andhi	r0, r0, sl
   11730:	push	{fp, lr}
   11734:	mov	fp, sp
   11738:	sub	sp, sp, #8
   1173c:	movw	r1, #6272	; 0x1880
   11740:	movt	r1, #1
   11744:	str	r0, [sp, #4]
   11748:	ldr	r0, [sp, #4]
   1174c:	bl	12048 <mmk_mock_create_internal@@Base>
   11750:	mov	sp, fp
   11754:	pop	{fp, pc}

00011758 <test_error_case@@Base>:
   11758:	push	{fp, lr}
   1175c:	mov	fp, sp
   11760:	sub	sp, sp, #56	; 0x38
   11764:	movw	r0, #12884	; 0x3254
   11768:	movt	r0, #1
   1176c:	bl	11730 <test_simple_case@@Base+0x190>
   11770:	str	r0, [fp, #-4]
   11774:	movw	r0, #0
   11778:	bl	11f64 <mmk_matcher_init@@Base>
   1177c:	movw	r0, #0
   11780:	str	r0, [fp, #-24]	; 0xffffffe8
   11784:	movw	lr, #12
   11788:	str	lr, [fp, #-20]	; 0xffffffec
   1178c:	str	r0, [sp, #28]
   11790:	add	lr, sp, #28
   11794:	str	lr, [fp, #-16]
   11798:	str	r0, [fp, #-12]
   1179c:	str	r0, [fp, #-8]
   117a0:	sub	r0, fp, #24
   117a4:	bl	1310c <mmk_when_init@@Base>
   117a8:	ldr	r0, [fp, #-4]
   117ac:	movw	lr, #0
   117b0:	str	r0, [sp, #16]
   117b4:	mov	r0, lr
   117b8:	movw	r1, #1
   117bc:	bl	11fdc <mmk_matcher_add@@Base>
   117c0:	movw	r0, #0
   117c4:	str	r0, [sp, #24]
   117c8:	ldr	r0, [sp, #24]
   117cc:	ldr	r1, [sp, #16]
   117d0:	blx	r1
   117d4:	str	r0, [sp, #12]
   117d8:	bl	11fa0 <mmk_matcher_term@@Base>
   117dc:	movw	r0, #13040	; 0x32f0
   117e0:	movt	r0, #1
   117e4:	bl	11480 <my_strdup@plt>
   117e8:	str	r0, [sp, #20]
   117ec:	ldr	r0, [sp, #20]
   117f0:	movw	r1, #0
   117f4:	cmp	r0, r1
   117f8:	bne	1180c <test_error_case@@Base+0xb4>
   117fc:	bl	1145c <__errno_location@plt>
   11800:	ldr	r0, [r0]
   11804:	cmp	r0, #12
   11808:	beq	11844 <test_error_case@@Base+0xec>
   1180c:	movw	r0, #16496	; 0x4070
   11810:	movt	r0, #2
   11814:	ldr	r0, [r0]
   11818:	movw	r1, #12908	; 0x326c
   1181c:	movt	r1, #1
   11820:	movw	r2, #12937	; 0x3289
   11824:	movt	r2, #1
   11828:	movw	r3, #39	; 0x27
   1182c:	movw	ip, #13044	; 0x32f4
   11830:	movt	ip, #1
   11834:	str	ip, [sp]
   11838:	bl	11450 <fprintf@plt>
   1183c:	str	r0, [sp, #8]
   11840:	bl	11498 <abort@plt>
   11844:	b	11848 <test_error_case@@Base+0xf0>
   11848:	ldr	r0, [fp, #-4]
   1184c:	bl	11f44 <mmk_reset@@Base>
   11850:	mov	sp, fp
   11854:	pop	{fp, pc}

00011858 <main@@Base>:
   11858:	push	{fp, lr}
   1185c:	mov	fp, sp
   11860:	sub	sp, sp, #8
   11864:	movw	r0, #0
   11868:	str	r0, [sp, #4]
   1186c:	bl	115a0 <test_simple_case@@Base>
   11870:	bl	11758 <test_error_case@@Base>
   11874:	movw	r0, #0
   11878:	mov	sp, fp
   1187c:	pop	{fp, pc}
   11880:	push	{fp, lr}
   11884:	mov	fp, sp
   11888:	sub	sp, sp, #128	; 0x80
   1188c:	str	r0, [fp, #-8]
   11890:	b	11894 <main@@Base+0x3c>
   11894:	bl	11fc0 <mmk_matcher_ctx@@Base>
   11898:	str	r0, [fp, #-12]
   1189c:	ldr	r0, [fp, #-12]
   118a0:	movw	lr, #0
   118a4:	cmp	r0, lr
   118a8:	beq	11b34 <main@@Base+0x2dc>
   118ac:	bl	12994 <mmk_ctx@@Base>
   118b0:	bl	1280c <mmk_stub_context@@Base>
   118b4:	str	r0, [fp, #-16]
   118b8:	ldr	r0, [fp, #-12]
   118bc:	ldr	r0, [r0]
   118c0:	cmp	r0, #0
   118c4:	bne	1191c <main@@Base+0xc4>
   118c8:	movw	r0, #44	; 0x2c
   118cc:	bl	12fac <mmk_malloc@@Base>
   118d0:	str	r0, [fp, #-20]	; 0xffffffec
   118d4:	ldr	r0, [fp, #-20]	; 0xffffffec
   118d8:	add	r0, r0, #8
   118dc:	str	r0, [sp, #32]
   118e0:	bl	1312c <mmk_when_get_result@@Base>
   118e4:	ldr	lr, [sp, #32]
   118e8:	str	r0, [sp, #28]
   118ec:	mov	r0, lr
   118f0:	ldr	r1, [sp, #28]
   118f4:	movw	r2, #20
   118f8:	bl	113f0 <memcpy@plt>
   118fc:	ldr	r0, [fp, #-8]
   11900:	ldr	r1, [fp, #-20]	; 0xffffffec
   11904:	str	r0, [r1, #40]	; 0x28
   11908:	b	1190c <main@@Base+0xb4>
   1190c:	ldr	r0, [fp, #-16]
   11910:	ldr	r1, [fp, #-20]	; 0xffffffec
   11914:	bl	13148 <mmk_when_impl@@Base>
   11918:	b	11b18 <main@@Base+0x2c0>
   1191c:	ldr	r0, [fp, #-12]
   11920:	ldr	r0, [r0]
   11924:	cmp	r0, #1
   11928:	bne	11b14 <main@@Base+0x2bc>
   1192c:	movw	r0, #0
   11930:	str	r0, [fp, #-24]	; 0xffffffe8
   11934:	ldr	r0, [fp, #-16]
   11938:	bl	12228 <mmk_mock_params_begin@@Base>
   1193c:	str	r0, [fp, #-28]	; 0xffffffe4
   11940:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11944:	movw	r1, #0
   11948:	cmp	r0, r1
   1194c:	beq	11ad4 <main@@Base+0x27c>
   11950:	ldr	r0, [fp, #-12]
   11954:	str	r0, [fp, #-32]	; 0xffffffe0
   11958:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1195c:	ldr	r0, [r0, #8]
   11960:	movw	r1, #0
   11964:	cmp	r0, r1
   11968:	beq	11a7c <main@@Base+0x224>
   1196c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11970:	ldr	r0, [r0, #8]
   11974:	str	r0, [fp, #-32]	; 0xffffffe0
   11978:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1197c:	ldr	r0, [r0]
   11980:	cmp	r0, #0
   11984:	bne	1198c <main@@Base+0x134>
   11988:	b	11a78 <main@@Base+0x220>
   1198c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11990:	ldr	r0, [r0]
   11994:	and	r0, r0, #-2147483648	; 0x80000000
   11998:	cmp	r0, #0
   1199c:	beq	11a28 <main@@Base+0x1d0>
   119a0:	ldr	r0, [fp, #-28]	; 0xffffffe4
   119a4:	add	r0, r0, #12
   119a8:	sub	r1, fp, #8
   119ac:	movw	r2, #4
   119b0:	bl	12de4 <mmk_memcmp@@Base>
   119b4:	str	r0, [fp, #-36]	; 0xffffffdc
   119b8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   119bc:	cmp	r0, #0
   119c0:	bne	119dc <main@@Base+0x184>
   119c4:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119c8:	ldr	r0, [r0]
   119cc:	and	r0, r0, #2
   119d0:	cmp	r0, #0
   119d4:	bne	119dc <main@@Base+0x184>
   119d8:	b	11abc <main@@Base+0x264>
   119dc:	ldr	r0, [fp, #-36]	; 0xffffffdc
   119e0:	cmp	r0, #0
   119e4:	bge	11a00 <main@@Base+0x1a8>
   119e8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   119ec:	ldr	r0, [r0]
   119f0:	and	r0, r0, #4
   119f4:	cmp	r0, #0
   119f8:	bne	11a00 <main@@Base+0x1a8>
   119fc:	b	11abc <main@@Base+0x264>
   11a00:	ldr	r0, [fp, #-36]	; 0xffffffdc
   11a04:	cmp	r0, #0
   11a08:	ble	11a24 <main@@Base+0x1cc>
   11a0c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a10:	ldr	r0, [r0]
   11a14:	and	r0, r0, #8
   11a18:	cmp	r0, #0
   11a1c:	bne	11a24 <main@@Base+0x1cc>
   11a20:	b	11abc <main@@Base+0x264>
   11a24:	b	11a74 <main@@Base+0x21c>
   11a28:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a2c:	ldr	r0, [r0]
   11a30:	cmp	r0, #1
   11a34:	bne	11a70 <main@@Base+0x218>
   11a38:	ldr	r0, [fp, #-32]	; 0xffffffe0
   11a3c:	bl	12040 <mmk_matcher_get_predicate@@Base>
   11a40:	str	r0, [fp, #-40]	; 0xffffffd8
   11a44:	ldr	r0, [fp, #-40]	; 0xffffffd8
   11a48:	ldr	lr, [fp, #-28]	; 0xffffffe4
   11a4c:	ldr	lr, [lr, #12]
   11a50:	str	r0, [sp, #24]
   11a54:	mov	r0, lr
   11a58:	ldr	lr, [sp, #24]
   11a5c:	blx	lr
   11a60:	cmp	r0, #0
   11a64:	bne	11a6c <main@@Base+0x214>
   11a68:	b	11abc <main@@Base+0x264>
   11a6c:	b	11a70 <main@@Base+0x218>
   11a70:	b	11a74 <main@@Base+0x21c>
   11a74:	b	11a78 <main@@Base+0x220>
   11a78:	b	11aa0 <main@@Base+0x248>
   11a7c:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11a80:	add	r0, r0, #12
   11a84:	sub	r1, fp, #8
   11a88:	movw	r2, #4
   11a8c:	bl	12de4 <mmk_memcmp@@Base>
   11a90:	cmp	r0, #0
   11a94:	beq	11a9c <main@@Base+0x244>
   11a98:	b	11abc <main@@Base+0x264>
   11a9c:	b	11aa0 <main@@Base+0x248>
   11aa0:	b	11aa4 <main@@Base+0x24c>
   11aa4:	b	11aa8 <main@@Base+0x250>
   11aa8:	ldr	r0, [fp, #-28]	; 0xffffffe4
   11aac:	ldr	r0, [r0]
   11ab0:	ldr	r1, [fp, #-24]	; 0xffffffe8
   11ab4:	add	r0, r1, r0
   11ab8:	str	r0, [fp, #-24]	; 0xffffffe8
   11abc:	b	11ac0 <main@@Base+0x268>
   11ac0:	ldr	r0, [fp, #-16]
   11ac4:	ldr	r1, [fp, #-28]	; 0xffffffe4
   11ac8:	bl	12248 <mmk_mock_params_next@@Base>
   11acc:	str	r0, [fp, #-28]	; 0xffffffe4
   11ad0:	b	11940 <main@@Base+0xe8>
   11ad4:	ldr	r0, [fp, #-12]
   11ad8:	str	r0, [fp, #-44]	; 0xffffffd4
   11adc:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11ae0:	movw	r1, #0
   11ae4:	cmp	r0, r1
   11ae8:	beq	11b0c <main@@Base+0x2b4>
   11aec:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11af0:	ldr	r0, [r0, #8]
   11af4:	str	r0, [fp, #-48]	; 0xffffffd0
   11af8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   11afc:	bl	12fcc <mmk_free@@Base>
   11b00:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11b04:	str	r0, [fp, #-44]	; 0xffffffd4
   11b08:	b	11adc <main@@Base+0x284>
   11b0c:	ldr	r0, [fp, #-24]	; 0xffffffe8
   11b10:	bl	12b90 <mmk_verify_set_times@@Base>
   11b14:	b	11b18 <main@@Base+0x2c0>
   11b18:	b	11b1c <main@@Base+0x2c4>
   11b1c:	b	11b20 <main@@Base+0x2c8>
   11b20:	movw	r0, #16524	; 0x408c
   11b24:	movt	r0, #2
   11b28:	ldr	r0, [r0]
   11b2c:	str	r0, [fp, #-4]
   11b30:	b	11e58 <main@@Base+0x600>
   11b34:	movw	r0, #0
   11b38:	str	r0, [sp, #60]	; 0x3c
   11b3c:	str	r0, [sp, #64]	; 0x40
   11b40:	str	r0, [sp, #68]	; 0x44
   11b44:	ldr	r0, [fp, #-8]
   11b48:	str	r0, [sp, #72]	; 0x48
   11b4c:	add	r0, sp, #60	; 0x3c
   11b50:	str	r0, [fp, #-52]	; 0xffffffcc
   11b54:	b	11b58 <main@@Base+0x300>
   11b58:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11b5c:	movw	r1, #16
   11b60:	bl	12c3c <mmk_verify_register_call@@Base>
   11b64:	bl	12270 <mmk_mock_get_params@@Base>
   11b68:	str	r0, [sp, #56]	; 0x38
   11b6c:	ldr	r0, [sp, #56]	; 0x38
   11b70:	movw	r1, #0
   11b74:	cmp	r0, r1
   11b78:	beq	11e40 <main@@Base+0x5e8>
   11b7c:	ldr	r0, [sp, #56]	; 0x38
   11b80:	str	r0, [sp, #52]	; 0x34
   11b84:	ldr	r0, [sp, #56]	; 0x38
   11b88:	ldr	r0, [r0]
   11b8c:	str	r0, [sp, #48]	; 0x30
   11b90:	ldr	r0, [sp, #48]	; 0x30
   11b94:	ldr	r0, [r0, #8]
   11b98:	movw	r1, #0
   11b9c:	cmp	r0, r1
   11ba0:	beq	11cb8 <main@@Base+0x460>
   11ba4:	ldr	r0, [sp, #48]	; 0x30
   11ba8:	ldr	r0, [r0, #8]
   11bac:	str	r0, [sp, #48]	; 0x30
   11bb0:	ldr	r0, [sp, #48]	; 0x30
   11bb4:	ldr	r0, [r0]
   11bb8:	cmp	r0, #0
   11bbc:	bne	11bc4 <main@@Base+0x36c>
   11bc0:	b	11cb4 <main@@Base+0x45c>
   11bc4:	ldr	r0, [sp, #48]	; 0x30
   11bc8:	ldr	r0, [r0]
   11bcc:	and	r0, r0, #-2147483648	; 0x80000000
   11bd0:	cmp	r0, #0
   11bd4:	beq	11c68 <main@@Base+0x410>
   11bd8:	sub	r0, fp, #8
   11bdc:	mov	r1, r0
   11be0:	str	r0, [sp, #20]
   11be4:	mov	r0, r1
   11be8:	ldr	r1, [sp, #20]
   11bec:	movw	r2, #4
   11bf0:	bl	12de4 <mmk_memcmp@@Base>
   11bf4:	str	r0, [sp, #44]	; 0x2c
   11bf8:	ldr	r0, [sp, #44]	; 0x2c
   11bfc:	cmp	r0, #0
   11c00:	bne	11c1c <main@@Base+0x3c4>
   11c04:	ldr	r0, [sp, #48]	; 0x30
   11c08:	ldr	r0, [r0]
   11c0c:	and	r0, r0, #2
   11c10:	cmp	r0, #0
   11c14:	bne	11c1c <main@@Base+0x3c4>
   11c18:	b	11e30 <main@@Base+0x5d8>
   11c1c:	ldr	r0, [sp, #44]	; 0x2c
   11c20:	cmp	r0, #0
   11c24:	bge	11c40 <main@@Base+0x3e8>
   11c28:	ldr	r0, [sp, #48]	; 0x30
   11c2c:	ldr	r0, [r0]
   11c30:	and	r0, r0, #4
   11c34:	cmp	r0, #0
   11c38:	bne	11c40 <main@@Base+0x3e8>
   11c3c:	b	11e30 <main@@Base+0x5d8>
   11c40:	ldr	r0, [sp, #44]	; 0x2c
   11c44:	cmp	r0, #0
   11c48:	ble	11c64 <main@@Base+0x40c>
   11c4c:	ldr	r0, [sp, #48]	; 0x30
   11c50:	ldr	r0, [r0]
   11c54:	and	r0, r0, #8
   11c58:	cmp	r0, #0
   11c5c:	bne	11c64 <main@@Base+0x40c>
   11c60:	b	11e30 <main@@Base+0x5d8>
   11c64:	b	11cb0 <main@@Base+0x458>
   11c68:	ldr	r0, [sp, #48]	; 0x30
   11c6c:	ldr	r0, [r0]
   11c70:	cmp	r0, #1
   11c74:	bne	11cac <main@@Base+0x454>
   11c78:	ldr	r0, [sp, #48]	; 0x30
   11c7c:	bl	12040 <mmk_matcher_get_predicate@@Base>
   11c80:	str	r0, [sp, #40]	; 0x28
   11c84:	ldr	r0, [sp, #40]	; 0x28
   11c88:	ldr	lr, [fp, #-8]
   11c8c:	str	r0, [sp, #16]
   11c90:	mov	r0, lr
   11c94:	ldr	lr, [sp, #16]
   11c98:	blx	lr
   11c9c:	cmp	r0, #0
   11ca0:	bne	11ca8 <main@@Base+0x450>
   11ca4:	b	11e30 <main@@Base+0x5d8>
   11ca8:	b	11cac <main@@Base+0x454>
   11cac:	b	11cb0 <main@@Base+0x458>
   11cb0:	b	11cb4 <main@@Base+0x45c>
   11cb4:	b	11ce0 <main@@Base+0x488>
   11cb8:	sub	r0, fp, #8
   11cbc:	ldr	r1, [sp, #52]	; 0x34
   11cc0:	add	r1, r1, #28
   11cc4:	add	r1, r1, #12
   11cc8:	movw	r2, #4
   11ccc:	bl	12de4 <mmk_memcmp@@Base>
   11cd0:	cmp	r0, #0
   11cd4:	beq	11cdc <main@@Base+0x484>
   11cd8:	b	11e30 <main@@Base+0x5d8>
   11cdc:	b	11ce0 <main@@Base+0x488>
   11ce0:	ldr	r0, [sp, #52]	; 0x34
   11ce4:	ldr	r0, [r0, #12]
   11ce8:	cmp	r0, #0
   11cec:	beq	11d08 <main@@Base+0x4b0>
   11cf0:	ldr	r0, [sp, #52]	; 0x34
   11cf4:	ldr	r0, [r0, #12]
   11cf8:	str	r0, [sp, #12]
   11cfc:	bl	1145c <__errno_location@plt>
   11d00:	ldr	lr, [sp, #12]
   11d04:	str	lr, [r0]
   11d08:	ldr	r0, [sp, #52]	; 0x34
   11d0c:	ldr	r0, [r0, #20]
   11d10:	movw	r1, #0
   11d14:	cmp	r0, r1
   11d18:	beq	11d74 <main@@Base+0x51c>
   11d1c:	ldr	r0, [sp, #52]	; 0x34
   11d20:	ldr	r0, [r0, #16]
   11d24:	movw	r1, #0
   11d28:	cmp	r0, r1
   11d2c:	bne	11d74 <main@@Base+0x51c>
   11d30:	b	11d34 <main@@Base+0x4dc>
   11d34:	b	11d38 <main@@Base+0x4e0>
   11d38:	b	11d3c <main@@Base+0x4e4>
   11d3c:	ldr	r0, [sp, #52]	; 0x34
   11d40:	ldr	r0, [r0, #20]
   11d44:	ldr	r1, [fp, #-8]
   11d48:	str	r0, [sp, #8]
   11d4c:	mov	r0, r1
   11d50:	ldr	r1, [sp, #8]
   11d54:	blx	r1
   11d58:	str	r0, [sp, #36]	; 0x24
   11d5c:	b	11d60 <main@@Base+0x508>
   11d60:	b	11d64 <main@@Base+0x50c>
   11d64:	b	11d68 <main@@Base+0x510>
   11d68:	ldr	r0, [sp, #36]	; 0x24
   11d6c:	str	r0, [fp, #-4]
   11d70:	b	11e58 <main@@Base+0x600>
   11d74:	ldr	r0, [sp, #52]	; 0x34
   11d78:	ldr	r0, [r0, #20]
   11d7c:	movw	r1, #0
   11d80:	cmp	r0, r1
   11d84:	beq	11de4 <main@@Base+0x58c>
   11d88:	ldr	r0, [sp, #52]	; 0x34
   11d8c:	ldr	r0, [r0, #16]
   11d90:	movw	r1, #0
   11d94:	cmp	r0, r1
   11d98:	beq	11de4 <main@@Base+0x58c>
   11d9c:	b	11da0 <main@@Base+0x548>
   11da0:	b	11da4 <main@@Base+0x54c>
   11da4:	ldr	r0, [sp, #52]	; 0x34
   11da8:	ldr	r0, [r0, #20]
   11dac:	ldr	r1, [fp, #-8]
   11db0:	str	r0, [sp, #4]
   11db4:	mov	r0, r1
   11db8:	ldr	r1, [sp, #4]
   11dbc:	blx	r1
   11dc0:	str	r0, [sp]
   11dc4:	b	11dc8 <main@@Base+0x570>
   11dc8:	b	11dcc <main@@Base+0x574>
   11dcc:	b	11dd0 <main@@Base+0x578>
   11dd0:	ldr	r0, [sp, #52]	; 0x34
   11dd4:	ldr	r0, [r0, #16]
   11dd8:	ldr	r0, [r0]
   11ddc:	str	r0, [fp, #-4]
   11de0:	b	11e58 <main@@Base+0x600>
   11de4:	ldr	r0, [sp, #52]	; 0x34
   11de8:	ldr	r0, [r0, #16]
   11dec:	movw	r1, #0
   11df0:	cmp	r0, r1
   11df4:	beq	11e14 <main@@Base+0x5bc>
   11df8:	b	11dfc <main@@Base+0x5a4>
   11dfc:	b	11e00 <main@@Base+0x5a8>
   11e00:	ldr	r0, [sp, #52]	; 0x34
   11e04:	ldr	r0, [r0, #16]
   11e08:	ldr	r0, [r0]
   11e0c:	str	r0, [fp, #-4]
   11e10:	b	11e58 <main@@Base+0x600>
   11e14:	b	11e18 <main@@Base+0x5c0>
   11e18:	b	11e1c <main@@Base+0x5c4>
   11e1c:	movw	r0, #16524	; 0x408c
   11e20:	movt	r0, #2
   11e24:	ldr	r0, [r0]
   11e28:	str	r0, [fp, #-4]
   11e2c:	b	11e58 <main@@Base+0x600>
   11e30:	ldr	r0, [sp, #56]	; 0x38
   11e34:	ldr	r0, [r0, #4]
   11e38:	str	r0, [sp, #56]	; 0x38
   11e3c:	b	11b6c <main@@Base+0x314>
   11e40:	b	11e44 <main@@Base+0x5ec>
   11e44:	b	11e48 <main@@Base+0x5f0>
   11e48:	movw	r0, #16524	; 0x408c
   11e4c:	movt	r0, #2
   11e50:	ldr	r0, [r0]
   11e54:	str	r0, [fp, #-4]
   11e58:	ldr	r0, [fp, #-4]
   11e5c:	mov	sp, fp
   11e60:	pop	{fp, pc}

00011e64 <mmk_init@@Base>:
   11e64:	push	{r4, sl, fp, lr}
   11e68:	add	fp, sp, #8
   11e6c:	sub	sp, sp, #8
   11e70:	movw	r4, #16528	; 0x4090
   11e74:	movt	r4, #2
   11e78:	ldrb	r0, [r4]
   11e7c:	cmp	r0, #0
   11e80:	bne	11ea8 <mmk_init@@Base+0x44>
   11e84:	bl	12288 <plt_init_ctx@@Base>
   11e88:	movw	r1, #16532	; 0x4094
   11e8c:	cmn	r0, #1
   11e90:	movt	r1, #2
   11e94:	str	r0, [r1]
   11e98:	beq	11eb0 <mmk_init@@Base+0x4c>
   11e9c:	bl	12fdc <mmk_init_vital_functions@@Base>
   11ea0:	mov	r0, #1
   11ea4:	strb	r0, [r4]
   11ea8:	sub	sp, fp, #8
   11eac:	pop	{r4, sl, fp, pc}
   11eb0:	movw	r0, #16496	; 0x4070
   11eb4:	movw	r1, #13131	; 0x334b
   11eb8:	movw	r2, #13075	; 0x3313
   11ebc:	mov	r3, #45	; 0x2d
   11ec0:	movt	r0, #2
   11ec4:	movt	r1, #1
   11ec8:	movt	r2, #1
   11ecc:	ldr	r0, [r0]
   11ed0:	str	r1, [sp]
   11ed4:	movw	r1, #12908	; 0x326c
   11ed8:	movt	r1, #1
   11edc:	bl	11450 <fprintf@plt>
   11ee0:	bl	11498 <abort@plt>

00011ee4 <mmk_plt_ctx@@Base>:
   11ee4:	movw	r0, #16528	; 0x4090
   11ee8:	movt	r0, #2
   11eec:	ldrb	r0, [r0]
   11ef0:	cmp	r0, #0
   11ef4:	movwne	r0, #16532	; 0x4094
   11ef8:	movtne	r0, #2
   11efc:	ldrne	r0, [r0]
   11f00:	bxne	lr
   11f04:	push	{fp, lr}
   11f08:	mov	fp, sp
   11f0c:	sub	sp, sp, #8
   11f10:	movw	r0, #16496	; 0x4070
   11f14:	movw	r1, #13154	; 0x3362
   11f18:	movw	r2, #13075	; 0x3313
   11f1c:	mov	r3, #54	; 0x36
   11f20:	movt	r0, #2
   11f24:	movt	r1, #1
   11f28:	movt	r2, #1
   11f2c:	ldr	r0, [r0]
   11f30:	str	r1, [sp]
   11f34:	movw	r1, #12908	; 0x326c
   11f38:	movt	r1, #1
   11f3c:	bl	11450 <fprintf@plt>
   11f40:	bl	11498 <abort@plt>

00011f44 <mmk_reset@@Base>:
   11f44:	cmp	r0, #0
   11f48:	bxeq	lr
   11f4c:	push	{fp, lr}
   11f50:	mov	fp, sp
   11f54:	bl	12a5c <mmk_ask_ctx@@Base>
   11f58:	bl	1280c <mmk_stub_context@@Base>
   11f5c:	pop	{fp, lr}
   11f60:	b	121a8 <mmk_mock_destroy_internal@@Base>

00011f64 <mmk_matcher_init@@Base>:
   11f64:	push	{r4, sl, fp, lr}
   11f68:	add	fp, sp, #8
   11f6c:	mov	r4, r0
   11f70:	mov	r0, #12
   11f74:	bl	12fac <mmk_malloc@@Base>
   11f78:	ldr	r2, [pc, #28]	; 11f9c <mmk_matcher_init@@Base+0x38>
   11f7c:	mov	r1, r0
   11f80:	mov	r0, #0
   11f84:	str	r4, [r1]
   11f88:	str	r0, [r1, #4]
   11f8c:	str	r0, [r1, #8]
   11f90:	bl	13240 <__libc_csu_fini@@Base+0x10>
   11f94:	str	r1, [r0, r2]
   11f98:	pop	{r4, sl, fp, pc}
   11f9c:	andeq	r0, r0, r8

00011fa0 <mmk_matcher_term@@Base>:
   11fa0:	push	{fp, lr}
   11fa4:	mov	fp, sp
   11fa8:	ldr	r1, [pc, #12]	; 11fbc <mmk_matcher_term@@Base+0x1c>
   11fac:	mov	r2, #0
   11fb0:	bl	13240 <__libc_csu_fini@@Base+0x10>
   11fb4:	str	r2, [r0, r1]
   11fb8:	pop	{fp, pc}
   11fbc:	andeq	r0, r0, r8

00011fc0 <mmk_matcher_ctx@@Base>:
   11fc0:	push	{fp, lr}
   11fc4:	mov	fp, sp
   11fc8:	ldr	r1, [pc, #8]	; 11fd8 <mmk_matcher_ctx@@Base+0x18>
   11fcc:	bl	13240 <__libc_csu_fini@@Base+0x10>
   11fd0:	ldr	r0, [r0, r1]
   11fd4:	pop	{fp, pc}
   11fd8:	andeq	r0, r0, r8

00011fdc <mmk_matcher_add@@Base>:
   11fdc:	push	{r4, r5, fp, lr}
   11fe0:	add	fp, sp, #8
   11fe4:	mov	r5, r0
   11fe8:	mov	r0, #12
   11fec:	mov	r4, r1
   11ff0:	bl	12fac <mmk_malloc@@Base>
   11ff4:	ldr	r2, [pc, #64]	; 1203c <mmk_matcher_add@@Base+0x60>
   11ff8:	mov	r1, r0
   11ffc:	bl	13240 <__libc_csu_fini@@Base+0x10>
   12000:	ldr	r0, [r0, r2]
   12004:	mov	r2, #0
   12008:	str	r5, [r1]
   1200c:	str	r4, [r1, #4]
   12010:	str	r2, [r1, #8]
   12014:	mov	r2, r0
   12018:	ldr	r0, [r0, #8]
   1201c:	cmp	r0, #0
   12020:	beq	12030 <mmk_matcher_add@@Base+0x54>
   12024:	ldr	r3, [r0, #4]
   12028:	cmp	r3, r4
   1202c:	bcc	12014 <mmk_matcher_add@@Base+0x38>
   12030:	str	r0, [r1, #8]
   12034:	str	r1, [r2, #8]
   12038:	pop	{r4, r5, fp, pc}
   1203c:	andeq	r0, r0, r8

00012040 <mmk_matcher_get_predicate@@Base>:
   12040:	add	r0, r0, #12
   12044:	bx	lr

00012048 <mmk_mock_create_internal@@Base>:
   12048:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1204c:	add	fp, sp, #24
   12050:	sub	sp, sp, #8
   12054:	mov	r8, r1
   12058:	mov	r9, r0
   1205c:	bl	11e64 <mmk_init@@Base>
   12060:	mov	r0, #20
   12064:	bl	12fac <mmk_malloc@@Base>
   12068:	cmp	r0, #0
   1206c:	beq	12154 <mmk_mock_create_internal@@Base+0x10c>
   12070:	vmov.i32	q8, #0	; 0x00000000
   12074:	mov	r4, r0
   12078:	mov	r1, #0
   1207c:	vst1.32	{d16-d17}, [r0]!
   12080:	str	r1, [r0]
   12084:	mov	r0, r9
   12088:	mov	r1, #64	; 0x40
   1208c:	bl	12eb0 <mmk_strchr@@Base>
   12090:	mov	r5, r0
   12094:	cmp	r0, #0
   12098:	beq	120a4 <mmk_mock_create_internal@@Base+0x5c>
   1209c:	sub	r6, r5, r9
   120a0:	b	120b0 <mmk_mock_create_internal@@Base+0x68>
   120a4:	mov	r0, r9
   120a8:	bl	12f48 <mmk_strlen@@Base>
   120ac:	mov	r6, r0
   120b0:	add	r0, r6, #1
   120b4:	bl	12fac <mmk_malloc@@Base>
   120b8:	mov	r1, r9
   120bc:	mov	r2, r6
   120c0:	mov	r7, r0
   120c4:	bl	12f0c <mmk_strncpy@@Base>
   120c8:	mov	r0, #0
   120cc:	cmp	r5, #0
   120d0:	strb	r0, [r7, r6]
   120d4:	beq	120fc <mmk_mock_create_internal@@Base+0xb4>
   120d8:	movw	r1, #13231	; 0x33af
   120dc:	add	r0, r5, #1
   120e0:	mov	r2, #4
   120e4:	movt	r1, #1
   120e8:	bl	12e4c <mmk_strneq@@Base>
   120ec:	mov	r5, r0
   120f0:	cmp	r0, #0
   120f4:	movwne	r5, #1
   120f8:	b	12100 <mmk_mock_create_internal@@Base+0xb8>
   120fc:	mov	r5, #1
   12100:	mov	r0, r9
   12104:	mov	r1, r8
   12108:	mov	r2, r4
   1210c:	bl	129b0 <mmk_stub_create@@Base>
   12110:	cmp	r0, #0
   12114:	str	r0, [r4, #4]
   12118:	beq	12188 <mmk_mock_create_internal@@Base+0x140>
   1211c:	cmp	r5, #0
   12120:	bne	1213c <mmk_mock_create_internal@@Base+0xf4>
   12124:	mov	r0, r7
   12128:	mov	r1, r8
   1212c:	mov	r2, r4
   12130:	bl	129b0 <mmk_stub_create@@Base>
   12134:	ldr	r1, [r4, #4]
   12138:	str	r0, [r1, #36]	; 0x24
   1213c:	mov	r0, r7
   12140:	bl	12fcc <mmk_free@@Base>
   12144:	ldr	r0, [r4, #4]
   12148:	ldr	r0, [r0, #32]
   1214c:	sub	sp, fp, #24
   12150:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12154:	movw	r0, #16496	; 0x4070
   12158:	movw	r1, #13227	; 0x33ab
   1215c:	movw	r2, #13171	; 0x3373
   12160:	mov	r3, #36	; 0x24
   12164:	movt	r0, #2
   12168:	movt	r1, #1
   1216c:	movt	r2, #1
   12170:	ldr	r0, [r0]
   12174:	str	r1, [sp]
   12178:	movw	r1, #12908	; 0x326c
   1217c:	movt	r1, #1
   12180:	bl	11450 <fprintf@plt>
   12184:	bl	11498 <abort@plt>
   12188:	movw	r0, #16496	; 0x4070
   1218c:	movw	r1, #13236	; 0x33b4
   12190:	mov	r2, r9
   12194:	movt	r0, #2
   12198:	movt	r1, #1
   1219c:	ldr	r0, [r0]
   121a0:	bl	11450 <fprintf@plt>
   121a4:	bl	11498 <abort@plt>

000121a8 <mmk_mock_destroy_internal@@Base>:
   121a8:	push	{r4, r5, r6, r7, fp, lr}
   121ac:	add	fp, sp, #16
   121b0:	mov	r4, r0
   121b4:	ldr	r0, [r0, #4]
   121b8:	cmp	r0, #0
   121bc:	beq	121d4 <mmk_mock_destroy_internal@@Base+0x2c>
   121c0:	ldr	r5, [r0, #36]	; 0x24
   121c4:	bl	12a40 <mmk_stub_destroy@@Base>
   121c8:	cmp	r5, #0
   121cc:	mov	r0, r5
   121d0:	bne	121c0 <mmk_mock_destroy_internal@@Base+0x18>
   121d4:	ldr	r0, [r4, #8]
   121d8:	bl	12fcc <mmk_free@@Base>
   121dc:	ldr	r5, [r4]
   121e0:	cmp	r5, #0
   121e4:	beq	1221c <mmk_mock_destroy_internal@@Base+0x74>
   121e8:	ldm	r5, {r0, r6}
   121ec:	cmp	r0, #0
   121f0:	beq	12208 <mmk_mock_destroy_internal@@Base+0x60>
   121f4:	ldr	r7, [r0, #8]
   121f8:	bl	12fcc <mmk_free@@Base>
   121fc:	cmp	r7, #0
   12200:	mov	r0, r7
   12204:	bne	121f4 <mmk_mock_destroy_internal@@Base+0x4c>
   12208:	mov	r0, r5
   1220c:	bl	12fcc <mmk_free@@Base>
   12210:	cmp	r6, #0
   12214:	mov	r5, r6
   12218:	bne	121e8 <mmk_mock_destroy_internal@@Base+0x40>
   1221c:	mov	r0, r4
   12220:	pop	{r4, r5, r6, r7, fp, lr}
   12224:	b	12fcc <mmk_free@@Base>

00012228 <mmk_mock_params_begin@@Base>:
   12228:	ldr	r1, [r0, #8]
   1222c:	cmp	r1, #0
   12230:	moveq	r0, #0
   12234:	bxeq	lr
   12238:	ldr	r0, [r0, #12]
   1223c:	cmp	r0, #0
   12240:	addne	r0, r1, #4
   12244:	bx	lr

00012248 <mmk_mock_params_next@@Base>:
   12248:	ldr	r2, [r1, #-4]
   1224c:	add	r1, r1, r2
   12250:	ldr	r2, [r0, #8]
   12254:	ldr	r0, [r0, #12]
   12258:	add	r1, r1, #4
   1225c:	add	r0, r2, r0
   12260:	cmp	r1, r0
   12264:	movcs	r1, #0
   12268:	mov	r0, r1
   1226c:	bx	lr

00012270 <mmk_mock_get_params@@Base>:
   12270:	push	{fp, lr}
   12274:	mov	fp, sp
   12278:	bl	12994 <mmk_ctx@@Base>
   1227c:	bl	1280c <mmk_stub_context@@Base>
   12280:	ldr	r0, [r0]
   12284:	pop	{fp, pc}

00012288 <plt_init_ctx@@Base>:
   12288:	movw	r1, #16492	; 0x406c
   1228c:	movt	r1, #2
   12290:	ldr	r0, [r1]
   12294:	cmn	r0, #1
   12298:	movweq	r0, #16500	; 0x4074
   1229c:	movteq	r0, #2
   122a0:	streq	r0, [r1]
   122a4:	bx	lr

000122a8 <plt_get_lib@@Base>:
   122a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ac:	add	fp, sp, #28
   122b0:	sub	sp, sp, #20
   122b4:	movw	sl, #13231	; 0x33af
   122b8:	cmp	r1, #0
   122bc:	mov	r7, r0
   122c0:	mov	r2, #4
   122c4:	movt	sl, #1
   122c8:	movne	sl, r1
   122cc:	movw	r1, #13287	; 0x33e7
   122d0:	movt	r1, #1
   122d4:	mov	r0, sl
   122d8:	bl	1148c <strncmp@plt>
   122dc:	cmp	r0, #0
   122e0:	beq	12348 <plt_get_lib@@Base+0xa0>
   122e4:	movw	r1, #13292	; 0x33ec
   122e8:	mov	r0, sl
   122ec:	mov	r2, #5
   122f0:	movt	r1, #1
   122f4:	bl	1148c <strncmp@plt>
   122f8:	cmp	r0, #0
   122fc:	beq	12350 <plt_get_lib@@Base+0xa8>
   12300:	movw	r1, #13298	; 0x33f2
   12304:	mov	r0, sl
   12308:	mov	r2, #4
   1230c:	movt	r1, #1
   12310:	bl	1148c <strncmp@plt>
   12314:	cmp	r0, #0
   12318:	beq	12358 <plt_get_lib@@Base+0xb0>
   1231c:	movw	r1, #13231	; 0x33af
   12320:	mov	r0, sl
   12324:	movt	r1, #1
   12328:	bl	113cc <strcmp@plt>
   1232c:	cmp	r0, #0
   12330:	bne	124ac <plt_get_lib@@Base+0x204>
   12334:	movw	sl, #13371	; 0x343b
   12338:	mov	r9, #0
   1233c:	movt	sl, #1
   12340:	mov	r8, sl
   12344:	b	1236c <plt_get_lib@@Base+0xc4>
   12348:	mov	r9, #1
   1234c:	b	1235c <plt_get_lib@@Base+0xb4>
   12350:	mov	r9, #2
   12354:	b	1235c <plt_get_lib@@Base+0xb4>
   12358:	mov	r9, #3
   1235c:	mov	r0, sl
   12360:	mov	r1, #58	; 0x3a
   12364:	bl	11444 <strchr@plt>
   12368:	add	r8, r0, #1
   1236c:	mov	r0, r8
   12370:	bl	1142c <strlen@plt>
   12374:	movw	r1, #13460	; 0x3494
   12378:	mov	r4, r0
   1237c:	mov	r0, r8
   12380:	movt	r1, #1
   12384:	bl	113cc <strcmp@plt>
   12388:	ldr	r7, [r7, #4]
   1238c:	mov	r5, r0
   12390:	mov	r0, #0
   12394:	cmp	r7, #0
   12398:	beq	124a4 <plt_get_lib@@Base+0x1fc>
   1239c:	add	r0, r4, #8
   123a0:	orr	r1, r9, #2
   123a4:	str	r0, [fp, #-40]	; 0xffffffd8
   123a8:	add	r0, r0, #7
   123ac:	str	r1, [fp, #-36]	; 0xffffffdc
   123b0:	bic	r0, r0, #7
   123b4:	str	r0, [fp, #-44]	; 0xffffffd4
   123b8:	cmp	r9, #1
   123bc:	bne	12404 <plt_get_lib@@Base+0x15c>
   123c0:	cmp	r5, #0
   123c4:	beq	12448 <plt_get_lib@@Base+0x1a0>
   123c8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   123cc:	mov	r6, sp
   123d0:	sub	r4, sp, r0
   123d4:	mov	sp, r4
   123d8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   123dc:	movw	r2, #13390	; 0x344e
   123e0:	mov	r0, r4
   123e4:	mov	r3, r8
   123e8:	movt	r2, #1
   123ec:	bl	11468 <snprintf@plt>
   123f0:	ldr	r0, [r7, #4]
   123f4:	mov	r1, r4
   123f8:	bl	113c0 <strstr@plt>
   123fc:	mov	sp, r6
   12400:	b	1243c <plt_get_lib@@Base+0x194>
   12404:	ldr	r0, [fp, #-36]	; 0xffffffdc
   12408:	cmp	r0, #2
   1240c:	bne	12428 <plt_get_lib@@Base+0x180>
   12410:	ldr	r1, [r7, #4]
   12414:	mov	r0, sl
   12418:	bl	113cc <strcmp@plt>
   1241c:	cmp	r0, #0
   12420:	bne	1248c <plt_get_lib@@Base+0x1e4>
   12424:	b	124a0 <plt_get_lib@@Base+0x1f8>
   12428:	cmp	r9, #3
   1242c:	bne	1248c <plt_get_lib@@Base+0x1e4>
   12430:	mov	r0, r7
   12434:	mov	r1, r8
   12438:	bl	1250c <plt_get_lib@@Base+0x264>
   1243c:	cmp	r0, #0
   12440:	beq	1248c <plt_get_lib@@Base+0x1e4>
   12444:	b	124a0 <plt_get_lib@@Base+0x1f8>
   12448:	mov	r4, r5
   1244c:	mov	r5, sl
   12450:	ldr	sl, [r7, #4]
   12454:	movw	r1, #13372	; 0x343c
   12458:	movt	r1, #1
   1245c:	mov	r0, sl
   12460:	bl	113c0 <strstr@plt>
   12464:	cmp	r0, #0
   12468:	bne	124a0 <plt_get_lib@@Base+0x1f8>
   1246c:	movw	r1, #13381	; 0x3445
   12470:	mov	r0, sl
   12474:	movt	r1, #1
   12478:	bl	113c0 <strstr@plt>
   1247c:	mov	sl, r5
   12480:	cmp	r0, #0
   12484:	mov	r5, r4
   12488:	bne	124a0 <plt_get_lib@@Base+0x1f8>
   1248c:	ldr	r7, [r7, #12]
   12490:	cmp	r7, #0
   12494:	bne	123b8 <plt_get_lib@@Base+0x110>
   12498:	mov	r0, #0
   1249c:	b	124a4 <plt_get_lib@@Base+0x1fc>
   124a0:	mov	r0, r7
   124a4:	sub	sp, fp, #28
   124a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124ac:	mov	r0, sl
   124b0:	mov	r1, #58	; 0x3a
   124b4:	mov	r4, sl
   124b8:	bl	11444 <strchr@plt>
   124bc:	cmp	r0, #0
   124c0:	bne	124e4 <plt_get_lib@@Base+0x23c>
   124c4:	movw	r0, #16496	; 0x4070
   124c8:	movw	r1, #13337	; 0x3419
   124cc:	mov	r2, r4
   124d0:	movt	r0, #2
   124d4:	movt	r1, #1
   124d8:	ldr	r0, [r0]
   124dc:	bl	11450 <fprintf@plt>
   124e0:	bl	11498 <abort@plt>
   124e4:	rsb	r1, r4, #1
   124e8:	mov	r3, r4
   124ec:	add	r2, r1, r0
   124f0:	movw	r0, #16496	; 0x4070
   124f4:	movw	r1, #13303	; 0x33f7
   124f8:	movt	r0, #2
   124fc:	movt	r1, #1
   12500:	ldr	r0, [r0]
   12504:	bl	11450 <fprintf@plt>
   12508:	bl	11498 <abort@plt>
   1250c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12510:	add	fp, sp, #28
   12514:	sub	sp, sp, #12
   12518:	str	r1, [sp, #8]
   1251c:	ldr	r1, [r0, #8]
   12520:	ldr	ip, [r0]
   12524:	mov	r0, #0
   12528:	ldr	r4, [r1]
   1252c:	cmp	r4, #0
   12530:	beq	12560 <plt_get_lib@@Base+0x2b8>
   12534:	add	r2, r1, #4
   12538:	mov	r3, r4
   1253c:	cmp	r3, #6
   12540:	beq	12578 <plt_get_lib@@Base+0x2d0>
   12544:	ldr	r3, [r2, #4]
   12548:	add	r7, r2, #8
   1254c:	mov	r2, r7
   12550:	cmp	r3, #0
   12554:	bne	1253c <plt_get_lib@@Base+0x294>
   12558:	mov	lr, #0
   1255c:	b	12584 <plt_get_lib@@Base+0x2dc>
   12560:	mov	r6, #0
   12564:	mov	r2, #0
   12568:	mov	lr, #0
   1256c:	mov	r8, #0
   12570:	mov	r3, #0
   12574:	b	12678 <plt_get_lib@@Base+0x3d0>
   12578:	ldr	lr, [r2]
   1257c:	cmp	lr, ip
   12580:	addcc	lr, ip, lr
   12584:	add	r2, r1, #4
   12588:	mov	r3, r4
   1258c:	cmp	r3, #5
   12590:	beq	125b0 <plt_get_lib@@Base+0x308>
   12594:	ldr	r3, [r2, #4]
   12598:	add	r7, r2, #8
   1259c:	mov	r2, r7
   125a0:	cmp	r3, #0
   125a4:	bne	1258c <plt_get_lib@@Base+0x2e4>
   125a8:	mov	r8, #0
   125ac:	b	125bc <plt_get_lib@@Base+0x314>
   125b0:	ldr	r8, [r2]
   125b4:	cmp	r8, ip
   125b8:	addcc	r8, ip, r8
   125bc:	add	r2, r1, #4
   125c0:	mov	r3, r4
   125c4:	cmp	r3, #20
   125c8:	beq	125e8 <plt_get_lib@@Base+0x340>
   125cc:	ldr	r3, [r2, #4]
   125d0:	add	r7, r2, #8
   125d4:	mov	r2, r7
   125d8:	cmp	r3, #0
   125dc:	bne	125c4 <plt_get_lib@@Base+0x31c>
   125e0:	mov	r2, #0
   125e4:	b	125ec <plt_get_lib@@Base+0x344>
   125e8:	ldr	r2, [r2]
   125ec:	add	r3, r1, #4
   125f0:	mov	r7, r4
   125f4:	cmp	r7, #23
   125f8:	beq	12618 <plt_get_lib@@Base+0x370>
   125fc:	ldr	r7, [r3, #4]
   12600:	add	r6, r3, #8
   12604:	mov	r3, r6
   12608:	cmp	r7, #0
   1260c:	bne	125f4 <plt_get_lib@@Base+0x34c>
   12610:	mov	r3, #0
   12614:	b	12624 <plt_get_lib@@Base+0x37c>
   12618:	ldr	r3, [r3]
   1261c:	cmp	r3, ip
   12620:	addcc	r3, ip, r3
   12624:	add	r6, r1, #4
   12628:	mov	r7, r4
   1262c:	cmp	r7, #2
   12630:	beq	12650 <plt_get_lib@@Base+0x3a8>
   12634:	ldr	r7, [r6, #4]
   12638:	add	r5, r6, #8
   1263c:	mov	r6, r5
   12640:	cmp	r7, #0
   12644:	bne	1262c <plt_get_lib@@Base+0x384>
   12648:	mov	r6, #0
   1264c:	b	12654 <plt_get_lib@@Base+0x3ac>
   12650:	ldr	r6, [r6]
   12654:	add	r1, r1, #4
   12658:	add	r5, r2, #2
   1265c:	cmp	r4, r5
   12660:	beq	12680 <plt_get_lib@@Base+0x3d8>
   12664:	ldr	r4, [r1, #4]
   12668:	add	r7, r1, #8
   1266c:	mov	r1, r7
   12670:	cmp	r4, #0
   12674:	bne	1265c <plt_get_lib@@Base+0x3b4>
   12678:	mov	r5, #0
   1267c:	b	12684 <plt_get_lib@@Base+0x3dc>
   12680:	ldr	r5, [r1]
   12684:	cmp	r5, #0
   12688:	cmpne	r6, #0
   1268c:	beq	12720 <plt_get_lib@@Base+0x478>
   12690:	cmp	r3, #0
   12694:	cmpne	r2, #0
   12698:	beq	12720 <plt_get_lib@@Base+0x478>
   1269c:	cmp	lr, #0
   126a0:	cmpne	r8, #0
   126a4:	beq	12720 <plt_get_lib@@Base+0x478>
   126a8:	cmp	r5, r6
   126ac:	str	ip, [sp, #4]
   126b0:	bhi	1271c <plt_get_lib@@Base+0x474>
   126b4:	mov	r4, r8
   126b8:	add	r8, r3, #4
   126bc:	mov	r9, #0
   126c0:	mvn	sl, #-268435441	; 0xf000000f
   126c4:	udiv	r6, r6, r5
   126c8:	ldr	r0, [r8]
   126cc:	ldr	r1, [sp, #8]
   126d0:	mov	r7, lr
   126d4:	and	r0, sl, r0, lsr #4
   126d8:	ldr	r0, [lr, r0]
   126dc:	add	r0, r4, r0
   126e0:	bl	113cc <strcmp@plt>
   126e4:	cmp	r0, #0
   126e8:	beq	12704 <plt_get_lib@@Base+0x45c>
   126ec:	add	r9, r9, #1
   126f0:	add	r8, r8, r5
   126f4:	mov	lr, r7
   126f8:	cmp	r9, r6
   126fc:	bcc	126c8 <plt_get_lib@@Base+0x420>
   12700:	b	1271c <plt_get_lib@@Base+0x474>
   12704:	ldr	r0, [r8, #-4]
   12708:	cmp	r0, #0
   1270c:	beq	1271c <plt_get_lib@@Base+0x474>
   12710:	ldr	r1, [sp, #4]
   12714:	add	r0, r0, r1
   12718:	b	12720 <plt_get_lib@@Base+0x478>
   1271c:	mov	r0, #0
   12720:	sub	sp, fp, #28
   12724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012728 <plt_get_offsets@@Base>:
   12728:	push	{r4, r5, fp, lr}
   1272c:	add	fp, sp, #8
   12730:	mov	r4, r2
   12734:	bl	1250c <plt_get_lib@@Base+0x264>
   12738:	cmp	r0, #0
   1273c:	moveq	r0, #0
   12740:	popeq	{r4, r5, fp, pc}
   12744:	mov	r5, r0
   12748:	mov	r0, #8
   1274c:	bl	12fac <mmk_malloc@@Base>
   12750:	mov	r1, #1
   12754:	str	r1, [r4]
   12758:	mov	r1, #0
   1275c:	str	r5, [r0]
   12760:	str	r1, [r0, #4]
   12764:	pop	{r4, r5, fp, pc}

00012768 <plt_set_offsets@@Base>:
   12768:	cmp	r1, #0
   1276c:	bxeq	lr
   12770:	add	r0, r0, #4
   12774:	ldr	r3, [r0]
   12778:	ldr	ip, [r0, #-4]
   1277c:	cmp	r3, #0
   12780:	ldreq	r3, [ip]
   12784:	streq	r3, [r0]
   12788:	subs	r1, r1, #1
   1278c:	add	r0, r0, #8
   12790:	str	r2, [ip]
   12794:	bne	12774 <plt_set_offsets@@Base+0xc>
   12798:	bx	lr

0001279c <plt_reset_offsets@@Base>:
   1279c:	cmp	r1, #0
   127a0:	bxeq	lr
   127a4:	add	r0, r0, #4
   127a8:	ldmda	r0, {r2, r3}
   127ac:	add	r0, r0, #8
   127b0:	subs	r1, r1, #1
   127b4:	str	r3, [r2]
   127b8:	bne	127a8 <plt_reset_offsets@@Base+0xc>
   127bc:	bx	lr

000127c0 <plt_get_real_fn@@Base>:
   127c0:	push	{r4, r5, r6, sl, fp, lr}
   127c4:	add	fp, sp, #16
   127c8:	ldr	r6, [r0, #4]
   127cc:	mov	r4, #0
   127d0:	cmp	r6, #0
   127d4:	beq	12804 <plt_get_real_fn@@Base+0x44>
   127d8:	mov	r5, r1
   127dc:	mov	r0, r6
   127e0:	mov	r1, r5
   127e4:	bl	1250c <plt_get_lib@@Base+0x264>
   127e8:	cmp	r0, #0
   127ec:	bne	12800 <plt_get_real_fn@@Base+0x40>
   127f0:	ldr	r6, [r6, #12]
   127f4:	cmp	r6, #0
   127f8:	bne	127dc <plt_get_real_fn@@Base+0x1c>
   127fc:	b	12804 <plt_get_real_fn@@Base+0x44>
   12800:	ldr	r4, [r0]
   12804:	mov	r0, r4
   12808:	pop	{r4, r5, r6, sl, fp, pc}

0001280c <mmk_stub_context@@Base>:
   1280c:	cmp	r0, #0
   12810:	ldrne	r0, [r0, #12]
   12814:	moveq	r0, #0
   12818:	bx	lr

0001281c <mmk_stub_create_static@@Base>:
   1281c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12820:	add	fp, sp, #28
   12824:	sub	sp, sp, #4
   12828:	mov	r6, r1
   1282c:	ldr	r1, [pc, #272]	; 12944 <mmk_stub_create_static@@Base+0x128>
   12830:	mov	r9, r3
   12834:	mov	r8, r2
   12838:	mov	r4, r0
   1283c:	mov	r7, #0
   12840:	bl	13240 <__libc_csu_fini@@Base+0x10>
   12844:	str	r7, [r0, r1]
   12848:	ldr	r1, [pc, #248]	; 12948 <mmk_stub_create_static@@Base+0x12c>
   1284c:	strb	r7, [r0, r1]
   12850:	mov	r0, r6
   12854:	bl	12f48 <mmk_strlen@@Base>
   12858:	add	r0, r0, #1
   1285c:	bl	12fac <mmk_malloc@@Base>
   12860:	cmp	r0, #0
   12864:	beq	1292c <mmk_stub_create_static@@Base+0x110>
   12868:	mov	r1, r6
   1286c:	mov	r5, r0
   12870:	bl	12ee0 <mmk_strcpy@@Base>
   12874:	mov	r0, r5
   12878:	mov	r1, #64	; 0x40
   1287c:	bl	12eb0 <mmk_strchr@@Base>
   12880:	cmp	r0, #0
   12884:	movne	r1, #0
   12888:	strbne	r1, [r0], #1
   1288c:	movne	r7, r0
   12890:	bl	11ee4 <mmk_plt_ctx@@Base>
   12894:	mov	r1, r7
   12898:	bl	122a8 <plt_get_lib@@Base>
   1289c:	cmp	r0, #0
   128a0:	beq	12934 <mmk_stub_create_static@@Base+0x118>
   128a4:	mov	r1, #0
   128a8:	mov	r2, sp
   128ac:	str	r1, [sp]
   128b0:	mov	r1, r5
   128b4:	bl	12728 <plt_get_offsets@@Base>
   128b8:	cmp	r0, #0
   128bc:	mvn	r6, #1
   128c0:	movne	sl, r0
   128c4:	ldrne	r0, [sp]
   128c8:	cmpne	r0, #0
   128cc:	beq	12938 <mmk_stub_create_static@@Base+0x11c>
   128d0:	movw	r1, #10612	; 0x2974
   128d4:	movw	r2, #10572	; 0x294c
   128d8:	movw	r3, #10644	; 0x2994
   128dc:	mov	r6, #0
   128e0:	movt	r2, #1
   128e4:	movt	r1, #1
   128e8:	movt	r3, #1
   128ec:	str	r2, [r4]
   128f0:	stmib	r4, {r1, r3, r9}
   128f4:	add	r1, r4, #16
   128f8:	stm	r1, {r5, r7, sl}
   128fc:	str	r0, [r4, #28]
   12900:	mov	r0, r4
   12904:	mov	r1, r8
   12908:	str	r6, [r4, #32]
   1290c:	str	r6, [r4, #36]	; 0x24
   12910:	bl	12a84 <create_trampoline@@Base>
   12914:	str	r0, [r4, #32]
   12918:	mov	r2, r0
   1291c:	mov	r0, sl
   12920:	ldr	r1, [sp]
   12924:	bl	12768 <plt_set_offsets@@Base>
   12928:	b	12938 <mmk_stub_create_static@@Base+0x11c>
   1292c:	mvn	r6, #11
   12930:	b	12938 <mmk_stub_create_static@@Base+0x11c>
   12934:	mvn	r6, #1
   12938:	mov	r0, r6
   1293c:	sub	sp, fp, #28
   12940:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12944:	andeq	r0, r0, r0, lsl r0
   12948:	andeq	r0, r0, ip

0001294c <mmk_ctx_asked@@Base>:
   1294c:	push	{fp, lr}
   12950:	mov	fp, sp
   12954:	ldr	r2, [pc, #20]	; 12970 <mmk_ctx_asked@@Base+0x24>
   12958:	bl	13240 <__libc_csu_fini@@Base+0x10>
   1295c:	ldrb	r1, [r0, r2]
   12960:	mov	r3, #0
   12964:	strb	r3, [r0, r2]
   12968:	mov	r0, r1
   1296c:	pop	{fp, pc}
   12970:	andeq	r0, r0, ip

00012974 <mmk_set_ctx@@Base>:
   12974:	push	{fp, lr}
   12978:	mov	fp, sp
   1297c:	ldr	r2, [pc, #12]	; 12990 <mmk_set_ctx@@Base+0x1c>
   12980:	mov	r1, r0
   12984:	bl	13240 <__libc_csu_fini@@Base+0x10>
   12988:	str	r1, [r0, r2]
   1298c:	pop	{fp, pc}
   12990:	andeq	r0, r0, r0, lsl r0

00012994 <mmk_ctx@@Base>:
   12994:	push	{fp, lr}
   12998:	mov	fp, sp
   1299c:	ldr	r1, [pc, #8]	; 129ac <mmk_ctx@@Base+0x18>
   129a0:	bl	13240 <__libc_csu_fini@@Base+0x10>
   129a4:	ldr	r0, [r0, r1]
   129a8:	pop	{fp, pc}
   129ac:	andeq	r0, r0, r0, lsl r0

000129b0 <mmk_stub_create@@Base>:
   129b0:	push	{r4, r5, r6, r7, fp, lr}
   129b4:	add	fp, sp, #16
   129b8:	mov	r5, r2
   129bc:	mov	r6, r1
   129c0:	mov	r7, r0
   129c4:	bl	11e64 <mmk_init@@Base>
   129c8:	mov	r0, #40	; 0x28
   129cc:	bl	12fac <mmk_malloc@@Base>
   129d0:	mov	r1, r7
   129d4:	mov	r2, r6
   129d8:	mov	r3, r5
   129dc:	mov	r4, r0
   129e0:	bl	1281c <mmk_stub_create_static@@Base>
   129e4:	cmn	r0, #1
   129e8:	bgt	12a04 <mmk_stub_create@@Base+0x54>
   129ec:	mov	r5, r0
   129f0:	mov	r0, r4
   129f4:	bl	12fcc <mmk_free@@Base>
   129f8:	bl	1145c <__errno_location@plt>
   129fc:	mov	r4, #0
   12a00:	str	r5, [r0]
   12a04:	mov	r0, r4
   12a08:	pop	{r4, r5, r6, r7, fp, pc}

00012a0c <mmk_stub_destroy_static@@Base>:
   12a0c:	push	{r4, sl, fp, lr}
   12a10:	add	fp, sp, #8
   12a14:	mov	r4, r0
   12a18:	ldr	r0, [r0, #24]
   12a1c:	ldr	r1, [r4, #28]
   12a20:	bl	1279c <plt_reset_offsets@@Base>
   12a24:	ldr	r0, [r4, #24]
   12a28:	bl	12fcc <mmk_free@@Base>
   12a2c:	ldr	r0, [r4, #32]
   12a30:	bl	12b84 <destroy_trampoline@@Base>
   12a34:	ldr	r0, [r4, #16]
   12a38:	pop	{r4, sl, fp, lr}
   12a3c:	b	12fcc <mmk_free@@Base>

00012a40 <mmk_stub_destroy@@Base>:
   12a40:	push	{r4, sl, fp, lr}
   12a44:	add	fp, sp, #8
   12a48:	mov	r4, r0
   12a4c:	bl	12a0c <mmk_stub_destroy_static@@Base>
   12a50:	mov	r0, r4
   12a54:	pop	{r4, sl, fp, lr}
   12a58:	b	12fcc <mmk_free@@Base>

00012a5c <mmk_ask_ctx@@Base>:
   12a5c:	push	{fp, lr}
   12a60:	mov	fp, sp
   12a64:	ldr	r2, [pc, #20]	; 12a80 <mmk_ask_ctx@@Base+0x24>
   12a68:	mov	r1, r0
   12a6c:	mov	r3, #1
   12a70:	bl	13240 <__libc_csu_fini@@Base+0x10>
   12a74:	strb	r3, [r0, r2]
   12a78:	pop	{fp, lr}
   12a7c:	bx	r1
   12a80:	andeq	r0, r0, ip

00012a84 <create_trampoline@@Base>:
   12a84:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   12a88:	add	fp, sp, #24
   12a8c:	sub	sp, sp, #8
   12a90:	movw	r8, #12656	; 0x3170
   12a94:	mov	r7, r0
   12a98:	movw	r0, #12748	; 0x31cc
   12a9c:	movt	r8, #1
   12aa0:	movt	r0, #1
   12aa4:	sub	r5, r0, r8
   12aa8:	cmp	r5, #4096	; 0x1000
   12aac:	bcs	12b1c <create_trampoline@@Base+0x98>
   12ab0:	mov	r6, r1
   12ab4:	mov	r0, #0
   12ab8:	mvn	r1, #0
   12abc:	mov	r2, #7
   12ac0:	mov	r3, #34	; 0x22
   12ac4:	str	r1, [sp]
   12ac8:	str	r0, [sp, #4]
   12acc:	mov	r0, #0
   12ad0:	mov	r1, #4096	; 0x1000
   12ad4:	bl	11438 <mmap@plt>
   12ad8:	cmn	r0, #1
   12adc:	beq	12b50 <create_trampoline@@Base+0xcc>
   12ae0:	str	r7, [r0]
   12ae4:	str	r6, [r0, #4]
   12ae8:	add	r6, r0, #8
   12aec:	mov	r4, r0
   12af0:	mov	r1, r8
   12af4:	mov	r2, r5
   12af8:	mov	r0, r6
   12afc:	bl	113f0 <memcpy@plt>
   12b00:	mov	r0, r4
   12b04:	mov	r1, #4096	; 0x1000
   12b08:	mov	r2, #5
   12b0c:	bl	113d8 <mprotect@plt>
   12b10:	mov	r0, r6
   12b14:	sub	sp, fp, #24
   12b18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   12b1c:	movw	r0, #16496	; 0x4070
   12b20:	movw	r1, #13462	; 0x3496
   12b24:	movw	r2, #13400	; 0x3458
   12b28:	mov	r3, #45	; 0x2d
   12b2c:	movt	r0, #2
   12b30:	movt	r1, #1
   12b34:	movt	r2, #1
   12b38:	ldr	r0, [r0]
   12b3c:	str	r1, [sp]
   12b40:	movw	r1, #12908	; 0x326c
   12b44:	movt	r1, #1
   12b48:	bl	11450 <fprintf@plt>
   12b4c:	bl	11498 <abort@plt>
   12b50:	movw	r0, #16496	; 0x4070
   12b54:	movw	r1, #13488	; 0x34b0
   12b58:	movw	r2, #13400	; 0x3458
   12b5c:	mov	r3, #69	; 0x45
   12b60:	movt	r0, #2
   12b64:	movt	r1, #1
   12b68:	movt	r2, #1
   12b6c:	ldr	r0, [r0]
   12b70:	str	r1, [sp]
   12b74:	movw	r1, #12908	; 0x326c
   12b78:	movt	r1, #1
   12b7c:	bl	11450 <fprintf@plt>
   12b80:	bl	11498 <abort@plt>

00012b84 <destroy_trampoline@@Base>:
   12b84:	sub	r0, r0, #8
   12b88:	mov	r1, #4096	; 0x1000
   12b8c:	b	11474 <munmap@plt>

00012b90 <mmk_verify_set_times@@Base>:
   12b90:	push	{fp, lr}
   12b94:	mov	fp, sp
   12b98:	ldr	r2, [pc, #12]	; 12bac <mmk_verify_set_times@@Base+0x1c>
   12b9c:	mov	r1, r0
   12ba0:	bl	13240 <__libc_csu_fini@@Base+0x10>
   12ba4:	str	r1, [r0, r2]
   12ba8:	pop	{fp, pc}
   12bac:	andeq	r0, r0, r4, lsl r0

00012bb0 <mmk_verify_times@@Base>:
   12bb0:	push	{fp, lr}
   12bb4:	mov	fp, sp
   12bb8:	ldr	r2, [pc, #120]	; 12c38 <mmk_verify_times@@Base+0x88>
   12bbc:	mov	r1, r0
   12bc0:	bl	13240 <__libc_csu_fini@@Base+0x10>
   12bc4:	ldr	r0, [r0, r2]
   12bc8:	ldr	r2, [r1, #4]
   12bcc:	cmp	r2, #0
   12bd0:	beq	12be0 <mmk_verify_times@@Base+0x30>
   12bd4:	clz	r0, r0
   12bd8:	lsr	r0, r0, #5
   12bdc:	pop	{fp, pc}
   12be0:	ldr	ip, [r1, #8]
   12be4:	ldr	r2, [r1, #12]
   12be8:	orrs	r3, ip, r2
   12bec:	beq	12c18 <mmk_verify_times@@Base+0x68>
   12bf0:	cmp	r0, ip
   12bf4:	mov	r3, #0
   12bf8:	mov	r1, #0
   12bfc:	movwcs	r3, #1
   12c00:	cmp	r2, #0
   12c04:	moveq	r2, r0
   12c08:	cmp	r0, r2
   12c0c:	movwls	r1, #1
   12c10:	and	r0, r3, r1
   12c14:	pop	{fp, pc}
   12c18:	ldr	r2, [r1, #20]
   12c1c:	cmp	r2, #0
   12c20:	beq	12c2c <mmk_verify_times@@Base+0x7c>
   12c24:	pop	{fp, lr}
   12c28:	bx	r2
   12c2c:	ldr	r1, [r1, #16]
   12c30:	sub	r0, r1, r0
   12c34:	b	12bd4 <mmk_verify_times@@Base+0x24>
   12c38:	andeq	r0, r0, r4, lsl r0

00012c3c <mmk_verify_register_call@@Base>:
   12c3c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   12c40:	add	fp, sp, #24
   12c44:	sub	sp, sp, #8
   12c48:	mov	r9, r1
   12c4c:	mov	r8, r0
   12c50:	str	r1, [sp, #4]
   12c54:	bl	12994 <mmk_ctx@@Base>
   12c58:	bl	1280c <mmk_stub_context@@Base>
   12c5c:	mov	r5, r0
   12c60:	ldr	r0, [r0, #8]
   12c64:	cmp	r0, #0
   12c68:	bne	12c88 <mmk_verify_register_call@@Base+0x4c>
   12c6c:	mov	r0, #4096	; 0x1000
   12c70:	mov	r4, #4096	; 0x1000
   12c74:	bl	12fac <mmk_malloc@@Base>
   12c78:	cmp	r0, #0
   12c7c:	str	r0, [r5, #8]
   12c80:	beq	12d7c <mmk_verify_register_call@@Base+0x140>
   12c84:	str	r4, [r5, #16]
   12c88:	mov	r0, r5
   12c8c:	bl	12228 <mmk_mock_params_begin@@Base>
   12c90:	cmp	r0, #0
   12c94:	beq	12cd4 <mmk_verify_register_call@@Base+0x98>
   12c98:	mov	r6, r0
   12c9c:	sub	r4, r9, #4
   12ca0:	add	r7, r8, #4
   12ca4:	add	r0, r6, #4
   12ca8:	mov	r1, r7
   12cac:	mov	r2, r4
   12cb0:	bl	12de4 <mmk_memcmp@@Base>
   12cb4:	cmp	r0, #0
   12cb8:	beq	12d64 <mmk_verify_register_call@@Base+0x128>
   12cbc:	mov	r0, r5
   12cc0:	mov	r1, r6
   12cc4:	bl	12248 <mmk_mock_params_next@@Base>
   12cc8:	mov	r6, r0
   12ccc:	cmp	r0, #0
   12cd0:	bne	12ca4 <mmk_verify_register_call@@Base+0x68>
   12cd4:	mov	r6, r5
   12cd8:	ldr	r2, [r6, #12]!
   12cdc:	ldr	r1, [r6, #4]
   12ce0:	add	r0, r2, r9
   12ce4:	add	r0, r0, #4
   12ce8:	cmp	r0, r1
   12cec:	bcs	12cf8 <mmk_verify_register_call@@Base+0xbc>
   12cf0:	ldr	r0, [r5, #8]
   12cf4:	b	12d20 <mmk_verify_register_call@@Base+0xe4>
   12cf8:	add	r1, r1, #4096	; 0x1000
   12cfc:	cmp	r0, r1
   12d00:	bcs	12cf8 <mmk_verify_register_call@@Base+0xbc>
   12d04:	str	r1, [r5, #16]
   12d08:	ldr	r0, [r5, #8]
   12d0c:	bl	12fbc <mmk_realloc@@Base>
   12d10:	cmp	r0, #0
   12d14:	str	r0, [r5, #8]
   12d18:	beq	12db0 <mmk_verify_register_call@@Base+0x174>
   12d1c:	ldr	r2, [r6]
   12d20:	add	r0, r0, r2
   12d24:	add	r1, sp, #4
   12d28:	mov	r2, #4
   12d2c:	bl	12e2c <mmk_memcpy@@Base>
   12d30:	ldr	r0, [r5, #8]
   12d34:	ldr	r1, [r5, #12]
   12d38:	ldr	r2, [sp, #4]
   12d3c:	add	r0, r0, r1
   12d40:	mov	r1, r8
   12d44:	add	r0, r0, #4
   12d48:	bl	12e2c <mmk_memcpy@@Base>
   12d4c:	mov	r1, #1
   12d50:	str	r1, [r0]
   12d54:	ldr	r1, [sp, #4]
   12d58:	ldr	r0, [r5, #12]
   12d5c:	add	r1, r1, #4
   12d60:	b	12d6c <mmk_verify_register_call@@Base+0x130>
   12d64:	ldr	r1, [r6]
   12d68:	mov	r0, #1
   12d6c:	add	r0, r1, r0
   12d70:	str	r0, [r6]
   12d74:	sub	sp, fp, #24
   12d78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   12d7c:	movw	r0, #16496	; 0x4070
   12d80:	movw	r1, #13564	; 0x34fc
   12d84:	movw	r2, #13506	; 0x34c2
   12d88:	mov	r3, #79	; 0x4f
   12d8c:	movt	r0, #2
   12d90:	movt	r1, #1
   12d94:	movt	r2, #1
   12d98:	ldr	r0, [r0]
   12d9c:	str	r1, [sp]
   12da0:	movw	r1, #12908	; 0x326c
   12da4:	movt	r1, #1
   12da8:	bl	11450 <fprintf@plt>
   12dac:	bl	11498 <abort@plt>
   12db0:	movw	r0, #16496	; 0x4070
   12db4:	movw	r1, #13564	; 0x34fc
   12db8:	movw	r2, #13506	; 0x34c2
   12dbc:	mov	r3, #91	; 0x5b
   12dc0:	movt	r0, #2
   12dc4:	movt	r1, #1
   12dc8:	movt	r2, #1
   12dcc:	ldr	r0, [r0]
   12dd0:	str	r1, [sp]
   12dd4:	movw	r1, #12908	; 0x326c
   12dd8:	movt	r1, #1
   12ddc:	bl	11450 <fprintf@plt>
   12de0:	bl	11498 <abort@plt>

00012de4 <mmk_memcmp@@Base>:
   12de4:	push	{fp, lr}
   12de8:	mov	fp, sp
   12dec:	mov	lr, r0
   12df0:	mov	r0, #0
   12df4:	cmp	r2, #0
   12df8:	popeq	{fp, pc}
   12dfc:	ldrb	ip, [r1]
   12e00:	ldrb	r3, [lr]
   12e04:	cmp	r3, ip
   12e08:	bne	12e20 <mmk_memcmp@@Base+0x3c>
   12e0c:	subs	r2, r2, #1
   12e10:	add	r1, r1, #1
   12e14:	add	lr, lr, #1
   12e18:	bne	12dfc <mmk_memcmp@@Base+0x18>
   12e1c:	pop	{fp, pc}
   12e20:	mov	r0, #1
   12e24:	mvncc	r0, #0
   12e28:	pop	{fp, pc}

00012e2c <mmk_memcpy@@Base>:
   12e2c:	cmp	r2, #0
   12e30:	bxeq	lr
   12e34:	mov	ip, r0
   12e38:	ldrb	r3, [r1], #1
   12e3c:	subs	r2, r2, #1
   12e40:	strb	r3, [ip], #1
   12e44:	bne	12e38 <mmk_memcpy@@Base+0xc>
   12e48:	bx	lr

00012e4c <mmk_strneq@@Base>:
   12e4c:	push	{fp, lr}
   12e50:	mov	fp, sp
   12e54:	ldrb	ip, [r0]
   12e58:	cmp	ip, #0
   12e5c:	beq	12e98 <mmk_strneq@@Base+0x4c>
   12e60:	add	lr, r0, #1
   12e64:	cmp	r2, #0
   12e68:	ldrbne	r3, [r1]
   12e6c:	cmpne	r3, #0
   12e70:	beq	12e98 <mmk_strneq@@Base+0x4c>
   12e74:	uxtb	r0, ip
   12e78:	cmp	r0, r3
   12e7c:	movne	r0, #0
   12e80:	popne	{fp, pc}
   12e84:	ldrb	ip, [lr], #1
   12e88:	sub	r2, r2, #1
   12e8c:	add	r1, r1, #1
   12e90:	cmp	ip, #0
   12e94:	bne	12e64 <mmk_strneq@@Base+0x18>
   12e98:	cmp	r2, #0
   12e9c:	moveq	r0, #1
   12ea0:	ldrbne	r0, [r1]
   12ea4:	clzne	r0, r0
   12ea8:	lsrne	r0, r0, #5
   12eac:	pop	{fp, pc}

00012eb0 <mmk_strchr@@Base>:
   12eb0:	ldrb	r3, [r0]
   12eb4:	mov	r2, r0
   12eb8:	mov	r0, #0
   12ebc:	b	12ec4 <mmk_strchr@@Base+0x14>
   12ec0:	ldrb	r3, [r2, #1]!
   12ec4:	cmp	r3, #0
   12ec8:	bxeq	lr
   12ecc:	uxtb	r3, r3
   12ed0:	cmp	r3, r1
   12ed4:	bne	12ec0 <mmk_strchr@@Base+0x10>
   12ed8:	mov	r0, r2
   12edc:	bx	lr

00012ee0 <mmk_strcpy@@Base>:
   12ee0:	ldrb	r2, [r1]
   12ee4:	cmp	r2, #0
   12ee8:	beq	12f00 <mmk_strcpy@@Base+0x20>
   12eec:	add	r1, r1, #1
   12ef0:	strb	r2, [r0], #1
   12ef4:	ldrb	r2, [r1], #1
   12ef8:	cmp	r2, #0
   12efc:	bne	12ef0 <mmk_strcpy@@Base+0x10>
   12f00:	mov	r1, #0
   12f04:	strb	r1, [r0]
   12f08:	bx	lr

00012f0c <mmk_strncpy@@Base>:
   12f0c:	cmp	r2, #0
   12f10:	ldrbne	r3, [r1]
   12f14:	cmpne	r3, #0
   12f18:	beq	12f3c <mmk_strncpy@@Base+0x30>
   12f1c:	add	r1, r1, #1
   12f20:	rsb	r2, r2, #1
   12f24:	cmp	r2, #0
   12f28:	strb	r3, [r0], #1
   12f2c:	ldrbne	r3, [r1], #1
   12f30:	addne	r2, r2, #1
   12f34:	cmpne	r3, #0
   12f38:	bne	12f24 <mmk_strncpy@@Base+0x18>
   12f3c:	mov	r1, #0
   12f40:	strb	r1, [r0]
   12f44:	bx	lr

00012f48 <mmk_strlen@@Base>:
   12f48:	ldrb	r1, [r0]
   12f4c:	cmp	r1, #0
   12f50:	moveq	r0, #0
   12f54:	bxeq	lr
   12f58:	add	r1, r0, #1
   12f5c:	mov	r0, #0
   12f60:	ldrb	r2, [r1, r0]
   12f64:	add	r0, r0, #1
   12f68:	cmp	r2, #0
   12f6c:	bne	12f60 <mmk_strlen@@Base+0x18>
   12f70:	bx	lr

00012f74 <mmk_isspace@@Base>:
   12f74:	sub	r2, r0, #9
   12f78:	cmp	r2, #23
   12f7c:	bhi	12f98 <mmk_isspace@@Base+0x24>
   12f80:	movw	r3, #17
   12f84:	mov	ip, #1
   12f88:	mov	r1, #1
   12f8c:	movt	r3, #128	; 0x80
   12f90:	tst	r3, ip, lsl r2
   12f94:	bne	12fa4 <mmk_isspace@@Base+0x30>
   12f98:	sub	r0, r0, #10
   12f9c:	clz	r0, r0
   12fa0:	lsr	r1, r0, #5
   12fa4:	mov	r0, r1
   12fa8:	bx	lr

00012fac <mmk_malloc@@Base>:
   12fac:	movw	r1, #16544	; 0x40a0
   12fb0:	movt	r1, #2
   12fb4:	ldr	r1, [r1]
   12fb8:	bx	r1

00012fbc <mmk_realloc@@Base>:
   12fbc:	movw	r2, #16536	; 0x4098
   12fc0:	movt	r2, #2
   12fc4:	ldr	r2, [r2]
   12fc8:	bx	r2

00012fcc <mmk_free@@Base>:
   12fcc:	movw	r1, #16540	; 0x409c
   12fd0:	movt	r1, #2
   12fd4:	ldr	r1, [r1]
   12fd8:	bx	r1

00012fdc <mmk_init_vital_functions@@Base>:
   12fdc:	push	{r4, sl, fp, lr}
   12fe0:	add	fp, sp, #8
   12fe4:	sub	sp, sp, #8
   12fe8:	mov	r4, r0
   12fec:	mov	r0, #0
   12ff0:	bl	11408 <malloc@plt>
   12ff4:	mov	r1, #0
   12ff8:	bl	113fc <realloc@plt>
   12ffc:	bl	113e4 <free@plt>
   13000:	movw	r1, #13580	; 0x350c
   13004:	mov	r0, r4
   13008:	movt	r1, #1
   1300c:	bl	127c0 <plt_get_real_fn@@Base>
   13010:	movw	r1, #16544	; 0x40a0
   13014:	cmp	r0, #0
   13018:	movt	r1, #2
   1301c:	str	r0, [r1]
   13020:	beq	130a4 <mmk_init_vital_functions@@Base+0xc8>
   13024:	movw	r1, #13699	; 0x3583
   13028:	mov	r0, r4
   1302c:	movt	r1, #1
   13030:	bl	127c0 <plt_get_real_fn@@Base>
   13034:	movw	r1, #16536	; 0x4098
   13038:	cmp	r0, #0
   1303c:	movt	r1, #2
   13040:	str	r0, [r1]
   13044:	beq	130d8 <mmk_init_vital_functions@@Base+0xfc>
   13048:	movw	r1, #13763	; 0x35c3
   1304c:	mov	r0, r4
   13050:	movt	r1, #1
   13054:	bl	127c0 <plt_get_real_fn@@Base>
   13058:	movw	r1, #16540	; 0x409c
   1305c:	cmp	r0, #0
   13060:	movt	r1, #2
   13064:	str	r0, [r1]
   13068:	subne	sp, fp, #8
   1306c:	popne	{r4, sl, fp, pc}
   13070:	movw	r0, #16496	; 0x4070
   13074:	movw	r1, #13768	; 0x35c8
   13078:	movw	r2, #13587	; 0x3513
   1307c:	mov	r3, #90	; 0x5a
   13080:	movt	r0, #2
   13084:	movt	r1, #1
   13088:	movt	r2, #1
   1308c:	ldr	r0, [r0]
   13090:	str	r1, [sp]
   13094:	movw	r1, #12908	; 0x326c
   13098:	movt	r1, #1
   1309c:	bl	11450 <fprintf@plt>
   130a0:	bl	11498 <abort@plt>
   130a4:	movw	r0, #16496	; 0x4070
   130a8:	movw	r1, #13645	; 0x354d
   130ac:	movw	r2, #13587	; 0x3513
   130b0:	mov	r3, #88	; 0x58
   130b4:	movt	r0, #2
   130b8:	movt	r1, #1
   130bc:	movt	r2, #1
   130c0:	ldr	r0, [r0]
   130c4:	str	r1, [sp]
   130c8:	movw	r1, #12908	; 0x326c
   130cc:	movt	r1, #1
   130d0:	bl	11450 <fprintf@plt>
   130d4:	bl	11498 <abort@plt>
   130d8:	movw	r0, #16496	; 0x4070
   130dc:	movw	r1, #13707	; 0x358b
   130e0:	movw	r2, #13587	; 0x3513
   130e4:	mov	r3, #89	; 0x59
   130e8:	movt	r0, #2
   130ec:	movt	r1, #1
   130f0:	movt	r2, #1
   130f4:	ldr	r0, [r0]
   130f8:	str	r1, [sp]
   130fc:	movw	r1, #12908	; 0x326c
   13100:	movt	r1, #1
   13104:	bl	11450 <fprintf@plt>
   13108:	bl	11498 <abort@plt>

0001310c <mmk_when_init@@Base>:
   1310c:	push	{fp, lr}
   13110:	mov	fp, sp
   13114:	ldr	r2, [pc, #12]	; 13128 <mmk_when_init@@Base+0x1c>
   13118:	mov	r1, r0
   1311c:	bl	13240 <__libc_csu_fini@@Base+0x10>
   13120:	str	r1, [r0, r2]
   13124:	pop	{fp, pc}
   13128:	andeq	r0, r0, r8, lsl r0

0001312c <mmk_when_get_result@@Base>:
   1312c:	push	{fp, lr}
   13130:	mov	fp, sp
   13134:	ldr	r1, [pc, #8]	; 13144 <mmk_when_get_result@@Base+0x18>
   13138:	bl	13240 <__libc_csu_fini@@Base+0x10>
   1313c:	ldr	r0, [r0, r1]
   13140:	pop	{fp, pc}
   13144:	andeq	r0, r0, r8, lsl r0

00013148 <mmk_when_impl@@Base>:
   13148:	push	{r4, r5, fp, lr}
   1314c:	add	fp, sp, #8
   13150:	mov	r4, r1
   13154:	mov	r5, r0
   13158:	bl	11fc0 <mmk_matcher_ctx@@Base>
   1315c:	str	r0, [r4]
   13160:	ldr	r0, [r5]
   13164:	str	r0, [r4, #4]
   13168:	str	r4, [r5]
   1316c:	pop	{r4, r5, fp, pc}

00013170 <mmk_trampoline@@Base>:
   13170:	sub	ip, pc, #8
   13174:	push	{r0, r1, r2, r3}
   13178:	push	{ip, lr}
   1317c:	ldr	r0, [ip, #-8]
   13180:	ldr	ip, [r0, #4]
   13184:	blx	ip
   13188:	pop	{ip, lr}
   1318c:	push	{ip, lr}
   13190:	ldr	ip, [ip, #-8]
   13194:	ldr	ip, [ip]
   13198:	blx	ip
   1319c:	cmp	r0, #0
   131a0:	bne	131b0 <mmk_trampoline@@Base+0x40>
   131a4:	pop	{ip, lr}
   131a8:	pop	{r0, r1, r2, r3}
   131ac:	ldr	pc, [ip, #-4]
   131b0:	pop	{ip, lr}
   131b4:	pop	{r0, r1, r2, r3}
   131b8:	push	{ip, lr}
   131bc:	ldr	ip, [ip, #-8]
   131c0:	ldr	ip, [ip, #8]
   131c4:	blx	ip
   131c8:	pop	{ip, pc}

000131cc <mmk_trampoline_end@@Base>:
   131cc:	nop	{0}

000131d0 <__libc_csu_init@@Base>:
   131d0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   131d4:	mov	r7, r0
   131d8:	ldr	r6, [pc, #72]	; 13228 <__libc_csu_init@@Base+0x58>
   131dc:	ldr	r5, [pc, #72]	; 1322c <__libc_csu_init@@Base+0x5c>
   131e0:	add	r6, pc, r6
   131e4:	add	r5, pc, r5
   131e8:	sub	r6, r6, r5
   131ec:	mov	r8, r1
   131f0:	mov	r9, r2
   131f4:	bl	113a0 <strstr@plt-0x20>
   131f8:	asrs	r6, r6, #2
   131fc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13200:	mov	r4, #0
   13204:	add	r4, r4, #1
   13208:	ldr	r3, [r5], #4
   1320c:	mov	r2, r9
   13210:	mov	r1, r8
   13214:	mov	r0, r7
   13218:	blx	r3
   1321c:	cmp	r6, r4
   13220:	bne	13204 <__libc_csu_init@@Base+0x34>
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13228:	andeq	r0, r1, ip, lsl #26
   1322c:	andeq	r0, r1, r4, lsl #26

00013230 <__libc_csu_fini@@Base>:
   13230:	bx	lr
	...
   13240:	mvn	r0, #61440	; 0xf000
   13244:	sub	pc, r0, #31

Disassembly of section .fini:

00013248 <.fini>:
   13248:	push	{r3, lr}
   1324c:	pop	{r3, pc}
