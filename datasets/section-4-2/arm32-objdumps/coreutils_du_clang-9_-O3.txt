
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

000119a4 <.init>:
   119a4:	push	{r3, lr}
   119a8:	bl	11f1c <__assert_fail@plt+0x54>
   119ac:	pop	{r3, pc}

Disassembly of section .plt:

000119b0 <pthread_mutex_unlock@plt-0x14>:
   119b0:	push	{lr}		; (str lr, [sp, #-4]!)
   119b4:	ldr	lr, [pc, #4]	; 119c0 <pthread_mutex_unlock@plt-0x4>
   119b8:	add	lr, pc, lr
   119bc:	ldr	pc, [lr, #8]!
   119c0:	andeq	fp, r3, r0, asr #12

000119c4 <pthread_mutex_unlock@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #241664	; 0x3b000
   119cc:	ldr	pc, [ip, #1600]!	; 0x640

000119d0 <fstatfs64@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #241664	; 0x3b000
   119d8:	ldr	pc, [ip, #1592]!	; 0x638

000119dc <calloc@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #241664	; 0x3b000
   119e4:	ldr	pc, [ip, #1584]!	; 0x630

000119e8 <fputs_unlocked@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #241664	; 0x3b000
   119f0:	ldr	pc, [ip, #1576]!	; 0x628

000119f4 <wctype@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #241664	; 0x3b000
   119fc:	ldr	pc, [ip, #1568]!	; 0x620

00011a00 <raise@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #241664	; 0x3b000
   11a08:	ldr	pc, [ip, #1560]!	; 0x618

00011a0c <wcrtomb@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #241664	; 0x3b000
   11a14:	ldr	pc, [ip, #1552]!	; 0x610

00011a18 <gmtime_r@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #241664	; 0x3b000
   11a20:	ldr	pc, [ip, #1544]!	; 0x608

00011a24 <__getdelim@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #241664	; 0x3b000
   11a2c:	ldr	pc, [ip, #1536]!	; 0x600

00011a30 <iswctype@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #241664	; 0x3b000
   11a38:	ldr	pc, [ip, #1528]!	; 0x5f8

00011a3c <strcmp@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #241664	; 0x3b000
   11a44:	ldr	pc, [ip, #1520]!	; 0x5f0

00011a48 <pthread_mutex_destroy@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #241664	; 0x3b000
   11a50:	ldr	pc, [ip, #1512]!	; 0x5e8

00011a54 <mktime@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #241664	; 0x3b000
   11a5c:	ldr	pc, [ip, #1504]!	; 0x5e0

00011a60 <fflush@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #241664	; 0x3b000
   11a68:	ldr	pc, [ip, #1496]!	; 0x5d8

00011a6c <wcwidth@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #241664	; 0x3b000
   11a74:	ldr	pc, [ip, #1488]!	; 0x5d0

00011a78 <memmove@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #241664	; 0x3b000
   11a80:	ldr	pc, [ip, #1480]!	; 0x5c8

00011a84 <free@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #241664	; 0x3b000
   11a8c:	ldr	pc, [ip, #1472]!	; 0x5c0

00011a90 <pthread_mutex_lock@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #241664	; 0x3b000
   11a98:	ldr	pc, [ip, #1464]!	; 0x5b8

00011a9c <ferror@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #241664	; 0x3b000
   11aa4:	ldr	pc, [ip, #1456]!	; 0x5b0

00011aa8 <_exit@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #241664	; 0x3b000
   11ab0:	ldr	pc, [ip, #1448]!	; 0x5a8

00011ab4 <memcpy@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #241664	; 0x3b000
   11abc:	ldr	pc, [ip, #1440]!	; 0x5a0

00011ac0 <pthread_mutex_init@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #241664	; 0x3b000
   11ac8:	ldr	pc, [ip, #1432]!	; 0x598

00011acc <__strtoull_internal@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #241664	; 0x3b000
   11ad4:	ldr	pc, [ip, #1424]!	; 0x590

00011ad8 <towlower@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #241664	; 0x3b000
   11ae0:	ldr	pc, [ip, #1416]!	; 0x588

00011ae4 <mbsinit@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #241664	; 0x3b000
   11aec:	ldr	pc, [ip, #1408]!	; 0x580

00011af0 <memcmp@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #241664	; 0x3b000
   11af8:	ldr	pc, [ip, #1400]!	; 0x578

00011afc <dcgettext@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #241664	; 0x3b000
   11b04:	ldr	pc, [ip, #1392]!	; 0x570

00011b08 <dup2@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #241664	; 0x3b000
   11b10:	ldr	pc, [ip, #1384]!	; 0x568

00011b14 <realloc@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #241664	; 0x3b000
   11b1c:	ldr	pc, [ip, #1376]!	; 0x560

00011b20 <localtime_r@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #241664	; 0x3b000
   11b28:	ldr	pc, [ip, #1368]!	; 0x558

00011b2c <textdomain@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #241664	; 0x3b000
   11b34:	ldr	pc, [ip, #1360]!	; 0x550

00011b38 <iswcntrl@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #241664	; 0x3b000
   11b40:	ldr	pc, [ip, #1352]!	; 0x548

00011b44 <__fxstatat64@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #241664	; 0x3b000
   11b4c:	ldr	pc, [ip, #1344]!	; 0x540

00011b50 <fflush_unlocked@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #241664	; 0x3b000
   11b58:	ldr	pc, [ip, #1336]!	; 0x538

00011b5c <iswprint@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #241664	; 0x3b000
   11b64:	ldr	pc, [ip, #1328]!	; 0x530

00011b68 <tzset@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #241664	; 0x3b000
   11b70:	ldr	pc, [ip, #1320]!	; 0x528

00011b74 <__fxstat64@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #241664	; 0x3b000
   11b7c:	ldr	pc, [ip, #1312]!	; 0x520

00011b80 <fwrite@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #241664	; 0x3b000
   11b88:	ldr	pc, [ip, #1304]!	; 0x518

00011b8c <lseek64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #241664	; 0x3b000
   11b94:	ldr	pc, [ip, #1296]!	; 0x510

00011b98 <__ctype_get_mb_cur_max@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #241664	; 0x3b000
   11ba0:	ldr	pc, [ip, #1288]!	; 0x508

00011ba4 <hasmntopt@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #241664	; 0x3b000
   11bac:	ldr	pc, [ip, #1280]!	; 0x500

00011bb0 <strcpy@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #241664	; 0x3b000
   11bb8:	ldr	pc, [ip, #1272]!	; 0x4f8

00011bbc <__fpending@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #241664	; 0x3b000
   11bc4:	ldr	pc, [ip, #1264]!	; 0x4f0

00011bc8 <mbrtowc@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #241664	; 0x3b000
   11bd0:	ldr	pc, [ip, #1256]!	; 0x4e8

00011bd4 <error@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #241664	; 0x3b000
   11bdc:	ldr	pc, [ip, #1248]!	; 0x4e0

00011be0 <getmntent@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #241664	; 0x3b000
   11be8:	ldr	pc, [ip, #1240]!	; 0x4d8

00011bec <fnmatch@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #241664	; 0x3b000
   11bf4:	ldr	pc, [ip, #1232]!	; 0x4d0

00011bf8 <open64@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #241664	; 0x3b000
   11c00:	ldr	pc, [ip, #1224]!	; 0x4c8

00011c04 <getenv@plt>:
   11c04:	add	ip, pc, #0, 12
   11c08:	add	ip, ip, #241664	; 0x3b000
   11c0c:	ldr	pc, [ip, #1216]!	; 0x4c0

00011c10 <malloc@plt>:
   11c10:	add	ip, pc, #0, 12
   11c14:	add	ip, ip, #241664	; 0x3b000
   11c18:	ldr	pc, [ip, #1208]!	; 0x4b8

00011c1c <__libc_start_main@plt>:
   11c1c:	add	ip, pc, #0, 12
   11c20:	add	ip, ip, #241664	; 0x3b000
   11c24:	ldr	pc, [ip, #1200]!	; 0x4b0

00011c28 <strftime@plt>:
   11c28:	add	ip, pc, #0, 12
   11c2c:	add	ip, ip, #241664	; 0x3b000
   11c30:	ldr	pc, [ip, #1192]!	; 0x4a8

00011c34 <__freading@plt>:
   11c34:	add	ip, pc, #0, 12
   11c38:	add	ip, ip, #241664	; 0x3b000
   11c3c:	ldr	pc, [ip, #1184]!	; 0x4a0

00011c40 <__ctype_tolower_loc@plt>:
   11c40:	add	ip, pc, #0, 12
   11c44:	add	ip, ip, #241664	; 0x3b000
   11c48:	ldr	pc, [ip, #1176]!	; 0x498

00011c4c <__ctype_toupper_loc@plt>:
   11c4c:	add	ip, pc, #0, 12
   11c50:	add	ip, ip, #241664	; 0x3b000
   11c54:	ldr	pc, [ip, #1168]!	; 0x490

00011c58 <__gmon_start__@plt>:
   11c58:	add	ip, pc, #0, 12
   11c5c:	add	ip, ip, #241664	; 0x3b000
   11c60:	ldr	pc, [ip, #1160]!	; 0x488

00011c64 <freopen64@plt>:
   11c64:	add	ip, pc, #0, 12
   11c68:	add	ip, ip, #241664	; 0x3b000
   11c6c:	ldr	pc, [ip, #1152]!	; 0x480

00011c70 <getopt_long@plt>:
   11c70:	add	ip, pc, #0, 12
   11c74:	add	ip, ip, #241664	; 0x3b000
   11c78:	ldr	pc, [ip, #1144]!	; 0x478

00011c7c <__ctype_b_loc@plt>:
   11c7c:	add	ip, pc, #0, 12
   11c80:	add	ip, ip, #241664	; 0x3b000
   11c84:	ldr	pc, [ip, #1136]!	; 0x470

00011c88 <exit@plt>:
   11c88:	add	ip, pc, #0, 12
   11c8c:	add	ip, ip, #241664	; 0x3b000
   11c90:	ldr	pc, [ip, #1128]!	; 0x468

00011c94 <feof@plt>:
   11c94:	add	ip, pc, #0, 12
   11c98:	add	ip, ip, #241664	; 0x3b000
   11c9c:	ldr	pc, [ip, #1120]!	; 0x460

00011ca0 <bcmp@plt>:
   11ca0:	add	ip, pc, #0, 12
   11ca4:	add	ip, ip, #241664	; 0x3b000
   11ca8:	ldr	pc, [ip, #1112]!	; 0x458

00011cac <strlen@plt>:
   11cac:	add	ip, pc, #0, 12
   11cb0:	add	ip, ip, #241664	; 0x3b000
   11cb4:	ldr	pc, [ip, #1104]!	; 0x450

00011cb8 <strchr@plt>:
   11cb8:	add	ip, pc, #0, 12
   11cbc:	add	ip, ip, #241664	; 0x3b000
   11cc0:	ldr	pc, [ip, #1096]!	; 0x448

00011cc4 <setenv@plt>:
   11cc4:	add	ip, pc, #0, 12
   11cc8:	add	ip, ip, #241664	; 0x3b000
   11ccc:	ldr	pc, [ip, #1088]!	; 0x440

00011cd0 <openat64@plt>:
   11cd0:	add	ip, pc, #0, 12
   11cd4:	add	ip, ip, #241664	; 0x3b000
   11cd8:	ldr	pc, [ip, #1080]!	; 0x438

00011cdc <__errno_location@plt>:
   11cdc:	add	ip, pc, #0, 12
   11ce0:	add	ip, ip, #241664	; 0x3b000
   11ce4:	ldr	pc, [ip, #1072]!	; 0x430

00011ce8 <iswalnum@plt>:
   11ce8:	add	ip, pc, #0, 12
   11cec:	add	ip, ip, #241664	; 0x3b000
   11cf0:	ldr	pc, [ip, #1064]!	; 0x428

00011cf4 <__sprintf_chk@plt>:
   11cf4:	add	ip, pc, #0, 12
   11cf8:	add	ip, ip, #241664	; 0x3b000
   11cfc:	ldr	pc, [ip, #1056]!	; 0x420

00011d00 <__cxa_atexit@plt>:
   11d00:	add	ip, pc, #0, 12
   11d04:	add	ip, ip, #241664	; 0x3b000
   11d08:	ldr	pc, [ip, #1048]!	; 0x418

00011d0c <memset@plt>:
   11d0c:	add	ip, pc, #0, 12
   11d10:	add	ip, ip, #241664	; 0x3b000
   11d14:	ldr	pc, [ip, #1040]!	; 0x410

00011d18 <btowc@plt>:
   11d18:	add	ip, pc, #0, 12
   11d1c:	add	ip, ip, #241664	; 0x3b000
   11d20:	ldr	pc, [ip, #1032]!	; 0x408

00011d24 <__printf_chk@plt>:
   11d24:	add	ip, pc, #0, 12
   11d28:	add	ip, ip, #241664	; 0x3b000
   11d2c:	ldr	pc, [ip, #1024]!	; 0x400

00011d30 <fileno@plt>:
   11d30:	add	ip, pc, #0, 12
   11d34:	add	ip, ip, #241664	; 0x3b000
   11d38:	ldr	pc, [ip, #1016]!	; 0x3f8

00011d3c <__fprintf_chk@plt>:
   11d3c:	add	ip, pc, #0, 12
   11d40:	add	ip, ip, #241664	; 0x3b000
   11d44:	ldr	pc, [ip, #1008]!	; 0x3f0

00011d48 <memchr@plt>:
   11d48:	add	ip, pc, #0, 12
   11d4c:	add	ip, ip, #241664	; 0x3b000
   11d50:	ldr	pc, [ip, #1000]!	; 0x3e8

00011d54 <fclose@plt>:
   11d54:	add	ip, pc, #0, 12
   11d58:	add	ip, ip, #241664	; 0x3b000
   11d5c:	ldr	pc, [ip, #992]!	; 0x3e0

00011d60 <fseeko64@plt>:
   11d60:	add	ip, pc, #0, 12
   11d64:	add	ip, ip, #241664	; 0x3b000
   11d68:	ldr	pc, [ip, #984]!	; 0x3d8

00011d6c <endmntent@plt>:
   11d6c:	add	ip, pc, #0, 12
   11d70:	add	ip, ip, #241664	; 0x3b000
   11d74:	ldr	pc, [ip, #976]!	; 0x3d0

00011d78 <fcntl64@plt>:
   11d78:	add	ip, pc, #0, 12
   11d7c:	add	ip, ip, #241664	; 0x3b000
   11d80:	ldr	pc, [ip, #968]!	; 0x3c8

00011d84 <__overflow@plt>:
   11d84:	add	ip, pc, #0, 12
   11d88:	add	ip, ip, #241664	; 0x3b000
   11d8c:	ldr	pc, [ip, #960]!	; 0x3c0

00011d90 <setlocale@plt>:
   11d90:	add	ip, pc, #0, 12
   11d94:	add	ip, ip, #241664	; 0x3b000
   11d98:	ldr	pc, [ip, #952]!	; 0x3b8

00011d9c <strrchr@plt>:
   11d9c:	add	ip, pc, #0, 12
   11da0:	add	ip, ip, #241664	; 0x3b000
   11da4:	ldr	pc, [ip, #944]!	; 0x3b0

00011da8 <nl_langinfo@plt>:
   11da8:	add	ip, pc, #0, 12
   11dac:	add	ip, ip, #241664	; 0x3b000
   11db0:	ldr	pc, [ip, #936]!	; 0x3a8

00011db4 <fputc@plt>:
   11db4:	add	ip, pc, #0, 12
   11db8:	add	ip, ip, #241664	; 0x3b000
   11dbc:	ldr	pc, [ip, #928]!	; 0x3a0

00011dc0 <sscanf@plt>:
   11dc0:	add	ip, pc, #0, 12
   11dc4:	add	ip, ip, #241664	; 0x3b000
   11dc8:	ldr	pc, [ip, #920]!	; 0x398

00011dcc <localeconv@plt>:
   11dcc:	add	ip, pc, #0, 12
   11dd0:	add	ip, ip, #241664	; 0x3b000
   11dd4:	ldr	pc, [ip, #912]!	; 0x390

00011dd8 <readdir64@plt>:
   11dd8:	add	ip, pc, #0, 12
   11ddc:	add	ip, ip, #241664	; 0x3b000
   11de0:	ldr	pc, [ip, #904]!	; 0x388

00011de4 <fdopendir@plt>:
   11de4:	add	ip, pc, #0, 12
   11de8:	add	ip, ip, #241664	; 0x3b000
   11dec:	ldr	pc, [ip, #896]!	; 0x380

00011df0 <timegm@plt>:
   11df0:	add	ip, pc, #0, 12
   11df4:	add	ip, ip, #241664	; 0x3b000
   11df8:	ldr	pc, [ip, #888]!	; 0x378

00011dfc <dirfd@plt>:
   11dfc:	add	ip, pc, #0, 12
   11e00:	add	ip, ip, #241664	; 0x3b000
   11e04:	ldr	pc, [ip, #880]!	; 0x370

00011e08 <fchdir@plt>:
   11e08:	add	ip, pc, #0, 12
   11e0c:	add	ip, ip, #241664	; 0x3b000
   11e10:	ldr	pc, [ip, #872]!	; 0x368

00011e14 <__strtoll_internal@plt>:
   11e14:	add	ip, pc, #0, 12
   11e18:	add	ip, ip, #241664	; 0x3b000
   11e1c:	ldr	pc, [ip, #864]!	; 0x360

00011e20 <fopen64@plt>:
   11e20:	add	ip, pc, #0, 12
   11e24:	add	ip, ip, #241664	; 0x3b000
   11e28:	ldr	pc, [ip, #856]!	; 0x358

00011e2c <qsort@plt>:
   11e2c:	add	ip, pc, #0, 12
   11e30:	add	ip, ip, #241664	; 0x3b000
   11e34:	ldr	pc, [ip, #848]!	; 0x350

00011e38 <setmntent@plt>:
   11e38:	add	ip, pc, #0, 12
   11e3c:	add	ip, ip, #241664	; 0x3b000
   11e40:	ldr	pc, [ip, #840]!	; 0x348

00011e44 <bindtextdomain@plt>:
   11e44:	add	ip, pc, #0, 12
   11e48:	add	ip, ip, #241664	; 0x3b000
   11e4c:	ldr	pc, [ip, #832]!	; 0x340

00011e50 <getdelim@plt>:
   11e50:	add	ip, pc, #0, 12
   11e54:	add	ip, ip, #241664	; 0x3b000
   11e58:	ldr	pc, [ip, #824]!	; 0x338

00011e5c <__xstat64@plt>:
   11e5c:	add	ip, pc, #0, 12
   11e60:	add	ip, ip, #241664	; 0x3b000
   11e64:	ldr	pc, [ip, #816]!	; 0x330

00011e68 <unsetenv@plt>:
   11e68:	add	ip, pc, #0, 12
   11e6c:	add	ip, ip, #241664	; 0x3b000
   11e70:	ldr	pc, [ip, #808]!	; 0x328

00011e74 <towupper@plt>:
   11e74:	add	ip, pc, #0, 12
   11e78:	add	ip, ip, #241664	; 0x3b000
   11e7c:	ldr	pc, [ip, #800]!	; 0x320

00011e80 <strncmp@plt>:
   11e80:	add	ip, pc, #0, 12
   11e84:	add	ip, ip, #241664	; 0x3b000
   11e88:	ldr	pc, [ip, #792]!	; 0x318

00011e8c <abort@plt>:
   11e8c:	add	ip, pc, #0, 12
   11e90:	add	ip, ip, #241664	; 0x3b000
   11e94:	ldr	pc, [ip, #784]!	; 0x310

00011e98 <getc@plt>:
   11e98:	add	ip, pc, #0, 12
   11e9c:	add	ip, ip, #241664	; 0x3b000
   11ea0:	ldr	pc, [ip, #776]!	; 0x308

00011ea4 <close@plt>:
   11ea4:	add	ip, pc, #0, 12
   11ea8:	add	ip, ip, #241664	; 0x3b000
   11eac:	ldr	pc, [ip, #768]!	; 0x300

00011eb0 <__lxstat64@plt>:
   11eb0:	add	ip, pc, #0, 12
   11eb4:	add	ip, ip, #241664	; 0x3b000
   11eb8:	ldr	pc, [ip, #760]!	; 0x2f8

00011ebc <closedir@plt>:
   11ebc:	add	ip, pc, #0, 12
   11ec0:	add	ip, ip, #241664	; 0x3b000
   11ec4:	ldr	pc, [ip, #752]!	; 0x2f0

00011ec8 <__assert_fail@plt>:
   11ec8:	add	ip, pc, #0, 12
   11ecc:	add	ip, ip, #241664	; 0x3b000
   11ed0:	ldr	pc, [ip, #744]!	; 0x2e8

Disassembly of section .text:

00011ee0 <.text>:
   11ee0:	mov	fp, #0
   11ee4:	mov	lr, #0
   11ee8:	pop	{r1}		; (ldr r1, [sp], #4)
   11eec:	mov	r2, sp
   11ef0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ef4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ef8:	ldr	ip, [pc, #16]	; 11f10 <__assert_fail@plt+0x48>
   11efc:	push	{ip}		; (str ip, [sp, #-4]!)
   11f00:	ldr	r0, [pc, #12]	; 11f14 <__assert_fail@plt+0x4c>
   11f04:	ldr	r3, [pc, #12]	; 11f18 <__assert_fail@plt+0x50>
   11f08:	bl	11c1c <__libc_start_main@plt>
   11f0c:	bl	11e8c <abort@plt>
   11f10:	ldrdeq	r9, [r3], -r0
   11f14:	andeq	r2, r1, ip, lsr r3
   11f18:	andeq	r9, r3, r0, ror lr
   11f1c:	ldr	r3, [pc, #20]	; 11f38 <__assert_fail@plt+0x70>
   11f20:	ldr	r2, [pc, #20]	; 11f3c <__assert_fail@plt+0x74>
   11f24:	add	r3, pc, r3
   11f28:	ldr	r2, [r3, r2]
   11f2c:	cmp	r2, #0
   11f30:	bxeq	lr
   11f34:	b	11c58 <__gmon_start__@plt>
   11f38:	ldrdeq	fp, [r3], -r4
   11f3c:			; <UNDEFINED> instruction: 0x000001bc
   11f40:	ldr	r0, [pc, #24]	; 11f60 <__assert_fail@plt+0x98>
   11f44:	ldr	r3, [pc, #24]	; 11f64 <__assert_fail@plt+0x9c>
   11f48:	cmp	r3, r0
   11f4c:	bxeq	lr
   11f50:	ldr	r3, [pc, #16]	; 11f68 <__assert_fail@plt+0xa0>
   11f54:	cmp	r3, #0
   11f58:	bxeq	lr
   11f5c:	bx	r3
   11f60:	andeq	sp, r4, r8, lsl r2
   11f64:	andeq	sp, r4, r8, lsl r2
   11f68:	andeq	r0, r0, r0
   11f6c:	ldr	r0, [pc, #36]	; 11f98 <__assert_fail@plt+0xd0>
   11f70:	ldr	r1, [pc, #36]	; 11f9c <__assert_fail@plt+0xd4>
   11f74:	sub	r1, r1, r0
   11f78:	asr	r1, r1, #2
   11f7c:	add	r1, r1, r1, lsr #31
   11f80:	asrs	r1, r1, #1
   11f84:	bxeq	lr
   11f88:	ldr	r3, [pc, #16]	; 11fa0 <__assert_fail@plt+0xd8>
   11f8c:	cmp	r3, #0
   11f90:	bxeq	lr
   11f94:	bx	r3
   11f98:	andeq	sp, r4, r8, lsl r2
   11f9c:	andeq	sp, r4, r8, lsl r2
   11fa0:	andeq	r0, r0, r0
   11fa4:	push	{r4, lr}
   11fa8:	ldr	r4, [pc, #24]	; 11fc8 <__assert_fail@plt+0x100>
   11fac:	ldrb	r3, [r4]
   11fb0:	cmp	r3, #0
   11fb4:	popne	{r4, pc}
   11fb8:	bl	11f40 <__assert_fail@plt+0x78>
   11fbc:	mov	r3, #1
   11fc0:	strb	r3, [r4]
   11fc4:	pop	{r4, pc}
   11fc8:	andeq	sp, r4, ip, lsr r2
   11fcc:	b	11f6c <__assert_fail@plt+0xa4>
   11fd0:	push	{fp, lr}
   11fd4:	mov	fp, sp
   11fd8:	sub	sp, sp, #56	; 0x38
   11fdc:	mov	r4, r0
   11fe0:	cmp	r0, #0
   11fe4:	bne	122f8 <__assert_fail@plt+0x430>
   11fe8:	movw	r1, #40739	; 0x9f23
   11fec:	mov	r0, #0
   11ff0:	mov	r2, #5
   11ff4:	movt	r1, #3
   11ff8:	bl	11afc <dcgettext@plt>
   11ffc:	mov	r1, r0
   12000:	movw	r0, #53936	; 0xd2b0
   12004:	movt	r0, #4
   12008:	ldr	r2, [r0]
   1200c:	mov	r0, #1
   12010:	mov	r3, r2
   12014:	bl	11d24 <__printf_chk@plt>
   12018:	movw	r1, #40810	; 0x9f6a
   1201c:	mov	r0, #0
   12020:	mov	r2, #5
   12024:	movt	r1, #3
   12028:	bl	11afc <dcgettext@plt>
   1202c:	movw	r7, #53812	; 0xd234
   12030:	movt	r7, #4
   12034:	ldr	r1, [r7]
   12038:	bl	119e8 <fputs_unlocked@plt>
   1203c:	movw	r1, #44675	; 0xae83
   12040:	mov	r0, #0
   12044:	mov	r2, #5
   12048:	movt	r1, #3
   1204c:	bl	11afc <dcgettext@plt>
   12050:	ldr	r1, [r7]
   12054:	bl	119e8 <fputs_unlocked@plt>
   12058:	movw	r1, #40884	; 0x9fb4
   1205c:	mov	r0, #0
   12060:	mov	r2, #5
   12064:	movt	r1, #3
   12068:	bl	11afc <dcgettext@plt>
   1206c:	ldr	r1, [r7]
   12070:	bl	119e8 <fputs_unlocked@plt>
   12074:	movw	r1, #41326	; 0xa16e
   12078:	mov	r0, #0
   1207c:	mov	r2, #5
   12080:	movt	r1, #3
   12084:	bl	11afc <dcgettext@plt>
   12088:	ldr	r1, [r7]
   1208c:	bl	119e8 <fputs_unlocked@plt>
   12090:	movw	r1, #42018	; 0xa422
   12094:	mov	r0, #0
   12098:	mov	r2, #5
   1209c:	movt	r1, #3
   120a0:	bl	11afc <dcgettext@plt>
   120a4:	ldr	r1, [r7]
   120a8:	bl	119e8 <fputs_unlocked@plt>
   120ac:	movw	r1, #42437	; 0xa5c5
   120b0:	mov	r0, #0
   120b4:	mov	r2, #5
   120b8:	movt	r1, #3
   120bc:	bl	11afc <dcgettext@plt>
   120c0:	ldr	r1, [r7]
   120c4:	bl	119e8 <fputs_unlocked@plt>
   120c8:	movw	r1, #42645	; 0xa695
   120cc:	mov	r0, #0
   120d0:	mov	r2, #5
   120d4:	movt	r1, #3
   120d8:	bl	11afc <dcgettext@plt>
   120dc:	ldr	r1, [r7]
   120e0:	bl	119e8 <fputs_unlocked@plt>
   120e4:	movw	r1, #42930	; 0xa7b2
   120e8:	mov	r0, #0
   120ec:	mov	r2, #5
   120f0:	movt	r1, #3
   120f4:	bl	11afc <dcgettext@plt>
   120f8:	ldr	r1, [r7]
   120fc:	bl	119e8 <fputs_unlocked@plt>
   12100:	movw	r1, #43541	; 0xaa15
   12104:	mov	r0, #0
   12108:	mov	r2, #5
   1210c:	movt	r1, #3
   12110:	bl	11afc <dcgettext@plt>
   12114:	ldr	r1, [r7]
   12118:	bl	119e8 <fputs_unlocked@plt>
   1211c:	movw	r1, #43744	; 0xaae0
   12120:	mov	r0, #0
   12124:	mov	r2, #5
   12128:	movt	r1, #3
   1212c:	bl	11afc <dcgettext@plt>
   12130:	ldr	r1, [r7]
   12134:	bl	119e8 <fputs_unlocked@plt>
   12138:	movw	r1, #43789	; 0xab0d
   1213c:	mov	r0, #0
   12140:	mov	r2, #5
   12144:	movt	r1, #3
   12148:	bl	11afc <dcgettext@plt>
   1214c:	ldr	r1, [r7]
   12150:	bl	119e8 <fputs_unlocked@plt>
   12154:	movw	r1, #44750	; 0xaece
   12158:	mov	r0, #0
   1215c:	mov	r2, #5
   12160:	movt	r1, #3
   12164:	bl	11afc <dcgettext@plt>
   12168:	movw	r2, #43843	; 0xab43
   1216c:	mov	r1, r0
   12170:	mov	r0, #1
   12174:	movt	r2, #3
   12178:	bl	11d24 <__printf_chk@plt>
   1217c:	movw	r1, #44973	; 0xafad
   12180:	mov	r0, #0
   12184:	mov	r2, #5
   12188:	movt	r1, #3
   1218c:	bl	11afc <dcgettext@plt>
   12190:	ldr	r1, [r7]
   12194:	bl	119e8 <fputs_unlocked@plt>
   12198:	movw	r0, #46608	; 0xb610
   1219c:	mov	r2, #48	; 0x30
   121a0:	mov	r6, sp
   121a4:	movw	r5, #43846	; 0xab46
   121a8:	movt	r0, #3
   121ac:	movt	r5, #3
   121b0:	add	r1, r0, #32
   121b4:	add	r3, r0, #16
   121b8:	vld1.64	{d18-d19}, [r0], r2
   121bc:	vld1.64	{d16-d17}, [r1]
   121c0:	vld1.64	{d20-d21}, [r3]
   121c4:	vldr	d22, [r0]
   121c8:	add	r1, r6, #32
   121cc:	add	r0, r6, #16
   121d0:	vst1.64	{d16-d17}, [r1]
   121d4:	movw	r1, #45185	; 0xb081
   121d8:	vst1.64	{d20-d21}, [r0]
   121dc:	mov	r0, r6
   121e0:	movt	r1, #3
   121e4:	vst1.64	{d18-d19}, [r0], r2
   121e8:	vstr	d22, [r0]
   121ec:	mov	r0, r5
   121f0:	bl	11a3c <strcmp@plt>
   121f4:	cmp	r0, #0
   121f8:	ldrne	r1, [r6, #8]!
   121fc:	cmpne	r1, #0
   12200:	bne	121ec <__assert_fail@plt+0x324>
   12204:	movw	r1, #45280	; 0xb0e0
   12208:	ldr	r6, [r6, #4]
   1220c:	mov	r0, #0
   12210:	mov	r2, #5
   12214:	movt	r1, #3
   12218:	bl	11afc <dcgettext@plt>
   1221c:	movw	r2, #43992	; 0xabd8
   12220:	movw	r3, #45303	; 0xb0f7
   12224:	mov	r1, r0
   12228:	mov	r0, #1
   1222c:	movt	r2, #3
   12230:	movt	r3, #3
   12234:	bl	11d24 <__printf_chk@plt>
   12238:	cmp	r6, #0
   1223c:	mov	r0, #5
   12240:	mov	r1, #0
   12244:	moveq	r6, r5
   12248:	bl	11d90 <setlocale@plt>
   1224c:	cmp	r0, #0
   12250:	beq	12288 <__assert_fail@plt+0x3c0>
   12254:	movw	r1, #45343	; 0xb11f
   12258:	mov	r2, #3
   1225c:	movt	r1, #3
   12260:	bl	11e80 <strncmp@plt>
   12264:	cmp	r0, #0
   12268:	beq	12288 <__assert_fail@plt+0x3c0>
   1226c:	movw	r1, #45347	; 0xb123
   12270:	mov	r0, #0
   12274:	mov	r2, #5
   12278:	movt	r1, #3
   1227c:	bl	11afc <dcgettext@plt>
   12280:	ldr	r1, [r7]
   12284:	bl	119e8 <fputs_unlocked@plt>
   12288:	movw	r1, #45418	; 0xb16a
   1228c:	mov	r0, #0
   12290:	mov	r2, #5
   12294:	movt	r1, #3
   12298:	bl	11afc <dcgettext@plt>
   1229c:	movw	r2, #45303	; 0xb0f7
   122a0:	mov	r1, r0
   122a4:	mov	r0, #1
   122a8:	mov	r3, r5
   122ac:	movt	r2, #3
   122b0:	bl	11d24 <__printf_chk@plt>
   122b4:	movw	r1, #45445	; 0xb185
   122b8:	mov	r0, #0
   122bc:	mov	r2, #5
   122c0:	movt	r1, #3
   122c4:	bl	11afc <dcgettext@plt>
   122c8:	mov	r1, r0
   122cc:	movw	r0, #45213	; 0xb09d
   122d0:	movw	r3, #43540	; 0xaa14
   122d4:	cmp	r6, r5
   122d8:	mov	r2, r6
   122dc:	movt	r0, #3
   122e0:	movt	r3, #3
   122e4:	moveq	r3, r0
   122e8:	mov	r0, #1
   122ec:	bl	11d24 <__printf_chk@plt>
   122f0:	mov	r0, r4
   122f4:	bl	11c88 <exit@plt>
   122f8:	movw	r0, #53800	; 0xd228
   122fc:	movw	r1, #40700	; 0x9efc
   12300:	mov	r2, #5
   12304:	movt	r0, #4
   12308:	movt	r1, #3
   1230c:	ldr	r5, [r0]
   12310:	mov	r0, #0
   12314:	bl	11afc <dcgettext@plt>
   12318:	mov	r2, r0
   1231c:	movw	r0, #53936	; 0xd2b0
   12320:	mov	r1, #1
   12324:	movt	r0, #4
   12328:	ldr	r3, [r0]
   1232c:	mov	r0, r5
   12330:	bl	11d3c <__fprintf_chk@plt>
   12334:	mov	r0, r4
   12338:	bl	11c88 <exit@plt>
   1233c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12340:	add	fp, sp, #28
   12344:	sub	sp, sp, #4
   12348:	vpush	{d8-d9}
   1234c:	sub	sp, sp, #280	; 0x118
   12350:	mov	r6, r0
   12354:	movw	r0, #46824	; 0xb6e8
   12358:	mov	r7, #0
   1235c:	mov	r5, r1
   12360:	movt	r0, #3
   12364:	str	r7, [sp, #140]	; 0x8c
   12368:	str	r0, [sp, #136]	; 0x88
   1236c:	ldr	r0, [r1]
   12370:	bl	1e200 <__assert_fail@plt+0xc338>
   12374:	movw	r1, #43540	; 0xaa14
   12378:	mov	r0, #6
   1237c:	movt	r1, #3
   12380:	bl	11d90 <setlocale@plt>
   12384:	movw	r4, #43996	; 0xabdc
   12388:	movw	r1, #43849	; 0xab49
   1238c:	movt	r4, #3
   12390:	movt	r1, #3
   12394:	mov	r0, r4
   12398:	bl	11e44 <bindtextdomain@plt>
   1239c:	mov	r0, r4
   123a0:	bl	11b2c <textdomain@plt>
   123a4:	movw	r0, #18712	; 0x4918
   123a8:	movt	r0, #1
   123ac:	bl	39ed4 <__assert_fail@plt+0x2800c>
   123b0:	bl	153b8 <__assert_fail@plt+0x34f0>
   123b4:	movw	r4, #53824	; 0xd240
   123b8:	movt	r4, #4
   123bc:	str	r0, [r4, #12]
   123c0:	movw	r0, #43873	; 0xab61
   123c4:	movt	r0, #3
   123c8:	bl	11c04 <getenv@plt>
   123cc:	add	r1, r4, #16
   123d0:	add	r2, r4, #56	; 0x38
   123d4:	str	r1, [sp, #116]	; 0x74
   123d8:	str	r2, [sp, #112]	; 0x70
   123dc:	bl	1caa0 <__assert_fail@plt+0xabd8>
   123e0:	add	sl, sp, #144	; 0x90
   123e4:	mov	r9, #8
   123e8:	add	r0, sl, #8
   123ec:	str	r0, [sp, #92]	; 0x5c
   123f0:	add	r0, sl, #16
   123f4:	str	r0, [sp, #88]	; 0x58
   123f8:	mov	r0, #1
   123fc:	str	r0, [sp, #124]	; 0x7c
   12400:	mov	r0, #16
   12404:	str	r0, [sp, #128]	; 0x80
   12408:	mov	r0, #0
   1240c:	str	r0, [sp, #40]	; 0x28
   12410:	mov	r0, #0
   12414:	str	r0, [sp, #120]	; 0x78
   12418:	b	12428 <__assert_fail@plt+0x560>
   1241c:	mov	r0, #17
   12420:	str	r0, [sp, #128]	; 0x80
   12424:	mov	r7, r8
   12428:	movw	r2, #43887	; 0xab6f
   1242c:	movw	r3, #46112	; 0xb420
   12430:	mvn	r0, #0
   12434:	mov	r1, r5
   12438:	mov	r8, r7
   1243c:	str	sl, [sp]
   12440:	movt	r2, #3
   12444:	movt	r3, #3
   12448:	str	r0, [sp, #144]	; 0x90
   1244c:	mov	r0, r6
   12450:	bl	11c70 <getopt_long@plt>
   12454:	add	r0, r0, #3
   12458:	movw	r1, #266	; 0x10a
   1245c:	cmp	r0, r1
   12460:	bhi	12c20 <__assert_fail@plt+0xd58>
   12464:	add	r1, pc, #4
   12468:	mov	r7, #1
   1246c:	ldr	pc, [r1, r0, lsl #2]
   12470:	andeq	r3, r1, ip, lsr lr
   12474:	andeq	r3, r1, r0, lsr #29
   12478:	andeq	r2, r1, ip, lsl #25
   1247c:	andeq	r2, r1, r0, lsr #24
   12480:	andeq	r2, r1, r0, lsr #24
   12484:	andeq	r2, r1, r0, lsr #24
   12488:	andeq	r2, r1, r0, lsr #24
   1248c:	andeq	r2, r1, r0, lsr #24
   12490:	andeq	r2, r1, r0, lsr #24
   12494:	andeq	r2, r1, r0, lsr #24
   12498:	andeq	r2, r1, r0, lsr #24
   1249c:	andeq	r2, r1, r0, lsr #24
   124a0:	andeq	r2, r1, r0, lsr #24
   124a4:	andeq	r2, r1, r0, lsr #24
   124a8:	andeq	r2, r1, r0, lsr #24
   124ac:	andeq	r2, r1, r0, lsr #24
   124b0:	andeq	r2, r1, r0, lsr #24
   124b4:	andeq	r2, r1, r0, lsr #24
   124b8:	andeq	r2, r1, r0, lsr #24
   124bc:	andeq	r2, r1, r0, lsr #24
   124c0:	andeq	r2, r1, r0, lsr #24
   124c4:	andeq	r2, r1, r0, lsr #24
   124c8:	andeq	r2, r1, r0, lsr #24
   124cc:	andeq	r2, r1, r0, lsr #24
   124d0:	andeq	r2, r1, r0, lsr #24
   124d4:	andeq	r2, r1, r0, lsr #24
   124d8:	andeq	r2, r1, r0, lsr #24
   124dc:	andeq	r2, r1, r0, lsr #24
   124e0:	andeq	r2, r1, r0, lsr #24
   124e4:	andeq	r2, r1, r0, lsr #24
   124e8:	andeq	r2, r1, r0, lsr #24
   124ec:	andeq	r2, r1, r0, lsr #24
   124f0:	andeq	r2, r1, r0, lsr #24
   124f4:	andeq	r2, r1, r0, lsr #24
   124f8:	andeq	r2, r1, r0, lsr #24
   124fc:	andeq	r2, r1, r0, lsr #24
   12500:	andeq	r2, r1, r0, lsr #24
   12504:	andeq	r2, r1, r0, lsr #24
   12508:	andeq	r2, r1, r0, lsr #24
   1250c:	andeq	r2, r1, r0, lsr #24
   12510:	andeq	r2, r1, r0, lsr #24
   12514:	andeq	r2, r1, r0, lsr #24
   12518:	andeq	r2, r1, r0, lsr #24
   1251c:	andeq	r2, r1, r0, lsr #24
   12520:	andeq	r2, r1, r0, lsr #24
   12524:	andeq	r2, r1, r0, lsr #24
   12528:	andeq	r2, r1, r0, lsr #24
   1252c:	andeq	r2, r1, r0, lsr #24
   12530:	andeq	r2, r1, r0, lsr #24
   12534:	andeq	r2, r1, r0, lsr #24
   12538:	andeq	r2, r1, r0, lsr #24
   1253c:	muleq	r1, ip, r8
   12540:	andeq	r2, r1, r0, lsr #24
   12544:	andeq	r2, r1, r0, lsr #24
   12548:	andeq	r2, r1, r0, lsr #24
   1254c:	andeq	r2, r1, r0, lsr #24
   12550:	andeq	r2, r1, r0, lsr #24
   12554:	andeq	r2, r1, r0, lsr #24
   12558:	andeq	r2, r1, r0, lsr #24
   1255c:	andeq	r2, r1, r0, lsr #24
   12560:	andeq	r2, r1, r0, lsr #24
   12564:	andeq	r2, r1, r0, lsr #24
   12568:	andeq	r2, r1, r0, lsr #24
   1256c:	andeq	r2, r1, r0, lsr #24
   12570:	andeq	r2, r1, r0, lsr #24
   12574:	andeq	r2, r1, r0, lsr #24
   12578:	andeq	r2, r1, r0, lsr #24
   1257c:	andeq	r2, r1, r0, lsr #24
   12580:	andeq	r2, r1, r0, lsr #24
   12584:	andeq	r2, r1, ip, ror #20
   12588:	andeq	r2, r1, r0, lsr #24
   1258c:	andeq	r2, r1, ip, lsl r4
   12590:	andeq	r2, r1, r0, lsr #24
   12594:	andeq	r2, r1, r0, lsr #24
   12598:	andeq	r2, r1, r0, lsr #24
   1259c:	andeq	r2, r1, ip, lsl r4
   125a0:	andeq	r2, r1, r0, lsr #24
   125a4:	andeq	r2, r1, r0, lsr #24
   125a8:	andeq	r2, r1, r0, lsr #24
   125ac:			; <UNDEFINED> instruction: 0x00012ab8
   125b0:	andeq	r2, r1, r0, lsr #24
   125b4:	andeq	r2, r1, r0, lsr #24
   125b8:	andeq	r2, r1, r0, lsr #24
   125bc:	andeq	r2, r1, r0, lsr fp
   125c0:	andeq	r2, r1, r0, lsr #24
   125c4:	andeq	r2, r1, r0, lsr #24
   125c8:			; <UNDEFINED> instruction: 0x000129b4
   125cc:	andeq	r2, r1, r0, lsr #24
   125d0:	andeq	r2, r1, r0, lsr #24
   125d4:	andeq	r2, r1, r0, lsr #24
   125d8:	andeq	r2, r1, r0, lsr #24
   125dc:	andeq	r2, r1, r0, asr #21
   125e0:	andeq	r2, r1, r0, lsr #24
   125e4:	andeq	r2, r1, r0, lsr #24
   125e8:	andeq	r2, r1, r0, lsr #24
   125ec:	andeq	r2, r1, r0, lsr #24
   125f0:	andeq	r2, r1, r0, lsr #24
   125f4:	andeq	r2, r1, r0, lsr #24
   125f8:	andeq	r2, r1, r0, lsr #24
   125fc:	andeq	r2, r1, r0, lsr #24
   12600:	andeq	r2, r1, r0, asr fp
   12604:	andeq	r2, r1, ip, asr #19
   12608:	andeq	r2, r1, r8, lsr fp
   1260c:	muleq	r1, r0, fp
   12610:	andeq	r2, r1, r0, lsr #24
   12614:	andeq	r2, r1, r0, lsr #24
   12618:	andeq	r2, r1, r0, lsr #24
   1261c:	muleq	r1, r4, sl
   12620:	andeq	r2, r1, r0, lsr #24
   12624:	andeq	r2, r1, r0, lsr #24
   12628:	andeq	r2, r1, r0, ror r9
   1262c:	andeq	r2, r1, ip, ror r9
   12630:	andeq	r2, r1, ip, asr #20
   12634:	andeq	r2, r1, r0, lsr #24
   12638:	andeq	r2, r1, r0, lsr #24
   1263c:	andeq	r2, r1, r0, lsr #24
   12640:	andeq	r2, r1, r0, lsr #24
   12644:	andeq	r2, r1, r0, lsr #24
   12648:	andeq	r2, r1, r8, lsr #8
   1264c:	strdeq	r2, [r1], -r0
   12650:	andeq	r2, r1, r0, lsr #24
   12654:	andeq	r2, r1, r0, lsr #24
   12658:	andeq	r2, r1, r0, lsr #24
   1265c:	andeq	r2, r1, r4, lsl ip
   12660:	andeq	r2, r1, r0, lsr #24
   12664:	andeq	r2, r1, r0, lsr #24
   12668:	andeq	r2, r1, r0, lsr #24
   1266c:	andeq	r2, r1, r0, lsr #24
   12670:	andeq	r2, r1, r0, lsr #24
   12674:	andeq	r2, r1, r0, lsr #24
   12678:	andeq	r2, r1, r0, lsr #24
   1267c:	andeq	r2, r1, r0, lsr #24
   12680:	andeq	r2, r1, r0, lsr #24
   12684:	andeq	r2, r1, r0, lsr #24
   12688:	andeq	r2, r1, r0, lsr #24
   1268c:	andeq	r2, r1, r0, lsr #24
   12690:	andeq	r2, r1, r0, lsr #24
   12694:	andeq	r2, r1, r0, lsr #24
   12698:	andeq	r2, r1, r0, lsr #24
   1269c:	andeq	r2, r1, r0, lsr #24
   126a0:	andeq	r2, r1, r0, lsr #24
   126a4:	andeq	r2, r1, r0, lsr #24
   126a8:	andeq	r2, r1, r0, lsr #24
   126ac:	andeq	r2, r1, r0, lsr #24
   126b0:	andeq	r2, r1, r0, lsr #24
   126b4:	andeq	r2, r1, r0, lsr #24
   126b8:	andeq	r2, r1, r0, lsr #24
   126bc:	andeq	r2, r1, r0, lsr #24
   126c0:	andeq	r2, r1, r0, lsr #24
   126c4:	andeq	r2, r1, r0, lsr #24
   126c8:	andeq	r2, r1, r0, lsr #24
   126cc:	andeq	r2, r1, r0, lsr #24
   126d0:	andeq	r2, r1, r0, lsr #24
   126d4:	andeq	r2, r1, r0, lsr #24
   126d8:	andeq	r2, r1, r0, lsr #24
   126dc:	andeq	r2, r1, r0, lsr #24
   126e0:	andeq	r2, r1, r0, lsr #24
   126e4:	andeq	r2, r1, r0, lsr #24
   126e8:	andeq	r2, r1, r0, lsr #24
   126ec:	andeq	r2, r1, r0, lsr #24
   126f0:	andeq	r2, r1, r0, lsr #24
   126f4:	andeq	r2, r1, r0, lsr #24
   126f8:	andeq	r2, r1, r0, lsr #24
   126fc:	andeq	r2, r1, r0, lsr #24
   12700:	andeq	r2, r1, r0, lsr #24
   12704:	andeq	r2, r1, r0, lsr #24
   12708:	andeq	r2, r1, r0, lsr #24
   1270c:	andeq	r2, r1, r0, lsr #24
   12710:	andeq	r2, r1, r0, lsr #24
   12714:	andeq	r2, r1, r0, lsr #24
   12718:	andeq	r2, r1, r0, lsr #24
   1271c:	andeq	r2, r1, r0, lsr #24
   12720:	andeq	r2, r1, r0, lsr #24
   12724:	andeq	r2, r1, r0, lsr #24
   12728:	andeq	r2, r1, r0, lsr #24
   1272c:	andeq	r2, r1, r0, lsr #24
   12730:	andeq	r2, r1, r0, lsr #24
   12734:	andeq	r2, r1, r0, lsr #24
   12738:	andeq	r2, r1, r0, lsr #24
   1273c:	andeq	r2, r1, r0, lsr #24
   12740:	andeq	r2, r1, r0, lsr #24
   12744:	andeq	r2, r1, r0, lsr #24
   12748:	andeq	r2, r1, r0, lsr #24
   1274c:	andeq	r2, r1, r0, lsr #24
   12750:	andeq	r2, r1, r0, lsr #24
   12754:	andeq	r2, r1, r0, lsr #24
   12758:	andeq	r2, r1, r0, lsr #24
   1275c:	andeq	r2, r1, r0, lsr #24
   12760:	andeq	r2, r1, r0, lsr #24
   12764:	andeq	r2, r1, r0, lsr #24
   12768:	andeq	r2, r1, r0, lsr #24
   1276c:	andeq	r2, r1, r0, lsr #24
   12770:	andeq	r2, r1, r0, lsr #24
   12774:	andeq	r2, r1, r0, lsr #24
   12778:	andeq	r2, r1, r0, lsr #24
   1277c:	andeq	r2, r1, r0, lsr #24
   12780:	andeq	r2, r1, r0, lsr #24
   12784:	andeq	r2, r1, r0, lsr #24
   12788:	andeq	r2, r1, r0, lsr #24
   1278c:	andeq	r2, r1, r0, lsr #24
   12790:	andeq	r2, r1, r0, lsr #24
   12794:	andeq	r2, r1, r0, lsr #24
   12798:	andeq	r2, r1, r0, lsr #24
   1279c:	andeq	r2, r1, r0, lsr #24
   127a0:	andeq	r2, r1, r0, lsr #24
   127a4:	andeq	r2, r1, r0, lsr #24
   127a8:	andeq	r2, r1, r0, lsr #24
   127ac:	andeq	r2, r1, r0, lsr #24
   127b0:	andeq	r2, r1, r0, lsr #24
   127b4:	andeq	r2, r1, r0, lsr #24
   127b8:	andeq	r2, r1, r0, lsr #24
   127bc:	andeq	r2, r1, r0, lsr #24
   127c0:	andeq	r2, r1, r0, lsr #24
   127c4:	andeq	r2, r1, r0, lsr #24
   127c8:	andeq	r2, r1, r0, lsr #24
   127cc:	andeq	r2, r1, r0, lsr #24
   127d0:	andeq	r2, r1, r0, lsr #24
   127d4:	andeq	r2, r1, r0, lsr #24
   127d8:	andeq	r2, r1, r0, lsr #24
   127dc:	andeq	r2, r1, r0, lsr #24
   127e0:	andeq	r2, r1, r0, lsr #24
   127e4:	andeq	r2, r1, r0, lsr #24
   127e8:	andeq	r2, r1, r0, lsr #24
   127ec:	andeq	r2, r1, r0, lsr #24
   127f0:	andeq	r2, r1, r0, lsr #24
   127f4:	andeq	r2, r1, r0, lsr #24
   127f8:	andeq	r2, r1, r0, lsr #24
   127fc:	andeq	r2, r1, r0, lsr #24
   12800:	andeq	r2, r1, r0, lsr #24
   12804:	andeq	r2, r1, r0, lsr #24
   12808:	andeq	r2, r1, r0, lsr #24
   1280c:	andeq	r2, r1, r0, lsr #24
   12810:	andeq	r2, r1, r0, lsr #24
   12814:	andeq	r2, r1, r0, lsr #24
   12818:	andeq	r2, r1, r0, lsr #24
   1281c:	andeq	r2, r1, r0, lsr #24
   12820:	andeq	r2, r1, r0, lsr #24
   12824:	andeq	r2, r1, r0, lsr #24
   12828:	andeq	r2, r1, r0, lsr #24
   1282c:	andeq	r2, r1, r0, lsr #24
   12830:	andeq	r2, r1, r0, lsr #24
   12834:	andeq	r2, r1, r0, lsr #24
   12838:	andeq	r2, r1, r0, lsr #24
   1283c:	andeq	r2, r1, r0, lsr #24
   12840:	andeq	r2, r1, r0, lsr #24
   12844:	andeq	r2, r1, r0, lsr #24
   12848:	andeq	r2, r1, r0, lsr #24
   1284c:	andeq	r2, r1, r0, lsr #24
   12850:	andeq	r2, r1, r0, lsr #24
   12854:	andeq	r2, r1, r0, lsr #24
   12858:	andeq	r2, r1, r0, lsr #24
   1285c:	andeq	r2, r1, r0, lsr #24
   12860:	andeq	r2, r1, r0, lsr #24
   12864:	andeq	r2, r1, r0, lsr #24
   12868:	andeq	r2, r1, r0, lsr #24
   1286c:	andeq	r2, r1, r0, lsr #24
   12870:	andeq	r2, r1, r0, lsr #24
   12874:	andeq	r2, r1, r0, lsr #24
   12878:	andeq	r2, r1, r0, lsr #24
   1287c:	andeq	r2, r1, ip, lsr r9
   12880:	andeq	r2, r1, r8, ror #22
   12884:	andeq	r2, r1, r0, lsr ip
   12888:	andeq	r2, r1, r4, asr r9
   1288c:	andeq	r2, r1, r0, lsr #24
   12890:	andeq	r2, r1, ip, asr #17
   12894:	muleq	r1, r4, r9
   12898:			; <UNDEFINED> instruction: 0x000128b4
   1289c:	movw	r1, #53824	; 0xd240
   128a0:	mov	r0, #1
   128a4:	mov	r7, r8
   128a8:	movt	r1, #4
   128ac:	strb	r0, [r1]
   128b0:	b	12428 <__assert_fail@plt+0x560>
   128b4:	movw	r1, #53824	; 0xd240
   128b8:	mov	r0, #1
   128bc:	mov	r7, r8
   128c0:	movt	r1, #4
   128c4:	strb	r0, [r1, #6]
   128c8:	b	12428 <__assert_fail@plt+0x560>
   128cc:	movw	r1, #53816	; 0xd238
   128d0:	movw	r4, #53824	; 0xd240
   128d4:	mov	r0, #1
   128d8:	movt	r1, #4
   128dc:	movt	r4, #4
   128e0:	ldr	r1, [r1]
   128e4:	strb	r0, [r4, #7]
   128e8:	cmp	r1, #0
   128ec:	beq	12c48 <__assert_fail@plt+0xd80>
   128f0:	movw	r2, #53712	; 0xd1d0
   128f4:	movw	r4, #46528	; 0xb5c0
   128f8:	str	r0, [sp, #8]
   128fc:	movw	r0, #43982	; 0xabce
   12900:	mov	r3, #4
   12904:	movt	r2, #4
   12908:	movt	r4, #3
   1290c:	movt	r0, #3
   12910:	str	r3, [sp]
   12914:	ldr	r2, [r2]
   12918:	mov	r3, r4
   1291c:	str	r2, [sp, #4]
   12920:	movw	r2, #46548	; 0xb5d4
   12924:	movt	r2, #3
   12928:	bl	145d4 <__assert_fail@plt+0x270c>
   1292c:	ldr	r0, [r4, r0, lsl #2]
   12930:	movw	r4, #53824	; 0xd240
   12934:	movt	r4, #4
   12938:	b	12c4c <__assert_fail@plt+0xd84>
   1293c:	movw	r1, #53824	; 0xd240
   12940:	mov	r0, #1
   12944:	mov	r7, r8
   12948:	movt	r1, #4
   1294c:	strb	r0, [r1, #2]
   12950:	b	12428 <__assert_fail@plt+0x560>
   12954:	movw	r2, #53824	; 0xd240
   12958:	mov	r1, #0
   1295c:	mov	r0, #1
   12960:	movt	r2, #4
   12964:	strd	r0, [r2, #56]	; 0x38
   12968:	mov	r0, #144	; 0x90
   1296c:	b	12aac <__assert_fail@plt+0xbe4>
   12970:	mov	r1, #0
   12974:	mov	r0, #1024	; 0x400
   12978:	b	12a54 <__assert_fail@plt+0xb8c>
   1297c:	movw	r1, #53824	; 0xd240
   12980:	mov	r0, #1
   12984:	mov	r7, r8
   12988:	movt	r1, #4
   1298c:	strb	r0, [r1, #4]
   12990:	b	12428 <__assert_fail@plt+0x560>
   12994:	movw	r0, #53816	; 0xd238
   12998:	movw	r1, #53824	; 0xd240
   1299c:	mov	r7, r8
   129a0:	movt	r0, #4
   129a4:	movt	r1, #4
   129a8:	ldr	r0, [r0]
   129ac:	str	r0, [r1, #28]
   129b0:	b	12428 <__assert_fail@plt+0x560>
   129b4:	movw	r1, #53824	; 0xd240
   129b8:	mov	r0, #1
   129bc:	mov	r7, r8
   129c0:	movt	r1, #4
   129c4:	strb	r0, [r1, #5]
   129c8:	b	12428 <__assert_fail@plt+0x560>
   129cc:	movw	r2, #53824	; 0xd240
   129d0:	mov	r1, #0
   129d4:	mov	r0, #1
   129d8:	mov	r7, r8
   129dc:	movt	r2, #4
   129e0:	strd	r0, [r2, #56]	; 0x38
   129e4:	str	r1, [r2, #16]
   129e8:	strb	r0, [r2, #2]
   129ec:	b	12428 <__assert_fail@plt+0x560>
   129f0:	movw	r4, #53816	; 0xd238
   129f4:	movw	r1, #43936	; 0xaba0
   129f8:	movw	r7, #53824	; 0xd240
   129fc:	mov	r2, #0
   12a00:	movt	r4, #4
   12a04:	movt	r1, #3
   12a08:	movt	r7, #4
   12a0c:	ldr	r0, [r4]
   12a10:	str	r1, [sp]
   12a14:	add	r3, r7, #64	; 0x40
   12a18:	mov	r1, #0
   12a1c:	bl	35d24 <__assert_fail@plt+0x23e5c>
   12a20:	cmp	r0, #0
   12a24:	bne	13f08 <__assert_fail@plt+0x2040>
   12a28:	ldrd	r0, [r7, #64]	; 0x40
   12a2c:	orrs	r0, r0, r1
   12a30:	bne	12c28 <__assert_fail@plt+0xd60>
   12a34:	ldr	r0, [r4]
   12a38:	mov	r7, r8
   12a3c:	ldrb	r0, [r0]
   12a40:	cmp	r0, #45	; 0x2d
   12a44:	bne	12428 <__assert_fail@plt+0x560>
   12a48:	b	13f24 <__assert_fail@plt+0x205c>
   12a4c:	mov	r1, #0
   12a50:	mov	r0, #1048576	; 0x100000
   12a54:	movw	r2, #53824	; 0xd240
   12a58:	mov	r7, r8
   12a5c:	movt	r2, #4
   12a60:	strd	r0, [r2, #56]	; 0x38
   12a64:	str	r1, [r2, #16]
   12a68:	b	12428 <__assert_fail@plt+0x560>
   12a6c:	movw	r4, #53816	; 0xd238
   12a70:	ldr	r1, [sp, #116]	; 0x74
   12a74:	ldr	r2, [sp, #112]	; 0x70
   12a78:	movt	r4, #4
   12a7c:	ldr	r0, [r4]
   12a80:	bl	1caa0 <__assert_fail@plt+0xabd8>
   12a84:	cmp	r0, #0
   12a88:	mov	r7, r8
   12a8c:	beq	12428 <__assert_fail@plt+0x560>
   12a90:	b	13f48 <__assert_fail@plt+0x2080>
   12a94:	movw	r2, #53824	; 0xd240
   12a98:	mov	r1, #0
   12a9c:	mov	r0, #1
   12aa0:	movt	r2, #4
   12aa4:	strd	r0, [r2, #56]	; 0x38
   12aa8:	mov	r0, #176	; 0xb0
   12aac:	str	r0, [r2, #16]
   12ab0:	mov	r7, r8
   12ab4:	b	12428 <__assert_fail@plt+0x560>
   12ab8:	mov	r0, #2
   12abc:	b	12420 <__assert_fail@plt+0x558>
   12ac0:	movw	r7, #53816	; 0xd238
   12ac4:	movw	r0, #53824	; 0xd240
   12ac8:	mov	r3, #268435456	; 0x10000000
   12acc:	movt	r7, #4
   12ad0:	movt	r0, #4
   12ad4:	ldr	r1, [r0, #12]
   12ad8:	mov	r0, #10
   12adc:	ldr	r2, [r7]
   12ae0:	str	r0, [sp]
   12ae4:	movw	r0, #22928	; 0x5990
   12ae8:	movt	r0, #1
   12aec:	bl	15e8c <__assert_fail@plt+0x3fc4>
   12af0:	cmp	r0, #0
   12af4:	beq	12c28 <__assert_fail@plt+0xd60>
   12af8:	bl	11cdc <__errno_location@plt>
   12afc:	ldr	r2, [r7]
   12b00:	ldr	r4, [r0]
   12b04:	mov	r0, #0
   12b08:	mov	r1, #3
   12b0c:	str	r0, [sp, #124]	; 0x7c
   12b10:	mov	r0, #0
   12b14:	bl	1ff18 <__assert_fail@plt+0xe050>
   12b18:	movw	r2, #46766	; 0xb6ae
   12b1c:	mov	r3, r0
   12b20:	mov	r0, #0
   12b24:	mov	r1, r4
   12b28:	movt	r2, #3
   12b2c:	b	12c08 <__assert_fail@plt+0xd40>
   12b30:	mov	r0, #16
   12b34:	b	12420 <__assert_fail@plt+0x558>
   12b38:	movw	r1, #53824	; 0xd240
   12b3c:	mov	r0, #1
   12b40:	mov	r7, r8
   12b44:	movt	r1, #4
   12b48:	strb	r0, [r1, #3]
   12b4c:	b	12428 <__assert_fail@plt+0x560>
   12b50:	movw	r1, #53824	; 0xd240
   12b54:	mov	r0, #1
   12b58:	mov	r7, r8
   12b5c:	movt	r1, #4
   12b60:	strb	r0, [r1, #1]
   12b64:	b	12428 <__assert_fail@plt+0x560>
   12b68:	movw	r0, #53816	; 0xd238
   12b6c:	mov	r2, #268435456	; 0x10000000
   12b70:	movt	r0, #4
   12b74:	ldr	r1, [r0]
   12b78:	movw	r0, #53824	; 0xd240
   12b7c:	movt	r0, #4
   12b80:	ldr	r0, [r0, #12]
   12b84:	bl	15990 <__assert_fail@plt+0x3ac8>
   12b88:	mov	r7, r8
   12b8c:	b	12428 <__assert_fail@plt+0x560>
   12b90:	movw	r4, #53816	; 0xd238
   12b94:	movw	r1, #43540	; 0xaa14
   12b98:	sub	r3, fp, #160	; 0xa0
   12b9c:	mov	r2, #0
   12ba0:	movt	r4, #4
   12ba4:	movt	r1, #3
   12ba8:	ldr	r0, [r4]
   12bac:	str	r1, [sp]
   12bb0:	mov	r1, #0
   12bb4:	bl	37748 <__assert_fail@plt+0x25880>
   12bb8:	cmp	r0, #0
   12bbc:	ldreq	r0, [fp, #-156]	; 0xffffff64
   12bc0:	cmpeq	r0, #0
   12bc4:	beq	12c6c <__assert_fail@plt+0xda4>
   12bc8:	movw	r1, #43911	; 0xab87
   12bcc:	mov	r0, #0
   12bd0:	mov	r2, #5
   12bd4:	movt	r1, #3
   12bd8:	str	r0, [sp, #124]	; 0x7c
   12bdc:	mov	r0, #0
   12be0:	bl	11afc <dcgettext@plt>
   12be4:	mov	r7, r9
   12be8:	mov	r9, r0
   12bec:	ldr	r0, [r4]
   12bf0:	bl	201c4 <__assert_fail@plt+0xe2fc>
   12bf4:	mov	r3, r0
   12bf8:	mov	r2, r9
   12bfc:	mov	r0, #0
   12c00:	mov	r1, #0
   12c04:	mov	r9, r7
   12c08:	bl	11bd4 <error@plt>
   12c0c:	mov	r7, r8
   12c10:	b	12428 <__assert_fail@plt+0x560>
   12c14:	orr	r9, r9, #64	; 0x40
   12c18:	mov	r7, r8
   12c1c:	b	12428 <__assert_fail@plt+0x560>
   12c20:	mov	r0, #0
   12c24:	str	r0, [sp, #124]	; 0x7c
   12c28:	mov	r7, r8
   12c2c:	b	12428 <__assert_fail@plt+0x560>
   12c30:	movw	r0, #53816	; 0xd238
   12c34:	mov	r7, r8
   12c38:	movt	r0, #4
   12c3c:	ldr	r0, [r0]
   12c40:	str	r0, [sp, #40]	; 0x28
   12c44:	b	12428 <__assert_fail@plt+0x560>
   12c48:	mov	r0, #0
   12c4c:	str	r0, [r4, #20]
   12c50:	movw	r0, #43989	; 0xabd5
   12c54:	movt	r0, #3
   12c58:	bl	11c04 <getenv@plt>
   12c5c:	bl	34888 <__assert_fail@plt+0x229c0>
   12c60:	str	r0, [r4, #24]
   12c64:	mov	r7, r8
   12c68:	b	12428 <__assert_fail@plt+0x560>
   12c6c:	ldr	r0, [fp, #-160]	; 0xffffff60
   12c70:	movw	r1, #53704	; 0xd1c8
   12c74:	mov	r7, r8
   12c78:	movt	r1, #4
   12c7c:	str	r0, [r1]
   12c80:	mov	r0, #1
   12c84:	str	r0, [sp, #120]	; 0x78
   12c88:	b	12428 <__assert_fail@plt+0x560>
   12c8c:	ldr	r0, [sp, #124]	; 0x7c
   12c90:	tst	r0, #1
   12c94:	beq	13f70 <__assert_fail@plt+0x20a8>
   12c98:	movw	r4, #53824	; 0xd240
   12c9c:	movt	r4, #4
   12ca0:	ldrb	r0, [r4, #1]
   12ca4:	and	r0, r8, r0
   12ca8:	tst	r0, #1
   12cac:	bne	13f78 <__assert_fail@plt+0x20b0>
   12cb0:	tst	r8, #1
   12cb4:	beq	12d30 <__assert_fail@plt+0xe68>
   12cb8:	movw	r8, #53704	; 0xd1c8
   12cbc:	ldr	r0, [sp, #120]	; 0x78
   12cc0:	movt	r8, #4
   12cc4:	ldr	r4, [r8]
   12cc8:	mvn	r7, r0
   12ccc:	cmp	r4, #0
   12cd0:	mov	r0, r4
   12cd4:	movwne	r0, #1
   12cd8:	orr	r0, r7, r0
   12cdc:	tst	r0, #1
   12ce0:	bne	12d0c <__assert_fail@plt+0xe44>
   12ce4:	movw	r1, #44108	; 0xac4c
   12ce8:	mov	r0, #0
   12cec:	mov	r2, #5
   12cf0:	movt	r1, #3
   12cf4:	bl	11afc <dcgettext@plt>
   12cf8:	mov	r2, r0
   12cfc:	mov	r0, #0
   12d00:	mov	r1, #0
   12d04:	bl	11bd4 <error@plt>
   12d08:	ldr	r4, [r8]
   12d0c:	clz	r0, r4
   12d10:	lsr	r0, r0, #5
   12d14:	orr	r0, r7, r0
   12d18:	tst	r0, #1
   12d1c:	beq	1403c <__assert_fail@plt+0x2174>
   12d20:	movw	r4, #53824	; 0xd240
   12d24:	mov	r0, #0
   12d28:	movt	r4, #4
   12d2c:	str	r0, [r8]
   12d30:	ldrb	r0, [r4, #6]
   12d34:	cmp	r0, #1
   12d38:	bne	12d78 <__assert_fail@plt+0xeb0>
   12d3c:	ldrb	r0, [r4, #2]
   12d40:	cmp	r0, #1
   12d44:	bne	12d6c <__assert_fail@plt+0xea4>
   12d48:	movw	r1, #44216	; 0xacb8
   12d4c:	mov	r0, #0
   12d50:	mov	r2, #5
   12d54:	movt	r1, #3
   12d58:	bl	11afc <dcgettext@plt>
   12d5c:	mov	r2, r0
   12d60:	mov	r0, #0
   12d64:	mov	r1, #0
   12d68:	bl	11bd4 <error@plt>
   12d6c:	mov	r1, #0
   12d70:	mov	r0, #1
   12d74:	strd	r0, [r4, #56]	; 0x38
   12d78:	ldrb	r0, [r4, #7]
   12d7c:	cmp	r0, #1
   12d80:	bne	12ec4 <__assert_fail@plt+0xffc>
   12d84:	ldr	r7, [r4, #28]
   12d88:	cmp	r7, #0
   12d8c:	bne	12e04 <__assert_fail@plt+0xf3c>
   12d90:	movw	r0, #44286	; 0xacfe
   12d94:	movt	r0, #3
   12d98:	bl	11c04 <getenv@plt>
   12d9c:	cmp	r0, #0
   12da0:	str	r0, [r4, #28]
   12da4:	beq	12df8 <__assert_fail@plt+0xf30>
   12da8:	movw	r1, #43866	; 0xab5a
   12dac:	mov	r7, r0
   12db0:	movt	r1, #3
   12db4:	bl	11a3c <strcmp@plt>
   12db8:	cmp	r0, #0
   12dbc:	beq	12df8 <__assert_fail@plt+0xf30>
   12dc0:	ldrb	r0, [r7]
   12dc4:	cmp	r0, #43	; 0x2b
   12dc8:	bne	12e18 <__assert_fail@plt+0xf50>
   12dcc:	mov	r0, r7
   12dd0:	mov	r1, #10
   12dd4:	bl	11cb8 <strchr@plt>
   12dd8:	cmp	r0, #0
   12ddc:	beq	12e10 <__assert_fail@plt+0xf48>
   12de0:	mov	r1, #0
   12de4:	strb	r1, [r0]
   12de8:	ldrb	r0, [r7]
   12dec:	cmp	r0, #43	; 0x2b
   12df0:	beq	12e10 <__assert_fail@plt+0xf48>
   12df4:	b	12e34 <__assert_fail@plt+0xf6c>
   12df8:	movw	r7, #44297	; 0xad09
   12dfc:	movt	r7, #3
   12e00:	str	r7, [r4, #28]
   12e04:	ldrb	r0, [r7]
   12e08:	cmp	r0, #43	; 0x2b
   12e0c:	bne	12e34 <__assert_fail@plt+0xf6c>
   12e10:	add	r0, r7, #1
   12e14:	b	12eb8 <__assert_fail@plt+0xff0>
   12e18:	movw	r1, #46572	; 0xb5ec
   12e1c:	mov	r0, r7
   12e20:	mov	r2, #6
   12e24:	movt	r1, #3
   12e28:	bl	11e80 <strncmp@plt>
   12e2c:	cmp	r0, #0
   12e30:	beq	13e08 <__assert_fail@plt+0x1f40>
   12e34:	movw	r0, #53712	; 0xd1d0
   12e38:	movw	r4, #46580	; 0xb5f4
   12e3c:	mov	r2, #4
   12e40:	mov	r1, #1
   12e44:	movt	r0, #4
   12e48:	str	r2, [sp]
   12e4c:	movw	r2, #46592	; 0xb600
   12e50:	movt	r4, #3
   12e54:	movt	r2, #3
   12e58:	ldr	r0, [r0]
   12e5c:	mov	r3, r4
   12e60:	stmib	sp, {r0, r1}
   12e64:	movw	r0, #44306	; 0xad12
   12e68:	mov	r1, r7
   12e6c:	movt	r0, #3
   12e70:	bl	145d4 <__assert_fail@plt+0x270c>
   12e74:	ldr	r0, [r4, r0, lsl #2]
   12e78:	cmp	r0, #2
   12e7c:	beq	12eb0 <__assert_fail@plt+0xfe8>
   12e80:	movw	r4, #53824	; 0xd240
   12e84:	cmp	r0, #1
   12e88:	movt	r4, #4
   12e8c:	beq	12ea4 <__assert_fail@plt+0xfdc>
   12e90:	cmp	r0, #0
   12e94:	bne	12ec4 <__assert_fail@plt+0xffc>
   12e98:	movw	r0, #44317	; 0xad1d
   12e9c:	movt	r0, #3
   12ea0:	b	12ec0 <__assert_fail@plt+0xff8>
   12ea4:	movw	r0, #44341	; 0xad35
   12ea8:	movt	r0, #3
   12eac:	b	12ec0 <__assert_fail@plt+0xff8>
   12eb0:	movw	r0, #44356	; 0xad44
   12eb4:	movt	r0, #3
   12eb8:	movw	r4, #53824	; 0xd240
   12ebc:	movt	r4, #4
   12ec0:	str	r0, [r4, #32]
   12ec4:	movw	r7, #53792	; 0xd220
   12ec8:	ldr	r0, [sp, #40]	; 0x28
   12ecc:	movt	r7, #4
   12ed0:	ldr	r1, [r7]
   12ed4:	cmp	r0, #0
   12ed8:	beq	13c7c <__assert_fail@plt+0x1db4>
   12edc:	cmp	r1, r6
   12ee0:	blt	13fc4 <__assert_fail@plt+0x20fc>
   12ee4:	ldr	r6, [sp, #40]	; 0x28
   12ee8:	movw	r1, #49312	; 0xc0a0
   12eec:	movt	r1, #3
   12ef0:	mov	r0, r6
   12ef4:	bl	11a3c <strcmp@plt>
   12ef8:	movw	r5, #53808	; 0xd230
   12efc:	cmp	r0, #0
   12f00:	movt	r5, #4
   12f04:	beq	12f24 <__assert_fail@plt+0x105c>
   12f08:	ldr	r2, [r5]
   12f0c:	movw	r1, #48222	; 0xbc5e
   12f10:	mov	r0, r6
   12f14:	movt	r1, #3
   12f18:	bl	17c38 <__assert_fail@plt+0x5d70>
   12f1c:	cmp	r0, #0
   12f20:	beq	1406c <__assert_fail@plt+0x21a4>
   12f24:	ldr	r0, [r5]
   12f28:	bl	147b8 <__assert_fail@plt+0x28f0>
   12f2c:	mov	r5, r0
   12f30:	mov	r0, #1
   12f34:	cmp	r5, #0
   12f38:	strb	r0, [r4, #8]
   12f3c:	beq	13f6c <__assert_fail@plt+0x20a4>
   12f40:	bl	14a04 <__assert_fail@plt+0x2b3c>
   12f44:	cmp	r0, #0
   12f48:	str	r0, [r4, #36]	; 0x24
   12f4c:	beq	13f6c <__assert_fail@plt+0x20a4>
   12f50:	ldrb	r1, [r4, #8]
   12f54:	ldrb	r0, [r4, #4]
   12f58:	orr	r2, r9, #256	; 0x100
   12f5c:	str	r5, [sp, #48]	; 0x30
   12f60:	cmp	r1, #0
   12f64:	add	r1, sp, #132	; 0x84
   12f68:	moveq	r9, r2
   12f6c:	cmp	r0, #0
   12f70:	mov	r0, r5
   12f74:	movne	r9, r2
   12f78:	bl	147f0 <__assert_fail@plt+0x2928>
   12f7c:	cmp	r0, #0
   12f80:	beq	13cc8 <__assert_fail@plt+0x1e00>
   12f84:	mov	r5, r0
   12f88:	ldr	r0, [sp, #128]	; 0x80
   12f8c:	vmov.i32	q4, #0	; 0x00000000
   12f90:	mov	r6, #1
   12f94:	orr	r0, r9, r0
   12f98:	str	r0, [sp, #32]
   12f9c:	sub	r0, fp, #160	; 0xa0
   12fa0:	add	r0, r0, #96	; 0x60
   12fa4:	str	r0, [sp, #24]
   12fa8:	b	13038 <__assert_fail@plt+0x1170>
   12fac:	cmp	r6, #0
   12fb0:	beq	13b34 <__assert_fail@plt+0x1c6c>
   12fb4:	ldr	r0, [sp, #48]	; 0x30
   12fb8:	mov	r5, r6
   12fbc:	bl	148a8 <__assert_fail@plt+0x29e0>
   12fc0:	mov	r4, r0
   12fc4:	mov	r0, #0
   12fc8:	mov	r1, #3
   12fcc:	mov	r2, r5
   12fd0:	mov	r6, #0
   12fd4:	bl	1ff18 <__assert_fail@plt+0xe050>
   12fd8:	movw	r1, #44611	; 0xae43
   12fdc:	mov	r5, r0
   12fe0:	mov	r0, #0
   12fe4:	mov	r2, #5
   12fe8:	movt	r1, #3
   12fec:	bl	11afc <dcgettext@plt>
   12ff0:	movw	r2, #44641	; 0xae61
   12ff4:	str	r4, [sp]
   12ff8:	movw	r4, #53824	; 0xd240
   12ffc:	str	r0, [sp, #4]
   13000:	mov	r0, #0
   13004:	mov	r1, #0
   13008:	mov	r3, r5
   1300c:	movt	r2, #3
   13010:	movt	r4, #4
   13014:	bl	11bd4 <error@plt>
   13018:	ldr	r0, [sp, #48]	; 0x30
   1301c:	add	r1, sp, #132	; 0x84
   13020:	bl	147f0 <__assert_fail@plt+0x2928>
   13024:	cmp	r6, #0
   13028:	mov	r5, r0
   1302c:	movwne	r6, #1
   13030:	cmp	r0, #0
   13034:	beq	13ccc <__assert_fail@plt+0x1e04>
   13038:	str	r6, [sp, #44]	; 0x2c
   1303c:	ldr	r6, [sp, #40]	; 0x28
   13040:	mov	r0, #0
   13044:	cmp	r6, #0
   13048:	beq	13084 <__assert_fail@plt+0x11bc>
   1304c:	movw	r1, #49312	; 0xc0a0
   13050:	mov	r0, r6
   13054:	movt	r1, #3
   13058:	bl	11a3c <strcmp@plt>
   1305c:	cmp	r0, #0
   13060:	mov	r0, #0
   13064:	bne	13084 <__assert_fail@plt+0x11bc>
   13068:	movw	r1, #49312	; 0xc0a0
   1306c:	mov	r0, r5
   13070:	movt	r1, #3
   13074:	bl	11a3c <strcmp@plt>
   13078:	cmp	r0, #0
   1307c:	mov	r0, #0
   13080:	beq	13c28 <__assert_fail@plt+0x1d60>
   13084:	ldrb	r1, [r5]
   13088:	cmp	r1, #0
   1308c:	beq	12fac <__assert_fail@plt+0x10e4>
   13090:	mov	r6, #0
   13094:	cmp	r0, #0
   13098:	bne	13018 <__assert_fail@plt+0x1150>
   1309c:	ldr	r1, [sp, #32]
   130a0:	mov	r0, r4
   130a4:	mov	r2, #0
   130a8:	str	r5, [r0, #72]!	; 0x48
   130ac:	bl	35ca8 <__assert_fail@plt+0x23de0>
   130b0:	mov	r7, r0
   130b4:	bl	18a8c <__assert_fail@plt+0x6bc4>
   130b8:	cmp	r0, #0
   130bc:	beq	13b64 <__assert_fail@plt+0x1c9c>
   130c0:	mov	r5, r0
   130c4:	add	r0, r7, #16
   130c8:	mov	sl, #1
   130cc:	mov	r9, #0
   130d0:	str	r7, [sp, #84]	; 0x54
   130d4:	str	r0, [sp, #28]
   130d8:	b	13108 <__assert_fail@plt+0x1240>
   130dc:	subs	r0, r6, r2
   130e0:	sbcs	r0, ip, r3
   130e4:	ldr	r1, [sp, #120]	; 0x78
   130e8:	addcs	r0, sp, #144	; 0x90
   130ec:	blcs	140ac <__assert_fail@plt+0x21e4>
   130f0:	mov	r0, r7
   130f4:	and	sl, sl, r8
   130f8:	bl	18a8c <__assert_fail@plt+0x6bc4>
   130fc:	mov	r5, r0
   13100:	cmp	r0, #0
   13104:	beq	13b6c <__assert_fail@plt+0x1ca4>
   13108:	ldrh	r6, [r5, #56]	; 0x38
   1310c:	ldr	r2, [r5, #28]
   13110:	cmp	r6, #6
   13114:	str	r2, [sp, #120]	; 0x78
   13118:	beq	13178 <__assert_fail@plt+0x12b0>
   1311c:	cmp	r6, #4
   13120:	bne	132e8 <__assert_fail@plt+0x1420>
   13124:	movw	r1, #45774	; 0xb2ce
   13128:	ldr	r4, [r5, #32]
   1312c:	mov	r7, r2
   13130:	mov	r0, #0
   13134:	mov	r2, #5
   13138:	mov	r8, #0
   1313c:	movt	r1, #3
   13140:	bl	11afc <dcgettext@plt>
   13144:	mov	r9, r0
   13148:	mov	r0, #4
   1314c:	mov	r1, r7
   13150:	mov	r6, #4
   13154:	bl	1fc9c <__assert_fail@plt+0xddd4>
   13158:	mov	r3, r0
   1315c:	mov	r1, r4
   13160:	movw	r4, #53824	; 0xd240
   13164:	mov	r0, #0
   13168:	mov	r2, r9
   1316c:	movt	r4, #4
   13170:	bl	11bd4 <error@plt>
   13174:	b	13180 <__assert_fail@plt+0x12b8>
   13178:	mov	r6, #6
   1317c:	mov	r8, #1
   13180:	add	r0, sp, #108	; 0x6c
   13184:	stm	r0, {r6, r8, sl}
   13188:	ldrb	r0, [r4, #2]
   1318c:	cmp	r0, #1
   13190:	bne	131d4 <__assert_fail@plt+0x130c>
   13194:	add	r0, r5, #112	; 0x70
   13198:	mov	sl, #0
   1319c:	ldm	r0, {r0, r8}
   131a0:	rsbs	r1, r0, #0
   131a4:	rscs	r1, r8, #0
   131a8:	movwlt	sl, #1
   131ac:	cmp	sl, #0
   131b0:	moveq	r8, sl
   131b4:	movne	sl, r0
   131b8:	ldr	r0, [r4, #20]
   131bc:	cmp	r0, #2
   131c0:	beq	131f4 <__assert_fail@plt+0x132c>
   131c4:	cmp	r0, #0
   131c8:	addne	r0, r5, #152	; 0x98
   131cc:	addeq	r0, r5, #144	; 0x90
   131d0:	b	131f8 <__assert_fail@plt+0x1330>
   131d4:	add	r0, r5, #128	; 0x80
   131d8:	ldrd	r0, [r0]
   131dc:	lsl	r1, r1, #9
   131e0:	lsl	sl, r0, #9
   131e4:	orr	r8, r1, r0, lsr #23
   131e8:	ldr	r0, [r4, #20]
   131ec:	cmp	r0, #2
   131f0:	bne	131c4 <__assert_fail@plt+0x12fc>
   131f4:	add	r0, r5, #136	; 0x88
   131f8:	ldr	r9, [r5, #48]	; 0x30
   131fc:	ldr	r5, [r0]
   13200:	ldr	r2, [r0, #4]
   13204:	ldr	r0, [sp, #92]	; 0x5c
   13208:	mov	r1, #1
   1320c:	str	r8, [sp, #148]	; 0x94
   13210:	str	sl, [sp, #144]	; 0x90
   13214:	mov	r3, #0
   13218:	stm	r0, {r1, r3}
   1321c:	ldr	r1, [r4, #48]	; 0x30
   13220:	ldr	r0, [sp, #88]	; 0x58
   13224:	str	r2, [sp, #128]	; 0x80
   13228:	str	r5, [sp, #124]	; 0x7c
   1322c:	cmp	r1, #0
   13230:	str	r5, [r0]
   13234:	str	r2, [r0, #4]
   13238:	beq	1332c <__assert_fail@plt+0x1464>
   1323c:	ldr	r0, [r4, #44]	; 0x2c
   13240:	cmp	r9, r0
   13244:	beq	13340 <__assert_fail@plt+0x1478>
   13248:	mvn	lr, #0
   1324c:	bls	1358c <__assert_fail@plt+0x16c4>
   13250:	mov	r2, #0
   13254:	cmp	r1, r9
   13258:	mov	r5, #-2147483648	; 0x80000000
   1325c:	str	r2, [sp, #100]	; 0x64
   13260:	mov	r2, #1
   13264:	str	r2, [sp, #104]	; 0x68
   13268:	bhi	13290 <__assert_fail@plt+0x13c8>
   1326c:	ldr	r0, [r4, #52]	; 0x34
   13270:	mov	r1, r9
   13274:	mov	r2, #96	; 0x60
   13278:	bl	356ec <__assert_fail@plt+0x23824>
   1327c:	mov	r1, r0
   13280:	lsl	r0, r9, #1
   13284:	mvn	lr, #0
   13288:	strd	r0, [r4, #48]	; 0x30
   1328c:	ldr	r0, [r4, #44]	; 0x2c
   13290:	add	r1, r0, #1
   13294:	cmp	r1, r9
   13298:	bhi	132dc <__assert_fail@plt+0x1414>
   1329c:	ldr	r2, [r4, #52]	; 0x34
   132a0:	add	r0, r0, r0, lsl #1
   132a4:	add	r0, r2, r0, lsl #4
   132a8:	add	r0, r0, #92	; 0x5c
   132ac:	add	r1, r1, #1
   132b0:	sub	r2, r0, #20
   132b4:	str	r5, [r0, #-4]
   132b8:	str	lr, [r0]
   132bc:	str	r5, [r0, #-28]	; 0xffffffe4
   132c0:	str	lr, [r0, #-24]	; 0xffffffe8
   132c4:	vst1.64	{d8-d9}, [r2]
   132c8:	sub	r2, r0, #44	; 0x2c
   132cc:	add	r0, r0, #48	; 0x30
   132d0:	cmp	r1, r9
   132d4:	vst1.64	{d8-d9}, [r2]
   132d8:	bls	132ac <__assert_fail@plt+0x13e4>
   132dc:	str	sl, [sp, #96]	; 0x60
   132e0:	mov	ip, r8
   132e4:	b	1335c <__assert_fail@plt+0x1494>
   132e8:	ldr	r0, [r4, #12]
   132ec:	mov	r1, r2
   132f0:	bl	15664 <__assert_fail@plt+0x379c>
   132f4:	cmp	r0, #0
   132f8:	beq	13508 <__assert_fail@plt+0x1640>
   132fc:	mov	r8, #1
   13300:	cmp	r6, #1
   13304:	bne	130f0 <__assert_fail@plt+0x1228>
   13308:	mov	r0, r7
   1330c:	mov	r1, r5
   13310:	mov	r2, #4
   13314:	bl	1a2ec <__assert_fail@plt+0x8424>
   13318:	mov	r0, r7
   1331c:	bl	18a8c <__assert_fail@plt+0x6bc4>
   13320:	cmp	r0, r5
   13324:	beq	130f0 <__assert_fail@plt+0x1228>
   13328:	b	13ec8 <__assert_fail@plt+0x2000>
   1332c:	add	r0, r9, #10
   13330:	mov	r1, #48	; 0x30
   13334:	str	r0, [r4, #48]	; 0x30
   13338:	bl	35b3c <__assert_fail@plt+0x23c74>
   1333c:	str	r0, [r4, #52]	; 0x34
   13340:	mov	r0, #0
   13344:	str	sl, [sp, #96]	; 0x60
   13348:	mov	ip, r8
   1334c:	mvn	lr, #0
   13350:	str	r0, [sp, #100]	; 0x64
   13354:	mov	r0, #1
   13358:	str	r0, [sp, #104]	; 0x68
   1335c:	ldr	r0, [sp, #108]	; 0x6c
   13360:	str	r9, [r4, #44]	; 0x2c
   13364:	orr	r2, r0, #2
   13368:	cmp	r2, #6
   1336c:	bne	1337c <__assert_fail@plt+0x14b4>
   13370:	ldrb	r0, [r4, #5]
   13374:	cmp	r0, #0
   13378:	bne	13408 <__assert_fail@plt+0x1540>
   1337c:	ldr	r3, [r4, #52]	; 0x34
   13380:	add	r0, r9, r9, lsl #1
   13384:	mov	r6, #0
   13388:	ldr	r0, [r3, r0, lsl #4]!
   1338c:	ldr	r5, [r3, #12]
   13390:	ldmib	r3, {r1, r7}
   13394:	adds	r7, r7, #1
   13398:	ldr	r4, [r3, #20]
   1339c:	adc	r5, r5, #0
   133a0:	adds	r0, r0, sl
   133a4:	adcs	r1, r1, r8
   133a8:	adcs	r6, r6, #0
   133ac:	movne	r0, lr
   133b0:	movne	r1, lr
   133b4:	stm	r3, {r0, r1, r7}
   133b8:	str	r5, [r3, #12]
   133bc:	ldr	r5, [sp, #124]	; 0x7c
   133c0:	ldr	r0, [r3, #16]!
   133c4:	ldr	r1, [sp, #128]	; 0x80
   133c8:	cmp	r0, r5
   133cc:	mov	r0, #0
   133d0:	movwgt	r0, #1
   133d4:	sublt	r0, r0, #1
   133d8:	cmp	r4, r1
   133dc:	mov	r1, #0
   133e0:	movw	r4, #53824	; 0xd240
   133e4:	movwgt	r1, #1
   133e8:	movt	r4, #4
   133ec:	sublt	r1, r1, #1
   133f0:	add	r0, r1, r0, lsl #1
   133f4:	cmn	r0, #1
   133f8:	bgt	13408 <__assert_fail@plt+0x1540>
   133fc:	ldr	r0, [sp, #128]	; 0x80
   13400:	str	r5, [r3]
   13404:	str	r0, [r3, #4]
   13408:	add	r7, r4, #80	; 0x50
   1340c:	mov	r5, #0
   13410:	ldm	r7, {r0, r1, r3, r7}
   13414:	adds	r3, r3, #1
   13418:	adc	r7, r7, #0
   1341c:	adds	r0, r0, sl
   13420:	ldr	sl, [sp, #116]	; 0x74
   13424:	adcs	r1, r1, r8
   13428:	ldr	r8, [sp, #112]	; 0x70
   1342c:	adcs	r6, r5, #0
   13430:	ldr	r5, [sp, #124]	; 0x7c
   13434:	movne	r0, lr
   13438:	movne	r1, lr
   1343c:	add	lr, r4, #80	; 0x50
   13440:	stm	lr, {r0, r1, r3, r7}
   13444:	ldr	r3, [sp, #128]	; 0x80
   13448:	ldr	r7, [sp, #84]	; 0x54
   1344c:	ldr	r0, [r4, #96]	; 0x60
   13450:	ldr	r1, [r4, #100]	; 0x64
   13454:	cmp	r0, r5
   13458:	mov	r0, #0
   1345c:	movwgt	r0, #1
   13460:	sublt	r0, r0, #1
   13464:	cmp	r1, r3
   13468:	mov	r1, #0
   1346c:	movwgt	r1, #1
   13470:	sublt	r1, r1, #1
   13474:	add	r0, r1, r0, lsl #1
   13478:	cmn	r0, #1
   1347c:	movw	r0, #53704	; 0xd1c8
   13480:	movt	r0, #4
   13484:	strle	r5, [r4, #96]	; 0x60
   13488:	strle	r3, [r4, #100]	; 0x64
   1348c:	cmp	r2, #6
   13490:	ldr	r3, [r0]
   13494:	bne	134e0 <__assert_fail@plt+0x1618>
   13498:	cmp	r9, r3
   1349c:	bhi	134e0 <__assert_fail@plt+0x1618>
   134a0:	ldrb	r0, [r4, #6]
   134a4:	ldrd	r2, [r4, #64]	; 0x40
   134a8:	ldr	r6, [sp, #96]	; 0x60
   134ac:	mov	r9, #0
   134b0:	cmp	r0, #0
   134b4:	ldr	r0, [sp, #100]	; 0x64
   134b8:	movne	ip, r0
   134bc:	ldr	r0, [sp, #104]	; 0x68
   134c0:	movne	r6, r0
   134c4:	cmn	r3, #1
   134c8:	bgt	130dc <__assert_fail@plt+0x1214>
   134cc:	rsbs	r0, r2, #0
   134d0:	rsc	r1, r3, #0
   134d4:	subs	r0, r0, r6
   134d8:	sbcs	r0, r1, ip
   134dc:	b	130e4 <__assert_fail@plt+0x121c>
   134e0:	cmp	r9, r3
   134e4:	mov	r2, #0
   134e8:	movwls	r2, #1
   134ec:	cmp	r9, #0
   134f0:	beq	134a0 <__assert_fail@plt+0x15d8>
   134f4:	ldrb	r0, [r4, #1]
   134f8:	ands	r0, r0, r2
   134fc:	bne	134a0 <__assert_fail@plt+0x15d8>
   13500:	mov	r9, #0
   13504:	b	130f0 <__assert_fail@plt+0x1228>
   13508:	cmp	r6, #11
   1350c:	bne	13534 <__assert_fail@plt+0x166c>
   13510:	mov	r0, r7
   13514:	mov	r1, r5
   13518:	mov	r2, #1
   1351c:	bl	1a2ec <__assert_fail@plt+0x8424>
   13520:	mov	r0, r7
   13524:	bl	18a8c <__assert_fail@plt+0x6bc4>
   13528:	cmp	r0, r5
   1352c:	bne	13ee8 <__assert_fail@plt+0x2020>
   13530:	ldrh	r6, [r5, #56]	; 0x38
   13534:	cmp	r6, #13
   13538:	cmpne	r6, #10
   1353c:	bne	13660 <__assert_fail@plt+0x1798>
   13540:	movw	r1, #45844	; 0xb314
   13544:	ldr	r4, [r5, #32]
   13548:	mov	r0, #0
   1354c:	mov	r2, #5
   13550:	mov	r8, #0
   13554:	movt	r1, #3
   13558:	bl	11afc <dcgettext@plt>
   1355c:	ldr	r1, [sp, #120]	; 0x78
   13560:	mov	r5, r0
   13564:	mov	r0, #4
   13568:	bl	1fc9c <__assert_fail@plt+0xddd4>
   1356c:	mov	r3, r0
   13570:	mov	r1, r4
   13574:	movw	r4, #53824	; 0xd240
   13578:	mov	r0, #0
   1357c:	mov	r2, r5
   13580:	movt	r4, #4
   13584:	bl	11bd4 <error@plt>
   13588:	b	130f0 <__assert_fail@plt+0x1228>
   1358c:	sub	r1, r0, #1
   13590:	cmp	r9, r1
   13594:	bne	13ea8 <__assert_fail@plt+0x1fe0>
   13598:	ldr	r3, [r4, #52]	; 0x34
   1359c:	add	r0, r0, r0, lsl #1
   135a0:	str	r0, [sp, #72]	; 0x48
   135a4:	str	r3, [sp, #80]	; 0x50
   135a8:	ldr	r0, [r3, r0, lsl #4]!
   135ac:	ldr	r1, [r3, #4]
   135b0:	str	r0, [sp, #68]	; 0x44
   135b4:	adds	r0, r0, sl
   135b8:	str	r1, [sp, #64]	; 0x40
   135bc:	adcs	ip, r1, r8
   135c0:	mov	r1, #0
   135c4:	adcs	r2, r1, #0
   135c8:	movne	r0, lr
   135cc:	movne	ip, lr
   135d0:	str	ip, [sp, #148]	; 0x94
   135d4:	str	r0, [sp, #144]	; 0x90
   135d8:	str	r0, [sp, #96]	; 0x60
   135dc:	ldr	r1, [r3, #8]
   135e0:	ldr	r0, [r3, #12]
   135e4:	str	r1, [sp, #52]	; 0x34
   135e8:	adds	r1, r1, #1
   135ec:	str	r0, [sp, #56]	; 0x38
   135f0:	adc	r2, r0, #0
   135f4:	ldr	r0, [sp, #92]	; 0x5c
   135f8:	str	r1, [sp, #104]	; 0x68
   135fc:	str	r2, [sp, #100]	; 0x64
   13600:	stm	r0, {r1, r2}
   13604:	ldr	r1, [sp, #128]	; 0x80
   13608:	ldr	r2, [r3, #16]!
   1360c:	mov	r0, r3
   13610:	str	r3, [sp, #76]	; 0x4c
   13614:	ldr	r3, [r0, #4]!
   13618:	str	r0, [sp, #60]	; 0x3c
   1361c:	mov	r7, r1
   13620:	mov	r0, r5
   13624:	cmp	r2, r5
   13628:	mov	r2, #0
   1362c:	movwlt	r2, #1
   13630:	subgt	r2, r2, #1
   13634:	cmp	r3, r1
   13638:	mov	r3, #0
   1363c:	movwlt	r3, #1
   13640:	subgt	r3, r3, #1
   13644:	add	r2, r3, r2, lsl #1
   13648:	cmn	r2, #1
   1364c:	ble	136f8 <__assert_fail@plt+0x1830>
   13650:	ldrb	r2, [r4, #5]
   13654:	cmp	r2, #0
   13658:	beq	13714 <__assert_fail@plt+0x184c>
   1365c:	b	137b8 <__assert_fail@plt+0x18f0>
   13660:	ldrb	r1, [r7, #48]	; 0x30
   13664:	add	r0, r5, #64	; 0x40
   13668:	tst	r1, #64	; 0x40
   1366c:	beq	136a4 <__assert_fail@plt+0x17dc>
   13670:	ldr	r1, [r5, #48]	; 0x30
   13674:	cmp	r1, #1
   13678:	blt	136a4 <__assert_fail@plt+0x17dc>
   1367c:	ldr	r1, [sp, #28]
   13680:	ldrd	r2, [r0]
   13684:	ldr	r4, [r1]
   13688:	ldr	r1, [r1, #4]
   1368c:	eor	r2, r4, r2
   13690:	movw	r4, #53824	; 0xd240
   13694:	eor	r1, r1, r3
   13698:	movt	r4, #4
   1369c:	orrs	r1, r2, r1
   136a0:	bne	132fc <__assert_fail@plt+0x1434>
   136a4:	ldrb	r1, [r4, #4]
   136a8:	cmp	r1, #0
   136ac:	bne	13960 <__assert_fail@plt+0x1a98>
   136b0:	ldrb	r1, [r4, #8]
   136b4:	cmp	r1, #0
   136b8:	beq	13944 <__assert_fail@plt+0x1a7c>
   136bc:	add	r1, r5, #160	; 0xa0
   136c0:	ldrd	r2, [r0]
   136c4:	ldr	r0, [r4, #36]	; 0x24
   136c8:	ldr	r4, [r1]
   136cc:	ldr	r1, [r1, #4]
   136d0:	str	r4, [sp]
   136d4:	str	r1, [sp, #4]
   136d8:	bl	14b14 <__assert_fail@plt+0x2c4c>
   136dc:	cmn	r0, #1
   136e0:	ble	13f6c <__assert_fail@plt+0x20a4>
   136e4:	movw	r4, #53824	; 0xd240
   136e8:	cmp	r0, #0
   136ec:	movt	r4, #4
   136f0:	bne	13960 <__assert_fail@plt+0x1a98>
   136f4:	b	132fc <__assert_fail@plt+0x1434>
   136f8:	ldr	r0, [sp, #76]	; 0x4c
   136fc:	ldr	r2, [sp, #88]	; 0x58
   13700:	ldm	r0, {r0, r7}
   13704:	stm	r2, {r0, r7}
   13708:	ldrb	r2, [r4, #5]
   1370c:	cmp	r2, #0
   13710:	bne	137b8 <__assert_fail@plt+0x18f0>
   13714:	ldr	r1, [sp, #72]	; 0x48
   13718:	ldr	r2, [sp, #80]	; 0x50
   1371c:	ldr	r6, [sp, #100]	; 0x64
   13720:	add	r2, r2, r1, lsl #4
   13724:	ldr	r1, [sp, #96]	; 0x60
   13728:	ldr	r5, [r2, #24]
   1372c:	ldr	r3, [r2, #28]
   13730:	adds	r1, r5, r1
   13734:	adcs	ip, r3, ip
   13738:	mov	r3, #0
   1373c:	adcs	r3, r3, #0
   13740:	movne	r1, lr
   13744:	movne	ip, lr
   13748:	str	ip, [sp, #148]	; 0x94
   1374c:	str	r1, [sp, #144]	; 0x90
   13750:	str	r1, [sp, #96]	; 0x60
   13754:	ldr	r1, [sp, #104]	; 0x68
   13758:	ldr	r3, [r2, #32]
   1375c:	ldr	r5, [r2, #36]	; 0x24
   13760:	adds	r1, r3, r1
   13764:	ldr	r3, [sp, #92]	; 0x5c
   13768:	adc	r6, r5, r6
   1376c:	str	r1, [sp, #104]	; 0x68
   13770:	str	r6, [sp, #100]	; 0x64
   13774:	stm	r3, {r1, r6}
   13778:	ldr	r3, [r2, #40]!	; 0x28
   1377c:	ldr	r5, [r2, #4]
   13780:	cmp	r0, r3
   13784:	mov	r3, #0
   13788:	movwgt	r3, #1
   1378c:	sublt	r3, r3, #1
   13790:	cmp	r7, r5
   13794:	mov	r5, #0
   13798:	movwgt	r5, #1
   1379c:	sublt	r5, r5, #1
   137a0:	add	r3, r5, r3, lsl #1
   137a4:	cmn	r3, #1
   137a8:	bgt	137b8 <__assert_fail@plt+0x18f0>
   137ac:	ldrd	r2, [r2]
   137b0:	ldr	r0, [sp, #88]	; 0x58
   137b4:	strd	r2, [r0]
   137b8:	ldr	r0, [sp, #80]	; 0x50
   137bc:	add	r2, r9, r9, lsl #1
   137c0:	add	r3, r0, r2, lsl #4
   137c4:	ldr	r0, [sp, #68]	; 0x44
   137c8:	ldr	r2, [r3, #24]!
   137cc:	ldr	r5, [r3, #4]
   137d0:	ldr	r1, [r3, #12]
   137d4:	adds	r6, r2, r0
   137d8:	ldr	r0, [sp, #64]	; 0x40
   137dc:	adcs	r7, r5, r0
   137e0:	mov	r0, #0
   137e4:	mov	r5, r3
   137e8:	adcs	r0, r0, #0
   137ec:	ldr	r2, [r5, #8]!
   137f0:	str	r0, [sp, #68]	; 0x44
   137f4:	ldr	r0, [sp, #52]	; 0x34
   137f8:	movne	r6, lr
   137fc:	str	r5, [sp, #52]	; 0x34
   13800:	adds	r0, r2, r0
   13804:	str	r0, [sp, #64]	; 0x40
   13808:	str	r0, [r5]
   1380c:	ldr	r0, [sp, #56]	; 0x38
   13810:	adc	r0, r1, r0
   13814:	str	r0, [sp, #56]	; 0x38
   13818:	str	r0, [r3, #12]
   1381c:	ldr	r0, [sp, #68]	; 0x44
   13820:	cmp	r0, #0
   13824:	movne	r7, lr
   13828:	mov	lr, #0
   1382c:	strd	r6, [r3]
   13830:	ldr	r0, [sp, #76]	; 0x4c
   13834:	ldr	r2, [r0]
   13838:	mov	r0, r3
   1383c:	ldr	r1, [r0, #16]!
   13840:	str	r0, [sp, #36]	; 0x24
   13844:	ldr	r0, [sp, #60]	; 0x3c
   13848:	cmp	r1, r2
   1384c:	mov	r2, r3
   13850:	ldr	r5, [r2, #20]!
   13854:	ldr	r0, [r0]
   13858:	movwgt	lr, #1
   1385c:	sublt	lr, lr, #1
   13860:	cmp	r5, r0
   13864:	str	r5, [sp, #68]	; 0x44
   13868:	mov	r5, #0
   1386c:	movwgt	r5, #1
   13870:	sublt	r5, r5, #1
   13874:	add	r5, r5, lr, lsl #1
   13878:	mov	lr, r1
   1387c:	cmn	r5, #1
   13880:	bgt	138a4 <__assert_fail@plt+0x19dc>
   13884:	ldr	r0, [sp, #76]	; 0x4c
   13888:	ldr	lr, [r0]
   1388c:	ldr	r5, [r0, #4]
   13890:	ldr	r0, [sp, #36]	; 0x24
   13894:	str	lr, [r0]
   13898:	str	r5, [r0, #4]
   1389c:	ldr	r0, [r2]
   138a0:	str	r0, [sp, #68]	; 0x44
   138a4:	ldr	r0, [sp, #72]	; 0x48
   138a8:	ldr	r1, [sp, #80]	; 0x50
   138ac:	add	r2, r1, r0, lsl #4
   138b0:	ldr	r5, [r2, #24]
   138b4:	ldr	r1, [r2, #28]
   138b8:	adds	r0, r5, r6
   138bc:	mov	r5, #0
   138c0:	adcs	r1, r1, r7
   138c4:	adcs	r5, r5, #0
   138c8:	mvn	r5, #0
   138cc:	movne	r1, r5
   138d0:	movne	r0, r5
   138d4:	strd	r0, [r3]
   138d8:	ldr	r0, [r2, #32]
   138dc:	ldr	r3, [sp, #64]	; 0x40
   138e0:	ldr	r1, [r2, #36]	; 0x24
   138e4:	adds	r0, r0, r3
   138e8:	ldr	r3, [sp, #56]	; 0x38
   138ec:	adc	r1, r1, r3
   138f0:	ldr	r3, [sp, #52]	; 0x34
   138f4:	strd	r0, [r3]
   138f8:	ldr	r0, [r2, #40]!	; 0x28
   138fc:	ldr	r3, [sp, #68]	; 0x44
   13900:	ldr	r1, [r2, #4]
   13904:	cmp	lr, r0
   13908:	mov	r0, #0
   1390c:	mvn	lr, #0
   13910:	movwgt	r0, #1
   13914:	sublt	r0, r0, #1
   13918:	cmp	r3, r1
   1391c:	mov	r1, #0
   13920:	movwgt	r1, #1
   13924:	sublt	r1, r1, #1
   13928:	add	r0, r1, r0, lsl #1
   1392c:	cmn	r0, #1
   13930:	bgt	1335c <__assert_fail@plt+0x1494>
   13934:	ldrd	r0, [r2]
   13938:	ldr	r2, [sp, #36]	; 0x24
   1393c:	strd	r0, [r2]
   13940:	b	1335c <__assert_fail@plt+0x1494>
   13944:	ldr	r1, [r5, #80]	; 0x50
   13948:	and	r1, r1, #61440	; 0xf000
   1394c:	cmp	r1, #16384	; 0x4000
   13950:	beq	13960 <__assert_fail@plt+0x1a98>
   13954:	ldr	r1, [r5, #84]	; 0x54
   13958:	cmp	r1, #2
   1395c:	bcs	136bc <__assert_fail@plt+0x17f4>
   13960:	mov	r8, #1
   13964:	cmp	r6, #1
   13968:	beq	130f0 <__assert_fail@plt+0x1228>
   1396c:	cmp	r6, #2
   13970:	beq	139bc <__assert_fail@plt+0x1af4>
   13974:	cmp	r6, #7
   13978:	bne	13180 <__assert_fail@plt+0x12b8>
   1397c:	ldr	r2, [sp, #120]	; 0x78
   13980:	ldr	r4, [r5, #32]
   13984:	mov	r0, #0
   13988:	mov	r1, #3
   1398c:	mov	r8, #0
   13990:	bl	1ff18 <__assert_fail@plt+0xe050>
   13994:	movw	r2, #46766	; 0xb6ae
   13998:	mov	r3, r0
   1399c:	mov	r1, r4
   139a0:	movw	r4, #53824	; 0xd240
   139a4:	mov	r0, #0
   139a8:	movt	r2, #3
   139ac:	movt	r4, #4
   139b0:	bl	11bd4 <error@plt>
   139b4:	mov	r6, #7
   139b8:	b	13180 <__assert_fail@plt+0x12b8>
   139bc:	mov	r0, r7
   139c0:	mov	r1, r5
   139c4:	bl	35cf4 <__assert_fail@plt+0x23e2c>
   139c8:	cmp	r0, #0
   139cc:	beq	130f0 <__assert_fail@plt+0x1228>
   139d0:	ldr	r0, [r4, #40]	; 0x28
   139d4:	ldr	r7, [r5]
   139d8:	cmp	r0, #0
   139dc:	bne	13a84 <__assert_fail@plt+0x1bbc>
   139e0:	bl	14a04 <__assert_fail@plt+0x2b3c>
   139e4:	movw	r1, #53824	; 0xd240
   139e8:	cmp	r0, #0
   139ec:	movt	r1, #4
   139f0:	str	r0, [r1, #40]	; 0x28
   139f4:	beq	13f6c <__assert_fail@plt+0x20a4>
   139f8:	mov	r0, #0
   139fc:	bl	1d43c <__assert_fail@plt+0xb574>
   13a00:	cmp	r0, #0
   13a04:	beq	13a84 <__assert_fail@plt+0x1bbc>
   13a08:	mov	r6, r0
   13a0c:	ldrb	r0, [r6, #24]
   13a10:	tst	r0, #3
   13a14:	beq	13a3c <__assert_fail@plt+0x1b74>
   13a18:	ldr	r4, [r6, #28]
   13a1c:	mov	r0, r6
   13a20:	bl	1e124 <__assert_fail@plt+0xc25c>
   13a24:	cmp	r4, #0
   13a28:	mov	r6, r4
   13a2c:	beq	13a84 <__assert_fail@plt+0x1bbc>
   13a30:	ldrb	r0, [r6, #24]
   13a34:	tst	r0, #3
   13a38:	bne	13a18 <__assert_fail@plt+0x1b50>
   13a3c:	ldr	r1, [r6, #4]
   13a40:	mov	r0, #3
   13a44:	sub	r2, fp, #160	; 0xa0
   13a48:	bl	11e5c <__xstat64@plt>
   13a4c:	cmp	r0, #0
   13a50:	bne	13a18 <__assert_fail@plt+0x1b50>
   13a54:	ldr	r1, [sp, #24]
   13a58:	movw	r0, #53824	; 0xd240
   13a5c:	ldr	r2, [fp, #-160]	; 0xffffff60
   13a60:	ldr	r3, [fp, #-156]	; 0xffffff64
   13a64:	movt	r0, #4
   13a68:	ldr	r0, [r0, #40]	; 0x28
   13a6c:	ldrd	r8, [r1]
   13a70:	stm	sp, {r8, r9}
   13a74:	bl	14b14 <__assert_fail@plt+0x2c4c>
   13a78:	cmn	r0, #1
   13a7c:	bgt	13a18 <__assert_fail@plt+0x1b50>
   13a80:	b	13f6c <__assert_fail@plt+0x20a4>
   13a84:	cmp	r7, r5
   13a88:	beq	13ac8 <__assert_fail@plt+0x1c00>
   13a8c:	movw	r0, #53824	; 0xd240
   13a90:	ldrd	r2, [r5, #64]	; 0x40
   13a94:	ldr	r4, [r5, #160]	; 0xa0
   13a98:	ldr	r1, [r5, #164]	; 0xa4
   13a9c:	movt	r0, #4
   13aa0:	ldr	r0, [r0, #40]	; 0x28
   13aa4:	str	r4, [sp]
   13aa8:	str	r1, [sp, #4]
   13aac:	bl	14c58 <__assert_fail@plt+0x2d90>
   13ab0:	cmp	r0, #0
   13ab4:	bgt	13b1c <__assert_fail@plt+0x1c54>
   13ab8:	ldr	r5, [r5, #4]
   13abc:	cmp	r5, #0
   13ac0:	cmpne	r5, r7
   13ac4:	bne	13a8c <__assert_fail@plt+0x1bc4>
   13ac8:	movw	r1, #45861	; 0xb325
   13acc:	mov	r0, #0
   13ad0:	mov	r2, #5
   13ad4:	mov	r8, #0
   13ad8:	movt	r1, #3
   13adc:	bl	11afc <dcgettext@plt>
   13ae0:	ldr	r2, [sp, #120]	; 0x78
   13ae4:	mov	r4, r0
   13ae8:	mov	r0, #0
   13aec:	mov	r1, #3
   13af0:	bl	1ff18 <__assert_fail@plt+0xe050>
   13af4:	mov	r3, r0
   13af8:	mov	r0, #0
   13afc:	mov	r1, #0
   13b00:	mov	r2, r4
   13b04:	bl	11bd4 <error@plt>
   13b08:	ldr	r7, [sp, #84]	; 0x54
   13b0c:	movw	r4, #53824	; 0xd240
   13b10:	mov	r9, #0
   13b14:	movt	r4, #4
   13b18:	b	130f0 <__assert_fail@plt+0x1228>
   13b1c:	ldr	r7, [sp, #84]	; 0x54
   13b20:	movw	r4, #53824	; 0xd240
   13b24:	mov	r9, #0
   13b28:	mov	r8, #1
   13b2c:	movt	r4, #4
   13b30:	b	130f0 <__assert_fail@plt+0x1228>
   13b34:	movw	r1, #44611	; 0xae43
   13b38:	mov	r0, #0
   13b3c:	mov	r2, #5
   13b40:	mov	r6, #0
   13b44:	movt	r1, #3
   13b48:	bl	11afc <dcgettext@plt>
   13b4c:	movw	r2, #46766	; 0xb6ae
   13b50:	mov	r3, r0
   13b54:	mov	r0, #0
   13b58:	mov	r1, #0
   13b5c:	movt	r2, #3
   13b60:	b	13014 <__assert_fail@plt+0x114c>
   13b64:	mov	sl, #1
   13b68:	mov	r9, #0
   13b6c:	bl	11cdc <__errno_location@plt>
   13b70:	ldr	r5, [r0]
   13b74:	mov	r4, r0
   13b78:	cmp	r5, #0
   13b7c:	beq	13bc4 <__assert_fail@plt+0x1cfc>
   13b80:	movw	r1, #45737	; 0xb2a9
   13b84:	mov	r0, #0
   13b88:	mov	r2, #5
   13b8c:	mov	sl, #0
   13b90:	movt	r1, #3
   13b94:	bl	11afc <dcgettext@plt>
   13b98:	ldr	r2, [r7, #24]
   13b9c:	mov	r6, r0
   13ba0:	mov	r0, #0
   13ba4:	mov	r1, #3
   13ba8:	bl	1ff18 <__assert_fail@plt+0xe050>
   13bac:	mov	r3, r0
   13bb0:	mov	r0, #0
   13bb4:	mov	r1, r5
   13bb8:	mov	r2, r6
   13bbc:	mov	r9, #0
   13bc0:	bl	11bd4 <error@plt>
   13bc4:	movw	r0, #53824	; 0xd240
   13bc8:	movt	r0, #4
   13bcc:	str	r9, [r0, #44]	; 0x2c
   13bd0:	mov	r0, r7
   13bd4:	bl	188c4 <__assert_fail@plt+0x69fc>
   13bd8:	cmp	r0, #0
   13bdc:	beq	13c0c <__assert_fail@plt+0x1d44>
   13be0:	movw	r1, #45757	; 0xb2bd
   13be4:	ldr	r4, [r4]
   13be8:	mov	r0, #0
   13bec:	mov	r2, #5
   13bf0:	mov	sl, #0
   13bf4:	movt	r1, #3
   13bf8:	bl	11afc <dcgettext@plt>
   13bfc:	mov	r2, r0
   13c00:	mov	r0, #0
   13c04:	mov	r1, r4
   13c08:	bl	11bd4 <error@plt>
   13c0c:	ldr	r0, [sp, #44]	; 0x2c
   13c10:	cmp	sl, #0
   13c14:	movw	r4, #53824	; 0xd240
   13c18:	movwne	sl, #1
   13c1c:	movt	r4, #4
   13c20:	and	r6, r0, sl
   13c24:	b	13018 <__assert_fail@plt+0x1150>
   13c28:	movw	r1, #44548	; 0xae04
   13c2c:	mov	r0, #0
   13c30:	mov	r2, #5
   13c34:	movt	r1, #3
   13c38:	bl	11afc <dcgettext@plt>
   13c3c:	mov	r4, r0
   13c40:	mov	r0, #4
   13c44:	mov	r1, r5
   13c48:	bl	1fc9c <__assert_fail@plt+0xddd4>
   13c4c:	mov	r3, r0
   13c50:	mov	r2, r4
   13c54:	movw	r4, #53824	; 0xd240
   13c58:	mov	r0, #0
   13c5c:	mov	r1, #0
   13c60:	movt	r4, #4
   13c64:	bl	11bd4 <error@plt>
   13c68:	mov	r0, #1
   13c6c:	ldrb	r1, [r5]
   13c70:	cmp	r1, #0
   13c74:	bne	13090 <__assert_fail@plt+0x11c8>
   13c78:	b	12fac <__assert_fail@plt+0x10e4>
   13c7c:	cmp	r1, r6
   13c80:	add	r0, sp, #136	; 0x88
   13c84:	addlt	r0, r5, r1, lsl #2
   13c88:	bl	14788 <__assert_fail@plt+0x28c0>
   13c8c:	mov	r5, r0
   13c90:	ldr	r0, [r7]
   13c94:	mov	r1, #0
   13c98:	add	r0, r0, #1
   13c9c:	cmp	r0, r6
   13ca0:	ldr	r0, [sp, #128]	; 0x80
   13ca4:	movwlt	r1, #1
   13ca8:	sub	r0, r0, #2
   13cac:	clz	r0, r0
   13cb0:	lsr	r0, r0, #5
   13cb4:	orr	r0, r0, r1
   13cb8:	cmp	r5, #0
   13cbc:	strb	r0, [r4, #8]
   13cc0:	bne	12f40 <__assert_fail@plt+0x1078>
   13cc4:	b	13f6c <__assert_fail@plt+0x20a4>
   13cc8:	mov	r6, #1
   13ccc:	ldr	r0, [sp, #132]	; 0x84
   13cd0:	cmp	r0, #2
   13cd4:	beq	13d30 <__assert_fail@plt+0x1e68>
   13cd8:	cmp	r0, #4
   13cdc:	bne	13f64 <__assert_fail@plt+0x209c>
   13ce0:	bl	11cdc <__errno_location@plt>
   13ce4:	movw	r1, #44461	; 0xadad
   13ce8:	ldr	r4, [r0]
   13cec:	mov	r0, #0
   13cf0:	mov	r2, #5
   13cf4:	mov	r6, #0
   13cf8:	movt	r1, #3
   13cfc:	bl	11afc <dcgettext@plt>
   13d00:	ldr	r2, [sp, #40]	; 0x28
   13d04:	mov	r5, r0
   13d08:	mov	r0, #0
   13d0c:	mov	r1, #3
   13d10:	bl	1ff18 <__assert_fail@plt+0xe050>
   13d14:	mov	r3, r0
   13d18:	mov	r0, #0
   13d1c:	mov	r1, r4
   13d20:	mov	r2, r5
   13d24:	bl	11bd4 <error@plt>
   13d28:	movw	r4, #53824	; 0xd240
   13d2c:	movt	r4, #4
   13d30:	ldr	r0, [sp, #48]	; 0x30
   13d34:	bl	148cc <__assert_fail@plt+0x2a04>
   13d38:	ldr	r0, [r4, #36]	; 0x24
   13d3c:	bl	14adc <__assert_fail@plt+0x2c14>
   13d40:	ldr	r0, [r4, #40]	; 0x28
   13d44:	cmp	r0, #0
   13d48:	beq	13d50 <__assert_fail@plt+0x1e88>
   13d4c:	bl	14adc <__assert_fail@plt+0x2c14>
   13d50:	ldr	r0, [sp, #40]	; 0x28
   13d54:	cmp	r0, #0
   13d58:	beq	13dc8 <__assert_fail@plt+0x1f00>
   13d5c:	movw	r0, #53808	; 0xd230
   13d60:	movt	r0, #4
   13d64:	ldr	r0, [r0]
   13d68:	ldrb	r1, [r0]
   13d6c:	tst	r1, #32
   13d70:	bne	13dc0 <__assert_fail@plt+0x1ef8>
   13d74:	bl	16070 <__assert_fail@plt+0x41a8>
   13d78:	cmp	r0, #0
   13d7c:	beq	13dc8 <__assert_fail@plt+0x1f00>
   13d80:	eors	r0, r6, #1
   13d84:	bne	13dc8 <__assert_fail@plt+0x1f00>
   13d88:	movw	r1, #44652	; 0xae6c
   13d8c:	mov	r0, #0
   13d90:	mov	r2, #5
   13d94:	movt	r1, #3
   13d98:	bl	11afc <dcgettext@plt>
   13d9c:	ldr	r1, [sp, #40]	; 0x28
   13da0:	mov	r4, r0
   13da4:	mov	r0, #4
   13da8:	bl	1fc9c <__assert_fail@plt+0xddd4>
   13dac:	mov	r3, r0
   13db0:	mov	r0, #1
   13db4:	mov	r1, #0
   13db8:	mov	r2, r4
   13dbc:	bl	11bd4 <error@plt>
   13dc0:	cmp	r6, #0
   13dc4:	bne	13d88 <__assert_fail@plt+0x1ec0>
   13dc8:	ldrb	r0, [r4, #3]
   13dcc:	cmp	r0, #1
   13dd0:	bne	13df4 <__assert_fail@plt+0x1f2c>
   13dd4:	movw	r1, #44669	; 0xae7d
   13dd8:	mov	r0, #0
   13ddc:	mov	r2, #5
   13de0:	movt	r1, #3
   13de4:	bl	11afc <dcgettext@plt>
   13de8:	mov	r1, r0
   13dec:	add	r0, r4, #80	; 0x50
   13df0:	bl	140ac <__assert_fail@plt+0x21e4>
   13df4:	eor	r0, r6, #1
   13df8:	sub	sp, fp, #48	; 0x30
   13dfc:	vpop	{d8-d9}
   13e00:	add	sp, sp, #4
   13e04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e08:	movw	r8, #46572	; 0xb5ec
   13e0c:	movw	r4, #53824	; 0xd240
   13e10:	movt	r8, #3
   13e14:	movt	r4, #4
   13e18:	add	r7, r7, #6
   13e1c:	mov	r1, r8
   13e20:	mov	r2, #6
   13e24:	mov	r0, r7
   13e28:	str	r7, [r4, #28]
   13e2c:	bl	11e80 <strncmp@plt>
   13e30:	cmp	r0, #0
   13e34:	beq	13e18 <__assert_fail@plt+0x1f50>
   13e38:	b	12e04 <__assert_fail@plt+0xf3c>
   13e3c:	movw	r0, #53708	; 0xd1cc
   13e40:	movw	r2, #44052	; 0xac14
   13e44:	movw	r5, #44006	; 0xabe6
   13e48:	movw	r7, #44040	; 0xac08
   13e4c:	movw	r6, #44024	; 0xabf8
   13e50:	mov	r1, #0
   13e54:	movt	r0, #4
   13e58:	movt	r2, #3
   13e5c:	movt	r5, #3
   13e60:	movt	r7, #3
   13e64:	movt	r6, #3
   13e68:	ldr	r3, [r0]
   13e6c:	movw	r0, #53812	; 0xd234
   13e70:	stm	sp, {r5, r6, r7}
   13e74:	str	r2, [sp, #12]
   13e78:	movw	r2, #43992	; 0xabd8
   13e7c:	str	r1, [sp, #16]
   13e80:	movw	r1, #43846	; 0xab46
   13e84:	movt	r0, #4
   13e88:	movt	r1, #3
   13e8c:	movt	r2, #3
   13e90:	ldr	r0, [r0]
   13e94:	bl	354f4 <__assert_fail@plt+0x2362c>
   13e98:	mov	r0, #0
   13e9c:	bl	11c88 <exit@plt>
   13ea0:	mov	r0, #0
   13ea4:	bl	11fd0 <__assert_fail@plt+0x108>
   13ea8:	movw	r0, #46047	; 0xb3df
   13eac:	movw	r1, #44516	; 0xade4
   13eb0:	movw	r3, #45808	; 0xb2f0
   13eb4:	movw	r2, #638	; 0x27e
   13eb8:	movt	r0, #3
   13ebc:	movt	r1, #3
   13ec0:	movt	r3, #3
   13ec4:	bl	11ec8 <__assert_fail@plt>
   13ec8:	movw	r0, #45799	; 0xb2e7
   13ecc:	movw	r1, #44516	; 0xade4
   13ed0:	movw	r3, #45808	; 0xb2f0
   13ed4:	mov	r2, #560	; 0x230
   13ed8:	movt	r0, #3
   13edc:	movt	r1, #3
   13ee0:	movt	r3, #3
   13ee4:	bl	11ec8 <__assert_fail@plt>
   13ee8:	movw	r0, #45799	; 0xb2e7
   13eec:	movw	r1, #44516	; 0xade4
   13ef0:	movw	r3, #45808	; 0xb2f0
   13ef4:	movw	r2, #527	; 0x20f
   13ef8:	movt	r0, #3
   13efc:	movt	r1, #3
   13f00:	movt	r3, #3
   13f04:	bl	11ec8 <__assert_fail@plt>
   13f08:	ldr	r2, [r4]
   13f0c:	ldr	r1, [sp, #144]	; 0x90
   13f10:	movw	r3, #46112	; 0xb420
   13f14:	movt	r3, #3
   13f18:	str	r2, [sp]
   13f1c:	mov	r2, #116	; 0x74
   13f20:	bl	37684 <__assert_fail@plt+0x257bc>
   13f24:	movw	r1, #43948	; 0xabac
   13f28:	mov	r0, #0
   13f2c:	mov	r2, #5
   13f30:	movt	r1, #3
   13f34:	bl	11afc <dcgettext@plt>
   13f38:	mov	r2, r0
   13f3c:	mov	r0, #1
   13f40:	mov	r1, #0
   13f44:	bl	11bd4 <error@plt>
   13f48:	ldr	r2, [r4]
   13f4c:	ldr	r1, [sp, #144]	; 0x90
   13f50:	movw	r3, #46112	; 0xb420
   13f54:	movt	r3, #3
   13f58:	str	r2, [sp]
   13f5c:	mov	r2, #66	; 0x42
   13f60:	bl	37684 <__assert_fail@plt+0x257bc>
   13f64:	cmp	r0, #3
   13f68:	bne	13fa4 <__assert_fail@plt+0x20dc>
   13f6c:	bl	35c64 <__assert_fail@plt+0x23d9c>
   13f70:	mov	r0, #1
   13f74:	bl	11fd0 <__assert_fail@plt+0x108>
   13f78:	movw	r1, #44065	; 0xac21
   13f7c:	mov	r0, #0
   13f80:	mov	r2, #5
   13f84:	movt	r1, #3
   13f88:	bl	11afc <dcgettext@plt>
   13f8c:	mov	r2, r0
   13f90:	mov	r0, #0
   13f94:	mov	r1, #0
   13f98:	bl	11bd4 <error@plt>
   13f9c:	mov	r0, #1
   13fa0:	bl	11fd0 <__assert_fail@plt+0x108>
   13fa4:	movw	r0, #44476	; 0xadbc
   13fa8:	movw	r1, #44516	; 0xade4
   13fac:	movw	r3, #44525	; 0xaded
   13fb0:	movw	r2, #1081	; 0x439
   13fb4:	movt	r0, #3
   13fb8:	movt	r1, #3
   13fbc:	movt	r3, #3
   13fc0:	bl	11ec8 <__assert_fail@plt>
   13fc4:	movw	r1, #44365	; 0xad4d
   13fc8:	mov	r0, #0
   13fcc:	mov	r2, #5
   13fd0:	movt	r1, #3
   13fd4:	bl	11afc <dcgettext@plt>
   13fd8:	mov	r4, r0
   13fdc:	ldr	r0, [r7]
   13fe0:	ldr	r0, [r5, r0, lsl #2]
   13fe4:	bl	201c4 <__assert_fail@plt+0xe2fc>
   13fe8:	mov	r3, r0
   13fec:	mov	r0, #0
   13ff0:	mov	r1, #0
   13ff4:	mov	r2, r4
   13ff8:	bl	11bd4 <error@plt>
   13ffc:	movw	r0, #53800	; 0xd228
   14000:	movw	r1, #44382	; 0xad5e
   14004:	mov	r2, #5
   14008:	movt	r0, #4
   1400c:	movt	r1, #3
   14010:	ldr	r4, [r0]
   14014:	mov	r0, #0
   14018:	bl	11afc <dcgettext@plt>
   1401c:	movw	r2, #46043	; 0xb3db
   14020:	mov	r3, r0
   14024:	mov	r0, r4
   14028:	mov	r1, #1
   1402c:	movt	r2, #3
   14030:	bl	11d3c <__fprintf_chk@plt>
   14034:	mov	r0, #1
   14038:	bl	11fd0 <__assert_fail@plt+0x108>
   1403c:	movw	r1, #44164	; 0xac84
   14040:	mov	r0, #0
   14044:	mov	r2, #5
   14048:	movt	r1, #3
   1404c:	bl	11afc <dcgettext@plt>
   14050:	mov	r2, r0
   14054:	mov	r0, #0
   14058:	mov	r1, #0
   1405c:	mov	r3, r4
   14060:	bl	11bd4 <error@plt>
   14064:	mov	r0, #1
   14068:	bl	11fd0 <__assert_fail@plt+0x108>
   1406c:	bl	11cdc <__errno_location@plt>
   14070:	movw	r1, #44434	; 0xad92
   14074:	ldr	r4, [r0]
   14078:	mov	r0, #0
   1407c:	mov	r2, #5
   14080:	movt	r1, #3
   14084:	bl	11afc <dcgettext@plt>
   14088:	mov	r5, r0
   1408c:	mov	r0, #4
   14090:	mov	r1, r6
   14094:	bl	1fc9c <__assert_fail@plt+0xddd4>
   14098:	mov	r3, r0
   1409c:	mov	r0, #1
   140a0:	mov	r1, r4
   140a4:	mov	r2, r5
   140a8:	bl	11bd4 <error@plt>
   140ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   140b0:	add	fp, sp, #28
   140b4:	sub	sp, sp, #708	; 0x2c4
   140b8:	movw	sl, #53824	; 0xd240
   140bc:	mov	r5, r0
   140c0:	mov	r8, r1
   140c4:	movt	sl, #4
   140c8:	ldrb	r0, [sl, #6]
   140cc:	cmp	r0, #0
   140d0:	mov	r0, r5
   140d4:	addne	r0, r0, #8
   140d8:	ldrd	r0, [r0]
   140dc:	and	r2, r0, r1
   140e0:	cmn	r2, #1
   140e4:	beq	14114 <__assert_fail@plt+0x224c>
   140e8:	ldr	r2, [sl, #56]	; 0x38
   140ec:	ldr	r3, [sl, #16]
   140f0:	ldr	r7, [sl, #60]	; 0x3c
   140f4:	mov	r4, #1
   140f8:	mov	r6, #0
   140fc:	stm	sp, {r4, r6}
   14100:	str	r2, [sp, #8]
   14104:	add	r2, sp, #20
   14108:	str	r7, [sp, #12]
   1410c:	bl	1bbb0 <__assert_fail@plt+0x9ce8>
   14110:	b	14128 <__assert_fail@plt+0x2260>
   14114:	movw	r1, #46077	; 0xb3fd
   14118:	mov	r0, #0
   1411c:	mov	r2, #5
   14120:	movt	r1, #3
   14124:	bl	11afc <dcgettext@plt>
   14128:	movw	r9, #53812	; 0xd234
   1412c:	movt	r9, #4
   14130:	ldr	r1, [r9]
   14134:	bl	119e8 <fputs_unlocked@plt>
   14138:	ldrb	r0, [sl, #7]
   1413c:	cmp	r0, #1
   14140:	bne	14208 <__assert_fail@plt+0x2340>
   14144:	ldr	r0, [r9]
   14148:	ldr	r1, [r0, #20]
   1414c:	ldr	r2, [r0, #24]
   14150:	cmp	r1, r2
   14154:	bcs	1423c <__assert_fail@plt+0x2374>
   14158:	add	r2, r1, #1
   1415c:	str	r2, [r0, #20]
   14160:	mov	r0, #9
   14164:	strb	r0, [r1]
   14168:	ldrd	r0, [r5, #16]
   1416c:	ldr	r6, [sl, #24]
   14170:	ldr	r7, [sl, #32]
   14174:	add	r2, sp, #20
   14178:	str	r1, [fp, #-36]	; 0xffffffdc
   1417c:	str	r0, [fp, #-40]	; 0xffffffd8
   14180:	sub	r1, fp, #40	; 0x28
   14184:	mov	r0, r6
   14188:	bl	3494c <__assert_fail@plt+0x22a84>
   1418c:	cmp	r0, #0
   14190:	beq	141b4 <__assert_fail@plt+0x22ec>
   14194:	ldr	r1, [fp, #-36]	; 0xffffffdc
   14198:	ldr	r0, [r9]
   1419c:	add	r2, sp, #20
   141a0:	mov	r3, r6
   141a4:	str	r1, [sp]
   141a8:	mov	r1, r7
   141ac:	bl	16168 <__assert_fail@plt+0x42a0>
   141b0:	b	14208 <__assert_fail@plt+0x2340>
   141b4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   141b8:	sub	r2, fp, #61	; 0x3d
   141bc:	asr	r1, r0, #31
   141c0:	bl	1ceb4 <__assert_fail@plt+0xafec>
   141c4:	movw	r1, #46086	; 0xb406
   141c8:	mov	r5, r0
   141cc:	mov	r0, #0
   141d0:	mov	r2, #5
   141d4:	movt	r1, #3
   141d8:	bl	11afc <dcgettext@plt>
   141dc:	mov	r6, r0
   141e0:	mov	r0, r5
   141e4:	bl	201c4 <__assert_fail@plt+0xe2fc>
   141e8:	mov	r3, r0
   141ec:	mov	r0, #0
   141f0:	mov	r1, #0
   141f4:	mov	r2, r6
   141f8:	bl	11bd4 <error@plt>
   141fc:	ldr	r1, [r9]
   14200:	mov	r0, r5
   14204:	bl	119e8 <fputs_unlocked@plt>
   14208:	ldrb	r0, [sl]
   1420c:	movw	r1, #46071	; 0xb3f7
   14210:	mov	r3, #10
   14214:	mov	r2, r8
   14218:	movt	r1, #3
   1421c:	cmp	r0, #0
   14220:	mov	r0, #1
   14224:	movwne	r3, #0
   14228:	bl	11d24 <__printf_chk@plt>
   1422c:	ldr	r0, [r9]
   14230:	bl	11b50 <fflush_unlocked@plt>
   14234:	sub	sp, fp, #28
   14238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1423c:	mov	r1, #9
   14240:	bl	11d84 <__overflow@plt>
   14244:	b	14168 <__assert_fail@plt+0x22a0>
   14248:	mov	r0, #1
   1424c:	b	11fd0 <__assert_fail@plt+0x108>
   14250:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14254:	add	fp, sp, #28
   14258:	sub	sp, sp, #12
   1425c:	mov	r4, r3
   14260:	mov	r9, r2
   14264:	mov	r7, r1
   14268:	mov	r8, r0
   1426c:	bl	11cac <strlen@plt>
   14270:	ldr	r6, [r7]
   14274:	cmp	r6, #0
   14278:	beq	14324 <__assert_fail@plt+0x245c>
   1427c:	mov	r5, r0
   14280:	cmp	r9, #0
   14284:	beq	14334 <__assert_fail@plt+0x246c>
   14288:	add	r0, r7, #4
   1428c:	mvn	sl, #0
   14290:	mov	r7, #0
   14294:	str	r9, [sp]
   14298:	str	r0, [sp, #8]
   1429c:	mov	r0, #0
   142a0:	str	r0, [sp, #4]
   142a4:	mov	r0, r9
   142a8:	b	142ec <__assert_fail@plt+0x2424>
   142ac:	ldr	r0, [sp]
   142b0:	mov	r1, r9
   142b4:	mov	r2, r4
   142b8:	mla	r0, sl, r4, r0
   142bc:	bl	11ca0 <bcmp@plt>
   142c0:	ldr	r1, [sp, #4]
   142c4:	cmp	r0, #0
   142c8:	movwne	r0, #1
   142cc:	orr	r1, r1, r0
   142d0:	str	r1, [sp, #4]
   142d4:	ldr	r0, [sp, #8]
   142d8:	add	r9, r9, r4
   142dc:	ldr	r6, [r0, r7, lsl #2]
   142e0:	add	r7, r7, #1
   142e4:	cmp	r6, #0
   142e8:	beq	143a8 <__assert_fail@plt+0x24e0>
   142ec:	mov	r0, r6
   142f0:	mov	r1, r8
   142f4:	mov	r2, r5
   142f8:	bl	11e80 <strncmp@plt>
   142fc:	cmp	r0, #0
   14300:	bne	142d4 <__assert_fail@plt+0x240c>
   14304:	mov	r0, r6
   14308:	bl	11cac <strlen@plt>
   1430c:	cmp	r0, r5
   14310:	beq	14328 <__assert_fail@plt+0x2460>
   14314:	cmn	sl, #1
   14318:	bne	142ac <__assert_fail@plt+0x23e4>
   1431c:	mov	sl, r7
   14320:	b	142d4 <__assert_fail@plt+0x240c>
   14324:	mvn	r7, #0
   14328:	mov	r0, r7
   1432c:	sub	sp, fp, #28
   14330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14334:	add	r4, r7, #4
   14338:	mov	r0, #0
   1433c:	mvn	r9, #0
   14340:	mvn	sl, #0
   14344:	mov	r7, #0
   14348:	str	r0, [sp, #4]
   1434c:	b	1437c <__assert_fail@plt+0x24b4>
   14350:	ldr	r1, [sp, #4]
   14354:	subs	r0, sl, r9
   14358:	movwne	r0, #1
   1435c:	cmn	sl, #1
   14360:	moveq	sl, r7
   14364:	orr	r1, r1, r0
   14368:	str	r1, [sp, #4]
   1436c:	ldr	r6, [r4, r7, lsl #2]
   14370:	add	r7, r7, #1
   14374:	cmp	r6, #0
   14378:	beq	143a8 <__assert_fail@plt+0x24e0>
   1437c:	mov	r0, r6
   14380:	mov	r1, r8
   14384:	mov	r2, r5
   14388:	bl	11e80 <strncmp@plt>
   1438c:	cmp	r0, #0
   14390:	bne	1436c <__assert_fail@plt+0x24a4>
   14394:	mov	r0, r6
   14398:	bl	11cac <strlen@plt>
   1439c:	cmp	r0, r5
   143a0:	bne	14350 <__assert_fail@plt+0x2488>
   143a4:	b	14328 <__assert_fail@plt+0x2460>
   143a8:	ldr	r0, [sp, #4]
   143ac:	tst	r0, #1
   143b0:	mvnne	sl, #1
   143b4:	mov	r0, sl
   143b8:	sub	sp, fp, #28
   143bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   143c0:	push	{r4, r5, r6, r7, fp, lr}
   143c4:	add	fp, sp, #16
   143c8:	mov	r5, r0
   143cc:	ldr	r0, [r1]
   143d0:	mvn	r4, #0
   143d4:	cmp	r0, #0
   143d8:	beq	14404 <__assert_fail@plt+0x253c>
   143dc:	add	r7, r1, #4
   143e0:	mov	r6, #0
   143e4:	mov	r1, r5
   143e8:	bl	11a3c <strcmp@plt>
   143ec:	cmp	r0, #0
   143f0:	beq	1440c <__assert_fail@plt+0x2544>
   143f4:	ldr	r0, [r7, r6, lsl #2]
   143f8:	add	r6, r6, #1
   143fc:	cmp	r0, #0
   14400:	bne	143e4 <__assert_fail@plt+0x251c>
   14404:	mov	r0, r4
   14408:	pop	{r4, r5, r6, r7, fp, pc}
   1440c:	mov	r0, r6
   14410:	pop	{r4, r5, r6, r7, fp, pc}
   14414:	push	{r4, r5, r6, sl, fp, lr}
   14418:	add	fp, sp, #16
   1441c:	sub	sp, sp, #8
   14420:	mov	r5, r0
   14424:	movw	r0, #46679	; 0xb657
   14428:	mov	r4, r1
   1442c:	movw	r1, #46706	; 0xb672
   14430:	cmn	r2, #1
   14434:	mov	r2, #5
   14438:	movt	r0, #3
   1443c:	movt	r1, #3
   14440:	moveq	r1, r0
   14444:	mov	r0, #0
   14448:	bl	11afc <dcgettext@plt>
   1444c:	mov	r6, r0
   14450:	mov	r0, #0
   14454:	mov	r1, #8
   14458:	mov	r2, r4
   1445c:	bl	1fbf4 <__assert_fail@plt+0xdd2c>
   14460:	mov	r4, r0
   14464:	mov	r0, #1
   14468:	mov	r1, r5
   1446c:	bl	201b4 <__assert_fail@plt+0xe2ec>
   14470:	str	r0, [sp]
   14474:	mov	r0, #0
   14478:	mov	r1, #0
   1447c:	mov	r2, r6
   14480:	mov	r3, r4
   14484:	bl	11bd4 <error@plt>
   14488:	sub	sp, fp, #16
   1448c:	pop	{r4, r5, r6, sl, fp, pc}
   14490:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14494:	add	fp, sp, #28
   14498:	sub	sp, sp, #4
   1449c:	mov	sl, r1
   144a0:	movw	r1, #46735	; 0xb68f
   144a4:	mov	r4, r2
   144a8:	mov	r6, r0
   144ac:	mov	r0, #0
   144b0:	mov	r2, #5
   144b4:	mov	r8, #0
   144b8:	movt	r1, #3
   144bc:	bl	11afc <dcgettext@plt>
   144c0:	movw	r1, #53800	; 0xd228
   144c4:	movt	r1, #4
   144c8:	ldr	r1, [r1]
   144cc:	bl	119e8 <fputs_unlocked@plt>
   144d0:	ldr	r7, [r6]
   144d4:	cmp	r7, #0
   144d8:	beq	14594 <__assert_fail@plt+0x26cc>
   144dc:	add	r0, r6, #4
   144e0:	mov	r9, #0
   144e4:	mov	r6, #0
   144e8:	str	r0, [sp]
   144ec:	cmp	r9, #0
   144f0:	bne	14548 <__assert_fail@plt+0x2680>
   144f4:	mov	r5, #0
   144f8:	movw	r0, #53800	; 0xd228
   144fc:	movt	r0, #4
   14500:	ldr	r6, [r0]
   14504:	mov	r0, r7
   14508:	bl	201c4 <__assert_fail@plt+0xe2fc>
   1450c:	movw	r2, #46756	; 0xb6a4
   14510:	mov	r3, r0
   14514:	mov	r0, r6
   14518:	mov	r1, #1
   1451c:	movt	r2, #3
   14520:	bl	11d3c <__fprintf_chk@plt>
   14524:	add	r6, sl, r5
   14528:	ldr	r0, [sp]
   1452c:	add	r8, r8, r4
   14530:	ldr	r7, [r0, -r9, lsl #2]
   14534:	sub	r9, r9, #1
   14538:	cmp	r7, #0
   1453c:	beq	14594 <__assert_fail@plt+0x26cc>
   14540:	cmp	r9, #0
   14544:	beq	144f4 <__assert_fail@plt+0x262c>
   14548:	add	r1, sl, r8
   1454c:	mov	r0, r6
   14550:	mov	r2, r4
   14554:	bl	11ca0 <bcmp@plt>
   14558:	cmp	r0, #0
   1455c:	mov	r5, r8
   14560:	bne	144f8 <__assert_fail@plt+0x2630>
   14564:	movw	r0, #53800	; 0xd228
   14568:	movt	r0, #4
   1456c:	ldr	r5, [r0]
   14570:	mov	r0, r7
   14574:	bl	201c4 <__assert_fail@plt+0xe2fc>
   14578:	movw	r2, #46764	; 0xb6ac
   1457c:	mov	r3, r0
   14580:	mov	r0, r5
   14584:	mov	r1, #1
   14588:	movt	r2, #3
   1458c:	bl	11d3c <__fprintf_chk@plt>
   14590:	b	14528 <__assert_fail@plt+0x2660>
   14594:	movw	r0, #53800	; 0xd228
   14598:	movt	r0, #4
   1459c:	ldr	r0, [r0]
   145a0:	ldr	r1, [r0, #20]
   145a4:	ldr	r2, [r0, #24]
   145a8:	cmp	r1, r2
   145ac:	addcc	r2, r1, #1
   145b0:	strcc	r2, [r0, #20]
   145b4:	movcc	r0, #10
   145b8:	strbcc	r0, [r1]
   145bc:	subcc	sp, fp, #28
   145c0:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145c4:	mov	r1, #10
   145c8:	sub	sp, fp, #28
   145cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d0:	b	11d84 <__overflow@plt>
   145d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145d8:	add	fp, sp, #28
   145dc:	sub	sp, sp, #12
   145e0:	mov	sl, r0
   145e4:	ldr	r0, [fp, #16]
   145e8:	ldr	r9, [fp, #8]
   145ec:	mov	r5, r3
   145f0:	mov	r8, r2
   145f4:	mov	r6, r1
   145f8:	cmp	r0, #0
   145fc:	beq	1462c <__assert_fail@plt+0x2764>
   14600:	mov	r0, r6
   14604:	mov	r1, r8
   14608:	mov	r2, r5
   1460c:	mov	r3, r9
   14610:	bl	14250 <__assert_fail@plt+0x2388>
   14614:	mov	r4, r0
   14618:	cmn	r4, #1
   1461c:	ble	1467c <__assert_fail@plt+0x27b4>
   14620:	mov	r0, r4
   14624:	sub	sp, fp, #28
   14628:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1462c:	ldr	r0, [r8]
   14630:	movw	r7, #46679	; 0xb657
   14634:	str	r5, [sp, #8]
   14638:	movt	r7, #3
   1463c:	cmp	r0, #0
   14640:	beq	14694 <__assert_fail@plt+0x27cc>
   14644:	add	r5, r8, #4
   14648:	mov	r4, #0
   1464c:	mov	r1, r6
   14650:	bl	11a3c <strcmp@plt>
   14654:	cmp	r0, #0
   14658:	beq	14670 <__assert_fail@plt+0x27a8>
   1465c:	ldr	r0, [r5, r4, lsl #2]
   14660:	add	r4, r4, #1
   14664:	cmp	r0, #0
   14668:	bne	1464c <__assert_fail@plt+0x2784>
   1466c:	b	14694 <__assert_fail@plt+0x27cc>
   14670:	ldr	r5, [sp, #8]
   14674:	cmn	r4, #1
   14678:	bgt	14620 <__assert_fail@plt+0x2758>
   1467c:	movw	r0, #46679	; 0xb657
   14680:	movw	r7, #46706	; 0xb672
   14684:	str	r5, [sp, #8]
   14688:	movt	r0, #3
   1468c:	movt	r7, #3
   14690:	moveq	r7, r0
   14694:	ldr	r5, [fp, #12]
   14698:	mov	r0, #0
   1469c:	mov	r1, r7
   146a0:	mov	r2, #5
   146a4:	bl	11afc <dcgettext@plt>
   146a8:	mov	r4, r0
   146ac:	mov	r0, #0
   146b0:	mov	r1, #8
   146b4:	mov	r2, r6
   146b8:	bl	1fbf4 <__assert_fail@plt+0xdd2c>
   146bc:	mov	r6, r0
   146c0:	mov	r0, #1
   146c4:	mov	r1, sl
   146c8:	bl	201b4 <__assert_fail@plt+0xe2ec>
   146cc:	str	r0, [sp]
   146d0:	mov	r0, #0
   146d4:	mov	r1, #0
   146d8:	mov	r2, r4
   146dc:	mov	r3, r6
   146e0:	bl	11bd4 <error@plt>
   146e4:	ldr	r1, [sp, #8]
   146e8:	mov	r0, r8
   146ec:	mov	r2, r9
   146f0:	bl	14490 <__assert_fail@plt+0x25c8>
   146f4:	blx	r5
   146f8:	mvn	r4, #0
   146fc:	mov	r0, r4
   14700:	sub	sp, fp, #28
   14704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14708:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1470c:	add	fp, sp, #24
   14710:	ldr	r6, [r1]
   14714:	cmp	r6, #0
   14718:	beq	1477c <__assert_fail@plt+0x28b4>
   1471c:	mov	r8, r1
   14720:	mov	r7, r2
   14724:	mov	r1, r2
   14728:	mov	r2, r3
   1472c:	mov	r4, r3
   14730:	mov	r9, r0
   14734:	bl	11ca0 <bcmp@plt>
   14738:	cmp	r0, #0
   1473c:	beq	14774 <__assert_fail@plt+0x28ac>
   14740:	add	r7, r7, r4
   14744:	add	r5, r8, #4
   14748:	ldr	r6, [r5]
   1474c:	cmp	r6, #0
   14750:	beq	1477c <__assert_fail@plt+0x28b4>
   14754:	mov	r0, r9
   14758:	mov	r1, r7
   1475c:	mov	r2, r4
   14760:	bl	11ca0 <bcmp@plt>
   14764:	add	r7, r7, r4
   14768:	add	r5, r5, #4
   1476c:	cmp	r0, #0
   14770:	bne	14748 <__assert_fail@plt+0x2880>
   14774:	mov	r0, r6
   14778:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1477c:	mov	r6, #0
   14780:	mov	r0, r6
   14784:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14788:	push	{r4, sl, fp, lr}
   1478c:	add	fp, sp, #8
   14790:	mov	r4, r0
   14794:	mov	r0, #24
   14798:	bl	38450 <__assert_fail@plt+0x26588>
   1479c:	cmp	r0, #0
   147a0:	moveq	r0, #0
   147a4:	movne	r1, #0
   147a8:	strne	r4, [r0, #16]
   147ac:	strne	r4, [r0, #20]
   147b0:	strne	r1, [r0]
   147b4:	pop	{r4, sl, fp, pc}
   147b8:	push	{r4, sl, fp, lr}
   147bc:	add	fp, sp, #8
   147c0:	mov	r4, r0
   147c4:	mov	r0, #24
   147c8:	bl	38450 <__assert_fail@plt+0x26588>
   147cc:	cmp	r0, #0
   147d0:	beq	147e8 <__assert_fail@plt+0x2920>
   147d4:	vmov.i32	q8, #0	; 0x00000000
   147d8:	mov	r1, r0
   147dc:	str	r4, [r1], #4
   147e0:	vst1.32	{d16-d17}, [r1]
   147e4:	pop	{r4, sl, fp, pc}
   147e8:	mov	r0, #0
   147ec:	pop	{r4, sl, fp, pc}
   147f0:	push	{r4, r5, r6, sl, fp, lr}
   147f4:	add	fp, sp, #16
   147f8:	ldr	r3, [r0]
   147fc:	mov	r4, r1
   14800:	mov	r5, r0
   14804:	cmp	r3, #0
   14808:	beq	14844 <__assert_fail@plt+0x297c>
   1480c:	add	r0, r5, #8
   14810:	add	r1, r5, #12
   14814:	mov	r2, #0
   14818:	mov	r6, #0
   1481c:	bl	11e50 <getdelim@plt>
   14820:	cmn	r0, #1
   14824:	ble	14874 <__assert_fail@plt+0x29ac>
   14828:	mov	r0, #1
   1482c:	str	r0, [r4]
   14830:	ldmib	r5, {r0, r6}
   14834:	add	r0, r0, #1
   14838:	str	r0, [r5, #4]
   1483c:	mov	r0, r6
   14840:	pop	{r4, r5, r6, sl, fp, pc}
   14844:	ldr	r0, [r5, #20]
   14848:	ldr	r0, [r0]
   1484c:	cmp	r0, #0
   14850:	beq	14894 <__assert_fail@plt+0x29cc>
   14854:	mov	r0, #1
   14858:	str	r0, [r4]
   1485c:	ldr	r0, [r5, #20]
   14860:	add	r1, r0, #4
   14864:	str	r1, [r5, #20]
   14868:	ldr	r6, [r0]
   1486c:	mov	r0, r6
   14870:	pop	{r4, r5, r6, sl, fp, pc}
   14874:	ldr	r0, [r5]
   14878:	bl	11c94 <feof@plt>
   1487c:	cmp	r0, #0
   14880:	mov	r1, #2
   14884:	mov	r0, r6
   14888:	movweq	r1, #4
   1488c:	str	r1, [r4]
   14890:	pop	{r4, r5, r6, sl, fp, pc}
   14894:	mov	r0, #2
   14898:	mov	r6, #0
   1489c:	str	r0, [r4]
   148a0:	mov	r0, r6
   148a4:	pop	{r4, r5, r6, sl, fp, pc}
   148a8:	ldr	r1, [r0]
   148ac:	cmp	r1, #0
   148b0:	ldrne	r0, [r0, #4]
   148b4:	bxne	lr
   148b8:	ldr	r1, [r0, #16]
   148bc:	ldr	r0, [r0, #20]
   148c0:	sub	r0, r0, r1
   148c4:	asr	r0, r0, #2
   148c8:	bx	lr
   148cc:	push	{r4, sl, fp, lr}
   148d0:	add	fp, sp, #8
   148d4:	mov	r4, r0
   148d8:	ldr	r0, [r0]
   148dc:	cmp	r0, #0
   148e0:	beq	148ec <__assert_fail@plt+0x2a24>
   148e4:	ldr	r0, [r4, #8]
   148e8:	bl	17c10 <__assert_fail@plt+0x5d48>
   148ec:	mov	r0, r4
   148f0:	pop	{r4, sl, fp, lr}
   148f4:	b	17c10 <__assert_fail@plt+0x5d48>
   148f8:	movw	r1, #53928	; 0xd2a8
   148fc:	movt	r1, #4
   14900:	str	r0, [r1, #4]
   14904:	bx	lr
   14908:	movw	r1, #53928	; 0xd2a8
   1490c:	movt	r1, #4
   14910:	strb	r0, [r1]
   14914:	bx	lr
   14918:	push	{r4, r5, r6, sl, fp, lr}
   1491c:	add	fp, sp, #16
   14920:	sub	sp, sp, #8
   14924:	movw	r0, #53812	; 0xd234
   14928:	movt	r0, #4
   1492c:	ldr	r0, [r0]
   14930:	bl	39130 <__assert_fail@plt+0x27268>
   14934:	cmp	r0, #0
   14938:	beq	14960 <__assert_fail@plt+0x2a98>
   1493c:	movw	r5, #53928	; 0xd2a8
   14940:	movt	r5, #4
   14944:	ldrb	r0, [r5]
   14948:	cmp	r0, #0
   1494c:	beq	1498c <__assert_fail@plt+0x2ac4>
   14950:	bl	11cdc <__errno_location@plt>
   14954:	ldr	r0, [r0]
   14958:	cmp	r0, #32
   1495c:	bne	1498c <__assert_fail@plt+0x2ac4>
   14960:	movw	r0, #53800	; 0xd228
   14964:	movt	r0, #4
   14968:	ldr	r0, [r0]
   1496c:	bl	39130 <__assert_fail@plt+0x27268>
   14970:	cmp	r0, #0
   14974:	subeq	sp, fp, #16
   14978:	popeq	{r4, r5, r6, sl, fp, pc}
   1497c:	movw	r0, #53716	; 0xd1d4
   14980:	movt	r0, #4
   14984:	ldr	r0, [r0]
   14988:	bl	11aa8 <_exit@plt>
   1498c:	movw	r1, #46769	; 0xb6b1
   14990:	mov	r0, #0
   14994:	mov	r2, #5
   14998:	movt	r1, #3
   1499c:	bl	11afc <dcgettext@plt>
   149a0:	ldr	r6, [r5, #4]
   149a4:	mov	r4, r0
   149a8:	bl	11cdc <__errno_location@plt>
   149ac:	ldr	r5, [r0]
   149b0:	cmp	r6, #0
   149b4:	bne	149d0 <__assert_fail@plt+0x2b08>
   149b8:	movw	r2, #46766	; 0xb6ae
   149bc:	mov	r0, #0
   149c0:	mov	r1, r5
   149c4:	mov	r3, r4
   149c8:	movt	r2, #3
   149cc:	b	149f0 <__assert_fail@plt+0x2b28>
   149d0:	mov	r0, r6
   149d4:	bl	1fe3c <__assert_fail@plt+0xdf74>
   149d8:	movw	r2, #46781	; 0xb6bd
   149dc:	mov	r3, r0
   149e0:	str	r4, [sp]
   149e4:	mov	r0, #0
   149e8:	mov	r1, r5
   149ec:	movt	r2, #3
   149f0:	bl	11bd4 <error@plt>
   149f4:	movw	r0, #53716	; 0xd1d4
   149f8:	movt	r0, #4
   149fc:	ldr	r0, [r0]
   14a00:	bl	11aa8 <_exit@plt>
   14a04:	push	{r4, r5, fp, lr}
   14a08:	add	fp, sp, #8
   14a0c:	sub	sp, sp, #8
   14a10:	mov	r0, #12
   14a14:	bl	38450 <__assert_fail@plt+0x26588>
   14a18:	mov	r4, r0
   14a1c:	cmp	r0, #0
   14a20:	beq	14a64 <__assert_fail@plt+0x2b9c>
   14a24:	movw	r0, #19132	; 0x4abc
   14a28:	movw	r2, #19080	; 0x4a88
   14a2c:	movw	r3, #19100	; 0x4a9c
   14a30:	mov	r1, #0
   14a34:	mov	r5, #0
   14a38:	movt	r0, #1
   14a3c:	movt	r2, #1
   14a40:	movt	r3, #1
   14a44:	str	r0, [sp]
   14a48:	mov	r0, #11
   14a4c:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   14a50:	cmp	r0, #0
   14a54:	str	r0, [r4]
   14a58:	beq	14a70 <__assert_fail@plt+0x2ba8>
   14a5c:	str	r5, [r4, #4]
   14a60:	str	r5, [r4, #8]
   14a64:	mov	r0, r4
   14a68:	sub	sp, fp, #8
   14a6c:	pop	{r4, r5, fp, pc}
   14a70:	mov	r0, r4
   14a74:	bl	17c10 <__assert_fail@plt+0x5d48>
   14a78:	mov	r4, #0
   14a7c:	mov	r0, r4
   14a80:	sub	sp, fp, #8
   14a84:	pop	{r4, r5, fp, pc}
   14a88:	ldm	r0, {r0, r3}
   14a8c:	eor	r0, r0, r3
   14a90:	udiv	r2, r0, r1
   14a94:	mls	r0, r2, r1, r0
   14a98:	bx	lr
   14a9c:	ldrd	r2, [r1]
   14aa0:	ldrd	r0, [r0]
   14aa4:	eor	r1, r1, r3
   14aa8:	eor	r0, r0, r2
   14aac:	orr	r0, r0, r1
   14ab0:	clz	r0, r0
   14ab4:	lsr	r0, r0, #5
   14ab8:	bx	lr
   14abc:	push	{r4, sl, fp, lr}
   14ac0:	add	fp, sp, #8
   14ac4:	mov	r4, r0
   14ac8:	ldr	r0, [r0, #8]
   14acc:	bl	1af70 <__assert_fail@plt+0x90a8>
   14ad0:	mov	r0, r4
   14ad4:	pop	{r4, sl, fp, lr}
   14ad8:	b	17c10 <__assert_fail@plt+0x5d48>
   14adc:	push	{r4, sl, fp, lr}
   14ae0:	add	fp, sp, #8
   14ae4:	mov	r4, r0
   14ae8:	ldr	r0, [r0]
   14aec:	bl	1af70 <__assert_fail@plt+0x90a8>
   14af0:	ldr	r0, [r4, #4]
   14af4:	cmp	r0, #0
   14af8:	beq	14b00 <__assert_fail@plt+0x2c38>
   14afc:	bl	1cde8 <__assert_fail@plt+0xaf20>
   14b00:	ldr	r0, [r4, #8]
   14b04:	bl	17c10 <__assert_fail@plt+0x5d48>
   14b08:	mov	r0, r4
   14b0c:	pop	{r4, sl, fp, lr}
   14b10:	b	17c10 <__assert_fail@plt+0x5d48>
   14b14:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14b18:	add	fp, sp, #24
   14b1c:	sub	sp, sp, #8
   14b20:	ldr	r5, [r0, #8]
   14b24:	ldr	r8, [fp, #12]
   14b28:	ldr	r9, [fp, #8]
   14b2c:	mov	r7, r3
   14b30:	mov	r6, r2
   14b34:	mov	r4, r0
   14b38:	cmp	r5, #0
   14b3c:	beq	14b64 <__assert_fail@plt+0x2c9c>
   14b40:	ldrd	r0, [r5]
   14b44:	eor	r1, r1, r7
   14b48:	eor	r0, r0, r6
   14b4c:	orrs	r0, r0, r1
   14b50:	bne	14b7c <__assert_fail@plt+0x2cb4>
   14b54:	ldr	r7, [r5, #8]
   14b58:	cmp	r7, #0
   14b5c:	bne	14be4 <__assert_fail@plt+0x2d1c>
   14b60:	b	14c4c <__assert_fail@plt+0x2d84>
   14b64:	mov	r0, #16
   14b68:	bl	38450 <__assert_fail@plt+0x26588>
   14b6c:	mov	r5, r0
   14b70:	cmp	r0, #0
   14b74:	str	r0, [r4, #8]
   14b78:	beq	14c4c <__assert_fail@plt+0x2d84>
   14b7c:	strd	r6, [r5]
   14b80:	mov	r1, r5
   14b84:	ldr	r0, [r4]
   14b88:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   14b8c:	cmp	r0, #0
   14b90:	beq	14c4c <__assert_fail@plt+0x2d84>
   14b94:	cmp	r5, r0
   14b98:	beq	14bb0 <__assert_fail@plt+0x2ce8>
   14b9c:	ldr	r7, [r0, #8]
   14ba0:	str	r7, [r5, #8]
   14ba4:	cmp	r7, #0
   14ba8:	bne	14be4 <__assert_fail@plt+0x2d1c>
   14bac:	b	14c4c <__assert_fail@plt+0x2d84>
   14bb0:	movw	r2, #19900	; 0x4dbc
   14bb4:	mov	r0, #0
   14bb8:	mov	r1, #0
   14bbc:	mov	r3, #0
   14bc0:	movt	r2, #1
   14bc4:	str	r0, [r4, #8]
   14bc8:	str	r0, [sp]
   14bcc:	movw	r0, #1021	; 0x3fd
   14bd0:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   14bd4:	mov	r7, r0
   14bd8:	str	r0, [r5, #8]
   14bdc:	cmp	r7, #0
   14be0:	beq	14c4c <__assert_fail@plt+0x2d84>
   14be4:	subs	r0, r9, #1
   14be8:	mvn	r2, #-2147483646	; 0x80000002
   14bec:	sbc	r1, r8, #0
   14bf0:	subs	r0, r2, r0
   14bf4:	rscs	r0, r1, #0
   14bf8:	bcs	14c34 <__assert_fail@plt+0x2d6c>
   14bfc:	ldr	r0, [r4, #4]
   14c00:	cmp	r0, #0
   14c04:	bne	14c1c <__assert_fail@plt+0x2d54>
   14c08:	mvn	r0, #-2147483648	; 0x80000000
   14c0c:	bl	1cd30 <__assert_fail@plt+0xae68>
   14c10:	cmp	r0, #0
   14c14:	str	r0, [r4, #4]
   14c18:	beq	14c4c <__assert_fail@plt+0x2d84>
   14c1c:	mov	r2, r9
   14c20:	mov	r3, r8
   14c24:	bl	1ce10 <__assert_fail@plt+0xaf48>
   14c28:	mov	r9, r0
   14c2c:	cmn	r0, #1
   14c30:	beq	14c4c <__assert_fail@plt+0x2d84>
   14c34:	mov	r0, r7
   14c38:	mov	r1, r9
   14c3c:	mov	r2, #0
   14c40:	sub	sp, fp, #24
   14c44:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   14c48:	b	1b54c <__assert_fail@plt+0x9684>
   14c4c:	mvn	r0, #0
   14c50:	sub	sp, fp, #24
   14c54:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   14c58:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14c5c:	add	fp, sp, #24
   14c60:	sub	sp, sp, #8
   14c64:	ldr	r6, [r0, #8]
   14c68:	mov	r5, r3
   14c6c:	mov	r8, r2
   14c70:	mov	r4, r0
   14c74:	cmp	r6, #0
   14c78:	beq	14ca4 <__assert_fail@plt+0x2ddc>
   14c7c:	ldrd	r0, [r6]
   14c80:	eor	r1, r1, r5
   14c84:	eor	r0, r0, r8
   14c88:	orrs	r0, r0, r1
   14c8c:	bne	14cbc <__assert_fail@plt+0x2df4>
   14c90:	ldr	r5, [r6, #8]
   14c94:	mvn	r6, #0
   14c98:	cmp	r5, #0
   14c9c:	bne	14d40 <__assert_fail@plt+0x2e78>
   14ca0:	b	14db0 <__assert_fail@plt+0x2ee8>
   14ca4:	mov	r0, #16
   14ca8:	bl	38450 <__assert_fail@plt+0x26588>
   14cac:	mov	r6, r0
   14cb0:	cmp	r0, #0
   14cb4:	str	r0, [r4, #8]
   14cb8:	beq	14cf8 <__assert_fail@plt+0x2e30>
   14cbc:	str	r8, [r6]
   14cc0:	str	r5, [r6, #4]
   14cc4:	mov	r1, r6
   14cc8:	ldr	r0, [r4]
   14ccc:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   14cd0:	cmp	r0, #0
   14cd4:	beq	14cf8 <__assert_fail@plt+0x2e30>
   14cd8:	cmp	r6, r0
   14cdc:	beq	14d08 <__assert_fail@plt+0x2e40>
   14ce0:	ldr	r5, [r0, #8]
   14ce4:	str	r5, [r6, #8]
   14ce8:	mvn	r6, #0
   14cec:	cmp	r5, #0
   14cf0:	bne	14d40 <__assert_fail@plt+0x2e78>
   14cf4:	b	14db0 <__assert_fail@plt+0x2ee8>
   14cf8:	mvn	r6, #0
   14cfc:	mov	r0, r6
   14d00:	sub	sp, fp, #24
   14d04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14d08:	movw	r2, #19900	; 0x4dbc
   14d0c:	mov	r0, #0
   14d10:	mov	r1, #0
   14d14:	mov	r3, #0
   14d18:	movt	r2, #1
   14d1c:	str	r0, [r4, #8]
   14d20:	str	r0, [sp]
   14d24:	movw	r0, #1021	; 0x3fd
   14d28:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   14d2c:	mov	r5, r0
   14d30:	str	r0, [r6, #8]
   14d34:	mvn	r6, #0
   14d38:	cmp	r5, #0
   14d3c:	beq	14db0 <__assert_fail@plt+0x2ee8>
   14d40:	ldr	r7, [fp, #8]
   14d44:	ldr	r8, [fp, #12]
   14d48:	mvn	r2, #-2147483646	; 0x80000002
   14d4c:	subs	r0, r7, #1
   14d50:	sbc	r1, r8, #0
   14d54:	subs	r0, r2, r0
   14d58:	rscs	r0, r1, #0
   14d5c:	bcs	14d98 <__assert_fail@plt+0x2ed0>
   14d60:	ldr	r0, [r4, #4]
   14d64:	cmp	r0, #0
   14d68:	bne	14d80 <__assert_fail@plt+0x2eb8>
   14d6c:	mvn	r0, #-2147483648	; 0x80000000
   14d70:	bl	1cd30 <__assert_fail@plt+0xae68>
   14d74:	cmp	r0, #0
   14d78:	str	r0, [r4, #4]
   14d7c:	beq	14db0 <__assert_fail@plt+0x2ee8>
   14d80:	mov	r2, r7
   14d84:	mov	r3, r8
   14d88:	bl	1ce10 <__assert_fail@plt+0xaf48>
   14d8c:	mov	r7, r0
   14d90:	cmn	r0, #1
   14d94:	beq	14db0 <__assert_fail@plt+0x2ee8>
   14d98:	mov	r0, r5
   14d9c:	mov	r1, r7
   14da0:	bl	1a980 <__assert_fail@plt+0x8ab8>
   14da4:	cmp	r0, #0
   14da8:	mov	r6, r0
   14dac:	movwne	r6, #1
   14db0:	mov	r0, r6
   14db4:	sub	sp, fp, #24
   14db8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14dbc:	udiv	r2, r0, r1
   14dc0:	mls	r0, r2, r1, r0
   14dc4:	bx	lr
   14dc8:	push	{r4, r5, fp, lr}
   14dcc:	add	fp, sp, #8
   14dd0:	mov	r5, r0
   14dd4:	mov	r0, #8
   14dd8:	mov	r4, r1
   14ddc:	bl	35728 <__assert_fail@plt+0x23860>
   14de0:	ldr	r1, [r5, #4]
   14de4:	stm	r0, {r1, r4}
   14de8:	str	r0, [r5, #4]
   14dec:	pop	{r4, r5, fp, pc}
   14df0:	and	r2, r1, #2
   14df4:	and	r3, r1, #134217728	; 0x8000000
   14df8:	tst	r1, #32
   14dfc:	bne	14f70 <__assert_fail@plt+0x30a8>
   14e00:	cmp	r3, #0
   14e04:	bne	14e74 <__assert_fail@plt+0x2fac>
   14e08:	b	14e10 <__assert_fail@plt+0x2f48>
   14e0c:	add	r0, r0, r1
   14e10:	ldrb	r1, [r0], #1
   14e14:	cmp	r1, #90	; 0x5a
   14e18:	ble	14e40 <__assert_fail@plt+0x2f78>
   14e1c:	cmp	r1, #92	; 0x5c
   14e20:	bne	14e5c <__assert_fail@plt+0x2f94>
   14e24:	mov	r1, #0
   14e28:	cmp	r2, #0
   14e2c:	bne	14e0c <__assert_fail@plt+0x2f44>
   14e30:	ldrb	r1, [r0]
   14e34:	cmp	r1, #0
   14e38:	movwne	r1, #1
   14e3c:	b	14e0c <__assert_fail@plt+0x2f44>
   14e40:	cmp	r1, #0
   14e44:	beq	153ac <__assert_fail@plt+0x34e4>
   14e48:	cmp	r1, #42	; 0x2a
   14e4c:	beq	15278 <__assert_fail@plt+0x33b0>
   14e50:	cmp	r1, #63	; 0x3f
   14e54:	bne	14e10 <__assert_fail@plt+0x2f48>
   14e58:	b	15278 <__assert_fail@plt+0x33b0>
   14e5c:	cmp	r1, #91	; 0x5b
   14e60:	bne	14e10 <__assert_fail@plt+0x2f48>
   14e64:	b	15278 <__assert_fail@plt+0x33b0>
   14e68:	cmp	r1, #123	; 0x7b
   14e6c:	cmpne	r1, #125	; 0x7d
   14e70:	beq	15278 <__assert_fail@plt+0x33b0>
   14e74:	ldrb	r1, [r0], #1
   14e78:	cmp	r1, #122	; 0x7a
   14e7c:	bgt	14e68 <__assert_fail@plt+0x2fa0>
   14e80:	sub	r2, r1, #40	; 0x28
   14e84:	cmp	r2, #51	; 0x33
   14e88:	bhi	14f64 <__assert_fail@plt+0x309c>
   14e8c:	add	r1, pc, #0
   14e90:	ldr	pc, [r1, r2, lsl #2]
   14e94:	andeq	r5, r1, r8, ror r2
   14e98:	andeq	r5, r1, r8, ror r2
   14e9c:	andeq	r5, r1, r8, ror r2
   14ea0:	andeq	r4, r1, r4, ror lr
   14ea4:	andeq	r4, r1, r4, ror lr
   14ea8:	andeq	r4, r1, r4, ror lr
   14eac:	andeq	r5, r1, r8, ror r2
   14eb0:	andeq	r4, r1, r4, ror lr
   14eb4:	andeq	r4, r1, r4, ror lr
   14eb8:	andeq	r4, r1, r4, ror lr
   14ebc:	andeq	r4, r1, r4, ror lr
   14ec0:	andeq	r4, r1, r4, ror lr
   14ec4:	andeq	r4, r1, r4, ror lr
   14ec8:	andeq	r4, r1, r4, ror lr
   14ecc:	andeq	r4, r1, r4, ror lr
   14ed0:	andeq	r4, r1, r4, ror lr
   14ed4:	andeq	r4, r1, r4, ror lr
   14ed8:	andeq	r4, r1, r4, ror lr
   14edc:	andeq	r4, r1, r4, ror lr
   14ee0:	andeq	r4, r1, r4, ror lr
   14ee4:	andeq	r4, r1, r4, ror lr
   14ee8:	andeq	r4, r1, r4, ror lr
   14eec:	andeq	r4, r1, r4, ror lr
   14ef0:	andeq	r5, r1, r8, ror r2
   14ef4:	andeq	r4, r1, r4, ror lr
   14ef8:	andeq	r4, r1, r4, ror lr
   14efc:	andeq	r4, r1, r4, ror lr
   14f00:	andeq	r4, r1, r4, ror lr
   14f04:	andeq	r4, r1, r4, ror lr
   14f08:	andeq	r4, r1, r4, ror lr
   14f0c:	andeq	r4, r1, r4, ror lr
   14f10:	andeq	r4, r1, r4, ror lr
   14f14:	andeq	r4, r1, r4, ror lr
   14f18:	andeq	r4, r1, r4, ror lr
   14f1c:	andeq	r4, r1, r4, ror lr
   14f20:	andeq	r4, r1, r4, ror lr
   14f24:	andeq	r4, r1, r4, ror lr
   14f28:	andeq	r4, r1, r4, ror lr
   14f2c:	andeq	r4, r1, r4, ror lr
   14f30:	andeq	r4, r1, r4, ror lr
   14f34:	andeq	r4, r1, r4, ror lr
   14f38:	andeq	r4, r1, r4, ror lr
   14f3c:	andeq	r4, r1, r4, ror lr
   14f40:	andeq	r4, r1, r4, ror lr
   14f44:	andeq	r4, r1, r4, ror lr
   14f48:	andeq	r4, r1, r4, ror lr
   14f4c:	andeq	r4, r1, r4, ror lr
   14f50:	andeq	r4, r1, r4, ror lr
   14f54:	andeq	r4, r1, r4, ror lr
   14f58:	andeq	r4, r1, r4, ror lr
   14f5c:	andeq	r4, r1, r4, ror lr
   14f60:	andeq	r5, r1, r8, ror r2
   14f64:	cmp	r1, #0
   14f68:	bne	14e74 <__assert_fail@plt+0x2fac>
   14f6c:	b	153ac <__assert_fail@plt+0x34e4>
   14f70:	cmp	r3, #0
   14f74:	bne	150d4 <__assert_fail@plt+0x320c>
   14f78:	cmp	r2, #0
   14f7c:	beq	14f8c <__assert_fail@plt+0x30c4>
   14f80:	b	1528c <__assert_fail@plt+0x33c4>
   14f84:	cmp	r1, #0
   14f88:	beq	153ac <__assert_fail@plt+0x34e4>
   14f8c:	ldrb	r1, [r0], #1
   14f90:	sub	r2, r1, #33	; 0x21
   14f94:	cmp	r2, #59	; 0x3b
   14f98:	bhi	14f84 <__assert_fail@plt+0x30bc>
   14f9c:	add	r3, pc, #4
   14fa0:	mov	r1, #1
   14fa4:	ldr	pc, [r3, r2, lsl #2]
   14fa8:	muleq	r1, r8, r0
   14fac:	andeq	r4, r1, ip, lsl #31
   14fb0:	andeq	r4, r1, ip, lsl #31
   14fb4:	andeq	r4, r1, ip, lsl #31
   14fb8:	andeq	r4, r1, ip, lsl #31
   14fbc:	andeq	r4, r1, ip, lsl #31
   14fc0:	andeq	r4, r1, ip, lsl #31
   14fc4:	andeq	r4, r1, ip, lsl #31
   14fc8:	andeq	r4, r1, ip, lsl #31
   14fcc:	andeq	r5, r1, r4, lsr #7
   14fd0:	muleq	r1, r8, r0
   14fd4:	andeq	r4, r1, ip, lsl #31
   14fd8:	andeq	r4, r1, ip, lsl #31
   14fdc:	andeq	r4, r1, ip, lsl #31
   14fe0:	andeq	r4, r1, ip, lsl #31
   14fe4:	andeq	r4, r1, ip, lsl #31
   14fe8:	andeq	r4, r1, ip, lsl #31
   14fec:	andeq	r4, r1, ip, lsl #31
   14ff0:	andeq	r4, r1, ip, lsl #31
   14ff4:	andeq	r4, r1, ip, lsl #31
   14ff8:	andeq	r4, r1, ip, lsl #31
   14ffc:	andeq	r4, r1, ip, lsl #31
   15000:	andeq	r4, r1, ip, lsl #31
   15004:	andeq	r4, r1, ip, lsl #31
   15008:	andeq	r4, r1, ip, lsl #31
   1500c:	andeq	r4, r1, ip, lsl #31
   15010:	andeq	r4, r1, ip, lsl #31
   15014:	andeq	r4, r1, ip, lsl #31
   15018:	andeq	r4, r1, ip, lsl #31
   1501c:	andeq	r4, r1, ip, lsl #31
   15020:	andeq	r5, r1, r4, lsr #7
   15024:	muleq	r1, r8, r0
   15028:	andeq	r4, r1, ip, lsl #31
   1502c:	andeq	r4, r1, ip, lsl #31
   15030:	andeq	r4, r1, ip, lsl #31
   15034:	andeq	r4, r1, ip, lsl #31
   15038:	andeq	r4, r1, ip, lsl #31
   1503c:	andeq	r4, r1, ip, lsl #31
   15040:	andeq	r4, r1, ip, lsl #31
   15044:	andeq	r4, r1, ip, lsl #31
   15048:	andeq	r4, r1, ip, lsl #31
   1504c:	andeq	r4, r1, ip, lsl #31
   15050:	andeq	r4, r1, ip, lsl #31
   15054:	andeq	r4, r1, ip, lsl #31
   15058:	andeq	r4, r1, ip, lsl #31
   1505c:	andeq	r4, r1, ip, lsl #31
   15060:	andeq	r4, r1, ip, lsl #31
   15064:	andeq	r4, r1, ip, lsl #31
   15068:	andeq	r4, r1, ip, lsl #31
   1506c:	andeq	r4, r1, ip, lsl #31
   15070:	andeq	r4, r1, ip, lsl #31
   15074:	andeq	r4, r1, ip, lsl #31
   15078:	andeq	r4, r1, ip, lsl #31
   1507c:	andeq	r4, r1, ip, lsl #31
   15080:	andeq	r4, r1, ip, lsl #31
   15084:	andeq	r4, r1, ip, lsl #31
   15088:	andeq	r4, r1, ip, lsl #31
   1508c:	andeq	r4, r1, ip, lsl #31
   15090:	andeq	r5, r1, r4, lsr #7
   15094:	andeq	r5, r1, r8, lsr #1
   15098:	ldrb	r2, [r0]
   1509c:	cmp	r2, #40	; 0x28
   150a0:	bne	14f8c <__assert_fail@plt+0x30c4>
   150a4:	b	153a4 <__assert_fail@plt+0x34dc>
   150a8:	mov	r1, r0
   150ac:	ldrb	r2, [r1], #1
   150b0:	cmp	r2, #0
   150b4:	movne	r0, r1
   150b8:	ldrb	r1, [r0], #1
   150bc:	sub	r2, r1, #33	; 0x21
   150c0:	cmp	r2, #59	; 0x3b
   150c4:	bls	14f9c <__assert_fail@plt+0x30d4>
   150c8:	b	14f84 <__assert_fail@plt+0x30bc>
   150cc:	cmp	r1, #0
   150d0:	beq	153ac <__assert_fail@plt+0x34e4>
   150d4:	add	r0, r0, #1
   150d8:	ldrb	r1, [r0, #-1]
   150dc:	sub	r2, r1, #33	; 0x21
   150e0:	cmp	r2, #92	; 0x5c
   150e4:	bhi	150cc <__assert_fail@plt+0x3204>
   150e8:	add	r3, pc, #4
   150ec:	mov	r1, #1
   150f0:	ldr	pc, [r3, r2, lsl #2]
   150f4:	andeq	r5, r1, r8, ror #4
   150f8:	ldrdeq	r5, [r1], -r4
   150fc:	ldrdeq	r5, [r1], -r4
   15100:	ldrdeq	r5, [r1], -r4
   15104:	ldrdeq	r5, [r1], -r4
   15108:	ldrdeq	r5, [r1], -r4
   1510c:	ldrdeq	r5, [r1], -r4
   15110:	andeq	r5, r1, r4, lsr #7
   15114:	andeq	r5, r1, r4, lsr #7
   15118:	andeq	r5, r1, r4, lsr #7
   1511c:	andeq	r5, r1, r8, ror #4
   15120:	ldrdeq	r5, [r1], -r4
   15124:	ldrdeq	r5, [r1], -r4
   15128:	andeq	r5, r1, r4, lsr #7
   1512c:	ldrdeq	r5, [r1], -r4
   15130:	ldrdeq	r5, [r1], -r4
   15134:	ldrdeq	r5, [r1], -r4
   15138:	ldrdeq	r5, [r1], -r4
   1513c:	ldrdeq	r5, [r1], -r4
   15140:	ldrdeq	r5, [r1], -r4
   15144:	ldrdeq	r5, [r1], -r4
   15148:	ldrdeq	r5, [r1], -r4
   1514c:	ldrdeq	r5, [r1], -r4
   15150:	ldrdeq	r5, [r1], -r4
   15154:	ldrdeq	r5, [r1], -r4
   15158:	ldrdeq	r5, [r1], -r4
   1515c:	ldrdeq	r5, [r1], -r4
   15160:	ldrdeq	r5, [r1], -r4
   15164:	ldrdeq	r5, [r1], -r4
   15168:	ldrdeq	r5, [r1], -r4
   1516c:	andeq	r5, r1, r4, lsr #7
   15170:	andeq	r5, r1, r8, ror #4
   15174:	ldrdeq	r5, [r1], -r4
   15178:	ldrdeq	r5, [r1], -r4
   1517c:	ldrdeq	r5, [r1], -r4
   15180:	ldrdeq	r5, [r1], -r4
   15184:	ldrdeq	r5, [r1], -r4
   15188:	ldrdeq	r5, [r1], -r4
   1518c:	ldrdeq	r5, [r1], -r4
   15190:	ldrdeq	r5, [r1], -r4
   15194:	ldrdeq	r5, [r1], -r4
   15198:	ldrdeq	r5, [r1], -r4
   1519c:	ldrdeq	r5, [r1], -r4
   151a0:	ldrdeq	r5, [r1], -r4
   151a4:	ldrdeq	r5, [r1], -r4
   151a8:	ldrdeq	r5, [r1], -r4
   151ac:	ldrdeq	r5, [r1], -r4
   151b0:	ldrdeq	r5, [r1], -r4
   151b4:	ldrdeq	r5, [r1], -r4
   151b8:	ldrdeq	r5, [r1], -r4
   151bc:	ldrdeq	r5, [r1], -r4
   151c0:	ldrdeq	r5, [r1], -r4
   151c4:	ldrdeq	r5, [r1], -r4
   151c8:	ldrdeq	r5, [r1], -r4
   151cc:	ldrdeq	r5, [r1], -r4
   151d0:	ldrdeq	r5, [r1], -r4
   151d4:	ldrdeq	r5, [r1], -r4
   151d8:	ldrdeq	r5, [r1], -r4
   151dc:	andeq	r5, r1, r4, lsr #7
   151e0:	ldrdeq	r5, [r1], -r4
   151e4:	ldrdeq	r5, [r1], -r4
   151e8:	ldrdeq	r5, [r1], -r4
   151ec:	ldrdeq	r5, [r1], -r4
   151f0:	ldrdeq	r5, [r1], -r4
   151f4:	ldrdeq	r5, [r1], -r4
   151f8:	ldrdeq	r5, [r1], -r4
   151fc:	ldrdeq	r5, [r1], -r4
   15200:	ldrdeq	r5, [r1], -r4
   15204:	ldrdeq	r5, [r1], -r4
   15208:	ldrdeq	r5, [r1], -r4
   1520c:	ldrdeq	r5, [r1], -r4
   15210:	ldrdeq	r5, [r1], -r4
   15214:	ldrdeq	r5, [r1], -r4
   15218:	ldrdeq	r5, [r1], -r4
   1521c:	ldrdeq	r5, [r1], -r4
   15220:	ldrdeq	r5, [r1], -r4
   15224:	ldrdeq	r5, [r1], -r4
   15228:	ldrdeq	r5, [r1], -r4
   1522c:	ldrdeq	r5, [r1], -r4
   15230:	ldrdeq	r5, [r1], -r4
   15234:	ldrdeq	r5, [r1], -r4
   15238:	ldrdeq	r5, [r1], -r4
   1523c:	ldrdeq	r5, [r1], -r4
   15240:	ldrdeq	r5, [r1], -r4
   15244:	ldrdeq	r5, [r1], -r4
   15248:	ldrdeq	r5, [r1], -r4
   1524c:	ldrdeq	r5, [r1], -r4
   15250:	ldrdeq	r5, [r1], -r4
   15254:	ldrdeq	r5, [r1], -r4
   15258:	ldrdeq	r5, [r1], -r4
   1525c:	andeq	r5, r1, r4, lsr #7
   15260:	ldrdeq	r5, [r1], -r4
   15264:	andeq	r5, r1, r4, lsr #7
   15268:	ldrb	r2, [r0]
   1526c:	cmp	r2, #40	; 0x28
   15270:	bne	150d4 <__assert_fail@plt+0x320c>
   15274:	b	153a4 <__assert_fail@plt+0x34dc>
   15278:	mov	r1, #1
   1527c:	mov	r0, r1
   15280:	bx	lr
   15284:	cmp	r1, #0
   15288:	beq	153ac <__assert_fail@plt+0x34e4>
   1528c:	add	r0, r0, #1
   15290:	ldrb	r1, [r0, #-1]
   15294:	sub	r2, r1, #33	; 0x21
   15298:	cmp	r2, #58	; 0x3a
   1529c:	bhi	15284 <__assert_fail@plt+0x33bc>
   152a0:	add	r3, pc, #4
   152a4:	mov	r1, #1
   152a8:	ldr	pc, [r3, r2, lsl #2]
   152ac:	muleq	r1, r8, r3
   152b0:	andeq	r5, r1, ip, lsl #5
   152b4:	andeq	r5, r1, ip, lsl #5
   152b8:	andeq	r5, r1, ip, lsl #5
   152bc:	andeq	r5, r1, ip, lsl #5
   152c0:	andeq	r5, r1, ip, lsl #5
   152c4:	andeq	r5, r1, ip, lsl #5
   152c8:	andeq	r5, r1, ip, lsl #5
   152cc:	andeq	r5, r1, ip, lsl #5
   152d0:	andeq	r5, r1, r4, lsr #7
   152d4:	muleq	r1, r8, r3
   152d8:	andeq	r5, r1, ip, lsl #5
   152dc:	andeq	r5, r1, ip, lsl #5
   152e0:	andeq	r5, r1, ip, lsl #5
   152e4:	andeq	r5, r1, ip, lsl #5
   152e8:	andeq	r5, r1, ip, lsl #5
   152ec:	andeq	r5, r1, ip, lsl #5
   152f0:	andeq	r5, r1, ip, lsl #5
   152f4:	andeq	r5, r1, ip, lsl #5
   152f8:	andeq	r5, r1, ip, lsl #5
   152fc:	andeq	r5, r1, ip, lsl #5
   15300:	andeq	r5, r1, ip, lsl #5
   15304:	andeq	r5, r1, ip, lsl #5
   15308:	andeq	r5, r1, ip, lsl #5
   1530c:	andeq	r5, r1, ip, lsl #5
   15310:	andeq	r5, r1, ip, lsl #5
   15314:	andeq	r5, r1, ip, lsl #5
   15318:	andeq	r5, r1, ip, lsl #5
   1531c:	andeq	r5, r1, ip, lsl #5
   15320:	andeq	r5, r1, ip, lsl #5
   15324:	andeq	r5, r1, r4, lsr #7
   15328:	muleq	r1, r8, r3
   1532c:	andeq	r5, r1, ip, lsl #5
   15330:	andeq	r5, r1, ip, lsl #5
   15334:	andeq	r5, r1, ip, lsl #5
   15338:	andeq	r5, r1, ip, lsl #5
   1533c:	andeq	r5, r1, ip, lsl #5
   15340:	andeq	r5, r1, ip, lsl #5
   15344:	andeq	r5, r1, ip, lsl #5
   15348:	andeq	r5, r1, ip, lsl #5
   1534c:	andeq	r5, r1, ip, lsl #5
   15350:	andeq	r5, r1, ip, lsl #5
   15354:	andeq	r5, r1, ip, lsl #5
   15358:	andeq	r5, r1, ip, lsl #5
   1535c:	andeq	r5, r1, ip, lsl #5
   15360:	andeq	r5, r1, ip, lsl #5
   15364:	andeq	r5, r1, ip, lsl #5
   15368:	andeq	r5, r1, ip, lsl #5
   1536c:	andeq	r5, r1, ip, lsl #5
   15370:	andeq	r5, r1, ip, lsl #5
   15374:	andeq	r5, r1, ip, lsl #5
   15378:	andeq	r5, r1, ip, lsl #5
   1537c:	andeq	r5, r1, ip, lsl #5
   15380:	andeq	r5, r1, ip, lsl #5
   15384:	andeq	r5, r1, ip, lsl #5
   15388:	andeq	r5, r1, ip, lsl #5
   1538c:	andeq	r5, r1, ip, lsl #5
   15390:	andeq	r5, r1, ip, lsl #5
   15394:	andeq	r5, r1, r4, lsr #7
   15398:	ldrb	r2, [r0]
   1539c:	cmp	r2, #40	; 0x28
   153a0:	bne	1528c <__assert_fail@plt+0x33c4>
   153a4:	mov	r0, r1
   153a8:	bx	lr
   153ac:	mov	r1, #0
   153b0:	mov	r0, r1
   153b4:	bx	lr
   153b8:	mov	r0, #8
   153bc:	b	35b20 <__assert_fail@plt+0x23c58>
   153c0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   153c4:	add	fp, sp, #24
   153c8:	ldr	r6, [r0]
   153cc:	mov	r8, r0
   153d0:	cmp	r6, #0
   153d4:	bne	153f4 <__assert_fail@plt+0x352c>
   153d8:	b	15474 <__assert_fail@plt+0x35ac>
   153dc:	ldr	r0, [r5, #12]
   153e0:	bl	1af70 <__assert_fail@plt+0x90a8>
   153e4:	mov	r0, r5
   153e8:	bl	17c10 <__assert_fail@plt+0x5d48>
   153ec:	cmp	r6, #0
   153f0:	beq	15474 <__assert_fail@plt+0x35ac>
   153f4:	mov	r5, r6
   153f8:	ldr	r6, [r6]
   153fc:	ldr	r0, [r5, #4]
   15400:	cmp	r0, #0
   15404:	beq	153dc <__assert_fail@plt+0x3514>
   15408:	cmp	r0, #1
   1540c:	bne	153e4 <__assert_fail@plt+0x351c>
   15410:	ldr	r0, [r5, #20]
   15414:	cmp	r0, #1
   15418:	blt	1545c <__assert_fail@plt+0x3594>
   1541c:	mov	r7, #0
   15420:	mov	r4, #0
   15424:	b	15438 <__assert_fail@plt+0x3570>
   15428:	add	r4, r4, #1
   1542c:	add	r7, r7, #36	; 0x24
   15430:	cmp	r4, r0
   15434:	bge	1545c <__assert_fail@plt+0x3594>
   15438:	ldr	r1, [r5, #12]
   1543c:	add	r1, r1, r7
   15440:	ldrb	r2, [r1, #3]
   15444:	tst	r2, #8
   15448:	beq	15428 <__assert_fail@plt+0x3560>
   1544c:	add	r0, r1, #4
   15450:	bl	2282c <__assert_fail@plt+0x10964>
   15454:	ldr	r0, [r5, #20]
   15458:	b	15428 <__assert_fail@plt+0x3560>
   1545c:	ldr	r0, [r5, #12]
   15460:	bl	17c10 <__assert_fail@plt+0x5d48>
   15464:	mov	r0, r5
   15468:	bl	17c10 <__assert_fail@plt+0x5d48>
   1546c:	cmp	r6, #0
   15470:	bne	153f4 <__assert_fail@plt+0x352c>
   15474:	ldr	r5, [r8, #4]
   15478:	cmp	r5, #0
   1547c:	beq	154a0 <__assert_fail@plt+0x35d8>
   15480:	ldr	r0, [r5, #4]
   15484:	ldr	r4, [r5]
   15488:	bl	17c10 <__assert_fail@plt+0x5d48>
   1548c:	mov	r0, r5
   15490:	bl	17c10 <__assert_fail@plt+0x5d48>
   15494:	cmp	r4, #0
   15498:	mov	r5, r4
   1549c:	bne	15480 <__assert_fail@plt+0x35b8>
   154a0:	mov	r0, r8
   154a4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   154a8:	b	17c10 <__assert_fail@plt+0x5d48>
   154ac:	push	{r4, r5, r6, r7, fp, lr}
   154b0:	add	fp, sp, #16
   154b4:	mov	r5, r0
   154b8:	movw	r0, #21848	; 0x5558
   154bc:	movw	r7, #7148	; 0x1bec
   154c0:	tst	r2, #268435456	; 0x10000000
   154c4:	mov	r4, r2
   154c8:	mov	r6, r1
   154cc:	movt	r0, #1
   154d0:	movt	r7, #1
   154d4:	moveq	r7, r0
   154d8:	mov	r0, r5
   154dc:	blx	r7
   154e0:	mov	r1, r0
   154e4:	clz	r0, r0
   154e8:	tst	r4, #1073741824	; 0x40000000
   154ec:	lsr	r0, r0, #5
   154f0:	bne	15504 <__assert_fail@plt+0x363c>
   154f4:	cmp	r1, #0
   154f8:	ldrbne	r1, [r6]
   154fc:	cmpne	r1, #0
   15500:	bne	15508 <__assert_fail@plt+0x3640>
   15504:	pop	{r4, r5, r6, r7, fp, pc}
   15508:	add	r6, r6, #1
   1550c:	uxtb	r1, r1
   15510:	mov	r0, #0
   15514:	cmp	r1, #47	; 0x2f
   15518:	bne	15540 <__assert_fail@plt+0x3678>
   1551c:	ldrb	r1, [r6]
   15520:	cmp	r1, #47	; 0x2f
   15524:	beq	15540 <__assert_fail@plt+0x3678>
   15528:	mov	r0, r5
   1552c:	mov	r1, r6
   15530:	mov	r2, r4
   15534:	blx	r7
   15538:	clz	r0, r0
   1553c:	lsr	r0, r0, #5
   15540:	cmp	r0, #0
   15544:	bne	15504 <__assert_fail@plt+0x363c>
   15548:	ldrb	r1, [r6], #1
   1554c:	cmp	r1, #0
   15550:	bne	1550c <__assert_fail@plt+0x3644>
   15554:	b	15504 <__assert_fail@plt+0x363c>
   15558:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1555c:	add	fp, sp, #24
   15560:	mov	r4, r0
   15564:	mov	r5, r1
   15568:	and	r0, r2, #16
   1556c:	tst	r2, #8
   15570:	bne	1558c <__assert_fail@plt+0x36c4>
   15574:	cmp	r0, #0
   15578:	beq	15610 <__assert_fail@plt+0x3748>
   1557c:	mov	r0, r4
   15580:	mov	r1, r5
   15584:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   15588:	b	1cf74 <__assert_fail@plt+0xb0ac>
   1558c:	cmp	r0, #0
   15590:	beq	15620 <__assert_fail@plt+0x3758>
   15594:	mov	r0, r5
   15598:	bl	35c2c <__assert_fail@plt+0x23d64>
   1559c:	mov	r1, #47	; 0x2f
   155a0:	mov	r5, r0
   155a4:	mov	r8, #47	; 0x2f
   155a8:	bl	11cb8 <strchr@plt>
   155ac:	cmp	r0, #0
   155b0:	beq	155f0 <__assert_fail@plt+0x3728>
   155b4:	mov	r7, r0
   155b8:	mov	r9, #0
   155bc:	mov	r0, r4
   155c0:	mov	r1, r5
   155c4:	strb	r9, [r7]
   155c8:	bl	1cf74 <__assert_fail@plt+0xb0ac>
   155cc:	cmp	r0, #1
   155d0:	blt	155fc <__assert_fail@plt+0x3734>
   155d4:	strb	r8, [r7], #1
   155d8:	mov	r1, #47	; 0x2f
   155dc:	mov	r0, r7
   155e0:	bl	11cb8 <strchr@plt>
   155e4:	mov	r7, r0
   155e8:	cmp	r0, #0
   155ec:	bne	155bc <__assert_fail@plt+0x36f4>
   155f0:	mov	r0, r4
   155f4:	mov	r1, r5
   155f8:	bl	1cf74 <__assert_fail@plt+0xb0ac>
   155fc:	mov	r6, r0
   15600:	mov	r0, r5
   15604:	bl	17c10 <__assert_fail@plt+0x5d48>
   15608:	mov	r0, r6
   1560c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15610:	mov	r0, r4
   15614:	mov	r1, r5
   15618:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   1561c:	b	11a3c <strcmp@plt>
   15620:	mov	r0, r4
   15624:	bl	11cac <strlen@plt>
   15628:	mov	r7, r0
   1562c:	mov	r0, r4
   15630:	mov	r1, r5
   15634:	mov	r2, r7
   15638:	bl	11e80 <strncmp@plt>
   1563c:	mov	r6, r0
   15640:	cmp	r0, #0
   15644:	beq	15650 <__assert_fail@plt+0x3788>
   15648:	mov	r0, r6
   1564c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15650:	ldrb	r0, [r5, r7]
   15654:	subs	r6, r0, #47	; 0x2f
   15658:	movne	r6, r0
   1565c:	mov	r0, r6
   15660:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15664:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15668:	add	fp, sp, #28
   1566c:	sub	sp, sp, #20
   15670:	ldr	r0, [r0]
   15674:	cmp	r0, #0
   15678:	beq	156a0 <__assert_fail@plt+0x37d8>
   1567c:	mov	r9, r1
   15680:	add	r1, r1, #1
   15684:	mov	r7, #0
   15688:	str	r1, [sp, #12]
   1568c:	mov	r4, r0
   15690:	ldr	r0, [r0, #4]
   15694:	cmp	r0, #0
   15698:	bne	156d0 <__assert_fail@plt+0x3808>
   1569c:	b	157e4 <__assert_fail@plt+0x391c>
   156a0:	mov	r0, #0
   156a4:	sub	sp, fp, #28
   156a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156ac:	ldr	r4, [sp, #8]
   156b0:	ldr	r7, [sp, #4]
   156b4:	ldr	r0, [r4]
   156b8:	cmp	r0, #0
   156bc:	beq	15968 <__assert_fail@plt+0x3aa0>
   156c0:	mov	r4, r0
   156c4:	ldr	r0, [r0, #4]
   156c8:	cmp	r0, #0
   156cc:	beq	157e4 <__assert_fail@plt+0x391c>
   156d0:	ldr	r0, [r4, #20]
   156d4:	cmp	r0, #1
   156d8:	str	r0, [sp, #16]
   156dc:	blt	156b4 <__assert_fail@plt+0x37ec>
   156e0:	ldr	sl, [r4, #12]
   156e4:	mov	r8, #0
   156e8:	str	r7, [sp, #4]
   156ec:	str	r4, [sp, #8]
   156f0:	b	15724 <__assert_fail@plt+0x385c>
   156f4:	mov	r5, #0
   156f8:	mov	r1, r9
   156fc:	mov	r2, #0
   15700:	mov	r3, #0
   15704:	str	r5, [sp]
   15708:	bl	22a68 <__assert_fail@plt+0x10ba0>
   1570c:	cmp	r0, #0
   15710:	beq	15954 <__assert_fail@plt+0x3a8c>
   15714:	ldr	r0, [sp, #16]
   15718:	add	r8, r8, #1
   1571c:	cmp	r8, r0
   15720:	beq	156ac <__assert_fail@plt+0x37e4>
   15724:	add	r0, r8, r8, lsl #3
   15728:	mov	r1, sl
   1572c:	ldr	r6, [r1, r0, lsl #2]!
   15730:	add	r0, r1, #4
   15734:	tst	r6, #134217728	; 0x8000000
   15738:	bne	156f4 <__assert_fail@plt+0x382c>
   1573c:	ldr	r7, [r0]
   15740:	movw	r1, #21848	; 0x5558
   15744:	movw	r4, #7148	; 0x1bec
   15748:	tst	r6, #268435456	; 0x10000000
   1574c:	mov	r2, r6
   15750:	movt	r1, #1
   15754:	movt	r4, #1
   15758:	moveq	r4, r1
   1575c:	mov	r1, r9
   15760:	mov	r0, r7
   15764:	blx	r4
   15768:	clz	r1, r0
   1576c:	tst	r6, #1073741824	; 0x40000000
   15770:	lsr	r1, r1, #5
   15774:	bne	15788 <__assert_fail@plt+0x38c0>
   15778:	cmp	r0, #0
   1577c:	ldrbne	r0, [r9]
   15780:	cmpne	r0, #0
   15784:	bne	15794 <__assert_fail@plt+0x38cc>
   15788:	cmp	r1, #0
   1578c:	beq	15714 <__assert_fail@plt+0x384c>
   15790:	b	15950 <__assert_fail@plt+0x3a88>
   15794:	ldr	r5, [sp, #12]
   15798:	uxtb	r0, r0
   1579c:	mov	r1, #0
   157a0:	cmp	r0, #47	; 0x2f
   157a4:	bne	157cc <__assert_fail@plt+0x3904>
   157a8:	ldrb	r0, [r5]
   157ac:	cmp	r0, #47	; 0x2f
   157b0:	beq	157cc <__assert_fail@plt+0x3904>
   157b4:	mov	r0, r7
   157b8:	mov	r1, r5
   157bc:	mov	r2, r6
   157c0:	blx	r4
   157c4:	clz	r0, r0
   157c8:	lsr	r1, r0, #5
   157cc:	cmp	r1, #0
   157d0:	bne	15788 <__assert_fail@plt+0x38c0>
   157d4:	ldrb	r0, [r5], #1
   157d8:	cmp	r0, #0
   157dc:	bne	15798 <__assert_fail@plt+0x38d0>
   157e0:	b	15788 <__assert_fail@plt+0x38c0>
   157e4:	cmp	r7, #0
   157e8:	bne	15800 <__assert_fail@plt+0x3938>
   157ec:	mov	r0, r9
   157f0:	bl	11cac <strlen@plt>
   157f4:	add	r0, r0, #1
   157f8:	bl	35728 <__assert_fail@plt+0x23860>
   157fc:	mov	r7, r0
   15800:	ldr	r1, [r4, #8]
   15804:	ldr	r6, [r4, #12]
   15808:	and	r0, r1, #1073741824	; 0x40000000
   1580c:	tst	r1, #8
   15810:	bne	1585c <__assert_fail@plt+0x3994>
   15814:	cmp	r0, #0
   15818:	bne	158d8 <__assert_fail@plt+0x3a10>
   1581c:	mov	r5, r9
   15820:	mov	r0, r7
   15824:	mov	r1, r5
   15828:	bl	11bb0 <strcpy@plt>
   1582c:	mov	r0, r6
   15830:	mov	r1, r7
   15834:	bl	1a980 <__assert_fail@plt+0x8ab8>
   15838:	cmp	r0, #0
   1583c:	bne	15960 <__assert_fail@plt+0x3a98>
   15840:	mov	r0, r5
   15844:	mov	r1, #47	; 0x2f
   15848:	bl	11cb8 <strchr@plt>
   1584c:	add	r5, r0, #1
   15850:	cmp	r0, #0
   15854:	bne	15820 <__assert_fail@plt+0x3958>
   15858:	b	156b4 <__assert_fail@plt+0x37ec>
   1585c:	cmp	r0, #0
   15860:	bne	158fc <__assert_fail@plt+0x3a34>
   15864:	mov	r8, r9
   15868:	mov	r0, r7
   1586c:	mov	r1, r8
   15870:	bl	11bb0 <strcpy@plt>
   15874:	mov	r0, r6
   15878:	mov	r1, r7
   1587c:	bl	1a980 <__assert_fail@plt+0x8ab8>
   15880:	cmp	r0, #0
   15884:	bne	15960 <__assert_fail@plt+0x3a98>
   15888:	mov	r0, r7
   1588c:	mov	r1, #47	; 0x2f
   15890:	bl	11d9c <strrchr@plt>
   15894:	cmp	r0, #0
   15898:	beq	158bc <__assert_fail@plt+0x39f4>
   1589c:	mov	r5, #0
   158a0:	mov	r1, r7
   158a4:	strb	r5, [r0]
   158a8:	mov	r0, r6
   158ac:	bl	1a980 <__assert_fail@plt+0x8ab8>
   158b0:	cmp	r0, #0
   158b4:	beq	15888 <__assert_fail@plt+0x39c0>
   158b8:	b	1596c <__assert_fail@plt+0x3aa4>
   158bc:	mov	r0, r8
   158c0:	mov	r1, #47	; 0x2f
   158c4:	bl	11cb8 <strchr@plt>
   158c8:	add	r8, r0, #1
   158cc:	cmp	r0, #0
   158d0:	bne	15868 <__assert_fail@plt+0x39a0>
   158d4:	b	156b4 <__assert_fail@plt+0x37ec>
   158d8:	mov	r0, r7
   158dc:	mov	r1, r9
   158e0:	bl	11bb0 <strcpy@plt>
   158e4:	mov	r0, r6
   158e8:	mov	r1, r7
   158ec:	bl	1a980 <__assert_fail@plt+0x8ab8>
   158f0:	cmp	r0, #0
   158f4:	beq	156b4 <__assert_fail@plt+0x37ec>
   158f8:	b	15960 <__assert_fail@plt+0x3a98>
   158fc:	mov	r0, r7
   15900:	mov	r1, r9
   15904:	bl	11bb0 <strcpy@plt>
   15908:	mov	r0, r6
   1590c:	mov	r1, r7
   15910:	bl	1a980 <__assert_fail@plt+0x8ab8>
   15914:	cmp	r0, #0
   15918:	bne	15960 <__assert_fail@plt+0x3a98>
   1591c:	mov	r0, r7
   15920:	mov	r1, #47	; 0x2f
   15924:	bl	11d9c <strrchr@plt>
   15928:	cmp	r0, #0
   1592c:	beq	156b4 <__assert_fail@plt+0x37ec>
   15930:	mov	r5, #0
   15934:	mov	r1, r7
   15938:	strb	r5, [r0]
   1593c:	mov	r0, r6
   15940:	bl	1a980 <__assert_fail@plt+0x8ab8>
   15944:	cmp	r0, #0
   15948:	beq	1591c <__assert_fail@plt+0x3a54>
   1594c:	b	1596c <__assert_fail@plt+0x3aa4>
   15950:	mov	r5, #0
   15954:	ldr	r4, [sp, #8]
   15958:	ldr	r7, [sp, #4]
   1595c:	b	1596c <__assert_fail@plt+0x3aa4>
   15960:	mov	r5, #0
   15964:	b	1596c <__assert_fail@plt+0x3aa4>
   15968:	mov	r5, #1
   1596c:	mov	r0, r7
   15970:	bl	17c10 <__assert_fail@plt+0x5d48>
   15974:	ldr	r0, [r4, #8]
   15978:	mov	r1, #1
   1597c:	bic	r0, r1, r0, lsr #29
   15980:	subs	r0, r5, r0
   15984:	movwne	r0, #1
   15988:	sub	sp, fp, #28
   1598c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15994:	add	fp, sp, #28
   15998:	sub	sp, sp, #4
   1599c:	mov	r7, r2
   159a0:	mov	r4, r1
   159a4:	mov	r6, r0
   159a8:	tst	r2, #402653184	; 0x18000000
   159ac:	beq	15a48 <__assert_fail@plt+0x3b80>
   159b0:	mov	r0, r4
   159b4:	mov	r1, r7
   159b8:	bl	14df0 <__assert_fail@plt+0x2f28>
   159bc:	cmp	r0, #0
   159c0:	beq	15a48 <__assert_fail@plt+0x3b80>
   159c4:	ldr	r5, [r6]
   159c8:	cmp	r5, #0
   159cc:	beq	159ec <__assert_fail@plt+0x3b24>
   159d0:	ldr	r0, [r5, #4]
   159d4:	cmp	r0, #1
   159d8:	bne	159ec <__assert_fail@plt+0x3b24>
   159dc:	ldr	r0, [r5, #8]
   159e0:	eor	r0, r0, r7
   159e4:	tst	r0, #536870912	; 0x20000000
   159e8:	beq	15a0c <__assert_fail@plt+0x3b44>
   159ec:	mov	r0, #24
   159f0:	bl	35b20 <__assert_fail@plt+0x23c58>
   159f4:	ldr	r1, [r6]
   159f8:	mov	r5, r0
   159fc:	mov	r0, #1
   15a00:	str	r1, [r5]
   15a04:	stmib	r5, {r0, r7}
   15a08:	str	r5, [r6]
   15a0c:	mov	r1, r5
   15a10:	ldr	r2, [r1, #16]!
   15a14:	ldr	r0, [r1, #4]
   15a18:	cmp	r0, r2
   15a1c:	bne	15b70 <__assert_fail@plt+0x3ca8>
   15a20:	ldr	r0, [r5, #12]
   15a24:	mov	r2, #36	; 0x24
   15a28:	mvn	r3, #0
   15a2c:	str	r2, [sp]
   15a30:	mov	r2, #1
   15a34:	bl	35958 <__assert_fail@plt+0x23a90>
   15a38:	str	r0, [r5, #12]
   15a3c:	mov	r8, r0
   15a40:	ldr	r0, [r5, #20]
   15a44:	b	15b74 <__assert_fail@plt+0x3cac>
   15a48:	ldr	r5, [r6]
   15a4c:	cmp	r5, #0
   15a50:	beq	15a78 <__assert_fail@plt+0x3bb0>
   15a54:	ldr	r0, [r5, #4]
   15a58:	cmp	r0, #0
   15a5c:	bne	15a78 <__assert_fail@plt+0x3bb0>
   15a60:	ldr	r0, [r5, #8]
   15a64:	movw	r1, #24
   15a68:	movt	r1, #24576	; 0x6000
   15a6c:	eor	r0, r0, r7
   15a70:	tst	r0, r1
   15a74:	beq	15ae0 <__assert_fail@plt+0x3c18>
   15a78:	mov	r0, #24
   15a7c:	bl	35b20 <__assert_fail@plt+0x23c58>
   15a80:	mov	r5, r0
   15a84:	mov	r0, #0
   15a88:	movw	r2, #24632	; 0x6038
   15a8c:	movw	r3, #24660	; 0x6054
   15a90:	mov	r1, #0
   15a94:	stmib	r5, {r0, r7}
   15a98:	movw	r0, #24684	; 0x606c
   15a9c:	movt	r2, #1
   15aa0:	movt	r3, #1
   15aa4:	movt	r0, #1
   15aa8:	str	r0, [sp]
   15aac:	ands	r0, r7, #16
   15ab0:	movw	r0, #24444	; 0x5f7c
   15ab4:	movt	r0, #1
   15ab8:	movne	r2, r0
   15abc:	movw	r0, #24636	; 0x603c
   15ac0:	movt	r0, #1
   15ac4:	movne	r3, r0
   15ac8:	mov	r0, #0
   15acc:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   15ad0:	str	r0, [r5, #12]
   15ad4:	ldr	r0, [r6]
   15ad8:	str	r0, [r5]
   15adc:	str	r5, [r6]
   15ae0:	mov	r0, r4
   15ae4:	bl	35c2c <__assert_fail@plt+0x23d64>
   15ae8:	mov	r4, r0
   15aec:	and	r0, r7, #268435458	; 0x10000002
   15af0:	cmp	r0, #268435456	; 0x10000000
   15af4:	bne	15b4c <__assert_fail@plt+0x3c84>
   15af8:	mov	r0, r4
   15afc:	mov	r1, r4
   15b00:	ldrb	r2, [r1]
   15b04:	cmp	r2, #92	; 0x5c
   15b08:	bne	15b44 <__assert_fail@plt+0x3c7c>
   15b0c:	mov	r2, r1
   15b10:	ldrb	r3, [r2, #1]!
   15b14:	cmp	r3, #0
   15b18:	moveq	r2, r1
   15b1c:	movwne	r3, #1
   15b20:	ldrb	r2, [r2]
   15b24:	add	r1, r1, r3
   15b28:	strb	r2, [r0], #1
   15b2c:	cmp	r2, #0
   15b30:	add	r1, r1, #1
   15b34:	beq	15b4c <__assert_fail@plt+0x3c84>
   15b38:	ldrb	r2, [r1]
   15b3c:	cmp	r2, #92	; 0x5c
   15b40:	beq	15b0c <__assert_fail@plt+0x3c44>
   15b44:	mov	r3, #0
   15b48:	b	15b24 <__assert_fail@plt+0x3c5c>
   15b4c:	ldr	r0, [r5, #12]
   15b50:	mov	r1, r4
   15b54:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   15b58:	cmp	r0, r4
   15b5c:	beq	15ca0 <__assert_fail@plt+0x3dd8>
   15b60:	mov	r0, r4
   15b64:	sub	sp, fp, #28
   15b68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b6c:	b	17c10 <__assert_fail@plt+0x5d48>
   15b70:	ldr	r8, [r5, #12]
   15b74:	add	sl, r0, r0, lsl #3
   15b78:	add	r9, r0, #1
   15b7c:	tst	r7, #134217728	; 0x8000000
   15b80:	str	r9, [r5, #20]
   15b84:	str	r7, [r8, sl, lsl #2]
   15b88:	bne	15bc4 <__assert_fail@plt+0x3cfc>
   15b8c:	tst	r7, #67108864	; 0x4000000
   15b90:	beq	15bb4 <__assert_fail@plt+0x3cec>
   15b94:	mov	r0, r4
   15b98:	bl	35c2c <__assert_fail@plt+0x23d64>
   15b9c:	mov	r4, r0
   15ba0:	mov	r0, #8
   15ba4:	bl	35728 <__assert_fail@plt+0x23860>
   15ba8:	ldr	r1, [r6, #4]
   15bac:	stm	r0, {r1, r4}
   15bb0:	str	r0, [r6, #4]
   15bb4:	add	r0, r8, sl, lsl #2
   15bb8:	str	r4, [r0, #4]
   15bbc:	sub	sp, fp, #28
   15bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc4:	mov	r0, #2
   15bc8:	tst	r7, #8
   15bcc:	and	r0, r0, r7, lsr #3
   15bd0:	orr	r6, r0, #9
   15bd4:	bne	15c0c <__assert_fail@plt+0x3d44>
   15bd8:	add	r0, r8, sl, lsl #2
   15bdc:	mov	r1, r4
   15be0:	mov	r2, r6
   15be4:	add	r0, r0, #4
   15be8:	bl	22624 <__assert_fail@plt+0x1075c>
   15bec:	mov	r4, r0
   15bf0:	cmp	r4, #0
   15bf4:	beq	15ca0 <__assert_fail@plt+0x3dd8>
   15bf8:	ldr	r9, [r5, #20]
   15bfc:	sub	r0, r9, #1
   15c00:	str	r0, [r5, #20]
   15c04:	sub	sp, fp, #28
   15c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c0c:	mov	r0, r4
   15c10:	bl	11cac <strlen@plt>
   15c14:	sub	r1, r4, #1
   15c18:	mov	r7, r0
   15c1c:	cmp	r0, #1
   15c20:	blt	15c38 <__assert_fail@plt+0x3d70>
   15c24:	ldrb	r2, [r1, r7]
   15c28:	sub	r0, r7, #1
   15c2c:	cmp	r2, #47	; 0x2f
   15c30:	beq	15c18 <__assert_fail@plt+0x3d50>
   15c34:	b	15c40 <__assert_fail@plt+0x3d78>
   15c38:	cmp	r7, #0
   15c3c:	beq	15bfc <__assert_fail@plt+0x3d34>
   15c40:	add	r0, r7, #7
   15c44:	bl	35740 <__assert_fail@plt+0x23878>
   15c48:	mov	r1, r4
   15c4c:	mov	r2, r7
   15c50:	mov	r9, r6
   15c54:	mov	r6, r0
   15c58:	bl	11ab4 <memcpy@plt>
   15c5c:	movw	r0, #12072	; 0x2f28
   15c60:	mov	r1, r6
   15c64:	mov	r2, r9
   15c68:	movt	r0, #10798	; 0x2a2e
   15c6c:	str	r0, [r1, r7]!
   15c70:	movw	r0, #10538	; 0x292a
   15c74:	movt	r0, #63	; 0x3f
   15c78:	str	r0, [r1, #3]
   15c7c:	add	r0, r8, sl, lsl #2
   15c80:	mov	r1, r6
   15c84:	add	r0, r0, #4
   15c88:	bl	22624 <__assert_fail@plt+0x1075c>
   15c8c:	mov	r4, r0
   15c90:	mov	r0, r6
   15c94:	bl	17c10 <__assert_fail@plt+0x5d48>
   15c98:	cmp	r4, #0
   15c9c:	bne	15bf8 <__assert_fail@plt+0x3d30>
   15ca0:	sub	sp, fp, #28
   15ca4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cac:	add	fp, sp, #28
   15cb0:	sub	sp, sp, #20
   15cb4:	str	r0, [sp, #8]
   15cb8:	mov	r0, #0
   15cbc:	mov	r9, r1
   15cc0:	mov	r1, #0
   15cc4:	str	r3, [sp, #12]
   15cc8:	mov	r4, r2
   15ccc:	str	r0, [sp, #4]
   15cd0:	mov	r0, r2
   15cd4:	str	r1, [sp, #16]
   15cd8:	bl	11e98 <getc@plt>
   15cdc:	cmn	r0, #1
   15ce0:	beq	15d54 <__assert_fail@plt+0x3e8c>
   15ce4:	mov	r5, r0
   15ce8:	mov	r0, #0
   15cec:	mov	sl, #1
   15cf0:	add	r8, sp, #16
   15cf4:	mov	r7, #0
   15cf8:	mov	r6, #0
   15cfc:	cmp	r6, r0
   15d00:	bne	15d20 <__assert_fail@plt+0x3e58>
   15d04:	mov	r0, r7
   15d08:	mov	r1, r8
   15d0c:	mov	r2, #1
   15d10:	mvn	r3, #0
   15d14:	str	sl, [sp]
   15d18:	bl	35958 <__assert_fail@plt+0x23a90>
   15d1c:	mov	r7, r0
   15d20:	mov	r0, r4
   15d24:	strb	r5, [r7, r6]
   15d28:	bl	11e98 <getc@plt>
   15d2c:	cmn	r0, #1
   15d30:	beq	15d4c <__assert_fail@plt+0x3e84>
   15d34:	mov	r5, r0
   15d38:	ldr	r0, [sp, #16]
   15d3c:	add	r6, r6, #1
   15d40:	cmp	r6, r0
   15d44:	beq	15d04 <__assert_fail@plt+0x3e3c>
   15d48:	b	15d20 <__assert_fail@plt+0x3e58>
   15d4c:	add	r5, r6, #1
   15d50:	b	15d5c <__assert_fail@plt+0x3e94>
   15d54:	mov	r5, #0
   15d58:	mov	r7, #0
   15d5c:	ldr	r6, [fp, #8]
   15d60:	mov	r0, r4
   15d64:	bl	11a9c <ferror@plt>
   15d68:	cmp	r0, #0
   15d6c:	beq	15d7c <__assert_fail@plt+0x3eb4>
   15d70:	bl	11cdc <__errno_location@plt>
   15d74:	ldr	r0, [r0]
   15d78:	str	r0, [sp, #4]
   15d7c:	add	r1, r5, #1
   15d80:	mov	r0, r7
   15d84:	bl	357a4 <__assert_fail@plt+0x238dc>
   15d88:	mov	r7, r0
   15d8c:	mov	r4, r0
   15d90:	cmp	r5, #0
   15d94:	strb	r6, [r7, r5]!
   15d98:	beq	15db0 <__assert_fail@plt+0x3ee8>
   15d9c:	add	r0, r5, r4
   15da0:	ldrb	r0, [r0, #-1]
   15da4:	subs	r5, r0, r6
   15da8:	movwne	r5, #1
   15dac:	b	15db4 <__assert_fail@plt+0x3eec>
   15db0:	mov	r5, #0
   15db4:	mov	r0, #8
   15db8:	bl	35728 <__assert_fail@plt+0x23860>
   15dbc:	ldr	r1, [r9, #4]
   15dc0:	add	r7, r7, r5
   15dc4:	cmp	r4, r7
   15dc8:	stm	r0, {r1, r4}
   15dcc:	str	r0, [r9, #4]
   15dd0:	bcs	15e6c <__assert_fail@plt+0x3fa4>
   15dd4:	ldr	r8, [fp, #12]
   15dd8:	mov	sl, #0
   15ddc:	mov	r5, r4
   15de0:	ldrb	r0, [r4]
   15de4:	cmp	r0, r6
   15de8:	bne	15e10 <__assert_fail@plt+0x3f48>
   15dec:	b	15e28 <__assert_fail@plt+0x3f60>
   15df0:	strb	sl, [r1]
   15df4:	mov	r1, r5
   15df8:	ldr	r2, [sp, #12]
   15dfc:	ldr	r5, [sp, #8]
   15e00:	mov	r0, r9
   15e04:	mov	r3, r8
   15e08:	blx	r5
   15e0c:	add	r5, r4, #1
   15e10:	add	r4, r4, #1
   15e14:	cmp	r4, r7
   15e18:	beq	15e6c <__assert_fail@plt+0x3fa4>
   15e1c:	ldrb	r0, [r4]
   15e20:	cmp	r0, r6
   15e24:	bne	15e10 <__assert_fail@plt+0x3f48>
   15e28:	bl	11c7c <__ctype_b_loc@plt>
   15e2c:	ldr	r0, [r0]
   15e30:	add	r1, r0, r6, lsl #1
   15e34:	ldrb	r1, [r1, #1]
   15e38:	tst	r1, #32
   15e3c:	mov	r1, r4
   15e40:	beq	15df0 <__assert_fail@plt+0x3f28>
   15e44:	mov	r1, r4
   15e48:	cmp	r5, r1
   15e4c:	beq	15e0c <__assert_fail@plt+0x3f44>
   15e50:	ldrb	r2, [r1, #-1]!
   15e54:	add	r2, r0, r2, lsl #1
   15e58:	ldrb	r2, [r2, #1]
   15e5c:	tst	r2, #32
   15e60:	bne	15e48 <__assert_fail@plt+0x3f80>
   15e64:	add	r1, r1, #1
   15e68:	b	15df0 <__assert_fail@plt+0x3f28>
   15e6c:	bl	11cdc <__errno_location@plt>
   15e70:	ldr	r1, [sp, #4]
   15e74:	cmp	r1, #0
   15e78:	str	r1, [r0]
   15e7c:	mvnne	r1, #0
   15e80:	mov	r0, r1
   15e84:	sub	sp, fp, #28
   15e88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e8c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15e90:	add	fp, sp, #24
   15e94:	sub	sp, sp, #16
   15e98:	mov	r5, r1
   15e9c:	movw	r1, #49312	; 0xc0a0
   15ea0:	str	r0, [sp, #12]
   15ea4:	mov	r0, r2
   15ea8:	mov	r4, r3
   15eac:	mov	r6, r2
   15eb0:	movt	r1, #3
   15eb4:	bl	11a3c <strcmp@plt>
   15eb8:	ldr	r8, [fp, #8]
   15ebc:	cmp	r0, #0
   15ec0:	beq	15f38 <__assert_fail@plt+0x4070>
   15ec4:	movw	r1, #47356	; 0xb8fc
   15ec8:	mov	r0, r6
   15ecc:	movt	r1, #3
   15ed0:	bl	11e20 <fopen64@plt>
   15ed4:	mvn	r6, #0
   15ed8:	cmp	r0, #0
   15edc:	beq	15f2c <__assert_fail@plt+0x4064>
   15ee0:	mov	r7, r0
   15ee4:	add	r0, sp, #12
   15ee8:	mov	r1, r5
   15eec:	mov	r3, r4
   15ef0:	str	r8, [sp]
   15ef4:	str	r0, [sp, #4]
   15ef8:	movw	r0, #24436	; 0x5f74
   15efc:	mov	r2, r7
   15f00:	movt	r0, #1
   15f04:	bl	15ca8 <__assert_fail@plt+0x3de0>
   15f08:	mov	r8, r0
   15f0c:	bl	11cdc <__errno_location@plt>
   15f10:	ldr	r4, [r0]
   15f14:	mov	r5, r0
   15f18:	mov	r0, r7
   15f1c:	bl	16070 <__assert_fail@plt+0x41a8>
   15f20:	cmp	r0, #0
   15f24:	moveq	r6, r8
   15f28:	streq	r4, [r5]
   15f2c:	mov	r0, r6
   15f30:	sub	sp, fp, #24
   15f34:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f38:	movw	r0, #53808	; 0xd230
   15f3c:	mov	r1, r5
   15f40:	mov	r3, r4
   15f44:	str	r8, [sp]
   15f48:	movt	r0, #4
   15f4c:	ldr	r2, [r0]
   15f50:	add	r0, sp, #12
   15f54:	str	r0, [sp, #4]
   15f58:	movw	r0, #24436	; 0x5f74
   15f5c:	movt	r0, #1
   15f60:	bl	15ca8 <__assert_fail@plt+0x3de0>
   15f64:	mov	r6, r0
   15f68:	mov	r0, r6
   15f6c:	sub	sp, fp, #24
   15f70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15f74:	ldr	r3, [r3]
   15f78:	bx	r3
   15f7c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15f80:	add	fp, sp, #24
   15f84:	sub	sp, sp, #56	; 0x38
   15f88:	mov	r7, #0
   15f8c:	mov	r8, r1
   15f90:	str	r7, [sp, #8]
   15f94:	str	r7, [sp, #4]
   15f98:	strb	r7, [sp, #12]
   15f9c:	strb	r7, [sp]
   15fa0:	str	r0, [sp, #16]
   15fa4:	mov	r0, sp
   15fa8:	bl	1d1ec <__assert_fail@plt+0xb324>
   15fac:	ldrb	r1, [sp, #24]
   15fb0:	ldr	r0, [sp, #28]
   15fb4:	cmp	r1, #0
   15fb8:	beq	15fc4 <__assert_fail@plt+0x40fc>
   15fbc:	cmp	r0, #0
   15fc0:	beq	16028 <__assert_fail@plt+0x4160>
   15fc4:	mov	r4, #0
   15fc8:	mov	r5, sp
   15fcc:	mov	r7, #0
   15fd0:	tst	r1, #255	; 0xff
   15fd4:	beq	15fe8 <__assert_fail@plt+0x4120>
   15fd8:	bl	11ad8 <towlower@plt>
   15fdc:	mov	r6, r0
   15fe0:	ldr	r0, [sp, #16]
   15fe4:	b	15ff0 <__assert_fail@plt+0x4128>
   15fe8:	ldr	r0, [sp, #16]
   15fec:	ldrb	r6, [r0]
   15ff0:	strb	r4, [sp, #12]
   15ff4:	ldr	r1, [sp, #20]
   15ff8:	add	r0, r0, r1
   15ffc:	str	r0, [sp, #16]
   16000:	mov	r0, r5
   16004:	bl	1d1ec <__assert_fail@plt+0xb324>
   16008:	rsb	r0, r7, r7, lsl #5
   1600c:	ldrb	r1, [sp, #24]
   16010:	add	r7, r6, r0
   16014:	ldr	r0, [sp, #28]
   16018:	cmp	r1, #0
   1601c:	beq	15fd0 <__assert_fail@plt+0x4108>
   16020:	cmp	r0, #0
   16024:	bne	15fd0 <__assert_fail@plt+0x4108>
   16028:	udiv	r0, r7, r8
   1602c:	mls	r0, r0, r8, r7
   16030:	sub	sp, fp, #24
   16034:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   16038:	b	1ac00 <__assert_fail@plt+0x8d38>
   1603c:	push	{fp, lr}
   16040:	mov	fp, sp
   16044:	bl	1cf74 <__assert_fail@plt+0xb0ac>
   16048:	clz	r0, r0
   1604c:	lsr	r0, r0, #5
   16050:	pop	{fp, pc}
   16054:	push	{fp, lr}
   16058:	mov	fp, sp
   1605c:	bl	11a3c <strcmp@plt>
   16060:	clz	r0, r0
   16064:	lsr	r0, r0, #5
   16068:	pop	{fp, pc}
   1606c:	b	17c10 <__assert_fail@plt+0x5d48>
   16070:	push	{r4, r5, r6, sl, fp, lr}
   16074:	add	fp, sp, #16
   16078:	sub	sp, sp, #8
   1607c:	mov	r4, r0
   16080:	bl	11d30 <fileno@plt>
   16084:	cmn	r0, #1
   16088:	ble	160fc <__assert_fail@plt+0x4234>
   1608c:	mov	r0, r4
   16090:	bl	11c34 <__freading@plt>
   16094:	cmp	r0, #0
   16098:	beq	160c4 <__assert_fail@plt+0x41fc>
   1609c:	mov	r0, r4
   160a0:	bl	11d30 <fileno@plt>
   160a4:	mov	r1, #1
   160a8:	mov	r2, #0
   160ac:	mov	r3, #0
   160b0:	str	r1, [sp]
   160b4:	bl	11b8c <lseek64@plt>
   160b8:	and	r0, r0, r1
   160bc:	cmn	r0, #1
   160c0:	beq	160fc <__assert_fail@plt+0x4234>
   160c4:	mov	r0, r4
   160c8:	bl	1610c <__assert_fail@plt+0x4244>
   160cc:	cmp	r0, #0
   160d0:	beq	160fc <__assert_fail@plt+0x4234>
   160d4:	bl	11cdc <__errno_location@plt>
   160d8:	ldr	r6, [r0]
   160dc:	mov	r5, r0
   160e0:	mov	r0, r4
   160e4:	bl	11d54 <fclose@plt>
   160e8:	cmp	r6, #0
   160ec:	strne	r6, [r5]
   160f0:	mvnne	r0, #0
   160f4:	sub	sp, fp, #16
   160f8:	pop	{r4, r5, r6, sl, fp, pc}
   160fc:	mov	r0, r4
   16100:	sub	sp, fp, #16
   16104:	pop	{r4, r5, r6, sl, fp, lr}
   16108:	b	11d54 <fclose@plt>
   1610c:	push	{r4, sl, fp, lr}
   16110:	add	fp, sp, #8
   16114:	sub	sp, sp, #8
   16118:	mov	r4, r0
   1611c:	cmp	r0, #0
   16120:	beq	16158 <__assert_fail@plt+0x4290>
   16124:	mov	r0, r4
   16128:	bl	11c34 <__freading@plt>
   1612c:	cmp	r0, #0
   16130:	beq	16158 <__assert_fail@plt+0x4290>
   16134:	ldrb	r0, [r4, #1]
   16138:	tst	r0, #1
   1613c:	beq	16158 <__assert_fail@plt+0x4290>
   16140:	mov	r0, #1
   16144:	mov	r2, #0
   16148:	mov	r3, #0
   1614c:	str	r0, [sp]
   16150:	mov	r0, r4
   16154:	bl	17ea4 <__assert_fail@plt+0x5fdc>
   16158:	mov	r0, r4
   1615c:	sub	sp, fp, #8
   16160:	pop	{r4, sl, fp, lr}
   16164:	b	11a60 <fflush@plt>
   16168:	push	{fp, lr}
   1616c:	mov	fp, sp
   16170:	sub	sp, sp, #16
   16174:	str	r3, [sp, #8]
   16178:	mvn	r3, #0
   1617c:	str	r3, [sp, #4]
   16180:	mov	r3, #0
   16184:	str	r3, [sp]
   16188:	ldr	r3, [fp, #8]
   1618c:	str	r3, [sp, #12]
   16190:	mov	r3, #0
   16194:	bl	161a0 <__assert_fail@plt+0x42d8>
   16198:	mov	sp, fp
   1619c:	pop	{fp, pc}
   161a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161a4:	add	fp, sp, #28
   161a8:	sub	sp, sp, #124	; 0x7c
   161ac:	sub	sp, sp, #1024	; 0x400
   161b0:	str	r3, [sp, #76]	; 0x4c
   161b4:	mov	r4, r2
   161b8:	mov	sl, r1
   161bc:	mov	r7, r0
   161c0:	bl	11cdc <__errno_location@plt>
   161c4:	mov	r2, r4
   161c8:	movw	r3, #43540	; 0xaa14
   161cc:	str	r0, [sp, #56]	; 0x38
   161d0:	ldr	r1, [r2, #8]!
   161d4:	movt	r3, #3
   161d8:	cmp	r1, #0
   161dc:	mov	r6, r1
   161e0:	movweq	r6, #12
   161e4:	cmp	r1, #12
   161e8:	subgt	r6, r1, #12
   161ec:	ldr	r1, [r2, #32]
   161f0:	cmp	r1, #0
   161f4:	movne	r3, r1
   161f8:	ldr	r1, [r0]
   161fc:	str	r3, [sp, #44]	; 0x2c
   16200:	ldrb	r3, [sl]
   16204:	str	r1, [sp, #52]	; 0x34
   16208:	cmp	r3, #0
   1620c:	beq	17bd0 <__assert_fail@plt+0x5d08>
   16210:	sub	r0, fp, #46	; 0x2e
   16214:	mvn	r1, #13
   16218:	str	r6, [sp, #32]
   1621c:	ldr	r6, [fp, #12]
   16220:	str	r2, [sp, #36]	; 0x24
   16224:	mov	ip, #0
   16228:	str	r4, [sp, #68]	; 0x44
   1622c:	str	r7, [sp, #80]	; 0x50
   16230:	sub	r1, r1, r0
   16234:	str	r1, [sp, #24]
   16238:	add	r1, r0, #13
   1623c:	add	r0, r0, #14
   16240:	str	r1, [sp, #20]
   16244:	add	r1, sp, #96	; 0x60
   16248:	str	r0, [sp, #60]	; 0x3c
   1624c:	add	r1, r1, #1
   16250:	str	r1, [sp, #40]	; 0x28
   16254:	sub	r1, fp, #51	; 0x33
   16258:	add	r2, r1, #3
   1625c:	add	r1, r1, #2
   16260:	str	r1, [sp, #64]	; 0x40
   16264:	add	r1, r4, #12
   16268:	str	r2, [sp, #48]	; 0x30
   1626c:	str	r1, [sp, #28]
   16270:	uxtb	r1, r3
   16274:	mov	r8, sl
   16278:	cmp	r1, #37	; 0x25
   1627c:	beq	162c4 <__assert_fail@plt+0x43fc>
   16280:	b	1636c <__assert_fail@plt+0x44a4>
   16284:	ldr	r7, [sp, #80]	; 0x50
   16288:	mov	r0, r8
   1628c:	mov	r1, r5
   16290:	mov	r2, #1
   16294:	mov	r3, r7
   16298:	bl	11b80 <fwrite@plt>
   1629c:	ldr	ip, [sp, #92]	; 0x5c
   162a0:	add	ip, r4, ip
   162a4:	ldrb	r3, [sl, #1]!
   162a8:	mvn	r6, #0
   162ac:	cmp	r3, #0
   162b0:	beq	17bd4 <__assert_fail@plt+0x5d0c>
   162b4:	uxtb	r1, r3
   162b8:	mov	r8, sl
   162bc:	cmp	r1, #37	; 0x25
   162c0:	bne	1636c <__assert_fail@plt+0x44a4>
   162c4:	ldr	lr, [sp, #76]	; 0x4c
   162c8:	mov	r4, #0
   162cc:	mov	r7, #0
   162d0:	mov	sl, r8
   162d4:	add	r1, sl, #2
   162d8:	add	sl, sl, #1
   162dc:	ldrb	r9, [sl]
   162e0:	sub	r2, r9, #35	; 0x23
   162e4:	cmp	r2, #13
   162e8:	bhi	1632c <__assert_fail@plt+0x4464>
   162ec:	add	r3, pc, #0
   162f0:	ldr	pc, [r3, r2, lsl #2]
   162f4:	andeq	r6, r1, r4, ror #6
   162f8:	andeq	r6, r1, ip, ror #7
   162fc:	andeq	r6, r1, ip, ror #7
   16300:	andeq	r6, r1, ip, ror #7
   16304:	andeq	r6, r1, ip, ror #7
   16308:	andeq	r6, r1, ip, ror #7
   1630c:	andeq	r6, r1, ip, ror #7
   16310:	andeq	r6, r1, ip, ror #7
   16314:	andeq	r6, r1, r4, lsr r3
   16318:	andeq	r6, r1, ip, ror #7
   1631c:	andeq	r6, r1, r4, lsr r3
   16320:	andeq	r6, r1, ip, ror #7
   16324:	andeq	r6, r1, ip, ror #7
   16328:	andeq	r6, r1, r4, lsr r3
   1632c:	cmp	r9, #95	; 0x5f
   16330:	bne	16354 <__assert_fail@plt+0x448c>
   16334:	add	r1, r1, #1
   16338:	add	sl, sl, #1
   1633c:	mov	r7, r9
   16340:	ldrb	r9, [sl]
   16344:	sub	r2, r9, #35	; 0x23
   16348:	cmp	r2, #13
   1634c:	bls	162ec <__assert_fail@plt+0x4424>
   16350:	b	1632c <__assert_fail@plt+0x4464>
   16354:	cmp	r9, #94	; 0x5e
   16358:	bne	163ec <__assert_fail@plt+0x4524>
   1635c:	mov	lr, #1
   16360:	b	162d4 <__assert_fail@plt+0x440c>
   16364:	mov	r4, #1
   16368:	b	162d4 <__assert_fail@plt+0x440c>
   1636c:	bic	r1, r6, r6, asr #31
   16370:	mov	r4, #1
   16374:	mvn	r2, ip
   16378:	cmp	r1, #1
   1637c:	movhi	r4, r1
   16380:	cmp	r4, r2
   16384:	bcs	17bec <__assert_fail@plt+0x5d24>
   16388:	cmp	r7, #0
   1638c:	beq	163d0 <__assert_fail@plt+0x4508>
   16390:	mov	r9, ip
   16394:	cmp	r1, #2
   16398:	bcc	163c0 <__assert_fail@plt+0x44f8>
   1639c:	sub	r5, r1, #1
   163a0:	mov	r6, #0
   163a4:	mov	r0, #32
   163a8:	mov	r1, r7
   163ac:	bl	11db4 <fputc@plt>
   163b0:	add	r6, r6, #1
   163b4:	cmp	r6, r5
   163b8:	bcc	163a4 <__assert_fail@plt+0x44dc>
   163bc:	ldrb	r3, [r8]
   163c0:	uxtb	r0, r3
   163c4:	mov	r1, r7
   163c8:	bl	11db4 <fputc@plt>
   163cc:	mov	ip, r9
   163d0:	add	ip, r4, ip
   163d4:	mov	sl, r8
   163d8:	ldrb	r3, [sl, #1]!
   163dc:	mvn	r6, #0
   163e0:	cmp	r3, #0
   163e4:	bne	162b4 <__assert_fail@plt+0x43ec>
   163e8:	b	17bd4 <__assert_fail@plt+0x5d0c>
   163ec:	sub	r2, r9, #48	; 0x30
   163f0:	cmp	r2, #9
   163f4:	bhi	16488 <__assert_fail@plt+0x45c0>
   163f8:	movw	r5, #52428	; 0xcccc
   163fc:	str	lr, [sp, #88]	; 0x58
   16400:	mov	lr, r7
   16404:	mov	r6, #0
   16408:	mov	r7, #-2147483648	; 0x80000000
   1640c:	movt	r5, #3276	; 0xccc
   16410:	cmn	r6, #1
   16414:	bgt	1644c <__assert_fail@plt+0x4584>
   16418:	b	16458 <__assert_fail@plt+0x4590>
   1641c:	add	r2, r6, r6, lsl #2
   16420:	lsl	r3, r2, #1
   16424:	uxtab	r0, r3, r9
   16428:	sub	r6, r0, #48	; 0x30
   1642c:	cmp	r6, r2, lsl #1
   16430:	mvnvs	r6, #-2147483648	; 0x80000000
   16434:	ldrb	r9, [r1], #1
   16438:	sub	r2, r9, #48	; 0x30
   1643c:	cmp	r2, #10
   16440:	bcs	1647c <__assert_fail@plt+0x45b4>
   16444:	cmn	r6, #1
   16448:	ble	16458 <__assert_fail@plt+0x4590>
   1644c:	cmp	r6, r5
   16450:	ble	1641c <__assert_fail@plt+0x4554>
   16454:	b	16468 <__assert_fail@plt+0x45a0>
   16458:	beq	1641c <__assert_fail@plt+0x4554>
   1645c:	sdiv	r2, r7, r6
   16460:	cmp	r2, #10
   16464:	bge	1641c <__assert_fail@plt+0x4554>
   16468:	mvn	r6, #-2147483648	; 0x80000000
   1646c:	ldrb	r9, [r1], #1
   16470:	sub	r2, r9, #48	; 0x30
   16474:	cmp	r2, #10
   16478:	bcc	16444 <__assert_fail@plt+0x457c>
   1647c:	mov	r7, lr
   16480:	ldr	lr, [sp, #88]	; 0x58
   16484:	sub	sl, r1, #1
   16488:	cmp	r9, #79	; 0x4f
   1648c:	cmpne	r9, #69	; 0x45
   16490:	bne	164a8 <__assert_fail@plt+0x45e0>
   16494:	ldrb	r1, [sl, #1]!
   16498:	cmp	r1, #122	; 0x7a
   1649c:	str	ip, [sp, #92]	; 0x5c
   164a0:	bls	164bc <__assert_fail@plt+0x45f4>
   164a4:	b	16f6c <__assert_fail@plt+0x50a4>
   164a8:	mov	r1, r9
   164ac:	mov	r9, #0
   164b0:	cmp	r1, #122	; 0x7a
   164b4:	str	ip, [sp, #92]	; 0x5c
   164b8:	bhi	16f6c <__assert_fail@plt+0x50a4>
   164bc:	movw	r5, #44350	; 0xad3e
   164c0:	str	r7, [sp, #84]	; 0x54
   164c4:	str	r4, [sp, #72]	; 0x48
   164c8:	add	r2, pc, #12
   164cc:	mov	r7, #0
   164d0:	mvn	r4, #0
   164d4:	movt	r5, #3
   164d8:	ldr	pc, [r2, r1, lsl #2]
   164dc:	andeq	r6, r1, ip, lsr r8
   164e0:	andeq	r6, r1, r4, ror #30
   164e4:	andeq	r6, r1, r4, ror #30
   164e8:	andeq	r6, r1, r4, ror #30
   164ec:	andeq	r6, r1, r4, ror #30
   164f0:	andeq	r6, r1, r4, ror #30
   164f4:	andeq	r6, r1, r4, ror #30
   164f8:	andeq	r6, r1, r4, ror #30
   164fc:	andeq	r6, r1, r4, ror #30
   16500:	andeq	r6, r1, r4, ror #30
   16504:	andeq	r6, r1, r4, ror #30
   16508:	andeq	r6, r1, r4, ror #30
   1650c:	andeq	r6, r1, r4, ror #30
   16510:	andeq	r6, r1, r4, ror #30
   16514:	andeq	r6, r1, r4, ror #30
   16518:	andeq	r6, r1, r4, ror #30
   1651c:	andeq	r6, r1, r4, ror #30
   16520:	andeq	r6, r1, r4, ror #30
   16524:	andeq	r6, r1, r4, ror #30
   16528:	andeq	r6, r1, r4, ror #30
   1652c:	andeq	r6, r1, r4, ror #30
   16530:	andeq	r6, r1, r4, ror #30
   16534:	andeq	r6, r1, r4, ror #30
   16538:	andeq	r6, r1, r4, ror #30
   1653c:	andeq	r6, r1, r4, ror #30
   16540:	andeq	r6, r1, r4, ror #30
   16544:	andeq	r6, r1, r4, ror #30
   16548:	andeq	r6, r1, r4, ror #30
   1654c:	andeq	r6, r1, r4, ror #30
   16550:	andeq	r6, r1, r4, ror #30
   16554:	andeq	r6, r1, r4, ror #30
   16558:	andeq	r6, r1, r4, ror #30
   1655c:	andeq	r6, r1, r4, ror #30
   16560:	andeq	r6, r1, r4, ror #30
   16564:	andeq	r6, r1, r4, ror #30
   16568:	andeq	r6, r1, r4, ror #30
   1656c:	andeq	r6, r1, r4, ror #30
   16570:	andeq	r6, r1, r0, lsr r8
   16574:	andeq	r6, r1, r4, ror #30
   16578:	andeq	r6, r1, r4, ror #30
   1657c:	andeq	r6, r1, r4, ror #30
   16580:	andeq	r6, r1, r4, ror #30
   16584:	andeq	r6, r1, r4, ror #30
   16588:	andeq	r6, r1, r4, ror #30
   1658c:	andeq	r6, r1, r4, ror #30
   16590:	andeq	r6, r1, r4, ror #30
   16594:	andeq	r6, r1, r4, ror #30
   16598:	andeq	r6, r1, r4, ror #30
   1659c:	andeq	r6, r1, r4, ror #30
   165a0:	andeq	r6, r1, r4, ror #30
   165a4:	andeq	r6, r1, r4, ror #30
   165a8:	andeq	r6, r1, r4, ror #30
   165ac:	andeq	r6, r1, r4, ror #30
   165b0:	andeq	r6, r1, r4, ror #30
   165b4:	andeq	r6, r1, r4, ror #30
   165b8:	andeq	r6, r1, r4, ror #30
   165bc:	andeq	r6, r1, r4, ror #30
   165c0:	andeq	r6, r1, r4, ror #30
   165c4:	andeq	r6, r1, r4, asr #16
   165c8:	andeq	r6, r1, r4, ror #30
   165cc:	andeq	r6, r1, r4, ror #30
   165d0:	andeq	r6, r1, r4, ror #30
   165d4:	andeq	r6, r1, r4, ror #30
   165d8:	andeq	r6, r1, r4, ror #30
   165dc:	andeq	r6, r1, r4, ror #30
   165e0:	andeq	r6, r1, r0, asr #17
   165e4:	ldrdeq	r6, [r1], -ip
   165e8:	strdeq	r6, [r1], -r8
   165ec:	andeq	r6, r1, ip, lsl #18
   165f0:	andeq	r6, r1, r4, ror #30
   165f4:	andeq	r6, r1, r0, lsr #18
   165f8:	andeq	r6, r1, r8, asr #13
   165fc:	andeq	r6, r1, r4, asr r9
   16600:	andeq	r6, r1, ip, ror #18
   16604:	andeq	r6, r1, r4, ror #30
   16608:	andeq	r6, r1, r4, ror #30
   1660c:	andeq	r6, r1, r4, ror #30
   16610:	andeq	r6, r1, r4, lsl #19
   16614:	muleq	r1, ip, r9
   16618:	andeq	r6, r1, r4, ror #30
   1661c:	andeq	r6, r1, ip, lsl sl
   16620:	andeq	r6, r1, r4, ror #30
   16624:	andeq	r6, r1, r8, asr sl
   16628:	andeq	r6, r1, r8, lsr sl
   1662c:	andeq	r6, r1, r0, asr sl
   16630:	andeq	r6, r1, r8, lsl #22
   16634:	andeq	r6, r1, r8, asr #13
   16638:	andeq	r6, r1, r8, lsr fp
   1663c:	andeq	r6, r1, r8, lsl #23
   16640:	muleq	r1, ip, fp
   16644:	ldrdeq	r6, [r1], -ip
   16648:	andeq	r6, r1, r4, ror #30
   1664c:	andeq	r6, r1, r4, ror #30
   16650:	andeq	r6, r1, r4, ror #30
   16654:	andeq	r6, r1, r4, ror #30
   16658:	andeq	r6, r1, r4, ror #30
   1665c:	andeq	r6, r1, r4, ror #30
   16660:	andeq	r6, r1, r4, ror #24
   16664:	andeq	r6, r1, r8, lsl r8
   16668:	andeq	r6, r1, r0, lsl #25
   1666c:	muleq	r1, r4, ip
   16670:	andeq	r6, r1, ip, lsr #25
   16674:	andeq	r6, r1, r4, ror #30
   16678:	andeq	r6, r1, r8, asr #13
   1667c:	andeq	r6, r1, r8, lsl r8
   16680:	andeq	r6, r1, r4, ror #30
   16684:			; <UNDEFINED> instruction: 0x00016cbc
   16688:	andeq	r6, r1, r8, ror #25
   1668c:	andeq	r6, r1, r0, lsl #26
   16690:	andeq	r6, r1, ip, lsr #26
   16694:	andeq	r6, r1, r8, asr sp
   16698:	andeq	r6, r1, r4, ror #30
   1669c:	andeq	r6, r1, r0, lsr #20
   166a0:	ldrdeq	r6, [r1], -r0
   166a4:	andeq	r7, r1, r4, ror r7
   166a8:	strdeq	r6, [r1], -r4
   166ac:	muleq	r1, r0, lr
   166b0:	andeq	r6, r1, r8, lsl #30
   166b4:	andeq	r6, r1, r4, ror #30
   166b8:	andeq	r6, r1, r0, asr #30
   166bc:	andeq	r6, r1, ip, asr pc
   166c0:	andeq	r7, r1, r0, asr r0
   166c4:	andeq	r6, r1, r0, ror r8
   166c8:	cmp	r9, #69	; 0x45
   166cc:	beq	16f64 <__assert_fail@plt+0x509c>
   166d0:	ldr	r2, [sp, #68]	; 0x44
   166d4:	str	lr, [sp, #88]	; 0x58
   166d8:	movw	ip, #9363	; 0x2493
   166dc:	movw	r7, #382	; 0x17e
   166e0:	movt	ip, #37449	; 0x9249
   166e4:	ldr	lr, [r2, #24]
   166e8:	ldr	r5, [r2, #28]
   166ec:	ldr	r8, [r2, #20]
   166f0:	sub	r2, r5, lr
   166f4:	cmp	r8, #0
   166f8:	add	r2, r2, r7
   166fc:	smmla	r7, r2, ip, r2
   16700:	asr	r4, r7, #2
   16704:	add	r7, r4, r7, lsr #31
   16708:	rsb	r7, r7, r7, lsl #3
   1670c:	sub	r2, r7, r2
   16710:	add	r2, r5, r2
   16714:	add	r4, r2, #3
   16718:	mvn	r2, #99	; 0x63
   1671c:	movwmi	r2, #300	; 0x12c
   16720:	add	r2, r2, r8
   16724:	cmn	r4, #1
   16728:	ble	17064 <__assert_fail@plt+0x519c>
   1672c:	movw	r7, #365	; 0x16d
   16730:	tst	r2, #3
   16734:	bne	16780 <__assert_fail@plt+0x48b8>
   16738:	movw	r7, #34079	; 0x851f
   1673c:	mov	r0, ip
   16740:	mov	ip, #100	; 0x64
   16744:	movt	r7, #20971	; 0x51eb
   16748:	smmul	r7, r2, r7
   1674c:	asr	r3, r7, #5
   16750:	add	r3, r3, r7, lsr #31
   16754:	mls	ip, r3, ip, r2
   16758:	asr	r3, r7, #7
   1675c:	add	r3, r3, r7, lsr #31
   16760:	mov	r7, #400	; 0x190
   16764:	mls	r2, r3, r7, r2
   16768:	movw	r7, #365	; 0x16d
   1676c:	cmp	r2, #0
   16770:	movweq	r7, #366	; 0x16e
   16774:	cmp	ip, #0
   16778:	mov	ip, r0
   1677c:	movwne	r7, #366	; 0x16e
   16780:	add	r2, lr, r7
   16784:	movw	r3, #382	; 0x17e
   16788:	sub	r2, r5, r2
   1678c:	add	r2, r2, r3
   16790:	smmla	r2, r2, ip, r2
   16794:	asr	r3, r2, #2
   16798:	add	r2, r3, r2, lsr #31
   1679c:	movw	r3, #379	; 0x17b
   167a0:	rsb	r2, r2, r2, lsl #3
   167a4:	add	r2, lr, r2
   167a8:	sub	r2, r2, r3
   167ac:	cmn	r2, #1
   167b0:	movgt	r4, r2
   167b4:	mvn	r2, r2
   167b8:	lsr	r3, r2, #31
   167bc:	ldr	r0, [sp, #84]	; 0x54
   167c0:	cmp	r1, #71	; 0x47
   167c4:	beq	170ec <__assert_fail@plt+0x5224>
   167c8:	cmp	r1, #103	; 0x67
   167cc:	bne	17118 <__assert_fail@plt+0x5250>
   167d0:	movw	r2, #34079	; 0x851f
   167d4:	mov	ip, #2
   167d8:	mov	lr, #0
   167dc:	movt	r2, #20971	; 0x51eb
   167e0:	smmul	r7, r8, r2
   167e4:	asr	r5, r7, #5
   167e8:	add	r7, r5, r7, lsr #31
   167ec:	mov	r5, #100	; 0x64
   167f0:	mls	r7, r7, r5, r8
   167f4:	add	r7, r3, r7
   167f8:	smmul	r2, r7, r2
   167fc:	asr	r4, r2, #5
   16800:	add	r2, r4, r2, lsr #31
   16804:	mls	r2, r2, r5, r7
   16808:	cmn	r2, #1
   1680c:	ble	176cc <__assert_fail@plt+0x5804>
   16810:	mov	r3, r2
   16814:	b	17710 <__assert_fail@plt+0x5848>
   16818:	ldr	r2, [sp, #72]	; 0x48
   1681c:	mov	r7, #0
   16820:	cmp	r9, #69	; 0x45
   16824:	orr	lr, r2, lr
   16828:	beq	16f64 <__assert_fail@plt+0x509c>
   1682c:	b	17774 <__assert_fail@plt+0x58ac>
   16830:	sub	r0, sl, #1
   16834:	cmp	r0, r8
   16838:	beq	174fc <__assert_fail@plt+0x5634>
   1683c:	sub	sl, sl, #1
   16840:	b	16f64 <__assert_fail@plt+0x509c>
   16844:	mov	r7, #1
   16848:	ldrb	r2, [sl, r7]
   1684c:	cmp	r2, #58	; 0x3a
   16850:	bne	16864 <__assert_fail@plt+0x499c>
   16854:	add	r7, r7, #1
   16858:	ldrb	r2, [sl, r7]
   1685c:	cmp	r2, #58	; 0x3a
   16860:	beq	16854 <__assert_fail@plt+0x498c>
   16864:	cmp	r2, #122	; 0x7a
   16868:	bne	16f64 <__assert_fail@plt+0x509c>
   1686c:	add	sl, sl, r7
   16870:	ldr	r3, [sp, #68]	; 0x44
   16874:	ldr	r2, [r3, #32]
   16878:	cmp	r2, #0
   1687c:	bmi	17838 <__assert_fail@plt+0x5970>
   16880:	ldr	r2, [r3, #36]	; 0x24
   16884:	str	lr, [sp, #88]	; 0x58
   16888:	cmp	r2, #0
   1688c:	bmi	175c4 <__assert_fail@plt+0x56fc>
   16890:	mov	lr, #0
   16894:	bne	175c8 <__assert_fail@plt+0x5700>
   16898:	ldr	r3, [sp, #44]	; 0x2c
   1689c:	ldrb	r3, [r3]
   168a0:	sub	r3, r3, #45	; 0x2d
   168a4:	clz	r3, r3
   168a8:	lsr	lr, r3, #5
   168ac:	cmp	r7, #3
   168b0:	bls	175d0 <__assert_fail@plt+0x5708>
   168b4:	ldr	ip, [sp, #92]	; 0x5c
   168b8:	ldr	lr, [sp, #88]	; 0x58
   168bc:	b	16f68 <__assert_fail@plt+0x50a0>
   168c0:	cmp	r9, #0
   168c4:	bne	16f64 <__assert_fail@plt+0x509c>
   168c8:	ldr	r1, [sp, #72]	; 0x48
   168cc:	mov	r7, #0
   168d0:	orr	lr, r1, lr
   168d4:	mov	r1, #65	; 0x41
   168d8:	b	17774 <__assert_fail@plt+0x58ac>
   168dc:	cmp	r9, #69	; 0x45
   168e0:	beq	16f64 <__assert_fail@plt+0x509c>
   168e4:	ldr	r1, [sp, #72]	; 0x48
   168e8:	mov	r7, #0
   168ec:	orr	lr, r1, lr
   168f0:	mov	r1, #66	; 0x42
   168f4:	b	17774 <__assert_fail@plt+0x58ac>
   168f8:	cmp	r9, #69	; 0x45
   168fc:	bne	173a0 <__assert_fail@plt+0x54d8>
   16900:	mov	r7, #0
   16904:	mov	r1, #67	; 0x43
   16908:	b	17774 <__assert_fail@plt+0x58ac>
   1690c:	cmp	r9, #0
   16910:	bne	16f64 <__assert_fail@plt+0x509c>
   16914:	movw	r5, #46795	; 0xb6cb
   16918:	movt	r5, #3
   1691c:	b	16a58 <__assert_fail@plt+0x4b90>
   16920:	cmp	r9, #0
   16924:	bne	16f64 <__assert_fail@plt+0x509c>
   16928:	ldr	r0, [sp, #84]	; 0x54
   1692c:	movw	r5, #44356	; 0xad44
   16930:	movt	r5, #3
   16934:	cmp	r0, #0
   16938:	bne	176e8 <__assert_fail@plt+0x5820>
   1693c:	cmp	r6, #0
   16940:	bpl	176e8 <__assert_fail@plt+0x5820>
   16944:	mov	r0, #43	; 0x2b
   16948:	mov	r4, #4
   1694c:	str	r0, [sp, #84]	; 0x54
   16950:	b	16a58 <__assert_fail@plt+0x4b90>
   16954:	cmp	r9, #69	; 0x45
   16958:	beq	16f64 <__assert_fail@plt+0x509c>
   1695c:	ldr	r2, [sp, #36]	; 0x24
   16960:	str	lr, [sp, #88]	; 0x58
   16964:	ldr	r3, [r2]
   16968:	b	17128 <__assert_fail@plt+0x5260>
   1696c:	mov	ip, #2
   16970:	cmp	r9, #69	; 0x45
   16974:	beq	16f64 <__assert_fail@plt+0x509c>
   16978:	ldr	r3, [sp, #32]
   1697c:	str	lr, [sp, #88]	; 0x58
   16980:	b	1712c <__assert_fail@plt+0x5264>
   16984:	cmp	r9, #69	; 0x45
   16988:	beq	16f64 <__assert_fail@plt+0x509c>
   1698c:	ldr	r2, [sp, #68]	; 0x44
   16990:	str	lr, [sp, #88]	; 0x58
   16994:	ldr	r3, [r2, #4]
   16998:	b	17128 <__assert_fail@plt+0x5260>
   1699c:	cmp	r9, #69	; 0x45
   169a0:	beq	16f64 <__assert_fail@plt+0x509c>
   169a4:	ldr	r2, [fp, #20]
   169a8:	cmp	r6, #1
   169ac:	mov	r7, #0
   169b0:	mov	r0, #8
   169b4:	movwlt	r6, #9
   169b8:	add	r1, r7, #9
   169bc:	cmp	r6, r1
   169c0:	blt	169f0 <__assert_fail@plt+0x4b28>
   169c4:	movw	r3, #26215	; 0x6667
   169c8:	cmp	r1, #2
   169cc:	movt	r3, #26214	; 0x6666
   169d0:	blt	173f8 <__assert_fail@plt+0x5530>
   169d4:	smmul	r5, r2, r3
   169d8:	asr	r4, r5, #2
   169dc:	add	r5, r4, r5, lsr #31
   169e0:	add	r5, r5, r5, lsl #2
   169e4:	sub	r5, r2, r5, lsl #1
   169e8:	cmp	r5, #0
   169ec:	bne	173f8 <__assert_fail@plt+0x5530>
   169f0:	movw	r1, #26215	; 0x6667
   169f4:	sub	r0, r0, #1
   169f8:	sub	r7, r7, #1
   169fc:	movt	r1, #26214	; 0x6666
   16a00:	smmul	r1, r2, r1
   16a04:	asr	r2, r1, #2
   16a08:	add	r2, r2, r1, lsr #31
   16a0c:	add	r1, r7, #9
   16a10:	cmp	r6, r1
   16a14:	blt	169f0 <__assert_fail@plt+0x4b28>
   16a18:	b	169c4 <__assert_fail@plt+0x4afc>
   16a1c:	mov	r7, #1
   16a20:	ldr	r1, [sp, #72]	; 0x48
   16a24:	orr	r7, r1, r7
   16a28:	eor	r1, r1, #1
   16a2c:	and	lr, lr, r1
   16a30:	mov	r1, #112	; 0x70
   16a34:	b	17774 <__assert_fail@plt+0x58ac>
   16a38:	cmp	r9, #69	; 0x45
   16a3c:	beq	16f64 <__assert_fail@plt+0x509c>
   16a40:	ldr	r2, [sp, #68]	; 0x44
   16a44:	str	lr, [sp, #88]	; 0x58
   16a48:	ldr	r3, [r2]
   16a4c:	b	17128 <__assert_fail@plt+0x5260>
   16a50:	movw	r5, #46804	; 0xb6d4
   16a54:	movt	r5, #3
   16a58:	ldr	r0, [sp, #84]	; 0x54
   16a5c:	ldr	r2, [sp, #68]	; 0x44
   16a60:	and	r9, lr, #1
   16a64:	mov	r1, r5
   16a68:	mov	r3, r9
   16a6c:	mov	r7, r0
   16a70:	stm	sp, {r0, r4}
   16a74:	ldr	r0, [fp, #16]
   16a78:	str	r0, [sp, #8]
   16a7c:	ldr	r0, [fp, #20]
   16a80:	str	r0, [sp, #12]
   16a84:	mov	r0, #0
   16a88:	bl	161a0 <__assert_fail@plt+0x42d8>
   16a8c:	subs	r1, r7, #45	; 0x2d
   16a90:	ldr	ip, [sp, #92]	; 0x5c
   16a94:	movne	r1, r6
   16a98:	cmp	r6, #0
   16a9c:	mov	r6, r0
   16aa0:	movwmi	r1, #0
   16aa4:	cmp	r1, r0
   16aa8:	movhi	r6, r1
   16aac:	mvn	r2, ip
   16ab0:	cmp	r6, r2
   16ab4:	bcs	17bec <__assert_fail@plt+0x5d24>
   16ab8:	ldr	r2, [sp, #80]	; 0x50
   16abc:	cmp	r2, #0
   16ac0:	beq	176b0 <__assert_fail@plt+0x57e8>
   16ac4:	ldr	r8, [sp, #80]	; 0x50
   16ac8:	cmp	r1, r0
   16acc:	bls	17680 <__assert_fail@plt+0x57b8>
   16ad0:	sub	r7, r1, r0
   16ad4:	ldr	r0, [sp, #84]	; 0x54
   16ad8:	cmp	r0, #43	; 0x2b
   16adc:	cmpne	r0, #48	; 0x30
   16ae0:	bne	17660 <__assert_fail@plt+0x5798>
   16ae4:	ldr	r8, [sp, #80]	; 0x50
   16ae8:	cmp	r7, #0
   16aec:	beq	17680 <__assert_fail@plt+0x57b8>
   16af0:	mov	r0, #48	; 0x30
   16af4:	mov	r1, r8
   16af8:	bl	11db4 <fputc@plt>
   16afc:	subs	r7, r7, #1
   16b00:	bne	16af0 <__assert_fail@plt+0x4c28>
   16b04:	b	17680 <__assert_fail@plt+0x57b8>
   16b08:	cmp	r9, #69	; 0x45
   16b0c:	beq	16f64 <__assert_fail@plt+0x509c>
   16b10:	ldr	r3, [sp, #68]	; 0x44
   16b14:	str	lr, [sp, #88]	; 0x58
   16b18:	ldr	r2, [r3, #24]
   16b1c:	ldr	r3, [r3, #28]
   16b20:	sub	r2, r3, r2
   16b24:	movw	r3, #9363	; 0x2493
   16b28:	movt	r3, #37449	; 0x9249
   16b2c:	add	r2, r2, #7
   16b30:	smmla	r2, r2, r3, r2
   16b34:	b	16b7c <__assert_fail@plt+0x4cb4>
   16b38:	cmp	r9, #69	; 0x45
   16b3c:	beq	16f64 <__assert_fail@plt+0x509c>
   16b40:	ldr	r3, [sp, #68]	; 0x44
   16b44:	movw	r7, #9363	; 0x2493
   16b48:	str	lr, [sp, #88]	; 0x58
   16b4c:	movt	r7, #37449	; 0x9249
   16b50:	ldr	r2, [r3, #24]
   16b54:	ldr	r3, [r3, #28]
   16b58:	add	r2, r2, #6
   16b5c:	smmla	r5, r2, r7, r2
   16b60:	asr	r4, r5, #2
   16b64:	add	r5, r4, r5, lsr #31
   16b68:	rsb	r5, r5, r5, lsl #3
   16b6c:	sub	r2, r5, r2
   16b70:	add	r2, r3, r2
   16b74:	add	r2, r2, #7
   16b78:	smmla	r2, r2, r7, r2
   16b7c:	asr	r3, r2, #2
   16b80:	add	r3, r3, r2, lsr #31
   16b84:	b	17128 <__assert_fail@plt+0x5260>
   16b88:	cmp	r9, #79	; 0x4f
   16b8c:	beq	16f64 <__assert_fail@plt+0x509c>
   16b90:	mov	r7, #0
   16b94:	mov	r1, #88	; 0x58
   16b98:	b	17774 <__assert_fail@plt+0x58ac>
   16b9c:	cmp	r9, #69	; 0x45
   16ba0:	beq	17654 <__assert_fail@plt+0x578c>
   16ba4:	cmp	r9, #79	; 0x4f
   16ba8:	beq	16f64 <__assert_fail@plt+0x509c>
   16bac:	ldr	r2, [sp, #68]	; 0x44
   16bb0:	movw	r3, #63636	; 0xf894
   16bb4:	str	lr, [sp, #88]	; 0x58
   16bb8:	mov	lr, #0
   16bbc:	mov	ip, #4
   16bc0:	movt	r3, #65535	; 0xffff
   16bc4:	ldr	r2, [r2, #20]
   16bc8:	cmp	r2, r3
   16bcc:	movw	r3, #1900	; 0x76c
   16bd0:	movwlt	lr, #1
   16bd4:	add	r3, r2, r3
   16bd8:	b	17710 <__assert_fail@plt+0x5848>
   16bdc:	ldr	r0, [sp, #84]	; 0x54
   16be0:	str	lr, [sp, #88]	; 0x58
   16be4:	subs	r4, r0, #45	; 0x2d
   16be8:	ldr	r0, [sp, #44]	; 0x2c
   16bec:	bicne	r4, r6, r6, asr #31
   16bf0:	bl	11cac <strlen@plt>
   16bf4:	mov	r5, r0
   16bf8:	cmp	r4, r0
   16bfc:	mov	r8, r0
   16c00:	ldr	r0, [sp, #92]	; 0x5c
   16c04:	movhi	r8, r4
   16c08:	mvn	r0, r0
   16c0c:	cmp	r8, r0
   16c10:	bcs	17bec <__assert_fail@plt+0x5d24>
   16c14:	ldr	r7, [sp, #80]	; 0x50
   16c18:	cmp	r7, #0
   16c1c:	beq	17af8 <__assert_fail@plt+0x5c30>
   16c20:	cmp	r4, r5
   16c24:	bls	17a50 <__assert_fail@plt+0x5b88>
   16c28:	ldr	r0, [sp, #84]	; 0x54
   16c2c:	sub	r4, r4, r5
   16c30:	uxtb	r0, r0
   16c34:	cmp	r0, #43	; 0x2b
   16c38:	cmpne	r0, #48	; 0x30
   16c3c:	bne	17a30 <__assert_fail@plt+0x5b68>
   16c40:	ldr	r6, [sp, #80]	; 0x50
   16c44:	cmp	r4, #0
   16c48:	beq	17a50 <__assert_fail@plt+0x5b88>
   16c4c:	mov	r0, #48	; 0x30
   16c50:	mov	r1, r6
   16c54:	bl	11db4 <fputc@plt>
   16c58:	subs	r4, r4, #1
   16c5c:	bne	16c4c <__assert_fail@plt+0x4d84>
   16c60:	b	17a50 <__assert_fail@plt+0x5b88>
   16c64:	cmp	r9, #0
   16c68:	bne	16f64 <__assert_fail@plt+0x509c>
   16c6c:	ldr	r1, [sp, #72]	; 0x48
   16c70:	mov	r7, #0
   16c74:	orr	lr, r1, lr
   16c78:	mov	r1, #97	; 0x61
   16c7c:	b	17774 <__assert_fail@plt+0x58ac>
   16c80:	cmp	r9, #79	; 0x4f
   16c84:	beq	16f64 <__assert_fail@plt+0x509c>
   16c88:	mov	r7, #0
   16c8c:	mov	r1, #99	; 0x63
   16c90:	b	17774 <__assert_fail@plt+0x58ac>
   16c94:	cmp	r9, #69	; 0x45
   16c98:	beq	16f64 <__assert_fail@plt+0x509c>
   16c9c:	ldr	r2, [sp, #28]
   16ca0:	str	lr, [sp, #88]	; 0x58
   16ca4:	ldr	r3, [r2]
   16ca8:	b	17128 <__assert_fail@plt+0x5260>
   16cac:	ldr	r2, [sp, #28]
   16cb0:	cmp	r9, #69	; 0x45
   16cb4:	bne	16cf4 <__assert_fail@plt+0x4e2c>
   16cb8:	b	16f64 <__assert_fail@plt+0x509c>
   16cbc:	cmp	r9, #69	; 0x45
   16cc0:	beq	16f64 <__assert_fail@plt+0x509c>
   16cc4:	ldr	r2, [sp, #68]	; 0x44
   16cc8:	str	lr, [sp, #88]	; 0x58
   16ccc:	mov	lr, #0
   16cd0:	mov	ip, #3
   16cd4:	ldr	r2, [r2, #28]
   16cd8:	cmn	r2, #1
   16cdc:	add	r3, r2, #1
   16ce0:	movwlt	lr, #1
   16ce4:	b	17130 <__assert_fail@plt+0x5268>
   16ce8:	ldr	r2, [sp, #36]	; 0x24
   16cec:	cmp	r9, #69	; 0x45
   16cf0:	beq	16f64 <__assert_fail@plt+0x509c>
   16cf4:	ldr	r3, [r2]
   16cf8:	ldr	r7, [sp, #84]	; 0x54
   16cfc:	b	16d18 <__assert_fail@plt+0x4e50>
   16d00:	ldr	r3, [sp, #32]
   16d04:	ldr	r7, [sp, #84]	; 0x54
   16d08:	cmp	r9, #69	; 0x45
   16d0c:	bne	16d18 <__assert_fail@plt+0x4e50>
   16d10:	ldr	ip, [sp, #92]	; 0x5c
   16d14:	b	16f6c <__assert_fail@plt+0x50a4>
   16d18:	cmp	r7, #0
   16d1c:	str	lr, [sp, #88]	; 0x58
   16d20:	movweq	r7, #95	; 0x5f
   16d24:	str	r7, [sp, #84]	; 0x54
   16d28:	b	17128 <__assert_fail@plt+0x5260>
   16d2c:	cmp	r9, #69	; 0x45
   16d30:	beq	16f64 <__assert_fail@plt+0x509c>
   16d34:	ldr	r2, [sp, #68]	; 0x44
   16d38:	str	lr, [sp, #88]	; 0x58
   16d3c:	mov	lr, #0
   16d40:	mov	ip, #2
   16d44:	ldr	r2, [r2, #16]
   16d48:	cmn	r2, #1
   16d4c:	add	r3, r2, #1
   16d50:	movwlt	lr, #1
   16d54:	b	17130 <__assert_fail@plt+0x5268>
   16d58:	ldr	r0, [sp, #84]	; 0x54
   16d5c:	ldr	ip, [sp, #92]	; 0x5c
   16d60:	subs	r0, r0, #45	; 0x2d
   16d64:	mvn	r1, ip
   16d68:	bicne	r0, r6, r6, asr #31
   16d6c:	cmp	r0, #1
   16d70:	mov	r4, r0
   16d74:	movls	r4, #1
   16d78:	cmp	r4, r1
   16d7c:	bcs	17bec <__assert_fail@plt+0x5d24>
   16d80:	ldr	r1, [sp, #80]	; 0x50
   16d84:	cmp	r1, #0
   16d88:	beq	17bac <__assert_fail@plt+0x5ce4>
   16d8c:	ldr	r6, [sp, #80]	; 0x50
   16d90:	mov	r7, ip
   16d94:	cmp	r0, #2
   16d98:	bcc	17b2c <__assert_fail@plt+0x5c64>
   16d9c:	ldr	r1, [sp, #84]	; 0x54
   16da0:	sub	r5, r0, #1
   16da4:	uxtb	r1, r1
   16da8:	cmp	r1, #43	; 0x2b
   16dac:	cmpne	r1, #48	; 0x30
   16db0:	bne	17b14 <__assert_fail@plt+0x5c4c>
   16db4:	ldr	r6, [sp, #80]	; 0x50
   16db8:	mov	r0, #48	; 0x30
   16dbc:	mov	r1, r6
   16dc0:	bl	11db4 <fputc@plt>
   16dc4:	subs	r5, r5, #1
   16dc8:	bne	16db8 <__assert_fail@plt+0x4ef0>
   16dcc:	b	17b2c <__assert_fail@plt+0x5c64>
   16dd0:	ldr	r2, [sp, #68]	; 0x44
   16dd4:	mov	r3, #11
   16dd8:	mov	ip, #1
   16ddc:	str	lr, [sp, #88]	; 0x58
   16de0:	mov	lr, #0
   16de4:	ldr	r2, [r2, #16]
   16de8:	mul	r2, r2, r3
   16dec:	add	r3, ip, r2, asr #5
   16df0:	b	17130 <__assert_fail@plt+0x5268>
   16df4:	ldr	r2, [sp, #68]	; 0x44
   16df8:	mov	r0, #28
   16dfc:	add	r1, sp, #96	; 0x60
   16e00:	str	lr, [sp, #88]	; 0x58
   16e04:	mov	r4, r1
   16e08:	mov	r3, r2
   16e0c:	add	r2, r2, #16
   16e10:	vld1.32	{d16-d17}, [r3], r0
   16e14:	vld1.32	{d18-d19}, [r2]
   16e18:	add	r2, r1, #16
   16e1c:	vld1.32	{d20-d21}, [r3]
   16e20:	vst1.64	{d16-d17}, [r4], r0
   16e24:	mvn	r0, #0
   16e28:	vst1.64	{d18-d19}, [r2]
   16e2c:	vst1.32	{d20-d21}, [r4]
   16e30:	str	r0, [r4]
   16e34:	ldr	r0, [fp, #16]
   16e38:	bl	34d40 <__assert_fail@plt+0x22e78>
   16e3c:	ldr	r1, [r4]
   16e40:	cmp	r1, #0
   16e44:	bmi	17c08 <__assert_fail@plt+0x5d40>
   16e48:	movw	r1, #26215	; 0x6667
   16e4c:	cmp	r0, #0
   16e50:	movt	r1, #26214	; 0x6666
   16e54:	bmi	17574 <__assert_fail@plt+0x56ac>
   16e58:	ldr	r2, [sp, #20]
   16e5c:	mov	r3, r0
   16e60:	smmul	r7, r3, r1
   16e64:	asr	r5, r7, #2
   16e68:	add	r7, r5, r7, lsr #31
   16e6c:	add	r5, r7, r7, lsl #2
   16e70:	sub	r5, r3, r5, lsl #1
   16e74:	add	r3, r3, #9
   16e78:	cmp	r3, #18
   16e7c:	mov	r3, r7
   16e80:	add	r5, r5, #48	; 0x30
   16e84:	strb	r5, [r2], #-1
   16e88:	bhi	16e60 <__assert_fail@plt+0x4f98>
   16e8c:	b	175a8 <__assert_fail@plt+0x56e0>
   16e90:	ldr	r0, [sp, #84]	; 0x54
   16e94:	ldr	ip, [sp, #92]	; 0x5c
   16e98:	subs	r0, r0, #45	; 0x2d
   16e9c:	mvn	r1, ip
   16ea0:	bicne	r0, r6, r6, asr #31
   16ea4:	cmp	r0, #1
   16ea8:	mov	r4, r0
   16eac:	movls	r4, #1
   16eb0:	cmp	r4, r1
   16eb4:	bcs	17bec <__assert_fail@plt+0x5d24>
   16eb8:	ldr	r1, [sp, #80]	; 0x50
   16ebc:	cmp	r1, #0
   16ec0:	beq	17bac <__assert_fail@plt+0x5ce4>
   16ec4:	ldr	r6, [sp, #80]	; 0x50
   16ec8:	mov	r7, ip
   16ecc:	cmp	r0, #2
   16ed0:	bcc	17b4c <__assert_fail@plt+0x5c84>
   16ed4:	ldr	r1, [sp, #84]	; 0x54
   16ed8:	sub	r5, r0, #1
   16edc:	uxtb	r1, r1
   16ee0:	cmp	r1, #43	; 0x2b
   16ee4:	cmpne	r1, #48	; 0x30
   16ee8:	bne	17b34 <__assert_fail@plt+0x5c6c>
   16eec:	ldr	r6, [sp, #80]	; 0x50
   16ef0:	mov	r0, #48	; 0x30
   16ef4:	mov	r1, r6
   16ef8:	bl	11db4 <fputc@plt>
   16efc:	subs	r5, r5, #1
   16f00:	bne	16ef0 <__assert_fail@plt+0x5028>
   16f04:	b	17b4c <__assert_fail@plt+0x5c84>
   16f08:	ldr	r2, [sp, #68]	; 0x44
   16f0c:	movw	r3, #9363	; 0x2493
   16f10:	str	lr, [sp, #88]	; 0x58
   16f14:	mov	ip, #1
   16f18:	movt	r3, #37449	; 0x9249
   16f1c:	ldr	r2, [r2, #24]
   16f20:	add	r2, r2, #6
   16f24:	smmla	r3, r2, r3, r2
   16f28:	asr	r7, r3, #2
   16f2c:	add	r3, r7, r3, lsr #31
   16f30:	rsb	r3, r3, r3, lsl #3
   16f34:	sub	r2, r2, r3
   16f38:	add	r3, r2, #1
   16f3c:	b	1712c <__assert_fail@plt+0x5264>
   16f40:	cmp	r9, #69	; 0x45
   16f44:	beq	16f64 <__assert_fail@plt+0x509c>
   16f48:	ldr	r2, [sp, #68]	; 0x44
   16f4c:	str	lr, [sp, #88]	; 0x58
   16f50:	mov	ip, #1
   16f54:	ldr	r3, [r2, #24]
   16f58:	b	1712c <__assert_fail@plt+0x5264>
   16f5c:	cmp	r9, #79	; 0x4f
   16f60:	bne	174b0 <__assert_fail@plt+0x55e8>
   16f64:	ldr	ip, [sp, #92]	; 0x5c
   16f68:	ldr	r7, [sp, #84]	; 0x54
   16f6c:	subs	r0, r7, #45	; 0x2d
   16f70:	sub	r1, sl, r8
   16f74:	bicne	r0, r6, r6, asr #31
   16f78:	add	r5, r1, #1
   16f7c:	mvn	r1, ip
   16f80:	mov	r4, r5
   16f84:	cmp	r0, r5
   16f88:	movhi	r4, r0
   16f8c:	cmp	r4, r1
   16f90:	bcs	17bec <__assert_fail@plt+0x5d24>
   16f94:	mov	r1, r7
   16f98:	ldr	r7, [sp, #80]	; 0x50
   16f9c:	cmp	r7, #0
   16fa0:	beq	1629c <__assert_fail@plt+0x43d4>
   16fa4:	cmp	r0, r5
   16fa8:	str	lr, [sp, #88]	; 0x58
   16fac:	bls	17008 <__assert_fail@plt+0x5140>
   16fb0:	sub	r6, r0, r5
   16fb4:	uxtb	r0, r1
   16fb8:	cmp	r0, #43	; 0x2b
   16fbc:	cmpne	r0, #48	; 0x30
   16fc0:	bne	16fe8 <__assert_fail@plt+0x5120>
   16fc4:	ldr	r7, [sp, #80]	; 0x50
   16fc8:	cmp	r6, #0
   16fcc:	beq	17008 <__assert_fail@plt+0x5140>
   16fd0:	mov	r0, #48	; 0x30
   16fd4:	mov	r1, r7
   16fd8:	bl	11db4 <fputc@plt>
   16fdc:	subs	r6, r6, #1
   16fe0:	bne	16fd0 <__assert_fail@plt+0x5108>
   16fe4:	b	17008 <__assert_fail@plt+0x5140>
   16fe8:	ldr	r7, [sp, #80]	; 0x50
   16fec:	cmp	r6, #0
   16ff0:	beq	17008 <__assert_fail@plt+0x5140>
   16ff4:	mov	r0, #32
   16ff8:	mov	r1, r7
   16ffc:	bl	11db4 <fputc@plt>
   17000:	subs	r6, r6, #1
   17004:	bne	16ff4 <__assert_fail@plt+0x512c>
   17008:	ldr	r0, [sp, #88]	; 0x58
   1700c:	tst	r0, #1
   17010:	beq	16284 <__assert_fail@plt+0x43bc>
   17014:	ldr	r7, [sp, #80]	; 0x50
   17018:	cmp	r5, #0
   1701c:	beq	1629c <__assert_fail@plt+0x43d4>
   17020:	mvn	r0, sl
   17024:	add	r6, r0, r8
   17028:	bl	11c4c <__ctype_toupper_loc@plt>
   1702c:	mov	r5, r0
   17030:	ldrb	r0, [r8], #1
   17034:	ldr	r1, [r5]
   17038:	ldr	r0, [r1, r0, lsl #2]
   1703c:	mov	r1, r7
   17040:	bl	11db4 <fputc@plt>
   17044:	adds	r6, r6, #1
   17048:	bcc	17030 <__assert_fail@plt+0x5168>
   1704c:	b	1629c <__assert_fail@plt+0x43d4>
   17050:	cmp	r9, #69	; 0x45
   17054:	bne	174bc <__assert_fail@plt+0x55f4>
   17058:	mov	r7, #0
   1705c:	mov	r1, #121	; 0x79
   17060:	b	17774 <__assert_fail@plt+0x58ac>
   17064:	sub	r2, r2, #1
   17068:	movw	r4, #365	; 0x16d
   1706c:	tst	r2, #3
   17070:	bne	170b4 <__assert_fail@plt+0x51ec>
   17074:	movw	r7, #34079	; 0x851f
   17078:	movt	r7, #20971	; 0x51eb
   1707c:	smmul	r7, r2, r7
   17080:	asr	r4, r7, #5
   17084:	add	r3, r4, r7, lsr #31
   17088:	mov	r4, #100	; 0x64
   1708c:	mls	r3, r3, r4, r2
   17090:	asr	r4, r7, #7
   17094:	add	r4, r4, r7, lsr #31
   17098:	mov	r7, #400	; 0x190
   1709c:	mls	r2, r4, r7, r2
   170a0:	movw	r4, #365	; 0x16d
   170a4:	cmp	r2, #0
   170a8:	movweq	r4, #366	; 0x16e
   170ac:	cmp	r3, #0
   170b0:	movwne	r4, #366	; 0x16e
   170b4:	movw	r7, #382	; 0x17e
   170b8:	add	r2, r4, r5
   170bc:	sub	r3, r7, lr
   170c0:	add	r2, r3, r2
   170c4:	smmla	r2, r2, ip, r2
   170c8:	asr	r7, r2, #2
   170cc:	add	r2, r7, r2, lsr #31
   170d0:	rsb	r2, r2, r2, lsl #3
   170d4:	sub	r2, r2, r3
   170d8:	mvn	r3, #0
   170dc:	add	r4, r2, #3
   170e0:	ldr	r0, [sp, #84]	; 0x54
   170e4:	cmp	r1, #71	; 0x47
   170e8:	bne	167c8 <__assert_fail@plt+0x4900>
   170ec:	movw	r2, #63636	; 0xf894
   170f0:	mov	lr, #0
   170f4:	mov	ip, #4
   170f8:	movt	r2, #65535	; 0xffff
   170fc:	sub	r2, r2, r3
   17100:	cmp	r8, r2
   17104:	add	r2, r8, r3
   17108:	movw	r3, #1900	; 0x76c
   1710c:	movwlt	lr, #1
   17110:	add	r3, r2, r3
   17114:	b	17714 <__assert_fail@plt+0x584c>
   17118:	smmla	r2, r4, ip, r4
   1711c:	asr	r3, r2, #2
   17120:	add	r2, r3, r2, lsr #31
   17124:	add	r3, r2, #1
   17128:	mov	ip, #2
   1712c:	lsr	lr, r3, #31
   17130:	cmp	lr, #0
   17134:	mov	r2, #0
   17138:	mov	r0, #0
   1713c:	movwne	lr, #1
   17140:	cmp	r9, #79	; 0x4f
   17144:	moveq	r7, #0
   17148:	cmpeq	lr, #0
   1714c:	beq	17770 <__assert_fail@plt+0x58a8>
   17150:	ldr	r5, [sp, #60]	; 0x3c
   17154:	ldr	r7, [sp, #84]	; 0x54
   17158:	cmp	lr, #0
   1715c:	rsbne	r3, r3, #0
   17160:	tst	r2, #1
   17164:	asr	r2, r2, #1
   17168:	movne	r1, #58	; 0x3a
   1716c:	strbne	r1, [r5, #-1]!
   17170:	movw	r1, #52429	; 0xcccd
   17174:	cmp	r3, #9
   17178:	movt	r1, #52428	; 0xcccc
   1717c:	umull	r4, r1, r3, r1
   17180:	lsr	r4, r1, #3
   17184:	add	r1, r4, r4, lsl #2
   17188:	sub	r1, r3, r1, lsl #1
   1718c:	mov	r3, r4
   17190:	orr	r1, r1, #48	; 0x30
   17194:	strb	r1, [r5, #-1]!
   17198:	bhi	17160 <__assert_fail@plt+0x5298>
   1719c:	cmp	r2, #0
   171a0:	mov	r3, r4
   171a4:	bne	17160 <__assert_fail@plt+0x5298>
   171a8:	cmp	r6, #0
   171ac:	movmi	r6, ip
   171b0:	cmp	r0, #0
   171b4:	movwne	r0, #43	; 0x2b
   171b8:	cmp	r7, #0
   171bc:	movweq	r7, #48	; 0x30
   171c0:	ldr	r1, [sp, #60]	; 0x3c
   171c4:	cmp	lr, #0
   171c8:	mov	r2, r6
   171cc:	movwne	r0, #45	; 0x2d
   171d0:	cmp	r0, #0
   171d4:	subne	r2, r2, #1
   171d8:	sub	r8, r1, r5
   171dc:	sub	r1, r2, r8
   171e0:	mov	r2, r7
   171e4:	cmp	r1, #1
   171e8:	movwlt	r1, #0
   171ec:	subs	r7, r7, #45	; 0x2d
   171f0:	movne	r7, r1
   171f4:	cmp	r0, #0
   171f8:	beq	17274 <__assert_fail@plt+0x53ac>
   171fc:	mov	r9, r2
   17200:	cmp	r2, #95	; 0x5f
   17204:	bne	172f0 <__assert_fail@plt+0x5428>
   17208:	str	r8, [sp, #72]	; 0x48
   1720c:	ldr	r8, [sp, #80]	; 0x50
   17210:	str	r0, [sp, #84]	; 0x54
   17214:	cmp	r8, #0
   17218:	cmpne	r7, #0
   1721c:	beq	17238 <__assert_fail@plt+0x5370>
   17220:	mov	r4, r7
   17224:	mov	r0, #32
   17228:	mov	r1, r8
   1722c:	bl	11db4 <fputc@plt>
   17230:	subs	r4, r4, #1
   17234:	bne	17224 <__assert_fail@plt+0x535c>
   17238:	ldr	r0, [sp, #92]	; 0x5c
   1723c:	sub	r6, r6, r7
   17240:	ldr	r8, [sp, #72]	; 0x48
   17244:	add	r0, r7, r0
   17248:	mov	r7, r0
   1724c:	ldr	r0, [sp, #84]	; 0x54
   17250:	cmn	r7, #3
   17254:	bhi	17bec <__assert_fail@plt+0x5d24>
   17258:	ldr	r1, [sp, #80]	; 0x50
   1725c:	cmp	r1, #0
   17260:	beq	17268 <__assert_fail@plt+0x53a0>
   17264:	bl	11db4 <fputc@plt>
   17268:	sub	r6, r6, #1
   1726c:	add	r7, r7, #1
   17270:	b	1727c <__assert_fail@plt+0x53b4>
   17274:	ldr	r7, [sp, #92]	; 0x5c
   17278:	mov	r9, r2
   1727c:	subs	r0, r9, #45	; 0x2d
   17280:	mov	r4, r8
   17284:	mvn	r1, r7
   17288:	bicne	r0, r6, r6, asr #31
   1728c:	cmp	r0, r8
   17290:	movhi	r4, r0
   17294:	cmp	r4, r1
   17298:	bcs	17bec <__assert_fail@plt+0x5d24>
   1729c:	mov	r1, r8
   172a0:	ldr	r8, [sp, #80]	; 0x50
   172a4:	str	r7, [sp, #92]	; 0x5c
   172a8:	cmp	r8, #0
   172ac:	beq	17380 <__assert_fail@plt+0x54b8>
   172b0:	mov	r8, r1
   172b4:	cmp	r0, r1
   172b8:	bls	17320 <__assert_fail@plt+0x5458>
   172bc:	cmp	r9, #43	; 0x2b
   172c0:	sub	r6, r0, r8
   172c4:	cmpne	r9, #48	; 0x30
   172c8:	bne	17300 <__assert_fail@plt+0x5438>
   172cc:	ldr	r7, [sp, #80]	; 0x50
   172d0:	cmp	r6, #0
   172d4:	beq	17320 <__assert_fail@plt+0x5458>
   172d8:	mov	r0, #48	; 0x30
   172dc:	mov	r1, r7
   172e0:	bl	11db4 <fputc@plt>
   172e4:	subs	r6, r6, #1
   172e8:	bne	172d8 <__assert_fail@plt+0x5410>
   172ec:	b	17320 <__assert_fail@plt+0x5458>
   172f0:	ldr	r7, [sp, #92]	; 0x5c
   172f4:	cmn	r7, #3
   172f8:	bls	17258 <__assert_fail@plt+0x5390>
   172fc:	b	17bec <__assert_fail@plt+0x5d24>
   17300:	ldr	r7, [sp, #80]	; 0x50
   17304:	cmp	r6, #0
   17308:	beq	17320 <__assert_fail@plt+0x5458>
   1730c:	mov	r0, #32
   17310:	mov	r1, r7
   17314:	bl	11db4 <fputc@plt>
   17318:	subs	r6, r6, #1
   1731c:	bne	1730c <__assert_fail@plt+0x5444>
   17320:	ldr	r0, [sp, #88]	; 0x58
   17324:	tst	r0, #1
   17328:	beq	17368 <__assert_fail@plt+0x54a0>
   1732c:	cmp	r8, #0
   17330:	ldr	r8, [sp, #80]	; 0x50
   17334:	beq	17380 <__assert_fail@plt+0x54b8>
   17338:	ldr	r0, [sp, #24]
   1733c:	add	r7, r0, r5
   17340:	bl	11c4c <__ctype_toupper_loc@plt>
   17344:	mov	r6, r0
   17348:	ldrb	r0, [r5], #1
   1734c:	ldr	r1, [r6]
   17350:	ldr	r0, [r1, r0, lsl #2]
   17354:	mov	r1, r8
   17358:	bl	11db4 <fputc@plt>
   1735c:	adds	r7, r7, #1
   17360:	bcc	17348 <__assert_fail@plt+0x5480>
   17364:	b	17380 <__assert_fail@plt+0x54b8>
   17368:	mov	r1, r8
   1736c:	ldr	r8, [sp, #80]	; 0x50
   17370:	mov	r0, r5
   17374:	mov	r2, #1
   17378:	mov	r3, r8
   1737c:	bl	11b80 <fwrite@plt>
   17380:	ldr	ip, [sp, #92]	; 0x5c
   17384:	mov	r7, r8
   17388:	add	ip, r4, ip
   1738c:	ldrb	r3, [sl, #1]!
   17390:	mvn	r6, #0
   17394:	cmp	r3, #0
   17398:	bne	162b4 <__assert_fail@plt+0x43ec>
   1739c:	b	17bd4 <__assert_fail@plt+0x5d0c>
   173a0:	ldr	r2, [sp, #68]	; 0x44
   173a4:	movw	r7, #63636	; 0xf894
   173a8:	mov	r3, #0
   173ac:	mvn	r5, #98	; 0x62
   173b0:	str	lr, [sp, #88]	; 0x58
   173b4:	mov	lr, #0
   173b8:	mov	ip, #2
   173bc:	movt	r7, #65535	; 0xffff
   173c0:	ldr	r2, [r2, #20]
   173c4:	cmp	r2, r7
   173c8:	movwge	r3, #1
   173cc:	cmp	r2, r7
   173d0:	and	r3, r3, r2, lsr #31
   173d4:	movwlt	lr, #1
   173d8:	smlabb	r3, r3, r5, r2
   173dc:	movw	r5, #34079	; 0x851f
   173e0:	movt	r5, #20971	; 0x51eb
   173e4:	smmul	r3, r3, r5
   173e8:	asr	r5, r3, #5
   173ec:	add	r3, r5, r3, lsr #31
   173f0:	add	r3, r3, #19
   173f4:	b	17710 <__assert_fail@plt+0x5848>
   173f8:	cmp	r1, #1
   173fc:	sub	ip, fp, #46	; 0x2e
   17400:	blt	17434 <__assert_fail@plt+0x556c>
   17404:	smmul	r5, r2, r3
   17408:	cmp	r0, #0
   1740c:	asr	r4, r5, #2
   17410:	add	r5, r4, r5, lsr #31
   17414:	add	r4, r5, r5, lsl #2
   17418:	sub	r2, r2, r4, lsl #1
   1741c:	add	r2, r2, #48	; 0x30
   17420:	strb	r2, [ip, r0]
   17424:	sub	r2, r0, #1
   17428:	mov	r0, r2
   1742c:	mov	r2, r5
   17430:	bgt	17404 <__assert_fail@plt+0x553c>
   17434:	ldr	r0, [sp, #84]	; 0x54
   17438:	cmp	r0, #0
   1743c:	movweq	r0, #48	; 0x30
   17440:	str	r0, [sp, #84]	; 0x54
   17444:	ldr	r0, [sp, #92]	; 0x5c
   17448:	mvn	r0, r0
   1744c:	cmp	r1, r0
   17450:	bcs	17bec <__assert_fail@plt+0x5d24>
   17454:	ldr	r0, [sp, #80]	; 0x50
   17458:	cmp	r0, #0
   1745c:	beq	17978 <__assert_fail@plt+0x5ab0>
   17460:	tst	lr, #1
   17464:	beq	17968 <__assert_fail@plt+0x5aa0>
   17468:	ldr	r8, [sp, #80]	; 0x50
   1746c:	cmn	r7, #9
   17470:	sub	r9, fp, #46	; 0x2e
   17474:	beq	17978 <__assert_fail@plt+0x5ab0>
   17478:	mov	r4, #0
   1747c:	bl	11c4c <__ctype_toupper_loc@plt>
   17480:	mov	r1, r8
   17484:	mov	r5, r0
   17488:	ldrb	r0, [r9, -r4]
   1748c:	ldr	r2, [r5]
   17490:	ldr	r0, [r2, r0, lsl #2]
   17494:	bl	11db4 <fputc@plt>
   17498:	sub	r4, r4, #1
   1749c:	mov	r1, r8
   174a0:	add	r0, r7, r4
   174a4:	cmn	r0, #9
   174a8:	bne	17488 <__assert_fail@plt+0x55c0>
   174ac:	b	17978 <__assert_fail@plt+0x5ab0>
   174b0:	mov	r7, #0
   174b4:	mov	r1, #120	; 0x78
   174b8:	b	17774 <__assert_fail@plt+0x58ac>
   174bc:	ldr	r2, [sp, #68]	; 0x44
   174c0:	movw	r3, #34079	; 0x851f
   174c4:	str	lr, [sp, #88]	; 0x58
   174c8:	mov	ip, #2
   174cc:	mov	lr, #0
   174d0:	movt	r3, #20971	; 0x51eb
   174d4:	ldr	r2, [r2, #20]
   174d8:	smmul	r3, r2, r3
   174dc:	asr	r7, r3, #5
   174e0:	add	r3, r7, r3, lsr #31
   174e4:	mov	r7, #100	; 0x64
   174e8:	mls	r4, r3, r7, r2
   174ec:	cmn	r4, #1
   174f0:	ble	176fc <__assert_fail@plt+0x5834>
   174f4:	mov	r3, r4
   174f8:	b	17710 <__assert_fail@plt+0x5848>
   174fc:	ldr	r0, [sp, #84]	; 0x54
   17500:	ldr	ip, [sp, #92]	; 0x5c
   17504:	subs	r0, r0, #45	; 0x2d
   17508:	mvn	r1, ip
   1750c:	bicne	r0, r6, r6, asr #31
   17510:	cmp	r0, #1
   17514:	mov	r4, r0
   17518:	movls	r4, #1
   1751c:	cmp	r4, r1
   17520:	bcs	17bec <__assert_fail@plt+0x5d24>
   17524:	ldr	r1, [sp, #80]	; 0x50
   17528:	cmp	r1, #0
   1752c:	beq	17bac <__assert_fail@plt+0x5ce4>
   17530:	ldr	r6, [sp, #80]	; 0x50
   17534:	mov	r7, ip
   17538:	cmp	r0, #2
   1753c:	bcc	17b9c <__assert_fail@plt+0x5cd4>
   17540:	ldr	r1, [sp, #84]	; 0x54
   17544:	sub	r5, r0, #1
   17548:	uxtb	r1, r1
   1754c:	cmp	r1, #43	; 0x2b
   17550:	cmpne	r1, #48	; 0x30
   17554:	bne	17b84 <__assert_fail@plt+0x5cbc>
   17558:	ldr	r6, [sp, #80]	; 0x50
   1755c:	mov	r0, #48	; 0x30
   17560:	mov	r1, r6
   17564:	bl	11db4 <fputc@plt>
   17568:	subs	r5, r5, #1
   1756c:	bne	1755c <__assert_fail@plt+0x5694>
   17570:	b	17b9c <__assert_fail@plt+0x5cd4>
   17574:	ldr	r2, [sp, #20]
   17578:	mov	r3, r0
   1757c:	smmul	r7, r3, r1
   17580:	asr	r5, r7, #2
   17584:	add	r7, r5, r7, lsr #31
   17588:	add	r5, r7, r7, lsl #2
   1758c:	rsb	r5, r3, r5, lsl #1
   17590:	add	r3, r3, #9
   17594:	cmp	r3, #18
   17598:	mov	r3, r7
   1759c:	add	r5, r5, #48	; 0x30
   175a0:	strb	r5, [r2], #-1
   175a4:	bhi	1757c <__assert_fail@plt+0x56b4>
   175a8:	ldr	r7, [sp, #84]	; 0x54
   175ac:	cmp	r6, #0
   175b0:	lsr	lr, r0, #31
   175b4:	add	r5, r2, #1
   175b8:	mov	r0, #0
   175bc:	movwmi	r6, #1
   175c0:	b	171b8 <__assert_fail@plt+0x52f0>
   175c4:	mov	lr, #1
   175c8:	cmp	r7, #3
   175cc:	bhi	168b4 <__assert_fail@plt+0x49ec>
   175d0:	movw	r3, #34953	; 0x8889
   175d4:	movt	r3, #34952	; 0x8888
   175d8:	smmla	r5, r2, r3, r2
   175dc:	asr	r4, r5, #5
   175e0:	add	r4, r4, r5, lsr #31
   175e4:	smmla	r3, r4, r3, r4
   175e8:	asr	r5, r3, #5
   175ec:	add	r3, r5, r3, lsr #31
   175f0:	rsb	r3, r3, r3, lsl #4
   175f4:	sub	ip, r4, r3, lsl #2
   175f8:	movw	r3, #46021	; 0xb3c5
   175fc:	rsb	r4, r4, r4, lsl #4
   17600:	movt	r3, #37282	; 0x91a2
   17604:	smmla	r3, r2, r3, r2
   17608:	sub	r2, r2, r4, lsl #2
   1760c:	add	r4, pc, #8
   17610:	asr	r5, r3, #11
   17614:	add	r3, r5, r3, lsr #31
   17618:	ldr	pc, [r4, r7, lsl #2]
   1761c:	andeq	r7, r1, ip, lsr #12
   17620:	andeq	r7, r1, ip, asr fp
   17624:	andeq	r7, r1, r8, lsr r9
   17628:	andeq	r7, r1, r0, lsr r9
   1762c:	mov	r2, #100	; 0x64
   17630:	mla	r3, r3, r2, ip
   17634:	mov	ip, #5
   17638:	mov	r0, #1
   1763c:	mov	r2, #0
   17640:	cmp	r9, #79	; 0x4f
   17644:	moveq	r7, #0
   17648:	cmpeq	lr, #0
   1764c:	bne	17150 <__assert_fail@plt+0x5288>
   17650:	b	17770 <__assert_fail@plt+0x58a8>
   17654:	mov	r7, #0
   17658:	mov	r1, #89	; 0x59
   1765c:	b	17774 <__assert_fail@plt+0x58ac>
   17660:	ldr	r8, [sp, #80]	; 0x50
   17664:	cmp	r7, #0
   17668:	beq	17680 <__assert_fail@plt+0x57b8>
   1766c:	mov	r0, #32
   17670:	mov	r1, r8
   17674:	bl	11db4 <fputc@plt>
   17678:	subs	r7, r7, #1
   1767c:	bne	1766c <__assert_fail@plt+0x57a4>
   17680:	ldr	r0, [sp, #84]	; 0x54
   17684:	ldr	r2, [sp, #68]	; 0x44
   17688:	mov	r1, r5
   1768c:	mov	r3, r9
   17690:	stm	sp, {r0, r4}
   17694:	ldr	r0, [fp, #16]
   17698:	str	r0, [sp, #8]
   1769c:	ldr	r0, [fp, #20]
   176a0:	str	r0, [sp, #12]
   176a4:	mov	r0, r8
   176a8:	bl	161a0 <__assert_fail@plt+0x42d8>
   176ac:	ldr	ip, [sp, #92]	; 0x5c
   176b0:	ldr	r7, [sp, #80]	; 0x50
   176b4:	add	ip, r6, ip
   176b8:	ldrb	r3, [sl, #1]!
   176bc:	mvn	r6, #0
   176c0:	cmp	r3, #0
   176c4:	bne	162b4 <__assert_fail@plt+0x43ec>
   176c8:	b	17bd4 <__assert_fail@plt+0x5d0c>
   176cc:	movw	r4, #63636	; 0xf894
   176d0:	movt	r4, #65535	; 0xffff
   176d4:	sub	r4, r4, r3
   176d8:	add	r3, r2, #100	; 0x64
   176dc:	cmp	r8, r4
   176e0:	rsblt	r3, r2, #0
   176e4:	b	17710 <__assert_fail@plt+0x5848>
   176e8:	cmp	r6, #6
   176ec:	mov	r0, r6
   176f0:	movle	r0, #6
   176f4:	sub	r4, r0, #6
   176f8:	b	16a58 <__assert_fail@plt+0x4b90>
   176fc:	movw	r5, #63636	; 0xf894
   17700:	add	r3, r4, #100	; 0x64
   17704:	movt	r5, #65535	; 0xffff
   17708:	cmp	r2, r5
   1770c:	rsblt	r3, r4, #0
   17710:	ldr	r0, [sp, #84]	; 0x54
   17714:	ldr	r2, [fp, #8]
   17718:	cmp	r0, #0
   1771c:	moveq	r0, r2
   17720:	mov	r2, #0
   17724:	mov	r4, r0
   17728:	str	r0, [sp, #84]	; 0x54
   1772c:	cmp	r0, #43	; 0x2b
   17730:	mov	r0, #0
   17734:	bne	17140 <__assert_fail@plt+0x5278>
   17738:	cmp	ip, r6
   1773c:	mov	r5, #0
   17740:	movw	r7, #9999	; 0x270f
   17744:	mov	r4, #0
   17748:	movwlt	r5, #1
   1774c:	cmp	ip, #2
   17750:	movweq	r7, #99	; 0x63
   17754:	cmp	r7, r3
   17758:	movwcc	r4, #1
   1775c:	orr	r0, r5, r4
   17760:	cmp	r9, #79	; 0x4f
   17764:	moveq	r7, #0
   17768:	cmpeq	lr, #0
   1776c:	bne	17150 <__assert_fail@plt+0x5288>
   17770:	ldr	lr, [sp, #88]	; 0x58
   17774:	movw	r2, #9504	; 0x2520
   17778:	cmp	r9, #0
   1777c:	ldr	r3, [sp, #68]	; 0x44
   17780:	mov	r0, #0
   17784:	str	lr, [sp, #88]	; 0x58
   17788:	strh	r2, [fp, #-51]	; 0xffffffcd
   1778c:	ldr	r2, [sp, #64]	; 0x40
   17790:	ldrne	r2, [sp, #48]	; 0x30
   17794:	strbne	r9, [fp, #-49]	; 0xffffffcf
   17798:	strb	r0, [r2, #1]
   1779c:	strb	r1, [r2]
   177a0:	add	r0, sp, #96	; 0x60
   177a4:	sub	r2, fp, #51	; 0x33
   177a8:	mov	r1, #1024	; 0x400
   177ac:	bl	11c28 <strftime@plt>
   177b0:	cmp	r0, #0
   177b4:	beq	17838 <__assert_fail@plt+0x5970>
   177b8:	ldr	r1, [sp, #84]	; 0x54
   177bc:	sub	r5, r0, #1
   177c0:	ldr	r0, [sp, #92]	; 0x5c
   177c4:	mov	r8, r5
   177c8:	subs	r1, r1, #45	; 0x2d
   177cc:	mvn	r0, r0
   177d0:	movne	r1, r6
   177d4:	cmp	r6, #0
   177d8:	movwmi	r1, #0
   177dc:	cmp	r1, r5
   177e0:	movhi	r8, r1
   177e4:	cmp	r8, r0
   177e8:	bcs	17bec <__assert_fail@plt+0x5d24>
   177ec:	ldr	r4, [sp, #80]	; 0x50
   177f0:	cmp	r4, #0
   177f4:	beq	17910 <__assert_fail@plt+0x5a48>
   177f8:	cmp	r1, r5
   177fc:	bls	17874 <__assert_fail@plt+0x59ac>
   17800:	ldr	r0, [sp, #84]	; 0x54
   17804:	sub	r6, r1, r5
   17808:	cmp	r0, #43	; 0x2b
   1780c:	cmpne	r0, #48	; 0x30
   17810:	bne	17854 <__assert_fail@plt+0x598c>
   17814:	ldr	r4, [sp, #80]	; 0x50
   17818:	cmp	r6, #0
   1781c:	beq	17874 <__assert_fail@plt+0x59ac>
   17820:	mov	r0, #48	; 0x30
   17824:	mov	r1, r4
   17828:	bl	11db4 <fputc@plt>
   1782c:	subs	r6, r6, #1
   17830:	bne	17820 <__assert_fail@plt+0x5958>
   17834:	b	17874 <__assert_fail@plt+0x59ac>
   17838:	ldr	ip, [sp, #92]	; 0x5c
   1783c:	ldr	r7, [sp, #80]	; 0x50
   17840:	ldrb	r3, [sl, #1]!
   17844:	mvn	r6, #0
   17848:	cmp	r3, #0
   1784c:	bne	162b4 <__assert_fail@plt+0x43ec>
   17850:	b	17bd4 <__assert_fail@plt+0x5d0c>
   17854:	ldr	r4, [sp, #80]	; 0x50
   17858:	cmp	r6, #0
   1785c:	beq	17874 <__assert_fail@plt+0x59ac>
   17860:	mov	r0, #32
   17864:	mov	r1, r4
   17868:	bl	11db4 <fputc@plt>
   1786c:	subs	r6, r6, #1
   17870:	bne	17860 <__assert_fail@plt+0x5998>
   17874:	tst	r7, #1
   17878:	beq	178b4 <__assert_fail@plt+0x59ec>
   1787c:	ldr	r4, [sp, #80]	; 0x50
   17880:	cmp	r5, #0
   17884:	beq	17910 <__assert_fail@plt+0x5a48>
   17888:	bl	11c40 <__ctype_tolower_loc@plt>
   1788c:	ldr	r7, [sp, #40]	; 0x28
   17890:	mov	r6, r0
   17894:	ldrb	r0, [r7], #1
   17898:	ldr	r1, [r6]
   1789c:	ldr	r0, [r1, r0, lsl #2]
   178a0:	mov	r1, r4
   178a4:	bl	11db4 <fputc@plt>
   178a8:	subs	r5, r5, #1
   178ac:	bne	17894 <__assert_fail@plt+0x59cc>
   178b0:	b	17910 <__assert_fail@plt+0x5a48>
   178b4:	ldr	r0, [sp, #88]	; 0x58
   178b8:	tst	r0, #1
   178bc:	beq	178f8 <__assert_fail@plt+0x5a30>
   178c0:	ldr	r4, [sp, #80]	; 0x50
   178c4:	cmp	r5, #0
   178c8:	beq	17910 <__assert_fail@plt+0x5a48>
   178cc:	bl	11c4c <__ctype_toupper_loc@plt>
   178d0:	ldr	r7, [sp, #40]	; 0x28
   178d4:	mov	r6, r0
   178d8:	ldrb	r0, [r7], #1
   178dc:	ldr	r1, [r6]
   178e0:	ldr	r0, [r1, r0, lsl #2]
   178e4:	mov	r1, r4
   178e8:	bl	11db4 <fputc@plt>
   178ec:	subs	r5, r5, #1
   178f0:	bne	178d8 <__assert_fail@plt+0x5a10>
   178f4:	b	17910 <__assert_fail@plt+0x5a48>
   178f8:	ldr	r4, [sp, #80]	; 0x50
   178fc:	ldr	r0, [sp, #40]	; 0x28
   17900:	mov	r1, r5
   17904:	mov	r2, #1
   17908:	mov	r3, r4
   1790c:	bl	11b80 <fwrite@plt>
   17910:	ldr	ip, [sp, #92]	; 0x5c
   17914:	mov	r7, r4
   17918:	add	ip, r8, ip
   1791c:	ldrb	r3, [sl, #1]!
   17920:	mvn	r6, #0
   17924:	cmp	r3, #0
   17928:	bne	162b4 <__assert_fail@plt+0x43ec>
   1792c:	b	17bd4 <__assert_fail@plt+0x5d0c>
   17930:	cmp	r2, #0
   17934:	beq	17b54 <__assert_fail@plt+0x5c8c>
   17938:	movw	r4, #10000	; 0x2710
   1793c:	mov	r0, #1
   17940:	mla	r2, r3, r4, r2
   17944:	mov	r3, #100	; 0x64
   17948:	mla	r3, ip, r3, r2
   1794c:	mov	ip, #9
   17950:	mov	r2, #20
   17954:	cmp	r9, #79	; 0x4f
   17958:	moveq	r7, #0
   1795c:	cmpeq	lr, #0
   17960:	bne	17150 <__assert_fail@plt+0x5288>
   17964:	b	17770 <__assert_fail@plt+0x58a8>
   17968:	ldr	r3, [sp, #80]	; 0x50
   1796c:	sub	r0, fp, #46	; 0x2e
   17970:	mov	r2, #1
   17974:	bl	11b80 <fwrite@plt>
   17978:	ldr	r0, [sp, #84]	; 0x54
   1797c:	mov	r4, #0
   17980:	mvn	r1, #9
   17984:	cmp	r0, #45	; 0x2d
   17988:	subne	r0, r6, r7
   1798c:	subne	r0, r0, #9
   17990:	bicne	r4, r0, r0, asr #31
   17994:	ldr	r0, [sp, #92]	; 0x5c
   17998:	add	r0, r0, r7
   1799c:	sub	r0, r1, r0
   179a0:	cmp	r4, r0
   179a4:	bcs	17bec <__assert_fail@plt+0x5d24>
   179a8:	ldr	r6, [sp, #80]	; 0x50
   179ac:	cmp	r6, #0
   179b0:	cmpne	r4, #0
   179b4:	bne	179e0 <__assert_fail@plt+0x5b18>
   179b8:	ldr	r0, [sp, #92]	; 0x5c
   179bc:	add	r0, r0, r4
   179c0:	add	r0, r0, r7
   179c4:	mov	r7, r6
   179c8:	add	ip, r0, #9
   179cc:	ldrb	r3, [sl, #1]!
   179d0:	mvn	r6, #0
   179d4:	cmp	r3, #0
   179d8:	bne	162b4 <__assert_fail@plt+0x43ec>
   179dc:	b	17bd4 <__assert_fail@plt+0x5d0c>
   179e0:	ldr	r0, [sp, #84]	; 0x54
   179e4:	uxtb	r0, r0
   179e8:	cmp	r0, #43	; 0x2b
   179ec:	beq	179fc <__assert_fail@plt+0x5b34>
   179f0:	cmp	r0, #48	; 0x30
   179f4:	mov	r5, r4
   179f8:	bne	17a18 <__assert_fail@plt+0x5b50>
   179fc:	mov	r5, r4
   17a00:	mov	r0, #48	; 0x30
   17a04:	mov	r1, r6
   17a08:	bl	11db4 <fputc@plt>
   17a0c:	subs	r5, r5, #1
   17a10:	bne	17a00 <__assert_fail@plt+0x5b38>
   17a14:	b	179b8 <__assert_fail@plt+0x5af0>
   17a18:	mov	r0, #32
   17a1c:	mov	r1, r6
   17a20:	bl	11db4 <fputc@plt>
   17a24:	subs	r5, r5, #1
   17a28:	bne	17a18 <__assert_fail@plt+0x5b50>
   17a2c:	b	179b8 <__assert_fail@plt+0x5af0>
   17a30:	ldr	r6, [sp, #80]	; 0x50
   17a34:	cmp	r4, #0
   17a38:	beq	17a50 <__assert_fail@plt+0x5b88>
   17a3c:	mov	r0, #32
   17a40:	mov	r1, r6
   17a44:	bl	11db4 <fputc@plt>
   17a48:	subs	r4, r4, #1
   17a4c:	bne	17a3c <__assert_fail@plt+0x5b74>
   17a50:	ldr	r0, [sp, #72]	; 0x48
   17a54:	tst	r0, #1
   17a58:	beq	17a94 <__assert_fail@plt+0x5bcc>
   17a5c:	ldr	r7, [sp, #80]	; 0x50
   17a60:	cmp	r5, #0
   17a64:	beq	17af8 <__assert_fail@plt+0x5c30>
   17a68:	bl	11c40 <__ctype_tolower_loc@plt>
   17a6c:	ldr	r4, [sp, #44]	; 0x2c
   17a70:	mov	r6, r0
   17a74:	ldrb	r0, [r4], #1
   17a78:	ldr	r1, [r6]
   17a7c:	ldr	r0, [r1, r0, lsl #2]
   17a80:	mov	r1, r7
   17a84:	bl	11db4 <fputc@plt>
   17a88:	subs	r5, r5, #1
   17a8c:	bne	17a74 <__assert_fail@plt+0x5bac>
   17a90:	b	17af8 <__assert_fail@plt+0x5c30>
   17a94:	ldr	r1, [sp, #88]	; 0x58
   17a98:	eor	r0, r0, #1
   17a9c:	and	r0, r1, r0
   17aa0:	tst	r0, #1
   17aa4:	beq	17ae0 <__assert_fail@plt+0x5c18>
   17aa8:	ldr	r7, [sp, #80]	; 0x50
   17aac:	cmp	r5, #0
   17ab0:	beq	17af8 <__assert_fail@plt+0x5c30>
   17ab4:	bl	11c4c <__ctype_toupper_loc@plt>
   17ab8:	ldr	r4, [sp, #44]	; 0x2c
   17abc:	mov	r6, r0
   17ac0:	ldrb	r0, [r4], #1
   17ac4:	ldr	r1, [r6]
   17ac8:	ldr	r0, [r1, r0, lsl #2]
   17acc:	mov	r1, r7
   17ad0:	bl	11db4 <fputc@plt>
   17ad4:	subs	r5, r5, #1
   17ad8:	bne	17ac0 <__assert_fail@plt+0x5bf8>
   17adc:	b	17af8 <__assert_fail@plt+0x5c30>
   17ae0:	ldr	r7, [sp, #80]	; 0x50
   17ae4:	ldr	r0, [sp, #44]	; 0x2c
   17ae8:	mov	r1, r5
   17aec:	mov	r2, #1
   17af0:	mov	r3, r7
   17af4:	bl	11b80 <fwrite@plt>
   17af8:	ldr	ip, [sp, #92]	; 0x5c
   17afc:	add	ip, r8, ip
   17b00:	ldrb	r3, [sl, #1]!
   17b04:	mvn	r6, #0
   17b08:	cmp	r3, #0
   17b0c:	bne	162b4 <__assert_fail@plt+0x43ec>
   17b10:	b	17bd4 <__assert_fail@plt+0x5d0c>
   17b14:	ldr	r6, [sp, #80]	; 0x50
   17b18:	mov	r0, #32
   17b1c:	mov	r1, r6
   17b20:	bl	11db4 <fputc@plt>
   17b24:	subs	r5, r5, #1
   17b28:	bne	17b18 <__assert_fail@plt+0x5c50>
   17b2c:	mov	r0, #10
   17b30:	b	17ba0 <__assert_fail@plt+0x5cd8>
   17b34:	ldr	r6, [sp, #80]	; 0x50
   17b38:	mov	r0, #32
   17b3c:	mov	r1, r6
   17b40:	bl	11db4 <fputc@plt>
   17b44:	subs	r5, r5, #1
   17b48:	bne	17b38 <__assert_fail@plt+0x5c70>
   17b4c:	mov	r0, #9
   17b50:	b	17ba0 <__assert_fail@plt+0x5cd8>
   17b54:	cmp	ip, #0
   17b58:	beq	17bc8 <__assert_fail@plt+0x5d00>
   17b5c:	mov	r2, #100	; 0x64
   17b60:	mov	r0, #1
   17b64:	mla	r3, r3, r2, ip
   17b68:	mov	ip, #6
   17b6c:	mov	r2, #4
   17b70:	cmp	r9, #79	; 0x4f
   17b74:	moveq	r7, #0
   17b78:	cmpeq	lr, #0
   17b7c:	bne	17150 <__assert_fail@plt+0x5288>
   17b80:	b	17770 <__assert_fail@plt+0x58a8>
   17b84:	ldr	r6, [sp, #80]	; 0x50
   17b88:	mov	r0, #32
   17b8c:	mov	r1, r6
   17b90:	bl	11db4 <fputc@plt>
   17b94:	subs	r5, r5, #1
   17b98:	bne	17b88 <__assert_fail@plt+0x5cc0>
   17b9c:	ldrb	r0, [sl]
   17ba0:	mov	r1, r6
   17ba4:	bl	11db4 <fputc@plt>
   17ba8:	mov	ip, r7
   17bac:	ldr	r7, [sp, #80]	; 0x50
   17bb0:	add	ip, r4, ip
   17bb4:	ldrb	r3, [sl, #1]!
   17bb8:	mvn	r6, #0
   17bbc:	cmp	r3, #0
   17bc0:	bne	162b4 <__assert_fail@plt+0x43ec>
   17bc4:	b	17bd4 <__assert_fail@plt+0x5d0c>
   17bc8:	mov	ip, #3
   17bcc:	b	17638 <__assert_fail@plt+0x5770>
   17bd0:	mov	ip, #0
   17bd4:	ldr	r0, [sp, #56]	; 0x38
   17bd8:	ldr	r1, [sp, #52]	; 0x34
   17bdc:	str	r1, [r0]
   17be0:	mov	r0, ip
   17be4:	sub	sp, fp, #28
   17be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17bec:	mov	r0, #34	; 0x22
   17bf0:	ldr	r1, [sp, #56]	; 0x38
   17bf4:	mov	ip, #0
   17bf8:	str	r0, [r1]
   17bfc:	mov	r0, ip
   17c00:	sub	sp, fp, #28
   17c04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c08:	mov	r0, #75	; 0x4b
   17c0c:	b	17bf0 <__assert_fail@plt+0x5d28>
   17c10:	push	{r4, r5, r6, sl, fp, lr}
   17c14:	add	fp, sp, #16
   17c18:	mov	r4, r0
   17c1c:	bl	11cdc <__errno_location@plt>
   17c20:	ldr	r6, [r0]
   17c24:	mov	r5, r0
   17c28:	mov	r0, r4
   17c2c:	bl	11a84 <free@plt>
   17c30:	str	r6, [r5]
   17c34:	pop	{r4, r5, r6, sl, fp, pc}
   17c38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c3c:	add	fp, sp, #28
   17c40:	sub	sp, sp, #4
   17c44:	mov	r5, r0
   17c48:	mov	r0, r2
   17c4c:	mov	r4, r2
   17c50:	mov	r9, r1
   17c54:	bl	11d30 <fileno@plt>
   17c58:	mov	r7, #0
   17c5c:	cmp	r0, #0
   17c60:	beq	17ca0 <__assert_fail@plt+0x5dd8>
   17c64:	cmp	r0, #1
   17c68:	beq	17cac <__assert_fail@plt+0x5de4>
   17c6c:	cmp	r0, #2
   17c70:	beq	17c88 <__assert_fail@plt+0x5dc0>
   17c74:	mov	r0, #2
   17c78:	mov	r1, #2
   17c7c:	bl	11b08 <dup2@plt>
   17c80:	subs	r7, r0, #2
   17c84:	movwne	r7, #1
   17c88:	mov	r0, #1
   17c8c:	mov	r1, #1
   17c90:	bl	11b08 <dup2@plt>
   17c94:	subs	r6, r0, #1
   17c98:	movwne	r6, #1
   17c9c:	b	17cb0 <__assert_fail@plt+0x5de8>
   17ca0:	mov	r6, #0
   17ca4:	mov	r8, #0
   17ca8:	b	17d78 <__assert_fail@plt+0x5eb0>
   17cac:	mov	r6, #0
   17cb0:	mov	r0, #0
   17cb4:	mov	r1, #0
   17cb8:	mov	sl, #0
   17cbc:	bl	11b08 <dup2@plt>
   17cc0:	cmp	r0, #0
   17cc4:	mov	r8, #0
   17cc8:	beq	17d08 <__assert_fail@plt+0x5e40>
   17ccc:	movw	r0, #46813	; 0xb6dd
   17cd0:	mov	r1, #0
   17cd4:	movt	r0, #3
   17cd8:	bl	11bf8 <open64@plt>
   17cdc:	cmp	r0, #0
   17ce0:	beq	17d04 <__assert_fail@plt+0x5e3c>
   17ce4:	cmn	r0, #1
   17ce8:	ble	17e28 <__assert_fail@plt+0x5f60>
   17cec:	bl	11ea4 <close@plt>
   17cf0:	bl	11cdc <__errno_location@plt>
   17cf4:	mov	r4, r0
   17cf8:	mov	r0, #9
   17cfc:	str	r0, [r4]
   17d00:	b	17e30 <__assert_fail@plt+0x5f68>
   17d04:	mov	r8, #1
   17d08:	cmp	r6, #0
   17d0c:	beq	17d2c <__assert_fail@plt+0x5e64>
   17d10:	movw	r0, #46813	; 0xb6dd
   17d14:	mov	r1, #0
   17d18:	movt	r0, #3
   17d1c:	bl	11bf8 <open64@plt>
   17d20:	mov	sl, #1
   17d24:	cmp	r0, #1
   17d28:	bne	17df8 <__assert_fail@plt+0x5f30>
   17d2c:	cmp	r7, #0
   17d30:	beq	17d70 <__assert_fail@plt+0x5ea8>
   17d34:	movw	r0, #46813	; 0xb6dd
   17d38:	mov	r1, #0
   17d3c:	movt	r0, #3
   17d40:	bl	11bf8 <open64@plt>
   17d44:	mov	r7, #1
   17d48:	cmp	r0, #2
   17d4c:	beq	17d74 <__assert_fail@plt+0x5eac>
   17d50:	cmn	r0, #1
   17d54:	ble	17e80 <__assert_fail@plt+0x5fb8>
   17d58:	bl	11ea4 <close@plt>
   17d5c:	bl	11cdc <__errno_location@plt>
   17d60:	mov	r4, r0
   17d64:	mov	r0, #9
   17d68:	str	r0, [r4]
   17d6c:	b	17e88 <__assert_fail@plt+0x5fc0>
   17d70:	mov	r7, #0
   17d74:	mov	r6, sl
   17d78:	mov	r0, r5
   17d7c:	mov	r1, r9
   17d80:	mov	r2, r4
   17d84:	bl	11c64 <freopen64@plt>
   17d88:	mov	r5, r0
   17d8c:	bl	11cdc <__errno_location@plt>
   17d90:	ldr	r9, [r0]
   17d94:	mov	r4, r0
   17d98:	cmp	r7, #0
   17d9c:	beq	17da8 <__assert_fail@plt+0x5ee0>
   17da0:	mov	r0, #2
   17da4:	bl	11ea4 <close@plt>
   17da8:	cmp	r6, #0
   17dac:	beq	17db8 <__assert_fail@plt+0x5ef0>
   17db0:	mov	r0, #1
   17db4:	bl	11ea4 <close@plt>
   17db8:	cmp	r8, #0
   17dbc:	beq	17ddc <__assert_fail@plt+0x5f14>
   17dc0:	mov	r0, #0
   17dc4:	bl	11ea4 <close@plt>
   17dc8:	cmp	r5, #0
   17dcc:	beq	17de4 <__assert_fail@plt+0x5f1c>
   17dd0:	mov	r0, r5
   17dd4:	sub	sp, fp, #28
   17dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ddc:	cmp	r5, #0
   17de0:	bne	17dd0 <__assert_fail@plt+0x5f08>
   17de4:	mov	r5, #0
   17de8:	str	r9, [r4]
   17dec:	mov	r0, r5
   17df0:	sub	sp, fp, #28
   17df4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17df8:	cmn	r0, #1
   17dfc:	ble	17e48 <__assert_fail@plt+0x5f80>
   17e00:	bl	11ea4 <close@plt>
   17e04:	bl	11cdc <__errno_location@plt>
   17e08:	mov	r4, r0
   17e0c:	mov	r0, #9
   17e10:	str	r0, [r4]
   17e14:	ldr	r9, [r4]
   17e18:	mov	r5, #0
   17e1c:	cmp	r7, #0
   17e20:	beq	17db0 <__assert_fail@plt+0x5ee8>
   17e24:	b	17e60 <__assert_fail@plt+0x5f98>
   17e28:	bl	11cdc <__errno_location@plt>
   17e2c:	mov	r4, r0
   17e30:	ldr	r9, [r4]
   17e34:	mov	r8, #1
   17e38:	mov	r5, #0
   17e3c:	cmp	r7, #0
   17e40:	bne	17da0 <__assert_fail@plt+0x5ed8>
   17e44:	b	17da8 <__assert_fail@plt+0x5ee0>
   17e48:	bl	11cdc <__errno_location@plt>
   17e4c:	mov	r4, r0
   17e50:	ldr	r9, [r4]
   17e54:	mov	r5, #0
   17e58:	cmp	r7, #0
   17e5c:	beq	17db0 <__assert_fail@plt+0x5ee8>
   17e60:	mov	r0, #2
   17e64:	bl	11ea4 <close@plt>
   17e68:	mov	r0, #1
   17e6c:	bl	11ea4 <close@plt>
   17e70:	mov	r5, #0
   17e74:	cmp	r8, #0
   17e78:	beq	17de4 <__assert_fail@plt+0x5f1c>
   17e7c:	b	17dc0 <__assert_fail@plt+0x5ef8>
   17e80:	bl	11cdc <__errno_location@plt>
   17e84:	mov	r4, r0
   17e88:	ldr	r9, [r4]
   17e8c:	mov	r0, #2
   17e90:	bl	11ea4 <close@plt>
   17e94:	mov	r5, #0
   17e98:	cmp	sl, #0
   17e9c:	bne	17db0 <__assert_fail@plt+0x5ee8>
   17ea0:	b	17db8 <__assert_fail@plt+0x5ef0>
   17ea4:	push	{r4, r5, r6, r7, fp, lr}
   17ea8:	add	fp, sp, #16
   17eac:	sub	sp, sp, #8
   17eb0:	mov	r4, r0
   17eb4:	ldr	r0, [r0, #4]
   17eb8:	mov	r5, r3
   17ebc:	mov	r6, r2
   17ec0:	ldr	r1, [r4, #8]
   17ec4:	cmp	r1, r0
   17ec8:	bne	17ee4 <__assert_fail@plt+0x601c>
   17ecc:	ldrd	r0, [r4, #16]
   17ed0:	cmp	r1, r0
   17ed4:	bne	17ee4 <__assert_fail@plt+0x601c>
   17ed8:	ldr	r0, [r4, #36]	; 0x24
   17edc:	cmp	r0, #0
   17ee0:	beq	17efc <__assert_fail@plt+0x6034>
   17ee4:	mov	r0, r4
   17ee8:	mov	r2, r6
   17eec:	mov	r3, r5
   17ef0:	sub	sp, fp, #16
   17ef4:	pop	{r4, r5, r6, r7, fp, lr}
   17ef8:	b	11d60 <fseeko64@plt>
   17efc:	ldr	r7, [fp, #8]
   17f00:	mov	r0, r4
   17f04:	bl	11d30 <fileno@plt>
   17f08:	mov	r2, r6
   17f0c:	mov	r3, r5
   17f10:	str	r7, [sp]
   17f14:	bl	11b8c <lseek64@plt>
   17f18:	and	r2, r0, r1
   17f1c:	cmn	r2, #1
   17f20:	beq	17f40 <__assert_fail@plt+0x6078>
   17f24:	strd	r0, [r4, #80]	; 0x50
   17f28:	ldr	r0, [r4]
   17f2c:	bic	r0, r0, #16
   17f30:	str	r0, [r4]
   17f34:	mov	r0, #0
   17f38:	sub	sp, fp, #16
   17f3c:	pop	{r4, r5, r6, r7, fp, pc}
   17f40:	mvn	r0, #0
   17f44:	sub	sp, fp, #16
   17f48:	pop	{r4, r5, r6, r7, fp, pc}
   17f4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f50:	add	fp, sp, #28
   17f54:	sub	sp, sp, #28
   17f58:	cmp	r1, #4096	; 0x1000
   17f5c:	bcs	17f78 <__assert_fail@plt+0x60b0>
   17f60:	mov	sl, r0
   17f64:	and	r0, r1, #516	; 0x204
   17f68:	mov	r6, r1
   17f6c:	cmp	r0, #516	; 0x204
   17f70:	tstne	r6, #18
   17f74:	bne	17f94 <__assert_fail@plt+0x60cc>
   17f78:	bl	11cdc <__errno_location@plt>
   17f7c:	mov	r1, #22
   17f80:	mov	r4, #0
   17f84:	str	r1, [r0]
   17f88:	mov	r0, r4
   17f8c:	sub	sp, fp, #28
   17f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f94:	mov	r0, #1
   17f98:	mov	r1, #96	; 0x60
   17f9c:	mov	r5, r2
   17fa0:	bl	383fc <__assert_fail@plt+0x26534>
   17fa4:	cmp	r0, #0
   17fa8:	beq	18588 <__assert_fail@plt+0x66c0>
   17fac:	mov	r4, r0
   17fb0:	mvn	r0, #99	; 0x63
   17fb4:	tst	r6, #2
   17fb8:	mov	r1, r6
   17fbc:	str	r0, [r4, #32]
   17fc0:	bic	r0, r6, #516	; 0x204
   17fc4:	str	r5, [r4, #44]	; 0x2c
   17fc8:	str	r4, [sp, #24]
   17fcc:	orrne	r1, r0, #4
   17fd0:	str	r1, [r4, #48]	; 0x30
   17fd4:	ldr	r0, [sl]
   17fd8:	cmp	r0, #0
   17fdc:	beq	18040 <__assert_fail@plt+0x6178>
   17fe0:	add	r7, sl, #4
   17fe4:	mov	r4, #0
   17fe8:	bl	11cac <strlen@plt>
   17fec:	cmp	r0, r4
   17ff0:	movhi	r4, r0
   17ff4:	ldr	r0, [r7], #4
   17ff8:	cmp	r0, #0
   17ffc:	bne	17fe8 <__assert_fail@plt+0x6120>
   18000:	add	r0, r4, #1
   18004:	ldr	r4, [sp, #24]
   18008:	cmp	r0, #4096	; 0x1000
   1800c:	movls	r0, #4096	; 0x1000
   18010:	ldr	r1, [r4, #36]	; 0x24
   18014:	add	r0, r0, #256	; 0x100
   18018:	adds	r1, r0, r1
   1801c:	bcc	18054 <__assert_fail@plt+0x618c>
   18020:	ldr	r0, [r4, #24]
   18024:	bl	17c10 <__assert_fail@plt+0x5d48>
   18028:	mov	r0, #0
   1802c:	str	r0, [r4, #24]
   18030:	bl	11cdc <__errno_location@plt>
   18034:	mov	r1, #36	; 0x24
   18038:	str	r1, [r0]
   1803c:	b	18580 <__assert_fail@plt+0x66b8>
   18040:	mov	r0, #4096	; 0x1000
   18044:	ldr	r1, [r4, #36]	; 0x24
   18048:	add	r0, r0, #256	; 0x100
   1804c:	adds	r1, r0, r1
   18050:	bcs	18020 <__assert_fail@plt+0x6158>
   18054:	str	r1, [r4, #36]	; 0x24
   18058:	ldr	r0, [r4, #24]
   1805c:	bl	38480 <__assert_fail@plt+0x265b8>
   18060:	cmp	r0, #0
   18064:	beq	18260 <__assert_fail@plt+0x6398>
   18068:	str	r0, [r4, #24]
   1806c:	ldr	r0, [sl]
   18070:	cmp	r0, #0
   18074:	beq	18274 <__assert_fail@plt+0x63ac>
   18078:	mov	r0, #176	; 0xb0
   1807c:	bl	38450 <__assert_fail@plt+0x26588>
   18080:	cmp	r0, #0
   18084:	beq	18578 <__assert_fail@plt+0x66b0>
   18088:	ldr	r1, [r4, #24]
   1808c:	mov	r7, r0
   18090:	mov	r0, #0
   18094:	mov	r2, #196608	; 0x30000
   18098:	strb	r0, [r7, #168]	; 0xa8
   1809c:	str	r2, [r7, #58]	; 0x3a
   180a0:	mvn	r2, #0
   180a4:	str	r4, [r7, #44]	; 0x2c
   180a8:	str	r2, [r7, #48]	; 0x30
   180ac:	str	r0, [r7, #52]	; 0x34
   180b0:	str	r0, [r7, #12]
   180b4:	str	r0, [r7, #16]
   180b8:	str	r0, [r7, #20]
   180bc:	str	r1, [r7, #28]
   180c0:	str	r0, [r7, #32]
   180c4:	cmp	r5, #0
   180c8:	beq	18280 <__assert_fail@plt+0x63b8>
   180cc:	ldrb	r0, [r4, #49]	; 0x31
   180d0:	ubfx	r0, r0, #2, #1
   180d4:	ldr	r4, [sl]
   180d8:	str	r0, [sp, #12]
   180dc:	cmp	r4, #0
   180e0:	beq	18294 <__assert_fail@plt+0x63cc>
   180e4:	tst	r6, #2048	; 0x800
   180e8:	str	r5, [sp, #16]
   180ec:	str	r7, [sp, #20]
   180f0:	bne	182b8 <__assert_fail@plt+0x63f0>
   180f4:	mov	r0, #0
   180f8:	mov	r8, #0
   180fc:	mov	r5, #0
   18100:	str	r0, [sp, #8]
   18104:	b	18158 <__assert_fail@plt+0x6290>
   18108:	cmp	r8, #0
   1810c:	str	r4, [r7, #8]
   18110:	beq	18134 <__assert_fail@plt+0x626c>
   18114:	ldr	r0, [sp, #8]
   18118:	str	r7, [sp, #8]
   1811c:	str	r7, [r0, #8]
   18120:	ldr	r4, [sl, #4]!
   18124:	add	r5, r5, #1
   18128:	cmp	r4, #0
   1812c:	bne	18158 <__assert_fail@plt+0x6290>
   18130:	b	1840c <__assert_fail@plt+0x6544>
   18134:	mov	r0, r7
   18138:	str	r7, [sp, #8]
   1813c:	b	18144 <__assert_fail@plt+0x627c>
   18140:	str	r8, [r7, #8]
   18144:	mov	r8, r7
   18148:	ldr	r4, [sl, #4]!
   1814c:	add	r5, r5, #1
   18150:	cmp	r4, #0
   18154:	beq	1840c <__assert_fail@plt+0x6544>
   18158:	mov	r0, r4
   1815c:	bl	11cac <strlen@plt>
   18160:	mov	r9, r0
   18164:	cmp	r0, #3
   18168:	bcc	18198 <__assert_fail@plt+0x62d0>
   1816c:	add	r0, r9, r4
   18170:	ldrb	r0, [r0, #-1]
   18174:	cmp	r0, #47	; 0x2f
   18178:	bne	18198 <__assert_fail@plt+0x62d0>
   1817c:	sub	r0, r4, #2
   18180:	ldrb	r1, [r0, r9]
   18184:	cmp	r1, #47	; 0x2f
   18188:	bne	18198 <__assert_fail@plt+0x62d0>
   1818c:	sub	r9, r9, #1
   18190:	cmp	r9, #1
   18194:	bhi	18180 <__assert_fail@plt+0x62b8>
   18198:	add	r0, r9, #176	; 0xb0
   1819c:	bic	r0, r0, #7
   181a0:	bl	38450 <__assert_fail@plt+0x26588>
   181a4:	cmp	r0, #0
   181a8:	beq	183fc <__assert_fail@plt+0x6534>
   181ac:	add	r6, r0, #168	; 0xa8
   181b0:	mov	r7, r0
   181b4:	mov	r1, r4
   181b8:	mov	r2, r9
   181bc:	mov	r0, r6
   181c0:	bl	11ab4 <memcpy@plt>
   181c4:	ldr	r0, [sp, #24]
   181c8:	ldr	r1, [sp, #20]
   181cc:	mov	r4, #0
   181d0:	cmp	r8, #0
   181d4:	strb	r4, [r6, r9]
   181d8:	ldr	r2, [r0, #24]
   181dc:	str	r1, [r7, #4]
   181e0:	add	r1, r7, #44	; 0x2c
   181e4:	stm	r1, {r0, r4, r9}
   181e8:	mov	r1, #196608	; 0x30000
   181ec:	str	r1, [r7, #58]	; 0x3a
   181f0:	str	r4, [r7, #12]
   181f4:	str	r4, [r7, #16]
   181f8:	str	r4, [r7, #20]
   181fc:	str	r6, [r7, #24]
   18200:	mov	r1, r8
   18204:	movwne	r1, #1
   18208:	str	r2, [r7, #28]
   1820c:	ldr	r2, [sp, #12]
   18210:	str	r4, [r7, #32]
   18214:	tst	r2, r1
   18218:	beq	18240 <__assert_fail@plt+0x6378>
   1821c:	mov	r0, #2
   18220:	str	r0, [r7, #112]	; 0x70
   18224:	mov	r0, #11
   18228:	str	r4, [r7, #116]	; 0x74
   1822c:	strh	r0, [r7, #56]	; 0x38
   18230:	ldr	r0, [sp, #16]
   18234:	cmp	r0, #0
   18238:	bne	18140 <__assert_fail@plt+0x6278>
   1823c:	b	18108 <__assert_fail@plt+0x6240>
   18240:	mov	r1, r7
   18244:	mov	r2, #0
   18248:	bl	185fc <__assert_fail@plt+0x6734>
   1824c:	strh	r0, [r7, #56]	; 0x38
   18250:	ldr	r0, [sp, #16]
   18254:	cmp	r0, #0
   18258:	bne	18140 <__assert_fail@plt+0x6278>
   1825c:	b	18108 <__assert_fail@plt+0x6240>
   18260:	ldr	r0, [r4, #24]
   18264:	bl	17c10 <__assert_fail@plt+0x5d48>
   18268:	mov	r0, #0
   1826c:	str	r0, [r4, #24]
   18270:	b	18580 <__assert_fail@plt+0x66b8>
   18274:	mov	r7, #0
   18278:	cmp	r5, #0
   1827c:	bne	180cc <__assert_fail@plt+0x6204>
   18280:	mov	r0, #1
   18284:	ldr	r4, [sl]
   18288:	str	r0, [sp, #12]
   1828c:	cmp	r4, #0
   18290:	bne	180e4 <__assert_fail@plt+0x621c>
   18294:	ldr	r4, [sp, #24]
   18298:	mov	r8, #0
   1829c:	mov	r0, #176	; 0xb0
   182a0:	bl	38450 <__assert_fail@plt+0x26588>
   182a4:	cmp	r0, #0
   182a8:	bne	18464 <__assert_fail@plt+0x659c>
   182ac:	mov	r0, #0
   182b0:	str	r0, [r4]
   182b4:	b	18534 <__assert_fail@plt+0x666c>
   182b8:	add	r0, sl, #4
   182bc:	mov	r9, #0
   182c0:	mov	r8, #0
   182c4:	mov	r5, #0
   182c8:	str	r0, [sp, #8]
   182cc:	ldr	r0, [sp, #12]
   182d0:	eor	r0, r0, #1
   182d4:	str	r0, [sp, #12]
   182d8:	mov	r0, #0
   182dc:	str	r0, [sp, #4]
   182e0:	b	18314 <__assert_fail@plt+0x644c>
   182e4:	cmp	r8, #0
   182e8:	str	r9, [r5, #8]
   182ec:	beq	183f0 <__assert_fail@plt+0x6528>
   182f0:	ldr	r0, [sp, #4]
   182f4:	str	r5, [sp, #4]
   182f8:	str	r5, [r0, #8]
   182fc:	ldr	r0, [sp, #8]
   18300:	mov	r5, sl
   18304:	add	r5, sl, #1
   18308:	ldr	r4, [r0, sl, lsl #2]
   1830c:	cmp	r4, #0
   18310:	beq	1840c <__assert_fail@plt+0x6544>
   18314:	mov	r0, r4
   18318:	mov	sl, r5
   1831c:	bl	11cac <strlen@plt>
   18320:	mov	r7, r0
   18324:	add	r0, r0, #176	; 0xb0
   18328:	bic	r0, r0, #7
   1832c:	bl	38450 <__assert_fail@plt+0x26588>
   18330:	cmp	r0, #0
   18334:	beq	183fc <__assert_fail@plt+0x6534>
   18338:	add	r6, r0, #168	; 0xa8
   1833c:	mov	r5, r0
   18340:	mov	r1, r4
   18344:	mov	r2, r7
   18348:	mov	r0, r6
   1834c:	bl	11ab4 <memcpy@plt>
   18350:	ldr	r0, [sp, #24]
   18354:	ldr	r1, [sp, #20]
   18358:	strb	r9, [r6, r7]
   1835c:	ldr	r2, [r0, #24]
   18360:	str	r1, [r5, #4]
   18364:	mov	r1, #196608	; 0x30000
   18368:	str	r0, [r5, #44]	; 0x2c
   1836c:	str	r9, [r5, #48]	; 0x30
   18370:	str	r7, [r5, #52]	; 0x34
   18374:	str	r1, [r5, #58]	; 0x3a
   18378:	str	r9, [r5, #12]
   1837c:	str	r9, [r5, #16]
   18380:	str	r9, [r5, #20]
   18384:	str	r6, [r5, #24]
   18388:	clz	r1, r8
   1838c:	lsr	r1, r1, #5
   18390:	str	r2, [r5, #28]
   18394:	ldr	r2, [sp, #12]
   18398:	str	r9, [r5, #32]
   1839c:	orrs	r1, r2, r1
   183a0:	bne	183c8 <__assert_fail@plt+0x6500>
   183a4:	mov	r0, #2
   183a8:	str	r0, [r5, #112]	; 0x70
   183ac:	str	r9, [r5, #116]	; 0x74
   183b0:	mov	r0, #11
   183b4:	strh	r0, [r5, #56]	; 0x38
   183b8:	ldr	r0, [sp, #16]
   183bc:	cmp	r0, #0
   183c0:	bne	183e4 <__assert_fail@plt+0x651c>
   183c4:	b	182e4 <__assert_fail@plt+0x641c>
   183c8:	mov	r1, r5
   183cc:	mov	r2, #0
   183d0:	bl	185fc <__assert_fail@plt+0x6734>
   183d4:	strh	r0, [r5, #56]	; 0x38
   183d8:	ldr	r0, [sp, #16]
   183dc:	cmp	r0, #0
   183e0:	beq	182e4 <__assert_fail@plt+0x641c>
   183e4:	str	r8, [r5, #8]
   183e8:	mov	r8, r5
   183ec:	b	182fc <__assert_fail@plt+0x6434>
   183f0:	mov	r0, r5
   183f4:	str	r5, [sp, #4]
   183f8:	b	183e8 <__assert_fail@plt+0x6520>
   183fc:	ldr	r7, [sp, #20]
   18400:	cmp	r8, #0
   18404:	bne	18554 <__assert_fail@plt+0x668c>
   18408:	b	1856c <__assert_fail@plt+0x66a4>
   1840c:	ldr	r0, [sp, #16]
   18410:	ldr	r7, [sp, #20]
   18414:	cmp	r0, #0
   18418:	beq	18450 <__assert_fail@plt+0x6588>
   1841c:	ldr	r4, [sp, #24]
   18420:	cmp	r5, #2
   18424:	bcc	18454 <__assert_fail@plt+0x658c>
   18428:	mov	r0, r4
   1842c:	mov	r1, r8
   18430:	mov	r2, r5
   18434:	bl	18794 <__assert_fail@plt+0x68cc>
   18438:	mov	r8, r0
   1843c:	mov	r0, #176	; 0xb0
   18440:	bl	38450 <__assert_fail@plt+0x26588>
   18444:	cmp	r0, #0
   18448:	bne	18464 <__assert_fail@plt+0x659c>
   1844c:	b	182ac <__assert_fail@plt+0x63e4>
   18450:	ldr	r4, [sp, #24]
   18454:	mov	r0, #176	; 0xb0
   18458:	bl	38450 <__assert_fail@plt+0x26588>
   1845c:	cmp	r0, #0
   18460:	beq	182ac <__assert_fail@plt+0x63e4>
   18464:	ldr	r2, [r4, #24]
   18468:	mov	r1, #0
   1846c:	mov	r3, #196608	; 0x30000
   18470:	str	r0, [r4]
   18474:	str	r1, [r0, #52]	; 0x34
   18478:	strb	r1, [r0, #168]	; 0xa8
   1847c:	str	r4, [r0, #44]	; 0x2c
   18480:	str	r3, [r0, #58]	; 0x3a
   18484:	str	r2, [r0, #28]
   18488:	mov	r2, #9
   1848c:	str	r1, [r0, #32]
   18490:	strh	r2, [r0, #56]	; 0x38
   18494:	str	r8, [r0, #8]
   18498:	str	r1, [r0, #12]
   1849c:	str	r1, [r0, #16]
   184a0:	str	r1, [r0, #20]
   184a4:	mov	r1, #1
   184a8:	str	r1, [r0, #48]	; 0x30
   184ac:	ldrh	r0, [r4, #48]	; 0x30
   184b0:	movw	r1, #258	; 0x102
   184b4:	tst	r0, r1
   184b8:	beq	184f4 <__assert_fail@plt+0x662c>
   184bc:	movw	r0, #31760	; 0x7c10
   184c0:	movw	r2, #42308	; 0xa544
   184c4:	movw	r3, #42340	; 0xa564
   184c8:	mov	r1, #0
   184cc:	movt	r0, #1
   184d0:	movt	r2, #1
   184d4:	movt	r3, #1
   184d8:	str	r0, [sp]
   184dc:	mov	r0, #31
   184e0:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   184e4:	cmp	r0, #0
   184e8:	str	r0, [r4, #56]	; 0x38
   184ec:	bne	1850c <__assert_fail@plt+0x6644>
   184f0:	b	18534 <__assert_fail@plt+0x666c>
   184f4:	mov	r0, #32
   184f8:	bl	38450 <__assert_fail@plt+0x26588>
   184fc:	cmp	r0, #0
   18500:	str	r0, [r4, #56]	; 0x38
   18504:	beq	18534 <__assert_fail@plt+0x666c>
   18508:	bl	391b4 <__assert_fail@plt+0x272ec>
   1850c:	ldr	r4, [sp, #24]
   18510:	ldr	r0, [r4, #48]	; 0x30
   18514:	tst	r0, #516	; 0x204
   18518:	beq	18598 <__assert_fail@plt+0x66d0>
   1851c:	add	r0, r4, #60	; 0x3c
   18520:	mvn	r1, #0
   18524:	bl	1cc68 <__assert_fail@plt+0xada0>
   18528:	mov	r0, r4
   1852c:	sub	sp, fp, #28
   18530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18534:	cmp	r8, #0
   18538:	bne	18554 <__assert_fail@plt+0x668c>
   1853c:	b	1856c <__assert_fail@plt+0x66a4>
   18540:	mov	r0, r8
   18544:	bl	17c10 <__assert_fail@plt+0x5d48>
   18548:	cmp	r4, #0
   1854c:	mov	r8, r4
   18550:	beq	1856c <__assert_fail@plt+0x66a4>
   18554:	ldrd	r4, [r8, #8]
   18558:	cmp	r5, #0
   1855c:	beq	18540 <__assert_fail@plt+0x6678>
   18560:	mov	r0, r5
   18564:	bl	11ebc <closedir@plt>
   18568:	b	18540 <__assert_fail@plt+0x6678>
   1856c:	mov	r0, r7
   18570:	bl	17c10 <__assert_fail@plt+0x5d48>
   18574:	ldr	r4, [sp, #24]
   18578:	ldr	r0, [r4, #24]
   1857c:	bl	17c10 <__assert_fail@plt+0x5d48>
   18580:	mov	r0, r4
   18584:	bl	17c10 <__assert_fail@plt+0x5d48>
   18588:	mov	r4, #0
   1858c:	mov	r0, r4
   18590:	sub	sp, fp, #28
   18594:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18598:	mov	r1, #32768	; 0x8000
   1859c:	tst	r0, #512	; 0x200
   185a0:	and	r1, r1, r0, lsl #11
   185a4:	orr	r1, r1, #18688	; 0x4900
   185a8:	orr	r2, r1, #524288	; 0x80000
   185ac:	bne	185d0 <__assert_fail@plt+0x6708>
   185b0:	movw	r0, #46824	; 0xb6e8
   185b4:	mov	r1, r2
   185b8:	movt	r0, #3
   185bc:	bl	39548 <__assert_fail@plt+0x27680>
   185c0:	cmn	r0, #1
   185c4:	str	r0, [r4, #28]
   185c8:	bgt	1851c <__assert_fail@plt+0x6654>
   185cc:	b	185ec <__assert_fail@plt+0x6724>
   185d0:	ldr	r0, [r4, #32]
   185d4:	movw	r1, #46824	; 0xb6e8
   185d8:	movt	r1, #3
   185dc:	bl	1e168 <__assert_fail@plt+0xc2a0>
   185e0:	cmn	r0, #1
   185e4:	str	r0, [r4, #28]
   185e8:	bgt	1851c <__assert_fail@plt+0x6654>
   185ec:	ldr	r0, [r4, #48]	; 0x30
   185f0:	orr	r0, r0, #4
   185f4:	str	r0, [r4, #48]	; 0x30
   185f8:	b	1851c <__assert_fail@plt+0x6654>
   185fc:	push	{r4, r5, r6, sl, fp, lr}
   18600:	add	fp, sp, #16
   18604:	sub	sp, sp, #8
   18608:	mov	r4, r1
   1860c:	ldr	r1, [r0, #48]	; 0x30
   18610:	ldr	r3, [r4, #48]	; 0x30
   18614:	add	r5, r4, #64	; 0x40
   18618:	cmp	r3, #0
   1861c:	andeq	r3, r1, #1
   18620:	orreq	r2, r3, r2
   18624:	cmp	r2, #0
   18628:	andseq	r1, r1, #2
   1862c:	beq	18688 <__assert_fail@plt+0x67c0>
   18630:	ldr	r1, [r4, #24]
   18634:	mov	r0, #3
   18638:	mov	r2, r5
   1863c:	bl	11e5c <__xstat64@plt>
   18640:	cmp	r0, #0
   18644:	beq	18708 <__assert_fail@plt+0x6840>
   18648:	bl	11cdc <__errno_location@plt>
   1864c:	mov	r6, r0
   18650:	ldr	r0, [r0]
   18654:	cmp	r0, #2
   18658:	bne	186b8 <__assert_fail@plt+0x67f0>
   1865c:	ldr	r1, [r4, #24]
   18660:	mov	r0, #3
   18664:	mov	r2, r5
   18668:	bl	11eb0 <__lxstat64@plt>
   1866c:	cmp	r0, #0
   18670:	bne	186b4 <__assert_fail@plt+0x67ec>
   18674:	mov	r0, #0
   18678:	str	r0, [r6]
   1867c:	mov	r0, #13
   18680:	sub	sp, fp, #16
   18684:	pop	{r4, r5, r6, sl, fp, pc}
   18688:	ldr	r1, [r0, #32]
   1868c:	ldr	r2, [r4, #24]
   18690:	mov	r0, #256	; 0x100
   18694:	mov	r3, r5
   18698:	str	r0, [sp]
   1869c:	mov	r0, #3
   186a0:	bl	11b44 <__fxstatat64@plt>
   186a4:	cmp	r0, #0
   186a8:	beq	18708 <__assert_fail@plt+0x6840>
   186ac:	bl	11cdc <__errno_location@plt>
   186b0:	mov	r6, r0
   186b4:	ldr	r0, [r6]
   186b8:	vmov.i32	q8, #0	; 0x00000000
   186bc:	add	r1, r5, #80	; 0x50
   186c0:	str	r0, [r4, #32]
   186c4:	mov	r0, #0
   186c8:	str	r0, [r5, #96]	; 0x60
   186cc:	vst1.64	{d16-d17}, [r1]
   186d0:	add	r1, r5, #64	; 0x40
   186d4:	vst1.64	{d16-d17}, [r1]
   186d8:	add	r1, r5, #48	; 0x30
   186dc:	vst1.64	{d16-d17}, [r1]
   186e0:	add	r1, r5, #32
   186e4:	vst1.64	{d16-d17}, [r1]
   186e8:	add	r1, r5, #16
   186ec:	vst1.64	{d16-d17}, [r1]
   186f0:	mov	r1, #100	; 0x64
   186f4:	vst1.64	{d16-d17}, [r5], r1
   186f8:	str	r0, [r5]
   186fc:	mov	r0, #10
   18700:	sub	sp, fp, #16
   18704:	pop	{r4, r5, r6, sl, fp, pc}
   18708:	ldr	r0, [r4, #80]	; 0x50
   1870c:	and	r0, r0, #61440	; 0xf000
   18710:	cmp	r0, #40960	; 0xa000
   18714:	beq	1877c <__assert_fail@plt+0x68b4>
   18718:	cmp	r0, #32768	; 0x8000
   1871c:	beq	18770 <__assert_fail@plt+0x68a8>
   18720:	cmp	r0, #16384	; 0x4000
   18724:	bne	18788 <__assert_fail@plt+0x68c0>
   18728:	ldrb	r1, [r4, #168]	; 0xa8
   1872c:	mov	r0, #1
   18730:	cmp	r1, #46	; 0x2e
   18734:	bne	1878c <__assert_fail@plt+0x68c4>
   18738:	ldrb	r1, [r4, #169]	; 0xa9
   1873c:	cmp	r1, #0
   18740:	beq	18758 <__assert_fail@plt+0x6890>
   18744:	cmp	r1, #46	; 0x2e
   18748:	bne	1878c <__assert_fail@plt+0x68c4>
   1874c:	ldrb	r1, [r4, #170]	; 0xaa
   18750:	cmp	r1, #0
   18754:	bne	1878c <__assert_fail@plt+0x68c4>
   18758:	ldr	r1, [r4, #48]	; 0x30
   1875c:	mov	r0, #5
   18760:	cmp	r1, #0
   18764:	movweq	r0, #1
   18768:	sub	sp, fp, #16
   1876c:	pop	{r4, r5, r6, sl, fp, pc}
   18770:	mov	r0, #8
   18774:	sub	sp, fp, #16
   18778:	pop	{r4, r5, r6, sl, fp, pc}
   1877c:	mov	r0, #12
   18780:	sub	sp, fp, #16
   18784:	pop	{r4, r5, r6, sl, fp, pc}
   18788:	mov	r0, #3
   1878c:	sub	sp, fp, #16
   18790:	pop	{r4, r5, r6, sl, fp, pc}
   18794:	push	{r4, r5, r6, r7, fp, lr}
   18798:	add	fp, sp, #16
   1879c:	mov	r6, r0
   187a0:	ldr	r7, [r0, #44]	; 0x2c
   187a4:	ldr	r0, [r0, #40]	; 0x28
   187a8:	mov	r5, r2
   187ac:	mov	r4, r1
   187b0:	cmp	r0, r2
   187b4:	bcs	187ec <__assert_fail@plt+0x6924>
   187b8:	add	r1, r5, #40	; 0x28
   187bc:	cmn	r1, #-1073741823	; 0xc0000001
   187c0:	str	r1, [r6, #40]	; 0x28
   187c4:	bhi	18890 <__assert_fail@plt+0x69c8>
   187c8:	ldr	r0, [r6, #8]
   187cc:	lsl	r1, r1, #2
   187d0:	bl	38480 <__assert_fail@plt+0x265b8>
   187d4:	cmp	r0, #0
   187d8:	beq	18890 <__assert_fail@plt+0x69c8>
   187dc:	str	r0, [r6, #8]
   187e0:	cmp	r4, #0
   187e4:	bne	187f8 <__assert_fail@plt+0x6930>
   187e8:	b	1880c <__assert_fail@plt+0x6944>
   187ec:	ldr	r0, [r6, #8]
   187f0:	cmp	r4, #0
   187f4:	beq	1880c <__assert_fail@plt+0x6944>
   187f8:	str	r4, [r0], #4
   187fc:	ldr	r4, [r4, #8]
   18800:	cmp	r4, #0
   18804:	bne	187f8 <__assert_fail@plt+0x6930>
   18808:	ldr	r0, [r6, #8]
   1880c:	mov	r1, r5
   18810:	mov	r2, #4
   18814:	mov	r3, r7
   18818:	bl	11e2c <qsort@plt>
   1881c:	ldr	r0, [r6, #8]
   18820:	cmp	r5, #1
   18824:	ldr	r4, [r0]
   18828:	mov	r1, r4
   1882c:	beq	188b4 <__assert_fail@plt+0x69ec>
   18830:	mov	r2, r0
   18834:	ldr	r1, [r2, #4]!
   18838:	str	r1, [r4, #8]
   1883c:	subs	r1, r5, #2
   18840:	beq	188ac <__assert_fail@plt+0x69e4>
   18844:	tst	r1, #1
   18848:	beq	18860 <__assert_fail@plt+0x6998>
   1884c:	ldr	r1, [r0, #8]!
   18850:	ldr	r2, [r0, #-4]
   18854:	str	r1, [r2, #8]
   18858:	sub	r1, r5, #3
   1885c:	mov	r2, r0
   18860:	cmp	r5, #3
   18864:	beq	188b0 <__assert_fail@plt+0x69e8>
   18868:	mov	r0, r2
   1886c:	ldm	r2, {r3, r7}
   18870:	subs	r1, r1, #2
   18874:	str	r7, [r3, #8]
   18878:	ldr	r3, [r0, #8]!
   1887c:	ldr	r2, [r2, #4]
   18880:	str	r3, [r2, #8]
   18884:	mov	r2, r0
   18888:	bne	1886c <__assert_fail@plt+0x69a4>
   1888c:	b	188b0 <__assert_fail@plt+0x69e8>
   18890:	ldr	r0, [r6, #8]
   18894:	bl	17c10 <__assert_fail@plt+0x5d48>
   18898:	mov	r0, #0
   1889c:	str	r0, [r6, #40]	; 0x28
   188a0:	str	r0, [r6, #8]
   188a4:	mov	r0, r4
   188a8:	pop	{r4, r5, r6, r7, fp, pc}
   188ac:	mov	r0, r2
   188b0:	ldr	r1, [r0]
   188b4:	mov	r0, #0
   188b8:	str	r0, [r1, #8]
   188bc:	mov	r0, r4
   188c0:	pop	{r4, r5, r6, r7, fp, pc}
   188c4:	push	{r4, r5, r6, r7, fp, lr}
   188c8:	add	fp, sp, #16
   188cc:	mov	r4, r0
   188d0:	ldr	r0, [r0]
   188d4:	cmp	r0, #0
   188d8:	beq	18918 <__assert_fail@plt+0x6a50>
   188dc:	ldr	r1, [r0, #48]	; 0x30
   188e0:	cmp	r1, #0
   188e4:	bmi	1890c <__assert_fail@plt+0x6a44>
   188e8:	ldr	r5, [r0, #8]
   188ec:	cmp	r5, #0
   188f0:	ldreq	r5, [r0, #4]
   188f4:	bl	17c10 <__assert_fail@plt+0x5d48>
   188f8:	ldr	r0, [r5, #48]	; 0x30
   188fc:	cmn	r0, #1
   18900:	mov	r0, r5
   18904:	bgt	188e8 <__assert_fail@plt+0x6a20>
   18908:	b	18910 <__assert_fail@plt+0x6a48>
   1890c:	mov	r5, r0
   18910:	mov	r0, r5
   18914:	bl	17c10 <__assert_fail@plt+0x5d48>
   18918:	ldr	r5, [r4, #4]
   1891c:	cmp	r5, #0
   18920:	bne	1893c <__assert_fail@plt+0x6a74>
   18924:	b	18954 <__assert_fail@plt+0x6a8c>
   18928:	mov	r0, r5
   1892c:	bl	17c10 <__assert_fail@plt+0x5d48>
   18930:	cmp	r6, #0
   18934:	mov	r5, r6
   18938:	beq	18954 <__assert_fail@plt+0x6a8c>
   1893c:	ldrd	r6, [r5, #8]
   18940:	cmp	r7, #0
   18944:	beq	18928 <__assert_fail@plt+0x6a60>
   18948:	mov	r0, r7
   1894c:	bl	11ebc <closedir@plt>
   18950:	b	18928 <__assert_fail@plt+0x6a60>
   18954:	ldr	r0, [r4, #8]
   18958:	bl	17c10 <__assert_fail@plt+0x5d48>
   1895c:	ldr	r0, [r4, #24]
   18960:	bl	17c10 <__assert_fail@plt+0x5d48>
   18964:	ldr	r0, [r4, #48]	; 0x30
   18968:	tst	r0, #512	; 0x200
   1896c:	bne	189a8 <__assert_fail@plt+0x6ae0>
   18970:	mov	r6, #0
   18974:	tst	r0, #4
   18978:	bne	189cc <__assert_fail@plt+0x6b04>
   1897c:	ldr	r0, [r4, #28]
   18980:	bl	11e08 <fchdir@plt>
   18984:	cmp	r0, #0
   18988:	beq	18a74 <__assert_fail@plt+0x6bac>
   1898c:	bl	11cdc <__errno_location@plt>
   18990:	ldr	r6, [r0]
   18994:	ldr	r0, [r4, #28]
   18998:	bl	11ea4 <close@plt>
   1899c:	cmp	r6, #0
   189a0:	beq	189bc <__assert_fail@plt+0x6af4>
   189a4:	b	189cc <__assert_fail@plt+0x6b04>
   189a8:	ldr	r0, [r4, #32]
   189ac:	mov	r6, #0
   189b0:	cmp	r0, #0
   189b4:	bmi	189cc <__assert_fail@plt+0x6b04>
   189b8:	bl	11ea4 <close@plt>
   189bc:	cmp	r0, #0
   189c0:	beq	189cc <__assert_fail@plt+0x6b04>
   189c4:	bl	11cdc <__errno_location@plt>
   189c8:	ldr	r6, [r0]
   189cc:	add	r5, r4, #60	; 0x3c
   189d0:	mov	r0, r5
   189d4:	bl	1cc8c <__assert_fail@plt+0xadc4>
   189d8:	cmp	r0, #0
   189dc:	bne	18a04 <__assert_fail@plt+0x6b3c>
   189e0:	mov	r0, r5
   189e4:	bl	1cce0 <__assert_fail@plt+0xae18>
   189e8:	cmp	r0, #0
   189ec:	bmi	189d0 <__assert_fail@plt+0x6b08>
   189f0:	bl	11ea4 <close@plt>
   189f4:	mov	r0, r5
   189f8:	bl	1cc8c <__assert_fail@plt+0xadc4>
   189fc:	cmp	r0, #0
   18a00:	beq	189e0 <__assert_fail@plt+0x6b18>
   18a04:	ldr	r0, [r4, #52]	; 0x34
   18a08:	cmp	r0, #0
   18a0c:	beq	18a14 <__assert_fail@plt+0x6b4c>
   18a10:	bl	1af70 <__assert_fail@plt+0x90a8>
   18a14:	ldrh	r0, [r4, #48]	; 0x30
   18a18:	movw	r1, #258	; 0x102
   18a1c:	tst	r0, r1
   18a20:	beq	18a54 <__assert_fail@plt+0x6b8c>
   18a24:	ldr	r0, [r4, #56]	; 0x38
   18a28:	cmp	r0, #0
   18a2c:	beq	18a34 <__assert_fail@plt+0x6b6c>
   18a30:	bl	1af70 <__assert_fail@plt+0x90a8>
   18a34:	mov	r0, r4
   18a38:	bl	17c10 <__assert_fail@plt+0x5d48>
   18a3c:	cmp	r6, #0
   18a40:	beq	18a6c <__assert_fail@plt+0x6ba4>
   18a44:	bl	11cdc <__errno_location@plt>
   18a48:	str	r6, [r0]
   18a4c:	mvn	r0, #0
   18a50:	pop	{r4, r5, r6, r7, fp, pc}
   18a54:	ldr	r0, [r4, #56]	; 0x38
   18a58:	bl	17c10 <__assert_fail@plt+0x5d48>
   18a5c:	mov	r0, r4
   18a60:	bl	17c10 <__assert_fail@plt+0x5d48>
   18a64:	cmp	r6, #0
   18a68:	bne	18a44 <__assert_fail@plt+0x6b7c>
   18a6c:	mov	r0, #0
   18a70:	pop	{r4, r5, r6, r7, fp, pc}
   18a74:	mov	r6, #0
   18a78:	ldr	r0, [r4, #28]
   18a7c:	bl	11ea4 <close@plt>
   18a80:	cmp	r6, #0
   18a84:	beq	189bc <__assert_fail@plt+0x6af4>
   18a88:	b	189cc <__assert_fail@plt+0x6b04>
   18a8c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   18a90:	add	fp, sp, #24
   18a94:	sub	sp, sp, #8
   18a98:	ldr	r6, [r0]
   18a9c:	mov	r5, #0
   18aa0:	cmp	r6, #0
   18aa4:	beq	1924c <__assert_fail@plt+0x7384>
   18aa8:	mov	r4, r0
   18aac:	ldr	r0, [r0, #48]	; 0x30
   18ab0:	tst	r0, #8192	; 0x2000
   18ab4:	bne	1924c <__assert_fail@plt+0x7384>
   18ab8:	ldrh	r1, [r6, #60]	; 0x3c
   18abc:	mov	r2, #3
   18ac0:	strh	r2, [r6, #60]	; 0x3c
   18ac4:	cmp	r1, #1
   18ac8:	beq	18b68 <__assert_fail@plt+0x6ca0>
   18acc:	cmp	r1, #2
   18ad0:	bne	18b8c <__assert_fail@plt+0x6cc4>
   18ad4:	ldrh	r2, [r6, #56]	; 0x38
   18ad8:	bic	r3, r2, #1
   18adc:	cmp	r3, #12
   18ae0:	bne	18b90 <__assert_fail@plt+0x6cc8>
   18ae4:	mov	r0, r4
   18ae8:	mov	r1, r6
   18aec:	mov	r2, #1
   18af0:	bl	185fc <__assert_fail@plt+0x6734>
   18af4:	cmp	r0, #1
   18af8:	strh	r0, [r6, #56]	; 0x38
   18afc:	bne	19160 <__assert_fail@plt+0x7298>
   18b00:	ldr	r0, [r4, #48]	; 0x30
   18b04:	tst	r0, #4
   18b08:	bne	19160 <__assert_fail@plt+0x7298>
   18b0c:	mov	r1, #32768	; 0x8000
   18b10:	tst	r0, #512	; 0x200
   18b14:	and	r1, r1, r0, lsl #11
   18b18:	orr	r1, r1, #18688	; 0x4900
   18b1c:	orr	r2, r1, #524288	; 0x80000
   18b20:	bne	18e94 <__assert_fail@plt+0x6fcc>
   18b24:	movw	r0, #46824	; 0xb6e8
   18b28:	mov	r1, r2
   18b2c:	movt	r0, #3
   18b30:	bl	39548 <__assert_fail@plt+0x27680>
   18b34:	cmn	r0, #1
   18b38:	str	r0, [r6, #36]	; 0x24
   18b3c:	bgt	18eb0 <__assert_fail@plt+0x6fe8>
   18b40:	bl	11cdc <__errno_location@plt>
   18b44:	ldr	r0, [r0]
   18b48:	mov	r1, #7
   18b4c:	strh	r1, [r6, #56]	; 0x38
   18b50:	str	r0, [r6, #32]
   18b54:	str	r6, [r4]
   18b58:	ldrh	r0, [r6, #56]	; 0x38
   18b5c:	cmp	r0, #11
   18b60:	beq	19170 <__assert_fail@plt+0x72a8>
   18b64:	b	191a4 <__assert_fail@plt+0x72dc>
   18b68:	mov	r0, r4
   18b6c:	mov	r1, r6
   18b70:	mov	r2, #0
   18b74:	bl	185fc <__assert_fail@plt+0x6734>
   18b78:	strh	r0, [r6, #56]	; 0x38
   18b7c:	mov	r5, r6
   18b80:	mov	r0, r5
   18b84:	sub	sp, fp, #24
   18b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18b8c:	ldrh	r2, [r6, #56]	; 0x38
   18b90:	cmp	r2, #1
   18b94:	bne	18bf0 <__assert_fail@plt+0x6d28>
   18b98:	cmp	r1, #4
   18b9c:	bne	18ca4 <__assert_fail@plt+0x6ddc>
   18ba0:	ldrb	r0, [r6, #58]	; 0x3a
   18ba4:	tst	r0, #2
   18ba8:	beq	18bb4 <__assert_fail@plt+0x6cec>
   18bac:	ldr	r0, [r6, #36]	; 0x24
   18bb0:	bl	11ea4 <close@plt>
   18bb4:	ldr	r5, [r4, #4]
   18bb8:	cmp	r5, #0
   18bbc:	bne	18bd8 <__assert_fail@plt+0x6d10>
   18bc0:	b	18d3c <__assert_fail@plt+0x6e74>
   18bc4:	mov	r0, r5
   18bc8:	bl	17c10 <__assert_fail@plt+0x5d48>
   18bcc:	cmp	r8, #0
   18bd0:	mov	r5, r8
   18bd4:	beq	18d34 <__assert_fail@plt+0x6e6c>
   18bd8:	ldrd	r8, [r5, #8]
   18bdc:	cmp	r9, #0
   18be0:	beq	18bc4 <__assert_fail@plt+0x6cfc>
   18be4:	mov	r0, r9
   18be8:	bl	11ebc <closedir@plt>
   18bec:	b	18bc4 <__assert_fail@plt+0x6cfc>
   18bf0:	mov	r7, r6
   18bf4:	ldr	r6, [r7, #8]
   18bf8:	cmp	r6, #0
   18bfc:	beq	18d60 <__assert_fail@plt+0x6e98>
   18c00:	mov	r0, r7
   18c04:	str	r6, [r4]
   18c08:	bl	17c10 <__assert_fail@plt+0x5d48>
   18c0c:	ldr	r0, [r6, #48]	; 0x30
   18c10:	cmp	r0, #0
   18c14:	beq	18da8 <__assert_fail@plt+0x6ee0>
   18c18:	ldrh	r0, [r6, #60]	; 0x3c
   18c1c:	mov	r7, r6
   18c20:	cmp	r0, #4
   18c24:	beq	18bf4 <__assert_fail@plt+0x6d2c>
   18c28:	cmp	r0, #2
   18c2c:	bne	19124 <__assert_fail@plt+0x725c>
   18c30:	mov	r0, r4
   18c34:	mov	r1, r6
   18c38:	mov	r2, #1
   18c3c:	bl	185fc <__assert_fail@plt+0x6734>
   18c40:	cmp	r0, #1
   18c44:	strh	r0, [r6, #56]	; 0x38
   18c48:	bne	1911c <__assert_fail@plt+0x7254>
   18c4c:	ldr	r0, [r4, #48]	; 0x30
   18c50:	tst	r0, #4
   18c54:	bne	1911c <__assert_fail@plt+0x7254>
   18c58:	mov	r1, #32768	; 0x8000
   18c5c:	tst	r0, #512	; 0x200
   18c60:	and	r1, r1, r0, lsl #11
   18c64:	orr	r1, r1, #18688	; 0x4900
   18c68:	orr	r2, r1, #524288	; 0x80000
   18c6c:	bne	190f4 <__assert_fail@plt+0x722c>
   18c70:	movw	r0, #46824	; 0xb6e8
   18c74:	mov	r1, r2
   18c78:	movt	r0, #3
   18c7c:	bl	39548 <__assert_fail@plt+0x27680>
   18c80:	cmn	r0, #1
   18c84:	str	r0, [r6, #36]	; 0x24
   18c88:	bgt	19110 <__assert_fail@plt+0x7248>
   18c8c:	bl	11cdc <__errno_location@plt>
   18c90:	ldr	r0, [r0]
   18c94:	mov	r1, #7
   18c98:	strh	r1, [r6, #56]	; 0x38
   18c9c:	str	r0, [r6, #32]
   18ca0:	b	1911c <__assert_fail@plt+0x7254>
   18ca4:	tst	r0, #64	; 0x40
   18ca8:	beq	18cc4 <__assert_fail@plt+0x6dfc>
   18cac:	ldrd	r2, [r4, #16]
   18cb0:	ldrd	r8, [r6, #64]	; 0x40
   18cb4:	eor	r1, r9, r3
   18cb8:	eor	r2, r8, r2
   18cbc:	orrs	r1, r2, r1
   18cc0:	bne	18ba0 <__assert_fail@plt+0x6cd8>
   18cc4:	ldr	r7, [r4, #4]
   18cc8:	cmp	r7, #0
   18ccc:	beq	18e40 <__assert_fail@plt+0x6f78>
   18cd0:	tst	r0, #4096	; 0x1000
   18cd4:	bne	18df8 <__assert_fail@plt+0x6f30>
   18cd8:	ldr	r3, [r6, #24]
   18cdc:	mov	r0, r4
   18ce0:	mov	r1, r6
   18ce4:	mvn	r2, #0
   18ce8:	bl	19408 <__assert_fail@plt+0x7540>
   18cec:	cmp	r0, #0
   18cf0:	beq	18e58 <__assert_fail@plt+0x6f90>
   18cf4:	bl	11cdc <__errno_location@plt>
   18cf8:	ldr	r0, [r0]
   18cfc:	str	r0, [r6, #32]
   18d00:	ldrh	r0, [r6, #58]	; 0x3a
   18d04:	orr	r0, r0, #1
   18d08:	strh	r0, [r6, #58]	; 0x3a
   18d0c:	ldr	r0, [r4, #4]
   18d10:	cmp	r0, #0
   18d14:	beq	18e58 <__assert_fail@plt+0x6f90>
   18d18:	ldmib	r0, {r1, r2}
   18d1c:	cmp	r2, #0
   18d20:	ldr	r1, [r1, #24]
   18d24:	str	r1, [r0, #24]
   18d28:	mov	r0, r2
   18d2c:	bne	18d18 <__assert_fail@plt+0x6e50>
   18d30:	b	18e58 <__assert_fail@plt+0x6f90>
   18d34:	mov	r0, #0
   18d38:	str	r0, [r4, #4]
   18d3c:	mov	r0, #6
   18d40:	strh	r0, [r6, #56]	; 0x38
   18d44:	mov	r0, r4
   18d48:	mov	r1, r6
   18d4c:	bl	1932c <__assert_fail@plt+0x7464>
   18d50:	mov	r5, r6
   18d54:	mov	r0, r5
   18d58:	sub	sp, fp, #24
   18d5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18d60:	ldr	r0, [r7, #4]
   18d64:	ldr	r1, [r0, #12]
   18d68:	cmp	r1, #0
   18d6c:	beq	18dd0 <__assert_fail@plt+0x6f08>
   18d70:	str	r0, [r4]
   18d74:	mov	r2, #0
   18d78:	ldr	r1, [r4, #24]
   18d7c:	ldr	r0, [r0, #40]	; 0x28
   18d80:	strb	r2, [r1, r0]
   18d84:	mov	r0, r4
   18d88:	mov	r1, #3
   18d8c:	bl	196b8 <__assert_fail@plt+0x77f0>
   18d90:	cmp	r0, #0
   18d94:	beq	18ed0 <__assert_fail@plt+0x7008>
   18d98:	mov	r6, r0
   18d9c:	mov	r0, r7
   18da0:	bl	17c10 <__assert_fail@plt+0x5d48>
   18da4:	b	19124 <__assert_fail@plt+0x725c>
   18da8:	mov	r0, r4
   18dac:	bl	1a250 <__assert_fail@plt+0x8388>
   18db0:	ldr	r1, [r4, #48]	; 0x30
   18db4:	cmp	r0, #0
   18db8:	beq	18dd8 <__assert_fail@plt+0x6f10>
   18dbc:	orr	r0, r1, #8192	; 0x2000
   18dc0:	str	r0, [r4, #48]	; 0x30
   18dc4:	mov	r0, r5
   18dc8:	sub	sp, fp, #24
   18dcc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18dd0:	mov	r5, r0
   18dd4:	b	18ee4 <__assert_fail@plt+0x701c>
   18dd8:	movw	r0, #258	; 0x102
   18ddc:	tst	r1, r0
   18de0:	beq	18f80 <__assert_fail@plt+0x70b8>
   18de4:	ldr	r0, [r4, #56]	; 0x38
   18de8:	cmp	r0, #0
   18dec:	beq	18f88 <__assert_fail@plt+0x70c0>
   18df0:	bl	1af70 <__assert_fail@plt+0x90a8>
   18df4:	b	18f88 <__assert_fail@plt+0x70c0>
   18df8:	bic	r0, r0, #4096	; 0x1000
   18dfc:	str	r0, [r4, #48]	; 0x30
   18e00:	ldrd	r8, [r7, #8]
   18e04:	cmp	r9, #0
   18e08:	bne	18e2c <__assert_fail@plt+0x6f64>
   18e0c:	mov	r0, r7
   18e10:	bl	17c10 <__assert_fail@plt+0x5d48>
   18e14:	cmp	r8, #0
   18e18:	mov	r7, r8
   18e1c:	beq	18e38 <__assert_fail@plt+0x6f70>
   18e20:	ldrd	r8, [r7, #8]
   18e24:	cmp	r9, #0
   18e28:	beq	18e0c <__assert_fail@plt+0x6f44>
   18e2c:	mov	r0, r9
   18e30:	bl	11ebc <closedir@plt>
   18e34:	b	18e0c <__assert_fail@plt+0x6f44>
   18e38:	mov	r0, #0
   18e3c:	str	r0, [r4, #4]
   18e40:	mov	r0, r4
   18e44:	mov	r1, #3
   18e48:	bl	196b8 <__assert_fail@plt+0x77f0>
   18e4c:	cmp	r0, #0
   18e50:	str	r0, [r4, #4]
   18e54:	beq	18e68 <__assert_fail@plt+0x6fa0>
   18e58:	ldr	r6, [r4, #4]
   18e5c:	mov	r0, #0
   18e60:	str	r0, [r4, #4]
   18e64:	b	19124 <__assert_fail@plt+0x725c>
   18e68:	ldrb	r0, [r4, #49]	; 0x31
   18e6c:	tst	r0, #32
   18e70:	bne	1924c <__assert_fail@plt+0x7384>
   18e74:	ldr	r0, [r6, #32]
   18e78:	cmp	r0, #0
   18e7c:	beq	18d44 <__assert_fail@plt+0x6e7c>
   18e80:	ldrh	r0, [r6, #56]	; 0x38
   18e84:	cmp	r0, #4
   18e88:	beq	18d44 <__assert_fail@plt+0x6e7c>
   18e8c:	mov	r0, #7
   18e90:	b	18d40 <__assert_fail@plt+0x6e78>
   18e94:	ldr	r0, [r4, #32]
   18e98:	movw	r1, #46824	; 0xb6e8
   18e9c:	movt	r1, #3
   18ea0:	bl	1e168 <__assert_fail@plt+0xc2a0>
   18ea4:	cmn	r0, #1
   18ea8:	str	r0, [r6, #36]	; 0x24
   18eac:	ble	18b40 <__assert_fail@plt+0x6c78>
   18eb0:	ldrh	r0, [r6, #58]	; 0x3a
   18eb4:	orr	r0, r0, #2
   18eb8:	strh	r0, [r6, #58]	; 0x3a
   18ebc:	str	r6, [r4]
   18ec0:	ldrh	r0, [r6, #56]	; 0x38
   18ec4:	cmp	r0, #11
   18ec8:	beq	19170 <__assert_fail@plt+0x72a8>
   18ecc:	b	191a4 <__assert_fail@plt+0x72dc>
   18ed0:	ldrb	r0, [r4, #49]	; 0x31
   18ed4:	mov	r5, #0
   18ed8:	tst	r0, #32
   18edc:	bne	1924c <__assert_fail@plt+0x7384>
   18ee0:	ldr	r5, [r7, #4]
   18ee4:	mov	r0, r7
   18ee8:	str	r5, [r4]
   18eec:	bl	17c10 <__assert_fail@plt+0x5d48>
   18ef0:	ldr	r0, [r5, #48]	; 0x30
   18ef4:	cmn	r0, #1
   18ef8:	beq	18f5c <__assert_fail@plt+0x7094>
   18efc:	ldrh	r0, [r5, #56]	; 0x38
   18f00:	cmp	r0, #11
   18f04:	beq	19328 <__assert_fail@plt+0x7460>
   18f08:	ldr	r0, [r5, #40]	; 0x28
   18f0c:	ldr	r1, [r4, #24]
   18f10:	mov	r2, #0
   18f14:	strb	r2, [r1, r0]
   18f18:	ldr	r0, [r5, #48]	; 0x30
   18f1c:	cmp	r0, #0
   18f20:	beq	19078 <__assert_fail@plt+0x71b0>
   18f24:	ldrh	r0, [r5, #58]	; 0x3a
   18f28:	tst	r0, #2
   18f2c:	bne	190b0 <__assert_fail@plt+0x71e8>
   18f30:	tst	r0, #1
   18f34:	bne	192e0 <__assert_fail@plt+0x7418>
   18f38:	ldr	r1, [r5, #4]
   18f3c:	movw	r3, #46823	; 0xb6e7
   18f40:	mov	r0, r4
   18f44:	mvn	r2, #0
   18f48:	movt	r3, #3
   18f4c:	bl	19408 <__assert_fail@plt+0x7540>
   18f50:	cmp	r0, #0
   18f54:	bne	19088 <__assert_fail@plt+0x71c0>
   18f58:	b	192e0 <__assert_fail@plt+0x7418>
   18f5c:	mov	r0, r5
   18f60:	bl	17c10 <__assert_fail@plt+0x5d48>
   18f64:	bl	11cdc <__errno_location@plt>
   18f68:	mov	r5, #0
   18f6c:	str	r5, [r0]
   18f70:	str	r5, [r4]
   18f74:	mov	r0, r5
   18f78:	sub	sp, fp, #24
   18f7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18f80:	ldr	r0, [r4, #56]	; 0x38
   18f84:	bl	17c10 <__assert_fail@plt+0x5d48>
   18f88:	ldr	r1, [r6, #52]	; 0x34
   18f8c:	add	r7, r6, #168	; 0xa8
   18f90:	str	r1, [r6, #40]	; 0x28
   18f94:	add	r2, r1, #1
   18f98:	mov	r1, r7
   18f9c:	ldr	r0, [r4, #24]
   18fa0:	bl	11a78 <memmove@plt>
   18fa4:	mov	r0, r7
   18fa8:	mov	r1, #47	; 0x2f
   18fac:	bl	11d9c <strrchr@plt>
   18fb0:	cmp	r0, #0
   18fb4:	beq	18ff0 <__assert_fail@plt+0x7128>
   18fb8:	cmp	r0, r7
   18fbc:	bne	18fcc <__assert_fail@plt+0x7104>
   18fc0:	ldrb	r1, [r6, #169]	; 0xa9
   18fc4:	cmp	r1, #0
   18fc8:	beq	18ff0 <__assert_fail@plt+0x7128>
   18fcc:	add	r8, r0, #1
   18fd0:	mov	r0, r8
   18fd4:	bl	11cac <strlen@plt>
   18fd8:	mov	r9, r0
   18fdc:	add	r2, r0, #1
   18fe0:	mov	r0, r7
   18fe4:	mov	r1, r8
   18fe8:	bl	11a78 <memmove@plt>
   18fec:	str	r9, [r6, #52]	; 0x34
   18ff0:	ldr	r0, [r4, #24]
   18ff4:	movw	r1, #258	; 0x102
   18ff8:	str	r0, [r6, #24]
   18ffc:	str	r0, [r6, #28]
   19000:	ldrh	r0, [r4, #48]	; 0x30
   19004:	tst	r0, r1
   19008:	beq	1904c <__assert_fail@plt+0x7184>
   1900c:	movw	r0, #31760	; 0x7c10
   19010:	movw	r2, #42308	; 0xa544
   19014:	movw	r3, #42340	; 0xa564
   19018:	mov	r1, #0
   1901c:	movt	r0, #1
   19020:	movt	r2, #1
   19024:	movt	r3, #1
   19028:	str	r0, [sp]
   1902c:	mov	r0, #31
   19030:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   19034:	str	r0, [r4, #56]	; 0x38
   19038:	str	r6, [r4]
   1903c:	ldrh	r0, [r6, #56]	; 0x38
   19040:	cmp	r0, #11
   19044:	beq	19170 <__assert_fail@plt+0x72a8>
   19048:	b	191a4 <__assert_fail@plt+0x72dc>
   1904c:	mov	r0, #32
   19050:	bl	38450 <__assert_fail@plt+0x26588>
   19054:	cmp	r0, #0
   19058:	str	r0, [r4, #56]	; 0x38
   1905c:	beq	19160 <__assert_fail@plt+0x7298>
   19060:	bl	391b4 <__assert_fail@plt+0x272ec>
   19064:	str	r6, [r4]
   19068:	ldrh	r0, [r6, #56]	; 0x38
   1906c:	cmp	r0, #11
   19070:	beq	19170 <__assert_fail@plt+0x72a8>
   19074:	b	191a4 <__assert_fail@plt+0x72dc>
   19078:	mov	r0, r4
   1907c:	bl	1a250 <__assert_fail@plt+0x8388>
   19080:	cmp	r0, #0
   19084:	beq	192e0 <__assert_fail@plt+0x7418>
   19088:	bl	11cdc <__errno_location@plt>
   1908c:	ldr	r0, [r0]
   19090:	str	r0, [r5, #32]
   19094:	ldr	r0, [r4, #48]	; 0x30
   19098:	orr	r0, r0, #8192	; 0x2000
   1909c:	str	r0, [r4, #48]	; 0x30
   190a0:	ldrh	r0, [r5, #56]	; 0x38
   190a4:	cmp	r0, #2
   190a8:	bne	192ec <__assert_fail@plt+0x7424>
   190ac:	b	19310 <__assert_fail@plt+0x7448>
   190b0:	ldr	r0, [r4, #48]	; 0x30
   190b4:	tst	r0, #4
   190b8:	bne	192d8 <__assert_fail@plt+0x7410>
   190bc:	ldr	r6, [r5, #36]	; 0x24
   190c0:	tst	r0, #512	; 0x200
   190c4:	bne	192ac <__assert_fail@plt+0x73e4>
   190c8:	mov	r0, r6
   190cc:	bl	11e08 <fchdir@plt>
   190d0:	cmp	r0, #0
   190d4:	beq	192d8 <__assert_fail@plt+0x7410>
   190d8:	bl	11cdc <__errno_location@plt>
   190dc:	ldr	r0, [r0]
   190e0:	str	r0, [r5, #32]
   190e4:	ldr	r0, [r4, #48]	; 0x30
   190e8:	orr	r0, r0, #8192	; 0x2000
   190ec:	str	r0, [r4, #48]	; 0x30
   190f0:	b	192d8 <__assert_fail@plt+0x7410>
   190f4:	ldr	r0, [r4, #32]
   190f8:	movw	r1, #46824	; 0xb6e8
   190fc:	movt	r1, #3
   19100:	bl	1e168 <__assert_fail@plt+0xc2a0>
   19104:	cmn	r0, #1
   19108:	str	r0, [r6, #36]	; 0x24
   1910c:	ble	18c8c <__assert_fail@plt+0x6dc4>
   19110:	ldrh	r0, [r6, #58]	; 0x3a
   19114:	orr	r0, r0, #2
   19118:	strh	r0, [r6, #58]	; 0x3a
   1911c:	mov	r0, #3
   19120:	strh	r0, [r6, #60]	; 0x3c
   19124:	ldr	r0, [r6, #4]
   19128:	ldr	r1, [r0, #28]
   1912c:	ldr	r0, [r0, #40]	; 0x28
   19130:	sub	r2, r0, #1
   19134:	ldrb	r1, [r1, r2]
   19138:	cmp	r1, #47	; 0x2f
   1913c:	ldr	r1, [r4, #24]
   19140:	moveq	r0, r2
   19144:	mov	r2, #47	; 0x2f
   19148:	strb	r2, [r1, r0]!
   1914c:	ldr	r2, [r6, #52]	; 0x34
   19150:	add	r0, r1, #1
   19154:	add	r1, r6, #168	; 0xa8
   19158:	add	r2, r2, #1
   1915c:	bl	11a78 <memmove@plt>
   19160:	str	r6, [r4]
   19164:	ldrh	r0, [r6, #56]	; 0x38
   19168:	cmp	r0, #11
   1916c:	bne	191a4 <__assert_fail@plt+0x72dc>
   19170:	add	r0, r6, #112	; 0x70
   19174:	ldrd	r0, [r0]
   19178:	eor	r2, r0, #1
   1917c:	orrs	r2, r2, r1
   19180:	beq	19258 <__assert_fail@plt+0x7390>
   19184:	eor	r0, r0, #2
   19188:	orrs	r0, r0, r1
   1918c:	bne	19328 <__assert_fail@plt+0x7460>
   19190:	mov	r0, r4
   19194:	mov	r1, r6
   19198:	mov	r2, #0
   1919c:	bl	185fc <__assert_fail@plt+0x6734>
   191a0:	strh	r0, [r6, #56]	; 0x38
   191a4:	cmp	r0, #1
   191a8:	bne	19248 <__assert_fail@plt+0x7380>
   191ac:	ldr	r0, [r6, #48]	; 0x30
   191b0:	add	r8, r6, #64	; 0x40
   191b4:	cmp	r0, #0
   191b8:	bne	191c4 <__assert_fail@plt+0x72fc>
   191bc:	ldrd	r0, [r8]
   191c0:	strd	r0, [r4, #16]
   191c4:	ldrh	r0, [r4, #48]	; 0x30
   191c8:	movw	r1, #258	; 0x102
   191cc:	tst	r0, r1
   191d0:	beq	19268 <__assert_fail@plt+0x73a0>
   191d4:	mov	r0, #24
   191d8:	bl	38450 <__assert_fail@plt+0x26588>
   191dc:	cmp	r0, #0
   191e0:	beq	19294 <__assert_fail@plt+0x73cc>
   191e4:	ldrd	r2, [r8]
   191e8:	mov	r7, r0
   191ec:	add	r0, r6, #160	; 0xa0
   191f0:	stm	r7, {r2, r3}
   191f4:	add	r2, r7, #8
   191f8:	ldrd	r0, [r0]
   191fc:	stm	r2, {r0, r1, r6}
   19200:	mov	r1, r7
   19204:	ldr	r0, [r4, #56]	; 0x38
   19208:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   1920c:	cmp	r0, r7
   19210:	beq	19258 <__assert_fail@plt+0x7390>
   19214:	mov	r4, r0
   19218:	mov	r0, r7
   1921c:	bl	17c10 <__assert_fail@plt+0x5d48>
   19220:	cmp	r4, #0
   19224:	beq	19294 <__assert_fail@plt+0x73cc>
   19228:	ldr	r0, [r4, #16]
   1922c:	mov	r1, #2
   19230:	mov	r5, r6
   19234:	strh	r1, [r6, #56]	; 0x38
   19238:	str	r0, [r6]
   1923c:	mov	r0, r5
   19240:	sub	sp, fp, #24
   19244:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19248:	mov	r5, r6
   1924c:	mov	r0, r5
   19250:	sub	sp, fp, #24
   19254:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19258:	mov	r5, r6
   1925c:	mov	r0, r5
   19260:	sub	sp, fp, #24
   19264:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19268:	ldr	r0, [r4, #56]	; 0x38
   1926c:	mov	r1, r8
   19270:	bl	391d0 <__assert_fail@plt+0x27308>
   19274:	cmp	r0, #0
   19278:	mov	r5, r6
   1927c:	movne	r0, #2
   19280:	strhne	r0, [r6, #56]	; 0x38
   19284:	strne	r6, [r6]
   19288:	mov	r0, r5
   1928c:	sub	sp, fp, #24
   19290:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19294:	bl	11cdc <__errno_location@plt>
   19298:	mov	r1, #12
   1929c:	str	r1, [r0]
   192a0:	mov	r0, r5
   192a4:	sub	sp, fp, #24
   192a8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   192ac:	ldr	r1, [r4, #32]
   192b0:	cmp	r1, r6
   192b4:	bne	192c0 <__assert_fail@plt+0x73f8>
   192b8:	cmn	r1, #100	; 0x64
   192bc:	bne	19328 <__assert_fail@plt+0x7460>
   192c0:	add	r0, r4, #60	; 0x3c
   192c4:	bl	1cc94 <__assert_fail@plt+0xadcc>
   192c8:	cmp	r0, #0
   192cc:	bmi	192d4 <__assert_fail@plt+0x740c>
   192d0:	bl	11ea4 <close@plt>
   192d4:	str	r6, [r4, #32]
   192d8:	ldr	r0, [r5, #36]	; 0x24
   192dc:	bl	11ea4 <close@plt>
   192e0:	ldrh	r0, [r5, #56]	; 0x38
   192e4:	cmp	r0, #2
   192e8:	beq	19310 <__assert_fail@plt+0x7448>
   192ec:	ldr	r0, [r5, #32]
   192f0:	mov	r1, #7
   192f4:	cmp	r0, #0
   192f8:	movweq	r1, #6
   192fc:	strh	r1, [r5, #56]	; 0x38
   19300:	bne	19310 <__assert_fail@plt+0x7448>
   19304:	mov	r0, r4
   19308:	mov	r1, r5
   1930c:	bl	1932c <__assert_fail@plt+0x7464>
   19310:	ldrb	r0, [r4, #49]	; 0x31
   19314:	tst	r0, #32
   19318:	movne	r5, #0
   1931c:	mov	r0, r5
   19320:	sub	sp, fp, #24
   19324:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19328:	bl	11e8c <abort@plt>
   1932c:	push	{r4, r5, r7, sl, fp, lr}
   19330:	add	fp, sp, #16
   19334:	sub	sp, sp, #24
   19338:	ldrh	r2, [r0, #48]	; 0x30
   1933c:	movw	r3, #258	; 0x102
   19340:	add	lr, r1, #64	; 0x40
   19344:	add	r4, r1, #160	; 0xa0
   19348:	tst	r2, r3
   1934c:	beq	19384 <__assert_fail@plt+0x74bc>
   19350:	ldrd	r2, [lr]
   19354:	mov	r1, sp
   19358:	stm	sp, {r2, r3}
   1935c:	ldrd	r2, [r4]
   19360:	str	r3, [sp, #12]
   19364:	str	r2, [sp, #8]
   19368:	ldr	r0, [r0, #56]	; 0x38
   1936c:	bl	1b8f8 <__assert_fail@plt+0x9a30>
   19370:	cmp	r0, #0
   19374:	beq	19404 <__assert_fail@plt+0x753c>
   19378:	bl	17c10 <__assert_fail@plt+0x5d48>
   1937c:	sub	sp, fp, #16
   19380:	pop	{r4, r5, r7, sl, fp, pc}
   19384:	ldr	r1, [r1, #4]
   19388:	cmp	r1, #0
   1938c:	beq	193fc <__assert_fail@plt+0x7534>
   19390:	ldr	r2, [r1, #48]	; 0x30
   19394:	cmp	r2, #0
   19398:	bmi	193fc <__assert_fail@plt+0x7534>
   1939c:	ldr	ip, [r0, #56]	; 0x38
   193a0:	ldrd	r2, [ip, #16]
   193a4:	orrs	r2, r2, r3
   193a8:	beq	19404 <__assert_fail@plt+0x753c>
   193ac:	ldrd	r2, [r4]
   193b0:	ldrd	r4, [ip]
   193b4:	eor	r3, r5, r3
   193b8:	eor	r2, r4, r2
   193bc:	orrs	r2, r2, r3
   193c0:	bne	193fc <__assert_fail@plt+0x7534>
   193c4:	add	r3, ip, #8
   193c8:	ldm	lr, {r2, r5}
   193cc:	ldm	r3, {r4, r7}
   193d0:	eor	r7, r7, r5
   193d4:	eor	r2, r4, r2
   193d8:	orrs	r2, r2, r7
   193dc:	bne	193fc <__assert_fail@plt+0x7534>
   193e0:	add	r2, r1, #64	; 0x40
   193e4:	add	r1, r1, #160	; 0xa0
   193e8:	ldm	r2, {r2, r5}
   193ec:	stm	r3, {r2, r5}
   193f0:	ldr	r0, [r0, #56]	; 0x38
   193f4:	ldrd	r2, [r1]
   193f8:	strd	r2, [r0]
   193fc:	sub	sp, fp, #16
   19400:	pop	{r4, r5, r7, sl, fp, pc}
   19404:	bl	11e8c <abort@plt>
   19408:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1940c:	add	fp, sp, #28
   19410:	sub	sp, sp, #108	; 0x6c
   19414:	mov	r7, r3
   19418:	mov	r4, r2
   1941c:	mov	r8, r1
   19420:	mov	sl, r0
   19424:	cmp	r3, #0
   19428:	beq	194b4 <__assert_fail@plt+0x75ec>
   1942c:	movw	r1, #46823	; 0xb6e7
   19430:	mov	r0, r7
   19434:	movt	r1, #3
   19438:	bl	11a3c <strcmp@plt>
   1943c:	cmp	r0, #0
   19440:	mov	r6, r0
   19444:	movwne	r6, #1
   19448:	ldr	r0, [sl, #48]	; 0x30
   1944c:	tst	r0, #4
   19450:	bne	194c4 <__assert_fail@plt+0x75fc>
   19454:	cmn	r4, #1
   19458:	mov	r1, #0
   1945c:	mov	r9, #0
   19460:	movwgt	r1, #1
   19464:	orrs	r1, r1, r6
   19468:	bne	194ec <__assert_fail@plt+0x7624>
   1946c:	ands	r0, r0, #512	; 0x200
   19470:	beq	194ec <__assert_fail@plt+0x7624>
   19474:	add	r4, sl, #60	; 0x3c
   19478:	mov	r0, r4
   1947c:	bl	1cc8c <__assert_fail@plt+0xadc4>
   19480:	cmp	r0, #0
   19484:	bne	194f4 <__assert_fail@plt+0x762c>
   19488:	mov	r0, r4
   1948c:	bl	1cce0 <__assert_fail@plt+0xae18>
   19490:	cmn	r0, #1
   19494:	ble	194f4 <__assert_fail@plt+0x762c>
   19498:	mov	r4, r0
   1949c:	mov	r9, #0
   194a0:	mov	r7, #0
   194a4:	ldr	r5, [sl, #48]	; 0x30
   194a8:	tst	r5, #2
   194ac:	beq	19538 <__assert_fail@plt+0x7670>
   194b0:	b	19580 <__assert_fail@plt+0x76b8>
   194b4:	mov	r6, #1
   194b8:	ldr	r0, [sl, #48]	; 0x30
   194bc:	tst	r0, #4
   194c0:	beq	19454 <__assert_fail@plt+0x758c>
   194c4:	mov	r5, #0
   194c8:	cmp	r4, #0
   194cc:	bmi	19574 <__assert_fail@plt+0x76ac>
   194d0:	ands	r0, r0, #512	; 0x200
   194d4:	beq	19574 <__assert_fail@plt+0x76ac>
   194d8:	mov	r0, r4
   194dc:	bl	11ea4 <close@plt>
   194e0:	mov	r0, r5
   194e4:	sub	sp, fp, #28
   194e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   194ec:	cmn	r4, #1
   194f0:	bgt	1952c <__assert_fail@plt+0x7664>
   194f4:	ldr	r0, [sl, #48]	; 0x30
   194f8:	mov	r1, #32768	; 0x8000
   194fc:	and	r1, r1, r0, lsl #11
   19500:	tst	r0, #512	; 0x200
   19504:	orr	r1, r1, #18688	; 0x4900
   19508:	orr	r2, r1, #524288	; 0x80000
   1950c:	bne	195a8 <__assert_fail@plt+0x76e0>
   19510:	mov	r0, r7
   19514:	mov	r1, r2
   19518:	bl	39548 <__assert_fail@plt+0x27680>
   1951c:	mov	r4, r0
   19520:	mov	r9, #1
   19524:	cmp	r0, #0
   19528:	bmi	195c4 <__assert_fail@plt+0x76fc>
   1952c:	ldr	r5, [sl, #48]	; 0x30
   19530:	tst	r5, #2
   19534:	bne	19580 <__assert_fail@plt+0x76b8>
   19538:	cmp	r7, #0
   1953c:	beq	19558 <__assert_fail@plt+0x7690>
   19540:	movw	r1, #46823	; 0xb6e7
   19544:	mov	r0, r7
   19548:	movt	r1, #3
   1954c:	bl	11a3c <strcmp@plt>
   19550:	cmp	r0, #0
   19554:	beq	19580 <__assert_fail@plt+0x76b8>
   19558:	tst	r5, #512	; 0x200
   1955c:	bne	1961c <__assert_fail@plt+0x7754>
   19560:	mov	r0, r4
   19564:	bl	11e08 <fchdir@plt>
   19568:	mov	r5, r0
   1956c:	cmp	r9, #0
   19570:	bne	19664 <__assert_fail@plt+0x779c>
   19574:	mov	r0, r5
   19578:	sub	sp, fp, #28
   1957c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19580:	mov	r2, sp
   19584:	mov	r0, #3
   19588:	mov	r1, r4
   1958c:	bl	11b74 <__fxstat64@plt>
   19590:	cmp	r0, #0
   19594:	beq	195d4 <__assert_fail@plt+0x770c>
   19598:	mvn	r5, #0
   1959c:	cmp	r9, #0
   195a0:	beq	19574 <__assert_fail@plt+0x76ac>
   195a4:	b	19664 <__assert_fail@plt+0x779c>
   195a8:	ldr	r0, [sl, #32]
   195ac:	mov	r1, r7
   195b0:	bl	1e168 <__assert_fail@plt+0xc2a0>
   195b4:	mov	r4, r0
   195b8:	mov	r9, #1
   195bc:	cmp	r0, #0
   195c0:	bpl	1952c <__assert_fail@plt+0x7664>
   195c4:	mvn	r5, #0
   195c8:	mov	r0, r5
   195cc:	sub	sp, fp, #28
   195d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   195d4:	add	r0, r8, #64	; 0x40
   195d8:	ldm	sp, {r2, r3}
   195dc:	ldrd	r0, [r0]
   195e0:	eor	r1, r1, r3
   195e4:	eor	r0, r0, r2
   195e8:	orrs	r0, r0, r1
   195ec:	bne	1964c <__assert_fail@plt+0x7784>
   195f0:	add	r0, r8, #160	; 0xa0
   195f4:	ldr	r2, [sp, #96]	; 0x60
   195f8:	ldr	r3, [sp, #100]	; 0x64
   195fc:	ldrd	r0, [r0]
   19600:	eor	r1, r1, r3
   19604:	eor	r0, r0, r2
   19608:	orrs	r0, r0, r1
   1960c:	bne	1964c <__assert_fail@plt+0x7784>
   19610:	ldr	r5, [sl, #48]	; 0x30
   19614:	tst	r5, #512	; 0x200
   19618:	beq	19560 <__assert_fail@plt+0x7698>
   1961c:	ldr	r1, [sl, #32]
   19620:	cmp	r1, r4
   19624:	bne	19630 <__assert_fail@plt+0x7768>
   19628:	cmn	r1, #100	; 0x64
   1962c:	bne	196b4 <__assert_fail@plt+0x77ec>
   19630:	cmp	r6, #0
   19634:	beq	19688 <__assert_fail@plt+0x77c0>
   19638:	add	r0, sl, #60	; 0x3c
   1963c:	bl	1cc94 <__assert_fail@plt+0xadcc>
   19640:	cmp	r0, #0
   19644:	bpl	1969c <__assert_fail@plt+0x77d4>
   19648:	b	196a0 <__assert_fail@plt+0x77d8>
   1964c:	bl	11cdc <__errno_location@plt>
   19650:	mov	r1, #2
   19654:	str	r1, [r0]
   19658:	mvn	r5, #0
   1965c:	cmp	r9, #0
   19660:	beq	19574 <__assert_fail@plt+0x76ac>
   19664:	bl	11cdc <__errno_location@plt>
   19668:	ldr	r7, [r0]
   1966c:	mov	r6, r0
   19670:	mov	r0, r4
   19674:	bl	11ea4 <close@plt>
   19678:	str	r7, [r6]
   1967c:	mov	r0, r5
   19680:	sub	sp, fp, #28
   19684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19688:	tst	r5, #4
   1968c:	bne	196a0 <__assert_fail@plt+0x77d8>
   19690:	cmp	r1, #0
   19694:	bmi	196a0 <__assert_fail@plt+0x77d8>
   19698:	mov	r0, r1
   1969c:	bl	11ea4 <close@plt>
   196a0:	str	r4, [sl, #32]
   196a4:	mov	r5, #0
   196a8:	mov	r0, r5
   196ac:	sub	sp, fp, #28
   196b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   196b4:	bl	11e8c <abort@plt>
   196b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   196bc:	add	fp, sp, #28
   196c0:	sub	sp, sp, #68	; 0x44
   196c4:	ldr	sl, [r0]
   196c8:	mov	r4, r1
   196cc:	mov	r5, r0
   196d0:	str	r0, [fp, #-44]	; 0xffffffd4
   196d4:	ldr	r6, [sl, #12]
   196d8:	cmp	r6, #0
   196dc:	beq	19724 <__assert_fail@plt+0x785c>
   196e0:	mov	r0, r6
   196e4:	bl	11dfc <dirfd@plt>
   196e8:	cmn	r0, #1
   196ec:	str	r0, [fp, #-32]	; 0xffffffe0
   196f0:	ble	19758 <__assert_fail@plt+0x7890>
   196f4:	mov	r1, r5
   196f8:	str	r6, [sp, #12]
   196fc:	str	r4, [sp, #4]
   19700:	mov	r7, #0
   19704:	ldr	r0, [r1, #44]!	; 0x2c
   19708:	str	r1, [sp, #20]
   1970c:	mvn	r1, #0
   19710:	cmp	r0, #0
   19714:	movweq	r1, #34464	; 0x86a0
   19718:	movteq	r1, #1
   1971c:	str	r1, [sp, #32]
   19720:	b	19a50 <__assert_fail@plt+0x7b88>
   19724:	ldr	r3, [r5, #48]	; 0x30
   19728:	mvn	r0, #99	; 0x63
   1972c:	mov	r2, #0
   19730:	and	r1, r3, #516	; 0x204
   19734:	cmp	r1, #512	; 0x200
   19738:	ldr	r1, [sl, #24]
   1973c:	ldreq	r0, [r5, #32]
   19740:	tst	r3, #16
   19744:	beq	19780 <__assert_fail@plt+0x78b8>
   19748:	tst	r3, #1
   1974c:	bne	19774 <__assert_fail@plt+0x78ac>
   19750:	mov	r2, #32768	; 0x8000
   19754:	b	19780 <__assert_fail@plt+0x78b8>
   19758:	ldr	r0, [sl, #12]
   1975c:	bl	11ebc <closedir@plt>
   19760:	mov	r6, #0
   19764:	str	r6, [sl, #12]
   19768:	cmp	r4, #3
   1976c:	beq	197c8 <__assert_fail@plt+0x7900>
   19770:	b	1a160 <__assert_fail@plt+0x8298>
   19774:	ldr	r3, [sl, #48]	; 0x30
   19778:	cmp	r3, #0
   1977c:	movne	r2, #32768	; 0x8000
   19780:	sub	r3, fp, #32
   19784:	bl	1e1a0 <__assert_fail@plt+0xc2d8>
   19788:	cmp	r0, #0
   1978c:	str	r0, [sl, #12]
   19790:	beq	197bc <__assert_fail@plt+0x78f4>
   19794:	ldrh	r0, [sl, #56]	; 0x38
   19798:	cmp	r0, #11
   1979c:	bne	197e8 <__assert_fail@plt+0x7920>
   197a0:	mov	r0, r5
   197a4:	mov	r1, sl
   197a8:	mov	r2, #0
   197ac:	bl	185fc <__assert_fail@plt+0x6734>
   197b0:	strh	r0, [sl, #56]	; 0x38
   197b4:	mov	r7, r5
   197b8:	b	198b4 <__assert_fail@plt+0x79ec>
   197bc:	mov	r6, #0
   197c0:	cmp	r4, #3
   197c4:	bne	1a160 <__assert_fail@plt+0x8298>
   197c8:	mov	r0, #4
   197cc:	strh	r0, [sl, #56]	; 0x38
   197d0:	bl	11cdc <__errno_location@plt>
   197d4:	ldr	r0, [r0]
   197d8:	str	r0, [sl, #32]
   197dc:	mov	r0, r6
   197e0:	sub	sp, fp, #28
   197e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   197e8:	ldrb	r0, [r5, #49]	; 0x31
   197ec:	mov	r7, r5
   197f0:	tst	r0, #1
   197f4:	beq	198b4 <__assert_fail@plt+0x79ec>
   197f8:	mov	r0, r7
   197fc:	mov	r1, sl
   19800:	add	r8, sl, #64	; 0x40
   19804:	bl	1932c <__assert_fail@plt+0x7464>
   19808:	mov	r0, r7
   1980c:	mov	r1, sl
   19810:	mov	r2, #0
   19814:	bl	185fc <__assert_fail@plt+0x6734>
   19818:	ldrh	r0, [r7, #48]	; 0x30
   1981c:	movw	r1, #258	; 0x102
   19820:	tst	r0, r1
   19824:	beq	19898 <__assert_fail@plt+0x79d0>
   19828:	mov	r0, #24
   1982c:	bl	38450 <__assert_fail@plt+0x26588>
   19830:	cmp	r0, #0
   19834:	beq	1995c <__assert_fail@plt+0x7a94>
   19838:	ldrd	r2, [r8]
   1983c:	mov	r5, r0
   19840:	add	r0, sl, #160	; 0xa0
   19844:	ldr	r7, [fp, #-44]	; 0xffffffd4
   19848:	stm	r5, {r2, r3}
   1984c:	add	r2, r5, #8
   19850:	ldrd	r0, [r0]
   19854:	stm	r2, {r0, r1, sl}
   19858:	mov	r1, r5
   1985c:	ldr	r0, [r7, #56]	; 0x38
   19860:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   19864:	cmp	r0, r5
   19868:	beq	198b4 <__assert_fail@plt+0x79ec>
   1986c:	mov	r8, r0
   19870:	mov	r0, r5
   19874:	bl	17c10 <__assert_fail@plt+0x5d48>
   19878:	cmp	r8, #0
   1987c:	beq	1995c <__assert_fail@plt+0x7a94>
   19880:	ldr	r7, [fp, #-44]	; 0xffffffd4
   19884:	ldr	r0, [r8, #16]
   19888:	mov	r1, #2
   1988c:	strh	r1, [sl, #56]	; 0x38
   19890:	str	r0, [sl]
   19894:	b	198b4 <__assert_fail@plt+0x79ec>
   19898:	ldr	r0, [r7, #56]	; 0x38
   1989c:	mov	r1, r8
   198a0:	bl	391d0 <__assert_fail@plt+0x27308>
   198a4:	cmp	r0, #0
   198a8:	movne	r0, #2
   198ac:	strhne	r0, [sl, #56]	; 0x38
   198b0:	strne	sl, [sl]
   198b4:	mov	r1, r7
   198b8:	mov	r5, r7
   198bc:	str	r4, [sp, #4]
   198c0:	str	r6, [sp, #12]
   198c4:	ldr	r0, [r1, #44]!	; 0x2c
   198c8:	str	r1, [sp, #20]
   198cc:	mvn	r1, #0
   198d0:	cmp	r0, #0
   198d4:	movweq	r1, #34464	; 0x86a0
   198d8:	movteq	r1, #1
   198dc:	cmp	r4, #2
   198e0:	str	r1, [sp, #32]
   198e4:	bne	19900 <__assert_fail@plt+0x7a38>
   198e8:	mov	r7, #1
   198ec:	cmp	r4, #3
   198f0:	bne	19a50 <__assert_fail@plt+0x7b88>
   198f4:	sub	r0, r4, #3
   198f8:	mov	r5, #0
   198fc:	b	19994 <__assert_fail@plt+0x7acc>
   19900:	ldr	r0, [r5, #48]	; 0x30
   19904:	and	r0, r0, #56	; 0x38
   19908:	cmp	r0, #24
   1990c:	bne	1998c <__assert_fail@plt+0x7ac4>
   19910:	ldr	r0, [sl, #84]	; 0x54
   19914:	cmp	r0, #2
   19918:	bne	1998c <__assert_fail@plt+0x7ac4>
   1991c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19920:	mov	r0, sl
   19924:	bl	1a5e4 <__assert_fail@plt+0x871c>
   19928:	movw	r1, #26984	; 0x6968
   1992c:	cmp	r0, r1
   19930:	ble	19978 <__assert_fail@plt+0x7ab0>
   19934:	movw	r1, #26985	; 0x6969
   19938:	cmp	r0, r1
   1993c:	movwne	r1, #16719	; 0x414f
   19940:	movtne	r1, #21318	; 0x5346
   19944:	cmpne	r0, r1
   19948:	beq	1998c <__assert_fail@plt+0x7ac4>
   1994c:	movw	r1, #40864	; 0x9fa0
   19950:	cmp	r0, r1
   19954:	beq	1998c <__assert_fail@plt+0x7ac4>
   19958:	b	198e8 <__assert_fail@plt+0x7a20>
   1995c:	bl	11cdc <__errno_location@plt>
   19960:	mov	r1, #12
   19964:	mov	r6, #0
   19968:	str	r1, [r0]
   1996c:	mov	r0, r6
   19970:	sub	sp, fp, #28
   19974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19978:	movw	r1, #19778	; 0x4d42
   1997c:	movt	r1, #65363	; 0xff53
   19980:	cmp	r0, r1
   19984:	cmpne	r0, #0
   19988:	bne	198e8 <__assert_fail@plt+0x7a20>
   1998c:	sub	r0, r4, #3
   19990:	mov	r5, #1
   19994:	clz	r0, r0
   19998:	lsr	r7, r0, #5
   1999c:	ldr	r0, [fp, #-44]	; 0xffffffd4
   199a0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   199a4:	ldrb	r0, [r0, #49]	; 0x31
   199a8:	tst	r0, #2
   199ac:	beq	199c8 <__assert_fail@plt+0x7b00>
   199b0:	mov	r0, r2
   199b4:	movw	r1, #1030	; 0x406
   199b8:	mov	r2, #3
   199bc:	bl	39368 <__assert_fail@plt+0x274a0>
   199c0:	mov	r2, r0
   199c4:	str	r0, [fp, #-32]	; 0xffffffe0
   199c8:	cmp	r2, #0
   199cc:	bmi	199e8 <__assert_fail@plt+0x7b20>
   199d0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   199d4:	mov	r1, sl
   199d8:	mov	r3, #0
   199dc:	bl	19408 <__assert_fail@plt+0x7540>
   199e0:	cmp	r0, #0
   199e4:	beq	19a48 <__assert_fail@plt+0x7b80>
   199e8:	and	r0, r7, r5
   199ec:	cmp	r0, #1
   199f0:	bne	19a00 <__assert_fail@plt+0x7b38>
   199f4:	bl	11cdc <__errno_location@plt>
   199f8:	ldr	r0, [r0]
   199fc:	str	r0, [sl, #32]
   19a00:	ldrh	r0, [sl, #58]	; 0x3a
   19a04:	orr	r0, r0, #1
   19a08:	strh	r0, [sl, #58]	; 0x3a
   19a0c:	ldr	r0, [sl, #12]
   19a10:	bl	11ebc <closedir@plt>
   19a14:	ldr	r5, [fp, #-44]	; 0xffffffd4
   19a18:	mov	r4, #0
   19a1c:	str	r4, [sl, #12]
   19a20:	ldrb	r0, [r5, #49]	; 0x31
   19a24:	tst	r0, #2
   19a28:	beq	19a3c <__assert_fail@plt+0x7b74>
   19a2c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   19a30:	cmp	r0, #0
   19a34:	bmi	19a3c <__assert_fail@plt+0x7b74>
   19a38:	bl	11ea4 <close@plt>
   19a3c:	mov	r7, #1
   19a40:	str	r4, [sl, #12]
   19a44:	b	19a50 <__assert_fail@plt+0x7b88>
   19a48:	ldr	r5, [fp, #-44]	; 0xffffffd4
   19a4c:	mov	r7, #0
   19a50:	ldr	r0, [sl, #40]	; 0x28
   19a54:	ldr	r1, [sl, #28]
   19a58:	mov	r9, #0
   19a5c:	sub	r2, r0, #1
   19a60:	ldrb	r1, [r1, r2]
   19a64:	cmp	r1, #47	; 0x2f
   19a68:	ldrb	r1, [r5, #48]	; 0x30
   19a6c:	moveq	r0, r2
   19a70:	tst	r1, #4
   19a74:	mov	r1, #0
   19a78:	str	r1, [sp, #40]	; 0x28
   19a7c:	beq	19a94 <__assert_fail@plt+0x7bcc>
   19a80:	ldr	r1, [r5, #24]
   19a84:	mov	r2, #47	; 0x2f
   19a88:	strb	r2, [r1, r0]!
   19a8c:	add	r1, r1, #1
   19a90:	str	r1, [sp, #40]	; 0x28
   19a94:	ldr	r6, [sl, #12]
   19a98:	add	r1, r0, #1
   19a9c:	str	r1, [fp, #-40]	; 0xffffffd8
   19aa0:	cmp	r6, #0
   19aa4:	beq	19e6c <__assert_fail@plt+0x7fa4>
   19aa8:	ldr	r0, [sl, #48]	; 0x30
   19aac:	str	r7, [sp]
   19ab0:	mov	r7, #0
   19ab4:	add	r0, r0, #1
   19ab8:	str	r0, [sp, #24]
   19abc:	ldr	r0, [r5, #36]	; 0x24
   19ac0:	sub	r0, r0, r1
   19ac4:	str	r0, [sp, #44]	; 0x2c
   19ac8:	bl	11cdc <__errno_location@plt>
   19acc:	str	r0, [sp, #36]	; 0x24
   19ad0:	mov	r0, #0
   19ad4:	mov	r9, #0
   19ad8:	mov	r4, #0
   19adc:	str	sl, [sp, #28]
   19ae0:	str	r0, [sp, #48]	; 0x30
   19ae4:	mov	r0, #0
   19ae8:	str	r0, [sp, #8]
   19aec:	mov	r0, #0
   19af0:	str	r0, [sp, #16]
   19af4:	ldr	r0, [sp, #36]	; 0x24
   19af8:	str	r7, [r0]
   19afc:	mov	r0, r6
   19b00:	bl	11dd8 <readdir64@plt>
   19b04:	cmp	r0, #0
   19b08:	beq	19ee8 <__assert_fail@plt+0x8020>
   19b0c:	mov	r8, r0
   19b10:	ldrb	r0, [r5, #48]	; 0x30
   19b14:	tst	r0, #32
   19b18:	bne	19b48 <__assert_fail@plt+0x7c80>
   19b1c:	ldrb	r0, [r8, #19]
   19b20:	cmp	r0, #46	; 0x2e
   19b24:	bne	19b48 <__assert_fail@plt+0x7c80>
   19b28:	ldrb	r0, [r8, #20]
   19b2c:	cmp	r0, #0
   19b30:	beq	19e04 <__assert_fail@plt+0x7f3c>
   19b34:	cmp	r0, #46	; 0x2e
   19b38:	bne	19b48 <__assert_fail@plt+0x7c80>
   19b3c:	ldrb	r0, [r8, #21]
   19b40:	cmp	r0, #0
   19b44:	beq	19e04 <__assert_fail@plt+0x7f3c>
   19b48:	str	r4, [fp, #-36]	; 0xffffffdc
   19b4c:	add	r4, r8, #19
   19b50:	mov	r0, r4
   19b54:	bl	11cac <strlen@plt>
   19b58:	mov	r5, r0
   19b5c:	add	r0, r0, #176	; 0xb0
   19b60:	bic	r0, r0, #7
   19b64:	bl	38450 <__assert_fail@plt+0x26588>
   19b68:	mov	r6, r0
   19b6c:	cmp	r0, #0
   19b70:	beq	1a1cc <__assert_fail@plt+0x8304>
   19b74:	add	sl, r6, #168	; 0xa8
   19b78:	mov	r1, r4
   19b7c:	mov	r2, r5
   19b80:	mov	r0, sl
   19b84:	bl	11ab4 <memcpy@plt>
   19b88:	ldr	r2, [fp, #-44]	; 0xffffffd4
   19b8c:	strb	r7, [sl, r5]
   19b90:	str	r5, [r6, #52]	; 0x34
   19b94:	mov	r0, #196608	; 0x30000
   19b98:	ldr	r1, [sp, #44]	; 0x2c
   19b9c:	str	r2, [r6, #44]	; 0x2c
   19ba0:	cmp	r5, r1
   19ba4:	ldr	r4, [r2, #24]
   19ba8:	str	r7, [r6, #12]
   19bac:	str	r7, [r6, #16]
   19bb0:	str	r7, [r6, #20]
   19bb4:	str	r0, [r6, #58]	; 0x3a
   19bb8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   19bbc:	str	r4, [r6, #28]
   19bc0:	str	r7, [r6, #32]
   19bc4:	add	r7, r5, r0
   19bc8:	bcs	19bdc <__assert_fail@plt+0x7d14>
   19bcc:	mov	r5, r2
   19bd0:	cmp	r7, r0
   19bd4:	bcs	19c54 <__assert_fail@plt+0x7d8c>
   19bd8:	b	1a0ac <__assert_fail@plt+0x81e4>
   19bdc:	ldr	r1, [r2, #36]	; 0x24
   19be0:	movw	r0, #257	; 0x101
   19be4:	mov	r5, r2
   19be8:	add	r0, r7, r0
   19bec:	adds	r1, r0, r1
   19bf0:	bcs	1a198 <__assert_fail@plt+0x82d0>
   19bf4:	mov	r0, r4
   19bf8:	str	r1, [r5, #36]	; 0x24
   19bfc:	bl	38480 <__assert_fail@plt+0x265b8>
   19c00:	cmp	r0, #0
   19c04:	beq	1a1b8 <__assert_fail@plt+0x82f0>
   19c08:	cmp	r0, r4
   19c0c:	str	r0, [r5, #24]
   19c10:	beq	19c38 <__assert_fail@plt+0x7d70>
   19c14:	ldrb	r1, [r5, #48]	; 0x30
   19c18:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19c1c:	tst	r1, #4
   19c20:	ldr	r1, [sp, #40]	; 0x28
   19c24:	addne	r1, r0, r2
   19c28:	mov	r0, #1
   19c2c:	str	r1, [sp, #40]	; 0x28
   19c30:	str	r0, [sp, #16]
   19c34:	b	19c3c <__assert_fail@plt+0x7d74>
   19c38:	ldr	r2, [fp, #-40]	; 0xffffffd8
   19c3c:	ldr	r0, [r5, #36]	; 0x24
   19c40:	sub	r0, r0, r2
   19c44:	str	r0, [sp, #44]	; 0x2c
   19c48:	mov	r0, r2
   19c4c:	cmp	r7, r0
   19c50:	bcc	1a0ac <__assert_fail@plt+0x81e4>
   19c54:	ldr	r0, [sp, #24]
   19c58:	add	r4, r6, #112	; 0x70
   19c5c:	str	r0, [r6, #48]	; 0x30
   19c60:	ldr	r0, [r5]
   19c64:	str	r7, [r6, #40]	; 0x28
   19c68:	str	r0, [r6, #4]
   19c6c:	ldrd	r0, [r8]
   19c70:	strd	r0, [r4, #48]	; 0x30
   19c74:	ldrb	r0, [r5, #48]	; 0x30
   19c78:	tst	r0, #4
   19c7c:	bne	19c88 <__assert_fail@plt+0x7dc0>
   19c80:	str	sl, [r6, #24]
   19c84:	b	19ca4 <__assert_fail@plt+0x7ddc>
   19c88:	ldr	r0, [r6, #28]
   19c8c:	ldr	r1, [r6, #52]	; 0x34
   19c90:	str	r0, [r6, #24]
   19c94:	ldr	r0, [sp, #40]	; 0x28
   19c98:	add	r2, r1, #1
   19c9c:	mov	r1, sl
   19ca0:	bl	11a78 <memmove@plt>
   19ca4:	ldr	r0, [r5, #44]	; 0x2c
   19ca8:	ldr	r2, [r5, #48]	; 0x30
   19cac:	ldr	sl, [sp, #28]
   19cb0:	mov	r7, #0
   19cb4:	cmp	r0, #0
   19cb8:	beq	19d60 <__assert_fail@plt+0x7e98>
   19cbc:	ands	r0, r2, #1024	; 0x400
   19cc0:	bne	19d60 <__assert_fail@plt+0x7e98>
   19cc4:	mov	r0, r5
   19cc8:	mov	r1, r6
   19ccc:	mov	r2, #0
   19cd0:	bl	185fc <__assert_fail@plt+0x6734>
   19cd4:	strh	r0, [r6, #56]	; 0x38
   19cd8:	ldr	r4, [fp, #-36]	; 0xffffffdc
   19cdc:	cmp	r9, #0
   19ce0:	str	r7, [r6, #8]
   19ce4:	beq	19de0 <__assert_fail@plt+0x7f18>
   19ce8:	ldr	r0, [sp, #48]	; 0x30
   19cec:	str	r6, [r0, #8]
   19cf0:	movw	r0, #10000	; 0x2710
   19cf4:	cmp	r4, r0
   19cf8:	bne	19df0 <__assert_fail@plt+0x7f28>
   19cfc:	ldr	r0, [sp, #20]
   19d00:	ldr	r0, [r0]
   19d04:	cmp	r0, #0
   19d08:	bne	19df0 <__assert_fail@plt+0x7f28>
   19d0c:	ldr	r1, [fp, #-32]	; 0xffffffe0
   19d10:	mov	r0, sl
   19d14:	bl	1a5e4 <__assert_fail@plt+0x871c>
   19d18:	mov	r1, #0
   19d1c:	str	r1, [sp, #8]
   19d20:	movw	r1, #19778	; 0x4d42
   19d24:	movt	r1, #65363	; 0xff53
   19d28:	cmp	r0, r1
   19d2c:	movwne	r1, #26985	; 0x6969
   19d30:	cmpne	r0, r1
   19d34:	beq	19df0 <__assert_fail@plt+0x7f28>
   19d38:	movw	r1, #6548	; 0x1994
   19d3c:	movt	r1, #258	; 0x102
   19d40:	cmp	r0, r1
   19d44:	movne	r0, #1
   19d48:	strne	r0, [sp, #8]
   19d4c:	ldr	r0, [sp, #32]
   19d50:	add	r4, r4, #1
   19d54:	cmp	r0, r4
   19d58:	bhi	19e00 <__assert_fail@plt+0x7f38>
   19d5c:	b	19e10 <__assert_fail@plt+0x7f48>
   19d60:	ldrb	r3, [r8, #18]
   19d64:	mov	r0, #0
   19d68:	tst	r2, #8
   19d6c:	mov	r1, #0
   19d70:	beq	19d94 <__assert_fail@plt+0x7ecc>
   19d74:	orr	r1, r3, #4
   19d78:	cmp	r1, #4
   19d7c:	mov	r1, #0
   19d80:	beq	19d94 <__assert_fail@plt+0x7ecc>
   19d84:	eor	r1, r3, #10
   19d88:	and	r2, r2, #16
   19d8c:	orrs	r1, r2, r1
   19d90:	movwne	r1, #1
   19d94:	mov	r2, #11
   19d98:	strh	r2, [r6, #56]	; 0x38
   19d9c:	sub	r2, r3, #1
   19da0:	uxtb	r3, r2
   19da4:	cmp	r3, #11
   19da8:	bhi	19dbc <__assert_fail@plt+0x7ef4>
   19dac:	sxtb	r0, r2
   19db0:	movw	r2, #46828	; 0xb6ec
   19db4:	movt	r2, #3
   19db8:	ldr	r0, [r2, r0, lsl #2]
   19dbc:	cmp	r1, #0
   19dc0:	str	r0, [r6, #80]	; 0x50
   19dc4:	mov	r0, #2
   19dc8:	movwne	r0, #1
   19dcc:	stm	r4, {r0, r7}
   19dd0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   19dd4:	cmp	r9, #0
   19dd8:	str	r7, [r6, #8]
   19ddc:	bne	19ce8 <__assert_fail@plt+0x7e20>
   19de0:	mov	r9, r6
   19de4:	movw	r0, #10000	; 0x2710
   19de8:	cmp	r4, r0
   19dec:	beq	19cfc <__assert_fail@plt+0x7e34>
   19df0:	ldr	r0, [sp, #32]
   19df4:	add	r4, r4, #1
   19df8:	cmp	r0, r4
   19dfc:	bls	19e10 <__assert_fail@plt+0x7f48>
   19e00:	str	r6, [sp, #48]	; 0x30
   19e04:	ldr	r6, [sl, #12]
   19e08:	cmp	r6, #0
   19e0c:	bne	19af4 <__assert_fail@plt+0x7c2c>
   19e10:	ldr	r0, [sp, #16]
   19e14:	ldr	r7, [sp]
   19e18:	ldr	r6, [sp, #8]
   19e1c:	tst	r0, #1
   19e20:	beq	19f3c <__assert_fail@plt+0x8074>
   19e24:	ldr	r1, [r5, #4]
   19e28:	ldr	r0, [r5, #24]
   19e2c:	cmp	r1, #0
   19e30:	bne	19e48 <__assert_fail@plt+0x7f80>
   19e34:	b	19e84 <__assert_fail@plt+0x7fbc>
   19e38:	str	r0, [r1, #28]
   19e3c:	ldr	r1, [r1, #8]
   19e40:	cmp	r1, #0
   19e44:	beq	19e84 <__assert_fail@plt+0x7fbc>
   19e48:	ldr	r2, [r1, #24]
   19e4c:	add	r3, r1, #168	; 0xa8
   19e50:	cmp	r2, r3
   19e54:	beq	19e38 <__assert_fail@plt+0x7f70>
   19e58:	ldr	r3, [r1, #28]
   19e5c:	sub	r2, r2, r3
   19e60:	add	r2, r0, r2
   19e64:	str	r2, [r1, #24]
   19e68:	b	19e38 <__assert_fail@plt+0x7f70>
   19e6c:	mov	r4, #0
   19e70:	mov	r6, #0
   19e74:	ldrb	r0, [r5, #48]	; 0x30
   19e78:	tst	r0, #4
   19e7c:	bne	19f48 <__assert_fail@plt+0x8080>
   19e80:	b	19f70 <__assert_fail@plt+0x80a8>
   19e84:	ldr	r1, [r9, #48]	; 0x30
   19e88:	cmp	r1, #0
   19e8c:	bmi	19f3c <__assert_fail@plt+0x8074>
   19e90:	mov	r1, r9
   19e94:	ldr	r2, [r1, #24]
   19e98:	add	r3, r1, #168	; 0xa8
   19e9c:	cmp	r2, r3
   19ea0:	bne	19ed4 <__assert_fail@plt+0x800c>
   19ea4:	str	r0, [r1, #28]
   19ea8:	ldr	r2, [r1, #8]
   19eac:	cmp	r2, #0
   19eb0:	ldreq	r2, [r1, #4]
   19eb4:	ldr	r1, [r2, #48]	; 0x30
   19eb8:	cmn	r1, #1
   19ebc:	mov	r1, r2
   19ec0:	ble	19f3c <__assert_fail@plt+0x8074>
   19ec4:	ldr	r2, [r1, #24]
   19ec8:	add	r3, r1, #168	; 0xa8
   19ecc:	cmp	r2, r3
   19ed0:	beq	19ea4 <__assert_fail@plt+0x7fdc>
   19ed4:	ldr	r3, [r1, #28]
   19ed8:	sub	r2, r2, r3
   19edc:	add	r2, r0, r2
   19ee0:	str	r2, [r1, #24]
   19ee4:	b	19ea4 <__assert_fail@plt+0x7fdc>
   19ee8:	ldr	r0, [sp, #36]	; 0x24
   19eec:	ldr	r0, [r0]
   19ef0:	cmp	r0, #0
   19ef4:	beq	19f10 <__assert_fail@plt+0x8048>
   19ef8:	str	r0, [sl, #32]
   19efc:	ldr	r0, [sp, #12]
   19f00:	orrs	r0, r0, r4
   19f04:	mov	r0, #4
   19f08:	movwne	r0, #7
   19f0c:	strh	r0, [sl, #56]	; 0x38
   19f10:	ldr	r0, [sl, #12]
   19f14:	ldr	r6, [sp, #8]
   19f18:	cmp	r0, #0
   19f1c:	beq	19f2c <__assert_fail@plt+0x8064>
   19f20:	bl	11ebc <closedir@plt>
   19f24:	mov	r0, #0
   19f28:	str	r0, [sl, #12]
   19f2c:	ldr	r0, [sp, #16]
   19f30:	ldr	r7, [sp]
   19f34:	tst	r0, #1
   19f38:	bne	19e24 <__assert_fail@plt+0x7f5c>
   19f3c:	ldrb	r0, [r5, #48]	; 0x30
   19f40:	tst	r0, #4
   19f44:	beq	19f70 <__assert_fail@plt+0x80a8>
   19f48:	ldr	r2, [sp, #40]	; 0x28
   19f4c:	ldr	r0, [r5, #36]	; 0x24
   19f50:	ldr	r3, [fp, #-40]	; 0xffffffd8
   19f54:	cmp	r3, r0
   19f58:	sub	r1, r2, #1
   19f5c:	mov	r0, #0
   19f60:	moveq	r2, r1
   19f64:	cmp	r4, #0
   19f68:	moveq	r2, r1
   19f6c:	strb	r0, [r2]
   19f70:	ldr	r0, [sp, #12]
   19f74:	cmp	r0, #0
   19f78:	movwne	r0, #1
   19f7c:	orrs	r0, r0, r7
   19f80:	beq	19fe8 <__assert_fail@plt+0x8120>
   19f84:	cmp	r4, #0
   19f88:	bne	1a028 <__assert_fail@plt+0x8160>
   19f8c:	ldr	r0, [sp, #4]
   19f90:	cmp	r0, #3
   19f94:	bne	19fac <__assert_fail@plt+0x80e4>
   19f98:	ldrh	r0, [sl, #56]	; 0x38
   19f9c:	cmp	r0, #4
   19fa0:	cmpne	r0, #7
   19fa4:	movne	r0, #6
   19fa8:	strhne	r0, [sl, #56]	; 0x38
   19fac:	mov	r6, #0
   19fb0:	cmp	r9, #0
   19fb4:	bne	19fd0 <__assert_fail@plt+0x8108>
   19fb8:	b	1a160 <__assert_fail@plt+0x8298>
   19fbc:	mov	r0, r9
   19fc0:	bl	17c10 <__assert_fail@plt+0x5d48>
   19fc4:	cmp	r4, #0
   19fc8:	mov	r9, r4
   19fcc:	beq	1a160 <__assert_fail@plt+0x8298>
   19fd0:	ldrd	r4, [r9, #8]
   19fd4:	cmp	r5, #0
   19fd8:	beq	19fbc <__assert_fail@plt+0x80f4>
   19fdc:	mov	r0, r5
   19fe0:	bl	11ebc <closedir@plt>
   19fe4:	b	19fbc <__assert_fail@plt+0x80f4>
   19fe8:	ldr	r0, [sp, #4]
   19fec:	cmp	r0, #1
   19ff0:	cmpne	r4, #0
   19ff4:	bne	1a028 <__assert_fail@plt+0x8160>
   19ff8:	ldr	r0, [sl, #48]	; 0x30
   19ffc:	cmp	r0, #0
   1a000:	beq	1a130 <__assert_fail@plt+0x8268>
   1a004:	ldr	r1, [sl, #4]
   1a008:	movw	r3, #46823	; 0xb6e7
   1a00c:	mov	r0, r5
   1a010:	mvn	r2, #0
   1a014:	movt	r3, #3
   1a018:	bl	19408 <__assert_fail@plt+0x7540>
   1a01c:	cmp	r0, #0
   1a020:	bne	1a140 <__assert_fail@plt+0x8278>
   1a024:	b	19f84 <__assert_fail@plt+0x80bc>
   1a028:	tst	r6, #1
   1a02c:	beq	1a064 <__assert_fail@plt+0x819c>
   1a030:	movw	r0, #42412	; 0xa5ac
   1a034:	mov	r1, r9
   1a038:	mov	r2, r4
   1a03c:	movt	r0, #1
   1a040:	str	r0, [r5, #44]	; 0x2c
   1a044:	mov	r0, r5
   1a048:	bl	18794 <__assert_fail@plt+0x68cc>
   1a04c:	mov	r6, r0
   1a050:	mov	r0, #0
   1a054:	str	r0, [r5, #44]	; 0x2c
   1a058:	mov	r0, r6
   1a05c:	sub	sp, fp, #28
   1a060:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a064:	cmp	r4, #2
   1a068:	bcc	1a09c <__assert_fail@plt+0x81d4>
   1a06c:	ldr	r0, [sp, #20]
   1a070:	ldr	r0, [r0]
   1a074:	cmp	r0, #0
   1a078:	beq	1a09c <__assert_fail@plt+0x81d4>
   1a07c:	mov	r0, r5
   1a080:	mov	r1, r9
   1a084:	mov	r2, r4
   1a088:	bl	18794 <__assert_fail@plt+0x68cc>
   1a08c:	mov	r6, r0
   1a090:	mov	r0, r6
   1a094:	sub	sp, fp, #28
   1a098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a09c:	mov	r6, r9
   1a0a0:	mov	r0, r6
   1a0a4:	sub	sp, fp, #28
   1a0a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0ac:	mov	r0, r6
   1a0b0:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a0b4:	ldr	r7, [sp, #28]
   1a0b8:	cmp	r9, #0
   1a0bc:	bne	1a0d8 <__assert_fail@plt+0x8210>
   1a0c0:	b	1a0f0 <__assert_fail@plt+0x8228>
   1a0c4:	mov	r0, r9
   1a0c8:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a0cc:	cmp	r4, #0
   1a0d0:	mov	r9, r4
   1a0d4:	beq	1a0f0 <__assert_fail@plt+0x8228>
   1a0d8:	ldrd	r4, [r9, #8]
   1a0dc:	cmp	r5, #0
   1a0e0:	beq	1a0c4 <__assert_fail@plt+0x81fc>
   1a0e4:	mov	r0, r5
   1a0e8:	bl	11ebc <closedir@plt>
   1a0ec:	b	1a0c4 <__assert_fail@plt+0x81fc>
   1a0f0:	ldr	r0, [r7, #12]
   1a0f4:	bl	11ebc <closedir@plt>
   1a0f8:	ldr	r1, [fp, #-44]	; 0xffffffd4
   1a0fc:	mov	r0, #7
   1a100:	mov	r6, #0
   1a104:	strh	r0, [r7, #56]	; 0x38
   1a108:	str	r6, [r7, #12]
   1a10c:	ldr	r0, [r1, #48]	; 0x30
   1a110:	orr	r0, r0, #8192	; 0x2000
   1a114:	str	r0, [r1, #48]	; 0x30
   1a118:	ldr	r1, [sp, #36]	; 0x24
   1a11c:	mov	r0, #36	; 0x24
   1a120:	str	r0, [r1]
   1a124:	mov	r0, r6
   1a128:	sub	sp, fp, #28
   1a12c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a130:	mov	r0, r5
   1a134:	bl	1a250 <__assert_fail@plt+0x8388>
   1a138:	cmp	r0, #0
   1a13c:	beq	19f84 <__assert_fail@plt+0x80bc>
   1a140:	mov	r0, #7
   1a144:	mov	r6, #0
   1a148:	cmp	r9, #0
   1a14c:	strh	r0, [sl, #56]	; 0x38
   1a150:	ldr	r0, [r5, #48]	; 0x30
   1a154:	orr	r0, r0, #8192	; 0x2000
   1a158:	str	r0, [r5, #48]	; 0x30
   1a15c:	bne	1a180 <__assert_fail@plt+0x82b8>
   1a160:	mov	r0, r6
   1a164:	sub	sp, fp, #28
   1a168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a16c:	mov	r0, r9
   1a170:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a174:	cmp	r4, #0
   1a178:	mov	r9, r4
   1a17c:	beq	1a160 <__assert_fail@plt+0x8298>
   1a180:	ldrd	r4, [r9, #8]
   1a184:	cmp	r5, #0
   1a188:	beq	1a16c <__assert_fail@plt+0x82a4>
   1a18c:	mov	r0, r5
   1a190:	bl	11ebc <closedir@plt>
   1a194:	b	1a16c <__assert_fail@plt+0x82a4>
   1a198:	mov	r0, r4
   1a19c:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a1a0:	ldr	r1, [sp, #36]	; 0x24
   1a1a4:	mov	r0, #0
   1a1a8:	str	r0, [r5, #24]
   1a1ac:	mov	r0, #36	; 0x24
   1a1b0:	str	r0, [r1]
   1a1b4:	b	1a1c8 <__assert_fail@plt+0x8300>
   1a1b8:	ldr	r0, [r5, #24]
   1a1bc:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a1c0:	mov	r0, #0
   1a1c4:	str	r0, [r5, #24]
   1a1c8:	ldr	sl, [sp, #28]
   1a1cc:	ldr	r0, [sp, #36]	; 0x24
   1a1d0:	ldr	r4, [r0]
   1a1d4:	mov	r0, r6
   1a1d8:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a1dc:	ldr	r5, [fp, #-44]	; 0xffffffd4
   1a1e0:	cmp	r9, #0
   1a1e4:	bne	1a200 <__assert_fail@plt+0x8338>
   1a1e8:	b	1a218 <__assert_fail@plt+0x8350>
   1a1ec:	mov	r0, r9
   1a1f0:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a1f4:	cmp	r6, #0
   1a1f8:	mov	r9, r6
   1a1fc:	beq	1a218 <__assert_fail@plt+0x8350>
   1a200:	ldrd	r6, [r9, #8]
   1a204:	cmp	r7, #0
   1a208:	beq	1a1ec <__assert_fail@plt+0x8324>
   1a20c:	mov	r0, r7
   1a210:	bl	11ebc <closedir@plt>
   1a214:	b	1a1ec <__assert_fail@plt+0x8324>
   1a218:	ldr	r0, [sl, #12]
   1a21c:	bl	11ebc <closedir@plt>
   1a220:	mov	r0, #7
   1a224:	mov	r6, #0
   1a228:	strh	r0, [sl, #56]	; 0x38
   1a22c:	str	r6, [sl, #12]
   1a230:	ldr	r0, [r5, #48]	; 0x30
   1a234:	orr	r0, r0, #8192	; 0x2000
   1a238:	str	r0, [r5, #48]	; 0x30
   1a23c:	ldr	r0, [sp, #36]	; 0x24
   1a240:	str	r4, [r0]
   1a244:	mov	r0, r6
   1a248:	sub	sp, fp, #28
   1a24c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a250:	push	{r4, r5, fp, lr}
   1a254:	add	fp, sp, #8
   1a258:	mov	r5, r0
   1a25c:	ldr	r0, [r0, #48]	; 0x30
   1a260:	mov	r4, #0
   1a264:	tst	r0, #4
   1a268:	bne	1a2ac <__assert_fail@plt+0x83e4>
   1a26c:	tst	r0, #512	; 0x200
   1a270:	bne	1a28c <__assert_fail@plt+0x83c4>
   1a274:	ldr	r0, [r5, #28]
   1a278:	bl	11e08 <fchdir@plt>
   1a27c:	cmp	r0, #0
   1a280:	mov	r4, r0
   1a284:	movwne	r4, #1
   1a288:	b	1a2ac <__assert_fail@plt+0x83e4>
   1a28c:	ldr	r1, [r5, #32]
   1a290:	add	r0, r5, #60	; 0x3c
   1a294:	bl	1cc94 <__assert_fail@plt+0xadcc>
   1a298:	cmp	r0, #0
   1a29c:	bmi	1a2a4 <__assert_fail@plt+0x83dc>
   1a2a0:	bl	11ea4 <close@plt>
   1a2a4:	mvn	r0, #99	; 0x63
   1a2a8:	str	r0, [r5, #32]
   1a2ac:	add	r5, r5, #60	; 0x3c
   1a2b0:	mov	r0, r5
   1a2b4:	bl	1cc8c <__assert_fail@plt+0xadc4>
   1a2b8:	cmp	r0, #0
   1a2bc:	bne	1a2e4 <__assert_fail@plt+0x841c>
   1a2c0:	mov	r0, r5
   1a2c4:	bl	1cce0 <__assert_fail@plt+0xae18>
   1a2c8:	cmp	r0, #0
   1a2cc:	bmi	1a2b0 <__assert_fail@plt+0x83e8>
   1a2d0:	bl	11ea4 <close@plt>
   1a2d4:	mov	r0, r5
   1a2d8:	bl	1cc8c <__assert_fail@plt+0xadc4>
   1a2dc:	cmp	r0, #0
   1a2e0:	beq	1a2c0 <__assert_fail@plt+0x83f8>
   1a2e4:	mov	r0, r4
   1a2e8:	pop	{r4, r5, fp, pc}
   1a2ec:	push	{fp, lr}
   1a2f0:	mov	fp, sp
   1a2f4:	cmp	r2, #5
   1a2f8:	bcc	1a310 <__assert_fail@plt+0x8448>
   1a2fc:	bl	11cdc <__errno_location@plt>
   1a300:	mov	r1, #22
   1a304:	str	r1, [r0]
   1a308:	mov	r0, #1
   1a30c:	pop	{fp, pc}
   1a310:	mov	r0, #0
   1a314:	strh	r2, [r1, #60]	; 0x3c
   1a318:	pop	{fp, pc}
   1a31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a320:	add	fp, sp, #28
   1a324:	sub	sp, sp, #4
   1a328:	mov	r9, r0
   1a32c:	mvn	r0, #4096	; 0x1000
   1a330:	tst	r1, r0
   1a334:	beq	1a354 <__assert_fail@plt+0x848c>
   1a338:	bl	11cdc <__errno_location@plt>
   1a33c:	mov	r1, #22
   1a340:	mov	r5, #0
   1a344:	str	r1, [r0]
   1a348:	mov	r0, r5
   1a34c:	sub	sp, fp, #28
   1a350:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a354:	ldr	r8, [r9]
   1a358:	mov	r7, r1
   1a35c:	bl	11cdc <__errno_location@plt>
   1a360:	mov	r5, #0
   1a364:	mov	sl, r0
   1a368:	str	r5, [r0]
   1a36c:	ldrb	r0, [r9, #49]	; 0x31
   1a370:	tst	r0, #32
   1a374:	bne	1a38c <__assert_fail@plt+0x84c4>
   1a378:	ldrh	r0, [r8, #56]	; 0x38
   1a37c:	cmp	r0, #1
   1a380:	beq	1a398 <__assert_fail@plt+0x84d0>
   1a384:	cmp	r0, #9
   1a388:	ldreq	r5, [r8, #8]
   1a38c:	mov	r0, r5
   1a390:	sub	sp, fp, #28
   1a394:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a398:	ldr	r6, [r9, #4]
   1a39c:	cmp	r6, #0
   1a3a0:	bne	1a3bc <__assert_fail@plt+0x84f4>
   1a3a4:	b	1a3d8 <__assert_fail@plt+0x8510>
   1a3a8:	mov	r0, r6
   1a3ac:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a3b0:	cmp	r4, #0
   1a3b4:	mov	r6, r4
   1a3b8:	beq	1a3d8 <__assert_fail@plt+0x8510>
   1a3bc:	ldr	r1, [r6, #12]
   1a3c0:	ldr	r4, [r6, #8]
   1a3c4:	cmp	r1, #0
   1a3c8:	beq	1a3a8 <__assert_fail@plt+0x84e0>
   1a3cc:	mov	r0, r1
   1a3d0:	bl	11ebc <closedir@plt>
   1a3d4:	b	1a3a8 <__assert_fail@plt+0x84e0>
   1a3d8:	mov	r4, #1
   1a3dc:	cmp	r7, #4096	; 0x1000
   1a3e0:	bne	1a3f4 <__assert_fail@plt+0x852c>
   1a3e4:	ldr	r0, [r9, #48]	; 0x30
   1a3e8:	mov	r4, #2
   1a3ec:	orr	r0, r0, #4096	; 0x1000
   1a3f0:	str	r0, [r9, #48]	; 0x30
   1a3f4:	ldr	r0, [r8, #48]	; 0x30
   1a3f8:	cmp	r0, #0
   1a3fc:	bne	1a454 <__assert_fail@plt+0x858c>
   1a400:	ldr	r0, [r8, #24]
   1a404:	ldrb	r0, [r0]
   1a408:	cmp	r0, #47	; 0x2f
   1a40c:	beq	1a454 <__assert_fail@plt+0x858c>
   1a410:	ldr	r0, [r9, #48]	; 0x30
   1a414:	tst	r0, #4
   1a418:	bne	1a454 <__assert_fail@plt+0x858c>
   1a41c:	mov	r1, #32768	; 0x8000
   1a420:	tst	r0, #512	; 0x200
   1a424:	and	r1, r1, r0, lsl #11
   1a428:	orr	r1, r1, #18688	; 0x4900
   1a42c:	orr	r2, r1, #524288	; 0x80000
   1a430:	bne	1a474 <__assert_fail@plt+0x85ac>
   1a434:	movw	r0, #46824	; 0xb6e8
   1a438:	mov	r1, r2
   1a43c:	movt	r0, #3
   1a440:	bl	39548 <__assert_fail@plt+0x27680>
   1a444:	mov	r8, r0
   1a448:	cmn	r0, #1
   1a44c:	bgt	1a490 <__assert_fail@plt+0x85c8>
   1a450:	b	1a4d8 <__assert_fail@plt+0x8610>
   1a454:	mov	r0, r9
   1a458:	mov	r1, r4
   1a45c:	bl	196b8 <__assert_fail@plt+0x77f0>
   1a460:	mov	r5, r0
   1a464:	str	r0, [r9, #4]
   1a468:	mov	r0, r5
   1a46c:	sub	sp, fp, #28
   1a470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a474:	ldr	r0, [r9, #32]
   1a478:	movw	r1, #46824	; 0xb6e8
   1a47c:	movt	r1, #3
   1a480:	bl	1e168 <__assert_fail@plt+0xc2a0>
   1a484:	mov	r8, r0
   1a488:	cmn	r0, #1
   1a48c:	ble	1a4d8 <__assert_fail@plt+0x8610>
   1a490:	mov	r0, r9
   1a494:	mov	r1, r4
   1a498:	bl	196b8 <__assert_fail@plt+0x77f0>
   1a49c:	str	r0, [r9, #4]
   1a4a0:	ldrb	r0, [r9, #49]	; 0x31
   1a4a4:	tst	r0, #2
   1a4a8:	bne	1a4ec <__assert_fail@plt+0x8624>
   1a4ac:	mov	r0, r8
   1a4b0:	bl	11e08 <fchdir@plt>
   1a4b4:	cmp	r0, #0
   1a4b8:	beq	1a528 <__assert_fail@plt+0x8660>
   1a4bc:	ldr	r4, [sl]
   1a4c0:	mov	r0, r8
   1a4c4:	bl	11ea4 <close@plt>
   1a4c8:	str	r4, [sl]
   1a4cc:	mov	r0, r5
   1a4d0:	sub	sp, fp, #28
   1a4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4d8:	mov	r5, #0
   1a4dc:	str	r5, [r9, #4]
   1a4e0:	mov	r0, r5
   1a4e4:	sub	sp, fp, #28
   1a4e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a4ec:	ldr	r1, [r9, #32]
   1a4f0:	cmp	r1, r8
   1a4f4:	bne	1a500 <__assert_fail@plt+0x8638>
   1a4f8:	cmn	r1, #100	; 0x64
   1a4fc:	bne	1a540 <__assert_fail@plt+0x8678>
   1a500:	add	r0, r9, #60	; 0x3c
   1a504:	bl	1cc94 <__assert_fail@plt+0xadcc>
   1a508:	cmp	r0, #0
   1a50c:	bmi	1a514 <__assert_fail@plt+0x864c>
   1a510:	bl	11ea4 <close@plt>
   1a514:	str	r8, [r9, #32]
   1a518:	ldr	r5, [r9, #4]
   1a51c:	mov	r0, r5
   1a520:	sub	sp, fp, #28
   1a524:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a528:	mov	r0, r8
   1a52c:	bl	11ea4 <close@plt>
   1a530:	ldr	r5, [r9, #4]
   1a534:	mov	r0, r5
   1a538:	sub	sp, fp, #28
   1a53c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a540:	bl	11e8c <abort@plt>
   1a544:	push	{fp, lr}
   1a548:	mov	fp, sp
   1a54c:	mov	r2, r1
   1a550:	ldrd	r0, [r0, #8]
   1a554:	mov	r3, #0
   1a558:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1a55c:	mov	r0, r2
   1a560:	pop	{fp, pc}
   1a564:	push	{r4, r5, fp, lr}
   1a568:	add	fp, sp, #8
   1a56c:	ldrd	r2, [r1, #8]
   1a570:	ldrd	r4, [r0, #8]
   1a574:	eor	r3, r5, r3
   1a578:	eor	r2, r4, r2
   1a57c:	orrs	r2, r2, r3
   1a580:	mov	r2, #0
   1a584:	bne	1a5a4 <__assert_fail@plt+0x86dc>
   1a588:	ldrd	r2, [r1]
   1a58c:	ldrd	r0, [r0]
   1a590:	eor	r1, r1, r3
   1a594:	eor	r0, r0, r2
   1a598:	orr	r0, r0, r1
   1a59c:	clz	r0, r0
   1a5a0:	lsr	r2, r0, #5
   1a5a4:	mov	r0, r2
   1a5a8:	pop	{r4, r5, fp, pc}
   1a5ac:	push	{r4, r5, fp, lr}
   1a5b0:	add	fp, sp, #8
   1a5b4:	ldr	r0, [r0]
   1a5b8:	ldrd	r2, [r0, #160]	; 0xa0
   1a5bc:	ldr	r0, [r1]
   1a5c0:	ldrd	r4, [r0, #160]	; 0xa0
   1a5c4:	mov	r0, #0
   1a5c8:	subs	r1, r4, r2
   1a5cc:	sbcs	r1, r5, r3
   1a5d0:	movwcc	r0, #1
   1a5d4:	subs	r1, r2, r4
   1a5d8:	sbcs	r1, r3, r5
   1a5dc:	subcc	r0, r0, #1
   1a5e0:	pop	{r4, r5, fp, pc}
   1a5e4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1a5e8:	add	fp, sp, #24
   1a5ec:	sub	sp, sp, #96	; 0x60
   1a5f0:	ldr	r7, [r0, #44]	; 0x2c
   1a5f4:	mov	r4, r0
   1a5f8:	mov	r5, #0
   1a5fc:	ldrb	r0, [r7, #49]	; 0x31
   1a600:	tst	r0, #2
   1a604:	beq	1a6b4 <__assert_fail@plt+0x87ec>
   1a608:	ldr	r6, [r7, #52]	; 0x34
   1a60c:	mov	r9, r1
   1a610:	cmp	r6, #0
   1a614:	bne	1a654 <__assert_fail@plt+0x878c>
   1a618:	movw	r0, #31760	; 0x7c10
   1a61c:	movw	r2, #42784	; 0xa720
   1a620:	movw	r3, #42816	; 0xa740
   1a624:	mov	r1, #0
   1a628:	mov	r8, #0
   1a62c:	movt	r0, #1
   1a630:	movt	r2, #1
   1a634:	movt	r3, #1
   1a638:	str	r0, [sp]
   1a63c:	mov	r0, #13
   1a640:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   1a644:	mov	r6, r0
   1a648:	cmp	r0, #0
   1a64c:	str	r0, [r7, #52]	; 0x34
   1a650:	beq	1a694 <__assert_fail@plt+0x87cc>
   1a654:	ldrd	r0, [r4, #64]	; 0x40
   1a658:	str	r1, [sp, #12]
   1a65c:	str	r0, [sp, #8]
   1a660:	add	r1, sp, #8
   1a664:	mov	r0, r6
   1a668:	bl	1a980 <__assert_fail@plt+0x8ab8>
   1a66c:	cmp	r0, #0
   1a670:	beq	1a684 <__assert_fail@plt+0x87bc>
   1a674:	ldr	r5, [r0, #8]
   1a678:	mov	r0, r5
   1a67c:	sub	sp, fp, #24
   1a680:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a684:	mov	r8, #1
   1a688:	cmp	r9, #0
   1a68c:	bpl	1a6a0 <__assert_fail@plt+0x87d8>
   1a690:	b	1a6b4 <__assert_fail@plt+0x87ec>
   1a694:	mov	r6, #0
   1a698:	cmp	r9, #0
   1a69c:	bmi	1a6b4 <__assert_fail@plt+0x87ec>
   1a6a0:	add	r1, sp, #8
   1a6a4:	mov	r0, r9
   1a6a8:	bl	119d0 <fstatfs64@plt>
   1a6ac:	cmp	r0, #0
   1a6b0:	beq	1a6c0 <__assert_fail@plt+0x87f8>
   1a6b4:	mov	r0, r5
   1a6b8:	sub	sp, fp, #24
   1a6bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a6c0:	cmp	r8, #0
   1a6c4:	beq	1a710 <__assert_fail@plt+0x8848>
   1a6c8:	mov	r0, #16
   1a6cc:	bl	38450 <__assert_fail@plt+0x26588>
   1a6d0:	cmp	r0, #0
   1a6d4:	beq	1a710 <__assert_fail@plt+0x8848>
   1a6d8:	mov	r5, r0
   1a6dc:	ldrd	r0, [r4, #64]	; 0x40
   1a6e0:	ldr	r2, [sp, #8]
   1a6e4:	stm	r5, {r0, r1, r2}
   1a6e8:	mov	r0, r6
   1a6ec:	mov	r1, r5
   1a6f0:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   1a6f4:	cmp	r0, #0
   1a6f8:	beq	1a708 <__assert_fail@plt+0x8840>
   1a6fc:	cmp	r0, r5
   1a700:	beq	1a710 <__assert_fail@plt+0x8848>
   1a704:	bl	11e8c <abort@plt>
   1a708:	mov	r0, r5
   1a70c:	bl	17c10 <__assert_fail@plt+0x5d48>
   1a710:	ldr	r5, [sp, #8]
   1a714:	mov	r0, r5
   1a718:	sub	sp, fp, #24
   1a71c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1a720:	push	{fp, lr}
   1a724:	mov	fp, sp
   1a728:	mov	r2, r1
   1a72c:	ldrd	r0, [r0]
   1a730:	mov	r3, #0
   1a734:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1a738:	mov	r0, r2
   1a73c:	pop	{fp, pc}
   1a740:	ldrd	r2, [r1]
   1a744:	ldrd	r0, [r0]
   1a748:	eor	r1, r1, r3
   1a74c:	eor	r0, r0, r2
   1a750:	orr	r0, r0, r1
   1a754:	clz	r0, r0
   1a758:	lsr	r0, r0, #5
   1a75c:	bx	lr
   1a760:	ldr	r0, [r0, #8]
   1a764:	bx	lr
   1a768:	ldr	r0, [r0, #12]
   1a76c:	bx	lr
   1a770:	ldr	r0, [r0, #16]
   1a774:	bx	lr
   1a778:	ldm	r0, {r2, ip}
   1a77c:	mov	r0, #0
   1a780:	cmp	r2, ip
   1a784:	bxcs	lr
   1a788:	mov	r0, #0
   1a78c:	ldr	r1, [r2]
   1a790:	cmp	r1, #0
   1a794:	bne	1a7b0 <__assert_fail@plt+0x88e8>
   1a798:	add	r2, r2, #8
   1a79c:	cmp	r2, ip
   1a7a0:	bcs	1a7dc <__assert_fail@plt+0x8914>
   1a7a4:	ldr	r1, [r2]
   1a7a8:	cmp	r1, #0
   1a7ac:	beq	1a798 <__assert_fail@plt+0x88d0>
   1a7b0:	mov	r3, #0
   1a7b4:	mov	r1, r2
   1a7b8:	ldr	r1, [r1, #4]
   1a7bc:	add	r3, r3, #1
   1a7c0:	cmp	r1, #0
   1a7c4:	bne	1a7b8 <__assert_fail@plt+0x88f0>
   1a7c8:	cmp	r3, r0
   1a7cc:	movhi	r0, r3
   1a7d0:	add	r2, r2, #8
   1a7d4:	cmp	r2, ip
   1a7d8:	bcc	1a7a4 <__assert_fail@plt+0x88dc>
   1a7dc:	bx	lr
   1a7e0:	push	{fp, lr}
   1a7e4:	mov	fp, sp
   1a7e8:	ldm	r0, {r3, ip}
   1a7ec:	mov	lr, #0
   1a7f0:	mov	r1, #0
   1a7f4:	cmp	r3, ip
   1a7f8:	bcs	1a84c <__assert_fail@plt+0x8984>
   1a7fc:	mov	r1, #0
   1a800:	mov	lr, #0
   1a804:	ldr	r2, [r3]
   1a808:	cmp	r2, #0
   1a80c:	bne	1a828 <__assert_fail@plt+0x8960>
   1a810:	add	r3, r3, #8
   1a814:	cmp	r3, ip
   1a818:	bcs	1a84c <__assert_fail@plt+0x8984>
   1a81c:	ldr	r2, [r3]
   1a820:	cmp	r2, #0
   1a824:	beq	1a810 <__assert_fail@plt+0x8948>
   1a828:	mov	r2, r3
   1a82c:	ldr	r2, [r2, #4]
   1a830:	add	r1, r1, #1
   1a834:	cmp	r2, #0
   1a838:	bne	1a82c <__assert_fail@plt+0x8964>
   1a83c:	add	lr, lr, #1
   1a840:	add	r3, r3, #8
   1a844:	cmp	r3, ip
   1a848:	bcc	1a81c <__assert_fail@plt+0x8954>
   1a84c:	ldr	r2, [r0, #12]
   1a850:	cmp	lr, r2
   1a854:	bne	1a86c <__assert_fail@plt+0x89a4>
   1a858:	ldr	r2, [r0, #16]
   1a85c:	mov	r0, #1
   1a860:	cmp	r1, r2
   1a864:	movne	r0, #0
   1a868:	pop	{fp, pc}
   1a86c:	mov	r0, #0
   1a870:	pop	{fp, pc}
   1a874:	nop	{0}
   1a878:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a87c:	add	fp, sp, #24
   1a880:	sub	sp, sp, #8
   1a884:	ldr	r6, [r0]
   1a888:	ldmib	r0, {r2, r7, r8}
   1a88c:	ldr	r3, [r0, #16]
   1a890:	mov	r4, r1
   1a894:	mov	r5, #0
   1a898:	cmp	r6, r2
   1a89c:	bcs	1a8f4 <__assert_fail@plt+0x8a2c>
   1a8a0:	mov	r5, #0
   1a8a4:	ldr	r0, [r6]
   1a8a8:	cmp	r0, #0
   1a8ac:	bne	1a8c8 <__assert_fail@plt+0x8a00>
   1a8b0:	add	r6, r6, #8
   1a8b4:	cmp	r6, r2
   1a8b8:	bcs	1a8f4 <__assert_fail@plt+0x8a2c>
   1a8bc:	ldr	r0, [r6]
   1a8c0:	cmp	r0, #0
   1a8c4:	beq	1a8b0 <__assert_fail@plt+0x89e8>
   1a8c8:	mov	r0, #0
   1a8cc:	mov	r1, r6
   1a8d0:	ldr	r1, [r1, #4]
   1a8d4:	add	r0, r0, #1
   1a8d8:	cmp	r1, #0
   1a8dc:	bne	1a8d0 <__assert_fail@plt+0x8a08>
   1a8e0:	cmp	r0, r5
   1a8e4:	movhi	r5, r0
   1a8e8:	add	r6, r6, #8
   1a8ec:	cmp	r6, r2
   1a8f0:	bcc	1a8bc <__assert_fail@plt+0x89f4>
   1a8f4:	movw	r2, #46876	; 0xb71c
   1a8f8:	mov	r0, r4
   1a8fc:	mov	r1, #1
   1a900:	movt	r2, #3
   1a904:	bl	11d3c <__fprintf_chk@plt>
   1a908:	movw	r2, #46900	; 0xb734
   1a90c:	mov	r0, r4
   1a910:	mov	r1, #1
   1a914:	mov	r3, r7
   1a918:	movt	r2, #3
   1a91c:	bl	11d3c <__fprintf_chk@plt>
   1a920:	vmov	s0, r8
   1a924:	vldr	d16, [pc, #76]	; 1a978 <__assert_fail@plt+0x8ab0>
   1a928:	movw	r2, #46924	; 0xb74c
   1a92c:	mov	r0, r4
   1a930:	mov	r1, #1
   1a934:	mov	r3, r8
   1a938:	movt	r2, #3
   1a93c:	vcvt.f64.u32	d17, s0
   1a940:	vmov	s0, r7
   1a944:	vcvt.f64.u32	d18, s0
   1a948:	vmul.f64	d16, d17, d16
   1a94c:	vdiv.f64	d16, d16, d18
   1a950:	vstr	d16, [sp]
   1a954:	bl	11d3c <__fprintf_chk@plt>
   1a958:	movw	r2, #46957	; 0xb76d
   1a95c:	mov	r0, r4
   1a960:	mov	r1, #1
   1a964:	mov	r3, r5
   1a968:	movt	r2, #3
   1a96c:	sub	sp, fp, #24
   1a970:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a974:	b	11d3c <__fprintf_chk@plt>
   1a978:	andeq	r0, r0, r0
   1a97c:	subsmi	r0, r9, r0
   1a980:	push	{r4, r5, r6, r7, fp, lr}
   1a984:	add	fp, sp, #16
   1a988:	mov	r4, r1
   1a98c:	ldr	r1, [r0, #8]
   1a990:	ldr	r2, [r0, #24]
   1a994:	mov	r5, r0
   1a998:	mov	r0, r4
   1a99c:	blx	r2
   1a9a0:	ldr	r1, [r5, #8]
   1a9a4:	cmp	r0, r1
   1a9a8:	bcs	1aa10 <__assert_fail@plt+0x8b48>
   1a9ac:	ldr	r7, [r5]
   1a9b0:	mov	r6, #0
   1a9b4:	ldr	r1, [r7, r0, lsl #3]!
   1a9b8:	cmp	r1, #0
   1a9bc:	cmpne	r7, #0
   1a9c0:	bne	1a9f0 <__assert_fail@plt+0x8b28>
   1a9c4:	mov	r0, r6
   1a9c8:	pop	{r4, r5, r6, r7, fp, pc}
   1a9cc:	ldr	r2, [r5, #28]
   1a9d0:	mov	r0, r4
   1a9d4:	blx	r2
   1a9d8:	cmp	r0, #0
   1a9dc:	bne	1aa04 <__assert_fail@plt+0x8b3c>
   1a9e0:	ldr	r7, [r7, #4]
   1a9e4:	cmp	r7, #0
   1a9e8:	beq	1a9c4 <__assert_fail@plt+0x8afc>
   1a9ec:	ldr	r1, [r7]
   1a9f0:	cmp	r1, r4
   1a9f4:	bne	1a9cc <__assert_fail@plt+0x8b04>
   1a9f8:	mov	r6, r4
   1a9fc:	mov	r0, r6
   1aa00:	pop	{r4, r5, r6, r7, fp, pc}
   1aa04:	ldr	r6, [r7]
   1aa08:	mov	r0, r6
   1aa0c:	pop	{r4, r5, r6, r7, fp, pc}
   1aa10:	bl	11e8c <abort@plt>
   1aa14:	push	{fp, lr}
   1aa18:	mov	fp, sp
   1aa1c:	ldr	r1, [r0, #16]
   1aa20:	cmp	r1, #0
   1aa24:	beq	1aa44 <__assert_fail@plt+0x8b7c>
   1aa28:	ldm	r0, {r1, r2}
   1aa2c:	cmp	r1, r2
   1aa30:	bcs	1aa4c <__assert_fail@plt+0x8b84>
   1aa34:	ldr	r0, [r1], #8
   1aa38:	cmp	r0, #0
   1aa3c:	beq	1aa2c <__assert_fail@plt+0x8b64>
   1aa40:	pop	{fp, pc}
   1aa44:	mov	r0, #0
   1aa48:	pop	{fp, pc}
   1aa4c:	bl	11e8c <abort@plt>
   1aa50:	push	{r4, r5, fp, lr}
   1aa54:	add	fp, sp, #8
   1aa58:	mov	r5, r1
   1aa5c:	ldr	r1, [r0, #8]
   1aa60:	ldr	r2, [r0, #24]
   1aa64:	mov	r4, r0
   1aa68:	mov	r0, r5
   1aa6c:	blx	r2
   1aa70:	ldr	r1, [r4, #8]
   1aa74:	cmp	r0, r1
   1aa78:	bcs	1aadc <__assert_fail@plt+0x8c14>
   1aa7c:	ldr	r1, [r4]
   1aa80:	add	r2, r1, r0, lsl #3
   1aa84:	ldr	r3, [r2]
   1aa88:	ldr	r2, [r2, #4]
   1aa8c:	cmp	r3, r5
   1aa90:	beq	1aaa0 <__assert_fail@plt+0x8bd8>
   1aa94:	cmp	r2, #0
   1aa98:	bne	1aa84 <__assert_fail@plt+0x8bbc>
   1aa9c:	b	1aab0 <__assert_fail@plt+0x8be8>
   1aaa0:	cmp	r2, #0
   1aaa4:	beq	1aab0 <__assert_fail@plt+0x8be8>
   1aaa8:	ldr	r0, [r2]
   1aaac:	pop	{r4, r5, fp, pc}
   1aab0:	ldr	r2, [r4, #4]
   1aab4:	add	r0, r1, r0, lsl #3
   1aab8:	add	r1, r0, #8
   1aabc:	cmp	r1, r2
   1aac0:	bcs	1aad4 <__assert_fail@plt+0x8c0c>
   1aac4:	ldr	r0, [r1], #8
   1aac8:	cmp	r0, #0
   1aacc:	beq	1aabc <__assert_fail@plt+0x8bf4>
   1aad0:	pop	{r4, r5, fp, pc}
   1aad4:	mov	r0, #0
   1aad8:	pop	{r4, r5, fp, pc}
   1aadc:	bl	11e8c <abort@plt>
   1aae0:	push	{r4, r5, fp, lr}
   1aae4:	add	fp, sp, #8
   1aae8:	ldm	r0, {r5, lr}
   1aaec:	mov	ip, r0
   1aaf0:	mov	r0, #0
   1aaf4:	cmp	r5, lr
   1aaf8:	popcs	{r4, r5, fp, pc}
   1aafc:	mov	r0, #0
   1ab00:	ldr	r3, [r5]
   1ab04:	cmp	r3, #0
   1ab08:	cmpne	r5, #0
   1ab0c:	beq	1ab18 <__assert_fail@plt+0x8c50>
   1ab10:	b	1ab34 <__assert_fail@plt+0x8c6c>
   1ab14:	ldr	lr, [ip, #4]
   1ab18:	add	r5, r5, #8
   1ab1c:	cmp	r5, lr
   1ab20:	bcs	1ab5c <__assert_fail@plt+0x8c94>
   1ab24:	ldr	r3, [r5]
   1ab28:	cmp	r3, #0
   1ab2c:	cmpne	r5, #0
   1ab30:	beq	1ab18 <__assert_fail@plt+0x8c50>
   1ab34:	mov	r3, r5
   1ab38:	cmp	r0, r2
   1ab3c:	bcs	1ab5c <__assert_fail@plt+0x8c94>
   1ab40:	ldr	r4, [r3]
   1ab44:	str	r4, [r1, r0, lsl #2]
   1ab48:	add	r0, r0, #1
   1ab4c:	ldr	r3, [r3, #4]
   1ab50:	cmp	r3, #0
   1ab54:	bne	1ab38 <__assert_fail@plt+0x8c70>
   1ab58:	b	1ab14 <__assert_fail@plt+0x8c4c>
   1ab5c:	pop	{r4, r5, fp, pc}
   1ab60:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ab64:	add	fp, sp, #24
   1ab68:	mov	r5, r1
   1ab6c:	ldr	r4, [r0]
   1ab70:	ldr	r1, [r0, #4]
   1ab74:	mov	r6, #0
   1ab78:	cmp	r4, r1
   1ab7c:	bcs	1abf8 <__assert_fail@plt+0x8d30>
   1ab80:	mov	r9, r2
   1ab84:	mov	r8, r0
   1ab88:	mov	r6, #0
   1ab8c:	ldr	r0, [r4]
   1ab90:	cmp	r0, #0
   1ab94:	cmpne	r4, #0
   1ab98:	beq	1aba4 <__assert_fail@plt+0x8cdc>
   1ab9c:	b	1abc0 <__assert_fail@plt+0x8cf8>
   1aba0:	ldr	r1, [r8, #4]
   1aba4:	add	r4, r4, #8
   1aba8:	cmp	r4, r1
   1abac:	bcs	1abf8 <__assert_fail@plt+0x8d30>
   1abb0:	ldr	r0, [r4]
   1abb4:	cmp	r0, #0
   1abb8:	cmpne	r4, #0
   1abbc:	beq	1aba4 <__assert_fail@plt+0x8cdc>
   1abc0:	mov	r1, r9
   1abc4:	blx	r5
   1abc8:	cmp	r0, #0
   1abcc:	beq	1abf8 <__assert_fail@plt+0x8d30>
   1abd0:	mov	r7, r4
   1abd4:	ldr	r7, [r7, #4]
   1abd8:	add	r6, r6, #1
   1abdc:	cmp	r7, #0
   1abe0:	beq	1aba0 <__assert_fail@plt+0x8cd8>
   1abe4:	ldr	r0, [r7]
   1abe8:	mov	r1, r9
   1abec:	blx	r5
   1abf0:	cmp	r0, #0
   1abf4:	bne	1abd4 <__assert_fail@plt+0x8d0c>
   1abf8:	mov	r0, r6
   1abfc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ac00:	ldrb	r2, [r0]
   1ac04:	cmp	r2, #0
   1ac08:	moveq	r0, #0
   1ac0c:	bxeq	lr
   1ac10:	add	r3, r0, #1
   1ac14:	mov	r0, #0
   1ac18:	rsb	r0, r0, r0, lsl #5
   1ac1c:	uxtab	r0, r0, r2
   1ac20:	udiv	r2, r0, r1
   1ac24:	mls	r0, r2, r1, r0
   1ac28:	ldrb	r2, [r3], #1
   1ac2c:	cmp	r2, #0
   1ac30:	bne	1ac18 <__assert_fail@plt+0x8d50>
   1ac34:	bx	lr
   1ac38:	movw	r1, #46984	; 0xb788
   1ac3c:	movt	r1, #3
   1ac40:	vld1.32	{d16-d17}, [r1]!
   1ac44:	ldr	r1, [r1]
   1ac48:	vst1.32	{d16-d17}, [r0]!
   1ac4c:	str	r1, [r0]
   1ac50:	bx	lr
   1ac54:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1ac58:	add	fp, sp, #24
   1ac5c:	movw	r9, #44680	; 0xae88
   1ac60:	cmp	r3, #0
   1ac64:	movw	r5, #44660	; 0xae74
   1ac68:	mov	r6, r0
   1ac6c:	mov	r0, #40	; 0x28
   1ac70:	mov	r7, r1
   1ac74:	movt	r9, #1
   1ac78:	movne	r9, r3
   1ac7c:	cmp	r2, #0
   1ac80:	movt	r5, #1
   1ac84:	movne	r5, r2
   1ac88:	bl	38450 <__assert_fail@plt+0x26588>
   1ac8c:	mov	r8, #0
   1ac90:	cmp	r0, #0
   1ac94:	beq	1ae5c <__assert_fail@plt+0x8f94>
   1ac98:	mov	r4, r0
   1ac9c:	movw	r0, #46984	; 0xb788
   1aca0:	cmp	r7, #0
   1aca4:	movt	r0, #3
   1aca8:	moveq	r7, r0
   1acac:	cmp	r7, r0
   1acb0:	str	r7, [r4, #20]
   1acb4:	beq	1ad30 <__assert_fail@plt+0x8e68>
   1acb8:	vldr	s2, [pc, #420]	; 1ae64 <__assert_fail@plt+0x8f9c>
   1acbc:	vldr	s0, [r7, #8]
   1acc0:	vcmpe.f32	s0, s2
   1acc4:	vmrs	APSR_nzcv, fpscr
   1acc8:	ble	1addc <__assert_fail@plt+0x8f14>
   1accc:	vldr	s4, [pc, #404]	; 1ae68 <__assert_fail@plt+0x8fa0>
   1acd0:	vcmpe.f32	s0, s4
   1acd4:	vmrs	APSR_nzcv, fpscr
   1acd8:	bpl	1addc <__assert_fail@plt+0x8f14>
   1acdc:	vldr	s4, [pc, #392]	; 1ae6c <__assert_fail@plt+0x8fa4>
   1ace0:	vldr	s6, [r7, #12]
   1ace4:	vcmpe.f32	s6, s4
   1ace8:	vmrs	APSR_nzcv, fpscr
   1acec:	ble	1addc <__assert_fail@plt+0x8f14>
   1acf0:	vldr	s4, [r7]
   1acf4:	vcmpe.f32	s4, #0.0
   1acf8:	vmrs	APSR_nzcv, fpscr
   1acfc:	blt	1addc <__assert_fail@plt+0x8f14>
   1ad00:	vadd.f32	s2, s4, s2
   1ad04:	vcmpe.f32	s2, s0
   1ad08:	vmrs	APSR_nzcv, fpscr
   1ad0c:	bpl	1addc <__assert_fail@plt+0x8f14>
   1ad10:	vldr	s0, [r7, #4]
   1ad14:	vmov.f32	s4, #112	; 0x3f800000  1.0
   1ad18:	vcmpe.f32	s0, s4
   1ad1c:	vmrs	APSR_nzcv, fpscr
   1ad20:	bhi	1addc <__assert_fail@plt+0x8f14>
   1ad24:	vcmpe.f32	s2, s0
   1ad28:	vmrs	APSR_nzcv, fpscr
   1ad2c:	bpl	1addc <__assert_fail@plt+0x8f14>
   1ad30:	ldrb	r0, [r7, #16]
   1ad34:	cmp	r0, #0
   1ad38:	bne	1ad64 <__assert_fail@plt+0x8e9c>
   1ad3c:	vmov	s2, r6
   1ad40:	vldr	s0, [r7, #8]
   1ad44:	vldr	s4, [pc, #292]	; 1ae70 <__assert_fail@plt+0x8fa8>
   1ad48:	vcvt.f32.u32	s2, s2
   1ad4c:	vdiv.f32	s2, s2, s0
   1ad50:	vcvt.u32.f32	s0, s2
   1ad54:	vcmpe.f32	s2, s4
   1ad58:	vmrs	APSR_nzcv, fpscr
   1ad5c:	bge	1adf8 <__assert_fail@plt+0x8f30>
   1ad60:	vmov	r6, s0
   1ad64:	cmp	r6, #10
   1ad68:	movls	r6, #10
   1ad6c:	orr	r0, r6, #1
   1ad70:	cmn	r0, #1
   1ad74:	beq	1adf8 <__assert_fail@plt+0x8f30>
   1ad78:	ldr	r6, [fp, #8]
   1ad7c:	mov	r1, #3
   1ad80:	cmp	r0, #10
   1ad84:	bcc	1adbc <__assert_fail@plt+0x8ef4>
   1ad88:	mov	r1, #3
   1ad8c:	mov	r3, #9
   1ad90:	mov	r2, #12
   1ad94:	udiv	r7, r0, r1
   1ad98:	mls	r7, r7, r1, r0
   1ad9c:	cmp	r7, #0
   1ada0:	beq	1adbc <__assert_fail@plt+0x8ef4>
   1ada4:	add	r3, r3, r2
   1ada8:	add	r2, r2, #8
   1adac:	add	r1, r1, #2
   1adb0:	add	r3, r3, #4
   1adb4:	cmp	r3, r0
   1adb8:	bcc	1ad94 <__assert_fail@plt+0x8ecc>
   1adbc:	udiv	r2, r0, r1
   1adc0:	mls	r1, r2, r1, r0
   1adc4:	cmp	r1, #0
   1adc8:	bne	1adf0 <__assert_fail@plt+0x8f28>
   1adcc:	add	r0, r0, #2
   1add0:	cmn	r0, #1
   1add4:	bne	1ad7c <__assert_fail@plt+0x8eb4>
   1add8:	b	1adf8 <__assert_fail@plt+0x8f30>
   1addc:	str	r0, [r4, #20]
   1ade0:	mov	r0, r4
   1ade4:	bl	17c10 <__assert_fail@plt+0x5d48>
   1ade8:	mov	r0, r8
   1adec:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1adf0:	cmp	r0, #536870912	; 0x20000000
   1adf4:	bcc	1ae10 <__assert_fail@plt+0x8f48>
   1adf8:	mov	r0, #0
   1adfc:	str	r0, [r4, #8]
   1ae00:	mov	r0, r4
   1ae04:	bl	17c10 <__assert_fail@plt+0x5d48>
   1ae08:	mov	r0, r8
   1ae0c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ae10:	cmp	r0, #0
   1ae14:	str	r0, [r4, #8]
   1ae18:	beq	1ae00 <__assert_fail@plt+0x8f38>
   1ae1c:	mov	r1, #8
   1ae20:	bl	383fc <__assert_fail@plt+0x26534>
   1ae24:	cmp	r0, #0
   1ae28:	str	r0, [r4]
   1ae2c:	beq	1ae00 <__assert_fail@plt+0x8f38>
   1ae30:	mov	r1, #0
   1ae34:	str	r5, [r4, #24]
   1ae38:	str	r9, [r4, #28]
   1ae3c:	str	r6, [r4, #32]
   1ae40:	mov	r8, r4
   1ae44:	str	r1, [r4, #36]	; 0x24
   1ae48:	str	r1, [r4, #12]
   1ae4c:	str	r1, [r4, #16]
   1ae50:	ldr	r1, [r4, #8]
   1ae54:	add	r0, r0, r1, lsl #3
   1ae58:	str	r0, [r4, #4]
   1ae5c:	mov	r0, r8
   1ae60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1ae64:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ae68:	svccc	0x00666666
   1ae6c:	svccc	0x008ccccd
   1ae70:	svcmi	0x00800000
   1ae74:	ror	r2, r0, #3
   1ae78:	udiv	r2, r2, r1
   1ae7c:	mul	r1, r2, r1
   1ae80:	rsb	r0, r1, r0, ror #3
   1ae84:	bx	lr
   1ae88:	sub	r0, r0, r1
   1ae8c:	clz	r0, r0
   1ae90:	lsr	r0, r0, #5
   1ae94:	bx	lr
   1ae98:	push	{r4, r5, r6, r7, fp, lr}
   1ae9c:	add	fp, sp, #16
   1aea0:	mov	r4, r0
   1aea4:	ldr	r5, [r0]
   1aea8:	ldr	r0, [r0, #4]
   1aeac:	cmp	r5, r0
   1aeb0:	bcs	1af60 <__assert_fail@plt+0x9098>
   1aeb4:	mov	r6, #0
   1aeb8:	ldr	r1, [r5]
   1aebc:	cmp	r1, #0
   1aec0:	bne	1aeec <__assert_fail@plt+0x9024>
   1aec4:	b	1aed4 <__assert_fail@plt+0x900c>
   1aec8:	str	r6, [r5]
   1aecc:	str	r6, [r5, #4]
   1aed0:	ldr	r0, [r4, #4]
   1aed4:	add	r5, r5, #8
   1aed8:	cmp	r5, r0
   1aedc:	bcs	1af60 <__assert_fail@plt+0x9098>
   1aee0:	ldr	r1, [r5]
   1aee4:	cmp	r1, #0
   1aee8:	beq	1aed4 <__assert_fail@plt+0x900c>
   1aeec:	ldr	r1, [r4, #32]
   1aef0:	ldr	r7, [r5, #4]
   1aef4:	cmp	r1, #0
   1aef8:	mov	r0, r1
   1aefc:	movwne	r0, #1
   1af00:	cmp	r7, #0
   1af04:	bne	1af48 <__assert_fail@plt+0x9080>
   1af08:	cmp	r0, #0
   1af0c:	beq	1aec8 <__assert_fail@plt+0x9000>
   1af10:	ldr	r0, [r5]
   1af14:	blx	r1
   1af18:	b	1aec8 <__assert_fail@plt+0x9000>
   1af1c:	str	r6, [r7]
   1af20:	cmp	r1, #0
   1af24:	ldr	r2, [r7, #4]
   1af28:	ldr	r0, [r4, #36]	; 0x24
   1af2c:	str	r0, [r7, #4]
   1af30:	mov	r0, r1
   1af34:	str	r7, [r4, #36]	; 0x24
   1af38:	movwne	r0, #1
   1af3c:	cmp	r2, #0
   1af40:	mov	r7, r2
   1af44:	beq	1af08 <__assert_fail@plt+0x9040>
   1af48:	tst	r0, #1
   1af4c:	beq	1af1c <__assert_fail@plt+0x9054>
   1af50:	ldr	r0, [r7]
   1af54:	blx	r1
   1af58:	ldr	r1, [r4, #32]
   1af5c:	b	1af1c <__assert_fail@plt+0x9054>
   1af60:	mov	r0, #0
   1af64:	str	r0, [r4, #12]
   1af68:	str	r0, [r4, #16]
   1af6c:	pop	{r4, r5, r6, r7, fp, pc}
   1af70:	push	{r4, r5, r6, sl, fp, lr}
   1af74:	add	fp, sp, #16
   1af78:	mov	r4, r0
   1af7c:	ldr	r0, [r0, #32]
   1af80:	cmp	r0, #0
   1af84:	beq	1aff8 <__assert_fail@plt+0x9130>
   1af88:	ldr	r0, [r4, #16]
   1af8c:	cmp	r0, #0
   1af90:	beq	1aff8 <__assert_fail@plt+0x9130>
   1af94:	ldr	r5, [r4]
   1af98:	ldr	r1, [r4, #4]
   1af9c:	cmp	r5, r1
   1afa0:	bcc	1afb8 <__assert_fail@plt+0x90f0>
   1afa4:	b	1aff8 <__assert_fail@plt+0x9130>
   1afa8:	ldr	r1, [r4, #4]
   1afac:	add	r5, r5, #8
   1afb0:	cmp	r5, r1
   1afb4:	bcs	1aff8 <__assert_fail@plt+0x9130>
   1afb8:	ldr	r0, [r5]
   1afbc:	cmp	r0, #0
   1afc0:	cmpne	r5, #0
   1afc4:	beq	1afac <__assert_fail@plt+0x90e4>
   1afc8:	ldr	r1, [r4, #32]
   1afcc:	blx	r1
   1afd0:	ldr	r6, [r5, #4]
   1afd4:	cmp	r6, #0
   1afd8:	beq	1afa8 <__assert_fail@plt+0x90e0>
   1afdc:	ldr	r1, [r4, #32]
   1afe0:	ldr	r0, [r6]
   1afe4:	blx	r1
   1afe8:	ldr	r6, [r6, #4]
   1afec:	cmp	r6, #0
   1aff0:	bne	1afdc <__assert_fail@plt+0x9114>
   1aff4:	b	1afa8 <__assert_fail@plt+0x90e0>
   1aff8:	ldr	r5, [r4]
   1affc:	ldr	r1, [r4, #4]
   1b000:	cmp	r5, r1
   1b004:	bcc	1b018 <__assert_fail@plt+0x9150>
   1b008:	b	1b040 <__assert_fail@plt+0x9178>
   1b00c:	add	r5, r5, #8
   1b010:	cmp	r5, r1
   1b014:	bcs	1b040 <__assert_fail@plt+0x9178>
   1b018:	ldr	r0, [r5, #4]
   1b01c:	cmp	r0, #0
   1b020:	beq	1b00c <__assert_fail@plt+0x9144>
   1b024:	ldr	r6, [r0, #4]
   1b028:	bl	17c10 <__assert_fail@plt+0x5d48>
   1b02c:	cmp	r6, #0
   1b030:	mov	r0, r6
   1b034:	bne	1b024 <__assert_fail@plt+0x915c>
   1b038:	ldr	r1, [r4, #4]
   1b03c:	b	1b00c <__assert_fail@plt+0x9144>
   1b040:	ldr	r0, [r4, #36]	; 0x24
   1b044:	cmp	r0, #0
   1b048:	beq	1b060 <__assert_fail@plt+0x9198>
   1b04c:	ldr	r5, [r0, #4]
   1b050:	bl	17c10 <__assert_fail@plt+0x5d48>
   1b054:	cmp	r5, #0
   1b058:	mov	r0, r5
   1b05c:	bne	1b04c <__assert_fail@plt+0x9184>
   1b060:	ldr	r0, [r4]
   1b064:	bl	17c10 <__assert_fail@plt+0x5d48>
   1b068:	mov	r0, r4
   1b06c:	pop	{r4, r5, r6, sl, fp, lr}
   1b070:	b	17c10 <__assert_fail@plt+0x5d48>
   1b074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b078:	add	fp, sp, #28
   1b07c:	sub	sp, sp, #44	; 0x2c
   1b080:	mov	r7, r0
   1b084:	mov	r4, r0
   1b088:	ldr	r0, [r7, #20]!
   1b08c:	ldrb	r2, [r0, #16]
   1b090:	cmp	r2, #0
   1b094:	bne	1b0c4 <__assert_fail@plt+0x91fc>
   1b098:	vmov	s2, r1
   1b09c:	vldr	s0, [r0, #8]
   1b0a0:	vldr	s4, [pc, #592]	; 1b2f8 <__assert_fail@plt+0x9430>
   1b0a4:	mov	r5, #0
   1b0a8:	vcvt.f32.u32	s2, s2
   1b0ac:	vdiv.f32	s2, s2, s0
   1b0b0:	vcvt.u32.f32	s0, s2
   1b0b4:	vcmpe.f32	s2, s4
   1b0b8:	vmrs	APSR_nzcv, fpscr
   1b0bc:	bge	1b1e8 <__assert_fail@plt+0x9320>
   1b0c0:	vmov	r1, s0
   1b0c4:	cmp	r1, #10
   1b0c8:	mov	r5, #0
   1b0cc:	movls	r1, #10
   1b0d0:	orr	r6, r1, #1
   1b0d4:	cmn	r6, #1
   1b0d8:	beq	1b1e8 <__assert_fail@plt+0x9320>
   1b0dc:	mov	r0, #3
   1b0e0:	cmp	r6, #10
   1b0e4:	bcc	1b11c <__assert_fail@plt+0x9254>
   1b0e8:	mov	r0, #3
   1b0ec:	mov	r2, #9
   1b0f0:	mov	r1, #12
   1b0f4:	udiv	r3, r6, r0
   1b0f8:	mls	r3, r3, r0, r6
   1b0fc:	cmp	r3, #0
   1b100:	beq	1b11c <__assert_fail@plt+0x9254>
   1b104:	add	r2, r2, r1
   1b108:	add	r1, r1, #8
   1b10c:	add	r0, r0, #2
   1b110:	add	r2, r2, #4
   1b114:	cmp	r2, r6
   1b118:	bcc	1b0f4 <__assert_fail@plt+0x922c>
   1b11c:	udiv	r1, r6, r0
   1b120:	mls	r0, r1, r0, r6
   1b124:	cmp	r0, #0
   1b128:	bne	1b13c <__assert_fail@plt+0x9274>
   1b12c:	add	r6, r6, #2
   1b130:	cmn	r6, #1
   1b134:	bne	1b0dc <__assert_fail@plt+0x9214>
   1b138:	b	1b1e8 <__assert_fail@plt+0x9320>
   1b13c:	sub	r0, r6, #1
   1b140:	cmn	r0, #-536870910	; 0xe0000002
   1b144:	bhi	1b1e8 <__assert_fail@plt+0x9320>
   1b148:	ldr	r0, [r4, #8]
   1b14c:	cmp	r6, r0
   1b150:	bne	1b164 <__assert_fail@plt+0x929c>
   1b154:	mov	r5, #1
   1b158:	mov	r0, r5
   1b15c:	sub	sp, fp, #28
   1b160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b164:	mov	r0, r6
   1b168:	mov	r1, #8
   1b16c:	bl	383fc <__assert_fail@plt+0x26534>
   1b170:	cmp	r0, #0
   1b174:	str	r0, [sp, #4]
   1b178:	beq	1b1e8 <__assert_fail@plt+0x9320>
   1b17c:	add	r0, r0, r6, lsl #3
   1b180:	mov	r1, #0
   1b184:	add	r5, sp, #4
   1b188:	mov	sl, r4
   1b18c:	mov	r2, #0
   1b190:	str	r1, [sp, #20]
   1b194:	str	r1, [sp, #16]
   1b198:	str	r6, [sp, #12]
   1b19c:	mov	r1, r4
   1b1a0:	str	r0, [sp, #8]
   1b1a4:	add	r0, r5, #20
   1b1a8:	vld1.32	{d16-d17}, [r7]
   1b1ac:	vst1.32	{d16-d17}, [r0]
   1b1b0:	ldr	r0, [sl, #36]!	; 0x24
   1b1b4:	str	r0, [sp, #40]	; 0x28
   1b1b8:	mov	r0, r5
   1b1bc:	bl	1b2fc <__assert_fail@plt+0x9434>
   1b1c0:	cmp	r0, #0
   1b1c4:	beq	1b1f4 <__assert_fail@plt+0x932c>
   1b1c8:	ldr	r0, [r4]
   1b1cc:	bl	17c10 <__assert_fail@plt+0x5d48>
   1b1d0:	mov	r0, #36	; 0x24
   1b1d4:	vld1.32	{d16-d17}, [r5], r0
   1b1d8:	vst1.32	{d16-d17}, [r4], r0
   1b1dc:	ldr	r0, [r5]
   1b1e0:	mov	r5, #1
   1b1e4:	str	r0, [r4]
   1b1e8:	mov	r0, r5
   1b1ec:	sub	sp, fp, #28
   1b1f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b1f4:	ldr	r0, [sp, #40]	; 0x28
   1b1f8:	str	r0, [sl]
   1b1fc:	ldr	r0, [sp, #8]
   1b200:	ldr	r8, [sp, #4]
   1b204:	cmp	r8, r0
   1b208:	str	r0, [sp]
   1b20c:	bcs	1b2c4 <__assert_fail@plt+0x93fc>
   1b210:	mov	r9, #0
   1b214:	ldr	r0, [r8]
   1b218:	cmp	r0, #0
   1b21c:	bne	1b244 <__assert_fail@plt+0x937c>
   1b220:	b	1b228 <__assert_fail@plt+0x9360>
   1b224:	str	r9, [r8, #4]
   1b228:	ldr	r0, [sp]
   1b22c:	add	r8, r8, #8
   1b230:	cmp	r8, r0
   1b234:	bcs	1b2c4 <__assert_fail@plt+0x93fc>
   1b238:	ldr	r0, [r8]
   1b23c:	cmp	r0, #0
   1b240:	beq	1b228 <__assert_fail@plt+0x9360>
   1b244:	ldr	r6, [r8, #4]
   1b248:	cmp	r6, #0
   1b24c:	beq	1b224 <__assert_fail@plt+0x935c>
   1b250:	ldr	r1, [r4, #8]
   1b254:	b	1b278 <__assert_fail@plt+0x93b0>
   1b258:	add	r0, r3, r0, lsl #3
   1b25c:	add	r0, r0, #4
   1b260:	ldr	r3, [r0]
   1b264:	cmp	r2, #0
   1b268:	str	r3, [r6, #4]
   1b26c:	str	r6, [r0]
   1b270:	mov	r6, r2
   1b274:	beq	1b224 <__assert_fail@plt+0x935c>
   1b278:	ldr	r5, [r6]
   1b27c:	ldr	r2, [r4, #24]
   1b280:	mov	r0, r5
   1b284:	blx	r2
   1b288:	ldr	r1, [r4, #8]
   1b28c:	cmp	r0, r1
   1b290:	bcs	1b2f4 <__assert_fail@plt+0x942c>
   1b294:	ldr	r3, [r4]
   1b298:	ldr	r2, [r6, #4]
   1b29c:	ldr	r7, [r3, r0, lsl #3]
   1b2a0:	cmp	r7, #0
   1b2a4:	bne	1b258 <__assert_fail@plt+0x9390>
   1b2a8:	str	r5, [r3, r0, lsl #3]
   1b2ac:	ldr	r0, [r4, #12]
   1b2b0:	add	r0, r0, #1
   1b2b4:	str	r0, [r4, #12]
   1b2b8:	mov	r0, sl
   1b2bc:	str	r9, [r6]
   1b2c0:	b	1b260 <__assert_fail@plt+0x9398>
   1b2c4:	add	r1, sp, #4
   1b2c8:	mov	r0, r4
   1b2cc:	mov	r2, #0
   1b2d0:	mov	r5, #0
   1b2d4:	bl	1b2fc <__assert_fail@plt+0x9434>
   1b2d8:	cmp	r0, #0
   1b2dc:	beq	1b2f4 <__assert_fail@plt+0x942c>
   1b2e0:	ldr	r0, [sp, #4]
   1b2e4:	bl	17c10 <__assert_fail@plt+0x5d48>
   1b2e8:	mov	r0, r5
   1b2ec:	sub	sp, fp, #28
   1b2f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b2f4:	bl	11e8c <abort@plt>
   1b2f8:	svcmi	0x00800000
   1b2fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b300:	add	fp, sp, #28
   1b304:	sub	sp, sp, #4
   1b308:	ldr	r8, [r1]
   1b30c:	ldr	r3, [r1, #4]
   1b310:	mov	r6, r0
   1b314:	mov	r0, #1
   1b318:	str	r1, [sp]
   1b31c:	cmp	r8, r3
   1b320:	bcs	1b534 <__assert_fail@plt+0x966c>
   1b324:	add	sl, r6, #36	; 0x24
   1b328:	cmp	r2, #0
   1b32c:	beq	1b3e8 <__assert_fail@plt+0x9520>
   1b330:	mov	r9, #0
   1b334:	ldr	r1, [r8]
   1b338:	cmp	r1, #0
   1b33c:	bne	1b368 <__assert_fail@plt+0x94a0>
   1b340:	b	1b350 <__assert_fail@plt+0x9488>
   1b344:	ldr	r0, [sp]
   1b348:	ldr	r3, [r0, #4]
   1b34c:	str	r9, [r8, #4]
   1b350:	add	r8, r8, #8
   1b354:	cmp	r8, r3
   1b358:	bcs	1b530 <__assert_fail@plt+0x9668>
   1b35c:	ldr	r1, [r8]
   1b360:	cmp	r1, #0
   1b364:	beq	1b350 <__assert_fail@plt+0x9488>
   1b368:	ldr	r7, [r8, #4]
   1b36c:	cmp	r7, #0
   1b370:	beq	1b34c <__assert_fail@plt+0x9484>
   1b374:	ldr	r1, [r6, #8]
   1b378:	b	1b3ac <__assert_fail@plt+0x94e4>
   1b37c:	str	r4, [r3, r0, lsl #3]
   1b380:	ldr	r0, [r6, #12]
   1b384:	add	r0, r0, #1
   1b388:	str	r0, [r6, #12]
   1b38c:	mov	r0, sl
   1b390:	str	r9, [r7]
   1b394:	ldr	r3, [r0]
   1b398:	cmp	r2, #0
   1b39c:	str	r3, [r7, #4]
   1b3a0:	str	r7, [r0]
   1b3a4:	mov	r7, r2
   1b3a8:	beq	1b344 <__assert_fail@plt+0x947c>
   1b3ac:	ldr	r4, [r7]
   1b3b0:	ldr	r2, [r6, #24]
   1b3b4:	mov	r0, r4
   1b3b8:	blx	r2
   1b3bc:	ldr	r1, [r6, #8]
   1b3c0:	cmp	r0, r1
   1b3c4:	bcs	1b548 <__assert_fail@plt+0x9680>
   1b3c8:	ldr	r3, [r6]
   1b3cc:	ldr	r2, [r7, #4]
   1b3d0:	ldr	r5, [r3, r0, lsl #3]
   1b3d4:	cmp	r5, #0
   1b3d8:	beq	1b37c <__assert_fail@plt+0x94b4>
   1b3dc:	add	r0, r3, r0, lsl #3
   1b3e0:	add	r0, r0, #4
   1b3e4:	b	1b394 <__assert_fail@plt+0x94cc>
   1b3e8:	mov	r5, #0
   1b3ec:	ldr	r7, [r8]
   1b3f0:	cmp	r7, #0
   1b3f4:	bne	1b43c <__assert_fail@plt+0x9574>
   1b3f8:	b	1b424 <__assert_fail@plt+0x955c>
   1b3fc:	str	r7, [r9, r4, lsl #3]
   1b400:	ldr	r0, [r6, #12]
   1b404:	add	r0, r0, #1
   1b408:	str	r0, [r6, #12]
   1b40c:	ldr	r0, [sp]
   1b410:	str	r5, [r8]
   1b414:	ldr	r1, [r0, #12]
   1b418:	ldr	r3, [r0, #4]
   1b41c:	sub	r1, r1, #1
   1b420:	str	r1, [r0, #12]
   1b424:	add	r8, r8, #8
   1b428:	cmp	r8, r3
   1b42c:	bcs	1b530 <__assert_fail@plt+0x9668>
   1b430:	ldr	r7, [r8]
   1b434:	cmp	r7, #0
   1b438:	beq	1b424 <__assert_fail@plt+0x955c>
   1b43c:	ldr	r9, [r8, #4]
   1b440:	ldr	r1, [r6, #8]
   1b444:	cmp	r9, #0
   1b448:	bne	1b470 <__assert_fail@plt+0x95a8>
   1b44c:	b	1b4c0 <__assert_fail@plt+0x95f8>
   1b450:	add	r0, r3, r0, lsl #3
   1b454:	add	r0, r0, #4
   1b458:	ldr	r3, [r0]
   1b45c:	cmp	r2, #0
   1b460:	str	r3, [r9, #4]
   1b464:	str	r9, [r0]
   1b468:	mov	r9, r2
   1b46c:	beq	1b4bc <__assert_fail@plt+0x95f4>
   1b470:	ldr	r4, [r9]
   1b474:	ldr	r2, [r6, #24]
   1b478:	mov	r0, r4
   1b47c:	blx	r2
   1b480:	ldr	r1, [r6, #8]
   1b484:	cmp	r0, r1
   1b488:	bcs	1b548 <__assert_fail@plt+0x9680>
   1b48c:	ldr	r3, [r6]
   1b490:	ldr	r2, [r9, #4]
   1b494:	ldr	r7, [r3, r0, lsl #3]
   1b498:	cmp	r7, #0
   1b49c:	bne	1b450 <__assert_fail@plt+0x9588>
   1b4a0:	str	r4, [r3, r0, lsl #3]
   1b4a4:	ldr	r0, [r6, #12]
   1b4a8:	add	r0, r0, #1
   1b4ac:	str	r0, [r6, #12]
   1b4b0:	mov	r0, sl
   1b4b4:	str	r5, [r9]
   1b4b8:	b	1b458 <__assert_fail@plt+0x9590>
   1b4bc:	ldr	r7, [r8]
   1b4c0:	str	r5, [r8, #4]
   1b4c4:	mov	r0, r7
   1b4c8:	ldr	r2, [r6, #24]
   1b4cc:	blx	r2
   1b4d0:	mov	r4, r0
   1b4d4:	ldr	r0, [r6, #8]
   1b4d8:	cmp	r4, r0
   1b4dc:	bcs	1b548 <__assert_fail@plt+0x9680>
   1b4e0:	ldr	r9, [r6]
   1b4e4:	ldr	r0, [r9, r4, lsl #3]
   1b4e8:	cmp	r0, #0
   1b4ec:	beq	1b3fc <__assert_fail@plt+0x9534>
   1b4f0:	ldr	r0, [sl]
   1b4f4:	cmp	r0, #0
   1b4f8:	beq	1b508 <__assert_fail@plt+0x9640>
   1b4fc:	ldr	r1, [r0, #4]
   1b500:	str	r1, [sl]
   1b504:	b	1b518 <__assert_fail@plt+0x9650>
   1b508:	mov	r0, #8
   1b50c:	bl	38450 <__assert_fail@plt+0x26588>
   1b510:	cmp	r0, #0
   1b514:	beq	1b53c <__assert_fail@plt+0x9674>
   1b518:	add	r1, r9, r4, lsl #3
   1b51c:	str	r7, [r0]
   1b520:	ldr	r2, [r1, #4]
   1b524:	str	r2, [r0, #4]
   1b528:	str	r0, [r1, #4]
   1b52c:	b	1b40c <__assert_fail@plt+0x9544>
   1b530:	mov	r0, #1
   1b534:	sub	sp, fp, #28
   1b538:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b53c:	mov	r0, #0
   1b540:	sub	sp, fp, #28
   1b544:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b548:	bl	11e8c <abort@plt>
   1b54c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b550:	add	fp, sp, #28
   1b554:	sub	sp, sp, #4
   1b558:	cmp	r1, #0
   1b55c:	beq	1b898 <__assert_fail@plt+0x99d0>
   1b560:	mov	r8, r2
   1b564:	mov	sl, r1
   1b568:	ldr	r1, [r0, #8]
   1b56c:	ldr	r2, [r0, #24]
   1b570:	mov	r4, r0
   1b574:	mov	r0, sl
   1b578:	blx	r2
   1b57c:	mov	r7, r0
   1b580:	ldr	r0, [r4, #8]
   1b584:	cmp	r7, r0
   1b588:	bcs	1b898 <__assert_fail@plt+0x99d0>
   1b58c:	ldr	r5, [r4]
   1b590:	mov	r9, r5
   1b594:	ldr	r1, [r9, r7, lsl #3]!
   1b598:	cmp	r1, #0
   1b59c:	beq	1b630 <__assert_fail@plt+0x9768>
   1b5a0:	cmp	r1, sl
   1b5a4:	beq	1b5d0 <__assert_fail@plt+0x9708>
   1b5a8:	ldr	r2, [r4, #28]
   1b5ac:	mov	r0, sl
   1b5b0:	blx	r2
   1b5b4:	cmp	r0, #0
   1b5b8:	mov	r6, r9
   1b5bc:	beq	1b5ec <__assert_fail@plt+0x9724>
   1b5c0:	ldr	r0, [r6]
   1b5c4:	cmp	r0, #0
   1b5c8:	bne	1b5d4 <__assert_fail@plt+0x970c>
   1b5cc:	b	1b630 <__assert_fail@plt+0x9768>
   1b5d0:	mov	r0, sl
   1b5d4:	cmp	r8, #0
   1b5d8:	mov	r7, #0
   1b5dc:	strne	r0, [r8]
   1b5e0:	mov	r0, r7
   1b5e4:	sub	sp, fp, #28
   1b5e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b5ec:	add	r6, r5, r7, lsl #3
   1b5f0:	ldr	r0, [r6, #4]!
   1b5f4:	cmp	r0, #0
   1b5f8:	beq	1b630 <__assert_fail@plt+0x9768>
   1b5fc:	ldr	r1, [r0]
   1b600:	cmp	r1, sl
   1b604:	beq	1b624 <__assert_fail@plt+0x975c>
   1b608:	ldr	r2, [r4, #28]
   1b60c:	mov	r0, sl
   1b610:	blx	r2
   1b614:	ldr	r6, [r6]
   1b618:	cmp	r0, #0
   1b61c:	beq	1b5f0 <__assert_fail@plt+0x9728>
   1b620:	b	1b5c0 <__assert_fail@plt+0x96f8>
   1b624:	mov	r0, sl
   1b628:	cmp	r0, #0
   1b62c:	bne	1b5d4 <__assert_fail@plt+0x970c>
   1b630:	vldr	s0, [r4, #8]
   1b634:	vldr	s2, [r4, #12]
   1b638:	ldr	r0, [r4, #20]
   1b63c:	vcvt.f32.u32	s0, s0
   1b640:	vcvt.f32.u32	s4, s2
   1b644:	vldr	s2, [r0, #8]
   1b648:	vmul.f32	s6, s2, s0
   1b64c:	vcmpe.f32	s6, s4
   1b650:	vmrs	APSR_nzcv, fpscr
   1b654:	bpl	1b7b8 <__assert_fail@plt+0x98f0>
   1b658:	movw	r1, #46984	; 0xb788
   1b65c:	movt	r1, #3
   1b660:	cmp	r0, r1
   1b664:	beq	1b700 <__assert_fail@plt+0x9838>
   1b668:	vldr	s6, [pc, #556]	; 1b89c <__assert_fail@plt+0x99d4>
   1b66c:	vcmpe.f32	s2, s6
   1b670:	vmrs	APSR_nzcv, fpscr
   1b674:	ble	1b6dc <__assert_fail@plt+0x9814>
   1b678:	vldr	s8, [pc, #544]	; 1b8a0 <__assert_fail@plt+0x99d8>
   1b67c:	vcmpe.f32	s2, s8
   1b680:	vmrs	APSR_nzcv, fpscr
   1b684:	bpl	1b6dc <__assert_fail@plt+0x9814>
   1b688:	vldr	s8, [pc, #532]	; 1b8a4 <__assert_fail@plt+0x99dc>
   1b68c:	vldr	s10, [r0, #12]
   1b690:	vcmpe.f32	s10, s8
   1b694:	vmrs	APSR_nzcv, fpscr
   1b698:	ble	1b6dc <__assert_fail@plt+0x9814>
   1b69c:	vldr	s8, [r0]
   1b6a0:	vcmpe.f32	s8, #0.0
   1b6a4:	vmrs	APSR_nzcv, fpscr
   1b6a8:	blt	1b6dc <__assert_fail@plt+0x9814>
   1b6ac:	vadd.f32	s6, s8, s6
   1b6b0:	vcmpe.f32	s6, s2
   1b6b4:	vmrs	APSR_nzcv, fpscr
   1b6b8:	bpl	1b6dc <__assert_fail@plt+0x9814>
   1b6bc:	vldr	s8, [r0, #4]
   1b6c0:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1b6c4:	vcmpe.f32	s8, s10
   1b6c8:	vmrs	APSR_nzcv, fpscr
   1b6cc:	bhi	1b6dc <__assert_fail@plt+0x9814>
   1b6d0:	vcmpe.f32	s6, s8
   1b6d4:	vmrs	APSR_nzcv, fpscr
   1b6d8:	bmi	1b6ec <__assert_fail@plt+0x9824>
   1b6dc:	vldr	s2, [pc, #452]	; 1b8a8 <__assert_fail@plt+0x99e0>
   1b6e0:	movw	r0, #46984	; 0xb788
   1b6e4:	movt	r0, #3
   1b6e8:	str	r0, [r4, #20]
   1b6ec:	vmul.f32	s6, s2, s0
   1b6f0:	vcmpe.f32	s6, s4
   1b6f4:	vmrs	APSR_nzcv, fpscr
   1b6f8:	bmi	1b714 <__assert_fail@plt+0x984c>
   1b6fc:	b	1b7b8 <__assert_fail@plt+0x98f0>
   1b700:	mov	r0, r1
   1b704:	vmul.f32	s6, s2, s0
   1b708:	vcmpe.f32	s6, s4
   1b70c:	vmrs	APSR_nzcv, fpscr
   1b710:	bpl	1b7b8 <__assert_fail@plt+0x98f0>
   1b714:	vldr	s4, [r0, #12]
   1b718:	ldrb	r0, [r0, #16]
   1b71c:	mvn	r7, #0
   1b720:	cmp	r0, #0
   1b724:	vmul.f32	s0, s4, s0
   1b728:	vldr	s4, [pc, #380]	; 1b8ac <__assert_fail@plt+0x99e4>
   1b72c:	vmul.f32	s2, s2, s0
   1b730:	vseleq.f32	s0, s2, s0
   1b734:	vcmpe.f32	s0, s4
   1b738:	vmrs	APSR_nzcv, fpscr
   1b73c:	bge	1b82c <__assert_fail@plt+0x9964>
   1b740:	vcvt.u32.f32	s0, s0
   1b744:	mov	r0, r4
   1b748:	vmov	r1, s0
   1b74c:	bl	1b074 <__assert_fail@plt+0x91ac>
   1b750:	cmp	r0, #0
   1b754:	beq	1b82c <__assert_fail@plt+0x9964>
   1b758:	ldr	r1, [r4, #8]
   1b75c:	ldr	r2, [r4, #24]
   1b760:	mov	r0, sl
   1b764:	blx	r2
   1b768:	mov	r7, r0
   1b76c:	ldr	r0, [r4, #8]
   1b770:	cmp	r7, r0
   1b774:	bcs	1b898 <__assert_fail@plt+0x99d0>
   1b778:	ldr	r5, [r4]
   1b77c:	mov	r9, r5
   1b780:	ldr	r1, [r9, r7, lsl #3]!
   1b784:	cmp	r1, #0
   1b788:	beq	1b7b8 <__assert_fail@plt+0x98f0>
   1b78c:	cmp	r1, sl
   1b790:	mov	r0, sl
   1b794:	beq	1b7b0 <__assert_fail@plt+0x98e8>
   1b798:	ldr	r2, [r4, #28]
   1b79c:	mov	r0, sl
   1b7a0:	blx	r2
   1b7a4:	cmp	r0, #0
   1b7a8:	beq	1b848 <__assert_fail@plt+0x9980>
   1b7ac:	ldr	r0, [r9]
   1b7b0:	cmp	r0, #0
   1b7b4:	bne	1b898 <__assert_fail@plt+0x99d0>
   1b7b8:	ldr	r0, [r9]
   1b7bc:	cmp	r0, #0
   1b7c0:	beq	1b7dc <__assert_fail@plt+0x9914>
   1b7c4:	ldr	r0, [r4, #36]	; 0x24
   1b7c8:	cmp	r0, #0
   1b7cc:	beq	1b7fc <__assert_fail@plt+0x9934>
   1b7d0:	ldr	r1, [r0, #4]
   1b7d4:	str	r1, [r4, #36]	; 0x24
   1b7d8:	b	1b80c <__assert_fail@plt+0x9944>
   1b7dc:	str	sl, [r9]
   1b7e0:	ldr	r0, [r4, #12]
   1b7e4:	ldr	r1, [r4, #16]
   1b7e8:	add	r0, r0, #1
   1b7ec:	add	r1, r1, #1
   1b7f0:	str	r0, [r4, #12]
   1b7f4:	str	r1, [r4, #16]
   1b7f8:	b	1b828 <__assert_fail@plt+0x9960>
   1b7fc:	mov	r0, #8
   1b800:	bl	38450 <__assert_fail@plt+0x26588>
   1b804:	cmp	r0, #0
   1b808:	beq	1b838 <__assert_fail@plt+0x9970>
   1b80c:	str	sl, [r0]
   1b810:	ldr	r1, [r9, #4]
   1b814:	str	r1, [r0, #4]
   1b818:	str	r0, [r9, #4]
   1b81c:	ldr	r0, [r4, #16]
   1b820:	add	r0, r0, #1
   1b824:	str	r0, [r4, #16]
   1b828:	mov	r7, #1
   1b82c:	mov	r0, r7
   1b830:	sub	sp, fp, #28
   1b834:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b838:	mvn	r7, #0
   1b83c:	mov	r0, r7
   1b840:	sub	sp, fp, #28
   1b844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b848:	add	r6, r5, r7, lsl #3
   1b84c:	ldr	r0, [r6, #4]!
   1b850:	cmp	r0, #0
   1b854:	beq	1b7b8 <__assert_fail@plt+0x98f0>
   1b858:	ldr	r1, [r0]
   1b85c:	cmp	r1, sl
   1b860:	beq	1b88c <__assert_fail@plt+0x99c4>
   1b864:	ldr	r2, [r4, #28]
   1b868:	mov	r0, sl
   1b86c:	blx	r2
   1b870:	ldr	r6, [r6]
   1b874:	cmp	r0, #0
   1b878:	beq	1b84c <__assert_fail@plt+0x9984>
   1b87c:	ldr	r0, [r6]
   1b880:	cmp	r0, #0
   1b884:	beq	1b7b8 <__assert_fail@plt+0x98f0>
   1b888:	b	1b898 <__assert_fail@plt+0x99d0>
   1b88c:	mov	r0, sl
   1b890:	cmp	r0, #0
   1b894:	beq	1b7b8 <__assert_fail@plt+0x98f0>
   1b898:	bl	11e8c <abort@plt>
   1b89c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1b8a0:	svccc	0x00666666
   1b8a4:	svccc	0x008ccccd
   1b8a8:	svccc	0x004ccccd
   1b8ac:	svcmi	0x00800000
   1b8b0:	push	{r4, sl, fp, lr}
   1b8b4:	add	fp, sp, #8
   1b8b8:	sub	sp, sp, #8
   1b8bc:	add	r2, sp, #4
   1b8c0:	mov	r4, r1
   1b8c4:	bl	1b54c <__assert_fail@plt+0x9684>
   1b8c8:	cmn	r0, #1
   1b8cc:	beq	1b8e8 <__assert_fail@plt+0x9a20>
   1b8d0:	ldr	r1, [sp, #4]
   1b8d4:	cmp	r0, #0
   1b8d8:	moveq	r4, r1
   1b8dc:	mov	r0, r4
   1b8e0:	sub	sp, fp, #8
   1b8e4:	pop	{r4, sl, fp, pc}
   1b8e8:	mov	r4, #0
   1b8ec:	mov	r0, r4
   1b8f0:	sub	sp, fp, #8
   1b8f4:	pop	{r4, sl, fp, pc}
   1b8f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b8fc:	add	fp, sp, #24
   1b900:	mov	r9, r1
   1b904:	ldr	r1, [r0, #8]
   1b908:	ldr	r2, [r0, #24]
   1b90c:	mov	r5, r0
   1b910:	mov	r0, r9
   1b914:	blx	r2
   1b918:	mov	r7, r0
   1b91c:	ldr	r0, [r5, #8]
   1b920:	cmp	r7, r0
   1b924:	bcs	1bb98 <__assert_fail@plt+0x9cd0>
   1b928:	ldr	r6, [r5]
   1b92c:	mov	r8, #0
   1b930:	mov	r4, r6
   1b934:	ldr	r1, [r4, r7, lsl #3]!
   1b938:	cmp	r1, #0
   1b93c:	beq	1b9f0 <__assert_fail@plt+0x9b28>
   1b940:	cmp	r1, r9
   1b944:	beq	1b960 <__assert_fail@plt+0x9a98>
   1b948:	ldr	r2, [r5, #28]
   1b94c:	mov	r0, r9
   1b950:	blx	r2
   1b954:	cmp	r0, #0
   1b958:	beq	1b998 <__assert_fail@plt+0x9ad0>
   1b95c:	ldr	r9, [r4]
   1b960:	add	r0, r6, r7, lsl #3
   1b964:	ldr	r0, [r0, #4]
   1b968:	cmp	r0, #0
   1b96c:	beq	1b9e0 <__assert_fail@plt+0x9b18>
   1b970:	ldm	r0, {r1, r2}
   1b974:	stm	r4, {r1, r2}
   1b978:	mov	r1, #0
   1b97c:	str	r1, [r0]
   1b980:	ldr	r1, [r5, #36]	; 0x24
   1b984:	str	r1, [r0, #4]
   1b988:	str	r0, [r5, #36]	; 0x24
   1b98c:	cmp	r9, #0
   1b990:	bne	1ba28 <__assert_fail@plt+0x9b60>
   1b994:	b	1b9f0 <__assert_fail@plt+0x9b28>
   1b998:	add	r7, r6, r7, lsl #3
   1b99c:	ldr	r0, [r7, #4]!
   1b9a0:	cmp	r0, #0
   1b9a4:	beq	1b9f0 <__assert_fail@plt+0x9b28>
   1b9a8:	ldr	r1, [r0]
   1b9ac:	cmp	r1, r9
   1b9b0:	beq	1b9f8 <__assert_fail@plt+0x9b30>
   1b9b4:	ldr	r2, [r5, #28]
   1b9b8:	mov	r0, r9
   1b9bc:	blx	r2
   1b9c0:	ldr	r1, [r7]
   1b9c4:	cmp	r0, #0
   1b9c8:	bne	1ba00 <__assert_fail@plt+0x9b38>
   1b9cc:	ldr	r0, [r1, #4]!
   1b9d0:	mov	r7, r1
   1b9d4:	cmp	r0, #0
   1b9d8:	bne	1b9a8 <__assert_fail@plt+0x9ae0>
   1b9dc:	b	1b9f0 <__assert_fail@plt+0x9b28>
   1b9e0:	mov	r0, #0
   1b9e4:	str	r0, [r4]
   1b9e8:	cmp	r9, #0
   1b9ec:	bne	1ba28 <__assert_fail@plt+0x9b60>
   1b9f0:	mov	r0, r8
   1b9f4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b9f8:	mov	r1, r0
   1b9fc:	b	1ba04 <__assert_fail@plt+0x9b3c>
   1ba00:	ldr	r9, [r1]
   1ba04:	ldr	r0, [r1, #4]
   1ba08:	str	r0, [r7]
   1ba0c:	mov	r0, #0
   1ba10:	str	r0, [r1]
   1ba14:	ldr	r0, [r5, #36]	; 0x24
   1ba18:	str	r0, [r1, #4]
   1ba1c:	str	r1, [r5, #36]	; 0x24
   1ba20:	cmp	r9, #0
   1ba24:	beq	1b9f0 <__assert_fail@plt+0x9b28>
   1ba28:	ldr	r0, [r5, #16]
   1ba2c:	sub	r0, r0, #1
   1ba30:	str	r0, [r5, #16]
   1ba34:	ldr	r0, [r4]
   1ba38:	cmp	r0, #0
   1ba3c:	bne	1bb8c <__assert_fail@plt+0x9cc4>
   1ba40:	ldr	r0, [r5, #12]
   1ba44:	vldr	s0, [r5, #8]
   1ba48:	sub	r1, r0, #1
   1ba4c:	str	r1, [r5, #12]
   1ba50:	vmov	s2, r1
   1ba54:	ldr	r0, [r5, #20]
   1ba58:	vcvt.f32.u32	s0, s0
   1ba5c:	vcvt.f32.u32	s2, s2
   1ba60:	vldr	s4, [r0]
   1ba64:	vmul.f32	s6, s4, s0
   1ba68:	vcmpe.f32	s6, s2
   1ba6c:	vmrs	APSR_nzcv, fpscr
   1ba70:	ble	1bb8c <__assert_fail@plt+0x9cc4>
   1ba74:	movw	r1, #46984	; 0xb788
   1ba78:	movt	r1, #3
   1ba7c:	cmp	r0, r1
   1ba80:	beq	1bb1c <__assert_fail@plt+0x9c54>
   1ba84:	vldr	s8, [pc, #272]	; 1bb9c <__assert_fail@plt+0x9cd4>
   1ba88:	vldr	s6, [r0, #8]
   1ba8c:	vcmpe.f32	s6, s8
   1ba90:	vmrs	APSR_nzcv, fpscr
   1ba94:	ble	1baf8 <__assert_fail@plt+0x9c30>
   1ba98:	vldr	s10, [pc, #256]	; 1bba0 <__assert_fail@plt+0x9cd8>
   1ba9c:	vcmpe.f32	s6, s10
   1baa0:	vmrs	APSR_nzcv, fpscr
   1baa4:	bpl	1baf8 <__assert_fail@plt+0x9c30>
   1baa8:	vcmpe.f32	s4, #0.0
   1baac:	vmrs	APSR_nzcv, fpscr
   1bab0:	blt	1baf8 <__assert_fail@plt+0x9c30>
   1bab4:	vldr	s10, [r0, #12]
   1bab8:	vldr	s12, [pc, #228]	; 1bba4 <__assert_fail@plt+0x9cdc>
   1babc:	vcmpe.f32	s10, s12
   1bac0:	vmrs	APSR_nzcv, fpscr
   1bac4:	ble	1baf8 <__assert_fail@plt+0x9c30>
   1bac8:	vadd.f32	s8, s4, s8
   1bacc:	vcmpe.f32	s8, s6
   1bad0:	vmrs	APSR_nzcv, fpscr
   1bad4:	bpl	1baf8 <__assert_fail@plt+0x9c30>
   1bad8:	vldr	s6, [r0, #4]
   1badc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   1bae0:	vcmpe.f32	s6, s10
   1bae4:	vmrs	APSR_nzcv, fpscr
   1bae8:	bhi	1baf8 <__assert_fail@plt+0x9c30>
   1baec:	vcmpe.f32	s8, s6
   1baf0:	vmrs	APSR_nzcv, fpscr
   1baf4:	bmi	1bb08 <__assert_fail@plt+0x9c40>
   1baf8:	vldr	s4, [pc, #168]	; 1bba8 <__assert_fail@plt+0x9ce0>
   1bafc:	movw	r0, #46984	; 0xb788
   1bb00:	movt	r0, #3
   1bb04:	str	r0, [r5, #20]
   1bb08:	vmul.f32	s4, s4, s0
   1bb0c:	vcmpe.f32	s4, s2
   1bb10:	vmrs	APSR_nzcv, fpscr
   1bb14:	bgt	1bb30 <__assert_fail@plt+0x9c68>
   1bb18:	b	1bb8c <__assert_fail@plt+0x9cc4>
   1bb1c:	mov	r0, r1
   1bb20:	vmul.f32	s4, s4, s0
   1bb24:	vcmpe.f32	s4, s2
   1bb28:	vmrs	APSR_nzcv, fpscr
   1bb2c:	ble	1bb8c <__assert_fail@plt+0x9cc4>
   1bb30:	vldr	s2, [r0, #4]
   1bb34:	ldrb	r1, [r0, #16]
   1bb38:	cmp	r1, #0
   1bb3c:	vmul.f32	s0, s2, s0
   1bb40:	bne	1bb4c <__assert_fail@plt+0x9c84>
   1bb44:	vldr	s2, [r0, #8]
   1bb48:	vmul.f32	s0, s0, s2
   1bb4c:	vcvt.u32.f32	s0, s0
   1bb50:	mov	r0, r5
   1bb54:	vmov	r1, s0
   1bb58:	bl	1b074 <__assert_fail@plt+0x91ac>
   1bb5c:	cmp	r0, #0
   1bb60:	bne	1bb8c <__assert_fail@plt+0x9cc4>
   1bb64:	ldr	r0, [r5, #36]	; 0x24
   1bb68:	cmp	r0, #0
   1bb6c:	beq	1bb84 <__assert_fail@plt+0x9cbc>
   1bb70:	ldr	r4, [r0, #4]
   1bb74:	bl	17c10 <__assert_fail@plt+0x5d48>
   1bb78:	cmp	r4, #0
   1bb7c:	mov	r0, r4
   1bb80:	bne	1bb70 <__assert_fail@plt+0x9ca8>
   1bb84:	mov	r0, #0
   1bb88:	str	r0, [r5, #36]	; 0x24
   1bb8c:	mov	r8, r9
   1bb90:	mov	r0, r8
   1bb94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1bb98:	bl	11e8c <abort@plt>
   1bb9c:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bba0:	svccc	0x00666666
   1bba4:	svccc	0x008ccccd
   1bba8:	andeq	r0, r0, r0
   1bbac:	b	1b8f8 <__assert_fail@plt+0x9a30>
   1bbb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bbb4:	add	fp, sp, #28
   1bbb8:	sub	sp, sp, #4
   1bbbc:	vpush	{d8-d9}
   1bbc0:	sub	sp, sp, #104	; 0x68
   1bbc4:	mov	r6, r3
   1bbc8:	mov	r7, r2
   1bbcc:	str	r1, [sp, #44]	; 0x2c
   1bbd0:	mov	sl, r0
   1bbd4:	bl	11dcc <localeconv@plt>
   1bbd8:	ldr	r5, [r0]
   1bbdc:	mov	r4, r0
   1bbe0:	mov	r0, r5
   1bbe4:	bl	11cac <strlen@plt>
   1bbe8:	sub	r1, r0, #1
   1bbec:	movw	r2, #46824	; 0xb6e8
   1bbf0:	cmp	r1, #16
   1bbf4:	movt	r2, #3
   1bbf8:	movcs	r0, #1
   1bbfc:	movcc	r2, r5
   1bc00:	ldr	r5, [r4, #4]
   1bc04:	str	r0, [sp, #12]
   1bc08:	ldr	r0, [r4, #8]
   1bc0c:	str	r2, [sp, #8]
   1bc10:	str	r0, [sp, #16]
   1bc14:	mov	r0, r5
   1bc18:	bl	11cac <strlen@plt>
   1bc1c:	cmp	r0, #17
   1bc20:	movw	r0, #647	; 0x287
   1bc24:	movw	r1, #43540	; 0xaa14
   1bc28:	str	r7, [sp, #32]
   1bc2c:	ldr	r4, [fp, #16]
   1bc30:	str	r6, [sp, #40]	; 0x28
   1bc34:	add	r0, r7, r0
   1bc38:	movt	r1, #3
   1bc3c:	movcc	r1, r5
   1bc40:	ldr	r7, [fp, #8]
   1bc44:	ldr	r5, [fp, #12]
   1bc48:	str	r0, [sp, #36]	; 0x24
   1bc4c:	ands	r0, r6, #32
   1bc50:	str	r1, [sp, #52]	; 0x34
   1bc54:	str	r0, [sp, #24]
   1bc58:	mov	r0, #1000	; 0x3e8
   1bc5c:	movwne	r0, #1024	; 0x400
   1bc60:	str	r0, [sp, #20]
   1bc64:	and	r0, r6, #3
   1bc68:	ldr	r6, [fp, #20]
   1bc6c:	str	r0, [sp, #48]	; 0x30
   1bc70:	subs	r0, r7, r4
   1bc74:	sbcs	r0, r5, r6
   1bc78:	bcs	1bd64 <__assert_fail@plt+0x9e9c>
   1bc7c:	orrs	r0, r7, r5
   1bc80:	beq	1be6c <__assert_fail@plt+0x9fa4>
   1bc84:	ldr	r9, [fp, #16]
   1bc88:	mov	r1, r6
   1bc8c:	mov	r2, r7
   1bc90:	mov	r3, r5
   1bc94:	mov	r0, r9
   1bc98:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1bc9c:	mov	r4, r0
   1bca0:	mov	r8, r1
   1bca4:	umull	r0, r1, r0, r7
   1bca8:	mla	r1, r4, r5, r1
   1bcac:	mla	r1, r8, r7, r1
   1bcb0:	subs	r0, r9, r0
   1bcb4:	sbc	r1, r6, r1
   1bcb8:	orrs	r0, r0, r1
   1bcbc:	bne	1be6c <__assert_fail@plt+0x9fa4>
   1bcc0:	ldr	r5, [sp, #44]	; 0x2c
   1bcc4:	mov	r0, sl
   1bcc8:	mov	r2, r4
   1bccc:	mov	r3, r8
   1bcd0:	mov	r1, r5
   1bcd4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1bcd8:	mov	r9, r1
   1bcdc:	umull	r2, r1, r0, r4
   1bce0:	str	r0, [sp, #28]
   1bce4:	mov	r3, r8
   1bce8:	mla	r1, r0, r8, r1
   1bcec:	mla	r1, r9, r4, r1
   1bcf0:	subs	r0, sl, r2
   1bcf4:	mov	r2, #10
   1bcf8:	sbc	r1, r5, r1
   1bcfc:	umull	r5, r0, r0, r2
   1bd00:	mov	r2, r4
   1bd04:	add	r1, r1, r1, lsl #2
   1bd08:	add	r6, r0, r1, lsl #1
   1bd0c:	mov	r0, r5
   1bd10:	mov	r1, r6
   1bd14:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1bd18:	mov	r7, r0
   1bd1c:	umull	r0, r2, r0, r4
   1bd20:	mla	r2, r7, r8, r2
   1bd24:	mla	r1, r1, r4, r2
   1bd28:	mov	r2, #2
   1bd2c:	subs	r0, r5, r0
   1bd30:	sbc	r1, r6, r1
   1bd34:	subs	r3, r4, r0, lsl #1
   1bd38:	lsl	r1, r1, #1
   1bd3c:	orr	r1, r1, r0, lsr #31
   1bd40:	orr	ip, r1, r0, lsl #1
   1bd44:	sbcs	r3, r8, r1
   1bd48:	movwcc	r2, #3
   1bd4c:	cmp	ip, #0
   1bd50:	movwne	ip, #1
   1bd54:	rsbs	r0, r4, r0, lsl #1
   1bd58:	sbcs	r0, r1, r8
   1bd5c:	movcs	ip, r2
   1bd60:	b	1bdd0 <__assert_fail@plt+0x9f08>
   1bd64:	mov	r0, r7
   1bd68:	mov	r1, r5
   1bd6c:	mov	r2, r4
   1bd70:	mov	r3, r6
   1bd74:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1bd78:	mov	r2, r0
   1bd7c:	mov	r3, r1
   1bd80:	umull	r0, r1, r0, r4
   1bd84:	mla	r1, r2, r6, r1
   1bd88:	mla	r1, r3, r4, r1
   1bd8c:	subs	r0, r7, r0
   1bd90:	sbc	r1, r5, r1
   1bd94:	orrs	r0, r0, r1
   1bd98:	bne	1be6c <__assert_fail@plt+0x9fa4>
   1bd9c:	ldr	r4, [sp, #44]	; 0x2c
   1bda0:	umull	r0, r1, r2, sl
   1bda4:	mla	r1, r2, r4, r1
   1bda8:	str	r0, [sp, #28]
   1bdac:	mla	r9, r3, sl, r1
   1bdb0:	mov	r1, r9
   1bdb4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1bdb8:	eor	r1, r1, r4
   1bdbc:	eor	r0, r0, sl
   1bdc0:	orrs	r0, r0, r1
   1bdc4:	bne	1be6c <__assert_fail@plt+0x9fa4>
   1bdc8:	mov	ip, #0
   1bdcc:	mov	r7, #0
   1bdd0:	ldr	r0, [sp, #40]	; 0x28
   1bdd4:	ldr	r8, [sp, #20]
   1bdd8:	ldr	r5, [sp, #48]	; 0x30
   1bddc:	mvn	r3, #0
   1bde0:	ands	r4, r0, #16
   1bde4:	beq	1c180 <__assert_fail@plt+0xa2b8>
   1bde8:	ldr	sl, [sp, #28]
   1bdec:	mov	r3, #0
   1bdf0:	subs	r0, sl, r8
   1bdf4:	sbcs	r0, r9, #0
   1bdf8:	bcc	1c744 <__assert_fail@plt+0xa87c>
   1bdfc:	mov	r0, sl
   1be00:	mov	r1, r9
   1be04:	mov	r2, r8
   1be08:	mov	r3, #0
   1be0c:	mov	r6, r5
   1be10:	mov	r5, ip
   1be14:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1be18:	mov	r3, sl
   1be1c:	mov	sl, r0
   1be20:	mov	r2, r5
   1be24:	mov	r9, r1
   1be28:	mls	r0, r0, r8, r3
   1be2c:	add	r0, r0, r0, lsl #2
   1be30:	add	r0, r7, r0, lsl #1
   1be34:	udiv	r7, r0, r8
   1be38:	mls	r0, r7, r8, r0
   1be3c:	lsl	r0, r0, #1
   1be40:	orr	r0, r0, r5, lsr #1
   1be44:	cmp	r0, r8
   1be48:	bcs	1c388 <__assert_fail@plt+0xa4c0>
   1be4c:	rsb	r1, r2, #0
   1be50:	subs	ip, r0, r1
   1be54:	movwne	ip, #1
   1be58:	subs	r0, sl, r8
   1be5c:	mov	r3, #1
   1be60:	sbcs	r0, r9, #0
   1be64:	bcs	1c3a8 <__assert_fail@plt+0xa4e0>
   1be68:	b	1c4cc <__assert_fail@plt+0xa604>
   1be6c:	ldr	r9, [fp, #16]
   1be70:	mov	r1, r6
   1be74:	mov	r0, r9
   1be78:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1be7c:	vmov	d8, r0, r1
   1be80:	ldr	r1, [sp, #44]	; 0x2c
   1be84:	mov	r0, sl
   1be88:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1be8c:	mov	r4, r0
   1be90:	mov	r6, r1
   1be94:	mov	r0, r7
   1be98:	mov	r1, r5
   1be9c:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1bea0:	vmov	d16, r0, r1
   1bea4:	vmov	d17, r4, r6
   1bea8:	ldr	r5, [sp, #40]	; 0x28
   1beac:	tst	r5, #16
   1beb0:	vdiv.f64	d16, d16, d8
   1beb4:	vmul.f64	d8, d16, d17
   1beb8:	bne	1bf38 <__assert_fail@plt+0xa070>
   1bebc:	ldr	r6, [sp, #48]	; 0x30
   1bec0:	cmp	r6, #1
   1bec4:	beq	1c1c8 <__assert_fail@plt+0xa300>
   1bec8:	vldr	d16, [pc, #752]	; 1c1c0 <__assert_fail@plt+0xa2f8>
   1becc:	ldr	r7, [sp, #36]	; 0x24
   1bed0:	ldr	sl, [sp, #32]
   1bed4:	vcmpe.f64	d8, d16
   1bed8:	vmrs	APSR_nzcv, fpscr
   1bedc:	bpl	1c1d0 <__assert_fail@plt+0xa308>
   1bee0:	vmov	r0, r1, d8
   1bee4:	bl	39d08 <__assert_fail@plt+0x27e40>
   1bee8:	mov	r4, r0
   1beec:	mov	r8, r1
   1bef0:	mov	r0, #0
   1bef4:	cmp	r6, #0
   1bef8:	mov	r2, #0
   1befc:	bne	1bf24 <__assert_fail@plt+0xa05c>
   1bf00:	mov	r0, r4
   1bf04:	mov	r1, r8
   1bf08:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1bf0c:	vmov	d16, r0, r1
   1bf10:	mov	r2, #0
   1bf14:	mov	r0, #0
   1bf18:	vcmp.f64	d8, d16
   1bf1c:	vmrs	APSR_nzcv, fpscr
   1bf20:	movwne	r0, #1
   1bf24:	adds	r0, r0, r4
   1bf28:	adc	r1, r2, r8
   1bf2c:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1bf30:	vmov	d8, r0, r1
   1bf34:	b	1c1d0 <__assert_fail@plt+0xa308>
   1bf38:	ldr	r0, [sp, #20]
   1bf3c:	mov	r1, #1
   1bf40:	vmov	s0, r0
   1bf44:	vcvt.f64.u32	d16, s0
   1bf48:	ldr	r6, [sp, #48]	; 0x30
   1bf4c:	vmul.f64	d17, d16, d16
   1bf50:	vcmpe.f64	d17, d8
   1bf54:	vmrs	APSR_nzcv, fpscr
   1bf58:	bls	1bf70 <__assert_fail@plt+0xa0a8>
   1bf5c:	ldr	r7, [sp, #36]	; 0x24
   1bf60:	ldr	sl, [sp, #32]
   1bf64:	ldr	r9, [sp, #12]
   1bf68:	vmov.f64	d17, d16
   1bf6c:	b	1c00c <__assert_fail@plt+0xa144>
   1bf70:	vmul.f64	d18, d17, d16
   1bf74:	ldr	r7, [sp, #36]	; 0x24
   1bf78:	ldr	sl, [sp, #32]
   1bf7c:	ldr	r9, [sp, #12]
   1bf80:	mov	r1, #2
   1bf84:	vcmpe.f64	d18, d8
   1bf88:	vmrs	APSR_nzcv, fpscr
   1bf8c:	bhi	1c00c <__assert_fail@plt+0xa144>
   1bf90:	vmul.f64	d19, d18, d16
   1bf94:	vmov.f64	d17, d18
   1bf98:	mov	r1, #3
   1bf9c:	vcmpe.f64	d19, d8
   1bfa0:	vmrs	APSR_nzcv, fpscr
   1bfa4:	bhi	1c00c <__assert_fail@plt+0xa144>
   1bfa8:	vmul.f64	d18, d19, d16
   1bfac:	vmov.f64	d17, d19
   1bfb0:	mov	r1, #4
   1bfb4:	vcmpe.f64	d18, d8
   1bfb8:	vmrs	APSR_nzcv, fpscr
   1bfbc:	bhi	1c00c <__assert_fail@plt+0xa144>
   1bfc0:	vmul.f64	d19, d18, d16
   1bfc4:	vmov.f64	d17, d18
   1bfc8:	mov	r1, #5
   1bfcc:	vcmpe.f64	d19, d8
   1bfd0:	vmrs	APSR_nzcv, fpscr
   1bfd4:	bhi	1c00c <__assert_fail@plt+0xa144>
   1bfd8:	vmul.f64	d18, d19, d16
   1bfdc:	vmov.f64	d17, d19
   1bfe0:	mov	r1, #6
   1bfe4:	vcmpe.f64	d18, d8
   1bfe8:	vmrs	APSR_nzcv, fpscr
   1bfec:	bhi	1c00c <__assert_fail@plt+0xa144>
   1bff0:	vmul.f64	d16, d18, d16
   1bff4:	mov	r1, #7
   1bff8:	vmov.f64	d17, d18
   1bffc:	vcmpe.f64	d16, d8
   1c000:	vmrs	APSR_nzcv, fpscr
   1c004:	movls	r1, #8
   1c008:	vmovls.f64	d17, d16
   1c00c:	vdiv.f64	d8, d8, d17
   1c010:	cmp	r6, #1
   1c014:	str	r1, [sp, #28]
   1c018:	vmov.f64	d16, d8
   1c01c:	beq	1c08c <__assert_fail@plt+0xa1c4>
   1c020:	vldr	d16, [pc, #408]	; 1c1c0 <__assert_fail@plt+0xa2f8>
   1c024:	vcmpe.f64	d8, d16
   1c028:	vmov.f64	d16, d8
   1c02c:	vmrs	APSR_nzcv, fpscr
   1c030:	bpl	1c08c <__assert_fail@plt+0xa1c4>
   1c034:	vmov	r0, r1, d8
   1c038:	bl	39d08 <__assert_fail@plt+0x27e40>
   1c03c:	mov	r4, r0
   1c040:	mov	r8, r1
   1c044:	mov	r0, #0
   1c048:	cmp	r6, #0
   1c04c:	mov	r2, #0
   1c050:	bne	1c078 <__assert_fail@plt+0xa1b0>
   1c054:	mov	r0, r4
   1c058:	mov	r1, r8
   1c05c:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1c060:	vmov	d16, r0, r1
   1c064:	mov	r2, #0
   1c068:	mov	r0, #0
   1c06c:	vcmp.f64	d8, d16
   1c070:	vmrs	APSR_nzcv, fpscr
   1c074:	movwne	r0, #1
   1c078:	adds	r0, r0, r4
   1c07c:	adc	r1, r2, r8
   1c080:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1c084:	vmov	d16, r0, r1
   1c088:	ldr	r6, [sp, #48]	; 0x30
   1c08c:	movw	r3, #47010	; 0xb7a2
   1c090:	mov	r0, sl
   1c094:	mov	r1, #1
   1c098:	mvn	r2, #0
   1c09c:	vstr	d16, [sp]
   1c0a0:	movt	r3, #3
   1c0a4:	bl	11cf4 <__sprintf_chk@plt>
   1c0a8:	ldr	r1, [sp, #24]
   1c0ac:	mov	r0, #3
   1c0b0:	cmp	r1, #0
   1c0b4:	movwne	r0, #2
   1c0b8:	add	r4, r0, r9
   1c0bc:	mov	r0, sl
   1c0c0:	bl	11cac <strlen@plt>
   1c0c4:	cmp	r4, r0
   1c0c8:	bcs	1c148 <__assert_fail@plt+0xa280>
   1c0cc:	vmov.f64	d9, #36	; 0x41200000  10.0
   1c0d0:	cmp	r6, #1
   1c0d4:	vmul.f64	d8, d8, d9
   1c0d8:	beq	1c170 <__assert_fail@plt+0xa2a8>
   1c0dc:	vldr	d16, [pc, #220]	; 1c1c0 <__assert_fail@plt+0xa2f8>
   1c0e0:	vcmpe.f64	d8, d16
   1c0e4:	vmrs	APSR_nzcv, fpscr
   1c0e8:	bpl	1c170 <__assert_fail@plt+0xa2a8>
   1c0ec:	vmov	r0, r1, d8
   1c0f0:	bl	39d08 <__assert_fail@plt+0x27e40>
   1c0f4:	ldr	r9, [fp, #16]
   1c0f8:	mov	r4, r0
   1c0fc:	mov	r8, r1
   1c100:	mov	r0, #0
   1c104:	cmp	r6, #0
   1c108:	mov	r2, #0
   1c10c:	bne	1c134 <__assert_fail@plt+0xa26c>
   1c110:	mov	r0, r4
   1c114:	mov	r1, r8
   1c118:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1c11c:	vmov	d16, r0, r1
   1c120:	mov	r2, #0
   1c124:	mov	r0, #0
   1c128:	vcmp.f64	d8, d16
   1c12c:	vmrs	APSR_nzcv, fpscr
   1c130:	movwne	r0, #1
   1c134:	adds	r0, r0, r4
   1c138:	adc	r1, r2, r8
   1c13c:	bl	39b70 <__assert_fail@plt+0x27ca8>
   1c140:	vmov	d8, r0, r1
   1c144:	b	1c174 <__assert_fail@plt+0xa2ac>
   1c148:	mov	r2, r0
   1c14c:	add	r4, r9, #1
   1c150:	tst	r5, #8
   1c154:	beq	1c168 <__assert_fail@plt+0xa2a0>
   1c158:	add	r0, r2, sl
   1c15c:	ldrb	r0, [r0, #-1]
   1c160:	cmp	r0, #48	; 0x30
   1c164:	beq	1c0cc <__assert_fail@plt+0xa204>
   1c168:	ldr	r9, [fp, #16]
   1c16c:	b	1c204 <__assert_fail@plt+0xa33c>
   1c170:	ldr	r9, [fp, #16]
   1c174:	vdiv.f64	d16, d8, d9
   1c178:	vstr	d16, [sp]
   1c17c:	b	1c1dc <__assert_fail@plt+0xa314>
   1c180:	ldr	r6, [sp, #36]	; 0x24
   1c184:	ldr	sl, [sp, #28]
   1c188:	cmp	r5, #0
   1c18c:	beq	1c750 <__assert_fail@plt+0xa888>
   1c190:	cmp	r5, #1
   1c194:	bne	1c7c0 <__assert_fail@plt+0xa8f8>
   1c198:	mov	r0, #0
   1c19c:	rsbs	r1, ip, #0
   1c1a0:	and	r2, sl, #1
   1c1a4:	sbc	r0, r0, #0
   1c1a8:	eor	r1, r2, r1
   1c1ac:	orrs	r0, r1, r0
   1c1b0:	addne	r7, r7, #1
   1c1b4:	cmp	r7, #5
   1c1b8:	bgt	1c75c <__assert_fail@plt+0xa894>
   1c1bc:	b	1c7c0 <__assert_fail@plt+0xa8f8>
   1c1c0:	andeq	r0, r0, r0
   1c1c4:	mvnsmi	r0, #0
   1c1c8:	ldr	r7, [sp, #36]	; 0x24
   1c1cc:	ldr	sl, [sp, #32]
   1c1d0:	mvn	r0, #0
   1c1d4:	vstr	d8, [sp]
   1c1d8:	str	r0, [sp, #28]
   1c1dc:	movw	r3, #47004	; 0xb79c
   1c1e0:	mov	r0, sl
   1c1e4:	mov	r1, #1
   1c1e8:	mvn	r2, #0
   1c1ec:	movt	r3, #3
   1c1f0:	bl	11cf4 <__sprintf_chk@plt>
   1c1f4:	mov	r0, sl
   1c1f8:	bl	11cac <strlen@plt>
   1c1fc:	mov	r2, r0
   1c200:	mov	r4, #0
   1c204:	sub	r0, r7, r2
   1c208:	mov	r1, sl
   1c20c:	mov	r8, r0
   1c210:	bl	11a78 <memmove@plt>
   1c214:	sub	r6, r7, r4
   1c218:	tst	r5, #4
   1c21c:	bne	1c818 <__assert_fail@plt+0xa950>
   1c220:	ldr	r3, [sp, #28]
   1c224:	tst	r5, #128	; 0x80
   1c228:	beq	1c930 <__assert_fail@plt+0xaa68>
   1c22c:	cmn	r3, #1
   1c230:	bgt	1c31c <__assert_fail@plt+0xa454>
   1c234:	subs	r0, r9, #2
   1c238:	ldr	r0, [fp, #20]
   1c23c:	mov	r3, #0
   1c240:	sbcs	r0, r0, #0
   1c244:	bcc	1c31c <__assert_fail@plt+0xa454>
   1c248:	ldr	r0, [sp, #20]
   1c24c:	mov	r3, #1
   1c250:	subs	r0, r0, r9
   1c254:	ldr	r0, [fp, #20]
   1c258:	rscs	r0, r0, #0
   1c25c:	bcs	1c31c <__assert_fail@plt+0xa454>
   1c260:	ldr	r0, [sp, #20]
   1c264:	mov	r3, #2
   1c268:	umull	r1, r0, r0, r0
   1c26c:	subs	r2, r1, r9
   1c270:	ldr	r2, [fp, #20]
   1c274:	sbcs	r2, r0, r2
   1c278:	bcs	1c31c <__assert_fail@plt+0xa454>
   1c27c:	ldr	r3, [sp, #20]
   1c280:	umull	r1, r2, r1, r3
   1c284:	mla	r2, r0, r3, r2
   1c288:	mov	r3, #3
   1c28c:	subs	r0, r1, r9
   1c290:	ldr	r0, [fp, #20]
   1c294:	sbcs	r0, r2, r0
   1c298:	bcs	1c31c <__assert_fail@plt+0xa454>
   1c29c:	ldr	r3, [sp, #20]
   1c2a0:	umull	r0, r1, r1, r3
   1c2a4:	mla	r1, r2, r3, r1
   1c2a8:	mov	r3, #4
   1c2ac:	subs	r2, r0, r9
   1c2b0:	ldr	r2, [fp, #20]
   1c2b4:	sbcs	r2, r1, r2
   1c2b8:	bcs	1c31c <__assert_fail@plt+0xa454>
   1c2bc:	ldr	r3, [sp, #20]
   1c2c0:	umull	r0, r2, r0, r3
   1c2c4:	mla	r1, r1, r3, r2
   1c2c8:	mov	r3, #5
   1c2cc:	subs	r2, r0, r9
   1c2d0:	ldr	r2, [fp, #20]
   1c2d4:	sbcs	r2, r1, r2
   1c2d8:	bcs	1c31c <__assert_fail@plt+0xa454>
   1c2dc:	ldr	r3, [sp, #20]
   1c2e0:	umull	r0, r2, r0, r3
   1c2e4:	mla	r1, r1, r3, r2
   1c2e8:	mov	r3, #6
   1c2ec:	subs	r2, r0, r9
   1c2f0:	ldr	r2, [fp, #20]
   1c2f4:	sbcs	r2, r1, r2
   1c2f8:	bcs	1c31c <__assert_fail@plt+0xa454>
   1c2fc:	ldr	r3, [sp, #20]
   1c300:	umull	r0, r2, r0, r3
   1c304:	mla	r1, r1, r3, r2
   1c308:	mov	r3, #7
   1c30c:	subs	r0, r0, r9
   1c310:	ldr	r0, [fp, #20]
   1c314:	sbcs	r0, r1, r0
   1c318:	movwcc	r3, #8
   1c31c:	and	r0, r5, #256	; 0x100
   1c320:	tst	r5, #64	; 0x40
   1c324:	orrsne	r1, r3, r0
   1c328:	movne	r1, #32
   1c32c:	addne	r7, sl, #648	; 0x288
   1c330:	strbne	r1, [sl, #647]	; 0x287
   1c334:	cmp	r3, #0
   1c338:	beq	1c360 <__assert_fail@plt+0xa498>
   1c33c:	ldr	r1, [sp, #24]
   1c340:	cmp	r1, #0
   1c344:	moveq	r1, #107	; 0x6b
   1c348:	cmpeq	r3, #1
   1c34c:	beq	1c35c <__assert_fail@plt+0xa494>
   1c350:	movw	r1, #47060	; 0xb7d4
   1c354:	movt	r1, #3
   1c358:	ldrb	r1, [r1, r3]
   1c35c:	strb	r1, [r7], #1
   1c360:	cmp	r0, #0
   1c364:	beq	1c930 <__assert_fail@plt+0xaa68>
   1c368:	ldr	r0, [sp, #24]
   1c36c:	cmp	r0, #0
   1c370:	cmpne	r3, #0
   1c374:	movne	r0, #105	; 0x69
   1c378:	strbne	r0, [r7], #1
   1c37c:	mov	r0, #66	; 0x42
   1c380:	strb	r0, [r7], #1
   1c384:	b	1c930 <__assert_fail@plt+0xaa68>
   1c388:	add	r0, r0, r2
   1c38c:	mov	ip, #2
   1c390:	cmp	r8, r0
   1c394:	movwcc	ip, #3
   1c398:	subs	r0, sl, r8
   1c39c:	mov	r3, #1
   1c3a0:	sbcs	r0, r9, #0
   1c3a4:	bcc	1c4cc <__assert_fail@plt+0xa604>
   1c3a8:	mov	r0, sl
   1c3ac:	mov	r1, r9
   1c3b0:	mov	r2, r8
   1c3b4:	mov	r3, #0
   1c3b8:	str	r4, [sp, #44]	; 0x2c
   1c3bc:	mov	r4, ip
   1c3c0:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c3c4:	mov	r2, r4
   1c3c8:	mov	r4, r0
   1c3cc:	mls	r0, r0, r8, sl
   1c3d0:	mov	r9, r1
   1c3d4:	add	r0, r0, r0, lsl #2
   1c3d8:	add	r0, r7, r0, lsl #1
   1c3dc:	udiv	r7, r0, r8
   1c3e0:	mls	r0, r7, r8, r0
   1c3e4:	lsl	r0, r0, #1
   1c3e8:	orr	r0, r0, r2, lsr #1
   1c3ec:	cmp	r0, r8
   1c3f0:	bcs	1c414 <__assert_fail@plt+0xa54c>
   1c3f4:	rsb	r1, r2, #0
   1c3f8:	subs	ip, r0, r1
   1c3fc:	movwne	ip, #1
   1c400:	subs	r0, r4, r8
   1c404:	mov	r3, #2
   1c408:	sbcs	r0, r9, #0
   1c40c:	bcs	1c450 <__assert_fail@plt+0xa588>
   1c410:	b	1c434 <__assert_fail@plt+0xa56c>
   1c414:	add	r0, r0, r2
   1c418:	mov	ip, #2
   1c41c:	cmp	r8, r0
   1c420:	movwcc	ip, #3
   1c424:	subs	r0, r4, r8
   1c428:	mov	r3, #2
   1c42c:	sbcs	r0, r9, #0
   1c430:	bcs	1c450 <__assert_fail@plt+0xa588>
   1c434:	mov	sl, r4
   1c438:	ldr	r4, [sp, #44]	; 0x2c
   1c43c:	mov	r5, r6
   1c440:	rsbs	r0, sl, #9
   1c444:	rscs	r0, r9, #0
   1c448:	bcc	1c744 <__assert_fail@plt+0xa87c>
   1c44c:	b	1c4dc <__assert_fail@plt+0xa614>
   1c450:	mov	r0, r4
   1c454:	mov	r1, r9
   1c458:	mov	r2, r8
   1c45c:	mov	r3, #0
   1c460:	mov	r5, ip
   1c464:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c468:	mov	sl, r0
   1c46c:	mls	r0, r0, r8, r4
   1c470:	mov	r2, r5
   1c474:	mov	r9, r1
   1c478:	add	r0, r0, r0, lsl #2
   1c47c:	add	r0, r7, r0, lsl #1
   1c480:	udiv	r7, r0, r8
   1c484:	mls	r0, r7, r8, r0
   1c488:	lsl	r0, r0, #1
   1c48c:	orr	r0, r0, r5, lsr #1
   1c490:	cmp	r0, r8
   1c494:	bcs	1c4a8 <__assert_fail@plt+0xa5e0>
   1c498:	rsb	r1, r2, #0
   1c49c:	subs	ip, r0, r1
   1c4a0:	movwne	ip, #1
   1c4a4:	b	1c4b8 <__assert_fail@plt+0xa5f0>
   1c4a8:	add	r0, r0, r2
   1c4ac:	mov	ip, #2
   1c4b0:	cmp	r8, r0
   1c4b4:	movwcc	ip, #3
   1c4b8:	ldr	r4, [sp, #44]	; 0x2c
   1c4bc:	subs	r0, sl, r8
   1c4c0:	mov	r3, #3
   1c4c4:	sbcs	r0, r9, #0
   1c4c8:	bcs	1c5a8 <__assert_fail@plt+0xa6e0>
   1c4cc:	mov	r5, r6
   1c4d0:	rsbs	r0, sl, #9
   1c4d4:	rscs	r0, r9, #0
   1c4d8:	bcc	1c744 <__assert_fail@plt+0xa87c>
   1c4dc:	cmp	r5, #1
   1c4e0:	bne	1c4f8 <__assert_fail@plt+0xa630>
   1c4e4:	and	r0, r7, #1
   1c4e8:	add	r0, ip, r0
   1c4ec:	cmp	r0, #2
   1c4f0:	bhi	1c508 <__assert_fail@plt+0xa640>
   1c4f4:	b	1c53c <__assert_fail@plt+0xa674>
   1c4f8:	cmp	r5, #0
   1c4fc:	bne	1c53c <__assert_fail@plt+0xa674>
   1c500:	cmp	ip, #0
   1c504:	beq	1c53c <__assert_fail@plt+0xa674>
   1c508:	adds	r0, sl, #1
   1c50c:	add	r7, r7, #1
   1c510:	mov	ip, #0
   1c514:	adc	r1, r9, #0
   1c518:	cmp	r7, #10
   1c51c:	bne	1c53c <__assert_fail@plt+0xa674>
   1c520:	rsbs	r2, r0, #9
   1c524:	mov	r7, #0
   1c528:	mov	sl, r0
   1c52c:	mov	r9, r1
   1c530:	mov	ip, #0
   1c534:	rscs	r2, r1, #0
   1c538:	bcc	1c610 <__assert_fail@plt+0xa748>
   1c53c:	ldr	r0, [sp, #40]	; 0x28
   1c540:	tst	r0, #8
   1c544:	beq	1c564 <__assert_fail@plt+0xa69c>
   1c548:	cmp	r7, #0
   1c54c:	bne	1c564 <__assert_fail@plt+0xa69c>
   1c550:	ldr	r6, [sp, #36]	; 0x24
   1c554:	mov	r7, #0
   1c558:	cmp	r5, #0
   1c55c:	bne	1c190 <__assert_fail@plt+0xa2c8>
   1c560:	b	1c750 <__assert_fail@plt+0xa888>
   1c564:	ldr	r1, [sp, #32]
   1c568:	ldr	r2, [sp, #12]
   1c56c:	add	r0, r7, #48	; 0x30
   1c570:	mov	r7, r4
   1c574:	mov	r4, r3
   1c578:	strb	r0, [r1, #646]!	; 0x286
   1c57c:	sub	r0, r1, r2
   1c580:	ldr	r1, [sp, #8]
   1c584:	mov	r6, r0
   1c588:	bl	11ab4 <memcpy@plt>
   1c58c:	mov	r3, r4
   1c590:	mov	r4, r7
   1c594:	mov	ip, #0
   1c598:	mov	r7, #0
   1c59c:	cmp	r5, #0
   1c5a0:	bne	1c190 <__assert_fail@plt+0xa2c8>
   1c5a4:	b	1c750 <__assert_fail@plt+0xa888>
   1c5a8:	mov	r0, sl
   1c5ac:	mov	r1, r9
   1c5b0:	mov	r2, r8
   1c5b4:	mov	r3, #0
   1c5b8:	mov	r4, ip
   1c5bc:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c5c0:	mov	r2, r4
   1c5c4:	mov	r4, r0
   1c5c8:	mls	r0, r0, r8, sl
   1c5cc:	mov	r9, r1
   1c5d0:	add	r0, r0, r0, lsl #2
   1c5d4:	add	r0, r7, r0, lsl #1
   1c5d8:	udiv	r7, r0, r8
   1c5dc:	mls	r0, r7, r8, r0
   1c5e0:	lsl	r0, r0, #1
   1c5e4:	orr	r0, r0, r2, lsr #1
   1c5e8:	cmp	r0, r8
   1c5ec:	bcs	1c62c <__assert_fail@plt+0xa764>
   1c5f0:	rsb	r1, r2, #0
   1c5f4:	subs	ip, r0, r1
   1c5f8:	movwne	ip, #1
   1c5fc:	subs	r0, r4, r8
   1c600:	mov	r3, #4
   1c604:	sbcs	r0, r9, #0
   1c608:	bcc	1c434 <__assert_fail@plt+0xa56c>
   1c60c:	b	1c64c <__assert_fail@plt+0xa784>
   1c610:	ldr	r6, [sp, #36]	; 0x24
   1c614:	mov	ip, #0
   1c618:	mov	sl, #10
   1c61c:	mov	r9, #0
   1c620:	cmp	r5, #0
   1c624:	bne	1c190 <__assert_fail@plt+0xa2c8>
   1c628:	b	1c750 <__assert_fail@plt+0xa888>
   1c62c:	add	r0, r0, r2
   1c630:	mov	ip, #2
   1c634:	cmp	r8, r0
   1c638:	movwcc	ip, #3
   1c63c:	subs	r0, r4, r8
   1c640:	mov	r3, #4
   1c644:	sbcs	r0, r9, #0
   1c648:	bcc	1c434 <__assert_fail@plt+0xa56c>
   1c64c:	mov	r0, r4
   1c650:	mov	r1, r9
   1c654:	mov	r2, r8
   1c658:	mov	r3, #0
   1c65c:	mov	r5, ip
   1c660:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c664:	mov	sl, r0
   1c668:	mls	r0, r0, r8, r4
   1c66c:	mov	r2, r5
   1c670:	mov	r9, r1
   1c674:	add	r0, r0, r0, lsl #2
   1c678:	add	r0, r7, r0, lsl #1
   1c67c:	udiv	r7, r0, r8
   1c680:	mls	r0, r7, r8, r0
   1c684:	lsl	r0, r0, #1
   1c688:	orr	r0, r0, r5, lsr #1
   1c68c:	cmp	r0, r8
   1c690:	bcs	1c6a4 <__assert_fail@plt+0xa7dc>
   1c694:	rsb	r1, r2, #0
   1c698:	subs	ip, r0, r1
   1c69c:	movwne	ip, #1
   1c6a0:	b	1c6b4 <__assert_fail@plt+0xa7ec>
   1c6a4:	add	r0, r0, r2
   1c6a8:	mov	ip, #2
   1c6ac:	cmp	r8, r0
   1c6b0:	movwcc	ip, #3
   1c6b4:	ldr	r4, [sp, #44]	; 0x2c
   1c6b8:	subs	r0, sl, r8
   1c6bc:	mov	r3, #5
   1c6c0:	sbcs	r0, r9, #0
   1c6c4:	bcc	1c4cc <__assert_fail@plt+0xa604>
   1c6c8:	mov	r0, sl
   1c6cc:	mov	r1, r9
   1c6d0:	mov	r2, r8
   1c6d4:	mov	r3, #0
   1c6d8:	mov	r4, ip
   1c6dc:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c6e0:	mov	r2, r4
   1c6e4:	mov	r4, r0
   1c6e8:	mls	r0, r0, r8, sl
   1c6ec:	mov	r9, r1
   1c6f0:	add	r0, r0, r0, lsl #2
   1c6f4:	add	r0, r7, r0, lsl #1
   1c6f8:	udiv	r7, r0, r8
   1c6fc:	mls	r0, r7, r8, r0
   1c700:	lsl	r0, r0, #1
   1c704:	orr	r0, r0, r2, lsr #1
   1c708:	cmp	r0, r8
   1c70c:	bcs	1c94c <__assert_fail@plt+0xaa84>
   1c710:	rsb	r1, r2, #0
   1c714:	subs	ip, r0, r1
   1c718:	movwne	ip, #1
   1c71c:	subs	r0, r4, r8
   1c720:	mov	r3, #6
   1c724:	sbcs	r0, r9, #0
   1c728:	bcs	1c96c <__assert_fail@plt+0xaaa4>
   1c72c:	mov	sl, r4
   1c730:	ldr	r4, [sp, #44]	; 0x2c
   1c734:	mov	r5, r6
   1c738:	rsbs	r0, sl, #9
   1c73c:	rscs	r0, r9, #0
   1c740:	bcs	1c4dc <__assert_fail@plt+0xa614>
   1c744:	ldr	r6, [sp, #36]	; 0x24
   1c748:	cmp	r5, #0
   1c74c:	bne	1c190 <__assert_fail@plt+0xa2c8>
   1c750:	add	r0, r7, ip
   1c754:	cmp	r0, #1
   1c758:	blt	1c7c0 <__assert_fail@plt+0xa8f8>
   1c75c:	adds	sl, sl, #1
   1c760:	adc	r9, r9, #0
   1c764:	cmp	r3, #7
   1c768:	bgt	1c7c0 <__assert_fail@plt+0xa8f8>
   1c76c:	cmp	r4, #0
   1c770:	beq	1c7c0 <__assert_fail@plt+0xa8f8>
   1c774:	ldr	r7, [sp, #36]	; 0x24
   1c778:	eor	r0, sl, r8
   1c77c:	orrs	r0, r0, r9
   1c780:	bne	1c7c4 <__assert_fail@plt+0xa8fc>
   1c784:	ldr	r0, [sp, #40]	; 0x28
   1c788:	add	r3, r3, #1
   1c78c:	mov	r9, #0
   1c790:	mov	sl, #1
   1c794:	str	r3, [sp, #28]
   1c798:	tst	r0, #8
   1c79c:	bne	1c7c8 <__assert_fail@plt+0xa900>
   1c7a0:	ldr	r2, [sp, #12]
   1c7a4:	mov	r0, #48	; 0x30
   1c7a8:	ldr	r1, [sp, #8]
   1c7ac:	strb	r0, [r6, #-1]!
   1c7b0:	sub	r6, r6, r2
   1c7b4:	mov	r0, r6
   1c7b8:	bl	11ab4 <memcpy@plt>
   1c7bc:	b	1c7c8 <__assert_fail@plt+0xa900>
   1c7c0:	ldr	r7, [sp, #36]	; 0x24
   1c7c4:	str	r3, [sp, #28]
   1c7c8:	mov	r8, r6
   1c7cc:	mov	r0, sl
   1c7d0:	mov	r1, r9
   1c7d4:	mov	r2, #10
   1c7d8:	mov	r3, #0
   1c7dc:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c7e0:	add	r2, r0, r0, lsl #2
   1c7e4:	sub	r2, sl, r2, lsl #1
   1c7e8:	orr	r2, r2, #48	; 0x30
   1c7ec:	strb	r2, [r8, #-1]!
   1c7f0:	rsbs	r2, sl, #9
   1c7f4:	mov	sl, r0
   1c7f8:	rscs	r2, r9, #0
   1c7fc:	mov	r9, r1
   1c800:	bcc	1c7cc <__assert_fail@plt+0xa904>
   1c804:	ldr	sl, [sp, #32]
   1c808:	ldr	r5, [sp, #40]	; 0x28
   1c80c:	ldr	r9, [fp, #16]
   1c810:	tst	r5, #4
   1c814:	beq	1c220 <__assert_fail@plt+0xa358>
   1c818:	ldr	r9, [sp, #52]	; 0x34
   1c81c:	mov	r5, r8
   1c820:	sub	r4, r6, r8
   1c824:	mov	r0, r9
   1c828:	bl	11cac <strlen@plt>
   1c82c:	add	r8, sp, #56	; 0x38
   1c830:	str	r0, [sp, #48]	; 0x30
   1c834:	mov	r1, r5
   1c838:	mov	r2, r4
   1c83c:	mov	r0, r8
   1c840:	bl	11ab4 <memcpy@plt>
   1c844:	ldr	r5, [sp, #16]
   1c848:	ldrb	r7, [r5]
   1c84c:	cmp	r7, #255	; 0xff
   1c850:	mov	sl, r7
   1c854:	moveq	sl, r4
   1c858:	cmp	r7, #0
   1c85c:	mvneq	sl, #0
   1c860:	cmp	sl, r4
   1c864:	movhi	sl, r4
   1c868:	sub	r0, r6, sl
   1c86c:	sub	r6, r4, sl
   1c870:	mov	r2, sl
   1c874:	add	r1, r8, r6
   1c878:	mov	r8, r0
   1c87c:	bl	11ab4 <memcpy@plt>
   1c880:	cmp	r6, #0
   1c884:	beq	1c914 <__assert_fail@plt+0xaa4c>
   1c888:	clz	r0, r7
   1c88c:	lsr	r9, r0, #5
   1c890:	ldr	r0, [sp, #48]	; 0x30
   1c894:	rsb	r0, r0, #0
   1c898:	str	r0, [sp, #44]	; 0x2c
   1c89c:	ldr	r0, [sp, #44]	; 0x2c
   1c8a0:	ldr	r1, [sp, #52]	; 0x34
   1c8a4:	ldr	r2, [sp, #48]	; 0x30
   1c8a8:	add	r4, r8, r0
   1c8ac:	mov	r0, r4
   1c8b0:	bl	11ab4 <memcpy@plt>
   1c8b4:	tst	r9, #1
   1c8b8:	add	r0, sp, #56	; 0x38
   1c8bc:	addeq	r5, r5, #1
   1c8c0:	mov	r9, r5
   1c8c4:	ldrb	r5, [r5]
   1c8c8:	cmp	r5, #255	; 0xff
   1c8cc:	mov	r7, r5
   1c8d0:	moveq	r7, r6
   1c8d4:	cmp	r5, #0
   1c8d8:	moveq	r7, sl
   1c8dc:	cmp	r6, r7
   1c8e0:	movcc	r7, r6
   1c8e4:	sub	r6, r6, r7
   1c8e8:	sub	r8, r4, r7
   1c8ec:	mov	r2, r7
   1c8f0:	add	r1, r0, r6
   1c8f4:	mov	r0, r8
   1c8f8:	bl	11ab4 <memcpy@plt>
   1c8fc:	clz	r0, r5
   1c900:	mov	r5, r9
   1c904:	cmp	r6, #0
   1c908:	mov	sl, r7
   1c90c:	lsr	r9, r0, #5
   1c910:	bne	1c89c <__assert_fail@plt+0xa9d4>
   1c914:	ldr	r7, [sp, #36]	; 0x24
   1c918:	ldr	sl, [sp, #32]
   1c91c:	ldr	r5, [sp, #40]	; 0x28
   1c920:	ldr	r9, [fp, #16]
   1c924:	ldr	r3, [sp, #28]
   1c928:	tst	r5, #128	; 0x80
   1c92c:	bne	1c22c <__assert_fail@plt+0xa364>
   1c930:	mov	r0, #0
   1c934:	strb	r0, [r7]
   1c938:	mov	r0, r8
   1c93c:	sub	sp, fp, #48	; 0x30
   1c940:	vpop	{d8-d9}
   1c944:	add	sp, sp, #4
   1c948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c94c:	add	r0, r0, r2
   1c950:	mov	ip, #2
   1c954:	cmp	r8, r0
   1c958:	movwcc	ip, #3
   1c95c:	subs	r0, r4, r8
   1c960:	mov	r3, #6
   1c964:	sbcs	r0, r9, #0
   1c968:	bcc	1c72c <__assert_fail@plt+0xa864>
   1c96c:	mov	r0, r4
   1c970:	mov	r1, r9
   1c974:	mov	r2, r8
   1c978:	mov	r3, #0
   1c97c:	mov	r5, ip
   1c980:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1c984:	mov	r6, r8
   1c988:	mov	r8, r0
   1c98c:	mov	r2, r5
   1c990:	mov	r9, r1
   1c994:	mls	r0, r0, r6, r4
   1c998:	add	r0, r0, r0, lsl #2
   1c99c:	add	r0, r7, r0, lsl #1
   1c9a0:	udiv	r4, r0, r6
   1c9a4:	mls	r0, r4, r6, r0
   1c9a8:	lsl	r0, r0, #1
   1c9ac:	orr	r0, r0, r2, lsr #1
   1c9b0:	cmp	r0, r6
   1c9b4:	bcs	1c9f8 <__assert_fail@plt+0xab30>
   1c9b8:	rsb	r1, r2, #0
   1c9bc:	subs	ip, r0, r1
   1c9c0:	movwne	ip, #1
   1c9c4:	subs	r0, r8, r6
   1c9c8:	mov	r3, #7
   1c9cc:	sbcs	r0, r9, #0
   1c9d0:	bcs	1ca18 <__assert_fail@plt+0xab50>
   1c9d4:	mov	r7, r4
   1c9d8:	ldr	r5, [sp, #48]	; 0x30
   1c9dc:	ldr	r4, [sp, #44]	; 0x2c
   1c9e0:	mov	sl, r8
   1c9e4:	mov	r8, r6
   1c9e8:	rsbs	r0, sl, #9
   1c9ec:	rscs	r0, r9, #0
   1c9f0:	bcc	1c744 <__assert_fail@plt+0xa87c>
   1c9f4:	b	1c4dc <__assert_fail@plt+0xa614>
   1c9f8:	add	r0, r0, r2
   1c9fc:	mov	ip, #2
   1ca00:	cmp	r6, r0
   1ca04:	movwcc	ip, #3
   1ca08:	subs	r0, r8, r6
   1ca0c:	mov	r3, #7
   1ca10:	sbcs	r0, r9, #0
   1ca14:	bcc	1c9d4 <__assert_fail@plt+0xab0c>
   1ca18:	mov	r0, r8
   1ca1c:	mov	r1, r9
   1ca20:	mov	r2, r6
   1ca24:	mov	r3, #0
   1ca28:	mov	r5, ip
   1ca2c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   1ca30:	mov	sl, r0
   1ca34:	mls	r0, r0, r6, r8
   1ca38:	mov	r2, r5
   1ca3c:	mov	r9, r1
   1ca40:	mov	r8, r6
   1ca44:	add	r0, r0, r0, lsl #2
   1ca48:	add	r0, r4, r0, lsl #1
   1ca4c:	udiv	r7, r0, r6
   1ca50:	mls	r0, r7, r6, r0
   1ca54:	lsl	r0, r0, #1
   1ca58:	orr	r0, r0, r5, lsr #1
   1ca5c:	cmp	r0, r6
   1ca60:	bcs	1ca74 <__assert_fail@plt+0xabac>
   1ca64:	rsb	r1, r2, #0
   1ca68:	subs	ip, r0, r1
   1ca6c:	movwne	ip, #1
   1ca70:	b	1ca84 <__assert_fail@plt+0xabbc>
   1ca74:	add	r0, r0, r2
   1ca78:	mov	ip, #2
   1ca7c:	cmp	r8, r0
   1ca80:	movwcc	ip, #3
   1ca84:	ldr	r5, [sp, #48]	; 0x30
   1ca88:	ldr	r4, [sp, #44]	; 0x2c
   1ca8c:	mov	r3, #8
   1ca90:	rsbs	r0, sl, #9
   1ca94:	rscs	r0, r9, #0
   1ca98:	bcc	1c744 <__assert_fail@plt+0xa87c>
   1ca9c:	b	1c4dc <__assert_fail@plt+0xa614>
   1caa0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1caa4:	add	fp, sp, #24
   1caa8:	sub	sp, sp, #8
   1caac:	mov	r4, r2
   1cab0:	mov	r8, r1
   1cab4:	cmp	r0, #0
   1cab8:	bne	1cae4 <__assert_fail@plt+0xac1c>
   1cabc:	movw	r0, #43876	; 0xab64
   1cac0:	movt	r0, #3
   1cac4:	bl	11c04 <getenv@plt>
   1cac8:	cmp	r0, #0
   1cacc:	bne	1cae4 <__assert_fail@plt+0xac1c>
   1cad0:	movw	r0, #47016	; 0xb7a8
   1cad4:	movt	r0, #3
   1cad8:	bl	11c04 <getenv@plt>
   1cadc:	cmp	r0, #0
   1cae0:	beq	1cc10 <__assert_fail@plt+0xad48>
   1cae4:	mov	r6, r0
   1cae8:	movw	r7, #47084	; 0xb7ec
   1caec:	movw	r1, #47072	; 0xb7e0
   1caf0:	mov	r3, #4
   1caf4:	ldrb	r5, [r6], #1
   1caf8:	movt	r7, #3
   1cafc:	movt	r1, #3
   1cb00:	mov	r2, r7
   1cb04:	cmp	r5, #39	; 0x27
   1cb08:	movne	r6, r0
   1cb0c:	mov	r0, r6
   1cb10:	bl	14250 <__assert_fail@plt+0x2388>
   1cb14:	sub	r1, r5, #39	; 0x27
   1cb18:	cmp	r0, #0
   1cb1c:	clz	r1, r1
   1cb20:	lsr	r1, r1, #5
   1cb24:	lsl	r5, r1, #2
   1cb28:	bmi	1cb60 <__assert_fail@plt+0xac98>
   1cb2c:	ldr	r0, [r7, r0, lsl #2]
   1cb30:	mov	r2, #1
   1cb34:	mov	r1, #0
   1cb38:	str	r2, [r4]
   1cb3c:	str	r1, [r4, #4]
   1cb40:	orr	r1, r0, r5
   1cb44:	mov	r0, #0
   1cb48:	str	r1, [r8]
   1cb4c:	ldrd	r2, [r4]
   1cb50:	orrs	r1, r2, r3
   1cb54:	beq	1cb9c <__assert_fail@plt+0xacd4>
   1cb58:	sub	sp, fp, #24
   1cb5c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cb60:	movw	r0, #47026	; 0xb7b2
   1cb64:	add	r1, sp, #4
   1cb68:	mov	r2, #0
   1cb6c:	mov	r3, r4
   1cb70:	mov	r7, #0
   1cb74:	movt	r0, #3
   1cb78:	str	r0, [sp]
   1cb7c:	mov	r0, r6
   1cb80:	bl	37748 <__assert_fail@plt+0x25880>
   1cb84:	cmp	r0, #0
   1cb88:	beq	1cbcc <__assert_fail@plt+0xad04>
   1cb8c:	str	r7, [r8]
   1cb90:	ldrd	r2, [r4]
   1cb94:	orrs	r1, r2, r3
   1cb98:	bne	1cb58 <__assert_fail@plt+0xac90>
   1cb9c:	movw	r0, #47044	; 0xb7c4
   1cba0:	movt	r0, #3
   1cba4:	bl	11c04 <getenv@plt>
   1cba8:	cmp	r0, #0
   1cbac:	mov	r2, #512	; 0x200
   1cbb0:	mov	r0, #4
   1cbb4:	mov	r1, #0
   1cbb8:	movweq	r2, #1024	; 0x400
   1cbbc:	str	r2, [r4]
   1cbc0:	str	r1, [r4, #4]
   1cbc4:	sub	sp, fp, #24
   1cbc8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1cbcc:	ldrb	r0, [r6]
   1cbd0:	sub	r0, r0, #48	; 0x30
   1cbd4:	uxtb	r0, r0
   1cbd8:	cmp	r0, #10
   1cbdc:	bcc	1cc08 <__assert_fail@plt+0xad40>
   1cbe0:	ldr	r0, [sp, #4]
   1cbe4:	cmp	r0, r6
   1cbe8:	beq	1cc38 <__assert_fail@plt+0xad70>
   1cbec:	ldrb	r2, [r6, #1]
   1cbf0:	add	r1, r6, #1
   1cbf4:	mov	r6, r1
   1cbf8:	sub	r2, r2, #48	; 0x30
   1cbfc:	uxtb	r2, r2
   1cc00:	cmp	r2, #10
   1cc04:	bcs	1cbe4 <__assert_fail@plt+0xad1c>
   1cc08:	mov	r1, r5
   1cc0c:	b	1cb44 <__assert_fail@plt+0xac7c>
   1cc10:	movw	r0, #47044	; 0xb7c4
   1cc14:	movt	r0, #3
   1cc18:	bl	11c04 <getenv@plt>
   1cc1c:	cmp	r0, #0
   1cc20:	mov	r2, #512	; 0x200
   1cc24:	mov	r1, #0
   1cc28:	movweq	r2, #1024	; 0x400
   1cc2c:	str	r2, [r4]
   1cc30:	str	r1, [r4, #4]
   1cc34:	b	1cb44 <__assert_fail@plt+0xac7c>
   1cc38:	ldrb	r2, [r0, #-1]
   1cc3c:	orr	r1, r5, #384	; 0x180
   1cc40:	cmp	r2, #66	; 0x42
   1cc44:	mov	r2, r1
   1cc48:	orrne	r2, r5, #128	; 0x80
   1cc4c:	bne	1cc60 <__assert_fail@plt+0xad98>
   1cc50:	ldrb	r0, [r0, #-2]
   1cc54:	cmp	r0, #105	; 0x69
   1cc58:	orreq	r1, r2, #32
   1cc5c:	b	1cb44 <__assert_fail@plt+0xac7c>
   1cc60:	orr	r1, r2, #32
   1cc64:	b	1cb44 <__assert_fail@plt+0xac7c>
   1cc68:	vdup.32	q8, r1
   1cc6c:	mov	r2, #0
   1cc70:	str	r2, [r0, #20]
   1cc74:	str	r2, [r0, #24]
   1cc78:	mov	r2, #1
   1cc7c:	strb	r2, [r0, #28]
   1cc80:	vst1.32	{d16-d17}, [r0]!
   1cc84:	str	r1, [r0]
   1cc88:	bx	lr
   1cc8c:	ldrb	r0, [r0, #28]
   1cc90:	bx	lr
   1cc94:	push	{fp, lr}
   1cc98:	mov	fp, sp
   1cc9c:	ldrb	r3, [r0, #28]
   1cca0:	ldr	r2, [r0, #20]
   1cca4:	eor	lr, r3, #1
   1cca8:	add	r2, r2, lr
   1ccac:	and	r3, r2, #3
   1ccb0:	ldr	ip, [r0, r3, lsl #2]
   1ccb4:	str	r1, [r0, r3, lsl #2]
   1ccb8:	str	r3, [r0, #20]
   1ccbc:	ldr	r1, [r0, #24]
   1ccc0:	cmp	r3, r1
   1ccc4:	addeq	r1, r2, lr
   1ccc8:	andeq	r1, r1, #3
   1cccc:	streq	r1, [r0, #24]
   1ccd0:	mov	r1, #0
   1ccd4:	strb	r1, [r0, #28]
   1ccd8:	mov	r0, ip
   1ccdc:	pop	{fp, pc}
   1cce0:	push	{fp, lr}
   1cce4:	mov	fp, sp
   1cce8:	ldrb	r1, [r0, #28]
   1ccec:	cmp	r1, #0
   1ccf0:	bne	1cd2c <__assert_fail@plt+0xae64>
   1ccf4:	ldr	r3, [r0, #20]
   1ccf8:	ldr	r2, [r0, #16]
   1ccfc:	ldr	r1, [r0, r3, lsl #2]
   1cd00:	str	r2, [r0, r3, lsl #2]
   1cd04:	ldr	r2, [r0, #20]
   1cd08:	ldr	r3, [r0, #24]
   1cd0c:	cmp	r2, r3
   1cd10:	moveq	r2, #1
   1cd14:	strbeq	r2, [r0, #28]
   1cd18:	subne	r2, r2, #1
   1cd1c:	andne	r2, r2, #3
   1cd20:	strne	r2, [r0, #20]
   1cd24:	mov	r0, r1
   1cd28:	pop	{fp, pc}
   1cd2c:	bl	11e8c <abort@plt>
   1cd30:	push	{r4, r5, r6, sl, fp, lr}
   1cd34:	add	fp, sp, #16
   1cd38:	sub	sp, sp, #8
   1cd3c:	mov	r5, r0
   1cd40:	mov	r0, #12
   1cd44:	bl	38450 <__assert_fail@plt+0x26588>
   1cd48:	mov	r4, r0
   1cd4c:	cmp	r0, #0
   1cd50:	beq	1cd90 <__assert_fail@plt+0xaec8>
   1cd54:	movw	r0, #31760	; 0x7c10
   1cd58:	movw	r2, #52660	; 0xcdb4
   1cd5c:	movw	r3, #52680	; 0xcdc8
   1cd60:	mov	r1, #0
   1cd64:	mov	r6, #0
   1cd68:	movt	r0, #1
   1cd6c:	movt	r2, #1
   1cd70:	movt	r3, #1
   1cd74:	str	r0, [sp]
   1cd78:	movw	r0, #1021	; 0x3fd
   1cd7c:	bl	1ac54 <__assert_fail@plt+0x8d8c>
   1cd80:	cmp	r0, #0
   1cd84:	str	r0, [r4]
   1cd88:	beq	1cd9c <__assert_fail@plt+0xaed4>
   1cd8c:	stmib	r4, {r5, r6}
   1cd90:	mov	r0, r4
   1cd94:	sub	sp, fp, #16
   1cd98:	pop	{r4, r5, r6, sl, fp, pc}
   1cd9c:	mov	r0, r4
   1cda0:	bl	17c10 <__assert_fail@plt+0x5d48>
   1cda4:	mov	r4, #0
   1cda8:	mov	r0, r4
   1cdac:	sub	sp, fp, #16
   1cdb0:	pop	{r4, r5, r6, sl, fp, pc}
   1cdb4:	ldm	r0, {r0, r3}
   1cdb8:	eor	r0, r0, r3
   1cdbc:	udiv	r2, r0, r1
   1cdc0:	mls	r0, r2, r1, r0
   1cdc4:	bx	lr
   1cdc8:	ldrd	r2, [r1]
   1cdcc:	ldrd	r0, [r0]
   1cdd0:	eor	r1, r1, r3
   1cdd4:	eor	r0, r0, r2
   1cdd8:	orr	r0, r0, r1
   1cddc:	clz	r0, r0
   1cde0:	lsr	r0, r0, #5
   1cde4:	bx	lr
   1cde8:	push	{r4, sl, fp, lr}
   1cdec:	add	fp, sp, #8
   1cdf0:	mov	r4, r0
   1cdf4:	ldr	r0, [r0]
   1cdf8:	bl	1af70 <__assert_fail@plt+0x90a8>
   1cdfc:	ldr	r0, [r4, #8]
   1ce00:	bl	17c10 <__assert_fail@plt+0x5d48>
   1ce04:	mov	r0, r4
   1ce08:	pop	{r4, sl, fp, lr}
   1ce0c:	b	17c10 <__assert_fail@plt+0x5d48>
   1ce10:	push	{r4, r5, r6, r7, fp, lr}
   1ce14:	add	fp, sp, #16
   1ce18:	ldr	r4, [r0, #8]
   1ce1c:	mov	r7, r3
   1ce20:	mov	r6, r2
   1ce24:	mov	r5, r0
   1ce28:	cmp	r4, #0
   1ce2c:	beq	1ce4c <__assert_fail@plt+0xaf84>
   1ce30:	ldrd	r0, [r4]
   1ce34:	eor	r1, r1, r7
   1ce38:	eor	r0, r0, r6
   1ce3c:	orrs	r0, r0, r1
   1ce40:	bne	1ce64 <__assert_fail@plt+0xaf9c>
   1ce44:	ldr	r0, [r4, #8]
   1ce48:	pop	{r4, r5, r6, r7, fp, pc}
   1ce4c:	mov	r0, #16
   1ce50:	bl	38450 <__assert_fail@plt+0x26588>
   1ce54:	mov	r4, r0
   1ce58:	cmp	r0, #0
   1ce5c:	str	r0, [r5, #8]
   1ce60:	beq	1ce90 <__assert_fail@plt+0xafc8>
   1ce64:	strd	r6, [r4]
   1ce68:	mov	r1, r4
   1ce6c:	ldr	r0, [r5]
   1ce70:	bl	1b8b0 <__assert_fail@plt+0x99e8>
   1ce74:	cmp	r0, #0
   1ce78:	beq	1ce90 <__assert_fail@plt+0xafc8>
   1ce7c:	cmp	r4, r0
   1ce80:	beq	1ce98 <__assert_fail@plt+0xafd0>
   1ce84:	ldr	r0, [r0, #8]
   1ce88:	str	r0, [r4, #8]
   1ce8c:	pop	{r4, r5, r6, r7, fp, pc}
   1ce90:	mvn	r0, #0
   1ce94:	pop	{r4, r5, r6, r7, fp, pc}
   1ce98:	mov	r0, #0
   1ce9c:	str	r0, [r5, #8]
   1cea0:	ldr	r0, [r5, #4]
   1cea4:	add	r1, r0, #1
   1cea8:	str	r1, [r5, #4]
   1ceac:	str	r0, [r4, #8]
   1ceb0:	pop	{r4, r5, r6, r7, fp, pc}
   1ceb4:	push	{r4, r5, r6, sl, fp, lr}
   1ceb8:	add	fp, sp, #16
   1cebc:	mov	r5, r0
   1cec0:	mov	r0, #0
   1cec4:	mov	r4, r1
   1cec8:	add	r6, r2, #19
   1cecc:	cmp	r1, #0
   1ced0:	strb	r0, [r2, #20]
   1ced4:	bmi	1cf24 <__assert_fail@plt+0xb05c>
   1ced8:	mov	r0, r5
   1cedc:	mov	r1, r4
   1cee0:	mov	r2, #10
   1cee4:	mov	r3, #0
   1cee8:	bl	39be4 <__assert_fail@plt+0x27d1c>
   1ceec:	add	r2, r0, r0, lsl #2
   1cef0:	sub	r2, r5, r2, lsl #1
   1cef4:	add	r2, r2, #48	; 0x30
   1cef8:	strb	r2, [r6], #-1
   1cefc:	adds	r2, r5, #9
   1cf00:	mov	r5, r0
   1cf04:	adc	r3, r4, #0
   1cf08:	rsbs	r2, r2, #18
   1cf0c:	mov	r4, r1
   1cf10:	rscs	r2, r3, #0
   1cf14:	bcc	1ced8 <__assert_fail@plt+0xb010>
   1cf18:	add	r6, r6, #1
   1cf1c:	mov	r0, r6
   1cf20:	pop	{r4, r5, r6, sl, fp, pc}
   1cf24:	mov	r0, r5
   1cf28:	mov	r1, r4
   1cf2c:	mov	r2, #10
   1cf30:	mov	r3, #0
   1cf34:	bl	39be4 <__assert_fail@plt+0x27d1c>
   1cf38:	add	r2, r0, r0, lsl #2
   1cf3c:	rsb	r2, r5, r2, lsl #1
   1cf40:	add	r2, r2, #48	; 0x30
   1cf44:	strb	r2, [r6], #-1
   1cf48:	adds	r2, r5, #9
   1cf4c:	mov	r5, r0
   1cf50:	adc	r3, r4, #0
   1cf54:	rsbs	r2, r2, #18
   1cf58:	mov	r4, r1
   1cf5c:	rscs	r2, r3, #0
   1cf60:	bcc	1cf24 <__assert_fail@plt+0xb05c>
   1cf64:	mov	r0, #45	; 0x2d
   1cf68:	strb	r0, [r6]
   1cf6c:	mov	r0, r6
   1cf70:	pop	{r4, r5, r6, sl, fp, pc}
   1cf74:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1cf78:	add	fp, sp, #24
   1cf7c:	sub	sp, sp, #112	; 0x70
   1cf80:	cmp	r0, r1
   1cf84:	beq	1d03c <__assert_fail@plt+0xb174>
   1cf88:	mov	r4, r1
   1cf8c:	mov	r5, r0
   1cf90:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1cf94:	cmp	r0, #1
   1cf98:	bls	1d048 <__assert_fail@plt+0xb180>
   1cf9c:	mov	r7, #0
   1cfa0:	add	r0, sp, #56	; 0x38
   1cfa4:	str	r7, [sp, #64]	; 0x40
   1cfa8:	str	r7, [sp, #60]	; 0x3c
   1cfac:	str	r5, [sp, #72]	; 0x48
   1cfb0:	strb	r7, [sp, #68]	; 0x44
   1cfb4:	strb	r7, [sp, #56]	; 0x38
   1cfb8:	str	r7, [sp, #8]
   1cfbc:	str	r7, [sp, #4]
   1cfc0:	str	r4, [sp, #16]
   1cfc4:	strb	r7, [sp, #12]
   1cfc8:	strb	r7, [sp]
   1cfcc:	bl	1d1ec <__assert_fail@plt+0xb324>
   1cfd0:	ldrb	r0, [sp, #80]	; 0x50
   1cfd4:	cmp	r0, #0
   1cfd8:	beq	1d0b4 <__assert_fail@plt+0xb1ec>
   1cfdc:	ldr	r0, [sp, #84]	; 0x54
   1cfe0:	cmp	r0, #0
   1cfe4:	bne	1d0b4 <__assert_fail@plt+0xb1ec>
   1cfe8:	add	r0, sp, #56	; 0x38
   1cfec:	bl	1d1ec <__assert_fail@plt+0xb324>
   1cff0:	ldrb	r1, [sp, #80]	; 0x50
   1cff4:	mov	r0, #1
   1cff8:	cmp	r1, #0
   1cffc:	beq	1d034 <__assert_fail@plt+0xb16c>
   1d000:	ldr	r1, [sp, #84]	; 0x54
   1d004:	cmp	r1, #0
   1d008:	bne	1d034 <__assert_fail@plt+0xb16c>
   1d00c:	mov	r0, sp
   1d010:	bl	1d1ec <__assert_fail@plt+0xb324>
   1d014:	ldrb	r1, [sp, #24]
   1d018:	ldr	r0, [sp, #28]
   1d01c:	cmp	r0, #0
   1d020:	clz	r1, r1
   1d024:	movwne	r0, #1
   1d028:	lsr	r1, r1, #5
   1d02c:	orr	r0, r1, r0
   1d030:	rsb	r0, r0, #0
   1d034:	sub	sp, fp, #24
   1d038:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d03c:	mov	r0, #0
   1d040:	sub	sp, fp, #24
   1d044:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d048:	bl	11c7c <__ctype_b_loc@plt>
   1d04c:	ldr	r8, [r0]
   1d050:	ldrb	r6, [r5]
   1d054:	add	r0, r8, r6, lsl #1
   1d058:	ldrb	r0, [r0, #1]
   1d05c:	tst	r0, #1
   1d060:	beq	1d070 <__assert_fail@plt+0xb1a8>
   1d064:	bl	11c40 <__ctype_tolower_loc@plt>
   1d068:	ldr	r0, [r0]
   1d06c:	ldrb	r6, [r0, r6, lsl #2]
   1d070:	ldrb	r7, [r4]
   1d074:	add	r0, r8, r7, lsl #1
   1d078:	ldrb	r0, [r0, #1]
   1d07c:	tst	r0, #1
   1d080:	beq	1d090 <__assert_fail@plt+0xb1c8>
   1d084:	bl	11c40 <__ctype_tolower_loc@plt>
   1d088:	ldr	r0, [r0]
   1d08c:	ldrb	r7, [r0, r7, lsl #2]
   1d090:	cmp	r6, #0
   1d094:	beq	1d0a8 <__assert_fail@plt+0xb1e0>
   1d098:	add	r4, r4, #1
   1d09c:	add	r5, r5, #1
   1d0a0:	cmp	r6, r7
   1d0a4:	beq	1d050 <__assert_fail@plt+0xb188>
   1d0a8:	sub	r0, r6, r7
   1d0ac:	sub	sp, fp, #24
   1d0b0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d0b4:	mov	r4, sp
   1d0b8:	add	r5, sp, #56	; 0x38
   1d0bc:	mov	r0, r4
   1d0c0:	bl	1d1ec <__assert_fail@plt+0xb324>
   1d0c4:	ldrb	r0, [sp, #24]
   1d0c8:	cmp	r0, #0
   1d0cc:	beq	1d0dc <__assert_fail@plt+0xb214>
   1d0d0:	ldr	r1, [sp, #28]
   1d0d4:	cmp	r1, #0
   1d0d8:	beq	1cfe8 <__assert_fail@plt+0xb120>
   1d0dc:	ldrb	r1, [sp, #80]	; 0x50
   1d0e0:	cmp	r1, #0
   1d0e4:	beq	1d114 <__assert_fail@plt+0xb24c>
   1d0e8:	cmp	r0, #0
   1d0ec:	beq	1d18c <__assert_fail@plt+0xb2c4>
   1d0f0:	ldr	r0, [sp, #84]	; 0x54
   1d0f4:	bl	11ad8 <towlower@plt>
   1d0f8:	mov	r6, r0
   1d0fc:	ldr	r0, [sp, #28]
   1d100:	bl	11ad8 <towlower@plt>
   1d104:	sub	r0, r6, r0
   1d108:	cmp	r0, #0
   1d10c:	beq	1d140 <__assert_fail@plt+0xb278>
   1d110:	b	1d034 <__assert_fail@plt+0xb16c>
   1d114:	cmp	r0, #0
   1d118:	bne	1d198 <__assert_fail@plt+0xb2d0>
   1d11c:	ldr	r3, [sp, #20]
   1d120:	ldr	r2, [sp, #76]	; 0x4c
   1d124:	cmp	r2, r3
   1d128:	bne	1d1a4 <__assert_fail@plt+0xb2dc>
   1d12c:	ldr	r1, [sp, #16]
   1d130:	ldr	r0, [sp, #72]	; 0x48
   1d134:	bl	11af0 <memcmp@plt>
   1d138:	cmp	r0, #0
   1d13c:	bne	1d034 <__assert_fail@plt+0xb16c>
   1d140:	strb	r7, [sp, #68]	; 0x44
   1d144:	strb	r7, [sp, #12]
   1d148:	ldr	r0, [sp, #72]	; 0x48
   1d14c:	ldr	r1, [sp, #76]	; 0x4c
   1d150:	add	r0, r0, r1
   1d154:	ldr	r1, [sp, #20]
   1d158:	str	r0, [sp, #72]	; 0x48
   1d15c:	ldr	r0, [sp, #16]
   1d160:	add	r0, r0, r1
   1d164:	str	r0, [sp, #16]
   1d168:	mov	r0, r5
   1d16c:	bl	1d1ec <__assert_fail@plt+0xb324>
   1d170:	ldrb	r0, [sp, #80]	; 0x50
   1d174:	cmp	r0, #0
   1d178:	beq	1d0bc <__assert_fail@plt+0xb1f4>
   1d17c:	ldr	r0, [sp, #84]	; 0x54
   1d180:	cmp	r0, #0
   1d184:	bne	1d0bc <__assert_fail@plt+0xb1f4>
   1d188:	b	1cfe8 <__assert_fail@plt+0xb120>
   1d18c:	mvn	r0, #0
   1d190:	sub	sp, fp, #24
   1d194:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d198:	mov	r0, #1
   1d19c:	sub	sp, fp, #24
   1d1a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d1a4:	ldr	r1, [sp, #16]
   1d1a8:	ldr	r0, [sp, #72]	; 0x48
   1d1ac:	bcs	1d1cc <__assert_fail@plt+0xb304>
   1d1b0:	bl	11af0 <memcmp@plt>
   1d1b4:	mov	r1, r0
   1d1b8:	mvn	r0, #0
   1d1bc:	cmp	r1, #0
   1d1c0:	movwgt	r0, #1
   1d1c4:	sub	sp, fp, #24
   1d1c8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d1cc:	mov	r2, r3
   1d1d0:	bl	11af0 <memcmp@plt>
   1d1d4:	mov	r1, r0
   1d1d8:	mvn	r0, #0
   1d1dc:	cmn	r1, #1
   1d1e0:	movwgt	r0, #1
   1d1e4:	sub	sp, fp, #24
   1d1e8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1d1ec:	push	{r4, r5, r6, r7, fp, lr}
   1d1f0:	add	fp, sp, #16
   1d1f4:	mov	r4, r0
   1d1f8:	ldrb	r0, [r0, #12]
   1d1fc:	cmp	r0, #0
   1d200:	popne	{r4, r5, r6, r7, fp, pc}
   1d204:	ldrb	r0, [r4]
   1d208:	ldr	r5, [r4, #16]
   1d20c:	cmp	r0, #0
   1d210:	beq	1d278 <__assert_fail@plt+0xb3b0>
   1d214:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1d218:	mov	r1, r0
   1d21c:	mov	r0, r5
   1d220:	bl	34858 <__assert_fail@plt+0x22990>
   1d224:	add	r6, r4, #4
   1d228:	add	r7, r4, #28
   1d22c:	mov	r2, r0
   1d230:	mov	r1, r5
   1d234:	mov	r0, r7
   1d238:	mov	r3, r6
   1d23c:	bl	3966c <__assert_fail@plt+0x277a4>
   1d240:	cmn	r0, #2
   1d244:	str	r0, [r4, #20]
   1d248:	beq	1d304 <__assert_fail@plt+0xb43c>
   1d24c:	cmp	r0, #0
   1d250:	beq	1d2b8 <__assert_fail@plt+0xb3f0>
   1d254:	cmn	r0, #1
   1d258:	bne	1d2dc <__assert_fail@plt+0xb414>
   1d25c:	mov	r0, #0
   1d260:	strb	r0, [r4, #24]
   1d264:	mov	r0, #1
   1d268:	str	r0, [r4, #20]
   1d26c:	mov	r0, #1
   1d270:	strb	r0, [r4, #12]
   1d274:	pop	{r4, r5, r6, r7, fp, pc}
   1d278:	ldrb	r0, [r5]
   1d27c:	movw	r2, #49620	; 0xc1d4
   1d280:	movt	r2, #3
   1d284:	ubfx	r1, r0, #5, #3
   1d288:	ldr	r1, [r2, r1, lsl #2]
   1d28c:	and	r2, r0, #31
   1d290:	mov	r0, #1
   1d294:	tst	r1, r0, lsl r2
   1d298:	beq	1d324 <__assert_fail@plt+0xb45c>
   1d29c:	str	r0, [r4, #20]
   1d2a0:	ldrb	r1, [r5]
   1d2a4:	strb	r0, [r4, #24]
   1d2a8:	str	r1, [r4, #28]
   1d2ac:	mov	r0, #1
   1d2b0:	strb	r0, [r4, #12]
   1d2b4:	pop	{r4, r5, r6, r7, fp, pc}
   1d2b8:	mov	r0, #1
   1d2bc:	str	r0, [r4, #20]
   1d2c0:	ldr	r0, [r4, #16]
   1d2c4:	ldrb	r0, [r0]
   1d2c8:	cmp	r0, #0
   1d2cc:	bne	1d340 <__assert_fail@plt+0xb478>
   1d2d0:	ldr	r0, [r7]
   1d2d4:	cmp	r0, #0
   1d2d8:	bne	1d360 <__assert_fail@plt+0xb498>
   1d2dc:	mov	r0, #1
   1d2e0:	strb	r0, [r4, #24]
   1d2e4:	mov	r0, r6
   1d2e8:	bl	11ae4 <mbsinit@plt>
   1d2ec:	cmp	r0, #0
   1d2f0:	movne	r0, #0
   1d2f4:	strbne	r0, [r4]
   1d2f8:	mov	r0, #1
   1d2fc:	strb	r0, [r4, #12]
   1d300:	pop	{r4, r5, r6, r7, fp, pc}
   1d304:	ldr	r0, [r4, #16]
   1d308:	bl	11cac <strlen@plt>
   1d30c:	mov	r1, #0
   1d310:	strb	r1, [r4, #24]
   1d314:	str	r0, [r4, #20]
   1d318:	mov	r0, #1
   1d31c:	strb	r0, [r4, #12]
   1d320:	pop	{r4, r5, r6, r7, fp, pc}
   1d324:	add	r0, r4, #4
   1d328:	bl	11ae4 <mbsinit@plt>
   1d32c:	cmp	r0, #0
   1d330:	beq	1d380 <__assert_fail@plt+0xb4b8>
   1d334:	mov	r0, #1
   1d338:	strb	r0, [r4]
   1d33c:	b	1d214 <__assert_fail@plt+0xb34c>
   1d340:	movw	r0, #47179	; 0xb84b
   1d344:	movw	r1, #47115	; 0xb80b
   1d348:	movw	r3, #47131	; 0xb81b
   1d34c:	mov	r2, #171	; 0xab
   1d350:	movt	r0, #3
   1d354:	movt	r1, #3
   1d358:	movt	r3, #3
   1d35c:	bl	11ec8 <__assert_fail@plt>
   1d360:	movw	r0, #47202	; 0xb862
   1d364:	movw	r1, #47115	; 0xb80b
   1d368:	movw	r3, #47131	; 0xb81b
   1d36c:	mov	r2, #172	; 0xac
   1d370:	movt	r0, #3
   1d374:	movt	r1, #3
   1d378:	movt	r3, #3
   1d37c:	bl	11ec8 <__assert_fail@plt>
   1d380:	movw	r0, #47092	; 0xb7f4
   1d384:	movw	r1, #47115	; 0xb80b
   1d388:	movw	r3, #47131	; 0xb81b
   1d38c:	mov	r2, #143	; 0x8f
   1d390:	movt	r0, #3
   1d394:	movt	r1, #3
   1d398:	movt	r3, #3
   1d39c:	bl	11ec8 <__assert_fail@plt>
   1d3a0:	ldr	r2, [r0, #16]
   1d3a4:	add	r1, r2, r1
   1d3a8:	str	r1, [r0, #16]
   1d3ac:	bx	lr
   1d3b0:	push	{r4, r5, r6, sl, fp, lr}
   1d3b4:	add	fp, sp, #16
   1d3b8:	mov	r5, r1
   1d3bc:	ldrb	r1, [r1]
   1d3c0:	mov	r4, r0
   1d3c4:	strb	r1, [r0], #4
   1d3c8:	cmp	r1, #0
   1d3cc:	beq	1d3dc <__assert_fail@plt+0xb514>
   1d3d0:	ldmib	r5, {r1, r2}
   1d3d4:	stm	r0, {r1, r2}
   1d3d8:	b	1d3e8 <__assert_fail@plt+0xb520>
   1d3dc:	mov	r1, #0
   1d3e0:	str	r1, [r0]
   1d3e4:	str	r1, [r0, #4]
   1d3e8:	ldrb	r0, [r5, #12]
   1d3ec:	strb	r0, [r4, #12]
   1d3f0:	add	r0, r5, #32
   1d3f4:	ldr	r1, [r5, #16]
   1d3f8:	cmp	r1, r0
   1d3fc:	beq	1d408 <__assert_fail@plt+0xb540>
   1d400:	mov	r6, r1
   1d404:	b	1d418 <__assert_fail@plt+0xb550>
   1d408:	ldr	r2, [r5, #20]
   1d40c:	add	r6, r4, #32
   1d410:	mov	r0, r6
   1d414:	bl	11ab4 <memcpy@plt>
   1d418:	str	r6, [r4, #16]
   1d41c:	ldr	r0, [r5, #20]
   1d420:	str	r0, [r4, #20]
   1d424:	ldrb	r0, [r5, #24]
   1d428:	strb	r0, [r4, #24]
   1d42c:	cmp	r0, #0
   1d430:	ldrne	r0, [r5, #28]
   1d434:	strne	r0, [r4, #28]
   1d438:	pop	{r4, r5, r6, sl, fp, pc}
   1d43c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d440:	add	fp, sp, #28
   1d444:	sub	sp, sp, #36	; 0x24
   1d448:	movw	r0, #47220	; 0xb874
   1d44c:	movw	r1, #47356	; 0xb8fc
   1d450:	movt	r0, #3
   1d454:	movt	r1, #3
   1d458:	bl	11e20 <fopen64@plt>
   1d45c:	cmp	r0, #0
   1d460:	beq	1dc44 <__assert_fail@plt+0xbd7c>
   1d464:	mov	r3, r0
   1d468:	mov	r0, #0
   1d46c:	add	r1, sp, #24
   1d470:	mov	r2, #10
   1d474:	str	r0, [sp, #28]
   1d478:	str	r0, [sp, #24]
   1d47c:	add	r0, sp, #28
   1d480:	mov	r9, r3
   1d484:	bl	11a24 <__getdelim@plt>
   1d488:	cmn	r0, #1
   1d48c:	beq	1e018 <__assert_fail@plt+0xc150>
   1d490:	movw	r8, #47241	; 0xb889
   1d494:	add	r0, sp, #32
   1d498:	add	sl, sp, #12
   1d49c:	add	r6, sp, #20
   1d4a0:	add	r7, sp, #16
   1d4a4:	add	r5, sp, #28
   1d4a8:	add	r4, sp, #24
   1d4ac:	str	r9, [sp, #4]
   1d4b0:	movt	r8, #3
   1d4b4:	str	r0, [sp, #8]
   1d4b8:	b	1d4ec <__assert_fail@plt+0xb624>
   1d4bc:	add	r6, sp, #20
   1d4c0:	add	r7, sp, #16
   1d4c4:	add	r5, sp, #28
   1d4c8:	add	r4, sp, #24
   1d4cc:	mov	r3, r9
   1d4d0:	mov	r0, r5
   1d4d4:	mov	r1, r4
   1d4d8:	mov	r2, #10
   1d4dc:	mov	r9, r3
   1d4e0:	bl	11a24 <__getdelim@plt>
   1d4e4:	cmn	r0, #1
   1d4e8:	beq	1e020 <__assert_fail@plt+0xc158>
   1d4ec:	ldr	r0, [sp, #28]
   1d4f0:	mov	r1, r8
   1d4f4:	mov	r2, r6
   1d4f8:	mov	r3, r7
   1d4fc:	str	sl, [sp]
   1d500:	bl	11dc0 <sscanf@plt>
   1d504:	orr	r0, r0, #1
   1d508:	cmp	r0, #3
   1d50c:	bne	1d4cc <__assert_fail@plt+0xb604>
   1d510:	ldr	r0, [sp, #12]
   1d514:	ldr	r1, [sp, #28]
   1d518:	add	r0, r1, r0
   1d51c:	mov	r1, #32
   1d520:	mov	r5, r0
   1d524:	bl	11cb8 <strchr@plt>
   1d528:	cmp	r0, #0
   1d52c:	beq	1d4bc <__assert_fail@plt+0xb5f4>
   1d530:	mov	r6, r0
   1d534:	mov	r4, #0
   1d538:	mov	r1, #32
   1d53c:	strb	r4, [r6], #1
   1d540:	mov	r0, r6
   1d544:	bl	11cb8 <strchr@plt>
   1d548:	cmp	r0, #0
   1d54c:	beq	1d4bc <__assert_fail@plt+0xb5f4>
   1d550:	movw	r1, #47258	; 0xb89a
   1d554:	strb	r4, [r0], #1
   1d558:	movt	r1, #3
   1d55c:	bl	384d4 <__assert_fail@plt+0x2660c>
   1d560:	cmp	r0, #0
   1d564:	beq	1d4bc <__assert_fail@plt+0xb5f4>
   1d568:	add	sl, r0, #3
   1d56c:	mov	r1, #32
   1d570:	mov	r0, sl
   1d574:	bl	11cb8 <strchr@plt>
   1d578:	cmp	r0, #0
   1d57c:	beq	1da88 <__assert_fail@plt+0xbbc0>
   1d580:	mov	r9, r0
   1d584:	mov	r4, #0
   1d588:	mov	r1, #32
   1d58c:	strb	r4, [r9], #1
   1d590:	mov	r0, r9
   1d594:	bl	11cb8 <strchr@plt>
   1d598:	cmp	r0, #0
   1d59c:	beq	1da88 <__assert_fail@plt+0xbbc0>
   1d5a0:	strb	r4, [r0]
   1d5a4:	mov	r0, r9
   1d5a8:	bl	11cac <strlen@plt>
   1d5ac:	adds	r0, r0, #1
   1d5b0:	mov	r8, r5
   1d5b4:	bcs	1d654 <__assert_fail@plt+0xb78c>
   1d5b8:	mov	r2, #0
   1d5bc:	mov	r1, r9
   1d5c0:	ldrb	r3, [r9, r2]
   1d5c4:	add	r7, r2, #4
   1d5c8:	cmp	r7, r0
   1d5cc:	bcc	1d5f0 <__assert_fail@plt+0xb728>
   1d5d0:	add	r2, r2, #1
   1d5d4:	strb	r3, [r1], #1
   1d5d8:	cmp	r2, r0
   1d5dc:	bcs	1d654 <__assert_fail@plt+0xb78c>
   1d5e0:	ldrb	r3, [r9, r2]
   1d5e4:	add	r7, r2, #4
   1d5e8:	cmp	r7, r0
   1d5ec:	bcs	1d5d0 <__assert_fail@plt+0xb708>
   1d5f0:	cmp	r3, #92	; 0x5c
   1d5f4:	bne	1d5d0 <__assert_fail@plt+0xb708>
   1d5f8:	add	r7, r2, r9
   1d5fc:	ldrb	r5, [r7, #1]
   1d600:	and	r4, r5, #252	; 0xfc
   1d604:	cmp	r4, #48	; 0x30
   1d608:	bne	1d5d0 <__assert_fail@plt+0xb708>
   1d60c:	ldrb	r4, [r7, #2]
   1d610:	and	r7, r4, #248	; 0xf8
   1d614:	cmp	r7, #48	; 0x30
   1d618:	bne	1d5d0 <__assert_fail@plt+0xb708>
   1d61c:	add	ip, r2, #3
   1d620:	ldrb	lr, [r9, ip]
   1d624:	and	r7, lr, #248	; 0xf8
   1d628:	cmp	r7, #48	; 0x30
   1d62c:	bne	1d5d0 <__assert_fail@plt+0xb708>
   1d630:	lsl	r2, r5, #6
   1d634:	add	r2, r2, r4, lsl #3
   1d638:	add	r2, r2, lr
   1d63c:	add	r3, r2, #80	; 0x50
   1d640:	mov	r2, ip
   1d644:	add	r2, r2, #1
   1d648:	strb	r3, [r1], #1
   1d64c:	cmp	r2, r0
   1d650:	bcc	1d5e0 <__assert_fail@plt+0xb718>
   1d654:	mov	r0, r6
   1d658:	bl	11cac <strlen@plt>
   1d65c:	adds	r0, r0, #1
   1d660:	bcs	1d700 <__assert_fail@plt+0xb838>
   1d664:	mov	r2, #0
   1d668:	mov	r1, r6
   1d66c:	ldrb	r3, [r6, r2]
   1d670:	add	r7, r2, #4
   1d674:	cmp	r7, r0
   1d678:	bcc	1d69c <__assert_fail@plt+0xb7d4>
   1d67c:	add	r2, r2, #1
   1d680:	strb	r3, [r1], #1
   1d684:	cmp	r2, r0
   1d688:	bcs	1d700 <__assert_fail@plt+0xb838>
   1d68c:	ldrb	r3, [r6, r2]
   1d690:	add	r7, r2, #4
   1d694:	cmp	r7, r0
   1d698:	bcs	1d67c <__assert_fail@plt+0xb7b4>
   1d69c:	cmp	r3, #92	; 0x5c
   1d6a0:	bne	1d67c <__assert_fail@plt+0xb7b4>
   1d6a4:	add	r7, r2, r6
   1d6a8:	ldrb	r5, [r7, #1]
   1d6ac:	and	r4, r5, #252	; 0xfc
   1d6b0:	cmp	r4, #48	; 0x30
   1d6b4:	bne	1d67c <__assert_fail@plt+0xb7b4>
   1d6b8:	ldrb	r4, [r7, #2]
   1d6bc:	and	r7, r4, #248	; 0xf8
   1d6c0:	cmp	r7, #48	; 0x30
   1d6c4:	bne	1d67c <__assert_fail@plt+0xb7b4>
   1d6c8:	add	ip, r2, #3
   1d6cc:	ldrb	lr, [r6, ip]
   1d6d0:	and	r7, lr, #248	; 0xf8
   1d6d4:	cmp	r7, #48	; 0x30
   1d6d8:	bne	1d67c <__assert_fail@plt+0xb7b4>
   1d6dc:	lsl	r2, r5, #6
   1d6e0:	add	r2, r2, r4, lsl #3
   1d6e4:	add	r2, r2, lr
   1d6e8:	add	r3, r2, #80	; 0x50
   1d6ec:	mov	r2, ip
   1d6f0:	add	r2, r2, #1
   1d6f4:	strb	r3, [r1], #1
   1d6f8:	cmp	r2, r0
   1d6fc:	bcc	1d68c <__assert_fail@plt+0xb7c4>
   1d700:	mov	r0, r8
   1d704:	bl	11cac <strlen@plt>
   1d708:	adds	r0, r0, #1
   1d70c:	bcs	1d7ac <__assert_fail@plt+0xb8e4>
   1d710:	mov	r2, #0
   1d714:	mov	r1, r8
   1d718:	ldrb	r3, [r8, r2]
   1d71c:	add	r7, r2, #4
   1d720:	cmp	r7, r0
   1d724:	bcc	1d748 <__assert_fail@plt+0xb880>
   1d728:	add	r2, r2, #1
   1d72c:	strb	r3, [r1], #1
   1d730:	cmp	r2, r0
   1d734:	bcs	1d7ac <__assert_fail@plt+0xb8e4>
   1d738:	ldrb	r3, [r8, r2]
   1d73c:	add	r7, r2, #4
   1d740:	cmp	r7, r0
   1d744:	bcs	1d728 <__assert_fail@plt+0xb860>
   1d748:	cmp	r3, #92	; 0x5c
   1d74c:	bne	1d728 <__assert_fail@plt+0xb860>
   1d750:	add	r7, r2, r8
   1d754:	ldrb	r5, [r7, #1]
   1d758:	and	r4, r5, #252	; 0xfc
   1d75c:	cmp	r4, #48	; 0x30
   1d760:	bne	1d728 <__assert_fail@plt+0xb860>
   1d764:	ldrb	r4, [r7, #2]
   1d768:	and	r7, r4, #248	; 0xf8
   1d76c:	cmp	r7, #48	; 0x30
   1d770:	bne	1d728 <__assert_fail@plt+0xb860>
   1d774:	add	ip, r2, #3
   1d778:	ldrb	lr, [r8, ip]
   1d77c:	and	r7, lr, #248	; 0xf8
   1d780:	cmp	r7, #48	; 0x30
   1d784:	bne	1d728 <__assert_fail@plt+0xb860>
   1d788:	lsl	r2, r5, #6
   1d78c:	add	r2, r2, r4, lsl #3
   1d790:	add	r2, r2, lr
   1d794:	add	r3, r2, #80	; 0x50
   1d798:	mov	r2, ip
   1d79c:	add	r2, r2, #1
   1d7a0:	strb	r3, [r1], #1
   1d7a4:	cmp	r2, r0
   1d7a8:	bcc	1d738 <__assert_fail@plt+0xb870>
   1d7ac:	mov	r0, sl
   1d7b0:	bl	11cac <strlen@plt>
   1d7b4:	adds	r0, r0, #1
   1d7b8:	bcs	1d858 <__assert_fail@plt+0xb990>
   1d7bc:	mov	r2, #0
   1d7c0:	mov	r1, sl
   1d7c4:	ldrb	r3, [sl, r2]
   1d7c8:	add	r7, r2, #4
   1d7cc:	cmp	r7, r0
   1d7d0:	bcc	1d7f4 <__assert_fail@plt+0xb92c>
   1d7d4:	add	r2, r2, #1
   1d7d8:	strb	r3, [r1], #1
   1d7dc:	cmp	r2, r0
   1d7e0:	bcs	1d858 <__assert_fail@plt+0xb990>
   1d7e4:	ldrb	r3, [sl, r2]
   1d7e8:	add	r7, r2, #4
   1d7ec:	cmp	r7, r0
   1d7f0:	bcs	1d7d4 <__assert_fail@plt+0xb90c>
   1d7f4:	cmp	r3, #92	; 0x5c
   1d7f8:	bne	1d7d4 <__assert_fail@plt+0xb90c>
   1d7fc:	add	r7, r2, sl
   1d800:	ldrb	r5, [r7, #1]
   1d804:	and	r4, r5, #252	; 0xfc
   1d808:	cmp	r4, #48	; 0x30
   1d80c:	bne	1d7d4 <__assert_fail@plt+0xb90c>
   1d810:	ldrb	r4, [r7, #2]
   1d814:	and	r7, r4, #248	; 0xf8
   1d818:	cmp	r7, #48	; 0x30
   1d81c:	bne	1d7d4 <__assert_fail@plt+0xb90c>
   1d820:	add	ip, r2, #3
   1d824:	ldrb	lr, [sl, ip]
   1d828:	and	r7, lr, #248	; 0xf8
   1d82c:	cmp	r7, #48	; 0x30
   1d830:	bne	1d7d4 <__assert_fail@plt+0xb90c>
   1d834:	lsl	r2, r5, #6
   1d838:	add	r2, r2, r4, lsl #3
   1d83c:	add	r2, r2, lr
   1d840:	add	r3, r2, #80	; 0x50
   1d844:	mov	r2, ip
   1d848:	add	r2, r2, #1
   1d84c:	strb	r3, [r1], #1
   1d850:	cmp	r2, r0
   1d854:	bcc	1d7e4 <__assert_fail@plt+0xb91c>
   1d858:	mov	r0, #32
   1d85c:	bl	35728 <__assert_fail@plt+0x23860>
   1d860:	mov	r7, r0
   1d864:	mov	r0, r9
   1d868:	bl	35c2c <__assert_fail@plt+0x23d64>
   1d86c:	str	r0, [r7]
   1d870:	mov	r0, r6
   1d874:	bl	35c2c <__assert_fail@plt+0x23d64>
   1d878:	str	r0, [r7, #4]
   1d87c:	mov	r0, r8
   1d880:	bl	35c2c <__assert_fail@plt+0x23d64>
   1d884:	str	r0, [r7, #8]
   1d888:	mov	r0, sl
   1d88c:	bl	35c2c <__assert_fail@plt+0x23d64>
   1d890:	str	r0, [r7, #12]
   1d894:	mov	r6, r0
   1d898:	ldr	r2, [sp, #20]
   1d89c:	ldrb	r0, [r7, #24]
   1d8a0:	mov	r3, r2
   1d8a4:	orr	r4, r0, #4
   1d8a8:	ldr	r0, [sp, #16]
   1d8ac:	bfc	r3, #0, #12
   1d8b0:	strb	r4, [r7, #24]
   1d8b4:	bic	r1, r0, #255	; 0xff
   1d8b8:	uxtb	r0, r0
   1d8bc:	orr	r3, r3, r1, lsr #20
   1d8c0:	bfi	r0, r2, #8, #12
   1d8c4:	str	r3, [r7, #20]
   1d8c8:	orr	r0, r0, r1, lsl #12
   1d8cc:	movw	r1, #47262	; 0xb89e
   1d8d0:	movt	r1, #3
   1d8d4:	str	r0, [r7, #16]
   1d8d8:	mov	r0, r6
   1d8dc:	bl	11a3c <strcmp@plt>
   1d8e0:	cmp	r0, #0
   1d8e4:	mov	r8, #1
   1d8e8:	mov	r0, #1
   1d8ec:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d8f0:	movw	r1, #47269	; 0xb8a5
   1d8f4:	mov	r0, r6
   1d8f8:	movt	r1, #3
   1d8fc:	bl	11a3c <strcmp@plt>
   1d900:	cmp	r0, #0
   1d904:	mov	r0, #1
   1d908:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d90c:	movw	r1, #47274	; 0xb8aa
   1d910:	mov	r0, r6
   1d914:	movt	r1, #3
   1d918:	bl	11a3c <strcmp@plt>
   1d91c:	cmp	r0, #0
   1d920:	mov	r0, #1
   1d924:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d928:	movw	r1, #47280	; 0xb8b0
   1d92c:	mov	r0, r6
   1d930:	movt	r1, #3
   1d934:	bl	11a3c <strcmp@plt>
   1d938:	cmp	r0, #0
   1d93c:	mov	r0, #1
   1d940:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d944:	movw	r1, #47288	; 0xb8b8
   1d948:	mov	r0, r6
   1d94c:	movt	r1, #3
   1d950:	bl	11a3c <strcmp@plt>
   1d954:	cmp	r0, #0
   1d958:	mov	r0, #1
   1d95c:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d960:	movw	r1, #47295	; 0xb8bf
   1d964:	mov	r0, r6
   1d968:	movt	r1, #3
   1d96c:	bl	11a3c <strcmp@plt>
   1d970:	cmp	r0, #0
   1d974:	mov	r0, #1
   1d978:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d97c:	movw	r1, #47303	; 0xb8c7
   1d980:	mov	r0, r6
   1d984:	movt	r1, #3
   1d988:	bl	11a3c <strcmp@plt>
   1d98c:	cmp	r0, #0
   1d990:	mov	r0, #1
   1d994:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d998:	movw	r1, #47315	; 0xb8d3
   1d99c:	mov	r0, r6
   1d9a0:	movt	r1, #3
   1d9a4:	bl	11a3c <strcmp@plt>
   1d9a8:	cmp	r0, #0
   1d9ac:	mov	r0, #1
   1d9b0:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d9b4:	movw	r1, #47322	; 0xb8da
   1d9b8:	mov	r0, r6
   1d9bc:	movt	r1, #3
   1d9c0:	bl	11a3c <strcmp@plt>
   1d9c4:	cmp	r0, #0
   1d9c8:	mov	r0, #1
   1d9cc:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d9d0:	movw	r1, #47333	; 0xb8e5
   1d9d4:	mov	r0, r6
   1d9d8:	movt	r1, #3
   1d9dc:	bl	11a3c <strcmp@plt>
   1d9e0:	cmp	r0, #0
   1d9e4:	mov	r0, #1
   1d9e8:	beq	1da58 <__assert_fail@plt+0xbb90>
   1d9ec:	movw	r1, #47339	; 0xb8eb
   1d9f0:	mov	r0, r6
   1d9f4:	movt	r1, #3
   1d9f8:	bl	11a3c <strcmp@plt>
   1d9fc:	cmp	r0, #0
   1da00:	mov	r0, #1
   1da04:	beq	1da58 <__assert_fail@plt+0xbb90>
   1da08:	movw	r1, #47345	; 0xb8f1
   1da0c:	mov	r0, r6
   1da10:	movt	r1, #3
   1da14:	bl	11a3c <strcmp@plt>
   1da18:	cmp	r0, #0
   1da1c:	mov	r0, #1
   1da20:	beq	1da58 <__assert_fail@plt+0xbb90>
   1da24:	movw	r1, #47352	; 0xb8f8
   1da28:	mov	r0, r6
   1da2c:	movt	r1, #3
   1da30:	bl	11a3c <strcmp@plt>
   1da34:	cmp	r0, #0
   1da38:	mov	r0, #1
   1da3c:	beq	1da58 <__assert_fail@plt+0xbb90>
   1da40:	movw	r1, #47359	; 0xb8ff
   1da44:	mov	r0, r6
   1da48:	movt	r1, #3
   1da4c:	bl	11a3c <strcmp@plt>
   1da50:	clz	r0, r0
   1da54:	lsr	r0, r0, #5
   1da58:	bic	r1, r4, #1
   1da5c:	orr	r5, r1, r0
   1da60:	mov	r1, #58	; 0x3a
   1da64:	strb	r5, [r7, #24]
   1da68:	ldr	r4, [r7]
   1da6c:	mov	r0, r4
   1da70:	bl	11cb8 <strchr@plt>
   1da74:	ldr	r3, [sp, #4]
   1da78:	cmp	r0, #0
   1da7c:	beq	1daa0 <__assert_fail@plt+0xbbd8>
   1da80:	add	r6, sp, #20
   1da84:	b	1dc0c <__assert_fail@plt+0xbd44>
   1da88:	ldr	r3, [sp, #4]
   1da8c:	movw	r8, #47241	; 0xb889
   1da90:	add	sl, sp, #12
   1da94:	add	r6, sp, #20
   1da98:	movt	r8, #3
   1da9c:	b	1dc34 <__assert_fail@plt+0xbd6c>
   1daa0:	ldrb	r0, [r4]
   1daa4:	mov	r9, r3
   1daa8:	cmp	r0, #47	; 0x2f
   1daac:	bne	1db04 <__assert_fail@plt+0xbc3c>
   1dab0:	ldrb	r0, [r4, #1]
   1dab4:	cmp	r0, #47	; 0x2f
   1dab8:	bne	1db04 <__assert_fail@plt+0xbc3c>
   1dabc:	movw	r1, #47364	; 0xb904
   1dac0:	mov	r0, r6
   1dac4:	movt	r1, #3
   1dac8:	bl	11a3c <strcmp@plt>
   1dacc:	cmp	r0, #0
   1dad0:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1dad4:	movw	r1, #47370	; 0xb90a
   1dad8:	mov	r0, r6
   1dadc:	movt	r1, #3
   1dae0:	bl	11a3c <strcmp@plt>
   1dae4:	cmp	r0, #0
   1dae8:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1daec:	movw	r1, #47375	; 0xb90f
   1daf0:	mov	r0, r6
   1daf4:	movt	r1, #3
   1daf8:	bl	11a3c <strcmp@plt>
   1dafc:	cmp	r0, #0
   1db00:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db04:	movw	r1, #47380	; 0xb914
   1db08:	mov	r0, r6
   1db0c:	movt	r1, #3
   1db10:	bl	11a3c <strcmp@plt>
   1db14:	cmp	r0, #0
   1db18:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db1c:	movw	r1, #47385	; 0xb919
   1db20:	mov	r0, r6
   1db24:	movt	r1, #3
   1db28:	bl	11a3c <strcmp@plt>
   1db2c:	cmp	r0, #0
   1db30:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db34:	movw	r1, #47389	; 0xb91d
   1db38:	mov	r0, r6
   1db3c:	movt	r1, #3
   1db40:	bl	11a3c <strcmp@plt>
   1db44:	cmp	r0, #0
   1db48:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db4c:	movw	r1, #47394	; 0xb922
   1db50:	mov	r0, r6
   1db54:	movt	r1, #3
   1db58:	bl	11a3c <strcmp@plt>
   1db5c:	cmp	r0, #0
   1db60:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db64:	movw	r1, #47405	; 0xb92d
   1db68:	mov	r0, r6
   1db6c:	movt	r1, #3
   1db70:	bl	11a3c <strcmp@plt>
   1db74:	cmp	r0, #0
   1db78:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db7c:	movw	r1, #47411	; 0xb933
   1db80:	mov	r0, r6
   1db84:	movt	r1, #3
   1db88:	bl	11a3c <strcmp@plt>
   1db8c:	cmp	r0, #0
   1db90:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1db94:	movw	r1, #47416	; 0xb938
   1db98:	mov	r0, r6
   1db9c:	movt	r1, #3
   1dba0:	bl	11a3c <strcmp@plt>
   1dba4:	cmp	r0, #0
   1dba8:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1dbac:	movw	r1, #47422	; 0xb93e
   1dbb0:	mov	r0, r6
   1dbb4:	movt	r1, #3
   1dbb8:	bl	11a3c <strcmp@plt>
   1dbbc:	cmp	r0, #0
   1dbc0:	beq	1dc04 <__assert_fail@plt+0xbd3c>
   1dbc4:	movw	r1, #47428	; 0xb944
   1dbc8:	mov	r0, r6
   1dbcc:	movt	r1, #3
   1dbd0:	bl	11a3c <strcmp@plt>
   1dbd4:	cmp	r0, #0
   1dbd8:	add	r6, sp, #20
   1dbdc:	mov	r3, r9
   1dbe0:	beq	1dc0c <__assert_fail@plt+0xbd44>
   1dbe4:	movw	r0, #47433	; 0xb949
   1dbe8:	mov	r1, r4
   1dbec:	movt	r0, #3
   1dbf0:	bl	11a3c <strcmp@plt>
   1dbf4:	clz	r0, r0
   1dbf8:	mov	r3, r9
   1dbfc:	lsr	r8, r0, #5
   1dc00:	b	1dc0c <__assert_fail@plt+0xbd44>
   1dc04:	add	r6, sp, #20
   1dc08:	mov	r3, r9
   1dc0c:	and	r0, r5, #253	; 0xfd
   1dc10:	add	sl, sp, #12
   1dc14:	orr	r0, r0, r8, lsl #1
   1dc18:	movw	r8, #47241	; 0xb889
   1dc1c:	movt	r8, #3
   1dc20:	strb	r0, [r7, #24]
   1dc24:	ldr	r0, [sp, #8]
   1dc28:	str	r7, [r0]
   1dc2c:	add	r0, r7, #28
   1dc30:	str	r0, [sp, #8]
   1dc34:	add	r7, sp, #16
   1dc38:	add	r5, sp, #28
   1dc3c:	add	r4, sp, #24
   1dc40:	b	1d4d0 <__assert_fail@plt+0xb608>
   1dc44:	movw	r0, #47440	; 0xb950
   1dc48:	movw	r1, #48222	; 0xbc5e
   1dc4c:	movt	r0, #3
   1dc50:	movt	r1, #3
   1dc54:	bl	11e38 <setmntent@plt>
   1dc58:	cmp	r0, #0
   1dc5c:	beq	1e06c <__assert_fail@plt+0xc1a4>
   1dc60:	mov	r8, r0
   1dc64:	bl	11be0 <getmntent@plt>
   1dc68:	cmp	r0, #0
   1dc6c:	beq	1e07c <__assert_fail@plt+0xc1b4>
   1dc70:	mov	r5, r0
   1dc74:	add	sl, sp, #32
   1dc78:	b	1dcd4 <__assert_fail@plt+0xbe0c>
   1dc7c:	bic	r1, r4, #1
   1dc80:	orr	r4, r1, r0
   1dc84:	mov	r1, #58	; 0x3a
   1dc88:	strb	r4, [r9, #24]
   1dc8c:	ldr	r5, [r9]
   1dc90:	mov	r0, r5
   1dc94:	bl	11cb8 <strchr@plt>
   1dc98:	cmp	r0, #0
   1dc9c:	beq	1dec4 <__assert_fail@plt+0xbffc>
   1dca0:	mvn	r0, #0
   1dca4:	str	r0, [r9, #16]
   1dca8:	str	r0, [r9, #20]
   1dcac:	and	r0, r4, #253	; 0xfd
   1dcb0:	orr	r0, r0, r6, lsl #1
   1dcb4:	strb	r0, [r9, #24]
   1dcb8:	mov	r0, r8
   1dcbc:	str	r9, [sl]
   1dcc0:	add	sl, r9, #28
   1dcc4:	bl	11be0 <getmntent@plt>
   1dcc8:	mov	r5, r0
   1dccc:	cmp	r0, #0
   1dcd0:	beq	1e080 <__assert_fail@plt+0xc1b8>
   1dcd4:	movw	r1, #47450	; 0xb95a
   1dcd8:	mov	r0, r5
   1dcdc:	movt	r1, #3
   1dce0:	bl	11ba4 <hasmntopt@plt>
   1dce4:	str	r0, [sp, #8]
   1dce8:	mov	r0, #32
   1dcec:	bl	35728 <__assert_fail@plt+0x23860>
   1dcf0:	mov	r9, r0
   1dcf4:	ldr	r0, [r5]
   1dcf8:	bl	35c2c <__assert_fail@plt+0x23d64>
   1dcfc:	str	r0, [r9]
   1dd00:	ldr	r0, [r5, #4]
   1dd04:	bl	35c2c <__assert_fail@plt+0x23d64>
   1dd08:	str	r0, [r9, #4]
   1dd0c:	mov	r0, #0
   1dd10:	str	r0, [r9, #8]
   1dd14:	ldr	r0, [r5, #8]
   1dd18:	bl	35c2c <__assert_fail@plt+0x23d64>
   1dd1c:	str	r0, [r9, #12]
   1dd20:	mov	r7, r0
   1dd24:	movw	r1, #47262	; 0xb89e
   1dd28:	ldrb	r0, [r9, #24]
   1dd2c:	movt	r1, #3
   1dd30:	orr	r4, r0, #4
   1dd34:	mov	r0, r7
   1dd38:	strb	r4, [r9, #24]
   1dd3c:	bl	11a3c <strcmp@plt>
   1dd40:	cmp	r0, #0
   1dd44:	mov	r6, #1
   1dd48:	mov	r0, #1
   1dd4c:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1dd50:	movw	r1, #47269	; 0xb8a5
   1dd54:	mov	r0, r7
   1dd58:	movt	r1, #3
   1dd5c:	bl	11a3c <strcmp@plt>
   1dd60:	cmp	r0, #0
   1dd64:	mov	r0, #1
   1dd68:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1dd6c:	movw	r1, #47274	; 0xb8aa
   1dd70:	mov	r0, r7
   1dd74:	movt	r1, #3
   1dd78:	bl	11a3c <strcmp@plt>
   1dd7c:	cmp	r0, #0
   1dd80:	mov	r0, #1
   1dd84:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1dd88:	movw	r1, #47280	; 0xb8b0
   1dd8c:	mov	r0, r7
   1dd90:	movt	r1, #3
   1dd94:	bl	11a3c <strcmp@plt>
   1dd98:	cmp	r0, #0
   1dd9c:	mov	r0, #1
   1dda0:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1dda4:	movw	r1, #47288	; 0xb8b8
   1dda8:	mov	r0, r7
   1ddac:	movt	r1, #3
   1ddb0:	bl	11a3c <strcmp@plt>
   1ddb4:	cmp	r0, #0
   1ddb8:	mov	r0, #1
   1ddbc:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1ddc0:	movw	r1, #47295	; 0xb8bf
   1ddc4:	mov	r0, r7
   1ddc8:	movt	r1, #3
   1ddcc:	bl	11a3c <strcmp@plt>
   1ddd0:	cmp	r0, #0
   1ddd4:	mov	r0, #1
   1ddd8:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1dddc:	movw	r1, #47303	; 0xb8c7
   1dde0:	mov	r0, r7
   1dde4:	movt	r1, #3
   1dde8:	bl	11a3c <strcmp@plt>
   1ddec:	cmp	r0, #0
   1ddf0:	mov	r0, #1
   1ddf4:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1ddf8:	movw	r1, #47315	; 0xb8d3
   1ddfc:	mov	r0, r7
   1de00:	movt	r1, #3
   1de04:	bl	11a3c <strcmp@plt>
   1de08:	cmp	r0, #0
   1de0c:	mov	r0, #1
   1de10:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1de14:	movw	r1, #47322	; 0xb8da
   1de18:	mov	r0, r7
   1de1c:	movt	r1, #3
   1de20:	bl	11a3c <strcmp@plt>
   1de24:	cmp	r0, #0
   1de28:	mov	r0, #1
   1de2c:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1de30:	movw	r1, #47333	; 0xb8e5
   1de34:	mov	r0, r7
   1de38:	movt	r1, #3
   1de3c:	bl	11a3c <strcmp@plt>
   1de40:	cmp	r0, #0
   1de44:	mov	r0, #1
   1de48:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1de4c:	movw	r1, #47339	; 0xb8eb
   1de50:	mov	r0, r7
   1de54:	movt	r1, #3
   1de58:	bl	11a3c <strcmp@plt>
   1de5c:	cmp	r0, #0
   1de60:	mov	r0, #1
   1de64:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1de68:	movw	r1, #47345	; 0xb8f1
   1de6c:	mov	r0, r7
   1de70:	movt	r1, #3
   1de74:	bl	11a3c <strcmp@plt>
   1de78:	cmp	r0, #0
   1de7c:	mov	r0, #1
   1de80:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1de84:	movw	r1, #47352	; 0xb8f8
   1de88:	mov	r0, r7
   1de8c:	movt	r1, #3
   1de90:	bl	11a3c <strcmp@plt>
   1de94:	cmp	r0, #0
   1de98:	mov	r0, #1
   1de9c:	beq	1dc7c <__assert_fail@plt+0xbdb4>
   1dea0:	movw	r1, #47359	; 0xb8ff
   1dea4:	mov	r0, r7
   1dea8:	movt	r1, #3
   1deac:	bl	11a3c <strcmp@plt>
   1deb0:	ldr	r1, [sp, #8]
   1deb4:	orr	r0, r1, r0
   1deb8:	clz	r0, r0
   1debc:	lsr	r0, r0, #5
   1dec0:	b	1dc7c <__assert_fail@plt+0xbdb4>
   1dec4:	ldrb	r0, [r5]
   1dec8:	cmp	r0, #47	; 0x2f
   1decc:	bne	1df24 <__assert_fail@plt+0xc05c>
   1ded0:	ldrb	r0, [r5, #1]
   1ded4:	cmp	r0, #47	; 0x2f
   1ded8:	bne	1df24 <__assert_fail@plt+0xc05c>
   1dedc:	movw	r1, #47364	; 0xb904
   1dee0:	mov	r0, r7
   1dee4:	movt	r1, #3
   1dee8:	bl	11a3c <strcmp@plt>
   1deec:	cmp	r0, #0
   1def0:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1def4:	movw	r1, #47370	; 0xb90a
   1def8:	mov	r0, r7
   1defc:	movt	r1, #3
   1df00:	bl	11a3c <strcmp@plt>
   1df04:	cmp	r0, #0
   1df08:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df0c:	movw	r1, #47375	; 0xb90f
   1df10:	mov	r0, r7
   1df14:	movt	r1, #3
   1df18:	bl	11a3c <strcmp@plt>
   1df1c:	cmp	r0, #0
   1df20:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df24:	movw	r1, #47380	; 0xb914
   1df28:	mov	r0, r7
   1df2c:	movt	r1, #3
   1df30:	bl	11a3c <strcmp@plt>
   1df34:	cmp	r0, #0
   1df38:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df3c:	movw	r1, #47385	; 0xb919
   1df40:	mov	r0, r7
   1df44:	movt	r1, #3
   1df48:	bl	11a3c <strcmp@plt>
   1df4c:	cmp	r0, #0
   1df50:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df54:	movw	r1, #47389	; 0xb91d
   1df58:	mov	r0, r7
   1df5c:	movt	r1, #3
   1df60:	bl	11a3c <strcmp@plt>
   1df64:	cmp	r0, #0
   1df68:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df6c:	movw	r1, #47394	; 0xb922
   1df70:	mov	r0, r7
   1df74:	movt	r1, #3
   1df78:	bl	11a3c <strcmp@plt>
   1df7c:	cmp	r0, #0
   1df80:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df84:	movw	r1, #47405	; 0xb92d
   1df88:	mov	r0, r7
   1df8c:	movt	r1, #3
   1df90:	bl	11a3c <strcmp@plt>
   1df94:	cmp	r0, #0
   1df98:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1df9c:	movw	r1, #47411	; 0xb933
   1dfa0:	mov	r0, r7
   1dfa4:	movt	r1, #3
   1dfa8:	bl	11a3c <strcmp@plt>
   1dfac:	cmp	r0, #0
   1dfb0:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1dfb4:	movw	r1, #47416	; 0xb938
   1dfb8:	mov	r0, r7
   1dfbc:	movt	r1, #3
   1dfc0:	bl	11a3c <strcmp@plt>
   1dfc4:	cmp	r0, #0
   1dfc8:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1dfcc:	movw	r1, #47422	; 0xb93e
   1dfd0:	mov	r0, r7
   1dfd4:	movt	r1, #3
   1dfd8:	bl	11a3c <strcmp@plt>
   1dfdc:	cmp	r0, #0
   1dfe0:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1dfe4:	movw	r1, #47428	; 0xb944
   1dfe8:	mov	r0, r7
   1dfec:	movt	r1, #3
   1dff0:	bl	11a3c <strcmp@plt>
   1dff4:	cmp	r0, #0
   1dff8:	beq	1dca0 <__assert_fail@plt+0xbdd8>
   1dffc:	movw	r0, #47433	; 0xb949
   1e000:	mov	r1, r5
   1e004:	movt	r0, #3
   1e008:	bl	11a3c <strcmp@plt>
   1e00c:	clz	r0, r0
   1e010:	lsr	r6, r0, #5
   1e014:	b	1dca0 <__assert_fail@plt+0xbdd8>
   1e018:	add	r0, sp, #32
   1e01c:	str	r0, [sp, #8]
   1e020:	ldr	r0, [sp, #28]
   1e024:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e028:	ldrb	r1, [r9]
   1e02c:	tst	r1, #32
   1e030:	bne	1e04c <__assert_fail@plt+0xc184>
   1e034:	mov	r0, r9
   1e038:	bl	16070 <__assert_fail@plt+0x41a8>
   1e03c:	ldr	sl, [sp, #8]
   1e040:	cmn	r0, #1
   1e044:	bne	1e090 <__assert_fail@plt+0xc1c8>
   1e048:	b	1e0a8 <__assert_fail@plt+0xc1e0>
   1e04c:	bl	11cdc <__errno_location@plt>
   1e050:	ldr	r6, [r0]
   1e054:	mov	r5, r0
   1e058:	mov	r0, r9
   1e05c:	bl	16070 <__assert_fail@plt+0x41a8>
   1e060:	ldr	sl, [sp, #8]
   1e064:	str	r6, [r5]
   1e068:	b	1e0a8 <__assert_fail@plt+0xc1e0>
   1e06c:	mov	r4, #0
   1e070:	mov	r0, r4
   1e074:	sub	sp, fp, #28
   1e078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e07c:	add	sl, sp, #32
   1e080:	mov	r0, r8
   1e084:	bl	11d6c <endmntent@plt>
   1e088:	cmp	r0, #0
   1e08c:	beq	1e0a8 <__assert_fail@plt+0xc1e0>
   1e090:	mov	r0, #0
   1e094:	str	r0, [sl]
   1e098:	ldr	r4, [sp, #32]
   1e09c:	mov	r0, r4
   1e0a0:	sub	sp, fp, #28
   1e0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0a8:	bl	11cdc <__errno_location@plt>
   1e0ac:	mov	r4, #0
   1e0b0:	ldr	r8, [r0]
   1e0b4:	mov	r5, r0
   1e0b8:	str	r4, [sl]
   1e0bc:	ldr	r6, [sp, #32]
   1e0c0:	cmp	r6, #0
   1e0c4:	bne	1e0f0 <__assert_fail@plt+0xc228>
   1e0c8:	str	r8, [r5]
   1e0cc:	mov	r0, r4
   1e0d0:	sub	sp, fp, #28
   1e0d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0d8:	mov	r0, r6
   1e0dc:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e0e0:	cmp	r7, #0
   1e0e4:	mov	r6, r7
   1e0e8:	str	r7, [sp, #32]
   1e0ec:	beq	1e0c8 <__assert_fail@plt+0xc200>
   1e0f0:	ldr	r0, [r6]
   1e0f4:	ldr	r7, [r6, #28]
   1e0f8:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e0fc:	ldr	r0, [r6, #4]
   1e100:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e104:	ldr	r0, [r6, #8]
   1e108:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e10c:	ldrb	r0, [r6, #24]
   1e110:	tst	r0, #4
   1e114:	beq	1e0d8 <__assert_fail@plt+0xc210>
   1e118:	ldr	r0, [r6, #12]
   1e11c:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e120:	b	1e0d8 <__assert_fail@plt+0xc210>
   1e124:	push	{r4, sl, fp, lr}
   1e128:	add	fp, sp, #8
   1e12c:	mov	r4, r0
   1e130:	ldr	r0, [r0]
   1e134:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e138:	ldr	r0, [r4, #4]
   1e13c:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e140:	ldr	r0, [r4, #8]
   1e144:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e148:	ldrb	r0, [r4, #24]
   1e14c:	tst	r0, #4
   1e150:	beq	1e15c <__assert_fail@plt+0xc294>
   1e154:	ldr	r0, [r4, #12]
   1e158:	bl	17c10 <__assert_fail@plt+0x5d48>
   1e15c:	mov	r0, r4
   1e160:	pop	{r4, sl, fp, lr}
   1e164:	b	17c10 <__assert_fail@plt+0x5d48>
   1e168:	sub	sp, sp, #4
   1e16c:	push	{fp, lr}
   1e170:	mov	fp, sp
   1e174:	sub	sp, sp, #4
   1e178:	str	r3, [fp, #8]
   1e17c:	tst	r2, #64	; 0x40
   1e180:	mov	r3, #0
   1e184:	ldrne	r3, [fp, #8]
   1e188:	bl	11cd0 <openat64@plt>
   1e18c:	bl	35020 <__assert_fail@plt+0x23158>
   1e190:	mov	sp, fp
   1e194:	pop	{fp, lr}
   1e198:	add	sp, sp, #4
   1e19c:	bx	lr
   1e1a0:	push	{r4, r5, r6, sl, fp, lr}
   1e1a4:	add	fp, sp, #16
   1e1a8:	orr	r2, r2, #18688	; 0x4900
   1e1ac:	mov	r4, r3
   1e1b0:	orr	r2, r2, #524288	; 0x80000
   1e1b4:	bl	1e168 <__assert_fail@plt+0xc2a0>
   1e1b8:	mov	r5, r0
   1e1bc:	mov	r0, #0
   1e1c0:	cmp	r5, #0
   1e1c4:	bmi	1e1fc <__assert_fail@plt+0xc334>
   1e1c8:	mov	r0, r5
   1e1cc:	bl	11de4 <fdopendir@plt>
   1e1d0:	cmp	r0, #0
   1e1d4:	beq	1e1e0 <__assert_fail@plt+0xc318>
   1e1d8:	str	r5, [r4]
   1e1dc:	pop	{r4, r5, r6, sl, fp, pc}
   1e1e0:	bl	11cdc <__errno_location@plt>
   1e1e4:	ldr	r6, [r0]
   1e1e8:	mov	r4, r0
   1e1ec:	mov	r0, r5
   1e1f0:	bl	11ea4 <close@plt>
   1e1f4:	mov	r0, #0
   1e1f8:	str	r6, [r4]
   1e1fc:	pop	{r4, r5, r6, sl, fp, pc}
   1e200:	push	{r4, r5, fp, lr}
   1e204:	add	fp, sp, #8
   1e208:	cmp	r0, #0
   1e20c:	beq	1e2a0 <__assert_fail@plt+0xc3d8>
   1e210:	mov	r1, #47	; 0x2f
   1e214:	mov	r4, r0
   1e218:	bl	11d9c <strrchr@plt>
   1e21c:	cmp	r0, #0
   1e220:	mov	r5, r4
   1e224:	addne	r5, r0, #1
   1e228:	sub	r0, r5, r4
   1e22c:	cmp	r0, #7
   1e230:	blt	1e284 <__assert_fail@plt+0xc3bc>
   1e234:	movw	r1, #47511	; 0xb997
   1e238:	sub	r0, r5, #7
   1e23c:	mov	r2, #7
   1e240:	movt	r1, #3
   1e244:	bl	11e80 <strncmp@plt>
   1e248:	cmp	r0, #0
   1e24c:	bne	1e284 <__assert_fail@plt+0xc3bc>
   1e250:	movw	r1, #47519	; 0xb99f
   1e254:	mov	r0, r5
   1e258:	mov	r2, #3
   1e25c:	movt	r1, #3
   1e260:	bl	11e80 <strncmp@plt>
   1e264:	cmp	r0, #0
   1e268:	beq	1e274 <__assert_fail@plt+0xc3ac>
   1e26c:	mov	r4, r5
   1e270:	b	1e284 <__assert_fail@plt+0xc3bc>
   1e274:	movw	r0, #53784	; 0xd218
   1e278:	add	r4, r5, #3
   1e27c:	movt	r0, #4
   1e280:	str	r4, [r0]
   1e284:	movw	r0, #53788	; 0xd21c
   1e288:	movt	r0, #4
   1e28c:	str	r4, [r0]
   1e290:	movw	r0, #53936	; 0xd2b0
   1e294:	movt	r0, #4
   1e298:	str	r4, [r0]
   1e29c:	pop	{r4, r5, fp, pc}
   1e2a0:	movw	r0, #53800	; 0xd228
   1e2a4:	mov	r1, #55	; 0x37
   1e2a8:	mov	r2, #1
   1e2ac:	movt	r0, #4
   1e2b0:	ldr	r3, [r0]
   1e2b4:	movw	r0, #47455	; 0xb95f
   1e2b8:	movt	r0, #3
   1e2bc:	bl	11b80 <fwrite@plt>
   1e2c0:	bl	11e8c <abort@plt>
   1e2c4:	push	{r4, r5, r6, sl, fp, lr}
   1e2c8:	add	fp, sp, #16
   1e2cc:	mov	r4, r0
   1e2d0:	movw	r0, #53944	; 0xd2b8
   1e2d4:	movt	r0, #4
   1e2d8:	cmp	r4, #0
   1e2dc:	moveq	r4, r0
   1e2e0:	bl	11cdc <__errno_location@plt>
   1e2e4:	ldr	r6, [r0]
   1e2e8:	mov	r5, r0
   1e2ec:	mov	r0, r4
   1e2f0:	mov	r1, #48	; 0x30
   1e2f4:	bl	35b88 <__assert_fail@plt+0x23cc0>
   1e2f8:	str	r6, [r5]
   1e2fc:	pop	{r4, r5, r6, sl, fp, pc}
   1e300:	movw	r1, #53944	; 0xd2b8
   1e304:	cmp	r0, #0
   1e308:	movt	r1, #4
   1e30c:	movne	r1, r0
   1e310:	ldr	r0, [r1]
   1e314:	bx	lr
   1e318:	movw	r2, #53944	; 0xd2b8
   1e31c:	cmp	r0, #0
   1e320:	movt	r2, #4
   1e324:	movne	r2, r0
   1e328:	str	r1, [r2]
   1e32c:	bx	lr
   1e330:	movw	r3, #53944	; 0xd2b8
   1e334:	cmp	r0, #0
   1e338:	and	r2, r2, #1
   1e33c:	movt	r3, #4
   1e340:	movne	r3, r0
   1e344:	ubfx	r0, r1, #5, #3
   1e348:	and	r1, r1, #31
   1e34c:	add	ip, r3, r0, lsl #2
   1e350:	mov	r0, #1
   1e354:	ldr	r3, [ip, #8]
   1e358:	and	r0, r0, r3, lsr r1
   1e35c:	eor	r2, r0, r2
   1e360:	eor	r1, r3, r2, lsl r1
   1e364:	str	r1, [ip, #8]
   1e368:	bx	lr
   1e36c:	movw	r2, #53944	; 0xd2b8
   1e370:	cmp	r0, #0
   1e374:	movt	r2, #4
   1e378:	movne	r2, r0
   1e37c:	ldr	r0, [r2, #4]
   1e380:	str	r1, [r2, #4]
   1e384:	bx	lr
   1e388:	push	{fp, lr}
   1e38c:	mov	fp, sp
   1e390:	movw	r3, #53944	; 0xd2b8
   1e394:	cmp	r0, #0
   1e398:	movt	r3, #4
   1e39c:	movne	r3, r0
   1e3a0:	cmp	r1, #0
   1e3a4:	mov	r0, #10
   1e3a8:	cmpne	r2, #0
   1e3ac:	str	r0, [r3]
   1e3b0:	bne	1e3b8 <__assert_fail@plt+0xc4f0>
   1e3b4:	bl	11e8c <abort@plt>
   1e3b8:	str	r1, [r3, #40]	; 0x28
   1e3bc:	str	r2, [r3, #44]	; 0x2c
   1e3c0:	pop	{fp, pc}
   1e3c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e3c8:	add	fp, sp, #28
   1e3cc:	sub	sp, sp, #20
   1e3d0:	mov	r7, r0
   1e3d4:	ldr	r0, [fp, #8]
   1e3d8:	movw	r5, #53944	; 0xd2b8
   1e3dc:	mov	r8, r3
   1e3e0:	mov	r9, r2
   1e3e4:	mov	sl, r1
   1e3e8:	movt	r5, #4
   1e3ec:	cmp	r0, #0
   1e3f0:	movne	r5, r0
   1e3f4:	bl	11cdc <__errno_location@plt>
   1e3f8:	ldr	r2, [r5, #40]	; 0x28
   1e3fc:	ldr	r3, [r5, #44]	; 0x2c
   1e400:	mov	r4, r0
   1e404:	ldm	r5, {r0, r1}
   1e408:	add	r5, r5, #8
   1e40c:	ldr	r6, [r4]
   1e410:	stm	sp, {r0, r1, r5}
   1e414:	mov	r0, r7
   1e418:	mov	r1, sl
   1e41c:	str	r2, [sp, #12]
   1e420:	str	r3, [sp, #16]
   1e424:	mov	r2, r9
   1e428:	mov	r3, r8
   1e42c:	bl	1e43c <__assert_fail@plt+0xc574>
   1e430:	str	r6, [r4]
   1e434:	sub	sp, fp, #28
   1e438:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e43c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e440:	add	fp, sp, #28
   1e444:	sub	sp, sp, #156	; 0x9c
   1e448:	str	r0, [fp, #-84]	; 0xffffffac
   1e44c:	add	r0, r2, #1
   1e450:	mov	r6, r1
   1e454:	mov	r7, r3
   1e458:	str	r2, [fp, #-80]	; 0xffffffb0
   1e45c:	str	r0, [sp, #80]	; 0x50
   1e460:	ldr	r0, [fp, #12]
   1e464:	and	r1, r0, #1
   1e468:	str	r1, [sp, #36]	; 0x24
   1e46c:	and	r1, r0, #4
   1e470:	str	r1, [sp, #32]
   1e474:	ubfx	r8, r0, #1, #1
   1e478:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   1e47c:	str	r0, [sp, #40]	; 0x28
   1e480:	ldr	r0, [fp, #24]
   1e484:	ldr	r4, [fp, #8]
   1e488:	mov	r1, #0
   1e48c:	str	r1, [fp, #-52]	; 0xffffffcc
   1e490:	mov	r1, #0
   1e494:	str	r1, [sp, #60]	; 0x3c
   1e498:	mov	r1, #1
   1e49c:	str	r1, [sp, #84]	; 0x54
   1e4a0:	str	r0, [sp, #76]	; 0x4c
   1e4a4:	ldr	r0, [fp, #20]
   1e4a8:	str	r0, [sp, #72]	; 0x48
   1e4ac:	mov	r0, #0
   1e4b0:	str	r0, [sp, #56]	; 0x38
   1e4b4:	mov	r0, #0
   1e4b8:	str	r0, [fp, #-88]	; 0xffffffa8
   1e4bc:	mov	r0, #0
   1e4c0:	str	r0, [fp, #-72]	; 0xffffffb8
   1e4c4:	mov	r0, #0
   1e4c8:	cmp	r4, #10
   1e4cc:	bhi	1f7e8 <__assert_fail@plt+0xd920>
   1e4d0:	add	r1, pc, #24
   1e4d4:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e4d8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e4dc:	mov	r5, r6
   1e4e0:	mov	r9, #0
   1e4e4:	mov	r2, #1
   1e4e8:	mov	r3, #0
   1e4ec:	ldr	pc, [r1, r4, lsl #2]
   1e4f0:			; <UNDEFINED> instruction: 0x0001e5b8
   1e4f4:	strdeq	lr, [r1], -r4
   1e4f8:	andeq	lr, r1, r8, asr #11
   1e4fc:			; <UNDEFINED> instruction: 0x0001e5b0
   1e500:	andeq	lr, r1, r8, ror #11
   1e504:	andeq	lr, r1, ip, asr #12
   1e508:	ldrdeq	lr, [r1], -r8
   1e50c:	andeq	lr, r1, r4, asr #17
   1e510:	andeq	lr, r1, ip, lsl r5
   1e514:	andeq	lr, r1, ip, lsl r5
   1e518:	andeq	lr, r1, r4, asr r7
   1e51c:	movw	r6, #47599	; 0xb9ef
   1e520:	mov	r0, #0
   1e524:	mov	r2, #5
   1e528:	movt	r6, #3
   1e52c:	mov	r1, r6
   1e530:	bl	11afc <dcgettext@plt>
   1e534:	cmp	r0, r6
   1e538:	str	r0, [sp, #72]	; 0x48
   1e53c:	bne	1e72c <__assert_fail@plt+0xc864>
   1e540:	bl	39584 <__assert_fail@plt+0x276bc>
   1e544:	ldrb	r1, [r0]
   1e548:	and	r1, r1, #223	; 0xdf
   1e54c:	cmp	r1, #71	; 0x47
   1e550:	beq	1e6ac <__assert_fail@plt+0xc7e4>
   1e554:	cmp	r1, #85	; 0x55
   1e558:	bne	1e710 <__assert_fail@plt+0xc848>
   1e55c:	ldrb	r1, [r0, #1]
   1e560:	and	r1, r1, #223	; 0xdf
   1e564:	cmp	r1, #84	; 0x54
   1e568:	bne	1e710 <__assert_fail@plt+0xc848>
   1e56c:	ldrb	r1, [r0, #2]
   1e570:	and	r1, r1, #223	; 0xdf
   1e574:	cmp	r1, #70	; 0x46
   1e578:	bne	1e710 <__assert_fail@plt+0xc848>
   1e57c:	ldrb	r1, [r0, #3]
   1e580:	cmp	r1, #45	; 0x2d
   1e584:	bne	1e710 <__assert_fail@plt+0xc848>
   1e588:	ldrb	r1, [r0, #4]
   1e58c:	cmp	r1, #56	; 0x38
   1e590:	bne	1e710 <__assert_fail@plt+0xc848>
   1e594:	ldrb	r0, [r0, #5]
   1e598:	cmp	r0, #0
   1e59c:	movw	r0, #47601	; 0xb9f1
   1e5a0:	movt	r0, #3
   1e5a4:	str	r0, [sp, #72]	; 0x48
   1e5a8:	bne	1e710 <__assert_fail@plt+0xc848>
   1e5ac:	b	1e72c <__assert_fail@plt+0xc864>
   1e5b0:	mov	r0, #1
   1e5b4:	b	1e5f4 <__assert_fail@plt+0xc72c>
   1e5b8:	mov	r4, #0
   1e5bc:	mov	r9, #0
   1e5c0:	mov	r2, r0
   1e5c4:	b	1e644 <__assert_fail@plt+0xc77c>
   1e5c8:	tst	r8, #1
   1e5cc:	bne	1e5f4 <__assert_fail@plt+0xc72c>
   1e5d0:	mov	r2, r0
   1e5d4:	b	1e61c <__assert_fail@plt+0xc754>
   1e5d8:	mov	r0, #1
   1e5dc:	mov	r9, #0
   1e5e0:	mov	r4, #5
   1e5e4:	b	1e660 <__assert_fail@plt+0xc798>
   1e5e8:	mov	r2, #1
   1e5ec:	tst	r8, #1
   1e5f0:	beq	1e61c <__assert_fail@plt+0xc754>
   1e5f4:	mov	r1, #1
   1e5f8:	mov	r9, #0
   1e5fc:	mov	r4, #2
   1e600:	mov	r2, r0
   1e604:	mov	r3, #1
   1e608:	str	r1, [fp, #-72]	; 0xffffffb8
   1e60c:	movw	r1, #43980	; 0xabcc
   1e610:	movt	r1, #3
   1e614:	str	r1, [fp, #-88]	; 0xffffffa8
   1e618:	b	1e8c4 <__assert_fail@plt+0xc9fc>
   1e61c:	cmp	r5, #0
   1e620:	mov	r9, #1
   1e624:	mov	r4, #2
   1e628:	movne	r0, #39	; 0x27
   1e62c:	strbne	r0, [ip]
   1e630:	movw	r0, #43980	; 0xabcc
   1e634:	movt	r0, #3
   1e638:	str	r0, [fp, #-88]	; 0xffffffa8
   1e63c:	mov	r0, #1
   1e640:	str	r0, [fp, #-72]	; 0xffffffb8
   1e644:	mov	r3, #0
   1e648:	b	1e8c4 <__assert_fail@plt+0xc9fc>
   1e64c:	mov	r4, #5
   1e650:	tst	r8, #1
   1e654:	beq	1e67c <__assert_fail@plt+0xc7b4>
   1e658:	mov	r0, #1
   1e65c:	mov	r9, #0
   1e660:	str	r0, [fp, #-72]	; 0xffffffb8
   1e664:	movw	r0, #44514	; 0xade2
   1e668:	mov	r2, #1
   1e66c:	mov	r3, #1
   1e670:	movt	r0, #3
   1e674:	str	r0, [fp, #-88]	; 0xffffffa8
   1e678:	b	1e8c4 <__assert_fail@plt+0xc9fc>
   1e67c:	cmp	r5, #0
   1e680:	mov	r3, #0
   1e684:	mov	r9, #1
   1e688:	mov	r2, #1
   1e68c:	movne	r0, #34	; 0x22
   1e690:	strbne	r0, [ip]
   1e694:	movw	r0, #44514	; 0xade2
   1e698:	movt	r0, #3
   1e69c:	str	r0, [fp, #-88]	; 0xffffffa8
   1e6a0:	mov	r0, #1
   1e6a4:	str	r0, [fp, #-72]	; 0xffffffb8
   1e6a8:	b	1e8c4 <__assert_fail@plt+0xc9fc>
   1e6ac:	ldrb	r1, [r0, #1]
   1e6b0:	and	r1, r1, #223	; 0xdf
   1e6b4:	cmp	r1, #66	; 0x42
   1e6b8:	bne	1e710 <__assert_fail@plt+0xc848>
   1e6bc:	ldrb	r1, [r0, #2]
   1e6c0:	cmp	r1, #49	; 0x31
   1e6c4:	bne	1e710 <__assert_fail@plt+0xc848>
   1e6c8:	ldrb	r1, [r0, #3]
   1e6cc:	cmp	r1, #56	; 0x38
   1e6d0:	bne	1e710 <__assert_fail@plt+0xc848>
   1e6d4:	ldrb	r1, [r0, #4]
   1e6d8:	cmp	r1, #48	; 0x30
   1e6dc:	bne	1e710 <__assert_fail@plt+0xc848>
   1e6e0:	ldrb	r1, [r0, #5]
   1e6e4:	cmp	r1, #51	; 0x33
   1e6e8:	bne	1e710 <__assert_fail@plt+0xc848>
   1e6ec:	ldrb	r1, [r0, #6]
   1e6f0:	cmp	r1, #48	; 0x30
   1e6f4:	bne	1e710 <__assert_fail@plt+0xc848>
   1e6f8:	ldrb	r0, [r0, #7]
   1e6fc:	cmp	r0, #0
   1e700:	movw	r0, #47609	; 0xb9f9
   1e704:	movt	r0, #3
   1e708:	str	r0, [sp, #72]	; 0x48
   1e70c:	beq	1e72c <__assert_fail@plt+0xc864>
   1e710:	movw	r1, #44514	; 0xade2
   1e714:	movw	r0, #43980	; 0xabcc
   1e718:	cmp	r4, #9
   1e71c:	movt	r1, #3
   1e720:	movt	r0, #3
   1e724:	moveq	r0, r1
   1e728:	str	r0, [sp, #72]	; 0x48
   1e72c:	movw	r6, #43980	; 0xabcc
   1e730:	mov	r0, #0
   1e734:	mov	r2, #5
   1e738:	movt	r6, #3
   1e73c:	mov	r1, r6
   1e740:	bl	11afc <dcgettext@plt>
   1e744:	cmp	r0, r6
   1e748:	str	r0, [sp, #76]	; 0x4c
   1e74c:	beq	1e798 <__assert_fail@plt+0xc8d0>
   1e750:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e754:	mov	r9, #0
   1e758:	tst	r8, #1
   1e75c:	bne	1e8a0 <__assert_fail@plt+0xc9d8>
   1e760:	ldr	r0, [sp, #72]	; 0x48
   1e764:	ldrb	r0, [r0]
   1e768:	cmp	r0, #0
   1e76c:	beq	1e8a0 <__assert_fail@plt+0xc9d8>
   1e770:	ldr	r1, [sp, #72]	; 0x48
   1e774:	mov	r9, #0
   1e778:	add	r1, r1, #1
   1e77c:	cmp	r9, r5
   1e780:	strbcc	r0, [ip, r9]
   1e784:	ldrb	r0, [r1, r9]
   1e788:	add	r9, r9, #1
   1e78c:	cmp	r0, #0
   1e790:	bne	1e77c <__assert_fail@plt+0xc8b4>
   1e794:	b	1e8a0 <__assert_fail@plt+0xc9d8>
   1e798:	bl	39584 <__assert_fail@plt+0x276bc>
   1e79c:	ldrb	r1, [r0]
   1e7a0:	and	r1, r1, #223	; 0xdf
   1e7a4:	cmp	r1, #71	; 0x47
   1e7a8:	beq	1e818 <__assert_fail@plt+0xc950>
   1e7ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e7b0:	cmp	r1, #85	; 0x55
   1e7b4:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e7b8:	ldrb	r1, [r0, #1]
   1e7bc:	and	r1, r1, #223	; 0xdf
   1e7c0:	cmp	r1, #84	; 0x54
   1e7c4:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e7c8:	ldrb	r1, [r0, #2]
   1e7cc:	and	r1, r1, #223	; 0xdf
   1e7d0:	cmp	r1, #70	; 0x46
   1e7d4:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e7d8:	ldrb	r1, [r0, #3]
   1e7dc:	cmp	r1, #45	; 0x2d
   1e7e0:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e7e4:	ldrb	r1, [r0, #4]
   1e7e8:	cmp	r1, #56	; 0x38
   1e7ec:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e7f0:	ldrb	r0, [r0, #5]
   1e7f4:	cmp	r0, #0
   1e7f8:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e7fc:	movw	r0, #47605	; 0xb9f5
   1e800:	movt	r0, #3
   1e804:	str	r0, [sp, #76]	; 0x4c
   1e808:	mov	r9, #0
   1e80c:	tst	r8, #1
   1e810:	beq	1e760 <__assert_fail@plt+0xc898>
   1e814:	b	1e8a0 <__assert_fail@plt+0xc9d8>
   1e818:	ldrb	r1, [r0, #1]
   1e81c:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e820:	and	r1, r1, #223	; 0xdf
   1e824:	cmp	r1, #66	; 0x42
   1e828:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e82c:	ldrb	r1, [r0, #2]
   1e830:	cmp	r1, #49	; 0x31
   1e834:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e838:	ldrb	r1, [r0, #3]
   1e83c:	cmp	r1, #56	; 0x38
   1e840:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e844:	ldrb	r1, [r0, #4]
   1e848:	cmp	r1, #48	; 0x30
   1e84c:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e850:	ldrb	r1, [r0, #5]
   1e854:	cmp	r1, #51	; 0x33
   1e858:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e85c:	ldrb	r1, [r0, #6]
   1e860:	cmp	r1, #48	; 0x30
   1e864:	bne	1e874 <__assert_fail@plt+0xc9ac>
   1e868:	ldrb	r0, [r0, #7]
   1e86c:	cmp	r0, #0
   1e870:	beq	1f688 <__assert_fail@plt+0xd7c0>
   1e874:	movw	r0, #43980	; 0xabcc
   1e878:	cmp	r4, #9
   1e87c:	movt	r0, #3
   1e880:	mov	r1, r0
   1e884:	movw	r0, #44514	; 0xade2
   1e888:	movt	r0, #3
   1e88c:	moveq	r1, r0
   1e890:	str	r1, [sp, #76]	; 0x4c
   1e894:	mov	r9, #0
   1e898:	tst	r8, #1
   1e89c:	beq	1e760 <__assert_fail@plt+0xc898>
   1e8a0:	ldr	r6, [sp, #76]	; 0x4c
   1e8a4:	mov	r0, r6
   1e8a8:	bl	11cac <strlen@plt>
   1e8ac:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e8b0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e8b4:	str	r0, [fp, #-72]	; 0xffffffb8
   1e8b8:	str	r6, [fp, #-88]	; 0xffffffa8
   1e8bc:	mov	r2, #1
   1e8c0:	mov	r3, r8
   1e8c4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e8c8:	str	r4, [fp, #-64]	; 0xffffffc0
   1e8cc:	mov	sl, #0
   1e8d0:	str	r3, [fp, #-76]	; 0xffffffb4
   1e8d4:	str	r2, [sp, #88]	; 0x58
   1e8d8:	cmp	r0, #0
   1e8dc:	movwne	r0, #1
   1e8e0:	and	r1, r0, r3
   1e8e4:	and	r1, r2, r1
   1e8e8:	str	r1, [sp, #48]	; 0x30
   1e8ec:	sub	r1, r4, #2
   1e8f0:	clz	r1, r1
   1e8f4:	lsr	r1, r1, #5
   1e8f8:	and	r1, r1, r3
   1e8fc:	str	r1, [sp, #44]	; 0x2c
   1e900:	subs	r1, r4, #2
   1e904:	eor	r4, r3, #1
   1e908:	movwne	r1, #1
   1e90c:	str	r4, [sp, #92]	; 0x5c
   1e910:	orr	r4, r1, r4
   1e914:	and	r1, r1, r2
   1e918:	and	r0, r0, r1
   1e91c:	str	r4, [sp, #64]	; 0x40
   1e920:	ldr	r4, [sp, #84]	; 0x54
   1e924:	str	r0, [fp, #-60]	; 0xffffffc4
   1e928:	orr	r0, r1, r3
   1e92c:	ldr	r1, [fp, #16]
   1e930:	eor	r0, r0, #1
   1e934:	clz	r1, r1
   1e938:	lsr	r1, r1, #5
   1e93c:	orr	r0, r1, r0
   1e940:	str	r0, [fp, #-68]	; 0xffffffbc
   1e944:	eor	r0, r2, #1
   1e948:	str	r0, [sp, #52]	; 0x34
   1e94c:	cmn	r7, #1
   1e950:	beq	1e960 <__assert_fail@plt+0xca98>
   1e954:	cmp	sl, r7
   1e958:	bne	1e96c <__assert_fail@plt+0xcaa4>
   1e95c:	b	1f600 <__assert_fail@plt+0xd738>
   1e960:	ldrb	r0, [lr, sl]
   1e964:	cmp	r0, #0
   1e968:	beq	1f608 <__assert_fail@plt+0xd740>
   1e96c:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1e970:	cmp	r0, #0
   1e974:	beq	1e9d4 <__assert_fail@plt+0xcb0c>
   1e978:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1e97c:	mov	r6, r5
   1e980:	add	r5, sl, r0
   1e984:	cmp	r0, #2
   1e988:	bcc	1e9f4 <__assert_fail@plt+0xcb2c>
   1e98c:	mov	r0, #0
   1e990:	cmn	r7, #1
   1e994:	str	r0, [fp, #-56]	; 0xffffffc8
   1e998:	bne	1e9b0 <__assert_fail@plt+0xcae8>
   1e99c:	mov	r0, lr
   1e9a0:	bl	11cac <strlen@plt>
   1e9a4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1e9a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1e9ac:	mov	r7, r0
   1e9b0:	cmp	r5, r7
   1e9b4:	bls	1ea04 <__assert_fail@plt+0xcb3c>
   1e9b8:	mov	r0, #0
   1e9bc:	mov	r5, r6
   1e9c0:	str	r0, [fp, #-48]	; 0xffffffd0
   1e9c4:	ldrb	r6, [lr, sl]
   1e9c8:	cmp	r6, #126	; 0x7e
   1e9cc:	bls	1ea54 <__assert_fail@plt+0xcb8c>
   1e9d0:	b	1efb0 <__assert_fail@plt+0xd0e8>
   1e9d4:	mov	r0, #0
   1e9d8:	str	r0, [fp, #-56]	; 0xffffffc8
   1e9dc:	mov	r0, #0
   1e9e0:	str	r0, [fp, #-48]	; 0xffffffd0
   1e9e4:	ldrb	r6, [lr, sl]
   1e9e8:	cmp	r6, #126	; 0x7e
   1e9ec:	bls	1ea54 <__assert_fail@plt+0xcb8c>
   1e9f0:	b	1efb0 <__assert_fail@plt+0xd0e8>
   1e9f4:	mov	r0, #0
   1e9f8:	str	r0, [fp, #-56]	; 0xffffffc8
   1e9fc:	cmp	r5, r7
   1ea00:	bhi	1e9b8 <__assert_fail@plt+0xcaf0>
   1ea04:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1ea08:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1ea0c:	add	r0, lr, sl
   1ea10:	bl	11ca0 <bcmp@plt>
   1ea14:	ldr	r2, [sp, #92]	; 0x5c
   1ea18:	cmp	r0, #0
   1ea1c:	mov	r1, r0
   1ea20:	mov	r5, r6
   1ea24:	movwne	r1, #1
   1ea28:	orr	r1, r1, r2
   1ea2c:	tst	r1, #1
   1ea30:	beq	1f6c8 <__assert_fail@plt+0xd800>
   1ea34:	ldr	ip, [fp, #-84]	; 0xffffffac
   1ea38:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1ea3c:	clz	r0, r0
   1ea40:	lsr	r0, r0, #5
   1ea44:	str	r0, [fp, #-48]	; 0xffffffd0
   1ea48:	ldrb	r6, [lr, sl]
   1ea4c:	cmp	r6, #126	; 0x7e
   1ea50:	bhi	1efb0 <__assert_fail@plt+0xd0e8>
   1ea54:	add	r3, pc, #16
   1ea58:	mov	r8, #1
   1ea5c:	mov	r2, #110	; 0x6e
   1ea60:	mov	r0, #97	; 0x61
   1ea64:	mov	r1, #0
   1ea68:	ldr	pc, [r3, r6, lsl #2]
   1ea6c:	andeq	lr, r1, r8, ror #26
   1ea70:			; <UNDEFINED> instruction: 0x0001efb0
   1ea74:			; <UNDEFINED> instruction: 0x0001efb0
   1ea78:			; <UNDEFINED> instruction: 0x0001efb0
   1ea7c:			; <UNDEFINED> instruction: 0x0001efb0
   1ea80:			; <UNDEFINED> instruction: 0x0001efb0
   1ea84:			; <UNDEFINED> instruction: 0x0001efb0
   1ea88:	andeq	pc, r1, r4, rrx
   1ea8c:	andeq	lr, r1, r8, asr #26
   1ea90:	andeq	lr, r1, r0, asr #26
   1ea94:	andeq	lr, r1, r4, asr sp
   1ea98:	andeq	lr, r1, r4, lsl #29
   1ea9c:	andeq	lr, r1, r8, lsr sp
   1eaa0:	andeq	lr, r1, r0, asr sp
   1eaa4:			; <UNDEFINED> instruction: 0x0001efb0
   1eaa8:			; <UNDEFINED> instruction: 0x0001efb0
   1eaac:			; <UNDEFINED> instruction: 0x0001efb0
   1eab0:			; <UNDEFINED> instruction: 0x0001efb0
   1eab4:			; <UNDEFINED> instruction: 0x0001efb0
   1eab8:			; <UNDEFINED> instruction: 0x0001efb0
   1eabc:			; <UNDEFINED> instruction: 0x0001efb0
   1eac0:			; <UNDEFINED> instruction: 0x0001efb0
   1eac4:			; <UNDEFINED> instruction: 0x0001efb0
   1eac8:			; <UNDEFINED> instruction: 0x0001efb0
   1eacc:			; <UNDEFINED> instruction: 0x0001efb0
   1ead0:			; <UNDEFINED> instruction: 0x0001efb0
   1ead4:			; <UNDEFINED> instruction: 0x0001efb0
   1ead8:			; <UNDEFINED> instruction: 0x0001efb0
   1eadc:			; <UNDEFINED> instruction: 0x0001efb0
   1eae0:			; <UNDEFINED> instruction: 0x0001efb0
   1eae4:			; <UNDEFINED> instruction: 0x0001efb0
   1eae8:			; <UNDEFINED> instruction: 0x0001efb0
   1eaec:	ldrdeq	lr, [r1], -ip
   1eaf0:	andeq	lr, r1, r0, ror #25
   1eaf4:	andeq	lr, r1, r0, ror #25
   1eaf8:	ldrdeq	lr, [r1], -r0
   1eafc:	andeq	lr, r1, r0, ror #25
   1eb00:	andeq	lr, r1, r8, ror #24
   1eb04:	andeq	lr, r1, r0, ror #25
   1eb08:	andeq	lr, r1, ip, lsl #29
   1eb0c:	andeq	lr, r1, r0, ror #25
   1eb10:	andeq	lr, r1, r0, ror #25
   1eb14:	andeq	lr, r1, r0, ror #25
   1eb18:	andeq	lr, r1, r8, ror #24
   1eb1c:	andeq	lr, r1, r8, ror #24
   1eb20:	andeq	lr, r1, r8, ror #24
   1eb24:	andeq	lr, r1, r8, ror #24
   1eb28:	andeq	lr, r1, r8, ror #24
   1eb2c:	andeq	lr, r1, r8, ror #24
   1eb30:	andeq	lr, r1, r8, ror #24
   1eb34:	andeq	lr, r1, r8, ror #24
   1eb38:	andeq	lr, r1, r8, ror #24
   1eb3c:	andeq	lr, r1, r8, ror #24
   1eb40:	andeq	lr, r1, r8, ror #24
   1eb44:	andeq	lr, r1, r8, ror #24
   1eb48:	andeq	lr, r1, r8, ror #24
   1eb4c:	andeq	lr, r1, r8, ror #24
   1eb50:	andeq	lr, r1, r8, ror #24
   1eb54:	andeq	lr, r1, r8, ror #24
   1eb58:	andeq	lr, r1, r0, ror #25
   1eb5c:	andeq	lr, r1, r0, ror #25
   1eb60:	andeq	lr, r1, r0, ror #25
   1eb64:	andeq	lr, r1, r0, ror #25
   1eb68:	andeq	lr, r1, r0, asr lr
   1eb6c:			; <UNDEFINED> instruction: 0x0001efb0
   1eb70:	andeq	lr, r1, r8, ror #24
   1eb74:	andeq	lr, r1, r8, ror #24
   1eb78:	andeq	lr, r1, r8, ror #24
   1eb7c:	andeq	lr, r1, r8, ror #24
   1eb80:	andeq	lr, r1, r8, ror #24
   1eb84:	andeq	lr, r1, r8, ror #24
   1eb88:	andeq	lr, r1, r8, ror #24
   1eb8c:	andeq	lr, r1, r8, ror #24
   1eb90:	andeq	lr, r1, r8, ror #24
   1eb94:	andeq	lr, r1, r8, ror #24
   1eb98:	andeq	lr, r1, r8, ror #24
   1eb9c:	andeq	lr, r1, r8, ror #24
   1eba0:	andeq	lr, r1, r8, ror #24
   1eba4:	andeq	lr, r1, r8, ror #24
   1eba8:	andeq	lr, r1, r8, ror #24
   1ebac:	andeq	lr, r1, r8, ror #24
   1ebb0:	andeq	lr, r1, r8, ror #24
   1ebb4:	andeq	lr, r1, r8, ror #24
   1ebb8:	andeq	lr, r1, r8, ror #24
   1ebbc:	andeq	lr, r1, r8, ror #24
   1ebc0:	andeq	lr, r1, r8, ror #24
   1ebc4:	andeq	lr, r1, r8, ror #24
   1ebc8:	andeq	lr, r1, r8, ror #24
   1ebcc:	andeq	lr, r1, r8, ror #24
   1ebd0:	andeq	lr, r1, r8, ror #24
   1ebd4:	andeq	lr, r1, r8, ror #24
   1ebd8:	andeq	lr, r1, r0, ror #25
   1ebdc:	andeq	lr, r1, r4, lsl sp
   1ebe0:	andeq	lr, r1, r8, ror #24
   1ebe4:	andeq	lr, r1, r0, ror #25
   1ebe8:	andeq	lr, r1, r8, ror #24
   1ebec:	andeq	lr, r1, r0, ror #25
   1ebf0:	andeq	lr, r1, r8, ror #24
   1ebf4:	andeq	lr, r1, r8, ror #24
   1ebf8:	andeq	lr, r1, r8, ror #24
   1ebfc:	andeq	lr, r1, r8, ror #24
   1ec00:	andeq	lr, r1, r8, ror #24
   1ec04:	andeq	lr, r1, r8, ror #24
   1ec08:	andeq	lr, r1, r8, ror #24
   1ec0c:	andeq	lr, r1, r8, ror #24
   1ec10:	andeq	lr, r1, r8, ror #24
   1ec14:	andeq	lr, r1, r8, ror #24
   1ec18:	andeq	lr, r1, r8, ror #24
   1ec1c:	andeq	lr, r1, r8, ror #24
   1ec20:	andeq	lr, r1, r8, ror #24
   1ec24:	andeq	lr, r1, r8, ror #24
   1ec28:	andeq	lr, r1, r8, ror #24
   1ec2c:	andeq	lr, r1, r8, ror #24
   1ec30:	andeq	lr, r1, r8, ror #24
   1ec34:	andeq	lr, r1, r8, ror #24
   1ec38:	andeq	lr, r1, r8, ror #24
   1ec3c:	andeq	lr, r1, r8, ror #24
   1ec40:	andeq	lr, r1, r8, ror #24
   1ec44:	andeq	lr, r1, r8, ror #24
   1ec48:	andeq	lr, r1, r8, ror #24
   1ec4c:	andeq	lr, r1, r8, ror #24
   1ec50:	andeq	lr, r1, r8, ror #24
   1ec54:	andeq	lr, r1, r8, ror #24
   1ec58:	andeq	lr, r1, r8, lsr #25
   1ec5c:	andeq	lr, r1, r0, ror #25
   1ec60:	andeq	lr, r1, r8, lsr #25
   1ec64:	ldrdeq	lr, [r1], -r0
   1ec68:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ec6c:	tst	r0, #1
   1ec70:	bne	1ef28 <__assert_fail@plt+0xd060>
   1ec74:	ldr	r1, [fp, #16]
   1ec78:	ubfx	r0, r6, #5, #3
   1ec7c:	mov	r2, #1
   1ec80:	ldr	r0, [r1, r0, lsl #2]
   1ec84:	and	r1, r6, #31
   1ec88:	tst	r0, r2, lsl r1
   1ec8c:	beq	1ef28 <__assert_fail@plt+0xd060>
   1ec90:	mov	r0, r6
   1ec94:	mov	r1, r8
   1ec98:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1ec9c:	tst	r2, #1
   1eca0:	beq	1ef48 <__assert_fail@plt+0xd080>
   1eca4:	b	1f6a4 <__assert_fail@plt+0xd7dc>
   1eca8:	cmp	r7, #1
   1ecac:	beq	1ecd0 <__assert_fail@plt+0xce08>
   1ecb0:	mov	r8, #0
   1ecb4:	cmn	r7, #1
   1ecb8:	bne	1ef14 <__assert_fail@plt+0xd04c>
   1ecbc:	ldrb	r0, [lr, #1]
   1ecc0:	cmp	r0, #0
   1ecc4:	beq	1ecd0 <__assert_fail@plt+0xce08>
   1ecc8:	mvn	r7, #0
   1eccc:	b	1ef14 <__assert_fail@plt+0xd04c>
   1ecd0:	mov	r8, #0
   1ecd4:	cmp	sl, #0
   1ecd8:	bne	1ef14 <__assert_fail@plt+0xd04c>
   1ecdc:	mov	r1, #1
   1ece0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ece4:	cmp	r0, #2
   1ece8:	bne	1ed00 <__assert_fail@plt+0xce38>
   1ecec:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ecf0:	mov	r8, r1
   1ecf4:	tst	r0, #1
   1ecf8:	beq	1ec68 <__assert_fail@plt+0xcda0>
   1ecfc:	b	1f6a4 <__assert_fail@plt+0xd7dc>
   1ed00:	mov	r8, r1
   1ed04:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ed08:	tst	r0, #1
   1ed0c:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1ed10:	b	1ef28 <__assert_fail@plt+0xd060>
   1ed14:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ed18:	cmp	r0, #2
   1ed1c:	bne	1efdc <__assert_fail@plt+0xd114>
   1ed20:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ed24:	tst	r0, #1
   1ed28:	bne	1f6a4 <__assert_fail@plt+0xd7dc>
   1ed2c:	mov	r0, #0
   1ed30:	str	r0, [fp, #-56]	; 0xffffffc8
   1ed34:	b	1eff4 <__assert_fail@plt+0xd12c>
   1ed38:	mov	r0, #102	; 0x66
   1ed3c:	b	1f064 <__assert_fail@plt+0xd19c>
   1ed40:	mov	r2, #116	; 0x74
   1ed44:	b	1ed54 <__assert_fail@plt+0xce8c>
   1ed48:	mov	r0, #98	; 0x62
   1ed4c:	b	1f064 <__assert_fail@plt+0xd19c>
   1ed50:	mov	r2, #114	; 0x72
   1ed54:	ldr	r0, [sp, #64]	; 0x40
   1ed58:	tst	r0, #1
   1ed5c:	mov	r0, r2
   1ed60:	bne	1f064 <__assert_fail@plt+0xd19c>
   1ed64:	b	1f6a4 <__assert_fail@plt+0xd7dc>
   1ed68:	ldr	r0, [sp, #88]	; 0x58
   1ed6c:	tst	r0, #1
   1ed70:	beq	1f084 <__assert_fail@plt+0xd1bc>
   1ed74:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ed78:	tst	r0, #1
   1ed7c:	bne	1f7e0 <__assert_fail@plt+0xd918>
   1ed80:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ed84:	ldr	r1, [fp, #-52]	; 0xffffffcc
   1ed88:	subs	r0, r0, #2
   1ed8c:	movwne	r0, #1
   1ed90:	orr	r0, r0, r1
   1ed94:	tst	r0, #1
   1ed98:	bne	1edd4 <__assert_fail@plt+0xcf0c>
   1ed9c:	cmp	r9, r5
   1eda0:	movcc	r0, #39	; 0x27
   1eda4:	strbcc	r0, [ip, r9]
   1eda8:	add	r0, r9, #1
   1edac:	cmp	r0, r5
   1edb0:	movcc	r1, #36	; 0x24
   1edb4:	strbcc	r1, [ip, r0]
   1edb8:	add	r0, r9, #2
   1edbc:	add	r9, r9, #3
   1edc0:	cmp	r0, r5
   1edc4:	movcc	r1, #39	; 0x27
   1edc8:	strbcc	r1, [ip, r0]
   1edcc:	mov	r0, #1
   1edd0:	str	r0, [fp, #-52]	; 0xffffffcc
   1edd4:	mov	r1, #1
   1edd8:	cmp	r9, r5
   1eddc:	mov	r8, #0
   1ede0:	mov	r6, #48	; 0x30
   1ede4:	str	r1, [fp, #-56]	; 0xffffffc8
   1ede8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1edec:	movcc	r0, #92	; 0x5c
   1edf0:	strbcc	r0, [ip, r9]
   1edf4:	add	r0, r9, #1
   1edf8:	cmp	r1, #2
   1edfc:	beq	1f250 <__assert_fail@plt+0xd388>
   1ee00:	add	r1, sl, #1
   1ee04:	cmp	r1, r7
   1ee08:	bcs	1f250 <__assert_fail@plt+0xd388>
   1ee0c:	ldrb	r1, [lr, r1]
   1ee10:	sub	r1, r1, #48	; 0x30
   1ee14:	uxtb	r1, r1
   1ee18:	cmp	r1, #9
   1ee1c:	bhi	1f250 <__assert_fail@plt+0xd388>
   1ee20:	cmp	r0, r5
   1ee24:	movcc	r1, #48	; 0x30
   1ee28:	strbcc	r1, [ip, r0]
   1ee2c:	add	r0, r9, #2
   1ee30:	add	r9, r9, #3
   1ee34:	cmp	r0, r5
   1ee38:	movcc	r1, #48	; 0x30
   1ee3c:	strbcc	r1, [ip, r0]
   1ee40:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ee44:	tst	r0, #1
   1ee48:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1ee4c:	b	1ef28 <__assert_fail@plt+0xd060>
   1ee50:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ee54:	mov	r6, #63	; 0x3f
   1ee58:	cmp	r0, #5
   1ee5c:	beq	1f264 <__assert_fail@plt+0xd39c>
   1ee60:	mov	r1, #0
   1ee64:	cmp	r0, #2
   1ee68:	str	r1, [fp, #-56]	; 0xffffffc8
   1ee6c:	bne	1f32c <__assert_fail@plt+0xd464>
   1ee70:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1ee74:	mov	r8, #0
   1ee78:	tst	r0, #1
   1ee7c:	beq	1ec68 <__assert_fail@plt+0xcda0>
   1ee80:	b	1f6a4 <__assert_fail@plt+0xd7dc>
   1ee84:	mov	r0, #118	; 0x76
   1ee88:	b	1f064 <__assert_fail@plt+0xd19c>
   1ee8c:	mov	r0, #1
   1ee90:	mov	r6, #39	; 0x27
   1ee94:	str	r0, [sp, #60]	; 0x3c
   1ee98:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1ee9c:	cmp	r0, #2
   1eea0:	bne	1f0a4 <__assert_fail@plt+0xd1dc>
   1eea4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1eea8:	tst	r0, #1
   1eeac:	bne	1f6a4 <__assert_fail@plt+0xd7dc>
   1eeb0:	ldr	r2, [sp, #56]	; 0x38
   1eeb4:	clz	r1, r5
   1eeb8:	mov	r8, #1
   1eebc:	lsr	r1, r1, #5
   1eec0:	cmp	r2, #0
   1eec4:	mov	r0, r2
   1eec8:	movwne	r0, #1
   1eecc:	orrs	r0, r0, r1
   1eed0:	moveq	r2, r5
   1eed4:	moveq	r5, r0
   1eed8:	cmp	r9, r5
   1eedc:	str	r2, [sp, #56]	; 0x38
   1eee0:	movcc	r0, #39	; 0x27
   1eee4:	strbcc	r0, [ip, r9]
   1eee8:	add	r0, r9, #1
   1eeec:	cmp	r0, r5
   1eef0:	movcc	r1, #92	; 0x5c
   1eef4:	strbcc	r1, [ip, r0]
   1eef8:	add	r0, r9, #2
   1eefc:	add	r9, r9, #3
   1ef00:	cmp	r0, r5
   1ef04:	movcc	r1, #39	; 0x27
   1ef08:	strbcc	r1, [ip, r0]
   1ef0c:	mov	r0, #0
   1ef10:	str	r0, [fp, #-52]	; 0xffffffcc
   1ef14:	mov	r0, #0
   1ef18:	str	r0, [fp, #-56]	; 0xffffffc8
   1ef1c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1ef20:	tst	r0, #1
   1ef24:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1ef28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   1ef2c:	mov	r1, r8
   1ef30:	cmp	r0, #0
   1ef34:	mov	r0, r6
   1ef38:	beq	1effc <__assert_fail@plt+0xd134>
   1ef3c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1ef40:	tst	r2, #1
   1ef44:	bne	1f6a4 <__assert_fail@plt+0xd7dc>
   1ef48:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1ef4c:	ldr	r3, [fp, #-52]	; 0xffffffcc
   1ef50:	subs	r2, r2, #2
   1ef54:	movwne	r2, #1
   1ef58:	orr	r2, r2, r3
   1ef5c:	tst	r2, #1
   1ef60:	bne	1ef9c <__assert_fail@plt+0xd0d4>
   1ef64:	cmp	r9, r5
   1ef68:	movcc	r2, #39	; 0x27
   1ef6c:	strbcc	r2, [ip, r9]
   1ef70:	add	r2, r9, #1
   1ef74:	cmp	r2, r5
   1ef78:	movcc	r3, #36	; 0x24
   1ef7c:	strbcc	r3, [ip, r2]
   1ef80:	add	r2, r9, #2
   1ef84:	add	r9, r9, #3
   1ef88:	cmp	r2, r5
   1ef8c:	movcc	r3, #39	; 0x27
   1ef90:	strbcc	r3, [ip, r2]
   1ef94:	mov	r2, #1
   1ef98:	str	r2, [fp, #-52]	; 0xffffffcc
   1ef9c:	cmp	r9, r5
   1efa0:	movcc	r2, #92	; 0x5c
   1efa4:	strbcc	r2, [ip, r9]
   1efa8:	add	r9, r9, #1
   1efac:	b	1f044 <__assert_fail@plt+0xd17c>
   1efb0:	ldr	r0, [sp, #40]	; 0x28
   1efb4:	cmp	r0, #1
   1efb8:	bne	1f0b8 <__assert_fail@plt+0xd1f0>
   1efbc:	bl	11c7c <__ctype_b_loc@plt>
   1efc0:	ldr	r0, [r0]
   1efc4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1efc8:	mov	r1, #1
   1efcc:	add	r0, r0, r6, lsl #1
   1efd0:	ldrb	r0, [r0, #1]
   1efd4:	ubfx	r8, r0, #6, #1
   1efd8:	b	1f410 <__assert_fail@plt+0xd548>
   1efdc:	ldr	r1, [sp, #48]	; 0x30
   1efe0:	mov	r0, #0
   1efe4:	str	r0, [fp, #-56]	; 0xffffffc8
   1efe8:	mov	r0, #92	; 0x5c
   1efec:	cmp	r1, #0
   1eff0:	beq	1f064 <__assert_fail@plt+0xd19c>
   1eff4:	mov	r6, #92	; 0x5c
   1eff8:	mov	r8, #0
   1effc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f000:	cmp	r0, #0
   1f004:	bne	1f03c <__assert_fail@plt+0xd174>
   1f008:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f00c:	tst	r0, #1
   1f010:	beq	1f03c <__assert_fail@plt+0xd174>
   1f014:	cmp	r9, r5
   1f018:	movcc	r0, #39	; 0x27
   1f01c:	strbcc	r0, [ip, r9]
   1f020:	add	r0, r9, #1
   1f024:	add	r9, r9, #2
   1f028:	cmp	r0, r5
   1f02c:	movcc	r1, #39	; 0x27
   1f030:	strbcc	r1, [ip, r0]
   1f034:	mov	r0, #0
   1f038:	str	r0, [fp, #-52]	; 0xffffffcc
   1f03c:	mov	r1, r8
   1f040:	mov	r0, r6
   1f044:	cmp	r9, r5
   1f048:	and	r4, r4, r1
   1f04c:	strbcc	r0, [ip, r9]
   1f050:	add	r9, r9, #1
   1f054:	add	sl, sl, #1
   1f058:	cmn	r7, #1
   1f05c:	bne	1e954 <__assert_fail@plt+0xca8c>
   1f060:	b	1e960 <__assert_fail@plt+0xca98>
   1f064:	mov	r1, #0
   1f068:	mov	r8, #0
   1f06c:	str	r1, [fp, #-56]	; 0xffffffc8
   1f070:	ldr	r1, [sp, #88]	; 0x58
   1f074:	tst	r1, #1
   1f078:	mov	r1, #0
   1f07c:	beq	1ec68 <__assert_fail@plt+0xcda0>
   1f080:	b	1ef3c <__assert_fail@plt+0xd074>
   1f084:	ldr	r0, [sp, #36]	; 0x24
   1f088:	mov	r6, #0
   1f08c:	mov	r8, #0
   1f090:	cmp	r0, #0
   1f094:	mov	r0, #0
   1f098:	str	r0, [fp, #-56]	; 0xffffffc8
   1f09c:	bne	1f054 <__assert_fail@plt+0xd18c>
   1f0a0:	b	1ec68 <__assert_fail@plt+0xcda0>
   1f0a4:	mov	r8, #1
   1f0a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f0ac:	tst	r0, #1
   1f0b0:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1f0b4:	b	1ef28 <__assert_fail@plt+0xd060>
   1f0b8:	mov	r0, #0
   1f0bc:	cmn	r7, #1
   1f0c0:	str	r0, [fp, #-36]	; 0xffffffdc
   1f0c4:	str	r0, [fp, #-40]	; 0xffffffd8
   1f0c8:	bne	1f0dc <__assert_fail@plt+0xd214>
   1f0cc:	mov	r0, lr
   1f0d0:	bl	11cac <strlen@plt>
   1f0d4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f0d8:	mov	r7, r0
   1f0dc:	ldr	r0, [sp, #44]	; 0x2c
   1f0e0:	str	r4, [sp, #84]	; 0x54
   1f0e4:	str	r5, [sp, #28]
   1f0e8:	cmp	r0, #0
   1f0ec:	beq	1f340 <__assert_fail@plt+0xd478>
   1f0f0:	ldr	r0, [sp, #80]	; 0x50
   1f0f4:	mov	r8, #1
   1f0f8:	mov	r5, #0
   1f0fc:	add	r0, r0, sl
   1f100:	str	r0, [sp, #24]
   1f104:	sub	r0, fp, #40	; 0x28
   1f108:	mov	r3, r0
   1f10c:	b	1f148 <__assert_fail@plt+0xd280>
   1f110:	ldr	r5, [sp, #68]	; 0x44
   1f114:	add	r5, r0, r5
   1f118:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f11c:	bl	11b5c <iswprint@plt>
   1f120:	cmp	r0, #0
   1f124:	sub	r4, fp, #40	; 0x28
   1f128:	movwne	r0, #1
   1f12c:	and	r8, r8, r0
   1f130:	mov	r0, r4
   1f134:	bl	11ae4 <mbsinit@plt>
   1f138:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f13c:	mov	r3, r4
   1f140:	cmp	r0, #0
   1f144:	bne	1f404 <__assert_fail@plt+0xd53c>
   1f148:	str	r5, [sp, #68]	; 0x44
   1f14c:	add	r5, r5, sl
   1f150:	sub	r0, fp, #44	; 0x2c
   1f154:	add	r1, lr, r5
   1f158:	sub	r2, r7, r5
   1f15c:	bl	3966c <__assert_fail@plt+0x277a4>
   1f160:	cmn	r0, #2
   1f164:	beq	1f3c4 <__assert_fail@plt+0xd4fc>
   1f168:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f16c:	cmn	r0, #1
   1f170:	beq	1f3b8 <__assert_fail@plt+0xd4f0>
   1f174:	cmp	r0, #0
   1f178:	beq	1f3bc <__assert_fail@plt+0xd4f4>
   1f17c:	cmp	r0, #2
   1f180:	bcc	1f110 <__assert_fail@plt+0xd248>
   1f184:	ldr	r1, [sp, #68]	; 0x44
   1f188:	ldr	r2, [sp, #24]
   1f18c:	add	r1, r2, r1
   1f190:	sub	r2, r0, #1
   1f194:	ldrb	r3, [r1]
   1f198:	sub	r3, r3, #91	; 0x5b
   1f19c:	cmp	r3, #33	; 0x21
   1f1a0:	bls	1f1c0 <__assert_fail@plt+0xd2f8>
   1f1a4:	add	r1, r1, #1
   1f1a8:	subs	r2, r2, #1
   1f1ac:	beq	1f110 <__assert_fail@plt+0xd248>
   1f1b0:	ldrb	r3, [r1]
   1f1b4:	sub	r3, r3, #91	; 0x5b
   1f1b8:	cmp	r3, #33	; 0x21
   1f1bc:	bhi	1f1a4 <__assert_fail@plt+0xd2dc>
   1f1c0:	add	r5, pc, #0
   1f1c4:	ldr	pc, [r5, r3, lsl #2]
   1f1c8:	ldrdeq	pc, [r1], -ip
   1f1cc:	ldrdeq	pc, [r1], -ip
   1f1d0:	andeq	pc, r1, r4, lsr #3
   1f1d4:	ldrdeq	pc, [r1], -ip
   1f1d8:	andeq	pc, r1, r4, lsr #3
   1f1dc:	ldrdeq	pc, [r1], -ip
   1f1e0:	andeq	pc, r1, r4, lsr #3
   1f1e4:	andeq	pc, r1, r4, lsr #3
   1f1e8:	andeq	pc, r1, r4, lsr #3
   1f1ec:	andeq	pc, r1, r4, lsr #3
   1f1f0:	andeq	pc, r1, r4, lsr #3
   1f1f4:	andeq	pc, r1, r4, lsr #3
   1f1f8:	andeq	pc, r1, r4, lsr #3
   1f1fc:	andeq	pc, r1, r4, lsr #3
   1f200:	andeq	pc, r1, r4, lsr #3
   1f204:	andeq	pc, r1, r4, lsr #3
   1f208:	andeq	pc, r1, r4, lsr #3
   1f20c:	andeq	pc, r1, r4, lsr #3
   1f210:	andeq	pc, r1, r4, lsr #3
   1f214:	andeq	pc, r1, r4, lsr #3
   1f218:	andeq	pc, r1, r4, lsr #3
   1f21c:	andeq	pc, r1, r4, lsr #3
   1f220:	andeq	pc, r1, r4, lsr #3
   1f224:	andeq	pc, r1, r4, lsr #3
   1f228:	andeq	pc, r1, r4, lsr #3
   1f22c:	andeq	pc, r1, r4, lsr #3
   1f230:	andeq	pc, r1, r4, lsr #3
   1f234:	andeq	pc, r1, r4, lsr #3
   1f238:	andeq	pc, r1, r4, lsr #3
   1f23c:	andeq	pc, r1, r4, lsr #3
   1f240:	andeq	pc, r1, r4, lsr #3
   1f244:	andeq	pc, r1, r4, lsr #3
   1f248:	andeq	pc, r1, r4, lsr #3
   1f24c:	ldrdeq	pc, [r1], -ip
   1f250:	mov	r9, r0
   1f254:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f258:	tst	r0, #1
   1f25c:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1f260:	b	1ef28 <__assert_fail@plt+0xd060>
   1f264:	mov	r0, #0
   1f268:	str	r0, [fp, #-56]	; 0xffffffc8
   1f26c:	ldr	r0, [sp, #32]
   1f270:	cmp	r0, #0
   1f274:	beq	1f32c <__assert_fail@plt+0xd464>
   1f278:	add	r0, sl, #2
   1f27c:	mov	r1, r7
   1f280:	cmp	r0, r7
   1f284:	bcs	1f32c <__assert_fail@plt+0xd464>
   1f288:	add	r1, sl, lr
   1f28c:	ldrb	r1, [r1, #1]
   1f290:	cmp	r1, #63	; 0x3f
   1f294:	bne	1f32c <__assert_fail@plt+0xd464>
   1f298:	ldrb	r8, [lr, r0]
   1f29c:	sub	r2, r8, #33	; 0x21
   1f2a0:	cmp	r2, #29
   1f2a4:	bhi	1f32c <__assert_fail@plt+0xd464>
   1f2a8:	mov	r1, r4
   1f2ac:	movw	r4, #20929	; 0x51c1
   1f2b0:	mov	r3, #1
   1f2b4:	movt	r4, #14336	; 0x3800
   1f2b8:	tst	r4, r3, lsl r2
   1f2bc:	beq	1f5e8 <__assert_fail@plt+0xd720>
   1f2c0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1f2c4:	tst	r2, #1
   1f2c8:	bne	1f6a4 <__assert_fail@plt+0xd7dc>
   1f2cc:	cmp	r9, r5
   1f2d0:	mov	r6, r8
   1f2d4:	mov	r4, r1
   1f2d8:	mov	sl, r0
   1f2dc:	mov	r8, #0
   1f2e0:	movcc	r2, #63	; 0x3f
   1f2e4:	strbcc	r2, [ip, r9]
   1f2e8:	add	r2, r9, #1
   1f2ec:	cmp	r2, r5
   1f2f0:	movcc	r3, #34	; 0x22
   1f2f4:	strbcc	r3, [ip, r2]
   1f2f8:	add	r2, r9, #2
   1f2fc:	cmp	r2, r5
   1f300:	movcc	r3, #34	; 0x22
   1f304:	strbcc	r3, [ip, r2]
   1f308:	add	r2, r9, #3
   1f30c:	add	r9, r9, #4
   1f310:	cmp	r2, r5
   1f314:	movcc	r3, #63	; 0x3f
   1f318:	strbcc	r3, [ip, r2]
   1f31c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f320:	tst	r0, #1
   1f324:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1f328:	b	1ef28 <__assert_fail@plt+0xd060>
   1f32c:	mov	r8, #0
   1f330:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f334:	tst	r0, #1
   1f338:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1f33c:	b	1ef28 <__assert_fail@plt+0xd060>
   1f340:	mov	r8, #1
   1f344:	mov	r5, #0
   1f348:	sub	r4, fp, #40	; 0x28
   1f34c:	str	r5, [sp, #68]	; 0x44
   1f350:	add	r5, r5, sl
   1f354:	sub	r0, fp, #44	; 0x2c
   1f358:	mov	r3, r4
   1f35c:	add	r1, lr, r5
   1f360:	sub	r2, r7, r5
   1f364:	bl	3966c <__assert_fail@plt+0x277a4>
   1f368:	cmn	r0, #2
   1f36c:	beq	1f3c4 <__assert_fail@plt+0xd4fc>
   1f370:	cmn	r0, #1
   1f374:	beq	1f3b8 <__assert_fail@plt+0xd4f0>
   1f378:	ldr	r5, [sp, #68]	; 0x44
   1f37c:	cmp	r0, #0
   1f380:	beq	1f400 <__assert_fail@plt+0xd538>
   1f384:	add	r5, r0, r5
   1f388:	ldr	r0, [fp, #-44]	; 0xffffffd4
   1f38c:	bl	11b5c <iswprint@plt>
   1f390:	cmp	r0, #0
   1f394:	sub	r4, fp, #40	; 0x28
   1f398:	movwne	r0, #1
   1f39c:	and	r8, r8, r0
   1f3a0:	mov	r0, r4
   1f3a4:	bl	11ae4 <mbsinit@plt>
   1f3a8:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f3ac:	cmp	r0, #0
   1f3b0:	beq	1f34c <__assert_fail@plt+0xd484>
   1f3b4:	b	1f404 <__assert_fail@plt+0xd53c>
   1f3b8:	mov	r8, #0
   1f3bc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f3c0:	b	1f3f8 <__assert_fail@plt+0xd530>
   1f3c4:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f3c8:	mov	r8, #0
   1f3cc:	cmp	r5, r7
   1f3d0:	bcs	1f3f8 <__assert_fail@plt+0xd530>
   1f3d4:	ldrb	r0, [lr, r5]
   1f3d8:	cmp	r0, #0
   1f3dc:	beq	1f3f8 <__assert_fail@plt+0xd530>
   1f3e0:	ldr	r0, [sp, #68]	; 0x44
   1f3e4:	add	r0, r0, #1
   1f3e8:	add	r5, r0, sl
   1f3ec:	str	r0, [sp, #68]	; 0x44
   1f3f0:	cmp	r5, r7
   1f3f4:	bcc	1f3d4 <__assert_fail@plt+0xd50c>
   1f3f8:	ldr	r5, [sp, #68]	; 0x44
   1f3fc:	b	1f404 <__assert_fail@plt+0xd53c>
   1f400:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f404:	mov	r1, r5
   1f408:	ldr	r5, [sp, #28]
   1f40c:	ldr	r4, [sp, #84]	; 0x54
   1f410:	ldr	r0, [sp, #52]	; 0x34
   1f414:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f418:	cmp	r1, #1
   1f41c:	orr	r2, r8, r0
   1f420:	mov	r0, r1
   1f424:	bhi	1f430 <__assert_fail@plt+0xd568>
   1f428:	tst	r2, #1
   1f42c:	bne	1ec68 <__assert_fail@plt+0xcda0>
   1f430:	add	r0, r0, sl
   1f434:	str	r2, [sp, #84]	; 0x54
   1f438:	str	r0, [fp, #-56]	; 0xffffffc8
   1f43c:	mov	r0, #0
   1f440:	tst	r2, #1
   1f444:	bne	1f524 <__assert_fail@plt+0xd65c>
   1f448:	ldr	r1, [fp, #-76]	; 0xffffffb4
   1f44c:	tst	r1, #1
   1f450:	bne	1f6a4 <__assert_fail@plt+0xd7dc>
   1f454:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1f458:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1f45c:	subs	r2, r1, #2
   1f460:	movwne	r2, #1
   1f464:	orr	r2, r2, r0
   1f468:	tst	r2, #1
   1f46c:	bne	1f4a8 <__assert_fail@plt+0xd5e0>
   1f470:	cmp	r9, r5
   1f474:	add	r2, r9, #1
   1f478:	mov	r0, #1
   1f47c:	movcc	r1, #39	; 0x27
   1f480:	str	r0, [fp, #-52]	; 0xffffffcc
   1f484:	strbcc	r1, [ip, r9]
   1f488:	cmp	r2, r5
   1f48c:	movcc	r1, #36	; 0x24
   1f490:	strbcc	r1, [ip, r2]
   1f494:	add	r2, r9, #2
   1f498:	add	r9, r9, #3
   1f49c:	cmp	r2, r5
   1f4a0:	movcc	r1, #39	; 0x27
   1f4a4:	strbcc	r1, [ip, r2]
   1f4a8:	cmp	r9, r5
   1f4ac:	add	r2, r9, #1
   1f4b0:	movcc	r1, #92	; 0x5c
   1f4b4:	strbcc	r1, [ip, r9]
   1f4b8:	cmp	r2, r5
   1f4bc:	bcs	1f4d0 <__assert_fail@plt+0xd608>
   1f4c0:	uxtb	r3, r6
   1f4c4:	mov	r1, #48	; 0x30
   1f4c8:	orr	r3, r1, r3, lsr #6
   1f4cc:	strb	r3, [ip, r2]
   1f4d0:	add	r2, r9, #2
   1f4d4:	add	r9, r9, #3
   1f4d8:	cmp	r2, r5
   1f4dc:	lsrcc	r3, r6, #3
   1f4e0:	movcc	r1, #6
   1f4e4:	bficc	r3, r1, #3, #29
   1f4e8:	mov	r1, #6
   1f4ec:	bfi	r6, r1, #3, #29
   1f4f0:	strbcc	r3, [ip, r2]
   1f4f4:	mov	r2, #1
   1f4f8:	b	1f558 <__assert_fail@plt+0xd690>
   1f4fc:	ldr	r1, [sp, #80]	; 0x50
   1f500:	cmp	r9, r2
   1f504:	mov	r5, r2
   1f508:	ldr	r2, [sp, #84]	; 0x54
   1f50c:	strbcc	r6, [ip, r9]
   1f510:	add	r9, r9, #1
   1f514:	ldrb	r6, [r1, sl]
   1f518:	mov	sl, r3
   1f51c:	tst	r2, #1
   1f520:	beq	1f448 <__assert_fail@plt+0xd580>
   1f524:	ldr	r1, [fp, #-48]	; 0xffffffd0
   1f528:	tst	r1, #1
   1f52c:	beq	1f54c <__assert_fail@plt+0xd684>
   1f530:	cmp	r9, r5
   1f534:	mov	r2, r0
   1f538:	movcc	r1, #92	; 0x5c
   1f53c:	strbcc	r1, [ip, r9]
   1f540:	add	r9, r9, #1
   1f544:	mov	r1, #0
   1f548:	b	1f554 <__assert_fail@plt+0xd68c>
   1f54c:	mov	r1, #0
   1f550:	mov	r2, r0
   1f554:	str	r1, [fp, #-48]	; 0xffffffd0
   1f558:	mov	r0, r2
   1f55c:	and	r1, r2, #1
   1f560:	ldr	r2, [fp, #-56]	; 0xffffffc8
   1f564:	add	r3, sl, #1
   1f568:	cmp	r2, r3
   1f56c:	bls	1f5cc <__assert_fail@plt+0xd704>
   1f570:	mov	r2, r5
   1f574:	ldr	r5, [fp, #-52]	; 0xffffffcc
   1f578:	cmp	r1, #0
   1f57c:	movwne	r1, #1
   1f580:	mvn	r5, r5
   1f584:	orr	r5, r5, r1
   1f588:	tst	r5, #1
   1f58c:	bne	1f4fc <__assert_fail@plt+0xd634>
   1f590:	cmp	r9, r2
   1f594:	movcc	r5, r4
   1f598:	movcc	r4, #39	; 0x27
   1f59c:	strbcc	r4, [ip, r9]
   1f5a0:	movcc	r4, r5
   1f5a4:	add	r5, r9, #1
   1f5a8:	add	r9, r9, #2
   1f5ac:	cmp	r5, r2
   1f5b0:	movcc	r1, r4
   1f5b4:	movcc	r4, #39	; 0x27
   1f5b8:	strbcc	r4, [ip, r5]
   1f5bc:	movcc	r4, r1
   1f5c0:	mov	r1, #0
   1f5c4:	str	r1, [fp, #-52]	; 0xffffffcc
   1f5c8:	b	1f4fc <__assert_fail@plt+0xd634>
   1f5cc:	cmp	r1, #0
   1f5d0:	movwne	r1, #1
   1f5d4:	str	r1, [fp, #-56]	; 0xffffffc8
   1f5d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   1f5dc:	cmp	r0, #0
   1f5e0:	beq	1f008 <__assert_fail@plt+0xd140>
   1f5e4:	b	1f03c <__assert_fail@plt+0xd174>
   1f5e8:	mov	r8, #0
   1f5ec:	mov	r4, r1
   1f5f0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1f5f4:	tst	r0, #1
   1f5f8:	beq	1ec74 <__assert_fail@plt+0xcdac>
   1f5fc:	b	1ef28 <__assert_fail@plt+0xd060>
   1f600:	mov	r7, sl
   1f604:	b	1f60c <__assert_fail@plt+0xd744>
   1f608:	mvn	r7, #0
   1f60c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1f610:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1f614:	ldr	r2, [sp, #88]	; 0x58
   1f618:	eor	r0, r1, #2
   1f61c:	orr	r0, r0, r9
   1f620:	clz	r0, r0
   1f624:	lsr	r0, r0, #5
   1f628:	tst	r3, r0
   1f62c:	bne	1f6a4 <__assert_fail@plt+0xd7dc>
   1f630:	subs	r0, r1, #2
   1f634:	movwne	r0, #1
   1f638:	orr	r0, r3, r0
   1f63c:	tst	r0, #1
   1f640:	ldreq	r0, [sp, #60]	; 0x3c
   1f644:	eoreq	r0, r0, #1
   1f648:	tsteq	r0, #1
   1f64c:	bne	1f780 <__assert_fail@plt+0xd8b8>
   1f650:	tst	r4, #1
   1f654:	bne	1f744 <__assert_fail@plt+0xd87c>
   1f658:	ldr	r6, [sp, #56]	; 0x38
   1f65c:	mov	r8, #0
   1f660:	cmp	r6, #0
   1f664:	beq	1f77c <__assert_fail@plt+0xd8b4>
   1f668:	mov	r1, #0
   1f66c:	mov	r4, #2
   1f670:	cmp	r5, #0
   1f674:	mov	r0, r2
   1f678:	mov	r3, #0
   1f67c:	str	r1, [sp, #84]	; 0x54
   1f680:	beq	1e4c8 <__assert_fail@plt+0xc600>
   1f684:	b	1f780 <__assert_fail@plt+0xd8b8>
   1f688:	movw	r0, #47613	; 0xb9fd
   1f68c:	movt	r0, #3
   1f690:	str	r0, [sp, #76]	; 0x4c
   1f694:	mov	r9, #0
   1f698:	tst	r8, #1
   1f69c:	beq	1e760 <__assert_fail@plt+0xc898>
   1f6a0:	b	1e8a0 <__assert_fail@plt+0xc9d8>
   1f6a4:	ldr	r1, [sp, #88]	; 0x58
   1f6a8:	mov	r0, #2
   1f6ac:	tst	r1, #1
   1f6b0:	movwne	r0, #4
   1f6b4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f6b8:	ldr	r1, [fp, #12]
   1f6bc:	cmp	r2, #2
   1f6c0:	moveq	r2, r0
   1f6c4:	b	1f6fc <__assert_fail@plt+0xd834>
   1f6c8:	ldr	ip, [fp, #-84]	; 0xffffffac
   1f6cc:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f6d0:	ldr	r1, [fp, #12]
   1f6d4:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1f6d8:	b	1f6fc <__assert_fail@plt+0xd834>
   1f6dc:	ldr	r1, [sp, #88]	; 0x58
   1f6e0:	ldr	lr, [fp, #-80]	; 0xffffffb0
   1f6e4:	ldr	r5, [sp, #28]
   1f6e8:	mov	r0, #2
   1f6ec:	tst	r1, #1
   1f6f0:	ldr	r1, [fp, #12]
   1f6f4:	movwne	r0, #4
   1f6f8:	mov	r2, r0
   1f6fc:	mov	r0, #0
   1f700:	bic	r1, r1, #2
   1f704:	str	r2, [sp]
   1f708:	mov	r2, lr
   1f70c:	str	r0, [sp, #8]
   1f710:	ldr	r0, [sp, #72]	; 0x48
   1f714:	str	r1, [sp, #4]
   1f718:	mov	r1, r5
   1f71c:	str	r0, [sp, #12]
   1f720:	ldr	r0, [sp, #76]	; 0x4c
   1f724:	str	r0, [sp, #16]
   1f728:	mov	r0, ip
   1f72c:	mov	r3, r7
   1f730:	bl	1e43c <__assert_fail@plt+0xc574>
   1f734:	mov	r9, r0
   1f738:	mov	r0, r9
   1f73c:	sub	sp, fp, #28
   1f740:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f744:	mov	r0, #5
   1f748:	ldr	r1, [sp, #56]	; 0x38
   1f74c:	ldr	r2, [fp, #-80]	; 0xffffffb0
   1f750:	str	r0, [sp]
   1f754:	ldr	r0, [fp, #12]
   1f758:	str	r0, [sp, #4]
   1f75c:	ldr	r0, [fp, #16]
   1f760:	str	r0, [sp, #8]
   1f764:	ldr	r0, [sp, #72]	; 0x48
   1f768:	str	r0, [sp, #12]
   1f76c:	ldr	r0, [sp, #76]	; 0x4c
   1f770:	str	r0, [sp, #16]
   1f774:	ldr	r0, [fp, #-84]	; 0xffffffac
   1f778:	b	1f72c <__assert_fail@plt+0xd864>
   1f77c:	mov	r3, #0
   1f780:	ldr	r1, [fp, #-88]	; 0xffffffa8
   1f784:	cmp	r1, #0
   1f788:	beq	1f7c4 <__assert_fail@plt+0xd8fc>
   1f78c:	ldr	r2, [fp, #-84]	; 0xffffffac
   1f790:	tst	r3, #1
   1f794:	bne	1f7c8 <__assert_fail@plt+0xd900>
   1f798:	ldrb	r0, [r1]
   1f79c:	cmp	r0, #0
   1f7a0:	beq	1f7c8 <__assert_fail@plt+0xd900>
   1f7a4:	add	r1, r1, #1
   1f7a8:	cmp	r9, r5
   1f7ac:	strbcc	r0, [r2, r9]
   1f7b0:	add	r9, r9, #1
   1f7b4:	ldrb	r0, [r1], #1
   1f7b8:	cmp	r0, #0
   1f7bc:	bne	1f7a8 <__assert_fail@plt+0xd8e0>
   1f7c0:	b	1f7c8 <__assert_fail@plt+0xd900>
   1f7c4:	ldr	r2, [fp, #-84]	; 0xffffffac
   1f7c8:	cmp	r9, r5
   1f7cc:	movcc	r0, #0
   1f7d0:	strbcc	r0, [r2, r9]
   1f7d4:	mov	r0, r9
   1f7d8:	sub	sp, fp, #28
   1f7dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f7e0:	mov	r0, #4
   1f7e4:	b	1f6b4 <__assert_fail@plt+0xd7ec>
   1f7e8:	bl	11e8c <abort@plt>
   1f7ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7f0:	add	fp, sp, #28
   1f7f4:	sub	sp, sp, #28
   1f7f8:	movw	r5, #53944	; 0xd2b8
   1f7fc:	cmp	r2, #0
   1f800:	mov	r4, r1
   1f804:	mov	r7, r0
   1f808:	str	r0, [sp, #20]
   1f80c:	movt	r5, #4
   1f810:	movne	r5, r2
   1f814:	bl	11cdc <__errno_location@plt>
   1f818:	mov	sl, r0
   1f81c:	ldr	r2, [r5, #40]	; 0x28
   1f820:	ldr	r3, [r5, #44]	; 0x2c
   1f824:	ldm	r5, {r0, r1}
   1f828:	orr	r8, r1, #1
   1f82c:	add	r9, r5, #8
   1f830:	mov	r1, #0
   1f834:	ldr	r6, [sl]
   1f838:	stm	sp, {r0, r8, r9}
   1f83c:	mov	r0, #0
   1f840:	str	r2, [sp, #12]
   1f844:	str	r3, [sp, #16]
   1f848:	mov	r2, r7
   1f84c:	mov	r3, r4
   1f850:	str	r6, [sp, #24]
   1f854:	mov	r6, r4
   1f858:	bl	1e43c <__assert_fail@plt+0xc574>
   1f85c:	add	r7, r0, #1
   1f860:	mov	r0, r7
   1f864:	bl	35758 <__assert_fail@plt+0x23890>
   1f868:	mov	r4, r0
   1f86c:	ldr	r0, [r5]
   1f870:	ldr	r2, [r5, #44]	; 0x2c
   1f874:	ldr	r1, [r5, #40]	; 0x28
   1f878:	mov	r3, r6
   1f87c:	stm	sp, {r0, r8, r9}
   1f880:	str	r2, [sp, #16]
   1f884:	ldr	r2, [sp, #20]
   1f888:	str	r1, [sp, #12]
   1f88c:	mov	r0, r4
   1f890:	mov	r1, r7
   1f894:	bl	1e43c <__assert_fail@plt+0xc574>
   1f898:	ldr	r0, [sp, #24]
   1f89c:	str	r0, [sl]
   1f8a0:	mov	r0, r4
   1f8a4:	sub	sp, fp, #28
   1f8a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f8b0:	add	fp, sp, #28
   1f8b4:	sub	sp, sp, #36	; 0x24
   1f8b8:	movw	r8, #53944	; 0xd2b8
   1f8bc:	cmp	r3, #0
   1f8c0:	mov	r4, r2
   1f8c4:	str	r2, [sp, #24]
   1f8c8:	mov	r5, r1
   1f8cc:	mov	r6, r0
   1f8d0:	str	r0, [sp, #20]
   1f8d4:	movt	r8, #4
   1f8d8:	movne	r8, r3
   1f8dc:	bl	11cdc <__errno_location@plt>
   1f8e0:	str	r0, [sp, #28]
   1f8e4:	ldr	r1, [r8, #40]	; 0x28
   1f8e8:	ldr	r2, [r8, #44]	; 0x2c
   1f8ec:	ldr	r7, [r0]
   1f8f0:	cmp	r4, #0
   1f8f4:	add	sl, r8, #8
   1f8f8:	mov	r0, #0
   1f8fc:	ldm	r8, {r3, r9}
   1f900:	orreq	r9, r9, #1
   1f904:	stm	sp, {r3, r9, sl}
   1f908:	str	r1, [sp, #12]
   1f90c:	str	r2, [sp, #16]
   1f910:	mov	r1, #0
   1f914:	mov	r2, r6
   1f918:	mov	r3, r5
   1f91c:	str	r7, [sp, #32]
   1f920:	mov	r7, r5
   1f924:	bl	1e43c <__assert_fail@plt+0xc574>
   1f928:	add	r4, r0, #1
   1f92c:	mov	r5, r0
   1f930:	mov	r0, r4
   1f934:	bl	35758 <__assert_fail@plt+0x23890>
   1f938:	mov	r6, r0
   1f93c:	ldr	r0, [r8]
   1f940:	ldr	r2, [r8, #44]	; 0x2c
   1f944:	ldr	r1, [r8, #40]	; 0x28
   1f948:	mov	r3, r7
   1f94c:	stm	sp, {r0, r9, sl}
   1f950:	str	r2, [sp, #16]
   1f954:	ldr	r2, [sp, #20]
   1f958:	str	r1, [sp, #12]
   1f95c:	mov	r0, r6
   1f960:	mov	r1, r4
   1f964:	bl	1e43c <__assert_fail@plt+0xc574>
   1f968:	ldr	r0, [sp, #24]
   1f96c:	ldr	r1, [sp, #32]
   1f970:	ldr	r2, [sp, #28]
   1f974:	cmp	r0, #0
   1f978:	str	r1, [r2]
   1f97c:	strne	r5, [r0]
   1f980:	mov	r0, r6
   1f984:	sub	sp, fp, #28
   1f988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f98c:	push	{r4, r5, r6, r7, fp, lr}
   1f990:	add	fp, sp, #16
   1f994:	movw	r4, #53768	; 0xd208
   1f998:	movt	r4, #4
   1f99c:	ldrd	r6, [r4]
   1f9a0:	cmp	r7, #2
   1f9a4:	blt	1f9d0 <__assert_fail@plt+0xdb08>
   1f9a8:	add	r5, r6, #12
   1f9ac:	mov	r7, #0
   1f9b0:	ldr	r0, [r5, r7, lsl #3]
   1f9b4:	bl	17c10 <__assert_fail@plt+0x5d48>
   1f9b8:	ldr	r1, [r4, #4]
   1f9bc:	add	r2, r7, #2
   1f9c0:	add	r0, r7, #1
   1f9c4:	mov	r7, r0
   1f9c8:	cmp	r2, r1
   1f9cc:	blt	1f9b0 <__assert_fail@plt+0xdae8>
   1f9d0:	ldr	r0, [r6, #4]
   1f9d4:	movw	r5, #53992	; 0xd2e8
   1f9d8:	movt	r5, #4
   1f9dc:	cmp	r0, r5
   1f9e0:	beq	1f9f4 <__assert_fail@plt+0xdb2c>
   1f9e4:	bl	17c10 <__assert_fail@plt+0x5d48>
   1f9e8:	mov	r0, #256	; 0x100
   1f9ec:	str	r0, [r4, #8]
   1f9f0:	str	r5, [r4, #12]
   1f9f4:	add	r5, r4, #8
   1f9f8:	cmp	r6, r5
   1f9fc:	beq	1fa0c <__assert_fail@plt+0xdb44>
   1fa00:	mov	r0, r6
   1fa04:	bl	17c10 <__assert_fail@plt+0x5d48>
   1fa08:	str	r5, [r4]
   1fa0c:	mov	r0, #1
   1fa10:	str	r0, [r4, #4]
   1fa14:	pop	{r4, r5, r6, r7, fp, pc}
   1fa18:	movw	r3, #53944	; 0xd2b8
   1fa1c:	mvn	r2, #0
   1fa20:	movt	r3, #4
   1fa24:	b	1fa28 <__assert_fail@plt+0xdb60>
   1fa28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fa2c:	add	fp, sp, #28
   1fa30:	sub	sp, sp, #44	; 0x2c
   1fa34:	mov	r7, r3
   1fa38:	str	r2, [sp, #36]	; 0x24
   1fa3c:	str	r1, [sp, #32]
   1fa40:	mov	r5, r0
   1fa44:	bl	11cdc <__errno_location@plt>
   1fa48:	cmp	r5, #0
   1fa4c:	bmi	1fbb4 <__assert_fail@plt+0xdcec>
   1fa50:	cmn	r5, #-2147483647	; 0x80000001
   1fa54:	beq	1fbb4 <__assert_fail@plt+0xdcec>
   1fa58:	movw	r8, #53768	; 0xd208
   1fa5c:	mov	r4, r0
   1fa60:	ldr	r0, [r0]
   1fa64:	movt	r8, #4
   1fa68:	str	r4, [sp, #28]
   1fa6c:	ldr	r1, [r8, #4]
   1fa70:	ldr	r6, [r8]
   1fa74:	str	r0, [sp, #24]
   1fa78:	cmp	r1, r5
   1fa7c:	ble	1fa88 <__assert_fail@plt+0xdbc0>
   1fa80:	mov	sl, r6
   1fa84:	b	1faf0 <__assert_fail@plt+0xdc28>
   1fa88:	mov	r0, #8
   1fa8c:	add	r9, r8, #8
   1fa90:	str	r1, [fp, #-32]	; 0xffffffe0
   1fa94:	sub	r1, r5, r1
   1fa98:	mvn	r3, #-2147483648	; 0x80000000
   1fa9c:	str	r0, [sp]
   1faa0:	subs	r0, r6, r9
   1faa4:	add	r2, r1, #1
   1faa8:	sub	r1, fp, #32
   1faac:	movne	r0, r6
   1fab0:	bl	35958 <__assert_fail@plt+0x23a90>
   1fab4:	mov	sl, r0
   1fab8:	cmp	r6, r9
   1fabc:	str	r0, [r8]
   1fac0:	bne	1facc <__assert_fail@plt+0xdc04>
   1fac4:	ldrd	r0, [r8, #8]
   1fac8:	stm	sl, {r0, r1}
   1facc:	ldr	r1, [r8, #4]
   1fad0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1fad4:	add	r0, sl, r1, lsl #3
   1fad8:	sub	r1, r2, r1
   1fadc:	lsl	r2, r1, #3
   1fae0:	mov	r1, #0
   1fae4:	bl	11d0c <memset@plt>
   1fae8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1faec:	str	r0, [r8, #4]
   1faf0:	mov	r9, sl
   1faf4:	ldm	r7, {r0, r1}
   1faf8:	orr	r8, r1, #1
   1fafc:	add	r1, r7, #8
   1fb00:	ldr	r2, [r7, #40]	; 0x28
   1fb04:	ldr	r3, [r7, #44]	; 0x2c
   1fb08:	ldr	r6, [r9, r5, lsl #3]!
   1fb0c:	str	r1, [sp, #20]
   1fb10:	ldr	r4, [r9, #4]!
   1fb14:	stm	sp, {r0, r8}
   1fb18:	add	r0, sp, #8
   1fb1c:	stm	r0, {r1, r2, r3}
   1fb20:	ldr	r2, [sp, #32]
   1fb24:	ldr	r3, [sp, #36]	; 0x24
   1fb28:	mov	r1, r6
   1fb2c:	mov	r0, r4
   1fb30:	bl	1e43c <__assert_fail@plt+0xc574>
   1fb34:	cmp	r6, r0
   1fb38:	bhi	1fb9c <__assert_fail@plt+0xdcd4>
   1fb3c:	add	r6, r0, #1
   1fb40:	movw	r0, #53992	; 0xd2e8
   1fb44:	movt	r0, #4
   1fb48:	str	r6, [sl, r5, lsl #3]
   1fb4c:	cmp	r4, r0
   1fb50:	beq	1fb5c <__assert_fail@plt+0xdc94>
   1fb54:	mov	r0, r4
   1fb58:	bl	17c10 <__assert_fail@plt+0x5d48>
   1fb5c:	mov	r0, r6
   1fb60:	bl	35758 <__assert_fail@plt+0x23890>
   1fb64:	str	r0, [r9]
   1fb68:	mov	r4, r0
   1fb6c:	add	r3, sp, #8
   1fb70:	ldr	r0, [r7]
   1fb74:	ldr	r1, [r7, #40]	; 0x28
   1fb78:	ldr	r2, [r7, #44]	; 0x2c
   1fb7c:	stm	sp, {r0, r8}
   1fb80:	ldr	r0, [sp, #20]
   1fb84:	stm	r3, {r0, r1, r2}
   1fb88:	ldr	r2, [sp, #32]
   1fb8c:	ldr	r3, [sp, #36]	; 0x24
   1fb90:	mov	r0, r4
   1fb94:	mov	r1, r6
   1fb98:	bl	1e43c <__assert_fail@plt+0xc574>
   1fb9c:	ldr	r1, [sp, #24]
   1fba0:	ldr	r0, [sp, #28]
   1fba4:	str	r1, [r0]
   1fba8:	mov	r0, r4
   1fbac:	sub	sp, fp, #28
   1fbb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fbb4:	bl	11e8c <abort@plt>
   1fbb8:	movw	r3, #53944	; 0xd2b8
   1fbbc:	movt	r3, #4
   1fbc0:	b	1fa28 <__assert_fail@plt+0xdb60>
   1fbc4:	movw	r3, #53944	; 0xd2b8
   1fbc8:	mov	r1, r0
   1fbcc:	mov	r0, #0
   1fbd0:	mvn	r2, #0
   1fbd4:	movt	r3, #4
   1fbd8:	b	1fa28 <__assert_fail@plt+0xdb60>
   1fbdc:	movw	r3, #53944	; 0xd2b8
   1fbe0:	mov	r2, r1
   1fbe4:	mov	r1, r0
   1fbe8:	mov	r0, #0
   1fbec:	movt	r3, #4
   1fbf0:	b	1fa28 <__assert_fail@plt+0xdb60>
   1fbf4:	push	{fp, lr}
   1fbf8:	mov	fp, sp
   1fbfc:	sub	sp, sp, #48	; 0x30
   1fc00:	vmov.i32	q8, #0	; 0x00000000
   1fc04:	mov	ip, #32
   1fc08:	mov	r3, sp
   1fc0c:	mov	lr, r2
   1fc10:	cmp	r1, #10
   1fc14:	add	r2, r3, #16
   1fc18:	vst1.64	{d16-d17}, [r3], ip
   1fc1c:	vst1.64	{d16-d17}, [r2]
   1fc20:	vst1.64	{d16-d17}, [r3]
   1fc24:	beq	1fc44 <__assert_fail@plt+0xdd7c>
   1fc28:	str	r1, [sp]
   1fc2c:	mov	r3, sp
   1fc30:	mov	r1, lr
   1fc34:	mvn	r2, #0
   1fc38:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fc3c:	mov	sp, fp
   1fc40:	pop	{fp, pc}
   1fc44:	bl	11e8c <abort@plt>
   1fc48:	push	{r4, sl, fp, lr}
   1fc4c:	add	fp, sp, #8
   1fc50:	sub	sp, sp, #48	; 0x30
   1fc54:	vmov.i32	q8, #0	; 0x00000000
   1fc58:	mov	ip, r3
   1fc5c:	mov	r3, sp
   1fc60:	mov	lr, #32
   1fc64:	cmp	r1, #10
   1fc68:	add	r4, r3, #16
   1fc6c:	vst1.64	{d16-d17}, [r3], lr
   1fc70:	vst1.64	{d16-d17}, [r4]
   1fc74:	vst1.64	{d16-d17}, [r3]
   1fc78:	beq	1fc98 <__assert_fail@plt+0xddd0>
   1fc7c:	str	r1, [sp]
   1fc80:	mov	r1, r2
   1fc84:	mov	r3, sp
   1fc88:	mov	r2, ip
   1fc8c:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fc90:	sub	sp, fp, #8
   1fc94:	pop	{r4, sl, fp, pc}
   1fc98:	bl	11e8c <abort@plt>
   1fc9c:	push	{fp, lr}
   1fca0:	mov	fp, sp
   1fca4:	sub	sp, sp, #48	; 0x30
   1fca8:	vmov.i32	q8, #0	; 0x00000000
   1fcac:	mov	r3, sp
   1fcb0:	mov	ip, #32
   1fcb4:	cmp	r0, #10
   1fcb8:	add	r2, r3, #16
   1fcbc:	vst1.64	{d16-d17}, [r3], ip
   1fcc0:	vst1.64	{d16-d17}, [r2]
   1fcc4:	vst1.64	{d16-d17}, [r3]
   1fcc8:	beq	1fce8 <__assert_fail@plt+0xde20>
   1fccc:	str	r0, [sp]
   1fcd0:	mov	r3, sp
   1fcd4:	mov	r0, #0
   1fcd8:	mvn	r2, #0
   1fcdc:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fce0:	mov	sp, fp
   1fce4:	pop	{fp, pc}
   1fce8:	bl	11e8c <abort@plt>
   1fcec:	push	{fp, lr}
   1fcf0:	mov	fp, sp
   1fcf4:	sub	sp, sp, #48	; 0x30
   1fcf8:	vmov.i32	q8, #0	; 0x00000000
   1fcfc:	mov	r3, sp
   1fd00:	mov	ip, #32
   1fd04:	cmp	r0, #10
   1fd08:	add	lr, r3, #16
   1fd0c:	vst1.64	{d16-d17}, [r3], ip
   1fd10:	vst1.64	{d16-d17}, [lr]
   1fd14:	vst1.64	{d16-d17}, [r3]
   1fd18:	beq	1fd34 <__assert_fail@plt+0xde6c>
   1fd1c:	str	r0, [sp]
   1fd20:	mov	r3, sp
   1fd24:	mov	r0, #0
   1fd28:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fd2c:	mov	sp, fp
   1fd30:	pop	{fp, pc}
   1fd34:	bl	11e8c <abort@plt>
   1fd38:	push	{r4, sl, fp, lr}
   1fd3c:	add	fp, sp, #8
   1fd40:	sub	sp, sp, #48	; 0x30
   1fd44:	mov	lr, r0
   1fd48:	movw	r0, #53944	; 0xd2b8
   1fd4c:	mov	ip, r1
   1fd50:	mov	r1, #32
   1fd54:	mov	r4, #1
   1fd58:	movt	r0, #4
   1fd5c:	add	r3, r0, #16
   1fd60:	vld1.64	{d16-d17}, [r0], r1
   1fd64:	vld1.64	{d20-d21}, [r0]
   1fd68:	vld1.64	{d18-d19}, [r3]
   1fd6c:	mov	r3, sp
   1fd70:	add	r0, r3, #32
   1fd74:	add	r1, r3, #16
   1fd78:	vst1.64	{d20-d21}, [r0]
   1fd7c:	mov	r0, #28
   1fd80:	vst1.64	{d18-d19}, [r1]
   1fd84:	mov	r1, r3
   1fd88:	and	r0, r0, r2, lsr #3
   1fd8c:	and	r2, r2, #31
   1fd90:	vst1.64	{d16-d17}, [r1], r0
   1fd94:	ldr	r0, [r1, #8]
   1fd98:	bic	r4, r4, r0, lsr r2
   1fd9c:	eor	r0, r0, r4, lsl r2
   1fda0:	mov	r2, ip
   1fda4:	str	r0, [r1, #8]
   1fda8:	mov	r0, #0
   1fdac:	mov	r1, lr
   1fdb0:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fdb4:	sub	sp, fp, #8
   1fdb8:	pop	{r4, sl, fp, pc}
   1fdbc:	push	{fp, lr}
   1fdc0:	mov	fp, sp
   1fdc4:	sub	sp, sp, #48	; 0x30
   1fdc8:	mov	ip, r0
   1fdcc:	movw	r0, #53944	; 0xd2b8
   1fdd0:	mov	r2, #32
   1fdd4:	movt	r0, #4
   1fdd8:	add	r3, r0, #16
   1fddc:	vld1.64	{d16-d17}, [r0], r2
   1fde0:	vld1.64	{d20-d21}, [r0]
   1fde4:	vld1.64	{d18-d19}, [r3]
   1fde8:	mov	r3, sp
   1fdec:	add	r0, r3, #32
   1fdf0:	add	r2, r3, #16
   1fdf4:	vst1.64	{d20-d21}, [r0]
   1fdf8:	mov	r0, #28
   1fdfc:	vst1.64	{d18-d19}, [r2]
   1fe00:	mov	r2, r3
   1fe04:	and	r0, r0, r1, lsr #3
   1fe08:	and	r1, r1, #31
   1fe0c:	vst1.64	{d16-d17}, [r2], r0
   1fe10:	mov	r0, #1
   1fe14:	ldr	lr, [r2, #8]
   1fe18:	bic	r0, r0, lr, lsr r1
   1fe1c:	eor	r0, lr, r0, lsl r1
   1fe20:	mov	r1, ip
   1fe24:	str	r0, [r2, #8]
   1fe28:	mov	r0, #0
   1fe2c:	mvn	r2, #0
   1fe30:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fe34:	mov	sp, fp
   1fe38:	pop	{fp, pc}
   1fe3c:	push	{fp, lr}
   1fe40:	mov	fp, sp
   1fe44:	sub	sp, sp, #48	; 0x30
   1fe48:	mov	r1, r0
   1fe4c:	movw	r0, #53944	; 0xd2b8
   1fe50:	mov	r3, #32
   1fe54:	movt	r0, #4
   1fe58:	add	r2, r0, #16
   1fe5c:	vld1.64	{d16-d17}, [r0], r3
   1fe60:	mov	r3, sp
   1fe64:	vld1.64	{d18-d19}, [r2]
   1fe68:	vld1.64	{d20-d21}, [r0]
   1fe6c:	add	r2, r3, #16
   1fe70:	add	r0, r3, #32
   1fe74:	vst1.64	{d18-d19}, [r2]
   1fe78:	vst1.64	{d20-d21}, [r0]
   1fe7c:	mov	r0, #12
   1fe80:	mov	r2, r3
   1fe84:	vst1.64	{d16-d17}, [r2], r0
   1fe88:	ldr	r0, [r2]
   1fe8c:	orr	r0, r0, #67108864	; 0x4000000
   1fe90:	str	r0, [r2]
   1fe94:	mov	r0, #0
   1fe98:	mvn	r2, #0
   1fe9c:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1fea0:	mov	sp, fp
   1fea4:	pop	{fp, pc}
   1fea8:	push	{fp, lr}
   1feac:	mov	fp, sp
   1feb0:	sub	sp, sp, #48	; 0x30
   1feb4:	mov	ip, r1
   1feb8:	mov	r1, r0
   1febc:	movw	r0, #53944	; 0xd2b8
   1fec0:	mov	r2, #32
   1fec4:	movt	r0, #4
   1fec8:	add	r3, r0, #16
   1fecc:	vld1.64	{d16-d17}, [r0], r2
   1fed0:	vld1.64	{d18-d19}, [r3]
   1fed4:	vld1.64	{d20-d21}, [r0]
   1fed8:	mov	r3, sp
   1fedc:	add	r2, r3, #16
   1fee0:	add	r0, r3, #32
   1fee4:	vst1.64	{d18-d19}, [r2]
   1fee8:	vst1.64	{d20-d21}, [r0]
   1feec:	mov	r0, #12
   1fef0:	mov	r2, r3
   1fef4:	vst1.64	{d16-d17}, [r2], r0
   1fef8:	ldr	r0, [r2]
   1fefc:	orr	r0, r0, #67108864	; 0x4000000
   1ff00:	str	r0, [r2]
   1ff04:	mov	r0, #0
   1ff08:	mov	r2, ip
   1ff0c:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1ff10:	mov	sp, fp
   1ff14:	pop	{fp, pc}
   1ff18:	push	{r4, sl, fp, lr}
   1ff1c:	add	fp, sp, #8
   1ff20:	sub	sp, sp, #96	; 0x60
   1ff24:	vmov.i32	q8, #0	; 0x00000000
   1ff28:	mov	ip, r2
   1ff2c:	mov	r2, sp
   1ff30:	mov	r4, #28
   1ff34:	cmp	r1, #10
   1ff38:	mov	r3, r2
   1ff3c:	add	lr, r2, #16
   1ff40:	vst1.64	{d16-d17}, [r3], r4
   1ff44:	vst1.64	{d16-d17}, [lr]
   1ff48:	vst1.32	{d16-d17}, [r3]
   1ff4c:	beq	1ff9c <__assert_fail@plt+0xe0d4>
   1ff50:	vld1.64	{d16-d17}, [r2], r4
   1ff54:	vld1.64	{d18-d19}, [lr]
   1ff58:	add	r3, sp, #48	; 0x30
   1ff5c:	vld1.32	{d20-d21}, [r2]
   1ff60:	add	r2, r3, #20
   1ff64:	add	r4, r3, #4
   1ff68:	vst1.32	{d18-d19}, [r2]
   1ff6c:	add	r2, r3, #32
   1ff70:	vst1.32	{d16-d17}, [r4]
   1ff74:	vst1.32	{d20-d21}, [r2]
   1ff78:	str	r1, [sp, #48]	; 0x30
   1ff7c:	mvn	r2, #0
   1ff80:	ldr	r1, [sp, #60]	; 0x3c
   1ff84:	orr	r1, r1, #67108864	; 0x4000000
   1ff88:	str	r1, [sp, #60]	; 0x3c
   1ff8c:	mov	r1, ip
   1ff90:	bl	1fa28 <__assert_fail@plt+0xdb60>
   1ff94:	sub	sp, fp, #8
   1ff98:	pop	{r4, sl, fp, pc}
   1ff9c:	bl	11e8c <abort@plt>
   1ffa0:	push	{r4, r5, r6, sl, fp, lr}
   1ffa4:	add	fp, sp, #16
   1ffa8:	sub	sp, sp, #48	; 0x30
   1ffac:	mov	ip, r3
   1ffb0:	movw	r3, #53944	; 0xd2b8
   1ffb4:	mov	r6, #32
   1ffb8:	cmp	r1, #0
   1ffbc:	mov	r4, sp
   1ffc0:	movt	r3, #4
   1ffc4:	cmpne	r2, #0
   1ffc8:	add	r5, r4, #16
   1ffcc:	add	lr, r3, #16
   1ffd0:	vld1.64	{d16-d17}, [r3], r6
   1ffd4:	vld1.64	{d18-d19}, [lr]
   1ffd8:	vld1.64	{d20-d21}, [r3]
   1ffdc:	mov	r3, #10
   1ffe0:	vst1.64	{d16-d17}, [r4], r6
   1ffe4:	vst1.64	{d18-d19}, [r5]
   1ffe8:	vst1.64	{d20-d21}, [r4]
   1ffec:	str	r3, [sp]
   1fff0:	bne	1fff8 <__assert_fail@plt+0xe130>
   1fff4:	bl	11e8c <abort@plt>
   1fff8:	str	r2, [sp, #44]	; 0x2c
   1fffc:	str	r1, [sp, #40]	; 0x28
   20000:	mov	r3, sp
   20004:	mov	r1, ip
   20008:	mvn	r2, #0
   2000c:	bl	1fa28 <__assert_fail@plt+0xdb60>
   20010:	sub	sp, fp, #16
   20014:	pop	{r4, r5, r6, sl, fp, pc}
   20018:	push	{r4, r5, r6, sl, fp, lr}
   2001c:	add	fp, sp, #16
   20020:	sub	sp, sp, #48	; 0x30
   20024:	mov	lr, r3
   20028:	movw	r3, #53944	; 0xd2b8
   2002c:	mov	r6, #32
   20030:	cmp	r1, #0
   20034:	mov	r4, sp
   20038:	movt	r3, #4
   2003c:	cmpne	r2, #0
   20040:	add	r5, r4, #16
   20044:	add	ip, r3, #16
   20048:	vld1.64	{d16-d17}, [r3], r6
   2004c:	vld1.64	{d18-d19}, [ip]
   20050:	vld1.64	{d20-d21}, [r3]
   20054:	mov	r3, #10
   20058:	vst1.64	{d16-d17}, [r4], r6
   2005c:	vst1.64	{d18-d19}, [r5]
   20060:	vst1.64	{d20-d21}, [r4]
   20064:	str	r3, [sp]
   20068:	bne	20070 <__assert_fail@plt+0xe1a8>
   2006c:	bl	11e8c <abort@plt>
   20070:	ldr	ip, [fp, #8]
   20074:	str	r2, [sp, #44]	; 0x2c
   20078:	str	r1, [sp, #40]	; 0x28
   2007c:	mov	r3, sp
   20080:	mov	r1, lr
   20084:	mov	r2, ip
   20088:	bl	1fa28 <__assert_fail@plt+0xdb60>
   2008c:	sub	sp, fp, #16
   20090:	pop	{r4, r5, r6, sl, fp, pc}
   20094:	push	{r4, sl, fp, lr}
   20098:	add	fp, sp, #8
   2009c:	sub	sp, sp, #48	; 0x30
   200a0:	movw	r3, #53944	; 0xd2b8
   200a4:	mov	lr, #32
   200a8:	mov	ip, r2
   200ac:	cmp	r0, #0
   200b0:	movt	r3, #4
   200b4:	cmpne	r1, #0
   200b8:	add	r2, r3, #16
   200bc:	vld1.64	{d16-d17}, [r3], lr
   200c0:	vld1.64	{d20-d21}, [r3]
   200c4:	vld1.64	{d18-d19}, [r2]
   200c8:	mov	r2, sp
   200cc:	add	r4, r2, #16
   200d0:	vst1.64	{d16-d17}, [r2], lr
   200d4:	vst1.64	{d20-d21}, [r2]
   200d8:	mov	r2, #10
   200dc:	vst1.64	{d18-d19}, [r4]
   200e0:	str	r2, [sp]
   200e4:	bne	200ec <__assert_fail@plt+0xe224>
   200e8:	bl	11e8c <abort@plt>
   200ec:	str	r1, [sp, #44]	; 0x2c
   200f0:	str	r0, [sp, #40]	; 0x28
   200f4:	mov	r3, sp
   200f8:	mov	r0, #0
   200fc:	mov	r1, ip
   20100:	mvn	r2, #0
   20104:	bl	1fa28 <__assert_fail@plt+0xdb60>
   20108:	sub	sp, fp, #8
   2010c:	pop	{r4, sl, fp, pc}
   20110:	push	{r4, r5, fp, lr}
   20114:	add	fp, sp, #8
   20118:	sub	sp, sp, #48	; 0x30
   2011c:	mov	ip, r3
   20120:	movw	r3, #53944	; 0xd2b8
   20124:	mov	r4, #32
   20128:	mov	lr, r2
   2012c:	cmp	r0, #0
   20130:	movt	r3, #4
   20134:	cmpne	r1, #0
   20138:	add	r2, r3, #16
   2013c:	vld1.64	{d16-d17}, [r3], r4
   20140:	vld1.64	{d20-d21}, [r3]
   20144:	vld1.64	{d18-d19}, [r2]
   20148:	mov	r2, sp
   2014c:	add	r5, r2, #16
   20150:	vst1.64	{d16-d17}, [r2], r4
   20154:	vst1.64	{d20-d21}, [r2]
   20158:	mov	r2, #10
   2015c:	vst1.64	{d18-d19}, [r5]
   20160:	str	r2, [sp]
   20164:	bne	2016c <__assert_fail@plt+0xe2a4>
   20168:	bl	11e8c <abort@plt>
   2016c:	str	r1, [sp, #44]	; 0x2c
   20170:	str	r0, [sp, #40]	; 0x28
   20174:	mov	r3, sp
   20178:	mov	r0, #0
   2017c:	mov	r1, lr
   20180:	mov	r2, ip
   20184:	bl	1fa28 <__assert_fail@plt+0xdb60>
   20188:	sub	sp, fp, #8
   2018c:	pop	{r4, r5, fp, pc}
   20190:	movw	r3, #53720	; 0xd1d8
   20194:	movt	r3, #4
   20198:	b	1fa28 <__assert_fail@plt+0xdb60>
   2019c:	movw	r3, #53720	; 0xd1d8
   201a0:	mov	r2, r1
   201a4:	mov	r1, r0
   201a8:	mov	r0, #0
   201ac:	movt	r3, #4
   201b0:	b	1fa28 <__assert_fail@plt+0xdb60>
   201b4:	movw	r3, #53720	; 0xd1d8
   201b8:	mvn	r2, #0
   201bc:	movt	r3, #4
   201c0:	b	1fa28 <__assert_fail@plt+0xdb60>
   201c4:	movw	r3, #53720	; 0xd1d8
   201c8:	mov	r1, r0
   201cc:	mov	r0, #0
   201d0:	mvn	r2, #0
   201d4:	movt	r3, #4
   201d8:	b	1fa28 <__assert_fail@plt+0xdb60>
   201dc:	andeq	r0, r0, r0
   201e0:	push	{fp, lr}
   201e4:	mov	fp, sp
   201e8:	mov	lr, r0
   201ec:	movw	r0, #54252	; 0xd3ec
   201f0:	mov	ip, r1
   201f4:	ldrb	r1, [r2, #28]
   201f8:	movt	r0, #4
   201fc:	ldr	r3, [r0]
   20200:	mov	r0, #16
   20204:	and	r1, r1, #111	; 0x6f
   20208:	and	r0, r0, r3, lsr #21
   2020c:	orr	r0, r1, r0
   20210:	mov	r1, lr
   20214:	orr	r0, r0, #128	; 0x80
   20218:	strb	r0, [r2, #28]
   2021c:	mov	r0, r2
   20220:	mov	r2, ip
   20224:	bl	20260 <__assert_fail@plt+0xe398>
   20228:	cmp	r0, #0
   2022c:	beq	20258 <__assert_fail@plt+0xe390>
   20230:	movw	r1, #48088	; 0xbbd8
   20234:	mov	r2, #5
   20238:	movt	r1, #3
   2023c:	ldr	r0, [r1, r0, lsl #2]
   20240:	movw	r1, #47704	; 0xba58
   20244:	movt	r1, #3
   20248:	add	r1, r1, r0
   2024c:	mov	r0, #0
   20250:	pop	{fp, lr}
   20254:	b	11afc <dcgettext@plt>
   20258:	mov	r0, #0
   2025c:	pop	{fp, pc}
   20260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20264:	add	fp, sp, #28
   20268:	sub	sp, sp, #140	; 0x8c
   2026c:	mov	sl, r0
   20270:	mov	r0, #0
   20274:	mov	r9, r3
   20278:	mov	r7, r2
   2027c:	str	r1, [sp, #28]
   20280:	str	r0, [fp, #-52]	; 0xffffffcc
   20284:	str	r0, [sl, #24]
   20288:	str	r0, [sl, #8]
   2028c:	str	r3, [sl, #12]
   20290:	ldrb	r0, [sl, #28]
   20294:	and	r0, r0, #144	; 0x90
   20298:	strb	r0, [sl, #28]
   2029c:	ldr	r0, [sl, #4]
   202a0:	ldr	r5, [sl]
   202a4:	cmp	r0, #159	; 0x9f
   202a8:	bls	20dc4 <__assert_fail@plt+0xeefc>
   202ac:	mov	r0, #160	; 0xa0
   202b0:	mov	r1, #0
   202b4:	mov	r2, #160	; 0xa0
   202b8:	str	r0, [sl, #8]
   202bc:	mov	r0, r5
   202c0:	bl	11d0c <memset@plt>
   202c4:	mov	r0, #31
   202c8:	str	r0, [r5, #64]	; 0x40
   202cc:	movw	r0, #43689	; 0xaaa9
   202d0:	movt	r0, #2730	; 0xaaa
   202d4:	cmp	r7, r0
   202d8:	bhi	206d8 <__assert_fail@plt+0xe810>
   202dc:	add	r8, r7, #1
   202e0:	lsl	r0, r8, #3
   202e4:	str	r8, [r5, #4]
   202e8:	bl	38450 <__assert_fail@plt+0x26588>
   202ec:	str	r0, [r5]
   202f0:	mov	r0, #1
   202f4:	mov	r6, r0
   202f8:	lsl	r0, r0, #1
   202fc:	cmp	r6, r7
   20300:	bls	202f4 <__assert_fail@plt+0xe42c>
   20304:	mov	r0, #12
   20308:	mov	r1, r6
   2030c:	bl	383fc <__assert_fail@plt+0x26534>
   20310:	sub	r1, r6, #1
   20314:	str	r1, [r5, #68]	; 0x44
   20318:	str	r0, [r5, #32]
   2031c:	bl	11b98 <__ctype_get_mb_cur_max@plt>
   20320:	str	r0, [r5, #92]	; 0x5c
   20324:	mov	r0, #14
   20328:	bl	11da8 <nl_langinfo@plt>
   2032c:	ldrb	r1, [r0]
   20330:	orr	r1, r1, #32
   20334:	cmp	r1, #117	; 0x75
   20338:	bne	20388 <__assert_fail@plt+0xe4c0>
   2033c:	ldrb	r1, [r0, #1]
   20340:	orr	r1, r1, #32
   20344:	cmp	r1, #116	; 0x74
   20348:	bne	20388 <__assert_fail@plt+0xe4c0>
   2034c:	ldrb	r1, [r0, #2]
   20350:	orr	r1, r1, #32
   20354:	cmp	r1, #102	; 0x66
   20358:	bne	20388 <__assert_fail@plt+0xe4c0>
   2035c:	ldrb	r1, [r0, #3]!
   20360:	cmp	r1, #45	; 0x2d
   20364:	movw	r1, #48204	; 0xbc4c
   20368:	movt	r1, #3
   2036c:	addeq	r0, r0, #1
   20370:	bl	11a3c <strcmp@plt>
   20374:	cmp	r0, #0
   20378:	bne	20388 <__assert_fail@plt+0xe4c0>
   2037c:	ldrb	r0, [r5, #88]	; 0x58
   20380:	orr	r0, r0, #4
   20384:	strb	r0, [r5, #88]	; 0x58
   20388:	ldrb	r0, [r5, #88]	; 0x58
   2038c:	and	r1, r0, #247	; 0xf7
   20390:	strb	r1, [r5, #88]	; 0x58
   20394:	ldr	r1, [r5, #92]	; 0x5c
   20398:	cmp	r1, #2
   2039c:	blt	206c4 <__assert_fail@plt+0xe7fc>
   203a0:	tst	r0, #4
   203a4:	bne	20420 <__assert_fail@plt+0xe558>
   203a8:	mov	r0, #32
   203ac:	mov	r1, #1
   203b0:	mov	r4, #1
   203b4:	bl	383fc <__assert_fail@plt+0x26534>
   203b8:	cmp	r0, #0
   203bc:	str	r0, [r5, #60]	; 0x3c
   203c0:	beq	206d8 <__assert_fail@plt+0xe810>
   203c4:	mov	r6, #0
   203c8:	mov	r0, r6
   203cc:	bl	11d18 <btowc@plt>
   203d0:	cmn	r0, #1
   203d4:	bne	203f8 <__assert_fail@plt+0xe530>
   203d8:	b	20408 <__assert_fail@plt+0xe540>
   203dc:	add	r6, r6, #1
   203e0:	cmp	r6, #32
   203e4:	beq	20430 <__assert_fail@plt+0xe568>
   203e8:	mov	r0, r6
   203ec:	bl	11d18 <btowc@plt>
   203f0:	cmn	r0, #1
   203f4:	beq	20408 <__assert_fail@plt+0xe540>
   203f8:	ldr	r1, [r5, #60]	; 0x3c
   203fc:	ldr	r2, [r1]
   20400:	orr	r2, r2, r4, lsl r6
   20404:	str	r2, [r1]
   20408:	cmp	r6, r0
   2040c:	beq	203dc <__assert_fail@plt+0xe514>
   20410:	ldrb	r0, [r5, #88]	; 0x58
   20414:	orr	r0, r0, #8
   20418:	strb	r0, [r5, #88]	; 0x58
   2041c:	b	203dc <__assert_fail@plt+0xe514>
   20420:	movw	r0, #48156	; 0xbc1c
   20424:	movt	r0, #3
   20428:	str	r0, [r5, #60]	; 0x3c
   2042c:	b	206c4 <__assert_fail@plt+0xe7fc>
   20430:	mov	r6, #32
   20434:	mov	r4, #1
   20438:	mov	r0, r6
   2043c:	bl	11d18 <btowc@plt>
   20440:	cmn	r0, #1
   20444:	bne	20470 <__assert_fail@plt+0xe5a8>
   20448:	b	20484 <__assert_fail@plt+0xe5bc>
   2044c:	sub	r1, r6, #31
   20450:	add	r0, r6, #1
   20454:	cmp	r1, #32
   20458:	mov	r6, r0
   2045c:	beq	2049c <__assert_fail@plt+0xe5d4>
   20460:	mov	r0, r6
   20464:	bl	11d18 <btowc@plt>
   20468:	cmn	r0, #1
   2046c:	beq	20484 <__assert_fail@plt+0xe5bc>
   20470:	ldr	r2, [r5, #60]	; 0x3c
   20474:	sub	r1, r6, #32
   20478:	ldr	r3, [r2, #4]
   2047c:	orr	r1, r3, r4, lsl r1
   20480:	str	r1, [r2, #4]
   20484:	cmp	r0, r6
   20488:	beq	2044c <__assert_fail@plt+0xe584>
   2048c:	ldrb	r0, [r5, #88]	; 0x58
   20490:	orr	r0, r0, #8
   20494:	strb	r0, [r5, #88]	; 0x58
   20498:	b	2044c <__assert_fail@plt+0xe584>
   2049c:	mov	r6, #64	; 0x40
   204a0:	mov	r4, #1
   204a4:	mov	r0, r6
   204a8:	bl	11d18 <btowc@plt>
   204ac:	cmn	r0, #1
   204b0:	bne	204dc <__assert_fail@plt+0xe614>
   204b4:	b	204f0 <__assert_fail@plt+0xe628>
   204b8:	sub	r1, r6, #63	; 0x3f
   204bc:	add	r0, r6, #1
   204c0:	cmp	r1, #32
   204c4:	mov	r6, r0
   204c8:	beq	20508 <__assert_fail@plt+0xe640>
   204cc:	mov	r0, r6
   204d0:	bl	11d18 <btowc@plt>
   204d4:	cmn	r0, #1
   204d8:	beq	204f0 <__assert_fail@plt+0xe628>
   204dc:	ldr	r2, [r5, #60]	; 0x3c
   204e0:	sub	r1, r6, #64	; 0x40
   204e4:	ldr	r3, [r2, #8]
   204e8:	orr	r1, r3, r4, lsl r1
   204ec:	str	r1, [r2, #8]
   204f0:	cmp	r0, r6
   204f4:	beq	204b8 <__assert_fail@plt+0xe5f0>
   204f8:	ldrb	r0, [r5, #88]	; 0x58
   204fc:	orr	r0, r0, #8
   20500:	strb	r0, [r5, #88]	; 0x58
   20504:	b	204b8 <__assert_fail@plt+0xe5f0>
   20508:	mov	r6, #96	; 0x60
   2050c:	mov	r4, #1
   20510:	mov	r0, r6
   20514:	bl	11d18 <btowc@plt>
   20518:	cmn	r0, #1
   2051c:	bne	20548 <__assert_fail@plt+0xe680>
   20520:	b	2055c <__assert_fail@plt+0xe694>
   20524:	sub	r1, r6, #95	; 0x5f
   20528:	add	r0, r6, #1
   2052c:	cmp	r1, #32
   20530:	mov	r6, r0
   20534:	beq	20574 <__assert_fail@plt+0xe6ac>
   20538:	mov	r0, r6
   2053c:	bl	11d18 <btowc@plt>
   20540:	cmn	r0, #1
   20544:	beq	2055c <__assert_fail@plt+0xe694>
   20548:	ldr	r2, [r5, #60]	; 0x3c
   2054c:	sub	r1, r6, #96	; 0x60
   20550:	ldr	r3, [r2, #12]
   20554:	orr	r1, r3, r4, lsl r1
   20558:	str	r1, [r2, #12]
   2055c:	cmp	r0, r6
   20560:	beq	20524 <__assert_fail@plt+0xe65c>
   20564:	ldrb	r0, [r5, #88]	; 0x58
   20568:	orr	r0, r0, #8
   2056c:	strb	r0, [r5, #88]	; 0x58
   20570:	b	20524 <__assert_fail@plt+0xe65c>
   20574:	mov	r6, #128	; 0x80
   20578:	mov	r4, #1
   2057c:	mov	r0, r6
   20580:	bl	11d18 <btowc@plt>
   20584:	cmn	r0, #1
   20588:	bne	205b0 <__assert_fail@plt+0xe6e8>
   2058c:	sub	r1, r6, #127	; 0x7f
   20590:	add	r0, r6, #1
   20594:	cmp	r1, #32
   20598:	mov	r6, r0
   2059c:	beq	205c8 <__assert_fail@plt+0xe700>
   205a0:	mov	r0, r6
   205a4:	bl	11d18 <btowc@plt>
   205a8:	cmn	r0, #1
   205ac:	beq	2058c <__assert_fail@plt+0xe6c4>
   205b0:	ldr	r1, [r5, #60]	; 0x3c
   205b4:	sub	r0, r6, #128	; 0x80
   205b8:	ldr	r2, [r1, #16]
   205bc:	orr	r0, r2, r4, lsl r0
   205c0:	str	r0, [r1, #16]
   205c4:	b	2058c <__assert_fail@plt+0xe6c4>
   205c8:	mov	r6, #160	; 0xa0
   205cc:	mov	r4, #1
   205d0:	mov	r0, r6
   205d4:	bl	11d18 <btowc@plt>
   205d8:	cmn	r0, #1
   205dc:	bne	20604 <__assert_fail@plt+0xe73c>
   205e0:	sub	r1, r6, #159	; 0x9f
   205e4:	add	r0, r6, #1
   205e8:	cmp	r1, #32
   205ec:	mov	r6, r0
   205f0:	beq	2061c <__assert_fail@plt+0xe754>
   205f4:	mov	r0, r6
   205f8:	bl	11d18 <btowc@plt>
   205fc:	cmn	r0, #1
   20600:	beq	205e0 <__assert_fail@plt+0xe718>
   20604:	ldr	r1, [r5, #60]	; 0x3c
   20608:	sub	r0, r6, #160	; 0xa0
   2060c:	ldr	r2, [r1, #20]
   20610:	orr	r0, r2, r4, lsl r0
   20614:	str	r0, [r1, #20]
   20618:	b	205e0 <__assert_fail@plt+0xe718>
   2061c:	mov	r6, #192	; 0xc0
   20620:	mov	r4, #1
   20624:	mov	r0, r6
   20628:	bl	11d18 <btowc@plt>
   2062c:	cmn	r0, #1
   20630:	bne	20658 <__assert_fail@plt+0xe790>
   20634:	sub	r1, r6, #191	; 0xbf
   20638:	add	r0, r6, #1
   2063c:	cmp	r1, #32
   20640:	mov	r6, r0
   20644:	beq	20670 <__assert_fail@plt+0xe7a8>
   20648:	mov	r0, r6
   2064c:	bl	11d18 <btowc@plt>
   20650:	cmn	r0, #1
   20654:	beq	20634 <__assert_fail@plt+0xe76c>
   20658:	ldr	r1, [r5, #60]	; 0x3c
   2065c:	sub	r0, r6, #192	; 0xc0
   20660:	ldr	r2, [r1, #24]
   20664:	orr	r0, r2, r4, lsl r0
   20668:	str	r0, [r1, #24]
   2066c:	b	20634 <__assert_fail@plt+0xe76c>
   20670:	mov	r6, #224	; 0xe0
   20674:	mov	r4, #1
   20678:	mov	r0, r6
   2067c:	bl	11d18 <btowc@plt>
   20680:	cmn	r0, #1
   20684:	bne	206ac <__assert_fail@plt+0xe7e4>
   20688:	sub	r1, r6, #223	; 0xdf
   2068c:	add	r0, r6, #1
   20690:	cmp	r1, #32
   20694:	mov	r6, r0
   20698:	beq	206c4 <__assert_fail@plt+0xe7fc>
   2069c:	mov	r0, r6
   206a0:	bl	11d18 <btowc@plt>
   206a4:	cmn	r0, #1
   206a8:	beq	20688 <__assert_fail@plt+0xe7c0>
   206ac:	ldr	r1, [r5, #60]	; 0x3c
   206b0:	sub	r0, r6, #224	; 0xe0
   206b4:	ldr	r2, [r1, #28]
   206b8:	orr	r0, r2, r4, lsl r0
   206bc:	str	r0, [r1, #28]
   206c0:	b	20688 <__assert_fail@plt+0xe7c0>
   206c4:	ldr	r0, [r5]
   206c8:	cmp	r0, #0
   206cc:	ldrne	r0, [r5, #32]
   206d0:	cmpne	r0, #0
   206d4:	bne	20700 <__assert_fail@plt+0xe838>
   206d8:	mov	r4, #12
   206dc:	mov	r0, r5
   206e0:	str	r4, [fp, #-52]	; 0xffffffcc
   206e4:	bl	22894 <__assert_fail@plt+0x109cc>
   206e8:	mov	r0, #0
   206ec:	str	r0, [sl]
   206f0:	str	r0, [sl, #4]
   206f4:	mov	r0, r4
   206f8:	sub	sp, fp, #28
   206fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20700:	movw	r0, #0
   20704:	movw	r1, #0
   20708:	mov	r6, #0
   2070c:	movt	r0, #0
   20710:	movt	r1, #0
   20714:	str	r6, [fp, #-52]	; 0xffffffcc
   20718:	orrs	r4, r1, r0
   2071c:	beq	20734 <__assert_fail@plt+0xe86c>
   20720:	add	r0, r5, #136	; 0x88
   20724:	mov	r1, #0
   20728:	bl	11ac0 <pthread_mutex_init@plt>
   2072c:	cmp	r0, #0
   20730:	bne	206d8 <__assert_fail@plt+0xe810>
   20734:	vmov.i32	q8, #0	; 0x00000000
   20738:	add	r1, sp, #32
   2073c:	str	r4, [sp, #8]
   20740:	ldr	r4, [sl, #20]
   20744:	ldr	r3, [sp, #28]
   20748:	add	r0, r1, #64	; 0x40
   2074c:	vst1.32	{d16-d17}, [r0]
   20750:	add	r0, r1, #52	; 0x34
   20754:	vst1.32	{d16-d17}, [r0]
   20758:	add	r0, r1, #36	; 0x24
   2075c:	vst1.32	{d16-d17}, [r0]
   20760:	add	r0, r1, #20
   20764:	vst1.32	{d16-d17}, [r0]
   20768:	add	r0, r1, #4
   2076c:	add	r1, r1, #44	; 0x2c
   20770:	vst1.32	{d16-d17}, [r0]
   20774:	str	r3, [sp, #32]
   20778:	ubfx	r0, r9, #22, #1
   2077c:	str	r9, [sp, #24]
   20780:	vdup.32	q8, r7
   20784:	str	r5, [sp, #20]
   20788:	strb	r0, [sp, #104]	; 0x68
   2078c:	and	r0, r9, #4194304	; 0x400000
   20790:	str	r4, [sp, #96]	; 0x60
   20794:	orrs	r9, r0, r4
   20798:	str	r0, [sp, #12]
   2079c:	movwne	r9, #1
   207a0:	cmp	r7, #1
   207a4:	strb	r9, [sp, #107]	; 0x6b
   207a8:	ldr	r0, [r5, #92]	; 0x5c
   207ac:	str	r0, [sp, #112]	; 0x70
   207b0:	ldrb	r2, [r5, #88]	; 0x58
   207b4:	vst1.32	{d16-d17}, [r1]
   207b8:	ubfx	r1, r2, #3, #1
   207bc:	strb	r1, [sp, #106]	; 0x6a
   207c0:	ubfx	r1, r2, #2, #1
   207c4:	strb	r1, [sp, #105]	; 0x69
   207c8:	blt	20840 <__assert_fail@plt+0xe978>
   207cc:	cmp	r0, #2
   207d0:	blt	207fc <__assert_fail@plt+0xe934>
   207d4:	mov	r6, #12
   207d8:	cmn	r7, #-1073741822	; 0xc0000002
   207dc:	bhi	20da8 <__assert_fail@plt+0xeee0>
   207e0:	lsl	r1, r8, #2
   207e4:	mov	r0, #0
   207e8:	bl	38480 <__assert_fail@plt+0x265b8>
   207ec:	cmp	r0, #0
   207f0:	beq	20da8 <__assert_fail@plt+0xeee0>
   207f4:	ldr	r3, [sp, #28]
   207f8:	str	r0, [sp, #40]	; 0x28
   207fc:	cmp	r9, #0
   20800:	mov	r6, #0
   20804:	mov	r9, #0
   20808:	beq	20830 <__assert_fail@plt+0xe968>
   2080c:	mov	r0, #0
   20810:	mov	r1, r8
   20814:	bl	38480 <__assert_fail@plt+0x265b8>
   20818:	cmp	r0, #0
   2081c:	beq	20da4 <__assert_fail@plt+0xeedc>
   20820:	ldr	r3, [sp, #28]
   20824:	mov	r6, r0
   20828:	mov	r9, #1
   2082c:	str	r0, [sp, #36]	; 0x24
   20830:	ldr	r0, [sp, #20]
   20834:	str	r8, [sp, #68]	; 0x44
   20838:	ldr	r0, [r0, #92]	; 0x5c
   2083c:	b	20844 <__assert_fail@plt+0xe97c>
   20840:	mov	r8, #0
   20844:	ldr	r1, [sp, #12]
   20848:	cmp	r9, #0
   2084c:	moveq	r6, r3
   20850:	str	r6, [sp, #36]	; 0x24
   20854:	cmp	r1, #0
   20858:	beq	20948 <__assert_fail@plt+0xea80>
   2085c:	cmp	r0, #2
   20860:	blt	20960 <__assert_fail@plt+0xea98>
   20864:	add	r0, sp, #32
   20868:	bl	25cc0 <__assert_fail@plt+0x13df8>
   2086c:	ldr	r9, [sp, #20]
   20870:	cmp	r0, #0
   20874:	bne	20d9c <__assert_fail@plt+0xeed4>
   20878:	add	r5, sp, #32
   2087c:	ldr	r0, [sp, #64]	; 0x40
   20880:	cmp	r0, r7
   20884:	blt	208ac <__assert_fail@plt+0xe9e4>
   20888:	b	20a54 <__assert_fail@plt+0xeb8c>
   2088c:	mov	r0, r5
   20890:	str	r4, [sp, #68]	; 0x44
   20894:	bl	25cc0 <__assert_fail@plt+0x13df8>
   20898:	cmp	r0, #0
   2089c:	bne	20d9c <__assert_fail@plt+0xeed4>
   208a0:	ldr	r0, [sp, #64]	; 0x40
   208a4:	cmp	r0, r7
   208a8:	bge	20a54 <__assert_fail@plt+0xeb8c>
   208ac:	ldr	r0, [r9, #92]	; 0x5c
   208b0:	ldr	r2, [sp, #60]	; 0x3c
   208b4:	ldr	r1, [sp, #68]	; 0x44
   208b8:	add	r0, r0, r2
   208bc:	cmp	r1, r0
   208c0:	bgt	20a54 <__assert_fail@plt+0xeb8c>
   208c4:	ldr	r0, [sp, #112]	; 0x70
   208c8:	lsl	r4, r1, #1
   208cc:	cmp	r0, #2
   208d0:	blt	20920 <__assert_fail@plt+0xea58>
   208d4:	mov	r6, #12
   208d8:	cmn	r4, #-1073741823	; 0xc0000001
   208dc:	bhi	20da8 <__assert_fail@plt+0xeee0>
   208e0:	ldr	r0, [sp, #40]	; 0x28
   208e4:	lsl	r8, r1, #3
   208e8:	mov	r1, r8
   208ec:	bl	38480 <__assert_fail@plt+0x265b8>
   208f0:	cmp	r0, #0
   208f4:	beq	20da8 <__assert_fail@plt+0xeee0>
   208f8:	str	r0, [sp, #40]	; 0x28
   208fc:	ldr	r0, [sp, #44]	; 0x2c
   20900:	cmp	r0, #0
   20904:	beq	20920 <__assert_fail@plt+0xea58>
   20908:	mov	r1, r8
   2090c:	bl	38480 <__assert_fail@plt+0x265b8>
   20910:	cmp	r0, #0
   20914:	beq	20da8 <__assert_fail@plt+0xeee0>
   20918:	ldr	r9, [sp, #20]
   2091c:	str	r0, [sp, #44]	; 0x2c
   20920:	ldrb	r0, [sp, #107]	; 0x6b
   20924:	cmp	r0, #0
   20928:	beq	2088c <__assert_fail@plt+0xe9c4>
   2092c:	ldr	r0, [sp, #36]	; 0x24
   20930:	mov	r1, r4
   20934:	bl	38480 <__assert_fail@plt+0x265b8>
   20938:	cmp	r0, #0
   2093c:	beq	20da4 <__assert_fail@plt+0xeedc>
   20940:	str	r0, [sp, #36]	; 0x24
   20944:	b	2088c <__assert_fail@plt+0xe9c4>
   20948:	cmp	r0, #2
   2094c:	blt	209e0 <__assert_fail@plt+0xeb18>
   20950:	add	r0, sp, #32
   20954:	bl	265e0 <__assert_fail@plt+0x14718>
   20958:	ldr	r9, [sp, #20]
   2095c:	b	20a54 <__assert_fail@plt+0xeb8c>
   20960:	ldr	r9, [sp, #20]
   20964:	cmp	r8, r7
   20968:	movgt	r8, r7
   2096c:	cmp	r8, #1
   20970:	blt	20a48 <__assert_fail@plt+0xeb80>
   20974:	mov	r6, #0
   20978:	bl	11c4c <__ctype_toupper_loc@plt>
   2097c:	ldr	r3, [sp, #28]
   20980:	mov	r1, #0
   20984:	add	r2, r3, r6
   20988:	cmp	r4, #0
   2098c:	ldrb	r2, [r2, r1]
   20990:	beq	209bc <__assert_fail@plt+0xeaf4>
   20994:	b	209b8 <__assert_fail@plt+0xeaf0>
   20998:	ldr	r3, [sp, #32]
   2099c:	ldr	r6, [sp, #56]	; 0x38
   209a0:	ldr	r4, [sp, #96]	; 0x60
   209a4:	mov	r1, r2
   209a8:	add	r2, r3, r6
   209ac:	cmp	r4, #0
   209b0:	ldrb	r2, [r2, r1]
   209b4:	beq	209bc <__assert_fail@plt+0xeaf4>
   209b8:	ldrb	r2, [r4, r2]
   209bc:	ldr	r3, [r0]
   209c0:	ldr	r2, [r3, r2, lsl #2]
   209c4:	ldr	r3, [sp, #36]	; 0x24
   209c8:	strb	r2, [r3, r1]
   209cc:	add	r2, r1, #1
   209d0:	cmp	r2, r8
   209d4:	blt	20998 <__assert_fail@plt+0xead0>
   209d8:	add	r0, r1, #1
   209dc:	b	20a4c <__assert_fail@plt+0xeb84>
   209e0:	ldr	r9, [sp, #20]
   209e4:	cmp	r4, #0
   209e8:	beq	20cfc <__assert_fail@plt+0xee34>
   209ec:	cmp	r8, r7
   209f0:	movgt	r8, r7
   209f4:	cmp	r8, #1
   209f8:	blt	20a48 <__assert_fail@plt+0xeb80>
   209fc:	ldrb	r0, [r3]
   20a00:	cmp	r8, #1
   20a04:	ldrb	r0, [r4, r0]
   20a08:	strb	r0, [r6]
   20a0c:	mov	r0, #1
   20a10:	beq	20a4c <__assert_fail@plt+0xeb84>
   20a14:	mov	r0, #1
   20a18:	ldr	r1, [sp, #32]
   20a1c:	ldr	r3, [sp, #56]	; 0x38
   20a20:	ldr	r7, [sp, #96]	; 0x60
   20a24:	ldr	r2, [sp, #36]	; 0x24
   20a28:	add	r1, r1, r3
   20a2c:	ldrb	r1, [r1, r0]
   20a30:	ldrb	r1, [r7, r1]
   20a34:	strb	r1, [r2, r0]
   20a38:	add	r0, r0, #1
   20a3c:	cmp	r0, r8
   20a40:	blt	20a18 <__assert_fail@plt+0xeb50>
   20a44:	b	20a4c <__assert_fail@plt+0xeb84>
   20a48:	mov	r0, #0
   20a4c:	str	r0, [sp, #64]	; 0x40
   20a50:	str	r0, [sp, #60]	; 0x3c
   20a54:	mov	r5, #0
   20a58:	ldr	r4, [sp, #24]
   20a5c:	sub	r8, fp, #48	; 0x30
   20a60:	add	r6, sp, #32
   20a64:	str	r5, [fp, #-52]	; 0xffffffcc
   20a68:	str	r5, [sl, #24]
   20a6c:	mov	r0, r8
   20a70:	mov	r1, r6
   20a74:	ldr	r7, [sl]
   20a78:	orr	r2, r4, #8388608	; 0x800000
   20a7c:	str	r4, [r7, #128]	; 0x80
   20a80:	bl	26b78 <__assert_fail@plt+0x14cb0>
   20a84:	ldr	r1, [sp, #72]	; 0x48
   20a88:	mov	r2, r8
   20a8c:	mov	r3, r4
   20a90:	str	r5, [sp]
   20a94:	add	r0, r1, r0
   20a98:	mov	r1, sl
   20a9c:	str	r0, [sp, #72]	; 0x48
   20aa0:	sub	r0, fp, #52	; 0x34
   20aa4:	str	r0, [sp, #4]
   20aa8:	mov	r0, r6
   20aac:	bl	267f0 <__assert_fail@plt+0x14928>
   20ab0:	mov	r4, r0
   20ab4:	cmp	r0, #0
   20ab8:	bne	20ac8 <__assert_fail@plt+0xec00>
   20abc:	ldr	r0, [fp, #-52]	; 0xffffffcc
   20ac0:	cmp	r0, #0
   20ac4:	bne	20e50 <__assert_fail@plt+0xef88>
   20ac8:	ldr	r1, [r7, #64]	; 0x40
   20acc:	cmp	r1, #31
   20ad0:	beq	20de8 <__assert_fail@plt+0xef20>
   20ad4:	ldr	r0, [r7, #56]	; 0x38
   20ad8:	add	r0, r0, r1, lsl #5
   20adc:	add	r2, r1, #1
   20ae0:	vmov.i32	q8, #0	; 0x00000000
   20ae4:	mov	r1, #0
   20ae8:	str	r2, [r7, #64]	; 0x40
   20aec:	mov	r2, #2
   20af0:	add	r6, r0, #4
   20af4:	str	r1, [r0, #20]
   20af8:	str	r1, [r0, #24]
   20afc:	str	r2, [r0, #28]
   20b00:	mov	r0, #28
   20b04:	mov	r1, r6
   20b08:	vst1.32	{d16-d17}, [r1], r0
   20b0c:	mvn	r0, #0
   20b10:	str	r0, [r1]
   20b14:	cmp	r4, #0
   20b18:	mov	r0, r6
   20b1c:	beq	20b70 <__assert_fail@plt+0xeca8>
   20b20:	ldr	r1, [r7, #64]	; 0x40
   20b24:	cmp	r1, #31
   20b28:	beq	20e20 <__assert_fail@plt+0xef58>
   20b2c:	ldr	r0, [r7, #56]	; 0x38
   20b30:	add	r0, r0, r1, lsl #5
   20b34:	add	r2, r1, #1
   20b38:	mov	r1, #0
   20b3c:	cmp	r6, #0
   20b40:	mvn	r3, #0
   20b44:	str	r2, [r7, #64]	; 0x40
   20b48:	mov	r2, #16
   20b4c:	str	r1, [r0, #4]!
   20b50:	add	ip, r0, #20
   20b54:	stmib	r0, {r4, r6}
   20b58:	str	r1, [r0, #12]
   20b5c:	str	r1, [r0, #16]
   20b60:	stm	ip, {r1, r2, r3}
   20b64:	str	r0, [r4]
   20b68:	beq	20e48 <__assert_fail@plt+0xef80>
   20b6c:	str	r0, [r6]
   20b70:	cmp	r6, #0
   20b74:	cmpne	r0, #0
   20b78:	beq	20e48 <__assert_fail@plt+0xef80>
   20b7c:	str	r0, [r9, #52]	; 0x34
   20b80:	ldr	r8, [sl]
   20b84:	ldr	r0, [r8, #4]
   20b88:	lsl	r0, r0, #2
   20b8c:	bl	38450 <__assert_fail@plt+0x26588>
   20b90:	str	r0, [r8, #12]
   20b94:	ldr	r0, [r8, #4]
   20b98:	lsl	r0, r0, #2
   20b9c:	bl	38450 <__assert_fail@plt+0x26588>
   20ba0:	str	r0, [r8, #16]
   20ba4:	ldr	r0, [r8, #4]
   20ba8:	add	r0, r0, r0, lsl #1
   20bac:	lsl	r0, r0, #2
   20bb0:	bl	38450 <__assert_fail@plt+0x26588>
   20bb4:	str	r0, [r8, #20]
   20bb8:	ldr	r0, [r8, #4]
   20bbc:	add	r0, r0, r0, lsl #1
   20bc0:	lsl	r0, r0, #2
   20bc4:	bl	38450 <__assert_fail@plt+0x26588>
   20bc8:	str	r0, [r8, #24]
   20bcc:	ldr	r1, [r8, #12]
   20bd0:	cmp	r1, #0
   20bd4:	ldrne	r1, [r8, #16]
   20bd8:	cmpne	r1, #0
   20bdc:	beq	20bf0 <__assert_fail@plt+0xed28>
   20be0:	cmp	r0, #0
   20be4:	ldrne	r0, [r8, #20]
   20be8:	cmpne	r0, #0
   20bec:	bne	20c98 <__assert_fail@plt+0xedd0>
   20bf0:	mov	r0, #12
   20bf4:	str	r0, [fp, #-52]	; 0xffffffcc
   20bf8:	ldr	r4, [sl]
   20bfc:	ldr	r0, [r4, #56]	; 0x38
   20c00:	cmp	r0, #0
   20c04:	beq	20c1c <__assert_fail@plt+0xed54>
   20c08:	ldr	r5, [r0]
   20c0c:	bl	17c10 <__assert_fail@plt+0x5d48>
   20c10:	cmp	r5, #0
   20c14:	mov	r0, r5
   20c18:	bne	20c08 <__assert_fail@plt+0xed40>
   20c1c:	mov	r0, #31
   20c20:	mov	r5, #0
   20c24:	str	r0, [r4, #64]	; 0x40
   20c28:	str	r5, [r4, #52]	; 0x34
   20c2c:	str	r5, [r4, #56]	; 0x38
   20c30:	ldr	r0, [r4, #16]
   20c34:	bl	17c10 <__assert_fail@plt+0x5d48>
   20c38:	str	r5, [r4, #16]
   20c3c:	ldr	r0, [sp, #40]	; 0x28
   20c40:	bl	17c10 <__assert_fail@plt+0x5d48>
   20c44:	ldr	r0, [sp, #44]	; 0x2c
   20c48:	bl	17c10 <__assert_fail@plt+0x5d48>
   20c4c:	ldrb	r0, [sp, #107]	; 0x6b
   20c50:	cmp	r0, #0
   20c54:	beq	20c60 <__assert_fail@plt+0xed98>
   20c58:	ldr	r0, [sp, #36]	; 0x24
   20c5c:	bl	17c10 <__assert_fail@plt+0x5d48>
   20c60:	ldr	r0, [sp, #8]
   20c64:	cmp	r0, #0
   20c68:	beq	20c74 <__assert_fail@plt+0xedac>
   20c6c:	add	r0, r9, #136	; 0x88
   20c70:	bl	11a48 <pthread_mutex_destroy@plt>
   20c74:	mov	r0, r9
   20c78:	bl	22894 <__assert_fail@plt+0x109cc>
   20c7c:	mov	r0, #0
   20c80:	str	r0, [sl]
   20c84:	str	r0, [sl, #4]
   20c88:	ldr	r4, [fp, #-52]	; 0xffffffcc
   20c8c:	mov	r0, r4
   20c90:	sub	sp, fp, #28
   20c94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c98:	ldr	r0, [sl, #24]
   20c9c:	lsl	r0, r0, #2
   20ca0:	bl	38450 <__assert_fail@plt+0x26588>
   20ca4:	cmp	r0, #0
   20ca8:	str	r0, [r8, #132]	; 0x84
   20cac:	beq	21064 <__assert_fail@plt+0xf19c>
   20cb0:	ldr	r1, [sl, #24]
   20cb4:	cmp	r1, #0
   20cb8:	beq	20e90 <__assert_fail@plt+0xefc8>
   20cbc:	mov	r2, #0
   20cc0:	cmp	r1, #4
   20cc4:	bcc	20e80 <__assert_fail@plt+0xefb8>
   20cc8:	bic	r2, r1, #3
   20ccc:	mov	r3, #1
   20cd0:	add	r7, pc, #872	; 0x368
   20cd4:	sub	r6, r2, #4
   20cd8:	add	r3, r3, r6, lsr #2
   20cdc:	cmp	r6, #12
   20ce0:	and	ip, r3, #3
   20ce4:	bcs	20d08 <__assert_fail@plt+0xee40>
   20ce8:	vld1.64	{d16-d17}, [r7 :128]
   20cec:	mov	r7, #0
   20cf0:	cmp	ip, #0
   20cf4:	bne	20d78 <__assert_fail@plt+0xeeb0>
   20cf8:	b	20e88 <__assert_fail@plt+0xefc0>
   20cfc:	str	r8, [sp, #64]	; 0x40
   20d00:	str	r8, [sp, #60]	; 0x3c
   20d04:	b	20a54 <__assert_fail@plt+0xeb8c>
   20d08:	sub	r6, r3, ip
   20d0c:	add	r3, pc, #812	; 0x32c
   20d10:	vmov.i32	q9, #12	; 0x0000000c
   20d14:	vmov.i32	q10, #8	; 0x00000008
   20d18:	vmov.i32	q11, #4	; 0x00000004
   20d1c:	vmov.i32	q12, #16	; 0x00000010
   20d20:	mov	r7, #0
   20d24:	mov	lr, #64	; 0x40
   20d28:	mov	r4, r0
   20d2c:	vld1.64	{d16-d17}, [r3 :128]
   20d30:	mov	r3, r0
   20d34:	vadd.i32	q13, q8, q9
   20d38:	add	r5, r3, #48	; 0x30
   20d3c:	vadd.i32	q14, q8, q10
   20d40:	vadd.i32	q15, q8, q11
   20d44:	subs	r6, r6, #4
   20d48:	add	r7, r7, #16
   20d4c:	vst1.32	{d26-d27}, [r5]
   20d50:	vst1.32	{d16-d17}, [r4], lr
   20d54:	vadd.i32	q8, q8, q12
   20d58:	add	r5, r3, #32
   20d5c:	add	r3, r3, #16
   20d60:	vst1.32	{d28-d29}, [r5]
   20d64:	vst1.32	{d30-d31}, [r3]
   20d68:	mov	r3, r4
   20d6c:	bne	20d34 <__assert_fail@plt+0xee6c>
   20d70:	cmp	ip, #0
   20d74:	beq	20e88 <__assert_fail@plt+0xefc0>
   20d78:	vmov.i32	q9, #4	; 0x00000004
   20d7c:	add	r3, r0, r7, lsl #2
   20d80:	rsb	r7, ip, #0
   20d84:	vadd.i32	q10, q8, q9
   20d88:	vst1.32	{d16-d17}, [r3]!
   20d8c:	adds	r7, r7, #1
   20d90:	vorr	q8, q10, q10
   20d94:	bcc	20d84 <__assert_fail@plt+0xeebc>
   20d98:	b	20e88 <__assert_fail@plt+0xefc0>
   20d9c:	mov	r6, r0
   20da0:	b	20da8 <__assert_fail@plt+0xeee0>
   20da4:	mov	r6, #12
   20da8:	ldr	r9, [sp, #20]
   20dac:	str	r6, [fp, #-52]	; 0xffffffcc
   20db0:	ldr	r4, [sl]
   20db4:	ldr	r0, [r4, #56]	; 0x38
   20db8:	cmp	r0, #0
   20dbc:	bne	20c08 <__assert_fail@plt+0xed40>
   20dc0:	b	20c1c <__assert_fail@plt+0xed54>
   20dc4:	mov	r0, r5
   20dc8:	mov	r1, #160	; 0xa0
   20dcc:	mov	r4, #160	; 0xa0
   20dd0:	bl	38480 <__assert_fail@plt+0x265b8>
   20dd4:	cmp	r0, #0
   20dd8:	beq	20e10 <__assert_fail@plt+0xef48>
   20ddc:	mov	r5, r0
   20de0:	stm	sl, {r0, r4}
   20de4:	b	202ac <__assert_fail@plt+0xe3e4>
   20de8:	mov	r0, #996	; 0x3e4
   20dec:	bl	38450 <__assert_fail@plt+0x26588>
   20df0:	cmp	r0, #0
   20df4:	beq	20e6c <__assert_fail@plt+0xefa4>
   20df8:	ldr	r1, [r7, #56]	; 0x38
   20dfc:	str	r1, [r0]
   20e00:	mov	r1, #0
   20e04:	str	r1, [r7, #64]	; 0x40
   20e08:	str	r0, [r7, #56]	; 0x38
   20e0c:	b	20ad8 <__assert_fail@plt+0xec10>
   20e10:	mov	r4, #12
   20e14:	mov	r0, r4
   20e18:	sub	sp, fp, #28
   20e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e20:	mov	r0, #996	; 0x3e4
   20e24:	bl	38450 <__assert_fail@plt+0x26588>
   20e28:	cmp	r0, #0
   20e2c:	beq	20e48 <__assert_fail@plt+0xef80>
   20e30:	ldr	r1, [r7, #56]	; 0x38
   20e34:	str	r1, [r0]
   20e38:	mov	r1, #0
   20e3c:	str	r1, [r7, #64]	; 0x40
   20e40:	str	r0, [r7, #56]	; 0x38
   20e44:	b	20b30 <__assert_fail@plt+0xec68>
   20e48:	mov	r0, #12
   20e4c:	str	r0, [fp, #-52]	; 0xffffffcc
   20e50:	mov	r0, #0
   20e54:	str	r0, [r9, #52]	; 0x34
   20e58:	ldr	r4, [sl]
   20e5c:	ldr	r0, [r4, #56]	; 0x38
   20e60:	cmp	r0, #0
   20e64:	bne	20c08 <__assert_fail@plt+0xed40>
   20e68:	b	20c1c <__assert_fail@plt+0xed54>
   20e6c:	mov	r6, #0
   20e70:	cmp	r4, #0
   20e74:	mov	r0, r6
   20e78:	bne	20b20 <__assert_fail@plt+0xec58>
   20e7c:	b	20b70 <__assert_fail@plt+0xeca8>
   20e80:	str	r2, [r0, r2, lsl #2]
   20e84:	add	r2, r2, #1
   20e88:	cmp	r1, r2
   20e8c:	bne	20e80 <__assert_fail@plt+0xefb8>
   20e90:	ldr	r2, [r8, #52]	; 0x34
   20e94:	ldrb	r1, [r2, #24]
   20e98:	cmp	r1, #17
   20e9c:	beq	20ec8 <__assert_fail@plt+0xf000>
   20ea0:	cmp	r1, #4
   20ea4:	bne	20f18 <__assert_fail@plt+0xf050>
   20ea8:	ldr	r1, [r2, #20]
   20eac:	mov	r3, #1
   20eb0:	ldr	r0, [r0, r1, lsl #2]
   20eb4:	str	r0, [r2, #20]
   20eb8:	ldr	r1, [r8, #80]	; 0x50
   20ebc:	orr	r0, r1, r3, lsl r0
   20ec0:	str	r0, [r8, #80]	; 0x50
   20ec4:	b	20f18 <__assert_fail@plt+0xf050>
   20ec8:	ldr	r1, [r2, #4]
   20ecc:	cmp	r1, #0
   20ed0:	beq	20f18 <__assert_fail@plt+0xf050>
   20ed4:	ldrb	r3, [r1, #24]
   20ed8:	cmp	r3, #17
   20edc:	bne	20f18 <__assert_fail@plt+0xf050>
   20ee0:	ldr	r3, [r1, #4]
   20ee4:	ldr	r1, [r1, #20]
   20ee8:	cmp	r3, #0
   20eec:	str	r3, [r2, #4]
   20ef0:	strne	r2, [r3]
   20ef4:	cmp	r1, #31
   20ef8:	ldr	r3, [r2, #20]
   20efc:	ldr	r3, [r0, r3, lsl #2]
   20f00:	str	r3, [r0, r1, lsl #2]
   20f04:	bgt	20f18 <__assert_fail@plt+0xf050>
   20f08:	ldr	r0, [r8, #80]	; 0x50
   20f0c:	mov	r3, #1
   20f10:	bic	r0, r0, r3, lsl r1
   20f14:	b	20ec0 <__assert_fail@plt+0xeff8>
   20f18:	mov	r0, #1
   20f1c:	ldr	r7, [r2, #4]
   20f20:	cmp	r7, #0
   20f24:	bne	20f54 <__assert_fail@plt+0xf08c>
   20f28:	mov	r3, #0
   20f2c:	ldr	r7, [r2, #8]
   20f30:	mov	r1, r2
   20f34:	cmp	r7, r3
   20f38:	cmpne	r7, #0
   20f3c:	bne	20f54 <__assert_fail@plt+0xf08c>
   20f40:	ldr	r2, [r1]
   20f44:	mov	r3, r1
   20f48:	cmp	r2, #0
   20f4c:	bne	20f2c <__assert_fail@plt+0xf064>
   20f50:	b	21004 <__assert_fail@plt+0xf13c>
   20f54:	ldrb	r1, [r7, #24]
   20f58:	cmp	r1, #17
   20f5c:	beq	20fa8 <__assert_fail@plt+0xf0e0>
   20f60:	cmp	r1, #4
   20f64:	mov	r2, r7
   20f68:	bne	20f1c <__assert_fail@plt+0xf054>
   20f6c:	ldr	r1, [r8, #132]	; 0x84
   20f70:	mov	r2, r7
   20f74:	cmp	r1, #0
   20f78:	beq	20f1c <__assert_fail@plt+0xf054>
   20f7c:	ldr	r2, [r7, #20]
   20f80:	ldr	r1, [r1, r2, lsl #2]
   20f84:	str	r1, [r7, #20]
   20f88:	ldr	r2, [r8, #80]	; 0x50
   20f8c:	orr	r1, r2, r0, lsl r1
   20f90:	str	r1, [r8, #80]	; 0x50
   20f94:	mov	r2, r7
   20f98:	ldr	r7, [r2, #4]
   20f9c:	cmp	r7, #0
   20fa0:	bne	20f54 <__assert_fail@plt+0xf08c>
   20fa4:	b	20f28 <__assert_fail@plt+0xf060>
   20fa8:	ldr	r3, [r7, #4]
   20fac:	mov	r2, r7
   20fb0:	cmp	r3, #0
   20fb4:	beq	20f1c <__assert_fail@plt+0xf054>
   20fb8:	ldrb	r1, [r3, #24]
   20fbc:	mov	r2, r7
   20fc0:	cmp	r1, #17
   20fc4:	bne	20f1c <__assert_fail@plt+0xf054>
   20fc8:	ldr	r1, [r3, #4]
   20fcc:	ldr	r3, [r3, #20]
   20fd0:	cmp	r1, #0
   20fd4:	str	r1, [r7, #4]
   20fd8:	strne	r7, [r1]
   20fdc:	cmp	r3, #31
   20fe0:	ldr	r1, [r7, #20]
   20fe4:	ldr	r2, [r8, #132]	; 0x84
   20fe8:	ldr	r1, [r2, r1, lsl #2]
   20fec:	str	r1, [r2, r3, lsl #2]
   20ff0:	mov	r2, r7
   20ff4:	bgt	20f1c <__assert_fail@plt+0xf054>
   20ff8:	ldr	r1, [r8, #80]	; 0x50
   20ffc:	bic	r1, r1, r0, lsl r3
   21000:	b	20f90 <__assert_fail@plt+0xf0c8>
   21004:	ldr	r1, [sl, #24]
   21008:	cmp	r1, #0
   2100c:	beq	21034 <__assert_fail@plt+0xf16c>
   21010:	ldr	r0, [r8, #132]	; 0x84
   21014:	mov	r2, #0
   21018:	ldr	r3, [r0, r2, lsl #2]
   2101c:	cmp	r2, r3
   21020:	bne	21050 <__assert_fail@plt+0xf188>
   21024:	add	r2, r2, #1
   21028:	cmp	r1, r2
   2102c:	bne	21018 <__assert_fail@plt+0xf150>
   21030:	b	21058 <__assert_fail@plt+0xf190>
   21034:	ldr	r0, [r8, #132]	; 0x84
   21038:	b	21058 <__assert_fail@plt+0xf190>
   2103c:	nop	{0}
   21040:	andeq	r0, r0, r0
   21044:	andeq	r0, r0, r1
   21048:	andeq	r0, r0, r2
   2104c:	andeq	r0, r0, r3
   21050:	cmp	r1, r2
   21054:	bne	21064 <__assert_fail@plt+0xf19c>
   21058:	bl	17c10 <__assert_fail@plt+0x5d48>
   2105c:	mov	r0, #0
   21060:	str	r0, [r8, #132]	; 0x84
   21064:	ldr	r0, [r8, #52]	; 0x34
   21068:	str	r8, [sp, #24]
   2106c:	mov	r7, #0
   21070:	sub	r8, fp, #48	; 0x30
   21074:	mov	r4, r0
   21078:	ldr	r0, [r0, #4]
   2107c:	cmp	r0, #0
   21080:	bne	21074 <__assert_fail@plt+0xf1ac>
   21084:	ldr	r0, [r4, #8]
   21088:	cmp	r0, #0
   2108c:	bne	21074 <__assert_fail@plt+0xf1ac>
   21090:	mov	r3, #0
   21094:	cmp	r3, #0
   21098:	str	r7, [fp, #-48]	; 0xffffffd0
   2109c:	beq	210c8 <__assert_fail@plt+0xf200>
   210a0:	ldrb	r0, [r3, #24]
   210a4:	cmp	r0, #17
   210a8:	bne	210c8 <__assert_fail@plt+0xf200>
   210ac:	ldrb	r2, [sl, #28]
   210b0:	ldr	r1, [sl]
   210b4:	mov	r0, r8
   210b8:	bl	2b370 <__assert_fail@plt+0x194a8>
   210bc:	cmp	r0, #0
   210c0:	str	r0, [r4, #4]
   210c4:	strne	r4, [r0]
   210c8:	ldr	r3, [r4, #8]
   210cc:	cmp	r3, #0
   210d0:	beq	210fc <__assert_fail@plt+0xf234>
   210d4:	ldrb	r0, [r3, #24]
   210d8:	cmp	r0, #17
   210dc:	bne	210fc <__assert_fail@plt+0xf234>
   210e0:	ldrb	r2, [sl, #28]
   210e4:	ldr	r1, [sl]
   210e8:	mov	r0, r8
   210ec:	bl	2b370 <__assert_fail@plt+0x194a8>
   210f0:	cmp	r0, #0
   210f4:	str	r0, [r4, #8]
   210f8:	strne	r4, [r0]
   210fc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   21100:	cmp	r0, #0
   21104:	bne	20bf4 <__assert_fail@plt+0xed2c>
   21108:	ldr	r1, [r4]
   2110c:	cmp	r1, #0
   21110:	beq	2113c <__assert_fail@plt+0xf274>
   21114:	ldr	r0, [r1, #8]
   21118:	cmp	r0, r4
   2111c:	cmpne	r0, #0
   21120:	bne	21074 <__assert_fail@plt+0xf1ac>
   21124:	ldr	r3, [r1, #4]
   21128:	mov	r4, r1
   2112c:	cmp	r3, #0
   21130:	str	r7, [fp, #-48]	; 0xffffffd0
   21134:	bne	210a0 <__assert_fail@plt+0xf1d8>
   21138:	b	210c8 <__assert_fail@plt+0xf200>
   2113c:	ldr	r8, [sp, #24]
   21140:	ldr	r0, [r8, #52]	; 0x34
   21144:	mov	r4, r0
   21148:	ldr	r0, [r0, #4]
   2114c:	cmp	r0, #0
   21150:	bne	21144 <__assert_fail@plt+0xf27c>
   21154:	ldr	r0, [r4, #8]
   21158:	cmp	r0, #0
   2115c:	bne	21144 <__assert_fail@plt+0xf27c>
   21160:	ldr	r2, [r4, #24]
   21164:	uxtb	r0, r2
   21168:	cmp	r0, #16
   2116c:	bne	211b0 <__assert_fail@plt+0xf2e8>
   21170:	ldr	r0, [r4, #4]
   21174:	ldr	r1, [r0, #12]
   21178:	str	r1, [r4, #12]
   2117c:	ldr	r0, [r0, #28]
   21180:	str	r0, [r4, #28]
   21184:	ldr	r1, [r4]
   21188:	cmp	r1, #0
   2118c:	beq	211fc <__assert_fail@plt+0xf334>
   21190:	ldr	r0, [r1, #8]
   21194:	cmp	r0, r4
   21198:	mov	r4, r1
   2119c:	beq	21160 <__assert_fail@plt+0xf298>
   211a0:	cmp	r0, #0
   211a4:	mov	r4, r1
   211a8:	beq	21160 <__assert_fail@plt+0xf298>
   211ac:	b	21144 <__assert_fail@plt+0xf27c>
   211b0:	str	r4, [r4, #12]
   211b4:	mov	r0, r8
   211b8:	ldr	r1, [r4, #20]
   211bc:	bl	2b658 <__assert_fail@plt+0x19790>
   211c0:	cmn	r0, #1
   211c4:	str	r0, [r4, #28]
   211c8:	beq	20bf0 <__assert_fail@plt+0xed28>
   211cc:	ldrb	r1, [r4, #24]
   211d0:	cmp	r1, #12
   211d4:	bne	211f0 <__assert_fail@plt+0xf328>
   211d8:	ldr	r1, [r8]
   211dc:	ldr	r2, [r4, #20]
   211e0:	add	r0, r1, r0, lsl #3
   211e4:	ldr	r1, [r0, #4]
   211e8:	bfi	r1, r2, #8, #10
   211ec:	str	r1, [r0, #4]
   211f0:	ldr	r1, [r4]
   211f4:	cmp	r1, #0
   211f8:	bne	21190 <__assert_fail@plt+0xf2c8>
   211fc:	ldr	r4, [r8, #52]	; 0x34
   21200:	ldrb	r0, [r4, #24]
   21204:	cmp	r0, #16
   21208:	beq	2122c <__assert_fail@plt+0xf364>
   2120c:	cmp	r0, #11
   21210:	bne	2123c <__assert_fail@plt+0xf374>
   21214:	ldr	r0, [r4, #4]
   21218:	str	r4, [r0, #16]
   2121c:	mov	r1, r4
   21220:	cmp	r0, #0
   21224:	bne	21280 <__assert_fail@plt+0xf3b8>
   21228:	b	212e4 <__assert_fail@plt+0xf41c>
   2122c:	ldmib	r4, {r0, r1}
   21230:	ldr	r2, [r1, #12]
   21234:	str	r2, [r0, #16]
   21238:	b	21258 <__assert_fail@plt+0xf390>
   2123c:	ldr	r0, [r4, #4]
   21240:	cmp	r0, #0
   21244:	ldrne	r1, [r4, #16]
   21248:	strne	r1, [r0, #16]
   2124c:	ldr	r1, [r4, #8]
   21250:	cmp	r1, #0
   21254:	beq	21260 <__assert_fail@plt+0xf398>
   21258:	ldr	r2, [r4, #16]
   2125c:	str	r2, [r1, #16]
   21260:	mov	r1, r4
   21264:	cmp	r0, #0
   21268:	bne	21280 <__assert_fail@plt+0xf3b8>
   2126c:	b	212e4 <__assert_fail@plt+0xf41c>
   21270:	ldr	r0, [r1, #4]
   21274:	str	r1, [r0, #16]
   21278:	cmp	r0, #0
   2127c:	beq	212e4 <__assert_fail@plt+0xf41c>
   21280:	mov	r1, r0
   21284:	ldrb	r0, [r0, #24]
   21288:	cmp	r0, #16
   2128c:	beq	212c8 <__assert_fail@plt+0xf400>
   21290:	cmp	r0, #11
   21294:	beq	21270 <__assert_fail@plt+0xf3a8>
   21298:	ldr	r0, [r1, #4]
   2129c:	cmp	r0, #0
   212a0:	ldrne	r2, [r1, #16]
   212a4:	strne	r2, [r0, #16]
   212a8:	ldr	r2, [r1, #8]
   212ac:	cmp	r2, #0
   212b0:	beq	21278 <__assert_fail@plt+0xf3b0>
   212b4:	ldr	r3, [r1, #16]
   212b8:	str	r3, [r2, #16]
   212bc:	cmp	r0, #0
   212c0:	bne	21280 <__assert_fail@plt+0xf3b8>
   212c4:	b	212e4 <__assert_fail@plt+0xf41c>
   212c8:	ldmib	r1, {r0, r2}
   212cc:	ldr	r3, [r2, #12]
   212d0:	str	r3, [r0, #16]
   212d4:	ldr	r3, [r1, #16]
   212d8:	str	r3, [r2, #16]
   212dc:	cmp	r0, #0
   212e0:	bne	21280 <__assert_fail@plt+0xf3b8>
   212e4:	mov	r3, #0
   212e8:	ldr	r0, [r1, #8]
   212ec:	mov	r2, r1
   212f0:	cmp	r0, r3
   212f4:	cmpne	r0, #0
   212f8:	bne	21280 <__assert_fail@plt+0xf3b8>
   212fc:	ldr	r1, [r2]
   21300:	mov	r3, r2
   21304:	cmp	r1, #0
   21308:	bne	212e8 <__assert_fail@plt+0xf420>
   2130c:	mov	r0, r8
   21310:	mov	r1, r4
   21314:	bl	2b1d4 <__assert_fail@plt+0x1930c>
   21318:	cmp	r0, #0
   2131c:	beq	2133c <__assert_fail@plt+0xf474>
   21320:	b	20bf4 <__assert_fail@plt+0xed2c>
   21324:	mov	r0, r8
   21328:	mov	r1, r7
   2132c:	bl	2b1d4 <__assert_fail@plt+0x1930c>
   21330:	cmp	r0, #0
   21334:	mov	r4, r7
   21338:	bne	20bf4 <__assert_fail@plt+0xed2c>
   2133c:	ldr	r7, [r4, #4]
   21340:	cmp	r7, #0
   21344:	bne	21324 <__assert_fail@plt+0xf45c>
   21348:	mov	r1, #0
   2134c:	ldr	r7, [r4, #8]
   21350:	mov	r0, r4
   21354:	cmp	r7, r1
   21358:	cmpne	r7, #0
   2135c:	bne	21324 <__assert_fail@plt+0xf45c>
   21360:	ldr	r4, [r0]
   21364:	mov	r1, r0
   21368:	cmp	r4, #0
   2136c:	bne	2134c <__assert_fail@plt+0xf484>
   21370:	mov	r5, #0
   21374:	sub	r4, fp, #48	; 0x30
   21378:	mov	r7, #0
   2137c:	b	213ac <__assert_fail@plt+0xf4e4>
   21380:	mov	r1, r5
   21384:	ldr	r2, [r8, #8]
   21388:	add	r0, r7, #1
   2138c:	subs	r3, r0, r2
   21390:	mov	r7, r3
   21394:	movwne	r3, #1
   21398:	movne	r7, r0
   2139c:	tst	r1, #1
   213a0:	and	r5, r1, r3
   213a4:	cmpeq	r0, r2
   213a8:	beq	21408 <__assert_fail@plt+0xf540>
   213ac:	ldr	r0, [r8, #24]
   213b0:	add	r6, r7, r7, lsl #1
   213b4:	add	r0, r0, r6, lsl #2
   213b8:	ldr	r0, [r0, #4]
   213bc:	cmp	r0, #0
   213c0:	bne	21380 <__assert_fail@plt+0xf4b8>
   213c4:	mov	r0, r4
   213c8:	mov	r1, r8
   213cc:	mov	r2, r7
   213d0:	mov	r3, #1
   213d4:	bl	2b830 <__assert_fail@plt+0x19968>
   213d8:	cmp	r0, #0
   213dc:	bne	20bf4 <__assert_fail@plt+0xed2c>
   213e0:	ldr	r0, [r8, #24]
   213e4:	mov	r1, r5
   213e8:	add	r0, r0, r6, lsl #2
   213ec:	ldr	r0, [r0, #4]
   213f0:	cmp	r0, #0
   213f4:	bne	21384 <__assert_fail@plt+0xf4bc>
   213f8:	ldr	r0, [fp, #-40]	; 0xffffffd8
   213fc:	bl	17c10 <__assert_fail@plt+0x5d48>
   21400:	mov	r1, #1
   21404:	b	21384 <__assert_fail@plt+0xf4bc>
   21408:	ldrb	r1, [sl, #28]
   2140c:	tst	r1, #16
   21410:	bne	2142c <__assert_fail@plt+0xf564>
   21414:	ldr	r1, [sl, #24]
   21418:	cmp	r1, #0
   2141c:	beq	2142c <__assert_fail@plt+0xf564>
   21420:	ldrb	r1, [r8, #88]	; 0x58
   21424:	tst	r1, #1
   21428:	bne	21438 <__assert_fail@plt+0xf570>
   2142c:	ldr	r1, [r8, #76]	; 0x4c
   21430:	cmp	r1, #0
   21434:	beq	2157c <__assert_fail@plt+0xf6b4>
   21438:	add	r0, r0, r0, lsl #1
   2143c:	lsl	r0, r0, #2
   21440:	bl	38450 <__assert_fail@plt+0x26588>
   21444:	cmp	r0, #0
   21448:	str	r0, [r8, #28]
   2144c:	beq	21a30 <__assert_fail@plt+0xfb68>
   21450:	ldr	r1, [r8, #8]
   21454:	cmp	r1, #0
   21458:	beq	2157c <__assert_fail@plt+0xf6b4>
   2145c:	mov	r1, #0
   21460:	str	r1, [r0]
   21464:	str	r1, [r0, #4]
   21468:	str	r1, [r0, #8]
   2146c:	ldr	r0, [r8, #8]
   21470:	cmp	r0, #2
   21474:	bcc	214a4 <__assert_fail@plt+0xf5dc>
   21478:	mov	r2, #1
   2147c:	mov	r3, #12
   21480:	ldr	r0, [r8, #28]
   21484:	add	r2, r2, #1
   21488:	str	r1, [r0, r3]!
   2148c:	add	r3, r3, #12
   21490:	str	r1, [r0, #4]
   21494:	str	r1, [r0, #8]
   21498:	ldr	r0, [r8, #8]
   2149c:	cmp	r2, r0
   214a0:	bcc	21480 <__assert_fail@plt+0xf5b8>
   214a4:	cmp	r0, #0
   214a8:	beq	2157c <__assert_fail@plt+0xf6b4>
   214ac:	ldr	ip, [r8, #24]
   214b0:	mov	r7, #0
   214b4:	str	sl, [sp, #16]
   214b8:	b	214d0 <__assert_fail@plt+0xf608>
   214bc:	ldr	r0, [r8, #8]
   214c0:	ldr	sl, [sp, #16]
   214c4:	add	r7, r7, #1
   214c8:	cmp	r7, r0
   214cc:	bcs	2157c <__assert_fail@plt+0xf6b4>
   214d0:	add	r9, r7, r7, lsl #1
   214d4:	add	r2, ip, r9, lsl #2
   214d8:	ldr	r3, [r2, #4]
   214dc:	cmp	r3, #1
   214e0:	blt	214c4 <__assert_fail@plt+0xf5fc>
   214e4:	ldr	r1, [r2, #8]
   214e8:	mov	r6, #0
   214ec:	str	r1, [sp, #28]
   214f0:	b	2151c <__assert_fail@plt+0xf654>
   214f4:	add	r0, r4, r0, lsl #2
   214f8:	ldr	r0, [r0, #8]
   214fc:	add	r3, r2, #1
   21500:	add	r6, r6, #1
   21504:	str	r3, [sl]
   21508:	str	r7, [r0, r2, lsl #2]
   2150c:	add	r0, ip, r9, lsl #2
   21510:	ldr	r0, [r0, #4]
   21514:	cmp	r6, r0
   21518:	bge	214bc <__assert_fail@plt+0xf5f4>
   2151c:	ldr	r0, [r1, r6, lsl #2]
   21520:	ldr	r4, [r8, #28]
   21524:	add	r0, r0, r0, lsl #1
   21528:	mov	r3, r4
   2152c:	ldr	r5, [r3, r0, lsl #2]!
   21530:	mov	sl, r3
   21534:	ldr	r2, [sl, #4]!
   21538:	cmp	r5, r2
   2153c:	bne	214f4 <__assert_fail@plt+0xf62c>
   21540:	mov	r1, #2
   21544:	add	r8, r4, r0, lsl #2
   21548:	add	r1, r1, r5, lsl #1
   2154c:	str	r1, [r3]
   21550:	lsl	r1, r1, #2
   21554:	ldr	r0, [r8, #8]!
   21558:	bl	38480 <__assert_fail@plt+0x265b8>
   2155c:	cmp	r0, #0
   21560:	beq	21a2c <__assert_fail@plt+0xfb64>
   21564:	str	r0, [r8]
   21568:	ldr	r8, [sp, #24]
   2156c:	ldr	r1, [sp, #28]
   21570:	ldr	r2, [sl]
   21574:	ldr	ip, [r8, #24]
   21578:	b	214fc <__assert_fail@plt+0xf634>
   2157c:	mov	r0, #0
   21580:	str	r0, [fp, #-52]	; 0xffffffcc
   21584:	ldr	r0, [sp, #12]
   21588:	cmp	r0, #0
   2158c:	bne	21748 <__assert_fail@plt+0xf880>
   21590:	ldr	r0, [sp, #20]
   21594:	ldrb	r2, [r0, #88]	; 0x58
   21598:	ands	r0, r2, #4
   2159c:	beq	21748 <__assert_fail@plt+0xf880>
   215a0:	ldr	r0, [sl, #20]
   215a4:	cmp	r0, #0
   215a8:	bne	21748 <__assert_fail@plt+0xf880>
   215ac:	ldr	r0, [sp, #20]
   215b0:	mov	r9, #0
   215b4:	ldr	r7, [r0, #8]
   215b8:	cmp	r7, #0
   215bc:	beq	215dc <__assert_fail@plt+0xf714>
   215c0:	ldr	r3, [r0]
   215c4:	mov	r8, #0
   215c8:	mov	ip, #1
   215cc:	mov	lr, #139	; 0x8b
   215d0:	mov	r6, #0
   215d4:	mov	r4, #0
   215d8:	b	21630 <__assert_fail@plt+0xf768>
   215dc:	mov	r8, #0
   215e0:	ldr	r3, [sp, #20]
   215e4:	mov	r0, #1
   215e8:	and	r1, r2, #249	; 0xf9
   215ec:	str	r0, [r3, #92]	; 0x5c
   215f0:	ldr	r0, [r3, #76]	; 0x4c
   215f4:	cmp	r0, #0
   215f8:	movwgt	r9, #1
   215fc:	orr	r0, r8, r9
   21600:	and	r0, r0, #1
   21604:	orr	r0, r1, r0, lsl #1
   21608:	strb	r0, [r3, #88]	; 0x58
   2160c:	b	21748 <__assert_fail@plt+0xf880>
   21610:	ldrsb	r0, [r5]
   21614:	cmp	r0, #0
   21618:	mov	r0, #0
   2161c:	movwmi	r0, #1
   21620:	orr	r6, r6, r0
   21624:	add	r4, r4, #1
   21628:	cmp	r7, r4
   2162c:	beq	216e0 <__assert_fail@plt+0xf818>
   21630:	add	r5, r3, r4, lsl #3
   21634:	ldrb	r1, [r5, #4]
   21638:	sub	r1, r1, #1
   2163c:	cmp	r1, #11
   21640:	bhi	21a80 <__assert_fail@plt+0xfbb8>
   21644:	add	r0, pc, #0
   21648:	ldr	pc, [r0, r1, lsl #2]
   2164c:	andeq	r1, r2, r0, lsl r6
   21650:	andeq	r1, r2, r4, lsr #12
   21654:	andeq	r1, r2, ip, ror r6
   21658:	andeq	r1, r2, r4, lsr #12
   2165c:	ldrdeq	r1, [r2], -r0
   21660:	andeq	r1, r2, r8, asr #14
   21664:	andeq	r1, r2, r0, lsl #21
   21668:	andeq	r1, r2, r4, lsr #12
   2166c:	andeq	r1, r2, r4, lsr #12
   21670:	andeq	r1, r2, r4, lsr #12
   21674:	andeq	r1, r2, r4, lsr #12
   21678:			; <UNDEFINED> instruction: 0x000216b0
   2167c:	ldr	r5, [r3, r4, lsl #3]
   21680:	ldr	r0, [r5, #16]
   21684:	cmp	r0, #0
   21688:	bne	21748 <__assert_fail@plt+0xf880>
   2168c:	ldr	r0, [r5, #20]
   21690:	cmp	r0, #0
   21694:	ldreq	r0, [r5, #24]
   21698:	cmpeq	r0, #0
   2169c:	bne	21748 <__assert_fail@plt+0xf880>
   216a0:	ldr	r0, [r5, #28]
   216a4:	cmp	r0, #0
   216a8:	beq	21624 <__assert_fail@plt+0xf75c>
   216ac:	b	21748 <__assert_fail@plt+0xf880>
   216b0:	ldr	r0, [r3, r4, lsl #3]
   216b4:	sub	r0, r0, #16
   216b8:	ror	r1, r0, #4
   216bc:	cmp	r1, #7
   216c0:	bhi	21748 <__assert_fail@plt+0xf880>
   216c4:	tst	lr, ip, lsl r1
   216c8:	bne	21624 <__assert_fail@plt+0xf75c>
   216cc:	b	21748 <__assert_fail@plt+0xf880>
   216d0:	mov	r8, #1
   216d4:	add	r4, r4, #1
   216d8:	cmp	r7, r4
   216dc:	bne	21630 <__assert_fail@plt+0xf768>
   216e0:	orr	r0, r6, r8
   216e4:	tst	r0, #1
   216e8:	beq	215e0 <__assert_fail@plt+0xf718>
   216ec:	mov	r2, #0
   216f0:	mov	r7, #7
   216f4:	add	r3, r3, r2, lsl #3
   216f8:	ldr	r6, [r3, #4]
   216fc:	uxtb	r1, r6
   21700:	cmp	r1, #5
   21704:	beq	21724 <__assert_fail@plt+0xf85c>
   21708:	cmp	r1, #1
   2170c:	bne	2172c <__assert_fail@plt+0xf864>
   21710:	ldrsb	r0, [r3]
   21714:	cmn	r0, #1
   21718:	bicle	r0, r6, #2097152	; 0x200000
   2171c:	strle	r0, [r3, #4]
   21720:	b	2172c <__assert_fail@plt+0xf864>
   21724:	bfi	r6, r7, #0, #8
   21728:	str	r6, [r3, #4]
   2172c:	ldr	r1, [sp, #20]
   21730:	add	r2, r2, #1
   21734:	ldr	r0, [r1, #8]
   21738:	cmp	r2, r0
   2173c:	bcs	21a44 <__assert_fail@plt+0xfb7c>
   21740:	ldr	r3, [r1]
   21744:	b	216f4 <__assert_fail@plt+0xf82c>
   21748:	ldr	r8, [sp, #20]
   2174c:	ldr	r1, [r8, #52]	; 0x34
   21750:	ldr	r0, [r8, #24]
   21754:	ldr	r1, [r1, #12]
   21758:	ldr	r1, [r1, #28]
   2175c:	str	r1, [r8, #72]	; 0x48
   21760:	add	r1, r1, r1, lsl #1
   21764:	add	r5, r0, r1, lsl #2
   21768:	mov	r4, r5
   2176c:	ldr	r7, [r4, #4]!
   21770:	str	r7, [fp, #-44]	; 0xffffffd4
   21774:	ldr	r0, [r4]
   21778:	cmp	r0, #1
   2177c:	blt	218d4 <__assert_fail@plt+0xfa0c>
   21780:	lsl	r0, r7, #2
   21784:	str	r7, [fp, #-48]	; 0xffffffd0
   21788:	bl	38450 <__assert_fail@plt+0x26588>
   2178c:	cmp	r0, #0
   21790:	str	r0, [fp, #-40]	; 0xffffffd8
   21794:	beq	21a68 <__assert_fail@plt+0xfba0>
   21798:	mov	r6, r0
   2179c:	ldr	r0, [r4]
   217a0:	ldr	r1, [r5, #8]
   217a4:	lsl	r2, r0, #2
   217a8:	mov	r0, r6
   217ac:	bl	11ab4 <memcpy@plt>
   217b0:	mov	r0, #0
   217b4:	cmp	r7, #1
   217b8:	str	r0, [fp, #-32]	; 0xffffffe0
   217bc:	blt	218e8 <__assert_fail@plt+0xfa20>
   217c0:	ldr	r0, [sp, #20]
   217c4:	ldr	r0, [r0, #76]	; 0x4c
   217c8:	cmp	r0, #1
   217cc:	blt	218e8 <__assert_fail@plt+0xfa20>
   217d0:	mov	r0, #0
   217d4:	sub	r8, fp, #48	; 0x30
   217d8:	mov	r9, #1
   217dc:	ldr	r2, [sp, #20]
   217e0:	ldr	r1, [r6, r0, lsl #2]
   217e4:	ldr	r2, [r2]
   217e8:	add	r3, r2, r1, lsl #3
   217ec:	ldrb	r3, [r3, #4]
   217f0:	cmp	r3, #4
   217f4:	bne	218c0 <__assert_fail@plt+0xf9f8>
   217f8:	mov	r3, #0
   217fc:	cmp	r7, #1
   21800:	bge	21814 <__assert_fail@plt+0xf94c>
   21804:	b	21838 <__assert_fail@plt+0xf970>
   21808:	add	r3, r3, #1
   2180c:	cmp	r7, r3
   21810:	beq	218c0 <__assert_fail@plt+0xf9f8>
   21814:	ldr	r5, [r6, r3, lsl #2]
   21818:	add	r4, r2, r5, lsl #3
   2181c:	ldrb	r4, [r4, #4]
   21820:	cmp	r4, #9
   21824:	bne	21808 <__assert_fail@plt+0xf940>
   21828:	ldr	r4, [r2, r1, lsl #3]
   2182c:	ldr	r5, [r2, r5, lsl #3]
   21830:	cmp	r5, r4
   21834:	bne	21808 <__assert_fail@plt+0xf940>
   21838:	cmp	r3, r7
   2183c:	beq	218c0 <__assert_fail@plt+0xf9f8>
   21840:	ldr	r2, [sp, #20]
   21844:	add	r1, r1, r1, lsl #1
   21848:	cmp	r7, #1
   2184c:	ldr	r2, [r2, #20]
   21850:	add	r1, r2, r1, lsl #2
   21854:	ldr	r1, [r1, #8]
   21858:	ldr	ip, [r1]
   2185c:	blt	21898 <__assert_fail@plt+0xf9d0>
   21860:	mov	r2, #0
   21864:	subs	r3, r7, #1
   21868:	beq	2188c <__assert_fail@plt+0xf9c4>
   2186c:	add	r5, r2, r3
   21870:	lsr	r4, r5, #1
   21874:	ldr	r1, [r6, r4, lsl #2]
   21878:	cmp	r1, ip
   2187c:	addlt	r2, r9, r5, lsr #1
   21880:	movge	r3, r4
   21884:	cmp	r2, r3
   21888:	bcc	2186c <__assert_fail@plt+0xf9a4>
   2188c:	ldr	r1, [r6, r2, lsl #2]
   21890:	cmp	r1, ip
   21894:	beq	218c0 <__assert_fail@plt+0xf9f8>
   21898:	ldr	r0, [sp, #20]
   2189c:	add	r1, ip, ip, lsl #1
   218a0:	ldr	r0, [r0, #24]
   218a4:	add	r1, r0, r1, lsl #2
   218a8:	mov	r0, r8
   218ac:	bl	2bee8 <__assert_fail@plt+0x1a020>
   218b0:	cmp	r0, #0
   218b4:	bne	21a3c <__assert_fail@plt+0xfb74>
   218b8:	ldr	r7, [fp, #-44]	; 0xffffffd4
   218bc:	mov	r0, #0
   218c0:	add	r0, r0, #1
   218c4:	cmp	r0, r7
   218c8:	bge	218e8 <__assert_fail@plt+0xfa20>
   218cc:	ldr	r6, [fp, #-40]	; 0xffffffd8
   218d0:	b	217dc <__assert_fail@plt+0xf914>
   218d4:	mov	r0, #0
   218d8:	str	r0, [fp, #-44]	; 0xffffffd4
   218dc:	str	r0, [fp, #-48]	; 0xffffffd0
   218e0:	str	r0, [fp, #-40]	; 0xffffffd8
   218e4:	str	r0, [fp, #-32]	; 0xffffffe0
   218e8:	ldr	r8, [sp, #20]
   218ec:	sub	r0, fp, #32
   218f0:	sub	r2, fp, #48	; 0x30
   218f4:	mov	r3, #0
   218f8:	mov	r1, r8
   218fc:	bl	2c208 <__assert_fail@plt+0x1a340>
   21900:	cmp	r0, #0
   21904:	str	r0, [r8, #36]	; 0x24
   21908:	beq	21988 <__assert_fail@plt+0xfac0>
   2190c:	ldrsb	r1, [r0, #52]	; 0x34
   21910:	cmn	r1, #1
   21914:	ble	21928 <__assert_fail@plt+0xfa60>
   21918:	str	r0, [r8, #40]	; 0x28
   2191c:	str	r0, [r8, #44]	; 0x2c
   21920:	str	r0, [r8, #48]	; 0x30
   21924:	b	2199c <__assert_fail@plt+0xfad4>
   21928:	sub	r4, fp, #32
   2192c:	sub	r6, fp, #48	; 0x30
   21930:	mov	r1, r8
   21934:	mov	r3, #1
   21938:	mov	r0, r4
   2193c:	mov	r2, r6
   21940:	bl	2c208 <__assert_fail@plt+0x1a340>
   21944:	str	r0, [r8, #40]	; 0x28
   21948:	mov	r0, r4
   2194c:	mov	r1, r8
   21950:	mov	r2, r6
   21954:	mov	r3, #2
   21958:	bl	2c208 <__assert_fail@plt+0x1a340>
   2195c:	str	r0, [r8, #44]	; 0x2c
   21960:	mov	r0, r4
   21964:	mov	r1, r8
   21968:	mov	r2, r6
   2196c:	mov	r3, #6
   21970:	bl	2c208 <__assert_fail@plt+0x1a340>
   21974:	str	r0, [r8, #48]	; 0x30
   21978:	ldr	r1, [r8, #40]	; 0x28
   2197c:	cmp	r1, #0
   21980:	cmpne	r0, #0
   21984:	bne	21990 <__assert_fail@plt+0xfac8>
   21988:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2198c:	b	219a8 <__assert_fail@plt+0xfae0>
   21990:	ldr	r0, [r8, #44]	; 0x2c
   21994:	cmp	r0, #0
   21998:	beq	21988 <__assert_fail@plt+0xfac0>
   2199c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   219a0:	bl	17c10 <__assert_fail@plt+0x5d48>
   219a4:	mov	r0, #0
   219a8:	str	r0, [fp, #-52]	; 0xffffffcc
   219ac:	ldr	r5, [sl]
   219b0:	ldr	r0, [r5, #56]	; 0x38
   219b4:	cmp	r0, #0
   219b8:	beq	219d0 <__assert_fail@plt+0xfb08>
   219bc:	ldr	r4, [r0]
   219c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   219c4:	cmp	r4, #0
   219c8:	mov	r0, r4
   219cc:	bne	219bc <__assert_fail@plt+0xfaf4>
   219d0:	mov	r0, #31
   219d4:	mov	r4, #0
   219d8:	str	r0, [r5, #64]	; 0x40
   219dc:	str	r4, [r5, #52]	; 0x34
   219e0:	str	r4, [r5, #56]	; 0x38
   219e4:	ldr	r0, [r5, #16]
   219e8:	bl	17c10 <__assert_fail@plt+0x5d48>
   219ec:	str	r4, [r5, #16]
   219f0:	ldr	r0, [sp, #40]	; 0x28
   219f4:	bl	17c10 <__assert_fail@plt+0x5d48>
   219f8:	ldr	r0, [sp, #44]	; 0x2c
   219fc:	bl	17c10 <__assert_fail@plt+0x5d48>
   21a00:	ldrb	r0, [sp, #107]	; 0x6b
   21a04:	cmp	r0, #0
   21a08:	beq	21a14 <__assert_fail@plt+0xfb4c>
   21a0c:	ldr	r0, [sp, #36]	; 0x24
   21a10:	bl	17c10 <__assert_fail@plt+0x5d48>
   21a14:	ldr	r0, [fp, #-52]	; 0xffffffcc
   21a18:	cmp	r0, #0
   21a1c:	bne	21a4c <__assert_fail@plt+0xfb84>
   21a20:	mov	r0, r4
   21a24:	sub	sp, fp, #28
   21a28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a2c:	ldr	sl, [sp, #16]
   21a30:	mov	r0, #12
   21a34:	ldr	r9, [sp, #20]
   21a38:	b	20bf4 <__assert_fail@plt+0xed2c>
   21a3c:	ldr	r8, [sp, #20]
   21a40:	b	219a8 <__assert_fail@plt+0xfae0>
   21a44:	ldrb	r2, [r1, #88]	; 0x58
   21a48:	b	215e0 <__assert_fail@plt+0xf718>
   21a4c:	ldr	r0, [sp, #8]
   21a50:	cmp	r0, #0
   21a54:	beq	21a60 <__assert_fail@plt+0xfb98>
   21a58:	add	r0, r8, #136	; 0x88
   21a5c:	bl	11a48 <pthread_mutex_destroy@plt>
   21a60:	mov	r0, r8
   21a64:	b	20c78 <__assert_fail@plt+0xedb0>
   21a68:	mov	r0, #0
   21a6c:	str	r0, [fp, #-48]	; 0xffffffd0
   21a70:	str	r0, [fp, #-44]	; 0xffffffd4
   21a74:	mov	r0, #12
   21a78:	str	r0, [fp, #-32]	; 0xffffffe0
   21a7c:	b	219a8 <__assert_fail@plt+0xfae0>
   21a80:	bl	11e8c <abort@plt>
   21a84:	movw	r2, #54252	; 0xd3ec
   21a88:	movt	r2, #4
   21a8c:	ldr	r1, [r2]
   21a90:	str	r0, [r2]
   21a94:	mov	r0, r1
   21a98:	bx	lr
   21a9c:	push	{r4, r5, r6, sl, fp, lr}
   21aa0:	add	fp, sp, #16
   21aa4:	ldr	r5, [r0, #16]
   21aa8:	ldr	r6, [r0]
   21aac:	mov	r4, r0
   21ab0:	mov	r1, #0
   21ab4:	mov	r2, #256	; 0x100
   21ab8:	mov	r0, r5
   21abc:	bl	11d0c <memset@plt>
   21ac0:	ldr	r1, [r6, #36]	; 0x24
   21ac4:	mov	r0, r4
   21ac8:	mov	r2, r5
   21acc:	bl	21b34 <__assert_fail@plt+0xfc6c>
   21ad0:	ldr	r0, [r6, #36]	; 0x24
   21ad4:	ldr	r1, [r6, #40]	; 0x28
   21ad8:	cmp	r0, r1
   21adc:	beq	21af0 <__assert_fail@plt+0xfc28>
   21ae0:	mov	r0, r4
   21ae4:	mov	r2, r5
   21ae8:	bl	21b34 <__assert_fail@plt+0xfc6c>
   21aec:	ldr	r0, [r6, #36]	; 0x24
   21af0:	ldr	r1, [r6, #44]	; 0x2c
   21af4:	cmp	r0, r1
   21af8:	beq	21b0c <__assert_fail@plt+0xfc44>
   21afc:	mov	r0, r4
   21b00:	mov	r2, r5
   21b04:	bl	21b34 <__assert_fail@plt+0xfc6c>
   21b08:	ldr	r0, [r6, #36]	; 0x24
   21b0c:	ldr	r1, [r6, #48]	; 0x30
   21b10:	cmp	r0, r1
   21b14:	movne	r0, r4
   21b18:	movne	r2, r5
   21b1c:	blne	21b34 <__assert_fail@plt+0xfc6c>
   21b20:	ldrb	r0, [r4, #28]
   21b24:	orr	r0, r0, #8
   21b28:	strb	r0, [r4, #28]
   21b2c:	mov	r0, #0
   21b30:	pop	{r4, r5, r6, sl, fp, pc}
   21b34:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21b38:	add	fp, sp, #28
   21b3c:	sub	sp, sp, #348	; 0x15c
   21b40:	ldr	r3, [r0]
   21b44:	mov	r8, r0
   21b48:	mov	sl, r2
   21b4c:	mov	r2, #0
   21b50:	str	r2, [sp, #40]	; 0x28
   21b54:	ldr	r0, [r3, #92]	; 0x5c
   21b58:	cmp	r0, #1
   21b5c:	bne	21b6c <__assert_fail@plt+0xfca4>
   21b60:	ldrb	r0, [r8, #14]
   21b64:	ubfx	r0, r0, #6, #1
   21b68:	str	r0, [sp, #40]	; 0x28
   21b6c:	ldr	r0, [r1, #8]
   21b70:	cmp	r0, #1
   21b74:	blt	2261c <__assert_fail@plt+0x10754>
   21b78:	mvn	r0, #5
   21b7c:	mov	r7, #0
   21b80:	mov	lr, #1
   21b84:	mov	r2, #0
   21b88:	str	r8, [sp, #28]
   21b8c:	str	sl, [sp, #68]	; 0x44
   21b90:	str	r1, [sp, #48]	; 0x30
   21b94:	str	r3, [sp, #64]	; 0x40
   21b98:	sub	r0, r0, sl
   21b9c:	str	r0, [sp, #24]
   21ba0:	add	r0, sl, #7
   21ba4:	str	r0, [sp, #20]
   21ba8:	add	r0, sl, #5
   21bac:	str	r0, [sp, #16]
   21bb0:	add	r0, sl, #4
   21bb4:	str	r0, [sp, #12]
   21bb8:	add	r0, sl, #3
   21bbc:	str	r0, [sp, #8]
   21bc0:	add	r0, sp, #72	; 0x48
   21bc4:	add	r0, r0, #1
   21bc8:	str	r0, [sp, #4]
   21bcc:	b	21bf0 <__assert_fail@plt+0xfd28>
   21bd0:	mov	lr, #1
   21bd4:	ldr	r1, [sp, #48]	; 0x30
   21bd8:	ldr	r2, [sp, #52]	; 0x34
   21bdc:	ldr	r3, [sp, #64]	; 0x40
   21be0:	ldr	r0, [r1, #8]
   21be4:	add	r2, r2, #1
   21be8:	cmp	r2, r0
   21bec:	bge	2261c <__assert_fail@plt+0x10754>
   21bf0:	ldr	r0, [r1, #12]
   21bf4:	str	r2, [sp, #52]	; 0x34
   21bf8:	ldr	r6, [r0, r2, lsl #2]
   21bfc:	ldr	r2, [r3]
   21c00:	add	r0, r2, r6, lsl #3
   21c04:	ldrb	r4, [r0, #4]
   21c08:	sub	r0, r4, #1
   21c0c:	cmp	r0, #6
   21c10:	bhi	21bd4 <__assert_fail@plt+0xfd0c>
   21c14:	add	r1, pc, #0
   21c18:	ldr	pc, [r1, r0, lsl #2]
   21c1c:	andeq	r1, r2, r8, lsr ip
   21c20:	strdeq	r2, [r2], -r8
   21c24:	andeq	r1, r2, r0, asr #26
   21c28:	ldrdeq	r1, [r2], -r4
   21c2c:	strdeq	r2, [r2], -r8
   21c30:	strdeq	r1, [r2], -r8
   21c34:	strdeq	r2, [r2], -r8
   21c38:	ldrb	r4, [r2, r6, lsl #3]
   21c3c:	ldr	r0, [sp, #40]	; 0x28
   21c40:	cmp	r0, #0
   21c44:	strb	lr, [sl, r4]
   21c48:	beq	21c60 <__assert_fail@plt+0xfd98>
   21c4c:	bl	11c40 <__ctype_tolower_loc@plt>
   21c50:	ldr	r0, [r0]
   21c54:	mov	lr, #1
   21c58:	ldr	r0, [r0, r4, lsl #2]
   21c5c:	strb	lr, [sl, r0]
   21c60:	ldrb	r0, [r8, #14]
   21c64:	tst	r0, #64	; 0x40
   21c68:	beq	21bd4 <__assert_fail@plt+0xfd0c>
   21c6c:	ldr	r0, [sp, #64]	; 0x40
   21c70:	ldr	r0, [r0, #92]	; 0x5c
   21c74:	cmp	r0, #2
   21c78:	blt	21bd4 <__assert_fail@plt+0xfd0c>
   21c7c:	ldr	ip, [sp, #64]	; 0x40
   21c80:	add	r1, r6, #1
   21c84:	movw	r4, #1
   21c88:	mov	r9, #1
   21c8c:	add	r5, sp, #72	; 0x48
   21c90:	movt	r4, #32
   21c94:	ldr	r0, [ip]
   21c98:	ldrb	r0, [r0, r6, lsl #3]
   21c9c:	strb	r0, [sp, #72]	; 0x48
   21ca0:	ldr	r0, [ip, #8]
   21ca4:	cmp	r1, r0
   21ca8:	ldr	r0, [sp, #4]
   21cac:	bcs	21cf0 <__assert_fail@plt+0xfe28>
   21cb0:	ldr	r0, [sp, #4]
   21cb4:	ldr	r1, [ip]
   21cb8:	add	r3, r4, #254	; 0xfe
   21cbc:	add	r1, r1, r6, lsl #3
   21cc0:	ldr	r2, [r1, #12]
   21cc4:	and	r2, r2, r3
   21cc8:	cmp	r2, r4
   21ccc:	bne	21cf0 <__assert_fail@plt+0xfe28>
   21cd0:	ldrb	r1, [r1, #8]
   21cd4:	add	r3, r6, #2
   21cd8:	strb	r1, [r0], #1
   21cdc:	add	r1, r6, #1
   21ce0:	ldr	r2, [ip, #8]
   21ce4:	mov	r6, r1
   21ce8:	cmp	r3, r2
   21cec:	bcc	21cb4 <__assert_fail@plt+0xfdec>
   21cf0:	sub	r4, r0, r5
   21cf4:	sub	r0, fp, #36	; 0x24
   21cf8:	mov	r1, r5
   21cfc:	sub	r3, fp, #48	; 0x30
   21d00:	str	r7, [fp, #-44]	; 0xffffffd4
   21d04:	str	r7, [fp, #-48]	; 0xffffffd0
   21d08:	mov	r2, r4
   21d0c:	bl	3966c <__assert_fail@plt+0x277a4>
   21d10:	cmp	r0, r4
   21d14:	bne	21bd0 <__assert_fail@plt+0xfd08>
   21d18:	ldr	r0, [fp, #-36]	; 0xffffffdc
   21d1c:	bl	11ad8 <towlower@plt>
   21d20:	mov	r1, r0
   21d24:	mov	r0, r5
   21d28:	sub	r2, fp, #48	; 0x30
   21d2c:	bl	11a0c <wcrtomb@plt>
   21d30:	cmn	r0, #1
   21d34:	ldrbne	r0, [sp, #72]	; 0x48
   21d38:	strbne	r9, [sl, r0]
   21d3c:	b	21bd0 <__assert_fail@plt+0xfd08>
   21d40:	ldr	r0, [sp, #40]	; 0x28
   21d44:	cmp	r0, #0
   21d48:	beq	21fdc <__assert_fail@plt+0x10114>
   21d4c:	ldr	r0, [r2, r6, lsl #3]
   21d50:	ldr	r1, [sp, #16]
   21d54:	ldr	r2, [sp, #12]
   21d58:	ldr	r7, [sp, #8]
   21d5c:	mov	lr, #0
   21d60:	mov	r3, #4
   21d64:	str	r6, [sp, #44]	; 0x2c
   21d68:	ldr	r0, [r0]
   21d6c:	str	r0, [sp, #60]	; 0x3c
   21d70:	ldr	r0, [sp, #20]
   21d74:	b	21da0 <__assert_fail@plt+0xfed8>
   21d78:	ldr	r1, [sp, #68]	; 0x44
   21d7c:	strb	r2, [r1, r0]
   21d80:	add	lr, r8, #1
   21d84:	add	r0, r6, #1
   21d88:	add	r1, r5, #1
   21d8c:	add	r2, r9, #1
   21d90:	add	r7, sl, #1
   21d94:	add	r3, r4, #4
   21d98:	cmp	lr, #32
   21d9c:	beq	22184 <__assert_fail@plt+0x102bc>
   21da0:	mov	r6, r0
   21da4:	ldr	r0, [sp, #60]	; 0x3c
   21da8:	mov	r9, r2
   21dac:	mov	r2, #1
   21db0:	mov	r8, lr
   21db4:	mov	r4, r3
   21db8:	mov	sl, r7
   21dbc:	mov	r5, r1
   21dc0:	tst	r0, r2, lsl lr
   21dc4:	beq	21d80 <__assert_fail@plt+0xfeb8>
   21dc8:	ldr	r0, [sp, #68]	; 0x44
   21dcc:	strb	r2, [r0, r8]
   21dd0:	add	r0, r8, #128	; 0x80
   21dd4:	lsr	r0, r0, #7
   21dd8:	cmp	r0, #2
   21ddc:	mov	r0, r8
   21de0:	bhi	21d78 <__assert_fail@plt+0xfeb0>
   21de4:	bl	11c40 <__ctype_tolower_loc@plt>
   21de8:	ldr	r0, [r0]
   21dec:	mov	r2, #1
   21df0:	ldr	r0, [r0, r8, lsl #2]
   21df4:	b	21d78 <__assert_fail@plt+0xfeb0>
   21df8:	ldr	r0, [sp, #64]	; 0x40
   21dfc:	ldr	r4, [r2, r6, lsl #3]
   21e00:	ldr	r0, [r0, #92]	; 0x5c
   21e04:	cmp	r0, #2
   21e08:	blt	21e80 <__assert_fail@plt+0xffb8>
   21e0c:	ldr	r0, [r4, #36]	; 0x24
   21e10:	cmp	r0, #0
   21e14:	bne	21e30 <__assert_fail@plt+0xff68>
   21e18:	ldrb	r0, [r4, #16]
   21e1c:	tst	r0, #1
   21e20:	bne	21e30 <__assert_fail@plt+0xff68>
   21e24:	ldr	r0, [r4, #32]
   21e28:	cmp	r0, #0
   21e2c:	beq	21e80 <__assert_fail@plt+0xffb8>
   21e30:	add	r4, sp, #72	; 0x48
   21e34:	sub	r5, fp, #48	; 0x30
   21e38:	strb	r7, [fp, #-48]	; 0xffffffd0
   21e3c:	mov	r0, #0
   21e40:	mov	r1, r5
   21e44:	mov	r2, #1
   21e48:	mov	r3, r4
   21e4c:	str	r7, [sp, #76]	; 0x4c
   21e50:	str	r7, [sp, #72]	; 0x48
   21e54:	bl	3966c <__assert_fail@plt+0x277a4>
   21e58:	ldrb	r1, [fp, #-48]	; 0xffffffd0
   21e5c:	cmn	r0, #2
   21e60:	mov	lr, #1
   21e64:	add	r0, r1, #1
   21e68:	strbeq	lr, [sl, r1]
   21e6c:	uxtb	r1, r0
   21e70:	strb	r0, [fp, #-48]	; 0xffffffd0
   21e74:	cmp	r1, r0
   21e78:	beq	21e3c <__assert_fail@plt+0xff74>
   21e7c:	b	21bd4 <__assert_fail@plt+0xfd0c>
   21e80:	ldr	r0, [r4, #20]
   21e84:	cmp	r0, #1
   21e88:	blt	21bd4 <__assert_fail@plt+0xfd0c>
   21e8c:	ldr	r0, [sp, #40]	; 0x28
   21e90:	mov	r5, #0
   21e94:	cmp	r0, #0
   21e98:	bne	21eb4 <__assert_fail@plt+0xffec>
   21e9c:	b	21f5c <__assert_fail@plt+0x10094>
   21ea0:	ldr	r0, [r4, #20]
   21ea4:	add	r5, r5, #1
   21ea8:	mov	r7, #0
   21eac:	cmp	r5, r0
   21eb0:	bge	21bd4 <__assert_fail@plt+0xfd0c>
   21eb4:	str	r7, [fp, #-44]	; 0xffffffd4
   21eb8:	str	r7, [fp, #-48]	; 0xffffffd0
   21ebc:	sub	r9, fp, #48	; 0x30
   21ec0:	add	r7, sp, #72	; 0x48
   21ec4:	ldr	r0, [r4]
   21ec8:	mov	r2, r9
   21ecc:	ldr	r1, [r0, r5, lsl #2]
   21ed0:	mov	r0, r7
   21ed4:	bl	11a0c <wcrtomb@plt>
   21ed8:	mov	lr, #1
   21edc:	cmn	r0, #1
   21ee0:	beq	21f00 <__assert_fail@plt+0x10038>
   21ee4:	ldrb	r6, [sp, #72]	; 0x48
   21ee8:	strb	lr, [sl, r6]
   21eec:	bl	11c40 <__ctype_tolower_loc@plt>
   21ef0:	ldr	r0, [r0]
   21ef4:	mov	lr, #1
   21ef8:	ldr	r0, [r0, r6, lsl #2]
   21efc:	strb	lr, [sl, r0]
   21f00:	ldrb	r0, [r8, #14]
   21f04:	tst	r0, #64	; 0x40
   21f08:	beq	21ea0 <__assert_fail@plt+0xffd8>
   21f0c:	ldr	r0, [sp, #64]	; 0x40
   21f10:	ldr	r0, [r0, #92]	; 0x5c
   21f14:	cmp	r0, #2
   21f18:	blt	21ea0 <__assert_fail@plt+0xffd8>
   21f1c:	ldr	r0, [r4]
   21f20:	ldr	r0, [r0, r5, lsl #2]
   21f24:	bl	11ad8 <towlower@plt>
   21f28:	mov	r1, r0
   21f2c:	mov	r0, r7
   21f30:	mov	r2, r9
   21f34:	bl	11a0c <wcrtomb@plt>
   21f38:	cmn	r0, #1
   21f3c:	mov	lr, #1
   21f40:	ldrbne	r0, [sp, #72]	; 0x48
   21f44:	strbne	lr, [sl, r0]
   21f48:	b	21ea0 <__assert_fail@plt+0xffd8>
   21f4c:	ldr	r0, [r4, #20]
   21f50:	add	r5, r5, #1
   21f54:	cmp	r5, r0
   21f58:	bge	21bd4 <__assert_fail@plt+0xfd0c>
   21f5c:	str	r7, [fp, #-44]	; 0xffffffd4
   21f60:	str	r7, [fp, #-48]	; 0xffffffd0
   21f64:	sub	r9, fp, #48	; 0x30
   21f68:	add	r6, sp, #72	; 0x48
   21f6c:	ldr	r0, [r4]
   21f70:	mov	r2, r9
   21f74:	ldr	r1, [r0, r5, lsl #2]
   21f78:	mov	r0, r6
   21f7c:	bl	11a0c <wcrtomb@plt>
   21f80:	cmn	r0, #1
   21f84:	mov	lr, #1
   21f88:	ldrbne	r0, [sp, #72]	; 0x48
   21f8c:	strbne	lr, [sl, r0]
   21f90:	ldrb	r0, [r8, #14]
   21f94:	tst	r0, #64	; 0x40
   21f98:	beq	21f4c <__assert_fail@plt+0x10084>
   21f9c:	ldr	r0, [sp, #64]	; 0x40
   21fa0:	ldr	r0, [r0, #92]	; 0x5c
   21fa4:	cmp	r0, #2
   21fa8:	blt	21f4c <__assert_fail@plt+0x10084>
   21fac:	ldr	r0, [r4]
   21fb0:	ldr	r0, [r0, r5, lsl #2]
   21fb4:	bl	11ad8 <towlower@plt>
   21fb8:	mov	r1, r0
   21fbc:	mov	r0, r6
   21fc0:	mov	r2, r9
   21fc4:	bl	11a0c <wcrtomb@plt>
   21fc8:	cmn	r0, #1
   21fcc:	mov	lr, #1
   21fd0:	ldrbne	r0, [sp, #72]	; 0x48
   21fd4:	strbne	lr, [sl, r0]
   21fd8:	b	21f4c <__assert_fail@plt+0x10084>
   21fdc:	mov	r0, #0
   21fe0:	mov	r1, #31
   21fe4:	ldr	r2, [r2, r6, lsl #3]
   21fe8:	ldr	r2, [r2, r0]
   21fec:	tst	r2, #1
   21ff0:	addne	r3, sl, r1
   21ff4:	strbne	lr, [r3, #-31]	; 0xffffffe1
   21ff8:	tst	r2, #2
   21ffc:	addne	r3, sl, r0, lsl #3
   22000:	strbne	lr, [r3, #1]
   22004:	tst	r2, #4
   22008:	addne	r3, sl, r0, lsl #3
   2200c:	strbne	lr, [r3, #2]
   22010:	tst	r2, #8
   22014:	addne	r3, sl, r0, lsl #3
   22018:	strbne	lr, [r3, #3]
   2201c:	tst	r2, #16
   22020:	addne	r3, sl, r0, lsl #3
   22024:	strbne	lr, [r3, #4]
   22028:	tst	r2, #32
   2202c:	addne	r3, sl, r0, lsl #3
   22030:	strbne	lr, [r3, #5]
   22034:	tst	r2, #64	; 0x40
   22038:	addne	r3, sl, r0, lsl #3
   2203c:	strbne	lr, [r3, #6]
   22040:	tst	r2, #128	; 0x80
   22044:	addne	r3, sl, r0, lsl #3
   22048:	strbne	lr, [r3, #7]
   2204c:	tst	r2, #256	; 0x100
   22050:	addne	r3, sl, r0, lsl #3
   22054:	strbne	lr, [r3, #8]
   22058:	tst	r2, #512	; 0x200
   2205c:	addne	r3, sl, r0, lsl #3
   22060:	strbne	lr, [r3, #9]
   22064:	tst	r2, #1024	; 0x400
   22068:	addne	r3, sl, r0, lsl #3
   2206c:	strbne	lr, [r3, #10]
   22070:	tst	r2, #2048	; 0x800
   22074:	addne	r3, sl, r0, lsl #3
   22078:	strbne	lr, [r3, #11]
   2207c:	tst	r2, #4096	; 0x1000
   22080:	addne	r3, sl, r0, lsl #3
   22084:	strbne	lr, [r3, #12]
   22088:	tst	r2, #8192	; 0x2000
   2208c:	addne	r3, sl, r0, lsl #3
   22090:	strbne	lr, [r3, #13]
   22094:	tst	r2, #16384	; 0x4000
   22098:	addne	r3, sl, r0, lsl #3
   2209c:	strbne	lr, [r3, #14]
   220a0:	tst	r2, #32768	; 0x8000
   220a4:	addne	r3, sl, r0, lsl #3
   220a8:	strbne	lr, [r3, #15]
   220ac:	tst	r2, #65536	; 0x10000
   220b0:	addne	r3, sl, r0, lsl #3
   220b4:	strbne	lr, [r3, #16]
   220b8:	tst	r2, #131072	; 0x20000
   220bc:	addne	r3, sl, r0, lsl #3
   220c0:	strbne	lr, [r3, #17]
   220c4:	tst	r2, #262144	; 0x40000
   220c8:	addne	r3, sl, r0, lsl #3
   220cc:	strbne	lr, [r3, #18]
   220d0:	tst	r2, #524288	; 0x80000
   220d4:	addne	r3, sl, r0, lsl #3
   220d8:	strbne	lr, [r3, #19]
   220dc:	tst	r2, #1048576	; 0x100000
   220e0:	addne	r3, sl, r0, lsl #3
   220e4:	strbne	lr, [r3, #20]
   220e8:	tst	r2, #2097152	; 0x200000
   220ec:	addne	r3, sl, r0, lsl #3
   220f0:	strbne	lr, [r3, #21]
   220f4:	tst	r2, #4194304	; 0x400000
   220f8:	addne	r3, sl, r0, lsl #3
   220fc:	strbne	lr, [r3, #22]
   22100:	tst	r2, #8388608	; 0x800000
   22104:	addne	r3, sl, r0, lsl #3
   22108:	strbne	lr, [r3, #23]
   2210c:	tst	r2, #16777216	; 0x1000000
   22110:	addne	r3, sl, r0, lsl #3
   22114:	strbne	lr, [r3, #24]
   22118:	tst	r2, #33554432	; 0x2000000
   2211c:	addne	r3, sl, r0, lsl #3
   22120:	strbne	lr, [r3, #25]
   22124:	tst	r2, #67108864	; 0x4000000
   22128:	addne	r3, sl, r0, lsl #3
   2212c:	strbne	lr, [r3, #26]
   22130:	tst	r2, #134217728	; 0x8000000
   22134:	addne	r3, sl, r0, lsl #3
   22138:	strbne	lr, [r3, #27]
   2213c:	tst	r2, #268435456	; 0x10000000
   22140:	addne	r3, sl, r0, lsl #3
   22144:	strbne	lr, [r3, #28]
   22148:	tst	r2, #536870912	; 0x20000000
   2214c:	addne	r3, sl, r0, lsl #3
   22150:	strbne	lr, [r3, #29]
   22154:	tst	r2, #1073741824	; 0x40000000
   22158:	addne	r3, sl, r0, lsl #3
   2215c:	strbne	lr, [r3, #30]
   22160:	cmn	r2, #1
   22164:	strble	lr, [sl, r1]
   22168:	cmp	r0, #28
   2216c:	beq	21bd4 <__assert_fail@plt+0xfd0c>
   22170:	ldr	r2, [sp, #64]	; 0x40
   22174:	add	r1, r1, #32
   22178:	add	r0, r0, #4
   2217c:	ldr	r2, [r2]
   22180:	b	21fe4 <__assert_fail@plt+0x1011c>
   22184:	ldr	r0, [sp, #68]	; 0x44
   22188:	ldr	r1, [sp, #44]	; 0x2c
   2218c:	mov	ip, r5
   22190:	mov	r5, r8
   22194:	str	r8, [sp, #36]	; 0x24
   22198:	add	r3, r0, lr
   2219c:	ldr	r0, [sp, #64]	; 0x40
   221a0:	ldr	r0, [r0]
   221a4:	ldr	r0, [r0, r1, lsl #3]
   221a8:	mov	r1, ip
   221ac:	ldr	r0, [r0, #4]
   221b0:	str	r0, [sp, #60]	; 0x3c
   221b4:	mov	r0, #0
   221b8:	b	22220 <__assert_fail@plt+0x10358>
   221bc:	mov	r9, r7
   221c0:	str	sl, [sp, #56]	; 0x38
   221c4:	mov	r6, ip
   221c8:	mov	sl, lr
   221cc:	mov	r7, r3
   221d0:	bl	11c40 <__ctype_tolower_loc@plt>
   221d4:	ldr	r0, [r0]
   221d8:	mov	lr, sl
   221dc:	ldr	sl, [sp, #56]	; 0x38
   221e0:	ldr	r1, [sp, #68]	; 0x44
   221e4:	mov	r3, r7
   221e8:	mov	r7, r9
   221ec:	mov	ip, r6
   221f0:	mov	r2, #1
   221f4:	ldr	r0, [r0, r4]
   221f8:	strb	r2, [r1, r0]
   221fc:	add	r0, r8, #1
   22200:	mov	r2, sl
   22204:	add	r6, ip, #1
   22208:	add	r1, r7, #1
   2220c:	add	r9, r5, #1
   22210:	add	sl, sl, #1
   22214:	add	r4, r4, #4
   22218:	cmp	r0, #32
   2221c:	beq	22268 <__assert_fail@plt+0x103a0>
   22220:	mov	r7, r1
   22224:	ldr	r1, [sp, #60]	; 0x3c
   22228:	mov	r8, r0
   2222c:	mov	r0, #1
   22230:	mov	r5, r9
   22234:	mov	ip, r6
   22238:	tst	r1, r0, lsl r8
   2223c:	beq	221fc <__assert_fail@plt+0x10334>
   22240:	strb	r0, [r3, r8]
   22244:	add	r0, lr, r8
   22248:	add	r0, r0, #128	; 0x80
   2224c:	lsr	r0, r0, #7
   22250:	cmp	r0, #2
   22254:	bls	221bc <__assert_fail@plt+0x102f4>
   22258:	ldr	r1, [sp, #68]	; 0x44
   2225c:	add	r0, lr, r8
   22260:	mov	r2, #1
   22264:	b	221f8 <__assert_fail@plt+0x10330>
   22268:	add	r9, lr, r0
   2226c:	ldr	r0, [sp, #64]	; 0x40
   22270:	ldr	r1, [sp, #44]	; 0x2c
   22274:	mov	lr, #1
   22278:	mov	r6, r2
   2227c:	str	r8, [sp, #60]	; 0x3c
   22280:	ldr	r0, [r0]
   22284:	ldr	r0, [r0, r1, lsl #3]
   22288:	ldr	sl, [r0, #8]
   2228c:	mov	r0, #0
   22290:	b	222bc <__assert_fail@plt+0x103f4>
   22294:	ldr	r7, [sp, #68]	; 0x44
   22298:	strb	lr, [r7, r0]
   2229c:	add	r0, r1, #1
   222a0:	add	ip, r2, #1
   222a4:	add	r7, r3, #1
   222a8:	add	r5, r4, #1
   222ac:	add	r6, r8, #1
   222b0:	add	r9, r9, #1
   222b4:	cmp	r0, #32
   222b8:	beq	22328 <__assert_fail@plt+0x10460>
   222bc:	tst	sl, lr, lsl r0
   222c0:	mov	r1, r0
   222c4:	mov	r8, r6
   222c8:	mov	r4, r5
   222cc:	mov	r3, r7
   222d0:	mov	r2, ip
   222d4:	beq	2229c <__assert_fail@plt+0x103d4>
   222d8:	ldr	r0, [sp, #68]	; 0x44
   222dc:	strb	lr, [r0, r9]
   222e0:	add	r0, r9, #128	; 0x80
   222e4:	lsr	r0, r0, #7
   222e8:	cmp	r0, #2
   222ec:	mov	r0, r9
   222f0:	bhi	22294 <__assert_fail@plt+0x103cc>
   222f4:	mov	r6, sl
   222f8:	mov	r7, r1
   222fc:	mov	r5, r2
   22300:	mov	sl, r3
   22304:	bl	11c40 <__ctype_tolower_loc@plt>
   22308:	ldr	r0, [r0]
   2230c:	mov	r3, sl
   22310:	mov	sl, r6
   22314:	mov	r2, r5
   22318:	mov	r1, r7
   2231c:	mov	lr, #1
   22320:	ldr	r0, [r0, r9, lsl #2]
   22324:	b	22294 <__assert_fail@plt+0x103cc>
   22328:	ldr	r0, [sp, #64]	; 0x40
   2232c:	str	r1, [sp, #56]	; 0x38
   22330:	ldr	r1, [sp, #44]	; 0x2c
   22334:	ldr	r0, [r0]
   22338:	ldr	r0, [r0, r1, lsl #3]
   2233c:	ldr	r5, [r0, #12]
   22340:	mov	r0, #0
   22344:	b	22374 <__assert_fail@plt+0x104ac>
   22348:	ldr	r1, [sp, #68]	; 0x44
   2234c:	strb	lr, [r1, r0]
   22350:	mov	r1, r4
   22354:	add	r0, r1, #1
   22358:	add	r2, sl, #1
   2235c:	add	r3, r7, #1
   22360:	add	r4, r6, #1
   22364:	add	r8, r8, #1
   22368:	add	r9, r9, #1
   2236c:	cmp	r0, #32
   22370:	beq	223bc <__assert_fail@plt+0x104f4>
   22374:	tst	r5, lr, lsl r0
   22378:	mov	r1, r0
   2237c:	mov	r6, r4
   22380:	mov	r7, r3
   22384:	mov	sl, r2
   22388:	beq	22354 <__assert_fail@plt+0x1048c>
   2238c:	add	r0, r9, #128	; 0x80
   22390:	mov	r4, r1
   22394:	strb	lr, [r8]
   22398:	lsr	r0, r0, #7
   2239c:	cmp	r0, #2
   223a0:	mov	r0, r9
   223a4:	bhi	22348 <__assert_fail@plt+0x10480>
   223a8:	bl	11c40 <__ctype_tolower_loc@plt>
   223ac:	ldr	r0, [r0]
   223b0:	mov	lr, #1
   223b4:	ldr	r0, [r0, r9, lsl #2]
   223b8:	b	22348 <__assert_fail@plt+0x10480>
   223bc:	ldr	r0, [sp, #64]	; 0x40
   223c0:	str	r1, [sp, #32]
   223c4:	ldr	r1, [sp, #44]	; 0x2c
   223c8:	ldr	r0, [r0]
   223cc:	ldr	r0, [r0, r1, lsl #3]
   223d0:	ldr	r2, [r0, #16]
   223d4:	mov	r0, #0
   223d8:	b	22400 <__assert_fail@plt+0x10538>
   223dc:	ldr	r1, [sp, #68]	; 0x44
   223e0:	strb	lr, [r1, r0]
   223e4:	add	r0, r8, #1
   223e8:	add	sl, r5, #1
   223ec:	add	r7, r4, #1
   223f0:	add	r6, r6, #1
   223f4:	add	r9, r9, #1
   223f8:	cmp	r0, #32
   223fc:	beq	22448 <__assert_fail@plt+0x10580>
   22400:	tst	r2, lr, lsl r0
   22404:	mov	r8, r0
   22408:	mov	r4, r7
   2240c:	mov	r5, sl
   22410:	beq	223e4 <__assert_fail@plt+0x1051c>
   22414:	add	r0, r9, #128	; 0x80
   22418:	strb	lr, [r6]
   2241c:	lsr	r0, r0, #7
   22420:	cmp	r0, #2
   22424:	mov	r0, r9
   22428:	bhi	223dc <__assert_fail@plt+0x10514>
   2242c:	mov	r7, r2
   22430:	bl	11c40 <__ctype_tolower_loc@plt>
   22434:	ldr	r0, [r0]
   22438:	mov	r2, r7
   2243c:	mov	lr, #1
   22440:	ldr	r0, [r0, r9, lsl #2]
   22444:	b	223dc <__assert_fail@plt+0x10514>
   22448:	ldr	r0, [sp, #64]	; 0x40
   2244c:	ldr	r1, [sp, #44]	; 0x2c
   22450:	ldr	r0, [r0]
   22454:	ldr	r0, [r0, r1, lsl #3]
   22458:	ldr	sl, [r0, #20]
   2245c:	mov	r0, #0
   22460:	tst	sl, lr, lsl r0
   22464:	mov	r7, r0
   22468:	mov	r6, r5
   2246c:	bne	224a4 <__assert_fail@plt+0x105dc>
   22470:	b	2247c <__assert_fail@plt+0x105b4>
   22474:	ldr	r1, [sp, #68]	; 0x44
   22478:	strb	lr, [r1, r0]
   2247c:	add	r0, r7, #1
   22480:	add	r5, r6, #1
   22484:	add	r4, r4, #1
   22488:	add	r9, r9, #1
   2248c:	cmp	r0, #32
   22490:	beq	224d0 <__assert_fail@plt+0x10608>
   22494:	tst	sl, lr, lsl r0
   22498:	mov	r7, r0
   2249c:	mov	r6, r5
   224a0:	beq	2247c <__assert_fail@plt+0x105b4>
   224a4:	add	r0, r9, #128	; 0x80
   224a8:	strb	lr, [r4]
   224ac:	lsr	r0, r0, #7
   224b0:	cmp	r0, #2
   224b4:	mov	r0, r9
   224b8:	bhi	22474 <__assert_fail@plt+0x105ac>
   224bc:	bl	11c40 <__ctype_tolower_loc@plt>
   224c0:	ldr	r0, [r0]
   224c4:	mov	lr, #1
   224c8:	ldr	r0, [r0, r9, lsl #2]
   224cc:	b	22474 <__assert_fail@plt+0x105ac>
   224d0:	ldr	r0, [sp, #24]
   224d4:	ldr	r1, [sp, #36]	; 0x24
   224d8:	ldr	sl, [sp, #68]	; 0x44
   224dc:	sub	r0, r0, r1
   224e0:	ldr	r1, [sp, #60]	; 0x3c
   224e4:	sub	r0, r0, r1
   224e8:	ldr	r1, [sp, #56]	; 0x38
   224ec:	sub	r0, r0, r1
   224f0:	ldr	r1, [sp, #32]
   224f4:	sub	r0, r0, r1
   224f8:	ldr	r1, [sp, #44]	; 0x2c
   224fc:	sub	r0, r0, r8
   22500:	sub	r5, r0, r7
   22504:	ldr	r0, [sp, #64]	; 0x40
   22508:	mov	r7, #0
   2250c:	ldr	r0, [r0]
   22510:	ldr	r0, [r0, r1, lsl #3]
   22514:	ldr	r8, [r0, #24]
   22518:	tst	r8, lr, lsl r7
   2251c:	mov	r4, r6
   22520:	bne	22550 <__assert_fail@plt+0x10688>
   22524:	b	2252c <__assert_fail@plt+0x10664>
   22528:	strb	lr, [sl, r0]
   2252c:	add	r7, r7, #1
   22530:	add	r6, r4, #1
   22534:	sub	r5, r5, #1
   22538:	add	r9, r9, #1
   2253c:	cmp	r7, #32
   22540:	beq	22580 <__assert_fail@plt+0x106b8>
   22544:	tst	r8, lr, lsl r7
   22548:	mov	r4, r6
   2254c:	beq	2252c <__assert_fail@plt+0x10664>
   22550:	mov	r0, #0
   22554:	strb	lr, [r0, -r5]
   22558:	add	r0, r9, #128	; 0x80
   2255c:	lsr	r0, r0, #7
   22560:	cmp	r0, #2
   22564:	mov	r0, r9
   22568:	bhi	22528 <__assert_fail@plt+0x10660>
   2256c:	bl	11c40 <__ctype_tolower_loc@plt>
   22570:	ldr	r0, [r0]
   22574:	mov	lr, #1
   22578:	ldr	r0, [r0, r9, lsl #2]
   2257c:	b	22528 <__assert_fail@plt+0x10660>
   22580:	ldr	r0, [sp, #64]	; 0x40
   22584:	ldr	r1, [sp, #44]	; 0x2c
   22588:	ldr	r8, [sp, #28]
   2258c:	mov	r6, #0
   22590:	mov	r7, #0
   22594:	ldr	r0, [r0]
   22598:	ldr	r0, [r0, r1, lsl #3]
   2259c:	ldr	r5, [r0, #28]
   225a0:	tst	r5, lr, lsl r6
   225a4:	bne	225cc <__assert_fail@plt+0x10704>
   225a8:	b	225b0 <__assert_fail@plt+0x106e8>
   225ac:	strb	lr, [sl, r0]
   225b0:	add	r6, r6, #1
   225b4:	add	r4, r4, #1
   225b8:	add	r9, r9, #1
   225bc:	cmp	r6, #32
   225c0:	beq	21bd4 <__assert_fail@plt+0xfd0c>
   225c4:	tst	r5, lr, lsl r6
   225c8:	beq	225b0 <__assert_fail@plt+0x106e8>
   225cc:	add	r0, r9, #128	; 0x80
   225d0:	strb	lr, [r4]
   225d4:	lsr	r0, r0, #7
   225d8:	cmp	r0, #2
   225dc:	mov	r0, r9
   225e0:	bhi	225ac <__assert_fail@plt+0x106e4>
   225e4:	bl	11c40 <__ctype_tolower_loc@plt>
   225e8:	ldr	r0, [r0]
   225ec:	mov	lr, #1
   225f0:	ldr	r0, [r0, r9, lsl #2]
   225f4:	b	225ac <__assert_fail@plt+0x106e4>
   225f8:	mov	r0, sl
   225fc:	mov	r1, #1
   22600:	mov	r2, #256	; 0x100
   22604:	bl	11d0c <memset@plt>
   22608:	cmp	r4, #2
   2260c:	bne	2261c <__assert_fail@plt+0x10754>
   22610:	ldrb	r0, [r8, #28]
   22614:	orr	r0, r0, #1
   22618:	strb	r0, [r8, #28]
   2261c:	sub	sp, fp, #28
   22620:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22624:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22628:	add	fp, sp, #24
   2262c:	mov	r4, r0
   22630:	mov	r0, #0
   22634:	mov	r6, r2
   22638:	mov	r5, r1
   2263c:	str	r0, [r4]
   22640:	str	r0, [r4, #4]
   22644:	str	r0, [r4, #8]
   22648:	mov	r0, #256	; 0x100
   2264c:	bl	38450 <__assert_fail@plt+0x26588>
   22650:	cmp	r0, #0
   22654:	str	r0, [r4, #16]
   22658:	beq	22788 <__assert_fail@plt+0x108c0>
   2265c:	movw	r0, #45820	; 0xb2fc
   22660:	tst	r6, #1
   22664:	and	r1, r6, #2
   22668:	movt	r0, #3
   2266c:	movweq	r0, #710	; 0x2c6
   22670:	movteq	r0, #257	; 0x101
   22674:	tst	r6, #4
   22678:	orr	r7, r0, r1, lsl #21
   2267c:	bne	22690 <__assert_fail@plt+0x107c8>
   22680:	ldrb	r0, [r4, #28]
   22684:	and	r0, r0, #127	; 0x7f
   22688:	strb	r0, [r4, #28]
   2268c:	b	226b0 <__assert_fail@plt+0x107e8>
   22690:	ldrb	r0, [r4, #28]
   22694:	mvn	r1, #127	; 0x7f
   22698:	orr	r0, r0, r1
   2269c:	movw	r1, #45758	; 0xb2be
   226a0:	movt	r1, #323	; 0x143
   226a4:	strb	r0, [r4, #28]
   226a8:	and	r1, r7, r1
   226ac:	orr	r7, r1, #256	; 0x100
   226b0:	and	r1, r6, #8
   226b4:	and	r0, r0, #239	; 0xef
   226b8:	mov	r8, #0
   226bc:	orr	r0, r0, r1, lsl #1
   226c0:	str	r8, [r4, #20]
   226c4:	strb	r0, [r4, #28]
   226c8:	mov	r0, r5
   226cc:	bl	11cac <strlen@plt>
   226d0:	mov	r2, r0
   226d4:	mov	r0, r4
   226d8:	mov	r1, r5
   226dc:	mov	r3, r7
   226e0:	bl	20260 <__assert_fail@plt+0xe398>
   226e4:	cmp	r0, #16
   226e8:	mov	r5, r0
   226ec:	movweq	r5, #8
   226f0:	cmp	r5, #0
   226f4:	bne	22794 <__assert_fail@plt+0x108cc>
   226f8:	ldr	r5, [r4, #16]
   226fc:	ldr	r6, [r4]
   22700:	mov	r1, #0
   22704:	mov	r2, #256	; 0x100
   22708:	mov	r0, r5
   2270c:	bl	11d0c <memset@plt>
   22710:	ldr	r1, [r6, #36]	; 0x24
   22714:	mov	r0, r4
   22718:	mov	r2, r5
   2271c:	bl	21b34 <__assert_fail@plt+0xfc6c>
   22720:	ldr	r0, [r6, #36]	; 0x24
   22724:	ldr	r1, [r6, #40]	; 0x28
   22728:	cmp	r0, r1
   2272c:	beq	22740 <__assert_fail@plt+0x10878>
   22730:	mov	r0, r4
   22734:	mov	r2, r5
   22738:	bl	21b34 <__assert_fail@plt+0xfc6c>
   2273c:	ldr	r0, [r6, #36]	; 0x24
   22740:	ldr	r1, [r6, #44]	; 0x2c
   22744:	cmp	r0, r1
   22748:	beq	2275c <__assert_fail@plt+0x10894>
   2274c:	mov	r0, r4
   22750:	mov	r2, r5
   22754:	bl	21b34 <__assert_fail@plt+0xfc6c>
   22758:	ldr	r0, [r6, #36]	; 0x24
   2275c:	ldr	r1, [r6, #48]	; 0x30
   22760:	cmp	r0, r1
   22764:	movne	r0, r4
   22768:	movne	r2, r5
   2276c:	blne	21b34 <__assert_fail@plt+0xfc6c>
   22770:	ldrb	r0, [r4, #28]
   22774:	mov	r5, #0
   22778:	orr	r0, r0, #8
   2277c:	strb	r0, [r4, #28]
   22780:	mov	r0, r5
   22784:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22788:	mov	r5, #12
   2278c:	mov	r0, r5
   22790:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   22794:	ldr	r0, [r4, #16]
   22798:	bl	17c10 <__assert_fail@plt+0x5d48>
   2279c:	mov	r0, r5
   227a0:	str	r8, [r4, #16]
   227a4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   227a8:	push	{r4, r5, r6, r7, fp, lr}
   227ac:	add	fp, sp, #16
   227b0:	cmp	r0, #17
   227b4:	bcs	22828 <__assert_fail@plt+0x10960>
   227b8:	movw	r1, #48088	; 0xbbd8
   227bc:	mov	r4, r2
   227c0:	mov	r2, #5
   227c4:	mov	r5, r3
   227c8:	movt	r1, #3
   227cc:	ldr	r0, [r1, r0, lsl #2]
   227d0:	movw	r1, #47704	; 0xba58
   227d4:	movt	r1, #3
   227d8:	add	r1, r1, r0
   227dc:	mov	r0, #0
   227e0:	bl	11afc <dcgettext@plt>
   227e4:	mov	r6, r0
   227e8:	bl	11cac <strlen@plt>
   227ec:	add	r7, r0, #1
   227f0:	cmp	r5, #0
   227f4:	beq	22810 <__assert_fail@plt+0x10948>
   227f8:	cmp	r7, r5
   227fc:	mov	r2, r7
   22800:	bhi	22818 <__assert_fail@plt+0x10950>
   22804:	mov	r0, r4
   22808:	mov	r1, r6
   2280c:	bl	11ab4 <memcpy@plt>
   22810:	mov	r0, r7
   22814:	pop	{r4, r5, r6, r7, fp, pc}
   22818:	sub	r2, r5, #1
   2281c:	mov	r0, #0
   22820:	strb	r0, [r4, r2]
   22824:	b	22804 <__assert_fail@plt+0x1093c>
   22828:	bl	11e8c <abort@plt>
   2282c:	push	{r4, r5, fp, lr}
   22830:	add	fp, sp, #8
   22834:	ldr	r5, [r0]
   22838:	mov	r4, r0
   2283c:	cmp	r5, #0
   22840:	beq	2286c <__assert_fail@plt+0x109a4>
   22844:	movw	r0, #0
   22848:	movw	r1, #0
   2284c:	movt	r0, #0
   22850:	movt	r1, #0
   22854:	orrs	r0, r1, r0
   22858:	beq	22864 <__assert_fail@plt+0x1099c>
   2285c:	add	r0, r5, #136	; 0x88
   22860:	bl	11a48 <pthread_mutex_destroy@plt>
   22864:	mov	r0, r5
   22868:	bl	22894 <__assert_fail@plt+0x109cc>
   2286c:	mov	r5, #0
   22870:	str	r5, [r4]
   22874:	str	r5, [r4, #4]
   22878:	ldr	r0, [r4, #16]
   2287c:	bl	17c10 <__assert_fail@plt+0x5d48>
   22880:	str	r5, [r4, #16]
   22884:	ldr	r0, [r4, #20]
   22888:	bl	17c10 <__assert_fail@plt+0x5d48>
   2288c:	str	r5, [r4, #20]
   22890:	pop	{r4, r5, fp, pc}
   22894:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   22898:	add	fp, sp, #24
   2289c:	mov	r8, r0
   228a0:	ldr	r0, [r0]
   228a4:	cmp	r0, #0
   228a8:	beq	2292c <__assert_fail@plt+0x10a64>
   228ac:	ldr	r1, [r8, #8]
   228b0:	cmp	r1, #0
   228b4:	beq	2292c <__assert_fail@plt+0x10a64>
   228b8:	movw	r7, #255	; 0xff
   228bc:	mov	r6, #0
   228c0:	movt	r7, #4
   228c4:	add	r1, r0, r6, lsl #3
   228c8:	ldr	r1, [r1, #4]
   228cc:	and	r1, r1, r7
   228d0:	cmp	r1, #3
   228d4:	beq	22908 <__assert_fail@plt+0x10a40>
   228d8:	cmp	r1, #6
   228dc:	bne	22914 <__assert_fail@plt+0x10a4c>
   228e0:	ldr	r5, [r0, r6, lsl #3]
   228e4:	ldr	r0, [r5]
   228e8:	bl	17c10 <__assert_fail@plt+0x5d48>
   228ec:	ldr	r0, [r5, #4]
   228f0:	bl	17c10 <__assert_fail@plt+0x5d48>
   228f4:	ldr	r0, [r5, #8]
   228f8:	bl	17c10 <__assert_fail@plt+0x5d48>
   228fc:	ldr	r0, [r5, #12]
   22900:	bl	17c10 <__assert_fail@plt+0x5d48>
   22904:	b	2290c <__assert_fail@plt+0x10a44>
   22908:	ldr	r5, [r0, r6, lsl #3]
   2290c:	mov	r0, r5
   22910:	bl	17c10 <__assert_fail@plt+0x5d48>
   22914:	ldr	r0, [r8, #8]
   22918:	add	r6, r6, #1
   2291c:	cmp	r6, r0
   22920:	bcs	2292c <__assert_fail@plt+0x10a64>
   22924:	ldr	r0, [r8]
   22928:	b	228c4 <__assert_fail@plt+0x109fc>
   2292c:	ldr	r0, [r8, #12]
   22930:	bl	17c10 <__assert_fail@plt+0x5d48>
   22934:	ldr	r0, [r8, #8]
   22938:	cmp	r0, #0
   2293c:	beq	229ac <__assert_fail@plt+0x10ae4>
   22940:	mov	r5, #0
   22944:	mov	r6, #8
   22948:	ldr	r0, [r8, #24]
   2294c:	cmp	r0, #0
   22950:	bne	22978 <__assert_fail@plt+0x10ab0>
   22954:	b	22980 <__assert_fail@plt+0x10ab8>
   22958:	ldr	r0, [r8, #8]
   2295c:	add	r5, r5, #1
   22960:	add	r6, r6, #12
   22964:	cmp	r5, r0
   22968:	bcs	229ac <__assert_fail@plt+0x10ae4>
   2296c:	ldr	r0, [r8, #24]
   22970:	cmp	r0, #0
   22974:	beq	22980 <__assert_fail@plt+0x10ab8>
   22978:	ldr	r0, [r0, r6]
   2297c:	bl	17c10 <__assert_fail@plt+0x5d48>
   22980:	ldr	r0, [r8, #28]
   22984:	cmp	r0, #0
   22988:	beq	22994 <__assert_fail@plt+0x10acc>
   2298c:	ldr	r0, [r0, r6]
   22990:	bl	17c10 <__assert_fail@plt+0x5d48>
   22994:	ldr	r0, [r8, #20]
   22998:	cmp	r0, #0
   2299c:	beq	22958 <__assert_fail@plt+0x10a90>
   229a0:	ldr	r0, [r0, r6]
   229a4:	bl	17c10 <__assert_fail@plt+0x5d48>
   229a8:	b	22958 <__assert_fail@plt+0x10a90>
   229ac:	ldr	r0, [r8, #20]
   229b0:	bl	17c10 <__assert_fail@plt+0x5d48>
   229b4:	ldr	r0, [r8, #24]
   229b8:	bl	17c10 <__assert_fail@plt+0x5d48>
   229bc:	ldr	r0, [r8, #28]
   229c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   229c4:	ldr	r0, [r8]
   229c8:	bl	17c10 <__assert_fail@plt+0x5d48>
   229cc:	ldr	r5, [r8, #32]
   229d0:	cmp	r5, #0
   229d4:	beq	22a34 <__assert_fail@plt+0x10b6c>
   229d8:	mov	r6, #0
   229dc:	add	r0, r6, r6, lsl #1
   229e0:	ldr	r0, [r5, r0, lsl #2]!
   229e4:	add	r7, r5, #8
   229e8:	cmp	r0, #1
   229ec:	blt	22a10 <__assert_fail@plt+0x10b48>
   229f0:	mov	r4, #0
   229f4:	ldr	r0, [r7]
   229f8:	ldr	r0, [r0, r4, lsl #2]
   229fc:	bl	25c60 <__assert_fail@plt+0x13d98>
   22a00:	ldr	r0, [r5]
   22a04:	add	r4, r4, #1
   22a08:	cmp	r4, r0
   22a0c:	blt	229f4 <__assert_fail@plt+0x10b2c>
   22a10:	ldr	r0, [r7]
   22a14:	bl	17c10 <__assert_fail@plt+0x5d48>
   22a18:	ldr	r0, [r8, #68]	; 0x44
   22a1c:	cmp	r6, r0
   22a20:	bcs	22a30 <__assert_fail@plt+0x10b68>
   22a24:	ldr	r5, [r8, #32]
   22a28:	add	r6, r6, #1
   22a2c:	b	229dc <__assert_fail@plt+0x10b14>
   22a30:	ldr	r5, [r8, #32]
   22a34:	mov	r0, r5
   22a38:	bl	17c10 <__assert_fail@plt+0x5d48>
   22a3c:	ldr	r0, [r8, #60]	; 0x3c
   22a40:	movw	r1, #48156	; 0xbc1c
   22a44:	movt	r1, #3
   22a48:	cmp	r0, r1
   22a4c:	beq	22a54 <__assert_fail@plt+0x10b8c>
   22a50:	bl	17c10 <__assert_fail@plt+0x5d48>
   22a54:	ldr	r0, [r8, #132]	; 0x84
   22a58:	bl	17c10 <__assert_fail@plt+0x5d48>
   22a5c:	mov	r0, r8
   22a60:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   22a64:	b	17c10 <__assert_fail@plt+0x5d48>
   22a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a6c:	add	fp, sp, #28
   22a70:	sub	sp, sp, #28
   22a74:	ldr	sl, [fp, #8]
   22a78:	mov	r7, #2
   22a7c:	cmp	sl, #7
   22a80:	bhi	22b54 <__assert_fail@plt+0x10c8c>
   22a84:	mov	r5, r0
   22a88:	ldr	r0, [r0]
   22a8c:	mov	r6, r3
   22a90:	mov	r9, r2
   22a94:	mov	r4, r1
   22a98:	tst	sl, #4
   22a9c:	str	r0, [sp, #24]
   22aa0:	bne	22ab8 <__assert_fail@plt+0x10bf0>
   22aa4:	mov	r0, r4
   22aa8:	bl	11cac <strlen@plt>
   22aac:	mov	r7, r0
   22ab0:	mov	r8, #0
   22ab4:	b	22ac0 <__assert_fail@plt+0x10bf8>
   22ab8:	ldr	r8, [r6]
   22abc:	ldr	r7, [r6, #4]
   22ac0:	movw	r0, #0
   22ac4:	movw	r1, #0
   22ac8:	movt	r0, #0
   22acc:	movt	r1, #0
   22ad0:	orrs	r0, r1, r0
   22ad4:	str	r0, [sp, #20]
   22ad8:	beq	22ae8 <__assert_fail@plt+0x10c20>
   22adc:	ldr	r0, [sp, #24]
   22ae0:	add	r0, r0, #136	; 0x88
   22ae4:	bl	11a90 <pthread_mutex_lock@plt>
   22ae8:	ldrb	r0, [r5, #28]
   22aec:	tst	r0, #16
   22af0:	bne	22b04 <__assert_fail@plt+0x10c3c>
   22af4:	str	r7, [sp]
   22af8:	stmib	sp, {r7, r9}
   22afc:	str	r6, [sp, #12]
   22b00:	b	22b18 <__assert_fail@plt+0x10c50>
   22b04:	mov	r0, #0
   22b08:	str	r7, [sp]
   22b0c:	str	r7, [sp, #4]
   22b10:	str	r0, [sp, #8]
   22b14:	str	r0, [sp, #12]
   22b18:	mov	r0, r5
   22b1c:	mov	r1, r4
   22b20:	mov	r2, r7
   22b24:	mov	r3, r8
   22b28:	str	sl, [sp, #16]
   22b2c:	bl	22b60 <__assert_fail@plt+0x10c98>
   22b30:	mov	r7, r0
   22b34:	ldr	r0, [sp, #20]
   22b38:	cmp	r0, #0
   22b3c:	beq	22b4c <__assert_fail@plt+0x10c84>
   22b40:	ldr	r0, [sp, #24]
   22b44:	add	r0, r0, #136	; 0x88
   22b48:	bl	119c4 <pthread_mutex_unlock@plt>
   22b4c:	cmp	r7, #0
   22b50:	movwne	r7, #1
   22b54:	mov	r0, r7
   22b58:	sub	sp, fp, #28
   22b5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22b60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b64:	add	fp, sp, #28
   22b68:	sub	sp, sp, #412	; 0x19c
   22b6c:	ldr	r7, [r0]
   22b70:	str	r2, [sp, #76]	; 0x4c
   22b74:	str	r1, [sp, #100]	; 0x64
   22b78:	mov	r4, r0
   22b7c:	add	r0, sp, #104	; 0x68
   22b80:	mov	r1, #0
   22b84:	mov	r2, #136	; 0x88
   22b88:	mov	r6, r3
   22b8c:	mov	r9, #0
   22b90:	bl	11d0c <memset@plt>
   22b94:	str	r7, [sp, #188]	; 0xbc
   22b98:	ldr	r0, [fp, #16]
   22b9c:	ldr	sl, [fp, #8]
   22ba0:	mov	r5, #0
   22ba4:	ldr	r1, [r4, #16]
   22ba8:	cmp	r1, #0
   22bac:	beq	22bc8 <__assert_fail@plt+0x10d00>
   22bb0:	ldrb	r2, [r4, #28]
   22bb4:	and	r2, r2, #9
   22bb8:	cmp	r2, #8
   22bbc:	movne	r1, #0
   22bc0:	subs	r5, r6, sl
   22bc4:	movne	r5, r1
   22bc8:	ldr	r2, [r4, #24]
   22bcc:	ldr	r1, [r4, #8]
   22bd0:	mov	r8, #1
   22bd4:	mvn	r3, r2
   22bd8:	cmp	r2, r0
   22bdc:	addcc	r9, r3, r0
   22be0:	cmp	r1, #0
   22be4:	beq	251d8 <__assert_fail@plt+0x13310>
   22be8:	ldr	r1, [r7, #36]	; 0x24
   22bec:	cmp	r1, #0
   22bf0:	ldrne	r2, [r7, #40]	; 0x28
   22bf4:	cmpne	r2, #0
   22bf8:	beq	251d8 <__assert_fail@plt+0x13310>
   22bfc:	ldr	r3, [r7, #44]	; 0x2c
   22c00:	cmp	r3, #0
   22c04:	strne	r7, [sp, #96]	; 0x60
   22c08:	ldrne	r7, [r7, #48]	; 0x30
   22c0c:	cmpne	r7, #0
   22c10:	beq	251d8 <__assert_fail@plt+0x13310>
   22c14:	ldr	r1, [r1, #8]
   22c18:	ldr	ip, [r4, #20]
   22c1c:	cmp	r1, #0
   22c20:	beq	22c2c <__assert_fail@plt+0x10d64>
   22c24:	ldr	lr, [sp, #96]	; 0x60
   22c28:	b	22c3c <__assert_fail@plt+0x10d74>
   22c2c:	ldr	r1, [r2, #8]
   22c30:	ldr	lr, [sp, #96]	; 0x60
   22c34:	cmp	r1, #0
   22c38:	beq	242f0 <__assert_fail@plt+0x12428>
   22c3c:	str	sl, [sp, #80]	; 0x50
   22c40:	subs	r0, r0, r9
   22c44:	str	r9, [sp, #32]
   22c48:	str	r0, [sp, #92]	; 0x5c
   22c4c:	mov	r0, #1
   22c50:	str	r0, [sp, #56]	; 0x38
   22c54:	bne	22c68 <__assert_fail@plt+0x10da0>
   22c58:	ldr	r0, [lr, #76]	; 0x4c
   22c5c:	cmp	r0, #0
   22c60:	movwne	r0, #1
   22c64:	str	r0, [sp, #56]	; 0x38
   22c68:	ldr	r0, [r4, #12]
   22c6c:	ldr	r2, [lr, #92]	; 0x5c
   22c70:	ldr	r3, [sp, #100]	; 0x64
   22c74:	ldr	r1, [lr, #8]
   22c78:	str	ip, [sp, #168]	; 0xa8
   22c7c:	mov	r7, r4
   22c80:	str	r3, [sp, #104]	; 0x68
   22c84:	str	r2, [sp, #184]	; 0xb8
   22c88:	ubfx	r3, r0, #22, #1
   22c8c:	ldr	r4, [sp, #76]	; 0x4c
   22c90:	and	r0, r0, #4194304	; 0x400000
   22c94:	add	r9, r1, #1
   22c98:	orrs	sl, ip, r0
   22c9c:	strb	r3, [sp, #176]	; 0xb0
   22ca0:	mov	r3, lr
   22ca4:	add	r3, sp, #104	; 0x68
   22ca8:	movwne	sl, #1
   22cac:	add	r3, r3, #44	; 0x2c
   22cb0:	cmp	r2, r9
   22cb4:	strb	sl, [sp, #179]	; 0xb3
   22cb8:	movgt	r9, r2
   22cbc:	vdup.32	q8, r4
   22cc0:	ldrb	r0, [lr, #88]	; 0x58
   22cc4:	vst1.32	{d16-d17}, [r3]
   22cc8:	ubfx	r3, r0, #3, #1
   22ccc:	strb	r3, [sp, #178]	; 0xb2
   22cd0:	ubfx	r0, r0, #2, #1
   22cd4:	str	r7, [sp, #64]	; 0x40
   22cd8:	str	r5, [sp, #88]	; 0x58
   22cdc:	str	ip, [sp, #84]	; 0x54
   22ce0:	strb	r0, [sp, #177]	; 0xb1
   22ce4:	add	r0, r4, #1
   22ce8:	cmp	r0, r9
   22cec:	movlt	r9, r0
   22cf0:	cmp	r2, #2
   22cf4:	blt	22d28 <__assert_fail@plt+0x10e60>
   22cf8:	mov	r8, #12
   22cfc:	cmn	r9, #-1073741823	; 0xc0000001
   22d00:	bhi	25184 <__assert_fail@plt+0x132bc>
   22d04:	lsl	r1, r9, #2
   22d08:	mov	r0, #0
   22d0c:	bl	38480 <__assert_fail@plt+0x265b8>
   22d10:	ldr	ip, [sp, #84]	; 0x54
   22d14:	ldr	r5, [sp, #88]	; 0x58
   22d18:	cmp	r0, #0
   22d1c:	beq	25184 <__assert_fail@plt+0x132bc>
   22d20:	ldr	r7, [sp, #64]	; 0x40
   22d24:	str	r0, [sp, #112]	; 0x70
   22d28:	ldr	r4, [sp, #96]	; 0x60
   22d2c:	mov	r8, #1
   22d30:	cmp	sl, #0
   22d34:	beq	22d5c <__assert_fail@plt+0x10e94>
   22d38:	mov	r0, #0
   22d3c:	mov	r1, r9
   22d40:	mov	r8, #0
   22d44:	bl	38480 <__assert_fail@plt+0x265b8>
   22d48:	cmp	r0, #0
   22d4c:	beq	251ec <__assert_fail@plt+0x13324>
   22d50:	ldr	r5, [sp, #88]	; 0x58
   22d54:	ldr	ip, [sp, #84]	; 0x54
   22d58:	str	r0, [sp, #108]	; 0x6c
   22d5c:	add	r1, r4, #96	; 0x60
   22d60:	str	r9, [sp, #140]	; 0x8c
   22d64:	ldr	r0, [fp, #12]
   22d68:	cmp	r8, #0
   22d6c:	str	r1, [sp, #172]	; 0xac
   22d70:	ldrb	r1, [r4, #88]	; 0x58
   22d74:	ubfx	r1, r1, #4, #1
   22d78:	strb	r1, [sp, #182]	; 0xb6
   22d7c:	mov	r1, #0
   22d80:	beq	22d9c <__assert_fail@plt+0x10ed4>
   22d84:	ldr	r1, [sp, #100]	; 0x64
   22d88:	str	r1, [sp, #108]	; 0x6c
   22d8c:	ldr	r1, [r4, #92]	; 0x5c
   22d90:	cmp	r1, #1
   22d94:	ldr	r1, [sp, #76]	; 0x4c
   22d98:	movwgt	r1, #0
   22d9c:	str	r0, [sp, #160]	; 0xa0
   22da0:	str	r1, [sp, #136]	; 0x88
   22da4:	str	r1, [sp, #132]	; 0x84
   22da8:	str	r0, [sp, #156]	; 0x9c
   22dac:	ldrb	r0, [r7, #28]
   22db0:	lsr	r0, r0, #7
   22db4:	strb	r0, [sp, #181]	; 0xb5
   22db8:	mvn	r0, #0
   22dbc:	ldr	sl, [r4, #76]	; 0x4c
   22dc0:	str	r0, [sp, #196]	; 0xc4
   22dc4:	ldr	r0, [fp, #24]
   22dc8:	lsl	r4, sl, #1
   22dcc:	cmp	sl, #1
   22dd0:	str	r0, [sp, #192]	; 0xc0
   22dd4:	blt	22e24 <__assert_fail@plt+0x10f5c>
   22dd8:	movw	r0, #43690	; 0xaaaa
   22ddc:	mov	r8, #12
   22de0:	movt	r0, #2730	; 0xaaa
   22de4:	cmp	r4, r0
   22de8:	bhi	25184 <__assert_fail@plt+0x132bc>
   22dec:	add	r0, sl, sl, lsl #1
   22df0:	lsl	r0, r0, #4
   22df4:	bl	38450 <__assert_fail@plt+0x26588>
   22df8:	mov	r5, r0
   22dfc:	str	r0, [sp, #220]	; 0xdc
   22e00:	lsl	r0, sl, #3
   22e04:	bl	38450 <__assert_fail@plt+0x26588>
   22e08:	cmp	r0, #0
   22e0c:	str	r0, [sp, #236]	; 0xec
   22e10:	beq	25184 <__assert_fail@plt+0x132bc>
   22e14:	cmp	r5, #0
   22e18:	ldr	r5, [sp, #88]	; 0x58
   22e1c:	ldr	ip, [sp, #84]	; 0x54
   22e20:	beq	25184 <__assert_fail@plt+0x132bc>
   22e24:	mov	r0, #1
   22e28:	str	r4, [sp, #232]	; 0xe8
   22e2c:	str	r0, [sp, #224]	; 0xe0
   22e30:	ldr	r0, [sp, #92]	; 0x5c
   22e34:	str	r4, [sp, #216]	; 0xd8
   22e38:	cmp	r0, #1
   22e3c:	bhi	22e50 <__assert_fail@plt+0x10f88>
   22e40:	ldr	r0, [sp, #96]	; 0x60
   22e44:	ldrb	r0, [r0, #88]	; 0x58
   22e48:	tst	r0, #2
   22e4c:	beq	22e7c <__assert_fail@plt+0x10fb4>
   22e50:	mov	r8, #12
   22e54:	cmn	r9, #-1073741822	; 0xc0000002
   22e58:	bhi	25184 <__assert_fail@plt+0x132bc>
   22e5c:	mov	r0, #4
   22e60:	add	r0, r0, r9, lsl #2
   22e64:	bl	38450 <__assert_fail@plt+0x26588>
   22e68:	ldr	ip, [sp, #84]	; 0x54
   22e6c:	ldr	r5, [sp, #88]	; 0x58
   22e70:	cmp	r0, #0
   22e74:	str	r0, [sp, #204]	; 0xcc
   22e78:	beq	25184 <__assert_fail@plt+0x132bc>
   22e7c:	ldr	r1, [fp, #24]
   22e80:	ldr	r2, [sp, #80]	; 0x50
   22e84:	str	r6, [fp, #-200]	; 0xffffff38
   22e88:	mov	r0, #4
   22e8c:	mov	r9, #1
   22e90:	mov	sl, #1
   22e94:	mov	r4, r6
   22e98:	tst	r1, #1
   22e9c:	mov	r1, #4
   22ea0:	mov	r7, r2
   22ea4:	movweq	r1, #6
   22ea8:	cmp	r2, r6
   22eac:	str	r1, [sp, #164]	; 0xa4
   22eb0:	ldr	r1, [sp, #96]	; 0x60
   22eb4:	mvnlt	sl, #0
   22eb8:	movlt	r7, r6
   22ebc:	movlt	r4, r2
   22ec0:	cmp	r5, #0
   22ec4:	ldr	r1, [r1, #92]	; 0x5c
   22ec8:	str	r1, [sp, #60]	; 0x3c
   22ecc:	beq	22f10 <__assert_fail@plt+0x11048>
   22ed0:	cmp	r1, #1
   22ed4:	beq	22ef4 <__assert_fail@plt+0x1102c>
   22ed8:	ldr	r0, [sp, #64]	; 0x40
   22edc:	ldr	r0, [r0, #12]
   22ee0:	and	r0, r0, #4194304	; 0x400000
   22ee4:	orr	r0, ip, r0
   22ee8:	clz	r0, r0
   22eec:	lsr	r0, r0, #5
   22ef0:	lsl	r0, r0, #2
   22ef4:	cmp	ip, #0
   22ef8:	mov	r1, ip
   22efc:	movwne	r1, #1
   22f00:	cmp	r2, r6
   22f04:	orrge	r1, r1, #2
   22f08:	orr	r0, r1, r0
   22f0c:	b	22f14 <__assert_fail@plt+0x1104c>
   22f10:	mov	r0, #8
   22f14:	add	r1, sp, #104	; 0x68
   22f18:	cmp	r2, r6
   22f1c:	sub	r0, r0, #4
   22f20:	str	sl, [sp, #68]	; 0x44
   22f24:	str	r7, [sp, #52]	; 0x34
   22f28:	str	r4, [sp, #48]	; 0x30
   22f2c:	add	r1, r1, #32
   22f30:	str	r0, [sp, #80]	; 0x50
   22f34:	str	r1, [sp, #24]
   22f38:	sub	r1, fp, #200	; 0xc8
   22f3c:	movwlt	r1, #0
   22f40:	cmp	r1, #0
   22f44:	str	r1, [sp, #40]	; 0x28
   22f48:	movwne	r1, #1
   22f4c:	str	r1, [sp, #44]	; 0x2c
   22f50:	sub	r1, fp, #192	; 0xc0
   22f54:	add	r1, r1, #16
   22f58:	str	r1, [sp, #36]	; 0x24
   22f5c:	ldr	r1, [sp, #80]	; 0x50
   22f60:	cmp	r1, #4
   22f64:	bhi	22fd8 <__assert_fail@plt+0x11110>
   22f68:	add	r0, pc, #0
   22f6c:	ldr	pc, [r0, r1, lsl #2]
   22f70:	andeq	r2, r2, r4, lsl #31
   22f74:	andeq	r2, r2, r4, lsl #31
   22f78:	andeq	r3, r2, r4, ror r0
   22f7c:	andeq	r3, r2, r4, lsr #1
   22f80:	ldrdeq	r3, [r2], -ip
   22f84:	mov	r8, #1
   22f88:	cmp	r6, r4
   22f8c:	blt	25184 <__assert_fail@plt+0x132bc>
   22f90:	cmp	ip, #0
   22f94:	beq	23c20 <__assert_fail@plt+0x11d58>
   22f98:	ldr	r1, [sp, #76]	; 0x4c
   22f9c:	mov	r0, #0
   22fa0:	cmp	r6, r1
   22fa4:	bge	22fb0 <__assert_fail@plt+0x110e8>
   22fa8:	ldr	r0, [sp, #100]	; 0x64
   22fac:	ldrb	r0, [r0, r6]
   22fb0:	ldrb	r0, [ip, r0]
   22fb4:	ldrb	r0, [r5, r0]
   22fb8:	cmp	r0, #0
   22fbc:	bne	230dc <__assert_fail@plt+0x11214>
   22fc0:	sub	r0, r6, #1
   22fc4:	cmp	r6, r4
   22fc8:	mov	r6, r0
   22fcc:	str	r0, [fp, #-200]	; 0xffffff38
   22fd0:	bgt	22f9c <__assert_fail@plt+0x110d4>
   22fd4:	b	25184 <__assert_fail@plt+0x132bc>
   22fd8:	ldr	r0, [sp, #128]	; 0x80
   22fdc:	ldr	r2, [sp, #136]	; 0x88
   22fe0:	sub	r1, r6, r0
   22fe4:	cmp	r1, r2
   22fe8:	bcs	23030 <__assert_fail@plt+0x11168>
   22fec:	ldr	r3, [sp, #132]	; 0x84
   22ff0:	mov	r2, #0
   22ff4:	cmp	r1, r3
   22ff8:	bcs	23004 <__assert_fail@plt+0x1113c>
   22ffc:	ldr	r2, [sp, #108]	; 0x6c
   23000:	ldrb	r2, [r2, r1]
   23004:	ldrb	r1, [r5, r2]
   23008:	cmp	r1, #0
   2300c:	bne	230dc <__assert_fail@plt+0x11214>
   23010:	add	r6, r6, sl
   23014:	mov	r8, #1
   23018:	cmp	r6, r4
   2301c:	str	r6, [fp, #-200]	; 0xffffff38
   23020:	blt	25184 <__assert_fail@plt+0x132bc>
   23024:	cmp	r6, r7
   23028:	ble	22fdc <__assert_fail@plt+0x11114>
   2302c:	b	25184 <__assert_fail@plt+0x132bc>
   23030:	ldr	r2, [fp, #24]
   23034:	add	r0, sp, #104	; 0x68
   23038:	mov	r1, r6
   2303c:	bl	2cdac <__assert_fail@plt+0x1aee4>
   23040:	cmp	r0, #0
   23044:	bne	25284 <__assert_fail@plt+0x133bc>
   23048:	ldr	r0, [sp, #128]	; 0x80
   2304c:	ldr	r6, [fp, #-200]	; 0xffffff38
   23050:	ldr	r5, [sp, #88]	; 0x58
   23054:	ldr	r7, [sp, #52]	; 0x34
   23058:	ldr	r4, [sp, #48]	; 0x30
   2305c:	sub	r1, r6, r0
   23060:	ldr	r3, [sp, #132]	; 0x84
   23064:	mov	r2, #0
   23068:	cmp	r1, r3
   2306c:	bcc	22ffc <__assert_fail@plt+0x11134>
   23070:	b	23004 <__assert_fail@plt+0x1113c>
   23074:	ldr	r1, [sp, #100]	; 0x64
   23078:	cmp	r6, r7
   2307c:	bge	230d4 <__assert_fail@plt+0x1120c>
   23080:	ldrb	r0, [r1, r6]
   23084:	ldrb	r0, [r5, r0]
   23088:	cmp	r0, #0
   2308c:	bne	230d4 <__assert_fail@plt+0x1120c>
   23090:	add	r6, r6, #1
   23094:	cmp	r6, r7
   23098:	str	r6, [fp, #-200]	; 0xffffff38
   2309c:	blt	23080 <__assert_fail@plt+0x111b8>
   230a0:	b	230d4 <__assert_fail@plt+0x1120c>
   230a4:	cmp	r6, r7
   230a8:	bge	230d4 <__assert_fail@plt+0x1120c>
   230ac:	ldr	r1, [sp, #100]	; 0x64
   230b0:	ldrb	r0, [r1, r6]
   230b4:	ldrb	r0, [ip, r0]
   230b8:	ldrb	r0, [r5, r0]
   230bc:	cmp	r0, #0
   230c0:	bne	230d4 <__assert_fail@plt+0x1120c>
   230c4:	add	r6, r6, #1
   230c8:	cmp	r6, r7
   230cc:	str	r6, [fp, #-200]	; 0xffffff38
   230d0:	blt	230b0 <__assert_fail@plt+0x111e8>
   230d4:	cmp	r6, r7
   230d8:	beq	23ff4 <__assert_fail@plt+0x1212c>
   230dc:	ldr	r2, [fp, #24]
   230e0:	add	r0, sp, #104	; 0x68
   230e4:	mov	r1, r6
   230e8:	bl	2cdac <__assert_fail@plt+0x1aee4>
   230ec:	cmp	r0, #0
   230f0:	bne	25284 <__assert_fail@plt+0x133bc>
   230f4:	ldr	r0, [sp, #60]	; 0x3c
   230f8:	cmp	r0, #1
   230fc:	ldrne	r0, [sp, #132]	; 0x84
   23100:	cmpne	r0, #0
   23104:	bne	23b8c <__assert_fail@plt+0x11cc4>
   23108:	mov	r0, #0
   2310c:	str	r0, [sp, #212]	; 0xd4
   23110:	str	r0, [sp, #224]	; 0xe0
   23114:	str	r0, [sp, #208]	; 0xd0
   23118:	str	r0, [fp, #-196]	; 0xffffff3c
   2311c:	ldr	r4, [sp, #188]	; 0xbc
   23120:	ldr	ip, [sp, #144]	; 0x90
   23124:	ldr	r6, [r4, #36]	; 0x24
   23128:	ldrsb	r0, [r6, #52]	; 0x34
   2312c:	cmn	r0, #1
   23130:	ble	23ba0 <__assert_fail@plt+0x11cd8>
   23134:	ldr	r7, [sp, #44]	; 0x2c
   23138:	cmp	r6, #0
   2313c:	beq	251ec <__assert_fail@plt+0x13324>
   23140:	ldr	r0, [sp, #204]	; 0xcc
   23144:	mov	r8, r7
   23148:	cmp	r0, #0
   2314c:	beq	23164 <__assert_fail@plt+0x1129c>
   23150:	str	r6, [r0, ip, lsl #2]
   23154:	mov	r8, r7
   23158:	ldr	r0, [r4, #76]	; 0x4c
   2315c:	cmp	r0, #0
   23160:	bne	23ed4 <__assert_fail@plt+0x1200c>
   23164:	ldrb	r0, [r6, #52]	; 0x34
   23168:	tst	r0, #16
   2316c:	bne	23eac <__assert_fail@plt+0x11fe4>
   23170:	mov	r0, #0
   23174:	mvn	r4, #0
   23178:	str	r0, [sp, #72]	; 0x48
   2317c:	ldr	r0, [sp, #144]	; 0x90
   23180:	ldr	r1, [sp, #160]	; 0xa0
   23184:	cmp	r1, r0
   23188:	ble	23958 <__assert_fail@plt+0x11a90>
   2318c:	ldr	sl, [sp, #40]	; 0x28
   23190:	b	231a4 <__assert_fail@plt+0x112dc>
   23194:	ldr	r0, [sp, #144]	; 0x90
   23198:	ldr	r1, [sp, #160]	; 0xa0
   2319c:	cmp	r1, r0
   231a0:	ble	2395c <__assert_fail@plt+0x11a94>
   231a4:	ldr	r2, [sp, #140]	; 0x8c
   231a8:	ldr	r1, [sp, #152]	; 0x98
   231ac:	add	r7, r0, #1
   231b0:	mov	r5, r6
   231b4:	cmp	r7, r2
   231b8:	blt	231c4 <__assert_fail@plt+0x112fc>
   231bc:	cmp	r2, r1
   231c0:	blt	237ec <__assert_fail@plt+0x11924>
   231c4:	ldr	r2, [sp, #132]	; 0x84
   231c8:	cmp	r7, r2
   231cc:	blt	231d8 <__assert_fail@plt+0x11310>
   231d0:	cmp	r2, r1
   231d4:	blt	237ec <__assert_fail@plt+0x11924>
   231d8:	ldrb	r0, [r5, #52]	; 0x34
   231dc:	tst	r0, #32
   231e0:	bne	2339c <__assert_fail@plt+0x114d4>
   231e4:	ldr	r1, [sp, #144]	; 0x90
   231e8:	ldr	r0, [sp, #108]	; 0x6c
   231ec:	add	r2, r1, #1
   231f0:	str	r2, [sp, #144]	; 0x90
   231f4:	ldrb	r6, [r0, r1]
   231f8:	ldr	r0, [r5, #44]	; 0x2c
   231fc:	cmp	r0, #0
   23200:	bne	23240 <__assert_fail@plt+0x11378>
   23204:	ldr	r2, [r5, #48]	; 0x30
   23208:	cmp	r2, #0
   2320c:	bne	23810 <__assert_fail@plt+0x11948>
   23210:	ldr	r0, [sp, #188]	; 0xbc
   23214:	mov	r1, r5
   23218:	mov	r9, r8
   2321c:	mov	r8, ip
   23220:	bl	30ac0 <__assert_fail@plt+0x1ebf8>
   23224:	mov	ip, r8
   23228:	mov	r8, r9
   2322c:	mov	r9, #1
   23230:	cmp	r0, #0
   23234:	bne	231f8 <__assert_fail@plt+0x11330>
   23238:	mov	r0, #12
   2323c:	b	238d8 <__assert_fail@plt+0x11a10>
   23240:	ldr	r6, [r0, r6, lsl #2]
   23244:	ldr	r0, [sp, #204]	; 0xcc
   23248:	cmp	r0, #0
   2324c:	beq	2326c <__assert_fail@plt+0x113a4>
   23250:	mov	r2, r6
   23254:	sub	r0, fp, #196	; 0xc4
   23258:	add	r1, sp, #104	; 0x68
   2325c:	mov	r6, ip
   23260:	bl	2e818 <__assert_fail@plt+0x1c950>
   23264:	mov	ip, r6
   23268:	mov	r6, r0
   2326c:	cmp	r6, #0
   23270:	beq	232e4 <__assert_fail@plt+0x1141c>
   23274:	sub	r0, r5, r6
   23278:	clz	r0, r0
   2327c:	lsr	r0, r0, #5
   23280:	ands	r8, r8, r0
   23284:	ldrb	r0, [r6, #52]	; 0x34
   23288:	moveq	r7, ip
   2328c:	mov	ip, r7
   23290:	tst	r0, #16
   23294:	beq	23194 <__assert_fail@plt+0x112cc>
   23298:	sxtb	r0, r0
   2329c:	cmn	r0, #1
   232a0:	bgt	232c4 <__assert_fail@plt+0x113fc>
   232a4:	ldr	r2, [sp, #144]	; 0x90
   232a8:	add	r0, sp, #104	; 0x68
   232ac:	mov	r1, r6
   232b0:	mov	r5, ip
   232b4:	bl	2d80c <__assert_fail@plt+0x1b944>
   232b8:	mov	ip, r5
   232bc:	cmp	r0, #0
   232c0:	beq	23194 <__assert_fail@plt+0x112cc>
   232c4:	ldr	r0, [sp, #56]	; 0x38
   232c8:	ldr	r4, [sp, #144]	; 0x90
   232cc:	cmp	r0, #0
   232d0:	beq	2396c <__assert_fail@plt+0x11aa4>
   232d4:	mov	sl, #0
   232d8:	mov	r0, #1
   232dc:	str	r0, [sp, #72]	; 0x48
   232e0:	b	23194 <__assert_fail@plt+0x112cc>
   232e4:	ldr	r0, [fp, #-196]	; 0xffffff3c
   232e8:	cmp	r0, #0
   232ec:	bne	251ec <__assert_fail@plt+0x13324>
   232f0:	ldr	r0, [sp, #72]	; 0x48
   232f4:	ldr	r1, [sp, #56]	; 0x38
   232f8:	cmp	r0, #0
   232fc:	mvn	r1, r1
   23300:	movwne	r0, #1
   23304:	tst	r1, r0
   23308:	bne	2395c <__assert_fail@plt+0x11a94>
   2330c:	ldr	r0, [sp, #204]	; 0xcc
   23310:	cmp	r0, #0
   23314:	beq	2395c <__assert_fail@plt+0x11a94>
   23318:	ldr	r2, [sp, #144]	; 0x90
   2331c:	ldr	r1, [sp, #208]	; 0xd0
   23320:	add	r0, r0, #4
   23324:	cmp	r2, r1
   23328:	bge	2395c <__assert_fail@plt+0x11a94>
   2332c:	add	r3, r2, #1
   23330:	str	r3, [sp, #144]	; 0x90
   23334:	ldr	r2, [r0, r2, lsl #2]
   23338:	cmp	r2, #0
   2333c:	mov	r2, r3
   23340:	beq	23324 <__assert_fail@plt+0x1145c>
   23344:	sub	r0, fp, #196	; 0xc4
   23348:	add	r1, sp, #104	; 0x68
   2334c:	mov	r2, #0
   23350:	mov	r9, r8
   23354:	mov	r8, ip
   23358:	bl	2e818 <__assert_fail@plt+0x1c950>
   2335c:	cmp	r0, #0
   23360:	mov	r6, r0
   23364:	ldreq	r0, [fp, #-196]	; 0xffffff3c
   23368:	cmpeq	r0, #0
   2336c:	bne	23384 <__assert_fail@plt+0x114bc>
   23370:	ldr	r0, [sp, #204]	; 0xcc
   23374:	mov	ip, r8
   23378:	mov	r8, r9
   2337c:	mov	r9, #1
   23380:	b	23318 <__assert_fail@plt+0x11450>
   23384:	mov	ip, r8
   23388:	mov	r8, r9
   2338c:	cmp	r6, #0
   23390:	mov	r9, #1
   23394:	bne	23274 <__assert_fail@plt+0x113ac>
   23398:	b	2395c <__assert_fail@plt+0x11a94>
   2339c:	ldr	r0, [r5, #8]
   233a0:	cmp	r0, #1
   233a4:	blt	2385c <__assert_fail@plt+0x11994>
   233a8:	ldr	lr, [sp, #188]	; 0xbc
   233ac:	mov	r3, #0
   233b0:	str	ip, [sp, #8]
   233b4:	str	lr, [sp, #16]
   233b8:	b	233cc <__assert_fail@plt+0x11504>
   233bc:	ldr	r0, [r5, #8]
   233c0:	add	r3, r3, #1
   233c4:	cmp	r3, r0
   233c8:	bge	2385c <__assert_fail@plt+0x11994>
   233cc:	ldr	r0, [r5, #12]
   233d0:	ldr	r2, [r0, r3, lsl #2]
   233d4:	ldr	r0, [lr]
   233d8:	add	r0, r0, r2, lsl #3
   233dc:	mov	r1, r2
   233e0:	str	r2, [sp, #28]
   233e4:	ldr	r1, [r0, #4]
   233e8:	tst	r1, #1048576	; 0x100000
   233ec:	beq	233bc <__assert_fail@plt+0x114f4>
   233f0:	movw	r0, #65280	; 0xff00
   233f4:	str	r3, [sp, #20]
   233f8:	movt	r0, #3
   233fc:	tst	r1, r0
   23400:	beq	23514 <__assert_fail@plt+0x1164c>
   23404:	ldr	r0, [sp, #144]	; 0x90
   23408:	str	r1, [sp, #12]
   2340c:	cmn	r0, #1
   23410:	ble	2344c <__assert_fail@plt+0x11584>
   23414:	ldr	r1, [sp, #152]	; 0x98
   23418:	cmp	r1, r0
   2341c:	beq	23730 <__assert_fail@plt+0x11868>
   23420:	ldr	r1, [sp, #184]	; 0xb8
   23424:	cmp	r1, #2
   23428:	blt	23454 <__assert_fail@plt+0x1158c>
   2342c:	ldr	r1, [sp, #112]	; 0x70
   23430:	ldr	r3, [sp, #20]
   23434:	ldr	r6, [r1, r0, lsl #2]
   23438:	cmn	r6, #1
   2343c:	bne	23490 <__assert_fail@plt+0x115c8>
   23440:	sub	r0, r0, #1
   23444:	cmn	r0, #1
   23448:	bne	23434 <__assert_fail@plt+0x1156c>
   2344c:	ldr	r1, [sp, #164]	; 0xa4
   23450:	b	234b8 <__assert_fail@plt+0x115f0>
   23454:	ldr	r1, [sp, #108]	; 0x6c
   23458:	ldr	r2, [sp, #172]	; 0xac
   2345c:	ldrb	r0, [r1, r0]
   23460:	ubfx	r1, r0, #5, #3
   23464:	and	r6, r0, #31
   23468:	ldr	r3, [r2, r1, lsl #2]
   2346c:	mov	r1, #1
   23470:	mov	r2, #0
   23474:	tst	r3, r1, lsl r6
   23478:	ldr	r3, [sp, #20]
   2347c:	bne	234d4 <__assert_fail@plt+0x1160c>
   23480:	mov	r1, #0
   23484:	cmp	r0, #10
   23488:	beq	234a8 <__assert_fail@plt+0x115e0>
   2348c:	b	234b8 <__assert_fail@plt+0x115f0>
   23490:	ldrb	r0, [sp, #182]	; 0xb6
   23494:	cmp	r0, #0
   23498:	bne	23760 <__assert_fail@plt+0x11898>
   2349c:	mov	r1, #0
   234a0:	cmp	r6, #10
   234a4:	bne	234b8 <__assert_fail@plt+0x115f0>
   234a8:	ldrb	r0, [sp, #181]	; 0xb5
   234ac:	cmp	r0, #0
   234b0:	movwne	r0, #1
   234b4:	lsl	r1, r0, #1
   234b8:	ldr	r6, [sp, #12]
   234bc:	and	r0, r1, #1
   234c0:	eor	r2, r0, #1
   234c4:	tst	r6, #1024	; 0x400
   234c8:	beq	234d4 <__assert_fail@plt+0x1160c>
   234cc:	cmp	r0, #0
   234d0:	beq	233bc <__assert_fail@plt+0x114f4>
   234d4:	ldr	r0, [lr]
   234d8:	ldr	r6, [sp, #28]
   234dc:	cmp	r2, #0
   234e0:	add	r0, r0, r6, lsl #3
   234e4:	ldr	r0, [r0, #4]
   234e8:	bne	234f4 <__assert_fail@plt+0x1162c>
   234ec:	ands	r2, r0, #2048	; 0x800
   234f0:	bne	233bc <__assert_fail@plt+0x114f4>
   234f4:	tst	r1, #2
   234f8:	bne	23504 <__assert_fail@plt+0x1163c>
   234fc:	ands	r2, r0, #8192	; 0x2000
   23500:	bne	233bc <__assert_fail@plt+0x114f4>
   23504:	tst	r1, #8
   23508:	bne	23514 <__assert_fail@plt+0x1164c>
   2350c:	ands	r0, r0, #32768	; 0x8000
   23510:	bne	233bc <__assert_fail@plt+0x114f4>
   23514:	ldr	r3, [sp, #144]	; 0x90
   23518:	ldr	r1, [sp, #28]
   2351c:	mov	r0, lr
   23520:	add	r2, sp, #104	; 0x68
   23524:	bl	30504 <__assert_fail@plt+0x1e63c>
   23528:	ldr	r3, [sp, #20]
   2352c:	ldr	lr, [sp, #16]
   23530:	ldr	ip, [sp, #8]
   23534:	cmp	r0, #0
   23538:	beq	233bc <__assert_fail@plt+0x114f4>
   2353c:	ldr	r1, [sp, #224]	; 0xe0
   23540:	cmp	r1, r0
   23544:	movlt	r1, r0
   23548:	str	r1, [sp, #224]	; 0xe0
   2354c:	ldr	r3, [sp, #144]	; 0x90
   23550:	ldr	r2, [sp, #140]	; 0x8c
   23554:	ldr	r1, [sp, #152]	; 0x98
   23558:	ldr	r6, [sp, #208]	; 0xd0
   2355c:	add	r3, r3, r0
   23560:	cmp	r2, r3
   23564:	str	r3, [sp, #12]
   23568:	cmple	r2, r1
   2356c:	blt	23580 <__assert_fail@plt+0x116b8>
   23570:	ldr	r0, [sp, #132]	; 0x84
   23574:	cmp	r0, r3
   23578:	cmple	r0, r1
   2357c:	bge	2359c <__assert_fail@plt+0x116d4>
   23580:	add	r1, r3, #1
   23584:	add	r0, sp, #104	; 0x68
   23588:	bl	2e614 <__assert_fail@plt+0x1c74c>
   2358c:	ldr	r3, [sp, #12]
   23590:	ldr	lr, [sp, #16]
   23594:	cmp	r0, #0
   23598:	bne	238d0 <__assert_fail@plt+0x11a08>
   2359c:	cmp	r3, r6
   235a0:	ble	235cc <__assert_fail@plt+0x11704>
   235a4:	sub	r0, r3, r6
   235a8:	mov	r1, #0
   235ac:	lsl	r2, r0, #2
   235b0:	ldr	r0, [sp, #204]	; 0xcc
   235b4:	add	r0, r0, r6, lsl #2
   235b8:	add	r0, r0, #4
   235bc:	bl	11d0c <memset@plt>
   235c0:	ldr	r3, [sp, #12]
   235c4:	ldr	lr, [sp, #16]
   235c8:	str	r3, [sp, #208]	; 0xd0
   235cc:	mov	r0, #0
   235d0:	ldr	r2, [sp, #28]
   235d4:	str	r0, [fp, #-48]	; 0xffffffd0
   235d8:	ldr	r0, [sp, #204]	; 0xcc
   235dc:	ldr	r1, [lr, #24]
   235e0:	ldr	r6, [r0, r3, lsl #2]
   235e4:	ldr	r0, [lr, #12]
   235e8:	ldr	r0, [r0, r2, lsl #2]
   235ec:	cmp	r6, #0
   235f0:	add	r0, r0, r0, lsl #1
   235f4:	add	r2, r1, r0, lsl #2
   235f8:	beq	2361c <__assert_fail@plt+0x11754>
   235fc:	ldr	r1, [r6, #40]	; 0x28
   23600:	sub	r0, fp, #192	; 0xc0
   23604:	bl	2ea58 <__assert_fail@plt+0x1cb90>
   23608:	ldr	r3, [sp, #12]
   2360c:	cmp	r0, #0
   23610:	str	r0, [fp, #-48]	; 0xffffffd0
   23614:	beq	2362c <__assert_fail@plt+0x11764>
   23618:	b	238f0 <__assert_fail@plt+0x11a28>
   2361c:	vldr	d16, [r2]
   23620:	ldr	r0, [r2, #8]
   23624:	str	r0, [fp, #-184]	; 0xffffff48
   23628:	vstr	d16, [fp, #-192]	; 0xffffff40
   2362c:	cmp	r3, #0
   23630:	str	r6, [sp, #4]
   23634:	ble	23744 <__assert_fail@plt+0x1187c>
   23638:	ldr	r1, [sp, #152]	; 0x98
   2363c:	sub	r0, r3, #1
   23640:	cmp	r1, r0
   23644:	ldr	r1, [sp, #16]
   23648:	beq	23750 <__assert_fail@plt+0x11888>
   2364c:	ldr	r2, [sp, #184]	; 0xb8
   23650:	cmp	r2, #2
   23654:	blt	2367c <__assert_fail@plt+0x117b4>
   23658:	ldr	r2, [sp, #112]	; 0x70
   2365c:	ldr	r6, [r2, r0, lsl #2]
   23660:	cmn	r6, #1
   23664:	bne	236ac <__assert_fail@plt+0x117e4>
   23668:	sub	r0, r0, #1
   2366c:	cmn	r0, #1
   23670:	bne	2365c <__assert_fail@plt+0x11794>
   23674:	ldr	r3, [sp, #164]	; 0xa4
   23678:	b	236d4 <__assert_fail@plt+0x1180c>
   2367c:	ldr	r3, [sp, #108]	; 0x6c
   23680:	ldr	r2, [sp, #172]	; 0xac
   23684:	ldrb	r0, [r3, r0]
   23688:	ubfx	r3, r0, #5, #3
   2368c:	ldr	r6, [r2, r3, lsl #2]
   23690:	and	r2, r0, #31
   23694:	mov	r3, #1
   23698:	tst	r6, r3, lsl r2
   2369c:	moveq	r3, #0
   236a0:	cmpeq	r0, #10
   236a4:	bne	236d4 <__assert_fail@plt+0x1180c>
   236a8:	b	236c4 <__assert_fail@plt+0x117fc>
   236ac:	ldrb	r0, [sp, #182]	; 0xb6
   236b0:	cmp	r0, #0
   236b4:	bne	237a0 <__assert_fail@plt+0x118d8>
   236b8:	mov	r3, #0
   236bc:	cmp	r6, #10
   236c0:	bne	236d4 <__assert_fail@plt+0x1180c>
   236c4:	ldrb	r0, [sp, #181]	; 0xb5
   236c8:	cmp	r0, #0
   236cc:	movwne	r0, #1
   236d0:	lsl	r3, r0, #1
   236d4:	sub	r0, fp, #48	; 0x30
   236d8:	sub	r2, fp, #192	; 0xc0
   236dc:	bl	2c208 <__assert_fail@plt+0x1a340>
   236e0:	ldr	r1, [sp, #204]	; 0xcc
   236e4:	ldr	r2, [sp, #12]
   236e8:	str	r0, [r1, r2, lsl #2]
   236ec:	ldr	r0, [sp, #4]
   236f0:	cmp	r0, #0
   236f4:	beq	23704 <__assert_fail@plt+0x1183c>
   236f8:	ldr	r0, [fp, #-184]	; 0xffffff48
   236fc:	bl	17c10 <__assert_fail@plt+0x5d48>
   23700:	ldr	r2, [sp, #12]
   23704:	ldr	r0, [sp, #204]	; 0xcc
   23708:	ldr	ip, [sp, #8]
   2370c:	ldr	lr, [sp, #16]
   23710:	ldr	r3, [sp, #20]
   23714:	ldr	r0, [r0, r2, lsl #2]
   23718:	cmp	r0, #0
   2371c:	bne	233bc <__assert_fail@plt+0x114f4>
   23720:	ldr	r0, [fp, #-48]	; 0xffffffd0
   23724:	cmp	r0, #0
   23728:	beq	233bc <__assert_fail@plt+0x114f4>
   2372c:	b	238d8 <__assert_fail@plt+0x11a10>
   23730:	ldr	r0, [sp, #192]	; 0xc0
   23734:	ldr	r3, [sp, #20]
   23738:	and	r0, r0, #2
   2373c:	eor	r1, r0, #10
   23740:	b	234b8 <__assert_fail@plt+0x115f0>
   23744:	ldr	r3, [sp, #164]	; 0xa4
   23748:	ldr	r1, [sp, #16]
   2374c:	b	236d4 <__assert_fail@plt+0x1180c>
   23750:	ldr	r0, [sp, #192]	; 0xc0
   23754:	and	r0, r0, #2
   23758:	eor	r3, r0, #10
   2375c:	b	236d4 <__assert_fail@plt+0x1180c>
   23760:	mov	r0, r6
   23764:	str	r8, [sp, #4]
   23768:	mov	r8, ip
   2376c:	bl	11ce8 <iswalnum@plt>
   23770:	mov	r1, #1
   23774:	mov	r2, #0
   23778:	cmp	r6, #95	; 0x5f
   2377c:	beq	237c8 <__assert_fail@plt+0x11900>
   23780:	mov	ip, r8
   23784:	ldr	r8, [sp, #4]
   23788:	ldr	lr, [sp, #16]
   2378c:	ldr	r3, [sp, #20]
   23790:	cmp	r0, #0
   23794:	mov	r9, #1
   23798:	beq	2349c <__assert_fail@plt+0x115d4>
   2379c:	b	234d4 <__assert_fail@plt+0x1160c>
   237a0:	mov	r0, r6
   237a4:	bl	11ce8 <iswalnum@plt>
   237a8:	mov	r3, #1
   237ac:	cmp	r6, #95	; 0x5f
   237b0:	beq	237e0 <__assert_fail@plt+0x11918>
   237b4:	ldr	r1, [sp, #16]
   237b8:	cmp	r0, #0
   237bc:	mov	r9, #1
   237c0:	beq	236b8 <__assert_fail@plt+0x117f0>
   237c4:	b	236d4 <__assert_fail@plt+0x1180c>
   237c8:	mov	ip, r8
   237cc:	ldr	r8, [sp, #4]
   237d0:	ldr	lr, [sp, #16]
   237d4:	ldr	r3, [sp, #20]
   237d8:	mov	r9, #1
   237dc:	b	234d4 <__assert_fail@plt+0x1160c>
   237e0:	ldr	r1, [sp, #16]
   237e4:	mov	r9, #1
   237e8:	b	236d4 <__assert_fail@plt+0x1180c>
   237ec:	add	r1, r0, #2
   237f0:	add	r0, sp, #104	; 0x68
   237f4:	mov	r6, ip
   237f8:	bl	2e614 <__assert_fail@plt+0x1c74c>
   237fc:	mov	ip, r6
   23800:	cmp	r0, #0
   23804:	str	r0, [fp, #-196]	; 0xffffff3c
   23808:	beq	231d8 <__assert_fail@plt+0x11310>
   2380c:	b	251ec <__assert_fail@plt+0x13324>
   23810:	ldr	r0, [sp, #144]	; 0x90
   23814:	cmp	r0, #0
   23818:	ble	23854 <__assert_fail@plt+0x1198c>
   2381c:	ldr	r1, [sp, #152]	; 0x98
   23820:	sub	r3, r0, #1
   23824:	cmp	r1, r3
   23828:	beq	238f8 <__assert_fail@plt+0x11a30>
   2382c:	ldr	r1, [sp, #184]	; 0xb8
   23830:	cmp	r1, #2
   23834:	blt	23868 <__assert_fail@plt+0x119a0>
   23838:	ldr	r1, [sp, #112]	; 0x70
   2383c:	ldr	r0, [r1, r3, lsl #2]
   23840:	cmn	r0, #1
   23844:	bne	23890 <__assert_fail@plt+0x119c8>
   23848:	sub	r3, r3, #1
   2384c:	cmn	r3, #1
   23850:	bne	2383c <__assert_fail@plt+0x11974>
   23854:	ldr	r1, [sp, #164]	; 0xa4
   23858:	b	238b8 <__assert_fail@plt+0x119f0>
   2385c:	mov	r0, #0
   23860:	str	r0, [fp, #-196]	; 0xffffff3c
   23864:	b	231e4 <__assert_fail@plt+0x1131c>
   23868:	ldr	r1, [sp, #108]	; 0x6c
   2386c:	ldr	lr, [sp, #172]	; 0xac
   23870:	ldrb	r0, [r1, r3]
   23874:	ubfx	r1, r0, #5, #3
   23878:	and	r3, r0, #31
   2387c:	ldr	lr, [lr, r1, lsl #2]
   23880:	mov	r1, #1
   23884:	tst	lr, r1, lsl r3
   23888:	bne	238b8 <__assert_fail@plt+0x119f0>
   2388c:	b	2389c <__assert_fail@plt+0x119d4>
   23890:	ldrb	r1, [sp, #182]	; 0xb6
   23894:	cmp	r1, #0
   23898:	bne	23900 <__assert_fail@plt+0x11a38>
   2389c:	mov	r1, #0
   238a0:	cmp	r0, #10
   238a4:	bne	238b8 <__assert_fail@plt+0x119f0>
   238a8:	ldrb	r0, [sp, #181]	; 0xb5
   238ac:	cmp	r0, #0
   238b0:	movwne	r0, #1
   238b4:	lsl	r1, r0, #1
   238b8:	bfi	r6, r1, #8, #1
   238bc:	ldr	r6, [r2, r6, lsl #2]
   238c0:	ldr	r0, [sp, #204]	; 0xcc
   238c4:	cmp	r0, #0
   238c8:	bne	23250 <__assert_fail@plt+0x11388>
   238cc:	b	2326c <__assert_fail@plt+0x113a4>
   238d0:	ldr	ip, [sp, #8]
   238d4:	str	r0, [fp, #-48]	; 0xffffffd0
   238d8:	mov	r6, #0
   238dc:	str	r0, [fp, #-196]	; 0xffffff3c
   238e0:	ldr	r0, [sp, #204]	; 0xcc
   238e4:	cmp	r0, #0
   238e8:	bne	23250 <__assert_fail@plt+0x11388>
   238ec:	b	2326c <__assert_fail@plt+0x113a4>
   238f0:	ldr	ip, [sp, #8]
   238f4:	b	238d8 <__assert_fail@plt+0x11a10>
   238f8:	mov	r1, #10
   238fc:	b	238b8 <__assert_fail@plt+0x119f0>
   23900:	str	r8, [sp, #4]
   23904:	str	r2, [sp, #28]
   23908:	mov	r8, ip
   2390c:	mov	r9, r0
   23910:	bl	11ce8 <iswalnum@plt>
   23914:	mov	r1, #1
   23918:	cmp	r9, #95	; 0x5f
   2391c:	beq	23944 <__assert_fail@plt+0x11a7c>
   23920:	mov	ip, r8
   23924:	ldr	r8, [sp, #4]
   23928:	ldr	r2, [sp, #28]
   2392c:	mov	r3, r9
   23930:	cmp	r0, #0
   23934:	mov	r9, #1
   23938:	mov	r0, r3
   2393c:	beq	2389c <__assert_fail@plt+0x119d4>
   23940:	b	238b8 <__assert_fail@plt+0x119f0>
   23944:	mov	ip, r8
   23948:	ldr	r8, [sp, #4]
   2394c:	ldr	r2, [sp, #28]
   23950:	mov	r9, #1
   23954:	b	238b8 <__assert_fail@plt+0x119f0>
   23958:	ldr	sl, [sp, #40]	; 0x28
   2395c:	cmp	sl, #0
   23960:	ldrne	r0, [sl]
   23964:	addne	r0, r0, ip
   23968:	strne	r0, [sl]
   2396c:	ldr	sl, [sp, #68]	; 0x44
   23970:	cmn	r4, #1
   23974:	beq	23dc0 <__assert_fail@plt+0x11ef8>
   23978:	cmn	r4, #2
   2397c:	beq	251ec <__assert_fail@plt+0x13324>
   23980:	ldr	sl, [sp, #64]	; 0x40
   23984:	str	r4, [sp, #196]	; 0xc4
   23988:	ldr	r1, [sp, #92]	; 0x5c
   2398c:	ldr	r9, [sp, #96]	; 0x60
   23990:	ldrb	r0, [sl, #28]
   23994:	cmp	r1, #2
   23998:	bcc	239a4 <__assert_fail@plt+0x11adc>
   2399c:	ands	r1, r0, #16
   239a0:	beq	239b0 <__assert_fail@plt+0x11ae8>
   239a4:	ldr	r1, [r9, #76]	; 0x4c
   239a8:	cmp	r1, #0
   239ac:	beq	239cc <__assert_fail@plt+0x11b04>
   239b0:	ldr	r0, [sp, #204]	; 0xcc
   239b4:	mov	r2, r4
   239b8:	ldr	r1, [r0, r4, lsl #2]
   239bc:	add	r0, sp, #104	; 0x68
   239c0:	bl	2d80c <__assert_fail@plt+0x1b944>
   239c4:	str	r0, [sp, #200]	; 0xc8
   239c8:	ldrb	r0, [sl, #28]
   239cc:	ldr	r1, [sp, #92]	; 0x5c
   239d0:	cmp	r1, #2
   239d4:	bcc	239ec <__assert_fail@plt+0x11b24>
   239d8:	ands	r0, r0, #16
   239dc:	bne	239ec <__assert_fail@plt+0x11b24>
   239e0:	ldrb	r0, [r9, #88]	; 0x58
   239e4:	tst	r0, #1
   239e8:	bne	239f8 <__assert_fail@plt+0x11b30>
   239ec:	ldr	r0, [r9, #76]	; 0x4c
   239f0:	cmp	r0, #0
   239f4:	beq	2414c <__assert_fail@plt+0x12284>
   239f8:	ldr	r9, [sp, #196]	; 0xc4
   239fc:	cmn	r9, #-1073741823	; 0xc0000001
   23a00:	bcs	251ec <__assert_fail@plt+0x13324>
   23a04:	ldr	r0, [sp, #188]	; 0xbc
   23a08:	ldr	r5, [sp, #200]	; 0xc8
   23a0c:	str	r0, [sp, #72]	; 0x48
   23a10:	mov	r0, #4
   23a14:	add	r4, r0, r9, lsl #2
   23a18:	mov	r0, r4
   23a1c:	bl	38450 <__assert_fail@plt+0x26588>
   23a20:	mov	r6, r0
   23a24:	cmp	r0, #0
   23a28:	beq	252ac <__assert_fail@plt+0x133e4>
   23a2c:	ldr	r0, [sp, #72]	; 0x48
   23a30:	ldr	r0, [r0, #76]	; 0x4c
   23a34:	cmp	r0, #0
   23a38:	beq	23c5c <__assert_fail@plt+0x11d94>
   23a3c:	mov	r0, r4
   23a40:	bl	38450 <__assert_fail@plt+0x26588>
   23a44:	cmp	r0, #0
   23a48:	beq	252ac <__assert_fail@plt+0x133e4>
   23a4c:	add	r7, r9, #1
   23a50:	mov	r1, #0
   23a54:	mov	r4, r0
   23a58:	lsl	r2, r7, #2
   23a5c:	bl	11d0c <memset@plt>
   23a60:	ldr	r0, [sp, #36]	; 0x24
   23a64:	mov	r1, #0
   23a68:	str	r9, [fp, #-180]	; 0xffffff4c
   23a6c:	str	r5, [fp, #-184]	; 0xffffff48
   23a70:	str	r4, [fp, #-188]	; 0xffffff44
   23a74:	str	r6, [fp, #-192]	; 0xffffff40
   23a78:	str	r4, [sp, #28]
   23a7c:	str	r1, [r0]
   23a80:	str	r1, [r0, #4]
   23a84:	str	r1, [r0, #8]
   23a88:	add	r0, sp, #104	; 0x68
   23a8c:	sub	r1, fp, #192	; 0xc0
   23a90:	bl	327e0 <__assert_fail@plt+0x20918>
   23a94:	mov	r8, r0
   23a98:	mov	r0, #0
   23a9c:	bl	17c10 <__assert_fail@plt+0x5d48>
   23aa0:	cmp	r8, #0
   23aa4:	bne	240ac <__assert_fail@plt+0x121e4>
   23aa8:	ldr	r0, [r6]
   23aac:	sub	r4, fp, #48	; 0x30
   23ab0:	cmp	r0, #0
   23ab4:	beq	23cb4 <__assert_fail@plt+0x11dec>
   23ab8:	ldr	sl, [sp, #64]	; 0x40
   23abc:	mov	r1, #0
   23ac0:	cmp	r9, #0
   23ac4:	mov	r8, #0
   23ac8:	str	r5, [sp, #16]
   23acc:	str	r6, [sp, #20]
   23ad0:	str	r1, [sp, #12]
   23ad4:	bmi	23b70 <__assert_fail@plt+0x11ca8>
   23ad8:	ldr	r1, [sp, #20]
   23adc:	sub	r6, r7, #1
   23ae0:	ldr	r7, [sp, #28]
   23ae4:	add	r5, r1, #4
   23ae8:	ldr	r2, [r7]
   23aec:	cmp	r0, #0
   23af0:	bne	23b10 <__assert_fail@plt+0x11c48>
   23af4:	b	23b60 <__assert_fail@plt+0x11c98>
   23af8:	ldr	r0, [r5], #4
   23afc:	add	r7, r7, #4
   23b00:	sub	r6, r6, #1
   23b04:	ldr	r2, [r7]
   23b08:	cmp	r0, #0
   23b0c:	beq	23b60 <__assert_fail@plt+0x11c98>
   23b10:	cmp	r2, #0
   23b14:	beq	23b64 <__assert_fail@plt+0x11c9c>
   23b18:	add	r1, r0, #4
   23b1c:	add	r2, r2, #4
   23b20:	mov	r0, r4
   23b24:	bl	2ea58 <__assert_fail@plt+0x1cb90>
   23b28:	cmp	r0, #0
   23b2c:	str	r0, [fp, #-196]	; 0xffffff3c
   23b30:	bne	23ea4 <__assert_fail@plt+0x11fdc>
   23b34:	ldr	r1, [sp, #72]	; 0x48
   23b38:	sub	r0, fp, #196	; 0xc4
   23b3c:	mov	r2, r4
   23b40:	bl	301d4 <__assert_fail@plt+0x1e30c>
   23b44:	str	r0, [r5, #-4]
   23b48:	ldr	r0, [fp, #-40]	; 0xffffffd8
   23b4c:	bl	17c10 <__assert_fail@plt+0x5d48>
   23b50:	ldr	r8, [fp, #-196]	; 0xffffff3c
   23b54:	cmp	r8, #0
   23b58:	beq	23b64 <__assert_fail@plt+0x11c9c>
   23b5c:	b	23b70 <__assert_fail@plt+0x11ca8>
   23b60:	str	r2, [r5, #-4]
   23b64:	cmp	r6, #0
   23b68:	bne	23af8 <__assert_fail@plt+0x11c30>
   23b6c:	mov	r8, #0
   23b70:	ldr	r0, [sp, #28]
   23b74:	bl	17c10 <__assert_fail@plt+0x5d48>
   23b78:	ldr	r6, [sp, #20]
   23b7c:	ldr	r5, [sp, #16]
   23b80:	cmp	r8, #0
   23b84:	beq	24124 <__assert_fail@plt+0x1225c>
   23b88:	b	240ec <__assert_fail@plt+0x12224>
   23b8c:	ldr	r0, [sp, #112]	; 0x70
   23b90:	ldr	r0, [r0]
   23b94:	cmn	r0, #1
   23b98:	bne	23108 <__assert_fail@plt+0x11240>
   23b9c:	b	23dc8 <__assert_fail@plt+0x11f00>
   23ba0:	cmp	ip, #0
   23ba4:	ble	24024 <__assert_fail@plt+0x1215c>
   23ba8:	ldr	r1, [sp, #152]	; 0x98
   23bac:	ldr	r7, [sp, #44]	; 0x2c
   23bb0:	sub	r0, ip, #1
   23bb4:	cmp	r1, r0
   23bb8:	beq	24038 <__assert_fail@plt+0x12170>
   23bbc:	ldr	r1, [sp, #184]	; 0xb8
   23bc0:	cmp	r1, #2
   23bc4:	blt	23bf4 <__assert_fail@plt+0x11d2c>
   23bc8:	ldr	r1, [sp, #112]	; 0x70
   23bcc:	ldr	r5, [r1, r0, lsl #2]
   23bd0:	cmn	r5, #1
   23bd4:	bne	23dfc <__assert_fail@plt+0x11f34>
   23bd8:	sub	r0, r0, #1
   23bdc:	cmn	r0, #1
   23be0:	bne	23bcc <__assert_fail@plt+0x11d04>
   23be4:	ldr	r3, [sp, #164]	; 0xa4
   23be8:	tst	r3, #1
   23bec:	beq	23e28 <__assert_fail@plt+0x11f60>
   23bf0:	b	2404c <__assert_fail@plt+0x12184>
   23bf4:	ldr	r1, [sp, #108]	; 0x6c
   23bf8:	ldr	r2, [sp, #172]	; 0xac
   23bfc:	ldrb	r0, [r1, r0]
   23c00:	ubfx	r1, r0, #5, #3
   23c04:	ldr	r1, [r2, r1, lsl #2]
   23c08:	and	r2, r0, #31
   23c0c:	tst	r1, r9, lsl r2
   23c10:	bne	2404c <__assert_fail@plt+0x12184>
   23c14:	cmp	r0, #10
   23c18:	beq	23e10 <__assert_fail@plt+0x11f48>
   23c1c:	b	24050 <__assert_fail@plt+0x12188>
   23c20:	ldr	r1, [sp, #76]	; 0x4c
   23c24:	mov	r0, #0
   23c28:	cmp	r6, r1
   23c2c:	bge	23c38 <__assert_fail@plt+0x11d70>
   23c30:	ldr	r0, [sp, #100]	; 0x64
   23c34:	ldrb	r0, [r0, r6]
   23c38:	ldrb	r0, [r5, r0]
   23c3c:	cmp	r0, #0
   23c40:	bne	230dc <__assert_fail@plt+0x11214>
   23c44:	sub	r0, r6, #1
   23c48:	cmp	r6, r4
   23c4c:	mov	r6, r0
   23c50:	str	r0, [fp, #-200]	; 0xffffff38
   23c54:	bgt	23c24 <__assert_fail@plt+0x11d5c>
   23c58:	b	25184 <__assert_fail@plt+0x132bc>
   23c5c:	ldr	r0, [sp, #36]	; 0x24
   23c60:	mov	r1, #0
   23c64:	str	r9, [fp, #-180]	; 0xffffff4c
   23c68:	str	r5, [fp, #-184]	; 0xffffff48
   23c6c:	str	r1, [fp, #-188]	; 0xffffff44
   23c70:	str	r6, [fp, #-192]	; 0xffffff40
   23c74:	str	r1, [r0]
   23c78:	str	r1, [r0, #4]
   23c7c:	str	r1, [r0, #8]
   23c80:	add	r0, sp, #104	; 0x68
   23c84:	sub	r1, fp, #192	; 0xc0
   23c88:	bl	327e0 <__assert_fail@plt+0x20918>
   23c8c:	mov	r8, r0
   23c90:	mov	r0, #0
   23c94:	bl	17c10 <__assert_fail@plt+0x5d48>
   23c98:	cmp	r8, #0
   23c9c:	bne	240b4 <__assert_fail@plt+0x121ec>
   23ca0:	ldr	r0, [r6]
   23ca4:	mov	r8, #0
   23ca8:	cmp	r0, #0
   23cac:	beq	23da8 <__assert_fail@plt+0x11ee0>
   23cb0:	b	24124 <__assert_fail@plt+0x1225c>
   23cb4:	ldr	r8, [sp, #28]
   23cb8:	ldr	r1, [r8]
   23cbc:	cmp	r1, #0
   23cc0:	bne	23e9c <__assert_fail@plt+0x11fd4>
   23cc4:	cmp	r9, #1
   23cc8:	blt	23da8 <__assert_fail@plt+0x11ee0>
   23ccc:	ldr	r0, [sp, #204]	; 0xcc
   23cd0:	lsl	r4, r9, #2
   23cd4:	add	sl, r9, #1
   23cd8:	sub	r0, r0, #4
   23cdc:	ldr	r1, [r0, r4]
   23ce0:	cmp	r1, #0
   23ce4:	bne	23d04 <__assert_fail@plt+0x11e3c>
   23ce8:	sub	sl, sl, #1
   23cec:	sub	r4, r4, #4
   23cf0:	cmp	sl, #2
   23cf4:	blt	23da8 <__assert_fail@plt+0x11ee0>
   23cf8:	ldr	r1, [r0, r4]
   23cfc:	cmp	r1, #0
   23d00:	beq	23ce8 <__assert_fail@plt+0x11e20>
   23d04:	ldrb	r2, [r1, #52]	; 0x34
   23d08:	tst	r2, #16
   23d0c:	beq	23ce8 <__assert_fail@plt+0x11e20>
   23d10:	sub	r9, sl, #2
   23d14:	add	r5, sp, #104	; 0x68
   23d18:	mov	r0, r5
   23d1c:	mov	r2, r9
   23d20:	bl	2d80c <__assert_fail@plt+0x1b944>
   23d24:	mov	r5, r0
   23d28:	mov	r0, r8
   23d2c:	mov	r1, #0
   23d30:	mov	r2, r4
   23d34:	bl	11d0c <memset@plt>
   23d38:	ldr	r0, [sp, #36]	; 0x24
   23d3c:	mov	r1, #0
   23d40:	str	r9, [fp, #-180]	; 0xffffff4c
   23d44:	str	r5, [fp, #-184]	; 0xffffff48
   23d48:	str	r8, [fp, #-188]	; 0xffffff44
   23d4c:	str	r6, [fp, #-192]	; 0xffffff40
   23d50:	mov	r7, r5
   23d54:	str	r1, [r0]
   23d58:	str	r1, [r0, #4]
   23d5c:	str	r1, [r0, #8]
   23d60:	add	r0, sp, #104	; 0x68
   23d64:	sub	r1, fp, #192	; 0xc0
   23d68:	bl	327e0 <__assert_fail@plt+0x20918>
   23d6c:	mov	r8, r0
   23d70:	mov	r0, #0
   23d74:	bl	17c10 <__assert_fail@plt+0x5d48>
   23d78:	cmp	r8, #0
   23d7c:	bne	240e0 <__assert_fail@plt+0x12218>
   23d80:	ldr	r0, [r6]
   23d84:	sub	r1, sl, #1
   23d88:	mov	r5, r7
   23d8c:	sub	r4, fp, #48	; 0x30
   23d90:	mov	r7, r1
   23d94:	cmp	r0, #0
   23d98:	beq	23cb4 <__assert_fail@plt+0x11dec>
   23d9c:	sub	r9, sl, #2
   23da0:	sub	r7, sl, #1
   23da4:	b	23ab8 <__assert_fail@plt+0x11bf0>
   23da8:	mov	r0, r6
   23dac:	bl	17c10 <__assert_fail@plt+0x5d48>
   23db0:	mov	r0, r8
   23db4:	bl	17c10 <__assert_fail@plt+0x5d48>
   23db8:	ldr	sl, [sp, #68]	; 0x44
   23dbc:	mov	r9, #1
   23dc0:	add	r0, sp, #104	; 0x68
   23dc4:	bl	2d9b4 <__assert_fail@plt+0x1baec>
   23dc8:	ldr	r0, [fp, #-200]	; 0xffffff38
   23dcc:	ldr	r4, [sp, #48]	; 0x30
   23dd0:	ldr	r7, [sp, #52]	; 0x34
   23dd4:	mov	r8, #1
   23dd8:	add	r6, r0, sl
   23ddc:	cmp	r6, r4
   23de0:	str	r6, [fp, #-200]	; 0xffffff38
   23de4:	blt	25184 <__assert_fail@plt+0x132bc>
   23de8:	ldr	r5, [sp, #88]	; 0x58
   23dec:	ldr	ip, [sp, #84]	; 0x54
   23df0:	cmp	r7, r6
   23df4:	bge	22f5c <__assert_fail@plt+0x11094>
   23df8:	b	25184 <__assert_fail@plt+0x132bc>
   23dfc:	ldrb	r0, [sp, #182]	; 0xb6
   23e00:	cmp	r0, #0
   23e04:	bne	240bc <__assert_fail@plt+0x121f4>
   23e08:	cmp	r5, #10
   23e0c:	bne	24050 <__assert_fail@plt+0x12188>
   23e10:	ldrb	r0, [sp, #181]	; 0xb5
   23e14:	cmp	r0, #0
   23e18:	movwne	r0, #1
   23e1c:	lsl	r3, r0, #1
   23e20:	tst	r3, #1
   23e24:	bne	2404c <__assert_fail@plt+0x12184>
   23e28:	cmp	r3, #0
   23e2c:	beq	24050 <__assert_fail@plt+0x12188>
   23e30:	ands	r1, r3, #2
   23e34:	and	r0, r3, #4
   23e38:	cmpne	r0, #0
   23e3c:	bne	23e7c <__assert_fail@plt+0x11fb4>
   23e40:	cmp	r1, #0
   23e44:	bne	23e8c <__assert_fail@plt+0x11fc4>
   23e48:	ldr	r6, [r4, #36]	; 0x24
   23e4c:	cmp	r0, #0
   23e50:	beq	24050 <__assert_fail@plt+0x12188>
   23e54:	ldr	r2, [r6, #40]	; 0x28
   23e58:	sub	r0, fp, #196	; 0xc4
   23e5c:	mov	r1, r4
   23e60:	mov	r5, ip
   23e64:	bl	2c208 <__assert_fail@plt+0x1a340>
   23e68:	mov	ip, r5
   23e6c:	mov	r6, r0
   23e70:	cmp	r6, #0
   23e74:	bne	23140 <__assert_fail@plt+0x11278>
   23e78:	b	251ec <__assert_fail@plt+0x13324>
   23e7c:	ldr	r6, [r4, #48]	; 0x30
   23e80:	cmp	r6, #0
   23e84:	bne	23140 <__assert_fail@plt+0x11278>
   23e88:	b	251ec <__assert_fail@plt+0x13324>
   23e8c:	ldr	r6, [r4, #44]	; 0x2c
   23e90:	cmp	r6, #0
   23e94:	bne	23140 <__assert_fail@plt+0x11278>
   23e98:	b	251ec <__assert_fail@plt+0x13324>
   23e9c:	mov	r2, r7
   23ea0:	b	23ab8 <__assert_fail@plt+0x11bf0>
   23ea4:	mov	r8, r0
   23ea8:	b	23b70 <__assert_fail@plt+0x11ca8>
   23eac:	sxtb	r0, r0
   23eb0:	cmn	r0, #1
   23eb4:	ble	2405c <__assert_fail@plt+0x12194>
   23eb8:	mov	r0, #1
   23ebc:	mov	r4, ip
   23ec0:	str	r0, [sp, #72]	; 0x48
   23ec4:	ldr	r0, [sp, #56]	; 0x38
   23ec8:	cmp	r0, #0
   23ecc:	bne	2317c <__assert_fail@plt+0x112b4>
   23ed0:	b	2409c <__assert_fail@plt+0x121d4>
   23ed4:	ldr	r0, [r6, #8]
   23ed8:	cmp	r0, #1
   23edc:	blt	23fb0 <__assert_fail@plt+0x120e8>
   23ee0:	ldr	r4, [sp, #188]	; 0xbc
   23ee4:	mov	r5, #0
   23ee8:	str	ip, [sp, #8]
   23eec:	b	23f1c <__assert_fail@plt+0x12054>
   23ef0:	add	r1, r1, #1
   23ef4:	str	r7, [r0, #4]
   23ef8:	ldr	ip, [sp, #8]
   23efc:	mov	r9, #1
   23f00:	str	r1, [sp, #228]	; 0xe4
   23f04:	mov	r1, #0
   23f08:	str	r1, [r0]
   23f0c:	ldr	r0, [r6, #8]
   23f10:	add	r5, r5, #1
   23f14:	cmp	r5, r0
   23f18:	bge	23fb0 <__assert_fail@plt+0x120e8>
   23f1c:	ldr	r1, [r6, #12]
   23f20:	ldr	r7, [r1, r5, lsl #2]
   23f24:	ldr	r1, [r4]
   23f28:	add	r2, r1, r7, lsl #3
   23f2c:	ldrb	r2, [r2, #4]
   23f30:	cmp	r2, #8
   23f34:	bne	23f10 <__assert_fail@plt+0x12048>
   23f38:	ldr	r1, [r1, r7, lsl #3]
   23f3c:	cmp	r1, #31
   23f40:	bgt	23f10 <__assert_fail@plt+0x12048>
   23f44:	ldr	r2, [r4, #80]	; 0x50
   23f48:	tst	r2, r9, lsl r1
   23f4c:	beq	23f10 <__assert_fail@plt+0x12048>
   23f50:	ldr	r0, [sp, #228]	; 0xe4
   23f54:	ldr	r9, [sp, #232]	; 0xe8
   23f58:	cmp	r0, r9
   23f5c:	beq	23f8c <__assert_fail@plt+0x120c4>
   23f60:	mov	r0, #1
   23f64:	mov	r1, #24
   23f68:	bl	383fc <__assert_fail@plt+0x26534>
   23f6c:	ldr	r1, [sp, #228]	; 0xe4
   23f70:	ldr	r2, [sp, #236]	; 0xec
   23f74:	str	r0, [r2, r1, lsl #2]
   23f78:	ldr	r0, [sp, #236]	; 0xec
   23f7c:	ldr	r0, [r0, r1, lsl #2]
   23f80:	cmp	r0, #0
   23f84:	bne	23ef0 <__assert_fail@plt+0x12028>
   23f88:	b	2411c <__assert_fail@plt+0x12254>
   23f8c:	ldr	r0, [sp, #236]	; 0xec
   23f90:	lsl	r1, r9, #3
   23f94:	bl	38480 <__assert_fail@plt+0x265b8>
   23f98:	cmp	r0, #0
   23f9c:	beq	2411c <__assert_fail@plt+0x12254>
   23fa0:	str	r0, [sp, #236]	; 0xec
   23fa4:	lsl	r0, r9, #1
   23fa8:	str	r0, [sp, #232]	; 0xe8
   23fac:	b	23f60 <__assert_fail@plt+0x12098>
   23fb0:	mov	r8, #0
   23fb4:	str	r8, [fp, #-196]	; 0xffffff3c
   23fb8:	ldrb	r0, [r6, #52]	; 0x34
   23fbc:	tst	r0, #64	; 0x40
   23fc0:	beq	23164 <__assert_fail@plt+0x1129c>
   23fc4:	add	r1, r6, #4
   23fc8:	add	r0, sp, #104	; 0x68
   23fcc:	mov	r4, ip
   23fd0:	bl	2dc40 <__assert_fail@plt+0x1bd78>
   23fd4:	mov	ip, r4
   23fd8:	cmp	r0, #0
   23fdc:	str	r0, [fp, #-196]	; 0xffffff3c
   23fe0:	beq	23164 <__assert_fail@plt+0x1129c>
   23fe4:	mov	r4, r0
   23fe8:	cmn	r4, #1
   23fec:	bne	23978 <__assert_fail@plt+0x11ab0>
   23ff0:	b	23dc0 <__assert_fail@plt+0x11ef8>
   23ff4:	ldr	r1, [sp, #76]	; 0x4c
   23ff8:	mov	r0, #0
   23ffc:	mov	r6, r7
   24000:	cmp	r7, r1
   24004:	ldr	r1, [sp, #100]	; 0x64
   24008:	ldrblt	r0, [r1, r7]
   2400c:	cmp	ip, #0
   24010:	ldrbne	r0, [ip, r0]
   24014:	ldrb	r0, [r5, r0]
   24018:	cmp	r0, #0
   2401c:	bne	230dc <__assert_fail@plt+0x11214>
   24020:	b	253ec <__assert_fail@plt+0x13524>
   24024:	ldr	r3, [sp, #164]	; 0xa4
   24028:	ldr	r7, [sp, #44]	; 0x2c
   2402c:	tst	r3, #1
   24030:	beq	23e28 <__assert_fail@plt+0x11f60>
   24034:	b	2404c <__assert_fail@plt+0x12184>
   24038:	ldr	r0, [sp, #192]	; 0xc0
   2403c:	and	r0, r0, #2
   24040:	eor	r3, r0, #10
   24044:	tst	r3, #1
   24048:	beq	23e28 <__assert_fail@plt+0x11f60>
   2404c:	ldr	r6, [r4, #40]	; 0x28
   24050:	cmp	r6, #0
   24054:	bne	23140 <__assert_fail@plt+0x11278>
   24058:	b	251ec <__assert_fail@plt+0x13324>
   2405c:	add	r0, sp, #104	; 0x68
   24060:	mov	r1, r6
   24064:	mov	r2, ip
   24068:	mov	r4, ip
   2406c:	bl	2d80c <__assert_fail@plt+0x1b944>
   24070:	clz	r1, r0
   24074:	cmp	r0, #0
   24078:	mov	ip, r4
   2407c:	lsr	r2, r1, #5
   24080:	ldr	r1, [sp, #56]	; 0x38
   24084:	movwne	r0, #1
   24088:	mvneq	r4, #0
   2408c:	str	r0, [sp, #72]	; 0x48
   24090:	orr	r1, r1, r2
   24094:	cmp	r1, #0
   24098:	bne	2317c <__assert_fail@plt+0x112b4>
   2409c:	mov	r4, ip
   240a0:	cmn	r4, #1
   240a4:	bne	23978 <__assert_fail@plt+0x11ab0>
   240a8:	b	23dc0 <__assert_fail@plt+0x11ef8>
   240ac:	ldr	r0, [sp, #28]
   240b0:	b	240e8 <__assert_fail@plt+0x12220>
   240b4:	mov	r0, #0
   240b8:	b	240e8 <__assert_fail@plt+0x12220>
   240bc:	mov	r0, r5
   240c0:	mov	r8, ip
   240c4:	bl	11ce8 <iswalnum@plt>
   240c8:	mov	ip, r8
   240cc:	cmp	r5, #95	; 0x5f
   240d0:	beq	2404c <__assert_fail@plt+0x12184>
   240d4:	cmp	r0, #0
   240d8:	beq	23e08 <__assert_fail@plt+0x11f40>
   240dc:	b	2404c <__assert_fail@plt+0x12184>
   240e0:	ldr	r0, [sp, #28]
   240e4:	ldr	sl, [sp, #64]	; 0x40
   240e8:	str	r0, [sp, #12]
   240ec:	mov	r0, r6
   240f0:	bl	17c10 <__assert_fail@plt+0x5d48>
   240f4:	ldr	r0, [sp, #12]
   240f8:	bl	17c10 <__assert_fail@plt+0x5d48>
   240fc:	ldr	r9, [sp, #96]	; 0x60
   24100:	cmp	r8, #0
   24104:	beq	2414c <__assert_fail@plt+0x12284>
   24108:	ldr	sl, [sp, #68]	; 0x44
   2410c:	cmp	r8, #1
   24110:	mov	r9, #1
   24114:	beq	23dc0 <__assert_fail@plt+0x11ef8>
   24118:	b	25184 <__assert_fail@plt+0x132bc>
   2411c:	mov	r4, #12
   24120:	b	23980 <__assert_fail@plt+0x11ab8>
   24124:	ldr	r0, [sp, #204]	; 0xcc
   24128:	bl	17c10 <__assert_fail@plt+0x5d48>
   2412c:	mov	r0, #0
   24130:	str	r5, [sp, #200]	; 0xc8
   24134:	str	r6, [sp, #204]	; 0xcc
   24138:	str	r9, [sp, #196]	; 0xc4
   2413c:	bl	17c10 <__assert_fail@plt+0x5d48>
   24140:	mov	r0, #0
   24144:	bl	17c10 <__assert_fail@plt+0x5d48>
   24148:	ldr	r9, [sp, #96]	; 0x60
   2414c:	ldr	r0, [sp, #92]	; 0x5c
   24150:	cmp	r0, #0
   24154:	beq	25180 <__assert_fail@plt+0x132b8>
   24158:	ldr	r0, [sp, #92]	; 0x5c
   2415c:	ldr	r1, [fp, #16]
   24160:	ldr	r8, [fp, #20]
   24164:	cmp	r0, #1
   24168:	beq	24188 <__assert_fail@plt+0x122c0>
   2416c:	ldr	r0, [sp, #32]
   24170:	mvn	r0, r0
   24174:	add	r0, r0, r1
   24178:	mov	r1, #255	; 0xff
   2417c:	lsl	r2, r0, #3
   24180:	add	r0, r8, #8
   24184:	bl	11d0c <memset@plt>
   24188:	mov	r0, #0
   2418c:	ldr	r1, [sp, #196]	; 0xc4
   24190:	stm	r8, {r0, r1}
   24194:	ldr	r0, [sp, #92]	; 0x5c
   24198:	cmp	r0, #2
   2419c:	bcc	25080 <__assert_fail@plt+0x131b8>
   241a0:	ldrb	r0, [sl, #28]
   241a4:	ands	r0, r0, #16
   241a8:	bne	25080 <__assert_fail@plt+0x131b8>
   241ac:	ldrb	r1, [r9, #88]	; 0x58
   241b0:	sub	r5, fp, #48	; 0x30
   241b4:	mov	r0, #0
   241b8:	tst	r1, #1
   241bc:	mov	r1, #0
   241c0:	beq	241d4 <__assert_fail@plt+0x1230c>
   241c4:	ldr	r2, [r9, #76]	; 0x4c
   241c8:	mov	r1, #0
   241cc:	cmp	r2, #0
   241d0:	movwgt	r1, #1
   241d4:	movw	r2, #48192	; 0xbc40
   241d8:	ldr	r7, [sl]
   241dc:	cmp	r1, #0
   241e0:	mov	r6, #0
   241e4:	movt	r2, #3
   241e8:	vldr	d16, [r2]
   241ec:	ldr	r2, [r2, #8]
   241f0:	str	r2, [fp, #-40]	; 0xffffffd8
   241f4:	sub	r2, fp, #192	; 0xc0
   241f8:	add	r4, r2, #12
   241fc:	mov	r2, #16
   24200:	vstr	d16, [fp, #-48]	; 0xffffffd0
   24204:	str	r4, [fp, #-184]	; 0xffffff48
   24208:	str	r2, [fp, #-188]	; 0xffffff44
   2420c:	str	r0, [fp, #-192]	; 0xffffff40
   24210:	beq	24230 <__assert_fail@plt+0x12368>
   24214:	mov	r0, #48	; 0x30
   24218:	bl	38450 <__assert_fail@plt+0x26588>
   2421c:	cmp	r0, #0
   24220:	str	r0, [fp, #-40]	; 0xffffffd8
   24224:	beq	251ec <__assert_fail@plt+0x13324>
   24228:	ldr	r0, [fp, #-192]	; 0xffffff40
   2422c:	mov	r6, r5
   24230:	ldr	r5, [sp, #92]	; 0x5c
   24234:	ldr	sl, [r7, #72]	; 0x48
   24238:	str	r4, [sp, #88]	; 0x58
   2423c:	cmp	r0, r5
   24240:	bcs	24328 <__assert_fail@plt+0x12460>
   24244:	sub	r0, fp, #192	; 0xc0
   24248:	mov	r1, r5
   2424c:	mov	r2, r4
   24250:	mov	r3, #8
   24254:	bl	392a4 <__assert_fail@plt+0x273dc>
   24258:	cmp	r0, #0
   2425c:	bne	2432c <__assert_fail@plt+0x12464>
   24260:	ldr	r1, [sp, #88]	; 0x58
   24264:	ldr	r0, [fp, #-184]	; 0xffffff48
   24268:	mov	r4, r6
   2426c:	mov	r5, r1
   24270:	cmp	r0, r1
   24274:	beq	2427c <__assert_fail@plt+0x123b4>
   24278:	bl	17c10 <__assert_fail@plt+0x5d48>
   2427c:	mov	r0, #16
   24280:	str	r5, [fp, #-184]	; 0xffffff48
   24284:	mov	r8, #12
   24288:	cmp	r4, #0
   2428c:	str	r0, [fp, #-188]	; 0xffffff44
   24290:	mov	r0, #0
   24294:	str	r0, [fp, #-192]	; 0xffffff40
   24298:	beq	25184 <__assert_fail@plt+0x132bc>
   2429c:	ldr	r1, [r4]
   242a0:	mov	r0, r4
   242a4:	ldr	r0, [r4, #8]
   242a8:	cmp	r1, #1
   242ac:	blt	2527c <__assert_fail@plt+0x133b4>
   242b0:	mov	r5, #0
   242b4:	mov	r6, #0
   242b8:	add	r0, r0, r5
   242bc:	ldr	r0, [r0, #20]
   242c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   242c4:	ldr	r0, [r4, #8]
   242c8:	add	r0, r0, r5
   242cc:	ldr	r0, [r0, #8]
   242d0:	bl	17c10 <__assert_fail@plt+0x5d48>
   242d4:	ldr	r1, [r4]
   242d8:	ldr	r0, [r4, #8]
   242dc:	add	r6, r6, #1
   242e0:	add	r5, r5, #24
   242e4:	cmp	r6, r1
   242e8:	blt	242b8 <__assert_fail@plt+0x123f0>
   242ec:	b	2527c <__assert_fail@plt+0x133b4>
   242f0:	ldr	r1, [r3, #8]
   242f4:	cmp	r1, #0
   242f8:	beq	24308 <__assert_fail@plt+0x12440>
   242fc:	ldrsb	r1, [r4, #28]
   24300:	cmp	r1, #0
   24304:	bmi	22c3c <__assert_fail@plt+0x10d74>
   24308:	mov	r1, #0
   2430c:	cmp	r6, #0
   24310:	str	r1, [sp, #80]	; 0x50
   24314:	beq	251e4 <__assert_fail@plt+0x1331c>
   24318:	cmp	sl, #0
   2431c:	mov	r6, #0
   24320:	bne	251d8 <__assert_fail@plt+0x13310>
   24324:	b	22c40 <__assert_fail@plt+0x10d78>
   24328:	str	r5, [fp, #-192]	; 0xffffff40
   2432c:	ldr	r0, [fp, #-184]	; 0xffffff48
   24330:	lsl	r2, r5, #3
   24334:	mov	r1, r8
   24338:	str	r2, [sp, #76]	; 0x4c
   2433c:	str	r0, [sp, #84]	; 0x54
   24340:	bl	11ab4 <memcpy@plt>
   24344:	ldr	r4, [r8]
   24348:	ldr	r0, [r8, #4]
   2434c:	mov	ip, #0
   24350:	cmp	r4, r0
   24354:	ble	243e0 <__assert_fail@plt+0x12518>
   24358:	mov	r0, ip
   2435c:	bl	17c10 <__assert_fail@plt+0x5d48>
   24360:	ldr	r0, [fp, #-184]	; 0xffffff48
   24364:	ldr	r4, [sp, #88]	; 0x58
   24368:	cmp	r0, r4
   2436c:	beq	24374 <__assert_fail@plt+0x124ac>
   24370:	bl	17c10 <__assert_fail@plt+0x5d48>
   24374:	mov	r0, #16
   24378:	str	r4, [fp, #-184]	; 0xffffff48
   2437c:	cmp	r6, #0
   24380:	str	r0, [fp, #-188]	; 0xffffff44
   24384:	mov	r0, #0
   24388:	str	r0, [fp, #-192]	; 0xffffff40
   2438c:	beq	25080 <__assert_fail@plt+0x131b8>
   24390:	ldr	r1, [r6]
   24394:	ldr	r0, [r6, #8]
   24398:	cmp	r1, #1
   2439c:	blt	25078 <__assert_fail@plt+0x131b0>
   243a0:	mov	r4, #0
   243a4:	mov	r5, #0
   243a8:	add	r0, r0, r4
   243ac:	ldr	r0, [r0, #20]
   243b0:	bl	17c10 <__assert_fail@plt+0x5d48>
   243b4:	ldr	r0, [r6, #8]
   243b8:	add	r0, r0, r4
   243bc:	ldr	r0, [r0, #8]
   243c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   243c4:	ldr	r1, [r6]
   243c8:	ldr	r0, [r6, #8]
   243cc:	add	r5, r5, #1
   243d0:	add	r4, r4, #24
   243d4:	cmp	r5, r1
   243d8:	blt	243a8 <__assert_fail@plt+0x124e0>
   243dc:	b	25078 <__assert_fail@plt+0x131b0>
   243e0:	add	r0, r8, #4
   243e4:	mov	lr, #1
   243e8:	mov	r5, #0
   243ec:	mov	ip, #0
   243f0:	mov	r3, #0
   243f4:	str	r7, [sp, #60]	; 0x3c
   243f8:	str	r6, [sp, #68]	; 0x44
   243fc:	str	r0, [sp, #64]	; 0x40
   24400:	ldr	r0, [sp, #92]	; 0x5c
   24404:	lsl	r0, r0, #4
   24408:	str	r0, [sp, #44]	; 0x2c
   2440c:	mov	r0, #0
   24410:	str	r0, [sp, #72]	; 0x48
   24414:	ldr	r0, [r7]
   24418:	add	r1, r0, sl, lsl #3
   2441c:	ldr	r1, [r1, #4]
   24420:	uxtb	r2, r1
   24424:	cmp	r2, #9
   24428:	beq	2445c <__assert_fail@plt+0x12594>
   2442c:	cmp	r2, #8
   24430:	bne	244d8 <__assert_fail@plt+0x12610>
   24434:	ldr	r0, [r0, sl, lsl #3]
   24438:	ldr	r1, [sp, #92]	; 0x5c
   2443c:	add	r0, r0, #1
   24440:	cmp	r0, r1
   24444:	bge	244d8 <__assert_fail@plt+0x12610>
   24448:	mov	r1, r8
   2444c:	str	r4, [r1, r0, lsl #3]!
   24450:	mvn	r0, #0
   24454:	str	r0, [r1, #4]
   24458:	b	244d8 <__assert_fail@plt+0x12610>
   2445c:	ldr	r0, [r0, sl, lsl #3]
   24460:	ldr	r2, [sp, #92]	; 0x5c
   24464:	add	r0, r0, #1
   24468:	cmp	r0, r2
   2446c:	bge	244d8 <__assert_fail@plt+0x12610>
   24470:	ldr	r2, [r8, r0, lsl #3]
   24474:	cmp	r2, r4
   24478:	bge	24490 <__assert_fail@plt+0x125c8>
   2447c:	add	r0, r8, r0, lsl #3
   24480:	mov	r1, r8
   24484:	str	r4, [r0, #4]
   24488:	ldr	r0, [sp, #84]	; 0x54
   2448c:	b	244b0 <__assert_fail@plt+0x125e8>
   24490:	tst	r1, #524288	; 0x80000
   24494:	beq	244d0 <__assert_fail@plt+0x12608>
   24498:	ldr	r1, [sp, #84]	; 0x54
   2449c:	ldr	r1, [r1, r0, lsl #3]
   244a0:	cmn	r1, #1
   244a4:	beq	244d0 <__assert_fail@plt+0x12608>
   244a8:	ldr	r1, [sp, #84]	; 0x54
   244ac:	mov	r0, r8
   244b0:	ldr	r2, [sp, #76]	; 0x4c
   244b4:	mov	r7, ip
   244b8:	str	r3, [sp, #48]	; 0x30
   244bc:	bl	11ab4 <memcpy@plt>
   244c0:	ldr	r3, [sp, #48]	; 0x30
   244c4:	mov	ip, r7
   244c8:	mov	lr, #1
   244cc:	b	244d8 <__assert_fail@plt+0x12610>
   244d0:	add	r0, r8, r0, lsl #3
   244d4:	str	r4, [r0, #4]
   244d8:	ldr	r0, [r8, #4]
   244dc:	cmp	r4, r0
   244e0:	ldreq	r0, [sp, #200]	; 0xc8
   244e4:	cmpeq	sl, r0
   244e8:	beq	24544 <__assert_fail@plt+0x1267c>
   244ec:	cmp	r6, #0
   244f0:	beq	2461c <__assert_fail@plt+0x12754>
   244f4:	cmp	r3, #1
   244f8:	blt	2461c <__assert_fail@plt+0x12754>
   244fc:	str	ip, [sp, #52]	; 0x34
   24500:	mov	ip, r3
   24504:	mov	r0, #0
   24508:	subs	r1, r3, #1
   2450c:	beq	24530 <__assert_fail@plt+0x12668>
   24510:	add	r2, r0, r1
   24514:	lsr	r3, r2, #1
   24518:	ldr	r7, [r5, r3, lsl #2]
   2451c:	cmp	r7, sl
   24520:	addlt	r0, lr, r2, lsr #1
   24524:	movge	r1, r3
   24528:	cmp	r0, r1
   2452c:	bcc	24510 <__assert_fail@plt+0x12648>
   24530:	ldr	r0, [r5, r0, lsl #2]
   24534:	mov	r3, ip
   24538:	ldr	ip, [sp, #52]	; 0x34
   2453c:	cmp	r0, sl
   24540:	bne	2461c <__assert_fail@plt+0x12754>
   24544:	ldr	r4, [sp, #88]	; 0x58
   24548:	cmp	r6, #0
   2454c:	beq	24ff8 <__assert_fail@plt+0x13130>
   24550:	ldr	r0, [sp, #92]	; 0x5c
   24554:	ldr	r1, [sp, #64]	; 0x40
   24558:	ldr	r2, [r1, #-4]
   2455c:	cmp	r2, #0
   24560:	bpl	2457c <__assert_fail@plt+0x126b4>
   24564:	subs	r0, r0, #1
   24568:	add	r1, r1, #8
   2456c:	beq	24ff8 <__assert_fail@plt+0x13130>
   24570:	ldr	r2, [r1, #-4]
   24574:	cmp	r2, #0
   24578:	bmi	24564 <__assert_fail@plt+0x1269c>
   2457c:	ldr	r2, [r1]
   24580:	cmn	r2, #1
   24584:	bne	24564 <__assert_fail@plt+0x1269c>
   24588:	ldr	r0, [r6]
   2458c:	cmp	r0, #0
   24590:	beq	24ff8 <__assert_fail@plt+0x13130>
   24594:	sub	r1, r0, #1
   24598:	ldr	r7, [sp, #76]	; 0x4c
   2459c:	mov	r0, r8
   245a0:	mov	r8, ip
   245a4:	str	r1, [r6]
   245a8:	add	sl, r1, r1, lsl #1
   245ac:	ldr	r4, [r6, #8]
   245b0:	mov	r2, r7
   245b4:	ldr	r1, [r4, sl, lsl #3]!
   245b8:	str	r1, [sp, #100]	; 0x64
   245bc:	ldr	r1, [r4, #8]
   245c0:	bl	11ab4 <memcpy@plt>
   245c4:	ldr	r0, [r4, #8]
   245c8:	ldr	r1, [sp, #92]	; 0x5c
   245cc:	mov	r2, r7
   245d0:	add	r1, r0, r1, lsl #3
   245d4:	ldr	r0, [sp, #84]	; 0x54
   245d8:	bl	11ab4 <memcpy@plt>
   245dc:	mov	r0, r8
   245e0:	bl	17c10 <__assert_fail@plt+0x5d48>
   245e4:	ldr	r0, [r6, #8]
   245e8:	add	r0, r0, sl, lsl #3
   245ec:	ldr	r0, [r0, #8]
   245f0:	bl	17c10 <__assert_fail@plt+0x5d48>
   245f4:	ldr	r0, [r6, #8]
   245f8:	mov	lr, #1
   245fc:	add	r0, r0, sl, lsl #3
   24600:	ldr	ip, [r0, #20]
   24604:	ldr	r1, [r0, #12]
   24608:	ldr	sl, [r0, #4]
   2460c:	ldr	r3, [r0, #16]
   24610:	mov	r5, ip
   24614:	str	r1, [sp, #72]	; 0x48
   24618:	b	24620 <__assert_fail@plt+0x12758>
   2461c:	str	r4, [sp, #100]	; 0x64
   24620:	ldr	r4, [sp, #188]	; 0xbc
   24624:	ldr	r0, [r4]
   24628:	add	r1, r0, sl, lsl #3
   2462c:	ldr	r1, [r1, #4]
   24630:	tst	r1, #8
   24634:	bne	24708 <__assert_fail@plt+0x12840>
   24638:	tst	r1, #1048576	; 0x100000
   2463c:	bne	24798 <__assert_fail@plt+0x128d0>
   24640:	uxtb	r1, r1
   24644:	cmp	r1, #4
   24648:	bne	247c4 <__assert_fail@plt+0x128fc>
   2464c:	ldr	r0, [r0, sl, lsl #3]
   24650:	ldr	r2, [sp, #92]	; 0x5c
   24654:	str	r5, [sp, #56]	; 0x38
   24658:	mov	r7, #0
   2465c:	mov	r5, r2
   24660:	add	r0, r0, #1
   24664:	cmp	r0, r2
   24668:	bge	2467c <__assert_fail@plt+0x127b4>
   2466c:	ldr	r1, [fp, #20]
   24670:	ldr	r2, [r1, r0, lsl #3]!
   24674:	ldr	r1, [r1, #4]
   24678:	sub	r7, r1, r2
   2467c:	ldr	r8, [sp, #100]	; 0x64
   24680:	cmp	r6, #0
   24684:	beq	24a88 <__assert_fail@plt+0x12bc0>
   24688:	cmp	r0, r5
   2468c:	bge	246ec <__assert_fail@plt+0x12824>
   24690:	ldr	r2, [fp, #20]
   24694:	ldr	r1, [r2, r0, lsl #3]
   24698:	cmn	r1, #1
   2469c:	beq	246ec <__assert_fail@plt+0x12824>
   246a0:	add	r0, r2, r0, lsl #3
   246a4:	ldr	r0, [r0, #4]
   246a8:	cmn	r0, #1
   246ac:	beq	246ec <__assert_fail@plt+0x12824>
   246b0:	cmp	r7, #0
   246b4:	beq	24b00 <__assert_fail@plt+0x12c38>
   246b8:	ldr	r0, [sp, #132]	; 0x84
   246bc:	sub	r0, r0, r8
   246c0:	cmp	r0, r7
   246c4:	blt	246ec <__assert_fail@plt+0x12824>
   246c8:	ldr	r2, [sp, #108]	; 0x6c
   246cc:	str	ip, [sp, #52]	; 0x34
   246d0:	add	r0, r2, r1
   246d4:	add	r1, r2, r8
   246d8:	mov	r2, r7
   246dc:	bl	11ca0 <bcmp@plt>
   246e0:	cmp	r0, #0
   246e4:	beq	24cbc <__assert_fail@plt+0x12df4>
   246e8:	ldr	ip, [sp, #52]	; 0x34
   246ec:	mov	sl, r5
   246f0:	ldr	r5, [sp, #56]	; 0x38
   246f4:	ldr	r4, [sp, #88]	; 0x58
   246f8:	ldr	r0, [r6]
   246fc:	cmp	r0, #0
   24700:	bne	24cf8 <__assert_fail@plt+0x12e30>
   24704:	b	251f4 <__assert_fail@plt+0x1332c>
   24708:	ldr	r0, [sp, #204]	; 0xcc
   2470c:	ldr	r1, [sp, #100]	; 0x64
   24710:	ldr	r8, [r4, #20]
   24714:	cmp	r3, #1
   24718:	ldr	r7, [r0, r1, lsl #2]
   2471c:	blt	24770 <__assert_fail@plt+0x128a8>
   24720:	mov	r4, r3
   24724:	mov	r0, #0
   24728:	subs	r1, r3, #1
   2472c:	str	r7, [sp, #80]	; 0x50
   24730:	beq	24754 <__assert_fail@plt+0x1288c>
   24734:	add	r2, r0, r1
   24738:	lsr	r3, r2, #1
   2473c:	ldr	r7, [r5, r3, lsl #2]
   24740:	cmp	r7, sl
   24744:	addlt	r0, lr, r2, lsr #1
   24748:	movge	r1, r3
   2474c:	cmp	r0, r1
   24750:	bcc	24734 <__assert_fail@plt+0x1286c>
   24754:	ldr	r0, [r5, r0, lsl #2]
   24758:	ldr	r7, [sp, #80]	; 0x50
   2475c:	mov	r3, r4
   24760:	cmp	r0, sl
   24764:	bne	24770 <__assert_fail@plt+0x128a8>
   24768:	str	r5, [sp, #56]	; 0x38
   2476c:	b	248b8 <__assert_fail@plt+0x129f0>
   24770:	ldr	r0, [sp, #72]	; 0x48
   24774:	cmp	r0, #0
   24778:	beq	2488c <__assert_fail@plt+0x129c4>
   2477c:	cmp	r3, #0
   24780:	str	r5, [sp, #56]	; 0x38
   24784:	bne	24d98 <__assert_fail@plt+0x12ed0>
   24788:	mov	r0, r5
   2478c:	str	sl, [r5]
   24790:	mov	r3, #1
   24794:	b	248b8 <__assert_fail@plt+0x129f0>
   24798:	ldr	r3, [sp, #100]	; 0x64
   2479c:	mov	r0, r4
   247a0:	mov	r1, sl
   247a4:	add	r2, sp, #104	; 0x68
   247a8:	mov	r8, ip
   247ac:	bl	30504 <__assert_fail@plt+0x1e63c>
   247b0:	mov	lr, #1
   247b4:	mov	r1, r0
   247b8:	cmp	r1, #0
   247bc:	mov	ip, r8
   247c0:	bne	247f0 <__assert_fail@plt+0x12928>
   247c4:	ldr	r0, [r4]
   247c8:	ldr	r2, [sp, #100]	; 0x64
   247cc:	mov	r6, ip
   247d0:	add	r1, r0, sl, lsl #3
   247d4:	add	r0, sp, #104	; 0x68
   247d8:	bl	30890 <__assert_fail@plt+0x1e9c8>
   247dc:	mov	ip, r6
   247e0:	mov	lr, #1
   247e4:	mov	r1, #1
   247e8:	cmp	r0, #0
   247ec:	beq	248d8 <__assert_fail@plt+0x12a10>
   247f0:	ldr	r0, [r4, #12]
   247f4:	ldr	r2, [sp, #100]	; 0x64
   247f8:	ldr	r6, [sp, #68]	; 0x44
   247fc:	ldr	r7, [r0, sl, lsl #2]
   24800:	add	r2, r1, r2
   24804:	cmp	r6, #0
   24808:	beq	24980 <__assert_fail@plt+0x12ab8>
   2480c:	ldr	r0, [sp, #196]	; 0xc4
   24810:	ldr	r4, [sp, #88]	; 0x58
   24814:	cmp	r2, r0
   24818:	bgt	24ce8 <__assert_fail@plt+0x12e20>
   2481c:	ldr	r0, [sp, #204]	; 0xcc
   24820:	ldr	r0, [r0, r2, lsl #2]
   24824:	cmp	r0, #0
   24828:	beq	24ce8 <__assert_fail@plt+0x12e20>
   2482c:	ldr	r1, [r0, #8]
   24830:	cmp	r1, #1
   24834:	blt	24ce8 <__assert_fail@plt+0x12e20>
   24838:	ldr	r0, [r0, #12]
   2483c:	str	r2, [sp, #100]	; 0x64
   24840:	mov	r8, r5
   24844:	subs	r1, r1, #1
   24848:	mov	r2, #0
   2484c:	beq	24874 <__assert_fail@plt+0x129ac>
   24850:	mov	r2, #0
   24854:	add	r3, r2, r1
   24858:	lsr	r6, r3, #1
   2485c:	ldr	r5, [r0, r6, lsl #2]
   24860:	cmp	r5, r7
   24864:	addlt	r2, lr, r3, lsr #1
   24868:	movge	r1, r6
   2486c:	cmp	r2, r1
   24870:	bcc	24854 <__assert_fail@plt+0x1298c>
   24874:	ldr	r0, [r0, r2, lsl #2]
   24878:	mov	r3, #0
   2487c:	mov	r5, r8
   24880:	cmp	r0, r7
   24884:	bne	248d8 <__assert_fail@plt+0x12a10>
   24888:	b	24a6c <__assert_fail@plt+0x12ba4>
   2488c:	mov	r0, #4
   24890:	bl	38450 <__assert_fail@plt+0x26588>
   24894:	cmp	r0, #0
   24898:	beq	253f4 <__assert_fail@plt+0x1352c>
   2489c:	mov	ip, r0
   248a0:	str	sl, [r0]
   248a4:	mov	r0, #1
   248a8:	mov	r3, #1
   248ac:	mov	lr, #1
   248b0:	str	r0, [sp, #72]	; 0x48
   248b4:	str	ip, [sp, #56]	; 0x38
   248b8:	add	r0, sl, sl, lsl #1
   248bc:	add	r1, r8, r0, lsl #2
   248c0:	ldr	sl, [r1, #4]
   248c4:	cmp	sl, #1
   248c8:	ldrge	r2, [r7, #8]
   248cc:	subsge	r2, r2, #1
   248d0:	bge	248fc <__assert_fail@plt+0x12a34>
   248d4:	ldr	r5, [sp, #56]	; 0x38
   248d8:	ldr	r6, [sp, #68]	; 0x44
   248dc:	cmp	r6, #0
   248e0:	beq	2528c <__assert_fail@plt+0x133c4>
   248e4:	ldr	sl, [sp, #92]	; 0x5c
   248e8:	ldr	r4, [sp, #88]	; 0x58
   248ec:	ldr	r0, [r6]
   248f0:	cmp	r0, #0
   248f4:	bne	24cf8 <__assert_fail@plt+0x12e30>
   248f8:	b	251f4 <__assert_fail@plt+0x1332c>
   248fc:	str	r3, [sp, #48]	; 0x30
   24900:	ldr	r1, [r1, #8]
   24904:	ldr	r3, [r7, #12]
   24908:	cmp	r2, #0
   2490c:	beq	249ac <__assert_fail@plt+0x12ae4>
   24910:	mov	r5, #0
   24914:	mvn	lr, #0
   24918:	str	ip, [sp, #52]	; 0x34
   2491c:	str	r2, [sp, #80]	; 0x50
   24920:	b	24934 <__assert_fail@plt+0x12a6c>
   24924:	ldr	r2, [sp, #80]	; 0x50
   24928:	add	r5, r5, #1
   2492c:	cmp	r5, sl
   24930:	beq	2499c <__assert_fail@plt+0x12ad4>
   24934:	ldr	r4, [r1, r5, lsl #2]
   24938:	mov	r7, #0
   2493c:	mov	ip, #1
   24940:	add	r6, r7, r2
   24944:	lsr	r0, r6, #1
   24948:	ldr	r9, [r3, r0, lsl #2]
   2494c:	cmp	r9, r4
   24950:	addlt	r7, ip, r6, lsr #1
   24954:	movge	r2, r0
   24958:	cmp	r7, r2
   2495c:	bcc	24940 <__assert_fail@plt+0x12a78>
   24960:	ldr	r0, [r3, r7, lsl #2]
   24964:	cmp	r0, r4
   24968:	bne	24924 <__assert_fail@plt+0x12a5c>
   2496c:	cmn	lr, #1
   24970:	mov	r7, lr
   24974:	mov	lr, r4
   24978:	beq	24924 <__assert_fail@plt+0x12a5c>
   2497c:	b	249f0 <__assert_fail@plt+0x12b28>
   24980:	str	r2, [sp, #100]	; 0x64
   24984:	mov	r3, #0
   24988:	cmn	r7, #1
   2498c:	bgt	24a74 <__assert_fail@plt+0x12bac>
   24990:	cmn	r7, #2
   24994:	bne	248d8 <__assert_fail@plt+0x12a10>
   24998:	b	25354 <__assert_fail@plt+0x1348c>
   2499c:	ldr	ip, [sp, #52]	; 0x34
   249a0:	mov	r7, lr
   249a4:	mov	lr, #1
   249a8:	b	24a64 <__assert_fail@plt+0x12b9c>
   249ac:	ldr	r4, [r3]
   249b0:	mvn	r7, #0
   249b4:	ldr	r2, [r1]
   249b8:	cmp	r4, r2
   249bc:	beq	249e0 <__assert_fail@plt+0x12b18>
   249c0:	mov	r2, r7
   249c4:	add	r1, r1, #4
   249c8:	subs	sl, sl, #1
   249cc:	mov	r7, r2
   249d0:	beq	24a60 <__assert_fail@plt+0x12b98>
   249d4:	ldr	r2, [r1]
   249d8:	cmp	r4, r2
   249dc:	bne	249c0 <__assert_fail@plt+0x12af8>
   249e0:	cmn	r7, #1
   249e4:	mov	r2, r4
   249e8:	beq	249c4 <__assert_fail@plt+0x12afc>
   249ec:	str	ip, [sp, #52]	; 0x34
   249f0:	ldr	r3, [sp, #48]	; 0x30
   249f4:	ldr	sl, [sp, #68]	; 0x44
   249f8:	ldr	ip, [sp, #52]	; 0x34
   249fc:	ldr	r8, [sp, #56]	; 0x38
   24a00:	mov	lr, #1
   24a04:	cmp	r3, #1
   24a08:	blt	24ab4 <__assert_fail@plt+0x12bec>
   24a0c:	mov	r0, #0
   24a10:	mov	r5, r8
   24a14:	subs	r1, r3, #1
   24a18:	beq	24a3c <__assert_fail@plt+0x12b74>
   24a1c:	add	r2, r0, r1
   24a20:	lsr	r3, r2, #1
   24a24:	ldr	r6, [r5, r3, lsl #2]
   24a28:	cmp	r6, r7
   24a2c:	addlt	r0, lr, r2, lsr #1
   24a30:	movge	r1, r3
   24a34:	cmp	r0, r1
   24a38:	bcc	24a1c <__assert_fail@plt+0x12b54>
   24a3c:	ldr	r0, [r5, r0, lsl #2]
   24a40:	ldr	r3, [sp, #48]	; 0x30
   24a44:	cmp	r0, r7
   24a48:	bne	24ab4 <__assert_fail@plt+0x12bec>
   24a4c:	mov	r7, r4
   24a50:	mov	r5, r8
   24a54:	cmn	r7, #1
   24a58:	bgt	24a74 <__assert_fail@plt+0x12bac>
   24a5c:	b	24990 <__assert_fail@plt+0x12ac8>
   24a60:	mov	r7, r2
   24a64:	ldr	r5, [sp, #56]	; 0x38
   24a68:	ldr	r3, [sp, #48]	; 0x30
   24a6c:	cmn	r7, #1
   24a70:	ble	24990 <__assert_fail@plt+0x12ac8>
   24a74:	ldr	r8, [fp, #20]
   24a78:	ldr	r6, [sp, #68]	; 0x44
   24a7c:	ldr	r4, [sp, #100]	; 0x64
   24a80:	mov	sl, r7
   24a84:	b	24d80 <__assert_fail@plt+0x12eb8>
   24a88:	cmp	r7, #0
   24a8c:	beq	24b00 <__assert_fail@plt+0x12c38>
   24a90:	ldr	r0, [r4, #12]
   24a94:	add	r8, r7, r8
   24a98:	ldr	r5, [sp, #56]	; 0x38
   24a9c:	mov	r3, #0
   24aa0:	str	r8, [sp, #100]	; 0x64
   24aa4:	ldr	r7, [r0, sl, lsl #2]
   24aa8:	cmn	r7, #1
   24aac:	bgt	24a74 <__assert_fail@plt+0x12bac>
   24ab0:	b	24990 <__assert_fail@plt+0x12ac8>
   24ab4:	cmp	sl, #0
   24ab8:	beq	24b28 <__assert_fail@plt+0x12c60>
   24abc:	ldr	r6, [sl]
   24ac0:	ldr	r0, [sl, #4]
   24ac4:	add	r1, r6, #1
   24ac8:	cmp	r1, r0
   24acc:	str	r1, [sl]
   24ad0:	bne	24b38 <__assert_fail@plt+0x12c70>
   24ad4:	ldr	r0, [sl, #8]
   24ad8:	add	r1, r1, r1, lsl #1
   24adc:	lsl	r1, r1, #4
   24ae0:	bl	38480 <__assert_fail@plt+0x265b8>
   24ae4:	cmp	r0, #0
   24ae8:	beq	25350 <__assert_fail@plt+0x13488>
   24aec:	str	r0, [sl, #8]
   24af0:	ldr	r1, [sl, #4]
   24af4:	lsl	r1, r1, #1
   24af8:	str	r1, [sl, #4]
   24afc:	b	24b3c <__assert_fail@plt+0x12c74>
   24b00:	ldr	r0, [sp, #72]	; 0x48
   24b04:	str	r7, [sp, #80]	; 0x50
   24b08:	cmp	r0, #0
   24b0c:	beq	24c0c <__assert_fail@plt+0x12d44>
   24b10:	cmp	r3, #0
   24b14:	bne	24edc <__assert_fail@plt+0x13014>
   24b18:	ldr	r5, [sp, #56]	; 0x38
   24b1c:	mov	r2, #1
   24b20:	str	sl, [r5]
   24b24:	b	24c38 <__assert_fail@plt+0x12d70>
   24b28:	mov	r5, r8
   24b2c:	cmn	r7, #1
   24b30:	bgt	24a74 <__assert_fail@plt+0x12bac>
   24b34:	b	24990 <__assert_fail@plt+0x12ac8>
   24b38:	ldr	r0, [sl, #8]
   24b3c:	ldr	r1, [sp, #100]	; 0x64
   24b40:	add	r6, r6, r6, lsl #1
   24b44:	str	r1, [r0, r6, lsl #3]!
   24b48:	str	r4, [r0, #4]
   24b4c:	ldr	r0, [sp, #44]	; 0x2c
   24b50:	bl	38450 <__assert_fail@plt+0x26588>
   24b54:	ldr	r1, [sl, #8]
   24b58:	cmp	r0, #0
   24b5c:	add	r4, r1, r6, lsl #3
   24b60:	str	r0, [r4, #8]!
   24b64:	beq	25348 <__assert_fail@plt+0x13480>
   24b68:	ldr	r9, [sp, #76]	; 0x4c
   24b6c:	ldr	r1, [fp, #20]
   24b70:	mov	r2, r9
   24b74:	bl	11ab4 <memcpy@plt>
   24b78:	ldr	r0, [r4]
   24b7c:	ldr	r1, [sp, #92]	; 0x5c
   24b80:	mov	r2, r9
   24b84:	add	r0, r0, r1, lsl #3
   24b88:	ldr	r1, [sp, #84]	; 0x54
   24b8c:	bl	11ab4 <memcpy@plt>
   24b90:	ldr	r0, [sl, #8]
   24b94:	ldr	r3, [sp, #48]	; 0x30
   24b98:	add	r5, r0, r6, lsl #3
   24b9c:	cmp	r3, #1
   24ba0:	mov	r6, r5
   24ba4:	str	r3, [r6, #16]!
   24ba8:	sub	sl, r6, #4
   24bac:	blt	24be4 <__assert_fail@plt+0x12d1c>
   24bb0:	lsl	r4, r3, #2
   24bb4:	str	r3, [sl]
   24bb8:	mov	r0, r4
   24bbc:	bl	38450 <__assert_fail@plt+0x26588>
   24bc0:	cmp	r0, #0
   24bc4:	str	r0, [r5, #20]
   24bc8:	beq	253fc <__assert_fail@plt+0x13534>
   24bcc:	ldr	r5, [sp, #52]	; 0x34
   24bd0:	mov	r2, r4
   24bd4:	mov	r1, r5
   24bd8:	bl	11ab4 <memcpy@plt>
   24bdc:	mov	ip, r5
   24be0:	b	249a4 <__assert_fail@plt+0x12adc>
   24be4:	ldr	ip, [sp, #52]	; 0x34
   24be8:	ldr	r5, [sp, #56]	; 0x38
   24bec:	mov	r0, #0
   24bf0:	mov	lr, #1
   24bf4:	str	r0, [sl]
   24bf8:	str	r0, [sl, #4]
   24bfc:	str	r0, [sl, #8]
   24c00:	cmn	r7, #1
   24c04:	bgt	24a74 <__assert_fail@plt+0x12bac>
   24c08:	b	24990 <__assert_fail@plt+0x12ac8>
   24c0c:	mov	r0, #4
   24c10:	bl	38450 <__assert_fail@plt+0x26588>
   24c14:	cmp	r0, #0
   24c18:	beq	253f4 <__assert_fail@plt+0x1352c>
   24c1c:	mov	ip, r0
   24c20:	str	sl, [r0]
   24c24:	mov	r0, #1
   24c28:	mov	r2, #1
   24c2c:	mov	lr, #1
   24c30:	str	r0, [sp, #72]	; 0x48
   24c34:	mov	r5, ip
   24c38:	ldr	r0, [sp, #204]	; 0xcc
   24c3c:	ldr	r0, [r0, r8, lsl #2]
   24c40:	ldr	r1, [r0, #8]
   24c44:	cmp	r1, #1
   24c48:	blt	247c4 <__assert_fail@plt+0x128fc>
   24c4c:	mov	r9, r2
   24c50:	ldr	r2, [r4, #20]
   24c54:	add	r3, sl, sl, lsl #1
   24c58:	mov	r8, ip
   24c5c:	ldr	ip, [r0, #12]
   24c60:	add	r2, r2, r3, lsl #2
   24c64:	ldr	r2, [r2, #8]
   24c68:	ldr	r7, [r2]
   24c6c:	subs	r2, r1, #1
   24c70:	mov	r1, #0
   24c74:	beq	24c98 <__assert_fail@plt+0x12dd0>
   24c78:	add	r3, r1, r2
   24c7c:	lsr	r6, r3, #1
   24c80:	ldr	r0, [ip, r6, lsl #2]
   24c84:	cmp	r0, r7
   24c88:	addlt	r1, lr, r3, lsr #1
   24c8c:	movge	r2, r6
   24c90:	cmp	r1, r2
   24c94:	bcc	24c78 <__assert_fail@plt+0x12db0>
   24c98:	ldr	r0, [ip, r1, lsl #2]
   24c9c:	ldr	r1, [sp, #80]	; 0x50
   24ca0:	cmp	r0, r7
   24ca4:	bne	247b8 <__assert_fail@plt+0x128f0>
   24ca8:	mov	ip, r8
   24cac:	mov	r3, r9
   24cb0:	cmn	r7, #1
   24cb4:	bgt	24a74 <__assert_fail@plt+0x12bac>
   24cb8:	b	24990 <__assert_fail@plt+0x12ac8>
   24cbc:	ldr	r0, [r4, #12]
   24cc0:	add	r8, r7, r8
   24cc4:	ldr	ip, [sp, #52]	; 0x34
   24cc8:	ldr	r5, [sp, #56]	; 0x38
   24ccc:	mov	lr, #1
   24cd0:	mov	r2, r8
   24cd4:	ldr	r7, [r0, sl, lsl #2]
   24cd8:	ldr	r0, [sp, #196]	; 0xc4
   24cdc:	ldr	r4, [sp, #88]	; 0x58
   24ce0:	cmp	r2, r0
   24ce4:	ble	2481c <__assert_fail@plt+0x12954>
   24ce8:	ldr	sl, [sp, #92]	; 0x5c
   24cec:	ldr	r0, [r6]
   24cf0:	cmp	r0, #0
   24cf4:	beq	251f4 <__assert_fail@plt+0x1332c>
   24cf8:	sub	r0, r0, #1
   24cfc:	ldr	r7, [sp, #76]	; 0x4c
   24d00:	ldr	r8, [fp, #20]
   24d04:	mov	r9, ip
   24d08:	str	r0, [r6]
   24d0c:	add	r5, r0, r0, lsl #1
   24d10:	ldr	r4, [r6, #8]
   24d14:	mov	r2, r7
   24d18:	ldr	r0, [r4, r5, lsl #3]!
   24d1c:	ldr	r1, [r4, #8]
   24d20:	str	r0, [sp, #100]	; 0x64
   24d24:	mov	r0, r8
   24d28:	bl	11ab4 <memcpy@plt>
   24d2c:	ldr	r0, [r4, #8]
   24d30:	mov	r2, r7
   24d34:	add	r1, r0, sl, lsl #3
   24d38:	ldr	r0, [sp, #84]	; 0x54
   24d3c:	bl	11ab4 <memcpy@plt>
   24d40:	ldr	r4, [sp, #100]	; 0x64
   24d44:	mov	r0, r9
   24d48:	bl	17c10 <__assert_fail@plt+0x5d48>
   24d4c:	ldr	r0, [r6, #8]
   24d50:	add	r0, r0, r5, lsl #3
   24d54:	ldr	r0, [r0, #8]
   24d58:	bl	17c10 <__assert_fail@plt+0x5d48>
   24d5c:	ldr	r0, [r6, #8]
   24d60:	mov	lr, #1
   24d64:	add	r0, r0, r5, lsl #3
   24d68:	ldr	ip, [r0, #20]
   24d6c:	ldr	r1, [r0, #12]
   24d70:	ldr	sl, [r0, #4]
   24d74:	ldr	r3, [r0, #16]
   24d78:	mov	r5, ip
   24d7c:	str	r1, [sp, #72]	; 0x48
   24d80:	ldr	r0, [r8, #4]
   24d84:	ldr	r9, [sp, #96]	; 0x60
   24d88:	ldr	r7, [sp, #60]	; 0x3c
   24d8c:	cmp	r4, r0
   24d90:	ble	24414 <__assert_fail@plt+0x1254c>
   24d94:	b	24358 <__assert_fail@plt+0x12490>
   24d98:	ldr	r0, [sp, #72]	; 0x48
   24d9c:	str	r8, [sp, #52]	; 0x34
   24da0:	mov	r4, ip
   24da4:	mov	r8, r3
   24da8:	str	r7, [sp, #80]	; 0x50
   24dac:	cmp	r0, r3
   24db0:	bne	24de4 <__assert_fail@plt+0x12f1c>
   24db4:	ldr	r0, [sp, #72]	; 0x48
   24db8:	lsl	r1, r0, #3
   24dbc:	mov	r0, r4
   24dc0:	bl	38480 <__assert_fail@plt+0x265b8>
   24dc4:	ldr	r5, [sp, #56]	; 0x38
   24dc8:	cmp	r0, #0
   24dcc:	beq	25354 <__assert_fail@plt+0x1348c>
   24dd0:	ldr	r1, [sp, #72]	; 0x48
   24dd4:	mov	r4, r0
   24dd8:	str	r0, [sp, #56]	; 0x38
   24ddc:	lsl	r1, r1, #1
   24de0:	str	r1, [sp, #72]	; 0x48
   24de4:	ldr	r0, [sp, #56]	; 0x38
   24de8:	ldr	r0, [r0]
   24dec:	cmp	r0, sl
   24df0:	ble	24e80 <__assert_fail@plt+0x12fb8>
   24df4:	mov	ip, r8
   24df8:	cmp	r8, #1
   24dfc:	blt	24eb8 <__assert_fail@plt+0x12ff0>
   24e00:	mov	r0, r8
   24e04:	ands	r1, r8, #3
   24e08:	sub	r2, r8, #1
   24e0c:	beq	24e3c <__assert_fail@plt+0x12f74>
   24e10:	ldr	r0, [sp, #56]	; 0x38
   24e14:	mov	r3, r8
   24e18:	add	r7, r0, r8, lsl #2
   24e1c:	mov	r0, r8
   24e20:	mov	r3, r7
   24e24:	ldr	r6, [r3, #-4]!
   24e28:	subs	r1, r1, #1
   24e2c:	sub	r0, r0, #1
   24e30:	str	r6, [r7]
   24e34:	mov	r7, r3
   24e38:	bne	24e24 <__assert_fail@plt+0x12f5c>
   24e3c:	mov	ip, #0
   24e40:	cmp	r2, #3
   24e44:	bcc	24eb8 <__assert_fail@plt+0x12ff0>
   24e48:	ldr	r1, [sp, #56]	; 0x38
   24e4c:	add	r2, r1, r0, lsl #2
   24e50:	sub	r2, r2, #8
   24e54:	ldr	r6, [r2]
   24e58:	ldr	r1, [r2, #4]
   24e5c:	ldmdb	r2, {r3, r7}
   24e60:	sub	r0, r0, #4
   24e64:	cmp	r0, #0
   24e68:	stmda	r2, {r3, r7}
   24e6c:	str	r6, [r2, #4]
   24e70:	str	r1, [r2, #8]
   24e74:	sub	r2, r2, #16
   24e78:	bgt	24e54 <__assert_fail@plt+0x12f8c>
   24e7c:	b	24eb8 <__assert_fail@plt+0x12ff0>
   24e80:	ldr	r0, [sp, #56]	; 0x38
   24e84:	mov	ip, r8
   24e88:	add	r0, r0, r8, lsl #2
   24e8c:	ldr	r2, [r0, #-4]
   24e90:	cmp	r2, sl
   24e94:	ble	24eb8 <__assert_fail@plt+0x12ff0>
   24e98:	sub	r1, r8, #2
   24e9c:	str	r2, [r0]
   24ea0:	sub	r1, r1, #1
   24ea4:	ldr	r2, [r0, #-8]
   24ea8:	sub	r0, r0, #4
   24eac:	cmp	r2, sl
   24eb0:	bgt	24e9c <__assert_fail@plt+0x12fd4>
   24eb4:	add	ip, r1, #2
   24eb8:	ldr	r0, [sp, #56]	; 0x38
   24ebc:	mov	r3, r8
   24ec0:	add	r3, r8, #1
   24ec4:	ldr	r7, [sp, #80]	; 0x50
   24ec8:	ldr	r8, [sp, #52]	; 0x34
   24ecc:	mov	lr, #1
   24ed0:	str	sl, [r0, ip, lsl #2]
   24ed4:	mov	ip, r4
   24ed8:	b	248b8 <__assert_fail@plt+0x129f0>
   24edc:	ldr	r0, [sp, #72]	; 0x48
   24ee0:	ldr	r5, [sp, #56]	; 0x38
   24ee4:	mov	r8, ip
   24ee8:	mov	r9, r3
   24eec:	cmp	r0, r3
   24ef0:	bne	24f20 <__assert_fail@plt+0x13058>
   24ef4:	ldr	r0, [sp, #72]	; 0x48
   24ef8:	lsl	r1, r0, #3
   24efc:	mov	r0, r8
   24f00:	bl	38480 <__assert_fail@plt+0x265b8>
   24f04:	cmp	r0, #0
   24f08:	beq	25354 <__assert_fail@plt+0x1348c>
   24f0c:	ldr	r1, [sp, #72]	; 0x48
   24f10:	mov	r8, r0
   24f14:	mov	r5, r0
   24f18:	lsl	r1, r1, #1
   24f1c:	str	r1, [sp, #72]	; 0x48
   24f20:	ldr	r0, [r5]
   24f24:	mov	ip, r9
   24f28:	cmp	r0, sl
   24f2c:	ble	24fac <__assert_fail@plt+0x130e4>
   24f30:	cmp	r9, #1
   24f34:	blt	24fdc <__assert_fail@plt+0x13114>
   24f38:	mov	r0, r9
   24f3c:	ands	r1, r9, #3
   24f40:	sub	r2, r9, #1
   24f44:	beq	24f6c <__assert_fail@plt+0x130a4>
   24f48:	add	r7, r5, r9, lsl #2
   24f4c:	mov	r0, r9
   24f50:	mov	r3, r7
   24f54:	ldr	r6, [r3, #-4]!
   24f58:	subs	r1, r1, #1
   24f5c:	sub	r0, r0, #1
   24f60:	str	r6, [r7]
   24f64:	mov	r7, r3
   24f68:	bne	24f54 <__assert_fail@plt+0x1308c>
   24f6c:	mov	ip, #0
   24f70:	cmp	r2, #3
   24f74:	bcc	24fdc <__assert_fail@plt+0x13114>
   24f78:	add	r2, r5, r0, lsl #2
   24f7c:	sub	r2, r2, #8
   24f80:	ldr	r6, [r2]
   24f84:	ldr	r1, [r2, #4]
   24f88:	ldmdb	r2, {r3, r7}
   24f8c:	sub	r0, r0, #4
   24f90:	cmp	r0, #0
   24f94:	stmda	r2, {r3, r7}
   24f98:	str	r6, [r2, #4]
   24f9c:	str	r1, [r2, #8]
   24fa0:	sub	r2, r2, #16
   24fa4:	bgt	24f80 <__assert_fail@plt+0x130b8>
   24fa8:	b	24fdc <__assert_fail@plt+0x13114>
   24fac:	add	r0, r5, r9, lsl #2
   24fb0:	ldr	r2, [r0, #-4]
   24fb4:	cmp	r2, sl
   24fb8:	ble	24fdc <__assert_fail@plt+0x13114>
   24fbc:	sub	r1, r9, #2
   24fc0:	str	r2, [r0]
   24fc4:	sub	r1, r1, #1
   24fc8:	ldr	r2, [r0, #-8]
   24fcc:	sub	r0, r0, #4
   24fd0:	cmp	r2, sl
   24fd4:	bgt	24fc0 <__assert_fail@plt+0x130f8>
   24fd8:	add	ip, r1, #2
   24fdc:	str	sl, [r5, ip, lsl #2]
   24fe0:	mov	ip, r8
   24fe4:	ldr	r8, [sp, #100]	; 0x64
   24fe8:	mov	r2, r9
   24fec:	add	r2, r9, #1
   24ff0:	mov	lr, #1
   24ff4:	b	24c38 <__assert_fail@plt+0x12d70>
   24ff8:	mov	r0, ip
   24ffc:	bl	17c10 <__assert_fail@plt+0x5d48>
   25000:	ldr	r0, [fp, #-184]	; 0xffffff48
   25004:	cmp	r0, r4
   25008:	beq	25010 <__assert_fail@plt+0x13148>
   2500c:	bl	17c10 <__assert_fail@plt+0x5d48>
   25010:	mov	r0, #16
   25014:	str	r4, [fp, #-184]	; 0xffffff48
   25018:	cmp	r6, #0
   2501c:	str	r0, [fp, #-188]	; 0xffffff44
   25020:	mov	r0, #0
   25024:	str	r0, [fp, #-192]	; 0xffffff40
   25028:	beq	25080 <__assert_fail@plt+0x131b8>
   2502c:	ldr	r1, [r6]
   25030:	ldr	r0, [r6, #8]
   25034:	cmp	r1, #1
   25038:	blt	25078 <__assert_fail@plt+0x131b0>
   2503c:	mov	r4, #0
   25040:	mov	r5, #0
   25044:	add	r0, r0, r4
   25048:	ldr	r0, [r0, #20]
   2504c:	bl	17c10 <__assert_fail@plt+0x5d48>
   25050:	ldr	r0, [r6, #8]
   25054:	add	r0, r0, r4
   25058:	ldr	r0, [r0, #8]
   2505c:	bl	17c10 <__assert_fail@plt+0x5d48>
   25060:	ldr	r1, [r6]
   25064:	ldr	r0, [r6, #8]
   25068:	add	r5, r5, #1
   2506c:	add	r4, r4, #24
   25070:	cmp	r5, r1
   25074:	blt	25044 <__assert_fail@plt+0x1317c>
   25078:	bl	17c10 <__assert_fail@plt+0x5d48>
   2507c:	ldr	r8, [fp, #20]
   25080:	ldrb	r0, [sp, #180]	; 0xb4
   25084:	cmp	r0, #0
   25088:	bne	252c4 <__assert_fail@plt+0x133fc>
   2508c:	ldr	r1, [fp, #-200]	; 0xffffff38
   25090:	ldr	r2, [sp, #92]	; 0x5c
   25094:	ldr	r5, [sp, #32]
   25098:	add	r0, r8, #4
   2509c:	ldr	r3, [r0, #-4]
   250a0:	cmn	r3, #1
   250a4:	bne	250c0 <__assert_fail@plt+0x131f8>
   250a8:	add	r0, r0, #8
   250ac:	subs	r2, r2, #1
   250b0:	beq	250e0 <__assert_fail@plt+0x13218>
   250b4:	ldr	r3, [r0, #-4]
   250b8:	cmn	r3, #1
   250bc:	beq	250a8 <__assert_fail@plt+0x131e0>
   250c0:	add	r3, r3, r1
   250c4:	str	r3, [r0, #-4]
   250c8:	ldr	r3, [r0]
   250cc:	add	r3, r3, r1
   250d0:	str	r3, [r0]
   250d4:	add	r0, r0, #8
   250d8:	subs	r2, r2, #1
   250dc:	bne	250b4 <__assert_fail@plt+0x131ec>
   250e0:	cmp	r5, #1
   250e4:	blt	250fc <__assert_fail@plt+0x13234>
   250e8:	ldr	r0, [sp, #92]	; 0x5c
   250ec:	lsl	r2, r5, #3
   250f0:	mov	r1, #255	; 0xff
   250f4:	add	r0, r8, r0, lsl #3
   250f8:	bl	11d0c <memset@plt>
   250fc:	ldr	r0, [r9, #132]	; 0x84
   25100:	mov	r8, #0
   25104:	cmp	r0, #0
   25108:	beq	25184 <__assert_fail@plt+0x132bc>
   2510c:	ldr	r1, [sp, #92]	; 0x5c
   25110:	cmp	r1, #2
   25114:	bcc	25184 <__assert_fail@plt+0x132bc>
   25118:	ldr	r1, [sp, #32]
   2511c:	ldr	r2, [fp, #16]
   25120:	ldr	r6, [fp, #20]
   25124:	mvn	r1, r1
   25128:	add	r1, r1, r2
   2512c:	mov	r2, #0
   25130:	ldr	r3, [r0, r2, lsl #2]
   25134:	cmp	r2, r3
   25138:	bne	25154 <__assert_fail@plt+0x1328c>
   2513c:	add	r2, r2, #1
   25140:	cmp	r1, r2
   25144:	beq	25180 <__assert_fail@plt+0x132b8>
   25148:	ldr	r3, [r0, r2, lsl #2]
   2514c:	cmp	r2, r3
   25150:	beq	2513c <__assert_fail@plt+0x13274>
   25154:	add	r3, r6, r3, lsl #3
   25158:	add	r7, r6, r2, lsl #3
   2515c:	ldr	r3, [r3, #8]
   25160:	str	r3, [r7, #8]
   25164:	ldr	r3, [r0, r2, lsl #2]
   25168:	add	r3, r6, r3, lsl #3
   2516c:	ldr	r3, [r3, #12]
   25170:	str	r3, [r7, #12]
   25174:	add	r2, r2, #1
   25178:	cmp	r1, r2
   2517c:	bne	25148 <__assert_fail@plt+0x13280>
   25180:	mov	r8, #0
   25184:	ldr	r0, [sp, #204]	; 0xcc
   25188:	bl	17c10 <__assert_fail@plt+0x5d48>
   2518c:	ldr	r0, [sp, #96]	; 0x60
   25190:	ldr	r0, [r0, #76]	; 0x4c
   25194:	cmp	r0, #0
   25198:	beq	251b4 <__assert_fail@plt+0x132ec>
   2519c:	add	r0, sp, #104	; 0x68
   251a0:	bl	2d9b4 <__assert_fail@plt+0x1baec>
   251a4:	ldr	r0, [sp, #236]	; 0xec
   251a8:	bl	17c10 <__assert_fail@plt+0x5d48>
   251ac:	ldr	r0, [sp, #220]	; 0xdc
   251b0:	bl	17c10 <__assert_fail@plt+0x5d48>
   251b4:	ldr	r0, [sp, #112]	; 0x70
   251b8:	bl	17c10 <__assert_fail@plt+0x5d48>
   251bc:	ldr	r0, [sp, #116]	; 0x74
   251c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   251c4:	ldrb	r0, [sp, #179]	; 0xb3
   251c8:	cmp	r0, #0
   251cc:	beq	251d8 <__assert_fail@plt+0x13310>
   251d0:	ldr	r0, [sp, #108]	; 0x6c
   251d4:	bl	17c10 <__assert_fail@plt+0x5d48>
   251d8:	mov	r0, r8
   251dc:	sub	sp, fp, #28
   251e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   251e4:	mov	r6, #0
   251e8:	b	22c40 <__assert_fail@plt+0x10d78>
   251ec:	mov	r8, #12
   251f0:	b	25184 <__assert_fail@plt+0x132bc>
   251f4:	mov	r0, r5
   251f8:	mov	r5, #0
   251fc:	bl	17c10 <__assert_fail@plt+0x5d48>
   25200:	ldr	r0, [fp, #-184]	; 0xffffff48
   25204:	cmp	r0, r4
   25208:	beq	25210 <__assert_fail@plt+0x13348>
   2520c:	bl	17c10 <__assert_fail@plt+0x5d48>
   25210:	mov	r0, #16
   25214:	str	r4, [fp, #-184]	; 0xffffff48
   25218:	mov	r8, #1
   2521c:	cmp	r5, #0
   25220:	str	r0, [fp, #-188]	; 0xffffff44
   25224:	mov	r0, #0
   25228:	str	r0, [fp, #-192]	; 0xffffff40
   2522c:	bne	25184 <__assert_fail@plt+0x132bc>
   25230:	ldr	r1, [r6]
   25234:	ldr	r0, [r6, #8]
   25238:	cmp	r1, #1
   2523c:	blt	2527c <__assert_fail@plt+0x133b4>
   25240:	mov	r5, #0
   25244:	mov	r4, #0
   25248:	add	r0, r0, r5
   2524c:	ldr	r0, [r0, #20]
   25250:	bl	17c10 <__assert_fail@plt+0x5d48>
   25254:	ldr	r0, [r6, #8]
   25258:	add	r0, r0, r5
   2525c:	ldr	r0, [r0, #8]
   25260:	bl	17c10 <__assert_fail@plt+0x5d48>
   25264:	ldr	r1, [r6]
   25268:	ldr	r0, [r6, #8]
   2526c:	add	r4, r4, #1
   25270:	add	r5, r5, #24
   25274:	cmp	r4, r1
   25278:	blt	25248 <__assert_fail@plt+0x13380>
   2527c:	bl	17c10 <__assert_fail@plt+0x5d48>
   25280:	b	25184 <__assert_fail@plt+0x132bc>
   25284:	mov	r8, r0
   25288:	b	25184 <__assert_fail@plt+0x132bc>
   2528c:	ldr	r4, [sp, #88]	; 0x58
   25290:	mov	r0, r5
   25294:	mov	r5, #1
   25298:	bl	17c10 <__assert_fail@plt+0x5d48>
   2529c:	ldr	r0, [fp, #-184]	; 0xffffff48
   252a0:	cmp	r0, r4
   252a4:	bne	2520c <__assert_fail@plt+0x13344>
   252a8:	b	25210 <__assert_fail@plt+0x13348>
   252ac:	mov	r0, r6
   252b0:	bl	17c10 <__assert_fail@plt+0x5d48>
   252b4:	mov	r0, #0
   252b8:	bl	17c10 <__assert_fail@plt+0x5d48>
   252bc:	mov	r8, #12
   252c0:	b	25184 <__assert_fail@plt+0x132bc>
   252c4:	ldr	r1, [sp, #92]	; 0x5c
   252c8:	ldr	r5, [sp, #32]
   252cc:	add	r0, r8, #4
   252d0:	ldr	r2, [r0, #-4]
   252d4:	cmn	r2, #1
   252d8:	bne	252f4 <__assert_fail@plt+0x1342c>
   252dc:	add	r0, r0, #8
   252e0:	subs	r1, r1, #1
   252e4:	beq	250e0 <__assert_fail@plt+0x13218>
   252e8:	ldr	r2, [r0, #-4]
   252ec:	cmn	r2, #1
   252f0:	beq	252dc <__assert_fail@plt+0x13414>
   252f4:	ldr	r3, [sp, #132]	; 0x84
   252f8:	ldr	r7, [sp, #24]
   252fc:	ldr	ip, [sp, #116]	; 0x74
   25300:	cmp	r2, r3
   25304:	mov	r6, r7
   25308:	addne	r6, ip, r2, lsl #2
   2530c:	ldr	r2, [r6]
   25310:	str	r2, [r0, #-4]
   25314:	ldr	r6, [r0]
   25318:	cmp	r6, r3
   2531c:	addne	r7, ip, r6, lsl #2
   25320:	ldr	r3, [r7]
   25324:	ldr	r7, [fp, #-200]	; 0xffffff38
   25328:	add	r3, r3, r7
   2532c:	add	r2, r2, r7
   25330:	str	r3, [r0]
   25334:	str	r2, [r0, #-4]
   25338:	add	r0, r0, #8
   2533c:	subs	r1, r1, #1
   25340:	bne	252e8 <__assert_fail@plt+0x13420>
   25344:	b	250e0 <__assert_fail@plt+0x13218>
   25348:	ldr	r5, [sp, #56]	; 0x38
   2534c:	b	25354 <__assert_fail@plt+0x1348c>
   25350:	mov	r5, r8
   25354:	mov	r0, r5
   25358:	bl	17c10 <__assert_fail@plt+0x5d48>
   2535c:	ldr	r0, [fp, #-184]	; 0xffffff48
   25360:	ldr	r4, [sp, #88]	; 0x58
   25364:	cmp	r0, r4
   25368:	beq	25370 <__assert_fail@plt+0x134a8>
   2536c:	bl	17c10 <__assert_fail@plt+0x5d48>
   25370:	mov	r0, #16
   25374:	str	r4, [fp, #-184]	; 0xffffff48
   25378:	mov	r8, #12
   2537c:	str	r0, [fp, #-188]	; 0xffffff44
   25380:	mov	r0, #0
   25384:	str	r0, [fp, #-192]	; 0xffffff40
   25388:	ldr	r0, [sp, #68]	; 0x44
   2538c:	cmp	r0, #0
   25390:	beq	25184 <__assert_fail@plt+0x132bc>
   25394:	ldr	r0, [sp, #68]	; 0x44
   25398:	ldr	r1, [r0]
   2539c:	mov	r4, r0
   253a0:	ldr	r0, [r0, #8]
   253a4:	cmp	r1, #1
   253a8:	blt	2527c <__assert_fail@plt+0x133b4>
   253ac:	mov	r5, #0
   253b0:	mov	r6, #0
   253b4:	add	r0, r0, r5
   253b8:	ldr	r0, [r0, #20]
   253bc:	bl	17c10 <__assert_fail@plt+0x5d48>
   253c0:	ldr	r0, [r4, #8]
   253c4:	add	r0, r0, r5
   253c8:	ldr	r0, [r0, #8]
   253cc:	bl	17c10 <__assert_fail@plt+0x5d48>
   253d0:	ldr	r1, [r4]
   253d4:	ldr	r0, [r4, #8]
   253d8:	add	r6, r6, #1
   253dc:	add	r5, r5, #24
   253e0:	cmp	r6, r1
   253e4:	blt	253b4 <__assert_fail@plt+0x134ec>
   253e8:	b	2527c <__assert_fail@plt+0x133b4>
   253ec:	mov	r8, #1
   253f0:	b	25184 <__assert_fail@plt+0x132bc>
   253f4:	mov	r5, #0
   253f8:	b	25354 <__assert_fail@plt+0x1348c>
   253fc:	ldr	r5, [sp, #56]	; 0x38
   25400:	mov	r0, #0
   25404:	str	r0, [r6]
   25408:	str	r0, [sl]
   2540c:	b	25354 <__assert_fail@plt+0x1348c>
   25410:	push	{fp, lr}
   25414:	mov	fp, sp
   25418:	sub	sp, sp, #16
   2541c:	mov	ip, #1
   25420:	str	r2, [sp, #4]
   25424:	str	ip, [sp, #12]
   25428:	mov	ip, #0
   2542c:	str	ip, [sp]
   25430:	ldr	ip, [fp, #8]
   25434:	str	ip, [sp, #8]
   25438:	bl	25444 <__assert_fail@plt+0x1357c>
   2543c:	mov	sp, fp
   25440:	pop	{fp, pc}
   25444:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25448:	add	fp, sp, #28
   2544c:	sub	sp, sp, #60	; 0x3c
   25450:	mvn	r4, #0
   25454:	cmp	r3, #0
   25458:	bmi	2567c <__assert_fail@plt+0x137b4>
   2545c:	mov	r6, r3
   25460:	mov	r7, r2
   25464:	cmp	r3, r2
   25468:	bgt	2567c <__assert_fail@plt+0x137b4>
   2546c:	mov	r5, r0
   25470:	ldr	r0, [fp, #8]
   25474:	str	r1, [sp, #44]	; 0x2c
   25478:	movw	r1, #0
   2547c:	mov	r8, r7
   25480:	ldr	r4, [r5]
   25484:	movt	r1, #0
   25488:	add	r0, r0, r6
   2548c:	cmp	r0, r7
   25490:	bicle	r8, r0, r0, asr #31
   25494:	movw	r0, #0
   25498:	movt	r0, #0
   2549c:	orrs	r9, r1, r0
   254a0:	beq	254ac <__assert_fail@plt+0x135e4>
   254a4:	add	r0, r4, #136	; 0x88
   254a8:	bl	11a90 <pthread_mutex_lock@plt>
   254ac:	ldrb	r0, [r5, #28]
   254b0:	ldr	r2, [fp, #16]
   254b4:	cmp	r8, r6
   254b8:	ubfx	r1, r0, #5, #2
   254bc:	str	r4, [sp, #36]	; 0x24
   254c0:	str	r6, [fp, #-36]	; 0xffffffdc
   254c4:	str	r1, [sp, #40]	; 0x28
   254c8:	ble	25568 <__assert_fail@plt+0x136a0>
   254cc:	tst	r0, #8
   254d0:	bne	25568 <__assert_fail@plt+0x136a0>
   254d4:	ldr	r6, [r5, #16]
   254d8:	cmp	r6, #0
   254dc:	beq	25568 <__assert_fail@plt+0x136a0>
   254e0:	ldr	r4, [r5]
   254e4:	mov	sl, r2
   254e8:	mov	r0, r6
   254ec:	mov	r1, #0
   254f0:	mov	r2, #256	; 0x100
   254f4:	bl	11d0c <memset@plt>
   254f8:	ldr	r1, [r4, #36]	; 0x24
   254fc:	mov	r0, r5
   25500:	mov	r2, r6
   25504:	bl	21b34 <__assert_fail@plt+0xfc6c>
   25508:	ldr	r0, [r4, #36]	; 0x24
   2550c:	ldr	r1, [r4, #40]	; 0x28
   25510:	cmp	r0, r1
   25514:	beq	25528 <__assert_fail@plt+0x13660>
   25518:	mov	r0, r5
   2551c:	mov	r2, r6
   25520:	bl	21b34 <__assert_fail@plt+0xfc6c>
   25524:	ldr	r0, [r4, #36]	; 0x24
   25528:	ldr	r1, [r4, #44]	; 0x2c
   2552c:	cmp	r0, r1
   25530:	beq	25544 <__assert_fail@plt+0x1367c>
   25534:	mov	r0, r5
   25538:	mov	r2, r6
   2553c:	bl	21b34 <__assert_fail@plt+0xfc6c>
   25540:	ldr	r0, [r4, #36]	; 0x24
   25544:	ldr	r1, [r4, #48]	; 0x30
   25548:	cmp	r0, r1
   2554c:	movne	r0, r5
   25550:	movne	r2, r6
   25554:	blne	21b34 <__assert_fail@plt+0xfc6c>
   25558:	ldrb	r0, [r5, #28]
   2555c:	mov	r2, sl
   25560:	orr	r0, r0, #8
   25564:	strb	r0, [r5, #28]
   25568:	str	r9, [fp, #-40]	; 0xffffffd8
   2556c:	mov	sl, #1
   25570:	mov	r9, #0
   25574:	cmp	r2, #0
   25578:	str	r5, [fp, #-32]	; 0xffffffe0
   2557c:	beq	255d0 <__assert_fail@plt+0x13708>
   25580:	ldr	r4, [fp, #-36]	; 0xffffffdc
   25584:	ands	r1, r0, #16
   25588:	bne	25608 <__assert_fail@plt+0x13740>
   2558c:	and	r0, r0, #6
   25590:	cmp	r0, #4
   25594:	bne	255f8 <__assert_fail@plt+0x13730>
   25598:	ldr	r0, [fp, #-32]	; 0xffffffe0
   2559c:	ldr	sl, [r2]
   255a0:	ldr	r0, [r0, #24]
   255a4:	cmp	sl, r0
   255a8:	bhi	25600 <__assert_fail@plt+0x13738>
   255ac:	cmp	sl, #1
   255b0:	bge	25604 <__assert_fail@plt+0x1373c>
   255b4:	mov	sl, #1
   255b8:	mov	r9, #0
   255bc:	lsl	r0, sl, #3
   255c0:	bl	38450 <__assert_fail@plt+0x26588>
   255c4:	cmp	r0, #0
   255c8:	bne	25618 <__assert_fail@plt+0x13750>
   255cc:	b	255e4 <__assert_fail@plt+0x1371c>
   255d0:	ldr	r4, [fp, #-36]	; 0xffffffdc
   255d4:	lsl	r0, sl, #3
   255d8:	bl	38450 <__assert_fail@plt+0x26588>
   255dc:	cmp	r0, #0
   255e0:	bne	25618 <__assert_fail@plt+0x13750>
   255e4:	ldr	r5, [fp, #-40]	; 0xffffffd8
   255e8:	mvn	r4, #1
   255ec:	cmp	r5, #0
   255f0:	bne	25670 <__assert_fail@plt+0x137a8>
   255f4:	b	2567c <__assert_fail@plt+0x137b4>
   255f8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   255fc:	ldr	r0, [r0, #24]
   25600:	add	sl, r0, #1
   25604:	mov	r9, r2
   25608:	lsl	r0, sl, #3
   2560c:	bl	38450 <__assert_fail@plt+0x26588>
   25610:	cmp	r0, #0
   25614:	beq	255e4 <__assert_fail@plt+0x1371c>
   25618:	mov	r6, r0
   2561c:	ldr	r0, [fp, #12]
   25620:	str	r8, [sp]
   25624:	ldr	r1, [sp, #44]	; 0x2c
   25628:	mov	r2, r7
   2562c:	mov	r3, r4
   25630:	stmib	sp, {r0, sl}
   25634:	ldr	r0, [sp, #40]	; 0x28
   25638:	str	r6, [sp, #12]
   2563c:	str	r0, [sp, #16]
   25640:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25644:	bl	22b60 <__assert_fail@plt+0x10c98>
   25648:	cmp	r0, #0
   2564c:	beq	25688 <__assert_fail@plt+0x137c0>
   25650:	cmp	r0, #1
   25654:	mvn	r4, #1
   25658:	mvneq	r4, #0
   2565c:	ldr	r5, [fp, #-40]	; 0xffffffd8
   25660:	mov	r0, r6
   25664:	bl	17c10 <__assert_fail@plt+0x5d48>
   25668:	cmp	r5, #0
   2566c:	beq	2567c <__assert_fail@plt+0x137b4>
   25670:	ldr	r0, [sp, #36]	; 0x24
   25674:	add	r0, r0, #136	; 0x88
   25678:	bl	119c4 <pthread_mutex_unlock@plt>
   2567c:	mov	r0, r4
   25680:	sub	sp, fp, #28
   25684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25688:	cmp	r9, #0
   2568c:	beq	25970 <__assert_fail@plt+0x13aa8>
   25690:	ldr	r0, [fp, #-32]	; 0xffffffe0
   25694:	add	r8, sl, #1
   25698:	ldrb	r0, [r0, #28]
   2569c:	ubfx	r0, r0, #1, #2
   256a0:	cmp	r0, #1
   256a4:	beq	256f4 <__assert_fail@plt+0x1382c>
   256a8:	cmp	r0, #0
   256ac:	bne	25720 <__assert_fail@plt+0x13858>
   256b0:	lsl	r5, r8, #2
   256b4:	mov	r0, r5
   256b8:	bl	38450 <__assert_fail@plt+0x26588>
   256bc:	mov	r7, #0
   256c0:	cmp	r0, #0
   256c4:	str	r0, [r9, #4]
   256c8:	beq	25954 <__assert_fail@plt+0x13a8c>
   256cc:	mov	r0, r5
   256d0:	bl	38450 <__assert_fail@plt+0x26588>
   256d4:	cmp	r0, #0
   256d8:	str	r0, [r9, #8]
   256dc:	beq	259f0 <__assert_fail@plt+0x13b28>
   256e0:	str	r8, [r9]
   256e4:	mov	lr, #1
   256e8:	cmp	sl, #1
   256ec:	bge	25730 <__assert_fail@plt+0x13868>
   256f0:	b	25710 <__assert_fail@plt+0x13848>
   256f4:	ldr	r0, [r9]
   256f8:	mov	lr, #1
   256fc:	cmp	r8, r0
   25700:	bhi	25998 <__assert_fail@plt+0x13ad0>
   25704:	mov	r8, r0
   25708:	cmp	sl, #1
   2570c:	bge	25730 <__assert_fail@plt+0x13868>
   25710:	mov	sl, #0
   25714:	cmp	sl, r8
   25718:	bcc	25930 <__assert_fail@plt+0x13a68>
   2571c:	b	25950 <__assert_fail@plt+0x13a88>
   25720:	ldr	r8, [r9]
   25724:	mov	lr, #2
   25728:	cmp	sl, #1
   2572c:	blt	25710 <__assert_fail@plt+0x13848>
   25730:	ldr	r5, [r9, #4]
   25734:	ldr	r4, [r9, #8]
   25738:	mov	r2, #0
   2573c:	cmp	sl, #3
   25740:	str	r6, [sp, #44]	; 0x2c
   25744:	bhi	257d8 <__assert_fail@plt+0x13910>
   25748:	tst	sl, #1
   2574c:	mov	r3, r2
   25750:	beq	2576c <__assert_fail@plt+0x138a4>
   25754:	ldr	r0, [sp, #44]	; 0x2c
   25758:	orr	r3, r2, #1
   2575c:	ldr	r1, [r0, r2, lsl #3]!
   25760:	str	r1, [r5, r2, lsl #2]
   25764:	ldr	r0, [r0, #4]
   25768:	str	r0, [r4, r2, lsl #2]
   2576c:	orr	r0, r2, #1
   25770:	cmp	sl, r0
   25774:	beq	2591c <__assert_fail@plt+0x13a54>
   25778:	ldr	r7, [sp, #44]	; 0x2c
   2577c:	add	r2, r3, #1
   25780:	sub	r0, sl, r3
   25784:	mov	r6, #0
   25788:	add	r1, r5, r2, lsl #2
   2578c:	add	r2, r4, r2, lsl #2
   25790:	add	ip, r7, r3, lsl #3
   25794:	add	r7, ip, #12
   25798:	ldr	r4, [r7, #-12]
   2579c:	add	r5, r1, r6
   257a0:	subs	r0, r0, #2
   257a4:	str	r4, [r5, #-4]
   257a8:	add	r4, ip, r6, lsl #1
   257ac:	add	r5, r2, r6
   257b0:	ldr	r3, [r4, #4]
   257b4:	str	r3, [r5, #-4]
   257b8:	ldr	r3, [r4, #8]
   257bc:	str	r3, [r1, r6]
   257c0:	ldr	r3, [r7]
   257c4:	add	r7, r7, #16
   257c8:	str	r3, [r2, r6]
   257cc:	add	r6, r6, #8
   257d0:	bne	25798 <__assert_fail@plt+0x138d0>
   257d4:	b	2591c <__assert_fail@plt+0x13a54>
   257d8:	ldr	r0, [sp, #44]	; 0x2c
   257dc:	str	lr, [sp, #40]	; 0x28
   257e0:	add	lr, r4, sl, lsl #2
   257e4:	add	r6, r5, sl, lsl #2
   257e8:	mov	r8, #0
   257ec:	mov	r1, #0
   257f0:	mov	r3, #0
   257f4:	mov	r2, #0
   257f8:	add	r7, r0, sl, lsl #3
   257fc:	cmp	r0, lr
   25800:	movwcc	r8, #1
   25804:	cmp	r7, r4
   25808:	movwhi	r1, #1
   2580c:	cmp	r0, r6
   25810:	mov	r0, #0
   25814:	movwcc	r3, #1
   25818:	cmp	r7, r5
   2581c:	mov	r7, #0
   25820:	movwhi	r7, #1
   25824:	cmp	r4, r6
   25828:	mov	r6, #0
   2582c:	movwcc	r6, #1
   25830:	cmp	r5, lr
   25834:	movwcc	r0, #1
   25838:	tst	r0, r6
   2583c:	bne	258c8 <__assert_fail@plt+0x13a00>
   25840:	ands	r0, r7, r3
   25844:	bne	258c8 <__assert_fail@plt+0x13a00>
   25848:	ldr	lr, [sp, #40]	; 0x28
   2584c:	ands	r0, r1, r8
   25850:	bne	25748 <__assert_fail@plt+0x13880>
   25854:	bic	r0, sl, #3
   25858:	mov	r1, #1
   2585c:	str	r4, [sp, #32]
   25860:	str	r0, [sp, #28]
   25864:	subs	r0, r0, #4
   25868:	add	r0, r1, r0, lsr #2
   2586c:	and	r1, r0, #1
   25870:	str	r1, [sp, #24]
   25874:	beq	258dc <__assert_fail@plt+0x13a14>
   25878:	ldr	r6, [sp, #44]	; 0x2c
   2587c:	sub	r7, r0, r1
   25880:	mov	r8, r4
   25884:	mov	r3, #0
   25888:	mov	r1, #32
   2588c:	mov	r4, #64	; 0x40
   25890:	mov	lr, r5
   25894:	add	ip, r6, #32
   25898:	vld2.32	{d16-d19}, [r6], r4
   2589c:	add	r2, lr, #16
   258a0:	add	r0, r8, #16
   258a4:	subs	r7, r7, #2
   258a8:	add	r3, r3, #8
   258ac:	vst1.32	{d16-d17}, [lr], r1
   258b0:	vst1.32	{d18-d19}, [r8], r1
   258b4:	vld2.32	{d16-d19}, [ip]
   258b8:	vst1.32	{d16-d17}, [r2]
   258bc:	vst1.32	{d18-d19}, [r0]
   258c0:	bne	25894 <__assert_fail@plt+0x139cc>
   258c4:	b	258e0 <__assert_fail@plt+0x13a18>
   258c8:	ldr	lr, [sp, #40]	; 0x28
   258cc:	tst	sl, #1
   258d0:	mov	r3, r2
   258d4:	bne	25754 <__assert_fail@plt+0x1388c>
   258d8:	b	2576c <__assert_fail@plt+0x138a4>
   258dc:	mov	r3, #0
   258e0:	ldr	r0, [sp, #24]
   258e4:	ldr	lr, [sp, #40]	; 0x28
   258e8:	ldr	r4, [sp, #32]
   258ec:	cmp	r0, #0
   258f0:	beq	25910 <__assert_fail@plt+0x13a48>
   258f4:	ldr	r0, [sp, #44]	; 0x2c
   258f8:	add	r0, r0, r3, lsl #3
   258fc:	vld2.32	{d16-d19}, [r0]
   25900:	add	r0, r5, r3, lsl #2
   25904:	vst1.32	{d16-d17}, [r0]
   25908:	add	r0, r4, r3, lsl #2
   2590c:	vst1.32	{d18-d19}, [r0]
   25910:	ldr	r2, [sp, #28]
   25914:	cmp	sl, r2
   25918:	bne	25748 <__assert_fail@plt+0x13880>
   2591c:	ldr	r8, [r9]
   25920:	ldr	r4, [fp, #-36]	; 0xffffffdc
   25924:	ldr	r6, [sp, #44]	; 0x2c
   25928:	cmp	sl, r8
   2592c:	bcs	25950 <__assert_fail@plt+0x13a88>
   25930:	ldmib	r9, {r0, r1}
   25934:	mvn	r2, #0
   25938:	str	r2, [r1, sl, lsl #2]
   2593c:	str	r2, [r0, sl, lsl #2]
   25940:	add	sl, sl, #1
   25944:	ldr	r3, [r9]
   25948:	cmp	sl, r3
   2594c:	bcc	25938 <__assert_fail@plt+0x13a70>
   25950:	mov	r7, lr
   25954:	ldr	r1, [fp, #-32]	; 0xffffffe0
   25958:	cmp	r7, #0
   2595c:	ldrb	r0, [r1, #28]
   25960:	and	r0, r0, #249	; 0xf9
   25964:	orr	r0, r0, r7, lsl #1
   25968:	strb	r0, [r1, #28]
   2596c:	beq	25990 <__assert_fail@plt+0x13ac8>
   25970:	ldr	r0, [fp, #20]
   25974:	cmp	r0, #0
   25978:	beq	25988 <__assert_fail@plt+0x13ac0>
   2597c:	ldr	r0, [r6, #4]
   25980:	sub	r4, r0, r4
   25984:	b	2565c <__assert_fail@plt+0x13794>
   25988:	ldr	r4, [r6]
   2598c:	b	2565c <__assert_fail@plt+0x13794>
   25990:	mvn	r4, #1
   25994:	b	2565c <__assert_fail@plt+0x13794>
   25998:	ldr	r0, [r9, #4]
   2599c:	lsl	r1, r8, #2
   259a0:	str	r6, [sp, #44]	; 0x2c
   259a4:	mov	r6, r1
   259a8:	bl	38480 <__assert_fail@plt+0x265b8>
   259ac:	mov	r7, #0
   259b0:	cmp	r0, #0
   259b4:	beq	259fc <__assert_fail@plt+0x13b34>
   259b8:	mov	r5, r0
   259bc:	ldr	r0, [r9, #8]
   259c0:	mov	r1, r6
   259c4:	bl	38480 <__assert_fail@plt+0x265b8>
   259c8:	cmp	r0, #0
   259cc:	beq	25a04 <__assert_fail@plt+0x13b3c>
   259d0:	ldr	r6, [sp, #44]	; 0x2c
   259d4:	str	r8, [r9]
   259d8:	str	r5, [r9, #4]
   259dc:	str	r0, [r9, #8]
   259e0:	mov	lr, #1
   259e4:	cmp	sl, #1
   259e8:	bge	25730 <__assert_fail@plt+0x13868>
   259ec:	b	25710 <__assert_fail@plt+0x13848>
   259f0:	ldr	r0, [r9, #4]
   259f4:	bl	17c10 <__assert_fail@plt+0x5d48>
   259f8:	b	25954 <__assert_fail@plt+0x13a8c>
   259fc:	ldr	r6, [sp, #44]	; 0x2c
   25a00:	b	25954 <__assert_fail@plt+0x13a8c>
   25a04:	mov	r0, r5
   25a08:	bl	17c10 <__assert_fail@plt+0x5d48>
   25a0c:	ldr	r6, [sp, #44]	; 0x2c
   25a10:	b	25954 <__assert_fail@plt+0x13a8c>
   25a14:	push	{fp, lr}
   25a18:	mov	fp, sp
   25a1c:	sub	sp, sp, #16
   25a20:	mov	ip, #0
   25a24:	str	r2, [sp, #4]
   25a28:	str	ip, [sp, #12]
   25a2c:	ldr	ip, [fp, #12]
   25a30:	str	ip, [sp, #8]
   25a34:	ldr	ip, [fp, #8]
   25a38:	str	ip, [sp]
   25a3c:	bl	25444 <__assert_fail@plt+0x1357c>
   25a40:	mov	sp, fp
   25a44:	pop	{fp, pc}
   25a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a4c:	add	fp, sp, #28
   25a50:	sub	sp, sp, #20
   25a54:	ldr	r4, [fp, #8]
   25a58:	mov	r8, r1
   25a5c:	mov	r1, r0
   25a60:	mov	r6, r2
   25a64:	orr	r0, r4, r2
   25a68:	ldr	r2, [fp, #20]
   25a6c:	orrs	r0, r0, r2
   25a70:	bmi	25b30 <__assert_fail@plt+0x13c68>
   25a74:	adds	sl, r6, r4
   25a78:	bvs	25b30 <__assert_fail@plt+0x13c68>
   25a7c:	mov	r5, #0
   25a80:	cmp	r4, #1
   25a84:	blt	25adc <__assert_fail@plt+0x13c14>
   25a88:	mov	r9, r3
   25a8c:	cmp	r6, #1
   25a90:	blt	25ae4 <__assert_fail@plt+0x13c1c>
   25a94:	mov	r0, sl
   25a98:	mov	r5, r1
   25a9c:	bl	38450 <__assert_fail@plt+0x26588>
   25aa0:	cmp	r0, #0
   25aa4:	beq	25b30 <__assert_fail@plt+0x13c68>
   25aa8:	mov	r1, r8
   25aac:	mov	r2, r6
   25ab0:	mov	r7, r0
   25ab4:	bl	11ab4 <memcpy@plt>
   25ab8:	add	r0, r7, r6
   25abc:	mov	r1, r9
   25ac0:	mov	r2, r4
   25ac4:	bl	11ab4 <memcpy@plt>
   25ac8:	ldr	r2, [fp, #20]
   25acc:	mov	r1, r5
   25ad0:	mov	r4, r7
   25ad4:	mov	r5, #0
   25ad8:	b	25aec <__assert_fail@plt+0x13c24>
   25adc:	mov	r7, r8
   25ae0:	b	25ae8 <__assert_fail@plt+0x13c20>
   25ae4:	mov	r7, r9
   25ae8:	mov	r4, #0
   25aec:	ldr	r0, [fp, #16]
   25af0:	ldr	r3, [fp, #12]
   25af4:	mov	r6, #1
   25af8:	str	r2, [sp, #4]
   25afc:	mov	r2, sl
   25b00:	str	r5, [sp]
   25b04:	str	r6, [sp, #12]
   25b08:	str	r0, [sp, #8]
   25b0c:	mov	r0, r1
   25b10:	mov	r1, r7
   25b14:	bl	25444 <__assert_fail@plt+0x1357c>
   25b18:	mov	r5, r0
   25b1c:	mov	r0, r4
   25b20:	bl	17c10 <__assert_fail@plt+0x5d48>
   25b24:	mov	r0, r5
   25b28:	sub	sp, fp, #28
   25b2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b30:	mvn	r0, #1
   25b34:	sub	sp, fp, #28
   25b38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25b3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25b40:	add	fp, sp, #28
   25b44:	sub	sp, sp, #20
   25b48:	ldr	r4, [fp, #8]
   25b4c:	mov	r8, r1
   25b50:	mov	r1, r0
   25b54:	mov	r6, r2
   25b58:	orr	r0, r4, r2
   25b5c:	ldr	r2, [fp, #24]
   25b60:	orrs	r0, r0, r2
   25b64:	bmi	25c24 <__assert_fail@plt+0x13d5c>
   25b68:	adds	sl, r6, r4
   25b6c:	bvs	25c24 <__assert_fail@plt+0x13d5c>
   25b70:	mov	r5, #0
   25b74:	cmp	r4, #1
   25b78:	blt	25bd0 <__assert_fail@plt+0x13d08>
   25b7c:	mov	r9, r3
   25b80:	cmp	r6, #1
   25b84:	blt	25bd8 <__assert_fail@plt+0x13d10>
   25b88:	mov	r0, sl
   25b8c:	mov	r5, r1
   25b90:	bl	38450 <__assert_fail@plt+0x26588>
   25b94:	cmp	r0, #0
   25b98:	beq	25c24 <__assert_fail@plt+0x13d5c>
   25b9c:	mov	r1, r8
   25ba0:	mov	r2, r6
   25ba4:	mov	r7, r0
   25ba8:	bl	11ab4 <memcpy@plt>
   25bac:	add	r0, r7, r6
   25bb0:	mov	r1, r9
   25bb4:	mov	r2, r4
   25bb8:	bl	11ab4 <memcpy@plt>
   25bbc:	ldr	r2, [fp, #24]
   25bc0:	mov	r1, r5
   25bc4:	mov	r4, r7
   25bc8:	mov	r5, #0
   25bcc:	b	25be0 <__assert_fail@plt+0x13d18>
   25bd0:	mov	r7, r8
   25bd4:	b	25bdc <__assert_fail@plt+0x13d14>
   25bd8:	mov	r7, r9
   25bdc:	mov	r4, #0
   25be0:	ldr	r0, [fp, #20]
   25be4:	ldr	r6, [fp, #16]
   25be8:	ldr	r3, [fp, #12]
   25bec:	str	r2, [sp, #4]
   25bf0:	mov	r2, sl
   25bf4:	str	r5, [sp, #12]
   25bf8:	str	r0, [sp, #8]
   25bfc:	mov	r0, r1
   25c00:	mov	r1, r7
   25c04:	str	r6, [sp]
   25c08:	bl	25444 <__assert_fail@plt+0x1357c>
   25c0c:	mov	r5, r0
   25c10:	mov	r0, r4
   25c14:	bl	17c10 <__assert_fail@plt+0x5d48>
   25c18:	mov	r0, r5
   25c1c:	sub	sp, fp, #28
   25c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c24:	mvn	r0, #1
   25c28:	sub	sp, fp, #28
   25c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25c30:	ldrb	ip, [r0, #28]
   25c34:	cmp	r2, #0
   25c38:	bic	ip, ip, #6
   25c3c:	orrne	ip, ip, #2
   25c40:	strb	ip, [r0, #28]
   25c44:	ldr	r0, [sp]
   25c48:	moveq	r0, r2
   25c4c:	cmp	r2, #0
   25c50:	moveq	r3, r2
   25c54:	stm	r1, {r2, r3}
   25c58:	str	r0, [r1, #8]
   25c5c:	bx	lr
   25c60:	push	{r4, sl, fp, lr}
   25c64:	add	fp, sp, #8
   25c68:	mov	r4, r0
   25c6c:	ldr	r0, [r0, #24]
   25c70:	bl	17c10 <__assert_fail@plt+0x5d48>
   25c74:	ldr	r0, [r4, #36]	; 0x24
   25c78:	bl	17c10 <__assert_fail@plt+0x5d48>
   25c7c:	ldr	r0, [r4, #40]	; 0x28
   25c80:	add	r1, r4, #4
   25c84:	cmp	r0, r1
   25c88:	beq	25c9c <__assert_fail@plt+0x13dd4>
   25c8c:	ldr	r0, [r0, #8]
   25c90:	bl	17c10 <__assert_fail@plt+0x5d48>
   25c94:	ldr	r0, [r4, #40]	; 0x28
   25c98:	bl	17c10 <__assert_fail@plt+0x5d48>
   25c9c:	ldr	r0, [r4, #12]
   25ca0:	bl	17c10 <__assert_fail@plt+0x5d48>
   25ca4:	ldr	r0, [r4, #48]	; 0x30
   25ca8:	bl	17c10 <__assert_fail@plt+0x5d48>
   25cac:	ldr	r0, [r4, #44]	; 0x2c
   25cb0:	bl	17c10 <__assert_fail@plt+0x5d48>
   25cb4:	mov	r0, r4
   25cb8:	pop	{r4, sl, fp, lr}
   25cbc:	b	17c10 <__assert_fail@plt+0x5d48>
   25cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25cc4:	add	fp, sp, #28
   25cc8:	sub	sp, sp, #108	; 0x6c
   25ccc:	mov	r3, r0
   25cd0:	ldrb	r0, [r0, #74]	; 0x4a
   25cd4:	ldr	r9, [r3, #36]	; 0x24
   25cd8:	ldr	r1, [r3, #48]	; 0x30
   25cdc:	ldr	r8, [r3, #28]
   25ce0:	str	r3, [sp, #20]
   25ce4:	cmp	r9, r1
   25ce8:	movgt	r9, r1
   25cec:	cmp	r0, #0
   25cf0:	bne	25d0c <__assert_fail@plt+0x13e44>
   25cf4:	ldr	r0, [r3, #64]	; 0x40
   25cf8:	cmp	r0, #0
   25cfc:	bne	25d0c <__assert_fail@plt+0x13e44>
   25d00:	ldrb	r0, [r3, #76]	; 0x4c
   25d04:	cmp	r0, #0
   25d08:	beq	25d14 <__assert_fail@plt+0x13e4c>
   25d0c:	ldr	r7, [r3, #32]
   25d10:	b	25f50 <__assert_fail@plt+0x14088>
   25d14:	cmp	r9, r8
   25d18:	ble	25f28 <__assert_fail@plt+0x14060>
   25d1c:	add	r5, r3, #16
   25d20:	add	sl, sp, #32
   25d24:	str	r9, [sp, #16]
   25d28:	b	25d48 <__assert_fail@plt+0x13e80>
   25d2c:	mov	r8, r9
   25d30:	ldr	r9, [sp, #16]
   25d34:	mov	r3, sl
   25d38:	add	sl, sp, #32
   25d3c:	cmp	r9, r8
   25d40:	mov	r7, r8
   25d44:	ble	26320 <__assert_fail@plt+0x14458>
   25d48:	ldr	r6, [r3, #24]
   25d4c:	ldr	r4, [r3]
   25d50:	add	r0, r6, r8
   25d54:	ldrb	r7, [r4, r0]
   25d58:	tst	r7, #128	; 0x80
   25d5c:	bne	25db4 <__assert_fail@plt+0x13eec>
   25d60:	mov	r0, r5
   25d64:	bl	11ae4 <mbsinit@plt>
   25d68:	cmp	r0, #0
   25d6c:	beq	25db4 <__assert_fail@plt+0x13eec>
   25d70:	mov	r0, r7
   25d74:	bl	11e74 <towupper@plt>
   25d78:	cmp	r0, #128	; 0x80
   25d7c:	bcs	25da8 <__assert_fail@plt+0x13ee0>
   25d80:	ldr	r3, [sp, #20]
   25d84:	ldr	r1, [r3, #4]
   25d88:	strb	r0, [r1, r8]
   25d8c:	ldr	r1, [r3, #8]
   25d90:	str	r0, [r1, r8, lsl #2]
   25d94:	add	r8, r8, #1
   25d98:	cmp	r9, r8
   25d9c:	mov	r7, r8
   25da0:	bgt	25d48 <__assert_fail@plt+0x13e80>
   25da4:	b	26320 <__assert_fail@plt+0x14458>
   25da8:	ldr	r0, [sp, #20]
   25dac:	ldr	r4, [r0]
   25db0:	ldr	r6, [r0, #24]
   25db4:	ldm	r5, {r0, r1}
   25db8:	str	r1, [fp, #-36]	; 0xffffffdc
   25dbc:	sub	r2, r9, r8
   25dc0:	mov	r3, r5
   25dc4:	str	r0, [fp, #-40]	; 0xffffffd8
   25dc8:	add	r0, r4, r6
   25dcc:	add	r1, r0, r8
   25dd0:	add	r0, sp, #28
   25dd4:	bl	3966c <__assert_fail@plt+0x277a4>
   25dd8:	sub	r4, r0, #1
   25ddc:	mov	r6, r0
   25de0:	cmn	r4, #4
   25de4:	bhi	25ed0 <__assert_fail@plt+0x14008>
   25de8:	ldr	r0, [sp, #28]
   25dec:	bl	11e74 <towupper@plt>
   25df0:	mov	r7, r0
   25df4:	ldr	r0, [sp, #28]
   25df8:	cmp	r7, r0
   25dfc:	bne	25e20 <__assert_fail@plt+0x13f58>
   25e00:	ldr	sl, [sp, #20]
   25e04:	ldr	r1, [sl]
   25e08:	ldr	r2, [sl, #24]
   25e0c:	ldr	r0, [sl, #4]
   25e10:	add	r1, r1, r2
   25e14:	add	r0, r0, r8
   25e18:	add	r1, r1, r8
   25e1c:	b	25e48 <__assert_fail@plt+0x13f80>
   25e20:	mov	r0, sl
   25e24:	mov	r1, r7
   25e28:	sub	r2, fp, #40	; 0x28
   25e2c:	bl	11a0c <wcrtomb@plt>
   25e30:	cmp	r6, r0
   25e34:	bne	25f30 <__assert_fail@plt+0x14068>
   25e38:	mov	r1, sl
   25e3c:	ldr	sl, [sp, #20]
   25e40:	ldr	r0, [sl, #4]
   25e44:	add	r0, r0, r8
   25e48:	mov	r2, r6
   25e4c:	bl	11ab4 <memcpy@plt>
   25e50:	ldr	r0, [sl, #8]
   25e54:	add	r9, r8, #1
   25e58:	str	r7, [r0, r8, lsl #2]
   25e5c:	add	r7, r6, r8
   25e60:	cmp	r9, r7
   25e64:	bge	25d2c <__assert_fail@plt+0x13e64>
   25e68:	add	r0, r0, r8, lsl #2
   25e6c:	mvn	r1, #3
   25e70:	add	r2, r1, r6, lsl #2
   25e74:	mov	r1, #255	; 0xff
   25e78:	add	r0, r0, #4
   25e7c:	bl	11d0c <memset@plt>
   25e80:	sub	r0, r6, #2
   25e84:	ands	r1, r4, #7
   25e88:	add	sl, sp, #32
   25e8c:	beq	25e9c <__assert_fail@plt+0x13fd4>
   25e90:	subs	r1, r1, #1
   25e94:	add	r9, r9, #1
   25e98:	bne	25e90 <__assert_fail@plt+0x13fc8>
   25e9c:	ldr	r3, [sp, #20]
   25ea0:	cmp	r0, #7
   25ea4:	bcc	25eb8 <__assert_fail@plt+0x13ff0>
   25ea8:	add	r0, r6, r8
   25eac:	sub	r0, r0, r9
   25eb0:	subs	r0, r0, #8
   25eb4:	bne	25eb0 <__assert_fail@plt+0x13fe8>
   25eb8:	ldr	r9, [sp, #16]
   25ebc:	mov	r8, r7
   25ec0:	cmp	r9, r8
   25ec4:	mov	r7, r8
   25ec8:	bgt	25d48 <__assert_fail@plt+0x13e80>
   25ecc:	b	26320 <__assert_fail@plt+0x14458>
   25ed0:	ldr	r3, [sp, #20]
   25ed4:	add	r0, r6, #1
   25ed8:	cmp	r0, #2
   25edc:	bcc	25ef0 <__assert_fail@plt+0x14028>
   25ee0:	ldr	r0, [r3, #36]	; 0x24
   25ee4:	ldr	r1, [r3, #48]	; 0x30
   25ee8:	cmp	r0, r1
   25eec:	blt	25f3c <__assert_fail@plt+0x14074>
   25ef0:	ldr	r0, [r3, #4]
   25ef4:	cmn	r6, #1
   25ef8:	strb	r7, [r0, r8]
   25efc:	ldr	r0, [r3, #8]
   25f00:	str	r7, [r0, r8, lsl #2]
   25f04:	add	r8, r8, #1
   25f08:	bne	25d3c <__assert_fail@plt+0x13e74>
   25f0c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25f10:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25f14:	stm	r5, {r0, r1}
   25f18:	cmp	r9, r8
   25f1c:	mov	r7, r8
   25f20:	bgt	25d48 <__assert_fail@plt+0x13e80>
   25f24:	b	26320 <__assert_fail@plt+0x14458>
   25f28:	mov	r7, r8
   25f2c:	b	26320 <__assert_fail@plt+0x14458>
   25f30:	ldr	r3, [sp, #20]
   25f34:	mov	r7, r8
   25f38:	b	25f58 <__assert_fail@plt+0x14090>
   25f3c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   25f40:	ldr	r1, [fp, #-36]	; 0xffffffdc
   25f44:	mov	r7, r8
   25f48:	stm	r5, {r0, r1}
   25f4c:	b	26320 <__assert_fail@plt+0x14458>
   25f50:	cmp	r8, r9
   25f54:	bge	26320 <__assert_fail@plt+0x14458>
   25f58:	mov	r4, r3
   25f5c:	mov	sl, r9
   25f60:	sub	r2, r9, r8
   25f64:	ldr	r0, [r4, #16]!
   25f68:	ldr	r1, [r4, #4]
   25f6c:	str	r0, [fp, #-40]	; 0xffffffd8
   25f70:	str	r1, [fp, #-36]	; 0xffffffdc
   25f74:	ldr	r0, [r4, #48]	; 0x30
   25f78:	cmp	r0, #0
   25f7c:	bne	2609c <__assert_fail@plt+0x141d4>
   25f80:	ldr	r0, [r3]
   25f84:	ldr	r1, [r3, #24]
   25f88:	mov	r9, r7
   25f8c:	add	r0, r0, r1
   25f90:	add	r7, r0, r7
   25f94:	add	r0, sp, #24
   25f98:	mov	r1, r7
   25f9c:	mov	r3, r4
   25fa0:	bl	3966c <__assert_fail@plt+0x277a4>
   25fa4:	mov	r5, r0
   25fa8:	sub	r0, r0, #1
   25fac:	cmn	r0, #4
   25fb0:	str	r0, [sp, #16]
   25fb4:	bhi	260f0 <__assert_fail@plt+0x14228>
   25fb8:	ldr	r0, [sp, #24]
   25fbc:	bl	11e74 <towupper@plt>
   25fc0:	mov	r6, r0
   25fc4:	ldr	r0, [sp, #24]
   25fc8:	cmp	r6, r0
   25fcc:	bne	25fdc <__assert_fail@plt+0x14114>
   25fd0:	ldr	r4, [sp, #20]
   25fd4:	mov	r1, r7
   25fd8:	b	25ffc <__assert_fail@plt+0x14134>
   25fdc:	add	r0, sp, #32
   25fe0:	sub	r2, fp, #40	; 0x28
   25fe4:	mov	r1, r6
   25fe8:	bl	11a0c <wcrtomb@plt>
   25fec:	cmp	r0, r5
   25ff0:	bne	26170 <__assert_fail@plt+0x142a8>
   25ff4:	ldr	r4, [sp, #20]
   25ff8:	add	r1, sp, #32
   25ffc:	ldr	r0, [r4, #4]
   26000:	add	r0, r0, r8
   26004:	mov	r2, r5
   26008:	bl	11ab4 <memcpy@plt>
   2600c:	ldrb	r0, [r4, #76]	; 0x4c
   26010:	mov	r7, r9
   26014:	mov	r9, sl
   26018:	mov	r3, r4
   2601c:	cmp	r0, #0
   26020:	bne	26224 <__assert_fail@plt+0x1435c>
   26024:	ldr	r0, [r3, #8]
   26028:	add	r4, r5, r8
   2602c:	add	r7, r5, r7
   26030:	str	r6, [r0, r8, lsl #2]
   26034:	add	r6, r8, #1
   26038:	cmp	r6, r4
   2603c:	bge	26094 <__assert_fail@plt+0x141cc>
   26040:	mvn	r1, #3
   26044:	add	r0, r0, r6, lsl #2
   26048:	add	r2, r1, r5, lsl #2
   2604c:	mov	r1, #255	; 0xff
   26050:	bl	11d0c <memset@plt>
   26054:	ldr	r1, [sp, #16]
   26058:	sub	r0, r5, #2
   2605c:	ands	r1, r1, #7
   26060:	beq	26070 <__assert_fail@plt+0x141a8>
   26064:	subs	r1, r1, #1
   26068:	add	r6, r6, #1
   2606c:	bne	26064 <__assert_fail@plt+0x1419c>
   26070:	ldr	r3, [sp, #20]
   26074:	cmp	r0, #7
   26078:	bcc	2608c <__assert_fail@plt+0x141c4>
   2607c:	add	r0, r5, r8
   26080:	sub	r0, r0, r6
   26084:	subs	r0, r0, #8
   26088:	bne	26084 <__assert_fail@plt+0x141bc>
   2608c:	mov	r8, r4
   26090:	b	25f50 <__assert_fail@plt+0x14088>
   26094:	mov	r8, r6
   26098:	b	25f50 <__assert_fail@plt+0x14088>
   2609c:	cmp	r2, #1
   260a0:	mov	r9, r7
   260a4:	add	r7, sp, #32
   260a8:	ldrge	r1, [r3, #80]	; 0x50
   260ac:	cmpge	r1, #1
   260b0:	blt	25f94 <__assert_fail@plt+0x140cc>
   260b4:	ldr	r7, [r3, #24]
   260b8:	ldr	r6, [r3]
   260bc:	add	r7, r9, r7
   260c0:	add	r3, r6, r7
   260c4:	mov	r6, #0
   260c8:	add	r7, sp, #32
   260cc:	ldrb	r5, [r3, r6]
   260d0:	ldrb	r5, [r0, r5]
   260d4:	strb	r5, [r7, r6]
   260d8:	add	r6, r6, #1
   260dc:	cmp	r6, r2
   260e0:	bge	25f94 <__assert_fail@plt+0x140cc>
   260e4:	cmp	r6, r1
   260e8:	blt	260cc <__assert_fail@plt+0x14204>
   260ec:	b	25f94 <__assert_fail@plt+0x140cc>
   260f0:	ldr	r3, [sp, #20]
   260f4:	add	r0, r5, #1
   260f8:	cmp	r0, #2
   260fc:	bcc	26110 <__assert_fail@plt+0x14248>
   26100:	ldr	r0, [r3, #36]	; 0x24
   26104:	ldr	r1, [r3, #48]	; 0x30
   26108:	cmp	r0, r1
   2610c:	blt	26310 <__assert_fail@plt+0x14448>
   26110:	ldr	r2, [r3, #24]
   26114:	ldr	r0, [r3]
   26118:	ldr	r1, [r3, #64]	; 0x40
   2611c:	mov	r7, r9
   26120:	add	r2, r2, r9
   26124:	cmp	r1, #0
   26128:	ldrb	r0, [r0, r2]
   2612c:	bne	265a4 <__assert_fail@plt+0x146dc>
   26130:	ldr	r1, [r3, #4]
   26134:	mov	r9, sl
   26138:	strb	r0, [r1, r8]
   2613c:	ldrb	r1, [r3, #76]	; 0x4c
   26140:	cmp	r1, #0
   26144:	bne	265ac <__assert_fail@plt+0x146e4>
   26148:	ldr	r1, [r3, #8]
   2614c:	add	r7, r7, #1
   26150:	cmn	r5, #1
   26154:	str	r0, [r1, r8, lsl #2]
   26158:	add	r8, r8, #1
   2615c:	bne	25f50 <__assert_fail@plt+0x14088>
   26160:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26164:	ldr	r1, [fp, #-36]	; 0xffffffdc
   26168:	stm	r4, {r0, r1}
   2616c:	b	25f50 <__assert_fail@plt+0x14088>
   26170:	ldr	r3, [sp, #20]
   26174:	mov	r2, r0
   26178:	cmn	r0, #1
   2617c:	beq	262a0 <__assert_fail@plt+0x143d8>
   26180:	ldr	r1, [r3, #36]	; 0x24
   26184:	add	r0, r2, r8
   26188:	cmp	r0, r1
   2618c:	bhi	26310 <__assert_fail@plt+0x14448>
   26190:	str	r0, [sp, #12]
   26194:	ldr	r0, [r3, #12]
   26198:	mov	r7, r9
   2619c:	cmp	r0, #0
   261a0:	bne	261c4 <__assert_fail@plt+0x142fc>
   261a4:	lsl	r0, r1, #2
   261a8:	mov	r4, r2
   261ac:	bl	38450 <__assert_fail@plt+0x26588>
   261b0:	ldr	r3, [sp, #20]
   261b4:	mov	r2, r4
   261b8:	cmp	r0, #0
   261bc:	str	r0, [r3, #12]
   261c0:	beq	26598 <__assert_fail@plt+0x146d0>
   261c4:	ldrb	r1, [r3, #76]	; 0x4c
   261c8:	ldr	r9, [sp, #16]
   261cc:	cmp	r1, #0
   261d0:	bne	263f0 <__assert_fail@plt+0x14528>
   261d4:	cmp	r8, #0
   261d8:	beq	263e8 <__assert_fail@plt+0x14520>
   261dc:	mov	r1, #0
   261e0:	cmp	r8, #4
   261e4:	bcc	263d8 <__assert_fail@plt+0x14510>
   261e8:	bic	r1, r8, #3
   261ec:	stmib	sp, {r2, r7}
   261f0:	mov	r2, #1
   261f4:	add	r3, pc, #964	; 0x3c4
   261f8:	sub	r7, r1, #4
   261fc:	add	r2, r2, r7, lsr #2
   26200:	cmp	r7, #12
   26204:	and	r4, r2, #3
   26208:	bcs	26334 <__assert_fail@plt+0x1446c>
   2620c:	vld1.64	{d16-d17}, [r3 :128]
   26210:	mov	sl, r4
   26214:	mov	r3, #0
   26218:	cmp	sl, #0
   2621c:	bne	263a8 <__assert_fail@plt+0x144e0>
   26220:	b	263c8 <__assert_fail@plt+0x14500>
   26224:	ldr	lr, [r3, #12]
   26228:	mov	r1, #0
   2622c:	cmp	r5, #4
   26230:	bcc	262ec <__assert_fail@plt+0x14424>
   26234:	vdup.32	q8, r7
   26238:	bic	r1, r5, #3
   2623c:	mov	r3, #1
   26240:	mov	r9, r7
   26244:	subs	r2, r1, #4
   26248:	add	r2, r3, r2, lsr #2
   2624c:	add	r3, pc, #876	; 0x36c
   26250:	and	ip, r2, #1
   26254:	beq	262b8 <__assert_fail@plt+0x143f0>
   26258:	sub	r4, r2, ip
   2625c:	add	r2, pc, #860	; 0x35c
   26260:	vmov.i32	q10, #4	; 0x00000004
   26264:	vmov.i32	q11, #8	; 0x00000008
   26268:	add	r7, lr, r8, lsl #2
   2626c:	mov	r3, #0
   26270:	vld1.64	{d18-d19}, [r2 :128]
   26274:	mov	r2, #32
   26278:	vadd.i32	q12, q9, q8
   2627c:	vadd.i32	q9, q9, q11
   26280:	add	r0, r7, #16
   26284:	subs	r4, r4, #2
   26288:	add	r3, r3, #8
   2628c:	vadd.i32	q13, q12, q10
   26290:	vst1.32	{d24-d25}, [r7], r2
   26294:	vst1.32	{d26-d27}, [r0]
   26298:	bne	26278 <__assert_fail@plt+0x143b0>
   2629c:	b	262c0 <__assert_fail@plt+0x143f8>
   262a0:	ldr	r0, [r3, #4]
   262a4:	mov	r1, r7
   262a8:	mov	r2, r5
   262ac:	mov	r4, r3
   262b0:	add	r0, r0, r8
   262b4:	b	26008 <__assert_fail@plt+0x14140>
   262b8:	vld1.64	{d18-d19}, [r3 :128]
   262bc:	mov	r3, #0
   262c0:	cmp	ip, #0
   262c4:	beq	262d8 <__assert_fail@plt+0x14410>
   262c8:	add	r0, r3, r8
   262cc:	vadd.i32	q8, q9, q8
   262d0:	add	r0, lr, r0, lsl #2
   262d4:	vst1.32	{d16-d17}, [r0]
   262d8:	ldr	r3, [sp, #20]
   262dc:	mov	r7, r9
   262e0:	cmp	r5, r1
   262e4:	mov	r9, sl
   262e8:	beq	26024 <__assert_fail@plt+0x1415c>
   262ec:	add	r0, r8, r1
   262f0:	add	r2, r7, r1
   262f4:	sub	r4, r5, r1
   262f8:	add	r0, lr, r0, lsl #2
   262fc:	str	r2, [r0], #4
   26300:	add	r2, r2, #1
   26304:	subs	r4, r4, #1
   26308:	bne	262fc <__assert_fail@plt+0x14434>
   2630c:	b	26024 <__assert_fail@plt+0x1415c>
   26310:	ldr	r0, [fp, #-40]	; 0xffffffd8
   26314:	mov	r7, r9
   26318:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2631c:	stm	r4, {r0, r1}
   26320:	str	r8, [r3, #28]
   26324:	str	r7, [r3, #32]
   26328:	mov	r0, #0
   2632c:	sub	sp, fp, #28
   26330:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26334:	mov	sl, r4
   26338:	sub	r4, r2, r4
   2633c:	add	r2, pc, #636	; 0x27c
   26340:	vmov.i32	q9, #12	; 0x0000000c
   26344:	vmov.i32	q10, #8	; 0x00000008
   26348:	vmov.i32	q11, #4	; 0x00000004
   2634c:	vmov.i32	q12, #16	; 0x00000010
   26350:	mov	r3, #0
   26354:	mov	lr, #64	; 0x40
   26358:	mov	r7, r0
   2635c:	vld1.64	{d16-d17}, [r2 :128]
   26360:	mov	r2, r0
   26364:	vadd.i32	q13, q8, q9
   26368:	add	ip, r2, #48	; 0x30
   2636c:	vadd.i32	q14, q8, q10
   26370:	vadd.i32	q15, q8, q11
   26374:	subs	r4, r4, #4
   26378:	add	r3, r3, #16
   2637c:	vst1.32	{d26-d27}, [ip]
   26380:	vst1.32	{d16-d17}, [r7], lr
   26384:	vadd.i32	q8, q8, q12
   26388:	add	ip, r2, #32
   2638c:	add	r2, r2, #16
   26390:	vst1.32	{d28-d29}, [ip]
   26394:	vst1.32	{d30-d31}, [r2]
   26398:	mov	r2, r7
   2639c:	bne	26364 <__assert_fail@plt+0x1449c>
   263a0:	cmp	sl, #0
   263a4:	beq	263c8 <__assert_fail@plt+0x14500>
   263a8:	vmov.i32	q9, #4	; 0x00000004
   263ac:	add	r2, r0, r3, lsl #2
   263b0:	rsb	r3, sl, #0
   263b4:	vadd.i32	q10, q8, q9
   263b8:	vst1.32	{d16-d17}, [r2]!
   263bc:	adds	r3, r3, #1
   263c0:	vorr	q8, q10, q10
   263c4:	bcc	263b4 <__assert_fail@plt+0x144ec>
   263c8:	ldr	r3, [sp, #20]
   263cc:	ldmib	sp, {r2, r7}
   263d0:	cmp	r8, r1
   263d4:	beq	263e8 <__assert_fail@plt+0x14520>
   263d8:	str	r1, [r0, r1, lsl #2]
   263dc:	add	r1, r1, #1
   263e0:	cmp	r8, r1
   263e4:	bne	263d8 <__assert_fail@plt+0x14510>
   263e8:	mov	r0, #1
   263ec:	strb	r0, [r3, #76]	; 0x4c
   263f0:	ldr	r0, [r3, #4]
   263f4:	add	r1, sp, #32
   263f8:	mov	r4, r3
   263fc:	mov	sl, r2
   26400:	add	r0, r0, r8
   26404:	bl	11ab4 <memcpy@plt>
   26408:	ldr	r0, [r4, #8]
   2640c:	cmp	sl, #2
   26410:	str	r6, [r0, r8, lsl #2]
   26414:	mov	r6, r7
   26418:	ldr	r1, [r4, #12]
   2641c:	str	r7, [r1, r8, lsl #2]
   26420:	bcc	26550 <__assert_fail@plt+0x14688>
   26424:	sub	lr, sl, #1
   26428:	mov	ip, r6
   2642c:	mov	r2, #1
   26430:	cmp	lr, #4
   26434:	bcc	264b8 <__assert_fail@plt+0x145f0>
   26438:	add	r7, sl, r8
   2643c:	add	r4, r8, #1
   26440:	str	ip, [sp, #8]
   26444:	add	r6, r0, r4, lsl #2
   26448:	add	r3, r0, r7, lsl #2
   2644c:	add	r4, r1, r4, lsl #2
   26450:	cmp	r4, r3
   26454:	addcc	r3, r1, r7, lsl #2
   26458:	cmpcc	r6, r3
   2645c:	bcc	264b8 <__assert_fail@plt+0x145f0>
   26460:	add	r2, pc, #360	; 0x168
   26464:	ldr	r3, [sp, #8]
   26468:	vdup.32	q9, r9
   2646c:	vdup.32	q10, r5
   26470:	vmov.i32	q12, #4	; 0x00000004
   26474:	vmov.i8	q13, #255	; 0xff
   26478:	vld1.64	{d22-d23}, [r2 :128]
   2647c:	vdup.32	q8, r3
   26480:	bic	r3, lr, #3
   26484:	orr	r2, r3, #1
   26488:	mov	r7, r3
   2648c:	vcgt.u32	q14, q10, q11
   26490:	subs	r7, r7, #4
   26494:	vbsl	q14, q11, q9
   26498:	vadd.i32	q11, q11, q12
   2649c:	vadd.i32	q14, q14, q8
   264a0:	vst1.32	{d28-d29}, [r4]!
   264a4:	vst1.32	{d26-d27}, [r6]!
   264a8:	bne	2648c <__assert_fail@plt+0x145c4>
   264ac:	cmp	lr, r3
   264b0:	mov	r6, ip
   264b4:	beq	26550 <__assert_fail@plt+0x14688>
   264b8:	tst	sl, #1
   264bc:	mov	r3, r2
   264c0:	bne	264e8 <__assert_fail@plt+0x14620>
   264c4:	cmp	r2, r5
   264c8:	mov	r3, r9
   264cc:	add	r7, r2, r8
   264d0:	movcc	r3, r2
   264d4:	add	r3, r3, ip
   264d8:	str	r3, [r1, r7, lsl #2]
   264dc:	mvn	r3, #0
   264e0:	str	r3, [r0, r7, lsl #2]
   264e4:	add	r3, r2, #1
   264e8:	add	r2, r2, #1
   264ec:	mov	r6, ip
   264f0:	cmp	sl, r2
   264f4:	beq	26550 <__assert_fail@plt+0x14688>
   264f8:	add	r2, r8, r3
   264fc:	add	r2, r2, #1
   26500:	add	r1, r1, r2, lsl #2
   26504:	add	r0, r0, r2, lsl #2
   26508:	mvn	r2, #0
   2650c:	cmp	r3, r5
   26510:	mov	r7, r9
   26514:	movcc	r7, r3
   26518:	add	r7, r7, r6
   2651c:	str	r7, [r1, #-4]
   26520:	add	r7, r3, #1
   26524:	add	r3, r3, #2
   26528:	str	r2, [r0, #-4]
   2652c:	cmp	r7, r5
   26530:	movcs	r7, r9
   26534:	cmp	r3, sl
   26538:	add	r7, r7, r6
   2653c:	str	r7, [r1]
   26540:	str	r2, [r0]
   26544:	add	r1, r1, #8
   26548:	add	r0, r0, #8
   2654c:	bne	2650c <__assert_fail@plt+0x14644>
   26550:	ldr	r3, [sp, #20]
   26554:	sub	r1, sl, r5
   26558:	mov	r7, r6
   2655c:	ldr	r0, [r3, #48]	; 0x30
   26560:	ldr	r2, [r3, #52]	; 0x34
   26564:	add	r0, r0, r1
   26568:	cmp	r2, r6
   2656c:	str	r0, [r3, #48]	; 0x30
   26570:	ble	26580 <__assert_fail@plt+0x146b8>
   26574:	ldr	r2, [r3, #56]	; 0x38
   26578:	add	r1, r2, r1
   2657c:	str	r1, [r3, #56]	; 0x38
   26580:	ldr	r9, [r3, #36]	; 0x24
   26584:	ldr	r8, [sp, #12]
   26588:	add	r7, r5, r7
   2658c:	cmp	r9, r0
   26590:	movgt	r9, r0
   26594:	b	25f50 <__assert_fail@plt+0x14088>
   26598:	mov	r0, #12
   2659c:	sub	sp, fp, #28
   265a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   265a4:	ldrb	r0, [r1, r0]
   265a8:	b	26130 <__assert_fail@plt+0x14268>
   265ac:	ldr	r1, [r3, #12]
   265b0:	str	r7, [r1, r8, lsl #2]
   265b4:	b	26148 <__assert_fail@plt+0x14280>
   265b8:	nop	{0}
   265bc:	nop	{0}
   265c0:	andeq	r0, r0, r0
   265c4:	andeq	r0, r0, r1
   265c8:	andeq	r0, r0, r2
   265cc:	andeq	r0, r0, r3
   265d0:	andeq	r0, r0, r1
   265d4:	andeq	r0, r0, r2
   265d8:	andeq	r0, r0, r3
   265dc:	andeq	r0, r0, r4
   265e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265e4:	add	fp, sp, #28
   265e8:	sub	sp, sp, #68	; 0x44
   265ec:	mov	r4, r0
   265f0:	ldr	r8, [r0, #28]
   265f4:	ldr	r5, [r0, #36]	; 0x24
   265f8:	ldr	r0, [r0, #48]	; 0x30
   265fc:	cmp	r5, r0
   26600:	movgt	r5, r0
   26604:	cmp	r5, r8
   26608:	ble	267e0 <__assert_fail@plt+0x14918>
   2660c:	add	r9, r4, #16
   26610:	mov	r0, sp
   26614:	ldr	r3, [r4, #64]	; 0x40
   26618:	ldm	r9, {r6, sl}
   2661c:	sub	r2, r5, r8
   26620:	cmp	r3, #0
   26624:	bne	26724 <__assert_fail@plt+0x1485c>
   26628:	ldr	r3, [r4]
   2662c:	ldr	r1, [r4, #24]
   26630:	add	r1, r3, r1
   26634:	add	r1, r1, r8
   26638:	mov	r3, r9
   2663c:	bl	3966c <__assert_fail@plt+0x277a4>
   26640:	mov	r7, r0
   26644:	add	r0, r0, #1
   26648:	cmp	r0, #2
   2664c:	bcc	26668 <__assert_fail@plt+0x147a0>
   26650:	cmn	r7, #2
   26654:	bne	26694 <__assert_fail@plt+0x147cc>
   26658:	ldr	r0, [r4, #36]	; 0x24
   2665c:	ldr	r1, [r4, #48]	; 0x30
   26660:	cmp	r0, r1
   26664:	blt	267dc <__assert_fail@plt+0x14914>
   26668:	ldr	r1, [r4, #24]
   2666c:	ldr	r0, [r4]
   26670:	add	r1, r1, r8
   26674:	ldrb	r0, [r0, r1]
   26678:	str	r0, [sp]
   2667c:	ldr	r1, [r4, #64]	; 0x40
   26680:	cmp	r1, #0
   26684:	bne	267d0 <__assert_fail@plt+0x14908>
   26688:	mov	r7, #1
   2668c:	stm	r9, {r6, sl}
   26690:	b	26698 <__assert_fail@plt+0x147d0>
   26694:	ldr	r0, [sp]
   26698:	ldr	r1, [r4, #8]
   2669c:	add	sl, r7, r8
   266a0:	add	r6, r8, #1
   266a4:	cmp	r6, sl
   266a8:	str	r0, [r1, r8, lsl #2]
   266ac:	bge	26710 <__assert_fail@plt+0x14848>
   266b0:	mvn	r0, #3
   266b4:	add	r2, r0, r7, lsl #2
   266b8:	add	r0, r1, r8, lsl #2
   266bc:	mov	r1, #255	; 0xff
   266c0:	add	r0, r0, #4
   266c4:	bl	11d0c <memset@plt>
   266c8:	sub	r1, r7, #1
   266cc:	sub	r0, r7, #2
   266d0:	ands	r1, r1, #7
   266d4:	beq	266e4 <__assert_fail@plt+0x1481c>
   266d8:	subs	r1, r1, #1
   266dc:	add	r6, r6, #1
   266e0:	bne	266d8 <__assert_fail@plt+0x14810>
   266e4:	cmp	r0, #7
   266e8:	bcc	266fc <__assert_fail@plt+0x14834>
   266ec:	add	r0, r7, r8
   266f0:	sub	r0, r0, r6
   266f4:	subs	r0, r0, #8
   266f8:	bne	266f4 <__assert_fail@plt+0x1482c>
   266fc:	mov	r8, sl
   26700:	mov	r0, sp
   26704:	cmp	r5, r8
   26708:	bgt	26614 <__assert_fail@plt+0x1474c>
   2670c:	b	267e0 <__assert_fail@plt+0x14918>
   26710:	mov	r8, r6
   26714:	mov	r0, sp
   26718:	cmp	r5, r8
   2671c:	bgt	26614 <__assert_fail@plt+0x1474c>
   26720:	b	267e0 <__assert_fail@plt+0x14918>
   26724:	cmp	r2, #1
   26728:	add	r1, sp, #4
   2672c:	blt	26638 <__assert_fail@plt+0x14770>
   26730:	ldr	r1, [r4, #80]	; 0x50
   26734:	cmp	r1, #1
   26738:	add	r1, sp, #4
   2673c:	blt	26638 <__assert_fail@plt+0x14770>
   26740:	ldr	r7, [r4, #24]
   26744:	ldm	r4, {r1, ip}
   26748:	cmp	r2, #2
   2674c:	add	r7, r8, r7
   26750:	ldrb	r1, [r1, r7]
   26754:	ldrb	r1, [r3, r1]
   26758:	strb	r1, [ip, r8]
   2675c:	strb	r1, [sp, #4]
   26760:	add	r1, sp, #4
   26764:	blt	26638 <__assert_fail@plt+0x14770>
   26768:	ldr	r1, [r4, #80]	; 0x50
   2676c:	cmp	r1, #2
   26770:	add	r1, sp, #4
   26774:	blt	26638 <__assert_fail@plt+0x14770>
   26778:	mov	lr, r0
   2677c:	mov	r0, #1
   26780:	ldr	r7, [r4, #24]
   26784:	ldm	r4, {r1, ip}
   26788:	ldr	r3, [r4, #64]	; 0x40
   2678c:	add	r1, r1, r7
   26790:	add	r1, r1, r8
   26794:	ldrb	r1, [r1, r0]
   26798:	ldrb	r1, [r3, r1]
   2679c:	add	r3, ip, r8
   267a0:	strb	r1, [r3, r0]
   267a4:	add	r3, sp, #4
   267a8:	strb	r1, [r3, r0]
   267ac:	add	r0, r0, #1
   267b0:	cmp	r0, r2
   267b4:	bge	267c4 <__assert_fail@plt+0x148fc>
   267b8:	ldr	r1, [r4, #80]	; 0x50
   267bc:	cmp	r0, r1
   267c0:	blt	26780 <__assert_fail@plt+0x148b8>
   267c4:	add	r1, sp, #4
   267c8:	mov	r0, lr
   267cc:	b	26638 <__assert_fail@plt+0x14770>
   267d0:	ldrb	r0, [r1, r0]
   267d4:	str	r0, [sp]
   267d8:	b	26688 <__assert_fail@plt+0x147c0>
   267dc:	stm	r9, {r6, sl}
   267e0:	str	r8, [r4, #28]
   267e4:	str	r8, [r4, #32]
   267e8:	sub	sp, fp, #28
   267ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   267f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   267f4:	add	fp, sp, #28
   267f8:	sub	sp, sp, #28
   267fc:	ldr	r8, [r1]
   26800:	mov	r7, r0
   26804:	ldr	r6, [fp, #12]
   26808:	mov	r5, r2
   2680c:	str	r1, [sp, #20]
   26810:	str	r3, [sp, #24]
   26814:	ldr	r0, [r8, #84]	; 0x54
   26818:	str	r6, [sp, #4]
   2681c:	str	r0, [sp, #16]
   26820:	ldr	r0, [fp, #8]
   26824:	str	r0, [sp]
   26828:	mov	r0, r7
   2682c:	bl	273cc <__assert_fail@plt+0x15504>
   26830:	mov	r4, r0
   26834:	cmp	r0, #0
   26838:	bne	26848 <__assert_fail@plt+0x14980>
   2683c:	ldr	r0, [r6]
   26840:	cmp	r0, #0
   26844:	bne	26b6c <__assert_fail@plt+0x14ca4>
   26848:	ldrb	r0, [r5, #4]
   2684c:	cmp	r0, #10
   26850:	bne	2699c <__assert_fail@plt+0x14ad4>
   26854:	ldr	r0, [sp, #24]
   26858:	mov	r9, #0
   2685c:	orr	sl, r0, #8388608	; 0x800000
   26860:	ldr	r0, [fp, #8]
   26864:	str	sl, [sp, #12]
   26868:	cmp	r0, #0
   2686c:	beq	269d0 <__assert_fail@plt+0x14b08>
   26870:	mov	r0, r5
   26874:	mov	r1, r7
   26878:	mov	r2, sl
   2687c:	bl	26b78 <__assert_fail@plt+0x14cb0>
   26880:	ldr	r1, [r7, #40]	; 0x28
   26884:	mov	r6, #0
   26888:	add	r0, r1, r0
   2688c:	str	r0, [r7, #40]	; 0x28
   26890:	ldrb	r0, [r5, #4]
   26894:	orr	r1, r0, #8
   26898:	cmp	r1, #10
   2689c:	bne	26900 <__assert_fail@plt+0x14a38>
   268a0:	ldr	r1, [r8, #64]	; 0x40
   268a4:	cmp	r1, #31
   268a8:	beq	26974 <__assert_fail@plt+0x14aac>
   268ac:	ldr	r0, [r8, #56]	; 0x38
   268b0:	add	r0, r0, r1, lsl #5
   268b4:	add	r2, r1, #1
   268b8:	mov	r1, #10
   268bc:	cmp	r4, #0
   268c0:	str	r2, [r8, #64]	; 0x40
   268c4:	str	r9, [r0, #4]!
   268c8:	stmib	r0, {r4, r6, r9}
   268cc:	str	r9, [r0, #16]
   268d0:	str	r9, [r0, #20]
   268d4:	str	r1, [r0, #24]
   268d8:	mvn	r1, #0
   268dc:	str	r1, [r0, #28]
   268e0:	strne	r0, [r4]
   268e4:	cmp	r6, #0
   268e8:	mov	r4, r0
   268ec:	strne	r0, [r6]
   268f0:	ldrb	r1, [r5, #4]
   268f4:	cmp	r1, #10
   268f8:	beq	26870 <__assert_fail@plt+0x149a8>
   268fc:	b	26ab4 <__assert_fail@plt+0x14bec>
   26900:	cmp	r0, #9
   26904:	mov	r6, #0
   26908:	beq	268a0 <__assert_fail@plt+0x149d8>
   2690c:	ldr	r0, [sp, #16]
   26910:	ldr	sl, [r8, #84]	; 0x54
   26914:	ldr	r1, [sp, #20]
   26918:	ldr	r3, [sp, #24]
   2691c:	mov	r2, r5
   26920:	str	r0, [r8, #84]	; 0x54
   26924:	ldr	r0, [fp, #8]
   26928:	str	r0, [sp]
   2692c:	ldr	r0, [fp, #12]
   26930:	str	r0, [sp, #4]
   26934:	mov	r0, r7
   26938:	bl	273cc <__assert_fail@plt+0x15504>
   2693c:	mov	r6, r0
   26940:	cmp	r0, #0
   26944:	bne	26958 <__assert_fail@plt+0x14a90>
   26948:	ldr	r0, [fp, #12]
   2694c:	ldr	r0, [r0]
   26950:	cmp	r0, #0
   26954:	bne	26abc <__assert_fail@plt+0x14bf4>
   26958:	ldr	r0, [r8, #84]	; 0x54
   2695c:	orr	r0, r0, sl
   26960:	ldr	sl, [sp, #12]
   26964:	str	r0, [r8, #84]	; 0x54
   26968:	ldr	r1, [r8, #64]	; 0x40
   2696c:	cmp	r1, #31
   26970:	bne	268ac <__assert_fail@plt+0x149e4>
   26974:	mov	r0, #996	; 0x3e4
   26978:	bl	38450 <__assert_fail@plt+0x26588>
   2697c:	cmp	r0, #0
   26980:	beq	26b60 <__assert_fail@plt+0x14c98>
   26984:	ldr	r1, [r8, #56]	; 0x38
   26988:	str	r1, [r0]
   2698c:	mov	r1, #0
   26990:	str	r1, [r8, #64]	; 0x40
   26994:	str	r0, [r8, #56]	; 0x38
   26998:	b	268b0 <__assert_fail@plt+0x149e8>
   2699c:	mov	r0, r4
   269a0:	sub	sp, fp, #28
   269a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269a8:	mov	r0, #996	; 0x3e4
   269ac:	bl	38450 <__assert_fail@plt+0x26588>
   269b0:	cmp	r0, #0
   269b4:	beq	26b60 <__assert_fail@plt+0x14c98>
   269b8:	ldr	r1, [r8, #56]	; 0x38
   269bc:	str	r1, [r0]
   269c0:	mov	r1, #0
   269c4:	str	r1, [r8, #64]	; 0x40
   269c8:	str	r0, [r8, #56]	; 0x38
   269cc:	b	26a68 <__assert_fail@plt+0x14ba0>
   269d0:	mov	r0, r5
   269d4:	mov	r1, r7
   269d8:	mov	r2, sl
   269dc:	bl	26b78 <__assert_fail@plt+0x14cb0>
   269e0:	ldr	r1, [r7, #40]	; 0x28
   269e4:	mov	r6, #0
   269e8:	add	r0, r1, r0
   269ec:	str	r0, [r7, #40]	; 0x28
   269f0:	ldrb	r0, [r5, #4]
   269f4:	orr	r0, r0, #8
   269f8:	cmp	r0, #10
   269fc:	beq	26a58 <__assert_fail@plt+0x14b90>
   26a00:	ldr	r0, [sp, #16]
   26a04:	ldr	sl, [r8, #84]	; 0x54
   26a08:	ldr	r1, [sp, #20]
   26a0c:	ldr	r3, [sp, #24]
   26a10:	mov	r2, r5
   26a14:	str	r0, [r8, #84]	; 0x54
   26a18:	ldr	r0, [fp, #12]
   26a1c:	str	r9, [sp]
   26a20:	str	r0, [sp, #4]
   26a24:	mov	r0, r7
   26a28:	bl	273cc <__assert_fail@plt+0x15504>
   26a2c:	mov	r6, r0
   26a30:	cmp	r0, #0
   26a34:	bne	26a48 <__assert_fail@plt+0x14b80>
   26a38:	ldr	r0, [fp, #12]
   26a3c:	ldr	r0, [r0]
   26a40:	cmp	r0, #0
   26a44:	bne	26abc <__assert_fail@plt+0x14bf4>
   26a48:	ldr	r0, [r8, #84]	; 0x54
   26a4c:	orr	r0, r0, sl
   26a50:	ldr	sl, [sp, #12]
   26a54:	str	r0, [r8, #84]	; 0x54
   26a58:	ldr	r1, [r8, #64]	; 0x40
   26a5c:	cmp	r1, #31
   26a60:	beq	269a8 <__assert_fail@plt+0x14ae0>
   26a64:	ldr	r0, [r8, #56]	; 0x38
   26a68:	add	r0, r0, r1, lsl #5
   26a6c:	add	r2, r1, #1
   26a70:	mov	r1, #10
   26a74:	cmp	r4, #0
   26a78:	str	r2, [r8, #64]	; 0x40
   26a7c:	str	r9, [r0, #4]!
   26a80:	stmib	r0, {r4, r6, r9}
   26a84:	str	r9, [r0, #16]
   26a88:	str	r9, [r0, #20]
   26a8c:	str	r1, [r0, #24]
   26a90:	mvn	r1, #0
   26a94:	str	r1, [r0, #28]
   26a98:	strne	r0, [r4]
   26a9c:	cmp	r6, #0
   26aa0:	mov	r4, r0
   26aa4:	strne	r0, [r6]
   26aa8:	ldrb	r1, [r5, #4]
   26aac:	cmp	r1, #10
   26ab0:	beq	269d0 <__assert_fail@plt+0x14b08>
   26ab4:	sub	sp, fp, #28
   26ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26abc:	cmp	r4, #0
   26ac0:	beq	26b6c <__assert_fail@plt+0x14ca4>
   26ac4:	movw	r5, #255	; 0xff
   26ac8:	movt	r5, #4
   26acc:	mov	r6, r4
   26ad0:	ldr	r4, [r4, #4]
   26ad4:	cmp	r4, #0
   26ad8:	bne	26acc <__assert_fail@plt+0x14c04>
   26adc:	ldr	r4, [r6, #8]
   26ae0:	cmp	r4, #0
   26ae4:	bne	26acc <__assert_fail@plt+0x14c04>
   26ae8:	ldr	r0, [r6, #24]
   26aec:	and	r0, r0, r5
   26af0:	cmp	r0, #3
   26af4:	beq	26b28 <__assert_fail@plt+0x14c60>
   26af8:	cmp	r0, #6
   26afc:	bne	26b34 <__assert_fail@plt+0x14c6c>
   26b00:	ldr	r4, [r6, #20]
   26b04:	ldr	r0, [r4]
   26b08:	bl	17c10 <__assert_fail@plt+0x5d48>
   26b0c:	ldr	r0, [r4, #4]
   26b10:	bl	17c10 <__assert_fail@plt+0x5d48>
   26b14:	ldr	r0, [r4, #8]
   26b18:	bl	17c10 <__assert_fail@plt+0x5d48>
   26b1c:	ldr	r0, [r4, #12]
   26b20:	bl	17c10 <__assert_fail@plt+0x5d48>
   26b24:	b	26b2c <__assert_fail@plt+0x14c64>
   26b28:	ldr	r4, [r6, #20]
   26b2c:	mov	r0, r4
   26b30:	bl	17c10 <__assert_fail@plt+0x5d48>
   26b34:	ldr	r0, [r6]
   26b38:	cmp	r0, #0
   26b3c:	beq	26b6c <__assert_fail@plt+0x14ca4>
   26b40:	ldr	r4, [r0, #8]
   26b44:	cmp	r4, r6
   26b48:	mov	r6, r0
   26b4c:	beq	26ae8 <__assert_fail@plt+0x14c20>
   26b50:	cmp	r4, #0
   26b54:	mov	r6, r0
   26b58:	beq	26ae8 <__assert_fail@plt+0x14c20>
   26b5c:	b	26acc <__assert_fail@plt+0x14c04>
   26b60:	ldr	r1, [fp, #12]
   26b64:	mov	r0, #12
   26b68:	str	r0, [r1]
   26b6c:	mov	r0, #0
   26b70:	sub	sp, fp, #28
   26b74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26b78:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   26b7c:	add	fp, sp, #24
   26b80:	sub	sp, sp, #8
   26b84:	mov	r9, r0
   26b88:	mov	r7, r1
   26b8c:	ldr	r0, [r1, #40]	; 0x28
   26b90:	ldr	r1, [r1, #56]	; 0x38
   26b94:	cmp	r1, r0
   26b98:	ble	26c80 <__assert_fail@plt+0x14db8>
   26b9c:	ldr	r1, [r7, #4]
   26ba0:	mov	r5, r9
   26ba4:	mov	r8, r2
   26ba8:	ldrb	r6, [r1, r0]
   26bac:	strb	r6, [r5], #4
   26bb0:	ldr	r0, [r5]
   26bb4:	bic	r1, r0, #6291456	; 0x600000
   26bb8:	str	r1, [r5]
   26bbc:	ldr	r3, [r7, #80]	; 0x50
   26bc0:	cmp	r3, #2
   26bc4:	blt	26be8 <__assert_fail@plt+0x14d20>
   26bc8:	ldr	r2, [r7, #28]
   26bcc:	ldr	r1, [r7, #40]	; 0x28
   26bd0:	cmp	r1, r2
   26bd4:	beq	26be8 <__assert_fail@plt+0x14d20>
   26bd8:	ldr	r2, [r7, #8]
   26bdc:	ldr	r1, [r2, r1, lsl #2]
   26be0:	cmn	r1, #1
   26be4:	beq	270c4 <__assert_fail@plt+0x151fc>
   26be8:	movw	r1, #65280	; 0xff00
   26bec:	cmp	r6, #92	; 0x5c
   26bf0:	movt	r1, #65439	; 0xff9f
   26bf4:	bne	26c98 <__assert_fail@plt+0x14dd0>
   26bf8:	ldr	r6, [r7, #40]	; 0x28
   26bfc:	ldr	r4, [r7, #48]	; 0x30
   26c00:	add	r2, r6, #1
   26c04:	cmp	r2, r4
   26c08:	bge	26cec <__assert_fail@plt+0x14e24>
   26c0c:	ldrb	r4, [r7, #75]	; 0x4b
   26c10:	cmp	r4, #0
   26c14:	bne	27358 <__assert_fail@plt+0x15490>
   26c18:	ldr	r3, [r7, #4]
   26c1c:	ldrb	r6, [r3, r2]
   26c20:	and	r0, r0, r1
   26c24:	strb	r6, [r9]
   26c28:	orr	r4, r0, #1
   26c2c:	str	r4, [r9, #4]
   26c30:	ldr	r0, [r7, #80]	; 0x50
   26c34:	cmp	r0, #2
   26c38:	blt	26f10 <__assert_fail@plt+0x15048>
   26c3c:	ldr	r0, [r7, #8]
   26c40:	ldr	r1, [r7, #40]	; 0x28
   26c44:	add	r0, r0, r1, lsl #2
   26c48:	ldr	r4, [r0, #4]
   26c4c:	mov	r0, r4
   26c50:	bl	11ce8 <iswalnum@plt>
   26c54:	sub	r1, r4, #95	; 0x5f
   26c58:	cmp	r0, #0
   26c5c:	clz	r1, r1
   26c60:	movwne	r0, #1
   26c64:	lsr	r1, r1, #5
   26c68:	orr	r0, r1, r0
   26c6c:	ldr	r1, [r5]
   26c70:	bic	r1, r1, #4194304	; 0x400000
   26c74:	orr	r0, r1, r0, lsl #22
   26c78:	uxtb	r1, r6
   26c7c:	b	26f34 <__assert_fail@plt+0x1506c>
   26c80:	mov	r0, #2
   26c84:	mov	r4, #0
   26c88:	strb	r0, [r9, #4]
   26c8c:	mov	r0, r4
   26c90:	sub	sp, fp, #24
   26c94:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   26c98:	and	r0, r0, r1
   26c9c:	orr	r4, r0, #1
   26ca0:	str	r4, [r5]
   26ca4:	ldr	r0, [r7, #80]	; 0x50
   26ca8:	cmp	r0, #2
   26cac:	blt	26cf8 <__assert_fail@plt+0x14e30>
   26cb0:	ldr	r0, [r7, #8]
   26cb4:	ldr	r1, [r7, #40]	; 0x28
   26cb8:	ldr	r4, [r0, r1, lsl #2]
   26cbc:	mov	r0, r4
   26cc0:	bl	11ce8 <iswalnum@plt>
   26cc4:	sub	r1, r4, #95	; 0x5f
   26cc8:	cmp	r0, #0
   26ccc:	clz	r1, r1
   26cd0:	movwne	r0, #1
   26cd4:	lsr	r1, r1, #5
   26cd8:	orr	r0, r1, r0
   26cdc:	ldr	r1, [r5]
   26ce0:	bic	r1, r1, #4194304	; 0x400000
   26ce4:	orr	r0, r1, r0, lsl #22
   26ce8:	b	26d18 <__assert_fail@plt+0x14e50>
   26cec:	and	r0, r0, r1
   26cf0:	orr	r0, r0, #36	; 0x24
   26cf4:	b	270d8 <__assert_fail@plt+0x15210>
   26cf8:	bl	11c7c <__ctype_b_loc@plt>
   26cfc:	ldr	r0, [r0]
   26d00:	cmp	r6, #95	; 0x5f
   26d04:	add	r0, r0, r6, lsl #1
   26d08:	ldrh	r0, [r0]
   26d0c:	ubfx	r0, r0, #3, #1
   26d10:	movweq	r0, #1
   26d14:	orr	r0, r4, r0, lsl #22
   26d18:	sub	r1, r6, #10
   26d1c:	mov	r4, #1
   26d20:	str	r0, [r5]
   26d24:	cmp	r1, #115	; 0x73
   26d28:	bhi	2734c <__assert_fail@plt+0x15484>
   26d2c:	add	r2, pc, #0
   26d30:	ldr	pc, [r2, r1, lsl #2]
   26d34:	andeq	r6, r2, r4, lsl #30
   26d38:	andeq	r7, r2, ip, asr #6
   26d3c:	andeq	r7, r2, ip, asr #6
   26d40:	andeq	r7, r2, ip, asr #6
   26d44:	andeq	r7, r2, ip, asr #6
   26d48:	andeq	r7, r2, ip, asr #6
   26d4c:	andeq	r7, r2, ip, asr #6
   26d50:	andeq	r7, r2, ip, asr #6
   26d54:	andeq	r7, r2, ip, asr #6
   26d58:	andeq	r7, r2, ip, asr #6
   26d5c:	andeq	r7, r2, ip, asr #6
   26d60:	andeq	r7, r2, ip, asr #6
   26d64:	andeq	r7, r2, ip, asr #6
   26d68:	andeq	r7, r2, ip, asr #6
   26d6c:	andeq	r7, r2, ip, asr #6
   26d70:	andeq	r7, r2, ip, asr #6
   26d74:	andeq	r7, r2, ip, asr #6
   26d78:	andeq	r7, r2, ip, asr #6
   26d7c:	andeq	r7, r2, ip, asr #6
   26d80:	andeq	r7, r2, ip, asr #6
   26d84:	andeq	r7, r2, ip, asr #6
   26d88:	andeq	r7, r2, ip, asr #6
   26d8c:	andeq	r7, r2, ip, asr #6
   26d90:	andeq	r7, r2, ip, asr #6
   26d94:	andeq	r7, r2, ip, asr #6
   26d98:	andeq	r7, r2, ip, asr #6
   26d9c:	andeq	r7, r2, ip, ror #1
   26da0:	andeq	r7, r2, ip, asr #6
   26da4:	andeq	r7, r2, ip, asr #6
   26da8:	andeq	r7, r2, ip, asr #6
   26dac:	andeq	r7, r2, r4, asr #2
   26db0:	andeq	r7, r2, r0, asr r1
   26db4:	andeq	r7, r2, ip, asr r1
   26db8:	andeq	r7, r2, r4, ror #2
   26dbc:	andeq	r7, r2, ip, asr #6
   26dc0:	andeq	r7, r2, ip, asr #6
   26dc4:	andeq	r7, r2, r4, ror r1
   26dc8:	andeq	r7, r2, ip, asr #6
   26dcc:	andeq	r7, r2, ip, asr #6
   26dd0:	andeq	r7, r2, ip, asr #6
   26dd4:	andeq	r7, r2, ip, asr #6
   26dd8:	andeq	r7, r2, ip, asr #6
   26ddc:	andeq	r7, r2, ip, asr #6
   26de0:	andeq	r7, r2, ip, asr #6
   26de4:	andeq	r7, r2, ip, asr #6
   26de8:	andeq	r7, r2, ip, asr #6
   26dec:	andeq	r7, r2, ip, asr #6
   26df0:	andeq	r7, r2, ip, asr #6
   26df4:	andeq	r7, r2, ip, asr #6
   26df8:	andeq	r7, r2, ip, asr #6
   26dfc:	andeq	r7, r2, ip, asr #6
   26e00:	andeq	r7, r2, ip, asr #6
   26e04:	andeq	r7, r2, ip, asr #6
   26e08:	andeq	r7, r2, ip, ror r1
   26e0c:	andeq	r7, r2, ip, asr #6
   26e10:	andeq	r7, r2, ip, asr #6
   26e14:	andeq	r7, r2, ip, asr #6
   26e18:	andeq	r7, r2, ip, asr #6
   26e1c:	andeq	r7, r2, ip, asr #6
   26e20:	andeq	r7, r2, ip, asr #6
   26e24:	andeq	r7, r2, ip, asr #6
   26e28:	andeq	r7, r2, ip, asr #6
   26e2c:	andeq	r7, r2, ip, asr #6
   26e30:	andeq	r7, r2, ip, asr #6
   26e34:	andeq	r7, r2, ip, asr #6
   26e38:	andeq	r7, r2, ip, asr #6
   26e3c:	andeq	r7, r2, ip, asr #6
   26e40:	andeq	r7, r2, ip, asr #6
   26e44:	andeq	r7, r2, ip, asr #6
   26e48:	andeq	r7, r2, ip, asr #6
   26e4c:	andeq	r7, r2, ip, asr #6
   26e50:	andeq	r7, r2, ip, asr #6
   26e54:	andeq	r7, r2, ip, asr #6
   26e58:	andeq	r7, r2, ip, asr #6
   26e5c:	andeq	r7, r2, ip, asr #6
   26e60:	andeq	r7, r2, ip, asr #6
   26e64:	andeq	r7, r2, ip, asr #6
   26e68:	andeq	r7, r2, ip, asr #6
   26e6c:	andeq	r7, r2, ip, asr #6
   26e70:	andeq	r7, r2, ip, asr #6
   26e74:	andeq	r7, r2, ip, asr #6
   26e78:	andeq	r7, r2, ip, lsl #3
   26e7c:	andeq	r7, r2, ip, asr #6
   26e80:	andeq	r7, r2, ip, asr #6
   26e84:	muleq	r2, r4, r1
   26e88:	andeq	r7, r2, ip, asr #6
   26e8c:	andeq	r7, r2, ip, asr #6
   26e90:	andeq	r7, r2, ip, asr #6
   26e94:	andeq	r7, r2, ip, asr #6
   26e98:	andeq	r7, r2, ip, asr #6
   26e9c:	andeq	r7, r2, ip, asr #6
   26ea0:	andeq	r7, r2, ip, asr #6
   26ea4:	andeq	r7, r2, ip, asr #6
   26ea8:	andeq	r7, r2, ip, asr #6
   26eac:	andeq	r7, r2, ip, asr #6
   26eb0:	andeq	r7, r2, ip, asr #6
   26eb4:	andeq	r7, r2, ip, asr #6
   26eb8:	andeq	r7, r2, ip, asr #6
   26ebc:	andeq	r7, r2, ip, asr #6
   26ec0:	andeq	r7, r2, ip, asr #6
   26ec4:	andeq	r7, r2, ip, asr #6
   26ec8:	andeq	r7, r2, ip, asr #6
   26ecc:	andeq	r7, r2, ip, asr #6
   26ed0:	andeq	r7, r2, ip, asr #6
   26ed4:	andeq	r7, r2, ip, asr #6
   26ed8:	andeq	r7, r2, ip, asr #6
   26edc:	andeq	r7, r2, ip, asr #6
   26ee0:	andeq	r7, r2, ip, asr #6
   26ee4:	andeq	r7, r2, ip, asr #6
   26ee8:	andeq	r7, r2, ip, asr #6
   26eec:	andeq	r7, r2, ip, asr #6
   26ef0:	andeq	r7, r2, ip, asr #6
   26ef4:	andeq	r7, r2, ip, asr #6
   26ef8:	andeq	r7, r2, r4, asr #3
   26efc:	ldrdeq	r7, [r2], -r4
   26f00:	andeq	r7, r2, r8, ror #3
   26f04:	tst	r8, #2048	; 0x800
   26f08:	bne	271e0 <__assert_fail@plt+0x15318>
   26f0c:	b	2734c <__assert_fail@plt+0x15484>
   26f10:	bl	11c7c <__ctype_b_loc@plt>
   26f14:	ldr	r0, [r0]
   26f18:	uxtb	r1, r6
   26f1c:	cmp	r1, #95	; 0x5f
   26f20:	add	r0, r0, r1, lsl #1
   26f24:	ldrh	r0, [r0]
   26f28:	ubfx	r0, r0, #3, #1
   26f2c:	movweq	r0, #1
   26f30:	orr	r0, r4, r0, lsl #22
   26f34:	mvn	r2, #38	; 0x26
   26f38:	mov	r4, #2
   26f3c:	str	r0, [r5]
   26f40:	uxtab	r2, r2, r6
   26f44:	cmp	r2, #86	; 0x56
   26f48:	bhi	2734c <__assert_fail@plt+0x15484>
   26f4c:	add	r3, pc, #0
   26f50:	ldr	pc, [r3, r2, lsl #2]
   26f54:	andeq	r7, r2, r4, lsr #4
   26f58:	andeq	r7, r2, r4, lsr r2
   26f5c:	andeq	r7, r2, r4, asr #4
   26f60:	andeq	r7, r2, ip, asr #6
   26f64:	andeq	r7, r2, r4, asr r2
   26f68:	andeq	r7, r2, ip, asr #6
   26f6c:	andeq	r7, r2, ip, asr #6
   26f70:	andeq	r7, r2, ip, asr #6
   26f74:	andeq	r7, r2, ip, asr #6
   26f78:	andeq	r7, r2, ip, asr #6
   26f7c:	strheq	r7, [r2], -r0
   26f80:	strheq	r7, [r2], -r0
   26f84:	strheq	r7, [r2], -r0
   26f88:	strheq	r7, [r2], -r0
   26f8c:	strheq	r7, [r2], -r0
   26f90:	strheq	r7, [r2], -r0
   26f94:	strheq	r7, [r2], -r0
   26f98:	strheq	r7, [r2], -r0
   26f9c:	strheq	r7, [r2], -r0
   26fa0:	andeq	r7, r2, ip, asr #6
   26fa4:	andeq	r7, r2, ip, asr #6
   26fa8:	andeq	r7, r2, ip, ror #4
   26fac:	andeq	r7, r2, ip, asr #6
   26fb0:	andeq	r7, r2, ip, ror r2
   26fb4:	andeq	r7, r2, ip, lsl #5
   26fb8:	andeq	r7, r2, ip, asr #6
   26fbc:	andeq	r7, r2, ip, asr #6
   26fc0:	andeq	r7, r2, r4, lsr #5
   26fc4:	andeq	r7, r2, ip, asr #6
   26fc8:	andeq	r7, r2, ip, asr #6
   26fcc:	andeq	r7, r2, ip, asr #6
   26fd0:	andeq	r7, r2, ip, asr #6
   26fd4:	andeq	r7, r2, ip, asr #6
   26fd8:	andeq	r7, r2, ip, asr #6
   26fdc:	andeq	r7, r2, ip, asr #6
   26fe0:	andeq	r7, r2, ip, asr #6
   26fe4:	andeq	r7, r2, ip, asr #6
   26fe8:	andeq	r7, r2, ip, asr #6
   26fec:	andeq	r7, r2, ip, asr #6
   26ff0:	andeq	r7, r2, ip, asr #6
   26ff4:	andeq	r7, r2, ip, asr #6
   26ff8:	andeq	r7, r2, ip, asr #6
   26ffc:	andeq	r7, r2, ip, asr #6
   27000:	andeq	r7, r2, ip, asr #6
   27004:			; <UNDEFINED> instruction: 0x000272b4
   27008:	andeq	r7, r2, ip, asr #6
   2700c:	andeq	r7, r2, ip, asr #6
   27010:	andeq	r7, r2, ip, asr #6
   27014:	andeq	r7, r2, r4, asr #5
   27018:	andeq	r7, r2, ip, asr #6
   2701c:	andeq	r7, r2, ip, asr #6
   27020:	andeq	r7, r2, ip, asr #6
   27024:	andeq	r7, r2, ip, asr #6
   27028:	andeq	r7, r2, ip, asr #6
   2702c:	andeq	r7, r2, ip, asr #6
   27030:	andeq	r7, r2, ip, asr #6
   27034:	andeq	r7, r2, ip, asr #6
   27038:	ldrdeq	r7, [r2], -r4
   2703c:	andeq	r7, r2, ip, asr #6
   27040:	andeq	r7, r2, r4, ror #5
   27044:	andeq	r7, r2, ip, asr #6
   27048:	andeq	r7, r2, ip, asr #6
   2704c:	andeq	r7, r2, ip, asr #6
   27050:	andeq	r7, r2, ip, asr #6
   27054:	andeq	r7, r2, ip, asr #6
   27058:	andeq	r7, r2, ip, asr #6
   2705c:	andeq	r7, r2, ip, asr #6
   27060:	andeq	r7, r2, ip, asr #6
   27064:	andeq	r7, r2, ip, asr #6
   27068:	andeq	r7, r2, ip, asr #6
   2706c:	andeq	r7, r2, ip, asr #6
   27070:	andeq	r7, r2, ip, asr #6
   27074:	andeq	r7, r2, ip, asr #6
   27078:	andeq	r7, r2, ip, asr #6
   2707c:	andeq	r7, r2, ip, asr #6
   27080:	andeq	r7, r2, ip, asr #6
   27084:	strdeq	r7, [r2], -r4
   27088:	andeq	r7, r2, ip, asr #6
   2708c:	andeq	r7, r2, ip, asr #6
   27090:	andeq	r7, r2, ip, asr #6
   27094:	andeq	r7, r2, r4, lsl #6
   27098:	andeq	r7, r2, ip, asr #6
   2709c:	andeq	r7, r2, ip, asr #6
   270a0:	andeq	r7, r2, ip, asr #6
   270a4:	andeq	r7, r2, r4, lsl r3
   270a8:	andeq	r7, r2, r8, lsr #6
   270ac:	andeq	r7, r2, r4, lsr r3
   270b0:	tst	r8, #16384	; 0x4000
   270b4:	bne	2734c <__assert_fail@plt+0x15484>
   270b8:	sub	r1, r1, #49	; 0x31
   270bc:	mov	r2, #4
   270c0:	b	271ac <__assert_fail@plt+0x152e4>
   270c4:	movw	r1, #65280	; 0xff00
   270c8:	movt	r1, #65439	; 0xff9f
   270cc:	and	r0, r0, r1
   270d0:	orr	r0, r0, #1
   270d4:	orr	r0, r0, #2097152	; 0x200000
   270d8:	str	r0, [r5]
   270dc:	mov	r4, #1
   270e0:	mov	r0, r4
   270e4:	sub	sp, fp, #24
   270e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   270ec:	tst	r8, #8
   270f0:	bne	2713c <__assert_fail@plt+0x15274>
   270f4:	ldr	r1, [r7, #40]	; 0x28
   270f8:	ldr	r2, [r7, #48]	; 0x30
   270fc:	add	r1, r1, #1
   27100:	cmp	r1, r2
   27104:	beq	2713c <__assert_fail@plt+0x15274>
   27108:	str	r1, [r7, #40]	; 0x28
   2710c:	mov	r0, sp
   27110:	mov	r1, r7
   27114:	mov	r2, r8
   27118:	bl	26b78 <__assert_fail@plt+0x14cb0>
   2711c:	ldr	r0, [r7, #40]	; 0x28
   27120:	sub	r0, r0, #1
   27124:	str	r0, [r7, #40]	; 0x28
   27128:	ldrb	r0, [sp, #4]
   2712c:	sub	r0, r0, #9
   27130:	cmp	r0, #1
   27134:	bhi	2734c <__assert_fail@plt+0x15484>
   27138:	ldr	r0, [r5]
   2713c:	mov	r1, #32
   27140:	b	271a8 <__assert_fail@plt+0x152e0>
   27144:	tst	r8, #8192	; 0x2000
   27148:	bne	2723c <__assert_fail@plt+0x15374>
   2714c:	b	2734c <__assert_fail@plt+0x15484>
   27150:	tst	r8, #8192	; 0x2000
   27154:	bne	2724c <__assert_fail@plt+0x15384>
   27158:	b	2734c <__assert_fail@plt+0x15484>
   2715c:	mov	r1, #11
   27160:	b	27344 <__assert_fail@plt+0x1547c>
   27164:	movw	r1, #1026	; 0x402
   27168:	tst	r8, r1
   2716c:	bne	2734c <__assert_fail@plt+0x15484>
   27170:	b	27264 <__assert_fail@plt+0x1539c>
   27174:	mov	r1, #5
   27178:	b	27344 <__assert_fail@plt+0x1547c>
   2717c:	movw	r1, #1026	; 0x402
   27180:	tst	r8, r1
   27184:	bne	2734c <__assert_fail@plt+0x15484>
   27188:	b	2729c <__assert_fail@plt+0x153d4>
   2718c:	mov	r1, #20
   27190:	b	27344 <__assert_fail@plt+0x1547c>
   27194:	movw	r1, #8
   27198:	movt	r1, #128	; 0x80
   2719c:	tst	r8, r1
   271a0:	beq	271f8 <__assert_fail@plt+0x15330>
   271a4:	mov	r1, #16
   271a8:	mov	r2, #12
   271ac:	bfi	r0, r2, #0, #8
   271b0:	str	r1, [r9]
   271b4:	str	r0, [r9, #4]
   271b8:	mov	r0, r4
   271bc:	sub	sp, fp, #24
   271c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   271c4:	and	r1, r8, #4608	; 0x1200
   271c8:	cmp	r1, #4608	; 0x1200
   271cc:	beq	27320 <__assert_fail@plt+0x15458>
   271d0:	b	2734c <__assert_fail@plt+0x15484>
   271d4:	and	r1, r8, #33792	; 0x8400
   271d8:	cmp	r1, #32768	; 0x8000
   271dc:	bne	2734c <__assert_fail@plt+0x15484>
   271e0:	mov	r1, #10
   271e4:	b	27344 <__assert_fail@plt+0x1547c>
   271e8:	and	r1, r8, #4608	; 0x1200
   271ec:	cmp	r1, #4608	; 0x1200
   271f0:	beq	27340 <__assert_fail@plt+0x15478>
   271f4:	b	2734c <__assert_fail@plt+0x15484>
   271f8:	ldr	r1, [r7, #40]	; 0x28
   271fc:	cmp	r1, #0
   27200:	beq	271a4 <__assert_fail@plt+0x152dc>
   27204:	tst	r8, #2048	; 0x800
   27208:	beq	2734c <__assert_fail@plt+0x15484>
   2720c:	ldr	r2, [r7, #4]
   27210:	add	r1, r1, r2
   27214:	ldrb	r1, [r1, #-1]
   27218:	cmp	r1, #10
   2721c:	beq	271a4 <__assert_fail@plt+0x152dc>
   27220:	b	2734c <__assert_fail@plt+0x15484>
   27224:	tst	r8, #524288	; 0x80000
   27228:	bne	2734c <__assert_fail@plt+0x15484>
   2722c:	mov	r1, #128	; 0x80
   27230:	b	271a8 <__assert_fail@plt+0x152e0>
   27234:	tst	r8, #8192	; 0x2000
   27238:	bne	2734c <__assert_fail@plt+0x15484>
   2723c:	mov	r1, #8
   27240:	b	27344 <__assert_fail@plt+0x1547c>
   27244:	tst	r8, #8192	; 0x2000
   27248:	bne	2734c <__assert_fail@plt+0x15484>
   2724c:	mov	r1, #9
   27250:	b	27344 <__assert_fail@plt+0x1547c>
   27254:	movw	r1, #1026	; 0x402
   27258:	and	r1, r8, r1
   2725c:	cmp	r1, #2
   27260:	bne	2734c <__assert_fail@plt+0x15484>
   27264:	mov	r1, #18
   27268:	b	27344 <__assert_fail@plt+0x1547c>
   2726c:	tst	r8, #524288	; 0x80000
   27270:	bne	2734c <__assert_fail@plt+0x15484>
   27274:	mov	r1, #6
   27278:	b	271a8 <__assert_fail@plt+0x152e0>
   2727c:	tst	r8, #524288	; 0x80000
   27280:	bne	2734c <__assert_fail@plt+0x15484>
   27284:	mov	r1, #9
   27288:	b	271a8 <__assert_fail@plt+0x152e0>
   2728c:	movw	r1, #1026	; 0x402
   27290:	and	r1, r8, r1
   27294:	cmp	r1, #2
   27298:	bne	2734c <__assert_fail@plt+0x15484>
   2729c:	mov	r1, #19
   272a0:	b	27344 <__assert_fail@plt+0x1547c>
   272a4:	tst	r8, #524288	; 0x80000
   272a8:	bne	2734c <__assert_fail@plt+0x15484>
   272ac:	mov	r1, #512	; 0x200
   272b0:	b	271a8 <__assert_fail@plt+0x152e0>
   272b4:	tst	r8, #524288	; 0x80000
   272b8:	bne	2734c <__assert_fail@plt+0x15484>
   272bc:	mov	r1, #35	; 0x23
   272c0:	b	27344 <__assert_fail@plt+0x1547c>
   272c4:	tst	r8, #524288	; 0x80000
   272c8:	bne	2734c <__assert_fail@plt+0x15484>
   272cc:	mov	r1, #33	; 0x21
   272d0:	b	27344 <__assert_fail@plt+0x1547c>
   272d4:	tst	r8, #524288	; 0x80000
   272d8:	bne	2734c <__assert_fail@plt+0x15484>
   272dc:	mov	r1, #64	; 0x40
   272e0:	b	271a8 <__assert_fail@plt+0x152e0>
   272e4:	tst	r8, #524288	; 0x80000
   272e8:	bne	2734c <__assert_fail@plt+0x15484>
   272ec:	mov	r1, #256	; 0x100
   272f0:	b	271a8 <__assert_fail@plt+0x152e0>
   272f4:	tst	r8, #524288	; 0x80000
   272f8:	bne	2734c <__assert_fail@plt+0x15484>
   272fc:	mov	r1, #34	; 0x22
   27300:	b	27344 <__assert_fail@plt+0x1547c>
   27304:	tst	r8, #524288	; 0x80000
   27308:	bne	2734c <__assert_fail@plt+0x15484>
   2730c:	mov	r1, #32
   27310:	b	27344 <__assert_fail@plt+0x1547c>
   27314:	and	r1, r8, #4608	; 0x1200
   27318:	cmp	r1, #512	; 0x200
   2731c:	bne	2734c <__assert_fail@plt+0x15484>
   27320:	mov	r1, #23
   27324:	b	27344 <__assert_fail@plt+0x1547c>
   27328:	tst	r8, #33792	; 0x8400
   2732c:	bne	2734c <__assert_fail@plt+0x15484>
   27330:	b	271e0 <__assert_fail@plt+0x15318>
   27334:	and	r1, r8, #4608	; 0x1200
   27338:	cmp	r1, #512	; 0x200
   2733c:	bne	2734c <__assert_fail@plt+0x15484>
   27340:	mov	r1, #24
   27344:	bfi	r0, r1, #0, #8
   27348:	str	r0, [r5]
   2734c:	mov	r0, r4
   27350:	sub	sp, fp, #24
   27354:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   27358:	cmp	r3, #2
   2735c:	blt	2738c <__assert_fail@plt+0x154c4>
   27360:	ldr	r3, [r7, #8]
   27364:	ldr	r4, [r3, r2, lsl #2]
   27368:	cmn	r4, #1
   2736c:	beq	26c18 <__assert_fail@plt+0x14d50>
   27370:	ldr	r4, [r7, #28]
   27374:	add	r6, r6, #2
   27378:	cmp	r4, r6
   2737c:	beq	2738c <__assert_fail@plt+0x154c4>
   27380:	ldr	r3, [r3, r6, lsl #2]
   27384:	cmn	r3, #1
   27388:	beq	26c18 <__assert_fail@plt+0x14d50>
   2738c:	ldrb	r3, [r7, #76]	; 0x4c
   27390:	mov	r6, r2
   27394:	cmp	r3, #0
   27398:	beq	273a4 <__assert_fail@plt+0x154dc>
   2739c:	ldr	r6, [r7, #12]
   273a0:	ldr	r6, [r6, r2, lsl #2]
   273a4:	ldr	r4, [r7, #24]
   273a8:	ldr	ip, [r7]
   273ac:	cmp	r3, #0
   273b0:	add	r6, r4, r6
   273b4:	add	r6, ip, r6
   273b8:	ldrsb	r6, [r6]
   273bc:	beq	26c20 <__assert_fail@plt+0x14d58>
   273c0:	cmn	r6, #1
   273c4:	ble	26c18 <__assert_fail@plt+0x14d50>
   273c8:	b	26c20 <__assert_fail@plt+0x14d58>
   273cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   273d0:	add	fp, sp, #28
   273d4:	sub	sp, sp, #12
   273d8:	mov	r4, r1
   273dc:	ldr	r8, [r1]
   273e0:	ldr	r1, [fp, #8]
   273e4:	ldr	r5, [fp, #12]
   273e8:	mov	r7, r2
   273ec:	str	r0, [sp, #8]
   273f0:	mov	sl, r3
   273f4:	mov	r9, r1
   273f8:	str	r1, [sp]
   273fc:	mov	r1, r4
   27400:	str	r5, [sp, #4]
   27404:	bl	27830 <__assert_fail@plt+0x15968>
   27408:	mov	r3, r5
   2740c:	mov	r5, r0
   27410:	mov	r0, #0
   27414:	cmp	r5, #0
   27418:	bne	27428 <__assert_fail@plt+0x15560>
   2741c:	ldr	r1, [r3]
   27420:	cmp	r1, #0
   27424:	bne	2762c <__assert_fail@plt+0x15764>
   27428:	cmp	r9, #0
   2742c:	beq	27520 <__assert_fail@plt+0x15658>
   27430:	ldrb	r0, [r7, #4]
   27434:	orr	r1, r0, #8
   27438:	cmp	r1, #10
   2743c:	cmpne	r0, #9
   27440:	beq	27628 <__assert_fail@plt+0x15760>
   27444:	ldr	r0, [sp, #8]
   27448:	str	r3, [sp, #4]
   2744c:	mov	r1, r4
   27450:	mov	r2, r7
   27454:	mov	r3, sl
   27458:	str	r9, [sp]
   2745c:	bl	27830 <__assert_fail@plt+0x15968>
   27460:	ldr	r3, [fp, #12]
   27464:	cmp	r5, #0
   27468:	mov	r2, r5
   2746c:	mov	r6, r0
   27470:	movwne	r2, #1
   27474:	cmp	r0, #0
   27478:	bne	27488 <__assert_fail@plt+0x155c0>
   2747c:	ldr	r1, [r3]
   27480:	cmp	r1, #0
   27484:	bne	27634 <__assert_fail@plt+0x1576c>
   27488:	cmp	r5, #0
   2748c:	cmpne	r6, #0
   27490:	bne	274a0 <__assert_fail@plt+0x155d8>
   27494:	cmp	r5, #0
   27498:	moveq	r5, r6
   2749c:	b	27430 <__assert_fail@plt+0x15568>
   274a0:	ldr	r1, [r8, #64]	; 0x40
   274a4:	cmp	r1, #31
   274a8:	beq	274f4 <__assert_fail@plt+0x1562c>
   274ac:	ldr	r0, [r8, #56]	; 0x38
   274b0:	add	r0, r0, r1, lsl #5
   274b4:	add	r2, r1, #1
   274b8:	mov	r1, #0
   274bc:	str	r2, [r8, #64]	; 0x40
   274c0:	str	r1, [r0, #4]!
   274c4:	stmib	r0, {r5, r6}
   274c8:	str	r1, [r0, #12]
   274cc:	str	r1, [r0, #16]
   274d0:	str	r1, [r0, #20]
   274d4:	mov	r1, #16
   274d8:	str	r1, [r0, #24]
   274dc:	mvn	r1, #0
   274e0:	str	r1, [r0, #28]
   274e4:	str	r0, [r5]
   274e8:	str	r0, [r6]
   274ec:	mov	r5, r0
   274f0:	b	27430 <__assert_fail@plt+0x15568>
   274f4:	mov	r0, #996	; 0x3e4
   274f8:	bl	38450 <__assert_fail@plt+0x26588>
   274fc:	cmp	r0, #0
   27500:	beq	276e0 <__assert_fail@plt+0x15818>
   27504:	ldr	r1, [r8, #56]	; 0x38
   27508:	ldr	r3, [fp, #12]
   2750c:	str	r1, [r0]
   27510:	mov	r1, #0
   27514:	str	r1, [r8, #64]	; 0x40
   27518:	str	r0, [r8, #56]	; 0x38
   2751c:	b	274b0 <__assert_fail@plt+0x155e8>
   27520:	mov	r9, #0
   27524:	ldrb	r0, [r7, #4]
   27528:	orr	r0, r0, #8
   2752c:	cmp	r0, #10
   27530:	bne	27550 <__assert_fail@plt+0x15688>
   27534:	b	27628 <__assert_fail@plt+0x15760>
   27538:	cmp	r5, #0
   2753c:	moveq	r5, r6
   27540:	ldrb	r0, [r7, #4]
   27544:	orr	r0, r0, #8
   27548:	cmp	r0, #10
   2754c:	beq	27628 <__assert_fail@plt+0x15760>
   27550:	ldr	r0, [sp, #8]
   27554:	str	r3, [sp, #4]
   27558:	mov	r1, r4
   2755c:	mov	r2, r7
   27560:	mov	r3, sl
   27564:	str	r9, [sp]
   27568:	bl	27830 <__assert_fail@plt+0x15968>
   2756c:	ldr	r3, [fp, #12]
   27570:	cmp	r5, #0
   27574:	mov	r2, r5
   27578:	mov	r6, r0
   2757c:	movwne	r2, #1
   27580:	cmp	r0, #0
   27584:	bne	27594 <__assert_fail@plt+0x156cc>
   27588:	ldr	r1, [r3]
   2758c:	cmp	r1, #0
   27590:	bne	27634 <__assert_fail@plt+0x1576c>
   27594:	cmp	r5, #0
   27598:	cmpne	r6, #0
   2759c:	beq	27538 <__assert_fail@plt+0x15670>
   275a0:	ldr	r1, [r8, #64]	; 0x40
   275a4:	cmp	r1, #31
   275a8:	beq	275fc <__assert_fail@plt+0x15734>
   275ac:	ldr	r0, [r8, #56]	; 0x38
   275b0:	add	r0, r0, r1, lsl #5
   275b4:	add	r2, r1, #1
   275b8:	mov	r1, #16
   275bc:	str	r2, [r8, #64]	; 0x40
   275c0:	str	r9, [r0, #4]!
   275c4:	stmib	r0, {r5, r6, r9}
   275c8:	str	r9, [r0, #16]
   275cc:	str	r9, [r0, #20]
   275d0:	str	r1, [r0, #24]
   275d4:	mvn	r1, #0
   275d8:	str	r1, [r0, #28]
   275dc:	str	r0, [r5]
   275e0:	str	r0, [r6]
   275e4:	mov	r5, r0
   275e8:	ldrb	r0, [r7, #4]
   275ec:	orr	r0, r0, #8
   275f0:	cmp	r0, #10
   275f4:	bne	27550 <__assert_fail@plt+0x15688>
   275f8:	b	27628 <__assert_fail@plt+0x15760>
   275fc:	mov	r0, #996	; 0x3e4
   27600:	bl	38450 <__assert_fail@plt+0x26588>
   27604:	cmp	r0, #0
   27608:	beq	276e0 <__assert_fail@plt+0x15818>
   2760c:	ldr	r1, [r8, #56]	; 0x38
   27610:	ldr	r3, [fp, #12]
   27614:	str	r1, [r0]
   27618:	mov	r1, #0
   2761c:	str	r1, [r8, #64]	; 0x40
   27620:	str	r0, [r8, #56]	; 0x38
   27624:	b	275b0 <__assert_fail@plt+0x156e8>
   27628:	mov	r0, r5
   2762c:	sub	sp, fp, #28
   27630:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27634:	mov	r0, #0
   27638:	cmp	r2, #0
   2763c:	beq	2762c <__assert_fail@plt+0x15764>
   27640:	movw	r6, #255	; 0xff
   27644:	movt	r6, #4
   27648:	mov	r7, r5
   2764c:	ldr	r5, [r5, #4]
   27650:	cmp	r5, #0
   27654:	bne	27648 <__assert_fail@plt+0x15780>
   27658:	ldr	r5, [r7, #8]
   2765c:	cmp	r5, #0
   27660:	bne	27648 <__assert_fail@plt+0x15780>
   27664:	ldr	r1, [r7, #24]
   27668:	and	r1, r1, r6
   2766c:	cmp	r1, #3
   27670:	beq	276a4 <__assert_fail@plt+0x157dc>
   27674:	cmp	r1, #6
   27678:	bne	276b4 <__assert_fail@plt+0x157ec>
   2767c:	ldr	r4, [r7, #20]
   27680:	ldr	r0, [r4]
   27684:	bl	17c10 <__assert_fail@plt+0x5d48>
   27688:	ldr	r0, [r4, #4]
   2768c:	bl	17c10 <__assert_fail@plt+0x5d48>
   27690:	ldr	r0, [r4, #8]
   27694:	bl	17c10 <__assert_fail@plt+0x5d48>
   27698:	ldr	r0, [r4, #12]
   2769c:	bl	17c10 <__assert_fail@plt+0x5d48>
   276a0:	b	276a8 <__assert_fail@plt+0x157e0>
   276a4:	ldr	r4, [r7, #20]
   276a8:	mov	r0, r4
   276ac:	bl	17c10 <__assert_fail@plt+0x5d48>
   276b0:	mov	r0, #0
   276b4:	ldr	r1, [r7]
   276b8:	cmp	r1, #0
   276bc:	beq	2762c <__assert_fail@plt+0x15764>
   276c0:	ldr	r5, [r1, #8]
   276c4:	cmp	r5, r7
   276c8:	mov	r7, r1
   276cc:	beq	27664 <__assert_fail@plt+0x1579c>
   276d0:	cmp	r5, #0
   276d4:	mov	r7, r1
   276d8:	beq	27664 <__assert_fail@plt+0x1579c>
   276dc:	b	27648 <__assert_fail@plt+0x15780>
   276e0:	ldr	r1, [fp, #12]
   276e4:	movw	r8, #255	; 0xff
   276e8:	movt	r8, #4
   276ec:	mov	r7, r6
   276f0:	ldr	r6, [r6, #4]
   276f4:	cmp	r6, #0
   276f8:	bne	276ec <__assert_fail@plt+0x15824>
   276fc:	ldr	r6, [r7, #8]
   27700:	cmp	r6, #0
   27704:	bne	276ec <__assert_fail@plt+0x15824>
   27708:	ldr	r0, [r7, #24]
   2770c:	and	r0, r0, r8
   27710:	cmp	r0, #3
   27714:	beq	27748 <__assert_fail@plt+0x15880>
   27718:	cmp	r0, #6
   2771c:	bne	27758 <__assert_fail@plt+0x15890>
   27720:	ldr	r4, [r7, #20]
   27724:	ldr	r0, [r4]
   27728:	bl	17c10 <__assert_fail@plt+0x5d48>
   2772c:	ldr	r0, [r4, #4]
   27730:	bl	17c10 <__assert_fail@plt+0x5d48>
   27734:	ldr	r0, [r4, #8]
   27738:	bl	17c10 <__assert_fail@plt+0x5d48>
   2773c:	ldr	r0, [r4, #12]
   27740:	bl	17c10 <__assert_fail@plt+0x5d48>
   27744:	b	2774c <__assert_fail@plt+0x15884>
   27748:	ldr	r4, [r7, #20]
   2774c:	mov	r0, r4
   27750:	bl	17c10 <__assert_fail@plt+0x5d48>
   27754:	ldr	r1, [fp, #12]
   27758:	ldr	r0, [r7]
   2775c:	cmp	r0, #0
   27760:	beq	27784 <__assert_fail@plt+0x158bc>
   27764:	ldr	r6, [r0, #8]
   27768:	cmp	r6, r7
   2776c:	mov	r7, r0
   27770:	beq	27708 <__assert_fail@plt+0x15840>
   27774:	cmp	r6, #0
   27778:	mov	r7, r0
   2777c:	beq	27708 <__assert_fail@plt+0x15840>
   27780:	b	276ec <__assert_fail@plt+0x15824>
   27784:	mov	r6, r5
   27788:	ldr	r5, [r5, #4]
   2778c:	cmp	r5, #0
   27790:	bne	27784 <__assert_fail@plt+0x158bc>
   27794:	ldr	r5, [r6, #8]
   27798:	cmp	r5, #0
   2779c:	bne	27784 <__assert_fail@plt+0x158bc>
   277a0:	ldr	r0, [r6, #24]
   277a4:	and	r0, r0, r8
   277a8:	cmp	r0, #3
   277ac:	beq	277e0 <__assert_fail@plt+0x15918>
   277b0:	cmp	r0, #6
   277b4:	bne	277f0 <__assert_fail@plt+0x15928>
   277b8:	ldr	r4, [r6, #20]
   277bc:	ldr	r0, [r4]
   277c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   277c4:	ldr	r0, [r4, #4]
   277c8:	bl	17c10 <__assert_fail@plt+0x5d48>
   277cc:	ldr	r0, [r4, #8]
   277d0:	bl	17c10 <__assert_fail@plt+0x5d48>
   277d4:	ldr	r0, [r4, #12]
   277d8:	bl	17c10 <__assert_fail@plt+0x5d48>
   277dc:	b	277e4 <__assert_fail@plt+0x1591c>
   277e0:	ldr	r4, [r6, #20]
   277e4:	mov	r0, r4
   277e8:	bl	17c10 <__assert_fail@plt+0x5d48>
   277ec:	ldr	r1, [fp, #12]
   277f0:	ldr	r0, [r6]
   277f4:	cmp	r0, #0
   277f8:	beq	2781c <__assert_fail@plt+0x15954>
   277fc:	ldr	r5, [r0, #8]
   27800:	cmp	r5, r6
   27804:	mov	r6, r0
   27808:	beq	277a0 <__assert_fail@plt+0x158d8>
   2780c:	cmp	r5, #0
   27810:	mov	r6, r0
   27814:	beq	277a0 <__assert_fail@plt+0x158d8>
   27818:	b	27784 <__assert_fail@plt+0x158bc>
   2781c:	mov	r0, #12
   27820:	str	r0, [r1]
   27824:	mov	r0, #0
   27828:	sub	sp, fp, #28
   2782c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27834:	add	fp, sp, #28
   27838:	sub	sp, sp, #156	; 0x9c
   2783c:	mov	r5, r0
   27840:	mov	lr, r2
   27844:	ldr	r0, [r2, #4]
   27848:	ldr	r2, [fp, #12]
   2784c:	mov	r7, r1
   27850:	mvn	r1, #0
   27854:	mov	r9, #0
   27858:	mov	ip, r3
   2785c:	ldr	sl, [r7]
   27860:	str	r2, [sp, #20]
   27864:	uxtab	r1, r1, r0
   27868:	ldr	r6, [fp, #8]
   2786c:	add	r2, pc, #12
   27870:	str	r5, [sp, #28]
   27874:	str	r3, [sp, #48]	; 0x30
   27878:	str	lr, [sp, #44]	; 0x2c
   2787c:	ldr	pc, [r2, r1, lsl #2]
   27880:	muleq	r2, r8, fp
   27884:	andeq	r9, r2, r8, ror #17
   27888:	andeq	r9, r2, ip, ror pc
   2788c:	andeq	r7, r2, r0, ror #26
   27890:	andeq	r7, r2, r0, ror #27
   27894:	andeq	r9, r2, ip, ror pc
   27898:	andeq	r9, r2, ip, ror pc
   2789c:	andeq	r7, r2, r8, asr #28
   278a0:	andeq	r7, r2, r0, lsr r9
   278a4:	andeq	r9, r2, r8, ror #17
   278a8:	andeq	r7, r2, r0, lsr #18
   278ac:	andeq	r7, r2, r4, lsr #20
   278b0:	andeq	r9, r2, ip, ror pc
   278b4:	andeq	r9, r2, ip, ror pc
   278b8:	andeq	r9, r2, ip, ror pc
   278bc:	andeq	r9, r2, ip, ror pc
   278c0:	andeq	r9, r2, ip, ror pc
   278c4:	andeq	r7, r2, r0, lsr #18
   278c8:	andeq	r7, r2, r0, lsr #18
   278cc:	andeq	r7, r2, r4, lsr #22
   278d0:	andeq	r9, r2, ip, ror pc
   278d4:	andeq	r9, r2, ip, ror pc
   278d8:	andeq	r7, r2, ip, asr #29
   278dc:	andeq	r7, r2, r0, asr #18
   278e0:	andeq	r9, r2, ip, ror pc
   278e4:	andeq	r9, r2, ip, ror pc
   278e8:	andeq	r9, r2, ip, ror pc
   278ec:	andeq	r9, r2, ip, ror pc
   278f0:	andeq	r9, r2, ip, ror pc
   278f4:	andeq	r9, r2, ip, ror pc
   278f8:	andeq	r9, r2, ip, ror pc
   278fc:	muleq	r2, ip, r9
   27900:	muleq	r2, ip, r9
   27904:			; <UNDEFINED> instruction: 0x000279bc
   27908:			; <UNDEFINED> instruction: 0x000279bc
   2790c:	ldrdeq	r7, [r2], -ip
   27910:	andeq	r0, r0, r0
   27914:	mvnseq	r0, #0
   27918:			; <UNDEFINED> instruction: 0x87fffffe
   2791c:			; <UNDEFINED> instruction: 0x07fffffe
   27920:	tst	ip, #32
   27924:	bne	27ed4 <__assert_fail@plt+0x1600c>
   27928:	tst	ip, #16
   2792c:	bne	27eec <__assert_fail@plt+0x16024>
   27930:	tst	ip, #131072	; 0x20000
   27934:	uxtbeq	r1, r0
   27938:	cmpeq	r1, #9
   2793c:	beq	27f2c <__assert_fail@plt+0x16064>
   27940:	mov	r1, #1
   27944:	bfi	r0, r1, #0, #8
   27948:	str	r0, [lr, #4]
   2794c:	ldr	r1, [sl, #64]	; 0x40
   27950:	cmp	r1, #31
   27954:	beq	29aa4 <__assert_fail@plt+0x17bdc>
   27958:	ldr	r0, [sl, #56]	; 0x38
   2795c:	add	r7, r0, r1, lsl #5
   27960:	add	r2, r1, #1
   27964:	mov	r0, #0
   27968:	mvn	r3, #0
   2796c:	str	r2, [sl, #64]	; 0x40
   27970:	str	r0, [r7, #4]!
   27974:	str	r0, [r7, #8]
   27978:	str	r0, [r7, #4]
   2797c:	ldm	lr, {r1, r2}
   27980:	str	r3, [r7, #28]
   27984:	str	r0, [r7, #16]
   27988:	str	r0, [r7, #12]
   2798c:	bic	r0, r2, #786432	; 0xc0000
   27990:	str	r1, [r7, #20]
   27994:	str	r0, [r7, #24]
   27998:	b	28988 <__assert_fail@plt+0x16ac0>
   2799c:	mvn	r2, #32
   279a0:	ldr	r1, [r5, #64]	; 0x40
   279a4:	movw	r3, #45345	; 0xb121
   279a8:	uxtab	r0, r2, r0
   279ac:	movw	r2, #48206	; 0xbc4e
   279b0:	movt	r3, #3
   279b4:	movt	r2, #3
   279b8:	b	279d8 <__assert_fail@plt+0x15b10>
   279bc:	mvn	r2, #34	; 0x22
   279c0:	ldr	r1, [r5, #64]	; 0x40
   279c4:	movw	r3, #43540	; 0xaa14
   279c8:	uxtab	r0, r2, r0
   279cc:	movw	r2, #48212	; 0xbc54
   279d0:	movt	r3, #3
   279d4:	movt	r2, #3
   279d8:	clz	r0, r0
   279dc:	lsr	r0, r0, #5
   279e0:	str	r0, [sp]
   279e4:	ldr	r4, [sp, #20]
   279e8:	str	r4, [sp, #4]
   279ec:	mov	r0, sl
   279f0:	bl	29f7c <__assert_fail@plt+0x180b4>
   279f4:	mov	r7, r0
   279f8:	cmp	r0, #0
   279fc:	bne	27a18 <__assert_fail@plt+0x15b50>
   27a00:	ldr	r0, [r4]
   27a04:	cmp	r0, #0
   27a08:	ldr	ip, [sp, #48]	; 0x30
   27a0c:	ldr	lr, [sp, #44]	; 0x2c
   27a10:	beq	28988 <__assert_fail@plt+0x16ac0>
   27a14:	b	298e8 <__assert_fail@plt+0x17a20>
   27a18:	ldr	ip, [sp, #48]	; 0x30
   27a1c:	ldr	lr, [sp, #44]	; 0x2c
   27a20:	b	28988 <__assert_fail@plt+0x16ac0>
   27a24:	ldr	r0, [lr]
   27a28:	movw	r1, #783	; 0x30f
   27a2c:	tst	r0, r1
   27a30:	beq	27a78 <__assert_fail@plt+0x15bb0>
   27a34:	ldrb	r0, [sl, #88]	; 0x58
   27a38:	tst	r0, #16
   27a3c:	bne	27a74 <__assert_fail@plt+0x15bac>
   27a40:	orr	r1, r0, #16
   27a44:	tst	r0, #8
   27a48:	strb	r1, [sl, #88]	; 0x58
   27a4c:	bne	29d44 <__assert_fail@plt+0x17e7c>
   27a50:	sub	r1, pc, #328	; 0x148
   27a54:	tst	r0, #4
   27a58:	vld1.64	{d16-d17}, [r1 :128]
   27a5c:	add	r1, sl, #96	; 0x60
   27a60:	vst1.32	{d16-d17}, [r1]
   27a64:	beq	29d50 <__assert_fail@plt+0x17e88>
   27a68:	vmov.i32	q8, #0	; 0x00000000
   27a6c:	add	r0, sl, #112	; 0x70
   27a70:	vst1.32	{d16-d17}, [r0]
   27a74:	ldr	r0, [lr]
   27a78:	cmp	r0, #512	; 0x200
   27a7c:	beq	28774 <__assert_fail@plt+0x168ac>
   27a80:	cmp	r0, #256	; 0x100
   27a84:	bne	2888c <__assert_fail@plt+0x169c4>
   27a88:	mov	r0, #6
   27a8c:	str	r0, [lr]
   27a90:	ldr	r1, [sl, #64]	; 0x40
   27a94:	cmp	r1, #31
   27a98:	beq	29ca4 <__assert_fail@plt+0x17ddc>
   27a9c:	ldr	r0, [sl, #56]	; 0x38
   27aa0:	add	r4, r0, r1, lsl #5
   27aa4:	add	r2, r1, #1
   27aa8:	mov	r0, #0
   27aac:	mvn	r3, #0
   27ab0:	str	r2, [sl, #64]	; 0x40
   27ab4:	str	r0, [r4, #4]!
   27ab8:	str	r0, [r4, #8]
   27abc:	str	r0, [r4, #4]
   27ac0:	ldm	lr, {r1, r2}
   27ac4:	str	r3, [r4, #28]
   27ac8:	str	r0, [r4, #16]
   27acc:	str	r0, [r4, #12]
   27ad0:	bic	r0, r2, #786432	; 0xc0000
   27ad4:	str	r1, [r4, #20]
   27ad8:	str	r0, [r4, #24]
   27adc:	mov	r0, #9
   27ae0:	str	r0, [lr]
   27ae4:	ldr	r1, [sl, #64]	; 0x40
   27ae8:	cmp	r1, #31
   27aec:	bne	287dc <__assert_fail@plt+0x16914>
   27af0:	mov	r0, #996	; 0x3e4
   27af4:	bl	38450 <__assert_fail@plt+0x26588>
   27af8:	cmp	r0, #0
   27afc:	beq	29de0 <__assert_fail@plt+0x17f18>
   27b00:	ldr	r1, [sl, #56]	; 0x38
   27b04:	ldr	ip, [sp, #48]	; 0x30
   27b08:	ldr	lr, [sp, #44]	; 0x2c
   27b0c:	mov	r9, #0
   27b10:	str	r1, [r0]
   27b14:	mov	r1, #0
   27b18:	str	r1, [sl, #64]	; 0x40
   27b1c:	str	r0, [sl, #56]	; 0x38
   27b20:	b	287e0 <__assert_fail@plt+0x16918>
   27b24:	mov	r9, #0
   27b28:	mov	r0, #32
   27b2c:	mov	r1, #1
   27b30:	str	r9, [fp, #-32]	; 0xffffffe0
   27b34:	bl	383fc <__assert_fail@plt+0x26534>
   27b38:	mov	r8, r0
   27b3c:	mov	r0, #40	; 0x28
   27b40:	mov	r1, #1
   27b44:	bl	383fc <__assert_fail@plt+0x26534>
   27b48:	mov	r7, r0
   27b4c:	cmp	r8, #0
   27b50:	cmpne	r7, #0
   27b54:	beq	29b04 <__assert_fail@plt+0x17c3c>
   27b58:	ldr	r6, [sp, #44]	; 0x2c
   27b5c:	ldr	r4, [sp, #48]	; 0x30
   27b60:	mov	r1, r5
   27b64:	mov	r0, r6
   27b68:	mov	r2, r4
   27b6c:	bl	2a370 <__assert_fail@plt+0x184a8>
   27b70:	mov	r3, r0
   27b74:	ldr	r0, [r6, #4]
   27b78:	str	r7, [sp, #60]	; 0x3c
   27b7c:	uxtb	r1, r0
   27b80:	cmp	r1, #25
   27b84:	beq	27f34 <__assert_fail@plt+0x1606c>
   27b88:	cmp	r1, #2
   27b8c:	beq	29af0 <__assert_fail@plt+0x17c28>
   27b90:	mov	r1, #0
   27b94:	b	27f8c <__assert_fail@plt+0x160c4>
   27b98:	ldr	r1, [sl, #64]	; 0x40
   27b9c:	cmp	r1, #31
   27ba0:	beq	29b18 <__assert_fail@plt+0x17c50>
   27ba4:	ldr	r0, [sl, #56]	; 0x38
   27ba8:	add	r4, r0, r1, lsl #5
   27bac:	add	r2, r1, #1
   27bb0:	mov	r0, #0
   27bb4:	mvn	r3, #0
   27bb8:	str	r2, [sl, #64]	; 0x40
   27bbc:	str	r0, [r4, #4]!
   27bc0:	str	r0, [r4, #8]
   27bc4:	str	r0, [r4, #4]
   27bc8:	ldm	lr, {r1, r2}
   27bcc:	str	r3, [r4, #28]
   27bd0:	str	r0, [r4, #16]
   27bd4:	str	r0, [r4, #12]
   27bd8:	bic	r0, r2, #786432	; 0xc0000
   27bdc:	str	r1, [r4, #20]
   27be0:	str	r0, [r4, #24]
   27be4:	ldr	r0, [sl, #92]	; 0x5c
   27be8:	cmp	r0, #2
   27bec:	blt	27ee4 <__assert_fail@plt+0x1601c>
   27bf0:	ldr	r0, [r5, #40]	; 0x28
   27bf4:	ldr	r1, [r5, #56]	; 0x38
   27bf8:	cmp	r1, r0
   27bfc:	ble	27ee4 <__assert_fail@plt+0x1601c>
   27c00:	mov	r8, #0
   27c04:	mvn	r9, #0
   27c08:	ldr	r1, [r5, #28]
   27c0c:	cmp	r0, r1
   27c10:	beq	27ee4 <__assert_fail@plt+0x1601c>
   27c14:	ldr	r1, [r5, #8]
   27c18:	ldr	r0, [r1, r0, lsl #2]
   27c1c:	cmn	r0, #1
   27c20:	bne	27ee4 <__assert_fail@plt+0x1601c>
   27c24:	mov	r0, lr
   27c28:	mov	r1, r5
   27c2c:	mov	r2, ip
   27c30:	bl	26b78 <__assert_fail@plt+0x14cb0>
   27c34:	ldr	r1, [r5, #40]	; 0x28
   27c38:	add	r0, r1, r0
   27c3c:	str	r0, [r5, #40]	; 0x28
   27c40:	ldr	r1, [sl, #64]	; 0x40
   27c44:	cmp	r1, #31
   27c48:	beq	27cf0 <__assert_fail@plt+0x15e28>
   27c4c:	ldr	r0, [sl, #56]	; 0x38
   27c50:	add	r6, r0, r1, lsl #5
   27c54:	ldr	lr, [sp, #44]	; 0x2c
   27c58:	add	r2, r1, #1
   27c5c:	ldr	ip, [sp, #48]	; 0x30
   27c60:	str	r2, [sl, #64]	; 0x40
   27c64:	str	r8, [r6, #4]!
   27c68:	str	r8, [r6, #8]
   27c6c:	str	r8, [r6, #4]
   27c70:	ldm	lr, {r0, r1}
   27c74:	str	r9, [r6, #28]
   27c78:	str	r8, [r6, #16]
   27c7c:	str	r8, [r6, #12]
   27c80:	str	r0, [r6, #20]
   27c84:	bic	r0, r1, #786432	; 0xc0000
   27c88:	str	r0, [r6, #24]
   27c8c:	ldr	r1, [sl, #64]	; 0x40
   27c90:	cmp	r1, #31
   27c94:	beq	27d30 <__assert_fail@plt+0x15e68>
   27c98:	ldr	r0, [sl, #56]	; 0x38
   27c9c:	add	r7, r0, r1, lsl #5
   27ca0:	add	r2, r1, #1
   27ca4:	mov	r0, #16
   27ca8:	cmp	r6, #0
   27cac:	str	r2, [sl, #64]	; 0x40
   27cb0:	str	r8, [r7, #4]!
   27cb4:	stmib	r7, {r4, r6, r8}
   27cb8:	str	r8, [r7, #16]
   27cbc:	str	r8, [r7, #20]
   27cc0:	str	r0, [r7, #24]
   27cc4:	str	r9, [r7, #28]
   27cc8:	str	r7, [r4]
   27ccc:	beq	29d3c <__assert_fail@plt+0x17e74>
   27cd0:	ldr	r5, [sp, #28]
   27cd4:	str	r7, [r6]
   27cd8:	mov	r4, r7
   27cdc:	ldr	r0, [r5, #40]	; 0x28
   27ce0:	ldr	r1, [r5, #56]	; 0x38
   27ce4:	cmp	r1, r0
   27ce8:	bgt	27c08 <__assert_fail@plt+0x15d40>
   27cec:	b	28988 <__assert_fail@plt+0x16ac0>
   27cf0:	mov	r0, #996	; 0x3e4
   27cf4:	bl	38450 <__assert_fail@plt+0x26588>
   27cf8:	cmp	r0, #0
   27cfc:	beq	27d18 <__assert_fail@plt+0x15e50>
   27d00:	ldr	r1, [sl, #56]	; 0x38
   27d04:	str	r1, [r0]
   27d08:	mov	r1, #0
   27d0c:	str	r1, [sl, #64]	; 0x40
   27d10:	str	r0, [sl, #56]	; 0x38
   27d14:	b	27c50 <__assert_fail@plt+0x15d88>
   27d18:	ldr	ip, [sp, #48]	; 0x30
   27d1c:	ldr	lr, [sp, #44]	; 0x2c
   27d20:	mov	r6, #0
   27d24:	ldr	r1, [sl, #64]	; 0x40
   27d28:	cmp	r1, #31
   27d2c:	bne	27c98 <__assert_fail@plt+0x15dd0>
   27d30:	mov	r0, #996	; 0x3e4
   27d34:	bl	38450 <__assert_fail@plt+0x26588>
   27d38:	ldr	lr, [sp, #44]	; 0x2c
   27d3c:	ldr	ip, [sp, #48]	; 0x30
   27d40:	cmp	r0, #0
   27d44:	beq	29d3c <__assert_fail@plt+0x17e74>
   27d48:	ldr	r1, [sl, #56]	; 0x38
   27d4c:	str	r1, [r0]
   27d50:	mov	r1, #0
   27d54:	str	r1, [sl, #64]	; 0x40
   27d58:	str	r0, [sl, #56]	; 0x38
   27d5c:	b	27c9c <__assert_fail@plt+0x15dd4>
   27d60:	ldr	r0, [lr]
   27d64:	ldr	r2, [sl, #84]	; 0x54
   27d68:	mov	r1, #1
   27d6c:	tst	r2, r1, lsl r0
   27d70:	beq	29b4c <__assert_fail@plt+0x17c84>
   27d74:	lsl	r0, r1, r0
   27d78:	ldr	r1, [sl, #64]	; 0x40
   27d7c:	ldr	r2, [sl, #80]	; 0x50
   27d80:	orr	r0, r2, r0
   27d84:	cmp	r1, #31
   27d88:	str	r0, [sl, #80]	; 0x50
   27d8c:	beq	29b88 <__assert_fail@plt+0x17cc0>
   27d90:	ldr	r0, [sl, #56]	; 0x38
   27d94:	add	r7, r0, r1, lsl #5
   27d98:	add	r2, r1, #1
   27d9c:	mov	r0, #0
   27da0:	mvn	r3, #0
   27da4:	str	r2, [sl, #64]	; 0x40
   27da8:	str	r0, [r7, #4]!
   27dac:	str	r0, [r7, #8]
   27db0:	str	r0, [r7, #4]
   27db4:	ldm	lr, {r1, r2}
   27db8:	str	r3, [r7, #28]
   27dbc:	str	r0, [r7, #16]
   27dc0:	str	r0, [r7, #12]
   27dc4:	bic	r0, r2, #786432	; 0xc0000
   27dc8:	str	r1, [r7, #20]
   27dcc:	str	r0, [r7, #24]
   27dd0:	ldr	r0, [sl, #76]	; 0x4c
   27dd4:	add	r0, r0, #1
   27dd8:	str	r0, [sl, #76]	; 0x4c
   27ddc:	b	27e38 <__assert_fail@plt+0x15f70>
   27de0:	ldr	r1, [sl, #64]	; 0x40
   27de4:	cmp	r1, #31
   27de8:	beq	29b54 <__assert_fail@plt+0x17c8c>
   27dec:	ldr	r0, [sl, #56]	; 0x38
   27df0:	add	r7, r0, r1, lsl #5
   27df4:	add	r2, r1, #1
   27df8:	mov	r0, #0
   27dfc:	mvn	r3, #0
   27e00:	str	r2, [sl, #64]	; 0x40
   27e04:	str	r0, [r7, #4]!
   27e08:	str	r0, [r7, #8]
   27e0c:	str	r0, [r7, #4]
   27e10:	ldm	lr, {r1, r2}
   27e14:	str	r3, [r7, #28]
   27e18:	str	r0, [r7, #16]
   27e1c:	str	r0, [r7, #12]
   27e20:	bic	r0, r2, #786432	; 0xc0000
   27e24:	str	r1, [r7, #20]
   27e28:	str	r0, [r7, #24]
   27e2c:	ldr	r0, [sl, #92]	; 0x5c
   27e30:	cmp	r0, #2
   27e34:	blt	28988 <__assert_fail@plt+0x16ac0>
   27e38:	ldrb	r0, [sl, #88]	; 0x58
   27e3c:	orr	r0, r0, #2
   27e40:	strb	r0, [sl, #88]	; 0x58
   27e44:	b	28988 <__assert_fail@plt+0x16ac0>
   27e48:	ldr	r4, [r7, #24]
   27e4c:	orr	r2, ip, #8388608	; 0x800000
   27e50:	mov	r1, r5
   27e54:	add	r0, r4, #1
   27e58:	str	r0, [r7, #24]
   27e5c:	mov	r0, lr
   27e60:	bl	26b78 <__assert_fail@plt+0x14cb0>
   27e64:	ldr	r1, [r5, #40]	; 0x28
   27e68:	ldr	lr, [sp, #44]	; 0x2c
   27e6c:	mov	r9, #0
   27e70:	add	r0, r1, r0
   27e74:	str	r0, [r5, #40]	; 0x28
   27e78:	ldrb	r0, [lr, #4]
   27e7c:	cmp	r0, #9
   27e80:	beq	28918 <__assert_fail@plt+0x16a50>
   27e84:	add	r0, r6, #1
   27e88:	mov	r1, r7
   27e8c:	mov	r2, lr
   27e90:	mov	r7, lr
   27e94:	str	r0, [sp]
   27e98:	mov	r0, r5
   27e9c:	ldr	r6, [sp, #20]
   27ea0:	str	r6, [sp, #4]
   27ea4:	ldr	r3, [sp, #48]	; 0x30
   27ea8:	bl	267f0 <__assert_fail@plt+0x14928>
   27eac:	mov	r9, r0
   27eb0:	ldr	r0, [r6]
   27eb4:	cmp	r0, #0
   27eb8:	beq	28908 <__assert_fail@plt+0x16a40>
   27ebc:	mov	r9, #0
   27ec0:	mov	r0, r9
   27ec4:	sub	sp, fp, #28
   27ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27ecc:	tst	ip, #16777216	; 0x1000000
   27ed0:	beq	27920 <__assert_fail@plt+0x15a58>
   27ed4:	mov	r0, #13
   27ed8:	b	28878 <__assert_fail@plt+0x169b0>
   27edc:	mov	r0, #5
   27ee0:	b	28878 <__assert_fail@plt+0x169b0>
   27ee4:	mov	r7, r4
   27ee8:	b	28988 <__assert_fail@plt+0x16ac0>
   27eec:	mov	r0, lr
   27ef0:	mov	r1, r5
   27ef4:	mov	r2, ip
   27ef8:	mov	r4, ip
   27efc:	mov	r6, lr
   27f00:	bl	26b78 <__assert_fail@plt+0x14cb0>
   27f04:	ldr	r1, [r5, #40]	; 0x28
   27f08:	mov	r2, r6
   27f0c:	mov	r3, r4
   27f10:	add	r0, r1, r0
   27f14:	mov	r1, r7
   27f18:	str	r0, [r5, #40]	; 0x28
   27f1c:	mov	r0, r5
   27f20:	sub	sp, fp, #28
   27f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27f28:	b	27830 <__assert_fail@plt+0x15968>
   27f2c:	mov	r0, #16
   27f30:	b	28878 <__assert_fail@plt+0x169b0>
   27f34:	ldrb	r0, [r7, #16]
   27f38:	tst	r4, #256	; 0x100
   27f3c:	orr	r0, r0, #1
   27f40:	strb	r0, [r7, #16]
   27f44:	beq	27f54 <__assert_fail@plt+0x1608c>
   27f48:	ldr	r0, [r8]
   27f4c:	orr	r0, r0, #1024	; 0x400
   27f50:	str	r0, [r8]
   27f54:	ldr	r0, [r5, #40]	; 0x28
   27f58:	mov	r1, r5
   27f5c:	mov	r2, r4
   27f60:	add	r0, r0, r3
   27f64:	str	r0, [r5, #40]	; 0x28
   27f68:	mov	r0, r6
   27f6c:	bl	2a370 <__assert_fail@plt+0x184a8>
   27f70:	ldr	r6, [sp, #44]	; 0x2c
   27f74:	mov	r3, r0
   27f78:	ldr	r0, [r6, #4]
   27f7c:	uxtb	r1, r0
   27f80:	cmp	r1, #2
   27f84:	beq	29af0 <__assert_fail@plt+0x17c28>
   27f88:	mov	r1, #1
   27f8c:	str	r1, [sp, #56]	; 0x38
   27f90:	uxtb	r1, r0
   27f94:	mov	r2, r6
   27f98:	ldr	r7, [sp, #48]	; 0x30
   27f9c:	cmp	r1, #21
   27fa0:	moveq	r1, #1
   27fa4:	bfieq	r0, r1, #0, #8
   27fa8:	mov	r1, r5
   27fac:	streq	r0, [r6, #4]
   27fb0:	sub	r0, fp, #80	; 0x50
   27fb4:	str	r0, [fp, #-36]	; 0xffffffdc
   27fb8:	mov	r0, #3
   27fbc:	str	r0, [fp, #-40]	; 0xffffffd8
   27fc0:	mov	r0, #1
   27fc4:	str	r7, [sp]
   27fc8:	str	r0, [sp, #4]
   27fcc:	sub	r0, fp, #40	; 0x28
   27fd0:	bl	2a518 <__assert_fail@plt+0x18650>
   27fd4:	cmp	r0, #0
   27fd8:	bne	29ad8 <__assert_fail@plt+0x17c10>
   27fdc:	and	r0, r7, #65536	; 0x10000
   27fe0:	mov	r2, r7
   27fe4:	str	r0, [sp, #40]	; 0x28
   27fe8:	mov	r0, #0
   27fec:	str	r0, [sp, #36]	; 0x24
   27ff0:	mov	r0, #0
   27ff4:	str	r0, [sp, #32]
   27ff8:	ldr	r4, [sp, #44]	; 0x2c
   27ffc:	ldr	r7, [sp, #60]	; 0x3c
   28000:	mov	r0, r4
   28004:	mov	r1, r5
   28008:	bl	2a370 <__assert_fail@plt+0x184a8>
   2800c:	ldr	r6, [fp, #-40]	; 0xffffffd8
   28010:	mov	r9, r0
   28014:	cmp	r6, #2
   28018:	beq	28240 <__assert_fail@plt+0x16378>
   2801c:	cmp	r6, #4
   28020:	bne	28064 <__assert_fail@plt+0x1619c>
   28024:	ldr	r5, [sp, #28]
   28028:	ldr	r1, [fp, #-36]	; 0xffffffdc
   2802c:	mov	r2, r7
   28030:	sub	r3, fp, #32
   28034:	ldr	r0, [r5, #64]	; 0x40
   28038:	str	r1, [sp]
   2803c:	ldr	r1, [sp, #48]	; 0x30
   28040:	str	r1, [sp, #4]
   28044:	mov	r1, r8
   28048:	bl	2a824 <__assert_fail@plt+0x1895c>
   2804c:	ldr	r1, [sp, #20]
   28050:	ldr	lr, [sp, #44]	; 0x2c
   28054:	cmp	r0, #0
   28058:	str	r0, [r1]
   2805c:	beq	28288 <__assert_fail@plt+0x163c0>
   28060:	b	29a50 <__assert_fail@plt+0x17b88>
   28064:	ldr	r0, [sp, #44]	; 0x2c
   28068:	ldr	r2, [sp, #48]	; 0x30
   2806c:	mov	r4, r9
   28070:	mov	r9, #7
   28074:	str	sl, [sp, #52]	; 0x34
   28078:	ldrb	r0, [r0, #4]
   2807c:	cmp	r0, #22
   28080:	beq	28090 <__assert_fail@plt+0x161c8>
   28084:	cmp	r0, #2
   28088:	bne	281e8 <__assert_fail@plt+0x16320>
   2808c:	b	29a3c <__assert_fail@plt+0x17b74>
   28090:	ldr	r7, [sp, #28]
   28094:	mov	r5, r4
   28098:	ldr	r0, [r7, #40]	; 0x28
   2809c:	mov	r1, r7
   280a0:	add	r0, r0, r4
   280a4:	str	r0, [r7, #40]	; 0x28
   280a8:	add	r0, sp, #64	; 0x40
   280ac:	bl	2a370 <__assert_fail@plt+0x184a8>
   280b0:	mov	r3, r0
   280b4:	ldrb	r0, [sp, #68]	; 0x44
   280b8:	cmp	r0, #21
   280bc:	beq	281d0 <__assert_fail@plt+0x16308>
   280c0:	ldr	r4, [sp, #48]	; 0x30
   280c4:	cmp	r0, #2
   280c8:	beq	29a3c <__assert_fail@plt+0x17b74>
   280cc:	mov	r0, #3
   280d0:	str	r8, [sp, #24]
   280d4:	add	r2, sp, #64	; 0x40
   280d8:	str	r0, [fp, #-48]	; 0xffffffd0
   280dc:	add	r0, sp, #72	; 0x48
   280e0:	str	r0, [fp, #-44]	; 0xffffffd4
   280e4:	mov	r0, #1
   280e8:	str	r4, [sp]
   280ec:	str	r0, [sp, #4]
   280f0:	sub	r0, fp, #48	; 0x30
   280f4:	ldr	r7, [sp, #28]
   280f8:	mov	r1, r7
   280fc:	bl	2a518 <__assert_fail@plt+0x18650>
   28100:	cmp	r0, #0
   28104:	bne	29ed8 <__assert_fail@plt+0x18010>
   28108:	ldr	r0, [sp, #44]	; 0x2c
   2810c:	mov	r1, r7
   28110:	mov	r2, r4
   28114:	bl	2a370 <__assert_fail@plt+0x184a8>
   28118:	ldr	r8, [fp, #-48]	; 0xffffffd0
   2811c:	mov	r9, #11
   28120:	str	r0, [sp, #16]
   28124:	cmp	r8, #2
   28128:	beq	29a38 <__assert_fail@plt+0x17b70>
   2812c:	cmp	r8, #4
   28130:	beq	29a38 <__assert_fail@plt+0x17b70>
   28134:	cmp	r6, #3
   28138:	bne	2814c <__assert_fail@plt+0x16284>
   2813c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   28140:	bl	11cac <strlen@plt>
   28144:	cmp	r0, #1
   28148:	bhi	29ee4 <__assert_fail@plt+0x1801c>
   2814c:	cmp	r8, #3
   28150:	bne	28164 <__assert_fail@plt+0x1629c>
   28154:	ldr	r0, [fp, #-44]	; 0xffffffd4
   28158:	bl	11cac <strlen@plt>
   2815c:	cmp	r0, #1
   28160:	bhi	29ee4 <__assert_fail@plt+0x1801c>
   28164:	ldr	lr, [sp, #44]	; 0x2c
   28168:	cmp	r6, #3
   2816c:	beq	28338 <__assert_fail@plt+0x16470>
   28170:	cmp	r6, #0
   28174:	mov	r7, #0
   28178:	ldrbeq	r7, [fp, #-36]	; 0xffffffdc
   2817c:	cmp	r8, #3
   28180:	beq	28348 <__assert_fail@plt+0x16480>
   28184:	cmp	r8, #0
   28188:	mov	sl, #0
   2818c:	ldrbeq	sl, [fp, #-44]	; 0xffffffd4
   28190:	cmp	r6, #3
   28194:	cmpne	r6, #0
   28198:	bne	2835c <__assert_fail@plt+0x16494>
   2819c:	ldr	r0, [sp, #52]	; 0x34
   281a0:	ldr	r0, [r0, #92]	; 0x5c
   281a4:	cmp	r0, #2
   281a8:	blt	28360 <__assert_fail@plt+0x16498>
   281ac:	mov	r0, r7
   281b0:	bl	11d18 <btowc@plt>
   281b4:	ldr	lr, [sp, #44]	; 0x2c
   281b8:	mov	r7, r0
   281bc:	cmp	r8, #3
   281c0:	cmpne	r8, #0
   281c4:	beq	2836c <__assert_fail@plt+0x164a4>
   281c8:	ldr	sl, [fp, #-44]	; 0xffffffd4
   281cc:	b	2838c <__assert_fail@plt+0x164c4>
   281d0:	ldr	r0, [r7, #40]	; 0x28
   281d4:	mov	r1, #1
   281d8:	sub	r0, r0, r5
   281dc:	str	r0, [r7, #40]	; 0x28
   281e0:	ldr	r0, [sp, #44]	; 0x2c
   281e4:	strb	r1, [r0, #4]
   281e8:	add	r0, pc, #12
   281ec:	ldr	sl, [sp, #52]	; 0x34
   281f0:	ldr	r7, [sp, #60]	; 0x3c
   281f4:	mov	r9, r4
   281f8:	ldr	pc, [r0, r6, lsl #2]
   281fc:	andeq	r8, r2, ip, lsl #4
   28200:	andeq	r8, r2, r4, ror #5
   28204:	andeq	r8, r2, r0, asr #4
   28208:	andeq	r8, r2, r0, lsr #6
   2820c:	ldrb	r0, [fp, #-36]	; 0xffffffdc
   28210:	mov	r3, #1
   28214:	ubfx	r1, r0, #5, #3
   28218:	and	r0, r0, #31
   2821c:	ldr	r5, [sp, #28]
   28220:	ldr	lr, [sp, #44]	; 0x2c
   28224:	ldr	r2, [r8, r1, lsl #2]
   28228:	orr	r0, r2, r3, lsl r0
   2822c:	str	r0, [r8, r1, lsl #2]
   28230:	ldrb	r0, [lr, #4]
   28234:	cmp	r0, #21
   28238:	bne	28294 <__assert_fail@plt+0x163cc>
   2823c:	b	28510 <__assert_fail@plt+0x16648>
   28240:	ldr	r7, [fp, #-36]	; 0xffffffdc
   28244:	mov	r0, r7
   28248:	bl	11cac <strlen@plt>
   2824c:	cmp	r0, #1
   28250:	bne	29c4c <__assert_fail@plt+0x17d84>
   28254:	ldrb	r0, [r7]
   28258:	mov	r3, #1
   2825c:	ubfx	r1, r0, #5, #3
   28260:	and	r0, r0, #31
   28264:	ldr	r2, [r8, r1, lsl #2]
   28268:	orr	r0, r2, r3, lsl r0
   2826c:	str	r0, [r8, r1, lsl #2]
   28270:	mov	r1, #0
   28274:	ldr	r0, [sp, #20]
   28278:	ldr	r5, [sp, #28]
   2827c:	ldr	lr, [sp, #44]	; 0x2c
   28280:	ldr	r7, [sp, #60]	; 0x3c
   28284:	str	r1, [r0]
   28288:	ldrb	r0, [lr, #4]
   2828c:	cmp	r0, #21
   28290:	beq	28510 <__assert_fail@plt+0x16648>
   28294:	cmp	r0, #2
   28298:	ldr	r0, [sp, #48]	; 0x30
   2829c:	beq	29ae4 <__assert_fail@plt+0x17c1c>
   282a0:	sub	r1, fp, #80	; 0x50
   282a4:	mov	r2, lr
   282a8:	mov	r3, r9
   282ac:	mov	r4, lr
   282b0:	str	r1, [fp, #-36]	; 0xffffffdc
   282b4:	mov	r1, #3
   282b8:	str	r1, [fp, #-40]	; 0xffffffd8
   282bc:	str	r0, [sp]
   282c0:	mov	r0, #0
   282c4:	mov	r1, r5
   282c8:	str	r0, [sp, #4]
   282cc:	sub	r0, fp, #40	; 0x28
   282d0:	bl	2a518 <__assert_fail@plt+0x18650>
   282d4:	ldr	r2, [sp, #48]	; 0x30
   282d8:	cmp	r0, #0
   282dc:	beq	28000 <__assert_fail@plt+0x16138>
   282e0:	b	29ad8 <__assert_fail@plt+0x17c10>
   282e4:	ldr	r1, [r7, #20]
   282e8:	ldr	r0, [sp, #36]	; 0x24
   282ec:	cmp	r0, r1
   282f0:	beq	28474 <__assert_fail@plt+0x165ac>
   282f4:	ldr	r0, [r7]
   282f8:	ldr	r5, [sp, #28]
   282fc:	ldr	lr, [sp, #44]	; 0x2c
   28300:	ldr	r3, [fp, #-36]	; 0xffffffdc
   28304:	add	r2, r1, #1
   28308:	str	r2, [r7, #20]
   2830c:	str	r3, [r0, r1, lsl #2]
   28310:	ldrb	r0, [lr, #4]
   28314:	cmp	r0, #21
   28318:	bne	28294 <__assert_fail@plt+0x163cc>
   2831c:	b	28510 <__assert_fail@plt+0x16648>
   28320:	ldr	r7, [fp, #-36]	; 0xffffffdc
   28324:	mov	r0, r7
   28328:	bl	11cac <strlen@plt>
   2832c:	cmp	r0, #1
   28330:	beq	28254 <__assert_fail@plt+0x1638c>
   28334:	b	29c50 <__assert_fail@plt+0x17d88>
   28338:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2833c:	ldrb	r7, [r0]
   28340:	cmp	r8, #3
   28344:	bne	28184 <__assert_fail@plt+0x162bc>
   28348:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2834c:	ldrb	sl, [r0]
   28350:	cmp	r6, #3
   28354:	cmpne	r6, #0
   28358:	beq	2819c <__assert_fail@plt+0x162d4>
   2835c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   28360:	cmp	r8, #3
   28364:	cmpne	r8, #0
   28368:	bne	281c8 <__assert_fail@plt+0x16300>
   2836c:	ldr	r0, [sp, #52]	; 0x34
   28370:	ldr	r0, [r0, #92]	; 0x5c
   28374:	cmp	r0, #2
   28378:	blt	2838c <__assert_fail@plt+0x164c4>
   2837c:	mov	r0, sl
   28380:	bl	11d18 <btowc@plt>
   28384:	ldr	lr, [sp, #44]	; 0x2c
   28388:	mov	sl, r0
   2838c:	ldr	r8, [sp, #24]
   28390:	cmn	r7, #1
   28394:	mov	r9, #3
   28398:	cmnne	sl, #1
   2839c:	beq	29a3c <__assert_fail@plt+0x17b74>
   283a0:	ldr	r0, [sp, #40]	; 0x28
   283a4:	cmp	r0, #0
   283a8:	beq	283b8 <__assert_fail@plt+0x164f0>
   283ac:	cmp	r7, sl
   283b0:	mov	r9, #11
   283b4:	bhi	29a3c <__assert_fail@plt+0x17b74>
   283b8:	ldr	r0, [sp, #52]	; 0x34
   283bc:	ldr	r0, [r0, #92]	; 0x5c
   283c0:	cmp	r0, #2
   283c4:	blt	283fc <__assert_fail@plt+0x16534>
   283c8:	ldr	r4, [sp, #60]	; 0x3c
   283cc:	ldr	r1, [sp, #32]
   283d0:	ldr	r5, [sp, #28]
   283d4:	ldr	r0, [r4, #32]
   283d8:	cmp	r1, r0
   283dc:	beq	284b4 <__assert_fail@plt+0x165ec>
   283e0:	ldmib	r4, {r6, r9}
   283e4:	str	r7, [r6, r0, lsl #2]
   283e8:	ldr	r0, [r4, #32]
   283ec:	add	r1, r0, #1
   283f0:	str	r1, [r4, #32]
   283f4:	str	sl, [r9, r0, lsl #2]
   283f8:	b	28400 <__assert_fail@plt+0x16538>
   283fc:	ldr	r5, [sp, #28]
   28400:	ldr	r9, [sp, #16]
   28404:	mov	r0, #0
   28408:	cmp	r7, r0
   2840c:	cmpls	r0, sl
   28410:	bls	2842c <__assert_fail@plt+0x16564>
   28414:	add	r0, r0, #1
   28418:	cmp	r0, #256	; 0x100
   2841c:	beq	28450 <__assert_fail@plt+0x16588>
   28420:	cmp	r7, r0
   28424:	cmpls	r0, sl
   28428:	bhi	28414 <__assert_fail@plt+0x1654c>
   2842c:	ubfx	r1, r0, #5, #3
   28430:	and	r3, r0, #31
   28434:	mov	r4, #1
   28438:	ldr	r2, [r8, r1, lsl #2]
   2843c:	orr	r2, r2, r4, lsl r3
   28440:	str	r2, [r8, r1, lsl #2]
   28444:	add	r0, r0, #1
   28448:	cmp	r0, #256	; 0x100
   2844c:	bne	28420 <__assert_fail@plt+0x16558>
   28450:	ldr	r0, [sp, #20]
   28454:	ldr	sl, [sp, #52]	; 0x34
   28458:	ldr	r7, [sp, #60]	; 0x3c
   2845c:	mov	r1, #0
   28460:	str	r1, [r0]
   28464:	ldrb	r0, [lr, #4]
   28468:	cmp	r0, #21
   2846c:	bne	28294 <__assert_fail@plt+0x163cc>
   28470:	b	28510 <__assert_fail@plt+0x16648>
   28474:	ldr	r1, [sp, #36]	; 0x24
   28478:	mov	r0, #1
   2847c:	orr	r1, r0, r1, lsl #1
   28480:	ldr	r0, [r7]
   28484:	str	r1, [sp, #36]	; 0x24
   28488:	lsl	r1, r1, #2
   2848c:	bl	38480 <__assert_fail@plt+0x265b8>
   28490:	cmp	r0, #0
   28494:	beq	29f48 <__assert_fail@plt+0x18080>
   28498:	ldr	r7, [sp, #60]	; 0x3c
   2849c:	ldr	r5, [sp, #28]
   284a0:	ldr	lr, [sp, #44]	; 0x2c
   284a4:	mov	r9, r4
   284a8:	str	r0, [r7]
   284ac:	ldr	r1, [r7, #20]
   284b0:	b	28300 <__assert_fail@plt+0x16438>
   284b4:	ldr	r1, [sp, #32]
   284b8:	mov	r0, #1
   284bc:	orr	r1, r0, r1, lsl #1
   284c0:	ldr	r0, [r4, #4]
   284c4:	lsl	r9, r1, #2
   284c8:	str	r1, [sp, #32]
   284cc:	mov	r1, r9
   284d0:	bl	38480 <__assert_fail@plt+0x265b8>
   284d4:	mov	r6, r0
   284d8:	ldr	r0, [r4, #8]
   284dc:	mov	r1, r9
   284e0:	bl	38480 <__assert_fail@plt+0x265b8>
   284e4:	mov	r9, r0
   284e8:	cmp	r6, #0
   284ec:	cmpne	r9, #0
   284f0:	beq	29f60 <__assert_fail@plt+0x18098>
   284f4:	ldr	r4, [sp, #60]	; 0x3c
   284f8:	stmib	r4, {r6, r9}
   284fc:	ldr	r0, [r4, #32]
   28500:	ldr	r5, [sp, #28]
   28504:	ldr	lr, [sp, #44]	; 0x2c
   28508:	ldr	r8, [sp, #24]
   2850c:	b	283e4 <__assert_fail@plt+0x1651c>
   28510:	ldr	r0, [r5, #40]	; 0x28
   28514:	ldr	ip, [sp, #48]	; 0x30
   28518:	add	r0, r0, r9
   2851c:	str	r0, [r5, #40]	; 0x28
   28520:	ldr	r0, [sp, #56]	; 0x38
   28524:	cmp	r0, #0
   28528:	beq	28564 <__assert_fail@plt+0x1669c>
   2852c:	vld1.32	{d16-d17}, [r8]
   28530:	mov	r0, r8
   28534:	vmvn	q8, q8
   28538:	vst1.32	{d16-d17}, [r0]!
   2853c:	vld1.32	{d16-d17}, [r0]
   28540:	vmvn	q8, q8
   28544:	vst1.32	{d16-d17}, [r0]
   28548:	ldr	r0, [sl, #92]	; 0x5c
   2854c:	cmp	r0, #2
   28550:	bge	28570 <__assert_fail@plt+0x166a8>
   28554:	ldr	r1, [r7, #20]
   28558:	cmp	r1, #0
   2855c:	bne	28620 <__assert_fail@plt+0x16758>
   28560:	b	285fc <__assert_fail@plt+0x16734>
   28564:	ldr	r0, [sl, #92]	; 0x5c
   28568:	cmp	r0, #2
   2856c:	blt	28554 <__assert_fail@plt+0x1668c>
   28570:	ldr	r6, [sl, #60]	; 0x3c
   28574:	ldm	r8, {r1, r2, r3, r7}
   28578:	ldr	r5, [r6]
   2857c:	and	r1, r1, r5
   28580:	ldr	r5, [sp, #28]
   28584:	str	r1, [r8]
   28588:	ldr	r1, [r6, #4]
   2858c:	and	r1, r2, r1
   28590:	str	r1, [r8, #4]
   28594:	ldr	r1, [r6, #8]
   28598:	and	r1, r3, r1
   2859c:	str	r1, [r8, #8]
   285a0:	ldr	r1, [r6, #12]
   285a4:	and	r1, r7, r1
   285a8:	ldr	r7, [sp, #60]	; 0x3c
   285ac:	str	r1, [r8, #12]
   285b0:	ldr	r1, [r8, #16]
   285b4:	ldr	r2, [r6, #16]
   285b8:	and	r1, r1, r2
   285bc:	str	r1, [r8, #16]
   285c0:	ldr	r1, [r6, #20]
   285c4:	ldr	r2, [r8, #20]
   285c8:	and	r1, r2, r1
   285cc:	str	r1, [r8, #20]
   285d0:	ldr	r1, [r6, #24]
   285d4:	ldr	r2, [r8, #24]
   285d8:	and	r1, r2, r1
   285dc:	str	r1, [r8, #24]
   285e0:	ldr	r1, [r6, #28]
   285e4:	ldr	r2, [r8, #28]
   285e8:	and	r1, r2, r1
   285ec:	str	r1, [r8, #28]
   285f0:	ldr	r1, [r7, #20]
   285f4:	cmp	r1, #0
   285f8:	bne	28620 <__assert_fail@plt+0x16758>
   285fc:	ldr	r1, [r7, #24]
   28600:	cmp	r1, #0
   28604:	bne	28620 <__assert_fail@plt+0x16758>
   28608:	ldr	r1, [r7, #28]
   2860c:	cmp	r1, #0
   28610:	bne	28620 <__assert_fail@plt+0x16758>
   28614:	ldr	r1, [r7, #32]
   28618:	cmp	r1, #0
   2861c:	beq	29998 <__assert_fail@plt+0x17ad0>
   28620:	ldrb	r0, [sl, #88]	; 0x58
   28624:	orr	r0, r0, #2
   28628:	strb	r0, [sl, #88]	; 0x58
   2862c:	ldr	r1, [sl, #64]	; 0x40
   28630:	cmp	r1, #31
   28634:	beq	29bbc <__assert_fail@plt+0x17cf4>
   28638:	ldr	r0, [sl, #56]	; 0x38
   2863c:	add	r0, r0, r1, lsl #5
   28640:	add	r2, r1, #1
   28644:	vmov.i32	q8, #0	; 0x00000000
   28648:	mov	r1, #6
   2864c:	str	r2, [sl, #64]	; 0x40
   28650:	mov	r2, #0
   28654:	add	r4, r0, #4
   28658:	str	r2, [r0, #20]
   2865c:	str	r7, [r0, #24]
   28660:	str	r1, [r0, #28]
   28664:	mov	r0, #28
   28668:	mov	r1, r4
   2866c:	vst1.32	{d16-d17}, [r1], r0
   28670:	mvn	r0, #0
   28674:	str	r0, [r1]
   28678:	ldr	r0, [r8]
   2867c:	cmp	r0, #0
   28680:	bne	286d8 <__assert_fail@plt+0x16810>
   28684:	ldr	r0, [r8, #4]
   28688:	cmp	r0, #0
   2868c:	bne	286d8 <__assert_fail@plt+0x16810>
   28690:	ldr	r0, [r8, #8]
   28694:	cmp	r0, #0
   28698:	bne	286d8 <__assert_fail@plt+0x16810>
   2869c:	ldr	r0, [r8, #12]
   286a0:	cmp	r0, #0
   286a4:	bne	286d8 <__assert_fail@plt+0x16810>
   286a8:	ldr	r0, [r8, #16]
   286ac:	cmp	r0, #0
   286b0:	bne	286d8 <__assert_fail@plt+0x16810>
   286b4:	ldr	r0, [r8, #20]
   286b8:	cmp	r0, #0
   286bc:	bne	286d8 <__assert_fail@plt+0x16810>
   286c0:	ldr	r0, [r8, #24]
   286c4:	cmp	r0, #0
   286c8:	bne	286d8 <__assert_fail@plt+0x16810>
   286cc:	ldr	r0, [r8, #28]
   286d0:	cmp	r0, #0
   286d4:	beq	29c58 <__assert_fail@plt+0x17d90>
   286d8:	ldr	r1, [sl, #64]	; 0x40
   286dc:	cmp	r1, #31
   286e0:	beq	29bec <__assert_fail@plt+0x17d24>
   286e4:	ldr	r0, [sl, #56]	; 0x38
   286e8:	add	r0, r0, r1, lsl #5
   286ec:	add	r2, r1, #1
   286f0:	vmov.i32	q8, #0	; 0x00000000
   286f4:	mov	r1, #3
   286f8:	str	r2, [sl, #64]	; 0x40
   286fc:	mov	r2, #0
   28700:	add	r6, r0, #4
   28704:	str	r2, [r0, #20]
   28708:	str	r8, [r0, #24]
   2870c:	str	r1, [r0, #28]
   28710:	mov	r0, #28
   28714:	mov	r1, r6
   28718:	vst1.32	{d16-d17}, [r1], r0
   2871c:	mvn	r0, #0
   28720:	str	r0, [r1]
   28724:	ldr	r1, [sl, #64]	; 0x40
   28728:	cmp	r1, #31
   2872c:	beq	29c1c <__assert_fail@plt+0x17d54>
   28730:	ldr	r0, [sl, #56]	; 0x38
   28734:	add	r7, r0, r1, lsl #5
   28738:	add	r2, r1, #1
   2873c:	mov	r0, #0
   28740:	mov	r1, #10
   28744:	str	r2, [sl, #64]	; 0x40
   28748:	mvn	r2, #0
   2874c:	str	r0, [r7, #4]!
   28750:	add	r3, r7, #20
   28754:	str	r6, [r7, #4]
   28758:	str	r4, [r7, #8]
   2875c:	str	r0, [r7, #12]
   28760:	str	r0, [r7, #16]
   28764:	stm	r3, {r0, r1, r2}
   28768:	str	r7, [r6]
   2876c:	str	r7, [r4]
   28770:	b	28988 <__assert_fail@plt+0x16ac0>
   28774:	mov	r0, #5
   28778:	str	r0, [lr]
   2877c:	ldr	r1, [sl, #64]	; 0x40
   28780:	cmp	r1, #31
   28784:	beq	29cd8 <__assert_fail@plt+0x17e10>
   28788:	ldr	r0, [sl, #56]	; 0x38
   2878c:	add	r4, r0, r1, lsl #5
   28790:	add	r2, r1, #1
   28794:	mov	r0, #0
   28798:	mvn	r3, #0
   2879c:	str	r2, [sl, #64]	; 0x40
   287a0:	str	r0, [r4, #4]!
   287a4:	str	r0, [r4, #8]
   287a8:	str	r0, [r4, #4]
   287ac:	ldm	lr, {r1, r2}
   287b0:	str	r3, [r4, #28]
   287b4:	str	r0, [r4, #16]
   287b8:	str	r0, [r4, #12]
   287bc:	bic	r0, r2, #786432	; 0xc0000
   287c0:	str	r1, [r4, #20]
   287c4:	str	r0, [r4, #24]
   287c8:	mov	r0, #10
   287cc:	str	r0, [lr]
   287d0:	ldr	r1, [sl, #64]	; 0x40
   287d4:	cmp	r1, #31
   287d8:	beq	27af0 <__assert_fail@plt+0x15c28>
   287dc:	ldr	r0, [sl, #56]	; 0x38
   287e0:	add	r5, r0, r1, lsl #5
   287e4:	add	r2, r1, #1
   287e8:	mov	r0, #0
   287ec:	mvn	r3, #0
   287f0:	str	r2, [sl, #64]	; 0x40
   287f4:	str	r0, [r5, #4]!
   287f8:	str	r0, [r5, #8]
   287fc:	str	r0, [r5, #4]
   28800:	ldm	lr, {r1, r2}
   28804:	str	r3, [r5, #28]
   28808:	str	r0, [r5, #16]
   2880c:	str	r0, [r5, #12]
   28810:	bic	r0, r2, #786432	; 0xc0000
   28814:	str	r1, [r5, #20]
   28818:	str	r0, [r5, #24]
   2881c:	ldr	r1, [sl, #64]	; 0x40
   28820:	cmp	r1, #31
   28824:	beq	29dfc <__assert_fail@plt+0x17f34>
   28828:	ldr	r0, [sl, #56]	; 0x38
   2882c:	add	r6, r0, r1, lsl #5
   28830:	add	r2, r1, #1
   28834:	mov	r0, #0
   28838:	cmp	r4, #0
   2883c:	mov	r1, #10
   28840:	str	r2, [sl, #64]	; 0x40
   28844:	mvn	r2, #0
   28848:	str	r0, [r6, #4]!
   2884c:	add	r3, r6, #20
   28850:	stmib	r6, {r4, r5}
   28854:	str	r0, [r6, #12]
   28858:	str	r0, [r6, #16]
   2885c:	stm	r3, {r0, r1, r2}
   28860:	strne	r6, [r4]
   28864:	cmp	r5, #0
   28868:	strne	r6, [r5]
   2886c:	cmpne	r4, #0
   28870:	bne	288d8 <__assert_fail@plt+0x16a10>
   28874:	mov	r0, #12
   28878:	ldr	r1, [sp, #20]
   2887c:	str	r0, [r1]
   28880:	mov	r0, r9
   28884:	sub	sp, fp, #28
   28888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2888c:	ldr	r1, [sl, #64]	; 0x40
   28890:	cmp	r1, #31
   28894:	beq	29d0c <__assert_fail@plt+0x17e44>
   28898:	ldr	r0, [sl, #56]	; 0x38
   2889c:	add	r6, r0, r1, lsl #5
   288a0:	add	r2, r1, #1
   288a4:	mov	r0, #0
   288a8:	mvn	r3, #0
   288ac:	str	r2, [sl, #64]	; 0x40
   288b0:	str	r0, [r6, #4]!
   288b4:	str	r0, [r6, #8]
   288b8:	str	r0, [r6, #4]
   288bc:	ldm	lr, {r1, r2}
   288c0:	str	r3, [r6, #28]
   288c4:	str	r0, [r6, #16]
   288c8:	str	r0, [r6, #12]
   288cc:	bic	r0, r2, #786432	; 0xc0000
   288d0:	str	r1, [r6, #20]
   288d4:	str	r0, [r6, #24]
   288d8:	ldr	r4, [sp, #28]
   288dc:	mov	r0, lr
   288e0:	mov	r2, ip
   288e4:	mov	r1, r4
   288e8:	bl	26b78 <__assert_fail@plt+0x14cb0>
   288ec:	ldr	r1, [r4, #40]	; 0x28
   288f0:	mov	r9, r6
   288f4:	add	r0, r1, r0
   288f8:	str	r0, [r4, #40]	; 0x28
   288fc:	mov	r0, r9
   28900:	sub	sp, fp, #28
   28904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28908:	ldrb	r0, [r7, #4]
   2890c:	cmp	r0, #9
   28910:	bne	29e2c <__assert_fail@plt+0x17f64>
   28914:	mov	lr, r7
   28918:	cmp	r4, #8
   2891c:	bhi	28930 <__assert_fail@plt+0x16a68>
   28920:	ldr	r0, [sl, #84]	; 0x54
   28924:	mov	r1, #1
   28928:	orr	r0, r0, r1, lsl r4
   2892c:	str	r0, [sl, #84]	; 0x54
   28930:	ldr	r1, [sl, #64]	; 0x40
   28934:	ldr	ip, [sp, #48]	; 0x30
   28938:	cmp	r1, #31
   2893c:	beq	29c70 <__assert_fail@plt+0x17da8>
   28940:	ldr	r0, [sl, #56]	; 0x38
   28944:	add	r0, r0, r1, lsl #5
   28948:	add	r2, r1, #1
   2894c:	mov	r1, #0
   28950:	cmp	r9, #0
   28954:	mvn	r3, #0
   28958:	str	r2, [sl, #64]	; 0x40
   2895c:	mov	r2, #17
   28960:	mov	r7, r0
   28964:	str	r1, [r7, #4]!
   28968:	add	r6, r7, #20
   2896c:	str	r9, [r7, #4]
   28970:	str	r1, [r7, #8]
   28974:	str	r1, [r7, #12]
   28978:	str	r1, [r7, #16]
   2897c:	stm	r6, {r1, r2, r3}
   28980:	strne	r7, [r9]
   28984:	str	r4, [r0, #24]
   28988:	mov	r0, lr
   2898c:	mov	r1, r5
   28990:	mov	r2, ip
   28994:	bl	26b78 <__assert_fail@plt+0x14cb0>
   28998:	ldr	r1, [r5, #40]	; 0x28
   2899c:	ldr	ip, [sp, #48]	; 0x30
   289a0:	ldr	lr, [sp, #44]	; 0x2c
   289a4:	mov	r4, #0
   289a8:	add	r0, r1, r0
   289ac:	str	r0, [r5, #40]	; 0x28
   289b0:	and	r0, ip, #16777216	; 0x1000000
   289b4:	str	r0, [sp, #32]
   289b8:	and	r0, ip, #2097152	; 0x200000
   289bc:	str	r0, [sp, #16]
   289c0:	add	r0, sl, #56	; 0x38
   289c4:	str	r0, [sp, #60]	; 0x3c
   289c8:	add	r0, sl, #64	; 0x40
   289cc:	str	r0, [sp, #24]
   289d0:	ldrb	r0, [lr, #4]
   289d4:	mov	r9, r7
   289d8:	cmp	r0, #23
   289dc:	bls	28a04 <__assert_fail@plt+0x16b3c>
   289e0:	b	298e8 <__assert_fail@plt+0x17a20>
   289e4:	ldrb	r1, [lr, #4]
   289e8:	cmp	r1, #23
   289ec:	cmpne	r1, #11
   289f0:	beq	29834 <__assert_fail@plt+0x1796c>
   289f4:	ldrb	r0, [lr, #4]
   289f8:	mov	r9, r7
   289fc:	cmp	r0, #23
   28a00:	bhi	298e8 <__assert_fail@plt+0x17a20>
   28a04:	movw	r2, #2048	; 0x800
   28a08:	mov	r1, #1
   28a0c:	movt	r2, #140	; 0x8c
   28a10:	tst	r2, r1, lsl r0
   28a14:	beq	298e8 <__assert_fail@plt+0x17a20>
   28a18:	cmp	r0, #23
   28a1c:	str	r9, [sp, #40]	; 0x28
   28a20:	bne	28ad0 <__assert_fail@plt+0x16c08>
   28a24:	ldr	r9, [r5, #40]	; 0x28
   28a28:	ldm	lr, {r7, sl}
   28a2c:	mov	r6, r5
   28a30:	mvn	r2, #0
   28a34:	mov	r8, r2
   28a38:	mov	r0, lr
   28a3c:	mov	r1, r6
   28a40:	mov	r2, ip
   28a44:	mov	r5, r6
   28a48:	bl	26b78 <__assert_fail@plt+0x14cb0>
   28a4c:	ldr	r1, [r6, #40]	; 0x28
   28a50:	ldr	lr, [sp, #44]	; 0x2c
   28a54:	add	r0, r1, r0
   28a58:	str	r0, [r6, #40]	; 0x28
   28a5c:	ldrb	r0, [lr, #4]
   28a60:	ldrb	r1, [lr]
   28a64:	cmp	r0, #24
   28a68:	beq	28aec <__assert_fail@plt+0x16c24>
   28a6c:	cmp	r0, #2
   28a70:	beq	29148 <__assert_fail@plt+0x17280>
   28a74:	cmp	r1, #44	; 0x2c
   28a78:	beq	28aec <__assert_fail@plt+0x16c24>
   28a7c:	ldr	ip, [sp, #48]	; 0x30
   28a80:	mvn	r2, #1
   28a84:	cmp	r1, #48	; 0x30
   28a88:	bcc	28a34 <__assert_fail@plt+0x16b6c>
   28a8c:	cmp	r0, #1
   28a90:	bne	28a34 <__assert_fail@plt+0x16b6c>
   28a94:	cmn	r8, #2
   28a98:	beq	28a34 <__assert_fail@plt+0x16b6c>
   28a9c:	cmp	r1, #57	; 0x39
   28aa0:	bhi	28a34 <__assert_fail@plt+0x16b6c>
   28aa4:	cmn	r8, #1
   28aa8:	beq	28ac8 <__assert_fail@plt+0x16c00>
   28aac:	add	r0, r8, r8, lsl #2
   28ab0:	add	r0, r1, r0, lsl #1
   28ab4:	movw	r1, #32816	; 0x8030
   28ab8:	cmp	r0, r1
   28abc:	movge	r0, r1
   28ac0:	sub	r2, r0, #48	; 0x30
   28ac4:	b	28a34 <__assert_fail@plt+0x16b6c>
   28ac8:	sub	r2, r1, #48	; 0x30
   28acc:	b	28a34 <__assert_fail@plt+0x16b6c>
   28ad0:	cmp	r0, #19
   28ad4:	sub	r0, r0, #18
   28ad8:	mvn	sl, #0
   28adc:	clz	r0, r0
   28ae0:	movweq	sl, #1
   28ae4:	lsr	r8, r0, #5
   28ae8:	b	28ca0 <__assert_fail@plt+0x16dd8>
   28aec:	cmn	r8, #1
   28af0:	bne	28b34 <__assert_fail@plt+0x16c6c>
   28af4:	ldr	ip, [sp, #48]	; 0x30
   28af8:	cmp	r1, #44	; 0x2c
   28afc:	moveq	r8, #0
   28b00:	cmpeq	r0, #1
   28b04:	beq	28b90 <__assert_fail@plt+0x16cc8>
   28b08:	ldr	r0, [sp, #20]
   28b0c:	mov	r1, #10
   28b10:	str	r1, [r0]
   28b14:	ldr	r9, [sp, #40]	; 0x28
   28b18:	mov	r7, #0
   28b1c:	mov	r5, r6
   28b20:	clz	r0, r7
   28b24:	cmp	r7, #0
   28b28:	lsr	r0, r0, #5
   28b2c:	beq	29814 <__assert_fail@plt+0x1794c>
   28b30:	b	29824 <__assert_fail@plt+0x1795c>
   28b34:	ldr	ip, [sp, #48]	; 0x30
   28b38:	cmn	r8, #2
   28b3c:	beq	28b54 <__assert_fail@plt+0x16c8c>
   28b40:	cmp	r0, #24
   28b44:	beq	28c4c <__assert_fail@plt+0x16d84>
   28b48:	cmp	r0, #1
   28b4c:	cmpeq	r1, #44	; 0x2c
   28b50:	beq	28b90 <__assert_fail@plt+0x16cc8>
   28b54:	ldr	r1, [sp, #16]
   28b58:	cmp	r1, #0
   28b5c:	beq	29158 <__assert_fail@plt+0x17290>
   28b60:	mov	r0, #1
   28b64:	str	r9, [r6, #40]	; 0x28
   28b68:	mov	r5, r6
   28b6c:	bfi	sl, r0, #0, #8
   28b70:	stm	lr, {r7, sl}
   28b74:	ldr	r9, [sp, #40]	; 0x28
   28b78:	mov	r7, r9
   28b7c:	clz	r0, r7
   28b80:	cmp	r7, #0
   28b84:	lsr	r0, r0, #5
   28b88:	beq	29814 <__assert_fail@plt+0x1794c>
   28b8c:	b	29824 <__assert_fail@plt+0x1795c>
   28b90:	mvn	r2, #0
   28b94:	str	r9, [sp, #56]	; 0x38
   28b98:	mov	r9, r2
   28b9c:	mov	r0, lr
   28ba0:	mov	r1, r6
   28ba4:	mov	r2, ip
   28ba8:	mov	r5, r6
   28bac:	bl	26b78 <__assert_fail@plt+0x14cb0>
   28bb0:	ldr	r1, [r6, #40]	; 0x28
   28bb4:	ldr	lr, [sp, #44]	; 0x2c
   28bb8:	add	r0, r1, r0
   28bbc:	str	r0, [r6, #40]	; 0x28
   28bc0:	ldrb	r0, [lr, #4]
   28bc4:	cmp	r0, #24
   28bc8:	beq	28c34 <__assert_fail@plt+0x16d6c>
   28bcc:	cmp	r0, #2
   28bd0:	beq	295b4 <__assert_fail@plt+0x176ec>
   28bd4:	ldrb	r1, [lr]
   28bd8:	ldr	ip, [sp, #48]	; 0x30
   28bdc:	cmp	r1, #44	; 0x2c
   28be0:	beq	28c38 <__assert_fail@plt+0x16d70>
   28be4:	mvn	r2, #1
   28be8:	cmp	r1, #48	; 0x30
   28bec:	bcc	28b98 <__assert_fail@plt+0x16cd0>
   28bf0:	cmp	r0, #1
   28bf4:	bne	28b98 <__assert_fail@plt+0x16cd0>
   28bf8:	cmn	r9, #2
   28bfc:	beq	28b98 <__assert_fail@plt+0x16cd0>
   28c00:	cmp	r1, #57	; 0x39
   28c04:	bhi	28b98 <__assert_fail@plt+0x16cd0>
   28c08:	cmn	r9, #1
   28c0c:	beq	28c2c <__assert_fail@plt+0x16d64>
   28c10:	add	r0, r9, r9, lsl #2
   28c14:	add	r0, r1, r0, lsl #1
   28c18:	movw	r1, #32816	; 0x8030
   28c1c:	cmp	r0, r1
   28c20:	movge	r0, r1
   28c24:	sub	r2, r0, #48	; 0x30
   28c28:	b	28b98 <__assert_fail@plt+0x16cd0>
   28c2c:	sub	r2, r1, #48	; 0x30
   28c30:	b	28b98 <__assert_fail@plt+0x16cd0>
   28c34:	ldr	ip, [sp, #48]	; 0x30
   28c38:	mov	r2, r9
   28c3c:	ldr	r9, [sp, #56]	; 0x38
   28c40:	cmn	r2, #2
   28c44:	bne	28c58 <__assert_fail@plt+0x16d90>
   28c48:	b	28b54 <__assert_fail@plt+0x16c8c>
   28c4c:	mov	r2, r8
   28c50:	cmn	r2, #2
   28c54:	beq	28b54 <__assert_fail@plt+0x16c8c>
   28c58:	ldr	r9, [sp, #40]	; 0x28
   28c5c:	cmp	r8, r2
   28c60:	mov	r1, #0
   28c64:	mov	r5, r6
   28c68:	movwle	r1, #1
   28c6c:	cmp	r0, #24
   28c70:	bne	29574 <__assert_fail@plt+0x176ac>
   28c74:	add	r0, r2, #1
   28c78:	mov	sl, r2
   28c7c:	clz	r0, r0
   28c80:	lsr	r0, r0, #5
   28c84:	orrs	r0, r1, r0
   28c88:	beq	29574 <__assert_fail@plt+0x176ac>
   28c8c:	cmn	sl, #1
   28c90:	mov	r0, sl
   28c94:	moveq	r0, r8
   28c98:	cmp	r0, #32768	; 0x8000
   28c9c:	bge	29744 <__assert_fail@plt+0x1787c>
   28ca0:	mov	r0, lr
   28ca4:	mov	r1, r5
   28ca8:	mov	r2, ip
   28cac:	bl	26b78 <__assert_fail@plt+0x14cb0>
   28cb0:	ldr	r1, [r5, #40]	; 0x28
   28cb4:	mov	r7, #0
   28cb8:	cmp	r9, #0
   28cbc:	add	r0, r1, r0
   28cc0:	str	r0, [r5, #40]	; 0x28
   28cc4:	beq	29170 <__assert_fail@plt+0x172a8>
   28cc8:	ldr	ip, [sp, #48]	; 0x30
   28ccc:	orrs	r0, sl, r8
   28cd0:	beq	2918c <__assert_fail@plt+0x172c4>
   28cd4:	mov	r0, #0
   28cd8:	cmp	r8, #1
   28cdc:	mov	r7, r9
   28ce0:	str	r0, [sp, #36]	; 0x24
   28ce4:	ldr	lr, [sp, #44]	; 0x2c
   28ce8:	ldr	r5, [sp, #24]
   28cec:	bge	29250 <__assert_fail@plt+0x17388>
   28cf0:	ldrb	r0, [r7, #24]
   28cf4:	cmp	r0, #17
   28cf8:	bne	28d6c <__assert_fail@plt+0x16ea4>
   28cfc:	ldr	r0, [r7, #20]
   28d00:	mov	r2, r7
   28d04:	mov	r1, r2
   28d08:	ldr	r2, [r2, #4]
   28d0c:	cmp	r2, #0
   28d10:	bne	28d04 <__assert_fail@plt+0x16e3c>
   28d14:	ldr	r2, [r1, #8]
   28d18:	cmp	r2, #0
   28d1c:	bne	28d04 <__assert_fail@plt+0x16e3c>
   28d20:	ldr	r2, [r1, #24]
   28d24:	uxtb	r3, r2
   28d28:	cmp	r3, #17
   28d2c:	bne	28d40 <__assert_fail@plt+0x16e78>
   28d30:	ldr	r3, [r1, #20]
   28d34:	cmp	r3, r0
   28d38:	orreq	r2, r2, #524288	; 0x80000
   28d3c:	streq	r2, [r1, #24]
   28d40:	ldr	r3, [r1]
   28d44:	cmp	r3, #0
   28d48:	beq	28d6c <__assert_fail@plt+0x16ea4>
   28d4c:	ldr	r2, [r3, #8]
   28d50:	cmp	r2, r1
   28d54:	mov	r1, r3
   28d58:	beq	28d20 <__assert_fail@plt+0x16e58>
   28d5c:	cmp	r2, #0
   28d60:	mov	r1, r3
   28d64:	beq	28d20 <__assert_fail@plt+0x16e58>
   28d68:	b	28d04 <__assert_fail@plt+0x16e3c>
   28d6c:	ldr	r1, [r5]
   28d70:	cmn	sl, #1
   28d74:	mov	r6, #10
   28d78:	movweq	r6, #11
   28d7c:	cmp	r1, #31
   28d80:	beq	29518 <__assert_fail@plt+0x17650>
   28d84:	ldr	r0, [sp, #60]	; 0x3c
   28d88:	ldr	r0, [r0]
   28d8c:	add	r9, r0, r1, lsl #5
   28d90:	add	r2, r1, #1
   28d94:	mvn	r0, #0
   28d98:	str	r2, [r5]
   28d9c:	str	r4, [r9, #4]!
   28da0:	str	r7, [r9, #4]
   28da4:	str	r4, [r9, #8]
   28da8:	str	r4, [r9, #12]
   28dac:	str	r4, [r9, #16]
   28db0:	str	r4, [r9, #20]
   28db4:	str	r6, [r9, #24]
   28db8:	str	r0, [r9, #28]
   28dbc:	add	r0, r8, #2
   28dc0:	str	r9, [r7]
   28dc4:	cmp	r0, sl
   28dc8:	bgt	290c8 <__assert_fail@plt+0x17200>
   28dcc:	str	sl, [sp, #52]	; 0x34
   28dd0:	mov	sl, r9
   28dd4:	ldr	r1, [r5]
   28dd8:	str	r0, [sp, #56]	; 0x38
   28ddc:	cmp	r1, #31
   28de0:	beq	29000 <__assert_fail@plt+0x17138>
   28de4:	ldr	r0, [sp, #60]	; 0x3c
   28de8:	ldr	r0, [r0]
   28dec:	add	r8, r0, r1, lsl #5
   28df0:	add	r3, r1, #1
   28df4:	add	r2, r7, #20
   28df8:	sub	r6, fp, #80	; 0x50
   28dfc:	str	r3, [r5]
   28e00:	str	r4, [r8, #4]!
   28e04:	str	r4, [r8, #8]
   28e08:	str	r4, [r8, #4]
   28e0c:	ldm	r2, {r0, r1}
   28e10:	mvn	r2, #0
   28e14:	str	r2, [r8, #28]
   28e18:	str	r4, [r8, #16]
   28e1c:	str	r4, [r8, #12]
   28e20:	str	r0, [r8, #20]
   28e24:	bic	r0, r1, #786432	; 0xc0000
   28e28:	str	r0, [r8, #24]
   28e2c:	mov	r0, r8
   28e30:	str	r8, [fp, #-80]	; 0xffffffb0
   28e34:	str	r9, [r0]
   28e38:	ldr	r0, [r6]
   28e3c:	ldr	r1, [r0, #24]
   28e40:	orr	r1, r1, #262144	; 0x40000
   28e44:	str	r1, [r0, #24]
   28e48:	ldr	r0, [r7, #4]
   28e4c:	ldr	r9, [r6]
   28e50:	cmp	r0, #0
   28e54:	beq	28eb8 <__assert_fail@plt+0x16ff0>
   28e58:	add	r6, r9, #4
   28e5c:	mov	r7, r0
   28e60:	ldr	r1, [r5]
   28e64:	cmp	r1, #31
   28e68:	beq	28ef8 <__assert_fail@plt+0x17030>
   28e6c:	ldr	r0, [sp, #60]	; 0x3c
   28e70:	ldr	r0, [r0]
   28e74:	add	r0, r0, r1, lsl #5
   28e78:	add	r3, r1, #1
   28e7c:	add	r2, r7, #20
   28e80:	str	r3, [r5]
   28e84:	mvn	r3, #0
   28e88:	str	r4, [r0, #4]!
   28e8c:	str	r4, [r0, #8]
   28e90:	str	r4, [r0, #4]
   28e94:	ldm	r2, {r1, r2}
   28e98:	str	r3, [r0, #28]
   28e9c:	str	r4, [r0, #16]
   28ea0:	str	r4, [r0, #12]
   28ea4:	str	r1, [r0, #20]
   28ea8:	bic	r1, r2, #786432	; 0xc0000
   28eac:	str	r1, [r0, #24]
   28eb0:	str	r0, [r6]
   28eb4:	b	28e34 <__assert_fail@plt+0x16f6c>
   28eb8:	mov	r1, #0
   28ebc:	mov	r0, r7
   28ec0:	ldr	r7, [r7, #8]
   28ec4:	cmp	r7, r1
   28ec8:	cmpne	r7, #0
   28ecc:	bne	28ee8 <__assert_fail@plt+0x17020>
   28ed0:	ldr	r7, [r0]
   28ed4:	ldr	r9, [r9]
   28ed8:	mov	r1, r0
   28edc:	cmp	r7, #0
   28ee0:	bne	28ebc <__assert_fail@plt+0x16ff4>
   28ee4:	b	28f2c <__assert_fail@plt+0x17064>
   28ee8:	add	r6, r9, #8
   28eec:	ldr	r1, [r5]
   28ef0:	cmp	r1, #31
   28ef4:	bne	28e6c <__assert_fail@plt+0x16fa4>
   28ef8:	mov	r0, #996	; 0x3e4
   28efc:	bl	38450 <__assert_fail@plt+0x26588>
   28f00:	cmp	r0, #0
   28f04:	beq	29074 <__assert_fail@plt+0x171ac>
   28f08:	ldr	r2, [sp, #60]	; 0x3c
   28f0c:	ldr	ip, [sp, #48]	; 0x30
   28f10:	ldr	lr, [sp, #44]	; 0x2c
   28f14:	ldr	r1, [r2]
   28f18:	str	r1, [r0]
   28f1c:	mov	r1, #0
   28f20:	str	r0, [r2]
   28f24:	str	r1, [r5]
   28f28:	b	28e74 <__assert_fail@plt+0x16fac>
   28f2c:	mov	r7, r8
   28f30:	ldr	r1, [r5]
   28f34:	cmp	r1, #31
   28f38:	beq	29090 <__assert_fail@plt+0x171c8>
   28f3c:	ldr	r0, [sp, #60]	; 0x3c
   28f40:	ldr	r0, [r0]
   28f44:	add	r6, r0, r1, lsl #5
   28f48:	add	r2, r1, #1
   28f4c:	mov	r0, #16
   28f50:	cmp	r7, #0
   28f54:	str	r2, [r5]
   28f58:	str	r4, [r6, #4]!
   28f5c:	str	sl, [r6, #4]
   28f60:	str	r7, [r6, #8]
   28f64:	str	r4, [r6, #12]
   28f68:	str	r4, [r6, #16]
   28f6c:	str	r4, [r6, #20]
   28f70:	str	r0, [r6, #24]
   28f74:	mvn	r0, #0
   28f78:	str	r0, [r6, #28]
   28f7c:	str	r6, [sl]
   28f80:	beq	297ec <__assert_fail@plt+0x17924>
   28f84:	str	r6, [r7]
   28f88:	ldr	r1, [r5]
   28f8c:	cmp	r1, #31
   28f90:	beq	29034 <__assert_fail@plt+0x1716c>
   28f94:	ldr	r0, [sp, #60]	; 0x3c
   28f98:	ldr	r0, [r0]
   28f9c:	add	sl, r0, r1, lsl #5
   28fa0:	add	r2, r1, #1
   28fa4:	mov	r0, #10
   28fa8:	ldr	r1, [sp, #56]	; 0x38
   28fac:	str	r2, [r5]
   28fb0:	str	r4, [sl, #4]!
   28fb4:	str	r6, [sl, #4]
   28fb8:	str	r4, [sl, #8]
   28fbc:	str	r4, [sl, #12]
   28fc0:	str	r4, [sl, #16]
   28fc4:	str	r4, [sl, #20]
   28fc8:	str	r0, [sl, #24]
   28fcc:	mvn	r0, #0
   28fd0:	str	r0, [sl, #28]
   28fd4:	ldr	r0, [sp, #52]	; 0x34
   28fd8:	str	sl, [r6]
   28fdc:	cmp	r1, r0
   28fe0:	bge	290c4 <__assert_fail@plt+0x171fc>
   28fe4:	ldr	r9, [r7]
   28fe8:	mov	r0, r1
   28fec:	add	r0, r1, #1
   28ff0:	ldr	r1, [r5]
   28ff4:	str	r0, [sp, #56]	; 0x38
   28ff8:	cmp	r1, #31
   28ffc:	bne	28de4 <__assert_fail@plt+0x16f1c>
   29000:	mov	r0, #996	; 0x3e4
   29004:	bl	38450 <__assert_fail@plt+0x26588>
   29008:	cmp	r0, #0
   2900c:	beq	29068 <__assert_fail@plt+0x171a0>
   29010:	ldr	r2, [sp, #60]	; 0x3c
   29014:	ldr	ip, [sp, #48]	; 0x30
   29018:	ldr	lr, [sp, #44]	; 0x2c
   2901c:	ldr	r1, [r2]
   29020:	str	r1, [r0]
   29024:	mov	r1, #0
   29028:	str	r0, [r2]
   2902c:	str	r1, [r5]
   29030:	b	28dec <__assert_fail@plt+0x16f24>
   29034:	mov	r0, #996	; 0x3e4
   29038:	bl	38450 <__assert_fail@plt+0x26588>
   2903c:	ldr	lr, [sp, #44]	; 0x2c
   29040:	ldr	ip, [sp, #48]	; 0x30
   29044:	cmp	r0, #0
   29048:	beq	297ec <__assert_fail@plt+0x17924>
   2904c:	ldr	r2, [sp, #60]	; 0x3c
   29050:	ldr	r1, [r2]
   29054:	str	r1, [r0]
   29058:	mov	r1, #0
   2905c:	str	r0, [r2]
   29060:	str	r1, [r5]
   29064:	b	28f9c <__assert_fail@plt+0x170d4>
   29068:	mov	r7, #0
   2906c:	str	r7, [fp, #-80]	; 0xffffffb0
   29070:	b	2907c <__assert_fail@plt+0x171b4>
   29074:	mov	r7, #0
   29078:	str	r7, [r6]
   2907c:	ldr	ip, [sp, #48]	; 0x30
   29080:	ldr	lr, [sp, #44]	; 0x2c
   29084:	ldr	r1, [r5]
   29088:	cmp	r1, #31
   2908c:	bne	28f3c <__assert_fail@plt+0x17074>
   29090:	mov	r0, #996	; 0x3e4
   29094:	bl	38450 <__assert_fail@plt+0x26588>
   29098:	ldr	lr, [sp, #44]	; 0x2c
   2909c:	ldr	ip, [sp, #48]	; 0x30
   290a0:	cmp	r0, #0
   290a4:	beq	297ec <__assert_fail@plt+0x17924>
   290a8:	ldr	r2, [sp, #60]	; 0x3c
   290ac:	ldr	r1, [r2]
   290b0:	str	r1, [r0]
   290b4:	mov	r1, #0
   290b8:	str	r0, [r2]
   290bc:	str	r1, [r5]
   290c0:	b	28f44 <__assert_fail@plt+0x1707c>
   290c4:	mov	r9, sl
   290c8:	ldr	r6, [sp, #36]	; 0x24
   290cc:	ldr	r8, [sp, #28]
   290d0:	cmp	r6, #0
   290d4:	beq	2912c <__assert_fail@plt+0x17264>
   290d8:	ldr	r1, [r5]
   290dc:	cmp	r1, #31
   290e0:	beq	29580 <__assert_fail@plt+0x176b8>
   290e4:	ldr	r0, [sp, #60]	; 0x3c
   290e8:	ldr	r0, [r0]
   290ec:	add	r7, r0, r1, lsl #5
   290f0:	add	r2, r1, #1
   290f4:	mov	r0, #0
   290f8:	mov	r1, #16
   290fc:	str	r2, [r5]
   29100:	str	r0, [r7, #4]!
   29104:	stmib	r7, {r6, r9}
   29108:	str	r0, [r7, #12]
   2910c:	str	r0, [r7, #16]
   29110:	str	r0, [r7, #20]
   29114:	str	r1, [r7, #24]
   29118:	mvn	r1, #0
   2911c:	str	r1, [r7, #28]
   29120:	str	r7, [r6]
   29124:	str	r7, [r9]
   29128:	b	29134 <__assert_fail@plt+0x1726c>
   2912c:	mov	r0, #0
   29130:	mov	r7, r9
   29134:	mov	r5, r8
   29138:	ldr	r1, [sp, #32]
   2913c:	cmp	r1, #0
   29140:	beq	289f4 <__assert_fail@plt+0x16b2c>
   29144:	b	289e4 <__assert_fail@plt+0x16b1c>
   29148:	ldr	ip, [sp, #48]	; 0x30
   2914c:	ldr	r1, [sp, #16]
   29150:	cmp	r1, #0
   29154:	bne	28b60 <__assert_fail@plt+0x16c98>
   29158:	ldr	r1, [sp, #20]
   2915c:	cmp	r0, #2
   29160:	mov	r0, #10
   29164:	movweq	r0, #9
   29168:	str	r0, [r1]
   2916c:	b	28b14 <__assert_fail@plt+0x16c4c>
   29170:	ldr	ip, [sp, #48]	; 0x30
   29174:	ldr	lr, [sp, #44]	; 0x2c
   29178:	clz	r0, r7
   2917c:	cmp	r7, #0
   29180:	lsr	r0, r0, #5
   29184:	beq	29814 <__assert_fail@plt+0x1794c>
   29188:	b	29824 <__assert_fail@plt+0x1795c>
   2918c:	ldr	lr, [sp, #44]	; 0x2c
   29190:	mov	r0, r9
   29194:	mov	r6, r0
   29198:	ldr	r0, [r0, #4]
   2919c:	cmp	r0, #0
   291a0:	bne	29194 <__assert_fail@plt+0x172cc>
   291a4:	ldr	r0, [r6, #8]
   291a8:	cmp	r0, #0
   291ac:	bne	29194 <__assert_fail@plt+0x172cc>
   291b0:	ldr	r0, [r6, #24]
   291b4:	movw	r1, #255	; 0xff
   291b8:	movt	r1, #4
   291bc:	and	r0, r0, r1
   291c0:	cmp	r0, #3
   291c4:	beq	291f8 <__assert_fail@plt+0x17330>
   291c8:	cmp	r0, #6
   291cc:	bne	2920c <__assert_fail@plt+0x17344>
   291d0:	ldr	r5, [r6, #20]
   291d4:	ldr	r0, [r5]
   291d8:	bl	17c10 <__assert_fail@plt+0x5d48>
   291dc:	ldr	r0, [r5, #4]
   291e0:	bl	17c10 <__assert_fail@plt+0x5d48>
   291e4:	ldr	r0, [r5, #8]
   291e8:	bl	17c10 <__assert_fail@plt+0x5d48>
   291ec:	ldr	r0, [r5, #12]
   291f0:	bl	17c10 <__assert_fail@plt+0x5d48>
   291f4:	b	291fc <__assert_fail@plt+0x17334>
   291f8:	ldr	r5, [r6, #20]
   291fc:	mov	r0, r5
   29200:	bl	17c10 <__assert_fail@plt+0x5d48>
   29204:	ldr	ip, [sp, #48]	; 0x30
   29208:	ldr	lr, [sp, #44]	; 0x2c
   2920c:	ldr	r1, [r6]
   29210:	cmp	r1, #0
   29214:	beq	29238 <__assert_fail@plt+0x17370>
   29218:	ldr	r0, [r1, #8]
   2921c:	cmp	r0, r6
   29220:	mov	r6, r1
   29224:	beq	291b0 <__assert_fail@plt+0x172e8>
   29228:	cmp	r0, #0
   2922c:	mov	r6, r1
   29230:	beq	291b0 <__assert_fail@plt+0x172e8>
   29234:	b	29194 <__assert_fail@plt+0x172cc>
   29238:	ldr	r5, [sp, #28]
   2923c:	clz	r0, r7
   29240:	cmp	r7, #0
   29244:	lsr	r0, r0, #5
   29248:	beq	29814 <__assert_fail@plt+0x1794c>
   2924c:	b	29824 <__assert_fail@plt+0x1795c>
   29250:	mov	r3, r9
   29254:	str	sl, [sp, #52]	; 0x34
   29258:	str	r9, [sp, #36]	; 0x24
   2925c:	beq	2954c <__assert_fail@plt+0x17684>
   29260:	ldr	sl, [sp, #40]	; 0x28
   29264:	ldr	r0, [sl]
   29268:	mov	r3, sl
   2926c:	str	r0, [sp, #36]	; 0x24
   29270:	mov	r0, #2
   29274:	ldr	r1, [r5]
   29278:	str	r0, [sp, #56]	; 0x38
   2927c:	cmp	r1, #31
   29280:	beq	2945c <__assert_fail@plt+0x17594>
   29284:	ldr	r0, [sp, #60]	; 0x3c
   29288:	ldr	r0, [r0]
   2928c:	add	r6, r0, r1, lsl #5
   29290:	add	r2, r3, #20
   29294:	mov	r9, r3
   29298:	add	r3, r1, #1
   2929c:	sub	r7, fp, #80	; 0x50
   292a0:	str	r3, [r5]
   292a4:	str	r4, [r6, #4]!
   292a8:	str	r4, [r6, #8]
   292ac:	str	r4, [r6, #4]
   292b0:	ldm	r2, {r0, r1}
   292b4:	mvn	r2, #0
   292b8:	str	r2, [r6, #28]
   292bc:	str	r4, [r6, #16]
   292c0:	str	r4, [r6, #12]
   292c4:	str	r0, [r6, #20]
   292c8:	bic	r0, r1, #786432	; 0xc0000
   292cc:	str	r0, [r6, #24]
   292d0:	mov	r0, r6
   292d4:	str	r6, [fp, #-80]	; 0xffffffb0
   292d8:	ldr	r1, [sp, #36]	; 0x24
   292dc:	str	r1, [r0]
   292e0:	ldr	r0, [r7]
   292e4:	ldr	r1, [r0, #24]
   292e8:	orr	r1, r1, #262144	; 0x40000
   292ec:	str	r1, [r0, #24]
   292f0:	ldr	r0, [r9, #4]
   292f4:	ldr	r1, [r7]
   292f8:	cmp	r0, #0
   292fc:	str	r1, [sp, #36]	; 0x24
   29300:	beq	29364 <__assert_fail@plt+0x1749c>
   29304:	add	r7, r1, #4
   29308:	mov	r9, r0
   2930c:	ldr	r1, [r5]
   29310:	cmp	r1, #31
   29314:	beq	293b0 <__assert_fail@plt+0x174e8>
   29318:	ldr	r0, [sp, #60]	; 0x3c
   2931c:	ldr	r0, [r0]
   29320:	add	r0, r0, r1, lsl #5
   29324:	add	r3, r1, #1
   29328:	add	r2, r9, #20
   2932c:	str	r3, [r5]
   29330:	mvn	r3, #0
   29334:	str	r4, [r0, #4]!
   29338:	str	r4, [r0, #8]
   2933c:	str	r4, [r0, #4]
   29340:	ldm	r2, {r1, r2}
   29344:	str	r3, [r0, #28]
   29348:	str	r4, [r0, #16]
   2934c:	str	r4, [r0, #12]
   29350:	str	r1, [r0, #20]
   29354:	bic	r1, r2, #786432	; 0xc0000
   29358:	str	r1, [r0, #24]
   2935c:	str	r0, [r7]
   29360:	b	292d8 <__assert_fail@plt+0x17410>
   29364:	mov	r1, #0
   29368:	mov	r0, r9
   2936c:	ldr	r9, [r9, #8]
   29370:	cmp	r9, r1
   29374:	cmpne	r9, #0
   29378:	bne	2939c <__assert_fail@plt+0x174d4>
   2937c:	ldr	r1, [sp, #36]	; 0x24
   29380:	ldr	r9, [r0]
   29384:	ldr	r1, [r1]
   29388:	cmp	r9, #0
   2938c:	str	r1, [sp, #36]	; 0x24
   29390:	mov	r1, r0
   29394:	bne	29368 <__assert_fail@plt+0x174a0>
   29398:	b	293e4 <__assert_fail@plt+0x1751c>
   2939c:	ldr	r0, [sp, #36]	; 0x24
   293a0:	add	r7, r0, #8
   293a4:	ldr	r1, [r5]
   293a8:	cmp	r1, #31
   293ac:	bne	29318 <__assert_fail@plt+0x17450>
   293b0:	mov	r0, #996	; 0x3e4
   293b4:	bl	38450 <__assert_fail@plt+0x26588>
   293b8:	cmp	r0, #0
   293bc:	beq	294f8 <__assert_fail@plt+0x17630>
   293c0:	ldr	r2, [sp, #60]	; 0x3c
   293c4:	ldr	ip, [sp, #48]	; 0x30
   293c8:	ldr	lr, [sp, #44]	; 0x2c
   293cc:	ldr	r1, [r2]
   293d0:	str	r1, [r0]
   293d4:	mov	r1, #0
   293d8:	str	r0, [r2]
   293dc:	str	r1, [r5]
   293e0:	b	29320 <__assert_fail@plt+0x17458>
   293e4:	mov	r3, r6
   293e8:	ldr	r1, [r5]
   293ec:	cmp	r1, #31
   293f0:	beq	294bc <__assert_fail@plt+0x175f4>
   293f4:	ldr	r0, [sp, #60]	; 0x3c
   293f8:	ldr	r0, [r0]
   293fc:	add	r2, r1, #1
   29400:	add	r1, r0, r1, lsl #5
   29404:	mov	r0, #16
   29408:	cmp	r3, #0
   2940c:	str	r2, [r5]
   29410:	str	r4, [r1, #4]!
   29414:	str	sl, [r1, #4]
   29418:	str	r3, [r1, #8]
   2941c:	str	r4, [r1, #12]
   29420:	str	r4, [r1, #16]
   29424:	str	r4, [r1, #20]
   29428:	str	r0, [r1, #24]
   2942c:	mvn	r0, #0
   29430:	str	r1, [sp, #36]	; 0x24
   29434:	str	r0, [r1, #28]
   29438:	str	r1, [sl]
   2943c:	beq	297ec <__assert_fail@plt+0x17924>
   29440:	ldr	r1, [sp, #56]	; 0x38
   29444:	ldr	sl, [sp, #36]	; 0x24
   29448:	add	r0, r1, #1
   2944c:	cmp	r1, r8
   29450:	str	sl, [r3]
   29454:	bne	29274 <__assert_fail@plt+0x173ac>
   29458:	b	2954c <__assert_fail@plt+0x17684>
   2945c:	mov	r0, #996	; 0x3e4
   29460:	mov	r6, r3
   29464:	bl	38450 <__assert_fail@plt+0x26588>
   29468:	cmp	r0, #0
   2946c:	beq	2949c <__assert_fail@plt+0x175d4>
   29470:	ldr	r2, [sp, #60]	; 0x3c
   29474:	ldr	r5, [sp, #24]
   29478:	ldr	ip, [sp, #48]	; 0x30
   2947c:	ldr	lr, [sp, #44]	; 0x2c
   29480:	mov	r3, r6
   29484:	ldr	r1, [r2]
   29488:	str	r1, [r0]
   2948c:	mov	r1, #0
   29490:	str	r0, [r2]
   29494:	str	r1, [r5]
   29498:	b	2928c <__assert_fail@plt+0x173c4>
   2949c:	ldr	ip, [sp, #48]	; 0x30
   294a0:	ldr	lr, [sp, #44]	; 0x2c
   294a4:	ldr	r5, [sp, #24]
   294a8:	mov	r3, #0
   294ac:	str	r3, [fp, #-80]	; 0xffffffb0
   294b0:	ldr	r1, [r5]
   294b4:	cmp	r1, #31
   294b8:	bne	293f4 <__assert_fail@plt+0x1752c>
   294bc:	mov	r0, #996	; 0x3e4
   294c0:	mov	r6, r3
   294c4:	bl	38450 <__assert_fail@plt+0x26588>
   294c8:	ldr	lr, [sp, #44]	; 0x2c
   294cc:	ldr	ip, [sp, #48]	; 0x30
   294d0:	cmp	r0, #0
   294d4:	beq	297ec <__assert_fail@plt+0x17924>
   294d8:	ldr	r2, [sp, #60]	; 0x3c
   294dc:	mov	r3, r6
   294e0:	ldr	r1, [r2]
   294e4:	str	r1, [r0]
   294e8:	mov	r1, #0
   294ec:	str	r0, [r2]
   294f0:	str	r1, [r5]
   294f4:	b	293fc <__assert_fail@plt+0x17534>
   294f8:	ldr	ip, [sp, #48]	; 0x30
   294fc:	ldr	lr, [sp, #44]	; 0x2c
   29500:	mov	r3, #0
   29504:	str	r3, [r7]
   29508:	ldr	r1, [r5]
   2950c:	cmp	r1, #31
   29510:	bne	293f4 <__assert_fail@plt+0x1752c>
   29514:	b	294bc <__assert_fail@plt+0x175f4>
   29518:	mov	r0, #996	; 0x3e4
   2951c:	bl	38450 <__assert_fail@plt+0x26588>
   29520:	ldr	lr, [sp, #44]	; 0x2c
   29524:	ldr	ip, [sp, #48]	; 0x30
   29528:	cmp	r0, #0
   2952c:	beq	297ec <__assert_fail@plt+0x17924>
   29530:	ldr	r2, [sp, #60]	; 0x3c
   29534:	ldr	r1, [r2]
   29538:	str	r1, [r0]
   2953c:	mov	r1, #0
   29540:	str	r0, [r2]
   29544:	str	r1, [r5]
   29548:	b	28d8c <__assert_fail@plt+0x16ec4>
   2954c:	ldr	sl, [sp, #52]	; 0x34
   29550:	mov	r0, #0
   29554:	cmp	r8, sl
   29558:	bne	295cc <__assert_fail@plt+0x17704>
   2955c:	ldr	r7, [sp, #36]	; 0x24
   29560:	ldr	r5, [sp, #28]
   29564:	ldr	r1, [sp, #32]
   29568:	cmp	r1, #0
   2956c:	beq	289f4 <__assert_fail@plt+0x16b2c>
   29570:	b	289e4 <__assert_fail@plt+0x16b1c>
   29574:	ldr	r0, [sp, #20]
   29578:	mov	r1, #10
   2957c:	b	2974c <__assert_fail@plt+0x17884>
   29580:	mov	r0, #996	; 0x3e4
   29584:	bl	38450 <__assert_fail@plt+0x26588>
   29588:	cmp	r0, #0
   2958c:	beq	29768 <__assert_fail@plt+0x178a0>
   29590:	ldr	r2, [sp, #60]	; 0x3c
   29594:	ldr	ip, [sp, #48]	; 0x30
   29598:	ldr	lr, [sp, #44]	; 0x2c
   2959c:	ldr	r1, [r2]
   295a0:	str	r1, [r0]
   295a4:	mov	r1, #0
   295a8:	str	r0, [r2]
   295ac:	str	r1, [r5]
   295b0:	b	290ec <__assert_fail@plt+0x17224>
   295b4:	ldr	ip, [sp, #48]	; 0x30
   295b8:	ldr	r9, [sp, #56]	; 0x38
   295bc:	ldr	r1, [sp, #16]
   295c0:	cmp	r1, #0
   295c4:	bne	28b60 <__assert_fail@plt+0x16c98>
   295c8:	b	29158 <__assert_fail@plt+0x17290>
   295cc:	mov	r6, r3
   295d0:	ldr	r1, [r5]
   295d4:	ldr	r9, [r6], #20
   295d8:	cmp	r1, #31
   295dc:	beq	29790 <__assert_fail@plt+0x178c8>
   295e0:	ldr	r0, [sp, #60]	; 0x3c
   295e4:	ldr	r0, [r0]
   295e8:	add	r7, r0, r1, lsl #5
   295ec:	add	r2, r1, #1
   295f0:	str	r2, [r5]
   295f4:	mvn	r2, #0
   295f8:	str	r4, [r7, #4]!
   295fc:	str	r4, [r7, #8]
   29600:	str	r4, [r7, #4]
   29604:	ldm	r6, {r0, r1}
   29608:	str	r2, [r7, #28]
   2960c:	str	r4, [r7, #16]
   29610:	str	r4, [r7, #12]
   29614:	sub	r6, fp, #80	; 0x50
   29618:	str	r0, [r7, #20]
   2961c:	bic	r0, r1, #786432	; 0xc0000
   29620:	str	r0, [r7, #24]
   29624:	mov	r0, r7
   29628:	str	r7, [fp, #-80]	; 0xffffffb0
   2962c:	str	r9, [r0]
   29630:	ldr	r0, [r6]
   29634:	ldr	r1, [r0, #24]
   29638:	orr	r1, r1, #262144	; 0x40000
   2963c:	str	r1, [r0, #24]
   29640:	ldr	r0, [r3, #4]
   29644:	ldr	r9, [r6]
   29648:	cmp	r0, #0
   2964c:	beq	296bc <__assert_fail@plt+0x177f4>
   29650:	add	r2, r9, #4
   29654:	mov	r6, r0
   29658:	ldr	r1, [r5]
   2965c:	str	r2, [sp, #56]	; 0x38
   29660:	cmp	r1, #31
   29664:	beq	29700 <__assert_fail@plt+0x17838>
   29668:	ldr	r0, [sp, #60]	; 0x3c
   2966c:	ldr	r0, [r0]
   29670:	add	r0, r0, r1, lsl #5
   29674:	add	r3, r1, #1
   29678:	add	r2, r6, #20
   2967c:	str	r3, [r5]
   29680:	mvn	r3, #0
   29684:	str	r4, [r0, #4]!
   29688:	str	r4, [r0, #8]
   2968c:	str	r4, [r0, #4]
   29690:	ldm	r2, {r1, r2}
   29694:	str	r3, [r0, #28]
   29698:	mov	r3, r6
   2969c:	ldr	r6, [sp, #56]	; 0x38
   296a0:	str	r4, [r0, #16]
   296a4:	str	r4, [r0, #12]
   296a8:	str	r1, [r0, #20]
   296ac:	bic	r1, r2, #786432	; 0xc0000
   296b0:	str	r1, [r0, #24]
   296b4:	str	r0, [r6]
   296b8:	b	2962c <__assert_fail@plt+0x17764>
   296bc:	mov	r1, #0
   296c0:	ldr	r6, [r3, #8]
   296c4:	mov	r0, r3
   296c8:	cmp	r6, r1
   296cc:	cmpne	r6, #0
   296d0:	bne	296ec <__assert_fail@plt+0x17824>
   296d4:	ldr	r3, [r0]
   296d8:	ldr	r9, [r9]
   296dc:	mov	r1, r0
   296e0:	cmp	r3, #0
   296e4:	bne	296c0 <__assert_fail@plt+0x177f8>
   296e8:	b	28cf0 <__assert_fail@plt+0x16e28>
   296ec:	add	r2, r9, #8
   296f0:	ldr	r1, [r5]
   296f4:	str	r2, [sp, #56]	; 0x38
   296f8:	cmp	r1, #31
   296fc:	bne	29668 <__assert_fail@plt+0x177a0>
   29700:	mov	r0, #996	; 0x3e4
   29704:	str	r6, [sp, #12]
   29708:	bl	38450 <__assert_fail@plt+0x26588>
   2970c:	cmp	r0, #0
   29710:	beq	297dc <__assert_fail@plt+0x17914>
   29714:	ldr	r2, [sp, #60]	; 0x3c
   29718:	ldr	r5, [sp, #24]
   2971c:	ldr	ip, [sp, #48]	; 0x30
   29720:	ldr	lr, [sp, #44]	; 0x2c
   29724:	ldr	sl, [sp, #52]	; 0x34
   29728:	ldr	r6, [sp, #12]
   2972c:	ldr	r1, [r2]
   29730:	str	r1, [r0]
   29734:	mov	r1, #0
   29738:	str	r0, [r2]
   2973c:	str	r1, [r5]
   29740:	b	29670 <__assert_fail@plt+0x177a8>
   29744:	ldr	r0, [sp, #20]
   29748:	mov	r1, #15
   2974c:	str	r1, [r0]
   29750:	mov	r7, #0
   29754:	clz	r0, r7
   29758:	cmp	r7, #0
   2975c:	lsr	r0, r0, #5
   29760:	beq	29814 <__assert_fail@plt+0x1794c>
   29764:	b	29824 <__assert_fail@plt+0x1795c>
   29768:	ldr	ip, [sp, #48]	; 0x30
   2976c:	ldr	lr, [sp, #44]	; 0x2c
   29770:	ldr	r9, [sp, #40]	; 0x28
   29774:	mov	r7, #0
   29778:	mov	r5, r8
   2977c:	clz	r0, r7
   29780:	cmp	r7, #0
   29784:	lsr	r0, r0, #5
   29788:	beq	29814 <__assert_fail@plt+0x1794c>
   2978c:	b	29824 <__assert_fail@plt+0x1795c>
   29790:	mov	r0, #996	; 0x3e4
   29794:	mov	r7, r3
   29798:	bl	38450 <__assert_fail@plt+0x26588>
   2979c:	cmp	r0, #0
   297a0:	beq	297d4 <__assert_fail@plt+0x1790c>
   297a4:	ldr	r2, [sp, #60]	; 0x3c
   297a8:	ldr	r5, [sp, #24]
   297ac:	ldr	ip, [sp, #48]	; 0x30
   297b0:	ldr	lr, [sp, #44]	; 0x2c
   297b4:	ldr	sl, [sp, #52]	; 0x34
   297b8:	mov	r3, r7
   297bc:	ldr	r1, [r2]
   297c0:	str	r1, [r0]
   297c4:	mov	r1, #0
   297c8:	str	r0, [r2]
   297cc:	str	r1, [r5]
   297d0:	b	295e8 <__assert_fail@plt+0x17720>
   297d4:	str	r4, [fp, #-80]	; 0xffffffb0
   297d8:	b	297e4 <__assert_fail@plt+0x1791c>
   297dc:	ldr	r0, [sp, #56]	; 0x38
   297e0:	str	r4, [r0]
   297e4:	ldr	ip, [sp, #48]	; 0x30
   297e8:	ldr	lr, [sp, #44]	; 0x2c
   297ec:	ldr	r0, [sp, #20]
   297f0:	ldr	r5, [sp, #28]
   297f4:	ldr	r9, [sp, #40]	; 0x28
   297f8:	mov	r1, #12
   297fc:	mov	r7, #0
   29800:	str	r1, [r0]
   29804:	clz	r0, r7
   29808:	cmp	r7, #0
   2980c:	lsr	r0, r0, #5
   29810:	bne	29824 <__assert_fail@plt+0x1795c>
   29814:	ldr	r1, [sp, #20]
   29818:	ldr	r1, [r1]
   2981c:	cmp	r1, #0
   29820:	bne	298f4 <__assert_fail@plt+0x17a2c>
   29824:	ldr	r1, [sp, #32]
   29828:	cmp	r1, #0
   2982c:	beq	289f4 <__assert_fail@plt+0x16b2c>
   29830:	b	289e4 <__assert_fail@plt+0x16b1c>
   29834:	movw	r6, #255	; 0xff
   29838:	cmp	r0, #0
   2983c:	movt	r6, #4
   29840:	bne	298d8 <__assert_fail@plt+0x17a10>
   29844:	mov	r5, r7
   29848:	ldr	r7, [r7, #4]
   2984c:	cmp	r7, #0
   29850:	bne	29844 <__assert_fail@plt+0x1797c>
   29854:	ldr	r7, [r5, #8]
   29858:	cmp	r7, #0
   2985c:	bne	29844 <__assert_fail@plt+0x1797c>
   29860:	ldr	r0, [r5, #24]
   29864:	and	r0, r0, r6
   29868:	cmp	r0, #3
   2986c:	beq	298a0 <__assert_fail@plt+0x179d8>
   29870:	cmp	r0, #6
   29874:	bne	298ac <__assert_fail@plt+0x179e4>
   29878:	ldr	r4, [r5, #20]
   2987c:	ldr	r0, [r4]
   29880:	bl	17c10 <__assert_fail@plt+0x5d48>
   29884:	ldr	r0, [r4, #4]
   29888:	bl	17c10 <__assert_fail@plt+0x5d48>
   2988c:	ldr	r0, [r4, #8]
   29890:	bl	17c10 <__assert_fail@plt+0x5d48>
   29894:	ldr	r0, [r4, #12]
   29898:	bl	17c10 <__assert_fail@plt+0x5d48>
   2989c:	b	298a4 <__assert_fail@plt+0x179dc>
   298a0:	ldr	r4, [r5, #20]
   298a4:	mov	r0, r4
   298a8:	bl	17c10 <__assert_fail@plt+0x5d48>
   298ac:	ldr	r0, [r5]
   298b0:	cmp	r0, #0
   298b4:	beq	298d8 <__assert_fail@plt+0x17a10>
   298b8:	ldr	r7, [r0, #8]
   298bc:	cmp	r7, r5
   298c0:	mov	r5, r0
   298c4:	beq	29860 <__assert_fail@plt+0x17998>
   298c8:	cmp	r7, #0
   298cc:	mov	r5, r0
   298d0:	beq	29860 <__assert_fail@plt+0x17998>
   298d4:	b	29844 <__assert_fail@plt+0x1797c>
   298d8:	mov	r0, #13
   298dc:	ldr	r1, [sp, #20]
   298e0:	mov	r9, #0
   298e4:	str	r0, [r1]
   298e8:	mov	r0, r9
   298ec:	sub	sp, fp, #28
   298f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   298f4:	cmp	r9, #0
   298f8:	beq	27ebc <__assert_fail@plt+0x15ff4>
   298fc:	movw	r6, #255	; 0xff
   29900:	movt	r6, #4
   29904:	mov	r5, r9
   29908:	ldr	r9, [r9, #4]
   2990c:	cmp	r9, #0
   29910:	bne	29904 <__assert_fail@plt+0x17a3c>
   29914:	ldr	r9, [r5, #8]
   29918:	cmp	r9, #0
   2991c:	bne	29904 <__assert_fail@plt+0x17a3c>
   29920:	ldr	r0, [r5, #24]
   29924:	and	r0, r0, r6
   29928:	cmp	r0, #3
   2992c:	beq	29960 <__assert_fail@plt+0x17a98>
   29930:	cmp	r0, #6
   29934:	bne	2996c <__assert_fail@plt+0x17aa4>
   29938:	ldr	r4, [r5, #20]
   2993c:	ldr	r0, [r4]
   29940:	bl	17c10 <__assert_fail@plt+0x5d48>
   29944:	ldr	r0, [r4, #4]
   29948:	bl	17c10 <__assert_fail@plt+0x5d48>
   2994c:	ldr	r0, [r4, #8]
   29950:	bl	17c10 <__assert_fail@plt+0x5d48>
   29954:	ldr	r0, [r4, #12]
   29958:	bl	17c10 <__assert_fail@plt+0x5d48>
   2995c:	b	29964 <__assert_fail@plt+0x17a9c>
   29960:	ldr	r4, [r5, #20]
   29964:	mov	r0, r4
   29968:	bl	17c10 <__assert_fail@plt+0x5d48>
   2996c:	ldr	r0, [r5]
   29970:	cmp	r0, #0
   29974:	beq	27ebc <__assert_fail@plt+0x15ff4>
   29978:	ldr	r9, [r0, #8]
   2997c:	cmp	r9, r5
   29980:	mov	r5, r0
   29984:	beq	29920 <__assert_fail@plt+0x17a58>
   29988:	cmp	r9, #0
   2998c:	mov	r5, r0
   29990:	beq	29920 <__assert_fail@plt+0x17a58>
   29994:	b	29904 <__assert_fail@plt+0x17a3c>
   29998:	cmp	r0, #2
   2999c:	blt	299b8 <__assert_fail@plt+0x17af0>
   299a0:	ldr	r0, [r7, #36]	; 0x24
   299a4:	cmp	r0, #0
   299a8:	bne	28620 <__assert_fail@plt+0x16758>
   299ac:	ldrb	r0, [r7, #16]
   299b0:	tst	r0, #1
   299b4:	bne	28620 <__assert_fail@plt+0x16758>
   299b8:	ldr	r0, [r7]
   299bc:	bl	17c10 <__assert_fail@plt+0x5d48>
   299c0:	ldr	r0, [r7, #4]
   299c4:	bl	17c10 <__assert_fail@plt+0x5d48>
   299c8:	ldr	r0, [r7, #8]
   299cc:	bl	17c10 <__assert_fail@plt+0x5d48>
   299d0:	ldr	r0, [r7, #12]
   299d4:	bl	17c10 <__assert_fail@plt+0x5d48>
   299d8:	mov	r0, r7
   299dc:	bl	17c10 <__assert_fail@plt+0x5d48>
   299e0:	ldr	r1, [sl, #64]	; 0x40
   299e4:	cmp	r1, #31
   299e8:	beq	29f20 <__assert_fail@plt+0x18058>
   299ec:	ldr	r0, [sl, #56]	; 0x38
   299f0:	add	r0, r0, r1, lsl #5
   299f4:	add	r2, r1, #1
   299f8:	vmov.i32	q8, #0	; 0x00000000
   299fc:	ldr	ip, [sp, #48]	; 0x30
   29a00:	ldr	lr, [sp, #44]	; 0x2c
   29a04:	mov	r1, #3
   29a08:	str	r2, [sl, #64]	; 0x40
   29a0c:	mov	r2, #0
   29a10:	add	r7, r0, #4
   29a14:	str	r2, [r0, #20]
   29a18:	str	r8, [r0, #24]
   29a1c:	str	r1, [r0, #28]
   29a20:	mov	r0, #28
   29a24:	mov	r1, r7
   29a28:	vst1.32	{d16-d17}, [r1], r0
   29a2c:	mvn	r0, #0
   29a30:	str	r0, [r1]
   29a34:	b	28988 <__assert_fail@plt+0x16ac0>
   29a38:	ldr	r8, [sp, #24]
   29a3c:	ldr	r0, [sp, #20]
   29a40:	ldr	r5, [sp, #28]
   29a44:	ldr	sl, [sp, #52]	; 0x34
   29a48:	ldr	r7, [sp, #60]	; 0x3c
   29a4c:	str	r9, [r0]
   29a50:	ldr	r4, [sp, #20]
   29a54:	mov	r0, r8
   29a58:	bl	17c10 <__assert_fail@plt+0x5d48>
   29a5c:	ldr	r0, [r7]
   29a60:	bl	17c10 <__assert_fail@plt+0x5d48>
   29a64:	ldr	r0, [r7, #4]
   29a68:	bl	17c10 <__assert_fail@plt+0x5d48>
   29a6c:	ldr	r0, [r7, #8]
   29a70:	bl	17c10 <__assert_fail@plt+0x5d48>
   29a74:	ldr	r0, [r7, #12]
   29a78:	bl	17c10 <__assert_fail@plt+0x5d48>
   29a7c:	mov	r0, r7
   29a80:	bl	17c10 <__assert_fail@plt+0x5d48>
   29a84:	ldr	r0, [r4]
   29a88:	mov	r7, #0
   29a8c:	mov	r9, #0
   29a90:	cmp	r0, #0
   29a94:	ldr	ip, [sp, #48]	; 0x30
   29a98:	ldr	lr, [sp, #44]	; 0x2c
   29a9c:	beq	28988 <__assert_fail@plt+0x16ac0>
   29aa0:	b	298e8 <__assert_fail@plt+0x17a20>
   29aa4:	mov	r0, #996	; 0x3e4
   29aa8:	bl	38450 <__assert_fail@plt+0x26588>
   29aac:	cmp	r0, #0
   29ab0:	beq	29d3c <__assert_fail@plt+0x17e74>
   29ab4:	ldr	r1, [sl, #56]	; 0x38
   29ab8:	ldr	r5, [sp, #28]
   29abc:	ldr	ip, [sp, #48]	; 0x30
   29ac0:	ldr	lr, [sp, #44]	; 0x2c
   29ac4:	str	r1, [r0]
   29ac8:	mov	r1, #0
   29acc:	str	r1, [sl, #64]	; 0x40
   29ad0:	str	r0, [sl, #56]	; 0x38
   29ad4:	b	2795c <__assert_fail@plt+0x15a94>
   29ad8:	mov	r9, r0
   29adc:	str	sl, [sp, #52]	; 0x34
   29ae0:	b	29a3c <__assert_fail@plt+0x17b74>
   29ae4:	mov	r9, #7
   29ae8:	str	sl, [sp, #52]	; 0x34
   29aec:	b	29a3c <__assert_fail@plt+0x17b74>
   29af0:	ldr	r4, [sp, #20]
   29af4:	ldr	r7, [sp, #60]	; 0x3c
   29af8:	mov	r0, #2
   29afc:	str	r0, [r4]
   29b00:	b	29a54 <__assert_fail@plt+0x17b8c>
   29b04:	mov	r0, r8
   29b08:	bl	17c10 <__assert_fail@plt+0x5d48>
   29b0c:	mov	r0, r7
   29b10:	bl	17c10 <__assert_fail@plt+0x5d48>
   29b14:	b	28874 <__assert_fail@plt+0x169ac>
   29b18:	mov	r0, #996	; 0x3e4
   29b1c:	bl	38450 <__assert_fail@plt+0x26588>
   29b20:	cmp	r0, #0
   29b24:	beq	29d3c <__assert_fail@plt+0x17e74>
   29b28:	ldr	r1, [sl, #56]	; 0x38
   29b2c:	ldr	r5, [sp, #28]
   29b30:	ldr	ip, [sp, #48]	; 0x30
   29b34:	ldr	lr, [sp, #44]	; 0x2c
   29b38:	str	r1, [r0]
   29b3c:	mov	r1, #0
   29b40:	str	r1, [sl, #64]	; 0x40
   29b44:	str	r0, [sl, #56]	; 0x38
   29b48:	b	27ba8 <__assert_fail@plt+0x15ce0>
   29b4c:	mov	r0, #6
   29b50:	b	28878 <__assert_fail@plt+0x169b0>
   29b54:	mov	r0, #996	; 0x3e4
   29b58:	bl	38450 <__assert_fail@plt+0x26588>
   29b5c:	cmp	r0, #0
   29b60:	beq	29d3c <__assert_fail@plt+0x17e74>
   29b64:	ldr	r1, [sl, #56]	; 0x38
   29b68:	ldr	r5, [sp, #28]
   29b6c:	ldr	ip, [sp, #48]	; 0x30
   29b70:	ldr	lr, [sp, #44]	; 0x2c
   29b74:	str	r1, [r0]
   29b78:	mov	r1, #0
   29b7c:	str	r1, [sl, #64]	; 0x40
   29b80:	str	r0, [sl, #56]	; 0x38
   29b84:	b	27df0 <__assert_fail@plt+0x15f28>
   29b88:	mov	r0, #996	; 0x3e4
   29b8c:	bl	38450 <__assert_fail@plt+0x26588>
   29b90:	cmp	r0, #0
   29b94:	beq	29d3c <__assert_fail@plt+0x17e74>
   29b98:	ldr	r1, [sl, #56]	; 0x38
   29b9c:	ldr	r5, [sp, #28]
   29ba0:	ldr	ip, [sp, #48]	; 0x30
   29ba4:	ldr	lr, [sp, #44]	; 0x2c
   29ba8:	str	r1, [r0]
   29bac:	mov	r1, #0
   29bb0:	str	r1, [sl, #64]	; 0x40
   29bb4:	str	r0, [sl, #56]	; 0x38
   29bb8:	b	27d94 <__assert_fail@plt+0x15ecc>
   29bbc:	mov	r0, #996	; 0x3e4
   29bc0:	bl	38450 <__assert_fail@plt+0x26588>
   29bc4:	cmp	r0, #0
   29bc8:	beq	29f50 <__assert_fail@plt+0x18088>
   29bcc:	ldr	r1, [sl, #56]	; 0x38
   29bd0:	ldr	ip, [sp, #48]	; 0x30
   29bd4:	ldr	lr, [sp, #44]	; 0x2c
   29bd8:	str	r1, [r0]
   29bdc:	mov	r1, #0
   29be0:	str	r1, [sl, #64]	; 0x40
   29be4:	str	r0, [sl, #56]	; 0x38
   29be8:	b	2863c <__assert_fail@plt+0x16774>
   29bec:	mov	r0, #996	; 0x3e4
   29bf0:	bl	38450 <__assert_fail@plt+0x26588>
   29bf4:	cmp	r0, #0
   29bf8:	beq	29f50 <__assert_fail@plt+0x18088>
   29bfc:	ldr	r1, [sl, #56]	; 0x38
   29c00:	ldr	ip, [sp, #48]	; 0x30
   29c04:	ldr	lr, [sp, #44]	; 0x2c
   29c08:	str	r1, [r0]
   29c0c:	mov	r1, #0
   29c10:	str	r1, [sl, #64]	; 0x40
   29c14:	str	r0, [sl, #56]	; 0x38
   29c18:	b	286e8 <__assert_fail@plt+0x16820>
   29c1c:	mov	r0, #996	; 0x3e4
   29c20:	bl	38450 <__assert_fail@plt+0x26588>
   29c24:	cmp	r0, #0
   29c28:	beq	29f50 <__assert_fail@plt+0x18088>
   29c2c:	ldr	r1, [sl, #56]	; 0x38
   29c30:	ldr	ip, [sp, #48]	; 0x30
   29c34:	ldr	lr, [sp, #44]	; 0x2c
   29c38:	str	r1, [r0]
   29c3c:	mov	r1, #0
   29c40:	str	r1, [sl, #64]	; 0x40
   29c44:	str	r0, [sl, #56]	; 0x38
   29c48:	b	28734 <__assert_fail@plt+0x1686c>
   29c4c:	str	sl, [sp, #52]	; 0x34
   29c50:	mov	r9, #3
   29c54:	b	29a3c <__assert_fail@plt+0x17b74>
   29c58:	mov	r0, r8
   29c5c:	bl	17c10 <__assert_fail@plt+0x5d48>
   29c60:	ldr	lr, [sp, #44]	; 0x2c
   29c64:	ldr	ip, [sp, #48]	; 0x30
   29c68:	mov	r7, r4
   29c6c:	b	28988 <__assert_fail@plt+0x16ac0>
   29c70:	mov	r0, #996	; 0x3e4
   29c74:	bl	38450 <__assert_fail@plt+0x26588>
   29c78:	cmp	r0, #0
   29c7c:	beq	29d3c <__assert_fail@plt+0x17e74>
   29c80:	ldr	r1, [sl, #56]	; 0x38
   29c84:	ldr	r5, [sp, #28]
   29c88:	ldr	ip, [sp, #48]	; 0x30
   29c8c:	ldr	lr, [sp, #44]	; 0x2c
   29c90:	str	r1, [r0]
   29c94:	mov	r1, #0
   29c98:	str	r1, [sl, #64]	; 0x40
   29c9c:	str	r0, [sl, #56]	; 0x38
   29ca0:	b	28944 <__assert_fail@plt+0x16a7c>
   29ca4:	mov	r0, #996	; 0x3e4
   29ca8:	bl	38450 <__assert_fail@plt+0x26588>
   29cac:	cmp	r0, #0
   29cb0:	beq	29eec <__assert_fail@plt+0x18024>
   29cb4:	ldr	r1, [sl, #56]	; 0x38
   29cb8:	ldr	ip, [sp, #48]	; 0x30
   29cbc:	ldr	lr, [sp, #44]	; 0x2c
   29cc0:	mov	r9, #0
   29cc4:	str	r1, [r0]
   29cc8:	mov	r1, #0
   29ccc:	str	r1, [sl, #64]	; 0x40
   29cd0:	str	r0, [sl, #56]	; 0x38
   29cd4:	b	27aa0 <__assert_fail@plt+0x15bd8>
   29cd8:	mov	r0, #996	; 0x3e4
   29cdc:	bl	38450 <__assert_fail@plt+0x26588>
   29ce0:	cmp	r0, #0
   29ce4:	beq	29ef8 <__assert_fail@plt+0x18030>
   29ce8:	ldr	r1, [sl, #56]	; 0x38
   29cec:	ldr	ip, [sp, #48]	; 0x30
   29cf0:	ldr	lr, [sp, #44]	; 0x2c
   29cf4:	mov	r9, #0
   29cf8:	str	r1, [r0]
   29cfc:	mov	r1, #0
   29d00:	str	r1, [sl, #64]	; 0x40
   29d04:	str	r0, [sl, #56]	; 0x38
   29d08:	b	2878c <__assert_fail@plt+0x168c4>
   29d0c:	mov	r0, #996	; 0x3e4
   29d10:	bl	38450 <__assert_fail@plt+0x26588>
   29d14:	cmp	r0, #0
   29d18:	beq	29d3c <__assert_fail@plt+0x17e74>
   29d1c:	ldr	r1, [sl, #56]	; 0x38
   29d20:	ldr	ip, [sp, #48]	; 0x30
   29d24:	ldr	lr, [sp, #44]	; 0x2c
   29d28:	str	r1, [r0]
   29d2c:	mov	r1, #0
   29d30:	str	r1, [sl, #64]	; 0x40
   29d34:	str	r0, [sl, #56]	; 0x38
   29d38:	b	2889c <__assert_fail@plt+0x169d4>
   29d3c:	mov	r0, #12
   29d40:	b	298dc <__assert_fail@plt+0x17a14>
   29d44:	mov	r4, #0
   29d48:	mov	r5, #0
   29d4c:	b	29d58 <__assert_fail@plt+0x17e90>
   29d50:	mov	r5, #4
   29d54:	mov	r4, #128	; 0x80
   29d58:	bl	11c7c <__ctype_b_loc@plt>
   29d5c:	ldr	r0, [r0]
   29d60:	ldr	ip, [sp, #48]	; 0x30
   29d64:	ldr	lr, [sp, #44]	; 0x2c
   29d68:	mov	r1, #1
   29d6c:	mov	r9, #0
   29d70:	add	r7, r0, r4, lsl #1
   29d74:	b	29d8c <__assert_fail@plt+0x17ec4>
   29d78:	add	r5, r5, #1
   29d7c:	add	r7, r7, #64	; 0x40
   29d80:	add	r4, r4, #32
   29d84:	cmp	r5, #8
   29d88:	beq	27a74 <__assert_fail@plt+0x15bac>
   29d8c:	add	r0, sl, r5, lsl #2
   29d90:	mov	r3, #0
   29d94:	add	r2, r0, #96	; 0x60
   29d98:	mov	r0, r7
   29d9c:	add	r6, r4, r3
   29da0:	cmp	r6, #95	; 0x5f
   29da4:	bne	29dd0 <__assert_fail@plt+0x17f08>
   29da8:	ldr	r6, [r2]
   29dac:	orr	r6, r6, r1, lsl r3
   29db0:	str	r6, [r2]
   29db4:	add	r3, r3, #1
   29db8:	add	r0, r0, #2
   29dbc:	cmp	r3, #32
   29dc0:	beq	29d78 <__assert_fail@plt+0x17eb0>
   29dc4:	add	r6, r4, r3
   29dc8:	cmp	r6, #95	; 0x5f
   29dcc:	beq	29da8 <__assert_fail@plt+0x17ee0>
   29dd0:	ldrh	r6, [r0]
   29dd4:	ands	r6, r6, #8
   29dd8:	beq	29db4 <__assert_fail@plt+0x17eec>
   29ddc:	b	29da8 <__assert_fail@plt+0x17ee0>
   29de0:	ldr	ip, [sp, #48]	; 0x30
   29de4:	ldr	lr, [sp, #44]	; 0x2c
   29de8:	mov	r5, #0
   29dec:	mov	r9, #0
   29df0:	ldr	r1, [sl, #64]	; 0x40
   29df4:	cmp	r1, #31
   29df8:	bne	28828 <__assert_fail@plt+0x16960>
   29dfc:	mov	r0, #996	; 0x3e4
   29e00:	bl	38450 <__assert_fail@plt+0x26588>
   29e04:	ldr	lr, [sp, #44]	; 0x2c
   29e08:	ldr	ip, [sp, #48]	; 0x30
   29e0c:	cmp	r0, #0
   29e10:	beq	28874 <__assert_fail@plt+0x169ac>
   29e14:	ldr	r1, [sl, #56]	; 0x38
   29e18:	str	r1, [r0]
   29e1c:	mov	r1, #0
   29e20:	str	r1, [sl, #64]	; 0x40
   29e24:	str	r0, [sl, #56]	; 0x38
   29e28:	b	2882c <__assert_fail@plt+0x16964>
   29e2c:	cmp	r9, #0
   29e30:	beq	29ed0 <__assert_fail@plt+0x18008>
   29e34:	movw	r5, #255	; 0xff
   29e38:	movt	r5, #4
   29e3c:	mov	r6, r9
   29e40:	ldr	r9, [r9, #4]
   29e44:	cmp	r9, #0
   29e48:	bne	29e3c <__assert_fail@plt+0x17f74>
   29e4c:	ldr	r9, [r6, #8]
   29e50:	cmp	r9, #0
   29e54:	bne	29e3c <__assert_fail@plt+0x17f74>
   29e58:	ldr	r0, [r6, #24]
   29e5c:	and	r0, r0, r5
   29e60:	cmp	r0, #3
   29e64:	beq	29e98 <__assert_fail@plt+0x17fd0>
   29e68:	cmp	r0, #6
   29e6c:	bne	29ea4 <__assert_fail@plt+0x17fdc>
   29e70:	ldr	r4, [r6, #20]
   29e74:	ldr	r0, [r4]
   29e78:	bl	17c10 <__assert_fail@plt+0x5d48>
   29e7c:	ldr	r0, [r4, #4]
   29e80:	bl	17c10 <__assert_fail@plt+0x5d48>
   29e84:	ldr	r0, [r4, #8]
   29e88:	bl	17c10 <__assert_fail@plt+0x5d48>
   29e8c:	ldr	r0, [r4, #12]
   29e90:	bl	17c10 <__assert_fail@plt+0x5d48>
   29e94:	b	29e9c <__assert_fail@plt+0x17fd4>
   29e98:	ldr	r4, [r6, #20]
   29e9c:	mov	r0, r4
   29ea0:	bl	17c10 <__assert_fail@plt+0x5d48>
   29ea4:	ldr	r0, [r6]
   29ea8:	cmp	r0, #0
   29eac:	beq	29ed0 <__assert_fail@plt+0x18008>
   29eb0:	ldr	r9, [r0, #8]
   29eb4:	cmp	r9, r6
   29eb8:	mov	r6, r0
   29ebc:	beq	29e58 <__assert_fail@plt+0x17f90>
   29ec0:	cmp	r9, #0
   29ec4:	mov	r6, r0
   29ec8:	beq	29e58 <__assert_fail@plt+0x17f90>
   29ecc:	b	29e3c <__assert_fail@plt+0x17f74>
   29ed0:	mov	r0, #8
   29ed4:	b	298dc <__assert_fail@plt+0x17a14>
   29ed8:	ldr	r8, [sp, #24]
   29edc:	mov	r9, r0
   29ee0:	b	29a3c <__assert_fail@plt+0x17b74>
   29ee4:	ldr	r8, [sp, #24]
   29ee8:	b	29c50 <__assert_fail@plt+0x17d88>
   29eec:	mov	r4, #0
   29ef0:	mov	r0, #9
   29ef4:	b	29f00 <__assert_fail@plt+0x18038>
   29ef8:	mov	r4, #0
   29efc:	mov	r0, #10
   29f00:	ldr	ip, [sp, #48]	; 0x30
   29f04:	ldr	lr, [sp, #44]	; 0x2c
   29f08:	mov	r9, #0
   29f0c:	str	r0, [lr]
   29f10:	ldr	r1, [sl, #64]	; 0x40
   29f14:	cmp	r1, #31
   29f18:	bne	287dc <__assert_fail@plt+0x16914>
   29f1c:	b	27af0 <__assert_fail@plt+0x15c28>
   29f20:	mov	r0, #996	; 0x3e4
   29f24:	bl	38450 <__assert_fail@plt+0x26588>
   29f28:	cmp	r0, #0
   29f2c:	beq	29f50 <__assert_fail@plt+0x18088>
   29f30:	ldr	r1, [sl, #56]	; 0x38
   29f34:	str	r1, [r0]
   29f38:	mov	r1, #0
   29f3c:	str	r1, [sl, #64]	; 0x40
   29f40:	str	r0, [sl, #56]	; 0x38
   29f44:	b	299f0 <__assert_fail@plt+0x17b28>
   29f48:	ldr	r5, [sp, #28]
   29f4c:	ldr	r7, [sp, #60]	; 0x3c
   29f50:	ldr	r4, [sp, #20]
   29f54:	mov	r0, #12
   29f58:	str	r0, [r4]
   29f5c:	b	29a54 <__assert_fail@plt+0x17b8c>
   29f60:	mov	r0, r6
   29f64:	bl	17c10 <__assert_fail@plt+0x5d48>
   29f68:	mov	r0, r9
   29f6c:	bl	17c10 <__assert_fail@plt+0x5d48>
   29f70:	ldr	r8, [sp, #24]
   29f74:	mov	r9, #12
   29f78:	b	29a3c <__assert_fail@plt+0x17b74>
   29f7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29f80:	add	fp, sp, #28
   29f84:	sub	sp, sp, #12
   29f88:	mov	r9, r1
   29f8c:	mov	r6, r0
   29f90:	mov	r4, #0
   29f94:	mov	r0, #32
   29f98:	mov	r1, #1
   29f9c:	mov	sl, r3
   29fa0:	mov	r5, r2
   29fa4:	str	r4, [sp, #8]
   29fa8:	bl	383fc <__assert_fail@plt+0x26534>
   29fac:	ldr	r1, [fp, #12]
   29fb0:	cmp	r0, #0
   29fb4:	beq	2a334 <__assert_fail@plt+0x1846c>
   29fb8:	mov	r7, r0
   29fbc:	mov	r0, #40	; 0x28
   29fc0:	mov	r1, #1
   29fc4:	bl	383fc <__assert_fail@plt+0x26534>
   29fc8:	cmp	r0, #0
   29fcc:	beq	2a26c <__assert_fail@plt+0x183a4>
   29fd0:	mov	r8, r0
   29fd4:	ldrb	r0, [r0, #16]
   29fd8:	ldr	r1, [fp, #8]
   29fdc:	mov	r4, #0
   29fe0:	add	r3, sp, #8
   29fe4:	str	r5, [sp]
   29fe8:	mov	r2, r8
   29fec:	str	r4, [sp, #4]
   29ff0:	and	r0, r0, #254	; 0xfe
   29ff4:	orr	r0, r0, r1
   29ff8:	mov	r1, r7
   29ffc:	strb	r0, [r8, #16]
   2a000:	mov	r0, r9
   2a004:	bl	2a824 <__assert_fail@plt+0x1895c>
   2a008:	cmp	r0, #0
   2a00c:	bne	2a290 <__assert_fail@plt+0x183c8>
   2a010:	ldrb	r0, [sl]
   2a014:	cmp	r0, #0
   2a018:	beq	2a044 <__assert_fail@plt+0x1817c>
   2a01c:	add	r1, sl, #1
   2a020:	mov	r2, #1
   2a024:	ubfx	r3, r0, #5, #3
   2a028:	and	r0, r0, #31
   2a02c:	ldr	r5, [r7, r3, lsl #2]
   2a030:	orr	r0, r5, r2, lsl r0
   2a034:	str	r0, [r7, r3, lsl #2]
   2a038:	ldrb	r0, [r1], #1
   2a03c:	cmp	r0, #0
   2a040:	bne	2a024 <__assert_fail@plt+0x1815c>
   2a044:	ldr	r0, [fp, #8]
   2a048:	cmp	r0, #0
   2a04c:	beq	2a17c <__assert_fail@plt+0x182b4>
   2a050:	vld1.32	{d16-d17}, [r7]
   2a054:	mov	r0, r7
   2a058:	vmvn	q8, q8
   2a05c:	vst1.32	{d16-d17}, [r0]!
   2a060:	vld1.32	{d16-d17}, [r0]
   2a064:	vmvn	q8, q8
   2a068:	vst1.32	{d16-d17}, [r0]
   2a06c:	ldr	r0, [r6, #92]	; 0x5c
   2a070:	cmp	r0, #2
   2a074:	bge	2a188 <__assert_fail@plt+0x182c0>
   2a078:	ldr	r1, [r6, #64]	; 0x40
   2a07c:	cmp	r1, #31
   2a080:	beq	2a20c <__assert_fail@plt+0x18344>
   2a084:	ldr	r0, [r6, #56]	; 0x38
   2a088:	add	r0, r0, r1, lsl #5
   2a08c:	add	r2, r1, #1
   2a090:	vmov.i32	q8, #0	; 0x00000000
   2a094:	mov	r1, #3
   2a098:	str	r2, [r6, #64]	; 0x40
   2a09c:	mov	r2, #0
   2a0a0:	add	r5, r0, #4
   2a0a4:	str	r2, [r0, #20]
   2a0a8:	str	r7, [r0, #24]
   2a0ac:	str	r1, [r0, #28]
   2a0b0:	mov	r0, #28
   2a0b4:	mov	r1, r5
   2a0b8:	vst1.32	{d16-d17}, [r1], r0
   2a0bc:	mvn	r0, #0
   2a0c0:	str	r0, [r1]
   2a0c4:	ldr	r0, [r6, #92]	; 0x5c
   2a0c8:	cmp	r0, #2
   2a0cc:	blt	2a234 <__assert_fail@plt+0x1836c>
   2a0d0:	ldrb	r0, [r6, #88]	; 0x58
   2a0d4:	orr	r0, r0, #2
   2a0d8:	strb	r0, [r6, #88]	; 0x58
   2a0dc:	ldr	r1, [r6, #64]	; 0x40
   2a0e0:	cmp	r1, #31
   2a0e4:	beq	2a2d8 <__assert_fail@plt+0x18410>
   2a0e8:	ldr	r0, [r6, #56]	; 0x38
   2a0ec:	add	r0, r0, r1, lsl #5
   2a0f0:	vmov.i32	q8, #0	; 0x00000000
   2a0f4:	add	r2, r1, #1
   2a0f8:	mov	r1, #6
   2a0fc:	mov	r4, #0
   2a100:	str	r2, [r6, #64]	; 0x40
   2a104:	add	r7, r0, #4
   2a108:	str	r4, [r0, #20]
   2a10c:	str	r8, [r0, #24]
   2a110:	str	r1, [r0, #28]
   2a114:	mov	r0, #28
   2a118:	mov	r1, r7
   2a11c:	vst1.32	{d16-d17}, [r1], r0
   2a120:	mvn	r0, #0
   2a124:	str	r0, [r1]
   2a128:	ldr	r1, [r6, #64]	; 0x40
   2a12c:	cmp	r1, #31
   2a130:	beq	2a348 <__assert_fail@plt+0x18480>
   2a134:	ldr	r0, [r6, #56]	; 0x38
   2a138:	add	r4, r0, r1, lsl #5
   2a13c:	add	r2, r1, #1
   2a140:	mov	r0, #0
   2a144:	mov	r1, #10
   2a148:	str	r2, [r6, #64]	; 0x40
   2a14c:	mvn	r2, #0
   2a150:	str	r0, [r4, #4]!
   2a154:	add	r3, r4, #20
   2a158:	stmib	r4, {r5, r7}
   2a15c:	str	r0, [r4, #12]
   2a160:	str	r0, [r4, #16]
   2a164:	stm	r3, {r0, r1, r2}
   2a168:	str	r4, [r5]
   2a16c:	str	r4, [r7]
   2a170:	mov	r0, r4
   2a174:	sub	sp, fp, #28
   2a178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a17c:	ldr	r0, [r6, #92]	; 0x5c
   2a180:	cmp	r0, #2
   2a184:	blt	2a078 <__assert_fail@plt+0x181b0>
   2a188:	ldr	r5, [r6, #60]	; 0x3c
   2a18c:	ldm	r7, {r0, r1, r2, ip}
   2a190:	ldr	r3, [r5]
   2a194:	and	r0, r0, r3
   2a198:	str	r0, [r7]
   2a19c:	ldr	r0, [r5, #4]
   2a1a0:	and	r0, r1, r0
   2a1a4:	str	r0, [r7, #4]
   2a1a8:	ldr	r0, [r5, #8]
   2a1ac:	and	r0, r2, r0
   2a1b0:	str	r0, [r7, #8]
   2a1b4:	ldr	r0, [r5, #12]
   2a1b8:	and	r0, ip, r0
   2a1bc:	str	r0, [r7, #12]
   2a1c0:	ldr	r0, [r7, #16]
   2a1c4:	ldr	r1, [r5, #16]
   2a1c8:	and	r0, r0, r1
   2a1cc:	str	r0, [r7, #16]
   2a1d0:	ldr	r0, [r5, #20]
   2a1d4:	ldr	r1, [r7, #20]
   2a1d8:	and	r0, r1, r0
   2a1dc:	str	r0, [r7, #20]
   2a1e0:	ldr	r0, [r5, #24]
   2a1e4:	ldr	r1, [r7, #24]
   2a1e8:	and	r0, r1, r0
   2a1ec:	str	r0, [r7, #24]
   2a1f0:	ldr	r0, [r5, #28]
   2a1f4:	ldr	r1, [r7, #28]
   2a1f8:	and	r0, r1, r0
   2a1fc:	str	r0, [r7, #28]
   2a200:	ldr	r1, [r6, #64]	; 0x40
   2a204:	cmp	r1, #31
   2a208:	bne	2a084 <__assert_fail@plt+0x181bc>
   2a20c:	mov	r0, #996	; 0x3e4
   2a210:	bl	38450 <__assert_fail@plt+0x26588>
   2a214:	cmp	r0, #0
   2a218:	beq	2a300 <__assert_fail@plt+0x18438>
   2a21c:	ldr	r1, [r6, #56]	; 0x38
   2a220:	str	r1, [r0]
   2a224:	mov	r1, #0
   2a228:	str	r1, [r6, #64]	; 0x40
   2a22c:	str	r0, [r6, #56]	; 0x38
   2a230:	b	2a088 <__assert_fail@plt+0x181c0>
   2a234:	ldr	r0, [r8]
   2a238:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a23c:	ldr	r0, [r8, #4]
   2a240:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a244:	ldr	r0, [r8, #8]
   2a248:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a24c:	ldr	r0, [r8, #12]
   2a250:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a254:	mov	r0, r8
   2a258:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a25c:	mov	r4, r5
   2a260:	mov	r0, r4
   2a264:	sub	sp, fp, #28
   2a268:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a26c:	mov	r0, r7
   2a270:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a274:	ldr	r1, [fp, #12]
   2a278:	mov	r0, #12
   2a27c:	mov	r4, #0
   2a280:	str	r0, [r1]
   2a284:	mov	r0, r4
   2a288:	sub	sp, fp, #28
   2a28c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a290:	mov	r5, r0
   2a294:	mov	r0, r7
   2a298:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a29c:	ldr	r0, [r8]
   2a2a0:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a2a4:	ldr	r0, [r8, #4]
   2a2a8:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a2ac:	ldr	r0, [r8, #8]
   2a2b0:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a2b4:	ldr	r0, [r8, #12]
   2a2b8:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a2bc:	mov	r0, r8
   2a2c0:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a2c4:	ldr	r0, [fp, #12]
   2a2c8:	str	r5, [r0]
   2a2cc:	mov	r0, r4
   2a2d0:	sub	sp, fp, #28
   2a2d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a2d8:	mov	r0, #996	; 0x3e4
   2a2dc:	bl	38450 <__assert_fail@plt+0x26588>
   2a2e0:	cmp	r0, #0
   2a2e4:	beq	2a300 <__assert_fail@plt+0x18438>
   2a2e8:	ldr	r1, [r6, #56]	; 0x38
   2a2ec:	str	r1, [r0]
   2a2f0:	mov	r1, #0
   2a2f4:	str	r1, [r6, #64]	; 0x40
   2a2f8:	str	r0, [r6, #56]	; 0x38
   2a2fc:	b	2a0ec <__assert_fail@plt+0x18224>
   2a300:	mov	r0, r7
   2a304:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a308:	ldr	r0, [r8]
   2a30c:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a310:	ldr	r0, [r8, #4]
   2a314:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a318:	ldr	r0, [r8, #8]
   2a31c:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a320:	ldr	r0, [r8, #12]
   2a324:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a328:	mov	r0, r8
   2a32c:	bl	17c10 <__assert_fail@plt+0x5d48>
   2a330:	ldr	r1, [fp, #12]
   2a334:	mov	r0, #12
   2a338:	str	r0, [r1]
   2a33c:	mov	r0, r4
   2a340:	sub	sp, fp, #28
   2a344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a348:	mov	r0, #996	; 0x3e4
   2a34c:	bl	38450 <__assert_fail@plt+0x26588>
   2a350:	cmp	r0, #0
   2a354:	beq	2a260 <__assert_fail@plt+0x18398>
   2a358:	ldr	r1, [r6, #56]	; 0x38
   2a35c:	str	r1, [r0]
   2a360:	mov	r1, #0
   2a364:	str	r1, [r6, #64]	; 0x40
   2a368:	str	r0, [r6, #56]	; 0x38
   2a36c:	b	2a138 <__assert_fail@plt+0x18270>
   2a370:	push	{fp, lr}
   2a374:	mov	fp, sp
   2a378:	ldr	ip, [r1, #40]	; 0x28
   2a37c:	ldr	r3, [r1, #56]	; 0x38
   2a380:	cmp	r3, ip
   2a384:	ble	2a404 <__assert_fail@plt+0x1853c>
   2a388:	ldr	r3, [r1, #4]
   2a38c:	ldrb	lr, [r3, ip]
   2a390:	strb	lr, [r0]
   2a394:	ldr	r3, [r1, #80]	; 0x50
   2a398:	cmp	r3, #2
   2a39c:	blt	2a3c0 <__assert_fail@plt+0x184f8>
   2a3a0:	ldr	r3, [r1, #28]
   2a3a4:	ldr	ip, [r1, #40]	; 0x28
   2a3a8:	cmp	ip, r3
   2a3ac:	beq	2a3c0 <__assert_fail@plt+0x184f8>
   2a3b0:	ldr	r3, [r1, #8]
   2a3b4:	ldr	r3, [r3, ip, lsl #2]
   2a3b8:	cmn	r3, #1
   2a3bc:	beq	2a4d8 <__assert_fail@plt+0x18610>
   2a3c0:	tst	r2, #1
   2a3c4:	beq	2a418 <__assert_fail@plt+0x18550>
   2a3c8:	cmp	lr, #92	; 0x5c
   2a3cc:	bne	2a418 <__assert_fail@plt+0x18550>
   2a3d0:	ldr	r2, [r1, #40]	; 0x28
   2a3d4:	ldr	r3, [r1, #48]	; 0x30
   2a3d8:	add	r2, r2, #1
   2a3dc:	cmp	r2, r3
   2a3e0:	bge	2a4d8 <__assert_fail@plt+0x18610>
   2a3e4:	str	r2, [r1, #40]	; 0x28
   2a3e8:	ldr	r1, [r1, #4]
   2a3ec:	ldrb	r2, [r1, r2]
   2a3f0:	mov	r1, #1
   2a3f4:	strb	r1, [r0, #4]
   2a3f8:	strb	r2, [r0]
   2a3fc:	mov	r0, r1
   2a400:	pop	{fp, pc}
   2a404:	mov	r1, #2
   2a408:	strb	r1, [r0, #4]
   2a40c:	mov	r1, #0
   2a410:	mov	r0, r1
   2a414:	pop	{fp, pc}
   2a418:	cmp	lr, #92	; 0x5c
   2a41c:	bgt	2a47c <__assert_fail@plt+0x185b4>
   2a420:	cmp	lr, #45	; 0x2d
   2a424:	beq	2a4a0 <__assert_fail@plt+0x185d8>
   2a428:	cmp	lr, #91	; 0x5b
   2a42c:	bne	2a4d8 <__assert_fail@plt+0x18610>
   2a430:	ldr	r3, [r1, #40]	; 0x28
   2a434:	ldr	ip, [r1, #48]	; 0x30
   2a438:	add	r3, r3, #1
   2a43c:	cmp	r3, ip
   2a440:	bge	2a4c8 <__assert_fail@plt+0x18600>
   2a444:	ldr	r1, [r1, #4]
   2a448:	ldrb	r1, [r1, r3]
   2a44c:	cmp	r1, #61	; 0x3d
   2a450:	strb	r1, [r0]
   2a454:	beq	2a4e8 <__assert_fail@plt+0x18620>
   2a458:	cmp	r1, #58	; 0x3a
   2a45c:	beq	2a4fc <__assert_fail@plt+0x18634>
   2a460:	cmp	r1, #46	; 0x2e
   2a464:	bne	2a4d0 <__assert_fail@plt+0x18608>
   2a468:	mov	r1, #26
   2a46c:	strb	r1, [r0, #4]
   2a470:	mov	r1, #2
   2a474:	mov	r0, r1
   2a478:	pop	{fp, pc}
   2a47c:	cmp	lr, #93	; 0x5d
   2a480:	beq	2a4b4 <__assert_fail@plt+0x185ec>
   2a484:	cmp	lr, #94	; 0x5e
   2a488:	bne	2a4d8 <__assert_fail@plt+0x18610>
   2a48c:	mov	r1, #25
   2a490:	strb	r1, [r0, #4]
   2a494:	mov	r1, #1
   2a498:	mov	r0, r1
   2a49c:	pop	{fp, pc}
   2a4a0:	mov	r1, #22
   2a4a4:	strb	r1, [r0, #4]
   2a4a8:	mov	r1, #1
   2a4ac:	mov	r0, r1
   2a4b0:	pop	{fp, pc}
   2a4b4:	mov	r1, #21
   2a4b8:	strb	r1, [r0, #4]
   2a4bc:	mov	r1, #1
   2a4c0:	mov	r0, r1
   2a4c4:	pop	{fp, pc}
   2a4c8:	mov	r1, #0
   2a4cc:	strb	r1, [r0]
   2a4d0:	mov	r1, #91	; 0x5b
   2a4d4:	strb	r1, [r0]
   2a4d8:	mov	r1, #1
   2a4dc:	strb	r1, [r0, #4]
   2a4e0:	mov	r0, r1
   2a4e4:	pop	{fp, pc}
   2a4e8:	mov	r1, #28
   2a4ec:	strb	r1, [r0, #4]
   2a4f0:	mov	r1, #2
   2a4f4:	mov	r0, r1
   2a4f8:	pop	{fp, pc}
   2a4fc:	tst	r2, #4
   2a500:	beq	2a4d0 <__assert_fail@plt+0x18608>
   2a504:	mov	r1, #30
   2a508:	strb	r1, [r0, #4]
   2a50c:	mov	r1, #2
   2a510:	mov	r0, r1
   2a514:	pop	{fp, pc}
   2a518:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a51c:	add	fp, sp, #24
   2a520:	sub	sp, sp, #8
   2a524:	mov	r5, r2
   2a528:	ldr	r2, [r1, #80]	; 0x50
   2a52c:	mov	r9, r0
   2a530:	ldr	r0, [r1, #40]	; 0x28
   2a534:	cmp	r2, #1
   2a538:	beq	2a5b0 <__assert_fail@plt+0x186e8>
   2a53c:	ldr	r2, [r1, #28]
   2a540:	add	r6, r0, #1
   2a544:	cmp	r6, r2
   2a548:	bge	2a5b0 <__assert_fail@plt+0x186e8>
   2a54c:	ldr	lr, [r1, #8]
   2a550:	sub	r4, r0, r2
   2a554:	sub	ip, r2, r0
   2a558:	mvn	r2, #0
   2a55c:	add	r6, lr, r0, lsl #2
   2a560:	ldr	r7, [r6, -r2, lsl #2]
   2a564:	cmn	r7, #1
   2a568:	bne	2a57c <__assert_fail@plt+0x186b4>
   2a56c:	sub	r2, r2, #1
   2a570:	cmp	r4, r2
   2a574:	bne	2a560 <__assert_fail@plt+0x18698>
   2a578:	b	2a588 <__assert_fail@plt+0x186c0>
   2a57c:	rsb	ip, r2, #0
   2a580:	cmp	ip, #2
   2a584:	bcc	2a5b0 <__assert_fail@plt+0x186e8>
   2a588:	mov	r2, #1
   2a58c:	str	r2, [r9]
   2a590:	ldr	r0, [lr, r0, lsl #2]
   2a594:	str	r0, [r9, #4]
   2a598:	ldr	r0, [r1, #40]	; 0x28
   2a59c:	add	r0, r0, ip
   2a5a0:	str	r0, [r1, #40]	; 0x28
   2a5a4:	mov	r0, #0
   2a5a8:	sub	sp, fp, #24
   2a5ac:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a5b0:	add	r2, r0, r3
   2a5b4:	str	r2, [r1, #40]	; 0x28
   2a5b8:	ldrb	r6, [r5, #4]
   2a5bc:	sub	r0, r6, #22
   2a5c0:	cmp	r0, #8
   2a5c4:	bhi	2a80c <__assert_fail@plt+0x18944>
   2a5c8:	add	r3, pc, #0
   2a5cc:	ldr	pc, [r3, r0, lsl #2]
   2a5d0:	andeq	sl, r2, r4, ror #15
   2a5d4:	andeq	sl, r2, ip, lsl #16
   2a5d8:	andeq	sl, r2, ip, lsl #16
   2a5dc:	andeq	sl, r2, ip, lsl #16
   2a5e0:	strdeq	sl, [r2], -r4
   2a5e4:	andeq	sl, r2, ip, lsl #16
   2a5e8:	strdeq	sl, [r2], -r4
   2a5ec:	andeq	sl, r2, ip, lsl #16
   2a5f0:	strdeq	sl, [r2], -r4
   2a5f4:	ldr	r3, [r1, #56]	; 0x38
   2a5f8:	mov	r0, #7
   2a5fc:	cmp	r3, r2
   2a600:	ble	2a81c <__assert_fail@plt+0x18954>
   2a604:	ldrb	r3, [r5]
   2a608:	mov	r2, #0
   2a60c:	uxtb	r7, r6
   2a610:	cmp	r7, #30
   2a614:	bne	2a624 <__assert_fail@plt+0x1875c>
   2a618:	ldrb	r7, [r1, #75]	; 0x4b
   2a61c:	cmp	r7, #0
   2a620:	bne	2a688 <__assert_fail@plt+0x187c0>
   2a624:	ldr	r4, [r1, #40]	; 0x28
   2a628:	ldr	r7, [r1, #4]
   2a62c:	add	r6, r4, #1
   2a630:	str	r6, [r1, #40]	; 0x28
   2a634:	ldrb	r4, [r7, r4]
   2a638:	ldr	r7, [r1, #56]	; 0x38
   2a63c:	cmp	r7, r6
   2a640:	ble	2a81c <__assert_fail@plt+0x18954>
   2a644:	uxtb	r7, r4
   2a648:	cmp	r7, r3
   2a64c:	bne	2a660 <__assert_fail@plt+0x18798>
   2a650:	ldr	r7, [r1, #4]
   2a654:	ldrb	r7, [r7, r6]
   2a658:	cmp	r7, #93	; 0x5d
   2a65c:	beq	2a784 <__assert_fail@plt+0x188bc>
   2a660:	ldr	r7, [r9, #4]
   2a664:	strb	r4, [r7, r2]
   2a668:	add	r2, r2, #1
   2a66c:	cmp	r2, #32
   2a670:	beq	2a81c <__assert_fail@plt+0x18954>
   2a674:	ldrb	r6, [r5, #4]
   2a678:	uxtb	r7, r6
   2a67c:	cmp	r7, #30
   2a680:	beq	2a618 <__assert_fail@plt+0x18750>
   2a684:	b	2a624 <__assert_fail@plt+0x1875c>
   2a688:	ldrb	r7, [r1, #76]	; 0x4c
   2a68c:	cmp	r7, #0
   2a690:	beq	2a738 <__assert_fail@plt+0x18870>
   2a694:	ldr	lr, [r1, #28]
   2a698:	ldr	ip, [r1, #40]	; 0x28
   2a69c:	cmp	lr, ip
   2a6a0:	beq	2a6b4 <__assert_fail@plt+0x187ec>
   2a6a4:	ldr	r4, [r1, #8]
   2a6a8:	ldr	r4, [r4, ip, lsl #2]
   2a6ac:	cmn	r4, #1
   2a6b0:	beq	2a764 <__assert_fail@plt+0x1889c>
   2a6b4:	ldr	r6, [r1, #12]
   2a6b8:	ldr	r7, [r1, #24]
   2a6bc:	ldr	r4, [r1]
   2a6c0:	ldr	r6, [r6, ip, lsl #2]
   2a6c4:	add	r6, r7, r6
   2a6c8:	add	r4, r4, r6
   2a6cc:	ldrsb	r4, [r4]
   2a6d0:	cmn	r4, #1
   2a6d4:	ble	2a764 <__assert_fail@plt+0x1889c>
   2a6d8:	ldr	r7, [r1, #80]	; 0x50
   2a6dc:	mov	r6, #1
   2a6e0:	cmp	r7, #1
   2a6e4:	beq	2a720 <__assert_fail@plt+0x18858>
   2a6e8:	add	r7, ip, #1
   2a6ec:	cmp	r7, lr
   2a6f0:	bge	2a720 <__assert_fail@plt+0x18858>
   2a6f4:	ldr	r6, [r1, #8]
   2a6f8:	sub	lr, lr, ip
   2a6fc:	add	r8, r6, ip, lsl #2
   2a700:	mov	r6, #1
   2a704:	ldr	r7, [r8, r6, lsl #2]
   2a708:	cmn	r7, #1
   2a70c:	bne	2a720 <__assert_fail@plt+0x18858>
   2a710:	add	r6, r6, #1
   2a714:	cmp	lr, r6
   2a718:	bne	2a704 <__assert_fail@plt+0x1883c>
   2a71c:	mov	r6, lr
   2a720:	add	r6, r6, ip
   2a724:	str	r6, [r1, #40]	; 0x28
   2a728:	ldr	r7, [r1, #56]	; 0x38
   2a72c:	cmp	r7, r6
   2a730:	bgt	2a644 <__assert_fail@plt+0x1877c>
   2a734:	b	2a81c <__assert_fail@plt+0x18954>
   2a738:	ldr	r7, [r1, #40]	; 0x28
   2a73c:	ldr	r4, [r1, #24]
   2a740:	ldr	ip, [r1]
   2a744:	add	r6, r7, #1
   2a748:	add	r7, r7, r4
   2a74c:	str	r6, [r1, #40]	; 0x28
   2a750:	ldrb	r4, [ip, r7]
   2a754:	ldr	r7, [r1, #56]	; 0x38
   2a758:	cmp	r7, r6
   2a75c:	bgt	2a644 <__assert_fail@plt+0x1877c>
   2a760:	b	2a81c <__assert_fail@plt+0x18954>
   2a764:	add	r6, ip, #1
   2a768:	str	r6, [r1, #40]	; 0x28
   2a76c:	ldr	r7, [r1, #4]
   2a770:	ldrb	r4, [r7, ip]
   2a774:	ldr	r7, [r1, #56]	; 0x38
   2a778:	cmp	r7, r6
   2a77c:	bgt	2a644 <__assert_fail@plt+0x1877c>
   2a780:	b	2a81c <__assert_fail@plt+0x18954>
   2a784:	add	r0, r6, #1
   2a788:	str	r0, [r1, #40]	; 0x28
   2a78c:	mov	r0, #0
   2a790:	ldr	r1, [r9, #4]
   2a794:	strb	r0, [r1, r2]
   2a798:	ldrb	r1, [r5, #4]
   2a79c:	cmp	r1, #30
   2a7a0:	beq	2a7c4 <__assert_fail@plt+0x188fc>
   2a7a4:	cmp	r1, #28
   2a7a8:	beq	2a7d4 <__assert_fail@plt+0x1890c>
   2a7ac:	cmp	r1, #26
   2a7b0:	bne	2a81c <__assert_fail@plt+0x18954>
   2a7b4:	mov	r1, #3
   2a7b8:	str	r1, [r9]
   2a7bc:	sub	sp, fp, #24
   2a7c0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a7c4:	mov	r1, #4
   2a7c8:	str	r1, [r9]
   2a7cc:	sub	sp, fp, #24
   2a7d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a7d4:	mov	r1, #2
   2a7d8:	str	r1, [r9]
   2a7dc:	sub	sp, fp, #24
   2a7e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a7e4:	ldr	r0, [fp, #12]
   2a7e8:	cmp	r0, #0
   2a7ec:	bne	2a80c <__assert_fail@plt+0x18944>
   2a7f0:	ldr	r2, [fp, #8]
   2a7f4:	mov	r0, sp
   2a7f8:	bl	2a370 <__assert_fail@plt+0x184a8>
   2a7fc:	ldrb	r1, [sp, #4]
   2a800:	mov	r0, #11
   2a804:	cmp	r1, #21
   2a808:	bne	2a81c <__assert_fail@plt+0x18954>
   2a80c:	mov	r0, #0
   2a810:	str	r0, [r9]
   2a814:	ldrb	r1, [r5]
   2a818:	strb	r1, [r9, #4]
   2a81c:	sub	sp, fp, #24
   2a820:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2a824:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2a828:	add	fp, sp, #24
   2a82c:	mov	r8, r0
   2a830:	ldrb	r0, [fp, #14]
   2a834:	ldr	r6, [fp, #8]
   2a838:	mov	r5, r3
   2a83c:	mov	r7, r2
   2a840:	mov	r4, r1
   2a844:	tst	r0, #64	; 0x40
   2a848:	beq	2a884 <__assert_fail@plt+0x189bc>
   2a84c:	movw	r1, #48218	; 0xbc5a
   2a850:	mov	r0, r6
   2a854:	movt	r1, #3
   2a858:	bl	11a3c <strcmp@plt>
   2a85c:	cmp	r0, #0
   2a860:	beq	2a87c <__assert_fail@plt+0x189b4>
   2a864:	movw	r1, #48224	; 0xbc60
   2a868:	mov	r0, r6
   2a86c:	movt	r1, #3
   2a870:	bl	11a3c <strcmp@plt>
   2a874:	cmp	r0, #0
   2a878:	bne	2a884 <__assert_fail@plt+0x189bc>
   2a87c:	movw	r6, #48230	; 0xbc66
   2a880:	movt	r6, #3
   2a884:	ldr	r0, [r5]
   2a888:	ldr	r1, [r7, #36]	; 0x24
   2a88c:	cmp	r0, r1
   2a890:	beq	2ae58 <__assert_fail@plt+0x18f90>
   2a894:	mov	r0, r6
   2a898:	bl	119f4 <wctype@plt>
   2a89c:	ldr	r2, [r7, #36]	; 0x24
   2a8a0:	ldr	r1, [r7, #12]
   2a8a4:	add	r3, r2, #1
   2a8a8:	str	r3, [r7, #36]	; 0x24
   2a8ac:	str	r0, [r1, r2, lsl #2]
   2a8b0:	movw	r1, #48206	; 0xbc4e
   2a8b4:	mov	r0, r6
   2a8b8:	movt	r1, #3
   2a8bc:	bl	11a3c <strcmp@plt>
   2a8c0:	cmp	r0, #0
   2a8c4:	beq	2a9f4 <__assert_fail@plt+0x18b2c>
   2a8c8:	movw	r1, #48236	; 0xbc6c
   2a8cc:	mov	r0, r6
   2a8d0:	movt	r1, #3
   2a8d4:	bl	11a3c <strcmp@plt>
   2a8d8:	cmp	r0, #0
   2a8dc:	beq	2aa60 <__assert_fail@plt+0x18b98>
   2a8e0:	movw	r1, #48224	; 0xbc60
   2a8e4:	mov	r0, r6
   2a8e8:	movt	r1, #3
   2a8ec:	bl	11a3c <strcmp@plt>
   2a8f0:	cmp	r0, #0
   2a8f4:	beq	2aacc <__assert_fail@plt+0x18c04>
   2a8f8:	movw	r1, #48212	; 0xbc54
   2a8fc:	mov	r0, r6
   2a900:	movt	r1, #3
   2a904:	bl	11a3c <strcmp@plt>
   2a908:	cmp	r0, #0
   2a90c:	beq	2ab38 <__assert_fail@plt+0x18c70>
   2a910:	movw	r1, #48230	; 0xbc66
   2a914:	mov	r0, r6
   2a918:	movt	r1, #3
   2a91c:	bl	11a3c <strcmp@plt>
   2a920:	cmp	r0, #0
   2a924:	beq	2abdc <__assert_fail@plt+0x18d14>
   2a928:	movw	r1, #48267	; 0xbc8b
   2a92c:	mov	r0, r6
   2a930:	movt	r1, #3
   2a934:	bl	11a3c <strcmp@plt>
   2a938:	cmp	r0, #0
   2a93c:	beq	2ac48 <__assert_fail@plt+0x18d80>
   2a940:	movw	r1, #48242	; 0xbc72
   2a944:	mov	r0, r6
   2a948:	movt	r1, #3
   2a94c:	bl	11a3c <strcmp@plt>
   2a950:	cmp	r0, #0
   2a954:	beq	2acb4 <__assert_fail@plt+0x18dec>
   2a958:	movw	r1, #48218	; 0xbc5a
   2a95c:	mov	r0, r6
   2a960:	movt	r1, #3
   2a964:	bl	11a3c <strcmp@plt>
   2a968:	cmp	r0, #0
   2a96c:	beq	2ad08 <__assert_fail@plt+0x18e40>
   2a970:	movw	r1, #48248	; 0xbc78
   2a974:	mov	r0, r6
   2a978:	movt	r1, #3
   2a97c:	bl	11a3c <strcmp@plt>
   2a980:	cmp	r0, #0
   2a984:	beq	2ad5c <__assert_fail@plt+0x18e94>
   2a988:	movw	r1, #48254	; 0xbc7e
   2a98c:	mov	r0, r6
   2a990:	movt	r1, #3
   2a994:	bl	11a3c <strcmp@plt>
   2a998:	cmp	r0, #0
   2a99c:	beq	2adb0 <__assert_fail@plt+0x18ee8>
   2a9a0:	movw	r1, #48260	; 0xbc84
   2a9a4:	mov	r0, r6
   2a9a8:	movt	r1, #3
   2a9ac:	bl	11a3c <strcmp@plt>
   2a9b0:	cmp	r0, #0
   2a9b4:	beq	2ae04 <__assert_fail@plt+0x18f3c>
   2a9b8:	movw	r1, #48266	; 0xbc8a
   2a9bc:	mov	r0, r6
   2a9c0:	movt	r1, #3
   2a9c4:	bl	11a3c <strcmp@plt>
   2a9c8:	mov	r1, r0
   2a9cc:	mov	r0, #4
   2a9d0:	cmp	r1, #0
   2a9d4:	bne	2b1c8 <__assert_fail@plt+0x19300>
   2a9d8:	bl	11c7c <__ctype_b_loc@plt>
   2a9dc:	ldr	r1, [r0]
   2a9e0:	mov	r2, #0
   2a9e4:	mov	r3, #1
   2a9e8:	cmp	r8, #0
   2a9ec:	beq	2abb8 <__assert_fail@plt+0x18cf0>
   2a9f0:	b	2b100 <__assert_fail@plt+0x19238>
   2a9f4:	bl	11c7c <__ctype_b_loc@plt>
   2a9f8:	ldr	r1, [r0]
   2a9fc:	cmp	r8, #0
   2aa00:	bne	2aef8 <__assert_fail@plt+0x19030>
   2aa04:	mov	r0, #0
   2aa08:	mov	r2, #1
   2aa0c:	ldrb	r3, [r1]
   2aa10:	tst	r3, #8
   2aa14:	bne	2aa34 <__assert_fail@plt+0x18b6c>
   2aa18:	add	r0, r0, #1
   2aa1c:	add	r1, r1, #2
   2aa20:	cmp	r0, #256	; 0x100
   2aa24:	beq	2aa58 <__assert_fail@plt+0x18b90>
   2aa28:	ldrb	r3, [r1]
   2aa2c:	tst	r3, #8
   2aa30:	beq	2aa18 <__assert_fail@plt+0x18b50>
   2aa34:	ubfx	r3, r0, #5, #3
   2aa38:	and	r6, r0, #31
   2aa3c:	ldr	r7, [r4, r3, lsl #2]
   2aa40:	orr	r7, r7, r2, lsl r6
   2aa44:	str	r7, [r4, r3, lsl #2]
   2aa48:	add	r0, r0, #1
   2aa4c:	add	r1, r1, #2
   2aa50:	cmp	r0, #256	; 0x100
   2aa54:	bne	2aa28 <__assert_fail@plt+0x18b60>
   2aa58:	mov	r0, #0
   2aa5c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2aa60:	bl	11c7c <__ctype_b_loc@plt>
   2aa64:	ldr	r1, [r0]
   2aa68:	cmp	r8, #0
   2aa6c:	bne	2af84 <__assert_fail@plt+0x190bc>
   2aa70:	mov	r0, #0
   2aa74:	mov	r2, #1
   2aa78:	ldrb	r3, [r1]
   2aa7c:	tst	r3, #2
   2aa80:	bne	2aaa0 <__assert_fail@plt+0x18bd8>
   2aa84:	add	r0, r0, #1
   2aa88:	add	r1, r1, #2
   2aa8c:	cmp	r0, #256	; 0x100
   2aa90:	beq	2aac4 <__assert_fail@plt+0x18bfc>
   2aa94:	ldrb	r3, [r1]
   2aa98:	tst	r3, #2
   2aa9c:	beq	2aa84 <__assert_fail@plt+0x18bbc>
   2aaa0:	ubfx	r3, r0, #5, #3
   2aaa4:	and	r6, r0, #31
   2aaa8:	ldr	r7, [r4, r3, lsl #2]
   2aaac:	orr	r7, r7, r2, lsl r6
   2aab0:	str	r7, [r4, r3, lsl #2]
   2aab4:	add	r0, r0, #1
   2aab8:	add	r1, r1, #2
   2aabc:	cmp	r0, #256	; 0x100
   2aac0:	bne	2aa94 <__assert_fail@plt+0x18bcc>
   2aac4:	mov	r0, #0
   2aac8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2aacc:	bl	11c7c <__ctype_b_loc@plt>
   2aad0:	ldr	r1, [r0]
   2aad4:	cmp	r8, #0
   2aad8:	bne	2b010 <__assert_fail@plt+0x19148>
   2aadc:	mov	r0, #0
   2aae0:	mov	r2, #1
   2aae4:	ldrb	r3, [r1, #1]
   2aae8:	tst	r3, #2
   2aaec:	bne	2ab0c <__assert_fail@plt+0x18c44>
   2aaf0:	add	r0, r0, #1
   2aaf4:	add	r1, r1, #2
   2aaf8:	cmp	r0, #256	; 0x100
   2aafc:	beq	2ab30 <__assert_fail@plt+0x18c68>
   2ab00:	ldrb	r3, [r1, #1]
   2ab04:	tst	r3, #2
   2ab08:	beq	2aaf0 <__assert_fail@plt+0x18c28>
   2ab0c:	ubfx	r3, r0, #5, #3
   2ab10:	and	r6, r0, #31
   2ab14:	ldr	r7, [r4, r3, lsl #2]
   2ab18:	orr	r7, r7, r2, lsl r6
   2ab1c:	str	r7, [r4, r3, lsl #2]
   2ab20:	add	r0, r0, #1
   2ab24:	add	r1, r1, #2
   2ab28:	cmp	r0, #256	; 0x100
   2ab2c:	bne	2ab00 <__assert_fail@plt+0x18c38>
   2ab30:	mov	r0, #0
   2ab34:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ab38:	bl	11c7c <__ctype_b_loc@plt>
   2ab3c:	ldr	r1, [r0]
   2ab40:	cmp	r8, #0
   2ab44:	bne	2b09c <__assert_fail@plt+0x191d4>
   2ab48:	mov	r0, #0
   2ab4c:	mov	r2, #1
   2ab50:	ldrb	r3, [r1, #1]
   2ab54:	tst	r3, #32
   2ab58:	bne	2ab78 <__assert_fail@plt+0x18cb0>
   2ab5c:	add	r0, r0, #1
   2ab60:	add	r1, r1, #2
   2ab64:	cmp	r0, #256	; 0x100
   2ab68:	beq	2ab9c <__assert_fail@plt+0x18cd4>
   2ab6c:	ldrb	r3, [r1, #1]
   2ab70:	tst	r3, #32
   2ab74:	beq	2ab5c <__assert_fail@plt+0x18c94>
   2ab78:	ubfx	r3, r0, #5, #3
   2ab7c:	and	r6, r0, #31
   2ab80:	ldr	r7, [r4, r3, lsl #2]
   2ab84:	orr	r7, r7, r2, lsl r6
   2ab88:	str	r7, [r4, r3, lsl #2]
   2ab8c:	add	r0, r0, #1
   2ab90:	add	r1, r1, #2
   2ab94:	cmp	r0, #256	; 0x100
   2ab98:	bne	2ab6c <__assert_fail@plt+0x18ca4>
   2ab9c:	mov	r0, #0
   2aba0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2aba4:	add	r2, r2, #1
   2aba8:	add	r1, r1, #2
   2abac:	mov	r0, #0
   2abb0:	cmp	r2, #256	; 0x100
   2abb4:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2abb8:	ldrb	r0, [r1, #1]
   2abbc:	tst	r0, #16
   2abc0:	beq	2aba4 <__assert_fail@plt+0x18cdc>
   2abc4:	ubfx	r0, r2, #5, #3
   2abc8:	and	r6, r2, #31
   2abcc:	ldr	r7, [r4, r0, lsl #2]
   2abd0:	orr	r7, r7, r3, lsl r6
   2abd4:	str	r7, [r4, r0, lsl #2]
   2abd8:	b	2aba4 <__assert_fail@plt+0x18cdc>
   2abdc:	bl	11c7c <__ctype_b_loc@plt>
   2abe0:	ldr	r1, [r0]
   2abe4:	cmp	r8, #0
   2abe8:	bne	2b128 <__assert_fail@plt+0x19260>
   2abec:	mov	r0, #0
   2abf0:	mov	r2, #1
   2abf4:	ldrb	r3, [r1, #1]
   2abf8:	tst	r3, #4
   2abfc:	bne	2ac1c <__assert_fail@plt+0x18d54>
   2ac00:	add	r0, r0, #1
   2ac04:	add	r1, r1, #2
   2ac08:	cmp	r0, #256	; 0x100
   2ac0c:	beq	2ac40 <__assert_fail@plt+0x18d78>
   2ac10:	ldrb	r3, [r1, #1]
   2ac14:	tst	r3, #4
   2ac18:	beq	2ac00 <__assert_fail@plt+0x18d38>
   2ac1c:	ubfx	r3, r0, #5, #3
   2ac20:	and	r6, r0, #31
   2ac24:	ldr	r7, [r4, r3, lsl #2]
   2ac28:	orr	r7, r7, r2, lsl r6
   2ac2c:	str	r7, [r4, r3, lsl #2]
   2ac30:	add	r0, r0, #1
   2ac34:	add	r1, r1, #2
   2ac38:	cmp	r0, #256	; 0x100
   2ac3c:	bne	2ac10 <__assert_fail@plt+0x18d48>
   2ac40:	mov	r0, #0
   2ac44:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ac48:	bl	11c7c <__ctype_b_loc@plt>
   2ac4c:	ldr	r1, [r0]
   2ac50:	cmp	r8, #0
   2ac54:	bne	2b178 <__assert_fail@plt+0x192b0>
   2ac58:	mov	r0, #0
   2ac5c:	mov	r2, #1
   2ac60:	ldrb	r3, [r1, #1]
   2ac64:	tst	r3, #8
   2ac68:	bne	2ac88 <__assert_fail@plt+0x18dc0>
   2ac6c:	add	r0, r0, #1
   2ac70:	add	r1, r1, #2
   2ac74:	cmp	r0, #256	; 0x100
   2ac78:	beq	2acac <__assert_fail@plt+0x18de4>
   2ac7c:	ldrb	r3, [r1, #1]
   2ac80:	tst	r3, #8
   2ac84:	beq	2ac6c <__assert_fail@plt+0x18da4>
   2ac88:	ubfx	r3, r0, #5, #3
   2ac8c:	and	r6, r0, #31
   2ac90:	ldr	r7, [r4, r3, lsl #2]
   2ac94:	orr	r7, r7, r2, lsl r6
   2ac98:	str	r7, [r4, r3, lsl #2]
   2ac9c:	add	r0, r0, #1
   2aca0:	add	r1, r1, #2
   2aca4:	cmp	r0, #256	; 0x100
   2aca8:	bne	2ac7c <__assert_fail@plt+0x18db4>
   2acac:	mov	r0, #0
   2acb0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2acb4:	bl	11c7c <__ctype_b_loc@plt>
   2acb8:	ldr	r1, [r0]
   2acbc:	mov	r2, #0
   2acc0:	mov	r3, #1
   2acc4:	cmp	r8, #0
   2acc8:	beq	2ace4 <__assert_fail@plt+0x18e1c>
   2accc:	b	2ae94 <__assert_fail@plt+0x18fcc>
   2acd0:	add	r2, r2, #1
   2acd4:	add	r1, r1, #2
   2acd8:	mov	r0, #0
   2acdc:	cmp	r2, #256	; 0x100
   2ace0:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2ace4:	ldrb	r0, [r1, #1]
   2ace8:	tst	r0, #64	; 0x40
   2acec:	beq	2acd0 <__assert_fail@plt+0x18e08>
   2acf0:	ubfx	r0, r2, #5, #3
   2acf4:	and	r6, r2, #31
   2acf8:	ldr	r7, [r4, r0, lsl #2]
   2acfc:	orr	r7, r7, r3, lsl r6
   2ad00:	str	r7, [r4, r0, lsl #2]
   2ad04:	b	2acd0 <__assert_fail@plt+0x18e08>
   2ad08:	bl	11c7c <__ctype_b_loc@plt>
   2ad0c:	ldr	r1, [r0]
   2ad10:	mov	r2, #0
   2ad14:	mov	r3, #1
   2ad18:	cmp	r8, #0
   2ad1c:	beq	2ad38 <__assert_fail@plt+0x18e70>
   2ad20:	b	2aed0 <__assert_fail@plt+0x19008>
   2ad24:	add	r2, r2, #1
   2ad28:	add	r1, r1, #2
   2ad2c:	mov	r0, #0
   2ad30:	cmp	r2, #256	; 0x100
   2ad34:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2ad38:	ldrb	r0, [r1, #1]
   2ad3c:	tst	r0, #1
   2ad40:	beq	2ad24 <__assert_fail@plt+0x18e5c>
   2ad44:	ubfx	r0, r2, #5, #3
   2ad48:	and	r6, r2, #31
   2ad4c:	ldr	r7, [r4, r0, lsl #2]
   2ad50:	orr	r7, r7, r3, lsl r6
   2ad54:	str	r7, [r4, r0, lsl #2]
   2ad58:	b	2ad24 <__assert_fail@plt+0x18e5c>
   2ad5c:	bl	11c7c <__ctype_b_loc@plt>
   2ad60:	ldr	r1, [r0]
   2ad64:	mov	r2, #0
   2ad68:	mov	r3, #1
   2ad6c:	cmp	r8, #0
   2ad70:	beq	2ad8c <__assert_fail@plt+0x18ec4>
   2ad74:	b	2af5c <__assert_fail@plt+0x19094>
   2ad78:	add	r2, r2, #1
   2ad7c:	add	r1, r1, #2
   2ad80:	mov	r0, #0
   2ad84:	cmp	r2, #256	; 0x100
   2ad88:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2ad8c:	ldrb	r0, [r1]
   2ad90:	tst	r0, #1
   2ad94:	beq	2ad78 <__assert_fail@plt+0x18eb0>
   2ad98:	ubfx	r0, r2, #5, #3
   2ad9c:	and	r6, r2, #31
   2ada0:	ldr	r7, [r4, r0, lsl #2]
   2ada4:	orr	r7, r7, r3, lsl r6
   2ada8:	str	r7, [r4, r0, lsl #2]
   2adac:	b	2ad78 <__assert_fail@plt+0x18eb0>
   2adb0:	bl	11c7c <__ctype_b_loc@plt>
   2adb4:	ldr	r1, [r0]
   2adb8:	mov	r2, #0
   2adbc:	mov	r3, #1
   2adc0:	cmp	r8, #0
   2adc4:	beq	2ade0 <__assert_fail@plt+0x18f18>
   2adc8:	b	2afe8 <__assert_fail@plt+0x19120>
   2adcc:	add	r2, r2, #1
   2add0:	add	r1, r1, #2
   2add4:	mov	r0, #0
   2add8:	cmp	r2, #256	; 0x100
   2addc:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2ade0:	ldrsh	r0, [r1]
   2ade4:	cmn	r0, #1
   2ade8:	bgt	2adcc <__assert_fail@plt+0x18f04>
   2adec:	ubfx	r0, r2, #5, #3
   2adf0:	and	r6, r2, #31
   2adf4:	ldr	r7, [r4, r0, lsl #2]
   2adf8:	orr	r7, r7, r3, lsl r6
   2adfc:	str	r7, [r4, r0, lsl #2]
   2ae00:	b	2adcc <__assert_fail@plt+0x18f04>
   2ae04:	bl	11c7c <__ctype_b_loc@plt>
   2ae08:	ldr	r1, [r0]
   2ae0c:	mov	r2, #0
   2ae10:	mov	r3, #1
   2ae14:	cmp	r8, #0
   2ae18:	beq	2ae34 <__assert_fail@plt+0x18f6c>
   2ae1c:	b	2b074 <__assert_fail@plt+0x191ac>
   2ae20:	add	r2, r2, #1
   2ae24:	add	r1, r1, #2
   2ae28:	mov	r0, #0
   2ae2c:	cmp	r2, #256	; 0x100
   2ae30:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2ae34:	ldrb	r0, [r1]
   2ae38:	tst	r0, #4
   2ae3c:	beq	2ae20 <__assert_fail@plt+0x18f58>
   2ae40:	ubfx	r0, r2, #5, #3
   2ae44:	and	r6, r2, #31
   2ae48:	ldr	r7, [r4, r0, lsl #2]
   2ae4c:	orr	r7, r7, r3, lsl r6
   2ae50:	str	r7, [r4, r0, lsl #2]
   2ae54:	b	2ae20 <__assert_fail@plt+0x18f58>
   2ae58:	mov	r1, #1
   2ae5c:	orr	r9, r1, r0, lsl #1
   2ae60:	ldr	r0, [r7, #12]
   2ae64:	lsl	r1, r9, #2
   2ae68:	bl	38480 <__assert_fail@plt+0x265b8>
   2ae6c:	cmp	r0, #0
   2ae70:	beq	2b1cc <__assert_fail@plt+0x19304>
   2ae74:	str	r0, [r7, #12]
   2ae78:	str	r9, [r5]
   2ae7c:	b	2a894 <__assert_fail@plt+0x189cc>
   2ae80:	add	r2, r2, #1
   2ae84:	add	r1, r1, #2
   2ae88:	mov	r0, #0
   2ae8c:	cmp	r2, #256	; 0x100
   2ae90:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2ae94:	ldrb	r0, [r1, #1]
   2ae98:	tst	r0, #64	; 0x40
   2ae9c:	beq	2ae80 <__assert_fail@plt+0x18fb8>
   2aea0:	ldrb	r0, [r8, r2]
   2aea4:	ubfx	r7, r0, #5, #3
   2aea8:	and	r0, r0, #31
   2aeac:	ldr	r6, [r4, r7, lsl #2]
   2aeb0:	orr	r0, r6, r3, lsl r0
   2aeb4:	str	r0, [r4, r7, lsl #2]
   2aeb8:	b	2ae80 <__assert_fail@plt+0x18fb8>
   2aebc:	add	r2, r2, #1
   2aec0:	add	r1, r1, #2
   2aec4:	mov	r0, #0
   2aec8:	cmp	r2, #256	; 0x100
   2aecc:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2aed0:	ldrb	r0, [r1, #1]
   2aed4:	tst	r0, #1
   2aed8:	beq	2aebc <__assert_fail@plt+0x18ff4>
   2aedc:	ldrb	r0, [r8, r2]
   2aee0:	ubfx	r7, r0, #5, #3
   2aee4:	and	r0, r0, #31
   2aee8:	ldr	r6, [r4, r7, lsl #2]
   2aeec:	orr	r0, r6, r3, lsl r0
   2aef0:	str	r0, [r4, r7, lsl #2]
   2aef4:	b	2aebc <__assert_fail@plt+0x18ff4>
   2aef8:	mov	r2, #0
   2aefc:	mov	r3, #1
   2af00:	ldrb	r0, [r1]
   2af04:	tst	r0, #8
   2af08:	bne	2af2c <__assert_fail@plt+0x19064>
   2af0c:	add	r2, r2, #1
   2af10:	add	r1, r1, #2
   2af14:	mov	r0, #0
   2af18:	cmp	r2, #256	; 0x100
   2af1c:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2af20:	ldrb	r0, [r1]
   2af24:	tst	r0, #8
   2af28:	beq	2af0c <__assert_fail@plt+0x19044>
   2af2c:	ldrb	r0, [r8, r2]
   2af30:	ubfx	r7, r0, #5, #3
   2af34:	and	r0, r0, #31
   2af38:	ldr	r6, [r4, r7, lsl #2]
   2af3c:	orr	r0, r6, r3, lsl r0
   2af40:	str	r0, [r4, r7, lsl #2]
   2af44:	b	2af0c <__assert_fail@plt+0x19044>
   2af48:	add	r2, r2, #1
   2af4c:	add	r1, r1, #2
   2af50:	mov	r0, #0
   2af54:	cmp	r2, #256	; 0x100
   2af58:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2af5c:	ldrb	r0, [r1]
   2af60:	tst	r0, #1
   2af64:	beq	2af48 <__assert_fail@plt+0x19080>
   2af68:	ldrb	r0, [r8, r2]
   2af6c:	ubfx	r7, r0, #5, #3
   2af70:	and	r0, r0, #31
   2af74:	ldr	r6, [r4, r7, lsl #2]
   2af78:	orr	r0, r6, r3, lsl r0
   2af7c:	str	r0, [r4, r7, lsl #2]
   2af80:	b	2af48 <__assert_fail@plt+0x19080>
   2af84:	mov	r2, #0
   2af88:	mov	r3, #1
   2af8c:	ldrb	r0, [r1]
   2af90:	tst	r0, #2
   2af94:	bne	2afb8 <__assert_fail@plt+0x190f0>
   2af98:	add	r2, r2, #1
   2af9c:	add	r1, r1, #2
   2afa0:	mov	r0, #0
   2afa4:	cmp	r2, #256	; 0x100
   2afa8:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2afac:	ldrb	r0, [r1]
   2afb0:	tst	r0, #2
   2afb4:	beq	2af98 <__assert_fail@plt+0x190d0>
   2afb8:	ldrb	r0, [r8, r2]
   2afbc:	ubfx	r7, r0, #5, #3
   2afc0:	and	r0, r0, #31
   2afc4:	ldr	r6, [r4, r7, lsl #2]
   2afc8:	orr	r0, r6, r3, lsl r0
   2afcc:	str	r0, [r4, r7, lsl #2]
   2afd0:	b	2af98 <__assert_fail@plt+0x190d0>
   2afd4:	add	r2, r2, #1
   2afd8:	add	r1, r1, #2
   2afdc:	mov	r0, #0
   2afe0:	cmp	r2, #256	; 0x100
   2afe4:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2afe8:	ldrsh	r0, [r1]
   2afec:	cmn	r0, #1
   2aff0:	bgt	2afd4 <__assert_fail@plt+0x1910c>
   2aff4:	ldrb	r0, [r8, r2]
   2aff8:	ubfx	r7, r0, #5, #3
   2affc:	and	r0, r0, #31
   2b000:	ldr	r6, [r4, r7, lsl #2]
   2b004:	orr	r0, r6, r3, lsl r0
   2b008:	str	r0, [r4, r7, lsl #2]
   2b00c:	b	2afd4 <__assert_fail@plt+0x1910c>
   2b010:	mov	r2, #0
   2b014:	mov	r3, #1
   2b018:	ldrb	r0, [r1, #1]
   2b01c:	tst	r0, #2
   2b020:	bne	2b044 <__assert_fail@plt+0x1917c>
   2b024:	add	r2, r2, #1
   2b028:	add	r1, r1, #2
   2b02c:	mov	r0, #0
   2b030:	cmp	r2, #256	; 0x100
   2b034:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2b038:	ldrb	r0, [r1, #1]
   2b03c:	tst	r0, #2
   2b040:	beq	2b024 <__assert_fail@plt+0x1915c>
   2b044:	ldrb	r0, [r8, r2]
   2b048:	ubfx	r7, r0, #5, #3
   2b04c:	and	r0, r0, #31
   2b050:	ldr	r6, [r4, r7, lsl #2]
   2b054:	orr	r0, r6, r3, lsl r0
   2b058:	str	r0, [r4, r7, lsl #2]
   2b05c:	b	2b024 <__assert_fail@plt+0x1915c>
   2b060:	add	r2, r2, #1
   2b064:	add	r1, r1, #2
   2b068:	mov	r0, #0
   2b06c:	cmp	r2, #256	; 0x100
   2b070:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2b074:	ldrb	r0, [r1]
   2b078:	tst	r0, #4
   2b07c:	beq	2b060 <__assert_fail@plt+0x19198>
   2b080:	ldrb	r0, [r8, r2]
   2b084:	ubfx	r7, r0, #5, #3
   2b088:	and	r0, r0, #31
   2b08c:	ldr	r6, [r4, r7, lsl #2]
   2b090:	orr	r0, r6, r3, lsl r0
   2b094:	str	r0, [r4, r7, lsl #2]
   2b098:	b	2b060 <__assert_fail@plt+0x19198>
   2b09c:	mov	r2, #0
   2b0a0:	mov	r3, #1
   2b0a4:	ldrb	r0, [r1, #1]
   2b0a8:	tst	r0, #32
   2b0ac:	bne	2b0d0 <__assert_fail@plt+0x19208>
   2b0b0:	add	r2, r2, #1
   2b0b4:	add	r1, r1, #2
   2b0b8:	mov	r0, #0
   2b0bc:	cmp	r2, #256	; 0x100
   2b0c0:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2b0c4:	ldrb	r0, [r1, #1]
   2b0c8:	tst	r0, #32
   2b0cc:	beq	2b0b0 <__assert_fail@plt+0x191e8>
   2b0d0:	ldrb	r0, [r8, r2]
   2b0d4:	ubfx	r7, r0, #5, #3
   2b0d8:	and	r0, r0, #31
   2b0dc:	ldr	r6, [r4, r7, lsl #2]
   2b0e0:	orr	r0, r6, r3, lsl r0
   2b0e4:	str	r0, [r4, r7, lsl #2]
   2b0e8:	b	2b0b0 <__assert_fail@plt+0x191e8>
   2b0ec:	add	r2, r2, #1
   2b0f0:	add	r1, r1, #2
   2b0f4:	mov	r0, #0
   2b0f8:	cmp	r2, #256	; 0x100
   2b0fc:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2b100:	ldrb	r0, [r1, #1]
   2b104:	tst	r0, #16
   2b108:	beq	2b0ec <__assert_fail@plt+0x19224>
   2b10c:	ldrb	r0, [r8, r2]
   2b110:	ubfx	r7, r0, #5, #3
   2b114:	and	r0, r0, #31
   2b118:	ldr	r6, [r4, r7, lsl #2]
   2b11c:	orr	r0, r6, r3, lsl r0
   2b120:	str	r0, [r4, r7, lsl #2]
   2b124:	b	2b0ec <__assert_fail@plt+0x19224>
   2b128:	mov	r2, #0
   2b12c:	mov	r3, #1
   2b130:	ldrb	r0, [r1, #1]
   2b134:	tst	r0, #4
   2b138:	bne	2b15c <__assert_fail@plt+0x19294>
   2b13c:	add	r2, r2, #1
   2b140:	add	r1, r1, #2
   2b144:	mov	r0, #0
   2b148:	cmp	r2, #256	; 0x100
   2b14c:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2b150:	ldrb	r0, [r1, #1]
   2b154:	tst	r0, #4
   2b158:	beq	2b13c <__assert_fail@plt+0x19274>
   2b15c:	ldrb	r0, [r8, r2]
   2b160:	ubfx	r7, r0, #5, #3
   2b164:	and	r0, r0, #31
   2b168:	ldr	r6, [r4, r7, lsl #2]
   2b16c:	orr	r0, r6, r3, lsl r0
   2b170:	str	r0, [r4, r7, lsl #2]
   2b174:	b	2b13c <__assert_fail@plt+0x19274>
   2b178:	mov	r2, #0
   2b17c:	mov	r3, #1
   2b180:	ldrb	r0, [r1, #1]
   2b184:	tst	r0, #8
   2b188:	bne	2b1ac <__assert_fail@plt+0x192e4>
   2b18c:	add	r2, r2, #1
   2b190:	add	r1, r1, #2
   2b194:	mov	r0, #0
   2b198:	cmp	r2, #256	; 0x100
   2b19c:	beq	2b1c8 <__assert_fail@plt+0x19300>
   2b1a0:	ldrb	r0, [r1, #1]
   2b1a4:	tst	r0, #8
   2b1a8:	beq	2b18c <__assert_fail@plt+0x192c4>
   2b1ac:	ldrb	r0, [r8, r2]
   2b1b0:	ubfx	r7, r0, #5, #3
   2b1b4:	and	r0, r0, #31
   2b1b8:	ldr	r6, [r4, r7, lsl #2]
   2b1bc:	orr	r0, r6, r3, lsl r0
   2b1c0:	str	r0, [r4, r7, lsl #2]
   2b1c4:	b	2b18c <__assert_fail@plt+0x192c4>
   2b1c8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b1cc:	mov	r0, #12
   2b1d0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b1d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2b1d8:	add	fp, sp, #24
   2b1dc:	ldr	r3, [r1, #24]
   2b1e0:	mvn	r7, #1
   2b1e4:	ldr	r2, [r1, #28]
   2b1e8:	mov	r4, #0
   2b1ec:	uxtab	r3, r7, r3
   2b1f0:	cmp	r3, #14
   2b1f4:	bhi	2b318 <__assert_fail@plt+0x19450>
   2b1f8:	add	r7, pc, #0
   2b1fc:	ldr	pc, [r7, r3, lsl #2]
   2b200:	andeq	fp, r2, ip, asr #6
   2b204:	andeq	fp, r2, r8, lsl r3
   2b208:	andeq	fp, r2, r0, lsr r3
   2b20c:	andeq	fp, r2, r8, lsl r3
   2b210:	andeq	fp, r2, r8, lsl r3
   2b214:	andeq	fp, r2, r8, lsl r3
   2b218:	andeq	fp, r2, ip, lsr r2
   2b21c:	andeq	fp, r2, ip, lsr r2
   2b220:	muleq	r2, r0, r2
   2b224:	muleq	r2, r0, r2
   2b228:	andeq	fp, r2, ip, lsr r2
   2b22c:	andeq	fp, r2, r8, lsl r3
   2b230:	andeq	fp, r2, r8, lsl r3
   2b234:	andeq	fp, r2, r8, lsl r3
   2b238:	andeq	fp, r2, ip, asr #6
   2b23c:	ldr	r1, [r1, #16]
   2b240:	ldr	r5, [r1, #28]
   2b244:	ldr	r6, [r0, #20]
   2b248:	add	r0, r2, r2, lsl #1
   2b24c:	mov	r1, #1
   2b250:	str	r1, [r6, r0, lsl #2]!
   2b254:	mov	r0, #4
   2b258:	mov	r7, r6
   2b25c:	str	r1, [r7, #4]!
   2b260:	bl	38450 <__assert_fail@plt+0x26588>
   2b264:	cmp	r0, #0
   2b268:	str	r0, [r6, #8]
   2b26c:	strne	r5, [r0]
   2b270:	movne	r0, r4
   2b274:	popne	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b278:	mov	r0, #0
   2b27c:	str	r0, [r7]
   2b280:	str	r0, [r6]
   2b284:	mov	r4, #12
   2b288:	mov	r0, r4
   2b28c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b290:	ldrb	r3, [r0, #88]	; 0x58
   2b294:	add	r6, r1, #16
   2b298:	add	r5, r2, r2, lsl #1
   2b29c:	orr	r3, r3, #1
   2b2a0:	strb	r3, [r0, #88]	; 0x58
   2b2a4:	mov	r3, r6
   2b2a8:	ldr	r7, [r1, #4]
   2b2ac:	ldr	r1, [r1, #8]
   2b2b0:	cmp	r1, #0
   2b2b4:	addne	r3, r1, #12
   2b2b8:	cmp	r7, #0
   2b2bc:	ldr	r1, [r3]
   2b2c0:	addne	r6, r7, #12
   2b2c4:	ldr	r8, [r1, #28]
   2b2c8:	ldr	r1, [r6]
   2b2cc:	ldr	r6, [r0, #20]
   2b2d0:	mov	r0, #2
   2b2d4:	ldr	r9, [r1, #28]
   2b2d8:	mov	r7, r6
   2b2dc:	str	r0, [r7, r5, lsl #2]!
   2b2e0:	mov	r0, #8
   2b2e4:	bl	38450 <__assert_fail@plt+0x26588>
   2b2e8:	cmp	r0, #0
   2b2ec:	str	r0, [r7, #8]
   2b2f0:	beq	2b284 <__assert_fail@plt+0x193bc>
   2b2f4:	add	r1, r6, r5, lsl #2
   2b2f8:	cmp	r9, r8
   2b2fc:	add	r1, r1, #4
   2b300:	bne	2b354 <__assert_fail@plt+0x1948c>
   2b304:	mov	r2, #1
   2b308:	str	r2, [r1]
   2b30c:	str	r9, [r0]
   2b310:	mov	r0, r4
   2b314:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b318:	ldr	r1, [r1, #16]
   2b31c:	ldr	r0, [r0, #12]
   2b320:	ldr	r1, [r1, #28]
   2b324:	str	r1, [r0, r2, lsl #2]
   2b328:	mov	r0, r4
   2b32c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b330:	ldr	r7, [r1, #16]
   2b334:	ldr	r3, [r0, #12]
   2b338:	ldr	r5, [r7, #28]
   2b33c:	str	r5, [r3, r2, lsl #2]
   2b340:	ldrb	r1, [r1, #24]
   2b344:	cmp	r1, #4
   2b348:	beq	2b244 <__assert_fail@plt+0x1937c>
   2b34c:	mov	r0, r4
   2b350:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b354:	mov	r2, #2
   2b358:	str	r2, [r1]
   2b35c:	stmcs	r0, {r8, r9}
   2b360:	strcc	r9, [r0]
   2b364:	strcc	r8, [r0, #4]
   2b368:	mov	r0, r4
   2b36c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2b370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b374:	add	fp, sp, #28
   2b378:	sub	sp, sp, #4
   2b37c:	ldr	r6, [r3, #4]
   2b380:	tst	r2, #16
   2b384:	mov	r9, r3
   2b388:	mov	r7, r1
   2b38c:	mov	r8, r0
   2b390:	cmpne	r6, #0
   2b394:	bne	2b54c <__assert_fail@plt+0x19684>
   2b398:	ldr	r1, [r7, #64]	; 0x40
   2b39c:	cmp	r1, #31
   2b3a0:	beq	2b574 <__assert_fail@plt+0x196ac>
   2b3a4:	ldr	r0, [r7, #56]	; 0x38
   2b3a8:	add	r0, r0, r1, lsl #5
   2b3ac:	add	r2, r1, #1
   2b3b0:	vmov.i32	q8, #0	; 0x00000000
   2b3b4:	mov	r1, #0
   2b3b8:	str	r2, [r7, #64]	; 0x40
   2b3bc:	mov	r2, #8
   2b3c0:	add	sl, r0, #4
   2b3c4:	str	r1, [r0, #20]
   2b3c8:	str	r1, [r0, #24]
   2b3cc:	str	r2, [r0, #28]
   2b3d0:	mov	r0, #28
   2b3d4:	mov	r1, sl
   2b3d8:	vst1.32	{d16-d17}, [r1], r0
   2b3dc:	mvn	r0, #0
   2b3e0:	str	r0, [r1]
   2b3e4:	ldr	r1, [r7, #64]	; 0x40
   2b3e8:	cmp	r1, #31
   2b3ec:	beq	2b5d4 <__assert_fail@plt+0x1970c>
   2b3f0:	ldr	r0, [r7, #56]	; 0x38
   2b3f4:	add	r0, r0, r1, lsl #5
   2b3f8:	add	r2, r1, #1
   2b3fc:	vmov.i32	q8, #0	; 0x00000000
   2b400:	mov	r1, #0
   2b404:	str	r2, [r7, #64]	; 0x40
   2b408:	mov	r2, #9
   2b40c:	add	r5, r0, #4
   2b410:	str	r1, [r0, #20]
   2b414:	str	r1, [r0, #24]
   2b418:	str	r2, [r0, #28]
   2b41c:	mov	r0, #28
   2b420:	mov	r1, r5
   2b424:	vst1.32	{d16-d17}, [r1], r0
   2b428:	mvn	r0, #0
   2b42c:	str	r0, [r1]
   2b430:	cmp	r6, #0
   2b434:	mov	r4, r5
   2b438:	beq	2b48c <__assert_fail@plt+0x195c4>
   2b43c:	ldr	r1, [r7, #64]	; 0x40
   2b440:	cmp	r1, #31
   2b444:	beq	2b59c <__assert_fail@plt+0x196d4>
   2b448:	ldr	r0, [r7, #56]	; 0x38
   2b44c:	add	r4, r0, r1, lsl #5
   2b450:	add	r2, r1, #1
   2b454:	mov	r0, #0
   2b458:	cmp	r5, #0
   2b45c:	mov	r1, #16
   2b460:	str	r2, [r7, #64]	; 0x40
   2b464:	mvn	r2, #0
   2b468:	str	r0, [r4, #4]!
   2b46c:	add	r3, r4, #20
   2b470:	str	r6, [r4, #4]
   2b474:	str	r5, [r4, #8]
   2b478:	str	r0, [r4, #12]
   2b47c:	str	r0, [r4, #16]
   2b480:	stm	r3, {r0, r1, r2}
   2b484:	str	r4, [r6]
   2b488:	strne	r4, [r5]
   2b48c:	ldr	r1, [r7, #64]	; 0x40
   2b490:	cmp	r1, #31
   2b494:	beq	2b620 <__assert_fail@plt+0x19758>
   2b498:	ldr	r0, [r7, #56]	; 0x38
   2b49c:	add	r6, r0, r1, lsl #5
   2b4a0:	add	r2, r1, #1
   2b4a4:	mov	r0, #0
   2b4a8:	cmp	sl, #0
   2b4ac:	mov	r1, #16
   2b4b0:	str	r2, [r7, #64]	; 0x40
   2b4b4:	mvn	r2, #0
   2b4b8:	str	r0, [r6, #4]!
   2b4bc:	add	r3, r6, #20
   2b4c0:	str	sl, [r6, #4]
   2b4c4:	str	r4, [r6, #8]
   2b4c8:	str	r0, [r6, #12]
   2b4cc:	str	r0, [r6, #16]
   2b4d0:	stm	r3, {r0, r1, r2}
   2b4d4:	strne	r6, [sl]
   2b4d8:	cmp	r4, #0
   2b4dc:	strne	r6, [r4]
   2b4e0:	cmp	r5, #0
   2b4e4:	beq	2b4f4 <__assert_fail@plt+0x1962c>
   2b4e8:	cmp	sl, #0
   2b4ec:	cmpne	r4, #0
   2b4f0:	bne	2b50c <__assert_fail@plt+0x19644>
   2b4f4:	mov	r0, #12
   2b4f8:	mov	r6, #0
   2b4fc:	str	r0, [r8]
   2b500:	mov	r0, r6
   2b504:	sub	sp, fp, #28
   2b508:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b50c:	cmp	r6, #0
   2b510:	beq	2b4f4 <__assert_fail@plt+0x1962c>
   2b514:	ldr	r0, [r9, #20]
   2b518:	str	r0, [r5, #20]
   2b51c:	str	r0, [sl, #20]
   2b520:	ldr	r1, [r9, #24]
   2b524:	ldr	r0, [r5, #24]
   2b528:	lsr	r1, r1, #19
   2b52c:	bfi	r0, r1, #19, #1
   2b530:	str	r0, [r5, #24]
   2b534:	ldr	r0, [sl, #24]
   2b538:	bfi	r0, r1, #19, #1
   2b53c:	str	r0, [sl, #24]
   2b540:	mov	r0, r6
   2b544:	sub	sp, fp, #28
   2b548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b54c:	ldr	r0, [r9, #20]
   2b550:	cmp	r0, #31
   2b554:	bgt	2b568 <__assert_fail@plt+0x196a0>
   2b558:	ldr	r1, [r7, #80]	; 0x50
   2b55c:	mov	r2, #1
   2b560:	tst	r1, r2, lsl r0
   2b564:	bne	2b398 <__assert_fail@plt+0x194d0>
   2b568:	mov	r0, r6
   2b56c:	sub	sp, fp, #28
   2b570:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b574:	mov	r0, #996	; 0x3e4
   2b578:	bl	38450 <__assert_fail@plt+0x26588>
   2b57c:	cmp	r0, #0
   2b580:	beq	2b5c4 <__assert_fail@plt+0x196fc>
   2b584:	ldr	r1, [r7, #56]	; 0x38
   2b588:	str	r1, [r0]
   2b58c:	mov	r1, #0
   2b590:	str	r1, [r7, #64]	; 0x40
   2b594:	str	r0, [r7, #56]	; 0x38
   2b598:	b	2b3a8 <__assert_fail@plt+0x194e0>
   2b59c:	mov	r0, #996	; 0x3e4
   2b5a0:	bl	38450 <__assert_fail@plt+0x26588>
   2b5a4:	cmp	r0, #0
   2b5a8:	beq	2b610 <__assert_fail@plt+0x19748>
   2b5ac:	ldr	r1, [r7, #56]	; 0x38
   2b5b0:	str	r1, [r0]
   2b5b4:	mov	r1, #0
   2b5b8:	str	r1, [r7, #64]	; 0x40
   2b5bc:	str	r0, [r7, #56]	; 0x38
   2b5c0:	b	2b44c <__assert_fail@plt+0x19584>
   2b5c4:	mov	sl, #0
   2b5c8:	ldr	r1, [r7, #64]	; 0x40
   2b5cc:	cmp	r1, #31
   2b5d0:	bne	2b3f0 <__assert_fail@plt+0x19528>
   2b5d4:	mov	r0, #996	; 0x3e4
   2b5d8:	bl	38450 <__assert_fail@plt+0x26588>
   2b5dc:	cmp	r0, #0
   2b5e0:	beq	2b5fc <__assert_fail@plt+0x19734>
   2b5e4:	ldr	r1, [r7, #56]	; 0x38
   2b5e8:	str	r1, [r0]
   2b5ec:	mov	r1, #0
   2b5f0:	str	r1, [r7, #64]	; 0x40
   2b5f4:	str	r0, [r7, #56]	; 0x38
   2b5f8:	b	2b3f4 <__assert_fail@plt+0x1952c>
   2b5fc:	mov	r5, #0
   2b600:	cmp	r6, #0
   2b604:	mov	r4, r5
   2b608:	bne	2b43c <__assert_fail@plt+0x19574>
   2b60c:	b	2b48c <__assert_fail@plt+0x195c4>
   2b610:	mov	r4, #0
   2b614:	ldr	r1, [r7, #64]	; 0x40
   2b618:	cmp	r1, #31
   2b61c:	bne	2b498 <__assert_fail@plt+0x195d0>
   2b620:	mov	r0, #996	; 0x3e4
   2b624:	bl	38450 <__assert_fail@plt+0x26588>
   2b628:	cmp	r0, #0
   2b62c:	beq	2b648 <__assert_fail@plt+0x19780>
   2b630:	ldr	r1, [r7, #56]	; 0x38
   2b634:	str	r1, [r0]
   2b638:	mov	r1, #0
   2b63c:	str	r1, [r7, #64]	; 0x40
   2b640:	str	r0, [r7, #56]	; 0x38
   2b644:	b	2b49c <__assert_fail@plt+0x195d4>
   2b648:	mov	r6, #0
   2b64c:	cmp	r5, #0
   2b650:	bne	2b4e8 <__assert_fail@plt+0x19620>
   2b654:	b	2b4f4 <__assert_fail@plt+0x1962c>
   2b658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b65c:	add	fp, sp, #28
   2b660:	sub	sp, sp, #12
   2b664:	mov	r4, r0
   2b668:	ldr	r7, [r0, #4]
   2b66c:	ldr	r0, [r0, #8]
   2b670:	mov	r5, r2
   2b674:	mov	r9, r1
   2b678:	cmp	r0, r7
   2b67c:	bcs	2b748 <__assert_fail@plt+0x19880>
   2b680:	ldr	r1, [r4]
   2b684:	str	r9, [r1, r0, lsl #3]!
   2b688:	str	r5, [r1, #4]
   2b68c:	ldr	r0, [r4]
   2b690:	ldr	r1, [r4, #8]
   2b694:	add	r0, r0, r1, lsl #3
   2b698:	ldr	r1, [r0, #4]
   2b69c:	bfc	r1, #8, #10
   2b6a0:	str	r1, [r0, #4]
   2b6a4:	uxtb	r1, r5
   2b6a8:	cmp	r1, #5
   2b6ac:	bne	2b6c0 <__assert_fail@plt+0x197f8>
   2b6b0:	ldr	r2, [r4, #92]	; 0x5c
   2b6b4:	mov	r0, #1048576	; 0x100000
   2b6b8:	cmp	r2, #1
   2b6bc:	bgt	2b6d0 <__assert_fail@plt+0x19808>
   2b6c0:	sub	r0, r1, #6
   2b6c4:	clz	r0, r0
   2b6c8:	lsr	r0, r0, #5
   2b6cc:	lsl	r0, r0, #20
   2b6d0:	ldr	r1, [r4]
   2b6d4:	ldr	r2, [r4, #8]
   2b6d8:	add	r1, r1, r2, lsl #3
   2b6dc:	ldr	r2, [r1, #4]
   2b6e0:	bic	r2, r2, #1048576	; 0x100000
   2b6e4:	orr	r0, r2, r0
   2b6e8:	mvn	r2, #0
   2b6ec:	str	r0, [r1, #4]
   2b6f0:	ldr	r0, [r4, #8]
   2b6f4:	ldr	r1, [r4, #12]
   2b6f8:	str	r2, [r1, r0, lsl #2]
   2b6fc:	mov	r2, #0
   2b700:	ldr	r0, [r4, #8]
   2b704:	ldr	r1, [r4, #20]
   2b708:	add	r0, r0, r0, lsl #1
   2b70c:	str	r2, [r1, r0, lsl #2]!
   2b710:	str	r2, [r1, #4]
   2b714:	str	r2, [r1, #8]
   2b718:	ldr	r0, [r4, #8]
   2b71c:	ldr	r1, [r4, #24]
   2b720:	add	r0, r0, r0, lsl #1
   2b724:	str	r2, [r1, r0, lsl #2]!
   2b728:	str	r2, [r1, #4]
   2b72c:	str	r2, [r1, #8]
   2b730:	ldr	r6, [r4, #8]
   2b734:	add	r0, r6, #1
   2b738:	str	r0, [r4, #8]
   2b73c:	mov	r0, r6
   2b740:	sub	sp, fp, #28
   2b744:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b748:	movw	r0, #21845	; 0x5555
   2b74c:	lsl	r1, r7, #1
   2b750:	mvn	r6, #0
   2b754:	movt	r0, #5461	; 0x1555
   2b758:	cmp	r1, r0
   2b75c:	bhi	2b73c <__assert_fail@plt+0x19874>
   2b760:	ldr	r0, [r4]
   2b764:	str	r1, [sp, #8]
   2b768:	lsl	r1, r7, #4
   2b76c:	bl	38480 <__assert_fail@plt+0x265b8>
   2b770:	cmp	r0, #0
   2b774:	beq	2b73c <__assert_fail@plt+0x19874>
   2b778:	str	r0, [r4]
   2b77c:	lsl	r8, r7, #3
   2b780:	ldr	r0, [r4, #12]
   2b784:	mov	r1, r8
   2b788:	bl	38480 <__assert_fail@plt+0x265b8>
   2b78c:	str	r0, [sp, #4]
   2b790:	ldr	r0, [r4, #16]
   2b794:	mov	r1, r8
   2b798:	bl	38480 <__assert_fail@plt+0x265b8>
   2b79c:	mov	r2, r0
   2b7a0:	add	r1, r7, r7, lsl #1
   2b7a4:	ldr	r0, [r4, #20]
   2b7a8:	mov	r7, r2
   2b7ac:	lsl	r8, r1, #3
   2b7b0:	mov	r1, r8
   2b7b4:	bl	38480 <__assert_fail@plt+0x265b8>
   2b7b8:	mov	sl, r0
   2b7bc:	ldr	r0, [r4, #24]
   2b7c0:	mov	r1, r8
   2b7c4:	bl	38480 <__assert_fail@plt+0x265b8>
   2b7c8:	mov	r8, r0
   2b7cc:	ldr	r0, [sp, #4]
   2b7d0:	cmp	r0, #0
   2b7d4:	beq	2b7e4 <__assert_fail@plt+0x1991c>
   2b7d8:	cmp	r7, #0
   2b7dc:	cmpne	sl, #0
   2b7e0:	bne	2b80c <__assert_fail@plt+0x19944>
   2b7e4:	bl	17c10 <__assert_fail@plt+0x5d48>
   2b7e8:	mov	r0, r7
   2b7ec:	bl	17c10 <__assert_fail@plt+0x5d48>
   2b7f0:	mov	r0, sl
   2b7f4:	bl	17c10 <__assert_fail@plt+0x5d48>
   2b7f8:	mov	r0, r8
   2b7fc:	bl	17c10 <__assert_fail@plt+0x5d48>
   2b800:	mov	r0, r6
   2b804:	sub	sp, fp, #28
   2b808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b80c:	cmp	r8, #0
   2b810:	beq	2b7e4 <__assert_fail@plt+0x1991c>
   2b814:	add	r1, r4, #12
   2b818:	stm	r1, {r0, r7, sl}
   2b81c:	str	r8, [r4, #24]
   2b820:	ldr	r0, [sp, #8]
   2b824:	str	r0, [r4, #4]
   2b828:	ldr	r0, [r4, #8]
   2b82c:	b	2b680 <__assert_fail@plt+0x197b8>
   2b830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b834:	add	fp, sp, #28
   2b838:	sub	sp, sp, #44	; 0x2c
   2b83c:	mov	r8, r0
   2b840:	ldr	r0, [r1, #20]
   2b844:	add	r4, r2, r2, lsl #1
   2b848:	mov	r5, r1
   2b84c:	mov	r1, #0
   2b850:	mov	r9, r3
   2b854:	mov	r6, r2
   2b858:	add	r0, r0, r4, lsl #2
   2b85c:	ldr	r0, [r0, #4]
   2b860:	str	r1, [sp, #36]	; 0x24
   2b864:	add	r0, r0, #1
   2b868:	str	r0, [sp, #32]
   2b86c:	lsl	r0, r0, #2
   2b870:	bl	38450 <__assert_fail@plt+0x26588>
   2b874:	cmp	r0, #0
   2b878:	str	r0, [sp, #40]	; 0x28
   2b87c:	beq	2ba4c <__assert_fail@plt+0x19b84>
   2b880:	mov	r1, #1
   2b884:	str	r6, [r0]
   2b888:	str	r1, [sp, #36]	; 0x24
   2b88c:	mvn	r1, #0
   2b890:	ldr	r0, [r5, #24]
   2b894:	add	r0, r0, r4, lsl #2
   2b898:	str	r1, [r0, #4]
   2b89c:	ldr	r2, [r5]
   2b8a0:	add	r0, r2, r6, lsl #3
   2b8a4:	ldr	r0, [r0, #4]
   2b8a8:	ubfx	r1, r0, #8, #10
   2b8ac:	cmp	r1, #0
   2b8b0:	beq	2b90c <__assert_fail@plt+0x19a44>
   2b8b4:	ldr	r3, [r5, #20]
   2b8b8:	add	r3, r3, r4, lsl #2
   2b8bc:	ldr	r7, [r3, #4]
   2b8c0:	cmp	r7, #0
   2b8c4:	beq	2b90c <__assert_fail@plt+0x19a44>
   2b8c8:	ldr	r3, [r3, #8]
   2b8cc:	ldr	r3, [r3]
   2b8d0:	add	r2, r2, r3, lsl #3
   2b8d4:	ldrb	r2, [r2, #6]
   2b8d8:	tst	r2, #4
   2b8dc:	bne	2b90c <__assert_fail@plt+0x19a44>
   2b8e0:	str	r1, [sp]
   2b8e4:	mov	r0, r5
   2b8e8:	mov	r1, r6
   2b8ec:	mov	r2, r6
   2b8f0:	mov	r3, r6
   2b8f4:	bl	2ba58 <__assert_fail@plt+0x19b90>
   2b8f8:	cmp	r0, #0
   2b8fc:	bne	2ba44 <__assert_fail@plt+0x19b7c>
   2b900:	ldr	r0, [r5]
   2b904:	add	r0, r0, r6, lsl #3
   2b908:	ldr	r0, [r0, #4]
   2b90c:	tst	r0, #8
   2b910:	beq	2ba18 <__assert_fail@plt+0x19b50>
   2b914:	ldr	r0, [r5, #20]
   2b918:	add	r1, r0, r4, lsl #2
   2b91c:	ldr	r1, [r1, #4]
   2b920:	cmp	r1, #1
   2b924:	blt	2ba18 <__assert_fail@plt+0x19b50>
   2b928:	str	r8, [sp, #12]
   2b92c:	mov	r8, #0
   2b930:	add	r7, sp, #16
   2b934:	add	sl, sp, #32
   2b938:	mov	r6, #0
   2b93c:	str	r9, [sp, #8]
   2b940:	b	2b960 <__assert_fail@plt+0x19a98>
   2b944:	mov	r8, #1
   2b948:	ldr	r0, [r5, #20]
   2b94c:	add	r6, r6, #1
   2b950:	add	r1, r0, r4, lsl #2
   2b954:	ldr	r1, [r1, #4]
   2b958:	cmp	r6, r1
   2b95c:	bge	2b9ec <__assert_fail@plt+0x19b24>
   2b960:	add	r0, r0, r4, lsl #2
   2b964:	ldr	r0, [r0, #8]
   2b968:	ldr	r2, [r0, r6, lsl #2]
   2b96c:	ldr	r0, [r5, #24]
   2b970:	add	r9, r2, r2, lsl #1
   2b974:	add	r0, r0, r9, lsl #2
   2b978:	ldr	r1, [r0, #4]
   2b97c:	cmn	r1, #1
   2b980:	beq	2b944 <__assert_fail@plt+0x19a7c>
   2b984:	cmp	r1, #0
   2b988:	bne	2b9a8 <__assert_fail@plt+0x19ae0>
   2b98c:	mov	r0, r7
   2b990:	mov	r1, r5
   2b994:	mov	r3, #0
   2b998:	bl	2b830 <__assert_fail@plt+0x19968>
   2b99c:	cmp	r0, #0
   2b9a0:	beq	2b9b8 <__assert_fail@plt+0x19af0>
   2b9a4:	b	2ba44 <__assert_fail@plt+0x19b7c>
   2b9a8:	vldr	d16, [r0]
   2b9ac:	ldr	r0, [r0, #8]
   2b9b0:	str	r0, [sp, #24]
   2b9b4:	vstr	d16, [sp, #16]
   2b9b8:	mov	r0, sl
   2b9bc:	mov	r1, r7
   2b9c0:	bl	2bee8 <__assert_fail@plt+0x1a020>
   2b9c4:	cmp	r0, #0
   2b9c8:	bne	2ba44 <__assert_fail@plt+0x19b7c>
   2b9cc:	ldr	r0, [r5, #24]
   2b9d0:	add	r0, r0, r9, lsl #2
   2b9d4:	ldr	r0, [r0, #4]
   2b9d8:	cmp	r0, #0
   2b9dc:	bne	2b948 <__assert_fail@plt+0x19a80>
   2b9e0:	ldr	r0, [sp, #24]
   2b9e4:	bl	17c10 <__assert_fail@plt+0x5d48>
   2b9e8:	b	2b944 <__assert_fail@plt+0x19a7c>
   2b9ec:	tst	r8, #1
   2b9f0:	ldr	r8, [sp, #12]
   2b9f4:	ldr	r0, [sp, #8]
   2b9f8:	beq	2ba18 <__assert_fail@plt+0x19b50>
   2b9fc:	cmp	r0, #0
   2ba00:	bne	2ba18 <__assert_fail@plt+0x19b50>
   2ba04:	ldr	r0, [r5, #24]
   2ba08:	mov	r1, #0
   2ba0c:	add	r0, r0, r4, lsl #2
   2ba10:	str	r1, [r0, #4]
   2ba14:	b	2ba30 <__assert_fail@plt+0x19b68>
   2ba18:	ldr	r0, [r5, #24]
   2ba1c:	vldr	d16, [sp, #32]
   2ba20:	ldr	r1, [sp, #40]	; 0x28
   2ba24:	add	r0, r0, r4, lsl #2
   2ba28:	str	r1, [r0, #8]
   2ba2c:	vstr	d16, [r0]
   2ba30:	ldr	r0, [sp, #40]	; 0x28
   2ba34:	vldr	d16, [sp, #32]
   2ba38:	str	r0, [r8, #8]
   2ba3c:	mov	r0, #0
   2ba40:	vstr	d16, [r8]
   2ba44:	sub	sp, fp, #28
   2ba48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba4c:	mov	r0, #12
   2ba50:	sub	sp, fp, #28
   2ba54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ba58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ba5c:	add	fp, sp, #28
   2ba60:	sub	sp, sp, #20
   2ba64:	mov	r9, r0
   2ba68:	ldr	r0, [fp, #8]
   2ba6c:	mov	r8, r2
   2ba70:	mov	r5, r1
   2ba74:	str	r3, [sp, #8]
   2ba78:	str	r0, [sp, #12]
   2ba7c:	ldr	r1, [sp, #12]
   2ba80:	movw	r0, #65280	; 0xff00
   2ba84:	movt	r0, #3
   2ba88:	and	r0, r0, r1, lsl #8
   2ba8c:	str	r0, [sp, #16]
   2ba90:	ldr	r2, [r9]
   2ba94:	add	r3, r2, r5, lsl #3
   2ba98:	ldrb	r0, [r3, #4]!
   2ba9c:	cmp	r0, #4
   2baa0:	bne	2bb78 <__assert_fail@plt+0x19cb0>
   2baa4:	ldr	r0, [r9, #12]
   2baa8:	ldr	r1, [r9, #20]
   2baac:	add	r7, r8, r8, lsl #1
   2bab0:	ldr	r6, [r0, r5, lsl #2]
   2bab4:	add	r0, r1, r7, lsl #2
   2bab8:	mov	r1, #0
   2babc:	str	r1, [r0, #4]
   2bac0:	mov	r0, r9
   2bac4:	ldr	r1, [r2, r6, lsl #3]!
   2bac8:	ldr	r2, [r2, #4]
   2bacc:	bl	2b658 <__assert_fail@plt+0x19790>
   2bad0:	cmn	r0, #1
   2bad4:	beq	2bed8 <__assert_fail@plt+0x1a010>
   2bad8:	mov	r4, r0
   2badc:	ldr	r0, [r9]
   2bae0:	movw	r2, #255	; 0xff
   2bae4:	movt	r2, #65532	; 0xfffc
   2bae8:	add	r0, r0, r4, lsl #3
   2baec:	ldr	r1, [r0, #4]
   2baf0:	and	r1, r1, r2
   2baf4:	ldr	r2, [sp, #16]
   2baf8:	orr	r1, r1, r2
   2bafc:	movw	r2, #65280	; 0xff00
   2bb00:	str	r1, [r0, #4]
   2bb04:	movt	r2, #3
   2bb08:	ldr	r0, [r9]
   2bb0c:	add	r1, r0, r6, lsl #3
   2bb10:	add	r0, r0, r4, lsl #3
   2bb14:	ldr	r1, [r1, #4]
   2bb18:	and	r1, r1, r2
   2bb1c:	ldr	r2, [r0, #4]
   2bb20:	orr	r1, r1, r2
   2bb24:	str	r1, [r0, #4]
   2bb28:	ldr	r0, [r9]
   2bb2c:	add	r0, r0, r4, lsl #3
   2bb30:	ldr	r1, [r0, #4]
   2bb34:	orr	r1, r1, #262144	; 0x40000
   2bb38:	str	r1, [r0, #4]
   2bb3c:	ldr	r0, [r9, #16]
   2bb40:	str	r6, [r0, r4, lsl #2]
   2bb44:	ldr	r0, [r9, #12]
   2bb48:	ldr	r1, [r0, r5, lsl #2]
   2bb4c:	str	r1, [r0, r8, lsl #2]
   2bb50:	mov	r1, r4
   2bb54:	ldr	r0, [r9, #20]
   2bb58:	add	r0, r0, r7, lsl #2
   2bb5c:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   2bb60:	cmp	r0, #0
   2bb64:	mov	r5, r6
   2bb68:	mov	r8, r4
   2bb6c:	mov	r7, #12
   2bb70:	bne	2ba90 <__assert_fail@plt+0x19bc8>
   2bb74:	b	2bea8 <__assert_fail@plt+0x19fe0>
   2bb78:	ldr	r0, [r9, #20]
   2bb7c:	add	ip, r5, r5, lsl #1
   2bb80:	add	r7, r0, ip, lsl #2
   2bb84:	ldr	r1, [r7, #4]
   2bb88:	cmp	r1, #0
   2bb8c:	beq	2be8c <__assert_fail@plt+0x19fc4>
   2bb90:	ldr	r7, [r7, #8]
   2bb94:	add	r4, r8, r8, lsl #1
   2bb98:	cmp	r1, #1
   2bb9c:	add	r0, r0, r4, lsl #2
   2bba0:	ldr	sl, [r7]
   2bba4:	mov	r7, #0
   2bba8:	str	r7, [r0, #4]
   2bbac:	beq	2bdb4 <__assert_fail@plt+0x19eec>
   2bbb0:	ldr	r1, [r9, #8]
   2bbb4:	mov	r8, r4
   2bbb8:	ldr	r4, [sp, #12]
   2bbbc:	sub	r3, r1, #1
   2bbc0:	cmp	r3, #1
   2bbc4:	blt	2bc14 <__assert_fail@plt+0x19d4c>
   2bbc8:	add	r3, r2, r3, lsl #3
   2bbcc:	ldr	r7, [r3, #4]
   2bbd0:	ands	r3, r7, #262144	; 0x40000
   2bbd4:	beq	2bc14 <__assert_fail@plt+0x19d4c>
   2bbd8:	ldr	r6, [r9, #16]
   2bbdc:	sub	r3, r2, #12
   2bbe0:	sub	r6, r6, #4
   2bbe4:	ldr	r5, [r6, r1, lsl #2]
   2bbe8:	cmp	r5, sl
   2bbec:	ubfxeq	r7, r7, #8, #10
   2bbf0:	cmpeq	r7, r4
   2bbf4:	beq	2bd98 <__assert_fail@plt+0x19ed0>
   2bbf8:	sub	r7, r1, #2
   2bbfc:	cmp	r7, #1
   2bc00:	blt	2bc14 <__assert_fail@plt+0x19d4c>
   2bc04:	ldr	r7, [r3, r1, lsl #3]
   2bc08:	sub	r1, r1, #1
   2bc0c:	ands	r5, r7, #262144	; 0x40000
   2bc10:	bne	2bbe4 <__assert_fail@plt+0x19d1c>
   2bc14:	ldr	r1, [r2, sl, lsl #3]!
   2bc18:	mov	r0, r9
   2bc1c:	mov	r5, ip
   2bc20:	ldr	r2, [r2, #4]
   2bc24:	bl	2b658 <__assert_fail@plt+0x19790>
   2bc28:	mov	r7, #12
   2bc2c:	cmn	r0, #1
   2bc30:	beq	2bea8 <__assert_fail@plt+0x19fe0>
   2bc34:	mov	r6, r0
   2bc38:	ldr	r0, [r9]
   2bc3c:	movw	r2, #255	; 0xff
   2bc40:	mov	r4, r8
   2bc44:	movt	r2, #65532	; 0xfffc
   2bc48:	add	r0, r0, r6, lsl #3
   2bc4c:	ldr	r1, [r0, #4]
   2bc50:	and	r1, r1, r2
   2bc54:	ldr	r2, [sp, #16]
   2bc58:	orr	r1, r1, r2
   2bc5c:	movw	r2, #65280	; 0xff00
   2bc60:	str	r1, [r0, #4]
   2bc64:	movt	r2, #3
   2bc68:	ldr	r0, [r9]
   2bc6c:	add	r1, r0, sl, lsl #3
   2bc70:	add	r0, r0, r6, lsl #3
   2bc74:	ldr	r1, [r1, #4]
   2bc78:	and	r1, r1, r2
   2bc7c:	ldr	r2, [r0, #4]
   2bc80:	orr	r1, r1, r2
   2bc84:	str	r1, [r0, #4]
   2bc88:	ldr	r0, [r9]
   2bc8c:	add	r0, r0, r6, lsl #3
   2bc90:	ldr	r1, [r0, #4]
   2bc94:	orr	r1, r1, #262144	; 0x40000
   2bc98:	str	r1, [r0, #4]
   2bc9c:	mov	r1, r6
   2bca0:	ldr	r0, [r9, #16]
   2bca4:	str	sl, [r0, r6, lsl #2]
   2bca8:	ldr	r0, [r9, #20]
   2bcac:	add	r0, r0, r8, lsl #2
   2bcb0:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   2bcb4:	cmp	r0, #0
   2bcb8:	beq	2bea8 <__assert_fail@plt+0x19fe0>
   2bcbc:	ldr	r0, [sp, #12]
   2bcc0:	ldr	r3, [sp, #8]
   2bcc4:	mov	r1, sl
   2bcc8:	mov	r2, r6
   2bccc:	str	r0, [sp]
   2bcd0:	mov	r0, r9
   2bcd4:	bl	2ba58 <__assert_fail@plt+0x19b90>
   2bcd8:	cmp	r0, #0
   2bcdc:	bne	2bea4 <__assert_fail@plt+0x19fdc>
   2bce0:	ldr	r1, [r9, #20]
   2bce4:	ldr	r0, [r9]
   2bce8:	add	r1, r1, r5, lsl #2
   2bcec:	ldr	r1, [r1, #8]
   2bcf0:	ldr	r5, [r1, #4]
   2bcf4:	ldr	r1, [r0, r5, lsl #3]!
   2bcf8:	ldr	r2, [r0, #4]
   2bcfc:	mov	r0, r9
   2bd00:	bl	2b658 <__assert_fail@plt+0x19790>
   2bd04:	mov	r7, #12
   2bd08:	cmn	r0, #1
   2bd0c:	beq	2bea8 <__assert_fail@plt+0x19fe0>
   2bd10:	mov	r8, r0
   2bd14:	ldr	r0, [r9]
   2bd18:	movw	r2, #255	; 0xff
   2bd1c:	movt	r2, #65532	; 0xfffc
   2bd20:	add	r0, r0, r8, lsl #3
   2bd24:	ldr	r1, [r0, #4]
   2bd28:	and	r1, r1, r2
   2bd2c:	ldr	r2, [sp, #16]
   2bd30:	orr	r1, r1, r2
   2bd34:	movw	r2, #65280	; 0xff00
   2bd38:	str	r1, [r0, #4]
   2bd3c:	movt	r2, #3
   2bd40:	ldr	r0, [r9]
   2bd44:	add	r1, r0, r5, lsl #3
   2bd48:	add	r0, r0, r8, lsl #3
   2bd4c:	ldr	r1, [r1, #4]
   2bd50:	and	r1, r1, r2
   2bd54:	ldr	r2, [r0, #4]
   2bd58:	orr	r1, r1, r2
   2bd5c:	str	r1, [r0, #4]
   2bd60:	ldr	r0, [r9]
   2bd64:	add	r0, r0, r8, lsl #3
   2bd68:	ldr	r1, [r0, #4]
   2bd6c:	orr	r1, r1, #262144	; 0x40000
   2bd70:	str	r1, [r0, #4]
   2bd74:	mov	r1, r8
   2bd78:	ldr	r0, [r9, #16]
   2bd7c:	str	r5, [r0, r8, lsl #2]
   2bd80:	ldr	r0, [r9, #20]
   2bd84:	add	r0, r0, r4, lsl #2
   2bd88:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   2bd8c:	cmp	r0, #0
   2bd90:	bne	2ba90 <__assert_fail@plt+0x19bc8>
   2bd94:	b	2bea8 <__assert_fail@plt+0x19fe0>
   2bd98:	sub	r1, r1, #1
   2bd9c:	mov	r5, ip
   2bda0:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   2bda4:	cmp	r0, #0
   2bda8:	mov	r4, r8
   2bdac:	bne	2bce0 <__assert_fail@plt+0x19e18>
   2bdb0:	b	2bed8 <__assert_fail@plt+0x1a010>
   2bdb4:	ldr	r1, [sp, #8]
   2bdb8:	cmp	r5, r1
   2bdbc:	bne	2bdc8 <__assert_fail@plt+0x19f00>
   2bdc0:	cmp	r8, r5
   2bdc4:	bne	2beb4 <__assert_fail@plt+0x19fec>
   2bdc8:	ldr	r1, [r2, sl, lsl #3]!
   2bdcc:	ldr	r6, [r3]
   2bdd0:	mov	r0, r9
   2bdd4:	ldr	r2, [r2, #4]
   2bdd8:	bl	2b658 <__assert_fail@plt+0x19790>
   2bddc:	mov	r8, r0
   2bde0:	ubfx	r0, r6, #8, #10
   2bde4:	mov	r7, #12
   2bde8:	cmn	r8, #1
   2bdec:	beq	2bea8 <__assert_fail@plt+0x19fe0>
   2bdf0:	ldr	r1, [sp, #12]
   2bdf4:	movw	r7, #255	; 0xff
   2bdf8:	movt	r7, #65532	; 0xfffc
   2bdfc:	orr	r1, r0, r1
   2be00:	movw	r0, #65280	; 0xff00
   2be04:	movt	r0, #3
   2be08:	str	r1, [sp, #12]
   2be0c:	mov	r3, r0
   2be10:	and	r0, r0, r1, lsl #8
   2be14:	ldr	r1, [r9]
   2be18:	add	r1, r1, r8, lsl #3
   2be1c:	ldr	r2, [r1, #4]
   2be20:	and	r2, r2, r7
   2be24:	mov	r7, #12
   2be28:	orr	r0, r2, r0
   2be2c:	str	r0, [r1, #4]
   2be30:	ldr	r0, [r9]
   2be34:	add	r1, r0, sl, lsl #3
   2be38:	add	r0, r0, r8, lsl #3
   2be3c:	ldr	r1, [r1, #4]
   2be40:	ldr	r2, [r0, #4]
   2be44:	and	r1, r1, r3
   2be48:	orr	r1, r1, r2
   2be4c:	str	r1, [r0, #4]
   2be50:	ldr	r0, [r9]
   2be54:	add	r0, r0, r8, lsl #3
   2be58:	ldr	r1, [r0, #4]
   2be5c:	orr	r1, r1, #262144	; 0x40000
   2be60:	str	r1, [r0, #4]
   2be64:	mov	r1, r8
   2be68:	ldr	r0, [r9, #16]
   2be6c:	str	sl, [r0, r8, lsl #2]
   2be70:	ldr	r0, [r9, #20]
   2be74:	add	r0, r0, r4, lsl #2
   2be78:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   2be7c:	cmp	r0, #0
   2be80:	mov	r5, sl
   2be84:	bne	2ba7c <__assert_fail@plt+0x19bb4>
   2be88:	b	2bea8 <__assert_fail@plt+0x19fe0>
   2be8c:	ldr	r0, [r9, #12]
   2be90:	ldr	r1, [r0, r5, lsl #2]
   2be94:	str	r1, [r0, r8, lsl #2]
   2be98:	mov	r0, #0
   2be9c:	sub	sp, fp, #28
   2bea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bea4:	mov	r7, r0
   2bea8:	mov	r0, r7
   2beac:	sub	sp, fp, #28
   2beb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2beb4:	mov	r1, sl
   2beb8:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   2bebc:	mov	r1, r0
   2bec0:	mov	r7, #12
   2bec4:	mov	r0, #0
   2bec8:	cmp	r1, #0
   2becc:	moveq	r0, r7
   2bed0:	sub	sp, fp, #28
   2bed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bed8:	mov	r7, #12
   2bedc:	mov	r0, r7
   2bee0:	sub	sp, fp, #28
   2bee4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2bee8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2beec:	add	fp, sp, #24
   2bef0:	mov	r8, #0
   2bef4:	cmp	r1, #0
   2bef8:	beq	2c05c <__assert_fail@plt+0x1a194>
   2befc:	mov	r6, r1
   2bf00:	ldr	r1, [r1, #4]
   2bf04:	cmp	r1, #0
   2bf08:	beq	2c05c <__assert_fail@plt+0x1a194>
   2bf0c:	mov	r9, r0
   2bf10:	ldr	r2, [r0]
   2bf14:	ldr	r0, [r0, #4]
   2bf18:	add	r3, r0, r1, lsl #1
   2bf1c:	cmp	r2, r3
   2bf20:	bge	2bf4c <__assert_fail@plt+0x1a084>
   2bf24:	ldr	r0, [r9, #8]
   2bf28:	add	r7, r2, r1
   2bf2c:	lsl	r1, r7, #3
   2bf30:	bl	38480 <__assert_fail@plt+0x265b8>
   2bf34:	cmp	r0, #0
   2bf38:	beq	2c07c <__assert_fail@plt+0x1a1b4>
   2bf3c:	str	r0, [r9, #8]
   2bf40:	lsl	r0, r7, #1
   2bf44:	str	r0, [r9]
   2bf48:	ldr	r0, [r9, #4]
   2bf4c:	cmp	r0, #0
   2bf50:	beq	2c064 <__assert_fail@plt+0x1a19c>
   2bf54:	ldr	r2, [r6, #4]
   2bf58:	sub	r1, r0, #1
   2bf5c:	add	r7, r0, r2, lsl #1
   2bf60:	sub	r0, r2, #1
   2bf64:	orrs	r2, r0, r1
   2bf68:	bmi	2bfc4 <__assert_fail@plt+0x1a0fc>
   2bf6c:	ldr	r2, [r6, #8]
   2bf70:	ldr	r3, [r9, #8]
   2bf74:	ldr	r4, [r2, r0, lsl #2]
   2bf78:	ldr	r5, [r3, r1, lsl #2]
   2bf7c:	cmp	r5, r4
   2bf80:	beq	2bfb0 <__assert_fail@plt+0x1a0e8>
   2bf84:	sublt	r7, r7, #1
   2bf88:	subge	r1, r1, #1
   2bf8c:	sublt	r0, r0, #1
   2bf90:	strlt	r4, [r3, r7, lsl #2]
   2bf94:	orr	r5, r0, r1
   2bf98:	cmn	r5, #1
   2bf9c:	ble	2bfc4 <__assert_fail@plt+0x1a0fc>
   2bfa0:	ldr	r4, [r2, r0, lsl #2]
   2bfa4:	ldr	r5, [r3, r1, lsl #2]
   2bfa8:	cmp	r5, r4
   2bfac:	bne	2bf84 <__assert_fail@plt+0x1a0bc>
   2bfb0:	sub	r1, r1, #1
   2bfb4:	sub	r0, r0, #1
   2bfb8:	orr	r5, r0, r1
   2bfbc:	cmn	r5, #1
   2bfc0:	bgt	2bfa0 <__assert_fail@plt+0x1a0d8>
   2bfc4:	cmp	r0, #0
   2bfc8:	bmi	2bfe8 <__assert_fail@plt+0x1a120>
   2bfcc:	add	r2, r0, #1
   2bfd0:	ldr	r0, [r9, #8]
   2bfd4:	ldr	r1, [r6, #8]
   2bfd8:	sub	r7, r7, r2
   2bfdc:	lsl	r2, r2, #2
   2bfe0:	add	r0, r0, r7, lsl #2
   2bfe4:	bl	11ab4 <memcpy@plt>
   2bfe8:	ldr	r0, [r9, #4]
   2bfec:	ldr	r2, [r6, #4]
   2bff0:	sub	r1, r0, #1
   2bff4:	add	r3, r1, r2, lsl #1
   2bff8:	sub	r2, r3, r7
   2bffc:	adds	r2, r2, #1
   2c000:	bcs	2c05c <__assert_fail@plt+0x1a194>
   2c004:	add	r0, r2, r0
   2c008:	str	r0, [r9, #4]
   2c00c:	ldr	r0, [r9, #8]
   2c010:	ldr	r6, [r0, r1, lsl #2]
   2c014:	ldr	r5, [r0, r3, lsl #2]
   2c018:	cmp	r5, r6
   2c01c:	ble	2c038 <__assert_fail@plt+0x1a170>
   2c020:	add	r6, r2, r1
   2c024:	subs	r2, r2, #1
   2c028:	sub	r3, r3, #1
   2c02c:	str	r5, [r0, r6, lsl #2]
   2c030:	bne	2c010 <__assert_fail@plt+0x1a148>
   2c034:	b	2c05c <__assert_fail@plt+0x1a194>
   2c038:	add	r5, r2, r1
   2c03c:	cmp	r1, #0
   2c040:	str	r6, [r0, r5, lsl #2]
   2c044:	sub	r6, r1, #1
   2c048:	mov	r1, r6
   2c04c:	bgt	2c010 <__assert_fail@plt+0x1a148>
   2c050:	add	r1, r0, r7, lsl #2
   2c054:	lsl	r2, r2, #2
   2c058:	bl	11ab4 <memcpy@plt>
   2c05c:	mov	r0, r8
   2c060:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c064:	ldr	r0, [r6, #4]
   2c068:	str	r0, [r9, #4]
   2c06c:	ldr	r0, [r9, #8]
   2c070:	ldr	r2, [r6, #4]
   2c074:	ldr	r1, [r6, #8]
   2c078:	b	2c054 <__assert_fail@plt+0x1a18c>
   2c07c:	mov	r8, #12
   2c080:	mov	r0, r8
   2c084:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2c088:	push	{r4, r5, r6, sl, fp, lr}
   2c08c:	add	fp, sp, #16
   2c090:	ldr	r2, [r0]
   2c094:	mov	r5, r1
   2c098:	mov	r4, r0
   2c09c:	cmp	r2, #0
   2c0a0:	beq	2c0d0 <__assert_fail@plt+0x1a208>
   2c0a4:	ldr	r1, [r4, #4]
   2c0a8:	cmp	r1, #0
   2c0ac:	bne	2c10c <__assert_fail@plt+0x1a244>
   2c0b0:	ldr	r0, [r4, #8]
   2c0b4:	str	r5, [r0]
   2c0b8:	ldr	r0, [r4, #4]
   2c0bc:	mov	r6, #1
   2c0c0:	add	r0, r0, #1
   2c0c4:	str	r0, [r4, #4]
   2c0c8:	mov	r0, r6
   2c0cc:	pop	{r4, r5, r6, sl, fp, pc}
   2c0d0:	mov	r6, #1
   2c0d4:	mov	r0, #4
   2c0d8:	str	r6, [r4]
   2c0dc:	str	r6, [r4, #4]
   2c0e0:	bl	38450 <__assert_fail@plt+0x26588>
   2c0e4:	cmp	r0, #0
   2c0e8:	str	r0, [r4, #8]
   2c0ec:	strne	r5, [r0]
   2c0f0:	movne	r0, r6
   2c0f4:	popne	{r4, r5, r6, sl, fp, pc}
   2c0f8:	mov	r6, #0
   2c0fc:	mov	r0, r6
   2c100:	str	r6, [r4]
   2c104:	str	r6, [r4, #4]
   2c108:	pop	{r4, r5, r6, sl, fp, pc}
   2c10c:	cmp	r2, r1
   2c110:	bne	2c148 <__assert_fail@plt+0x1a280>
   2c114:	lsl	r0, r2, #1
   2c118:	lsl	r1, r2, #3
   2c11c:	str	r0, [r4]
   2c120:	ldr	r0, [r4, #8]
   2c124:	bl	38480 <__assert_fail@plt+0x265b8>
   2c128:	cmp	r0, #0
   2c12c:	beq	2c1fc <__assert_fail@plt+0x1a334>
   2c130:	str	r0, [r4, #8]
   2c134:	ldr	r1, [r4, #4]
   2c138:	ldr	r2, [r0]
   2c13c:	cmp	r2, r5
   2c140:	bgt	2c158 <__assert_fail@plt+0x1a290>
   2c144:	b	2c1c4 <__assert_fail@plt+0x1a2fc>
   2c148:	ldr	r0, [r4, #8]
   2c14c:	ldr	r2, [r0]
   2c150:	cmp	r2, r5
   2c154:	ble	2c1c4 <__assert_fail@plt+0x1a2fc>
   2c158:	cmp	r1, #1
   2c15c:	blt	2c1f4 <__assert_fail@plt+0x1a32c>
   2c160:	ands	r3, r1, #3
   2c164:	sub	ip, r1, #1
   2c168:	beq	2c18c <__assert_fail@plt+0x1a2c4>
   2c16c:	add	lr, r0, r1, lsl #2
   2c170:	mov	r6, lr
   2c174:	ldr	r2, [r6, #-4]!
   2c178:	subs	r3, r3, #1
   2c17c:	sub	r1, r1, #1
   2c180:	str	r2, [lr]
   2c184:	mov	lr, r6
   2c188:	bne	2c174 <__assert_fail@plt+0x1a2ac>
   2c18c:	cmp	ip, #3
   2c190:	bcc	2c1bc <__assert_fail@plt+0x1a2f4>
   2c194:	add	r2, r0, r1, lsl #2
   2c198:	sub	r2, r2, #8
   2c19c:	sub	lr, r2, #8
   2c1a0:	sub	r1, r1, #4
   2c1a4:	sub	sl, r2, #4
   2c1a8:	sub	r2, r2, #16
   2c1ac:	ldm	lr, {r3, r6, ip, lr}
   2c1b0:	cmp	r1, #0
   2c1b4:	stm	sl, {r3, r6, ip, lr}
   2c1b8:	bgt	2c19c <__assert_fail@plt+0x1a2d4>
   2c1bc:	mov	r1, #0
   2c1c0:	b	2c1f4 <__assert_fail@plt+0x1a32c>
   2c1c4:	add	r2, r0, r1, lsl #2
   2c1c8:	ldr	r3, [r2, #-4]
   2c1cc:	cmp	r3, r5
   2c1d0:	ble	2c1f4 <__assert_fail@plt+0x1a32c>
   2c1d4:	sub	r1, r1, #2
   2c1d8:	str	r3, [r2]
   2c1dc:	sub	r1, r1, #1
   2c1e0:	ldr	r3, [r2, #-8]
   2c1e4:	sub	r2, r2, #4
   2c1e8:	cmp	r3, r5
   2c1ec:	bgt	2c1d8 <__assert_fail@plt+0x1a310>
   2c1f0:	add	r1, r1, #2
   2c1f4:	str	r5, [r0, r1, lsl #2]
   2c1f8:	b	2c0b8 <__assert_fail@plt+0x1a1f0>
   2c1fc:	mov	r6, #0
   2c200:	mov	r0, r6
   2c204:	pop	{r4, r5, r6, sl, fp, pc}
   2c208:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c20c:	add	fp, sp, #28
   2c210:	sub	sp, sp, #28
   2c214:	ldr	sl, [r2, #4]
   2c218:	cmp	sl, #0
   2c21c:	beq	2c440 <__assert_fail@plt+0x1a578>
   2c220:	mov	r9, r3
   2c224:	add	r7, sl, r3
   2c228:	cmp	sl, #1
   2c22c:	str	r1, [sp, #16]
   2c230:	str	r2, [sp, #20]
   2c234:	str	r0, [sp]
   2c238:	blt	2c320 <__assert_fail@plt+0x1a458>
   2c23c:	ldr	ip, [r2, #8]
   2c240:	mov	r8, #0
   2c244:	cmp	sl, #4
   2c248:	bcc	2c308 <__assert_fail@plt+0x1a440>
   2c24c:	mov	r3, #0
   2c250:	bic	r8, sl, #3
   2c254:	mov	r1, #1
   2c258:	vdup.32	q8, r3
   2c25c:	sub	r4, r8, #4
   2c260:	add	r1, r1, r4, lsr #2
   2c264:	cmp	r4, #12
   2c268:	and	lr, r1, #3
   2c26c:	vmov.32	d16[0], r7
   2c270:	bcc	2c2c4 <__assert_fail@plt+0x1a3fc>
   2c274:	sub	r6, r1, lr
   2c278:	mov	r3, #0
   2c27c:	mov	r4, #64	; 0x40
   2c280:	mov	r7, ip
   2c284:	mov	r1, ip
   2c288:	vld1.32	{d18-d19}, [r1], r4
   2c28c:	add	r5, r7, #16
   2c290:	add	r2, r7, #32
   2c294:	subs	r6, r6, #4
   2c298:	add	r3, r3, #16
   2c29c:	vld1.32	{d20-d21}, [r5]
   2c2a0:	vadd.i32	q8, q9, q8
   2c2a4:	vld1.32	{d18-d19}, [r2]
   2c2a8:	add	r2, r7, #48	; 0x30
   2c2ac:	mov	r7, r1
   2c2b0:	vadd.i32	q8, q10, q8
   2c2b4:	vld1.32	{d20-d21}, [r2]
   2c2b8:	vadd.i32	q8, q9, q8
   2c2bc:	vadd.i32	q8, q10, q8
   2c2c0:	bne	2c288 <__assert_fail@plt+0x1a3c0>
   2c2c4:	cmp	lr, #0
   2c2c8:	beq	2c2e4 <__assert_fail@plt+0x1a41c>
   2c2cc:	add	r1, ip, r3, lsl #2
   2c2d0:	rsb	r3, lr, #0
   2c2d4:	vld1.32	{d18-d19}, [r1]!
   2c2d8:	adds	r3, r3, #1
   2c2dc:	vadd.i32	q8, q9, q8
   2c2e0:	bcc	2c2d4 <__assert_fail@plt+0x1a40c>
   2c2e4:	vext.8	q9, q8, q8, #8
   2c2e8:	ldr	r1, [sp, #16]
   2c2ec:	ldr	r2, [sp, #20]
   2c2f0:	cmp	sl, r8
   2c2f4:	vadd.i32	q8, q8, q9
   2c2f8:	vdup.32	q9, d16[1]
   2c2fc:	vadd.i32	q8, q8, q9
   2c300:	vmov.32	r7, d16[0]
   2c304:	beq	2c320 <__assert_fail@plt+0x1a458>
   2c308:	add	r0, ip, r8, lsl #2
   2c30c:	sub	r6, sl, r8
   2c310:	ldr	r3, [r0], #4
   2c314:	subs	r6, r6, #1
   2c318:	add	r7, r3, r7
   2c31c:	bne	2c310 <__assert_fail@plt+0x1a448>
   2c320:	ldr	r0, [r1, #32]
   2c324:	ldr	r1, [r1, #68]	; 0x44
   2c328:	and	r1, r1, r7
   2c32c:	add	r3, r1, r1, lsl #1
   2c330:	ldr	r1, [r0, r3, lsl #2]
   2c334:	cmp	r1, #1
   2c338:	blt	2c3d8 <__assert_fail@plt+0x1a510>
   2c33c:	cmp	r2, #0
   2c340:	beq	2c3d8 <__assert_fail@plt+0x1a510>
   2c344:	add	r0, r0, r3, lsl #2
   2c348:	sub	ip, sl, #1
   2c34c:	mov	r6, #0
   2c350:	ldr	lr, [r0, #8]
   2c354:	ldr	r8, [lr, r6, lsl #2]
   2c358:	ldr	r3, [r8]
   2c35c:	cmp	r3, r7
   2c360:	beq	2c380 <__assert_fail@plt+0x1a4b8>
   2c364:	add	r6, r6, #1
   2c368:	cmp	r6, r1
   2c36c:	bge	2c3d8 <__assert_fail@plt+0x1a510>
   2c370:	ldr	r8, [lr, r6, lsl #2]
   2c374:	ldr	r3, [r8]
   2c378:	cmp	r3, r7
   2c37c:	bne	2c364 <__assert_fail@plt+0x1a49c>
   2c380:	ldrb	r3, [r8, #52]	; 0x34
   2c384:	and	r3, r3, #15
   2c388:	cmp	r3, r9
   2c38c:	bne	2c364 <__assert_fail@plt+0x1a49c>
   2c390:	ldr	r4, [r8, #40]	; 0x28
   2c394:	cmp	r4, #0
   2c398:	beq	2c364 <__assert_fail@plt+0x1a49c>
   2c39c:	ldr	r3, [r4, #4]
   2c3a0:	cmp	r3, sl
   2c3a4:	bne	2c364 <__assert_fail@plt+0x1a49c>
   2c3a8:	mov	r3, ip
   2c3ac:	add	r5, r3, #1
   2c3b0:	cmp	r5, #1
   2c3b4:	blt	2cc14 <__assert_fail@plt+0x1ad4c>
   2c3b8:	ldr	r5, [r2, #8]
   2c3bc:	ldr	r0, [r4, #8]
   2c3c0:	ldr	r5, [r5, r3, lsl #2]
   2c3c4:	ldr	r0, [r0, r3, lsl #2]
   2c3c8:	sub	r3, r3, #1
   2c3cc:	cmp	r0, r5
   2c3d0:	beq	2c3ac <__assert_fail@plt+0x1a4e4>
   2c3d4:	b	2c364 <__assert_fail@plt+0x1a49c>
   2c3d8:	mov	r0, #56	; 0x38
   2c3dc:	mov	r1, #1
   2c3e0:	bl	383fc <__assert_fail@plt+0x26534>
   2c3e4:	cmp	r0, #0
   2c3e8:	beq	2cc34 <__assert_fail@plt+0x1ad6c>
   2c3ec:	ldr	ip, [sp, #20]
   2c3f0:	mov	r8, r0
   2c3f4:	add	r6, r0, #4
   2c3f8:	ldr	r3, [ip, #4]
   2c3fc:	cmp	r3, #1
   2c400:	str	r3, [r0, #8]
   2c404:	blt	2c454 <__assert_fail@plt+0x1a58c>
   2c408:	lsl	r0, r3, #2
   2c40c:	str	r3, [r8, #4]
   2c410:	bl	38450 <__assert_fail@plt+0x26588>
   2c414:	cmp	r0, #0
   2c418:	str	r0, [r8, #12]
   2c41c:	beq	2cc50 <__assert_fail@plt+0x1ad88>
   2c420:	ldr	r4, [sp, #20]
   2c424:	ldr	r5, [r4, #4]
   2c428:	ldr	r1, [r4, #8]
   2c42c:	lsl	r2, r5, #2
   2c430:	bl	11ab4 <memcpy@plt>
   2c434:	mov	r3, r5
   2c438:	mov	ip, r4
   2c43c:	b	2c464 <__assert_fail@plt+0x1a59c>
   2c440:	mov	r8, #0
   2c444:	str	r8, [r0]
   2c448:	mov	r0, r8
   2c44c:	sub	sp, fp, #28
   2c450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c454:	mov	r0, #0
   2c458:	str	r0, [r6]
   2c45c:	str	r0, [r6, #4]
   2c460:	str	r0, [r6, #8]
   2c464:	mov	sl, r8
   2c468:	and	r1, r9, #15
   2c46c:	cmp	r3, #1
   2c470:	str	r6, [sp, #24]
   2c474:	ldrb	r0, [sl, #52]!	; 0x34
   2c478:	str	r6, [sl, #-12]
   2c47c:	and	r0, r0, #240	; 0xf0
   2c480:	orr	r0, r0, r1
   2c484:	strb	r0, [sl]
   2c488:	ldr	r0, [sp, #16]
   2c48c:	blt	2cc00 <__assert_fail@plt+0x1ad38>
   2c490:	and	r1, r9, #4
   2c494:	tst	r9, #1
   2c498:	str	sl, [sp, #8]
   2c49c:	str	r1, [sp, #12]
   2c4a0:	and	r1, r9, #2
   2c4a4:	bne	2c684 <__assert_fail@plt+0x1a7bc>
   2c4a8:	movw	r9, #65280	; 0xff00
   2c4ac:	mov	r6, #0
   2c4b0:	mov	lr, #0
   2c4b4:	cmp	r1, #0
   2c4b8:	movt	r9, #3
   2c4bc:	add	r5, r9, #255	; 0xff
   2c4c0:	bne	2c860 <__assert_fail@plt+0x1a998>
   2c4c4:	str	r5, [sp, #4]
   2c4c8:	b	2c4e0 <__assert_fail@plt+0x1a618>
   2c4cc:	mov	r3, r5
   2c4d0:	ldr	r5, [sp, #4]
   2c4d4:	add	r6, r6, #1
   2c4d8:	cmp	r6, r3
   2c4dc:	bge	2cc00 <__assert_fail@plt+0x1ad38>
   2c4e0:	ldr	r1, [ip, #8]
   2c4e4:	ldr	r2, [r0]
   2c4e8:	ldr	r1, [r1, r6, lsl #2]
   2c4ec:	add	r1, r2, r1, lsl #3
   2c4f0:	ldr	r4, [r1, #4]
   2c4f4:	and	r1, r4, r5
   2c4f8:	cmp	r1, #1
   2c4fc:	beq	2c4d4 <__assert_fail@plt+0x1a60c>
   2c500:	mov	r5, r3
   2c504:	ldrb	r3, [sl]
   2c508:	mov	r2, #32
   2c50c:	and	r1, r4, r9
   2c510:	and	r2, r2, r4, lsr #15
   2c514:	orr	r2, r3, r2
   2c518:	uxtb	r3, r4
   2c51c:	strb	r2, [sl]
   2c520:	cmp	r3, #4
   2c524:	beq	2c538 <__assert_fail@plt+0x1a670>
   2c528:	cmp	r3, #2
   2c52c:	bne	2c544 <__assert_fail@plt+0x1a67c>
   2c530:	mov	r3, #16
   2c534:	b	2c53c <__assert_fail@plt+0x1a674>
   2c538:	mov	r3, #64	; 0x40
   2c53c:	orr	r2, r2, r3
   2c540:	strb	r2, [sl]
   2c544:	cmp	r1, #0
   2c548:	beq	2c4cc <__assert_fail@plt+0x1a604>
   2c54c:	ldr	r1, [r8, #40]	; 0x28
   2c550:	ldr	r2, [sp, #24]
   2c554:	mov	r3, r5
   2c558:	cmp	r1, r2
   2c55c:	beq	2c584 <__assert_fail@plt+0x1a6bc>
   2c560:	ldr	r5, [sp, #4]
   2c564:	tst	r4, #4352	; 0x1100
   2c568:	bne	2c628 <__assert_fail@plt+0x1a760>
   2c56c:	ldr	r1, [sp, #12]
   2c570:	cmp	r1, #0
   2c574:	bne	2c4d4 <__assert_fail@plt+0x1a60c>
   2c578:	ands	r1, r4, #16384	; 0x4000
   2c57c:	bne	2c628 <__assert_fail@plt+0x1a760>
   2c580:	b	2c4d4 <__assert_fail@plt+0x1a60c>
   2c584:	mov	r0, #12
   2c588:	bl	38450 <__assert_fail@plt+0x26588>
   2c58c:	cmp	r0, #0
   2c590:	beq	2cc2c <__assert_fail@plt+0x1ad64>
   2c594:	ldr	ip, [sp, #20]
   2c598:	str	r0, [r8, #40]	; 0x28
   2c59c:	mov	sl, r0
   2c5a0:	mov	r5, r0
   2c5a4:	ldr	r3, [ip, #4]
   2c5a8:	str	r3, [sl, #4]!
   2c5ac:	cmp	r3, #0
   2c5b0:	ble	2c5f4 <__assert_fail@plt+0x1a72c>
   2c5b4:	lsl	r0, r3, #2
   2c5b8:	str	r3, [r5]
   2c5bc:	bl	38450 <__assert_fail@plt+0x26588>
   2c5c0:	cmp	r0, #0
   2c5c4:	str	r0, [r5, #8]
   2c5c8:	beq	2cc20 <__assert_fail@plt+0x1ad58>
   2c5cc:	ldr	r5, [sp, #20]
   2c5d0:	ldr	r9, [r5, #4]
   2c5d4:	ldr	r1, [r5, #8]
   2c5d8:	lsl	r2, r9, #2
   2c5dc:	bl	11ab4 <memcpy@plt>
   2c5e0:	mov	r3, r9
   2c5e4:	movw	r9, #65280	; 0xff00
   2c5e8:	mov	ip, r5
   2c5ec:	movt	r9, #3
   2c5f0:	b	2c604 <__assert_fail@plt+0x1a73c>
   2c5f4:	mov	r0, #0
   2c5f8:	str	r0, [r5]
   2c5fc:	str	r0, [r5, #4]
   2c600:	str	r0, [r5, #8]
   2c604:	ldr	sl, [sp, #8]
   2c608:	mov	lr, #0
   2c60c:	ldrb	r0, [sl]
   2c610:	orr	r0, r0, #128	; 0x80
   2c614:	strb	r0, [sl]
   2c618:	ldr	r0, [sp, #16]
   2c61c:	ldr	r5, [sp, #4]
   2c620:	tst	r4, #4352	; 0x1100
   2c624:	beq	2c56c <__assert_fail@plt+0x1a6a4>
   2c628:	subs	r1, r6, lr
   2c62c:	bmi	2c648 <__assert_fail@plt+0x1a780>
   2c630:	ldr	r2, [r8, #8]
   2c634:	cmp	r2, r1
   2c638:	subgt	r2, r2, #1
   2c63c:	strgt	r2, [r8, #8]
   2c640:	cmpgt	r2, r1
   2c644:	bgt	2c65c <__assert_fail@plt+0x1a794>
   2c648:	add	lr, lr, #1
   2c64c:	add	r6, r6, #1
   2c650:	cmp	r6, r3
   2c654:	blt	2c4e0 <__assert_fail@plt+0x1a618>
   2c658:	b	2cc00 <__assert_fail@plt+0x1ad38>
   2c65c:	ldr	r2, [r8, #12]
   2c660:	add	r3, r2, r1, lsl #2
   2c664:	ldr	r3, [r3, #4]
   2c668:	str	r3, [r2, r1, lsl #2]
   2c66c:	add	r1, r1, #1
   2c670:	ldr	r3, [r8, #8]
   2c674:	cmp	r1, r3
   2c678:	blt	2c660 <__assert_fail@plt+0x1a798>
   2c67c:	ldr	r3, [ip, #4]
   2c680:	b	2c648 <__assert_fail@plt+0x1a780>
   2c684:	cmp	r1, #0
   2c688:	bne	2ca20 <__assert_fail@plt+0x1ab58>
   2c68c:	movw	r9, #65280	; 0xff00
   2c690:	mov	r6, #0
   2c694:	mov	lr, #0
   2c698:	movt	r9, #3
   2c69c:	add	r5, r9, #255	; 0xff
   2c6a0:	str	r5, [sp, #4]
   2c6a4:	b	2c6bc <__assert_fail@plt+0x1a7f4>
   2c6a8:	mov	r3, r5
   2c6ac:	ldr	r5, [sp, #4]
   2c6b0:	add	r6, r6, #1
   2c6b4:	cmp	r6, r3
   2c6b8:	bge	2cc00 <__assert_fail@plt+0x1ad38>
   2c6bc:	ldr	r1, [ip, #8]
   2c6c0:	ldr	r2, [r0]
   2c6c4:	ldr	r1, [r1, r6, lsl #2]
   2c6c8:	add	r1, r2, r1, lsl #3
   2c6cc:	ldr	r4, [r1, #4]
   2c6d0:	and	r1, r4, r5
   2c6d4:	cmp	r1, #1
   2c6d8:	beq	2c6b0 <__assert_fail@plt+0x1a7e8>
   2c6dc:	mov	r5, r3
   2c6e0:	ldrb	r3, [sl]
   2c6e4:	mov	r2, #32
   2c6e8:	and	r1, r4, r9
   2c6ec:	and	r2, r2, r4, lsr #15
   2c6f0:	orr	r2, r3, r2
   2c6f4:	uxtb	r3, r4
   2c6f8:	strb	r2, [sl]
   2c6fc:	cmp	r3, #4
   2c700:	beq	2c714 <__assert_fail@plt+0x1a84c>
   2c704:	cmp	r3, #2
   2c708:	bne	2c720 <__assert_fail@plt+0x1a858>
   2c70c:	mov	r3, #16
   2c710:	b	2c718 <__assert_fail@plt+0x1a850>
   2c714:	mov	r3, #64	; 0x40
   2c718:	orr	r2, r2, r3
   2c71c:	strb	r2, [sl]
   2c720:	cmp	r1, #0
   2c724:	beq	2c6a8 <__assert_fail@plt+0x1a7e0>
   2c728:	ldr	r1, [r8, #40]	; 0x28
   2c72c:	ldr	r2, [sp, #24]
   2c730:	mov	r3, r5
   2c734:	cmp	r1, r2
   2c738:	beq	2c760 <__assert_fail@plt+0x1a898>
   2c73c:	ldr	r5, [sp, #4]
   2c740:	tst	r4, #4608	; 0x1200
   2c744:	bne	2c804 <__assert_fail@plt+0x1a93c>
   2c748:	ldr	r1, [sp, #12]
   2c74c:	cmp	r1, #0
   2c750:	bne	2c6b0 <__assert_fail@plt+0x1a7e8>
   2c754:	ands	r1, r4, #16384	; 0x4000
   2c758:	bne	2c804 <__assert_fail@plt+0x1a93c>
   2c75c:	b	2c6b0 <__assert_fail@plt+0x1a7e8>
   2c760:	mov	r0, #12
   2c764:	bl	38450 <__assert_fail@plt+0x26588>
   2c768:	cmp	r0, #0
   2c76c:	beq	2cc2c <__assert_fail@plt+0x1ad64>
   2c770:	ldr	ip, [sp, #20]
   2c774:	str	r0, [r8, #40]	; 0x28
   2c778:	mov	sl, r0
   2c77c:	mov	r5, r0
   2c780:	ldr	r3, [ip, #4]
   2c784:	str	r3, [sl, #4]!
   2c788:	cmp	r3, #0
   2c78c:	ble	2c7d0 <__assert_fail@plt+0x1a908>
   2c790:	lsl	r0, r3, #2
   2c794:	str	r3, [r5]
   2c798:	bl	38450 <__assert_fail@plt+0x26588>
   2c79c:	cmp	r0, #0
   2c7a0:	str	r0, [r5, #8]
   2c7a4:	beq	2cc20 <__assert_fail@plt+0x1ad58>
   2c7a8:	ldr	r5, [sp, #20]
   2c7ac:	ldr	r9, [r5, #4]
   2c7b0:	ldr	r1, [r5, #8]
   2c7b4:	lsl	r2, r9, #2
   2c7b8:	bl	11ab4 <memcpy@plt>
   2c7bc:	mov	r3, r9
   2c7c0:	movw	r9, #65280	; 0xff00
   2c7c4:	mov	ip, r5
   2c7c8:	movt	r9, #3
   2c7cc:	b	2c7e0 <__assert_fail@plt+0x1a918>
   2c7d0:	mov	r0, #0
   2c7d4:	str	r0, [r5]
   2c7d8:	str	r0, [r5, #4]
   2c7dc:	str	r0, [r5, #8]
   2c7e0:	ldr	sl, [sp, #8]
   2c7e4:	mov	lr, #0
   2c7e8:	ldrb	r0, [sl]
   2c7ec:	orr	r0, r0, #128	; 0x80
   2c7f0:	strb	r0, [sl]
   2c7f4:	ldr	r0, [sp, #16]
   2c7f8:	ldr	r5, [sp, #4]
   2c7fc:	tst	r4, #4608	; 0x1200
   2c800:	beq	2c748 <__assert_fail@plt+0x1a880>
   2c804:	subs	r1, r6, lr
   2c808:	bmi	2c824 <__assert_fail@plt+0x1a95c>
   2c80c:	ldr	r2, [r8, #8]
   2c810:	cmp	r2, r1
   2c814:	subgt	r2, r2, #1
   2c818:	strgt	r2, [r8, #8]
   2c81c:	cmpgt	r2, r1
   2c820:	bgt	2c838 <__assert_fail@plt+0x1a970>
   2c824:	add	lr, lr, #1
   2c828:	add	r6, r6, #1
   2c82c:	cmp	r6, r3
   2c830:	blt	2c6bc <__assert_fail@plt+0x1a7f4>
   2c834:	b	2cc00 <__assert_fail@plt+0x1ad38>
   2c838:	ldr	r2, [r8, #12]
   2c83c:	add	r3, r2, r1, lsl #2
   2c840:	ldr	r3, [r3, #4]
   2c844:	str	r3, [r2, r1, lsl #2]
   2c848:	add	r1, r1, #1
   2c84c:	ldr	r3, [r8, #8]
   2c850:	cmp	r1, r3
   2c854:	blt	2c83c <__assert_fail@plt+0x1a974>
   2c858:	ldr	r3, [ip, #4]
   2c85c:	b	2c824 <__assert_fail@plt+0x1a95c>
   2c860:	str	r5, [sp, #4]
   2c864:	b	2c87c <__assert_fail@plt+0x1a9b4>
   2c868:	mov	r3, r5
   2c86c:	ldr	r5, [sp, #4]
   2c870:	add	r6, r6, #1
   2c874:	cmp	r6, r3
   2c878:	bge	2cc00 <__assert_fail@plt+0x1ad38>
   2c87c:	ldr	r1, [ip, #8]
   2c880:	ldr	r2, [r0]
   2c884:	ldr	r1, [r1, r6, lsl #2]
   2c888:	add	r1, r2, r1, lsl #3
   2c88c:	ldr	r4, [r1, #4]
   2c890:	and	r1, r4, r5
   2c894:	cmp	r1, #1
   2c898:	beq	2c870 <__assert_fail@plt+0x1a9a8>
   2c89c:	mov	r5, r3
   2c8a0:	ldrb	r3, [sl]
   2c8a4:	mov	r2, #32
   2c8a8:	and	r1, r4, r9
   2c8ac:	and	r2, r2, r4, lsr #15
   2c8b0:	orr	r2, r3, r2
   2c8b4:	uxtb	r3, r4
   2c8b8:	strb	r2, [sl]
   2c8bc:	cmp	r3, #4
   2c8c0:	beq	2c8d4 <__assert_fail@plt+0x1aa0c>
   2c8c4:	cmp	r3, #2
   2c8c8:	bne	2c8e0 <__assert_fail@plt+0x1aa18>
   2c8cc:	mov	r3, #16
   2c8d0:	b	2c8d8 <__assert_fail@plt+0x1aa10>
   2c8d4:	mov	r3, #64	; 0x40
   2c8d8:	orr	r2, r2, r3
   2c8dc:	strb	r2, [sl]
   2c8e0:	cmp	r1, #0
   2c8e4:	beq	2c868 <__assert_fail@plt+0x1a9a0>
   2c8e8:	ldr	r1, [r8, #40]	; 0x28
   2c8ec:	ldr	r2, [sp, #24]
   2c8f0:	mov	r3, r5
   2c8f4:	cmp	r1, r2
   2c8f8:	beq	2c920 <__assert_fail@plt+0x1aa58>
   2c8fc:	ldr	r5, [sp, #4]
   2c900:	tst	r4, #256	; 0x100
   2c904:	bne	2c9c4 <__assert_fail@plt+0x1aafc>
   2c908:	ldr	r1, [sp, #12]
   2c90c:	cmp	r1, #0
   2c910:	bne	2c870 <__assert_fail@plt+0x1a9a8>
   2c914:	ands	r1, r4, #16384	; 0x4000
   2c918:	bne	2c9c4 <__assert_fail@plt+0x1aafc>
   2c91c:	b	2c870 <__assert_fail@plt+0x1a9a8>
   2c920:	mov	r0, #12
   2c924:	bl	38450 <__assert_fail@plt+0x26588>
   2c928:	cmp	r0, #0
   2c92c:	beq	2cc2c <__assert_fail@plt+0x1ad64>
   2c930:	ldr	ip, [sp, #20]
   2c934:	str	r0, [r8, #40]	; 0x28
   2c938:	mov	sl, r0
   2c93c:	mov	r5, r0
   2c940:	ldr	r3, [ip, #4]
   2c944:	str	r3, [sl, #4]!
   2c948:	cmp	r3, #0
   2c94c:	ble	2c990 <__assert_fail@plt+0x1aac8>
   2c950:	lsl	r0, r3, #2
   2c954:	str	r3, [r5]
   2c958:	bl	38450 <__assert_fail@plt+0x26588>
   2c95c:	cmp	r0, #0
   2c960:	str	r0, [r5, #8]
   2c964:	beq	2cc20 <__assert_fail@plt+0x1ad58>
   2c968:	ldr	r5, [sp, #20]
   2c96c:	ldr	r9, [r5, #4]
   2c970:	ldr	r1, [r5, #8]
   2c974:	lsl	r2, r9, #2
   2c978:	bl	11ab4 <memcpy@plt>
   2c97c:	mov	r3, r9
   2c980:	movw	r9, #65280	; 0xff00
   2c984:	mov	ip, r5
   2c988:	movt	r9, #3
   2c98c:	b	2c9a0 <__assert_fail@plt+0x1aad8>
   2c990:	mov	r0, #0
   2c994:	str	r0, [r5]
   2c998:	str	r0, [r5, #4]
   2c99c:	str	r0, [r5, #8]
   2c9a0:	ldr	sl, [sp, #8]
   2c9a4:	mov	lr, #0
   2c9a8:	ldrb	r0, [sl]
   2c9ac:	orr	r0, r0, #128	; 0x80
   2c9b0:	strb	r0, [sl]
   2c9b4:	ldr	r0, [sp, #16]
   2c9b8:	ldr	r5, [sp, #4]
   2c9bc:	tst	r4, #256	; 0x100
   2c9c0:	beq	2c908 <__assert_fail@plt+0x1aa40>
   2c9c4:	subs	r1, r6, lr
   2c9c8:	bmi	2c9e4 <__assert_fail@plt+0x1ab1c>
   2c9cc:	ldr	r2, [r8, #8]
   2c9d0:	cmp	r2, r1
   2c9d4:	subgt	r2, r2, #1
   2c9d8:	strgt	r2, [r8, #8]
   2c9dc:	cmpgt	r2, r1
   2c9e0:	bgt	2c9f8 <__assert_fail@plt+0x1ab30>
   2c9e4:	add	lr, lr, #1
   2c9e8:	add	r6, r6, #1
   2c9ec:	cmp	r6, r3
   2c9f0:	blt	2c87c <__assert_fail@plt+0x1a9b4>
   2c9f4:	b	2cc00 <__assert_fail@plt+0x1ad38>
   2c9f8:	ldr	r2, [r8, #12]
   2c9fc:	add	r3, r2, r1, lsl #2
   2ca00:	ldr	r3, [r3, #4]
   2ca04:	str	r3, [r2, r1, lsl #2]
   2ca08:	add	r1, r1, #1
   2ca0c:	ldr	r3, [r8, #8]
   2ca10:	cmp	r1, r3
   2ca14:	blt	2c9fc <__assert_fail@plt+0x1ab34>
   2ca18:	ldr	r3, [ip, #4]
   2ca1c:	b	2c9e4 <__assert_fail@plt+0x1ab1c>
   2ca20:	movw	lr, #65280	; 0xff00
   2ca24:	mov	r9, #0
   2ca28:	mov	r4, #0
   2ca2c:	movt	lr, #3
   2ca30:	add	r5, lr, #255	; 0xff
   2ca34:	str	r5, [sp, #4]
   2ca38:	b	2ca50 <__assert_fail@plt+0x1ab88>
   2ca3c:	mov	r3, r5
   2ca40:	ldr	r5, [sp, #4]
   2ca44:	add	r9, r9, #1
   2ca48:	cmp	r9, r3
   2ca4c:	bge	2cc00 <__assert_fail@plt+0x1ad38>
   2ca50:	ldr	r1, [ip, #8]
   2ca54:	ldr	r2, [r0]
   2ca58:	ldr	r1, [r1, r9, lsl #2]
   2ca5c:	add	r1, r2, r1, lsl #3
   2ca60:	ldr	r6, [r1, #4]
   2ca64:	and	r1, r6, r5
   2ca68:	cmp	r1, #1
   2ca6c:	beq	2ca44 <__assert_fail@plt+0x1ab7c>
   2ca70:	mov	r5, r3
   2ca74:	ldrb	r3, [sl]
   2ca78:	mov	r2, #32
   2ca7c:	and	r1, r6, lr
   2ca80:	and	r2, r2, r6, lsr #15
   2ca84:	orr	r2, r3, r2
   2ca88:	uxtb	r3, r6
   2ca8c:	strb	r2, [sl]
   2ca90:	cmp	r3, #2
   2ca94:	beq	2caa8 <__assert_fail@plt+0x1abe0>
   2ca98:	cmp	r3, #4
   2ca9c:	bne	2cab4 <__assert_fail@plt+0x1abec>
   2caa0:	mov	r3, #64	; 0x40
   2caa4:	b	2caac <__assert_fail@plt+0x1abe4>
   2caa8:	mov	r3, #16
   2caac:	orr	r2, r2, r3
   2cab0:	strb	r2, [sl]
   2cab4:	cmp	r1, #0
   2cab8:	beq	2ca3c <__assert_fail@plt+0x1ab74>
   2cabc:	ldr	r1, [r8, #40]	; 0x28
   2cac0:	ldr	r2, [sp, #24]
   2cac4:	mov	r3, r5
   2cac8:	cmp	r1, r2
   2cacc:	beq	2caf4 <__assert_fail@plt+0x1ac2c>
   2cad0:	ldr	r5, [sp, #4]
   2cad4:	tst	r6, #512	; 0x200
   2cad8:	bne	2cb98 <__assert_fail@plt+0x1acd0>
   2cadc:	ldr	r1, [sp, #12]
   2cae0:	cmp	r1, #0
   2cae4:	bne	2ca44 <__assert_fail@plt+0x1ab7c>
   2cae8:	ands	r1, r6, #16384	; 0x4000
   2caec:	bne	2cb98 <__assert_fail@plt+0x1acd0>
   2caf0:	b	2ca44 <__assert_fail@plt+0x1ab7c>
   2caf4:	mov	r0, #12
   2caf8:	bl	38450 <__assert_fail@plt+0x26588>
   2cafc:	cmp	r0, #0
   2cb00:	beq	2cc2c <__assert_fail@plt+0x1ad64>
   2cb04:	ldr	ip, [sp, #20]
   2cb08:	str	r0, [r8, #40]	; 0x28
   2cb0c:	mov	sl, r0
   2cb10:	mov	r5, r0
   2cb14:	ldr	r3, [ip, #4]
   2cb18:	str	r3, [sl, #4]!
   2cb1c:	cmp	r3, #1
   2cb20:	blt	2cb5c <__assert_fail@plt+0x1ac94>
   2cb24:	lsl	r0, r3, #2
   2cb28:	str	r3, [r5]
   2cb2c:	bl	38450 <__assert_fail@plt+0x26588>
   2cb30:	cmp	r0, #0
   2cb34:	str	r0, [r5, #8]
   2cb38:	beq	2cc20 <__assert_fail@plt+0x1ad58>
   2cb3c:	ldr	r4, [sp, #20]
   2cb40:	ldr	r5, [r4, #4]
   2cb44:	ldr	r1, [r4, #8]
   2cb48:	lsl	r2, r5, #2
   2cb4c:	bl	11ab4 <memcpy@plt>
   2cb50:	mov	r3, r5
   2cb54:	mov	ip, r4
   2cb58:	b	2cb6c <__assert_fail@plt+0x1aca4>
   2cb5c:	mov	r0, #0
   2cb60:	str	r0, [r5]
   2cb64:	str	r0, [r5, #4]
   2cb68:	str	r0, [r5, #8]
   2cb6c:	ldr	sl, [sp, #8]
   2cb70:	movw	lr, #65280	; 0xff00
   2cb74:	mov	r4, #0
   2cb78:	movt	lr, #3
   2cb7c:	ldrb	r0, [sl]
   2cb80:	orr	r0, r0, #128	; 0x80
   2cb84:	strb	r0, [sl]
   2cb88:	ldr	r0, [sp, #16]
   2cb8c:	ldr	r5, [sp, #4]
   2cb90:	tst	r6, #512	; 0x200
   2cb94:	beq	2cadc <__assert_fail@plt+0x1ac14>
   2cb98:	subs	r1, r9, r4
   2cb9c:	bmi	2cbb8 <__assert_fail@plt+0x1acf0>
   2cba0:	ldr	r2, [r8, #8]
   2cba4:	cmp	r2, r1
   2cba8:	subgt	r2, r2, #1
   2cbac:	strgt	r2, [r8, #8]
   2cbb0:	cmpgt	r2, r1
   2cbb4:	bgt	2cbcc <__assert_fail@plt+0x1ad04>
   2cbb8:	add	r4, r4, #1
   2cbbc:	add	r9, r9, #1
   2cbc0:	cmp	r9, r3
   2cbc4:	blt	2ca50 <__assert_fail@plt+0x1ab88>
   2cbc8:	b	2cc00 <__assert_fail@plt+0x1ad38>
   2cbcc:	ldr	r2, [r8, #12]
   2cbd0:	add	r3, r2, r1, lsl #2
   2cbd4:	ldr	r3, [r3, #4]
   2cbd8:	str	r3, [r2, r1, lsl #2]
   2cbdc:	add	r1, r1, #1
   2cbe0:	ldr	r3, [r8, #8]
   2cbe4:	cmp	r1, r3
   2cbe8:	blt	2cbd0 <__assert_fail@plt+0x1ad08>
   2cbec:	ldr	r3, [ip, #4]
   2cbf0:	add	r4, r4, #1
   2cbf4:	add	r9, r9, #1
   2cbf8:	cmp	r9, r3
   2cbfc:	blt	2ca50 <__assert_fail@plt+0x1ab88>
   2cc00:	mov	r1, r8
   2cc04:	mov	r2, r7
   2cc08:	bl	2cc68 <__assert_fail@plt+0x1ada0>
   2cc0c:	cmp	r0, #0
   2cc10:	bne	2cc2c <__assert_fail@plt+0x1ad64>
   2cc14:	mov	r0, r8
   2cc18:	sub	sp, fp, #28
   2cc1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc20:	mov	r0, #0
   2cc24:	str	r0, [sl]
   2cc28:	str	r0, [r5]
   2cc2c:	mov	r0, r8
   2cc30:	bl	25c60 <__assert_fail@plt+0x13d98>
   2cc34:	ldr	r1, [sp]
   2cc38:	mov	r0, #12
   2cc3c:	mov	r8, #0
   2cc40:	str	r0, [r1]
   2cc44:	mov	r0, r8
   2cc48:	sub	sp, fp, #28
   2cc4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cc50:	mov	r0, #0
   2cc54:	str	r0, [r8, #4]
   2cc58:	str	r0, [r8, #8]
   2cc5c:	mov	r0, r8
   2cc60:	bl	17c10 <__assert_fail@plt+0x5d48>
   2cc64:	b	2cc34 <__assert_fail@plt+0x1ad6c>
   2cc68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cc6c:	add	fp, sp, #28
   2cc70:	sub	sp, sp, #4
   2cc74:	str	r2, [r1]
   2cc78:	mov	r4, r1
   2cc7c:	mov	r7, r0
   2cc80:	mov	r0, #0
   2cc84:	mov	r9, r2
   2cc88:	ldr	r1, [r1, #8]
   2cc8c:	str	r1, [r4, #16]
   2cc90:	str	r0, [r4, #20]
   2cc94:	lsl	r0, r1, #2
   2cc98:	bl	38450 <__assert_fail@plt+0x26588>
   2cc9c:	mov	r8, #12
   2cca0:	cmp	r0, #0
   2cca4:	str	r0, [r4, #24]
   2cca8:	beq	2cd70 <__assert_fail@plt+0x1aea8>
   2ccac:	ldr	r1, [r4, #8]
   2ccb0:	cmp	r1, #1
   2ccb4:	blt	2cd30 <__assert_fail@plt+0x1ae68>
   2ccb8:	mov	r5, #0
   2ccbc:	mov	sl, #2
   2ccc0:	b	2cce0 <__assert_fail@plt+0x1ae18>
   2ccc4:	add	r2, r1, #1
   2ccc8:	str	r2, [r4, #20]
   2cccc:	str	r6, [r0, r1, lsl #2]
   2ccd0:	ldr	r1, [r4, #8]
   2ccd4:	add	r5, r5, #1
   2ccd8:	cmp	r5, r1
   2ccdc:	bge	2cd30 <__assert_fail@plt+0x1ae68>
   2cce0:	ldr	r2, [r4, #12]
   2cce4:	ldr	r6, [r2, r5, lsl #2]
   2cce8:	ldr	r2, [r7]
   2ccec:	add	r2, r2, r6, lsl #3
   2ccf0:	ldrb	r2, [r2, #4]
   2ccf4:	tst	r2, #8
   2ccf8:	bne	2ccd4 <__assert_fail@plt+0x1ae0c>
   2ccfc:	ldr	r2, [r4, #16]
   2cd00:	ldr	r1, [r4, #20]
   2cd04:	cmp	r2, r1
   2cd08:	bne	2ccc4 <__assert_fail@plt+0x1adfc>
   2cd0c:	add	r1, sl, r2, lsl #1
   2cd10:	str	r1, [r4, #16]
   2cd14:	lsl	r1, r1, #2
   2cd18:	bl	38480 <__assert_fail@plt+0x265b8>
   2cd1c:	cmp	r0, #0
   2cd20:	beq	2cd70 <__assert_fail@plt+0x1aea8>
   2cd24:	str	r0, [r4, #24]
   2cd28:	ldr	r1, [r4, #20]
   2cd2c:	b	2ccc4 <__assert_fail@plt+0x1adfc>
   2cd30:	ldr	r1, [r7, #68]	; 0x44
   2cd34:	ldr	r0, [r7, #32]
   2cd38:	and	r1, r1, r9
   2cd3c:	mov	r5, r0
   2cd40:	add	r2, r1, r1, lsl #1
   2cd44:	ldr	r1, [r5, r2, lsl #2]!
   2cd48:	mov	r6, r5
   2cd4c:	ldr	r3, [r6, #4]!
   2cd50:	cmp	r3, r1
   2cd54:	ble	2cd7c <__assert_fail@plt+0x1aeb4>
   2cd58:	add	r0, r0, r2, lsl #2
   2cd5c:	ldr	r0, [r0, #8]
   2cd60:	add	r2, r1, #1
   2cd64:	mov	r8, #0
   2cd68:	str	r2, [r5]
   2cd6c:	str	r4, [r0, r1, lsl #2]
   2cd70:	mov	r0, r8
   2cd74:	sub	sp, fp, #28
   2cd78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cd7c:	add	r7, r0, r2, lsl #2
   2cd80:	mov	r2, #2
   2cd84:	add	r9, r2, r1, lsl #1
   2cd88:	ldr	r0, [r7, #8]!
   2cd8c:	lsl	r1, r9, #2
   2cd90:	bl	38480 <__assert_fail@plt+0x265b8>
   2cd94:	cmp	r0, #0
   2cd98:	beq	2cd70 <__assert_fail@plt+0x1aea8>
   2cd9c:	str	r0, [r7]
   2cda0:	str	r9, [r6]
   2cda4:	ldr	r1, [r5]
   2cda8:	b	2cd60 <__assert_fail@plt+0x1ae98>
   2cdac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cdb0:	add	fp, sp, #28
   2cdb4:	sub	sp, sp, #36	; 0x24
   2cdb8:	mov	r4, r0
   2cdbc:	ldr	r0, [r0, #24]
   2cdc0:	mov	r6, r2
   2cdc4:	mov	r9, r1
   2cdc8:	cmp	r0, r1
   2cdcc:	ble	2cfe4 <__assert_fail@plt+0x1b11c>
   2cdd0:	ldr	r0, [r4, #80]	; 0x50
   2cdd4:	mov	r1, #4
   2cdd8:	cmp	r0, #2
   2cddc:	movge	r0, #0
   2cde0:	strge	r0, [r4, #16]
   2cde4:	strge	r0, [r4, #20]
   2cde8:	mov	r0, #0
   2cdec:	tst	r6, #1
   2cdf0:	strb	r0, [r4, #76]	; 0x4c
   2cdf4:	str	r0, [r4, #24]
   2cdf8:	str	r0, [r4, #28]
   2cdfc:	str	r0, [r4, #32]
   2ce00:	movweq	r1, #6
   2ce04:	ldr	r2, [r4, #44]	; 0x2c
   2ce08:	ldr	r3, [r4, #52]	; 0x34
   2ce0c:	str	r2, [r4, #48]	; 0x30
   2ce10:	str	r3, [r4, #56]	; 0x38
   2ce14:	str	r1, [r4, #60]	; 0x3c
   2ce18:	ldrb	r1, [r4, #75]	; 0x4b
   2ce1c:	cmp	r1, #0
   2ce20:	bne	2ce2c <__assert_fail@plt+0x1af64>
   2ce24:	ldr	r1, [r4]
   2ce28:	str	r1, [r4, #4]
   2ce2c:	mov	r5, r9
   2ce30:	cmp	r5, #0
   2ce34:	beq	2cf60 <__assert_fail@plt+0x1b098>
   2ce38:	ldr	r1, [r4, #32]
   2ce3c:	cmp	r5, r1
   2ce40:	bge	2cff4 <__assert_fail@plt+0x1b12c>
   2ce44:	ldrb	r0, [r4, #76]	; 0x4c
   2ce48:	cmp	r0, #0
   2ce4c:	bne	2d1a8 <__assert_fail@plt+0x1b2e0>
   2ce50:	cmp	r5, #0
   2ce54:	ble	2ce90 <__assert_fail@plt+0x1afc8>
   2ce58:	ldr	r1, [r4, #48]	; 0x30
   2ce5c:	sub	r0, r5, #1
   2ce60:	cmp	r1, r0
   2ce64:	beq	2d270 <__assert_fail@plt+0x1b3a8>
   2ce68:	ldr	r1, [r4, #80]	; 0x50
   2ce6c:	cmp	r1, #2
   2ce70:	blt	2cea8 <__assert_fail@plt+0x1afe0>
   2ce74:	ldr	r1, [r4, #8]
   2ce78:	ldr	r6, [r1, r0, lsl #2]
   2ce7c:	cmn	r6, #1
   2ce80:	bne	2ced8 <__assert_fail@plt+0x1b010>
   2ce84:	sub	r0, r0, #1
   2ce88:	cmn	r0, #1
   2ce8c:	bne	2ce78 <__assert_fail@plt+0x1afb0>
   2ce90:	ldr	r1, [r4, #60]	; 0x3c
   2ce94:	str	r1, [r4, #60]	; 0x3c
   2ce98:	ldr	r0, [r4, #80]	; 0x50
   2ce9c:	cmp	r0, #2
   2cea0:	bge	2cf10 <__assert_fail@plt+0x1b048>
   2cea4:	b	2cf28 <__assert_fail@plt+0x1b060>
   2cea8:	ldr	r1, [r4, #4]
   2ceac:	ldr	r2, [r4, #68]	; 0x44
   2ceb0:	ldrb	r0, [r1, r0]
   2ceb4:	ubfx	r1, r0, #5, #3
   2ceb8:	and	r3, r0, #31
   2cebc:	ldr	r2, [r2, r1, lsl #2]
   2cec0:	mov	r1, #1
   2cec4:	tst	r2, r1, lsl r3
   2cec8:	moveq	r1, #0
   2cecc:	cmpeq	r0, #10
   2ced0:	bne	2cf00 <__assert_fail@plt+0x1b038>
   2ced4:	b	2cef0 <__assert_fail@plt+0x1b028>
   2ced8:	ldrb	r0, [r4, #78]	; 0x4e
   2cedc:	cmp	r0, #0
   2cee0:	bne	2d43c <__assert_fail@plt+0x1b574>
   2cee4:	mov	r1, #0
   2cee8:	cmp	r6, #10
   2ceec:	bne	2cf00 <__assert_fail@plt+0x1b038>
   2cef0:	ldrb	r0, [r4, #77]	; 0x4d
   2cef4:	cmp	r0, #0
   2cef8:	movwne	r0, #1
   2cefc:	lsl	r1, r0, #1
   2cf00:	str	r1, [r4, #60]	; 0x3c
   2cf04:	ldr	r0, [r4, #80]	; 0x50
   2cf08:	cmp	r0, #2
   2cf0c:	blt	2cf28 <__assert_fail@plt+0x1b060>
   2cf10:	ldr	r2, [r4, #28]
   2cf14:	ldr	r0, [r4, #8]
   2cf18:	sub	r2, r2, r5
   2cf1c:	add	r1, r0, r5, lsl #2
   2cf20:	lsl	r2, r2, #2
   2cf24:	bl	11a78 <memmove@plt>
   2cf28:	ldrb	r0, [r4, #75]	; 0x4b
   2cf2c:	cmp	r0, #0
   2cf30:	bne	2d258 <__assert_fail@plt+0x1b390>
   2cf34:	ldr	r0, [r4, #28]
   2cf38:	ldr	r1, [r4, #32]
   2cf3c:	sub	r0, r0, r5
   2cf40:	sub	r1, r1, r5
   2cf44:	str	r0, [r4, #28]
   2cf48:	str	r1, [r4, #32]
   2cf4c:	ldrb	r0, [r4, #75]	; 0x4b
   2cf50:	cmp	r0, #0
   2cf54:	ldreq	r0, [r4, #4]
   2cf58:	addeq	r0, r0, r5
   2cf5c:	streq	r0, [r4, #4]
   2cf60:	str	r9, [r4, #24]
   2cf64:	ldr	r0, [r4, #48]	; 0x30
   2cf68:	ldr	r3, [r4, #80]	; 0x50
   2cf6c:	ldr	r1, [r4, #56]	; 0x38
   2cf70:	sub	r2, r0, r5
   2cf74:	cmp	r3, #2
   2cf78:	sub	r0, r1, r5
   2cf7c:	str	r2, [r4, #48]	; 0x30
   2cf80:	str	r0, [r4, #56]	; 0x38
   2cf84:	blt	2cfac <__assert_fail@plt+0x1b0e4>
   2cf88:	ldrb	r0, [r4, #72]	; 0x48
   2cf8c:	cmp	r0, #0
   2cf90:	beq	2cfcc <__assert_fail@plt+0x1b104>
   2cf94:	mov	r0, r4
   2cf98:	bl	25cc0 <__assert_fail@plt+0x13df8>
   2cf9c:	cmp	r0, #0
   2cfa0:	beq	2cfd4 <__assert_fail@plt+0x1b10c>
   2cfa4:	sub	sp, fp, #28
   2cfa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfac:	ldrb	r0, [r4, #75]	; 0x4b
   2cfb0:	cmp	r0, #0
   2cfb4:	bne	2d28c <__assert_fail@plt+0x1b3c4>
   2cfb8:	str	r2, [r4, #28]
   2cfbc:	mov	r0, #0
   2cfc0:	str	r0, [r4, #40]	; 0x28
   2cfc4:	sub	sp, fp, #28
   2cfc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfcc:	mov	r0, r4
   2cfd0:	bl	265e0 <__assert_fail@plt+0x14718>
   2cfd4:	mov	r0, #0
   2cfd8:	str	r0, [r4, #40]	; 0x28
   2cfdc:	sub	sp, fp, #28
   2cfe0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cfe4:	sub	r5, r9, r0
   2cfe8:	cmp	r5, #0
   2cfec:	bne	2ce38 <__assert_fail@plt+0x1af70>
   2cff0:	b	2cf60 <__assert_fail@plt+0x1b098>
   2cff4:	ldrb	r2, [r4, #76]	; 0x4c
   2cff8:	ldr	lr, [r4, #28]
   2cffc:	cmp	r2, #0
   2d000:	bne	2d5dc <__assert_fail@plt+0x1b714>
   2d004:	mov	r2, #0
   2d008:	str	r2, [r4, #28]
   2d00c:	ldr	r3, [r4, #80]	; 0x50
   2d010:	cmp	r3, #2
   2d014:	blt	2d2fc <__assert_fail@plt+0x1b434>
   2d018:	ldrb	r2, [r4, #73]	; 0x49
   2d01c:	cmp	r2, #0
   2d020:	beq	2d0dc <__assert_fail@plt+0x1b214>
   2d024:	ldr	r7, [r4]
   2d028:	sub	r3, r5, r3
   2d02c:	add	ip, r7, r0
   2d030:	add	r3, ip, r3
   2d034:	add	r8, ip, r5
   2d038:	cmp	r3, r7
   2d03c:	movcc	r3, r7
   2d040:	mov	r7, r8
   2d044:	sub	r7, r7, #1
   2d048:	cmp	r7, r3
   2d04c:	bcc	2d0dc <__assert_fail@plt+0x1b214>
   2d050:	ldrb	r2, [r7]
   2d054:	and	r2, r2, #192	; 0xc0
   2d058:	cmp	r2, #128	; 0x80
   2d05c:	beq	2d044 <__assert_fail@plt+0x1b17c>
   2d060:	ldr	r0, [r4, #48]	; 0x30
   2d064:	mov	sl, lr
   2d068:	mov	r1, r7
   2d06c:	add	r0, ip, r0
   2d070:	sub	r2, r0, r7
   2d074:	ldr	r0, [r4, #64]	; 0x40
   2d078:	cmp	r0, #0
   2d07c:	bne	2d7a8 <__assert_fail@plt+0x1b8e0>
   2d080:	mov	r0, #0
   2d084:	add	r3, sp, #24
   2d088:	str	r0, [sp, #28]
   2d08c:	str	r0, [sp, #24]
   2d090:	add	r0, sp, #20
   2d094:	bl	3966c <__assert_fail@plt+0x277a4>
   2d098:	sub	r1, r8, r7
   2d09c:	mvn	r7, #0
   2d0a0:	cmp	r0, r1
   2d0a4:	bcc	2d0c8 <__assert_fail@plt+0x1b200>
   2d0a8:	cmn	r0, #3
   2d0ac:	bhi	2d0c8 <__assert_fail@plt+0x1b200>
   2d0b0:	mov	r2, #0
   2d0b4:	sub	r0, r0, r1
   2d0b8:	str	r2, [r4, #16]
   2d0bc:	str	r2, [r4, #20]
   2d0c0:	str	r0, [r4, #28]
   2d0c4:	ldr	r7, [sp, #20]
   2d0c8:	cmn	r7, #1
   2d0cc:	bne	2d18c <__assert_fail@plt+0x1b2c4>
   2d0d0:	ldr	r0, [r4, #24]
   2d0d4:	ldr	r1, [r4, #32]
   2d0d8:	mov	lr, sl
   2d0dc:	add	r8, r1, r0
   2d0e0:	cmp	r8, r9
   2d0e4:	bge	2d45c <__assert_fail@plt+0x1b594>
   2d0e8:	add	sl, r4, #16
   2d0ec:	str	lr, [sp]
   2d0f0:	ldr	r0, [r4]
   2d0f4:	ldr	r2, [r4, #44]	; 0x2c
   2d0f8:	mov	r3, sl
   2d0fc:	add	r1, r0, r8
   2d100:	ldr	r0, [sl]
   2d104:	sub	r7, r2, r8
   2d108:	mov	r2, r7
   2d10c:	str	r0, [sp, #8]
   2d110:	ldr	r0, [sl, #4]
   2d114:	str	r0, [sp, #4]
   2d118:	add	r0, sp, #24
   2d11c:	bl	3966c <__assert_fail@plt+0x277a4>
   2d120:	sub	r1, r0, #1
   2d124:	cmn	r1, #3
   2d128:	bcs	2d140 <__assert_fail@plt+0x1b278>
   2d12c:	ldr	r7, [sp, #24]
   2d130:	add	r8, r0, r8
   2d134:	cmp	r8, r9
   2d138:	blt	2d0f0 <__assert_fail@plt+0x1b228>
   2d13c:	b	2d178 <__assert_fail@plt+0x1b2b0>
   2d140:	ldr	r3, [sp, #4]
   2d144:	ldr	r2, [sp, #8]
   2d148:	cmp	r7, #0
   2d14c:	mov	r1, #0
   2d150:	cmpne	r0, #0
   2d154:	beq	2d160 <__assert_fail@plt+0x1b298>
   2d158:	ldr	r0, [r4]
   2d15c:	ldrb	r1, [r0, r8]
   2d160:	stm	sl, {r2, r3}
   2d164:	mov	r0, #1
   2d168:	mov	r7, r1
   2d16c:	add	r8, r0, r8
   2d170:	cmp	r8, r9
   2d174:	blt	2d0f0 <__assert_fail@plt+0x1b228>
   2d178:	ldr	lr, [sp]
   2d17c:	sub	r0, r8, r9
   2d180:	cmn	r7, #1
   2d184:	str	r0, [r4, #28]
   2d188:	beq	2d464 <__assert_fail@plt+0x1b59c>
   2d18c:	ldrb	r0, [r4, #78]	; 0x4e
   2d190:	cmp	r0, #0
   2d194:	bne	2d778 <__assert_fail@plt+0x1b8b0>
   2d198:	mov	r1, #0
   2d19c:	cmp	r7, #10
   2d1a0:	beq	2d5b0 <__assert_fail@plt+0x1b6e8>
   2d1a4:	b	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d1a8:	ldr	ip, [r4, #12]
   2d1ac:	ldr	r0, [r4, #28]
   2d1b0:	mov	r2, #0
   2d1b4:	b	2d1c4 <__assert_fail@plt+0x1b2fc>
   2d1b8:	cmp	r2, r3
   2d1bc:	mov	r0, r3
   2d1c0:	bge	2d1f0 <__assert_fail@plt+0x1b328>
   2d1c4:	add	r1, r2, r0
   2d1c8:	add	r1, r1, r1, lsr #31
   2d1cc:	asr	r1, r1, #1
   2d1d0:	ldr	r7, [ip, r1, lsl #2]
   2d1d4:	mov	r3, r1
   2d1d8:	cmp	r7, r5
   2d1dc:	bgt	2d1b8 <__assert_fail@plt+0x1b2f0>
   2d1e0:	bge	2d1f0 <__assert_fail@plt+0x1b328>
   2d1e4:	add	r2, r1, #1
   2d1e8:	mov	r3, r0
   2d1ec:	b	2d1b8 <__assert_fail@plt+0x1b2f0>
   2d1f0:	cmp	r7, r5
   2d1f4:	mov	r0, #0
   2d1f8:	movwlt	r0, #1
   2d1fc:	add	r7, r1, r0
   2d200:	cmp	r7, #0
   2d204:	ble	2d240 <__assert_fail@plt+0x1b378>
   2d208:	ldr	r1, [r4, #48]	; 0x30
   2d20c:	sub	r0, r7, #1
   2d210:	cmp	r1, r0
   2d214:	beq	2d604 <__assert_fail@plt+0x1b73c>
   2d218:	ldr	r1, [r4, #80]	; 0x50
   2d21c:	cmp	r1, #2
   2d220:	blt	2d348 <__assert_fail@plt+0x1b480>
   2d224:	ldr	r1, [r4, #8]
   2d228:	ldr	r6, [r1, r0, lsl #2]
   2d22c:	cmn	r6, #1
   2d230:	bne	2d378 <__assert_fail@plt+0x1b4b0>
   2d234:	sub	r0, r0, #1
   2d238:	cmn	r0, #1
   2d23c:	bne	2d228 <__assert_fail@plt+0x1b360>
   2d240:	ldr	r1, [r4, #60]	; 0x3c
   2d244:	str	r1, [r4, #60]	; 0x3c
   2d248:	cmp	r7, r5
   2d24c:	ldr	r2, [r4, #28]
   2d250:	beq	2d3b0 <__assert_fail@plt+0x1b4e8>
   2d254:	b	2d61c <__assert_fail@plt+0x1b754>
   2d258:	ldr	r2, [r4, #28]
   2d25c:	ldr	r0, [r4, #4]
   2d260:	add	r1, r0, r5
   2d264:	sub	r2, r2, r5
   2d268:	bl	11a78 <memmove@plt>
   2d26c:	b	2cf34 <__assert_fail@plt+0x1b06c>
   2d270:	and	r0, r6, #2
   2d274:	eor	r1, r0, #10
   2d278:	str	r1, [r4, #60]	; 0x3c
   2d27c:	ldr	r0, [r4, #80]	; 0x50
   2d280:	cmp	r0, #2
   2d284:	bge	2cf10 <__assert_fail@plt+0x1b048>
   2d288:	b	2cf28 <__assert_fail@plt+0x1b060>
   2d28c:	ldrb	r0, [r4, #72]	; 0x48
   2d290:	cmp	r0, #0
   2d294:	beq	2d4ac <__assert_fail@plt+0x1b5e4>
   2d298:	ldr	r6, [r4, #36]	; 0x24
   2d29c:	ldr	r5, [r4, #28]
   2d2a0:	cmp	r6, r2
   2d2a4:	movgt	r6, r2
   2d2a8:	cmp	r5, r6
   2d2ac:	bge	2d538 <__assert_fail@plt+0x1b670>
   2d2b0:	bl	11c4c <__ctype_toupper_loc@plt>
   2d2b4:	ldr	r1, [r4]
   2d2b8:	ldr	r2, [r4, #64]	; 0x40
   2d2bc:	add	r1, r1, r9
   2d2c0:	cmp	r2, #0
   2d2c4:	ldrb	r1, [r1, r5]
   2d2c8:	bne	2d2f4 <__assert_fail@plt+0x1b42c>
   2d2cc:	ldr	r2, [r0]
   2d2d0:	ldr	r1, [r2, r1, lsl #2]
   2d2d4:	ldr	r2, [r4, #4]
   2d2d8:	strb	r1, [r2, r5]
   2d2dc:	add	r1, r5, #1
   2d2e0:	cmp	r1, r6
   2d2e4:	bge	2d534 <__assert_fail@plt+0x1b66c>
   2d2e8:	ldr	r9, [r4, #24]
   2d2ec:	mov	r5, r1
   2d2f0:	b	2d2b4 <__assert_fail@plt+0x1b3ec>
   2d2f4:	ldrb	r1, [r2, r1]
   2d2f8:	b	2d2cc <__assert_fail@plt+0x1b404>
   2d2fc:	ldr	r3, [r4]
   2d300:	add	r0, r5, r0
   2d304:	ldr	r1, [r4, #64]	; 0x40
   2d308:	add	r0, r0, r3
   2d30c:	cmp	r1, #0
   2d310:	ldrb	r0, [r0, #-1]
   2d314:	str	r2, [r4, #32]
   2d318:	ldrbne	r0, [r1, r0]
   2d31c:	ldr	r1, [r4, #68]	; 0x44
   2d320:	ubfx	r2, r0, #5, #3
   2d324:	and	r3, r0, #31
   2d328:	ldr	r2, [r1, r2, lsl #2]
   2d32c:	mov	r1, #1
   2d330:	tst	r2, r1, lsl r3
   2d334:	moveq	r1, #0
   2d338:	cmpeq	r0, #10
   2d33c:	beq	2d584 <__assert_fail@plt+0x1b6bc>
   2d340:	str	r1, [r4, #60]	; 0x3c
   2d344:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d348:	ldr	r1, [r4, #4]
   2d34c:	ldr	r2, [r4, #68]	; 0x44
   2d350:	ldrb	r0, [r1, r0]
   2d354:	ubfx	r1, r0, #5, #3
   2d358:	and	r3, r0, #31
   2d35c:	ldr	r2, [r2, r1, lsl #2]
   2d360:	mov	r1, #1
   2d364:	tst	r2, r1, lsl r3
   2d368:	moveq	r1, #0
   2d36c:	cmpeq	r0, #10
   2d370:	bne	2d3a0 <__assert_fail@plt+0x1b4d8>
   2d374:	b	2d390 <__assert_fail@plt+0x1b4c8>
   2d378:	ldrb	r0, [r4, #78]	; 0x4e
   2d37c:	cmp	r0, #0
   2d380:	bne	2d758 <__assert_fail@plt+0x1b890>
   2d384:	mov	r1, #0
   2d388:	cmp	r6, #10
   2d38c:	bne	2d3a0 <__assert_fail@plt+0x1b4d8>
   2d390:	ldrb	r0, [r4, #77]	; 0x4d
   2d394:	cmp	r0, #0
   2d398:	movwne	r0, #1
   2d39c:	lsl	r1, r0, #1
   2d3a0:	str	r1, [r4, #60]	; 0x3c
   2d3a4:	cmp	r7, r5
   2d3a8:	ldr	r2, [r4, #28]
   2d3ac:	bne	2d61c <__assert_fail@plt+0x1b754>
   2d3b0:	cmp	r2, r5
   2d3b4:	ble	2d61c <__assert_fail@plt+0x1b754>
   2d3b8:	ldr	r0, [r4, #12]
   2d3bc:	ldr	r0, [r0, r5, lsl #2]
   2d3c0:	cmp	r0, r5
   2d3c4:	bne	2d61c <__assert_fail@plt+0x1b754>
   2d3c8:	ldr	r0, [r4, #8]
   2d3cc:	sub	r2, r2, r5
   2d3d0:	lsl	r2, r2, #2
   2d3d4:	add	r1, r0, r5, lsl #2
   2d3d8:	bl	11a78 <memmove@plt>
   2d3dc:	ldr	r2, [r4, #28]
   2d3e0:	ldr	r0, [r4, #4]
   2d3e4:	add	r1, r0, r5
   2d3e8:	sub	r2, r2, r5
   2d3ec:	bl	11a78 <memmove@plt>
   2d3f0:	ldr	r0, [r4, #28]
   2d3f4:	ldr	r1, [r4, #32]
   2d3f8:	sub	r0, r0, r5
   2d3fc:	sub	r1, r1, r5
   2d400:	cmp	r0, #1
   2d404:	str	r0, [r4, #28]
   2d408:	str	r1, [r4, #32]
   2d40c:	blt	2cf4c <__assert_fail@plt+0x1b084>
   2d410:	ldr	r0, [r4, #12]
   2d414:	mov	r2, #0
   2d418:	add	r1, r0, r5, lsl #2
   2d41c:	ldr	r3, [r1, r2, lsl #2]
   2d420:	sub	r3, r3, r5
   2d424:	str	r3, [r0, r2, lsl #2]
   2d428:	add	r2, r2, #1
   2d42c:	ldr	r3, [r4, #28]
   2d430:	cmp	r2, r3
   2d434:	blt	2d41c <__assert_fail@plt+0x1b554>
   2d438:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d43c:	mov	r0, r6
   2d440:	bl	11ce8 <iswalnum@plt>
   2d444:	mov	r1, #1
   2d448:	cmp	r6, #95	; 0x5f
   2d44c:	beq	2cf00 <__assert_fail@plt+0x1b038>
   2d450:	cmp	r0, #0
   2d454:	beq	2cee4 <__assert_fail@plt+0x1b01c>
   2d458:	b	2cf00 <__assert_fail@plt+0x1b038>
   2d45c:	sub	r0, r8, r9
   2d460:	str	r0, [r4, #28]
   2d464:	cmp	lr, #0
   2d468:	ble	2d4a4 <__assert_fail@plt+0x1b5dc>
   2d46c:	ldr	r1, [r4, #48]	; 0x30
   2d470:	sub	r0, lr, #1
   2d474:	cmp	r1, r0
   2d478:	beq	2d74c <__assert_fail@plt+0x1b884>
   2d47c:	ldr	r1, [r4, #80]	; 0x50
   2d480:	cmp	r1, #2
   2d484:	blt	2d550 <__assert_fail@plt+0x1b688>
   2d488:	ldr	r1, [r4, #8]
   2d48c:	ldr	r6, [r1, r0, lsl #2]
   2d490:	cmn	r6, #1
   2d494:	bne	2d598 <__assert_fail@plt+0x1b6d0>
   2d498:	sub	r0, r0, #1
   2d49c:	cmn	r0, #1
   2d4a0:	bne	2d48c <__assert_fail@plt+0x1b5c4>
   2d4a4:	ldr	r1, [r4, #60]	; 0x3c
   2d4a8:	b	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d4ac:	ldr	r3, [r4, #64]	; 0x40
   2d4b0:	cmp	r3, #0
   2d4b4:	beq	2cfd4 <__assert_fail@plt+0x1b10c>
   2d4b8:	ldr	r1, [r4, #36]	; 0x24
   2d4bc:	ldr	r0, [r4, #28]
   2d4c0:	cmp	r1, r2
   2d4c4:	movgt	r1, r2
   2d4c8:	cmp	r0, r1
   2d4cc:	bge	2d51c <__assert_fail@plt+0x1b654>
   2d4d0:	ldr	r7, [r4]
   2d4d4:	add	r2, r0, r9
   2d4d8:	ldr	r6, [r4, #4]
   2d4dc:	ldrb	r2, [r7, r2]
   2d4e0:	ldrb	r2, [r3, r2]
   2d4e4:	strb	r2, [r6, r0]
   2d4e8:	add	r0, r0, #1
   2d4ec:	cmp	r0, r1
   2d4f0:	bge	2d51c <__assert_fail@plt+0x1b654>
   2d4f4:	ldr	r7, [r4, #24]
   2d4f8:	ldm	r4, {r2, r3}
   2d4fc:	ldr	r6, [r4, #64]	; 0x40
   2d500:	add	r2, r2, r7
   2d504:	ldrb	r2, [r2, r0]
   2d508:	ldrb	r2, [r6, r2]
   2d50c:	strb	r2, [r3, r0]
   2d510:	add	r0, r0, #1
   2d514:	cmp	r0, r1
   2d518:	blt	2d4f4 <__assert_fail@plt+0x1b62c>
   2d51c:	str	r0, [r4, #28]
   2d520:	str	r0, [r4, #32]
   2d524:	mov	r0, #0
   2d528:	str	r0, [r4, #40]	; 0x28
   2d52c:	sub	sp, fp, #28
   2d530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d534:	add	r5, r5, #1
   2d538:	str	r5, [r4, #28]
   2d53c:	str	r5, [r4, #32]
   2d540:	mov	r0, #0
   2d544:	str	r0, [r4, #40]	; 0x28
   2d548:	sub	sp, fp, #28
   2d54c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d550:	ldr	r1, [r4, #4]
   2d554:	ldr	r2, [r4, #68]	; 0x44
   2d558:	ldrb	r0, [r1, r0]
   2d55c:	ubfx	r1, r0, #5, #3
   2d560:	and	r3, r0, #31
   2d564:	ldr	r2, [r2, r1, lsl #2]
   2d568:	mov	r1, #1
   2d56c:	tst	r2, r1, lsl r3
   2d570:	bne	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d574:	mov	r1, #0
   2d578:	cmp	r0, #10
   2d57c:	beq	2d5b0 <__assert_fail@plt+0x1b6e8>
   2d580:	b	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d584:	ldrb	r0, [r4, #77]	; 0x4d
   2d588:	cmp	r0, #0
   2d58c:	movwne	r0, #1
   2d590:	lsl	r1, r0, #1
   2d594:	b	2d340 <__assert_fail@plt+0x1b478>
   2d598:	ldrb	r0, [r4, #78]	; 0x4e
   2d59c:	cmp	r0, #0
   2d5a0:	bne	2d7e4 <__assert_fail@plt+0x1b91c>
   2d5a4:	mov	r1, #0
   2d5a8:	cmp	r6, #10
   2d5ac:	bne	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d5b0:	ldrb	r0, [r4, #77]	; 0x4d
   2d5b4:	cmp	r0, #0
   2d5b8:	movwne	r0, #1
   2d5bc:	lsl	r1, r0, #1
   2d5c0:	str	r1, [r4, #60]	; 0x3c
   2d5c4:	mov	r0, #0
   2d5c8:	ldr	r2, [r4, #28]
   2d5cc:	cmp	r2, #0
   2d5d0:	bne	2d704 <__assert_fail@plt+0x1b83c>
   2d5d4:	str	r0, [r4, #32]
   2d5d8:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d5dc:	mov	r2, #0
   2d5e0:	strb	r2, [r4, #76]	; 0x4c
   2d5e4:	sub	r2, r5, r9
   2d5e8:	ldr	r3, [r4, #44]	; 0x2c
   2d5ec:	ldr	r7, [r4, #52]	; 0x34
   2d5f0:	add	r3, r2, r3
   2d5f4:	add	r2, r2, r7
   2d5f8:	str	r3, [r4, #48]	; 0x30
   2d5fc:	str	r2, [r4, #56]	; 0x38
   2d600:	b	2d004 <__assert_fail@plt+0x1b13c>
   2d604:	and	r0, r6, #2
   2d608:	eor	r1, r0, #10
   2d60c:	str	r1, [r4, #60]	; 0x3c
   2d610:	cmp	r7, r5
   2d614:	ldr	r2, [r4, #28]
   2d618:	beq	2d3b0 <__assert_fail@plt+0x1b4e8>
   2d61c:	mov	r0, #0
   2d620:	strb	r0, [r4, #76]	; 0x4c
   2d624:	sub	r0, r5, r9
   2d628:	ldr	r1, [r4, #44]	; 0x2c
   2d62c:	ldr	r3, [r4, #52]	; 0x34
   2d630:	add	r1, r0, r1
   2d634:	add	r0, r0, r3
   2d638:	str	r1, [r4, #48]	; 0x30
   2d63c:	sub	r1, r7, #1
   2d640:	str	r0, [r4, #56]	; 0x38
   2d644:	add	r0, r1, #1
   2d648:	cmp	r0, #1
   2d64c:	blt	2d664 <__assert_fail@plt+0x1b79c>
   2d650:	ldr	r3, [r4, #12]
   2d654:	ldr	r3, [r3, r1, lsl #2]
   2d658:	sub	r1, r1, #1
   2d65c:	cmp	r3, r5
   2d660:	beq	2d644 <__assert_fail@plt+0x1b77c>
   2d664:	cmp	r0, r2
   2d668:	bge	2d68c <__assert_fail@plt+0x1b7c4>
   2d66c:	ldr	r1, [r4, #8]
   2d670:	ldr	r3, [r1, r0, lsl #2]
   2d674:	cmn	r3, #1
   2d678:	bne	2d68c <__assert_fail@plt+0x1b7c4>
   2d67c:	add	r0, r0, #1
   2d680:	cmp	r2, r0
   2d684:	bne	2d670 <__assert_fail@plt+0x1b7a8>
   2d688:	b	2d694 <__assert_fail@plt+0x1b7cc>
   2d68c:	cmp	r0, r2
   2d690:	bne	2d6a4 <__assert_fail@plt+0x1b7dc>
   2d694:	mov	r0, #0
   2d698:	str	r0, [r4, #28]
   2d69c:	str	r0, [r4, #32]
   2d6a0:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d6a4:	ldr	r1, [r4, #12]
   2d6a8:	ldr	r0, [r1, r0, lsl #2]
   2d6ac:	subs	r2, r0, r5
   2d6b0:	str	r2, [r4, #28]
   2d6b4:	beq	2d6f8 <__assert_fail@plt+0x1b830>
   2d6b8:	cmp	r2, #1
   2d6bc:	blt	2d6e0 <__assert_fail@plt+0x1b818>
   2d6c0:	ldr	r0, [r4, #8]
   2d6c4:	mov	r1, #0
   2d6c8:	mvn	r3, #0
   2d6cc:	str	r3, [r0, r1, lsl #2]
   2d6d0:	add	r1, r1, #1
   2d6d4:	ldr	r2, [r4, #28]
   2d6d8:	cmp	r1, r2
   2d6dc:	blt	2d6cc <__assert_fail@plt+0x1b804>
   2d6e0:	ldr	r0, [r4, #4]
   2d6e4:	mov	r1, #255	; 0xff
   2d6e8:	bl	11d0c <memset@plt>
   2d6ec:	ldr	r0, [r4, #28]
   2d6f0:	str	r0, [r4, #32]
   2d6f4:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d6f8:	mov	r0, #0
   2d6fc:	str	r0, [r4, #32]
   2d700:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d704:	cmp	r2, #1
   2d708:	blt	2d72c <__assert_fail@plt+0x1b864>
   2d70c:	ldr	r0, [r4, #8]
   2d710:	mov	r1, #0
   2d714:	mvn	r3, #0
   2d718:	str	r3, [r0, r1, lsl #2]
   2d71c:	add	r1, r1, #1
   2d720:	ldr	r2, [r4, #28]
   2d724:	cmp	r1, r2
   2d728:	blt	2d718 <__assert_fail@plt+0x1b850>
   2d72c:	ldrb	r0, [r4, #75]	; 0x4b
   2d730:	cmp	r0, #0
   2d734:	beq	2d79c <__assert_fail@plt+0x1b8d4>
   2d738:	ldr	r0, [r4, #4]
   2d73c:	mov	r1, #255	; 0xff
   2d740:	bl	11d0c <memset@plt>
   2d744:	ldr	r0, [r4, #28]
   2d748:	b	2d5d4 <__assert_fail@plt+0x1b70c>
   2d74c:	and	r0, r6, #2
   2d750:	eor	r1, r0, #10
   2d754:	b	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d758:	mov	r0, r6
   2d75c:	bl	11ce8 <iswalnum@plt>
   2d760:	mov	r1, #1
   2d764:	cmp	r6, #95	; 0x5f
   2d768:	beq	2d3a0 <__assert_fail@plt+0x1b4d8>
   2d76c:	cmp	r0, #0
   2d770:	beq	2d384 <__assert_fail@plt+0x1b4bc>
   2d774:	b	2d3a0 <__assert_fail@plt+0x1b4d8>
   2d778:	mov	r0, r7
   2d77c:	bl	11ce8 <iswalnum@plt>
   2d780:	mov	r1, #1
   2d784:	cmp	r7, #95	; 0x5f
   2d788:	beq	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d78c:	cmp	r0, #0
   2d790:	mov	r2, r7
   2d794:	beq	2d198 <__assert_fail@plt+0x1b2d0>
   2d798:	b	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d79c:	mov	r0, r2
   2d7a0:	str	r2, [r4, #32]
   2d7a4:	b	2cf4c <__assert_fail@plt+0x1b084>
   2d7a8:	cmp	r2, #1
   2d7ac:	blt	2d804 <__assert_fail@plt+0x1b93c>
   2d7b0:	cmp	r2, #6
   2d7b4:	mov	r1, r2
   2d7b8:	movge	r1, #6
   2d7bc:	sub	ip, r1, #1
   2d7c0:	add	r1, sp, #14
   2d7c4:	ldrb	r3, [r7, ip]
   2d7c8:	cmp	ip, #0
   2d7cc:	ldrb	r3, [r0, r3]
   2d7d0:	strb	r3, [r1, ip]
   2d7d4:	sub	r3, ip, #1
   2d7d8:	mov	ip, r3
   2d7dc:	bgt	2d7c4 <__assert_fail@plt+0x1b8fc>
   2d7e0:	b	2d080 <__assert_fail@plt+0x1b1b8>
   2d7e4:	mov	r0, r6
   2d7e8:	bl	11ce8 <iswalnum@plt>
   2d7ec:	mov	r1, #1
   2d7f0:	cmp	r6, #95	; 0x5f
   2d7f4:	beq	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d7f8:	cmp	r0, #0
   2d7fc:	beq	2d5a4 <__assert_fail@plt+0x1b6dc>
   2d800:	b	2d5c0 <__assert_fail@plt+0x1b6f8>
   2d804:	add	r1, sp, #14
   2d808:	b	2d080 <__assert_fail@plt+0x1b1b8>
   2d80c:	push	{r4, r5, r6, sl, fp, lr}
   2d810:	add	fp, sp, #16
   2d814:	mov	r3, r2
   2d818:	ldr	r2, [r0, #88]	; 0x58
   2d81c:	mov	r5, r1
   2d820:	mov	r4, r0
   2d824:	mov	r1, r3
   2d828:	bl	2da64 <__assert_fail@plt+0x1bb9c>
   2d82c:	ldr	r1, [r5, #8]
   2d830:	cmp	r1, #1
   2d834:	blt	2d9ac <__assert_fail@plt+0x1bae4>
   2d838:	ldr	r3, [r5, #12]
   2d83c:	ldr	r5, [r4, #84]	; 0x54
   2d840:	movw	lr, #65280	; 0xff00
   2d844:	and	ip, r0, #8
   2d848:	and	r2, r0, #2
   2d84c:	tst	r0, #1
   2d850:	movt	lr, #3
   2d854:	ldr	r5, [r5]
   2d858:	bne	2d8b4 <__assert_fail@plt+0x1b9ec>
   2d85c:	cmp	r2, #0
   2d860:	bne	2d90c <__assert_fail@plt+0x1ba44>
   2d864:	mov	r2, #0
   2d868:	b	2d878 <__assert_fail@plt+0x1b9b0>
   2d86c:	add	r2, r2, #1
   2d870:	cmp	r2, r1
   2d874:	bge	2d9ac <__assert_fail@plt+0x1bae4>
   2d878:	ldr	r0, [r3, r2, lsl #2]
   2d87c:	add	r4, r5, r0, lsl #3
   2d880:	ldr	r4, [r4, #4]
   2d884:	uxtb	r6, r4
   2d888:	cmp	r6, #2
   2d88c:	bne	2d86c <__assert_fail@plt+0x1b9a4>
   2d890:	tst	r4, lr
   2d894:	beq	2d9b0 <__assert_fail@plt+0x1bae8>
   2d898:	tst	r4, #9216	; 0x2400
   2d89c:	bne	2d86c <__assert_fail@plt+0x1b9a4>
   2d8a0:	cmp	ip, #0
   2d8a4:	bne	2d9b0 <__assert_fail@plt+0x1bae8>
   2d8a8:	ands	r4, r4, #32768	; 0x8000
   2d8ac:	bne	2d86c <__assert_fail@plt+0x1b9a4>
   2d8b0:	b	2d9b0 <__assert_fail@plt+0x1bae8>
   2d8b4:	cmp	r2, #0
   2d8b8:	bne	2d95c <__assert_fail@plt+0x1ba94>
   2d8bc:	mov	r2, #0
   2d8c0:	b	2d8d0 <__assert_fail@plt+0x1ba08>
   2d8c4:	add	r2, r2, #1
   2d8c8:	cmp	r2, r1
   2d8cc:	bge	2d9ac <__assert_fail@plt+0x1bae4>
   2d8d0:	ldr	r0, [r3, r2, lsl #2]
   2d8d4:	add	r4, r5, r0, lsl #3
   2d8d8:	ldr	r4, [r4, #4]
   2d8dc:	uxtb	r6, r4
   2d8e0:	cmp	r6, #2
   2d8e4:	bne	2d8c4 <__assert_fail@plt+0x1b9fc>
   2d8e8:	tst	r4, lr
   2d8ec:	beq	2d9b0 <__assert_fail@plt+0x1bae8>
   2d8f0:	tst	r4, #10240	; 0x2800
   2d8f4:	bne	2d8c4 <__assert_fail@plt+0x1b9fc>
   2d8f8:	cmp	ip, #0
   2d8fc:	bne	2d9b0 <__assert_fail@plt+0x1bae8>
   2d900:	ands	r4, r4, #32768	; 0x8000
   2d904:	bne	2d8c4 <__assert_fail@plt+0x1b9fc>
   2d908:	b	2d9b0 <__assert_fail@plt+0x1bae8>
   2d90c:	mov	r2, #0
   2d910:	b	2d920 <__assert_fail@plt+0x1ba58>
   2d914:	add	r2, r2, #1
   2d918:	cmp	r2, r1
   2d91c:	bge	2d9ac <__assert_fail@plt+0x1bae4>
   2d920:	ldr	r0, [r3, r2, lsl #2]
   2d924:	add	r4, r5, r0, lsl #3
   2d928:	ldr	r4, [r4, #4]
   2d92c:	uxtb	r6, r4
   2d930:	cmp	r6, #2
   2d934:	bne	2d914 <__assert_fail@plt+0x1ba4c>
   2d938:	tst	r4, lr
   2d93c:	beq	2d9b0 <__assert_fail@plt+0x1bae8>
   2d940:	tst	r4, #1024	; 0x400
   2d944:	bne	2d914 <__assert_fail@plt+0x1ba4c>
   2d948:	cmp	ip, #0
   2d94c:	bne	2d9b0 <__assert_fail@plt+0x1bae8>
   2d950:	ands	r4, r4, #32768	; 0x8000
   2d954:	bne	2d914 <__assert_fail@plt+0x1ba4c>
   2d958:	b	2d9b0 <__assert_fail@plt+0x1bae8>
   2d95c:	mov	r2, #0
   2d960:	b	2d970 <__assert_fail@plt+0x1baa8>
   2d964:	add	r2, r2, #1
   2d968:	cmp	r2, r1
   2d96c:	bge	2d9ac <__assert_fail@plt+0x1bae4>
   2d970:	ldr	r0, [r3, r2, lsl #2]
   2d974:	add	r4, r5, r0, lsl #3
   2d978:	ldr	r4, [r4, #4]
   2d97c:	uxtb	r6, r4
   2d980:	cmp	r6, #2
   2d984:	bne	2d964 <__assert_fail@plt+0x1ba9c>
   2d988:	tst	r4, lr
   2d98c:	beq	2d9b0 <__assert_fail@plt+0x1bae8>
   2d990:	tst	r4, #2048	; 0x800
   2d994:	bne	2d964 <__assert_fail@plt+0x1ba9c>
   2d998:	cmp	ip, #0
   2d99c:	bne	2d9b0 <__assert_fail@plt+0x1bae8>
   2d9a0:	ands	r4, r4, #32768	; 0x8000
   2d9a4:	bne	2d964 <__assert_fail@plt+0x1ba9c>
   2d9a8:	b	2d9b0 <__assert_fail@plt+0x1bae8>
   2d9ac:	mov	r0, #0
   2d9b0:	pop	{r4, r5, r6, sl, fp, pc}
   2d9b4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   2d9b8:	add	fp, sp, #24
   2d9bc:	mov	r8, r0
   2d9c0:	ldr	r0, [r0, #124]	; 0x7c
   2d9c4:	cmp	r0, #1
   2d9c8:	blt	2da54 <__assert_fail@plt+0x1bb8c>
   2d9cc:	mov	r7, #0
   2d9d0:	b	2d9ec <__assert_fail@plt+0x1bb24>
   2d9d4:	mov	r0, r5
   2d9d8:	bl	17c10 <__assert_fail@plt+0x5d48>
   2d9dc:	ldr	r0, [r8, #124]	; 0x7c
   2d9e0:	add	r7, r7, #1
   2d9e4:	cmp	r7, r0
   2d9e8:	bge	2da54 <__assert_fail@plt+0x1bb8c>
   2d9ec:	ldr	r0, [r8, #132]	; 0x84
   2d9f0:	ldr	r5, [r0, r7, lsl #2]
   2d9f4:	ldr	r0, [r5, #16]
   2d9f8:	cmp	r0, #1
   2d9fc:	blt	2da2c <__assert_fail@plt+0x1bb64>
   2da00:	mov	r4, #0
   2da04:	ldr	r0, [r5, #20]
   2da08:	ldr	r6, [r0, r4, lsl #2]
   2da0c:	ldr	r0, [r6, #16]
   2da10:	bl	17c10 <__assert_fail@plt+0x5d48>
   2da14:	mov	r0, r6
   2da18:	bl	17c10 <__assert_fail@plt+0x5d48>
   2da1c:	ldr	r0, [r5, #16]
   2da20:	add	r4, r4, #1
   2da24:	cmp	r4, r0
   2da28:	blt	2da04 <__assert_fail@plt+0x1bb3c>
   2da2c:	ldr	r0, [r5, #20]
   2da30:	bl	17c10 <__assert_fail@plt+0x5d48>
   2da34:	ldr	r0, [r5, #8]
   2da38:	cmp	r0, #0
   2da3c:	beq	2d9d4 <__assert_fail@plt+0x1bb0c>
   2da40:	ldr	r0, [r0, #8]
   2da44:	bl	17c10 <__assert_fail@plt+0x5d48>
   2da48:	ldr	r0, [r5, #8]
   2da4c:	bl	17c10 <__assert_fail@plt+0x5d48>
   2da50:	b	2d9d4 <__assert_fail@plt+0x1bb0c>
   2da54:	mov	r0, #0
   2da58:	str	r0, [r8, #108]	; 0x6c
   2da5c:	str	r0, [r8, #124]	; 0x7c
   2da60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   2da64:	push	{r4, r5, fp, lr}
   2da68:	add	fp, sp, #8
   2da6c:	mov	r4, r0
   2da70:	cmn	r1, #1
   2da74:	ble	2daac <__assert_fail@plt+0x1bbe4>
   2da78:	ldr	r0, [r4, #48]	; 0x30
   2da7c:	cmp	r0, r1
   2da80:	beq	2db10 <__assert_fail@plt+0x1bc48>
   2da84:	ldr	r0, [r4, #80]	; 0x50
   2da88:	cmp	r0, #2
   2da8c:	blt	2dab4 <__assert_fail@plt+0x1bbec>
   2da90:	ldr	r0, [r4, #8]
   2da94:	ldr	r5, [r0, r1, lsl #2]
   2da98:	cmn	r5, #1
   2da9c:	bne	2dae4 <__assert_fail@plt+0x1bc1c>
   2daa0:	sub	r1, r1, #1
   2daa4:	cmn	r1, #1
   2daa8:	bne	2da94 <__assert_fail@plt+0x1bbcc>
   2daac:	ldr	r0, [r4, #60]	; 0x3c
   2dab0:	pop	{r4, r5, fp, pc}
   2dab4:	ldr	r0, [r4, #4]
   2dab8:	ldr	r2, [r4, #68]	; 0x44
   2dabc:	ldrb	r1, [r0, r1]
   2dac0:	ubfx	r0, r1, #5, #3
   2dac4:	and	r3, r1, #31
   2dac8:	ldr	r2, [r2, r0, lsl #2]
   2dacc:	mov	r0, #1
   2dad0:	tst	r2, r0, lsl r3
   2dad4:	moveq	r0, #0
   2dad8:	cmpeq	r1, #10
   2dadc:	bne	2db0c <__assert_fail@plt+0x1bc44>
   2dae0:	b	2dafc <__assert_fail@plt+0x1bc34>
   2dae4:	ldrb	r0, [r4, #78]	; 0x4e
   2dae8:	cmp	r0, #0
   2daec:	bne	2db1c <__assert_fail@plt+0x1bc54>
   2daf0:	mov	r0, #0
   2daf4:	cmp	r5, #10
   2daf8:	popne	{r4, r5, fp, pc}
   2dafc:	ldrb	r0, [r4, #77]	; 0x4d
   2db00:	cmp	r0, #0
   2db04:	movwne	r0, #1
   2db08:	lsl	r0, r0, #1
   2db0c:	pop	{r4, r5, fp, pc}
   2db10:	and	r0, r2, #2
   2db14:	eor	r0, r0, #10
   2db18:	pop	{r4, r5, fp, pc}
   2db1c:	mov	r0, r5
   2db20:	bl	11ce8 <iswalnum@plt>
   2db24:	mov	r1, r0
   2db28:	mov	r0, #1
   2db2c:	cmp	r5, #95	; 0x5f
   2db30:	beq	2db0c <__assert_fail@plt+0x1bc44>
   2db34:	cmp	r1, #0
   2db38:	beq	2daf0 <__assert_fail@plt+0x1bc28>
   2db3c:	b	2db0c <__assert_fail@plt+0x1bc44>
   2db40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db44:	add	fp, sp, #28
   2db48:	sub	sp, sp, #4
   2db4c:	mov	sl, r0
   2db50:	ldr	r0, [r1, #4]
   2db54:	cmp	r0, #1
   2db58:	blt	2dc28 <__assert_fail@plt+0x1bd60>
   2db5c:	ldr	r7, [sl, #84]	; 0x54
   2db60:	mov	r8, r2
   2db64:	mov	r5, r1
   2db68:	mov	r4, #0
   2db6c:	b	2db7c <__assert_fail@plt+0x1bcb4>
   2db70:	add	r4, r4, #1
   2db74:	cmp	r4, r0
   2db78:	bge	2dc28 <__assert_fail@plt+0x1bd60>
   2db7c:	ldr	r1, [r5, #8]
   2db80:	ldr	r6, [r1, r4, lsl #2]
   2db84:	ldr	r1, [r7]
   2db88:	add	r2, r1, r6, lsl #3
   2db8c:	ldrb	r2, [r2, #4]
   2db90:	cmp	r2, #8
   2db94:	bne	2db70 <__assert_fail@plt+0x1bca8>
   2db98:	ldr	r1, [r1, r6, lsl #3]
   2db9c:	cmp	r1, #31
   2dba0:	bgt	2db70 <__assert_fail@plt+0x1bca8>
   2dba4:	ldr	r2, [r7, #80]	; 0x50
   2dba8:	mov	r3, #1
   2dbac:	tst	r2, r3, lsl r1
   2dbb0:	beq	2db70 <__assert_fail@plt+0x1bca8>
   2dbb4:	ldr	r0, [sl, #124]	; 0x7c
   2dbb8:	ldr	r9, [sl, #128]	; 0x80
   2dbbc:	cmp	r0, r9
   2dbc0:	beq	2dc04 <__assert_fail@plt+0x1bd3c>
   2dbc4:	mov	r0, #1
   2dbc8:	mov	r1, #24
   2dbcc:	bl	383fc <__assert_fail@plt+0x26534>
   2dbd0:	ldr	r1, [sl, #124]	; 0x7c
   2dbd4:	ldr	r2, [sl, #132]	; 0x84
   2dbd8:	str	r0, [r2, r1, lsl #2]
   2dbdc:	ldr	r0, [sl, #132]	; 0x84
   2dbe0:	ldr	r0, [r0, r1, lsl #2]
   2dbe4:	cmp	r0, #0
   2dbe8:	beq	2dc34 <__assert_fail@plt+0x1bd6c>
   2dbec:	add	r1, r1, #1
   2dbf0:	str	r6, [r0, #4]
   2dbf4:	str	r1, [sl, #124]	; 0x7c
   2dbf8:	str	r8, [r0]
   2dbfc:	ldr	r0, [r5, #4]
   2dc00:	b	2db70 <__assert_fail@plt+0x1bca8>
   2dc04:	ldr	r0, [sl, #132]	; 0x84
   2dc08:	lsl	r1, r9, #3
   2dc0c:	bl	38480 <__assert_fail@plt+0x265b8>
   2dc10:	cmp	r0, #0
   2dc14:	beq	2dc34 <__assert_fail@plt+0x1bd6c>
   2dc18:	lsl	r1, r9, #1
   2dc1c:	str	r1, [sl, #128]	; 0x80
   2dc20:	str	r0, [sl, #132]	; 0x84
   2dc24:	b	2dbc4 <__assert_fail@plt+0x1bcfc>
   2dc28:	mov	r0, #0
   2dc2c:	sub	sp, fp, #28
   2dc30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc34:	mov	r0, #12
   2dc38:	sub	sp, fp, #28
   2dc3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dc44:	add	fp, sp, #28
   2dc48:	sub	sp, sp, #76	; 0x4c
   2dc4c:	mov	ip, r0
   2dc50:	ldr	r0, [r1, #4]
   2dc54:	cmp	r0, #1
   2dc58:	blt	2e5c8 <__assert_fail@plt+0x1c700>
   2dc5c:	ldr	r2, [ip, #84]	; 0x54
   2dc60:	ldr	r0, [ip, #40]	; 0x28
   2dc64:	mov	r3, #0
   2dc68:	str	ip, [sp, #44]	; 0x2c
   2dc6c:	str	r1, [sp, #12]
   2dc70:	str	r0, [sp, #52]	; 0x34
   2dc74:	str	r2, [sp, #24]
   2dc78:	b	2dc98 <__assert_fail@plt+0x1bdd0>
   2dc7c:	ldr	r1, [sp, #12]
   2dc80:	ldr	r3, [sp, #16]
   2dc84:	ldr	r2, [sp, #24]
   2dc88:	ldr	r0, [r1, #4]
   2dc8c:	add	r3, r3, #1
   2dc90:	cmp	r3, r0
   2dc94:	bge	2e5c8 <__assert_fail@plt+0x1c700>
   2dc98:	ldr	r0, [r1, #8]
   2dc9c:	str	r3, [sp, #16]
   2dca0:	ldr	r3, [r0, r3, lsl #2]
   2dca4:	ldr	r0, [r2]
   2dca8:	add	r4, r0, r3, lsl #3
   2dcac:	mov	r1, r3
   2dcb0:	str	r3, [sp, #48]	; 0x30
   2dcb4:	ldr	r5, [r4, #4]!
   2dcb8:	uxtb	r0, r5
   2dcbc:	cmp	r0, #4
   2dcc0:	bne	2dc7c <__assert_fail@plt+0x1bdb4>
   2dcc4:	movw	r0, #65280	; 0xff00
   2dcc8:	movt	r0, #3
   2dccc:	tst	r5, r0
   2dcd0:	beq	2dde0 <__assert_fail@plt+0x1bf18>
   2dcd4:	ldr	r1, [sp, #52]	; 0x34
   2dcd8:	cmn	r1, #1
   2dcdc:	ble	2dd18 <__assert_fail@plt+0x1be50>
   2dce0:	ldr	r0, [ip, #48]	; 0x30
   2dce4:	cmp	r0, r1
   2dce8:	beq	2e56c <__assert_fail@plt+0x1c6a4>
   2dcec:	ldr	r0, [ip, #80]	; 0x50
   2dcf0:	cmp	r0, #2
   2dcf4:	blt	2dd38 <__assert_fail@plt+0x1be70>
   2dcf8:	ldr	r0, [ip, #8]
   2dcfc:	ldr	r1, [sp, #52]	; 0x34
   2dd00:	ldr	r6, [r0, r1, lsl #2]
   2dd04:	cmn	r6, #1
   2dd08:	bne	2dd74 <__assert_fail@plt+0x1beac>
   2dd0c:	sub	r1, r1, #1
   2dd10:	cmn	r1, #1
   2dd14:	bne	2dd00 <__assert_fail@plt+0x1be38>
   2dd18:	ldr	r1, [ip, #60]	; 0x3c
   2dd1c:	and	r0, r1, #1
   2dd20:	tst	r5, #1024	; 0x400
   2dd24:	eor	r2, r0, #1
   2dd28:	beq	2ddac <__assert_fail@plt+0x1bee4>
   2dd2c:	cmp	r0, #0
   2dd30:	beq	2dc7c <__assert_fail@plt+0x1bdb4>
   2dd34:	b	2ddac <__assert_fail@plt+0x1bee4>
   2dd38:	ldr	r0, [ip, #4]
   2dd3c:	ldr	r2, [sp, #52]	; 0x34
   2dd40:	ldr	r1, [ip, #68]	; 0x44
   2dd44:	ldrb	r0, [r0, r2]
   2dd48:	ubfx	r2, r0, #5, #3
   2dd4c:	and	r7, r0, #31
   2dd50:	ldr	r3, [r1, r2, lsl #2]
   2dd54:	mov	r1, #1
   2dd58:	mov	r2, #0
   2dd5c:	tst	r3, r1, lsl r7
   2dd60:	bne	2ddac <__assert_fail@plt+0x1bee4>
   2dd64:	mov	r1, #0
   2dd68:	cmp	r0, #10
   2dd6c:	beq	2dd8c <__assert_fail@plt+0x1bec4>
   2dd70:	b	2dd9c <__assert_fail@plt+0x1bed4>
   2dd74:	ldrb	r0, [ip, #78]	; 0x4e
   2dd78:	cmp	r0, #0
   2dd7c:	bne	2e58c <__assert_fail@plt+0x1c6c4>
   2dd80:	mov	r1, #0
   2dd84:	cmp	r6, #10
   2dd88:	bne	2dd9c <__assert_fail@plt+0x1bed4>
   2dd8c:	ldrb	r0, [ip, #77]	; 0x4d
   2dd90:	cmp	r0, #0
   2dd94:	movwne	r0, #1
   2dd98:	lsl	r1, r0, #1
   2dd9c:	and	r0, r1, #1
   2dda0:	tst	r5, #1024	; 0x400
   2dda4:	eor	r2, r0, #1
   2dda8:	bne	2dd2c <__assert_fail@plt+0x1be64>
   2ddac:	ldr	r0, [r4]
   2ddb0:	cmp	r2, #0
   2ddb4:	bne	2ddc0 <__assert_fail@plt+0x1bef8>
   2ddb8:	ands	r2, r0, #2048	; 0x800
   2ddbc:	bne	2dc7c <__assert_fail@plt+0x1bdb4>
   2ddc0:	tst	r1, #2
   2ddc4:	bne	2ddd0 <__assert_fail@plt+0x1bf08>
   2ddc8:	ands	r2, r0, #8192	; 0x2000
   2ddcc:	bne	2dc7c <__assert_fail@plt+0x1bdb4>
   2ddd0:	tst	r1, #8
   2ddd4:	bne	2dde0 <__assert_fail@plt+0x1bf18>
   2ddd8:	ands	r0, r0, #32768	; 0x8000
   2dddc:	bne	2dc7c <__assert_fail@plt+0x1bdb4>
   2dde0:	ldr	r2, [ip, #108]	; 0x6c
   2dde4:	ldr	r0, [ip, #84]	; 0x54
   2dde8:	ldr	r9, [ip, #4]
   2ddec:	cmp	r2, #1
   2ddf0:	str	r0, [sp, #36]	; 0x24
   2ddf4:	str	r2, [sp, #20]
   2ddf8:	blt	2de8c <__assert_fail@plt+0x1bfc4>
   2ddfc:	ldr	r4, [sp, #52]	; 0x34
   2de00:	ldr	r1, [ip, #116]	; 0x74
   2de04:	mov	r0, #0
   2de08:	mov	r5, #1
   2de0c:	mov	lr, r4
   2de10:	add	r3, r2, r0
   2de14:	add	r3, r3, r3, lsr #31
   2de18:	asr	r7, r3, #1
   2de1c:	add	r6, r7, r7, lsl #1
   2de20:	add	r6, r1, r6, lsl #3
   2de24:	ldr	r6, [r6, #4]
   2de28:	cmp	r6, lr
   2de2c:	addlt	r0, r5, r3, asr #1
   2de30:	movge	r2, r7
   2de34:	cmp	r0, r2
   2de38:	blt	2de10 <__assert_fail@plt+0x1bf48>
   2de3c:	ldr	r1, [sp, #20]
   2de40:	cmp	r0, r1
   2de44:	bge	2dea4 <__assert_fail@plt+0x1bfdc>
   2de48:	cmn	r0, #1
   2de4c:	beq	2dea4 <__assert_fail@plt+0x1bfdc>
   2de50:	ldr	r1, [ip, #116]	; 0x74
   2de54:	add	r0, r0, r0, lsl #1
   2de58:	add	r0, r1, r0, lsl #3
   2de5c:	ldr	r1, [r0, #4]
   2de60:	cmp	r1, lr
   2de64:	bne	2dea4 <__assert_fail@plt+0x1bfdc>
   2de68:	ldr	r1, [r0]
   2de6c:	ldr	r2, [sp, #48]	; 0x30
   2de70:	cmp	r1, r2
   2de74:	beq	2e2ac <__assert_fail@plt+0x1c3e4>
   2de78:	ldrb	r1, [r0, #20]
   2de7c:	add	r0, r0, #24
   2de80:	cmp	r1, #0
   2de84:	bne	2de68 <__assert_fail@plt+0x1bfa0>
   2de88:	b	2dea4 <__assert_fail@plt+0x1bfdc>
   2de8c:	ldr	r4, [sp, #52]	; 0x34
   2de90:	mov	r0, #0
   2de94:	mov	lr, r4
   2de98:	ldr	r1, [sp, #20]
   2de9c:	cmp	r0, r1
   2dea0:	blt	2de48 <__assert_fail@plt+0x1bf80>
   2dea4:	ldr	r0, [ip, #124]	; 0x7c
   2dea8:	cmp	r0, #1
   2deac:	ldr	r0, [sp, #20]
   2deb0:	blt	2e2b0 <__assert_fail@plt+0x1c3e8>
   2deb4:	ldr	r0, [sp, #36]	; 0x24
   2deb8:	ldr	r1, [sp, #48]	; 0x30
   2debc:	mov	r3, #0
   2dec0:	ldr	r0, [r0]
   2dec4:	ldr	r2, [r0, r1, lsl #3]
   2dec8:	str	r2, [sp, #32]
   2decc:	ldr	r1, [ip, #132]	; 0x84
   2ded0:	str	r3, [sp, #28]
   2ded4:	ldr	r6, [r1, r3, lsl #2]
   2ded8:	ldr	r1, [r6, #4]
   2dedc:	ldr	r0, [r0, r1, lsl #3]
   2dee0:	cmp	r0, r2
   2dee4:	bne	2e280 <__assert_fail@plt+0x1c3b8>
   2dee8:	ldr	r0, [r6, #16]
   2deec:	ldr	r1, [r6]
   2def0:	mov	r8, #0
   2def4:	mov	r7, lr
   2def8:	str	r6, [sp, #40]	; 0x28
   2defc:	cmp	r0, #1
   2df00:	blt	2e038 <__assert_fail@plt+0x1c170>
   2df04:	mov	r5, r1
   2df08:	ldr	r1, [r6, #20]
   2df0c:	ldr	r4, [r1, r8, lsl #2]
   2df10:	ldr	r1, [r4, #4]
   2df14:	sub	sl, r1, r5
   2df18:	str	r1, [fp, #-48]	; 0xffffffd0
   2df1c:	cmp	sl, #1
   2df20:	blt	2df54 <__assert_fail@plt+0x1c08c>
   2df24:	ldr	r1, [ip, #28]
   2df28:	add	r3, sl, r7
   2df2c:	cmp	r3, r1
   2df30:	bgt	2dfa8 <__assert_fail@plt+0x1c0e0>
   2df34:	add	r0, r9, r7
   2df38:	add	r1, r9, r5
   2df3c:	mov	r2, sl
   2df40:	bl	11ca0 <bcmp@plt>
   2df44:	ldr	ip, [sp, #44]	; 0x2c
   2df48:	ldr	lr, [sp, #52]	; 0x34
   2df4c:	cmp	r0, #0
   2df50:	bne	2e030 <__assert_fail@plt+0x1c168>
   2df54:	ldr	r3, [sp, #48]	; 0x30
   2df58:	mov	r2, r4
   2df5c:	mov	r0, ip
   2df60:	mov	r1, r6
   2df64:	str	lr, [sp]
   2df68:	mov	r4, ip
   2df6c:	bl	2ece8 <__assert_fail@plt+0x1ce20>
   2df70:	cmp	r0, #1
   2df74:	bhi	2e5dc <__assert_fail@plt+0x1c714>
   2df78:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2df7c:	ldr	r0, [r6, #16]
   2df80:	ldr	r9, [r4, #4]
   2df84:	mov	ip, r4
   2df88:	ldr	r4, [sp, #52]	; 0x34
   2df8c:	add	r8, r8, #1
   2df90:	add	r7, sl, r7
   2df94:	cmp	r8, r0
   2df98:	mov	r5, r1
   2df9c:	mov	lr, r4
   2dfa0:	blt	2df08 <__assert_fail@plt+0x1c040>
   2dfa4:	b	2e038 <__assert_fail@plt+0x1c170>
   2dfa8:	ldr	r2, [ip, #48]	; 0x30
   2dfac:	cmp	r3, r2
   2dfb0:	bgt	2e274 <__assert_fail@plt+0x1c3ac>
   2dfb4:	ldr	r0, [ip, #36]	; 0x24
   2dfb8:	ldr	r6, [ip, #104]	; 0x68
   2dfbc:	cmp	r0, r3
   2dfc0:	cmple	r0, r2
   2dfc4:	blt	2dfd4 <__assert_fail@plt+0x1c10c>
   2dfc8:	cmp	r1, r3
   2dfcc:	cmple	r1, r2
   2dfd0:	bge	2dff4 <__assert_fail@plt+0x1c12c>
   2dfd4:	add	r1, r3, #1
   2dfd8:	mov	r0, ip
   2dfdc:	mov	r9, r3
   2dfe0:	bl	2e614 <__assert_fail@plt+0x1c74c>
   2dfe4:	ldr	ip, [sp, #44]	; 0x2c
   2dfe8:	mov	r3, r9
   2dfec:	cmp	r0, #0
   2dff0:	bne	2e5dc <__assert_fail@plt+0x1c714>
   2dff4:	cmp	r3, r6
   2dff8:	ble	2e024 <__assert_fail@plt+0x1c15c>
   2dffc:	sub	r0, r3, r6
   2e000:	mov	r1, #0
   2e004:	lsl	r2, r0, #2
   2e008:	ldr	r0, [ip, #100]	; 0x64
   2e00c:	add	r0, r0, r6, lsl #2
   2e010:	mov	r6, r3
   2e014:	add	r0, r0, #4
   2e018:	bl	11d0c <memset@plt>
   2e01c:	ldr	ip, [sp, #44]	; 0x2c
   2e020:	str	r6, [ip, #104]	; 0x68
   2e024:	ldr	r9, [ip, #4]
   2e028:	ldr	r6, [sp, #40]	; 0x28
   2e02c:	b	2df34 <__assert_fail@plt+0x1c06c>
   2e030:	ldr	r0, [r6, #16]
   2e034:	mov	r1, r5
   2e038:	cmp	r8, r0
   2e03c:	blt	2e280 <__assert_fail@plt+0x1c3b8>
   2e040:	cmp	r8, #0
   2e044:	addne	r1, r1, #1
   2e048:	cmp	r1, lr
   2e04c:	ble	2e068 <__assert_fail@plt+0x1c1a0>
   2e050:	b	2e280 <__assert_fail@plt+0x1c3b8>
   2e054:	ldr	r6, [sp, #40]	; 0x28
   2e058:	add	r1, sl, #1
   2e05c:	cmp	sl, lr
   2e060:	mov	r9, r8
   2e064:	bge	2e280 <__assert_fail@plt+0x1c3b8>
   2e068:	ldr	r0, [r6]
   2e06c:	mov	sl, r1
   2e070:	cmp	r1, r0
   2e074:	ble	2e0a0 <__assert_fail@plt+0x1c1d8>
   2e078:	ldr	r0, [ip, #28]
   2e07c:	cmp	r7, r0
   2e080:	bge	2e204 <__assert_fail@plt+0x1c33c>
   2e084:	add	r5, r7, #1
   2e088:	add	r1, sl, r9
   2e08c:	ldrb	r0, [r9, r7]
   2e090:	ldrb	r1, [r1, #-1]
   2e094:	cmp	r0, r1
   2e098:	beq	2e0a4 <__assert_fail@plt+0x1c1dc>
   2e09c:	b	2e280 <__assert_fail@plt+0x1c3b8>
   2e0a0:	mov	r5, r7
   2e0a4:	ldr	r0, [ip, #100]	; 0x64
   2e0a8:	mov	r8, r9
   2e0ac:	mov	r7, r5
   2e0b0:	ldr	r2, [r0, sl, lsl #2]
   2e0b4:	cmp	r2, #0
   2e0b8:	beq	2e054 <__assert_fail@plt+0x1c18c>
   2e0bc:	ldr	r0, [r2, #8]
   2e0c0:	cmp	r0, #1
   2e0c4:	blt	2e054 <__assert_fail@plt+0x1c18c>
   2e0c8:	ldr	r1, [sp, #36]	; 0x24
   2e0cc:	ldr	r2, [r2, #12]
   2e0d0:	ldr	r4, [sp, #32]
   2e0d4:	ldr	r1, [r1]
   2e0d8:	b	2e0e8 <__assert_fail@plt+0x1c220>
   2e0dc:	add	r2, r2, #4
   2e0e0:	subs	r0, r0, #1
   2e0e4:	beq	2e054 <__assert_fail@plt+0x1c18c>
   2e0e8:	ldr	r5, [r2]
   2e0ec:	add	r3, r1, r5, lsl #3
   2e0f0:	ldrb	r3, [r3, #4]
   2e0f4:	cmp	r3, #9
   2e0f8:	bne	2e0dc <__assert_fail@plt+0x1c214>
   2e0fc:	ldr	r3, [r1, r5, lsl #3]
   2e100:	cmp	r3, r4
   2e104:	bne	2e0dc <__assert_fail@plt+0x1c214>
   2e108:	cmn	r5, #1
   2e10c:	beq	2e054 <__assert_fail@plt+0x1c18c>
   2e110:	ldr	r1, [r6, #8]
   2e114:	mov	r4, lr
   2e118:	str	r7, [fp, #-48]	; 0xffffffd0
   2e11c:	cmp	r1, #0
   2e120:	bne	2e150 <__assert_fail@plt+0x1c288>
   2e124:	ldr	r0, [r6]
   2e128:	mov	r9, #12
   2e12c:	sub	r0, sl, r0
   2e130:	add	r1, r0, #1
   2e134:	mov	r0, #12
   2e138:	bl	383fc <__assert_fail@plt+0x26534>
   2e13c:	ldr	ip, [sp, #44]	; 0x2c
   2e140:	mov	r1, r0
   2e144:	cmp	r0, #0
   2e148:	str	r0, [r6, #8]
   2e14c:	beq	2e5cc <__assert_fail@plt+0x1c704>
   2e150:	ldr	r3, [r6]
   2e154:	ldr	r2, [r6, #4]
   2e158:	mov	r0, #9
   2e15c:	stm	sp, {r5, sl}
   2e160:	str	r0, [sp, #8]
   2e164:	mov	r0, ip
   2e168:	bl	2eec0 <__assert_fail@plt+0x1cff8>
   2e16c:	ldr	ip, [sp, #44]	; 0x2c
   2e170:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2e174:	cmp	r0, #1
   2e178:	mov	lr, r4
   2e17c:	beq	2e054 <__assert_fail@plt+0x1c18c>
   2e180:	mov	r9, r0
   2e184:	cmp	r0, #0
   2e188:	bne	2e5cc <__assert_fail@plt+0x1c704>
   2e18c:	ldr	r7, [sp, #40]	; 0x28
   2e190:	ldr	r1, [r7, #12]
   2e194:	ldr	r0, [r7, #16]
   2e198:	cmp	r0, r1
   2e19c:	beq	2e24c <__assert_fail@plt+0x1c384>
   2e1a0:	mov	r0, #1
   2e1a4:	mov	r1, #20
   2e1a8:	bl	383fc <__assert_fail@plt+0x26534>
   2e1ac:	cmp	r0, #0
   2e1b0:	beq	2e5fc <__assert_fail@plt+0x1c734>
   2e1b4:	mov	r2, r0
   2e1b8:	ldr	r0, [r7, #16]
   2e1bc:	ldr	r1, [r7, #20]
   2e1c0:	ldr	r3, [sp, #48]	; 0x30
   2e1c4:	str	r2, [r1, r0, lsl #2]
   2e1c8:	stm	r2, {r5, sl}
   2e1cc:	ldr	r5, [sp, #44]	; 0x2c
   2e1d0:	add	r0, r0, #1
   2e1d4:	mov	r1, r7
   2e1d8:	str	r0, [r7, #16]
   2e1dc:	str	r4, [sp]
   2e1e0:	mov	r0, r5
   2e1e4:	bl	2ece8 <__assert_fail@plt+0x1ce20>
   2e1e8:	cmp	r0, #1
   2e1ec:	bhi	2e5dc <__assert_fail@plt+0x1c714>
   2e1f0:	ldr	r8, [r5, #4]
   2e1f4:	ldr	r7, [fp, #-48]	; 0xffffffd0
   2e1f8:	mov	ip, r5
   2e1fc:	mov	lr, r4
   2e200:	b	2e054 <__assert_fail@plt+0x1c18c>
   2e204:	ldr	r0, [ip, #48]	; 0x30
   2e208:	cmp	r7, r0
   2e20c:	bge	2e280 <__assert_fail@plt+0x1c3b8>
   2e210:	add	r5, r7, #1
   2e214:	mov	r0, ip
   2e218:	mov	r8, r7
   2e21c:	mov	r4, ip
   2e220:	mov	r1, r5
   2e224:	bl	2e614 <__assert_fail@plt+0x1c74c>
   2e228:	cmp	r0, #0
   2e22c:	bne	2e5dc <__assert_fail@plt+0x1c714>
   2e230:	ldr	r9, [r4, #4]
   2e234:	mov	ip, r4
   2e238:	ldr	r4, [sp, #52]	; 0x34
   2e23c:	ldr	r6, [sp, #40]	; 0x28
   2e240:	mov	r7, r8
   2e244:	mov	lr, r4
   2e248:	b	2e088 <__assert_fail@plt+0x1c1c0>
   2e24c:	mov	r1, #1
   2e250:	orr	r6, r1, r0, lsl #1
   2e254:	ldr	r0, [r7, #20]
   2e258:	lsl	r1, r6, #2
   2e25c:	bl	38480 <__assert_fail@plt+0x265b8>
   2e260:	cmp	r0, #0
   2e264:	beq	2e5fc <__assert_fail@plt+0x1c734>
   2e268:	str	r6, [r7, #12]
   2e26c:	str	r0, [r7, #20]
   2e270:	b	2e1a0 <__assert_fail@plt+0x1c2d8>
   2e274:	mov	r1, r5
   2e278:	cmp	r8, r0
   2e27c:	bge	2e040 <__assert_fail@plt+0x1c178>
   2e280:	ldr	r3, [sp, #28]
   2e284:	ldr	r0, [ip, #124]	; 0x7c
   2e288:	add	r3, r3, #1
   2e28c:	cmp	r3, r0
   2e290:	bge	2e2a4 <__assert_fail@plt+0x1c3dc>
   2e294:	ldr	r0, [sp, #36]	; 0x24
   2e298:	ldr	r2, [sp, #32]
   2e29c:	ldr	r0, [r0]
   2e2a0:	b	2decc <__assert_fail@plt+0x1c004>
   2e2a4:	ldr	r0, [ip, #108]	; 0x6c
   2e2a8:	b	2e2b0 <__assert_fail@plt+0x1c3e8>
   2e2ac:	ldr	r0, [sp, #20]
   2e2b0:	ldr	r7, [sp, #20]
   2e2b4:	mov	r1, #0
   2e2b8:	str	r1, [fp, #-32]	; 0xffffffe0
   2e2bc:	cmp	r7, r0
   2e2c0:	blt	2e2d8 <__assert_fail@plt+0x1c410>
   2e2c4:	b	2dc7c <__assert_fail@plt+0x1bdb4>
   2e2c8:	ldr	r0, [ip, #108]	; 0x6c
   2e2cc:	add	r7, r7, #1
   2e2d0:	cmp	r7, r0
   2e2d4:	bge	2dc7c <__assert_fail@plt+0x1bdb4>
   2e2d8:	ldr	r0, [ip, #116]	; 0x74
   2e2dc:	add	r1, r7, r7, lsl #1
   2e2e0:	ldr	r3, [sp, #48]	; 0x30
   2e2e4:	ldr	r2, [r0, r1, lsl #3]
   2e2e8:	cmp	r2, r3
   2e2ec:	bne	2e2c8 <__assert_fail@plt+0x1c400>
   2e2f0:	add	r0, r0, r1, lsl #3
   2e2f4:	ldr	r2, [sp, #52]	; 0x34
   2e2f8:	ldr	r1, [r0, #4]
   2e2fc:	cmp	r1, r2
   2e300:	bne	2e2c8 <__assert_fail@plt+0x1c400>
   2e304:	str	r7, [sp, #20]
   2e308:	ldr	r4, [r0, #8]
   2e30c:	ldr	r7, [r0, #12]
   2e310:	ldr	r0, [sp, #24]
   2e314:	ldr	r8, [r0, #24]
   2e318:	cmp	r7, r4
   2e31c:	bne	2e338 <__assert_fail@plt+0x1c470>
   2e320:	ldr	r1, [sp, #48]	; 0x30
   2e324:	ldr	r0, [r0, #20]
   2e328:	add	r1, r1, r1, lsl #1
   2e32c:	add	r0, r0, r1, lsl #2
   2e330:	ldr	r0, [r0, #8]
   2e334:	b	2e344 <__assert_fail@plt+0x1c47c>
   2e338:	ldr	r0, [r0, #12]
   2e33c:	ldr	r1, [sp, #48]	; 0x30
   2e340:	add	r0, r0, r1, lsl #2
   2e344:	ldr	r9, [r0]
   2e348:	ldr	r0, [sp, #52]	; 0x34
   2e34c:	add	r0, r7, r0
   2e350:	sub	r5, r0, r4
   2e354:	cmp	r5, #0
   2e358:	ble	2e394 <__assert_fail@plt+0x1c4cc>
   2e35c:	ldr	r1, [ip, #48]	; 0x30
   2e360:	sub	r0, r5, #1
   2e364:	cmp	r1, r0
   2e368:	beq	2e530 <__assert_fail@plt+0x1c668>
   2e36c:	ldr	r1, [ip, #80]	; 0x50
   2e370:	cmp	r1, #2
   2e374:	blt	2e39c <__assert_fail@plt+0x1c4d4>
   2e378:	ldr	r1, [ip, #8]
   2e37c:	ldr	r6, [r1, r0, lsl #2]
   2e380:	cmn	r6, #1
   2e384:	bne	2e3cc <__assert_fail@plt+0x1c504>
   2e388:	sub	r0, r0, #1
   2e38c:	cmn	r0, #1
   2e390:	bne	2e37c <__assert_fail@plt+0x1c4b4>
   2e394:	ldr	sl, [ip, #60]	; 0x3c
   2e398:	b	2e3f4 <__assert_fail@plt+0x1c52c>
   2e39c:	ldr	r1, [ip, #4]
   2e3a0:	ldr	r2, [ip, #68]	; 0x44
   2e3a4:	mov	sl, #1
   2e3a8:	ldrb	r0, [r1, r0]
   2e3ac:	ubfx	r1, r0, #5, #3
   2e3b0:	ldr	r1, [r2, r1, lsl #2]
   2e3b4:	and	r2, r0, #31
   2e3b8:	tst	r1, sl, lsl r2
   2e3bc:	moveq	sl, #0
   2e3c0:	cmpeq	r0, #10
   2e3c4:	bne	2e3f4 <__assert_fail@plt+0x1c52c>
   2e3c8:	b	2e3e4 <__assert_fail@plt+0x1c51c>
   2e3cc:	ldrb	r0, [ip, #78]	; 0x4e
   2e3d0:	cmp	r0, #0
   2e3d4:	bne	2e540 <__assert_fail@plt+0x1c678>
   2e3d8:	mov	sl, #0
   2e3dc:	cmp	r6, #10
   2e3e0:	bne	2e3f4 <__assert_fail@plt+0x1c52c>
   2e3e4:	ldrb	r0, [ip, #77]	; 0x4d
   2e3e8:	cmp	r0, #0
   2e3ec:	movwne	r0, #1
   2e3f0:	lsl	sl, r0, #1
   2e3f4:	ldr	r0, [ip, #100]	; 0x64
   2e3f8:	ldr	r2, [sp, #52]	; 0x34
   2e3fc:	add	r1, r9, r9, lsl #1
   2e400:	ldr	r2, [r0, r2, lsl #2]
   2e404:	ldr	r0, [r0, r5, lsl #2]
   2e408:	cmp	r2, #0
   2e40c:	beq	2e418 <__assert_fail@plt+0x1c550>
   2e410:	ldr	r2, [r2, #8]
   2e414:	b	2e41c <__assert_fail@plt+0x1c554>
   2e418:	mov	r2, #0
   2e41c:	add	r8, r8, r1, lsl #2
   2e420:	sub	r6, fp, #44	; 0x2c
   2e424:	cmp	r0, #0
   2e428:	str	r2, [fp, #-48]	; 0xffffffd0
   2e42c:	beq	2e498 <__assert_fail@plt+0x1c5d0>
   2e430:	ldr	r1, [r0, #40]	; 0x28
   2e434:	mov	r0, r6
   2e438:	mov	r2, r8
   2e43c:	bl	2ea58 <__assert_fail@plt+0x1cb90>
   2e440:	cmp	r0, #0
   2e444:	str	r0, [fp, #-32]	; 0xffffffe0
   2e448:	bne	2e5e4 <__assert_fail@plt+0x1c71c>
   2e44c:	ldr	r1, [sp, #24]
   2e450:	sub	r0, fp, #32
   2e454:	mov	r2, r6
   2e458:	mov	r3, sl
   2e45c:	bl	2c208 <__assert_fail@plt+0x1a340>
   2e460:	ldr	r6, [sp, #44]	; 0x2c
   2e464:	ldr	r1, [r6, #100]	; 0x64
   2e468:	str	r0, [r1, r5, lsl #2]
   2e46c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2e470:	bl	17c10 <__assert_fail@plt+0x5d48>
   2e474:	ldr	r0, [r6, #100]	; 0x64
   2e478:	mov	ip, r6
   2e47c:	ldr	r1, [r0, r5, lsl #2]
   2e480:	cmp	r1, #0
   2e484:	bne	2e4c8 <__assert_fail@plt+0x1c600>
   2e488:	ldr	r9, [fp, #-32]	; 0xffffffe0
   2e48c:	cmp	r9, #0
   2e490:	beq	2e4c8 <__assert_fail@plt+0x1c600>
   2e494:	b	2e5d0 <__assert_fail@plt+0x1c708>
   2e498:	ldr	r1, [sp, #24]
   2e49c:	sub	r0, fp, #32
   2e4a0:	mov	r2, r8
   2e4a4:	mov	r3, sl
   2e4a8:	bl	2c208 <__assert_fail@plt+0x1a340>
   2e4ac:	ldr	ip, [sp, #44]	; 0x2c
   2e4b0:	ldr	r1, [ip, #100]	; 0x64
   2e4b4:	str	r0, [r1, r5, lsl #2]
   2e4b8:	ldr	r0, [ip, #100]	; 0x64
   2e4bc:	ldr	r1, [r0, r5, lsl #2]
   2e4c0:	cmp	r1, #0
   2e4c4:	beq	2e488 <__assert_fail@plt+0x1c5c0>
   2e4c8:	cmp	r7, r4
   2e4cc:	ldr	r7, [sp, #20]
   2e4d0:	bne	2e2c8 <__assert_fail@plt+0x1c400>
   2e4d4:	ldr	r1, [sp, #52]	; 0x34
   2e4d8:	ldr	r0, [r0, r1, lsl #2]
   2e4dc:	ldr	r1, [fp, #-48]	; 0xffffffd0
   2e4e0:	ldr	r0, [r0, #8]
   2e4e4:	cmp	r0, r1
   2e4e8:	ble	2e2c8 <__assert_fail@plt+0x1c400>
   2e4ec:	ldr	r2, [sp, #52]	; 0x34
   2e4f0:	mov	r0, ip
   2e4f4:	mov	r1, r8
   2e4f8:	mov	r4, ip
   2e4fc:	bl	2db40 <__assert_fail@plt+0x1bc78>
   2e500:	cmp	r0, #0
   2e504:	str	r0, [fp, #-32]	; 0xffffffe0
   2e508:	bne	2e604 <__assert_fail@plt+0x1c73c>
   2e50c:	mov	r0, r4
   2e510:	mov	r1, r8
   2e514:	bl	2dc40 <__assert_fail@plt+0x1bd78>
   2e518:	ldr	r7, [sp, #20]
   2e51c:	cmp	r0, #0
   2e520:	mov	ip, r4
   2e524:	str	r0, [fp, #-32]	; 0xffffffe0
   2e528:	beq	2e2c8 <__assert_fail@plt+0x1c400>
   2e52c:	b	2e604 <__assert_fail@plt+0x1c73c>
   2e530:	ldr	r0, [ip, #88]	; 0x58
   2e534:	and	r0, r0, #2
   2e538:	eor	sl, r0, #10
   2e53c:	b	2e3f4 <__assert_fail@plt+0x1c52c>
   2e540:	mov	r0, r6
   2e544:	bl	11ce8 <iswalnum@plt>
   2e548:	mov	sl, #1
   2e54c:	cmp	r6, #95	; 0x5f
   2e550:	beq	2e564 <__assert_fail@plt+0x1c69c>
   2e554:	ldr	ip, [sp, #44]	; 0x2c
   2e558:	cmp	r0, #0
   2e55c:	beq	2e3d8 <__assert_fail@plt+0x1c510>
   2e560:	b	2e3f4 <__assert_fail@plt+0x1c52c>
   2e564:	ldr	ip, [sp, #44]	; 0x2c
   2e568:	b	2e3f4 <__assert_fail@plt+0x1c52c>
   2e56c:	ldr	r0, [ip, #88]	; 0x58
   2e570:	and	r0, r0, #2
   2e574:	eor	r1, r0, #10
   2e578:	and	r0, r1, #1
   2e57c:	tst	r5, #1024	; 0x400
   2e580:	eor	r2, r0, #1
   2e584:	bne	2dd2c <__assert_fail@plt+0x1be64>
   2e588:	b	2ddac <__assert_fail@plt+0x1bee4>
   2e58c:	mov	r0, r6
   2e590:	bl	11ce8 <iswalnum@plt>
   2e594:	mov	r1, #1
   2e598:	mov	r2, #0
   2e59c:	cmp	r6, #95	; 0x5f
   2e5a0:	beq	2e5b4 <__assert_fail@plt+0x1c6ec>
   2e5a4:	ldr	ip, [sp, #44]	; 0x2c
   2e5a8:	cmp	r0, #0
   2e5ac:	beq	2dd80 <__assert_fail@plt+0x1beb8>
   2e5b0:	b	2ddac <__assert_fail@plt+0x1bee4>
   2e5b4:	ldr	ip, [sp, #44]	; 0x2c
   2e5b8:	ldr	r0, [r4]
   2e5bc:	cmp	r2, #0
   2e5c0:	beq	2ddb8 <__assert_fail@plt+0x1bef0>
   2e5c4:	b	2ddc0 <__assert_fail@plt+0x1bef8>
   2e5c8:	mov	r9, #0
   2e5cc:	str	r9, [fp, #-32]	; 0xffffffe0
   2e5d0:	mov	r0, r9
   2e5d4:	sub	sp, fp, #28
   2e5d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e5dc:	mov	r9, r0
   2e5e0:	b	2e5cc <__assert_fail@plt+0x1c704>
   2e5e4:	mov	r9, r0
   2e5e8:	ldr	r0, [fp, #-36]	; 0xffffffdc
   2e5ec:	bl	17c10 <__assert_fail@plt+0x5d48>
   2e5f0:	mov	r0, r9
   2e5f4:	sub	sp, fp, #28
   2e5f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e5fc:	mov	r9, #12
   2e600:	b	2e5cc <__assert_fail@plt+0x1c704>
   2e604:	mov	r9, r0
   2e608:	mov	r0, r9
   2e60c:	sub	sp, fp, #28
   2e610:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e614:	push	{r4, r5, r6, r7, fp, lr}
   2e618:	add	fp, sp, #16
   2e61c:	mov	r4, r0
   2e620:	ldr	r0, [r0, #36]	; 0x24
   2e624:	mov	r5, #12
   2e628:	cmn	r0, #-536870910	; 0xe0000002
   2e62c:	bhi	2e810 <__assert_fail@plt+0x1c948>
   2e630:	ldr	r6, [r4, #48]	; 0x30
   2e634:	ldr	r2, [r4, #80]	; 0x50
   2e638:	cmp	r6, r0, lsl #1
   2e63c:	lslge	r6, r0, #1
   2e640:	cmp	r6, r1
   2e644:	movle	r6, r1
   2e648:	cmp	r2, #2
   2e64c:	blt	2e694 <__assert_fail@plt+0x1c7cc>
   2e650:	cmn	r6, #-1073741823	; 0xc0000001
   2e654:	bhi	2e810 <__assert_fail@plt+0x1c948>
   2e658:	ldr	r0, [r4, #8]
   2e65c:	lsl	r7, r6, #2
   2e660:	mov	r1, r7
   2e664:	bl	38480 <__assert_fail@plt+0x265b8>
   2e668:	cmp	r0, #0
   2e66c:	beq	2e810 <__assert_fail@plt+0x1c948>
   2e670:	str	r0, [r4, #8]
   2e674:	ldr	r0, [r4, #12]
   2e678:	cmp	r0, #0
   2e67c:	beq	2e694 <__assert_fail@plt+0x1c7cc>
   2e680:	mov	r1, r7
   2e684:	bl	38480 <__assert_fail@plt+0x265b8>
   2e688:	cmp	r0, #0
   2e68c:	beq	2e810 <__assert_fail@plt+0x1c948>
   2e690:	str	r0, [r4, #12]
   2e694:	ldrb	r0, [r4, #75]	; 0x4b
   2e698:	cmp	r0, #0
   2e69c:	beq	2e6b8 <__assert_fail@plt+0x1c7f0>
   2e6a0:	ldr	r0, [r4, #4]
   2e6a4:	mov	r1, r6
   2e6a8:	bl	38480 <__assert_fail@plt+0x265b8>
   2e6ac:	cmp	r0, #0
   2e6b0:	beq	2e810 <__assert_fail@plt+0x1c948>
   2e6b4:	str	r0, [r4, #4]
   2e6b8:	str	r6, [r4, #36]	; 0x24
   2e6bc:	ldr	r0, [r4, #100]	; 0x64
   2e6c0:	cmp	r0, #0
   2e6c4:	beq	2e6e0 <__assert_fail@plt+0x1c818>
   2e6c8:	mov	r1, #4
   2e6cc:	add	r1, r1, r6, lsl #2
   2e6d0:	bl	38480 <__assert_fail@plt+0x265b8>
   2e6d4:	cmp	r0, #0
   2e6d8:	beq	2e810 <__assert_fail@plt+0x1c948>
   2e6dc:	str	r0, [r4, #100]	; 0x64
   2e6e0:	ldrb	r1, [r4, #72]	; 0x48
   2e6e4:	ldr	r0, [r4, #80]	; 0x50
   2e6e8:	cmp	r1, #0
   2e6ec:	beq	2e70c <__assert_fail@plt+0x1c844>
   2e6f0:	cmp	r0, #2
   2e6f4:	blt	2e720 <__assert_fail@plt+0x1c858>
   2e6f8:	mov	r0, r4
   2e6fc:	bl	25cc0 <__assert_fail@plt+0x13df8>
   2e700:	cmp	r0, #0
   2e704:	beq	2e80c <__assert_fail@plt+0x1c944>
   2e708:	pop	{r4, r5, r6, r7, fp, pc}
   2e70c:	cmp	r0, #2
   2e710:	blt	2e790 <__assert_fail@plt+0x1c8c8>
   2e714:	mov	r0, r4
   2e718:	bl	265e0 <__assert_fail@plt+0x14718>
   2e71c:	b	2e80c <__assert_fail@plt+0x1c944>
   2e720:	ldr	r6, [r4, #36]	; 0x24
   2e724:	ldr	r0, [r4, #48]	; 0x30
   2e728:	ldr	r5, [r4, #28]
   2e72c:	cmp	r6, r0
   2e730:	movgt	r6, r0
   2e734:	cmp	r5, r6
   2e738:	bge	2e784 <__assert_fail@plt+0x1c8bc>
   2e73c:	bl	11c4c <__ctype_toupper_loc@plt>
   2e740:	ldr	r1, [r4]
   2e744:	ldr	r3, [r4, #24]
   2e748:	ldr	r2, [r4, #64]	; 0x40
   2e74c:	add	r1, r1, r3
   2e750:	cmp	r2, #0
   2e754:	ldrb	r1, [r1, r5]
   2e758:	bne	2e77c <__assert_fail@plt+0x1c8b4>
   2e75c:	ldr	r2, [r0]
   2e760:	ldr	r1, [r2, r1, lsl #2]
   2e764:	ldr	r2, [r4, #4]
   2e768:	strb	r1, [r2, r5]
   2e76c:	add	r5, r5, #1
   2e770:	cmp	r5, r6
   2e774:	blt	2e740 <__assert_fail@plt+0x1c878>
   2e778:	b	2e784 <__assert_fail@plt+0x1c8bc>
   2e77c:	ldrb	r1, [r2, r1]
   2e780:	b	2e75c <__assert_fail@plt+0x1c894>
   2e784:	str	r5, [r4, #28]
   2e788:	str	r5, [r4, #32]
   2e78c:	b	2e80c <__assert_fail@plt+0x1c944>
   2e790:	ldr	r2, [r4, #64]	; 0x40
   2e794:	cmp	r2, #0
   2e798:	beq	2e80c <__assert_fail@plt+0x1c944>
   2e79c:	ldr	r1, [r4, #36]	; 0x24
   2e7a0:	ldr	r3, [r4, #48]	; 0x30
   2e7a4:	ldr	r0, [r4, #28]
   2e7a8:	cmp	r1, r3
   2e7ac:	movgt	r1, r3
   2e7b0:	cmp	r0, r1
   2e7b4:	bge	2e804 <__assert_fail@plt+0x1c93c>
   2e7b8:	ldr	r6, [r4, #24]
   2e7bc:	ldm	r4, {r3, r7}
   2e7c0:	add	r6, r6, r0
   2e7c4:	ldrb	r3, [r3, r6]
   2e7c8:	ldrb	r2, [r2, r3]
   2e7cc:	strb	r2, [r7, r0]
   2e7d0:	add	r0, r0, #1
   2e7d4:	cmp	r0, r1
   2e7d8:	bge	2e804 <__assert_fail@plt+0x1c93c>
   2e7dc:	ldr	r7, [r4, #24]
   2e7e0:	ldm	r4, {r2, r3}
   2e7e4:	ldr	r6, [r4, #64]	; 0x40
   2e7e8:	add	r2, r2, r7
   2e7ec:	ldrb	r2, [r2, r0]
   2e7f0:	ldrb	r2, [r6, r2]
   2e7f4:	strb	r2, [r3, r0]
   2e7f8:	add	r0, r0, #1
   2e7fc:	cmp	r0, r1
   2e800:	blt	2e7dc <__assert_fail@plt+0x1c914>
   2e804:	str	r0, [r4, #28]
   2e808:	str	r0, [r4, #32]
   2e80c:	mov	r5, #0
   2e810:	mov	r0, r5
   2e814:	pop	{r4, r5, r6, r7, fp, pc}
   2e818:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   2e81c:	add	fp, sp, #24
   2e820:	sub	sp, sp, #16
   2e824:	mov	r9, r0
   2e828:	mov	r4, r1
   2e82c:	ldr	r5, [r1, #40]	; 0x28
   2e830:	ldr	r7, [r1, #84]	; 0x54
   2e834:	ldr	r0, [r1, #100]	; 0x64
   2e838:	ldr	r1, [r1, #104]	; 0x68
   2e83c:	mov	r6, r2
   2e840:	cmp	r5, r1
   2e844:	ble	2e864 <__assert_fail@plt+0x1c99c>
   2e848:	str	r6, [r0, r5, lsl #2]
   2e84c:	str	r5, [r4, #104]	; 0x68
   2e850:	cmp	r6, #0
   2e854:	ldrne	r0, [r7, #76]	; 0x4c
   2e858:	cmpne	r0, #0
   2e85c:	beq	2e9b4 <__assert_fail@plt+0x1caec>
   2e860:	b	2e9c0 <__assert_fail@plt+0x1caf8>
   2e864:	ldr	r1, [r0, r5, lsl #2]
   2e868:	cmp	r1, #0
   2e86c:	beq	2e8e4 <__assert_fail@plt+0x1ca1c>
   2e870:	ldr	r2, [r1, #40]	; 0x28
   2e874:	cmp	r6, #0
   2e878:	beq	2e92c <__assert_fail@plt+0x1ca64>
   2e87c:	ldr	r8, [r6, #40]	; 0x28
   2e880:	mov	r0, sp
   2e884:	mov	r1, r8
   2e888:	bl	2ea58 <__assert_fail@plt+0x1cb90>
   2e88c:	cmp	r0, #0
   2e890:	str	r0, [r9]
   2e894:	bne	2ea18 <__assert_fail@plt+0x1cb50>
   2e898:	ldr	r0, [r4, #40]	; 0x28
   2e89c:	cmp	r0, #0
   2e8a0:	ble	2e8dc <__assert_fail@plt+0x1ca14>
   2e8a4:	ldr	r1, [r4, #48]	; 0x30
   2e8a8:	sub	r0, r0, #1
   2e8ac:	cmp	r1, r0
   2e8b0:	beq	2ea28 <__assert_fail@plt+0x1cb60>
   2e8b4:	ldr	r1, [r4, #80]	; 0x50
   2e8b8:	cmp	r1, #2
   2e8bc:	blt	2e8fc <__assert_fail@plt+0x1ca34>
   2e8c0:	ldr	r1, [r4, #8]
   2e8c4:	ldr	r6, [r1, r0, lsl #2]
   2e8c8:	cmn	r6, #1
   2e8cc:	bne	2e950 <__assert_fail@plt+0x1ca88>
   2e8d0:	sub	r0, r0, #1
   2e8d4:	cmn	r0, #1
   2e8d8:	bne	2e8c4 <__assert_fail@plt+0x1c9fc>
   2e8dc:	ldr	r3, [r4, #60]	; 0x3c
   2e8e0:	b	2e978 <__assert_fail@plt+0x1cab0>
   2e8e4:	str	r6, [r0, r5, lsl #2]
   2e8e8:	cmp	r6, #0
   2e8ec:	ldrne	r0, [r7, #76]	; 0x4c
   2e8f0:	cmpne	r0, #0
   2e8f4:	beq	2e9b4 <__assert_fail@plt+0x1caec>
   2e8f8:	b	2e9c0 <__assert_fail@plt+0x1caf8>
   2e8fc:	ldr	r1, [r4, #4]
   2e900:	ldr	r2, [r4, #68]	; 0x44
   2e904:	mov	r3, #1
   2e908:	ldrb	r0, [r1, r0]
   2e90c:	ubfx	r1, r0, #5, #3
   2e910:	ldr	r1, [r2, r1, lsl #2]
   2e914:	and	r2, r0, #31
   2e918:	tst	r1, r3, lsl r2
   2e91c:	moveq	r3, #0
   2e920:	cmpeq	r0, #10
   2e924:	bne	2e978 <__assert_fail@plt+0x1cab0>
   2e928:	b	2e968 <__assert_fail@plt+0x1caa0>
   2e92c:	vldr	d16, [r2]
   2e930:	ldr	r0, [r2, #8]
   2e934:	mov	r8, #0
   2e938:	str	r0, [sp, #8]
   2e93c:	mov	r0, r5
   2e940:	vstr	d16, [sp]
   2e944:	cmp	r0, #0
   2e948:	bgt	2e8a4 <__assert_fail@plt+0x1c9dc>
   2e94c:	b	2e8dc <__assert_fail@plt+0x1ca14>
   2e950:	ldrb	r0, [r4, #78]	; 0x4e
   2e954:	cmp	r0, #0
   2e958:	bne	2ea38 <__assert_fail@plt+0x1cb70>
   2e95c:	mov	r3, #0
   2e960:	cmp	r6, #10
   2e964:	bne	2e978 <__assert_fail@plt+0x1cab0>
   2e968:	ldrb	r0, [r4, #77]	; 0x4d
   2e96c:	cmp	r0, #0
   2e970:	movwne	r0, #1
   2e974:	lsl	r3, r0, #1
   2e978:	mov	r2, sp
   2e97c:	mov	r0, r9
   2e980:	mov	r1, r7
   2e984:	bl	2c208 <__assert_fail@plt+0x1a340>
   2e988:	mov	r6, r0
   2e98c:	ldr	r0, [r4, #100]	; 0x64
   2e990:	cmp	r8, #0
   2e994:	str	r6, [r0, r5, lsl #2]
   2e998:	beq	2e9a4 <__assert_fail@plt+0x1cadc>
   2e99c:	ldr	r0, [sp, #8]
   2e9a0:	bl	17c10 <__assert_fail@plt+0x5d48>
   2e9a4:	cmp	r6, #0
   2e9a8:	ldrne	r0, [r7, #76]	; 0x4c
   2e9ac:	cmpne	r0, #0
   2e9b0:	bne	2e9c0 <__assert_fail@plt+0x1caf8>
   2e9b4:	mov	r0, r6
   2e9b8:	sub	sp, fp, #24
   2e9bc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2e9c0:	add	r7, r6, #4
   2e9c4:	mov	r0, r4
   2e9c8:	mov	r2, r5
   2e9cc:	mov	r1, r7
   2e9d0:	bl	2db40 <__assert_fail@plt+0x1bc78>
   2e9d4:	cmp	r0, #0
   2e9d8:	str	r0, [r9]
   2e9dc:	bne	2ea18 <__assert_fail@plt+0x1cb50>
   2e9e0:	ldrb	r0, [r6, #52]	; 0x34
   2e9e4:	tst	r0, #64	; 0x40
   2e9e8:	beq	2e9b4 <__assert_fail@plt+0x1caec>
   2e9ec:	mov	r0, r4
   2e9f0:	mov	r1, r7
   2e9f4:	bl	2dc40 <__assert_fail@plt+0x1bd78>
   2e9f8:	str	r0, [r9]
   2e9fc:	cmp	r0, #0
   2ea00:	mov	r6, #0
   2ea04:	ldreq	r0, [r4, #100]	; 0x64
   2ea08:	ldreq	r6, [r0, r5, lsl #2]
   2ea0c:	mov	r0, r6
   2ea10:	sub	sp, fp, #24
   2ea14:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ea18:	mov	r6, #0
   2ea1c:	mov	r0, r6
   2ea20:	sub	sp, fp, #24
   2ea24:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   2ea28:	ldr	r0, [r4, #88]	; 0x58
   2ea2c:	and	r0, r0, #2
   2ea30:	eor	r3, r0, #10
   2ea34:	b	2e978 <__assert_fail@plt+0x1cab0>
   2ea38:	mov	r0, r6
   2ea3c:	bl	11ce8 <iswalnum@plt>
   2ea40:	mov	r3, #1
   2ea44:	cmp	r6, #95	; 0x5f
   2ea48:	beq	2e978 <__assert_fail@plt+0x1cab0>
   2ea4c:	cmp	r0, #0
   2ea50:	beq	2e95c <__assert_fail@plt+0x1ca94>
   2ea54:	b	2e978 <__assert_fail@plt+0x1cab0>
   2ea58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ea5c:	add	fp, sp, #28
   2ea60:	sub	sp, sp, #20
   2ea64:	mov	sl, r2
   2ea68:	cmp	r1, #0
   2ea6c:	str	r0, [sp, #16]
   2ea70:	beq	2ebe4 <__assert_fail@plt+0x1cd1c>
   2ea74:	ldr	r0, [r1, #4]
   2ea78:	mov	r8, r1
   2ea7c:	cmp	sl, #0
   2ea80:	beq	2eba0 <__assert_fail@plt+0x1ccd8>
   2ea84:	cmp	r0, #1
   2ea88:	blt	2eba0 <__assert_fail@plt+0x1ccd8>
   2ea8c:	ldr	r1, [sl, #4]
   2ea90:	cmp	r1, #1
   2ea94:	blt	2eba0 <__assert_fail@plt+0x1ccd8>
   2ea98:	ldr	r4, [sp, #16]
   2ea9c:	add	r0, r1, r0
   2eaa0:	str	r0, [r4]
   2eaa4:	lsl	r0, r0, #2
   2eaa8:	bl	38450 <__assert_fail@plt+0x26588>
   2eaac:	cmp	r0, #0
   2eab0:	str	r0, [r4, #8]
   2eab4:	beq	2ecdc <__assert_fail@plt+0x1ce14>
   2eab8:	ldr	r9, [sl, #4]
   2eabc:	ldr	lr, [r8, #4]
   2eac0:	mov	r7, #0
   2eac4:	mov	r1, #0
   2eac8:	cmp	r9, #0
   2eacc:	movwgt	r1, #1
   2ead0:	cmp	lr, #1
   2ead4:	blt	2ec60 <__assert_fail@plt+0x1cd98>
   2ead8:	mov	r2, #0
   2eadc:	mov	ip, #0
   2eae0:	str	r2, [sp, #8]
   2eae4:	mov	r2, #0
   2eae8:	str	r2, [sp, #12]
   2eaec:	mov	r2, #0
   2eaf0:	ldr	r4, [sp, #12]
   2eaf4:	mov	r7, ip
   2eaf8:	tst	r1, #1
   2eafc:	beq	2ec90 <__assert_fail@plt+0x1cdc8>
   2eb00:	ldr	r1, [sl, #8]
   2eb04:	ldr	r5, [r1, r7, lsl #2]
   2eb08:	ldr	r1, [r8, #8]
   2eb0c:	ldr	r3, [r1, r2, lsl #2]
   2eb10:	cmp	r3, r5
   2eb14:	ble	2eb3c <__assert_fail@plt+0x1cc74>
   2eb18:	add	r7, r7, #1
   2eb1c:	str	r5, [r0, r4, lsl #2]
   2eb20:	mov	r1, #0
   2eb24:	add	r4, r4, #1
   2eb28:	cmp	r9, r7
   2eb2c:	movwgt	r1, #1
   2eb30:	cmp	lr, r2
   2eb34:	bgt	2eaf8 <__assert_fail@plt+0x1cc30>
   2eb38:	b	2ec64 <__assert_fail@plt+0x1cd9c>
   2eb3c:	str	r3, [r0, r4, lsl #2]
   2eb40:	ldr	r6, [sp, #8]
   2eb44:	add	r1, r7, #1
   2eb48:	mov	ip, r7
   2eb4c:	add	r2, r2, #1
   2eb50:	ldr	r9, [sl, #4]
   2eb54:	ldr	lr, [r8, #4]
   2eb58:	moveq	ip, r1
   2eb5c:	str	r1, [sp, #4]
   2eb60:	mov	r1, #0
   2eb64:	sub	r6, r6, #1
   2eb68:	cmp	r9, ip
   2eb6c:	str	r6, [sp, #8]
   2eb70:	add	r6, r4, #1
   2eb74:	movwgt	r1, #1
   2eb78:	cmp	lr, r2
   2eb7c:	str	r6, [sp, #12]
   2eb80:	bgt	2eaf0 <__assert_fail@plt+0x1cc28>
   2eb84:	ldr	r2, [sp, #4]
   2eb88:	cmp	r3, r5
   2eb8c:	add	r4, r4, #1
   2eb90:	moveq	r7, r2
   2eb94:	cmp	r1, #0
   2eb98:	bne	2ec6c <__assert_fail@plt+0x1cda4>
   2eb9c:	b	2ecb8 <__assert_fail@plt+0x1cdf0>
   2eba0:	cmp	r0, #1
   2eba4:	blt	2ebe4 <__assert_fail@plt+0x1cd1c>
   2eba8:	ldr	r1, [sp, #16]
   2ebac:	str	r0, [r1, #4]
   2ebb0:	ldr	r1, [r8, #4]
   2ebb4:	cmp	r1, #1
   2ebb8:	blt	2ec44 <__assert_fail@plt+0x1cd7c>
   2ebbc:	ldr	r4, [sp, #16]
   2ebc0:	str	r0, [r4]
   2ebc4:	lsl	r0, r0, #2
   2ebc8:	bl	38450 <__assert_fail@plt+0x26588>
   2ebcc:	cmp	r0, #0
   2ebd0:	str	r0, [r4, #8]
   2ebd4:	beq	2eccc <__assert_fail@plt+0x1ce04>
   2ebd8:	ldr	r2, [r8, #4]
   2ebdc:	ldr	r1, [r8, #8]
   2ebe0:	b	2ec30 <__assert_fail@plt+0x1cd68>
   2ebe4:	cmp	sl, #0
   2ebe8:	beq	2ec44 <__assert_fail@plt+0x1cd7c>
   2ebec:	ldr	r0, [sl, #4]
   2ebf0:	cmp	r0, #1
   2ebf4:	blt	2ec44 <__assert_fail@plt+0x1cd7c>
   2ebf8:	ldr	r1, [sp, #16]
   2ebfc:	str	r0, [r1, #4]
   2ec00:	ldr	r1, [sl, #4]
   2ec04:	cmp	r1, #1
   2ec08:	blt	2ec44 <__assert_fail@plt+0x1cd7c>
   2ec0c:	ldr	r4, [sp, #16]
   2ec10:	str	r0, [r4]
   2ec14:	lsl	r0, r0, #2
   2ec18:	bl	38450 <__assert_fail@plt+0x26588>
   2ec1c:	cmp	r0, #0
   2ec20:	str	r0, [r4, #8]
   2ec24:	beq	2eccc <__assert_fail@plt+0x1ce04>
   2ec28:	ldr	r2, [sl, #4]
   2ec2c:	ldr	r1, [sl, #8]
   2ec30:	lsl	r2, r2, #2
   2ec34:	bl	11ab4 <memcpy@plt>
   2ec38:	mov	r0, #0
   2ec3c:	sub	sp, fp, #28
   2ec40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec44:	ldr	r1, [sp, #16]
   2ec48:	mov	r0, #0
   2ec4c:	str	r0, [r1]
   2ec50:	str	r0, [r1, #4]
   2ec54:	str	r0, [r1, #8]
   2ec58:	sub	sp, fp, #28
   2ec5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec60:	mov	r4, #0
   2ec64:	cmp	r1, #0
   2ec68:	beq	2ecb8 <__assert_fail@plt+0x1cdf0>
   2ec6c:	ldr	r1, [sl, #8]
   2ec70:	sub	r2, r9, r7
   2ec74:	add	r0, r0, r4, lsl #2
   2ec78:	lsl	r2, r2, #2
   2ec7c:	add	r1, r1, r7, lsl #2
   2ec80:	bl	11ab4 <memcpy@plt>
   2ec84:	sub	r0, r4, r7
   2ec88:	add	r4, r0, r9
   2ec8c:	b	2ecb8 <__assert_fail@plt+0x1cdf0>
   2ec90:	ldr	r1, [r8, #8]
   2ec94:	add	r0, r0, r4, lsl #2
   2ec98:	add	r1, r1, r2, lsl #2
   2ec9c:	sub	r2, lr, r2
   2eca0:	lsl	r2, r2, #2
   2eca4:	bl	11ab4 <memcpy@plt>
   2eca8:	ldr	r0, [r8, #4]
   2ecac:	ldr	r1, [sp, #8]
   2ecb0:	add	r0, r0, r1
   2ecb4:	add	r4, r0, r4
   2ecb8:	ldr	r0, [sp, #16]
   2ecbc:	str	r4, [r0, #4]
   2ecc0:	mov	r0, #0
   2ecc4:	sub	sp, fp, #28
   2ecc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eccc:	ldr	r1, [sp, #16]
   2ecd0:	mov	r0, #0
   2ecd4:	str	r0, [r1]
   2ecd8:	str	r0, [r1, #4]
   2ecdc:	mov	r0, #12
   2ece0:	sub	sp, fp, #28
   2ece4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ece8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ecec:	add	fp, sp, #28
   2ecf0:	sub	sp, sp, #12
   2ecf4:	mov	r6, r2
   2ecf8:	mov	r7, r3
   2ecfc:	ldr	r2, [r2]
   2ed00:	mov	r4, r0
   2ed04:	mov	r0, #8
   2ed08:	mov	r8, r1
   2ed0c:	ldr	r9, [fp, #8]
   2ed10:	ldr	r3, [r6, #4]
   2ed14:	str	r0, [sp, #8]
   2ed18:	add	r1, r6, #8
   2ed1c:	mov	r0, r4
   2ed20:	stm	sp, {r7, r9}
   2ed24:	bl	2eec0 <__assert_fail@plt+0x1cff8>
   2ed28:	mov	r5, r0
   2ed2c:	cmp	r0, #0
   2ed30:	beq	2ed40 <__assert_fail@plt+0x1ce78>
   2ed34:	mov	r0, r5
   2ed38:	sub	sp, fp, #28
   2ed3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ed40:	ldr	r0, [r4, #108]	; 0x6c
   2ed44:	ldr	r1, [r4, #112]	; 0x70
   2ed48:	ldr	sl, [r6, #4]
   2ed4c:	ldr	r5, [r8]
   2ed50:	cmp	r0, r1
   2ed54:	blt	2eda4 <__assert_fail@plt+0x1cedc>
   2ed58:	ldr	r0, [r4, #116]	; 0x74
   2ed5c:	add	r1, r1, r1, lsl #1
   2ed60:	lsl	r1, r1, #4
   2ed64:	bl	38480 <__assert_fail@plt+0x265b8>
   2ed68:	cmp	r0, #0
   2ed6c:	beq	2eea8 <__assert_fail@plt+0x1cfe0>
   2ed70:	str	r0, [r4, #116]	; 0x74
   2ed74:	ldr	r1, [r4, #108]	; 0x6c
   2ed78:	ldr	r2, [r4, #112]	; 0x70
   2ed7c:	add	r1, r1, r1, lsl #1
   2ed80:	add	r0, r0, r1, lsl #3
   2ed84:	add	r1, r2, r2, lsl #1
   2ed88:	lsl	r2, r1, #3
   2ed8c:	mov	r1, #0
   2ed90:	bl	11d0c <memset@plt>
   2ed94:	ldr	r1, [r4, #112]	; 0x70
   2ed98:	ldr	r0, [r4, #108]	; 0x6c
   2ed9c:	lsl	r1, r1, #1
   2eda0:	str	r1, [r4, #112]	; 0x70
   2eda4:	ldr	r1, [r4, #116]	; 0x74
   2eda8:	cmp	r0, #1
   2edac:	blt	2edcc <__assert_fail@plt+0x1cf04>
   2edb0:	sub	r2, r0, #1
   2edb4:	add	r2, r2, r2, lsl #1
   2edb8:	add	r2, r1, r2, lsl #3
   2edbc:	ldr	r3, [r2, #4]
   2edc0:	cmp	r3, r9
   2edc4:	moveq	r3, #1
   2edc8:	strbeq	r3, [r2, #20]
   2edcc:	add	r2, r0, r0, lsl #1
   2edd0:	cmp	sl, r5
   2edd4:	mov	r3, #0
   2edd8:	mov	ip, #0
   2eddc:	add	r0, r0, #1
   2ede0:	mvneq	r3, #0
   2ede4:	str	r7, [r1, r2, lsl #3]!
   2ede8:	str	r9, [r1, #4]
   2edec:	str	r5, [r1, #8]
   2edf0:	str	sl, [r1, #12]
   2edf4:	str	r3, [r1, #16]
   2edf8:	str	r0, [r4, #108]	; 0x6c
   2edfc:	strb	ip, [r1, #20]
   2ee00:	sub	r0, sl, r5
   2ee04:	ldr	r1, [r4, #120]	; 0x78
   2ee08:	cmp	r1, r0
   2ee0c:	strlt	r0, [r4, #120]	; 0x78
   2ee10:	ldr	r0, [r6, #4]
   2ee14:	ldr	r1, [r8]
   2ee18:	ldr	r7, [r4, #104]	; 0x68
   2ee1c:	add	r0, r0, r9
   2ee20:	sub	r6, r0, r1
   2ee24:	ldr	r0, [r4, #36]	; 0x24
   2ee28:	cmp	r0, r6
   2ee2c:	bgt	2ee3c <__assert_fail@plt+0x1cf74>
   2ee30:	ldr	r1, [r4, #48]	; 0x30
   2ee34:	cmp	r0, r1
   2ee38:	blt	2ee54 <__assert_fail@plt+0x1cf8c>
   2ee3c:	ldr	r0, [r4, #28]
   2ee40:	cmp	r0, r6
   2ee44:	bgt	2ee6c <__assert_fail@plt+0x1cfa4>
   2ee48:	ldr	r1, [r4, #48]	; 0x30
   2ee4c:	cmp	r0, r1
   2ee50:	bge	2ee6c <__assert_fail@plt+0x1cfa4>
   2ee54:	add	r1, r6, #1
   2ee58:	mov	r0, r4
   2ee5c:	bl	2e614 <__assert_fail@plt+0x1c74c>
   2ee60:	mov	r5, r0
   2ee64:	cmp	r0, #0
   2ee68:	bne	2ed34 <__assert_fail@plt+0x1ce6c>
   2ee6c:	mov	r5, #0
   2ee70:	cmp	r6, r7
   2ee74:	ble	2ed34 <__assert_fail@plt+0x1ce6c>
   2ee78:	sub	r0, r6, r7
   2ee7c:	mov	r1, #0
   2ee80:	mov	r5, #0
   2ee84:	lsl	r2, r0, #2
   2ee88:	ldr	r0, [r4, #100]	; 0x64
   2ee8c:	add	r0, r0, r7, lsl #2
   2ee90:	add	r0, r0, #4
   2ee94:	bl	11d0c <memset@plt>
   2ee98:	str	r6, [r4, #104]	; 0x68
   2ee9c:	mov	r0, r5
   2eea0:	sub	sp, fp, #28
   2eea4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eea8:	ldr	r0, [r4, #116]	; 0x74
   2eeac:	bl	17c10 <__assert_fail@plt+0x5d48>
   2eeb0:	mov	r5, #12
   2eeb4:	mov	r0, r5
   2eeb8:	sub	sp, fp, #28
   2eebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2eec0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eec4:	add	fp, sp, #28
   2eec8:	sub	sp, sp, #84	; 0x54
   2eecc:	ldr	r7, [r0, #84]	; 0x54
   2eed0:	mov	ip, r1
   2eed4:	mov	r1, #0
   2eed8:	mov	lr, r2
   2eedc:	mov	r9, r3
   2eee0:	str	r0, [sp, #44]	; 0x2c
   2eee4:	str	r1, [fp, #-52]	; 0xffffffcc
   2eee8:	ldr	r4, [ip, #4]
   2eeec:	ldr	r1, [r7]
   2eef0:	str	r7, [sp, #24]
   2eef4:	ldr	sl, [r1, r2, lsl #3]
   2eef8:	ldr	r1, [r0, #120]	; 0x78
   2eefc:	ldr	r2, [fp, #12]
   2ef00:	add	r2, r1, r2
   2ef04:	cmp	r4, r2
   2ef08:	str	sl, [sp, #20]
   2ef0c:	ble	2f878 <__assert_fail@plt+0x1d9b0>
   2ef10:	ldr	r2, [r0, #100]	; 0x64
   2ef14:	ldr	r5, [ip]
   2ef18:	ldr	r4, [r0, #40]	; 0x28
   2ef1c:	ldr	r1, [r0, #88]	; 0x58
   2ef20:	str	r2, [sp, #8]
   2ef24:	ldr	r2, [ip, #8]
   2ef28:	cmp	r5, #0
   2ef2c:	str	r4, [sp, #12]
   2ef30:	moveq	r5, r9
   2ef34:	cmp	r5, #0
   2ef38:	str	r2, [r0, #100]	; 0x64
   2ef3c:	str	r5, [r0, #40]	; 0x28
   2ef40:	ble	2f8e8 <__assert_fail@plt+0x1da20>
   2ef44:	ldr	r2, [r0, #48]	; 0x30
   2ef48:	sub	r3, r5, #1
   2ef4c:	cmp	r2, r3
   2ef50:	beq	2f8fc <__assert_fail@plt+0x1da34>
   2ef54:	ldr	r1, [r0, #80]	; 0x50
   2ef58:	cmp	r1, #2
   2ef5c:	blt	2efd0 <__assert_fail@plt+0x1d108>
   2ef60:	ldr	r1, [r0, #8]
   2ef64:	ldr	r6, [r1, r3, lsl #2]
   2ef68:	cmn	r6, #1
   2ef6c:	bne	2f000 <__assert_fail@plt+0x1d138>
   2ef70:	sub	r3, r3, #1
   2ef74:	cmn	r3, #1
   2ef78:	bne	2ef64 <__assert_fail@plt+0x1d09c>
   2ef7c:	ldr	r0, [sp, #44]	; 0x2c
   2ef80:	ldr	r8, [r0, #60]	; 0x3c
   2ef84:	cmp	r5, r9
   2ef88:	str	ip, [sp, #16]
   2ef8c:	beq	2f03c <__assert_fail@plt+0x1d174>
   2ef90:	ldr	r9, [sp, #44]	; 0x2c
   2ef94:	ldr	r0, [r9, #100]	; 0x64
   2ef98:	ldr	r6, [r0, r5, lsl #2]
   2ef9c:	cmp	r6, #0
   2efa0:	beq	2f108 <__assert_fail@plt+0x1d240>
   2efa4:	ldrb	r0, [r6, #52]	; 0x34
   2efa8:	tst	r0, #64	; 0x40
   2efac:	bne	2f128 <__assert_fail@plt+0x1d260>
   2efb0:	mov	r0, #0
   2efb4:	str	r0, [sp, #52]	; 0x34
   2efb8:	str	r0, [sp, #48]	; 0x30
   2efbc:	str	r0, [sp, #56]	; 0x38
   2efc0:	ldr	r4, [fp, #12]
   2efc4:	cmp	r5, r4
   2efc8:	blt	2f180 <__assert_fail@plt+0x1d2b8>
   2efcc:	b	2f760 <__assert_fail@plt+0x1d898>
   2efd0:	ldr	r1, [r0, #4]
   2efd4:	ldr	r2, [r0, #68]	; 0x44
   2efd8:	mov	r8, #1
   2efdc:	ldrb	r0, [r1, r3]
   2efe0:	ubfx	r1, r0, #5, #3
   2efe4:	ldr	r1, [r2, r1, lsl #2]
   2efe8:	and	r2, r0, #31
   2efec:	tst	r1, r8, lsl r2
   2eff0:	moveq	r8, #0
   2eff4:	cmpeq	r0, #10
   2eff8:	bne	2f030 <__assert_fail@plt+0x1d168>
   2effc:	b	2f01c <__assert_fail@plt+0x1d154>
   2f000:	ldr	r0, [sp, #44]	; 0x2c
   2f004:	ldrb	r0, [r0, #78]	; 0x4e
   2f008:	cmp	r0, #0
   2f00c:	bne	2f94c <__assert_fail@plt+0x1da84>
   2f010:	mov	r8, #0
   2f014:	cmp	r6, #10
   2f018:	bne	2f030 <__assert_fail@plt+0x1d168>
   2f01c:	ldr	r0, [sp, #44]	; 0x2c
   2f020:	ldrb	r0, [r0, #77]	; 0x4d
   2f024:	cmp	r0, #0
   2f028:	movwne	r0, #1
   2f02c:	lsl	r8, r0, #1
   2f030:	cmp	r5, r9
   2f034:	str	ip, [sp, #16]
   2f038:	bne	2ef90 <__assert_fail@plt+0x1d0c8>
   2f03c:	mov	r0, #1
   2f040:	mov	r6, lr
   2f044:	str	r0, [sp, #52]	; 0x34
   2f048:	str	r0, [sp, #48]	; 0x30
   2f04c:	mov	r0, #4
   2f050:	bl	38450 <__assert_fail@plt+0x26588>
   2f054:	cmp	r0, #0
   2f058:	str	r0, [sp, #56]	; 0x38
   2f05c:	beq	2f92c <__assert_fail@plt+0x1da64>
   2f060:	ldr	r3, [fp, #16]
   2f064:	str	r6, [r0]
   2f068:	mov	r0, #0
   2f06c:	add	r1, sp, #48	; 0x30
   2f070:	mov	r2, sl
   2f074:	str	r0, [fp, #-52]	; 0xffffffcc
   2f078:	mov	r0, r7
   2f07c:	bl	2f994 <__assert_fail@plt+0x1dacc>
   2f080:	cmp	r0, #0
   2f084:	str	r0, [fp, #-52]	; 0xffffffcc
   2f088:	bne	2f914 <__assert_fail@plt+0x1da4c>
   2f08c:	ldr	r0, [sp, #52]	; 0x34
   2f090:	ldr	r9, [sp, #44]	; 0x2c
   2f094:	cmp	r0, #0
   2f098:	beq	2f0c4 <__assert_fail@plt+0x1d1fc>
   2f09c:	ldr	r0, [fp, #16]
   2f0a0:	ldr	r3, [sp, #20]
   2f0a4:	add	r1, sp, #48	; 0x30
   2f0a8:	mov	r2, r5
   2f0ac:	str	r0, [sp]
   2f0b0:	mov	r0, r9
   2f0b4:	bl	2fadc <__assert_fail@plt+0x1dc14>
   2f0b8:	cmp	r0, #0
   2f0bc:	str	r0, [fp, #-52]	; 0xffffffcc
   2f0c0:	bne	2f914 <__assert_fail@plt+0x1da4c>
   2f0c4:	ldr	r1, [sp, #24]
   2f0c8:	sub	r0, fp, #52	; 0x34
   2f0cc:	add	r2, sp, #48	; 0x30
   2f0d0:	mov	r3, r8
   2f0d4:	bl	2c208 <__assert_fail@plt+0x1a340>
   2f0d8:	mov	r6, r0
   2f0dc:	cmp	r0, #0
   2f0e0:	bne	2f0f0 <__assert_fail@plt+0x1d228>
   2f0e4:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2f0e8:	cmp	r0, #0
   2f0ec:	bne	2f84c <__assert_fail@plt+0x1d984>
   2f0f0:	ldr	r0, [r9, #100]	; 0x64
   2f0f4:	str	r6, [r0, r5, lsl #2]
   2f0f8:	ldr	r4, [fp, #12]
   2f0fc:	cmp	r5, r4
   2f100:	blt	2f180 <__assert_fail@plt+0x1d2b8>
   2f104:	b	2f760 <__assert_fail@plt+0x1d898>
   2f108:	mov	r6, #0
   2f10c:	str	r6, [sp, #52]	; 0x34
   2f110:	str	r6, [sp, #48]	; 0x30
   2f114:	str	r6, [sp, #56]	; 0x38
   2f118:	ldr	r4, [fp, #12]
   2f11c:	cmp	r5, r4
   2f120:	blt	2f180 <__assert_fail@plt+0x1d2b8>
   2f124:	b	2f760 <__assert_fail@plt+0x1d898>
   2f128:	ldr	r0, [r6, #8]
   2f12c:	cmp	r0, #1
   2f130:	str	r0, [sp, #52]	; 0x34
   2f134:	blt	2f810 <__assert_fail@plt+0x1d948>
   2f138:	str	r0, [sp, #48]	; 0x30
   2f13c:	lsl	r0, r0, #2
   2f140:	bl	38450 <__assert_fail@plt+0x26588>
   2f144:	cmp	r0, #0
   2f148:	str	r0, [sp, #56]	; 0x38
   2f14c:	beq	2f92c <__assert_fail@plt+0x1da64>
   2f150:	ldr	r2, [r6, #8]
   2f154:	ldr	r1, [r6, #12]
   2f158:	lsl	r2, r2, #2
   2f15c:	bl	11ab4 <memcpy@plt>
   2f160:	ldrb	r0, [r6, #52]	; 0x34
   2f164:	mov	r1, #0
   2f168:	str	r1, [fp, #-52]	; 0xffffffcc
   2f16c:	tst	r0, #64	; 0x40
   2f170:	bne	2f09c <__assert_fail@plt+0x1d1d4>
   2f174:	ldr	r4, [fp, #12]
   2f178:	cmp	r5, r4
   2f17c:	bge	2f760 <__assert_fail@plt+0x1d898>
   2f180:	ldr	r7, [sp, #24]
   2f184:	ldr	sl, [sp, #20]
   2f188:	ldr	r4, [fp, #16]
   2f18c:	add	r8, sp, #48	; 0x30
   2f190:	mov	r0, #0
   2f194:	str	r6, [sp, #40]	; 0x28
   2f198:	b	2f1c8 <__assert_fail@plt+0x1d300>
   2f19c:	ldr	r1, [sp, #40]	; 0x28
   2f1a0:	ldr	r0, [r9, #100]	; 0x64
   2f1a4:	ldr	r5, [sp, #28]
   2f1a8:	str	r1, [r0, r5, lsl #2]
   2f1ac:	cmp	r1, #0
   2f1b0:	ldr	r1, [sp, #32]
   2f1b4:	mov	r0, #0
   2f1b8:	addeq	r0, r1, #1
   2f1bc:	ldr	r1, [fp, #12]
   2f1c0:	cmp	r5, r1
   2f1c4:	beq	2f75c <__assert_fail@plt+0x1d894>
   2f1c8:	str	r0, [sp, #32]
   2f1cc:	ldr	r0, [r9, #120]	; 0x78
   2f1d0:	ldr	r1, [sp, #32]
   2f1d4:	cmp	r1, r0
   2f1d8:	bgt	2f760 <__assert_fail@plt+0x1d898>
   2f1dc:	mov	r0, #0
   2f1e0:	add	r1, r5, #1
   2f1e4:	str	r0, [sp, #52]	; 0x34
   2f1e8:	str	r1, [sp, #28]
   2f1ec:	ldr	r0, [r9, #100]	; 0x64
   2f1f0:	ldr	r0, [r0, r1, lsl #2]
   2f1f4:	cmp	r0, #0
   2f1f8:	beq	2f214 <__assert_fail@plt+0x1d34c>
   2f1fc:	add	r1, r0, #4
   2f200:	mov	r0, r8
   2f204:	bl	2bee8 <__assert_fail@plt+0x1a020>
   2f208:	cmp	r0, #0
   2f20c:	str	r0, [fp, #-52]	; 0xffffffcc
   2f210:	bne	2f84c <__assert_fail@plt+0x1d984>
   2f214:	ldr	r1, [sp, #40]	; 0x28
   2f218:	cmp	r1, #0
   2f21c:	beq	2f614 <__assert_fail@plt+0x1d74c>
   2f220:	mov	r0, #0
   2f224:	ldr	r8, [r9, #84]	; 0x54
   2f228:	str	r0, [fp, #-32]	; 0xffffffe0
   2f22c:	str	r0, [fp, #-44]	; 0xffffffd4
   2f230:	str	r0, [fp, #-48]	; 0xffffffd0
   2f234:	str	r0, [fp, #-40]	; 0xffffffd8
   2f238:	ldr	r1, [r1, #20]
   2f23c:	cmp	r1, #1
   2f240:	blt	2f600 <__assert_fail@plt+0x1d738>
   2f244:	ldr	r7, [sp, #40]	; 0x28
   2f248:	mov	r4, #0
   2f24c:	b	2f280 <__assert_fail@plt+0x1d3b8>
   2f250:	ldr	r1, [sp, #52]	; 0x34
   2f254:	cmp	r1, #0
   2f258:	bne	2f40c <__assert_fail@plt+0x1d544>
   2f25c:	ldr	r0, [sp, #56]	; 0x38
   2f260:	str	r6, [r0]
   2f264:	ldr	r0, [sp, #52]	; 0x34
   2f268:	add	r0, r0, #1
   2f26c:	str	r0, [sp, #52]	; 0x34
   2f270:	ldr	r0, [r7, #20]
   2f274:	add	r4, r4, #1
   2f278:	cmp	r4, r0
   2f27c:	bge	2f5f4 <__assert_fail@plt+0x1d72c>
   2f280:	ldr	r0, [r7, #24]
   2f284:	ldr	sl, [r0, r4, lsl #2]
   2f288:	ldr	r0, [r8]
   2f28c:	add	r1, r0, sl, lsl #3
   2f290:	ldrb	r1, [r1, #6]
   2f294:	tst	r1, #16
   2f298:	beq	2f3a8 <__assert_fail@plt+0x1d4e0>
   2f29c:	mov	r0, r8
   2f2a0:	mov	r1, sl
   2f2a4:	mov	r2, r9
   2f2a8:	mov	r3, r5
   2f2ac:	bl	30504 <__assert_fail@plt+0x1e63c>
   2f2b0:	mov	r9, r0
   2f2b4:	cmp	r0, #2
   2f2b8:	blt	2f394 <__assert_fail@plt+0x1d4cc>
   2f2bc:	ldr	r0, [sp, #44]	; 0x2c
   2f2c0:	ldr	r1, [r8, #12]
   2f2c4:	add	r6, r9, r5
   2f2c8:	ldr	r0, [r0, #100]	; 0x64
   2f2cc:	ldr	r1, [r1, sl, lsl #2]
   2f2d0:	ldr	r0, [r0, r6, lsl #2]
   2f2d4:	str	r1, [sp, #36]	; 0x24
   2f2d8:	mov	r1, #0
   2f2dc:	str	r1, [fp, #-44]	; 0xffffffd4
   2f2e0:	cmp	r0, #0
   2f2e4:	beq	2f300 <__assert_fail@plt+0x1d438>
   2f2e8:	add	r1, r0, #4
   2f2ec:	sub	r0, fp, #48	; 0x30
   2f2f0:	bl	2bee8 <__assert_fail@plt+0x1a020>
   2f2f4:	cmp	r0, #0
   2f2f8:	str	r0, [fp, #-32]	; 0xffffffe0
   2f2fc:	bne	2f83c <__assert_fail@plt+0x1d974>
   2f300:	ldr	r2, [fp, #-48]	; 0xffffffd0
   2f304:	cmp	r2, #0
   2f308:	beq	2f334 <__assert_fail@plt+0x1d46c>
   2f30c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2f310:	ldr	r7, [sp, #36]	; 0x24
   2f314:	cmp	r1, #0
   2f318:	bne	2f4fc <__assert_fail@plt+0x1d634>
   2f31c:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2f320:	str	r7, [r0]
   2f324:	ldr	r0, [fp, #-44]	; 0xffffffd4
   2f328:	add	r0, r0, #1
   2f32c:	str	r0, [fp, #-44]	; 0xffffffd4
   2f330:	b	2f35c <__assert_fail@plt+0x1d494>
   2f334:	mov	r0, #1
   2f338:	str	r0, [fp, #-44]	; 0xffffffd4
   2f33c:	str	r0, [fp, #-48]	; 0xffffffd0
   2f340:	mov	r0, #4
   2f344:	bl	38450 <__assert_fail@plt+0x26588>
   2f348:	ldr	r1, [sp, #36]	; 0x24
   2f34c:	cmp	r0, #0
   2f350:	str	r0, [fp, #-40]	; 0xffffffd8
   2f354:	beq	2f864 <__assert_fail@plt+0x1d99c>
   2f358:	str	r1, [r0]
   2f35c:	sub	r0, fp, #32
   2f360:	mov	r1, r8
   2f364:	sub	r2, fp, #48	; 0x30
   2f368:	bl	301d4 <__assert_fail@plt+0x1e30c>
   2f36c:	ldr	r2, [sp, #44]	; 0x2c
   2f370:	ldr	r1, [r2, #100]	; 0x64
   2f374:	str	r0, [r1, r6, lsl #2]
   2f378:	ldr	r0, [r2, #100]	; 0x64
   2f37c:	ldr	r0, [r0, r6, lsl #2]
   2f380:	cmp	r0, #0
   2f384:	bne	2f394 <__assert_fail@plt+0x1d4cc>
   2f388:	ldr	r7, [fp, #-32]	; 0xffffffe0
   2f38c:	cmp	r7, #0
   2f390:	bne	2f840 <__assert_fail@plt+0x1d978>
   2f394:	cmp	r9, #0
   2f398:	ldr	r9, [sp, #44]	; 0x2c
   2f39c:	ldr	r7, [sp, #40]	; 0x28
   2f3a0:	bne	2f3c0 <__assert_fail@plt+0x1d4f8>
   2f3a4:	ldr	r0, [r8]
   2f3a8:	add	r1, r0, sl, lsl #3
   2f3ac:	mov	r0, r9
   2f3b0:	mov	r2, r5
   2f3b4:	bl	30890 <__assert_fail@plt+0x1e9c8>
   2f3b8:	cmp	r0, #0
   2f3bc:	beq	2f270 <__assert_fail@plt+0x1d3a8>
   2f3c0:	ldr	r0, [r8, #12]
   2f3c4:	ldr	r2, [sp, #48]	; 0x30
   2f3c8:	ldr	r6, [r0, sl, lsl #2]
   2f3cc:	cmp	r2, #0
   2f3d0:	bne	2f250 <__assert_fail@plt+0x1d388>
   2f3d4:	mov	r0, #1
   2f3d8:	str	r0, [sp, #52]	; 0x34
   2f3dc:	str	r0, [sp, #48]	; 0x30
   2f3e0:	mov	r0, #4
   2f3e4:	bl	38450 <__assert_fail@plt+0x26588>
   2f3e8:	cmp	r0, #0
   2f3ec:	str	r0, [sp, #56]	; 0x38
   2f3f0:	beq	2f828 <__assert_fail@plt+0x1d960>
   2f3f4:	str	r6, [r0]
   2f3f8:	ldr	r0, [r7, #20]
   2f3fc:	add	r4, r4, #1
   2f400:	cmp	r4, r0
   2f404:	blt	2f280 <__assert_fail@plt+0x1d3b8>
   2f408:	b	2f5f4 <__assert_fail@plt+0x1d72c>
   2f40c:	cmp	r2, r1
   2f410:	bne	2f478 <__assert_fail@plt+0x1d5b0>
   2f414:	lsl	r0, r2, #1
   2f418:	lsl	r1, r2, #3
   2f41c:	str	r0, [sp, #48]	; 0x30
   2f420:	ldr	r0, [sp, #56]	; 0x38
   2f424:	bl	38480 <__assert_fail@plt+0x265b8>
   2f428:	cmp	r0, #0
   2f42c:	beq	2f834 <__assert_fail@plt+0x1d96c>
   2f430:	str	r0, [sp, #56]	; 0x38
   2f434:	ldr	r1, [sp, #52]	; 0x34
   2f438:	ldr	r2, [r0]
   2f43c:	cmp	r2, r6
   2f440:	bgt	2f488 <__assert_fail@plt+0x1d5c0>
   2f444:	add	r2, r0, r1, lsl #2
   2f448:	ldr	r3, [r2, #-4]
   2f44c:	cmp	r3, r6
   2f450:	ble	2f4f4 <__assert_fail@plt+0x1d62c>
   2f454:	sub	r1, r1, #2
   2f458:	str	r3, [r2]
   2f45c:	sub	r1, r1, #1
   2f460:	ldr	r3, [r2, #-8]
   2f464:	sub	r2, r2, #4
   2f468:	cmp	r3, r6
   2f46c:	bgt	2f458 <__assert_fail@plt+0x1d590>
   2f470:	add	r1, r1, #2
   2f474:	b	2f4f4 <__assert_fail@plt+0x1d62c>
   2f478:	ldr	r0, [sp, #56]	; 0x38
   2f47c:	ldr	r2, [r0]
   2f480:	cmp	r2, r6
   2f484:	ble	2f444 <__assert_fail@plt+0x1d57c>
   2f488:	cmp	r1, #1
   2f48c:	blt	2f4f4 <__assert_fail@plt+0x1d62c>
   2f490:	ands	r7, r1, #3
   2f494:	sub	ip, r1, #1
   2f498:	beq	2f4bc <__assert_fail@plt+0x1d5f4>
   2f49c:	add	lr, r0, r1, lsl #2
   2f4a0:	mov	r3, lr
   2f4a4:	ldr	r2, [r3, #-4]!
   2f4a8:	subs	r7, r7, #1
   2f4ac:	sub	r1, r1, #1
   2f4b0:	str	r2, [lr]
   2f4b4:	mov	lr, r3
   2f4b8:	bne	2f4a4 <__assert_fail@plt+0x1d5dc>
   2f4bc:	cmp	ip, #3
   2f4c0:	bcc	2f4ec <__assert_fail@plt+0x1d624>
   2f4c4:	add	r2, r0, r1, lsl #2
   2f4c8:	sub	r2, r2, #8
   2f4cc:	sub	lr, r2, #8
   2f4d0:	sub	r1, r1, #4
   2f4d4:	sub	sl, r2, #4
   2f4d8:	sub	r2, r2, #16
   2f4dc:	ldm	lr, {r3, r7, ip, lr}
   2f4e0:	cmp	r1, #0
   2f4e4:	stm	sl, {r3, r7, ip, lr}
   2f4e8:	bgt	2f4cc <__assert_fail@plt+0x1d604>
   2f4ec:	ldr	r7, [sp, #40]	; 0x28
   2f4f0:	mov	r1, #0
   2f4f4:	str	r6, [r0, r1, lsl #2]
   2f4f8:	b	2f264 <__assert_fail@plt+0x1d39c>
   2f4fc:	cmp	r2, r1
   2f500:	bne	2f568 <__assert_fail@plt+0x1d6a0>
   2f504:	lsl	r0, r2, #1
   2f508:	lsl	r1, r2, #3
   2f50c:	str	r0, [fp, #-48]	; 0xffffffd0
   2f510:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2f514:	bl	38480 <__assert_fail@plt+0x265b8>
   2f518:	cmp	r0, #0
   2f51c:	beq	2f834 <__assert_fail@plt+0x1d96c>
   2f520:	str	r0, [fp, #-40]	; 0xffffffd8
   2f524:	ldr	r1, [fp, #-44]	; 0xffffffd4
   2f528:	ldr	r2, [r0]
   2f52c:	cmp	r2, r7
   2f530:	bgt	2f578 <__assert_fail@plt+0x1d6b0>
   2f534:	add	r2, r0, r1, lsl #2
   2f538:	ldr	r3, [r2, #-4]
   2f53c:	cmp	r3, r7
   2f540:	ble	2f5ec <__assert_fail@plt+0x1d724>
   2f544:	sub	r1, r1, #2
   2f548:	str	r3, [r2]
   2f54c:	sub	r1, r1, #1
   2f550:	ldr	r3, [r2, #-8]
   2f554:	sub	r2, r2, #4
   2f558:	cmp	r3, r7
   2f55c:	bgt	2f548 <__assert_fail@plt+0x1d680>
   2f560:	add	r1, r1, #2
   2f564:	b	2f5ec <__assert_fail@plt+0x1d724>
   2f568:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2f56c:	ldr	r2, [r0]
   2f570:	cmp	r2, r7
   2f574:	ble	2f534 <__assert_fail@plt+0x1d66c>
   2f578:	cmp	r1, #1
   2f57c:	blt	2f5ec <__assert_fail@plt+0x1d724>
   2f580:	ands	r3, r1, #3
   2f584:	sub	ip, r1, #1
   2f588:	beq	2f5ac <__assert_fail@plt+0x1d6e4>
   2f58c:	add	lr, r0, r1, lsl #2
   2f590:	mov	r7, lr
   2f594:	ldr	r2, [r7, #-4]!
   2f598:	subs	r3, r3, #1
   2f59c:	sub	r1, r1, #1
   2f5a0:	str	r2, [lr]
   2f5a4:	mov	lr, r7
   2f5a8:	bne	2f594 <__assert_fail@plt+0x1d6cc>
   2f5ac:	cmp	ip, #3
   2f5b0:	bcc	2f5e4 <__assert_fail@plt+0x1d71c>
   2f5b4:	add	r2, r0, r1, lsl #2
   2f5b8:	sub	r2, r2, #8
   2f5bc:	sub	lr, r2, #8
   2f5c0:	sub	r1, r1, #4
   2f5c4:	ldm	lr, {r3, r7, ip, lr}
   2f5c8:	cmp	r1, #0
   2f5cc:	str	r3, [r2, #-4]
   2f5d0:	str	r7, [r2]
   2f5d4:	str	ip, [r2, #4]
   2f5d8:	str	lr, [r2, #8]
   2f5dc:	sub	r2, r2, #16
   2f5e0:	bgt	2f5bc <__assert_fail@plt+0x1d6f4>
   2f5e4:	ldr	r7, [sp, #36]	; 0x24
   2f5e8:	mov	r1, #0
   2f5ec:	str	r7, [r0, r1, lsl #2]
   2f5f0:	b	2f324 <__assert_fail@plt+0x1d45c>
   2f5f4:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2f5f8:	ldr	r7, [sp, #24]
   2f5fc:	ldr	sl, [sp, #20]
   2f600:	bl	17c10 <__assert_fail@plt+0x5d48>
   2f604:	ldr	r4, [fp, #16]
   2f608:	mov	r0, #0
   2f60c:	add	r8, sp, #48	; 0x30
   2f610:	str	r0, [fp, #-52]	; 0xffffffcc
   2f614:	ldr	r0, [sp, #52]	; 0x34
   2f618:	cmp	r0, #0
   2f61c:	beq	2f664 <__assert_fail@plt+0x1d79c>
   2f620:	mov	r0, r7
   2f624:	mov	r1, r8
   2f628:	mov	r2, sl
   2f62c:	mov	r3, r4
   2f630:	bl	2f994 <__assert_fail@plt+0x1dacc>
   2f634:	cmp	r0, #0
   2f638:	str	r0, [fp, #-52]	; 0xffffffcc
   2f63c:	bne	2f84c <__assert_fail@plt+0x1d984>
   2f640:	ldr	r2, [sp, #28]
   2f644:	mov	r0, r9
   2f648:	mov	r1, r8
   2f64c:	mov	r3, sl
   2f650:	str	r4, [sp]
   2f654:	bl	2fadc <__assert_fail@plt+0x1dc14>
   2f658:	cmp	r0, #0
   2f65c:	str	r0, [fp, #-52]	; 0xffffffcc
   2f660:	bne	2f84c <__assert_fail@plt+0x1d984>
   2f664:	cmn	r5, #1
   2f668:	ble	2f6a0 <__assert_fail@plt+0x1d7d8>
   2f66c:	ldr	r0, [r9, #48]	; 0x30
   2f670:	cmp	r0, r5
   2f674:	beq	2f72c <__assert_fail@plt+0x1d864>
   2f678:	ldr	r0, [r9, #80]	; 0x50
   2f67c:	cmp	r0, #2
   2f680:	blt	2f6a8 <__assert_fail@plt+0x1d7e0>
   2f684:	ldr	r0, [r9, #8]
   2f688:	ldr	r6, [r0, r5, lsl #2]
   2f68c:	cmn	r6, #1
   2f690:	bne	2f6d8 <__assert_fail@plt+0x1d810>
   2f694:	sub	r5, r5, #1
   2f698:	cmn	r5, #1
   2f69c:	bne	2f688 <__assert_fail@plt+0x1d7c0>
   2f6a0:	ldr	r3, [r9, #60]	; 0x3c
   2f6a4:	b	2f700 <__assert_fail@plt+0x1d838>
   2f6a8:	ldr	r0, [r9, #4]
   2f6ac:	ldr	r1, [r9, #68]	; 0x44
   2f6b0:	mov	r3, #1
   2f6b4:	ldrb	r0, [r0, r5]
   2f6b8:	ubfx	r2, r0, #5, #3
   2f6bc:	ldr	r1, [r1, r2, lsl #2]
   2f6c0:	and	r2, r0, #31
   2f6c4:	tst	r1, r3, lsl r2
   2f6c8:	moveq	r3, #0
   2f6cc:	cmpeq	r0, #10
   2f6d0:	bne	2f700 <__assert_fail@plt+0x1d838>
   2f6d4:	b	2f6f0 <__assert_fail@plt+0x1d828>
   2f6d8:	ldrb	r0, [r9, #78]	; 0x4e
   2f6dc:	cmp	r0, #0
   2f6e0:	bne	2f73c <__assert_fail@plt+0x1d874>
   2f6e4:	mov	r3, #0
   2f6e8:	cmp	r6, #10
   2f6ec:	bne	2f700 <__assert_fail@plt+0x1d838>
   2f6f0:	ldrb	r0, [r9, #77]	; 0x4d
   2f6f4:	cmp	r0, #0
   2f6f8:	movwne	r0, #1
   2f6fc:	lsl	r3, r0, #1
   2f700:	sub	r0, fp, #52	; 0x34
   2f704:	mov	r1, r7
   2f708:	mov	r2, r8
   2f70c:	bl	2c208 <__assert_fail@plt+0x1a340>
   2f710:	cmp	r0, #0
   2f714:	str	r0, [sp, #40]	; 0x28
   2f718:	bne	2f19c <__assert_fail@plt+0x1d2d4>
   2f71c:	ldr	r0, [fp, #-52]	; 0xffffffcc
   2f720:	cmp	r0, #0
   2f724:	beq	2f19c <__assert_fail@plt+0x1d2d4>
   2f728:	b	2f84c <__assert_fail@plt+0x1d984>
   2f72c:	ldr	r0, [r9, #88]	; 0x58
   2f730:	and	r0, r0, #2
   2f734:	eor	r3, r0, #10
   2f738:	b	2f700 <__assert_fail@plt+0x1d838>
   2f73c:	mov	r0, r6
   2f740:	bl	11ce8 <iswalnum@plt>
   2f744:	mov	r3, #1
   2f748:	cmp	r6, #95	; 0x5f
   2f74c:	beq	2f700 <__assert_fail@plt+0x1d838>
   2f750:	cmp	r0, #0
   2f754:	beq	2f6e4 <__assert_fail@plt+0x1d81c>
   2f758:	b	2f700 <__assert_fail@plt+0x1d838>
   2f75c:	ldr	r5, [fp, #12]
   2f760:	ldr	r0, [sp, #56]	; 0x38
   2f764:	bl	17c10 <__assert_fail@plt+0x5d48>
   2f768:	ldr	r0, [r9, #100]	; 0x64
   2f76c:	ldr	r1, [fp, #12]
   2f770:	mov	sl, #1
   2f774:	ldr	r1, [r0, r1, lsl #2]
   2f778:	ldr	r0, [sp, #16]
   2f77c:	str	r5, [r0]
   2f780:	ldr	r0, [sp, #12]
   2f784:	cmp	r1, #0
   2f788:	addne	r1, r1, #4
   2f78c:	str	r0, [r9, #40]	; 0x28
   2f790:	ldr	r0, [sp, #8]
   2f794:	str	r0, [r9, #100]	; 0x64
   2f798:	beq	2f7f4 <__assert_fail@plt+0x1d92c>
   2f79c:	ldr	r2, [r1, #4]
   2f7a0:	cmp	r2, #1
   2f7a4:	blt	2f800 <__assert_fail@plt+0x1d938>
   2f7a8:	ldr	r0, [fp, #8]
   2f7ac:	ldr	r1, [r1, #8]
   2f7b0:	subs	r2, r2, #1
   2f7b4:	mov	sl, #0
   2f7b8:	mov	r3, #0
   2f7bc:	beq	2f7e8 <__assert_fail@plt+0x1d920>
   2f7c0:	mov	r3, #0
   2f7c4:	mov	r7, #1
   2f7c8:	add	r5, r3, r2
   2f7cc:	lsr	r4, r5, #1
   2f7d0:	ldr	r6, [r1, r4, lsl #2]
   2f7d4:	cmp	r6, r0
   2f7d8:	addlt	r3, r7, r5, lsr #1
   2f7dc:	movge	r2, r4
   2f7e0:	cmp	r3, r2
   2f7e4:	bcc	2f7c8 <__assert_fail@plt+0x1d900>
   2f7e8:	ldr	r1, [r1, r3, lsl #2]
   2f7ec:	cmp	r1, r0
   2f7f0:	movne	sl, #1
   2f7f4:	mov	r0, sl
   2f7f8:	sub	sp, fp, #28
   2f7fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f800:	mov	sl, #1
   2f804:	mov	r0, sl
   2f808:	sub	sp, fp, #28
   2f80c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f810:	mov	r0, #0
   2f814:	str	r0, [sp, #52]	; 0x34
   2f818:	str	r0, [sp, #48]	; 0x30
   2f81c:	str	r0, [sp, #56]	; 0x38
   2f820:	str	r0, [fp, #-52]	; 0xffffffcc
   2f824:	b	2f0c4 <__assert_fail@plt+0x1d1fc>
   2f828:	mov	r0, #0
   2f82c:	str	r0, [sp, #48]	; 0x30
   2f830:	str	r0, [sp, #52]	; 0x34
   2f834:	mov	r7, #12
   2f838:	b	2f840 <__assert_fail@plt+0x1d978>
   2f83c:	mov	r7, r0
   2f840:	ldr	r0, [fp, #-40]	; 0xffffffd8
   2f844:	bl	17c10 <__assert_fail@plt+0x5d48>
   2f848:	str	r7, [fp, #-52]	; 0xffffffcc
   2f84c:	ldr	r0, [sp, #56]	; 0x38
   2f850:	bl	17c10 <__assert_fail@plt+0x5d48>
   2f854:	ldr	sl, [fp, #-52]	; 0xffffffcc
   2f858:	mov	r0, sl
   2f85c:	sub	sp, fp, #28
   2f860:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f864:	mov	r0, #0
   2f868:	mov	r7, #12
   2f86c:	str	r0, [fp, #-48]	; 0xffffffd0
   2f870:	str	r0, [fp, #-44]	; 0xffffffd4
   2f874:	b	2f844 <__assert_fail@plt+0x1d97c>
   2f878:	mvn	r1, #-2147483648	; 0x80000000
   2f87c:	mov	sl, #12
   2f880:	sub	r1, r1, r4
   2f884:	cmp	r1, r2
   2f888:	ble	2f7f4 <__assert_fail@plt+0x1d92c>
   2f88c:	add	r8, r2, #1
   2f890:	str	lr, [sp, #40]	; 0x28
   2f894:	add	r5, r8, r4
   2f898:	cmn	r5, #-1073741823	; 0xc0000001
   2f89c:	bhi	2f7f4 <__assert_fail@plt+0x1d92c>
   2f8a0:	ldr	r0, [ip, #8]
   2f8a4:	lsl	r1, r5, #2
   2f8a8:	mov	r6, ip
   2f8ac:	bl	38480 <__assert_fail@plt+0x265b8>
   2f8b0:	cmp	r0, #0
   2f8b4:	beq	2f7f4 <__assert_fail@plt+0x1d92c>
   2f8b8:	str	r5, [r6, #4]
   2f8bc:	str	r0, [r6, #8]
   2f8c0:	add	r0, r0, r4, lsl #2
   2f8c4:	lsl	r2, r8, #2
   2f8c8:	mov	r1, #0
   2f8cc:	bl	11d0c <memset@plt>
   2f8d0:	ldr	r0, [sp, #44]	; 0x2c
   2f8d4:	ldr	r7, [sp, #24]
   2f8d8:	ldr	sl, [sp, #20]
   2f8dc:	ldr	lr, [sp, #40]	; 0x28
   2f8e0:	mov	ip, r6
   2f8e4:	b	2ef10 <__assert_fail@plt+0x1d048>
   2f8e8:	ldr	r8, [r0, #60]	; 0x3c
   2f8ec:	cmp	r5, r9
   2f8f0:	str	ip, [sp, #16]
   2f8f4:	beq	2f03c <__assert_fail@plt+0x1d174>
   2f8f8:	b	2ef90 <__assert_fail@plt+0x1d0c8>
   2f8fc:	and	r0, r1, #2
   2f900:	eor	r8, r0, #10
   2f904:	cmp	r5, r9
   2f908:	str	ip, [sp, #16]
   2f90c:	beq	2f03c <__assert_fail@plt+0x1d174>
   2f910:	b	2ef90 <__assert_fail@plt+0x1d0c8>
   2f914:	mov	sl, r0
   2f918:	ldr	r0, [sp, #56]	; 0x38
   2f91c:	bl	17c10 <__assert_fail@plt+0x5d48>
   2f920:	mov	r0, sl
   2f924:	sub	sp, fp, #28
   2f928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f92c:	mov	r0, #0
   2f930:	mov	sl, #12
   2f934:	str	r0, [sp, #48]	; 0x30
   2f938:	str	r0, [sp, #52]	; 0x34
   2f93c:	str	sl, [fp, #-52]	; 0xffffffcc
   2f940:	mov	r0, sl
   2f944:	sub	sp, fp, #28
   2f948:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2f94c:	mov	r0, r6
   2f950:	str	lr, [sp, #40]	; 0x28
   2f954:	mov	r4, ip
   2f958:	bl	11ce8 <iswalnum@plt>
   2f95c:	mov	r8, #1
   2f960:	cmp	r6, #95	; 0x5f
   2f964:	beq	2f97c <__assert_fail@plt+0x1dab4>
   2f968:	ldr	lr, [sp, #40]	; 0x28
   2f96c:	cmp	r0, #0
   2f970:	mov	ip, r4
   2f974:	beq	2f010 <__assert_fail@plt+0x1d148>
   2f978:	b	2f030 <__assert_fail@plt+0x1d168>
   2f97c:	ldr	lr, [sp, #40]	; 0x28
   2f980:	mov	ip, r4
   2f984:	cmp	r5, r9
   2f988:	str	ip, [sp, #16]
   2f98c:	beq	2f03c <__assert_fail@plt+0x1d174>
   2f990:	b	2ef90 <__assert_fail@plt+0x1d0c8>
   2f994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2f998:	add	fp, sp, #28
   2f99c:	sub	sp, sp, #20
   2f9a0:	str	r0, [sp, #4]
   2f9a4:	ldr	r0, [r1, #4]
   2f9a8:	mov	sl, r1
   2f9ac:	mov	r1, #0
   2f9b0:	mov	r5, r3
   2f9b4:	mov	r8, r2
   2f9b8:	str	r1, [sp, #12]
   2f9bc:	str	r0, [sp, #8]
   2f9c0:	lsl	r0, r0, #2
   2f9c4:	bl	38450 <__assert_fail@plt+0x26588>
   2f9c8:	cmp	r0, #0
   2f9cc:	str	r0, [sp, #16]
   2f9d0:	beq	2facc <__assert_fail@plt+0x1dc04>
   2f9d4:	ldr	r0, [sl, #4]
   2f9d8:	cmp	r0, #1
   2f9dc:	blt	2fa8c <__assert_fail@plt+0x1dbc4>
   2f9e0:	mov	r9, #0
   2f9e4:	ldr	r0, [sl, #8]
   2f9e8:	ldr	r1, [sp, #4]
   2f9ec:	ldr	r2, [r0, r9, lsl #2]
   2f9f0:	ldr	r1, [r1, #24]
   2f9f4:	add	r0, r2, r2, lsl #1
   2f9f8:	add	r1, r1, r0, lsl #2
   2f9fc:	ldr	r0, [r1, #4]
   2fa00:	cmp	r0, #1
   2fa04:	blt	2fa6c <__assert_fail@plt+0x1dba4>
   2fa08:	ldr	r7, [sp, #4]
   2fa0c:	ldr	r3, [r1, #8]
   2fa10:	ldr	r7, [r7]
   2fa14:	b	2fa24 <__assert_fail@plt+0x1db5c>
   2fa18:	add	r3, r3, #4
   2fa1c:	subs	r0, r0, #1
   2fa20:	beq	2fa6c <__assert_fail@plt+0x1dba4>
   2fa24:	ldr	r6, [r3]
   2fa28:	add	r4, r7, r6, lsl #3
   2fa2c:	ldrb	r4, [r4, #4]
   2fa30:	cmp	r4, r5
   2fa34:	bne	2fa18 <__assert_fail@plt+0x1db50>
   2fa38:	ldr	r4, [r7, r6, lsl #3]
   2fa3c:	cmp	r4, r8
   2fa40:	bne	2fa18 <__assert_fail@plt+0x1db50>
   2fa44:	cmn	r6, #1
   2fa48:	beq	2fa6c <__assert_fail@plt+0x1dba4>
   2fa4c:	ldr	r0, [sp, #4]
   2fa50:	add	r1, sp, #8
   2fa54:	mov	r3, r8
   2fa58:	str	r5, [sp]
   2fa5c:	bl	30090 <__assert_fail@plt+0x1e1c8>
   2fa60:	cmp	r0, #0
   2fa64:	beq	2fa7c <__assert_fail@plt+0x1dbb4>
   2fa68:	b	2fab4 <__assert_fail@plt+0x1dbec>
   2fa6c:	add	r0, sp, #8
   2fa70:	bl	2bee8 <__assert_fail@plt+0x1a020>
   2fa74:	cmp	r0, #0
   2fa78:	bne	2fab4 <__assert_fail@plt+0x1dbec>
   2fa7c:	ldr	r0, [sl, #4]
   2fa80:	add	r9, r9, #1
   2fa84:	cmp	r9, r0
   2fa88:	blt	2f9e4 <__assert_fail@plt+0x1db1c>
   2fa8c:	ldr	r0, [sl, #8]
   2fa90:	bl	17c10 <__assert_fail@plt+0x5d48>
   2fa94:	vldr	d16, [sp, #8]
   2fa98:	ldr	r0, [sp, #16]
   2fa9c:	mov	r7, #0
   2faa0:	str	r0, [sl, #8]
   2faa4:	vstr	d16, [sl]
   2faa8:	mov	r0, r7
   2faac:	sub	sp, fp, #28
   2fab0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fab4:	mov	r7, r0
   2fab8:	ldr	r0, [sp, #16]
   2fabc:	bl	17c10 <__assert_fail@plt+0x5d48>
   2fac0:	mov	r0, r7
   2fac4:	sub	sp, fp, #28
   2fac8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2facc:	mov	r7, #12
   2fad0:	mov	r0, r7
   2fad4:	sub	sp, fp, #28
   2fad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2fadc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2fae0:	add	fp, sp, #28
   2fae4:	sub	sp, sp, #52	; 0x34
   2fae8:	ldr	ip, [r0, #108]	; 0x6c
   2faec:	mov	lr, r1
   2faf0:	ldr	r1, [r0, #84]	; 0x54
   2faf4:	str	r0, [sp, #24]
   2faf8:	mov	sl, r2
   2fafc:	mov	r8, #0
   2fb00:	mov	r0, #0
   2fb04:	cmp	ip, #1
   2fb08:	str	r1, [sp, #28]
   2fb0c:	blt	2fb50 <__assert_fail@plt+0x1dc88>
   2fb10:	ldr	r0, [sp, #24]
   2fb14:	mov	r7, #1
   2fb18:	mov	r1, ip
   2fb1c:	ldr	r2, [r0, #116]	; 0x74
   2fb20:	mov	r0, #0
   2fb24:	add	r6, r1, r0
   2fb28:	add	r6, r6, r6, lsr #31
   2fb2c:	asr	r4, r6, #1
   2fb30:	add	r5, r4, r4, lsl #1
   2fb34:	add	r5, r2, r5, lsl #3
   2fb38:	ldr	r5, [r5, #4]
   2fb3c:	cmp	r5, sl
   2fb40:	addlt	r0, r7, r6, asr #1
   2fb44:	movge	r1, r4
   2fb48:	cmp	r0, r1
   2fb4c:	blt	2fb24 <__assert_fail@plt+0x1dc5c>
   2fb50:	cmp	r0, ip
   2fb54:	bge	30074 <__assert_fail@plt+0x1e1ac>
   2fb58:	cmn	r0, #1
   2fb5c:	beq	30074 <__assert_fail@plt+0x1e1ac>
   2fb60:	ldr	r1, [sp, #24]
   2fb64:	add	r0, r0, r0, lsl #1
   2fb68:	str	r0, [sp, #8]
   2fb6c:	ldr	r1, [r1, #116]	; 0x74
   2fb70:	add	r0, r1, r0, lsl #3
   2fb74:	ldr	r0, [r0, #4]
   2fb78:	cmp	r0, sl
   2fb7c:	bne	30074 <__assert_fail@plt+0x1e1ac>
   2fb80:	str	r3, [sp, #12]
   2fb84:	mov	r9, #1
   2fb88:	str	lr, [sp, #16]
   2fb8c:	ldr	r0, [sp, #8]
   2fb90:	add	r0, r1, r0, lsl #3
   2fb94:	mov	r8, r0
   2fb98:	ldr	r0, [lr, #4]
   2fb9c:	cmp	r0, #1
   2fba0:	bge	2fc54 <__assert_fail@plt+0x1dd8c>
   2fba4:	b	2fc34 <__assert_fail@plt+0x1dd6c>
   2fba8:	mov	r0, #4
   2fbac:	str	r9, [sp, #36]	; 0x24
   2fbb0:	mov	r4, r1
   2fbb4:	str	r9, [sp, #32]
   2fbb8:	bl	38450 <__assert_fail@plt+0x26588>
   2fbbc:	cmp	r0, #0
   2fbc0:	str	r0, [sp, #40]	; 0x28
   2fbc4:	beq	2fee8 <__assert_fail@plt+0x1e020>
   2fbc8:	str	r4, [r0]
   2fbcc:	mov	r0, #0
   2fbd0:	str	r0, [fp, #-32]	; 0xffffffe0
   2fbd4:	ldr	r1, [sp, #28]
   2fbd8:	sub	r0, fp, #32
   2fbdc:	add	r2, sp, #32
   2fbe0:	bl	301d4 <__assert_fail@plt+0x1e30c>
   2fbe4:	ldr	r4, [sp, #24]
   2fbe8:	ldr	r1, [r4, #100]	; 0x64
   2fbec:	str	r0, [r1, r7, lsl #2]
   2fbf0:	ldr	r0, [sp, #40]	; 0x28
   2fbf4:	bl	17c10 <__assert_fail@plt+0x5d48>
   2fbf8:	ldr	r0, [r4, #100]	; 0x64
   2fbfc:	ldr	r1, [fp, #-32]	; 0xffffffe0
   2fc00:	ldr	r0, [r0, r7, lsl #2]
   2fc04:	cmp	r1, #0
   2fc08:	mov	r2, r1
   2fc0c:	movwne	r2, #1
   2fc10:	clz	r0, r0
   2fc14:	lsr	r0, r0, #5
   2fc18:	ands	r0, r0, r2
   2fc1c:	ldreq	r1, [sp, #20]
   2fc20:	str	r1, [sp, #20]
   2fc24:	ldr	lr, [sp, #16]
   2fc28:	cmp	r0, #0
   2fc2c:	cmpne	r0, #4
   2fc30:	bne	3005c <__assert_fail@plt+0x1e194>
   2fc34:	ldrb	r1, [r8, #20]
   2fc38:	add	r0, r8, #24
   2fc3c:	cmp	r1, #0
   2fc40:	beq	30070 <__assert_fail@plt+0x1e1a8>
   2fc44:	mov	r8, r0
   2fc48:	ldr	r0, [lr, #4]
   2fc4c:	cmp	r0, #1
   2fc50:	blt	2fc34 <__assert_fail@plt+0x1dd6c>
   2fc54:	subs	r6, r0, #1
   2fc58:	ldr	r2, [r8]
   2fc5c:	ldr	r0, [lr, #8]
   2fc60:	mov	r3, #0
   2fc64:	beq	2fc8c <__assert_fail@plt+0x1ddc4>
   2fc68:	mov	r1, r6
   2fc6c:	add	r7, r3, r1
   2fc70:	lsr	r5, r7, #1
   2fc74:	ldr	r4, [r0, r5, lsl #2]
   2fc78:	cmp	r4, r2
   2fc7c:	addlt	r3, r9, r7, lsr #1
   2fc80:	movge	r1, r5
   2fc84:	cmp	r3, r1
   2fc88:	bcc	2fc6c <__assert_fail@plt+0x1dda4>
   2fc8c:	ldr	r1, [r0, r3, lsl #2]
   2fc90:	cmp	r1, r2
   2fc94:	bne	2fc34 <__assert_fail@plt+0x1dd6c>
   2fc98:	ldr	r3, [r8, #12]
   2fc9c:	ldr	r1, [r8, #8]
   2fca0:	add	r3, r3, sl
   2fca4:	sub	r7, r3, r1
   2fca8:	cmp	r7, sl
   2fcac:	bne	2fda4 <__assert_fail@plt+0x1dedc>
   2fcb0:	ldr	r1, [sp, #28]
   2fcb4:	add	r2, r2, r2, lsl #1
   2fcb8:	cmp	r6, #0
   2fcbc:	ldr	r1, [r1, #20]
   2fcc0:	add	r1, r1, r2, lsl #2
   2fcc4:	mov	r2, #0
   2fcc8:	ldr	r1, [r1, #8]
   2fccc:	ldr	r4, [r1]
   2fcd0:	beq	2fcf4 <__assert_fail@plt+0x1de2c>
   2fcd4:	add	r1, r2, r6
   2fcd8:	lsr	r3, r1, #1
   2fcdc:	ldr	r7, [r0, r3, lsl #2]
   2fce0:	cmp	r7, r4
   2fce4:	addlt	r2, r9, r1, lsr #1
   2fce8:	movge	r6, r3
   2fcec:	cmp	r2, r6
   2fcf0:	bcc	2fcd4 <__assert_fail@plt+0x1de0c>
   2fcf4:	ldr	r1, [r0, r2, lsl #2]
   2fcf8:	mov	r0, #4
   2fcfc:	cmp	r1, r4
   2fd00:	beq	2fc28 <__assert_fail@plt+0x1dd60>
   2fd04:	mov	r0, #4
   2fd08:	str	r9, [sp, #36]	; 0x24
   2fd0c:	str	r9, [sp, #32]
   2fd10:	bl	38450 <__assert_fail@plt+0x26588>
   2fd14:	cmp	r0, #0
   2fd18:	str	r0, [sp, #40]	; 0x28
   2fd1c:	beq	2fed4 <__assert_fail@plt+0x1e00c>
   2fd20:	mov	r6, #0
   2fd24:	str	r4, [r0]
   2fd28:	ldr	r0, [sp, #28]
   2fd2c:	ldr	r2, [sp, #12]
   2fd30:	ldr	r3, [fp, #8]
   2fd34:	add	r4, sp, #32
   2fd38:	str	r6, [fp, #-32]	; 0xffffffe0
   2fd3c:	mov	r1, r4
   2fd40:	bl	2f994 <__assert_fail@plt+0x1dacc>
   2fd44:	ldr	r5, [sp, #16]
   2fd48:	mov	r7, r0
   2fd4c:	mov	r1, r4
   2fd50:	mov	r0, r5
   2fd54:	bl	2bee8 <__assert_fail@plt+0x1a020>
   2fd58:	mov	r4, r0
   2fd5c:	ldr	r0, [sp, #40]	; 0x28
   2fd60:	bl	17c10 <__assert_fail@plt+0x5d48>
   2fd64:	orr	r0, r7, r6
   2fd68:	mov	lr, r5
   2fd6c:	orrs	r0, r0, r4
   2fd70:	mov	r0, #2
   2fd74:	beq	2fc28 <__assert_fail@plt+0x1dd60>
   2fd78:	cmp	r7, #0
   2fd7c:	mov	r0, #1
   2fd80:	movne	r4, r7
   2fd84:	cmp	r6, #0
   2fd88:	movne	r4, r6
   2fd8c:	str	r4, [fp, #-32]	; 0xffffffe0
   2fd90:	str	r4, [sp, #20]
   2fd94:	cmp	r0, #0
   2fd98:	cmpne	r0, #4
   2fd9c:	beq	2fc34 <__assert_fail@plt+0x1dd6c>
   2fda0:	b	3005c <__assert_fail@plt+0x1e194>
   2fda4:	ldr	r0, [sp, #24]
   2fda8:	ldr	r0, [r0, #100]	; 0x64
   2fdac:	ldr	r5, [r0, r7, lsl #2]
   2fdb0:	ldr	r0, [sp, #28]
   2fdb4:	ldr	r0, [r0, #12]
   2fdb8:	cmp	r5, #0
   2fdbc:	ldr	r1, [r0, r2, lsl #2]
   2fdc0:	beq	2fba8 <__assert_fail@plt+0x1dce0>
   2fdc4:	ldr	ip, [r5, #8]
   2fdc8:	cmp	ip, #0
   2fdcc:	ble	2fe8c <__assert_fail@plt+0x1dfc4>
   2fdd0:	ldr	r0, [r5, #12]
   2fdd4:	subs	r3, ip, #1
   2fdd8:	mov	r2, #0
   2fddc:	str	r7, [sp, #4]
   2fde0:	beq	2fe04 <__assert_fail@plt+0x1df3c>
   2fde4:	add	r6, r2, r3
   2fde8:	lsr	r7, r6, #1
   2fdec:	ldr	r4, [r0, r7, lsl #2]
   2fdf0:	cmp	r4, r1
   2fdf4:	addlt	r2, r9, r6, lsr #1
   2fdf8:	movge	r3, r7
   2fdfc:	cmp	r2, r3
   2fe00:	bcc	2fde4 <__assert_fail@plt+0x1df1c>
   2fe04:	ldr	r2, [r0, r2, lsl #2]
   2fe08:	mov	r0, #4
   2fe0c:	cmp	r2, r1
   2fe10:	beq	2fc28 <__assert_fail@plt+0x1dd60>
   2fe14:	ldr	r7, [sp, #4]
   2fe18:	mov	r4, r1
   2fe1c:	cmp	ip, #1
   2fe20:	str	ip, [sp, #36]	; 0x24
   2fe24:	blt	2fe94 <__assert_fail@plt+0x1dfcc>
   2fe28:	lsl	r0, ip, #2
   2fe2c:	str	ip, [sp, #32]
   2fe30:	bl	38450 <__assert_fail@plt+0x26588>
   2fe34:	cmp	r0, #0
   2fe38:	str	r0, [sp, #40]	; 0x28
   2fe3c:	beq	2ff3c <__assert_fail@plt+0x1e074>
   2fe40:	ldr	r2, [r5, #8]
   2fe44:	ldr	r1, [r5, #12]
   2fe48:	mov	r5, r0
   2fe4c:	lsl	r2, r2, #2
   2fe50:	bl	11ab4 <memcpy@plt>
   2fe54:	ldr	r1, [sp, #32]
   2fe58:	mov	r6, #0
   2fe5c:	str	r6, [fp, #-32]	; 0xffffffe0
   2fe60:	cmp	r1, #0
   2fe64:	beq	2fea8 <__assert_fail@plt+0x1dfe0>
   2fe68:	ldr	r0, [sp, #36]	; 0x24
   2fe6c:	cmp	r0, #0
   2fe70:	bne	2ff50 <__assert_fail@plt+0x1e088>
   2fe74:	str	r4, [r5]
   2fe78:	str	r9, [sp, #36]	; 0x24
   2fe7c:	mov	r6, #0
   2fe80:	cmp	r6, #0
   2fe84:	beq	2fbd4 <__assert_fail@plt+0x1dd0c>
   2fe88:	b	2ff14 <__assert_fail@plt+0x1e04c>
   2fe8c:	mov	r4, r1
   2fe90:	str	ip, [sp, #36]	; 0x24
   2fe94:	mov	r6, #0
   2fe98:	str	r6, [sp, #36]	; 0x24
   2fe9c:	str	r6, [sp, #32]
   2fea0:	str	r6, [sp, #40]	; 0x28
   2fea4:	str	r6, [fp, #-32]	; 0xffffffe0
   2fea8:	mov	r0, #4
   2feac:	str	r9, [sp, #36]	; 0x24
   2feb0:	str	r9, [sp, #32]
   2feb4:	bl	38450 <__assert_fail@plt+0x26588>
   2feb8:	cmp	r0, #0
   2febc:	str	r0, [sp, #40]	; 0x28
   2fec0:	beq	2ff08 <__assert_fail@plt+0x1e040>
   2fec4:	str	r4, [r0]
   2fec8:	cmp	r6, #0
   2fecc:	beq	2fbd4 <__assert_fail@plt+0x1dd0c>
   2fed0:	b	2ff14 <__assert_fail@plt+0x1e04c>
   2fed4:	mov	r0, #0
   2fed8:	mov	r6, #12
   2fedc:	str	r0, [sp, #32]
   2fee0:	str	r0, [sp, #36]	; 0x24
   2fee4:	b	2fd28 <__assert_fail@plt+0x1de60>
   2fee8:	mov	r0, #0
   2feec:	mov	r1, #12
   2fef0:	str	r0, [sp, #32]
   2fef4:	str	r0, [sp, #36]	; 0x24
   2fef8:	mov	r0, #12
   2fefc:	str	r1, [fp, #-32]	; 0xffffffe0
   2ff00:	str	r0, [sp, #20]
   2ff04:	b	2ff34 <__assert_fail@plt+0x1e06c>
   2ff08:	mov	r0, #0
   2ff0c:	str	r0, [sp, #32]
   2ff10:	str	r0, [sp, #36]	; 0x24
   2ff14:	clz	r0, r6
   2ff18:	lsr	r4, r0, #5
   2ff1c:	ldr	r0, [sp, #40]	; 0x28
   2ff20:	bl	17c10 <__assert_fail@plt+0x5d48>
   2ff24:	cmp	r4, #0
   2ff28:	movwne	r6, #12
   2ff2c:	str	r6, [sp, #20]
   2ff30:	str	r6, [fp, #-32]	; 0xffffffe0
   2ff34:	mov	r0, #1
   2ff38:	b	2fc24 <__assert_fail@plt+0x1dd5c>
   2ff3c:	mov	r0, #0
   2ff40:	mov	r6, #12
   2ff44:	str	r0, [sp, #32]
   2ff48:	str	r0, [sp, #36]	; 0x24
   2ff4c:	b	2fea4 <__assert_fail@plt+0x1dfdc>
   2ff50:	cmp	r1, r0
   2ff54:	bne	2ff80 <__assert_fail@plt+0x1e0b8>
   2ff58:	lsl	r0, r1, #1
   2ff5c:	lsl	r1, r1, #3
   2ff60:	str	r0, [sp, #32]
   2ff64:	mov	r0, r5
   2ff68:	bl	38480 <__assert_fail@plt+0x265b8>
   2ff6c:	cmp	r0, #0
   2ff70:	beq	30054 <__assert_fail@plt+0x1e18c>
   2ff74:	str	r0, [sp, #40]	; 0x28
   2ff78:	mov	r5, r0
   2ff7c:	ldr	r0, [sp, #36]	; 0x24
   2ff80:	ldr	r1, [r5]
   2ff84:	cmp	r1, r4
   2ff88:	ble	2fffc <__assert_fail@plt+0x1e134>
   2ff8c:	cmp	r0, #1
   2ff90:	blt	30030 <__assert_fail@plt+0x1e168>
   2ff94:	ands	r2, r0, #3
   2ff98:	sub	r1, r0, #1
   2ff9c:	beq	2ffc0 <__assert_fail@plt+0x1e0f8>
   2ffa0:	add	r6, r5, r0, lsl #2
   2ffa4:	mov	r3, r6
   2ffa8:	ldr	r7, [r3, #-4]!
   2ffac:	subs	r2, r2, #1
   2ffb0:	sub	r0, r0, #1
   2ffb4:	str	r7, [r6]
   2ffb8:	mov	r6, r3
   2ffbc:	bne	2ffa8 <__assert_fail@plt+0x1e0e0>
   2ffc0:	cmp	r1, #3
   2ffc4:	bcc	2fff4 <__assert_fail@plt+0x1e12c>
   2ffc8:	add	r1, r5, r0, lsl #2
   2ffcc:	sub	r1, r1, #8
   2ffd0:	ldr	r6, [r1, #4]
   2ffd4:	ldmda	r1, {r2, r3, r7}
   2ffd8:	sub	ip, r1, #4
   2ffdc:	sub	r0, r0, #4
   2ffe0:	cmp	r0, #0
   2ffe4:	stm	ip, {r2, r3, r7}
   2ffe8:	str	r6, [r1, #8]
   2ffec:	sub	r1, r1, #16
   2fff0:	bgt	2ffd0 <__assert_fail@plt+0x1e108>
   2fff4:	mov	r0, #0
   2fff8:	b	30030 <__assert_fail@plt+0x1e168>
   2fffc:	add	r1, r5, r0, lsl #2
   30000:	ldr	r2, [r1, #-4]
   30004:	cmp	r2, r4
   30008:	ble	30030 <__assert_fail@plt+0x1e168>
   3000c:	sub	r0, r0, #2
   30010:	mov	r3, r4
   30014:	str	r2, [r1]
   30018:	sub	r0, r0, #1
   3001c:	ldr	r2, [r1, #-8]
   30020:	sub	r1, r1, #4
   30024:	cmp	r2, r3
   30028:	bgt	30014 <__assert_fail@plt+0x1e14c>
   3002c:	add	r0, r0, #2
   30030:	str	r4, [r5, r0, lsl #2]
   30034:	ldr	r7, [sp, #4]
   30038:	mov	r6, #0
   3003c:	ldr	r0, [sp, #36]	; 0x24
   30040:	add	r0, r0, #1
   30044:	str	r0, [sp, #36]	; 0x24
   30048:	cmp	r6, #0
   3004c:	beq	2fbd4 <__assert_fail@plt+0x1dd0c>
   30050:	b	2ff14 <__assert_fail@plt+0x1e04c>
   30054:	mov	r6, #0
   30058:	b	2ff14 <__assert_fail@plt+0x1e04c>
   3005c:	cmp	r0, #2
   30060:	bne	30080 <__assert_fail@plt+0x1e1b8>
   30064:	ldr	r0, [sp, #24]
   30068:	ldr	r1, [r0, #116]	; 0x74
   3006c:	b	2fb8c <__assert_fail@plt+0x1dcc4>
   30070:	mov	r8, #0
   30074:	mov	r0, r8
   30078:	sub	sp, fp, #28
   3007c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30080:	ldr	r8, [sp, #20]
   30084:	mov	r0, r8
   30088:	sub	sp, fp, #28
   3008c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30090:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30094:	add	fp, sp, #28
   30098:	sub	sp, sp, #4
   3009c:	ldr	r4, [fp, #8]
   300a0:	mov	r9, r3
   300a4:	mov	r7, r2
   300a8:	mov	r8, r1
   300ac:	mov	sl, r0
   300b0:	mov	r5, #1
   300b4:	ldr	r0, [r8, #4]
   300b8:	cmp	r0, #1
   300bc:	bge	300e4 <__assert_fail@plt+0x1e21c>
   300c0:	b	30128 <__assert_fail@plt+0x1e260>
   300c4:	cmp	r2, #0
   300c8:	beq	301bc <__assert_fail@plt+0x1e2f4>
   300cc:	add	r0, r0, r7, lsl #2
   300d0:	ldr	r0, [r0, #8]
   300d4:	ldr	r7, [r0]
   300d8:	ldr	r0, [r8, #4]
   300dc:	cmp	r0, #1
   300e0:	blt	30128 <__assert_fail@plt+0x1e260>
   300e4:	subs	r2, r0, #1
   300e8:	ldr	r0, [r8, #8]
   300ec:	mov	ip, r4
   300f0:	mov	r1, #0
   300f4:	beq	30118 <__assert_fail@plt+0x1e250>
   300f8:	add	r3, r1, r2
   300fc:	lsr	r6, r3, #1
   30100:	ldr	r4, [r0, r6, lsl #2]
   30104:	cmp	r4, r7
   30108:	addlt	r1, r5, r3, lsr #1
   3010c:	movge	r2, r6
   30110:	cmp	r1, r2
   30114:	bcc	300f8 <__assert_fail@plt+0x1e230>
   30118:	ldr	r0, [r0, r1, lsl #2]
   3011c:	mov	r4, ip
   30120:	cmp	r0, r7
   30124:	beq	301bc <__assert_fail@plt+0x1e2f4>
   30128:	ldr	r0, [sl]
   3012c:	add	r1, r0, r7, lsl #3
   30130:	ldrb	r1, [r1, #4]
   30134:	cmp	r1, r4
   30138:	bne	30148 <__assert_fail@plt+0x1e280>
   3013c:	ldr	r0, [r0, r7, lsl #3]
   30140:	cmp	r0, r9
   30144:	beq	301a0 <__assert_fail@plt+0x1e2d8>
   30148:	mov	r0, r8
   3014c:	mov	r1, r7
   30150:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   30154:	cmp	r0, #0
   30158:	beq	301c8 <__assert_fail@plt+0x1e300>
   3015c:	ldr	r0, [sl, #20]
   30160:	add	r7, r7, r7, lsl #1
   30164:	add	r1, r0, r7, lsl #2
   30168:	ldr	r2, [r1, #4]
   3016c:	cmp	r2, #2
   30170:	bne	300c4 <__assert_fail@plt+0x1e1fc>
   30174:	ldr	r0, [r1, #8]
   30178:	mov	r1, r8
   3017c:	mov	r3, r9
   30180:	ldr	r2, [r0, #4]
   30184:	mov	r0, sl
   30188:	str	r4, [sp]
   3018c:	bl	30090 <__assert_fail@plt+0x1e1c8>
   30190:	cmp	r0, #0
   30194:	bne	301c0 <__assert_fail@plt+0x1e2f8>
   30198:	ldr	r0, [sl, #20]
   3019c:	b	300cc <__assert_fail@plt+0x1e204>
   301a0:	cmp	r4, #9
   301a4:	bne	301bc <__assert_fail@plt+0x1e2f4>
   301a8:	mov	r0, r8
   301ac:	mov	r1, r7
   301b0:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   301b4:	cmp	r0, #0
   301b8:	beq	301c8 <__assert_fail@plt+0x1e300>
   301bc:	mov	r0, #0
   301c0:	sub	sp, fp, #28
   301c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301c8:	mov	r0, #12
   301cc:	sub	sp, fp, #28
   301d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   301d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   301d8:	add	fp, sp, #28
   301dc:	sub	sp, sp, #4
   301e0:	ldr	r9, [r2, #4]
   301e4:	cmp	r9, #0
   301e8:	beq	304b4 <__assert_fail@plt+0x1e5ec>
   301ec:	mov	r6, r2
   301f0:	mov	r8, r1
   301f4:	cmp	r9, #1
   301f8:	mov	r7, r9
   301fc:	blt	302e8 <__assert_fail@plt+0x1e420>
   30200:	ldr	ip, [r6, #8]
   30204:	mov	sl, #0
   30208:	cmp	r9, #4
   3020c:	mov	r7, r9
   30210:	bcc	302d0 <__assert_fail@plt+0x1e408>
   30214:	mov	r3, #0
   30218:	bic	sl, r9, #3
   3021c:	mov	r1, #1
   30220:	str	r8, [sp]
   30224:	vdup.32	q8, r3
   30228:	sub	r4, sl, #4
   3022c:	add	r1, r1, r4, lsr #2
   30230:	cmp	r4, #12
   30234:	and	lr, r1, #3
   30238:	vmov.32	d16[0], r9
   3023c:	bcc	30290 <__assert_fail@plt+0x1e3c8>
   30240:	sub	r5, r1, lr
   30244:	mov	r3, #0
   30248:	mov	r4, #64	; 0x40
   3024c:	mov	r7, ip
   30250:	mov	r1, ip
   30254:	vld1.32	{d18-d19}, [r1], r4
   30258:	add	r8, r7, #16
   3025c:	add	r2, r7, #32
   30260:	subs	r5, r5, #4
   30264:	add	r3, r3, #16
   30268:	vld1.32	{d20-d21}, [r8]
   3026c:	vadd.i32	q8, q9, q8
   30270:	vld1.32	{d18-d19}, [r2]
   30274:	add	r2, r7, #48	; 0x30
   30278:	mov	r7, r1
   3027c:	vadd.i32	q8, q10, q8
   30280:	vld1.32	{d20-d21}, [r2]
   30284:	vadd.i32	q8, q9, q8
   30288:	vadd.i32	q8, q10, q8
   3028c:	bne	30254 <__assert_fail@plt+0x1e38c>
   30290:	cmp	lr, #0
   30294:	beq	302b0 <__assert_fail@plt+0x1e3e8>
   30298:	add	r1, ip, r3, lsl #2
   3029c:	rsb	r3, lr, #0
   302a0:	vld1.32	{d18-d19}, [r1]!
   302a4:	adds	r3, r3, #1
   302a8:	vadd.i32	q8, q9, q8
   302ac:	bcc	302a0 <__assert_fail@plt+0x1e3d8>
   302b0:	vext.8	q9, q8, q8, #8
   302b4:	ldr	r8, [sp]
   302b8:	cmp	r9, sl
   302bc:	vadd.i32	q8, q8, q9
   302c0:	vdup.32	q9, d16[1]
   302c4:	vadd.i32	q8, q8, q9
   302c8:	vmov.32	r7, d16[0]
   302cc:	beq	302e8 <__assert_fail@plt+0x1e420>
   302d0:	add	r1, ip, sl, lsl #2
   302d4:	sub	r2, r9, sl
   302d8:	ldr	r3, [r1], #4
   302dc:	subs	r2, r2, #1
   302e0:	add	r7, r3, r7
   302e4:	bne	302d8 <__assert_fail@plt+0x1e410>
   302e8:	ldr	r1, [r8, #68]	; 0x44
   302ec:	ldr	r2, [r8, #32]
   302f0:	str	r0, [sp]
   302f4:	and	r1, r1, r7
   302f8:	add	r3, r1, r1, lsl #1
   302fc:	ldr	r1, [r2, r3, lsl #2]
   30300:	cmp	r1, #1
   30304:	blt	30388 <__assert_fail@plt+0x1e4c0>
   30308:	cmp	r6, #0
   3030c:	beq	30388 <__assert_fail@plt+0x1e4c0>
   30310:	add	r2, r2, r3, lsl #2
   30314:	sub	ip, r9, #1
   30318:	mov	r5, #0
   3031c:	ldr	lr, [r2, #8]
   30320:	ldr	r4, [lr, r5, lsl #2]
   30324:	ldr	r3, [r4]
   30328:	cmp	r7, r3
   3032c:	beq	3034c <__assert_fail@plt+0x1e484>
   30330:	add	r5, r5, #1
   30334:	cmp	r5, r1
   30338:	bge	30388 <__assert_fail@plt+0x1e4c0>
   3033c:	ldr	r4, [lr, r5, lsl #2]
   30340:	ldr	r3, [r4]
   30344:	cmp	r7, r3
   30348:	bne	30330 <__assert_fail@plt+0x1e468>
   3034c:	ldr	r3, [r4, #8]
   30350:	cmp	r3, r9
   30354:	bne	30330 <__assert_fail@plt+0x1e468>
   30358:	mov	r3, ip
   3035c:	add	r0, r3, #1
   30360:	cmp	r0, #1
   30364:	blt	304a8 <__assert_fail@plt+0x1e5e0>
   30368:	ldr	r0, [r6, #8]
   3036c:	ldr	r2, [r4, #12]
   30370:	ldr	r0, [r0, r3, lsl #2]
   30374:	ldr	r2, [r2, r3, lsl #2]
   30378:	sub	r3, r3, #1
   3037c:	cmp	r2, r0
   30380:	beq	3035c <__assert_fail@plt+0x1e494>
   30384:	b	30330 <__assert_fail@plt+0x1e468>
   30388:	mov	r0, #56	; 0x38
   3038c:	mov	r1, #1
   30390:	bl	383fc <__assert_fail@plt+0x26534>
   30394:	cmp	r0, #0
   30398:	beq	304e8 <__assert_fail@plt+0x1e620>
   3039c:	mov	r4, r0
   303a0:	ldr	r0, [r6, #4]
   303a4:	add	sl, r4, #4
   303a8:	cmp	r0, #1
   303ac:	str	r0, [r4, #8]
   303b0:	blt	30478 <__assert_fail@plt+0x1e5b0>
   303b4:	str	r0, [r4, #4]
   303b8:	lsl	r0, r0, #2
   303bc:	bl	38450 <__assert_fail@plt+0x26588>
   303c0:	cmp	r0, #0
   303c4:	str	r0, [r4, #12]
   303c8:	beq	304d4 <__assert_fail@plt+0x1e60c>
   303cc:	ldmib	r6, {r5, r6}
   303d0:	mov	r1, r6
   303d4:	mov	r9, r8
   303d8:	lsl	r2, r5, #2
   303dc:	bl	11ab4 <memcpy@plt>
   303e0:	cmp	r5, #1
   303e4:	str	sl, [r4, #40]	; 0x28
   303e8:	blt	30490 <__assert_fail@plt+0x1e5c8>
   303ec:	movw	ip, #65280	; 0xff00
   303f0:	ldr	sl, [r9]
   303f4:	mov	lr, #32
   303f8:	movt	ip, #3
   303fc:	add	r8, ip, #255	; 0xff
   30400:	b	30424 <__assert_fail@plt+0x1e55c>
   30404:	ldr	r0, [r1]
   30408:	tst	r0, ip
   3040c:	beq	30418 <__assert_fail@plt+0x1e550>
   30410:	orr	r0, r3, #128	; 0x80
   30414:	strb	r0, [r4, #52]	; 0x34
   30418:	add	r6, r6, #4
   3041c:	subs	r5, r5, #1
   30420:	beq	30490 <__assert_fail@plt+0x1e5c8>
   30424:	ldr	r0, [r6]
   30428:	add	r1, sl, r0, lsl #3
   3042c:	ldr	r0, [r1, #4]!
   30430:	and	r3, r0, r8
   30434:	cmp	r3, #1
   30438:	beq	30418 <__assert_fail@plt+0x1e550>
   3043c:	ldrb	r2, [r4, #52]	; 0x34
   30440:	and	r3, lr, r0, lsr #15
   30444:	uxtb	r0, r0
   30448:	cmp	r0, #12
   3044c:	orr	r3, r2, r3
   30450:	strb	r3, [r4, #52]	; 0x34
   30454:	beq	30410 <__assert_fail@plt+0x1e548>
   30458:	cmp	r0, #4
   3045c:	beq	30470 <__assert_fail@plt+0x1e5a8>
   30460:	cmp	r0, #2
   30464:	bne	30404 <__assert_fail@plt+0x1e53c>
   30468:	orr	r0, r3, #16
   3046c:	b	30414 <__assert_fail@plt+0x1e54c>
   30470:	orr	r0, r3, #64	; 0x40
   30474:	b	30414 <__assert_fail@plt+0x1e54c>
   30478:	mov	r0, #0
   3047c:	mov	r9, r8
   30480:	str	r0, [sl]
   30484:	str	r0, [sl, #4]
   30488:	str	r0, [sl, #8]
   3048c:	str	sl, [r4, #40]	; 0x28
   30490:	mov	r0, r9
   30494:	mov	r1, r4
   30498:	mov	r2, r7
   3049c:	bl	2cc68 <__assert_fail@plt+0x1ada0>
   304a0:	cmp	r0, #0
   304a4:	bne	304c8 <__assert_fail@plt+0x1e600>
   304a8:	mov	r0, r4
   304ac:	sub	sp, fp, #28
   304b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   304b4:	mov	r4, #0
   304b8:	str	r4, [r0]
   304bc:	mov	r0, r4
   304c0:	sub	sp, fp, #28
   304c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   304c8:	mov	r0, r4
   304cc:	bl	25c60 <__assert_fail@plt+0x13d98>
   304d0:	b	304e8 <__assert_fail@plt+0x1e620>
   304d4:	mov	r0, #0
   304d8:	str	r0, [r4, #4]
   304dc:	str	r0, [r4, #8]
   304e0:	mov	r0, r4
   304e4:	bl	17c10 <__assert_fail@plt+0x5d48>
   304e8:	ldr	r1, [sp]
   304ec:	mov	r0, #12
   304f0:	mov	r4, #0
   304f4:	str	r0, [r1]
   304f8:	mov	r0, r4
   304fc:	sub	sp, fp, #28
   30500:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30504:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30508:	add	fp, sp, #24
   3050c:	ldr	lr, [r0]
   30510:	add	r7, lr, r1, lsl #3
   30514:	ldrb	r9, [r7, #4]
   30518:	cmp	r9, #7
   3051c:	beq	3071c <__assert_fail@plt+0x1e854>
   30520:	ldr	ip, [r2, #80]	; 0x50
   30524:	mov	r6, #1
   30528:	cmp	ip, #1
   3052c:	beq	3056c <__assert_fail@plt+0x1e6a4>
   30530:	ldr	r5, [r2, #28]
   30534:	add	r7, r3, #1
   30538:	cmp	r7, r5
   3053c:	bge	3056c <__assert_fail@plt+0x1e6a4>
   30540:	ldr	r6, [r2, #8]
   30544:	sub	r5, r5, r3
   30548:	add	r7, r6, r3, lsl #2
   3054c:	mov	r6, #1
   30550:	ldr	r4, [r7, r6, lsl #2]
   30554:	cmn	r4, #1
   30558:	bne	3056c <__assert_fail@plt+0x1e6a4>
   3055c:	add	r6, r6, #1
   30560:	cmp	r5, r6
   30564:	bne	30550 <__assert_fail@plt+0x1e688>
   30568:	mov	r6, r5
   3056c:	mov	r8, #0
   30570:	cmp	r9, #5
   30574:	bne	305bc <__assert_fail@plt+0x1e6f4>
   30578:	cmp	r6, #2
   3057c:	blt	306ec <__assert_fail@plt+0x1e824>
   30580:	ldr	r0, [r0, #128]	; 0x80
   30584:	tst	r0, #64	; 0x40
   30588:	bne	3059c <__assert_fail@plt+0x1e6d4>
   3058c:	ldr	r1, [r2, #4]
   30590:	ldrb	r1, [r1, r3]
   30594:	cmp	r1, #10
   30598:	beq	306ec <__assert_fail@plt+0x1e824>
   3059c:	tst	r0, #128	; 0x80
   305a0:	beq	306e8 <__assert_fail@plt+0x1e820>
   305a4:	ldr	r0, [r2, #4]
   305a8:	ldrb	r0, [r0, r3]
   305ac:	cmp	r0, #0
   305b0:	movne	r8, r6
   305b4:	mov	r0, r8
   305b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   305bc:	cmp	r9, #6
   305c0:	bne	306ec <__assert_fail@plt+0x1e824>
   305c4:	cmp	r6, #2
   305c8:	blt	306ec <__assert_fail@plt+0x1e824>
   305cc:	ldr	r7, [lr, r1, lsl #3]
   305d0:	ldr	r0, [r7, #32]
   305d4:	cmp	r0, #0
   305d8:	bne	305f4 <__assert_fail@plt+0x1e72c>
   305dc:	ldr	r1, [r7, #36]	; 0x24
   305e0:	cmp	r1, #0
   305e4:	bne	305f4 <__assert_fail@plt+0x1e72c>
   305e8:	ldr	r1, [r7, #20]
   305ec:	cmp	r1, #0
   305f0:	beq	30708 <__assert_fail@plt+0x1e840>
   305f4:	cmp	ip, #1
   305f8:	bne	30614 <__assert_fail@plt+0x1e74c>
   305fc:	ldr	r1, [r2, #4]
   30600:	ldrb	r5, [r1, r3]
   30604:	ldr	r1, [r7, #20]
   30608:	cmp	r1, #1
   3060c:	bge	30628 <__assert_fail@plt+0x1e760>
   30610:	b	30648 <__assert_fail@plt+0x1e780>
   30614:	ldr	r1, [r2, #8]
   30618:	ldr	r5, [r1, r3, lsl #2]
   3061c:	ldr	r1, [r7, #20]
   30620:	cmp	r1, #1
   30624:	blt	30648 <__assert_fail@plt+0x1e780>
   30628:	ldr	r2, [r7]
   3062c:	mov	r3, #0
   30630:	ldr	r4, [r2, r3, lsl #2]
   30634:	cmp	r5, r4
   30638:	beq	306c8 <__assert_fail@plt+0x1e800>
   3063c:	add	r3, r3, #1
   30640:	cmp	r3, r1
   30644:	blt	30630 <__assert_fail@plt+0x1e768>
   30648:	ldr	r1, [r7, #36]	; 0x24
   3064c:	cmp	r1, #1
   30650:	blt	30684 <__assert_fail@plt+0x1e7bc>
   30654:	mov	r4, #0
   30658:	ldr	r0, [r7, #12]
   3065c:	ldr	r1, [r0, r4, lsl #2]
   30660:	mov	r0, r5
   30664:	bl	11a30 <iswctype@plt>
   30668:	cmp	r0, #0
   3066c:	bne	306c8 <__assert_fail@plt+0x1e800>
   30670:	ldr	r0, [r7, #36]	; 0x24
   30674:	add	r4, r4, #1
   30678:	cmp	r4, r0
   3067c:	blt	30658 <__assert_fail@plt+0x1e790>
   30680:	ldr	r0, [r7, #32]
   30684:	cmp	r0, #1
   30688:	blt	306f4 <__assert_fail@plt+0x1e82c>
   3068c:	ldr	r1, [r7, #4]
   30690:	mov	r2, #0
   30694:	ldr	r3, [r1, r2, lsl #2]
   30698:	cmp	r3, r5
   3069c:	bls	306b8 <__assert_fail@plt+0x1e7f0>
   306a0:	add	r2, r2, #1
   306a4:	cmp	r2, r0
   306a8:	bge	306f4 <__assert_fail@plt+0x1e82c>
   306ac:	ldr	r3, [r1, r2, lsl #2]
   306b0:	cmp	r3, r5
   306b4:	bhi	306a0 <__assert_fail@plt+0x1e7d8>
   306b8:	ldr	r3, [r7, #8]
   306bc:	ldr	r3, [r3, r2, lsl #2]
   306c0:	cmp	r5, r3
   306c4:	bhi	306a0 <__assert_fail@plt+0x1e7d8>
   306c8:	mov	r0, r6
   306cc:	ldrb	r1, [r7, #16]
   306d0:	tst	r1, #1
   306d4:	beq	30704 <__assert_fail@plt+0x1e83c>
   306d8:	cmp	r0, #0
   306dc:	bgt	306ec <__assert_fail@plt+0x1e824>
   306e0:	cmp	r6, #1
   306e4:	movle	r6, #1
   306e8:	mov	r8, r6
   306ec:	mov	r0, r8
   306f0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   306f4:	mov	r0, #0
   306f8:	ldrb	r1, [r7, #16]
   306fc:	tst	r1, #1
   30700:	bne	306d8 <__assert_fail@plt+0x1e810>
   30704:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30708:	mov	r5, #0
   3070c:	ldr	r1, [r7, #20]
   30710:	cmp	r1, #1
   30714:	bge	30628 <__assert_fail@plt+0x1e760>
   30718:	b	30648 <__assert_fail@plt+0x1e780>
   3071c:	ldr	r0, [r2, #4]
   30720:	mov	r8, #0
   30724:	ldrb	r6, [r0, r3]
   30728:	cmp	r6, #194	; 0xc2
   3072c:	bcc	306ec <__assert_fail@plt+0x1e824>
   30730:	ldr	r2, [r2, #48]	; 0x30
   30734:	add	r1, r3, #2
   30738:	cmp	r1, r2
   3073c:	bgt	306ec <__assert_fail@plt+0x1e824>
   30740:	add	r1, r3, r0
   30744:	cmp	r6, #223	; 0xdf
   30748:	ldrb	r7, [r1, #1]
   3074c:	bhi	30774 <__assert_fail@plt+0x1e8ac>
   30750:	cmp	r7, #192	; 0xc0
   30754:	mov	r0, #0
   30758:	movwcc	r0, #1
   3075c:	lsl	r8, r0, #1
   30760:	sxtb	r0, r7
   30764:	cmn	r0, #1
   30768:	movwgt	r8, #0
   3076c:	mov	r0, r8
   30770:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30774:	cmp	r6, #239	; 0xef
   30778:	bhi	30794 <__assert_fail@plt+0x1e8cc>
   3077c:	mov	r0, #3
   30780:	cmp	r6, #224	; 0xe0
   30784:	bne	307f0 <__assert_fail@plt+0x1e928>
   30788:	cmp	r7, #160	; 0xa0
   3078c:	bcc	306ec <__assert_fail@plt+0x1e824>
   30790:	b	307f0 <__assert_fail@plt+0x1e928>
   30794:	cmp	r6, #247	; 0xf7
   30798:	bhi	307b4 <__assert_fail@plt+0x1e8ec>
   3079c:	mov	r0, #4
   307a0:	cmp	r6, #240	; 0xf0
   307a4:	bne	307f0 <__assert_fail@plt+0x1e928>
   307a8:	cmp	r7, #144	; 0x90
   307ac:	bcc	306ec <__assert_fail@plt+0x1e824>
   307b0:	b	307f0 <__assert_fail@plt+0x1e928>
   307b4:	cmp	r6, #251	; 0xfb
   307b8:	bhi	307d4 <__assert_fail@plt+0x1e90c>
   307bc:	mov	r0, #5
   307c0:	cmp	r6, #248	; 0xf8
   307c4:	bne	307f0 <__assert_fail@plt+0x1e928>
   307c8:	cmp	r7, #136	; 0x88
   307cc:	bcc	306ec <__assert_fail@plt+0x1e824>
   307d0:	b	307f0 <__assert_fail@plt+0x1e928>
   307d4:	cmp	r6, #253	; 0xfd
   307d8:	bhi	306ec <__assert_fail@plt+0x1e824>
   307dc:	mov	r0, #6
   307e0:	cmp	r6, #252	; 0xfc
   307e4:	bne	307f0 <__assert_fail@plt+0x1e928>
   307e8:	cmp	r7, #132	; 0x84
   307ec:	bcc	306ec <__assert_fail@plt+0x1e824>
   307f0:	add	r3, r0, r3
   307f4:	cmp	r3, r2
   307f8:	bgt	306ec <__assert_fail@plt+0x1e824>
   307fc:	ldrb	r2, [r1, #1]
   30800:	sxtb	r3, r2
   30804:	cmn	r3, #1
   30808:	bgt	306ec <__assert_fail@plt+0x1e824>
   3080c:	cmp	r2, #191	; 0xbf
   30810:	bhi	306ec <__assert_fail@plt+0x1e824>
   30814:	ldrb	r2, [r1, #2]
   30818:	sxtb	r3, r2
   3081c:	cmn	r3, #1
   30820:	bgt	306ec <__assert_fail@plt+0x1e824>
   30824:	cmp	r2, #191	; 0xbf
   30828:	bhi	306ec <__assert_fail@plt+0x1e824>
   3082c:	cmp	r0, #3
   30830:	beq	30704 <__assert_fail@plt+0x1e83c>
   30834:	ldrb	r2, [r1, #3]
   30838:	sxtb	r3, r2
   3083c:	cmn	r3, #1
   30840:	bgt	306ec <__assert_fail@plt+0x1e824>
   30844:	cmp	r2, #191	; 0xbf
   30848:	bhi	306ec <__assert_fail@plt+0x1e824>
   3084c:	cmp	r0, #4
   30850:	beq	30704 <__assert_fail@plt+0x1e83c>
   30854:	ldrb	r2, [r1, #4]
   30858:	sxtb	r3, r2
   3085c:	cmn	r3, #1
   30860:	bgt	306ec <__assert_fail@plt+0x1e824>
   30864:	cmp	r2, #191	; 0xbf
   30868:	bhi	306ec <__assert_fail@plt+0x1e824>
   3086c:	cmp	r0, #5
   30870:	beq	30704 <__assert_fail@plt+0x1e83c>
   30874:	ldrsb	r1, [r1, #5]
   30878:	uxtb	r2, r1
   3087c:	cmp	r2, #191	; 0xbf
   30880:	movwhi	r0, #0
   30884:	cmn	r1, #1
   30888:	movwgt	r0, #0
   3088c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30890:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   30894:	add	fp, sp, #24
   30898:	ldr	r4, [r1, #4]
   3089c:	mov	r6, r0
   308a0:	mvn	r0, #0
   308a4:	mov	r8, #0
   308a8:	uxtab	r3, r0, r4
   308ac:	cmp	r3, #6
   308b0:	bhi	30a5c <__assert_fail@plt+0x1eb94>
   308b4:	ldr	r0, [r6, #4]
   308b8:	mov	r9, r1
   308bc:	ldrb	r1, [r0, r2]
   308c0:	add	r7, pc, #4
   308c4:	sxtb	r0, r1
   308c8:	ldr	pc, [r7, r3, lsl #2]
   308cc:	andeq	r0, r3, r8, ror #17
   308d0:	andeq	r0, r3, ip, asr sl
   308d4:	strdeq	r0, [r3], -ip
   308d8:	andeq	r0, r3, ip, asr sl
   308dc:	andeq	r0, r3, r4, lsr #18
   308e0:	andeq	r0, r3, ip, asr sl
   308e4:	andeq	r0, r3, ip, lsl r9
   308e8:	ldrb	r3, [r9]
   308ec:	uxtb	r7, r0
   308f0:	cmp	r3, r7
   308f4:	beq	30944 <__assert_fail@plt+0x1ea7c>
   308f8:	b	30a5c <__assert_fail@plt+0x1eb94>
   308fc:	ldr	r3, [r9]
   30900:	ubfx	r7, r1, #5, #3
   30904:	mov	r5, #1
   30908:	ldr	r3, [r3, r7, lsl #2]
   3090c:	and	r7, r1, #31
   30910:	tst	r3, r5, lsl r7
   30914:	bne	30944 <__assert_fail@plt+0x1ea7c>
   30918:	b	30a5c <__assert_fail@plt+0x1eb94>
   3091c:	cmp	r0, #0
   30920:	bmi	30a5c <__assert_fail@plt+0x1eb94>
   30924:	cmp	r1, #0
   30928:	beq	309ec <__assert_fail@plt+0x1eb24>
   3092c:	cmp	r1, #10
   30930:	bne	30944 <__assert_fail@plt+0x1ea7c>
   30934:	ldr	r3, [r6, #84]	; 0x54
   30938:	ldrb	r3, [r3, #128]	; 0x80
   3093c:	tst	r3, #64	; 0x40
   30940:	beq	30a5c <__assert_fail@plt+0x1eb94>
   30944:	movw	r3, #65280	; 0xff00
   30948:	movt	r3, #3
   3094c:	tst	r4, r3
   30950:	beq	309b0 <__assert_fail@plt+0x1eae8>
   30954:	cmn	r2, #1
   30958:	ble	30990 <__assert_fail@plt+0x1eac8>
   3095c:	ldr	r3, [r6, #48]	; 0x30
   30960:	cmp	r3, r2
   30964:	beq	30a7c <__assert_fail@plt+0x1ebb4>
   30968:	ldr	r3, [r6, #80]	; 0x50
   3096c:	cmp	r3, #2
   30970:	blt	309bc <__assert_fail@plt+0x1eaf4>
   30974:	ldr	r0, [r6, #8]
   30978:	ldr	r7, [r0, r2, lsl #2]
   3097c:	cmn	r7, #1
   30980:	bne	30a00 <__assert_fail@plt+0x1eb38>
   30984:	sub	r2, r2, #1
   30988:	cmn	r2, #1
   3098c:	bne	30978 <__assert_fail@plt+0x1eab0>
   30990:	ldr	r1, [r6, #60]	; 0x3c
   30994:	and	r0, r1, #1
   30998:	tst	r4, #1024	; 0x400
   3099c:	eor	r2, r0, #1
   309a0:	beq	30a38 <__assert_fail@plt+0x1eb70>
   309a4:	cmp	r0, #0
   309a8:	beq	30a5c <__assert_fail@plt+0x1eb94>
   309ac:	b	30a38 <__assert_fail@plt+0x1eb70>
   309b0:	mov	r8, #1
   309b4:	mov	r0, r8
   309b8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   309bc:	ldr	r2, [r6, #68]	; 0x44
   309c0:	ubfx	r3, r1, #5, #3
   309c4:	and	r7, r1, #31
   309c8:	mov	r1, #1
   309cc:	ldr	r3, [r2, r3, lsl #2]
   309d0:	mov	r2, #0
   309d4:	tst	r3, r1, lsl r7
   309d8:	bne	30a38 <__assert_fail@plt+0x1eb70>
   309dc:	mov	r1, #0
   309e0:	cmp	r0, #10
   309e4:	beq	30a18 <__assert_fail@plt+0x1eb50>
   309e8:	b	30a28 <__assert_fail@plt+0x1eb60>
   309ec:	ldr	r3, [r6, #84]	; 0x54
   309f0:	ldrb	r3, [r3, #128]	; 0x80
   309f4:	tst	r3, #128	; 0x80
   309f8:	bne	30a5c <__assert_fail@plt+0x1eb94>
   309fc:	b	30944 <__assert_fail@plt+0x1ea7c>
   30a00:	ldrb	r0, [r6, #78]	; 0x4e
   30a04:	cmp	r0, #0
   30a08:	bne	30a9c <__assert_fail@plt+0x1ebd4>
   30a0c:	mov	r1, #0
   30a10:	cmp	r7, #10
   30a14:	bne	30a28 <__assert_fail@plt+0x1eb60>
   30a18:	ldrb	r0, [r6, #77]	; 0x4d
   30a1c:	cmp	r0, #0
   30a20:	movwne	r0, #1
   30a24:	lsl	r1, r0, #1
   30a28:	and	r0, r1, #1
   30a2c:	tst	r4, #1024	; 0x400
   30a30:	eor	r2, r0, #1
   30a34:	bne	309a4 <__assert_fail@plt+0x1eadc>
   30a38:	ldr	r0, [r9, #4]
   30a3c:	cmp	r2, #0
   30a40:	bne	30a4c <__assert_fail@plt+0x1eb84>
   30a44:	ands	r2, r0, #2048	; 0x800
   30a48:	bne	30a5c <__assert_fail@plt+0x1eb94>
   30a4c:	tst	r1, #2
   30a50:	bne	30a64 <__assert_fail@plt+0x1eb9c>
   30a54:	ands	r2, r0, #8192	; 0x2000
   30a58:	beq	30a64 <__assert_fail@plt+0x1eb9c>
   30a5c:	mov	r0, r8
   30a60:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30a64:	uxth	r0, r0
   30a68:	mov	r2, #1
   30a6c:	and	r1, r1, #8
   30a70:	eor	r0, r2, r0, lsr #15
   30a74:	orr	r0, r0, r1, lsr #3
   30a78:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   30a7c:	ldr	r0, [r6, #88]	; 0x58
   30a80:	and	r0, r0, #2
   30a84:	eor	r1, r0, #10
   30a88:	and	r0, r1, #1
   30a8c:	tst	r4, #1024	; 0x400
   30a90:	eor	r2, r0, #1
   30a94:	bne	309a4 <__assert_fail@plt+0x1eadc>
   30a98:	b	30a38 <__assert_fail@plt+0x1eb70>
   30a9c:	mov	r0, r7
   30aa0:	bl	11ce8 <iswalnum@plt>
   30aa4:	mov	r1, #1
   30aa8:	mov	r2, #0
   30aac:	cmp	r7, #95	; 0x5f
   30ab0:	beq	30a38 <__assert_fail@plt+0x1eb70>
   30ab4:	cmp	r0, #0
   30ab8:	beq	30a0c <__assert_fail@plt+0x1eb44>
   30abc:	b	30a38 <__assert_fail@plt+0x1eb70>
   30ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ac4:	add	fp, sp, #28
   30ac8:	sub	sp, sp, #4
   30acc:	vpush	{d8-d9}
   30ad0:	sub	sp, sp, #2272	; 0x8e0
   30ad4:	sub	sp, sp, #12288	; 0x3000
   30ad8:	sub	lr, fp, #1024	; 0x400
   30adc:	vmov.i32	q4, #0	; 0x00000000
   30ae0:	mov	r8, r0
   30ae4:	mov	r0, #0
   30ae8:	str	r1, [sp, #104]	; 0x68
   30aec:	sub	r3, lr, #56	; 0x38
   30af0:	str	r0, [r1, #44]	; 0x2c
   30af4:	str	r0, [r1, #48]	; 0x30
   30af8:	mov	r0, r3
   30afc:	vst1.64	{d8-d9}, [r0]!
   30b00:	vst1.64	{d8-d9}, [r0]
   30b04:	ldr	r0, [r1, #8]
   30b08:	cmp	r0, #0
   30b0c:	ble	32264 <__assert_fail@plt+0x2039c>
   30b10:	add	r0, sp, #168	; 0xa8
   30b14:	add	r2, r8, #96	; 0x60
   30b18:	mov	r1, #0
   30b1c:	str	r8, [sp, #96]	; 0x60
   30b20:	add	r0, r0, #28
   30b24:	str	r2, [sp]
   30b28:	str	r0, [sp, #12]
   30b2c:	add	r0, r2, #16
   30b30:	str	r0, [sp, #4]
   30b34:	add	r0, r3, #16
   30b38:	str	r0, [sp, #8]
   30b3c:	mov	r0, #0
   30b40:	str	r0, [sp, #164]	; 0xa4
   30b44:	b	30b74 <__assert_fail@plt+0x1ecac>
   30b48:	sub	lr, fp, #1024	; 0x400
   30b4c:	sub	r0, lr, #56	; 0x38
   30b50:	vst1.64	{d8-d9}, [r0]!
   30b54:	vst1.64	{d8-d9}, [r0]
   30b58:	ldr	r8, [sp, #96]	; 0x60
   30b5c:	ldr	r1, [sp, #100]	; 0x64
   30b60:	ldr	r0, [sp, #104]	; 0x68
   30b64:	add	r1, r1, #1
   30b68:	ldr	r0, [r0, #8]
   30b6c:	cmp	r1, r0
   30b70:	bge	318d8 <__assert_fail@plt+0x1fa10>
   30b74:	ldr	r0, [sp, #104]	; 0x68
   30b78:	ldr	r9, [r8]
   30b7c:	str	r1, [sp, #100]	; 0x64
   30b80:	ldr	r0, [r0, #12]
   30b84:	ldr	ip, [r0, r1, lsl #2]
   30b88:	add	r0, r9, ip, lsl #3
   30b8c:	ldr	r0, [r0, #4]
   30b90:	uxtb	r6, r0
   30b94:	cmp	r6, #1
   30b98:	bne	30c8c <__assert_fail@plt+0x1edc4>
   30b9c:	ldrb	r1, [r9, ip, lsl #3]
   30ba0:	sub	lr, fp, #1024	; 0x400
   30ba4:	mov	r5, #1
   30ba8:	sub	r3, lr, #56	; 0x38
   30bac:	add	lr, sp, #168	; 0xa8
   30bb0:	mov	r7, r3
   30bb4:	ubfx	r2, r1, #5, #3
   30bb8:	and	r1, r1, #31
   30bbc:	ldr	r3, [r3, r2, lsl #2]
   30bc0:	orr	r1, r3, r5, lsl r1
   30bc4:	str	r1, [r7, r2, lsl #2]
   30bc8:	movw	r1, #65280	; 0xff00
   30bcc:	ldr	r7, [sp, #12]
   30bd0:	movt	r1, #3
   30bd4:	ands	r1, r0, r1
   30bd8:	beq	30fd8 <__assert_fail@plt+0x1f110>
   30bdc:	tst	r0, #8192	; 0x2000
   30be0:	beq	30c0c <__assert_fail@plt+0x1ed44>
   30be4:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   30be8:	sub	r2, fp, #1024	; 0x400
   30bec:	sub	r2, r2, #56	; 0x38
   30bf0:	vst1.64	{d8-d9}, [r2]!
   30bf4:	vst1.64	{d8-d9}, [r2]
   30bf8:	tst	r1, #1024	; 0x400
   30bfc:	beq	30b58 <__assert_fail@plt+0x1ec90>
   30c00:	ldr	r7, [sp, #12]
   30c04:	mov	r1, #1024	; 0x400
   30c08:	str	r1, [fp, #-1080]	; 0xfffffbc8
   30c0c:	tst	r0, #32768	; 0x8000
   30c10:	bne	30b48 <__assert_fail@plt+0x1ec80>
   30c14:	tst	r0, #1024	; 0x400
   30c18:	bne	30d7c <__assert_fail@plt+0x1eeb4>
   30c1c:	tst	r0, #2048	; 0x800
   30c20:	beq	30fd8 <__assert_fail@plt+0x1f110>
   30c24:	tst	r0, #4194304	; 0x400000
   30c28:	beq	30c34 <__assert_fail@plt+0x1ed6c>
   30c2c:	cmp	r6, #1
   30c30:	beq	30b48 <__assert_fail@plt+0x1ec80>
   30c34:	ldr	r1, [sp, #96]	; 0x60
   30c38:	ldr	r0, [r1, #92]	; 0x5c
   30c3c:	cmp	r0, #1
   30c40:	ble	30f60 <__assert_fail@plt+0x1f098>
   30c44:	ldr	r0, [r1, #60]	; 0x3c
   30c48:	ldr	r1, [sp]
   30c4c:	vld1.32	{d16-d17}, [r1]
   30c50:	vld1.32	{d18-d19}, [r0]!
   30c54:	sub	r1, fp, #1024	; 0x400
   30c58:	sub	r1, r1, #56	; 0x38
   30c5c:	vld1.64	{d20-d21}, [r1]
   30c60:	vand	q8, q9, q8
   30c64:	vbic	q9, q10, q8
   30c68:	vst1.64	{d18-d19}, [r1]
   30c6c:	ldr	r1, [sp, #4]
   30c70:	vld1.32	{d20-d21}, [r0]
   30c74:	ldr	r0, [sp, #8]
   30c78:	vld1.32	{d16-d17}, [r1]
   30c7c:	vld1.32	{d22-d23}, [r0]
   30c80:	vand	q8, q10, q8
   30c84:	vbic	q8, q11, q8
   30c88:	b	30f90 <__assert_fail@plt+0x1f0c8>
   30c8c:	cmp	r6, #7
   30c90:	add	lr, sp, #168	; 0xa8
   30c94:	beq	30cdc <__assert_fail@plt+0x1ee14>
   30c98:	cmp	r6, #5
   30c9c:	beq	30d2c <__assert_fail@plt+0x1ee64>
   30ca0:	cmp	r6, #3
   30ca4:	bne	30d74 <__assert_fail@plt+0x1eeac>
   30ca8:	ldr	r1, [r9, ip, lsl #3]
   30cac:	sub	r2, fp, #1024	; 0x400
   30cb0:	sub	r2, r2, #56	; 0x38
   30cb4:	vld1.64	{d16-d17}, [r2]
   30cb8:	vld1.32	{d18-d19}, [r1]!
   30cbc:	vorr	q8, q8, q9
   30cc0:	vst1.64	{d16-d17}, [r2]
   30cc4:	vld1.32	{d16-d17}, [r1]
   30cc8:	ldr	r1, [sp, #8]
   30ccc:	vld1.32	{d18-d19}, [r1]
   30cd0:	vorr	q8, q9, q8
   30cd4:	vst1.32	{d16-d17}, [r1]
   30cd8:	b	30bc8 <__assert_fail@plt+0x1ed00>
   30cdc:	mvn	r1, #0
   30ce0:	str	r1, [fp, #-1068]	; 0xfffffbd4
   30ce4:	str	r1, [fp, #-1072]	; 0xfffffbd0
   30ce8:	str	r1, [fp, #-1076]	; 0xfffffbcc
   30cec:	str	r1, [fp, #-1080]	; 0xfffffbc8
   30cf0:	ldr	r1, [sp, #96]	; 0x60
   30cf4:	ldr	r2, [r1, #128]	; 0x80
   30cf8:	and	r1, r2, #128	; 0x80
   30cfc:	ands	r2, r2, #64	; 0x40
   30d00:	beq	30d0c <__assert_fail@plt+0x1ee44>
   30d04:	cmp	r1, #0
   30d08:	beq	30bc8 <__assert_fail@plt+0x1ed00>
   30d0c:	cmp	r2, #0
   30d10:	mvn	r2, #1
   30d14:	movweq	r2, #64510	; 0xfbfe
   30d18:	movteq	r2, #65535	; 0xffff
   30d1c:	cmp	r1, #0
   30d20:	mvneq	r2, #1024	; 0x400
   30d24:	str	r2, [fp, #-1080]	; 0xfffffbc8
   30d28:	b	30bc8 <__assert_fail@plt+0x1ed00>
   30d2c:	ldr	r3, [sp, #96]	; 0x60
   30d30:	ldr	r1, [r3, #92]	; 0x5c
   30d34:	cmp	r1, #2
   30d38:	blt	30e34 <__assert_fail@plt+0x1ef6c>
   30d3c:	ldr	r1, [r3, #60]	; 0x3c
   30d40:	sub	r2, fp, #1024	; 0x400
   30d44:	sub	r2, r2, #56	; 0x38
   30d48:	vld1.64	{d16-d17}, [r2]
   30d4c:	vld1.32	{d18-d19}, [r1]!
   30d50:	vorr	q8, q8, q9
   30d54:	vst1.64	{d16-d17}, [r2]
   30d58:	vld1.32	{d18-d19}, [r1]
   30d5c:	ldr	r1, [sp, #8]
   30d60:	vld1.32	{d20-d21}, [r1]
   30d64:	vorr	q9, q10, q9
   30d68:	vst1.32	{d18-d19}, [r1]
   30d6c:	vmov.32	r1, d16[0]
   30d70:	b	30e58 <__assert_fail@plt+0x1ef90>
   30d74:	ldr	r8, [sp, #96]	; 0x60
   30d78:	b	30b60 <__assert_fail@plt+0x1ec98>
   30d7c:	movw	r1, #255	; 0xff
   30d80:	movt	r1, #64	; 0x40
   30d84:	and	r1, r0, r1
   30d88:	cmp	r1, #1
   30d8c:	beq	30b48 <__assert_fail@plt+0x1ec80>
   30d90:	ldr	r7, [sp, #96]	; 0x60
   30d94:	ldr	r1, [r7, #92]	; 0x5c
   30d98:	cmp	r1, #1
   30d9c:	ble	30e84 <__assert_fail@plt+0x1efbc>
   30da0:	ldr	r1, [r7, #60]	; 0x3c
   30da4:	ldr	r2, [sp]
   30da8:	vld1.32	{d16-d17}, [r2]
   30dac:	vld1.32	{d18-d19}, [r1]!
   30db0:	sub	r2, fp, #1024	; 0x400
   30db4:	sub	r2, r2, #56	; 0x38
   30db8:	vld1.64	{d20-d21}, [r2]
   30dbc:	vorn	q8, q8, q9
   30dc0:	vand	q8, q10, q8
   30dc4:	vst1.64	{d16-d17}, [r2]
   30dc8:	vmov.32	r2, d16[1]
   30dcc:	vld1.32	{d18-d19}, [r1]
   30dd0:	ldr	r1, [sp, #4]
   30dd4:	vld1.32	{d20-d21}, [r1]
   30dd8:	ldr	r1, [sp, #8]
   30ddc:	vld1.32	{d22-d23}, [r1]
   30de0:	vorn	q9, q10, q9
   30de4:	vand	q9, q11, q9
   30de8:	vst1.32	{d18-d19}, [r1]
   30dec:	vmov.32	r1, d16[0]
   30df0:	orr	r1, r2, r1
   30df4:	vmov.32	r2, d17[0]
   30df8:	orr	r1, r1, r2
   30dfc:	vmov.32	r2, d17[1]
   30e00:	orr	r1, r1, r2
   30e04:	vmov.32	r2, d18[0]
   30e08:	orr	r1, r1, r2
   30e0c:	vmov.32	r2, d18[1]
   30e10:	orr	r1, r1, r2
   30e14:	vmov.32	r2, d19[0]
   30e18:	orr	r1, r1, r2
   30e1c:	vmov.32	r2, d19[1]
   30e20:	orr	r1, r1, r2
   30e24:	ldr	r7, [sp, #12]
   30e28:	cmp	r1, #0
   30e2c:	bne	30c1c <__assert_fail@plt+0x1ed54>
   30e30:	b	30b58 <__assert_fail@plt+0x1ec90>
   30e34:	mvn	r1, #0
   30e38:	str	r1, [fp, #-1052]	; 0xfffffbe4
   30e3c:	str	r1, [fp, #-1056]	; 0xfffffbe0
   30e40:	str	r1, [fp, #-1060]	; 0xfffffbdc
   30e44:	str	r1, [fp, #-1064]	; 0xfffffbd8
   30e48:	str	r1, [fp, #-1068]	; 0xfffffbd4
   30e4c:	str	r1, [fp, #-1072]	; 0xfffffbd0
   30e50:	str	r1, [fp, #-1076]	; 0xfffffbcc
   30e54:	str	r1, [fp, #-1080]	; 0xfffffbc8
   30e58:	ldr	r2, [r3, #128]	; 0x80
   30e5c:	ands	r3, r2, #64	; 0x40
   30e60:	and	r2, r2, #128	; 0x80
   30e64:	biceq	r1, r1, #1024	; 0x400
   30e68:	beq	30e74 <__assert_fail@plt+0x1efac>
   30e6c:	cmp	r2, #0
   30e70:	beq	30bc8 <__assert_fail@plt+0x1ed00>
   30e74:	cmp	r2, #0
   30e78:	bicne	r1, r1, #1
   30e7c:	str	r1, [fp, #-1080]	; 0xfffffbc8
   30e80:	b	30bc8 <__assert_fail@plt+0x1ed00>
   30e84:	ldr	r1, [r7, #112]	; 0x70
   30e88:	add	sl, r7, #96	; 0x60
   30e8c:	ldr	r4, [fp, #-1080]	; 0xfffffbc8
   30e90:	ldr	r5, [fp, #-1076]	; 0xfffffbcc
   30e94:	ldm	sl, {r2, r3, r8, sl}
   30e98:	str	ip, [sp, #28]
   30e9c:	str	r9, [sp, #24]
   30ea0:	ldr	r9, [sp, #24]
   30ea4:	str	r1, [sp, #148]	; 0x94
   30ea8:	ldr	r1, [r7, #116]	; 0x74
   30eac:	and	ip, r5, r3
   30eb0:	and	lr, r4, r2
   30eb4:	ldr	r2, [sp, #148]	; 0x94
   30eb8:	str	r1, [sp, #152]	; 0x98
   30ebc:	ldr	r1, [r7, #120]	; 0x78
   30ec0:	str	r1, [sp, #156]	; 0x9c
   30ec4:	ldr	r1, [r7, #124]	; 0x7c
   30ec8:	ldr	r7, [fp, #-1072]	; 0xfffffbd0
   30ecc:	ldr	r3, [sp, #156]	; 0x9c
   30ed0:	str	r1, [sp, #160]	; 0xa0
   30ed4:	ldr	r1, [fp, #-1068]	; 0xfffffbd4
   30ed8:	and	r8, r7, r8
   30edc:	str	lr, [fp, #-1080]	; 0xfffffbc8
   30ee0:	str	ip, [fp, #-1076]	; 0xfffffbcc
   30ee4:	str	r8, [fp, #-1072]	; 0xfffffbd0
   30ee8:	ldr	r7, [sp, #160]	; 0xa0
   30eec:	and	r1, r1, sl
   30ef0:	add	sl, sp, #168	; 0xa8
   30ef4:	str	r1, [fp, #-1068]	; 0xfffffbd4
   30ef8:	ldr	r5, [fp, #-1064]	; 0xfffffbd8
   30efc:	and	r5, r5, r2
   30f00:	ldr	r2, [sp, #152]	; 0x98
   30f04:	str	r5, [fp, #-1064]	; 0xfffffbd8
   30f08:	ldr	r4, [fp, #-1060]	; 0xfffffbdc
   30f0c:	and	r4, r4, r2
   30f10:	str	r4, [fp, #-1060]	; 0xfffffbdc
   30f14:	ldr	r2, [fp, #-1056]	; 0xfffffbe0
   30f18:	and	r2, r2, r3
   30f1c:	str	r2, [fp, #-1056]	; 0xfffffbe0
   30f20:	ldr	r3, [fp, #-1052]	; 0xfffffbe4
   30f24:	and	r3, r3, r7
   30f28:	orr	r7, ip, lr
   30f2c:	ldr	ip, [sp, #28]
   30f30:	mov	lr, sl
   30f34:	orr	r7, r7, r8
   30f38:	str	r3, [fp, #-1052]	; 0xfffffbe4
   30f3c:	orr	r1, r7, r1
   30f40:	orr	r1, r1, r5
   30f44:	orr	r1, r1, r4
   30f48:	orr	r1, r1, r2
   30f4c:	orr	r1, r1, r3
   30f50:	ldr	r7, [sp, #12]
   30f54:	cmp	r1, #0
   30f58:	bne	30c1c <__assert_fail@plt+0x1ed54>
   30f5c:	b	30b58 <__assert_fail@plt+0x1ec90>
   30f60:	ldr	r0, [sp]
   30f64:	vld1.32	{d16-d17}, [r0]
   30f68:	sub	r0, fp, #1024	; 0x400
   30f6c:	sub	r0, r0, #56	; 0x38
   30f70:	vld1.64	{d18-d19}, [r0]
   30f74:	vbic	q9, q9, q8
   30f78:	vst1.64	{d18-d19}, [r0]
   30f7c:	ldr	r0, [sp, #4]
   30f80:	vld1.32	{d16-d17}, [r0]
   30f84:	ldr	r0, [sp, #8]
   30f88:	vld1.32	{d20-d21}, [r0]
   30f8c:	vbic	q8, q10, q8
   30f90:	vst1.32	{d16-d17}, [r0]
   30f94:	vmov.32	r0, d18[0]
   30f98:	vmov.32	r1, d18[1]
   30f9c:	ldr	r7, [sp, #12]
   30fa0:	orr	r0, r1, r0
   30fa4:	vmov.32	r1, d19[0]
   30fa8:	orr	r0, r0, r1
   30fac:	vmov.32	r1, d19[1]
   30fb0:	orr	r0, r0, r1
   30fb4:	vmov.32	r1, d16[0]
   30fb8:	orr	r0, r0, r1
   30fbc:	vmov.32	r1, d16[1]
   30fc0:	orr	r0, r0, r1
   30fc4:	vmov.32	r1, d17[0]
   30fc8:	orr	r0, r0, r1
   30fcc:	vmov.32	r1, d17[1]
   30fd0:	orrs	r0, r0, r1
   30fd4:	beq	30b58 <__assert_fail@plt+0x1ec90>
   30fd8:	ldr	r0, [sp, #164]	; 0xa4
   30fdc:	cmp	r0, #1
   30fe0:	blt	3144c <__assert_fail@plt+0x1f584>
   30fe4:	ldr	r0, [fp, #-1060]	; 0xfffffbdc
   30fe8:	ldr	r2, [fp, #-1052]	; 0xfffffbe4
   30fec:	ldr	r3, [fp, #-1056]	; 0xfffffbe0
   30ff0:	ldr	r1, [fp, #-1080]	; 0xfffffbc8
   30ff4:	cmp	r6, #1
   30ff8:	mov	r4, #0
   30ffc:	str	r0, [sp, #140]	; 0x8c
   31000:	ldr	r0, [fp, #-1064]	; 0xfffffbd8
   31004:	str	r1, [sp, #120]	; 0x78
   31008:	str	r2, [sp, #144]	; 0x90
   3100c:	str	r3, [sp, #152]	; 0x98
   31010:	str	r0, [sp, #160]	; 0xa0
   31014:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   31018:	str	r0, [sp, #156]	; 0x9c
   3101c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   31020:	str	r0, [sp, #132]	; 0x84
   31024:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   31028:	str	r0, [sp, #148]	; 0x94
   3102c:	bne	31468 <__assert_fail@plt+0x1f5a0>
   31030:	ldr	r3, [sp, #148]	; 0x94
   31034:	sub	r0, fp, #6144	; 0x1800
   31038:	str	r7, [sp, #128]	; 0x80
   3103c:	str	ip, [sp, #28]
   31040:	str	r9, [sp, #24]
   31044:	sub	r6, r0, #104	; 0x68
   31048:	str	r6, [sp, #124]	; 0x7c
   3104c:	b	31080 <__assert_fail@plt+0x1f1b8>
   31050:	mov	r8, ip
   31054:	ldr	r0, [sp, #128]	; 0x80
   31058:	add	r4, r4, #1
   3105c:	mov	ip, r8
   31060:	add	r0, r0, #32
   31064:	str	r0, [sp, #128]	; 0x80
   31068:	ldr	r0, [sp, #124]	; 0x7c
   3106c:	add	r0, r0, #12
   31070:	str	r0, [sp, #124]	; 0x7c
   31074:	ldr	r0, [sp, #164]	; 0xa4
   31078:	cmp	r4, r0
   3107c:	bge	31414 <__assert_fail@plt+0x1f54c>
   31080:	ldrb	r0, [r9, ip, lsl #3]
   31084:	mov	r2, #1
   31088:	ubfx	r1, r0, #5, #3
   3108c:	and	r0, r0, #31
   31090:	add	r1, lr, r1, lsl #2
   31094:	ldr	r1, [r1, r4, lsl #5]
   31098:	tst	r1, r2, lsl r0
   3109c:	beq	31050 <__assert_fail@plt+0x1f188>
   310a0:	add	r9, lr, r4, lsl #5
   310a4:	ldr	r2, [sp, #132]	; 0x84
   310a8:	str	r4, [sp, #136]	; 0x88
   310ac:	ldr	r4, [sp, #120]	; 0x78
   310b0:	ldr	sl, [sp, #156]	; 0x9c
   310b4:	str	r3, [sp, #148]	; 0x94
   310b8:	ldr	ip, [sp, #152]	; 0x98
   310bc:	ldr	r0, [r9, #8]
   310c0:	ldr	r6, [r9, #4]
   310c4:	ldr	r7, [r9, #12]
   310c8:	ldr	r5, [r9, #16]
   310cc:	and	r1, r0, r2
   310d0:	str	r0, [sp, #88]	; 0x58
   310d4:	ldr	r0, [sp, #128]	; 0x80
   310d8:	str	r6, [sp, #108]	; 0x6c
   310dc:	and	r6, r6, sl
   310e0:	str	r7, [sp, #112]	; 0x70
   310e4:	str	r5, [sp, #92]	; 0x5c
   310e8:	str	r1, [sp, #84]	; 0x54
   310ec:	str	r6, [sp, #76]	; 0x4c
   310f0:	ldr	lr, [r0, #-28]	; 0xffffffe4
   310f4:	ldr	r8, [r0]
   310f8:	and	r0, lr, r4
   310fc:	str	r8, [sp, #116]	; 0x74
   31100:	str	r0, [sp, #80]	; 0x50
   31104:	orr	r0, r6, r0
   31108:	orr	r0, r0, r1
   3110c:	and	r1, r7, r3
   31110:	ldr	r7, [sp, #160]	; 0xa0
   31114:	ldr	r3, [sp, #140]	; 0x8c
   31118:	str	r1, [sp, #72]	; 0x48
   3111c:	orr	r0, r0, r1
   31120:	and	r1, r5, r7
   31124:	str	r1, [sp, #68]	; 0x44
   31128:	orr	r0, r0, r1
   3112c:	ldr	r1, [r9, #20]
   31130:	and	r6, r1, r3
   31134:	ldr	r3, [r9, #24]
   31138:	str	r6, [sp, #64]	; 0x40
   3113c:	orr	r0, r0, r6
   31140:	ldr	r6, [sp, #144]	; 0x90
   31144:	and	r5, r3, ip
   31148:	orr	r0, r0, r5
   3114c:	and	r6, r8, r6
   31150:	orrs	r0, r0, r6
   31154:	beq	31300 <__assert_fail@plt+0x1f438>
   31158:	bic	r0, r4, lr
   3115c:	ldr	ip, [sp, #88]	; 0x58
   31160:	str	r5, [sp, #20]
   31164:	ldr	r5, [sp, #148]	; 0x94
   31168:	str	r6, [sp, #16]
   3116c:	ldr	r6, [sp, #92]	; 0x5c
   31170:	ldr	r8, [sp, #140]	; 0x8c
   31174:	bic	lr, lr, r4
   31178:	ldr	r4, [sp, #148]	; 0x94
   3117c:	str	r0, [sp, #60]	; 0x3c
   31180:	ldr	r0, [sp, #108]	; 0x6c
   31184:	bic	r0, sl, r0
   31188:	str	r0, [sp, #56]	; 0x38
   3118c:	bic	r0, r2, ip
   31190:	bic	r2, ip, r2
   31194:	str	r0, [sp, #52]	; 0x34
   31198:	ldr	r0, [sp, #112]	; 0x70
   3119c:	str	r2, [sp, #156]	; 0x9c
   311a0:	bic	r0, r5, r0
   311a4:	ldr	r5, [sp, #144]	; 0x90
   311a8:	str	r0, [sp, #48]	; 0x30
   311ac:	bic	r0, r7, r6
   311b0:	str	r0, [sp, #44]	; 0x2c
   311b4:	bic	r0, r8, r1
   311b8:	bic	r1, r1, r8
   311bc:	str	r0, [sp, #40]	; 0x28
   311c0:	ldr	r0, [sp, #152]	; 0x98
   311c4:	bic	r0, r0, r3
   311c8:	str	r0, [sp, #36]	; 0x24
   311cc:	ldr	r0, [sp, #116]	; 0x74
   311d0:	bic	r0, r5, r0
   311d4:	str	r0, [sp, #32]
   311d8:	ldr	r0, [sp, #108]	; 0x6c
   311dc:	bic	sl, r0, sl
   311e0:	orr	r0, sl, lr
   311e4:	orr	r0, r0, r2
   311e8:	ldr	r2, [sp, #112]	; 0x70
   311ec:	bic	ip, r2, r4
   311f0:	ldr	r4, [sp, #152]	; 0x98
   311f4:	bic	r2, r6, r7
   311f8:	orr	r0, r0, ip
   311fc:	orr	r0, r0, r2
   31200:	orr	r0, r0, r1
   31204:	bic	r3, r3, r4
   31208:	orr	r4, r0, r3
   3120c:	ldr	r0, [sp, #116]	; 0x74
   31210:	bic	r0, r0, r5
   31214:	orrs	r4, r4, r0
   31218:	beq	31318 <__assert_fail@plt+0x1f450>
   3121c:	ldr	r5, [sp, #164]	; 0xa4
   31220:	ldr	r7, [sp, #156]	; 0x9c
   31224:	mov	r6, sl
   31228:	add	sl, sp, #168	; 0xa8
   3122c:	add	r4, sl, r5, lsl #5
   31230:	str	lr, [sl, r5, lsl #5]
   31234:	sub	lr, fp, #6144	; 0x1800
   31238:	str	r5, [sp, #164]	; 0xa4
   3123c:	str	r6, [r4, #4]
   31240:	str	r7, [r4, #8]
   31244:	str	ip, [r4, #12]
   31248:	str	r2, [r4, #16]
   3124c:	str	r1, [r4, #20]
   31250:	str	r3, [r4, #24]
   31254:	str	r0, [r4, #28]
   31258:	ldr	r0, [sp, #128]	; 0x80
   3125c:	ldr	r1, [sp, #80]	; 0x50
   31260:	ldr	r6, [sp, #124]	; 0x7c
   31264:	mov	ip, r5
   31268:	str	r1, [r0, #-28]	; 0xffffffe4
   3126c:	ldr	r1, [sp, #76]	; 0x4c
   31270:	str	r1, [r9, #4]
   31274:	ldr	r1, [sp, #84]	; 0x54
   31278:	str	r1, [r9, #8]
   3127c:	ldr	r1, [sp, #72]	; 0x48
   31280:	str	r1, [r9, #12]
   31284:	ldr	r1, [sp, #68]	; 0x44
   31288:	str	r1, [r9, #16]
   3128c:	ldr	r1, [sp, #64]	; 0x40
   31290:	str	r1, [r9, #20]
   31294:	ldr	r1, [sp, #20]
   31298:	str	r1, [r9, #24]
   3129c:	ldr	r1, [sp, #16]
   312a0:	str	r1, [r0]
   312a4:	add	r0, r5, r5, lsl #1
   312a8:	sub	r1, lr, #104	; 0x68
   312ac:	add	r5, r1, r0, lsl #2
   312b0:	ldr	r0, [r6, #4]
   312b4:	mov	r4, r5
   312b8:	str	r0, [r4, #4]!
   312bc:	ldr	r8, [r6, #4]
   312c0:	cmp	r8, #0
   312c4:	ble	3133c <__assert_fail@plt+0x1f474>
   312c8:	str	r0, [r5]
   312cc:	lsl	r0, r0, #2
   312d0:	bl	38450 <__assert_fail@plt+0x26588>
   312d4:	ldr	r9, [sp, #44]	; 0x2c
   312d8:	ldr	r7, [sp, #40]	; 0x28
   312dc:	ldr	sl, [sp, #32]
   312e0:	cmp	r0, #0
   312e4:	str	r0, [r5, #8]
   312e8:	beq	321a8 <__assert_fail@plt+0x202e0>
   312ec:	ldr	r1, [r6, #8]
   312f0:	lsl	r2, r8, #2
   312f4:	bl	11ab4 <memcpy@plt>
   312f8:	ldr	r4, [sp, #136]	; 0x88
   312fc:	b	3135c <__assert_fail@plt+0x1f494>
   31300:	ldr	r4, [sp, #136]	; 0x88
   31304:	ldr	r8, [sp, #28]
   31308:	ldr	r9, [sp, #24]
   3130c:	ldr	r3, [sp, #148]	; 0x94
   31310:	add	lr, sp, #168	; 0xa8
   31314:	b	31054 <__assert_fail@plt+0x1f18c>
   31318:	add	sl, sp, #168	; 0xa8
   3131c:	ldr	r4, [sp, #136]	; 0x88
   31320:	ldr	r6, [sp, #124]	; 0x7c
   31324:	ldr	r5, [sp, #48]	; 0x30
   31328:	ldr	r9, [sp, #44]	; 0x2c
   3132c:	ldr	r7, [sp, #40]	; 0x28
   31330:	mov	r8, sl
   31334:	ldr	sl, [sp, #32]
   31338:	b	31370 <__assert_fail@plt+0x1f4a8>
   3133c:	mov	r0, #0
   31340:	ldr	r4, [sp, #136]	; 0x88
   31344:	ldr	r9, [sp, #44]	; 0x2c
   31348:	ldr	r7, [sp, #40]	; 0x28
   3134c:	ldr	sl, [sp, #32]
   31350:	str	r0, [r5]
   31354:	str	r0, [r5, #4]
   31358:	str	r0, [r5, #8]
   3135c:	ldr	r5, [sp, #48]	; 0x30
   31360:	ldr	r0, [sp, #164]	; 0xa4
   31364:	add	r8, sp, #168	; 0xa8
   31368:	add	r0, r0, #1
   3136c:	str	r0, [sp, #164]	; 0xa4
   31370:	ldr	r0, [sp, #104]	; 0x68
   31374:	ldr	r1, [sp, #100]	; 0x64
   31378:	ldr	r0, [r0, #12]
   3137c:	ldr	r1, [r0, r1, lsl #2]
   31380:	mov	r0, r6
   31384:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   31388:	cmp	r0, #0
   3138c:	beq	3212c <__assert_fail@plt+0x20264>
   31390:	ldr	r1, [sp, #60]	; 0x3c
   31394:	ldr	r2, [sp, #56]	; 0x38
   31398:	ldr	r3, [sp, #52]	; 0x34
   3139c:	ldr	ip, [sp, #36]	; 0x24
   313a0:	mov	lr, r8
   313a4:	mov	r6, r9
   313a8:	str	r9, [sp, #160]	; 0xa0
   313ac:	ldr	r8, [sp, #28]
   313b0:	str	sl, [sp, #144]	; 0x90
   313b4:	str	r7, [sp, #140]	; 0x8c
   313b8:	orr	r0, r2, r1
   313bc:	str	ip, [sp, #152]	; 0x98
   313c0:	str	r2, [sp, #156]	; 0x9c
   313c4:	str	r1, [sp, #120]	; 0x78
   313c8:	orr	r0, r0, r3
   313cc:	orr	r0, r0, r5
   313d0:	orr	r0, r0, r9
   313d4:	ldr	r9, [sp, #24]
   313d8:	orr	r0, r0, r7
   313dc:	orr	r0, r0, ip
   313e0:	orrs	r0, r0, sl
   313e4:	mov	r0, r3
   313e8:	mov	r3, r5
   313ec:	str	r0, [sp, #132]	; 0x84
   313f0:	bne	31054 <__assert_fail@plt+0x1f18c>
   313f4:	str	sl, [sp, #144]	; 0x90
   313f8:	str	ip, [sp, #152]	; 0x98
   313fc:	str	r7, [sp, #140]	; 0x8c
   31400:	str	r6, [sp, #160]	; 0xa0
   31404:	mov	r3, r5
   31408:	str	r0, [sp, #132]	; 0x84
   3140c:	str	r2, [sp, #156]	; 0x9c
   31410:	str	r1, [sp, #120]	; 0x78
   31414:	ldr	r0, [sp, #144]	; 0x90
   31418:	ldr	r8, [sp, #96]	; 0x60
   3141c:	str	r0, [fp, #-1052]	; 0xfffffbe4
   31420:	ldr	r0, [sp, #152]	; 0x98
   31424:	str	r0, [fp, #-1056]	; 0xfffffbe0
   31428:	ldr	r0, [sp, #140]	; 0x8c
   3142c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   31430:	ldr	r0, [sp, #160]	; 0xa0
   31434:	str	r0, [fp, #-1064]	; 0xfffffbd8
   31438:	ldr	r0, [sp, #132]	; 0x84
   3143c:	str	r3, [fp, #-1068]	; 0xfffffbd4
   31440:	str	r0, [fp, #-1072]	; 0xfffffbd0
   31444:	ldr	r0, [sp, #156]	; 0x9c
   31448:	b	31838 <__assert_fail@plt+0x1f970>
   3144c:	ldr	r8, [sp, #96]	; 0x60
   31450:	mov	r4, #0
   31454:	ldr	r0, [sp, #164]	; 0xa4
   31458:	ldr	r1, [sp, #100]	; 0x64
   3145c:	cmp	r4, r0
   31460:	bne	30b60 <__assert_fail@plt+0x1ec98>
   31464:	b	31854 <__assert_fail@plt+0x1f98c>
   31468:	ldr	r0, [fp, #-1076]	; 0xfffffbcc
   3146c:	sub	lr, fp, #6144	; 0x1800
   31470:	ldr	ip, [sp, #164]	; 0xa4
   31474:	ldr	sl, [sp, #132]	; 0x84
   31478:	str	r0, [sp, #48]	; 0x30
   3147c:	ldr	r0, [fp, #-1072]	; 0xfffffbd0
   31480:	str	r0, [sp, #44]	; 0x2c
   31484:	ldr	r0, [fp, #-1068]	; 0xfffffbd4
   31488:	str	r0, [sp, #40]	; 0x28
   3148c:	sub	r0, lr, #104	; 0x68
   31490:	mov	lr, r1
   31494:	str	r0, [sp, #128]	; 0x80
   31498:	ldr	r0, [sp, #156]	; 0x9c
   3149c:	b	314d8 <__assert_fail@plt+0x1f610>
   314a0:	ldr	r4, [sp, #136]	; 0x88
   314a4:	ldr	ip, [sp, #164]	; 0xa4
   314a8:	ldr	r8, [sp, #96]	; 0x60
   314ac:	ldr	r0, [sp, #156]	; 0x9c
   314b0:	ldr	sl, [sp, #132]	; 0x84
   314b4:	ldr	lr, [sp, #124]	; 0x7c
   314b8:	ldr	r7, [sp, #116]	; 0x74
   314bc:	ldr	r1, [sp, #128]	; 0x80
   314c0:	add	r4, r4, #1
   314c4:	cmp	r4, ip
   314c8:	add	r7, r7, #32
   314cc:	add	r1, r1, #12
   314d0:	str	r1, [sp, #128]	; 0x80
   314d4:	bge	31800 <__assert_fail@plt+0x1f938>
   314d8:	add	r1, sp, #168	; 0xa8
   314dc:	str	r4, [sp, #136]	; 0x88
   314e0:	str	lr, [sp, #124]	; 0x7c
   314e4:	str	ip, [sp, #164]	; 0xa4
   314e8:	ldr	ip, [sp, #160]	; 0xa0
   314ec:	str	sl, [sp, #132]	; 0x84
   314f0:	str	r7, [sp, #116]	; 0x74
   314f4:	ldr	r3, [r7]
   314f8:	str	r0, [sp, #156]	; 0x9c
   314fc:	add	r8, r1, r4, lsl #5
   31500:	ldr	r4, [r7, #-28]	; 0xffffffe4
   31504:	ldr	r7, [sp, #140]	; 0x8c
   31508:	ldr	r5, [r8, #4]
   3150c:	ldr	r1, [r8, #8]
   31510:	ldr	r2, [r8, #12]
   31514:	ldr	r9, [r8, #16]
   31518:	str	r4, [sp, #108]	; 0x6c
   3151c:	and	r4, r4, lr
   31520:	ldr	lr, [sp, #148]	; 0x94
   31524:	str	r4, [sp, #72]	; 0x48
   31528:	and	r6, r5, r0
   3152c:	str	r1, [sp, #80]	; 0x50
   31530:	and	r1, r1, sl
   31534:	ldr	sl, [r8, #20]
   31538:	str	r9, [sp, #84]	; 0x54
   3153c:	str	r5, [sp, #112]	; 0x70
   31540:	str	r2, [sp, #88]	; 0x58
   31544:	orr	r0, r6, r4
   31548:	str	r1, [sp, #76]	; 0x4c
   3154c:	str	r6, [sp, #68]	; 0x44
   31550:	ldr	r6, [sp, #152]	; 0x98
   31554:	orr	r0, r0, r1
   31558:	and	r1, r2, lr
   3155c:	str	r1, [sp, #64]	; 0x40
   31560:	orr	r0, r0, r1
   31564:	and	r1, r9, ip
   31568:	ldr	r9, [sp, #144]	; 0x90
   3156c:	and	r4, sl, r7
   31570:	orr	r0, r0, r1
   31574:	str	r1, [sp, #60]	; 0x3c
   31578:	str	r4, [sp, #56]	; 0x38
   3157c:	orr	r0, r0, r4
   31580:	ldr	r4, [r8, #24]
   31584:	and	r5, r4, r6
   31588:	str	r5, [sp, #52]	; 0x34
   3158c:	orr	r0, r0, r5
   31590:	and	r5, r3, r9
   31594:	orrs	r0, r0, r5
   31598:	beq	314a0 <__assert_fail@plt+0x1f5d8>
   3159c:	ldr	r0, [sp, #124]	; 0x7c
   315a0:	ldr	r1, [sp, #108]	; 0x6c
   315a4:	ldr	r2, [sp, #156]	; 0x9c
   315a8:	str	r5, [sp, #20]
   315ac:	ldr	r5, [sp, #132]	; 0x84
   315b0:	ldr	ip, [sp, #84]	; 0x54
   315b4:	str	r3, [sp, #92]	; 0x5c
   315b8:	ldr	r3, [sp, #108]	; 0x6c
   315bc:	bic	r0, r0, r1
   315c0:	ldr	r1, [sp, #88]	; 0x58
   315c4:	str	r0, [sp, #120]	; 0x78
   315c8:	ldr	r0, [sp, #112]	; 0x70
   315cc:	bic	r0, r2, r0
   315d0:	ldr	r2, [sp, #80]	; 0x50
   315d4:	str	r0, [sp, #48]	; 0x30
   315d8:	bic	r0, r5, r2
   315dc:	bic	r2, r2, r5
   315e0:	ldr	r5, [sp, #156]	; 0x9c
   315e4:	str	r0, [sp, #44]	; 0x2c
   315e8:	bic	r0, lr, r1
   315ec:	str	r2, [sp, #156]	; 0x9c
   315f0:	str	r0, [sp, #40]	; 0x28
   315f4:	ldr	r0, [sp, #160]	; 0xa0
   315f8:	bic	r0, r0, ip
   315fc:	str	r0, [sp, #32]
   31600:	bic	r0, r7, sl
   31604:	str	r0, [sp, #28]
   31608:	bic	r0, r6, r4
   3160c:	bic	r4, r4, r6
   31610:	str	r0, [sp, #24]
   31614:	ldr	r0, [sp, #92]	; 0x5c
   31618:	bic	r0, r9, r0
   3161c:	str	r0, [sp, #36]	; 0x24
   31620:	ldr	r0, [sp, #124]	; 0x7c
   31624:	bic	r0, r3, r0
   31628:	ldr	r3, [sp, #112]	; 0x70
   3162c:	bic	r3, r3, r5
   31630:	orr	r5, r3, r0
   31634:	str	r3, [sp, #132]	; 0x84
   31638:	orr	r3, r5, r2
   3163c:	bic	r5, r1, lr
   31640:	ldr	r1, [sp, #160]	; 0xa0
   31644:	orr	r2, r3, r5
   31648:	bic	r3, ip, r1
   3164c:	bic	r1, sl, r7
   31650:	orr	r2, r2, r3
   31654:	orr	r7, r2, r1
   31658:	orr	r2, r7, r4
   3165c:	ldr	r7, [sp, #92]	; 0x5c
   31660:	bic	r7, r7, r9
   31664:	orrs	r2, r2, r7
   31668:	beq	31738 <__assert_fail@plt+0x1f870>
   3166c:	ldr	r2, [sp, #164]	; 0xa4
   31670:	ldr	r6, [sp, #132]	; 0x84
   31674:	add	sl, sp, #168	; 0xa8
   31678:	sub	lr, fp, #6144	; 0x1800
   3167c:	str	r0, [sl, r2, lsl #5]
   31680:	add	r0, sl, r2, lsl #5
   31684:	str	r6, [r0, #4]
   31688:	ldr	r6, [sp, #156]	; 0x9c
   3168c:	str	r6, [r0, #8]
   31690:	str	r5, [r0, #12]
   31694:	str	r3, [r0, #16]
   31698:	add	r0, r0, #20
   3169c:	stm	r0, {r1, r4, r7}
   316a0:	ldr	r0, [sp, #116]	; 0x74
   316a4:	ldr	r1, [sp, #72]	; 0x48
   316a8:	ldr	r7, [sp, #128]	; 0x80
   316ac:	str	r1, [r0, #-28]	; 0xffffffe4
   316b0:	ldr	r1, [sp, #68]	; 0x44
   316b4:	str	r1, [r8, #4]
   316b8:	ldr	r1, [sp, #76]	; 0x4c
   316bc:	str	r1, [r8, #8]
   316c0:	ldr	r1, [sp, #64]	; 0x40
   316c4:	str	r1, [r8, #12]
   316c8:	ldr	r1, [sp, #60]	; 0x3c
   316cc:	str	r1, [r8, #16]
   316d0:	ldr	r1, [sp, #56]	; 0x38
   316d4:	str	r1, [r8, #20]
   316d8:	ldr	r1, [sp, #52]	; 0x34
   316dc:	str	r1, [r8, #24]
   316e0:	ldr	r1, [sp, #20]
   316e4:	str	r1, [r0]
   316e8:	add	r0, r2, r2, lsl #1
   316ec:	sub	r1, lr, #104	; 0x68
   316f0:	add	r6, r1, r0, lsl #2
   316f4:	ldr	r0, [r7, #4]
   316f8:	mov	r4, r6
   316fc:	str	r0, [r4, #4]!
   31700:	ldr	r5, [r7, #4]
   31704:	cmp	r5, #1
   31708:	blt	31750 <__assert_fail@plt+0x1f888>
   3170c:	str	r0, [r6]
   31710:	lsl	r0, r0, #2
   31714:	bl	38450 <__assert_fail@plt+0x26588>
   31718:	ldr	r9, [sp, #36]	; 0x24
   3171c:	cmp	r0, #0
   31720:	str	r0, [r6, #8]
   31724:	beq	3216c <__assert_fail@plt+0x202a4>
   31728:	ldr	r1, [r7, #8]
   3172c:	lsl	r2, r5, #2
   31730:	bl	11ab4 <memcpy@plt>
   31734:	b	31764 <__assert_fail@plt+0x1f89c>
   31738:	ldr	r8, [sp, #96]	; 0x60
   3173c:	ldr	r5, [sp, #100]	; 0x64
   31740:	ldr	r4, [sp, #136]	; 0x88
   31744:	ldr	r7, [sp, #128]	; 0x80
   31748:	ldr	r9, [sp, #36]	; 0x24
   3174c:	b	3177c <__assert_fail@plt+0x1f8b4>
   31750:	ldr	r9, [sp, #36]	; 0x24
   31754:	mov	r0, #0
   31758:	str	r0, [r6]
   3175c:	str	r0, [r6, #4]
   31760:	str	r0, [r6, #8]
   31764:	ldr	r0, [sp, #164]	; 0xa4
   31768:	ldr	r8, [sp, #96]	; 0x60
   3176c:	ldr	r5, [sp, #100]	; 0x64
   31770:	ldr	r4, [sp, #136]	; 0x88
   31774:	add	r0, r0, #1
   31778:	str	r0, [sp, #164]	; 0xa4
   3177c:	ldr	r0, [sp, #104]	; 0x68
   31780:	ldr	r0, [r0, #12]
   31784:	ldr	r1, [r0, r5, lsl #2]
   31788:	mov	r0, r7
   3178c:	bl	2c088 <__assert_fail@plt+0x1a1c0>
   31790:	cmp	r0, #0
   31794:	beq	320f0 <__assert_fail@plt+0x20228>
   31798:	ldr	lr, [sp, #120]	; 0x78
   3179c:	ldr	r2, [sp, #48]	; 0x30
   317a0:	ldr	sl, [sp, #44]	; 0x2c
   317a4:	ldr	r5, [sp, #40]	; 0x28
   317a8:	ldr	r7, [sp, #32]
   317ac:	ldr	r6, [sp, #28]
   317b0:	ldr	r1, [sp, #24]
   317b4:	ldr	ip, [sp, #164]	; 0xa4
   317b8:	str	r9, [sp, #144]	; 0x90
   317bc:	orr	r0, r2, lr
   317c0:	str	r1, [sp, #152]	; 0x98
   317c4:	str	r6, [sp, #140]	; 0x8c
   317c8:	str	r7, [sp, #160]	; 0xa0
   317cc:	str	r5, [sp, #148]	; 0x94
   317d0:	orr	r0, r0, sl
   317d4:	orr	r0, r0, r5
   317d8:	orr	r0, r0, r7
   317dc:	orr	r0, r0, r6
   317e0:	orr	r0, r0, r1
   317e4:	orrs	r0, r0, r9
   317e8:	mov	r0, r2
   317ec:	bne	314b8 <__assert_fail@plt+0x1f5f0>
   317f0:	str	r9, [sp, #144]	; 0x90
   317f4:	str	r1, [sp, #152]	; 0x98
   317f8:	str	r6, [sp, #140]	; 0x8c
   317fc:	str	r7, [sp, #160]	; 0xa0
   31800:	ldr	r0, [sp, #144]	; 0x90
   31804:	str	ip, [sp, #164]	; 0xa4
   31808:	str	r0, [fp, #-1052]	; 0xfffffbe4
   3180c:	ldr	r0, [sp, #152]	; 0x98
   31810:	str	r0, [fp, #-1056]	; 0xfffffbe0
   31814:	ldr	r0, [sp, #140]	; 0x8c
   31818:	str	r0, [fp, #-1060]	; 0xfffffbdc
   3181c:	ldr	r0, [sp, #160]	; 0xa0
   31820:	str	r0, [fp, #-1064]	; 0xfffffbd8
   31824:	ldr	r0, [sp, #40]	; 0x28
   31828:	str	r0, [fp, #-1068]	; 0xfffffbd4
   3182c:	ldr	r0, [sp, #44]	; 0x2c
   31830:	str	r0, [fp, #-1072]	; 0xfffffbd0
   31834:	ldr	r0, [sp, #48]	; 0x30
   31838:	str	r0, [fp, #-1076]	; 0xfffffbcc
   3183c:	ldr	r0, [sp, #120]	; 0x78
   31840:	str	r0, [fp, #-1080]	; 0xfffffbc8
   31844:	ldr	r0, [sp, #164]	; 0xa4
   31848:	ldr	r1, [sp, #100]	; 0x64
   3184c:	cmp	r4, r0
   31850:	bne	30b60 <__assert_fail@plt+0x1ec98>
   31854:	sub	lr, fp, #1024	; 0x400
   31858:	sub	r7, lr, #56	; 0x38
   3185c:	sub	lr, fp, #6144	; 0x1800
   31860:	mov	r0, r7
   31864:	mov	r8, r7
   31868:	sub	r2, lr, #104	; 0x68
   3186c:	vld1.32	{d16-d17}, [r0]!
   31870:	vld1.64	{d18-d19}, [r0]
   31874:	add	r0, sp, #168	; 0xa8
   31878:	add	r0, r0, r4, lsl #5
   3187c:	vst1.32	{d16-d17}, [r0]!
   31880:	vst1.32	{d18-d19}, [r0]
   31884:	ldr	r0, [sp, #104]	; 0x68
   31888:	ldr	r0, [r0, #12]
   3188c:	ldr	r7, [r0, r1, lsl #2]
   31890:	add	r0, r4, r4, lsl #1
   31894:	mov	r1, #1
   31898:	add	r5, r2, r0, lsl #2
   3189c:	str	r1, [r2, r0, lsl #2]
   318a0:	mov	r0, #4
   318a4:	mov	r6, r5
   318a8:	str	r1, [r6, #4]!
   318ac:	bl	38450 <__assert_fail@plt+0x26588>
   318b0:	cmp	r0, #0
   318b4:	str	r0, [r5, #8]
   318b8:	beq	3223c <__assert_fail@plt+0x20374>
   318bc:	str	r7, [r0]
   318c0:	mov	r0, r8
   318c4:	vst1.64	{d8-d9}, [r0]!
   318c8:	vst1.64	{d8-d9}, [r0]
   318cc:	add	r0, r4, #1
   318d0:	str	r0, [sp, #164]	; 0xa4
   318d4:	b	30b58 <__assert_fail@plt+0x1ec90>
   318d8:	ldr	r0, [sp, #164]	; 0xa4
   318dc:	cmp	r0, #0
   318e0:	ble	3225c <__assert_fail@plt+0x20394>
   318e4:	ldr	r0, [sp, #164]	; 0xa4
   318e8:	mov	r4, #0
   318ec:	str	r4, [fp, #-3136]	; 0xfffff3c0
   318f0:	add	r0, r0, #1
   318f4:	str	r0, [fp, #-3140]	; 0xfffff3bc
   318f8:	lsl	r0, r0, #2
   318fc:	bl	38450 <__assert_fail@plt+0x26588>
   31900:	cmp	r0, #0
   31904:	str	r0, [fp, #-3132]	; 0xfffff3c4
   31908:	moveq	r4, #12
   3190c:	cmp	r0, #0
   31910:	str	r4, [fp, #-56]	; 0xffffffc8
   31914:	beq	32290 <__assert_fail@plt+0x203c8>
   31918:	vmov.i32	q8, #0	; 0x00000000
   3191c:	sub	lr, fp, #3072	; 0xc00
   31920:	mov	r1, #0
   31924:	mov	r7, #0
   31928:	mov	r2, #0
   3192c:	mov	r6, #0
   31930:	mov	r5, #0
   31934:	mov	r9, #0
   31938:	sub	r0, lr, #104	; 0x68
   3193c:	sub	lr, fp, #3072	; 0xc00
   31940:	vst1.64	{d16-d17}, [r0]!
   31944:	vst1.64	{d16-d17}, [r0]
   31948:	sub	r0, lr, #56	; 0x38
   3194c:	str	r0, [sp, #128]	; 0x80
   31950:	mov	r0, #0
   31954:	str	r0, [sp, #148]	; 0x94
   31958:	mov	r0, #0
   3195c:	str	r0, [sp, #152]	; 0x98
   31960:	mov	r0, #0
   31964:	str	r0, [sp, #156]	; 0x9c
   31968:	mov	r0, #0
   3196c:	str	r0, [sp, #160]	; 0xa0
   31970:	mov	r0, #0
   31974:	str	r0, [sp, #132]	; 0x84
   31978:	b	31a44 <__assert_fail@plt+0x1fb7c>
   3197c:	ldrsb	r0, [r7, #52]	; 0x34
   31980:	cmn	r0, #1
   31984:	ble	31b1c <__assert_fail@plt+0x1fc54>
   31988:	sub	lr, fp, #3072	; 0xc00
   3198c:	sub	r0, lr, #56	; 0x38
   31990:	sub	lr, fp, #2048	; 0x800
   31994:	str	r7, [r0, r9, lsl #2]
   31998:	sub	r0, lr, #56	; 0x38
   3199c:	str	r7, [r0, r9, lsl #2]
   319a0:	add	r0, sp, #168	; 0xa8
   319a4:	ldr	r3, [sp, #148]	; 0x94
   319a8:	ldr	sl, [sp, #164]	; 0xa4
   319ac:	ldr	r8, [sp, #96]	; 0x60
   319b0:	mov	r2, r0
   319b4:	ldr	r0, [r0, r9, lsl #5]
   319b8:	orr	r5, r5, r0
   319bc:	add	r0, r2, r9, lsl #5
   319c0:	add	r9, r9, #1
   319c4:	mov	ip, r5
   319c8:	cmp	r9, sl
   319cc:	ldr	r2, [r0, #4]
   319d0:	ldr	lr, [r0, #8]
   319d4:	ldr	r7, [r0, #12]
   319d8:	ldr	r5, [r0, #16]
   319dc:	ldr	r4, [r0, #20]
   319e0:	str	r2, [sp, #136]	; 0x88
   319e4:	mov	r2, r6
   319e8:	ldr	r6, [r0, #24]
   319ec:	ldr	r0, [r0, #28]
   319f0:	orr	r3, r3, r0
   319f4:	ldr	r0, [sp, #152]	; 0x98
   319f8:	str	r3, [sp, #148]	; 0x94
   319fc:	orr	r0, r0, r6
   31a00:	mov	r6, r2
   31a04:	ldr	r2, [sp, #144]	; 0x90
   31a08:	str	r0, [sp, #152]	; 0x98
   31a0c:	ldr	r0, [sp, #156]	; 0x9c
   31a10:	orr	r2, r2, lr
   31a14:	orr	r0, r0, r4
   31a18:	str	r0, [sp, #156]	; 0x9c
   31a1c:	ldr	r0, [sp, #160]	; 0xa0
   31a20:	orr	r0, r0, r5
   31a24:	mov	r5, ip
   31a28:	str	r0, [sp, #160]	; 0xa0
   31a2c:	ldr	r0, [sp, #140]	; 0x8c
   31a30:	orr	r0, r0, r7
   31a34:	mov	r7, r0
   31a38:	ldr	r0, [sp, #136]	; 0x88
   31a3c:	orr	r6, r6, r0
   31a40:	beq	31be4 <__assert_fail@plt+0x1fd1c>
   31a44:	mov	r0, #0
   31a48:	sub	lr, fp, #6144	; 0x1800
   31a4c:	str	r2, [sp, #144]	; 0x90
   31a50:	str	r7, [sp, #140]	; 0x8c
   31a54:	str	r0, [fp, #-3136]	; 0xfffff3c0
   31a58:	add	r0, r9, r9, lsl #1
   31a5c:	sub	r2, lr, #104	; 0x68
   31a60:	add	r2, r2, r0, lsl #2
   31a64:	mov	r7, r2
   31a68:	ldr	r0, [r7, #4]!
   31a6c:	cmp	r0, #1
   31a70:	blt	31adc <__assert_fail@plt+0x1fc14>
   31a74:	mov	r4, r9
   31a78:	add	sl, r2, #8
   31a7c:	mov	r9, #0
   31a80:	b	31a98 <__assert_fail@plt+0x1fbd0>
   31a84:	ldr	r0, [r7]
   31a88:	mov	r1, #0
   31a8c:	add	r9, r9, #1
   31a90:	cmp	r9, r0
   31a94:	bge	31ad4 <__assert_fail@plt+0x1fc0c>
   31a98:	ldr	r2, [sl]
   31a9c:	ldr	r3, [r8, #12]
   31aa0:	ldr	r2, [r2, r9, lsl #2]
   31aa4:	ldr	r2, [r3, r2, lsl #2]
   31aa8:	cmn	r2, #1
   31aac:	beq	31a8c <__assert_fail@plt+0x1fbc4>
   31ab0:	ldr	r0, [r8, #24]
   31ab4:	add	r1, r2, r2, lsl #1
   31ab8:	sub	lr, fp, #3072	; 0xc00
   31abc:	add	r1, r0, r1, lsl #2
   31ac0:	sub	r0, lr, #68	; 0x44
   31ac4:	bl	2bee8 <__assert_fail@plt+0x1a020>
   31ac8:	cmp	r0, #0
   31acc:	beq	31a84 <__assert_fail@plt+0x1fbbc>
   31ad0:	b	32078 <__assert_fail@plt+0x201b0>
   31ad4:	mov	r9, r4
   31ad8:	str	r1, [fp, #-56]	; 0xffffffc8
   31adc:	sub	lr, fp, #3072	; 0xc00
   31ae0:	sub	r0, fp, #56	; 0x38
   31ae4:	mov	r1, r8
   31ae8:	mov	r3, #0
   31aec:	sub	r2, lr, #68	; 0x44
   31af0:	bl	2c208 <__assert_fail@plt+0x1a340>
   31af4:	ldr	r1, [fp, #-56]	; 0xffffffc8
   31af8:	mov	r7, r0
   31afc:	sub	lr, fp, #1024	; 0x400
   31b00:	sub	r0, lr, #56	; 0x38
   31b04:	cmp	r7, #0
   31b08:	str	r7, [r0, r9, lsl #2]
   31b0c:	bne	3197c <__assert_fail@plt+0x1fab4>
   31b10:	cmp	r1, #0
   31b14:	beq	3197c <__assert_fail@plt+0x1fab4>
   31b18:	b	31bb0 <__assert_fail@plt+0x1fce8>
   31b1c:	sub	lr, fp, #3072	; 0xc00
   31b20:	sub	r0, fp, #56	; 0x38
   31b24:	mov	r1, r8
   31b28:	mov	r3, #1
   31b2c:	sub	r2, lr, #68	; 0x44
   31b30:	bl	2c208 <__assert_fail@plt+0x1a340>
   31b34:	sub	lr, fp, #2048	; 0x800
   31b38:	cmp	r0, #0
   31b3c:	sub	r1, lr, #56	; 0x38
   31b40:	str	r0, [r1, r9, lsl #2]
   31b44:	bne	31b54 <__assert_fail@plt+0x1fc8c>
   31b48:	ldr	r1, [fp, #-56]	; 0xffffffc8
   31b4c:	cmp	r1, #0
   31b50:	bne	31bb0 <__assert_fail@plt+0x1fce8>
   31b54:	cmp	r7, r0
   31b58:	beq	31b78 <__assert_fail@plt+0x1fcb0>
   31b5c:	ldr	r0, [r8, #92]	; 0x5c
   31b60:	ldr	r1, [sp, #132]	; 0x84
   31b64:	cmp	r0, #1
   31b68:	mov	r0, #0
   31b6c:	movwgt	r0, #1
   31b70:	orr	r1, r1, r0
   31b74:	str	r1, [sp, #132]	; 0x84
   31b78:	sub	lr, fp, #3072	; 0xc00
   31b7c:	sub	r0, fp, #56	; 0x38
   31b80:	mov	r1, r8
   31b84:	mov	r3, #2
   31b88:	sub	r2, lr, #68	; 0x44
   31b8c:	bl	2c208 <__assert_fail@plt+0x1a340>
   31b90:	sub	lr, fp, #3072	; 0xc00
   31b94:	cmp	r0, #0
   31b98:	sub	r1, lr, #56	; 0x38
   31b9c:	str	r0, [r1, r9, lsl #2]
   31ba0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   31ba4:	bne	319a0 <__assert_fail@plt+0x1fad8>
   31ba8:	cmp	r1, #0
   31bac:	beq	319a0 <__assert_fail@plt+0x1fad8>
   31bb0:	ldr	r0, [sp, #148]	; 0x94
   31bb4:	str	r0, [fp, #-3148]	; 0xfffff3b4
   31bb8:	ldr	r0, [sp, #152]	; 0x98
   31bbc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   31bc0:	ldr	r0, [sp, #156]	; 0x9c
   31bc4:	str	r0, [fp, #-3156]	; 0xfffff3ac
   31bc8:	ldr	r0, [sp, #160]	; 0xa0
   31bcc:	str	r0, [fp, #-3160]	; 0xfffff3a8
   31bd0:	ldr	r0, [sp, #140]	; 0x8c
   31bd4:	str	r0, [fp, #-3164]	; 0xfffff3a4
   31bd8:	ldr	r0, [sp, #144]	; 0x90
   31bdc:	str	r0, [fp, #-3168]	; 0xfffff3a0
   31be0:	b	320ac <__assert_fail@plt+0x201e4>
   31be4:	ldr	r0, [sp, #148]	; 0x94
   31be8:	ldr	r8, [sp, #132]	; 0x84
   31bec:	ldr	r4, [sp, #104]	; 0x68
   31bf0:	str	r0, [fp, #-3148]	; 0xfffff3b4
   31bf4:	ldr	r0, [sp, #152]	; 0x98
   31bf8:	tst	r8, #1
   31bfc:	str	r0, [fp, #-3152]	; 0xfffff3b0
   31c00:	ldr	r0, [sp, #156]	; 0x9c
   31c04:	str	r0, [fp, #-3156]	; 0xfffff3ac
   31c08:	ldr	r0, [sp, #160]	; 0xa0
   31c0c:	str	r0, [fp, #-3160]	; 0xfffff3a8
   31c10:	mov	r0, #4
   31c14:	str	r7, [fp, #-3164]	; 0xfffff3a4
   31c18:	str	r2, [fp, #-3168]	; 0xfffff3a0
   31c1c:	str	r6, [fp, #-3172]	; 0xfffff39c
   31c20:	str	r5, [fp, #-3176]	; 0xfffff398
   31c24:	bne	3229c <__assert_fail@plt+0x203d4>
   31c28:	mov	r1, #256	; 0x100
   31c2c:	bl	383fc <__assert_fail@plt+0x26534>
   31c30:	cmp	r0, #0
   31c34:	str	r0, [r4, #44]	; 0x2c
   31c38:	beq	320b4 <__assert_fail@plt+0x201ec>
   31c3c:	ldr	ip, [fp, #-3176]	; 0xfffff398
   31c40:	cmp	ip, #0
   31c44:	beq	31cc4 <__assert_fail@plt+0x1fdfc>
   31c48:	mov	r2, #0
   31c4c:	mov	r3, #1
   31c50:	mov	r1, ip
   31c54:	mov	r7, #0
   31c58:	tst	r1, #1
   31c5c:	bne	31c7c <__assert_fail@plt+0x1fdb4>
   31c60:	lsr	r6, r1, #1
   31c64:	cmp	r2, r1, lsr #1
   31c68:	add	r7, r7, #1
   31c6c:	lsl	r3, r3, #1
   31c70:	mov	r1, r6
   31c74:	bne	31c58 <__assert_fail@plt+0x1fd90>
   31c78:	b	31cc4 <__assert_fail@plt+0x1fdfc>
   31c7c:	mov	r6, #0
   31c80:	add	r4, sp, #168	; 0xa8
   31c84:	ldr	r5, [r4, r6, lsl #3]
   31c88:	add	r6, r6, #4
   31c8c:	tst	r5, r3
   31c90:	beq	31c84 <__assert_fail@plt+0x1fdbc>
   31c94:	ldr	r5, [sp]
   31c98:	sub	lr, fp, #2048	; 0x800
   31c9c:	ldr	r5, [r5]
   31ca0:	tst	r5, r3
   31ca4:	sub	r5, lr, #56	; 0x38
   31ca8:	sub	lr, fp, #1024	; 0x400
   31cac:	sub	r4, lr, #56	; 0x38
   31cb0:	moveq	r5, r4
   31cb4:	add	r6, r5, r6
   31cb8:	ldr	r6, [r6, #-4]
   31cbc:	str	r6, [r0, r7, lsl #2]
   31cc0:	b	31c60 <__assert_fail@plt+0x1fd98>
   31cc4:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   31cc8:	cmp	r2, #0
   31ccc:	beq	31d4c <__assert_fail@plt+0x1fe84>
   31cd0:	add	r1, sp, #168	; 0xa8
   31cd4:	mov	r7, #32
   31cd8:	mov	r6, #1
   31cdc:	mov	r5, #0
   31ce0:	add	lr, r1, #4
   31ce4:	tst	r2, #1
   31ce8:	bne	31d08 <__assert_fail@plt+0x1fe40>
   31cec:	lsr	r1, r2, #1
   31cf0:	cmp	r5, r2, lsr #1
   31cf4:	add	r7, r7, #1
   31cf8:	lsl	r6, r6, #1
   31cfc:	mov	r2, r1
   31d00:	bne	31ce4 <__assert_fail@plt+0x1fe1c>
   31d04:	b	31d4c <__assert_fail@plt+0x1fe84>
   31d08:	mov	r1, #0
   31d0c:	ldr	r4, [lr, r1, lsl #3]
   31d10:	add	r1, r1, #4
   31d14:	tst	r4, r6
   31d18:	beq	31d0c <__assert_fail@plt+0x1fe44>
   31d1c:	ldr	r3, [sp, #96]	; 0x60
   31d20:	ldr	r4, [r3, #100]	; 0x64
   31d24:	sub	r3, fp, #2048	; 0x800
   31d28:	tst	r4, r6
   31d2c:	sub	r4, r3, #56	; 0x38
   31d30:	sub	r3, fp, #1024	; 0x400
   31d34:	sub	r3, r3, #56	; 0x38
   31d38:	moveq	r4, r3
   31d3c:	add	r1, r4, r1
   31d40:	ldr	r1, [r1, #-4]
   31d44:	str	r1, [r0, r7, lsl #2]
   31d48:	b	31cec <__assert_fail@plt+0x1fe24>
   31d4c:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   31d50:	cmp	r2, #0
   31d54:	beq	31dd4 <__assert_fail@plt+0x1ff0c>
   31d58:	add	r1, sp, #168	; 0xa8
   31d5c:	mov	r7, #64	; 0x40
   31d60:	mov	r6, #1
   31d64:	mov	r5, #0
   31d68:	add	lr, r1, #8
   31d6c:	tst	r2, #1
   31d70:	bne	31d90 <__assert_fail@plt+0x1fec8>
   31d74:	lsr	r1, r2, #1
   31d78:	cmp	r5, r2, lsr #1
   31d7c:	add	r7, r7, #1
   31d80:	lsl	r6, r6, #1
   31d84:	mov	r2, r1
   31d88:	bne	31d6c <__assert_fail@plt+0x1fea4>
   31d8c:	b	31dd4 <__assert_fail@plt+0x1ff0c>
   31d90:	mov	r1, #0
   31d94:	ldr	r4, [lr, r1, lsl #3]
   31d98:	add	r1, r1, #4
   31d9c:	tst	r4, r6
   31da0:	beq	31d94 <__assert_fail@plt+0x1fecc>
   31da4:	ldr	r3, [sp, #96]	; 0x60
   31da8:	ldr	r4, [r3, #104]	; 0x68
   31dac:	sub	r3, fp, #2048	; 0x800
   31db0:	tst	r4, r6
   31db4:	sub	r4, r3, #56	; 0x38
   31db8:	sub	r3, fp, #1024	; 0x400
   31dbc:	sub	r3, r3, #56	; 0x38
   31dc0:	moveq	r4, r3
   31dc4:	add	r1, r4, r1
   31dc8:	ldr	r1, [r1, #-4]
   31dcc:	str	r1, [r0, r7, lsl #2]
   31dd0:	b	31d74 <__assert_fail@plt+0x1feac>
   31dd4:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   31dd8:	cmp	r2, #0
   31ddc:	beq	31e5c <__assert_fail@plt+0x1ff94>
   31de0:	add	r1, sp, #168	; 0xa8
   31de4:	mov	r7, #96	; 0x60
   31de8:	mov	r6, #1
   31dec:	mov	r5, #0
   31df0:	add	lr, r1, #12
   31df4:	tst	r2, #1
   31df8:	bne	31e18 <__assert_fail@plt+0x1ff50>
   31dfc:	lsr	r1, r2, #1
   31e00:	cmp	r5, r2, lsr #1
   31e04:	add	r7, r7, #1
   31e08:	lsl	r6, r6, #1
   31e0c:	mov	r2, r1
   31e10:	bne	31df4 <__assert_fail@plt+0x1ff2c>
   31e14:	b	31e5c <__assert_fail@plt+0x1ff94>
   31e18:	mov	r1, #0
   31e1c:	ldr	r4, [lr, r1, lsl #3]
   31e20:	add	r1, r1, #4
   31e24:	tst	r4, r6
   31e28:	beq	31e1c <__assert_fail@plt+0x1ff54>
   31e2c:	ldr	r3, [sp, #96]	; 0x60
   31e30:	ldr	r4, [r3, #108]	; 0x6c
   31e34:	sub	r3, fp, #2048	; 0x800
   31e38:	tst	r4, r6
   31e3c:	sub	r4, r3, #56	; 0x38
   31e40:	sub	r3, fp, #1024	; 0x400
   31e44:	sub	r3, r3, #56	; 0x38
   31e48:	moveq	r4, r3
   31e4c:	add	r1, r4, r1
   31e50:	ldr	r1, [r1, #-4]
   31e54:	str	r1, [r0, r7, lsl #2]
   31e58:	b	31dfc <__assert_fail@plt+0x1ff34>
   31e5c:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   31e60:	cmp	r2, #0
   31e64:	beq	31ee4 <__assert_fail@plt+0x2001c>
   31e68:	add	r1, sp, #168	; 0xa8
   31e6c:	mov	r7, #128	; 0x80
   31e70:	mov	r6, #1
   31e74:	mov	r5, #0
   31e78:	add	lr, r1, #16
   31e7c:	tst	r2, #1
   31e80:	bne	31ea0 <__assert_fail@plt+0x1ffd8>
   31e84:	lsr	r1, r2, #1
   31e88:	cmp	r5, r2, lsr #1
   31e8c:	add	r7, r7, #1
   31e90:	lsl	r6, r6, #1
   31e94:	mov	r2, r1
   31e98:	bne	31e7c <__assert_fail@plt+0x1ffb4>
   31e9c:	b	31ee4 <__assert_fail@plt+0x2001c>
   31ea0:	mov	r1, #0
   31ea4:	ldr	r4, [lr, r1, lsl #3]
   31ea8:	add	r1, r1, #4
   31eac:	tst	r4, r6
   31eb0:	beq	31ea4 <__assert_fail@plt+0x1ffdc>
   31eb4:	ldr	r3, [sp, #4]
   31eb8:	ldr	r4, [r3]
   31ebc:	sub	r3, fp, #2048	; 0x800
   31ec0:	tst	r4, r6
   31ec4:	sub	r4, r3, #56	; 0x38
   31ec8:	sub	r3, fp, #1024	; 0x400
   31ecc:	sub	r3, r3, #56	; 0x38
   31ed0:	moveq	r4, r3
   31ed4:	add	r1, r4, r1
   31ed8:	ldr	r1, [r1, #-4]
   31edc:	str	r1, [r0, r7, lsl #2]
   31ee0:	b	31e84 <__assert_fail@plt+0x1ffbc>
   31ee4:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   31ee8:	cmp	r2, #0
   31eec:	beq	31f6c <__assert_fail@plt+0x200a4>
   31ef0:	add	r1, sp, #168	; 0xa8
   31ef4:	mov	r7, #160	; 0xa0
   31ef8:	mov	r6, #1
   31efc:	mov	r5, #0
   31f00:	add	lr, r1, #20
   31f04:	tst	r2, #1
   31f08:	bne	31f28 <__assert_fail@plt+0x20060>
   31f0c:	lsr	r1, r2, #1
   31f10:	cmp	r5, r2, lsr #1
   31f14:	add	r7, r7, #1
   31f18:	lsl	r6, r6, #1
   31f1c:	mov	r2, r1
   31f20:	bne	31f04 <__assert_fail@plt+0x2003c>
   31f24:	b	31f6c <__assert_fail@plt+0x200a4>
   31f28:	mov	r1, #0
   31f2c:	ldr	r4, [lr, r1, lsl #3]
   31f30:	add	r1, r1, #4
   31f34:	tst	r4, r6
   31f38:	beq	31f2c <__assert_fail@plt+0x20064>
   31f3c:	ldr	r3, [sp, #96]	; 0x60
   31f40:	ldr	r4, [r3, #116]	; 0x74
   31f44:	sub	r3, fp, #2048	; 0x800
   31f48:	tst	r4, r6
   31f4c:	sub	r4, r3, #56	; 0x38
   31f50:	sub	r3, fp, #1024	; 0x400
   31f54:	sub	r3, r3, #56	; 0x38
   31f58:	moveq	r4, r3
   31f5c:	add	r1, r4, r1
   31f60:	ldr	r1, [r1, #-4]
   31f64:	str	r1, [r0, r7, lsl #2]
   31f68:	b	31f0c <__assert_fail@plt+0x20044>
   31f6c:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   31f70:	cmp	r2, #0
   31f74:	beq	31ff4 <__assert_fail@plt+0x2012c>
   31f78:	add	r1, sp, #168	; 0xa8
   31f7c:	mov	r7, #192	; 0xc0
   31f80:	mov	r6, #1
   31f84:	mov	r5, #0
   31f88:	add	lr, r1, #24
   31f8c:	tst	r2, #1
   31f90:	bne	31fb0 <__assert_fail@plt+0x200e8>
   31f94:	lsr	r1, r2, #1
   31f98:	cmp	r5, r2, lsr #1
   31f9c:	add	r7, r7, #1
   31fa0:	lsl	r6, r6, #1
   31fa4:	mov	r2, r1
   31fa8:	bne	31f8c <__assert_fail@plt+0x200c4>
   31fac:	b	31ff4 <__assert_fail@plt+0x2012c>
   31fb0:	mov	r1, #0
   31fb4:	ldr	r4, [lr, r1, lsl #3]
   31fb8:	add	r1, r1, #4
   31fbc:	tst	r4, r6
   31fc0:	beq	31fb4 <__assert_fail@plt+0x200ec>
   31fc4:	ldr	r3, [sp, #96]	; 0x60
   31fc8:	ldr	r4, [r3, #120]	; 0x78
   31fcc:	sub	r3, fp, #2048	; 0x800
   31fd0:	tst	r4, r6
   31fd4:	sub	r4, r3, #56	; 0x38
   31fd8:	sub	r3, fp, #1024	; 0x400
   31fdc:	sub	r3, r3, #56	; 0x38
   31fe0:	moveq	r4, r3
   31fe4:	add	r1, r4, r1
   31fe8:	ldr	r1, [r1, #-4]
   31fec:	str	r1, [r0, r7, lsl #2]
   31ff0:	b	31f94 <__assert_fail@plt+0x200cc>
   31ff4:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   31ff8:	cmp	r2, #0
   31ffc:	beq	32754 <__assert_fail@plt+0x2088c>
   32000:	mov	r3, #224	; 0xe0
   32004:	mov	r7, #1
   32008:	mov	r6, #0
   3200c:	tst	r2, #1
   32010:	bne	32030 <__assert_fail@plt+0x20168>
   32014:	lsr	r1, r2, #1
   32018:	cmp	r6, r2, lsr #1
   3201c:	add	r3, r3, #1
   32020:	lsl	r7, r7, #1
   32024:	mov	r2, r1
   32028:	bne	3200c <__assert_fail@plt+0x20144>
   3202c:	b	32754 <__assert_fail@plt+0x2088c>
   32030:	ldr	r4, [sp, #12]
   32034:	mov	r1, #0
   32038:	ldr	r5, [r4, r1, lsl #3]
   3203c:	add	r1, r1, #4
   32040:	tst	r5, r7
   32044:	beq	32038 <__assert_fail@plt+0x20170>
   32048:	ldr	r5, [sp, #96]	; 0x60
   3204c:	sub	lr, fp, #2048	; 0x800
   32050:	ldr	r5, [r5, #124]	; 0x7c
   32054:	tst	r5, r7
   32058:	sub	r5, lr, #56	; 0x38
   3205c:	sub	lr, fp, #1024	; 0x400
   32060:	sub	r4, lr, #56	; 0x38
   32064:	moveq	r5, r4
   32068:	add	r1, r5, r1
   3206c:	ldr	r1, [r1, #-4]
   32070:	str	r1, [r0, r3, lsl #2]
   32074:	b	32014 <__assert_fail@plt+0x2014c>
   32078:	ldr	r1, [sp, #148]	; 0x94
   3207c:	str	r0, [fp, #-56]	; 0xffffffc8
   32080:	str	r1, [fp, #-3148]	; 0xfffff3b4
   32084:	ldr	r1, [sp, #152]	; 0x98
   32088:	str	r1, [fp, #-3152]	; 0xfffff3b0
   3208c:	ldr	r1, [sp, #156]	; 0x9c
   32090:	str	r1, [fp, #-3156]	; 0xfffff3ac
   32094:	ldr	r1, [sp, #160]	; 0xa0
   32098:	str	r1, [fp, #-3160]	; 0xfffff3a8
   3209c:	ldr	r1, [sp, #140]	; 0x8c
   320a0:	str	r1, [fp, #-3164]	; 0xfffff3a4
   320a4:	ldr	r1, [sp, #144]	; 0x90
   320a8:	str	r1, [fp, #-3168]	; 0xfffff3a0
   320ac:	str	r6, [fp, #-3172]	; 0xfffff39c
   320b0:	str	r5, [fp, #-3176]	; 0xfffff398
   320b4:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   320b8:	bl	17c10 <__assert_fail@plt+0x5d48>
   320bc:	ldr	r0, [sp, #164]	; 0xa4
   320c0:	cmp	r0, #1
   320c4:	blt	32228 <__assert_fail@plt+0x20360>
   320c8:	sub	lr, fp, #6144	; 0x1800
   320cc:	sub	r0, lr, #104	; 0x68
   320d0:	add	r4, r0, #8
   320d4:	ldr	r0, [r4], #12
   320d8:	bl	17c10 <__assert_fail@plt+0x5d48>
   320dc:	ldr	r0, [sp, #164]	; 0xa4
   320e0:	subs	r0, r0, #1
   320e4:	str	r0, [sp, #164]	; 0xa4
   320e8:	bne	320d4 <__assert_fail@plt+0x2020c>
   320ec:	b	32228 <__assert_fail@plt+0x20360>
   320f0:	ldr	r0, [sp, #24]
   320f4:	str	r9, [fp, #-1052]	; 0xfffffbe4
   320f8:	str	r0, [fp, #-1056]	; 0xfffffbe0
   320fc:	ldr	r0, [sp, #28]
   32100:	str	r0, [fp, #-1060]	; 0xfffffbdc
   32104:	ldr	r0, [sp, #32]
   32108:	str	r0, [fp, #-1064]	; 0xfffffbd8
   3210c:	ldr	r0, [sp, #40]	; 0x28
   32110:	str	r0, [fp, #-1068]	; 0xfffffbd4
   32114:	ldr	r0, [sp, #44]	; 0x2c
   32118:	str	r0, [fp, #-1072]	; 0xfffffbd0
   3211c:	ldr	r0, [sp, #48]	; 0x30
   32120:	str	r0, [fp, #-1076]	; 0xfffffbcc
   32124:	ldr	r0, [sp, #120]	; 0x78
   32128:	b	32158 <__assert_fail@plt+0x20290>
   3212c:	ldr	r0, [sp, #36]	; 0x24
   32130:	str	sl, [fp, #-1052]	; 0xfffffbe4
   32134:	str	r0, [fp, #-1056]	; 0xfffffbe0
   32138:	ldr	r0, [sp, #52]	; 0x34
   3213c:	str	r7, [fp, #-1060]	; 0xfffffbdc
   32140:	str	r9, [fp, #-1064]	; 0xfffffbd8
   32144:	str	r5, [fp, #-1068]	; 0xfffffbd4
   32148:	str	r0, [fp, #-1072]	; 0xfffffbd0
   3214c:	ldr	r0, [sp, #56]	; 0x38
   32150:	str	r0, [fp, #-1076]	; 0xfffffbcc
   32154:	ldr	r0, [sp, #60]	; 0x3c
   32158:	str	r0, [fp, #-1080]	; 0xfffffbc8
   3215c:	ldr	r0, [sp, #164]	; 0xa4
   32160:	cmp	r0, #1
   32164:	bge	32204 <__assert_fail@plt+0x2033c>
   32168:	b	32228 <__assert_fail@plt+0x20360>
   3216c:	ldr	r0, [sp, #24]
   32170:	str	r9, [fp, #-1052]	; 0xfffffbe4
   32174:	str	r0, [fp, #-1056]	; 0xfffffbe0
   32178:	ldr	r0, [sp, #28]
   3217c:	str	r0, [fp, #-1060]	; 0xfffffbdc
   32180:	ldr	r0, [sp, #32]
   32184:	str	r0, [fp, #-1064]	; 0xfffffbd8
   32188:	ldr	r0, [sp, #40]	; 0x28
   3218c:	str	r0, [fp, #-1068]	; 0xfffffbd4
   32190:	ldr	r0, [sp, #44]	; 0x2c
   32194:	str	r0, [fp, #-1072]	; 0xfffffbd0
   32198:	ldr	r0, [sp, #48]	; 0x30
   3219c:	str	r0, [fp, #-1076]	; 0xfffffbcc
   321a0:	ldr	r0, [sp, #120]	; 0x78
   321a4:	b	321d8 <__assert_fail@plt+0x20310>
   321a8:	ldr	r0, [sp, #36]	; 0x24
   321ac:	str	sl, [fp, #-1052]	; 0xfffffbe4
   321b0:	str	r0, [fp, #-1056]	; 0xfffffbe0
   321b4:	ldr	r0, [sp, #48]	; 0x30
   321b8:	str	r7, [fp, #-1060]	; 0xfffffbdc
   321bc:	str	r9, [fp, #-1064]	; 0xfffffbd8
   321c0:	str	r0, [fp, #-1068]	; 0xfffffbd4
   321c4:	ldr	r0, [sp, #52]	; 0x34
   321c8:	str	r0, [fp, #-1072]	; 0xfffffbd0
   321cc:	ldr	r0, [sp, #56]	; 0x38
   321d0:	str	r0, [fp, #-1076]	; 0xfffffbcc
   321d4:	ldr	r0, [sp, #60]	; 0x3c
   321d8:	ldr	r1, [sp, #164]	; 0xa4
   321dc:	sub	lr, fp, #6144	; 0x1800
   321e0:	str	r0, [fp, #-1080]	; 0xfffffbc8
   321e4:	mov	r0, #0
   321e8:	sub	r2, lr, #104	; 0x68
   321ec:	str	r0, [r4]
   321f0:	add	r1, r1, r1, lsl #1
   321f4:	str	r0, [r2, r1, lsl #2]
   321f8:	ldr	r0, [sp, #164]	; 0xa4
   321fc:	cmp	r0, #1
   32200:	blt	32228 <__assert_fail@plt+0x20360>
   32204:	sub	lr, fp, #6144	; 0x1800
   32208:	sub	r0, lr, #104	; 0x68
   3220c:	add	r4, r0, #8
   32210:	ldr	r0, [r4], #12
   32214:	bl	17c10 <__assert_fail@plt+0x5d48>
   32218:	ldr	r0, [sp, #164]	; 0xa4
   3221c:	subs	r0, r0, #1
   32220:	str	r0, [sp, #164]	; 0xa4
   32224:	bne	32210 <__assert_fail@plt+0x20348>
   32228:	mov	r0, #0
   3222c:	sub	sp, fp, #48	; 0x30
   32230:	vpop	{d8-d9}
   32234:	add	sp, sp, #4
   32238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3223c:	mov	r0, #0
   32240:	str	r4, [sp, #164]	; 0xa4
   32244:	str	r0, [r6]
   32248:	str	r0, [r5]
   3224c:	ldr	r0, [sp, #164]	; 0xa4
   32250:	cmp	r0, #1
   32254:	bge	32204 <__assert_fail@plt+0x2033c>
   32258:	b	32228 <__assert_fail@plt+0x20360>
   3225c:	mov	r0, #0
   32260:	bne	32280 <__assert_fail@plt+0x203b8>
   32264:	mov	r0, #4
   32268:	mov	r1, #256	; 0x100
   3226c:	bl	383fc <__assert_fail@plt+0x26534>
   32270:	ldr	r1, [sp, #104]	; 0x68
   32274:	cmp	r0, #0
   32278:	str	r0, [r1, #44]	; 0x2c
   3227c:	movwne	r0, #1
   32280:	sub	sp, fp, #48	; 0x30
   32284:	vpop	{d8-d9}
   32288:	add	sp, sp, #4
   3228c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32290:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   32294:	bl	17c10 <__assert_fail@plt+0x5d48>
   32298:	b	320c8 <__assert_fail@plt+0x20200>
   3229c:	mov	r1, #512	; 0x200
   322a0:	bl	383fc <__assert_fail@plt+0x26534>
   322a4:	cmp	r0, #0
   322a8:	str	r0, [r4, #48]	; 0x30
   322ac:	beq	320b4 <__assert_fail@plt+0x201ec>
   322b0:	ldr	ip, [fp, #-3176]	; 0xfffff398
   322b4:	cmp	ip, #0
   322b8:	beq	32344 <__assert_fail@plt+0x2047c>
   322bc:	sub	lr, fp, #1024	; 0x400
   322c0:	mov	r7, #0
   322c4:	mov	r6, #1
   322c8:	add	r4, sp, #168	; 0xa8
   322cc:	mov	r5, ip
   322d0:	sub	r1, lr, #56	; 0x38
   322d4:	sub	lr, r1, #4
   322d8:	sub	r1, fp, #2048	; 0x800
   322dc:	sub	r1, r1, #56	; 0x38
   322e0:	sub	r8, r1, #4
   322e4:	mov	r1, #0
   322e8:	tst	r5, #1
   322ec:	bne	3230c <__assert_fail@plt+0x20444>
   322f0:	lsr	r2, r5, #1
   322f4:	cmp	r7, r5, lsr #1
   322f8:	add	r1, r1, #1
   322fc:	lsl	r6, r6, #1
   32300:	mov	r5, r2
   32304:	bne	322e8 <__assert_fail@plt+0x20420>
   32308:	b	32344 <__assert_fail@plt+0x2047c>
   3230c:	mov	r3, r4
   32310:	mov	sl, lr
   32314:	mov	r9, r8
   32318:	ldr	r2, [r3], #32
   3231c:	add	sl, sl, #4
   32320:	add	r9, r9, #4
   32324:	tst	r2, r6
   32328:	beq	32318 <__assert_fail@plt+0x20450>
   3232c:	ldr	r2, [sl]
   32330:	mov	r3, r0
   32334:	str	r2, [r3, r1, lsl #2]!
   32338:	ldr	r2, [r9]
   3233c:	str	r2, [r3, #1024]	; 0x400
   32340:	b	322f0 <__assert_fail@plt+0x20428>
   32344:	ldr	r2, [fp, #-3172]	; 0xfffff39c
   32348:	cmp	r2, #0
   3234c:	beq	323d8 <__assert_fail@plt+0x20510>
   32350:	add	r1, sp, #168	; 0xa8
   32354:	sub	lr, fp, #2048	; 0x800
   32358:	mov	r5, #32
   3235c:	mov	r3, #0
   32360:	add	r4, r1, #4
   32364:	sub	r1, lr, #56	; 0x38
   32368:	sub	lr, r1, #4
   3236c:	sub	r1, fp, #1024	; 0x400
   32370:	sub	r1, r1, #56	; 0x38
   32374:	sub	r8, r1, #4
   32378:	mov	r1, #1
   3237c:	tst	r2, #1
   32380:	bne	323a0 <__assert_fail@plt+0x204d8>
   32384:	lsr	r6, r2, #1
   32388:	cmp	r3, r2, lsr #1
   3238c:	add	r5, r5, #1
   32390:	lsl	r1, r1, #1
   32394:	mov	r2, r6
   32398:	bne	3237c <__assert_fail@plt+0x204b4>
   3239c:	b	323d8 <__assert_fail@plt+0x20510>
   323a0:	mov	r7, r4
   323a4:	mov	r9, lr
   323a8:	mov	sl, r8
   323ac:	ldr	r6, [r7], #32
   323b0:	add	r9, r9, #4
   323b4:	add	sl, sl, #4
   323b8:	tst	r6, r1
   323bc:	beq	323ac <__assert_fail@plt+0x204e4>
   323c0:	ldr	r6, [sl]
   323c4:	mov	r7, r0
   323c8:	str	r6, [r7, r5, lsl #2]!
   323cc:	ldr	r6, [r9]
   323d0:	str	r6, [r7, #1024]	; 0x400
   323d4:	b	32384 <__assert_fail@plt+0x204bc>
   323d8:	ldr	r2, [fp, #-3168]	; 0xfffff3a0
   323dc:	cmp	r2, #0
   323e0:	beq	3246c <__assert_fail@plt+0x205a4>
   323e4:	add	r1, sp, #168	; 0xa8
   323e8:	sub	lr, fp, #2048	; 0x800
   323ec:	mov	r5, #64	; 0x40
   323f0:	mov	r3, #0
   323f4:	add	r4, r1, #8
   323f8:	sub	r1, lr, #56	; 0x38
   323fc:	sub	lr, r1, #4
   32400:	sub	r1, fp, #1024	; 0x400
   32404:	sub	r1, r1, #56	; 0x38
   32408:	sub	r8, r1, #4
   3240c:	mov	r1, #1
   32410:	tst	r2, #1
   32414:	bne	32434 <__assert_fail@plt+0x2056c>
   32418:	lsr	r6, r2, #1
   3241c:	cmp	r3, r2, lsr #1
   32420:	add	r5, r5, #1
   32424:	lsl	r1, r1, #1
   32428:	mov	r2, r6
   3242c:	bne	32410 <__assert_fail@plt+0x20548>
   32430:	b	3246c <__assert_fail@plt+0x205a4>
   32434:	mov	r7, r4
   32438:	mov	r9, lr
   3243c:	mov	sl, r8
   32440:	ldr	r6, [r7], #32
   32444:	add	r9, r9, #4
   32448:	add	sl, sl, #4
   3244c:	tst	r6, r1
   32450:	beq	32440 <__assert_fail@plt+0x20578>
   32454:	ldr	r6, [sl]
   32458:	mov	r7, r0
   3245c:	str	r6, [r7, r5, lsl #2]!
   32460:	ldr	r6, [r9]
   32464:	str	r6, [r7, #1024]	; 0x400
   32468:	b	32418 <__assert_fail@plt+0x20550>
   3246c:	ldr	r2, [fp, #-3164]	; 0xfffff3a4
   32470:	cmp	r2, #0
   32474:	beq	32500 <__assert_fail@plt+0x20638>
   32478:	add	r1, sp, #168	; 0xa8
   3247c:	sub	lr, fp, #2048	; 0x800
   32480:	mov	r5, #96	; 0x60
   32484:	mov	r3, #0
   32488:	add	r4, r1, #12
   3248c:	sub	r1, lr, #56	; 0x38
   32490:	sub	lr, r1, #4
   32494:	sub	r1, fp, #1024	; 0x400
   32498:	sub	r1, r1, #56	; 0x38
   3249c:	sub	r8, r1, #4
   324a0:	mov	r1, #1
   324a4:	tst	r2, #1
   324a8:	bne	324c8 <__assert_fail@plt+0x20600>
   324ac:	lsr	r6, r2, #1
   324b0:	cmp	r3, r2, lsr #1
   324b4:	add	r5, r5, #1
   324b8:	lsl	r1, r1, #1
   324bc:	mov	r2, r6
   324c0:	bne	324a4 <__assert_fail@plt+0x205dc>
   324c4:	b	32500 <__assert_fail@plt+0x20638>
   324c8:	mov	r7, r4
   324cc:	mov	r9, lr
   324d0:	mov	sl, r8
   324d4:	ldr	r6, [r7], #32
   324d8:	add	r9, r9, #4
   324dc:	add	sl, sl, #4
   324e0:	tst	r6, r1
   324e4:	beq	324d4 <__assert_fail@plt+0x2060c>
   324e8:	ldr	r6, [sl]
   324ec:	mov	r7, r0
   324f0:	str	r6, [r7, r5, lsl #2]!
   324f4:	ldr	r6, [r9]
   324f8:	str	r6, [r7, #1024]	; 0x400
   324fc:	b	324ac <__assert_fail@plt+0x205e4>
   32500:	ldr	r2, [fp, #-3160]	; 0xfffff3a8
   32504:	cmp	r2, #0
   32508:	beq	32594 <__assert_fail@plt+0x206cc>
   3250c:	add	r1, sp, #168	; 0xa8
   32510:	sub	lr, fp, #2048	; 0x800
   32514:	mov	r5, #128	; 0x80
   32518:	mov	r3, #0
   3251c:	add	r4, r1, #16
   32520:	sub	r1, lr, #56	; 0x38
   32524:	sub	lr, r1, #4
   32528:	sub	r1, fp, #1024	; 0x400
   3252c:	sub	r1, r1, #56	; 0x38
   32530:	sub	r8, r1, #4
   32534:	mov	r1, #1
   32538:	tst	r2, #1
   3253c:	bne	3255c <__assert_fail@plt+0x20694>
   32540:	lsr	r6, r2, #1
   32544:	cmp	r3, r2, lsr #1
   32548:	add	r5, r5, #1
   3254c:	lsl	r1, r1, #1
   32550:	mov	r2, r6
   32554:	bne	32538 <__assert_fail@plt+0x20670>
   32558:	b	32594 <__assert_fail@plt+0x206cc>
   3255c:	mov	r7, r4
   32560:	mov	r9, lr
   32564:	mov	sl, r8
   32568:	ldr	r6, [r7], #32
   3256c:	add	r9, r9, #4
   32570:	add	sl, sl, #4
   32574:	tst	r6, r1
   32578:	beq	32568 <__assert_fail@plt+0x206a0>
   3257c:	ldr	r6, [sl]
   32580:	mov	r7, r0
   32584:	str	r6, [r7, r5, lsl #2]!
   32588:	ldr	r6, [r9]
   3258c:	str	r6, [r7, #1024]	; 0x400
   32590:	b	32540 <__assert_fail@plt+0x20678>
   32594:	ldr	r2, [fp, #-3156]	; 0xfffff3ac
   32598:	cmp	r2, #0
   3259c:	beq	32628 <__assert_fail@plt+0x20760>
   325a0:	add	r1, sp, #168	; 0xa8
   325a4:	sub	lr, fp, #2048	; 0x800
   325a8:	mov	r5, #160	; 0xa0
   325ac:	mov	r3, #0
   325b0:	add	r4, r1, #20
   325b4:	sub	r1, lr, #56	; 0x38
   325b8:	sub	lr, r1, #4
   325bc:	sub	r1, fp, #1024	; 0x400
   325c0:	sub	r1, r1, #56	; 0x38
   325c4:	sub	r8, r1, #4
   325c8:	mov	r1, #1
   325cc:	tst	r2, #1
   325d0:	bne	325f0 <__assert_fail@plt+0x20728>
   325d4:	lsr	r6, r2, #1
   325d8:	cmp	r3, r2, lsr #1
   325dc:	add	r5, r5, #1
   325e0:	lsl	r1, r1, #1
   325e4:	mov	r2, r6
   325e8:	bne	325cc <__assert_fail@plt+0x20704>
   325ec:	b	32628 <__assert_fail@plt+0x20760>
   325f0:	mov	r7, r4
   325f4:	mov	r9, lr
   325f8:	mov	sl, r8
   325fc:	ldr	r6, [r7], #32
   32600:	add	r9, r9, #4
   32604:	add	sl, sl, #4
   32608:	tst	r6, r1
   3260c:	beq	325fc <__assert_fail@plt+0x20734>
   32610:	ldr	r6, [sl]
   32614:	mov	r7, r0
   32618:	str	r6, [r7, r5, lsl #2]!
   3261c:	ldr	r6, [r9]
   32620:	str	r6, [r7, #1024]	; 0x400
   32624:	b	325d4 <__assert_fail@plt+0x2070c>
   32628:	ldr	r2, [fp, #-3152]	; 0xfffff3b0
   3262c:	cmp	r2, #0
   32630:	beq	326bc <__assert_fail@plt+0x207f4>
   32634:	add	r1, sp, #168	; 0xa8
   32638:	sub	lr, fp, #2048	; 0x800
   3263c:	mov	r5, #192	; 0xc0
   32640:	mov	r3, #0
   32644:	add	r4, r1, #24
   32648:	sub	r1, lr, #56	; 0x38
   3264c:	sub	lr, r1, #4
   32650:	sub	r1, fp, #1024	; 0x400
   32654:	sub	r1, r1, #56	; 0x38
   32658:	sub	r8, r1, #4
   3265c:	mov	r1, #1
   32660:	tst	r2, #1
   32664:	bne	32684 <__assert_fail@plt+0x207bc>
   32668:	lsr	r6, r2, #1
   3266c:	cmp	r3, r2, lsr #1
   32670:	add	r5, r5, #1
   32674:	lsl	r1, r1, #1
   32678:	mov	r2, r6
   3267c:	bne	32660 <__assert_fail@plt+0x20798>
   32680:	b	326bc <__assert_fail@plt+0x207f4>
   32684:	mov	r7, r4
   32688:	mov	r9, lr
   3268c:	mov	sl, r8
   32690:	ldr	r6, [r7], #32
   32694:	add	r9, r9, #4
   32698:	add	sl, sl, #4
   3269c:	tst	r6, r1
   326a0:	beq	32690 <__assert_fail@plt+0x207c8>
   326a4:	ldr	r6, [sl]
   326a8:	mov	r7, r0
   326ac:	str	r6, [r7, r5, lsl #2]!
   326b0:	ldr	r6, [r9]
   326b4:	str	r6, [r7, #1024]	; 0x400
   326b8:	b	32668 <__assert_fail@plt+0x207a0>
   326bc:	ldr	r2, [fp, #-3148]	; 0xfffff3b4
   326c0:	cmp	r2, #0
   326c4:	beq	32750 <__assert_fail@plt+0x20888>
   326c8:	add	r1, sp, #168	; 0xa8
   326cc:	sub	lr, fp, #2048	; 0x800
   326d0:	mov	r5, #224	; 0xe0
   326d4:	mov	r3, #0
   326d8:	add	r4, r1, #28
   326dc:	sub	r1, lr, #56	; 0x38
   326e0:	sub	lr, r1, #4
   326e4:	sub	r1, fp, #1024	; 0x400
   326e8:	sub	r1, r1, #56	; 0x38
   326ec:	sub	r8, r1, #4
   326f0:	mov	r1, #1
   326f4:	tst	r2, #1
   326f8:	bne	32718 <__assert_fail@plt+0x20850>
   326fc:	lsr	r6, r2, #1
   32700:	cmp	r3, r2, lsr #1
   32704:	add	r5, r5, #1
   32708:	lsl	r1, r1, #1
   3270c:	mov	r2, r6
   32710:	bne	326f4 <__assert_fail@plt+0x2082c>
   32714:	b	32750 <__assert_fail@plt+0x20888>
   32718:	mov	r7, r4
   3271c:	mov	r9, lr
   32720:	mov	sl, r8
   32724:	ldr	r6, [r7], #32
   32728:	add	r9, r9, #4
   3272c:	add	sl, sl, #4
   32730:	tst	r6, r1
   32734:	beq	32724 <__assert_fail@plt+0x2085c>
   32738:	ldr	r6, [sl]
   3273c:	mov	r7, r0
   32740:	str	r6, [r7, r5, lsl #2]!
   32744:	ldr	r6, [r9]
   32748:	str	r6, [r7, #1024]	; 0x400
   3274c:	b	326fc <__assert_fail@plt+0x20834>
   32750:	ldr	r8, [sp, #132]	; 0x84
   32754:	tst	ip, #1024	; 0x400
   32758:	add	r3, sp, #168	; 0xa8
   3275c:	beq	327a0 <__assert_fail@plt+0x208d8>
   32760:	ldr	r1, [sp, #164]	; 0xa4
   32764:	ldrb	r2, [r3, #1]
   32768:	tst	r2, #4
   3276c:	bne	3278c <__assert_fail@plt+0x208c4>
   32770:	ldr	r2, [sp, #128]	; 0x80
   32774:	add	r3, r3, #32
   32778:	subs	r1, r1, #1
   3277c:	add	r2, r2, #4
   32780:	str	r2, [sp, #128]	; 0x80
   32784:	bne	32764 <__assert_fail@plt+0x2089c>
   32788:	b	327a0 <__assert_fail@plt+0x208d8>
   3278c:	ldr	r1, [sp, #128]	; 0x80
   32790:	tst	r8, #1
   32794:	ldr	r1, [r1]
   32798:	str	r1, [r0, #40]	; 0x28
   3279c:	strne	r1, [r0, #1064]	; 0x428
   327a0:	ldr	r0, [fp, #-3132]	; 0xfffff3c4
   327a4:	bl	17c10 <__assert_fail@plt+0x5d48>
   327a8:	sub	lr, fp, #6144	; 0x1800
   327ac:	sub	r0, lr, #104	; 0x68
   327b0:	add	r4, r0, #8
   327b4:	ldr	r0, [r4], #12
   327b8:	bl	17c10 <__assert_fail@plt+0x5d48>
   327bc:	ldr	r0, [sp, #164]	; 0xa4
   327c0:	subs	r0, r0, #1
   327c4:	str	r0, [sp, #164]	; 0xa4
   327c8:	bne	327b4 <__assert_fail@plt+0x208ec>
   327cc:	mov	r0, #1
   327d0:	sub	sp, fp, #48	; 0x30
   327d4:	vpop	{d8-d9}
   327d8:	add	sp, sp, #4
   327dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   327e4:	add	fp, sp, #28
   327e8:	sub	sp, sp, #68	; 0x44
   327ec:	ldr	r4, [r1, #8]
   327f0:	ldr	r6, [r1, #12]
   327f4:	mov	r8, r0
   327f8:	mov	r0, #1
   327fc:	mov	r5, r1
   32800:	str	r0, [fp, #-36]	; 0xffffffdc
   32804:	str	r0, [fp, #-40]	; 0xffffffd8
   32808:	mov	r0, #4
   3280c:	bl	38450 <__assert_fail@plt+0x26588>
   32810:	cmp	r0, #0
   32814:	str	r0, [fp, #-32]	; 0xffffffe0
   32818:	beq	32ef8 <__assert_fail@plt+0x21030>
   3281c:	str	r4, [r0]
   32820:	sub	r3, fp, #40	; 0x28
   32824:	mov	r0, r8
   32828:	mov	r1, r5
   3282c:	mov	r2, r6
   32830:	str	r5, [sp, #28]
   32834:	bl	32f1c <__assert_fail@plt+0x21054>
   32838:	cmp	r0, #0
   3283c:	bne	32ef0 <__assert_fail@plt+0x21028>
   32840:	mov	r4, r6
   32844:	mov	r9, #1
   32848:	mov	r1, #0
   3284c:	str	r8, [sp, #48]	; 0x30
   32850:	cmp	r4, #1
   32854:	bge	32884 <__assert_fail@plt+0x209bc>
   32858:	b	32eb0 <__assert_fail@plt+0x20fe8>
   3285c:	mov	r0, r8
   32860:	mov	r1, lr
   32864:	mov	r2, r4
   32868:	sub	r3, fp, #40	; 0x28
   3286c:	bl	32f1c <__assert_fail@plt+0x21054>
   32870:	ldr	r1, [sp, #4]
   32874:	cmp	r0, #0
   32878:	bne	32ef0 <__assert_fail@plt+0x21028>
   3287c:	cmp	r4, #1
   32880:	blt	32eb0 <__assert_fail@plt+0x20fe8>
   32884:	ldr	lr, [sp, #28]
   32888:	ldr	r0, [lr]
   3288c:	ldr	r2, [r0, r4, lsl #2]
   32890:	cmp	r2, #0
   32894:	mov	r2, #0
   32898:	addeq	r2, r1, #1
   3289c:	ldr	r1, [r8, #120]	; 0x78
   328a0:	cmp	r2, r1
   328a4:	bgt	32eb8 <__assert_fail@plt+0x20ff0>
   328a8:	mov	r0, #0
   328ac:	str	r4, [sp, #36]	; 0x24
   328b0:	sub	r4, r4, #1
   328b4:	str	r2, [sp, #4]
   328b8:	str	r0, [fp, #-36]	; 0xffffffdc
   328bc:	ldr	r0, [r8, #100]	; 0x64
   328c0:	ldr	r1, [r0, r4, lsl #2]
   328c4:	cmp	r1, #0
   328c8:	beq	3285c <__assert_fail@plt+0x20994>
   328cc:	ldr	r0, [r1, #20]
   328d0:	cmp	r0, #1
   328d4:	blt	3285c <__assert_fail@plt+0x20994>
   328d8:	ldr	r0, [r8, #84]	; 0x54
   328dc:	mov	r2, #0
   328e0:	str	r4, [sp, #32]
   328e4:	str	r1, [sp, #16]
   328e8:	str	r0, [sp, #24]
   328ec:	b	32938 <__assert_fail@plt+0x20a70>
   328f0:	ldr	r2, [fp, #-40]	; 0xffffffd8
   328f4:	cmp	r2, #0
   328f8:	beq	32b80 <__assert_fail@plt+0x20cb8>
   328fc:	ldr	r1, [fp, #-36]	; 0xffffffdc
   32900:	ldr	r6, [fp, #-44]	; 0xffffffd4
   32904:	cmp	r1, #0
   32908:	bne	32db8 <__assert_fail@plt+0x20ef0>
   3290c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   32910:	str	r6, [r0]
   32914:	ldr	r0, [fp, #-36]	; 0xffffffdc
   32918:	add	r0, r0, #1
   3291c:	str	r0, [fp, #-36]	; 0xffffffdc
   32920:	ldr	r1, [sp, #16]
   32924:	ldr	r2, [sp, #20]
   32928:	ldr	r0, [r1, #20]
   3292c:	add	r2, r2, #1
   32930:	cmp	r2, r0
   32934:	bge	3285c <__assert_fail@plt+0x20994>
   32938:	ldr	r0, [r1, #24]
   3293c:	str	r2, [sp, #20]
   32940:	ldr	r2, [r0, r2, lsl #2]
   32944:	ldr	r0, [sp, #24]
   32948:	ldr	r0, [r0]
   3294c:	mov	r1, r2
   32950:	str	r2, [fp, #-44]	; 0xffffffd4
   32954:	add	r0, r0, r2, lsl #3
   32958:	ldrb	r0, [r0, #6]
   3295c:	tst	r0, #16
   32960:	bne	32a00 <__assert_fail@plt+0x20b38>
   32964:	ldr	r0, [sp, #24]
   32968:	ldr	r1, [fp, #-44]	; 0xffffffd4
   3296c:	mov	r2, r4
   32970:	ldr	r0, [r0]
   32974:	add	r1, r0, r1, lsl #3
   32978:	mov	r0, r8
   3297c:	bl	30890 <__assert_fail@plt+0x1e9c8>
   32980:	ldr	lr, [sp, #28]
   32984:	cmp	r0, #0
   32988:	beq	32920 <__assert_fail@plt+0x20a58>
   3298c:	ldr	r0, [lr]
   32990:	ldr	r1, [sp, #36]	; 0x24
   32994:	ldr	r0, [r0, r1, lsl #2]
   32998:	cmp	r0, #0
   3299c:	beq	32920 <__assert_fail@plt+0x20a58>
   329a0:	ldr	r2, [r0, #8]
   329a4:	cmp	r2, #1
   329a8:	blt	32920 <__assert_fail@plt+0x20a58>
   329ac:	ldr	r1, [sp, #24]
   329b0:	ldr	r3, [fp, #-44]	; 0xffffffd4
   329b4:	ldr	r0, [r0, #12]
   329b8:	ldr	r1, [r1, #12]
   329bc:	ldr	r1, [r1, r3, lsl #2]
   329c0:	subs	r3, r2, #1
   329c4:	mov	r2, #0
   329c8:	beq	329ec <__assert_fail@plt+0x20b24>
   329cc:	add	r7, r2, r3
   329d0:	lsr	r6, r7, #1
   329d4:	ldr	r5, [r0, r6, lsl #2]
   329d8:	cmp	r5, r1
   329dc:	addlt	r2, r9, r7, lsr #1
   329e0:	movge	r3, r6
   329e4:	cmp	r2, r3
   329e8:	bcc	329cc <__assert_fail@plt+0x20b04>
   329ec:	ldr	r2, [r0, r2, lsl #2]
   329f0:	mov	r0, #1
   329f4:	cmp	r2, r1
   329f8:	bne	32920 <__assert_fail@plt+0x20a58>
   329fc:	b	32a5c <__assert_fail@plt+0x20b94>
   32a00:	ldr	r7, [r8, #84]	; 0x54
   32a04:	ldr	r1, [fp, #-44]	; 0xffffffd4
   32a08:	mov	r5, r4
   32a0c:	ldr	r4, [lr, #12]
   32a10:	mov	r2, r8
   32a14:	mov	r3, r5
   32a18:	mov	r0, r7
   32a1c:	bl	30504 <__assert_fail@plt+0x1e63c>
   32a20:	cmp	r0, #1
   32a24:	blt	32a4c <__assert_fail@plt+0x20b84>
   32a28:	add	r1, r0, r5
   32a2c:	cmp	r1, r4
   32a30:	ble	32b04 <__assert_fail@plt+0x20c3c>
   32a34:	ldr	lr, [sp, #28]
   32a38:	ldr	r4, [sp, #32]
   32a3c:	ldr	ip, [lr, #20]
   32a40:	cmp	ip, #0
   32a44:	bne	32a68 <__assert_fail@plt+0x20ba0>
   32a48:	b	328f0 <__assert_fail@plt+0x20a28>
   32a4c:	ldr	lr, [sp, #28]
   32a50:	cmp	r0, #0
   32a54:	mov	r4, r5
   32a58:	beq	32964 <__assert_fail@plt+0x20a9c>
   32a5c:	ldr	ip, [lr, #20]
   32a60:	cmp	ip, #0
   32a64:	beq	328f0 <__assert_fail@plt+0x20a28>
   32a68:	add	r0, r0, r4
   32a6c:	ldr	r1, [fp, #-44]	; 0xffffffd4
   32a70:	str	r0, [sp, #40]	; 0x28
   32a74:	ldr	r0, [sp, #24]
   32a78:	ldr	r0, [r0, #12]
   32a7c:	ldr	r0, [r0, r1, lsl #2]
   32a80:	str	r0, [sp, #8]
   32a84:	ldr	r0, [r8, #108]	; 0x6c
   32a88:	cmp	r0, #1
   32a8c:	blt	32bac <__assert_fail@plt+0x20ce4>
   32a90:	ldr	r2, [r8, #116]	; 0x74
   32a94:	ldr	r1, [sp, #40]	; 0x28
   32a98:	mov	sl, #0
   32a9c:	mov	r3, r0
   32aa0:	add	r7, r3, sl
   32aa4:	add	r7, r7, r7, lsr #31
   32aa8:	asr	r6, r7, #1
   32aac:	add	r5, r6, r6, lsl #1
   32ab0:	add	r5, r2, r5, lsl #3
   32ab4:	ldr	r5, [r5, #4]
   32ab8:	cmp	r5, r1
   32abc:	addlt	sl, r9, r7, asr #1
   32ac0:	movge	r3, r6
   32ac4:	cmp	sl, r3
   32ac8:	blt	32aa0 <__assert_fail@plt+0x20bd8>
   32acc:	cmp	sl, r0
   32ad0:	bge	32bbc <__assert_fail@plt+0x20cf4>
   32ad4:	ldr	r2, [r8, #116]	; 0x74
   32ad8:	add	r3, sl, sl, lsl #1
   32adc:	add	r2, r2, r3, lsl #3
   32ae0:	ldr	r2, [r2, #4]
   32ae4:	cmp	r2, r1
   32ae8:	mvnne	sl, #0
   32aec:	cmp	r0, #1
   32af0:	bge	32bc8 <__assert_fail@plt+0x20d00>
   32af4:	mov	r5, #0
   32af8:	cmp	r5, r0
   32afc:	blt	32c08 <__assert_fail@plt+0x20d40>
   32b00:	b	32c2c <__assert_fail@plt+0x20d64>
   32b04:	ldr	lr, [sp, #28]
   32b08:	ldr	r4, [sp, #32]
   32b0c:	ldr	r2, [lr]
   32b10:	ldr	r2, [r2, r1, lsl #2]
   32b14:	cmp	r2, #0
   32b18:	beq	32964 <__assert_fail@plt+0x20a9c>
   32b1c:	ldr	r3, [r2, #8]
   32b20:	cmp	r3, #1
   32b24:	blt	32964 <__assert_fail@plt+0x20a9c>
   32b28:	ldr	r1, [r7, #12]
   32b2c:	ldr	r7, [fp, #-44]	; 0xffffffd4
   32b30:	ldr	r2, [r2, #12]
   32b34:	ldr	r1, [r1, r7, lsl #2]
   32b38:	subs	r7, r3, #1
   32b3c:	mov	r3, #0
   32b40:	beq	32b64 <__assert_fail@plt+0x20c9c>
   32b44:	add	r6, r3, r7
   32b48:	lsr	r5, r6, #1
   32b4c:	ldr	r4, [r2, r5, lsl #2]
   32b50:	cmp	r4, r1
   32b54:	addlt	r3, r9, r6, lsr #1
   32b58:	movge	r7, r5
   32b5c:	cmp	r3, r7
   32b60:	bcc	32b44 <__assert_fail@plt+0x20c7c>
   32b64:	ldr	r4, [sp, #32]
   32b68:	cmp	r0, #0
   32b6c:	beq	32964 <__assert_fail@plt+0x20a9c>
   32b70:	ldr	r2, [r2, r3, lsl #2]
   32b74:	cmp	r2, r1
   32b78:	beq	32a5c <__assert_fail@plt+0x20b94>
   32b7c:	b	32964 <__assert_fail@plt+0x20a9c>
   32b80:	mov	r0, #4
   32b84:	str	r9, [fp, #-36]	; 0xffffffdc
   32b88:	str	r9, [fp, #-40]	; 0xffffffd8
   32b8c:	bl	38450 <__assert_fail@plt+0x26588>
   32b90:	ldr	r1, [fp, #-44]	; 0xffffffd4
   32b94:	cmp	r0, #0
   32b98:	str	r0, [fp, #-32]	; 0xffffffe0
   32b9c:	beq	32edc <__assert_fail@plt+0x21014>
   32ba0:	ldr	lr, [sp, #28]
   32ba4:	str	r1, [r0]
   32ba8:	b	32920 <__assert_fail@plt+0x20a58>
   32bac:	ldr	r1, [sp, #40]	; 0x28
   32bb0:	mov	sl, #0
   32bb4:	cmp	sl, r0
   32bb8:	blt	32ad4 <__assert_fail@plt+0x20c0c>
   32bbc:	mvn	sl, #0
   32bc0:	cmp	r0, #1
   32bc4:	blt	32af4 <__assert_fail@plt+0x20c2c>
   32bc8:	ldr	r2, [r8, #116]	; 0x74
   32bcc:	mov	r5, #0
   32bd0:	mov	r3, r0
   32bd4:	add	r7, r3, r5
   32bd8:	add	r7, r7, r7, lsr #31
   32bdc:	asr	r6, r7, #1
   32be0:	add	r1, r6, r6, lsl #1
   32be4:	add	r1, r2, r1, lsl #3
   32be8:	ldr	r1, [r1, #4]
   32bec:	cmp	r1, r4
   32bf0:	addlt	r5, r9, r7, asr #1
   32bf4:	movge	r3, r6
   32bf8:	cmp	r5, r3
   32bfc:	blt	32bd4 <__assert_fail@plt+0x20d0c>
   32c00:	cmp	r5, r0
   32c04:	bge	32c2c <__assert_fail@plt+0x20d64>
   32c08:	ldr	r0, [r8, #116]	; 0x74
   32c0c:	add	r1, r5, r5, lsl #1
   32c10:	add	r0, r0, r1, lsl #3
   32c14:	ldr	r0, [r0, #4]
   32c18:	cmp	r0, r4
   32c1c:	mvnne	r5, #0
   32c20:	cmp	ip, #1
   32c24:	bge	32c38 <__assert_fail@plt+0x20d70>
   32c28:	b	328f0 <__assert_fail@plt+0x20a28>
   32c2c:	mvn	r5, #0
   32c30:	cmp	ip, #1
   32c34:	blt	328f0 <__assert_fail@plt+0x20a28>
   32c38:	ldr	ip, [r8, #84]	; 0x54
   32c3c:	mov	r6, #0
   32c40:	str	ip, [sp, #12]
   32c44:	ldr	r0, [lr, #24]
   32c48:	ldr	r3, [r8, #116]	; 0x74
   32c4c:	ldr	r4, [ip]
   32c50:	mvn	r8, #0
   32c54:	ldr	r2, [r0, r6, lsl #2]
   32c58:	mov	r0, r3
   32c5c:	add	r1, r2, r2, lsl #1
   32c60:	ldr	r7, [r0, r1, lsl #3]!
   32c64:	ldr	r0, [r0, #8]
   32c68:	ldr	r4, [r4, r7, lsl #3]
   32c6c:	ldr	r7, [sp, #40]	; 0x28
   32c70:	cmp	r0, r7
   32c74:	str	r4, [sp, #44]	; 0x2c
   32c78:	ble	32c94 <__assert_fail@plt+0x20dcc>
   32c7c:	mvn	r9, #0
   32c80:	ldr	r1, [sp, #36]	; 0x24
   32c84:	ldr	r4, [sp, #32]
   32c88:	cmp	r0, r1
   32c8c:	blt	32d18 <__assert_fail@plt+0x20e50>
   32c90:	b	32d94 <__assert_fail@plt+0x20ecc>
   32c94:	add	r1, r3, r1, lsl #3
   32c98:	mov	r9, #1
   32c9c:	ldr	r1, [r1, #12]
   32ca0:	cmp	r1, r7
   32ca4:	blt	32d08 <__assert_fail@plt+0x20e40>
   32ca8:	sub	r1, r1, r7
   32cac:	cmp	r0, r7
   32cb0:	mov	r7, #1
   32cb4:	clz	r1, r1
   32cb8:	lsr	r4, r1, #5
   32cbc:	lsl	r1, r4, #1
   32cc0:	orreq	r1, r7, r4, lsl #1
   32cc4:	cmp	r1, #0
   32cc8:	beq	32d78 <__assert_fail@plt+0x20eb0>
   32ccc:	ldr	r4, [sp, #48]	; 0x30
   32cd0:	ldr	r2, [sp, #44]	; 0x2c
   32cd4:	ldr	r3, [sp, #8]
   32cd8:	str	sl, [sp]
   32cdc:	mov	r0, r4
   32ce0:	bl	34518 <__assert_fail@plt+0x22650>
   32ce4:	ldr	lr, [sp, #28]
   32ce8:	mov	r9, r0
   32cec:	ldr	r3, [r4, #116]	; 0x74
   32cf0:	ldr	ip, [sp, #12]
   32cf4:	ldr	r0, [lr, #24]
   32cf8:	ldr	r2, [r0, r6, lsl #2]
   32cfc:	add	r0, r2, r2, lsl #1
   32d00:	add	r0, r3, r0, lsl #3
   32d04:	ldr	r0, [r0, #8]
   32d08:	ldr	r1, [sp, #36]	; 0x24
   32d0c:	ldr	r4, [sp, #32]
   32d10:	cmp	r0, r1
   32d14:	bge	32d94 <__assert_fail@plt+0x20ecc>
   32d18:	add	r1, r2, r2, lsl #1
   32d1c:	mov	r8, #1
   32d20:	add	r1, r3, r1, lsl #3
   32d24:	ldr	r1, [r1, #12]
   32d28:	cmp	r1, r4
   32d2c:	blt	32d94 <__assert_fail@plt+0x20ecc>
   32d30:	sub	r1, r1, r4
   32d34:	cmp	r0, r4
   32d38:	mov	r0, #1
   32d3c:	clz	r1, r1
   32d40:	lsr	r2, r1, #5
   32d44:	lsl	r1, r2, #1
   32d48:	orreq	r1, r0, r2, lsl #1
   32d4c:	cmp	r1, #0
   32d50:	beq	32d90 <__assert_fail@plt+0x20ec8>
   32d54:	ldr	r0, [sp, #48]	; 0x30
   32d58:	ldr	r2, [sp, #44]	; 0x2c
   32d5c:	ldr	r3, [fp, #-44]	; 0xffffffd4
   32d60:	str	r5, [sp]
   32d64:	bl	34518 <__assert_fail@plt+0x22650>
   32d68:	ldr	ip, [sp, #12]
   32d6c:	ldr	lr, [sp, #28]
   32d70:	mov	r8, r0
   32d74:	b	32d94 <__assert_fail@plt+0x20ecc>
   32d78:	mov	r9, #0
   32d7c:	ldr	r1, [sp, #36]	; 0x24
   32d80:	ldr	r4, [sp, #32]
   32d84:	cmp	r0, r1
   32d88:	blt	32d18 <__assert_fail@plt+0x20e50>
   32d8c:	b	32d94 <__assert_fail@plt+0x20ecc>
   32d90:	mov	r8, #0
   32d94:	cmp	r8, r9
   32d98:	ldr	r8, [sp, #48]	; 0x30
   32d9c:	mov	r9, #1
   32da0:	bne	32920 <__assert_fail@plt+0x20a58>
   32da4:	ldr	r0, [lr, #20]
   32da8:	add	r6, r6, #1
   32dac:	cmp	r6, r0
   32db0:	blt	32c44 <__assert_fail@plt+0x20d7c>
   32db4:	b	328f0 <__assert_fail@plt+0x20a28>
   32db8:	cmp	r2, r1
   32dbc:	bne	32df8 <__assert_fail@plt+0x20f30>
   32dc0:	lsl	r0, r2, #1
   32dc4:	lsl	r1, r2, #3
   32dc8:	str	r0, [fp, #-40]	; 0xffffffd8
   32dcc:	ldr	r0, [fp, #-32]	; 0xffffffe0
   32dd0:	bl	38480 <__assert_fail@plt+0x265b8>
   32dd4:	cmp	r0, #0
   32dd8:	beq	32f14 <__assert_fail@plt+0x2104c>
   32ddc:	str	r0, [fp, #-32]	; 0xffffffe0
   32de0:	ldr	lr, [sp, #28]
   32de4:	ldr	r1, [fp, #-36]	; 0xffffffdc
   32de8:	ldr	r2, [r0]
   32dec:	cmp	r2, r6
   32df0:	bgt	32e08 <__assert_fail@plt+0x20f40>
   32df4:	b	32e78 <__assert_fail@plt+0x20fb0>
   32df8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   32dfc:	ldr	r2, [r0]
   32e00:	cmp	r2, r6
   32e04:	ble	32e78 <__assert_fail@plt+0x20fb0>
   32e08:	cmp	r1, #1
   32e0c:	blt	32ea8 <__assert_fail@plt+0x20fe0>
   32e10:	ands	r3, r1, #3
   32e14:	sub	ip, r1, #1
   32e18:	beq	32e3c <__assert_fail@plt+0x20f74>
   32e1c:	add	r2, r0, r1, lsl #2
   32e20:	mov	r7, r2
   32e24:	ldr	r5, [r7, #-4]!
   32e28:	subs	r3, r3, #1
   32e2c:	sub	r1, r1, #1
   32e30:	str	r5, [r2]
   32e34:	mov	r2, r7
   32e38:	bne	32e24 <__assert_fail@plt+0x20f5c>
   32e3c:	cmp	ip, #3
   32e40:	bcc	32e70 <__assert_fail@plt+0x20fa8>
   32e44:	add	r2, r0, r1, lsl #2
   32e48:	sub	r2, r2, #8
   32e4c:	ldr	r5, [r2, #4]
   32e50:	ldmda	r2, {r3, r7, ip}
   32e54:	sub	sl, r2, #4
   32e58:	sub	r1, r1, #4
   32e5c:	cmp	r1, #0
   32e60:	stm	sl, {r3, r7, ip}
   32e64:	str	r5, [r2, #8]
   32e68:	sub	r2, r2, #16
   32e6c:	bgt	32e4c <__assert_fail@plt+0x20f84>
   32e70:	mov	r1, #0
   32e74:	b	32ea8 <__assert_fail@plt+0x20fe0>
   32e78:	add	r2, r0, r1, lsl #2
   32e7c:	ldr	r3, [r2, #-4]
   32e80:	cmp	r3, r6
   32e84:	ble	32ea8 <__assert_fail@plt+0x20fe0>
   32e88:	sub	r1, r1, #2
   32e8c:	str	r3, [r2]
   32e90:	sub	r1, r1, #1
   32e94:	ldr	r3, [r2, #-8]
   32e98:	sub	r2, r2, #4
   32e9c:	cmp	r3, r6
   32ea0:	bgt	32e8c <__assert_fail@plt+0x20fc4>
   32ea4:	add	r1, r1, #2
   32ea8:	str	r6, [r0, r1, lsl #2]
   32eac:	b	32914 <__assert_fail@plt+0x20a4c>
   32eb0:	mov	r7, #0
   32eb4:	b	32ec8 <__assert_fail@plt+0x21000>
   32eb8:	lsl	r2, r4, #2
   32ebc:	mov	r1, #0
   32ec0:	mov	r7, #0
   32ec4:	bl	11d0c <memset@plt>
   32ec8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   32ecc:	bl	17c10 <__assert_fail@plt+0x5d48>
   32ed0:	mov	r0, r7
   32ed4:	sub	sp, fp, #28
   32ed8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32edc:	mov	r0, #0
   32ee0:	mov	r7, #12
   32ee4:	str	r0, [fp, #-40]	; 0xffffffd8
   32ee8:	str	r0, [fp, #-36]	; 0xffffffdc
   32eec:	b	32ec8 <__assert_fail@plt+0x21000>
   32ef0:	mov	r7, r0
   32ef4:	b	32ec8 <__assert_fail@plt+0x21000>
   32ef8:	mov	r0, #0
   32efc:	mov	r7, #12
   32f00:	str	r0, [fp, #-40]	; 0xffffffd8
   32f04:	str	r0, [fp, #-36]	; 0xffffffdc
   32f08:	mov	r0, r7
   32f0c:	sub	sp, fp, #28
   32f10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f14:	mov	r7, #12
   32f18:	b	32ec8 <__assert_fail@plt+0x21000>
   32f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32f20:	add	fp, sp, #28
   32f24:	sub	sp, sp, #140	; 0x8c
   32f28:	mov	r5, r1
   32f2c:	ldr	r1, [r0, #84]	; 0x54
   32f30:	mov	ip, r2
   32f34:	mov	r2, #0
   32f38:	str	r0, [sp, #76]	; 0x4c
   32f3c:	str	r2, [fp, #-76]	; 0xffffffb4
   32f40:	str	ip, [sp, #80]	; 0x50
   32f44:	str	r5, [sp, #84]	; 0x54
   32f48:	str	r1, [fp, #-80]	; 0xffffffb0
   32f4c:	ldr	r1, [r0, #100]	; 0x64
   32f50:	ldr	r8, [r1, ip, lsl #2]
   32f54:	ldr	r1, [r3, #4]
   32f58:	cmp	r8, #0
   32f5c:	mov	r6, r8
   32f60:	addne	r6, r6, #4
   32f64:	cmp	r1, #0
   32f68:	str	r6, [sp, #68]	; 0x44
   32f6c:	beq	33350 <__assert_fail@plt+0x21488>
   32f70:	mov	r9, r3
   32f74:	cmp	r8, #0
   32f78:	beq	33370 <__assert_fail@plt+0x214a8>
   32f7c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   32f80:	mov	r0, #0
   32f84:	mov	r2, r9
   32f88:	str	r9, [sp, #60]	; 0x3c
   32f8c:	str	r0, [fp, #-72]	; 0xffffffb8
   32f90:	sub	r0, fp, #72	; 0x48
   32f94:	bl	301d4 <__assert_fail@plt+0x1e30c>
   32f98:	ldr	r9, [fp, #-72]	; 0xffffffb8
   32f9c:	cmp	r9, #0
   32fa0:	bne	33e28 <__assert_fail@plt+0x21f60>
   32fa4:	mov	r4, r0
   32fa8:	mov	r5, r0
   32fac:	ldr	r0, [r4, #28]!
   32fb0:	cmp	r0, #0
   32fb4:	bne	3304c <__assert_fail@plt+0x21184>
   32fb8:	ldr	r0, [sp, #60]	; 0x3c
   32fbc:	mov	r1, #0
   32fc0:	ldr	r0, [r0, #4]
   32fc4:	str	r0, [r5, #28]
   32fc8:	lsl	r0, r0, #2
   32fcc:	str	r1, [r5, #32]
   32fd0:	bl	38450 <__assert_fail@plt+0x26588>
   32fd4:	cmp	r0, #0
   32fd8:	mov	r1, #12
   32fdc:	mov	r9, #12
   32fe0:	str	r0, [r5, #36]	; 0x24
   32fe4:	movne	r1, #0
   32fe8:	cmp	r0, #0
   32fec:	str	r1, [fp, #-72]	; 0xffffffb8
   32ff0:	beq	33e28 <__assert_fail@plt+0x21f60>
   32ff4:	ldr	r0, [sp, #60]	; 0x3c
   32ff8:	ldr	r0, [r0, #4]
   32ffc:	cmp	r0, #1
   33000:	blt	3304c <__assert_fail@plt+0x21184>
   33004:	ldr	r7, [sp, #60]	; 0x3c
   33008:	mov	r5, #0
   3300c:	ldr	r0, [r7, #8]
   33010:	ldr	r1, [fp, #-80]	; 0xffffffb0
   33014:	ldr	r0, [r0, r5, lsl #2]
   33018:	ldr	r1, [r1, #28]
   3301c:	add	r0, r0, r0, lsl #1
   33020:	add	r1, r1, r0, lsl #2
   33024:	mov	r0, r4
   33028:	bl	2bee8 <__assert_fail@plt+0x1a020>
   3302c:	cmp	r0, #0
   33030:	bne	33e24 <__assert_fail@plt+0x21f5c>
   33034:	ldr	r0, [r7, #4]
   33038:	add	r5, r5, #1
   3303c:	cmp	r5, r0
   33040:	blt	3300c <__assert_fail@plt+0x21144>
   33044:	mov	r0, #0
   33048:	str	r0, [fp, #-72]	; 0xffffffb8
   3304c:	ldr	r0, [sp, #60]	; 0x3c
   33050:	mov	r1, r6
   33054:	mov	r2, r4
   33058:	bl	33e98 <__assert_fail@plt+0x21fd0>
   3305c:	cmp	r0, #0
   33060:	str	r0, [fp, #-76]	; 0xffffffb4
   33064:	bne	33e50 <__assert_fail@plt+0x21f88>
   33068:	ldr	r5, [sp, #84]	; 0x54
   3306c:	ldr	r9, [sp, #60]	; 0x3c
   33070:	ldr	r0, [r5, #20]
   33074:	cmp	r0, #0
   33078:	beq	33370 <__assert_fail@plt+0x214a8>
   3307c:	ldr	lr, [sp, #80]	; 0x50
   33080:	cmp	r0, #1
   33084:	str	r8, [sp, #56]	; 0x38
   33088:	blt	33364 <__assert_fail@plt+0x2149c>
   3308c:	ldr	r0, [sp, #76]	; 0x4c
   33090:	mov	r1, #0
   33094:	ldr	r0, [r0, #116]	; 0x74
   33098:	str	r0, [sp, #64]	; 0x40
   3309c:	b	330b4 <__assert_fail@plt+0x211ec>
   330a0:	ldr	r1, [sp, #72]	; 0x48
   330a4:	ldr	r0, [r5, #20]
   330a8:	add	r1, r1, #1
   330ac:	cmp	r1, r0
   330b0:	bge	33364 <__assert_fail@plt+0x2149c>
   330b4:	ldr	r0, [r5, #24]
   330b8:	str	r1, [sp, #72]	; 0x48
   330bc:	ldr	r0, [r0, r1, lsl #2]
   330c0:	ldr	r1, [sp, #64]	; 0x40
   330c4:	add	r0, r0, r0, lsl #1
   330c8:	add	r1, r1, r0, lsl #3
   330cc:	ldr	r2, [r1, #8]
   330d0:	cmp	r2, lr
   330d4:	bge	330a0 <__assert_fail@plt+0x211d8>
   330d8:	ldr	r1, [r1, #4]
   330dc:	cmp	r1, lr
   330e0:	blt	330a0 <__assert_fail@plt+0x211d8>
   330e4:	ldr	r1, [sp, #64]	; 0x40
   330e8:	ldr	r2, [fp, #-80]	; 0xffffffb0
   330ec:	ldr	r0, [r1, r0, lsl #3]!
   330f0:	ldr	r2, [r2]
   330f4:	ldr	r1, [r1, #12]
   330f8:	ldr	r6, [r2, r0, lsl #3]
   330fc:	ldr	r0, [r9, #4]
   33100:	cmp	r1, lr
   33104:	bne	332e0 <__assert_fail@plt+0x21418>
   33108:	cmp	r0, #1
   3310c:	blt	330a0 <__assert_fail@plt+0x211d8>
   33110:	ldr	r3, [r9, #8]
   33114:	mvn	r8, #0
   33118:	mvn	r1, #0
   3311c:	b	3313c <__assert_fail@plt+0x21274>
   33120:	ldr	r4, [r2, r7, lsl #3]
   33124:	cmp	r6, r4
   33128:	moveq	r8, r7
   3312c:	mov	r4, #1
   33130:	add	r3, r3, #4
   33134:	subs	r0, r0, #1
   33138:	beq	33174 <__assert_fail@plt+0x212ac>
   3313c:	ldr	r7, [r3]
   33140:	add	r4, r2, r7, lsl #3
   33144:	ldrb	r4, [r4, #4]
   33148:	cmp	r4, #9
   3314c:	beq	33120 <__assert_fail@plt+0x21258>
   33150:	cmp	r4, #8
   33154:	bne	3312c <__assert_fail@plt+0x21264>
   33158:	ldr	r4, [r2, r7, lsl #3]
   3315c:	cmp	r6, r4
   33160:	moveq	r1, r7
   33164:	mov	r4, #1
   33168:	add	r3, r3, #4
   3316c:	subs	r0, r0, #1
   33170:	bne	3313c <__assert_fail@plt+0x21274>
   33174:	ldr	r3, [sp, #68]	; 0x44
   33178:	cmp	r1, #0
   3317c:	bmi	33198 <__assert_fail@plt+0x212d0>
   33180:	ldr	r0, [fp, #-80]	; 0xffffffb0
   33184:	ldr	r2, [sp, #60]	; 0x3c
   33188:	bl	3408c <__assert_fail@plt+0x221c4>
   3318c:	ldr	lr, [sp, #80]	; 0x50
   33190:	cmp	r0, #0
   33194:	bne	33dd8 <__assert_fail@plt+0x21f10>
   33198:	ldr	r9, [sp, #60]	; 0x3c
   3319c:	cmp	r8, #0
   331a0:	bmi	330a0 <__assert_fail@plt+0x211d8>
   331a4:	ldr	ip, [r9, #4]
   331a8:	cmp	ip, #1
   331ac:	blt	330a0 <__assert_fail@plt+0x211d8>
   331b0:	mov	sl, #0
   331b4:	b	331ec <__assert_fail@plt+0x21324>
   331b8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   331bc:	ldr	r3, [sp, #68]	; 0x44
   331c0:	mov	r2, r9
   331c4:	bl	3408c <__assert_fail@plt+0x221c4>
   331c8:	cmp	r0, #0
   331cc:	bne	33dd8 <__assert_fail@plt+0x21f10>
   331d0:	ldr	ip, [r9, #4]
   331d4:	ldr	lr, [sp, #80]	; 0x50
   331d8:	sub	sl, sl, #1
   331dc:	mov	r1, r9
   331e0:	add	sl, sl, #1
   331e4:	cmp	sl, ip
   331e8:	bge	330a0 <__assert_fail@plt+0x211d8>
   331ec:	ldr	r1, [r9, #8]
   331f0:	ldr	r0, [fp, #-80]	; 0xffffffb0
   331f4:	ldr	r1, [r1, sl, lsl #2]
   331f8:	ldr	r3, [r0, #28]
   331fc:	add	r2, r1, r1, lsl #1
   33200:	add	r3, r3, r2, lsl #2
   33204:	ldr	r7, [r3, #4]
   33208:	cmp	r7, #1
   3320c:	blt	3326c <__assert_fail@plt+0x213a4>
   33210:	ldr	r3, [r3, #8]
   33214:	mov	lr, ip
   33218:	subs	r6, r7, #1
   3321c:	beq	33250 <__assert_fail@plt+0x21388>
   33220:	mov	r7, #0
   33224:	add	r4, r7, r6
   33228:	mov	ip, #1
   3322c:	lsr	r0, r4, #1
   33230:	ldr	r5, [r3, r0, lsl #2]
   33234:	cmp	r5, r8
   33238:	addlt	r7, ip, r4, lsr #1
   3323c:	movge	r6, r0
   33240:	mov	r4, #1
   33244:	cmp	r7, r6
   33248:	bcc	33224 <__assert_fail@plt+0x2135c>
   3324c:	b	33254 <__assert_fail@plt+0x2138c>
   33250:	mov	r7, #0
   33254:	ldr	r0, [r3, r7, lsl #2]
   33258:	mov	ip, lr
   3325c:	ldr	r5, [sp, #84]	; 0x54
   33260:	ldr	lr, [sp, #80]	; 0x50
   33264:	cmp	r0, r8
   33268:	beq	331e0 <__assert_fail@plt+0x21318>
   3326c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   33270:	ldr	r0, [r0, #24]
   33274:	add	r2, r0, r2, lsl #2
   33278:	ldr	r3, [r2, #4]
   3327c:	cmp	r3, #1
   33280:	blt	331b8 <__assert_fail@plt+0x212f0>
   33284:	ldr	r2, [r2, #8]
   33288:	subs	r7, r3, #1
   3328c:	beq	332c8 <__assert_fail@plt+0x21400>
   33290:	mov	r3, #0
   33294:	add	r0, r3, r7
   33298:	lsr	r6, r0, #1
   3329c:	ldr	r5, [r2, r6, lsl #2]
   332a0:	cmp	r5, r8
   332a4:	addlt	r3, r4, r0, lsr #1
   332a8:	movge	r7, r6
   332ac:	cmp	r3, r7
   332b0:	bcc	33294 <__assert_fail@plt+0x213cc>
   332b4:	ldr	r0, [r2, r3, lsl #2]
   332b8:	ldr	r5, [sp, #84]	; 0x54
   332bc:	cmp	r0, r8
   332c0:	bne	331b8 <__assert_fail@plt+0x212f0>
   332c4:	b	331e0 <__assert_fail@plt+0x21318>
   332c8:	mov	r3, #0
   332cc:	ldr	r0, [r2, r3, lsl #2]
   332d0:	ldr	r5, [sp, #84]	; 0x54
   332d4:	cmp	r0, r8
   332d8:	beq	331e0 <__assert_fail@plt+0x21318>
   332dc:	b	331b8 <__assert_fail@plt+0x212f0>
   332e0:	cmp	r0, #1
   332e4:	blt	330a0 <__assert_fail@plt+0x211d8>
   332e8:	mov	r7, #0
   332ec:	ldr	r1, [r9, #8]
   332f0:	ldr	r1, [r1, r7, lsl #2]
   332f4:	add	r3, r2, r1, lsl #3
   332f8:	ldrb	r3, [r3, #4]
   332fc:	orr	r3, r3, #1
   33300:	cmp	r3, #9
   33304:	bne	33338 <__assert_fail@plt+0x21470>
   33308:	ldr	r2, [r2, r1, lsl #3]
   3330c:	cmp	r6, r2
   33310:	bne	33338 <__assert_fail@plt+0x21470>
   33314:	ldr	r0, [fp, #-80]	; 0xffffffb0
   33318:	ldr	r3, [sp, #68]	; 0x44
   3331c:	mov	r2, r9
   33320:	bl	3408c <__assert_fail@plt+0x221c4>
   33324:	cmp	r0, #0
   33328:	bne	33dd8 <__assert_fail@plt+0x21f10>
   3332c:	ldr	r0, [r9, #4]
   33330:	ldr	lr, [sp, #80]	; 0x50
   33334:	mov	r1, r9
   33338:	add	r7, r7, #1
   3333c:	cmp	r7, r0
   33340:	bge	330a0 <__assert_fail@plt+0x211d8>
   33344:	ldr	r1, [fp, #-80]	; 0xffffffb0
   33348:	ldr	r2, [r1]
   3334c:	b	332ec <__assert_fail@plt+0x21424>
   33350:	ldr	r1, [r5]
   33354:	str	r2, [r1, ip, lsl #2]
   33358:	cmp	r8, #0
   3335c:	bne	333a4 <__assert_fail@plt+0x214dc>
   33360:	b	33dc8 <__assert_fail@plt+0x21f00>
   33364:	ldr	r8, [sp, #56]	; 0x38
   33368:	mov	r0, #0
   3336c:	str	r0, [fp, #-76]	; 0xffffffb4
   33370:	ldr	r1, [fp, #-80]	; 0xffffffb0
   33374:	sub	r0, fp, #76	; 0x4c
   33378:	mov	r2, r9
   3337c:	bl	301d4 <__assert_fail@plt+0x1e30c>
   33380:	ldr	r1, [r5]
   33384:	ldr	ip, [sp, #80]	; 0x50
   33388:	str	r0, [r1, ip, lsl #2]
   3338c:	ldr	r0, [sp, #76]	; 0x4c
   33390:	ldr	r9, [fp, #-76]	; 0xffffffb4
   33394:	cmp	r9, #0
   33398:	bne	33dcc <__assert_fail@plt+0x21f04>
   3339c:	cmp	r8, #0
   333a0:	beq	33dc8 <__assert_fail@plt+0x21f00>
   333a4:	ldr	r1, [r0, #100]	; 0x64
   333a8:	ldr	r1, [r1, ip, lsl #2]
   333ac:	ldrb	r1, [r1, #52]	; 0x34
   333b0:	tst	r1, #64	; 0x40
   333b4:	beq	33dc8 <__assert_fail@plt+0x21f00>
   333b8:	ldr	lr, [r0, #108]	; 0x6c
   333bc:	ldr	r8, [r0, #84]	; 0x54
   333c0:	cmp	lr, #1
   333c4:	blt	33db4 <__assert_fail@plt+0x21eec>
   333c8:	ldr	r1, [r0, #116]	; 0x74
   333cc:	mov	r4, #0
   333d0:	mov	r2, #1
   333d4:	mov	r3, lr
   333d8:	add	r7, r3, r4
   333dc:	add	r7, r7, r7, lsr #31
   333e0:	asr	r6, r7, #1
   333e4:	add	r5, r6, r6, lsl #1
   333e8:	add	r5, r1, r5, lsl #3
   333ec:	ldr	r5, [r5, #4]
   333f0:	cmp	r5, ip
   333f4:	addlt	r4, r2, r7, asr #1
   333f8:	movge	r3, r6
   333fc:	cmp	r4, r3
   33400:	blt	333d8 <__assert_fail@plt+0x21510>
   33404:	cmp	r4, lr
   33408:	bge	33dc0 <__assert_fail@plt+0x21ef8>
   3340c:	cmn	r4, #1
   33410:	beq	33dc0 <__assert_fail@plt+0x21ef8>
   33414:	ldr	r0, [sp, #76]	; 0x4c
   33418:	add	r1, r4, r4, lsl #1
   3341c:	str	r1, [sp, #28]
   33420:	ldr	r0, [r0, #116]	; 0x74
   33424:	add	r0, r0, r1, lsl #3
   33428:	ldr	r0, [r0, #4]
   3342c:	cmp	r0, ip
   33430:	bne	33dc0 <__assert_fail@plt+0x21ef8>
   33434:	ldr	r1, [sp, #68]	; 0x44
   33438:	mov	r2, #0
   3343c:	str	r2, [fp, #-72]	; 0xffffffb8
   33440:	ldr	r0, [r1, #4]
   33444:	cmp	r0, #0
   33448:	ble	33dec <__assert_fail@plt+0x21f24>
   3344c:	str	r4, [sp, #20]
   33450:	add	r0, ip, #1
   33454:	ldr	r4, [sp, #84]	; 0x54
   33458:	mov	r9, #0
   3345c:	str	r8, [sp, #36]	; 0x24
   33460:	str	r0, [sp, #12]
   33464:	sub	r0, fp, #72	; 0x48
   33468:	add	r0, r0, #16
   3346c:	str	r0, [sp, #8]
   33470:	mov	r0, #0
   33474:	str	r0, [sp, #48]	; 0x30
   33478:	b	33490 <__assert_fail@plt+0x215c8>
   3347c:	ldr	r1, [sp, #68]	; 0x44
   33480:	add	r9, r9, #1
   33484:	ldr	r0, [r1, #4]
   33488:	cmp	r9, r0
   3348c:	bge	33df4 <__assert_fail@plt+0x21f2c>
   33490:	ldr	r0, [r1, #8]
   33494:	ldr	r1, [r4, #8]
   33498:	ldr	r3, [r0, r9, lsl #2]
   3349c:	ldr	r0, [r8]
   334a0:	add	r0, r0, r3, lsl #3
   334a4:	cmp	r3, r1
   334a8:	ldrb	r0, [r0, #4]
   334ac:	bne	334c8 <__assert_fail@plt+0x21600>
   334b0:	cmp	r0, #4
   334b4:	bne	3347c <__assert_fail@plt+0x215b4>
   334b8:	ldr	r0, [r4, #12]
   334bc:	cmp	r0, ip
   334c0:	bne	334d0 <__assert_fail@plt+0x21608>
   334c4:	b	3347c <__assert_fail@plt+0x215b4>
   334c8:	cmp	r0, #4
   334cc:	bne	3347c <__assert_fail@plt+0x215b4>
   334d0:	ldr	r0, [sp, #76]	; 0x4c
   334d4:	ldr	r1, [sp, #28]
   334d8:	ldr	r5, [sp, #20]
   334dc:	str	r9, [sp, #40]	; 0x28
   334e0:	str	r3, [sp, #56]	; 0x38
   334e4:	ldr	r0, [r0, #116]	; 0x74
   334e8:	add	r7, r0, r1, lsl #3
   334ec:	ldr	r0, [r7]
   334f0:	cmp	r0, r3
   334f4:	beq	33c40 <__assert_fail@plt+0x21d78>
   334f8:	b	33d98 <__assert_fail@plt+0x21ed0>
   334fc:	mov	r8, lr
   33500:	ldr	r4, [sp, #84]	; 0x54
   33504:	ldr	r3, [sp, #56]	; 0x38
   33508:	ldr	r5, [fp, #-80]	; 0xffffffb0
   3350c:	ldr	lr, [sp, #64]	; 0x40
   33510:	b	33d98 <__assert_fail@plt+0x21ed0>
   33514:	mov	r9, #0
   33518:	ldr	r3, [sp, #76]	; 0x4c
   3351c:	cmp	r9, r0
   33520:	blt	33d2c <__assert_fail@plt+0x21e64>
   33524:	mvn	r9, #0
   33528:	cmp	r0, #1
   3352c:	blt	33d4c <__assert_fail@plt+0x21e84>
   33530:	ldr	r1, [r3, #116]	; 0x74
   33534:	ldr	lr, [sp, #64]	; 0x40
   33538:	mov	r8, #0
   3353c:	mov	r2, r0
   33540:	add	r3, r2, r8
   33544:	add	r3, r3, r3, lsr #31
   33548:	asr	r6, r3, #1
   3354c:	add	r5, r6, r6, lsl #1
   33550:	add	r5, r1, r5, lsl #3
   33554:	ldr	r5, [r5, #4]
   33558:	cmp	r5, sl
   3355c:	addlt	r8, r4, r3, asr #1
   33560:	movge	r2, r6
   33564:	cmp	r8, r2
   33568:	blt	33540 <__assert_fail@plt+0x21678>
   3356c:	ldr	r3, [sp, #76]	; 0x4c
   33570:	cmp	r8, r0
   33574:	bge	33d60 <__assert_fail@plt+0x21e98>
   33578:	ldr	r0, [r3, #116]	; 0x74
   3357c:	add	r1, r8, r8, lsl #1
   33580:	add	r0, r0, r1, lsl #3
   33584:	ldr	r0, [r0, #4]
   33588:	cmp	r0, sl
   3358c:	mvnne	r8, #0
   33590:	ldr	r5, [sp, #84]	; 0x54
   33594:	ldr	r4, [r5, #20]
   33598:	cmp	r4, #1
   3359c:	blt	33720 <__assert_fail@plt+0x21858>
   335a0:	ldr	r0, [r3, #84]	; 0x54
   335a4:	mov	r6, #0
   335a8:	str	r0, [sp, #60]	; 0x3c
   335ac:	ldr	r0, [r5, #24]
   335b0:	ldr	r3, [r3, #116]	; 0x74
   335b4:	ldr	r4, [sp, #60]	; 0x3c
   335b8:	ldr	r2, [r0, r6, lsl #2]
   335bc:	mov	r0, r3
   335c0:	ldr	r4, [r4]
   335c4:	add	r1, r2, r2, lsl #1
   335c8:	ldr	r5, [r0, r1, lsl #3]!
   335cc:	ldr	r0, [r0, #8]
   335d0:	ldr	r4, [r4, r5, lsl #3]
   335d4:	mvn	r5, #0
   335d8:	cmp	r0, ip
   335dc:	str	r4, [sp, #72]	; 0x48
   335e0:	ble	335f4 <__assert_fail@plt+0x2172c>
   335e4:	mvn	r4, #0
   335e8:	cmp	r0, sl
   335ec:	ble	3367c <__assert_fail@plt+0x217b4>
   335f0:	b	336d8 <__assert_fail@plt+0x21810>
   335f4:	add	r1, r3, r1, lsl #3
   335f8:	mov	r4, #1
   335fc:	ldr	r1, [r1, #12]
   33600:	cmp	r1, ip
   33604:	blt	33674 <__assert_fail@plt+0x217ac>
   33608:	sub	r1, r1, ip
   3360c:	cmp	r0, ip
   33610:	mov	lr, #1
   33614:	clz	r1, r1
   33618:	lsr	r4, r1, #5
   3361c:	lsl	r1, r4, #1
   33620:	orreq	r1, lr, r4, lsl #1
   33624:	cmp	r1, #0
   33628:	beq	3366c <__assert_fail@plt+0x217a4>
   3362c:	ldr	r0, [sp, #76]	; 0x4c
   33630:	ldr	r2, [sp, #72]	; 0x48
   33634:	ldr	r3, [sp, #56]	; 0x38
   33638:	str	r9, [sp]
   3363c:	bl	34518 <__assert_fail@plt+0x22650>
   33640:	mov	r4, r0
   33644:	ldr	r0, [sp, #84]	; 0x54
   33648:	ldr	r1, [sp, #76]	; 0x4c
   3364c:	ldr	ip, [sp, #80]	; 0x50
   33650:	ldr	r0, [r0, #24]
   33654:	ldr	r3, [r1, #116]	; 0x74
   33658:	ldr	r2, [r0, r6, lsl #2]
   3365c:	add	r0, r2, r2, lsl #1
   33660:	add	r0, r3, r0, lsl #3
   33664:	ldr	r0, [r0, #8]
   33668:	b	33670 <__assert_fail@plt+0x217a8>
   3366c:	mov	r4, #0
   33670:	ldr	lr, [sp, #64]	; 0x40
   33674:	cmp	r0, sl
   33678:	bgt	336d8 <__assert_fail@plt+0x21810>
   3367c:	add	r1, r2, r2, lsl #1
   33680:	mov	r5, #1
   33684:	add	r1, r3, r1, lsl #3
   33688:	ldr	r1, [r1, #12]
   3368c:	cmp	r1, sl
   33690:	blt	336d8 <__assert_fail@plt+0x21810>
   33694:	sub	r1, r1, sl
   33698:	cmp	r0, sl
   3369c:	mov	r0, #1
   336a0:	clz	r1, r1
   336a4:	lsr	r2, r1, #5
   336a8:	lsl	r1, r2, #1
   336ac:	orreq	r1, r0, r2, lsl #1
   336b0:	cmp	r1, #0
   336b4:	beq	336fc <__assert_fail@plt+0x21834>
   336b8:	ldr	r0, [sp, #76]	; 0x4c
   336bc:	ldr	r2, [sp, #72]	; 0x48
   336c0:	ldr	r3, [sp, #52]	; 0x34
   336c4:	str	r8, [sp]
   336c8:	bl	34518 <__assert_fail@plt+0x22650>
   336cc:	ldr	lr, [sp, #64]	; 0x40
   336d0:	ldr	ip, [sp, #80]	; 0x50
   336d4:	mov	r5, r0
   336d8:	cmp	r5, r4
   336dc:	bne	33708 <__assert_fail@plt+0x21840>
   336e0:	ldr	r5, [sp, #84]	; 0x54
   336e4:	ldr	r3, [sp, #76]	; 0x4c
   336e8:	add	r6, r6, #1
   336ec:	ldr	r4, [r5, #20]
   336f0:	cmp	r6, r4
   336f4:	blt	335ac <__assert_fail@plt+0x216e4>
   336f8:	b	33720 <__assert_fail@plt+0x21858>
   336fc:	mov	r5, #0
   33700:	cmp	r5, r4
   33704:	beq	336e0 <__assert_fail@plt+0x21818>
   33708:	ldr	r4, [sp, #84]	; 0x54
   3370c:	ldr	r8, [sp, #36]	; 0x24
   33710:	ldr	r9, [sp, #40]	; 0x28
   33714:	ldr	r3, [sp, #56]	; 0x38
   33718:	ldr	r5, [fp, #-80]	; 0xffffffb0
   3371c:	b	33d98 <__assert_fail@plt+0x21ed0>
   33720:	ldr	r0, [sp, #48]	; 0x30
   33724:	cmp	r0, #0
   33728:	beq	33768 <__assert_fail@plt+0x218a0>
   3372c:	ldr	r0, [sp, #56]	; 0x38
   33730:	str	ip, [fp, #-60]	; 0xffffffc4
   33734:	ldr	r8, [sp, #36]	; 0x24
   33738:	ldr	r9, [fp, #-80]	; 0xffffffb0
   3373c:	str	r0, [fp, #-64]	; 0xffffffc0
   33740:	ldr	r0, [sp, #24]
   33744:	cmp	r0, #0
   33748:	beq	338ec <__assert_fail@plt+0x21a24>
   3374c:	ldr	r6, [sp, #44]	; 0x2c
   33750:	cmp	r6, #0
   33754:	bne	33c20 <__assert_fail@plt+0x21d58>
   33758:	mov	r6, #1
   3375c:	str	r9, [lr]
   33760:	str	lr, [sp, #32]
   33764:	b	33978 <__assert_fail@plt+0x21ab0>
   33768:	mov	r0, r5
   3376c:	mov	r1, #12
   33770:	ldr	r8, [sp, #36]	; 0x24
   33774:	ldr	r9, [fp, #-80]	; 0xffffffb0
   33778:	cmp	r4, #1
   3377c:	vld1.32	{d16-d17}, [r0], r1
   33780:	sub	r1, fp, #72	; 0x48
   33784:	vld1.32	{d18-d19}, [r0]
   33788:	add	r0, r1, #12
   3378c:	vst1.32	{d18-d19}, [r0]
   33790:	mov	r0, r1
   33794:	mov	r1, #20
   33798:	vst1.64	{d16-d17}, [r0], r1
   3379c:	str	r4, [r0]
   337a0:	blt	338cc <__assert_fail@plt+0x21a04>
   337a4:	lsl	r0, r4, #2
   337a8:	str	r4, [fp, #-56]	; 0xffffffc8
   337ac:	bl	38450 <__assert_fail@plt+0x26588>
   337b0:	cmp	r0, #0
   337b4:	str	r0, [fp, #-48]	; 0xffffffd0
   337b8:	beq	33e60 <__assert_fail@plt+0x21f98>
   337bc:	ldr	r2, [r5, #20]
   337c0:	ldr	r1, [r5, #24]
   337c4:	mov	r6, r0
   337c8:	lsl	r2, r2, #2
   337cc:	bl	11ab4 <memcpy@plt>
   337d0:	ldr	r0, [sp, #80]	; 0x50
   337d4:	mov	r2, r6
   337d8:	mov	r6, r4
   337dc:	mov	lr, r2
   337e0:	str	r0, [fp, #-60]	; 0xffffffc4
   337e4:	ldr	r0, [sp, #56]	; 0x38
   337e8:	str	r0, [fp, #-64]	; 0xffffffc0
   337ec:	lsl	r0, r6, #1
   337f0:	lsl	r1, r6, #3
   337f4:	mov	r4, lr
   337f8:	str	r0, [sp, #24]
   337fc:	str	r0, [fp, #-56]	; 0xffffffc8
   33800:	mov	r0, r2
   33804:	bl	38480 <__assert_fail@plt+0x265b8>
   33808:	cmp	r0, #0
   3380c:	beq	33e80 <__assert_fail@plt+0x21fb8>
   33810:	ldr	ip, [sp, #80]	; 0x50
   33814:	mov	lr, r0
   33818:	mov	r2, r0
   3381c:	str	r0, [fp, #-48]	; 0xffffffd0
   33820:	str	r0, [sp, #16]
   33824:	ldr	r0, [lr]
   33828:	str	r2, [sp, #32]
   3382c:	cmp	r0, r9
   33830:	ble	33934 <__assert_fail@plt+0x21a6c>
   33834:	ldr	r3, [sp, #76]	; 0x4c
   33838:	cmp	r6, #1
   3383c:	mov	r1, r6
   33840:	blt	3396c <__assert_fail@plt+0x21aa4>
   33844:	mov	sl, r3
   33848:	ands	r1, r6, #3
   3384c:	sub	r2, r6, #1
   33850:	mov	r4, r6
   33854:	mov	r0, r6
   33858:	beq	33880 <__assert_fail@plt+0x219b8>
   3385c:	add	r7, lr, r4, lsl #2
   33860:	mov	r0, r4
   33864:	mov	r3, r7
   33868:	ldr	r6, [r3, #-4]!
   3386c:	subs	r1, r1, #1
   33870:	sub	r0, r0, #1
   33874:	str	r6, [r7]
   33878:	mov	r7, r3
   3387c:	bne	33868 <__assert_fail@plt+0x219a0>
   33880:	mov	r1, #0
   33884:	cmp	r2, #3
   33888:	bcc	338c0 <__assert_fail@plt+0x219f8>
   3388c:	add	r2, lr, r0, lsl #2
   33890:	sub	r2, r2, #8
   33894:	ldr	r6, [r2]
   33898:	ldr	r5, [r2, #4]
   3389c:	ldmdb	r2, {r3, r7}
   338a0:	sub	r0, r0, #4
   338a4:	cmp	r0, #0
   338a8:	stmda	r2, {r3, r7}
   338ac:	str	r6, [r2, #4]
   338b0:	str	r5, [r2, #8]
   338b4:	sub	r2, r2, #16
   338b8:	bgt	33894 <__assert_fail@plt+0x219cc>
   338bc:	ldr	r5, [sp, #84]	; 0x54
   338c0:	mov	r6, r4
   338c4:	mov	r3, sl
   338c8:	b	3396c <__assert_fail@plt+0x21aa4>
   338cc:	ldr	r1, [sp, #8]
   338d0:	mov	r0, #0
   338d4:	str	r0, [r1]
   338d8:	str	r0, [r1, #4]
   338dc:	str	r0, [r1, #8]
   338e0:	ldr	r0, [sp, #56]	; 0x38
   338e4:	str	ip, [fp, #-60]	; 0xffffffc4
   338e8:	str	r0, [fp, #-64]	; 0xffffffc0
   338ec:	mov	r0, #1
   338f0:	str	r0, [fp, #-52]	; 0xffffffcc
   338f4:	str	r0, [fp, #-56]	; 0xffffffc8
   338f8:	mov	r0, #4
   338fc:	bl	38450 <__assert_fail@plt+0x26588>
   33900:	cmp	r0, #0
   33904:	str	r0, [fp, #-48]	; 0xffffffd0
   33908:	beq	33e60 <__assert_fail@plt+0x21f98>
   3390c:	ldr	ip, [sp, #80]	; 0x50
   33910:	ldr	r3, [sp, #76]	; 0x4c
   33914:	str	r9, [r0]
   33918:	str	r0, [sp, #16]
   3391c:	str	r0, [sp, #64]	; 0x40
   33920:	str	r0, [sp, #32]
   33924:	mov	r0, #1
   33928:	mov	r6, #1
   3392c:	str	r0, [sp, #24]
   33930:	b	3397c <__assert_fail@plt+0x21ab4>
   33934:	add	r0, lr, r6, lsl #2
   33938:	ldr	r3, [sp, #76]	; 0x4c
   3393c:	mov	r1, r6
   33940:	ldr	r2, [r0, #-4]
   33944:	cmp	r2, r9
   33948:	ble	3396c <__assert_fail@plt+0x21aa4>
   3394c:	sub	r1, r6, #2
   33950:	str	r2, [r0]
   33954:	sub	r1, r1, #1
   33958:	ldr	r2, [r0, #-8]
   3395c:	sub	r0, r0, #4
   33960:	cmp	r2, r9
   33964:	bgt	33950 <__assert_fail@plt+0x21a88>
   33968:	add	r1, r1, #2
   3396c:	add	r6, r6, #1
   33970:	str	r9, [lr, r1, lsl #2]
   33974:	str	lr, [sp, #64]	; 0x40
   33978:	str	r6, [fp, #-52]	; 0xffffffcc
   3397c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   33980:	sub	r1, fp, #72	; 0x48
   33984:	ldr	sl, [r0, ip, lsl #2]
   33988:	str	r0, [sp, #48]	; 0x30
   3398c:	mov	r0, r3
   33990:	bl	327e0 <__assert_fail@plt+0x20918>
   33994:	cmp	r0, #0
   33998:	bne	33e38 <__assert_fail@plt+0x21f70>
   3399c:	ldr	r5, [r5, #4]
   339a0:	ldr	ip, [sp, #80]	; 0x50
   339a4:	ldr	lr, [sp, #64]	; 0x40
   339a8:	str	r6, [sp, #44]	; 0x2c
   339ac:	cmp	r5, #0
   339b0:	beq	33a58 <__assert_fail@plt+0x21b90>
   339b4:	cmp	ip, #0
   339b8:	bmi	33a54 <__assert_fail@plt+0x21b8c>
   339bc:	ldr	r6, [sp, #48]	; 0x30
   339c0:	ldr	r7, [sp, #12]
   339c4:	ldr	r1, [r5]
   339c8:	ldr	r0, [r6]
   339cc:	cmp	r1, #0
   339d0:	bne	339f8 <__assert_fail@plt+0x21b30>
   339d4:	str	r0, [r5]
   339d8:	add	r5, r5, #4
   339dc:	add	r6, r6, #4
   339e0:	subs	r7, r7, #1
   339e4:	beq	33a54 <__assert_fail@plt+0x21b8c>
   339e8:	ldr	r1, [r5]
   339ec:	ldr	r0, [r6]
   339f0:	cmp	r1, #0
   339f4:	beq	339d4 <__assert_fail@plt+0x21b0c>
   339f8:	cmp	r0, #0
   339fc:	beq	339d8 <__assert_fail@plt+0x21b10>
   33a00:	sub	r4, fp, #44	; 0x2c
   33a04:	add	r2, r0, #4
   33a08:	add	r1, r1, #4
   33a0c:	mov	r0, r4
   33a10:	bl	2ea58 <__assert_fail@plt+0x1cb90>
   33a14:	cmp	r0, #0
   33a18:	str	r0, [fp, #-32]	; 0xffffffe0
   33a1c:	bne	33e38 <__assert_fail@plt+0x21f70>
   33a20:	sub	r0, fp, #32
   33a24:	mov	r1, r8
   33a28:	mov	r2, r4
   33a2c:	bl	301d4 <__assert_fail@plt+0x1e30c>
   33a30:	str	r0, [r5]
   33a34:	ldr	r0, [fp, #-36]	; 0xffffffdc
   33a38:	bl	17c10 <__assert_fail@plt+0x5d48>
   33a3c:	ldr	r9, [fp, #-32]	; 0xffffffe0
   33a40:	ldr	ip, [sp, #80]	; 0x50
   33a44:	ldr	lr, [sp, #64]	; 0x40
   33a48:	cmp	r9, #0
   33a4c:	beq	339d8 <__assert_fail@plt+0x21b10>
   33a50:	b	33df8 <__assert_fail@plt+0x21f30>
   33a54:	ldr	r6, [sp, #44]	; 0x2c
   33a58:	ldr	r0, [sp, #48]	; 0x30
   33a5c:	cmp	r6, #1
   33a60:	str	sl, [r0, ip, lsl #2]
   33a64:	blt	33af8 <__assert_fail@plt+0x21c30>
   33a68:	ldr	r4, [sp, #84]	; 0x54
   33a6c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   33a70:	subs	sl, r6, #1
   33a74:	mov	r9, #20
   33a78:	mov	r1, #0
   33a7c:	beq	33aa8 <__assert_fail@plt+0x21be0>
   33a80:	mov	r2, sl
   33a84:	mov	r0, #1
   33a88:	add	r3, r1, r2
   33a8c:	lsr	r7, r3, #1
   33a90:	ldr	r6, [lr, r7, lsl #2]
   33a94:	cmp	r6, r5
   33a98:	addlt	r1, r0, r3, lsr #1
   33a9c:	movge	r2, r7
   33aa0:	cmp	r1, r2
   33aa4:	bcc	33a88 <__assert_fail@plt+0x21bc0>
   33aa8:	ldr	r2, [lr, r1, lsl #2]
   33aac:	mov	r3, #1
   33ab0:	cmp	r2, r5
   33ab4:	mov	r2, r1
   33ab8:	mvnne	r2, #0
   33abc:	cmp	r2, #0
   33ac0:	bmi	33b0c <__assert_fail@plt+0x21c44>
   33ac4:	ldr	r0, [sp, #44]	; 0x2c
   33ac8:	cmp	r0, r2
   33acc:	ble	33b0c <__assert_fail@plt+0x21c44>
   33ad0:	cmp	sl, r2
   33ad4:	str	sl, [fp, #-52]	; 0xffffffcc
   33ad8:	ble	33b18 <__assert_fail@plt+0x21c50>
   33adc:	mvn	r2, r1
   33ae0:	str	sl, [sp, #72]	; 0x48
   33ae4:	add	sl, r0, r2
   33ae8:	cmp	sl, #4
   33aec:	bcs	33b28 <__assert_fail@plt+0x21c60>
   33af0:	ldr	r9, [sp, #40]	; 0x28
   33af4:	b	33bdc <__assert_fail@plt+0x21d14>
   33af8:	ldr	r4, [sp, #84]	; 0x54
   33afc:	ldr	r9, [sp, #40]	; 0x28
   33b00:	ldr	r3, [sp, #56]	; 0x38
   33b04:	ldr	r5, [fp, #-80]	; 0xffffffb0
   33b08:	b	33c0c <__assert_fail@plt+0x21d44>
   33b0c:	ldr	r0, [sp, #16]
   33b10:	ldr	r9, [sp, #40]	; 0x28
   33b14:	b	33c04 <__assert_fail@plt+0x21d3c>
   33b18:	ldr	r0, [sp, #16]
   33b1c:	ldr	r9, [sp, #40]	; 0x28
   33b20:	str	sl, [sp, #44]	; 0x2c
   33b24:	b	33c04 <__assert_fail@plt+0x21d3c>
   33b28:	bic	lr, sl, #3
   33b2c:	subs	r7, lr, #4
   33b30:	add	r6, r3, r7, lsr #2
   33b34:	and	ip, r6, #1
   33b38:	beq	33b7c <__assert_fail@plt+0x21cb4>
   33b3c:	ldr	r3, [sp, #64]	; 0x40
   33b40:	sub	r2, ip, r6
   33b44:	mov	r6, #0
   33b48:	add	r3, r3, r1, lsl #2
   33b4c:	add	r7, r3, #4
   33b50:	mov	r4, r3
   33b54:	adds	r2, r2, #2
   33b58:	add	r6, r6, #8
   33b5c:	vld1.32	{d16-d17}, [r7]
   33b60:	vst1.32	{d16-d17}, [r4], r9
   33b64:	vld1.32	{d16-d17}, [r4]
   33b68:	add	r4, r3, #16
   33b6c:	add	r3, r3, #32
   33b70:	vst1.32	{d16-d17}, [r4]
   33b74:	bne	33b4c <__assert_fail@plt+0x21c84>
   33b78:	b	33b80 <__assert_fail@plt+0x21cb8>
   33b7c:	mov	r6, #0
   33b80:	cmp	ip, #0
   33b84:	beq	33ba0 <__assert_fail@plt+0x21cd8>
   33b88:	ldr	r7, [sp, #64]	; 0x40
   33b8c:	add	r3, r1, r6
   33b90:	add	r3, r7, r3, lsl #2
   33b94:	add	r7, r3, #4
   33b98:	vld1.32	{d16-d17}, [r7]
   33b9c:	vst1.32	{d16-d17}, [r3]
   33ba0:	ldr	r4, [sp, #84]	; 0x54
   33ba4:	ldr	r9, [sp, #40]	; 0x28
   33ba8:	cmp	sl, lr
   33bac:	bne	33bcc <__assert_fail@plt+0x21d04>
   33bb0:	ldr	r0, [sp, #16]
   33bb4:	ldr	ip, [sp, #80]	; 0x50
   33bb8:	ldr	lr, [sp, #64]	; 0x40
   33bbc:	str	r0, [sp, #32]
   33bc0:	ldr	r0, [sp, #72]	; 0x48
   33bc4:	str	r0, [sp, #44]	; 0x2c
   33bc8:	b	33c08 <__assert_fail@plt+0x21d40>
   33bcc:	add	r1, r1, lr
   33bd0:	ldr	ip, [sp, #80]	; 0x50
   33bd4:	ldr	lr, [sp, #64]	; 0x40
   33bd8:	ldr	r0, [sp, #44]	; 0x2c
   33bdc:	ldr	r6, [sp, #72]	; 0x48
   33be0:	sub	r2, r0, #1
   33be4:	add	r3, lr, r1, lsl #2
   33be8:	ldr	r3, [r3, #4]
   33bec:	str	r3, [lr, r1, lsl #2]
   33bf0:	add	r1, r1, #1
   33bf4:	cmp	r2, r1
   33bf8:	bne	33be4 <__assert_fail@plt+0x21d1c>
   33bfc:	ldr	r0, [sp, #16]
   33c00:	str	r6, [sp, #44]	; 0x2c
   33c04:	str	r0, [sp, #32]
   33c08:	ldr	r3, [sp, #56]	; 0x38
   33c0c:	ldr	r0, [sp, #76]	; 0x4c
   33c10:	add	r1, r5, r5, lsl #1
   33c14:	ldr	r0, [r0, #116]	; 0x74
   33c18:	add	r0, r0, r1, lsl #3
   33c1c:	b	33d9c <__assert_fail@plt+0x21ed4>
   33c20:	ldr	r0, [sp, #24]
   33c24:	ldr	r2, [sp, #32]
   33c28:	cmp	r0, r6
   33c2c:	beq	337ec <__assert_fail@plt+0x21924>
   33c30:	b	33824 <__assert_fail@plt+0x2195c>
   33c34:	ldr	r0, [r7]
   33c38:	cmp	r0, r3
   33c3c:	bne	33d98 <__assert_fail@plt+0x21ed0>
   33c40:	ldr	r0, [r7, #8]
   33c44:	ldr	r1, [r7, #12]
   33c48:	str	r5, [fp, #-80]	; 0xffffffb0
   33c4c:	subs	r0, r1, r0
   33c50:	add	sl, r0, ip
   33c54:	beq	33d78 <__assert_fail@plt+0x21eb0>
   33c58:	ldr	r0, [r8, #12]
   33c5c:	add	r0, r0, r3, lsl #2
   33c60:	ldr	r1, [r4, #12]
   33c64:	cmp	sl, r1
   33c68:	bgt	33d94 <__assert_fail@plt+0x21ecc>
   33c6c:	ldr	r1, [r4]
   33c70:	ldr	r1, [r1, sl, lsl #2]
   33c74:	cmp	r1, #0
   33c78:	beq	33d94 <__assert_fail@plt+0x21ecc>
   33c7c:	ldr	r2, [r1, #8]
   33c80:	cmp	r2, #1
   33c84:	blt	33d94 <__assert_fail@plt+0x21ecc>
   33c88:	str	lr, [sp, #64]	; 0x40
   33c8c:	mov	lr, r8
   33c90:	ldr	r8, [r0]
   33c94:	ldr	r0, [r1, #12]
   33c98:	subs	r2, r2, #1
   33c9c:	mov	r1, #0
   33ca0:	mov	r4, #1
   33ca4:	beq	33cc8 <__assert_fail@plt+0x21e00>
   33ca8:	add	r3, r1, r2
   33cac:	lsr	r6, r3, #1
   33cb0:	ldr	r5, [r0, r6, lsl #2]
   33cb4:	cmp	r5, r8
   33cb8:	addlt	r1, r4, r3, lsr #1
   33cbc:	movge	r2, r6
   33cc0:	cmp	r1, r2
   33cc4:	bcc	33ca8 <__assert_fail@plt+0x21de0>
   33cc8:	ldr	r0, [r0, r1, lsl #2]
   33ccc:	cmp	r0, r8
   33cd0:	bne	334fc <__assert_fail@plt+0x21634>
   33cd4:	ldr	r1, [sp, #76]	; 0x4c
   33cd8:	str	r8, [sp, #52]	; 0x34
   33cdc:	ldr	r0, [r1, #108]	; 0x6c
   33ce0:	cmp	r0, #1
   33ce4:	blt	33514 <__assert_fail@plt+0x2164c>
   33ce8:	ldr	r1, [r1, #116]	; 0x74
   33cec:	mov	r9, #0
   33cf0:	mov	r2, r0
   33cf4:	add	r3, r2, r9
   33cf8:	add	r3, r3, r3, lsr #31
   33cfc:	asr	r6, r3, #1
   33d00:	add	r5, r6, r6, lsl #1
   33d04:	add	r5, r1, r5, lsl #3
   33d08:	ldr	r5, [r5, #4]
   33d0c:	cmp	r5, ip
   33d10:	addlt	r9, r4, r3, asr #1
   33d14:	movge	r2, r6
   33d18:	cmp	r9, r2
   33d1c:	blt	33cf4 <__assert_fail@plt+0x21e2c>
   33d20:	ldr	r3, [sp, #76]	; 0x4c
   33d24:	cmp	r9, r0
   33d28:	bge	33524 <__assert_fail@plt+0x2165c>
   33d2c:	ldr	r1, [r3, #116]	; 0x74
   33d30:	add	r2, r9, r9, lsl #1
   33d34:	add	r1, r1, r2, lsl #3
   33d38:	ldr	r1, [r1, #4]
   33d3c:	cmp	r1, ip
   33d40:	mvnne	r9, #0
   33d44:	cmp	r0, #1
   33d48:	bge	33530 <__assert_fail@plt+0x21668>
   33d4c:	ldr	lr, [sp, #64]	; 0x40
   33d50:	mov	r8, #0
   33d54:	ldr	r3, [sp, #76]	; 0x4c
   33d58:	cmp	r8, r0
   33d5c:	blt	33578 <__assert_fail@plt+0x216b0>
   33d60:	mvn	r8, #0
   33d64:	ldr	r5, [sp, #84]	; 0x54
   33d68:	ldr	r4, [r5, #20]
   33d6c:	cmp	r4, #1
   33d70:	bge	335a0 <__assert_fail@plt+0x216d8>
   33d74:	b	33720 <__assert_fail@plt+0x21858>
   33d78:	ldr	r0, [r8, #20]
   33d7c:	add	r1, r3, r3, lsl #1
   33d80:	add	r0, r0, r1, lsl #2
   33d84:	ldr	r0, [r0, #8]
   33d88:	ldr	r1, [r4, #12]
   33d8c:	cmp	sl, r1
   33d90:	ble	33c6c <__assert_fail@plt+0x21da4>
   33d94:	ldr	r5, [fp, #-80]	; 0xffffffb0
   33d98:	mov	r0, r7
   33d9c:	add	r7, r0, #24
   33da0:	ldrb	r0, [r0, #20]
   33da4:	add	r5, r5, #1
   33da8:	cmp	r0, #0
   33dac:	bne	33c34 <__assert_fail@plt+0x21d6c>
   33db0:	b	3347c <__assert_fail@plt+0x215b4>
   33db4:	mov	r4, #0
   33db8:	cmp	r4, lr
   33dbc:	blt	3340c <__assert_fail@plt+0x21544>
   33dc0:	mov	r0, #0
   33dc4:	str	r0, [fp, #-76]	; 0xffffffb4
   33dc8:	mov	r9, #0
   33dcc:	mov	r0, r9
   33dd0:	sub	sp, fp, #28
   33dd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dd8:	mov	r9, r0
   33ddc:	str	r0, [fp, #-76]	; 0xffffffb4
   33de0:	mov	r0, r9
   33de4:	sub	sp, fp, #28
   33de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33dec:	str	r2, [fp, #-76]	; 0xffffffb4
   33df0:	b	33dc8 <__assert_fail@plt+0x21f00>
   33df4:	mov	r9, #0
   33df8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   33dfc:	cmp	r0, #0
   33e00:	beq	33e0c <__assert_fail@plt+0x21f44>
   33e04:	mov	r0, lr
   33e08:	bl	17c10 <__assert_fail@plt+0x5d48>
   33e0c:	cmp	r9, #0
   33e10:	str	r9, [fp, #-76]	; 0xffffffb4
   33e14:	moveq	r9, #0
   33e18:	mov	r0, r9
   33e1c:	sub	sp, fp, #28
   33e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e24:	str	r0, [fp, #-72]	; 0xffffffb8
   33e28:	str	r9, [fp, #-76]	; 0xffffffb4
   33e2c:	mov	r0, r9
   33e30:	sub	sp, fp, #28
   33e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e38:	ldr	lr, [sp, #64]	; 0x40
   33e3c:	mov	r9, r0
   33e40:	ldr	r0, [fp, #-72]	; 0xffffffb8
   33e44:	cmp	r0, #0
   33e48:	bne	33e04 <__assert_fail@plt+0x21f3c>
   33e4c:	b	33e0c <__assert_fail@plt+0x21f44>
   33e50:	mov	r9, r0
   33e54:	mov	r0, r9
   33e58:	sub	sp, fp, #28
   33e5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33e60:	mov	lr, #0
   33e64:	mov	r9, #12
   33e68:	str	lr, [fp, #-56]	; 0xffffffc8
   33e6c:	str	lr, [fp, #-52]	; 0xffffffcc
   33e70:	ldr	r0, [fp, #-72]	; 0xffffffb8
   33e74:	cmp	r0, #0
   33e78:	bne	33e04 <__assert_fail@plt+0x21f3c>
   33e7c:	b	33e0c <__assert_fail@plt+0x21f44>
   33e80:	mov	r9, #12
   33e84:	mov	lr, r4
   33e88:	ldr	r0, [fp, #-72]	; 0xffffffb8
   33e8c:	cmp	r0, #0
   33e90:	bne	33e04 <__assert_fail@plt+0x21f3c>
   33e94:	b	33e0c <__assert_fail@plt+0x21f44>
   33e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33e9c:	add	fp, sp, #28
   33ea0:	sub	sp, sp, #4
   33ea4:	mov	r9, r0
   33ea8:	ldr	r0, [r1, #4]
   33eac:	mov	r8, #0
   33eb0:	cmp	r0, #0
   33eb4:	beq	34070 <__assert_fail@plt+0x221a8>
   33eb8:	mov	r5, r2
   33ebc:	ldr	r2, [r2, #4]
   33ec0:	cmp	r2, #0
   33ec4:	beq	34070 <__assert_fail@plt+0x221a8>
   33ec8:	mov	sl, r1
   33ecc:	ldr	r1, [r9, #4]
   33ed0:	ldr	r7, [r9]
   33ed4:	add	r3, r2, r0
   33ed8:	add	r6, r1, r3
   33edc:	cmp	r6, r7
   33ee0:	ble	33f10 <__assert_fail@plt+0x22048>
   33ee4:	ldr	r0, [r9, #8]
   33ee8:	add	r4, r7, r3
   33eec:	lsl	r1, r4, #2
   33ef0:	bl	38480 <__assert_fail@plt+0x265b8>
   33ef4:	cmp	r0, #0
   33ef8:	beq	3407c <__assert_fail@plt+0x221b4>
   33efc:	str	r4, [r9]
   33f00:	str	r0, [r9, #8]
   33f04:	ldr	r1, [r9, #4]
   33f08:	ldr	r2, [r5, #4]
   33f0c:	ldr	r0, [sl, #4]
   33f10:	ldr	lr, [r5, #8]
   33f14:	ldr	r4, [sl, #8]
   33f18:	add	r3, r0, r1
   33f1c:	sub	r7, r1, #1
   33f20:	add	ip, r3, r2
   33f24:	sub	r0, r0, #1
   33f28:	sub	r3, r2, #1
   33f2c:	ldr	r1, [lr, r3, lsl #2]
   33f30:	ldr	r6, [r4, r0, lsl #2]
   33f34:	cmp	r6, r1
   33f38:	beq	33f64 <__assert_fail@plt+0x2209c>
   33f3c:	blt	33f54 <__assert_fail@plt+0x2208c>
   33f40:	sub	r6, r0, #1
   33f44:	cmp	r0, #0
   33f48:	mov	r0, r6
   33f4c:	bgt	33f30 <__assert_fail@plt+0x22068>
   33f50:	b	33fd4 <__assert_fail@plt+0x2210c>
   33f54:	cmp	r2, #2
   33f58:	mov	r2, r3
   33f5c:	bge	33f28 <__assert_fail@plt+0x22060>
   33f60:	b	33fd4 <__assert_fail@plt+0x2210c>
   33f64:	cmp	r7, #0
   33f68:	bmi	33fb0 <__assert_fail@plt+0x220e8>
   33f6c:	ldr	r8, [r9, #8]
   33f70:	mov	r1, r7
   33f74:	ldr	r7, [r8, r1, lsl #2]
   33f78:	cmp	r7, r6
   33f7c:	ble	33f94 <__assert_fail@plt+0x220cc>
   33f80:	sub	r7, r1, #1
   33f84:	cmp	r1, #0
   33f88:	mov	r1, r7
   33f8c:	bgt	33f74 <__assert_fail@plt+0x220ac>
   33f90:	b	33fb0 <__assert_fail@plt+0x220e8>
   33f94:	mov	r7, r1
   33f98:	bne	33fb0 <__assert_fail@plt+0x220e8>
   33f9c:	mov	r7, r1
   33fa0:	cmp	r0, #1
   33fa4:	mov	r8, #0
   33fa8:	bge	33fc8 <__assert_fail@plt+0x22100>
   33fac:	b	33fd4 <__assert_fail@plt+0x2210c>
   33fb0:	ldr	r1, [r9, #8]
   33fb4:	sub	ip, ip, #1
   33fb8:	str	r6, [r1, ip, lsl #2]
   33fbc:	cmp	r0, #1
   33fc0:	mov	r8, #0
   33fc4:	blt	33fd4 <__assert_fail@plt+0x2210c>
   33fc8:	cmp	r2, #2
   33fcc:	mov	r2, r3
   33fd0:	bge	33f24 <__assert_fail@plt+0x2205c>
   33fd4:	ldr	r2, [r9, #4]
   33fd8:	ldr	lr, [sl, #4]
   33fdc:	ldr	r4, [r5, #4]
   33fe0:	ldr	r0, [r9, #8]
   33fe4:	subs	r1, r2, #1
   33fe8:	add	r3, r1, lr
   33fec:	add	r3, r3, r4
   33ff0:	sub	r7, r3, ip
   33ff4:	add	r6, r7, #1
   33ff8:	add	r5, r6, r2
   33ffc:	str	r5, [r9, #4]
   34000:	blt	34060 <__assert_fail@plt+0x22198>
   34004:	cmp	r7, #0
   34008:	bmi	34060 <__assert_fail@plt+0x22198>
   3400c:	add	r2, r2, r4
   34010:	add	r2, r2, lr
   34014:	sub	r2, r2, ip
   34018:	add	r7, r0, r2, lsl #2
   3401c:	ldr	r2, [r0, r1, lsl #2]
   34020:	ldr	r5, [r0, r3, lsl #2]
   34024:	cmp	r5, r2
   34028:	bgt	34044 <__assert_fail@plt+0x2217c>
   3402c:	str	r2, [r7, r1, lsl #2]
   34030:	sub	r2, r1, #1
   34034:	cmp	r1, #0
   34038:	mov	r1, r2
   3403c:	bgt	3401c <__assert_fail@plt+0x22154>
   34040:	b	34060 <__assert_fail@plt+0x22198>
   34044:	str	r5, [r7, r1, lsl #2]
   34048:	sub	r7, r7, #4
   3404c:	subs	r6, r6, #1
   34050:	sub	r3, r3, #1
   34054:	mov	r2, #0
   34058:	bne	3401c <__assert_fail@plt+0x22154>
   3405c:	b	34064 <__assert_fail@plt+0x2219c>
   34060:	mov	r2, r6
   34064:	add	r1, r0, ip, lsl #2
   34068:	lsl	r2, r2, #2
   3406c:	bl	11ab4 <memcpy@plt>
   34070:	mov	r0, r8
   34074:	sub	sp, fp, #28
   34078:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3407c:	mov	r8, #12
   34080:	mov	r0, r8
   34084:	sub	sp, fp, #28
   34088:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3408c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34090:	add	fp, sp, #28
   34094:	sub	sp, sp, #44	; 0x2c
   34098:	mov	ip, r0
   3409c:	ldr	r0, [r0, #28]
   340a0:	str	r3, [sp, #4]
   340a4:	add	r3, r1, r1, lsl #1
   340a8:	mov	r4, #0
   340ac:	str	r4, [sp, #36]	; 0x24
   340b0:	str	r4, [sp, #32]
   340b4:	str	r4, [sp, #40]	; 0x28
   340b8:	add	r3, r0, r3, lsl #2
   340bc:	mov	r0, r3
   340c0:	ldr	lr, [r0, #4]!
   340c4:	str	r0, [sp, #24]
   340c8:	cmp	lr, #1
   340cc:	blt	3440c <__assert_fail@plt+0x22544>
   340d0:	add	r4, r3, #8
   340d4:	mov	r9, #0
   340d8:	mov	sl, #1
   340dc:	str	r2, [sp, #28]
   340e0:	str	r3, [sp]
   340e4:	str	r1, [sp, #12]
   340e8:	str	ip, [sp, #8]
   340ec:	str	r4, [sp, #20]
   340f0:	ldr	r3, [r4]
   340f4:	ldr	r0, [r3, r9, lsl #2]
   340f8:	cmp	r0, r1
   340fc:	bne	3411c <__assert_fail@plt+0x22254>
   34100:	add	r9, r9, #1
   34104:	cmp	r9, lr
   34108:	bge	342cc <__assert_fail@plt+0x22404>
   3410c:	ldr	r3, [r4]
   34110:	ldr	r0, [r3, r9, lsl #2]
   34114:	cmp	r0, r1
   34118:	beq	34100 <__assert_fail@plt+0x22238>
   3411c:	ldr	r2, [ip]
   34120:	add	r2, r2, r0, lsl #3
   34124:	ldrb	r2, [r2, #4]
   34128:	tst	r2, #8
   3412c:	beq	34100 <__assert_fail@plt+0x22238>
   34130:	ldr	r2, [ip, #20]
   34134:	add	r0, r0, r0, lsl #1
   34138:	mvn	r8, #0
   3413c:	str	r0, [sp, #16]
   34140:	add	r0, r2, r0, lsl #2
   34144:	ldr	r7, [r0, #4]
   34148:	ldr	r0, [r0, #8]
   3414c:	cmp	r7, #2
   34150:	ldr	r5, [r0]
   34154:	ldrge	r8, [r0, #4]
   34158:	cmp	lr, #1
   3415c:	blt	3419c <__assert_fail@plt+0x222d4>
   34160:	mov	r2, #0
   34164:	subs	r7, lr, #1
   34168:	beq	3418c <__assert_fail@plt+0x222c4>
   3416c:	add	r6, r2, r7
   34170:	lsr	r4, r6, #1
   34174:	ldr	r0, [r3, r4, lsl #2]
   34178:	cmp	r0, r5
   3417c:	addlt	r2, sl, r6, lsr #1
   34180:	movge	r7, r4
   34184:	cmp	r2, r7
   34188:	bcc	3416c <__assert_fail@plt+0x222a4>
   3418c:	ldr	r0, [r3, r2, lsl #2]
   34190:	ldr	r4, [sp, #20]
   34194:	cmp	r0, r5
   34198:	beq	341f8 <__assert_fail@plt+0x22330>
   3419c:	ldr	r0, [sp, #28]
   341a0:	ldr	r0, [r0, #4]
   341a4:	cmp	r0, #1
   341a8:	blt	341f8 <__assert_fail@plt+0x22330>
   341ac:	subs	r7, r0, #1
   341b0:	ldr	r0, [sp, #28]
   341b4:	mov	r6, #0
   341b8:	ldr	r1, [r0, #8]
   341bc:	beq	341e0 <__assert_fail@plt+0x22318>
   341c0:	add	r0, r6, r7
   341c4:	lsr	r4, r0, #1
   341c8:	ldr	ip, [r1, r4, lsl #2]
   341cc:	cmp	ip, r5
   341d0:	addlt	r6, sl, r0, lsr #1
   341d4:	movge	r7, r4
   341d8:	cmp	r6, r7
   341dc:	bcc	341c0 <__assert_fail@plt+0x222f8>
   341e0:	ldr	r0, [r1, r6, lsl #2]
   341e4:	ldr	r1, [sp, #12]
   341e8:	ldr	ip, [sp, #8]
   341ec:	ldr	r4, [sp, #20]
   341f0:	cmp	r0, r5
   341f4:	beq	34290 <__assert_fail@plt+0x223c8>
   341f8:	cmp	r8, #1
   341fc:	blt	34100 <__assert_fail@plt+0x22238>
   34200:	cmp	lr, #1
   34204:	blt	34240 <__assert_fail@plt+0x22378>
   34208:	mov	r2, #0
   3420c:	subs	r7, lr, #1
   34210:	beq	34234 <__assert_fail@plt+0x2236c>
   34214:	add	r0, r2, r7
   34218:	lsr	r6, r0, #1
   3421c:	ldr	r5, [r3, r6, lsl #2]
   34220:	cmp	r5, r8
   34224:	addlt	r2, sl, r0, lsr #1
   34228:	movge	r7, r6
   3422c:	cmp	r2, r7
   34230:	bcc	34214 <__assert_fail@plt+0x2234c>
   34234:	ldr	r0, [r3, r2, lsl #2]
   34238:	cmp	r0, r8
   3423c:	beq	34100 <__assert_fail@plt+0x22238>
   34240:	ldr	r2, [sp, #28]
   34244:	ldr	r0, [r2, #4]
   34248:	cmp	r0, #1
   3424c:	blt	34100 <__assert_fail@plt+0x22238>
   34250:	ldr	r4, [r2, #8]
   34254:	subs	r7, r0, #1
   34258:	mov	r3, #0
   3425c:	beq	34280 <__assert_fail@plt+0x223b8>
   34260:	add	r0, r3, r7
   34264:	lsr	r6, r0, #1
   34268:	ldr	r5, [r4, r6, lsl #2]
   3426c:	cmp	r5, r8
   34270:	addlt	r3, sl, r0, lsr #1
   34274:	movge	r7, r6
   34278:	cmp	r3, r7
   3427c:	bcc	34260 <__assert_fail@plt+0x22398>
   34280:	ldr	r0, [r4, r3, lsl #2]
   34284:	ldr	r4, [sp, #20]
   34288:	cmp	r0, r8
   3428c:	bne	34100 <__assert_fail@plt+0x22238>
   34290:	ldr	r0, [ip, #28]
   34294:	ldr	r1, [sp, #16]
   34298:	add	r2, r0, r1, lsl #2
   3429c:	ldr	r1, [sp, #4]
   342a0:	add	r0, sp, #32
   342a4:	bl	33e98 <__assert_fail@plt+0x21fd0>
   342a8:	cmp	r0, #0
   342ac:	bne	344fc <__assert_fail@plt+0x22634>
   342b0:	ldr	r0, [sp, #24]
   342b4:	ldr	r1, [sp, #12]
   342b8:	ldr	ip, [sp, #8]
   342bc:	ldr	lr, [r0]
   342c0:	add	r9, r9, #1
   342c4:	cmp	r9, lr
   342c8:	blt	3410c <__assert_fail@plt+0x22244>
   342cc:	ldr	r2, [sp, #28]
   342d0:	ldr	r0, [sp]
   342d4:	cmp	lr, #0
   342d8:	mov	r4, #0
   342dc:	ble	3440c <__assert_fail@plt+0x22544>
   342e0:	ldr	r1, [sp, #36]	; 0x24
   342e4:	ldr	r9, [r0, #8]
   342e8:	ldr	r0, [sp, #40]	; 0x28
   342ec:	subs	lr, r1, #1
   342f0:	str	r9, [sp, #20]
   342f4:	blt	34420 <__assert_fail@plt+0x22558>
   342f8:	mov	ip, #0
   342fc:	mov	r7, #1
   34300:	ldr	r6, [r9, ip, lsl #2]
   34304:	cmp	lr, #0
   34308:	mov	r1, #0
   3430c:	bne	34338 <__assert_fail@plt+0x22470>
   34310:	b	34360 <__assert_fail@plt+0x22498>
   34314:	ldr	r1, [sp, #24]
   34318:	add	ip, ip, #1
   3431c:	ldr	r1, [r1]
   34320:	cmp	ip, r1
   34324:	bge	344e8 <__assert_fail@plt+0x22620>
   34328:	ldr	r6, [r9, ip, lsl #2]
   3432c:	cmp	lr, #0
   34330:	mov	r1, #0
   34334:	beq	34360 <__assert_fail@plt+0x22498>
   34338:	mov	r1, #0
   3433c:	mov	r2, lr
   34340:	add	r5, r1, r2
   34344:	lsr	r4, r5, #1
   34348:	ldr	r3, [r0, r4, lsl #2]
   3434c:	cmp	r3, r6
   34350:	addlt	r1, r7, r5, lsr #1
   34354:	movge	r2, r4
   34358:	cmp	r1, r2
   3435c:	bcc	34340 <__assert_fail@plt+0x22478>
   34360:	ldr	r1, [r0, r1, lsl #2]
   34364:	cmp	r1, r6
   34368:	ldr	r1, [sp, #28]
   3436c:	beq	34314 <__assert_fail@plt+0x2244c>
   34370:	ldr	sl, [r1, #4]
   34374:	cmp	sl, #1
   34378:	blt	34314 <__assert_fail@plt+0x2244c>
   3437c:	ldr	r5, [r1, #8]
   34380:	subs	r4, sl, #1
   34384:	beq	343b4 <__assert_fail@plt+0x224ec>
   34388:	mov	r1, #0
   3438c:	mov	r8, r4
   34390:	add	r3, r1, r4
   34394:	lsr	r2, r3, #1
   34398:	ldr	r9, [r5, r2, lsl #2]
   3439c:	cmp	r9, r6
   343a0:	addlt	r1, r7, r3, lsr #1
   343a4:	movge	r4, r2
   343a8:	cmp	r1, r4
   343ac:	bcc	34390 <__assert_fail@plt+0x224c8>
   343b0:	b	343bc <__assert_fail@plt+0x224f4>
   343b4:	mov	r8, r4
   343b8:	mov	r1, #0
   343bc:	ldr	r2, [r5, r1, lsl #2]
   343c0:	ldr	r3, [sp, #28]
   343c4:	ldr	r9, [sp, #20]
   343c8:	mov	r4, r1
   343cc:	cmp	r2, r6
   343d0:	mvnne	r4, #0
   343d4:	cmp	r4, #0
   343d8:	bmi	34314 <__assert_fail@plt+0x2244c>
   343dc:	cmp	sl, r4
   343e0:	strgt	r8, [r3, #4]
   343e4:	cmpgt	r8, r4
   343e8:	ble	34314 <__assert_fail@plt+0x2244c>
   343ec:	add	r2, r5, r1, lsl #2
   343f0:	ldr	r2, [r2, #4]
   343f4:	str	r2, [r5, r1, lsl #2]
   343f8:	add	r1, r1, #1
   343fc:	ldr	r2, [r3, #4]
   34400:	cmp	r1, r2
   34404:	blt	343ec <__assert_fail@plt+0x22524>
   34408:	b	34314 <__assert_fail@plt+0x2244c>
   3440c:	ldr	r0, [sp, #40]	; 0x28
   34410:	bl	17c10 <__assert_fail@plt+0x5d48>
   34414:	mov	r0, r4
   34418:	sub	sp, fp, #28
   3441c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34420:	ldr	r7, [r2, #4]
   34424:	mov	sl, #0
   34428:	mov	r9, #1
   3442c:	cmp	r7, #1
   34430:	bge	34458 <__assert_fail@plt+0x22590>
   34434:	b	3443c <__assert_fail@plt+0x22574>
   34438:	ldr	r2, [sp, #28]
   3443c:	ldr	r1, [sp, #24]
   34440:	add	sl, sl, #1
   34444:	ldr	r1, [r1]
   34448:	cmp	sl, r1
   3444c:	bge	344e8 <__assert_fail@plt+0x22620>
   34450:	cmp	r7, #1
   34454:	blt	3443c <__assert_fail@plt+0x22574>
   34458:	ldr	r1, [sp, #20]
   3445c:	ldr	r6, [r2, #8]
   34460:	subs	lr, r7, #1
   34464:	mov	r5, #0
   34468:	ldr	r1, [r1, sl, lsl #2]
   3446c:	beq	34494 <__assert_fail@plt+0x225cc>
   34470:	mov	r4, lr
   34474:	add	r3, r5, r4
   34478:	lsr	r2, r3, #1
   3447c:	ldr	ip, [r6, r2, lsl #2]
   34480:	cmp	ip, r1
   34484:	addlt	r5, r9, r3, lsr #1
   34488:	movge	r4, r2
   3448c:	cmp	r5, r4
   34490:	bcc	34474 <__assert_fail@plt+0x225ac>
   34494:	ldr	r2, [r6, r5, lsl #2]
   34498:	cmp	r2, r1
   3449c:	mov	r1, r5
   344a0:	mvnne	r1, #0
   344a4:	cmp	r1, #0
   344a8:	bmi	34438 <__assert_fail@plt+0x22570>
   344ac:	ldr	r2, [sp, #28]
   344b0:	cmp	r7, r1
   344b4:	ble	3443c <__assert_fail@plt+0x22574>
   344b8:	cmp	lr, r1
   344bc:	mov	r7, lr
   344c0:	str	lr, [r2, #4]
   344c4:	ble	3443c <__assert_fail@plt+0x22574>
   344c8:	add	r1, r6, r5, lsl #2
   344cc:	ldr	r1, [r1, #4]
   344d0:	str	r1, [r6, r5, lsl #2]
   344d4:	add	r5, r5, #1
   344d8:	ldr	r7, [r2, #4]
   344dc:	cmp	r5, r7
   344e0:	blt	344c8 <__assert_fail@plt+0x22600>
   344e4:	b	3443c <__assert_fail@plt+0x22574>
   344e8:	mov	r4, #0
   344ec:	bl	17c10 <__assert_fail@plt+0x5d48>
   344f0:	mov	r0, r4
   344f4:	sub	sp, fp, #28
   344f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344fc:	mov	r1, r0
   34500:	ldr	r0, [sp, #40]	; 0x28
   34504:	mov	r4, r1
   34508:	bl	17c10 <__assert_fail@plt+0x5d48>
   3450c:	mov	r0, r4
   34510:	sub	sp, fp, #28
   34514:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34518:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3451c:	add	fp, sp, #28
   34520:	sub	sp, sp, #44	; 0x2c
   34524:	ldr	r4, [r0, #84]	; 0x54
   34528:	mov	r7, r0
   3452c:	str	r1, [fp, #-32]	; 0xffffffe0
   34530:	add	r1, r3, r3, lsl #1
   34534:	mov	r6, r2
   34538:	str	r3, [sp, #36]	; 0x24
   3453c:	ldr	r0, [r4, #24]
   34540:	add	r0, r0, r1, lsl #2
   34544:	mov	r2, r0
   34548:	ldr	r1, [r2, #4]!
   3454c:	str	r2, [sp, #28]
   34550:	cmp	r1, #1
   34554:	blt	34820 <__assert_fail@plt+0x22958>
   34558:	mov	r1, #1
   3455c:	cmp	r6, #31
   34560:	add	r0, r0, #8
   34564:	mov	sl, #0
   34568:	mvn	r2, r1, lsl r6
   3456c:	lsl	r1, r1, r6
   34570:	str	r0, [sp, #32]
   34574:	str	r2, [sp, #16]
   34578:	ldr	r2, [fp, #-32]	; 0xffffffe0
   3457c:	str	r1, [sp, #24]
   34580:	mov	r1, #0
   34584:	movwgt	r1, #1
   34588:	and	r3, r2, #2
   3458c:	and	r0, r2, #1
   34590:	orr	r1, r1, r3, lsr #1
   34594:	str	r3, [sp, #20]
   34598:	str	r0, [sp, #8]
   3459c:	str	r1, [sp, #12]
   345a0:	b	345b8 <__assert_fail@plt+0x226f0>
   345a4:	ldr	r0, [sp, #28]
   345a8:	add	sl, sl, #1
   345ac:	ldr	r0, [r0]
   345b0:	cmp	sl, r0
   345b4:	bge	34820 <__assert_fail@plt+0x22958>
   345b8:	ldr	r0, [sp, #32]
   345bc:	ldr	r0, [r0]
   345c0:	ldr	r8, [r0, sl, lsl #2]
   345c4:	ldr	r0, [r4]
   345c8:	add	r1, r0, r8, lsl #3
   345cc:	ldrb	r1, [r1, #4]
   345d0:	cmp	r1, #9
   345d4:	beq	34620 <__assert_fail@plt+0x22758>
   345d8:	cmp	r1, #8
   345dc:	beq	3463c <__assert_fail@plt+0x22774>
   345e0:	cmp	r1, #4
   345e4:	bne	345a4 <__assert_fail@plt+0x226dc>
   345e8:	ldr	r0, [fp, #8]
   345ec:	cmn	r0, #1
   345f0:	beq	345a4 <__assert_fail@plt+0x226dc>
   345f4:	ldr	r1, [fp, #8]
   345f8:	ldr	r0, [r7, #116]	; 0x74
   345fc:	cmp	r6, #31
   34600:	add	r1, r1, r1, lsl #1
   34604:	bgt	346f8 <__assert_fail@plt+0x22830>
   34608:	add	r0, r0, r1, lsl #3
   3460c:	add	r9, r0, #16
   34610:	ldr	r0, [r9, #-16]
   34614:	cmp	r0, r8
   34618:	bne	34670 <__assert_fail@plt+0x227a8>
   3461c:	b	3468c <__assert_fail@plt+0x227c4>
   34620:	ldr	r1, [sp, #20]
   34624:	cmp	r1, #0
   34628:	beq	345a4 <__assert_fail@plt+0x226dc>
   3462c:	ldr	r0, [r0, r8, lsl #3]
   34630:	cmp	r0, r6
   34634:	bne	345a4 <__assert_fail@plt+0x226dc>
   34638:	b	34840 <__assert_fail@plt+0x22978>
   3463c:	ldr	r1, [sp, #8]
   34640:	cmp	r1, #0
   34644:	beq	345a4 <__assert_fail@plt+0x226dc>
   34648:	ldr	r0, [r0, r8, lsl #3]
   3464c:	cmp	r0, r6
   34650:	bne	345a4 <__assert_fail@plt+0x226dc>
   34654:	b	3484c <__assert_fail@plt+0x22984>
   34658:	cmn	r0, #1
   3465c:	beq	34818 <__assert_fail@plt+0x22950>
   34660:	ldr	r0, [r9]
   34664:	ldr	r1, [sp, #16]
   34668:	and	r0, r0, r1
   3466c:	str	r0, [r9]
   34670:	ldrb	r0, [r9, #4]
   34674:	add	r9, r9, #24
   34678:	cmp	r0, #0
   3467c:	beq	345a4 <__assert_fail@plt+0x226dc>
   34680:	ldr	r0, [r9, #-16]
   34684:	cmp	r0, r8
   34688:	bne	34670 <__assert_fail@plt+0x227a8>
   3468c:	ldr	r0, [r9]
   34690:	ldr	r1, [sp, #24]
   34694:	tst	r0, r1
   34698:	beq	34670 <__assert_fail@plt+0x227a8>
   3469c:	ldr	r0, [r4, #20]
   346a0:	add	r1, r8, r8, lsl #1
   346a4:	add	r0, r0, r1, lsl #2
   346a8:	ldr	r0, [r0, #8]
   346ac:	ldr	r3, [r0]
   346b0:	ldr	r0, [sp, #36]	; 0x24
   346b4:	cmp	r3, r0
   346b8:	beq	34830 <__assert_fail@plt+0x22968>
   346bc:	ldr	r0, [fp, #8]
   346c0:	ldr	r1, [fp, #-32]	; 0xffffffe0
   346c4:	mov	r2, r6
   346c8:	str	r0, [sp]
   346cc:	mov	r0, r7
   346d0:	bl	34518 <__assert_fail@plt+0x22650>
   346d4:	cmp	r0, #0
   346d8:	bne	34658 <__assert_fail@plt+0x22790>
   346dc:	ldr	r0, [sp, #12]
   346e0:	cmp	r0, #0
   346e4:	beq	34660 <__assert_fail@plt+0x22798>
   346e8:	ldr	r0, [sp, #20]
   346ec:	cmp	r0, #0
   346f0:	beq	34670 <__assert_fail@plt+0x227a8>
   346f4:	b	34840 <__assert_fail@plt+0x22978>
   346f8:	ldr	r2, [sp, #12]
   346fc:	cmp	r2, #0
   34700:	beq	3478c <__assert_fail@plt+0x228c4>
   34704:	add	r5, r0, r1, lsl #3
   34708:	ldr	r0, [r5]
   3470c:	cmp	r0, r8
   34710:	bne	34724 <__assert_fail@plt+0x2285c>
   34714:	b	34740 <__assert_fail@plt+0x22878>
   34718:	ldr	r0, [sp, #20]
   3471c:	cmp	r0, #0
   34720:	bne	34840 <__assert_fail@plt+0x22978>
   34724:	ldrb	r0, [r5, #20]
   34728:	add	r5, r5, #24
   3472c:	cmp	r0, #0
   34730:	beq	345a4 <__assert_fail@plt+0x226dc>
   34734:	ldr	r0, [r5]
   34738:	cmp	r0, r8
   3473c:	bne	34724 <__assert_fail@plt+0x2285c>
   34740:	ldr	r0, [r4, #20]
   34744:	add	r1, r8, r8, lsl #1
   34748:	add	r0, r0, r1, lsl #2
   3474c:	ldr	r0, [r0, #8]
   34750:	ldr	r3, [r0]
   34754:	ldr	r0, [sp, #36]	; 0x24
   34758:	cmp	r3, r0
   3475c:	beq	34830 <__assert_fail@plt+0x22968>
   34760:	ldr	r0, [fp, #8]
   34764:	ldr	r1, [fp, #-32]	; 0xffffffe0
   34768:	mov	r2, r6
   3476c:	str	r0, [sp]
   34770:	mov	r0, r7
   34774:	bl	34518 <__assert_fail@plt+0x22650>
   34778:	cmp	r0, #0
   3477c:	beq	34718 <__assert_fail@plt+0x22850>
   34780:	cmn	r0, #1
   34784:	bne	34724 <__assert_fail@plt+0x2285c>
   34788:	b	34818 <__assert_fail@plt+0x22950>
   3478c:	add	r0, r0, r1, lsl #3
   34790:	add	r5, r0, #16
   34794:	ldr	r0, [r5, #-16]
   34798:	cmp	r0, r8
   3479c:	bne	347b4 <__assert_fail@plt+0x228ec>
   347a0:	b	347d0 <__assert_fail@plt+0x22908>
   347a4:	ldr	r0, [r5]
   347a8:	ldr	r1, [sp, #16]
   347ac:	and	r0, r0, r1
   347b0:	str	r0, [r5]
   347b4:	ldrb	r0, [r5, #4]
   347b8:	add	r5, r5, #24
   347bc:	cmp	r0, #0
   347c0:	beq	345a4 <__assert_fail@plt+0x226dc>
   347c4:	ldr	r0, [r5, #-16]
   347c8:	cmp	r0, r8
   347cc:	bne	347b4 <__assert_fail@plt+0x228ec>
   347d0:	ldr	r0, [r4, #20]
   347d4:	add	r1, r8, r8, lsl #1
   347d8:	add	r0, r0, r1, lsl #2
   347dc:	ldr	r0, [r0, #8]
   347e0:	ldr	r3, [r0]
   347e4:	ldr	r0, [sp, #36]	; 0x24
   347e8:	cmp	r3, r0
   347ec:	beq	34830 <__assert_fail@plt+0x22968>
   347f0:	ldr	r0, [fp, #8]
   347f4:	ldr	r1, [fp, #-32]	; 0xffffffe0
   347f8:	mov	r2, r6
   347fc:	str	r0, [sp]
   34800:	mov	r0, r7
   34804:	bl	34518 <__assert_fail@plt+0x22650>
   34808:	cmp	r0, #0
   3480c:	beq	347a4 <__assert_fail@plt+0x228dc>
   34810:	cmn	r0, #1
   34814:	bne	347b4 <__assert_fail@plt+0x228ec>
   34818:	sub	sp, fp, #28
   3481c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34820:	ldr	r0, [fp, #-32]	; 0xffffffe0
   34824:	ubfx	r0, r0, #1, #1
   34828:	sub	sp, fp, #28
   3482c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34830:	ldr	r0, [sp, #8]
   34834:	rsb	r0, r0, #0
   34838:	sub	sp, fp, #28
   3483c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34840:	mov	r0, #0
   34844:	sub	sp, fp, #28
   34848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3484c:	mvn	r0, #0
   34850:	sub	sp, fp, #28
   34854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34858:	push	{r4, r5, fp, lr}
   3485c:	add	fp, sp, #8
   34860:	mov	r4, r1
   34864:	mov	r1, #0
   34868:	mov	r5, r0
   3486c:	mov	r2, r4
   34870:	bl	11d48 <memchr@plt>
   34874:	sub	r1, r0, r5
   34878:	cmp	r0, #0
   3487c:	addne	r4, r1, #1
   34880:	mov	r0, r4
   34884:	pop	{r4, r5, fp, pc}
   34888:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3488c:	add	fp, sp, #24
   34890:	mov	r4, r0
   34894:	cmp	r0, #0
   34898:	beq	348cc <__assert_fail@plt+0x22a04>
   3489c:	mov	r0, r4
   348a0:	bl	11cac <strlen@plt>
   348a4:	add	r5, r0, #1
   348a8:	cmp	r5, #58	; 0x3a
   348ac:	bls	348d0 <__assert_fail@plt+0x22a08>
   348b0:	add	r0, r0, #10
   348b4:	bic	r0, r0, #3
   348b8:	bl	38450 <__assert_fail@plt+0x26588>
   348bc:	mov	r6, r0
   348c0:	cmp	r0, #0
   348c4:	bne	348e4 <__assert_fail@plt+0x22a1c>
   348c8:	b	3491c <__assert_fail@plt+0x22a54>
   348cc:	mov	r5, #0
   348d0:	mov	r0, #64	; 0x40
   348d4:	bl	38450 <__assert_fail@plt+0x26588>
   348d8:	mov	r6, r0
   348dc:	cmp	r0, #0
   348e0:	beq	3491c <__assert_fail@plt+0x22a54>
   348e4:	cmp	r4, #0
   348e8:	mov	r0, r4
   348ec:	mov	r8, #0
   348f0:	mov	r7, r6
   348f4:	movwne	r0, #1
   348f8:	str	r8, [r6]
   348fc:	strb	r0, [r6, #4]
   34900:	strb	r8, [r7, #5]!
   34904:	beq	3491c <__assert_fail@plt+0x22a54>
   34908:	mov	r0, r7
   3490c:	mov	r1, r4
   34910:	mov	r2, r5
   34914:	bl	11ab4 <memcpy@plt>
   34918:	strb	r8, [r7, r5]
   3491c:	mov	r0, r6
   34920:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   34924:	push	{r4, sl, fp, lr}
   34928:	add	fp, sp, #8
   3492c:	cmp	r0, #2
   34930:	popcc	{r4, sl, fp, pc}
   34934:	ldr	r4, [r0]
   34938:	bl	17c10 <__assert_fail@plt+0x5d48>
   3493c:	cmp	r4, #0
   34940:	mov	r0, r4
   34944:	bne	34934 <__assert_fail@plt+0x22a6c>
   34948:	pop	{r4, sl, fp, pc}
   3494c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34950:	add	fp, sp, #28
   34954:	sub	sp, sp, #4
   34958:	mov	r7, r2
   3495c:	mov	r5, r1
   34960:	cmp	r0, #0
   34964:	beq	349e0 <__assert_fail@plt+0x22b18>
   34968:	mov	r6, r0
   3496c:	movw	r0, #43989	; 0xabd5
   34970:	movt	r0, #3
   34974:	bl	11c04 <getenv@plt>
   34978:	mov	r9, r0
   3497c:	ldrb	r0, [r6, #4]
   34980:	cmp	r9, #0
   34984:	beq	349f4 <__assert_fail@plt+0x22b2c>
   34988:	cmp	r0, #0
   3498c:	beq	349a4 <__assert_fail@plt+0x22adc>
   34990:	add	r0, r6, #5
   34994:	mov	r1, r9
   34998:	bl	11a3c <strcmp@plt>
   3499c:	cmp	r0, #0
   349a0:	beq	34ae4 <__assert_fail@plt+0x22c1c>
   349a4:	mov	r0, r9
   349a8:	str	r7, [sp]
   349ac:	bl	11cac <strlen@plt>
   349b0:	add	sl, r0, #1
   349b4:	mov	r8, #1
   349b8:	cmp	sl, #58	; 0x3a
   349bc:	bls	34a08 <__assert_fail@plt+0x22b40>
   349c0:	add	r0, r0, #10
   349c4:	bic	r0, r0, #3
   349c8:	bl	38450 <__assert_fail@plt+0x26588>
   349cc:	cmp	r0, #0
   349d0:	bne	34a18 <__assert_fail@plt+0x22b50>
   349d4:	mov	r0, #0
   349d8:	sub	sp, fp, #28
   349dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   349e0:	mov	r0, r5
   349e4:	mov	r1, r7
   349e8:	sub	sp, fp, #28
   349ec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   349f0:	b	11a18 <gmtime_r@plt>
   349f4:	mov	r8, #0
   349f8:	cmp	r0, #0
   349fc:	mov	sl, #0
   34a00:	str	r7, [sp]
   34a04:	beq	34ae0 <__assert_fail@plt+0x22c18>
   34a08:	mov	r0, #64	; 0x40
   34a0c:	bl	38450 <__assert_fail@plt+0x26588>
   34a10:	cmp	r0, #0
   34a14:	beq	349d4 <__assert_fail@plt+0x22b0c>
   34a18:	mov	r4, r0
   34a1c:	mov	r7, r5
   34a20:	strb	r8, [r0, #4]
   34a24:	mov	r0, #0
   34a28:	cmp	r8, #0
   34a2c:	mov	r5, r4
   34a30:	str	r0, [r4]
   34a34:	strb	r0, [r5, #5]!
   34a38:	beq	34a54 <__assert_fail@plt+0x22b8c>
   34a3c:	mov	r0, r5
   34a40:	mov	r1, r9
   34a44:	mov	r2, sl
   34a48:	mov	r8, #0
   34a4c:	bl	11ab4 <memcpy@plt>
   34a50:	strb	r8, [r5, sl]
   34a54:	ldrb	r0, [r6, #4]
   34a58:	mov	r5, r7
   34a5c:	cmp	r0, #0
   34a60:	beq	34ac0 <__assert_fail@plt+0x22bf8>
   34a64:	movw	r0, #43989	; 0xabd5
   34a68:	add	r1, r6, #5
   34a6c:	mov	r2, #1
   34a70:	movt	r0, #3
   34a74:	bl	11cc4 <setenv@plt>
   34a78:	ldr	r7, [sp]
   34a7c:	cmp	r0, #0
   34a80:	beq	34ad8 <__assert_fail@plt+0x22c10>
   34a84:	bl	11cdc <__errno_location@plt>
   34a88:	ldr	r6, [r0]
   34a8c:	mov	r5, r0
   34a90:	cmp	r4, #2
   34a94:	bcc	34ab0 <__assert_fail@plt+0x22be8>
   34a98:	ldr	r7, [r4]
   34a9c:	mov	r0, r4
   34aa0:	bl	17c10 <__assert_fail@plt+0x5d48>
   34aa4:	cmp	r7, #0
   34aa8:	mov	r4, r7
   34aac:	bne	34a98 <__assert_fail@plt+0x22bd0>
   34ab0:	str	r6, [r5]
   34ab4:	mov	r0, #0
   34ab8:	sub	sp, fp, #28
   34abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ac0:	movw	r0, #43989	; 0xabd5
   34ac4:	movt	r0, #3
   34ac8:	bl	11e68 <unsetenv@plt>
   34acc:	ldr	r7, [sp]
   34ad0:	cmp	r0, #0
   34ad4:	bne	34a84 <__assert_fail@plt+0x22bbc>
   34ad8:	bl	11b68 <tzset@plt>
   34adc:	b	34ae8 <__assert_fail@plt+0x22c20>
   34ae0:	ldr	r7, [sp]
   34ae4:	mov	r4, #1
   34ae8:	mov	r0, r5
   34aec:	mov	r1, r7
   34af0:	bl	11b20 <localtime_r@plt>
   34af4:	mov	sl, #1
   34af8:	cmp	r0, #0
   34afc:	mov	r9, #1
   34b00:	beq	34b14 <__assert_fail@plt+0x22c4c>
   34b04:	mov	r0, r6
   34b08:	mov	r1, r7
   34b0c:	bl	34bc0 <__assert_fail@plt+0x22cf8>
   34b10:	eor	r9, r0, #1
   34b14:	cmp	r4, #1
   34b18:	beq	34b7c <__assert_fail@plt+0x22cb4>
   34b1c:	bl	11cdc <__errno_location@plt>
   34b20:	mov	r6, r0
   34b24:	ldr	r8, [r0]
   34b28:	ldrb	r0, [r4, #4]
   34b2c:	cmp	r0, #0
   34b30:	beq	34b98 <__assert_fail@plt+0x22cd0>
   34b34:	movw	r0, #43989	; 0xabd5
   34b38:	add	r1, r4, #5
   34b3c:	mov	r2, #1
   34b40:	movt	r0, #3
   34b44:	bl	11cc4 <setenv@plt>
   34b48:	cmp	r0, #0
   34b4c:	beq	34bac <__assert_fail@plt+0x22ce4>
   34b50:	ldr	r8, [r6]
   34b54:	mov	sl, #0
   34b58:	cmp	r4, #2
   34b5c:	bcc	34b78 <__assert_fail@plt+0x22cb0>
   34b60:	ldr	r5, [r4]
   34b64:	mov	r0, r4
   34b68:	bl	17c10 <__assert_fail@plt+0x5d48>
   34b6c:	cmp	r5, #0
   34b70:	mov	r4, r5
   34b74:	bne	34b60 <__assert_fail@plt+0x22c98>
   34b78:	str	r8, [r6]
   34b7c:	cmp	sl, #0
   34b80:	moveq	r7, sl
   34b84:	cmp	r9, #0
   34b88:	movwne	r7, #0
   34b8c:	mov	r0, r7
   34b90:	sub	sp, fp, #28
   34b94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b98:	movw	r0, #43989	; 0xabd5
   34b9c:	movt	r0, #3
   34ba0:	bl	11e68 <unsetenv@plt>
   34ba4:	cmp	r0, #0
   34ba8:	bne	34b50 <__assert_fail@plt+0x22c88>
   34bac:	bl	11b68 <tzset@plt>
   34bb0:	mov	sl, #1
   34bb4:	cmp	r4, #2
   34bb8:	bcs	34b60 <__assert_fail@plt+0x22c98>
   34bbc:	b	34b78 <__assert_fail@plt+0x22cb0>
   34bc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34bc4:	add	fp, sp, #28
   34bc8:	sub	sp, sp, #4
   34bcc:	ldr	r7, [r1, #40]	; 0x28
   34bd0:	mov	r8, #1
   34bd4:	cmp	r7, #0
   34bd8:	beq	34c78 <__assert_fail@plt+0x22db0>
   34bdc:	mov	r5, r1
   34be0:	mov	r6, r0
   34be4:	cmp	r7, r1
   34be8:	bcc	34bf8 <__assert_fail@plt+0x22d30>
   34bec:	add	r0, r5, #44	; 0x2c
   34bf0:	cmp	r7, r0
   34bf4:	bcc	34c78 <__assert_fail@plt+0x22db0>
   34bf8:	ldrb	r0, [r7]
   34bfc:	cmp	r0, #0
   34c00:	beq	34c6c <__assert_fail@plt+0x22da4>
   34c04:	add	r4, r6, #5
   34c08:	mov	r0, r4
   34c0c:	mov	r1, r7
   34c10:	bl	11a3c <strcmp@plt>
   34c14:	cmp	r0, #0
   34c18:	beq	34d1c <__assert_fail@plt+0x22e54>
   34c1c:	ldrb	r0, [r4]
   34c20:	cmp	r0, #0
   34c24:	bne	34c40 <__assert_fail@plt+0x22d78>
   34c28:	add	r0, r6, #5
   34c2c:	cmp	r4, r0
   34c30:	bne	34c84 <__assert_fail@plt+0x22dbc>
   34c34:	ldrb	r0, [r6, #4]
   34c38:	cmp	r0, #0
   34c3c:	beq	34c84 <__assert_fail@plt+0x22dbc>
   34c40:	mov	r0, r4
   34c44:	bl	11cac <strlen@plt>
   34c48:	add	r4, r0, r4
   34c4c:	ldrb	r0, [r4, #1]!
   34c50:	cmp	r0, #0
   34c54:	bne	34c08 <__assert_fail@plt+0x22d40>
   34c58:	ldr	r0, [r6]
   34c5c:	cmp	r0, #0
   34c60:	addne	r4, r0, #5
   34c64:	movne	r6, r0
   34c68:	b	34c08 <__assert_fail@plt+0x22d40>
   34c6c:	movw	r4, #43540	; 0xaa14
   34c70:	movt	r4, #3
   34c74:	str	r4, [r5, #40]	; 0x28
   34c78:	mov	r0, r8
   34c7c:	sub	sp, fp, #28
   34c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34c84:	sub	r0, r6, r4
   34c88:	add	sl, r0, #64	; 0x40
   34c8c:	mov	r0, r7
   34c90:	bl	11cac <strlen@plt>
   34c94:	add	r9, r0, #1
   34c98:	cmp	r9, sl
   34c9c:	bge	34cc8 <__assert_fail@plt+0x22e00>
   34ca0:	mov	r0, r4
   34ca4:	mov	r1, r7
   34ca8:	mov	r2, r9
   34cac:	bl	11ab4 <memcpy@plt>
   34cb0:	mov	r0, #0
   34cb4:	strb	r0, [r4, r9]
   34cb8:	str	r4, [r5, #40]	; 0x28
   34cbc:	mov	r0, r8
   34cc0:	sub	sp, fp, #28
   34cc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34cc8:	add	r0, r0, #10
   34ccc:	cmp	r9, #59	; 0x3b
   34cd0:	bic	r0, r0, #3
   34cd4:	movwcc	r0, #64	; 0x40
   34cd8:	bl	38450 <__assert_fail@plt+0x26588>
   34cdc:	cmp	r0, #0
   34ce0:	beq	34d2c <__assert_fail@plt+0x22e64>
   34ce4:	mov	sl, r0
   34ce8:	mov	r0, #1
   34cec:	mov	r1, r7
   34cf0:	mov	r2, r9
   34cf4:	strh	r0, [sl, #4]
   34cf8:	mov	r0, #0
   34cfc:	add	r4, sl, #5
   34d00:	str	r0, [sl]
   34d04:	mov	r0, r4
   34d08:	bl	11ab4 <memcpy@plt>
   34d0c:	mov	r0, #0
   34d10:	strb	r0, [r4, r9]
   34d14:	str	sl, [r6]
   34d18:	strb	r0, [sl, #4]
   34d1c:	str	r4, [r5, #40]	; 0x28
   34d20:	mov	r0, r8
   34d24:	sub	sp, fp, #28
   34d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d2c:	mov	r8, #0
   34d30:	str	r8, [r6]
   34d34:	mov	r0, r8
   34d38:	sub	sp, fp, #28
   34d3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34d40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d44:	add	fp, sp, #28
   34d48:	sub	sp, sp, #52	; 0x34
   34d4c:	mov	r9, r1
   34d50:	cmp	r0, #0
   34d54:	beq	34dd0 <__assert_fail@plt+0x22f08>
   34d58:	mov	r7, r0
   34d5c:	movw	r0, #43989	; 0xabd5
   34d60:	movt	r0, #3
   34d64:	bl	11c04 <getenv@plt>
   34d68:	mov	r5, r0
   34d6c:	ldrb	r0, [r7, #4]
   34d70:	cmp	r5, #0
   34d74:	beq	34de0 <__assert_fail@plt+0x22f18>
   34d78:	cmp	r0, #0
   34d7c:	beq	34d94 <__assert_fail@plt+0x22ecc>
   34d80:	add	r0, r7, #5
   34d84:	mov	r1, r5
   34d88:	bl	11a3c <strcmp@plt>
   34d8c:	cmp	r0, #0
   34d90:	beq	34ea4 <__assert_fail@plt+0x22fdc>
   34d94:	mov	r0, r5
   34d98:	bl	11cac <strlen@plt>
   34d9c:	add	sl, r0, #1
   34da0:	mov	r8, #1
   34da4:	cmp	sl, #58	; 0x3a
   34da8:	bls	34df0 <__assert_fail@plt+0x22f28>
   34dac:	add	r0, r0, #10
   34db0:	bic	r0, r0, #3
   34db4:	bl	38450 <__assert_fail@plt+0x26588>
   34db8:	mvn	r6, #0
   34dbc:	cmp	r0, #0
   34dc0:	bne	34e04 <__assert_fail@plt+0x22f3c>
   34dc4:	mov	r0, r6
   34dc8:	sub	sp, fp, #28
   34dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34dd0:	mov	r0, r9
   34dd4:	sub	sp, fp, #28
   34dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34ddc:	b	11df0 <timegm@plt>
   34de0:	mov	r8, #0
   34de4:	cmp	r0, #0
   34de8:	mov	sl, #0
   34dec:	beq	34ea4 <__assert_fail@plt+0x22fdc>
   34df0:	mov	r0, #64	; 0x40
   34df4:	bl	38450 <__assert_fail@plt+0x26588>
   34df8:	mvn	r6, #0
   34dfc:	cmp	r0, #0
   34e00:	beq	34dc4 <__assert_fail@plt+0x22efc>
   34e04:	mov	r4, r0
   34e08:	strb	r8, [r0, #4]
   34e0c:	mov	r0, #0
   34e10:	cmp	r8, #0
   34e14:	mov	r6, r4
   34e18:	str	r0, [r4]
   34e1c:	strb	r0, [r6, #5]!
   34e20:	beq	34e3c <__assert_fail@plt+0x22f74>
   34e24:	mov	r0, r6
   34e28:	mov	r1, r5
   34e2c:	mov	r2, sl
   34e30:	mov	r8, #0
   34e34:	bl	11ab4 <memcpy@plt>
   34e38:	strb	r8, [r6, sl]
   34e3c:	ldrb	r0, [r7, #4]
   34e40:	cmp	r0, #0
   34e44:	beq	34eac <__assert_fail@plt+0x22fe4>
   34e48:	movw	r0, #43989	; 0xabd5
   34e4c:	add	r1, r7, #5
   34e50:	mov	r2, #1
   34e54:	movt	r0, #3
   34e58:	bl	11cc4 <setenv@plt>
   34e5c:	cmp	r0, #0
   34e60:	beq	34ec0 <__assert_fail@plt+0x22ff8>
   34e64:	bl	11cdc <__errno_location@plt>
   34e68:	ldr	r5, [r0]
   34e6c:	mov	r6, r0
   34e70:	cmp	r4, #2
   34e74:	bcc	34e90 <__assert_fail@plt+0x22fc8>
   34e78:	ldr	r7, [r4]
   34e7c:	mov	r0, r4
   34e80:	bl	17c10 <__assert_fail@plt+0x5d48>
   34e84:	cmp	r7, #0
   34e88:	mov	r4, r7
   34e8c:	bne	34e78 <__assert_fail@plt+0x22fb0>
   34e90:	str	r5, [r6]
   34e94:	mvn	r6, #0
   34e98:	mov	r0, r6
   34e9c:	sub	sp, fp, #28
   34ea0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ea4:	mov	r4, #1
   34ea8:	b	34ec4 <__assert_fail@plt+0x22ffc>
   34eac:	movw	r0, #43989	; 0xabd5
   34eb0:	movt	r0, #3
   34eb4:	bl	11e68 <unsetenv@plt>
   34eb8:	cmp	r0, #0
   34ebc:	bne	34e64 <__assert_fail@plt+0x22f9c>
   34ec0:	bl	11b68 <tzset@plt>
   34ec4:	mov	r0, #32
   34ec8:	mov	r1, r9
   34ecc:	add	r5, sp, #8
   34ed0:	vld1.32	{d16-d17}, [r1], r0
   34ed4:	mov	r2, r5
   34ed8:	vst1.32	{d16-d17}, [r2], r0
   34edc:	ldr	r0, [r9, #16]
   34ee0:	ldr	r3, [r9, #20]
   34ee4:	str	r0, [sp, #24]
   34ee8:	mvn	r0, #0
   34eec:	str	r0, [sp, #36]	; 0x24
   34ef0:	str	r3, [sp, #28]
   34ef4:	ldr	r0, [r1]
   34ef8:	str	r0, [r2]
   34efc:	mov	r0, r5
   34f00:	bl	11a54 <mktime@plt>
   34f04:	mov	r6, r0
   34f08:	ldr	r0, [sp, #36]	; 0x24
   34f0c:	mov	sl, #1
   34f10:	mov	r8, #1
   34f14:	cmp	r0, #0
   34f18:	bmi	34f2c <__assert_fail@plt+0x23064>
   34f1c:	add	r1, sp, #8
   34f20:	mov	r0, r7
   34f24:	bl	34bc0 <__assert_fail@plt+0x22cf8>
   34f28:	eor	r8, r0, #1
   34f2c:	cmp	r4, #1
   34f30:	beq	34fa4 <__assert_fail@plt+0x230dc>
   34f34:	bl	11cdc <__errno_location@plt>
   34f38:	mov	r7, r0
   34f3c:	ldr	sl, [r0]
   34f40:	ldrb	r0, [r4, #4]
   34f44:	cmp	r0, #0
   34f48:	beq	34ff0 <__assert_fail@plt+0x23128>
   34f4c:	movw	r0, #43989	; 0xabd5
   34f50:	add	r1, r4, #5
   34f54:	mov	r2, #1
   34f58:	movt	r0, #3
   34f5c:	bl	11cc4 <setenv@plt>
   34f60:	cmp	r0, #0
   34f64:	str	r6, [sp, #4]
   34f68:	beq	35008 <__assert_fail@plt+0x23140>
   34f6c:	ldr	r0, [r7]
   34f70:	mov	sl, #0
   34f74:	str	r0, [sp]
   34f78:	cmp	r4, #2
   34f7c:	bcc	34f98 <__assert_fail@plt+0x230d0>
   34f80:	ldr	r6, [r4]
   34f84:	mov	r0, r4
   34f88:	bl	17c10 <__assert_fail@plt+0x5d48>
   34f8c:	cmp	r6, #0
   34f90:	mov	r4, r6
   34f94:	bne	34f80 <__assert_fail@plt+0x230b8>
   34f98:	ldr	r0, [sp]
   34f9c:	ldr	r6, [sp, #4]
   34fa0:	str	r0, [r7]
   34fa4:	eor	r0, sl, #1
   34fa8:	orrs	r0, r8, r0
   34fac:	beq	34fc0 <__assert_fail@plt+0x230f8>
   34fb0:	mvn	r6, #0
   34fb4:	mov	r0, r6
   34fb8:	sub	sp, fp, #28
   34fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34fc0:	mov	r0, #28
   34fc4:	add	r1, r5, #16
   34fc8:	vld1.32	{d16-d17}, [r5], r0
   34fcc:	vld1.64	{d18-d19}, [r1]
   34fd0:	add	r1, r9, #16
   34fd4:	vld1.32	{d20-d21}, [r5]
   34fd8:	vst1.32	{d16-d17}, [r9], r0
   34fdc:	vst1.32	{d18-d19}, [r1]
   34fe0:	vst1.32	{d20-d21}, [r9]
   34fe4:	mov	r0, r6
   34fe8:	sub	sp, fp, #28
   34fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ff0:	movw	r0, #43989	; 0xabd5
   34ff4:	movt	r0, #3
   34ff8:	bl	11e68 <unsetenv@plt>
   34ffc:	cmp	r0, #0
   35000:	str	r6, [sp, #4]
   35004:	bne	34f6c <__assert_fail@plt+0x230a4>
   35008:	str	sl, [sp]
   3500c:	bl	11b68 <tzset@plt>
   35010:	mov	sl, #1
   35014:	cmp	r4, #2
   35018:	bcs	34f80 <__assert_fail@plt+0x230b8>
   3501c:	b	34f98 <__assert_fail@plt+0x230d0>
   35020:	push	{r4, r5, r6, r7, fp, lr}
   35024:	add	fp, sp, #16
   35028:	mov	r4, r0
   3502c:	cmp	r0, #2
   35030:	bhi	35060 <__assert_fail@plt+0x23198>
   35034:	mov	r0, r4
   35038:	bl	3970c <__assert_fail@plt+0x27844>
   3503c:	mov	r5, r0
   35040:	bl	11cdc <__errno_location@plt>
   35044:	ldr	r7, [r0]
   35048:	mov	r6, r0
   3504c:	mov	r0, r4
   35050:	bl	11ea4 <close@plt>
   35054:	mov	r0, r5
   35058:	str	r7, [r6]
   3505c:	pop	{r4, r5, r6, r7, fp, pc}
   35060:	mov	r0, r4
   35064:	pop	{r4, r5, r6, r7, fp, pc}
   35068:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3506c:	add	fp, sp, #24
   35070:	sub	sp, sp, #32
   35074:	ldr	r6, [fp, #12]
   35078:	ldr	r7, [fp, #8]
   3507c:	mov	r4, r2
   35080:	mov	r8, r0
   35084:	cmp	r1, #0
   35088:	beq	350b0 <__assert_fail@plt+0x231e8>
   3508c:	movw	r2, #48273	; 0xbc91
   35090:	mov	r5, r1
   35094:	str	r3, [sp, #4]
   35098:	str	r4, [sp]
   3509c:	mov	r0, r8
   350a0:	mov	r1, #1
   350a4:	movt	r2, #3
   350a8:	mov	r3, r5
   350ac:	b	350c8 <__assert_fail@plt+0x23200>
   350b0:	movw	r2, #48285	; 0xbc9d
   350b4:	str	r3, [sp]
   350b8:	mov	r0, r8
   350bc:	mov	r1, #1
   350c0:	mov	r3, r4
   350c4:	movt	r2, #3
   350c8:	bl	11d3c <__fprintf_chk@plt>
   350cc:	movw	r1, #48292	; 0xbca4
   350d0:	mov	r0, #0
   350d4:	mov	r2, #5
   350d8:	movt	r1, #3
   350dc:	bl	11afc <dcgettext@plt>
   350e0:	movw	r2, #49010	; 0xbf72
   350e4:	mov	r3, r0
   350e8:	movw	r0, #2022	; 0x7e6
   350ec:	mov	r1, #1
   350f0:	movt	r2, #3
   350f4:	str	r0, [sp]
   350f8:	mov	r0, r8
   350fc:	bl	11d3c <__fprintf_chk@plt>
   35100:	movw	r4, #43539	; 0xaa13
   35104:	mov	r1, r8
   35108:	movt	r4, #3
   3510c:	mov	r0, r4
   35110:	bl	119e8 <fputs_unlocked@plt>
   35114:	movw	r1, #48296	; 0xbca8
   35118:	mov	r0, #0
   3511c:	mov	r2, #5
   35120:	movt	r1, #3
   35124:	bl	11afc <dcgettext@plt>
   35128:	movw	r3, #48467	; 0xbd53
   3512c:	mov	r2, r0
   35130:	mov	r0, r8
   35134:	mov	r1, #1
   35138:	movt	r3, #3
   3513c:	bl	11d3c <__fprintf_chk@plt>
   35140:	mov	r0, r4
   35144:	mov	r1, r8
   35148:	bl	119e8 <fputs_unlocked@plt>
   3514c:	cmp	r6, #9
   35150:	bhi	3518c <__assert_fail@plt+0x232c4>
   35154:	add	r0, pc, #0
   35158:	ldr	pc, [r0, r6, lsl #2]
   3515c:	andeq	r5, r3, r4, lsl #3
   35160:	muleq	r3, r8, r1
   35164:	andeq	r5, r3, r8, asr #3
   35168:	strdeq	r5, [r3], -r0
   3516c:	andeq	r5, r3, r8, lsl r2
   35170:	andeq	r5, r3, r0, asr #4
   35174:	andeq	r5, r3, r8, ror #4
   35178:	andeq	r5, r3, r0, lsr #5
   3517c:	andeq	r5, r3, r8, asr #6
   35180:	strdeq	r5, [r3], -r0
   35184:	sub	sp, fp, #24
   35188:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   3518c:	movw	r1, #48820	; 0xbeb4
   35190:	movt	r1, #3
   35194:	b	352f8 <__assert_fail@plt+0x23430>
   35198:	movw	r1, #48501	; 0xbd75
   3519c:	mov	r0, #0
   351a0:	mov	r2, #5
   351a4:	movt	r1, #3
   351a8:	bl	11afc <dcgettext@plt>
   351ac:	ldr	r3, [r7]
   351b0:	mov	r2, r0
   351b4:	mov	r0, r8
   351b8:	mov	r1, #1
   351bc:	sub	sp, fp, #24
   351c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   351c4:	b	11d3c <__fprintf_chk@plt>
   351c8:	movw	r1, #48517	; 0xbd85
   351cc:	mov	r0, #0
   351d0:	mov	r2, #5
   351d4:	movt	r1, #3
   351d8:	bl	11afc <dcgettext@plt>
   351dc:	mov	r2, r0
   351e0:	ldr	r3, [r7]
   351e4:	ldr	r0, [r7, #4]
   351e8:	str	r0, [sp]
   351ec:	b	352dc <__assert_fail@plt+0x23414>
   351f0:	movw	r1, #48540	; 0xbd9c
   351f4:	mov	r0, #0
   351f8:	mov	r2, #5
   351fc:	movt	r1, #3
   35200:	bl	11afc <dcgettext@plt>
   35204:	mov	r2, r0
   35208:	ldr	r3, [r7]
   3520c:	ldmib	r7, {r0, r1}
   35210:	stm	sp, {r0, r1}
   35214:	b	352dc <__assert_fail@plt+0x23414>
   35218:	movw	r1, #48568	; 0xbdb8
   3521c:	mov	r0, #0
   35220:	mov	r2, #5
   35224:	movt	r1, #3
   35228:	bl	11afc <dcgettext@plt>
   3522c:	ldr	r3, [r7]
   35230:	mov	r2, r0
   35234:	ldmib	r7, {r0, r1, r7}
   35238:	stm	sp, {r0, r1, r7}
   3523c:	b	352dc <__assert_fail@plt+0x23414>
   35240:	movw	r1, #48600	; 0xbdd8
   35244:	mov	r0, #0
   35248:	mov	r2, #5
   3524c:	movt	r1, #3
   35250:	bl	11afc <dcgettext@plt>
   35254:	ldr	r3, [r7]
   35258:	mov	r2, r0
   3525c:	ldmib	r7, {r0, r1, r6, r7}
   35260:	stm	sp, {r0, r1, r6, r7}
   35264:	b	352dc <__assert_fail@plt+0x23414>
   35268:	movw	r1, #48636	; 0xbdfc
   3526c:	mov	r0, #0
   35270:	mov	r2, #5
   35274:	movt	r1, #3
   35278:	bl	11afc <dcgettext@plt>
   3527c:	mov	r2, r0
   35280:	ldr	r3, [r7]
   35284:	ldmib	r7, {r0, r1, r6}
   35288:	ldr	r5, [r7, #16]
   3528c:	ldr	r7, [r7, #20]
   35290:	stm	sp, {r0, r1, r6}
   35294:	str	r5, [sp, #12]
   35298:	str	r7, [sp, #16]
   3529c:	b	352dc <__assert_fail@plt+0x23414>
   352a0:	movw	r1, #48676	; 0xbe24
   352a4:	mov	r0, #0
   352a8:	mov	r2, #5
   352ac:	movt	r1, #3
   352b0:	bl	11afc <dcgettext@plt>
   352b4:	mov	r2, r0
   352b8:	ldr	r3, [r7]
   352bc:	ldmib	r7, {r0, r1, r6}
   352c0:	ldr	r5, [r7, #16]
   352c4:	ldr	r4, [r7, #20]
   352c8:	ldr	r7, [r7, #24]
   352cc:	stm	sp, {r0, r1, r6}
   352d0:	str	r5, [sp, #12]
   352d4:	str	r4, [sp, #16]
   352d8:	str	r7, [sp, #20]
   352dc:	mov	r0, r8
   352e0:	mov	r1, #1
   352e4:	bl	11d3c <__fprintf_chk@plt>
   352e8:	sub	sp, fp, #24
   352ec:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   352f0:	movw	r1, #48768	; 0xbe80
   352f4:	movt	r1, #3
   352f8:	mov	r0, #0
   352fc:	mov	r2, #5
   35300:	bl	11afc <dcgettext@plt>
   35304:	mov	ip, r0
   35308:	ldr	r3, [r7]
   3530c:	ldr	r0, [r7, #4]
   35310:	ldr	r1, [r7, #8]
   35314:	ldr	r6, [r7, #12]
   35318:	ldr	r5, [r7, #16]
   3531c:	ldr	r4, [r7, #20]
   35320:	ldr	r2, [r7, #24]
   35324:	ldr	lr, [r7, #28]
   35328:	ldr	r7, [r7, #32]
   3532c:	stm	sp, {r0, r1, r6}
   35330:	str	r5, [sp, #12]
   35334:	str	r4, [sp, #16]
   35338:	str	r2, [sp, #20]
   3533c:	str	lr, [sp, #24]
   35340:	str	r7, [sp, #28]
   35344:	b	3538c <__assert_fail@plt+0x234c4>
   35348:	movw	r1, #48720	; 0xbe50
   3534c:	mov	r0, #0
   35350:	mov	r2, #5
   35354:	movt	r1, #3
   35358:	bl	11afc <dcgettext@plt>
   3535c:	mov	ip, r0
   35360:	ldr	r3, [r7]
   35364:	ldmib	r7, {r0, r1, r6}
   35368:	ldr	r5, [r7, #16]
   3536c:	ldr	r4, [r7, #20]
   35370:	ldr	r2, [r7, #24]
   35374:	ldr	r7, [r7, #28]
   35378:	stm	sp, {r0, r1, r6}
   3537c:	str	r5, [sp, #12]
   35380:	str	r4, [sp, #16]
   35384:	str	r2, [sp, #20]
   35388:	str	r7, [sp, #24]
   3538c:	mov	r0, r8
   35390:	mov	r1, #1
   35394:	mov	r2, ip
   35398:	bl	11d3c <__fprintf_chk@plt>
   3539c:	sub	sp, fp, #24
   353a0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   353a4:	push	{r4, sl, fp, lr}
   353a8:	add	fp, sp, #8
   353ac:	sub	sp, sp, #8
   353b0:	ldr	ip, [fp, #8]
   353b4:	mov	lr, #0
   353b8:	ldr	r4, [ip, lr, lsl #2]
   353bc:	add	lr, lr, #1
   353c0:	cmp	r4, #0
   353c4:	bne	353b8 <__assert_fail@plt+0x234f0>
   353c8:	sub	r4, lr, #1
   353cc:	str	ip, [sp]
   353d0:	str	r4, [sp, #4]
   353d4:	bl	35068 <__assert_fail@plt+0x231a0>
   353d8:	sub	sp, fp, #8
   353dc:	pop	{r4, sl, fp, pc}
   353e0:	push	{fp, lr}
   353e4:	mov	fp, sp
   353e8:	sub	sp, sp, #48	; 0x30
   353ec:	ldr	ip, [fp, #8]
   353f0:	ldr	lr, [ip]
   353f4:	cmp	lr, #0
   353f8:	str	lr, [sp, #8]
   353fc:	beq	35498 <__assert_fail@plt+0x235d0>
   35400:	ldr	lr, [ip, #4]
   35404:	cmp	lr, #0
   35408:	str	lr, [sp, #12]
   3540c:	beq	354a0 <__assert_fail@plt+0x235d8>
   35410:	ldr	lr, [ip, #8]
   35414:	cmp	lr, #0
   35418:	str	lr, [sp, #16]
   3541c:	beq	354a8 <__assert_fail@plt+0x235e0>
   35420:	ldr	lr, [ip, #12]
   35424:	cmp	lr, #0
   35428:	str	lr, [sp, #20]
   3542c:	beq	354b0 <__assert_fail@plt+0x235e8>
   35430:	ldr	lr, [ip, #16]
   35434:	cmp	lr, #0
   35438:	str	lr, [sp, #24]
   3543c:	beq	354b8 <__assert_fail@plt+0x235f0>
   35440:	ldr	lr, [ip, #20]
   35444:	cmp	lr, #0
   35448:	str	lr, [sp, #28]
   3544c:	beq	354c0 <__assert_fail@plt+0x235f8>
   35450:	ldr	lr, [ip, #24]
   35454:	cmp	lr, #0
   35458:	str	lr, [sp, #32]
   3545c:	beq	354c8 <__assert_fail@plt+0x23600>
   35460:	ldr	lr, [ip, #28]
   35464:	cmp	lr, #0
   35468:	str	lr, [sp, #36]	; 0x24
   3546c:	beq	354d0 <__assert_fail@plt+0x23608>
   35470:	ldr	lr, [ip, #32]
   35474:	cmp	lr, #0
   35478:	str	lr, [sp, #40]	; 0x28
   3547c:	beq	354d8 <__assert_fail@plt+0x23610>
   35480:	ldr	lr, [ip, #36]	; 0x24
   35484:	mov	ip, #10
   35488:	cmp	lr, #0
   3548c:	str	lr, [sp, #44]	; 0x2c
   35490:	movweq	ip, #9
   35494:	b	354dc <__assert_fail@plt+0x23614>
   35498:	mov	ip, #0
   3549c:	b	354dc <__assert_fail@plt+0x23614>
   354a0:	mov	ip, #1
   354a4:	b	354dc <__assert_fail@plt+0x23614>
   354a8:	mov	ip, #2
   354ac:	b	354dc <__assert_fail@plt+0x23614>
   354b0:	mov	ip, #3
   354b4:	b	354dc <__assert_fail@plt+0x23614>
   354b8:	mov	ip, #4
   354bc:	b	354dc <__assert_fail@plt+0x23614>
   354c0:	mov	ip, #5
   354c4:	b	354dc <__assert_fail@plt+0x23614>
   354c8:	mov	ip, #6
   354cc:	b	354dc <__assert_fail@plt+0x23614>
   354d0:	mov	ip, #7
   354d4:	b	354dc <__assert_fail@plt+0x23614>
   354d8:	mov	ip, #8
   354dc:	add	lr, sp, #8
   354e0:	str	ip, [sp, #4]
   354e4:	str	lr, [sp]
   354e8:	bl	35068 <__assert_fail@plt+0x231a0>
   354ec:	mov	sp, fp
   354f0:	pop	{fp, pc}
   354f4:	push	{fp, lr}
   354f8:	mov	fp, sp
   354fc:	sub	sp, sp, #56	; 0x38
   35500:	add	ip, fp, #8
   35504:	str	ip, [sp, #12]
   35508:	ldr	lr, [fp, #8]
   3550c:	cmp	lr, #0
   35510:	str	lr, [sp, #16]
   35514:	beq	355b0 <__assert_fail@plt+0x236e8>
   35518:	ldr	lr, [ip, #4]
   3551c:	cmp	lr, #0
   35520:	str	lr, [sp, #20]
   35524:	beq	355b8 <__assert_fail@plt+0x236f0>
   35528:	ldr	lr, [ip, #8]
   3552c:	cmp	lr, #0
   35530:	str	lr, [sp, #24]
   35534:	beq	355c0 <__assert_fail@plt+0x236f8>
   35538:	ldr	lr, [ip, #12]
   3553c:	cmp	lr, #0
   35540:	str	lr, [sp, #28]
   35544:	beq	355c8 <__assert_fail@plt+0x23700>
   35548:	ldr	lr, [ip, #16]
   3554c:	cmp	lr, #0
   35550:	str	lr, [sp, #32]
   35554:	beq	355d0 <__assert_fail@plt+0x23708>
   35558:	ldr	lr, [ip, #20]
   3555c:	cmp	lr, #0
   35560:	str	lr, [sp, #36]	; 0x24
   35564:	beq	355d8 <__assert_fail@plt+0x23710>
   35568:	ldr	lr, [ip, #24]
   3556c:	cmp	lr, #0
   35570:	str	lr, [sp, #40]	; 0x28
   35574:	beq	355e0 <__assert_fail@plt+0x23718>
   35578:	ldr	lr, [ip, #28]
   3557c:	cmp	lr, #0
   35580:	str	lr, [sp, #44]	; 0x2c
   35584:	beq	355e8 <__assert_fail@plt+0x23720>
   35588:	ldr	lr, [ip, #32]
   3558c:	cmp	lr, #0
   35590:	str	lr, [sp, #48]	; 0x30
   35594:	beq	355f0 <__assert_fail@plt+0x23728>
   35598:	ldr	lr, [ip, #36]	; 0x24
   3559c:	mov	ip, #10
   355a0:	cmp	lr, #0
   355a4:	str	lr, [sp, #52]	; 0x34
   355a8:	movweq	ip, #9
   355ac:	b	355f4 <__assert_fail@plt+0x2372c>
   355b0:	mov	ip, #0
   355b4:	b	355f4 <__assert_fail@plt+0x2372c>
   355b8:	mov	ip, #1
   355bc:	b	355f4 <__assert_fail@plt+0x2372c>
   355c0:	mov	ip, #2
   355c4:	b	355f4 <__assert_fail@plt+0x2372c>
   355c8:	mov	ip, #3
   355cc:	b	355f4 <__assert_fail@plt+0x2372c>
   355d0:	mov	ip, #4
   355d4:	b	355f4 <__assert_fail@plt+0x2372c>
   355d8:	mov	ip, #5
   355dc:	b	355f4 <__assert_fail@plt+0x2372c>
   355e0:	mov	ip, #6
   355e4:	b	355f4 <__assert_fail@plt+0x2372c>
   355e8:	mov	ip, #7
   355ec:	b	355f4 <__assert_fail@plt+0x2372c>
   355f0:	mov	ip, #8
   355f4:	add	lr, sp, #16
   355f8:	str	ip, [sp, #4]
   355fc:	str	lr, [sp]
   35600:	bl	35068 <__assert_fail@plt+0x231a0>
   35604:	mov	sp, fp
   35608:	pop	{fp, pc}
   3560c:	push	{fp, lr}
   35610:	mov	fp, sp
   35614:	movw	r0, #53812	; 0xd234
   35618:	movt	r0, #4
   3561c:	ldr	r1, [r0]
   35620:	movw	r0, #43539	; 0xaa13
   35624:	movt	r0, #3
   35628:	bl	119e8 <fputs_unlocked@plt>
   3562c:	movw	r1, #48880	; 0xbef0
   35630:	mov	r0, #0
   35634:	mov	r2, #5
   35638:	movt	r1, #3
   3563c:	bl	11afc <dcgettext@plt>
   35640:	movw	r2, #48900	; 0xbf04
   35644:	mov	r1, r0
   35648:	mov	r0, #1
   3564c:	movt	r2, #3
   35650:	bl	11d24 <__printf_chk@plt>
   35654:	movw	r1, #48922	; 0xbf1a
   35658:	mov	r0, #0
   3565c:	mov	r2, #5
   35660:	movt	r1, #3
   35664:	bl	11afc <dcgettext@plt>
   35668:	movw	r2, #43992	; 0xabd8
   3566c:	movw	r3, #45303	; 0xb0f7
   35670:	mov	r1, r0
   35674:	mov	r0, #1
   35678:	movt	r2, #3
   3567c:	movt	r3, #3
   35680:	bl	11d24 <__printf_chk@plt>
   35684:	movw	r1, #48942	; 0xbf2e
   35688:	mov	r0, #0
   3568c:	mov	r2, #5
   35690:	movt	r1, #3
   35694:	bl	11afc <dcgettext@plt>
   35698:	movw	r2, #48981	; 0xbf55
   3569c:	mov	r1, r0
   356a0:	mov	r0, #1
   356a4:	movt	r2, #3
   356a8:	pop	{fp, lr}
   356ac:	b	11d24 <__printf_chk@plt>
   356b0:	push	{r4, r5, r6, sl, fp, lr}
   356b4:	add	fp, sp, #16
   356b8:	mov	r4, r2
   356bc:	mov	r5, r1
   356c0:	mov	r6, r0
   356c4:	bl	396d0 <__assert_fail@plt+0x27808>
   356c8:	cmp	r0, #0
   356cc:	popne	{r4, r5, r6, sl, fp, pc}
   356d0:	cmp	r6, #0
   356d4:	beq	356e8 <__assert_fail@plt+0x23820>
   356d8:	cmp	r5, #0
   356dc:	cmpne	r4, #0
   356e0:	bne	356e8 <__assert_fail@plt+0x23820>
   356e4:	pop	{r4, r5, r6, sl, fp, pc}
   356e8:	bl	35c64 <__assert_fail@plt+0x23d9c>
   356ec:	push	{r4, r5, r6, sl, fp, lr}
   356f0:	add	fp, sp, #16
   356f4:	mov	r4, r2
   356f8:	mov	r5, r1
   356fc:	mov	r6, r0
   35700:	bl	396d0 <__assert_fail@plt+0x27808>
   35704:	cmp	r0, #0
   35708:	popne	{r4, r5, r6, sl, fp, pc}
   3570c:	cmp	r6, #0
   35710:	beq	35724 <__assert_fail@plt+0x2385c>
   35714:	cmp	r5, #0
   35718:	cmpne	r4, #0
   3571c:	bne	35724 <__assert_fail@plt+0x2385c>
   35720:	pop	{r4, r5, r6, sl, fp, pc}
   35724:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35728:	push	{fp, lr}
   3572c:	mov	fp, sp
   35730:	bl	38450 <__assert_fail@plt+0x26588>
   35734:	cmp	r0, #0
   35738:	popne	{fp, pc}
   3573c:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35740:	push	{fp, lr}
   35744:	mov	fp, sp
   35748:	bl	38450 <__assert_fail@plt+0x26588>
   3574c:	cmp	r0, #0
   35750:	popne	{fp, pc}
   35754:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35758:	push	{fp, lr}
   3575c:	mov	fp, sp
   35760:	bl	38450 <__assert_fail@plt+0x26588>
   35764:	cmp	r0, #0
   35768:	popne	{fp, pc}
   3576c:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35770:	push	{r4, r5, fp, lr}
   35774:	add	fp, sp, #8
   35778:	mov	r4, r1
   3577c:	mov	r5, r0
   35780:	bl	38480 <__assert_fail@plt+0x265b8>
   35784:	cmp	r0, #0
   35788:	popne	{r4, r5, fp, pc}
   3578c:	cmp	r5, #0
   35790:	beq	357a0 <__assert_fail@plt+0x238d8>
   35794:	cmp	r4, #0
   35798:	bne	357a0 <__assert_fail@plt+0x238d8>
   3579c:	pop	{r4, r5, fp, pc}
   357a0:	bl	35c64 <__assert_fail@plt+0x23d9c>
   357a4:	push	{fp, lr}
   357a8:	mov	fp, sp
   357ac:	cmp	r1, #0
   357b0:	orreq	r1, r1, #1
   357b4:	bl	38480 <__assert_fail@plt+0x265b8>
   357b8:	cmp	r0, #0
   357bc:	popne	{fp, pc}
   357c0:	bl	35c64 <__assert_fail@plt+0x23d9c>
   357c4:	push	{fp, lr}
   357c8:	mov	fp, sp
   357cc:	clz	r3, r2
   357d0:	lsr	ip, r3, #5
   357d4:	clz	r3, r1
   357d8:	lsr	r3, r3, #5
   357dc:	orrs	r3, r3, ip
   357e0:	movwne	r1, #1
   357e4:	movwne	r2, #1
   357e8:	bl	396d0 <__assert_fail@plt+0x27808>
   357ec:	cmp	r0, #0
   357f0:	popne	{fp, pc}
   357f4:	bl	35c64 <__assert_fail@plt+0x23d9c>
   357f8:	push	{fp, lr}
   357fc:	mov	fp, sp
   35800:	mov	r2, r1
   35804:	mov	r1, r0
   35808:	mov	r0, #0
   3580c:	bl	396d0 <__assert_fail@plt+0x27808>
   35810:	cmp	r0, #0
   35814:	popne	{fp, pc}
   35818:	bl	35c64 <__assert_fail@plt+0x23d9c>
   3581c:	push	{fp, lr}
   35820:	mov	fp, sp
   35824:	mov	r2, r1
   35828:	mov	r1, r0
   3582c:	clz	r0, r2
   35830:	clz	r3, r1
   35834:	lsr	r0, r0, #5
   35838:	lsr	r3, r3, #5
   3583c:	orrs	r0, r3, r0
   35840:	mov	r0, #0
   35844:	movwne	r1, #1
   35848:	movwne	r2, #1
   3584c:	bl	396d0 <__assert_fail@plt+0x27808>
   35850:	cmp	r0, #0
   35854:	popne	{fp, pc}
   35858:	bl	35c64 <__assert_fail@plt+0x23d9c>
   3585c:	push	{r4, r5, r6, sl, fp, lr}
   35860:	add	fp, sp, #16
   35864:	ldr	r5, [r1]
   35868:	mov	r4, r1
   3586c:	mov	r6, r0
   35870:	cmp	r0, #0
   35874:	beq	3588c <__assert_fail@plt+0x239c4>
   35878:	mov	r0, #1
   3587c:	add	r0, r0, r5, lsr #1
   35880:	adds	r5, r5, r0
   35884:	bcc	35894 <__assert_fail@plt+0x239cc>
   35888:	b	358d0 <__assert_fail@plt+0x23a08>
   3588c:	cmp	r5, #0
   35890:	movweq	r5, #64	; 0x40
   35894:	mov	r0, r6
   35898:	mov	r1, r5
   3589c:	mov	r2, #1
   358a0:	bl	396d0 <__assert_fail@plt+0x27808>
   358a4:	cmp	r5, #0
   358a8:	mov	r1, r5
   358ac:	movwne	r1, #1
   358b0:	cmp	r0, #0
   358b4:	bne	358c8 <__assert_fail@plt+0x23a00>
   358b8:	clz	r2, r6
   358bc:	lsr	r2, r2, #5
   358c0:	orrs	r1, r2, r1
   358c4:	bne	358d0 <__assert_fail@plt+0x23a08>
   358c8:	str	r5, [r4]
   358cc:	pop	{r4, r5, r6, sl, fp, pc}
   358d0:	bl	35c64 <__assert_fail@plt+0x23d9c>
   358d4:	push	{r4, r5, r6, r7, fp, lr}
   358d8:	add	fp, sp, #16
   358dc:	ldr	r5, [r1]
   358e0:	mov	r6, r2
   358e4:	mov	r4, r1
   358e8:	mov	r7, r0
   358ec:	cmp	r0, #0
   358f0:	beq	35908 <__assert_fail@plt+0x23a40>
   358f4:	mov	r0, #1
   358f8:	add	r0, r0, r5, lsr #1
   358fc:	adds	r5, r5, r0
   35900:	bcc	35920 <__assert_fail@plt+0x23a58>
   35904:	b	35954 <__assert_fail@plt+0x23a8c>
   35908:	cmp	r5, #0
   3590c:	bne	35920 <__assert_fail@plt+0x23a58>
   35910:	mov	r0, #64	; 0x40
   35914:	cmp	r6, #64	; 0x40
   35918:	udiv	r5, r0, r6
   3591c:	addhi	r5, r5, #1
   35920:	mov	r0, r7
   35924:	mov	r1, r5
   35928:	mov	r2, r6
   3592c:	bl	396d0 <__assert_fail@plt+0x27808>
   35930:	cmp	r0, #0
   35934:	bne	3594c <__assert_fail@plt+0x23a84>
   35938:	cmp	r7, #0
   3593c:	beq	35954 <__assert_fail@plt+0x23a8c>
   35940:	cmp	r6, #0
   35944:	cmpne	r5, #0
   35948:	bne	35954 <__assert_fail@plt+0x23a8c>
   3594c:	str	r5, [r4]
   35950:	pop	{r4, r5, r6, r7, fp, pc}
   35954:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35958:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   3595c:	add	fp, sp, #24
   35960:	mov	r8, r1
   35964:	ldr	r1, [r1]
   35968:	mov	r5, r0
   3596c:	add	r0, r1, r1, asr #1
   35970:	cmp	r0, r1
   35974:	mvnvs	r0, #-2147483648	; 0x80000000
   35978:	cmp	r0, r3
   3597c:	mov	r7, r0
   35980:	movgt	r7, r3
   35984:	cmn	r3, #1
   35988:	movle	r7, r0
   3598c:	ldr	r0, [fp, #8]
   35990:	cmn	r0, #1
   35994:	ble	359bc <__assert_fail@plt+0x23af4>
   35998:	cmp	r0, #0
   3599c:	beq	35a10 <__assert_fail@plt+0x23b48>
   359a0:	cmn	r7, #1
   359a4:	ble	359e4 <__assert_fail@plt+0x23b1c>
   359a8:	mvn	r4, #-2147483648	; 0x80000000
   359ac:	udiv	r6, r4, r0
   359b0:	cmp	r6, r7
   359b4:	bge	35a10 <__assert_fail@plt+0x23b48>
   359b8:	b	35a20 <__assert_fail@plt+0x23b58>
   359bc:	cmn	r7, #1
   359c0:	ble	35a00 <__assert_fail@plt+0x23b38>
   359c4:	cmn	r0, #1
   359c8:	beq	35a10 <__assert_fail@plt+0x23b48>
   359cc:	mov	r6, #-2147483648	; 0x80000000
   359d0:	mvn	r4, #-2147483648	; 0x80000000
   359d4:	sdiv	r6, r6, r0
   359d8:	cmp	r6, r7
   359dc:	bge	35a10 <__assert_fail@plt+0x23b48>
   359e0:	b	35a20 <__assert_fail@plt+0x23b58>
   359e4:	beq	35a10 <__assert_fail@plt+0x23b48>
   359e8:	mov	r6, #-2147483648	; 0x80000000
   359ec:	mvn	r4, #-2147483648	; 0x80000000
   359f0:	sdiv	r6, r6, r7
   359f4:	cmp	r6, r0
   359f8:	bge	35a10 <__assert_fail@plt+0x23b48>
   359fc:	b	35a20 <__assert_fail@plt+0x23b58>
   35a00:	mvn	r4, #-2147483648	; 0x80000000
   35a04:	sdiv	r6, r4, r0
   35a08:	cmp	r7, r6
   35a0c:	blt	35a20 <__assert_fail@plt+0x23b58>
   35a10:	mul	r6, r7, r0
   35a14:	mov	r4, #64	; 0x40
   35a18:	cmp	r6, #63	; 0x3f
   35a1c:	bgt	35a28 <__assert_fail@plt+0x23b60>
   35a20:	sdiv	r7, r4, r0
   35a24:	mul	r6, r7, r0
   35a28:	cmp	r5, #0
   35a2c:	moveq	r4, #0
   35a30:	streq	r4, [r8]
   35a34:	sub	r4, r7, r1
   35a38:	cmp	r4, r2
   35a3c:	bge	35ae8 <__assert_fail@plt+0x23c20>
   35a40:	add	r7, r1, r2
   35a44:	mov	r6, #0
   35a48:	mov	r2, #0
   35a4c:	cmp	r7, r3
   35a50:	movwgt	r6, #1
   35a54:	cmn	r3, #1
   35a58:	movwgt	r2, #1
   35a5c:	cmp	r7, r1
   35a60:	bvs	35b1c <__assert_fail@plt+0x23c54>
   35a64:	ands	r1, r2, r6
   35a68:	bne	35b1c <__assert_fail@plt+0x23c54>
   35a6c:	cmn	r0, #1
   35a70:	ble	35a98 <__assert_fail@plt+0x23bd0>
   35a74:	cmp	r0, #0
   35a78:	beq	35ae4 <__assert_fail@plt+0x23c1c>
   35a7c:	cmn	r7, #1
   35a80:	ble	35abc <__assert_fail@plt+0x23bf4>
   35a84:	mvn	r1, #-2147483648	; 0x80000000
   35a88:	udiv	r1, r1, r0
   35a8c:	cmp	r1, r7
   35a90:	bge	35ae4 <__assert_fail@plt+0x23c1c>
   35a94:	b	35b1c <__assert_fail@plt+0x23c54>
   35a98:	cmn	r7, #1
   35a9c:	ble	35ad4 <__assert_fail@plt+0x23c0c>
   35aa0:	cmn	r0, #1
   35aa4:	beq	35ae4 <__assert_fail@plt+0x23c1c>
   35aa8:	mov	r1, #-2147483648	; 0x80000000
   35aac:	sdiv	r1, r1, r0
   35ab0:	cmp	r1, r7
   35ab4:	bge	35ae4 <__assert_fail@plt+0x23c1c>
   35ab8:	b	35b1c <__assert_fail@plt+0x23c54>
   35abc:	beq	35ae4 <__assert_fail@plt+0x23c1c>
   35ac0:	mov	r1, #-2147483648	; 0x80000000
   35ac4:	sdiv	r1, r1, r7
   35ac8:	cmp	r1, r0
   35acc:	bge	35ae4 <__assert_fail@plt+0x23c1c>
   35ad0:	b	35b1c <__assert_fail@plt+0x23c54>
   35ad4:	mvn	r1, #-2147483648	; 0x80000000
   35ad8:	sdiv	r1, r1, r0
   35adc:	cmp	r7, r1
   35ae0:	blt	35b1c <__assert_fail@plt+0x23c54>
   35ae4:	mul	r6, r7, r0
   35ae8:	mov	r0, r5
   35aec:	mov	r1, r6
   35af0:	bl	38480 <__assert_fail@plt+0x265b8>
   35af4:	cmp	r6, #0
   35af8:	movwne	r6, #1
   35afc:	cmp	r0, #0
   35b00:	bne	35b14 <__assert_fail@plt+0x23c4c>
   35b04:	clz	r1, r5
   35b08:	lsr	r1, r1, #5
   35b0c:	orrs	r1, r1, r6
   35b10:	bne	35b1c <__assert_fail@plt+0x23c54>
   35b14:	str	r7, [r8]
   35b18:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   35b1c:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35b20:	push	{fp, lr}
   35b24:	mov	fp, sp
   35b28:	mov	r1, #1
   35b2c:	bl	383fc <__assert_fail@plt+0x26534>
   35b30:	cmp	r0, #0
   35b34:	popne	{fp, pc}
   35b38:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35b3c:	push	{fp, lr}
   35b40:	mov	fp, sp
   35b44:	bl	383fc <__assert_fail@plt+0x26534>
   35b48:	cmp	r0, #0
   35b4c:	popne	{fp, pc}
   35b50:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35b54:	push	{fp, lr}
   35b58:	mov	fp, sp
   35b5c:	mov	r1, #1
   35b60:	bl	383fc <__assert_fail@plt+0x26534>
   35b64:	cmp	r0, #0
   35b68:	popne	{fp, pc}
   35b6c:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35b70:	push	{fp, lr}
   35b74:	mov	fp, sp
   35b78:	bl	383fc <__assert_fail@plt+0x26534>
   35b7c:	cmp	r0, #0
   35b80:	popne	{fp, pc}
   35b84:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35b88:	push	{r4, r5, fp, lr}
   35b8c:	add	fp, sp, #8
   35b90:	mov	r5, r0
   35b94:	mov	r0, r1
   35b98:	mov	r4, r1
   35b9c:	bl	38450 <__assert_fail@plt+0x26588>
   35ba0:	cmp	r0, #0
   35ba4:	beq	35bb8 <__assert_fail@plt+0x23cf0>
   35ba8:	mov	r1, r5
   35bac:	mov	r2, r4
   35bb0:	pop	{r4, r5, fp, lr}
   35bb4:	b	11ab4 <memcpy@plt>
   35bb8:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35bbc:	push	{r4, r5, fp, lr}
   35bc0:	add	fp, sp, #8
   35bc4:	mov	r5, r0
   35bc8:	mov	r0, r1
   35bcc:	mov	r4, r1
   35bd0:	bl	38450 <__assert_fail@plt+0x26588>
   35bd4:	cmp	r0, #0
   35bd8:	beq	35bec <__assert_fail@plt+0x23d24>
   35bdc:	mov	r1, r5
   35be0:	mov	r2, r4
   35be4:	pop	{r4, r5, fp, lr}
   35be8:	b	11ab4 <memcpy@plt>
   35bec:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35bf0:	push	{r4, r5, fp, lr}
   35bf4:	add	fp, sp, #8
   35bf8:	mov	r5, r0
   35bfc:	add	r0, r1, #1
   35c00:	mov	r4, r1
   35c04:	bl	38450 <__assert_fail@plt+0x26588>
   35c08:	cmp	r0, #0
   35c0c:	beq	35c28 <__assert_fail@plt+0x23d60>
   35c10:	mov	r1, #0
   35c14:	mov	r2, r4
   35c18:	strb	r1, [r0, r4]
   35c1c:	mov	r1, r5
   35c20:	pop	{r4, r5, fp, lr}
   35c24:	b	11ab4 <memcpy@plt>
   35c28:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35c2c:	push	{r4, r5, fp, lr}
   35c30:	add	fp, sp, #8
   35c34:	mov	r4, r0
   35c38:	bl	11cac <strlen@plt>
   35c3c:	add	r5, r0, #1
   35c40:	mov	r0, r5
   35c44:	bl	38450 <__assert_fail@plt+0x26588>
   35c48:	cmp	r0, #0
   35c4c:	beq	35c60 <__assert_fail@plt+0x23d98>
   35c50:	mov	r1, r4
   35c54:	mov	r2, r5
   35c58:	pop	{r4, r5, fp, lr}
   35c5c:	b	11ab4 <memcpy@plt>
   35c60:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35c64:	push	{fp, lr}
   35c68:	mov	fp, sp
   35c6c:	movw	r0, #53716	; 0xd1d4
   35c70:	movw	r1, #49057	; 0xbfa1
   35c74:	mov	r2, #5
   35c78:	movt	r0, #4
   35c7c:	movt	r1, #3
   35c80:	ldr	r4, [r0]
   35c84:	mov	r0, #0
   35c88:	bl	11afc <dcgettext@plt>
   35c8c:	movw	r2, #46766	; 0xb6ae
   35c90:	mov	r3, r0
   35c94:	mov	r0, r4
   35c98:	mov	r1, #0
   35c9c:	movt	r2, #3
   35ca0:	bl	11bd4 <error@plt>
   35ca4:	bl	11e8c <abort@plt>
   35ca8:	push	{fp, lr}
   35cac:	mov	fp, sp
   35cb0:	orr	r1, r1, #512	; 0x200
   35cb4:	bl	17f4c <__assert_fail@plt+0x6084>
   35cb8:	cmp	r0, #0
   35cbc:	popne	{fp, pc}
   35cc0:	bl	11cdc <__errno_location@plt>
   35cc4:	ldr	r0, [r0]
   35cc8:	cmp	r0, #22
   35ccc:	bne	35cf0 <__assert_fail@plt+0x23e28>
   35cd0:	movw	r0, #49074	; 0xbfb2
   35cd4:	movw	r1, #49090	; 0xbfc2
   35cd8:	movw	r3, #49101	; 0xbfcd
   35cdc:	mov	r2, #41	; 0x29
   35ce0:	movt	r0, #3
   35ce4:	movt	r1, #3
   35ce8:	movt	r3, #3
   35cec:	bl	11ec8 <__assert_fail@plt>
   35cf0:	bl	35c64 <__assert_fail@plt+0x23d9c>
   35cf4:	ldr	r0, [r0, #48]	; 0x30
   35cf8:	and	r0, r0, #17
   35cfc:	cmp	r0, #16
   35d00:	moveq	r0, #1
   35d04:	bxeq	lr
   35d08:	cmp	r0, #17
   35d0c:	movne	r0, #0
   35d10:	bxne	lr
   35d14:	ldr	r0, [r1, #48]	; 0x30
   35d18:	cmp	r0, #0
   35d1c:	movwne	r0, #1
   35d20:	bx	lr
   35d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35d28:	add	fp, sp, #28
   35d2c:	sub	sp, sp, #36	; 0x24
   35d30:	cmp	r2, #37	; 0x25
   35d34:	bcs	37664 <__assert_fail@plt+0x2579c>
   35d38:	ldr	r8, [fp, #8]
   35d3c:	mov	r9, r3
   35d40:	mov	r6, r2
   35d44:	mov	r7, r1
   35d48:	mov	r4, r0
   35d4c:	bl	11cdc <__errno_location@plt>
   35d50:	cmp	r7, #0
   35d54:	add	sl, sp, #32
   35d58:	mov	r5, r0
   35d5c:	mov	r0, #0
   35d60:	mov	r2, r6
   35d64:	mov	r3, #0
   35d68:	movne	sl, r7
   35d6c:	str	r0, [r5]
   35d70:	mov	r0, r4
   35d74:	mov	r1, sl
   35d78:	bl	11e14 <__strtoll_internal@plt>
   35d7c:	mov	r7, r1
   35d80:	ldr	r1, [sl]
   35d84:	cmp	r1, r4
   35d88:	beq	35dc4 <__assert_fail@plt+0x23efc>
   35d8c:	mov	r6, r0
   35d90:	ldr	r0, [r5]
   35d94:	cmp	r0, #0
   35d98:	beq	35f50 <__assert_fail@plt+0x24088>
   35d9c:	mov	r5, #4
   35da0:	cmp	r0, #34	; 0x22
   35da4:	bne	361a8 <__assert_fail@plt+0x242e0>
   35da8:	mov	r5, #1
   35dac:	cmp	r8, #0
   35db0:	beq	35f5c <__assert_fail@plt+0x24094>
   35db4:	ldrb	r4, [r1]
   35db8:	cmp	r4, #0
   35dbc:	bne	35e0c <__assert_fail@plt+0x23f44>
   35dc0:	b	35f5c <__assert_fail@plt+0x24094>
   35dc4:	mov	r5, #4
   35dc8:	cmp	r8, #0
   35dcc:	beq	361a8 <__assert_fail@plt+0x242e0>
   35dd0:	mov	r6, r1
   35dd4:	ldrb	r1, [r4]
   35dd8:	cmp	r1, #0
   35ddc:	beq	361a8 <__assert_fail@plt+0x242e0>
   35de0:	mov	r0, r8
   35de4:	bl	11cb8 <strchr@plt>
   35de8:	cmp	r0, #0
   35dec:	beq	361a8 <__assert_fail@plt+0x242e0>
   35df0:	mov	r1, r6
   35df4:	mov	r5, #0
   35df8:	mov	r6, #1
   35dfc:	mov	r7, #0
   35e00:	ldrb	r4, [r1]
   35e04:	cmp	r4, #0
   35e08:	beq	35f5c <__assert_fail@plt+0x24094>
   35e0c:	str	r1, [sp, #20]
   35e10:	mov	r0, r8
   35e14:	mov	r1, r4
   35e18:	bl	11cb8 <strchr@plt>
   35e1c:	cmp	r0, #0
   35e20:	beq	361a0 <__assert_fail@plt+0x242d8>
   35e24:	sub	r0, r4, #69	; 0x45
   35e28:	mov	r1, #1
   35e2c:	mov	r3, #0
   35e30:	mov	r2, #1024	; 0x400
   35e34:	cmp	r0, #47	; 0x2f
   35e38:	str	r1, [sp, #16]
   35e3c:	bhi	35f74 <__assert_fail@plt+0x240ac>
   35e40:	add	r1, pc, #0
   35e44:	ldr	pc, [r1, r0, lsl #2]
   35e48:	andeq	r5, r3, r8, lsl #30
   35e4c:	andeq	r5, r3, r4, ror pc
   35e50:	andeq	r5, r3, r8, lsl #30
   35e54:	andeq	r5, r3, r4, ror pc
   35e58:	andeq	r5, r3, r4, ror pc
   35e5c:	andeq	r5, r3, r4, ror pc
   35e60:	andeq	r5, r3, r8, lsl #30
   35e64:	andeq	r5, r3, r4, ror pc
   35e68:	andeq	r5, r3, r8, lsl #30
   35e6c:	andeq	r5, r3, r4, ror pc
   35e70:	andeq	r5, r3, r4, ror pc
   35e74:	andeq	r5, r3, r8, lsl #30
   35e78:	andeq	r5, r3, r4, ror pc
   35e7c:	andeq	r5, r3, r4, ror pc
   35e80:	andeq	r5, r3, r4, ror pc
   35e84:	andeq	r5, r3, r8, lsl #30
   35e88:	andeq	r5, r3, r4, ror pc
   35e8c:	andeq	r5, r3, r4, ror pc
   35e90:	andeq	r5, r3, r4, ror pc
   35e94:	andeq	r5, r3, r4, ror pc
   35e98:	andeq	r5, r3, r8, lsl #30
   35e9c:	andeq	r5, r3, r8, lsl #30
   35ea0:	andeq	r5, r3, r4, ror pc
   35ea4:	andeq	r5, r3, r4, ror pc
   35ea8:	andeq	r5, r3, r4, ror pc
   35eac:	andeq	r5, r3, r4, ror pc
   35eb0:	andeq	r5, r3, r4, ror pc
   35eb4:	andeq	r5, r3, r4, ror pc
   35eb8:	andeq	r5, r3, r4, ror pc
   35ebc:	andeq	r5, r3, r4, ror pc
   35ec0:	andeq	r5, r3, r4, ror pc
   35ec4:	andeq	r5, r3, r4, ror pc
   35ec8:	andeq	r5, r3, r4, ror pc
   35ecc:	andeq	r5, r3, r4, ror pc
   35ed0:	andeq	r5, r3, r8, lsl #30
   35ed4:	andeq	r5, r3, r4, ror pc
   35ed8:	andeq	r5, r3, r4, ror pc
   35edc:	andeq	r5, r3, r4, ror pc
   35ee0:	andeq	r5, r3, r8, lsl #30
   35ee4:	andeq	r5, r3, r4, ror pc
   35ee8:	andeq	r5, r3, r8, lsl #30
   35eec:	andeq	r5, r3, r4, ror pc
   35ef0:	andeq	r5, r3, r4, ror pc
   35ef4:	andeq	r5, r3, r4, ror pc
   35ef8:	andeq	r5, r3, r4, ror pc
   35efc:	andeq	r5, r3, r4, ror pc
   35f00:	andeq	r5, r3, r4, ror pc
   35f04:	andeq	r5, r3, r8, lsl #30
   35f08:	mov	r0, r8
   35f0c:	mov	r1, #48	; 0x30
   35f10:	bl	11cb8 <strchr@plt>
   35f14:	cmp	r0, #0
   35f18:	beq	35f6c <__assert_fail@plt+0x240a4>
   35f1c:	ldr	r1, [sp, #20]
   35f20:	ldrb	r0, [r1, #1]
   35f24:	cmp	r0, #66	; 0x42
   35f28:	cmpne	r0, #68	; 0x44
   35f2c:	bne	360a8 <__assert_fail@plt+0x241e0>
   35f30:	mov	r0, #2
   35f34:	mov	r2, #1000	; 0x3e8
   35f38:	mov	r3, #0
   35f3c:	str	r0, [sp, #16]
   35f40:	sub	r0, r4, #66	; 0x42
   35f44:	cmp	r0, #53	; 0x35
   35f48:	bls	35f80 <__assert_fail@plt+0x240b8>
   35f4c:	b	361a0 <__assert_fail@plt+0x242d8>
   35f50:	mov	r5, r0
   35f54:	cmp	r8, #0
   35f58:	bne	35db4 <__assert_fail@plt+0x23eec>
   35f5c:	strd	r6, [r9]
   35f60:	mov	r0, r5
   35f64:	sub	sp, fp, #28
   35f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f6c:	mov	r3, #0
   35f70:	mov	r2, #1024	; 0x400
   35f74:	sub	r0, r4, #66	; 0x42
   35f78:	cmp	r0, #53	; 0x35
   35f7c:	bhi	361a0 <__assert_fail@plt+0x242d8>
   35f80:	add	r1, pc, #8
   35f84:	str	r3, [sp, #28]
   35f88:	str	r2, [sp, #24]
   35f8c:	ldr	pc, [r1, r0, lsl #2]
   35f90:	strdeq	r6, [r3], -r8
   35f94:	andeq	r6, r3, r0, lsr #3
   35f98:	andeq	r6, r3, r0, lsr #3
   35f9c:	andeq	r6, r3, ip, lsl #4
   35fa0:	andeq	r6, r3, r0, lsr #3
   35fa4:	andeq	r6, r3, r8, rrx
   35fa8:	andeq	r6, r3, r0, lsr #3
   35fac:	andeq	r6, r3, r0, lsr #3
   35fb0:	andeq	r6, r3, r0, lsr #3
   35fb4:	ldrdeq	r6, [r3], -ip
   35fb8:	andeq	r6, r3, r0, lsr #3
   35fbc:	andeq	r6, r3, ip, lsl #2
   35fc0:	andeq	r6, r3, r0, lsr #3
   35fc4:	andeq	r6, r3, r0, lsr #3
   35fc8:	andeq	r6, r3, r0, asr r2
   35fcc:	andeq	r6, r3, r0, lsr #3
   35fd0:	andeq	r6, r3, r0, lsr #3
   35fd4:	andeq	r6, r3, r0, lsr #3
   35fd8:	andeq	r6, r3, ip, asr #2
   35fdc:	andeq	r6, r3, r0, lsr #3
   35fe0:	andeq	r6, r3, r0, lsr #3
   35fe4:	andeq	r6, r3, r0, lsr #3
   35fe8:	andeq	r6, r3, r0, lsr #3
   35fec:	muleq	r3, r4, r2
   35ff0:			; <UNDEFINED> instruction: 0x000361b4
   35ff4:	andeq	r6, r3, r0, lsr #3
   35ff8:	andeq	r6, r3, r0, lsr #3
   35ffc:	andeq	r6, r3, r0, lsr #3
   36000:	andeq	r6, r3, r0, lsr #3
   36004:	andeq	r6, r3, r0, lsr #3
   36008:	andeq	r6, r3, r0, lsr #3
   3600c:	andeq	r6, r3, r0, lsr #3
   36010:	ldrdeq	r6, [r3], -r8
   36014:	andeq	r7, r3, r0, asr r2
   36018:	andeq	r6, r3, r0, lsr #3
   3601c:	andeq	r6, r3, r0, lsr #3
   36020:	andeq	r6, r3, r0, lsr #3
   36024:	andeq	r6, r3, r8, rrx
   36028:	andeq	r6, r3, r0, lsr #3
   3602c:	andeq	r6, r3, r0, lsr #3
   36030:	andeq	r6, r3, r0, lsr #3
   36034:	ldrdeq	r6, [r3], -ip
   36038:	andeq	r6, r3, r0, lsr #3
   3603c:	andeq	r6, r3, ip, lsl #2
   36040:	andeq	r6, r3, r0, lsr #3
   36044:	andeq	r6, r3, r0, lsr #3
   36048:	andeq	r6, r3, r0, lsr #3
   3604c:	andeq	r6, r3, r0, lsr #3
   36050:	andeq	r6, r3, r0, lsr #3
   36054:	andeq	r6, r3, r0, lsr #3
   36058:	andeq	r6, r3, ip, asr #2
   3605c:	andeq	r6, r3, r0, lsr #3
   36060:	andeq	r6, r3, r0, lsr #3
   36064:	andeq	r6, r3, ip, ror #5
   36068:	cmn	r7, #1
   3606c:	str	r9, [sp, #12]
   36070:	ble	36300 <__assert_fail@plt+0x24438>
   36074:	ldr	r3, [sp, #28]
   36078:	mvn	r0, #0
   3607c:	mvn	r1, #-2147483648	; 0x80000000
   36080:	mvn	r8, #0
   36084:	mvn	r9, #-2147483648	; 0x80000000
   36088:	bl	39cb8 <__assert_fail@plt+0x27df0>
   3608c:	ldr	r2, [sp, #24]
   36090:	ldr	r3, [sp, #28]
   36094:	subs	r0, r0, r6
   36098:	mov	r4, #1
   3609c:	sbcs	r0, r1, r7
   360a0:	bge	36340 <__assert_fail@plt+0x24478>
   360a4:	b	36358 <__assert_fail@plt+0x24490>
   360a8:	cmp	r0, #105	; 0x69
   360ac:	mov	r3, #0
   360b0:	bne	36190 <__assert_fail@plt+0x242c8>
   360b4:	ldrb	r0, [r1, #2]
   360b8:	mov	r1, #1
   360bc:	mov	r2, #1024	; 0x400
   360c0:	cmp	r0, #66	; 0x42
   360c4:	movweq	r1, #3
   360c8:	str	r1, [sp, #16]
   360cc:	sub	r0, r4, #66	; 0x42
   360d0:	cmp	r0, #53	; 0x35
   360d4:	bls	35f80 <__assert_fail@plt+0x240b8>
   360d8:	b	361a0 <__assert_fail@plt+0x242d8>
   360dc:	cmn	r7, #1
   360e0:	ble	36394 <__assert_fail@plt+0x244cc>
   360e4:	ldr	r3, [sp, #28]
   360e8:	mvn	r0, #0
   360ec:	mvn	r1, #-2147483648	; 0x80000000
   360f0:	bl	39cb8 <__assert_fail@plt+0x27df0>
   360f4:	ldr	r2, [sp, #24]
   360f8:	ldr	r3, [sp, #28]
   360fc:	subs	r0, r0, r6
   36100:	sbcs	r0, r1, r7
   36104:	bge	363c8 <__assert_fail@plt+0x24500>
   36108:	b	36ad8 <__assert_fail@plt+0x24c10>
   3610c:	cmn	r7, #1
   36110:	str	r9, [sp, #12]
   36114:	ble	363dc <__assert_fail@plt+0x24514>
   36118:	ldr	r3, [sp, #28]
   3611c:	mvn	r0, #0
   36120:	mvn	r1, #-2147483648	; 0x80000000
   36124:	mvn	r8, #0
   36128:	mvn	r9, #-2147483648	; 0x80000000
   3612c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36130:	ldr	r2, [sp, #24]
   36134:	ldr	r3, [sp, #28]
   36138:	subs	r0, r0, r6
   3613c:	mov	r4, #1
   36140:	sbcs	r0, r1, r7
   36144:	bge	3641c <__assert_fail@plt+0x24554>
   36148:	b	36434 <__assert_fail@plt+0x2456c>
   3614c:	cmn	r7, #1
   36150:	str	r9, [sp, #12]
   36154:	ble	3646c <__assert_fail@plt+0x245a4>
   36158:	ldr	r3, [sp, #28]
   3615c:	mvn	r0, #0
   36160:	mvn	r1, #-2147483648	; 0x80000000
   36164:	mvn	r9, #-2147483648	; 0x80000000
   36168:	str	r0, [sp, #8]
   3616c:	mvn	r0, #0
   36170:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36174:	ldr	r2, [sp, #24]
   36178:	ldr	r3, [sp, #28]
   3617c:	subs	r0, r0, r6
   36180:	mov	r4, #1
   36184:	sbcs	r0, r1, r7
   36188:	bge	364b0 <__assert_fail@plt+0x245e8>
   3618c:	b	364cc <__assert_fail@plt+0x24604>
   36190:	mov	r2, #1024	; 0x400
   36194:	sub	r0, r4, #66	; 0x42
   36198:	cmp	r0, #53	; 0x35
   3619c:	bls	35f80 <__assert_fail@plt+0x240b8>
   361a0:	orr	r5, r5, #2
   361a4:	strd	r6, [r9]
   361a8:	mov	r0, r5
   361ac:	sub	sp, fp, #28
   361b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   361b4:	cmp	r7, #0
   361b8:	str	r9, [sp, #12]
   361bc:	bmi	367b4 <__assert_fail@plt+0x248ec>
   361c0:	ldr	r3, [sp, #28]
   361c4:	mvn	r0, #0
   361c8:	mvn	r1, #-2147483648	; 0x80000000
   361cc:	mvn	r9, #-2147483648	; 0x80000000
   361d0:	str	r0, [sp, #8]
   361d4:	mvn	r0, #0
   361d8:	bl	39cb8 <__assert_fail@plt+0x27df0>
   361dc:	ldr	r2, [sp, #24]
   361e0:	ldr	r3, [sp, #28]
   361e4:	subs	r0, r0, r6
   361e8:	mov	r4, #1
   361ec:	sbcs	r0, r1, r7
   361f0:	bge	367f8 <__assert_fail@plt+0x24930>
   361f4:	b	36814 <__assert_fail@plt+0x2494c>
   361f8:	cmn	r7, #1
   361fc:	ble	36850 <__assert_fail@plt+0x24988>
   36200:	cmp	r7, #2097152	; 0x200000
   36204:	blt	36880 <__assert_fail@plt+0x249b8>
   36208:	b	36ad8 <__assert_fail@plt+0x24c10>
   3620c:	cmp	r7, #0
   36210:	str	r9, [sp, #12]
   36214:	bmi	36890 <__assert_fail@plt+0x249c8>
   36218:	ldr	r3, [sp, #28]
   3621c:	mvn	r0, #0
   36220:	mvn	r1, #-2147483648	; 0x80000000
   36224:	mvn	r9, #-2147483648	; 0x80000000
   36228:	str	r0, [sp, #8]
   3622c:	mvn	r0, #0
   36230:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36234:	ldr	r2, [sp, #24]
   36238:	ldr	r3, [sp, #28]
   3623c:	subs	r0, r0, r6
   36240:	mov	r4, #1
   36244:	sbcs	r0, r1, r7
   36248:	bge	368d4 <__assert_fail@plt+0x24a0c>
   3624c:	b	368f0 <__assert_fail@plt+0x24a28>
   36250:	cmp	r7, #0
   36254:	str	r9, [sp, #12]
   36258:	bmi	3692c <__assert_fail@plt+0x24a64>
   3625c:	ldr	r3, [sp, #28]
   36260:	mvn	r0, #0
   36264:	mvn	r1, #-2147483648	; 0x80000000
   36268:	mvn	r8, #-2147483648	; 0x80000000
   3626c:	str	r0, [sp, #8]
   36270:	mvn	r0, #0
   36274:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36278:	ldr	r2, [sp, #24]
   3627c:	ldr	r3, [sp, #28]
   36280:	subs	r0, r0, r6
   36284:	mov	r4, #1
   36288:	sbcs	r0, r1, r7
   3628c:	bge	36970 <__assert_fail@plt+0x24aa8>
   36290:	b	3698c <__assert_fail@plt+0x24ac4>
   36294:	cmp	r7, #0
   36298:	str	r9, [sp, #12]
   3629c:	bmi	369c8 <__assert_fail@plt+0x24b00>
   362a0:	ldr	r3, [sp, #28]
   362a4:	mvn	r0, #0
   362a8:	mvn	r1, #-2147483648	; 0x80000000
   362ac:	mvn	r9, #-2147483648	; 0x80000000
   362b0:	str	r0, [sp, #8]
   362b4:	mvn	r0, #0
   362b8:	bl	39cb8 <__assert_fail@plt+0x27df0>
   362bc:	ldr	r2, [sp, #24]
   362c0:	ldr	r3, [sp, #28]
   362c4:	subs	r0, r0, r6
   362c8:	mov	r4, #1
   362cc:	sbcs	r0, r1, r7
   362d0:	bge	36a0c <__assert_fail@plt+0x24b44>
   362d4:	b	36a28 <__assert_fail@plt+0x24b60>
   362d8:	cmn	r7, #1
   362dc:	ble	36a68 <__assert_fail@plt+0x24ba0>
   362e0:	cmp	r7, #4194304	; 0x400000
   362e4:	blt	36a98 <__assert_fail@plt+0x24bd0>
   362e8:	b	36ad8 <__assert_fail@plt+0x24c10>
   362ec:	cmn	r7, #1
   362f0:	ble	36aa8 <__assert_fail@plt+0x24be0>
   362f4:	cmp	r7, #1073741824	; 0x40000000
   362f8:	bge	36ad8 <__assert_fail@plt+0x24c10>
   362fc:	b	36af8 <__assert_fail@plt+0x24c30>
   36300:	and	r0, r6, r7
   36304:	cmn	r0, #1
   36308:	beq	36340 <__assert_fail@plt+0x24478>
   3630c:	mov	r0, #0
   36310:	mov	r1, #-2147483648	; 0x80000000
   36314:	mov	r2, r6
   36318:	mov	r3, r7
   3631c:	mov	r8, #0
   36320:	mov	r9, #-2147483648	; 0x80000000
   36324:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36328:	ldr	r2, [sp, #24]
   3632c:	ldr	r3, [sp, #28]
   36330:	mov	r4, #1
   36334:	subs	r0, r0, r2
   36338:	sbcs	r0, r1, r3
   3633c:	blt	36508 <__assert_fail@plt+0x24640>
   36340:	umull	r8, r0, r6, r2
   36344:	mov	r4, #0
   36348:	mla	r0, r6, r3, r0
   3634c:	mla	r9, r7, r2, r0
   36350:	cmp	r9, #0
   36354:	bmi	36508 <__assert_fail@plt+0x24640>
   36358:	ldr	r3, [sp, #28]
   3635c:	mvn	r0, #-2147483648	; 0x80000000
   36360:	mvn	r1, #-2147483648	; 0x80000000
   36364:	mov	r6, r4
   36368:	mvn	r4, #0
   3636c:	str	r0, [sp, #8]
   36370:	mvn	r0, #0
   36374:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36378:	ldr	r2, [sp, #24]
   3637c:	ldr	r3, [sp, #28]
   36380:	subs	r0, r0, r8
   36384:	mov	r7, #1
   36388:	sbcs	r0, r1, r9
   3638c:	bge	36544 <__assert_fail@plt+0x2467c>
   36390:	b	36560 <__assert_fail@plt+0x24698>
   36394:	and	r0, r6, r7
   36398:	cmn	r0, #1
   3639c:	beq	363c8 <__assert_fail@plt+0x24500>
   363a0:	mov	r0, #0
   363a4:	mov	r1, #-2147483648	; 0x80000000
   363a8:	mov	r2, r6
   363ac:	mov	r3, r7
   363b0:	bl	39be4 <__assert_fail@plt+0x27d1c>
   363b4:	ldr	r2, [sp, #24]
   363b8:	ldr	r3, [sp, #28]
   363bc:	subs	r0, r0, r2
   363c0:	sbcs	r0, r1, r3
   363c4:	blt	36ad8 <__assert_fail@plt+0x24c10>
   363c8:	umull	r0, r1, r6, r2
   363cc:	mla	r1, r6, r3, r1
   363d0:	mla	r7, r7, r2, r1
   363d4:	mov	r6, r0
   363d8:	b	37250 <__assert_fail@plt+0x25388>
   363dc:	and	r0, r6, r7
   363e0:	cmn	r0, #1
   363e4:	beq	3641c <__assert_fail@plt+0x24554>
   363e8:	mov	r0, #0
   363ec:	mov	r1, #-2147483648	; 0x80000000
   363f0:	mov	r2, r6
   363f4:	mov	r3, r7
   363f8:	mov	r8, #0
   363fc:	mov	r9, #-2147483648	; 0x80000000
   36400:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36404:	ldr	r2, [sp, #24]
   36408:	ldr	r3, [sp, #28]
   3640c:	mov	r4, #1
   36410:	subs	r0, r0, r2
   36414:	sbcs	r0, r1, r3
   36418:	blt	365f4 <__assert_fail@plt+0x2472c>
   3641c:	umull	r8, r0, r6, r2
   36420:	mov	r4, #0
   36424:	mla	r0, r6, r3, r0
   36428:	mla	r9, r7, r2, r0
   3642c:	cmp	r9, #0
   36430:	bmi	365f4 <__assert_fail@plt+0x2472c>
   36434:	ldr	r3, [sp, #28]
   36438:	mvn	r0, #0
   3643c:	mvn	r1, #-2147483648	; 0x80000000
   36440:	str	r4, [sp, #8]
   36444:	mvn	r6, #0
   36448:	mvn	r7, #-2147483648	; 0x80000000
   3644c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36450:	ldr	r4, [sp, #24]
   36454:	ldr	r3, [sp, #28]
   36458:	subs	r0, r0, r8
   3645c:	mov	r2, #1
   36460:	sbcs	r0, r1, r9
   36464:	bge	3662c <__assert_fail@plt+0x24764>
   36468:	b	36764 <__assert_fail@plt+0x2489c>
   3646c:	and	r0, r6, r7
   36470:	cmn	r0, #1
   36474:	beq	364b0 <__assert_fail@plt+0x245e8>
   36478:	mov	r0, #0
   3647c:	mov	r1, #-2147483648	; 0x80000000
   36480:	mov	r2, r6
   36484:	mov	r3, r7
   36488:	bl	39be4 <__assert_fail@plt+0x27d1c>
   3648c:	ldr	r2, [sp, #24]
   36490:	ldr	r3, [sp, #28]
   36494:	mov	r4, #1
   36498:	mov	r9, #-2147483648	; 0x80000000
   3649c:	subs	r0, r0, r2
   364a0:	sbcs	r0, r1, r3
   364a4:	mov	r0, #0
   364a8:	str	r0, [sp, #8]
   364ac:	blt	36640 <__assert_fail@plt+0x24778>
   364b0:	umull	r1, r0, r6, r2
   364b4:	mov	r4, #0
   364b8:	mla	r0, r6, r3, r0
   364bc:	mla	r9, r7, r2, r0
   364c0:	str	r1, [sp, #8]
   364c4:	cmp	r9, #0
   364c8:	bmi	36640 <__assert_fail@plt+0x24778>
   364cc:	ldr	r3, [sp, #28]
   364d0:	mvn	r0, #0
   364d4:	mvn	r1, #-2147483648	; 0x80000000
   364d8:	str	r4, [sp, #4]
   364dc:	mvn	r6, #0
   364e0:	mvn	r8, #-2147483648	; 0x80000000
   364e4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   364e8:	ldr	r4, [sp, #8]
   364ec:	ldr	r2, [sp, #24]
   364f0:	ldr	r3, [sp, #28]
   364f4:	mov	r7, #1
   364f8:	subs	r0, r0, r4
   364fc:	sbcs	r0, r1, r9
   36500:	bge	3667c <__assert_fail@plt+0x247b4>
   36504:	b	36694 <__assert_fail@plt+0x247cc>
   36508:	mov	r0, #-2147483648	; 0x80000000
   3650c:	mov	r1, #-2147483648	; 0x80000000
   36510:	mov	r2, r8
   36514:	mov	r3, r9
   36518:	mov	r6, r4
   3651c:	mov	r4, #0
   36520:	str	r0, [sp, #8]
   36524:	mov	r0, #0
   36528:	bl	39be4 <__assert_fail@plt+0x27d1c>
   3652c:	ldr	r2, [sp, #24]
   36530:	ldr	r3, [sp, #28]
   36534:	mov	r7, #1
   36538:	subs	r0, r0, r2
   3653c:	sbcs	r0, r1, r3
   36540:	blt	365b4 <__assert_fail@plt+0x246ec>
   36544:	umull	r4, r0, r8, r2
   36548:	mov	r7, r6
   3654c:	mla	r0, r8, r3, r0
   36550:	mla	r0, r9, r2, r0
   36554:	cmp	r0, #0
   36558:	str	r0, [sp, #8]
   3655c:	bmi	365b4 <__assert_fail@plt+0x246ec>
   36560:	ldr	r3, [sp, #28]
   36564:	mvn	r0, #0
   36568:	mvn	r1, #-2147483648	; 0x80000000
   3656c:	mov	r9, r7
   36570:	mvn	r6, #0
   36574:	mvn	r7, #-2147483648	; 0x80000000
   36578:	bl	39cb8 <__assert_fail@plt+0x27df0>
   3657c:	ldr	r8, [sp, #8]
   36580:	ldr	r3, [sp, #24]
   36584:	ldr	ip, [sp, #28]
   36588:	subs	r0, r0, r4
   3658c:	mov	r2, #1
   36590:	sbcs	r0, r1, r8
   36594:	blt	365a8 <__assert_fail@plt+0x246e0>
   36598:	umull	r6, r0, r4, r3
   3659c:	mov	r2, #0
   365a0:	mla	r0, r4, ip, r0
   365a4:	mla	r7, r8, r3, r0
   365a8:	orr	r3, r2, r9
   365ac:	ldr	r9, [sp, #12]
   365b0:	b	37250 <__assert_fail@plt+0x25388>
   365b4:	ldr	r8, [sp, #8]
   365b8:	mov	r0, #0
   365bc:	mov	r1, #-2147483648	; 0x80000000
   365c0:	mov	r2, r4
   365c4:	mov	r9, r7
   365c8:	mov	r6, #0
   365cc:	mov	r7, #-2147483648	; 0x80000000
   365d0:	mov	r3, r8
   365d4:	bl	39be4 <__assert_fail@plt+0x27d1c>
   365d8:	ldr	r3, [sp, #24]
   365dc:	ldr	ip, [sp, #28]
   365e0:	mov	r2, #1
   365e4:	subs	r0, r0, r3
   365e8:	sbcs	r0, r1, ip
   365ec:	bge	36598 <__assert_fail@plt+0x246d0>
   365f0:	b	365a8 <__assert_fail@plt+0x246e0>
   365f4:	mov	r0, #0
   365f8:	mov	r1, #-2147483648	; 0x80000000
   365fc:	mov	r2, r8
   36600:	mov	r3, r9
   36604:	str	r4, [sp, #8]
   36608:	mov	r6, #0
   3660c:	mov	r7, #-2147483648	; 0x80000000
   36610:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36614:	ldr	r4, [sp, #24]
   36618:	ldr	r3, [sp, #28]
   3661c:	mov	r2, #1
   36620:	subs	r0, r0, r4
   36624:	sbcs	r0, r1, r3
   36628:	blt	36764 <__assert_fail@plt+0x2489c>
   3662c:	umull	r6, r0, r8, r4
   36630:	mov	r2, #0
   36634:	mla	r0, r8, r3, r0
   36638:	mla	r7, r9, r4, r0
   3663c:	b	36764 <__assert_fail@plt+0x2489c>
   36640:	str	r4, [sp, #4]
   36644:	ldr	r4, [sp, #8]
   36648:	mov	r0, #0
   3664c:	mov	r1, #-2147483648	; 0x80000000
   36650:	mov	r3, r9
   36654:	mov	r2, r4
   36658:	bl	39be4 <__assert_fail@plt+0x27d1c>
   3665c:	ldr	r2, [sp, #24]
   36660:	ldr	r3, [sp, #28]
   36664:	mov	r7, #1
   36668:	mov	r6, #0
   3666c:	mov	r8, #-2147483648	; 0x80000000
   36670:	subs	r0, r0, r2
   36674:	sbcs	r0, r1, r3
   36678:	blt	366cc <__assert_fail@plt+0x24804>
   3667c:	umull	r6, r0, r4, r2
   36680:	ldr	r7, [sp, #4]
   36684:	mla	r0, r4, r3, r0
   36688:	mla	r8, r9, r2, r0
   3668c:	cmp	r8, #0
   36690:	bmi	366cc <__assert_fail@plt+0x24804>
   36694:	ldr	r3, [sp, #28]
   36698:	mvn	r0, #0
   3669c:	mvn	r1, #-2147483648	; 0x80000000
   366a0:	str	r7, [sp, #8]
   366a4:	mvn	r4, #0
   366a8:	mvn	r9, #-2147483648	; 0x80000000
   366ac:	bl	39cb8 <__assert_fail@plt+0x27df0>
   366b0:	ldr	r2, [sp, #24]
   366b4:	ldr	r3, [sp, #28]
   366b8:	subs	r0, r0, r6
   366bc:	mov	r7, #1
   366c0:	sbcs	r0, r1, r8
   366c4:	bge	36704 <__assert_fail@plt+0x2483c>
   366c8:	b	3671c <__assert_fail@plt+0x24854>
   366cc:	mov	r0, #0
   366d0:	mov	r1, #-2147483648	; 0x80000000
   366d4:	mov	r2, r6
   366d8:	mov	r3, r8
   366dc:	str	r7, [sp, #8]
   366e0:	bl	39be4 <__assert_fail@plt+0x27d1c>
   366e4:	ldr	r2, [sp, #24]
   366e8:	ldr	r3, [sp, #28]
   366ec:	mov	r7, #1
   366f0:	mov	r4, #0
   366f4:	mov	r9, #-2147483648	; 0x80000000
   366f8:	subs	r0, r0, r2
   366fc:	sbcs	r0, r1, r3
   36700:	blt	36774 <__assert_fail@plt+0x248ac>
   36704:	umull	r4, r0, r6, r2
   36708:	ldr	r7, [sp, #8]
   3670c:	mla	r0, r6, r3, r0
   36710:	mla	r9, r8, r2, r0
   36714:	cmp	r9, #0
   36718:	bmi	36774 <__assert_fail@plt+0x248ac>
   3671c:	ldr	r3, [sp, #28]
   36720:	mvn	r0, #0
   36724:	mvn	r1, #-2147483648	; 0x80000000
   36728:	str	r7, [sp, #8]
   3672c:	mvn	r6, #0
   36730:	mvn	r7, #-2147483648	; 0x80000000
   36734:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36738:	ldr	r3, [sp, #24]
   3673c:	ldr	ip, [sp, #28]
   36740:	subs	r0, r0, r4
   36744:	mov	r2, #1
   36748:	mov	r8, r4
   3674c:	sbcs	r0, r1, r9
   36750:	blt	36764 <__assert_fail@plt+0x2489c>
   36754:	umull	r6, r0, r8, r3
   36758:	mov	r2, #0
   3675c:	mla	r0, r8, ip, r0
   36760:	mla	r7, r9, r3, r0
   36764:	ldr	r0, [sp, #8]
   36768:	ldr	r9, [sp, #12]
   3676c:	orr	r3, r2, r0
   36770:	b	37250 <__assert_fail@plt+0x25388>
   36774:	mov	r0, #0
   36778:	mov	r1, #-2147483648	; 0x80000000
   3677c:	mov	r2, r4
   36780:	mov	r3, r9
   36784:	str	r7, [sp, #8]
   36788:	mov	r8, r4
   3678c:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36790:	ldr	r3, [sp, #24]
   36794:	ldr	ip, [sp, #28]
   36798:	mov	r2, #1
   3679c:	mov	r6, #0
   367a0:	mov	r7, #-2147483648	; 0x80000000
   367a4:	subs	r0, r0, r3
   367a8:	sbcs	r0, r1, ip
   367ac:	bge	36754 <__assert_fail@plt+0x2488c>
   367b0:	b	36764 <__assert_fail@plt+0x2489c>
   367b4:	and	r0, r6, r7
   367b8:	cmn	r0, #1
   367bc:	beq	367f8 <__assert_fail@plt+0x24930>
   367c0:	mov	r0, #0
   367c4:	mov	r1, #-2147483648	; 0x80000000
   367c8:	mov	r2, r6
   367cc:	mov	r3, r7
   367d0:	bl	39be4 <__assert_fail@plt+0x27d1c>
   367d4:	ldr	r2, [sp, #24]
   367d8:	ldr	r3, [sp, #28]
   367dc:	mov	r4, #1
   367e0:	mov	r9, #-2147483648	; 0x80000000
   367e4:	subs	r0, r0, r2
   367e8:	sbcs	r0, r1, r3
   367ec:	mov	r0, #0
   367f0:	str	r0, [sp, #8]
   367f4:	blt	36b08 <__assert_fail@plt+0x24c40>
   367f8:	umull	r1, r0, r6, r2
   367fc:	mov	r4, #0
   36800:	mla	r0, r6, r3, r0
   36804:	mla	r9, r7, r2, r0
   36808:	str	r1, [sp, #8]
   3680c:	cmp	r9, #0
   36810:	bmi	36b08 <__assert_fail@plt+0x24c40>
   36814:	ldr	r3, [sp, #28]
   36818:	mvn	r0, #0
   3681c:	mvn	r1, #-2147483648	; 0x80000000
   36820:	str	r4, [sp, #4]
   36824:	mvn	r8, #0
   36828:	mvn	r4, #-2147483648	; 0x80000000
   3682c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36830:	ldr	r6, [sp, #8]
   36834:	ldr	r2, [sp, #24]
   36838:	ldr	r3, [sp, #28]
   3683c:	mov	r7, #1
   36840:	subs	r0, r0, r6
   36844:	sbcs	r0, r1, r9
   36848:	bge	36b44 <__assert_fail@plt+0x24c7c>
   3684c:	b	36b5c <__assert_fail@plt+0x24c94>
   36850:	and	r0, r6, r7
   36854:	cmn	r0, #1
   36858:	beq	36880 <__assert_fail@plt+0x249b8>
   3685c:	mov	r0, #0
   36860:	mov	r1, #-2147483648	; 0x80000000
   36864:	mov	r2, r6
   36868:	mov	r3, r7
   3686c:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36870:	ldr	r3, [sp, #28]
   36874:	subs	r0, r0, #1024	; 0x400
   36878:	sbcs	r0, r1, #0
   3687c:	blt	36ad8 <__assert_fail@plt+0x24c10>
   36880:	lsl	r0, r7, #10
   36884:	orr	r7, r0, r6, lsr #22
   36888:	lsl	r6, r6, #10
   3688c:	b	37250 <__assert_fail@plt+0x25388>
   36890:	and	r0, r6, r7
   36894:	cmn	r0, #1
   36898:	beq	368d4 <__assert_fail@plt+0x24a0c>
   3689c:	mov	r0, #0
   368a0:	mov	r1, #-2147483648	; 0x80000000
   368a4:	mov	r2, r6
   368a8:	mov	r3, r7
   368ac:	bl	39be4 <__assert_fail@plt+0x27d1c>
   368b0:	ldr	r2, [sp, #24]
   368b4:	ldr	r3, [sp, #28]
   368b8:	mov	r4, #1
   368bc:	mov	r9, #-2147483648	; 0x80000000
   368c0:	subs	r0, r0, r2
   368c4:	sbcs	r0, r1, r3
   368c8:	mov	r0, #0
   368cc:	str	r0, [sp, #8]
   368d0:	blt	36e20 <__assert_fail@plt+0x24f58>
   368d4:	umull	r1, r0, r6, r2
   368d8:	mov	r4, #0
   368dc:	mla	r0, r6, r3, r0
   368e0:	mla	r9, r7, r2, r0
   368e4:	str	r1, [sp, #8]
   368e8:	cmp	r9, #0
   368ec:	bmi	36e20 <__assert_fail@plt+0x24f58>
   368f0:	ldr	r3, [sp, #28]
   368f4:	mvn	r0, #0
   368f8:	mvn	r1, #-2147483648	; 0x80000000
   368fc:	str	r4, [sp, #4]
   36900:	mvn	r8, #0
   36904:	mvn	r4, #-2147483648	; 0x80000000
   36908:	bl	39cb8 <__assert_fail@plt+0x27df0>
   3690c:	ldr	r6, [sp, #8]
   36910:	ldr	r2, [sp, #24]
   36914:	ldr	r3, [sp, #28]
   36918:	mov	r7, #1
   3691c:	subs	r0, r0, r6
   36920:	sbcs	r0, r1, r9
   36924:	bge	36e5c <__assert_fail@plt+0x24f94>
   36928:	b	36e74 <__assert_fail@plt+0x24fac>
   3692c:	and	r0, r6, r7
   36930:	cmn	r0, #1
   36934:	beq	36970 <__assert_fail@plt+0x24aa8>
   36938:	mov	r0, #0
   3693c:	mov	r1, #-2147483648	; 0x80000000
   36940:	mov	r2, r6
   36944:	mov	r3, r7
   36948:	bl	39be4 <__assert_fail@plt+0x27d1c>
   3694c:	ldr	r2, [sp, #24]
   36950:	ldr	r3, [sp, #28]
   36954:	mov	r4, #1
   36958:	mov	r8, #-2147483648	; 0x80000000
   3695c:	subs	r0, r0, r2
   36960:	sbcs	r0, r1, r3
   36964:	mov	r0, #0
   36968:	str	r0, [sp, #8]
   3696c:	blt	3709c <__assert_fail@plt+0x251d4>
   36970:	umull	r1, r0, r6, r2
   36974:	mov	r4, #0
   36978:	mla	r0, r6, r3, r0
   3697c:	mla	r8, r7, r2, r0
   36980:	str	r1, [sp, #8]
   36984:	cmp	r8, #0
   36988:	bmi	3709c <__assert_fail@plt+0x251d4>
   3698c:	ldr	r3, [sp, #28]
   36990:	mvn	r0, #0
   36994:	mvn	r1, #-2147483648	; 0x80000000
   36998:	str	r4, [sp, #4]
   3699c:	mvn	r9, #0
   369a0:	mvn	r4, #-2147483648	; 0x80000000
   369a4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   369a8:	ldr	r6, [sp, #8]
   369ac:	ldr	r2, [sp, #24]
   369b0:	ldr	r3, [sp, #28]
   369b4:	mov	r7, #1
   369b8:	subs	r0, r0, r6
   369bc:	sbcs	r0, r1, r8
   369c0:	bge	370d8 <__assert_fail@plt+0x25210>
   369c4:	b	370f0 <__assert_fail@plt+0x25228>
   369c8:	and	r0, r6, r7
   369cc:	cmn	r0, #1
   369d0:	beq	36a0c <__assert_fail@plt+0x24b44>
   369d4:	mov	r0, #0
   369d8:	mov	r1, #-2147483648	; 0x80000000
   369dc:	mov	r2, r6
   369e0:	mov	r3, r7
   369e4:	bl	39be4 <__assert_fail@plt+0x27d1c>
   369e8:	ldr	r2, [sp, #24]
   369ec:	ldr	r3, [sp, #28]
   369f0:	mov	r4, #1
   369f4:	mov	r9, #-2147483648	; 0x80000000
   369f8:	subs	r0, r0, r2
   369fc:	sbcs	r0, r1, r3
   36a00:	mov	r0, #0
   36a04:	str	r0, [sp, #8]
   36a08:	blt	372b8 <__assert_fail@plt+0x253f0>
   36a0c:	umull	r1, r0, r6, r2
   36a10:	mov	r4, #0
   36a14:	mla	r0, r6, r3, r0
   36a18:	mla	r9, r7, r2, r0
   36a1c:	str	r1, [sp, #8]
   36a20:	cmp	r9, #0
   36a24:	bmi	372b8 <__assert_fail@plt+0x253f0>
   36a28:	ldr	r3, [sp, #28]
   36a2c:	mvn	r0, #0
   36a30:	mvn	r1, #-2147483648	; 0x80000000
   36a34:	str	r4, [sp]
   36a38:	mvn	r8, #-2147483648	; 0x80000000
   36a3c:	str	r0, [sp, #4]
   36a40:	mvn	r0, #0
   36a44:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36a48:	ldr	r6, [sp, #8]
   36a4c:	ldr	r2, [sp, #24]
   36a50:	ldr	r3, [sp, #28]
   36a54:	mov	r7, #1
   36a58:	subs	r0, r0, r6
   36a5c:	sbcs	r0, r1, r9
   36a60:	bge	372f8 <__assert_fail@plt+0x25430>
   36a64:	b	37314 <__assert_fail@plt+0x2544c>
   36a68:	and	r0, r6, r7
   36a6c:	cmn	r0, #1
   36a70:	beq	36a98 <__assert_fail@plt+0x24bd0>
   36a74:	mov	r0, #0
   36a78:	mov	r1, #-2147483648	; 0x80000000
   36a7c:	mov	r2, r6
   36a80:	mov	r3, r7
   36a84:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36a88:	ldr	r3, [sp, #28]
   36a8c:	subs	r0, r0, #512	; 0x200
   36a90:	sbcs	r0, r1, #0
   36a94:	blt	36ad8 <__assert_fail@plt+0x24c10>
   36a98:	lsl	r0, r7, #9
   36a9c:	orr	r7, r0, r6, lsr #23
   36aa0:	lsl	r6, r6, #9
   36aa4:	b	37250 <__assert_fail@plt+0x25388>
   36aa8:	and	r0, r6, r7
   36aac:	cmn	r0, #1
   36ab0:	beq	36af8 <__assert_fail@plt+0x24c30>
   36ab4:	mov	r0, #0
   36ab8:	mov	r1, #-2147483648	; 0x80000000
   36abc:	mov	r2, r6
   36ac0:	mov	r3, r7
   36ac4:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36ac8:	ldr	r3, [sp, #28]
   36acc:	subs	r0, r0, #2
   36ad0:	sbcs	r0, r1, #0
   36ad4:	bge	36af8 <__assert_fail@plt+0x24c30>
   36ad8:	cmp	r7, #0
   36adc:	mvn	r0, #-2147483648	; 0x80000000
   36ae0:	mvn	r6, #0
   36ae4:	mov	r3, #1
   36ae8:	movmi	r0, #-2147483648	; 0x80000000
   36aec:	movwmi	r6, #0
   36af0:	mov	r7, r0
   36af4:	b	37250 <__assert_fail@plt+0x25388>
   36af8:	lsl	r0, r7, #1
   36afc:	orr	r7, r0, r6, lsr #31
   36b00:	lsl	r6, r6, #1
   36b04:	b	37250 <__assert_fail@plt+0x25388>
   36b08:	ldr	r6, [sp, #8]
   36b0c:	mov	r0, #0
   36b10:	mov	r1, #-2147483648	; 0x80000000
   36b14:	mov	r3, r9
   36b18:	str	r4, [sp, #4]
   36b1c:	mov	r2, r6
   36b20:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36b24:	ldr	r2, [sp, #24]
   36b28:	ldr	r3, [sp, #28]
   36b2c:	mov	r7, #1
   36b30:	mov	r8, #0
   36b34:	mov	r4, #-2147483648	; 0x80000000
   36b38:	subs	r0, r0, r2
   36b3c:	sbcs	r0, r1, r3
   36b40:	blt	36b94 <__assert_fail@plt+0x24ccc>
   36b44:	umull	r8, r0, r6, r2
   36b48:	ldr	r7, [sp, #4]
   36b4c:	mla	r0, r6, r3, r0
   36b50:	mla	r4, r9, r2, r0
   36b54:	cmp	r4, #0
   36b58:	bmi	36b94 <__assert_fail@plt+0x24ccc>
   36b5c:	ldr	r3, [sp, #28]
   36b60:	mvn	r0, #0
   36b64:	mvn	r1, #-2147483648	; 0x80000000
   36b68:	str	r7, [sp, #8]
   36b6c:	mvn	r7, #0
   36b70:	mvn	r9, #-2147483648	; 0x80000000
   36b74:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36b78:	ldr	r2, [sp, #24]
   36b7c:	ldr	r3, [sp, #28]
   36b80:	subs	r0, r0, r8
   36b84:	mov	r6, #1
   36b88:	sbcs	r0, r1, r4
   36b8c:	bge	36bcc <__assert_fail@plt+0x24d04>
   36b90:	b	36be4 <__assert_fail@plt+0x24d1c>
   36b94:	mov	r0, #0
   36b98:	mov	r1, #-2147483648	; 0x80000000
   36b9c:	mov	r2, r8
   36ba0:	mov	r3, r4
   36ba4:	str	r7, [sp, #8]
   36ba8:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36bac:	ldr	r2, [sp, #24]
   36bb0:	ldr	r3, [sp, #28]
   36bb4:	mov	r6, #1
   36bb8:	mov	r7, #0
   36bbc:	mov	r9, #-2147483648	; 0x80000000
   36bc0:	subs	r0, r0, r2
   36bc4:	sbcs	r0, r1, r3
   36bc8:	blt	36c24 <__assert_fail@plt+0x24d5c>
   36bcc:	umull	r7, r0, r8, r2
   36bd0:	ldr	r6, [sp, #8]
   36bd4:	mla	r0, r8, r3, r0
   36bd8:	mla	r9, r4, r2, r0
   36bdc:	cmp	r9, #0
   36be0:	bmi	36c24 <__assert_fail@plt+0x24d5c>
   36be4:	ldr	r3, [sp, #28]
   36be8:	mvn	r0, #0
   36bec:	mvn	r1, #-2147483648	; 0x80000000
   36bf0:	str	r6, [sp, #8]
   36bf4:	mvn	r8, #0
   36bf8:	mvn	r4, #-2147483648	; 0x80000000
   36bfc:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36c00:	ldr	r2, [sp, #24]
   36c04:	ldr	r3, [sp, #28]
   36c08:	subs	r0, r0, r7
   36c0c:	sbcs	r0, r1, r9
   36c10:	bge	36c68 <__assert_fail@plt+0x24da0>
   36c14:	mov	r0, #1
   36c18:	mov	r6, #0
   36c1c:	str	r0, [sp, #8]
   36c20:	b	36c80 <__assert_fail@plt+0x24db8>
   36c24:	mov	r0, #0
   36c28:	mov	r1, #-2147483648	; 0x80000000
   36c2c:	mov	r2, r7
   36c30:	mov	r3, r9
   36c34:	str	r6, [sp, #8]
   36c38:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36c3c:	ldr	r2, [sp, #24]
   36c40:	ldr	r3, [sp, #28]
   36c44:	subs	r0, r0, r2
   36c48:	sbcs	r0, r1, r3
   36c4c:	bge	36c68 <__assert_fail@plt+0x24da0>
   36c50:	mov	r0, #1
   36c54:	mov	r8, #0
   36c58:	mov	r4, #-2147483648	; 0x80000000
   36c5c:	mov	r6, #0
   36c60:	str	r0, [sp, #8]
   36c64:	b	36cb8 <__assert_fail@plt+0x24df0>
   36c68:	umull	r8, r0, r7, r2
   36c6c:	mov	r6, #0
   36c70:	mla	r0, r7, r3, r0
   36c74:	mla	r4, r9, r2, r0
   36c78:	cmp	r4, #0
   36c7c:	bmi	36cb8 <__assert_fail@plt+0x24df0>
   36c80:	ldr	r3, [sp, #28]
   36c84:	mvn	r0, #0
   36c88:	mvn	r1, #-2147483648	; 0x80000000
   36c8c:	mvn	r9, #0
   36c90:	mvn	r7, #-2147483648	; 0x80000000
   36c94:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36c98:	ldr	r2, [sp, #24]
   36c9c:	ldr	r3, [sp, #28]
   36ca0:	subs	r0, r0, r8
   36ca4:	sbcs	r0, r1, r4
   36ca8:	bge	36cf4 <__assert_fail@plt+0x24e2c>
   36cac:	mov	r0, #1
   36cb0:	str	r0, [sp, #8]
   36cb4:	b	36d08 <__assert_fail@plt+0x24e40>
   36cb8:	mov	r0, #0
   36cbc:	mov	r1, #-2147483648	; 0x80000000
   36cc0:	mov	r2, r8
   36cc4:	mov	r3, r4
   36cc8:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36ccc:	ldr	r2, [sp, #24]
   36cd0:	ldr	r3, [sp, #28]
   36cd4:	subs	r0, r0, r2
   36cd8:	sbcs	r0, r1, r3
   36cdc:	bge	36cf4 <__assert_fail@plt+0x24e2c>
   36ce0:	mov	r0, #1
   36ce4:	mov	r9, #0
   36ce8:	mov	r7, #-2147483648	; 0x80000000
   36cec:	str	r0, [sp, #8]
   36cf0:	b	36d44 <__assert_fail@plt+0x24e7c>
   36cf4:	umull	r9, r0, r8, r2
   36cf8:	mla	r0, r8, r3, r0
   36cfc:	mla	r7, r4, r2, r0
   36d00:	cmp	r7, #0
   36d04:	bmi	36d44 <__assert_fail@plt+0x24e7c>
   36d08:	ldr	r3, [sp, #28]
   36d0c:	mvn	r0, #0
   36d10:	mvn	r1, #-2147483648	; 0x80000000
   36d14:	mvn	r8, #0
   36d18:	mvn	r4, #-2147483648	; 0x80000000
   36d1c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36d20:	ldr	r2, [sp, #24]
   36d24:	ldr	r3, [sp, #28]
   36d28:	subs	r0, r0, r9
   36d2c:	sbcs	r0, r1, r7
   36d30:	bge	36d84 <__assert_fail@plt+0x24ebc>
   36d34:	ldr	r9, [sp, #12]
   36d38:	mov	r0, #1
   36d3c:	str	r0, [sp, #8]
   36d40:	b	36d9c <__assert_fail@plt+0x24ed4>
   36d44:	mov	r0, #0
   36d48:	mov	r1, #-2147483648	; 0x80000000
   36d4c:	mov	r2, r9
   36d50:	mov	r3, r7
   36d54:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36d58:	ldr	r2, [sp, #24]
   36d5c:	ldr	r3, [sp, #28]
   36d60:	subs	r0, r0, r2
   36d64:	sbcs	r0, r1, r3
   36d68:	bge	36d84 <__assert_fail@plt+0x24ebc>
   36d6c:	ldr	r9, [sp, #12]
   36d70:	mov	r0, #1
   36d74:	mov	r8, #0
   36d78:	mov	r4, #-2147483648	; 0x80000000
   36d7c:	str	r0, [sp, #8]
   36d80:	b	36dec <__assert_fail@plt+0x24f24>
   36d84:	umull	r8, r0, r9, r2
   36d88:	mla	r0, r9, r3, r0
   36d8c:	ldr	r9, [sp, #12]
   36d90:	mla	r4, r7, r2, r0
   36d94:	cmp	r4, #0
   36d98:	bmi	36dec <__assert_fail@plt+0x24f24>
   36d9c:	ldr	r3, [sp, #28]
   36da0:	mvn	r0, #0
   36da4:	mvn	r1, #-2147483648	; 0x80000000
   36da8:	mvn	r6, #0
   36dac:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36db0:	ldr	r7, [sp, #24]
   36db4:	ldr	r3, [sp, #28]
   36db8:	subs	r0, r0, r8
   36dbc:	mov	r2, #1
   36dc0:	sbcs	r0, r1, r4
   36dc4:	mvn	r0, #-2147483648	; 0x80000000
   36dc8:	blt	36ddc <__assert_fail@plt+0x24f14>
   36dcc:	umull	r6, r0, r8, r7
   36dd0:	mov	r2, #0
   36dd4:	mla	r0, r8, r3, r0
   36dd8:	mla	r0, r4, r7, r0
   36ddc:	ldr	r1, [sp, #8]
   36de0:	mov	r7, r0
   36de4:	orr	r3, r2, r1
   36de8:	b	37250 <__assert_fail@plt+0x25388>
   36dec:	mov	r0, #0
   36df0:	mov	r1, #-2147483648	; 0x80000000
   36df4:	mov	r2, r8
   36df8:	mov	r3, r4
   36dfc:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36e00:	ldr	r7, [sp, #24]
   36e04:	ldr	r3, [sp, #28]
   36e08:	mov	r2, #1
   36e0c:	subs	r0, r0, r7
   36e10:	sbcs	r0, r1, r3
   36e14:	mov	r0, #-2147483648	; 0x80000000
   36e18:	bge	36dcc <__assert_fail@plt+0x24f04>
   36e1c:	b	36ddc <__assert_fail@plt+0x24f14>
   36e20:	ldr	r6, [sp, #8]
   36e24:	mov	r0, #0
   36e28:	mov	r1, #-2147483648	; 0x80000000
   36e2c:	mov	r3, r9
   36e30:	str	r4, [sp, #4]
   36e34:	mov	r2, r6
   36e38:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36e3c:	ldr	r2, [sp, #24]
   36e40:	ldr	r3, [sp, #28]
   36e44:	mov	r7, #1
   36e48:	mov	r8, #0
   36e4c:	mov	r4, #-2147483648	; 0x80000000
   36e50:	subs	r0, r0, r2
   36e54:	sbcs	r0, r1, r3
   36e58:	blt	36eb0 <__assert_fail@plt+0x24fe8>
   36e5c:	umull	r8, r0, r6, r2
   36e60:	ldr	r7, [sp, #4]
   36e64:	mla	r0, r6, r3, r0
   36e68:	mla	r4, r9, r2, r0
   36e6c:	cmp	r4, #0
   36e70:	bmi	36eb0 <__assert_fail@plt+0x24fe8>
   36e74:	ldr	r3, [sp, #28]
   36e78:	mvn	r0, #0
   36e7c:	mvn	r1, #-2147483648	; 0x80000000
   36e80:	str	r7, [sp, #4]
   36e84:	mvn	r7, #0
   36e88:	mvn	r9, #-2147483648	; 0x80000000
   36e8c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36e90:	ldr	r2, [sp, #24]
   36e94:	ldr	r3, [sp, #28]
   36e98:	subs	r0, r0, r8
   36e9c:	mov	r6, #1
   36ea0:	sbcs	r0, r1, r4
   36ea4:	str	r6, [sp, #8]
   36ea8:	bge	36eec <__assert_fail@plt+0x25024>
   36eac:	b	36f08 <__assert_fail@plt+0x25040>
   36eb0:	mov	r0, #0
   36eb4:	mov	r1, #-2147483648	; 0x80000000
   36eb8:	mov	r2, r8
   36ebc:	mov	r3, r4
   36ec0:	str	r7, [sp, #4]
   36ec4:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36ec8:	ldr	r2, [sp, #24]
   36ecc:	ldr	r3, [sp, #28]
   36ed0:	mov	r7, #1
   36ed4:	mov	r9, #-2147483648	; 0x80000000
   36ed8:	str	r7, [sp, #8]
   36edc:	mov	r7, #0
   36ee0:	subs	r0, r0, r2
   36ee4:	sbcs	r0, r1, r3
   36ee8:	blt	36f40 <__assert_fail@plt+0x25078>
   36eec:	umull	r7, r0, r8, r2
   36ef0:	mla	r0, r8, r3, r0
   36ef4:	mla	r9, r4, r2, r0
   36ef8:	ldr	r0, [sp, #4]
   36efc:	cmp	r9, #0
   36f00:	str	r0, [sp, #8]
   36f04:	bmi	36f40 <__assert_fail@plt+0x25078>
   36f08:	ldr	r3, [sp, #28]
   36f0c:	mvn	r0, #0
   36f10:	mvn	r1, #-2147483648	; 0x80000000
   36f14:	mvn	r4, #0
   36f18:	mvn	r8, #-2147483648	; 0x80000000
   36f1c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36f20:	ldr	r2, [sp, #24]
   36f24:	ldr	r3, [sp, #28]
   36f28:	subs	r0, r0, r7
   36f2c:	sbcs	r0, r1, r9
   36f30:	bge	36f7c <__assert_fail@plt+0x250b4>
   36f34:	mov	r0, #1
   36f38:	str	r0, [sp, #8]
   36f3c:	b	36f90 <__assert_fail@plt+0x250c8>
   36f40:	mov	r0, #0
   36f44:	mov	r1, #-2147483648	; 0x80000000
   36f48:	mov	r2, r7
   36f4c:	mov	r3, r9
   36f50:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36f54:	ldr	r2, [sp, #24]
   36f58:	ldr	r3, [sp, #28]
   36f5c:	subs	r0, r0, r2
   36f60:	sbcs	r0, r1, r3
   36f64:	bge	36f7c <__assert_fail@plt+0x250b4>
   36f68:	mov	r0, #1
   36f6c:	mov	r4, #0
   36f70:	mov	r8, #-2147483648	; 0x80000000
   36f74:	str	r0, [sp, #8]
   36f78:	b	36fc4 <__assert_fail@plt+0x250fc>
   36f7c:	umull	r4, r0, r7, r2
   36f80:	mla	r0, r7, r3, r0
   36f84:	mla	r8, r9, r2, r0
   36f88:	cmp	r8, #0
   36f8c:	bmi	36fc4 <__assert_fail@plt+0x250fc>
   36f90:	ldr	r3, [sp, #28]
   36f94:	mvn	r0, #0
   36f98:	mvn	r1, #-2147483648	; 0x80000000
   36f9c:	mvn	r6, #0
   36fa0:	mvn	r9, #-2147483648	; 0x80000000
   36fa4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   36fa8:	ldr	r2, [sp, #24]
   36fac:	ldr	r3, [sp, #28]
   36fb0:	subs	r0, r0, r4
   36fb4:	sbcs	r0, r1, r8
   36fb8:	bge	36ffc <__assert_fail@plt+0x25134>
   36fbc:	mov	r8, #1
   36fc0:	b	37014 <__assert_fail@plt+0x2514c>
   36fc4:	mov	r0, #0
   36fc8:	mov	r1, #-2147483648	; 0x80000000
   36fcc:	mov	r2, r4
   36fd0:	mov	r3, r8
   36fd4:	bl	39be4 <__assert_fail@plt+0x27d1c>
   36fd8:	ldr	r2, [sp, #24]
   36fdc:	ldr	r3, [sp, #28]
   36fe0:	subs	r0, r0, r2
   36fe4:	sbcs	r0, r1, r3
   36fe8:	bge	36ffc <__assert_fail@plt+0x25134>
   36fec:	mov	r8, #1
   36ff0:	mov	r6, #0
   36ff4:	mov	r9, #-2147483648	; 0x80000000
   36ff8:	b	37064 <__assert_fail@plt+0x2519c>
   36ffc:	umull	r6, r0, r4, r2
   37000:	mla	r0, r4, r3, r0
   37004:	mla	r9, r8, r2, r0
   37008:	ldr	r8, [sp, #8]
   3700c:	cmp	r9, #0
   37010:	bmi	37064 <__assert_fail@plt+0x2519c>
   37014:	ldr	r3, [sp, #28]
   37018:	mvn	r0, #0
   3701c:	mvn	r1, #-2147483648	; 0x80000000
   37020:	mvn	r4, #0
   37024:	mvn	r7, #-2147483648	; 0x80000000
   37028:	bl	39cb8 <__assert_fail@plt+0x27df0>
   3702c:	ldr	r3, [sp, #24]
   37030:	ldr	ip, [sp, #28]
   37034:	subs	r0, r0, r6
   37038:	mov	r2, #1
   3703c:	sbcs	r0, r1, r9
   37040:	blt	37054 <__assert_fail@plt+0x2518c>
   37044:	umull	r4, r0, r6, r3
   37048:	mov	r2, #0
   3704c:	mla	r0, r6, ip, r0
   37050:	mla	r7, r9, r3, r0
   37054:	ldr	r9, [sp, #12]
   37058:	orr	r3, r2, r8
   3705c:	mov	r6, r4
   37060:	b	37250 <__assert_fail@plt+0x25388>
   37064:	mov	r0, #0
   37068:	mov	r1, #-2147483648	; 0x80000000
   3706c:	mov	r2, r6
   37070:	mov	r3, r9
   37074:	bl	39be4 <__assert_fail@plt+0x27d1c>
   37078:	ldr	r3, [sp, #24]
   3707c:	ldr	ip, [sp, #28]
   37080:	mov	r2, #1
   37084:	mov	r4, #0
   37088:	mov	r7, #-2147483648	; 0x80000000
   3708c:	subs	r0, r0, r3
   37090:	sbcs	r0, r1, ip
   37094:	bge	37044 <__assert_fail@plt+0x2517c>
   37098:	b	37054 <__assert_fail@plt+0x2518c>
   3709c:	ldr	r6, [sp, #8]
   370a0:	mov	r0, #0
   370a4:	mov	r1, #-2147483648	; 0x80000000
   370a8:	mov	r3, r8
   370ac:	str	r4, [sp, #4]
   370b0:	mov	r2, r6
   370b4:	bl	39be4 <__assert_fail@plt+0x27d1c>
   370b8:	ldr	r2, [sp, #24]
   370bc:	ldr	r3, [sp, #28]
   370c0:	mov	r7, #1
   370c4:	mov	r9, #0
   370c8:	mov	r4, #-2147483648	; 0x80000000
   370cc:	subs	r0, r0, r2
   370d0:	sbcs	r0, r1, r3
   370d4:	blt	3712c <__assert_fail@plt+0x25264>
   370d8:	umull	r9, r0, r6, r2
   370dc:	ldr	r7, [sp, #4]
   370e0:	mla	r0, r6, r3, r0
   370e4:	mla	r4, r8, r2, r0
   370e8:	cmp	r4, #0
   370ec:	bmi	3712c <__assert_fail@plt+0x25264>
   370f0:	ldr	r3, [sp, #28]
   370f4:	mvn	r0, #0
   370f8:	mvn	r1, #-2147483648	; 0x80000000
   370fc:	str	r7, [sp, #4]
   37100:	mvn	r8, #0
   37104:	mvn	r7, #-2147483648	; 0x80000000
   37108:	bl	39cb8 <__assert_fail@plt+0x27df0>
   3710c:	ldr	r2, [sp, #24]
   37110:	ldr	r3, [sp, #28]
   37114:	subs	r0, r0, r9
   37118:	mov	r6, #1
   3711c:	sbcs	r0, r1, r4
   37120:	str	r6, [sp, #8]
   37124:	bge	37168 <__assert_fail@plt+0x252a0>
   37128:	b	37184 <__assert_fail@plt+0x252bc>
   3712c:	mov	r0, #0
   37130:	mov	r1, #-2147483648	; 0x80000000
   37134:	mov	r2, r9
   37138:	mov	r3, r4
   3713c:	str	r7, [sp, #4]
   37140:	bl	39be4 <__assert_fail@plt+0x27d1c>
   37144:	ldr	r2, [sp, #24]
   37148:	ldr	r3, [sp, #28]
   3714c:	mov	r7, #1
   37150:	mov	r8, #0
   37154:	str	r7, [sp, #8]
   37158:	mov	r7, #-2147483648	; 0x80000000
   3715c:	subs	r0, r0, r2
   37160:	sbcs	r0, r1, r3
   37164:	blt	371b8 <__assert_fail@plt+0x252f0>
   37168:	umull	r8, r0, r9, r2
   3716c:	mla	r0, r9, r3, r0
   37170:	mla	r7, r4, r2, r0
   37174:	ldr	r0, [sp, #4]
   37178:	cmp	r7, #0
   3717c:	str	r0, [sp, #8]
   37180:	bmi	371b8 <__assert_fail@plt+0x252f0>
   37184:	ldr	r3, [sp, #28]
   37188:	mvn	r0, #0
   3718c:	mvn	r1, #-2147483648	; 0x80000000
   37190:	mvn	r4, #0
   37194:	mvn	r9, #-2147483648	; 0x80000000
   37198:	bl	39cb8 <__assert_fail@plt+0x27df0>
   3719c:	ldr	r2, [sp, #24]
   371a0:	ldr	r3, [sp, #28]
   371a4:	subs	r0, r0, r8
   371a8:	sbcs	r0, r1, r7
   371ac:	bge	371f0 <__assert_fail@plt+0x25328>
   371b0:	mov	r8, #1
   371b4:	b	37208 <__assert_fail@plt+0x25340>
   371b8:	mov	r0, #0
   371bc:	mov	r1, #-2147483648	; 0x80000000
   371c0:	mov	r2, r8
   371c4:	mov	r3, r7
   371c8:	bl	39be4 <__assert_fail@plt+0x27d1c>
   371cc:	ldr	r2, [sp, #24]
   371d0:	ldr	r3, [sp, #28]
   371d4:	subs	r0, r0, r2
   371d8:	sbcs	r0, r1, r3
   371dc:	bge	371f0 <__assert_fail@plt+0x25328>
   371e0:	mov	r8, #1
   371e4:	mov	r4, #0
   371e8:	mov	r9, #-2147483648	; 0x80000000
   371ec:	b	37280 <__assert_fail@plt+0x253b8>
   371f0:	umull	r4, r0, r8, r2
   371f4:	mla	r0, r8, r3, r0
   371f8:	ldr	r8, [sp, #8]
   371fc:	mla	r9, r7, r2, r0
   37200:	cmp	r9, #0
   37204:	bmi	37280 <__assert_fail@plt+0x253b8>
   37208:	ldr	r3, [sp, #28]
   3720c:	mvn	r0, #0
   37210:	mvn	r1, #-2147483648	; 0x80000000
   37214:	mvn	r6, #0
   37218:	mvn	r7, #-2147483648	; 0x80000000
   3721c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37220:	ldr	r3, [sp, #24]
   37224:	ldr	ip, [sp, #28]
   37228:	subs	r0, r0, r4
   3722c:	mov	r2, #1
   37230:	sbcs	r0, r1, r9
   37234:	blt	37248 <__assert_fail@plt+0x25380>
   37238:	umull	r6, r0, r4, r3
   3723c:	mov	r2, #0
   37240:	mla	r0, r4, ip, r0
   37244:	mla	r7, r9, r3, r0
   37248:	ldr	r9, [sp, #12]
   3724c:	orr	r3, r2, r8
   37250:	ldr	r1, [sp, #20]
   37254:	ldr	r2, [sp, #16]
   37258:	orr	r5, r3, r5
   3725c:	add	r0, r1, r2
   37260:	str	r0, [sl]
   37264:	ldrb	r0, [r1, r2]
   37268:	cmp	r0, #0
   3726c:	orrne	r5, r5, #2
   37270:	strd	r6, [r9]
   37274:	mov	r0, r5
   37278:	sub	sp, fp, #28
   3727c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37280:	mov	r0, #0
   37284:	mov	r1, #-2147483648	; 0x80000000
   37288:	mov	r2, r4
   3728c:	mov	r3, r9
   37290:	bl	39be4 <__assert_fail@plt+0x27d1c>
   37294:	ldr	r3, [sp, #24]
   37298:	ldr	ip, [sp, #28]
   3729c:	mov	r2, #1
   372a0:	mov	r6, #0
   372a4:	mov	r7, #-2147483648	; 0x80000000
   372a8:	subs	r0, r0, r3
   372ac:	sbcs	r0, r1, ip
   372b0:	bge	37238 <__assert_fail@plt+0x25370>
   372b4:	b	37248 <__assert_fail@plt+0x25380>
   372b8:	ldr	r6, [sp, #8]
   372bc:	mov	r0, #0
   372c0:	mov	r1, #-2147483648	; 0x80000000
   372c4:	mov	r3, r9
   372c8:	str	r4, [sp]
   372cc:	mov	r2, r6
   372d0:	bl	39be4 <__assert_fail@plt+0x27d1c>
   372d4:	ldr	r2, [sp, #24]
   372d8:	ldr	r3, [sp, #28]
   372dc:	mov	r7, #1
   372e0:	mov	r8, #-2147483648	; 0x80000000
   372e4:	subs	r0, r0, r2
   372e8:	sbcs	r0, r1, r3
   372ec:	mov	r0, #0
   372f0:	str	r0, [sp, #4]
   372f4:	blt	37354 <__assert_fail@plt+0x2548c>
   372f8:	umull	r1, r0, r6, r2
   372fc:	ldr	r7, [sp]
   37300:	mla	r0, r6, r3, r0
   37304:	mla	r8, r9, r2, r0
   37308:	str	r1, [sp, #4]
   3730c:	cmp	r8, #0
   37310:	bmi	37354 <__assert_fail@plt+0x2548c>
   37314:	ldr	r3, [sp, #28]
   37318:	mvn	r0, #0
   3731c:	mvn	r1, #-2147483648	; 0x80000000
   37320:	str	r7, [sp]
   37324:	mvn	r7, #0
   37328:	mvn	r4, #-2147483648	; 0x80000000
   3732c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37330:	mov	r6, #1
   37334:	ldr	r2, [sp, #24]
   37338:	ldr	r3, [sp, #28]
   3733c:	str	r6, [sp, #8]
   37340:	ldr	r6, [sp, #4]
   37344:	subs	r0, r0, r6
   37348:	sbcs	r0, r1, r8
   3734c:	bge	37394 <__assert_fail@plt+0x254cc>
   37350:	b	373b0 <__assert_fail@plt+0x254e8>
   37354:	ldr	r6, [sp, #4]
   37358:	mov	r0, #0
   3735c:	mov	r1, #-2147483648	; 0x80000000
   37360:	mov	r3, r8
   37364:	str	r7, [sp]
   37368:	mov	r2, r6
   3736c:	bl	39be4 <__assert_fail@plt+0x27d1c>
   37370:	ldr	r2, [sp, #24]
   37374:	ldr	r3, [sp, #28]
   37378:	mov	r7, #1
   3737c:	mov	r4, #-2147483648	; 0x80000000
   37380:	str	r7, [sp, #8]
   37384:	mov	r7, #0
   37388:	subs	r0, r0, r2
   3738c:	sbcs	r0, r1, r3
   37390:	blt	373e8 <__assert_fail@plt+0x25520>
   37394:	umull	r7, r0, r6, r2
   37398:	mla	r0, r6, r3, r0
   3739c:	mla	r4, r8, r2, r0
   373a0:	ldr	r0, [sp]
   373a4:	cmp	r4, #0
   373a8:	str	r0, [sp, #8]
   373ac:	bmi	373e8 <__assert_fail@plt+0x25520>
   373b0:	ldr	r3, [sp, #28]
   373b4:	mvn	r0, #0
   373b8:	mvn	r1, #-2147483648	; 0x80000000
   373bc:	mvn	r9, #0
   373c0:	mvn	r8, #-2147483648	; 0x80000000
   373c4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   373c8:	ldr	r2, [sp, #24]
   373cc:	ldr	r3, [sp, #28]
   373d0:	subs	r0, r0, r7
   373d4:	sbcs	r0, r1, r4
   373d8:	bge	37424 <__assert_fail@plt+0x2555c>
   373dc:	mov	r0, #1
   373e0:	str	r0, [sp, #8]
   373e4:	b	37438 <__assert_fail@plt+0x25570>
   373e8:	mov	r0, #0
   373ec:	mov	r1, #-2147483648	; 0x80000000
   373f0:	mov	r2, r7
   373f4:	mov	r3, r4
   373f8:	bl	39be4 <__assert_fail@plt+0x27d1c>
   373fc:	ldr	r2, [sp, #24]
   37400:	ldr	r3, [sp, #28]
   37404:	subs	r0, r0, r2
   37408:	sbcs	r0, r1, r3
   3740c:	bge	37424 <__assert_fail@plt+0x2555c>
   37410:	mov	r0, #1
   37414:	mov	r9, #0
   37418:	mov	r8, #-2147483648	; 0x80000000
   3741c:	str	r0, [sp, #8]
   37420:	b	37470 <__assert_fail@plt+0x255a8>
   37424:	umull	r9, r0, r7, r2
   37428:	mla	r0, r7, r3, r0
   3742c:	mla	r8, r4, r2, r0
   37430:	cmp	r8, #0
   37434:	bmi	37470 <__assert_fail@plt+0x255a8>
   37438:	ldr	r3, [sp, #28]
   3743c:	mvn	r0, #0
   37440:	mvn	r1, #-2147483648	; 0x80000000
   37444:	mvn	r4, #0
   37448:	mvn	r7, #-2147483648	; 0x80000000
   3744c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37450:	ldr	r2, [sp, #24]
   37454:	ldr	r3, [sp, #28]
   37458:	subs	r0, r0, r9
   3745c:	sbcs	r0, r1, r8
   37460:	bge	374ac <__assert_fail@plt+0x255e4>
   37464:	mov	r0, #1
   37468:	str	r0, [sp, #8]
   3746c:	b	374c0 <__assert_fail@plt+0x255f8>
   37470:	mov	r0, #0
   37474:	mov	r1, #-2147483648	; 0x80000000
   37478:	mov	r2, r9
   3747c:	mov	r3, r8
   37480:	bl	39be4 <__assert_fail@plt+0x27d1c>
   37484:	ldr	r2, [sp, #24]
   37488:	ldr	r3, [sp, #28]
   3748c:	subs	r0, r0, r2
   37490:	sbcs	r0, r1, r3
   37494:	bge	374ac <__assert_fail@plt+0x255e4>
   37498:	mov	r0, #1
   3749c:	mov	r4, #0
   374a0:	mov	r7, #-2147483648	; 0x80000000
   374a4:	str	r0, [sp, #8]
   374a8:	b	374f8 <__assert_fail@plt+0x25630>
   374ac:	umull	r4, r0, r9, r2
   374b0:	mla	r0, r9, r3, r0
   374b4:	mla	r7, r8, r2, r0
   374b8:	cmp	r7, #0
   374bc:	bmi	374f8 <__assert_fail@plt+0x25630>
   374c0:	ldr	r3, [sp, #28]
   374c4:	mvn	r0, #0
   374c8:	mvn	r1, #-2147483648	; 0x80000000
   374cc:	mvn	r8, #0
   374d0:	mvn	r9, #-2147483648	; 0x80000000
   374d4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   374d8:	ldr	r2, [sp, #24]
   374dc:	ldr	r3, [sp, #28]
   374e0:	subs	r0, r0, r4
   374e4:	sbcs	r0, r1, r7
   374e8:	bge	37534 <__assert_fail@plt+0x2566c>
   374ec:	mov	r0, #1
   374f0:	str	r0, [sp, #8]
   374f4:	b	37548 <__assert_fail@plt+0x25680>
   374f8:	mov	r0, #0
   374fc:	mov	r1, #-2147483648	; 0x80000000
   37500:	mov	r2, r4
   37504:	mov	r3, r7
   37508:	bl	39be4 <__assert_fail@plt+0x27d1c>
   3750c:	ldr	r2, [sp, #24]
   37510:	ldr	r3, [sp, #28]
   37514:	subs	r0, r0, r2
   37518:	sbcs	r0, r1, r3
   3751c:	bge	37534 <__assert_fail@plt+0x2566c>
   37520:	mov	r0, #1
   37524:	mov	r8, #0
   37528:	mov	r9, #-2147483648	; 0x80000000
   3752c:	str	r0, [sp, #8]
   37530:	b	37584 <__assert_fail@plt+0x256bc>
   37534:	umull	r8, r0, r4, r2
   37538:	mla	r0, r4, r3, r0
   3753c:	mla	r9, r7, r2, r0
   37540:	cmp	r9, #0
   37544:	bmi	37584 <__assert_fail@plt+0x256bc>
   37548:	ldr	r3, [sp, #28]
   3754c:	mvn	r0, #0
   37550:	mvn	r1, #-2147483648	; 0x80000000
   37554:	mvn	r4, #0
   37558:	mvn	r6, #-2147483648	; 0x80000000
   3755c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37560:	ldr	r2, [sp, #24]
   37564:	ldr	r3, [sp, #28]
   37568:	subs	r0, r0, r8
   3756c:	sbcs	r0, r1, r9
   37570:	bge	375c4 <__assert_fail@plt+0x256fc>
   37574:	ldr	r9, [sp, #12]
   37578:	mov	r0, #1
   3757c:	str	r0, [sp, #8]
   37580:	b	375dc <__assert_fail@plt+0x25714>
   37584:	mov	r0, #0
   37588:	mov	r1, #-2147483648	; 0x80000000
   3758c:	mov	r2, r8
   37590:	mov	r3, r9
   37594:	bl	39be4 <__assert_fail@plt+0x27d1c>
   37598:	ldr	r2, [sp, #24]
   3759c:	ldr	r3, [sp, #28]
   375a0:	subs	r0, r0, r2
   375a4:	sbcs	r0, r1, r3
   375a8:	bge	375c4 <__assert_fail@plt+0x256fc>
   375ac:	ldr	r9, [sp, #12]
   375b0:	mov	r0, #1
   375b4:	mov	r4, #0
   375b8:	mov	r6, #-2147483648	; 0x80000000
   375bc:	str	r0, [sp, #8]
   375c0:	b	37628 <__assert_fail@plt+0x25760>
   375c4:	umull	r4, r0, r8, r2
   375c8:	mla	r0, r8, r3, r0
   375cc:	mla	r6, r9, r2, r0
   375d0:	ldr	r9, [sp, #12]
   375d4:	cmp	r6, #0
   375d8:	bmi	37628 <__assert_fail@plt+0x25760>
   375dc:	ldr	r3, [sp, #28]
   375e0:	mvn	r0, #0
   375e4:	mvn	r1, #-2147483648	; 0x80000000
   375e8:	mov	r8, r6
   375ec:	mvn	r6, #0
   375f0:	mvn	r7, #-2147483648	; 0x80000000
   375f4:	bl	39cb8 <__assert_fail@plt+0x27df0>
   375f8:	ldr	r3, [sp, #24]
   375fc:	ldr	ip, [sp, #28]
   37600:	subs	r0, r0, r4
   37604:	mov	r2, #1
   37608:	sbcs	r0, r1, r8
   3760c:	blt	37620 <__assert_fail@plt+0x25758>
   37610:	umull	r6, r0, r4, r3
   37614:	mov	r2, #0
   37618:	mla	r0, r4, ip, r0
   3761c:	mla	r7, r8, r3, r0
   37620:	ldr	r0, [sp, #8]
   37624:	b	3676c <__assert_fail@plt+0x248a4>
   37628:	mov	r0, #0
   3762c:	mov	r1, #-2147483648	; 0x80000000
   37630:	mov	r2, r4
   37634:	mov	r3, r6
   37638:	bl	39be4 <__assert_fail@plt+0x27d1c>
   3763c:	ldr	r3, [sp, #24]
   37640:	ldr	ip, [sp, #28]
   37644:	mov	r8, r6
   37648:	mov	r2, #1
   3764c:	mov	r6, #0
   37650:	mov	r7, #-2147483648	; 0x80000000
   37654:	subs	r0, r0, r3
   37658:	sbcs	r0, r1, ip
   3765c:	bge	37610 <__assert_fail@plt+0x25748>
   37660:	b	37620 <__assert_fail@plt+0x25758>
   37664:	movw	r0, #49179	; 0xc01b
   37668:	movw	r1, #49217	; 0xc041
   3766c:	movw	r3, #49233	; 0xc051
   37670:	mov	r2, #85	; 0x55
   37674:	movt	r0, #3
   37678:	movt	r1, #3
   3767c:	movt	r3, #3
   37680:	bl	11ec8 <__assert_fail@plt>
   37684:	push	{fp, lr}
   37688:	mov	fp, sp
   3768c:	sub	sp, sp, #8
   37690:	movw	ip, #53716	; 0xd1d4
   37694:	movt	ip, #4
   37698:	ldr	ip, [ip]
   3769c:	str	ip, [sp, #4]
   376a0:	ldr	ip, [fp, #8]
   376a4:	str	ip, [sp]
   376a8:	bl	376b0 <__assert_fail@plt+0x257e8>
   376ac:	bl	11e8c <abort@plt>
   376b0:	push	{r4, r5, r6, r7, fp, lr}
   376b4:	add	fp, sp, #16
   376b8:	sub	sp, sp, #16
   376bc:	sub	r0, r0, #1
   376c0:	cmp	r0, #4
   376c4:	bcs	37744 <__assert_fail@plt+0x2587c>
   376c8:	mov	r5, r1
   376cc:	movw	r1, #49408	; 0xc100
   376d0:	ldr	r4, [fp, #12]
   376d4:	ldr	r6, [fp, #8]
   376d8:	movt	r1, #3
   376dc:	cmn	r5, #1
   376e0:	ldr	r1, [r1, r0, lsl #2]
   376e4:	ble	376f8 <__assert_fail@plt+0x25830>
   376e8:	ldr	r7, [r3, r5, lsl #4]
   376ec:	movw	r5, #49311	; 0xc09f
   376f0:	movt	r5, #3
   376f4:	b	37714 <__assert_fail@plt+0x2584c>
   376f8:	mov	r0, #0
   376fc:	add	r7, sp, #14
   37700:	strb	r0, [sp, #15]
   37704:	movw	r0, #49311	; 0xc09f
   37708:	strb	r2, [sp, #14]
   3770c:	movt	r0, #3
   37710:	sub	r5, r0, r5
   37714:	mov	r0, #0
   37718:	mov	r2, #5
   3771c:	bl	11afc <dcgettext@plt>
   37720:	mov	r2, r0
   37724:	mov	r0, r4
   37728:	mov	r1, #0
   3772c:	mov	r3, r5
   37730:	str	r7, [sp]
   37734:	str	r6, [sp, #4]
   37738:	bl	11bd4 <error@plt>
   3773c:	sub	sp, fp, #16
   37740:	pop	{r4, r5, r6, r7, fp, pc}
   37744:	bl	11e8c <abort@plt>
   37748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3774c:	add	fp, sp, #28
   37750:	sub	sp, sp, #44	; 0x2c
   37754:	cmp	r2, #37	; 0x25
   37758:	bcs	383dc <__assert_fail@plt+0x26514>
   3775c:	ldr	sl, [fp, #8]
   37760:	mov	r6, r2
   37764:	mov	r7, r1
   37768:	mov	r4, r0
   3776c:	str	r3, [sp, #36]	; 0x24
   37770:	bl	11cdc <__errno_location@plt>
   37774:	mov	r5, r0
   37778:	mov	r0, #0
   3777c:	str	r0, [r5]
   37780:	bl	11c7c <__ctype_b_loc@plt>
   37784:	ldr	r1, [r0]
   37788:	mov	r2, r4
   3778c:	ldrb	r0, [r2], #1
   37790:	add	r3, r1, r0, lsl #1
   37794:	ldrb	r3, [r3, #1]
   37798:	tst	r3, #32
   3779c:	bne	3778c <__assert_fail@plt+0x258c4>
   377a0:	cmp	r7, #0
   377a4:	sub	r9, fp, #32
   377a8:	mov	r8, #4
   377ac:	movne	r9, r7
   377b0:	cmp	r0, #45	; 0x2d
   377b4:	beq	37b74 <__assert_fail@plt+0x25cac>
   377b8:	mov	r0, r4
   377bc:	mov	r1, r9
   377c0:	mov	r2, r6
   377c4:	mov	r3, #0
   377c8:	bl	11acc <__strtoull_internal@plt>
   377cc:	mov	r7, r1
   377d0:	ldr	r1, [r9]
   377d4:	cmp	r1, r4
   377d8:	beq	37810 <__assert_fail@plt+0x25948>
   377dc:	mov	r6, r0
   377e0:	ldr	r0, [r5]
   377e4:	cmp	r0, #0
   377e8:	beq	37b2c <__assert_fail@plt+0x25c64>
   377ec:	cmp	r0, #34	; 0x22
   377f0:	bne	37b74 <__assert_fail@plt+0x25cac>
   377f4:	mov	r8, #1
   377f8:	cmp	sl, #0
   377fc:	beq	383c8 <__assert_fail@plt+0x26500>
   37800:	ldrb	r4, [r1]
   37804:	cmp	r4, #0
   37808:	bne	37854 <__assert_fail@plt+0x2598c>
   3780c:	b	383c8 <__assert_fail@plt+0x26500>
   37810:	cmp	sl, #0
   37814:	beq	37b74 <__assert_fail@plt+0x25cac>
   37818:	mov	r5, r1
   3781c:	ldrb	r1, [r4]
   37820:	cmp	r1, #0
   37824:	beq	37b74 <__assert_fail@plt+0x25cac>
   37828:	mov	r0, sl
   3782c:	bl	11cb8 <strchr@plt>
   37830:	cmp	r0, #0
   37834:	beq	37b74 <__assert_fail@plt+0x25cac>
   37838:	mov	r1, r5
   3783c:	mov	r8, #0
   37840:	mov	r6, #1
   37844:	mov	r7, #0
   37848:	ldrb	r4, [r1]
   3784c:	cmp	r4, #0
   37850:	beq	383c8 <__assert_fail@plt+0x26500>
   37854:	str	r1, [sp, #32]
   37858:	mov	r0, sl
   3785c:	mov	r1, r4
   37860:	bl	11cb8 <strchr@plt>
   37864:	cmp	r0, #0
   37868:	beq	37b68 <__assert_fail@plt+0x25ca0>
   3786c:	sub	r0, r4, #69	; 0x45
   37870:	mov	r1, #1
   37874:	mov	r3, #0
   37878:	mov	r5, #1024	; 0x400
   3787c:	cmp	r0, #47	; 0x2f
   37880:	str	r1, [sp, #28]
   37884:	bhi	37988 <__assert_fail@plt+0x25ac0>
   37888:	add	r1, pc, #0
   3788c:	ldr	pc, [r1, r0, lsl #2]
   37890:	andeq	r7, r3, r0, asr r9
   37894:	andeq	r7, r3, r8, lsl #19
   37898:	andeq	r7, r3, r0, asr r9
   3789c:	andeq	r7, r3, r8, lsl #19
   378a0:	andeq	r7, r3, r8, lsl #19
   378a4:	andeq	r7, r3, r8, lsl #19
   378a8:	andeq	r7, r3, r0, asr r9
   378ac:	andeq	r7, r3, r8, lsl #19
   378b0:	andeq	r7, r3, r0, asr r9
   378b4:	andeq	r7, r3, r8, lsl #19
   378b8:	andeq	r7, r3, r8, lsl #19
   378bc:	andeq	r7, r3, r0, asr r9
   378c0:	andeq	r7, r3, r8, lsl #19
   378c4:	andeq	r7, r3, r8, lsl #19
   378c8:	andeq	r7, r3, r8, lsl #19
   378cc:	andeq	r7, r3, r0, asr r9
   378d0:	andeq	r7, r3, r8, lsl #19
   378d4:	andeq	r7, r3, r8, lsl #19
   378d8:	andeq	r7, r3, r8, lsl #19
   378dc:	andeq	r7, r3, r8, lsl #19
   378e0:	andeq	r7, r3, r0, asr r9
   378e4:	andeq	r7, r3, r0, asr r9
   378e8:	andeq	r7, r3, r8, lsl #19
   378ec:	andeq	r7, r3, r8, lsl #19
   378f0:	andeq	r7, r3, r8, lsl #19
   378f4:	andeq	r7, r3, r8, lsl #19
   378f8:	andeq	r7, r3, r8, lsl #19
   378fc:	andeq	r7, r3, r8, lsl #19
   37900:	andeq	r7, r3, r8, lsl #19
   37904:	andeq	r7, r3, r8, lsl #19
   37908:	andeq	r7, r3, r8, lsl #19
   3790c:	andeq	r7, r3, r8, lsl #19
   37910:	andeq	r7, r3, r8, lsl #19
   37914:	andeq	r7, r3, r8, lsl #19
   37918:	andeq	r7, r3, r0, asr r9
   3791c:	andeq	r7, r3, r8, lsl #19
   37920:	andeq	r7, r3, r8, lsl #19
   37924:	andeq	r7, r3, r8, lsl #19
   37928:	andeq	r7, r3, r0, asr r9
   3792c:	andeq	r7, r3, r8, lsl #19
   37930:	andeq	r7, r3, r0, asr r9
   37934:	andeq	r7, r3, r8, lsl #19
   37938:	andeq	r7, r3, r8, lsl #19
   3793c:	andeq	r7, r3, r8, lsl #19
   37940:	andeq	r7, r3, r8, lsl #19
   37944:	andeq	r7, r3, r8, lsl #19
   37948:	andeq	r7, r3, r8, lsl #19
   3794c:	andeq	r7, r3, r0, asr r9
   37950:	mov	r0, sl
   37954:	mov	r1, #48	; 0x30
   37958:	bl	11cb8 <strchr@plt>
   3795c:	cmp	r0, #0
   37960:	beq	37984 <__assert_fail@plt+0x25abc>
   37964:	ldr	r1, [sp, #32]
   37968:	ldrb	r0, [r1, #1]
   3796c:	cmp	r0, #66	; 0x42
   37970:	cmpne	r0, #68	; 0x44
   37974:	bne	37b3c <__assert_fail@plt+0x25c74>
   37978:	mov	r5, #1000	; 0x3e8
   3797c:	mov	r0, #2
   37980:	str	r0, [sp, #28]
   37984:	mov	r3, #0
   37988:	sub	r0, r4, #66	; 0x42
   3798c:	cmp	r0, #53	; 0x35
   37990:	bhi	37b68 <__assert_fail@plt+0x25ca0>
   37994:	add	r1, pc, #0
   37998:	ldr	pc, [r1, r0, lsl #2]
   3799c:	ldrdeq	r7, [r3], -r8
   379a0:	andeq	r7, r3, r8, ror #22
   379a4:	andeq	r7, r3, r8, ror #22
   379a8:	andeq	r7, r3, r0, lsl #30
   379ac:	andeq	r7, r3, r8, ror #22
   379b0:	andeq	r7, r3, r4, ror sl
   379b4:	andeq	r7, r3, r8, ror #22
   379b8:	andeq	r7, r3, r8, ror #22
   379bc:	andeq	r7, r3, r8, ror #22
   379c0:	andeq	r7, r3, r0, lsl #23
   379c4:	andeq	r7, r3, r8, ror #22
   379c8:	andeq	r7, r3, r8, asr #23
   379cc:	andeq	r7, r3, r8, ror #22
   379d0:	andeq	r7, r3, r8, ror #22
   379d4:	andeq	r8, r3, r4, asr r0
   379d8:	andeq	r7, r3, r8, ror #22
   379dc:	andeq	r7, r3, r8, ror #22
   379e0:	andeq	r7, r3, r8, ror #22
   379e4:	andeq	r7, r3, r4, asr ip
   379e8:	andeq	r7, r3, r8, ror #22
   379ec:	andeq	r7, r3, r8, ror #22
   379f0:	andeq	r7, r3, r8, ror #22
   379f4:	andeq	r7, r3, r8, ror #22
   379f8:	andeq	r8, r3, ip, ror r1
   379fc:	andeq	r7, r3, ip, lsr sp
   37a00:	andeq	r7, r3, r8, ror #22
   37a04:	andeq	r7, r3, r8, ror #22
   37a08:	andeq	r7, r3, r8, ror #22
   37a0c:	andeq	r7, r3, r8, ror #22
   37a10:	andeq	r7, r3, r8, ror #22
   37a14:	andeq	r7, r3, r8, ror #22
   37a18:	andeq	r7, r3, r8, ror #22
   37a1c:	andeq	r8, r3, r0, asr r3
   37a20:	andeq	r8, r3, r8, lsr #7
   37a24:	andeq	r7, r3, r8, ror #22
   37a28:	andeq	r7, r3, r8, ror #22
   37a2c:	andeq	r7, r3, r8, ror #22
   37a30:	andeq	r7, r3, r4, ror sl
   37a34:	andeq	r7, r3, r8, ror #22
   37a38:	andeq	r7, r3, r8, ror #22
   37a3c:	andeq	r7, r3, r8, ror #22
   37a40:	andeq	r7, r3, r0, lsl #23
   37a44:	andeq	r7, r3, r8, ror #22
   37a48:	andeq	r7, r3, r8, asr #23
   37a4c:	andeq	r7, r3, r8, ror #22
   37a50:	andeq	r7, r3, r8, ror #22
   37a54:	andeq	r7, r3, r8, ror #22
   37a58:	andeq	r7, r3, r8, ror #22
   37a5c:	andeq	r7, r3, r8, ror #22
   37a60:	andeq	r7, r3, r8, ror #22
   37a64:	andeq	r7, r3, r4, asr ip
   37a68:	andeq	r7, r3, r8, ror #22
   37a6c:	andeq	r7, r3, r8, ror #22
   37a70:	andeq	r8, r3, r4, lsl #7
   37a74:	mvn	r0, #0
   37a78:	mvn	r1, #0
   37a7c:	mov	r2, r5
   37a80:	mov	sl, r3
   37a84:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37a88:	subs	r3, r0, r6
   37a8c:	umull	r4, r2, r6, r5
   37a90:	mov	lr, #0
   37a94:	str	r1, [sp, #20]
   37a98:	sbcs	r3, r1, r7
   37a9c:	movwcc	lr, #1
   37aa0:	mla	ip, r6, sl, r2
   37aa4:	mov	r2, r1
   37aa8:	mov	r2, #0
   37aac:	cmp	lr, #0
   37ab0:	mla	r7, r7, r5, ip
   37ab4:	mvnne	r4, #0
   37ab8:	mvnne	r7, #0
   37abc:	subs	r6, r0, r4
   37ac0:	sbcs	r6, r1, r7
   37ac4:	umull	r3, r6, r4, r5
   37ac8:	movwcc	r2, #1
   37acc:	cmp	r2, #0
   37ad0:	mvnne	r3, #0
   37ad4:	cmp	r2, #0
   37ad8:	str	r6, [sp, #16]
   37adc:	umull	r6, ip, r3, r5
   37ae0:	mla	r1, r3, sl, ip
   37ae4:	ldr	ip, [sp, #16]
   37ae8:	str	r1, [sp, #12]
   37aec:	mla	r4, r4, sl, ip
   37af0:	mla	r4, r7, r5, r4
   37af4:	mvnne	r4, #0
   37af8:	subs	r0, r0, r3
   37afc:	ldr	r0, [sp, #20]
   37b00:	ldr	r7, [sp, #12]
   37b04:	sbcs	r0, r0, r4
   37b08:	mov	r0, #0
   37b0c:	mla	r7, r4, r5, r7
   37b10:	movwcc	r0, #1
   37b14:	cmp	r0, #0
   37b18:	mov	r1, r0
   37b1c:	orr	r0, lr, r2
   37b20:	mvnne	r7, #0
   37b24:	mvnne	r6, #0
   37b28:	b	38174 <__assert_fail@plt+0x262ac>
   37b2c:	mov	r8, r0
   37b30:	cmp	sl, #0
   37b34:	bne	37800 <__assert_fail@plt+0x25938>
   37b38:	b	383c8 <__assert_fail@plt+0x26500>
   37b3c:	cmp	r0, #105	; 0x69
   37b40:	mov	r3, #0
   37b44:	bne	37988 <__assert_fail@plt+0x25ac0>
   37b48:	ldrb	r0, [r1, #2]
   37b4c:	mov	r1, #1
   37b50:	cmp	r0, #66	; 0x42
   37b54:	movweq	r1, #3
   37b58:	str	r1, [sp, #28]
   37b5c:	sub	r0, r4, #66	; 0x42
   37b60:	cmp	r0, #53	; 0x35
   37b64:	bls	37994 <__assert_fail@plt+0x25acc>
   37b68:	ldr	r0, [sp, #36]	; 0x24
   37b6c:	orr	r8, r8, #2
   37b70:	strd	r6, [r0]
   37b74:	mov	r0, r8
   37b78:	sub	sp, fp, #28
   37b7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37b80:	mvn	r0, #0
   37b84:	mvn	r1, #0
   37b88:	mov	r2, r5
   37b8c:	mov	r4, r3
   37b90:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37b94:	subs	r0, r0, r6
   37b98:	mov	r2, #0
   37b9c:	sbcs	r0, r1, r7
   37ba0:	umull	r0, r1, r6, r5
   37ba4:	movwcc	r2, #1
   37ba8:	cmp	r2, #0
   37bac:	mla	r1, r6, r4, r1
   37bb0:	mov	r3, r2
   37bb4:	mvnne	r0, #0
   37bb8:	mla	r7, r7, r5, r1
   37bbc:	mvnne	r7, #0
   37bc0:	mov	r6, r0
   37bc4:	b	383a8 <__assert_fail@plt+0x264e0>
   37bc8:	mvn	r0, #0
   37bcc:	mvn	r1, #0
   37bd0:	mov	r2, r5
   37bd4:	str	r3, [sp, #24]
   37bd8:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37bdc:	subs	r3, r0, r6
   37be0:	mov	ip, r0
   37be4:	umull	r4, r0, r6, r5
   37be8:	mov	sl, #0
   37bec:	sbcs	r3, r1, r7
   37bf0:	mov	r3, #0
   37bf4:	movwcc	r3, #1
   37bf8:	cmp	r3, #0
   37bfc:	str	r0, [sp, #20]
   37c00:	ldr	r0, [sp, #24]
   37c04:	mvnne	r4, #0
   37c08:	cmp	r3, #0
   37c0c:	umull	lr, r2, r4, r5
   37c10:	mla	r2, r4, r0, r2
   37c14:	str	r2, [sp, #16]
   37c18:	ldr	r2, [sp, #20]
   37c1c:	mla	r6, r6, r0, r2
   37c20:	ldr	r0, [sp, #16]
   37c24:	mla	r6, r7, r5, r6
   37c28:	mvnne	r6, #0
   37c2c:	mla	r7, r6, r5, r0
   37c30:	subs	r0, ip, r4
   37c34:	sbcs	r0, r1, r6
   37c38:	movwcc	sl, #1
   37c3c:	cmp	sl, #0
   37c40:	orr	r3, r3, sl
   37c44:	mvnne	lr, #0
   37c48:	mvnne	r7, #0
   37c4c:	mov	r6, lr
   37c50:	b	383a8 <__assert_fail@plt+0x264e0>
   37c54:	mvn	r0, #0
   37c58:	mvn	r1, #0
   37c5c:	mov	r2, r5
   37c60:	mov	sl, r3
   37c64:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37c68:	subs	r3, r0, r6
   37c6c:	mov	ip, r1
   37c70:	umull	r2, lr, r6, r5
   37c74:	str	r0, [sp, #20]
   37c78:	sbcs	r3, r1, r7
   37c7c:	mov	r1, #0
   37c80:	str	ip, [sp, #16]
   37c84:	movwcc	r1, #1
   37c88:	mla	r6, r6, sl, lr
   37c8c:	mov	lr, #0
   37c90:	cmp	r1, #0
   37c94:	mla	r7, r7, r5, r6
   37c98:	mvnne	r2, #0
   37c9c:	cmp	r1, #0
   37ca0:	umull	r3, r4, r2, r5
   37ca4:	mvnne	r7, #0
   37ca8:	mla	r4, r2, sl, r4
   37cac:	subs	r2, r0, r2
   37cb0:	sbcs	r2, ip, r7
   37cb4:	mla	r4, r7, r5, r4
   37cb8:	mov	r2, #0
   37cbc:	movwcc	lr, #1
   37cc0:	cmp	lr, #0
   37cc4:	mvnne	r3, #0
   37cc8:	mvnne	r4, #0
   37ccc:	subs	r7, r0, r3
   37cd0:	mov	r0, r5
   37cd4:	sbcs	r7, ip, r4
   37cd8:	umull	r5, r7, r3, r5
   37cdc:	movwcc	r2, #1
   37ce0:	cmp	r2, #0
   37ce4:	mla	r3, r3, sl, r7
   37ce8:	mvnne	r5, #0
   37cec:	cmp	r2, #0
   37cf0:	mla	r3, r4, r0, r3
   37cf4:	umull	r6, ip, r5, r0
   37cf8:	mvnne	r3, #0
   37cfc:	mla	ip, r5, sl, ip
   37d00:	mla	r7, r3, r0, ip
   37d04:	ldr	r0, [sp, #20]
   37d08:	subs	r0, r0, r5
   37d0c:	ldr	r0, [sp, #16]
   37d10:	sbcs	r0, r0, r3
   37d14:	mov	r0, #0
   37d18:	movwcc	r0, #1
   37d1c:	cmp	r0, #0
   37d20:	mov	r3, r0
   37d24:	orr	r0, r1, lr
   37d28:	orr	r0, r0, r2
   37d2c:	mvnne	r7, #0
   37d30:	mvnne	r6, #0
   37d34:	orr	r3, r0, r3
   37d38:	b	383a8 <__assert_fail@plt+0x264e0>
   37d3c:	mvn	r0, #0
   37d40:	mvn	r1, #0
   37d44:	mov	r2, r5
   37d48:	mov	r4, r3
   37d4c:	str	r3, [sp, #24]
   37d50:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37d54:	umull	r3, r2, r6, r5
   37d58:	mla	r2, r6, r4, r2
   37d5c:	subs	r6, r0, r6
   37d60:	sbcs	r6, r1, r7
   37d64:	mov	r6, #0
   37d68:	mla	r2, r7, r5, r2
   37d6c:	mov	r7, #0
   37d70:	movwcc	r6, #1
   37d74:	cmp	r6, #0
   37d78:	str	r6, [sp, #20]
   37d7c:	mvnne	r3, #0
   37d80:	mvnne	r2, #0
   37d84:	subs	r4, r0, r3
   37d88:	umull	r6, ip, r3, r5
   37d8c:	sbcs	r4, r1, r2
   37d90:	ldr	r4, [sp, #24]
   37d94:	movwcc	r7, #1
   37d98:	cmp	r7, #0
   37d9c:	mov	lr, r7
   37da0:	str	r7, [sp, #16]
   37da4:	mvnne	r6, #0
   37da8:	cmp	lr, #0
   37dac:	mov	lr, #0
   37db0:	umull	sl, r7, r6, r5
   37db4:	mla	r3, r3, r4, ip
   37db8:	mla	r2, r2, r5, r3
   37dbc:	mvnne	r2, #0
   37dc0:	subs	r3, r0, r6
   37dc4:	mla	r7, r6, r4, r7
   37dc8:	mov	r4, r0
   37dcc:	mov	r0, #0
   37dd0:	mla	r7, r2, r5, r7
   37dd4:	sbcs	r2, r1, r2
   37dd8:	mov	r3, r4
   37ddc:	movwcc	r0, #1
   37de0:	str	r3, [sp, #4]
   37de4:	cmp	r0, #0
   37de8:	str	r0, [sp, #12]
   37dec:	mov	r0, r1
   37df0:	mvnne	sl, #0
   37df4:	mvnne	r7, #0
   37df8:	str	r0, [sp, #8]
   37dfc:	subs	r2, r4, sl
   37e00:	ldr	r4, [sp, #24]
   37e04:	sbcs	r2, r1, r7
   37e08:	umull	r6, r2, sl, r5
   37e0c:	movwcc	lr, #1
   37e10:	cmp	lr, #0
   37e14:	mvnne	r6, #0
   37e18:	mla	r2, sl, r4, r2
   37e1c:	cmp	lr, #0
   37e20:	umull	r1, ip, r6, r5
   37e24:	mla	r2, r7, r5, r2
   37e28:	mvnne	r2, #0
   37e2c:	mla	ip, r6, r4, ip
   37e30:	subs	r6, r3, r6
   37e34:	mla	r7, r2, r5, ip
   37e38:	sbcs	r2, r0, r2
   37e3c:	mov	ip, #0
   37e40:	mov	r2, #0
   37e44:	movwcc	ip, #1
   37e48:	cmp	ip, #0
   37e4c:	mvnne	r1, #0
   37e50:	mvnne	r7, #0
   37e54:	subs	r6, r3, r1
   37e58:	ldr	r3, [sp, #24]
   37e5c:	sbcs	r6, r0, r7
   37e60:	umull	r0, sl, r1, r5
   37e64:	movwcc	r2, #1
   37e68:	cmp	r2, #0
   37e6c:	mvnne	r0, #0
   37e70:	mla	r1, r1, r3, sl
   37e74:	cmp	r2, #0
   37e78:	umull	r6, r4, r0, r5
   37e7c:	mla	r1, r7, r5, r1
   37e80:	mvnne	r1, #0
   37e84:	mla	r4, r0, r3, r4
   37e88:	ldr	r3, [sp, #4]
   37e8c:	mla	r7, r1, r5, r4
   37e90:	ldr	r5, [sp, #16]
   37e94:	subs	r0, r3, r0
   37e98:	ldr	r0, [sp, #8]
   37e9c:	sbcs	r0, r0, r1
   37ea0:	mov	r0, #0
   37ea4:	movwcc	r0, #1
   37ea8:	cmp	r0, #0
   37eac:	mov	r1, r0
   37eb0:	ldr	r0, [sp, #20]
   37eb4:	mvnne	r7, #0
   37eb8:	mvnne	r6, #0
   37ebc:	orr	r0, r0, r5
   37ec0:	ldr	r5, [sp, #12]
   37ec4:	orr	r0, r0, r5
   37ec8:	orr	r0, r0, lr
   37ecc:	orr	r0, r0, ip
   37ed0:	orr	r0, r0, r2
   37ed4:	b	38344 <__assert_fail@plt+0x2647c>
   37ed8:	mov	r1, #0
   37edc:	lsl	r2, r7, #10
   37ee0:	lsl	r0, r6, #10
   37ee4:	lsr	r3, r7, #22
   37ee8:	cmp	r1, r7, lsr #22
   37eec:	orr	r2, r2, r6, lsr #22
   37ef0:	mvnne	r0, #0
   37ef4:	movwne	r3, #1
   37ef8:	cmp	r1, r7, lsr #22
   37efc:	b	38374 <__assert_fail@plt+0x264ac>
   37f00:	mvn	r0, #0
   37f04:	mvn	r1, #0
   37f08:	mov	r2, r5
   37f0c:	mov	sl, r3
   37f10:	bl	39cb8 <__assert_fail@plt+0x27df0>
   37f14:	subs	r2, r0, r6
   37f18:	mov	ip, r0
   37f1c:	mov	r0, #0
   37f20:	sbcs	r2, r1, r7
   37f24:	umull	r4, r2, r6, r5
   37f28:	movwcc	r0, #1
   37f2c:	cmp	r0, #0
   37f30:	mla	r2, r6, sl, r2
   37f34:	str	r0, [sp, #20]
   37f38:	mvnne	r4, #0
   37f3c:	cmp	r0, #0
   37f40:	mla	r2, r7, r5, r2
   37f44:	mov	r0, #0
   37f48:	umull	lr, r3, r4, r5
   37f4c:	mvnne	r2, #0
   37f50:	mla	r3, r4, sl, r3
   37f54:	mla	r6, r2, r5, r3
   37f58:	subs	r3, ip, r4
   37f5c:	mov	r3, r1
   37f60:	sbcs	r2, r1, r2
   37f64:	str	r3, [sp, #8]
   37f68:	movwcc	r0, #1
   37f6c:	cmp	r0, #0
   37f70:	str	r0, [sp, #16]
   37f74:	mov	r0, ip
   37f78:	mvnne	lr, #0
   37f7c:	mvnne	r6, #0
   37f80:	str	r0, [sp, #12]
   37f84:	subs	r2, ip, lr
   37f88:	umull	r7, r4, lr, r5
   37f8c:	sbcs	r2, r1, r6
   37f90:	mov	r2, #0
   37f94:	movwcc	r2, #1
   37f98:	mla	r4, lr, sl, r4
   37f9c:	cmp	r2, #0
   37fa0:	mla	r6, r6, r5, r4
   37fa4:	mov	r4, #0
   37fa8:	mvnne	r7, #0
   37fac:	cmp	r2, #0
   37fb0:	umull	r1, ip, r7, r5
   37fb4:	mvnne	r6, #0
   37fb8:	mla	ip, r7, sl, ip
   37fbc:	subs	r7, r0, r7
   37fc0:	sbcs	r7, r3, r6
   37fc4:	mla	lr, r6, r5, ip
   37fc8:	mov	ip, #0
   37fcc:	movwcc	ip, #1
   37fd0:	cmp	ip, #0
   37fd4:	mvnne	r1, #0
   37fd8:	mvnne	lr, #0
   37fdc:	subs	r7, r0, r1
   37fe0:	sbcs	r7, r3, lr
   37fe4:	umull	r0, r7, r1, r5
   37fe8:	movwcc	r4, #1
   37fec:	cmp	r4, #0
   37ff0:	mla	r1, r1, sl, r7
   37ff4:	mvnne	r0, #0
   37ff8:	cmp	r4, #0
   37ffc:	mla	r1, lr, r5, r1
   38000:	umull	r6, r3, r0, r5
   38004:	mvnne	r1, #0
   38008:	mla	r3, r0, sl, r3
   3800c:	mla	r7, r1, r5, r3
   38010:	ldr	r3, [sp, #12]
   38014:	subs	r0, r3, r0
   38018:	ldr	r0, [sp, #8]
   3801c:	ldr	r3, [sp, #16]
   38020:	sbcs	r0, r0, r1
   38024:	mov	r0, #0
   38028:	movwcc	r0, #1
   3802c:	cmp	r0, #0
   38030:	mov	r1, r0
   38034:	ldr	r0, [sp, #20]
   38038:	mvnne	r7, #0
   3803c:	mvnne	r6, #0
   38040:	orr	r0, r0, r3
   38044:	orr	r0, r0, r2
   38048:	orr	r0, r0, ip
   3804c:	orr	r0, r0, r4
   38050:	b	38174 <__assert_fail@plt+0x262ac>
   38054:	mvn	r0, #0
   38058:	mvn	r1, #0
   3805c:	mov	r2, r5
   38060:	mov	sl, r3
   38064:	bl	39cb8 <__assert_fail@plt+0x27df0>
   38068:	umull	r3, r2, r6, r5
   3806c:	mov	lr, r1
   38070:	mov	r1, r0
   38074:	mla	r2, r6, sl, r2
   38078:	subs	r6, r0, r6
   3807c:	mov	r0, #0
   38080:	sbcs	r6, lr, r7
   38084:	mla	r2, r7, r5, r2
   38088:	movwcc	r0, #1
   3808c:	cmp	r0, #0
   38090:	str	r0, [sp, #20]
   38094:	mov	r0, r1
   38098:	mvnne	r3, #0
   3809c:	mvnne	r2, #0
   380a0:	str	r0, [sp, #16]
   380a4:	subs	r4, r1, r3
   380a8:	umull	r7, ip, r3, r5
   380ac:	sbcs	r4, lr, r2
   380b0:	mov	r4, #0
   380b4:	movwcc	r4, #1
   380b8:	mla	r3, r3, sl, ip
   380bc:	mov	ip, #0
   380c0:	cmp	r4, #0
   380c4:	mla	r2, r2, r5, r3
   380c8:	mvnne	r7, #0
   380cc:	cmp	r4, #0
   380d0:	umull	r1, r6, r7, r5
   380d4:	mvnne	r2, #0
   380d8:	mla	r6, r7, sl, r6
   380dc:	mla	r3, r2, r5, r6
   380e0:	subs	r6, r0, r7
   380e4:	sbcs	r2, lr, r2
   380e8:	mov	r2, #0
   380ec:	movwcc	ip, #1
   380f0:	cmp	ip, #0
   380f4:	mvnne	r1, #0
   380f8:	mvnne	r3, #0
   380fc:	subs	r6, r0, r1
   38100:	sbcs	r6, lr, r3
   38104:	umull	r0, r6, r1, r5
   38108:	movwcc	r2, #1
   3810c:	cmp	r2, #0
   38110:	mvnne	r0, #0
   38114:	cmp	r2, #0
   38118:	str	r6, [sp, #12]
   3811c:	umull	r6, r7, r0, r5
   38120:	mla	r7, r0, sl, r7
   38124:	str	r7, [sp, #8]
   38128:	ldr	r7, [sp, #12]
   3812c:	mla	r1, r1, sl, r7
   38130:	mla	r1, r3, r5, r1
   38134:	ldr	r3, [sp, #8]
   38138:	mvnne	r1, #0
   3813c:	mla	r7, r1, r5, r3
   38140:	ldr	r3, [sp, #16]
   38144:	subs	r0, r3, r0
   38148:	sbcs	r0, lr, r1
   3814c:	mov	r0, #0
   38150:	movwcc	r0, #1
   38154:	cmp	r0, #0
   38158:	mov	r1, r0
   3815c:	ldr	r0, [sp, #20]
   38160:	mvnne	r7, #0
   38164:	mvnne	r6, #0
   38168:	orr	r0, r0, r4
   3816c:	orr	r0, r0, ip
   38170:	orr	r0, r0, r2
   38174:	orr	r3, r0, r1
   38178:	b	383a8 <__assert_fail@plt+0x264e0>
   3817c:	mvn	r0, #0
   38180:	mvn	r1, #0
   38184:	mov	r2, r5
   38188:	mov	sl, r3
   3818c:	bl	39cb8 <__assert_fail@plt+0x27df0>
   38190:	mov	ip, r1
   38194:	subs	r1, r0, r6
   38198:	umull	r3, lr, r6, r5
   3819c:	mov	r2, r5
   381a0:	sbcs	r1, ip, r7
   381a4:	mov	r1, #0
   381a8:	str	ip, [sp, #4]
   381ac:	movwcc	r1, #1
   381b0:	mla	r6, r6, sl, lr
   381b4:	cmp	r1, #0
   381b8:	mla	r7, r7, r2, r6
   381bc:	str	r1, [sp, #20]
   381c0:	mvnne	r3, #0
   381c4:	cmp	r1, #0
   381c8:	mov	r1, r0
   381cc:	umull	r4, r5, r3, r5
   381d0:	mvnne	r7, #0
   381d4:	mov	lr, r1
   381d8:	mla	r5, r3, sl, r5
   381dc:	subs	r3, r0, r3
   381e0:	sbcs	r0, ip, r7
   381e4:	mov	r0, #0
   381e8:	mla	r5, r7, r2, r5
   381ec:	movwcc	r0, #1
   381f0:	cmp	r0, #0
   381f4:	str	r0, [sp, #16]
   381f8:	mvnne	r4, #0
   381fc:	mvnne	r5, #0
   38200:	subs	r0, r1, r4
   38204:	mov	r1, #0
   38208:	sbcs	r0, ip, r5
   3820c:	umull	r3, r0, r4, r2
   38210:	movwcc	r1, #1
   38214:	cmp	r1, #0
   38218:	mla	r0, r4, sl, r0
   3821c:	mov	r4, lr
   38220:	str	r1, [sp, #12]
   38224:	mvnne	r3, #0
   38228:	cmp	r1, #0
   3822c:	mla	r0, r5, r2, r0
   38230:	str	r4, [sp]
   38234:	umull	r7, r6, r3, r2
   38238:	mvnne	r0, #0
   3823c:	mla	r6, r3, sl, r6
   38240:	subs	r3, lr, r3
   38244:	mov	r3, #0
   38248:	mla	r5, r0, r2, r6
   3824c:	sbcs	r0, ip, r0
   38250:	mov	r0, #0
   38254:	movwcc	r0, #1
   38258:	cmp	r0, #0
   3825c:	str	r0, [sp, #8]
   38260:	mvnne	r7, #0
   38264:	mvnne	r5, #0
   38268:	subs	r0, lr, r7
   3826c:	sbcs	r0, ip, r5
   38270:	umull	r6, r0, r7, r2
   38274:	movwcc	r3, #1
   38278:	cmp	r3, #0
   3827c:	mla	r7, r7, sl, r0
   38280:	mov	r0, ip
   38284:	mvnne	r6, #0
   38288:	cmp	r3, #0
   3828c:	mla	r7, r5, r2, r7
   38290:	mov	r5, #0
   38294:	umull	r1, lr, r6, r2
   38298:	mvnne	r7, #0
   3829c:	mla	lr, r6, sl, lr
   382a0:	subs	r6, r4, r6
   382a4:	mla	lr, r7, r2, lr
   382a8:	sbcs	r7, ip, r7
   382ac:	mov	ip, #0
   382b0:	movwcc	ip, #1
   382b4:	cmp	ip, #0
   382b8:	mvnne	r1, #0
   382bc:	mvnne	lr, #0
   382c0:	subs	r7, r4, r1
   382c4:	sbcs	r7, r0, lr
   382c8:	umull	r0, r7, r1, r2
   382cc:	movwcc	r5, #1
   382d0:	cmp	r5, #0
   382d4:	mla	r1, r1, sl, r7
   382d8:	mvnne	r0, #0
   382dc:	cmp	r5, #0
   382e0:	mla	r1, lr, r2, r1
   382e4:	umull	r6, r4, r0, r2
   382e8:	mvnne	r1, #0
   382ec:	mla	r4, r0, sl, r4
   382f0:	mla	r7, r1, r2, r4
   382f4:	ldr	r2, [sp]
   382f8:	subs	r0, r2, r0
   382fc:	ldr	r0, [sp, #4]
   38300:	ldr	r2, [sp, #16]
   38304:	sbcs	r0, r0, r1
   38308:	mov	r0, #0
   3830c:	movwcc	r0, #1
   38310:	cmp	r0, #0
   38314:	mov	r1, r0
   38318:	ldr	r0, [sp, #20]
   3831c:	mvnne	r7, #0
   38320:	mvnne	r6, #0
   38324:	orr	r0, r0, r2
   38328:	ldr	r2, [sp, #12]
   3832c:	orr	r0, r0, r2
   38330:	ldr	r2, [sp, #8]
   38334:	orr	r0, r0, r2
   38338:	orr	r0, r0, r3
   3833c:	orr	r0, r0, ip
   38340:	orr	r0, r0, r5
   38344:	orr	r0, r0, r1
   38348:	and	r3, r0, #1
   3834c:	b	383a8 <__assert_fail@plt+0x264e0>
   38350:	mov	r1, #0
   38354:	lsl	r2, r7, #9
   38358:	lsl	r0, r6, #9
   3835c:	lsr	r3, r7, #23
   38360:	cmp	r1, r7, lsr #23
   38364:	orr	r2, r2, r6, lsr #23
   38368:	mvnne	r0, #0
   3836c:	movwne	r3, #1
   38370:	cmp	r1, r7, lsr #23
   38374:	mvnne	r2, #0
   38378:	mov	r6, r0
   3837c:	mov	r7, r2
   38380:	b	383a8 <__assert_fail@plt+0x264e0>
   38384:	lsl	r1, r7, #1
   38388:	cmp	r7, #0
   3838c:	lsl	r0, r6, #1
   38390:	lsr	r3, r7, #31
   38394:	orr	r1, r1, r6, lsr #31
   38398:	mvnmi	r0, #0
   3839c:	mvnmi	r1, #0
   383a0:	mov	r6, r0
   383a4:	mov	r7, r1
   383a8:	ldr	r1, [sp, #32]
   383ac:	ldr	r2, [sp, #28]
   383b0:	orr	r8, r3, r8
   383b4:	add	r0, r1, r2
   383b8:	str	r0, [r9]
   383bc:	ldrb	r0, [r1, r2]
   383c0:	cmp	r0, #0
   383c4:	orrne	r8, r8, #2
   383c8:	ldr	r0, [sp, #36]	; 0x24
   383cc:	strd	r6, [r0]
   383d0:	mov	r0, r8
   383d4:	sub	sp, fp, #28
   383d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   383dc:	movw	r0, #49179	; 0xc01b
   383e0:	movw	r1, #49217	; 0xc041
   383e4:	movw	r3, #49424	; 0xc110
   383e8:	mov	r2, #85	; 0x55
   383ec:	movt	r0, #3
   383f0:	movt	r1, #3
   383f4:	movt	r3, #3
   383f8:	bl	11ec8 <__assert_fail@plt>
   383fc:	clz	r2, r1
   38400:	clz	r3, r0
   38404:	lsr	r2, r2, #5
   38408:	lsr	r3, r3, #5
   3840c:	orrs	r2, r3, r2
   38410:	movwne	r1, #1
   38414:	movwne	r0, #1
   38418:	cmp	r1, #0
   3841c:	beq	3844c <__assert_fail@plt+0x26584>
   38420:	mvn	r2, #-2147483648	; 0x80000000
   38424:	udiv	r2, r2, r1
   38428:	cmp	r2, r0
   3842c:	bcs	3844c <__assert_fail@plt+0x26584>
   38430:	push	{fp, lr}
   38434:	mov	fp, sp
   38438:	bl	11cdc <__errno_location@plt>
   3843c:	mov	r1, #12
   38440:	str	r1, [r0]
   38444:	mov	r0, #0
   38448:	pop	{fp, pc}
   3844c:	b	119dc <calloc@plt>
   38450:	cmp	r0, #0
   38454:	movweq	r0, #1
   38458:	cmn	r0, #1
   3845c:	ble	38464 <__assert_fail@plt+0x2659c>
   38460:	b	11c10 <malloc@plt>
   38464:	push	{fp, lr}
   38468:	mov	fp, sp
   3846c:	bl	11cdc <__errno_location@plt>
   38470:	mov	r1, #12
   38474:	str	r1, [r0]
   38478:	mov	r0, #0
   3847c:	pop	{fp, pc}
   38480:	push	{fp, lr}
   38484:	mov	fp, sp
   38488:	cmp	r0, #0
   3848c:	beq	384a8 <__assert_fail@plt+0x265e0>
   38490:	cmp	r1, #0
   38494:	beq	384b4 <__assert_fail@plt+0x265ec>
   38498:	cmn	r1, #1
   3849c:	ble	384c0 <__assert_fail@plt+0x265f8>
   384a0:	pop	{fp, lr}
   384a4:	b	11b14 <realloc@plt>
   384a8:	mov	r0, r1
   384ac:	pop	{fp, lr}
   384b0:	b	38450 <__assert_fail@plt+0x26588>
   384b4:	bl	17c10 <__assert_fail@plt+0x5d48>
   384b8:	mov	r0, #0
   384bc:	pop	{fp, pc}
   384c0:	bl	11cdc <__errno_location@plt>
   384c4:	mov	r1, #12
   384c8:	str	r1, [r0]
   384cc:	mov	r0, #0
   384d0:	pop	{fp, pc}
   384d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   384d8:	add	fp, sp, #28
   384dc:	sub	sp, sp, #36	; 0x24
   384e0:	sub	sp, sp, #1024	; 0x400
   384e4:	mov	r8, r1
   384e8:	ldrb	r1, [r0]
   384ec:	mov	r4, r0
   384f0:	cmp	r1, #0
   384f4:	beq	385b4 <__assert_fail@plt+0x266ec>
   384f8:	add	r0, sp, #32
   384fc:	mov	r2, #0
   38500:	add	sl, r0, #16
   38504:	mov	r0, #1
   38508:	ldrb	r3, [r8, r2]
   3850c:	cmp	r3, #0
   38510:	uxtbne	r1, r1
   38514:	subne	r1, r1, r3
   38518:	clzne	r1, r1
   3851c:	lsrne	r1, r1, #5
   38520:	andne	r0, r0, r1
   38524:	addne	r1, r4, r2
   38528:	addne	r2, r2, #1
   3852c:	ldrbne	r1, [r1, #1]
   38530:	cmpne	r1, #0
   38534:	bne	38508 <__assert_fail@plt+0x26640>
   38538:	add	r6, r8, r2
   3853c:	mov	r7, r4
   38540:	ldrb	r1, [r6]
   38544:	cmp	r1, #0
   38548:	movwne	r7, #0
   3854c:	tst	r0, #1
   38550:	cmpeq	r1, #0
   38554:	bne	385c4 <__assert_fail@plt+0x266fc>
   38558:	ldrb	r1, [r8]
   3855c:	add	r0, r4, #1
   38560:	sub	r5, r6, r8
   38564:	bl	11cb8 <strchr@plt>
   38568:	mov	r7, r0
   3856c:	cmp	r5, #1
   38570:	cmpne	r7, #0
   38574:	beq	385c4 <__assert_fail@plt+0x266fc>
   38578:	add	r0, r4, r5
   3857c:	sub	r9, r6, r5
   38580:	str	r6, [sp, #20]
   38584:	str	r5, [sp, #28]
   38588:	str	r7, [sp, #24]
   3858c:	subs	r0, r0, r7
   38590:	movwcc	r0, #1
   38594:	cmp	r5, #31
   38598:	bhi	385d0 <__assert_fail@plt+0x26708>
   3859c:	mov	sl, r0
   385a0:	cmp	r5, #3
   385a4:	bcs	38708 <__assert_fail@plt+0x26840>
   385a8:	sub	r6, r5, #1
   385ac:	mov	r5, #1
   385b0:	b	38db4 <__assert_fail@plt+0x26eec>
   385b4:	ldrb	r0, [r8]
   385b8:	cmp	r0, #0
   385bc:	movne	r4, #0
   385c0:	mov	r7, r4
   385c4:	mov	r0, r7
   385c8:	sub	sp, fp, #28
   385cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   385d0:	str	r0, [sp, #8]
   385d4:	rsb	r0, r5, #0
   385d8:	mvn	r1, #0
   385dc:	mov	r2, #1
   385e0:	mov	ip, #1
   385e4:	mov	r3, #1
   385e8:	str	r0, [sp, #4]
   385ec:	mov	r0, #0
   385f0:	b	3860c <__assert_fail@plt+0x26744>
   385f4:	sub	ip, r2, r1
   385f8:	mov	r3, #1
   385fc:	mov	r0, r2
   38600:	add	r2, r3, r0
   38604:	cmp	r2, r5
   38608:	bcs	38664 <__assert_fail@plt+0x2679c>
   3860c:	add	r4, r1, r3
   38610:	ldrb	r7, [r9, r2]
   38614:	ldrb	r4, [r9, r4]
   38618:	cmp	r7, r4
   3861c:	bcc	385f4 <__assert_fail@plt+0x2672c>
   38620:	bne	38644 <__assert_fail@plt+0x2677c>
   38624:	cmp	r3, ip
   38628:	addne	r3, r3, #1
   3862c:	addeq	r0, r0, ip
   38630:	moveq	r3, #1
   38634:	add	r2, r3, r0
   38638:	cmp	r2, r5
   3863c:	bcc	3860c <__assert_fail@plt+0x26744>
   38640:	b	38664 <__assert_fail@plt+0x2679c>
   38644:	add	r2, r0, #1
   38648:	mov	r1, r0
   3864c:	mov	r3, #1
   38650:	mov	ip, #1
   38654:	mov	r0, r2
   38658:	add	r2, r3, r0
   3865c:	cmp	r2, r5
   38660:	bcc	3860c <__assert_fail@plt+0x26744>
   38664:	cmp	r5, #2
   38668:	bcc	38834 <__assert_fail@plt+0x2696c>
   3866c:	mvn	lr, #0
   38670:	mov	r2, #0
   38674:	mov	r3, #1
   38678:	mov	r5, #1
   3867c:	mov	r7, #1
   38680:	b	386a0 <__assert_fail@plt+0x267d8>
   38684:	sub	r5, r3, lr
   38688:	mov	r7, #1
   3868c:	mov	r2, r3
   38690:	ldr	r0, [sp, #28]
   38694:	add	r3, r7, r2
   38698:	cmp	r3, r0
   3869c:	bcs	3883c <__assert_fail@plt+0x26974>
   386a0:	add	r4, lr, r7
   386a4:	ldrb	r0, [r9, r3]
   386a8:	ldrb	r4, [r9, r4]
   386ac:	cmp	r4, r0
   386b0:	bcc	38684 <__assert_fail@plt+0x267bc>
   386b4:	cmp	r0, r4
   386b8:	bne	386e0 <__assert_fail@plt+0x26818>
   386bc:	cmp	r7, r5
   386c0:	addne	r7, r7, #1
   386c4:	addeq	r2, r2, r5
   386c8:	moveq	r7, #1
   386cc:	ldr	r0, [sp, #28]
   386d0:	add	r3, r7, r2
   386d4:	cmp	r3, r0
   386d8:	bcc	386a0 <__assert_fail@plt+0x267d8>
   386dc:	b	3883c <__assert_fail@plt+0x26974>
   386e0:	add	r0, r2, #1
   386e4:	mov	lr, r2
   386e8:	mov	r7, #1
   386ec:	mov	r5, #1
   386f0:	mov	r2, r0
   386f4:	ldr	r0, [sp, #28]
   386f8:	add	r3, r7, r2
   386fc:	cmp	r3, r0
   38700:	bcc	386a0 <__assert_fail@plt+0x267d8>
   38704:	b	3883c <__assert_fail@plt+0x26974>
   38708:	mvn	r1, #0
   3870c:	mov	r0, #0
   38710:	mov	r2, #1
   38714:	mov	ip, #1
   38718:	mov	r3, #1
   3871c:	b	38738 <__assert_fail@plt+0x26870>
   38720:	sub	ip, r2, r1
   38724:	mov	r3, #1
   38728:	mov	r0, r2
   3872c:	add	r2, r3, r0
   38730:	cmp	r2, r5
   38734:	bcs	38790 <__assert_fail@plt+0x268c8>
   38738:	add	r4, r1, r3
   3873c:	ldrb	r7, [r9, r2]
   38740:	ldrb	r4, [r9, r4]
   38744:	cmp	r7, r4
   38748:	bcc	38720 <__assert_fail@plt+0x26858>
   3874c:	bne	38770 <__assert_fail@plt+0x268a8>
   38750:	cmp	r3, ip
   38754:	addne	r3, r3, #1
   38758:	addeq	r0, r0, ip
   3875c:	moveq	r3, #1
   38760:	add	r2, r3, r0
   38764:	cmp	r2, r5
   38768:	bcc	38738 <__assert_fail@plt+0x26870>
   3876c:	b	38790 <__assert_fail@plt+0x268c8>
   38770:	add	r2, r0, #1
   38774:	mov	r1, r0
   38778:	mov	r3, #1
   3877c:	mov	ip, #1
   38780:	mov	r0, r2
   38784:	add	r2, r3, r0
   38788:	cmp	r2, r5
   3878c:	bcc	38738 <__assert_fail@plt+0x26870>
   38790:	cmp	r5, #2
   38794:	bcc	38d98 <__assert_fail@plt+0x26ed0>
   38798:	mvn	lr, #0
   3879c:	mov	r2, #0
   387a0:	mov	r3, #1
   387a4:	mov	r5, #1
   387a8:	mov	r7, #1
   387ac:	b	387cc <__assert_fail@plt+0x26904>
   387b0:	sub	r5, r3, lr
   387b4:	mov	r7, #1
   387b8:	mov	r2, r3
   387bc:	ldr	r0, [sp, #28]
   387c0:	add	r3, r7, r2
   387c4:	cmp	r3, r0
   387c8:	bcs	38da0 <__assert_fail@plt+0x26ed8>
   387cc:	add	r4, lr, r7
   387d0:	ldrb	r0, [r9, r3]
   387d4:	ldrb	r4, [r9, r4]
   387d8:	cmp	r4, r0
   387dc:	bcc	387b0 <__assert_fail@plt+0x268e8>
   387e0:	cmp	r0, r4
   387e4:	bne	3880c <__assert_fail@plt+0x26944>
   387e8:	cmp	r7, r5
   387ec:	addne	r7, r7, #1
   387f0:	addeq	r2, r2, r5
   387f4:	moveq	r7, #1
   387f8:	ldr	r0, [sp, #28]
   387fc:	add	r3, r7, r2
   38800:	cmp	r3, r0
   38804:	bcc	387cc <__assert_fail@plt+0x26904>
   38808:	b	38da0 <__assert_fail@plt+0x26ed8>
   3880c:	add	r0, r2, #1
   38810:	mov	lr, r2
   38814:	mov	r7, #1
   38818:	mov	r5, #1
   3881c:	mov	r2, r0
   38820:	ldr	r0, [sp, #28]
   38824:	add	r3, r7, r2
   38828:	cmp	r3, r0
   3882c:	bcc	387cc <__assert_fail@plt+0x26904>
   38830:	b	38da0 <__assert_fail@plt+0x26ed8>
   38834:	mov	r5, #1
   38838:	mvn	lr, #0
   3883c:	ldr	r2, [sp, #28]
   38840:	add	r3, sp, #32
   38844:	add	r0, sl, #976	; 0x3d0
   38848:	vdup.32	q8, r2
   3884c:	vst1.32	{d16-d17}, [r3]
   38850:	vst1.32	{d16-d17}, [r0]
   38854:	add	r0, sl, #960	; 0x3c0
   38858:	vst1.32	{d16-d17}, [r0]
   3885c:	add	r0, sl, #944	; 0x3b0
   38860:	vst1.32	{d16-d17}, [r0]
   38864:	add	r0, sl, #928	; 0x3a0
   38868:	vst1.32	{d16-d17}, [r0]
   3886c:	add	r0, sl, #912	; 0x390
   38870:	vst1.32	{d16-d17}, [r0]
   38874:	add	r0, sl, #896	; 0x380
   38878:	vst1.32	{d16-d17}, [r0]
   3887c:	add	r0, sl, #880	; 0x370
   38880:	vst1.32	{d16-d17}, [r0]
   38884:	add	r0, sl, #864	; 0x360
   38888:	vst1.32	{d16-d17}, [r0]
   3888c:	add	r0, sl, #848	; 0x350
   38890:	vst1.32	{d16-d17}, [r0]
   38894:	add	r0, sl, #832	; 0x340
   38898:	vst1.32	{d16-d17}, [r0]
   3889c:	add	r0, sl, #816	; 0x330
   388a0:	vst1.32	{d16-d17}, [r0]
   388a4:	add	r0, sl, #800	; 0x320
   388a8:	vst1.32	{d16-d17}, [r0]
   388ac:	add	r0, sl, #784	; 0x310
   388b0:	vst1.32	{d16-d17}, [r0]
   388b4:	add	r0, sl, #768	; 0x300
   388b8:	vst1.32	{d16-d17}, [r0]
   388bc:	add	r0, sl, #752	; 0x2f0
   388c0:	vst1.32	{d16-d17}, [r0]
   388c4:	add	r0, sl, #736	; 0x2e0
   388c8:	vst1.32	{d16-d17}, [r0]
   388cc:	add	r0, sl, #720	; 0x2d0
   388d0:	vst1.32	{d16-d17}, [r0]
   388d4:	add	r0, sl, #704	; 0x2c0
   388d8:	vst1.32	{d16-d17}, [r0]
   388dc:	add	r0, sl, #688	; 0x2b0
   388e0:	vst1.32	{d16-d17}, [r0]
   388e4:	add	r0, sl, #672	; 0x2a0
   388e8:	vst1.32	{d16-d17}, [r0]
   388ec:	add	r0, sl, #656	; 0x290
   388f0:	vst1.32	{d16-d17}, [r0]
   388f4:	add	r0, sl, #640	; 0x280
   388f8:	vst1.32	{d16-d17}, [r0]
   388fc:	add	r0, sl, #624	; 0x270
   38900:	vst1.32	{d16-d17}, [r0]
   38904:	add	r0, sl, #608	; 0x260
   38908:	vst1.32	{d16-d17}, [r0]
   3890c:	add	r0, sl, #592	; 0x250
   38910:	vst1.32	{d16-d17}, [r0]
   38914:	add	r0, sl, #576	; 0x240
   38918:	vst1.32	{d16-d17}, [r0]
   3891c:	add	r0, sl, #560	; 0x230
   38920:	vst1.32	{d16-d17}, [r0]
   38924:	add	r0, sl, #544	; 0x220
   38928:	vst1.32	{d16-d17}, [r0]
   3892c:	add	r0, sl, #528	; 0x210
   38930:	vst1.32	{d16-d17}, [r0]
   38934:	add	r0, sl, #512	; 0x200
   38938:	vst1.32	{d16-d17}, [r0]
   3893c:	add	r0, sl, #496	; 0x1f0
   38940:	vst1.32	{d16-d17}, [r0]
   38944:	add	r0, sl, #480	; 0x1e0
   38948:	vst1.32	{d16-d17}, [r0]
   3894c:	add	r0, sl, #464	; 0x1d0
   38950:	vst1.32	{d16-d17}, [r0]
   38954:	add	r0, sl, #448	; 0x1c0
   38958:	vst1.32	{d16-d17}, [r0]
   3895c:	add	r0, sl, #432	; 0x1b0
   38960:	vst1.32	{d16-d17}, [r0]
   38964:	add	r0, sl, #416	; 0x1a0
   38968:	vst1.32	{d16-d17}, [r0]
   3896c:	add	r0, sl, #400	; 0x190
   38970:	vst1.32	{d16-d17}, [r0]
   38974:	add	r0, sl, #384	; 0x180
   38978:	vst1.32	{d16-d17}, [r0]
   3897c:	add	r0, sl, #368	; 0x170
   38980:	vst1.32	{d16-d17}, [r0]
   38984:	add	r0, sl, #352	; 0x160
   38988:	vst1.32	{d16-d17}, [r0]
   3898c:	add	r0, sl, #336	; 0x150
   38990:	vst1.32	{d16-d17}, [r0]
   38994:	add	r0, sl, #320	; 0x140
   38998:	vst1.32	{d16-d17}, [r0]
   3899c:	add	r0, sl, #304	; 0x130
   389a0:	vst1.32	{d16-d17}, [r0]
   389a4:	add	r0, sl, #288	; 0x120
   389a8:	vst1.32	{d16-d17}, [r0]
   389ac:	add	r0, sl, #272	; 0x110
   389b0:	vst1.32	{d16-d17}, [r0]
   389b4:	add	r0, sl, #256	; 0x100
   389b8:	vst1.32	{d16-d17}, [r0]
   389bc:	add	r0, sl, #240	; 0xf0
   389c0:	vst1.32	{d16-d17}, [r0]
   389c4:	add	r0, sl, #224	; 0xe0
   389c8:	vst1.32	{d16-d17}, [r0]
   389cc:	add	r0, sl, #208	; 0xd0
   389d0:	vst1.32	{d16-d17}, [r0]
   389d4:	add	r0, sl, #192	; 0xc0
   389d8:	vst1.32	{d16-d17}, [r0]
   389dc:	add	r0, sl, #176	; 0xb0
   389e0:	vst1.32	{d16-d17}, [r0]
   389e4:	add	r0, sl, #160	; 0xa0
   389e8:	vst1.32	{d16-d17}, [r0]
   389ec:	add	r0, sl, #144	; 0x90
   389f0:	vst1.32	{d16-d17}, [r0]
   389f4:	add	r0, sl, #128	; 0x80
   389f8:	vst1.32	{d16-d17}, [r0]
   389fc:	add	r0, sl, #112	; 0x70
   38a00:	vst1.32	{d16-d17}, [r0]
   38a04:	add	r0, sl, #96	; 0x60
   38a08:	vst1.32	{d16-d17}, [r0]
   38a0c:	add	r0, sl, #80	; 0x50
   38a10:	vst1.32	{d16-d17}, [r0]
   38a14:	add	r0, sl, #64	; 0x40
   38a18:	vst1.32	{d16-d17}, [r0]
   38a1c:	add	r0, sl, #48	; 0x30
   38a20:	vst1.32	{d16-d17}, [r0]
   38a24:	add	r0, sl, #32
   38a28:	vst1.32	{d16-d17}, [r0]
   38a2c:	add	r0, sl, #16
   38a30:	vst1.32	{d16-d17}, [r0]
   38a34:	mov	r0, #992	; 0x3e0
   38a38:	vst1.32	{d16-d17}, [sl], r0
   38a3c:	add	r0, r1, #1
   38a40:	add	r1, lr, #1
   38a44:	cmp	r1, r0
   38a48:	vst1.32	{d16-d17}, [sl]
   38a4c:	movcc	r5, ip
   38a50:	movcc	r1, r0
   38a54:	cmp	r2, #0
   38a58:	str	r1, [sp, #16]
   38a5c:	str	r5, [sp, #12]
   38a60:	beq	38ad4 <__assert_fail@plt+0x26c0c>
   38a64:	mov	r6, r3
   38a68:	ldr	r3, [sp, #20]
   38a6c:	mov	lr, r2
   38a70:	and	r0, r2, #1
   38a74:	mvn	r2, r8
   38a78:	mov	r1, #0
   38a7c:	cmn	r2, r3
   38a80:	beq	38ab8 <__assert_fail@plt+0x26bf0>
   38a84:	sub	r2, lr, r0
   38a88:	sub	r3, lr, #2
   38a8c:	mov	r1, #0
   38a90:	mov	r5, r9
   38a94:	add	r4, r3, #1
   38a98:	ldrb	r7, [r5, r1]!
   38a9c:	add	r1, r1, #2
   38aa0:	cmp	r2, r1
   38aa4:	str	r4, [r6, r7, lsl #2]
   38aa8:	ldrb	r7, [r5, #1]
   38aac:	str	r3, [r6, r7, lsl #2]
   38ab0:	sub	r3, r3, #2
   38ab4:	bne	38a90 <__assert_fail@plt+0x26bc8>
   38ab8:	ldr	r5, [sp, #12]
   38abc:	cmp	r0, #0
   38ac0:	beq	38ad4 <__assert_fail@plt+0x26c0c>
   38ac4:	ldrb	r0, [r9, r1]
   38ac8:	mvn	r1, r1
   38acc:	add	r1, lr, r1
   38ad0:	str	r1, [r6, r0, lsl #2]
   38ad4:	ldr	r6, [sp, #16]
   38ad8:	add	r1, r9, r5
   38adc:	mov	r0, r9
   38ae0:	mov	r2, r6
   38ae4:	bl	11ca0 <bcmp@plt>
   38ae8:	cmp	r0, #0
   38aec:	beq	38c38 <__assert_fail@plt+0x26d70>
   38af0:	ldr	r0, [sp, #24]
   38af4:	ldr	r1, [sp, #8]
   38af8:	ldr	r4, [sp, #28]
   38afc:	mov	r7, #0
   38b00:	add	r0, r0, r1
   38b04:	sub	r2, r4, r1
   38b08:	mov	r1, #0
   38b0c:	bl	11d48 <memchr@plt>
   38b10:	sub	r1, r4, r6
   38b14:	cmp	r6, r1
   38b18:	movcs	r1, r6
   38b1c:	cmp	r4, #0
   38b20:	beq	385c4 <__assert_fail@plt+0x266fc>
   38b24:	cmp	r0, #0
   38b28:	str	r1, [sp, #12]
   38b2c:	bne	385c4 <__assert_fail@plt+0x266fc>
   38b30:	ldr	r2, [sp, #16]
   38b34:	sub	r0, r4, #1
   38b38:	cmp	r2, r0
   38b3c:	bcs	38fec <__assert_fail@plt+0x27124>
   38b40:	ldr	r0, [sp, #24]
   38b44:	ldr	r1, [sp, #20]
   38b48:	mov	r5, #0
   38b4c:	add	r0, r0, r2
   38b50:	str	r0, [sp, #8]
   38b54:	ldr	r0, [sp, #4]
   38b58:	add	r0, r1, r0
   38b5c:	add	sl, r0, r2
   38b60:	sub	r0, r8, r1
   38b64:	mov	r1, r4
   38b68:	add	r0, r0, r2
   38b6c:	add	r6, r0, #1
   38b70:	rsb	r0, r2, #1
   38b74:	str	r0, [sp, #20]
   38b78:	ldr	r0, [sp, #24]
   38b7c:	add	r3, sp, #32
   38b80:	add	r0, r1, r0
   38b84:	ldrb	r2, [r0, #-1]
   38b88:	ldr	r2, [r3, r2, lsl #2]
   38b8c:	cmp	r2, #0
   38b90:	beq	38b9c <__assert_fail@plt+0x26cd4>
   38b94:	add	r5, r2, r5
   38b98:	b	38c08 <__assert_fail@plt+0x26d40>
   38b9c:	ldr	r2, [sp, #8]
   38ba0:	mov	ip, r5
   38ba4:	add	r3, r2, r5
   38ba8:	mov	r2, #0
   38bac:	ldrb	r7, [r3, -r2]
   38bb0:	ldrb	r5, [sl, -r2]
   38bb4:	cmp	r5, r7
   38bb8:	bne	38bfc <__assert_fail@plt+0x26d34>
   38bbc:	sub	r2, r2, #1
   38bc0:	cmp	r6, r2
   38bc4:	bne	38bac <__assert_fail@plt+0x26ce4>
   38bc8:	ldr	r5, [sp, #24]
   38bcc:	ldr	r3, [sp, #20]
   38bd0:	add	r2, r5, ip
   38bd4:	cmp	r3, #1
   38bd8:	beq	39080 <__assert_fail@plt+0x271b8>
   38bdc:	ldrb	r7, [r2, -r3]
   38be0:	ldrb	r5, [r9, -r3]
   38be4:	add	r3, r3, #1
   38be8:	cmp	r5, r7
   38bec:	ldr	r5, [sp, #24]
   38bf0:	beq	38bd4 <__assert_fail@plt+0x26d0c>
   38bf4:	ldr	r2, [sp, #12]
   38bf8:	b	38c00 <__assert_fail@plt+0x26d38>
   38bfc:	rsb	r2, r2, #0
   38c00:	add	r2, ip, r2
   38c04:	add	r5, r2, #1
   38c08:	add	r8, r5, r4
   38c0c:	mov	r7, #0
   38c10:	sub	r2, r8, r1
   38c14:	mov	r1, #0
   38c18:	bl	11d48 <memchr@plt>
   38c1c:	cmp	r8, #0
   38c20:	beq	385c4 <__assert_fail@plt+0x266fc>
   38c24:	ldr	r4, [sp, #28]
   38c28:	cmp	r0, #0
   38c2c:	mov	r1, r8
   38c30:	beq	38b78 <__assert_fail@plt+0x26cb0>
   38c34:	b	385c4 <__assert_fail@plt+0x266fc>
   38c38:	ldr	r0, [sp, #24]
   38c3c:	ldr	r1, [sp, #8]
   38c40:	ldr	r4, [sp, #28]
   38c44:	mov	r7, #0
   38c48:	add	r0, r0, r1
   38c4c:	sub	r2, r4, r1
   38c50:	mov	r1, #0
   38c54:	bl	11d48 <memchr@plt>
   38c58:	cmp	r4, #0
   38c5c:	beq	385c4 <__assert_fail@plt+0x266fc>
   38c60:	cmp	r0, #0
   38c64:	bne	385c4 <__assert_fail@plt+0x266fc>
   38c68:	sub	r0, r4, r5
   38c6c:	mov	lr, r4
   38c70:	sub	r8, r4, #1
   38c74:	mov	r4, #0
   38c78:	mov	r6, #0
   38c7c:	str	r0, [sp, #20]
   38c80:	ldr	r0, [sp, #16]
   38c84:	mov	ip, lr
   38c88:	sub	r1, r0, #1
   38c8c:	rsb	r0, r0, #1
   38c90:	str	r1, [sp, #8]
   38c94:	str	r0, [sp, #4]
   38c98:	ldr	r0, [sp, #24]
   38c9c:	add	r1, sp, #32
   38ca0:	add	r0, ip, r0
   38ca4:	ldrb	r2, [r0, #-1]
   38ca8:	ldr	r3, [r1, r2, lsl #2]
   38cac:	cmp	r3, #0
   38cb0:	beq	38cd4 <__assert_fail@plt+0x26e0c>
   38cb4:	ldr	r1, [sp, #20]
   38cb8:	cmp	r3, r5
   38cbc:	mov	r2, r3
   38cc0:	movcc	r2, r1
   38cc4:	cmp	r4, #0
   38cc8:	mov	r4, #0
   38ccc:	moveq	r2, r3
   38cd0:	b	38d64 <__assert_fail@plt+0x26e9c>
   38cd4:	ldr	r2, [sp, #16]
   38cd8:	cmp	r2, r4
   38cdc:	movcc	r2, r4
   38ce0:	cmp	r2, r8
   38ce4:	bcs	38d0c <__assert_fail@plt+0x26e44>
   38ce8:	ldr	r1, [sp, #24]
   38cec:	add	r3, r1, r6
   38cf0:	ldrb	r7, [r3, r2]
   38cf4:	ldrb	r5, [r9, r2]
   38cf8:	cmp	r5, r7
   38cfc:	bne	38d54 <__assert_fail@plt+0x26e8c>
   38d00:	add	r2, r2, #1
   38d04:	cmp	r2, r8
   38d08:	bcc	38cf0 <__assert_fail@plt+0x26e28>
   38d0c:	ldr	r1, [sp, #24]
   38d10:	ldr	r2, [sp, #8]
   38d14:	add	r7, r1, r6
   38d18:	add	r3, r2, #1
   38d1c:	cmp	r4, r3
   38d20:	bcs	38d38 <__assert_fail@plt+0x26e70>
   38d24:	ldrb	r5, [r7, r2]
   38d28:	ldrb	r1, [r9, r2]
   38d2c:	sub	r2, r2, #1
   38d30:	cmp	r1, r5
   38d34:	beq	38d18 <__assert_fail@plt+0x26e50>
   38d38:	ldr	r5, [sp, #12]
   38d3c:	add	r1, r4, #1
   38d40:	ldr	r4, [sp, #20]
   38d44:	cmp	r3, r1
   38d48:	mov	r2, r5
   38d4c:	bcs	38d64 <__assert_fail@plt+0x26e9c>
   38d50:	b	385c4 <__assert_fail@plt+0x266fc>
   38d54:	ldr	r1, [sp, #4]
   38d58:	ldr	r5, [sp, #12]
   38d5c:	mov	r4, #0
   38d60:	add	r2, r1, r2
   38d64:	add	r6, r2, r6
   38d68:	mov	r1, #0
   38d6c:	mov	r7, #0
   38d70:	add	sl, r6, lr
   38d74:	sub	r2, sl, ip
   38d78:	bl	11d48 <memchr@plt>
   38d7c:	cmp	sl, #0
   38d80:	beq	385c4 <__assert_fail@plt+0x266fc>
   38d84:	ldr	lr, [sp, #28]
   38d88:	cmp	r0, #0
   38d8c:	mov	ip, sl
   38d90:	beq	38c98 <__assert_fail@plt+0x26dd0>
   38d94:	b	385c4 <__assert_fail@plt+0x266fc>
   38d98:	mov	r5, #1
   38d9c:	mvn	lr, #0
   38da0:	add	r0, r1, #1
   38da4:	add	r6, lr, #1
   38da8:	cmp	r6, r0
   38dac:	movcc	r5, ip
   38db0:	movcc	r6, r0
   38db4:	add	r1, r9, r5
   38db8:	mov	r0, r9
   38dbc:	mov	r2, r6
   38dc0:	bl	11ca0 <bcmp@plt>
   38dc4:	cmp	r0, #0
   38dc8:	str	r6, [sp, #20]
   38dcc:	beq	38ed0 <__assert_fail@plt+0x27008>
   38dd0:	ldr	r0, [sp, #24]
   38dd4:	ldr	r5, [sp, #28]
   38dd8:	mov	r1, #0
   38ddc:	mov	r7, #0
   38de0:	add	r0, r0, sl
   38de4:	sub	r2, r5, sl
   38de8:	bl	11d48 <memchr@plt>
   38dec:	sub	r4, r5, r6
   38df0:	cmp	r6, r4
   38df4:	movcc	r6, r4
   38df8:	cmp	r5, #0
   38dfc:	beq	385c4 <__assert_fail@plt+0x266fc>
   38e00:	ldr	ip, [sp, #24]
   38e04:	cmp	r0, #0
   38e08:	bne	385c4 <__assert_fail@plt+0x266fc>
   38e0c:	ldr	r0, [sp, #20]
   38e10:	mov	lr, r5
   38e14:	cmp	r5, r0
   38e18:	bls	39090 <__assert_fail@plt+0x271c8>
   38e1c:	add	r1, ip, r0
   38e20:	add	sl, r0, r8
   38e24:	rsb	r0, r0, #1
   38e28:	mov	r5, #0
   38e2c:	str	r6, [sp, #20]
   38e30:	str	r1, [sp, #16]
   38e34:	mov	r1, lr
   38e38:	str	r0, [sp, #12]
   38e3c:	ldr	r0, [sp, #16]
   38e40:	mov	r2, #0
   38e44:	add	r0, r0, r5
   38e48:	ldrb	r3, [r0, r2]
   38e4c:	ldrb	r7, [sl, r2]
   38e50:	cmp	r7, r3
   38e54:	bne	38e8c <__assert_fail@plt+0x26fc4>
   38e58:	add	r2, r2, #1
   38e5c:	cmp	r4, r2
   38e60:	bne	38e48 <__assert_fail@plt+0x26f80>
   38e64:	ldr	r2, [sp, #12]
   38e68:	add	r0, ip, r5
   38e6c:	cmp	r2, #1
   38e70:	beq	39120 <__assert_fail@plt+0x27258>
   38e74:	ldrb	r3, [r0, -r2]
   38e78:	ldrb	r7, [r9, -r2]
   38e7c:	add	r2, r2, #1
   38e80:	cmp	r7, r3
   38e84:	beq	38e6c <__assert_fail@plt+0x26fa4>
   38e88:	mov	r2, r6
   38e8c:	add	r2, r5, r2
   38e90:	add	r0, ip, r1
   38e94:	mov	r7, #0
   38e98:	add	r2, r2, #1
   38e9c:	add	r8, r2, lr
   38ea0:	mov	r5, r2
   38ea4:	sub	r2, r8, r1
   38ea8:	mov	r1, #0
   38eac:	bl	11d48 <memchr@plt>
   38eb0:	cmp	r0, #0
   38eb4:	bne	385c4 <__assert_fail@plt+0x266fc>
   38eb8:	add	lr, sp, #20
   38ebc:	cmp	r8, #0
   38ec0:	mov	r1, r8
   38ec4:	ldm	lr, {r6, ip, lr}
   38ec8:	bne	38e3c <__assert_fail@plt+0x26f74>
   38ecc:	b	385c4 <__assert_fail@plt+0x266fc>
   38ed0:	ldr	r0, [sp, #24]
   38ed4:	ldr	r4, [sp, #28]
   38ed8:	mov	r1, #0
   38edc:	mov	r7, #0
   38ee0:	add	r0, r0, sl
   38ee4:	sub	r2, r4, sl
   38ee8:	bl	11d48 <memchr@plt>
   38eec:	cmp	r4, #0
   38ef0:	beq	385c4 <__assert_fail@plt+0x266fc>
   38ef4:	mov	r8, r5
   38ef8:	ldr	r5, [sp, #24]
   38efc:	cmp	r0, #0
   38f00:	bne	385c4 <__assert_fail@plt+0x266fc>
   38f04:	sub	r0, r4, r8
   38f08:	mov	r1, r4
   38f0c:	mov	r6, #0
   38f10:	mov	ip, r4
   38f14:	mov	sl, #0
   38f18:	str	r0, [sp, #16]
   38f1c:	ldr	r0, [sp, #20]
   38f20:	sub	r2, r0, #1
   38f24:	rsb	r0, r0, #1
   38f28:	str	r2, [sp, #12]
   38f2c:	str	r0, [sp, #8]
   38f30:	ldr	r0, [sp, #20]
   38f34:	cmp	r0, r6
   38f38:	movcc	r0, r6
   38f3c:	cmp	r0, r1
   38f40:	bcs	38f64 <__assert_fail@plt+0x2709c>
   38f44:	add	r2, r5, sl
   38f48:	ldrb	r3, [r2, r0]
   38f4c:	ldrb	r7, [r9, r0]
   38f50:	cmp	r7, r3
   38f54:	bne	38fa4 <__assert_fail@plt+0x270dc>
   38f58:	add	r0, r0, #1
   38f5c:	cmp	r0, r1
   38f60:	bcc	38f48 <__assert_fail@plt+0x27080>
   38f64:	ldr	r0, [sp, #12]
   38f68:	add	r7, r5, sl
   38f6c:	add	r2, r0, #1
   38f70:	cmp	r6, r2
   38f74:	bcs	38f8c <__assert_fail@plt+0x270c4>
   38f78:	ldrb	r3, [r7, r0]
   38f7c:	ldrb	r4, [r9, r0]
   38f80:	sub	r0, r0, #1
   38f84:	cmp	r4, r3
   38f88:	beq	38f6c <__assert_fail@plt+0x270a4>
   38f8c:	add	r0, r6, #1
   38f90:	ldr	r6, [sp, #16]
   38f94:	cmp	r2, r0
   38f98:	mov	r2, r8
   38f9c:	bcs	38fb0 <__assert_fail@plt+0x270e8>
   38fa0:	b	385c4 <__assert_fail@plt+0x266fc>
   38fa4:	ldr	r2, [sp, #8]
   38fa8:	mov	r6, #0
   38fac:	add	r2, r2, r0
   38fb0:	add	sl, r2, sl
   38fb4:	add	r0, r5, ip
   38fb8:	mov	r7, #0
   38fbc:	add	r4, sl, r1
   38fc0:	mov	r1, #0
   38fc4:	sub	r2, r4, ip
   38fc8:	bl	11d48 <memchr@plt>
   38fcc:	cmp	r4, #0
   38fd0:	beq	385c4 <__assert_fail@plt+0x266fc>
   38fd4:	ldr	r1, [sp, #28]
   38fd8:	ldr	r5, [sp, #24]
   38fdc:	cmp	r0, #0
   38fe0:	mov	ip, r4
   38fe4:	beq	38f30 <__assert_fail@plt+0x27068>
   38fe8:	b	385c4 <__assert_fail@plt+0x266fc>
   38fec:	ldr	r0, [sp, #12]
   38ff0:	rsb	sl, r2, #1
   38ff4:	mov	r5, #0
   38ff8:	mov	r1, r4
   38ffc:	add	r8, r0, #1
   39000:	mov	ip, r5
   39004:	ldr	r5, [sp, #24]
   39008:	add	r3, sp, #32
   3900c:	add	r0, r1, r5
   39010:	ldrb	r2, [r0, #-1]
   39014:	ldr	r2, [r3, r2, lsl #2]
   39018:	cmp	r2, #0
   3901c:	bne	39048 <__assert_fail@plt+0x27180>
   39020:	add	r2, r5, ip
   39024:	mov	r3, sl
   39028:	cmp	r3, #1
   3902c:	beq	39080 <__assert_fail@plt+0x271b8>
   39030:	ldrb	r7, [r2, -r3]
   39034:	ldrb	r6, [r9, -r3]
   39038:	add	r3, r3, #1
   3903c:	cmp	r6, r7
   39040:	beq	39028 <__assert_fail@plt+0x27160>
   39044:	mov	r2, r8
   39048:	mov	r5, ip
   3904c:	add	r5, r2, ip
   39050:	mov	r7, #0
   39054:	add	r6, r5, r4
   39058:	sub	r2, r6, r1
   3905c:	mov	r1, #0
   39060:	bl	11d48 <memchr@plt>
   39064:	cmp	r6, #0
   39068:	beq	385c4 <__assert_fail@plt+0x266fc>
   3906c:	ldr	r4, [sp, #28]
   39070:	cmp	r0, #0
   39074:	mov	r1, r6
   39078:	beq	39000 <__assert_fail@plt+0x27138>
   3907c:	b	385c4 <__assert_fail@plt+0x266fc>
   39080:	add	r7, r5, ip
   39084:	mov	r0, r7
   39088:	sub	sp, fp, #28
   3908c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39090:	add	r1, r6, #1
   39094:	rsb	r0, r0, #1
   39098:	mov	r5, #0
   3909c:	mov	r4, ip
   390a0:	mov	sl, lr
   390a4:	mov	r7, #0
   390a8:	str	r1, [sp, #20]
   390ac:	mov	r1, r0
   390b0:	cmp	r1, #1
   390b4:	beq	39120 <__assert_fail@plt+0x27258>
   390b8:	ldrb	r2, [r4, -r1]
   390bc:	ldrb	r3, [r9, -r1]
   390c0:	add	r1, r1, #1
   390c4:	cmp	r3, r2
   390c8:	beq	390b0 <__assert_fail@plt+0x271e8>
   390cc:	str	r0, [sp, #16]
   390d0:	ldr	r0, [sp, #20]
   390d4:	mov	r1, #0
   390d8:	add	r5, r0, r5
   390dc:	mov	r6, r5
   390e0:	add	r8, r5, lr
   390e4:	mov	r5, r0
   390e8:	add	r0, ip, sl
   390ec:	mov	r2, r5
   390f0:	bl	11d48 <memchr@plt>
   390f4:	cmp	r8, #0
   390f8:	beq	385c4 <__assert_fail@plt+0x266fc>
   390fc:	cmp	r0, #0
   39100:	ldr	lr, [sp, #28]
   39104:	ldr	ip, [sp, #24]
   39108:	ldr	r0, [sp, #16]
   3910c:	add	r4, r4, r5
   39110:	mov	sl, r8
   39114:	mov	r5, r6
   39118:	beq	390ac <__assert_fail@plt+0x271e4>
   3911c:	b	385c4 <__assert_fail@plt+0x266fc>
   39120:	add	r7, ip, r5
   39124:	mov	r0, r7
   39128:	sub	sp, fp, #28
   3912c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39130:	push	{r4, r5, r6, sl, fp, lr}
   39134:	add	fp, sp, #16
   39138:	mov	r4, r0
   3913c:	bl	11bbc <__fpending@plt>
   39140:	ldr	r6, [r4]
   39144:	mov	r5, r0
   39148:	mov	r0, r4
   3914c:	bl	16070 <__assert_fail@plt+0x41a8>
   39150:	tst	r6, #32
   39154:	bne	3918c <__assert_fail@plt+0x272c4>
   39158:	cmp	r0, #0
   3915c:	mov	r4, r0
   39160:	mvnne	r4, #0
   39164:	cmp	r5, #0
   39168:	bne	39198 <__assert_fail@plt+0x272d0>
   3916c:	cmp	r0, #0
   39170:	beq	39198 <__assert_fail@plt+0x272d0>
   39174:	bl	11cdc <__errno_location@plt>
   39178:	ldr	r0, [r0]
   3917c:	subs	r4, r0, #9
   39180:	mvnne	r4, #0
   39184:	mov	r0, r4
   39188:	pop	{r4, r5, r6, sl, fp, pc}
   3918c:	mvn	r4, #0
   39190:	cmp	r0, #0
   39194:	beq	391a0 <__assert_fail@plt+0x272d8>
   39198:	mov	r0, r4
   3919c:	pop	{r4, r5, r6, sl, fp, pc}
   391a0:	bl	11cdc <__errno_location@plt>
   391a4:	mov	r1, #0
   391a8:	str	r1, [r0]
   391ac:	mov	r0, r4
   391b0:	pop	{r4, r5, r6, sl, fp, pc}
   391b4:	movw	r2, #62998	; 0xf616
   391b8:	mov	r1, #0
   391bc:	movt	r2, #149	; 0x95
   391c0:	str	r1, [r0, #16]
   391c4:	str	r1, [r0, #20]
   391c8:	str	r2, [r0, #24]
   391cc:	bx	lr
   391d0:	push	{r4, r5, r6, r7, r9, sl, fp, lr}
   391d4:	add	fp, sp, #24
   391d8:	ldr	r2, [r0, #24]
   391dc:	movw	r3, #62998	; 0xf616
   391e0:	movt	r3, #149	; 0x95
   391e4:	cmp	r2, r3
   391e8:	bne	39284 <__assert_fail@plt+0x273bc>
   391ec:	add	r3, r0, #16
   391f0:	add	ip, r0, #8
   391f4:	ldrd	r4, [r3]
   391f8:	orrs	r2, r4, r5
   391fc:	beq	39238 <__assert_fail@plt+0x27370>
   39200:	ldr	r6, [r1, #96]	; 0x60
   39204:	ldr	r9, [r1, #100]	; 0x64
   39208:	ldm	r0, {r2, r7}
   3920c:	eor	r7, r9, r7
   39210:	eor	r2, r6, r2
   39214:	orrs	r2, r2, r7
   39218:	bne	39238 <__assert_fail@plt+0x27370>
   3921c:	ldm	ip, {r2, r7}
   39220:	ldm	r1, {r6, r9}
   39224:	eor	r7, r9, r7
   39228:	eor	r2, r6, r2
   3922c:	orrs	r2, r2, r7
   39230:	mov	r2, #1
   39234:	beq	39270 <__assert_fail@plt+0x273a8>
   39238:	adds	r6, r4, #1
   3923c:	adc	r7, r5, #0
   39240:	and	r2, r6, r4
   39244:	strd	r6, [r3]
   39248:	and	r3, r7, r5
   3924c:	orrs	r2, r2, r3
   39250:	mov	r2, #0
   39254:	bne	39270 <__assert_fail@plt+0x273a8>
   39258:	orrs	r3, r6, r7
   3925c:	beq	39278 <__assert_fail@plt+0x273b0>
   39260:	ldrd	r4, [r1]
   39264:	strd	r4, [ip]
   39268:	ldrd	r4, [r1, #96]	; 0x60
   3926c:	strd	r4, [r0]
   39270:	mov	r0, r2
   39274:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   39278:	mov	r2, #1
   3927c:	mov	r0, r2
   39280:	pop	{r4, r5, r6, r7, r9, sl, fp, pc}
   39284:	movw	r0, #49503	; 0xc15f
   39288:	movw	r1, #49527	; 0xc177
   3928c:	movw	r3, #49545	; 0xc189
   39290:	mov	r2, #60	; 0x3c
   39294:	movt	r0, #3
   39298:	movt	r1, #3
   3929c:	movt	r3, #3
   392a0:	bl	11ec8 <__assert_fail@plt>
   392a4:	push	{r4, r5, r6, r7, fp, lr}
   392a8:	add	fp, sp, #16
   392ac:	mov	r4, r0
   392b0:	ldr	r0, [r0, #4]
   392b4:	mov	r5, r1
   392b8:	cmp	r0, r1
   392bc:	bcs	392f0 <__assert_fail@plt+0x27428>
   392c0:	mov	r6, r3
   392c4:	cmp	r3, #0
   392c8:	beq	392fc <__assert_fail@plt+0x27434>
   392cc:	mvn	r0, #0
   392d0:	udiv	r0, r0, r6
   392d4:	cmp	r0, r5
   392d8:	bcs	392fc <__assert_fail@plt+0x27434>
   392dc:	bl	11cdc <__errno_location@plt>
   392e0:	mov	r1, #12
   392e4:	str	r1, [r0]
   392e8:	mov	r0, #0
   392ec:	pop	{r4, r5, r6, r7, fp, pc}
   392f0:	mov	r0, #1
   392f4:	str	r5, [r4]
   392f8:	pop	{r4, r5, r6, r7, fp, pc}
   392fc:	ldr	r0, [r4, #8]
   39300:	mul	r1, r6, r5
   39304:	cmp	r0, r2
   39308:	beq	39320 <__assert_fail@plt+0x27458>
   3930c:	bl	38480 <__assert_fail@plt+0x265b8>
   39310:	mov	r7, r0
   39314:	cmp	r0, #0
   39318:	bne	39350 <__assert_fail@plt+0x27488>
   3931c:	b	39360 <__assert_fail@plt+0x27498>
   39320:	mov	r0, r1
   39324:	bl	38450 <__assert_fail@plt+0x26588>
   39328:	cmp	r0, #0
   3932c:	beq	39360 <__assert_fail@plt+0x27498>
   39330:	ldr	r1, [r4, #8]
   39334:	mov	r7, r0
   39338:	cmp	r1, #0
   3933c:	beq	39350 <__assert_fail@plt+0x27488>
   39340:	ldr	r0, [r4]
   39344:	mul	r2, r0, r6
   39348:	mov	r0, r7
   3934c:	bl	11ab4 <memcpy@plt>
   39350:	mov	r0, #1
   39354:	str	r5, [r4]
   39358:	stmib	r4, {r5, r7}
   3935c:	pop	{r4, r5, r6, r7, fp, pc}
   39360:	mov	r0, #0
   39364:	pop	{r4, r5, r6, r7, fp, pc}
   39368:	sub	sp, sp, #8
   3936c:	push	{r4, r5, r6, r7, fp, lr}
   39370:	add	fp, sp, #16
   39374:	sub	sp, sp, #8
   39378:	mov	r5, r0
   3937c:	add	r0, fp, #8
   39380:	cmp	r1, #11
   39384:	str	r2, [fp, #8]
   39388:	str	r3, [fp, #12]
   3938c:	str	r0, [sp, #4]
   39390:	bhi	393cc <__assert_fail@plt+0x27504>
   39394:	mov	r0, #1
   39398:	movw	r2, #1300	; 0x514
   3939c:	tst	r2, r0, lsl r1
   393a0:	bne	3948c <__assert_fail@plt+0x275c4>
   393a4:	movw	r2, #2570	; 0xa0a
   393a8:	tst	r2, r0, lsl r1
   393ac:	bne	393f4 <__assert_fail@plt+0x2752c>
   393b0:	cmp	r1, #0
   393b4:	bne	393cc <__assert_fail@plt+0x27504>
   393b8:	ldr	r0, [sp, #4]
   393bc:	add	r1, r0, #4
   393c0:	str	r1, [sp, #4]
   393c4:	mov	r1, #0
   393c8:	b	39498 <__assert_fail@plt+0x275d0>
   393cc:	sub	r0, r1, #1024	; 0x400
   393d0:	cmp	r0, #10
   393d4:	bhi	3948c <__assert_fail@plt+0x275c4>
   393d8:	mov	r2, #1
   393dc:	movw	r3, #645	; 0x285
   393e0:	tst	r3, r2, lsl r0
   393e4:	bne	3948c <__assert_fail@plt+0x275c4>
   393e8:	movw	r3, #1282	; 0x502
   393ec:	tst	r3, r2, lsl r0
   393f0:	beq	39400 <__assert_fail@plt+0x27538>
   393f4:	mov	r0, r5
   393f8:	bl	11d78 <fcntl64@plt>
   393fc:	b	394a4 <__assert_fail@plt+0x275dc>
   39400:	cmp	r0, #6
   39404:	bne	3948c <__assert_fail@plt+0x275c4>
   39408:	ldr	r0, [sp, #4]
   3940c:	movw	r7, #54248	; 0xd3e8
   39410:	movt	r7, #4
   39414:	add	r1, r0, #4
   39418:	str	r1, [sp, #4]
   3941c:	ldr	r6, [r0]
   39420:	ldr	r0, [r7]
   39424:	cmp	r0, #0
   39428:	bmi	394c8 <__assert_fail@plt+0x27600>
   3942c:	mov	r0, r5
   39430:	movw	r1, #1030	; 0x406
   39434:	mov	r2, r6
   39438:	bl	11d78 <fcntl64@plt>
   3943c:	mov	r4, r0
   39440:	cmn	r0, #1
   39444:	bgt	394bc <__assert_fail@plt+0x275f4>
   39448:	bl	11cdc <__errno_location@plt>
   3944c:	ldr	r0, [r0]
   39450:	cmp	r0, #22
   39454:	bne	394bc <__assert_fail@plt+0x275f4>
   39458:	mov	r0, r5
   3945c:	mov	r1, #0
   39460:	mov	r2, r6
   39464:	bl	11d78 <fcntl64@plt>
   39468:	mov	r4, r0
   3946c:	cmp	r0, #0
   39470:	bmi	394a8 <__assert_fail@plt+0x275e0>
   39474:	mvn	r0, #0
   39478:	str	r0, [r7]
   3947c:	mov	r0, #1
   39480:	cmp	r0, #0
   39484:	bne	394f4 <__assert_fail@plt+0x2762c>
   39488:	b	394a8 <__assert_fail@plt+0x275e0>
   3948c:	ldr	r0, [sp, #4]
   39490:	add	r2, r0, #4
   39494:	str	r2, [sp, #4]
   39498:	ldr	r2, [r0]
   3949c:	mov	r0, r5
   394a0:	bl	11d78 <fcntl64@plt>
   394a4:	mov	r4, r0
   394a8:	mov	r0, r4
   394ac:	sub	sp, fp, #16
   394b0:	pop	{r4, r5, r6, r7, fp, lr}
   394b4:	add	sp, sp, #8
   394b8:	bx	lr
   394bc:	mov	r0, #1
   394c0:	str	r0, [r7]
   394c4:	b	394a8 <__assert_fail@plt+0x275e0>
   394c8:	mov	r0, r5
   394cc:	mov	r1, #0
   394d0:	mov	r2, r6
   394d4:	bl	11d78 <fcntl64@plt>
   394d8:	mov	r4, r0
   394dc:	ldr	r0, [r7]
   394e0:	add	r0, r0, #1
   394e4:	clz	r0, r0
   394e8:	lsr	r0, r0, #5
   394ec:	cmp	r0, #0
   394f0:	beq	394a8 <__assert_fail@plt+0x275e0>
   394f4:	cmp	r4, #0
   394f8:	bmi	394a8 <__assert_fail@plt+0x275e0>
   394fc:	mov	r0, r4
   39500:	mov	r1, #1
   39504:	bl	11d78 <fcntl64@plt>
   39508:	cmp	r0, #0
   3950c:	bmi	39528 <__assert_fail@plt+0x27660>
   39510:	orr	r2, r0, #1
   39514:	mov	r0, r4
   39518:	mov	r1, #2
   3951c:	bl	11d78 <fcntl64@plt>
   39520:	cmn	r0, #1
   39524:	bne	394a8 <__assert_fail@plt+0x275e0>
   39528:	bl	11cdc <__errno_location@plt>
   3952c:	ldr	r6, [r0]
   39530:	mov	r5, r0
   39534:	mov	r0, r4
   39538:	bl	11ea4 <close@plt>
   3953c:	str	r6, [r5]
   39540:	mvn	r4, #0
   39544:	b	394a8 <__assert_fail@plt+0x275e0>
   39548:	sub	sp, sp, #8
   3954c:	push	{fp, lr}
   39550:	mov	fp, sp
   39554:	sub	sp, sp, #8
   39558:	str	r2, [fp, #8]
   3955c:	str	r3, [fp, #12]
   39560:	tst	r1, #64	; 0x40
   39564:	mov	r2, #0
   39568:	ldrne	r2, [fp, #8]
   3956c:	bl	11bf8 <open64@plt>
   39570:	bl	35020 <__assert_fail@plt+0x23158>
   39574:	mov	sp, fp
   39578:	pop	{fp, lr}
   3957c:	add	sp, sp, #8
   39580:	bx	lr
   39584:	push	{fp, lr}
   39588:	mov	fp, sp
   3958c:	mov	r0, #14
   39590:	bl	11da8 <nl_langinfo@plt>
   39594:	movw	r1, #43540	; 0xaa14
   39598:	cmp	r0, #0
   3959c:	movt	r1, #3
   395a0:	movne	r1, r0
   395a4:	movw	r0, #49612	; 0xc1cc
   395a8:	ldrb	r2, [r1]
   395ac:	movt	r0, #3
   395b0:	cmp	r2, #0
   395b4:	movne	r0, r1
   395b8:	pop	{fp, pc}
   395bc:	push	{r4, sl, fp, lr}
   395c0:	add	fp, sp, #8
   395c4:	mov	r4, r0
   395c8:	bl	11a6c <wcwidth@plt>
   395cc:	cmn	r0, #1
   395d0:	popgt	{r4, sl, fp, pc}
   395d4:	mov	r0, r4
   395d8:	bl	11b38 <iswcntrl@plt>
   395dc:	clz	r0, r0
   395e0:	lsr	r0, r0, #5
   395e4:	pop	{r4, sl, fp, pc}
   395e8:	push	{r4, r5, r6, sl, fp, lr}
   395ec:	add	fp, sp, #16
   395f0:	mov	r4, r0
   395f4:	mov	r0, r1
   395f8:	mov	r5, r1
   395fc:	ldr	r1, [r0], #16
   39600:	cmp	r1, r0
   39604:	beq	39610 <__assert_fail@plt+0x27748>
   39608:	mov	r6, r1
   3960c:	b	39620 <__assert_fail@plt+0x27758>
   39610:	ldr	r2, [r5, #4]
   39614:	add	r6, r4, #16
   39618:	mov	r0, r6
   3961c:	bl	11ab4 <memcpy@plt>
   39620:	str	r6, [r4]
   39624:	ldr	r0, [r5, #4]
   39628:	str	r0, [r4, #4]
   3962c:	ldrb	r0, [r5, #8]
   39630:	strb	r0, [r4, #8]
   39634:	cmp	r0, #0
   39638:	ldrne	r0, [r5, #12]
   3963c:	strne	r0, [r4, #12]
   39640:	pop	{r4, r5, r6, sl, fp, pc}
   39644:	movw	r2, #49620	; 0xc1d4
   39648:	ubfx	r1, r0, #5, #3
   3964c:	and	r0, r0, #31
   39650:	movt	r2, #3
   39654:	ldr	r1, [r2, r1, lsl #2]
   39658:	mov	r2, #1
   3965c:	and	r0, r1, r2, lsl r0
   39660:	cmp	r0, #0
   39664:	movwne	r0, #1
   39668:	bx	lr
   3966c:	push	{r4, r5, r6, r7, fp, lr}
   39670:	add	fp, sp, #16
   39674:	sub	sp, sp, #8
   39678:	cmp	r0, #0
   3967c:	add	r5, sp, #4
   39680:	mov	r7, r2
   39684:	mov	r4, r1
   39688:	movne	r5, r0
   3968c:	mov	r0, r5
   39690:	bl	11bc8 <mbrtowc@plt>
   39694:	mov	r6, r0
   39698:	cmp	r7, #0
   3969c:	beq	396c4 <__assert_fail@plt+0x277fc>
   396a0:	cmn	r6, #2
   396a4:	bcc	396c4 <__assert_fail@plt+0x277fc>
   396a8:	mov	r0, #0
   396ac:	bl	39718 <__assert_fail@plt+0x27850>
   396b0:	cmp	r0, #0
   396b4:	bne	396c4 <__assert_fail@plt+0x277fc>
   396b8:	ldrb	r0, [r4]
   396bc:	mov	r6, #1
   396c0:	str	r0, [r5]
   396c4:	mov	r0, r6
   396c8:	sub	sp, fp, #16
   396cc:	pop	{r4, r5, r6, r7, fp, pc}
   396d0:	cmp	r2, #0
   396d4:	beq	39704 <__assert_fail@plt+0x2783c>
   396d8:	mvn	r3, #0
   396dc:	udiv	r3, r3, r2
   396e0:	cmp	r3, r1
   396e4:	bcs	39704 <__assert_fail@plt+0x2783c>
   396e8:	push	{fp, lr}
   396ec:	mov	fp, sp
   396f0:	bl	11cdc <__errno_location@plt>
   396f4:	mov	r1, #12
   396f8:	str	r1, [r0]
   396fc:	mov	r0, #0
   39700:	pop	{fp, pc}
   39704:	mul	r1, r2, r1
   39708:	b	38480 <__assert_fail@plt+0x265b8>
   3970c:	mov	r1, #0
   39710:	mov	r2, #3
   39714:	b	39368 <__assert_fail@plt+0x274a0>
   39718:	push	{r4, sl, fp, lr}
   3971c:	add	fp, sp, #8
   39720:	sub	sp, sp, #264	; 0x108
   39724:	add	r1, sp, #7
   39728:	movw	r2, #257	; 0x101
   3972c:	bl	39784 <__assert_fail@plt+0x278bc>
   39730:	mov	r4, #0
   39734:	cmp	r0, #0
   39738:	bne	39778 <__assert_fail@plt+0x278b0>
   3973c:	movw	r1, #49652	; 0xc1f4
   39740:	add	r0, sp, #7
   39744:	mov	r2, #2
   39748:	movt	r1, #3
   3974c:	bl	11ca0 <bcmp@plt>
   39750:	cmp	r0, #0
   39754:	beq	39778 <__assert_fail@plt+0x278b0>
   39758:	movw	r1, #49654	; 0xc1f6
   3975c:	add	r0, sp, #7
   39760:	mov	r2, #6
   39764:	movt	r1, #3
   39768:	bl	11ca0 <bcmp@plt>
   3976c:	cmp	r0, #0
   39770:	mov	r4, r0
   39774:	movwne	r4, #1
   39778:	mov	r0, r4
   3977c:	sub	sp, fp, #8
   39780:	pop	{r4, sl, fp, pc}
   39784:	push	{r4, r5, r6, r7, fp, lr}
   39788:	add	fp, sp, #16
   3978c:	mov	r4, r1
   39790:	mov	r1, #0
   39794:	mov	r6, r2
   39798:	bl	11d90 <setlocale@plt>
   3979c:	cmp	r0, #0
   397a0:	beq	397d0 <__assert_fail@plt+0x27908>
   397a4:	mov	r7, r0
   397a8:	bl	11cac <strlen@plt>
   397ac:	cmp	r0, r6
   397b0:	bcs	397ec <__assert_fail@plt+0x27924>
   397b4:	add	r2, r0, #1
   397b8:	mov	r0, r4
   397bc:	mov	r1, r7
   397c0:	bl	11ab4 <memcpy@plt>
   397c4:	mov	r5, #0
   397c8:	mov	r0, r5
   397cc:	pop	{r4, r5, r6, r7, fp, pc}
   397d0:	mov	r5, #22
   397d4:	cmp	r6, #0
   397d8:	beq	39814 <__assert_fail@plt+0x2794c>
   397dc:	mov	r0, #0
   397e0:	strb	r0, [r4]
   397e4:	mov	r0, r5
   397e8:	pop	{r4, r5, r6, r7, fp, pc}
   397ec:	mov	r5, #34	; 0x22
   397f0:	cmp	r6, #0
   397f4:	beq	39814 <__assert_fail@plt+0x2794c>
   397f8:	sub	r6, r6, #1
   397fc:	mov	r0, r4
   39800:	mov	r1, r7
   39804:	mov	r2, r6
   39808:	bl	11ab4 <memcpy@plt>
   3980c:	mov	r0, #0
   39810:	strb	r0, [r4, r6]
   39814:	mov	r0, r5
   39818:	pop	{r4, r5, r6, r7, fp, pc}
   3981c:	mov	r1, #0
   39820:	b	11d90 <setlocale@plt>
   39824:	eor	r1, r1, #-2147483648	; 0x80000000
   39828:	b	39830 <__assert_fail@plt+0x27968>
   3982c:	eor	r3, r3, #-2147483648	; 0x80000000
   39830:	push	{r4, r5, lr}
   39834:	lsl	r4, r1, #1
   39838:	lsl	r5, r3, #1
   3983c:	teq	r4, r5
   39840:	teqeq	r0, r2
   39844:	orrsne	ip, r4, r0
   39848:	orrsne	ip, r5, r2
   3984c:	mvnsne	ip, r4, asr #21
   39850:	mvnsne	ip, r5, asr #21
   39854:	beq	39a40 <__assert_fail@plt+0x27b78>
   39858:	lsr	r4, r4, #21
   3985c:	rsbs	r5, r4, r5, lsr #21
   39860:	rsblt	r5, r5, #0
   39864:	ble	39884 <__assert_fail@plt+0x279bc>
   39868:	add	r4, r4, r5
   3986c:	eor	r2, r0, r2
   39870:	eor	r3, r1, r3
   39874:	eor	r0, r2, r0
   39878:	eor	r1, r3, r1
   3987c:	eor	r2, r0, r2
   39880:	eor	r3, r1, r3
   39884:	cmp	r5, #54	; 0x36
   39888:	pophi	{r4, r5, pc}
   3988c:	tst	r1, #-2147483648	; 0x80000000
   39890:	lsl	r1, r1, #12
   39894:	mov	ip, #1048576	; 0x100000
   39898:	orr	r1, ip, r1, lsr #12
   3989c:	beq	398a8 <__assert_fail@plt+0x279e0>
   398a0:	rsbs	r0, r0, #0
   398a4:	rsc	r1, r1, #0
   398a8:	tst	r3, #-2147483648	; 0x80000000
   398ac:	lsl	r3, r3, #12
   398b0:	orr	r3, ip, r3, lsr #12
   398b4:	beq	398c0 <__assert_fail@plt+0x279f8>
   398b8:	rsbs	r2, r2, #0
   398bc:	rsc	r3, r3, #0
   398c0:	teq	r4, r5
   398c4:	beq	39a28 <__assert_fail@plt+0x27b60>
   398c8:	sub	r4, r4, #1
   398cc:	rsbs	lr, r5, #32
   398d0:	blt	398ec <__assert_fail@plt+0x27a24>
   398d4:	lsl	ip, r2, lr
   398d8:	adds	r0, r0, r2, lsr r5
   398dc:	adc	r1, r1, #0
   398e0:	adds	r0, r0, r3, lsl lr
   398e4:	adcs	r1, r1, r3, asr r5
   398e8:	b	39908 <__assert_fail@plt+0x27a40>
   398ec:	sub	r5, r5, #32
   398f0:	add	lr, lr, #32
   398f4:	cmp	r2, #1
   398f8:	lsl	ip, r3, lr
   398fc:	orrcs	ip, ip, #2
   39900:	adds	r0, r0, r3, asr r5
   39904:	adcs	r1, r1, r3, asr #31
   39908:	and	r5, r1, #-2147483648	; 0x80000000
   3990c:	bpl	3991c <__assert_fail@plt+0x27a54>
   39910:	rsbs	ip, ip, #0
   39914:	rscs	r0, r0, #0
   39918:	rsc	r1, r1, #0
   3991c:	cmp	r1, #1048576	; 0x100000
   39920:	bcc	39960 <__assert_fail@plt+0x27a98>
   39924:	cmp	r1, #2097152	; 0x200000
   39928:	bcc	39948 <__assert_fail@plt+0x27a80>
   3992c:	lsrs	r1, r1, #1
   39930:	rrxs	r0, r0
   39934:	rrx	ip, ip
   39938:	add	r4, r4, #1
   3993c:	lsl	r2, r4, #21
   39940:	cmn	r2, #4194304	; 0x400000
   39944:	bcs	39aa0 <__assert_fail@plt+0x27bd8>
   39948:	cmp	ip, #-2147483648	; 0x80000000
   3994c:	lsrseq	ip, r0, #1
   39950:	adcs	r0, r0, #0
   39954:	adc	r1, r1, r4, lsl #20
   39958:	orr	r1, r1, r5
   3995c:	pop	{r4, r5, pc}
   39960:	lsls	ip, ip, #1
   39964:	adcs	r0, r0, r0
   39968:	adc	r1, r1, r1
   3996c:	tst	r1, #1048576	; 0x100000
   39970:	sub	r4, r4, #1
   39974:	bne	39948 <__assert_fail@plt+0x27a80>
   39978:	teq	r1, #0
   3997c:	moveq	r1, r0
   39980:	moveq	r0, #0
   39984:	clz	r3, r1
   39988:	addeq	r3, r3, #32
   3998c:	sub	r3, r3, #11
   39990:	subs	r2, r3, #32
   39994:	bge	399b8 <__assert_fail@plt+0x27af0>
   39998:	adds	r2, r2, #12
   3999c:	ble	399b4 <__assert_fail@plt+0x27aec>
   399a0:	add	ip, r2, #20
   399a4:	rsb	r2, r2, #12
   399a8:	lsl	r0, r1, ip
   399ac:	lsr	r1, r1, r2
   399b0:	b	399c8 <__assert_fail@plt+0x27b00>
   399b4:	add	r2, r2, #20
   399b8:	rsble	ip, r2, #32
   399bc:	lsl	r1, r1, r2
   399c0:	orrle	r1, r1, r0, lsr ip
   399c4:	lslle	r0, r0, r2
   399c8:	subs	r4, r4, r3
   399cc:	addge	r1, r1, r4, lsl #20
   399d0:	orrge	r1, r1, r5
   399d4:	popge	{r4, r5, pc}
   399d8:	mvn	r4, r4
   399dc:	subs	r4, r4, #31
   399e0:	bge	39a1c <__assert_fail@plt+0x27b54>
   399e4:	adds	r4, r4, #12
   399e8:	bgt	39a04 <__assert_fail@plt+0x27b3c>
   399ec:	add	r4, r4, #20
   399f0:	rsb	r2, r4, #32
   399f4:	lsr	r0, r0, r4
   399f8:	orr	r0, r0, r1, lsl r2
   399fc:	orr	r1, r5, r1, lsr r4
   39a00:	pop	{r4, r5, pc}
   39a04:	rsb	r4, r4, #12
   39a08:	rsb	r2, r4, #32
   39a0c:	lsr	r0, r0, r2
   39a10:	orr	r0, r0, r1, lsl r4
   39a14:	mov	r1, r5
   39a18:	pop	{r4, r5, pc}
   39a1c:	lsr	r0, r1, r4
   39a20:	mov	r1, r5
   39a24:	pop	{r4, r5, pc}
   39a28:	teq	r4, #0
   39a2c:	eor	r3, r3, #1048576	; 0x100000
   39a30:	eoreq	r1, r1, #1048576	; 0x100000
   39a34:	addeq	r4, r4, #1
   39a38:	subne	r5, r5, #1
   39a3c:	b	398c8 <__assert_fail@plt+0x27a00>
   39a40:	mvns	ip, r4, asr #21
   39a44:	mvnsne	ip, r5, asr #21
   39a48:	beq	39ab0 <__assert_fail@plt+0x27be8>
   39a4c:	teq	r4, r5
   39a50:	teqeq	r0, r2
   39a54:	beq	39a68 <__assert_fail@plt+0x27ba0>
   39a58:	orrs	ip, r4, r0
   39a5c:	moveq	r1, r3
   39a60:	moveq	r0, r2
   39a64:	pop	{r4, r5, pc}
   39a68:	teq	r1, r3
   39a6c:	movne	r1, #0
   39a70:	movne	r0, #0
   39a74:	popne	{r4, r5, pc}
   39a78:	lsrs	ip, r4, #21
   39a7c:	bne	39a90 <__assert_fail@plt+0x27bc8>
   39a80:	lsls	r0, r0, #1
   39a84:	adcs	r1, r1, r1
   39a88:	orrcs	r1, r1, #-2147483648	; 0x80000000
   39a8c:	pop	{r4, r5, pc}
   39a90:	adds	r4, r4, #4194304	; 0x400000
   39a94:	addcc	r1, r1, #1048576	; 0x100000
   39a98:	popcc	{r4, r5, pc}
   39a9c:	and	r5, r1, #-2147483648	; 0x80000000
   39aa0:	orr	r1, r5, #2130706432	; 0x7f000000
   39aa4:	orr	r1, r1, #15728640	; 0xf00000
   39aa8:	mov	r0, #0
   39aac:	pop	{r4, r5, pc}
   39ab0:	mvns	ip, r4, asr #21
   39ab4:	movne	r1, r3
   39ab8:	movne	r0, r2
   39abc:	mvnseq	ip, r5, asr #21
   39ac0:	movne	r3, r1
   39ac4:	movne	r2, r0
   39ac8:	orrs	r4, r0, r1, lsl #12
   39acc:	orrseq	r5, r2, r3, lsl #12
   39ad0:	teqeq	r1, r3
   39ad4:	orrne	r1, r1, #524288	; 0x80000
   39ad8:	pop	{r4, r5, pc}
   39adc:	teq	r0, #0
   39ae0:	moveq	r1, #0
   39ae4:	bxeq	lr
   39ae8:	push	{r4, r5, lr}
   39aec:	mov	r4, #1024	; 0x400
   39af0:	add	r4, r4, #50	; 0x32
   39af4:	mov	r5, #0
   39af8:	mov	r1, #0
   39afc:	b	39978 <__assert_fail@plt+0x27ab0>
   39b00:	teq	r0, #0
   39b04:	moveq	r1, #0
   39b08:	bxeq	lr
   39b0c:	push	{r4, r5, lr}
   39b10:	mov	r4, #1024	; 0x400
   39b14:	add	r4, r4, #50	; 0x32
   39b18:	ands	r5, r0, #-2147483648	; 0x80000000
   39b1c:	rsbmi	r0, r0, #0
   39b20:	mov	r1, #0
   39b24:	b	39978 <__assert_fail@plt+0x27ab0>
   39b28:	lsls	r2, r0, #1
   39b2c:	asr	r1, r2, #3
   39b30:	rrx	r1, r1
   39b34:	lsl	r0, r2, #28
   39b38:	andsne	r3, r2, #-16777216	; 0xff000000
   39b3c:	teqne	r3, #-16777216	; 0xff000000
   39b40:	eorne	r1, r1, #939524096	; 0x38000000
   39b44:	bxne	lr
   39b48:	bics	r2, r2, #-16777216	; 0xff000000
   39b4c:	bxeq	lr
   39b50:	teq	r3, #-16777216	; 0xff000000
   39b54:	orreq	r1, r1, #524288	; 0x80000
   39b58:	bxeq	lr
   39b5c:	push	{r4, r5, lr}
   39b60:	mov	r4, #896	; 0x380
   39b64:	and	r5, r1, #-2147483648	; 0x80000000
   39b68:	bic	r1, r1, #-2147483648	; 0x80000000
   39b6c:	b	39978 <__assert_fail@plt+0x27ab0>
   39b70:	orrs	r2, r0, r1
   39b74:	bxeq	lr
   39b78:	push	{r4, r5, lr}
   39b7c:	mov	r5, #0
   39b80:	b	39ba0 <__assert_fail@plt+0x27cd8>
   39b84:	orrs	r2, r0, r1
   39b88:	bxeq	lr
   39b8c:	push	{r4, r5, lr}
   39b90:	ands	r5, r1, #-2147483648	; 0x80000000
   39b94:	bpl	39ba0 <__assert_fail@plt+0x27cd8>
   39b98:	rsbs	r0, r0, #0
   39b9c:	rsc	r1, r1, #0
   39ba0:	mov	r4, #1024	; 0x400
   39ba4:	add	r4, r4, #50	; 0x32
   39ba8:	lsrs	ip, r1, #22
   39bac:	beq	3991c <__assert_fail@plt+0x27a54>
   39bb0:	mov	r2, #3
   39bb4:	lsrs	ip, ip, #3
   39bb8:	addne	r2, r2, #3
   39bbc:	lsrs	ip, ip, #3
   39bc0:	addne	r2, r2, #3
   39bc4:	add	r2, r2, ip, lsr #3
   39bc8:	rsb	r3, r2, #32
   39bcc:	lsl	ip, r0, r3
   39bd0:	lsr	r0, r0, r2
   39bd4:	orr	r0, r0, r1, lsl r3
   39bd8:	lsr	r1, r1, r2
   39bdc:	add	r4, r4, r2
   39be0:	b	3991c <__assert_fail@plt+0x27a54>
   39be4:	cmp	r3, #0
   39be8:	cmpeq	r2, #0
   39bec:	bne	39c10 <__assert_fail@plt+0x27d48>
   39bf0:	cmp	r1, #0
   39bf4:	movlt	r1, #-2147483648	; 0x80000000
   39bf8:	movlt	r0, #0
   39bfc:	blt	39c0c <__assert_fail@plt+0x27d44>
   39c00:	cmpeq	r0, #0
   39c04:	mvnne	r1, #-2147483648	; 0x80000000
   39c08:	mvnne	r0, #0
   39c0c:	b	39cf4 <__assert_fail@plt+0x27e2c>
   39c10:	sub	sp, sp, #8
   39c14:	push	{sp, lr}
   39c18:	cmp	r1, #0
   39c1c:	blt	39c3c <__assert_fail@plt+0x27d74>
   39c20:	cmp	r3, #0
   39c24:	blt	39c70 <__assert_fail@plt+0x27da8>
   39c28:	bl	39d48 <__assert_fail@plt+0x27e80>
   39c2c:	ldr	lr, [sp, #4]
   39c30:	add	sp, sp, #8
   39c34:	pop	{r2, r3}
   39c38:	bx	lr
   39c3c:	rsbs	r0, r0, #0
   39c40:	sbc	r1, r1, r1, lsl #1
   39c44:	cmp	r3, #0
   39c48:	blt	39c94 <__assert_fail@plt+0x27dcc>
   39c4c:	bl	39d48 <__assert_fail@plt+0x27e80>
   39c50:	ldr	lr, [sp, #4]
   39c54:	add	sp, sp, #8
   39c58:	pop	{r2, r3}
   39c5c:	rsbs	r0, r0, #0
   39c60:	sbc	r1, r1, r1, lsl #1
   39c64:	rsbs	r2, r2, #0
   39c68:	sbc	r3, r3, r3, lsl #1
   39c6c:	bx	lr
   39c70:	rsbs	r2, r2, #0
   39c74:	sbc	r3, r3, r3, lsl #1
   39c78:	bl	39d48 <__assert_fail@plt+0x27e80>
   39c7c:	ldr	lr, [sp, #4]
   39c80:	add	sp, sp, #8
   39c84:	pop	{r2, r3}
   39c88:	rsbs	r0, r0, #0
   39c8c:	sbc	r1, r1, r1, lsl #1
   39c90:	bx	lr
   39c94:	rsbs	r2, r2, #0
   39c98:	sbc	r3, r3, r3, lsl #1
   39c9c:	bl	39d48 <__assert_fail@plt+0x27e80>
   39ca0:	ldr	lr, [sp, #4]
   39ca4:	add	sp, sp, #8
   39ca8:	pop	{r2, r3}
   39cac:	rsbs	r2, r2, #0
   39cb0:	sbc	r3, r3, r3, lsl #1
   39cb4:	bx	lr
   39cb8:	cmp	r3, #0
   39cbc:	cmpeq	r2, #0
   39cc0:	bne	39cd8 <__assert_fail@plt+0x27e10>
   39cc4:	cmp	r1, #0
   39cc8:	cmpeq	r0, #0
   39ccc:	mvnne	r1, #0
   39cd0:	mvnne	r0, #0
   39cd4:	b	39cf4 <__assert_fail@plt+0x27e2c>
   39cd8:	sub	sp, sp, #8
   39cdc:	push	{sp, lr}
   39ce0:	bl	39d48 <__assert_fail@plt+0x27e80>
   39ce4:	ldr	lr, [sp, #4]
   39ce8:	add	sp, sp, #8
   39cec:	pop	{r2, r3}
   39cf0:	bx	lr
   39cf4:	push	{r1, lr}
   39cf8:	mov	r0, #8
   39cfc:	bl	11a00 <raise@plt>
   39d00:	pop	{r1, pc}
   39d04:	andeq	r0, r0, r0
   39d08:	vmov	d6, r0, r1
   39d0c:	vldr	d7, [pc, #36]	; 39d38 <__assert_fail@plt+0x27e70>
   39d10:	vldr	d5, [pc, #40]	; 39d40 <__assert_fail@plt+0x27e78>
   39d14:	vmul.f64	d7, d6, d7
   39d18:	vcvt.u32.f64	s14, d7
   39d1c:	vcvt.f64.u32	d4, s14
   39d20:	vmov	r1, s14
   39d24:	vmls.f64	d6, d4, d5
   39d28:	vcvt.u32.f64	s15, d6
   39d2c:	vmov	r0, s15
   39d30:	bx	lr
   39d34:	nop			; (mov r0, r0)
   39d38:	andeq	r0, r0, r0
   39d3c:	ldclcc	0, cr0, [r0]
   39d40:	andeq	r0, r0, r0
   39d44:	mvnsmi	r0, r0
   39d48:	cmp	r1, r3
   39d4c:	cmpeq	r0, r2
   39d50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39d54:	mov	r4, r0
   39d58:	movcc	r0, #0
   39d5c:	mov	r5, r1
   39d60:	ldr	lr, [sp, #36]	; 0x24
   39d64:	movcc	r1, r0
   39d68:	bcc	39e64 <__assert_fail@plt+0x27f9c>
   39d6c:	cmp	r3, #0
   39d70:	clzeq	ip, r2
   39d74:	clzne	ip, r3
   39d78:	addeq	ip, ip, #32
   39d7c:	cmp	r5, #0
   39d80:	clzeq	r1, r4
   39d84:	addeq	r1, r1, #32
   39d88:	clzne	r1, r5
   39d8c:	sub	ip, ip, r1
   39d90:	sub	sl, ip, #32
   39d94:	lsl	r9, r3, ip
   39d98:	rsb	fp, ip, #32
   39d9c:	orr	r9, r9, r2, lsl sl
   39da0:	orr	r9, r9, r2, lsr fp
   39da4:	lsl	r8, r2, ip
   39da8:	cmp	r5, r9
   39dac:	cmpeq	r4, r8
   39db0:	movcc	r0, #0
   39db4:	movcc	r1, r0
   39db8:	bcc	39dd4 <__assert_fail@plt+0x27f0c>
   39dbc:	mov	r0, #1
   39dc0:	subs	r4, r4, r8
   39dc4:	lsl	r1, r0, sl
   39dc8:	orr	r1, r1, r0, lsr fp
   39dcc:	lsl	r0, r0, ip
   39dd0:	sbc	r5, r5, r9
   39dd4:	cmp	ip, #0
   39dd8:	beq	39e64 <__assert_fail@plt+0x27f9c>
   39ddc:	lsr	r6, r8, #1
   39de0:	orr	r6, r6, r9, lsl #31
   39de4:	lsr	r7, r9, #1
   39de8:	mov	r2, ip
   39dec:	b	39e10 <__assert_fail@plt+0x27f48>
   39df0:	subs	r3, r4, r6
   39df4:	sbc	r8, r5, r7
   39df8:	adds	r3, r3, r3
   39dfc:	adc	r8, r8, r8
   39e00:	adds	r4, r3, #1
   39e04:	adc	r5, r8, #0
   39e08:	subs	r2, r2, #1
   39e0c:	beq	39e2c <__assert_fail@plt+0x27f64>
   39e10:	cmp	r5, r7
   39e14:	cmpeq	r4, r6
   39e18:	bcs	39df0 <__assert_fail@plt+0x27f28>
   39e1c:	adds	r4, r4, r4
   39e20:	adc	r5, r5, r5
   39e24:	subs	r2, r2, #1
   39e28:	bne	39e10 <__assert_fail@plt+0x27f48>
   39e2c:	lsr	r3, r4, ip
   39e30:	orr	r3, r3, r5, lsl fp
   39e34:	lsr	r2, r5, ip
   39e38:	orr	r3, r3, r5, lsr sl
   39e3c:	adds	r0, r0, r4
   39e40:	mov	r4, r3
   39e44:	lsl	r3, r2, ip
   39e48:	orr	r3, r3, r4, lsl sl
   39e4c:	lsl	ip, r4, ip
   39e50:	orr	r3, r3, r4, lsr fp
   39e54:	adc	r1, r1, r5
   39e58:	subs	r0, r0, ip
   39e5c:	mov	r5, r2
   39e60:	sbc	r1, r1, r3
   39e64:	cmp	lr, #0
   39e68:	strdne	r4, [lr]
   39e6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39e70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39e74:	mov	r7, r0
   39e78:	ldr	r6, [pc, #72]	; 39ec8 <__assert_fail@plt+0x28000>
   39e7c:	ldr	r5, [pc, #72]	; 39ecc <__assert_fail@plt+0x28004>
   39e80:	add	r6, pc, r6
   39e84:	add	r5, pc, r5
   39e88:	sub	r6, r6, r5
   39e8c:	mov	r8, r1
   39e90:	mov	r9, r2
   39e94:	bl	119a4 <pthread_mutex_unlock@plt-0x20>
   39e98:	asrs	r6, r6, #2
   39e9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   39ea0:	mov	r4, #0
   39ea4:	add	r4, r4, #1
   39ea8:	ldr	r3, [r5], #4
   39eac:	mov	r2, r9
   39eb0:	mov	r1, r8
   39eb4:	mov	r0, r7
   39eb8:	blx	r3
   39ebc:	cmp	r6, r4
   39ec0:	bne	39ea4 <__assert_fail@plt+0x27fdc>
   39ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39ec8:	andeq	r3, r1, r4, lsl #1
   39ecc:	andeq	r3, r1, ip, ror r0
   39ed0:	bx	lr
   39ed4:	ldr	r3, [pc, #12]	; 39ee8 <__assert_fail@plt+0x28020>
   39ed8:	mov	r1, #0
   39edc:	add	r3, pc, r3
   39ee0:	ldr	r2, [r3]
   39ee4:	b	11d00 <__cxa_atexit@plt>
   39ee8:	andeq	r3, r1, r0, ror #5

Disassembly of section .fini:

00039eec <.fini>:
   39eec:	push	{r3, lr}
   39ef0:	pop	{r3, pc}
