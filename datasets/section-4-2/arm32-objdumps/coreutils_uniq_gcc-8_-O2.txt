
../repos/coreutils/src/uniq:     file format elf32-littlearm


Disassembly of section .init:

00010d08 <.init>:
   10d08:	push	{r3, lr}
   10d0c:	bl	11c7c <__assert_fail@plt+0xcc0>
   10d10:	pop	{r3, pc}

Disassembly of section .plt:

00010d14 <calloc@plt-0x14>:
   10d14:	push	{lr}		; (str lr, [sp, #-4]!)
   10d18:	ldr	lr, [pc, #4]	; 10d24 <calloc@plt-0x4>
   10d1c:	add	lr, pc, lr
   10d20:	ldr	pc, [lr, #8]!
   10d24:	ldrdeq	r7, [r1], -ip

00010d28 <calloc@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #732]!	; 0x2dc

00010d34 <fputs_unlocked@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #724]!	; 0x2d4

00010d40 <strcmp@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #716]!	; 0x2cc

00010d4c <strtol@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #708]!	; 0x2c4

00010d58 <posix_fadvise64@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #700]!	; 0x2bc

00010d64 <fflush@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #692]!	; 0x2b4

00010d70 <free@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #684]!	; 0x2ac

00010d7c <_exit@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #676]!	; 0x2a4

00010d88 <memcpy@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #668]!	; 0x29c

00010d94 <__strtoull_internal@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #660]!	; 0x294

00010da0 <mbsinit@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #652]!	; 0x28c

00010dac <fwrite_unlocked@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #644]!	; 0x284

00010db8 <memcmp@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #636]!	; 0x27c

00010dc4 <fputc_unlocked@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #628]!	; 0x274

00010dd0 <dcgettext@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #620]!	; 0x26c

00010ddc <dup2@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #612]!	; 0x264

00010de8 <realloc@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #604]!	; 0x25c

00010df4 <textdomain@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #596]!	; 0x254

00010e00 <iswprint@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #94208	; 0x17000
   10e08:	ldr	pc, [ip, #588]!	; 0x24c

00010e0c <fwrite@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #94208	; 0x17000
   10e14:	ldr	pc, [ip, #580]!	; 0x244

00010e18 <lseek64@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #94208	; 0x17000
   10e20:	ldr	pc, [ip, #572]!	; 0x23c

00010e24 <__ctype_get_mb_cur_max@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #94208	; 0x17000
   10e2c:	ldr	pc, [ip, #564]!	; 0x234

00010e30 <__fpending@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #94208	; 0x17000
   10e38:	ldr	pc, [ip, #556]!	; 0x22c

00010e3c <mbrtowc@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #94208	; 0x17000
   10e44:	ldr	pc, [ip, #548]!	; 0x224

00010e48 <error@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #94208	; 0x17000
   10e50:	ldr	pc, [ip, #540]!	; 0x21c

00010e54 <open64@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #94208	; 0x17000
   10e5c:	ldr	pc, [ip, #532]!	; 0x214

00010e60 <getenv@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #94208	; 0x17000
   10e68:	ldr	pc, [ip, #524]!	; 0x20c

00010e6c <malloc@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #94208	; 0x17000
   10e74:	ldr	pc, [ip, #516]!	; 0x204

00010e78 <__libc_start_main@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #94208	; 0x17000
   10e80:	ldr	pc, [ip, #508]!	; 0x1fc

00010e84 <__freading@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #94208	; 0x17000
   10e8c:	ldr	pc, [ip, #500]!	; 0x1f4

00010e90 <__ctype_toupper_loc@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #94208	; 0x17000
   10e98:	ldr	pc, [ip, #492]!	; 0x1ec

00010e9c <__gmon_start__@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #94208	; 0x17000
   10ea4:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea8 <freopen64@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #94208	; 0x17000
   10eb0:	ldr	pc, [ip, #476]!	; 0x1dc

00010eb4 <getopt_long@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #468]!	; 0x1d4

00010ec0 <__ctype_b_loc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #460]!	; 0x1cc

00010ecc <exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #452]!	; 0x1c4

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #444]!	; 0x1bc

00010ee4 <strchr@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #436]!	; 0x1b4

00010ef0 <__errno_location@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #428]!	; 0x1ac

00010efc <__cxa_atexit@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #420]!	; 0x1a4

00010f08 <memset@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #412]!	; 0x19c

00010f14 <__printf_chk@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #404]!	; 0x194

00010f20 <fileno@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #396]!	; 0x18c

00010f2c <__fprintf_chk@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #388]!	; 0x184

00010f38 <fclose@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #380]!	; 0x17c

00010f44 <fseeko64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #372]!	; 0x174

00010f50 <__uflow@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #364]!	; 0x16c

00010f5c <__overflow@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #356]!	; 0x164

00010f68 <setlocale@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #348]!	; 0x15c

00010f74 <strrchr@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #340]!	; 0x154

00010f80 <nl_langinfo@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #332]!	; 0x14c

00010f8c <bindtextdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #324]!	; 0x144

00010f98 <strncmp@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #316]!	; 0x13c

00010fa4 <abort@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #308]!	; 0x134

00010fb0 <close@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #300]!	; 0x12c

00010fbc <__assert_fail@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #292]!	; 0x124

Disassembly of section .text:

00010fc8 <.text>:
   10fc8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   10fcc:	movw	r5, #33136	; 0x8170
   10fd0:	movt	r5, #2
   10fd4:	strd	r6, [sp, #8]
   10fd8:	strd	r8, [sp, #16]
   10fdc:	mov	r9, r1
   10fe0:	strd	sl, [sp, #24]
   10fe4:	mov	sl, r0
   10fe8:	movw	r0, #29696	; 0x7400
   10fec:	movt	r0, #1
   10ff0:	str	lr, [sp, #32]
   10ff4:	sub	sp, sp, #92	; 0x5c
   10ff8:	bl	10e60 <getenv@plt>
   10ffc:	movw	r3, #29712	; 0x7410
   11000:	movt	r3, #1
   11004:	movw	r2, #27496	; 0x6b68
   11008:	movt	r2, #1
   1100c:	adds	fp, r0, #0
   11010:	ldr	r0, [r9]
   11014:	movne	fp, #1
   11018:	str	r2, [sp, #28]
   1101c:	str	r3, [sp, #52]	; 0x34
   11020:	str	r3, [sp, #56]	; 0x38
   11024:	bl	13040 <__assert_fail@plt+0x2084>
   11028:	movw	r3, #39321	; 0x9999
   1102c:	movt	r3, #6553	; 0x1999
   11030:	movw	r1, #28100	; 0x6dc4
   11034:	movt	r1, #1
   11038:	str	r3, [sp, #32]
   1103c:	mov	r3, #10
   11040:	mov	r0, #6
   11044:	str	r3, [sp, #16]
   11048:	bl	10f68 <setlocale@plt>
   1104c:	movw	r1, #29716	; 0x7414
   11050:	movt	r1, #1
   11054:	movw	r0, #29528	; 0x7358
   11058:	movt	r0, #1
   1105c:	bl	10f8c <bindtextdomain@plt>
   11060:	movw	r0, #29528	; 0x7358
   11064:	movt	r0, #1
   11068:	bl	10df4 <textdomain@plt>
   1106c:	movw	r0, #10388	; 0x2894
   11070:	movt	r0, #1
   11074:	bl	16b44 <__assert_fail@plt+0x5b88>
   11078:	mvn	r2, #0
   1107c:	mov	r3, #0
   11080:	mov	r6, r3
   11084:	mov	r4, r3
   11088:	str	r2, [r5]
   1108c:	mov	r2, #1
   11090:	str	r3, [sp, #20]
   11094:	str	r2, [r5, #8]
   11098:	str	r3, [r5, #12]
   1109c:	str	r3, [r5, #16]
   110a0:	strb	r2, [r5, #20]
   110a4:	strb	r2, [r5, #21]
   110a8:	strb	r3, [r5, #22]
   110ac:	str	r3, [r5, #24]
   110b0:	str	r3, [sp, #24]
   110b4:	b	110f0 <__assert_fail@plt+0x134>
   110b8:	movw	r7, #33104	; 0x8150
   110bc:	movt	r7, #2
   110c0:	ldr	r3, [r7]
   110c4:	cmp	r3, sl
   110c8:	bge	11368 <__assert_fail@plt+0x3ac>
   110cc:	cmp	r4, #2
   110d0:	beq	11b78 <__assert_fail@plt+0xbbc>
   110d4:	ldr	r2, [r9, r3, lsl #2]
   110d8:	add	r3, r3, #1
   110dc:	str	r3, [r7]
   110e0:	add	r3, sp, #88	; 0x58
   110e4:	add	r3, r3, r4, lsl #2
   110e8:	add	r4, r4, #1
   110ec:	str	r2, [r3, #-36]	; 0xffffffdc
   110f0:	cmn	r6, #1
   110f4:	movwne	r7, #29740	; 0x742c
   110f8:	movtne	r7, #1
   110fc:	beq	110b8 <__assert_fail@plt+0xfc>
   11100:	cmp	r4, #0
   11104:	movne	r8, fp
   11108:	moveq	r8, #0
   1110c:	cmp	r8, #0
   11110:	bne	110b8 <__assert_fail@plt+0xfc>
   11114:	ldr	r3, [pc, #2840]	; 11c34 <__assert_fail@plt+0xc78>
   11118:	mov	r2, r7
   1111c:	mov	r1, r9
   11120:	mov	r0, sl
   11124:	str	r8, [sp]
   11128:	bl	10eb4 <getopt_long@plt>
   1112c:	cmn	r0, #1
   11130:	mov	r6, r0
   11134:	beq	110b8 <__assert_fail@plt+0xfc>
   11138:	cmp	r0, #100	; 0x64
   1113c:	beq	117a0 <__assert_fail@plt+0x7e4>
   11140:	ble	11180 <__assert_fail@plt+0x1c4>
   11144:	cmp	r0, #117	; 0x75
   11148:	beq	11790 <__assert_fail@plt+0x7d4>
   1114c:	bgt	111e8 <__assert_fail@plt+0x22c>
   11150:	cmp	r0, #105	; 0x69
   11154:	beq	11784 <__assert_fail@plt+0x7c8>
   11158:	cmp	r0, #115	; 0x73
   1115c:	bne	111d8 <__assert_fail@plt+0x21c>
   11160:	movw	r3, #33128	; 0x8168
   11164:	movt	r3, #2
   11168:	movw	r1, #29844	; 0x7494
   1116c:	movt	r1, #1
   11170:	ldr	r0, [r3]
   11174:	bl	11dbc <__assert_fail@plt+0xe00>
   11178:	str	r0, [r5, #16]
   1117c:	b	11100 <__assert_fail@plt+0x144>
   11180:	cmp	r0, #57	; 0x39
   11184:	bgt	112ac <__assert_fail@plt+0x2f0>
   11188:	cmp	r0, #48	; 0x30
   1118c:	bge	11750 <__assert_fail@plt+0x794>
   11190:	cmn	r0, #2
   11194:	beq	11bb4 <__assert_fail@plt+0xbf8>
   11198:	cmp	r0, #1
   1119c:	bne	11258 <__assert_fail@plt+0x29c>
   111a0:	movw	r8, #33128	; 0x8168
   111a4:	movt	r8, #2
   111a8:	ldr	r3, [r8]
   111ac:	ldrb	r3, [r3]
   111b0:	cmp	r3, #43	; 0x2b
   111b4:	beq	11944 <__assert_fail@plt+0x988>
   111b8:	cmp	r4, #2
   111bc:	beq	11bbc <__assert_fail@plt+0xc00>
   111c0:	ldr	r2, [r8]
   111c4:	add	r3, sp, #88	; 0x58
   111c8:	add	r3, r3, r4, lsl #2
   111cc:	add	r4, r4, #1
   111d0:	str	r2, [r3, #-36]	; 0xffffffdc
   111d4:	b	11100 <__assert_fail@plt+0x144>
   111d8:	cmp	r0, #102	; 0x66
   111dc:	beq	117b0 <__assert_fail@plt+0x7f4>
   111e0:	mov	r0, #1
   111e4:	bl	11fd4 <__assert_fail@plt+0x1018>
   111e8:	cmp	r0, #122	; 0x7a
   111ec:	beq	11360 <__assert_fail@plt+0x3a4>
   111f0:	cmp	r0, #256	; 0x100
   111f4:	bne	11320 <__assert_fail@plt+0x364>
   111f8:	movw	r3, #33128	; 0x8168
   111fc:	movt	r3, #2
   11200:	ldr	r1, [r3]
   11204:	cmp	r1, #0
   11208:	moveq	r3, #3
   1120c:	streq	r3, [r5, #28]
   11210:	beq	11100 <__assert_fail@plt+0x144>
   11214:	movw	r2, #33020	; 0x80fc
   11218:	movt	r2, #2
   1121c:	ldr	r3, [pc, #2580]	; 11c38 <__assert_fail@plt+0xc7c>
   11220:	mov	r0, #1
   11224:	ldr	ip, [r2]
   11228:	mov	r2, #4
   1122c:	stm	sp, {r2, ip}
   11230:	add	r2, r3, #16
   11234:	str	r0, [sp, #8]
   11238:	movw	r0, #29800	; 0x7468
   1123c:	movt	r0, #1
   11240:	bl	12768 <__assert_fail@plt+0x17ac>
   11244:	ldr	r3, [sp, #28]
   11248:	add	r0, r3, r0, lsl #2
   1124c:	ldr	r3, [r0, #292]	; 0x124
   11250:	str	r3, [r5, #28]
   11254:	b	11100 <__assert_fail@plt+0x144>
   11258:	cmn	r0, #3
   1125c:	bne	111e0 <__assert_fail@plt+0x224>
   11260:	movw	r1, #29912	; 0x74d8
   11264:	movt	r1, #1
   11268:	movw	r2, #29928	; 0x74e8
   1126c:	movt	r2, #1
   11270:	movw	r3, #33016	; 0x80f8
   11274:	movt	r3, #2
   11278:	movw	r0, #33124	; 0x8164
   1127c:	movt	r0, #2
   11280:	str	r2, [sp]
   11284:	movw	r2, #29524	; 0x7354
   11288:	movt	r2, #1
   1128c:	stmib	sp, {r1, r8}
   11290:	movw	r1, #27840	; 0x6cc0
   11294:	movt	r1, #1
   11298:	ldr	r0, [r0]
   1129c:	ldr	r3, [r3]
   112a0:	bl	157cc <__assert_fail@plt+0x4810>
   112a4:	mov	r0, r8
   112a8:	bl	10ecc <exit@plt>
   112ac:	cmp	r0, #68	; 0x44
   112b0:	bne	11348 <__assert_fail@plt+0x38c>
   112b4:	movw	r3, #33128	; 0x8168
   112b8:	movt	r3, #2
   112bc:	strb	r8, [r5, #21]
   112c0:	ldr	r1, [r3]
   112c4:	mov	r2, #1
   112c8:	strb	r2, [r5, #22]
   112cc:	cmp	r1, #0
   112d0:	streq	r1, [r5, #24]
   112d4:	streq	r2, [sp, #20]
   112d8:	beq	11100 <__assert_fail@plt+0x144>
   112dc:	movw	r0, #33020	; 0x80fc
   112e0:	movt	r0, #2
   112e4:	ldr	r3, [pc, #2384]	; 11c3c <__assert_fail@plt+0xc80>
   112e8:	str	r2, [sp, #8]
   112ec:	mov	ip, #4
   112f0:	ldr	lr, [r0]
   112f4:	movw	r0, #29784	; 0x7458
   112f8:	movt	r0, #1
   112fc:	stm	sp, {ip, lr}
   11300:	str	r2, [sp, #20]
   11304:	add	r2, r3, #12
   11308:	bl	12768 <__assert_fail@plt+0x17ac>
   1130c:	ldr	r3, [sp, #28]
   11310:	add	r0, r3, r0, lsl #2
   11314:	ldr	r3, [r0, #264]	; 0x108
   11318:	str	r3, [r5, #24]
   1131c:	b	11100 <__assert_fail@plt+0x144>
   11320:	cmp	r0, #119	; 0x77
   11324:	bne	111e0 <__assert_fail@plt+0x224>
   11328:	movw	r3, #33128	; 0x8168
   1132c:	movt	r3, #2
   11330:	movw	r1, #29876	; 0x74b4
   11334:	movt	r1, #1
   11338:	ldr	r0, [r3]
   1133c:	bl	11dbc <__assert_fail@plt+0xe00>
   11340:	str	r0, [r5]
   11344:	b	11100 <__assert_fail@plt+0x144>
   11348:	cmp	r0, #99	; 0x63
   1134c:	bne	111e0 <__assert_fail@plt+0x224>
   11350:	mov	r3, #1
   11354:	str	r8, [r5, #8]
   11358:	str	r3, [sp, #20]
   1135c:	b	11100 <__assert_fail@plt+0x144>
   11360:	str	r8, [sp, #16]
   11364:	b	11100 <__assert_fail@plt+0x144>
   11368:	ldr	r3, [r5, #28]
   1136c:	cmp	r3, #0
   11370:	bne	11590 <__assert_fail@plt+0x5d4>
   11374:	ldr	r4, [r5, #8]
   11378:	cmp	r4, #0
   1137c:	bne	11394 <__assert_fail@plt+0x3d8>
   11380:	ldrb	r3, [r5, #22]
   11384:	cmp	r3, #0
   11388:	movwne	r1, #30048	; 0x7560
   1138c:	movtne	r1, #1
   11390:	bne	11be4 <__assert_fail@plt+0xc28>
   11394:	ldr	r3, [sp, #52]	; 0x34
   11398:	movw	r1, #29712	; 0x7410
   1139c:	movt	r1, #1
   113a0:	ldr	r4, [sp, #56]	; 0x38
   113a4:	mov	r0, r3
   113a8:	str	r3, [sp, #40]	; 0x28
   113ac:	bl	10d40 <strcmp@plt>
   113b0:	cmp	r0, #0
   113b4:	bne	11a14 <__assert_fail@plt+0xa58>
   113b8:	movw	r1, #29712	; 0x7410
   113bc:	movt	r1, #1
   113c0:	mov	r0, r4
   113c4:	bl	10d40 <strcmp@plt>
   113c8:	cmp	r0, #0
   113cc:	beq	113f4 <__assert_fail@plt+0x438>
   113d0:	movw	r3, #33124	; 0x8164
   113d4:	movt	r3, #2
   113d8:	movw	r1, #30116	; 0x75a4
   113dc:	movt	r1, #1
   113e0:	ldr	r2, [r3]
   113e4:	mov	r0, r4
   113e8:	bl	12bb4 <__assert_fail@plt+0x1bf8>
   113ec:	subs	r6, r0, #0
   113f0:	beq	11c04 <__assert_fail@plt+0xc48>
   113f4:	movw	r7, #33120	; 0x8160
   113f8:	movt	r7, #2
   113fc:	mov	r1, #2
   11400:	ldr	r0, [r7]
   11404:	bl	12984 <__assert_fail@plt+0x19c8>
   11408:	add	r0, sp, #60	; 0x3c
   1140c:	bl	12e20 <__assert_fail@plt+0x1e64>
   11410:	add	r0, sp, #72	; 0x48
   11414:	bl	12e20 <__assert_fail@plt+0x1e64>
   11418:	ldrb	r3, [r5, #21]
   1141c:	cmp	r3, #0
   11420:	beq	11430 <__assert_fail@plt+0x474>
   11424:	ldrb	fp, [r5, #20]
   11428:	cmp	fp, #0
   1142c:	bne	11828 <__assert_fail@plt+0x86c>
   11430:	add	r0, sp, #72	; 0x48
   11434:	ldr	r1, [r7]
   11438:	ldr	r2, [sp, #16]
   1143c:	bl	12e34 <__assert_fail@plt+0x1e78>
   11440:	cmp	r0, #0
   11444:	beq	116ec <__assert_fail@plt+0x730>
   11448:	add	r3, sp, #72	; 0x48
   1144c:	ldr	r8, [sp, #76]	; 0x4c
   11450:	add	r6, sp, #60	; 0x3c
   11454:	mov	sl, #0
   11458:	mov	fp, #0
   1145c:	ldr	r4, [sp, #80]	; 0x50
   11460:	str	r3, [sp, #20]
   11464:	movw	r3, #33124	; 0x8164
   11468:	movt	r3, #2
   1146c:	str	r3, [sp, #44]	; 0x2c
   11470:	mov	r3, #1
   11474:	mov	r0, r8
   11478:	mov	r1, r4
   1147c:	str	r3, [sp, #36]	; 0x24
   11480:	bl	11eb8 <__assert_fail@plt+0xefc>
   11484:	sub	r4, r0, r4
   11488:	sub	r3, r8, #1
   1148c:	str	r0, [sp, #24]
   11490:	sub	r3, r3, r4
   11494:	mov	r8, r7
   11498:	mov	r7, r5
   1149c:	str	r3, [sp, #28]
   114a0:	ldr	r1, [r8]
   114a4:	ldr	r3, [r1]
   114a8:	ands	r3, r3, #16
   114ac:	str	r3, [sp, #32]
   114b0:	bne	116ac <__assert_fail@plt+0x6f0>
   114b4:	mov	r0, r6
   114b8:	ldr	r2, [sp, #16]
   114bc:	bl	12e34 <__assert_fail@plt+0x1e78>
   114c0:	cmp	r0, #0
   114c4:	beq	117d8 <__assert_fail@plt+0x81c>
   114c8:	ldmib	r6, {r4, r9}
   114cc:	mov	r1, r9
   114d0:	mov	r0, r4
   114d4:	bl	11eb8 <__assert_fail@plt+0xefc>
   114d8:	sub	r9, r0, r9
   114dc:	sub	r4, r4, #1
   114e0:	ldr	r1, [sp, #24]
   114e4:	sub	r4, r4, r9
   114e8:	mov	r5, r0
   114ec:	mov	r2, r4
   114f0:	ldr	r3, [sp, #28]
   114f4:	bl	11d30 <__assert_fail@plt+0xd74>
   114f8:	eor	r3, r0, #1
   114fc:	mvn	r1, #0
   11500:	ldr	r2, [r7, #24]
   11504:	uxtb	r3, r3
   11508:	mov	r9, r0
   1150c:	adds	sl, sl, r3
   11510:	mvn	r0, #0
   11514:	adc	fp, fp, #0
   11518:	cmp	fp, r1
   1151c:	cmpeq	sl, r0
   11520:	beq	115b8 <__assert_fail@plt+0x5fc>
   11524:	cmp	r2, #0
   11528:	beq	11610 <__assert_fail@plt+0x654>
   1152c:	cmp	r9, #0
   11530:	beq	11674 <__assert_fail@plt+0x6b8>
   11534:	orrs	r2, sl, fp
   11538:	ldr	r2, [sp, #20]
   1153c:	add	ip, r2, #4
   11540:	add	r2, r2, #8
   11544:	mov	r0, ip
   11548:	mov	r1, r2
   1154c:	bne	11a80 <__assert_fail@plt+0xac4>
   11550:	ldrb	r3, [r7, #21]
   11554:	cmp	r3, #0
   11558:	movne	sl, #0
   1155c:	movne	fp, #0
   11560:	beq	115f0 <__assert_fail@plt+0x634>
   11564:	mov	r2, sl
   11568:	mov	r3, fp
   1156c:	bl	11e48 <__assert_fail@plt+0xe8c>
   11570:	cmp	r9, #0
   11574:	bne	115f0 <__assert_fail@plt+0x634>
   11578:	mov	r3, r6
   1157c:	str	r5, [sp, #24]
   11580:	str	r4, [sp, #28]
   11584:	ldr	r6, [sp, #20]
   11588:	str	r3, [sp, #20]
   1158c:	b	114a0 <__assert_fail@plt+0x4e4>
   11590:	ldr	r3, [sp, #20]
   11594:	cmp	r3, #0
   11598:	bne	11bdc <__assert_fail@plt+0xc20>
   1159c:	ldr	r3, [r5, #8]
   115a0:	cmp	r3, #1
   115a4:	movwne	r1, #29996	; 0x752c
   115a8:	movne	r2, #5
   115ac:	movtne	r1, #1
   115b0:	beq	11394 <__assert_fail@plt+0x3d8>
   115b4:	b	11be8 <__assert_fail@plt+0xc2c>
   115b8:	cmp	r2, #0
   115bc:	beq	11648 <__assert_fail@plt+0x68c>
   115c0:	cmp	r9, #0
   115c4:	beq	11738 <__assert_fail@plt+0x77c>
   115c8:	ldr	r3, [sp, #32]
   115cc:	mvn	sl, #1
   115d0:	mvn	fp, #0
   115d4:	str	r3, [sp, #36]	; 0x24
   115d8:	ldr	r3, [sp, #20]
   115dc:	add	r0, r3, #4
   115e0:	add	r1, r3, #8
   115e4:	ldrb	r3, [r7, #20]
   115e8:	cmp	r3, #0
   115ec:	bne	11564 <__assert_fail@plt+0x5a8>
   115f0:	mov	r3, r6
   115f4:	mov	sl, #0
   115f8:	str	r5, [sp, #24]
   115fc:	mov	fp, #0
   11600:	str	r4, [sp, #28]
   11604:	ldr	r6, [sp, #20]
   11608:	str	r3, [sp, #20]
   1160c:	b	114a0 <__assert_fail@plt+0x4e4>
   11610:	cmp	r9, #0
   11614:	bne	11a68 <__assert_fail@plt+0xaac>
   11618:	ldrb	r2, [r7, #22]
   1161c:	cmp	r2, #0
   11620:	beq	114a0 <__assert_fail@plt+0x4e4>
   11624:	orrs	r2, sl, fp
   11628:	ldr	r2, [sp, #20]
   1162c:	add	r0, r2, #4
   11630:	add	r1, r2, #8
   11634:	bne	11b6c <__assert_fail@plt+0xbb0>
   11638:	ldrb	r3, [r7, #21]
   1163c:	cmp	r3, #0
   11640:	bne	11564 <__assert_fail@plt+0x5a8>
   11644:	b	11578 <__assert_fail@plt+0x5bc>
   11648:	cmp	r9, #0
   1164c:	bne	11a9c <__assert_fail@plt+0xae0>
   11650:	ldrb	r3, [r7, #22]
   11654:	cmp	r3, #0
   11658:	beq	11744 <__assert_fail@plt+0x788>
   1165c:	ldr	r3, [sp, #20]
   11660:	mvn	sl, #1
   11664:	mvn	fp, #0
   11668:	add	r0, r3, #4
   1166c:	add	r1, r3, #8
   11670:	b	11564 <__assert_fail@plt+0x5a8>
   11674:	cmp	fp, #0
   11678:	cmpeq	sl, #1
   1167c:	bne	11618 <__assert_fail@plt+0x65c>
   11680:	cmp	r2, #1
   11684:	beq	119ac <__assert_fail@plt+0x9f0>
   11688:	cmp	r2, #2
   1168c:	beq	119a0 <__assert_fail@plt+0x9e4>
   11690:	ldrb	r3, [r7, #22]
   11694:	cmp	r3, #0
   11698:	beq	114a0 <__assert_fail@plt+0x4e4>
   1169c:	ldr	r3, [sp, #20]
   116a0:	add	r0, r3, #4
   116a4:	add	r1, r3, #8
   116a8:	b	11564 <__assert_fail@plt+0x5a8>
   116ac:	mov	r5, r7
   116b0:	mov	r7, r8
   116b4:	orrs	r3, sl, fp
   116b8:	ldrbeq	r3, [r5, #21]
   116bc:	eoreq	r3, r3, #1
   116c0:	beq	116cc <__assert_fail@plt+0x710>
   116c4:	ldrb	r3, [r5, #20]
   116c8:	eor	r3, r3, #1
   116cc:	cmp	r3, #0
   116d0:	bne	116ec <__assert_fail@plt+0x730>
   116d4:	ldr	r0, [sp, #20]
   116d8:	mov	r2, sl
   116dc:	mov	r3, fp
   116e0:	add	r1, r0, #8
   116e4:	add	r0, r0, #4
   116e8:	bl	11e48 <__assert_fail@plt+0xe8c>
   116ec:	ldr	r0, [r7]
   116f0:	ldr	r3, [r0]
   116f4:	tst	r3, #32
   116f8:	bne	117f0 <__assert_fail@plt+0x834>
   116fc:	bl	129d4 <__assert_fail@plt+0x1a18>
   11700:	subs	r4, r0, #0
   11704:	bne	117f0 <__assert_fail@plt+0x834>
   11708:	ldr	r0, [sp, #68]	; 0x44
   1170c:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   11710:	ldr	r0, [sp, #80]	; 0x50
   11714:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   11718:	mov	r0, r4
   1171c:	add	sp, sp, #92	; 0x5c
   11720:	ldrd	r4, [sp]
   11724:	ldrd	r6, [sp, #8]
   11728:	ldrd	r8, [sp, #16]
   1172c:	ldrd	sl, [sp, #24]
   11730:	add	sp, sp, #32
   11734:	pop	{pc}		; (ldr pc, [sp], #4)
   11738:	ldrb	r3, [r7, #22]
   1173c:	cmp	r3, #0
   11740:	bne	11920 <__assert_fail@plt+0x964>
   11744:	mvn	sl, #1
   11748:	mvn	fp, #0
   1174c:	b	114a0 <__assert_fail@plt+0x4e4>
   11750:	ldr	r3, [sp, #24]
   11754:	cmp	r3, #2
   11758:	subeq	r2, r0, #48	; 0x30
   1175c:	beq	119f8 <__assert_fail@plt+0xa3c>
   11760:	ldr	r3, [r5, #12]
   11764:	ldr	r2, [sp, #32]
   11768:	cmp	r3, r2
   1176c:	bls	119e4 <__assert_fail@plt+0xa28>
   11770:	mvn	r3, #0
   11774:	mov	r2, #1
   11778:	str	r3, [r5, #12]
   1177c:	str	r2, [sp, #24]
   11780:	b	110f0 <__assert_fail@plt+0x134>
   11784:	mov	r3, #1
   11788:	strb	r3, [r5, #4]
   1178c:	b	11100 <__assert_fail@plt+0x144>
   11790:	mov	r3, #1
   11794:	strb	r8, [r5, #20]
   11798:	str	r3, [sp, #20]
   1179c:	b	11100 <__assert_fail@plt+0x144>
   117a0:	mov	r3, #1
   117a4:	strb	r8, [r5, #21]
   117a8:	str	r3, [sp, #20]
   117ac:	b	11100 <__assert_fail@plt+0x144>
   117b0:	movw	r3, #33128	; 0x8168
   117b4:	movt	r3, #2
   117b8:	movw	r1, #29808	; 0x7470
   117bc:	movt	r1, #1
   117c0:	ldr	r0, [r3]
   117c4:	bl	11dbc <__assert_fail@plt+0xe00>
   117c8:	mov	r3, #2
   117cc:	str	r0, [r5, #12]
   117d0:	str	r3, [sp, #24]
   117d4:	b	11100 <__assert_fail@plt+0x144>
   117d8:	ldr	r3, [r8]
   117dc:	mov	r5, r7
   117e0:	mov	r7, r8
   117e4:	ldr	r3, [r3]
   117e8:	tst	r3, #32
   117ec:	beq	116b4 <__assert_fail@plt+0x6f8>
   117f0:	mov	r2, #5
   117f4:	movw	r1, #30120	; 0x75a8
   117f8:	movt	r1, #1
   117fc:	mov	r0, #0
   11800:	bl	10dd0 <dcgettext@plt>
   11804:	mov	r4, r0
   11808:	mov	r0, #4
   1180c:	ldr	r1, [sp, #40]	; 0x28
   11810:	bl	1507c <__assert_fail@plt+0x40c0>
   11814:	mov	r3, r0
   11818:	mov	r2, r4
   1181c:	mov	r1, #0
   11820:	mov	r0, #1
   11824:	bl	10e48 <error@plt>
   11828:	ldr	r3, [r5, #8]
   1182c:	cmp	r3, #1
   11830:	bne	11430 <__assert_fail@plt+0x474>
   11834:	add	r3, sp, #72	; 0x48
   11838:	mov	sl, #0
   1183c:	add	r4, sp, #60	; 0x3c
   11840:	str	r3, [sp, #20]
   11844:	movw	r3, #33124	; 0x8164
   11848:	movt	r3, #2
   1184c:	str	sl, [sp, #24]
   11850:	str	r3, [sp, #28]
   11854:	ldr	r1, [r7]
   11858:	ldr	r3, [r1]
   1185c:	tst	r3, #16
   11860:	bne	11ae8 <__assert_fail@plt+0xb2c>
   11864:	mov	r0, r4
   11868:	ldr	r2, [sp, #16]
   1186c:	bl	12e34 <__assert_fail@plt+0x1e78>
   11870:	cmp	r0, #0
   11874:	beq	11ae8 <__assert_fail@plt+0xb2c>
   11878:	ldr	r9, [r4, #4]
   1187c:	ldr	r6, [r4, #8]
   11880:	mov	r0, r9
   11884:	mov	r1, r6
   11888:	bl	11eb8 <__assert_fail@plt+0xefc>
   1188c:	sub	r6, r0, r6
   11890:	sub	r3, r9, #1
   11894:	ldr	r9, [r5, #28]
   11898:	cmp	sl, #0
   1189c:	mov	r8, r0
   118a0:	sub	r6, r3, r6
   118a4:	beq	118c0 <__assert_fail@plt+0x904>
   118a8:	mov	r2, r6
   118ac:	mov	r1, sl
   118b0:	ldr	r3, [sp, #36]	; 0x24
   118b4:	bl	11d30 <__assert_fail@plt+0xd74>
   118b8:	cmp	r0, #0
   118bc:	beq	11a08 <__assert_fail@plt+0xa4c>
   118c0:	cmp	r9, #0
   118c4:	beq	118ec <__assert_fail@plt+0x930>
   118c8:	cmp	r9, #4
   118cc:	cmpne	r9, #1
   118d0:	beq	11ab4 <__assert_fail@plt+0xaf8>
   118d4:	ldr	r3, [sp, #24]
   118d8:	cmp	r3, #0
   118dc:	beq	118ec <__assert_fail@plt+0x930>
   118e0:	sub	r9, r9, #2
   118e4:	cmp	r9, #1
   118e8:	bls	11ab4 <__assert_fail@plt+0xaf8>
   118ec:	ldr	r3, [sp, #28]
   118f0:	mov	r1, #1
   118f4:	mov	sl, r8
   118f8:	str	fp, [sp, #24]
   118fc:	ldr	r2, [r4, #4]
   11900:	str	r6, [sp, #36]	; 0x24
   11904:	ldr	r0, [r4, #8]
   11908:	ldr	r3, [r3]
   1190c:	bl	10dac <fwrite_unlocked@plt>
   11910:	mov	r3, r4
   11914:	ldr	r4, [sp, #20]
   11918:	str	r3, [sp, #20]
   1191c:	b	11854 <__assert_fail@plt+0x898>
   11920:	ldr	r3, [sp, #20]
   11924:	mvn	sl, #1
   11928:	mvn	fp, #0
   1192c:	add	r0, r3, #4
   11930:	add	r1, r3, #8
   11934:	ldrb	r3, [r7, #22]
   11938:	cmp	r3, #0
   1193c:	beq	11578 <__assert_fail@plt+0x5bc>
   11940:	b	11564 <__assert_fail@plt+0x5a8>
   11944:	bl	12fdc <__assert_fail@plt+0x2020>
   11948:	sub	r0, r0, #199680	; 0x30c00
   1194c:	sub	r0, r0, #432	; 0x1b0
   11950:	cmp	r0, #696	; 0x2b8
   11954:	bls	111b8 <__assert_fail@plt+0x1fc>
   11958:	movw	r1, #28100	; 0x6dc4
   1195c:	movt	r1, #1
   11960:	ldr	r0, [r8]
   11964:	add	r3, sp, #72	; 0x48
   11968:	mov	r2, #10
   1196c:	str	r1, [sp]
   11970:	mov	r1, #0
   11974:	bl	15d98 <__assert_fail@plt+0x4ddc>
   11978:	cmp	r0, #0
   1197c:	bne	111b8 <__assert_fail@plt+0x1fc>
   11980:	ldrd	r2, [sp, #72]	; 0x48
   11984:	mov	r1, #0
   11988:	mvn	r0, #0
   1198c:	cmp	r3, r1
   11990:	cmpeq	r2, r0
   11994:	strls	r2, [r5, #16]
   11998:	bls	11100 <__assert_fail@plt+0x144>
   1199c:	b	111b8 <__assert_fail@plt+0x1fc>
   119a0:	ldr	r3, [sp, #36]	; 0x24
   119a4:	cmp	r3, #0
   119a8:	bne	11b40 <__assert_fail@plt+0xb84>
   119ac:	ldr	r3, [sp, #44]	; 0x2c
   119b0:	ldr	r0, [r3]
   119b4:	ldr	r3, [r0, #20]
   119b8:	ldr	r2, [r0, #24]
   119bc:	cmp	r3, r2
   119c0:	bcs	11b60 <__assert_fail@plt+0xba4>
   119c4:	add	r1, r3, #1
   119c8:	ldrb	r2, [r7, #22]
   119cc:	str	r1, [r0, #20]
   119d0:	ldr	r1, [sp, #16]
   119d4:	cmp	r2, #0
   119d8:	strb	r1, [r3]
   119dc:	beq	114a0 <__assert_fail@plt+0x4e4>
   119e0:	b	1169c <__assert_fail@plt+0x6e0>
   119e4:	mov	r2, #10
   119e8:	sub	r1, r0, #48	; 0x30
   119ec:	mla	r2, r2, r3, r1
   119f0:	cmp	r3, r2
   119f4:	bhi	11770 <__assert_fail@plt+0x7b4>
   119f8:	mov	r3, #1
   119fc:	str	r2, [r5, #12]
   11a00:	str	r3, [sp, #24]
   11a04:	b	110f0 <__assert_fail@plt+0x134>
   11a08:	cmp	r9, #0
   11a0c:	bne	118ec <__assert_fail@plt+0x930>
   11a10:	b	11854 <__assert_fail@plt+0x898>
   11a14:	movw	r3, #33120	; 0x8160
   11a18:	movt	r3, #2
   11a1c:	ldr	r0, [sp, #40]	; 0x28
   11a20:	movw	r1, #30112	; 0x75a0
   11a24:	movt	r1, #1
   11a28:	ldr	r2, [r3]
   11a2c:	bl	12bb4 <__assert_fail@plt+0x1bf8>
   11a30:	subs	r6, r0, #0
   11a34:	bne	113b8 <__assert_fail@plt+0x3fc>
   11a38:	bl	10ef0 <__errno_location@plt>
   11a3c:	ldr	r4, [r0]
   11a40:	mov	r1, #3
   11a44:	mov	r0, r6
   11a48:	ldr	r2, [sp, #40]	; 0x28
   11a4c:	bl	15158 <__assert_fail@plt+0x419c>
   11a50:	mov	r3, r0
   11a54:	movw	r2, #27828	; 0x6cb4
   11a58:	movt	r2, #1
   11a5c:	mov	r0, #1
   11a60:	mov	r1, r4
   11a64:	bl	10e48 <error@plt>
   11a68:	orrs	r3, sl, fp
   11a6c:	ldr	r3, [sp, #20]
   11a70:	add	r0, r3, #4
   11a74:	add	r1, r3, #8
   11a78:	beq	11550 <__assert_fail@plt+0x594>
   11a7c:	b	115e4 <__assert_fail@plt+0x628>
   11a80:	ldr	r1, [sp, #32]
   11a84:	str	r1, [sp, #36]	; 0x24
   11a88:	cmp	r3, #0
   11a8c:	mov	r0, ip
   11a90:	mov	r1, r2
   11a94:	beq	115e4 <__assert_fail@plt+0x628>
   11a98:	b	11934 <__assert_fail@plt+0x978>
   11a9c:	ldr	r2, [sp, #20]
   11aa0:	mvn	sl, #1
   11aa4:	mvn	fp, #0
   11aa8:	add	ip, r2, #4
   11aac:	add	r2, r2, #8
   11ab0:	b	11a88 <__assert_fail@plt+0xacc>
   11ab4:	ldr	r3, [sp, #28]
   11ab8:	ldr	r0, [r3]
   11abc:	ldr	r3, [r0, #20]
   11ac0:	ldr	r2, [r0, #24]
   11ac4:	cmp	r3, r2
   11ac8:	addcc	r2, r3, #1
   11acc:	strcc	r2, [r0, #20]
   11ad0:	ldrcc	r2, [sp, #16]
   11ad4:	strbcc	r2, [r3]
   11ad8:	bcc	118ec <__assert_fail@plt+0x930>
   11adc:	ldr	r1, [sp, #16]
   11ae0:	bl	10f5c <__overflow@plt>
   11ae4:	b	118ec <__assert_fail@plt+0x930>
   11ae8:	ldr	r3, [r5, #28]
   11aec:	sub	r3, r3, #2
   11af0:	bics	r3, r3, #2
   11af4:	ldr	r3, [sp, #24]
   11af8:	movne	r3, #0
   11afc:	andeq	r3, r3, #1
   11b00:	cmp	r3, #0
   11b04:	beq	116ec <__assert_fail@plt+0x730>
   11b08:	movw	r3, #33124	; 0x8164
   11b0c:	movt	r3, #2
   11b10:	ldr	r0, [r3]
   11b14:	ldr	r3, [r0, #20]
   11b18:	ldr	r2, [r0, #24]
   11b1c:	cmp	r3, r2
   11b20:	addcc	r2, r3, #1
   11b24:	strcc	r2, [r0, #20]
   11b28:	ldrcc	r2, [sp, #16]
   11b2c:	strbcc	r2, [r3]
   11b30:	bcc	116ec <__assert_fail@plt+0x730>
   11b34:	ldr	r1, [sp, #16]
   11b38:	bl	10f5c <__overflow@plt>
   11b3c:	b	116ec <__assert_fail@plt+0x730>
   11b40:	ldrb	r3, [r7, #22]
   11b44:	cmp	r3, #0
   11b48:	beq	114a0 <__assert_fail@plt+0x4e4>
   11b4c:	str	r3, [sp, #36]	; 0x24
   11b50:	ldr	r3, [sp, #20]
   11b54:	add	r0, r3, #4
   11b58:	add	r1, r3, #8
   11b5c:	b	11564 <__assert_fail@plt+0x5a8>
   11b60:	ldr	r1, [sp, #16]
   11b64:	bl	10f5c <__overflow@plt>
   11b68:	b	11690 <__assert_fail@plt+0x6d4>
   11b6c:	cmp	r3, #0
   11b70:	beq	115e4 <__assert_fail@plt+0x628>
   11b74:	b	11564 <__assert_fail@plt+0x5a8>
   11b78:	movw	r1, #29764	; 0x7444
   11b7c:	movt	r1, #1
   11b80:	mov	r2, #5
   11b84:	mov	r0, #0
   11b88:	bl	10dd0 <dcgettext@plt>
   11b8c:	ldr	r3, [r7]
   11b90:	mov	r4, r0
   11b94:	ldr	r0, [r9, r3, lsl #2]
   11b98:	bl	15330 <__assert_fail@plt+0x4374>
   11b9c:	mov	r1, #0
   11ba0:	mov	r3, r0
   11ba4:	mov	r2, r4
   11ba8:	mov	r0, r1
   11bac:	bl	10e48 <error@plt>
   11bb0:	b	111e0 <__assert_fail@plt+0x224>
   11bb4:	mov	r0, r8
   11bb8:	bl	11fd4 <__assert_fail@plt+0x1018>
   11bbc:	movw	r1, #29764	; 0x7444
   11bc0:	movt	r1, #1
   11bc4:	mov	r2, #5
   11bc8:	mov	r0, #0
   11bcc:	bl	10dd0 <dcgettext@plt>
   11bd0:	mov	r4, r0
   11bd4:	ldr	r0, [r8]
   11bd8:	b	11b98 <__assert_fail@plt+0xbdc>
   11bdc:	movw	r1, #29948	; 0x74fc
   11be0:	movt	r1, #1
   11be4:	mov	r2, #5
   11be8:	mov	r0, #0
   11bec:	bl	10dd0 <dcgettext@plt>
   11bf0:	mov	r1, #0
   11bf4:	mov	r2, r0
   11bf8:	mov	r0, r1
   11bfc:	bl	10e48 <error@plt>
   11c00:	b	111e0 <__assert_fail@plt+0x224>
   11c04:	bl	10ef0 <__errno_location@plt>
   11c08:	ldr	r5, [r0]
   11c0c:	mov	r2, r4
   11c10:	mov	r1, #3
   11c14:	mov	r0, r6
   11c18:	bl	15158 <__assert_fail@plt+0x419c>
   11c1c:	mov	r3, r0
   11c20:	movw	r2, #27828	; 0x6cb4
   11c24:	movt	r2, #1
   11c28:	mov	r0, #1
   11c2c:	mov	r1, r5
   11c30:	bl	10e48 <error@plt>
   11c34:	andeq	r6, r1, r0, lsr #23
   11c38:	andeq	r6, r1, ip, lsl #25
   11c3c:	andeq	r6, r1, r0, ror ip
   11c40:	mov	fp, #0
   11c44:	mov	lr, #0
   11c48:	pop	{r1}		; (ldr r1, [sp], #4)
   11c4c:	mov	r2, sp
   11c50:	push	{r2}		; (str r2, [sp, #-4]!)
   11c54:	push	{r0}		; (str r0, [sp, #-4]!)
   11c58:	ldr	ip, [pc, #16]	; 11c70 <__assert_fail@plt+0xcb4>
   11c5c:	push	{ip}		; (str ip, [sp, #-4]!)
   11c60:	ldr	r0, [pc, #12]	; 11c74 <__assert_fail@plt+0xcb8>
   11c64:	ldr	r3, [pc, #12]	; 11c78 <__assert_fail@plt+0xcbc>
   11c68:	bl	10e78 <__libc_start_main@plt>
   11c6c:	bl	10fa4 <abort@plt>
   11c70:	andeq	r6, r1, r0, asr #22
   11c74:	andeq	r0, r1, r8, asr #31
   11c78:	andeq	r6, r1, r0, ror #21
   11c7c:	ldr	r3, [pc, #20]	; 11c98 <__assert_fail@plt+0xcdc>
   11c80:	ldr	r2, [pc, #20]	; 11c9c <__assert_fail@plt+0xce0>
   11c84:	add	r3, pc, r3
   11c88:	ldr	r2, [r3, r2]
   11c8c:	cmp	r2, #0
   11c90:	bxeq	lr
   11c94:	b	10e9c <__gmon_start__@plt>
   11c98:	andeq	r6, r1, r4, ror r3
   11c9c:	andeq	r0, r0, ip, ror #1
   11ca0:	ldr	r0, [pc, #24]	; 11cc0 <__assert_fail@plt+0xd04>
   11ca4:	ldr	r3, [pc, #24]	; 11cc4 <__assert_fail@plt+0xd08>
   11ca8:	cmp	r3, r0
   11cac:	bxeq	lr
   11cb0:	ldr	r3, [pc, #16]	; 11cc8 <__assert_fail@plt+0xd0c>
   11cb4:	cmp	r3, #0
   11cb8:	bxeq	lr
   11cbc:	bx	r3
   11cc0:	andeq	r8, r2, r4, asr #2
   11cc4:	andeq	r8, r2, r4, asr #2
   11cc8:	andeq	r0, r0, r0
   11ccc:	ldr	r0, [pc, #36]	; 11cf8 <__assert_fail@plt+0xd3c>
   11cd0:	ldr	r1, [pc, #36]	; 11cfc <__assert_fail@plt+0xd40>
   11cd4:	sub	r1, r1, r0
   11cd8:	asr	r1, r1, #2
   11cdc:	add	r1, r1, r1, lsr #31
   11ce0:	asrs	r1, r1, #1
   11ce4:	bxeq	lr
   11ce8:	ldr	r3, [pc, #16]	; 11d00 <__assert_fail@plt+0xd44>
   11cec:	cmp	r3, #0
   11cf0:	bxeq	lr
   11cf4:	bx	r3
   11cf8:	andeq	r8, r2, r4, asr #2
   11cfc:	andeq	r8, r2, r4, asr #2
   11d00:	andeq	r0, r0, r0
   11d04:	push	{r4, lr}
   11d08:	ldr	r4, [pc, #24]	; 11d28 <__assert_fail@plt+0xd6c>
   11d0c:	ldrb	r3, [r4]
   11d10:	cmp	r3, #0
   11d14:	popne	{r4, pc}
   11d18:	bl	11ca0 <__assert_fail@plt+0xce4>
   11d1c:	mov	r3, #1
   11d20:	strb	r3, [r4]
   11d24:	pop	{r4, pc}
   11d28:	andeq	r8, r2, ip, ror #2
   11d2c:	b	11ccc <__assert_fail@plt+0xd10>
   11d30:	str	r4, [sp, #-8]!
   11d34:	str	lr, [sp, #4]
   11d38:	movw	lr, #33136	; 0x8170
   11d3c:	movt	lr, #2
   11d40:	ldr	ip, [lr]
   11d44:	ldrb	lr, [lr, #4]
   11d48:	cmp	ip, r2
   11d4c:	movcc	r2, ip
   11d50:	cmp	ip, r3
   11d54:	movcc	r3, ip
   11d58:	cmp	lr, #0
   11d5c:	beq	11d78 <__assert_fail@plt+0xdbc>
   11d60:	cmp	r2, r3
   11d64:	beq	11da0 <__assert_fail@plt+0xde4>
   11d68:	ldr	r4, [sp]
   11d6c:	add	sp, sp, #4
   11d70:	mov	r0, lr
   11d74:	pop	{pc}		; (ldr pc, [sp], #4)
   11d78:	cmp	r2, r3
   11d7c:	movne	lr, #1
   11d80:	bne	11d68 <__assert_fail@plt+0xdac>
   11d84:	bl	10db8 <memcmp@plt>
   11d88:	adds	lr, r0, #0
   11d8c:	ldr	r4, [sp]
   11d90:	add	sp, sp, #4
   11d94:	movne	lr, #1
   11d98:	mov	r0, lr
   11d9c:	pop	{pc}		; (ldr pc, [sp], #4)
   11da0:	bl	12f70 <__assert_fail@plt+0x1fb4>
   11da4:	adds	lr, r0, #0
   11da8:	ldr	r4, [sp]
   11dac:	add	sp, sp, #4
   11db0:	movne	lr, #1
   11db4:	mov	r0, lr
   11db8:	pop	{pc}		; (ldr pc, [sp], #4)
   11dbc:	movw	ip, #28100	; 0x6dc4
   11dc0:	movt	ip, #1
   11dc4:	strd	r4, [sp, #-12]!
   11dc8:	str	lr, [sp, #8]
   11dcc:	sub	sp, sp, #20
   11dd0:	mov	r5, r1
   11dd4:	mov	r2, #10
   11dd8:	mov	r1, #0
   11ddc:	add	r3, sp, #8
   11de0:	str	ip, [sp]
   11de4:	mov	r4, r0
   11de8:	bl	15d98 <__assert_fail@plt+0x4ddc>
   11dec:	cmp	r0, #1
   11df0:	bhi	11e1c <__assert_fail@plt+0xe60>
   11df4:	ldrd	r0, [sp, #8]
   11df8:	mov	r3, #0
   11dfc:	mvn	r2, #0
   11e00:	cmp	r1, r3
   11e04:	cmpeq	r0, r2
   11e08:	movhi	r0, r2
   11e0c:	add	sp, sp, #20
   11e10:	ldrd	r4, [sp]
   11e14:	add	sp, sp, #8
   11e18:	pop	{pc}		; (ldr pc, [sp], #4)
   11e1c:	mov	r1, r5
   11e20:	mov	r2, #5
   11e24:	mov	r0, #0
   11e28:	bl	10dd0 <dcgettext@plt>
   11e2c:	movw	r2, #27824	; 0x6cb0
   11e30:	movt	r2, #1
   11e34:	str	r0, [sp]
   11e38:	mov	r3, r4
   11e3c:	mov	r1, #0
   11e40:	mov	r0, #1
   11e44:	bl	10e48 <error@plt>
   11e48:	movw	ip, #33136	; 0x8170
   11e4c:	movt	ip, #2
   11e50:	strd	r4, [sp, #-16]!
   11e54:	ldr	ip, [ip, #8]
   11e58:	mov	r5, r0
   11e5c:	mov	r4, r1
   11e60:	str	r6, [sp, #8]
   11e64:	str	lr, [sp, #12]
   11e68:	cmp	ip, #0
   11e6c:	beq	11e9c <__assert_fail@plt+0xee0>
   11e70:	movw	r3, #33124	; 0x8164
   11e74:	movt	r3, #2
   11e78:	ldr	r0, [r4]
   11e7c:	mov	r1, #1
   11e80:	ldr	r2, [r5]
   11e84:	ldr	r3, [r3]
   11e88:	ldrd	r4, [sp]
   11e8c:	ldr	r6, [sp, #8]
   11e90:	ldr	lr, [sp, #12]
   11e94:	add	sp, sp, #16
   11e98:	b	10dac <fwrite_unlocked@plt>
   11e9c:	adds	r2, r2, #1
   11ea0:	movw	r1, #27832	; 0x6cb8
   11ea4:	movt	r1, #1
   11ea8:	adc	r3, r3, #0
   11eac:	mov	r0, #1
   11eb0:	bl	10f14 <__printf_chk@plt>
   11eb4:	b	11e70 <__assert_fail@plt+0xeb4>
   11eb8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11ebc:	sub	r4, r0, #1
   11ec0:	strd	r6, [sp, #8]
   11ec4:	movw	r6, #33136	; 0x8170
   11ec8:	movt	r6, #2
   11ecc:	ldr	r5, [r6, #12]
   11ed0:	adds	r2, r4, #0
   11ed4:	mov	r3, r4
   11ed8:	movne	r2, #1
   11edc:	mov	r7, r1
   11ee0:	strd	r8, [sp, #16]
   11ee4:	str	sl, [sp, #24]
   11ee8:	str	lr, [sp, #28]
   11eec:	cmp	r5, #0
   11ef0:	moveq	r2, #0
   11ef4:	cmp	r2, #0
   11ef8:	beq	11f88 <__assert_fail@plt+0xfcc>
   11efc:	bl	10ec0 <__ctype_b_loc@plt>
   11f00:	ldrb	ip, [r7]
   11f04:	mov	r2, #0
   11f08:	mov	r8, r2
   11f0c:	ldr	r9, [r0]
   11f10:	lsl	r3, ip, #1
   11f14:	ldrh	r3, [r9, r3]
   11f18:	and	r3, r3, #1
   11f1c:	add	r1, r7, r2
   11f20:	b	11f40 <__assert_fail@plt+0xf84>
   11f24:	add	r2, r2, #1
   11f28:	cmp	r4, r2
   11f2c:	bls	11f84 <__assert_fail@plt+0xfc8>
   11f30:	ldrb	ip, [r1, #1]!
   11f34:	lsl	r3, ip, #1
   11f38:	ldrh	r3, [r9, r3]
   11f3c:	and	r3, r3, #1
   11f40:	cmp	ip, #10
   11f44:	movne	r0, r3
   11f48:	orreq	r0, r3, #1
   11f4c:	cmp	r0, #0
   11f50:	bne	11f24 <__assert_fail@plt+0xf68>
   11f54:	cmp	r4, r2
   11f58:	bls	11f84 <__assert_fail@plt+0xfc8>
   11f5c:	add	r0, r7, r2
   11f60:	cmp	ip, #10
   11f64:	movne	lr, r3
   11f68:	orreq	lr, r3, #1
   11f6c:	cmp	lr, #0
   11f70:	beq	11fb4 <__assert_fail@plt+0xff8>
   11f74:	add	r8, r8, #1
   11f78:	cmp	r4, r2
   11f7c:	cmphi	r5, r8
   11f80:	bhi	11f1c <__assert_fail@plt+0xf60>
   11f84:	sub	r3, r4, r2
   11f88:	ldr	r0, [r6, #16]
   11f8c:	ldrd	r4, [sp]
   11f90:	ldrd	r8, [sp, #16]
   11f94:	cmp	r3, r0
   11f98:	addls	r3, r2, r3
   11f9c:	addhi	r3, r2, r0
   11fa0:	add	r0, r7, r3
   11fa4:	ldrd	r6, [sp, #8]
   11fa8:	ldr	sl, [sp, #24]
   11fac:	add	sp, sp, #28
   11fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   11fb4:	add	r2, r2, #1
   11fb8:	cmp	r2, r4
   11fbc:	beq	11f84 <__assert_fail@plt+0xfc8>
   11fc0:	ldrb	ip, [r0, #1]!
   11fc4:	lsl	r3, ip, #1
   11fc8:	ldrh	r3, [r9, r3]
   11fcc:	and	r3, r3, #1
   11fd0:	b	11f60 <__assert_fail@plt+0xfa4>
   11fd4:	subs	r6, r0, #0
   11fd8:	str	r7, [sp, #-8]!
   11fdc:	str	lr, [sp, #4]
   11fe0:	sub	sp, sp, #56	; 0x38
   11fe4:	beq	1202c <__assert_fail@plt+0x1070>
   11fe8:	movw	r3, #33112	; 0x8158
   11fec:	movt	r3, #2
   11ff0:	ldr	r4, [r3]
   11ff4:	mov	r2, #5
   11ff8:	movw	r1, #27848	; 0x6cc8
   11ffc:	movt	r1, #1
   12000:	mov	r0, #0
   12004:	bl	10dd0 <dcgettext@plt>
   12008:	movw	r3, #33176	; 0x8198
   1200c:	movt	r3, #2
   12010:	mov	r2, r0
   12014:	mov	r1, #1
   12018:	ldr	r3, [r3]
   1201c:	mov	r0, r4
   12020:	bl	10f2c <__fprintf_chk@plt>
   12024:	mov	r0, r6
   12028:	bl	10ecc <exit@plt>
   1202c:	mov	r2, #5
   12030:	movw	r1, #27888	; 0x6cf0
   12034:	movt	r1, #1
   12038:	movw	r7, #33124	; 0x8164
   1203c:	movt	r7, #2
   12040:	bl	10dd0 <dcgettext@plt>
   12044:	movw	r3, #33176	; 0x8198
   12048:	movt	r3, #2
   1204c:	mov	r1, r0
   12050:	mov	r0, #1
   12054:	ldr	r2, [r3]
   12058:	bl	10f14 <__printf_chk@plt>
   1205c:	mov	r2, #5
   12060:	movw	r1, #27928	; 0x6d18
   12064:	movt	r1, #1
   12068:	mov	r0, r6
   1206c:	bl	10dd0 <dcgettext@plt>
   12070:	ldr	r1, [r7]
   12074:	bl	10d34 <fputs_unlocked@plt>
   12078:	mov	r2, #5
   1207c:	movw	r1, #28104	; 0x6dc8
   12080:	movt	r1, #1
   12084:	mov	r0, r6
   12088:	bl	10dd0 <dcgettext@plt>
   1208c:	ldr	r1, [r7]
   12090:	bl	10d34 <fputs_unlocked@plt>
   12094:	mov	r2, #5
   12098:	movw	r1, #28180	; 0x6e14
   1209c:	movt	r1, #1
   120a0:	mov	r0, r6
   120a4:	bl	10dd0 <dcgettext@plt>
   120a8:	ldr	r1, [r7]
   120ac:	bl	10d34 <fputs_unlocked@plt>
   120b0:	mov	r2, #5
   120b4:	movw	r1, #28320	; 0x6ea0
   120b8:	movt	r1, #1
   120bc:	mov	r0, r6
   120c0:	bl	10dd0 <dcgettext@plt>
   120c4:	ldr	r1, [r7]
   120c8:	bl	10d34 <fputs_unlocked@plt>
   120cc:	mov	r2, #5
   120d0:	movw	r1, #28568	; 0x6f98
   120d4:	movt	r1, #1
   120d8:	mov	r0, r6
   120dc:	bl	10dd0 <dcgettext@plt>
   120e0:	ldr	r1, [r7]
   120e4:	bl	10d34 <fputs_unlocked@plt>
   120e8:	mov	r2, #5
   120ec:	movw	r1, #28628	; 0x6fd4
   120f0:	movt	r1, #1
   120f4:	mov	r0, r6
   120f8:	bl	10dd0 <dcgettext@plt>
   120fc:	ldr	r1, [r7]
   12100:	bl	10d34 <fputs_unlocked@plt>
   12104:	mov	r2, #5
   12108:	movw	r1, #28780	; 0x706c
   1210c:	movt	r1, #1
   12110:	mov	r0, r6
   12114:	bl	10dd0 <dcgettext@plt>
   12118:	ldr	r1, [r7]
   1211c:	bl	10d34 <fputs_unlocked@plt>
   12120:	mov	r2, #5
   12124:	movw	r1, #28960	; 0x7120
   12128:	movt	r1, #1
   1212c:	mov	r0, r6
   12130:	bl	10dd0 <dcgettext@plt>
   12134:	ldr	r1, [r7]
   12138:	bl	10d34 <fputs_unlocked@plt>
   1213c:	mov	r2, #5
   12140:	movw	r1, #29024	; 0x7160
   12144:	movt	r1, #1
   12148:	mov	r0, r6
   1214c:	bl	10dd0 <dcgettext@plt>
   12150:	ldr	r1, [r7]
   12154:	bl	10d34 <fputs_unlocked@plt>
   12158:	mov	r2, #5
   1215c:	movw	r1, #29092	; 0x71a4
   12160:	movt	r1, #1
   12164:	mov	r0, r6
   12168:	bl	10dd0 <dcgettext@plt>
   1216c:	ldr	r1, [r7]
   12170:	bl	10d34 <fputs_unlocked@plt>
   12174:	mov	r2, #5
   12178:	movw	r1, #29140	; 0x71d4
   1217c:	movt	r1, #1
   12180:	mov	r0, r6
   12184:	bl	10dd0 <dcgettext@plt>
   12188:	ldr	r1, [r7]
   1218c:	bl	10d34 <fputs_unlocked@plt>
   12190:	mov	r2, #5
   12194:	movw	r1, #29196	; 0x720c
   12198:	movt	r1, #1
   1219c:	mov	r0, r6
   121a0:	bl	10dd0 <dcgettext@plt>
   121a4:	ldr	r1, [r7]
   121a8:	bl	10d34 <fputs_unlocked@plt>
   121ac:	mov	r2, #5
   121b0:	movw	r1, #29316	; 0x7284
   121b4:	movt	r1, #1
   121b8:	mov	r0, r6
   121bc:	bl	10dd0 <dcgettext@plt>
   121c0:	ldr	r1, [r7]
   121c4:	bl	10d34 <fputs_unlocked@plt>
   121c8:	movw	lr, #27496	; 0x6b68
   121cc:	movt	lr, #1
   121d0:	ldr	ip, [lr]
   121d4:	ldr	r4, [lr, #4]
   121d8:	ldrd	r8, [lr, #8]
   121dc:	subs	r1, ip, #0
   121e0:	str	ip, [sp]
   121e4:	ldrd	r2, [lr, #16]
   121e8:	str	r4, [sp, #4]
   121ec:	ldrd	r4, [lr, #24]
   121f0:	strd	r8, [sp, #8]
   121f4:	ldrd	r8, [lr, #32]
   121f8:	strd	r2, [sp, #16]
   121fc:	ldrd	r2, [lr, #40]	; 0x28
   12200:	strd	r4, [sp, #24]
   12204:	ldrd	r4, [lr, #48]	; 0x30
   12208:	strd	r8, [sp, #32]
   1220c:	strd	r2, [sp, #40]	; 0x28
   12210:	strd	r4, [sp, #48]	; 0x30
   12214:	movwne	r5, #27840	; 0x6cc0
   12218:	mov	r4, sp
   1221c:	movtne	r5, #1
   12220:	bne	12318 <__assert_fail@plt+0x135c>
   12224:	ldr	r4, [r4, #4]
   12228:	movw	r1, #29460	; 0x7314
   1222c:	movt	r1, #1
   12230:	mov	r2, #5
   12234:	cmp	r4, #0
   12238:	beq	1232c <__assert_fail@plt+0x1370>
   1223c:	mov	r0, #0
   12240:	bl	10dd0 <dcgettext@plt>
   12244:	mov	r1, r0
   12248:	movw	r3, #29484	; 0x732c
   1224c:	movt	r3, #1
   12250:	movw	r2, #29524	; 0x7354
   12254:	movt	r2, #1
   12258:	mov	r0, #1
   1225c:	bl	10f14 <__printf_chk@plt>
   12260:	mov	r1, #0
   12264:	mov	r0, #5
   12268:	bl	10f68 <setlocale@plt>
   1226c:	cmp	r0, #0
   12270:	movweq	r5, #27840	; 0x6cc0
   12274:	movteq	r5, #1
   12278:	beq	1229c <__assert_fail@plt+0x12e0>
   1227c:	movw	r1, #29540	; 0x7364
   12280:	movt	r1, #1
   12284:	mov	r2, #3
   12288:	movw	r5, #27840	; 0x6cc0
   1228c:	movt	r5, #1
   12290:	bl	10f98 <strncmp@plt>
   12294:	cmp	r0, #0
   12298:	bne	123e4 <__assert_fail@plt+0x1428>
   1229c:	mov	r2, #5
   122a0:	movw	r1, #29616	; 0x73b0
   122a4:	movt	r1, #1
   122a8:	mov	r0, #0
   122ac:	bl	10dd0 <dcgettext@plt>
   122b0:	mov	r1, r0
   122b4:	movw	r3, #27840	; 0x6cc0
   122b8:	movt	r3, #1
   122bc:	movw	r2, #29484	; 0x732c
   122c0:	movt	r2, #1
   122c4:	mov	r0, #1
   122c8:	bl	10f14 <__printf_chk@plt>
   122cc:	mov	r2, #5
   122d0:	movw	r1, #29644	; 0x73cc
   122d4:	movt	r1, #1
   122d8:	mov	r0, #0
   122dc:	bl	10dd0 <dcgettext@plt>
   122e0:	movw	r2, #30148	; 0x75c4
   122e4:	movt	r2, #1
   122e8:	cmp	r4, r5
   122ec:	movw	r3, #28100	; 0x6dc4
   122f0:	movt	r3, #1
   122f4:	mov	r1, r0
   122f8:	moveq	r3, r2
   122fc:	mov	r2, r4
   12300:	mov	r0, #1
   12304:	bl	10f14 <__printf_chk@plt>
   12308:	b	12024 <__assert_fail@plt+0x1068>
   1230c:	ldr	r1, [r4, #8]!
   12310:	cmp	r1, #0
   12314:	beq	12224 <__assert_fail@plt+0x1268>
   12318:	mov	r0, r5
   1231c:	bl	10d40 <strcmp@plt>
   12320:	cmp	r0, #0
   12324:	bne	1230c <__assert_fail@plt+0x1350>
   12328:	b	12224 <__assert_fail@plt+0x1268>
   1232c:	mov	r0, r4
   12330:	bl	10dd0 <dcgettext@plt>
   12334:	mov	r1, r0
   12338:	movw	r3, #29484	; 0x732c
   1233c:	movt	r3, #1
   12340:	movw	r2, #29524	; 0x7354
   12344:	movt	r2, #1
   12348:	mov	r0, #1
   1234c:	bl	10f14 <__printf_chk@plt>
   12350:	mov	r1, r4
   12354:	mov	r0, #5
   12358:	bl	10f68 <setlocale@plt>
   1235c:	cmp	r0, #0
   12360:	beq	1237c <__assert_fail@plt+0x13c0>
   12364:	movw	r1, #29540	; 0x7364
   12368:	movt	r1, #1
   1236c:	mov	r2, #3
   12370:	bl	10f98 <strncmp@plt>
   12374:	cmp	r0, #0
   12378:	bne	123d8 <__assert_fail@plt+0x141c>
   1237c:	mov	r2, #5
   12380:	movw	r1, #29616	; 0x73b0
   12384:	movt	r1, #1
   12388:	mov	r0, #0
   1238c:	bl	10dd0 <dcgettext@plt>
   12390:	mov	r1, r0
   12394:	movw	r3, #27840	; 0x6cc0
   12398:	movt	r3, #1
   1239c:	movw	r2, #29484	; 0x732c
   123a0:	movt	r2, #1
   123a4:	mov	r0, #1
   123a8:	bl	10f14 <__printf_chk@plt>
   123ac:	movw	r1, #29644	; 0x73cc
   123b0:	movt	r1, #1
   123b4:	mov	r2, #5
   123b8:	mov	r0, #0
   123bc:	bl	10dd0 <dcgettext@plt>
   123c0:	movw	r4, #27840	; 0x6cc0
   123c4:	movt	r4, #1
   123c8:	movw	r3, #30148	; 0x75c4
   123cc:	movt	r3, #1
   123d0:	mov	r1, r0
   123d4:	b	122fc <__assert_fail@plt+0x1340>
   123d8:	movw	r5, #27840	; 0x6cc0
   123dc:	movt	r5, #1
   123e0:	mov	r4, r5
   123e4:	mov	r2, #5
   123e8:	movw	r1, #29544	; 0x7368
   123ec:	movt	r1, #1
   123f0:	mov	r0, #0
   123f4:	bl	10dd0 <dcgettext@plt>
   123f8:	ldr	r1, [r7]
   123fc:	bl	10d34 <fputs_unlocked@plt>
   12400:	b	1229c <__assert_fail@plt+0x12e0>
   12404:	mov	r0, #1
   12408:	b	11fd4 <__assert_fail@plt+0x1018>
   1240c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12410:	mov	r5, r1
   12414:	mov	r4, r2
   12418:	strd	r6, [sp, #8]
   1241c:	mov	r7, r3
   12420:	strd	r8, [sp, #16]
   12424:	strd	sl, [sp, #24]
   12428:	mov	sl, r0
   1242c:	str	lr, [sp, #32]
   12430:	sub	sp, sp, #12
   12434:	str	r2, [sp]
   12438:	bl	10ed8 <strlen@plt>
   1243c:	ldr	fp, [r5]
   12440:	cmp	fp, #0
   12444:	beq	12514 <__assert_fail@plt+0x1558>
   12448:	mov	r6, #0
   1244c:	mov	r8, r0
   12450:	mvn	r9, #0
   12454:	str	r6, [sp, #4]
   12458:	b	12484 <__assert_fail@plt+0x14c8>
   1245c:	bl	10db8 <memcmp@plt>
   12460:	ldr	r3, [sp, #4]
   12464:	cmp	r0, #0
   12468:	movne	r3, #1
   1246c:	str	r3, [sp, #4]
   12470:	ldr	fp, [r5, #4]!
   12474:	add	r6, r6, #1
   12478:	add	r4, r4, r7
   1247c:	cmp	fp, #0
   12480:	beq	124e0 <__assert_fail@plt+0x1524>
   12484:	mov	r2, r8
   12488:	mov	r1, sl
   1248c:	mov	r0, fp
   12490:	bl	10f98 <strncmp@plt>
   12494:	cmp	r0, #0
   12498:	mov	r0, fp
   1249c:	bne	12470 <__assert_fail@plt+0x14b4>
   124a0:	bl	10ed8 <strlen@plt>
   124a4:	ldr	r3, [sp]
   124a8:	cmp	r0, r8
   124ac:	mov	r2, r7
   124b0:	mov	r1, r4
   124b4:	mla	r0, r7, r9, r3
   124b8:	beq	1250c <__assert_fail@plt+0x1550>
   124bc:	cmn	r9, #1
   124c0:	moveq	r9, r6
   124c4:	beq	12470 <__assert_fail@plt+0x14b4>
   124c8:	ldr	r3, [sp]
   124cc:	cmp	r3, #0
   124d0:	bne	1245c <__assert_fail@plt+0x14a0>
   124d4:	mov	r3, #1
   124d8:	str	r3, [sp, #4]
   124dc:	b	12470 <__assert_fail@plt+0x14b4>
   124e0:	ldr	r3, [sp, #4]
   124e4:	cmp	r3, #0
   124e8:	mvnne	r9, #1
   124ec:	mov	r0, r9
   124f0:	add	sp, sp, #12
   124f4:	ldrd	r4, [sp]
   124f8:	ldrd	r6, [sp, #8]
   124fc:	ldrd	r8, [sp, #16]
   12500:	ldrd	sl, [sp, #24]
   12504:	add	sp, sp, #32
   12508:	pop	{pc}		; (ldr pc, [sp], #4)
   1250c:	mov	r9, r6
   12510:	b	124ec <__assert_fail@plt+0x1530>
   12514:	mvn	r9, #0
   12518:	b	124ec <__assert_fail@plt+0x1530>
   1251c:	strd	r4, [sp, #-16]!
   12520:	str	r6, [sp, #8]
   12524:	mov	r6, r0
   12528:	ldr	r0, [r1]
   1252c:	str	lr, [sp, #12]
   12530:	cmp	r0, #0
   12534:	beq	12578 <__assert_fail@plt+0x15bc>
   12538:	mov	r4, r1
   1253c:	mov	r5, #0
   12540:	b	12554 <__assert_fail@plt+0x1598>
   12544:	ldr	r0, [r4, #4]!
   12548:	add	r5, r5, #1
   1254c:	cmp	r0, #0
   12550:	beq	12578 <__assert_fail@plt+0x15bc>
   12554:	mov	r1, r6
   12558:	bl	10d40 <strcmp@plt>
   1255c:	cmp	r0, #0
   12560:	bne	12544 <__assert_fail@plt+0x1588>
   12564:	mov	r0, r5
   12568:	ldrd	r4, [sp]
   1256c:	ldr	r6, [sp, #8]
   12570:	add	sp, sp, #12
   12574:	pop	{pc}		; (ldr pc, [sp], #4)
   12578:	ldrd	r4, [sp]
   1257c:	mvn	r0, #0
   12580:	ldr	r6, [sp, #8]
   12584:	add	sp, sp, #12
   12588:	pop	{pc}		; (ldr pc, [sp], #4)
   1258c:	cmn	r2, #1
   12590:	strd	r4, [sp, #-16]!
   12594:	mov	r5, r1
   12598:	movweq	r1, #30428	; 0x76dc
   1259c:	movwne	r1, #30456	; 0x76f8
   125a0:	str	r6, [sp, #8]
   125a4:	movteq	r1, #1
   125a8:	movtne	r1, #1
   125ac:	str	lr, [sp, #12]
   125b0:	mov	r6, r0
   125b4:	sub	sp, sp, #8
   125b8:	mov	r2, #5
   125bc:	mov	r0, #0
   125c0:	bl	10dd0 <dcgettext@plt>
   125c4:	mov	r4, r0
   125c8:	mov	r2, r5
   125cc:	mov	r1, #8
   125d0:	mov	r0, #0
   125d4:	bl	14ff0 <__assert_fail@plt+0x4034>
   125d8:	mov	r5, r0
   125dc:	mov	r1, r6
   125e0:	mov	r0, #1
   125e4:	bl	15320 <__assert_fail@plt+0x4364>
   125e8:	mov	r1, #0
   125ec:	mov	r3, r5
   125f0:	str	r0, [sp]
   125f4:	mov	r2, r4
   125f8:	mov	r0, r1
   125fc:	bl	10e48 <error@plt>
   12600:	add	sp, sp, #8
   12604:	ldrd	r4, [sp]
   12608:	ldr	r6, [sp, #8]
   1260c:	add	sp, sp, #12
   12610:	pop	{pc}		; (ldr pc, [sp], #4)
   12614:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12618:	mov	r4, r1
   1261c:	movw	r1, #30488	; 0x7718
   12620:	movt	r1, #1
   12624:	strd	r6, [sp, #8]
   12628:	mov	r6, r0
   1262c:	mov	r7, r2
   12630:	mov	r0, #0
   12634:	strd	r8, [sp, #16]
   12638:	mov	r2, #5
   1263c:	strd	sl, [sp, #24]
   12640:	movw	sl, #33112	; 0x8158
   12644:	movt	sl, #2
   12648:	str	lr, [sp, #32]
   1264c:	sub	sp, sp, #12
   12650:	bl	10dd0 <dcgettext@plt>
   12654:	ldr	r1, [sl]
   12658:	bl	10d34 <fputs_unlocked@plt>
   1265c:	ldr	fp, [r6]
   12660:	cmp	fp, #0
   12664:	beq	12704 <__assert_fail@plt+0x1748>
   12668:	movw	r3, #30512	; 0x7730
   1266c:	movt	r3, #1
   12670:	mov	r9, #0
   12674:	str	r3, [sp]
   12678:	movw	r3, #30520	; 0x7738
   1267c:	movt	r3, #1
   12680:	mov	r5, r9
   12684:	str	r3, [sp, #4]
   12688:	b	126c0 <__assert_fail@plt+0x1704>
   1268c:	mov	r0, fp
   12690:	mov	r9, r4
   12694:	bl	15330 <__assert_fail@plt+0x4374>
   12698:	mov	r3, r0
   1269c:	mov	r1, #1
   126a0:	ldr	r2, [sp]
   126a4:	mov	r0, r8
   126a8:	bl	10f2c <__fprintf_chk@plt>
   126ac:	ldr	fp, [r6, #4]!
   126b0:	add	r5, r5, #1
   126b4:	add	r4, r4, r7
   126b8:	cmp	fp, #0
   126bc:	beq	12704 <__assert_fail@plt+0x1748>
   126c0:	cmp	r5, #0
   126c4:	mov	r1, r4
   126c8:	ldr	r8, [sl]
   126cc:	mov	r2, r7
   126d0:	mov	r0, r9
   126d4:	beq	1268c <__assert_fail@plt+0x16d0>
   126d8:	bl	10db8 <memcmp@plt>
   126dc:	cmp	r0, #0
   126e0:	bne	1268c <__assert_fail@plt+0x16d0>
   126e4:	mov	r0, fp
   126e8:	bl	15330 <__assert_fail@plt+0x4374>
   126ec:	mov	r3, r0
   126f0:	mov	r1, #1
   126f4:	ldr	r2, [sp, #4]
   126f8:	mov	r0, r8
   126fc:	bl	10f2c <__fprintf_chk@plt>
   12700:	b	126ac <__assert_fail@plt+0x16f0>
   12704:	ldr	r0, [sl]
   12708:	ldr	r3, [r0, #20]
   1270c:	ldr	r2, [r0, #24]
   12710:	cmp	r3, r2
   12714:	bcs	12744 <__assert_fail@plt+0x1788>
   12718:	add	r1, r3, #1
   1271c:	mov	r2, #10
   12720:	str	r1, [r0, #20]
   12724:	strb	r2, [r3]
   12728:	add	sp, sp, #12
   1272c:	ldrd	r4, [sp]
   12730:	ldrd	r6, [sp, #8]
   12734:	ldrd	r8, [sp, #16]
   12738:	ldrd	sl, [sp, #24]
   1273c:	add	sp, sp, #32
   12740:	pop	{pc}		; (ldr pc, [sp], #4)
   12744:	mov	r1, #10
   12748:	add	sp, sp, #12
   1274c:	ldrd	r4, [sp]
   12750:	ldrd	r6, [sp, #8]
   12754:	ldrd	r8, [sp, #16]
   12758:	ldrd	sl, [sp, #24]
   1275c:	ldr	lr, [sp, #32]
   12760:	add	sp, sp, #36	; 0x24
   12764:	b	10f5c <__overflow@plt>
   12768:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1276c:	mov	r5, r1
   12770:	mov	r4, r2
   12774:	ldrb	ip, [sp, #32]
   12778:	strd	r6, [sp, #8]
   1277c:	mov	r7, r0
   12780:	mov	r6, r3
   12784:	str	r8, [sp, #16]
   12788:	str	lr, [sp, #20]
   1278c:	cmp	ip, #0
   12790:	beq	127c4 <__assert_fail@plt+0x1808>
   12794:	mov	r2, r3
   12798:	mov	r1, r4
   1279c:	ldr	r3, [sp, #24]
   127a0:	mov	r0, r5
   127a4:	bl	1240c <__assert_fail@plt+0x1450>
   127a8:	cmp	r0, #0
   127ac:	blt	127d4 <__assert_fail@plt+0x1818>
   127b0:	ldrd	r4, [sp]
   127b4:	ldrd	r6, [sp, #8]
   127b8:	ldr	r8, [sp, #16]
   127bc:	add	sp, sp, #20
   127c0:	pop	{pc}		; (ldr pc, [sp], #4)
   127c4:	mov	r1, r2
   127c8:	mov	r0, r5
   127cc:	bl	1251c <__assert_fail@plt+0x1560>
   127d0:	b	127a8 <__assert_fail@plt+0x17ec>
   127d4:	mov	r2, r0
   127d8:	mov	r1, r5
   127dc:	mov	r0, r7
   127e0:	bl	1258c <__assert_fail@plt+0x15d0>
   127e4:	mov	r0, r4
   127e8:	mov	r1, r6
   127ec:	ldr	r2, [sp, #24]
   127f0:	bl	12614 <__assert_fail@plt+0x1658>
   127f4:	ldr	r3, [sp, #28]
   127f8:	blx	r3
   127fc:	mvn	r0, #0
   12800:	b	127b0 <__assert_fail@plt+0x17f4>
   12804:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12808:	strd	r6, [sp, #8]
   1280c:	ldr	r7, [r1]
   12810:	str	r8, [sp, #16]
   12814:	str	lr, [sp, #20]
   12818:	cmp	r7, #0
   1281c:	beq	1285c <__assert_fail@plt+0x18a0>
   12820:	mov	r6, r3
   12824:	mov	r8, r0
   12828:	mov	r4, r2
   1282c:	mov	r5, r1
   12830:	b	12840 <__assert_fail@plt+0x1884>
   12834:	ldr	r7, [r5, #4]!
   12838:	cmp	r7, #0
   1283c:	beq	1285c <__assert_fail@plt+0x18a0>
   12840:	mov	r1, r4
   12844:	mov	r2, r6
   12848:	mov	r0, r8
   1284c:	add	r4, r4, r6
   12850:	bl	10db8 <memcmp@plt>
   12854:	cmp	r0, #0
   12858:	bne	12834 <__assert_fail@plt+0x1878>
   1285c:	mov	r0, r7
   12860:	ldrd	r4, [sp]
   12864:	ldrd	r6, [sp, #8]
   12868:	ldr	r8, [sp, #16]
   1286c:	add	sp, sp, #20
   12870:	pop	{pc}		; (ldr pc, [sp], #4)
   12874:	movw	r3, #33168	; 0x8190
   12878:	movt	r3, #2
   1287c:	str	r0, [r3]
   12880:	bx	lr
   12884:	movw	r3, #33168	; 0x8190
   12888:	movt	r3, #2
   1288c:	strb	r0, [r3, #4]
   12890:	bx	lr
   12894:	movw	r3, #33124	; 0x8164
   12898:	movt	r3, #2
   1289c:	strd	r4, [sp, #-16]!
   128a0:	ldr	r0, [r3]
   128a4:	str	r6, [sp, #8]
   128a8:	str	lr, [sp, #12]
   128ac:	sub	sp, sp, #8
   128b0:	bl	16848 <__assert_fail@plt+0x588c>
   128b4:	cmp	r0, #0
   128b8:	beq	128e4 <__assert_fail@plt+0x1928>
   128bc:	movw	r4, #33168	; 0x8190
   128c0:	movt	r4, #2
   128c4:	ldrb	r6, [r4, #4]
   128c8:	bl	10ef0 <__errno_location@plt>
   128cc:	mov	r5, r0
   128d0:	cmp	r6, #0
   128d4:	beq	12910 <__assert_fail@plt+0x1954>
   128d8:	ldr	r3, [r0]
   128dc:	cmp	r3, #32
   128e0:	bne	12910 <__assert_fail@plt+0x1954>
   128e4:	movw	r3, #33112	; 0x8158
   128e8:	movt	r3, #2
   128ec:	ldr	r0, [r3]
   128f0:	bl	16848 <__assert_fail@plt+0x588c>
   128f4:	cmp	r0, #0
   128f8:	bne	12958 <__assert_fail@plt+0x199c>
   128fc:	add	sp, sp, #8
   12900:	ldrd	r4, [sp]
   12904:	ldr	r6, [sp, #8]
   12908:	add	sp, sp, #12
   1290c:	pop	{pc}		; (ldr pc, [sp], #4)
   12910:	movw	r1, #30528	; 0x7740
   12914:	movt	r1, #1
   12918:	mov	r2, #5
   1291c:	mov	r0, #0
   12920:	bl	10dd0 <dcgettext@plt>
   12924:	mov	r6, r0
   12928:	ldr	r0, [r4]
   1292c:	cmp	r0, #0
   12930:	beq	12968 <__assert_fail@plt+0x19ac>
   12934:	ldr	r4, [r5]
   12938:	bl	15144 <__assert_fail@plt+0x4188>
   1293c:	mov	r3, r0
   12940:	movw	r2, #27824	; 0x6cb0
   12944:	movt	r2, #1
   12948:	mov	r0, #0
   1294c:	str	r6, [sp]
   12950:	mov	r1, r4
   12954:	bl	10e48 <error@plt>
   12958:	movw	r3, #33024	; 0x8100
   1295c:	movt	r3, #2
   12960:	ldr	r0, [r3]
   12964:	bl	10d7c <_exit@plt>
   12968:	mov	r3, r6
   1296c:	movw	r2, #27828	; 0x6cb4
   12970:	movt	r2, #1
   12974:	ldr	r1, [r5]
   12978:	bl	10e48 <error@plt>
   1297c:	b	12958 <__assert_fail@plt+0x199c>
   12980:	b	10d58 <posix_fadvise64@plt>
   12984:	cmp	r0, #0
   12988:	bxeq	lr
   1298c:	str	r4, [sp, #-16]!
   12990:	mov	r4, r1
   12994:	strd	r6, [sp, #4]
   12998:	mov	r6, #0
   1299c:	mov	r7, #0
   129a0:	str	lr, [sp, #12]
   129a4:	sub	sp, sp, #16
   129a8:	bl	10f20 <fileno@plt>
   129ac:	mov	r2, r6
   129b0:	mov	r3, r7
   129b4:	strd	r6, [sp]
   129b8:	str	r4, [sp, #8]
   129bc:	bl	10d58 <posix_fadvise64@plt>
   129c0:	add	sp, sp, #16
   129c4:	ldr	r4, [sp]
   129c8:	ldrd	r6, [sp, #4]
   129cc:	add	sp, sp, #12
   129d0:	pop	{pc}		; (ldr pc, [sp], #4)
   129d4:	strd	r4, [sp, #-12]!
   129d8:	mov	r4, r0
   129dc:	str	lr, [sp, #8]
   129e0:	sub	sp, sp, #12
   129e4:	bl	10f20 <fileno@plt>
   129e8:	cmp	r0, #0
   129ec:	mov	r0, r4
   129f0:	blt	12a74 <__assert_fail@plt+0x1ab8>
   129f4:	bl	10e84 <__freading@plt>
   129f8:	cmp	r0, #0
   129fc:	bne	12a40 <__assert_fail@plt+0x1a84>
   12a00:	mov	r0, r4
   12a04:	bl	12a88 <__assert_fail@plt+0x1acc>
   12a08:	cmp	r0, #0
   12a0c:	beq	12a70 <__assert_fail@plt+0x1ab4>
   12a10:	bl	10ef0 <__errno_location@plt>
   12a14:	mov	r5, r0
   12a18:	mov	r0, r4
   12a1c:	ldr	r4, [r5]
   12a20:	bl	10f38 <fclose@plt>
   12a24:	cmp	r4, #0
   12a28:	mvnne	r0, #0
   12a2c:	strne	r4, [r5]
   12a30:	add	sp, sp, #12
   12a34:	ldrd	r4, [sp]
   12a38:	add	sp, sp, #8
   12a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   12a40:	mov	r0, r4
   12a44:	bl	10f20 <fileno@plt>
   12a48:	mov	r1, #1
   12a4c:	mov	r2, #0
   12a50:	mov	r3, #0
   12a54:	str	r1, [sp]
   12a58:	bl	10e18 <lseek64@plt>
   12a5c:	mvn	r3, #0
   12a60:	mvn	r2, #0
   12a64:	cmp	r1, r3
   12a68:	cmpeq	r0, r2
   12a6c:	bne	12a00 <__assert_fail@plt+0x1a44>
   12a70:	mov	r0, r4
   12a74:	add	sp, sp, #12
   12a78:	ldrd	r4, [sp]
   12a7c:	ldr	lr, [sp, #8]
   12a80:	add	sp, sp, #12
   12a84:	b	10f38 <fclose@plt>
   12a88:	str	r4, [sp, #-8]!
   12a8c:	subs	r4, r0, #0
   12a90:	str	lr, [sp, #4]
   12a94:	sub	sp, sp, #8
   12a98:	beq	12ab4 <__assert_fail@plt+0x1af8>
   12a9c:	bl	10e84 <__freading@plt>
   12aa0:	cmp	r0, #0
   12aa4:	beq	12ab4 <__assert_fail@plt+0x1af8>
   12aa8:	ldr	r3, [r4]
   12aac:	tst	r3, #256	; 0x100
   12ab0:	bne	12acc <__assert_fail@plt+0x1b10>
   12ab4:	mov	r0, r4
   12ab8:	add	sp, sp, #8
   12abc:	ldr	r4, [sp]
   12ac0:	ldr	lr, [sp, #4]
   12ac4:	add	sp, sp, #8
   12ac8:	b	10d64 <fflush@plt>
   12acc:	mov	r1, #1
   12ad0:	mov	r2, #0
   12ad4:	mov	r3, #0
   12ad8:	mov	r0, r4
   12adc:	str	r1, [sp]
   12ae0:	bl	12d50 <__assert_fail@plt+0x1d94>
   12ae4:	b	12ab4 <__assert_fail@plt+0x1af8>
   12ae8:	strd	r4, [sp, #-12]!
   12aec:	mov	r5, r0
   12af0:	str	lr, [sp, #8]
   12af4:	sub	sp, sp, #12
   12af8:	bl	10ef0 <__errno_location@plt>
   12afc:	mov	r4, r0
   12b00:	mov	r2, #0
   12b04:	ldr	r3, [r4]
   12b08:	mov	r0, r5
   12b0c:	str	r2, [r4]
   12b10:	str	r3, [sp]
   12b14:	str	r3, [sp, #4]
   12b18:	bl	10d70 <free@plt>
   12b1c:	ldr	r3, [r4]
   12b20:	add	r2, sp, #8
   12b24:	clz	r3, r3
   12b28:	lsr	r3, r3, #5
   12b2c:	add	r3, r2, r3, lsl #2
   12b30:	ldr	r3, [r3, #-8]
   12b34:	str	r3, [r4]
   12b38:	add	sp, sp, #12
   12b3c:	ldrd	r4, [sp]
   12b40:	add	sp, sp, #8
   12b44:	pop	{pc}		; (ldr pc, [sp], #4)
   12b48:	mov	r1, #0
   12b4c:	str	r4, [sp, #-8]!
   12b50:	mov	r4, r0
   12b54:	movw	r0, #30540	; 0x774c
   12b58:	movt	r0, #1
   12b5c:	str	lr, [sp, #4]
   12b60:	bl	10e54 <open64@plt>
   12b64:	cmp	r4, r0
   12b68:	moveq	r3, #1
   12b6c:	beq	12b80 <__assert_fail@plt+0x1bc4>
   12b70:	cmp	r0, #0
   12b74:	mov	r3, r0
   12b78:	movlt	r3, #0
   12b7c:	bge	12b90 <__assert_fail@plt+0x1bd4>
   12b80:	ldr	r4, [sp]
   12b84:	add	sp, sp, #4
   12b88:	mov	r0, r3
   12b8c:	pop	{pc}		; (ldr pc, [sp], #4)
   12b90:	bl	10fb0 <close@plt>
   12b94:	bl	10ef0 <__errno_location@plt>
   12b98:	mov	r2, #9
   12b9c:	mov	r3, #0
   12ba0:	ldr	r4, [sp]
   12ba4:	add	sp, sp, #4
   12ba8:	str	r2, [r0]
   12bac:	mov	r0, r3
   12bb0:	pop	{pc}		; (ldr pc, [sp], #4)
   12bb4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12bb8:	strd	r6, [sp, #8]
   12bbc:	strd	r8, [sp, #16]
   12bc0:	mov	r8, r2
   12bc4:	strd	sl, [sp, #24]
   12bc8:	mov	sl, r0
   12bcc:	mov	r0, r2
   12bd0:	str	lr, [sp, #32]
   12bd4:	sub	sp, sp, #4
   12bd8:	mov	fp, r1
   12bdc:	bl	10f20 <fileno@plt>
   12be0:	mov	r4, r0
   12be4:	bl	10ef0 <__errno_location@plt>
   12be8:	cmp	r4, #1
   12bec:	mov	r9, r0
   12bf0:	beq	12d3c <__assert_fail@plt+0x1d80>
   12bf4:	cmp	r4, #2
   12bf8:	beq	12cdc <__assert_fail@plt+0x1d20>
   12bfc:	cmp	r4, #0
   12c00:	beq	12cd0 <__assert_fail@plt+0x1d14>
   12c04:	mov	r1, #2
   12c08:	mov	r0, r1
   12c0c:	bl	10ddc <dup2@plt>
   12c10:	subs	r4, r0, #2
   12c14:	movne	r4, #1
   12c18:	mov	r1, #1
   12c1c:	mov	r0, r1
   12c20:	bl	10ddc <dup2@plt>
   12c24:	subs	r7, r0, #1
   12c28:	movne	r7, #1
   12c2c:	mov	r1, #0
   12c30:	mov	r0, r1
   12c34:	bl	10ddc <dup2@plt>
   12c38:	subs	r5, r0, #0
   12c3c:	beq	12c58 <__assert_fail@plt+0x1c9c>
   12c40:	mov	r0, #0
   12c44:	bl	12b48 <__assert_fail@plt+0x1b8c>
   12c48:	cmp	r0, #0
   12c4c:	mov	r5, r0
   12c50:	mov	r6, r0
   12c54:	beq	12d48 <__assert_fail@plt+0x1d8c>
   12c58:	cmp	r7, #0
   12c5c:	bne	12cf0 <__assert_fail@plt+0x1d34>
   12c60:	cmp	r4, #0
   12c64:	beq	12c78 <__assert_fail@plt+0x1cbc>
   12c68:	mov	r0, #2
   12c6c:	bl	12b48 <__assert_fail@plt+0x1b8c>
   12c70:	subs	r4, r0, #0
   12c74:	beq	12d28 <__assert_fail@plt+0x1d6c>
   12c78:	mov	r2, r8
   12c7c:	mov	r1, fp
   12c80:	mov	r0, sl
   12c84:	bl	10ea8 <freopen64@plt>
   12c88:	mov	r6, r0
   12c8c:	cmp	r4, #0
   12c90:	ldr	r8, [r9]
   12c94:	bne	12d30 <__assert_fail@plt+0x1d74>
   12c98:	cmp	r7, #0
   12c9c:	bne	12d1c <__assert_fail@plt+0x1d60>
   12ca0:	cmp	r5, #0
   12ca4:	bne	12ce4 <__assert_fail@plt+0x1d28>
   12ca8:	cmp	r6, #0
   12cac:	mov	r0, r6
   12cb0:	streq	r8, [r9]
   12cb4:	add	sp, sp, #4
   12cb8:	ldrd	r4, [sp]
   12cbc:	ldrd	r6, [sp, #8]
   12cc0:	ldrd	r8, [sp, #16]
   12cc4:	ldrd	sl, [sp, #24]
   12cc8:	add	sp, sp, #32
   12ccc:	pop	{pc}		; (ldr pc, [sp], #4)
   12cd0:	mov	r7, r4
   12cd4:	mov	r5, r4
   12cd8:	b	12c78 <__assert_fail@plt+0x1cbc>
   12cdc:	mov	r4, #0
   12ce0:	b	12c18 <__assert_fail@plt+0x1c5c>
   12ce4:	mov	r0, #0
   12ce8:	bl	10fb0 <close@plt>
   12cec:	b	12ca8 <__assert_fail@plt+0x1cec>
   12cf0:	mov	r0, #1
   12cf4:	bl	12b48 <__assert_fail@plt+0x1b8c>
   12cf8:	subs	r7, r0, #0
   12cfc:	bne	12c60 <__assert_fail@plt+0x1ca4>
   12d00:	cmp	r4, #0
   12d04:	ldr	r8, [r9]
   12d08:	moveq	r6, r4
   12d0c:	beq	12d1c <__assert_fail@plt+0x1d60>
   12d10:	mov	r0, #2
   12d14:	mov	r6, r7
   12d18:	bl	10fb0 <close@plt>
   12d1c:	mov	r0, #1
   12d20:	bl	10fb0 <close@plt>
   12d24:	b	12ca0 <__assert_fail@plt+0x1ce4>
   12d28:	ldr	r8, [r9]
   12d2c:	mov	r6, r4
   12d30:	mov	r0, #2
   12d34:	bl	10fb0 <close@plt>
   12d38:	b	12c98 <__assert_fail@plt+0x1cdc>
   12d3c:	mov	r4, #0
   12d40:	mov	r7, r4
   12d44:	b	12c2c <__assert_fail@plt+0x1c70>
   12d48:	mov	r5, #1
   12d4c:	b	12c8c <__assert_fail@plt+0x1cd0>
   12d50:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12d54:	mov	r4, r0
   12d58:	ldr	ip, [r0, #4]
   12d5c:	strd	r6, [sp, #8]
   12d60:	str	lr, [sp, #20]
   12d64:	ldr	lr, [r0, #8]
   12d68:	str	r8, [sp, #16]
   12d6c:	sub	sp, sp, #8
   12d70:	ldr	r5, [sp, #32]
   12d74:	cmp	lr, ip
   12d78:	beq	12da0 <__assert_fail@plt+0x1de4>
   12d7c:	mov	r0, r4
   12d80:	str	r5, [sp, #32]
   12d84:	add	sp, sp, #8
   12d88:	ldrd	r4, [sp]
   12d8c:	ldrd	r6, [sp, #8]
   12d90:	ldr	r8, [sp, #16]
   12d94:	ldr	lr, [sp, #20]
   12d98:	add	sp, sp, #24
   12d9c:	b	10f44 <fseeko64@plt>
   12da0:	ldr	ip, [r0, #16]
   12da4:	ldr	lr, [r0, #20]
   12da8:	cmp	lr, ip
   12dac:	bne	12d7c <__assert_fail@plt+0x1dc0>
   12db0:	ldr	r8, [r0, #36]	; 0x24
   12db4:	cmp	r8, #0
   12db8:	bne	12d7c <__assert_fail@plt+0x1dc0>
   12dbc:	mov	r6, r2
   12dc0:	mov	r7, r3
   12dc4:	bl	10f20 <fileno@plt>
   12dc8:	mov	r2, r6
   12dcc:	mov	r3, r7
   12dd0:	str	r5, [sp]
   12dd4:	bl	10e18 <lseek64@plt>
   12dd8:	mvn	r3, #0
   12ddc:	mvn	r2, #0
   12de0:	cmp	r1, r3
   12de4:	cmpeq	r0, r2
   12de8:	beq	12e18 <__assert_fail@plt+0x1e5c>
   12dec:	ldr	r3, [r4]
   12df0:	strd	r0, [r4, #80]	; 0x50
   12df4:	bic	r3, r3, #16
   12df8:	str	r3, [r4]
   12dfc:	mov	r0, r8
   12e00:	add	sp, sp, #8
   12e04:	ldrd	r4, [sp]
   12e08:	ldrd	r6, [sp, #8]
   12e0c:	ldr	r8, [sp, #16]
   12e10:	add	sp, sp, #20
   12e14:	pop	{pc}		; (ldr pc, [sp], #4)
   12e18:	mvn	r8, #0
   12e1c:	b	12dfc <__assert_fail@plt+0x1e40>
   12e20:	mov	r3, #0
   12e24:	str	r3, [r0]
   12e28:	str	r3, [r0, #4]
   12e2c:	str	r3, [r0, #8]
   12e30:	bx	lr
   12e34:	ldr	ip, [r1]
   12e38:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12e3c:	ldr	r3, [r0]
   12e40:	strd	r6, [sp, #8]
   12e44:	strd	sl, [sp, #24]
   12e48:	ldr	fp, [r0, #8]
   12e4c:	tst	ip, #16
   12e50:	strd	r8, [sp, #16]
   12e54:	str	lr, [sp, #32]
   12e58:	sub	sp, sp, #12
   12e5c:	add	r9, fp, r3
   12e60:	bne	12f50 <__assert_fail@plt+0x1f94>
   12e64:	mov	r8, r2
   12e68:	mov	r7, r0
   12e6c:	mov	r5, r1
   12e70:	mov	r4, fp
   12e74:	b	12e9c <__assert_fail@plt+0x1ee0>
   12e78:	add	r1, r3, #1
   12e7c:	str	r1, [r5, #4]
   12e80:	ldrb	r6, [r3]
   12e84:	mov	sl, r6
   12e88:	cmp	r4, r9
   12e8c:	beq	12ef0 <__assert_fail@plt+0x1f34>
   12e90:	cmp	sl, r8
   12e94:	strb	r6, [r4], #1
   12e98:	beq	12f28 <__assert_fail@plt+0x1f6c>
   12e9c:	ldr	r3, [r5, #4]
   12ea0:	ldr	r1, [r5, #8]
   12ea4:	cmp	r3, r1
   12ea8:	bcc	12e78 <__assert_fail@plt+0x1ebc>
   12eac:	mov	r0, r5
   12eb0:	bl	10f50 <__uflow@plt>
   12eb4:	cmn	r0, #1
   12eb8:	mov	sl, r0
   12ebc:	bne	12f58 <__assert_fail@plt+0x1f9c>
   12ec0:	cmp	fp, r4
   12ec4:	beq	12f50 <__assert_fail@plt+0x1f94>
   12ec8:	ldr	r3, [r5]
   12ecc:	tst	r3, #32
   12ed0:	bne	12f50 <__assert_fail@plt+0x1f94>
   12ed4:	ldrb	r3, [r4, #-1]
   12ed8:	cmp	r3, r8
   12edc:	beq	12f28 <__assert_fail@plt+0x1f6c>
   12ee0:	cmp	r4, r9
   12ee4:	mov	sl, r8
   12ee8:	bne	12f24 <__assert_fail@plt+0x1f68>
   12eec:	mov	r6, r8
   12ef0:	mov	r2, #1
   12ef4:	mov	r0, fp
   12ef8:	mvn	r3, #0
   12efc:	mov	r1, r7
   12f00:	str	r2, [sp]
   12f04:	ldr	r4, [r7]
   12f08:	bl	15ad4 <__assert_fail@plt+0x4b18>
   12f0c:	ldr	r2, [r7]
   12f10:	mov	fp, r0
   12f14:	str	r0, [r7, #8]
   12f18:	add	r4, r0, r4
   12f1c:	add	r9, r0, r2
   12f20:	b	12e90 <__assert_fail@plt+0x1ed4>
   12f24:	strb	r8, [r4], #1
   12f28:	sub	r4, r4, fp
   12f2c:	mov	r0, r7
   12f30:	str	r4, [r7, #4]
   12f34:	add	sp, sp, #12
   12f38:	ldrd	r4, [sp]
   12f3c:	ldrd	r6, [sp, #8]
   12f40:	ldrd	r8, [sp, #16]
   12f44:	ldrd	sl, [sp, #24]
   12f48:	add	sp, sp, #32
   12f4c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f50:	mov	r0, #0
   12f54:	b	12f34 <__assert_fail@plt+0x1f78>
   12f58:	uxtb	r6, r0
   12f5c:	b	12e88 <__assert_fail@plt+0x1ecc>
   12f60:	mov	r2, #10
   12f64:	b	12e34 <__assert_fail@plt+0x1e78>
   12f68:	ldr	r0, [r0, #8]
   12f6c:	b	12ae8 <__assert_fail@plt+0x1b2c>
   12f70:	strd	r4, [sp, #-16]!
   12f74:	str	r6, [sp, #8]
   12f78:	subs	r6, r2, #0
   12f7c:	str	lr, [sp, #12]
   12f80:	beq	12fd4 <__assert_fail@plt+0x2018>
   12f84:	mov	r4, r0
   12f88:	mov	r5, r1
   12f8c:	bl	10e90 <__ctype_toupper_loc@plt>
   12f90:	sub	r3, r4, #1
   12f94:	sub	r1, r5, #1
   12f98:	ldr	ip, [r0]
   12f9c:	add	r4, r3, r6
   12fa0:	b	12fac <__assert_fail@plt+0x1ff0>
   12fa4:	cmp	r4, r3
   12fa8:	beq	12fc4 <__assert_fail@plt+0x2008>
   12fac:	ldrb	lr, [r3, #1]!
   12fb0:	ldrb	r2, [r1, #1]!
   12fb4:	ldr	r0, [ip, lr, lsl #2]
   12fb8:	ldr	r2, [ip, r2, lsl #2]
   12fbc:	subs	r0, r0, r2
   12fc0:	beq	12fa4 <__assert_fail@plt+0x1fe8>
   12fc4:	ldrd	r4, [sp]
   12fc8:	ldr	r6, [sp, #8]
   12fcc:	add	sp, sp, #12
   12fd0:	pop	{pc}		; (ldr pc, [sp], #4)
   12fd4:	mov	r0, r6
   12fd8:	b	12fc4 <__assert_fail@plt+0x2008>
   12fdc:	movw	r0, #30552	; 0x7758
   12fe0:	movt	r0, #1
   12fe4:	push	{lr}		; (str lr, [sp, #-4]!)
   12fe8:	sub	sp, sp, #12
   12fec:	bl	10e60 <getenv@plt>
   12ff0:	subs	r3, r0, #0
   12ff4:	beq	13004 <__assert_fail@plt+0x2048>
   12ff8:	ldrb	r3, [r3]
   12ffc:	cmp	r3, #0
   13000:	bne	13014 <__assert_fail@plt+0x2058>
   13004:	movw	r0, #4201	; 0x1069
   13008:	movt	r0, #3
   1300c:	add	sp, sp, #12
   13010:	pop	{pc}		; (ldr pc, [sp], #4)
   13014:	mov	r2, #10
   13018:	add	r1, sp, #4
   1301c:	bl	10d4c <strtol@plt>
   13020:	ldr	r2, [sp, #4]
   13024:	movw	r3, #4201	; 0x1069
   13028:	movt	r3, #3
   1302c:	ldrb	r2, [r2]
   13030:	cmp	r2, #0
   13034:	movne	r0, r3
   13038:	add	sp, sp, #12
   1303c:	pop	{pc}		; (ldr pc, [sp], #4)
   13040:	strd	r4, [sp, #-16]!
   13044:	subs	r4, r0, #0
   13048:	str	r6, [sp, #8]
   1304c:	str	lr, [sp, #12]
   13050:	beq	130e8 <__assert_fail@plt+0x212c>
   13054:	mov	r1, #47	; 0x2f
   13058:	bl	10f74 <strrchr@plt>
   1305c:	subs	r5, r0, #0
   13060:	beq	130c0 <__assert_fail@plt+0x2104>
   13064:	add	r6, r5, #1
   13068:	sub	r3, r6, r4
   1306c:	cmp	r3, #6
   13070:	ble	130c0 <__assert_fail@plt+0x2104>
   13074:	movw	r1, #30624	; 0x77a0
   13078:	movt	r1, #1
   1307c:	mov	r2, #7
   13080:	sub	r0, r5, #6
   13084:	bl	10f98 <strncmp@plt>
   13088:	cmp	r0, #0
   1308c:	bne	130c0 <__assert_fail@plt+0x2104>
   13090:	movw	r1, #30632	; 0x77a8
   13094:	movt	r1, #1
   13098:	mov	r2, #3
   1309c:	mov	r0, r6
   130a0:	bl	10f98 <strncmp@plt>
   130a4:	cmp	r0, #0
   130a8:	movne	r4, r6
   130ac:	bne	130c0 <__assert_fail@plt+0x2104>
   130b0:	add	r4, r5, #4
   130b4:	movw	r3, #33096	; 0x8148
   130b8:	movt	r3, #2
   130bc:	str	r4, [r3]
   130c0:	movw	r2, #33176	; 0x8198
   130c4:	movt	r2, #2
   130c8:	ldr	r6, [sp, #8]
   130cc:	movw	r3, #33100	; 0x814c
   130d0:	movt	r3, #2
   130d4:	str	r4, [r2]
   130d8:	str	r4, [r3]
   130dc:	ldrd	r4, [sp]
   130e0:	add	sp, sp, #12
   130e4:	pop	{pc}		; (ldr pc, [sp], #4)
   130e8:	movw	r3, #33112	; 0x8158
   130ec:	movt	r3, #2
   130f0:	movw	r0, #30568	; 0x7768
   130f4:	movt	r0, #1
   130f8:	ldr	r3, [r3]
   130fc:	mov	r2, #55	; 0x37
   13100:	mov	r1, #1
   13104:	bl	10e0c <fwrite@plt>
   13108:	bl	10fa4 <abort@plt>
   1310c:	strd	r4, [sp, #-16]!
   13110:	mov	r4, #0
   13114:	mov	r5, #0
   13118:	cmp	r1, #10
   1311c:	str	r6, [sp, #8]
   13120:	strd	r4, [r0]
   13124:	strd	r4, [r0, #8]
   13128:	str	lr, [sp, #12]
   1312c:	strd	r4, [r0, #16]
   13130:	strd	r4, [r0, #24]
   13134:	strd	r4, [r0, #32]
   13138:	strd	r4, [r0, #40]	; 0x28
   1313c:	beq	13154 <__assert_fail@plt+0x2198>
   13140:	ldrd	r4, [sp]
   13144:	str	r1, [r0]
   13148:	ldr	r6, [sp, #8]
   1314c:	add	sp, sp, #12
   13150:	pop	{pc}		; (ldr pc, [sp], #4)
   13154:	bl	10fa4 <abort@plt>
   13158:	mov	r2, #5
   1315c:	strd	r4, [sp, #-16]!
   13160:	mov	r5, r0
   13164:	str	r6, [sp, #8]
   13168:	mov	r6, r1
   1316c:	mov	r1, r0
   13170:	mov	r0, #0
   13174:	str	lr, [sp, #12]
   13178:	bl	10dd0 <dcgettext@plt>
   1317c:	cmp	r5, r0
   13180:	mov	r4, r0
   13184:	beq	1319c <__assert_fail@plt+0x21e0>
   13188:	mov	r0, r4
   1318c:	ldrd	r4, [sp]
   13190:	ldr	r6, [sp, #8]
   13194:	add	sp, sp, #12
   13198:	pop	{pc}		; (ldr pc, [sp], #4)
   1319c:	bl	168d0 <__assert_fail@plt+0x5914>
   131a0:	ldrb	r3, [r0]
   131a4:	bic	r3, r3, #32
   131a8:	cmp	r3, #85	; 0x55
   131ac:	bne	13214 <__assert_fail@plt+0x2258>
   131b0:	ldrb	r3, [r0, #1]
   131b4:	bic	r3, r3, #32
   131b8:	cmp	r3, #84	; 0x54
   131bc:	bne	13294 <__assert_fail@plt+0x22d8>
   131c0:	ldrb	r3, [r0, #2]
   131c4:	bic	r3, r3, #32
   131c8:	cmp	r3, #70	; 0x46
   131cc:	bne	13294 <__assert_fail@plt+0x22d8>
   131d0:	ldrb	r3, [r0, #3]
   131d4:	cmp	r3, #45	; 0x2d
   131d8:	bne	13294 <__assert_fail@plt+0x22d8>
   131dc:	ldrb	r3, [r0, #4]
   131e0:	cmp	r3, #56	; 0x38
   131e4:	bne	13294 <__assert_fail@plt+0x22d8>
   131e8:	ldrb	r3, [r0, #5]
   131ec:	cmp	r3, #0
   131f0:	bne	13294 <__assert_fail@plt+0x22d8>
   131f4:	ldrb	r2, [r4]
   131f8:	movw	r3, #30724	; 0x7804
   131fc:	movt	r3, #1
   13200:	movw	r4, #30736	; 0x7810
   13204:	movt	r4, #1
   13208:	cmp	r2, #96	; 0x60
   1320c:	movne	r4, r3
   13210:	b	13188 <__assert_fail@plt+0x21cc>
   13214:	cmp	r3, #71	; 0x47
   13218:	bne	13294 <__assert_fail@plt+0x22d8>
   1321c:	ldrb	r3, [r0, #1]
   13220:	bic	r3, r3, #32
   13224:	cmp	r3, #66	; 0x42
   13228:	bne	13294 <__assert_fail@plt+0x22d8>
   1322c:	ldrb	r3, [r0, #2]
   13230:	cmp	r3, #49	; 0x31
   13234:	bne	13294 <__assert_fail@plt+0x22d8>
   13238:	ldrb	r3, [r0, #3]
   1323c:	cmp	r3, #56	; 0x38
   13240:	bne	13294 <__assert_fail@plt+0x22d8>
   13244:	ldrb	r3, [r0, #4]
   13248:	cmp	r3, #48	; 0x30
   1324c:	bne	13294 <__assert_fail@plt+0x22d8>
   13250:	ldrb	r3, [r0, #5]
   13254:	cmp	r3, #51	; 0x33
   13258:	bne	13294 <__assert_fail@plt+0x22d8>
   1325c:	ldrb	r3, [r0, #6]
   13260:	cmp	r3, #48	; 0x30
   13264:	bne	13294 <__assert_fail@plt+0x22d8>
   13268:	ldrb	r3, [r0, #7]
   1326c:	cmp	r3, #0
   13270:	bne	13294 <__assert_fail@plt+0x22d8>
   13274:	ldrb	r2, [r4]
   13278:	movw	r3, #30728	; 0x7808
   1327c:	movt	r3, #1
   13280:	movw	r4, #30732	; 0x780c
   13284:	movt	r4, #1
   13288:	cmp	r2, #96	; 0x60
   1328c:	movne	r4, r3
   13290:	b	13188 <__assert_fail@plt+0x21cc>
   13294:	movw	r3, #30740	; 0x7814
   13298:	movt	r3, #1
   1329c:	cmp	r6, #9
   132a0:	movw	r4, #30720	; 0x7800
   132a4:	movt	r4, #1
   132a8:	movne	r4, r3
   132ac:	b	13188 <__assert_fail@plt+0x21cc>
   132b0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   132b4:	strd	r6, [sp, #8]
   132b8:	strd	r8, [sp, #16]
   132bc:	strd	sl, [sp, #24]
   132c0:	mov	fp, r0
   132c4:	mov	sl, r1
   132c8:	str	lr, [sp, #32]
   132cc:	sub	sp, sp, #116	; 0x74
   132d0:	ldr	r8, [sp, #152]	; 0x98
   132d4:	str	r3, [sp, #28]
   132d8:	ldr	r3, [sp, #156]	; 0x9c
   132dc:	str	r2, [sp, #32]
   132e0:	and	r4, r3, #2
   132e4:	ubfx	r3, r3, #1, #1
   132e8:	str	r3, [sp, #44]	; 0x2c
   132ec:	bl	10e24 <__ctype_get_mb_cur_max@plt>
   132f0:	str	r0, [sp, #64]	; 0x40
   132f4:	cmp	r8, #10
   132f8:	ldrls	pc, [pc, r8, lsl #2]
   132fc:	b	14a6c <__assert_fail@plt+0x3ab0>
   13300:	andeq	r3, r1, r4, lsl #14
   13304:	andeq	r3, r1, r0, lsr #15
   13308:	andeq	r3, r1, ip, ror sp
   1330c:	andeq	r3, r1, r0, asr #15
   13310:	andeq	r3, r1, r8, ror #12
   13314:			; <UNDEFINED> instruction: 0x000136b4
   13318:	andeq	r3, r1, r4, lsr r7
   1331c:	andeq	r3, r1, r0, ror r7
   13320:	andeq	r3, r1, ip, lsr #6
   13324:	andeq	r3, r1, ip, lsr #6
   13328:	andeq	r3, r1, ip, lsr #6
   1332c:	cmp	r8, #10
   13330:	beq	1335c <__assert_fail@plt+0x23a0>
   13334:	mov	r1, r8
   13338:	movw	r0, #30744	; 0x7818
   1333c:	movt	r0, #1
   13340:	bl	13158 <__assert_fail@plt+0x219c>
   13344:	mov	r1, r8
   13348:	str	r0, [sp, #164]	; 0xa4
   1334c:	movw	r0, #30740	; 0x7814
   13350:	movt	r0, #1
   13354:	bl	13158 <__assert_fail@plt+0x219c>
   13358:	str	r0, [sp, #168]	; 0xa8
   1335c:	cmp	r4, #0
   13360:	movne	r4, #0
   13364:	beq	14748 <__assert_fail@plt+0x378c>
   13368:	mov	r3, #1
   1336c:	mov	r5, #0
   13370:	ldr	r0, [sp, #168]	; 0xa8
   13374:	str	r3, [sp, #36]	; 0x24
   13378:	str	r3, [sp, #40]	; 0x28
   1337c:	str	r5, [sp, #68]	; 0x44
   13380:	bl	10ed8 <strlen@plt>
   13384:	ldr	r3, [sp, #168]	; 0xa8
   13388:	str	r5, [sp, #48]	; 0x30
   1338c:	str	r0, [sp, #56]	; 0x38
   13390:	str	r3, [sp, #60]	; 0x3c
   13394:	str	r5, [sp, #72]	; 0x48
   13398:	str	r8, [sp, #152]	; 0x98
   1339c:	mov	r8, fp
   133a0:	mov	r9, #0
   133a4:	ldr	fp, [sp, #152]	; 0x98
   133a8:	ldr	r3, [sp, #28]
   133ac:	cmn	r3, #1
   133b0:	beq	13910 <__assert_fail@plt+0x2954>
   133b4:	ldr	r3, [sp, #28]
   133b8:	subs	r6, r3, r9
   133bc:	movne	r6, #1
   133c0:	cmp	r6, #0
   133c4:	beq	13928 <__assert_fail@plt+0x296c>
   133c8:	ldr	r0, [sp, #32]
   133cc:	ldr	r7, [sp, #40]	; 0x28
   133d0:	add	r3, r0, r9
   133d4:	cmp	fp, #2
   133d8:	moveq	r7, #0
   133dc:	andne	r7, r7, #1
   133e0:	str	r3, [sp, #52]	; 0x34
   133e4:	cmp	r7, #0
   133e8:	beq	13dc4 <__assert_fail@plt+0x2e08>
   133ec:	ldr	r2, [sp, #56]	; 0x38
   133f0:	cmp	r2, #0
   133f4:	beq	14060 <__assert_fail@plt+0x30a4>
   133f8:	ldr	r1, [sp, #28]
   133fc:	cmp	r2, #1
   13400:	mov	r3, r2
   13404:	movls	r3, #0
   13408:	movhi	r3, #1
   1340c:	add	r5, r9, r2
   13410:	cmn	r1, #1
   13414:	movne	r3, #0
   13418:	cmp	r3, #0
   1341c:	beq	13428 <__assert_fail@plt+0x246c>
   13420:	bl	10ed8 <strlen@plt>
   13424:	str	r0, [sp, #28]
   13428:	ldr	r3, [sp, #28]
   1342c:	cmp	r5, r3
   13430:	bhi	14060 <__assert_fail@plt+0x30a4>
   13434:	ldr	r0, [sp, #52]	; 0x34
   13438:	ldr	r2, [sp, #56]	; 0x38
   1343c:	ldr	r1, [sp, #60]	; 0x3c
   13440:	bl	10db8 <memcmp@plt>
   13444:	cmp	r0, #0
   13448:	bne	14060 <__assert_fail@plt+0x30a4>
   1344c:	ldr	r3, [sp, #44]	; 0x2c
   13450:	cmp	r3, #0
   13454:	bne	14990 <__assert_fail@plt+0x39d4>
   13458:	ldr	r3, [sp, #52]	; 0x34
   1345c:	ldrb	r5, [r3]
   13460:	cmp	r5, #126	; 0x7e
   13464:	ldrls	pc, [pc, r5, lsl #2]
   13468:	b	13d20 <__assert_fail@plt+0x2d64>
   1346c:	andeq	r3, r1, r4, lsr #24
   13470:	andeq	r3, r1, r0, lsr #26
   13474:	andeq	r3, r1, r0, lsr #26
   13478:	andeq	r3, r1, r0, lsr #26
   1347c:	andeq	r3, r1, r0, lsr #26
   13480:	andeq	r3, r1, r0, lsr #26
   13484:	andeq	r3, r1, r0, lsr #26
   13488:	strdeq	r3, [r1], -r8
   1348c:	strdeq	r3, [r1], -r0
   13490:	andeq	r3, r1, r8, lsr fp
   13494:	andeq	r3, r1, r4, ror #23
   13498:	andeq	r3, r1, r0, lsr fp
   1349c:	andeq	r3, r1, r0, asr #23
   134a0:	andeq	r3, r1, ip, lsl #24
   134a4:	andeq	r3, r1, r0, lsr #26
   134a8:	andeq	r3, r1, r0, lsr #26
   134ac:	andeq	r3, r1, r0, lsr #26
   134b0:	andeq	r3, r1, r0, lsr #26
   134b4:	andeq	r3, r1, r0, lsr #26
   134b8:	andeq	r3, r1, r0, lsr #26
   134bc:	andeq	r3, r1, r0, lsr #26
   134c0:	andeq	r3, r1, r0, lsr #26
   134c4:	andeq	r3, r1, r0, lsr #26
   134c8:	andeq	r3, r1, r0, lsr #26
   134cc:	andeq	r3, r1, r0, lsr #26
   134d0:	andeq	r3, r1, r0, lsr #26
   134d4:	andeq	r3, r1, r0, lsr #26
   134d8:	andeq	r3, r1, r0, lsr #26
   134dc:	andeq	r3, r1, r0, lsr #26
   134e0:	andeq	r3, r1, r0, lsr #26
   134e4:	andeq	r3, r1, r0, lsr #26
   134e8:	andeq	r3, r1, r0, lsr #26
   134ec:	strdeq	r3, [r1], -ip
   134f0:	andeq	r3, r1, r4, lsl #24
   134f4:	andeq	r3, r1, r4, lsl #24
   134f8:	andeq	r3, r1, r0, ror #25
   134fc:	andeq	r3, r1, r4, lsl #24
   13500:	andeq	r3, r1, r4, lsl sp
   13504:	andeq	r3, r1, r4, lsl #24
   13508:	andeq	r3, r1, r0, ror #20
   1350c:	andeq	r3, r1, r4, lsl #24
   13510:	andeq	r3, r1, r4, lsl #24
   13514:	andeq	r3, r1, r4, lsl #24
   13518:	andeq	r3, r1, r4, lsl sp
   1351c:	andeq	r3, r1, r4, lsl sp
   13520:	andeq	r3, r1, r4, lsl sp
   13524:	andeq	r3, r1, r4, lsl sp
   13528:	andeq	r3, r1, r4, lsl sp
   1352c:	andeq	r3, r1, r4, lsl sp
   13530:	andeq	r3, r1, r4, lsl sp
   13534:	andeq	r3, r1, r4, lsl sp
   13538:	andeq	r3, r1, r4, lsl sp
   1353c:	andeq	r3, r1, r4, lsl sp
   13540:	andeq	r3, r1, r4, lsl sp
   13544:	andeq	r3, r1, r4, lsl sp
   13548:	andeq	r3, r1, r4, lsl sp
   1354c:	andeq	r3, r1, r4, lsl sp
   13550:	andeq	r3, r1, r4, lsl sp
   13554:	andeq	r3, r1, r4, lsl sp
   13558:	andeq	r3, r1, r4, lsl #24
   1355c:	andeq	r3, r1, r4, lsl #24
   13560:	andeq	r3, r1, r4, lsl #24
   13564:	andeq	r3, r1, r4, lsl #24
   13568:	andeq	r3, r1, r4, lsr sl
   1356c:	andeq	r3, r1, r0, lsr #26
   13570:	andeq	r3, r1, r4, lsl sp
   13574:	andeq	r3, r1, r4, lsl sp
   13578:	andeq	r3, r1, r4, lsl sp
   1357c:	andeq	r3, r1, r4, lsl sp
   13580:	andeq	r3, r1, r4, lsl sp
   13584:	andeq	r3, r1, r4, lsl sp
   13588:	andeq	r3, r1, r4, lsl sp
   1358c:	andeq	r3, r1, r4, lsl sp
   13590:	andeq	r3, r1, r4, lsl sp
   13594:	andeq	r3, r1, r4, lsl sp
   13598:	andeq	r3, r1, r4, lsl sp
   1359c:	andeq	r3, r1, r4, lsl sp
   135a0:	andeq	r3, r1, r4, lsl sp
   135a4:	andeq	r3, r1, r4, lsl sp
   135a8:	andeq	r3, r1, r4, lsl sp
   135ac:	andeq	r3, r1, r4, lsl sp
   135b0:	andeq	r3, r1, r4, lsl sp
   135b4:	andeq	r3, r1, r4, lsl sp
   135b8:	andeq	r3, r1, r4, lsl sp
   135bc:	andeq	r3, r1, r4, lsl sp
   135c0:	andeq	r3, r1, r4, lsl sp
   135c4:	andeq	r3, r1, r4, lsl sp
   135c8:	andeq	r3, r1, r4, lsl sp
   135cc:	andeq	r3, r1, r4, lsl sp
   135d0:	andeq	r3, r1, r4, lsl sp
   135d4:	andeq	r3, r1, r4, lsl sp
   135d8:	andeq	r3, r1, r4, lsl #24
   135dc:	ldrdeq	r3, [r1], -ip
   135e0:	andeq	r3, r1, r4, lsl sp
   135e4:	andeq	r3, r1, r4, lsl #24
   135e8:	andeq	r3, r1, r4, lsl sp
   135ec:	andeq	r3, r1, r4, lsl #24
   135f0:	andeq	r3, r1, r4, lsl sp
   135f4:	andeq	r3, r1, r4, lsl sp
   135f8:	andeq	r3, r1, r4, lsl sp
   135fc:	andeq	r3, r1, r4, lsl sp
   13600:	andeq	r3, r1, r4, lsl sp
   13604:	andeq	r3, r1, r4, lsl sp
   13608:	andeq	r3, r1, r4, lsl sp
   1360c:	andeq	r3, r1, r4, lsl sp
   13610:	andeq	r3, r1, r4, lsl sp
   13614:	andeq	r3, r1, r4, lsl sp
   13618:	andeq	r3, r1, r4, lsl sp
   1361c:	andeq	r3, r1, r4, lsl sp
   13620:	andeq	r3, r1, r4, lsl sp
   13624:	andeq	r3, r1, r4, lsl sp
   13628:	andeq	r3, r1, r4, lsl sp
   1362c:	andeq	r3, r1, r4, lsl sp
   13630:	andeq	r3, r1, r4, lsl sp
   13634:	andeq	r3, r1, r4, lsl sp
   13638:	andeq	r3, r1, r4, lsl sp
   1363c:	andeq	r3, r1, r4, lsl sp
   13640:	andeq	r3, r1, r4, lsl sp
   13644:	andeq	r3, r1, r4, lsl sp
   13648:	andeq	r3, r1, r4, lsl sp
   1364c:	andeq	r3, r1, r4, lsl sp
   13650:	andeq	r3, r1, r4, lsl sp
   13654:	andeq	r3, r1, r4, lsl sp
   13658:	andeq	r3, r1, r0, lsl #16
   1365c:	andeq	r3, r1, r4, lsl #24
   13660:	andeq	r3, r1, r0, lsl #16
   13664:	andeq	r3, r1, r0, ror #25
   13668:	cmp	r4, #0
   1366c:	moveq	r3, #1
   13670:	streq	r3, [sp, #40]	; 0x28
   13674:	beq	13d88 <__assert_fail@plt+0x2dcc>
   13678:	mov	r3, #0
   1367c:	mov	r2, #1
   13680:	mov	r4, r3
   13684:	str	r2, [sp, #36]	; 0x24
   13688:	str	r2, [sp, #44]	; 0x2c
   1368c:	str	r2, [sp, #56]	; 0x38
   13690:	str	r3, [sp, #68]	; 0x44
   13694:	movw	r3, #30740	; 0x7814
   13698:	movt	r3, #1
   1369c:	str	r4, [sp, #40]	; 0x28
   136a0:	mov	r8, #2
   136a4:	str	r4, [sp, #48]	; 0x30
   136a8:	str	r3, [sp, #60]	; 0x3c
   136ac:	str	r4, [sp, #72]	; 0x48
   136b0:	b	13398 <__assert_fail@plt+0x23dc>
   136b4:	cmp	r4, #0
   136b8:	bne	14904 <__assert_fail@plt+0x3948>
   136bc:	cmp	sl, #0
   136c0:	beq	146c4 <__assert_fail@plt+0x3708>
   136c4:	mov	r3, #34	; 0x22
   136c8:	mov	r1, r4
   136cc:	mov	r2, #1
   136d0:	strb	r3, [fp]
   136d4:	movw	r3, #30720	; 0x7800
   136d8:	movt	r3, #1
   136dc:	mov	r4, r2
   136e0:	str	r2, [sp, #36]	; 0x24
   136e4:	str	r2, [sp, #40]	; 0x28
   136e8:	str	r1, [sp, #44]	; 0x2c
   136ec:	str	r1, [sp, #48]	; 0x30
   136f0:	str	r2, [sp, #56]	; 0x38
   136f4:	str	r3, [sp, #60]	; 0x3c
   136f8:	str	r1, [sp, #68]	; 0x44
   136fc:	str	r1, [sp, #72]	; 0x48
   13700:	b	13398 <__assert_fail@plt+0x23dc>
   13704:	mov	r3, #0
   13708:	mov	r4, r8
   1370c:	str	r3, [sp, #40]	; 0x28
   13710:	str	r3, [sp, #44]	; 0x2c
   13714:	str	r3, [sp, #48]	; 0x30
   13718:	str	r8, [sp, #56]	; 0x38
   1371c:	str	r3, [sp, #60]	; 0x3c
   13720:	str	r3, [sp, #68]	; 0x44
   13724:	mov	r3, #1
   13728:	str	r3, [sp, #36]	; 0x24
   1372c:	str	r8, [sp, #72]	; 0x48
   13730:	b	13398 <__assert_fail@plt+0x23dc>
   13734:	mov	r3, #1
   13738:	mov	r2, #0
   1373c:	mov	r4, r2
   13740:	mov	r8, #5
   13744:	str	r3, [sp, #36]	; 0x24
   13748:	str	r3, [sp, #40]	; 0x28
   1374c:	str	r3, [sp, #44]	; 0x2c
   13750:	str	r2, [sp, #48]	; 0x30
   13754:	str	r3, [sp, #56]	; 0x38
   13758:	movw	r3, #30720	; 0x7800
   1375c:	movt	r3, #1
   13760:	str	r3, [sp, #60]	; 0x3c
   13764:	str	r2, [sp, #68]	; 0x44
   13768:	str	r2, [sp, #72]	; 0x48
   1376c:	b	13398 <__assert_fail@plt+0x23dc>
   13770:	mov	r3, #0
   13774:	mov	r2, #1
   13778:	mov	r4, r3
   1377c:	str	r2, [sp, #36]	; 0x24
   13780:	str	r2, [sp, #40]	; 0x28
   13784:	str	r3, [sp, #44]	; 0x2c
   13788:	str	r3, [sp, #48]	; 0x30
   1378c:	str	r3, [sp, #56]	; 0x38
   13790:	str	r3, [sp, #60]	; 0x3c
   13794:	str	r3, [sp, #68]	; 0x44
   13798:	str	r3, [sp, #72]	; 0x48
   1379c:	b	13398 <__assert_fail@plt+0x23dc>
   137a0:	mov	r2, #1
   137a4:	mov	r3, #0
   137a8:	mov	r4, r3
   137ac:	str	r2, [sp, #36]	; 0x24
   137b0:	str	r2, [sp, #44]	; 0x2c
   137b4:	str	r8, [sp, #56]	; 0x38
   137b8:	str	r3, [sp, #68]	; 0x44
   137bc:	b	13694 <__assert_fail@plt+0x26d8>
   137c0:	mov	r3, #1
   137c4:	mov	r2, #0
   137c8:	mov	r4, r2
   137cc:	mov	r8, #2
   137d0:	str	r3, [sp, #36]	; 0x24
   137d4:	str	r3, [sp, #40]	; 0x28
   137d8:	str	r3, [sp, #44]	; 0x2c
   137dc:	str	r2, [sp, #48]	; 0x30
   137e0:	str	r3, [sp, #56]	; 0x38
   137e4:	movw	r3, #30740	; 0x7814
   137e8:	movt	r3, #1
   137ec:	str	r3, [sp, #60]	; 0x3c
   137f0:	str	r2, [sp, #68]	; 0x44
   137f4:	str	r2, [sp, #72]	; 0x48
   137f8:	b	13398 <__assert_fail@plt+0x23dc>
   137fc:	mov	r7, #0
   13800:	ldr	r3, [sp, #28]
   13804:	cmn	r3, #1
   13808:	beq	142e0 <__assert_fail@plt+0x3324>
   1380c:	ldr	r3, [sp, #28]
   13810:	subs	r2, r3, #1
   13814:	movne	r2, #1
   13818:	sub	r3, fp, #2
   1381c:	cmp	r2, #0
   13820:	clz	r3, r3
   13824:	lsr	r3, r3, #5
   13828:	bne	13834 <__assert_fail@plt+0x2878>
   1382c:	cmp	r9, #0
   13830:	beq	14040 <__assert_fail@plt+0x3084>
   13834:	mov	r6, #0
   13838:	ldr	r2, [sp, #40]	; 0x28
   1383c:	eor	r2, r2, #1
   13840:	orrs	r3, r3, r2
   13844:	bne	13a1c <__assert_fail@plt+0x2a60>
   13848:	ldr	r2, [sp, #160]	; 0xa0
   1384c:	cmp	r2, #0
   13850:	beq	13870 <__assert_fail@plt+0x28b4>
   13854:	ldr	r0, [sp, #160]	; 0xa0
   13858:	ubfx	r1, r5, #5, #8
   1385c:	and	r2, r5, #31
   13860:	ldr	r1, [r0, r1, lsl #2]
   13864:	lsr	r2, r1, r2
   13868:	tst	r2, #1
   1386c:	bne	13878 <__assert_fail@plt+0x28bc>
   13870:	cmp	r7, #0
   13874:	beq	13ae8 <__assert_fail@plt+0x2b2c>
   13878:	ldr	r2, [sp, #44]	; 0x2c
   1387c:	sub	r3, fp, #2
   13880:	clz	r3, r3
   13884:	lsr	r3, r3, #5
   13888:	cmp	r2, #0
   1388c:	bne	14634 <__assert_fail@plt+0x3678>
   13890:	ldr	r2, [sp, #48]	; 0x30
   13894:	eor	r2, r2, #1
   13898:	ands	r3, r3, r2
   1389c:	beq	138d4 <__assert_fail@plt+0x2918>
   138a0:	cmp	sl, r4
   138a4:	str	r3, [sp, #48]	; 0x30
   138a8:	movhi	r2, #39	; 0x27
   138ac:	strbhi	r2, [r8, r4]
   138b0:	add	r2, r4, #1
   138b4:	cmp	sl, r2
   138b8:	movhi	r1, #36	; 0x24
   138bc:	strbhi	r1, [r8, r2]
   138c0:	add	r2, r4, #2
   138c4:	add	r4, r4, #3
   138c8:	cmp	sl, r2
   138cc:	movhi	r1, #39	; 0x27
   138d0:	strbhi	r1, [r8, r2]
   138d4:	cmp	r4, sl
   138d8:	add	r9, r9, #1
   138dc:	movcc	r3, #92	; 0x5c
   138e0:	strbcc	r3, [r8, r4]
   138e4:	add	r4, r4, #1
   138e8:	cmp	r4, sl
   138ec:	ldr	r3, [sp, #36]	; 0x24
   138f0:	strbcc	r5, [r8, r4]
   138f4:	cmp	r6, #0
   138f8:	add	r4, r4, #1
   138fc:	moveq	r3, #0
   13900:	str	r3, [sp, #36]	; 0x24
   13904:	ldr	r3, [sp, #28]
   13908:	cmn	r3, #1
   1390c:	bne	133b4 <__assert_fail@plt+0x23f8>
   13910:	ldr	r3, [sp, #32]
   13914:	ldrb	r6, [r3, r9]
   13918:	adds	r6, r6, #0
   1391c:	movne	r6, #1
   13920:	cmp	r6, #0
   13924:	bne	133c8 <__assert_fail@plt+0x240c>
   13928:	str	fp, [sp, #152]	; 0x98
   1392c:	mov	fp, r8
   13930:	cmp	r4, #0
   13934:	ldr	r1, [sp, #44]	; 0x2c
   13938:	movne	r3, #0
   1393c:	ldr	r8, [sp, #152]	; 0x98
   13940:	sub	r2, r8, #2
   13944:	clz	r2, r2
   13948:	lsr	r2, r2, #5
   1394c:	andeq	r3, r2, r1
   13950:	cmp	r3, #0
   13954:	bne	14a10 <__assert_fail@plt+0x3a54>
   13958:	eor	r3, r1, #1
   1395c:	ands	r2, r2, r3
   13960:	beq	1493c <__assert_fail@plt+0x3980>
   13964:	ldr	r3, [sp, #68]	; 0x44
   13968:	cmp	r3, #0
   1396c:	beq	14940 <__assert_fail@plt+0x3984>
   13970:	ldr	r3, [sp, #36]	; 0x24
   13974:	cmp	r3, #0
   13978:	bne	149cc <__assert_fail@plt+0x3a10>
   1397c:	ldr	r3, [sp, #72]	; 0x48
   13980:	adds	r3, r3, #0
   13984:	movne	r3, #1
   13988:	cmp	sl, #0
   1398c:	movne	r3, #0
   13990:	cmp	r3, #0
   13994:	ldreq	r2, [sp, #68]	; 0x44
   13998:	beq	14940 <__assert_fail@plt+0x3984>
   1399c:	ldr	r2, [sp, #72]	; 0x48
   139a0:	str	r3, [sp, #68]	; 0x44
   139a4:	movw	r3, #30740	; 0x7814
   139a8:	movt	r3, #1
   139ac:	mov	r1, #39	; 0x27
   139b0:	mov	r4, #1
   139b4:	ldr	sl, [sp, #72]	; 0x48
   139b8:	mov	r8, #2
   139bc:	str	r3, [sp, #60]	; 0x3c
   139c0:	mov	r3, #0
   139c4:	strb	r1, [fp]
   139c8:	str	r3, [sp, #44]	; 0x2c
   139cc:	str	r4, [sp, #56]	; 0x38
   139d0:	str	r2, [sp, #72]	; 0x48
   139d4:	b	13398 <__assert_fail@plt+0x23dc>
   139d8:	mov	r7, #0
   139dc:	cmp	fp, #2
   139e0:	beq	142c0 <__assert_fail@plt+0x3304>
   139e4:	ldr	r2, [sp, #40]	; 0x28
   139e8:	ldr	r3, [sp, #56]	; 0x38
   139ec:	ldr	r1, [sp, #44]	; 0x2c
   139f0:	cmp	r3, #0
   139f4:	moveq	r3, #0
   139f8:	andne	r3, r2, r1
   139fc:	cmp	r3, #0
   13a00:	moveq	r5, #92	; 0x5c
   13a04:	moveq	r3, r5
   13a08:	bne	142cc <__assert_fail@plt+0x3310>
   13a0c:	ldr	r2, [sp, #40]	; 0x28
   13a10:	cmp	r2, #0
   13a14:	bne	14708 <__assert_fail@plt+0x374c>
   13a18:	mov	r6, #0
   13a1c:	ldr	r3, [sp, #44]	; 0x2c
   13a20:	cmp	r3, #0
   13a24:	beq	142b8 <__assert_fail@plt+0x32fc>
   13a28:	mov	r3, #0
   13a2c:	b	13848 <__assert_fail@plt+0x288c>
   13a30:	mov	r7, #0
   13a34:	cmp	fp, #2
   13a38:	beq	14330 <__assert_fail@plt+0x3374>
   13a3c:	cmp	fp, #5
   13a40:	beq	142f4 <__assert_fail@plt+0x3338>
   13a44:	sub	r3, fp, #2
   13a48:	mov	r6, #0
   13a4c:	clz	r3, r3
   13a50:	mov	r5, #63	; 0x3f
   13a54:	lsr	r3, r3, #5
   13a58:	b	13838 <__assert_fail@plt+0x287c>
   13a5c:	mov	r7, #0
   13a60:	cmp	fp, #2
   13a64:	movne	r3, #0
   13a68:	movne	r5, #39	; 0x27
   13a6c:	strne	r6, [sp, #68]	; 0x44
   13a70:	bne	13838 <__assert_fail@plt+0x287c>
   13a74:	ldr	r3, [sp, #44]	; 0x2c
   13a78:	cmp	r3, #0
   13a7c:	bne	14738 <__assert_fail@plt+0x377c>
   13a80:	ldr	r3, [sp, #72]	; 0x48
   13a84:	cmp	sl, #0
   13a88:	clz	r3, r3
   13a8c:	lsr	r3, r3, #5
   13a90:	moveq	r3, #0
   13a94:	cmp	r3, #0
   13a98:	bne	14664 <__assert_fail@plt+0x36a8>
   13a9c:	cmp	sl, r4
   13aa0:	movhi	r3, #39	; 0x27
   13aa4:	strbhi	r3, [r8, r4]
   13aa8:	add	r3, r4, #1
   13aac:	cmp	sl, r3
   13ab0:	movhi	r2, #92	; 0x5c
   13ab4:	strbhi	r2, [r8, r3]
   13ab8:	add	r3, r4, #2
   13abc:	cmp	sl, r3
   13ac0:	bls	13acc <__assert_fail@plt+0x2b10>
   13ac4:	mov	r2, #39	; 0x27
   13ac8:	strb	r2, [r8, r3]
   13acc:	mov	r3, #0
   13ad0:	cmp	r7, #0
   13ad4:	add	r4, r4, #3
   13ad8:	mov	r5, #39	; 0x27
   13adc:	str	r3, [sp, #48]	; 0x30
   13ae0:	str	r6, [sp, #68]	; 0x44
   13ae4:	bne	13878 <__assert_fail@plt+0x28bc>
   13ae8:	ldr	r2, [sp, #48]	; 0x30
   13aec:	eor	r3, r3, #1
   13af0:	add	r9, r9, #1
   13af4:	and	r3, r3, r2
   13af8:	uxtb	r3, r3
   13afc:	cmp	r3, #0
   13b00:	beq	138e8 <__assert_fail@plt+0x292c>
   13b04:	cmp	sl, r4
   13b08:	movhi	r3, #39	; 0x27
   13b0c:	strbhi	r3, [r8, r4]
   13b10:	add	r3, r4, #1
   13b14:	add	r4, r4, #2
   13b18:	cmp	sl, r3
   13b1c:	movhi	r2, #39	; 0x27
   13b20:	strbhi	r2, [r8, r3]
   13b24:	mov	r3, #0
   13b28:	str	r3, [sp, #48]	; 0x30
   13b2c:	b	138e8 <__assert_fail@plt+0x292c>
   13b30:	mov	r3, #118	; 0x76
   13b34:	b	13a0c <__assert_fail@plt+0x2a50>
   13b38:	mov	r3, #116	; 0x74
   13b3c:	ldr	r2, [sp, #44]	; 0x2c
   13b40:	cmp	fp, #2
   13b44:	movne	r2, #0
   13b48:	andeq	r2, r2, #1
   13b4c:	cmp	r2, #0
   13b50:	beq	13a0c <__assert_fail@plt+0x2a50>
   13b54:	mov	fp, r8
   13b58:	mov	r8, #2
   13b5c:	ldr	r3, [sp, #40]	; 0x28
   13b60:	cmp	r3, #0
   13b64:	movne	r8, #4
   13b68:	mov	lr, #0
   13b6c:	mov	r0, fp
   13b70:	ldr	r2, [sp, #32]
   13b74:	ldr	r3, [sp, #156]	; 0x9c
   13b78:	ldr	r1, [sp, #164]	; 0xa4
   13b7c:	bic	ip, r3, #2
   13b80:	ldr	r3, [sp, #28]
   13b84:	stm	sp, {r8, ip, lr}
   13b88:	ldr	ip, [sp, #168]	; 0xa8
   13b8c:	str	r1, [sp, #12]
   13b90:	mov	r1, sl
   13b94:	str	ip, [sp, #16]
   13b98:	bl	132b0 <__assert_fail@plt+0x22f4>
   13b9c:	mov	r4, r0
   13ba0:	mov	r0, r4
   13ba4:	add	sp, sp, #116	; 0x74
   13ba8:	ldrd	r4, [sp]
   13bac:	ldrd	r6, [sp, #8]
   13bb0:	ldrd	r8, [sp, #16]
   13bb4:	ldrd	sl, [sp, #24]
   13bb8:	add	sp, sp, #32
   13bbc:	pop	{pc}		; (ldr pc, [sp], #4)
   13bc0:	mov	r5, #102	; 0x66
   13bc4:	ldr	r2, [sp, #44]	; 0x2c
   13bc8:	sub	r3, fp, #2
   13bcc:	clz	r3, r3
   13bd0:	lsr	r3, r3, #5
   13bd4:	cmp	r2, #0
   13bd8:	bne	14634 <__assert_fail@plt+0x3678>
   13bdc:	mov	r6, r2
   13be0:	b	138d4 <__assert_fail@plt+0x2918>
   13be4:	mov	r5, #110	; 0x6e
   13be8:	mov	r6, #0
   13bec:	b	13878 <__assert_fail@plt+0x28bc>
   13bf0:	mov	r5, #98	; 0x62
   13bf4:	b	13bc4 <__assert_fail@plt+0x2c08>
   13bf8:	mov	r5, #97	; 0x61
   13bfc:	b	13bc4 <__assert_fail@plt+0x2c08>
   13c00:	mov	r7, #0
   13c04:	mov	r6, #0
   13c08:	b	13a28 <__assert_fail@plt+0x2a6c>
   13c0c:	mov	r5, #114	; 0x72
   13c10:	b	13be8 <__assert_fail@plt+0x2c2c>
   13c14:	ldr	r3, [sp, #44]	; 0x2c
   13c18:	cmp	r3, #0
   13c1c:	bne	149ac <__assert_fail@plt+0x39f0>
   13c20:	mov	r7, r3
   13c24:	ldr	r3, [sp, #48]	; 0x30
   13c28:	sub	r2, fp, #2
   13c2c:	clz	r2, r2
   13c30:	lsr	r2, r2, #5
   13c34:	eor	r3, r3, #1
   13c38:	ands	r3, r2, r3
   13c3c:	beq	14650 <__assert_fail@plt+0x3694>
   13c40:	cmp	sl, r4
   13c44:	movhi	r1, #39	; 0x27
   13c48:	strbhi	r1, [r8, r4]
   13c4c:	add	r1, r4, #1
   13c50:	cmp	sl, r1
   13c54:	movhi	r0, #36	; 0x24
   13c58:	strbhi	r0, [r8, r1]
   13c5c:	add	r1, r4, #2
   13c60:	cmp	sl, r1
   13c64:	movhi	r0, #39	; 0x27
   13c68:	strbhi	r0, [r8, r1]
   13c6c:	add	r1, r4, #3
   13c70:	cmp	sl, r1
   13c74:	bls	146a8 <__assert_fail@plt+0x36ec>
   13c78:	mov	r4, r1
   13c7c:	mov	r1, #92	; 0x5c
   13c80:	mov	r0, r4
   13c84:	str	r3, [sp, #48]	; 0x30
   13c88:	strb	r1, [r8, r4]
   13c8c:	cmp	fp, #2
   13c90:	add	r4, r4, #1
   13c94:	beq	146f8 <__assert_fail@plt+0x373c>
   13c98:	ldr	r1, [sp, #28]
   13c9c:	add	r3, r9, #1
   13ca0:	cmp	r3, r1
   13ca4:	bcs	13cbc <__assert_fail@plt+0x2d00>
   13ca8:	ldr	r1, [sp, #32]
   13cac:	ldrb	r3, [r1, r3]
   13cb0:	sub	r3, r3, #48	; 0x30
   13cb4:	cmp	r3, #9
   13cb8:	bls	14710 <__assert_fail@plt+0x3754>
   13cbc:	mov	r5, #48	; 0x30
   13cc0:	ldr	r3, [sp, #40]	; 0x28
   13cc4:	eor	r3, r3, #1
   13cc8:	orrs	r2, r2, r3
   13ccc:	mov	r3, r6
   13cd0:	moveq	r6, r2
   13cd4:	beq	13848 <__assert_fail@plt+0x288c>
   13cd8:	mov	r6, #0
   13cdc:	b	13870 <__assert_fail@plt+0x28b4>
   13ce0:	cmp	r9, #0
   13ce4:	mov	r2, r7
   13ce8:	bne	14288 <__assert_fail@plt+0x32cc>
   13cec:	mov	r6, r7
   13cf0:	mov	r3, r9
   13cf4:	mov	r7, r2
   13cf8:	b	13838 <__assert_fail@plt+0x287c>
   13cfc:	mov	r2, r7
   13d00:	mov	r6, r7
   13d04:	mov	r3, #0
   13d08:	mov	r7, r2
   13d0c:	mov	r5, #32
   13d10:	b	13838 <__assert_fail@plt+0x287c>
   13d14:	mov	r6, r7
   13d18:	b	13a28 <__assert_fail@plt+0x2a6c>
   13d1c:	mov	r7, #0
   13d20:	ldr	r3, [sp, #64]	; 0x40
   13d24:	cmp	r3, #1
   13d28:	bne	14348 <__assert_fail@plt+0x338c>
   13d2c:	bl	10ec0 <__ctype_b_loc@plt>
   13d30:	ldr	r2, [r0]
   13d34:	sxth	r3, r5
   13d38:	lsl	r3, r3, #1
   13d3c:	ldr	r1, [sp, #64]	; 0x40
   13d40:	ldrh	r3, [r2, r3]
   13d44:	mov	ip, r1
   13d48:	and	r3, r3, #16384	; 0x4000
   13d4c:	cmp	r3, #0
   13d50:	ldr	r3, [sp, #40]	; 0x28
   13d54:	movne	r6, #1
   13d58:	moveq	r6, #0
   13d5c:	movne	r2, #0
   13d60:	andeq	r2, r3, #1
   13d64:	cmp	r2, #0
   13d68:	bne	14690 <__assert_fail@plt+0x36d4>
   13d6c:	sub	r3, fp, #2
   13d70:	clz	r3, r3
   13d74:	lsr	r3, r3, #5
   13d78:	b	13838 <__assert_fail@plt+0x287c>
   13d7c:	cmp	r4, #0
   13d80:	bne	14a20 <__assert_fail@plt+0x3a64>
   13d84:	str	r4, [sp, #40]	; 0x28
   13d88:	cmp	sl, #0
   13d8c:	bne	14a50 <__assert_fail@plt+0x3a94>
   13d90:	mov	r3, #1
   13d94:	movw	r2, #30740	; 0x7814
   13d98:	movt	r2, #1
   13d9c:	mov	r4, r3
   13da0:	mov	r8, #2
   13da4:	str	r3, [sp, #36]	; 0x24
   13da8:	str	sl, [sp, #44]	; 0x2c
   13dac:	str	sl, [sp, #48]	; 0x30
   13db0:	str	r3, [sp, #56]	; 0x38
   13db4:	str	r2, [sp, #60]	; 0x3c
   13db8:	str	sl, [sp, #68]	; 0x44
   13dbc:	str	sl, [sp, #72]	; 0x48
   13dc0:	b	13398 <__assert_fail@plt+0x23dc>
   13dc4:	ldr	r3, [sp, #32]
   13dc8:	ldrb	r5, [r3, r9]
   13dcc:	cmp	r5, #126	; 0x7e
   13dd0:	ldrls	pc, [pc, r5, lsl #2]
   13dd4:	b	13d20 <__assert_fail@plt+0x2d64>
   13dd8:	strdeq	r3, [r1], -ip
   13ddc:	andeq	r3, r1, r0, lsr #26
   13de0:	andeq	r3, r1, r0, lsr #26
   13de4:	andeq	r3, r1, r0, lsr #26
   13de8:	andeq	r3, r1, r0, lsr #26
   13dec:	andeq	r3, r1, r0, lsr #26
   13df0:	andeq	r3, r1, r0, lsr #26
   13df4:	strdeq	r3, [r1], -r4
   13df8:	andeq	r3, r1, ip, ror #31
   13dfc:	andeq	r3, r1, r8, lsr fp
   13e00:	andeq	r3, r1, r4, ror #31
   13e04:	andeq	r3, r1, r0, lsr fp
   13e08:	ldrdeq	r3, [r1], -ip
   13e0c:	ldrdeq	r3, [r1], -r4
   13e10:	andeq	r3, r1, r0, lsr #26
   13e14:	andeq	r3, r1, r0, lsr #26
   13e18:	andeq	r3, r1, r0, lsr #26
   13e1c:	andeq	r3, r1, r0, lsr #26
   13e20:	andeq	r3, r1, r0, lsr #26
   13e24:	andeq	r3, r1, r0, lsr #26
   13e28:	andeq	r3, r1, r0, lsr #26
   13e2c:	andeq	r3, r1, r0, lsr #26
   13e30:	andeq	r3, r1, r0, lsr #26
   13e34:	andeq	r3, r1, r0, lsr #26
   13e38:	andeq	r3, r1, r0, lsr #26
   13e3c:	andeq	r3, r1, r0, lsr #26
   13e40:	andeq	r3, r1, r0, lsr #26
   13e44:	andeq	r3, r1, r0, lsr #26
   13e48:	andeq	r3, r1, r0, lsr #26
   13e4c:	andeq	r3, r1, r0, lsr #26
   13e50:	andeq	r3, r1, r0, lsr #26
   13e54:	andeq	r3, r1, r0, lsr #26
   13e58:	andeq	r4, r1, r0, asr r0
   13e5c:	andeq	r4, r1, r0, lsr r0
   13e60:	andeq	r4, r1, r0, lsr r0
   13e64:	andeq	r4, r1, r0, lsr #32
   13e68:	andeq	r4, r1, r0, lsr r0
   13e6c:	andeq	r3, r1, ip, ror #26
   13e70:	andeq	r4, r1, r0, lsr r0
   13e74:	andeq	r3, r1, r0, ror #20
   13e78:	andeq	r4, r1, r0, lsr r0
   13e7c:	andeq	r4, r1, r0, lsr r0
   13e80:	andeq	r4, r1, r0, lsr r0
   13e84:	andeq	r3, r1, ip, ror #26
   13e88:	andeq	r3, r1, ip, ror #26
   13e8c:	andeq	r3, r1, ip, ror #26
   13e90:	andeq	r3, r1, ip, ror #26
   13e94:	andeq	r3, r1, ip, ror #26
   13e98:	andeq	r3, r1, ip, ror #26
   13e9c:	andeq	r3, r1, ip, ror #26
   13ea0:	andeq	r3, r1, ip, ror #26
   13ea4:	andeq	r3, r1, ip, ror #26
   13ea8:	andeq	r3, r1, ip, ror #26
   13eac:	andeq	r3, r1, ip, ror #26
   13eb0:	andeq	r3, r1, ip, ror #26
   13eb4:	andeq	r3, r1, ip, ror #26
   13eb8:	andeq	r3, r1, ip, ror #26
   13ebc:	andeq	r3, r1, ip, ror #26
   13ec0:	andeq	r3, r1, ip, ror #26
   13ec4:	andeq	r4, r1, r0, lsr r0
   13ec8:	andeq	r4, r1, r0, lsr r0
   13ecc:	andeq	r4, r1, r0, lsr r0
   13ed0:	andeq	r4, r1, r0, lsr r0
   13ed4:	andeq	r3, r1, r4, lsr sl
   13ed8:	andeq	r3, r1, r0, lsr #26
   13edc:	andeq	r3, r1, ip, ror #26
   13ee0:	andeq	r3, r1, ip, ror #26
   13ee4:	andeq	r3, r1, ip, ror #26
   13ee8:	andeq	r3, r1, ip, ror #26
   13eec:	andeq	r3, r1, ip, ror #26
   13ef0:	andeq	r3, r1, ip, ror #26
   13ef4:	andeq	r3, r1, ip, ror #26
   13ef8:	andeq	r3, r1, ip, ror #26
   13efc:	andeq	r3, r1, ip, ror #26
   13f00:	andeq	r3, r1, ip, ror #26
   13f04:	andeq	r3, r1, ip, ror #26
   13f08:	andeq	r3, r1, ip, ror #26
   13f0c:	andeq	r3, r1, ip, ror #26
   13f10:	andeq	r3, r1, ip, ror #26
   13f14:	andeq	r3, r1, ip, ror #26
   13f18:	andeq	r3, r1, ip, ror #26
   13f1c:	andeq	r3, r1, ip, ror #26
   13f20:	andeq	r3, r1, ip, ror #26
   13f24:	andeq	r3, r1, ip, ror #26
   13f28:	andeq	r3, r1, ip, ror #26
   13f2c:	andeq	r3, r1, ip, ror #26
   13f30:	andeq	r3, r1, ip, ror #26
   13f34:	andeq	r3, r1, ip, ror #26
   13f38:	andeq	r3, r1, ip, ror #26
   13f3c:	andeq	r3, r1, ip, ror #26
   13f40:	andeq	r3, r1, ip, ror #26
   13f44:	andeq	r4, r1, r0, lsr r0
   13f48:	ldrdeq	r3, [r1], -ip
   13f4c:	andeq	r3, r1, ip, ror #26
   13f50:	andeq	r4, r1, r0, lsr r0
   13f54:	andeq	r3, r1, ip, ror #26
   13f58:	andeq	r4, r1, r0, lsr r0
   13f5c:	andeq	r3, r1, ip, ror #26
   13f60:	andeq	r3, r1, ip, ror #26
   13f64:	andeq	r3, r1, ip, ror #26
   13f68:	andeq	r3, r1, ip, ror #26
   13f6c:	andeq	r3, r1, ip, ror #26
   13f70:	andeq	r3, r1, ip, ror #26
   13f74:	andeq	r3, r1, ip, ror #26
   13f78:	andeq	r3, r1, ip, ror #26
   13f7c:	andeq	r3, r1, ip, ror #26
   13f80:	andeq	r3, r1, ip, ror #26
   13f84:	andeq	r3, r1, ip, ror #26
   13f88:	andeq	r3, r1, ip, ror #26
   13f8c:	andeq	r3, r1, ip, ror #26
   13f90:	andeq	r3, r1, ip, ror #26
   13f94:	andeq	r3, r1, ip, ror #26
   13f98:	andeq	r3, r1, ip, ror #26
   13f9c:	andeq	r3, r1, ip, ror #26
   13fa0:	andeq	r3, r1, ip, ror #26
   13fa4:	andeq	r3, r1, ip, ror #26
   13fa8:	andeq	r3, r1, ip, ror #26
   13fac:	andeq	r3, r1, ip, ror #26
   13fb0:	andeq	r3, r1, ip, ror #26
   13fb4:	andeq	r3, r1, ip, ror #26
   13fb8:	andeq	r3, r1, ip, ror #26
   13fbc:	andeq	r3, r1, ip, ror #26
   13fc0:	andeq	r3, r1, ip, ror #26
   13fc4:	andeq	r3, r1, r0, lsl #16
   13fc8:	andeq	r4, r1, r0, lsr r0
   13fcc:	andeq	r3, r1, r0, lsl #16
   13fd0:	andeq	r4, r1, r0, lsr #32
   13fd4:	mov	r3, #114	; 0x72
   13fd8:	b	13b3c <__assert_fail@plt+0x2b80>
   13fdc:	mov	r3, #102	; 0x66
   13fe0:	b	13a0c <__assert_fail@plt+0x2a50>
   13fe4:	mov	r3, #110	; 0x6e
   13fe8:	b	13b3c <__assert_fail@plt+0x2b80>
   13fec:	mov	r3, #98	; 0x62
   13ff0:	b	13a0c <__assert_fail@plt+0x2a50>
   13ff4:	mov	r3, #97	; 0x61
   13ff8:	b	13a0c <__assert_fail@plt+0x2a50>
   13ffc:	ldr	r3, [sp, #40]	; 0x28
   14000:	cmp	r3, #0
   14004:	bne	13c14 <__assert_fail@plt+0x2c58>
   14008:	ldr	r3, [sp, #156]	; 0x9c
   1400c:	tst	r3, #1
   14010:	addne	r9, r9, #1
   14014:	bne	133a8 <__assert_fail@plt+0x23ec>
   14018:	ldr	r7, [sp, #40]	; 0x28
   1401c:	b	13a18 <__assert_fail@plt+0x2a5c>
   14020:	sub	r3, fp, #2
   14024:	clz	r3, r3
   14028:	lsr	r3, r3, #5
   1402c:	b	1382c <__assert_fail@plt+0x2870>
   14030:	sub	r3, fp, #2
   14034:	mov	r6, #0
   14038:	clz	r3, r3
   1403c:	lsr	r3, r3, #5
   14040:	ldr	r2, [sp, #44]	; 0x2c
   14044:	tst	r2, r3
   14048:	beq	13838 <__assert_fail@plt+0x287c>
   1404c:	b	13b54 <__assert_fail@plt+0x2b98>
   14050:	sub	r3, fp, #2
   14054:	clz	r3, r3
   14058:	lsr	r3, r3, #5
   1405c:	b	14040 <__assert_fail@plt+0x3084>
   14060:	ldr	r3, [sp, #52]	; 0x34
   14064:	ldrb	r5, [r3]
   14068:	cmp	r5, #126	; 0x7e
   1406c:	ldrls	pc, [pc, r5, lsl #2]
   14070:	b	13d1c <__assert_fail@plt+0x2d60>
   14074:	andeq	r3, r1, r4, lsl ip
   14078:	andeq	r3, r1, ip, lsl sp
   1407c:	andeq	r3, r1, ip, lsl sp
   14080:	andeq	r3, r1, ip, lsl sp
   14084:	andeq	r3, r1, ip, lsl sp
   14088:	andeq	r3, r1, ip, lsl sp
   1408c:	andeq	r3, r1, ip, lsl sp
   14090:	strdeq	r3, [r1], -r8
   14094:	strdeq	r3, [r1], -r0
   14098:	andeq	r4, r1, ip, lsr #5
   1409c:	andeq	r3, r1, r4, ror #23
   140a0:	andeq	r4, r1, r0, lsr #5
   140a4:	andeq	r3, r1, r0, asr #23
   140a8:	andeq	r3, r1, ip, lsl #24
   140ac:	andeq	r3, r1, ip, lsl sp
   140b0:	andeq	r3, r1, ip, lsl sp
   140b4:	andeq	r3, r1, ip, lsl sp
   140b8:	andeq	r3, r1, ip, lsl sp
   140bc:	andeq	r3, r1, ip, lsl sp
   140c0:	andeq	r3, r1, ip, lsl sp
   140c4:	andeq	r3, r1, ip, lsl sp
   140c8:	andeq	r3, r1, ip, lsl sp
   140cc:	andeq	r3, r1, ip, lsl sp
   140d0:	andeq	r3, r1, ip, lsl sp
   140d4:	andeq	r3, r1, ip, lsl sp
   140d8:	andeq	r3, r1, ip, lsl sp
   140dc:	andeq	r3, r1, ip, lsl sp
   140e0:	andeq	r3, r1, ip, lsl sp
   140e4:	andeq	r3, r1, ip, lsl sp
   140e8:	andeq	r3, r1, ip, lsl sp
   140ec:	andeq	r3, r1, ip, lsl sp
   140f0:	andeq	r3, r1, ip, lsl sp
   140f4:	muleq	r1, r8, r2
   140f8:	andeq	r3, r1, r0, lsl #24
   140fc:	andeq	r3, r1, r0, lsl #24
   14100:	andeq	r4, r1, ip, ror r2
   14104:	andeq	r3, r1, r0, lsl #24
   14108:	andeq	r4, r1, r0, ror r2
   1410c:	andeq	r3, r1, r0, lsl #24
   14110:	andeq	r3, r1, ip, asr sl
   14114:	andeq	r3, r1, r0, lsl #24
   14118:	andeq	r3, r1, r0, lsl #24
   1411c:	andeq	r3, r1, r0, lsl #24
   14120:	andeq	r4, r1, r0, ror r2
   14124:	andeq	r4, r1, r0, ror r2
   14128:	andeq	r4, r1, r0, ror r2
   1412c:	andeq	r4, r1, r0, ror r2
   14130:	andeq	r4, r1, r0, ror r2
   14134:	andeq	r4, r1, r0, ror r2
   14138:	andeq	r4, r1, r0, ror r2
   1413c:	andeq	r4, r1, r0, ror r2
   14140:	andeq	r4, r1, r0, ror r2
   14144:	andeq	r4, r1, r0, ror r2
   14148:	andeq	r4, r1, r0, ror r2
   1414c:	andeq	r4, r1, r0, ror r2
   14150:	andeq	r4, r1, r0, ror r2
   14154:	andeq	r4, r1, r0, ror r2
   14158:	andeq	r4, r1, r0, ror r2
   1415c:	andeq	r4, r1, r0, ror r2
   14160:	andeq	r3, r1, r0, lsl #24
   14164:	andeq	r3, r1, r0, lsl #24
   14168:	andeq	r3, r1, r0, lsl #24
   1416c:	andeq	r3, r1, r0, lsl #24
   14170:	andeq	r3, r1, r0, lsr sl
   14174:	andeq	r3, r1, ip, lsl sp
   14178:	andeq	r4, r1, r0, ror r2
   1417c:	andeq	r4, r1, r0, ror r2
   14180:	andeq	r4, r1, r0, ror r2
   14184:	andeq	r4, r1, r0, ror r2
   14188:	andeq	r4, r1, r0, ror r2
   1418c:	andeq	r4, r1, r0, ror r2
   14190:	andeq	r4, r1, r0, ror r2
   14194:	andeq	r4, r1, r0, ror r2
   14198:	andeq	r4, r1, r0, ror r2
   1419c:	andeq	r4, r1, r0, ror r2
   141a0:	andeq	r4, r1, r0, ror r2
   141a4:	andeq	r4, r1, r0, ror r2
   141a8:	andeq	r4, r1, r0, ror r2
   141ac:	andeq	r4, r1, r0, ror r2
   141b0:	andeq	r4, r1, r0, ror r2
   141b4:	andeq	r4, r1, r0, ror r2
   141b8:	andeq	r4, r1, r0, ror r2
   141bc:	andeq	r4, r1, r0, ror r2
   141c0:	andeq	r4, r1, r0, ror r2
   141c4:	andeq	r4, r1, r0, ror r2
   141c8:	andeq	r4, r1, r0, ror r2
   141cc:	andeq	r4, r1, r0, ror r2
   141d0:	andeq	r4, r1, r0, ror r2
   141d4:	andeq	r4, r1, r0, ror r2
   141d8:	andeq	r4, r1, r0, ror r2
   141dc:	andeq	r4, r1, r0, ror r2
   141e0:	andeq	r3, r1, r0, lsl #24
   141e4:	ldrdeq	r3, [r1], -r8
   141e8:	andeq	r4, r1, r0, ror r2
   141ec:	andeq	r3, r1, r0, lsl #24
   141f0:	andeq	r4, r1, r0, ror r2
   141f4:	andeq	r3, r1, r0, lsl #24
   141f8:	andeq	r4, r1, r0, ror r2
   141fc:	andeq	r4, r1, r0, ror r2
   14200:	andeq	r4, r1, r0, ror r2
   14204:	andeq	r4, r1, r0, ror r2
   14208:	andeq	r4, r1, r0, ror r2
   1420c:	andeq	r4, r1, r0, ror r2
   14210:	andeq	r4, r1, r0, ror r2
   14214:	andeq	r4, r1, r0, ror r2
   14218:	andeq	r4, r1, r0, ror r2
   1421c:	andeq	r4, r1, r0, ror r2
   14220:	andeq	r4, r1, r0, ror r2
   14224:	andeq	r4, r1, r0, ror r2
   14228:	andeq	r4, r1, r0, ror r2
   1422c:	andeq	r4, r1, r0, ror r2
   14230:	andeq	r4, r1, r0, ror r2
   14234:	andeq	r4, r1, r0, ror r2
   14238:	andeq	r4, r1, r0, ror r2
   1423c:	andeq	r4, r1, r0, ror r2
   14240:	andeq	r4, r1, r0, ror r2
   14244:	andeq	r4, r1, r0, ror r2
   14248:	andeq	r4, r1, r0, ror r2
   1424c:	andeq	r4, r1, r0, ror r2
   14250:	andeq	r4, r1, r0, ror r2
   14254:	andeq	r4, r1, r0, ror r2
   14258:	andeq	r4, r1, r0, ror r2
   1425c:	andeq	r4, r1, r0, ror r2
   14260:	strdeq	r3, [r1], -ip
   14264:	andeq	r3, r1, r0, lsl #24
   14268:	strdeq	r3, [r1], -ip
   1426c:	andeq	r4, r1, ip, ror r2
   14270:	mov	r6, r7
   14274:	mov	r7, #0
   14278:	b	13a28 <__assert_fail@plt+0x2a6c>
   1427c:	cmp	r9, #0
   14280:	mov	r2, #0
   14284:	beq	13cec <__assert_fail@plt+0x2d30>
   14288:	mov	r6, #0
   1428c:	mov	r7, r2
   14290:	mov	r3, r6
   14294:	b	13848 <__assert_fail@plt+0x288c>
   14298:	mov	r2, #0
   1429c:	b	13d00 <__assert_fail@plt+0x2d44>
   142a0:	mov	r7, #0
   142a4:	mov	r3, #118	; 0x76
   142a8:	b	13a0c <__assert_fail@plt+0x2a50>
   142ac:	mov	r7, #0
   142b0:	mov	r3, #116	; 0x74
   142b4:	b	13b3c <__assert_fail@plt+0x2b80>
   142b8:	ldr	r3, [sp, #44]	; 0x2c
   142bc:	b	13870 <__assert_fail@plt+0x28b4>
   142c0:	ldr	r3, [sp, #44]	; 0x2c
   142c4:	cmp	r3, #0
   142c8:	bne	14738 <__assert_fail@plt+0x377c>
   142cc:	add	r9, r9, #1
   142d0:	mov	r6, #0
   142d4:	ldr	r3, [sp, #48]	; 0x30
   142d8:	mov	r5, #92	; 0x5c
   142dc:	b	13afc <__assert_fail@plt+0x2b40>
   142e0:	ldr	r3, [sp, #32]
   142e4:	ldrb	r2, [r3, #1]
   142e8:	adds	r2, r2, #0
   142ec:	movne	r2, #1
   142f0:	b	13818 <__assert_fail@plt+0x285c>
   142f4:	ldr	r3, [sp, #156]	; 0x9c
   142f8:	ands	r3, r3, #4
   142fc:	beq	14324 <__assert_fail@plt+0x3368>
   14300:	ldr	r2, [sp, #28]
   14304:	add	r3, r9, #2
   14308:	cmp	r3, r2
   1430c:	bcs	14320 <__assert_fail@plt+0x3364>
   14310:	ldr	r2, [sp, #52]	; 0x34
   14314:	ldrb	r5, [r2, #1]
   14318:	cmp	r5, #63	; 0x3f
   1431c:	beq	1479c <__assert_fail@plt+0x37e0>
   14320:	mov	r3, #0
   14324:	mov	r5, #63	; 0x3f
   14328:	mov	r6, r3
   1432c:	b	13838 <__assert_fail@plt+0x287c>
   14330:	ldr	r3, [sp, #44]	; 0x2c
   14334:	cmp	r3, #0
   14338:	bne	14738 <__assert_fail@plt+0x377c>
   1433c:	mov	r6, r3
   14340:	mov	r5, #63	; 0x3f
   14344:	b	13870 <__assert_fail@plt+0x28b4>
   14348:	ldr	r1, [sp, #28]
   1434c:	mov	r2, #0
   14350:	mov	r3, #0
   14354:	strd	r2, [sp, #104]	; 0x68
   14358:	cmn	r1, #1
   1435c:	bne	1436c <__assert_fail@plt+0x33b0>
   14360:	ldr	r0, [sp, #32]
   14364:	bl	10ed8 <strlen@plt>
   14368:	str	r0, [sp, #28]
   1436c:	str	r8, [sp, #76]	; 0x4c
   14370:	mov	r3, #0
   14374:	str	sl, [sp, #80]	; 0x50
   14378:	ldr	sl, [sp, #32]
   1437c:	str	r5, [sp, #84]	; 0x54
   14380:	mov	r5, r3
   14384:	ldr	r8, [sp, #44]	; 0x2c
   14388:	str	r7, [sp, #88]	; 0x58
   1438c:	str	r4, [sp, #92]	; 0x5c
   14390:	ldr	r2, [sp, #28]
   14394:	add	r4, r9, r5
   14398:	add	r3, sp, #104	; 0x68
   1439c:	add	r7, sl, r4
   143a0:	add	r0, sp, #100	; 0x64
   143a4:	mov	r1, r7
   143a8:	sub	r2, r2, r4
   143ac:	bl	1691c <__assert_fail@plt+0x5960>
   143b0:	subs	r1, r0, #0
   143b4:	beq	14400 <__assert_fail@plt+0x3444>
   143b8:	cmn	r1, #1
   143bc:	beq	14778 <__assert_fail@plt+0x37bc>
   143c0:	cmn	r1, #2
   143c4:	beq	14898 <__assert_fail@plt+0x38dc>
   143c8:	cmp	fp, #2
   143cc:	movne	r3, #0
   143d0:	andeq	r3, r8, #1
   143d4:	cmp	r3, #0
   143d8:	bne	14564 <__assert_fail@plt+0x35a8>
   143dc:	ldr	r0, [sp, #100]	; 0x64
   143e0:	add	r5, r5, r1
   143e4:	bl	10e00 <iswprint@plt>
   143e8:	cmp	r0, #0
   143ec:	add	r0, sp, #104	; 0x68
   143f0:	moveq	r6, #0
   143f4:	bl	10da0 <mbsinit@plt>
   143f8:	cmp	r0, #0
   143fc:	beq	14390 <__assert_fail@plt+0x33d4>
   14400:	ldr	r3, [sp, #40]	; 0x28
   14404:	mov	ip, r5
   14408:	eor	r2, r6, #1
   1440c:	ldr	r8, [sp, #76]	; 0x4c
   14410:	ldr	sl, [sp, #80]	; 0x50
   14414:	and	r2, r2, r3
   14418:	ldr	r5, [sp, #84]	; 0x54
   1441c:	ldr	r7, [sp, #88]	; 0x58
   14420:	ldr	r4, [sp, #92]	; 0x5c
   14424:	cmp	ip, #1
   14428:	bls	13d64 <__assert_fail@plt+0x2da8>
   1442c:	add	r1, ip, r9
   14430:	mov	r0, #39	; 0x27
   14434:	ldr	lr, [sp, #52]	; 0x34
   14438:	mov	ip, #0
   1443c:	str	r6, [sp, #52]	; 0x34
   14440:	ldr	r6, [sp, #48]	; 0x30
   14444:	b	14500 <__assert_fail@plt+0x3544>
   14448:	ldr	ip, [sp, #44]	; 0x2c
   1444c:	sub	r3, fp, #2
   14450:	clz	r3, r3
   14454:	lsr	r3, r3, #5
   14458:	cmp	ip, #0
   1445c:	bne	14670 <__assert_fail@plt+0x36b4>
   14460:	eor	ip, r6, #1
   14464:	ands	r3, r3, ip
   14468:	beq	14498 <__assert_fail@plt+0x34dc>
   1446c:	cmp	sl, r4
   14470:	add	ip, r4, #1
   14474:	strbhi	r0, [r8, r4]
   14478:	cmp	sl, ip
   1447c:	movhi	r6, #36	; 0x24
   14480:	strbhi	r6, [r8, ip]
   14484:	add	ip, r4, #2
   14488:	mov	r6, r3
   1448c:	cmp	sl, ip
   14490:	add	r4, r4, #3
   14494:	strbhi	r0, [r8, ip]
   14498:	cmp	sl, r4
   1449c:	movhi	r3, #92	; 0x5c
   144a0:	strbhi	r3, [r8, r4]
   144a4:	add	r3, r4, #1
   144a8:	cmp	sl, r3
   144ac:	bls	144bc <__assert_fail@plt+0x3500>
   144b0:	lsr	ip, r5, #6
   144b4:	add	ip, ip, #48	; 0x30
   144b8:	strb	ip, [r8, r3]
   144bc:	add	r3, r4, #2
   144c0:	cmp	sl, r3
   144c4:	bls	144d4 <__assert_fail@plt+0x3518>
   144c8:	ubfx	ip, r5, #3, #3
   144cc:	add	ip, ip, #48	; 0x30
   144d0:	strb	ip, [r8, r3]
   144d4:	add	r9, r9, #1
   144d8:	and	r5, r5, #7
   144dc:	cmp	r9, r1
   144e0:	add	r5, r5, #48	; 0x30
   144e4:	add	r4, r4, #3
   144e8:	bcs	1469c <__assert_fail@plt+0x36e0>
   144ec:	mov	ip, r2
   144f0:	cmp	sl, r4
   144f4:	strbhi	r5, [r8, r4]
   144f8:	add	r4, r4, #1
   144fc:	ldrb	r5, [lr, #1]!
   14500:	cmp	r2, #0
   14504:	bne	14448 <__assert_fail@plt+0x348c>
   14508:	eor	r3, ip, #1
   1450c:	cmp	r7, #0
   14510:	and	r3, r3, r6
   14514:	uxtb	r3, r3
   14518:	beq	1452c <__assert_fail@plt+0x3570>
   1451c:	cmp	sl, r4
   14520:	movhi	r7, #92	; 0x5c
   14524:	strbhi	r7, [r8, r4]
   14528:	add	r4, r4, #1
   1452c:	add	r9, r9, #1
   14530:	cmp	r9, r1
   14534:	bcs	14684 <__assert_fail@plt+0x36c8>
   14538:	cmp	r3, #0
   1453c:	beq	146bc <__assert_fail@plt+0x3700>
   14540:	cmp	sl, r4
   14544:	add	r3, r4, #1
   14548:	mov	r7, #0
   1454c:	strbhi	r0, [r8, r4]
   14550:	cmp	sl, r3
   14554:	add	r4, r4, #2
   14558:	mov	r6, r7
   1455c:	strbhi	r0, [r8, r3]
   14560:	b	144f0 <__assert_fail@plt+0x3534>
   14564:	cmp	r1, #1
   14568:	beq	143dc <__assert_fail@plt+0x3420>
   1456c:	add	r2, r4, #1
   14570:	add	r3, sl, r1
   14574:	add	r2, sl, r2
   14578:	add	r4, r3, r4
   1457c:	ldrb	r3, [r2], #1
   14580:	sub	r3, r3, #91	; 0x5b
   14584:	cmp	r3, #33	; 0x21
   14588:	ldrls	pc, [pc, r3, lsl #2]
   1458c:	b	14618 <__assert_fail@plt+0x365c>
   14590:	andeq	r4, r1, r4, lsr #12
   14594:	andeq	r4, r1, r4, lsr #12
   14598:	andeq	r4, r1, r8, lsl r6
   1459c:	andeq	r4, r1, r4, lsr #12
   145a0:	andeq	r4, r1, r8, lsl r6
   145a4:	andeq	r4, r1, r4, lsr #12
   145a8:	andeq	r4, r1, r8, lsl r6
   145ac:	andeq	r4, r1, r8, lsl r6
   145b0:	andeq	r4, r1, r8, lsl r6
   145b4:	andeq	r4, r1, r8, lsl r6
   145b8:	andeq	r4, r1, r8, lsl r6
   145bc:	andeq	r4, r1, r8, lsl r6
   145c0:	andeq	r4, r1, r8, lsl r6
   145c4:	andeq	r4, r1, r8, lsl r6
   145c8:	andeq	r4, r1, r8, lsl r6
   145cc:	andeq	r4, r1, r8, lsl r6
   145d0:	andeq	r4, r1, r8, lsl r6
   145d4:	andeq	r4, r1, r8, lsl r6
   145d8:	andeq	r4, r1, r8, lsl r6
   145dc:	andeq	r4, r1, r8, lsl r6
   145e0:	andeq	r4, r1, r8, lsl r6
   145e4:	andeq	r4, r1, r8, lsl r6
   145e8:	andeq	r4, r1, r8, lsl r6
   145ec:	andeq	r4, r1, r8, lsl r6
   145f0:	andeq	r4, r1, r8, lsl r6
   145f4:	andeq	r4, r1, r8, lsl r6
   145f8:	andeq	r4, r1, r8, lsl r6
   145fc:	andeq	r4, r1, r8, lsl r6
   14600:	andeq	r4, r1, r8, lsl r6
   14604:	andeq	r4, r1, r8, lsl r6
   14608:	andeq	r4, r1, r8, lsl r6
   1460c:	andeq	r4, r1, r8, lsl r6
   14610:	andeq	r4, r1, r8, lsl r6
   14614:	andeq	r4, r1, r4, lsr #12
   14618:	cmp	r4, r2
   1461c:	bne	1457c <__assert_fail@plt+0x35c0>
   14620:	b	143dc <__assert_fail@plt+0x3420>
   14624:	mov	r8, #2
   14628:	ldr	fp, [sp, #76]	; 0x4c
   1462c:	ldr	sl, [sp, #80]	; 0x50
   14630:	b	13b5c <__assert_fail@plt+0x2ba0>
   14634:	ldr	r2, [sp, #40]	; 0x28
   14638:	str	fp, [sp, #152]	; 0x98
   1463c:	mov	fp, r8
   14640:	ldr	r8, [sp, #152]	; 0x98
   14644:	and	r2, r2, r3
   14648:	str	r2, [sp, #40]	; 0x28
   1464c:	b	13b5c <__assert_fail@plt+0x2ba0>
   14650:	cmp	sl, r4
   14654:	movls	r0, r4
   14658:	bls	13c8c <__assert_fail@plt+0x2cd0>
   1465c:	ldr	r3, [sp, #48]	; 0x30
   14660:	b	13c7c <__assert_fail@plt+0x2cc0>
   14664:	str	sl, [sp, #72]	; 0x48
   14668:	ldr	sl, [sp, #44]	; 0x2c
   1466c:	b	13acc <__assert_fail@plt+0x2b10>
   14670:	str	r3, [sp, #40]	; 0x28
   14674:	str	fp, [sp, #152]	; 0x98
   14678:	mov	fp, r8
   1467c:	ldr	r8, [sp, #152]	; 0x98
   14680:	b	13b5c <__assert_fail@plt+0x2ba0>
   14684:	str	r6, [sp, #48]	; 0x30
   14688:	ldr	r6, [sp, #52]	; 0x34
   1468c:	b	13afc <__assert_fail@plt+0x2b40>
   14690:	mov	r6, #0
   14694:	ldr	r2, [sp, #40]	; 0x28
   14698:	b	1442c <__assert_fail@plt+0x3470>
   1469c:	str	r6, [sp, #48]	; 0x30
   146a0:	ldr	r6, [sp, #52]	; 0x34
   146a4:	b	138e8 <__assert_fail@plt+0x292c>
   146a8:	add	r4, r4, #4
   146ac:	mov	r6, #0
   146b0:	str	r3, [sp, #48]	; 0x30
   146b4:	mov	r5, #48	; 0x30
   146b8:	b	13870 <__assert_fail@plt+0x28b4>
   146bc:	mov	r7, r3
   146c0:	b	144f0 <__assert_fail@plt+0x3534>
   146c4:	mov	r3, #1
   146c8:	movw	r2, #30720	; 0x7800
   146cc:	movt	r2, #1
   146d0:	mov	r4, r3
   146d4:	str	r3, [sp, #36]	; 0x24
   146d8:	str	r3, [sp, #40]	; 0x28
   146dc:	str	sl, [sp, #44]	; 0x2c
   146e0:	str	sl, [sp, #48]	; 0x30
   146e4:	str	r3, [sp, #56]	; 0x38
   146e8:	str	r2, [sp, #60]	; 0x3c
   146ec:	str	sl, [sp, #68]	; 0x44
   146f0:	str	sl, [sp, #72]	; 0x48
   146f4:	b	13398 <__assert_fail@plt+0x23dc>
   146f8:	mov	r3, r6
   146fc:	mov	r5, #48	; 0x30
   14700:	mov	r6, #0
   14704:	b	13870 <__assert_fail@plt+0x28b4>
   14708:	mov	r5, r3
   1470c:	b	13be8 <__assert_fail@plt+0x2c2c>
   14710:	cmp	sl, r4
   14714:	mov	r5, #48	; 0x30
   14718:	movhi	r3, #48	; 0x30
   1471c:	strbhi	r3, [r8, r4]
   14720:	add	r3, r0, #2
   14724:	add	r4, r0, #3
   14728:	cmp	sl, r3
   1472c:	movhi	r1, #48	; 0x30
   14730:	strbhi	r1, [r8, r3]
   14734:	b	13cc0 <__assert_fail@plt+0x2d04>
   14738:	str	fp, [sp, #152]	; 0x98
   1473c:	mov	fp, r8
   14740:	ldr	r8, [sp, #152]	; 0x98
   14744:	b	13b5c <__assert_fail@plt+0x2ba0>
   14748:	ldr	r3, [sp, #164]	; 0xa4
   1474c:	ldrb	r3, [r3]
   14750:	cmp	r3, #0
   14754:	beq	13368 <__assert_fail@plt+0x23ac>
   14758:	ldr	r2, [sp, #164]	; 0xa4
   1475c:	cmp	sl, r4
   14760:	strbhi	r3, [fp, r4]
   14764:	add	r4, r4, #1
   14768:	ldrb	r3, [r2, #1]!
   1476c:	cmp	r3, #0
   14770:	bne	1475c <__assert_fail@plt+0x37a0>
   14774:	b	13368 <__assert_fail@plt+0x23ac>
   14778:	mov	ip, r5
   1477c:	mov	r6, #0
   14780:	ldr	r2, [sp, #40]	; 0x28
   14784:	ldr	r8, [sp, #76]	; 0x4c
   14788:	ldr	sl, [sp, #80]	; 0x50
   1478c:	ldr	r5, [sp, #84]	; 0x54
   14790:	ldr	r7, [sp, #88]	; 0x58
   14794:	ldr	r4, [sp, #92]	; 0x5c
   14798:	b	14424 <__assert_fail@plt+0x3468>
   1479c:	ldr	r2, [sp, #32]
   147a0:	ldrb	r1, [r2, r3]
   147a4:	sub	r2, r1, #33	; 0x21
   147a8:	cmp	r2, #29
   147ac:	ldrls	pc, [pc, r2, lsl #2]
   147b0:	b	1488c <__assert_fail@plt+0x38d0>
   147b4:	andeq	r4, r1, ip, lsr #16
   147b8:	andeq	r4, r1, ip, lsl #17
   147bc:	andeq	r4, r1, ip, lsl #17
   147c0:	andeq	r4, r1, ip, lsl #17
   147c4:	andeq	r4, r1, ip, lsl #17
   147c8:	andeq	r4, r1, ip, lsl #17
   147cc:	andeq	r4, r1, ip, lsr #16
   147d0:	andeq	r4, r1, ip, lsr #16
   147d4:	andeq	r4, r1, ip, lsr #16
   147d8:	andeq	r4, r1, ip, lsl #17
   147dc:	andeq	r4, r1, ip, lsl #17
   147e0:	andeq	r4, r1, ip, lsl #17
   147e4:	andeq	r4, r1, ip, lsr #16
   147e8:	andeq	r4, r1, ip, lsl #17
   147ec:	andeq	r4, r1, ip, lsr #16
   147f0:	andeq	r4, r1, ip, lsl #17
   147f4:	andeq	r4, r1, ip, lsl #17
   147f8:	andeq	r4, r1, ip, lsl #17
   147fc:	andeq	r4, r1, ip, lsl #17
   14800:	andeq	r4, r1, ip, lsl #17
   14804:	andeq	r4, r1, ip, lsl #17
   14808:	andeq	r4, r1, ip, lsl #17
   1480c:	andeq	r4, r1, ip, lsl #17
   14810:	andeq	r4, r1, ip, lsl #17
   14814:	andeq	r4, r1, ip, lsl #17
   14818:	andeq	r4, r1, ip, lsl #17
   1481c:	andeq	r4, r1, ip, lsl #17
   14820:	andeq	r4, r1, ip, lsr #16
   14824:	andeq	r4, r1, ip, lsr #16
   14828:	andeq	r4, r1, ip, lsr #16
   1482c:	ldr	r2, [sp, #44]	; 0x2c
   14830:	cmp	r2, #0
   14834:	bne	14990 <__assert_fail@plt+0x39d4>
   14838:	cmp	sl, r4
   1483c:	mov	r5, r1
   14840:	movhi	r2, #63	; 0x3f
   14844:	mov	r9, r3
   14848:	strbhi	r2, [r8, r4]
   1484c:	add	r2, r4, #1
   14850:	cmp	sl, r2
   14854:	movhi	r0, #34	; 0x22
   14858:	strbhi	r0, [r8, r2]
   1485c:	add	r2, r4, #2
   14860:	cmp	sl, r2
   14864:	movhi	r0, #34	; 0x22
   14868:	strbhi	r0, [r8, r2]
   1486c:	add	r2, r4, #3
   14870:	add	r4, r4, #4
   14874:	cmp	sl, r2
   14878:	movhi	r0, #63	; 0x3f
   1487c:	strbhi	r0, [r8, r2]
   14880:	mov	r2, #0
   14884:	mov	r6, r2
   14888:	b	13cc0 <__assert_fail@plt+0x2d04>
   1488c:	mov	r3, #0
   14890:	mov	r6, r3
   14894:	b	13838 <__assert_fail@plt+0x287c>
   14898:	ldr	r0, [sp, #28]
   1489c:	mov	r1, r4
   148a0:	mov	r2, r7
   148a4:	mov	r3, r5
   148a8:	mov	ip, r5
   148ac:	ldr	r8, [sp, #76]	; 0x4c
   148b0:	ldr	sl, [sp, #80]	; 0x50
   148b4:	cmp	r1, r0
   148b8:	ldr	r5, [sp, #84]	; 0x54
   148bc:	ldr	r7, [sp, #88]	; 0x58
   148c0:	ldr	r4, [sp, #92]	; 0x5c
   148c4:	bcs	148f8 <__assert_fail@plt+0x393c>
   148c8:	ldrb	r6, [r2]
   148cc:	cmp	r6, #0
   148d0:	bne	148e4 <__assert_fail@plt+0x3928>
   148d4:	b	14a18 <__assert_fail@plt+0x3a5c>
   148d8:	ldrb	r6, [r2, #1]!
   148dc:	cmp	r6, #0
   148e0:	beq	149a0 <__assert_fail@plt+0x39e4>
   148e4:	add	r3, r3, #1
   148e8:	add	r1, r9, r3
   148ec:	cmp	r1, r0
   148f0:	bcc	148d8 <__assert_fail@plt+0x391c>
   148f4:	mov	ip, r3
   148f8:	mov	r6, #0
   148fc:	ldr	r2, [sp, #40]	; 0x28
   14900:	b	14424 <__assert_fail@plt+0x3468>
   14904:	mov	r3, #1
   14908:	mov	r2, #0
   1490c:	mov	r4, r2
   14910:	str	r3, [sp, #36]	; 0x24
   14914:	str	r3, [sp, #40]	; 0x28
   14918:	str	r3, [sp, #44]	; 0x2c
   1491c:	str	r2, [sp, #48]	; 0x30
   14920:	str	r3, [sp, #56]	; 0x38
   14924:	movw	r3, #30720	; 0x7800
   14928:	movt	r3, #1
   1492c:	str	r3, [sp, #60]	; 0x3c
   14930:	str	r2, [sp, #68]	; 0x44
   14934:	str	r2, [sp, #72]	; 0x48
   14938:	b	13398 <__assert_fail@plt+0x23dc>
   1493c:	mov	r2, r3
   14940:	ldr	r3, [sp, #60]	; 0x3c
   14944:	cmp	r3, #0
   14948:	moveq	r2, #0
   1494c:	andne	r2, r2, #1
   14950:	cmp	r2, #0
   14954:	beq	14980 <__assert_fail@plt+0x39c4>
   14958:	mov	r2, r3
   1495c:	ldrb	r3, [r3]
   14960:	cmp	r3, #0
   14964:	beq	14980 <__assert_fail@plt+0x39c4>
   14968:	cmp	sl, r4
   1496c:	strbhi	r3, [fp, r4]
   14970:	add	r4, r4, #1
   14974:	ldrb	r3, [r2, #1]!
   14978:	cmp	r3, #0
   1497c:	bne	14968 <__assert_fail@plt+0x39ac>
   14980:	cmp	sl, r4
   14984:	movhi	r3, #0
   14988:	strbhi	r3, [fp, r4]
   1498c:	b	13ba0 <__assert_fail@plt+0x2be4>
   14990:	str	fp, [sp, #152]	; 0x98
   14994:	mov	fp, r8
   14998:	ldr	r8, [sp, #152]	; 0x98
   1499c:	b	13b68 <__assert_fail@plt+0x2bac>
   149a0:	mov	ip, r3
   149a4:	ldr	r2, [sp, #40]	; 0x28
   149a8:	b	14424 <__assert_fail@plt+0x3468>
   149ac:	str	fp, [sp, #152]	; 0x98
   149b0:	mov	fp, r8
   149b4:	ldr	r8, [sp, #152]	; 0x98
   149b8:	sub	r3, r8, #2
   149bc:	clz	r3, r3
   149c0:	lsr	r3, r3, #5
   149c4:	str	r3, [sp, #40]	; 0x28
   149c8:	b	13b5c <__assert_fail@plt+0x2ba0>
   149cc:	mov	ip, #5
   149d0:	ldr	r3, [sp, #28]
   149d4:	str	ip, [sp]
   149d8:	ldr	r2, [sp, #156]	; 0x9c
   149dc:	ldr	ip, [sp, #164]	; 0xa4
   149e0:	ldr	r0, [sp, #160]	; 0xa0
   149e4:	str	r2, [sp, #4]
   149e8:	ldr	r2, [sp, #32]
   149ec:	ldr	r1, [sp, #72]	; 0x48
   149f0:	str	ip, [sp, #12]
   149f4:	ldr	ip, [sp, #168]	; 0xa8
   149f8:	str	r0, [sp, #8]
   149fc:	mov	r0, fp
   14a00:	str	ip, [sp, #16]
   14a04:	bl	132b0 <__assert_fail@plt+0x22f4>
   14a08:	mov	r4, r0
   14a0c:	b	13ba0 <__assert_fail@plt+0x2be4>
   14a10:	mov	r8, #2
   14a14:	b	13b5c <__assert_fail@plt+0x2ba0>
   14a18:	ldr	r2, [sp, #40]	; 0x28
   14a1c:	b	14424 <__assert_fail@plt+0x3468>
   14a20:	mov	r3, #0
   14a24:	mov	r2, #1
   14a28:	mov	r4, r3
   14a2c:	strd	r2, [sp, #36]	; 0x24
   14a30:	strd	r2, [sp, #44]	; 0x2c
   14a34:	str	r2, [sp, #56]	; 0x38
   14a38:	str	r3, [sp, #68]	; 0x44
   14a3c:	str	r3, [sp, #72]	; 0x48
   14a40:	movw	r3, #30740	; 0x7814
   14a44:	movt	r3, #1
   14a48:	str	r3, [sp, #60]	; 0x3c
   14a4c:	b	13398 <__assert_fail@plt+0x23dc>
   14a50:	mov	r3, #0
   14a54:	mov	r1, #1
   14a58:	mov	r2, r3
   14a5c:	str	r1, [sp, #36]	; 0x24
   14a60:	str	r3, [sp, #48]	; 0x30
   14a64:	str	sl, [sp, #72]	; 0x48
   14a68:	b	139a0 <__assert_fail@plt+0x29e4>
   14a6c:	bl	10fa4 <abort@plt>
   14a70:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14a74:	mov	r4, r0
   14a78:	mov	r5, r3
   14a7c:	strd	r6, [sp, #8]
   14a80:	movw	r7, #33028	; 0x8104
   14a84:	movt	r7, #2
   14a88:	strd	r8, [sp, #16]
   14a8c:	strd	sl, [sp, #24]
   14a90:	mov	sl, r1
   14a94:	mov	fp, r2
   14a98:	str	lr, [sp, #32]
   14a9c:	sub	sp, sp, #60	; 0x3c
   14aa0:	bl	10ef0 <__errno_location@plt>
   14aa4:	mov	r8, r0
   14aa8:	cmn	r4, #-2147483647	; 0x80000001
   14aac:	ldr	r6, [r7]
   14ab0:	movne	r0, #0
   14ab4:	moveq	r0, #1
   14ab8:	ldr	r3, [r8]
   14abc:	orrs	r0, r0, r4, lsr #31
   14ac0:	str	r3, [sp, #28]
   14ac4:	bne	14c54 <__assert_fail@plt+0x3c98>
   14ac8:	ldr	r3, [r7, #4]
   14acc:	cmp	r3, r4
   14ad0:	bgt	14b30 <__assert_fail@plt+0x3b74>
   14ad4:	add	r1, r7, #8
   14ad8:	sub	r2, r4, r3
   14adc:	str	r3, [sp, #52]	; 0x34
   14ae0:	cmp	r6, r1
   14ae4:	add	r2, r2, #1
   14ae8:	beq	14c2c <__assert_fail@plt+0x3c70>
   14aec:	mov	r1, #8
   14af0:	mov	r0, r6
   14af4:	mvn	r3, #-2147483648	; 0x80000000
   14af8:	str	r1, [sp]
   14afc:	add	r1, sp, #52	; 0x34
   14b00:	bl	15ad4 <__assert_fail@plt+0x4b18>
   14b04:	mov	r6, r0
   14b08:	str	r0, [r7]
   14b0c:	ldr	r0, [r7, #4]
   14b10:	mov	r1, #0
   14b14:	ldr	r2, [sp, #52]	; 0x34
   14b18:	sub	r2, r2, r0
   14b1c:	add	r0, r6, r0, lsl #3
   14b20:	lsl	r2, r2, #3
   14b24:	bl	10f08 <memset@plt>
   14b28:	ldr	r3, [sp, #52]	; 0x34
   14b2c:	str	r3, [r7, #4]
   14b30:	ldr	r1, [r5, #4]
   14b34:	add	r0, r6, r4, lsl #3
   14b38:	add	ip, r5, #8
   14b3c:	mov	r3, fp
   14b40:	mov	r2, sl
   14b44:	ldr	r7, [r0, #4]
   14b48:	str	r0, [sp, #36]	; 0x24
   14b4c:	str	ip, [sp, #40]	; 0x28
   14b50:	orr	r0, r1, #1
   14b54:	ldr	r9, [r6, r4, lsl #3]
   14b58:	str	ip, [sp, #8]
   14b5c:	ldr	lr, [r5, #44]	; 0x2c
   14b60:	str	r0, [sp, #4]
   14b64:	ldr	ip, [r5]
   14b68:	mov	r1, r9
   14b6c:	str	ip, [sp, #32]
   14b70:	ldr	ip, [r5, #40]	; 0x28
   14b74:	str	ip, [sp, #12]
   14b78:	ldr	ip, [sp, #32]
   14b7c:	str	lr, [sp, #16]
   14b80:	str	r0, [sp, #44]	; 0x2c
   14b84:	mov	r0, r7
   14b88:	str	ip, [sp]
   14b8c:	bl	132b0 <__assert_fail@plt+0x22f4>
   14b90:	cmp	r9, r0
   14b94:	bhi	14c04 <__assert_fail@plt+0x3c48>
   14b98:	add	r9, r0, #1
   14b9c:	movw	r3, #33180	; 0x819c
   14ba0:	movt	r3, #2
   14ba4:	cmp	r7, r3
   14ba8:	str	r9, [r6, r4, lsl #3]
   14bac:	beq	14bb8 <__assert_fail@plt+0x3bfc>
   14bb0:	mov	r0, r7
   14bb4:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   14bb8:	mov	r0, r9
   14bbc:	bl	15924 <__assert_fail@plt+0x4968>
   14bc0:	ldr	ip, [r5]
   14bc4:	mov	r3, fp
   14bc8:	mov	r2, sl
   14bcc:	mov	r1, r9
   14bd0:	mov	r7, r0
   14bd4:	ldr	lr, [sp, #36]	; 0x24
   14bd8:	ldr	r4, [r5, #40]	; 0x28
   14bdc:	str	r0, [lr, #4]
   14be0:	ldr	lr, [r5, #44]	; 0x2c
   14be4:	str	ip, [sp]
   14be8:	ldr	ip, [sp, #44]	; 0x2c
   14bec:	str	ip, [sp, #4]
   14bf0:	ldr	ip, [sp, #40]	; 0x28
   14bf4:	str	r4, [sp, #12]
   14bf8:	str	lr, [sp, #16]
   14bfc:	str	ip, [sp, #8]
   14c00:	bl	132b0 <__assert_fail@plt+0x22f4>
   14c04:	ldr	r3, [sp, #28]
   14c08:	mov	r0, r7
   14c0c:	str	r3, [r8]
   14c10:	add	sp, sp, #60	; 0x3c
   14c14:	ldrd	r4, [sp]
   14c18:	ldrd	r6, [sp, #8]
   14c1c:	ldrd	r8, [sp, #16]
   14c20:	ldrd	sl, [sp, #24]
   14c24:	add	sp, sp, #32
   14c28:	pop	{pc}		; (ldr pc, [sp], #4)
   14c2c:	mov	r1, #8
   14c30:	mvn	r3, #-2147483648	; 0x80000000
   14c34:	str	r1, [sp]
   14c38:	add	r1, sp, #52	; 0x34
   14c3c:	bl	15ad4 <__assert_fail@plt+0x4b18>
   14c40:	ldrd	r2, [r7, #8]
   14c44:	mov	r6, r0
   14c48:	str	r0, [r7]
   14c4c:	strd	r2, [r0]
   14c50:	b	14b0c <__assert_fail@plt+0x3b50>
   14c54:	bl	10fa4 <abort@plt>
   14c58:	strd	r4, [sp, #-16]!
   14c5c:	mov	r5, r0
   14c60:	str	r6, [sp, #8]
   14c64:	str	lr, [sp, #12]
   14c68:	bl	10ef0 <__errno_location@plt>
   14c6c:	mov	r4, r0
   14c70:	cmp	r5, #0
   14c74:	ldr	r0, [pc, #32]	; 14c9c <__assert_fail@plt+0x3ce0>
   14c78:	mov	r1, #48	; 0x30
   14c7c:	movne	r0, r5
   14c80:	ldr	r6, [r4]
   14c84:	bl	15c4c <__assert_fail@plt+0x4c90>
   14c88:	str	r6, [r4]
   14c8c:	ldrd	r4, [sp]
   14c90:	ldr	r6, [sp, #8]
   14c94:	add	sp, sp, #12
   14c98:	pop	{pc}		; (ldr pc, [sp], #4)
   14c9c:	muleq	r2, ip, r2
   14ca0:	ldr	r3, [pc, #12]	; 14cb4 <__assert_fail@plt+0x3cf8>
   14ca4:	cmp	r0, #0
   14ca8:	moveq	r0, r3
   14cac:	ldr	r0, [r0]
   14cb0:	bx	lr
   14cb4:	muleq	r2, ip, r2
   14cb8:	ldr	r3, [pc, #12]	; 14ccc <__assert_fail@plt+0x3d10>
   14cbc:	cmp	r0, #0
   14cc0:	moveq	r0, r3
   14cc4:	str	r1, [r0]
   14cc8:	bx	lr
   14ccc:	muleq	r2, ip, r2
   14cd0:	ldr	r3, [pc, #52]	; 14d0c <__assert_fail@plt+0x3d50>
   14cd4:	cmp	r0, #0
   14cd8:	push	{lr}		; (str lr, [sp, #-4]!)
   14cdc:	lsr	lr, r1, #5
   14ce0:	and	r1, r1, #31
   14ce4:	moveq	r0, r3
   14ce8:	add	r3, r0, #8
   14cec:	ldr	ip, [r3, lr, lsl #2]
   14cf0:	lsr	r0, ip, r1
   14cf4:	eor	r2, r2, r0
   14cf8:	and	r0, r0, #1
   14cfc:	and	r2, r2, #1
   14d00:	eor	r1, ip, r2, lsl r1
   14d04:	str	r1, [r3, lr, lsl #2]
   14d08:	pop	{pc}		; (ldr pc, [sp], #4)
   14d0c:	muleq	r2, ip, r2
   14d10:	ldr	r3, [pc, #16]	; 14d28 <__assert_fail@plt+0x3d6c>
   14d14:	cmp	r0, #0
   14d18:	movne	r3, r0
   14d1c:	ldr	r0, [r3, #4]
   14d20:	str	r1, [r3, #4]
   14d24:	bx	lr
   14d28:	muleq	r2, ip, r2
   14d2c:	ldr	r3, [pc, #48]	; 14d64 <__assert_fail@plt+0x3da8>
   14d30:	cmp	r0, #0
   14d34:	mov	ip, #10
   14d38:	moveq	r0, r3
   14d3c:	cmp	r2, #0
   14d40:	cmpne	r1, #0
   14d44:	str	ip, [r0]
   14d48:	beq	14d58 <__assert_fail@plt+0x3d9c>
   14d4c:	str	r1, [r0, #40]	; 0x28
   14d50:	str	r2, [r0, #44]	; 0x2c
   14d54:	bx	lr
   14d58:	str	r4, [sp, #-8]!
   14d5c:	str	lr, [sp, #4]
   14d60:	bl	10fa4 <abort@plt>
   14d64:	muleq	r2, ip, r2
   14d68:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14d6c:	strd	r6, [sp, #8]
   14d70:	mov	r7, r0
   14d74:	mov	r6, r1
   14d78:	strd	r8, [sp, #16]
   14d7c:	mov	r8, r2
   14d80:	mov	r9, r3
   14d84:	str	lr, [sp, #24]
   14d88:	sub	sp, sp, #28
   14d8c:	ldr	r4, [sp, #56]	; 0x38
   14d90:	ldr	ip, [pc, #104]	; 14e00 <__assert_fail@plt+0x3e44>
   14d94:	cmp	r4, #0
   14d98:	moveq	r4, ip
   14d9c:	bl	10ef0 <__errno_location@plt>
   14da0:	ldr	ip, [r4, #44]	; 0x2c
   14da4:	mov	r5, r0
   14da8:	mov	r1, r6
   14dac:	add	lr, r4, #8
   14db0:	mov	r3, r9
   14db4:	ldr	r6, [r5]
   14db8:	mov	r2, r8
   14dbc:	mov	r0, r7
   14dc0:	str	ip, [sp, #16]
   14dc4:	ldr	ip, [r4, #40]	; 0x28
   14dc8:	str	lr, [sp, #8]
   14dcc:	str	ip, [sp, #12]
   14dd0:	ldr	ip, [r4, #4]
   14dd4:	str	ip, [sp, #4]
   14dd8:	ldr	ip, [r4]
   14ddc:	str	ip, [sp]
   14de0:	bl	132b0 <__assert_fail@plt+0x22f4>
   14de4:	str	r6, [r5]
   14de8:	add	sp, sp, #28
   14dec:	ldrd	r4, [sp]
   14df0:	ldrd	r6, [sp, #8]
   14df4:	ldrd	r8, [sp, #16]
   14df8:	add	sp, sp, #24
   14dfc:	pop	{pc}		; (ldr pc, [sp], #4)
   14e00:	muleq	r2, ip, r2
   14e04:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14e08:	cmp	r3, #0
   14e0c:	ldr	r4, [pc, #220]	; 14ef0 <__assert_fail@plt+0x3f34>
   14e10:	movne	r4, r3
   14e14:	strd	r6, [sp, #8]
   14e18:	mov	r6, r2
   14e1c:	strd	r8, [sp, #16]
   14e20:	mov	r9, r0
   14e24:	strd	sl, [sp, #24]
   14e28:	mov	sl, r1
   14e2c:	str	lr, [sp, #32]
   14e30:	sub	sp, sp, #44	; 0x2c
   14e34:	bl	10ef0 <__errno_location@plt>
   14e38:	ldr	r5, [r4, #4]
   14e3c:	mov	r7, r0
   14e40:	mov	r1, #0
   14e44:	add	r8, r4, #8
   14e48:	mov	r3, sl
   14e4c:	ldr	ip, [r4, #44]	; 0x2c
   14e50:	mov	r2, r9
   14e54:	mov	r0, r1
   14e58:	ldr	lr, [r7]
   14e5c:	cmp	r6, r1
   14e60:	orreq	r5, r5, #1
   14e64:	str	ip, [sp, #16]
   14e68:	ldr	ip, [r4, #40]	; 0x28
   14e6c:	stmib	sp, {r5, r8, ip}
   14e70:	ldr	ip, [r4]
   14e74:	str	lr, [sp, #28]
   14e78:	str	ip, [sp]
   14e7c:	bl	132b0 <__assert_fail@plt+0x22f4>
   14e80:	add	r1, r0, #1
   14e84:	mov	fp, r0
   14e88:	mov	r0, r1
   14e8c:	str	r1, [sp, #36]	; 0x24
   14e90:	bl	15924 <__assert_fail@plt+0x4968>
   14e94:	ldr	ip, [r4, #44]	; 0x2c
   14e98:	mov	r3, sl
   14e9c:	mov	r2, r9
   14ea0:	ldr	r1, [sp, #36]	; 0x24
   14ea4:	str	ip, [sp, #16]
   14ea8:	ldr	ip, [r4, #40]	; 0x28
   14eac:	str	r0, [sp, #32]
   14eb0:	stmib	sp, {r5, r8, ip}
   14eb4:	ldr	ip, [r4]
   14eb8:	str	ip, [sp]
   14ebc:	bl	132b0 <__assert_fail@plt+0x22f4>
   14ec0:	ldr	lr, [sp, #28]
   14ec4:	cmp	r6, #0
   14ec8:	ldr	r0, [sp, #32]
   14ecc:	str	lr, [r7]
   14ed0:	strne	fp, [r6]
   14ed4:	add	sp, sp, #44	; 0x2c
   14ed8:	ldrd	r4, [sp]
   14edc:	ldrd	r6, [sp, #8]
   14ee0:	ldrd	r8, [sp, #16]
   14ee4:	ldrd	sl, [sp, #24]
   14ee8:	add	sp, sp, #32
   14eec:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef0:	muleq	r2, ip, r2
   14ef4:	mov	r3, r2
   14ef8:	mov	r2, #0
   14efc:	b	14e04 <__assert_fail@plt+0x3e48>
   14f00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14f04:	movw	r5, #33028	; 0x8104
   14f08:	movt	r5, #2
   14f0c:	ldr	r3, [r5, #4]
   14f10:	strd	r6, [sp, #8]
   14f14:	str	r8, [sp, #16]
   14f18:	str	lr, [sp, #20]
   14f1c:	ldr	r7, [r5]
   14f20:	cmp	r3, #1
   14f24:	ble	14f48 <__assert_fail@plt+0x3f8c>
   14f28:	mov	r4, #1
   14f2c:	add	r6, r7, #4
   14f30:	ldr	r0, [r6, r4, lsl #3]
   14f34:	add	r4, r4, #1
   14f38:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   14f3c:	ldr	r3, [r5, #4]
   14f40:	cmp	r3, r4
   14f44:	bgt	14f30 <__assert_fail@plt+0x3f74>
   14f48:	ldr	r0, [r7, #4]
   14f4c:	movw	r4, #33180	; 0x819c
   14f50:	movt	r4, #2
   14f54:	cmp	r0, r4
   14f58:	beq	14f6c <__assert_fail@plt+0x3fb0>
   14f5c:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   14f60:	mov	r3, #256	; 0x100
   14f64:	str	r3, [r5, #8]
   14f68:	str	r4, [r5, #12]
   14f6c:	ldr	r4, [pc, #44]	; 14fa0 <__assert_fail@plt+0x3fe4>
   14f70:	cmp	r7, r4
   14f74:	beq	14f84 <__assert_fail@plt+0x3fc8>
   14f78:	mov	r0, r7
   14f7c:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   14f80:	str	r4, [r5]
   14f84:	mov	r3, #1
   14f88:	ldrd	r6, [sp, #8]
   14f8c:	str	r3, [r5, #4]
   14f90:	ldrd	r4, [sp]
   14f94:	ldr	r8, [sp, #16]
   14f98:	add	sp, sp, #20
   14f9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14fa0:	andeq	r8, r2, ip, lsl #2
   14fa4:	ldr	r3, [pc, #4]	; 14fb0 <__assert_fail@plt+0x3ff4>
   14fa8:	mvn	r2, #0
   14fac:	b	14a70 <__assert_fail@plt+0x3ab4>
   14fb0:	muleq	r2, ip, r2
   14fb4:	ldr	r3, [pc]	; 14fbc <__assert_fail@plt+0x4000>
   14fb8:	b	14a70 <__assert_fail@plt+0x3ab4>
   14fbc:	muleq	r2, ip, r2
   14fc0:	mov	r1, r0
   14fc4:	ldr	r3, [pc, #8]	; 14fd4 <__assert_fail@plt+0x4018>
   14fc8:	mvn	r2, #0
   14fcc:	mov	r0, #0
   14fd0:	b	14a70 <__assert_fail@plt+0x3ab4>
   14fd4:	muleq	r2, ip, r2
   14fd8:	mov	r2, r1
   14fdc:	ldr	r3, [pc, #8]	; 14fec <__assert_fail@plt+0x4030>
   14fe0:	mov	r1, r0
   14fe4:	mov	r0, #0
   14fe8:	b	14a70 <__assert_fail@plt+0x3ab4>
   14fec:	muleq	r2, ip, r2
   14ff0:	strd	r4, [sp, #-12]!
   14ff4:	mov	r5, r2
   14ff8:	mov	r4, r0
   14ffc:	str	lr, [sp, #8]
   15000:	sub	sp, sp, #52	; 0x34
   15004:	mov	r0, sp
   15008:	bl	1310c <__assert_fail@plt+0x2150>
   1500c:	mov	r3, sp
   15010:	mov	r1, r5
   15014:	mov	r0, r4
   15018:	mvn	r2, #0
   1501c:	bl	14a70 <__assert_fail@plt+0x3ab4>
   15020:	add	sp, sp, #52	; 0x34
   15024:	ldrd	r4, [sp]
   15028:	add	sp, sp, #8
   1502c:	pop	{pc}		; (ldr pc, [sp], #4)
   15030:	strd	r4, [sp, #-16]!
   15034:	mov	r5, r2
   15038:	mov	r4, r0
   1503c:	str	r6, [sp, #8]
   15040:	mov	r6, r3
   15044:	str	lr, [sp, #12]
   15048:	sub	sp, sp, #48	; 0x30
   1504c:	mov	r0, sp
   15050:	bl	1310c <__assert_fail@plt+0x2150>
   15054:	mov	r3, sp
   15058:	mov	r2, r6
   1505c:	mov	r1, r5
   15060:	mov	r0, r4
   15064:	bl	14a70 <__assert_fail@plt+0x3ab4>
   15068:	add	sp, sp, #48	; 0x30
   1506c:	ldrd	r4, [sp]
   15070:	ldr	r6, [sp, #8]
   15074:	add	sp, sp, #12
   15078:	pop	{pc}		; (ldr pc, [sp], #4)
   1507c:	mov	r2, r1
   15080:	mov	r1, r0
   15084:	mov	r0, #0
   15088:	b	14ff0 <__assert_fail@plt+0x4034>
   1508c:	mov	r3, r2
   15090:	mov	r2, r1
   15094:	mov	r1, r0
   15098:	mov	r0, #0
   1509c:	b	15030 <__assert_fail@plt+0x4074>
   150a0:	ldr	ip, [pc, #140]	; 15134 <__assert_fail@plt+0x4178>
   150a4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   150a8:	ldrd	r4, [ip]
   150ac:	strd	r6, [sp, #8]
   150b0:	ldrd	r6, [ip, #8]
   150b4:	strd	r8, [sp, #16]
   150b8:	lsr	r9, r2, #5
   150bc:	str	lr, [sp, #24]
   150c0:	sub	sp, sp, #52	; 0x34
   150c4:	and	lr, r2, #31
   150c8:	add	r8, sp, #8
   150cc:	mov	r2, r1
   150d0:	strd	r4, [sp]
   150d4:	mov	r1, r0
   150d8:	mov	r3, sp
   150dc:	strd	r6, [sp, #8]
   150e0:	mov	r0, #0
   150e4:	ldrd	r4, [ip, #16]
   150e8:	ldrd	r6, [ip, #24]
   150ec:	strd	r4, [sp, #16]
   150f0:	ldrd	r4, [ip, #32]
   150f4:	strd	r6, [sp, #24]
   150f8:	ldrd	r6, [ip, #40]	; 0x28
   150fc:	strd	r4, [sp, #32]
   15100:	strd	r6, [sp, #40]	; 0x28
   15104:	ldr	ip, [r8, r9, lsl #2]
   15108:	mvn	r4, ip, lsr lr
   1510c:	and	r4, r4, #1
   15110:	eor	lr, ip, r4, lsl lr
   15114:	str	lr, [r8, r9, lsl #2]
   15118:	bl	14a70 <__assert_fail@plt+0x3ab4>
   1511c:	add	sp, sp, #52	; 0x34
   15120:	ldrd	r4, [sp]
   15124:	ldrd	r6, [sp, #8]
   15128:	ldrd	r8, [sp, #16]
   1512c:	add	sp, sp, #24
   15130:	pop	{pc}		; (ldr pc, [sp], #4)
   15134:	muleq	r2, ip, r2
   15138:	mov	r2, r1
   1513c:	mvn	r1, #0
   15140:	b	150a0 <__assert_fail@plt+0x40e4>
   15144:	mov	r2, #58	; 0x3a
   15148:	mvn	r1, #0
   1514c:	b	150a0 <__assert_fail@plt+0x40e4>
   15150:	mov	r2, #58	; 0x3a
   15154:	b	150a0 <__assert_fail@plt+0x40e4>
   15158:	strd	r4, [sp, #-20]!	; 0xffffffec
   1515c:	strd	r6, [sp, #8]
   15160:	mov	r6, r0
   15164:	mov	r7, r2
   15168:	str	lr, [sp, #16]
   1516c:	sub	sp, sp, #100	; 0x64
   15170:	mov	r0, sp
   15174:	bl	1310c <__assert_fail@plt+0x2150>
   15178:	ldrd	r4, [sp, #8]
   1517c:	mov	r1, r7
   15180:	mov	r0, r6
   15184:	add	r3, sp, #48	; 0x30
   15188:	mvn	r2, #0
   1518c:	ldrd	r6, [sp]
   15190:	strd	r4, [sp, #56]	; 0x38
   15194:	ldrd	r4, [sp, #16]
   15198:	strd	r6, [sp, #48]	; 0x30
   1519c:	ldrd	r6, [sp, #32]
   151a0:	ldr	lr, [sp, #60]	; 0x3c
   151a4:	strd	r4, [sp, #64]	; 0x40
   151a8:	ldrd	r4, [sp, #24]
   151ac:	mvn	ip, lr
   151b0:	and	ip, ip, #67108864	; 0x4000000
   151b4:	strd	r4, [sp, #72]	; 0x48
   151b8:	eor	ip, ip, lr
   151bc:	ldrd	r4, [sp, #40]	; 0x28
   151c0:	str	ip, [sp, #60]	; 0x3c
   151c4:	strd	r6, [sp, #80]	; 0x50
   151c8:	strd	r4, [sp, #88]	; 0x58
   151cc:	bl	14a70 <__assert_fail@plt+0x3ab4>
   151d0:	add	sp, sp, #100	; 0x64
   151d4:	ldrd	r4, [sp]
   151d8:	ldrd	r6, [sp, #8]
   151dc:	add	sp, sp, #16
   151e0:	pop	{pc}		; (ldr pc, [sp], #4)
   151e4:	ldr	ip, [pc, #156]	; 15288 <__assert_fail@plt+0x42cc>
   151e8:	cmp	r2, #0
   151ec:	cmpne	r1, #0
   151f0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   151f4:	strd	r6, [sp, #8]
   151f8:	mov	r6, r2
   151fc:	str	r8, [sp, #16]
   15200:	mov	r8, r3
   15204:	strd	sl, [sp, #20]
   15208:	ldrd	r4, [ip]
   1520c:	str	lr, [sp, #28]
   15210:	sub	sp, sp, #48	; 0x30
   15214:	mov	lr, #10
   15218:	ldrd	r2, [ip, #8]
   1521c:	ldrd	sl, [ip, #16]
   15220:	strd	r4, [sp]
   15224:	ldrd	r4, [ip, #32]
   15228:	str	lr, [sp]
   1522c:	strd	r2, [sp, #8]
   15230:	strd	sl, [sp, #16]
   15234:	ldrd	r2, [ip, #24]
   15238:	ldrd	sl, [ip, #40]	; 0x28
   1523c:	strd	r2, [sp, #24]
   15240:	strd	r4, [sp, #32]
   15244:	strd	sl, [sp, #40]	; 0x28
   15248:	beq	15284 <__assert_fail@plt+0x42c8>
   1524c:	ldr	r2, [sp, #80]	; 0x50
   15250:	mov	r7, r1
   15254:	mov	r3, sp
   15258:	mov	r1, r8
   1525c:	str	r7, [sp, #40]	; 0x28
   15260:	str	r6, [sp, #44]	; 0x2c
   15264:	bl	14a70 <__assert_fail@plt+0x3ab4>
   15268:	add	sp, sp, #48	; 0x30
   1526c:	ldrd	r4, [sp]
   15270:	ldrd	r6, [sp, #8]
   15274:	ldr	r8, [sp, #16]
   15278:	ldrd	sl, [sp, #20]
   1527c:	add	sp, sp, #28
   15280:	pop	{pc}		; (ldr pc, [sp], #4)
   15284:	bl	10fa4 <abort@plt>
   15288:	muleq	r2, ip, r2
   1528c:	mvn	ip, #0
   15290:	push	{lr}		; (str lr, [sp, #-4]!)
   15294:	sub	sp, sp, #12
   15298:	str	ip, [sp]
   1529c:	bl	151e4 <__assert_fail@plt+0x4228>
   152a0:	add	sp, sp, #12
   152a4:	pop	{pc}		; (ldr pc, [sp], #4)
   152a8:	mvn	ip, #0
   152ac:	push	{lr}		; (str lr, [sp, #-4]!)
   152b0:	sub	sp, sp, #12
   152b4:	mov	r3, r2
   152b8:	mov	r2, r1
   152bc:	mov	r1, r0
   152c0:	mov	r0, #0
   152c4:	str	ip, [sp]
   152c8:	bl	151e4 <__assert_fail@plt+0x4228>
   152cc:	add	sp, sp, #12
   152d0:	pop	{pc}		; (ldr pc, [sp], #4)
   152d4:	push	{lr}		; (str lr, [sp, #-4]!)
   152d8:	sub	sp, sp, #12
   152dc:	str	r3, [sp]
   152e0:	mov	r3, r2
   152e4:	mov	r2, r1
   152e8:	mov	r1, r0
   152ec:	mov	r0, #0
   152f0:	bl	151e4 <__assert_fail@plt+0x4228>
   152f4:	add	sp, sp, #12
   152f8:	pop	{pc}		; (ldr pc, [sp], #4)
   152fc:	ldr	r3, [pc]	; 15304 <__assert_fail@plt+0x4348>
   15300:	b	14a70 <__assert_fail@plt+0x3ab4>
   15304:	andeq	r8, r2, r4, lsl r1
   15308:	mov	r2, r1
   1530c:	ldr	r3, [pc, #8]	; 1531c <__assert_fail@plt+0x4360>
   15310:	mov	r1, r0
   15314:	mov	r0, #0
   15318:	b	14a70 <__assert_fail@plt+0x3ab4>
   1531c:	andeq	r8, r2, r4, lsl r1
   15320:	ldr	r3, [pc, #4]	; 1532c <__assert_fail@plt+0x4370>
   15324:	mvn	r2, #0
   15328:	b	14a70 <__assert_fail@plt+0x3ab4>
   1532c:	andeq	r8, r2, r4, lsl r1
   15330:	mov	r1, r0
   15334:	ldr	r3, [pc, #8]	; 15344 <__assert_fail@plt+0x4388>
   15338:	mvn	r2, #0
   1533c:	mov	r0, #0
   15340:	b	14a70 <__assert_fail@plt+0x3ab4>
   15344:	andeq	r8, r2, r4, lsl r1
   15348:	cmp	r1, #0
   1534c:	strd	r4, [sp, #-16]!
   15350:	mov	ip, r3
   15354:	str	r6, [sp, #8]
   15358:	mov	r4, r0
   1535c:	str	lr, [sp, #12]
   15360:	sub	sp, sp, #32
   15364:	ldr	r5, [sp, #48]	; 0x30
   15368:	ldr	r6, [sp, #52]	; 0x34
   1536c:	beq	154b0 <__assert_fail@plt+0x44f4>
   15370:	mov	r3, r1
   15374:	mov	r1, #1
   15378:	stm	sp, {r2, ip}
   1537c:	movw	r2, #30848	; 0x7880
   15380:	movt	r2, #1
   15384:	bl	10f2c <__fprintf_chk@plt>
   15388:	mov	r2, #5
   1538c:	movw	r1, #30868	; 0x7894
   15390:	movt	r1, #1
   15394:	mov	r0, #0
   15398:	bl	10dd0 <dcgettext@plt>
   1539c:	movw	ip, #2022	; 0x7e6
   153a0:	mov	r3, r0
   153a4:	mov	r1, #1
   153a8:	movw	r2, #31596	; 0x7b6c
   153ac:	movt	r2, #1
   153b0:	mov	r0, r4
   153b4:	str	ip, [sp]
   153b8:	bl	10f2c <__fprintf_chk@plt>
   153bc:	mov	r1, r4
   153c0:	mov	r0, #10
   153c4:	bl	10dc4 <fputc_unlocked@plt>
   153c8:	mov	r2, #5
   153cc:	movw	r1, #30872	; 0x7898
   153d0:	movt	r1, #1
   153d4:	mov	r0, #0
   153d8:	bl	10dd0 <dcgettext@plt>
   153dc:	mov	r2, r0
   153e0:	mov	r1, #1
   153e4:	movw	r3, #31044	; 0x7944
   153e8:	movt	r3, #1
   153ec:	mov	r0, r4
   153f0:	bl	10f2c <__fprintf_chk@plt>
   153f4:	mov	r1, r4
   153f8:	mov	r0, #10
   153fc:	bl	10dc4 <fputc_unlocked@plt>
   15400:	cmp	r6, #9
   15404:	ldrls	pc, [pc, r6, lsl #2]
   15408:	b	1571c <__assert_fail@plt+0x4760>
   1540c:	muleq	r1, ip, r4
   15410:	andeq	r5, r1, ip, asr #9
   15414:	andeq	r5, r1, r8, lsl #10
   15418:	andeq	r5, r1, r8, asr #10
   1541c:	muleq	r1, r0, r5
   15420:	andeq	r5, r1, r8, asr #11
   15424:	andeq	r5, r1, r0, lsl r6
   15428:	andeq	r5, r1, r4, ror #12
   1542c:			; <UNDEFINED> instruction: 0x000156bc
   15430:	andeq	r5, r1, r4, lsr r4
   15434:	movw	r1, #31348	; 0x7a74
   15438:	movt	r1, #1
   1543c:	mov	r2, #5
   15440:	mov	r0, #0
   15444:	bl	10dd0 <dcgettext@plt>
   15448:	ldr	lr, [r5, #4]
   1544c:	mov	r2, r0
   15450:	mov	r1, #1
   15454:	mov	r0, r4
   15458:	ldr	r3, [r5, #8]
   1545c:	ldr	ip, [r5, #32]
   15460:	str	lr, [sp]
   15464:	ldr	lr, [r5, #12]
   15468:	str	ip, [sp, #28]
   1546c:	ldr	ip, [r5, #28]
   15470:	str	r3, [sp, #4]
   15474:	ldr	r3, [r5, #16]
   15478:	str	lr, [sp, #8]
   1547c:	ldr	lr, [r5, #20]
   15480:	str	ip, [sp, #24]
   15484:	ldr	ip, [r5, #24]
   15488:	str	r3, [sp, #12]
   1548c:	ldr	r3, [r5]
   15490:	str	lr, [sp, #16]
   15494:	str	ip, [sp, #20]
   15498:	bl	10f2c <__fprintf_chk@plt>
   1549c:	add	sp, sp, #32
   154a0:	ldrd	r4, [sp]
   154a4:	ldr	r6, [sp, #8]
   154a8:	add	sp, sp, #12
   154ac:	pop	{pc}		; (ldr pc, [sp], #4)
   154b0:	mov	r3, r2
   154b4:	mov	r1, #1
   154b8:	str	ip, [sp]
   154bc:	movw	r2, #30860	; 0x788c
   154c0:	movt	r2, #1
   154c4:	bl	10f2c <__fprintf_chk@plt>
   154c8:	b	15388 <__assert_fail@plt+0x43cc>
   154cc:	mov	r2, #5
   154d0:	movw	r1, #31080	; 0x7968
   154d4:	movt	r1, #1
   154d8:	mov	r0, #0
   154dc:	bl	10dd0 <dcgettext@plt>
   154e0:	ldr	r3, [r5]
   154e4:	mov	r2, r0
   154e8:	mov	r1, #1
   154ec:	mov	r0, r4
   154f0:	add	sp, sp, #32
   154f4:	ldrd	r4, [sp]
   154f8:	ldr	r6, [sp, #8]
   154fc:	ldr	lr, [sp, #12]
   15500:	add	sp, sp, #16
   15504:	b	10f2c <__fprintf_chk@plt>
   15508:	mov	r2, #5
   1550c:	movw	r1, #31096	; 0x7978
   15510:	movt	r1, #1
   15514:	mov	r0, #0
   15518:	bl	10dd0 <dcgettext@plt>
   1551c:	ldm	r5, {r3, ip}
   15520:	mov	r2, r0
   15524:	mov	r1, #1
   15528:	mov	r0, r4
   1552c:	str	ip, [sp, #48]	; 0x30
   15530:	add	sp, sp, #32
   15534:	ldrd	r4, [sp]
   15538:	ldr	r6, [sp, #8]
   1553c:	ldr	lr, [sp, #12]
   15540:	add	sp, sp, #16
   15544:	b	10f2c <__fprintf_chk@plt>
   15548:	mov	r2, #5
   1554c:	movw	r1, #31120	; 0x7990
   15550:	movt	r1, #1
   15554:	mov	r0, #0
   15558:	bl	10dd0 <dcgettext@plt>
   1555c:	ldm	r5, {r3, lr}
   15560:	mov	r2, r0
   15564:	mov	r1, #1
   15568:	mov	r0, r4
   1556c:	ldr	ip, [r5, #8]
   15570:	str	lr, [sp, #48]	; 0x30
   15574:	str	ip, [sp, #52]	; 0x34
   15578:	add	sp, sp, #32
   1557c:	ldrd	r4, [sp]
   15580:	ldr	r6, [sp, #8]
   15584:	ldr	lr, [sp, #12]
   15588:	add	sp, sp, #16
   1558c:	b	10f2c <__fprintf_chk@plt>
   15590:	mov	r2, #5
   15594:	movw	r1, #31148	; 0x79ac
   15598:	movt	r1, #1
   1559c:	mov	r0, #0
   155a0:	bl	10dd0 <dcgettext@plt>
   155a4:	ldmib	r5, {r3, ip, lr}
   155a8:	mov	r2, r0
   155ac:	mov	r1, #1
   155b0:	mov	r0, r4
   155b4:	str	r3, [sp]
   155b8:	ldr	r3, [r5]
   155bc:	stmib	sp, {ip, lr}
   155c0:	bl	10f2c <__fprintf_chk@plt>
   155c4:	b	1549c <__assert_fail@plt+0x44e0>
   155c8:	mov	r2, #5
   155cc:	movw	r1, #31180	; 0x79cc
   155d0:	movt	r1, #1
   155d4:	mov	r0, #0
   155d8:	bl	10dd0 <dcgettext@plt>
   155dc:	ldmib	r5, {ip, lr}
   155e0:	mov	r2, r0
   155e4:	mov	r1, #1
   155e8:	mov	r0, r4
   155ec:	ldr	r3, [r5, #16]
   155f0:	str	ip, [sp]
   155f4:	ldr	ip, [r5, #12]
   155f8:	str	r3, [sp, #12]
   155fc:	ldr	r3, [r5]
   15600:	str	lr, [sp, #4]
   15604:	str	ip, [sp, #8]
   15608:	bl	10f2c <__fprintf_chk@plt>
   1560c:	b	1549c <__assert_fail@plt+0x44e0>
   15610:	mov	r2, #5
   15614:	movw	r1, #31216	; 0x79f0
   15618:	movt	r1, #1
   1561c:	mov	r0, #0
   15620:	bl	10dd0 <dcgettext@plt>
   15624:	ldr	lr, [r5, #4]
   15628:	mov	r2, r0
   1562c:	mov	r1, #1
   15630:	mov	r0, r4
   15634:	ldr	r3, [r5, #8]
   15638:	ldr	ip, [r5, #20]
   1563c:	str	lr, [sp]
   15640:	ldr	lr, [r5, #12]
   15644:	str	ip, [sp, #16]
   15648:	ldr	ip, [r5, #16]
   1564c:	str	r3, [sp, #4]
   15650:	ldr	r3, [r5]
   15654:	str	lr, [sp, #8]
   15658:	str	ip, [sp, #12]
   1565c:	bl	10f2c <__fprintf_chk@plt>
   15660:	b	1549c <__assert_fail@plt+0x44e0>
   15664:	mov	r2, #5
   15668:	movw	r1, #31256	; 0x7a18
   1566c:	movt	r1, #1
   15670:	mov	r0, #0
   15674:	bl	10dd0 <dcgettext@plt>
   15678:	ldmib	r5, {r3, ip}
   1567c:	mov	r2, r0
   15680:	mov	r1, #1
   15684:	mov	r0, r4
   15688:	ldr	lr, [r5, #24]
   1568c:	str	r3, [sp]
   15690:	ldr	r3, [r5, #12]
   15694:	str	lr, [sp, #20]
   15698:	ldr	lr, [r5, #20]
   1569c:	str	ip, [sp, #4]
   156a0:	ldr	ip, [r5, #16]
   156a4:	str	r3, [sp, #8]
   156a8:	ldr	r3, [r5]
   156ac:	str	ip, [sp, #12]
   156b0:	str	lr, [sp, #16]
   156b4:	bl	10f2c <__fprintf_chk@plt>
   156b8:	b	1549c <__assert_fail@plt+0x44e0>
   156bc:	mov	r2, #5
   156c0:	movw	r1, #31300	; 0x7a44
   156c4:	movt	r1, #1
   156c8:	mov	r0, #0
   156cc:	bl	10dd0 <dcgettext@plt>
   156d0:	ldmib	r5, {ip, lr}
   156d4:	mov	r2, r0
   156d8:	mov	r1, #1
   156dc:	mov	r0, r4
   156e0:	ldr	r3, [r5, #28]
   156e4:	str	ip, [sp]
   156e8:	ldr	ip, [r5, #12]
   156ec:	str	r3, [sp, #24]
   156f0:	ldr	r3, [r5, #24]
   156f4:	str	lr, [sp, #4]
   156f8:	ldr	lr, [r5, #16]
   156fc:	str	ip, [sp, #8]
   15700:	ldr	ip, [r5, #20]
   15704:	str	r3, [sp, #20]
   15708:	ldr	r3, [r5]
   1570c:	str	lr, [sp, #12]
   15710:	str	ip, [sp, #16]
   15714:	bl	10f2c <__fprintf_chk@plt>
   15718:	b	1549c <__assert_fail@plt+0x44e0>
   1571c:	movw	r1, #31400	; 0x7aa8
   15720:	movt	r1, #1
   15724:	b	1543c <__assert_fail@plt+0x4480>
   15728:	strd	r4, [sp, #-12]!
   1572c:	str	lr, [sp, #8]
   15730:	sub	sp, sp, #12
   15734:	ldr	r5, [sp, #24]
   15738:	ldr	ip, [r5]
   1573c:	cmp	ip, #0
   15740:	beq	1575c <__assert_fail@plt+0x47a0>
   15744:	mov	lr, r5
   15748:	mov	ip, #0
   1574c:	ldr	r4, [lr, #4]!
   15750:	add	ip, ip, #1
   15754:	cmp	r4, #0
   15758:	bne	1574c <__assert_fail@plt+0x4790>
   1575c:	stm	sp, {r5, ip}
   15760:	bl	15348 <__assert_fail@plt+0x438c>
   15764:	add	sp, sp, #12
   15768:	ldrd	r4, [sp]
   1576c:	add	sp, sp, #8
   15770:	pop	{pc}		; (ldr pc, [sp], #4)
   15774:	strd	r4, [sp, #-16]!
   15778:	mov	ip, #0
   1577c:	str	r6, [sp, #8]
   15780:	str	lr, [sp, #12]
   15784:	sub	sp, sp, #48	; 0x30
   15788:	ldr	r5, [sp, #64]	; 0x40
   1578c:	add	r6, sp, #8
   15790:	mov	r4, r6
   15794:	ldr	lr, [r5], #4
   15798:	cmp	lr, #0
   1579c:	str	lr, [r4], #4
   157a0:	beq	157b0 <__assert_fail@plt+0x47f4>
   157a4:	add	ip, ip, #1
   157a8:	cmp	ip, #10
   157ac:	bne	15794 <__assert_fail@plt+0x47d8>
   157b0:	stm	sp, {r6, ip}
   157b4:	bl	15348 <__assert_fail@plt+0x438c>
   157b8:	add	sp, sp, #48	; 0x30
   157bc:	ldrd	r4, [sp]
   157c0:	ldr	r6, [sp, #8]
   157c4:	add	sp, sp, #12
   157c8:	pop	{pc}		; (ldr pc, [sp], #4)
   157cc:	push	{r3}		; (str r3, [sp, #-4]!)
   157d0:	mov	ip, #0
   157d4:	strd	r4, [sp, #-12]!
   157d8:	str	lr, [sp, #8]
   157dc:	sub	sp, sp, #56	; 0x38
   157e0:	add	r3, sp, #72	; 0x48
   157e4:	add	r5, sp, #16
   157e8:	mov	r4, r3
   157ec:	mov	lr, r5
   157f0:	str	r3, [sp, #12]
   157f4:	ldr	r3, [r4], #4
   157f8:	cmp	r3, #0
   157fc:	str	r3, [lr], #4
   15800:	beq	15810 <__assert_fail@plt+0x4854>
   15804:	add	ip, ip, #1
   15808:	cmp	ip, #10
   1580c:	bne	157f4 <__assert_fail@plt+0x4838>
   15810:	ldr	r3, [sp, #68]	; 0x44
   15814:	stm	sp, {r5, ip}
   15818:	bl	15348 <__assert_fail@plt+0x438c>
   1581c:	add	sp, sp, #56	; 0x38
   15820:	ldrd	r4, [sp]
   15824:	ldr	lr, [sp, #8]
   15828:	add	sp, sp, #12
   1582c:	add	sp, sp, #4
   15830:	bx	lr
   15834:	movw	r3, #33124	; 0x8164
   15838:	movt	r3, #2
   1583c:	str	r4, [sp, #-8]!
   15840:	mov	r0, #10
   15844:	ldr	r1, [r3]
   15848:	str	lr, [sp, #4]
   1584c:	bl	10dc4 <fputc_unlocked@plt>
   15850:	mov	r2, #5
   15854:	movw	r1, #31460	; 0x7ae4
   15858:	movt	r1, #1
   1585c:	mov	r0, #0
   15860:	bl	10dd0 <dcgettext@plt>
   15864:	mov	r1, r0
   15868:	movw	r2, #31480	; 0x7af8
   1586c:	movt	r2, #1
   15870:	mov	r0, #1
   15874:	bl	10f14 <__printf_chk@plt>
   15878:	mov	r2, #5
   1587c:	movw	r1, #31504	; 0x7b10
   15880:	movt	r1, #1
   15884:	mov	r0, #0
   15888:	bl	10dd0 <dcgettext@plt>
   1588c:	mov	r1, r0
   15890:	movw	r3, #29484	; 0x732c
   15894:	movt	r3, #1
   15898:	movw	r2, #29524	; 0x7354
   1589c:	movt	r2, #1
   158a0:	mov	r0, #1
   158a4:	bl	10f14 <__printf_chk@plt>
   158a8:	mov	r2, #5
   158ac:	movw	r1, #31524	; 0x7b24
   158b0:	movt	r1, #1
   158b4:	mov	r0, #0
   158b8:	bl	10dd0 <dcgettext@plt>
   158bc:	mov	r1, r0
   158c0:	movw	r2, #31564	; 0x7b4c
   158c4:	movt	r2, #1
   158c8:	mov	r0, #1
   158cc:	ldr	r4, [sp]
   158d0:	ldr	lr, [sp, #4]
   158d4:	add	sp, sp, #8
   158d8:	b	10f14 <__printf_chk@plt>
   158dc:	str	r4, [sp, #-8]!
   158e0:	str	lr, [sp, #4]
   158e4:	bl	167b4 <__assert_fail@plt+0x57f8>
   158e8:	cmp	r0, #0
   158ec:	beq	158fc <__assert_fail@plt+0x4940>
   158f0:	ldr	r4, [sp]
   158f4:	add	sp, sp, #4
   158f8:	pop	{pc}		; (ldr pc, [sp], #4)
   158fc:	bl	15d54 <__assert_fail@plt+0x4d98>
   15900:	str	r4, [sp, #-8]!
   15904:	str	lr, [sp, #4]
   15908:	bl	167b4 <__assert_fail@plt+0x57f8>
   1590c:	cmp	r0, #0
   15910:	beq	15920 <__assert_fail@plt+0x4964>
   15914:	ldr	r4, [sp]
   15918:	add	sp, sp, #4
   1591c:	pop	{pc}		; (ldr pc, [sp], #4)
   15920:	bl	15d54 <__assert_fail@plt+0x4d98>
   15924:	str	r4, [sp, #-8]!
   15928:	str	lr, [sp, #4]
   1592c:	bl	167b4 <__assert_fail@plt+0x57f8>
   15930:	cmp	r0, #0
   15934:	beq	15944 <__assert_fail@plt+0x4988>
   15938:	ldr	r4, [sp]
   1593c:	add	sp, sp, #4
   15940:	pop	{pc}		; (ldr pc, [sp], #4)
   15944:	bl	15d54 <__assert_fail@plt+0x4d98>
   15948:	strd	r4, [sp, #-16]!
   1594c:	mov	r5, r0
   15950:	mov	r4, r1
   15954:	str	r6, [sp, #8]
   15958:	str	lr, [sp, #12]
   1595c:	bl	167f0 <__assert_fail@plt+0x5834>
   15960:	cmp	r0, #0
   15964:	beq	15978 <__assert_fail@plt+0x49bc>
   15968:	ldrd	r4, [sp]
   1596c:	ldr	r6, [sp, #8]
   15970:	add	sp, sp, #12
   15974:	pop	{pc}		; (ldr pc, [sp], #4)
   15978:	adds	r4, r4, #0
   1597c:	movne	r4, #1
   15980:	cmp	r5, #0
   15984:	moveq	r4, #1
   15988:	cmp	r4, #0
   1598c:	beq	15968 <__assert_fail@plt+0x49ac>
   15990:	bl	15d54 <__assert_fail@plt+0x4d98>
   15994:	cmp	r1, #0
   15998:	orreq	r1, r1, #1
   1599c:	str	r4, [sp, #-8]!
   159a0:	str	lr, [sp, #4]
   159a4:	bl	167f0 <__assert_fail@plt+0x5834>
   159a8:	cmp	r0, #0
   159ac:	beq	159bc <__assert_fail@plt+0x4a00>
   159b0:	ldr	r4, [sp]
   159b4:	add	sp, sp, #4
   159b8:	pop	{pc}		; (ldr pc, [sp], #4)
   159bc:	bl	15d54 <__assert_fail@plt+0x4d98>
   159c0:	strd	r4, [sp, #-16]!
   159c4:	mov	r4, r0
   159c8:	mov	r5, r2
   159cc:	str	r6, [sp, #8]
   159d0:	mov	r6, r1
   159d4:	str	lr, [sp, #12]
   159d8:	bl	1698c <__assert_fail@plt+0x59d0>
   159dc:	cmp	r0, #0
   159e0:	beq	159f4 <__assert_fail@plt+0x4a38>
   159e4:	ldrd	r4, [sp]
   159e8:	ldr	r6, [sp, #8]
   159ec:	add	sp, sp, #12
   159f0:	pop	{pc}		; (ldr pc, [sp], #4)
   159f4:	cmp	r4, #0
   159f8:	beq	15a08 <__assert_fail@plt+0x4a4c>
   159fc:	cmp	r6, #0
   15a00:	cmpne	r5, #0
   15a04:	beq	159e4 <__assert_fail@plt+0x4a28>
   15a08:	bl	15d54 <__assert_fail@plt+0x4d98>
   15a0c:	b	159c0 <__assert_fail@plt+0x4a04>
   15a10:	cmp	r2, #0
   15a14:	cmpne	r1, #0
   15a18:	str	r4, [sp, #-8]!
   15a1c:	moveq	r2, #1
   15a20:	str	lr, [sp, #4]
   15a24:	moveq	r1, r2
   15a28:	bl	1698c <__assert_fail@plt+0x59d0>
   15a2c:	cmp	r0, #0
   15a30:	beq	15a40 <__assert_fail@plt+0x4a84>
   15a34:	ldr	r4, [sp]
   15a38:	add	sp, sp, #4
   15a3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a40:	bl	15d54 <__assert_fail@plt+0x4d98>
   15a44:	mov	r2, r1
   15a48:	mov	r1, r0
   15a4c:	mov	r0, #0
   15a50:	b	159c0 <__assert_fail@plt+0x4a04>
   15a54:	mov	r2, r1
   15a58:	mov	r1, r0
   15a5c:	mov	r0, #0
   15a60:	b	15a10 <__assert_fail@plt+0x4a54>
   15a64:	cmp	r0, #0
   15a68:	strd	r4, [sp, #-16]!
   15a6c:	mov	r5, r1
   15a70:	ldr	r4, [r1]
   15a74:	str	r6, [sp, #8]
   15a78:	str	lr, [sp, #12]
   15a7c:	beq	15aac <__assert_fail@plt+0x4af0>
   15a80:	lsr	r3, r4, #1
   15a84:	add	r3, r3, #1
   15a88:	adds	r4, r4, r3
   15a8c:	bcs	15ac8 <__assert_fail@plt+0x4b0c>
   15a90:	mov	r1, r4
   15a94:	bl	159c0 <__assert_fail@plt+0x4a04>
   15a98:	ldr	r6, [sp, #8]
   15a9c:	str	r4, [r5]
   15aa0:	ldrd	r4, [sp]
   15aa4:	add	sp, sp, #12
   15aa8:	pop	{pc}		; (ldr pc, [sp], #4)
   15aac:	cmp	r4, #0
   15ab0:	bne	15a90 <__assert_fail@plt+0x4ad4>
   15ab4:	mov	r4, #64	; 0x40
   15ab8:	udiv	r4, r4, r2
   15abc:	cmp	r2, #64	; 0x40
   15ac0:	addhi	r4, r4, #1
   15ac4:	b	15a90 <__assert_fail@plt+0x4ad4>
   15ac8:	bl	15d54 <__assert_fail@plt+0x4d98>
   15acc:	mov	r2, #1
   15ad0:	b	15a64 <__assert_fail@plt+0x4aa8>
   15ad4:	ldr	ip, [r1]
   15ad8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15adc:	mov	r5, r1
   15ae0:	strd	r6, [sp, #8]
   15ae4:	str	lr, [sp, #28]
   15ae8:	strd	r8, [sp, #16]
   15aec:	asr	lr, ip, #1
   15af0:	ldr	r8, [sp, #32]
   15af4:	str	sl, [sp, #24]
   15af8:	adds	r4, ip, lr
   15afc:	mvn	lr, r3
   15b00:	lsr	lr, lr, #31
   15b04:	mvnvs	r4, #-2147483648	; 0x80000000
   15b08:	cmp	r3, r4
   15b0c:	movge	r1, #0
   15b10:	andlt	r1, lr, #1
   15b14:	cmp	r1, #0
   15b18:	movne	r4, r3
   15b1c:	smull	r6, r7, r4, r8
   15b20:	cmp	r7, r6, asr #31
   15b24:	bne	15bac <__assert_fail@plt+0x4bf0>
   15b28:	cmp	r6, #63	; 0x3f
   15b2c:	mov	r1, r6
   15b30:	ble	15b94 <__assert_fail@plt+0x4bd8>
   15b34:	cmp	r0, #0
   15b38:	sub	r6, r4, ip
   15b3c:	streq	r0, [r5]
   15b40:	cmp	r6, r2
   15b44:	bge	15b74 <__assert_fail@plt+0x4bb8>
   15b48:	adds	r4, ip, r2
   15b4c:	bvs	15ba8 <__assert_fail@plt+0x4bec>
   15b50:	cmp	r4, r3
   15b54:	movle	r3, #0
   15b58:	andgt	r3, lr, #1
   15b5c:	cmp	r3, #0
   15b60:	bne	15ba8 <__assert_fail@plt+0x4bec>
   15b64:	smull	r8, r9, r4, r8
   15b68:	cmp	r9, r8, asr #31
   15b6c:	mov	r1, r8
   15b70:	bne	15ba8 <__assert_fail@plt+0x4bec>
   15b74:	bl	15948 <__assert_fail@plt+0x498c>
   15b78:	ldrd	r6, [sp, #8]
   15b7c:	ldrd	r8, [sp, #16]
   15b80:	ldr	sl, [sp, #24]
   15b84:	str	r4, [r5]
   15b88:	ldrd	r4, [sp]
   15b8c:	add	sp, sp, #28
   15b90:	pop	{pc}		; (ldr pc, [sp], #4)
   15b94:	mov	r6, #64	; 0x40
   15b98:	sdiv	r4, r6, r8
   15b9c:	mls	r1, r8, r4, r6
   15ba0:	sub	r1, r6, r1
   15ba4:	b	15b34 <__assert_fail@plt+0x4b78>
   15ba8:	bl	15d54 <__assert_fail@plt+0x4d98>
   15bac:	mvn	r6, #-2147483648	; 0x80000000
   15bb0:	b	15b98 <__assert_fail@plt+0x4bdc>
   15bb4:	mov	r1, #1
   15bb8:	str	r4, [sp, #-8]!
   15bbc:	str	lr, [sp, #4]
   15bc0:	bl	16740 <__assert_fail@plt+0x5784>
   15bc4:	cmp	r0, #0
   15bc8:	beq	15bd8 <__assert_fail@plt+0x4c1c>
   15bcc:	ldr	r4, [sp]
   15bd0:	add	sp, sp, #4
   15bd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bd8:	bl	15d54 <__assert_fail@plt+0x4d98>
   15bdc:	mov	r1, #1
   15be0:	str	r4, [sp, #-8]!
   15be4:	str	lr, [sp, #4]
   15be8:	bl	16740 <__assert_fail@plt+0x5784>
   15bec:	cmp	r0, #0
   15bf0:	beq	15c00 <__assert_fail@plt+0x4c44>
   15bf4:	ldr	r4, [sp]
   15bf8:	add	sp, sp, #4
   15bfc:	pop	{pc}		; (ldr pc, [sp], #4)
   15c00:	bl	15d54 <__assert_fail@plt+0x4d98>
   15c04:	str	r4, [sp, #-8]!
   15c08:	str	lr, [sp, #4]
   15c0c:	bl	16740 <__assert_fail@plt+0x5784>
   15c10:	cmp	r0, #0
   15c14:	beq	15c24 <__assert_fail@plt+0x4c68>
   15c18:	ldr	r4, [sp]
   15c1c:	add	sp, sp, #4
   15c20:	pop	{pc}		; (ldr pc, [sp], #4)
   15c24:	bl	15d54 <__assert_fail@plt+0x4d98>
   15c28:	str	r4, [sp, #-8]!
   15c2c:	str	lr, [sp, #4]
   15c30:	bl	16740 <__assert_fail@plt+0x5784>
   15c34:	cmp	r0, #0
   15c38:	beq	15c48 <__assert_fail@plt+0x4c8c>
   15c3c:	ldr	r4, [sp]
   15c40:	add	sp, sp, #4
   15c44:	pop	{pc}		; (ldr pc, [sp], #4)
   15c48:	bl	15d54 <__assert_fail@plt+0x4d98>
   15c4c:	strd	r4, [sp, #-16]!
   15c50:	mov	r4, r1
   15c54:	str	r6, [sp, #8]
   15c58:	mov	r6, r0
   15c5c:	mov	r0, r1
   15c60:	str	lr, [sp, #12]
   15c64:	bl	167b4 <__assert_fail@plt+0x57f8>
   15c68:	subs	r5, r0, #0
   15c6c:	beq	15c90 <__assert_fail@plt+0x4cd4>
   15c70:	mov	r2, r4
   15c74:	mov	r1, r6
   15c78:	bl	10d88 <memcpy@plt>
   15c7c:	mov	r0, r5
   15c80:	ldrd	r4, [sp]
   15c84:	ldr	r6, [sp, #8]
   15c88:	add	sp, sp, #12
   15c8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15c90:	bl	15d54 <__assert_fail@plt+0x4d98>
   15c94:	strd	r4, [sp, #-16]!
   15c98:	mov	r4, r1
   15c9c:	str	r6, [sp, #8]
   15ca0:	mov	r6, r0
   15ca4:	mov	r0, r1
   15ca8:	str	lr, [sp, #12]
   15cac:	bl	167b4 <__assert_fail@plt+0x57f8>
   15cb0:	subs	r5, r0, #0
   15cb4:	beq	15cd8 <__assert_fail@plt+0x4d1c>
   15cb8:	mov	r2, r4
   15cbc:	mov	r1, r6
   15cc0:	bl	10d88 <memcpy@plt>
   15cc4:	mov	r0, r5
   15cc8:	ldrd	r4, [sp]
   15ccc:	ldr	r6, [sp, #8]
   15cd0:	add	sp, sp, #12
   15cd4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cd8:	bl	15d54 <__assert_fail@plt+0x4d98>
   15cdc:	strd	r4, [sp, #-16]!
   15ce0:	mov	r4, r1
   15ce4:	str	r6, [sp, #8]
   15ce8:	mov	r6, r0
   15cec:	add	r0, r1, #1
   15cf0:	str	lr, [sp, #12]
   15cf4:	bl	167b4 <__assert_fail@plt+0x57f8>
   15cf8:	subs	r5, r0, #0
   15cfc:	beq	15d28 <__assert_fail@plt+0x4d6c>
   15d00:	mov	r3, #0
   15d04:	mov	r1, r6
   15d08:	mov	r2, r4
   15d0c:	strb	r3, [r5, r4]
   15d10:	bl	10d88 <memcpy@plt>
   15d14:	mov	r0, r5
   15d18:	ldrd	r4, [sp]
   15d1c:	ldr	r6, [sp, #8]
   15d20:	add	sp, sp, #12
   15d24:	pop	{pc}		; (ldr pc, [sp], #4)
   15d28:	bl	15d54 <__assert_fail@plt+0x4d98>
   15d2c:	str	r4, [sp, #-8]!
   15d30:	mov	r4, r0
   15d34:	str	lr, [sp, #4]
   15d38:	bl	10ed8 <strlen@plt>
   15d3c:	add	r1, r0, #1
   15d40:	mov	r0, r4
   15d44:	ldr	r4, [sp]
   15d48:	ldr	lr, [sp, #4]
   15d4c:	add	sp, sp, #8
   15d50:	b	15c4c <__assert_fail@plt+0x4c90>
   15d54:	movw	r3, #33024	; 0x8100
   15d58:	movt	r3, #2
   15d5c:	str	r4, [sp, #-8]!
   15d60:	ldr	r4, [r3]
   15d64:	mov	r2, #5
   15d68:	movw	r1, #31644	; 0x7b9c
   15d6c:	movt	r1, #1
   15d70:	mov	r0, #0
   15d74:	str	lr, [sp, #4]
   15d78:	bl	10dd0 <dcgettext@plt>
   15d7c:	mov	r3, r0
   15d80:	movw	r2, #27828	; 0x6cb4
   15d84:	movt	r2, #1
   15d88:	mov	r1, #0
   15d8c:	mov	r0, r4
   15d90:	bl	10e48 <error@plt>
   15d94:	bl	10fa4 <abort@plt>
   15d98:	cmp	r2, #36	; 0x24
   15d9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15da0:	strd	r6, [sp, #8]
   15da4:	strd	r8, [sp, #16]
   15da8:	strd	sl, [sp, #24]
   15dac:	str	lr, [sp, #32]
   15db0:	sub	sp, sp, #36	; 0x24
   15db4:	bhi	16644 <__assert_fail@plt+0x5688>
   15db8:	cmp	r1, #0
   15dbc:	mov	r8, r2
   15dc0:	mov	r6, r0
   15dc4:	mov	r5, r1
   15dc8:	mov	sl, r3
   15dcc:	addeq	r5, sp, #28
   15dd0:	bl	10ef0 <__errno_location@plt>
   15dd4:	mov	r3, #0
   15dd8:	mov	r7, r0
   15ddc:	str	r3, [r0]
   15de0:	bl	10ec0 <__ctype_b_loc@plt>
   15de4:	ldrb	r3, [r6]
   15de8:	mov	r2, r6
   15dec:	ldr	r0, [r0]
   15df0:	b	15df8 <__assert_fail@plt+0x4e3c>
   15df4:	ldrb	r3, [r2, #1]!
   15df8:	lsl	r1, r3, #1
   15dfc:	ldrh	r4, [r0, r1]
   15e00:	ands	r4, r4, #8192	; 0x2000
   15e04:	bne	15df4 <__assert_fail@plt+0x4e38>
   15e08:	cmp	r3, #45	; 0x2d
   15e0c:	beq	15eac <__assert_fail@plt+0x4ef0>
   15e10:	mov	r2, r8
   15e14:	mov	r3, r4
   15e18:	mov	r1, r5
   15e1c:	mov	r0, r6
   15e20:	bl	10d94 <__strtoull_internal@plt>
   15e24:	ldr	fp, [r5]
   15e28:	mov	r9, r0
   15e2c:	mov	r8, r1
   15e30:	cmp	fp, r6
   15e34:	beq	15e94 <__assert_fail@plt+0x4ed8>
   15e38:	ldr	r4, [r7]
   15e3c:	cmp	r4, #0
   15e40:	bne	15e84 <__assert_fail@plt+0x4ec8>
   15e44:	ldr	r3, [sp, #72]	; 0x48
   15e48:	cmp	r3, #0
   15e4c:	beq	15e5c <__assert_fail@plt+0x4ea0>
   15e50:	ldrb	r6, [fp]
   15e54:	cmp	r6, #0
   15e58:	bne	1619c <__assert_fail@plt+0x51e0>
   15e5c:	str	r9, [sl]
   15e60:	str	r8, [sl, #4]
   15e64:	mov	r0, r4
   15e68:	add	sp, sp, #36	; 0x24
   15e6c:	ldrd	r4, [sp]
   15e70:	ldrd	r6, [sp, #8]
   15e74:	ldrd	r8, [sp, #16]
   15e78:	ldrd	sl, [sp, #24]
   15e7c:	add	sp, sp, #32
   15e80:	pop	{pc}		; (ldr pc, [sp], #4)
   15e84:	cmp	r4, #34	; 0x22
   15e88:	bne	15eac <__assert_fail@plt+0x4ef0>
   15e8c:	mov	r4, #1
   15e90:	b	15e44 <__assert_fail@plt+0x4e88>
   15e94:	ldr	r3, [sp, #72]	; 0x48
   15e98:	cmp	r3, #0
   15e9c:	beq	15eac <__assert_fail@plt+0x4ef0>
   15ea0:	ldrb	r6, [r6]
   15ea4:	cmp	r6, #0
   15ea8:	bne	15eb4 <__assert_fail@plt+0x4ef8>
   15eac:	mov	r4, #4
   15eb0:	b	15e64 <__assert_fail@plt+0x4ea8>
   15eb4:	mov	r1, r6
   15eb8:	mov	r0, r3
   15ebc:	bl	10ee4 <strchr@plt>
   15ec0:	cmp	r0, #0
   15ec4:	movne	r9, #1
   15ec8:	movne	r8, #0
   15ecc:	beq	15eac <__assert_fail@plt+0x4ef0>
   15ed0:	sub	r3, r6, #69	; 0x45
   15ed4:	cmp	r3, #47	; 0x2f
   15ed8:	ldrls	pc, [pc, r3, lsl #2]
   15edc:	b	15fe4 <__assert_fail@plt+0x5028>
   15ee0:	andeq	r5, r1, r0, lsr #31
   15ee4:	andeq	r5, r1, r4, ror #31
   15ee8:	andeq	r5, r1, r0, lsr #31
   15eec:	andeq	r5, r1, r4, ror #31
   15ef0:	andeq	r5, r1, r4, ror #31
   15ef4:	andeq	r5, r1, r4, ror #31
   15ef8:	andeq	r5, r1, r0, lsr #31
   15efc:	andeq	r5, r1, r4, ror #31
   15f00:	andeq	r5, r1, r0, lsr #31
   15f04:	andeq	r5, r1, r4, ror #31
   15f08:	andeq	r5, r1, r4, ror #31
   15f0c:	andeq	r5, r1, r0, lsr #31
   15f10:	andeq	r5, r1, r4, ror #31
   15f14:	andeq	r5, r1, r4, ror #31
   15f18:	andeq	r5, r1, r4, ror #31
   15f1c:	andeq	r5, r1, r0, lsr #31
   15f20:	andeq	r5, r1, r4, ror #31
   15f24:	andeq	r5, r1, r4, ror #31
   15f28:	andeq	r5, r1, r4, ror #31
   15f2c:	andeq	r5, r1, r4, ror #31
   15f30:	andeq	r5, r1, r0, lsr #31
   15f34:	andeq	r5, r1, r0, lsr #31
   15f38:	andeq	r5, r1, r4, ror #31
   15f3c:	andeq	r5, r1, r4, ror #31
   15f40:	andeq	r5, r1, r4, ror #31
   15f44:	andeq	r5, r1, r4, ror #31
   15f48:	andeq	r5, r1, r4, ror #31
   15f4c:	andeq	r5, r1, r4, ror #31
   15f50:	andeq	r5, r1, r4, ror #31
   15f54:	andeq	r5, r1, r4, ror #31
   15f58:	andeq	r5, r1, r4, ror #31
   15f5c:	andeq	r5, r1, r4, ror #31
   15f60:	andeq	r5, r1, r4, ror #31
   15f64:	andeq	r5, r1, r4, ror #31
   15f68:	andeq	r5, r1, r0, lsr #31
   15f6c:	andeq	r5, r1, r4, ror #31
   15f70:	andeq	r5, r1, r4, ror #31
   15f74:	andeq	r5, r1, r4, ror #31
   15f78:	andeq	r5, r1, r0, lsr #31
   15f7c:	andeq	r5, r1, r4, ror #31
   15f80:	andeq	r5, r1, r0, lsr #31
   15f84:	andeq	r5, r1, r4, ror #31
   15f88:	andeq	r5, r1, r4, ror #31
   15f8c:	andeq	r5, r1, r4, ror #31
   15f90:	andeq	r5, r1, r4, ror #31
   15f94:	andeq	r5, r1, r4, ror #31
   15f98:	andeq	r5, r1, r4, ror #31
   15f9c:	andeq	r5, r1, r0, lsr #31
   15fa0:	mov	r1, #48	; 0x30
   15fa4:	ldr	r0, [sp, #72]	; 0x48
   15fa8:	bl	10ee4 <strchr@plt>
   15fac:	cmp	r0, #0
   15fb0:	beq	15fe4 <__assert_fail@plt+0x5028>
   15fb4:	ldrb	r3, [fp, #1]
   15fb8:	cmp	r3, #68	; 0x44
   15fbc:	beq	16510 <__assert_fail@plt+0x5554>
   15fc0:	cmp	r3, #105	; 0x69
   15fc4:	beq	161b4 <__assert_fail@plt+0x51f8>
   15fc8:	cmp	r3, #66	; 0x42
   15fcc:	moveq	r3, #2
   15fd0:	movne	r3, #1
   15fd4:	moveq	r7, #1000	; 0x3e8
   15fd8:	movne	r7, #1024	; 0x400
   15fdc:	str	r3, [sp, #4]
   15fe0:	b	15ff0 <__assert_fail@plt+0x5034>
   15fe4:	mov	r3, #1
   15fe8:	mov	r7, #1024	; 0x400
   15fec:	str	r3, [sp, #4]
   15ff0:	sub	r6, r6, #66	; 0x42
   15ff4:	cmp	r6, #53	; 0x35
   15ff8:	ldrls	pc, [pc, r6, lsl #2]
   15ffc:	b	16160 <__assert_fail@plt+0x51a4>
   16000:			; <UNDEFINED> instruction: 0x000164b8
   16004:	andeq	r6, r1, r0, ror #2
   16008:	andeq	r6, r1, r0, ror #2
   1600c:	andeq	r6, r1, r4, asr #5
   16010:	andeq	r6, r1, r0, ror #2
   16014:	ldrdeq	r6, [r1], -r8
   16018:	andeq	r6, r1, r0, ror #2
   1601c:	andeq	r6, r1, r0, ror #2
   16020:	andeq	r6, r1, r0, ror #2
   16024:	andeq	r6, r1, r8, ror #2
   16028:	andeq	r6, r1, r0, ror #2
   1602c:	andeq	r6, r1, r4, ror #8
   16030:	andeq	r6, r1, r0, ror #2
   16034:	andeq	r6, r1, r0, ror #2
   16038:			; <UNDEFINED> instruction: 0x000163b4
   1603c:	andeq	r6, r1, r0, ror #2
   16040:	andeq	r6, r1, r0, ror #2
   16044:	andeq	r6, r1, r0, ror #2
   16048:	andeq	r6, r1, ip, lsr r3
   1604c:	andeq	r6, r1, r0, ror #2
   16050:	andeq	r6, r1, r0, ror #2
   16054:	andeq	r6, r1, r0, ror #2
   16058:	andeq	r6, r1, r0, ror #2
   1605c:	andeq	r6, r1, ip, asr #4
   16060:	ldrdeq	r6, [r1], -r0
   16064:	andeq	r6, r1, r0, ror #2
   16068:	andeq	r6, r1, r0, ror #2
   1606c:	andeq	r6, r1, r0, ror #2
   16070:	andeq	r6, r1, r0, ror #2
   16074:	andeq	r6, r1, r0, ror #2
   16078:	andeq	r6, r1, r0, ror #2
   1607c:	andeq	r6, r1, r0, ror #2
   16080:	andeq	r6, r1, r4, asr #8
   16084:	andeq	r6, r1, r8, asr #2
   16088:	andeq	r6, r1, r0, ror #2
   1608c:	andeq	r6, r1, r0, ror #2
   16090:	andeq	r6, r1, r0, ror #2
   16094:	ldrdeq	r6, [r1], -r8
   16098:	andeq	r6, r1, r0, ror #2
   1609c:	andeq	r6, r1, r0, ror #2
   160a0:	andeq	r6, r1, r0, ror #2
   160a4:	andeq	r6, r1, r8, ror #2
   160a8:	andeq	r6, r1, r0, ror #2
   160ac:	andeq	r6, r1, r4, ror #8
   160b0:	andeq	r6, r1, r0, ror #2
   160b4:	andeq	r6, r1, r0, ror #2
   160b8:	andeq	r6, r1, r0, ror #2
   160bc:	andeq	r6, r1, r0, ror #2
   160c0:	andeq	r6, r1, r0, ror #2
   160c4:	andeq	r6, r1, r0, ror #2
   160c8:	andeq	r6, r1, ip, lsr r3
   160cc:	andeq	r6, r1, r0, ror #2
   160d0:	andeq	r6, r1, r0, ror #2
   160d4:	andeq	r6, r1, ip, lsr #8
   160d8:	asr	r3, r7, #31
   160dc:	mov	r2, r7
   160e0:	cmp	r8, #0
   160e4:	umull	r0, r1, r9, r7
   160e8:	mov	ip, #0
   160ec:	strd	r2, [sp, #8]
   160f0:	bne	16544 <__assert_fail@plt+0x5588>
   160f4:	mov	r2, r0
   160f8:	mov	r3, r1
   160fc:	cmp	ip, #0
   16100:	bne	1618c <__assert_fail@plt+0x51d0>
   16104:	cmp	r3, #0
   16108:	mov	lr, ip
   1610c:	bne	165a8 <__assert_fail@plt+0x55ec>
   16110:	umull	r2, r3, r2, r7
   16114:	mov	ip, r2
   16118:	mov	r1, r3
   1611c:	subs	r0, lr, #0
   16120:	bne	1618c <__assert_fail@plt+0x51d0>
   16124:	cmp	r1, #0
   16128:	bne	16588 <__assert_fail@plt+0x55cc>
   1612c:	umull	r2, r3, ip, r7
   16130:	mov	r6, r2
   16134:	mov	r2, r3
   16138:	cmp	r0, #0
   1613c:	mov	r9, r6
   16140:	mov	r8, r2
   16144:	bne	1618c <__assert_fail@plt+0x51d0>
   16148:	ldr	r2, [sp, #4]
   1614c:	add	r3, fp, r2
   16150:	str	r3, [r5]
   16154:	ldrb	r3, [fp, r2]
   16158:	cmp	r3, #0
   1615c:	beq	15e5c <__assert_fail@plt+0x4ea0>
   16160:	orr	r4, r4, #2
   16164:	b	15e5c <__assert_fail@plt+0x4ea0>
   16168:	cmp	r8, #0
   1616c:	umull	r2, r3, r9, r7
   16170:	mov	ip, #0
   16174:	asr	r1, r7, #31
   16178:	bne	164e0 <__assert_fail@plt+0x5524>
   1617c:	mov	r9, r2
   16180:	mov	r8, r3
   16184:	cmp	ip, #0
   16188:	beq	16148 <__assert_fail@plt+0x518c>
   1618c:	mvn	r9, #0
   16190:	mov	r4, #1
   16194:	mov	r8, r9
   16198:	b	16148 <__assert_fail@plt+0x518c>
   1619c:	mov	r1, r6
   161a0:	ldr	r0, [sp, #72]	; 0x48
   161a4:	bl	10ee4 <strchr@plt>
   161a8:	cmp	r0, #0
   161ac:	bne	15ed0 <__assert_fail@plt+0x4f14>
   161b0:	b	16160 <__assert_fail@plt+0x51a4>
   161b4:	ldrb	r3, [fp, #2]
   161b8:	mov	r7, #1024	; 0x400
   161bc:	cmp	r3, #66	; 0x42
   161c0:	movne	r3, #1
   161c4:	moveq	r3, #3
   161c8:	str	r3, [sp, #4]
   161cc:	b	15ff0 <__assert_fail@plt+0x5034>
   161d0:	asr	r3, r7, #31
   161d4:	mov	r2, r7
   161d8:	mov	ip, #0
   161dc:	mov	r0, #7
   161e0:	mov	lr, ip
   161e4:	mov	r6, r4
   161e8:	strd	r2, [sp, #8]
   161ec:	str	r5, [sp, #16]
   161f0:	b	1621c <__assert_fail@plt+0x5260>
   161f4:	umull	r2, r3, r9, r7
   161f8:	mov	r9, r2
   161fc:	mov	r8, r3
   16200:	cmp	r1, #0
   16204:	beq	16214 <__assert_fail@plt+0x5258>
   16208:	mvn	r9, #0
   1620c:	mov	ip, #1
   16210:	mov	r8, r9
   16214:	subs	r0, r0, #1
   16218:	beq	16504 <__assert_fail@plt+0x5548>
   1621c:	cmp	r8, #0
   16220:	mov	r1, #0
   16224:	beq	161f4 <__assert_fail@plt+0x5238>
   16228:	umull	r4, r5, r9, r7
   1622c:	mov	r3, lr
   16230:	mov	r2, r5
   16234:	umlal	r2, r3, r8, r7
   16238:	cmp	r3, #0
   1623c:	bne	16664 <__assert_fail@plt+0x56a8>
   16240:	mov	r9, r4
   16244:	mov	r8, r2
   16248:	b	16200 <__assert_fail@plt+0x5244>
   1624c:	asr	r3, r7, #31
   16250:	mov	r2, r7
   16254:	mov	r6, #0
   16258:	mov	lr, #8
   1625c:	mov	r0, r4
   16260:	mov	ip, r5
   16264:	strd	r2, [sp, #8]
   16268:	b	16294 <__assert_fail@plt+0x52d8>
   1626c:	umull	r2, r3, r9, r7
   16270:	mov	r9, r2
   16274:	mov	r8, r3
   16278:	cmp	r1, #0
   1627c:	beq	1628c <__assert_fail@plt+0x52d0>
   16280:	mvn	r9, #0
   16284:	mov	r6, #1
   16288:	mov	r8, r9
   1628c:	subs	lr, lr, #1
   16290:	beq	164d4 <__assert_fail@plt+0x5518>
   16294:	cmp	r8, #0
   16298:	mov	r1, #0
   1629c:	beq	1626c <__assert_fail@plt+0x52b0>
   162a0:	umull	r4, r5, r9, r7
   162a4:	mov	r3, #0
   162a8:	mov	r2, r5
   162ac:	umlal	r2, r3, r8, r7
   162b0:	cmp	r3, #0
   162b4:	bne	166bc <__assert_fail@plt+0x5700>
   162b8:	mov	r9, r4
   162bc:	mov	r8, r2
   162c0:	b	16278 <__assert_fail@plt+0x52bc>
   162c4:	asr	r3, r7, #31
   162c8:	mov	r2, r7
   162cc:	mov	r6, #0
   162d0:	mov	lr, #6
   162d4:	mov	r0, r4
   162d8:	mov	ip, r5
   162dc:	strd	r2, [sp, #8]
   162e0:	b	1630c <__assert_fail@plt+0x5350>
   162e4:	umull	r2, r3, r9, r7
   162e8:	mov	r9, r2
   162ec:	mov	r8, r3
   162f0:	cmp	r1, #0
   162f4:	beq	16304 <__assert_fail@plt+0x5348>
   162f8:	mvn	r9, #0
   162fc:	mov	r6, #1
   16300:	mov	r8, r9
   16304:	subs	lr, lr, #1
   16308:	beq	164d4 <__assert_fail@plt+0x5518>
   1630c:	cmp	r8, #0
   16310:	mov	r1, #0
   16314:	beq	162e4 <__assert_fail@plt+0x5328>
   16318:	umull	r4, r5, r9, r7
   1631c:	mov	r3, #0
   16320:	mov	r2, r5
   16324:	umlal	r2, r3, r8, r7
   16328:	cmp	r3, #0
   1632c:	bne	16684 <__assert_fail@plt+0x56c8>
   16330:	mov	r9, r4
   16334:	mov	r8, r2
   16338:	b	162f0 <__assert_fail@plt+0x5334>
   1633c:	asr	r3, r7, #31
   16340:	mov	r2, r7
   16344:	mov	r6, #0
   16348:	mov	lr, #4
   1634c:	mov	r0, r4
   16350:	mov	ip, r5
   16354:	strd	r2, [sp, #8]
   16358:	b	16384 <__assert_fail@plt+0x53c8>
   1635c:	umull	r2, r3, r9, r7
   16360:	mov	r9, r2
   16364:	mov	r8, r3
   16368:	cmp	r1, #0
   1636c:	beq	1637c <__assert_fail@plt+0x53c0>
   16370:	mvn	r9, #0
   16374:	mov	r6, #1
   16378:	mov	r8, r9
   1637c:	subs	lr, lr, #1
   16380:	beq	164d4 <__assert_fail@plt+0x5518>
   16384:	cmp	r8, #0
   16388:	mov	r1, #0
   1638c:	beq	1635c <__assert_fail@plt+0x53a0>
   16390:	umull	r4, r5, r9, r7
   16394:	mov	r3, #0
   16398:	mov	r2, r5
   1639c:	umlal	r2, r3, r8, r7
   163a0:	cmp	r3, #0
   163a4:	bne	166a0 <__assert_fail@plt+0x56e4>
   163a8:	mov	r9, r4
   163ac:	mov	r8, r2
   163b0:	b	16368 <__assert_fail@plt+0x53ac>
   163b4:	asr	r3, r7, #31
   163b8:	mov	r2, r7
   163bc:	mov	r6, #0
   163c0:	mov	lr, #5
   163c4:	mov	r0, r4
   163c8:	mov	ip, r5
   163cc:	strd	r2, [sp, #8]
   163d0:	b	163fc <__assert_fail@plt+0x5440>
   163d4:	umull	r2, r3, r9, r7
   163d8:	mov	r9, r2
   163dc:	mov	r8, r3
   163e0:	cmp	r1, #0
   163e4:	beq	163f4 <__assert_fail@plt+0x5438>
   163e8:	mvn	r9, #0
   163ec:	mov	r6, #1
   163f0:	mov	r8, r9
   163f4:	subs	lr, lr, #1
   163f8:	beq	164d4 <__assert_fail@plt+0x5518>
   163fc:	cmp	r8, #0
   16400:	mov	r1, #0
   16404:	beq	163d4 <__assert_fail@plt+0x5418>
   16408:	umull	r4, r5, r9, r7
   1640c:	mov	r3, #0
   16410:	mov	r2, r5
   16414:	umlal	r2, r3, r8, r7
   16418:	cmp	r3, #0
   1641c:	bne	1660c <__assert_fail@plt+0x5650>
   16420:	mov	r9, r4
   16424:	mov	r8, r2
   16428:	b	163e0 <__assert_fail@plt+0x5424>
   1642c:	lsr	r3, r8, #31
   16430:	adds	r9, r9, r9
   16434:	adc	r8, r8, r8
   16438:	cmp	r3, #0
   1643c:	beq	16148 <__assert_fail@plt+0x518c>
   16440:	b	1618c <__assert_fail@plt+0x51d0>
   16444:	lsr	r3, r8, #23
   16448:	lsl	r8, r8, #9
   1644c:	cmp	r3, #0
   16450:	lsl	r3, r9, #9
   16454:	orr	r8, r8, r9, lsr #23
   16458:	bne	1618c <__assert_fail@plt+0x51d0>
   1645c:	mov	r9, r3
   16460:	b	16148 <__assert_fail@plt+0x518c>
   16464:	asr	r3, r7, #31
   16468:	mov	r2, r7
   1646c:	cmp	r8, #0
   16470:	mov	r1, #0
   16474:	strd	r2, [sp, #8]
   16478:	umull	r2, r3, r9, r7
   1647c:	bne	16520 <__assert_fail@plt+0x5564>
   16480:	mov	r0, r2
   16484:	mov	ip, r3
   16488:	cmp	r1, #0
   1648c:	bne	1618c <__assert_fail@plt+0x51d0>
   16490:	cmp	ip, #0
   16494:	bne	16568 <__assert_fail@plt+0x55ac>
   16498:	umull	r2, r3, r0, r7
   1649c:	mov	r6, r2
   164a0:	mov	r2, r3
   164a4:	cmp	r1, #0
   164a8:	mov	r9, r6
   164ac:	mov	r8, r2
   164b0:	beq	16148 <__assert_fail@plt+0x518c>
   164b4:	b	1618c <__assert_fail@plt+0x51d0>
   164b8:	lsr	r3, r8, #22
   164bc:	lsl	r8, r8, #10
   164c0:	cmp	r3, #0
   164c4:	lsl	r3, r9, #10
   164c8:	orr	r8, r8, r9, lsr #22
   164cc:	beq	1645c <__assert_fail@plt+0x54a0>
   164d0:	b	1618c <__assert_fail@plt+0x51d0>
   164d4:	mov	r5, ip
   164d8:	orr	r4, r0, r6
   164dc:	b	16148 <__assert_fail@plt+0x518c>
   164e0:	strd	r2, [sp, #8]
   164e4:	mov	r3, ip
   164e8:	ldr	r2, [sp, #12]
   164ec:	umlal	r2, r3, r8, r7
   164f0:	cmp	r3, #0
   164f4:	bne	16628 <__assert_fail@plt+0x566c>
   164f8:	mov	r8, r2
   164fc:	ldr	r9, [sp, #8]
   16500:	b	16184 <__assert_fail@plt+0x51c8>
   16504:	orr	r4, r6, ip
   16508:	ldr	r5, [sp, #16]
   1650c:	b	16148 <__assert_fail@plt+0x518c>
   16510:	mov	r3, #2
   16514:	mov	r7, #1000	; 0x3e8
   16518:	str	r3, [sp, #4]
   1651c:	b	15ff0 <__assert_fail@plt+0x5034>
   16520:	strd	r2, [sp, #16]
   16524:	mov	r3, r1
   16528:	ldr	r2, [sp, #20]
   1652c:	umlal	r2, r3, r8, r7
   16530:	cmp	r3, #0
   16534:	bne	166f8 <__assert_fail@plt+0x573c>
   16538:	mov	ip, r2
   1653c:	ldr	r0, [sp, #16]
   16540:	b	16488 <__assert_fail@plt+0x54cc>
   16544:	mov	r2, r1
   16548:	mov	r3, ip
   1654c:	umlal	r2, r3, r8, r7
   16550:	cmp	r3, #0
   16554:	strd	r2, [sp, #16]
   16558:	bne	165cc <__assert_fail@plt+0x5610>
   1655c:	mov	r2, r0
   16560:	ldr	r3, [sp, #16]
   16564:	b	160fc <__assert_fail@plt+0x5140>
   16568:	umull	r8, r9, r0, r7
   1656c:	mov	r3, r1
   16570:	mov	r2, r9
   16574:	umlal	r2, r3, ip, r7
   16578:	cmp	r3, #0
   1657c:	bne	166d8 <__assert_fail@plt+0x571c>
   16580:	mov	r6, r8
   16584:	b	164a4 <__assert_fail@plt+0x54e8>
   16588:	umull	r8, r9, ip, r7
   1658c:	mov	r3, r0
   16590:	mov	r2, r9
   16594:	umlal	r2, r3, r1, r7
   16598:	cmp	r3, #0
   1659c:	bne	16720 <__assert_fail@plt+0x5764>
   165a0:	mov	r6, r8
   165a4:	b	16138 <__assert_fail@plt+0x517c>
   165a8:	umull	r8, r9, r2, r7
   165ac:	mov	r1, ip
   165b0:	mov	r0, r9
   165b4:	umlal	r0, r1, r3, r7
   165b8:	cmp	r1, #0
   165bc:	bne	165ec <__assert_fail@plt+0x5630>
   165c0:	mov	ip, r8
   165c4:	mov	r1, r0
   165c8:	b	1611c <__assert_fail@plt+0x5160>
   165cc:	ldr	lr, [sp, #8]
   165d0:	mov	r2, r0
   165d4:	mov	ip, #1
   165d8:	ldr	r3, [sp, #12]
   165dc:	mul	r3, r9, r3
   165e0:	mla	r3, lr, r8, r3
   165e4:	add	r3, r3, r1
   165e8:	b	160fc <__assert_fail@plt+0x5140>
   165ec:	ldr	r1, [sp, #12]
   165f0:	mov	lr, #1
   165f4:	mov	ip, r8
   165f8:	mul	r1, r2, r1
   165fc:	ldr	r2, [sp, #8]
   16600:	mla	r1, r3, r2, r1
   16604:	add	r1, r1, r9
   16608:	b	1611c <__assert_fail@plt+0x5160>
   1660c:	ldrd	r2, [sp, #8]
   16610:	mov	r1, #1
   16614:	mul	r3, r9, r3
   16618:	mov	r9, r4
   1661c:	mla	r8, r2, r8, r3
   16620:	add	r8, r8, r5
   16624:	b	163e0 <__assert_fail@plt+0x5424>
   16628:	mul	r3, r9, r1
   1662c:	mov	ip, #1
   16630:	mla	r8, r7, r8, r3
   16634:	ldrd	r6, [sp, #8]
   16638:	mov	r9, r6
   1663c:	add	r8, r8, r7
   16640:	b	16184 <__assert_fail@plt+0x51c8>
   16644:	movw	r3, #31664	; 0x7bb0
   16648:	movt	r3, #1
   1664c:	movw	r1, #31676	; 0x7bbc
   16650:	movt	r1, #1
   16654:	movw	r0, #31692	; 0x7bcc
   16658:	movt	r0, #1
   1665c:	mov	r2, #85	; 0x55
   16660:	bl	10fbc <__assert_fail@plt>
   16664:	ldr	r3, [sp, #12]
   16668:	mov	r1, #1
   1666c:	mul	r2, r9, r3
   16670:	ldr	r3, [sp, #8]
   16674:	mov	r9, r4
   16678:	mla	r8, r3, r8, r2
   1667c:	add	r8, r8, r5
   16680:	b	16200 <__assert_fail@plt+0x5244>
   16684:	ldrd	r2, [sp, #8]
   16688:	mov	r1, #1
   1668c:	mul	r3, r9, r3
   16690:	mov	r9, r4
   16694:	mla	r8, r2, r8, r3
   16698:	add	r8, r8, r5
   1669c:	b	162f0 <__assert_fail@plt+0x5334>
   166a0:	ldrd	r2, [sp, #8]
   166a4:	mov	r1, #1
   166a8:	mul	r3, r9, r3
   166ac:	mov	r9, r4
   166b0:	mla	r8, r2, r8, r3
   166b4:	add	r8, r8, r5
   166b8:	b	16368 <__assert_fail@plt+0x53ac>
   166bc:	ldrd	r2, [sp, #8]
   166c0:	mov	r1, #1
   166c4:	mul	r3, r9, r3
   166c8:	mov	r9, r4
   166cc:	mla	r8, r2, r8, r3
   166d0:	add	r8, r8, r5
   166d4:	b	16278 <__assert_fail@plt+0x52bc>
   166d8:	ldr	r3, [sp, #12]
   166dc:	mov	r6, r8
   166e0:	mov	r1, #1
   166e4:	mul	r2, r0, r3
   166e8:	ldr	r3, [sp, #8]
   166ec:	mla	r2, ip, r3, r2
   166f0:	add	r2, r2, r9
   166f4:	b	164a4 <__assert_fail@plt+0x54e8>
   166f8:	ldr	r3, [sp, #12]
   166fc:	mov	r1, #1
   16700:	ldr	r2, [sp, #16]
   16704:	mul	ip, r9, r3
   16708:	ldr	r3, [sp, #8]
   1670c:	mov	r0, r2
   16710:	mla	ip, r3, r8, ip
   16714:	ldr	r3, [sp, #20]
   16718:	add	ip, ip, r3
   1671c:	b	16488 <__assert_fail@plt+0x54cc>
   16720:	ldr	r3, [sp, #12]
   16724:	mov	r6, r8
   16728:	mov	r0, #1
   1672c:	mul	r2, ip, r3
   16730:	ldr	r3, [sp, #8]
   16734:	mla	r2, r1, r3, r2
   16738:	add	r2, r2, r9
   1673c:	b	16138 <__assert_fail@plt+0x517c>
   16740:	cmp	r1, #0
   16744:	cmpne	r0, #0
   16748:	beq	16794 <__assert_fail@plt+0x57d8>
   1674c:	strd	r4, [sp, #-16]!
   16750:	umull	r4, r5, r0, r1
   16754:	str	r6, [sp, #8]
   16758:	str	lr, [sp, #12]
   1675c:	adds	r3, r5, #0
   16760:	movne	r3, #1
   16764:	cmp	r4, #0
   16768:	blt	16774 <__assert_fail@plt+0x57b8>
   1676c:	cmp	r3, #0
   16770:	beq	167a0 <__assert_fail@plt+0x57e4>
   16774:	bl	10ef0 <__errno_location@plt>
   16778:	mov	r3, #12
   1677c:	ldrd	r4, [sp]
   16780:	ldr	r6, [sp, #8]
   16784:	add	sp, sp, #12
   16788:	str	r3, [r0]
   1678c:	mov	r0, #0
   16790:	pop	{pc}		; (ldr pc, [sp], #4)
   16794:	mov	r1, #1
   16798:	mov	r0, r1
   1679c:	b	10d28 <calloc@plt>
   167a0:	ldrd	r4, [sp]
   167a4:	ldr	r6, [sp, #8]
   167a8:	ldr	lr, [sp, #12]
   167ac:	add	sp, sp, #16
   167b0:	b	10d28 <calloc@plt>
   167b4:	cmp	r0, #0
   167b8:	beq	167c4 <__assert_fail@plt+0x5808>
   167bc:	blt	167cc <__assert_fail@plt+0x5810>
   167c0:	b	10e6c <malloc@plt>
   167c4:	mov	r0, #1
   167c8:	b	10e6c <malloc@plt>
   167cc:	str	r4, [sp, #-8]!
   167d0:	str	lr, [sp, #4]
   167d4:	bl	10ef0 <__errno_location@plt>
   167d8:	mov	r3, #12
   167dc:	ldr	r4, [sp]
   167e0:	add	sp, sp, #4
   167e4:	str	r3, [r0]
   167e8:	mov	r0, #0
   167ec:	pop	{pc}		; (ldr pc, [sp], #4)
   167f0:	cmp	r0, #0
   167f4:	beq	1681c <__assert_fail@plt+0x5860>
   167f8:	cmp	r1, #0
   167fc:	str	r4, [sp, #-8]!
   16800:	str	lr, [sp, #4]
   16804:	beq	16824 <__assert_fail@plt+0x5868>
   16808:	blt	16838 <__assert_fail@plt+0x587c>
   1680c:	ldr	r4, [sp]
   16810:	ldr	lr, [sp, #4]
   16814:	add	sp, sp, #8
   16818:	b	10de8 <realloc@plt>
   1681c:	mov	r0, r1
   16820:	b	167b4 <__assert_fail@plt+0x57f8>
   16824:	bl	12ae8 <__assert_fail@plt+0x1b2c>
   16828:	ldr	r4, [sp]
   1682c:	add	sp, sp, #4
   16830:	mov	r0, #0
   16834:	pop	{pc}		; (ldr pc, [sp], #4)
   16838:	bl	10ef0 <__errno_location@plt>
   1683c:	mov	r3, #12
   16840:	str	r3, [r0]
   16844:	b	16828 <__assert_fail@plt+0x586c>
   16848:	strd	r4, [sp, #-16]!
   1684c:	mov	r4, r0
   16850:	str	r6, [sp, #8]
   16854:	str	lr, [sp, #12]
   16858:	bl	10e30 <__fpending@plt>
   1685c:	ldr	r5, [r4]
   16860:	mov	r6, r0
   16864:	mov	r0, r4
   16868:	bl	129d4 <__assert_fail@plt+0x1a18>
   1686c:	mov	r4, r0
   16870:	and	r5, r5, #32
   16874:	cmp	r5, #0
   16878:	bne	168b0 <__assert_fail@plt+0x58f4>
   1687c:	cmp	r0, #0
   16880:	beq	1689c <__assert_fail@plt+0x58e0>
   16884:	cmp	r6, #0
   16888:	bne	168c8 <__assert_fail@plt+0x590c>
   1688c:	bl	10ef0 <__errno_location@plt>
   16890:	ldr	r4, [r0]
   16894:	subs	r4, r4, #9
   16898:	mvnne	r4, #0
   1689c:	mov	r0, r4
   168a0:	ldrd	r4, [sp]
   168a4:	ldr	r6, [sp, #8]
   168a8:	add	sp, sp, #12
   168ac:	pop	{pc}		; (ldr pc, [sp], #4)
   168b0:	cmp	r0, #0
   168b4:	bne	168c8 <__assert_fail@plt+0x590c>
   168b8:	bl	10ef0 <__errno_location@plt>
   168bc:	str	r4, [r0]
   168c0:	mvn	r4, #0
   168c4:	b	1689c <__assert_fail@plt+0x58e0>
   168c8:	mvn	r4, #0
   168cc:	b	1689c <__assert_fail@plt+0x58e0>
   168d0:	mov	r0, #14
   168d4:	str	r4, [sp, #-8]!
   168d8:	str	lr, [sp, #4]
   168dc:	bl	10f80 <nl_langinfo@plt>
   168e0:	cmp	r0, #0
   168e4:	beq	16908 <__assert_fail@plt+0x594c>
   168e8:	ldrb	r2, [r0]
   168ec:	movw	r3, #31732	; 0x7bf4
   168f0:	movt	r3, #1
   168f4:	ldr	r4, [sp]
   168f8:	add	sp, sp, #4
   168fc:	cmp	r2, #0
   16900:	moveq	r0, r3
   16904:	pop	{pc}		; (ldr pc, [sp], #4)
   16908:	ldr	r4, [sp]
   1690c:	add	sp, sp, #4
   16910:	movw	r0, #31732	; 0x7bf4
   16914:	movt	r0, #1
   16918:	pop	{pc}		; (ldr pc, [sp], #4)
   1691c:	strd	r4, [sp, #-20]!	; 0xffffffec
   16920:	mov	r5, r2
   16924:	strd	r6, [sp, #8]
   16928:	subs	r6, r0, #0
   1692c:	mov	r7, r1
   16930:	str	lr, [sp, #16]
   16934:	sub	sp, sp, #12
   16938:	addeq	r6, sp, #4
   1693c:	mov	r0, r6
   16940:	bl	10e3c <mbrtowc@plt>
   16944:	cmp	r5, #0
   16948:	cmnne	r0, #3
   1694c:	mov	r4, r0
   16950:	bhi	1696c <__assert_fail@plt+0x59b0>
   16954:	mov	r0, r4
   16958:	add	sp, sp, #12
   1695c:	ldrd	r4, [sp]
   16960:	ldrd	r6, [sp, #8]
   16964:	add	sp, sp, #16
   16968:	pop	{pc}		; (ldr pc, [sp], #4)
   1696c:	mov	r0, #0
   16970:	bl	169c4 <__assert_fail@plt+0x5a08>
   16974:	cmp	r0, #0
   16978:	bne	16954 <__assert_fail@plt+0x5998>
   1697c:	ldrb	r3, [r7]
   16980:	mov	r4, #1
   16984:	str	r3, [r6]
   16988:	b	16954 <__assert_fail@plt+0x5998>
   1698c:	umull	r2, r3, r1, r2
   16990:	cmp	r3, #0
   16994:	bne	169a0 <__assert_fail@plt+0x59e4>
   16998:	mov	r1, r2
   1699c:	b	167f0 <__assert_fail@plt+0x5834>
   169a0:	str	r4, [sp, #-8]!
   169a4:	str	lr, [sp, #4]
   169a8:	bl	10ef0 <__errno_location@plt>
   169ac:	mov	r3, #12
   169b0:	ldr	r4, [sp]
   169b4:	add	sp, sp, #4
   169b8:	str	r3, [r0]
   169bc:	mov	r0, #0
   169c0:	pop	{pc}		; (ldr pc, [sp], #4)
   169c4:	push	{lr}		; (str lr, [sp, #-4]!)
   169c8:	sub	sp, sp, #268	; 0x10c
   169cc:	movw	r2, #257	; 0x101
   169d0:	add	r1, sp, #4
   169d4:	bl	16a1c <__assert_fail@plt+0x5a60>
   169d8:	cmp	r0, #0
   169dc:	movne	r0, #0
   169e0:	bne	16a14 <__assert_fail@plt+0x5a58>
   169e4:	movw	r1, #31740	; 0x7bfc
   169e8:	movt	r1, #1
   169ec:	add	r0, sp, #4
   169f0:	bl	10d40 <strcmp@plt>
   169f4:	cmp	r0, #0
   169f8:	beq	16a14 <__assert_fail@plt+0x5a58>
   169fc:	add	r0, sp, #4
   16a00:	movw	r1, #31744	; 0x7c00
   16a04:	movt	r1, #1
   16a08:	bl	10d40 <strcmp@plt>
   16a0c:	adds	r0, r0, #0
   16a10:	movne	r0, #1
   16a14:	add	sp, sp, #268	; 0x10c
   16a18:	pop	{pc}		; (ldr pc, [sp], #4)
   16a1c:	strd	r4, [sp, #-16]!
   16a20:	mov	r5, r1
   16a24:	mov	r1, #0
   16a28:	mov	r4, r2
   16a2c:	str	r6, [sp, #8]
   16a30:	str	lr, [sp, #12]
   16a34:	bl	10f68 <setlocale@plt>
   16a38:	subs	r6, r0, #0
   16a3c:	beq	16abc <__assert_fail@plt+0x5b00>
   16a40:	bl	10ed8 <strlen@plt>
   16a44:	cmp	r4, r0
   16a48:	bhi	16a68 <__assert_fail@plt+0x5aac>
   16a4c:	cmp	r4, #0
   16a50:	moveq	r0, #34	; 0x22
   16a54:	bne	16a8c <__assert_fail@plt+0x5ad0>
   16a58:	ldrd	r4, [sp]
   16a5c:	ldr	r6, [sp, #8]
   16a60:	add	sp, sp, #12
   16a64:	pop	{pc}		; (ldr pc, [sp], #4)
   16a68:	add	r2, r0, #1
   16a6c:	mov	r1, r6
   16a70:	mov	r0, r5
   16a74:	bl	10d88 <memcpy@plt>
   16a78:	ldrd	r4, [sp]
   16a7c:	mov	r0, #0
   16a80:	ldr	r6, [sp, #8]
   16a84:	add	sp, sp, #12
   16a88:	pop	{pc}		; (ldr pc, [sp], #4)
   16a8c:	sub	r4, r4, #1
   16a90:	mov	r1, r6
   16a94:	mov	r2, r4
   16a98:	mov	r0, r5
   16a9c:	bl	10d88 <memcpy@plt>
   16aa0:	mov	r3, #0
   16aa4:	mov	r0, #34	; 0x22
   16aa8:	strb	r3, [r5, r4]
   16aac:	ldrd	r4, [sp]
   16ab0:	ldr	r6, [sp, #8]
   16ab4:	add	sp, sp, #12
   16ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   16abc:	cmp	r4, #0
   16ac0:	mov	r0, #22
   16ac4:	strbne	r6, [r5]
   16ac8:	ldrd	r4, [sp]
   16acc:	ldr	r6, [sp, #8]
   16ad0:	add	sp, sp, #12
   16ad4:	pop	{pc}		; (ldr pc, [sp], #4)
   16ad8:	mov	r1, #0
   16adc:	b	10f68 <setlocale@plt>
   16ae0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16ae4:	mov	r7, r0
   16ae8:	ldr	r6, [pc, #72]	; 16b38 <__assert_fail@plt+0x5b7c>
   16aec:	ldr	r5, [pc, #72]	; 16b3c <__assert_fail@plt+0x5b80>
   16af0:	add	r6, pc, r6
   16af4:	add	r5, pc, r5
   16af8:	sub	r6, r6, r5
   16afc:	mov	r8, r1
   16b00:	mov	r9, r2
   16b04:	bl	10d08 <calloc@plt-0x20>
   16b08:	asrs	r6, r6, #2
   16b0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b10:	mov	r4, #0
   16b14:	add	r4, r4, #1
   16b18:	ldr	r3, [r5], #4
   16b1c:	mov	r2, r9
   16b20:	mov	r1, r8
   16b24:	mov	r0, r7
   16b28:	blx	r3
   16b2c:	cmp	r6, r4
   16b30:	bne	16b14 <__assert_fail@plt+0x5b58>
   16b34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16b38:	andeq	r1, r1, ip, lsl r4
   16b3c:	andeq	r1, r1, r4, lsl r4
   16b40:	bx	lr
   16b44:	ldr	r3, [pc, #12]	; 16b58 <__assert_fail@plt+0x5b9c>
   16b48:	mov	r1, #0
   16b4c:	add	r3, pc, r3
   16b50:	ldr	r2, [r3]
   16b54:	b	10efc <__cxa_atexit@plt>
   16b58:	andeq	r1, r1, r0, lsr #11

Disassembly of section .fini:

00016b5c <.fini>:
   16b5c:	push	{r3, lr}
   16b60:	pop	{r3, pc}
