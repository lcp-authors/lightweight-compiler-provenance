
../repos/dvidelabs-flatcc-3b39ef7/samples/reflection/bfbs2json:     file format elf32-littlearm


Disassembly of section .init:

0001098c <.init>:
   1098c:	push	{r3, lr}
   10990:	bl	10ac0 <_start@@Base+0x3c>
   10994:	pop	{r3, pc}

Disassembly of section .plt:

00010998 <printf@plt-0x14>:
   10998:	push	{lr}		; (str lr, [sp, #-4]!)
   1099c:	ldr	lr, [pc, #4]	; 109a8 <printf@plt-0x4>
   109a0:	add	lr, pc, lr
   109a4:	ldr	pc, [lr, #8]!
   109a8:	andeq	r2, r1, r8, asr r6

000109ac <printf@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #73728	; 0x12000
   109b4:	ldr	pc, [ip, #1624]!	; 0x658

000109b8 <fopen@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #73728	; 0x12000
   109c0:	ldr	pc, [ip, #1616]!	; 0x650

000109c4 <free@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #73728	; 0x12000
   109cc:	ldr	pc, [ip, #1608]!	; 0x648

000109d0 <ftell@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #73728	; 0x12000
   109d8:	ldr	pc, [ip, #1600]!	; 0x640

000109dc <rewind@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #73728	; 0x12000
   109e4:	ldr	pc, [ip, #1592]!	; 0x638

000109e8 <fwrite@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #73728	; 0x12000
   109f0:	ldr	pc, [ip, #1584]!	; 0x630

000109f4 <puts@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #73728	; 0x12000
   109fc:	ldr	pc, [ip, #1576]!	; 0x628

00010a00 <malloc@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #73728	; 0x12000
   10a08:	ldr	pc, [ip, #1568]!	; 0x620

00010a0c <__libc_start_main@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #73728	; 0x12000
   10a14:	ldr	pc, [ip, #1560]!	; 0x618

00010a18 <__gmon_start__@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #73728	; 0x12000
   10a20:	ldr	pc, [ip, #1552]!	; 0x610

00010a24 <exit@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #73728	; 0x12000
   10a2c:	ldr	pc, [ip, #1544]!	; 0x608

00010a30 <fprintf@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #73728	; 0x12000
   10a38:	ldr	pc, [ip, #1536]!	; 0x600

00010a3c <putchar@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #73728	; 0x12000
   10a44:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a48 <fclose@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #73728	; 0x12000
   10a50:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a54 <fread_unlocked@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #73728	; 0x12000
   10a5c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a60 <fseek@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #73728	; 0x12000
   10a68:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a6c <abort@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #73728	; 0x12000
   10a74:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a78 <__assert_fail@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #73728	; 0x12000
   10a80:	ldr	pc, [ip, #1488]!	; 0x5d0

Disassembly of section .text:

00010a84 <_start@@Base>:
   10a84:	mov	fp, #0
   10a88:	mov	lr, #0
   10a8c:	pop	{r1}		; (ldr r1, [sp], #4)
   10a90:	mov	r2, sp
   10a94:	push	{r2}		; (str r2, [sp, #-4]!)
   10a98:	push	{r0}		; (str r0, [sp, #-4]!)
   10a9c:	ldr	ip, [pc, #16]	; 10ab4 <_start@@Base+0x30>
   10aa0:	push	{ip}		; (str ip, [sp, #-4]!)
   10aa4:	ldr	r0, [pc, #12]	; 10ab8 <_start@@Base+0x34>
   10aa8:	ldr	r3, [pc, #12]	; 10abc <_start@@Base+0x38>
   10aac:	bl	10a0c <__libc_start_main@plt>
   10ab0:	bl	10a6c <abort@plt>
   10ab4:	andeq	r1, r1, r8, ror #19
   10ab8:	andeq	r1, r1, r4, lsl r9
   10abc:	andeq	r1, r1, r8, lsl #19
   10ac0:	ldr	r3, [pc, #20]	; 10adc <_start@@Base+0x58>
   10ac4:	ldr	r2, [pc, #20]	; 10ae0 <_start@@Base+0x5c>
   10ac8:	add	r3, pc, r3
   10acc:	ldr	r2, [r3, r2]
   10ad0:	cmp	r2, #0
   10ad4:	bxeq	lr
   10ad8:	b	10a18 <__gmon_start__@plt>
   10adc:	andeq	r2, r1, r0, lsr r5
   10ae0:	andeq	r0, r0, r4, asr r0
   10ae4:	ldr	r0, [pc, #24]	; 10b04 <_start@@Base+0x80>
   10ae8:	ldr	r3, [pc, #24]	; 10b08 <_start@@Base+0x84>
   10aec:	cmp	r3, r0
   10af0:	bxeq	lr
   10af4:	ldr	r3, [pc, #16]	; 10b0c <_start@@Base+0x88>
   10af8:	cmp	r3, #0
   10afc:	bxeq	lr
   10b00:	bx	r3
   10b04:	andeq	r3, r2, r0, rrx
   10b08:	andeq	r3, r2, r0, rrx
   10b0c:	andeq	r0, r0, r0
   10b10:	ldr	r0, [pc, #36]	; 10b3c <_start@@Base+0xb8>
   10b14:	ldr	r1, [pc, #36]	; 10b40 <_start@@Base+0xbc>
   10b18:	sub	r1, r1, r0
   10b1c:	asr	r1, r1, #2
   10b20:	add	r1, r1, r1, lsr #31
   10b24:	asrs	r1, r1, #1
   10b28:	bxeq	lr
   10b2c:	ldr	r3, [pc, #16]	; 10b44 <_start@@Base+0xc0>
   10b30:	cmp	r3, #0
   10b34:	bxeq	lr
   10b38:	bx	r3
   10b3c:	andeq	r3, r2, r0, rrx
   10b40:	andeq	r3, r2, r0, rrx
   10b44:	andeq	r0, r0, r0
   10b48:	push	{r4, lr}
   10b4c:	ldr	r4, [pc, #24]	; 10b6c <_start@@Base+0xe8>
   10b50:	ldrb	r3, [r4]
   10b54:	cmp	r3, #0
   10b58:	popne	{r4, pc}
   10b5c:	bl	10ae4 <_start@@Base+0x60>
   10b60:	mov	r3, #1
   10b64:	strb	r3, [r4]
   10b68:	pop	{r4, pc}
   10b6c:	andeq	r3, r2, r4, rrx
   10b70:	b	10b10 <_start@@Base+0x8c>

00010b74 <print_type@@Base>:
   10b74:	push	{r4, sl, fp, lr}
   10b78:	add	fp, sp, #8
   10b7c:	mov	r4, r0
   10b80:	mov	r0, #123	; 0x7b
   10b84:	bl	10a3c <putchar@plt>
   10b88:	cmp	r4, #0
   10b8c:	beq	10cfc <print_type@@Base+0x188>
   10b90:	ldr	r0, [r4]
   10b94:	mov	r2, r4
   10b98:	mov	r1, #1
   10b9c:	ldrh	r3, [r2, -r0]!
   10ba0:	rsb	r0, r0, #0
   10ba4:	cmp	r3, #6
   10ba8:	bcc	10bf8 <print_type@@Base+0x84>
   10bac:	ldrh	r2, [r2, #4]
   10bb0:	cmp	r2, #0
   10bb4:	beq	10bf8 <print_type@@Base+0x84>
   10bb8:	add	r0, r4, r2
   10bbc:	ldrsb	r0, [r0]
   10bc0:	cmp	r0, #16
   10bc4:	bhi	10bd8 <print_type@@Base+0x64>
   10bc8:	movw	r1, #8792	; 0x2258
   10bcc:	movt	r1, #1
   10bd0:	ldr	r1, [r1, r0, lsl #2]
   10bd4:	b	10be0 <print_type@@Base+0x6c>
   10bd8:	movw	r1, #7267	; 0x1c63
   10bdc:	movt	r1, #1
   10be0:	movw	r0, #6648	; 0x19f8
   10be4:	movt	r0, #1
   10be8:	bl	109ac <printf@plt>
   10bec:	ldr	r0, [r4]
   10bf0:	mov	r1, #0
   10bf4:	rsb	r0, r0, #0
   10bf8:	mov	r2, r4
   10bfc:	ldrh	r3, [r2, r0]!
   10c00:	cmp	r3, #8
   10c04:	bcc	10c90 <print_type@@Base+0x11c>
   10c08:	ldrh	r2, [r2, #6]
   10c0c:	cmp	r2, #0
   10c10:	beq	10c90 <print_type@@Base+0x11c>
   10c14:	cmp	r1, #0
   10c18:	bne	10c2c <print_type@@Base+0xb8>
   10c1c:	mov	r0, #44	; 0x2c
   10c20:	bl	10a3c <putchar@plt>
   10c24:	ldr	r0, [r4]
   10c28:	rsb	r0, r0, #0
   10c2c:	mov	r2, r4
   10c30:	movw	r1, #7647	; 0x1ddf
   10c34:	ldrh	r0, [r2, r0]!	; <UNPREDICTABLE>
   10c38:	movt	r1, #1
   10c3c:	cmp	r0, #6
   10c40:	bcc	10c78 <print_type@@Base+0x104>
   10c44:	ldrh	r0, [r2, #4]
   10c48:	cmp	r0, #0
   10c4c:	beq	10c78 <print_type@@Base+0x104>
   10c50:	add	r0, r4, r0
   10c54:	ldrsb	r0, [r0]
   10c58:	cmp	r0, #16
   10c5c:	bhi	10c70 <print_type@@Base+0xfc>
   10c60:	movw	r1, #8792	; 0x2258
   10c64:	movt	r1, #1
   10c68:	ldr	r1, [r1, r0, lsl #2]
   10c6c:	b	10c78 <print_type@@Base+0x104>
   10c70:	movw	r1, #7267	; 0x1c63
   10c74:	movt	r1, #1
   10c78:	movw	r0, #6665	; 0x1a09
   10c7c:	movt	r0, #1
   10c80:	bl	109ac <printf@plt>
   10c84:	ldr	r0, [r4]
   10c88:	mov	r1, #0
   10c8c:	rsb	r0, r0, #0
   10c90:	mov	r2, r4
   10c94:	ldrh	r3, [r2, r0]!
   10c98:	cmp	r3, #10
   10c9c:	bcc	10cf0 <print_type@@Base+0x17c>
   10ca0:	ldrh	r2, [r2, #8]
   10ca4:	cmp	r2, #0
   10ca8:	beq	10cf0 <print_type@@Base+0x17c>
   10cac:	cmp	r1, #0
   10cb0:	bne	10cc4 <print_type@@Base+0x150>
   10cb4:	mov	r0, #44	; 0x2c
   10cb8:	bl	10a3c <putchar@plt>
   10cbc:	ldr	r0, [r4]
   10cc0:	rsb	r0, r0, #0
   10cc4:	mov	r2, r4
   10cc8:	mvn	r1, #0
   10ccc:	ldrh	r0, [r2, r0]!	; <UNPREDICTABLE>
   10cd0:	cmp	r0, #10
   10cd4:	bcc	10ce4 <print_type@@Base+0x170>
   10cd8:	ldrh	r0, [r2, #8]
   10cdc:	cmp	r0, #0
   10ce0:	ldrne	r1, [r4, r0]
   10ce4:	movw	r0, #6680	; 0x1a18
   10ce8:	movt	r0, #1
   10cec:	bl	109ac <printf@plt>
   10cf0:	mov	r0, #125	; 0x7d
   10cf4:	pop	{r4, sl, fp, lr}
   10cf8:	b	10a3c <putchar@plt>
   10cfc:	movw	r0, #7449	; 0x1d19
   10d00:	movw	r1, #7487	; 0x1d3f
   10d04:	movw	r3, #7581	; 0x1d9d
   10d08:	mov	r2, #147	; 0x93
   10d0c:	movt	r0, #1
   10d10:	movt	r1, #1
   10d14:	movt	r3, #1
   10d18:	bl	10a78 <__assert_fail@plt>

00010d1c <print_object@@Base>:
   10d1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10d20:	add	fp, sp, #28
   10d24:	sub	sp, sp, #4
   10d28:	cmp	r0, #0
   10d2c:	beq	11144 <print_object@@Base+0x428>
   10d30:	ldr	r1, [r0]
   10d34:	mov	r2, r0
   10d38:	ldrh	r1, [r2, -r1]!	; <UNPREDICTABLE>
   10d3c:	cmp	r1, #8
   10d40:	bcc	11138 <print_object@@Base+0x41c>
   10d44:	ldrh	r5, [r2, #6]
   10d48:	cmp	r5, #0
   10d4c:	beq	11138 <print_object@@Base+0x41c>
   10d50:	ldrh	r2, [r2, #4]
   10d54:	cmp	r2, #0
   10d58:	beq	11164 <print_object@@Base+0x448>
   10d5c:	mov	r1, r0
   10d60:	mov	r4, r0
   10d64:	str	r0, [sp]
   10d68:	ldr	r0, [r1, r2]!
   10d6c:	ldr	r9, [r4, r5]!
   10d70:	add	r0, r1, r0
   10d74:	add	r1, r0, #4
   10d78:	movw	r0, #6691	; 0x1a23
   10d7c:	movt	r0, #1
   10d80:	bl	109ac <printf@plt>
   10d84:	movw	r0, #6704	; 0x1a30
   10d88:	movt	r0, #1
   10d8c:	bl	109ac <printf@plt>
   10d90:	ldr	r0, [r4, r9]
   10d94:	cmp	r0, #0
   10d98:	beq	11008 <print_object@@Base+0x2ec>
   10d9c:	ldr	r2, [sp]
   10da0:	add	r1, r9, r5
   10da4:	movw	r5, #6716	; 0x1a3c
   10da8:	mov	r7, #0
   10dac:	movt	r5, #1
   10db0:	add	r1, r1, r2
   10db4:	add	sl, r1, #24
   10db8:	cmp	r7, #0
   10dbc:	bne	10de8 <print_object@@Base+0xcc>
   10dc0:	b	10df4 <print_object@@Base+0xd8>
   10dc4:	mov	r0, #125	; 0x7d
   10dc8:	bl	10a3c <putchar@plt>
   10dcc:	ldr	r0, [r4, r9]
   10dd0:	add	r7, r7, #1
   10dd4:	add	sl, sl, #4
   10dd8:	cmp	r7, r0
   10ddc:	bcs	11008 <print_object@@Base+0x2ec>
   10de0:	cmp	r7, #0
   10de4:	beq	10df4 <print_object@@Base+0xd8>
   10de8:	mov	r0, #44	; 0x2c
   10dec:	bl	10a3c <putchar@plt>
   10df0:	ldr	r0, [r4, r9]
   10df4:	cmp	r0, r7
   10df8:	bls	11118 <print_object@@Base+0x3fc>
   10dfc:	ldr	r6, [sl, #-20]	; 0xffffffec
   10e00:	add	r8, sl, r6
   10e04:	ldr	r0, [r8, #-20]	; 0xffffffec
   10e08:	sub	r0, r6, r0
   10e0c:	add	r0, sl, r0
   10e10:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10e14:	cmp	r1, #6
   10e18:	bcc	110d8 <print_object@@Base+0x3bc>
   10e1c:	ldrh	r0, [r0, #-16]
   10e20:	cmp	r0, #0
   10e24:	beq	110d8 <print_object@@Base+0x3bc>
   10e28:	add	r1, r6, r0
   10e2c:	add	r1, sl, r1
   10e30:	ldr	r1, [r1, #-20]	; 0xffffffec
   10e34:	add	r1, r1, r6
   10e38:	add	r0, r1, r0
   10e3c:	add	r0, sl, r0
   10e40:	sub	r1, r0, #16
   10e44:	mov	r0, r5
   10e48:	bl	109ac <printf@plt>
   10e4c:	ldr	r0, [r8, #-20]	; 0xffffffec
   10e50:	sub	r0, r6, r0
   10e54:	add	r0, sl, r0
   10e58:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10e5c:	cmp	r1, #8
   10e60:	bcc	110f8 <print_object@@Base+0x3dc>
   10e64:	ldrh	r0, [r0, #-14]
   10e68:	cmp	r0, #0
   10e6c:	beq	110f8 <print_object@@Base+0x3dc>
   10e70:	add	r1, r6, r0
   10e74:	add	r1, sl, r1
   10e78:	ldr	r1, [r1, #-20]	; 0xffffffec
   10e7c:	add	r1, r1, r6
   10e80:	add	r0, r1, r0
   10e84:	add	r0, sl, r0
   10e88:	sub	r0, r0, #20
   10e8c:	bl	10b74 <print_type@@Base>
   10e90:	ldr	r0, [r8, #-20]	; 0xffffffec
   10e94:	sub	r1, r6, r0
   10e98:	rsb	r0, r0, #0
   10e9c:	add	r1, sl, r1
   10ea0:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10ea4:	cmp	r2, #10
   10ea8:	bcc	10ed8 <print_object@@Base+0x1bc>
   10eac:	ldrh	r1, [r1, #-12]
   10eb0:	cmp	r1, #0
   10eb4:	beq	10ed8 <print_object@@Base+0x1bc>
   10eb8:	add	r0, r6, r1
   10ebc:	add	r0, sl, r0
   10ec0:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10ec4:	movw	r0, #6737	; 0x1a51
   10ec8:	movt	r0, #1
   10ecc:	bl	109ac <printf@plt>
   10ed0:	ldr	r0, [r8, #-20]	; 0xffffffec
   10ed4:	rsb	r0, r0, #0
   10ed8:	add	r1, r0, r6
   10edc:	add	r1, sl, r1
   10ee0:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10ee4:	cmp	r2, #14
   10ee8:	bcc	10f18 <print_object@@Base+0x1fc>
   10eec:	ldrh	r1, [r1, #-8]
   10ef0:	cmp	r1, #0
   10ef4:	beq	10f18 <print_object@@Base+0x1fc>
   10ef8:	add	r0, r6, r1
   10efc:	add	r0, sl, r0
   10f00:	ldrd	r2, [r0, #-20]	; 0xffffffec
   10f04:	movw	r0, #6747	; 0x1a5b
   10f08:	movt	r0, #1
   10f0c:	bl	109ac <printf@plt>
   10f10:	ldr	r0, [r8, #-20]	; 0xffffffec
   10f14:	rsb	r0, r0, #0
   10f18:	add	r1, r0, r6
   10f1c:	add	r1, sl, r1
   10f20:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10f24:	cmp	r2, #16
   10f28:	bcc	10f5c <print_object@@Base+0x240>
   10f2c:	ldrh	r1, [r1, #-6]
   10f30:	cmp	r1, #0
   10f34:	beq	10f5c <print_object@@Base+0x240>
   10f38:	add	r0, r6, r1
   10f3c:	add	r0, sl, r0
   10f40:	vldr	d16, [r0, #-20]	; 0xffffffec
   10f44:	movw	r0, #6771	; 0x1a73
   10f48:	movt	r0, #1
   10f4c:	vmov	r2, r3, d16
   10f50:	bl	109ac <printf@plt>
   10f54:	ldr	r0, [r8, #-20]	; 0xffffffec
   10f58:	rsb	r0, r0, #0
   10f5c:	add	r1, r0, r6
   10f60:	add	r1, sl, r1
   10f64:	ldrh	r2, [r1, #-20]	; 0xffffffec
   10f68:	cmp	r2, #20
   10f6c:	bcc	10fb4 <print_object@@Base+0x298>
   10f70:	ldrh	r1, [r1, #-2]
   10f74:	cmp	r1, #0
   10f78:	beq	10fb4 <print_object@@Base+0x298>
   10f7c:	add	r0, r6, r1
   10f80:	movw	r1, #6809	; 0x1a99
   10f84:	add	r0, sl, r0
   10f88:	movt	r1, #1
   10f8c:	ldrb	r0, [r0, #-20]	; 0xffffffec
   10f90:	cmp	r0, #0
   10f94:	movw	r0, #6814	; 0x1a9e
   10f98:	movt	r0, #1
   10f9c:	moveq	r1, r0
   10fa0:	movw	r0, #6794	; 0x1a8a
   10fa4:	movt	r0, #1
   10fa8:	bl	109ac <printf@plt>
   10fac:	ldr	r0, [r8, #-20]	; 0xffffffec
   10fb0:	rsb	r0, r0, #0
   10fb4:	add	r0, r0, r6
   10fb8:	add	r0, sl, r0
   10fbc:	ldrh	r1, [r0, #-20]	; 0xffffffec
   10fc0:	cmp	r1, #22
   10fc4:	bcc	10dc4 <print_object@@Base+0xa8>
   10fc8:	ldrh	r0, [r0]
   10fcc:	cmp	r0, #0
   10fd0:	beq	10dc4 <print_object@@Base+0xa8>
   10fd4:	add	r0, r6, r0
   10fd8:	movw	r1, #6809	; 0x1a99
   10fdc:	add	r0, sl, r0
   10fe0:	movt	r1, #1
   10fe4:	ldrb	r0, [r0, #-20]	; 0xffffffec
   10fe8:	cmp	r0, #0
   10fec:	movw	r0, #6814	; 0x1a9e
   10ff0:	movt	r0, #1
   10ff4:	moveq	r1, r0
   10ff8:	movw	r0, #6820	; 0x1aa4
   10ffc:	movt	r0, #1
   11000:	bl	109ac <printf@plt>
   11004:	b	10dc4 <print_object@@Base+0xa8>
   11008:	mov	r0, #93	; 0x5d
   1100c:	bl	10a3c <putchar@plt>
   11010:	ldr	r4, [sp]
   11014:	ldr	r0, [r4]
   11018:	mov	r1, r4
   1101c:	ldrh	r2, [r1, -r0]!
   11020:	rsb	r0, r0, #0
   11024:	cmp	r2, #10
   11028:	bcc	11068 <print_object@@Base+0x34c>
   1102c:	ldrh	r1, [r1, #8]
   11030:	cmp	r1, #0
   11034:	beq	11068 <print_object@@Base+0x34c>
   11038:	ldrb	r0, [r4, r1]
   1103c:	movw	r2, #6814	; 0x1a9e
   11040:	movw	r1, #6809	; 0x1a99
   11044:	movt	r2, #1
   11048:	movt	r1, #1
   1104c:	cmp	r0, #0
   11050:	movw	r0, #6830	; 0x1aae
   11054:	movt	r0, #1
   11058:	moveq	r1, r2
   1105c:	bl	109ac <printf@plt>
   11060:	ldr	r0, [r4]
   11064:	rsb	r0, r0, #0
   11068:	mov	r1, r4
   1106c:	ldrh	r2, [r1, r0]!
   11070:	cmp	r2, #12
   11074:	bcc	1109c <print_object@@Base+0x380>
   11078:	ldrh	r1, [r1, #10]
   1107c:	cmp	r1, #0
   11080:	beq	1109c <print_object@@Base+0x380>
   11084:	ldr	r1, [r4, r1]
   11088:	movw	r0, #6846	; 0x1abe
   1108c:	movt	r0, #1
   11090:	bl	109ac <printf@plt>
   11094:	ldr	r0, [r4]
   11098:	rsb	r0, r0, #0
   1109c:	mov	r1, r4
   110a0:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   110a4:	cmp	r0, #14
   110a8:	bcc	110c8 <print_object@@Base+0x3ac>
   110ac:	ldrh	r0, [r1, #12]
   110b0:	cmp	r0, #0
   110b4:	beq	110c8 <print_object@@Base+0x3ac>
   110b8:	ldr	r1, [r4, r0]
   110bc:	movw	r0, #6861	; 0x1acd
   110c0:	movt	r0, #1
   110c4:	bl	109ac <printf@plt>
   110c8:	mov	r0, #125	; 0x7d
   110cc:	sub	sp, fp, #28
   110d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110d4:	b	10a3c <putchar@plt>
   110d8:	movw	r0, #7799	; 0x1e77
   110dc:	movw	r1, #7487	; 0x1d3f
   110e0:	movw	r3, #8039	; 0x1f67
   110e4:	mov	r2, #195	; 0xc3
   110e8:	movt	r0, #1
   110ec:	movt	r1, #1
   110f0:	movt	r3, #1
   110f4:	bl	10a78 <__assert_fail@plt>
   110f8:	movw	r0, #7799	; 0x1e77
   110fc:	movw	r1, #7487	; 0x1d3f
   11100:	movw	r3, #8108	; 0x1fac
   11104:	mov	r2, #201	; 0xc9
   11108:	movt	r0, #1
   1110c:	movt	r1, #1
   11110:	movt	r3, #1
   11114:	bl	10a78 <__assert_fail@plt>
   11118:	movw	r0, #7903	; 0x1edf
   1111c:	movw	r1, #7487	; 0x1d3f
   11120:	movw	r3, #7958	; 0x1f16
   11124:	mov	r2, #192	; 0xc0
   11128:	movt	r0, #1
   1112c:	movt	r1, #1
   11130:	movt	r3, #1
   11134:	bl	10a78 <__assert_fail@plt>
   11138:	movw	r0, #7799	; 0x1e77
   1113c:	movt	r0, #1
   11140:	b	1114c <print_object@@Base+0x430>
   11144:	movw	r0, #7449	; 0x1d19
   11148:	movt	r0, #1
   1114c:	movw	r1, #7487	; 0x1d3f
   11150:	movw	r3, #7724	; 0x1e2c
   11154:	mov	r2, #224	; 0xe0
   11158:	movt	r1, #1
   1115c:	movt	r3, #1
   11160:	bl	10a78 <__assert_fail@plt>
   11164:	movw	r0, #7799	; 0x1e77
   11168:	movw	r1, #7487	; 0x1d3f
   1116c:	movw	r3, #7832	; 0x1e98
   11170:	mov	r2, #218	; 0xda
   11174:	movt	r0, #1
   11178:	movt	r1, #1
   1117c:	movt	r3, #1
   11180:	bl	10a78 <__assert_fail@plt>

00011184 <print_enum@@Base>:
   11184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11188:	add	fp, sp, #28
   1118c:	sub	sp, sp, #4
   11190:	cmp	r0, #0
   11194:	beq	11484 <print_enum@@Base+0x300>
   11198:	ldr	r1, [r0]
   1119c:	mov	r4, r0
   111a0:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   111a4:	cmp	r1, #6
   111a8:	bcc	11438 <print_enum@@Base+0x2b4>
   111ac:	ldrh	r0, [r0, #4]
   111b0:	cmp	r0, #0
   111b4:	beq	11438 <print_enum@@Base+0x2b4>
   111b8:	mov	r1, r4
   111bc:	ldr	r0, [r1, r0]!
   111c0:	add	r0, r1, r0
   111c4:	add	r1, r0, #4
   111c8:	movw	r0, #6691	; 0x1a23
   111cc:	movt	r0, #1
   111d0:	bl	109ac <printf@plt>
   111d4:	ldr	r1, [r4]
   111d8:	mov	r0, r4
   111dc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   111e0:	cmp	r1, #8
   111e4:	bcc	11444 <print_enum@@Base+0x2c0>
   111e8:	ldrh	r5, [r0, #6]
   111ec:	cmp	r5, #0
   111f0:	beq	11444 <print_enum@@Base+0x2c0>
   111f4:	movw	r0, #6876	; 0x1adc
   111f8:	str	r4, [sp]
   111fc:	ldr	r7, [r4, r5]!
   11200:	movt	r0, #1
   11204:	bl	109ac <printf@plt>
   11208:	ldr	r0, [r4, r7]
   1120c:	cmp	r0, #0
   11210:	beq	1137c <print_enum@@Base+0x1f8>
   11214:	ldr	r1, [sp]
   11218:	add	r0, r7, r5
   1121c:	movw	r5, #6691	; 0x1a23
   11220:	mov	r8, #0
   11224:	movt	r5, #1
   11228:	add	r0, r0, r1
   1122c:	add	r6, r0, #12
   11230:	ldr	r9, [r6, #-8]
   11234:	cmp	r8, #0
   11238:	bne	1126c <print_enum@@Base+0xe8>
   1123c:	b	11274 <print_enum@@Base+0xf0>
   11240:	bl	10d1c <print_object@@Base>
   11244:	mov	r0, #125	; 0x7d
   11248:	bl	10a3c <putchar@plt>
   1124c:	ldr	r0, [r4, r7]
   11250:	add	r8, r8, #1
   11254:	add	r6, r6, #4
   11258:	cmp	r8, r0
   1125c:	bcs	1137c <print_enum@@Base+0x1f8>
   11260:	ldr	r9, [r6, #-8]
   11264:	cmp	r8, #0
   11268:	beq	11274 <print_enum@@Base+0xf0>
   1126c:	mov	r0, #44	; 0x2c
   11270:	bl	10a3c <putchar@plt>
   11274:	add	sl, r6, r9
   11278:	ldr	r0, [sl, #-8]
   1127c:	sub	r0, r9, r0
   11280:	add	r0, r6, r0
   11284:	ldrh	r1, [r0, #-8]
   11288:	cmp	r1, #6
   1128c:	bcc	11418 <print_enum@@Base+0x294>
   11290:	ldrh	r0, [r0, #-4]
   11294:	cmp	r0, #0
   11298:	beq	11418 <print_enum@@Base+0x294>
   1129c:	add	r1, r9, r0
   112a0:	add	r1, r6, r1
   112a4:	ldr	r1, [r1, #-8]
   112a8:	add	r1, r1, r9
   112ac:	add	r0, r1, r0
   112b0:	add	r0, r6, r0
   112b4:	sub	r1, r0, #4
   112b8:	mov	r0, r5
   112bc:	bl	109ac <printf@plt>
   112c0:	ldr	r0, [sl, #-8]
   112c4:	sub	r1, r9, r0
   112c8:	rsb	r0, r0, #0
   112cc:	add	r1, r6, r1
   112d0:	ldrh	r2, [r1, #-8]
   112d4:	cmp	r2, #8
   112d8:	bcc	11308 <print_enum@@Base+0x184>
   112dc:	ldrh	r1, [r1, #-2]
   112e0:	cmp	r1, #0
   112e4:	beq	11308 <print_enum@@Base+0x184>
   112e8:	add	r0, r9, r1
   112ec:	add	r0, r6, r0
   112f0:	ldrd	r2, [r0, #-8]
   112f4:	movw	r0, #6888	; 0x1ae8
   112f8:	movt	r0, #1
   112fc:	bl	109ac <printf@plt>
   11300:	ldr	r0, [sl, #-8]
   11304:	rsb	r0, r0, #0
   11308:	add	r0, r0, r9
   1130c:	add	r0, r6, r0
   11310:	ldrh	r1, [r0, #-8]
   11314:	cmp	r1, #10
   11318:	bcc	11244 <print_enum@@Base+0xc0>
   1131c:	ldrh	r0, [r0]
   11320:	cmp	r0, #0
   11324:	beq	11244 <print_enum@@Base+0xc0>
   11328:	movw	r0, #6902	; 0x1af6
   1132c:	movt	r0, #1
   11330:	bl	109ac <printf@plt>
   11334:	ldr	r0, [sl, #-8]
   11338:	sub	r0, r9, r0
   1133c:	add	r1, r6, r0
   11340:	mov	r0, #0
   11344:	ldrh	r2, [r1, #-8]
   11348:	cmp	r2, #10
   1134c:	bcc	11240 <print_enum@@Base+0xbc>
   11350:	ldrh	r1, [r1]
   11354:	cmp	r1, #0
   11358:	beq	11240 <print_enum@@Base+0xbc>
   1135c:	add	r0, r9, r1
   11360:	add	r0, r6, r0
   11364:	ldr	r0, [r0, #-8]
   11368:	add	r0, r0, r9
   1136c:	add	r0, r0, r1
   11370:	add	r0, r6, r0
   11374:	sub	r0, r0, #8
   11378:	b	11240 <print_enum@@Base+0xbc>
   1137c:	mov	r0, #93	; 0x5d
   11380:	bl	10a3c <putchar@plt>
   11384:	ldr	r4, [sp]
   11388:	ldr	r1, [r4]
   1138c:	mov	r0, r4
   11390:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11394:	cmp	r1, #10
   11398:	bcc	113d0 <print_enum@@Base+0x24c>
   1139c:	ldrh	r0, [r0, #8]
   113a0:	cmp	r0, #0
   113a4:	beq	113d0 <print_enum@@Base+0x24c>
   113a8:	ldrb	r0, [r4, r0]
   113ac:	movw	r2, #6814	; 0x1a9e
   113b0:	movw	r1, #6809	; 0x1a99
   113b4:	movt	r2, #1
   113b8:	movt	r1, #1
   113bc:	cmp	r0, #0
   113c0:	movw	r0, #6913	; 0x1b01
   113c4:	movt	r0, #1
   113c8:	moveq	r1, r2
   113cc:	bl	109ac <printf@plt>
   113d0:	movw	r0, #6928	; 0x1b10
   113d4:	movt	r0, #1
   113d8:	bl	109ac <printf@plt>
   113dc:	ldr	r1, [r4]
   113e0:	mov	r0, r4
   113e4:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   113e8:	cmp	r1, #12
   113ec:	bcc	11464 <print_enum@@Base+0x2e0>
   113f0:	ldrh	r0, [r0, #10]
   113f4:	cmp	r0, #0
   113f8:	beq	11464 <print_enum@@Base+0x2e0>
   113fc:	ldr	r0, [r4, r0]!
   11400:	add	r0, r4, r0
   11404:	bl	10b74 <print_type@@Base>
   11408:	mov	r0, #125	; 0x7d
   1140c:	sub	sp, fp, #28
   11410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11414:	b	10a3c <putchar@plt>
   11418:	movw	r0, #7799	; 0x1e77
   1141c:	movw	r1, #7487	; 0x1d3f
   11420:	movw	r3, #8320	; 0x2080
   11424:	mov	r2, #159	; 0x9f
   11428:	movt	r0, #1
   1142c:	movt	r1, #1
   11430:	movt	r3, #1
   11434:	bl	10a78 <__assert_fail@plt>
   11438:	movw	r0, #7799	; 0x1e77
   1143c:	movt	r0, #1
   11440:	b	1148c <print_enum@@Base+0x308>
   11444:	movw	r0, #7799	; 0x1e77
   11448:	movw	r1, #7487	; 0x1d3f
   1144c:	movw	r3, #8247	; 0x2037
   11450:	mov	r2, #183	; 0xb7
   11454:	movt	r0, #1
   11458:	movt	r1, #1
   1145c:	movt	r3, #1
   11460:	bl	10a78 <__assert_fail@plt>
   11464:	movw	r0, #7799	; 0x1e77
   11468:	movw	r1, #7487	; 0x1d3f
   1146c:	movw	r3, #8393	; 0x20c9
   11470:	mov	r2, #185	; 0xb9
   11474:	movt	r0, #1
   11478:	movt	r1, #1
   1147c:	movt	r3, #1
   11480:	bl	10a78 <__assert_fail@plt>
   11484:	movw	r0, #7449	; 0x1d19
   11488:	movt	r0, #1
   1148c:	movw	r1, #7487	; 0x1d3f
   11490:	movw	r3, #8180	; 0x1ff4
   11494:	mov	r2, #177	; 0xb1
   11498:	movt	r1, #1
   1149c:	movt	r3, #1
   114a0:	bl	10a78 <__assert_fail@plt>

000114a4 <print_schema@@Base>:
   114a4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   114a8:	add	fp, sp, #24
   114ac:	cmp	r0, #0
   114b0:	beq	1174c <print_schema@@Base+0x2a8>
   114b4:	ldr	r1, [r0]
   114b8:	mov	r8, r0
   114bc:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   114c0:	cmp	r1, #6
   114c4:	bcc	11720 <print_schema@@Base+0x27c>
   114c8:	ldrh	r4, [r0, #4]
   114cc:	cmp	r4, #0
   114d0:	beq	11720 <print_schema@@Base+0x27c>
   114d4:	mov	r5, r8
   114d8:	mov	r0, #123	; 0x7b
   114dc:	ldr	r9, [r5, r4]!
   114e0:	bl	10a3c <putchar@plt>
   114e4:	movw	r0, #6948	; 0x1b24
   114e8:	movt	r0, #1
   114ec:	bl	109ac <printf@plt>
   114f0:	ldr	r0, [r5, r9]
   114f4:	cmp	r0, #0
   114f8:	beq	11550 <print_schema@@Base+0xac>
   114fc:	add	r1, r9, r4
   11500:	mov	r4, #0
   11504:	mov	r6, #0
   11508:	add	r1, r1, r8
   1150c:	add	r7, r1, #4
   11510:	cmp	r6, #0
   11514:	beq	11524 <print_schema@@Base+0x80>
   11518:	mov	r0, #44	; 0x2c
   1151c:	bl	10a3c <putchar@plt>
   11520:	ldr	r0, [r5, r9]
   11524:	cmp	r0, r6
   11528:	bls	116e0 <print_schema@@Base+0x23c>
   1152c:	ldr	r0, [r7, r6, lsl #2]
   11530:	add	r0, r4, r0
   11534:	add	r0, r7, r0
   11538:	bl	10d1c <print_object@@Base>
   1153c:	ldr	r0, [r5, r9]
   11540:	add	r6, r6, #1
   11544:	add	r4, r4, #4
   11548:	cmp	r6, r0
   1154c:	bcc	11510 <print_schema@@Base+0x6c>
   11550:	mov	r0, #93	; 0x5d
   11554:	bl	10a3c <putchar@plt>
   11558:	ldr	r1, [r8]
   1155c:	mov	r0, r8
   11560:	ldrh	r1, [r0, -r1]!	; <UNPREDICTABLE>
   11564:	cmp	r1, #8
   11568:	bcc	1172c <print_schema@@Base+0x288>
   1156c:	ldrh	r4, [r0, #6]
   11570:	cmp	r4, #0
   11574:	beq	1172c <print_schema@@Base+0x288>
   11578:	mov	r5, r8
   1157c:	movw	r0, #6960	; 0x1b30
   11580:	ldr	r9, [r5, r4]!
   11584:	movt	r0, #1
   11588:	bl	109ac <printf@plt>
   1158c:	ldr	r0, [r5, r9]
   11590:	cmp	r0, #0
   11594:	beq	115ec <print_schema@@Base+0x148>
   11598:	add	r1, r9, r4
   1159c:	mov	r4, #0
   115a0:	mov	r6, #0
   115a4:	add	r1, r1, r8
   115a8:	add	r7, r1, #4
   115ac:	cmp	r6, #0
   115b0:	beq	115c0 <print_schema@@Base+0x11c>
   115b4:	mov	r0, #44	; 0x2c
   115b8:	bl	10a3c <putchar@plt>
   115bc:	ldr	r0, [r5, r9]
   115c0:	cmp	r0, r6
   115c4:	bls	11700 <print_schema@@Base+0x25c>
   115c8:	ldr	r0, [r7, r6, lsl #2]
   115cc:	add	r0, r4, r0
   115d0:	add	r0, r7, r0
   115d4:	bl	11184 <print_enum@@Base>
   115d8:	ldr	r0, [r5, r9]
   115dc:	add	r6, r6, #1
   115e0:	add	r4, r4, #4
   115e4:	cmp	r6, r0
   115e8:	bcc	115ac <print_schema@@Base+0x108>
   115ec:	mov	r0, #93	; 0x5d
   115f0:	bl	10a3c <putchar@plt>
   115f4:	ldr	r0, [r8]
   115f8:	mov	r1, r8
   115fc:	ldrh	r2, [r1, -r0]!
   11600:	rsb	r0, r0, #0
   11604:	cmp	r2, #10
   11608:	bcc	1163c <print_schema@@Base+0x198>
   1160c:	ldrh	r1, [r1, #8]
   11610:	cmp	r1, #0
   11614:	beq	1163c <print_schema@@Base+0x198>
   11618:	mov	r0, r8
   1161c:	ldr	r1, [r0, r1]!
   11620:	add	r0, r0, r1
   11624:	add	r1, r0, #4
   11628:	movw	r0, #6971	; 0x1b3b
   1162c:	movt	r0, #1
   11630:	bl	109ac <printf@plt>
   11634:	ldr	r0, [r8]
   11638:	rsb	r0, r0, #0
   1163c:	mov	r1, r8
   11640:	ldrh	r2, [r1, r0]!
   11644:	cmp	r2, #12
   11648:	bcc	1167c <print_schema@@Base+0x1d8>
   1164c:	ldrh	r1, [r1, #10]
   11650:	cmp	r1, #0
   11654:	beq	1167c <print_schema@@Base+0x1d8>
   11658:	mov	r0, r8
   1165c:	ldr	r1, [r0, r1]!
   11660:	add	r0, r0, r1
   11664:	add	r1, r0, #4
   11668:	movw	r0, #6990	; 0x1b4e
   1166c:	movt	r0, #1
   11670:	bl	109ac <printf@plt>
   11674:	ldr	r0, [r8]
   11678:	rsb	r0, r0, #0
   1167c:	mov	r1, r8
   11680:	ldrh	r0, [r1, r0]!	; <UNPREDICTABLE>
   11684:	cmp	r0, #14
   11688:	bcc	116d0 <print_schema@@Base+0x22c>
   1168c:	ldrh	r0, [r1, #12]
   11690:	cmp	r0, #0
   11694:	beq	116d0 <print_schema@@Base+0x22c>
   11698:	movw	r0, #7007	; 0x1b5f
   1169c:	movt	r0, #1
   116a0:	bl	109ac <printf@plt>
   116a4:	ldr	r0, [r8]
   116a8:	mov	r1, r8
   116ac:	ldrh	r2, [r1, -r0]!
   116b0:	mov	r0, #0
   116b4:	cmp	r2, #14
   116b8:	bcc	116cc <print_schema@@Base+0x228>
   116bc:	ldrh	r1, [r1, #12]
   116c0:	cmp	r1, #0
   116c4:	ldrne	r0, [r8, r1]!
   116c8:	addne	r0, r8, r0
   116cc:	bl	10d1c <print_object@@Base>
   116d0:	movw	r0, #8789	; 0x2255
   116d4:	movt	r0, #1
   116d8:	pop	{r4, r5, r6, r7, r8, r9, fp, lr}
   116dc:	b	109f4 <puts@plt>
   116e0:	movw	r0, #7903	; 0x1edf
   116e4:	movw	r1, #7487	; 0x1d3f
   116e8:	movw	r3, #8551	; 0x2167
   116ec:	mov	r2, #215	; 0xd7
   116f0:	movt	r0, #1
   116f4:	movt	r1, #1
   116f8:	movt	r3, #1
   116fc:	bl	10a78 <__assert_fail@plt>
   11700:	movw	r0, #7903	; 0x1edf
   11704:	movw	r1, #7487	; 0x1d3f
   11708:	movw	r3, #8708	; 0x2204
   1170c:	mov	r2, #174	; 0xae
   11710:	movt	r0, #1
   11714:	movt	r1, #1
   11718:	movt	r3, #1
   1171c:	bl	10a78 <__assert_fail@plt>
   11720:	movw	r0, #7799	; 0x1e77
   11724:	movt	r0, #1
   11728:	b	11754 <print_schema@@Base+0x2b0>
   1172c:	movw	r0, #7799	; 0x1e77
   11730:	movw	r1, #7487	; 0x1d3f
   11734:	movw	r3, #8635	; 0x21bb
   11738:	mov	r2, #238	; 0xee
   1173c:	movt	r0, #1
   11740:	movt	r1, #1
   11744:	movt	r3, #1
   11748:	bl	10a78 <__assert_fail@plt>
   1174c:	movw	r0, #7449	; 0x1d19
   11750:	movt	r0, #1
   11754:	movw	r1, #7487	; 0x1d3f
   11758:	movw	r3, #8474	; 0x211a
   1175c:	mov	r2, #237	; 0xed
   11760:	movt	r1, #1
   11764:	movt	r3, #1
   11768:	bl	10a78 <__assert_fail@plt>

0001176c <load_and_dump_schema@@Base>:
   1176c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   11770:	add	fp, sp, #24
   11774:	movw	r1, #8786	; 0x2252
   11778:	mov	r8, r0
   1177c:	movt	r1, #1
   11780:	bl	109b8 <fopen@plt>
   11784:	cmp	r0, #0
   11788:	beq	11864 <load_and_dump_schema@@Base+0xf8>
   1178c:	mov	r1, #0
   11790:	mov	r2, #2
   11794:	mov	r6, r0
   11798:	bl	10a60 <fseek@plt>
   1179c:	mov	r0, r6
   117a0:	bl	109d0 <ftell@plt>
   117a4:	mov	r7, r0
   117a8:	movw	r0, #10000	; 0x2710
   117ac:	cmp	r7, r0
   117b0:	bhi	11850 <load_and_dump_schema@@Base+0xe4>
   117b4:	mov	r0, r6
   117b8:	bl	109dc <rewind@plt>
   117bc:	cmp	r7, #0
   117c0:	mov	r0, r7
   117c4:	movweq	r0, #1
   117c8:	bl	10a00 <malloc@plt>
   117cc:	cmp	r0, #0
   117d0:	beq	11850 <load_and_dump_schema@@Base+0xe4>
   117d4:	mov	r4, r0
   117d8:	mov	r1, #0
   117dc:	mov	r5, r1
   117e0:	add	r0, r4, r1
   117e4:	sub	r2, r7, r1
   117e8:	mov	r1, #1
   117ec:	mov	r3, r6
   117f0:	bl	10a54 <fread_unlocked@plt>
   117f4:	add	r1, r0, r5
   117f8:	cmp	r0, #0
   117fc:	bne	117dc <load_and_dump_schema@@Base+0x70>
   11800:	mov	r0, r6
   11804:	bl	10a48 <fclose@plt>
   11808:	cmp	r7, r5
   1180c:	bne	1185c <load_and_dump_schema@@Base+0xf0>
   11810:	cmp	r7, #11
   11814:	bls	1188c <load_and_dump_schema@@Base+0x120>
   11818:	mov	r5, r4
   1181c:	movw	r0, #17986	; 0x4642
   11820:	ldr	r6, [r5, #4]!
   11824:	movt	r0, #21314	; 0x5342
   11828:	cmp	r6, r0
   1182c:	bne	118ac <load_and_dump_schema@@Base+0x140>
   11830:	ldr	r0, [r4]
   11834:	add	r0, r4, r0
   11838:	bl	114a4 <print_schema@@Base>
   1183c:	mov	r5, #0
   11840:	mov	r0, r4
   11844:	bl	109c4 <free@plt>
   11848:	mov	r0, r5
   1184c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   11850:	mov	r0, r6
   11854:	bl	10a48 <fclose@plt>
   11858:	b	11864 <load_and_dump_schema@@Base+0xf8>
   1185c:	mov	r0, r4
   11860:	bl	109c4 <free@plt>
   11864:	movw	r0, #12384	; 0x3060
   11868:	movw	r1, #7022	; 0x1b6e
   1186c:	mov	r2, r8
   11870:	movt	r0, #2
   11874:	movt	r1, #1
   11878:	ldr	r0, [r0]
   1187c:	bl	10a30 <fprintf@plt>
   11880:	mvn	r5, #0
   11884:	mov	r0, r5
   11888:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1188c:	movw	r0, #12384	; 0x3060
   11890:	movw	r1, #7063	; 0x1b97
   11894:	mov	r2, r8
   11898:	movt	r0, #2
   1189c:	movt	r1, #1
   118a0:	ldr	r0, [r0]
   118a4:	bl	10a30 <fprintf@plt>
   118a8:	b	11900 <load_and_dump_schema@@Base+0x194>
   118ac:	ldr	r1, [r4, #8]
   118b0:	cmp	r1, r0
   118b4:	bne	118e0 <load_and_dump_schema@@Base+0x174>
   118b8:	movw	r0, #12384	; 0x3060
   118bc:	mov	r1, #40	; 0x28
   118c0:	mov	r2, #1
   118c4:	movt	r0, #2
   118c8:	ldr	r3, [r0]
   118cc:	movw	r0, #7095	; 0x1bb7
   118d0:	movt	r0, #1
   118d4:	bl	109e8 <fwrite@plt>
   118d8:	add	r0, r5, r6
   118dc:	b	11838 <load_and_dump_schema@@Base+0xcc>
   118e0:	movw	r0, #12384	; 0x3060
   118e4:	mov	r1, #27
   118e8:	mov	r2, #1
   118ec:	movt	r0, #2
   118f0:	ldr	r3, [r0]
   118f4:	movw	r0, #7136	; 0x1be0
   118f8:	movt	r0, #1
   118fc:	bl	109e8 <fwrite@plt>
   11900:	mvn	r5, #0
   11904:	mov	r0, r4
   11908:	bl	109c4 <free@plt>
   1190c:	mov	r0, r5
   11910:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}

00011914 <main@@Base>:
   11914:	push	{r4, sl, fp, lr}
   11918:	add	fp, sp, #8
   1191c:	cmp	r0, #2
   11920:	bne	11930 <main@@Base+0x1c>
   11924:	ldr	r0, [r1, #4]
   11928:	pop	{r4, sl, fp, lr}
   1192c:	b	1176c <load_and_dump_schema@@Base>
   11930:	movw	r4, #12384	; 0x3060
   11934:	movw	r0, #7164	; 0x1bfc
   11938:	mov	r1, #28
   1193c:	mov	r2, #1
   11940:	movt	r4, #2
   11944:	movt	r0, #1
   11948:	ldr	r3, [r4]
   1194c:	bl	109e8 <fwrite@plt>
   11950:	ldr	r3, [r4]
   11954:	movw	r0, #7193	; 0x1c19
   11958:	mov	r1, #74	; 0x4a
   1195c:	mov	r2, #1
   11960:	movt	r0, #1
   11964:	bl	109e8 <fwrite@plt>
   11968:	ldr	r3, [r4]
   1196c:	movw	r0, #7268	; 0x1c64
   11970:	mov	r1, #180	; 0xb4
   11974:	mov	r2, #1
   11978:	movt	r0, #1
   1197c:	bl	109e8 <fwrite@plt>
   11980:	mvn	r0, #0
   11984:	bl	10a24 <exit@plt>

00011988 <__libc_csu_init@@Base>:
   11988:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1198c:	mov	r7, r0
   11990:	ldr	r6, [pc, #72]	; 119e0 <__libc_csu_init@@Base+0x58>
   11994:	ldr	r5, [pc, #72]	; 119e4 <__libc_csu_init@@Base+0x5c>
   11998:	add	r6, pc, r6
   1199c:	add	r5, pc, r5
   119a0:	sub	r6, r6, r5
   119a4:	mov	r8, r1
   119a8:	mov	r9, r2
   119ac:	bl	1098c <printf@plt-0x20>
   119b0:	asrs	r6, r6, #2
   119b4:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   119b8:	mov	r4, #0
   119bc:	add	r4, r4, #1
   119c0:	ldr	r3, [r5], #4
   119c4:	mov	r2, r9
   119c8:	mov	r1, r8
   119cc:	mov	r0, r7
   119d0:	blx	r3
   119d4:	cmp	r6, r4
   119d8:	bne	119bc <__libc_csu_init@@Base+0x34>
   119dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   119e0:	andeq	r1, r1, ip, ror #10
   119e4:	andeq	r1, r1, r4, ror #10

000119e8 <__libc_csu_fini@@Base>:
   119e8:	bx	lr

Disassembly of section .fini:

000119ec <.fini>:
   119ec:	push	{r3, lr}
   119f0:	pop	{r3, pc}
