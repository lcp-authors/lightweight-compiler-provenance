
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

0001112c <.init>:
   1112c:	push	{r3, lr}
   11130:	bl	13404 <__assert_fail@plt+0x1f28>
   11134:	pop	{r3, pc}

Disassembly of section .plt:

00011138 <calloc@plt-0x14>:
   11138:	push	{lr}		; (str lr, [sp, #-4]!)
   1113c:	ldr	lr, [pc, #4]	; 11148 <calloc@plt-0x4>
   11140:	add	lr, pc, lr
   11144:	ldr	pc, [lr, #8]!
   11148:			; <UNDEFINED> instruction: 0x0001ceb8

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3768]!	; 0xeb8

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3760]!	; 0xeb0

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3752]!	; 0xea8

00011170 <fsync@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3744]!	; 0xea0

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3736]!	; 0xe98

00011188 <posix_fadvise64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3728]!	; 0xe90

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3720]!	; 0xe88

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3704]!	; 0xe78

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3696]!	; 0xe70

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3688]!	; 0xe68

000111d0 <clock_gettime@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3680]!	; 0xe60

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3672]!	; 0xe58

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3664]!	; 0xe50

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3656]!	; 0xe48

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #28, 20	; 0x1c000
   11208:	ldr	pc, [ip, #3648]!	; 0xe40

0001120c <ftruncate64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #28, 20	; 0x1c000
   11214:	ldr	pc, [ip, #3640]!	; 0xe38

00011218 <memcmp@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #28, 20	; 0x1c000
   11220:	ldr	pc, [ip, #3632]!	; 0xe30

00011224 <fputc_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #28, 20	; 0x1c000
   1122c:	ldr	pc, [ip, #3624]!	; 0xe28

00011230 <dcgettext@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #28, 20	; 0x1c000
   11238:	ldr	pc, [ip, #3616]!	; 0xe20

0001123c <dup2@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #28, 20	; 0x1c000
   11244:	ldr	pc, [ip, #3608]!	; 0xe18

00011248 <realloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #28, 20	; 0x1c000
   11250:	ldr	pc, [ip, #3600]!	; 0xe10

00011254 <sigismember@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #28, 20	; 0x1c000
   1125c:	ldr	pc, [ip, #3592]!	; 0xe08

00011260 <textdomain@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #28, 20	; 0x1c000
   11268:	ldr	pc, [ip, #3584]!	; 0xe00

0001126c <iswprint@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #28, 20	; 0x1c000
   11274:	ldr	pc, [ip, #3576]!	; 0xdf8

00011278 <__fxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #28, 20	; 0x1c000
   11280:	ldr	pc, [ip, #3568]!	; 0xdf0

00011284 <sigaction@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #28, 20	; 0x1c000
   1128c:	ldr	pc, [ip, #3560]!	; 0xde8

00011290 <__memcpy_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #28, 20	; 0x1c000
   11298:	ldr	pc, [ip, #3552]!	; 0xde0

0001129c <fwrite@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #28, 20	; 0x1c000
   112a4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a8 <lseek64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #28, 20	; 0x1c000
   112b0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b4 <__ctype_get_mb_cur_max@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #28, 20	; 0x1c000
   112bc:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c0 <__fpending@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #28, 20	; 0x1c000
   112c8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #28, 20	; 0x1c000
   112d4:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #28, 20	; 0x1c000
   112e0:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #28, 20	; 0x1c000
   112ec:	ldr	pc, [ip, #3496]!	; 0xda8

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #28, 20	; 0x1c000
   112f8:	ldr	pc, [ip, #3488]!	; 0xda0

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #28, 20	; 0x1c000
   11304:	ldr	pc, [ip, #3480]!	; 0xd98

00011308 <error_at_line@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #28, 20	; 0x1c000
   11310:	ldr	pc, [ip, #3472]!	; 0xd90

00011314 <sigaddset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #28, 20	; 0x1c000
   1131c:	ldr	pc, [ip, #3464]!	; 0xd88

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #28, 20	; 0x1c000
   11328:	ldr	pc, [ip, #3456]!	; 0xd80

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #28, 20	; 0x1c000
   11334:	ldr	pc, [ip, #3448]!	; 0xd78

00011338 <__ctype_tolower_loc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #28, 20	; 0x1c000
   11340:	ldr	pc, [ip, #3440]!	; 0xd70

00011344 <__ctype_toupper_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #28, 20	; 0x1c000
   1134c:	ldr	pc, [ip, #3432]!	; 0xd68

00011350 <__gmon_start__@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #28, 20	; 0x1c000
   11358:	ldr	pc, [ip, #3424]!	; 0xd60

0001135c <getopt_long@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #28, 20	; 0x1c000
   11364:	ldr	pc, [ip, #3416]!	; 0xd58

00011368 <__ctype_b_loc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #28, 20	; 0x1c000
   11370:	ldr	pc, [ip, #3408]!	; 0xd50

00011374 <exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #28, 20	; 0x1c000
   1137c:	ldr	pc, [ip, #3400]!	; 0xd48

00011380 <strlen@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #28, 20	; 0x1c000
   11388:	ldr	pc, [ip, #3392]!	; 0xd40

0001138c <strchr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #28, 20	; 0x1c000
   11394:	ldr	pc, [ip, #3384]!	; 0xd38

00011398 <getpagesize@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #28, 20	; 0x1c000
   113a0:	ldr	pc, [ip, #3376]!	; 0xd30

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #28, 20	; 0x1c000
   113ac:	ldr	pc, [ip, #3368]!	; 0xd28

000113b0 <__sprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #28, 20	; 0x1c000
   113b8:	ldr	pc, [ip, #3360]!	; 0xd20

000113bc <__cxa_atexit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #28, 20	; 0x1c000
   113c4:	ldr	pc, [ip, #3352]!	; 0xd18

000113c8 <__vasprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #28, 20	; 0x1c000
   113d0:	ldr	pc, [ip, #3344]!	; 0xd10

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #28, 20	; 0x1c000
   113dc:	ldr	pc, [ip, #3336]!	; 0xd08

000113e0 <__printf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #28, 20	; 0x1c000
   113e8:	ldr	pc, [ip, #3328]!	; 0xd00

000113ec <write@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #28, 20	; 0x1c000
   113f4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f8 <fileno@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #28, 20	; 0x1c000
   11400:	ldr	pc, [ip, #3312]!	; 0xcf0

00011404 <__fprintf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #28, 20	; 0x1c000
   1140c:	ldr	pc, [ip, #3304]!	; 0xce8

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #28, 20	; 0x1c000
   11418:	ldr	pc, [ip, #3296]!	; 0xce0

0001141c <fseeko64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #28, 20	; 0x1c000
   11424:	ldr	pc, [ip, #3288]!	; 0xcd8

00011428 <fcntl64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3280]!	; 0xcd0

00011434 <__overflow@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3264]!	; 0xcc0

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3256]!	; 0xcb8

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3248]!	; 0xcb0

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #3240]!	; 0xca8

00011470 <localeconv@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #28, 20	; 0x1c000
   11478:	ldr	pc, [ip, #3232]!	; 0xca0

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #28, 20	; 0x1c000
   11484:	ldr	pc, [ip, #3224]!	; 0xc98

00011488 <aligned_alloc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #28, 20	; 0x1c000
   11490:	ldr	pc, [ip, #3216]!	; 0xc90

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #28, 20	; 0x1c000
   1149c:	ldr	pc, [ip, #3208]!	; 0xc88

000114a0 <fdatasync@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #28, 20	; 0x1c000
   114a8:	ldr	pc, [ip, #3200]!	; 0xc80

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #28, 20	; 0x1c000
   114b4:	ldr	pc, [ip, #3192]!	; 0xc78

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #28, 20	; 0x1c000
   114c0:	ldr	pc, [ip, #3184]!	; 0xc70

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #28, 20	; 0x1c000
   114cc:	ldr	pc, [ip, #3176]!	; 0xc68

000114d0 <__snprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #28, 20	; 0x1c000
   114d8:	ldr	pc, [ip, #3168]!	; 0xc60

000114dc <__assert_fail@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #28, 20	; 0x1c000
   114e4:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114e8 <.text>:
   114e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   114ec:	strd	r6, [sp, #8]
   114f0:	mov	r7, r1
   114f4:	strd	r8, [sp, #16]
   114f8:	mov	r9, r0
   114fc:	movw	r0, #52456	; 0xcce8
   11500:	movt	r0, #1
   11504:	strd	sl, [sp, #24]
   11508:	str	lr, [sp, #32]
   1150c:	sub	sp, sp, #244	; 0xf4
   11510:	bl	112f0 <getenv@plt>
   11514:	mov	r4, r0
   11518:	ldr	r0, [pc, #4076]	; 1250c <__assert_fail@plt+0x1030>
   1151c:	bl	1144c <sigemptyset@plt>
   11520:	cmp	r4, #0
   11524:	beq	12b94 <__assert_fail@plt+0x16b8>
   11528:	mov	r1, #0
   1152c:	add	r2, sp, #96	; 0x60
   11530:	mov	r0, #2
   11534:	bl	11284 <sigaction@plt>
   11538:	ldr	r3, [sp, #96]	; 0x60
   1153c:	cmp	r3, #1
   11540:	beq	11550 <__assert_fail@plt+0x74>
   11544:	mov	r1, #2
   11548:	ldr	r0, [pc, #4028]	; 1250c <__assert_fail@plt+0x1030>
   1154c:	bl	11314 <sigaddset@plt>
   11550:	mov	r2, #128	; 0x80
   11554:	ldr	r1, [pc, #4016]	; 1250c <__assert_fail@plt+0x1030>
   11558:	add	r0, sp, #100	; 0x64
   1155c:	bl	111e8 <memcpy@plt>
   11560:	mov	r1, #10
   11564:	ldr	r0, [pc, #4000]	; 1250c <__assert_fail@plt+0x1030>
   11568:	bl	11254 <sigismember@plt>
   1156c:	cmp	r0, #0
   11570:	bne	127e0 <__assert_fail@plt+0x1304>
   11574:	mov	r1, #2
   11578:	ldr	r0, [pc, #3980]	; 1250c <__assert_fail@plt+0x1030>
   1157c:	bl	11254 <sigismember@plt>
   11580:	cmp	r0, #0
   11584:	bne	12808 <__assert_fail@plt+0x132c>
   11588:	ldr	r0, [r7]
   1158c:	mov	r6, #0
   11590:	movw	r4, #57832	; 0xe1e8
   11594:	movt	r4, #2
   11598:	movw	fp, #57680	; 0xe150
   1159c:	movt	fp, #2
   115a0:	bl	16dc8 <__assert_fail@plt+0x58ec>
   115a4:	movw	r1, #51464	; 0xc908
   115a8:	movt	r1, #1
   115ac:	mov	r0, #6
   115b0:	bl	11440 <setlocale@plt>
   115b4:	movw	r1, #52472	; 0xccf8
   115b8:	movt	r1, #1
   115bc:	movw	r0, #51904	; 0xcac0
   115c0:	movt	r0, #1
   115c4:	bl	1147c <bindtextdomain@plt>
   115c8:	movw	r0, #51904	; 0xcac0
   115cc:	movt	r0, #1
   115d0:	bl	11260 <textdomain@plt>
   115d4:	movw	r0, #15792	; 0x3db0
   115d8:	movt	r0, #1
   115dc:	bl	1b5cc <__assert_fail@plt+0xa0f0>
   115e0:	bl	11398 <getpagesize@plt>
   115e4:	movw	r3, #57720	; 0xe178
   115e8:	movt	r3, #2
   115ec:	str	r6, [sp, #24]
   115f0:	ldr	r1, [r3]
   115f4:	movw	ip, #52496	; 0xcd10
   115f8:	movt	ip, #1
   115fc:	movw	r2, #52508	; 0xcd1c
   11600:	movt	r2, #1
   11604:	str	r0, [r4, #104]	; 0x68
   11608:	movw	r3, #52524	; 0xcd2c
   1160c:	movt	r3, #1
   11610:	movw	r0, #17176	; 0x4318
   11614:	movt	r0, #1
   11618:	str	ip, [sp, #20]
   1161c:	mov	ip, #1
   11620:	str	r1, [sp]
   11624:	mov	r1, r7
   11628:	str	ip, [sp, #4]
   1162c:	str	r0, [sp, #8]
   11630:	mov	r0, r9
   11634:	str	r3, [sp, #12]
   11638:	movw	r3, #51904	; 0xcac0
   1163c:	movt	r3, #1
   11640:	str	r2, [sp, #16]
   11644:	movw	r2, #48500	; 0xbd74
   11648:	movt	r2, #1
   1164c:	bl	16ce0 <__assert_fail@plt+0x5804>
   11650:	add	r3, r4, #304	; 0x130
   11654:	strb	r6, [fp, #24]
   11658:	sub	r5, r3, #1
   1165c:	mov	r3, r6
   11660:	mov	r2, r5
   11664:	strb	r3, [r2, #1]!
   11668:	add	r3, r3, #1
   1166c:	cmp	r3, #256	; 0x100
   11670:	bne	11664 <__assert_fail@plt+0x188>
   11674:	movw	r3, #57808	; 0xe1d0
   11678:	movt	r3, #2
   1167c:	ldr	r6, [r3]
   11680:	mov	r3, #0
   11684:	str	r3, [sp, #92]	; 0x5c
   11688:	cmp	r9, r6
   1168c:	ble	12030 <__assert_fail@plt+0xb54>
   11690:	mov	r2, #0
   11694:	mov	r3, #0
   11698:	add	r7, r7, r6, lsl #2
   1169c:	strd	r2, [sp, #48]	; 0x30
   116a0:	strd	r2, [sp, #56]	; 0x38
   116a4:	mvn	r2, #0
   116a8:	mvn	r3, #-2147483648	; 0x80000000
   116ac:	strd	r2, [sp, #40]	; 0x28
   116b0:	ldr	sl, [r7], #4
   116b4:	mov	r1, #61	; 0x3d
   116b8:	mov	r0, sl
   116bc:	bl	1138c <strchr@plt>
   116c0:	subs	r8, r0, #0
   116c4:	beq	130a8 <__assert_fail@plt+0x1bcc>
   116c8:	movw	r2, #52560	; 0xcd50
   116cc:	movt	r2, #1
   116d0:	add	r8, r8, #1
   116d4:	mov	r1, sl
   116d8:	mov	r3, #105	; 0x69
   116dc:	ldrb	r0, [r1], #1
   116e0:	cmp	r0, r3
   116e4:	bne	11ea8 <__assert_fail@plt+0x9cc>
   116e8:	ldrb	r3, [r2, #1]!
   116ec:	cmp	r3, #0
   116f0:	bne	116dc <__assert_fail@plt+0x200>
   116f4:	ldrb	r3, [r1]
   116f8:	cmp	r3, #61	; 0x3d
   116fc:	cmpne	r3, #0
   11700:	bne	11ea8 <__assert_fail@plt+0x9cc>
   11704:	str	r8, [r4, #128]	; 0x80
   11708:	add	r6, r6, #1
   1170c:	cmp	r9, r6
   11710:	bne	116b0 <__assert_fail@plt+0x1d4>
   11714:	ldr	r3, [sp, #92]	; 0x5c
   11718:	cmp	r3, #0
   1171c:	strne	r3, [r4, #108]	; 0x6c
   11720:	strne	r3, [r4, #120]	; 0x78
   11724:	beq	1204c <__assert_fail@plt+0xb70>
   11728:	ldr	r3, [r4, #292]	; 0x124
   1172c:	cmp	r3, #0
   11730:	beq	12020 <__assert_fail@plt+0xb44>
   11734:	ldr	r2, [r4, #268]	; 0x10c
   11738:	mov	r3, #4096	; 0x1000
   1173c:	movt	r3, #16
   11740:	ldr	r7, [r4, #276]	; 0x114
   11744:	tst	r2, r3
   11748:	orrne	r3, r2, r3
   1174c:	strne	r3, [r4, #268]	; 0x10c
   11750:	ands	r9, r7, #1
   11754:	bne	13184 <__assert_fail@plt+0x1ca8>
   11758:	ldr	r6, [r4, #268]	; 0x10c
   1175c:	ands	r8, r6, #16
   11760:	bne	132ac <__assert_fail@plt+0x1dd0>
   11764:	tst	r7, #12
   11768:	bne	13254 <__assert_fail@plt+0x1d78>
   1176c:	tst	r6, #8
   11770:	ldrd	r0, [sp, #48]	; 0x30
   11774:	bne	11ffc <__assert_fail@plt+0xb20>
   11778:	orrs	r3, r0, r1
   1177c:	ldrne	r3, [pc, #3432]	; 124ec <__assert_fail@plt+0x1010>
   11780:	strdne	r0, [r3]
   11784:	tst	r6, #4
   11788:	mvn	r2, #0
   1178c:	ldrd	r0, [sp, #40]	; 0x28
   11790:	mvn	r3, #-2147483648	; 0x80000000
   11794:	beq	12728 <__assert_fail@plt+0x124c>
   11798:	cmp	r1, r3
   1179c:	cmpeq	r0, r2
   117a0:	beq	117b8 <__assert_fail@plt+0x2dc>
   117a4:	ldr	r2, [r4, #108]	; 0x6c
   117a8:	asr	r3, r2, #31
   117ac:	bl	1b2e0 <__assert_fail@plt+0x9e04>
   117b0:	strd	r0, [fp, #32]
   117b4:	str	r2, [r4, #572]	; 0x23c
   117b8:	tst	r7, #16
   117bc:	beq	12714 <__assert_fail@plt+0x1238>
   117c0:	ldrd	r0, [sp, #56]	; 0x38
   117c4:	orrs	r3, r0, r1
   117c8:	beq	117e4 <__assert_fail@plt+0x308>
   117cc:	ldr	r2, [r4, #120]	; 0x78
   117d0:	asr	r3, r2, #31
   117d4:	bl	1b2e0 <__assert_fail@plt+0x9e04>
   117d8:	ldr	ip, [pc, #3368]	; 12508 <__assert_fail@plt+0x102c>
   117dc:	strd	r0, [ip], #16
   117e0:	strd	r2, [ip, #-8]
   117e4:	ldr	sl, [r4, #116]	; 0x74
   117e8:	and	r1, r6, #1
   117ec:	and	r3, sl, #2048	; 0x800
   117f0:	orrs	r3, r3, r1
   117f4:	bne	125f8 <__assert_fail@plt+0x111c>
   117f8:	ldr	r3, [pc, #3308]	; 124ec <__assert_fail@plt+0x1010>
   117fc:	ldrd	r2, [r3]
   11800:	orrs	r3, r2, r3
   11804:	beq	128ec <__assert_fail@plt+0x1410>
   11808:	mov	r2, #1
   1180c:	movw	r3, #19652	; 0x4cc4
   11810:	movt	r3, #1
   11814:	strb	r2, [r4, #272]	; 0x110
   11818:	and	r9, sl, #7
   1181c:	bic	r2, r6, #1
   11820:	str	r3, [r4, #300]	; 0x12c
   11824:	mov	r3, r9
   11828:	sub	r9, r9, #1
   1182c:	ands	r9, r9, r3
   11830:	str	r2, [r4, #268]	; 0x10c
   11834:	bne	131cc <__assert_fail@plt+0x1cf0>
   11838:	and	r3, sl, #24
   1183c:	sub	r8, r3, #1
   11840:	ands	r8, r8, r3
   11844:	movwne	r1, #52800	; 0xce40
   11848:	movtne	r1, #1
   1184c:	bne	131d4 <__assert_fail@plt+0x1cf8>
   11850:	and	r3, sl, #96	; 0x60
   11854:	sub	r9, r3, #1
   11858:	ands	r9, r9, r3
   1185c:	movwne	r1, #52836	; 0xce64
   11860:	movtne	r1, #1
   11864:	bne	131d4 <__assert_fail@plt+0x1cf8>
   11868:	and	r3, sl, #12288	; 0x3000
   1186c:	sub	r8, r3, #1
   11870:	ands	r8, r8, r3
   11874:	movwne	r1, #52868	; 0xce84
   11878:	movtne	r1, #1
   1187c:	bne	131d4 <__assert_fail@plt+0x1cf8>
   11880:	mov	r2, #2
   11884:	movt	r2, #1
   11888:	and	r0, r6, r2
   1188c:	and	r2, r2, r7
   11890:	sub	r1, r2, #1
   11894:	sub	r3, r0, #1
   11898:	and	r3, r3, r0
   1189c:	and	r2, r2, r1
   118a0:	orrs	r1, r3, r2
   118a4:	movwne	r1, #52900	; 0xcea4
   118a8:	movtne	r1, #1
   118ac:	bne	131d4 <__assert_fail@plt+0x1cf8>
   118b0:	tst	r6, #2
   118b4:	beq	118e4 <__assert_fail@plt+0x408>
   118b8:	ldrd	r2, [fp, #32]
   118bc:	mov	r0, #1
   118c0:	bic	r6, r6, #3
   118c4:	str	r6, [r4, #268]	; 0x10c
   118c8:	strb	r0, [r4, #592]	; 0x250
   118cc:	orrs	r3, r2, r3
   118d0:	ldreq	r3, [r4, #572]	; 0x23c
   118d4:	movne	r3, r1
   118d8:	clzeq	r3, r3
   118dc:	lsreq	r3, r3, #5
   118e0:	strb	r3, [r4, #88]	; 0x58
   118e4:	tst	r7, #2
   118e8:	beq	11918 <__assert_fail@plt+0x43c>
   118ec:	ldrd	r2, [fp, #32]
   118f0:	mov	r1, #1
   118f4:	bic	r7, r7, #2
   118f8:	str	r7, [r4, #276]	; 0x114
   118fc:	strb	r1, [r4, #281]	; 0x119
   11900:	orrs	r3, r2, r3
   11904:	ldreq	r3, [r4, #572]	; 0x23c
   11908:	movne	r3, #0
   1190c:	clzeq	r3, r3
   11910:	lsreq	r3, r3, #5
   11914:	strb	r3, [r4, #89]	; 0x59
   11918:	tst	sl, #1
   1191c:	beq	11954 <__assert_fail@plt+0x478>
   11920:	ldr	r3, [pc, #3032]	; 12500 <__assert_fail@plt+0x1024>
   11924:	movw	r1, #46576	; 0xb5f0
   11928:	movt	r1, #1
   1192c:	add	r0, r3, #255	; 0xff
   11930:	mov	r3, r5
   11934:	ldrb	r2, [r3, #1]!
   11938:	add	r2, r1, r2
   1193c:	cmp	r0, r3
   11940:	ldrb	r2, [r2, #696]	; 0x2b8
   11944:	strb	r2, [r3]
   11948:	bne	11934 <__assert_fail@plt+0x458>
   1194c:	mov	r3, #1
   11950:	strb	r3, [r4, #593]	; 0x251
   11954:	tst	sl, #64	; 0x40
   11958:	beq	126e0 <__assert_fail@plt+0x1204>
   1195c:	bl	11344 <__ctype_toupper_loc@plt>
   11960:	ldr	r3, [pc, #2968]	; 12500 <__assert_fail@plt+0x1024>
   11964:	ldr	r0, [r0]
   11968:	add	r1, r3, #255	; 0xff
   1196c:	mov	r3, r5
   11970:	ldrb	r2, [r3, #1]!
   11974:	ldr	r2, [r0, r2, lsl #2]
   11978:	cmp	r1, r3
   1197c:	strb	r2, [r3]
   11980:	bne	11970 <__assert_fail@plt+0x494>
   11984:	mov	r3, #1
   11988:	strb	r3, [r4, #593]	; 0x251
   1198c:	tst	sl, #2
   11990:	beq	126ac <__assert_fail@plt+0x11d0>
   11994:	ldr	r3, [pc, #2916]	; 12500 <__assert_fail@plt+0x1024>
   11998:	movw	r1, #46576	; 0xb5f0
   1199c:	movt	r1, #1
   119a0:	add	r2, r3, #255	; 0xff
   119a4:	ldrb	r3, [r5, #1]!
   119a8:	add	r3, r1, r3
   119ac:	cmp	r2, r5
   119b0:	ldrb	r3, [r3, #952]	; 0x3b8
   119b4:	strb	r3, [r5]
   119b8:	bne	119a4 <__assert_fail@plt+0x4c8>
   119bc:	mov	r3, #1
   119c0:	mov	r1, #37	; 0x25
   119c4:	mov	r2, #64	; 0x40
   119c8:	strb	r1, [fp, #25]
   119cc:	strb	r2, [fp, #26]
   119d0:	strb	r3, [r4, #593]	; 0x251
   119d4:	bl	113a4 <__errno_location@plt>
   119d8:	ldr	r5, [r4, #128]	; 0x80
   119dc:	mov	r9, r0
   119e0:	ldr	r6, [r4, #268]	; 0x10c
   119e4:	cmp	r5, #0
   119e8:	beq	12830 <__assert_fail@plt+0x1354>
   119ec:	mov	r3, #0
   119f0:	mov	r2, r6
   119f4:	mov	r1, r5
   119f8:	mov	r0, r3
   119fc:	bl	14b08 <__assert_fail@plt+0x362c>
   11a00:	cmp	r0, #0
   11a04:	blt	131f0 <__assert_fail@plt+0x1d14>
   11a08:	mov	r1, #1
   11a0c:	mov	r2, #0
   11a10:	mov	r3, #0
   11a14:	mov	r0, #0
   11a18:	str	r1, [sp]
   11a1c:	bl	112a8 <lseek64@plt>
   11a20:	mov	r2, r0
   11a24:	mov	r3, r1
   11a28:	ldr	sl, [r4, #132]	; 0x84
   11a2c:	cmp	r2, #0
   11a30:	mvn	r1, r1
   11a34:	sbcs	r0, r3, #0
   11a38:	lsr	r1, r1, #31
   11a3c:	ldr	r5, [r4, #276]	; 0x114
   11a40:	movlt	r3, #0
   11a44:	movlt	r2, #0
   11a48:	cmp	sl, #0
   11a4c:	strb	r1, [r4, #90]	; 0x5a
   11a50:	strd	r2, [r4, #96]	; 0x60
   11a54:	ldr	r3, [r9]
   11a58:	str	r3, [r4, #596]	; 0x254
   11a5c:	beq	12b60 <__assert_fail@plt+0x1684>
   11a60:	ldr	r8, [pc, #2720]	; 12508 <__assert_fail@plt+0x102c>
   11a64:	ldr	ip, [r4, #116]	; 0x74
   11a68:	ldr	r2, [r4, #120]	; 0x78
   11a6c:	ldrd	r6, [r8]
   11a70:	asr	r3, ip, #6
   11a74:	tst	ip, #4096	; 0x1000
   11a78:	and	r3, r3, #128	; 0x80
   11a7c:	orr	r5, r3, r5
   11a80:	movne	r3, #0
   11a84:	moveq	r3, #64	; 0x40
   11a88:	orrs	r1, r6, r7
   11a8c:	strd	r6, [sp, #40]	; 0x28
   11a90:	orr	r5, r5, r3
   11a94:	bne	12760 <__assert_fail@plt+0x1284>
   11a98:	ldrd	r6, [r8, #8]
   11a9c:	tst	ip, #512	; 0x200
   11aa0:	moveq	r3, #512	; 0x200
   11aa4:	movne	r3, #0
   11aa8:	orr	r5, r5, r3
   11aac:	orr	r2, r5, #1
   11ab0:	movw	r3, #438	; 0x1b6
   11ab4:	ldr	r1, [r4, #132]	; 0x84
   11ab8:	mov	r0, #1
   11abc:	bl	14b08 <__assert_fail@plt+0x362c>
   11ac0:	cmp	r0, #0
   11ac4:	blt	1322c <__assert_fail@plt+0x1d50>
   11ac8:	ldrd	r2, [r8]
   11acc:	orrs	r3, r2, r3
   11ad0:	beq	11ae0 <__assert_fail@plt+0x604>
   11ad4:	ldr	r3, [r4, #116]	; 0x74
   11ad8:	tst	r3, #512	; 0x200
   11adc:	beq	12088 <__assert_fail@plt+0xbac>
   11ae0:	bl	15f88 <__assert_fail@plt+0x4aac>
   11ae4:	ldr	ip, [pc, #2564]	; 124f0 <__assert_fail@plt+0x1014>
   11ae8:	mov	r2, #51712	; 0xca00
   11aec:	movt	r2, #15258	; 0x3b9a
   11af0:	mov	r3, #0
   11af4:	strd	r0, [r4, #16]
   11af8:	adds	r0, r0, r2
   11afc:	adc	r1, r1, r3
   11b00:	ldrd	r6, [ip, #-48]	; 0xffffffd0
   11b04:	strd	r0, [ip, #-8]
   11b08:	orrs	r3, r6, r7
   11b0c:	strd	r6, [sp, #40]	; 0x28
   11b10:	bne	1266c <__assert_fail@plt+0x1190>
   11b14:	ldr	r3, [r4, #568]	; 0x238
   11b18:	cmp	r3, #0
   11b1c:	beq	11bd8 <__assert_fail@plt+0x6fc>
   11b20:	ldrd	r2, [sp, #40]	; 0x28
   11b24:	ldr	ip, [r4, #108]	; 0x6c
   11b28:	strd	r2, [sp, #48]	; 0x30
   11b2c:	ldr	r2, [r4, #568]	; 0x238
   11b30:	ldrd	r6, [sp, #48]	; 0x30
   11b34:	asr	r3, r2, #31
   11b38:	adds	r0, r2, r6
   11b3c:	adcs	r1, r3, r7
   11b40:	movvs	sl, #1
   11b44:	movvc	sl, #0
   11b48:	strd	r0, [sp, #48]	; 0x30
   11b4c:	ldr	lr, [pc, #2464]	; 124f4 <__assert_fail@plt+0x1018>
   11b50:	mov	r0, #0
   11b54:	str	ip, [sp]
   11b58:	ldrd	r2, [sp, #40]	; 0x28
   11b5c:	ldr	r5, [r4, #96]	; 0x60
   11b60:	ldr	r1, [r4, #128]	; 0x80
   11b64:	str	lr, [sp, #4]
   11b68:	ldr	r6, [r4, #100]	; 0x64
   11b6c:	bl	15564 <__assert_fail@plt+0x4088>
   11b70:	orrs	r3, r0, r1
   11b74:	bne	11b90 <__assert_fail@plt+0x6b4>
   11b78:	ldrd	r2, [r4, #96]	; 0x60
   11b7c:	cmp	r2, #0
   11b80:	sbcs	r1, r3, #0
   11b84:	blt	11bd8 <__assert_fail@plt+0x6fc>
   11b88:	cmp	sl, #0
   11b8c:	beq	12938 <__assert_fail@plt+0x145c>
   11b90:	ldr	r3, [fp, #8]
   11b94:	cmp	r3, #1
   11b98:	beq	11bd8 <__assert_fail@plt+0x6fc>
   11b9c:	mov	r2, #5
   11ba0:	movw	r1, #53120	; 0xcf80
   11ba4:	movt	r1, #1
   11ba8:	mov	r0, #0
   11bac:	bl	11230 <dcgettext@plt>
   11bb0:	mov	r5, r0
   11bb4:	mov	r1, #3
   11bb8:	ldr	r2, [r4, #128]	; 0x80
   11bbc:	mov	r0, #0
   11bc0:	bl	18ee0 <__assert_fail@plt+0x7a04>
   11bc4:	mov	r1, #0
   11bc8:	mov	r3, r0
   11bcc:	mov	r2, r5
   11bd0:	mov	r0, r1
   11bd4:	bl	13a8c <__assert_fail@plt+0x25b0>
   11bd8:	ldr	lr, [pc, #2364]	; 1251c <__assert_fail@plt+0x1040>
   11bdc:	ldr	r3, [r8, #4]
   11be0:	ldr	r2, [r4, #576]	; 0x240
   11be4:	ldmdb	lr, {ip, lr}
   11be8:	orr	r0, r2, ip
   11bec:	orr	r1, r3, lr
   11bf0:	orrs	r1, r0, r1
   11bf4:	beq	11c80 <__assert_fail@plt+0x7a4>
   11bf8:	ldr	lr, [r4, #120]	; 0x78
   11bfc:	add	r1, sp, #96	; 0x60
   11c00:	mov	r0, #1
   11c04:	str	r1, [sp, #4]
   11c08:	ldr	r1, [r4, #132]	; 0x84
   11c0c:	str	ip, [sp, #96]	; 0x60
   11c10:	str	lr, [sp]
   11c14:	bl	15564 <__assert_fail@plt+0x4088>
   11c18:	mov	r6, r0
   11c1c:	mov	r7, r1
   11c20:	orrs	r3, r6, r7
   11c24:	beq	127c0 <__assert_fail@plt+0x12e4>
   11c28:	mov	r1, #0
   11c2c:	ldr	r2, [r4, #120]	; 0x78
   11c30:	ldr	r0, [r4, #124]	; 0x7c
   11c34:	bl	113d4 <memset@plt>
   11c38:	ldr	r5, [r4, #120]	; 0x78
   11c3c:	ldr	r0, [r4, #124]	; 0x7c
   11c40:	mov	r1, r5
   11c44:	bl	14ebc <__assert_fail@plt+0x39e0>
   11c48:	cmp	r5, r0
   11c4c:	bne	130e0 <__assert_fail@plt+0x1c04>
   11c50:	subs	r6, r6, #1
   11c54:	sbc	r7, r7, #0
   11c58:	orrs	r3, r6, r7
   11c5c:	bne	11c38 <__assert_fail@plt+0x75c>
   11c60:	ldr	r5, [sp, #96]	; 0x60
   11c64:	cmp	r5, #0
   11c68:	beq	11c80 <__assert_fail@plt+0x7a4>
   11c6c:	mov	r1, r5
   11c70:	ldr	r0, [r4, #124]	; 0x7c
   11c74:	bl	14ebc <__assert_fail@plt+0x39e0>
   11c78:	cmp	r0, r5
   11c7c:	bne	130e0 <__assert_fail@plt+0x1c04>
   11c80:	ldrd	r2, [fp, #32]
   11c84:	orrs	r3, r2, r3
   11c88:	bne	11c9c <__assert_fail@plt+0x7c0>
   11c8c:	ldr	r3, [r4, #572]	; 0x23c
   11c90:	cmp	r3, #0
   11c94:	str	r3, [sp, #48]	; 0x30
   11c98:	beq	122e0 <__assert_fail@plt+0xe04>
   11c9c:	movw	r3, #52412	; 0xccbc
   11ca0:	movt	r3, #1
   11ca4:	mov	sl, #0
   11ca8:	str	r3, [sp, #64]	; 0x40
   11cac:	movw	r3, #52396	; 0xccac
   11cb0:	movt	r3, #1
   11cb4:	str	sl, [sp, #48]	; 0x30
   11cb8:	str	r3, [sp, #72]	; 0x48
   11cbc:	mvn	r3, #0
   11cc0:	str	r3, [sp, #56]	; 0x38
   11cc4:	bl	13ed0 <__assert_fail@plt+0x29f4>
   11cc8:	bl	13f84 <__assert_fail@plt+0x2aa8>
   11ccc:	str	r9, [sp, #40]	; 0x28
   11cd0:	ldr	r3, [fp, #8]
   11cd4:	cmp	r3, #4
   11cd8:	beq	11e64 <__assert_fail@plt+0x988>
   11cdc:	ldr	r3, [r4, #48]	; 0x30
   11ce0:	ldr	r0, [r4, #52]	; 0x34
   11ce4:	ldr	r2, [r4, #56]	; 0x38
   11ce8:	ldr	r1, [r4, #60]	; 0x3c
   11cec:	ldr	r5, [r4, #572]	; 0x23c
   11cf0:	adds	r3, r3, r2
   11cf4:	ldrd	r6, [fp, #32]
   11cf8:	str	r3, [sp, #32]
   11cfc:	adc	r3, r0, r1
   11d00:	ldr	r1, [r4, #116]	; 0x74
   11d04:	str	r3, [sp, #36]	; 0x24
   11d08:	adds	r0, r5, #0
   11d0c:	ldrd	r8, [sp, #32]
   11d10:	movne	r0, #1
   11d14:	adds	r2, r6, r0
   11d18:	adc	r3, r7, #0
   11d1c:	cmp	r8, r2
   11d20:	sbcs	r3, r9, r3
   11d24:	bge	12a14 <__assert_fail@plt+0x1538>
   11d28:	and	r2, r1, #1280	; 0x500
   11d2c:	ldr	r3, [r4, #112]	; 0x70
   11d30:	cmp	r2, #1280	; 0x500
   11d34:	bne	11d50 <__assert_fail@plt+0x874>
   11d38:	ands	r1, r1, #24
   11d3c:	mov	r0, r3
   11d40:	ldr	r2, [r4, #108]	; 0x6c
   11d44:	movne	r1, #32
   11d48:	bl	113d4 <memset@plt>
   11d4c:	mov	r3, r0
   11d50:	ldrd	r0, [sp, #32]
   11d54:	cmp	r0, r6
   11d58:	ldr	r6, [r4, #300]	; 0x12c
   11d5c:	sbcs	r2, r1, r7
   11d60:	blt	12114 <__assert_fail@plt+0xc38>
   11d64:	mov	r2, r5
   11d68:	mov	r1, r3
   11d6c:	mov	r0, #0
   11d70:	blx	r6
   11d74:	mov	r5, r0
   11d78:	cmp	r5, #0
   11d7c:	ble	12130 <__assert_fail@plt+0xc54>
   11d80:	ldrd	r0, [r4, #96]	; 0x60
   11d84:	mov	r2, r5
   11d88:	asr	r3, r5, #31
   11d8c:	cmp	r0, #0
   11d90:	sbcs	ip, r1, #0
   11d94:	blt	11db0 <__assert_fail@plt+0x8d4>
   11d98:	adds	r6, r0, r5
   11d9c:	adcs	r7, r1, r3
   11da0:	mvnvs	r0, #0
   11da4:	mvnvs	r1, #0
   11da8:	strdvc	r6, [r4, #96]	; 0x60
   11dac:	strdvs	r0, [r4, #96]	; 0x60
   11db0:	ldrb	r1, [r4, #592]	; 0x250
   11db4:	cmp	r1, #0
   11db8:	bne	12428 <__assert_fail@plt+0xf4c>
   11dbc:	ldr	r2, [r4, #108]	; 0x6c
   11dc0:	ldr	r8, [r4, #112]	; 0x70
   11dc4:	cmp	r5, r2
   11dc8:	bge	1224c <__assert_fail@plt+0xd70>
   11dcc:	ldr	r3, [r4, #48]	; 0x30
   11dd0:	ldr	r1, [r4, #52]	; 0x34
   11dd4:	ldr	r0, [r4, #116]	; 0x74
   11dd8:	adds	r3, r3, #1
   11ddc:	adc	r1, r1, #0
   11de0:	str	r3, [r4, #48]	; 0x30
   11de4:	tst	r0, #1024	; 0x400
   11de8:	str	r1, [r4, #52]	; 0x34
   11dec:	moveq	sl, r5
   11df0:	beq	11e18 <__assert_fail@plt+0x93c>
   11df4:	tst	r0, #256	; 0x100
   11df8:	bne	11e10 <__assert_fail@plt+0x934>
   11dfc:	ands	r1, r0, #24
   11e00:	sub	r2, r2, r5
   11e04:	movne	r1, #32
   11e08:	add	r0, r8, r5
   11e0c:	bl	113d4 <memset@plt>
   11e10:	mov	sl, r5
   11e14:	ldr	r5, [r4, #108]	; 0x6c
   11e18:	ldr	r0, [r4, #124]	; 0x7c
   11e1c:	cmp	r0, r8
   11e20:	beq	12274 <__assert_fail@plt+0xd98>
   11e24:	ldrb	r3, [r4, #593]	; 0x251
   11e28:	cmp	r3, #0
   11e2c:	bne	12434 <__assert_fail@plt+0xf58>
   11e30:	ldr	r2, [r4, #116]	; 0x74
   11e34:	tst	r2, #128	; 0x80
   11e38:	bne	124dc <__assert_fail@plt+0x1000>
   11e3c:	tst	r2, #8
   11e40:	bne	123a0 <__assert_fail@plt+0xec4>
   11e44:	tst	r2, #16
   11e48:	beq	12338 <__assert_fail@plt+0xe5c>
   11e4c:	mov	r1, r5
   11e50:	mov	r0, r8
   11e54:	bl	15424 <__assert_fail@plt+0x3f48>
   11e58:	ldr	r3, [fp, #8]
   11e5c:	cmp	r3, #4
   11e60:	bne	11cdc <__assert_fail@plt+0x800>
   11e64:	bl	15f88 <__assert_fail@plt+0x4aac>
   11e68:	ldr	r3, [pc, #1664]	; 124f0 <__assert_fail@plt+0x1014>
   11e6c:	ldrd	r2, [r3, #-8]
   11e70:	cmp	r0, r2
   11e74:	sbcs	r3, r1, r3
   11e78:	blt	11cdc <__assert_fail@plt+0x800>
   11e7c:	bl	134e0 <__assert_fail@plt+0x2004>
   11e80:	ldr	r1, [pc, #1640]	; 124f0 <__assert_fail@plt+0x1014>
   11e84:	mov	r0, #51712	; 0xca00
   11e88:	movt	r0, #15258	; 0x3b9a
   11e8c:	ldr	r3, [r1, #-8]
   11e90:	ldr	r2, [r1, #-4]
   11e94:	adds	r3, r3, r0
   11e98:	adc	r2, r2, #0
   11e9c:	str	r3, [r1, #-8]
   11ea0:	str	r2, [r1, #-4]
   11ea4:	b	11cdc <__assert_fail@plt+0x800>
   11ea8:	movw	r2, #52564	; 0xcd54
   11eac:	movt	r2, #1
   11eb0:	mov	r1, sl
   11eb4:	mov	r3, #111	; 0x6f
   11eb8:	ldrb	r0, [r1], #1
   11ebc:	cmp	r0, r3
   11ec0:	bne	11ee8 <__assert_fail@plt+0xa0c>
   11ec4:	ldrb	r3, [r2, #1]!
   11ec8:	cmp	r3, #0
   11ecc:	bne	11eb8 <__assert_fail@plt+0x9dc>
   11ed0:	ldrb	r3, [r1]
   11ed4:	cmp	r3, #61	; 0x3d
   11ed8:	cmpne	r3, #0
   11edc:	bne	11ee8 <__assert_fail@plt+0xa0c>
   11ee0:	str	r8, [r4, #132]	; 0x84
   11ee4:	b	11708 <__assert_fail@plt+0x22c>
   11ee8:	movw	r3, #52568	; 0xcd58
   11eec:	movt	r3, #1
   11ef0:	mov	r1, sl
   11ef4:	mov	r2, #99	; 0x63
   11ef8:	ldrb	r0, [r1], #1
   11efc:	cmp	r0, r2
   11f00:	bne	11f44 <__assert_fail@plt+0xa68>
   11f04:	ldrb	r2, [r3, #1]!
   11f08:	cmp	r2, #0
   11f0c:	bne	11ef8 <__assert_fail@plt+0xa1c>
   11f10:	ldrb	r3, [r1]
   11f14:	cmp	r3, #61	; 0x3d
   11f18:	cmpne	r3, #0
   11f1c:	bne	11f44 <__assert_fail@plt+0xa68>
   11f20:	mov	r0, r8
   11f24:	ldr	r1, [pc, #1484]	; 124f8 <__assert_fail@plt+0x101c>
   11f28:	movw	r3, #52576	; 0xcd60
   11f2c:	movt	r3, #1
   11f30:	bl	14854 <__assert_fail@plt+0x3378>
   11f34:	ldr	r3, [r4, #116]	; 0x74
   11f38:	orr	r3, r3, r0
   11f3c:	str	r3, [r4, #116]	; 0x74
   11f40:	b	11708 <__assert_fail@plt+0x22c>
   11f44:	movw	r3, #52596	; 0xcd74
   11f48:	movt	r3, #1
   11f4c:	mov	r1, sl
   11f50:	mov	r2, #105	; 0x69
   11f54:	ldrb	r0, [r1], #1
   11f58:	cmp	r0, r2
   11f5c:	bne	11fa0 <__assert_fail@plt+0xac4>
   11f60:	ldrb	r2, [r3, #1]!
   11f64:	cmp	r2, #0
   11f68:	bne	11f54 <__assert_fail@plt+0xa78>
   11f6c:	ldrb	r3, [r1]
   11f70:	cmp	r3, #61	; 0x3d
   11f74:	cmpne	r3, #0
   11f78:	bne	11fa0 <__assert_fail@plt+0xac4>
   11f7c:	mov	r0, r8
   11f80:	ldr	r1, [pc, #1396]	; 124fc <__assert_fail@plt+0x1020>
   11f84:	movw	r3, #52604	; 0xcd7c
   11f88:	movt	r3, #1
   11f8c:	bl	14854 <__assert_fail@plt+0x3378>
   11f90:	ldr	r3, [r4, #268]	; 0x10c
   11f94:	orr	r3, r3, r0
   11f98:	str	r3, [r4, #268]	; 0x10c
   11f9c:	b	11708 <__assert_fail@plt+0x22c>
   11fa0:	movw	r3, #52624	; 0xcd90
   11fa4:	movt	r3, #1
   11fa8:	mov	r1, sl
   11fac:	mov	r2, #111	; 0x6f
   11fb0:	ldrb	r0, [r1], #1
   11fb4:	cmp	r0, r2
   11fb8:	bne	12860 <__assert_fail@plt+0x1384>
   11fbc:	ldrb	r2, [r3, #1]!
   11fc0:	cmp	r2, #0
   11fc4:	bne	11fb0 <__assert_fail@plt+0xad4>
   11fc8:	ldrb	r3, [r1]
   11fcc:	cmp	r3, #61	; 0x3d
   11fd0:	cmpne	r3, #0
   11fd4:	bne	12860 <__assert_fail@plt+0x1384>
   11fd8:	mov	r0, r8
   11fdc:	ldr	r1, [pc, #1304]	; 124fc <__assert_fail@plt+0x1020>
   11fe0:	movw	r3, #52632	; 0xcd98
   11fe4:	movt	r3, #1
   11fe8:	bl	14854 <__assert_fail@plt+0x3378>
   11fec:	ldr	r3, [r4, #276]	; 0x114
   11ff0:	orr	r3, r3, r0
   11ff4:	str	r3, [r4, #276]	; 0x114
   11ff8:	b	11708 <__assert_fail@plt+0x22c>
   11ffc:	orrs	r3, r0, r1
   12000:	beq	11784 <__assert_fail@plt+0x2a8>
   12004:	ldr	r2, [r4, #108]	; 0x6c
   12008:	asr	r3, r2, #31
   1200c:	bl	1b2e0 <__assert_fail@plt+0x9e04>
   12010:	ldr	r3, [pc, #1236]	; 124ec <__assert_fail@plt+0x1010>
   12014:	str	r2, [r4, #568]	; 0x238
   12018:	strd	r0, [r3]
   1201c:	b	11784 <__assert_fail@plt+0x2a8>
   12020:	ldr	r3, [r4, #116]	; 0x74
   12024:	bic	r3, r3, #24
   12028:	str	r3, [r4, #116]	; 0x74
   1202c:	b	11734 <__assert_fail@plt+0x258>
   12030:	mov	r2, #0
   12034:	mov	r3, #0
   12038:	mvn	r0, #0
   1203c:	mvn	r1, #-2147483648	; 0x80000000
   12040:	strd	r0, [sp, #40]	; 0x28
   12044:	strd	r2, [sp, #48]	; 0x30
   12048:	strd	r2, [sp, #56]	; 0x38
   1204c:	ldr	r2, [r4, #108]	; 0x6c
   12050:	ldr	r3, [r4, #116]	; 0x74
   12054:	cmp	r2, #0
   12058:	orr	r3, r3, #2048	; 0x800
   1205c:	str	r3, [r4, #116]	; 0x74
   12060:	moveq	r3, #512	; 0x200
   12064:	streq	r3, [r4, #108]	; 0x6c
   12068:	ldr	r3, [r4, #120]	; 0x78
   1206c:	cmp	r3, #0
   12070:	moveq	r3, #512	; 0x200
   12074:	streq	r3, [r4, #120]	; 0x78
   12078:	b	11728 <__assert_fail@plt+0x24c>
   1207c:	ldr	r5, [r9]
   12080:	cmp	r5, #4
   12084:	bne	120ac <__assert_fail@plt+0xbd0>
   12088:	bl	14a68 <__assert_fail@plt+0x358c>
   1208c:	mov	r2, r6
   12090:	mov	r3, r7
   12094:	mov	r0, #1
   12098:	bl	1120c <ftruncate64@plt>
   1209c:	cmp	r0, #0
   120a0:	blt	1207c <__assert_fail@plt+0xba0>
   120a4:	beq	11ae0 <__assert_fail@plt+0x604>
   120a8:	ldr	r5, [r9]
   120ac:	add	r1, sp, #96	; 0x60
   120b0:	mov	r0, #1
   120b4:	bl	14b74 <__assert_fail@plt+0x3698>
   120b8:	cmp	r0, #0
   120bc:	bne	13068 <__assert_fail@plt+0x1b8c>
   120c0:	ldr	r3, [sp, #112]	; 0x70
   120c4:	and	r3, r3, #61440	; 0xf000
   120c8:	sub	r3, r3, #16384	; 0x4000
   120cc:	bics	sl, r3, #16384	; 0x4000
   120d0:	bne	11ae0 <__assert_fail@plt+0x604>
   120d4:	mov	r2, #5
   120d8:	movw	r1, #53068	; 0xcf4c
   120dc:	movt	r1, #1
   120e0:	bl	11230 <dcgettext@plt>
   120e4:	mov	r2, r0
   120e8:	mov	r0, #4
   120ec:	ldr	r1, [r4, #132]	; 0x84
   120f0:	str	r2, [sp, #40]	; 0x28
   120f4:	bl	18e04 <__assert_fail@plt+0x7928>
   120f8:	mov	r1, r5
   120fc:	strd	r6, [sp]
   12100:	str	r0, [sp, #8]
   12104:	mov	r0, sl
   12108:	ldr	r2, [sp, #40]	; 0x28
   1210c:	bl	13a8c <__assert_fail@plt+0x25b0>
   12110:	b	11ae0 <__assert_fail@plt+0x604>
   12114:	mov	r1, r3
   12118:	mov	r0, #0
   1211c:	ldr	r2, [r4, #108]	; 0x6c
   12120:	blx	r6
   12124:	mov	r5, r0
   12128:	cmp	r5, #0
   1212c:	bgt	11d80 <__assert_fail@plt+0x8a4>
   12130:	ldr	r3, [r4, #116]	; 0x74
   12134:	beq	12d80 <__assert_fail@plt+0x18a4>
   12138:	tst	r3, #256	; 0x100
   1213c:	beq	1214c <__assert_fail@plt+0xc70>
   12140:	ldr	r3, [fp, #8]
   12144:	cmp	r3, #1
   12148:	beq	12194 <__assert_fail@plt+0xcb8>
   1214c:	ldr	r3, [sp, #40]	; 0x28
   12150:	mov	r2, #5
   12154:	mov	r0, #0
   12158:	ldr	r1, [sp, #64]	; 0x40
   1215c:	ldr	r5, [r3]
   12160:	bl	11230 <dcgettext@plt>
   12164:	mov	r6, r0
   12168:	mov	r0, #4
   1216c:	ldr	r1, [r4, #128]	; 0x80
   12170:	bl	18e04 <__assert_fail@plt+0x7928>
   12174:	mov	r3, r0
   12178:	mov	r2, r6
   1217c:	mov	r1, r5
   12180:	mov	r0, #0
   12184:	bl	13a8c <__assert_fail@plt+0x25b0>
   12188:	ldr	r3, [r4, #116]	; 0x74
   1218c:	tst	r3, #256	; 0x100
   12190:	beq	12d70 <__assert_fail@plt+0x1894>
   12194:	bl	138e0 <__assert_fail@plt+0x2404>
   12198:	ldr	r6, [r4, #108]	; 0x6c
   1219c:	mov	r0, #0
   121a0:	sub	r6, r6, sl
   121a4:	asr	r7, r6, #31
   121a8:	mov	r2, r6
   121ac:	mov	r3, r7
   121b0:	bl	13b34 <__assert_fail@plt+0x2658>
   121b4:	ldrb	r3, [r4, #90]	; 0x5a
   121b8:	cmp	r3, #0
   121bc:	bne	123b0 <__assert_fail@plt+0xed4>
   121c0:	ldr	r5, [r4, #596]	; 0x254
   121c4:	cmp	r5, #29
   121c8:	beq	12224 <__assert_fail@plt+0xd48>
   121cc:	ldr	r3, [sp, #40]	; 0x28
   121d0:	str	r5, [r3]
   121d4:	mov	r2, #5
   121d8:	mov	r0, #0
   121dc:	ldr	r1, [sp, #72]	; 0x48
   121e0:	bl	11230 <dcgettext@plt>
   121e4:	mov	r6, r0
   121e8:	mov	r1, #3
   121ec:	ldr	r2, [r4, #128]	; 0x80
   121f0:	mov	r0, #0
   121f4:	bl	18ee0 <__assert_fail@plt+0x7a04>
   121f8:	mov	r3, r0
   121fc:	mov	r2, r6
   12200:	mov	r1, r5
   12204:	mov	r0, #0
   12208:	bl	13a8c <__assert_fail@plt+0x25b0>
   1220c:	mov	r2, #0
   12210:	mov	r3, #29
   12214:	mov	r1, #1
   12218:	strb	r2, [r4, #90]	; 0x5a
   1221c:	str	r1, [sp, #48]	; 0x30
   12220:	str	r3, [r4, #596]	; 0x254
   12224:	ldr	r2, [r4, #116]	; 0x74
   12228:	clz	r3, sl
   1222c:	lsr	r3, r3, #5
   12230:	ands	r3, r3, r2, lsr #10
   12234:	beq	11cd0 <__assert_fail@plt+0x7f4>
   12238:	ldr	r2, [r4, #108]	; 0x6c
   1223c:	mov	r5, #0
   12240:	ldr	r8, [r4, #112]	; 0x70
   12244:	cmp	r5, r2
   12248:	blt	11dcc <__assert_fail@plt+0x8f0>
   1224c:	ldr	r3, [r4, #56]	; 0x38
   12250:	mov	sl, #0
   12254:	ldr	r2, [r4, #60]	; 0x3c
   12258:	ldr	r0, [r4, #124]	; 0x7c
   1225c:	adds	r3, r3, #1
   12260:	adc	r2, r2, sl
   12264:	str	r3, [r4, #56]	; 0x38
   12268:	cmp	r0, r8
   1226c:	str	r2, [r4, #60]	; 0x3c
   12270:	bne	11e24 <__assert_fail@plt+0x948>
   12274:	mov	r0, r8
   12278:	mov	r1, r5
   1227c:	bl	14ebc <__assert_fail@plt+0x39e0>
   12280:	ldrd	r2, [r4, #8]
   12284:	adds	r6, r2, r0
   12288:	adc	r7, r3, r0, asr #31
   1228c:	cmp	r0, r5
   12290:	strd	r6, [r4, #8]
   12294:	beq	12738 <__assert_fail@plt+0x125c>
   12298:	ldr	r9, [sp, #40]	; 0x28
   1229c:	mov	r2, #5
   122a0:	movw	r1, #53244	; 0xcffc
   122a4:	movt	r1, #1
   122a8:	ldr	r5, [r9]
   122ac:	mov	r0, #0
   122b0:	bl	11230 <dcgettext@plt>
   122b4:	mov	r6, r0
   122b8:	mov	r0, #4
   122bc:	ldr	r1, [r4, #132]	; 0x84
   122c0:	bl	18e04 <__assert_fail@plt+0x7928>
   122c4:	mov	r3, r0
   122c8:	mov	r2, r6
   122cc:	mov	r1, r5
   122d0:	mov	r0, #0
   122d4:	bl	13a8c <__assert_fail@plt+0x25b0>
   122d8:	mov	r3, #1
   122dc:	str	r3, [sp, #48]	; 0x30
   122e0:	bl	150d4 <__assert_fail@plt+0x3bf8>
   122e4:	ldrd	r2, [fp, #32]
   122e8:	cmp	r0, #0
   122ec:	ldr	r1, [sp, #48]	; 0x30
   122f0:	movne	r1, r0
   122f4:	orrs	r0, r2, r3
   122f8:	str	r1, [sp, #48]	; 0x30
   122fc:	ldrb	r1, [r4, #592]	; 0x250
   12300:	bne	1261c <__assert_fail@plt+0x1140>
   12304:	ldr	r0, [r4, #572]	; 0x23c
   12308:	cmp	r0, #0
   1230c:	bne	1261c <__assert_fail@plt+0x1140>
   12310:	cmp	r1, #0
   12314:	bne	129c0 <__assert_fail@plt+0x14e4>
   12318:	ldrb	r3, [r4, #281]	; 0x119
   1231c:	cmp	r3, #0
   12320:	bne	12960 <__assert_fail@plt+0x1484>
   12324:	bl	14a68 <__assert_fail@plt+0x358c>
   12328:	bl	1497c <__assert_fail@plt+0x34a0>
   1232c:	bl	138e0 <__assert_fail@plt+0x2404>
   12330:	ldr	r0, [sp, #48]	; 0x30
   12334:	bl	11374 <exit@plt>
   12338:	ldr	r9, [sp, #40]	; 0x28
   1233c:	b	1234c <__assert_fail@plt+0xe70>
   12340:	cmp	r5, #0
   12344:	beq	12398 <__assert_fail@plt+0xebc>
   12348:	ldr	r0, [r4, #124]	; 0x7c
   1234c:	mov	r1, r8
   12350:	ldr	r6, [r4, #120]	; 0x78
   12354:	ldr	r7, [r4, #284]	; 0x11c
   12358:	sub	r6, r6, r7
   1235c:	add	r0, r0, r7
   12360:	cmp	r6, r5
   12364:	movge	r6, r5
   12368:	mov	r2, r6
   1236c:	sub	r5, r5, r6
   12370:	bl	111e8 <memcpy@plt>
   12374:	ldr	r2, [r4, #120]	; 0x78
   12378:	add	r3, r7, r6
   1237c:	add	r8, r8, r6
   12380:	str	r3, [r4, #284]	; 0x11c
   12384:	cmp	r3, r2
   12388:	blt	12340 <__assert_fail@plt+0xe64>
   1238c:	bl	15228 <__assert_fail@plt+0x3d4c>
   12390:	cmp	r5, #0
   12394:	bne	12348 <__assert_fail@plt+0xe6c>
   12398:	str	r9, [sp, #40]	; 0x28
   1239c:	b	11cd0 <__assert_fail@plt+0x7f4>
   123a0:	mov	r1, r5
   123a4:	mov	r0, r8
   123a8:	bl	15304 <__assert_fail@plt+0x3e28>
   123ac:	b	11cd0 <__assert_fail@plt+0x7f4>
   123b0:	ldrd	r2, [r4, #96]	; 0x60
   123b4:	cmp	r2, #0
   123b8:	sbcs	r1, r3, #0
   123bc:	blt	123ec <__assert_fail@plt+0xf10>
   123c0:	adds	r0, r2, r6
   123c4:	adcs	r1, r3, r7
   123c8:	mov	r8, r0
   123cc:	mov	r9, r1
   123d0:	movvs	r5, #1
   123d4:	movvc	r5, #0
   123d8:	strd	r0, [r4, #96]	; 0x60
   123dc:	bvc	12520 <__assert_fail@plt+0x1044>
   123e0:	mvn	r2, #0
   123e4:	mvn	r3, #0
   123e8:	strd	r2, [r4, #96]	; 0x60
   123ec:	mov	r2, #5
   123f0:	movw	r1, #53296	; 0xd030
   123f4:	movt	r1, #1
   123f8:	mov	r0, #0
   123fc:	bl	11230 <dcgettext@plt>
   12400:	mov	r5, r0
   12404:	mov	r0, #4
   12408:	ldr	r1, [r4, #128]	; 0x80
   1240c:	bl	18e04 <__assert_fail@plt+0x7928>
   12410:	mov	r1, #0
   12414:	mov	r3, r0
   12418:	mov	r2, r5
   1241c:	mov	r0, r1
   12420:	bl	13a8c <__assert_fail@plt+0x25b0>
   12424:	b	1220c <__assert_fail@plt+0xd30>
   12428:	mov	r0, #0
   1242c:	bl	13b34 <__assert_fail@plt+0x2658>
   12430:	b	11dbc <__assert_fail@plt+0x8e0>
   12434:	cmp	r5, #0
   12438:	beq	12bc0 <__assert_fail@plt+0x16e4>
   1243c:	ldr	r9, [sp, #40]	; 0x28
   12440:	add	r1, r8, r5
   12444:	mov	r3, r8
   12448:	ldrb	r2, [r3]
   1244c:	add	r2, r4, r2
   12450:	ldrb	r2, [r2, #304]	; 0x130
   12454:	strb	r2, [r3], #1
   12458:	cmp	r3, r1
   1245c:	bne	12448 <__assert_fail@plt+0xf6c>
   12460:	ldr	r2, [r4, #116]	; 0x74
   12464:	str	r9, [sp, #40]	; 0x28
   12468:	tst	r2, #128	; 0x80
   1246c:	beq	11e3c <__assert_fail@plt+0x960>
   12470:	ldr	r3, [sp, #56]	; 0x38
   12474:	mvn	r1, r3
   12478:	and	r3, r5, #1
   1247c:	lsr	r1, r1, #31
   12480:	cmp	r1, r3
   12484:	subne	r5, r5, #1
   12488:	mvneq	lr, #0
   1248c:	ldrbne	lr, [r8, r5]
   12490:	cmp	r5, #1
   12494:	ble	124bc <__assert_fail@plt+0xfe0>
   12498:	ldr	r9, [sp, #40]	; 0x28
   1249c:	mov	r3, r5
   124a0:	sub	ip, r8, #2
   124a4:	ldrb	r1, [ip, r3]
   124a8:	strb	r1, [r8, r3]
   124ac:	sub	r3, r3, #2
   124b0:	cmp	r3, #1
   124b4:	bgt	124a4 <__assert_fail@plt+0xfc8>
   124b8:	str	r9, [sp, #40]	; 0x28
   124bc:	ldr	r3, [sp, #56]	; 0x38
   124c0:	cmn	r3, #1
   124c4:	beq	128b8 <__assert_fail@plt+0x13dc>
   124c8:	ldr	r3, [sp, #56]	; 0x38
   124cc:	add	r5, r5, #1
   124d0:	str	lr, [sp, #56]	; 0x38
   124d4:	strb	r3, [r8, #1]
   124d8:	b	11e3c <__assert_fail@plt+0x960>
   124dc:	cmp	r5, #0
   124e0:	bne	12470 <__assert_fail@plt+0xf94>
   124e4:	mov	r5, #0
   124e8:	b	11e3c <__assert_fail@plt+0x960>
   124ec:	andeq	lr, r2, r8, lsl r4
   124f0:	andeq	lr, r2, r8, asr #8
   124f4:	andeq	lr, r2, r0, lsr #8
   124f8:	andeq	fp, r1, r8, lsr #12
   124fc:	andeq	fp, r1, r8, lsr r7
   12500:	andeq	lr, r2, r8, lsl r3
   12504:	andeq	fp, r1, r8, ror #16
   12508:	andeq	lr, r2, r8, lsr #8
   1250c:	andeq	lr, r2, r0, ror r2
   12510:	andeq	lr, r2, r4, asr r2
   12514:	andeq	lr, r2, r0, ror #4
   12518:	andeq	lr, r2, ip, lsl #6
   1251c:	andeq	lr, r2, r8, lsr r4
   12520:	mov	r3, r1
   12524:	cmp	r0, #0
   12528:	sbcs	r3, r3, #0
   1252c:	blt	123ec <__assert_fail@plt+0xf10>
   12530:	mov	r1, #1
   12534:	mov	r3, #0
   12538:	mov	r2, #0
   1253c:	mov	r0, r5
   12540:	str	r1, [sp]
   12544:	bl	112a8 <lseek64@plt>
   12548:	cmp	r0, #0
   1254c:	sbcs	r3, r1, #0
   12550:	blt	125ec <__assert_fail@plt+0x1110>
   12554:	cmp	r9, r1
   12558:	cmpeq	r8, r0
   1255c:	beq	12224 <__assert_fail@plt+0xd48>
   12560:	subs	ip, r8, r0
   12564:	sbc	r3, r9, r1
   12568:	str	ip, [sp, #80]	; 0x50
   1256c:	str	r3, [sp, #84]	; 0x54
   12570:	ldrd	r0, [sp, #80]	; 0x50
   12574:	cmp	r6, r0
   12578:	sbcs	r3, r7, r1
   1257c:	movlt	r3, #1
   12580:	movge	r3, #0
   12584:	orrs	r3, r3, r1, lsr #31
   12588:	beq	12598 <__assert_fail@plt+0x10bc>
   1258c:	ldr	r3, [fp, #8]
   12590:	cmp	r3, #1
   12594:	bne	128c4 <__assert_fail@plt+0x13e8>
   12598:	mov	r1, #1
   1259c:	mov	r0, #0
   125a0:	ldrd	r2, [sp, #80]	; 0x50
   125a4:	str	r1, [sp]
   125a8:	bl	112a8 <lseek64@plt>
   125ac:	cmp	r0, #0
   125b0:	sbcs	r3, r1, #0
   125b4:	bge	12224 <__assert_fail@plt+0xd48>
   125b8:	ldr	r3, [sp, #40]	; 0x28
   125bc:	ldr	r5, [r3]
   125c0:	cmp	r5, #0
   125c4:	bne	121d4 <__assert_fail@plt+0xcf8>
   125c8:	mov	r2, #5
   125cc:	movw	r1, #53204	; 0xcfd4
   125d0:	movt	r1, #1
   125d4:	mov	r0, r5
   125d8:	bl	11230 <dcgettext@plt>
   125dc:	mov	r2, r0
   125e0:	mov	r1, r5
   125e4:	mov	r0, r5
   125e8:	bl	13a8c <__assert_fail@plt+0x25b0>
   125ec:	ldr	r3, [sp, #40]	; 0x28
   125f0:	ldr	r5, [r3]
   125f4:	b	121d4 <__assert_fail@plt+0xcf8>
   125f8:	movw	r2, #19652	; 0x4cc4
   125fc:	movt	r2, #1
   12600:	cmp	r1, #0
   12604:	movw	r3, #20032	; 0x4e40
   12608:	movt	r3, #1
   1260c:	moveq	r3, r2
   12610:	mov	r2, #0
   12614:	strb	r2, [r4, #272]	; 0x110
   12618:	b	11818 <__assert_fail@plt+0x33c>
   1261c:	cmp	r1, #0
   12620:	bne	12630 <__assert_fail@plt+0x1154>
   12624:	ldrb	r3, [r4, #88]	; 0x58
   12628:	cmp	r3, #0
   1262c:	beq	12640 <__assert_fail@plt+0x1164>
   12630:	mov	r2, #0
   12634:	mov	r3, #0
   12638:	mov	r0, #0
   1263c:	bl	13b34 <__assert_fail@plt+0x2658>
   12640:	ldrb	r3, [r4, #281]	; 0x119
   12644:	cmp	r3, #0
   12648:	bne	12658 <__assert_fail@plt+0x117c>
   1264c:	ldrb	r3, [r4, #89]	; 0x59
   12650:	cmp	r3, #0
   12654:	beq	12324 <__assert_fail@plt+0xe48>
   12658:	mov	r2, #0
   1265c:	mov	r3, #0
   12660:	mov	r0, #1
   12664:	bl	13b34 <__assert_fail@plt+0x2658>
   12668:	b	12324 <__assert_fail@plt+0xe48>
   1266c:	ldr	ip, [r4, #108]	; 0x6c
   12670:	mov	lr, #0
   12674:	ldrd	r0, [sp, #40]	; 0x28
   12678:	asr	r3, ip, #31
   1267c:	mov	r2, ip
   12680:	cmp	r1, r0, asr #31
   12684:	strd	r2, [sp, #48]	; 0x30
   12688:	bne	12cec <__assert_fail@plt+0x1810>
   1268c:	smull	r2, r3, r0, ip
   12690:	mov	r0, r2
   12694:	cmp	lr, #0
   12698:	str	r0, [sp, #48]	; 0x30
   1269c:	movne	sl, #1
   126a0:	str	r3, [sp, #52]	; 0x34
   126a4:	bne	11b4c <__assert_fail@plt+0x670>
   126a8:	b	11b2c <__assert_fail@plt+0x650>
   126ac:	tst	sl, #4
   126b0:	beq	119d4 <__assert_fail@plt+0x4f8>
   126b4:	ldr	r3, [pc, #-444]	; 12500 <__assert_fail@plt+0x1024>
   126b8:	movw	r1, #46576	; 0xb5f0
   126bc:	movt	r1, #1
   126c0:	add	r2, r3, #255	; 0xff
   126c4:	ldrb	r3, [r5, #1]!
   126c8:	add	r3, r1, r3
   126cc:	cmp	r5, r2
   126d0:	ldrb	r3, [r3, #1208]	; 0x4b8
   126d4:	strb	r3, [r5]
   126d8:	bne	126c4 <__assert_fail@plt+0x11e8>
   126dc:	b	119bc <__assert_fail@plt+0x4e0>
   126e0:	tst	sl, #32
   126e4:	beq	1198c <__assert_fail@plt+0x4b0>
   126e8:	bl	11338 <__ctype_tolower_loc@plt>
   126ec:	ldr	r3, [pc, #-500]	; 12500 <__assert_fail@plt+0x1024>
   126f0:	ldr	r0, [r0]
   126f4:	add	r1, r3, #255	; 0xff
   126f8:	mov	r3, r5
   126fc:	ldrb	r2, [r3, #1]!
   12700:	ldr	r2, [r0, r2, lsl #2]
   12704:	cmp	r1, r3
   12708:	strb	r2, [r3]
   1270c:	bne	126fc <__assert_fail@plt+0x1220>
   12710:	b	11984 <__assert_fail@plt+0x4a8>
   12714:	ldrd	r2, [sp, #56]	; 0x38
   12718:	orrs	r1, r2, r3
   1271c:	ldrne	r8, [pc, #-540]	; 12508 <__assert_fail@plt+0x102c>
   12720:	strdne	r2, [r8]
   12724:	b	117e4 <__assert_fail@plt+0x308>
   12728:	cmp	r1, r3
   1272c:	cmpeq	r0, r2
   12730:	strdne	r0, [fp, #32]
   12734:	b	117b8 <__assert_fail@plt+0x2dc>
   12738:	ldr	r3, [r4, #108]	; 0x6c
   1273c:	cmp	r3, r5
   12740:	beq	12ba4 <__assert_fail@plt+0x16c8>
   12744:	ldr	r3, [r4, #32]
   12748:	ldr	r2, [r4, #36]	; 0x24
   1274c:	adds	r3, r3, #1
   12750:	adc	r2, r2, #0
   12754:	str	r3, [r4, #32]
   12758:	str	r2, [r4, #36]	; 0x24
   1275c:	b	11cd0 <__assert_fail@plt+0x7f4>
   12760:	ldrd	r6, [sp, #40]	; 0x28
   12764:	mov	r0, #0
   12768:	cmp	r7, r6, asr #31
   1276c:	mov	r6, r2
   12770:	asr	r7, r2, #31
   12774:	strd	r6, [sp, #48]	; 0x30
   12778:	bne	12d2c <__assert_fail@plt+0x1850>
   1277c:	ldr	r3, [sp, #40]	; 0x28
   12780:	smull	r2, r3, r3, r2
   12784:	mov	lr, r2
   12788:	cmp	r0, #0
   1278c:	mov	r6, lr
   12790:	mov	r7, r3
   12794:	beq	132e4 <__assert_fail@plt+0x1e08>
   12798:	tst	ip, #512	; 0x200
   1279c:	beq	13304 <__assert_fail@plt+0x1e28>
   127a0:	mov	r1, sl
   127a4:	movw	r3, #438	; 0x1b6
   127a8:	orr	r2, r5, #2
   127ac:	mov	r0, #1
   127b0:	bl	14b08 <__assert_fail@plt+0x362c>
   127b4:	cmp	r0, #0
   127b8:	bge	11ac8 <__assert_fail@plt+0x5ec>
   127bc:	b	11aac <__assert_fail@plt+0x5d0>
   127c0:	ldr	r2, [sp, #96]	; 0x60
   127c4:	cmp	r2, #0
   127c8:	beq	11c80 <__assert_fail@plt+0x7a4>
   127cc:	mov	r1, #0
   127d0:	ldr	r0, [r4, #124]	; 0x7c
   127d4:	bl	113d4 <memset@plt>
   127d8:	ldr	r5, [sp, #96]	; 0x60
   127dc:	b	11c6c <__assert_fail@plt+0x790>
   127e0:	mov	ip, #0
   127e4:	movw	r3, #13512	; 0x34c8
   127e8:	movt	r3, #1
   127ec:	add	r1, sp, #96	; 0x60
   127f0:	mov	r2, ip
   127f4:	mov	r0, #10
   127f8:	str	r3, [sp, #96]	; 0x60
   127fc:	str	ip, [sp, #228]	; 0xe4
   12800:	bl	11284 <sigaction@plt>
   12804:	b	11574 <__assert_fail@plt+0x98>
   12808:	mov	ip, #-1073741824	; 0xc0000000
   1280c:	movw	r3, #13496	; 0x34b8
   12810:	movt	r3, #1
   12814:	mov	r2, #0
   12818:	add	r1, sp, #96	; 0x60
   1281c:	mov	r0, #2
   12820:	str	r3, [sp, #96]	; 0x60
   12824:	str	ip, [sp, #228]	; 0xe4
   12828:	bl	11284 <sigaction@plt>
   1282c:	b	11588 <__assert_fail@plt+0xac>
   12830:	mov	r2, #5
   12834:	mov	r0, r5
   12838:	movw	r1, #52936	; 0xcec8
   1283c:	movt	r1, #1
   12840:	bl	11230 <dcgettext@plt>
   12844:	mov	r3, r0
   12848:	mov	r2, r0
   1284c:	mov	r1, r6
   12850:	mov	r0, r5
   12854:	str	r3, [r4, #128]	; 0x80
   12858:	bl	14bcc <__assert_fail@plt+0x36f0>
   1285c:	b	11a08 <__assert_fail@plt+0x52c>
   12860:	movw	r2, #52652	; 0xcdac
   12864:	movt	r2, #1
   12868:	mov	r1, sl
   1286c:	mov	r3, #115	; 0x73
   12870:	ldrb	r0, [r1], #1
   12874:	cmp	r0, r3
   12878:	bne	12dd0 <__assert_fail@plt+0x18f4>
   1287c:	ldrb	r3, [r2, #1]!
   12880:	cmp	r3, #0
   12884:	bne	12870 <__assert_fail@plt+0x1394>
   12888:	ldrb	r3, [r1]
   1288c:	cmp	r3, #0
   12890:	cmpne	r3, #61	; 0x3d
   12894:	bne	12dd0 <__assert_fail@plt+0x18f4>
   12898:	mov	r0, r8
   1289c:	movw	r3, #52660	; 0xcdb4
   128a0:	movt	r3, #1
   128a4:	mov	r2, #1
   128a8:	ldr	r1, [pc, #-940]	; 12504 <__assert_fail@plt+0x1028>
   128ac:	bl	14854 <__assert_fail@plt+0x3378>
   128b0:	str	r0, [fp, #8]
   128b4:	b	11708 <__assert_fail@plt+0x22c>
   128b8:	add	r8, r8, #1
   128bc:	str	lr, [sp, #56]	; 0x38
   128c0:	b	11e3c <__assert_fail@plt+0x960>
   128c4:	mov	r2, #5
   128c8:	mov	r0, r5
   128cc:	movw	r1, #53156	; 0xcfa4
   128d0:	movt	r1, #1
   128d4:	bl	11230 <dcgettext@plt>
   128d8:	mov	r2, r0
   128dc:	mov	r1, r5
   128e0:	mov	r0, r5
   128e4:	bl	13a8c <__assert_fail@plt+0x25b0>
   128e8:	b	12598 <__assert_fail@plt+0x10bc>
   128ec:	ldr	r1, [fp, #32]
   128f0:	mvn	r3, #-2147483648	; 0x80000000
   128f4:	mvn	r2, #2
   128f8:	ldr	r0, [fp, #36]	; 0x24
   128fc:	subs	r1, r1, #1
   12900:	str	r1, [sp, #64]	; 0x40
   12904:	sbc	r1, r0, #0
   12908:	str	r1, [sp, #68]	; 0x44
   1290c:	ldrd	r0, [sp, #64]	; 0x40
   12910:	cmp	r1, r3
   12914:	cmpeq	r0, r2
   12918:	bls	11808 <__assert_fail@plt+0x32c>
   1291c:	orr	r3, r7, r6
   12920:	ands	r3, r3, #65536	; 0x10000
   12924:	bne	11808 <__assert_fail@plt+0x32c>
   12928:	strb	r3, [r4, #272]	; 0x110
   1292c:	movw	r3, #19652	; 0x4cc4
   12930:	movt	r3, #1
   12934:	b	11818 <__assert_fail@plt+0x33c>
   12938:	subs	r1, r2, r5
   1293c:	sbc	r3, r3, r6
   12940:	str	r1, [sp, #72]	; 0x48
   12944:	str	r3, [sp, #76]	; 0x4c
   12948:	ldrd	r0, [sp, #48]	; 0x30
   1294c:	ldrd	r2, [sp, #72]	; 0x48
   12950:	cmp	r3, r1
   12954:	cmpeq	r2, r0
   12958:	bne	11b90 <__assert_fail@plt+0x6b4>
   1295c:	b	11bd8 <__assert_fail@plt+0x6fc>
   12960:	mov	r2, #0
   12964:	mov	r3, #0
   12968:	mov	r0, #1
   1296c:	bl	13b34 <__assert_fail@plt+0x2658>
   12970:	subs	r5, r0, #0
   12974:	bne	12324 <__assert_fail@plt+0xe48>
   12978:	mov	r3, #1
   1297c:	ldr	r6, [r9]
   12980:	mov	r2, #5
   12984:	movw	r1, #53264	; 0xd010
   12988:	movt	r1, #1
   1298c:	str	r3, [sp, #48]	; 0x30
   12990:	bl	11230 <dcgettext@plt>
   12994:	mov	r7, r0
   12998:	mov	r1, #3
   1299c:	ldr	r2, [r4, #132]	; 0x84
   129a0:	mov	r0, r5
   129a4:	bl	18ee0 <__assert_fail@plt+0x7a04>
   129a8:	mov	r3, r0
   129ac:	mov	r2, r7
   129b0:	mov	r1, r6
   129b4:	mov	r0, r5
   129b8:	bl	13a8c <__assert_fail@plt+0x25b0>
   129bc:	b	12324 <__assert_fail@plt+0xe48>
   129c0:	bl	13b34 <__assert_fail@plt+0x2658>
   129c4:	subs	r5, r0, #0
   129c8:	bne	12318 <__assert_fail@plt+0xe3c>
   129cc:	mov	r3, #1
   129d0:	ldr	r6, [r9]
   129d4:	mov	r2, #5
   129d8:	movw	r1, #53264	; 0xd010
   129dc:	movt	r1, #1
   129e0:	str	r3, [sp, #48]	; 0x30
   129e4:	bl	11230 <dcgettext@plt>
   129e8:	mov	r7, r0
   129ec:	mov	r1, #3
   129f0:	ldr	r2, [r4, #128]	; 0x80
   129f4:	mov	r0, r5
   129f8:	bl	18ee0 <__assert_fail@plt+0x7a04>
   129fc:	mov	r3, r0
   12a00:	mov	r2, r7
   12a04:	mov	r1, r6
   12a08:	mov	r0, r5
   12a0c:	bl	13a8c <__assert_fail@plt+0x25b0>
   12a10:	b	12318 <__assert_fail@plt+0xe3c>
   12a14:	ldr	r9, [sp, #40]	; 0x28
   12a18:	ldr	r3, [sp, #56]	; 0x38
   12a1c:	cmn	r3, #1
   12a20:	beq	12a60 <__assert_fail@plt+0x1584>
   12a24:	ldr	r2, [r4, #116]	; 0x74
   12a28:	uxtb	r3, r3
   12a2c:	strb	r3, [sp, #96]	; 0x60
   12a30:	tst	r2, #8
   12a34:	bne	12dc0 <__assert_fail@plt+0x18e4>
   12a38:	tst	r2, #16
   12a3c:	bne	12ec4 <__assert_fail@plt+0x19e8>
   12a40:	ldr	r1, [r4, #124]	; 0x7c
   12a44:	ldr	r2, [r4, #284]	; 0x11c
   12a48:	strb	r3, [r1, r2]
   12a4c:	add	r3, r2, #1
   12a50:	ldr	r2, [r4, #120]	; 0x78
   12a54:	str	r3, [r4, #284]	; 0x11c
   12a58:	cmp	r3, r2
   12a5c:	bge	13018 <__assert_fail@plt+0x1b3c>
   12a60:	ldr	r3, [r4, #116]	; 0x74
   12a64:	tst	r3, #8
   12a68:	beq	12ac4 <__assert_fail@plt+0x15e8>
   12a6c:	ldr	r5, [r4, #288]	; 0x120
   12a70:	cmp	r5, #0
   12a74:	ble	12ac4 <__assert_fail@plt+0x15e8>
   12a78:	ldr	r3, [r4, #292]	; 0x124
   12a7c:	cmp	r3, r5
   12a80:	bgt	12a98 <__assert_fail@plt+0x15bc>
   12a84:	b	12ad0 <__assert_fail@plt+0x15f4>
   12a88:	ldr	r3, [r4, #292]	; 0x124
   12a8c:	add	r5, r5, #1
   12a90:	cmp	r5, r3
   12a94:	bge	12ac4 <__assert_fail@plt+0x15e8>
   12a98:	ldrb	r1, [fp, #26]
   12a9c:	ldr	r2, [r4, #124]	; 0x7c
   12aa0:	ldr	r3, [r4, #284]	; 0x11c
   12aa4:	strb	r1, [r2, r3]
   12aa8:	add	r3, r3, #1
   12aac:	ldr	r2, [r4, #120]	; 0x78
   12ab0:	str	r3, [r4, #284]	; 0x11c
   12ab4:	cmp	r3, r2
   12ab8:	blt	12a88 <__assert_fail@plt+0x15ac>
   12abc:	bl	15228 <__assert_fail@plt+0x3d4c>
   12ac0:	b	12a88 <__assert_fail@plt+0x15ac>
   12ac4:	ldr	r3, [r4, #288]	; 0x120
   12ac8:	cmp	r3, #0
   12acc:	beq	12b00 <__assert_fail@plt+0x1624>
   12ad0:	ldr	r3, [r4, #116]	; 0x74
   12ad4:	tst	r3, #16
   12ad8:	beq	12b00 <__assert_fail@plt+0x1624>
   12adc:	ldrb	r1, [fp, #25]
   12ae0:	ldr	r2, [r4, #124]	; 0x7c
   12ae4:	ldr	r3, [r4, #284]	; 0x11c
   12ae8:	strb	r1, [r2, r3]
   12aec:	add	r3, r3, #1
   12af0:	ldr	r2, [r4, #120]	; 0x78
   12af4:	str	r3, [r4, #284]	; 0x11c
   12af8:	cmp	r3, r2
   12afc:	bge	12eec <__assert_fail@plt+0x1a10>
   12b00:	ldr	r1, [r4, #284]	; 0x11c
   12b04:	cmp	r1, #0
   12b08:	bne	12bd0 <__assert_fail@plt+0x16f4>
   12b0c:	ldrb	r3, [r4, #280]	; 0x118
   12b10:	cmp	r3, #0
   12b14:	bne	12c18 <__assert_fail@plt+0x173c>
   12b18:	ldr	r3, [r4, #116]	; 0x74
   12b1c:	tst	r3, #49152	; 0xc000
   12b20:	beq	122e0 <__assert_fail@plt+0xe04>
   12b24:	ldr	r3, [fp, #8]
   12b28:	cmp	r3, #4
   12b2c:	bne	122e0 <__assert_fail@plt+0xe04>
   12b30:	ldrd	r0, [fp]
   12b34:	cmp	r0, #0
   12b38:	sbcs	r3, r1, #0
   12b3c:	blt	122e0 <__assert_fail@plt+0xe04>
   12b40:	ldrd	r2, [r4, #8]
   12b44:	cmp	r0, r2
   12b48:	sbcs	r3, r1, r3
   12b4c:	bge	122e0 <__assert_fail@plt+0xe04>
   12b50:	mov	r0, #0
   12b54:	mov	r1, #0
   12b58:	bl	134e0 <__assert_fail@plt+0x2004>
   12b5c:	b	122e0 <__assert_fail@plt+0xe04>
   12b60:	mov	r0, sl
   12b64:	mov	r2, #5
   12b68:	ldr	r8, [pc, #-1640]	; 12508 <__assert_fail@plt+0x102c>
   12b6c:	movw	r1, #52972	; 0xceec
   12b70:	movt	r1, #1
   12b74:	bl	11230 <dcgettext@plt>
   12b78:	mov	r3, r0
   12b7c:	mov	r2, r0
   12b80:	mov	r1, r5
   12b84:	mov	r0, #1
   12b88:	str	r3, [r4, #132]	; 0x84
   12b8c:	bl	14bcc <__assert_fail@plt+0x36f0>
   12b90:	b	11ae0 <__assert_fail@plt+0x604>
   12b94:	mov	r1, #10
   12b98:	ldr	r0, [pc, #-1684]	; 1250c <__assert_fail@plt+0x1030>
   12b9c:	bl	11314 <sigaddset@plt>
   12ba0:	b	11528 <__assert_fail@plt+0x4c>
   12ba4:	ldr	r3, [r4, #40]	; 0x28
   12ba8:	ldr	r2, [r4, #44]	; 0x2c
   12bac:	adds	r3, r3, #1
   12bb0:	adc	r2, r2, #0
   12bb4:	str	r3, [r4, #40]	; 0x28
   12bb8:	str	r2, [r4, #44]	; 0x2c
   12bbc:	b	11cd0 <__assert_fail@plt+0x7f4>
   12bc0:	ldr	r2, [r4, #116]	; 0x74
   12bc4:	tst	r2, #128	; 0x80
   12bc8:	beq	11e3c <__assert_fail@plt+0x960>
   12bcc:	b	124e4 <__assert_fail@plt+0x1008>
   12bd0:	ldr	r0, [r4, #124]	; 0x7c
   12bd4:	bl	14ebc <__assert_fail@plt+0x39e0>
   12bd8:	ldrd	r2, [r4, #8]
   12bdc:	adds	r6, r2, r0
   12be0:	adc	r7, r3, r0, asr #31
   12be4:	cmp	r0, #0
   12be8:	strd	r6, [r4, #8]
   12bec:	beq	12c08 <__assert_fail@plt+0x172c>
   12bf0:	ldr	r3, [r4, #32]
   12bf4:	ldr	r2, [r4, #36]	; 0x24
   12bf8:	adds	r3, r3, #1
   12bfc:	adc	r2, r2, #0
   12c00:	str	r3, [r4, #32]
   12c04:	str	r2, [r4, #36]	; 0x24
   12c08:	ldr	r3, [r4, #284]	; 0x11c
   12c0c:	cmp	r0, r3
   12c10:	beq	12b0c <__assert_fail@plt+0x1630>
   12c14:	b	1229c <__assert_fail@plt+0xdc0>
   12c18:	add	r1, sp, #96	; 0x60
   12c1c:	mov	r0, #1
   12c20:	bl	14b74 <__assert_fail@plt+0x3698>
   12c24:	cmp	r0, #0
   12c28:	bne	13020 <__assert_fail@plt+0x1b44>
   12c2c:	ldr	r3, [sp, #112]	; 0x70
   12c30:	and	r3, r3, #61440	; 0xf000
   12c34:	cmp	r3, #32768	; 0x8000
   12c38:	bne	12b18 <__assert_fail@plt+0x163c>
   12c3c:	mov	r1, #1
   12c40:	mov	r3, #0
   12c44:	mov	r2, #0
   12c48:	mov	r0, r1
   12c4c:	str	r1, [sp]
   12c50:	bl	112a8 <lseek64@plt>
   12c54:	cmp	r0, #0
   12c58:	mov	r6, r0
   12c5c:	sbcs	r3, r1, #0
   12c60:	mov	r7, r1
   12c64:	blt	12b18 <__assert_fail@plt+0x163c>
   12c68:	ldrd	r2, [sp, #144]	; 0x90
   12c6c:	cmp	r2, r0
   12c70:	sbcs	r3, r3, r1
   12c74:	bge	12b18 <__assert_fail@plt+0x163c>
   12c78:	b	12c88 <__assert_fail@plt+0x17ac>
   12c7c:	ldr	r5, [r9]
   12c80:	cmp	r5, #4
   12c84:	bne	12cac <__assert_fail@plt+0x17d0>
   12c88:	bl	14a68 <__assert_fail@plt+0x358c>
   12c8c:	mov	r2, r6
   12c90:	mov	r3, r7
   12c94:	mov	r0, #1
   12c98:	bl	1120c <ftruncate64@plt>
   12c9c:	cmp	r0, #0
   12ca0:	blt	12c7c <__assert_fail@plt+0x17a0>
   12ca4:	beq	12b18 <__assert_fail@plt+0x163c>
   12ca8:	ldr	r5, [r9]
   12cac:	mov	r2, #5
   12cb0:	movw	r1, #53068	; 0xcf4c
   12cb4:	movt	r1, #1
   12cb8:	mov	r0, #0
   12cbc:	bl	11230 <dcgettext@plt>
   12cc0:	mov	r8, r0
   12cc4:	mov	r0, #4
   12cc8:	ldr	r1, [r4, #132]	; 0x84
   12ccc:	bl	18e04 <__assert_fail@plt+0x7928>
   12cd0:	mov	r2, r8
   12cd4:	mov	r1, r5
   12cd8:	strd	r6, [sp]
   12cdc:	str	r0, [sp, #8]
   12ce0:	mov	r0, #0
   12ce4:	bl	13a8c <__assert_fail@plt+0x25b0>
   12ce8:	b	1305c <__assert_fail@plt+0x1b80>
   12cec:	ldrd	r0, [sp, #40]	; 0x28
   12cf0:	umull	r2, r3, r0, ip
   12cf4:	cmp	r1, #0
   12cf8:	umull	r0, r1, ip, r1
   12cfc:	mov	r6, r2
   12d00:	mov	r7, r3
   12d04:	blt	12e98 <__assert_fail@plt+0x19bc>
   12d08:	cmp	ip, #0
   12d0c:	blt	12e88 <__assert_fail@plt+0x19ac>
   12d10:	adds	r3, r0, r7
   12d14:	mov	r2, #0
   12d18:	adc	r2, r1, r2
   12d1c:	cmp	r2, r3, asr #31
   12d20:	bne	1315c <__assert_fail@plt+0x1c80>
   12d24:	mov	r0, r6
   12d28:	b	12694 <__assert_fail@plt+0x11b8>
   12d2c:	ldrd	r6, [sp, #40]	; 0x28
   12d30:	ldr	r3, [sp, #44]	; 0x2c
   12d34:	cmp	r7, #0
   12d38:	umull	r6, r7, r6, r2
   12d3c:	strd	r6, [sp, #56]	; 0x38
   12d40:	umull	r6, r7, r2, r3
   12d44:	blt	12eb8 <__assert_fail@plt+0x19dc>
   12d48:	cmp	r2, #0
   12d4c:	blt	12ea4 <__assert_fail@plt+0x19c8>
   12d50:	ldr	r3, [sp, #60]	; 0x3c
   12d54:	mov	lr, #0
   12d58:	adds	r3, r6, r3
   12d5c:	adc	lr, r7, lr
   12d60:	cmp	lr, r3, asr #31
   12d64:	bne	13134 <__assert_fail@plt+0x1c58>
   12d68:	ldr	lr, [sp, #56]	; 0x38
   12d6c:	b	12788 <__assert_fail@plt+0x12ac>
   12d70:	mov	r3, #1
   12d74:	ldr	r9, [sp, #40]	; 0x28
   12d78:	str	r3, [sp, #48]	; 0x30
   12d7c:	b	12a18 <__assert_fail@plt+0x153c>
   12d80:	ldrb	r1, [r4, #88]	; 0x58
   12d84:	ldrb	r2, [r4, #592]	; 0x250
   12d88:	ldrb	r0, [r4, #281]	; 0x119
   12d8c:	ldr	r9, [sp, #40]	; 0x28
   12d90:	orr	r1, r1, r2
   12d94:	ldrb	r2, [r4, #89]	; 0x59
   12d98:	cmp	r0, #0
   12d9c:	strb	r1, [r4, #88]	; 0x58
   12da0:	beq	12db0 <__assert_fail@plt+0x18d4>
   12da4:	tst	r3, #512	; 0x200
   12da8:	moveq	r5, #1
   12dac:	movne	r5, #0
   12db0:	orr	r3, r2, r5
   12db4:	and	r3, r3, #1
   12db8:	strb	r3, [r4, #89]	; 0x59
   12dbc:	b	12a18 <__assert_fail@plt+0x153c>
   12dc0:	mov	r1, #1
   12dc4:	add	r0, sp, #96	; 0x60
   12dc8:	bl	15304 <__assert_fail@plt+0x3e28>
   12dcc:	b	12a60 <__assert_fail@plt+0x1584>
   12dd0:	mov	r3, #0
   12dd4:	add	r1, sp, #96	; 0x60
   12dd8:	mov	r0, r8
   12ddc:	str	r3, [sp, #96]	; 0x60
   12de0:	bl	13fe4 <__assert_fail@plt+0x2b08>
   12de4:	movw	r2, #52684	; 0xcdcc
   12de8:	movt	r2, #1
   12dec:	mov	ip, sl
   12df0:	mov	r3, #105	; 0x69
   12df4:	ldrb	lr, [ip], #1
   12df8:	cmp	lr, r3
   12dfc:	bne	12ef4 <__assert_fail@plt+0x1a18>
   12e00:	ldrb	r3, [r2, #1]!
   12e04:	cmp	r3, #0
   12e08:	bne	12df4 <__assert_fail@plt+0x1918>
   12e0c:	ldrb	r3, [ip]
   12e10:	cmp	r3, #0
   12e14:	cmpne	r3, #61	; 0x3d
   12e18:	ldreq	ip, [pc, #-2320]	; 12510 <__assert_fail@plt+0x1034>
   12e1c:	mvneq	r2, #-2147483647	; 0x80000001
   12e20:	moveq	r3, #0
   12e24:	bne	12ef4 <__assert_fail@plt+0x1a18>
   12e28:	cmp	r0, #1
   12e2c:	sbcs	lr, r1, #0
   12e30:	bge	12ed4 <__assert_fail@plt+0x19f8>
   12e34:	mov	r3, #4
   12e38:	str	r3, [sp, #96]	; 0x60
   12e3c:	ldr	r3, [sp, #96]	; 0x60
   12e40:	cmp	r3, #1
   12e44:	mov	r2, #5
   12e48:	mov	r0, #0
   12e4c:	movw	r1, #52724	; 0xcdf4
   12e50:	movt	r1, #1
   12e54:	moveq	r5, #75	; 0x4b
   12e58:	movne	r5, r0
   12e5c:	bl	11230 <dcgettext@plt>
   12e60:	mov	r4, r0
   12e64:	mov	r0, r8
   12e68:	bl	190b8 <__assert_fail@plt+0x7bdc>
   12e6c:	movw	r2, #52072	; 0xcb68
   12e70:	movt	r2, #1
   12e74:	str	r0, [sp]
   12e78:	mov	r1, r5
   12e7c:	mov	r3, r4
   12e80:	mov	r0, #1
   12e84:	bl	13a8c <__assert_fail@plt+0x25b0>
   12e88:	ldrd	r2, [sp, #40]	; 0x28
   12e8c:	subs	r0, r0, r2
   12e90:	sbc	r1, r1, r3
   12e94:	b	12d10 <__assert_fail@plt+0x1834>
   12e98:	subs	r0, r0, lr
   12e9c:	sbc	r1, r1, ip
   12ea0:	b	12d08 <__assert_fail@plt+0x182c>
   12ea4:	ldr	r3, [sp, #40]	; 0x28
   12ea8:	subs	r6, r6, r3
   12eac:	ldr	r3, [sp, #44]	; 0x2c
   12eb0:	sbc	r7, r7, r3
   12eb4:	b	12d50 <__assert_fail@plt+0x1874>
   12eb8:	subs	r6, r6, r0
   12ebc:	sbc	r7, r7, r2
   12ec0:	b	12d48 <__assert_fail@plt+0x186c>
   12ec4:	mov	r1, #1
   12ec8:	add	r0, sp, #96	; 0x60
   12ecc:	bl	15424 <__assert_fail@plt+0x3f48>
   12ed0:	b	12a60 <__assert_fail@plt+0x1584>
   12ed4:	cmp	r2, r0
   12ed8:	sbcs	r3, r3, r1
   12edc:	bge	13120 <__assert_fail@plt+0x1c44>
   12ee0:	mov	r3, #1
   12ee4:	str	r3, [sp, #96]	; 0x60
   12ee8:	b	12e3c <__assert_fail@plt+0x1960>
   12eec:	bl	15228 <__assert_fail@plt+0x3d4c>
   12ef0:	b	12b00 <__assert_fail@plt+0x1624>
   12ef4:	movw	r3, #52688	; 0xcdd0
   12ef8:	movt	r3, #1
   12efc:	mov	r2, sl
   12f00:	mov	ip, #111	; 0x6f
   12f04:	ldrb	lr, [r2], #1
   12f08:	cmp	lr, ip
   12f0c:	bne	12f38 <__assert_fail@plt+0x1a5c>
   12f10:	ldrb	ip, [r3, #1]!
   12f14:	cmp	ip, #0
   12f18:	bne	12f04 <__assert_fail@plt+0x1a28>
   12f1c:	ldrb	r3, [r2]
   12f20:	cmp	r3, #0
   12f24:	cmpne	r3, #61	; 0x3d
   12f28:	ldreq	ip, [pc, #-2588]	; 12514 <__assert_fail@plt+0x1038>
   12f2c:	mvneq	r2, #-2147483647	; 0x80000001
   12f30:	moveq	r3, #0
   12f34:	beq	12e28 <__assert_fail@plt+0x194c>
   12f38:	movw	r3, #52692	; 0xcdd4
   12f3c:	movt	r3, #1
   12f40:	mov	r2, sl
   12f44:	mov	ip, #98	; 0x62
   12f48:	ldrb	lr, [r2], #1
   12f4c:	cmp	lr, ip
   12f50:	bne	12f7c <__assert_fail@plt+0x1aa0>
   12f54:	ldrb	ip, [r3, #1]!
   12f58:	cmp	ip, #0
   12f5c:	bne	12f48 <__assert_fail@plt+0x1a6c>
   12f60:	ldrb	r3, [r2]
   12f64:	cmp	r3, #0
   12f68:	cmpne	r3, #61	; 0x3d
   12f6c:	addeq	ip, sp, #92	; 0x5c
   12f70:	mvneq	r2, #-2147483647	; 0x80000001
   12f74:	moveq	r3, #0
   12f78:	beq	12e28 <__assert_fail@plt+0x194c>
   12f7c:	movw	r3, #52696	; 0xcdd8
   12f80:	movt	r3, #1
   12f84:	mov	r2, sl
   12f88:	mov	ip, #99	; 0x63
   12f8c:	ldrb	lr, [r2], #1
   12f90:	cmp	lr, ip
   12f94:	bne	12fc0 <__assert_fail@plt+0x1ae4>
   12f98:	ldrb	ip, [r3, #1]!
   12f9c:	cmp	ip, #0
   12fa0:	bne	12f8c <__assert_fail@plt+0x1ab0>
   12fa4:	ldrb	r3, [r2]
   12fa8:	cmp	r3, #0
   12fac:	cmpne	r3, #61	; 0x3d
   12fb0:	ldreq	ip, [pc, #-2720]	; 12518 <__assert_fail@plt+0x103c>
   12fb4:	mvneq	r2, #-2147483648	; 0x80000000
   12fb8:	moveq	r3, #0
   12fbc:	beq	12e28 <__assert_fail@plt+0x194c>
   12fc0:	movw	r3, #52700	; 0xcddc
   12fc4:	movt	r3, #1
   12fc8:	mov	r2, sl
   12fcc:	mov	ip, #115	; 0x73
   12fd0:	ldrb	lr, [r2], #1
   12fd4:	cmp	lr, ip
   12fd8:	bne	13338 <__assert_fail@plt+0x1e5c>
   12fdc:	ldrb	ip, [r3, #1]!
   12fe0:	cmp	ip, #0
   12fe4:	bne	12fd0 <__assert_fail@plt+0x1af4>
   12fe8:	ldrb	r3, [r2]
   12fec:	cmp	r3, #61	; 0x3d
   12ff0:	cmpne	r3, #0
   12ff4:	strdeq	r0, [sp, #48]	; 0x30
   12ff8:	bne	13338 <__assert_fail@plt+0x1e5c>
   12ffc:	cmp	r0, #0
   13000:	sbcs	r3, r1, #0
   13004:	blt	12e34 <__assert_fail@plt+0x1958>
   13008:	ldr	r3, [sp, #96]	; 0x60
   1300c:	cmp	r3, #0
   13010:	beq	11708 <__assert_fail@plt+0x22c>
   13014:	b	12e40 <__assert_fail@plt+0x1964>
   13018:	bl	15228 <__assert_fail@plt+0x3d4c>
   1301c:	b	12a60 <__assert_fail@plt+0x1584>
   13020:	ldr	r5, [r9]
   13024:	mov	r2, #5
   13028:	movw	r1, #52364	; 0xcc8c
   1302c:	movt	r1, #1
   13030:	mov	r0, #0
   13034:	bl	11230 <dcgettext@plt>
   13038:	mov	r6, r0
   1303c:	mov	r0, #4
   13040:	ldr	r1, [r4, #132]	; 0x84
   13044:	bl	18e04 <__assert_fail@plt+0x7928>
   13048:	mov	r3, r0
   1304c:	mov	r2, r6
   13050:	mov	r1, r5
   13054:	mov	r0, #0
   13058:	bl	13a8c <__assert_fail@plt+0x25b0>
   1305c:	mov	r3, #1
   13060:	str	r3, [sp, #48]	; 0x30
   13064:	b	122e0 <__assert_fail@plt+0xe04>
   13068:	ldr	r5, [r9]
   1306c:	mov	r2, #5
   13070:	movw	r1, #52364	; 0xcc8c
   13074:	movt	r1, #1
   13078:	mov	r0, #0
   1307c:	bl	11230 <dcgettext@plt>
   13080:	mov	r6, r0
   13084:	mov	r0, #4
   13088:	ldr	r1, [r4, #132]	; 0x84
   1308c:	bl	18e04 <__assert_fail@plt+0x7928>
   13090:	mov	r3, r0
   13094:	mov	r2, r6
   13098:	mov	r1, r5
   1309c:	mov	r0, #0
   130a0:	bl	13a8c <__assert_fail@plt+0x25b0>
   130a4:	b	11ae0 <__assert_fail@plt+0x604>
   130a8:	movw	r1, #52536	; 0xcd38
   130ac:	movt	r1, #1
   130b0:	mov	r2, #5
   130b4:	bl	11230 <dcgettext@plt>
   130b8:	mov	r4, r0
   130bc:	mov	r0, sl
   130c0:	bl	190b8 <__assert_fail@plt+0x7bdc>
   130c4:	mov	r1, #0
   130c8:	mov	r3, r0
   130cc:	mov	r2, r4
   130d0:	mov	r0, r1
   130d4:	bl	13a8c <__assert_fail@plt+0x25b0>
   130d8:	mov	r0, #1
   130dc:	bl	14318 <__assert_fail@plt+0x2e3c>
   130e0:	ldr	r5, [r9]
   130e4:	mov	r2, #5
   130e8:	movw	r1, #52348	; 0xcc7c
   130ec:	movt	r1, #1
   130f0:	mov	r0, #0
   130f4:	bl	11230 <dcgettext@plt>
   130f8:	mov	r6, r0
   130fc:	mov	r0, #4
   13100:	ldr	r1, [r4, #132]	; 0x84
   13104:	bl	18e04 <__assert_fail@plt+0x7928>
   13108:	mov	r3, r0
   1310c:	mov	r2, r6
   13110:	mov	r1, r5
   13114:	mov	r0, #0
   13118:	bl	13a8c <__assert_fail@plt+0x25b0>
   1311c:	bl	1520c <__assert_fail@plt+0x3d30>
   13120:	ldr	r3, [sp, #96]	; 0x60
   13124:	cmp	r3, #0
   13128:	bne	12e40 <__assert_fail@plt+0x1964>
   1312c:	str	r0, [ip]
   13130:	b	11708 <__assert_fail@plt+0x22c>
   13134:	ldr	r3, [sp, #40]	; 0x28
   13138:	mov	r0, #1
   1313c:	ldr	r1, [sp, #52]	; 0x34
   13140:	ldrd	r6, [sp, #56]	; 0x38
   13144:	mul	r3, r3, r1
   13148:	ldr	r1, [sp, #44]	; 0x2c
   1314c:	mov	lr, r6
   13150:	mla	r2, r2, r1, r3
   13154:	add	r3, r2, r7
   13158:	b	12788 <__assert_fail@plt+0x12ac>
   1315c:	ldr	r2, [sp, #40]	; 0x28
   13160:	mov	lr, #1
   13164:	ldr	r5, [sp, #44]	; 0x2c
   13168:	ldrd	r6, [sp, #48]	; 0x30
   1316c:	mul	r1, r2, r7
   13170:	umull	r2, r3, r2, r6
   13174:	mla	r1, r6, r5, r1
   13178:	mov	r0, r2
   1317c:	add	r3, r1, r3
   13180:	b	12694 <__assert_fail@plt+0x11b8>
   13184:	mov	r2, #5
   13188:	movw	r1, #52632	; 0xcd98
   1318c:	movt	r1, #1
   13190:	mov	r0, #0
   13194:	bl	11230 <dcgettext@plt>
   13198:	mov	r4, r0
   1319c:	movw	r0, #52260	; 0xcc24
   131a0:	movt	r0, #1
   131a4:	bl	190b8 <__assert_fail@plt+0x7bdc>
   131a8:	mov	r1, #0
   131ac:	mov	r3, r4
   131b0:	str	r0, [sp]
   131b4:	movw	r2, #52072	; 0xcb68
   131b8:	movt	r2, #1
   131bc:	mov	r0, r1
   131c0:	bl	13a8c <__assert_fail@plt+0x25b0>
   131c4:	mov	r0, #1
   131c8:	bl	14318 <__assert_fail@plt+0x2e3c>
   131cc:	movw	r1, #52752	; 0xce10
   131d0:	movt	r1, #1
   131d4:	mov	r2, #5
   131d8:	mov	r0, #0
   131dc:	bl	11230 <dcgettext@plt>
   131e0:	mov	r2, r0
   131e4:	mov	r1, #0
   131e8:	mov	r0, #1
   131ec:	bl	13a8c <__assert_fail@plt+0x25b0>
   131f0:	movw	r1, #52952	; 0xced8
   131f4:	movt	r1, #1
   131f8:	ldr	r5, [r9]
   131fc:	mov	r2, #5
   13200:	mov	r0, #0
   13204:	bl	11230 <dcgettext@plt>
   13208:	ldr	r1, [r4, #128]	; 0x80
   1320c:	mov	r6, r0
   13210:	mov	r0, #4
   13214:	bl	18e04 <__assert_fail@plt+0x7928>
   13218:	mov	r3, r0
   1321c:	mov	r2, r6
   13220:	mov	r1, r5
   13224:	mov	r0, #1
   13228:	bl	13a8c <__assert_fail@plt+0x25b0>
   1322c:	movw	r1, #52952	; 0xced8
   13230:	movt	r1, #1
   13234:	ldr	r5, [r9]
   13238:	mov	r2, #5
   1323c:	mov	r0, #0
   13240:	bl	11230 <dcgettext@plt>
   13244:	mov	r6, r0
   13248:	mov	r0, #4
   1324c:	ldr	r1, [r4, #132]	; 0x84
   13250:	b	13214 <__assert_fail@plt+0x1d38>
   13254:	mov	r2, #5
   13258:	movw	r1, #52632	; 0xcd98
   1325c:	movt	r1, #1
   13260:	mov	r0, r8
   13264:	bl	11230 <dcgettext@plt>
   13268:	tst	r7, #4
   1326c:	movw	r2, #52444	; 0xccdc
   13270:	movt	r2, #1
   13274:	mov	r4, r0
   13278:	movw	r0, #52432	; 0xccd0
   1327c:	movt	r0, #1
   13280:	moveq	r0, r2
   13284:	bl	190b8 <__assert_fail@plt+0x7bdc>
   13288:	movw	r2, #52072	; 0xcb68
   1328c:	movt	r2, #1
   13290:	mov	r3, r4
   13294:	mov	r1, r8
   13298:	str	r0, [sp]
   1329c:	mov	r0, r1
   132a0:	bl	13a8c <__assert_fail@plt+0x25b0>
   132a4:	mov	r0, #1
   132a8:	bl	14318 <__assert_fail@plt+0x2e3c>
   132ac:	mov	r2, #5
   132b0:	movw	r1, #52604	; 0xcd7c
   132b4:	movt	r1, #1
   132b8:	mov	r0, r9
   132bc:	bl	11230 <dcgettext@plt>
   132c0:	mov	r4, r0
   132c4:	movw	r0, #52740	; 0xce04
   132c8:	movt	r0, #1
   132cc:	bl	190b8 <__assert_fail@plt+0x7bdc>
   132d0:	movw	r2, #52072	; 0xcb68
   132d4:	movt	r2, #1
   132d8:	mov	r3, r4
   132dc:	mov	r1, r9
   132e0:	b	13298 <__assert_fail@plt+0x1dbc>
   132e4:	ldr	r3, [pc, #-3536]	; 1251c <__assert_fail@plt+0x1040>
   132e8:	ldrd	r2, [r3, #-8]
   132ec:	adds	r0, r2, lr
   132f0:	adcs	r1, r3, r7
   132f4:	mov	r6, r0
   132f8:	mov	r7, r1
   132fc:	bvs	12798 <__assert_fail@plt+0x12bc>
   13300:	b	127a0 <__assert_fail@plt+0x12c4>
   13304:	mov	r2, #5
   13308:	movw	r1, #52988	; 0xcefc
   1330c:	movt	r1, #1
   13310:	mov	r0, #0
   13314:	bl	11230 <dcgettext@plt>
   13318:	ldr	r3, [r4, #120]	; 0x78
   1331c:	mov	r2, r0
   13320:	mov	r1, #0
   13324:	mov	r0, #1
   13328:	ldrd	r4, [sp, #40]	; 0x28
   1332c:	strd	r4, [sp]
   13330:	str	r3, [sp, #8]
   13334:	bl	13a8c <__assert_fail@plt+0x25b0>
   13338:	movw	r3, #52708	; 0xcde4
   1333c:	movt	r3, #1
   13340:	mov	r2, sl
   13344:	mov	ip, #115	; 0x73
   13348:	ldrb	lr, [r2], #1
   1334c:	cmp	lr, ip
   13350:	bne	13374 <__assert_fail@plt+0x1e98>
   13354:	ldrb	ip, [r3, #1]!
   13358:	cmp	ip, #0
   1335c:	bne	13348 <__assert_fail@plt+0x1e6c>
   13360:	ldrb	r3, [r2]
   13364:	cmp	r3, #61	; 0x3d
   13368:	cmpne	r3, #0
   1336c:	strdeq	r0, [sp, #56]	; 0x38
   13370:	beq	12ffc <__assert_fail@plt+0x1b20>
   13374:	movw	r3, #52716	; 0xcdec
   13378:	movt	r3, #1
   1337c:	mov	r2, sl
   13380:	mov	ip, #99	; 0x63
   13384:	ldrb	lr, [r2], #1
   13388:	cmp	lr, ip
   1338c:	bne	133b4 <__assert_fail@plt+0x1ed8>
   13390:	ldrb	ip, [r3, #1]!
   13394:	cmp	ip, #0
   13398:	bne	13384 <__assert_fail@plt+0x1ea8>
   1339c:	ldrb	r3, [r2]
   133a0:	cmp	r3, #61	; 0x3d
   133a4:	cmpne	r3, #0
   133a8:	bne	133b4 <__assert_fail@plt+0x1ed8>
   133ac:	strd	r0, [sp, #40]	; 0x28
   133b0:	b	12ffc <__assert_fail@plt+0x1b20>
   133b4:	movw	r1, #52536	; 0xcd38
   133b8:	movt	r1, #1
   133bc:	mov	r2, #5
   133c0:	mov	r0, #0
   133c4:	b	130b4 <__assert_fail@plt+0x1bd8>
   133c8:	mov	fp, #0
   133cc:	mov	lr, #0
   133d0:	pop	{r1}		; (ldr r1, [sp], #4)
   133d4:	mov	r2, sp
   133d8:	push	{r2}		; (str r2, [sp, #-4]!)
   133dc:	push	{r0}		; (str r0, [sp, #-4]!)
   133e0:	ldr	ip, [pc, #16]	; 133f8 <__assert_fail@plt+0x1f1c>
   133e4:	push	{ip}		; (str ip, [sp, #-4]!)
   133e8:	ldr	r0, [pc, #12]	; 133fc <__assert_fail@plt+0x1f20>
   133ec:	ldr	r3, [pc, #12]	; 13400 <__assert_fail@plt+0x1f24>
   133f0:	bl	11320 <__libc_start_main@plt>
   133f4:	bl	114ac <abort@plt>
   133f8:	andeq	fp, r1, r8, asr #11
   133fc:	andeq	r1, r1, r8, ror #9
   13400:	andeq	fp, r1, r8, ror #10
   13404:	ldr	r3, [pc, #20]	; 13420 <__assert_fail@plt+0x1f44>
   13408:	ldr	r2, [pc, #20]	; 13424 <__assert_fail@plt+0x1f48>
   1340c:	add	r3, pc, r3
   13410:	ldr	r2, [r3, r2]
   13414:	cmp	r2, #0
   13418:	bxeq	lr
   1341c:	b	11350 <__gmon_start__@plt>
   13420:	andeq	sl, r1, ip, ror #23
   13424:	andeq	r0, r0, r0, asr #2
   13428:	ldr	r0, [pc, #24]	; 13448 <__assert_fail@plt+0x1f6c>
   1342c:	ldr	r3, [pc, #24]	; 1344c <__assert_fail@plt+0x1f70>
   13430:	cmp	r3, r0
   13434:	bxeq	lr
   13438:	ldr	r3, [pc, #16]	; 13450 <__assert_fail@plt+0x1f74>
   1343c:	cmp	r3, #0
   13440:	bxeq	lr
   13444:	bx	r3
   13448:	andeq	lr, r2, r4, asr #3
   1344c:	andeq	lr, r2, r4, asr #3
   13450:	andeq	r0, r0, r0
   13454:	ldr	r0, [pc, #36]	; 13480 <__assert_fail@plt+0x1fa4>
   13458:	ldr	r1, [pc, #36]	; 13484 <__assert_fail@plt+0x1fa8>
   1345c:	sub	r1, r1, r0
   13460:	asr	r1, r1, #2
   13464:	add	r1, r1, r1, lsr #31
   13468:	asrs	r1, r1, #1
   1346c:	bxeq	lr
   13470:	ldr	r3, [pc, #16]	; 13488 <__assert_fail@plt+0x1fac>
   13474:	cmp	r3, #0
   13478:	bxeq	lr
   1347c:	bx	r3
   13480:	andeq	lr, r2, r4, asr #3
   13484:	andeq	lr, r2, r4, asr #3
   13488:	andeq	r0, r0, r0
   1348c:	push	{r4, lr}
   13490:	ldr	r4, [pc, #24]	; 134b0 <__assert_fail@plt+0x1fd4>
   13494:	ldrb	r3, [r4]
   13498:	cmp	r3, #0
   1349c:	popne	{r4, pc}
   134a0:	bl	13428 <__assert_fail@plt+0x1f4c>
   134a4:	mov	r3, #1
   134a8:	strb	r3, [r4]
   134ac:	pop	{r4, pc}
   134b0:	andeq	lr, r2, r4, ror #3
   134b4:	b	13454 <__assert_fail@plt+0x1f78>
   134b8:	movw	r3, #57832	; 0xe1e8
   134bc:	movt	r3, #2
   134c0:	str	r0, [r3]
   134c4:	bx	lr
   134c8:	movw	r3, #57832	; 0xe1e8
   134cc:	movt	r3, #2
   134d0:	ldr	r2, [r3, #4]
   134d4:	add	r2, r2, #1
   134d8:	str	r2, [r3, #4]
   134dc:	bx	lr
   134e0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   134e4:	strd	r6, [sp, #8]
   134e8:	strd	sl, [sp, #24]
   134ec:	mov	sl, r0
   134f0:	mov	fp, r1
   134f4:	orrs	r3, sl, fp
   134f8:	strd	r8, [sp, #16]
   134fc:	str	lr, [sp, #32]
   13500:	movne	r8, r0
   13504:	movne	r9, r1
   13508:	vpush	{d8}
   1350c:	sub	sp, sp, #2016	; 0x7e0
   13510:	sub	sp, sp, #12
   13514:	beq	1387c <__assert_fail@plt+0x23a0>
   13518:	mov	r6, #1
   1351c:	mov	r7, #0
   13520:	movw	r4, #57832	; 0xe1e8
   13524:	movt	r4, #2
   13528:	add	r2, sp, #60	; 0x3c
   1352c:	movw	r3, #465	; 0x1d1
   13530:	strd	r6, [sp]
   13534:	strd	r6, [sp, #8]
   13538:	ldrd	r0, [r4, #8]
   1353c:	bl	16010 <__assert_fail@plt+0x4b34>
   13540:	add	r2, sp, #712	; 0x2c8
   13544:	movw	r3, #497	; 0x1f1
   13548:	strd	r6, [sp]
   1354c:	add	r2, r2, #2
   13550:	mov	r5, r0
   13554:	strd	r6, [sp, #8]
   13558:	ldrd	r0, [r4, #8]
   1355c:	bl	16010 <__assert_fail@plt+0x4b34>
   13560:	ldrd	r2, [r4, #16]
   13564:	mov	r6, r0
   13568:	cmp	r2, r8
   1356c:	sbcs	r1, r3, r9
   13570:	bge	137a4 <__assert_fail@plt+0x22c8>
   13574:	subs	r8, r8, r2
   13578:	sbc	r7, r9, r3
   1357c:	mov	r0, r8
   13580:	mov	r1, r7
   13584:	bl	1b280 <__assert_fail@plt+0x9da4>
   13588:	vmov	d6, r0, r1
   1358c:	add	r2, sp, #1360	; 0x550
   13590:	movw	r3, #465	; 0x1d1
   13594:	vldr	d7, [pc, #812]	; 138c8 <__assert_fail@plt+0x23ec>
   13598:	add	r2, r2, #8
   1359c:	str	r8, [sp, #8]
   135a0:	add	r9, pc, #808	; 0x328
   135a4:	ldrd	r8, [r9]
   135a8:	ldrd	r0, [r4, #8]
   135ac:	strd	r8, [sp]
   135b0:	str	r7, [sp, #12]
   135b4:	vdiv.f64	d8, d6, d7
   135b8:	bl	16010 <__assert_fail@plt+0x4b34>
   135bc:	mov	r7, r0
   135c0:	str	r0, [sp, #24]
   135c4:	bl	11380 <strlen@plt>
   135c8:	movw	r3, #48072	; 0xbbc8
   135cc:	movt	r3, #1
   135d0:	ldrh	r1, [r3]
   135d4:	add	r2, r7, r0
   135d8:	ldrb	r3, [r3, #2]
   135dc:	strh	r1, [r7, r0]
   135e0:	strb	r3, [r2, #2]
   135e4:	orrs	r3, sl, fp
   135e8:	beq	13624 <__assert_fail@plt+0x2148>
   135ec:	movw	r7, #57816	; 0xe1d8
   135f0:	movt	r7, #2
   135f4:	ldr	r0, [r7]
   135f8:	ldr	r3, [r0, #20]
   135fc:	ldr	r2, [r0, #24]
   13600:	cmp	r3, r2
   13604:	bcs	138b4 <__assert_fail@plt+0x23d8>
   13608:	add	r2, r3, #1
   1360c:	mov	r1, #13
   13610:	str	r2, [r0, #20]
   13614:	movw	r2, #48040	; 0xbba8
   13618:	movt	r2, #1
   1361c:	strb	r1, [r3]
   13620:	b	13634 <__assert_fail@plt+0x2158>
   13624:	movw	r2, #48048	; 0xbbb0
   13628:	movt	r2, #1
   1362c:	movw	r7, #57816	; 0xe1d8
   13630:	movt	r7, #2
   13634:	mov	r3, #24
   13638:	add	r0, sp, #36	; 0x24
   1363c:	str	r2, [sp]
   13640:	mov	r1, r3
   13644:	mov	r2, #1
   13648:	vstr	d8, [sp, #8]
   1364c:	bl	114d0 <__snprintf_chk@plt>
   13650:	mov	r0, r5
   13654:	bl	11380 <strlen@plt>
   13658:	add	r0, r5, r0
   1365c:	ldrb	r3, [r0, #-2]
   13660:	cmp	r3, #32
   13664:	beq	137ec <__assert_fail@plt+0x2310>
   13668:	mov	r0, r6
   1366c:	bl	11380 <strlen@plt>
   13670:	ldr	r3, [r7]
   13674:	add	r0, r6, r0
   13678:	str	r3, [sp, #28]
   1367c:	ldrb	r3, [r0, #-2]
   13680:	ldrd	r0, [r4, #8]
   13684:	cmp	r3, #32
   13688:	mov	r8, r0
   1368c:	mov	r9, r1
   13690:	beq	1372c <__assert_fail@plt+0x2250>
   13694:	mov	r2, #5
   13698:	movw	r1, #48164	; 0xbc24
   1369c:	movt	r1, #1
   136a0:	mov	r0, #0
   136a4:	bl	11230 <dcgettext@plt>
   136a8:	add	r3, sp, #36	; 0x24
   136ac:	mov	r2, r0
   136b0:	strd	r8, [sp]
   136b4:	mov	r1, #1
   136b8:	str	r5, [sp, #8]
   136bc:	str	r6, [sp, #12]
   136c0:	str	r3, [sp, #16]
   136c4:	ldr	r3, [sp, #24]
   136c8:	ldr	r0, [sp, #28]
   136cc:	str	r3, [sp, #20]
   136d0:	bl	11404 <__fprintf_chk@plt>
   136d4:	mov	r5, r0
   136d8:	orrs	r3, sl, fp
   136dc:	beq	13774 <__assert_fail@plt+0x2298>
   136e0:	cmp	r5, #0
   136e4:	blt	136f4 <__assert_fail@plt+0x2218>
   136e8:	ldr	r3, [r4, #24]
   136ec:	cmp	r3, r5
   136f0:	bgt	1388c <__assert_fail@plt+0x23b0>
   136f4:	str	r5, [r4, #24]
   136f8:	ldrd	r0, [r4, #8]
   136fc:	movw	r3, #57680	; 0xe150
   13700:	movt	r3, #2
   13704:	strd	r0, [r3]
   13708:	add	sp, sp, #2016	; 0x7e0
   1370c:	add	sp, sp, #12
   13710:	vpop	{d8}
   13714:	ldrd	r4, [sp]
   13718:	ldrd	r6, [sp, #8]
   1371c:	ldrd	r8, [sp, #16]
   13720:	ldrd	sl, [sp, #24]
   13724:	add	sp, sp, #32
   13728:	pop	{pc}		; (ldr pc, [sp], #4)
   1372c:	mov	r2, #5
   13730:	movw	r1, #48132	; 0xbc04
   13734:	movt	r1, #1
   13738:	mov	r0, #0
   1373c:	bl	11230 <dcgettext@plt>
   13740:	add	r3, sp, #36	; 0x24
   13744:	mov	r2, r0
   13748:	strd	r8, [sp]
   1374c:	mov	r1, #1
   13750:	str	r5, [sp, #8]
   13754:	str	r3, [sp, #12]
   13758:	ldr	r3, [sp, #24]
   1375c:	ldr	r0, [sp, #28]
   13760:	str	r3, [sp, #16]
   13764:	bl	11404 <__fprintf_chk@plt>
   13768:	orrs	r3, sl, fp
   1376c:	mov	r5, r0
   13770:	bne	136e0 <__assert_fail@plt+0x2204>
   13774:	ldr	r0, [r7]
   13778:	ldr	r3, [r0, #20]
   1377c:	ldr	r2, [r0, #24]
   13780:	cmp	r3, r2
   13784:	addcc	r1, r3, #1
   13788:	movcc	r2, #10
   1378c:	strcc	r1, [r0, #20]
   13790:	strbcc	r2, [r3]
   13794:	bcc	136f8 <__assert_fail@plt+0x221c>
   13798:	mov	r1, #10
   1379c:	bl	11434 <__overflow@plt>
   137a0:	b	136f8 <__assert_fail@plt+0x221c>
   137a4:	mov	r2, #5
   137a8:	movw	r1, #48056	; 0xbbb8
   137ac:	movt	r1, #1
   137b0:	mov	r0, #0
   137b4:	vldr	d8, [pc, #284]	; 138d8 <__assert_fail@plt+0x23fc>
   137b8:	bl	11230 <dcgettext@plt>
   137bc:	movw	r2, #48068	; 0xbbc4
   137c0:	movt	r2, #1
   137c4:	movw	r3, #654	; 0x28e
   137c8:	str	r0, [sp, #4]
   137cc:	add	r0, sp, #1360	; 0x550
   137d0:	mov	r1, r3
   137d4:	add	r0, r0, #8
   137d8:	str	r2, [sp]
   137dc:	mov	r2, #1
   137e0:	str	r0, [sp, #24]
   137e4:	bl	114d0 <__snprintf_chk@plt>
   137e8:	b	135e4 <__assert_fail@plt+0x2108>
   137ec:	ldr	r5, [r4, #8]
   137f0:	mov	r3, #0
   137f4:	mvn	r2, #0
   137f8:	ldr	r6, [r4, #12]
   137fc:	ldr	r9, [r7]
   13800:	mov	r0, r5
   13804:	cmp	r6, r3
   13808:	mov	r1, r6
   1380c:	cmpeq	r5, r2
   13810:	movls	r3, r5
   13814:	bls	13830 <__assert_fail@plt+0x2354>
   13818:	movw	r2, #16960	; 0x4240
   1381c:	movt	r2, #15
   13820:	mov	r3, #0
   13824:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   13828:	add	r3, r2, #999424	; 0xf4000
   1382c:	add	r3, r3, #576	; 0x240
   13830:	mov	r0, #5
   13834:	movw	r2, #48076	; 0xbbcc
   13838:	movt	r2, #1
   1383c:	movw	r1, #48104	; 0xbbe8
   13840:	movt	r1, #1
   13844:	str	r0, [sp]
   13848:	mov	r0, #0
   1384c:	bl	114c4 <dcngettext@plt>
   13850:	add	r3, sp, #36	; 0x24
   13854:	mov	r2, r0
   13858:	stm	sp, {r5, r6}
   1385c:	mov	r1, #1
   13860:	mov	r0, r9
   13864:	str	r3, [sp, #8]
   13868:	ldr	r3, [sp, #24]
   1386c:	str	r3, [sp, #12]
   13870:	bl	11404 <__fprintf_chk@plt>
   13874:	mov	r5, r0
   13878:	b	136d8 <__assert_fail@plt+0x21fc>
   1387c:	bl	15f88 <__assert_fail@plt+0x4aac>
   13880:	mov	r8, r0
   13884:	mov	r9, r1
   13888:	b	13518 <__assert_fail@plt+0x203c>
   1388c:	movw	r1, #51464	; 0xc908
   13890:	movt	r1, #1
   13894:	ldr	r0, [r7]
   13898:	sub	r3, r3, r5
   1389c:	movw	r2, #48200	; 0xbc48
   138a0:	movt	r2, #1
   138a4:	str	r1, [sp]
   138a8:	mov	r1, #1
   138ac:	bl	11404 <__fprintf_chk@plt>
   138b0:	b	136f4 <__assert_fail@plt+0x2218>
   138b4:	mov	r1, #13
   138b8:	bl	11434 <__overflow@plt>
   138bc:	movw	r2, #48040	; 0xbba8
   138c0:	movt	r2, #1
   138c4:	b	13634 <__assert_fail@plt+0x2158>
   138c8:	andeq	r0, r0, r0
   138cc:	bicmi	ip, sp, r5, ror #26
   138d0:	blcc	fe6c60d8 <opterr@@GLIBC_2.4+0xfe697ef8>
	...
   138e0:	strd	r4, [sp, #-32]!	; 0xffffffe0
   138e4:	str	r6, [sp, #8]
   138e8:	strd	sl, [sp, #20]
   138ec:	movw	fp, #57680	; 0xe150
   138f0:	movt	fp, #2
   138f4:	ldr	r3, [fp, #8]
   138f8:	strd	r8, [sp, #12]
   138fc:	str	lr, [sp, #28]
   13900:	sub	sp, sp, #40	; 0x28
   13904:	cmp	r3, #1
   13908:	beq	13a60 <__assert_fail@plt+0x2584>
   1390c:	movw	sl, #57832	; 0xe1e8
   13910:	movt	sl, #2
   13914:	ldr	r2, [sl, #24]
   13918:	movw	r6, #57816	; 0xe1d8
   1391c:	movt	r6, #2
   13920:	ldr	r4, [r6]
   13924:	cmp	r2, #0
   13928:	ble	13958 <__assert_fail@plt+0x247c>
   1392c:	ldr	r2, [r4, #20]
   13930:	ldr	r1, [r4, #24]
   13934:	cmp	r2, r1
   13938:	addcc	r0, r2, #1
   1393c:	movcc	r1, #10
   13940:	strcc	r0, [r4, #20]
   13944:	strbcc	r1, [r2]
   13948:	bcs	13a7c <__assert_fail@plt+0x25a0>
   1394c:	ldr	r4, [r6]
   13950:	mov	r2, #0
   13954:	str	r2, [sl, #24]
   13958:	mov	r2, #5
   1395c:	movw	r1, #48204	; 0xbc4c
   13960:	movt	r1, #1
   13964:	mov	r0, #0
   13968:	bl	11230 <dcgettext@plt>
   1396c:	mov	r2, r0
   13970:	mov	r0, r4
   13974:	ldrd	r4, [sl, #40]	; 0x28
   13978:	mov	r1, #1
   1397c:	ldrd	r8, [sl, #48]	; 0x30
   13980:	strd	r4, [sp, #32]
   13984:	ldrd	r4, [sl, #32]
   13988:	strd	r8, [sp, #8]
   1398c:	strd	r4, [sp, #24]
   13990:	ldrd	r4, [sp, #32]
   13994:	strd	r4, [sp, #16]
   13998:	ldrd	r4, [sl, #56]	; 0x38
   1399c:	strd	r4, [sp]
   139a0:	bl	11404 <__fprintf_chk@plt>
   139a4:	ldrd	r4, [sl, #64]	; 0x40
   139a8:	orrs	r3, r4, r5
   139ac:	bne	139e4 <__assert_fail@plt+0x2508>
   139b0:	ldr	r3, [fp, #8]
   139b4:	cmp	r3, #2
   139b8:	beq	13a60 <__assert_fail@plt+0x2584>
   139bc:	mov	r0, #0
   139c0:	mov	r1, #0
   139c4:	add	sp, sp, #40	; 0x28
   139c8:	ldrd	r4, [sp]
   139cc:	ldr	r6, [sp, #8]
   139d0:	ldrd	r8, [sp, #12]
   139d4:	ldrd	sl, [sp, #20]
   139d8:	ldr	lr, [sp, #28]
   139dc:	add	sp, sp, #32
   139e0:	b	134e0 <__assert_fail@plt+0x2004>
   139e4:	mov	r1, #0
   139e8:	mvn	r0, #0
   139ec:	ldr	r6, [r6]
   139f0:	cmp	r5, r1
   139f4:	cmpeq	r4, r0
   139f8:	movls	r3, r4
   139fc:	bls	13a20 <__assert_fail@plt+0x2544>
   13a00:	movw	r2, #16960	; 0x4240
   13a04:	movt	r2, #15
   13a08:	mov	r3, #0
   13a0c:	mov	r0, r4
   13a10:	mov	r1, r5
   13a14:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   13a18:	add	r3, r2, #999424	; 0xf4000
   13a1c:	add	r3, r3, #576	; 0x240
   13a20:	mov	r0, #5
   13a24:	movw	r2, #48248	; 0xbc78
   13a28:	movt	r2, #1
   13a2c:	movw	r1, #48272	; 0xbc90
   13a30:	movt	r1, #1
   13a34:	str	r0, [sp]
   13a38:	mov	r0, #0
   13a3c:	bl	114c4 <dcngettext@plt>
   13a40:	mov	r2, r0
   13a44:	mov	r1, #1
   13a48:	strd	r4, [sp]
   13a4c:	mov	r0, r6
   13a50:	bl	11404 <__fprintf_chk@plt>
   13a54:	ldr	r3, [fp, #8]
   13a58:	cmp	r3, #2
   13a5c:	bne	139bc <__assert_fail@plt+0x24e0>
   13a60:	add	sp, sp, #40	; 0x28
   13a64:	ldrd	r4, [sp]
   13a68:	ldr	r6, [sp, #8]
   13a6c:	ldrd	r8, [sp, #12]
   13a70:	ldrd	sl, [sp, #20]
   13a74:	add	sp, sp, #28
   13a78:	pop	{pc}		; (ldr pc, [sp], #4)
   13a7c:	mov	r0, r4
   13a80:	mov	r1, #10
   13a84:	bl	11434 <__overflow@plt>
   13a88:	b	1394c <__assert_fail@plt+0x2470>
   13a8c:	push	{r2, r3}
   13a90:	strd	r4, [sp, #-16]!
   13a94:	movw	r4, #57832	; 0xe1e8
   13a98:	movt	r4, #2
   13a9c:	ldr	r3, [r4, #24]
   13aa0:	mov	r5, r0
   13aa4:	str	r6, [sp, #8]
   13aa8:	mov	r6, r1
   13aac:	str	lr, [sp, #12]
   13ab0:	sub	sp, sp, #8
   13ab4:	cmp	r3, #0
   13ab8:	ble	13af0 <__assert_fail@plt+0x2614>
   13abc:	movw	r3, #57816	; 0xe1d8
   13ac0:	movt	r3, #2
   13ac4:	ldr	r0, [r3]
   13ac8:	ldr	r3, [r0, #20]
   13acc:	ldr	r2, [r0, #24]
   13ad0:	cmp	r3, r2
   13ad4:	addcc	r1, r3, #1
   13ad8:	movcc	r2, #10
   13adc:	strcc	r1, [r0, #20]
   13ae0:	strbcc	r2, [r3]
   13ae4:	bcs	13b28 <__assert_fail@plt+0x264c>
   13ae8:	mov	r3, #0
   13aec:	str	r3, [r4, #24]
   13af0:	ldr	r2, [sp, #24]
   13af4:	add	ip, sp, #28
   13af8:	mov	r1, r6
   13afc:	mov	r0, r5
   13b00:	mov	r3, ip
   13b04:	str	ip, [sp, #4]
   13b08:	bl	1919c <__assert_fail@plt+0x7cc0>
   13b0c:	add	sp, sp, #8
   13b10:	ldrd	r4, [sp]
   13b14:	ldr	r6, [sp, #8]
   13b18:	ldr	lr, [sp, #12]
   13b1c:	add	sp, sp, #16
   13b20:	add	sp, sp, #8
   13b24:	bx	lr
   13b28:	mov	r1, #10
   13b2c:	bl	11434 <__overflow@plt>
   13b30:	b	13ae8 <__assert_fail@plt+0x260c>
   13b34:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13b38:	subs	r5, r0, #0
   13b3c:	movw	r4, #57832	; 0xe1e8
   13b40:	movt	r4, #2
   13b44:	strd	r6, [sp, #8]
   13b48:	strd	r8, [sp, #16]
   13b4c:	strd	sl, [sp, #24]
   13b50:	str	lr, [sp, #32]
   13b54:	sub	sp, sp, #44	; 0x2c
   13b58:	bne	13d18 <__assert_fail@plt+0x283c>
   13b5c:	ldrb	r1, [r4, #88]	; 0x58
   13b60:	str	r1, [sp, #28]
   13b64:	add	r1, r4, #80	; 0x50
   13b68:	orrs	r0, r2, r3
   13b6c:	ldrd	r6, [r1]
   13b70:	beq	13c2c <__assert_fail@plt+0x2750>
   13b74:	adds	r8, r6, r2
   13b78:	adcs	r9, r7, r3
   13b7c:	bvc	13bc4 <__assert_fail@plt+0x26e8>
   13b80:	mov	ip, #0
   13b84:	movw	r0, #65535	; 0xffff
   13b88:	movt	r0, #1
   13b8c:	mov	r6, #0
   13b90:	movt	r6, #65534	; 0xfffe
   13b94:	mvn	r7, #-2147483648	; 0x80000000
   13b98:	stm	r1, {r0, ip}
   13b9c:	str	r0, [sp, #16]
   13ba0:	str	ip, [sp, #20]
   13ba4:	cmp	r5, #0
   13ba8:	strd	r2, [sp, #32]
   13bac:	bne	13c50 <__assert_fail@plt+0x2774>
   13bb0:	ldrb	r8, [r4, #90]	; 0x5a
   13bb4:	cmp	r8, #0
   13bb8:	beq	13d28 <__assert_fail@plt+0x284c>
   13bbc:	ldrd	r0, [r4, #96]	; 0x60
   13bc0:	b	13ca0 <__assert_fail@plt+0x27c4>
   13bc4:	asr	ip, r9, #31
   13bc8:	mov	r0, r8
   13bcc:	eor	r0, r0, ip
   13bd0:	asr	fp, ip, #31
   13bd4:	subs	r0, r0, ip
   13bd8:	ubfx	r0, r0, #0, #17
   13bdc:	mov	lr, fp
   13be0:	eor	r0, r0, ip
   13be4:	subs	r0, r0, ip
   13be8:	str	r0, [sp, #16]
   13bec:	sbc	r0, fp, fp
   13bf0:	str	r0, [sp, #20]
   13bf4:	ldrd	sl, [sp, #16]
   13bf8:	cmp	sl, r8
   13bfc:	strd	sl, [r1]
   13c00:	sbcs	r0, fp, r9
   13c04:	blt	13d9c <__assert_fail@plt+0x28c0>
   13c08:	mov	r8, #1
   13c0c:	mov	r0, r8
   13c10:	add	sp, sp, #44	; 0x2c
   13c14:	ldrd	r4, [sp]
   13c18:	ldrd	r6, [sp, #8]
   13c1c:	ldrd	r8, [sp, #16]
   13c20:	ldrd	sl, [sp, #24]
   13c24:	add	sp, sp, #32
   13c28:	pop	{pc}		; (ldr pc, [sp], #4)
   13c2c:	orrs	r1, r6, r7
   13c30:	bne	13c40 <__assert_fail@plt+0x2764>
   13c34:	ldr	r1, [sp, #28]
   13c38:	cmp	r1, #0
   13c3c:	beq	13c08 <__assert_fail@plt+0x272c>
   13c40:	cmp	r5, #0
   13c44:	strd	r2, [sp, #16]
   13c48:	strd	r2, [sp, #32]
   13c4c:	beq	13bb0 <__assert_fail@plt+0x26d4>
   13c50:	movw	r8, #57680	; 0xe150
   13c54:	movt	r8, #2
   13c58:	ldrd	r0, [r8, #16]
   13c5c:	mvn	r3, #0
   13c60:	mvn	r2, #0
   13c64:	cmp	r1, r3
   13c68:	cmpeq	r0, r2
   13c6c:	beq	13d38 <__assert_fail@plt+0x285c>
   13c70:	cmp	r0, #0
   13c74:	sbcs	r3, r1, #0
   13c78:	blt	13d7c <__assert_fail@plt+0x28a0>
   13c7c:	ldrd	r2, [sp, #32]
   13c80:	orrs	r3, r2, r3
   13c84:	beq	13cac <__assert_fail@plt+0x27d0>
   13c88:	ldrd	sl, [sp, #16]
   13c8c:	adds	r3, sl, r6
   13c90:	adc	r2, fp, r7
   13c94:	adds	r0, r0, r3
   13c98:	adc	r1, r1, r2
   13c9c:	strd	r0, [r8, #16]
   13ca0:	cmp	r0, #0
   13ca4:	sbcs	r3, r1, #0
   13ca8:	blt	13d38 <__assert_fail@plt+0x285c>
   13cac:	ldrd	r2, [sp, #32]
   13cb0:	subs	r8, r0, r6
   13cb4:	sbc	sl, r1, r7
   13cb8:	mov	r1, r2
   13cbc:	orrs	r3, r1, r3
   13cc0:	moveq	r3, #1
   13cc4:	movne	r3, #0
   13cc8:	orrs	r2, r6, r7
   13ccc:	moveq	r3, #0
   13cd0:	cmp	r3, #0
   13cd4:	beq	13d40 <__assert_fail@plt+0x2864>
   13cd8:	ldr	r3, [sp, #28]
   13cdc:	cmp	r3, #0
   13ce0:	bne	13d54 <__assert_fail@plt+0x2878>
   13ce4:	ldrd	r2, [sp, #16]
   13ce8:	subs	r8, r8, r2
   13cec:	sbc	sl, sl, r3
   13cf0:	mov	r1, #4
   13cf4:	mov	r2, r8
   13cf8:	strd	r6, [sp]
   13cfc:	mov	r3, sl
   13d00:	mov	r0, r5
   13d04:	str	r1, [sp, #8]
   13d08:	bl	11188 <posix_fadvise64@plt>
   13d0c:	adds	r8, r0, #1
   13d10:	movne	r8, #1
   13d14:	b	13c0c <__assert_fail@plt+0x2730>
   13d18:	ldrb	r1, [r4, #89]	; 0x59
   13d1c:	str	r1, [sp, #28]
   13d20:	add	r1, r4, #72	; 0x48
   13d24:	b	13b68 <__assert_fail@plt+0x268c>
   13d28:	bl	113a4 <__errno_location@plt>
   13d2c:	mov	r3, #29
   13d30:	str	r3, [r0]
   13d34:	b	13c0c <__assert_fail@plt+0x2730>
   13d38:	mov	r8, #0
   13d3c:	b	13c0c <__assert_fail@plt+0x2730>
   13d40:	ldrd	r2, [sp, #16]
   13d44:	subs	r8, r8, r2
   13d48:	sbc	sl, sl, r3
   13d4c:	orrs	r3, r6, r7
   13d50:	bne	13cf0 <__assert_fail@plt+0x2814>
   13d54:	ldr	r2, [r4, #104]	; 0x68
   13d58:	mov	r0, r8
   13d5c:	mov	r1, sl
   13d60:	mov	r6, #0
   13d64:	mov	r7, #0
   13d68:	asr	r3, r2, #31
   13d6c:	bl	1b2e0 <__assert_fail@plt+0x9e04>
   13d70:	subs	r8, r8, r2
   13d74:	sbc	sl, sl, r3
   13d78:	b	13cf0 <__assert_fail@plt+0x2814>
   13d7c:	mov	r1, #1
   13d80:	mov	r2, #0
   13d84:	mov	r3, #0
   13d88:	mov	r0, r1
   13d8c:	str	r1, [sp]
   13d90:	bl	112a8 <lseek64@plt>
   13d94:	strd	r0, [r8, #16]
   13d98:	b	13ca0 <__assert_fail@plt+0x27c4>
   13d9c:	ldrd	r0, [sp, #16]
   13da0:	mov	lr, r8
   13da4:	subs	r6, r8, r0
   13da8:	sbc	r7, r9, r1
   13dac:	b	13ba4 <__assert_fail@plt+0x26c8>
   13db0:	movw	r3, #57680	; 0xe150
   13db4:	movt	r3, #2
   13db8:	ldrb	r3, [r3, #24]
   13dbc:	cmp	r3, #0
   13dc0:	beq	13dc8 <__assert_fail@plt+0x28ec>
   13dc4:	b	15a4c <__assert_fail@plt+0x4570>
   13dc8:	movw	r3, #57816	; 0xe1d8
   13dcc:	movt	r3, #2
   13dd0:	str	r4, [sp, #-8]!
   13dd4:	ldr	r0, [r3]
   13dd8:	str	lr, [sp, #4]
   13ddc:	bl	159a4 <__assert_fail@plt+0x44c8>
   13de0:	cmp	r0, #0
   13de4:	bne	13df4 <__assert_fail@plt+0x2918>
   13de8:	ldr	r4, [sp]
   13dec:	add	sp, sp, #4
   13df0:	pop	{pc}		; (ldr pc, [sp], #4)
   13df4:	mov	r0, #1
   13df8:	bl	111dc <_exit@plt>
   13dfc:	strd	r4, [sp, #-16]!
   13e00:	mov	r5, r0
   13e04:	str	r6, [sp, #8]
   13e08:	str	lr, [sp, #12]
   13e0c:	bl	113a4 <__errno_location@plt>
   13e10:	mov	r4, r0
   13e14:	ldr	r3, [r0]
   13e18:	b	13e34 <__assert_fail@plt+0x2958>
   13e1c:	bl	114b8 <close@plt>
   13e20:	cmp	r0, #0
   13e24:	beq	13e44 <__assert_fail@plt+0x2968>
   13e28:	ldr	r3, [r4]
   13e2c:	cmp	r3, #9
   13e30:	beq	13e54 <__assert_fail@plt+0x2978>
   13e34:	cmp	r3, #4
   13e38:	mov	r0, r5
   13e3c:	beq	13e1c <__assert_fail@plt+0x2940>
   13e40:	mvn	r0, #0
   13e44:	ldrd	r4, [sp]
   13e48:	ldr	r6, [sp, #8]
   13e4c:	add	sp, sp, #12
   13e50:	pop	{pc}		; (ldr pc, [sp], #4)
   13e54:	ldrd	r4, [sp]
   13e58:	mov	r0, #0
   13e5c:	ldr	r6, [sp, #8]
   13e60:	add	sp, sp, #12
   13e64:	pop	{pc}		; (ldr pc, [sp], #4)
   13e68:	mov	r2, #5
   13e6c:	movw	r1, #48296	; 0xbca8
   13e70:	movt	r1, #1
   13e74:	mov	r0, #0
   13e78:	push	{lr}		; (str lr, [sp, #-4]!)
   13e7c:	sub	sp, sp, #676	; 0x2a4
   13e80:	bl	11230 <dcgettext@plt>
   13e84:	movw	r3, #57832	; 0xe1e8
   13e88:	movt	r3, #2
   13e8c:	ldr	r4, [r3, #108]	; 0x6c
   13e90:	mov	r1, #0
   13e94:	mov	r5, r0
   13e98:	mov	r0, #1
   13e9c:	add	r2, sp, #20
   13ea0:	movw	r3, #497	; 0x1f1
   13ea4:	strd	r0, [sp]
   13ea8:	strd	r0, [sp, #8]
   13eac:	asr	r1, r4, #31
   13eb0:	mov	r0, r4
   13eb4:	bl	16010 <__assert_fail@plt+0x4b34>
   13eb8:	mov	r3, r4
   13ebc:	mov	r2, r5
   13ec0:	str	r0, [sp]
   13ec4:	mov	r1, #0
   13ec8:	mov	r0, #1
   13ecc:	bl	13a8c <__assert_fail@plt+0x25b0>
   13ed0:	str	r4, [sp, #-8]!
   13ed4:	movw	r4, #57832	; 0xe1e8
   13ed8:	movt	r4, #2
   13edc:	ldr	r3, [r4, #112]	; 0x70
   13ee0:	str	lr, [sp, #4]
   13ee4:	cmp	r3, #0
   13ee8:	beq	13ef8 <__assert_fail@plt+0x2a1c>
   13eec:	ldr	r4, [sp]
   13ef0:	add	sp, sp, #4
   13ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ef8:	ldrd	r0, [r4, #104]	; 0x68
   13efc:	ldr	r3, [r4, #116]	; 0x74
   13f00:	ubfx	r3, r3, #7, #1
   13f04:	add	r1, r3, r1
   13f08:	bl	11488 <aligned_alloc@plt>
   13f0c:	cmp	r0, #0
   13f10:	str	r0, [r4, #112]	; 0x70
   13f14:	bne	13eec <__assert_fail@plt+0x2a10>
   13f18:	bl	13e68 <__assert_fail@plt+0x298c>
   13f1c:	mov	r2, #5
   13f20:	movw	r1, #48352	; 0xbce0
   13f24:	movt	r1, #1
   13f28:	mov	r0, #0
   13f2c:	push	{lr}		; (str lr, [sp, #-4]!)
   13f30:	sub	sp, sp, #676	; 0x2a4
   13f34:	bl	11230 <dcgettext@plt>
   13f38:	movw	r3, #57832	; 0xe1e8
   13f3c:	movt	r3, #2
   13f40:	ldr	r4, [r3, #120]	; 0x78
   13f44:	mov	r1, #0
   13f48:	mov	r5, r0
   13f4c:	mov	r0, #1
   13f50:	add	r2, sp, #20
   13f54:	movw	r3, #497	; 0x1f1
   13f58:	strd	r0, [sp]
   13f5c:	strd	r0, [sp, #8]
   13f60:	asr	r1, r4, #31
   13f64:	mov	r0, r4
   13f68:	bl	16010 <__assert_fail@plt+0x4b34>
   13f6c:	mov	r3, r4
   13f70:	mov	r2, r5
   13f74:	str	r0, [sp]
   13f78:	mov	r1, #0
   13f7c:	mov	r0, #1
   13f80:	bl	13a8c <__assert_fail@plt+0x25b0>
   13f84:	str	r4, [sp, #-8]!
   13f88:	movw	r4, #57832	; 0xe1e8
   13f8c:	movt	r4, #2
   13f90:	ldr	r3, [r4, #124]	; 0x7c
   13f94:	str	lr, [sp, #4]
   13f98:	cmp	r3, #0
   13f9c:	beq	13fac <__assert_fail@plt+0x2ad0>
   13fa0:	ldr	r4, [sp]
   13fa4:	add	sp, sp, #4
   13fa8:	pop	{pc}		; (ldr pc, [sp], #4)
   13fac:	ldr	r3, [r4, #116]	; 0x74
   13fb0:	tst	r3, #2048	; 0x800
   13fb4:	beq	13fd4 <__assert_fail@plt+0x2af8>
   13fb8:	ldr	r0, [r4, #104]	; 0x68
   13fbc:	ldr	r1, [r4, #120]	; 0x78
   13fc0:	bl	11488 <aligned_alloc@plt>
   13fc4:	cmp	r0, #0
   13fc8:	str	r0, [r4, #124]	; 0x7c
   13fcc:	bne	13fa0 <__assert_fail@plt+0x2ac4>
   13fd0:	bl	13f1c <__assert_fail@plt+0x2a40>
   13fd4:	bl	13ed0 <__assert_fail@plt+0x29f4>
   13fd8:	ldr	r3, [r4, #112]	; 0x70
   13fdc:	str	r3, [r4, #124]	; 0x7c
   13fe0:	b	13fa0 <__assert_fail@plt+0x2ac4>
   13fe4:	movw	r2, #48412	; 0xbd1c
   13fe8:	movt	r2, #1
   13fec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ff0:	strd	r6, [sp, #8]
   13ff4:	mov	r4, #0
   13ff8:	mov	r5, #0
   13ffc:	strd	r8, [sp, #16]
   14000:	mov	r6, r1
   14004:	mov	r7, r0
   14008:	strd	sl, [sp, #24]
   1400c:	str	lr, [sp, #32]
   14010:	sub	sp, sp, #52	; 0x34
   14014:	add	r3, sp, #40	; 0x28
   14018:	add	r1, sp, #32
   1401c:	str	r2, [sp]
   14020:	mov	r2, #10
   14024:	strd	r4, [sp, #40]	; 0x28
   14028:	bl	19c0c <__assert_fail@plt+0x8730>
   1402c:	bic	r3, r0, #1
   14030:	mov	r8, r0
   14034:	cmp	r3, #2
   14038:	beq	14078 <__assert_fail@plt+0x2b9c>
   1403c:	ldrd	r4, [sp, #40]	; 0x28
   14040:	cmp	r4, #0
   14044:	sbcs	r3, r5, #0
   14048:	blt	1411c <__assert_fail@plt+0x2c40>
   1404c:	cmp	r8, #0
   14050:	strne	r8, [r6]
   14054:	mov	r0, r4
   14058:	mov	r1, r5
   1405c:	add	sp, sp, #52	; 0x34
   14060:	ldrd	r4, [sp]
   14064:	ldrd	r6, [sp, #8]
   14068:	ldrd	r8, [sp, #16]
   1406c:	ldrd	sl, [sp, #24]
   14070:	add	sp, sp, #32
   14074:	pop	{pc}		; (ldr pc, [sp], #4)
   14078:	ldr	r0, [sp, #32]
   1407c:	ldrb	r3, [r0]
   14080:	cmp	r3, #120	; 0x78
   14084:	bne	1403c <__assert_fail@plt+0x2b60>
   14088:	mov	r3, #0
   1408c:	add	r0, r0, #1
   14090:	add	r1, sp, #36	; 0x24
   14094:	str	r3, [sp, #36]	; 0x24
   14098:	bl	13fe4 <__assert_fail@plt+0x2b08>
   1409c:	ldr	ip, [sp, #36]	; 0x24
   140a0:	mov	r4, r0
   140a4:	mov	r5, r1
   140a8:	bics	lr, ip, #1
   140ac:	strne	ip, [r6]
   140b0:	bne	14054 <__assert_fail@plt+0x2b78>
   140b4:	ldr	r2, [sp, #40]	; 0x28
   140b8:	cmp	r1, r0, asr #31
   140bc:	ldr	r9, [sp, #44]	; 0x2c
   140c0:	asr	r3, r2, #31
   140c4:	bne	141a0 <__assert_fail@plt+0x2cc4>
   140c8:	cmp	r3, r9
   140cc:	bne	14244 <__assert_fail@plt+0x2d68>
   140d0:	ldrd	sl, [sp, #40]	; 0x28
   140d4:	smull	r2, r3, r2, r0
   140d8:	cmp	sl, #0
   140dc:	sbcs	r1, fp, #0
   140e0:	blt	142c4 <__assert_fail@plt+0x2de8>
   140e4:	cmp	lr, #0
   140e8:	bne	14108 <__assert_fail@plt+0x2c2c>
   140ec:	mov	r4, r2
   140f0:	mov	r5, r3
   140f4:	orrs	r3, r4, r5
   140f8:	beq	14130 <__assert_fail@plt+0x2c54>
   140fc:	orr	r8, r8, ip
   14100:	cmp	r8, #2
   14104:	beq	14054 <__assert_fail@plt+0x2b78>
   14108:	mov	r3, #1
   1410c:	mvn	r4, #0
   14110:	mvn	r5, #-2147483648	; 0x80000000
   14114:	str	r3, [r6]
   14118:	b	14054 <__assert_fail@plt+0x2b78>
   1411c:	orr	r8, r8, #1
   14120:	mvn	r4, #0
   14124:	mvn	r5, #-2147483648	; 0x80000000
   14128:	str	r8, [r6]
   1412c:	b	14054 <__assert_fail@plt+0x2b78>
   14130:	mov	r0, r7
   14134:	movw	r1, #48428	; 0xbd2c
   14138:	movt	r1, #1
   1413c:	mov	r2, #2
   14140:	bl	11494 <strncmp@plt>
   14144:	subs	r6, r0, #0
   14148:	bne	14054 <__assert_fail@plt+0x2b78>
   1414c:	mov	r2, #5
   14150:	movw	r1, #48432	; 0xbd30
   14154:	movt	r1, #1
   14158:	bl	11230 <dcgettext@plt>
   1415c:	mov	r7, r0
   14160:	movw	r1, #48428	; 0xbd2c
   14164:	movt	r1, #1
   14168:	mov	r0, r6
   1416c:	bl	190a8 <__assert_fail@plt+0x7bcc>
   14170:	mov	r8, r0
   14174:	movw	r1, #48496	; 0xbd70
   14178:	movt	r1, #1
   1417c:	mov	r0, #1
   14180:	bl	190a8 <__assert_fail@plt+0x7bcc>
   14184:	mov	r3, r8
   14188:	mov	r2, r7
   1418c:	str	r0, [sp]
   14190:	mov	r1, r6
   14194:	mov	r0, r6
   14198:	bl	13a8c <__assert_fail@plt+0x25b0>
   1419c:	b	14054 <__assert_fail@plt+0x2b78>
   141a0:	cmp	r3, r9
   141a4:	bne	14258 <__assert_fail@plt+0x2d7c>
   141a8:	ldrd	sl, [sp, #40]	; 0x28
   141ac:	mov	r3, r2
   141b0:	str	r1, [sp, #8]
   141b4:	strd	r4, [sp, #24]
   141b8:	ldr	r1, [sp, #8]
   141bc:	cmp	r1, #0
   141c0:	umull	r0, r1, r2, r4
   141c4:	strd	r0, [sp, #16]
   141c8:	ldr	r1, [sp, #8]
   141cc:	umull	r0, r1, r3, r1
   141d0:	strd	r0, [sp, #8]
   141d4:	bge	141f4 <__assert_fail@plt+0x2d18>
   141d8:	ldr	r0, [sp, #8]
   141dc:	mov	r1, #0
   141e0:	subs	r1, r0, r1
   141e4:	ldr	r0, [sp, #12]
   141e8:	str	r1, [sp, #8]
   141ec:	sbc	r1, r0, r3
   141f0:	str	r1, [sp, #12]
   141f4:	cmp	r3, #0
   141f8:	bge	1421c <__assert_fail@plt+0x2d40>
   141fc:	ldr	r1, [sp, #8]
   14200:	ldr	r3, [sp, #24]
   14204:	subs	r3, r1, r3
   14208:	ldr	r1, [sp, #12]
   1420c:	str	r3, [sp, #8]
   14210:	ldr	r3, [sp, #28]
   14214:	sbc	r3, r1, r3
   14218:	str	r3, [sp, #12]
   1421c:	ldr	r1, [sp, #8]
   14220:	ldr	r3, [sp, #20]
   14224:	adds	r0, r1, r3
   14228:	ldr	r3, [sp, #12]
   1422c:	adc	r3, r3, #0
   14230:	cmp	r3, r0, asr #31
   14234:	bne	142d8 <__assert_fail@plt+0x2dfc>
   14238:	mov	r3, r0
   1423c:	ldr	r2, [sp, #16]
   14240:	b	140d8 <__assert_fail@plt+0x2bfc>
   14244:	ldrd	sl, [sp, #40]	; 0x28
   14248:	mov	r3, r0
   1424c:	str	r9, [sp, #8]
   14250:	strd	sl, [sp, #24]
   14254:	b	141b8 <__assert_fail@plt+0x2cdc>
   14258:	mul	r3, r9, r0
   1425c:	add	fp, r1, #1
   14260:	umull	r0, r1, r2, r0
   14264:	cmp	fp, #1
   14268:	mla	r2, r2, r5, r3
   1426c:	add	r1, r2, r1
   14270:	mov	r2, r0
   14274:	mov	r3, r1
   14278:	bhi	142bc <__assert_fail@plt+0x2de0>
   1427c:	add	r1, r9, #1
   14280:	cmp	r1, #1
   14284:	bhi	142bc <__assert_fail@plt+0x2de0>
   14288:	cmp	r5, r9
   1428c:	bne	142a8 <__assert_fail@plt+0x2dcc>
   14290:	cmp	r0, #1
   14294:	ldrd	sl, [sp, #40]	; 0x28
   14298:	sbcs	r1, r3, #0
   1429c:	bge	140d8 <__assert_fail@plt+0x2bfc>
   142a0:	mov	lr, #1
   142a4:	b	140d8 <__assert_fail@plt+0x2bfc>
   142a8:	cmp	r0, #0
   142ac:	ldrd	sl, [sp, #40]	; 0x28
   142b0:	sbcs	r1, r3, #0
   142b4:	blt	140d8 <__assert_fail@plt+0x2bfc>
   142b8:	b	142a0 <__assert_fail@plt+0x2dc4>
   142bc:	ldrd	sl, [sp, #40]	; 0x28
   142c0:	b	142a0 <__assert_fail@plt+0x2dc4>
   142c4:	orrs	r1, r4, r5
   142c8:	mov	lr, #1
   142cc:	bne	142f4 <__assert_fail@plt+0x2e18>
   142d0:	mov	lr, #0
   142d4:	b	140e4 <__assert_fail@plt+0x2c08>
   142d8:	mul	r9, r9, r4
   142dc:	umull	r0, r1, r2, r4
   142e0:	mla	r2, r2, r5, r9
   142e4:	add	r1, r2, r1
   142e8:	mov	r2, r0
   142ec:	mov	r3, r1
   142f0:	b	142a0 <__assert_fail@plt+0x2dc4>
   142f4:	mvn	r1, #0
   142f8:	mvn	r0, #0
   142fc:	cmp	r5, r1
   14300:	cmpeq	r4, r0
   14304:	bne	140e4 <__assert_fail@plt+0x2c08>
   14308:	cmp	fp, r3
   1430c:	cmpeq	sl, r2
   14310:	beq	142d0 <__assert_fail@plt+0x2df4>
   14314:	b	140e4 <__assert_fail@plt+0x2c08>
   14318:	subs	r6, r0, #0
   1431c:	str	r7, [sp, #-8]!
   14320:	str	lr, [sp, #4]
   14324:	sub	sp, sp, #56	; 0x38
   14328:	beq	14370 <__assert_fail@plt+0x2e94>
   1432c:	movw	r3, #57816	; 0xe1d8
   14330:	movt	r3, #2
   14334:	ldr	r4, [r3]
   14338:	mov	r2, #5
   1433c:	movw	r1, #48504	; 0xbd78
   14340:	movt	r1, #1
   14344:	mov	r0, #0
   14348:	bl	11230 <dcgettext@plt>
   1434c:	movw	r3, #58452	; 0xe454
   14350:	movt	r3, #2
   14354:	mov	r2, r0
   14358:	mov	r1, #1
   1435c:	ldr	r3, [r3]
   14360:	mov	r0, r4
   14364:	bl	11404 <__fprintf_chk@plt>
   14368:	mov	r0, r6
   1436c:	bl	11374 <exit@plt>
   14370:	mov	r2, #5
   14374:	movw	r1, #48544	; 0xbda0
   14378:	movt	r1, #1
   1437c:	movw	r7, #57820	; 0xe1dc
   14380:	movt	r7, #2
   14384:	bl	11230 <dcgettext@plt>
   14388:	movw	r3, #58452	; 0xe454
   1438c:	movt	r3, #2
   14390:	ldr	r3, [r3]
   14394:	mov	r1, r0
   14398:	mov	r0, #1
   1439c:	mov	r2, r3
   143a0:	bl	113e0 <__printf_chk@plt>
   143a4:	mov	r2, #5
   143a8:	movw	r1, #48588	; 0xbdcc
   143ac:	movt	r1, #1
   143b0:	mov	r0, r6
   143b4:	bl	11230 <dcgettext@plt>
   143b8:	ldr	r1, [r7]
   143bc:	bl	11158 <fputs_unlocked@plt>
   143c0:	mov	r2, #5
   143c4:	movw	r1, #49004	; 0xbf6c
   143c8:	movt	r1, #1
   143cc:	mov	r0, r6
   143d0:	bl	11230 <dcgettext@plt>
   143d4:	ldr	r1, [r7]
   143d8:	bl	11158 <fputs_unlocked@plt>
   143dc:	mov	r2, #5
   143e0:	movw	r1, #49676	; 0xc20c
   143e4:	movt	r1, #1
   143e8:	mov	r0, r6
   143ec:	bl	11230 <dcgettext@plt>
   143f0:	ldr	r1, [r7]
   143f4:	bl	11158 <fputs_unlocked@plt>
   143f8:	mov	r2, #5
   143fc:	movw	r1, #49968	; 0xc330
   14400:	movt	r1, #1
   14404:	mov	r0, r6
   14408:	bl	11230 <dcgettext@plt>
   1440c:	ldr	r1, [r7]
   14410:	bl	11158 <fputs_unlocked@plt>
   14414:	mov	r2, #5
   14418:	movw	r1, #50544	; 0xc570
   1441c:	movt	r1, #1
   14420:	mov	r0, r6
   14424:	bl	11230 <dcgettext@plt>
   14428:	ldr	r1, [r7]
   1442c:	bl	11158 <fputs_unlocked@plt>
   14430:	mov	r2, #5
   14434:	movw	r1, #50832	; 0xc690
   14438:	movt	r1, #1
   1443c:	mov	r0, r6
   14440:	bl	11230 <dcgettext@plt>
   14444:	ldr	r1, [r7]
   14448:	bl	11158 <fputs_unlocked@plt>
   1444c:	mov	r2, #5
   14450:	movw	r1, #50940	; 0xc6fc
   14454:	movt	r1, #1
   14458:	mov	r0, r6
   1445c:	bl	11230 <dcgettext@plt>
   14460:	ldr	r1, [r7]
   14464:	bl	11158 <fputs_unlocked@plt>
   14468:	mov	r2, #5
   1446c:	movw	r1, #50980	; 0xc724
   14470:	movt	r1, #1
   14474:	mov	r0, r6
   14478:	bl	11230 <dcgettext@plt>
   1447c:	ldr	r1, [r7]
   14480:	bl	11158 <fputs_unlocked@plt>
   14484:	mov	r2, #5
   14488:	movw	r1, #51020	; 0xc74c
   1448c:	movt	r1, #1
   14490:	mov	r0, r6
   14494:	bl	11230 <dcgettext@plt>
   14498:	ldr	r1, [r7]
   1449c:	bl	11158 <fputs_unlocked@plt>
   144a0:	mov	r2, #5
   144a4:	movw	r1, #51064	; 0xc778
   144a8:	movt	r1, #1
   144ac:	mov	r0, r6
   144b0:	bl	11230 <dcgettext@plt>
   144b4:	ldr	r1, [r7]
   144b8:	bl	11158 <fputs_unlocked@plt>
   144bc:	mov	r2, #5
   144c0:	movw	r1, #51112	; 0xc7a8
   144c4:	movt	r1, #1
   144c8:	mov	r0, r6
   144cc:	bl	11230 <dcgettext@plt>
   144d0:	ldr	r1, [r7]
   144d4:	bl	11158 <fputs_unlocked@plt>
   144d8:	mov	r2, #5
   144dc:	movw	r1, #51172	; 0xc7e4
   144e0:	movt	r1, #1
   144e4:	mov	r0, r6
   144e8:	bl	11230 <dcgettext@plt>
   144ec:	ldr	r1, [r7]
   144f0:	bl	11158 <fputs_unlocked@plt>
   144f4:	mov	r2, #5
   144f8:	movw	r1, #51208	; 0xc808
   144fc:	movt	r1, #1
   14500:	mov	r0, r6
   14504:	bl	11230 <dcgettext@plt>
   14508:	ldr	r1, [r7]
   1450c:	bl	11158 <fputs_unlocked@plt>
   14510:	mov	r2, #5
   14514:	movw	r1, #51248	; 0xc830
   14518:	movt	r1, #1
   1451c:	mov	r0, r6
   14520:	bl	11230 <dcgettext@plt>
   14524:	ldr	r1, [r7]
   14528:	bl	11158 <fputs_unlocked@plt>
   1452c:	mov	r2, #5
   14530:	movw	r1, #51308	; 0xc86c
   14534:	movt	r1, #1
   14538:	mov	r0, r6
   1453c:	bl	11230 <dcgettext@plt>
   14540:	ldr	r1, [r7]
   14544:	bl	11158 <fputs_unlocked@plt>
   14548:	mov	r2, #5
   1454c:	movw	r1, #51368	; 0xc8a8
   14550:	movt	r1, #1
   14554:	mov	r0, r6
   14558:	bl	11230 <dcgettext@plt>
   1455c:	ldr	r1, [r7]
   14560:	bl	11158 <fputs_unlocked@plt>
   14564:	mov	r2, #5
   14568:	movw	r1, #51404	; 0xc8cc
   1456c:	movt	r1, #1
   14570:	mov	r0, r6
   14574:	bl	11230 <dcgettext@plt>
   14578:	ldr	r1, [r7]
   1457c:	bl	11158 <fputs_unlocked@plt>
   14580:	mov	r2, #5
   14584:	movw	r1, #51468	; 0xc90c
   14588:	movt	r1, #1
   1458c:	mov	r0, r6
   14590:	bl	11230 <dcgettext@plt>
   14594:	ldr	r1, [r7]
   14598:	bl	11158 <fputs_unlocked@plt>
   1459c:	mov	r2, #5
   145a0:	movw	r1, #51528	; 0xc948
   145a4:	movt	r1, #1
   145a8:	mov	r0, r6
   145ac:	bl	11230 <dcgettext@plt>
   145b0:	ldr	r1, [r7]
   145b4:	bl	11158 <fputs_unlocked@plt>
   145b8:	mov	r2, #5
   145bc:	movw	r1, #51588	; 0xc984
   145c0:	movt	r1, #1
   145c4:	mov	r0, r6
   145c8:	bl	11230 <dcgettext@plt>
   145cc:	mov	r1, r0
   145d0:	movw	r2, #51724	; 0xca0c
   145d4:	movt	r2, #1
   145d8:	mov	r0, #1
   145dc:	bl	113e0 <__printf_chk@plt>
   145e0:	mov	r2, #5
   145e4:	movw	r1, #51732	; 0xca14
   145e8:	movt	r1, #1
   145ec:	mov	r0, r6
   145f0:	bl	11230 <dcgettext@plt>
   145f4:	ldr	r1, [r7]
   145f8:	bl	11158 <fputs_unlocked@plt>
   145fc:	mov	r2, #5
   14600:	movw	r1, #51780	; 0xca44
   14604:	movt	r1, #1
   14608:	mov	r0, r6
   1460c:	bl	11230 <dcgettext@plt>
   14610:	ldr	r1, [r7]
   14614:	bl	11158 <fputs_unlocked@plt>
   14618:	movw	lr, #46576	; 0xb5f0
   1461c:	movt	lr, #1
   14620:	ldr	ip, [lr]
   14624:	ldr	r4, [lr, #4]
   14628:	ldrd	r8, [lr, #8]
   1462c:	subs	r1, ip, #0
   14630:	str	ip, [sp]
   14634:	ldrd	r2, [lr, #16]
   14638:	str	r4, [sp, #4]
   1463c:	ldrd	r4, [lr, #24]
   14640:	strd	r8, [sp, #8]
   14644:	ldrd	r8, [lr, #32]
   14648:	strd	r2, [sp, #16]
   1464c:	ldrd	r2, [lr, #40]	; 0x28
   14650:	strd	r4, [sp, #24]
   14654:	ldrd	r4, [lr, #48]	; 0x30
   14658:	strd	r8, [sp, #32]
   1465c:	strd	r2, [sp, #40]	; 0x28
   14660:	strd	r4, [sp, #48]	; 0x30
   14664:	movwne	r5, #48500	; 0xbd74
   14668:	mov	r4, sp
   1466c:	movtne	r5, #1
   14670:	bne	14768 <__assert_fail@plt+0x328c>
   14674:	ldr	r4, [r4, #4]
   14678:	movw	r1, #51836	; 0xca7c
   1467c:	movt	r1, #1
   14680:	mov	r2, #5
   14684:	cmp	r4, #0
   14688:	beq	1477c <__assert_fail@plt+0x32a0>
   1468c:	mov	r0, #0
   14690:	bl	11230 <dcgettext@plt>
   14694:	mov	r1, r0
   14698:	movw	r3, #51860	; 0xca94
   1469c:	movt	r3, #1
   146a0:	movw	r2, #51900	; 0xcabc
   146a4:	movt	r2, #1
   146a8:	mov	r0, #1
   146ac:	bl	113e0 <__printf_chk@plt>
   146b0:	mov	r1, #0
   146b4:	mov	r0, #5
   146b8:	bl	11440 <setlocale@plt>
   146bc:	cmp	r0, #0
   146c0:	movweq	r5, #48500	; 0xbd74
   146c4:	movteq	r5, #1
   146c8:	beq	146ec <__assert_fail@plt+0x3210>
   146cc:	movw	r1, #51916	; 0xcacc
   146d0:	movt	r1, #1
   146d4:	mov	r2, #3
   146d8:	movw	r5, #48500	; 0xbd74
   146dc:	movt	r5, #1
   146e0:	bl	11494 <strncmp@plt>
   146e4:	cmp	r0, #0
   146e8:	bne	14834 <__assert_fail@plt+0x3358>
   146ec:	mov	r2, #5
   146f0:	movw	r1, #51992	; 0xcb18
   146f4:	movt	r1, #1
   146f8:	mov	r0, #0
   146fc:	bl	11230 <dcgettext@plt>
   14700:	mov	r1, r0
   14704:	movw	r3, #48500	; 0xbd74
   14708:	movt	r3, #1
   1470c:	movw	r2, #51860	; 0xca94
   14710:	movt	r2, #1
   14714:	mov	r0, #1
   14718:	bl	113e0 <__printf_chk@plt>
   1471c:	mov	r2, #5
   14720:	movw	r1, #52020	; 0xcb34
   14724:	movt	r1, #1
   14728:	mov	r0, #0
   1472c:	bl	11230 <dcgettext@plt>
   14730:	movw	r2, #53344	; 0xd060
   14734:	movt	r2, #1
   14738:	cmp	r4, r5
   1473c:	movw	r3, #51464	; 0xc908
   14740:	movt	r3, #1
   14744:	mov	r1, r0
   14748:	moveq	r3, r2
   1474c:	mov	r2, r4
   14750:	mov	r0, #1
   14754:	bl	113e0 <__printf_chk@plt>
   14758:	b	14368 <__assert_fail@plt+0x2e8c>
   1475c:	ldr	r1, [r4, #8]!
   14760:	cmp	r1, #0
   14764:	beq	14674 <__assert_fail@plt+0x3198>
   14768:	mov	r0, r5
   1476c:	bl	1117c <strcmp@plt>
   14770:	cmp	r0, #0
   14774:	bne	1475c <__assert_fail@plt+0x3280>
   14778:	b	14674 <__assert_fail@plt+0x3198>
   1477c:	mov	r0, r4
   14780:	bl	11230 <dcgettext@plt>
   14784:	mov	r1, r0
   14788:	movw	r3, #51860	; 0xca94
   1478c:	movt	r3, #1
   14790:	movw	r2, #51900	; 0xcabc
   14794:	movt	r2, #1
   14798:	mov	r0, #1
   1479c:	bl	113e0 <__printf_chk@plt>
   147a0:	mov	r1, r4
   147a4:	mov	r0, #5
   147a8:	bl	11440 <setlocale@plt>
   147ac:	cmp	r0, #0
   147b0:	beq	147cc <__assert_fail@plt+0x32f0>
   147b4:	movw	r1, #51916	; 0xcacc
   147b8:	movt	r1, #1
   147bc:	mov	r2, #3
   147c0:	bl	11494 <strncmp@plt>
   147c4:	cmp	r0, #0
   147c8:	bne	14828 <__assert_fail@plt+0x334c>
   147cc:	mov	r2, #5
   147d0:	movw	r1, #51992	; 0xcb18
   147d4:	movt	r1, #1
   147d8:	mov	r0, #0
   147dc:	bl	11230 <dcgettext@plt>
   147e0:	mov	r1, r0
   147e4:	movw	r3, #48500	; 0xbd74
   147e8:	movt	r3, #1
   147ec:	movw	r2, #51860	; 0xca94
   147f0:	movt	r2, #1
   147f4:	mov	r0, #1
   147f8:	bl	113e0 <__printf_chk@plt>
   147fc:	movw	r1, #52020	; 0xcb34
   14800:	movt	r1, #1
   14804:	mov	r2, #5
   14808:	mov	r0, #0
   1480c:	bl	11230 <dcgettext@plt>
   14810:	movw	r4, #48500	; 0xbd74
   14814:	movt	r4, #1
   14818:	movw	r3, #53344	; 0xd060
   1481c:	movt	r3, #1
   14820:	mov	r1, r0
   14824:	b	1474c <__assert_fail@plt+0x3270>
   14828:	movw	r5, #48500	; 0xbd74
   1482c:	movt	r5, #1
   14830:	mov	r4, r5
   14834:	mov	r2, #5
   14838:	movw	r1, #51920	; 0xcad0
   1483c:	movt	r1, #1
   14840:	mov	r0, #0
   14844:	bl	11230 <dcgettext@plt>
   14848:	ldr	r1, [r7]
   1484c:	bl	11158 <fputs_unlocked@plt>
   14850:	b	146ec <__assert_fail@plt+0x3210>
   14854:	strd	r4, [sp, #-28]!	; 0xffffffe4
   14858:	mov	r4, r0
   1485c:	mov	r5, #0
   14860:	strd	r6, [sp, #8]
   14864:	mov	r7, r2
   14868:	sub	r6, r1, #1
   1486c:	strd	r8, [sp, #16]
   14870:	mov	r8, r3
   14874:	str	lr, [sp, #24]
   14878:	sub	sp, sp, #12
   1487c:	mov	r1, #44	; 0x2c
   14880:	mov	r0, r4
   14884:	bl	1138c <strchr@plt>
   14888:	sub	r9, r4, #1
   1488c:	mov	lr, r6
   14890:	mov	r1, r9
   14894:	mov	r2, lr
   14898:	b	148a4 <__assert_fail@plt+0x33c8>
   1489c:	cmp	r3, ip
   148a0:	bne	148cc <__assert_fail@plt+0x33f0>
   148a4:	ldrb	r3, [r2, #1]!
   148a8:	ldrb	ip, [r1, #1]!
   148ac:	cmp	r3, #0
   148b0:	bne	1489c <__assert_fail@plt+0x33c0>
   148b4:	cmp	ip, #0
   148b8:	cmpne	ip, #44	; 0x2c
   148bc:	bne	148cc <__assert_fail@plt+0x33f0>
   148c0:	ldr	r3, [lr, #13]
   148c4:	cmp	r3, #0
   148c8:	bne	14934 <__assert_fail@plt+0x3458>
   148cc:	add	lr, lr, #16
   148d0:	ldrb	r3, [lr, #-15]
   148d4:	cmp	r3, #0
   148d8:	bne	14890 <__assert_fail@plt+0x33b4>
   148dc:	cmp	r0, #0
   148e0:	subne	r5, r0, r4
   148e4:	beq	1496c <__assert_fail@plt+0x3490>
   148e8:	mov	r1, r8
   148ec:	mov	r2, #5
   148f0:	mov	r0, #0
   148f4:	bl	11230 <dcgettext@plt>
   148f8:	mov	r6, r0
   148fc:	mov	r3, r5
   14900:	mov	r2, r4
   14904:	mov	r1, #8
   14908:	mov	r0, #0
   1490c:	bl	18db8 <__assert_fail@plt+0x78dc>
   14910:	mov	r1, #0
   14914:	mov	r3, r6
   14918:	str	r0, [sp]
   1491c:	movw	r2, #52072	; 0xcb68
   14920:	movt	r2, #1
   14924:	mov	r0, r1
   14928:	bl	13a8c <__assert_fail@plt+0x25b0>
   1492c:	mov	r0, #1
   14930:	bl	14318 <__assert_fail@plt+0x2e3c>
   14934:	cmp	r7, #0
   14938:	orreq	r3, r3, r5
   1493c:	cmp	r0, #0
   14940:	beq	14950 <__assert_fail@plt+0x3474>
   14944:	add	r4, r0, #1
   14948:	mov	r5, r3
   1494c:	b	1487c <__assert_fail@plt+0x33a0>
   14950:	mov	r0, r3
   14954:	add	sp, sp, #12
   14958:	ldrd	r4, [sp]
   1495c:	ldrd	r6, [sp, #8]
   14960:	ldrd	r8, [sp, #16]
   14964:	add	sp, sp, #24
   14968:	pop	{pc}		; (ldr pc, [sp], #4)
   1496c:	mov	r0, r4
   14970:	bl	11380 <strlen@plt>
   14974:	mov	r5, r0
   14978:	b	148e8 <__assert_fail@plt+0x340c>
   1497c:	strd	r4, [sp, #-16]!
   14980:	movw	r4, #57832	; 0xe1e8
   14984:	movt	r4, #2
   14988:	ldr	r3, [r4]
   1498c:	str	r6, [sp, #8]
   14990:	str	lr, [sp, #12]
   14994:	cmp	r3, #0
   14998:	bne	149a8 <__assert_fail@plt+0x34cc>
   1499c:	bl	150d4 <__assert_fail@plt+0x3bf8>
   149a0:	cmp	r0, #0
   149a4:	bne	14a64 <__assert_fail@plt+0x3588>
   149a8:	mov	r0, #0
   149ac:	bl	114b8 <close@plt>
   149b0:	cmp	r0, #0
   149b4:	beq	149c8 <__assert_fail@plt+0x34ec>
   149b8:	mov	r0, #0
   149bc:	bl	13dfc <__assert_fail@plt+0x2920>
   149c0:	cmp	r0, #0
   149c4:	bne	14a38 <__assert_fail@plt+0x355c>
   149c8:	mov	r0, #1
   149cc:	bl	114b8 <close@plt>
   149d0:	cmp	r0, #0
   149d4:	beq	149e8 <__assert_fail@plt+0x350c>
   149d8:	mov	r0, #1
   149dc:	bl	13dfc <__assert_fail@plt+0x2920>
   149e0:	cmp	r0, #0
   149e4:	bne	149f8 <__assert_fail@plt+0x351c>
   149e8:	ldrd	r4, [sp]
   149ec:	ldr	r6, [sp, #8]
   149f0:	add	sp, sp, #12
   149f4:	pop	{pc}		; (ldr pc, [sp], #4)
   149f8:	bl	113a4 <__errno_location@plt>
   149fc:	movw	r1, #52104	; 0xcb88
   14a00:	movt	r1, #1
   14a04:	ldr	r5, [r0]
   14a08:	mov	r2, #5
   14a0c:	mov	r0, #0
   14a10:	bl	11230 <dcgettext@plt>
   14a14:	ldr	r1, [r4, #132]	; 0x84
   14a18:	mov	r6, r0
   14a1c:	mov	r0, #4
   14a20:	bl	18e04 <__assert_fail@plt+0x7928>
   14a24:	mov	r3, r0
   14a28:	mov	r2, r6
   14a2c:	mov	r1, r5
   14a30:	mov	r0, #1
   14a34:	bl	13a8c <__assert_fail@plt+0x25b0>
   14a38:	bl	113a4 <__errno_location@plt>
   14a3c:	movw	r1, #52080	; 0xcb70
   14a40:	movt	r1, #1
   14a44:	ldr	r5, [r0]
   14a48:	mov	r2, #5
   14a4c:	mov	r0, #0
   14a50:	bl	11230 <dcgettext@plt>
   14a54:	mov	r6, r0
   14a58:	mov	r0, #4
   14a5c:	ldr	r1, [r4, #128]	; 0x80
   14a60:	b	14a20 <__assert_fail@plt+0x3544>
   14a64:	bl	11374 <exit@plt>
   14a68:	strd	r4, [sp, #-16]!
   14a6c:	movw	r4, #57832	; 0xe1e8
   14a70:	movt	r4, #2
   14a74:	str	r6, [sp, #8]
   14a78:	add	r6, r4, #136	; 0x88
   14a7c:	str	lr, [sp, #12]
   14a80:	sub	sp, sp, #128	; 0x80
   14a84:	ldr	r3, [r4]
   14a88:	mov	r0, #0
   14a8c:	mov	r2, sp
   14a90:	mov	r1, r6
   14a94:	cmp	r3, r0
   14a98:	bne	14aa8 <__assert_fail@plt+0x35cc>
   14a9c:	ldr	r3, [r4, #4]
   14aa0:	cmp	r3, r0
   14aa4:	beq	14af4 <__assert_fail@plt+0x3618>
   14aa8:	bl	111ac <sigprocmask@plt>
   14aac:	ldr	r5, [r4]
   14ab0:	mov	r2, #0
   14ab4:	mov	r1, sp
   14ab8:	mov	r0, #2
   14abc:	ldr	r3, [r4, #4]
   14ac0:	cmp	r3, r2
   14ac4:	sub	ip, r3, #1
   14ac8:	strne	ip, [r4, #4]
   14acc:	bl	111ac <sigprocmask@plt>
   14ad0:	cmp	r5, #0
   14ad4:	bne	14ae0 <__assert_fail@plt+0x3604>
   14ad8:	bl	138e0 <__assert_fail@plt+0x2404>
   14adc:	b	14a84 <__assert_fail@plt+0x35a8>
   14ae0:	bl	1497c <__assert_fail@plt+0x34a0>
   14ae4:	bl	138e0 <__assert_fail@plt+0x2404>
   14ae8:	mov	r0, r5
   14aec:	bl	11164 <raise@plt>
   14af0:	b	14a84 <__assert_fail@plt+0x35a8>
   14af4:	add	sp, sp, #128	; 0x80
   14af8:	ldrd	r4, [sp]
   14afc:	ldr	r6, [sp, #8]
   14b00:	add	sp, sp, #12
   14b04:	pop	{pc}		; (ldr pc, [sp], #4)
   14b08:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14b0c:	mov	r5, r3
   14b10:	strd	r6, [sp, #8]
   14b14:	mov	r7, r1
   14b18:	mov	r6, r2
   14b1c:	str	r8, [sp, #16]
   14b20:	mov	r8, r0
   14b24:	str	lr, [sp, #20]
   14b28:	b	14b3c <__assert_fail@plt+0x3660>
   14b2c:	bl	113a4 <__errno_location@plt>
   14b30:	ldr	r3, [r0]
   14b34:	cmp	r3, #4
   14b38:	bne	14b5c <__assert_fail@plt+0x3680>
   14b3c:	bl	14a68 <__assert_fail@plt+0x358c>
   14b40:	mov	r3, r5
   14b44:	mov	r2, r6
   14b48:	mov	r1, r7
   14b4c:	mov	r0, r8
   14b50:	bl	15dd4 <__assert_fail@plt+0x48f8>
   14b54:	subs	r4, r0, #0
   14b58:	blt	14b2c <__assert_fail@plt+0x3650>
   14b5c:	mov	r0, r4
   14b60:	ldrd	r4, [sp]
   14b64:	ldrd	r6, [sp, #8]
   14b68:	ldr	r8, [sp, #16]
   14b6c:	add	sp, sp, #20
   14b70:	pop	{pc}		; (ldr pc, [sp], #4)
   14b74:	strd	r4, [sp, #-16]!
   14b78:	mov	r5, r1
   14b7c:	str	r6, [sp, #8]
   14b80:	mov	r6, r0
   14b84:	str	lr, [sp, #12]
   14b88:	b	14b9c <__assert_fail@plt+0x36c0>
   14b8c:	bl	113a4 <__errno_location@plt>
   14b90:	ldr	r3, [r0]
   14b94:	cmp	r3, #4
   14b98:	bne	14bb8 <__assert_fail@plt+0x36dc>
   14b9c:	bl	14a68 <__assert_fail@plt+0x358c>
   14ba0:	mov	r2, r5
   14ba4:	mov	r1, r6
   14ba8:	mov	r0, #3
   14bac:	bl	11278 <__fxstat64@plt>
   14bb0:	subs	r4, r0, #0
   14bb4:	blt	14b8c <__assert_fail@plt+0x36b0>
   14bb8:	mov	r0, r4
   14bbc:	ldrd	r4, [sp]
   14bc0:	ldr	r6, [sp, #8]
   14bc4:	add	sp, sp, #12
   14bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bcc:	strd	r4, [sp, #-20]!	; 0xffffffec
   14bd0:	bics	r4, r1, #33024	; 0x8100
   14bd4:	strd	r6, [sp, #8]
   14bd8:	str	lr, [sp, #16]
   14bdc:	sub	sp, sp, #108	; 0x6c
   14be0:	bne	14bf8 <__assert_fail@plt+0x371c>
   14be4:	add	sp, sp, #108	; 0x6c
   14be8:	ldrd	r4, [sp]
   14bec:	ldrd	r6, [sp, #8]
   14bf0:	add	sp, sp, #16
   14bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   14bf8:	mov	r1, #3
   14bfc:	mov	r5, r0
   14c00:	mov	r7, r2
   14c04:	bl	15bec <__assert_fail@plt+0x4710>
   14c08:	cmp	r0, #0
   14c0c:	mov	r6, r0
   14c10:	orr	r4, r4, r0
   14c14:	blt	14c74 <__assert_fail@plt+0x3798>
   14c18:	cmp	r0, r4
   14c1c:	beq	14be4 <__assert_fail@plt+0x3708>
   14c20:	tst	r4, #16384	; 0x4000
   14c24:	bne	14c44 <__assert_fail@plt+0x3768>
   14c28:	mov	r2, r4
   14c2c:	mov	r0, r5
   14c30:	mov	r1, #4
   14c34:	bl	15bec <__assert_fail@plt+0x4710>
   14c38:	cmn	r0, #1
   14c3c:	bne	14be4 <__assert_fail@plt+0x3708>
   14c40:	b	14c74 <__assert_fail@plt+0x3798>
   14c44:	mov	r1, sp
   14c48:	mov	r0, r5
   14c4c:	bl	14b74 <__assert_fail@plt+0x3698>
   14c50:	cmp	r0, #0
   14c54:	bne	14c74 <__assert_fail@plt+0x3798>
   14c58:	ldr	r3, [sp, #16]
   14c5c:	and	r3, r3, #61440	; 0xf000
   14c60:	cmp	r3, #16384	; 0x4000
   14c64:	beq	14cb4 <__assert_fail@plt+0x37d8>
   14c68:	bl	113a4 <__errno_location@plt>
   14c6c:	mov	r3, #20
   14c70:	str	r3, [r0]
   14c74:	bl	113a4 <__errno_location@plt>
   14c78:	ldr	r4, [r0]
   14c7c:	mov	r2, #5
   14c80:	movw	r1, #52128	; 0xcba0
   14c84:	movt	r1, #1
   14c88:	mov	r0, #0
   14c8c:	bl	11230 <dcgettext@plt>
   14c90:	mov	r5, r0
   14c94:	mov	r1, r7
   14c98:	mov	r0, #4
   14c9c:	bl	18e04 <__assert_fail@plt+0x7928>
   14ca0:	mov	r3, r0
   14ca4:	mov	r2, r5
   14ca8:	mov	r1, r4
   14cac:	mov	r0, #1
   14cb0:	bl	13a8c <__assert_fail@plt+0x25b0>
   14cb4:	bic	r4, r4, #16384	; 0x4000
   14cb8:	cmp	r4, r6
   14cbc:	beq	14be4 <__assert_fail@plt+0x3708>
   14cc0:	b	14c28 <__assert_fail@plt+0x374c>
   14cc4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cc8:	strd	r6, [sp, #8]
   14ccc:	mov	r7, r0
   14cd0:	mov	r6, r1
   14cd4:	str	r8, [sp, #16]
   14cd8:	mov	r8, r2
   14cdc:	str	lr, [sp, #20]
   14ce0:	sub	sp, sp, #8
   14ce4:	b	14d00 <__assert_fail@plt+0x3824>
   14ce8:	cmp	r0, #0
   14cec:	bge	14d78 <__assert_fail@plt+0x389c>
   14cf0:	bl	113a4 <__errno_location@plt>
   14cf4:	ldr	r3, [r0]
   14cf8:	cmp	r3, #4
   14cfc:	bne	14d78 <__assert_fail@plt+0x389c>
   14d00:	bl	14a68 <__assert_fail@plt+0x358c>
   14d04:	mov	r2, r8
   14d08:	mov	r1, r6
   14d0c:	mov	r0, r7
   14d10:	bl	11194 <read@plt>
   14d14:	cmn	r0, #1
   14d18:	mov	r4, r0
   14d1c:	bne	14ce8 <__assert_fail@plt+0x380c>
   14d20:	bl	113a4 <__errno_location@plt>
   14d24:	ldr	r3, [r0]
   14d28:	cmp	r3, #22
   14d2c:	bne	14cf8 <__assert_fail@plt+0x381c>
   14d30:	movw	r6, #57832	; 0xe1e8
   14d34:	movt	r6, #2
   14d38:	ldr	r3, [r6, #264]	; 0x108
   14d3c:	cmp	r3, #0
   14d40:	movle	r2, #0
   14d44:	movgt	r2, #1
   14d48:	cmp	r3, r8
   14d4c:	movge	r2, #0
   14d50:	cmp	r2, #0
   14d54:	bne	14e28 <__assert_fail@plt+0x394c>
   14d58:	mov	r0, r4
   14d5c:	str	r4, [r6, #264]	; 0x108
   14d60:	add	sp, sp, #8
   14d64:	ldrd	r4, [sp]
   14d68:	ldrd	r6, [sp, #8]
   14d6c:	ldr	r8, [sp, #16]
   14d70:	add	sp, sp, #20
   14d74:	pop	{pc}		; (ldr pc, [sp], #4)
   14d78:	cmp	r4, #0
   14d7c:	cmpgt	r8, r4
   14d80:	ble	14e14 <__assert_fail@plt+0x3938>
   14d84:	bl	14a68 <__assert_fail@plt+0x358c>
   14d88:	movw	r6, #57832	; 0xe1e8
   14d8c:	movt	r6, #2
   14d90:	ldrb	r3, [r6, #272]	; 0x110
   14d94:	cmp	r3, #0
   14d98:	beq	14d58 <__assert_fail@plt+0x387c>
   14d9c:	ldr	r7, [r6, #264]	; 0x108
   14da0:	cmp	r7, r8
   14da4:	movge	r5, #0
   14da8:	movlt	r5, #1
   14dac:	cmp	r7, #0
   14db0:	movle	r5, #0
   14db4:	cmp	r5, #0
   14db8:	beq	14d58 <__assert_fail@plt+0x387c>
   14dbc:	movw	r3, #57680	; 0xe150
   14dc0:	movt	r3, #2
   14dc4:	ldr	r3, [r3, #8]
   14dc8:	cmp	r3, #1
   14dcc:	beq	14e08 <__assert_fail@plt+0x392c>
   14dd0:	mov	r0, #5
   14dd4:	mov	r3, r7
   14dd8:	movw	r2, #52152	; 0xcbb8
   14ddc:	movt	r2, #1
   14de0:	movw	r1, #52212	; 0xcbf4
   14de4:	movt	r1, #1
   14de8:	str	r0, [sp]
   14dec:	mov	r0, #0
   14df0:	bl	114c4 <dcngettext@plt>
   14df4:	mov	r1, #0
   14df8:	mov	r2, r0
   14dfc:	mov	r3, r7
   14e00:	mov	r0, r1
   14e04:	bl	13a8c <__assert_fail@plt+0x25b0>
   14e08:	mov	r3, #0
   14e0c:	strb	r3, [r6, #272]	; 0x110
   14e10:	b	14d58 <__assert_fail@plt+0x387c>
   14e14:	cmp	r4, #0
   14e18:	movwle	r6, #57832	; 0xe1e8
   14e1c:	movtle	r6, #2
   14e20:	bgt	14d88 <__assert_fail@plt+0x38ac>
   14e24:	b	14d58 <__assert_fail@plt+0x387c>
   14e28:	ldr	r3, [r6, #268]	; 0x10c
   14e2c:	tst	r3, #65536	; 0x10000
   14e30:	movne	r3, #0
   14e34:	movne	r4, r3
   14e38:	strne	r3, [r0]
   14e3c:	b	14d58 <__assert_fail@plt+0x387c>
   14e40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14e44:	subs	r4, r2, #0
   14e48:	strd	r6, [sp, #8]
   14e4c:	str	r8, [sp, #16]
   14e50:	str	lr, [sp, #20]
   14e54:	ble	14eb4 <__assert_fail@plt+0x39d8>
   14e58:	mov	r7, r0
   14e5c:	mov	r5, r1
   14e60:	mov	r6, #0
   14e64:	b	14e7c <__assert_fail@plt+0x39a0>
   14e68:	beq	14eac <__assert_fail@plt+0x39d0>
   14e6c:	cmp	r4, #0
   14e70:	add	r6, r6, r0
   14e74:	add	r5, r5, r0
   14e78:	ble	14eac <__assert_fail@plt+0x39d0>
   14e7c:	mov	r2, r4
   14e80:	mov	r1, r5
   14e84:	mov	r0, r7
   14e88:	bl	14cc4 <__assert_fail@plt+0x37e8>
   14e8c:	cmp	r0, #0
   14e90:	sub	r4, r4, r0
   14e94:	bge	14e68 <__assert_fail@plt+0x398c>
   14e98:	ldrd	r4, [sp]
   14e9c:	ldrd	r6, [sp, #8]
   14ea0:	ldr	r8, [sp, #16]
   14ea4:	add	sp, sp, #20
   14ea8:	pop	{pc}		; (ldr pc, [sp], #4)
   14eac:	mov	r0, r6
   14eb0:	b	14e98 <__assert_fail@plt+0x39bc>
   14eb4:	mov	r0, #0
   14eb8:	b	14e98 <__assert_fail@plt+0x39bc>
   14ebc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14ec0:	mov	r5, r1
   14ec4:	strd	r6, [sp, #8]
   14ec8:	movw	r6, #57832	; 0xe1e8
   14ecc:	movt	r6, #2
   14ed0:	ldr	r3, [r6, #276]	; 0x114
   14ed4:	strd	r8, [sp, #16]
   14ed8:	mov	r8, r0
   14edc:	str	sl, [sp, #24]
   14ee0:	str	lr, [sp, #28]
   14ee4:	sub	sp, sp, #16
   14ee8:	tst	r3, #65536	; 0x10000
   14eec:	beq	14efc <__assert_fail@plt+0x3a20>
   14ef0:	ldr	r3, [r6, #120]	; 0x78
   14ef4:	cmp	r3, r1
   14ef8:	bgt	15018 <__assert_fail@plt+0x3b3c>
   14efc:	cmp	r5, #0
   14f00:	mov	r4, #0
   14f04:	ble	14fb8 <__assert_fail@plt+0x3adc>
   14f08:	asr	r3, r5, #31
   14f0c:	mov	r2, r5
   14f10:	mov	sl, #1
   14f14:	mov	r9, r4
   14f18:	strd	r2, [sp, #8]
   14f1c:	b	14f30 <__assert_fail@plt+0x3a54>
   14f20:	beq	15008 <__assert_fail@plt+0x3b2c>
   14f24:	add	r4, r4, r0
   14f28:	cmp	r5, r4
   14f2c:	ble	14fa0 <__assert_fail@plt+0x3ac4>
   14f30:	bl	14a68 <__assert_fail@plt+0x358c>
   14f34:	ldr	r7, [r6, #116]	; 0x74
   14f38:	strb	r9, [r6, #280]	; 0x118
   14f3c:	tst	r7, #65536	; 0x10000
   14f40:	beq	14f78 <__assert_fail@plt+0x3a9c>
   14f44:	mov	r2, r5
   14f48:	mov	r1, r8
   14f4c:	ldrb	r3, [r1], #1
   14f50:	cmp	r3, #0
   14f54:	bne	14f78 <__assert_fail@plt+0x3a9c>
   14f58:	subs	r2, r2, #1
   14f5c:	beq	14fd8 <__assert_fail@plt+0x3afc>
   14f60:	tst	r2, #15
   14f64:	bne	14f4c <__assert_fail@plt+0x3a70>
   14f68:	mov	r0, r8
   14f6c:	bl	11218 <memcmp@plt>
   14f70:	cmp	r0, #0
   14f74:	beq	14fd8 <__assert_fail@plt+0x3afc>
   14f78:	sub	r2, r5, r4
   14f7c:	add	r1, r8, r4
   14f80:	mov	r0, #1
   14f84:	bl	113ec <write@plt>
   14f88:	cmp	r0, #0
   14f8c:	bge	14f20 <__assert_fail@plt+0x3a44>
   14f90:	bl	113a4 <__errno_location@plt>
   14f94:	ldr	r3, [r0]
   14f98:	cmp	r3, #4
   14f9c:	beq	14f28 <__assert_fail@plt+0x3a4c>
   14fa0:	ldrb	r3, [r6, #281]	; 0x119
   14fa4:	cmp	r4, #0
   14fa8:	moveq	r3, #0
   14fac:	andne	r3, r3, #1
   14fb0:	cmp	r3, #0
   14fb4:	bne	15078 <__assert_fail@plt+0x3b9c>
   14fb8:	mov	r0, r4
   14fbc:	add	sp, sp, #16
   14fc0:	ldrd	r4, [sp]
   14fc4:	ldrd	r6, [sp, #8]
   14fc8:	ldrd	r8, [sp, #16]
   14fcc:	ldr	sl, [sp, #24]
   14fd0:	add	sp, sp, #28
   14fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   14fd8:	mov	r0, #1
   14fdc:	str	sl, [sp]
   14fe0:	ldrd	r2, [sp, #8]
   14fe4:	bl	112a8 <lseek64@plt>
   14fe8:	cmp	r0, #0
   14fec:	sbcs	r3, r1, #0
   14ff0:	biclt	r7, r7, #65536	; 0x10000
   14ff4:	strlt	r7, [r6, #116]	; 0x74
   14ff8:	blt	14f78 <__assert_fail@plt+0x3a9c>
   14ffc:	mov	r0, r5
   15000:	strb	sl, [r6, #280]	; 0x118
   15004:	b	14f24 <__assert_fail@plt+0x3a48>
   15008:	bl	113a4 <__errno_location@plt>
   1500c:	mov	r3, #28
   15010:	str	r3, [r0]
   15014:	b	14fa0 <__assert_fail@plt+0x3ac4>
   15018:	mov	r1, #3
   1501c:	mov	r0, #1
   15020:	bl	15bec <__assert_fail@plt+0x4710>
   15024:	bic	r2, r0, #65536	; 0x10000
   15028:	mov	r1, #4
   1502c:	mov	r0, #1
   15030:	bl	15bec <__assert_fail@plt+0x4710>
   15034:	cmp	r0, #0
   15038:	beq	15050 <__assert_fail@plt+0x3b74>
   1503c:	movw	r3, #57680	; 0xe150
   15040:	movt	r3, #2
   15044:	ldr	r3, [r3, #8]
   15048:	cmp	r3, #1
   1504c:	bne	1508c <__assert_fail@plt+0x3bb0>
   15050:	mov	r1, #1
   15054:	mov	r3, #0
   15058:	mov	r2, #0
   1505c:	mov	r0, r1
   15060:	strb	r1, [r6, #89]	; 0x59
   15064:	bl	13b34 <__assert_fail@plt+0x2658>
   15068:	ldr	r3, [r6, #116]	; 0x74
   1506c:	orr	r3, r3, #32768	; 0x8000
   15070:	str	r3, [r6, #116]	; 0x74
   15074:	b	14efc <__assert_fail@plt+0x3a20>
   15078:	mov	r2, r4
   1507c:	asr	r3, r4, #31
   15080:	mov	r0, #1
   15084:	bl	13b34 <__assert_fail@plt+0x2658>
   15088:	b	14fb8 <__assert_fail@plt+0x3adc>
   1508c:	bl	113a4 <__errno_location@plt>
   15090:	ldr	r4, [r0]
   15094:	mov	r2, #5
   15098:	movw	r1, #52272	; 0xcc30
   1509c:	movt	r1, #1
   150a0:	mov	r0, #0
   150a4:	bl	11230 <dcgettext@plt>
   150a8:	mov	r7, r0
   150ac:	mov	r1, #3
   150b0:	ldr	r2, [r6, #132]	; 0x84
   150b4:	mov	r0, #0
   150b8:	bl	18ee0 <__assert_fail@plt+0x7a04>
   150bc:	mov	r3, r0
   150c0:	mov	r2, r7
   150c4:	mov	r1, r4
   150c8:	mov	r0, #0
   150cc:	bl	13a8c <__assert_fail@plt+0x25b0>
   150d0:	b	15050 <__assert_fail@plt+0x3b74>
   150d4:	strd	r4, [sp, #-16]!
   150d8:	movw	r5, #57832	; 0xe1e8
   150dc:	movt	r5, #2
   150e0:	ldr	r4, [r5, #116]	; 0x74
   150e4:	str	r6, [sp, #8]
   150e8:	str	lr, [sp, #12]
   150ec:	bic	r3, r4, #49152	; 0xc000
   150f0:	tst	r4, #16384	; 0x4000
   150f4:	str	r3, [r5, #116]	; 0x74
   150f8:	bne	15128 <__assert_fail@plt+0x3c4c>
   150fc:	ands	r4, r4, #32768	; 0x8000
   15100:	bne	15194 <__assert_fail@plt+0x3cb8>
   15104:	mov	r0, r4
   15108:	ldrd	r4, [sp]
   1510c:	ldr	r6, [sp, #8]
   15110:	add	sp, sp, #12
   15114:	pop	{pc}		; (ldr pc, [sp], #4)
   15118:	bl	113a4 <__errno_location@plt>
   1511c:	ldr	r6, [r0]
   15120:	cmp	r6, #4
   15124:	bne	15148 <__assert_fail@plt+0x3c6c>
   15128:	bl	14a68 <__assert_fail@plt+0x358c>
   1512c:	mov	r0, #1
   15130:	bl	114a0 <fdatasync@plt>
   15134:	cmp	r0, #0
   15138:	blt	15118 <__assert_fail@plt+0x3c3c>
   1513c:	beq	150fc <__assert_fail@plt+0x3c20>
   15140:	bl	113a4 <__errno_location@plt>
   15144:	ldr	r6, [r0]
   15148:	sub	r3, r6, #22
   1514c:	bics	r3, r3, #16
   15150:	beq	15194 <__assert_fail@plt+0x3cb8>
   15154:	mov	r2, #5
   15158:	movw	r1, #52304	; 0xcc50
   1515c:	movt	r1, #1
   15160:	mov	r0, #0
   15164:	bl	11230 <dcgettext@plt>
   15168:	mov	r4, r0
   1516c:	mov	r0, #4
   15170:	ldr	r1, [r5, #132]	; 0x84
   15174:	bl	18e04 <__assert_fail@plt+0x7928>
   15178:	mov	r3, r0
   1517c:	mov	r2, r4
   15180:	mov	r1, r6
   15184:	mov	r0, #0
   15188:	bl	13a8c <__assert_fail@plt+0x25b0>
   1518c:	mov	r4, #1
   15190:	b	151ac <__assert_fail@plt+0x3cd0>
   15194:	mov	r4, #0
   15198:	b	151ac <__assert_fail@plt+0x3cd0>
   1519c:	bl	113a4 <__errno_location@plt>
   151a0:	ldr	r6, [r0]
   151a4:	cmp	r6, #4
   151a8:	bne	151cc <__assert_fail@plt+0x3cf0>
   151ac:	bl	14a68 <__assert_fail@plt+0x358c>
   151b0:	mov	r0, #1
   151b4:	bl	11170 <fsync@plt>
   151b8:	cmp	r0, #0
   151bc:	blt	1519c <__assert_fail@plt+0x3cc0>
   151c0:	beq	15104 <__assert_fail@plt+0x3c28>
   151c4:	bl	113a4 <__errno_location@plt>
   151c8:	ldr	r6, [r0]
   151cc:	mov	r2, #5
   151d0:	movw	r1, #52328	; 0xcc68
   151d4:	movt	r1, #1
   151d8:	mov	r0, #0
   151dc:	bl	11230 <dcgettext@plt>
   151e0:	mov	r4, r0
   151e4:	mov	r0, #4
   151e8:	ldr	r1, [r5, #132]	; 0x84
   151ec:	bl	18e04 <__assert_fail@plt+0x7928>
   151f0:	mov	r3, r0
   151f4:	mov	r2, r4
   151f8:	mov	r1, r6
   151fc:	mov	r0, #0
   15200:	mov	r4, #1
   15204:	bl	13a8c <__assert_fail@plt+0x25b0>
   15208:	b	15104 <__assert_fail@plt+0x3c28>
   1520c:	str	r4, [sp, #-8]!
   15210:	str	lr, [sp, #4]
   15214:	bl	14a68 <__assert_fail@plt+0x358c>
   15218:	bl	1497c <__assert_fail@plt+0x34a0>
   1521c:	bl	138e0 <__assert_fail@plt+0x2404>
   15220:	mov	r0, #1
   15224:	bl	11374 <exit@plt>
   15228:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1522c:	movw	r4, #57832	; 0xe1e8
   15230:	movt	r4, #2
   15234:	ldr	r1, [r4, #120]	; 0x78
   15238:	strd	r6, [sp, #8]
   1523c:	ldr	r0, [r4, #124]	; 0x7c
   15240:	str	r8, [sp, #16]
   15244:	str	lr, [sp, #20]
   15248:	bl	14ebc <__assert_fail@plt+0x39e0>
   1524c:	ldrd	r2, [r4, #8]
   15250:	ldr	r1, [r4, #120]	; 0x78
   15254:	adds	r6, r2, r0
   15258:	adc	r7, r3, r0, asr #31
   1525c:	cmp	r1, r0
   15260:	strd	r6, [r4, #8]
   15264:	bne	1529c <__assert_fail@plt+0x3dc0>
   15268:	ldr	r3, [r4, #40]	; 0x28
   1526c:	mov	r1, #0
   15270:	ldr	r2, [r4, #44]	; 0x2c
   15274:	str	r1, [r4, #284]	; 0x11c
   15278:	ldrd	r6, [sp, #8]
   1527c:	adds	r3, r3, #1
   15280:	ldr	r8, [sp, #16]
   15284:	adc	r2, r2, r1
   15288:	str	r3, [r4, #40]	; 0x28
   1528c:	str	r2, [r4, #44]	; 0x2c
   15290:	ldrd	r4, [sp]
   15294:	add	sp, sp, #20
   15298:	pop	{pc}		; (ldr pc, [sp], #4)
   1529c:	mov	r5, r0
   152a0:	bl	113a4 <__errno_location@plt>
   152a4:	ldr	r6, [r0]
   152a8:	mov	r2, #5
   152ac:	movw	r1, #52348	; 0xcc7c
   152b0:	movt	r1, #1
   152b4:	mov	r0, #0
   152b8:	bl	11230 <dcgettext@plt>
   152bc:	mov	r7, r0
   152c0:	mov	r0, #4
   152c4:	ldr	r1, [r4, #132]	; 0x84
   152c8:	bl	18e04 <__assert_fail@plt+0x7928>
   152cc:	mov	r3, r0
   152d0:	mov	r2, r7
   152d4:	mov	r1, r6
   152d8:	mov	r0, #0
   152dc:	bl	13a8c <__assert_fail@plt+0x25b0>
   152e0:	cmp	r5, #0
   152e4:	beq	15300 <__assert_fail@plt+0x3e24>
   152e8:	ldr	r3, [r4, #32]
   152ec:	ldr	r2, [r4, #36]	; 0x24
   152f0:	adds	r3, r3, #1
   152f4:	adc	r2, r2, #0
   152f8:	str	r3, [r4, #32]
   152fc:	str	r2, [r4, #36]	; 0x24
   15300:	bl	1520c <__assert_fail@plt+0x3d30>
   15304:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15308:	strd	r6, [sp, #8]
   1530c:	strd	r8, [sp, #16]
   15310:	subs	r9, r1, #0
   15314:	str	sl, [sp, #24]
   15318:	str	lr, [sp, #28]
   1531c:	beq	153a8 <__assert_fail@plt+0x3ecc>
   15320:	sub	r6, r0, #1
   15324:	movw	r4, #57832	; 0xe1e8
   15328:	movt	r4, #2
   1532c:	movw	r8, #57680	; 0xe150
   15330:	movt	r8, #2
   15334:	add	r9, r6, r9
   15338:	mov	r7, #0
   1533c:	b	1537c <__assert_fail@plt+0x3ea0>
   15340:	cmp	r5, r1
   15344:	beq	153fc <__assert_fail@plt+0x3f20>
   15348:	bge	1536c <__assert_fail@plt+0x3e90>
   1534c:	ldr	r1, [r4, #124]	; 0x7c
   15350:	ldr	r2, [r4, #284]	; 0x11c
   15354:	strb	r3, [r1, r2]
   15358:	add	r3, r2, #1
   1535c:	ldr	r2, [r4, #120]	; 0x78
   15360:	str	r3, [r4, #284]	; 0x11c
   15364:	cmp	r3, r2
   15368:	bge	15418 <__assert_fail@plt+0x3f3c>
   1536c:	add	r5, r5, #1
   15370:	cmp	r9, r6
   15374:	str	r5, [r4, #288]	; 0x120
   15378:	beq	153a8 <__assert_fail@plt+0x3ecc>
   1537c:	ldrb	r3, [r6, #1]!
   15380:	ldrb	r2, [r8, #25]
   15384:	ldr	r5, [r4, #288]	; 0x120
   15388:	ldr	r1, [r4, #292]	; 0x124
   1538c:	cmp	r2, r3
   15390:	bne	15340 <__assert_fail@plt+0x3e64>
   15394:	cmp	r5, r1
   15398:	blt	153d0 <__assert_fail@plt+0x3ef4>
   1539c:	cmp	r9, r6
   153a0:	str	r7, [r4, #288]	; 0x120
   153a4:	bne	1537c <__assert_fail@plt+0x3ea0>
   153a8:	ldrd	r4, [sp]
   153ac:	ldrd	r6, [sp, #8]
   153b0:	ldrd	r8, [sp, #16]
   153b4:	ldr	sl, [sp, #24]
   153b8:	add	sp, sp, #28
   153bc:	pop	{pc}		; (ldr pc, [sp], #4)
   153c0:	bl	15228 <__assert_fail@plt+0x3d4c>
   153c4:	ldr	r3, [r4, #292]	; 0x124
   153c8:	cmp	r3, r5
   153cc:	ble	1539c <__assert_fail@plt+0x3ec0>
   153d0:	ldrb	r1, [r8, #26]
   153d4:	add	r5, r5, #1
   153d8:	ldr	r2, [r4, #124]	; 0x7c
   153dc:	ldr	r3, [r4, #284]	; 0x11c
   153e0:	strb	r1, [r2, r3]
   153e4:	add	r3, r3, #1
   153e8:	ldr	r2, [r4, #120]	; 0x78
   153ec:	str	r3, [r4, #284]	; 0x11c
   153f0:	cmp	r3, r2
   153f4:	blt	153c4 <__assert_fail@plt+0x3ee8>
   153f8:	b	153c0 <__assert_fail@plt+0x3ee4>
   153fc:	ldr	r3, [r4, #64]	; 0x40
   15400:	ldr	r2, [r4, #68]	; 0x44
   15404:	adds	r3, r3, #1
   15408:	adc	r2, r2, #0
   1540c:	str	r3, [r4, #64]	; 0x40
   15410:	str	r2, [r4, #68]	; 0x44
   15414:	b	1536c <__assert_fail@plt+0x3e90>
   15418:	bl	15228 <__assert_fail@plt+0x3d4c>
   1541c:	ldr	r5, [r4, #288]	; 0x120
   15420:	b	1536c <__assert_fail@plt+0x3e90>
   15424:	strd	r4, [sp, #-32]!	; 0xffffffe0
   15428:	subs	r5, r1, #0
   1542c:	strd	r6, [sp, #8]
   15430:	strd	r8, [sp, #16]
   15434:	str	sl, [sp, #24]
   15438:	str	lr, [sp, #28]
   1543c:	ble	1554c <__assert_fail@plt+0x4070>
   15440:	mov	r8, #0
   15444:	movw	r4, #57832	; 0xe1e8
   15448:	movt	r4, #2
   1544c:	movw	r9, #57680	; 0xe150
   15450:	movt	r9, #2
   15454:	mov	r6, r0
   15458:	mov	r7, r8
   1545c:	b	15494 <__assert_fail@plt+0x3fb8>
   15460:	ldrb	r1, [r9, #25]
   15464:	str	r7, [r4, #288]	; 0x120
   15468:	ldr	r2, [r4, #124]	; 0x7c
   1546c:	str	r7, [r4, #296]	; 0x128
   15470:	ldr	r3, [r4, #284]	; 0x11c
   15474:	strb	r1, [r2, r3]
   15478:	add	r3, r3, #1
   1547c:	ldr	r2, [r4, #120]	; 0x78
   15480:	str	r3, [r4, #284]	; 0x11c
   15484:	cmp	r3, r2
   15488:	bge	15540 <__assert_fail@plt+0x4064>
   1548c:	cmp	r5, r8
   15490:	ble	1554c <__assert_fail@plt+0x4070>
   15494:	ldr	r3, [r4, #288]	; 0x120
   15498:	ldr	r1, [r4, #292]	; 0x124
   1549c:	ldrb	sl, [r6, r8]
   154a0:	add	r2, r3, #1
   154a4:	cmp	r3, r1
   154a8:	str	r2, [r4, #288]	; 0x120
   154ac:	bge	15460 <__assert_fail@plt+0x3f84>
   154b0:	ldrb	r3, [r9, #26]
   154b4:	add	r8, r8, #1
   154b8:	ldr	r2, [r4, #296]	; 0x128
   154bc:	cmp	r3, sl
   154c0:	addeq	r2, r2, #1
   154c4:	streq	r2, [r4, #296]	; 0x128
   154c8:	beq	1548c <__assert_fail@plt+0x3fb0>
   154cc:	cmp	r2, #0
   154d0:	ldr	r0, [r4, #124]	; 0x7c
   154d4:	ldr	r1, [r4, #284]	; 0x11c
   154d8:	moveq	r2, r1
   154dc:	bne	15500 <__assert_fail@plt+0x4024>
   154e0:	b	15528 <__assert_fail@plt+0x404c>
   154e4:	ldr	r3, [r4, #296]	; 0x128
   154e8:	mov	r1, r2
   154ec:	sub	r3, r3, #1
   154f0:	cmp	r3, #0
   154f4:	str	r3, [r4, #296]	; 0x128
   154f8:	beq	15528 <__assert_fail@plt+0x404c>
   154fc:	ldrb	r3, [r9, #26]
   15500:	strb	r3, [r0, r1]
   15504:	add	r2, r1, #1
   15508:	ldr	r3, [r4, #120]	; 0x78
   1550c:	str	r2, [r4, #284]	; 0x11c
   15510:	cmp	r2, r3
   15514:	blt	154e4 <__assert_fail@plt+0x4008>
   15518:	bl	15228 <__assert_fail@plt+0x3d4c>
   1551c:	ldr	r0, [r4, #124]	; 0x7c
   15520:	ldr	r2, [r4, #284]	; 0x11c
   15524:	b	154e4 <__assert_fail@plt+0x4008>
   15528:	strb	sl, [r0, r2]
   1552c:	add	r2, r2, #1
   15530:	ldr	r3, [r4, #120]	; 0x78
   15534:	str	r2, [r4, #284]	; 0x11c
   15538:	cmp	r2, r3
   1553c:	blt	1548c <__assert_fail@plt+0x3fb0>
   15540:	bl	15228 <__assert_fail@plt+0x3d4c>
   15544:	cmp	r5, r8
   15548:	bgt	15494 <__assert_fail@plt+0x3fb8>
   1554c:	ldrd	r4, [sp]
   15550:	ldrd	r6, [sp, #8]
   15554:	ldrd	r8, [sp, #16]
   15558:	ldr	sl, [sp, #24]
   1555c:	add	sp, sp, #28
   15560:	pop	{pc}		; (ldr pc, [sp], #4)
   15564:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15568:	strd	r6, [sp, #8]
   1556c:	strd	r8, [sp, #16]
   15570:	mov	r8, r0
   15574:	strd	sl, [sp, #24]
   15578:	mov	sl, r2
   1557c:	mov	fp, r3
   15580:	str	lr, [sp, #32]
   15584:	sub	sp, sp, #148	; 0x94
   15588:	ldr	r7, [sp, #184]	; 0xb8
   1558c:	str	r1, [sp, #12]
   15590:	bl	113a4 <__errno_location@plt>
   15594:	mov	r3, #0
   15598:	cmp	fp, sl, asr #31
   1559c:	str	r0, [sp, #8]
   155a0:	mov	ip, r3
   155a4:	ldr	r9, [sp, #188]	; 0xbc
   155a8:	str	r3, [r0]
   155ac:	asr	r3, r7, #31
   155b0:	mov	r2, r7
   155b4:	strd	r2, [sp, #16]
   155b8:	bne	157cc <__assert_fail@plt+0x42f0>
   155bc:	smull	r2, r3, sl, r7
   155c0:	mov	r4, r2
   155c4:	mov	r1, r3
   155c8:	cmp	ip, #0
   155cc:	mov	r3, r1
   155d0:	bne	155e8 <__assert_fail@plt+0x410c>
   155d4:	ldr	r0, [r9]
   155d8:	asr	r1, r0, #31
   155dc:	adds	r4, r4, r0
   155e0:	adcs	r5, r3, r1
   155e4:	bvc	156d0 <__assert_fail@plt+0x41f4>
   155e8:	mov	r1, #2
   155ec:	mov	r3, #0
   155f0:	mov	r2, #0
   155f4:	mov	r0, r8
   155f8:	str	r1, [sp]
   155fc:	bl	112a8 <lseek64@plt>
   15600:	cmp	r0, #0
   15604:	sbcs	r3, r1, #0
   15608:	bge	15980 <__assert_fail@plt+0x44a4>
   1560c:	mov	r3, #0
   15610:	str	r3, [sp, #16]
   15614:	cmp	r8, #0
   15618:	movw	r4, #57832	; 0xe1e8
   1561c:	movt	r4, #2
   15620:	beq	156c4 <__assert_fail@plt+0x41e8>
   15624:	bl	13f84 <__assert_fail@plt+0x2aa8>
   15628:	ldr	r5, [r4, #124]	; 0x7c
   1562c:	str	r7, [sp, #184]	; 0xb8
   15630:	orrs	r3, sl, fp
   15634:	ldr	r3, [r4, #300]	; 0x12c
   15638:	beq	157b8 <__assert_fail@plt+0x42dc>
   1563c:	ldr	r2, [sp, #184]	; 0xb8
   15640:	mov	r1, r5
   15644:	mov	r0, r8
   15648:	blx	r3
   1564c:	cmp	r0, #0
   15650:	blt	158a0 <__assert_fail@plt+0x43c4>
   15654:	beq	157c0 <__assert_fail@plt+0x42e4>
   15658:	cmp	r8, #0
   1565c:	bne	15690 <__assert_fail@plt+0x41b4>
   15660:	ldrd	r2, [r4, #96]	; 0x60
   15664:	cmp	r2, #0
   15668:	sbcs	r1, r3, #0
   1566c:	blt	15690 <__assert_fail@plt+0x41b4>
   15670:	asr	r1, r0, #31
   15674:	adds	r6, r2, r0
   15678:	mov	r2, r6
   1567c:	adcs	r7, r3, r1
   15680:	mov	r3, r7
   15684:	mvnvs	r2, #0
   15688:	mvnvs	r3, #0
   1568c:	strd	r2, [r4, #96]	; 0x60
   15690:	orrs	r3, sl, fp
   15694:	beq	1578c <__assert_fail@plt+0x42b0>
   15698:	subs	sl, sl, #1
   1569c:	sbc	fp, fp, #0
   156a0:	orrs	r3, sl, fp
   156a4:	bne	15630 <__assert_fail@plt+0x4154>
   156a8:	ldr	r2, [r9]
   156ac:	cmp	r2, #0
   156b0:	beq	157c0 <__assert_fail@plt+0x42e4>
   156b4:	ldr	r3, [r4, #300]	; 0x12c
   156b8:	mov	sl, #0
   156bc:	mov	fp, #0
   156c0:	b	15640 <__assert_fail@plt+0x4164>
   156c4:	bl	13ed0 <__assert_fail@plt+0x29f4>
   156c8:	ldr	r5, [r4, #112]	; 0x70
   156cc:	b	1562c <__assert_fail@plt+0x4150>
   156d0:	mov	r6, #1
   156d4:	mov	r3, r5
   156d8:	mov	r2, r4
   156dc:	mov	r0, r8
   156e0:	str	r6, [sp]
   156e4:	strd	r4, [sp, #24]
   156e8:	bl	112a8 <lseek64@plt>
   156ec:	cmp	r0, #0
   156f0:	sbcs	r3, r1, #0
   156f4:	blt	15820 <__assert_fail@plt+0x4344>
   156f8:	cmp	r8, #0
   156fc:	bne	1578c <__assert_fail@plt+0x42b0>
   15700:	add	r1, sp, #40	; 0x28
   15704:	mov	r0, r8
   15708:	bl	14b74 <__assert_fail@plt+0x3698>
   1570c:	cmp	r0, #0
   15710:	bne	15940 <__assert_fail@plt+0x4464>
   15714:	ldr	r3, [sp, #56]	; 0x38
   15718:	movw	r4, #57832	; 0xe1e8
   1571c:	movt	r4, #2
   15720:	ldrd	r6, [r4, #96]	; 0x60
   15724:	and	r3, r3, #53248	; 0xd000
   15728:	cmp	r3, #32768	; 0x8000
   1572c:	bne	15870 <__assert_fail@plt+0x4394>
   15730:	cmp	r6, #0
   15734:	sbcs	r3, r7, #0
   15738:	movlt	r0, #0
   1573c:	movlt	r1, r0
   15740:	blt	1579c <__assert_fail@plt+0x42c0>
   15744:	ldrd	r8, [sp, #24]
   15748:	ldrd	r0, [sp, #88]	; 0x58
   1574c:	subs	r3, r0, r6
   15750:	str	r3, [sp, #32]
   15754:	sbc	r3, r1, r7
   15758:	str	r3, [sp, #36]	; 0x24
   1575c:	ldrd	sl, [sp, #32]
   15760:	cmp	sl, r8
   15764:	sbcs	ip, fp, r9
   15768:	movge	r0, #0
   1576c:	movge	r1, r0
   15770:	bge	15884 <__assert_fail@plt+0x43a8>
   15774:	subs	r0, r8, r0
   15778:	ldrd	r2, [sp, #16]
   1577c:	sbc	r1, r9, r1
   15780:	strd	sl, [sp, #24]
   15784:	bl	1b2e0 <__assert_fail@plt+0x9e04>
   15788:	b	15884 <__assert_fail@plt+0x43a8>
   1578c:	mov	r3, #0
   15790:	mov	r0, r3
   15794:	mov	r1, r3
   15798:	str	r3, [r9]
   1579c:	add	sp, sp, #148	; 0x94
   157a0:	ldrd	r4, [sp]
   157a4:	ldrd	r6, [sp, #8]
   157a8:	ldrd	r8, [sp, #16]
   157ac:	ldrd	sl, [sp, #24]
   157b0:	add	sp, sp, #32
   157b4:	pop	{pc}		; (ldr pc, [sp], #4)
   157b8:	ldr	r2, [r9]
   157bc:	b	156b8 <__assert_fail@plt+0x41dc>
   157c0:	mov	r0, sl
   157c4:	mov	r1, fp
   157c8:	b	1579c <__assert_fail@plt+0x42c0>
   157cc:	umull	r2, r3, sl, r7
   157d0:	cmp	fp, #0
   157d4:	umull	r0, r1, r7, fp
   157d8:	mov	r4, r2
   157dc:	mov	r5, r3
   157e0:	blt	15814 <__assert_fail@plt+0x4338>
   157e4:	cmp	r7, #0
   157e8:	blt	15808 <__assert_fail@plt+0x432c>
   157ec:	adds	r3, r0, r5
   157f0:	mov	r2, #0
   157f4:	adc	r2, r1, r2
   157f8:	cmp	r2, r3, asr #31
   157fc:	bne	1598c <__assert_fail@plt+0x44b0>
   15800:	mov	r1, r3
   15804:	b	155c8 <__assert_fail@plt+0x40ec>
   15808:	subs	r0, r0, sl
   1580c:	sbc	r1, r1, fp
   15810:	b	157ec <__assert_fail@plt+0x4310>
   15814:	subs	r0, r0, ip
   15818:	sbc	r1, r1, r7
   1581c:	b	157e4 <__assert_fail@plt+0x4308>
   15820:	ldr	r0, [sp, #8]
   15824:	mov	r1, #2
   15828:	mov	r3, #0
   1582c:	mov	r2, #0
   15830:	ldr	r0, [r0]
   15834:	str	r1, [sp]
   15838:	str	r0, [sp, #16]
   1583c:	mov	r0, r8
   15840:	bl	112a8 <lseek64@plt>
   15844:	cmp	r0, #0
   15848:	sbcs	r3, r1, #0
   1584c:	blt	15614 <__assert_fail@plt+0x4138>
   15850:	ldr	r3, [sp, #16]
   15854:	cmp	r3, #0
   15858:	beq	15980 <__assert_fail@plt+0x44a4>
   1585c:	cmp	r8, #0
   15860:	bne	158f8 <__assert_fail@plt+0x441c>
   15864:	movw	r1, #52380	; 0xcc9c
   15868:	movt	r1, #1
   1586c:	b	15900 <__assert_fail@plt+0x4424>
   15870:	cmp	r6, #0
   15874:	mov	r0, #0
   15878:	sbcs	r3, r7, #0
   1587c:	mov	r1, r0
   15880:	blt	1579c <__assert_fail@plt+0x42c0>
   15884:	ldrd	r8, [sp, #24]
   15888:	adds	r2, r6, r8
   1588c:	adcs	r3, r7, r9
   15890:	mvnvs	r2, #0
   15894:	mvnvs	r3, #0
   15898:	strd	r2, [r4, #96]	; 0x60
   1589c:	b	1579c <__assert_fail@plt+0x42c0>
   158a0:	cmp	r8, #0
   158a4:	bne	158f8 <__assert_fail@plt+0x441c>
   158a8:	ldr	r3, [sp, #8]
   158ac:	mov	r2, #5
   158b0:	movw	r1, #52412	; 0xccbc
   158b4:	movt	r1, #1
   158b8:	mov	r0, r8
   158bc:	ldr	r5, [r3]
   158c0:	bl	11230 <dcgettext@plt>
   158c4:	mov	r6, r0
   158c8:	mov	r0, #4
   158cc:	ldr	r1, [sp, #12]
   158d0:	bl	18e04 <__assert_fail@plt+0x7928>
   158d4:	mov	r3, r0
   158d8:	mov	r2, r6
   158dc:	mov	r1, r5
   158e0:	mov	r0, r8
   158e4:	bl	13a8c <__assert_fail@plt+0x25b0>
   158e8:	ldr	r3, [r4, #116]	; 0x74
   158ec:	tst	r3, #256	; 0x100
   158f0:	bne	15938 <__assert_fail@plt+0x445c>
   158f4:	bl	1520c <__assert_fail@plt+0x3d30>
   158f8:	movw	r1, #52396	; 0xccac
   158fc:	movt	r1, #1
   15900:	mov	r2, #5
   15904:	mov	r0, #0
   15908:	bl	11230 <dcgettext@plt>
   1590c:	mov	r4, r0
   15910:	mov	r1, #3
   15914:	ldr	r2, [sp, #12]
   15918:	mov	r0, #0
   1591c:	bl	18ee0 <__assert_fail@plt+0x7a04>
   15920:	mov	r3, r0
   15924:	mov	r2, r4
   15928:	ldr	r1, [sp, #16]
   1592c:	mov	r0, #0
   15930:	bl	13a8c <__assert_fail@plt+0x25b0>
   15934:	b	158f4 <__assert_fail@plt+0x4418>
   15938:	bl	138e0 <__assert_fail@plt+0x2404>
   1593c:	b	158f4 <__assert_fail@plt+0x4418>
   15940:	ldr	r3, [sp, #8]
   15944:	mov	r2, #5
   15948:	mov	r0, r8
   1594c:	movw	r1, #52364	; 0xcc8c
   15950:	movt	r1, #1
   15954:	ldr	r4, [r3]
   15958:	bl	11230 <dcgettext@plt>
   1595c:	mov	r5, r0
   15960:	mov	r0, #4
   15964:	ldr	r1, [sp, #12]
   15968:	bl	18e04 <__assert_fail@plt+0x7928>
   1596c:	mov	r3, r0
   15970:	mov	r2, r5
   15974:	mov	r1, r4
   15978:	mov	r0, r6
   1597c:	bl	13a8c <__assert_fail@plt+0x25b0>
   15980:	mov	r3, #75	; 0x4b
   15984:	str	r3, [sp, #16]
   15988:	b	1585c <__assert_fail@plt+0x4380>
   1598c:	ldr	r3, [sp, #20]
   15990:	mov	ip, #1
   15994:	mul	r3, sl, r3
   15998:	mla	r3, r7, fp, r3
   1599c:	add	r3, r3, r5
   159a0:	b	15800 <__assert_fail@plt+0x4324>
   159a4:	strd	r4, [sp, #-16]!
   159a8:	mov	r4, r0
   159ac:	str	r6, [sp, #8]
   159b0:	str	lr, [sp, #12]
   159b4:	bl	112c0 <__fpending@plt>
   159b8:	ldr	r5, [r4]
   159bc:	mov	r6, r0
   159c0:	mov	r0, r4
   159c4:	bl	15b38 <__assert_fail@plt+0x465c>
   159c8:	mov	r4, r0
   159cc:	and	r5, r5, #32
   159d0:	cmp	r5, #0
   159d4:	bne	15a0c <__assert_fail@plt+0x4530>
   159d8:	cmp	r0, #0
   159dc:	beq	159f8 <__assert_fail@plt+0x451c>
   159e0:	cmp	r6, #0
   159e4:	bne	15a24 <__assert_fail@plt+0x4548>
   159e8:	bl	113a4 <__errno_location@plt>
   159ec:	ldr	r4, [r0]
   159f0:	subs	r4, r4, #9
   159f4:	mvnne	r4, #0
   159f8:	mov	r0, r4
   159fc:	ldrd	r4, [sp]
   15a00:	ldr	r6, [sp, #8]
   15a04:	add	sp, sp, #12
   15a08:	pop	{pc}		; (ldr pc, [sp], #4)
   15a0c:	cmp	r0, #0
   15a10:	bne	15a24 <__assert_fail@plt+0x4548>
   15a14:	bl	113a4 <__errno_location@plt>
   15a18:	str	r4, [r0]
   15a1c:	mvn	r4, #0
   15a20:	b	159f8 <__assert_fail@plt+0x451c>
   15a24:	mvn	r4, #0
   15a28:	b	159f8 <__assert_fail@plt+0x451c>
   15a2c:	movw	r3, #58440	; 0xe448
   15a30:	movt	r3, #2
   15a34:	str	r0, [r3]
   15a38:	bx	lr
   15a3c:	movw	r3, #58440	; 0xe448
   15a40:	movt	r3, #2
   15a44:	strb	r0, [r3, #4]
   15a48:	bx	lr
   15a4c:	movw	r3, #57820	; 0xe1dc
   15a50:	movt	r3, #2
   15a54:	strd	r4, [sp, #-16]!
   15a58:	ldr	r0, [r3]
   15a5c:	str	r6, [sp, #8]
   15a60:	str	lr, [sp, #12]
   15a64:	sub	sp, sp, #8
   15a68:	bl	159a4 <__assert_fail@plt+0x44c8>
   15a6c:	cmp	r0, #0
   15a70:	beq	15a9c <__assert_fail@plt+0x45c0>
   15a74:	movw	r4, #58440	; 0xe448
   15a78:	movt	r4, #2
   15a7c:	ldrb	r6, [r4, #4]
   15a80:	bl	113a4 <__errno_location@plt>
   15a84:	mov	r5, r0
   15a88:	cmp	r6, #0
   15a8c:	beq	15ac8 <__assert_fail@plt+0x45ec>
   15a90:	ldr	r3, [r0]
   15a94:	cmp	r3, #32
   15a98:	bne	15ac8 <__assert_fail@plt+0x45ec>
   15a9c:	movw	r3, #57816	; 0xe1d8
   15aa0:	movt	r3, #2
   15aa4:	ldr	r0, [r3]
   15aa8:	bl	159a4 <__assert_fail@plt+0x44c8>
   15aac:	cmp	r0, #0
   15ab0:	bne	15b10 <__assert_fail@plt+0x4634>
   15ab4:	add	sp, sp, #8
   15ab8:	ldrd	r4, [sp]
   15abc:	ldr	r6, [sp, #8]
   15ac0:	add	sp, sp, #12
   15ac4:	pop	{pc}		; (ldr pc, [sp], #4)
   15ac8:	movw	r1, #53460	; 0xd0d4
   15acc:	movt	r1, #1
   15ad0:	mov	r2, #5
   15ad4:	mov	r0, #0
   15ad8:	bl	11230 <dcgettext@plt>
   15adc:	mov	r6, r0
   15ae0:	ldr	r0, [r4]
   15ae4:	cmp	r0, #0
   15ae8:	beq	15b20 <__assert_fail@plt+0x4644>
   15aec:	ldr	r4, [r5]
   15af0:	bl	18ecc <__assert_fail@plt+0x79f0>
   15af4:	mov	r3, r0
   15af8:	movw	r2, #52072	; 0xcb68
   15afc:	movt	r2, #1
   15b00:	mov	r0, #0
   15b04:	str	r6, [sp]
   15b08:	mov	r1, r4
   15b0c:	bl	112d8 <error@plt>
   15b10:	movw	r3, #57724	; 0xe17c
   15b14:	movt	r3, #2
   15b18:	ldr	r0, [r3]
   15b1c:	bl	111dc <_exit@plt>
   15b20:	mov	r3, r6
   15b24:	movw	r2, #48196	; 0xbc44
   15b28:	movt	r2, #1
   15b2c:	ldr	r1, [r5]
   15b30:	bl	112d8 <error@plt>
   15b34:	b	15b10 <__assert_fail@plt+0x4634>
   15b38:	strd	r4, [sp, #-12]!
   15b3c:	mov	r4, r0
   15b40:	str	lr, [sp, #8]
   15b44:	sub	sp, sp, #12
   15b48:	bl	113f8 <fileno@plt>
   15b4c:	cmp	r0, #0
   15b50:	mov	r0, r4
   15b54:	blt	15bd8 <__assert_fail@plt+0x46fc>
   15b58:	bl	1132c <__freading@plt>
   15b5c:	cmp	r0, #0
   15b60:	bne	15ba4 <__assert_fail@plt+0x46c8>
   15b64:	mov	r0, r4
   15b68:	bl	15e58 <__assert_fail@plt+0x497c>
   15b6c:	cmp	r0, #0
   15b70:	beq	15bd4 <__assert_fail@plt+0x46f8>
   15b74:	bl	113a4 <__errno_location@plt>
   15b78:	mov	r5, r0
   15b7c:	mov	r0, r4
   15b80:	ldr	r4, [r5]
   15b84:	bl	11410 <fclose@plt>
   15b88:	cmp	r4, #0
   15b8c:	mvnne	r0, #0
   15b90:	strne	r4, [r5]
   15b94:	add	sp, sp, #12
   15b98:	ldrd	r4, [sp]
   15b9c:	add	sp, sp, #8
   15ba0:	pop	{pc}		; (ldr pc, [sp], #4)
   15ba4:	mov	r0, r4
   15ba8:	bl	113f8 <fileno@plt>
   15bac:	mov	r1, #1
   15bb0:	mov	r2, #0
   15bb4:	mov	r3, #0
   15bb8:	str	r1, [sp]
   15bbc:	bl	112a8 <lseek64@plt>
   15bc0:	mvn	r3, #0
   15bc4:	mvn	r2, #0
   15bc8:	cmp	r1, r3
   15bcc:	cmpeq	r0, r2
   15bd0:	bne	15b64 <__assert_fail@plt+0x4688>
   15bd4:	mov	r0, r4
   15bd8:	add	sp, sp, #12
   15bdc:	ldrd	r4, [sp]
   15be0:	ldr	lr, [sp, #8]
   15be4:	add	sp, sp, #12
   15be8:	b	11410 <fclose@plt>
   15bec:	push	{r1, r2, r3}
   15bf0:	strd	r4, [sp, #-20]!	; 0xffffffec
   15bf4:	strd	r6, [sp, #8]
   15bf8:	str	lr, [sp, #16]
   15bfc:	sub	sp, sp, #8
   15c00:	ldr	r1, [sp, #28]
   15c04:	add	r2, sp, #32
   15c08:	str	r2, [sp, #4]
   15c0c:	cmp	r1, #0
   15c10:	beq	15cec <__assert_fail@plt+0x4810>
   15c14:	movw	r3, #1030	; 0x406
   15c18:	mov	r6, r0
   15c1c:	cmp	r1, r3
   15c20:	beq	15cfc <__assert_fail@plt+0x4820>
   15c24:	cmp	r1, #11
   15c28:	beq	15ca4 <__assert_fail@plt+0x47c8>
   15c2c:	ble	15c84 <__assert_fail@plt+0x47a8>
   15c30:	movw	r2, #1031	; 0x407
   15c34:	cmp	r1, r2
   15c38:	bgt	15cc0 <__assert_fail@plt+0x47e4>
   15c3c:	cmp	r1, r3
   15c40:	bge	15c50 <__assert_fail@plt+0x4774>
   15c44:	movw	r3, #1025	; 0x401
   15c48:	cmp	r1, r3
   15c4c:	beq	15ca4 <__assert_fail@plt+0x47c8>
   15c50:	ldr	r3, [sp, #4]
   15c54:	mov	r0, r6
   15c58:	ldr	r2, [r3]
   15c5c:	bl	11428 <fcntl64@plt>
   15c60:	mov	r4, r0
   15c64:	mov	r0, r4
   15c68:	add	sp, sp, #8
   15c6c:	ldrd	r4, [sp]
   15c70:	ldrd	r6, [sp, #8]
   15c74:	ldr	lr, [sp, #16]
   15c78:	add	sp, sp, #20
   15c7c:	add	sp, sp, #12
   15c80:	bx	lr
   15c84:	cmp	r1, #4
   15c88:	beq	15c50 <__assert_fail@plt+0x4774>
   15c8c:	bgt	15cb4 <__assert_fail@plt+0x47d8>
   15c90:	cmp	r1, #2
   15c94:	beq	15c50 <__assert_fail@plt+0x4774>
   15c98:	bgt	15ca4 <__assert_fail@plt+0x47c8>
   15c9c:	cmp	r1, #1
   15ca0:	bne	15c50 <__assert_fail@plt+0x4774>
   15ca4:	mov	r0, r6
   15ca8:	bl	11428 <fcntl64@plt>
   15cac:	mov	r4, r0
   15cb0:	b	15c64 <__assert_fail@plt+0x4788>
   15cb4:	cmp	r1, #9
   15cb8:	bne	15c50 <__assert_fail@plt+0x4774>
   15cbc:	b	15ca4 <__assert_fail@plt+0x47c8>
   15cc0:	movw	r3, #1033	; 0x409
   15cc4:	cmp	r1, r3
   15cc8:	beq	15c50 <__assert_fail@plt+0x4774>
   15ccc:	blt	15ca4 <__assert_fail@plt+0x47c8>
   15cd0:	movw	r3, #1034	; 0x40a
   15cd4:	cmp	r1, r3
   15cd8:	bne	15c50 <__assert_fail@plt+0x4774>
   15cdc:	mov	r0, r6
   15ce0:	bl	11428 <fcntl64@plt>
   15ce4:	mov	r4, r0
   15ce8:	b	15c64 <__assert_fail@plt+0x4788>
   15cec:	ldr	r2, [sp, #32]
   15cf0:	bl	11428 <fcntl64@plt>
   15cf4:	mov	r4, r0
   15cf8:	b	15c64 <__assert_fail@plt+0x4788>
   15cfc:	movw	r5, #58448	; 0xe450
   15d00:	movt	r5, #2
   15d04:	ldr	r7, [r2]
   15d08:	add	r2, sp, #36	; 0x24
   15d0c:	ldr	r3, [r5]
   15d10:	str	r2, [sp, #4]
   15d14:	mov	r2, r7
   15d18:	cmp	r3, #0
   15d1c:	blt	15d38 <__assert_fail@plt+0x485c>
   15d20:	bl	11428 <fcntl64@plt>
   15d24:	subs	r4, r0, #0
   15d28:	blt	15da0 <__assert_fail@plt+0x48c4>
   15d2c:	mov	r3, #1
   15d30:	str	r3, [r5]
   15d34:	b	15c64 <__assert_fail@plt+0x4788>
   15d38:	mov	r1, #0
   15d3c:	bl	11428 <fcntl64@plt>
   15d40:	subs	r4, r0, #0
   15d44:	blt	15c64 <__assert_fail@plt+0x4788>
   15d48:	ldr	r3, [r5]
   15d4c:	cmn	r3, #1
   15d50:	bne	15c64 <__assert_fail@plt+0x4788>
   15d54:	mov	r1, #1
   15d58:	mov	r0, r4
   15d5c:	bl	11428 <fcntl64@plt>
   15d60:	subs	r2, r0, #0
   15d64:	blt	15d80 <__assert_fail@plt+0x48a4>
   15d68:	orr	r2, r2, #1
   15d6c:	mov	r1, #2
   15d70:	mov	r0, r4
   15d74:	bl	11428 <fcntl64@plt>
   15d78:	cmn	r0, #1
   15d7c:	bne	15c64 <__assert_fail@plt+0x4788>
   15d80:	bl	113a4 <__errno_location@plt>
   15d84:	mov	r5, r0
   15d88:	mov	r0, r4
   15d8c:	ldr	r6, [r5]
   15d90:	mvn	r4, #0
   15d94:	bl	114b8 <close@plt>
   15d98:	str	r6, [r5]
   15d9c:	b	15c64 <__assert_fail@plt+0x4788>
   15da0:	bl	113a4 <__errno_location@plt>
   15da4:	ldr	r3, [r0]
   15da8:	cmp	r3, #22
   15dac:	bne	15d2c <__assert_fail@plt+0x4850>
   15db0:	mov	r2, r7
   15db4:	mov	r0, r6
   15db8:	mov	r1, #0
   15dbc:	bl	11428 <fcntl64@plt>
   15dc0:	subs	r4, r0, #0
   15dc4:	mvnge	r3, #0
   15dc8:	strge	r3, [r5]
   15dcc:	bge	15d54 <__assert_fail@plt+0x4878>
   15dd0:	b	15c64 <__assert_fail@plt+0x4788>
   15dd4:	mov	ip, r1
   15dd8:	mov	r1, r2
   15ddc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15de0:	mov	r2, r3
   15de4:	mov	r5, r0
   15de8:	strd	r6, [sp, #8]
   15dec:	mov	r0, ip
   15df0:	str	r8, [sp, #16]
   15df4:	str	lr, [sp, #20]
   15df8:	bl	112e4 <open64@plt>
   15dfc:	sub	r3, r5, r0
   15e00:	mov	r4, r0
   15e04:	clz	r3, r3
   15e08:	lsr	r3, r3, #5
   15e0c:	orrs	r3, r3, r0, lsr #31
   15e10:	beq	15e2c <__assert_fail@plt+0x4950>
   15e14:	mov	r0, r4
   15e18:	ldrd	r4, [sp]
   15e1c:	ldrd	r6, [sp, #8]
   15e20:	ldr	r8, [sp, #16]
   15e24:	add	sp, sp, #20
   15e28:	pop	{pc}		; (ldr pc, [sp], #4)
   15e2c:	mov	r1, r5
   15e30:	bl	1123c <dup2@plt>
   15e34:	mov	r7, r0
   15e38:	bl	113a4 <__errno_location@plt>
   15e3c:	mov	r5, r0
   15e40:	mov	r0, r4
   15e44:	ldr	r6, [r5]
   15e48:	mov	r4, r7
   15e4c:	bl	114b8 <close@plt>
   15e50:	str	r6, [r5]
   15e54:	b	15e14 <__assert_fail@plt+0x4938>
   15e58:	str	r4, [sp, #-8]!
   15e5c:	subs	r4, r0, #0
   15e60:	str	lr, [sp, #4]
   15e64:	sub	sp, sp, #8
   15e68:	beq	15e84 <__assert_fail@plt+0x49a8>
   15e6c:	bl	1132c <__freading@plt>
   15e70:	cmp	r0, #0
   15e74:	beq	15e84 <__assert_fail@plt+0x49a8>
   15e78:	ldr	r3, [r4]
   15e7c:	tst	r3, #256	; 0x100
   15e80:	bne	15e9c <__assert_fail@plt+0x49c0>
   15e84:	mov	r0, r4
   15e88:	add	sp, sp, #8
   15e8c:	ldr	r4, [sp]
   15e90:	ldr	lr, [sp, #4]
   15e94:	add	sp, sp, #8
   15e98:	b	111a0 <fflush@plt>
   15e9c:	mov	r1, #1
   15ea0:	mov	r2, #0
   15ea4:	mov	r3, #0
   15ea8:	mov	r0, r4
   15eac:	str	r1, [sp]
   15eb0:	bl	15eb8 <__assert_fail@plt+0x49dc>
   15eb4:	b	15e84 <__assert_fail@plt+0x49a8>
   15eb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15ebc:	mov	r4, r0
   15ec0:	ldr	ip, [r0, #4]
   15ec4:	strd	r6, [sp, #8]
   15ec8:	str	lr, [sp, #20]
   15ecc:	ldr	lr, [r0, #8]
   15ed0:	str	r8, [sp, #16]
   15ed4:	sub	sp, sp, #8
   15ed8:	ldr	r5, [sp, #32]
   15edc:	cmp	lr, ip
   15ee0:	beq	15f08 <__assert_fail@plt+0x4a2c>
   15ee4:	mov	r0, r4
   15ee8:	str	r5, [sp, #32]
   15eec:	add	sp, sp, #8
   15ef0:	ldrd	r4, [sp]
   15ef4:	ldrd	r6, [sp, #8]
   15ef8:	ldr	r8, [sp, #16]
   15efc:	ldr	lr, [sp, #20]
   15f00:	add	sp, sp, #24
   15f04:	b	1141c <fseeko64@plt>
   15f08:	ldr	ip, [r0, #16]
   15f0c:	ldr	lr, [r0, #20]
   15f10:	cmp	lr, ip
   15f14:	bne	15ee4 <__assert_fail@plt+0x4a08>
   15f18:	ldr	r8, [r0, #36]	; 0x24
   15f1c:	cmp	r8, #0
   15f20:	bne	15ee4 <__assert_fail@plt+0x4a08>
   15f24:	mov	r6, r2
   15f28:	mov	r7, r3
   15f2c:	bl	113f8 <fileno@plt>
   15f30:	mov	r2, r6
   15f34:	mov	r3, r7
   15f38:	str	r5, [sp]
   15f3c:	bl	112a8 <lseek64@plt>
   15f40:	mvn	r3, #0
   15f44:	mvn	r2, #0
   15f48:	cmp	r1, r3
   15f4c:	cmpeq	r0, r2
   15f50:	beq	15f80 <__assert_fail@plt+0x4aa4>
   15f54:	ldr	r3, [r4]
   15f58:	strd	r0, [r4, #80]	; 0x50
   15f5c:	bic	r3, r3, #16
   15f60:	str	r3, [r4]
   15f64:	mov	r0, r8
   15f68:	add	sp, sp, #8
   15f6c:	ldrd	r4, [sp]
   15f70:	ldrd	r6, [sp, #8]
   15f74:	ldr	r8, [sp, #16]
   15f78:	add	sp, sp, #20
   15f7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15f80:	mvn	r8, #0
   15f84:	b	15f64 <__assert_fail@plt+0x4a88>
   15f88:	push	{lr}		; (str lr, [sp, #-4]!)
   15f8c:	sub	sp, sp, #12
   15f90:	mov	r0, #1
   15f94:	mov	r1, sp
   15f98:	bl	111d0 <clock_gettime@plt>
   15f9c:	cmp	r0, #0
   15fa0:	beq	15fac <__assert_fail@plt+0x4ad0>
   15fa4:	mov	r0, sp
   15fa8:	bl	15fcc <__assert_fail@plt+0x4af0>
   15fac:	ldr	r2, [sp]
   15fb0:	mov	r3, #51712	; 0xca00
   15fb4:	movt	r3, #15258	; 0x3b9a
   15fb8:	ldr	r0, [sp, #4]
   15fbc:	asr	r1, r0, #31
   15fc0:	smlal	r0, r1, r3, r2
   15fc4:	add	sp, sp, #12
   15fc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fcc:	mov	r1, r0
   15fd0:	mov	r0, #0
   15fd4:	b	111d0 <clock_gettime@plt>
   15fd8:	str	r4, [sp, #-8]!
   15fdc:	mov	r4, r0
   15fe0:	mov	r0, #0
   15fe4:	str	lr, [sp, #4]
   15fe8:	sub	sp, sp, #8
   15fec:	mov	r1, sp
   15ff0:	bl	111d0 <clock_gettime@plt>
   15ff4:	ldrd	r2, [sp]
   15ff8:	mov	r0, r4
   15ffc:	strd	r2, [r4]
   16000:	add	sp, sp, #8
   16004:	ldr	r4, [sp]
   16008:	add	sp, sp, #4
   1600c:	pop	{pc}		; (ldr pc, [sp], #4)
   16010:	strd	r4, [sp, #-36]!	; 0xffffffdc
   16014:	strd	r6, [sp, #8]
   16018:	mov	r7, r1
   1601c:	mov	r6, r0
   16020:	strd	r8, [sp, #16]
   16024:	mov	r9, r3
   16028:	ands	r3, r3, #32
   1602c:	strd	sl, [sp, #24]
   16030:	str	lr, [sp, #32]
   16034:	vpush	{d8-d9}
   16038:	sub	sp, sp, #124	; 0x7c
   1603c:	str	r2, [sp, #20]
   16040:	str	r3, [sp, #48]	; 0x30
   16044:	movne	r3, #1024	; 0x400
   16048:	moveq	r3, #1000	; 0x3e8
   1604c:	strd	r6, [sp, #32]
   16050:	str	r3, [sp, #44]	; 0x2c
   16054:	add	r3, r2, #644	; 0x284
   16058:	mov	r5, r3
   1605c:	bl	11470 <localeconv@plt>
   16060:	ldr	fp, [r0]
   16064:	add	r3, r5, #3
   16068:	mov	r4, r0
   1606c:	str	r3, [sp, #16]
   16070:	and	r3, r9, #3
   16074:	str	r3, [sp, #40]	; 0x28
   16078:	mov	r0, fp
   1607c:	bl	11380 <strlen@plt>
   16080:	sub	r2, r0, #1
   16084:	ldr	sl, [r4, #4]
   16088:	movw	r3, #53504	; 0xd100
   1608c:	movt	r3, #1
   16090:	cmp	r2, #16
   16094:	ldr	r2, [r4, #8]
   16098:	movcs	fp, r3
   1609c:	str	r2, [sp, #52]	; 0x34
   160a0:	mov	r2, r0
   160a4:	movcc	r2, r0
   160a8:	movcs	r2, #1
   160ac:	mov	r0, sl
   160b0:	str	r2, [sp, #12]
   160b4:	bl	11380 <strlen@plt>
   160b8:	cmp	r0, #16
   160bc:	movw	r3, #51464	; 0xc908
   160c0:	movt	r3, #1
   160c4:	ldrd	r4, [sp, #176]	; 0xb0
   160c8:	movhi	sl, r3
   160cc:	ldrd	r2, [sp, #184]	; 0xb8
   160d0:	cmp	r3, r5
   160d4:	cmpeq	r2, r4
   160d8:	bhi	16390 <__assert_fail@plt+0x4eb4>
   160dc:	mov	r0, r4
   160e0:	mov	r1, r5
   160e4:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   160e8:	orrs	r3, r2, r3
   160ec:	bne	1612c <__assert_fail@plt+0x4c50>
   160f0:	mul	ip, r0, r7
   160f4:	mov	r4, r6
   160f8:	mov	r5, r7
   160fc:	mov	r3, r1
   16100:	umull	r6, r7, r0, r6
   16104:	mov	r2, r0
   16108:	mla	r1, r4, r1, ip
   1610c:	strd	r6, [sp, #24]
   16110:	add	r1, r1, r7
   16114:	str	r1, [sp, #28]
   16118:	ldrd	r0, [sp, #24]
   1611c:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   16120:	cmp	r1, r5
   16124:	cmpeq	r0, r4
   16128:	beq	166dc <__assert_fail@plt+0x5200>
   1612c:	ldrd	r0, [sp, #176]	; 0xb0
   16130:	bl	1b26c <__assert_fail@plt+0x9d90>
   16134:	vmov	d9, r0, r1
   16138:	ldrd	r0, [sp, #184]	; 0xb8
   1613c:	bl	1b26c <__assert_fail@plt+0x9d90>
   16140:	vmov	d7, r0, r1
   16144:	ldrd	r0, [sp, #32]
   16148:	vdiv.f64	d8, d9, d7
   1614c:	bl	1b26c <__assert_fail@plt+0x9d90>
   16150:	vmov	d7, r0, r1
   16154:	tst	r9, #16
   16158:	vmul.f64	d8, d8, d7
   1615c:	beq	162d4 <__assert_fail@plt+0x4df8>
   16160:	ldr	r6, [sp, #12]
   16164:	mov	r7, #0
   16168:	vldr	s15, [sp, #44]	; 0x2c
   1616c:	vcvt.f64.s32	d6, s15
   16170:	vmov.f64	d7, d6
   16174:	vmov.f64	d5, d7
   16178:	vmul.f64	d7, d7, d6
   1617c:	add	r7, r7, #1
   16180:	vcmpe.f64	d7, d8
   16184:	vmrs	APSR_nzcv, fpscr
   16188:	bhi	16194 <__assert_fail@plt+0x4cb8>
   1618c:	cmp	r7, #8
   16190:	bne	16174 <__assert_fail@plt+0x4c98>
   16194:	ldr	fp, [sp, #40]	; 0x28
   16198:	add	r8, r6, #1
   1619c:	vdiv.f64	d9, d8, d5
   161a0:	str	r6, [sp, #12]
   161a4:	ldr	r3, [sp, #48]	; 0x30
   161a8:	cmp	fp, #1
   161ac:	clz	r4, r3
   161b0:	lsr	r4, r4, #5
   161b4:	add	r4, r4, #1
   161b8:	add	r4, r4, r8
   161bc:	beq	167ac <__assert_fail@plt+0x52d0>
   161c0:	vldr	d7, [pc, #1000]	; 165b0 <__assert_fail@plt+0x50d4>
   161c4:	vcmpe.f64	d9, d7
   161c8:	vmrs	APSR_nzcv, fpscr
   161cc:	vmovpl.f64	d7, d9
   161d0:	bpl	16210 <__assert_fail@plt+0x4d34>
   161d4:	vmov	r0, r1, d9
   161d8:	bl	1b400 <__assert_fail@plt+0x9f24>
   161dc:	mov	r5, r0
   161e0:	mov	r6, r1
   161e4:	bl	1b26c <__assert_fail@plt+0x9d90>
   161e8:	cmp	fp, #0
   161ec:	vmov	d7, r0, r1
   161f0:	bne	16210 <__assert_fail@plt+0x4d34>
   161f4:	vcmp.f64	d9, d7
   161f8:	vmrs	APSR_nzcv, fpscr
   161fc:	beq	16210 <__assert_fail@plt+0x4d34>
   16200:	adds	r0, r5, #1
   16204:	adc	r1, r6, #0
   16208:	bl	1b26c <__assert_fail@plt+0x9d90>
   1620c:	vmov	d7, r0, r1
   16210:	ldr	r5, [sp, #20]
   16214:	mvn	r2, #0
   16218:	mov	r1, #1
   1621c:	movw	r3, #53516	; 0xd10c
   16220:	movt	r3, #1
   16224:	vstr	d7, [sp]
   16228:	mov	r0, r5
   1622c:	bl	113b0 <__sprintf_chk@plt>
   16230:	mov	r0, r5
   16234:	bl	11380 <strlen@plt>
   16238:	cmp	r0, r4
   1623c:	bls	16674 <__assert_fail@plt+0x5198>
   16240:	vldr	d7, [pc, #880]	; 165b8 <__assert_fail@plt+0x50dc>
   16244:	vmul.f64	d9, d9, d7
   16248:	vldr	d7, [pc, #864]	; 165b0 <__assert_fail@plt+0x50d4>
   1624c:	vcmpe.f64	d9, d7
   16250:	vmrs	APSR_nzcv, fpscr
   16254:	bpl	1629c <__assert_fail@plt+0x4dc0>
   16258:	vmov	r0, r1, d9
   1625c:	bl	1b400 <__assert_fail@plt+0x9f24>
   16260:	mov	r4, r0
   16264:	mov	r5, r1
   16268:	bl	1b26c <__assert_fail@plt+0x9d90>
   1626c:	ldr	r3, [sp, #40]	; 0x28
   16270:	vmov	d7, r0, r1
   16274:	cmp	r3, #0
   16278:	bne	16298 <__assert_fail@plt+0x4dbc>
   1627c:	vcmp.f64	d9, d7
   16280:	vmrs	APSR_nzcv, fpscr
   16284:	beq	16298 <__assert_fail@plt+0x4dbc>
   16288:	adds	r0, r4, #1
   1628c:	adc	r1, r5, #0
   16290:	bl	1b26c <__assert_fail@plt+0x9d90>
   16294:	vmov	d7, r0, r1
   16298:	vmov.f64	d9, d7
   1629c:	vldr	d6, [pc, #788]	; 165b8 <__assert_fail@plt+0x50dc>
   162a0:	mvn	r2, #0
   162a4:	mov	r1, #1
   162a8:	movw	r3, #53508	; 0xd104
   162ac:	movt	r3, #1
   162b0:	ldr	r4, [sp, #20]
   162b4:	vdiv.f64	d7, d9, d6
   162b8:	mov	r0, r4
   162bc:	vstr	d7, [sp]
   162c0:	bl	113b0 <__sprintf_chk@plt>
   162c4:	mov	r0, r4
   162c8:	bl	11380 <strlen@plt>
   162cc:	mov	r8, r0
   162d0:	b	16320 <__assert_fail@plt+0x4e44>
   162d4:	and	r6, r9, #3
   162d8:	cmp	r6, #1
   162dc:	beq	162f0 <__assert_fail@plt+0x4e14>
   162e0:	vldr	d7, [pc, #712]	; 165b0 <__assert_fail@plt+0x50d4>
   162e4:	vcmpe.f64	d8, d7
   162e8:	vmrs	APSR_nzcv, fpscr
   162ec:	bmi	16698 <__assert_fail@plt+0x51bc>
   162f0:	ldr	r4, [sp, #20]
   162f4:	mvn	r2, #0
   162f8:	mov	r1, #1
   162fc:	movw	r3, #53508	; 0xd104
   16300:	movt	r3, #1
   16304:	vstr	d8, [sp]
   16308:	mov	r7, r2
   1630c:	mov	r0, r4
   16310:	bl	113b0 <__sprintf_chk@plt>
   16314:	mov	r0, r4
   16318:	bl	11380 <strlen@plt>
   1631c:	mov	r8, r0
   16320:	ldr	r3, [sp, #16]
   16324:	mov	r2, r0
   16328:	ldr	r1, [sp, #20]
   1632c:	sub	r6, r3, r0
   16330:	mov	r0, r6
   16334:	add	r8, r6, r8
   16338:	bl	111b8 <memmove@plt>
   1633c:	tst	r9, #4
   16340:	bne	16504 <__assert_fail@plt+0x5028>
   16344:	tst	r9, #128	; 0x80
   16348:	beq	16360 <__assert_fail@plt+0x4e84>
   1634c:	cmn	r7, #1
   16350:	beq	165c0 <__assert_fail@plt+0x50e4>
   16354:	and	r3, r9, #256	; 0x100
   16358:	orrs	r2, r3, r7
   1635c:	bne	16834 <__assert_fail@plt+0x5358>
   16360:	ldr	r2, [sp, #16]
   16364:	mov	r3, #0
   16368:	mov	r0, r6
   1636c:	strb	r3, [r2]
   16370:	add	sp, sp, #124	; 0x7c
   16374:	vpop	{d8-d9}
   16378:	ldrd	r4, [sp]
   1637c:	ldrd	r6, [sp, #8]
   16380:	ldrd	r8, [sp, #16]
   16384:	ldrd	sl, [sp, #24]
   16388:	add	sp, sp, #32
   1638c:	pop	{pc}		; (ldr pc, [sp], #4)
   16390:	ldrd	r2, [sp, #176]	; 0xb0
   16394:	orrs	r3, r2, r3
   16398:	beq	1612c <__assert_fail@plt+0x4c50>
   1639c:	ldrd	r2, [sp, #176]	; 0xb0
   163a0:	ldrd	r0, [sp, #184]	; 0xb8
   163a4:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   163a8:	orrs	r3, r2, r3
   163ac:	mov	r4, r0
   163b0:	mov	r5, r1
   163b4:	bne	1612c <__assert_fail@plt+0x4c50>
   163b8:	mov	r2, r4
   163bc:	mov	r3, r5
   163c0:	ldrd	r0, [sp, #32]
   163c4:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   163c8:	mov	lr, r2
   163cc:	mov	r8, r1
   163d0:	lsl	r1, r3, #2
   163d4:	mov	r7, r0
   163d8:	lsl	r0, lr, #2
   163dc:	mov	ip, r3
   163e0:	orr	r1, r1, lr, lsr #30
   163e4:	mov	r2, r4
   163e8:	mov	r3, r5
   163ec:	adds	r0, r0, lr
   163f0:	adc	r1, r1, ip
   163f4:	adds	r0, r0, r0
   163f8:	adc	r1, r1, r1
   163fc:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   16400:	adds	r1, r2, r2
   16404:	mov	r2, r4
   16408:	str	r7, [sp, #24]
   1640c:	adc	r3, r3, r3
   16410:	mov	lr, r0
   16414:	str	r8, [sp, #28]
   16418:	str	r1, [sp, #56]	; 0x38
   1641c:	str	r3, [sp, #60]	; 0x3c
   16420:	mov	r3, r5
   16424:	ldrd	r4, [sp, #56]	; 0x38
   16428:	cmp	r3, r5
   1642c:	cmpeq	r2, r4
   16430:	bls	1681c <__assert_fail@plt+0x5340>
   16434:	mov	r3, r4
   16438:	orrs	r3, r3, r5
   1643c:	movne	r3, #1
   16440:	moveq	r3, #0
   16444:	mov	r6, r3
   16448:	ands	r3, r9, #16
   1644c:	str	r3, [sp, #56]	; 0x38
   16450:	beq	166f4 <__assert_fail@plt+0x5218>
   16454:	ldrd	r4, [sp, #24]
   16458:	mov	r3, #0
   1645c:	mov	r7, #0
   16460:	ldr	r8, [sp, #44]	; 0x2c
   16464:	cmp	r3, r5
   16468:	mov	r2, r8
   1646c:	cmpeq	r8, r4
   16470:	strd	r2, [sp, #32]
   16474:	bhi	166f8 <__assert_fail@plt+0x521c>
   16478:	str	fp, [sp, #64]	; 0x40
   1647c:	mov	fp, r6
   16480:	mov	r6, lr
   16484:	str	r9, [sp, #68]	; 0x44
   16488:	ldr	r9, [sp, #12]
   1648c:	b	164b4 <__assert_fail@plt+0x4fd8>
   16490:	adds	fp, fp, #0
   16494:	movne	fp, #1
   16498:	ldrd	r2, [sp, #32]
   1649c:	add	r7, r7, #1
   164a0:	cmp	r3, r1
   164a4:	cmpeq	r2, r0
   164a8:	bhi	168b8 <__assert_fail@plt+0x53dc>
   164ac:	cmp	r7, #8
   164b0:	beq	16880 <__assert_fail@plt+0x53a4>
   164b4:	mov	r0, r4
   164b8:	mov	r1, r5
   164bc:	ldrd	r2, [sp, #32]
   164c0:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   164c4:	add	r2, r2, r2, lsl #2
   164c8:	mov	r4, r0
   164cc:	mov	r5, r1
   164d0:	asr	r3, fp, #1
   164d4:	add	r6, r6, r2, lsl #1
   164d8:	udiv	ip, r6, r8
   164dc:	mls	r2, r8, ip, r6
   164e0:	mov	r6, ip
   164e4:	add	r3, r3, r2, lsl #1
   164e8:	cmp	r8, r3
   164ec:	add	fp, fp, r3
   164f0:	bhi	16490 <__assert_fail@plt+0x4fb4>
   164f4:	cmp	r8, fp
   164f8:	movcc	fp, #3
   164fc:	movcs	fp, #2
   16500:	b	16498 <__assert_fail@plt+0x4fbc>
   16504:	mov	r0, sl
   16508:	sub	r4, r8, r6
   1650c:	bl	11380 <strlen@plt>
   16510:	mov	fp, r0
   16514:	mov	r1, r6
   16518:	mov	r2, r4
   1651c:	add	r0, sp, #76	; 0x4c
   16520:	mov	r3, #41	; 0x29
   16524:	mvn	r5, #0
   16528:	bl	11290 <__memcpy_chk@plt>
   1652c:	ldr	r6, [sp, #52]	; 0x34
   16530:	str	r7, [sp, #12]
   16534:	ldrb	r3, [r6]
   16538:	cmp	r3, #0
   1653c:	beq	16550 <__assert_fail@plt+0x5074>
   16540:	cmp	r3, #255	; 0xff
   16544:	add	r6, r6, #1
   16548:	movne	r5, r3
   1654c:	moveq	r5, r4
   16550:	sub	r7, r8, r5
   16554:	cmp	r5, r4
   16558:	mov	r2, r5
   1655c:	mov	r0, r7
   16560:	bls	16580 <__assert_fail@plt+0x50a4>
   16564:	sub	r6, r8, r4
   16568:	mov	r2, r4
   1656c:	ldr	r7, [sp, #12]
   16570:	add	r1, sp, #76	; 0x4c
   16574:	mov	r0, r6
   16578:	bl	111e8 <memcpy@plt>
   1657c:	b	16344 <__assert_fail@plt+0x4e68>
   16580:	sub	r4, r4, r5
   16584:	add	r3, sp, #76	; 0x4c
   16588:	add	r1, r3, r4
   1658c:	sub	r8, r7, fp
   16590:	bl	111e8 <memcpy@plt>
   16594:	cmp	r4, #0
   16598:	mov	r2, fp
   1659c:	mov	r1, sl
   165a0:	mov	r0, r8
   165a4:	beq	16a24 <__assert_fail@plt+0x5548>
   165a8:	bl	111e8 <memcpy@plt>
   165ac:	b	16534 <__assert_fail@plt+0x5058>
   165b0:	andeq	r0, r0, r0
   165b4:	mvnsmi	r0, #0
   165b8:	andeq	r0, r0, r0
   165bc:	eormi	r0, r4, r0
   165c0:	ldrd	r2, [sp, #184]	; 0xb8
   165c4:	cmp	r3, #0
   165c8:	cmpeq	r2, #1
   165cc:	bls	16878 <__assert_fail@plt+0x539c>
   165d0:	ldr	r1, [sp, #44]	; 0x2c
   165d4:	mov	r7, #1
   165d8:	mov	r2, #1
   165dc:	mov	r3, #0
   165e0:	ldrd	r4, [sp, #184]	; 0xb8
   165e4:	mul	r0, r1, r3
   165e8:	umull	r2, r3, r2, r1
   165ec:	add	r3, r0, r3
   165f0:	cmp	r5, r3
   165f4:	cmpeq	r4, r2
   165f8:	bls	16608 <__assert_fail@plt+0x512c>
   165fc:	add	r7, r7, #1
   16600:	cmp	r7, #8
   16604:	bne	165e4 <__assert_fail@plt+0x5108>
   16608:	tst	r9, #64	; 0x40
   1660c:	and	r3, r9, #256	; 0x100
   16610:	beq	16630 <__assert_fail@plt+0x5154>
   16614:	ldr	r1, [sp, #20]
   16618:	mov	r2, #32
   1661c:	add	r0, r1, #648	; 0x288
   16620:	strb	r2, [r1, #647]	; 0x287
   16624:	str	r0, [sp, #16]
   16628:	cmp	r7, #0
   1662c:	beq	16a14 <__assert_fail@plt+0x5538>
   16630:	ldr	r0, [sp, #48]	; 0x30
   16634:	cmp	r0, #0
   16638:	cmpeq	r7, #1
   1663c:	beq	1689c <__assert_fail@plt+0x53c0>
   16640:	movw	r2, #53472	; 0xd0e0
   16644:	movt	r2, #1
   16648:	ldrb	r1, [r2, r7]
   1664c:	cmp	r3, #0
   16650:	ldr	r2, [sp, #16]
   16654:	strb	r1, [r2], #1
   16658:	beq	168b0 <__assert_fail@plt+0x53d4>
   1665c:	cmp	r0, #0
   16660:	bne	16840 <__assert_fail@plt+0x5364>
   16664:	mov	r3, #66	; 0x42
   16668:	strb	r3, [r2], #1
   1666c:	str	r2, [sp, #16]
   16670:	b	16360 <__assert_fail@plt+0x4e84>
   16674:	tst	r9, #8
   16678:	beq	16690 <__assert_fail@plt+0x51b4>
   1667c:	ldr	r3, [sp, #20]
   16680:	add	r3, r3, r0
   16684:	ldrb	r3, [r3, #-1]
   16688:	cmp	r3, #48	; 0x30
   1668c:	beq	16964 <__assert_fail@plt+0x5488>
   16690:	sub	r8, r0, r8
   16694:	b	16320 <__assert_fail@plt+0x4e44>
   16698:	vmov	r0, r1, d8
   1669c:	bl	1b400 <__assert_fail@plt+0x9f24>
   166a0:	mov	r4, r0
   166a4:	mov	r5, r1
   166a8:	bl	1b26c <__assert_fail@plt+0x9d90>
   166ac:	cmp	r6, #0
   166b0:	vmov	d7, r0, r1
   166b4:	bne	166d4 <__assert_fail@plt+0x51f8>
   166b8:	vcmp.f64	d8, d7
   166bc:	vmrs	APSR_nzcv, fpscr
   166c0:	beq	166d4 <__assert_fail@plt+0x51f8>
   166c4:	adds	r0, r4, #1
   166c8:	adc	r1, r5, #0
   166cc:	bl	1b26c <__assert_fail@plt+0x9d90>
   166d0:	vmov	d7, r0, r1
   166d4:	vmov.f64	d8, d7
   166d8:	b	162f0 <__assert_fail@plt+0x4e14>
   166dc:	mov	r3, #0
   166e0:	mov	r6, r3
   166e4:	mov	lr, r3
   166e8:	ands	r3, r9, #16
   166ec:	str	r3, [sp, #56]	; 0x38
   166f0:	bne	16454 <__assert_fail@plt+0x4f78>
   166f4:	mvn	r7, #0
   166f8:	ldr	r3, [sp, #40]	; 0x28
   166fc:	cmp	r3, #1
   16700:	beq	167e8 <__assert_fail@plt+0x530c>
   16704:	ldr	r8, [sp, #16]
   16708:	ldr	r3, [sp, #40]	; 0x28
   1670c:	cmp	r3, #0
   16710:	bne	1675c <__assert_fail@plt+0x5280>
   16714:	add	r3, r6, lr
   16718:	cmp	r3, #0
   1671c:	ble	1675c <__assert_fail@plt+0x5280>
   16720:	ldr	r3, [sp, #24]
   16724:	adds	r3, r3, #1
   16728:	str	r3, [sp, #24]
   1672c:	ldr	r3, [sp, #28]
   16730:	adc	r3, r3, #0
   16734:	str	r3, [sp, #28]
   16738:	ldr	r3, [sp, #56]	; 0x38
   1673c:	cmp	r3, #0
   16740:	beq	1675c <__assert_fail@plt+0x5280>
   16744:	ldrd	r0, [sp, #24]
   16748:	mov	r3, #0
   1674c:	ldr	r2, [sp, #44]	; 0x2c
   16750:	cmp	r3, r1
   16754:	cmpeq	r2, r0
   16758:	beq	16854 <__assert_fail@plt+0x5378>
   1675c:	ldrd	r4, [sp, #24]
   16760:	mov	r6, r8
   16764:	mov	r0, r4
   16768:	mov	r1, r5
   1676c:	mov	r2, #10
   16770:	mov	r3, #0
   16774:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   16778:	add	r2, r2, #48	; 0x30
   1677c:	mov	r0, r4
   16780:	mov	r1, r5
   16784:	mov	r3, #0
   16788:	strb	r2, [r6, #-1]!
   1678c:	mov	r2, #10
   16790:	bl	1b3b4 <__assert_fail@plt+0x9ed8>
   16794:	cmp	r5, #0
   16798:	mov	r5, r1
   1679c:	cmpeq	r4, #9
   167a0:	mov	r4, r0
   167a4:	bhi	16764 <__assert_fail@plt+0x5288>
   167a8:	b	1633c <__assert_fail@plt+0x4e60>
   167ac:	ldr	r5, [sp, #20]
   167b0:	mvn	r2, #0
   167b4:	movw	r3, #53516	; 0xd10c
   167b8:	movt	r3, #1
   167bc:	vstr	d9, [sp]
   167c0:	ldr	r1, [sp, #40]	; 0x28
   167c4:	mov	r0, r5
   167c8:	bl	113b0 <__sprintf_chk@plt>
   167cc:	mov	r0, r5
   167d0:	bl	11380 <strlen@plt>
   167d4:	cmp	r0, r4
   167d8:	bls	16674 <__assert_fail@plt+0x5198>
   167dc:	vldr	d7, [pc, #-556]	; 165b8 <__assert_fail@plt+0x50dc>
   167e0:	vmul.f64	d9, d9, d7
   167e4:	b	1629c <__assert_fail@plt+0x4dc0>
   167e8:	mov	r5, #0
   167ec:	ldr	r8, [sp, #16]
   167f0:	ldr	r3, [sp, #24]
   167f4:	and	r4, r3, #1
   167f8:	adds	r2, r4, r6
   167fc:	adc	r3, r5, r6, asr #31
   16800:	orr	r2, r2, r3
   16804:	mov	r3, lr
   16808:	cmp	r2, r5
   1680c:	addne	r3, r3, #1
   16810:	cmp	r3, #5
   16814:	bgt	16720 <__assert_fail@plt+0x5244>
   16818:	b	1675c <__assert_fail@plt+0x5280>
   1681c:	movcs	r3, #2
   16820:	movcs	r6, r3
   16824:	bcs	16448 <__assert_fail@plt+0x4f6c>
   16828:	mov	r3, #3
   1682c:	mov	r6, r3
   16830:	b	16448 <__assert_fail@plt+0x4f6c>
   16834:	tst	r9, #64	; 0x40
   16838:	beq	16628 <__assert_fail@plt+0x514c>
   1683c:	b	16614 <__assert_fail@plt+0x5138>
   16840:	ldr	r1, [sp, #16]
   16844:	mov	r3, #105	; 0x69
   16848:	add	r2, r1, #2
   1684c:	strb	r3, [r1, #1]
   16850:	b	16664 <__assert_fail@plt+0x5188>
   16854:	cmp	r7, #8
   16858:	beq	1675c <__assert_fail@plt+0x5280>
   1685c:	tst	r9, #8
   16860:	add	r7, r7, #1
   16864:	beq	169dc <__assert_fail@plt+0x5500>
   16868:	mov	r3, #49	; 0x31
   1686c:	sub	r6, r8, #1
   16870:	strb	r3, [r8, #-1]
   16874:	b	1633c <__assert_fail@plt+0x4e60>
   16878:	mov	r7, #0
   1687c:	b	16354 <__assert_fail@plt+0x4e78>
   16880:	mov	lr, r6
   16884:	mov	r6, fp
   16888:	str	r9, [sp, #12]
   1688c:	strd	r4, [sp, #24]
   16890:	ldr	fp, [sp, #64]	; 0x40
   16894:	ldr	r9, [sp, #68]	; 0x44
   16898:	b	166f8 <__assert_fail@plt+0x521c>
   1689c:	ldr	r2, [sp, #16]
   168a0:	mov	r1, #107	; 0x6b
   168a4:	cmp	r3, #0
   168a8:	strb	r1, [r2], #1
   168ac:	bne	16664 <__assert_fail@plt+0x5188>
   168b0:	str	r2, [sp, #16]
   168b4:	b	16360 <__assert_fail@plt+0x4e84>
   168b8:	cmp	r1, #0
   168bc:	mov	lr, r6
   168c0:	str	r9, [sp, #12]
   168c4:	cmpeq	r0, #9
   168c8:	mov	r6, fp
   168cc:	strd	r4, [sp, #24]
   168d0:	ldr	fp, [sp, #64]	; 0x40
   168d4:	ldr	r9, [sp, #68]	; 0x44
   168d8:	bhi	166f8 <__assert_fail@plt+0x521c>
   168dc:	ldr	r3, [sp, #40]	; 0x28
   168e0:	cmp	r3, #1
   168e4:	beq	16990 <__assert_fail@plt+0x54b4>
   168e8:	ldr	r2, [sp, #40]	; 0x28
   168ec:	adds	r3, r6, #0
   168f0:	movne	r3, #1
   168f4:	cmp	r2, #0
   168f8:	movne	r3, #0
   168fc:	cmp	r3, #0
   16900:	bne	1697c <__assert_fail@plt+0x54a0>
   16904:	cmp	ip, #0
   16908:	addne	r3, ip, #48	; 0x30
   1690c:	uxtbne	r3, r3
   16910:	bne	16920 <__assert_fail@plt+0x5444>
   16914:	tst	r9, #8
   16918:	bne	169d4 <__assert_fail@plt+0x54f8>
   1691c:	mov	r3, #48	; 0x30
   16920:	ldr	r2, [sp, #12]
   16924:	ldr	r1, [sp, #20]
   16928:	add	r8, r1, #644	; 0x284
   1692c:	strb	r3, [r1, #646]	; 0x286
   16930:	mov	r3, #0
   16934:	add	r8, r8, #2
   16938:	mov	r1, fp
   1693c:	sub	r8, r8, r2
   16940:	mov	r6, r3
   16944:	mov	r0, r8
   16948:	bl	111e8 <memcpy@plt>
   1694c:	ldr	r3, [sp, #40]	; 0x28
   16950:	cmp	r3, #1
   16954:	beq	1675c <__assert_fail@plt+0x5280>
   16958:	mov	r3, #0
   1695c:	mov	lr, r3
   16960:	b	16708 <__assert_fail@plt+0x522c>
   16964:	vldr	d7, [pc, #-948]	; 165b8 <__assert_fail@plt+0x50dc>
   16968:	ldr	r3, [sp, #40]	; 0x28
   1696c:	vmul.f64	d9, d9, d7
   16970:	cmp	r3, #1
   16974:	bne	16248 <__assert_fail@plt+0x4d6c>
   16978:	b	1629c <__assert_fail@plt+0x4dc0>
   1697c:	cmp	ip, #9
   16980:	beq	169a8 <__assert_fail@plt+0x54cc>
   16984:	add	r3, ip, #49	; 0x31
   16988:	uxtb	r3, r3
   1698c:	b	16920 <__assert_fail@plt+0x5444>
   16990:	and	r3, ip, #1
   16994:	add	r3, r3, r6
   16998:	cmp	r3, #2
   1699c:	movle	r3, #0
   169a0:	movgt	r3, #1
   169a4:	b	168fc <__assert_fail@plt+0x5420>
   169a8:	adds	r3, r0, #1
   169ac:	str	r3, [sp, #24]
   169b0:	adc	r3, r1, #0
   169b4:	str	r3, [sp, #28]
   169b8:	ldrd	r2, [sp, #24]
   169bc:	cmp	r3, #0
   169c0:	cmpeq	r2, #10
   169c4:	beq	16a04 <__assert_fail@plt+0x5528>
   169c8:	mov	r3, #0
   169cc:	mov	r6, r3
   169d0:	b	16914 <__assert_fail@plt+0x5438>
   169d4:	ldr	r8, [sp, #16]
   169d8:	b	1694c <__assert_fail@plt+0x5470>
   169dc:	ldr	r3, [sp, #12]
   169e0:	mov	r0, #48	; 0x30
   169e4:	mov	r1, fp
   169e8:	strb	r0, [r8, #-1]
   169ec:	ldr	r2, [sp, #12]
   169f0:	mvn	r3, r3
   169f4:	add	r8, r8, r3
   169f8:	mov	r0, r8
   169fc:	bl	111e8 <memcpy@plt>
   16a00:	b	16868 <__assert_fail@plt+0x538c>
   16a04:	mov	r3, #0
   16a08:	ldr	r8, [sp, #16]
   16a0c:	mov	r6, r3
   16a10:	b	1694c <__assert_fail@plt+0x5470>
   16a14:	cmp	r3, #0
   16a18:	ldrne	r2, [sp, #16]
   16a1c:	bne	16664 <__assert_fail@plt+0x5188>
   16a20:	b	16360 <__assert_fail@plt+0x4e84>
   16a24:	mov	r6, r7
   16a28:	ldr	r7, [sp, #12]
   16a2c:	b	16344 <__assert_fail@plt+0x4e68>
   16a30:	strd	r4, [sp, #-32]!	; 0xffffffe0
   16a34:	subs	r4, r0, #0
   16a38:	strd	r6, [sp, #8]
   16a3c:	mov	r7, r1
   16a40:	mov	r6, r2
   16a44:	str	r8, [sp, #16]
   16a48:	strd	sl, [sp, #20]
   16a4c:	str	lr, [sp, #28]
   16a50:	sub	sp, sp, #16
   16a54:	beq	16b74 <__assert_fail@plt+0x5698>
   16a58:	ldrb	r3, [r4]
   16a5c:	movw	r5, #53472	; 0xd0e0
   16a60:	movt	r5, #1
   16a64:	add	r2, r5, #12
   16a68:	add	r1, r5, #20
   16a6c:	cmp	r3, #39	; 0x27
   16a70:	mov	r3, #4
   16a74:	addeq	r4, r4, #1
   16a78:	moveq	r8, #4
   16a7c:	mov	r0, r4
   16a80:	movne	r8, #0
   16a84:	bl	1a848 <__assert_fail@plt+0x936c>
   16a88:	cmp	r0, #0
   16a8c:	blt	16acc <__assert_fail@plt+0x55f0>
   16a90:	add	r5, r5, r0, lsl #2
   16a94:	mov	sl, #1
   16a98:	mov	fp, #0
   16a9c:	mov	r0, #0
   16aa0:	ldr	r3, [r5, #12]
   16aa4:	strd	sl, [r6]
   16aa8:	orr	r3, r8, r3
   16aac:	str	r3, [r7]
   16ab0:	add	sp, sp, #16
   16ab4:	ldrd	r4, [sp]
   16ab8:	ldrd	r6, [sp, #8]
   16abc:	ldr	r8, [sp, #16]
   16ac0:	ldrd	sl, [sp, #20]
   16ac4:	add	sp, sp, #28
   16ac8:	pop	{pc}		; (ldr pc, [sp], #4)
   16acc:	movw	r0, #53548	; 0xd12c
   16ad0:	movt	r0, #1
   16ad4:	mov	r3, r6
   16ad8:	mov	r2, #0
   16adc:	add	r1, sp, #12
   16ae0:	str	r0, [sp]
   16ae4:	mov	r0, r4
   16ae8:	bl	19c0c <__assert_fail@plt+0x8730>
   16aec:	cmp	r0, #0
   16af0:	bne	16b38 <__assert_fail@plt+0x565c>
   16af4:	ldrb	r3, [r4]
   16af8:	sub	r3, r3, #48	; 0x30
   16afc:	cmp	r3, #9
   16b00:	bls	16b2c <__assert_fail@plt+0x5650>
   16b04:	ldr	r2, [sp, #12]
   16b08:	cmp	r4, r2
   16b0c:	bne	16b1c <__assert_fail@plt+0x5640>
   16b10:	b	16bc8 <__assert_fail@plt+0x56ec>
   16b14:	cmp	r2, r4
   16b18:	beq	16bc8 <__assert_fail@plt+0x56ec>
   16b1c:	ldrb	r3, [r4, #1]!
   16b20:	sub	r3, r3, #48	; 0x30
   16b24:	cmp	r3, #9
   16b28:	bhi	16b14 <__assert_fail@plt+0x5638>
   16b2c:	ldrd	r2, [r6]
   16b30:	str	r8, [r7]
   16b34:	b	16b44 <__assert_fail@plt+0x5668>
   16b38:	mov	r1, #0
   16b3c:	ldrd	r2, [r6]
   16b40:	str	r1, [r7]
   16b44:	orrs	r3, r2, r3
   16b48:	bne	16ab0 <__assert_fail@plt+0x55d4>
   16b4c:	movw	r0, #52456	; 0xcce8
   16b50:	movt	r0, #1
   16b54:	bl	112f0 <getenv@plt>
   16b58:	cmp	r0, #0
   16b5c:	mov	r3, #0
   16b60:	moveq	r2, #1024	; 0x400
   16b64:	movne	r2, #512	; 0x200
   16b68:	mov	r0, #4
   16b6c:	strd	r2, [r6]
   16b70:	b	16ab0 <__assert_fail@plt+0x55d4>
   16b74:	movw	r0, #53524	; 0xd114
   16b78:	movt	r0, #1
   16b7c:	bl	112f0 <getenv@plt>
   16b80:	subs	r4, r0, #0
   16b84:	bne	16a58 <__assert_fail@plt+0x557c>
   16b88:	movw	r0, #53536	; 0xd120
   16b8c:	movt	r0, #1
   16b90:	bl	112f0 <getenv@plt>
   16b94:	subs	r4, r0, #0
   16b98:	bne	16a58 <__assert_fail@plt+0x557c>
   16b9c:	movw	r0, #52456	; 0xcce8
   16ba0:	movt	r0, #1
   16ba4:	bl	112f0 <getenv@plt>
   16ba8:	subs	r3, r0, #0
   16bac:	beq	16bf4 <__assert_fail@plt+0x5718>
   16bb0:	mov	r2, #512	; 0x200
   16bb4:	mov	r3, #0
   16bb8:	mov	r0, r4
   16bbc:	strd	r2, [r6]
   16bc0:	str	r4, [r7]
   16bc4:	b	16ab0 <__assert_fail@plt+0x55d4>
   16bc8:	ldrb	r3, [r2, #-1]
   16bcc:	cmp	r3, #66	; 0x42
   16bd0:	orrne	r8, r8, #128	; 0x80
   16bd4:	beq	16be0 <__assert_fail@plt+0x5704>
   16bd8:	orr	r8, r8, #32
   16bdc:	b	16b2c <__assert_fail@plt+0x5650>
   16be0:	ldrb	r3, [r2, #-2]
   16be4:	orr	r8, r8, #384	; 0x180
   16be8:	cmp	r3, #105	; 0x69
   16bec:	bne	16b2c <__assert_fail@plt+0x5650>
   16bf0:	b	16bd8 <__assert_fail@plt+0x56fc>
   16bf4:	mov	r4, #1024	; 0x400
   16bf8:	mov	r5, #0
   16bfc:	mov	r0, r3
   16c00:	strd	r4, [r6]
   16c04:	str	r3, [r7]
   16c08:	b	16ab0 <__assert_fail@plt+0x55d4>
   16c0c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   16c10:	movw	r4, #57824	; 0xe1e0
   16c14:	movt	r4, #2
   16c18:	mov	r5, #0
   16c1c:	cmp	r0, #2
   16c20:	strd	r6, [sp, #8]
   16c24:	str	r8, [sp, #16]
   16c28:	str	lr, [sp, #20]
   16c2c:	sub	sp, sp, #16
   16c30:	ldr	r6, [r4]
   16c34:	str	r5, [r4]
   16c38:	beq	16c68 <__assert_fail@plt+0x578c>
   16c3c:	mov	r2, #0
   16c40:	movw	r3, #57808	; 0xe1d0
   16c44:	movt	r3, #2
   16c48:	str	r6, [r4]
   16c4c:	str	r2, [r3]
   16c50:	add	sp, sp, #16
   16c54:	ldrd	r4, [sp]
   16c58:	ldrd	r6, [sp, #8]
   16c5c:	ldr	r8, [sp, #16]
   16c60:	add	sp, sp, #20
   16c64:	pop	{pc}		; (ldr pc, [sp], #4)
   16c68:	mov	r8, r3
   16c6c:	mov	r7, r2
   16c70:	str	r5, [sp]
   16c74:	movw	r3, #53588	; 0xd154
   16c78:	movt	r3, #1
   16c7c:	movw	r2, #53636	; 0xd184
   16c80:	movt	r2, #1
   16c84:	bl	1135c <getopt_long@plt>
   16c88:	cmn	r0, #1
   16c8c:	beq	16c3c <__assert_fail@plt+0x5760>
   16c90:	cmp	r0, #104	; 0x68
   16c94:	beq	16cd0 <__assert_fail@plt+0x57f4>
   16c98:	cmp	r0, #118	; 0x76
   16c9c:	bne	16c3c <__assert_fail@plt+0x5760>
   16ca0:	add	ip, sp, #48	; 0x30
   16ca4:	movw	r0, #57820	; 0xe1dc
   16ca8:	movt	r0, #2
   16cac:	mov	r2, r8
   16cb0:	ldr	r3, [sp, #40]	; 0x28
   16cb4:	mov	r1, r7
   16cb8:	str	ip, [sp]
   16cbc:	ldr	r0, [r0]
   16cc0:	str	ip, [sp, #12]
   16cc4:	bl	195e8 <__assert_fail@plt+0x810c>
   16cc8:	mov	r0, r5
   16ccc:	bl	11374 <exit@plt>
   16cd0:	mov	r0, r5
   16cd4:	ldr	r3, [sp, #44]	; 0x2c
   16cd8:	blx	r3
   16cdc:	b	16c3c <__assert_fail@plt+0x5760>
   16ce0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   16ce4:	mov	r5, #0
   16ce8:	movw	r4, #57824	; 0xe1e0
   16cec:	movt	r4, #2
   16cf0:	strd	r6, [sp, #8]
   16cf4:	movw	ip, #51464	; 0xc908
   16cf8:	movt	ip, #1
   16cfc:	strd	r8, [sp, #16]
   16d00:	mov	r9, #1
   16d04:	str	lr, [sp, #24]
   16d08:	sub	sp, sp, #20
   16d0c:	mov	r8, r3
   16d10:	ldrb	lr, [sp, #52]	; 0x34
   16d14:	mov	r7, r2
   16d18:	movw	r3, #53588	; 0xd154
   16d1c:	movt	r3, #1
   16d20:	movw	r2, #53636	; 0xd184
   16d24:	movt	r2, #1
   16d28:	str	r5, [sp]
   16d2c:	ldr	r6, [r4]
   16d30:	str	r9, [r4]
   16d34:	cmp	lr, r5
   16d38:	movne	r2, ip
   16d3c:	bl	1135c <getopt_long@plt>
   16d40:	cmn	r0, #1
   16d44:	beq	16d6c <__assert_fail@plt+0x5890>
   16d48:	cmp	r0, #104	; 0x68
   16d4c:	beq	16db8 <__assert_fail@plt+0x58dc>
   16d50:	cmp	r0, #118	; 0x76
   16d54:	beq	16d88 <__assert_fail@plt+0x58ac>
   16d58:	movw	r3, #57724	; 0xe17c
   16d5c:	movt	r3, #2
   16d60:	ldr	r0, [r3]
   16d64:	ldr	r3, [sp, #56]	; 0x38
   16d68:	blx	r3
   16d6c:	str	r6, [r4]
   16d70:	add	sp, sp, #20
   16d74:	ldrd	r4, [sp]
   16d78:	ldrd	r6, [sp, #8]
   16d7c:	ldrd	r8, [sp, #16]
   16d80:	add	sp, sp, #24
   16d84:	pop	{pc}		; (ldr pc, [sp], #4)
   16d88:	add	ip, sp, #60	; 0x3c
   16d8c:	movw	r0, #57820	; 0xe1dc
   16d90:	movt	r0, #2
   16d94:	mov	r2, r8
   16d98:	ldr	r3, [sp, #48]	; 0x30
   16d9c:	mov	r1, r7
   16da0:	str	ip, [sp]
   16da4:	ldr	r0, [r0]
   16da8:	str	ip, [sp, #12]
   16dac:	bl	195e8 <__assert_fail@plt+0x810c>
   16db0:	mov	r0, r5
   16db4:	bl	11374 <exit@plt>
   16db8:	mov	r0, r5
   16dbc:	ldr	r3, [sp, #56]	; 0x38
   16dc0:	blx	r3
   16dc4:	b	16d6c <__assert_fail@plt+0x5890>
   16dc8:	strd	r4, [sp, #-16]!
   16dcc:	subs	r4, r0, #0
   16dd0:	str	r6, [sp, #8]
   16dd4:	str	lr, [sp, #12]
   16dd8:	beq	16e70 <__assert_fail@plt+0x5994>
   16ddc:	mov	r1, #47	; 0x2f
   16de0:	bl	11458 <strrchr@plt>
   16de4:	subs	r5, r0, #0
   16de8:	beq	16e48 <__assert_fail@plt+0x596c>
   16dec:	add	r6, r5, #1
   16df0:	sub	r3, r6, r4
   16df4:	cmp	r3, #6
   16df8:	ble	16e48 <__assert_fail@plt+0x596c>
   16dfc:	movw	r1, #53712	; 0xd1d0
   16e00:	movt	r1, #1
   16e04:	mov	r2, #7
   16e08:	sub	r0, r5, #6
   16e0c:	bl	11494 <strncmp@plt>
   16e10:	cmp	r0, #0
   16e14:	bne	16e48 <__assert_fail@plt+0x596c>
   16e18:	movw	r1, #53720	; 0xd1d8
   16e1c:	movt	r1, #1
   16e20:	mov	r2, #3
   16e24:	mov	r0, r6
   16e28:	bl	11494 <strncmp@plt>
   16e2c:	cmp	r0, #0
   16e30:	movne	r4, r6
   16e34:	bne	16e48 <__assert_fail@plt+0x596c>
   16e38:	add	r4, r5, #4
   16e3c:	movw	r3, #57800	; 0xe1c8
   16e40:	movt	r3, #2
   16e44:	str	r4, [r3]
   16e48:	movw	r2, #58452	; 0xe454
   16e4c:	movt	r2, #2
   16e50:	ldr	r6, [sp, #8]
   16e54:	movw	r3, #57804	; 0xe1cc
   16e58:	movt	r3, #2
   16e5c:	str	r4, [r2]
   16e60:	str	r4, [r3]
   16e64:	ldrd	r4, [sp]
   16e68:	add	sp, sp, #12
   16e6c:	pop	{pc}		; (ldr pc, [sp], #4)
   16e70:	movw	r3, #57816	; 0xe1d8
   16e74:	movt	r3, #2
   16e78:	movw	r0, #53656	; 0xd198
   16e7c:	movt	r0, #1
   16e80:	ldr	r3, [r3]
   16e84:	mov	r2, #55	; 0x37
   16e88:	mov	r1, #1
   16e8c:	bl	1129c <fwrite@plt>
   16e90:	bl	114ac <abort@plt>
   16e94:	strd	r4, [sp, #-16]!
   16e98:	mov	r4, #0
   16e9c:	mov	r5, #0
   16ea0:	cmp	r1, #10
   16ea4:	str	r6, [sp, #8]
   16ea8:	strd	r4, [r0]
   16eac:	strd	r4, [r0, #8]
   16eb0:	str	lr, [sp, #12]
   16eb4:	strd	r4, [r0, #16]
   16eb8:	strd	r4, [r0, #24]
   16ebc:	strd	r4, [r0, #32]
   16ec0:	strd	r4, [r0, #40]	; 0x28
   16ec4:	beq	16edc <__assert_fail@plt+0x5a00>
   16ec8:	ldrd	r4, [sp]
   16ecc:	str	r1, [r0]
   16ed0:	ldr	r6, [sp, #8]
   16ed4:	add	sp, sp, #12
   16ed8:	pop	{pc}		; (ldr pc, [sp], #4)
   16edc:	bl	114ac <abort@plt>
   16ee0:	mov	r2, #5
   16ee4:	strd	r4, [sp, #-16]!
   16ee8:	mov	r5, r0
   16eec:	str	r6, [sp, #8]
   16ef0:	mov	r6, r1
   16ef4:	mov	r1, r0
   16ef8:	mov	r0, #0
   16efc:	str	lr, [sp, #12]
   16f00:	bl	11230 <dcgettext@plt>
   16f04:	cmp	r5, r0
   16f08:	mov	r4, r0
   16f0c:	beq	16f24 <__assert_fail@plt+0x5a48>
   16f10:	mov	r0, r4
   16f14:	ldrd	r4, [sp]
   16f18:	ldr	r6, [sp, #8]
   16f1c:	add	sp, sp, #12
   16f20:	pop	{pc}		; (ldr pc, [sp], #4)
   16f24:	bl	1ad10 <__assert_fail@plt+0x9834>
   16f28:	ldrb	r3, [r0]
   16f2c:	bic	r3, r3, #32
   16f30:	cmp	r3, #85	; 0x55
   16f34:	bne	16f9c <__assert_fail@plt+0x5ac0>
   16f38:	ldrb	r3, [r0, #1]
   16f3c:	bic	r3, r3, #32
   16f40:	cmp	r3, #84	; 0x54
   16f44:	bne	1701c <__assert_fail@plt+0x5b40>
   16f48:	ldrb	r3, [r0, #2]
   16f4c:	bic	r3, r3, #32
   16f50:	cmp	r3, #70	; 0x46
   16f54:	bne	1701c <__assert_fail@plt+0x5b40>
   16f58:	ldrb	r3, [r0, #3]
   16f5c:	cmp	r3, #45	; 0x2d
   16f60:	bne	1701c <__assert_fail@plt+0x5b40>
   16f64:	ldrb	r3, [r0, #4]
   16f68:	cmp	r3, #56	; 0x38
   16f6c:	bne	1701c <__assert_fail@plt+0x5b40>
   16f70:	ldrb	r3, [r0, #5]
   16f74:	cmp	r3, #0
   16f78:	bne	1701c <__assert_fail@plt+0x5b40>
   16f7c:	ldrb	r2, [r4]
   16f80:	movw	r3, #53812	; 0xd234
   16f84:	movt	r3, #1
   16f88:	movw	r4, #53824	; 0xd240
   16f8c:	movt	r4, #1
   16f90:	cmp	r2, #96	; 0x60
   16f94:	movne	r4, r3
   16f98:	b	16f10 <__assert_fail@plt+0x5a34>
   16f9c:	cmp	r3, #71	; 0x47
   16fa0:	bne	1701c <__assert_fail@plt+0x5b40>
   16fa4:	ldrb	r3, [r0, #1]
   16fa8:	bic	r3, r3, #32
   16fac:	cmp	r3, #66	; 0x42
   16fb0:	bne	1701c <__assert_fail@plt+0x5b40>
   16fb4:	ldrb	r3, [r0, #2]
   16fb8:	cmp	r3, #49	; 0x31
   16fbc:	bne	1701c <__assert_fail@plt+0x5b40>
   16fc0:	ldrb	r3, [r0, #3]
   16fc4:	cmp	r3, #56	; 0x38
   16fc8:	bne	1701c <__assert_fail@plt+0x5b40>
   16fcc:	ldrb	r3, [r0, #4]
   16fd0:	cmp	r3, #48	; 0x30
   16fd4:	bne	1701c <__assert_fail@plt+0x5b40>
   16fd8:	ldrb	r3, [r0, #5]
   16fdc:	cmp	r3, #51	; 0x33
   16fe0:	bne	1701c <__assert_fail@plt+0x5b40>
   16fe4:	ldrb	r3, [r0, #6]
   16fe8:	cmp	r3, #48	; 0x30
   16fec:	bne	1701c <__assert_fail@plt+0x5b40>
   16ff0:	ldrb	r3, [r0, #7]
   16ff4:	cmp	r3, #0
   16ff8:	bne	1701c <__assert_fail@plt+0x5b40>
   16ffc:	ldrb	r2, [r4]
   17000:	movw	r3, #53816	; 0xd238
   17004:	movt	r3, #1
   17008:	movw	r4, #53820	; 0xd23c
   1700c:	movt	r4, #1
   17010:	cmp	r2, #96	; 0x60
   17014:	movne	r4, r3
   17018:	b	16f10 <__assert_fail@plt+0x5a34>
   1701c:	movw	r3, #53828	; 0xd244
   17020:	movt	r3, #1
   17024:	cmp	r6, #9
   17028:	movw	r4, #53808	; 0xd230
   1702c:	movt	r4, #1
   17030:	movne	r4, r3
   17034:	b	16f10 <__assert_fail@plt+0x5a34>
   17038:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1703c:	strd	r6, [sp, #8]
   17040:	strd	r8, [sp, #16]
   17044:	strd	sl, [sp, #24]
   17048:	mov	fp, r0
   1704c:	mov	sl, r1
   17050:	str	lr, [sp, #32]
   17054:	sub	sp, sp, #116	; 0x74
   17058:	ldr	r8, [sp, #152]	; 0x98
   1705c:	str	r3, [sp, #28]
   17060:	ldr	r3, [sp, #156]	; 0x9c
   17064:	str	r2, [sp, #32]
   17068:	and	r4, r3, #2
   1706c:	ubfx	r3, r3, #1, #1
   17070:	str	r3, [sp, #44]	; 0x2c
   17074:	bl	112b4 <__ctype_get_mb_cur_max@plt>
   17078:	str	r0, [sp, #64]	; 0x40
   1707c:	cmp	r8, #10
   17080:	ldrls	pc, [pc, r8, lsl #2]
   17084:	b	187f4 <__assert_fail@plt+0x7318>
   17088:	andeq	r7, r1, ip, lsl #9
   1708c:	andeq	r7, r1, r8, lsr #10
   17090:	andeq	r7, r1, r4, lsl #22
   17094:	andeq	r7, r1, r8, asr #10
   17098:	strdeq	r7, [r1], -r0
   1709c:	andeq	r7, r1, ip, lsr r4
   170a0:			; <UNDEFINED> instruction: 0x000174bc
   170a4:	strdeq	r7, [r1], -r8
   170a8:	strheq	r7, [r1], -r4
   170ac:	strheq	r7, [r1], -r4
   170b0:	strheq	r7, [r1], -r4
   170b4:	cmp	r8, #10
   170b8:	beq	170e4 <__assert_fail@plt+0x5c08>
   170bc:	mov	r1, r8
   170c0:	movw	r0, #53832	; 0xd248
   170c4:	movt	r0, #1
   170c8:	bl	16ee0 <__assert_fail@plt+0x5a04>
   170cc:	mov	r1, r8
   170d0:	str	r0, [sp, #164]	; 0xa4
   170d4:	movw	r0, #53828	; 0xd244
   170d8:	movt	r0, #1
   170dc:	bl	16ee0 <__assert_fail@plt+0x5a04>
   170e0:	str	r0, [sp, #168]	; 0xa8
   170e4:	cmp	r4, #0
   170e8:	movne	r4, #0
   170ec:	beq	184d0 <__assert_fail@plt+0x6ff4>
   170f0:	mov	r3, #1
   170f4:	mov	r5, #0
   170f8:	ldr	r0, [sp, #168]	; 0xa8
   170fc:	str	r3, [sp, #36]	; 0x24
   17100:	str	r3, [sp, #40]	; 0x28
   17104:	str	r5, [sp, #68]	; 0x44
   17108:	bl	11380 <strlen@plt>
   1710c:	ldr	r3, [sp, #168]	; 0xa8
   17110:	str	r5, [sp, #48]	; 0x30
   17114:	str	r0, [sp, #56]	; 0x38
   17118:	str	r3, [sp, #60]	; 0x3c
   1711c:	str	r5, [sp, #72]	; 0x48
   17120:	str	r8, [sp, #152]	; 0x98
   17124:	mov	r8, fp
   17128:	mov	r9, #0
   1712c:	ldr	fp, [sp, #152]	; 0x98
   17130:	ldr	r3, [sp, #28]
   17134:	cmn	r3, #1
   17138:	beq	17698 <__assert_fail@plt+0x61bc>
   1713c:	ldr	r3, [sp, #28]
   17140:	subs	r6, r3, r9
   17144:	movne	r6, #1
   17148:	cmp	r6, #0
   1714c:	beq	176b0 <__assert_fail@plt+0x61d4>
   17150:	ldr	r0, [sp, #32]
   17154:	ldr	r7, [sp, #40]	; 0x28
   17158:	add	r3, r0, r9
   1715c:	cmp	fp, #2
   17160:	moveq	r7, #0
   17164:	andne	r7, r7, #1
   17168:	str	r3, [sp, #52]	; 0x34
   1716c:	cmp	r7, #0
   17170:	beq	17b4c <__assert_fail@plt+0x6670>
   17174:	ldr	r2, [sp, #56]	; 0x38
   17178:	cmp	r2, #0
   1717c:	beq	17de8 <__assert_fail@plt+0x690c>
   17180:	ldr	r1, [sp, #28]
   17184:	cmp	r2, #1
   17188:	mov	r3, r2
   1718c:	movls	r3, #0
   17190:	movhi	r3, #1
   17194:	add	r5, r9, r2
   17198:	cmn	r1, #1
   1719c:	movne	r3, #0
   171a0:	cmp	r3, #0
   171a4:	beq	171b0 <__assert_fail@plt+0x5cd4>
   171a8:	bl	11380 <strlen@plt>
   171ac:	str	r0, [sp, #28]
   171b0:	ldr	r3, [sp, #28]
   171b4:	cmp	r5, r3
   171b8:	bhi	17de8 <__assert_fail@plt+0x690c>
   171bc:	ldr	r0, [sp, #52]	; 0x34
   171c0:	ldr	r2, [sp, #56]	; 0x38
   171c4:	ldr	r1, [sp, #60]	; 0x3c
   171c8:	bl	11218 <memcmp@plt>
   171cc:	cmp	r0, #0
   171d0:	bne	17de8 <__assert_fail@plt+0x690c>
   171d4:	ldr	r3, [sp, #44]	; 0x2c
   171d8:	cmp	r3, #0
   171dc:	bne	18718 <__assert_fail@plt+0x723c>
   171e0:	ldr	r3, [sp, #52]	; 0x34
   171e4:	ldrb	r5, [r3]
   171e8:	cmp	r5, #126	; 0x7e
   171ec:	ldrls	pc, [pc, r5, lsl #2]
   171f0:	b	17aa8 <__assert_fail@plt+0x65cc>
   171f4:	andeq	r7, r1, ip, lsr #19
   171f8:	andeq	r7, r1, r8, lsr #21
   171fc:	andeq	r7, r1, r8, lsr #21
   17200:	andeq	r7, r1, r8, lsr #21
   17204:	andeq	r7, r1, r8, lsr #21
   17208:	andeq	r7, r1, r8, lsr #21
   1720c:	andeq	r7, r1, r8, lsr #21
   17210:	andeq	r7, r1, r0, lsl #19
   17214:	andeq	r7, r1, r8, ror r9
   17218:	andeq	r7, r1, r0, asr #17
   1721c:	andeq	r7, r1, ip, ror #18
   17220:			; <UNDEFINED> instruction: 0x000178b8
   17224:	andeq	r7, r1, r8, asr #18
   17228:	muleq	r1, r4, r9
   1722c:	andeq	r7, r1, r8, lsr #21
   17230:	andeq	r7, r1, r8, lsr #21
   17234:	andeq	r7, r1, r8, lsr #21
   17238:	andeq	r7, r1, r8, lsr #21
   1723c:	andeq	r7, r1, r8, lsr #21
   17240:	andeq	r7, r1, r8, lsr #21
   17244:	andeq	r7, r1, r8, lsr #21
   17248:	andeq	r7, r1, r8, lsr #21
   1724c:	andeq	r7, r1, r8, lsr #21
   17250:	andeq	r7, r1, r8, lsr #21
   17254:	andeq	r7, r1, r8, lsr #21
   17258:	andeq	r7, r1, r8, lsr #21
   1725c:	andeq	r7, r1, r8, lsr #21
   17260:	andeq	r7, r1, r8, lsr #21
   17264:	andeq	r7, r1, r8, lsr #21
   17268:	andeq	r7, r1, r8, lsr #21
   1726c:	andeq	r7, r1, r8, lsr #21
   17270:	andeq	r7, r1, r8, lsr #21
   17274:	andeq	r7, r1, r4, lsl #21
   17278:	andeq	r7, r1, ip, lsl #19
   1727c:	andeq	r7, r1, ip, lsl #19
   17280:	andeq	r7, r1, r8, ror #20
   17284:	andeq	r7, r1, ip, lsl #19
   17288:	muleq	r1, ip, sl
   1728c:	andeq	r7, r1, ip, lsl #19
   17290:	andeq	r7, r1, r8, ror #15
   17294:	andeq	r7, r1, ip, lsl #19
   17298:	andeq	r7, r1, ip, lsl #19
   1729c:	andeq	r7, r1, ip, lsl #19
   172a0:	muleq	r1, ip, sl
   172a4:	muleq	r1, ip, sl
   172a8:	muleq	r1, ip, sl
   172ac:	muleq	r1, ip, sl
   172b0:	muleq	r1, ip, sl
   172b4:	muleq	r1, ip, sl
   172b8:	muleq	r1, ip, sl
   172bc:	muleq	r1, ip, sl
   172c0:	muleq	r1, ip, sl
   172c4:	muleq	r1, ip, sl
   172c8:	muleq	r1, ip, sl
   172cc:	muleq	r1, ip, sl
   172d0:	muleq	r1, ip, sl
   172d4:	muleq	r1, ip, sl
   172d8:	muleq	r1, ip, sl
   172dc:	muleq	r1, ip, sl
   172e0:	andeq	r7, r1, ip, lsl #19
   172e4:	andeq	r7, r1, ip, lsl #19
   172e8:	andeq	r7, r1, ip, lsl #19
   172ec:	andeq	r7, r1, ip, lsl #19
   172f0:			; <UNDEFINED> instruction: 0x000177bc
   172f4:	andeq	r7, r1, r8, lsr #21
   172f8:	muleq	r1, ip, sl
   172fc:	muleq	r1, ip, sl
   17300:	muleq	r1, ip, sl
   17304:	muleq	r1, ip, sl
   17308:	muleq	r1, ip, sl
   1730c:	muleq	r1, ip, sl
   17310:	muleq	r1, ip, sl
   17314:	muleq	r1, ip, sl
   17318:	muleq	r1, ip, sl
   1731c:	muleq	r1, ip, sl
   17320:	muleq	r1, ip, sl
   17324:	muleq	r1, ip, sl
   17328:	muleq	r1, ip, sl
   1732c:	muleq	r1, ip, sl
   17330:	muleq	r1, ip, sl
   17334:	muleq	r1, ip, sl
   17338:	muleq	r1, ip, sl
   1733c:	muleq	r1, ip, sl
   17340:	muleq	r1, ip, sl
   17344:	muleq	r1, ip, sl
   17348:	muleq	r1, ip, sl
   1734c:	muleq	r1, ip, sl
   17350:	muleq	r1, ip, sl
   17354:	muleq	r1, ip, sl
   17358:	muleq	r1, ip, sl
   1735c:	muleq	r1, ip, sl
   17360:	andeq	r7, r1, ip, lsl #19
   17364:	andeq	r7, r1, r4, ror #14
   17368:	muleq	r1, ip, sl
   1736c:	andeq	r7, r1, ip, lsl #19
   17370:	muleq	r1, ip, sl
   17374:	andeq	r7, r1, ip, lsl #19
   17378:	muleq	r1, ip, sl
   1737c:	muleq	r1, ip, sl
   17380:	muleq	r1, ip, sl
   17384:	muleq	r1, ip, sl
   17388:	muleq	r1, ip, sl
   1738c:	muleq	r1, ip, sl
   17390:	muleq	r1, ip, sl
   17394:	muleq	r1, ip, sl
   17398:	muleq	r1, ip, sl
   1739c:	muleq	r1, ip, sl
   173a0:	muleq	r1, ip, sl
   173a4:	muleq	r1, ip, sl
   173a8:	muleq	r1, ip, sl
   173ac:	muleq	r1, ip, sl
   173b0:	muleq	r1, ip, sl
   173b4:	muleq	r1, ip, sl
   173b8:	muleq	r1, ip, sl
   173bc:	muleq	r1, ip, sl
   173c0:	muleq	r1, ip, sl
   173c4:	muleq	r1, ip, sl
   173c8:	muleq	r1, ip, sl
   173cc:	muleq	r1, ip, sl
   173d0:	muleq	r1, ip, sl
   173d4:	muleq	r1, ip, sl
   173d8:	muleq	r1, ip, sl
   173dc:	muleq	r1, ip, sl
   173e0:	andeq	r7, r1, r8, lsl #11
   173e4:	andeq	r7, r1, ip, lsl #19
   173e8:	andeq	r7, r1, r8, lsl #11
   173ec:	andeq	r7, r1, r8, ror #20
   173f0:	cmp	r4, #0
   173f4:	moveq	r3, #1
   173f8:	streq	r3, [sp, #40]	; 0x28
   173fc:	beq	17b10 <__assert_fail@plt+0x6634>
   17400:	mov	r3, #0
   17404:	mov	r2, #1
   17408:	mov	r4, r3
   1740c:	str	r2, [sp, #36]	; 0x24
   17410:	str	r2, [sp, #44]	; 0x2c
   17414:	str	r2, [sp, #56]	; 0x38
   17418:	str	r3, [sp, #68]	; 0x44
   1741c:	movw	r3, #53828	; 0xd244
   17420:	movt	r3, #1
   17424:	str	r4, [sp, #40]	; 0x28
   17428:	mov	r8, #2
   1742c:	str	r4, [sp, #48]	; 0x30
   17430:	str	r3, [sp, #60]	; 0x3c
   17434:	str	r4, [sp, #72]	; 0x48
   17438:	b	17120 <__assert_fail@plt+0x5c44>
   1743c:	cmp	r4, #0
   17440:	bne	1868c <__assert_fail@plt+0x71b0>
   17444:	cmp	sl, #0
   17448:	beq	1844c <__assert_fail@plt+0x6f70>
   1744c:	mov	r3, #34	; 0x22
   17450:	mov	r1, r4
   17454:	mov	r2, #1
   17458:	strb	r3, [fp]
   1745c:	movw	r3, #53808	; 0xd230
   17460:	movt	r3, #1
   17464:	mov	r4, r2
   17468:	str	r2, [sp, #36]	; 0x24
   1746c:	str	r2, [sp, #40]	; 0x28
   17470:	str	r1, [sp, #44]	; 0x2c
   17474:	str	r1, [sp, #48]	; 0x30
   17478:	str	r2, [sp, #56]	; 0x38
   1747c:	str	r3, [sp, #60]	; 0x3c
   17480:	str	r1, [sp, #68]	; 0x44
   17484:	str	r1, [sp, #72]	; 0x48
   17488:	b	17120 <__assert_fail@plt+0x5c44>
   1748c:	mov	r3, #0
   17490:	mov	r4, r8
   17494:	str	r3, [sp, #40]	; 0x28
   17498:	str	r3, [sp, #44]	; 0x2c
   1749c:	str	r3, [sp, #48]	; 0x30
   174a0:	str	r8, [sp, #56]	; 0x38
   174a4:	str	r3, [sp, #60]	; 0x3c
   174a8:	str	r3, [sp, #68]	; 0x44
   174ac:	mov	r3, #1
   174b0:	str	r3, [sp, #36]	; 0x24
   174b4:	str	r8, [sp, #72]	; 0x48
   174b8:	b	17120 <__assert_fail@plt+0x5c44>
   174bc:	mov	r3, #1
   174c0:	mov	r2, #0
   174c4:	mov	r4, r2
   174c8:	mov	r8, #5
   174cc:	str	r3, [sp, #36]	; 0x24
   174d0:	str	r3, [sp, #40]	; 0x28
   174d4:	str	r3, [sp, #44]	; 0x2c
   174d8:	str	r2, [sp, #48]	; 0x30
   174dc:	str	r3, [sp, #56]	; 0x38
   174e0:	movw	r3, #53808	; 0xd230
   174e4:	movt	r3, #1
   174e8:	str	r3, [sp, #60]	; 0x3c
   174ec:	str	r2, [sp, #68]	; 0x44
   174f0:	str	r2, [sp, #72]	; 0x48
   174f4:	b	17120 <__assert_fail@plt+0x5c44>
   174f8:	mov	r3, #0
   174fc:	mov	r2, #1
   17500:	mov	r4, r3
   17504:	str	r2, [sp, #36]	; 0x24
   17508:	str	r2, [sp, #40]	; 0x28
   1750c:	str	r3, [sp, #44]	; 0x2c
   17510:	str	r3, [sp, #48]	; 0x30
   17514:	str	r3, [sp, #56]	; 0x38
   17518:	str	r3, [sp, #60]	; 0x3c
   1751c:	str	r3, [sp, #68]	; 0x44
   17520:	str	r3, [sp, #72]	; 0x48
   17524:	b	17120 <__assert_fail@plt+0x5c44>
   17528:	mov	r2, #1
   1752c:	mov	r3, #0
   17530:	mov	r4, r3
   17534:	str	r2, [sp, #36]	; 0x24
   17538:	str	r2, [sp, #44]	; 0x2c
   1753c:	str	r8, [sp, #56]	; 0x38
   17540:	str	r3, [sp, #68]	; 0x44
   17544:	b	1741c <__assert_fail@plt+0x5f40>
   17548:	mov	r3, #1
   1754c:	mov	r2, #0
   17550:	mov	r4, r2
   17554:	mov	r8, #2
   17558:	str	r3, [sp, #36]	; 0x24
   1755c:	str	r3, [sp, #40]	; 0x28
   17560:	str	r3, [sp, #44]	; 0x2c
   17564:	str	r2, [sp, #48]	; 0x30
   17568:	str	r3, [sp, #56]	; 0x38
   1756c:	movw	r3, #53828	; 0xd244
   17570:	movt	r3, #1
   17574:	str	r3, [sp, #60]	; 0x3c
   17578:	str	r2, [sp, #68]	; 0x44
   1757c:	str	r2, [sp, #72]	; 0x48
   17580:	b	17120 <__assert_fail@plt+0x5c44>
   17584:	mov	r7, #0
   17588:	ldr	r3, [sp, #28]
   1758c:	cmn	r3, #1
   17590:	beq	18068 <__assert_fail@plt+0x6b8c>
   17594:	ldr	r3, [sp, #28]
   17598:	subs	r2, r3, #1
   1759c:	movne	r2, #1
   175a0:	sub	r3, fp, #2
   175a4:	cmp	r2, #0
   175a8:	clz	r3, r3
   175ac:	lsr	r3, r3, #5
   175b0:	bne	175bc <__assert_fail@plt+0x60e0>
   175b4:	cmp	r9, #0
   175b8:	beq	17dc8 <__assert_fail@plt+0x68ec>
   175bc:	mov	r6, #0
   175c0:	ldr	r2, [sp, #40]	; 0x28
   175c4:	eor	r2, r2, #1
   175c8:	orrs	r3, r3, r2
   175cc:	bne	177a4 <__assert_fail@plt+0x62c8>
   175d0:	ldr	r2, [sp, #160]	; 0xa0
   175d4:	cmp	r2, #0
   175d8:	beq	175f8 <__assert_fail@plt+0x611c>
   175dc:	ldr	r0, [sp, #160]	; 0xa0
   175e0:	ubfx	r1, r5, #5, #8
   175e4:	and	r2, r5, #31
   175e8:	ldr	r1, [r0, r1, lsl #2]
   175ec:	lsr	r2, r1, r2
   175f0:	tst	r2, #1
   175f4:	bne	17600 <__assert_fail@plt+0x6124>
   175f8:	cmp	r7, #0
   175fc:	beq	17870 <__assert_fail@plt+0x6394>
   17600:	ldr	r2, [sp, #44]	; 0x2c
   17604:	sub	r3, fp, #2
   17608:	clz	r3, r3
   1760c:	lsr	r3, r3, #5
   17610:	cmp	r2, #0
   17614:	bne	183bc <__assert_fail@plt+0x6ee0>
   17618:	ldr	r2, [sp, #48]	; 0x30
   1761c:	eor	r2, r2, #1
   17620:	ands	r3, r3, r2
   17624:	beq	1765c <__assert_fail@plt+0x6180>
   17628:	cmp	sl, r4
   1762c:	str	r3, [sp, #48]	; 0x30
   17630:	movhi	r2, #39	; 0x27
   17634:	strbhi	r2, [r8, r4]
   17638:	add	r2, r4, #1
   1763c:	cmp	sl, r2
   17640:	movhi	r1, #36	; 0x24
   17644:	strbhi	r1, [r8, r2]
   17648:	add	r2, r4, #2
   1764c:	add	r4, r4, #3
   17650:	cmp	sl, r2
   17654:	movhi	r1, #39	; 0x27
   17658:	strbhi	r1, [r8, r2]
   1765c:	cmp	r4, sl
   17660:	add	r9, r9, #1
   17664:	movcc	r3, #92	; 0x5c
   17668:	strbcc	r3, [r8, r4]
   1766c:	add	r4, r4, #1
   17670:	cmp	r4, sl
   17674:	ldr	r3, [sp, #36]	; 0x24
   17678:	strbcc	r5, [r8, r4]
   1767c:	cmp	r6, #0
   17680:	add	r4, r4, #1
   17684:	moveq	r3, #0
   17688:	str	r3, [sp, #36]	; 0x24
   1768c:	ldr	r3, [sp, #28]
   17690:	cmn	r3, #1
   17694:	bne	1713c <__assert_fail@plt+0x5c60>
   17698:	ldr	r3, [sp, #32]
   1769c:	ldrb	r6, [r3, r9]
   176a0:	adds	r6, r6, #0
   176a4:	movne	r6, #1
   176a8:	cmp	r6, #0
   176ac:	bne	17150 <__assert_fail@plt+0x5c74>
   176b0:	str	fp, [sp, #152]	; 0x98
   176b4:	mov	fp, r8
   176b8:	cmp	r4, #0
   176bc:	ldr	r1, [sp, #44]	; 0x2c
   176c0:	movne	r3, #0
   176c4:	ldr	r8, [sp, #152]	; 0x98
   176c8:	sub	r2, r8, #2
   176cc:	clz	r2, r2
   176d0:	lsr	r2, r2, #5
   176d4:	andeq	r3, r2, r1
   176d8:	cmp	r3, #0
   176dc:	bne	18798 <__assert_fail@plt+0x72bc>
   176e0:	eor	r3, r1, #1
   176e4:	ands	r2, r2, r3
   176e8:	beq	186c4 <__assert_fail@plt+0x71e8>
   176ec:	ldr	r3, [sp, #68]	; 0x44
   176f0:	cmp	r3, #0
   176f4:	beq	186c8 <__assert_fail@plt+0x71ec>
   176f8:	ldr	r3, [sp, #36]	; 0x24
   176fc:	cmp	r3, #0
   17700:	bne	18754 <__assert_fail@plt+0x7278>
   17704:	ldr	r3, [sp, #72]	; 0x48
   17708:	adds	r3, r3, #0
   1770c:	movne	r3, #1
   17710:	cmp	sl, #0
   17714:	movne	r3, #0
   17718:	cmp	r3, #0
   1771c:	ldreq	r2, [sp, #68]	; 0x44
   17720:	beq	186c8 <__assert_fail@plt+0x71ec>
   17724:	ldr	r2, [sp, #72]	; 0x48
   17728:	str	r3, [sp, #68]	; 0x44
   1772c:	movw	r3, #53828	; 0xd244
   17730:	movt	r3, #1
   17734:	mov	r1, #39	; 0x27
   17738:	mov	r4, #1
   1773c:	ldr	sl, [sp, #72]	; 0x48
   17740:	mov	r8, #2
   17744:	str	r3, [sp, #60]	; 0x3c
   17748:	mov	r3, #0
   1774c:	strb	r1, [fp]
   17750:	str	r3, [sp, #44]	; 0x2c
   17754:	str	r4, [sp, #56]	; 0x38
   17758:	str	r2, [sp, #72]	; 0x48
   1775c:	b	17120 <__assert_fail@plt+0x5c44>
   17760:	mov	r7, #0
   17764:	cmp	fp, #2
   17768:	beq	18048 <__assert_fail@plt+0x6b6c>
   1776c:	ldr	r2, [sp, #40]	; 0x28
   17770:	ldr	r3, [sp, #56]	; 0x38
   17774:	ldr	r1, [sp, #44]	; 0x2c
   17778:	cmp	r3, #0
   1777c:	moveq	r3, #0
   17780:	andne	r3, r2, r1
   17784:	cmp	r3, #0
   17788:	moveq	r5, #92	; 0x5c
   1778c:	moveq	r3, r5
   17790:	bne	18054 <__assert_fail@plt+0x6b78>
   17794:	ldr	r2, [sp, #40]	; 0x28
   17798:	cmp	r2, #0
   1779c:	bne	18490 <__assert_fail@plt+0x6fb4>
   177a0:	mov	r6, #0
   177a4:	ldr	r3, [sp, #44]	; 0x2c
   177a8:	cmp	r3, #0
   177ac:	beq	18040 <__assert_fail@plt+0x6b64>
   177b0:	mov	r3, #0
   177b4:	b	175d0 <__assert_fail@plt+0x60f4>
   177b8:	mov	r7, #0
   177bc:	cmp	fp, #2
   177c0:	beq	180b8 <__assert_fail@plt+0x6bdc>
   177c4:	cmp	fp, #5
   177c8:	beq	1807c <__assert_fail@plt+0x6ba0>
   177cc:	sub	r3, fp, #2
   177d0:	mov	r6, #0
   177d4:	clz	r3, r3
   177d8:	mov	r5, #63	; 0x3f
   177dc:	lsr	r3, r3, #5
   177e0:	b	175c0 <__assert_fail@plt+0x60e4>
   177e4:	mov	r7, #0
   177e8:	cmp	fp, #2
   177ec:	movne	r3, #0
   177f0:	movne	r5, #39	; 0x27
   177f4:	strne	r6, [sp, #68]	; 0x44
   177f8:	bne	175c0 <__assert_fail@plt+0x60e4>
   177fc:	ldr	r3, [sp, #44]	; 0x2c
   17800:	cmp	r3, #0
   17804:	bne	184c0 <__assert_fail@plt+0x6fe4>
   17808:	ldr	r3, [sp, #72]	; 0x48
   1780c:	cmp	sl, #0
   17810:	clz	r3, r3
   17814:	lsr	r3, r3, #5
   17818:	moveq	r3, #0
   1781c:	cmp	r3, #0
   17820:	bne	183ec <__assert_fail@plt+0x6f10>
   17824:	cmp	sl, r4
   17828:	movhi	r3, #39	; 0x27
   1782c:	strbhi	r3, [r8, r4]
   17830:	add	r3, r4, #1
   17834:	cmp	sl, r3
   17838:	movhi	r2, #92	; 0x5c
   1783c:	strbhi	r2, [r8, r3]
   17840:	add	r3, r4, #2
   17844:	cmp	sl, r3
   17848:	bls	17854 <__assert_fail@plt+0x6378>
   1784c:	mov	r2, #39	; 0x27
   17850:	strb	r2, [r8, r3]
   17854:	mov	r3, #0
   17858:	cmp	r7, #0
   1785c:	add	r4, r4, #3
   17860:	mov	r5, #39	; 0x27
   17864:	str	r3, [sp, #48]	; 0x30
   17868:	str	r6, [sp, #68]	; 0x44
   1786c:	bne	17600 <__assert_fail@plt+0x6124>
   17870:	ldr	r2, [sp, #48]	; 0x30
   17874:	eor	r3, r3, #1
   17878:	add	r9, r9, #1
   1787c:	and	r3, r3, r2
   17880:	uxtb	r3, r3
   17884:	cmp	r3, #0
   17888:	beq	17670 <__assert_fail@plt+0x6194>
   1788c:	cmp	sl, r4
   17890:	movhi	r3, #39	; 0x27
   17894:	strbhi	r3, [r8, r4]
   17898:	add	r3, r4, #1
   1789c:	add	r4, r4, #2
   178a0:	cmp	sl, r3
   178a4:	movhi	r2, #39	; 0x27
   178a8:	strbhi	r2, [r8, r3]
   178ac:	mov	r3, #0
   178b0:	str	r3, [sp, #48]	; 0x30
   178b4:	b	17670 <__assert_fail@plt+0x6194>
   178b8:	mov	r3, #118	; 0x76
   178bc:	b	17794 <__assert_fail@plt+0x62b8>
   178c0:	mov	r3, #116	; 0x74
   178c4:	ldr	r2, [sp, #44]	; 0x2c
   178c8:	cmp	fp, #2
   178cc:	movne	r2, #0
   178d0:	andeq	r2, r2, #1
   178d4:	cmp	r2, #0
   178d8:	beq	17794 <__assert_fail@plt+0x62b8>
   178dc:	mov	fp, r8
   178e0:	mov	r8, #2
   178e4:	ldr	r3, [sp, #40]	; 0x28
   178e8:	cmp	r3, #0
   178ec:	movne	r8, #4
   178f0:	mov	lr, #0
   178f4:	mov	r0, fp
   178f8:	ldr	r2, [sp, #32]
   178fc:	ldr	r3, [sp, #156]	; 0x9c
   17900:	ldr	r1, [sp, #164]	; 0xa4
   17904:	bic	ip, r3, #2
   17908:	ldr	r3, [sp, #28]
   1790c:	stm	sp, {r8, ip, lr}
   17910:	ldr	ip, [sp, #168]	; 0xa8
   17914:	str	r1, [sp, #12]
   17918:	mov	r1, sl
   1791c:	str	ip, [sp, #16]
   17920:	bl	17038 <__assert_fail@plt+0x5b5c>
   17924:	mov	r4, r0
   17928:	mov	r0, r4
   1792c:	add	sp, sp, #116	; 0x74
   17930:	ldrd	r4, [sp]
   17934:	ldrd	r6, [sp, #8]
   17938:	ldrd	r8, [sp, #16]
   1793c:	ldrd	sl, [sp, #24]
   17940:	add	sp, sp, #32
   17944:	pop	{pc}		; (ldr pc, [sp], #4)
   17948:	mov	r5, #102	; 0x66
   1794c:	ldr	r2, [sp, #44]	; 0x2c
   17950:	sub	r3, fp, #2
   17954:	clz	r3, r3
   17958:	lsr	r3, r3, #5
   1795c:	cmp	r2, #0
   17960:	bne	183bc <__assert_fail@plt+0x6ee0>
   17964:	mov	r6, r2
   17968:	b	1765c <__assert_fail@plt+0x6180>
   1796c:	mov	r5, #110	; 0x6e
   17970:	mov	r6, #0
   17974:	b	17600 <__assert_fail@plt+0x6124>
   17978:	mov	r5, #98	; 0x62
   1797c:	b	1794c <__assert_fail@plt+0x6470>
   17980:	mov	r5, #97	; 0x61
   17984:	b	1794c <__assert_fail@plt+0x6470>
   17988:	mov	r7, #0
   1798c:	mov	r6, #0
   17990:	b	177b0 <__assert_fail@plt+0x62d4>
   17994:	mov	r5, #114	; 0x72
   17998:	b	17970 <__assert_fail@plt+0x6494>
   1799c:	ldr	r3, [sp, #44]	; 0x2c
   179a0:	cmp	r3, #0
   179a4:	bne	18734 <__assert_fail@plt+0x7258>
   179a8:	mov	r7, r3
   179ac:	ldr	r3, [sp, #48]	; 0x30
   179b0:	sub	r2, fp, #2
   179b4:	clz	r2, r2
   179b8:	lsr	r2, r2, #5
   179bc:	eor	r3, r3, #1
   179c0:	ands	r3, r2, r3
   179c4:	beq	183d8 <__assert_fail@plt+0x6efc>
   179c8:	cmp	sl, r4
   179cc:	movhi	r1, #39	; 0x27
   179d0:	strbhi	r1, [r8, r4]
   179d4:	add	r1, r4, #1
   179d8:	cmp	sl, r1
   179dc:	movhi	r0, #36	; 0x24
   179e0:	strbhi	r0, [r8, r1]
   179e4:	add	r1, r4, #2
   179e8:	cmp	sl, r1
   179ec:	movhi	r0, #39	; 0x27
   179f0:	strbhi	r0, [r8, r1]
   179f4:	add	r1, r4, #3
   179f8:	cmp	sl, r1
   179fc:	bls	18430 <__assert_fail@plt+0x6f54>
   17a00:	mov	r4, r1
   17a04:	mov	r1, #92	; 0x5c
   17a08:	mov	r0, r4
   17a0c:	str	r3, [sp, #48]	; 0x30
   17a10:	strb	r1, [r8, r4]
   17a14:	cmp	fp, #2
   17a18:	add	r4, r4, #1
   17a1c:	beq	18480 <__assert_fail@plt+0x6fa4>
   17a20:	ldr	r1, [sp, #28]
   17a24:	add	r3, r9, #1
   17a28:	cmp	r3, r1
   17a2c:	bcs	17a44 <__assert_fail@plt+0x6568>
   17a30:	ldr	r1, [sp, #32]
   17a34:	ldrb	r3, [r1, r3]
   17a38:	sub	r3, r3, #48	; 0x30
   17a3c:	cmp	r3, #9
   17a40:	bls	18498 <__assert_fail@plt+0x6fbc>
   17a44:	mov	r5, #48	; 0x30
   17a48:	ldr	r3, [sp, #40]	; 0x28
   17a4c:	eor	r3, r3, #1
   17a50:	orrs	r2, r2, r3
   17a54:	mov	r3, r6
   17a58:	moveq	r6, r2
   17a5c:	beq	175d0 <__assert_fail@plt+0x60f4>
   17a60:	mov	r6, #0
   17a64:	b	175f8 <__assert_fail@plt+0x611c>
   17a68:	cmp	r9, #0
   17a6c:	mov	r2, r7
   17a70:	bne	18010 <__assert_fail@plt+0x6b34>
   17a74:	mov	r6, r7
   17a78:	mov	r3, r9
   17a7c:	mov	r7, r2
   17a80:	b	175c0 <__assert_fail@plt+0x60e4>
   17a84:	mov	r2, r7
   17a88:	mov	r6, r7
   17a8c:	mov	r3, #0
   17a90:	mov	r7, r2
   17a94:	mov	r5, #32
   17a98:	b	175c0 <__assert_fail@plt+0x60e4>
   17a9c:	mov	r6, r7
   17aa0:	b	177b0 <__assert_fail@plt+0x62d4>
   17aa4:	mov	r7, #0
   17aa8:	ldr	r3, [sp, #64]	; 0x40
   17aac:	cmp	r3, #1
   17ab0:	bne	180d0 <__assert_fail@plt+0x6bf4>
   17ab4:	bl	11368 <__ctype_b_loc@plt>
   17ab8:	ldr	r2, [r0]
   17abc:	sxth	r3, r5
   17ac0:	lsl	r3, r3, #1
   17ac4:	ldr	r1, [sp, #64]	; 0x40
   17ac8:	ldrh	r3, [r2, r3]
   17acc:	mov	ip, r1
   17ad0:	and	r3, r3, #16384	; 0x4000
   17ad4:	cmp	r3, #0
   17ad8:	ldr	r3, [sp, #40]	; 0x28
   17adc:	movne	r6, #1
   17ae0:	moveq	r6, #0
   17ae4:	movne	r2, #0
   17ae8:	andeq	r2, r3, #1
   17aec:	cmp	r2, #0
   17af0:	bne	18418 <__assert_fail@plt+0x6f3c>
   17af4:	sub	r3, fp, #2
   17af8:	clz	r3, r3
   17afc:	lsr	r3, r3, #5
   17b00:	b	175c0 <__assert_fail@plt+0x60e4>
   17b04:	cmp	r4, #0
   17b08:	bne	187a8 <__assert_fail@plt+0x72cc>
   17b0c:	str	r4, [sp, #40]	; 0x28
   17b10:	cmp	sl, #0
   17b14:	bne	187d8 <__assert_fail@plt+0x72fc>
   17b18:	mov	r3, #1
   17b1c:	movw	r2, #53828	; 0xd244
   17b20:	movt	r2, #1
   17b24:	mov	r4, r3
   17b28:	mov	r8, #2
   17b2c:	str	r3, [sp, #36]	; 0x24
   17b30:	str	sl, [sp, #44]	; 0x2c
   17b34:	str	sl, [sp, #48]	; 0x30
   17b38:	str	r3, [sp, #56]	; 0x38
   17b3c:	str	r2, [sp, #60]	; 0x3c
   17b40:	str	sl, [sp, #68]	; 0x44
   17b44:	str	sl, [sp, #72]	; 0x48
   17b48:	b	17120 <__assert_fail@plt+0x5c44>
   17b4c:	ldr	r3, [sp, #32]
   17b50:	ldrb	r5, [r3, r9]
   17b54:	cmp	r5, #126	; 0x7e
   17b58:	ldrls	pc, [pc, r5, lsl #2]
   17b5c:	b	17aa8 <__assert_fail@plt+0x65cc>
   17b60:	andeq	r7, r1, r4, lsl #27
   17b64:	andeq	r7, r1, r8, lsr #21
   17b68:	andeq	r7, r1, r8, lsr #21
   17b6c:	andeq	r7, r1, r8, lsr #21
   17b70:	andeq	r7, r1, r8, lsr #21
   17b74:	andeq	r7, r1, r8, lsr #21
   17b78:	andeq	r7, r1, r8, lsr #21
   17b7c:	andeq	r7, r1, ip, ror sp
   17b80:	andeq	r7, r1, r4, ror sp
   17b84:	andeq	r7, r1, r0, asr #17
   17b88:	andeq	r7, r1, ip, ror #26
   17b8c:			; <UNDEFINED> instruction: 0x000178b8
   17b90:	andeq	r7, r1, r4, ror #26
   17b94:	andeq	r7, r1, ip, asr sp
   17b98:	andeq	r7, r1, r8, lsr #21
   17b9c:	andeq	r7, r1, r8, lsr #21
   17ba0:	andeq	r7, r1, r8, lsr #21
   17ba4:	andeq	r7, r1, r8, lsr #21
   17ba8:	andeq	r7, r1, r8, lsr #21
   17bac:	andeq	r7, r1, r8, lsr #21
   17bb0:	andeq	r7, r1, r8, lsr #21
   17bb4:	andeq	r7, r1, r8, lsr #21
   17bb8:	andeq	r7, r1, r8, lsr #21
   17bbc:	andeq	r7, r1, r8, lsr #21
   17bc0:	andeq	r7, r1, r8, lsr #21
   17bc4:	andeq	r7, r1, r8, lsr #21
   17bc8:	andeq	r7, r1, r8, lsr #21
   17bcc:	andeq	r7, r1, r8, lsr #21
   17bd0:	andeq	r7, r1, r8, lsr #21
   17bd4:	andeq	r7, r1, r8, lsr #21
   17bd8:	andeq	r7, r1, r8, lsr #21
   17bdc:	andeq	r7, r1, r8, lsr #21
   17be0:	ldrdeq	r7, [r1], -r8
   17be4:			; <UNDEFINED> instruction: 0x00017db8
   17be8:			; <UNDEFINED> instruction: 0x00017db8
   17bec:	andeq	r7, r1, r8, lsr #27
   17bf0:			; <UNDEFINED> instruction: 0x00017db8
   17bf4:	strdeq	r7, [r1], -r4
   17bf8:			; <UNDEFINED> instruction: 0x00017db8
   17bfc:	andeq	r7, r1, r8, ror #15
   17c00:			; <UNDEFINED> instruction: 0x00017db8
   17c04:			; <UNDEFINED> instruction: 0x00017db8
   17c08:			; <UNDEFINED> instruction: 0x00017db8
   17c0c:	strdeq	r7, [r1], -r4
   17c10:	strdeq	r7, [r1], -r4
   17c14:	strdeq	r7, [r1], -r4
   17c18:	strdeq	r7, [r1], -r4
   17c1c:	strdeq	r7, [r1], -r4
   17c20:	strdeq	r7, [r1], -r4
   17c24:	strdeq	r7, [r1], -r4
   17c28:	strdeq	r7, [r1], -r4
   17c2c:	strdeq	r7, [r1], -r4
   17c30:	strdeq	r7, [r1], -r4
   17c34:	strdeq	r7, [r1], -r4
   17c38:	strdeq	r7, [r1], -r4
   17c3c:	strdeq	r7, [r1], -r4
   17c40:	strdeq	r7, [r1], -r4
   17c44:	strdeq	r7, [r1], -r4
   17c48:	strdeq	r7, [r1], -r4
   17c4c:			; <UNDEFINED> instruction: 0x00017db8
   17c50:			; <UNDEFINED> instruction: 0x00017db8
   17c54:			; <UNDEFINED> instruction: 0x00017db8
   17c58:			; <UNDEFINED> instruction: 0x00017db8
   17c5c:			; <UNDEFINED> instruction: 0x000177bc
   17c60:	andeq	r7, r1, r8, lsr #21
   17c64:	strdeq	r7, [r1], -r4
   17c68:	strdeq	r7, [r1], -r4
   17c6c:	strdeq	r7, [r1], -r4
   17c70:	strdeq	r7, [r1], -r4
   17c74:	strdeq	r7, [r1], -r4
   17c78:	strdeq	r7, [r1], -r4
   17c7c:	strdeq	r7, [r1], -r4
   17c80:	strdeq	r7, [r1], -r4
   17c84:	strdeq	r7, [r1], -r4
   17c88:	strdeq	r7, [r1], -r4
   17c8c:	strdeq	r7, [r1], -r4
   17c90:	strdeq	r7, [r1], -r4
   17c94:	strdeq	r7, [r1], -r4
   17c98:	strdeq	r7, [r1], -r4
   17c9c:	strdeq	r7, [r1], -r4
   17ca0:	strdeq	r7, [r1], -r4
   17ca4:	strdeq	r7, [r1], -r4
   17ca8:	strdeq	r7, [r1], -r4
   17cac:	strdeq	r7, [r1], -r4
   17cb0:	strdeq	r7, [r1], -r4
   17cb4:	strdeq	r7, [r1], -r4
   17cb8:	strdeq	r7, [r1], -r4
   17cbc:	strdeq	r7, [r1], -r4
   17cc0:	strdeq	r7, [r1], -r4
   17cc4:	strdeq	r7, [r1], -r4
   17cc8:	strdeq	r7, [r1], -r4
   17ccc:			; <UNDEFINED> instruction: 0x00017db8
   17cd0:	andeq	r7, r1, r4, ror #14
   17cd4:	strdeq	r7, [r1], -r4
   17cd8:			; <UNDEFINED> instruction: 0x00017db8
   17cdc:	strdeq	r7, [r1], -r4
   17ce0:			; <UNDEFINED> instruction: 0x00017db8
   17ce4:	strdeq	r7, [r1], -r4
   17ce8:	strdeq	r7, [r1], -r4
   17cec:	strdeq	r7, [r1], -r4
   17cf0:	strdeq	r7, [r1], -r4
   17cf4:	strdeq	r7, [r1], -r4
   17cf8:	strdeq	r7, [r1], -r4
   17cfc:	strdeq	r7, [r1], -r4
   17d00:	strdeq	r7, [r1], -r4
   17d04:	strdeq	r7, [r1], -r4
   17d08:	strdeq	r7, [r1], -r4
   17d0c:	strdeq	r7, [r1], -r4
   17d10:	strdeq	r7, [r1], -r4
   17d14:	strdeq	r7, [r1], -r4
   17d18:	strdeq	r7, [r1], -r4
   17d1c:	strdeq	r7, [r1], -r4
   17d20:	strdeq	r7, [r1], -r4
   17d24:	strdeq	r7, [r1], -r4
   17d28:	strdeq	r7, [r1], -r4
   17d2c:	strdeq	r7, [r1], -r4
   17d30:	strdeq	r7, [r1], -r4
   17d34:	strdeq	r7, [r1], -r4
   17d38:	strdeq	r7, [r1], -r4
   17d3c:	strdeq	r7, [r1], -r4
   17d40:	strdeq	r7, [r1], -r4
   17d44:	strdeq	r7, [r1], -r4
   17d48:	strdeq	r7, [r1], -r4
   17d4c:	andeq	r7, r1, r8, lsl #11
   17d50:			; <UNDEFINED> instruction: 0x00017db8
   17d54:	andeq	r7, r1, r8, lsl #11
   17d58:	andeq	r7, r1, r8, lsr #27
   17d5c:	mov	r3, #114	; 0x72
   17d60:	b	178c4 <__assert_fail@plt+0x63e8>
   17d64:	mov	r3, #102	; 0x66
   17d68:	b	17794 <__assert_fail@plt+0x62b8>
   17d6c:	mov	r3, #110	; 0x6e
   17d70:	b	178c4 <__assert_fail@plt+0x63e8>
   17d74:	mov	r3, #98	; 0x62
   17d78:	b	17794 <__assert_fail@plt+0x62b8>
   17d7c:	mov	r3, #97	; 0x61
   17d80:	b	17794 <__assert_fail@plt+0x62b8>
   17d84:	ldr	r3, [sp, #40]	; 0x28
   17d88:	cmp	r3, #0
   17d8c:	bne	1799c <__assert_fail@plt+0x64c0>
   17d90:	ldr	r3, [sp, #156]	; 0x9c
   17d94:	tst	r3, #1
   17d98:	addne	r9, r9, #1
   17d9c:	bne	17130 <__assert_fail@plt+0x5c54>
   17da0:	ldr	r7, [sp, #40]	; 0x28
   17da4:	b	177a0 <__assert_fail@plt+0x62c4>
   17da8:	sub	r3, fp, #2
   17dac:	clz	r3, r3
   17db0:	lsr	r3, r3, #5
   17db4:	b	175b4 <__assert_fail@plt+0x60d8>
   17db8:	sub	r3, fp, #2
   17dbc:	mov	r6, #0
   17dc0:	clz	r3, r3
   17dc4:	lsr	r3, r3, #5
   17dc8:	ldr	r2, [sp, #44]	; 0x2c
   17dcc:	tst	r2, r3
   17dd0:	beq	175c0 <__assert_fail@plt+0x60e4>
   17dd4:	b	178dc <__assert_fail@plt+0x6400>
   17dd8:	sub	r3, fp, #2
   17ddc:	clz	r3, r3
   17de0:	lsr	r3, r3, #5
   17de4:	b	17dc8 <__assert_fail@plt+0x68ec>
   17de8:	ldr	r3, [sp, #52]	; 0x34
   17dec:	ldrb	r5, [r3]
   17df0:	cmp	r5, #126	; 0x7e
   17df4:	ldrls	pc, [pc, r5, lsl #2]
   17df8:	b	17aa4 <__assert_fail@plt+0x65c8>
   17dfc:	muleq	r1, ip, r9
   17e00:	andeq	r7, r1, r4, lsr #21
   17e04:	andeq	r7, r1, r4, lsr #21
   17e08:	andeq	r7, r1, r4, lsr #21
   17e0c:	andeq	r7, r1, r4, lsr #21
   17e10:	andeq	r7, r1, r4, lsr #21
   17e14:	andeq	r7, r1, r4, lsr #21
   17e18:	andeq	r7, r1, r0, lsl #19
   17e1c:	andeq	r7, r1, r8, ror r9
   17e20:	andeq	r8, r1, r4, lsr r0
   17e24:	andeq	r7, r1, ip, ror #18
   17e28:	andeq	r8, r1, r8, lsr #32
   17e2c:	andeq	r7, r1, r8, asr #18
   17e30:	muleq	r1, r4, r9
   17e34:	andeq	r7, r1, r4, lsr #21
   17e38:	andeq	r7, r1, r4, lsr #21
   17e3c:	andeq	r7, r1, r4, lsr #21
   17e40:	andeq	r7, r1, r4, lsr #21
   17e44:	andeq	r7, r1, r4, lsr #21
   17e48:	andeq	r7, r1, r4, lsr #21
   17e4c:	andeq	r7, r1, r4, lsr #21
   17e50:	andeq	r7, r1, r4, lsr #21
   17e54:	andeq	r7, r1, r4, lsr #21
   17e58:	andeq	r7, r1, r4, lsr #21
   17e5c:	andeq	r7, r1, r4, lsr #21
   17e60:	andeq	r7, r1, r4, lsr #21
   17e64:	andeq	r7, r1, r4, lsr #21
   17e68:	andeq	r7, r1, r4, lsr #21
   17e6c:	andeq	r7, r1, r4, lsr #21
   17e70:	andeq	r7, r1, r4, lsr #21
   17e74:	andeq	r7, r1, r4, lsr #21
   17e78:	andeq	r7, r1, r4, lsr #21
   17e7c:	andeq	r8, r1, r0, lsr #32
   17e80:	andeq	r7, r1, r8, lsl #19
   17e84:	andeq	r7, r1, r8, lsl #19
   17e88:	andeq	r8, r1, r4
   17e8c:	andeq	r7, r1, r8, lsl #19
   17e90:	strdeq	r7, [r1], -r8
   17e94:	andeq	r7, r1, r8, lsl #19
   17e98:	andeq	r7, r1, r4, ror #15
   17e9c:	andeq	r7, r1, r8, lsl #19
   17ea0:	andeq	r7, r1, r8, lsl #19
   17ea4:	andeq	r7, r1, r8, lsl #19
   17ea8:	strdeq	r7, [r1], -r8
   17eac:	strdeq	r7, [r1], -r8
   17eb0:	strdeq	r7, [r1], -r8
   17eb4:	strdeq	r7, [r1], -r8
   17eb8:	strdeq	r7, [r1], -r8
   17ebc:	strdeq	r7, [r1], -r8
   17ec0:	strdeq	r7, [r1], -r8
   17ec4:	strdeq	r7, [r1], -r8
   17ec8:	strdeq	r7, [r1], -r8
   17ecc:	strdeq	r7, [r1], -r8
   17ed0:	strdeq	r7, [r1], -r8
   17ed4:	strdeq	r7, [r1], -r8
   17ed8:	strdeq	r7, [r1], -r8
   17edc:	strdeq	r7, [r1], -r8
   17ee0:	strdeq	r7, [r1], -r8
   17ee4:	strdeq	r7, [r1], -r8
   17ee8:	andeq	r7, r1, r8, lsl #19
   17eec:	andeq	r7, r1, r8, lsl #19
   17ef0:	andeq	r7, r1, r8, lsl #19
   17ef4:	andeq	r7, r1, r8, lsl #19
   17ef8:			; <UNDEFINED> instruction: 0x000177b8
   17efc:	andeq	r7, r1, r4, lsr #21
   17f00:	strdeq	r7, [r1], -r8
   17f04:	strdeq	r7, [r1], -r8
   17f08:	strdeq	r7, [r1], -r8
   17f0c:	strdeq	r7, [r1], -r8
   17f10:	strdeq	r7, [r1], -r8
   17f14:	strdeq	r7, [r1], -r8
   17f18:	strdeq	r7, [r1], -r8
   17f1c:	strdeq	r7, [r1], -r8
   17f20:	strdeq	r7, [r1], -r8
   17f24:	strdeq	r7, [r1], -r8
   17f28:	strdeq	r7, [r1], -r8
   17f2c:	strdeq	r7, [r1], -r8
   17f30:	strdeq	r7, [r1], -r8
   17f34:	strdeq	r7, [r1], -r8
   17f38:	strdeq	r7, [r1], -r8
   17f3c:	strdeq	r7, [r1], -r8
   17f40:	strdeq	r7, [r1], -r8
   17f44:	strdeq	r7, [r1], -r8
   17f48:	strdeq	r7, [r1], -r8
   17f4c:	strdeq	r7, [r1], -r8
   17f50:	strdeq	r7, [r1], -r8
   17f54:	strdeq	r7, [r1], -r8
   17f58:	strdeq	r7, [r1], -r8
   17f5c:	strdeq	r7, [r1], -r8
   17f60:	strdeq	r7, [r1], -r8
   17f64:	strdeq	r7, [r1], -r8
   17f68:	andeq	r7, r1, r8, lsl #19
   17f6c:	andeq	r7, r1, r0, ror #14
   17f70:	strdeq	r7, [r1], -r8
   17f74:	andeq	r7, r1, r8, lsl #19
   17f78:	strdeq	r7, [r1], -r8
   17f7c:	andeq	r7, r1, r8, lsl #19
   17f80:	strdeq	r7, [r1], -r8
   17f84:	strdeq	r7, [r1], -r8
   17f88:	strdeq	r7, [r1], -r8
   17f8c:	strdeq	r7, [r1], -r8
   17f90:	strdeq	r7, [r1], -r8
   17f94:	strdeq	r7, [r1], -r8
   17f98:	strdeq	r7, [r1], -r8
   17f9c:	strdeq	r7, [r1], -r8
   17fa0:	strdeq	r7, [r1], -r8
   17fa4:	strdeq	r7, [r1], -r8
   17fa8:	strdeq	r7, [r1], -r8
   17fac:	strdeq	r7, [r1], -r8
   17fb0:	strdeq	r7, [r1], -r8
   17fb4:	strdeq	r7, [r1], -r8
   17fb8:	strdeq	r7, [r1], -r8
   17fbc:	strdeq	r7, [r1], -r8
   17fc0:	strdeq	r7, [r1], -r8
   17fc4:	strdeq	r7, [r1], -r8
   17fc8:	strdeq	r7, [r1], -r8
   17fcc:	strdeq	r7, [r1], -r8
   17fd0:	strdeq	r7, [r1], -r8
   17fd4:	strdeq	r7, [r1], -r8
   17fd8:	strdeq	r7, [r1], -r8
   17fdc:	strdeq	r7, [r1], -r8
   17fe0:	strdeq	r7, [r1], -r8
   17fe4:	strdeq	r7, [r1], -r8
   17fe8:	andeq	r7, r1, r4, lsl #11
   17fec:	andeq	r7, r1, r8, lsl #19
   17ff0:	andeq	r7, r1, r4, lsl #11
   17ff4:	andeq	r8, r1, r4
   17ff8:	mov	r6, r7
   17ffc:	mov	r7, #0
   18000:	b	177b0 <__assert_fail@plt+0x62d4>
   18004:	cmp	r9, #0
   18008:	mov	r2, #0
   1800c:	beq	17a74 <__assert_fail@plt+0x6598>
   18010:	mov	r6, #0
   18014:	mov	r7, r2
   18018:	mov	r3, r6
   1801c:	b	175d0 <__assert_fail@plt+0x60f4>
   18020:	mov	r2, #0
   18024:	b	17a88 <__assert_fail@plt+0x65ac>
   18028:	mov	r7, #0
   1802c:	mov	r3, #118	; 0x76
   18030:	b	17794 <__assert_fail@plt+0x62b8>
   18034:	mov	r7, #0
   18038:	mov	r3, #116	; 0x74
   1803c:	b	178c4 <__assert_fail@plt+0x63e8>
   18040:	ldr	r3, [sp, #44]	; 0x2c
   18044:	b	175f8 <__assert_fail@plt+0x611c>
   18048:	ldr	r3, [sp, #44]	; 0x2c
   1804c:	cmp	r3, #0
   18050:	bne	184c0 <__assert_fail@plt+0x6fe4>
   18054:	add	r9, r9, #1
   18058:	mov	r6, #0
   1805c:	ldr	r3, [sp, #48]	; 0x30
   18060:	mov	r5, #92	; 0x5c
   18064:	b	17884 <__assert_fail@plt+0x63a8>
   18068:	ldr	r3, [sp, #32]
   1806c:	ldrb	r2, [r3, #1]
   18070:	adds	r2, r2, #0
   18074:	movne	r2, #1
   18078:	b	175a0 <__assert_fail@plt+0x60c4>
   1807c:	ldr	r3, [sp, #156]	; 0x9c
   18080:	ands	r3, r3, #4
   18084:	beq	180ac <__assert_fail@plt+0x6bd0>
   18088:	ldr	r2, [sp, #28]
   1808c:	add	r3, r9, #2
   18090:	cmp	r3, r2
   18094:	bcs	180a8 <__assert_fail@plt+0x6bcc>
   18098:	ldr	r2, [sp, #52]	; 0x34
   1809c:	ldrb	r5, [r2, #1]
   180a0:	cmp	r5, #63	; 0x3f
   180a4:	beq	18524 <__assert_fail@plt+0x7048>
   180a8:	mov	r3, #0
   180ac:	mov	r5, #63	; 0x3f
   180b0:	mov	r6, r3
   180b4:	b	175c0 <__assert_fail@plt+0x60e4>
   180b8:	ldr	r3, [sp, #44]	; 0x2c
   180bc:	cmp	r3, #0
   180c0:	bne	184c0 <__assert_fail@plt+0x6fe4>
   180c4:	mov	r6, r3
   180c8:	mov	r5, #63	; 0x3f
   180cc:	b	175f8 <__assert_fail@plt+0x611c>
   180d0:	ldr	r1, [sp, #28]
   180d4:	mov	r2, #0
   180d8:	mov	r3, #0
   180dc:	strd	r2, [sp, #104]	; 0x68
   180e0:	cmn	r1, #1
   180e4:	bne	180f4 <__assert_fail@plt+0x6c18>
   180e8:	ldr	r0, [sp, #32]
   180ec:	bl	11380 <strlen@plt>
   180f0:	str	r0, [sp, #28]
   180f4:	str	r8, [sp, #76]	; 0x4c
   180f8:	mov	r3, #0
   180fc:	str	sl, [sp, #80]	; 0x50
   18100:	ldr	sl, [sp, #32]
   18104:	str	r5, [sp, #84]	; 0x54
   18108:	mov	r5, r3
   1810c:	ldr	r8, [sp, #44]	; 0x2c
   18110:	str	r7, [sp, #88]	; 0x58
   18114:	str	r4, [sp, #92]	; 0x5c
   18118:	ldr	r2, [sp, #28]
   1811c:	add	r4, r9, r5
   18120:	add	r3, sp, #104	; 0x68
   18124:	add	r7, sl, r4
   18128:	add	r0, sp, #100	; 0x64
   1812c:	mov	r1, r7
   18130:	sub	r2, r2, r4
   18134:	bl	1ad5c <__assert_fail@plt+0x9880>
   18138:	subs	r1, r0, #0
   1813c:	beq	18188 <__assert_fail@plt+0x6cac>
   18140:	cmn	r1, #1
   18144:	beq	18500 <__assert_fail@plt+0x7024>
   18148:	cmn	r1, #2
   1814c:	beq	18620 <__assert_fail@plt+0x7144>
   18150:	cmp	fp, #2
   18154:	movne	r3, #0
   18158:	andeq	r3, r8, #1
   1815c:	cmp	r3, #0
   18160:	bne	182ec <__assert_fail@plt+0x6e10>
   18164:	ldr	r0, [sp, #100]	; 0x64
   18168:	add	r5, r5, r1
   1816c:	bl	1126c <iswprint@plt>
   18170:	cmp	r0, #0
   18174:	add	r0, sp, #104	; 0x68
   18178:	moveq	r6, #0
   1817c:	bl	11200 <mbsinit@plt>
   18180:	cmp	r0, #0
   18184:	beq	18118 <__assert_fail@plt+0x6c3c>
   18188:	ldr	r3, [sp, #40]	; 0x28
   1818c:	mov	ip, r5
   18190:	eor	r2, r6, #1
   18194:	ldr	r8, [sp, #76]	; 0x4c
   18198:	ldr	sl, [sp, #80]	; 0x50
   1819c:	and	r2, r2, r3
   181a0:	ldr	r5, [sp, #84]	; 0x54
   181a4:	ldr	r7, [sp, #88]	; 0x58
   181a8:	ldr	r4, [sp, #92]	; 0x5c
   181ac:	cmp	ip, #1
   181b0:	bls	17aec <__assert_fail@plt+0x6610>
   181b4:	add	r1, ip, r9
   181b8:	mov	r0, #39	; 0x27
   181bc:	ldr	lr, [sp, #52]	; 0x34
   181c0:	mov	ip, #0
   181c4:	str	r6, [sp, #52]	; 0x34
   181c8:	ldr	r6, [sp, #48]	; 0x30
   181cc:	b	18288 <__assert_fail@plt+0x6dac>
   181d0:	ldr	ip, [sp, #44]	; 0x2c
   181d4:	sub	r3, fp, #2
   181d8:	clz	r3, r3
   181dc:	lsr	r3, r3, #5
   181e0:	cmp	ip, #0
   181e4:	bne	183f8 <__assert_fail@plt+0x6f1c>
   181e8:	eor	ip, r6, #1
   181ec:	ands	r3, r3, ip
   181f0:	beq	18220 <__assert_fail@plt+0x6d44>
   181f4:	cmp	sl, r4
   181f8:	add	ip, r4, #1
   181fc:	strbhi	r0, [r8, r4]
   18200:	cmp	sl, ip
   18204:	movhi	r6, #36	; 0x24
   18208:	strbhi	r6, [r8, ip]
   1820c:	add	ip, r4, #2
   18210:	mov	r6, r3
   18214:	cmp	sl, ip
   18218:	add	r4, r4, #3
   1821c:	strbhi	r0, [r8, ip]
   18220:	cmp	sl, r4
   18224:	movhi	r3, #92	; 0x5c
   18228:	strbhi	r3, [r8, r4]
   1822c:	add	r3, r4, #1
   18230:	cmp	sl, r3
   18234:	bls	18244 <__assert_fail@plt+0x6d68>
   18238:	lsr	ip, r5, #6
   1823c:	add	ip, ip, #48	; 0x30
   18240:	strb	ip, [r8, r3]
   18244:	add	r3, r4, #2
   18248:	cmp	sl, r3
   1824c:	bls	1825c <__assert_fail@plt+0x6d80>
   18250:	ubfx	ip, r5, #3, #3
   18254:	add	ip, ip, #48	; 0x30
   18258:	strb	ip, [r8, r3]
   1825c:	add	r9, r9, #1
   18260:	and	r5, r5, #7
   18264:	cmp	r9, r1
   18268:	add	r5, r5, #48	; 0x30
   1826c:	add	r4, r4, #3
   18270:	bcs	18424 <__assert_fail@plt+0x6f48>
   18274:	mov	ip, r2
   18278:	cmp	sl, r4
   1827c:	strbhi	r5, [r8, r4]
   18280:	add	r4, r4, #1
   18284:	ldrb	r5, [lr, #1]!
   18288:	cmp	r2, #0
   1828c:	bne	181d0 <__assert_fail@plt+0x6cf4>
   18290:	eor	r3, ip, #1
   18294:	cmp	r7, #0
   18298:	and	r3, r3, r6
   1829c:	uxtb	r3, r3
   182a0:	beq	182b4 <__assert_fail@plt+0x6dd8>
   182a4:	cmp	sl, r4
   182a8:	movhi	r7, #92	; 0x5c
   182ac:	strbhi	r7, [r8, r4]
   182b0:	add	r4, r4, #1
   182b4:	add	r9, r9, #1
   182b8:	cmp	r9, r1
   182bc:	bcs	1840c <__assert_fail@plt+0x6f30>
   182c0:	cmp	r3, #0
   182c4:	beq	18444 <__assert_fail@plt+0x6f68>
   182c8:	cmp	sl, r4
   182cc:	add	r3, r4, #1
   182d0:	mov	r7, #0
   182d4:	strbhi	r0, [r8, r4]
   182d8:	cmp	sl, r3
   182dc:	add	r4, r4, #2
   182e0:	mov	r6, r7
   182e4:	strbhi	r0, [r8, r3]
   182e8:	b	18278 <__assert_fail@plt+0x6d9c>
   182ec:	cmp	r1, #1
   182f0:	beq	18164 <__assert_fail@plt+0x6c88>
   182f4:	add	r2, r4, #1
   182f8:	add	r3, sl, r1
   182fc:	add	r2, sl, r2
   18300:	add	r4, r3, r4
   18304:	ldrb	r3, [r2], #1
   18308:	sub	r3, r3, #91	; 0x5b
   1830c:	cmp	r3, #33	; 0x21
   18310:	ldrls	pc, [pc, r3, lsl #2]
   18314:	b	183a0 <__assert_fail@plt+0x6ec4>
   18318:	andeq	r8, r1, ip, lsr #7
   1831c:	andeq	r8, r1, ip, lsr #7
   18320:	andeq	r8, r1, r0, lsr #7
   18324:	andeq	r8, r1, ip, lsr #7
   18328:	andeq	r8, r1, r0, lsr #7
   1832c:	andeq	r8, r1, ip, lsr #7
   18330:	andeq	r8, r1, r0, lsr #7
   18334:	andeq	r8, r1, r0, lsr #7
   18338:	andeq	r8, r1, r0, lsr #7
   1833c:	andeq	r8, r1, r0, lsr #7
   18340:	andeq	r8, r1, r0, lsr #7
   18344:	andeq	r8, r1, r0, lsr #7
   18348:	andeq	r8, r1, r0, lsr #7
   1834c:	andeq	r8, r1, r0, lsr #7
   18350:	andeq	r8, r1, r0, lsr #7
   18354:	andeq	r8, r1, r0, lsr #7
   18358:	andeq	r8, r1, r0, lsr #7
   1835c:	andeq	r8, r1, r0, lsr #7
   18360:	andeq	r8, r1, r0, lsr #7
   18364:	andeq	r8, r1, r0, lsr #7
   18368:	andeq	r8, r1, r0, lsr #7
   1836c:	andeq	r8, r1, r0, lsr #7
   18370:	andeq	r8, r1, r0, lsr #7
   18374:	andeq	r8, r1, r0, lsr #7
   18378:	andeq	r8, r1, r0, lsr #7
   1837c:	andeq	r8, r1, r0, lsr #7
   18380:	andeq	r8, r1, r0, lsr #7
   18384:	andeq	r8, r1, r0, lsr #7
   18388:	andeq	r8, r1, r0, lsr #7
   1838c:	andeq	r8, r1, r0, lsr #7
   18390:	andeq	r8, r1, r0, lsr #7
   18394:	andeq	r8, r1, r0, lsr #7
   18398:	andeq	r8, r1, r0, lsr #7
   1839c:	andeq	r8, r1, ip, lsr #7
   183a0:	cmp	r4, r2
   183a4:	bne	18304 <__assert_fail@plt+0x6e28>
   183a8:	b	18164 <__assert_fail@plt+0x6c88>
   183ac:	mov	r8, #2
   183b0:	ldr	fp, [sp, #76]	; 0x4c
   183b4:	ldr	sl, [sp, #80]	; 0x50
   183b8:	b	178e4 <__assert_fail@plt+0x6408>
   183bc:	ldr	r2, [sp, #40]	; 0x28
   183c0:	str	fp, [sp, #152]	; 0x98
   183c4:	mov	fp, r8
   183c8:	ldr	r8, [sp, #152]	; 0x98
   183cc:	and	r2, r2, r3
   183d0:	str	r2, [sp, #40]	; 0x28
   183d4:	b	178e4 <__assert_fail@plt+0x6408>
   183d8:	cmp	sl, r4
   183dc:	movls	r0, r4
   183e0:	bls	17a14 <__assert_fail@plt+0x6538>
   183e4:	ldr	r3, [sp, #48]	; 0x30
   183e8:	b	17a04 <__assert_fail@plt+0x6528>
   183ec:	str	sl, [sp, #72]	; 0x48
   183f0:	ldr	sl, [sp, #44]	; 0x2c
   183f4:	b	17854 <__assert_fail@plt+0x6378>
   183f8:	str	r3, [sp, #40]	; 0x28
   183fc:	str	fp, [sp, #152]	; 0x98
   18400:	mov	fp, r8
   18404:	ldr	r8, [sp, #152]	; 0x98
   18408:	b	178e4 <__assert_fail@plt+0x6408>
   1840c:	str	r6, [sp, #48]	; 0x30
   18410:	ldr	r6, [sp, #52]	; 0x34
   18414:	b	17884 <__assert_fail@plt+0x63a8>
   18418:	mov	r6, #0
   1841c:	ldr	r2, [sp, #40]	; 0x28
   18420:	b	181b4 <__assert_fail@plt+0x6cd8>
   18424:	str	r6, [sp, #48]	; 0x30
   18428:	ldr	r6, [sp, #52]	; 0x34
   1842c:	b	17670 <__assert_fail@plt+0x6194>
   18430:	add	r4, r4, #4
   18434:	mov	r6, #0
   18438:	str	r3, [sp, #48]	; 0x30
   1843c:	mov	r5, #48	; 0x30
   18440:	b	175f8 <__assert_fail@plt+0x611c>
   18444:	mov	r7, r3
   18448:	b	18278 <__assert_fail@plt+0x6d9c>
   1844c:	mov	r3, #1
   18450:	movw	r2, #53808	; 0xd230
   18454:	movt	r2, #1
   18458:	mov	r4, r3
   1845c:	str	r3, [sp, #36]	; 0x24
   18460:	str	r3, [sp, #40]	; 0x28
   18464:	str	sl, [sp, #44]	; 0x2c
   18468:	str	sl, [sp, #48]	; 0x30
   1846c:	str	r3, [sp, #56]	; 0x38
   18470:	str	r2, [sp, #60]	; 0x3c
   18474:	str	sl, [sp, #68]	; 0x44
   18478:	str	sl, [sp, #72]	; 0x48
   1847c:	b	17120 <__assert_fail@plt+0x5c44>
   18480:	mov	r3, r6
   18484:	mov	r5, #48	; 0x30
   18488:	mov	r6, #0
   1848c:	b	175f8 <__assert_fail@plt+0x611c>
   18490:	mov	r5, r3
   18494:	b	17970 <__assert_fail@plt+0x6494>
   18498:	cmp	sl, r4
   1849c:	mov	r5, #48	; 0x30
   184a0:	movhi	r3, #48	; 0x30
   184a4:	strbhi	r3, [r8, r4]
   184a8:	add	r3, r0, #2
   184ac:	add	r4, r0, #3
   184b0:	cmp	sl, r3
   184b4:	movhi	r1, #48	; 0x30
   184b8:	strbhi	r1, [r8, r3]
   184bc:	b	17a48 <__assert_fail@plt+0x656c>
   184c0:	str	fp, [sp, #152]	; 0x98
   184c4:	mov	fp, r8
   184c8:	ldr	r8, [sp, #152]	; 0x98
   184cc:	b	178e4 <__assert_fail@plt+0x6408>
   184d0:	ldr	r3, [sp, #164]	; 0xa4
   184d4:	ldrb	r3, [r3]
   184d8:	cmp	r3, #0
   184dc:	beq	170f0 <__assert_fail@plt+0x5c14>
   184e0:	ldr	r2, [sp, #164]	; 0xa4
   184e4:	cmp	sl, r4
   184e8:	strbhi	r3, [fp, r4]
   184ec:	add	r4, r4, #1
   184f0:	ldrb	r3, [r2, #1]!
   184f4:	cmp	r3, #0
   184f8:	bne	184e4 <__assert_fail@plt+0x7008>
   184fc:	b	170f0 <__assert_fail@plt+0x5c14>
   18500:	mov	ip, r5
   18504:	mov	r6, #0
   18508:	ldr	r2, [sp, #40]	; 0x28
   1850c:	ldr	r8, [sp, #76]	; 0x4c
   18510:	ldr	sl, [sp, #80]	; 0x50
   18514:	ldr	r5, [sp, #84]	; 0x54
   18518:	ldr	r7, [sp, #88]	; 0x58
   1851c:	ldr	r4, [sp, #92]	; 0x5c
   18520:	b	181ac <__assert_fail@plt+0x6cd0>
   18524:	ldr	r2, [sp, #32]
   18528:	ldrb	r1, [r2, r3]
   1852c:	sub	r2, r1, #33	; 0x21
   18530:	cmp	r2, #29
   18534:	ldrls	pc, [pc, r2, lsl #2]
   18538:	b	18614 <__assert_fail@plt+0x7138>
   1853c:			; <UNDEFINED> instruction: 0x000185b4
   18540:	andeq	r8, r1, r4, lsl r6
   18544:	andeq	r8, r1, r4, lsl r6
   18548:	andeq	r8, r1, r4, lsl r6
   1854c:	andeq	r8, r1, r4, lsl r6
   18550:	andeq	r8, r1, r4, lsl r6
   18554:			; <UNDEFINED> instruction: 0x000185b4
   18558:			; <UNDEFINED> instruction: 0x000185b4
   1855c:			; <UNDEFINED> instruction: 0x000185b4
   18560:	andeq	r8, r1, r4, lsl r6
   18564:	andeq	r8, r1, r4, lsl r6
   18568:	andeq	r8, r1, r4, lsl r6
   1856c:			; <UNDEFINED> instruction: 0x000185b4
   18570:	andeq	r8, r1, r4, lsl r6
   18574:			; <UNDEFINED> instruction: 0x000185b4
   18578:	andeq	r8, r1, r4, lsl r6
   1857c:	andeq	r8, r1, r4, lsl r6
   18580:	andeq	r8, r1, r4, lsl r6
   18584:	andeq	r8, r1, r4, lsl r6
   18588:	andeq	r8, r1, r4, lsl r6
   1858c:	andeq	r8, r1, r4, lsl r6
   18590:	andeq	r8, r1, r4, lsl r6
   18594:	andeq	r8, r1, r4, lsl r6
   18598:	andeq	r8, r1, r4, lsl r6
   1859c:	andeq	r8, r1, r4, lsl r6
   185a0:	andeq	r8, r1, r4, lsl r6
   185a4:	andeq	r8, r1, r4, lsl r6
   185a8:			; <UNDEFINED> instruction: 0x000185b4
   185ac:			; <UNDEFINED> instruction: 0x000185b4
   185b0:			; <UNDEFINED> instruction: 0x000185b4
   185b4:	ldr	r2, [sp, #44]	; 0x2c
   185b8:	cmp	r2, #0
   185bc:	bne	18718 <__assert_fail@plt+0x723c>
   185c0:	cmp	sl, r4
   185c4:	mov	r5, r1
   185c8:	movhi	r2, #63	; 0x3f
   185cc:	mov	r9, r3
   185d0:	strbhi	r2, [r8, r4]
   185d4:	add	r2, r4, #1
   185d8:	cmp	sl, r2
   185dc:	movhi	r0, #34	; 0x22
   185e0:	strbhi	r0, [r8, r2]
   185e4:	add	r2, r4, #2
   185e8:	cmp	sl, r2
   185ec:	movhi	r0, #34	; 0x22
   185f0:	strbhi	r0, [r8, r2]
   185f4:	add	r2, r4, #3
   185f8:	add	r4, r4, #4
   185fc:	cmp	sl, r2
   18600:	movhi	r0, #63	; 0x3f
   18604:	strbhi	r0, [r8, r2]
   18608:	mov	r2, #0
   1860c:	mov	r6, r2
   18610:	b	17a48 <__assert_fail@plt+0x656c>
   18614:	mov	r3, #0
   18618:	mov	r6, r3
   1861c:	b	175c0 <__assert_fail@plt+0x60e4>
   18620:	ldr	r0, [sp, #28]
   18624:	mov	r1, r4
   18628:	mov	r2, r7
   1862c:	mov	r3, r5
   18630:	mov	ip, r5
   18634:	ldr	r8, [sp, #76]	; 0x4c
   18638:	ldr	sl, [sp, #80]	; 0x50
   1863c:	cmp	r1, r0
   18640:	ldr	r5, [sp, #84]	; 0x54
   18644:	ldr	r7, [sp, #88]	; 0x58
   18648:	ldr	r4, [sp, #92]	; 0x5c
   1864c:	bcs	18680 <__assert_fail@plt+0x71a4>
   18650:	ldrb	r6, [r2]
   18654:	cmp	r6, #0
   18658:	bne	1866c <__assert_fail@plt+0x7190>
   1865c:	b	187a0 <__assert_fail@plt+0x72c4>
   18660:	ldrb	r6, [r2, #1]!
   18664:	cmp	r6, #0
   18668:	beq	18728 <__assert_fail@plt+0x724c>
   1866c:	add	r3, r3, #1
   18670:	add	r1, r9, r3
   18674:	cmp	r1, r0
   18678:	bcc	18660 <__assert_fail@plt+0x7184>
   1867c:	mov	ip, r3
   18680:	mov	r6, #0
   18684:	ldr	r2, [sp, #40]	; 0x28
   18688:	b	181ac <__assert_fail@plt+0x6cd0>
   1868c:	mov	r3, #1
   18690:	mov	r2, #0
   18694:	mov	r4, r2
   18698:	str	r3, [sp, #36]	; 0x24
   1869c:	str	r3, [sp, #40]	; 0x28
   186a0:	str	r3, [sp, #44]	; 0x2c
   186a4:	str	r2, [sp, #48]	; 0x30
   186a8:	str	r3, [sp, #56]	; 0x38
   186ac:	movw	r3, #53808	; 0xd230
   186b0:	movt	r3, #1
   186b4:	str	r3, [sp, #60]	; 0x3c
   186b8:	str	r2, [sp, #68]	; 0x44
   186bc:	str	r2, [sp, #72]	; 0x48
   186c0:	b	17120 <__assert_fail@plt+0x5c44>
   186c4:	mov	r2, r3
   186c8:	ldr	r3, [sp, #60]	; 0x3c
   186cc:	cmp	r3, #0
   186d0:	moveq	r2, #0
   186d4:	andne	r2, r2, #1
   186d8:	cmp	r2, #0
   186dc:	beq	18708 <__assert_fail@plt+0x722c>
   186e0:	mov	r2, r3
   186e4:	ldrb	r3, [r3]
   186e8:	cmp	r3, #0
   186ec:	beq	18708 <__assert_fail@plt+0x722c>
   186f0:	cmp	sl, r4
   186f4:	strbhi	r3, [fp, r4]
   186f8:	add	r4, r4, #1
   186fc:	ldrb	r3, [r2, #1]!
   18700:	cmp	r3, #0
   18704:	bne	186f0 <__assert_fail@plt+0x7214>
   18708:	cmp	sl, r4
   1870c:	movhi	r3, #0
   18710:	strbhi	r3, [fp, r4]
   18714:	b	17928 <__assert_fail@plt+0x644c>
   18718:	str	fp, [sp, #152]	; 0x98
   1871c:	mov	fp, r8
   18720:	ldr	r8, [sp, #152]	; 0x98
   18724:	b	178f0 <__assert_fail@plt+0x6414>
   18728:	mov	ip, r3
   1872c:	ldr	r2, [sp, #40]	; 0x28
   18730:	b	181ac <__assert_fail@plt+0x6cd0>
   18734:	str	fp, [sp, #152]	; 0x98
   18738:	mov	fp, r8
   1873c:	ldr	r8, [sp, #152]	; 0x98
   18740:	sub	r3, r8, #2
   18744:	clz	r3, r3
   18748:	lsr	r3, r3, #5
   1874c:	str	r3, [sp, #40]	; 0x28
   18750:	b	178e4 <__assert_fail@plt+0x6408>
   18754:	mov	ip, #5
   18758:	ldr	r3, [sp, #28]
   1875c:	str	ip, [sp]
   18760:	ldr	r2, [sp, #156]	; 0x9c
   18764:	ldr	ip, [sp, #164]	; 0xa4
   18768:	ldr	r0, [sp, #160]	; 0xa0
   1876c:	str	r2, [sp, #4]
   18770:	ldr	r2, [sp, #32]
   18774:	ldr	r1, [sp, #72]	; 0x48
   18778:	str	ip, [sp, #12]
   1877c:	ldr	ip, [sp, #168]	; 0xa8
   18780:	str	r0, [sp, #8]
   18784:	mov	r0, fp
   18788:	str	ip, [sp, #16]
   1878c:	bl	17038 <__assert_fail@plt+0x5b5c>
   18790:	mov	r4, r0
   18794:	b	17928 <__assert_fail@plt+0x644c>
   18798:	mov	r8, #2
   1879c:	b	178e4 <__assert_fail@plt+0x6408>
   187a0:	ldr	r2, [sp, #40]	; 0x28
   187a4:	b	181ac <__assert_fail@plt+0x6cd0>
   187a8:	mov	r3, #0
   187ac:	mov	r2, #1
   187b0:	mov	r4, r3
   187b4:	strd	r2, [sp, #36]	; 0x24
   187b8:	strd	r2, [sp, #44]	; 0x2c
   187bc:	str	r2, [sp, #56]	; 0x38
   187c0:	str	r3, [sp, #68]	; 0x44
   187c4:	str	r3, [sp, #72]	; 0x48
   187c8:	movw	r3, #53828	; 0xd244
   187cc:	movt	r3, #1
   187d0:	str	r3, [sp, #60]	; 0x3c
   187d4:	b	17120 <__assert_fail@plt+0x5c44>
   187d8:	mov	r3, #0
   187dc:	mov	r1, #1
   187e0:	mov	r2, r3
   187e4:	str	r1, [sp, #36]	; 0x24
   187e8:	str	r3, [sp, #48]	; 0x30
   187ec:	str	sl, [sp, #72]	; 0x48
   187f0:	b	17728 <__assert_fail@plt+0x624c>
   187f4:	bl	114ac <abort@plt>
   187f8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   187fc:	mov	r4, r0
   18800:	mov	r5, r3
   18804:	strd	r6, [sp, #8]
   18808:	movw	r7, #57728	; 0xe180
   1880c:	movt	r7, #2
   18810:	strd	r8, [sp, #16]
   18814:	strd	sl, [sp, #24]
   18818:	mov	sl, r1
   1881c:	mov	fp, r2
   18820:	str	lr, [sp, #32]
   18824:	sub	sp, sp, #60	; 0x3c
   18828:	bl	113a4 <__errno_location@plt>
   1882c:	mov	r8, r0
   18830:	cmn	r4, #-2147483647	; 0x80000001
   18834:	ldr	r6, [r7]
   18838:	movne	r0, #0
   1883c:	moveq	r0, #1
   18840:	ldr	r3, [r8]
   18844:	orrs	r0, r0, r4, lsr #31
   18848:	str	r3, [sp, #28]
   1884c:	bne	189dc <__assert_fail@plt+0x7500>
   18850:	ldr	r3, [r7, #4]
   18854:	cmp	r3, r4
   18858:	bgt	188b8 <__assert_fail@plt+0x73dc>
   1885c:	add	r1, r7, #8
   18860:	sub	r2, r4, r3
   18864:	str	r3, [sp, #52]	; 0x34
   18868:	cmp	r6, r1
   1886c:	add	r2, r2, #1
   18870:	beq	189b4 <__assert_fail@plt+0x74d8>
   18874:	mov	r1, #8
   18878:	mov	r0, r6
   1887c:	mvn	r3, #-2147483648	; 0x80000000
   18880:	str	r1, [sp]
   18884:	add	r1, sp, #52	; 0x34
   18888:	bl	19948 <__assert_fail@plt+0x846c>
   1888c:	mov	r6, r0
   18890:	str	r0, [r7]
   18894:	ldr	r0, [r7, #4]
   18898:	mov	r1, #0
   1889c:	ldr	r2, [sp, #52]	; 0x34
   188a0:	sub	r2, r2, r0
   188a4:	add	r0, r6, r0, lsl #3
   188a8:	lsl	r2, r2, #3
   188ac:	bl	113d4 <memset@plt>
   188b0:	ldr	r3, [sp, #52]	; 0x34
   188b4:	str	r3, [r7, #4]
   188b8:	ldr	r1, [r5, #4]
   188bc:	add	r0, r6, r4, lsl #3
   188c0:	add	ip, r5, #8
   188c4:	mov	r3, fp
   188c8:	mov	r2, sl
   188cc:	ldr	r7, [r0, #4]
   188d0:	str	r0, [sp, #36]	; 0x24
   188d4:	str	ip, [sp, #40]	; 0x28
   188d8:	orr	r0, r1, #1
   188dc:	ldr	r9, [r6, r4, lsl #3]
   188e0:	str	ip, [sp, #8]
   188e4:	ldr	lr, [r5, #44]	; 0x2c
   188e8:	str	r0, [sp, #4]
   188ec:	ldr	ip, [r5]
   188f0:	mov	r1, r9
   188f4:	str	ip, [sp, #32]
   188f8:	ldr	ip, [r5, #40]	; 0x28
   188fc:	str	ip, [sp, #12]
   18900:	ldr	ip, [sp, #32]
   18904:	str	lr, [sp, #16]
   18908:	str	r0, [sp, #44]	; 0x2c
   1890c:	mov	r0, r7
   18910:	str	ip, [sp]
   18914:	bl	17038 <__assert_fail@plt+0x5b5c>
   18918:	cmp	r9, r0
   1891c:	bhi	1898c <__assert_fail@plt+0x74b0>
   18920:	add	r9, r0, #1
   18924:	movw	r3, #58456	; 0xe458
   18928:	movt	r3, #2
   1892c:	cmp	r7, r3
   18930:	str	r9, [r6, r4, lsl #3]
   18934:	beq	18940 <__assert_fail@plt+0x7464>
   18938:	mov	r0, r7
   1893c:	bl	1acb0 <__assert_fail@plt+0x97d4>
   18940:	mov	r0, r9
   18944:	bl	19798 <__assert_fail@plt+0x82bc>
   18948:	ldr	ip, [r5]
   1894c:	mov	r3, fp
   18950:	mov	r2, sl
   18954:	mov	r1, r9
   18958:	mov	r7, r0
   1895c:	ldr	lr, [sp, #36]	; 0x24
   18960:	ldr	r4, [r5, #40]	; 0x28
   18964:	str	r0, [lr, #4]
   18968:	ldr	lr, [r5, #44]	; 0x2c
   1896c:	str	ip, [sp]
   18970:	ldr	ip, [sp, #44]	; 0x2c
   18974:	str	ip, [sp, #4]
   18978:	ldr	ip, [sp, #40]	; 0x28
   1897c:	str	r4, [sp, #12]
   18980:	str	lr, [sp, #16]
   18984:	str	ip, [sp, #8]
   18988:	bl	17038 <__assert_fail@plt+0x5b5c>
   1898c:	ldr	r3, [sp, #28]
   18990:	mov	r0, r7
   18994:	str	r3, [r8]
   18998:	add	sp, sp, #60	; 0x3c
   1899c:	ldrd	r4, [sp]
   189a0:	ldrd	r6, [sp, #8]
   189a4:	ldrd	r8, [sp, #16]
   189a8:	ldrd	sl, [sp, #24]
   189ac:	add	sp, sp, #32
   189b0:	pop	{pc}		; (ldr pc, [sp], #4)
   189b4:	mov	r1, #8
   189b8:	mvn	r3, #-2147483648	; 0x80000000
   189bc:	str	r1, [sp]
   189c0:	add	r1, sp, #52	; 0x34
   189c4:	bl	19948 <__assert_fail@plt+0x846c>
   189c8:	ldrd	r2, [r7, #8]
   189cc:	mov	r6, r0
   189d0:	str	r0, [r7]
   189d4:	strd	r2, [r0]
   189d8:	b	18894 <__assert_fail@plt+0x73b8>
   189dc:	bl	114ac <abort@plt>
   189e0:	strd	r4, [sp, #-16]!
   189e4:	mov	r5, r0
   189e8:	str	r6, [sp, #8]
   189ec:	str	lr, [sp, #12]
   189f0:	bl	113a4 <__errno_location@plt>
   189f4:	mov	r4, r0
   189f8:	cmp	r5, #0
   189fc:	ldr	r0, [pc, #32]	; 18a24 <__assert_fail@plt+0x7548>
   18a00:	mov	r1, #48	; 0x30
   18a04:	movne	r0, r5
   18a08:	ldr	r6, [r4]
   18a0c:	bl	19ac0 <__assert_fail@plt+0x85e4>
   18a10:	str	r6, [r4]
   18a14:	ldrd	r4, [sp]
   18a18:	ldr	r6, [sp, #8]
   18a1c:	add	sp, sp, #12
   18a20:	pop	{pc}		; (ldr pc, [sp], #4)
   18a24:	andeq	lr, r2, r8, asr r5
   18a28:	ldr	r3, [pc, #12]	; 18a3c <__assert_fail@plt+0x7560>
   18a2c:	cmp	r0, #0
   18a30:	moveq	r0, r3
   18a34:	ldr	r0, [r0]
   18a38:	bx	lr
   18a3c:	andeq	lr, r2, r8, asr r5
   18a40:	ldr	r3, [pc, #12]	; 18a54 <__assert_fail@plt+0x7578>
   18a44:	cmp	r0, #0
   18a48:	moveq	r0, r3
   18a4c:	str	r1, [r0]
   18a50:	bx	lr
   18a54:	andeq	lr, r2, r8, asr r5
   18a58:	ldr	r3, [pc, #52]	; 18a94 <__assert_fail@plt+0x75b8>
   18a5c:	cmp	r0, #0
   18a60:	push	{lr}		; (str lr, [sp, #-4]!)
   18a64:	lsr	lr, r1, #5
   18a68:	and	r1, r1, #31
   18a6c:	moveq	r0, r3
   18a70:	add	r3, r0, #8
   18a74:	ldr	ip, [r3, lr, lsl #2]
   18a78:	lsr	r0, ip, r1
   18a7c:	eor	r2, r2, r0
   18a80:	and	r0, r0, #1
   18a84:	and	r2, r2, #1
   18a88:	eor	r1, ip, r2, lsl r1
   18a8c:	str	r1, [r3, lr, lsl #2]
   18a90:	pop	{pc}		; (ldr pc, [sp], #4)
   18a94:	andeq	lr, r2, r8, asr r5
   18a98:	ldr	r3, [pc, #16]	; 18ab0 <__assert_fail@plt+0x75d4>
   18a9c:	cmp	r0, #0
   18aa0:	movne	r3, r0
   18aa4:	ldr	r0, [r3, #4]
   18aa8:	str	r1, [r3, #4]
   18aac:	bx	lr
   18ab0:	andeq	lr, r2, r8, asr r5
   18ab4:	ldr	r3, [pc, #48]	; 18aec <__assert_fail@plt+0x7610>
   18ab8:	cmp	r0, #0
   18abc:	mov	ip, #10
   18ac0:	moveq	r0, r3
   18ac4:	cmp	r2, #0
   18ac8:	cmpne	r1, #0
   18acc:	str	ip, [r0]
   18ad0:	beq	18ae0 <__assert_fail@plt+0x7604>
   18ad4:	str	r1, [r0, #40]	; 0x28
   18ad8:	str	r2, [r0, #44]	; 0x2c
   18adc:	bx	lr
   18ae0:	str	r4, [sp, #-8]!
   18ae4:	str	lr, [sp, #4]
   18ae8:	bl	114ac <abort@plt>
   18aec:	andeq	lr, r2, r8, asr r5
   18af0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18af4:	strd	r6, [sp, #8]
   18af8:	mov	r7, r0
   18afc:	mov	r6, r1
   18b00:	strd	r8, [sp, #16]
   18b04:	mov	r8, r2
   18b08:	mov	r9, r3
   18b0c:	str	lr, [sp, #24]
   18b10:	sub	sp, sp, #28
   18b14:	ldr	r4, [sp, #56]	; 0x38
   18b18:	ldr	ip, [pc, #104]	; 18b88 <__assert_fail@plt+0x76ac>
   18b1c:	cmp	r4, #0
   18b20:	moveq	r4, ip
   18b24:	bl	113a4 <__errno_location@plt>
   18b28:	ldr	ip, [r4, #44]	; 0x2c
   18b2c:	mov	r5, r0
   18b30:	mov	r1, r6
   18b34:	add	lr, r4, #8
   18b38:	mov	r3, r9
   18b3c:	ldr	r6, [r5]
   18b40:	mov	r2, r8
   18b44:	mov	r0, r7
   18b48:	str	ip, [sp, #16]
   18b4c:	ldr	ip, [r4, #40]	; 0x28
   18b50:	str	lr, [sp, #8]
   18b54:	str	ip, [sp, #12]
   18b58:	ldr	ip, [r4, #4]
   18b5c:	str	ip, [sp, #4]
   18b60:	ldr	ip, [r4]
   18b64:	str	ip, [sp]
   18b68:	bl	17038 <__assert_fail@plt+0x5b5c>
   18b6c:	str	r6, [r5]
   18b70:	add	sp, sp, #28
   18b74:	ldrd	r4, [sp]
   18b78:	ldrd	r6, [sp, #8]
   18b7c:	ldrd	r8, [sp, #16]
   18b80:	add	sp, sp, #24
   18b84:	pop	{pc}		; (ldr pc, [sp], #4)
   18b88:	andeq	lr, r2, r8, asr r5
   18b8c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   18b90:	cmp	r3, #0
   18b94:	ldr	r4, [pc, #220]	; 18c78 <__assert_fail@plt+0x779c>
   18b98:	movne	r4, r3
   18b9c:	strd	r6, [sp, #8]
   18ba0:	mov	r6, r2
   18ba4:	strd	r8, [sp, #16]
   18ba8:	mov	r9, r0
   18bac:	strd	sl, [sp, #24]
   18bb0:	mov	sl, r1
   18bb4:	str	lr, [sp, #32]
   18bb8:	sub	sp, sp, #44	; 0x2c
   18bbc:	bl	113a4 <__errno_location@plt>
   18bc0:	ldr	r5, [r4, #4]
   18bc4:	mov	r7, r0
   18bc8:	mov	r1, #0
   18bcc:	add	r8, r4, #8
   18bd0:	mov	r3, sl
   18bd4:	ldr	ip, [r4, #44]	; 0x2c
   18bd8:	mov	r2, r9
   18bdc:	mov	r0, r1
   18be0:	ldr	lr, [r7]
   18be4:	cmp	r6, r1
   18be8:	orreq	r5, r5, #1
   18bec:	str	ip, [sp, #16]
   18bf0:	ldr	ip, [r4, #40]	; 0x28
   18bf4:	stmib	sp, {r5, r8, ip}
   18bf8:	ldr	ip, [r4]
   18bfc:	str	lr, [sp, #28]
   18c00:	str	ip, [sp]
   18c04:	bl	17038 <__assert_fail@plt+0x5b5c>
   18c08:	add	r1, r0, #1
   18c0c:	mov	fp, r0
   18c10:	mov	r0, r1
   18c14:	str	r1, [sp, #36]	; 0x24
   18c18:	bl	19798 <__assert_fail@plt+0x82bc>
   18c1c:	ldr	ip, [r4, #44]	; 0x2c
   18c20:	mov	r3, sl
   18c24:	mov	r2, r9
   18c28:	ldr	r1, [sp, #36]	; 0x24
   18c2c:	str	ip, [sp, #16]
   18c30:	ldr	ip, [r4, #40]	; 0x28
   18c34:	str	r0, [sp, #32]
   18c38:	stmib	sp, {r5, r8, ip}
   18c3c:	ldr	ip, [r4]
   18c40:	str	ip, [sp]
   18c44:	bl	17038 <__assert_fail@plt+0x5b5c>
   18c48:	ldr	lr, [sp, #28]
   18c4c:	cmp	r6, #0
   18c50:	ldr	r0, [sp, #32]
   18c54:	str	lr, [r7]
   18c58:	strne	fp, [r6]
   18c5c:	add	sp, sp, #44	; 0x2c
   18c60:	ldrd	r4, [sp]
   18c64:	ldrd	r6, [sp, #8]
   18c68:	ldrd	r8, [sp, #16]
   18c6c:	ldrd	sl, [sp, #24]
   18c70:	add	sp, sp, #32
   18c74:	pop	{pc}		; (ldr pc, [sp], #4)
   18c78:	andeq	lr, r2, r8, asr r5
   18c7c:	mov	r3, r2
   18c80:	mov	r2, #0
   18c84:	b	18b8c <__assert_fail@plt+0x76b0>
   18c88:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18c8c:	movw	r5, #57728	; 0xe180
   18c90:	movt	r5, #2
   18c94:	ldr	r3, [r5, #4]
   18c98:	strd	r6, [sp, #8]
   18c9c:	str	r8, [sp, #16]
   18ca0:	str	lr, [sp, #20]
   18ca4:	ldr	r7, [r5]
   18ca8:	cmp	r3, #1
   18cac:	ble	18cd0 <__assert_fail@plt+0x77f4>
   18cb0:	mov	r4, #1
   18cb4:	add	r6, r7, #4
   18cb8:	ldr	r0, [r6, r4, lsl #3]
   18cbc:	add	r4, r4, #1
   18cc0:	bl	1acb0 <__assert_fail@plt+0x97d4>
   18cc4:	ldr	r3, [r5, #4]
   18cc8:	cmp	r3, r4
   18ccc:	bgt	18cb8 <__assert_fail@plt+0x77dc>
   18cd0:	ldr	r0, [r7, #4]
   18cd4:	movw	r4, #58456	; 0xe458
   18cd8:	movt	r4, #2
   18cdc:	cmp	r0, r4
   18ce0:	beq	18cf4 <__assert_fail@plt+0x7818>
   18ce4:	bl	1acb0 <__assert_fail@plt+0x97d4>
   18ce8:	mov	r3, #256	; 0x100
   18cec:	str	r3, [r5, #8]
   18cf0:	str	r4, [r5, #12]
   18cf4:	ldr	r4, [pc, #44]	; 18d28 <__assert_fail@plt+0x784c>
   18cf8:	cmp	r7, r4
   18cfc:	beq	18d0c <__assert_fail@plt+0x7830>
   18d00:	mov	r0, r7
   18d04:	bl	1acb0 <__assert_fail@plt+0x97d4>
   18d08:	str	r4, [r5]
   18d0c:	mov	r3, #1
   18d10:	ldrd	r6, [sp, #8]
   18d14:	str	r3, [r5, #4]
   18d18:	ldrd	r4, [sp]
   18d1c:	ldr	r8, [sp, #16]
   18d20:	add	sp, sp, #20
   18d24:	pop	{pc}		; (ldr pc, [sp], #4)
   18d28:	andeq	lr, r2, r8, lsl #3
   18d2c:	ldr	r3, [pc, #4]	; 18d38 <__assert_fail@plt+0x785c>
   18d30:	mvn	r2, #0
   18d34:	b	187f8 <__assert_fail@plt+0x731c>
   18d38:	andeq	lr, r2, r8, asr r5
   18d3c:	ldr	r3, [pc]	; 18d44 <__assert_fail@plt+0x7868>
   18d40:	b	187f8 <__assert_fail@plt+0x731c>
   18d44:	andeq	lr, r2, r8, asr r5
   18d48:	mov	r1, r0
   18d4c:	ldr	r3, [pc, #8]	; 18d5c <__assert_fail@plt+0x7880>
   18d50:	mvn	r2, #0
   18d54:	mov	r0, #0
   18d58:	b	187f8 <__assert_fail@plt+0x731c>
   18d5c:	andeq	lr, r2, r8, asr r5
   18d60:	mov	r2, r1
   18d64:	ldr	r3, [pc, #8]	; 18d74 <__assert_fail@plt+0x7898>
   18d68:	mov	r1, r0
   18d6c:	mov	r0, #0
   18d70:	b	187f8 <__assert_fail@plt+0x731c>
   18d74:	andeq	lr, r2, r8, asr r5
   18d78:	strd	r4, [sp, #-12]!
   18d7c:	mov	r5, r2
   18d80:	mov	r4, r0
   18d84:	str	lr, [sp, #8]
   18d88:	sub	sp, sp, #52	; 0x34
   18d8c:	mov	r0, sp
   18d90:	bl	16e94 <__assert_fail@plt+0x59b8>
   18d94:	mov	r3, sp
   18d98:	mov	r1, r5
   18d9c:	mov	r0, r4
   18da0:	mvn	r2, #0
   18da4:	bl	187f8 <__assert_fail@plt+0x731c>
   18da8:	add	sp, sp, #52	; 0x34
   18dac:	ldrd	r4, [sp]
   18db0:	add	sp, sp, #8
   18db4:	pop	{pc}		; (ldr pc, [sp], #4)
   18db8:	strd	r4, [sp, #-16]!
   18dbc:	mov	r5, r2
   18dc0:	mov	r4, r0
   18dc4:	str	r6, [sp, #8]
   18dc8:	mov	r6, r3
   18dcc:	str	lr, [sp, #12]
   18dd0:	sub	sp, sp, #48	; 0x30
   18dd4:	mov	r0, sp
   18dd8:	bl	16e94 <__assert_fail@plt+0x59b8>
   18ddc:	mov	r3, sp
   18de0:	mov	r2, r6
   18de4:	mov	r1, r5
   18de8:	mov	r0, r4
   18dec:	bl	187f8 <__assert_fail@plt+0x731c>
   18df0:	add	sp, sp, #48	; 0x30
   18df4:	ldrd	r4, [sp]
   18df8:	ldr	r6, [sp, #8]
   18dfc:	add	sp, sp, #12
   18e00:	pop	{pc}		; (ldr pc, [sp], #4)
   18e04:	mov	r2, r1
   18e08:	mov	r1, r0
   18e0c:	mov	r0, #0
   18e10:	b	18d78 <__assert_fail@plt+0x789c>
   18e14:	mov	r3, r2
   18e18:	mov	r2, r1
   18e1c:	mov	r1, r0
   18e20:	mov	r0, #0
   18e24:	b	18db8 <__assert_fail@plt+0x78dc>
   18e28:	ldr	ip, [pc, #140]	; 18ebc <__assert_fail@plt+0x79e0>
   18e2c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   18e30:	ldrd	r4, [ip]
   18e34:	strd	r6, [sp, #8]
   18e38:	ldrd	r6, [ip, #8]
   18e3c:	strd	r8, [sp, #16]
   18e40:	lsr	r9, r2, #5
   18e44:	str	lr, [sp, #24]
   18e48:	sub	sp, sp, #52	; 0x34
   18e4c:	and	lr, r2, #31
   18e50:	add	r8, sp, #8
   18e54:	mov	r2, r1
   18e58:	strd	r4, [sp]
   18e5c:	mov	r1, r0
   18e60:	mov	r3, sp
   18e64:	strd	r6, [sp, #8]
   18e68:	mov	r0, #0
   18e6c:	ldrd	r4, [ip, #16]
   18e70:	ldrd	r6, [ip, #24]
   18e74:	strd	r4, [sp, #16]
   18e78:	ldrd	r4, [ip, #32]
   18e7c:	strd	r6, [sp, #24]
   18e80:	ldrd	r6, [ip, #40]	; 0x28
   18e84:	strd	r4, [sp, #32]
   18e88:	strd	r6, [sp, #40]	; 0x28
   18e8c:	ldr	ip, [r8, r9, lsl #2]
   18e90:	mvn	r4, ip, lsr lr
   18e94:	and	r4, r4, #1
   18e98:	eor	lr, ip, r4, lsl lr
   18e9c:	str	lr, [r8, r9, lsl #2]
   18ea0:	bl	187f8 <__assert_fail@plt+0x731c>
   18ea4:	add	sp, sp, #52	; 0x34
   18ea8:	ldrd	r4, [sp]
   18eac:	ldrd	r6, [sp, #8]
   18eb0:	ldrd	r8, [sp, #16]
   18eb4:	add	sp, sp, #24
   18eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   18ebc:	andeq	lr, r2, r8, asr r5
   18ec0:	mov	r2, r1
   18ec4:	mvn	r1, #0
   18ec8:	b	18e28 <__assert_fail@plt+0x794c>
   18ecc:	mov	r2, #58	; 0x3a
   18ed0:	mvn	r1, #0
   18ed4:	b	18e28 <__assert_fail@plt+0x794c>
   18ed8:	mov	r2, #58	; 0x3a
   18edc:	b	18e28 <__assert_fail@plt+0x794c>
   18ee0:	strd	r4, [sp, #-20]!	; 0xffffffec
   18ee4:	strd	r6, [sp, #8]
   18ee8:	mov	r6, r0
   18eec:	mov	r7, r2
   18ef0:	str	lr, [sp, #16]
   18ef4:	sub	sp, sp, #100	; 0x64
   18ef8:	mov	r0, sp
   18efc:	bl	16e94 <__assert_fail@plt+0x59b8>
   18f00:	ldrd	r4, [sp, #8]
   18f04:	mov	r1, r7
   18f08:	mov	r0, r6
   18f0c:	add	r3, sp, #48	; 0x30
   18f10:	mvn	r2, #0
   18f14:	ldrd	r6, [sp]
   18f18:	strd	r4, [sp, #56]	; 0x38
   18f1c:	ldrd	r4, [sp, #16]
   18f20:	strd	r6, [sp, #48]	; 0x30
   18f24:	ldrd	r6, [sp, #32]
   18f28:	ldr	lr, [sp, #60]	; 0x3c
   18f2c:	strd	r4, [sp, #64]	; 0x40
   18f30:	ldrd	r4, [sp, #24]
   18f34:	mvn	ip, lr
   18f38:	and	ip, ip, #67108864	; 0x4000000
   18f3c:	strd	r4, [sp, #72]	; 0x48
   18f40:	eor	ip, ip, lr
   18f44:	ldrd	r4, [sp, #40]	; 0x28
   18f48:	str	ip, [sp, #60]	; 0x3c
   18f4c:	strd	r6, [sp, #80]	; 0x50
   18f50:	strd	r4, [sp, #88]	; 0x58
   18f54:	bl	187f8 <__assert_fail@plt+0x731c>
   18f58:	add	sp, sp, #100	; 0x64
   18f5c:	ldrd	r4, [sp]
   18f60:	ldrd	r6, [sp, #8]
   18f64:	add	sp, sp, #16
   18f68:	pop	{pc}		; (ldr pc, [sp], #4)
   18f6c:	ldr	ip, [pc, #156]	; 19010 <__assert_fail@plt+0x7b34>
   18f70:	cmp	r2, #0
   18f74:	cmpne	r1, #0
   18f78:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18f7c:	strd	r6, [sp, #8]
   18f80:	mov	r6, r2
   18f84:	str	r8, [sp, #16]
   18f88:	mov	r8, r3
   18f8c:	strd	sl, [sp, #20]
   18f90:	ldrd	r4, [ip]
   18f94:	str	lr, [sp, #28]
   18f98:	sub	sp, sp, #48	; 0x30
   18f9c:	mov	lr, #10
   18fa0:	ldrd	r2, [ip, #8]
   18fa4:	ldrd	sl, [ip, #16]
   18fa8:	strd	r4, [sp]
   18fac:	ldrd	r4, [ip, #32]
   18fb0:	str	lr, [sp]
   18fb4:	strd	r2, [sp, #8]
   18fb8:	strd	sl, [sp, #16]
   18fbc:	ldrd	r2, [ip, #24]
   18fc0:	ldrd	sl, [ip, #40]	; 0x28
   18fc4:	strd	r2, [sp, #24]
   18fc8:	strd	r4, [sp, #32]
   18fcc:	strd	sl, [sp, #40]	; 0x28
   18fd0:	beq	1900c <__assert_fail@plt+0x7b30>
   18fd4:	ldr	r2, [sp, #80]	; 0x50
   18fd8:	mov	r7, r1
   18fdc:	mov	r3, sp
   18fe0:	mov	r1, r8
   18fe4:	str	r7, [sp, #40]	; 0x28
   18fe8:	str	r6, [sp, #44]	; 0x2c
   18fec:	bl	187f8 <__assert_fail@plt+0x731c>
   18ff0:	add	sp, sp, #48	; 0x30
   18ff4:	ldrd	r4, [sp]
   18ff8:	ldrd	r6, [sp, #8]
   18ffc:	ldr	r8, [sp, #16]
   19000:	ldrd	sl, [sp, #20]
   19004:	add	sp, sp, #28
   19008:	pop	{pc}		; (ldr pc, [sp], #4)
   1900c:	bl	114ac <abort@plt>
   19010:	andeq	lr, r2, r8, asr r5
   19014:	mvn	ip, #0
   19018:	push	{lr}		; (str lr, [sp, #-4]!)
   1901c:	sub	sp, sp, #12
   19020:	str	ip, [sp]
   19024:	bl	18f6c <__assert_fail@plt+0x7a90>
   19028:	add	sp, sp, #12
   1902c:	pop	{pc}		; (ldr pc, [sp], #4)
   19030:	mvn	ip, #0
   19034:	push	{lr}		; (str lr, [sp, #-4]!)
   19038:	sub	sp, sp, #12
   1903c:	mov	r3, r2
   19040:	mov	r2, r1
   19044:	mov	r1, r0
   19048:	mov	r0, #0
   1904c:	str	ip, [sp]
   19050:	bl	18f6c <__assert_fail@plt+0x7a90>
   19054:	add	sp, sp, #12
   19058:	pop	{pc}		; (ldr pc, [sp], #4)
   1905c:	push	{lr}		; (str lr, [sp, #-4]!)
   19060:	sub	sp, sp, #12
   19064:	str	r3, [sp]
   19068:	mov	r3, r2
   1906c:	mov	r2, r1
   19070:	mov	r1, r0
   19074:	mov	r0, #0
   19078:	bl	18f6c <__assert_fail@plt+0x7a90>
   1907c:	add	sp, sp, #12
   19080:	pop	{pc}		; (ldr pc, [sp], #4)
   19084:	ldr	r3, [pc]	; 1908c <__assert_fail@plt+0x7bb0>
   19088:	b	187f8 <__assert_fail@plt+0x731c>
   1908c:	muleq	r2, r0, r1
   19090:	mov	r2, r1
   19094:	ldr	r3, [pc, #8]	; 190a4 <__assert_fail@plt+0x7bc8>
   19098:	mov	r1, r0
   1909c:	mov	r0, #0
   190a0:	b	187f8 <__assert_fail@plt+0x731c>
   190a4:	muleq	r2, r0, r1
   190a8:	ldr	r3, [pc, #4]	; 190b4 <__assert_fail@plt+0x7bd8>
   190ac:	mvn	r2, #0
   190b0:	b	187f8 <__assert_fail@plt+0x731c>
   190b4:	muleq	r2, r0, r1
   190b8:	mov	r1, r0
   190bc:	ldr	r3, [pc, #8]	; 190cc <__assert_fail@plt+0x7bf0>
   190c0:	mvn	r2, #0
   190c4:	mov	r0, #0
   190c8:	b	187f8 <__assert_fail@plt+0x731c>
   190cc:	muleq	r2, r0, r1
   190d0:	strd	r4, [sp, #-24]!	; 0xffffffe8
   190d4:	mov	r5, r2
   190d8:	strd	r6, [sp, #8]
   190dc:	mov	r6, r0
   190e0:	mov	r7, r1
   190e4:	str	r8, [sp, #16]
   190e8:	mov	r8, r3
   190ec:	str	lr, [sp, #20]
   190f0:	sub	sp, sp, #8
   190f4:	ldrd	r0, [sp, #32]
   190f8:	bl	1a690 <__assert_fail@plt+0x91b4>
   190fc:	subs	r4, r0, #0
   19100:	beq	1916c <__assert_fail@plt+0x7c90>
   19104:	cmp	r5, #0
   19108:	beq	19150 <__assert_fail@plt+0x7c74>
   1910c:	movw	ip, #48196	; 0xbc44
   19110:	movt	ip, #1
   19114:	mov	r3, r8
   19118:	mov	r2, r5
   1911c:	mov	r1, r7
   19120:	mov	r0, r6
   19124:	str	ip, [sp]
   19128:	str	r4, [sp, #4]
   1912c:	bl	11308 <error_at_line@plt>
   19130:	mov	r0, r4
   19134:	add	sp, sp, #8
   19138:	ldrd	r4, [sp]
   1913c:	ldrd	r6, [sp, #8]
   19140:	ldr	r8, [sp, #16]
   19144:	ldr	lr, [sp, #20]
   19148:	add	sp, sp, #24
   1914c:	b	1acb0 <__assert_fail@plt+0x97d4>
   19150:	mov	r1, r7
   19154:	mov	r0, r6
   19158:	movw	r2, #48196	; 0xbc44
   1915c:	movt	r2, #1
   19160:	mov	r3, r4
   19164:	bl	112d8 <error@plt>
   19168:	b	19130 <__assert_fail@plt+0x7c54>
   1916c:	bl	113a4 <__errno_location@plt>
   19170:	ldr	r5, [r0]
   19174:	mov	r2, #5
   19178:	movw	r1, #53936	; 0xd2b0
   1917c:	movt	r1, #1
   19180:	mov	r0, r4
   19184:	bl	11230 <dcgettext@plt>
   19188:	mov	r2, r0
   1918c:	mov	r0, r4
   19190:	mov	r1, r5
   19194:	bl	112d8 <error@plt>
   19198:	bl	114ac <abort@plt>
   1919c:	push	{lr}		; (str lr, [sp, #-4]!)
   191a0:	sub	sp, sp, #12
   191a4:	strd	r2, [sp]
   191a8:	mov	r3, #0
   191ac:	mov	r2, r3
   191b0:	bl	190d0 <__assert_fail@plt+0x7bf4>
   191b4:	add	sp, sp, #12
   191b8:	pop	{pc}		; (ldr pc, [sp], #4)
   191bc:	cmp	r1, #0
   191c0:	strd	r4, [sp, #-16]!
   191c4:	mov	ip, r3
   191c8:	str	r6, [sp, #8]
   191cc:	mov	r4, r0
   191d0:	str	lr, [sp, #12]
   191d4:	sub	sp, sp, #32
   191d8:	ldr	r5, [sp, #48]	; 0x30
   191dc:	ldr	r6, [sp, #52]	; 0x34
   191e0:	beq	19324 <__assert_fail@plt+0x7e48>
   191e4:	mov	r3, r1
   191e8:	mov	r1, #1
   191ec:	stm	sp, {r2, ip}
   191f0:	movw	r2, #53968	; 0xd2d0
   191f4:	movt	r2, #1
   191f8:	bl	11404 <__fprintf_chk@plt>
   191fc:	mov	r2, #5
   19200:	movw	r1, #53988	; 0xd2e4
   19204:	movt	r1, #1
   19208:	mov	r0, #0
   1920c:	bl	11230 <dcgettext@plt>
   19210:	movw	ip, #2022	; 0x7e6
   19214:	mov	r3, r0
   19218:	mov	r1, #1
   1921c:	movw	r2, #54716	; 0xd5bc
   19220:	movt	r2, #1
   19224:	mov	r0, r4
   19228:	str	ip, [sp]
   1922c:	bl	11404 <__fprintf_chk@plt>
   19230:	mov	r1, r4
   19234:	mov	r0, #10
   19238:	bl	11224 <fputc_unlocked@plt>
   1923c:	mov	r2, #5
   19240:	movw	r1, #53992	; 0xd2e8
   19244:	movt	r1, #1
   19248:	mov	r0, #0
   1924c:	bl	11230 <dcgettext@plt>
   19250:	mov	r2, r0
   19254:	mov	r1, #1
   19258:	movw	r3, #54164	; 0xd394
   1925c:	movt	r3, #1
   19260:	mov	r0, r4
   19264:	bl	11404 <__fprintf_chk@plt>
   19268:	mov	r1, r4
   1926c:	mov	r0, #10
   19270:	bl	11224 <fputc_unlocked@plt>
   19274:	cmp	r6, #9
   19278:	ldrls	pc, [pc, r6, lsl #2]
   1927c:	b	19590 <__assert_fail@plt+0x80b4>
   19280:	andeq	r9, r1, r0, lsl r3
   19284:	andeq	r9, r1, r0, asr #6
   19288:	andeq	r9, r1, ip, ror r3
   1928c:			; <UNDEFINED> instruction: 0x000193bc
   19290:	andeq	r9, r1, r4, lsl #8
   19294:	andeq	r9, r1, ip, lsr r4
   19298:	andeq	r9, r1, r4, lsl #9
   1929c:	ldrdeq	r9, [r1], -r8
   192a0:	andeq	r9, r1, r0, lsr r5
   192a4:	andeq	r9, r1, r8, lsr #5
   192a8:	movw	r1, #54468	; 0xd4c4
   192ac:	movt	r1, #1
   192b0:	mov	r2, #5
   192b4:	mov	r0, #0
   192b8:	bl	11230 <dcgettext@plt>
   192bc:	ldr	lr, [r5, #4]
   192c0:	mov	r2, r0
   192c4:	mov	r1, #1
   192c8:	mov	r0, r4
   192cc:	ldr	r3, [r5, #8]
   192d0:	ldr	ip, [r5, #32]
   192d4:	str	lr, [sp]
   192d8:	ldr	lr, [r5, #12]
   192dc:	str	ip, [sp, #28]
   192e0:	ldr	ip, [r5, #28]
   192e4:	str	r3, [sp, #4]
   192e8:	ldr	r3, [r5, #16]
   192ec:	str	lr, [sp, #8]
   192f0:	ldr	lr, [r5, #20]
   192f4:	str	ip, [sp, #24]
   192f8:	ldr	ip, [r5, #24]
   192fc:	str	r3, [sp, #12]
   19300:	ldr	r3, [r5]
   19304:	str	lr, [sp, #16]
   19308:	str	ip, [sp, #20]
   1930c:	bl	11404 <__fprintf_chk@plt>
   19310:	add	sp, sp, #32
   19314:	ldrd	r4, [sp]
   19318:	ldr	r6, [sp, #8]
   1931c:	add	sp, sp, #12
   19320:	pop	{pc}		; (ldr pc, [sp], #4)
   19324:	mov	r3, r2
   19328:	mov	r1, #1
   1932c:	str	ip, [sp]
   19330:	movw	r2, #53980	; 0xd2dc
   19334:	movt	r2, #1
   19338:	bl	11404 <__fprintf_chk@plt>
   1933c:	b	191fc <__assert_fail@plt+0x7d20>
   19340:	mov	r2, #5
   19344:	movw	r1, #54200	; 0xd3b8
   19348:	movt	r1, #1
   1934c:	mov	r0, #0
   19350:	bl	11230 <dcgettext@plt>
   19354:	ldr	r3, [r5]
   19358:	mov	r2, r0
   1935c:	mov	r1, #1
   19360:	mov	r0, r4
   19364:	add	sp, sp, #32
   19368:	ldrd	r4, [sp]
   1936c:	ldr	r6, [sp, #8]
   19370:	ldr	lr, [sp, #12]
   19374:	add	sp, sp, #16
   19378:	b	11404 <__fprintf_chk@plt>
   1937c:	mov	r2, #5
   19380:	movw	r1, #54216	; 0xd3c8
   19384:	movt	r1, #1
   19388:	mov	r0, #0
   1938c:	bl	11230 <dcgettext@plt>
   19390:	ldm	r5, {r3, ip}
   19394:	mov	r2, r0
   19398:	mov	r1, #1
   1939c:	mov	r0, r4
   193a0:	str	ip, [sp, #48]	; 0x30
   193a4:	add	sp, sp, #32
   193a8:	ldrd	r4, [sp]
   193ac:	ldr	r6, [sp, #8]
   193b0:	ldr	lr, [sp, #12]
   193b4:	add	sp, sp, #16
   193b8:	b	11404 <__fprintf_chk@plt>
   193bc:	mov	r2, #5
   193c0:	movw	r1, #54240	; 0xd3e0
   193c4:	movt	r1, #1
   193c8:	mov	r0, #0
   193cc:	bl	11230 <dcgettext@plt>
   193d0:	ldm	r5, {r3, lr}
   193d4:	mov	r2, r0
   193d8:	mov	r1, #1
   193dc:	mov	r0, r4
   193e0:	ldr	ip, [r5, #8]
   193e4:	str	lr, [sp, #48]	; 0x30
   193e8:	str	ip, [sp, #52]	; 0x34
   193ec:	add	sp, sp, #32
   193f0:	ldrd	r4, [sp]
   193f4:	ldr	r6, [sp, #8]
   193f8:	ldr	lr, [sp, #12]
   193fc:	add	sp, sp, #16
   19400:	b	11404 <__fprintf_chk@plt>
   19404:	mov	r2, #5
   19408:	movw	r1, #54268	; 0xd3fc
   1940c:	movt	r1, #1
   19410:	mov	r0, #0
   19414:	bl	11230 <dcgettext@plt>
   19418:	ldmib	r5, {r3, ip, lr}
   1941c:	mov	r2, r0
   19420:	mov	r1, #1
   19424:	mov	r0, r4
   19428:	str	r3, [sp]
   1942c:	ldr	r3, [r5]
   19430:	stmib	sp, {ip, lr}
   19434:	bl	11404 <__fprintf_chk@plt>
   19438:	b	19310 <__assert_fail@plt+0x7e34>
   1943c:	mov	r2, #5
   19440:	movw	r1, #54300	; 0xd41c
   19444:	movt	r1, #1
   19448:	mov	r0, #0
   1944c:	bl	11230 <dcgettext@plt>
   19450:	ldmib	r5, {ip, lr}
   19454:	mov	r2, r0
   19458:	mov	r1, #1
   1945c:	mov	r0, r4
   19460:	ldr	r3, [r5, #16]
   19464:	str	ip, [sp]
   19468:	ldr	ip, [r5, #12]
   1946c:	str	r3, [sp, #12]
   19470:	ldr	r3, [r5]
   19474:	str	lr, [sp, #4]
   19478:	str	ip, [sp, #8]
   1947c:	bl	11404 <__fprintf_chk@plt>
   19480:	b	19310 <__assert_fail@plt+0x7e34>
   19484:	mov	r2, #5
   19488:	movw	r1, #54336	; 0xd440
   1948c:	movt	r1, #1
   19490:	mov	r0, #0
   19494:	bl	11230 <dcgettext@plt>
   19498:	ldr	lr, [r5, #4]
   1949c:	mov	r2, r0
   194a0:	mov	r1, #1
   194a4:	mov	r0, r4
   194a8:	ldr	r3, [r5, #8]
   194ac:	ldr	ip, [r5, #20]
   194b0:	str	lr, [sp]
   194b4:	ldr	lr, [r5, #12]
   194b8:	str	ip, [sp, #16]
   194bc:	ldr	ip, [r5, #16]
   194c0:	str	r3, [sp, #4]
   194c4:	ldr	r3, [r5]
   194c8:	str	lr, [sp, #8]
   194cc:	str	ip, [sp, #12]
   194d0:	bl	11404 <__fprintf_chk@plt>
   194d4:	b	19310 <__assert_fail@plt+0x7e34>
   194d8:	mov	r2, #5
   194dc:	movw	r1, #54376	; 0xd468
   194e0:	movt	r1, #1
   194e4:	mov	r0, #0
   194e8:	bl	11230 <dcgettext@plt>
   194ec:	ldmib	r5, {r3, ip}
   194f0:	mov	r2, r0
   194f4:	mov	r1, #1
   194f8:	mov	r0, r4
   194fc:	ldr	lr, [r5, #24]
   19500:	str	r3, [sp]
   19504:	ldr	r3, [r5, #12]
   19508:	str	lr, [sp, #20]
   1950c:	ldr	lr, [r5, #20]
   19510:	str	ip, [sp, #4]
   19514:	ldr	ip, [r5, #16]
   19518:	str	r3, [sp, #8]
   1951c:	ldr	r3, [r5]
   19520:	str	ip, [sp, #12]
   19524:	str	lr, [sp, #16]
   19528:	bl	11404 <__fprintf_chk@plt>
   1952c:	b	19310 <__assert_fail@plt+0x7e34>
   19530:	mov	r2, #5
   19534:	movw	r1, #54420	; 0xd494
   19538:	movt	r1, #1
   1953c:	mov	r0, #0
   19540:	bl	11230 <dcgettext@plt>
   19544:	ldmib	r5, {ip, lr}
   19548:	mov	r2, r0
   1954c:	mov	r1, #1
   19550:	mov	r0, r4
   19554:	ldr	r3, [r5, #28]
   19558:	str	ip, [sp]
   1955c:	ldr	ip, [r5, #12]
   19560:	str	r3, [sp, #24]
   19564:	ldr	r3, [r5, #24]
   19568:	str	lr, [sp, #4]
   1956c:	ldr	lr, [r5, #16]
   19570:	str	ip, [sp, #8]
   19574:	ldr	ip, [r5, #20]
   19578:	str	r3, [sp, #20]
   1957c:	ldr	r3, [r5]
   19580:	str	lr, [sp, #12]
   19584:	str	ip, [sp, #16]
   19588:	bl	11404 <__fprintf_chk@plt>
   1958c:	b	19310 <__assert_fail@plt+0x7e34>
   19590:	movw	r1, #54520	; 0xd4f8
   19594:	movt	r1, #1
   19598:	b	192b0 <__assert_fail@plt+0x7dd4>
   1959c:	strd	r4, [sp, #-12]!
   195a0:	str	lr, [sp, #8]
   195a4:	sub	sp, sp, #12
   195a8:	ldr	r5, [sp, #24]
   195ac:	ldr	ip, [r5]
   195b0:	cmp	ip, #0
   195b4:	beq	195d0 <__assert_fail@plt+0x80f4>
   195b8:	mov	lr, r5
   195bc:	mov	ip, #0
   195c0:	ldr	r4, [lr, #4]!
   195c4:	add	ip, ip, #1
   195c8:	cmp	r4, #0
   195cc:	bne	195c0 <__assert_fail@plt+0x80e4>
   195d0:	stm	sp, {r5, ip}
   195d4:	bl	191bc <__assert_fail@plt+0x7ce0>
   195d8:	add	sp, sp, #12
   195dc:	ldrd	r4, [sp]
   195e0:	add	sp, sp, #8
   195e4:	pop	{pc}		; (ldr pc, [sp], #4)
   195e8:	strd	r4, [sp, #-16]!
   195ec:	mov	ip, #0
   195f0:	str	r6, [sp, #8]
   195f4:	str	lr, [sp, #12]
   195f8:	sub	sp, sp, #48	; 0x30
   195fc:	ldr	r5, [sp, #64]	; 0x40
   19600:	add	r6, sp, #8
   19604:	mov	r4, r6
   19608:	ldr	lr, [r5], #4
   1960c:	cmp	lr, #0
   19610:	str	lr, [r4], #4
   19614:	beq	19624 <__assert_fail@plt+0x8148>
   19618:	add	ip, ip, #1
   1961c:	cmp	ip, #10
   19620:	bne	19608 <__assert_fail@plt+0x812c>
   19624:	stm	sp, {r6, ip}
   19628:	bl	191bc <__assert_fail@plt+0x7ce0>
   1962c:	add	sp, sp, #48	; 0x30
   19630:	ldrd	r4, [sp]
   19634:	ldr	r6, [sp, #8]
   19638:	add	sp, sp, #12
   1963c:	pop	{pc}		; (ldr pc, [sp], #4)
   19640:	push	{r3}		; (str r3, [sp, #-4]!)
   19644:	mov	ip, #0
   19648:	strd	r4, [sp, #-12]!
   1964c:	str	lr, [sp, #8]
   19650:	sub	sp, sp, #56	; 0x38
   19654:	add	r3, sp, #72	; 0x48
   19658:	add	r5, sp, #16
   1965c:	mov	r4, r3
   19660:	mov	lr, r5
   19664:	str	r3, [sp, #12]
   19668:	ldr	r3, [r4], #4
   1966c:	cmp	r3, #0
   19670:	str	r3, [lr], #4
   19674:	beq	19684 <__assert_fail@plt+0x81a8>
   19678:	add	ip, ip, #1
   1967c:	cmp	ip, #10
   19680:	bne	19668 <__assert_fail@plt+0x818c>
   19684:	ldr	r3, [sp, #68]	; 0x44
   19688:	stm	sp, {r5, ip}
   1968c:	bl	191bc <__assert_fail@plt+0x7ce0>
   19690:	add	sp, sp, #56	; 0x38
   19694:	ldrd	r4, [sp]
   19698:	ldr	lr, [sp, #8]
   1969c:	add	sp, sp, #12
   196a0:	add	sp, sp, #4
   196a4:	bx	lr
   196a8:	movw	r3, #57820	; 0xe1dc
   196ac:	movt	r3, #2
   196b0:	str	r4, [sp, #-8]!
   196b4:	mov	r0, #10
   196b8:	ldr	r1, [r3]
   196bc:	str	lr, [sp, #4]
   196c0:	bl	11224 <fputc_unlocked@plt>
   196c4:	mov	r2, #5
   196c8:	movw	r1, #54580	; 0xd534
   196cc:	movt	r1, #1
   196d0:	mov	r0, #0
   196d4:	bl	11230 <dcgettext@plt>
   196d8:	mov	r1, r0
   196dc:	movw	r2, #54600	; 0xd548
   196e0:	movt	r2, #1
   196e4:	mov	r0, #1
   196e8:	bl	113e0 <__printf_chk@plt>
   196ec:	mov	r2, #5
   196f0:	movw	r1, #54624	; 0xd560
   196f4:	movt	r1, #1
   196f8:	mov	r0, #0
   196fc:	bl	11230 <dcgettext@plt>
   19700:	mov	r1, r0
   19704:	movw	r3, #51860	; 0xca94
   19708:	movt	r3, #1
   1970c:	movw	r2, #51900	; 0xcabc
   19710:	movt	r2, #1
   19714:	mov	r0, #1
   19718:	bl	113e0 <__printf_chk@plt>
   1971c:	mov	r2, #5
   19720:	movw	r1, #54644	; 0xd574
   19724:	movt	r1, #1
   19728:	mov	r0, #0
   1972c:	bl	11230 <dcgettext@plt>
   19730:	mov	r1, r0
   19734:	movw	r2, #54684	; 0xd59c
   19738:	movt	r2, #1
   1973c:	mov	r0, #1
   19740:	ldr	r4, [sp]
   19744:	ldr	lr, [sp, #4]
   19748:	add	sp, sp, #8
   1974c:	b	113e0 <__printf_chk@plt>
   19750:	str	r4, [sp, #-8]!
   19754:	str	lr, [sp, #4]
   19758:	bl	1a7ac <__assert_fail@plt+0x92d0>
   1975c:	cmp	r0, #0
   19760:	beq	19770 <__assert_fail@plt+0x8294>
   19764:	ldr	r4, [sp]
   19768:	add	sp, sp, #4
   1976c:	pop	{pc}		; (ldr pc, [sp], #4)
   19770:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19774:	str	r4, [sp, #-8]!
   19778:	str	lr, [sp, #4]
   1977c:	bl	1a7ac <__assert_fail@plt+0x92d0>
   19780:	cmp	r0, #0
   19784:	beq	19794 <__assert_fail@plt+0x82b8>
   19788:	ldr	r4, [sp]
   1978c:	add	sp, sp, #4
   19790:	pop	{pc}		; (ldr pc, [sp], #4)
   19794:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19798:	str	r4, [sp, #-8]!
   1979c:	str	lr, [sp, #4]
   197a0:	bl	1a7ac <__assert_fail@plt+0x92d0>
   197a4:	cmp	r0, #0
   197a8:	beq	197b8 <__assert_fail@plt+0x82dc>
   197ac:	ldr	r4, [sp]
   197b0:	add	sp, sp, #4
   197b4:	pop	{pc}		; (ldr pc, [sp], #4)
   197b8:	bl	19bc8 <__assert_fail@plt+0x86ec>
   197bc:	strd	r4, [sp, #-16]!
   197c0:	mov	r5, r0
   197c4:	mov	r4, r1
   197c8:	str	r6, [sp, #8]
   197cc:	str	lr, [sp, #12]
   197d0:	bl	1a7e8 <__assert_fail@plt+0x930c>
   197d4:	cmp	r0, #0
   197d8:	beq	197ec <__assert_fail@plt+0x8310>
   197dc:	ldrd	r4, [sp]
   197e0:	ldr	r6, [sp, #8]
   197e4:	add	sp, sp, #12
   197e8:	pop	{pc}		; (ldr pc, [sp], #4)
   197ec:	adds	r4, r4, #0
   197f0:	movne	r4, #1
   197f4:	cmp	r5, #0
   197f8:	moveq	r4, #1
   197fc:	cmp	r4, #0
   19800:	beq	197dc <__assert_fail@plt+0x8300>
   19804:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19808:	cmp	r1, #0
   1980c:	orreq	r1, r1, #1
   19810:	str	r4, [sp, #-8]!
   19814:	str	lr, [sp, #4]
   19818:	bl	1a7e8 <__assert_fail@plt+0x930c>
   1981c:	cmp	r0, #0
   19820:	beq	19830 <__assert_fail@plt+0x8354>
   19824:	ldr	r4, [sp]
   19828:	add	sp, sp, #4
   1982c:	pop	{pc}		; (ldr pc, [sp], #4)
   19830:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19834:	strd	r4, [sp, #-16]!
   19838:	mov	r4, r0
   1983c:	mov	r5, r2
   19840:	str	r6, [sp, #8]
   19844:	mov	r6, r1
   19848:	str	lr, [sp, #12]
   1984c:	bl	1adcc <__assert_fail@plt+0x98f0>
   19850:	cmp	r0, #0
   19854:	beq	19868 <__assert_fail@plt+0x838c>
   19858:	ldrd	r4, [sp]
   1985c:	ldr	r6, [sp, #8]
   19860:	add	sp, sp, #12
   19864:	pop	{pc}		; (ldr pc, [sp], #4)
   19868:	cmp	r4, #0
   1986c:	beq	1987c <__assert_fail@plt+0x83a0>
   19870:	cmp	r6, #0
   19874:	cmpne	r5, #0
   19878:	beq	19858 <__assert_fail@plt+0x837c>
   1987c:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19880:	b	19834 <__assert_fail@plt+0x8358>
   19884:	cmp	r2, #0
   19888:	cmpne	r1, #0
   1988c:	str	r4, [sp, #-8]!
   19890:	moveq	r2, #1
   19894:	str	lr, [sp, #4]
   19898:	moveq	r1, r2
   1989c:	bl	1adcc <__assert_fail@plt+0x98f0>
   198a0:	cmp	r0, #0
   198a4:	beq	198b4 <__assert_fail@plt+0x83d8>
   198a8:	ldr	r4, [sp]
   198ac:	add	sp, sp, #4
   198b0:	pop	{pc}		; (ldr pc, [sp], #4)
   198b4:	bl	19bc8 <__assert_fail@plt+0x86ec>
   198b8:	mov	r2, r1
   198bc:	mov	r1, r0
   198c0:	mov	r0, #0
   198c4:	b	19834 <__assert_fail@plt+0x8358>
   198c8:	mov	r2, r1
   198cc:	mov	r1, r0
   198d0:	mov	r0, #0
   198d4:	b	19884 <__assert_fail@plt+0x83a8>
   198d8:	cmp	r0, #0
   198dc:	strd	r4, [sp, #-16]!
   198e0:	mov	r5, r1
   198e4:	ldr	r4, [r1]
   198e8:	str	r6, [sp, #8]
   198ec:	str	lr, [sp, #12]
   198f0:	beq	19920 <__assert_fail@plt+0x8444>
   198f4:	lsr	r3, r4, #1
   198f8:	add	r3, r3, #1
   198fc:	adds	r4, r4, r3
   19900:	bcs	1993c <__assert_fail@plt+0x8460>
   19904:	mov	r1, r4
   19908:	bl	19834 <__assert_fail@plt+0x8358>
   1990c:	ldr	r6, [sp, #8]
   19910:	str	r4, [r5]
   19914:	ldrd	r4, [sp]
   19918:	add	sp, sp, #12
   1991c:	pop	{pc}		; (ldr pc, [sp], #4)
   19920:	cmp	r4, #0
   19924:	bne	19904 <__assert_fail@plt+0x8428>
   19928:	mov	r4, #64	; 0x40
   1992c:	udiv	r4, r4, r2
   19930:	cmp	r2, #64	; 0x40
   19934:	addhi	r4, r4, #1
   19938:	b	19904 <__assert_fail@plt+0x8428>
   1993c:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19940:	mov	r2, #1
   19944:	b	198d8 <__assert_fail@plt+0x83fc>
   19948:	ldr	ip, [r1]
   1994c:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19950:	mov	r5, r1
   19954:	strd	r6, [sp, #8]
   19958:	str	lr, [sp, #28]
   1995c:	strd	r8, [sp, #16]
   19960:	asr	lr, ip, #1
   19964:	ldr	r8, [sp, #32]
   19968:	str	sl, [sp, #24]
   1996c:	adds	r4, ip, lr
   19970:	mvn	lr, r3
   19974:	lsr	lr, lr, #31
   19978:	mvnvs	r4, #-2147483648	; 0x80000000
   1997c:	cmp	r3, r4
   19980:	movge	r1, #0
   19984:	andlt	r1, lr, #1
   19988:	cmp	r1, #0
   1998c:	movne	r4, r3
   19990:	smull	r6, r7, r4, r8
   19994:	cmp	r7, r6, asr #31
   19998:	bne	19a20 <__assert_fail@plt+0x8544>
   1999c:	cmp	r6, #63	; 0x3f
   199a0:	mov	r1, r6
   199a4:	ble	19a08 <__assert_fail@plt+0x852c>
   199a8:	cmp	r0, #0
   199ac:	sub	r6, r4, ip
   199b0:	streq	r0, [r5]
   199b4:	cmp	r6, r2
   199b8:	bge	199e8 <__assert_fail@plt+0x850c>
   199bc:	adds	r4, ip, r2
   199c0:	bvs	19a1c <__assert_fail@plt+0x8540>
   199c4:	cmp	r4, r3
   199c8:	movle	r3, #0
   199cc:	andgt	r3, lr, #1
   199d0:	cmp	r3, #0
   199d4:	bne	19a1c <__assert_fail@plt+0x8540>
   199d8:	smull	r8, r9, r4, r8
   199dc:	cmp	r9, r8, asr #31
   199e0:	mov	r1, r8
   199e4:	bne	19a1c <__assert_fail@plt+0x8540>
   199e8:	bl	197bc <__assert_fail@plt+0x82e0>
   199ec:	ldrd	r6, [sp, #8]
   199f0:	ldrd	r8, [sp, #16]
   199f4:	ldr	sl, [sp, #24]
   199f8:	str	r4, [r5]
   199fc:	ldrd	r4, [sp]
   19a00:	add	sp, sp, #28
   19a04:	pop	{pc}		; (ldr pc, [sp], #4)
   19a08:	mov	r6, #64	; 0x40
   19a0c:	sdiv	r4, r6, r8
   19a10:	mls	r1, r8, r4, r6
   19a14:	sub	r1, r6, r1
   19a18:	b	199a8 <__assert_fail@plt+0x84cc>
   19a1c:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19a20:	mvn	r6, #-2147483648	; 0x80000000
   19a24:	b	19a0c <__assert_fail@plt+0x8530>
   19a28:	mov	r1, #1
   19a2c:	str	r4, [sp, #-8]!
   19a30:	str	lr, [sp, #4]
   19a34:	bl	1a738 <__assert_fail@plt+0x925c>
   19a38:	cmp	r0, #0
   19a3c:	beq	19a4c <__assert_fail@plt+0x8570>
   19a40:	ldr	r4, [sp]
   19a44:	add	sp, sp, #4
   19a48:	pop	{pc}		; (ldr pc, [sp], #4)
   19a4c:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19a50:	mov	r1, #1
   19a54:	str	r4, [sp, #-8]!
   19a58:	str	lr, [sp, #4]
   19a5c:	bl	1a738 <__assert_fail@plt+0x925c>
   19a60:	cmp	r0, #0
   19a64:	beq	19a74 <__assert_fail@plt+0x8598>
   19a68:	ldr	r4, [sp]
   19a6c:	add	sp, sp, #4
   19a70:	pop	{pc}		; (ldr pc, [sp], #4)
   19a74:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19a78:	str	r4, [sp, #-8]!
   19a7c:	str	lr, [sp, #4]
   19a80:	bl	1a738 <__assert_fail@plt+0x925c>
   19a84:	cmp	r0, #0
   19a88:	beq	19a98 <__assert_fail@plt+0x85bc>
   19a8c:	ldr	r4, [sp]
   19a90:	add	sp, sp, #4
   19a94:	pop	{pc}		; (ldr pc, [sp], #4)
   19a98:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19a9c:	str	r4, [sp, #-8]!
   19aa0:	str	lr, [sp, #4]
   19aa4:	bl	1a738 <__assert_fail@plt+0x925c>
   19aa8:	cmp	r0, #0
   19aac:	beq	19abc <__assert_fail@plt+0x85e0>
   19ab0:	ldr	r4, [sp]
   19ab4:	add	sp, sp, #4
   19ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   19abc:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19ac0:	strd	r4, [sp, #-16]!
   19ac4:	mov	r4, r1
   19ac8:	str	r6, [sp, #8]
   19acc:	mov	r6, r0
   19ad0:	mov	r0, r1
   19ad4:	str	lr, [sp, #12]
   19ad8:	bl	1a7ac <__assert_fail@plt+0x92d0>
   19adc:	subs	r5, r0, #0
   19ae0:	beq	19b04 <__assert_fail@plt+0x8628>
   19ae4:	mov	r2, r4
   19ae8:	mov	r1, r6
   19aec:	bl	111e8 <memcpy@plt>
   19af0:	mov	r0, r5
   19af4:	ldrd	r4, [sp]
   19af8:	ldr	r6, [sp, #8]
   19afc:	add	sp, sp, #12
   19b00:	pop	{pc}		; (ldr pc, [sp], #4)
   19b04:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19b08:	strd	r4, [sp, #-16]!
   19b0c:	mov	r4, r1
   19b10:	str	r6, [sp, #8]
   19b14:	mov	r6, r0
   19b18:	mov	r0, r1
   19b1c:	str	lr, [sp, #12]
   19b20:	bl	1a7ac <__assert_fail@plt+0x92d0>
   19b24:	subs	r5, r0, #0
   19b28:	beq	19b4c <__assert_fail@plt+0x8670>
   19b2c:	mov	r2, r4
   19b30:	mov	r1, r6
   19b34:	bl	111e8 <memcpy@plt>
   19b38:	mov	r0, r5
   19b3c:	ldrd	r4, [sp]
   19b40:	ldr	r6, [sp, #8]
   19b44:	add	sp, sp, #12
   19b48:	pop	{pc}		; (ldr pc, [sp], #4)
   19b4c:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19b50:	strd	r4, [sp, #-16]!
   19b54:	mov	r4, r1
   19b58:	str	r6, [sp, #8]
   19b5c:	mov	r6, r0
   19b60:	add	r0, r1, #1
   19b64:	str	lr, [sp, #12]
   19b68:	bl	1a7ac <__assert_fail@plt+0x92d0>
   19b6c:	subs	r5, r0, #0
   19b70:	beq	19b9c <__assert_fail@plt+0x86c0>
   19b74:	mov	r3, #0
   19b78:	mov	r1, r6
   19b7c:	mov	r2, r4
   19b80:	strb	r3, [r5, r4]
   19b84:	bl	111e8 <memcpy@plt>
   19b88:	mov	r0, r5
   19b8c:	ldrd	r4, [sp]
   19b90:	ldr	r6, [sp, #8]
   19b94:	add	sp, sp, #12
   19b98:	pop	{pc}		; (ldr pc, [sp], #4)
   19b9c:	bl	19bc8 <__assert_fail@plt+0x86ec>
   19ba0:	str	r4, [sp, #-8]!
   19ba4:	mov	r4, r0
   19ba8:	str	lr, [sp, #4]
   19bac:	bl	11380 <strlen@plt>
   19bb0:	add	r1, r0, #1
   19bb4:	mov	r0, r4
   19bb8:	ldr	r4, [sp]
   19bbc:	ldr	lr, [sp, #4]
   19bc0:	add	sp, sp, #8
   19bc4:	b	19ac0 <__assert_fail@plt+0x85e4>
   19bc8:	movw	r3, #57724	; 0xe17c
   19bcc:	movt	r3, #2
   19bd0:	str	r4, [sp, #-8]!
   19bd4:	ldr	r4, [r3]
   19bd8:	mov	r2, #5
   19bdc:	movw	r1, #54764	; 0xd5ec
   19be0:	movt	r1, #1
   19be4:	mov	r0, #0
   19be8:	str	lr, [sp, #4]
   19bec:	bl	11230 <dcgettext@plt>
   19bf0:	mov	r3, r0
   19bf4:	movw	r2, #48196	; 0xbc44
   19bf8:	movt	r2, #1
   19bfc:	mov	r1, #0
   19c00:	mov	r0, r4
   19c04:	bl	112d8 <error@plt>
   19c08:	bl	114ac <abort@plt>
   19c0c:	cmp	r2, #36	; 0x24
   19c10:	strd	r4, [sp, #-36]!	; 0xffffffdc
   19c14:	strd	r6, [sp, #8]
   19c18:	strd	r8, [sp, #16]
   19c1c:	strd	sl, [sp, #24]
   19c20:	str	lr, [sp, #32]
   19c24:	sub	sp, sp, #36	; 0x24
   19c28:	bhi	1a4b8 <__assert_fail@plt+0x8fdc>
   19c2c:	cmp	r1, #0
   19c30:	mov	r8, r2
   19c34:	mov	r6, r0
   19c38:	mov	r5, r1
   19c3c:	mov	sl, r3
   19c40:	addeq	r5, sp, #28
   19c44:	bl	113a4 <__errno_location@plt>
   19c48:	mov	r3, #0
   19c4c:	mov	r7, r0
   19c50:	str	r3, [r0]
   19c54:	bl	11368 <__ctype_b_loc@plt>
   19c58:	ldrb	r3, [r6]
   19c5c:	mov	r2, r6
   19c60:	ldr	r0, [r0]
   19c64:	b	19c6c <__assert_fail@plt+0x8790>
   19c68:	ldrb	r3, [r2, #1]!
   19c6c:	lsl	r1, r3, #1
   19c70:	ldrh	r4, [r0, r1]
   19c74:	ands	r4, r4, #8192	; 0x2000
   19c78:	bne	19c68 <__assert_fail@plt+0x878c>
   19c7c:	cmp	r3, #45	; 0x2d
   19c80:	beq	19d20 <__assert_fail@plt+0x8844>
   19c84:	mov	r2, r8
   19c88:	mov	r3, r4
   19c8c:	mov	r1, r5
   19c90:	mov	r0, r6
   19c94:	bl	111f4 <__strtoull_internal@plt>
   19c98:	ldr	fp, [r5]
   19c9c:	mov	r9, r0
   19ca0:	mov	r8, r1
   19ca4:	cmp	fp, r6
   19ca8:	beq	19d08 <__assert_fail@plt+0x882c>
   19cac:	ldr	r4, [r7]
   19cb0:	cmp	r4, #0
   19cb4:	bne	19cf8 <__assert_fail@plt+0x881c>
   19cb8:	ldr	r3, [sp, #72]	; 0x48
   19cbc:	cmp	r3, #0
   19cc0:	beq	19cd0 <__assert_fail@plt+0x87f4>
   19cc4:	ldrb	r6, [fp]
   19cc8:	cmp	r6, #0
   19ccc:	bne	1a010 <__assert_fail@plt+0x8b34>
   19cd0:	str	r9, [sl]
   19cd4:	str	r8, [sl, #4]
   19cd8:	mov	r0, r4
   19cdc:	add	sp, sp, #36	; 0x24
   19ce0:	ldrd	r4, [sp]
   19ce4:	ldrd	r6, [sp, #8]
   19ce8:	ldrd	r8, [sp, #16]
   19cec:	ldrd	sl, [sp, #24]
   19cf0:	add	sp, sp, #32
   19cf4:	pop	{pc}		; (ldr pc, [sp], #4)
   19cf8:	cmp	r4, #34	; 0x22
   19cfc:	bne	19d20 <__assert_fail@plt+0x8844>
   19d00:	mov	r4, #1
   19d04:	b	19cb8 <__assert_fail@plt+0x87dc>
   19d08:	ldr	r3, [sp, #72]	; 0x48
   19d0c:	cmp	r3, #0
   19d10:	beq	19d20 <__assert_fail@plt+0x8844>
   19d14:	ldrb	r6, [r6]
   19d18:	cmp	r6, #0
   19d1c:	bne	19d28 <__assert_fail@plt+0x884c>
   19d20:	mov	r4, #4
   19d24:	b	19cd8 <__assert_fail@plt+0x87fc>
   19d28:	mov	r1, r6
   19d2c:	mov	r0, r3
   19d30:	bl	1138c <strchr@plt>
   19d34:	cmp	r0, #0
   19d38:	movne	r9, #1
   19d3c:	movne	r8, #0
   19d40:	beq	19d20 <__assert_fail@plt+0x8844>
   19d44:	sub	r3, r6, #69	; 0x45
   19d48:	cmp	r3, #47	; 0x2f
   19d4c:	ldrls	pc, [pc, r3, lsl #2]
   19d50:	b	19e58 <__assert_fail@plt+0x897c>
   19d54:	andeq	r9, r1, r4, lsl lr
   19d58:	andeq	r9, r1, r8, asr lr
   19d5c:	andeq	r9, r1, r4, lsl lr
   19d60:	andeq	r9, r1, r8, asr lr
   19d64:	andeq	r9, r1, r8, asr lr
   19d68:	andeq	r9, r1, r8, asr lr
   19d6c:	andeq	r9, r1, r4, lsl lr
   19d70:	andeq	r9, r1, r8, asr lr
   19d74:	andeq	r9, r1, r4, lsl lr
   19d78:	andeq	r9, r1, r8, asr lr
   19d7c:	andeq	r9, r1, r8, asr lr
   19d80:	andeq	r9, r1, r4, lsl lr
   19d84:	andeq	r9, r1, r8, asr lr
   19d88:	andeq	r9, r1, r8, asr lr
   19d8c:	andeq	r9, r1, r8, asr lr
   19d90:	andeq	r9, r1, r4, lsl lr
   19d94:	andeq	r9, r1, r8, asr lr
   19d98:	andeq	r9, r1, r8, asr lr
   19d9c:	andeq	r9, r1, r8, asr lr
   19da0:	andeq	r9, r1, r8, asr lr
   19da4:	andeq	r9, r1, r4, lsl lr
   19da8:	andeq	r9, r1, r4, lsl lr
   19dac:	andeq	r9, r1, r8, asr lr
   19db0:	andeq	r9, r1, r8, asr lr
   19db4:	andeq	r9, r1, r8, asr lr
   19db8:	andeq	r9, r1, r8, asr lr
   19dbc:	andeq	r9, r1, r8, asr lr
   19dc0:	andeq	r9, r1, r8, asr lr
   19dc4:	andeq	r9, r1, r8, asr lr
   19dc8:	andeq	r9, r1, r8, asr lr
   19dcc:	andeq	r9, r1, r8, asr lr
   19dd0:	andeq	r9, r1, r8, asr lr
   19dd4:	andeq	r9, r1, r8, asr lr
   19dd8:	andeq	r9, r1, r8, asr lr
   19ddc:	andeq	r9, r1, r4, lsl lr
   19de0:	andeq	r9, r1, r8, asr lr
   19de4:	andeq	r9, r1, r8, asr lr
   19de8:	andeq	r9, r1, r8, asr lr
   19dec:	andeq	r9, r1, r4, lsl lr
   19df0:	andeq	r9, r1, r8, asr lr
   19df4:	andeq	r9, r1, r4, lsl lr
   19df8:	andeq	r9, r1, r8, asr lr
   19dfc:	andeq	r9, r1, r8, asr lr
   19e00:	andeq	r9, r1, r8, asr lr
   19e04:	andeq	r9, r1, r8, asr lr
   19e08:	andeq	r9, r1, r8, asr lr
   19e0c:	andeq	r9, r1, r8, asr lr
   19e10:	andeq	r9, r1, r4, lsl lr
   19e14:	mov	r1, #48	; 0x30
   19e18:	ldr	r0, [sp, #72]	; 0x48
   19e1c:	bl	1138c <strchr@plt>
   19e20:	cmp	r0, #0
   19e24:	beq	19e58 <__assert_fail@plt+0x897c>
   19e28:	ldrb	r3, [fp, #1]
   19e2c:	cmp	r3, #68	; 0x44
   19e30:	beq	1a384 <__assert_fail@plt+0x8ea8>
   19e34:	cmp	r3, #105	; 0x69
   19e38:	beq	1a028 <__assert_fail@plt+0x8b4c>
   19e3c:	cmp	r3, #66	; 0x42
   19e40:	moveq	r3, #2
   19e44:	movne	r3, #1
   19e48:	moveq	r7, #1000	; 0x3e8
   19e4c:	movne	r7, #1024	; 0x400
   19e50:	str	r3, [sp, #4]
   19e54:	b	19e64 <__assert_fail@plt+0x8988>
   19e58:	mov	r3, #1
   19e5c:	mov	r7, #1024	; 0x400
   19e60:	str	r3, [sp, #4]
   19e64:	sub	r6, r6, #66	; 0x42
   19e68:	cmp	r6, #53	; 0x35
   19e6c:	ldrls	pc, [pc, r6, lsl #2]
   19e70:	b	19fd4 <__assert_fail@plt+0x8af8>
   19e74:	andeq	sl, r1, ip, lsr #6
   19e78:	ldrdeq	r9, [r1], -r4
   19e7c:	ldrdeq	r9, [r1], -r4
   19e80:	andeq	sl, r1, r8, lsr r1
   19e84:	ldrdeq	r9, [r1], -r4
   19e88:	andeq	r9, r1, ip, asr #30
   19e8c:	ldrdeq	r9, [r1], -r4
   19e90:	ldrdeq	r9, [r1], -r4
   19e94:	ldrdeq	r9, [r1], -r4
   19e98:	ldrdeq	r9, [r1], -ip
   19e9c:	ldrdeq	r9, [r1], -r4
   19ea0:	ldrdeq	sl, [r1], -r8
   19ea4:	ldrdeq	r9, [r1], -r4
   19ea8:	ldrdeq	r9, [r1], -r4
   19eac:	andeq	sl, r1, r8, lsr #4
   19eb0:	ldrdeq	r9, [r1], -r4
   19eb4:	ldrdeq	r9, [r1], -r4
   19eb8:	ldrdeq	r9, [r1], -r4
   19ebc:			; <UNDEFINED> instruction: 0x0001a1b0
   19ec0:	ldrdeq	r9, [r1], -r4
   19ec4:	ldrdeq	r9, [r1], -r4
   19ec8:	ldrdeq	r9, [r1], -r4
   19ecc:	ldrdeq	r9, [r1], -r4
   19ed0:	andeq	sl, r1, r0, asr #1
   19ed4:	andeq	sl, r1, r4, asr #32
   19ed8:	ldrdeq	r9, [r1], -r4
   19edc:	ldrdeq	r9, [r1], -r4
   19ee0:	ldrdeq	r9, [r1], -r4
   19ee4:	ldrdeq	r9, [r1], -r4
   19ee8:	ldrdeq	r9, [r1], -r4
   19eec:	ldrdeq	r9, [r1], -r4
   19ef0:	ldrdeq	r9, [r1], -r4
   19ef4:			; <UNDEFINED> instruction: 0x0001a2b8
   19ef8:			; <UNDEFINED> instruction: 0x00019fbc
   19efc:	ldrdeq	r9, [r1], -r4
   19f00:	ldrdeq	r9, [r1], -r4
   19f04:	ldrdeq	r9, [r1], -r4
   19f08:	andeq	r9, r1, ip, asr #30
   19f0c:	ldrdeq	r9, [r1], -r4
   19f10:	ldrdeq	r9, [r1], -r4
   19f14:	ldrdeq	r9, [r1], -r4
   19f18:	ldrdeq	r9, [r1], -ip
   19f1c:	ldrdeq	r9, [r1], -r4
   19f20:	ldrdeq	sl, [r1], -r8
   19f24:	ldrdeq	r9, [r1], -r4
   19f28:	ldrdeq	r9, [r1], -r4
   19f2c:	ldrdeq	r9, [r1], -r4
   19f30:	ldrdeq	r9, [r1], -r4
   19f34:	ldrdeq	r9, [r1], -r4
   19f38:	ldrdeq	r9, [r1], -r4
   19f3c:			; <UNDEFINED> instruction: 0x0001a1b0
   19f40:	ldrdeq	r9, [r1], -r4
   19f44:	ldrdeq	r9, [r1], -r4
   19f48:	andeq	sl, r1, r0, lsr #5
   19f4c:	asr	r3, r7, #31
   19f50:	mov	r2, r7
   19f54:	cmp	r8, #0
   19f58:	umull	r0, r1, r9, r7
   19f5c:	mov	ip, #0
   19f60:	strd	r2, [sp, #8]
   19f64:	bne	1a3b8 <__assert_fail@plt+0x8edc>
   19f68:	mov	r2, r0
   19f6c:	mov	r3, r1
   19f70:	cmp	ip, #0
   19f74:	bne	1a000 <__assert_fail@plt+0x8b24>
   19f78:	cmp	r3, #0
   19f7c:	mov	lr, ip
   19f80:	bne	1a41c <__assert_fail@plt+0x8f40>
   19f84:	umull	r2, r3, r2, r7
   19f88:	mov	ip, r2
   19f8c:	mov	r1, r3
   19f90:	subs	r0, lr, #0
   19f94:	bne	1a000 <__assert_fail@plt+0x8b24>
   19f98:	cmp	r1, #0
   19f9c:	bne	1a3fc <__assert_fail@plt+0x8f20>
   19fa0:	umull	r2, r3, ip, r7
   19fa4:	mov	r6, r2
   19fa8:	mov	r2, r3
   19fac:	cmp	r0, #0
   19fb0:	mov	r9, r6
   19fb4:	mov	r8, r2
   19fb8:	bne	1a000 <__assert_fail@plt+0x8b24>
   19fbc:	ldr	r2, [sp, #4]
   19fc0:	add	r3, fp, r2
   19fc4:	str	r3, [r5]
   19fc8:	ldrb	r3, [fp, r2]
   19fcc:	cmp	r3, #0
   19fd0:	beq	19cd0 <__assert_fail@plt+0x87f4>
   19fd4:	orr	r4, r4, #2
   19fd8:	b	19cd0 <__assert_fail@plt+0x87f4>
   19fdc:	cmp	r8, #0
   19fe0:	umull	r2, r3, r9, r7
   19fe4:	mov	ip, #0
   19fe8:	asr	r1, r7, #31
   19fec:	bne	1a354 <__assert_fail@plt+0x8e78>
   19ff0:	mov	r9, r2
   19ff4:	mov	r8, r3
   19ff8:	cmp	ip, #0
   19ffc:	beq	19fbc <__assert_fail@plt+0x8ae0>
   1a000:	mvn	r9, #0
   1a004:	mov	r4, #1
   1a008:	mov	r8, r9
   1a00c:	b	19fbc <__assert_fail@plt+0x8ae0>
   1a010:	mov	r1, r6
   1a014:	ldr	r0, [sp, #72]	; 0x48
   1a018:	bl	1138c <strchr@plt>
   1a01c:	cmp	r0, #0
   1a020:	bne	19d44 <__assert_fail@plt+0x8868>
   1a024:	b	19fd4 <__assert_fail@plt+0x8af8>
   1a028:	ldrb	r3, [fp, #2]
   1a02c:	mov	r7, #1024	; 0x400
   1a030:	cmp	r3, #66	; 0x42
   1a034:	movne	r3, #1
   1a038:	moveq	r3, #3
   1a03c:	str	r3, [sp, #4]
   1a040:	b	19e64 <__assert_fail@plt+0x8988>
   1a044:	asr	r3, r7, #31
   1a048:	mov	r2, r7
   1a04c:	mov	ip, #0
   1a050:	mov	r0, #7
   1a054:	mov	lr, ip
   1a058:	mov	r6, r4
   1a05c:	strd	r2, [sp, #8]
   1a060:	str	r5, [sp, #16]
   1a064:	b	1a090 <__assert_fail@plt+0x8bb4>
   1a068:	umull	r2, r3, r9, r7
   1a06c:	mov	r9, r2
   1a070:	mov	r8, r3
   1a074:	cmp	r1, #0
   1a078:	beq	1a088 <__assert_fail@plt+0x8bac>
   1a07c:	mvn	r9, #0
   1a080:	mov	ip, #1
   1a084:	mov	r8, r9
   1a088:	subs	r0, r0, #1
   1a08c:	beq	1a378 <__assert_fail@plt+0x8e9c>
   1a090:	cmp	r8, #0
   1a094:	mov	r1, #0
   1a098:	beq	1a068 <__assert_fail@plt+0x8b8c>
   1a09c:	umull	r4, r5, r9, r7
   1a0a0:	mov	r3, lr
   1a0a4:	mov	r2, r5
   1a0a8:	umlal	r2, r3, r8, r7
   1a0ac:	cmp	r3, #0
   1a0b0:	bne	1a4d8 <__assert_fail@plt+0x8ffc>
   1a0b4:	mov	r9, r4
   1a0b8:	mov	r8, r2
   1a0bc:	b	1a074 <__assert_fail@plt+0x8b98>
   1a0c0:	asr	r3, r7, #31
   1a0c4:	mov	r2, r7
   1a0c8:	mov	r6, #0
   1a0cc:	mov	lr, #8
   1a0d0:	mov	r0, r4
   1a0d4:	mov	ip, r5
   1a0d8:	strd	r2, [sp, #8]
   1a0dc:	b	1a108 <__assert_fail@plt+0x8c2c>
   1a0e0:	umull	r2, r3, r9, r7
   1a0e4:	mov	r9, r2
   1a0e8:	mov	r8, r3
   1a0ec:	cmp	r1, #0
   1a0f0:	beq	1a100 <__assert_fail@plt+0x8c24>
   1a0f4:	mvn	r9, #0
   1a0f8:	mov	r6, #1
   1a0fc:	mov	r8, r9
   1a100:	subs	lr, lr, #1
   1a104:	beq	1a348 <__assert_fail@plt+0x8e6c>
   1a108:	cmp	r8, #0
   1a10c:	mov	r1, #0
   1a110:	beq	1a0e0 <__assert_fail@plt+0x8c04>
   1a114:	umull	r4, r5, r9, r7
   1a118:	mov	r3, #0
   1a11c:	mov	r2, r5
   1a120:	umlal	r2, r3, r8, r7
   1a124:	cmp	r3, #0
   1a128:	bne	1a530 <__assert_fail@plt+0x9054>
   1a12c:	mov	r9, r4
   1a130:	mov	r8, r2
   1a134:	b	1a0ec <__assert_fail@plt+0x8c10>
   1a138:	asr	r3, r7, #31
   1a13c:	mov	r2, r7
   1a140:	mov	r6, #0
   1a144:	mov	lr, #6
   1a148:	mov	r0, r4
   1a14c:	mov	ip, r5
   1a150:	strd	r2, [sp, #8]
   1a154:	b	1a180 <__assert_fail@plt+0x8ca4>
   1a158:	umull	r2, r3, r9, r7
   1a15c:	mov	r9, r2
   1a160:	mov	r8, r3
   1a164:	cmp	r1, #0
   1a168:	beq	1a178 <__assert_fail@plt+0x8c9c>
   1a16c:	mvn	r9, #0
   1a170:	mov	r6, #1
   1a174:	mov	r8, r9
   1a178:	subs	lr, lr, #1
   1a17c:	beq	1a348 <__assert_fail@plt+0x8e6c>
   1a180:	cmp	r8, #0
   1a184:	mov	r1, #0
   1a188:	beq	1a158 <__assert_fail@plt+0x8c7c>
   1a18c:	umull	r4, r5, r9, r7
   1a190:	mov	r3, #0
   1a194:	mov	r2, r5
   1a198:	umlal	r2, r3, r8, r7
   1a19c:	cmp	r3, #0
   1a1a0:	bne	1a4f8 <__assert_fail@plt+0x901c>
   1a1a4:	mov	r9, r4
   1a1a8:	mov	r8, r2
   1a1ac:	b	1a164 <__assert_fail@plt+0x8c88>
   1a1b0:	asr	r3, r7, #31
   1a1b4:	mov	r2, r7
   1a1b8:	mov	r6, #0
   1a1bc:	mov	lr, #4
   1a1c0:	mov	r0, r4
   1a1c4:	mov	ip, r5
   1a1c8:	strd	r2, [sp, #8]
   1a1cc:	b	1a1f8 <__assert_fail@plt+0x8d1c>
   1a1d0:	umull	r2, r3, r9, r7
   1a1d4:	mov	r9, r2
   1a1d8:	mov	r8, r3
   1a1dc:	cmp	r1, #0
   1a1e0:	beq	1a1f0 <__assert_fail@plt+0x8d14>
   1a1e4:	mvn	r9, #0
   1a1e8:	mov	r6, #1
   1a1ec:	mov	r8, r9
   1a1f0:	subs	lr, lr, #1
   1a1f4:	beq	1a348 <__assert_fail@plt+0x8e6c>
   1a1f8:	cmp	r8, #0
   1a1fc:	mov	r1, #0
   1a200:	beq	1a1d0 <__assert_fail@plt+0x8cf4>
   1a204:	umull	r4, r5, r9, r7
   1a208:	mov	r3, #0
   1a20c:	mov	r2, r5
   1a210:	umlal	r2, r3, r8, r7
   1a214:	cmp	r3, #0
   1a218:	bne	1a514 <__assert_fail@plt+0x9038>
   1a21c:	mov	r9, r4
   1a220:	mov	r8, r2
   1a224:	b	1a1dc <__assert_fail@plt+0x8d00>
   1a228:	asr	r3, r7, #31
   1a22c:	mov	r2, r7
   1a230:	mov	r6, #0
   1a234:	mov	lr, #5
   1a238:	mov	r0, r4
   1a23c:	mov	ip, r5
   1a240:	strd	r2, [sp, #8]
   1a244:	b	1a270 <__assert_fail@plt+0x8d94>
   1a248:	umull	r2, r3, r9, r7
   1a24c:	mov	r9, r2
   1a250:	mov	r8, r3
   1a254:	cmp	r1, #0
   1a258:	beq	1a268 <__assert_fail@plt+0x8d8c>
   1a25c:	mvn	r9, #0
   1a260:	mov	r6, #1
   1a264:	mov	r8, r9
   1a268:	subs	lr, lr, #1
   1a26c:	beq	1a348 <__assert_fail@plt+0x8e6c>
   1a270:	cmp	r8, #0
   1a274:	mov	r1, #0
   1a278:	beq	1a248 <__assert_fail@plt+0x8d6c>
   1a27c:	umull	r4, r5, r9, r7
   1a280:	mov	r3, #0
   1a284:	mov	r2, r5
   1a288:	umlal	r2, r3, r8, r7
   1a28c:	cmp	r3, #0
   1a290:	bne	1a480 <__assert_fail@plt+0x8fa4>
   1a294:	mov	r9, r4
   1a298:	mov	r8, r2
   1a29c:	b	1a254 <__assert_fail@plt+0x8d78>
   1a2a0:	lsr	r3, r8, #31
   1a2a4:	adds	r9, r9, r9
   1a2a8:	adc	r8, r8, r8
   1a2ac:	cmp	r3, #0
   1a2b0:	beq	19fbc <__assert_fail@plt+0x8ae0>
   1a2b4:	b	1a000 <__assert_fail@plt+0x8b24>
   1a2b8:	lsr	r3, r8, #23
   1a2bc:	lsl	r8, r8, #9
   1a2c0:	cmp	r3, #0
   1a2c4:	lsl	r3, r9, #9
   1a2c8:	orr	r8, r8, r9, lsr #23
   1a2cc:	bne	1a000 <__assert_fail@plt+0x8b24>
   1a2d0:	mov	r9, r3
   1a2d4:	b	19fbc <__assert_fail@plt+0x8ae0>
   1a2d8:	asr	r3, r7, #31
   1a2dc:	mov	r2, r7
   1a2e0:	cmp	r8, #0
   1a2e4:	mov	r1, #0
   1a2e8:	strd	r2, [sp, #8]
   1a2ec:	umull	r2, r3, r9, r7
   1a2f0:	bne	1a394 <__assert_fail@plt+0x8eb8>
   1a2f4:	mov	r0, r2
   1a2f8:	mov	ip, r3
   1a2fc:	cmp	r1, #0
   1a300:	bne	1a000 <__assert_fail@plt+0x8b24>
   1a304:	cmp	ip, #0
   1a308:	bne	1a3dc <__assert_fail@plt+0x8f00>
   1a30c:	umull	r2, r3, r0, r7
   1a310:	mov	r6, r2
   1a314:	mov	r2, r3
   1a318:	cmp	r1, #0
   1a31c:	mov	r9, r6
   1a320:	mov	r8, r2
   1a324:	beq	19fbc <__assert_fail@plt+0x8ae0>
   1a328:	b	1a000 <__assert_fail@plt+0x8b24>
   1a32c:	lsr	r3, r8, #22
   1a330:	lsl	r8, r8, #10
   1a334:	cmp	r3, #0
   1a338:	lsl	r3, r9, #10
   1a33c:	orr	r8, r8, r9, lsr #22
   1a340:	beq	1a2d0 <__assert_fail@plt+0x8df4>
   1a344:	b	1a000 <__assert_fail@plt+0x8b24>
   1a348:	mov	r5, ip
   1a34c:	orr	r4, r0, r6
   1a350:	b	19fbc <__assert_fail@plt+0x8ae0>
   1a354:	strd	r2, [sp, #8]
   1a358:	mov	r3, ip
   1a35c:	ldr	r2, [sp, #12]
   1a360:	umlal	r2, r3, r8, r7
   1a364:	cmp	r3, #0
   1a368:	bne	1a49c <__assert_fail@plt+0x8fc0>
   1a36c:	mov	r8, r2
   1a370:	ldr	r9, [sp, #8]
   1a374:	b	19ff8 <__assert_fail@plt+0x8b1c>
   1a378:	orr	r4, r6, ip
   1a37c:	ldr	r5, [sp, #16]
   1a380:	b	19fbc <__assert_fail@plt+0x8ae0>
   1a384:	mov	r3, #2
   1a388:	mov	r7, #1000	; 0x3e8
   1a38c:	str	r3, [sp, #4]
   1a390:	b	19e64 <__assert_fail@plt+0x8988>
   1a394:	strd	r2, [sp, #16]
   1a398:	mov	r3, r1
   1a39c:	ldr	r2, [sp, #20]
   1a3a0:	umlal	r2, r3, r8, r7
   1a3a4:	cmp	r3, #0
   1a3a8:	bne	1a56c <__assert_fail@plt+0x9090>
   1a3ac:	mov	ip, r2
   1a3b0:	ldr	r0, [sp, #16]
   1a3b4:	b	1a2fc <__assert_fail@plt+0x8e20>
   1a3b8:	mov	r2, r1
   1a3bc:	mov	r3, ip
   1a3c0:	umlal	r2, r3, r8, r7
   1a3c4:	cmp	r3, #0
   1a3c8:	strd	r2, [sp, #16]
   1a3cc:	bne	1a440 <__assert_fail@plt+0x8f64>
   1a3d0:	mov	r2, r0
   1a3d4:	ldr	r3, [sp, #16]
   1a3d8:	b	19f70 <__assert_fail@plt+0x8a94>
   1a3dc:	umull	r8, r9, r0, r7
   1a3e0:	mov	r3, r1
   1a3e4:	mov	r2, r9
   1a3e8:	umlal	r2, r3, ip, r7
   1a3ec:	cmp	r3, #0
   1a3f0:	bne	1a54c <__assert_fail@plt+0x9070>
   1a3f4:	mov	r6, r8
   1a3f8:	b	1a318 <__assert_fail@plt+0x8e3c>
   1a3fc:	umull	r8, r9, ip, r7
   1a400:	mov	r3, r0
   1a404:	mov	r2, r9
   1a408:	umlal	r2, r3, r1, r7
   1a40c:	cmp	r3, #0
   1a410:	bne	1a594 <__assert_fail@plt+0x90b8>
   1a414:	mov	r6, r8
   1a418:	b	19fac <__assert_fail@plt+0x8ad0>
   1a41c:	umull	r8, r9, r2, r7
   1a420:	mov	r1, ip
   1a424:	mov	r0, r9
   1a428:	umlal	r0, r1, r3, r7
   1a42c:	cmp	r1, #0
   1a430:	bne	1a460 <__assert_fail@plt+0x8f84>
   1a434:	mov	ip, r8
   1a438:	mov	r1, r0
   1a43c:	b	19f90 <__assert_fail@plt+0x8ab4>
   1a440:	ldr	lr, [sp, #8]
   1a444:	mov	r2, r0
   1a448:	mov	ip, #1
   1a44c:	ldr	r3, [sp, #12]
   1a450:	mul	r3, r9, r3
   1a454:	mla	r3, lr, r8, r3
   1a458:	add	r3, r3, r1
   1a45c:	b	19f70 <__assert_fail@plt+0x8a94>
   1a460:	ldr	r1, [sp, #12]
   1a464:	mov	lr, #1
   1a468:	mov	ip, r8
   1a46c:	mul	r1, r2, r1
   1a470:	ldr	r2, [sp, #8]
   1a474:	mla	r1, r3, r2, r1
   1a478:	add	r1, r1, r9
   1a47c:	b	19f90 <__assert_fail@plt+0x8ab4>
   1a480:	ldrd	r2, [sp, #8]
   1a484:	mov	r1, #1
   1a488:	mul	r3, r9, r3
   1a48c:	mov	r9, r4
   1a490:	mla	r8, r2, r8, r3
   1a494:	add	r8, r8, r5
   1a498:	b	1a254 <__assert_fail@plt+0x8d78>
   1a49c:	mul	r3, r9, r1
   1a4a0:	mov	ip, #1
   1a4a4:	mla	r8, r7, r8, r3
   1a4a8:	ldrd	r6, [sp, #8]
   1a4ac:	mov	r9, r6
   1a4b0:	add	r8, r8, r7
   1a4b4:	b	19ff8 <__assert_fail@plt+0x8b1c>
   1a4b8:	movw	r3, #54784	; 0xd600
   1a4bc:	movt	r3, #1
   1a4c0:	movw	r1, #54796	; 0xd60c
   1a4c4:	movt	r1, #1
   1a4c8:	movw	r0, #54812	; 0xd61c
   1a4cc:	movt	r0, #1
   1a4d0:	mov	r2, #85	; 0x55
   1a4d4:	bl	114dc <__assert_fail@plt>
   1a4d8:	ldr	r3, [sp, #12]
   1a4dc:	mov	r1, #1
   1a4e0:	mul	r2, r9, r3
   1a4e4:	ldr	r3, [sp, #8]
   1a4e8:	mov	r9, r4
   1a4ec:	mla	r8, r3, r8, r2
   1a4f0:	add	r8, r8, r5
   1a4f4:	b	1a074 <__assert_fail@plt+0x8b98>
   1a4f8:	ldrd	r2, [sp, #8]
   1a4fc:	mov	r1, #1
   1a500:	mul	r3, r9, r3
   1a504:	mov	r9, r4
   1a508:	mla	r8, r2, r8, r3
   1a50c:	add	r8, r8, r5
   1a510:	b	1a164 <__assert_fail@plt+0x8c88>
   1a514:	ldrd	r2, [sp, #8]
   1a518:	mov	r1, #1
   1a51c:	mul	r3, r9, r3
   1a520:	mov	r9, r4
   1a524:	mla	r8, r2, r8, r3
   1a528:	add	r8, r8, r5
   1a52c:	b	1a1dc <__assert_fail@plt+0x8d00>
   1a530:	ldrd	r2, [sp, #8]
   1a534:	mov	r1, #1
   1a538:	mul	r3, r9, r3
   1a53c:	mov	r9, r4
   1a540:	mla	r8, r2, r8, r3
   1a544:	add	r8, r8, r5
   1a548:	b	1a0ec <__assert_fail@plt+0x8c10>
   1a54c:	ldr	r3, [sp, #12]
   1a550:	mov	r6, r8
   1a554:	mov	r1, #1
   1a558:	mul	r2, r0, r3
   1a55c:	ldr	r3, [sp, #8]
   1a560:	mla	r2, ip, r3, r2
   1a564:	add	r2, r2, r9
   1a568:	b	1a318 <__assert_fail@plt+0x8e3c>
   1a56c:	ldr	r3, [sp, #12]
   1a570:	mov	r1, #1
   1a574:	ldr	r2, [sp, #16]
   1a578:	mul	ip, r9, r3
   1a57c:	ldr	r3, [sp, #8]
   1a580:	mov	r0, r2
   1a584:	mla	ip, r3, r8, ip
   1a588:	ldr	r3, [sp, #20]
   1a58c:	add	ip, ip, r3
   1a590:	b	1a2fc <__assert_fail@plt+0x8e20>
   1a594:	ldr	r3, [sp, #12]
   1a598:	mov	r6, r8
   1a59c:	mov	r0, #1
   1a5a0:	mul	r2, ip, r3
   1a5a4:	ldr	r3, [sp, #8]
   1a5a8:	mla	r2, r1, r3, r2
   1a5ac:	add	r2, r2, r9
   1a5b0:	b	19fac <__assert_fail@plt+0x8ad0>
   1a5b4:	strd	r4, [sp, #-28]!	; 0xffffffe4
   1a5b8:	strd	r6, [sp, #8]
   1a5bc:	subs	r7, r0, #0
   1a5c0:	strd	r8, [sp, #16]
   1a5c4:	str	lr, [sp, #24]
   1a5c8:	sub	sp, sp, #12
   1a5cc:	str	r1, [sp, #4]
   1a5d0:	beq	1a67c <__assert_fail@plt+0x91a0>
   1a5d4:	mov	r8, r1
   1a5d8:	mov	r5, r1
   1a5dc:	mov	r6, r7
   1a5e0:	mov	r4, #0
   1a5e4:	add	r5, r5, #4
   1a5e8:	ldr	r0, [r5, #-4]
   1a5ec:	str	r5, [sp, #4]
   1a5f0:	bl	11380 <strlen@plt>
   1a5f4:	adds	r4, r0, r4
   1a5f8:	mvncs	r4, #0
   1a5fc:	subs	r6, r6, #1
   1a600:	bne	1a5e4 <__assert_fail@plt+0x9108>
   1a604:	cmp	r4, #0
   1a608:	blt	1a66c <__assert_fail@plt+0x9190>
   1a60c:	add	r0, r4, #1
   1a610:	bl	19750 <__assert_fail@plt+0x8274>
   1a614:	mov	r6, r0
   1a618:	mov	r4, r0
   1a61c:	ldr	r9, [r8], #4
   1a620:	mov	r0, r9
   1a624:	bl	11380 <strlen@plt>
   1a628:	mov	r5, r0
   1a62c:	mov	r2, r0
   1a630:	mov	r1, r9
   1a634:	mov	r0, r4
   1a638:	bl	111e8 <memcpy@plt>
   1a63c:	subs	r7, r7, #1
   1a640:	add	r4, r4, r5
   1a644:	bne	1a61c <__assert_fail@plt+0x9140>
   1a648:	mov	r3, #0
   1a64c:	strb	r3, [r4]
   1a650:	mov	r0, r6
   1a654:	add	sp, sp, #12
   1a658:	ldrd	r4, [sp]
   1a65c:	ldrd	r6, [sp, #8]
   1a660:	ldrd	r8, [sp, #16]
   1a664:	add	sp, sp, #24
   1a668:	pop	{pc}		; (ldr pc, [sp], #4)
   1a66c:	bl	113a4 <__errno_location@plt>
   1a670:	mov	r3, #75	; 0x4b
   1a674:	str	r3, [r0]
   1a678:	b	1a650 <__assert_fail@plt+0x9174>
   1a67c:	mov	r0, #1
   1a680:	bl	19750 <__assert_fail@plt+0x8274>
   1a684:	mov	r4, r0
   1a688:	mov	r6, r0
   1a68c:	b	1a648 <__assert_fail@plt+0x916c>
   1a690:	push	{lr}		; (str lr, [sp, #-4]!)
   1a694:	sub	sp, sp, #12
   1a698:	ldrb	ip, [r0]
   1a69c:	cmp	ip, #0
   1a6a0:	beq	1a6e8 <__assert_fail@plt+0x920c>
   1a6a4:	cmp	ip, #37	; 0x25
   1a6a8:	bne	1a6f8 <__assert_fail@plt+0x921c>
   1a6ac:	ldrb	r3, [r0, #1]
   1a6b0:	cmp	r3, #115	; 0x73
   1a6b4:	bne	1a6f8 <__assert_fail@plt+0x921c>
   1a6b8:	mov	ip, #0
   1a6bc:	add	r2, r0, #1
   1a6c0:	b	1a6d8 <__assert_fail@plt+0x91fc>
   1a6c4:	cmp	lr, #37	; 0x25
   1a6c8:	bne	1a6f8 <__assert_fail@plt+0x921c>
   1a6cc:	ldrb	lr, [r2, ip, lsl #1]
   1a6d0:	cmp	lr, #115	; 0x73
   1a6d4:	bne	1a6f8 <__assert_fail@plt+0x921c>
   1a6d8:	add	ip, ip, #1
   1a6dc:	ldrb	lr, [r0, ip, lsl #1]
   1a6e0:	cmp	lr, #0
   1a6e4:	bne	1a6c4 <__assert_fail@plt+0x91e8>
   1a6e8:	mov	r0, ip
   1a6ec:	bl	1a5b4 <__assert_fail@plt+0x90d8>
   1a6f0:	add	sp, sp, #12
   1a6f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a6f8:	mov	r3, r1
   1a6fc:	mov	r2, r0
   1a700:	mov	r1, #1
   1a704:	add	r0, sp, #4
   1a708:	bl	113c8 <__vasprintf_chk@plt>
   1a70c:	cmp	r0, #0
   1a710:	blt	1a720 <__assert_fail@plt+0x9244>
   1a714:	ldr	r0, [sp, #4]
   1a718:	add	sp, sp, #12
   1a71c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a720:	bl	113a4 <__errno_location@plt>
   1a724:	ldr	r3, [r0]
   1a728:	cmp	r3, #12
   1a72c:	movne	r0, #0
   1a730:	bne	1a718 <__assert_fail@plt+0x923c>
   1a734:	bl	19bc8 <__assert_fail@plt+0x86ec>
   1a738:	cmp	r1, #0
   1a73c:	cmpne	r0, #0
   1a740:	beq	1a78c <__assert_fail@plt+0x92b0>
   1a744:	strd	r4, [sp, #-16]!
   1a748:	umull	r4, r5, r0, r1
   1a74c:	str	r6, [sp, #8]
   1a750:	str	lr, [sp, #12]
   1a754:	adds	r3, r5, #0
   1a758:	movne	r3, #1
   1a75c:	cmp	r4, #0
   1a760:	blt	1a76c <__assert_fail@plt+0x9290>
   1a764:	cmp	r3, #0
   1a768:	beq	1a798 <__assert_fail@plt+0x92bc>
   1a76c:	bl	113a4 <__errno_location@plt>
   1a770:	mov	r3, #12
   1a774:	ldrd	r4, [sp]
   1a778:	ldr	r6, [sp, #8]
   1a77c:	add	sp, sp, #12
   1a780:	str	r3, [r0]
   1a784:	mov	r0, #0
   1a788:	pop	{pc}		; (ldr pc, [sp], #4)
   1a78c:	mov	r1, #1
   1a790:	mov	r0, r1
   1a794:	b	1114c <calloc@plt>
   1a798:	ldrd	r4, [sp]
   1a79c:	ldr	r6, [sp, #8]
   1a7a0:	ldr	lr, [sp, #12]
   1a7a4:	add	sp, sp, #16
   1a7a8:	b	1114c <calloc@plt>
   1a7ac:	cmp	r0, #0
   1a7b0:	beq	1a7bc <__assert_fail@plt+0x92e0>
   1a7b4:	blt	1a7c4 <__assert_fail@plt+0x92e8>
   1a7b8:	b	112fc <malloc@plt>
   1a7bc:	mov	r0, #1
   1a7c0:	b	112fc <malloc@plt>
   1a7c4:	str	r4, [sp, #-8]!
   1a7c8:	str	lr, [sp, #4]
   1a7cc:	bl	113a4 <__errno_location@plt>
   1a7d0:	mov	r3, #12
   1a7d4:	ldr	r4, [sp]
   1a7d8:	add	sp, sp, #4
   1a7dc:	str	r3, [r0]
   1a7e0:	mov	r0, #0
   1a7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7e8:	cmp	r0, #0
   1a7ec:	beq	1a814 <__assert_fail@plt+0x9338>
   1a7f0:	cmp	r1, #0
   1a7f4:	str	r4, [sp, #-8]!
   1a7f8:	str	lr, [sp, #4]
   1a7fc:	beq	1a81c <__assert_fail@plt+0x9340>
   1a800:	blt	1a830 <__assert_fail@plt+0x9354>
   1a804:	ldr	r4, [sp]
   1a808:	ldr	lr, [sp, #4]
   1a80c:	add	sp, sp, #8
   1a810:	b	11248 <realloc@plt>
   1a814:	mov	r0, r1
   1a818:	b	1a7ac <__assert_fail@plt+0x92d0>
   1a81c:	bl	1acb0 <__assert_fail@plt+0x97d4>
   1a820:	ldr	r4, [sp]
   1a824:	add	sp, sp, #4
   1a828:	mov	r0, #0
   1a82c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a830:	bl	113a4 <__errno_location@plt>
   1a834:	mov	r3, #12
   1a838:	str	r3, [r0]
   1a83c:	b	1a820 <__assert_fail@plt+0x9344>
   1a840:	mov	r0, #1
   1a844:	b	14318 <__assert_fail@plt+0x2e3c>
   1a848:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1a84c:	mov	r5, r1
   1a850:	mov	r4, r2
   1a854:	strd	r6, [sp, #8]
   1a858:	mov	r7, r3
   1a85c:	strd	r8, [sp, #16]
   1a860:	strd	sl, [sp, #24]
   1a864:	mov	sl, r0
   1a868:	str	lr, [sp, #32]
   1a86c:	sub	sp, sp, #12
   1a870:	str	r2, [sp]
   1a874:	bl	11380 <strlen@plt>
   1a878:	ldr	fp, [r5]
   1a87c:	cmp	fp, #0
   1a880:	beq	1a950 <__assert_fail@plt+0x9474>
   1a884:	mov	r6, #0
   1a888:	mov	r8, r0
   1a88c:	mvn	r9, #0
   1a890:	str	r6, [sp, #4]
   1a894:	b	1a8c0 <__assert_fail@plt+0x93e4>
   1a898:	bl	11218 <memcmp@plt>
   1a89c:	ldr	r3, [sp, #4]
   1a8a0:	cmp	r0, #0
   1a8a4:	movne	r3, #1
   1a8a8:	str	r3, [sp, #4]
   1a8ac:	ldr	fp, [r5, #4]!
   1a8b0:	add	r6, r6, #1
   1a8b4:	add	r4, r4, r7
   1a8b8:	cmp	fp, #0
   1a8bc:	beq	1a91c <__assert_fail@plt+0x9440>
   1a8c0:	mov	r2, r8
   1a8c4:	mov	r1, sl
   1a8c8:	mov	r0, fp
   1a8cc:	bl	11494 <strncmp@plt>
   1a8d0:	cmp	r0, #0
   1a8d4:	mov	r0, fp
   1a8d8:	bne	1a8ac <__assert_fail@plt+0x93d0>
   1a8dc:	bl	11380 <strlen@plt>
   1a8e0:	ldr	r3, [sp]
   1a8e4:	cmp	r0, r8
   1a8e8:	mov	r2, r7
   1a8ec:	mov	r1, r4
   1a8f0:	mla	r0, r7, r9, r3
   1a8f4:	beq	1a948 <__assert_fail@plt+0x946c>
   1a8f8:	cmn	r9, #1
   1a8fc:	moveq	r9, r6
   1a900:	beq	1a8ac <__assert_fail@plt+0x93d0>
   1a904:	ldr	r3, [sp]
   1a908:	cmp	r3, #0
   1a90c:	bne	1a898 <__assert_fail@plt+0x93bc>
   1a910:	mov	r3, #1
   1a914:	str	r3, [sp, #4]
   1a918:	b	1a8ac <__assert_fail@plt+0x93d0>
   1a91c:	ldr	r3, [sp, #4]
   1a920:	cmp	r3, #0
   1a924:	mvnne	r9, #1
   1a928:	mov	r0, r9
   1a92c:	add	sp, sp, #12
   1a930:	ldrd	r4, [sp]
   1a934:	ldrd	r6, [sp, #8]
   1a938:	ldrd	r8, [sp, #16]
   1a93c:	ldrd	sl, [sp, #24]
   1a940:	add	sp, sp, #32
   1a944:	pop	{pc}		; (ldr pc, [sp], #4)
   1a948:	mov	r9, r6
   1a94c:	b	1a928 <__assert_fail@plt+0x944c>
   1a950:	mvn	r9, #0
   1a954:	b	1a928 <__assert_fail@plt+0x944c>
   1a958:	strd	r4, [sp, #-16]!
   1a95c:	str	r6, [sp, #8]
   1a960:	mov	r6, r0
   1a964:	ldr	r0, [r1]
   1a968:	str	lr, [sp, #12]
   1a96c:	cmp	r0, #0
   1a970:	beq	1a9b4 <__assert_fail@plt+0x94d8>
   1a974:	mov	r4, r1
   1a978:	mov	r5, #0
   1a97c:	b	1a990 <__assert_fail@plt+0x94b4>
   1a980:	ldr	r0, [r4, #4]!
   1a984:	add	r5, r5, #1
   1a988:	cmp	r0, #0
   1a98c:	beq	1a9b4 <__assert_fail@plt+0x94d8>
   1a990:	mov	r1, r6
   1a994:	bl	1117c <strcmp@plt>
   1a998:	cmp	r0, #0
   1a99c:	bne	1a980 <__assert_fail@plt+0x94a4>
   1a9a0:	mov	r0, r5
   1a9a4:	ldrd	r4, [sp]
   1a9a8:	ldr	r6, [sp, #8]
   1a9ac:	add	sp, sp, #12
   1a9b0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9b4:	ldrd	r4, [sp]
   1a9b8:	mvn	r0, #0
   1a9bc:	ldr	r6, [sp, #8]
   1a9c0:	add	sp, sp, #12
   1a9c4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a9c8:	cmn	r2, #1
   1a9cc:	strd	r4, [sp, #-16]!
   1a9d0:	mov	r5, r1
   1a9d4:	movweq	r1, #54852	; 0xd644
   1a9d8:	movwne	r1, #54880	; 0xd660
   1a9dc:	str	r6, [sp, #8]
   1a9e0:	movteq	r1, #1
   1a9e4:	movtne	r1, #1
   1a9e8:	str	lr, [sp, #12]
   1a9ec:	mov	r6, r0
   1a9f0:	sub	sp, sp, #8
   1a9f4:	mov	r2, #5
   1a9f8:	mov	r0, #0
   1a9fc:	bl	11230 <dcgettext@plt>
   1aa00:	mov	r4, r0
   1aa04:	mov	r2, r5
   1aa08:	mov	r1, #8
   1aa0c:	mov	r0, #0
   1aa10:	bl	18d78 <__assert_fail@plt+0x789c>
   1aa14:	mov	r5, r0
   1aa18:	mov	r1, r6
   1aa1c:	mov	r0, #1
   1aa20:	bl	190a8 <__assert_fail@plt+0x7bcc>
   1aa24:	mov	r1, #0
   1aa28:	mov	r3, r5
   1aa2c:	str	r0, [sp]
   1aa30:	mov	r2, r4
   1aa34:	mov	r0, r1
   1aa38:	bl	112d8 <error@plt>
   1aa3c:	add	sp, sp, #8
   1aa40:	ldrd	r4, [sp]
   1aa44:	ldr	r6, [sp, #8]
   1aa48:	add	sp, sp, #12
   1aa4c:	pop	{pc}		; (ldr pc, [sp], #4)
   1aa50:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1aa54:	mov	r4, r1
   1aa58:	movw	r1, #54912	; 0xd680
   1aa5c:	movt	r1, #1
   1aa60:	strd	r6, [sp, #8]
   1aa64:	mov	r6, r0
   1aa68:	mov	r7, r2
   1aa6c:	mov	r0, #0
   1aa70:	strd	r8, [sp, #16]
   1aa74:	mov	r2, #5
   1aa78:	strd	sl, [sp, #24]
   1aa7c:	movw	sl, #57816	; 0xe1d8
   1aa80:	movt	sl, #2
   1aa84:	str	lr, [sp, #32]
   1aa88:	sub	sp, sp, #12
   1aa8c:	bl	11230 <dcgettext@plt>
   1aa90:	ldr	r1, [sl]
   1aa94:	bl	11158 <fputs_unlocked@plt>
   1aa98:	ldr	fp, [r6]
   1aa9c:	cmp	fp, #0
   1aaa0:	beq	1ab40 <__assert_fail@plt+0x9664>
   1aaa4:	movw	r3, #54936	; 0xd698
   1aaa8:	movt	r3, #1
   1aaac:	mov	r9, #0
   1aab0:	str	r3, [sp]
   1aab4:	movw	r3, #48124	; 0xbbfc
   1aab8:	movt	r3, #1
   1aabc:	mov	r5, r9
   1aac0:	str	r3, [sp, #4]
   1aac4:	b	1aafc <__assert_fail@plt+0x9620>
   1aac8:	mov	r0, fp
   1aacc:	mov	r9, r4
   1aad0:	bl	190b8 <__assert_fail@plt+0x7bdc>
   1aad4:	mov	r3, r0
   1aad8:	mov	r1, #1
   1aadc:	ldr	r2, [sp]
   1aae0:	mov	r0, r8
   1aae4:	bl	11404 <__fprintf_chk@plt>
   1aae8:	ldr	fp, [r6, #4]!
   1aaec:	add	r5, r5, #1
   1aaf0:	add	r4, r4, r7
   1aaf4:	cmp	fp, #0
   1aaf8:	beq	1ab40 <__assert_fail@plt+0x9664>
   1aafc:	cmp	r5, #0
   1ab00:	mov	r1, r4
   1ab04:	ldr	r8, [sl]
   1ab08:	mov	r2, r7
   1ab0c:	mov	r0, r9
   1ab10:	beq	1aac8 <__assert_fail@plt+0x95ec>
   1ab14:	bl	11218 <memcmp@plt>
   1ab18:	cmp	r0, #0
   1ab1c:	bne	1aac8 <__assert_fail@plt+0x95ec>
   1ab20:	mov	r0, fp
   1ab24:	bl	190b8 <__assert_fail@plt+0x7bdc>
   1ab28:	mov	r3, r0
   1ab2c:	mov	r1, #1
   1ab30:	ldr	r2, [sp, #4]
   1ab34:	mov	r0, r8
   1ab38:	bl	11404 <__fprintf_chk@plt>
   1ab3c:	b	1aae8 <__assert_fail@plt+0x960c>
   1ab40:	ldr	r0, [sl]
   1ab44:	ldr	r3, [r0, #20]
   1ab48:	ldr	r2, [r0, #24]
   1ab4c:	cmp	r3, r2
   1ab50:	bcs	1ab80 <__assert_fail@plt+0x96a4>
   1ab54:	add	r1, r3, #1
   1ab58:	mov	r2, #10
   1ab5c:	str	r1, [r0, #20]
   1ab60:	strb	r2, [r3]
   1ab64:	add	sp, sp, #12
   1ab68:	ldrd	r4, [sp]
   1ab6c:	ldrd	r6, [sp, #8]
   1ab70:	ldrd	r8, [sp, #16]
   1ab74:	ldrd	sl, [sp, #24]
   1ab78:	add	sp, sp, #32
   1ab7c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ab80:	mov	r1, #10
   1ab84:	add	sp, sp, #12
   1ab88:	ldrd	r4, [sp]
   1ab8c:	ldrd	r6, [sp, #8]
   1ab90:	ldrd	r8, [sp, #16]
   1ab94:	ldrd	sl, [sp, #24]
   1ab98:	ldr	lr, [sp, #32]
   1ab9c:	add	sp, sp, #36	; 0x24
   1aba0:	b	11434 <__overflow@plt>
   1aba4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1aba8:	mov	r5, r1
   1abac:	mov	r4, r2
   1abb0:	ldrb	ip, [sp, #32]
   1abb4:	strd	r6, [sp, #8]
   1abb8:	mov	r7, r0
   1abbc:	mov	r6, r3
   1abc0:	str	r8, [sp, #16]
   1abc4:	str	lr, [sp, #20]
   1abc8:	cmp	ip, #0
   1abcc:	beq	1ac00 <__assert_fail@plt+0x9724>
   1abd0:	mov	r2, r3
   1abd4:	mov	r1, r4
   1abd8:	ldr	r3, [sp, #24]
   1abdc:	mov	r0, r5
   1abe0:	bl	1a848 <__assert_fail@plt+0x936c>
   1abe4:	cmp	r0, #0
   1abe8:	blt	1ac10 <__assert_fail@plt+0x9734>
   1abec:	ldrd	r4, [sp]
   1abf0:	ldrd	r6, [sp, #8]
   1abf4:	ldr	r8, [sp, #16]
   1abf8:	add	sp, sp, #20
   1abfc:	pop	{pc}		; (ldr pc, [sp], #4)
   1ac00:	mov	r1, r2
   1ac04:	mov	r0, r5
   1ac08:	bl	1a958 <__assert_fail@plt+0x947c>
   1ac0c:	b	1abe4 <__assert_fail@plt+0x9708>
   1ac10:	mov	r2, r0
   1ac14:	mov	r1, r5
   1ac18:	mov	r0, r7
   1ac1c:	bl	1a9c8 <__assert_fail@plt+0x94ec>
   1ac20:	mov	r0, r4
   1ac24:	mov	r1, r6
   1ac28:	ldr	r2, [sp, #24]
   1ac2c:	bl	1aa50 <__assert_fail@plt+0x9574>
   1ac30:	ldr	r3, [sp, #28]
   1ac34:	blx	r3
   1ac38:	mvn	r0, #0
   1ac3c:	b	1abec <__assert_fail@plt+0x9710>
   1ac40:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1ac44:	strd	r6, [sp, #8]
   1ac48:	ldr	r7, [r1]
   1ac4c:	str	r8, [sp, #16]
   1ac50:	str	lr, [sp, #20]
   1ac54:	cmp	r7, #0
   1ac58:	beq	1ac98 <__assert_fail@plt+0x97bc>
   1ac5c:	mov	r6, r3
   1ac60:	mov	r8, r0
   1ac64:	mov	r4, r2
   1ac68:	mov	r5, r1
   1ac6c:	b	1ac7c <__assert_fail@plt+0x97a0>
   1ac70:	ldr	r7, [r5, #4]!
   1ac74:	cmp	r7, #0
   1ac78:	beq	1ac98 <__assert_fail@plt+0x97bc>
   1ac7c:	mov	r1, r4
   1ac80:	mov	r2, r6
   1ac84:	mov	r0, r8
   1ac88:	add	r4, r4, r6
   1ac8c:	bl	11218 <memcmp@plt>
   1ac90:	cmp	r0, #0
   1ac94:	bne	1ac70 <__assert_fail@plt+0x9794>
   1ac98:	mov	r0, r7
   1ac9c:	ldrd	r4, [sp]
   1aca0:	ldrd	r6, [sp, #8]
   1aca4:	ldr	r8, [sp, #16]
   1aca8:	add	sp, sp, #20
   1acac:	pop	{pc}		; (ldr pc, [sp], #4)
   1acb0:	strd	r4, [sp, #-12]!
   1acb4:	mov	r5, r0
   1acb8:	str	lr, [sp, #8]
   1acbc:	sub	sp, sp, #12
   1acc0:	bl	113a4 <__errno_location@plt>
   1acc4:	mov	r4, r0
   1acc8:	mov	r2, #0
   1accc:	ldr	r3, [r4]
   1acd0:	mov	r0, r5
   1acd4:	str	r2, [r4]
   1acd8:	str	r3, [sp]
   1acdc:	str	r3, [sp, #4]
   1ace0:	bl	111c4 <free@plt>
   1ace4:	ldr	r3, [r4]
   1ace8:	add	r2, sp, #8
   1acec:	clz	r3, r3
   1acf0:	lsr	r3, r3, #5
   1acf4:	add	r3, r2, r3, lsl #2
   1acf8:	ldr	r3, [r3, #-8]
   1acfc:	str	r3, [r4]
   1ad00:	add	sp, sp, #12
   1ad04:	ldrd	r4, [sp]
   1ad08:	add	sp, sp, #8
   1ad0c:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad10:	mov	r0, #14
   1ad14:	str	r4, [sp, #-8]!
   1ad18:	str	lr, [sp, #4]
   1ad1c:	bl	11464 <nl_langinfo@plt>
   1ad20:	cmp	r0, #0
   1ad24:	beq	1ad48 <__assert_fail@plt+0x986c>
   1ad28:	ldrb	r2, [r0]
   1ad2c:	movw	r3, #54944	; 0xd6a0
   1ad30:	movt	r3, #1
   1ad34:	ldr	r4, [sp]
   1ad38:	add	sp, sp, #4
   1ad3c:	cmp	r2, #0
   1ad40:	moveq	r0, r3
   1ad44:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad48:	ldr	r4, [sp]
   1ad4c:	add	sp, sp, #4
   1ad50:	movw	r0, #54944	; 0xd6a0
   1ad54:	movt	r0, #1
   1ad58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ad5c:	strd	r4, [sp, #-20]!	; 0xffffffec
   1ad60:	mov	r5, r2
   1ad64:	strd	r6, [sp, #8]
   1ad68:	subs	r6, r0, #0
   1ad6c:	mov	r7, r1
   1ad70:	str	lr, [sp, #16]
   1ad74:	sub	sp, sp, #12
   1ad78:	addeq	r6, sp, #4
   1ad7c:	mov	r0, r6
   1ad80:	bl	112cc <mbrtowc@plt>
   1ad84:	cmp	r5, #0
   1ad88:	cmnne	r0, #3
   1ad8c:	mov	r4, r0
   1ad90:	bhi	1adac <__assert_fail@plt+0x98d0>
   1ad94:	mov	r0, r4
   1ad98:	add	sp, sp, #12
   1ad9c:	ldrd	r4, [sp]
   1ada0:	ldrd	r6, [sp, #8]
   1ada4:	add	sp, sp, #16
   1ada8:	pop	{pc}		; (ldr pc, [sp], #4)
   1adac:	mov	r0, #0
   1adb0:	bl	1ae04 <__assert_fail@plt+0x9928>
   1adb4:	cmp	r0, #0
   1adb8:	bne	1ad94 <__assert_fail@plt+0x98b8>
   1adbc:	ldrb	r3, [r7]
   1adc0:	mov	r4, #1
   1adc4:	str	r3, [r6]
   1adc8:	b	1ad94 <__assert_fail@plt+0x98b8>
   1adcc:	umull	r2, r3, r1, r2
   1add0:	cmp	r3, #0
   1add4:	bne	1ade0 <__assert_fail@plt+0x9904>
   1add8:	mov	r1, r2
   1addc:	b	1a7e8 <__assert_fail@plt+0x930c>
   1ade0:	str	r4, [sp, #-8]!
   1ade4:	str	lr, [sp, #4]
   1ade8:	bl	113a4 <__errno_location@plt>
   1adec:	mov	r3, #12
   1adf0:	ldr	r4, [sp]
   1adf4:	add	sp, sp, #4
   1adf8:	str	r3, [r0]
   1adfc:	mov	r0, #0
   1ae00:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae04:	push	{lr}		; (str lr, [sp, #-4]!)
   1ae08:	sub	sp, sp, #268	; 0x10c
   1ae0c:	movw	r2, #257	; 0x101
   1ae10:	add	r1, sp, #4
   1ae14:	bl	1ae5c <__assert_fail@plt+0x9980>
   1ae18:	cmp	r0, #0
   1ae1c:	movne	r0, #0
   1ae20:	bne	1ae54 <__assert_fail@plt+0x9978>
   1ae24:	movw	r1, #54952	; 0xd6a8
   1ae28:	movt	r1, #1
   1ae2c:	add	r0, sp, #4
   1ae30:	bl	1117c <strcmp@plt>
   1ae34:	cmp	r0, #0
   1ae38:	beq	1ae54 <__assert_fail@plt+0x9978>
   1ae3c:	add	r0, sp, #4
   1ae40:	movw	r1, #54956	; 0xd6ac
   1ae44:	movt	r1, #1
   1ae48:	bl	1117c <strcmp@plt>
   1ae4c:	adds	r0, r0, #0
   1ae50:	movne	r0, #1
   1ae54:	add	sp, sp, #268	; 0x10c
   1ae58:	pop	{pc}		; (ldr pc, [sp], #4)
   1ae5c:	strd	r4, [sp, #-16]!
   1ae60:	mov	r5, r1
   1ae64:	mov	r1, #0
   1ae68:	mov	r4, r2
   1ae6c:	str	r6, [sp, #8]
   1ae70:	str	lr, [sp, #12]
   1ae74:	bl	11440 <setlocale@plt>
   1ae78:	subs	r6, r0, #0
   1ae7c:	beq	1aefc <__assert_fail@plt+0x9a20>
   1ae80:	bl	11380 <strlen@plt>
   1ae84:	cmp	r4, r0
   1ae88:	bhi	1aea8 <__assert_fail@plt+0x99cc>
   1ae8c:	cmp	r4, #0
   1ae90:	moveq	r0, #34	; 0x22
   1ae94:	bne	1aecc <__assert_fail@plt+0x99f0>
   1ae98:	ldrd	r4, [sp]
   1ae9c:	ldr	r6, [sp, #8]
   1aea0:	add	sp, sp, #12
   1aea4:	pop	{pc}		; (ldr pc, [sp], #4)
   1aea8:	add	r2, r0, #1
   1aeac:	mov	r1, r6
   1aeb0:	mov	r0, r5
   1aeb4:	bl	111e8 <memcpy@plt>
   1aeb8:	ldrd	r4, [sp]
   1aebc:	mov	r0, #0
   1aec0:	ldr	r6, [sp, #8]
   1aec4:	add	sp, sp, #12
   1aec8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aecc:	sub	r4, r4, #1
   1aed0:	mov	r1, r6
   1aed4:	mov	r2, r4
   1aed8:	mov	r0, r5
   1aedc:	bl	111e8 <memcpy@plt>
   1aee0:	mov	r3, #0
   1aee4:	mov	r0, #34	; 0x22
   1aee8:	strb	r3, [r5, r4]
   1aeec:	ldrd	r4, [sp]
   1aef0:	ldr	r6, [sp, #8]
   1aef4:	add	sp, sp, #12
   1aef8:	pop	{pc}		; (ldr pc, [sp], #4)
   1aefc:	cmp	r4, #0
   1af00:	mov	r0, #22
   1af04:	strbne	r6, [r5]
   1af08:	ldrd	r4, [sp]
   1af0c:	ldr	r6, [sp, #8]
   1af10:	add	sp, sp, #12
   1af14:	pop	{pc}		; (ldr pc, [sp], #4)
   1af18:	mov	r1, #0
   1af1c:	b	11440 <setlocale@plt>
   1af20:	eor	r1, r1, #-2147483648	; 0x80000000
   1af24:	b	1af2c <__assert_fail@plt+0x9a50>
   1af28:	eor	r3, r3, #-2147483648	; 0x80000000
   1af2c:	push	{r4, r5, lr}
   1af30:	lsl	r4, r1, #1
   1af34:	lsl	r5, r3, #1
   1af38:	teq	r4, r5
   1af3c:	teqeq	r0, r2
   1af40:	orrsne	ip, r4, r0
   1af44:	orrsne	ip, r5, r2
   1af48:	mvnsne	ip, r4, asr #21
   1af4c:	mvnsne	ip, r5, asr #21
   1af50:	beq	1b13c <__assert_fail@plt+0x9c60>
   1af54:	lsr	r4, r4, #21
   1af58:	rsbs	r5, r4, r5, lsr #21
   1af5c:	rsblt	r5, r5, #0
   1af60:	ble	1af80 <__assert_fail@plt+0x9aa4>
   1af64:	add	r4, r4, r5
   1af68:	eor	r2, r0, r2
   1af6c:	eor	r3, r1, r3
   1af70:	eor	r0, r2, r0
   1af74:	eor	r1, r3, r1
   1af78:	eor	r2, r0, r2
   1af7c:	eor	r3, r1, r3
   1af80:	cmp	r5, #54	; 0x36
   1af84:	pophi	{r4, r5, pc}
   1af88:	tst	r1, #-2147483648	; 0x80000000
   1af8c:	lsl	r1, r1, #12
   1af90:	mov	ip, #1048576	; 0x100000
   1af94:	orr	r1, ip, r1, lsr #12
   1af98:	beq	1afa4 <__assert_fail@plt+0x9ac8>
   1af9c:	rsbs	r0, r0, #0
   1afa0:	rsc	r1, r1, #0
   1afa4:	tst	r3, #-2147483648	; 0x80000000
   1afa8:	lsl	r3, r3, #12
   1afac:	orr	r3, ip, r3, lsr #12
   1afb0:	beq	1afbc <__assert_fail@plt+0x9ae0>
   1afb4:	rsbs	r2, r2, #0
   1afb8:	rsc	r3, r3, #0
   1afbc:	teq	r4, r5
   1afc0:	beq	1b124 <__assert_fail@plt+0x9c48>
   1afc4:	sub	r4, r4, #1
   1afc8:	rsbs	lr, r5, #32
   1afcc:	blt	1afe8 <__assert_fail@plt+0x9b0c>
   1afd0:	lsl	ip, r2, lr
   1afd4:	adds	r0, r0, r2, lsr r5
   1afd8:	adc	r1, r1, #0
   1afdc:	adds	r0, r0, r3, lsl lr
   1afe0:	adcs	r1, r1, r3, asr r5
   1afe4:	b	1b004 <__assert_fail@plt+0x9b28>
   1afe8:	sub	r5, r5, #32
   1afec:	add	lr, lr, #32
   1aff0:	cmp	r2, #1
   1aff4:	lsl	ip, r3, lr
   1aff8:	orrcs	ip, ip, #2
   1affc:	adds	r0, r0, r3, asr r5
   1b000:	adcs	r1, r1, r3, asr #31
   1b004:	and	r5, r1, #-2147483648	; 0x80000000
   1b008:	bpl	1b018 <__assert_fail@plt+0x9b3c>
   1b00c:	rsbs	ip, ip, #0
   1b010:	rscs	r0, r0, #0
   1b014:	rsc	r1, r1, #0
   1b018:	cmp	r1, #1048576	; 0x100000
   1b01c:	bcc	1b05c <__assert_fail@plt+0x9b80>
   1b020:	cmp	r1, #2097152	; 0x200000
   1b024:	bcc	1b044 <__assert_fail@plt+0x9b68>
   1b028:	lsrs	r1, r1, #1
   1b02c:	rrxs	r0, r0
   1b030:	rrx	ip, ip
   1b034:	add	r4, r4, #1
   1b038:	lsl	r2, r4, #21
   1b03c:	cmn	r2, #4194304	; 0x400000
   1b040:	bcs	1b19c <__assert_fail@plt+0x9cc0>
   1b044:	cmp	ip, #-2147483648	; 0x80000000
   1b048:	lsrseq	ip, r0, #1
   1b04c:	adcs	r0, r0, #0
   1b050:	adc	r1, r1, r4, lsl #20
   1b054:	orr	r1, r1, r5
   1b058:	pop	{r4, r5, pc}
   1b05c:	lsls	ip, ip, #1
   1b060:	adcs	r0, r0, r0
   1b064:	adc	r1, r1, r1
   1b068:	tst	r1, #1048576	; 0x100000
   1b06c:	sub	r4, r4, #1
   1b070:	bne	1b044 <__assert_fail@plt+0x9b68>
   1b074:	teq	r1, #0
   1b078:	moveq	r1, r0
   1b07c:	moveq	r0, #0
   1b080:	clz	r3, r1
   1b084:	addeq	r3, r3, #32
   1b088:	sub	r3, r3, #11
   1b08c:	subs	r2, r3, #32
   1b090:	bge	1b0b4 <__assert_fail@plt+0x9bd8>
   1b094:	adds	r2, r2, #12
   1b098:	ble	1b0b0 <__assert_fail@plt+0x9bd4>
   1b09c:	add	ip, r2, #20
   1b0a0:	rsb	r2, r2, #12
   1b0a4:	lsl	r0, r1, ip
   1b0a8:	lsr	r1, r1, r2
   1b0ac:	b	1b0c4 <__assert_fail@plt+0x9be8>
   1b0b0:	add	r2, r2, #20
   1b0b4:	rsble	ip, r2, #32
   1b0b8:	lsl	r1, r1, r2
   1b0bc:	orrle	r1, r1, r0, lsr ip
   1b0c0:	lslle	r0, r0, r2
   1b0c4:	subs	r4, r4, r3
   1b0c8:	addge	r1, r1, r4, lsl #20
   1b0cc:	orrge	r1, r1, r5
   1b0d0:	popge	{r4, r5, pc}
   1b0d4:	mvn	r4, r4
   1b0d8:	subs	r4, r4, #31
   1b0dc:	bge	1b118 <__assert_fail@plt+0x9c3c>
   1b0e0:	adds	r4, r4, #12
   1b0e4:	bgt	1b100 <__assert_fail@plt+0x9c24>
   1b0e8:	add	r4, r4, #20
   1b0ec:	rsb	r2, r4, #32
   1b0f0:	lsr	r0, r0, r4
   1b0f4:	orr	r0, r0, r1, lsl r2
   1b0f8:	orr	r1, r5, r1, lsr r4
   1b0fc:	pop	{r4, r5, pc}
   1b100:	rsb	r4, r4, #12
   1b104:	rsb	r2, r4, #32
   1b108:	lsr	r0, r0, r2
   1b10c:	orr	r0, r0, r1, lsl r4
   1b110:	mov	r1, r5
   1b114:	pop	{r4, r5, pc}
   1b118:	lsr	r0, r1, r4
   1b11c:	mov	r1, r5
   1b120:	pop	{r4, r5, pc}
   1b124:	teq	r4, #0
   1b128:	eor	r3, r3, #1048576	; 0x100000
   1b12c:	eoreq	r1, r1, #1048576	; 0x100000
   1b130:	addeq	r4, r4, #1
   1b134:	subne	r5, r5, #1
   1b138:	b	1afc4 <__assert_fail@plt+0x9ae8>
   1b13c:	mvns	ip, r4, asr #21
   1b140:	mvnsne	ip, r5, asr #21
   1b144:	beq	1b1ac <__assert_fail@plt+0x9cd0>
   1b148:	teq	r4, r5
   1b14c:	teqeq	r0, r2
   1b150:	beq	1b164 <__assert_fail@plt+0x9c88>
   1b154:	orrs	ip, r4, r0
   1b158:	moveq	r1, r3
   1b15c:	moveq	r0, r2
   1b160:	pop	{r4, r5, pc}
   1b164:	teq	r1, r3
   1b168:	movne	r1, #0
   1b16c:	movne	r0, #0
   1b170:	popne	{r4, r5, pc}
   1b174:	lsrs	ip, r4, #21
   1b178:	bne	1b18c <__assert_fail@plt+0x9cb0>
   1b17c:	lsls	r0, r0, #1
   1b180:	adcs	r1, r1, r1
   1b184:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1b188:	pop	{r4, r5, pc}
   1b18c:	adds	r4, r4, #4194304	; 0x400000
   1b190:	addcc	r1, r1, #1048576	; 0x100000
   1b194:	popcc	{r4, r5, pc}
   1b198:	and	r5, r1, #-2147483648	; 0x80000000
   1b19c:	orr	r1, r5, #2130706432	; 0x7f000000
   1b1a0:	orr	r1, r1, #15728640	; 0xf00000
   1b1a4:	mov	r0, #0
   1b1a8:	pop	{r4, r5, pc}
   1b1ac:	mvns	ip, r4, asr #21
   1b1b0:	movne	r1, r3
   1b1b4:	movne	r0, r2
   1b1b8:	mvnseq	ip, r5, asr #21
   1b1bc:	movne	r3, r1
   1b1c0:	movne	r2, r0
   1b1c4:	orrs	r4, r0, r1, lsl #12
   1b1c8:	orrseq	r5, r2, r3, lsl #12
   1b1cc:	teqeq	r1, r3
   1b1d0:	orrne	r1, r1, #524288	; 0x80000
   1b1d4:	pop	{r4, r5, pc}
   1b1d8:	teq	r0, #0
   1b1dc:	moveq	r1, #0
   1b1e0:	bxeq	lr
   1b1e4:	push	{r4, r5, lr}
   1b1e8:	mov	r4, #1024	; 0x400
   1b1ec:	add	r4, r4, #50	; 0x32
   1b1f0:	mov	r5, #0
   1b1f4:	mov	r1, #0
   1b1f8:	b	1b074 <__assert_fail@plt+0x9b98>
   1b1fc:	teq	r0, #0
   1b200:	moveq	r1, #0
   1b204:	bxeq	lr
   1b208:	push	{r4, r5, lr}
   1b20c:	mov	r4, #1024	; 0x400
   1b210:	add	r4, r4, #50	; 0x32
   1b214:	ands	r5, r0, #-2147483648	; 0x80000000
   1b218:	rsbmi	r0, r0, #0
   1b21c:	mov	r1, #0
   1b220:	b	1b074 <__assert_fail@plt+0x9b98>
   1b224:	lsls	r2, r0, #1
   1b228:	asr	r1, r2, #3
   1b22c:	rrx	r1, r1
   1b230:	lsl	r0, r2, #28
   1b234:	andsne	r3, r2, #-16777216	; 0xff000000
   1b238:	teqne	r3, #-16777216	; 0xff000000
   1b23c:	eorne	r1, r1, #939524096	; 0x38000000
   1b240:	bxne	lr
   1b244:	bics	r2, r2, #-16777216	; 0xff000000
   1b248:	bxeq	lr
   1b24c:	teq	r3, #-16777216	; 0xff000000
   1b250:	orreq	r1, r1, #524288	; 0x80000
   1b254:	bxeq	lr
   1b258:	push	{r4, r5, lr}
   1b25c:	mov	r4, #896	; 0x380
   1b260:	and	r5, r1, #-2147483648	; 0x80000000
   1b264:	bic	r1, r1, #-2147483648	; 0x80000000
   1b268:	b	1b074 <__assert_fail@plt+0x9b98>
   1b26c:	orrs	r2, r0, r1
   1b270:	bxeq	lr
   1b274:	push	{r4, r5, lr}
   1b278:	mov	r5, #0
   1b27c:	b	1b29c <__assert_fail@plt+0x9dc0>
   1b280:	orrs	r2, r0, r1
   1b284:	bxeq	lr
   1b288:	push	{r4, r5, lr}
   1b28c:	ands	r5, r1, #-2147483648	; 0x80000000
   1b290:	bpl	1b29c <__assert_fail@plt+0x9dc0>
   1b294:	rsbs	r0, r0, #0
   1b298:	rsc	r1, r1, #0
   1b29c:	mov	r4, #1024	; 0x400
   1b2a0:	add	r4, r4, #50	; 0x32
   1b2a4:	lsrs	ip, r1, #22
   1b2a8:	beq	1b018 <__assert_fail@plt+0x9b3c>
   1b2ac:	mov	r2, #3
   1b2b0:	lsrs	ip, ip, #3
   1b2b4:	addne	r2, r2, #3
   1b2b8:	lsrs	ip, ip, #3
   1b2bc:	addne	r2, r2, #3
   1b2c0:	add	r2, r2, ip, lsr #3
   1b2c4:	rsb	r3, r2, #32
   1b2c8:	lsl	ip, r0, r3
   1b2cc:	lsr	r0, r0, r2
   1b2d0:	orr	r0, r0, r1, lsl r3
   1b2d4:	lsr	r1, r1, r2
   1b2d8:	add	r4, r4, r2
   1b2dc:	b	1b018 <__assert_fail@plt+0x9b3c>
   1b2e0:	cmp	r3, #0
   1b2e4:	cmpeq	r2, #0
   1b2e8:	bne	1b30c <__assert_fail@plt+0x9e30>
   1b2ec:	cmp	r1, #0
   1b2f0:	movlt	r1, #-2147483648	; 0x80000000
   1b2f4:	movlt	r0, #0
   1b2f8:	blt	1b308 <__assert_fail@plt+0x9e2c>
   1b2fc:	cmpeq	r0, #0
   1b300:	mvnne	r1, #-2147483648	; 0x80000000
   1b304:	mvnne	r0, #0
   1b308:	b	1b3f0 <__assert_fail@plt+0x9f14>
   1b30c:	sub	sp, sp, #8
   1b310:	push	{sp, lr}
   1b314:	cmp	r1, #0
   1b318:	blt	1b338 <__assert_fail@plt+0x9e5c>
   1b31c:	cmp	r3, #0
   1b320:	blt	1b36c <__assert_fail@plt+0x9e90>
   1b324:	bl	1b440 <__assert_fail@plt+0x9f64>
   1b328:	ldr	lr, [sp, #4]
   1b32c:	add	sp, sp, #8
   1b330:	pop	{r2, r3}
   1b334:	bx	lr
   1b338:	rsbs	r0, r0, #0
   1b33c:	sbc	r1, r1, r1, lsl #1
   1b340:	cmp	r3, #0
   1b344:	blt	1b390 <__assert_fail@plt+0x9eb4>
   1b348:	bl	1b440 <__assert_fail@plt+0x9f64>
   1b34c:	ldr	lr, [sp, #4]
   1b350:	add	sp, sp, #8
   1b354:	pop	{r2, r3}
   1b358:	rsbs	r0, r0, #0
   1b35c:	sbc	r1, r1, r1, lsl #1
   1b360:	rsbs	r2, r2, #0
   1b364:	sbc	r3, r3, r3, lsl #1
   1b368:	bx	lr
   1b36c:	rsbs	r2, r2, #0
   1b370:	sbc	r3, r3, r3, lsl #1
   1b374:	bl	1b440 <__assert_fail@plt+0x9f64>
   1b378:	ldr	lr, [sp, #4]
   1b37c:	add	sp, sp, #8
   1b380:	pop	{r2, r3}
   1b384:	rsbs	r0, r0, #0
   1b388:	sbc	r1, r1, r1, lsl #1
   1b38c:	bx	lr
   1b390:	rsbs	r2, r2, #0
   1b394:	sbc	r3, r3, r3, lsl #1
   1b398:	bl	1b440 <__assert_fail@plt+0x9f64>
   1b39c:	ldr	lr, [sp, #4]
   1b3a0:	add	sp, sp, #8
   1b3a4:	pop	{r2, r3}
   1b3a8:	rsbs	r2, r2, #0
   1b3ac:	sbc	r3, r3, r3, lsl #1
   1b3b0:	bx	lr
   1b3b4:	cmp	r3, #0
   1b3b8:	cmpeq	r2, #0
   1b3bc:	bne	1b3d4 <__assert_fail@plt+0x9ef8>
   1b3c0:	cmp	r1, #0
   1b3c4:	cmpeq	r0, #0
   1b3c8:	mvnne	r1, #0
   1b3cc:	mvnne	r0, #0
   1b3d0:	b	1b3f0 <__assert_fail@plt+0x9f14>
   1b3d4:	sub	sp, sp, #8
   1b3d8:	push	{sp, lr}
   1b3dc:	bl	1b440 <__assert_fail@plt+0x9f64>
   1b3e0:	ldr	lr, [sp, #4]
   1b3e4:	add	sp, sp, #8
   1b3e8:	pop	{r2, r3}
   1b3ec:	bx	lr
   1b3f0:	push	{r1, lr}
   1b3f4:	mov	r0, #8
   1b3f8:	bl	11164 <raise@plt>
   1b3fc:	pop	{r1, pc}
   1b400:	vmov	d6, r0, r1
   1b404:	vldr	d7, [pc, #36]	; 1b430 <__assert_fail@plt+0x9f54>
   1b408:	vldr	d5, [pc, #40]	; 1b438 <__assert_fail@plt+0x9f5c>
   1b40c:	vmul.f64	d7, d6, d7
   1b410:	vcvt.u32.f64	s14, d7
   1b414:	vcvt.f64.u32	d4, s14
   1b418:	vmov	r1, s14
   1b41c:	vmls.f64	d6, d4, d5
   1b420:	vcvt.u32.f64	s15, d6
   1b424:	vmov	r0, s15
   1b428:	bx	lr
   1b42c:	nop			; (mov r0, r0)
   1b430:	andeq	r0, r0, r0
   1b434:	ldclcc	0, cr0, [r0]
   1b438:	andeq	r0, r0, r0
   1b43c:	mvnsmi	r0, r0
   1b440:	cmp	r1, r3
   1b444:	cmpeq	r0, r2
   1b448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b44c:	mov	r4, r0
   1b450:	movcc	r0, #0
   1b454:	mov	r5, r1
   1b458:	ldr	lr, [sp, #36]	; 0x24
   1b45c:	movcc	r1, r0
   1b460:	bcc	1b55c <__assert_fail@plt+0xa080>
   1b464:	cmp	r3, #0
   1b468:	clzeq	ip, r2
   1b46c:	clzne	ip, r3
   1b470:	addeq	ip, ip, #32
   1b474:	cmp	r5, #0
   1b478:	clzeq	r1, r4
   1b47c:	addeq	r1, r1, #32
   1b480:	clzne	r1, r5
   1b484:	sub	ip, ip, r1
   1b488:	sub	sl, ip, #32
   1b48c:	lsl	r9, r3, ip
   1b490:	rsb	fp, ip, #32
   1b494:	orr	r9, r9, r2, lsl sl
   1b498:	orr	r9, r9, r2, lsr fp
   1b49c:	lsl	r8, r2, ip
   1b4a0:	cmp	r5, r9
   1b4a4:	cmpeq	r4, r8
   1b4a8:	movcc	r0, #0
   1b4ac:	movcc	r1, r0
   1b4b0:	bcc	1b4cc <__assert_fail@plt+0x9ff0>
   1b4b4:	mov	r0, #1
   1b4b8:	subs	r4, r4, r8
   1b4bc:	lsl	r1, r0, sl
   1b4c0:	orr	r1, r1, r0, lsr fp
   1b4c4:	lsl	r0, r0, ip
   1b4c8:	sbc	r5, r5, r9
   1b4cc:	cmp	ip, #0
   1b4d0:	beq	1b55c <__assert_fail@plt+0xa080>
   1b4d4:	lsr	r6, r8, #1
   1b4d8:	orr	r6, r6, r9, lsl #31
   1b4dc:	lsr	r7, r9, #1
   1b4e0:	mov	r2, ip
   1b4e4:	b	1b508 <__assert_fail@plt+0xa02c>
   1b4e8:	subs	r3, r4, r6
   1b4ec:	sbc	r8, r5, r7
   1b4f0:	adds	r3, r3, r3
   1b4f4:	adc	r8, r8, r8
   1b4f8:	adds	r4, r3, #1
   1b4fc:	adc	r5, r8, #0
   1b500:	subs	r2, r2, #1
   1b504:	beq	1b524 <__assert_fail@plt+0xa048>
   1b508:	cmp	r5, r7
   1b50c:	cmpeq	r4, r6
   1b510:	bcs	1b4e8 <__assert_fail@plt+0xa00c>
   1b514:	adds	r4, r4, r4
   1b518:	adc	r5, r5, r5
   1b51c:	subs	r2, r2, #1
   1b520:	bne	1b508 <__assert_fail@plt+0xa02c>
   1b524:	lsr	r3, r4, ip
   1b528:	orr	r3, r3, r5, lsl fp
   1b52c:	lsr	r2, r5, ip
   1b530:	orr	r3, r3, r5, lsr sl
   1b534:	adds	r0, r0, r4
   1b538:	mov	r4, r3
   1b53c:	lsl	r3, r2, ip
   1b540:	orr	r3, r3, r4, lsl sl
   1b544:	lsl	ip, r4, ip
   1b548:	orr	r3, r3, r4, lsr fp
   1b54c:	adc	r1, r1, r5
   1b550:	subs	r0, r0, ip
   1b554:	mov	r5, r2
   1b558:	sbc	r1, r1, r3
   1b55c:	cmp	lr, #0
   1b560:	strdne	r4, [lr]
   1b564:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b568:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b56c:	mov	r7, r0
   1b570:	ldr	r6, [pc, #72]	; 1b5c0 <__assert_fail@plt+0xa0e4>
   1b574:	ldr	r5, [pc, #72]	; 1b5c4 <__assert_fail@plt+0xa0e8>
   1b578:	add	r6, pc, r6
   1b57c:	add	r5, pc, r5
   1b580:	sub	r6, r6, r5
   1b584:	mov	r8, r1
   1b588:	mov	r9, r2
   1b58c:	bl	1112c <calloc@plt-0x20>
   1b590:	asrs	r6, r6, #2
   1b594:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b598:	mov	r4, #0
   1b59c:	add	r4, r4, #1
   1b5a0:	ldr	r3, [r5], #4
   1b5a4:	mov	r2, r9
   1b5a8:	mov	r1, r8
   1b5ac:	mov	r0, r7
   1b5b0:	blx	r3
   1b5b4:	cmp	r6, r4
   1b5b8:	bne	1b59c <__assert_fail@plt+0xa0c0>
   1b5bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b5c0:	muleq	r1, r4, r9
   1b5c4:	andeq	r2, r1, ip, lsl #19
   1b5c8:	bx	lr
   1b5cc:	ldr	r3, [pc, #12]	; 1b5e0 <__assert_fail@plt+0xa104>
   1b5d0:	mov	r1, #0
   1b5d4:	add	r3, pc, r3
   1b5d8:	ldr	r2, [r3]
   1b5dc:	b	113bc <__cxa_atexit@plt>
   1b5e0:	andeq	r2, r1, r0, ror fp

Disassembly of section .fini:

0001b5e4 <.fini>:
   1b5e4:	push	{r3, lr}
   1b5e8:	pop	{r3, pc}
