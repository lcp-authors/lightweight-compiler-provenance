
../repos/coreutils/src/id:     file format elf32-littlearm


Disassembly of section .init:

00010e80 <.init>:
   10e80:	push	{r3, lr}
   10e84:	bl	111c4 <__assert_fail@plt+0x48>
   10e88:	pop	{r3, pc}

Disassembly of section .plt:

00010e8c <calloc@plt-0x14>:
   10e8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10e90:	ldr	lr, [pc, #4]	; 10e9c <calloc@plt-0x4>
   10e94:	add	lr, pc, lr
   10e98:	ldr	pc, [lr, #8]!
   10e9c:	andeq	r7, r1, r4, ror #2

00010ea0 <calloc@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #356]!	; 0x164

00010eac <endgrent@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #348]!	; 0x15c

00010eb8 <fputs_unlocked@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #340]!	; 0x154

00010ec4 <raise@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #332]!	; 0x14c

00010ed0 <getpwnam@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #324]!	; 0x144

00010edc <is_selinux_enabled@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #316]!	; 0x13c

00010ee8 <strcmp@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #308]!	; 0x134

00010ef4 <getpwuid@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #300]!	; 0x12c

00010f00 <fflush@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #292]!	; 0x124

00010f0c <getuid@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #284]!	; 0x11c

00010f18 <free@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #276]!	; 0x114

00010f24 <_exit@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #268]!	; 0x10c

00010f30 <memcpy@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #260]!	; 0x104

00010f3c <mbsinit@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #252]!	; 0xfc

00010f48 <memcmp@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #244]!	; 0xf4

00010f54 <fputc_unlocked@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #236]!	; 0xec

00010f60 <dcgettext@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #228]!	; 0xe4

00010f6c <realloc@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #220]!	; 0xdc

00010f78 <textdomain@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #212]!	; 0xd4

00010f84 <geteuid@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #204]!	; 0xcc

00010f90 <iswprint@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #196]!	; 0xc4

00010f9c <getegid@plt>:
   10f9c:	add	ip, pc, #0, 12
   10fa0:	add	ip, ip, #94208	; 0x17000
   10fa4:	ldr	pc, [ip, #188]!	; 0xbc

00010fa8 <fwrite@plt>:
   10fa8:	add	ip, pc, #0, 12
   10fac:	add	ip, ip, #94208	; 0x17000
   10fb0:	ldr	pc, [ip, #180]!	; 0xb4

00010fb4 <lseek64@plt>:
   10fb4:	add	ip, pc, #0, 12
   10fb8:	add	ip, ip, #94208	; 0x17000
   10fbc:	ldr	pc, [ip, #172]!	; 0xac

00010fc0 <__ctype_get_mb_cur_max@plt>:
   10fc0:	add	ip, pc, #0, 12
   10fc4:	add	ip, ip, #94208	; 0x17000
   10fc8:	ldr	pc, [ip, #164]!	; 0xa4

00010fcc <getcon@plt>:
   10fcc:	add	ip, pc, #0, 12
   10fd0:	add	ip, ip, #94208	; 0x17000
   10fd4:	ldr	pc, [ip, #156]!	; 0x9c

00010fd8 <__fpending@plt>:
   10fd8:	add	ip, pc, #0, 12
   10fdc:	add	ip, ip, #94208	; 0x17000
   10fe0:	ldr	pc, [ip, #148]!	; 0x94

00010fe4 <mbrtowc@plt>:
   10fe4:	add	ip, pc, #0, 12
   10fe8:	add	ip, ip, #94208	; 0x17000
   10fec:	ldr	pc, [ip, #140]!	; 0x8c

00010ff0 <error@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #94208	; 0x17000
   10ff8:	ldr	pc, [ip, #132]!	; 0x84

00010ffc <getenv@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #94208	; 0x17000
   11004:	ldr	pc, [ip, #124]!	; 0x7c

00011008 <malloc@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #94208	; 0x17000
   11010:	ldr	pc, [ip, #116]!	; 0x74

00011014 <__libc_start_main@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #94208	; 0x17000
   1101c:	ldr	pc, [ip, #108]!	; 0x6c

00011020 <__freading@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #94208	; 0x17000
   11028:	ldr	pc, [ip, #100]!	; 0x64

0001102c <__gmon_start__@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #94208	; 0x17000
   11034:	ldr	pc, [ip, #92]!	; 0x5c

00011038 <getopt_long@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #94208	; 0x17000
   11040:	ldr	pc, [ip, #84]!	; 0x54

00011044 <__ctype_b_loc@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #94208	; 0x17000
   1104c:	ldr	pc, [ip, #76]!	; 0x4c

00011050 <exit@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #94208	; 0x17000
   11058:	ldr	pc, [ip, #68]!	; 0x44

0001105c <strtoul@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #94208	; 0x17000
   11064:	ldr	pc, [ip, #60]!	; 0x3c

00011068 <strlen@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #94208	; 0x17000
   11070:	ldr	pc, [ip, #52]!	; 0x34

00011074 <strchr@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #94208	; 0x17000
   1107c:	ldr	pc, [ip, #44]!	; 0x2c

00011080 <__errno_location@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #94208	; 0x17000
   11088:	ldr	pc, [ip, #36]!	; 0x24

0001108c <__cxa_atexit@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #94208	; 0x17000
   11094:	ldr	pc, [ip, #28]!

00011098 <getgid@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #94208	; 0x17000
   110a0:	ldr	pc, [ip, #20]!

000110a4 <getgrouplist@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #94208	; 0x17000
   110ac:	ldr	pc, [ip, #12]!

000110b0 <memset@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #94208	; 0x17000
   110b8:	ldr	pc, [ip, #4]!

000110bc <__printf_chk@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #4092]!	; 0xffc

000110c8 <fileno@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #4084]!	; 0xff4

000110d4 <__fprintf_chk@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #4076]!	; 0xfec

000110e0 <fclose@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #4068]!	; 0xfe4

000110ec <fseeko64@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #4060]!	; 0xfdc

000110f8 <__overflow@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #4052]!	; 0xfd4

00011104 <setlocale@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011110 <endpwent@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #4036]!	; 0xfc4

0001111c <strrchr@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #4028]!	; 0xfbc

00011128 <nl_langinfo@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #4020]!	; 0xfb4

00011134 <getgroups@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #4012]!	; 0xfac

00011140 <bindtextdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #4004]!	; 0xfa4

0001114c <strncmp@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3996]!	; 0xf9c

00011158 <abort@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3988]!	; 0xf94

00011164 <getgrgid@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3980]!	; 0xf8c

00011170 <getgrnam@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3972]!	; 0xf84

0001117c <__assert_fail@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3964]!	; 0xf7c

Disassembly of section .text:

00011188 <.text>:
   11188:	mov	fp, #0
   1118c:	mov	lr, #0
   11190:	pop	{r1}		; (ldr r1, [sp], #4)
   11194:	mov	r2, sp
   11198:	push	{r2}		; (str r2, [sp, #-4]!)
   1119c:	push	{r0}		; (str r0, [sp, #-4]!)
   111a0:	ldr	ip, [pc, #16]	; 111b8 <__assert_fail@plt+0x3c>
   111a4:	push	{ip}		; (str ip, [sp, #-4]!)
   111a8:	ldr	r0, [pc, #12]	; 111bc <__assert_fail@plt+0x40>
   111ac:	ldr	r3, [pc, #12]	; 111c0 <__assert_fail@plt+0x44>
   111b0:	bl	11014 <__libc_start_main@plt>
   111b4:	bl	11158 <abort@plt>
   111b8:	muleq	r1, ip, r3
   111bc:	ldrdeq	r1, [r1], -r4
   111c0:	andeq	r6, r1, ip, lsr r3
   111c4:	ldr	r3, [pc, #20]	; 111e0 <__assert_fail@plt+0x64>
   111c8:	ldr	r2, [pc, #20]	; 111e4 <__assert_fail@plt+0x68>
   111cc:	add	r3, pc, r3
   111d0:	ldr	r2, [r3, r2]
   111d4:	cmp	r2, #0
   111d8:	bxeq	lr
   111dc:	b	1102c <__gmon_start__@plt>
   111e0:	andeq	r6, r1, ip, lsr #28
   111e4:	andeq	r0, r0, r4, lsl #2
   111e8:	ldr	r3, [pc, #28]	; 1120c <__assert_fail@plt+0x90>
   111ec:	ldr	r0, [pc, #28]	; 11210 <__assert_fail@plt+0x94>
   111f0:	sub	r3, r3, r0
   111f4:	cmp	r3, #6
   111f8:	bxls	lr
   111fc:	ldr	r3, [pc, #16]	; 11214 <__assert_fail@plt+0x98>
   11200:	cmp	r3, #0
   11204:	bxeq	lr
   11208:	bx	r3
   1120c:	andeq	r8, r2, pc, asr r1
   11210:	andeq	r8, r2, ip, asr r1
   11214:	andeq	r0, r0, r0
   11218:	ldr	r1, [pc, #36]	; 11244 <__assert_fail@plt+0xc8>
   1121c:	ldr	r0, [pc, #36]	; 11248 <__assert_fail@plt+0xcc>
   11220:	sub	r1, r1, r0
   11224:	asr	r1, r1, #2
   11228:	add	r1, r1, r1, lsr #31
   1122c:	asrs	r1, r1, #1
   11230:	bxeq	lr
   11234:	ldr	r3, [pc, #16]	; 1124c <__assert_fail@plt+0xd0>
   11238:	cmp	r3, #0
   1123c:	bxeq	lr
   11240:	bx	r3
   11244:	andeq	r8, r2, ip, asr r1
   11248:	andeq	r8, r2, ip, asr r1
   1124c:	andeq	r0, r0, r0
   11250:	push	{r4, lr}
   11254:	ldr	r4, [pc, #24]	; 11274 <__assert_fail@plt+0xf8>
   11258:	ldrb	r3, [r4]
   1125c:	cmp	r3, #0
   11260:	popne	{r4, pc}
   11264:	bl	111e8 <__assert_fail@plt+0x6c>
   11268:	mov	r3, #1
   1126c:	strb	r3, [r4]
   11270:	pop	{r4, pc}
   11274:	andeq	r8, r2, r8, ror r1
   11278:	ldr	r0, [pc, #40]	; 112a8 <__assert_fail@plt+0x12c>
   1127c:	ldr	r3, [r0]
   11280:	cmp	r3, #0
   11284:	bne	1128c <__assert_fail@plt+0x110>
   11288:	b	11218 <__assert_fail@plt+0x9c>
   1128c:	ldr	r3, [pc, #24]	; 112ac <__assert_fail@plt+0x130>
   11290:	cmp	r3, #0
   11294:	beq	11288 <__assert_fail@plt+0x10c>
   11298:	push	{r4, lr}
   1129c:	blx	r3
   112a0:	pop	{r4, lr}
   112a4:	b	11218 <__assert_fail@plt+0x9c>
   112a8:	andeq	r7, r2, ip, lsl #30
   112ac:	andeq	r0, r0, r0
   112b0:	push	{r4, lr}
   112b4:	ldr	r2, [pc, #12]	; 112c8 <__assert_fail@plt+0x14c>
   112b8:	ldr	r0, [r0]
   112bc:	mov	r1, #0
   112c0:	bl	12644 <__assert_fail@plt+0x14c8>
   112c4:	pop	{r4, pc}
   112c8:	andeq	r8, r2, ip, ror r1
   112cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112d0:	sub	sp, sp, #20
   112d4:	ldr	r3, [pc, #1404]	; 11858 <__assert_fail@plt+0x6dc>
   112d8:	ldrb	r3, [r3, #21]
   112dc:	cmp	r3, #0
   112e0:	beq	11400 <__assert_fail@plt+0x284>
   112e4:	ldr	r3, [pc, #1388]	; 11858 <__assert_fail@plt+0x6dc>
   112e8:	ldrb	r3, [r3, #22]
   112ec:	cmp	r3, #0
   112f0:	ldr	r3, [pc, #1376]	; 11858 <__assert_fail@plt+0x6dc>
   112f4:	ldrne	r0, [r3, #24]
   112f8:	ldreq	r0, [r3, #28]
   112fc:	str	r0, [sp, #12]
   11300:	ldr	r3, [pc, #1360]	; 11858 <__assert_fail@plt+0x6dc>
   11304:	ldrb	r3, [r3, #32]
   11308:	cmp	r3, #0
   1130c:	bne	113b0 <__assert_fail@plt+0x234>
   11310:	add	r0, sp, #12
   11314:	bl	112b0 <__assert_fail@plt+0x134>
   11318:	ldr	r3, [pc, #1340]	; 1185c <__assert_fail@plt+0x6e0>
   1131c:	ldr	r1, [r3]
   11320:	bl	10eb8 <fputs_unlocked@plt>
   11324:	ldr	r3, [pc, #1324]	; 11858 <__assert_fail@plt+0x6dc>
   11328:	ldrb	r3, [r3, #45]	; 0x2d
   1132c:	cmp	r3, #0
   11330:	beq	11810 <__assert_fail@plt+0x694>
   11334:	ldr	r3, [pc, #1308]	; 11858 <__assert_fail@plt+0x6dc>
   11338:	ldrb	r3, [r3, #44]	; 0x2c
   1133c:	cmp	r3, #0
   11340:	beq	11840 <__assert_fail@plt+0x6c4>
   11344:	ldr	r3, [pc, #1292]	; 11858 <__assert_fail@plt+0x6dc>
   11348:	ldrb	r3, [r3, #73]	; 0x49
   1134c:	cmp	r3, #0
   11350:	beq	11848 <__assert_fail@plt+0x6cc>
   11354:	ldr	r3, [pc, #1280]	; 1185c <__assert_fail@plt+0x6e0>
   11358:	ldr	r0, [r3]
   1135c:	ldr	r3, [r0, #20]
   11360:	ldr	r2, [r0, #24]
   11364:	cmp	r3, r2
   11368:	addcc	r2, r3, #1
   1136c:	strcc	r2, [r0, #20]
   11370:	movcc	r2, #0
   11374:	strbcc	r2, [r3]
   11378:	bcs	11804 <__assert_fail@plt+0x688>
   1137c:	ldr	r3, [pc, #1240]	; 1185c <__assert_fail@plt+0x6e0>
   11380:	ldr	r0, [r3]
   11384:	ldr	r3, [r0, #20]
   11388:	ldr	r2, [r0, #24]
   1138c:	cmp	r3, r2
   11390:	addcc	r2, r3, #1
   11394:	strcc	r2, [r0, #20]
   11398:	movcc	r2, #0
   1139c:	strbcc	r2, [r3]
   113a0:	bcc	11838 <__assert_fail@plt+0x6bc>
   113a4:	mov	r1, #0
   113a8:	bl	110f8 <__overflow@plt>
   113ac:	b	11838 <__assert_fail@plt+0x6bc>
   113b0:	bl	10ef4 <getpwuid@plt>
   113b4:	cmp	r0, #0
   113b8:	ldrne	r0, [r0]
   113bc:	bne	11318 <__assert_fail@plt+0x19c>
   113c0:	mov	r2, #5
   113c4:	ldr	r1, [pc, #1172]	; 11860 <__assert_fail@plt+0x6e4>
   113c8:	mov	r0, #0
   113cc:	bl	10f60 <dcgettext@plt>
   113d0:	mov	r4, r0
   113d4:	add	r0, sp, #12
   113d8:	bl	112b0 <__assert_fail@plt+0x134>
   113dc:	mov	r3, r0
   113e0:	mov	r2, r4
   113e4:	mov	r1, #0
   113e8:	mov	r0, r1
   113ec:	bl	10ff0 <error@plt>
   113f0:	mov	r2, #0
   113f4:	ldr	r3, [pc, #1128]	; 11864 <__assert_fail@plt+0x6e8>
   113f8:	strb	r2, [r3]
   113fc:	b	11310 <__assert_fail@plt+0x194>
   11400:	mov	r4, r0
   11404:	ldr	r3, [pc, #1100]	; 11858 <__assert_fail@plt+0x6dc>
   11408:	ldrb	r3, [r3, #33]	; 0x21
   1140c:	cmp	r3, #0
   11410:	beq	1144c <__assert_fail@plt+0x2d0>
   11414:	ldr	r3, [pc, #1084]	; 11858 <__assert_fail@plt+0x6dc>
   11418:	ldrb	r3, [r3, #22]
   1141c:	cmp	r3, #0
   11420:	ldr	r3, [pc, #1072]	; 11858 <__assert_fail@plt+0x6dc>
   11424:	ldrne	r0, [r3, #36]	; 0x24
   11428:	ldreq	r0, [r3, #40]	; 0x28
   1142c:	ldr	r3, [pc, #1060]	; 11858 <__assert_fail@plt+0x6dc>
   11430:	ldrb	r1, [r3, #32]
   11434:	bl	1228c <__assert_fail@plt+0x1110>
   11438:	ldr	r2, [pc, #1060]	; 11864 <__assert_fail@plt+0x6e8>
   1143c:	ldrb	r3, [r2]
   11440:	and	r0, r0, r3
   11444:	strb	r0, [r2]
   11448:	b	11324 <__assert_fail@plt+0x1a8>
   1144c:	ldr	r3, [pc, #1028]	; 11858 <__assert_fail@plt+0x6dc>
   11450:	ldrb	r3, [r3, #44]	; 0x2c
   11454:	cmp	r3, #0
   11458:	beq	114a4 <__assert_fail@plt+0x328>
   1145c:	ldr	r0, [pc, #1012]	; 11858 <__assert_fail@plt+0x6dc>
   11460:	ldr	r1, [r0, #24]
   11464:	ldr	r2, [r0, #36]	; 0x24
   11468:	ldr	r3, [r0, #40]	; 0x28
   1146c:	ldrb	ip, [r0, #32]
   11470:	ldrb	r0, [r0, #45]	; 0x2d
   11474:	cmp	r0, #0
   11478:	moveq	r0, #32
   1147c:	movne	r0, #0
   11480:	str	r0, [sp, #4]
   11484:	str	ip, [sp]
   11488:	mov	r0, r4
   1148c:	bl	1230c <__assert_fail@plt+0x1190>
   11490:	ldr	r2, [pc, #972]	; 11864 <__assert_fail@plt+0x6e8>
   11494:	ldrb	r3, [r2]
   11498:	and	r0, r0, r3
   1149c:	strb	r0, [r2]
   114a0:	b	11324 <__assert_fail@plt+0x1a8>
   114a4:	ldr	r3, [pc, #940]	; 11858 <__assert_fail@plt+0x6dc>
   114a8:	ldrb	r3, [r3, #46]	; 0x2e
   114ac:	cmp	r3, #0
   114b0:	beq	114cc <__assert_fail@plt+0x350>
   114b4:	ldr	r3, [pc, #928]	; 1185c <__assert_fail@plt+0x6e0>
   114b8:	ldr	r1, [r3]
   114bc:	ldr	r3, [pc, #916]	; 11858 <__assert_fail@plt+0x6dc>
   114c0:	ldr	r0, [r3, #48]	; 0x30
   114c4:	bl	10eb8 <fputs_unlocked@plt>
   114c8:	b	11324 <__assert_fail@plt+0x1a8>
   114cc:	mov	r2, #5
   114d0:	ldr	r1, [pc, #912]	; 11868 <__assert_fail@plt+0x6ec>
   114d4:	mov	r0, #0
   114d8:	bl	10f60 <dcgettext@plt>
   114dc:	mov	r6, r0
   114e0:	ldr	r5, [pc, #880]	; 11858 <__assert_fail@plt+0x6dc>
   114e4:	add	r0, r5, #24
   114e8:	bl	112b0 <__assert_fail@plt+0x134>
   114ec:	mov	r2, r0
   114f0:	mov	r1, r6
   114f4:	mov	r0, #1
   114f8:	bl	110bc <__printf_chk@plt>
   114fc:	ldr	r0, [r5, #24]
   11500:	bl	10ef4 <getpwuid@plt>
   11504:	subs	r5, r0, #0
   11508:	beq	1151c <__assert_fail@plt+0x3a0>
   1150c:	ldr	r2, [r5]
   11510:	ldr	r1, [pc, #852]	; 1186c <__assert_fail@plt+0x6f0>
   11514:	mov	r0, #1
   11518:	bl	110bc <__printf_chk@plt>
   1151c:	mov	r2, #5
   11520:	ldr	r1, [pc, #840]	; 11870 <__assert_fail@plt+0x6f4>
   11524:	mov	r0, #0
   11528:	bl	10f60 <dcgettext@plt>
   1152c:	mov	r7, r0
   11530:	ldr	r6, [pc, #800]	; 11858 <__assert_fail@plt+0x6dc>
   11534:	add	r2, r6, #52	; 0x34
   11538:	ldr	r0, [r6, #36]	; 0x24
   1153c:	mov	r1, #0
   11540:	bl	12644 <__assert_fail@plt+0x14c8>
   11544:	mov	r2, r0
   11548:	mov	r1, r7
   1154c:	mov	r0, #1
   11550:	bl	110bc <__printf_chk@plt>
   11554:	ldr	r0, [r6, #36]	; 0x24
   11558:	bl	11164 <getgrgid@plt>
   1155c:	cmp	r0, #0
   11560:	beq	11574 <__assert_fail@plt+0x3f8>
   11564:	ldr	r2, [r0]
   11568:	ldr	r1, [pc, #764]	; 1186c <__assert_fail@plt+0x6f0>
   1156c:	mov	r0, #1
   11570:	bl	110bc <__printf_chk@plt>
   11574:	ldr	r3, [pc, #732]	; 11858 <__assert_fail@plt+0x6dc>
   11578:	ldr	r2, [r3, #28]
   1157c:	ldr	r3, [r3, #24]
   11580:	cmp	r2, r3
   11584:	beq	115d8 <__assert_fail@plt+0x45c>
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #736]	; 11874 <__assert_fail@plt+0x6f8>
   11590:	mov	r0, #0
   11594:	bl	10f60 <dcgettext@plt>
   11598:	mov	r6, r0
   1159c:	ldr	r5, [pc, #692]	; 11858 <__assert_fail@plt+0x6dc>
   115a0:	add	r0, r5, #28
   115a4:	bl	112b0 <__assert_fail@plt+0x134>
   115a8:	mov	r2, r0
   115ac:	mov	r1, r6
   115b0:	mov	r0, #1
   115b4:	bl	110bc <__printf_chk@plt>
   115b8:	ldr	r0, [r5, #28]
   115bc:	bl	10ef4 <getpwuid@plt>
   115c0:	subs	r5, r0, #0
   115c4:	beq	115d8 <__assert_fail@plt+0x45c>
   115c8:	ldr	r2, [r5]
   115cc:	ldr	r1, [pc, #664]	; 1186c <__assert_fail@plt+0x6f0>
   115d0:	mov	r0, #1
   115d4:	bl	110bc <__printf_chk@plt>
   115d8:	ldr	r3, [pc, #632]	; 11858 <__assert_fail@plt+0x6dc>
   115dc:	ldr	r2, [r3, #40]	; 0x28
   115e0:	ldr	r3, [r3, #36]	; 0x24
   115e4:	cmp	r2, r3
   115e8:	beq	11644 <__assert_fail@plt+0x4c8>
   115ec:	mov	r2, #5
   115f0:	ldr	r1, [pc, #640]	; 11878 <__assert_fail@plt+0x6fc>
   115f4:	mov	r0, #0
   115f8:	bl	10f60 <dcgettext@plt>
   115fc:	mov	r7, r0
   11600:	ldr	r6, [pc, #592]	; 11858 <__assert_fail@plt+0x6dc>
   11604:	add	r2, r6, #52	; 0x34
   11608:	ldr	r0, [r6, #40]	; 0x28
   1160c:	mov	r1, #0
   11610:	bl	12644 <__assert_fail@plt+0x14c8>
   11614:	mov	r2, r0
   11618:	mov	r1, r7
   1161c:	mov	r0, #1
   11620:	bl	110bc <__printf_chk@plt>
   11624:	ldr	r0, [r6, #40]	; 0x28
   11628:	bl	11164 <getgrgid@plt>
   1162c:	cmp	r0, #0
   11630:	beq	11644 <__assert_fail@plt+0x4c8>
   11634:	ldr	r2, [r0]
   11638:	ldr	r1, [pc, #556]	; 1186c <__assert_fail@plt+0x6f0>
   1163c:	mov	r0, #1
   11640:	bl	110bc <__printf_chk@plt>
   11644:	cmp	r4, #0
   11648:	beq	116b0 <__assert_fail@plt+0x534>
   1164c:	cmp	r5, #0
   11650:	mvneq	r1, #0
   11654:	ldrne	r1, [r5, #12]
   11658:	add	r2, sp, #12
   1165c:	mov	r0, r4
   11660:	bl	15120 <__assert_fail@plt+0x3fa4>
   11664:	subs	r6, r0, #0
   11668:	blt	116f8 <__assert_fail@plt+0x57c>
   1166c:	cmp	r6, #0
   11670:	ble	117c4 <__assert_fail@plt+0x648>
   11674:	mov	r2, #5
   11678:	ldr	r1, [pc, #508]	; 1187c <__assert_fail@plt+0x700>
   1167c:	mov	r0, #0
   11680:	bl	10f60 <dcgettext@plt>
   11684:	ldr	r3, [pc, #464]	; 1185c <__assert_fail@plt+0x6e0>
   11688:	ldr	r1, [r3]
   1168c:	bl	10eb8 <fputs_unlocked@plt>
   11690:	mov	r4, #0
   11694:	ldr	r9, [pc, #484]	; 11880 <__assert_fail@plt+0x704>
   11698:	mov	r8, r4
   1169c:	ldr	r5, [pc, #440]	; 1185c <__assert_fail@plt+0x6e0>
   116a0:	ldr	fp, [pc, #452]	; 1186c <__assert_fail@plt+0x6f0>
   116a4:	mov	sl, #1
   116a8:	mov	r7, #44	; 0x2c
   116ac:	b	11780 <__assert_fail@plt+0x604>
   116b0:	add	r2, sp, #12
   116b4:	ldr	r3, [pc, #412]	; 11858 <__assert_fail@plt+0x6dc>
   116b8:	ldr	r1, [r3, #40]	; 0x28
   116bc:	mov	r0, #0
   116c0:	bl	15120 <__assert_fail@plt+0x3fa4>
   116c4:	subs	r6, r0, #0
   116c8:	bge	1166c <__assert_fail@plt+0x4f0>
   116cc:	bl	11080 <__errno_location@plt>
   116d0:	ldr	r4, [r0]
   116d4:	mov	r2, #5
   116d8:	ldr	r1, [pc, #420]	; 11884 <__assert_fail@plt+0x708>
   116dc:	mov	r0, #0
   116e0:	bl	10f60 <dcgettext@plt>
   116e4:	mov	r2, r0
   116e8:	mov	r1, r4
   116ec:	mov	r0, #0
   116f0:	bl	10ff0 <error@plt>
   116f4:	b	11730 <__assert_fail@plt+0x5b4>
   116f8:	bl	11080 <__errno_location@plt>
   116fc:	ldr	r5, [r0]
   11700:	mov	r2, #5
   11704:	ldr	r1, [pc, #380]	; 11888 <__assert_fail@plt+0x70c>
   11708:	mov	r0, #0
   1170c:	bl	10f60 <dcgettext@plt>
   11710:	mov	r6, r0
   11714:	mov	r0, r4
   11718:	bl	141fc <__assert_fail@plt+0x3080>
   1171c:	mov	r3, r0
   11720:	mov	r2, r6
   11724:	mov	r1, r5
   11728:	mov	r0, #0
   1172c:	bl	10ff0 <error@plt>
   11730:	mov	r2, #0
   11734:	ldr	r3, [pc, #296]	; 11864 <__assert_fail@plt+0x6e8>
   11738:	strb	r2, [r3]
   1173c:	b	11324 <__assert_fail@plt+0x1a8>
   11740:	mov	r1, r7
   11744:	bl	110f8 <__overflow@plt>
   11748:	b	11780 <__assert_fail@plt+0x604>
   1174c:	add	r4, r4, #1
   11750:	cmp	r4, r6
   11754:	beq	117c4 <__assert_fail@plt+0x648>
   11758:	cmp	r4, #0
   1175c:	ble	11780 <__assert_fail@plt+0x604>
   11760:	ldr	r0, [r5]
   11764:	ldr	r3, [r0, #20]
   11768:	ldr	r2, [r0, #24]
   1176c:	cmp	r3, r2
   11770:	addcc	r2, r3, #1
   11774:	strcc	r2, [r0, #20]
   11778:	strbcc	r7, [r3]
   1177c:	bcs	11740 <__assert_fail@plt+0x5c4>
   11780:	mov	r2, r9
   11784:	ldr	r3, [sp, #12]
   11788:	ldr	r0, [r3, r4, lsl #2]
   1178c:	mov	r1, r8
   11790:	bl	12644 <__assert_fail@plt+0x14c8>
   11794:	ldr	r1, [r5]
   11798:	bl	10eb8 <fputs_unlocked@plt>
   1179c:	ldr	r3, [sp, #12]
   117a0:	ldr	r0, [r3, r4, lsl #2]
   117a4:	bl	11164 <getgrgid@plt>
   117a8:	cmp	r0, #0
   117ac:	beq	1174c <__assert_fail@plt+0x5d0>
   117b0:	ldr	r2, [r0]
   117b4:	mov	r1, fp
   117b8:	mov	r0, sl
   117bc:	bl	110bc <__printf_chk@plt>
   117c0:	b	1174c <__assert_fail@plt+0x5d0>
   117c4:	ldr	r0, [sp, #12]
   117c8:	bl	125ec <__assert_fail@plt+0x1470>
   117cc:	ldr	r3, [pc, #132]	; 11858 <__assert_fail@plt+0x6dc>
   117d0:	ldr	r3, [r3, #48]	; 0x30
   117d4:	cmp	r3, #0
   117d8:	beq	11324 <__assert_fail@plt+0x1a8>
   117dc:	mov	r2, #5
   117e0:	ldr	r1, [pc, #164]	; 1188c <__assert_fail@plt+0x710>
   117e4:	mov	r0, #0
   117e8:	bl	10f60 <dcgettext@plt>
   117ec:	ldr	r3, [pc, #100]	; 11858 <__assert_fail@plt+0x6dc>
   117f0:	ldr	r2, [r3, #48]	; 0x30
   117f4:	mov	r1, r0
   117f8:	mov	r0, #1
   117fc:	bl	110bc <__printf_chk@plt>
   11800:	b	11324 <__assert_fail@plt+0x1a8>
   11804:	mov	r1, #0
   11808:	bl	110f8 <__overflow@plt>
   1180c:	b	1137c <__assert_fail@plt+0x200>
   11810:	mov	r1, #10
   11814:	ldr	r3, [pc, #64]	; 1185c <__assert_fail@plt+0x6e0>
   11818:	ldr	r0, [r3]
   1181c:	ldr	r3, [r0, #20]
   11820:	ldr	r2, [r0, #24]
   11824:	cmp	r3, r2
   11828:	addcc	r2, r3, #1
   1182c:	strcc	r2, [r0, #20]
   11830:	strbcc	r1, [r3]
   11834:	bcs	11850 <__assert_fail@plt+0x6d4>
   11838:	add	sp, sp, #20
   1183c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11840:	mov	r1, #0
   11844:	b	11814 <__assert_fail@plt+0x698>
   11848:	mov	r1, #0
   1184c:	b	11814 <__assert_fail@plt+0x698>
   11850:	bl	110f8 <__overflow@plt>
   11854:	b	11838 <__assert_fail@plt+0x6bc>
   11858:	andeq	r8, r2, ip, ror r1
   1185c:	andeq	r8, r2, r4, ror r1
   11860:	muleq	r1, ip, r4
   11864:	andeq	r8, r2, r0, lsl r1
   11868:			; <UNDEFINED> instruction: 0x000164bc
   1186c:	andeq	r6, r1, r4, asr #9
   11870:	andeq	r6, r1, ip, asr #9
   11874:	ldrdeq	r6, [r1], -r4
   11878:	andeq	r6, r1, r0, ror #9
   1187c:	andeq	r6, r1, r0, asr #10
   11880:			; <UNDEFINED> instruction: 0x000281b0
   11884:	andeq	r6, r1, r0, lsl r5
   11888:	andeq	r6, r1, ip, ror #9
   1188c:	andeq	r6, r1, ip, asr #10
   11890:	push	{lr}		; (str lr, [sp, #-4]!)
   11894:	sub	sp, sp, #60	; 0x3c
   11898:	subs	r6, r0, #0
   1189c:	beq	118d8 <__assert_fail@plt+0x75c>
   118a0:	ldr	r3, [pc, #728]	; 11b80 <__assert_fail@plt+0xa04>
   118a4:	ldr	r4, [r3]
   118a8:	mov	r2, #5
   118ac:	ldr	r1, [pc, #720]	; 11b84 <__assert_fail@plt+0xa08>
   118b0:	mov	r0, #0
   118b4:	bl	10f60 <dcgettext@plt>
   118b8:	ldr	r3, [pc, #712]	; 11b88 <__assert_fail@plt+0xa0c>
   118bc:	ldr	r3, [r3]
   118c0:	mov	r2, r0
   118c4:	mov	r1, #1
   118c8:	mov	r0, r4
   118cc:	bl	110d4 <__fprintf_chk@plt>
   118d0:	mov	r0, r6
   118d4:	bl	11050 <exit@plt>
   118d8:	mov	r2, #5
   118dc:	ldr	r1, [pc, #680]	; 11b8c <__assert_fail@plt+0xa10>
   118e0:	mov	r0, #0
   118e4:	bl	10f60 <dcgettext@plt>
   118e8:	ldr	r3, [pc, #664]	; 11b88 <__assert_fail@plt+0xa0c>
   118ec:	ldr	r2, [r3]
   118f0:	mov	r1, r0
   118f4:	mov	r0, #1
   118f8:	bl	110bc <__printf_chk@plt>
   118fc:	mov	r2, #5
   11900:	ldr	r1, [pc, #648]	; 11b90 <__assert_fail@plt+0xa14>
   11904:	mov	r0, #0
   11908:	bl	10f60 <dcgettext@plt>
   1190c:	ldr	r4, [pc, #640]	; 11b94 <__assert_fail@plt+0xa18>
   11910:	ldr	r1, [r4]
   11914:	bl	10eb8 <fputs_unlocked@plt>
   11918:	mov	r2, #5
   1191c:	ldr	r1, [pc, #628]	; 11b98 <__assert_fail@plt+0xa1c>
   11920:	mov	r0, #0
   11924:	bl	10f60 <dcgettext@plt>
   11928:	ldr	r1, [r4]
   1192c:	bl	10eb8 <fputs_unlocked@plt>
   11930:	mov	r2, #5
   11934:	ldr	r1, [pc, #608]	; 11b9c <__assert_fail@plt+0xa20>
   11938:	mov	r0, #0
   1193c:	bl	10f60 <dcgettext@plt>
   11940:	ldr	r1, [r4]
   11944:	bl	10eb8 <fputs_unlocked@plt>
   11948:	mov	r2, #5
   1194c:	ldr	r1, [pc, #588]	; 11ba0 <__assert_fail@plt+0xa24>
   11950:	mov	r0, #0
   11954:	bl	10f60 <dcgettext@plt>
   11958:	ldr	r1, [r4]
   1195c:	bl	10eb8 <fputs_unlocked@plt>
   11960:	mov	r2, #5
   11964:	ldr	r1, [pc, #568]	; 11ba4 <__assert_fail@plt+0xa28>
   11968:	mov	r0, #0
   1196c:	bl	10f60 <dcgettext@plt>
   11970:	ldr	r1, [r4]
   11974:	bl	10eb8 <fputs_unlocked@plt>
   11978:	mov	ip, sp
   1197c:	ldr	lr, [pc, #548]	; 11ba8 <__assert_fail@plt+0xa2c>
   11980:	ldm	lr!, {r0, r1, r2, r3}
   11984:	stmia	ip!, {r0, r1, r2, r3}
   11988:	ldm	lr!, {r0, r1, r2, r3}
   1198c:	stmia	ip!, {r0, r1, r2, r3}
   11990:	ldm	lr!, {r0, r1, r2, r3}
   11994:	stmia	ip!, {r0, r1, r2, r3}
   11998:	ldm	lr, {r0, r1}
   1199c:	stm	ip, {r0, r1}
   119a0:	ldr	r1, [sp]
   119a4:	cmp	r1, #0
   119a8:	moveq	r4, sp
   119ac:	beq	119d4 <__assert_fail@plt+0x858>
   119b0:	mov	r4, sp
   119b4:	ldr	r5, [pc, #496]	; 11bac <__assert_fail@plt+0xa30>
   119b8:	mov	r0, r5
   119bc:	bl	10ee8 <strcmp@plt>
   119c0:	cmp	r0, #0
   119c4:	beq	119d4 <__assert_fail@plt+0x858>
   119c8:	ldr	r1, [r4, #8]!
   119cc:	cmp	r1, #0
   119d0:	bne	119b8 <__assert_fail@plt+0x83c>
   119d4:	ldr	r4, [r4, #4]
   119d8:	cmp	r4, #0
   119dc:	beq	11af0 <__assert_fail@plt+0x974>
   119e0:	mov	r2, #5
   119e4:	ldr	r1, [pc, #452]	; 11bb0 <__assert_fail@plt+0xa34>
   119e8:	mov	r0, #0
   119ec:	bl	10f60 <dcgettext@plt>
   119f0:	ldr	r3, [pc, #444]	; 11bb4 <__assert_fail@plt+0xa38>
   119f4:	ldr	r2, [pc, #444]	; 11bb8 <__assert_fail@plt+0xa3c>
   119f8:	mov	r1, r0
   119fc:	mov	r0, #1
   11a00:	bl	110bc <__printf_chk@plt>
   11a04:	mov	r1, #0
   11a08:	mov	r0, #5
   11a0c:	bl	11104 <setlocale@plt>
   11a10:	cmp	r0, #0
   11a14:	beq	11a2c <__assert_fail@plt+0x8b0>
   11a18:	mov	r2, #3
   11a1c:	ldr	r1, [pc, #408]	; 11bbc <__assert_fail@plt+0xa40>
   11a20:	bl	1114c <strncmp@plt>
   11a24:	cmp	r0, #0
   11a28:	bne	11a8c <__assert_fail@plt+0x910>
   11a2c:	mov	r2, #5
   11a30:	ldr	r1, [pc, #392]	; 11bc0 <__assert_fail@plt+0xa44>
   11a34:	mov	r0, #0
   11a38:	bl	10f60 <dcgettext@plt>
   11a3c:	ldr	r5, [pc, #360]	; 11bac <__assert_fail@plt+0xa30>
   11a40:	mov	r3, r5
   11a44:	ldr	r2, [pc, #360]	; 11bb4 <__assert_fail@plt+0xa38>
   11a48:	mov	r1, r0
   11a4c:	mov	r0, #1
   11a50:	bl	110bc <__printf_chk@plt>
   11a54:	mov	r2, #5
   11a58:	ldr	r1, [pc, #356]	; 11bc4 <__assert_fail@plt+0xa48>
   11a5c:	mov	r0, #0
   11a60:	bl	10f60 <dcgettext@plt>
   11a64:	mov	r1, r0
   11a68:	ldr	r2, [pc, #344]	; 11bc8 <__assert_fail@plt+0xa4c>
   11a6c:	ldr	r3, [pc, #344]	; 11bcc <__assert_fail@plt+0xa50>
   11a70:	cmp	r4, r5
   11a74:	movne	r3, r2
   11a78:	mov	r2, r4
   11a7c:	mov	r0, #1
   11a80:	bl	110bc <__printf_chk@plt>
   11a84:	b	118d0 <__assert_fail@plt+0x754>
   11a88:	ldr	r4, [pc, #284]	; 11bac <__assert_fail@plt+0xa30>
   11a8c:	mov	r2, #5
   11a90:	ldr	r1, [pc, #312]	; 11bd0 <__assert_fail@plt+0xa54>
   11a94:	mov	r0, #0
   11a98:	bl	10f60 <dcgettext@plt>
   11a9c:	ldr	r3, [pc, #240]	; 11b94 <__assert_fail@plt+0xa18>
   11aa0:	ldr	r1, [r3]
   11aa4:	bl	10eb8 <fputs_unlocked@plt>
   11aa8:	b	11a2c <__assert_fail@plt+0x8b0>
   11aac:	mov	r2, #5
   11ab0:	ldr	r1, [pc, #264]	; 11bc0 <__assert_fail@plt+0xa44>
   11ab4:	mov	r0, #0
   11ab8:	bl	10f60 <dcgettext@plt>
   11abc:	ldr	r4, [pc, #232]	; 11bac <__assert_fail@plt+0xa30>
   11ac0:	mov	r3, r4
   11ac4:	ldr	r2, [pc, #232]	; 11bb4 <__assert_fail@plt+0xa38>
   11ac8:	mov	r1, r0
   11acc:	mov	r0, #1
   11ad0:	bl	110bc <__printf_chk@plt>
   11ad4:	mov	r2, #5
   11ad8:	ldr	r1, [pc, #228]	; 11bc4 <__assert_fail@plt+0xa48>
   11adc:	mov	r0, #0
   11ae0:	bl	10f60 <dcgettext@plt>
   11ae4:	mov	r1, r0
   11ae8:	ldr	r3, [pc, #220]	; 11bcc <__assert_fail@plt+0xa50>
   11aec:	b	11a78 <__assert_fail@plt+0x8fc>
   11af0:	mov	r2, #5
   11af4:	ldr	r1, [pc, #180]	; 11bb0 <__assert_fail@plt+0xa34>
   11af8:	mov	r0, #0
   11afc:	bl	10f60 <dcgettext@plt>
   11b00:	ldr	r3, [pc, #172]	; 11bb4 <__assert_fail@plt+0xa38>
   11b04:	ldr	r2, [pc, #172]	; 11bb8 <__assert_fail@plt+0xa3c>
   11b08:	mov	r1, r0
   11b0c:	mov	r0, #1
   11b10:	bl	110bc <__printf_chk@plt>
   11b14:	mov	r1, #0
   11b18:	mov	r0, #5
   11b1c:	bl	11104 <setlocale@plt>
   11b20:	cmp	r0, #0
   11b24:	beq	11aac <__assert_fail@plt+0x930>
   11b28:	mov	r2, #3
   11b2c:	ldr	r1, [pc, #136]	; 11bbc <__assert_fail@plt+0xa40>
   11b30:	bl	1114c <strncmp@plt>
   11b34:	cmp	r0, #0
   11b38:	bne	11a88 <__assert_fail@plt+0x90c>
   11b3c:	mov	r2, #5
   11b40:	ldr	r1, [pc, #120]	; 11bc0 <__assert_fail@plt+0xa44>
   11b44:	mov	r0, #0
   11b48:	bl	10f60 <dcgettext@plt>
   11b4c:	ldr	r4, [pc, #88]	; 11bac <__assert_fail@plt+0xa30>
   11b50:	mov	r3, r4
   11b54:	ldr	r2, [pc, #88]	; 11bb4 <__assert_fail@plt+0xa38>
   11b58:	mov	r1, r0
   11b5c:	mov	r0, #1
   11b60:	bl	110bc <__printf_chk@plt>
   11b64:	mov	r2, #5
   11b68:	ldr	r1, [pc, #84]	; 11bc4 <__assert_fail@plt+0xa48>
   11b6c:	mov	r0, #0
   11b70:	bl	10f60 <dcgettext@plt>
   11b74:	mov	r1, r0
   11b78:	ldr	r3, [pc, #76]	; 11bcc <__assert_fail@plt+0xa50>
   11b7c:	b	11a78 <__assert_fail@plt+0x8fc>
   11b80:	andeq	r8, r2, r0, ror r1
   11b84:	andeq	r6, r1, ip, asr r5
   11b88:	andeq	r8, r2, r8, ror #3
   11b8c:	andeq	r6, r1, r4, lsl #11
   11b90:	andeq	r6, r1, r8, lsr #11
   11b94:	andeq	r8, r2, r4, ror r1
   11b98:	andeq	r6, r1, r4, lsl r6
   11b9c:	andeq	r6, r1, r0, lsr #16
   11ba0:	andeq	r6, r1, r0, asr r8
   11ba4:	andeq	r6, r1, r8, lsl #17
   11ba8:	andeq	r6, r1, r4, asr #7
   11bac:	andeq	r6, r1, r8, asr r5
   11bb0:	ldrdeq	r6, [r1], -r0
   11bb4:	andeq	r6, r1, r8, ror #17
   11bb8:	andeq	r6, r1, r0, lsl r9
   11bbc:	andeq	r6, r1, r0, lsr #18
   11bc0:	andeq	r6, r1, ip, ror #18
   11bc4:	andeq	r6, r1, r8, lsl #19
   11bc8:	andeq	r6, r1, r4, lsr #11
   11bcc:	andeq	r6, r1, r8, lsr #23
   11bd0:	andeq	r6, r1, r4, lsr #18
   11bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bd8:	sub	sp, sp, #20
   11bdc:	mov	r5, r0
   11be0:	mov	r4, r1
   11be4:	bl	10edc <is_selinux_enabled@plt>
   11be8:	mov	fp, r0
   11bec:	ldr	r0, [r4]
   11bf0:	bl	126ac <__assert_fail@plt+0x1530>
   11bf4:	ldr	r1, [pc, #1568]	; 1221c <__assert_fail@plt+0x10a0>
   11bf8:	mov	r0, #6
   11bfc:	bl	11104 <setlocale@plt>
   11c00:	ldr	r6, [pc, #1560]	; 12220 <__assert_fail@plt+0x10a4>
   11c04:	ldr	r1, [pc, #1560]	; 12224 <__assert_fail@plt+0x10a8>
   11c08:	mov	r0, r6
   11c0c:	bl	11140 <bindtextdomain@plt>
   11c10:	mov	r0, r6
   11c14:	bl	10f78 <textdomain@plt>
   11c18:	ldr	r0, [pc, #1544]	; 12228 <__assert_fail@plt+0x10ac>
   11c1c:	bl	163a0 <__assert_fail@plt+0x5224>
   11c20:	ldr	r8, [pc, #1540]	; 1222c <__assert_fail@plt+0x10b0>
   11c24:	ldr	r7, [pc, #1540]	; 12230 <__assert_fail@plt+0x10b4>
   11c28:	mov	r6, #0
   11c2c:	ldr	sl, [pc, #1536]	; 12234 <__assert_fail@plt+0x10b8>
   11c30:	mov	r9, #1
   11c34:	str	r6, [sp]
   11c38:	mov	r3, r8
   11c3c:	mov	r2, r7
   11c40:	mov	r1, r4
   11c44:	mov	r0, r5
   11c48:	bl	11038 <getopt_long@plt>
   11c4c:	cmn	r0, #1
   11c50:	beq	11d5c <__assert_fail@plt+0xbe0>
   11c54:	cmp	r0, #97	; 0x61
   11c58:	beq	11c34 <__assert_fail@plt+0xab8>
   11c5c:	ble	11c84 <__assert_fail@plt+0xb08>
   11c60:	cmp	r0, #114	; 0x72
   11c64:	beq	11d34 <__assert_fail@plt+0xbb8>
   11c68:	bgt	11cf4 <__assert_fail@plt+0xb78>
   11c6c:	cmp	r0, #103	; 0x67
   11c70:	beq	11d2c <__assert_fail@plt+0xbb0>
   11c74:	cmp	r0, #110	; 0x6e
   11c78:	bne	11d54 <__assert_fail@plt+0xbd8>
   11c7c:	strb	r9, [sl, #32]
   11c80:	b	11c34 <__assert_fail@plt+0xab8>
   11c84:	cmn	r0, #2
   11c88:	beq	11d4c <__assert_fail@plt+0xbd0>
   11c8c:	ble	11cb0 <__assert_fail@plt+0xb34>
   11c90:	cmp	r0, #71	; 0x47
   11c94:	beq	11d44 <__assert_fail@plt+0xbc8>
   11c98:	cmp	r0, #90	; 0x5a
   11c9c:	bne	11d54 <__assert_fail@plt+0xbd8>
   11ca0:	cmp	fp, #0
   11ca4:	ble	11d0c <__assert_fail@plt+0xb90>
   11ca8:	strb	r9, [sl, #46]	; 0x2e
   11cac:	b	11c34 <__assert_fail@plt+0xab8>
   11cb0:	cmn	r0, #3
   11cb4:	bne	11d54 <__assert_fail@plt+0xbd8>
   11cb8:	mov	r4, #0
   11cbc:	str	r4, [sp, #8]
   11cc0:	ldr	r3, [pc, #1392]	; 12238 <__assert_fail@plt+0x10bc>
   11cc4:	str	r3, [sp, #4]
   11cc8:	ldr	r3, [pc, #1388]	; 1223c <__assert_fail@plt+0x10c0>
   11ccc:	str	r3, [sp]
   11cd0:	ldr	r3, [pc, #1384]	; 12240 <__assert_fail@plt+0x10c4>
   11cd4:	ldr	r3, [r3]
   11cd8:	ldr	r2, [pc, #1380]	; 12244 <__assert_fail@plt+0x10c8>
   11cdc:	ldr	r1, [pc, #1380]	; 12248 <__assert_fail@plt+0x10cc>
   11ce0:	ldr	r0, [pc, #1380]	; 1224c <__assert_fail@plt+0x10d0>
   11ce4:	ldr	r0, [r0]
   11ce8:	bl	14a70 <__assert_fail@plt+0x38f4>
   11cec:	mov	r0, r4
   11cf0:	bl	11050 <exit@plt>
   11cf4:	cmp	r0, #117	; 0x75
   11cf8:	beq	11d3c <__assert_fail@plt+0xbc0>
   11cfc:	cmp	r0, #122	; 0x7a
   11d00:	bne	11d54 <__assert_fail@plt+0xbd8>
   11d04:	strb	r9, [sl, #45]	; 0x2d
   11d08:	b	11c34 <__assert_fail@plt+0xab8>
   11d0c:	mov	r2, #5
   11d10:	ldr	r1, [pc, #1336]	; 12250 <__assert_fail@plt+0x10d4>
   11d14:	mov	r0, #0
   11d18:	bl	10f60 <dcgettext@plt>
   11d1c:	mov	r2, r0
   11d20:	mov	r1, #0
   11d24:	mov	r0, #1
   11d28:	bl	10ff0 <error@plt>
   11d2c:	strb	r9, [sl, #33]	; 0x21
   11d30:	b	11c34 <__assert_fail@plt+0xab8>
   11d34:	strb	r9, [sl, #22]
   11d38:	b	11c34 <__assert_fail@plt+0xab8>
   11d3c:	strb	r9, [sl, #21]
   11d40:	b	11c34 <__assert_fail@plt+0xab8>
   11d44:	strb	r9, [sl, #44]	; 0x2c
   11d48:	b	11c34 <__assert_fail@plt+0xab8>
   11d4c:	mov	r0, #0
   11d50:	bl	11890 <__assert_fail@plt+0x714>
   11d54:	mov	r0, #1
   11d58:	bl	11890 <__assert_fail@plt+0x714>
   11d5c:	ldr	r3, [pc, #1264]	; 12254 <__assert_fail@plt+0x10d8>
   11d60:	ldr	r8, [r3]
   11d64:	subs	r5, r5, r8
   11d68:	beq	11d7c <__assert_fail@plt+0xc00>
   11d6c:	ldr	r3, [pc, #1216]	; 12234 <__assert_fail@plt+0x10b8>
   11d70:	ldrb	r3, [r3, #46]	; 0x2e
   11d74:	cmp	r3, #0
   11d78:	bne	11f60 <__assert_fail@plt+0xde4>
   11d7c:	ldr	r2, [pc, #1200]	; 12234 <__assert_fail@plt+0x10b8>
   11d80:	ldrb	r1, [r2, #21]
   11d84:	ldrb	ip, [r2, #33]	; 0x21
   11d88:	ldrb	r3, [r2, #44]	; 0x2c
   11d8c:	ldrb	r0, [r2, #46]	; 0x2e
   11d90:	add	r2, r1, ip
   11d94:	add	r2, r2, r3
   11d98:	add	r2, r2, r0
   11d9c:	cmp	r2, #1
   11da0:	bgt	11f80 <__assert_fail@plt+0xe04>
   11da4:	orr	r1, r1, ip
   11da8:	orr	r3, r3, r1
   11dac:	orr	r3, r0, r3
   11db0:	eors	r3, r3, #1
   11db4:	beq	11de8 <__assert_fail@plt+0xc6c>
   11db8:	ldr	r2, [pc, #1140]	; 12234 <__assert_fail@plt+0x10b8>
   11dbc:	ldrb	r2, [r2, #22]
   11dc0:	cmp	r2, #0
   11dc4:	bne	11fa0 <__assert_fail@plt+0xe24>
   11dc8:	ldr	r2, [pc, #1124]	; 12234 <__assert_fail@plt+0x10b8>
   11dcc:	ldrb	r2, [r2, #32]
   11dd0:	cmp	r2, #0
   11dd4:	bne	11fa0 <__assert_fail@plt+0xe24>
   11dd8:	ldr	r2, [pc, #1108]	; 12234 <__assert_fail@plt+0x10b8>
   11ddc:	ldrb	r2, [r2, #45]	; 0x2d
   11de0:	cmp	r2, #0
   11de4:	bne	11fc0 <__assert_fail@plt+0xe44>
   11de8:	cmp	r5, #0
   11dec:	bne	121f0 <__assert_fail@plt+0x1074>
   11df0:	cmp	r0, #0
   11df4:	bne	11ff0 <__assert_fail@plt+0xe74>
   11df8:	cmp	r3, #0
   11dfc:	bne	11fe0 <__assert_fail@plt+0xe64>
   11e00:	ldr	r3, [pc, #1068]	; 12234 <__assert_fail@plt+0x10b8>
   11e04:	ldrb	r4, [r3, #21]
   11e08:	cmp	r4, #0
   11e0c:	bne	12104 <__assert_fail@plt+0xf88>
   11e10:	ldr	r3, [pc, #1052]	; 12234 <__assert_fail@plt+0x10b8>
   11e14:	ldrb	r3, [r3, #33]	; 0x21
   11e18:	cmp	r3, #0
   11e1c:	bne	11e78 <__assert_fail@plt+0xcfc>
   11e20:	ldr	r3, [pc, #1036]	; 12234 <__assert_fail@plt+0x10b8>
   11e24:	ldrb	r3, [r3, #44]	; 0x2c
   11e28:	cmp	r3, #0
   11e2c:	bne	11e78 <__assert_fail@plt+0xcfc>
   11e30:	ldr	r3, [pc, #1020]	; 12234 <__assert_fail@plt+0x10b8>
   11e34:	ldrb	r3, [r3, #46]	; 0x2e
   11e38:	cmp	r3, #0
   11e3c:	bne	11e78 <__assert_fail@plt+0xcfc>
   11e40:	bl	11080 <__errno_location@plt>
   11e44:	mov	r5, r0
   11e48:	mov	r3, #0
   11e4c:	str	r3, [r0]
   11e50:	bl	10f84 <geteuid@plt>
   11e54:	ldr	r3, [pc, #984]	; 12234 <__assert_fail@plt+0x10b8>
   11e58:	str	r0, [r3, #28]
   11e5c:	cmn	r0, #1
   11e60:	bne	11e70 <__assert_fail@plt+0xcf4>
   11e64:	ldr	r5, [r5]
   11e68:	cmp	r5, #0
   11e6c:	bne	1214c <__assert_fail@plt+0xfd0>
   11e70:	cmp	r4, #0
   11e74:	bne	12138 <__assert_fail@plt+0xfbc>
   11e78:	ldr	r3, [pc, #948]	; 12234 <__assert_fail@plt+0x10b8>
   11e7c:	ldrb	r3, [r3, #33]	; 0x21
   11e80:	cmp	r3, #0
   11e84:	bne	11ed4 <__assert_fail@plt+0xd58>
   11e88:	ldr	r3, [pc, #932]	; 12234 <__assert_fail@plt+0x10b8>
   11e8c:	ldrb	r3, [r3, #44]	; 0x2c
   11e90:	cmp	r3, #0
   11e94:	bne	11ea8 <__assert_fail@plt+0xd2c>
   11e98:	ldr	r3, [pc, #916]	; 12234 <__assert_fail@plt+0x10b8>
   11e9c:	ldrb	r3, [r3, #46]	; 0x2e
   11ea0:	cmp	r3, #0
   11ea4:	bne	11ed4 <__assert_fail@plt+0xd58>
   11ea8:	bl	11080 <__errno_location@plt>
   11eac:	mov	r5, r0
   11eb0:	mov	r3, #0
   11eb4:	str	r3, [r0]
   11eb8:	bl	10f0c <getuid@plt>
   11ebc:	ldr	r3, [pc, #880]	; 12234 <__assert_fail@plt+0x10b8>
   11ec0:	str	r0, [r3, #24]
   11ec4:	cmn	r0, #1
   11ec8:	beq	1216c <__assert_fail@plt+0xff0>
   11ecc:	cmp	r4, #0
   11ed0:	bne	11f44 <__assert_fail@plt+0xdc8>
   11ed4:	ldr	r3, [pc, #856]	; 12234 <__assert_fail@plt+0x10b8>
   11ed8:	ldrb	r3, [r3, #33]	; 0x21
   11edc:	cmp	r3, #0
   11ee0:	bne	11f04 <__assert_fail@plt+0xd88>
   11ee4:	ldr	r3, [pc, #840]	; 12234 <__assert_fail@plt+0x10b8>
   11ee8:	ldrb	r3, [r3, #44]	; 0x2c
   11eec:	cmp	r3, #0
   11ef0:	bne	11f04 <__assert_fail@plt+0xd88>
   11ef4:	ldr	r3, [pc, #824]	; 12234 <__assert_fail@plt+0x10b8>
   11ef8:	ldrb	r3, [r3, #46]	; 0x2e
   11efc:	cmp	r3, #0
   11f00:	bne	11f44 <__assert_fail@plt+0xdc8>
   11f04:	bl	11080 <__errno_location@plt>
   11f08:	mov	r4, r0
   11f0c:	mov	r3, #0
   11f10:	str	r3, [r0]
   11f14:	bl	10f9c <getegid@plt>
   11f18:	ldr	r3, [pc, #788]	; 12234 <__assert_fail@plt+0x10b8>
   11f1c:	str	r0, [r3, #40]	; 0x28
   11f20:	cmn	r0, #1
   11f24:	beq	12198 <__assert_fail@plt+0x101c>
   11f28:	mov	r3, #0
   11f2c:	str	r3, [r4]
   11f30:	bl	11098 <getgid@plt>
   11f34:	ldr	r3, [pc, #760]	; 12234 <__assert_fail@plt+0x10b8>
   11f38:	str	r0, [r3, #36]	; 0x24
   11f3c:	cmn	r0, #1
   11f40:	beq	121c4 <__assert_fail@plt+0x1048>
   11f44:	mov	r0, #0
   11f48:	bl	112cc <__assert_fail@plt+0x150>
   11f4c:	ldr	r3, [pc, #772]	; 12258 <__assert_fail@plt+0x10dc>
   11f50:	ldrb	r0, [r3]
   11f54:	eor	r0, r0, #1
   11f58:	add	sp, sp, #20
   11f5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f60:	mov	r2, #5
   11f64:	ldr	r1, [pc, #752]	; 1225c <__assert_fail@plt+0x10e0>
   11f68:	mov	r0, #0
   11f6c:	bl	10f60 <dcgettext@plt>
   11f70:	mov	r2, r0
   11f74:	mov	r1, #0
   11f78:	mov	r0, #1
   11f7c:	bl	10ff0 <error@plt>
   11f80:	mov	r2, #5
   11f84:	ldr	r1, [pc, #724]	; 12260 <__assert_fail@plt+0x10e4>
   11f88:	mov	r0, #0
   11f8c:	bl	10f60 <dcgettext@plt>
   11f90:	mov	r2, r0
   11f94:	mov	r1, #0
   11f98:	mov	r0, #1
   11f9c:	bl	10ff0 <error@plt>
   11fa0:	mov	r2, #5
   11fa4:	ldr	r1, [pc, #696]	; 12264 <__assert_fail@plt+0x10e8>
   11fa8:	mov	r0, #0
   11fac:	bl	10f60 <dcgettext@plt>
   11fb0:	mov	r2, r0
   11fb4:	mov	r1, #0
   11fb8:	mov	r0, #1
   11fbc:	bl	10ff0 <error@plt>
   11fc0:	mov	r2, #5
   11fc4:	ldr	r1, [pc, #668]	; 12268 <__assert_fail@plt+0x10ec>
   11fc8:	mov	r0, #0
   11fcc:	bl	10f60 <dcgettext@plt>
   11fd0:	mov	r2, r0
   11fd4:	mov	r1, #0
   11fd8:	mov	r0, #1
   11fdc:	bl	10ff0 <error@plt>
   11fe0:	ldr	r0, [pc, #644]	; 1226c <__assert_fail@plt+0x10f0>
   11fe4:	bl	10ffc <getenv@plt>
   11fe8:	cmp	r0, #0
   11fec:	bne	11e00 <__assert_fail@plt+0xc84>
   11ff0:	cmp	fp, #0
   11ff4:	ble	11e00 <__assert_fail@plt+0xc84>
   11ff8:	ldr	r0, [pc, #624]	; 12270 <__assert_fail@plt+0x10f4>
   11ffc:	bl	10fcc <getcon@plt>
   12000:	cmp	r0, #0
   12004:	beq	11e00 <__assert_fail@plt+0xc84>
   12008:	ldr	r3, [pc, #548]	; 12234 <__assert_fail@plt+0x10b8>
   1200c:	ldrb	r3, [r3, #46]	; 0x2e
   12010:	cmp	r3, #0
   12014:	beq	11e00 <__assert_fail@plt+0xc84>
   12018:	mov	r2, #5
   1201c:	ldr	r1, [pc, #592]	; 12274 <__assert_fail@plt+0x10f8>
   12020:	mov	r0, #0
   12024:	bl	10f60 <dcgettext@plt>
   12028:	mov	r2, r0
   1202c:	mov	r1, #0
   12030:	mov	r0, #1
   12034:	bl	10ff0 <error@plt>
   12038:	mov	r2, #0
   1203c:	str	r2, [sp]
   12040:	mov	r3, r2
   12044:	mov	r1, sl
   12048:	bl	144f4 <__assert_fail@plt+0x3378>
   1204c:	cmp	r0, #0
   12050:	bne	120bc <__assert_fail@plt+0xf40>
   12054:	ldr	r0, [r5, #28]
   12058:	bl	10ef4 <getpwuid@plt>
   1205c:	subs	r7, r0, #0
   12060:	beq	120bc <__assert_fail@plt+0xf40>
   12064:	ldr	r0, [r7]
   12068:	bl	150c4 <__assert_fail@plt+0x3f48>
   1206c:	mov	r9, r0
   12070:	ldr	r3, [r7, #8]
   12074:	str	r3, [r5, #28]
   12078:	str	r3, [r5, #24]
   1207c:	ldr	r3, [r7, #12]
   12080:	str	r3, [r5, #40]	; 0x28
   12084:	str	r3, [r5, #36]	; 0x24
   12088:	bl	112cc <__assert_fail@plt+0x150>
   1208c:	mov	r0, r9
   12090:	bl	125ec <__assert_fail@plt+0x1470>
   12094:	ldr	r3, [r6]
   12098:	add	r3, r3, #1
   1209c:	str	r3, [r6]
   120a0:	ldr	r3, [r6]
   120a4:	cmp	r8, r3
   120a8:	bls	11f4c <__assert_fail@plt+0xdd0>
   120ac:	ldr	r0, [r4, r3, lsl #2]
   120b0:	ldrb	r3, [r0]
   120b4:	cmp	r3, #0
   120b8:	bne	12038 <__assert_fail@plt+0xebc>
   120bc:	bl	11080 <__errno_location@plt>
   120c0:	ldr	r7, [r0]
   120c4:	mov	r2, #5
   120c8:	ldr	r1, [pc, #424]	; 12278 <__assert_fail@plt+0x10fc>
   120cc:	mov	r0, #0
   120d0:	bl	10f60 <dcgettext@plt>
   120d4:	mov	r9, r0
   120d8:	ldr	r3, [r6]
   120dc:	ldr	r0, [r4, r3, lsl #2]
   120e0:	bl	141fc <__assert_fail@plt+0x3080>
   120e4:	mov	r3, r0
   120e8:	mov	r2, r9
   120ec:	mov	r1, r7
   120f0:	mov	r0, #0
   120f4:	bl	10ff0 <error@plt>
   120f8:	mov	r3, #0
   120fc:	strb	r3, [fp]
   12100:	b	12094 <__assert_fail@plt+0xf18>
   12104:	ldr	r3, [pc, #296]	; 12234 <__assert_fail@plt+0x10b8>
   12108:	ldrb	r3, [r3, #22]
   1210c:	cmp	r3, #0
   12110:	bne	11ea8 <__assert_fail@plt+0xd2c>
   12114:	bl	11080 <__errno_location@plt>
   12118:	mov	r5, r0
   1211c:	mov	r3, #0
   12120:	str	r3, [r0]
   12124:	bl	10f84 <geteuid@plt>
   12128:	ldr	r3, [pc, #260]	; 12234 <__assert_fail@plt+0x10b8>
   1212c:	str	r0, [r3, #28]
   12130:	cmn	r0, #1
   12134:	beq	11e64 <__assert_fail@plt+0xce8>
   12138:	ldr	r3, [pc, #244]	; 12234 <__assert_fail@plt+0x10b8>
   1213c:	ldrb	r3, [r3, #22]
   12140:	cmp	r3, #0
   12144:	beq	11f44 <__assert_fail@plt+0xdc8>
   12148:	b	11ea8 <__assert_fail@plt+0xd2c>
   1214c:	mov	r2, #5
   12150:	ldr	r1, [pc, #292]	; 1227c <__assert_fail@plt+0x1100>
   12154:	mov	r0, #0
   12158:	bl	10f60 <dcgettext@plt>
   1215c:	mov	r2, r0
   12160:	mov	r1, r5
   12164:	mov	r0, #1
   12168:	bl	10ff0 <error@plt>
   1216c:	ldr	r5, [r5]
   12170:	cmp	r5, #0
   12174:	beq	11ecc <__assert_fail@plt+0xd50>
   12178:	mov	r2, #5
   1217c:	ldr	r1, [pc, #252]	; 12280 <__assert_fail@plt+0x1104>
   12180:	mov	r0, #0
   12184:	bl	10f60 <dcgettext@plt>
   12188:	mov	r2, r0
   1218c:	mov	r1, r5
   12190:	mov	r0, #1
   12194:	bl	10ff0 <error@plt>
   12198:	ldr	r5, [r4]
   1219c:	cmp	r5, #0
   121a0:	beq	11f28 <__assert_fail@plt+0xdac>
   121a4:	mov	r2, #5
   121a8:	ldr	r1, [pc, #212]	; 12284 <__assert_fail@plt+0x1108>
   121ac:	mov	r0, #0
   121b0:	bl	10f60 <dcgettext@plt>
   121b4:	mov	r2, r0
   121b8:	mov	r1, r5
   121bc:	mov	r0, #1
   121c0:	bl	10ff0 <error@plt>
   121c4:	ldr	r4, [r4]
   121c8:	cmp	r4, #0
   121cc:	beq	11f44 <__assert_fail@plt+0xdc8>
   121d0:	mov	r2, #5
   121d4:	ldr	r1, [pc, #172]	; 12288 <__assert_fail@plt+0x110c>
   121d8:	mov	r0, #0
   121dc:	bl	10f60 <dcgettext@plt>
   121e0:	mov	r2, r0
   121e4:	mov	r1, r4
   121e8:	mov	r0, #1
   121ec:	bl	10ff0 <error@plt>
   121f0:	cmp	r5, #1
   121f4:	movls	r2, #0
   121f8:	movhi	r2, #1
   121fc:	ldr	r3, [pc, #48]	; 12234 <__assert_fail@plt+0x10b8>
   12200:	strb	r2, [r3, #73]	; 0x49
   12204:	add	r8, r8, r5
   12208:	ldr	r6, [pc, #68]	; 12254 <__assert_fail@plt+0x10d8>
   1220c:	ldr	fp, [pc, #68]	; 12258 <__assert_fail@plt+0x10dc>
   12210:	mov	r5, r3
   12214:	add	sl, r3, #28
   12218:	b	120a0 <__assert_fail@plt+0xf24>
   1221c:	andeq	r6, r1, r4, lsr #11
   12220:	andeq	r6, r1, r4, lsl r9
   12224:			; <UNDEFINED> instruction: 0x000169bc
   12228:	strdeq	r2, [r1], -r8
   1222c:	strdeq	r6, [r1], -ip
   12230:	andeq	r6, r1, ip, lsr #20
   12234:	andeq	r8, r2, ip, ror r1
   12238:	andeq	r6, r1, ip, lsl #20
   1223c:	andeq	r6, r1, ip, lsl sl
   12240:	andeq	r8, r2, r4, lsl r1
   12244:	andeq	r6, r1, r0, lsl r9
   12248:	andeq	r6, r1, r8, asr r5
   1224c:	andeq	r8, r2, r4, ror r1
   12250:	ldrdeq	r6, [r1], -r4
   12254:	andeq	r8, r2, r8, ror #2
   12258:	andeq	r8, r2, r0, lsl r1
   1225c:	andeq	r6, r1, r8, lsr sl
   12260:	andeq	r6, r1, ip, ror #20
   12264:	muleq	r1, r8, sl
   12268:	ldrdeq	r6, [r1], -r0
   1226c:	andeq	r6, r1, r0, lsl #22
   12270:	andeq	r8, r2, ip, lsr #3
   12274:	andeq	r6, r1, r0, lsl fp
   12278:	andeq	r6, r1, ip, lsr #22
   1227c:	andeq	r6, r1, r0, asr #22
   12280:	andeq	r6, r1, ip, asr fp
   12284:	andeq	r6, r1, r0, ror fp
   12288:	andeq	r6, r1, ip, lsl #23
   1228c:	push	{r4, r5, r6, lr}
   12290:	mov	r5, r0
   12294:	subs	r4, r1, #0
   12298:	moveq	r4, #1
   1229c:	bne	122c4 <__assert_fail@plt+0x1148>
   122a0:	ldr	r2, [pc, #88]	; 12300 <__assert_fail@plt+0x1184>
   122a4:	mov	r0, r5
   122a8:	mov	r1, #0
   122ac:	bl	12644 <__assert_fail@plt+0x14c8>
   122b0:	ldr	r3, [pc, #76]	; 12304 <__assert_fail@plt+0x1188>
   122b4:	ldr	r1, [r3]
   122b8:	bl	10eb8 <fputs_unlocked@plt>
   122bc:	mov	r0, r4
   122c0:	pop	{r4, r5, r6, pc}
   122c4:	bl	11164 <getgrgid@plt>
   122c8:	cmp	r0, #0
   122cc:	ldrne	r0, [r0]
   122d0:	bne	122b0 <__assert_fail@plt+0x1134>
   122d4:	mov	r2, #5
   122d8:	ldr	r1, [pc, #40]	; 12308 <__assert_fail@plt+0x118c>
   122dc:	mov	r0, #0
   122e0:	bl	10f60 <dcgettext@plt>
   122e4:	mov	r3, r5
   122e8:	mov	r2, r0
   122ec:	mov	r1, #0
   122f0:	mov	r0, r1
   122f4:	bl	10ff0 <error@plt>
   122f8:	mov	r4, #0
   122fc:	b	122a0 <__assert_fail@plt+0x1124>
   12300:	andeq	r8, r2, r8, asr #3
   12304:	andeq	r8, r2, r4, ror r1
   12308:	andeq	r6, r1, r4, asr #24
   1230c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12310:	sub	sp, sp, #20
   12314:	mov	r7, r2
   12318:	mov	r8, r3
   1231c:	ldrb	r3, [sp, #56]	; 0x38
   12320:	str	r3, [sp, #4]
   12324:	ldrb	sl, [sp, #60]	; 0x3c
   12328:	subs	r4, r0, #0
   1232c:	beq	123d8 <__assert_fail@plt+0x125c>
   12330:	mov	r0, r1
   12334:	bl	10ef4 <getpwuid@plt>
   12338:	mov	r6, r0
   1233c:	adds	r5, r0, #0
   12340:	movne	r5, #1
   12344:	ldr	r1, [sp, #4]
   12348:	mov	r0, r7
   1234c:	bl	1228c <__assert_fail@plt+0x1110>
   12350:	cmp	r0, #0
   12354:	moveq	r5, #0
   12358:	cmp	r7, r8
   1235c:	beq	12398 <__assert_fail@plt+0x121c>
   12360:	ldr	r3, [pc, #356]	; 124cc <__assert_fail@plt+0x1350>
   12364:	ldr	r0, [r3]
   12368:	ldr	r3, [r0, #20]
   1236c:	ldr	r2, [r0, #24]
   12370:	cmp	r3, r2
   12374:	addcc	r2, r3, #1
   12378:	strcc	r2, [r0, #20]
   1237c:	strbcc	sl, [r3]
   12380:	bcs	123e4 <__assert_fail@plt+0x1268>
   12384:	ldr	r1, [sp, #4]
   12388:	mov	r0, r8
   1238c:	bl	1228c <__assert_fail@plt+0x1110>
   12390:	cmp	r0, #0
   12394:	moveq	r5, #0
   12398:	cmp	r6, #0
   1239c:	ldrne	r1, [r6, #12]
   123a0:	moveq	r1, r8
   123a4:	add	r2, sp, #12
   123a8:	mov	r0, r4
   123ac:	bl	15120 <__assert_fail@plt+0x3fa4>
   123b0:	subs	r9, r0, #0
   123b4:	blt	123f0 <__assert_fail@plt+0x1274>
   123b8:	movgt	r4, #0
   123bc:	ldrgt	fp, [pc, #264]	; 124cc <__assert_fail@plt+0x1350>
   123c0:	bgt	12488 <__assert_fail@plt+0x130c>
   123c4:	ldr	r0, [sp, #12]
   123c8:	bl	125ec <__assert_fail@plt+0x1470>
   123cc:	mov	r0, r5
   123d0:	add	sp, sp, #20
   123d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d8:	mov	r6, #0
   123dc:	mov	r5, #1
   123e0:	b	12344 <__assert_fail@plt+0x11c8>
   123e4:	mov	r1, sl
   123e8:	bl	110f8 <__overflow@plt>
   123ec:	b	12384 <__assert_fail@plt+0x1208>
   123f0:	cmp	r4, #0
   123f4:	beq	12438 <__assert_fail@plt+0x12bc>
   123f8:	bl	11080 <__errno_location@plt>
   123fc:	ldr	r5, [r0]
   12400:	mov	r2, #5
   12404:	ldr	r1, [pc, #196]	; 124d0 <__assert_fail@plt+0x1354>
   12408:	mov	r0, #0
   1240c:	bl	10f60 <dcgettext@plt>
   12410:	mov	r6, r0
   12414:	mov	r0, r4
   12418:	bl	141fc <__assert_fail@plt+0x3080>
   1241c:	mov	r3, r0
   12420:	mov	r2, r6
   12424:	mov	r1, r5
   12428:	mov	r0, #0
   1242c:	bl	10ff0 <error@plt>
   12430:	mov	r5, #0
   12434:	b	123cc <__assert_fail@plt+0x1250>
   12438:	bl	11080 <__errno_location@plt>
   1243c:	ldr	r4, [r0]
   12440:	mov	r2, #5
   12444:	ldr	r1, [pc, #136]	; 124d4 <__assert_fail@plt+0x1358>
   12448:	mov	r0, #0
   1244c:	bl	10f60 <dcgettext@plt>
   12450:	mov	r2, r0
   12454:	mov	r1, r4
   12458:	mov	r0, #0
   1245c:	bl	10ff0 <error@plt>
   12460:	b	12430 <__assert_fail@plt+0x12b4>
   12464:	ldr	r1, [sp, #4]
   12468:	ldr	r3, [sp, #12]
   1246c:	ldr	r0, [r3, r6]
   12470:	bl	1228c <__assert_fail@plt+0x1110>
   12474:	cmp	r0, #0
   12478:	moveq	r5, #0
   1247c:	add	r4, r4, #1
   12480:	cmp	r9, r4
   12484:	beq	123c4 <__assert_fail@plt+0x1248>
   12488:	lsl	r6, r4, #2
   1248c:	ldr	r3, [sp, #12]
   12490:	ldr	r3, [r3, r4, lsl #2]
   12494:	cmp	r8, r3
   12498:	cmpne	r7, r3
   1249c:	beq	1247c <__assert_fail@plt+0x1300>
   124a0:	ldr	r0, [fp]
   124a4:	ldr	r3, [r0, #20]
   124a8:	ldr	r2, [r0, #24]
   124ac:	cmp	r3, r2
   124b0:	addcc	r2, r3, #1
   124b4:	strcc	r2, [r0, #20]
   124b8:	strbcc	sl, [r3]
   124bc:	bcc	12464 <__assert_fail@plt+0x12e8>
   124c0:	mov	r1, sl
   124c4:	bl	110f8 <__overflow@plt>
   124c8:	b	12464 <__assert_fail@plt+0x12e8>
   124cc:	andeq	r8, r2, r4, ror r1
   124d0:	andeq	r6, r1, ip, ror #9
   124d4:	andeq	r6, r1, r0, lsl r5
   124d8:	ldr	r3, [pc, #4]	; 124e4 <__assert_fail@plt+0x1368>
   124dc:	str	r0, [r3]
   124e0:	bx	lr
   124e4:	andeq	r8, r2, r0, ror #3
   124e8:	ldr	r3, [pc, #4]	; 124f4 <__assert_fail@plt+0x1378>
   124ec:	strb	r0, [r3, #4]
   124f0:	bx	lr
   124f4:	andeq	r8, r2, r0, ror #3
   124f8:	push	{r4, r5, r6, lr}
   124fc:	sub	sp, sp, #8
   12500:	ldr	r3, [pc, #200]	; 125d0 <__assert_fail@plt+0x1454>
   12504:	ldr	r0, [r3]
   12508:	bl	15750 <__assert_fail@plt+0x45d4>
   1250c:	cmp	r0, #0
   12510:	beq	12534 <__assert_fail@plt+0x13b8>
   12514:	ldr	r3, [pc, #184]	; 125d4 <__assert_fail@plt+0x1458>
   12518:	ldrb	r3, [r3, #4]
   1251c:	cmp	r3, #0
   12520:	beq	12550 <__assert_fail@plt+0x13d4>
   12524:	bl	11080 <__errno_location@plt>
   12528:	ldr	r3, [r0]
   1252c:	cmp	r3, #32
   12530:	bne	12550 <__assert_fail@plt+0x13d4>
   12534:	ldr	r3, [pc, #156]	; 125d8 <__assert_fail@plt+0x145c>
   12538:	ldr	r0, [r3]
   1253c:	bl	15750 <__assert_fail@plt+0x45d4>
   12540:	cmp	r0, #0
   12544:	bne	125c4 <__assert_fail@plt+0x1448>
   12548:	add	sp, sp, #8
   1254c:	pop	{r4, r5, r6, pc}
   12550:	mov	r2, #5
   12554:	ldr	r1, [pc, #128]	; 125dc <__assert_fail@plt+0x1460>
   12558:	mov	r0, #0
   1255c:	bl	10f60 <dcgettext@plt>
   12560:	mov	r4, r0
   12564:	ldr	r3, [pc, #104]	; 125d4 <__assert_fail@plt+0x1458>
   12568:	ldr	r5, [r3]
   1256c:	cmp	r5, #0
   12570:	beq	125a8 <__assert_fail@plt+0x142c>
   12574:	bl	11080 <__errno_location@plt>
   12578:	ldr	r6, [r0]
   1257c:	mov	r0, r5
   12580:	bl	14074 <__assert_fail@plt+0x2ef8>
   12584:	str	r4, [sp]
   12588:	mov	r3, r0
   1258c:	ldr	r2, [pc, #76]	; 125e0 <__assert_fail@plt+0x1464>
   12590:	mov	r1, r6
   12594:	mov	r0, #0
   12598:	bl	10ff0 <error@plt>
   1259c:	ldr	r3, [pc, #64]	; 125e4 <__assert_fail@plt+0x1468>
   125a0:	ldr	r0, [r3]
   125a4:	bl	10f24 <_exit@plt>
   125a8:	bl	11080 <__errno_location@plt>
   125ac:	mov	r3, r4
   125b0:	ldr	r2, [pc, #48]	; 125e8 <__assert_fail@plt+0x146c>
   125b4:	ldr	r1, [r0]
   125b8:	mov	r0, #0
   125bc:	bl	10ff0 <error@plt>
   125c0:	b	1259c <__assert_fail@plt+0x1420>
   125c4:	ldr	r3, [pc, #24]	; 125e4 <__assert_fail@plt+0x1468>
   125c8:	ldr	r0, [r3]
   125cc:	bl	10f24 <_exit@plt>
   125d0:	andeq	r8, r2, r4, ror r1
   125d4:	andeq	r8, r2, r0, ror #3
   125d8:	andeq	r8, r2, r0, ror r1
   125dc:	andeq	r6, r1, r8, ror ip
   125e0:	andeq	r6, r1, r4, lsl #25
   125e4:	andeq	r8, r2, r8, lsl r1
   125e8:	andeq	r6, r1, r8, lsl #25
   125ec:	push	{r4, r5, lr}
   125f0:	sub	sp, sp, #12
   125f4:	mov	r5, r0
   125f8:	bl	11080 <__errno_location@plt>
   125fc:	mov	r4, r0
   12600:	ldr	r3, [r0]
   12604:	str	r3, [sp]
   12608:	str	r3, [sp, #4]
   1260c:	mov	r3, #0
   12610:	str	r3, [r0]
   12614:	mov	r0, r5
   12618:	bl	10f18 <free@plt>
   1261c:	ldr	r3, [r4]
   12620:	cmp	r3, #0
   12624:	moveq	r3, #4
   12628:	movne	r3, #0
   1262c:	add	r2, sp, #8
   12630:	add	r3, r2, r3
   12634:	ldr	r3, [r3, #-8]
   12638:	str	r3, [r4]
   1263c:	add	sp, sp, #12
   12640:	pop	{r4, r5, pc}
   12644:	push	{r4, r5, r6, r8, r9, lr}
   12648:	mov	r4, r0
   1264c:	mov	r5, r1
   12650:	add	r6, r2, #20
   12654:	mov	r3, #0
   12658:	strb	r3, [r2, #20]
   1265c:	mov	r8, #10
   12660:	mov	r9, #0
   12664:	mov	r2, r8
   12668:	mov	r3, r9
   1266c:	mov	r0, r4
   12670:	mov	r1, r5
   12674:	bl	161c8 <__assert_fail@plt+0x504c>
   12678:	add	r2, r2, #48	; 0x30
   1267c:	strb	r2, [r6, #-1]!
   12680:	mov	r2, r8
   12684:	mov	r3, r9
   12688:	mov	r0, r4
   1268c:	mov	r1, r5
   12690:	bl	161c8 <__assert_fail@plt+0x504c>
   12694:	mov	r4, r0
   12698:	mov	r5, r1
   1269c:	orrs	r3, r4, r5
   126a0:	bne	12664 <__assert_fail@plt+0x14e8>
   126a4:	mov	r0, r6
   126a8:	pop	{r4, r5, r6, r8, r9, pc}
   126ac:	push	{r4, r5, r6, lr}
   126b0:	subs	r4, r0, #0
   126b4:	beq	1272c <__assert_fail@plt+0x15b0>
   126b8:	mov	r1, #47	; 0x2f
   126bc:	mov	r0, r4
   126c0:	bl	1111c <strrchr@plt>
   126c4:	cmp	r0, #0
   126c8:	addne	r5, r0, #1
   126cc:	moveq	r5, r4
   126d0:	sub	r3, r5, r4
   126d4:	cmp	r3, #6
   126d8:	ble	12718 <__assert_fail@plt+0x159c>
   126dc:	mov	r2, #7
   126e0:	ldr	r1, [pc, #96]	; 12748 <__assert_fail@plt+0x15cc>
   126e4:	sub	r0, r5, #7
   126e8:	bl	1114c <strncmp@plt>
   126ec:	cmp	r0, #0
   126f0:	bne	12718 <__assert_fail@plt+0x159c>
   126f4:	mov	r2, #3
   126f8:	ldr	r1, [pc, #76]	; 1274c <__assert_fail@plt+0x15d0>
   126fc:	mov	r0, r5
   12700:	bl	1114c <strncmp@plt>
   12704:	cmp	r0, #0
   12708:	addeq	r4, r5, #3
   1270c:	ldreq	r3, [pc, #60]	; 12750 <__assert_fail@plt+0x15d4>
   12710:	streq	r4, [r3]
   12714:	movne	r4, r5
   12718:	ldr	r3, [pc, #52]	; 12754 <__assert_fail@plt+0x15d8>
   1271c:	str	r4, [r3]
   12720:	ldr	r3, [pc, #48]	; 12758 <__assert_fail@plt+0x15dc>
   12724:	str	r4, [r3]
   12728:	pop	{r4, r5, r6, pc}
   1272c:	ldr	r3, [pc, #40]	; 1275c <__assert_fail@plt+0x15e0>
   12730:	ldr	r3, [r3]
   12734:	mov	r2, #55	; 0x37
   12738:	mov	r1, #1
   1273c:	ldr	r0, [pc, #28]	; 12760 <__assert_fail@plt+0x15e4>
   12740:	bl	10fa8 <fwrite@plt>
   12744:	bl	11158 <abort@plt>
   12748:	andeq	r6, r1, r4, asr #25
   1274c:	andeq	r6, r1, ip, asr #25
   12750:	andeq	r8, r2, r0, ror #2
   12754:	andeq	r8, r2, r8, ror #3
   12758:	andeq	r8, r2, r4, ror #2
   1275c:	andeq	r8, r2, r0, ror r1
   12760:	andeq	r6, r1, ip, lsl #25
   12764:	push	{r4, r5, r6, lr}
   12768:	mov	r5, r0
   1276c:	mov	r4, r1
   12770:	mov	r2, #48	; 0x30
   12774:	mov	r1, #0
   12778:	bl	110b0 <memset@plt>
   1277c:	cmp	r4, #10
   12780:	beq	12790 <__assert_fail@plt+0x1614>
   12784:	str	r4, [r5]
   12788:	mov	r0, r5
   1278c:	pop	{r4, r5, r6, pc}
   12790:	bl	11158 <abort@plt>
   12794:	push	{r4, r5, r6, lr}
   12798:	mov	r4, r0
   1279c:	mov	r5, r1
   127a0:	mov	r2, #5
   127a4:	mov	r1, r0
   127a8:	mov	r0, #0
   127ac:	bl	10f60 <dcgettext@plt>
   127b0:	cmp	r4, r0
   127b4:	popne	{r4, r5, r6, pc}
   127b8:	bl	1597c <__assert_fail@plt+0x4800>
   127bc:	ldrb	r3, [r0]
   127c0:	bic	r3, r3, #32
   127c4:	cmp	r3, #85	; 0x55
   127c8:	beq	12844 <__assert_fail@plt+0x16c8>
   127cc:	cmp	r3, #71	; 0x47
   127d0:	bne	128a0 <__assert_fail@plt+0x1724>
   127d4:	ldrb	r3, [r0, #1]
   127d8:	bic	r3, r3, #32
   127dc:	cmp	r3, #66	; 0x42
   127e0:	bne	128a0 <__assert_fail@plt+0x1724>
   127e4:	ldrb	r3, [r0, #2]
   127e8:	cmp	r3, #49	; 0x31
   127ec:	bne	128a0 <__assert_fail@plt+0x1724>
   127f0:	ldrb	r3, [r0, #3]
   127f4:	cmp	r3, #56	; 0x38
   127f8:	bne	128a0 <__assert_fail@plt+0x1724>
   127fc:	ldrb	r3, [r0, #4]
   12800:	cmp	r3, #48	; 0x30
   12804:	bne	128a0 <__assert_fail@plt+0x1724>
   12808:	ldrb	r3, [r0, #5]
   1280c:	cmp	r3, #51	; 0x33
   12810:	bne	128a0 <__assert_fail@plt+0x1724>
   12814:	ldrb	r3, [r0, #6]
   12818:	cmp	r3, #48	; 0x30
   1281c:	bne	128a0 <__assert_fail@plt+0x1724>
   12820:	ldrb	r3, [r0, #7]
   12824:	cmp	r3, #0
   12828:	bne	128a0 <__assert_fail@plt+0x1724>
   1282c:	ldrb	r2, [r4]
   12830:	ldr	r3, [pc, #124]	; 128b4 <__assert_fail@plt+0x1738>
   12834:	ldr	r0, [pc, #124]	; 128b8 <__assert_fail@plt+0x173c>
   12838:	cmp	r2, #96	; 0x60
   1283c:	movne	r0, r3
   12840:	pop	{r4, r5, r6, pc}
   12844:	ldrb	r3, [r0, #1]
   12848:	bic	r3, r3, #32
   1284c:	cmp	r3, #84	; 0x54
   12850:	bne	128a0 <__assert_fail@plt+0x1724>
   12854:	ldrb	r3, [r0, #2]
   12858:	bic	r3, r3, #32
   1285c:	cmp	r3, #70	; 0x46
   12860:	bne	128a0 <__assert_fail@plt+0x1724>
   12864:	ldrb	r3, [r0, #3]
   12868:	cmp	r3, #45	; 0x2d
   1286c:	bne	128a0 <__assert_fail@plt+0x1724>
   12870:	ldrb	r3, [r0, #4]
   12874:	cmp	r3, #56	; 0x38
   12878:	bne	128a0 <__assert_fail@plt+0x1724>
   1287c:	ldrb	r3, [r0, #5]
   12880:	cmp	r3, #0
   12884:	bne	128a0 <__assert_fail@plt+0x1724>
   12888:	ldrb	r2, [r4]
   1288c:	ldr	r3, [pc, #40]	; 128bc <__assert_fail@plt+0x1740>
   12890:	ldr	r0, [pc, #40]	; 128c0 <__assert_fail@plt+0x1744>
   12894:	cmp	r2, #96	; 0x60
   12898:	movne	r0, r3
   1289c:	pop	{r4, r5, r6, pc}
   128a0:	ldr	r3, [pc, #28]	; 128c4 <__assert_fail@plt+0x1748>
   128a4:	ldr	r0, [pc, #28]	; 128c8 <__assert_fail@plt+0x174c>
   128a8:	cmp	r5, #9
   128ac:	movne	r0, r3
   128b0:	pop	{r4, r5, r6, pc}
   128b4:	andeq	r6, r1, r8, lsr #26
   128b8:	andeq	r6, r1, r4, lsr sp
   128bc:	andeq	r6, r1, r4, lsr #26
   128c0:	andeq	r6, r1, r8, lsr sp
   128c4:	andeq	r6, r1, ip, lsr #26
   128c8:	andeq	r6, r1, r0, lsr sp
   128cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128d0:	sub	sp, sp, #116	; 0x74
   128d4:	str	r0, [sp, #36]	; 0x24
   128d8:	mov	sl, r1
   128dc:	str	r2, [sp, #52]	; 0x34
   128e0:	str	r3, [sp, #28]
   128e4:	ldr	r8, [sp, #152]	; 0x98
   128e8:	bl	10fc0 <__ctype_get_mb_cur_max@plt>
   128ec:	str	r0, [sp, #84]	; 0x54
   128f0:	ldr	r3, [sp, #156]	; 0x9c
   128f4:	lsr	r3, r3, #1
   128f8:	and	r3, r3, #1
   128fc:	str	r3, [sp, #32]
   12900:	mov	r3, #1
   12904:	str	r3, [sp, #40]	; 0x28
   12908:	mov	r3, #0
   1290c:	str	r3, [sp, #80]	; 0x50
   12910:	str	r3, [sp, #44]	; 0x2c
   12914:	str	r3, [sp, #48]	; 0x30
   12918:	str	r3, [sp, #60]	; 0x3c
   1291c:	str	r3, [sp, #72]	; 0x48
   12920:	str	r3, [sp, #76]	; 0x4c
   12924:	mov	r7, sl
   12928:	mov	sl, r8
   1292c:	cmp	sl, #10
   12930:	ldrls	pc, [pc, sl, lsl #2]
   12934:	b	12aec <__assert_fail@plt+0x1970>
   12938:	muleq	r1, ip, r9
   1293c:	andeq	r2, r1, ip, ror #18
   12940:	andeq	r2, r1, r8, asr #21
   12944:	andeq	r2, r1, r4, ror #18
   12948:	andeq	r2, r1, ip, ror sl
   1294c:	andeq	r2, r1, ip, lsr #19
   12950:	andeq	r3, r1, r8, lsl sl
   12954:	strdeq	r2, [r1], -r0
   12958:	andeq	r2, r1, r8, ror #19
   1295c:	andeq	r2, r1, r8, ror #19
   12960:	andeq	r2, r1, r8, ror #19
   12964:	mov	r3, #1
   12968:	str	r3, [sp, #48]	; 0x30
   1296c:	mov	r3, #1
   12970:	str	r3, [sp, #32]
   12974:	str	r3, [sp, #60]	; 0x3c
   12978:	ldr	r3, [pc, #4068]	; 13964 <__assert_fail@plt+0x27e8>
   1297c:	str	r3, [sp, #72]	; 0x48
   12980:	mov	fp, #0
   12984:	mov	sl, #2
   12988:	mov	r6, #0
   1298c:	ldr	r3, [sp, #48]	; 0x30
   12990:	eor	r3, r3, #1
   12994:	str	r3, [sp, #68]	; 0x44
   12998:	b	13280 <__assert_fail@plt+0x2104>
   1299c:	mov	r3, #0
   129a0:	str	r3, [sp, #32]
   129a4:	mov	fp, r3
   129a8:	b	12988 <__assert_fail@plt+0x180c>
   129ac:	ldr	r3, [sp, #32]
   129b0:	cmp	r3, #0
   129b4:	bne	12b08 <__assert_fail@plt+0x198c>
   129b8:	cmp	r7, #0
   129bc:	beq	12b28 <__assert_fail@plt+0x19ac>
   129c0:	ldr	r3, [sp, #36]	; 0x24
   129c4:	mov	r2, #34	; 0x22
   129c8:	strb	r2, [r3]
   129cc:	mov	r3, #1
   129d0:	str	r3, [sp, #48]	; 0x30
   129d4:	str	r3, [sp, #60]	; 0x3c
   129d8:	ldr	r3, [pc, #3980]	; 1396c <__assert_fail@plt+0x27f0>
   129dc:	str	r3, [sp, #72]	; 0x48
   129e0:	mov	fp, #1
   129e4:	b	12988 <__assert_fail@plt+0x180c>
   129e8:	cmp	sl, #10
   129ec:	beq	12a10 <__assert_fail@plt+0x1894>
   129f0:	mov	r1, sl
   129f4:	ldr	r0, [pc, #3948]	; 13968 <__assert_fail@plt+0x27ec>
   129f8:	bl	12794 <__assert_fail@plt+0x1618>
   129fc:	str	r0, [sp, #164]	; 0xa4
   12a00:	mov	r1, sl
   12a04:	ldr	r0, [pc, #3928]	; 13964 <__assert_fail@plt+0x27e8>
   12a08:	bl	12794 <__assert_fail@plt+0x1618>
   12a0c:	str	r0, [sp, #168]	; 0xa8
   12a10:	ldr	r3, [sp, #32]
   12a14:	cmp	r3, #0
   12a18:	movne	fp, #0
   12a1c:	bne	12a54 <__assert_fail@plt+0x18d8>
   12a20:	ldr	r3, [sp, #164]	; 0xa4
   12a24:	ldrb	r3, [r3]
   12a28:	cmp	r3, #0
   12a2c:	beq	12a74 <__assert_fail@plt+0x18f8>
   12a30:	ldr	r2, [sp, #164]	; 0xa4
   12a34:	mov	fp, #0
   12a38:	ldr	r1, [sp, #36]	; 0x24
   12a3c:	cmp	r7, fp
   12a40:	strbhi	r3, [r1, fp]
   12a44:	add	fp, fp, #1
   12a48:	ldrb	r3, [r2, #1]!
   12a4c:	cmp	r3, #0
   12a50:	bne	12a3c <__assert_fail@plt+0x18c0>
   12a54:	ldr	r0, [sp, #168]	; 0xa8
   12a58:	bl	11068 <strlen@plt>
   12a5c:	str	r0, [sp, #60]	; 0x3c
   12a60:	ldr	r3, [sp, #168]	; 0xa8
   12a64:	str	r3, [sp, #72]	; 0x48
   12a68:	mov	r3, #1
   12a6c:	str	r3, [sp, #48]	; 0x30
   12a70:	b	12988 <__assert_fail@plt+0x180c>
   12a74:	mov	fp, #0
   12a78:	b	12a54 <__assert_fail@plt+0x18d8>
   12a7c:	ldr	r3, [sp, #32]
   12a80:	cmp	r3, #0
   12a84:	bne	12b44 <__assert_fail@plt+0x19c8>
   12a88:	mov	r3, #1
   12a8c:	str	r3, [sp, #48]	; 0x30
   12a90:	cmp	r7, #0
   12a94:	beq	12b60 <__assert_fail@plt+0x19e4>
   12a98:	ldr	r3, [sp, #36]	; 0x24
   12a9c:	mov	r2, #39	; 0x27
   12aa0:	strb	r2, [r3]
   12aa4:	mov	r3, #0
   12aa8:	str	r3, [sp, #32]
   12aac:	mov	r3, #1
   12ab0:	str	r3, [sp, #60]	; 0x3c
   12ab4:	ldr	r3, [pc, #3752]	; 13964 <__assert_fail@plt+0x27e8>
   12ab8:	str	r3, [sp, #72]	; 0x48
   12abc:	mov	fp, #1
   12ac0:	mov	sl, #2
   12ac4:	b	12988 <__assert_fail@plt+0x180c>
   12ac8:	ldr	r3, [sp, #32]
   12acc:	cmp	r3, #0
   12ad0:	beq	12a90 <__assert_fail@plt+0x1914>
   12ad4:	mov	r3, #1
   12ad8:	str	r3, [sp, #60]	; 0x3c
   12adc:	ldr	r3, [pc, #3712]	; 13964 <__assert_fail@plt+0x27e8>
   12ae0:	str	r3, [sp, #72]	; 0x48
   12ae4:	mov	fp, #0
   12ae8:	b	12988 <__assert_fail@plt+0x180c>
   12aec:	bl	11158 <abort@plt>
   12af0:	mov	r3, #0
   12af4:	str	r3, [sp, #32]
   12af8:	mov	r3, #1
   12afc:	str	r3, [sp, #48]	; 0x30
   12b00:	mov	fp, #0
   12b04:	b	12988 <__assert_fail@plt+0x180c>
   12b08:	ldr	r3, [sp, #32]
   12b0c:	str	r3, [sp, #48]	; 0x30
   12b10:	mov	r3, #1
   12b14:	str	r3, [sp, #60]	; 0x3c
   12b18:	ldr	r3, [pc, #3660]	; 1396c <__assert_fail@plt+0x27f0>
   12b1c:	str	r3, [sp, #72]	; 0x48
   12b20:	mov	fp, #0
   12b24:	b	12988 <__assert_fail@plt+0x180c>
   12b28:	mov	r3, #1
   12b2c:	str	r3, [sp, #48]	; 0x30
   12b30:	str	r3, [sp, #60]	; 0x3c
   12b34:	ldr	r3, [pc, #3632]	; 1396c <__assert_fail@plt+0x27f0>
   12b38:	str	r3, [sp, #72]	; 0x48
   12b3c:	mov	fp, #1
   12b40:	b	12988 <__assert_fail@plt+0x180c>
   12b44:	mov	r3, #1
   12b48:	str	r3, [sp, #60]	; 0x3c
   12b4c:	ldr	r3, [pc, #3600]	; 13964 <__assert_fail@plt+0x27e8>
   12b50:	str	r3, [sp, #72]	; 0x48
   12b54:	mov	fp, #0
   12b58:	mov	sl, #2
   12b5c:	b	12988 <__assert_fail@plt+0x180c>
   12b60:	mov	r3, #0
   12b64:	str	r3, [sp, #32]
   12b68:	mov	r3, #1
   12b6c:	str	r3, [sp, #60]	; 0x3c
   12b70:	ldr	r3, [pc, #3564]	; 13964 <__assert_fail@plt+0x27e8>
   12b74:	str	r3, [sp, #72]	; 0x48
   12b78:	mov	fp, #1
   12b7c:	mov	sl, #2
   12b80:	b	12988 <__assert_fail@plt+0x180c>
   12b84:	mov	r3, #0
   12b88:	str	r3, [sp, #56]	; 0x38
   12b8c:	ldr	r3, [sp, #52]	; 0x34
   12b90:	add	r2, r3, r6
   12b94:	str	r2, [sp, #64]	; 0x40
   12b98:	ldrb	r4, [r3, r6]
   12b9c:	cmp	r4, #126	; 0x7e
   12ba0:	ldrls	pc, [pc, r4, lsl #2]
   12ba4:	b	133e0 <__assert_fail@plt+0x2264>
   12ba8:	andeq	r2, r1, r0, asr #27
   12bac:	andeq	r3, r1, r0, ror #7
   12bb0:	andeq	r3, r1, r0, ror #7
   12bb4:	andeq	r3, r1, r0, ror #7
   12bb8:	andeq	r3, r1, r0, ror #7
   12bbc:	andeq	r3, r1, r0, ror #7
   12bc0:	andeq	r3, r1, r0, ror #7
   12bc4:	andeq	r3, r1, ip, lsl r1
   12bc8:			; <UNDEFINED> instruction: 0x00012db8
   12bcc:	ldrdeq	r3, [r1], -r4
   12bd0:	andeq	r3, r1, ip, asr #1
   12bd4:	andeq	r3, r1, ip, lsr r0
   12bd8:	andeq	r3, r1, r4, lsr r0
   12bdc:			; <UNDEFINED> instruction: 0x00012db0
   12be0:	andeq	r3, r1, r0, ror #7
   12be4:	andeq	r3, r1, r0, ror #7
   12be8:	andeq	r3, r1, r0, ror #7
   12bec:	andeq	r3, r1, r0, ror #7
   12bf0:	andeq	r3, r1, r0, ror #7
   12bf4:	andeq	r3, r1, r0, ror #7
   12bf8:	andeq	r3, r1, r0, ror #7
   12bfc:	andeq	r3, r1, r0, ror #7
   12c00:	andeq	r3, r1, r0, ror #7
   12c04:	andeq	r3, r1, r0, ror #7
   12c08:	andeq	r3, r1, r0, ror #7
   12c0c:	andeq	r3, r1, r0, ror #7
   12c10:	andeq	r3, r1, r0, ror #7
   12c14:	andeq	r3, r1, r0, ror #7
   12c18:	andeq	r3, r1, r0, ror #7
   12c1c:	andeq	r3, r1, r0, ror #7
   12c20:	andeq	r3, r1, r0, ror #7
   12c24:	andeq	r3, r1, r0, ror #7
   12c28:	andeq	r3, r1, r0, ror r1
   12c2c:	andeq	r3, r1, ip, ror #2
   12c30:	andeq	r3, r1, ip, ror #2
   12c34:	andeq	r3, r1, r4, asr #2
   12c38:	andeq	r3, r1, ip, ror #2
   12c3c:			; <UNDEFINED> instruction: 0x000137b4
   12c40:	andeq	r3, r1, ip, ror #2
   12c44:	andeq	r3, r1, r4, asr #6
   12c48:	andeq	r3, r1, ip, ror #2
   12c4c:	andeq	r3, r1, ip, ror #2
   12c50:	andeq	r3, r1, ip, ror #2
   12c54:			; <UNDEFINED> instruction: 0x000137b4
   12c58:			; <UNDEFINED> instruction: 0x000137b4
   12c5c:			; <UNDEFINED> instruction: 0x000137b4
   12c60:			; <UNDEFINED> instruction: 0x000137b4
   12c64:			; <UNDEFINED> instruction: 0x000137b4
   12c68:			; <UNDEFINED> instruction: 0x000137b4
   12c6c:			; <UNDEFINED> instruction: 0x000137b4
   12c70:			; <UNDEFINED> instruction: 0x000137b4
   12c74:			; <UNDEFINED> instruction: 0x000137b4
   12c78:			; <UNDEFINED> instruction: 0x000137b4
   12c7c:			; <UNDEFINED> instruction: 0x000137b4
   12c80:			; <UNDEFINED> instruction: 0x000137b4
   12c84:			; <UNDEFINED> instruction: 0x000137b4
   12c88:			; <UNDEFINED> instruction: 0x000137b4
   12c8c:			; <UNDEFINED> instruction: 0x000137b4
   12c90:			; <UNDEFINED> instruction: 0x000137b4
   12c94:	andeq	r3, r1, ip, ror #2
   12c98:	andeq	r3, r1, ip, ror #2
   12c9c:	andeq	r3, r1, ip, ror #2
   12ca0:	andeq	r3, r1, ip, ror #2
   12ca4:	andeq	r2, r1, r8, asr #29
   12ca8:	andeq	r3, r1, r0, ror #7
   12cac:			; <UNDEFINED> instruction: 0x000137b4
   12cb0:			; <UNDEFINED> instruction: 0x000137b4
   12cb4:			; <UNDEFINED> instruction: 0x000137b4
   12cb8:			; <UNDEFINED> instruction: 0x000137b4
   12cbc:			; <UNDEFINED> instruction: 0x000137b4
   12cc0:			; <UNDEFINED> instruction: 0x000137b4
   12cc4:			; <UNDEFINED> instruction: 0x000137b4
   12cc8:			; <UNDEFINED> instruction: 0x000137b4
   12ccc:			; <UNDEFINED> instruction: 0x000137b4
   12cd0:			; <UNDEFINED> instruction: 0x000137b4
   12cd4:			; <UNDEFINED> instruction: 0x000137b4
   12cd8:			; <UNDEFINED> instruction: 0x000137b4
   12cdc:			; <UNDEFINED> instruction: 0x000137b4
   12ce0:			; <UNDEFINED> instruction: 0x000137b4
   12ce4:			; <UNDEFINED> instruction: 0x000137b4
   12ce8:			; <UNDEFINED> instruction: 0x000137b4
   12cec:			; <UNDEFINED> instruction: 0x000137b4
   12cf0:			; <UNDEFINED> instruction: 0x000137b4
   12cf4:			; <UNDEFINED> instruction: 0x000137b4
   12cf8:			; <UNDEFINED> instruction: 0x000137b4
   12cfc:			; <UNDEFINED> instruction: 0x000137b4
   12d00:			; <UNDEFINED> instruction: 0x000137b4
   12d04:			; <UNDEFINED> instruction: 0x000137b4
   12d08:			; <UNDEFINED> instruction: 0x000137b4
   12d0c:			; <UNDEFINED> instruction: 0x000137b4
   12d10:			; <UNDEFINED> instruction: 0x000137b4
   12d14:	andeq	r3, r1, ip, ror #2
   12d18:	andeq	r3, r1, r4, asr #32
   12d1c:			; <UNDEFINED> instruction: 0x000137b4
   12d20:	andeq	r3, r1, ip, ror #2
   12d24:			; <UNDEFINED> instruction: 0x000137b4
   12d28:	andeq	r3, r1, ip, ror #2
   12d2c:			; <UNDEFINED> instruction: 0x000137b4
   12d30:			; <UNDEFINED> instruction: 0x000137b4
   12d34:			; <UNDEFINED> instruction: 0x000137b4
   12d38:			; <UNDEFINED> instruction: 0x000137b4
   12d3c:			; <UNDEFINED> instruction: 0x000137b4
   12d40:			; <UNDEFINED> instruction: 0x000137b4
   12d44:			; <UNDEFINED> instruction: 0x000137b4
   12d48:			; <UNDEFINED> instruction: 0x000137b4
   12d4c:			; <UNDEFINED> instruction: 0x000137b4
   12d50:			; <UNDEFINED> instruction: 0x000137b4
   12d54:			; <UNDEFINED> instruction: 0x000137b4
   12d58:			; <UNDEFINED> instruction: 0x000137b4
   12d5c:			; <UNDEFINED> instruction: 0x000137b4
   12d60:			; <UNDEFINED> instruction: 0x000137b4
   12d64:			; <UNDEFINED> instruction: 0x000137b4
   12d68:			; <UNDEFINED> instruction: 0x000137b4
   12d6c:			; <UNDEFINED> instruction: 0x000137b4
   12d70:			; <UNDEFINED> instruction: 0x000137b4
   12d74:			; <UNDEFINED> instruction: 0x000137b4
   12d78:			; <UNDEFINED> instruction: 0x000137b4
   12d7c:			; <UNDEFINED> instruction: 0x000137b4
   12d80:			; <UNDEFINED> instruction: 0x000137b4
   12d84:			; <UNDEFINED> instruction: 0x000137b4
   12d88:			; <UNDEFINED> instruction: 0x000137b4
   12d8c:			; <UNDEFINED> instruction: 0x000137b4
   12d90:			; <UNDEFINED> instruction: 0x000137b4
   12d94:	andeq	r3, r1, r4, lsr #2
   12d98:	andeq	r3, r1, ip, ror #2
   12d9c:	andeq	r3, r1, r4, lsr #2
   12da0:	andeq	r3, r1, r4, asr #2
   12da4:	mov	r3, #0
   12da8:	str	r3, [sp, #56]	; 0x38
   12dac:	b	12b8c <__assert_fail@plt+0x1a10>
   12db0:	mov	r3, #114	; 0x72
   12db4:	b	130d8 <__assert_fail@plt+0x1f5c>
   12db8:	mov	r3, #98	; 0x62
   12dbc:	b	130f0 <__assert_fail@plt+0x1f74>
   12dc0:	ldr	r3, [sp, #48]	; 0x30
   12dc4:	cmp	r3, #0
   12dc8:	beq	12eb0 <__assert_fail@plt+0x1d34>
   12dcc:	ldr	r3, [sp, #32]
   12dd0:	cmp	r3, #0
   12dd4:	bne	13938 <__assert_fail@plt+0x27bc>
   12dd8:	ldr	r3, [sp, #44]	; 0x2c
   12ddc:	eor	r3, r3, #1
   12de0:	cmp	sl, #2
   12de4:	movne	r3, #0
   12de8:	andeq	r3, r3, #1
   12dec:	cmp	r3, #0
   12df0:	moveq	r2, fp
   12df4:	beq	12e38 <__assert_fail@plt+0x1cbc>
   12df8:	cmp	r7, fp
   12dfc:	ldrhi	r2, [sp, #36]	; 0x24
   12e00:	movhi	r1, #39	; 0x27
   12e04:	strbhi	r1, [r2, fp]
   12e08:	add	r2, fp, #1
   12e0c:	cmp	r7, r2
   12e10:	ldrhi	r1, [sp, #36]	; 0x24
   12e14:	movhi	r0, #36	; 0x24
   12e18:	strbhi	r0, [r1, r2]
   12e1c:	add	r2, fp, #2
   12e20:	cmp	r7, r2
   12e24:	ldrhi	r1, [sp, #36]	; 0x24
   12e28:	movhi	r0, #39	; 0x27
   12e2c:	strbhi	r0, [r1, r2]
   12e30:	add	r2, fp, #3
   12e34:	str	r3, [sp, #44]	; 0x2c
   12e38:	cmp	r7, r2
   12e3c:	ldrhi	r3, [sp, #36]	; 0x24
   12e40:	movhi	r1, #92	; 0x5c
   12e44:	strbhi	r1, [r3, r2]
   12e48:	add	fp, r2, #1
   12e4c:	cmp	r5, #0
   12e50:	beq	137bc <__assert_fail@plt+0x2640>
   12e54:	add	r3, r6, #1
   12e58:	ldr	r1, [sp, #28]
   12e5c:	cmp	r1, r3
   12e60:	bls	137cc <__assert_fail@plt+0x2650>
   12e64:	ldr	r1, [sp, #52]	; 0x34
   12e68:	ldrb	r3, [r1, r3]
   12e6c:	sub	r3, r3, #48	; 0x30
   12e70:	uxtb	r3, r3
   12e74:	cmp	r3, #9
   12e78:	bhi	137d8 <__assert_fail@plt+0x265c>
   12e7c:	cmp	r7, fp
   12e80:	movhi	r3, #48	; 0x30
   12e84:	ldrhi	r1, [sp, #36]	; 0x24
   12e88:	strbhi	r3, [r1, fp]
   12e8c:	add	r3, r2, #2
   12e90:	cmp	r7, r3
   12e94:	movhi	r1, #48	; 0x30
   12e98:	ldrhi	r0, [sp, #36]	; 0x24
   12e9c:	strbhi	r1, [r0, r3]
   12ea0:	add	fp, r2, #3
   12ea4:	ldr	r8, [sp, #32]
   12ea8:	mov	r4, #48	; 0x30
   12eac:	b	13188 <__assert_fail@plt+0x200c>
   12eb0:	ldr	r3, [sp, #156]	; 0x9c
   12eb4:	tst	r3, #1
   12eb8:	bne	1327c <__assert_fail@plt+0x2100>
   12ebc:	ldr	r5, [sp, #48]	; 0x30
   12ec0:	mov	r8, r5
   12ec4:	b	13188 <__assert_fail@plt+0x200c>
   12ec8:	cmp	sl, #2
   12ecc:	beq	12ee4 <__assert_fail@plt+0x1d68>
   12ed0:	cmp	sl, #5
   12ed4:	beq	12efc <__assert_fail@plt+0x1d80>
   12ed8:	mov	r8, #0
   12edc:	mov	r5, r8
   12ee0:	b	13188 <__assert_fail@plt+0x200c>
   12ee4:	ldr	r3, [sp, #32]
   12ee8:	cmp	r3, #0
   12eec:	bne	1394c <__assert_fail@plt+0x27d0>
   12ef0:	mov	r8, r3
   12ef4:	mov	r5, r3
   12ef8:	b	13188 <__assert_fail@plt+0x200c>
   12efc:	ldr	r3, [sp, #156]	; 0x9c
   12f00:	tst	r3, #4
   12f04:	beq	137e4 <__assert_fail@plt+0x2668>
   12f08:	add	r3, r6, #2
   12f0c:	ldr	r2, [sp, #28]
   12f10:	cmp	r2, r3
   12f14:	bls	137f0 <__assert_fail@plt+0x2674>
   12f18:	ldr	r2, [sp, #52]	; 0x34
   12f1c:	add	r2, r2, r6
   12f20:	ldrb	r2, [r2, #1]
   12f24:	cmp	r2, #63	; 0x3f
   12f28:	movne	r8, #0
   12f2c:	movne	r5, r8
   12f30:	bne	13188 <__assert_fail@plt+0x200c>
   12f34:	ldr	r2, [sp, #52]	; 0x34
   12f38:	ldrb	r2, [r2, r3]
   12f3c:	sub	r1, r2, #33	; 0x21
   12f40:	cmp	r1, #29
   12f44:	ldrls	pc, [pc, r1, lsl #2]
   12f48:	b	137fc <__assert_fail@plt+0x2680>
   12f4c:	andeq	r2, r1, r4, asr #31
   12f50:	strdeq	r3, [r1], -ip
   12f54:	strdeq	r3, [r1], -ip
   12f58:	strdeq	r3, [r1], -ip
   12f5c:	strdeq	r3, [r1], -ip
   12f60:	strdeq	r3, [r1], -ip
   12f64:	andeq	r2, r1, r4, asr #31
   12f68:	andeq	r2, r1, r4, asr #31
   12f6c:	andeq	r2, r1, r4, asr #31
   12f70:	strdeq	r3, [r1], -ip
   12f74:	strdeq	r3, [r1], -ip
   12f78:	strdeq	r3, [r1], -ip
   12f7c:	andeq	r2, r1, r4, asr #31
   12f80:	strdeq	r3, [r1], -ip
   12f84:	andeq	r2, r1, r4, asr #31
   12f88:	strdeq	r3, [r1], -ip
   12f8c:	strdeq	r3, [r1], -ip
   12f90:	strdeq	r3, [r1], -ip
   12f94:	strdeq	r3, [r1], -ip
   12f98:	strdeq	r3, [r1], -ip
   12f9c:	strdeq	r3, [r1], -ip
   12fa0:	strdeq	r3, [r1], -ip
   12fa4:	strdeq	r3, [r1], -ip
   12fa8:	strdeq	r3, [r1], -ip
   12fac:	strdeq	r3, [r1], -ip
   12fb0:	strdeq	r3, [r1], -ip
   12fb4:	strdeq	r3, [r1], -ip
   12fb8:	andeq	r2, r1, r4, asr #31
   12fbc:	andeq	r2, r1, r4, asr #31
   12fc0:	andeq	r2, r1, r4, asr #31
   12fc4:	ldr	r1, [sp, #32]
   12fc8:	cmp	r1, #0
   12fcc:	bne	13a0c <__assert_fail@plt+0x2890>
   12fd0:	cmp	r7, fp
   12fd4:	movhi	r1, #63	; 0x3f
   12fd8:	ldrhi	r0, [sp, #36]	; 0x24
   12fdc:	strbhi	r1, [r0, fp]
   12fe0:	add	r1, fp, #1
   12fe4:	cmp	r7, r1
   12fe8:	ldrhi	r0, [sp, #36]	; 0x24
   12fec:	movhi	ip, #34	; 0x22
   12ff0:	strbhi	ip, [r0, r1]
   12ff4:	add	r1, fp, #2
   12ff8:	cmp	r7, r1
   12ffc:	ldrhi	r0, [sp, #36]	; 0x24
   13000:	movhi	ip, #34	; 0x22
   13004:	strbhi	ip, [r0, r1]
   13008:	add	r1, fp, #3
   1300c:	cmp	r7, r1
   13010:	movhi	r0, #63	; 0x3f
   13014:	ldrhi	ip, [sp, #36]	; 0x24
   13018:	strbhi	r0, [ip, r1]
   1301c:	add	fp, fp, #4
   13020:	ldr	r5, [sp, #32]
   13024:	mov	r8, r5
   13028:	mov	r4, r2
   1302c:	mov	r6, r3
   13030:	b	13188 <__assert_fail@plt+0x200c>
   13034:	mov	r3, #102	; 0x66
   13038:	b	130f0 <__assert_fail@plt+0x1f74>
   1303c:	mov	r3, #118	; 0x76
   13040:	b	130f0 <__assert_fail@plt+0x1f74>
   13044:	cmp	sl, #2
   13048:	beq	130b4 <__assert_fail@plt+0x1f38>
   1304c:	ldr	r3, [sp, #48]	; 0x30
   13050:	ldr	r2, [sp, #32]
   13054:	and	r3, r3, r2
   13058:	tst	r9, r3
   1305c:	moveq	r3, r4
   13060:	beq	130f0 <__assert_fail@plt+0x1f74>
   13064:	mov	r8, #0
   13068:	mov	r5, r8
   1306c:	eor	r5, r5, #1
   13070:	ldr	r3, [sp, #44]	; 0x2c
   13074:	and	r5, r5, r3
   13078:	tst	r5, #255	; 0xff
   1307c:	beq	1325c <__assert_fail@plt+0x20e0>
   13080:	cmp	r7, fp
   13084:	ldrhi	r3, [sp, #36]	; 0x24
   13088:	movhi	r2, #39	; 0x27
   1308c:	strbhi	r2, [r3, fp]
   13090:	add	r3, fp, #1
   13094:	cmp	r7, r3
   13098:	ldrhi	r2, [sp, #36]	; 0x24
   1309c:	movhi	r1, #39	; 0x27
   130a0:	strbhi	r1, [r2, r3]
   130a4:	add	fp, fp, #2
   130a8:	mov	r3, #0
   130ac:	str	r3, [sp, #44]	; 0x2c
   130b0:	b	1325c <__assert_fail@plt+0x20e0>
   130b4:	ldr	r3, [sp, #32]
   130b8:	cmp	r3, #0
   130bc:	bne	13958 <__assert_fail@plt+0x27dc>
   130c0:	mov	r8, r3
   130c4:	mov	r5, r3
   130c8:	b	1306c <__assert_fail@plt+0x1ef0>
   130cc:	mov	r3, #110	; 0x6e
   130d0:	b	130d8 <__assert_fail@plt+0x1f5c>
   130d4:	mov	r3, #116	; 0x74
   130d8:	ldr	r2, [sp, #32]
   130dc:	cmp	sl, #2
   130e0:	movne	r2, #0
   130e4:	andeq	r2, r2, #1
   130e8:	cmp	r2, #0
   130ec:	bne	13110 <__assert_fail@plt+0x1f94>
   130f0:	ldr	r2, [sp, #48]	; 0x30
   130f4:	cmp	r2, #0
   130f8:	moveq	r8, r2
   130fc:	moveq	r5, r2
   13100:	beq	13188 <__assert_fail@plt+0x200c>
   13104:	mov	r4, r3
   13108:	mov	r8, #0
   1310c:	b	131e0 <__assert_fail@plt+0x2064>
   13110:	mov	r8, sl
   13114:	mov	sl, r7
   13118:	b	13984 <__assert_fail@plt+0x2808>
   1311c:	mov	r3, #97	; 0x61
   13120:	b	130f0 <__assert_fail@plt+0x1f74>
   13124:	ldr	r3, [sp, #28]
   13128:	cmn	r3, #1
   1312c:	beq	13158 <__assert_fail@plt+0x1fdc>
   13130:	ldr	r3, [sp, #28]
   13134:	subs	r3, r3, #1
   13138:	movne	r3, #1
   1313c:	cmp	r3, #0
   13140:	bne	13808 <__assert_fail@plt+0x268c>
   13144:	cmp	r6, #0
   13148:	beq	13170 <__assert_fail@plt+0x1ff4>
   1314c:	mov	r8, #0
   13150:	mov	r5, r8
   13154:	b	13188 <__assert_fail@plt+0x200c>
   13158:	ldr	r3, [sp, #52]	; 0x34
   1315c:	ldrb	r3, [r3, #1]
   13160:	adds	r3, r3, #0
   13164:	movne	r3, #1
   13168:	b	1313c <__assert_fail@plt+0x1fc0>
   1316c:	mov	r8, #0
   13170:	ldr	r5, [sp, #32]
   13174:	cmp	sl, #2
   13178:	movne	r5, #0
   1317c:	andeq	r5, r5, #1
   13180:	cmp	r5, #0
   13184:	bne	13338 <__assert_fail@plt+0x21bc>
   13188:	ldr	r3, [sp, #68]	; 0x44
   1318c:	cmp	sl, #2
   13190:	orreq	r3, r3, #1
   13194:	eor	r3, r3, #1
   13198:	ldr	r2, [sp, #32]
   1319c:	orr	r3, r2, r3
   131a0:	tst	r3, #255	; 0xff
   131a4:	beq	131d4 <__assert_fail@plt+0x2058>
   131a8:	ldr	r3, [sp, #160]	; 0xa0
   131ac:	cmp	r3, #0
   131b0:	beq	131d4 <__assert_fail@plt+0x2058>
   131b4:	lsr	r2, r4, #5
   131b8:	uxtb	r2, r2
   131bc:	and	r3, r4, #31
   131c0:	ldr	r1, [sp, #160]	; 0xa0
   131c4:	ldr	r2, [r1, r2, lsl #2]
   131c8:	lsr	r3, r2, r3
   131cc:	tst	r3, #1
   131d0:	bne	131e0 <__assert_fail@plt+0x2064>
   131d4:	ldr	r3, [sp, #56]	; 0x38
   131d8:	cmp	r3, #0
   131dc:	beq	1306c <__assert_fail@plt+0x1ef0>
   131e0:	ldr	r3, [sp, #32]
   131e4:	cmp	r3, #0
   131e8:	bne	139f4 <__assert_fail@plt+0x2878>
   131ec:	ldr	r3, [sp, #44]	; 0x2c
   131f0:	eor	r3, r3, #1
   131f4:	cmp	sl, #2
   131f8:	movne	r3, #0
   131fc:	andeq	r3, r3, #1
   13200:	cmp	r3, #0
   13204:	beq	13248 <__assert_fail@plt+0x20cc>
   13208:	cmp	r7, fp
   1320c:	ldrhi	r2, [sp, #36]	; 0x24
   13210:	movhi	r1, #39	; 0x27
   13214:	strbhi	r1, [r2, fp]
   13218:	add	r2, fp, #1
   1321c:	cmp	r7, r2
   13220:	ldrhi	r1, [sp, #36]	; 0x24
   13224:	movhi	r0, #36	; 0x24
   13228:	strbhi	r0, [r1, r2]
   1322c:	add	r2, fp, #2
   13230:	cmp	r7, r2
   13234:	ldrhi	r1, [sp, #36]	; 0x24
   13238:	movhi	r0, #39	; 0x27
   1323c:	strbhi	r0, [r1, r2]
   13240:	add	fp, fp, #3
   13244:	str	r3, [sp, #44]	; 0x2c
   13248:	cmp	r7, fp
   1324c:	ldrhi	r3, [sp, #36]	; 0x24
   13250:	movhi	r2, #92	; 0x5c
   13254:	strbhi	r2, [r3, fp]
   13258:	add	fp, fp, #1
   1325c:	cmp	fp, r7
   13260:	ldrcc	r3, [sp, #36]	; 0x24
   13264:	strbcc	r4, [r3, fp]
   13268:	add	fp, fp, #1
   1326c:	ldr	r3, [sp, #40]	; 0x28
   13270:	cmp	r8, #0
   13274:	moveq	r3, #0
   13278:	str	r3, [sp, #40]	; 0x28
   1327c:	add	r6, r6, #1
   13280:	ldr	r3, [sp, #28]
   13284:	cmn	r3, #1
   13288:	beq	13814 <__assert_fail@plt+0x2698>
   1328c:	ldr	r3, [sp, #28]
   13290:	subs	r8, r3, r6
   13294:	movne	r8, #1
   13298:	cmp	r8, #0
   1329c:	beq	13828 <__assert_fail@plt+0x26ac>
   132a0:	ldr	r5, [sp, #48]	; 0x30
   132a4:	cmp	sl, #2
   132a8:	moveq	r5, #0
   132ac:	andne	r5, r5, #1
   132b0:	ldr	r3, [sp, #60]	; 0x3c
   132b4:	adds	r9, r3, #0
   132b8:	movne	r9, #1
   132bc:	ands	r2, r5, r9
   132c0:	str	r2, [sp, #56]	; 0x38
   132c4:	beq	12b8c <__assert_fail@plt+0x1a10>
   132c8:	add	r4, r6, r3
   132cc:	ldr	r2, [sp, #28]
   132d0:	cmp	r3, #1
   132d4:	movls	r3, #0
   132d8:	movhi	r3, #1
   132dc:	cmn	r2, #1
   132e0:	movne	r3, #0
   132e4:	cmp	r3, #0
   132e8:	beq	132f8 <__assert_fail@plt+0x217c>
   132ec:	ldr	r0, [sp, #52]	; 0x34
   132f0:	bl	11068 <strlen@plt>
   132f4:	str	r0, [sp, #28]
   132f8:	ldr	r3, [sp, #28]
   132fc:	cmp	r3, r4
   13300:	bcc	12b84 <__assert_fail@plt+0x1a08>
   13304:	ldr	r2, [sp, #60]	; 0x3c
   13308:	ldr	r1, [sp, #72]	; 0x48
   1330c:	ldr	r3, [sp, #52]	; 0x34
   13310:	add	r0, r3, r6
   13314:	bl	10f48 <memcmp@plt>
   13318:	cmp	r0, #0
   1331c:	bne	12da4 <__assert_fail@plt+0x1c28>
   13320:	ldr	r3, [sp, #32]
   13324:	cmp	r3, #0
   13328:	beq	12b8c <__assert_fail@plt+0x1a10>
   1332c:	mov	r8, sl
   13330:	mov	sl, r7
   13334:	b	13984 <__assert_fail@plt+0x2808>
   13338:	mov	r8, sl
   1333c:	mov	sl, r7
   13340:	b	13984 <__assert_fail@plt+0x2808>
   13344:	cmp	sl, #2
   13348:	strne	r8, [sp, #80]	; 0x50
   1334c:	movne	r5, #0
   13350:	bne	13188 <__assert_fail@plt+0x200c>
   13354:	ldr	r3, [sp, #32]
   13358:	cmp	r3, #0
   1335c:	bne	13970 <__assert_fail@plt+0x27f4>
   13360:	ldr	r2, [sp, #76]	; 0x4c
   13364:	adds	r3, r7, #0
   13368:	movne	r3, #1
   1336c:	cmp	r2, #0
   13370:	movne	r3, #0
   13374:	cmp	r3, #0
   13378:	movne	r3, #0
   1337c:	bne	133ac <__assert_fail@plt+0x2230>
   13380:	cmp	r7, fp
   13384:	ldrhi	r3, [sp, #36]	; 0x24
   13388:	movhi	r2, #39	; 0x27
   1338c:	strbhi	r2, [r3, fp]
   13390:	add	r3, fp, #1
   13394:	cmp	r7, r3
   13398:	ldrhi	r2, [sp, #36]	; 0x24
   1339c:	movhi	r1, #92	; 0x5c
   133a0:	strbhi	r1, [r2, r3]
   133a4:	mov	r3, r7
   133a8:	ldr	r7, [sp, #76]	; 0x4c
   133ac:	add	r2, fp, #2
   133b0:	cmp	r2, r3
   133b4:	ldrcc	r1, [sp, #36]	; 0x24
   133b8:	movcc	r0, #39	; 0x27
   133bc:	strbcc	r0, [r1, r2]
   133c0:	add	fp, fp, #3
   133c4:	ldr	r2, [sp, #32]
   133c8:	mov	r5, r2
   133cc:	str	r8, [sp, #80]	; 0x50
   133d0:	str	r2, [sp, #44]	; 0x2c
   133d4:	str	r7, [sp, #76]	; 0x4c
   133d8:	mov	r7, r3
   133dc:	b	13188 <__assert_fail@plt+0x200c>
   133e0:	ldr	r5, [sp, #84]	; 0x54
   133e4:	cmp	r5, #1
   133e8:	beq	13418 <__assert_fail@plt+0x229c>
   133ec:	mov	r3, #0
   133f0:	str	r3, [sp, #104]	; 0x68
   133f4:	str	r3, [sp, #108]	; 0x6c
   133f8:	ldr	r3, [sp, #28]
   133fc:	cmn	r3, #1
   13400:	beq	1344c <__assert_fail@plt+0x22d0>
   13404:	mov	r3, #0
   13408:	str	r4, [sp, #88]	; 0x58
   1340c:	str	fp, [sp, #92]	; 0x5c
   13410:	mov	fp, r3
   13414:	b	13574 <__assert_fail@plt+0x23f8>
   13418:	bl	11044 <__ctype_b_loc@plt>
   1341c:	ldr	r2, [r0]
   13420:	lsl	r3, r4, #1
   13424:	ldrh	r8, [r2, r3]
   13428:	lsr	r8, r8, #14
   1342c:	and	r8, r8, #1
   13430:	mov	r2, r5
   13434:	eor	r5, r8, #1
   13438:	ldr	r3, [sp, #48]	; 0x30
   1343c:	and	r5, r5, r3
   13440:	ands	r5, r5, #255	; 0xff
   13444:	beq	13188 <__assert_fail@plt+0x200c>
   13448:	b	1360c <__assert_fail@plt+0x2490>
   1344c:	ldr	r0, [sp, #52]	; 0x34
   13450:	bl	11068 <strlen@plt>
   13454:	str	r0, [sp, #28]
   13458:	b	13404 <__assert_fail@plt+0x2288>
   1345c:	mov	r2, fp
   13460:	mov	r1, r4
   13464:	ldr	r4, [sp, #88]	; 0x58
   13468:	ldr	fp, [sp, #92]	; 0x5c
   1346c:	ldr	r0, [sp, #28]
   13470:	cmp	r0, r5
   13474:	bls	13640 <__assert_fail@plt+0x24c4>
   13478:	ldrb	r3, [r1]
   1347c:	cmp	r3, #0
   13480:	beq	13648 <__assert_fail@plt+0x24cc>
   13484:	mov	r3, r1
   13488:	add	r2, r2, #1
   1348c:	add	r1, r6, r2
   13490:	cmp	r0, r1
   13494:	bls	13650 <__assert_fail@plt+0x24d4>
   13498:	ldrb	r1, [r3, #1]!
   1349c:	cmp	r1, #0
   134a0:	bne	13488 <__assert_fail@plt+0x230c>
   134a4:	mov	r8, #0
   134a8:	b	13604 <__assert_fail@plt+0x2488>
   134ac:	cmp	r4, r5
   134b0:	beq	13550 <__assert_fail@plt+0x23d4>
   134b4:	ldrb	r3, [r4, #1]!
   134b8:	sub	r3, r3, #91	; 0x5b
   134bc:	cmp	r3, #33	; 0x21
   134c0:	ldrls	pc, [pc, r3, lsl #2]
   134c4:	b	134ac <__assert_fail@plt+0x2330>
   134c8:	andeq	r3, r1, ip, ror r9
   134cc:	andeq	r3, r1, ip, ror r9
   134d0:	andeq	r3, r1, ip, lsr #9
   134d4:	andeq	r3, r1, ip, ror r9
   134d8:	andeq	r3, r1, ip, lsr #9
   134dc:	andeq	r3, r1, ip, ror r9
   134e0:	andeq	r3, r1, ip, lsr #9
   134e4:	andeq	r3, r1, ip, lsr #9
   134e8:	andeq	r3, r1, ip, lsr #9
   134ec:	andeq	r3, r1, ip, lsr #9
   134f0:	andeq	r3, r1, ip, lsr #9
   134f4:	andeq	r3, r1, ip, lsr #9
   134f8:	andeq	r3, r1, ip, lsr #9
   134fc:	andeq	r3, r1, ip, lsr #9
   13500:	andeq	r3, r1, ip, lsr #9
   13504:	andeq	r3, r1, ip, lsr #9
   13508:	andeq	r3, r1, ip, lsr #9
   1350c:	andeq	r3, r1, ip, lsr #9
   13510:	andeq	r3, r1, ip, lsr #9
   13514:	andeq	r3, r1, ip, lsr #9
   13518:	andeq	r3, r1, ip, lsr #9
   1351c:	andeq	r3, r1, ip, lsr #9
   13520:	andeq	r3, r1, ip, lsr #9
   13524:	andeq	r3, r1, ip, lsr #9
   13528:	andeq	r3, r1, ip, lsr #9
   1352c:	andeq	r3, r1, ip, lsr #9
   13530:	andeq	r3, r1, ip, lsr #9
   13534:	andeq	r3, r1, ip, lsr #9
   13538:	andeq	r3, r1, ip, lsr #9
   1353c:	andeq	r3, r1, ip, lsr #9
   13540:	andeq	r3, r1, ip, lsr #9
   13544:	andeq	r3, r1, ip, lsr #9
   13548:	andeq	r3, r1, ip, lsr #9
   1354c:	andeq	r3, r1, ip, ror r9
   13550:	ldr	r0, [sp, #100]	; 0x64
   13554:	bl	10f90 <iswprint@plt>
   13558:	cmp	r0, #0
   1355c:	moveq	r8, #0
   13560:	add	fp, fp, r9
   13564:	add	r0, sp, #104	; 0x68
   13568:	bl	10f3c <mbsinit@plt>
   1356c:	cmp	r0, #0
   13570:	bne	135e4 <__assert_fail@plt+0x2468>
   13574:	add	r5, r6, fp
   13578:	ldr	r3, [sp, #52]	; 0x34
   1357c:	add	r4, r3, r5
   13580:	add	r3, sp, #104	; 0x68
   13584:	ldr	r2, [sp, #28]
   13588:	sub	r2, r2, r5
   1358c:	mov	r1, r4
   13590:	add	r0, sp, #100	; 0x64
   13594:	bl	159b0 <__assert_fail@plt+0x4834>
   13598:	subs	r9, r0, #0
   1359c:	beq	13658 <__assert_fail@plt+0x24dc>
   135a0:	cmn	r9, #1
   135a4:	beq	135f4 <__assert_fail@plt+0x2478>
   135a8:	cmn	r9, #2
   135ac:	beq	1345c <__assert_fail@plt+0x22e0>
   135b0:	ldr	r3, [sp, #32]
   135b4:	cmp	sl, #2
   135b8:	movne	r3, #0
   135bc:	andeq	r3, r3, #1
   135c0:	cmp	r3, #0
   135c4:	beq	13550 <__assert_fail@plt+0x23d4>
   135c8:	cmp	r9, #1
   135cc:	bls	13550 <__assert_fail@plt+0x23d4>
   135d0:	sub	r3, r9, #1
   135d4:	add	r5, r3, r5
   135d8:	ldr	r3, [sp, #52]	; 0x34
   135dc:	add	r5, r3, r5
   135e0:	b	134b4 <__assert_fail@plt+0x2338>
   135e4:	ldr	r4, [sp, #88]	; 0x58
   135e8:	mov	r2, fp
   135ec:	ldr	fp, [sp, #92]	; 0x5c
   135f0:	b	13604 <__assert_fail@plt+0x2488>
   135f4:	ldr	r4, [sp, #88]	; 0x58
   135f8:	mov	r2, fp
   135fc:	ldr	fp, [sp, #92]	; 0x5c
   13600:	mov	r8, #0
   13604:	cmp	r2, #1
   13608:	bls	13434 <__assert_fail@plt+0x22b8>
   1360c:	add	r1, r6, r2
   13610:	ldr	ip, [sp, #64]	; 0x40
   13614:	mov	r5, #0
   13618:	eor	r3, r8, #1
   1361c:	ldr	r2, [sp, #48]	; 0x30
   13620:	and	r3, r3, r2
   13624:	uxtb	r3, r3
   13628:	ldr	r9, [sp, #32]
   1362c:	ldr	lr, [sp, #44]	; 0x2c
   13630:	ldr	r2, [sp, #56]	; 0x38
   13634:	str	r8, [sp, #56]	; 0x38
   13638:	ldr	r0, [sp, #36]	; 0x24
   1363c:	b	136d8 <__assert_fail@plt+0x255c>
   13640:	mov	r8, #0
   13644:	b	13604 <__assert_fail@plt+0x2488>
   13648:	mov	r8, #0
   1364c:	b	13604 <__assert_fail@plt+0x2488>
   13650:	mov	r8, #0
   13654:	b	13604 <__assert_fail@plt+0x2488>
   13658:	ldr	r4, [sp, #88]	; 0x58
   1365c:	mov	r2, fp
   13660:	ldr	fp, [sp, #92]	; 0x5c
   13664:	b	13604 <__assert_fail@plt+0x2488>
   13668:	cmp	r2, #0
   1366c:	beq	13680 <__assert_fail@plt+0x2504>
   13670:	cmp	r7, fp
   13674:	movhi	r2, #92	; 0x5c
   13678:	strbhi	r2, [r0, fp]
   1367c:	add	fp, fp, #1
   13680:	add	r8, r6, #1
   13684:	cmp	r1, r8
   13688:	bls	13790 <__assert_fail@plt+0x2614>
   1368c:	eor	r2, r5, #1
   13690:	and	r2, r2, lr
   13694:	ands	r2, r2, #255	; 0xff
   13698:	beq	137ac <__assert_fail@plt+0x2630>
   1369c:	cmp	r7, fp
   136a0:	movhi	r2, #39	; 0x27
   136a4:	strbhi	r2, [r0, fp]
   136a8:	add	r2, fp, #1
   136ac:	cmp	r7, r2
   136b0:	movhi	lr, #39	; 0x27
   136b4:	strbhi	lr, [r0, r2]
   136b8:	add	fp, fp, #2
   136bc:	mov	r6, r8
   136c0:	mov	r2, r3
   136c4:	mov	lr, r3
   136c8:	cmp	r7, fp
   136cc:	strbhi	r4, [r0, fp]
   136d0:	add	fp, fp, #1
   136d4:	ldrb	r4, [ip, #1]!
   136d8:	cmp	r3, #0
   136dc:	beq	13668 <__assert_fail@plt+0x24ec>
   136e0:	cmp	r9, #0
   136e4:	bne	139e8 <__assert_fail@plt+0x286c>
   136e8:	eor	r5, lr, #1
   136ec:	cmp	sl, #2
   136f0:	movne	r5, #0
   136f4:	andeq	r5, r5, #1
   136f8:	cmp	r5, #0
   136fc:	beq	13734 <__assert_fail@plt+0x25b8>
   13700:	cmp	r7, fp
   13704:	movhi	lr, #39	; 0x27
   13708:	strbhi	lr, [r0, fp]
   1370c:	add	lr, fp, #1
   13710:	cmp	r7, lr
   13714:	movhi	r8, #36	; 0x24
   13718:	strbhi	r8, [r0, lr]
   1371c:	add	lr, fp, #2
   13720:	cmp	r7, lr
   13724:	movhi	r8, #39	; 0x27
   13728:	strbhi	r8, [r0, lr]
   1372c:	add	fp, fp, #3
   13730:	mov	lr, r5
   13734:	cmp	r7, fp
   13738:	movhi	r5, #92	; 0x5c
   1373c:	strbhi	r5, [r0, fp]
   13740:	add	r5, fp, #1
   13744:	cmp	r7, r5
   13748:	lsrhi	r8, r4, #6
   1374c:	addhi	r8, r8, #48	; 0x30
   13750:	strbhi	r8, [r0, r5]
   13754:	add	r8, fp, #2
   13758:	cmp	r7, r8
   1375c:	lsrhi	r5, r4, #3
   13760:	andhi	r5, r5, #7
   13764:	addhi	r5, r5, #48	; 0x30
   13768:	strbhi	r5, [r0, r8]
   1376c:	add	fp, fp, #3
   13770:	and	r4, r4, #7
   13774:	add	r4, r4, #48	; 0x30
   13778:	add	r5, r6, #1
   1377c:	cmp	r1, r5
   13780:	bls	1379c <__assert_fail@plt+0x2620>
   13784:	mov	r6, r5
   13788:	mov	r5, r3
   1378c:	b	136c8 <__assert_fail@plt+0x254c>
   13790:	str	lr, [sp, #44]	; 0x2c
   13794:	ldr	r8, [sp, #56]	; 0x38
   13798:	b	1306c <__assert_fail@plt+0x1ef0>
   1379c:	str	lr, [sp, #44]	; 0x2c
   137a0:	ldr	r8, [sp, #56]	; 0x38
   137a4:	mov	r5, r3
   137a8:	b	1306c <__assert_fail@plt+0x1ef0>
   137ac:	mov	r6, r8
   137b0:	b	136c8 <__assert_fail@plt+0x254c>
   137b4:	mov	r5, #0
   137b8:	b	13188 <__assert_fail@plt+0x200c>
   137bc:	mov	r8, r5
   137c0:	ldr	r5, [sp, #48]	; 0x30
   137c4:	mov	r4, #48	; 0x30
   137c8:	b	13188 <__assert_fail@plt+0x200c>
   137cc:	ldr	r8, [sp, #32]
   137d0:	mov	r4, #48	; 0x30
   137d4:	b	13188 <__assert_fail@plt+0x200c>
   137d8:	ldr	r8, [sp, #32]
   137dc:	mov	r4, #48	; 0x30
   137e0:	b	13188 <__assert_fail@plt+0x200c>
   137e4:	mov	r8, #0
   137e8:	mov	r5, r8
   137ec:	b	13188 <__assert_fail@plt+0x200c>
   137f0:	mov	r8, #0
   137f4:	mov	r5, r8
   137f8:	b	13188 <__assert_fail@plt+0x200c>
   137fc:	mov	r8, #0
   13800:	mov	r5, r8
   13804:	b	13188 <__assert_fail@plt+0x200c>
   13808:	mov	r8, #0
   1380c:	mov	r5, r8
   13810:	b	13188 <__assert_fail@plt+0x200c>
   13814:	ldr	r3, [sp, #52]	; 0x34
   13818:	ldrb	r8, [r3, r6]
   1381c:	adds	r8, r8, #0
   13820:	movne	r8, #1
   13824:	b	13298 <__assert_fail@plt+0x211c>
   13828:	cmp	sl, #2
   1382c:	movne	r3, #0
   13830:	moveq	r3, #1
   13834:	ldr	r1, [sp, #32]
   13838:	mov	r2, r1
   1383c:	and	r2, r2, r3
   13840:	cmp	fp, #0
   13844:	movne	r2, #0
   13848:	andeq	r2, r2, #1
   1384c:	cmp	r2, #0
   13850:	bne	13a00 <__assert_fail@plt+0x2884>
   13854:	eor	r2, r1, #1
   13858:	and	r3, r3, r2
   1385c:	ldr	r1, [sp, #80]	; 0x50
   13860:	tst	r1, r3
   13864:	beq	138dc <__assert_fail@plt+0x2760>
   13868:	ldr	r3, [sp, #40]	; 0x28
   1386c:	cmp	r3, #0
   13870:	bne	13898 <__assert_fail@plt+0x271c>
   13874:	ldr	r1, [sp, #76]	; 0x4c
   13878:	clz	r3, r7
   1387c:	lsr	r3, r3, #5
   13880:	cmp	r1, #0
   13884:	moveq	r3, #0
   13888:	cmp	r3, #0
   1388c:	beq	138dc <__assert_fail@plt+0x2760>
   13890:	ldr	r7, [sp, #76]	; 0x4c
   13894:	b	1292c <__assert_fail@plt+0x17b0>
   13898:	ldr	r3, [sp, #168]	; 0xa8
   1389c:	str	r3, [sp, #16]
   138a0:	ldr	r3, [sp, #164]	; 0xa4
   138a4:	str	r3, [sp, #12]
   138a8:	ldr	r3, [sp, #160]	; 0xa0
   138ac:	str	r3, [sp, #8]
   138b0:	ldr	r3, [sp, #156]	; 0x9c
   138b4:	str	r3, [sp, #4]
   138b8:	mov	r3, #5
   138bc:	str	r3, [sp]
   138c0:	ldr	r3, [sp, #28]
   138c4:	ldr	r2, [sp, #52]	; 0x34
   138c8:	ldr	r1, [sp, #76]	; 0x4c
   138cc:	ldr	r0, [sp, #36]	; 0x24
   138d0:	bl	128cc <__assert_fail@plt+0x1750>
   138d4:	mov	fp, r0
   138d8:	b	139dc <__assert_fail@plt+0x2860>
   138dc:	mov	sl, r7
   138e0:	ldr	r3, [sp, #72]	; 0x48
   138e4:	cmp	r3, #0
   138e8:	moveq	r2, #0
   138ec:	andne	r2, r2, #1
   138f0:	cmp	r2, #0
   138f4:	beq	13924 <__assert_fail@plt+0x27a8>
   138f8:	mov	r2, r3
   138fc:	ldrb	r3, [r3]
   13900:	cmp	r3, #0
   13904:	beq	13924 <__assert_fail@plt+0x27a8>
   13908:	ldr	r1, [sp, #36]	; 0x24
   1390c:	cmp	sl, fp
   13910:	strbhi	r3, [r1, fp]
   13914:	add	fp, fp, #1
   13918:	ldrb	r3, [r2, #1]!
   1391c:	cmp	r3, #0
   13920:	bne	1390c <__assert_fail@plt+0x2790>
   13924:	cmp	sl, fp
   13928:	movhi	r3, #0
   1392c:	ldrhi	r2, [sp, #36]	; 0x24
   13930:	strbhi	r3, [r2, fp]
   13934:	b	139dc <__assert_fail@plt+0x2860>
   13938:	mov	r8, sl
   1393c:	mov	sl, r7
   13940:	ldr	r3, [sp, #32]
   13944:	str	r3, [sp, #48]	; 0x30
   13948:	b	13984 <__assert_fail@plt+0x2808>
   1394c:	mov	r8, sl
   13950:	mov	sl, r7
   13954:	b	13984 <__assert_fail@plt+0x2808>
   13958:	mov	r8, sl
   1395c:	mov	sl, r7
   13960:	b	13984 <__assert_fail@plt+0x2808>
   13964:	andeq	r6, r1, ip, lsr #26
   13968:	andeq	r6, r1, ip, lsr sp
   1396c:	andeq	r6, r1, r0, lsr sp
   13970:	mov	r8, sl
   13974:	mov	sl, r7
   13978:	b	13984 <__assert_fail@plt+0x2808>
   1397c:	mov	r8, sl
   13980:	mov	sl, r7
   13984:	ldr	r3, [sp, #48]	; 0x30
   13988:	cmp	r8, #2
   1398c:	movne	r3, #0
   13990:	andeq	r3, r3, #1
   13994:	cmp	r3, #0
   13998:	movne	r8, #4
   1399c:	ldr	r3, [sp, #168]	; 0xa8
   139a0:	str	r3, [sp, #16]
   139a4:	ldr	r3, [sp, #164]	; 0xa4
   139a8:	str	r3, [sp, #12]
   139ac:	mov	r3, #0
   139b0:	str	r3, [sp, #8]
   139b4:	ldr	r3, [sp, #156]	; 0x9c
   139b8:	bic	r3, r3, #2
   139bc:	str	r3, [sp, #4]
   139c0:	str	r8, [sp]
   139c4:	ldr	r3, [sp, #28]
   139c8:	ldr	r2, [sp, #52]	; 0x34
   139cc:	mov	r1, sl
   139d0:	ldr	r0, [sp, #36]	; 0x24
   139d4:	bl	128cc <__assert_fail@plt+0x1750>
   139d8:	mov	fp, r0
   139dc:	mov	r0, fp
   139e0:	add	sp, sp, #116	; 0x74
   139e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   139e8:	mov	r8, sl
   139ec:	mov	sl, r7
   139f0:	b	13984 <__assert_fail@plt+0x2808>
   139f4:	mov	r8, sl
   139f8:	mov	sl, r7
   139fc:	b	13984 <__assert_fail@plt+0x2808>
   13a00:	mov	r8, sl
   13a04:	mov	sl, r7
   13a08:	b	13984 <__assert_fail@plt+0x2808>
   13a0c:	mov	r8, sl
   13a10:	mov	sl, r7
   13a14:	b	1399c <__assert_fail@plt+0x2820>
   13a18:	mov	r3, #1
   13a1c:	str	r3, [sp, #32]
   13a20:	str	r3, [sp, #48]	; 0x30
   13a24:	str	r3, [sp, #60]	; 0x3c
   13a28:	ldr	r3, [pc, #-196]	; 1396c <__assert_fail@plt+0x27f0>
   13a2c:	str	r3, [sp, #72]	; 0x48
   13a30:	mov	fp, #0
   13a34:	mov	sl, #5
   13a38:	b	12988 <__assert_fail@plt+0x180c>
   13a3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a40:	sub	sp, sp, #52	; 0x34
   13a44:	mov	r5, r0
   13a48:	str	r1, [sp, #24]
   13a4c:	str	r2, [sp, #28]
   13a50:	mov	r4, r3
   13a54:	bl	11080 <__errno_location@plt>
   13a58:	str	r0, [sp, #32]
   13a5c:	ldr	r3, [r0]
   13a60:	str	r3, [sp, #36]	; 0x24
   13a64:	ldr	r3, [pc, #396]	; 13bf8 <__assert_fail@plt+0x2a7c>
   13a68:	ldr	r6, [r3]
   13a6c:	cmn	r5, #-2147483647	; 0x80000001
   13a70:	movne	r3, #0
   13a74:	moveq	r3, #1
   13a78:	orrs	r3, r3, r5, lsr #31
   13a7c:	bne	13bbc <__assert_fail@plt+0x2a40>
   13a80:	ldr	r3, [pc, #368]	; 13bf8 <__assert_fail@plt+0x2a7c>
   13a84:	ldr	r2, [r3, #4]
   13a88:	cmp	r5, r2
   13a8c:	blt	13af4 <__assert_fail@plt+0x2978>
   13a90:	str	r2, [sp, #44]	; 0x2c
   13a94:	add	r3, r3, #8
   13a98:	cmp	r6, r3
   13a9c:	beq	13bc0 <__assert_fail@plt+0x2a44>
   13aa0:	sub	r2, r5, r2
   13aa4:	mov	r3, #8
   13aa8:	str	r3, [sp]
   13aac:	mvn	r3, #-2147483648	; 0x80000000
   13ab0:	add	r2, r2, #1
   13ab4:	add	r1, sp, #44	; 0x2c
   13ab8:	mov	r0, r6
   13abc:	bl	14ce8 <__assert_fail@plt+0x3b6c>
   13ac0:	mov	r6, r0
   13ac4:	ldr	r3, [pc, #300]	; 13bf8 <__assert_fail@plt+0x2a7c>
   13ac8:	str	r0, [r3]
   13acc:	ldr	r7, [pc, #292]	; 13bf8 <__assert_fail@plt+0x2a7c>
   13ad0:	ldr	r0, [r7, #4]
   13ad4:	ldr	r2, [sp, #44]	; 0x2c
   13ad8:	sub	r2, r2, r0
   13adc:	lsl	r2, r2, #3
   13ae0:	mov	r1, #0
   13ae4:	add	r0, r6, r0, lsl #3
   13ae8:	bl	110b0 <memset@plt>
   13aec:	ldr	r3, [sp, #44]	; 0x2c
   13af0:	str	r3, [r7, #4]
   13af4:	add	fp, r6, r5, lsl #3
   13af8:	ldr	r8, [r6, r5, lsl #3]
   13afc:	ldr	r7, [fp, #4]
   13b00:	ldr	r9, [r4, #4]
   13b04:	orr	r9, r9, #1
   13b08:	add	sl, r4, #8
   13b0c:	ldr	r3, [r4, #44]	; 0x2c
   13b10:	str	r3, [sp, #16]
   13b14:	ldr	r3, [r4, #40]	; 0x28
   13b18:	str	r3, [sp, #12]
   13b1c:	str	sl, [sp, #8]
   13b20:	str	r9, [sp, #4]
   13b24:	ldr	r3, [r4]
   13b28:	str	r3, [sp]
   13b2c:	ldr	r3, [sp, #28]
   13b30:	ldr	r2, [sp, #24]
   13b34:	mov	r1, r8
   13b38:	mov	r0, r7
   13b3c:	bl	128cc <__assert_fail@plt+0x1750>
   13b40:	cmp	r8, r0
   13b44:	bhi	13ba4 <__assert_fail@plt+0x2a28>
   13b48:	add	r8, r0, #1
   13b4c:	str	r8, [r6, r5, lsl #3]
   13b50:	ldr	r3, [pc, #164]	; 13bfc <__assert_fail@plt+0x2a80>
   13b54:	cmp	r7, r3
   13b58:	beq	13b64 <__assert_fail@plt+0x29e8>
   13b5c:	mov	r0, r7
   13b60:	bl	125ec <__assert_fail@plt+0x1470>
   13b64:	mov	r0, r8
   13b68:	bl	14b64 <__assert_fail@plt+0x39e8>
   13b6c:	mov	r7, r0
   13b70:	str	r0, [fp, #4]
   13b74:	ldr	r3, [r4, #44]	; 0x2c
   13b78:	str	r3, [sp, #16]
   13b7c:	ldr	r3, [r4, #40]	; 0x28
   13b80:	str	r3, [sp, #12]
   13b84:	str	sl, [sp, #8]
   13b88:	str	r9, [sp, #4]
   13b8c:	ldr	r3, [r4]
   13b90:	str	r3, [sp]
   13b94:	ldr	r3, [sp, #28]
   13b98:	ldr	r2, [sp, #24]
   13b9c:	mov	r1, r8
   13ba0:	bl	128cc <__assert_fail@plt+0x1750>
   13ba4:	ldr	r3, [sp, #32]
   13ba8:	ldr	r2, [sp, #36]	; 0x24
   13bac:	str	r2, [r3]
   13bb0:	mov	r0, r7
   13bb4:	add	sp, sp, #52	; 0x34
   13bb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bbc:	bl	11158 <abort@plt>
   13bc0:	sub	r2, r5, r2
   13bc4:	mov	r3, #8
   13bc8:	str	r3, [sp]
   13bcc:	mvn	r3, #-2147483648	; 0x80000000
   13bd0:	add	r2, r2, #1
   13bd4:	add	r1, sp, #44	; 0x2c
   13bd8:	mov	r0, #0
   13bdc:	bl	14ce8 <__assert_fail@plt+0x3b6c>
   13be0:	mov	r6, r0
   13be4:	ldr	r3, [pc, #12]	; 13bf8 <__assert_fail@plt+0x2a7c>
   13be8:	str	r0, [r3], #8
   13bec:	ldm	r3, {r0, r1}
   13bf0:	stm	r6, {r0, r1}
   13bf4:	b	13acc <__assert_fail@plt+0x2950>
   13bf8:	andeq	r8, r2, ip, lsl r1
   13bfc:	andeq	r8, r2, ip, ror #3
   13c00:	push	{r4, r5, r6, lr}
   13c04:	mov	r4, r0
   13c08:	bl	11080 <__errno_location@plt>
   13c0c:	mov	r5, r0
   13c10:	ldr	r6, [r0]
   13c14:	cmp	r4, #0
   13c18:	ldr	r3, [pc, #20]	; 13c34 <__assert_fail@plt+0x2ab8>
   13c1c:	moveq	r4, r3
   13c20:	mov	r1, #48	; 0x30
   13c24:	mov	r0, r4
   13c28:	bl	15050 <__assert_fail@plt+0x3ed4>
   13c2c:	str	r6, [r5]
   13c30:	pop	{r4, r5, r6, pc}
   13c34:	andeq	r8, r2, ip, ror #5
   13c38:	subs	r3, r0, #0
   13c3c:	ldr	r2, [pc, #8]	; 13c4c <__assert_fail@plt+0x2ad0>
   13c40:	moveq	r3, r2
   13c44:	ldr	r0, [r3]
   13c48:	bx	lr
   13c4c:	andeq	r8, r2, ip, ror #5
   13c50:	subs	r3, r0, #0
   13c54:	ldr	r2, [pc, #8]	; 13c64 <__assert_fail@plt+0x2ae8>
   13c58:	moveq	r3, r2
   13c5c:	str	r1, [r3]
   13c60:	bx	lr
   13c64:	andeq	r8, r2, ip, ror #5
   13c68:	push	{lr}		; (str lr, [sp, #-4]!)
   13c6c:	subs	r3, r0, #0
   13c70:	ldr	r0, [pc, #44]	; 13ca4 <__assert_fail@plt+0x2b28>
   13c74:	moveq	r3, r0
   13c78:	add	r3, r3, #8
   13c7c:	lsr	lr, r1, #5
   13c80:	and	r1, r1, #31
   13c84:	ldr	ip, [r3, lr, lsl #2]
   13c88:	lsr	r0, ip, r1
   13c8c:	eor	r2, r2, r0
   13c90:	and	r2, r2, #1
   13c94:	eor	r1, ip, r2, lsl r1
   13c98:	str	r1, [r3, lr, lsl #2]
   13c9c:	and	r0, r0, #1
   13ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca4:	andeq	r8, r2, ip, ror #5
   13ca8:	subs	r3, r0, #0
   13cac:	ldr	r2, [pc, #12]	; 13cc0 <__assert_fail@plt+0x2b44>
   13cb0:	moveq	r3, r2
   13cb4:	ldr	r0, [r3, #4]
   13cb8:	str	r1, [r3, #4]
   13cbc:	bx	lr
   13cc0:	andeq	r8, r2, ip, ror #5
   13cc4:	subs	r3, r0, #0
   13cc8:	ldr	r0, [pc, #40]	; 13cf8 <__assert_fail@plt+0x2b7c>
   13ccc:	moveq	r3, r0
   13cd0:	mov	r0, #10
   13cd4:	str	r0, [r3]
   13cd8:	cmp	r2, #0
   13cdc:	cmpne	r1, #0
   13ce0:	beq	13cf0 <__assert_fail@plt+0x2b74>
   13ce4:	str	r1, [r3, #40]	; 0x28
   13ce8:	str	r2, [r3, #44]	; 0x2c
   13cec:	bx	lr
   13cf0:	push	{r4, lr}
   13cf4:	bl	11158 <abort@plt>
   13cf8:	andeq	r8, r2, ip, ror #5
   13cfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d00:	sub	sp, sp, #24
   13d04:	mov	r7, r0
   13d08:	mov	r8, r1
   13d0c:	mov	r9, r2
   13d10:	mov	sl, r3
   13d14:	ldr	r4, [sp, #56]	; 0x38
   13d18:	cmp	r4, #0
   13d1c:	ldr	r3, [pc, #84]	; 13d78 <__assert_fail@plt+0x2bfc>
   13d20:	moveq	r4, r3
   13d24:	bl	11080 <__errno_location@plt>
   13d28:	mov	r5, r0
   13d2c:	ldr	r6, [r0]
   13d30:	ldr	r3, [r4, #44]	; 0x2c
   13d34:	str	r3, [sp, #16]
   13d38:	ldr	r3, [r4, #40]	; 0x28
   13d3c:	str	r3, [sp, #12]
   13d40:	add	r3, r4, #8
   13d44:	str	r3, [sp, #8]
   13d48:	ldr	r3, [r4, #4]
   13d4c:	str	r3, [sp, #4]
   13d50:	ldr	r3, [r4]
   13d54:	str	r3, [sp]
   13d58:	mov	r3, sl
   13d5c:	mov	r2, r9
   13d60:	mov	r1, r8
   13d64:	mov	r0, r7
   13d68:	bl	128cc <__assert_fail@plt+0x1750>
   13d6c:	str	r6, [r5]
   13d70:	add	sp, sp, #24
   13d74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13d78:	andeq	r8, r2, ip, ror #5
   13d7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d80:	sub	sp, sp, #44	; 0x2c
   13d84:	str	r0, [sp, #28]
   13d88:	str	r1, [sp, #32]
   13d8c:	mov	r6, r2
   13d90:	subs	r4, r3, #0
   13d94:	ldr	r3, [pc, #172]	; 13e48 <__assert_fail@plt+0x2ccc>
   13d98:	moveq	r4, r3
   13d9c:	bl	11080 <__errno_location@plt>
   13da0:	mov	r7, r0
   13da4:	ldr	fp, [r0]
   13da8:	ldr	r5, [r4, #4]
   13dac:	cmp	r6, #0
   13db0:	orreq	r5, r5, #1
   13db4:	add	r9, r4, #8
   13db8:	ldr	r3, [r4, #44]	; 0x2c
   13dbc:	str	r3, [sp, #16]
   13dc0:	ldr	r3, [r4, #40]	; 0x28
   13dc4:	str	r3, [sp, #12]
   13dc8:	str	r9, [sp, #8]
   13dcc:	str	r5, [sp, #4]
   13dd0:	ldr	r3, [r4]
   13dd4:	str	r3, [sp]
   13dd8:	ldr	r3, [sp, #32]
   13ddc:	ldr	r2, [sp, #28]
   13de0:	mov	r1, #0
   13de4:	mov	r0, r1
   13de8:	bl	128cc <__assert_fail@plt+0x1750>
   13dec:	mov	sl, r0
   13df0:	add	r8, r0, #1
   13df4:	mov	r0, r8
   13df8:	bl	14b64 <__assert_fail@plt+0x39e8>
   13dfc:	str	r0, [sp, #36]	; 0x24
   13e00:	ldr	r3, [r4, #44]	; 0x2c
   13e04:	str	r3, [sp, #16]
   13e08:	ldr	r3, [r4, #40]	; 0x28
   13e0c:	str	r3, [sp, #12]
   13e10:	str	r9, [sp, #8]
   13e14:	str	r5, [sp, #4]
   13e18:	ldr	r3, [r4]
   13e1c:	str	r3, [sp]
   13e20:	ldr	r3, [sp, #32]
   13e24:	ldr	r2, [sp, #28]
   13e28:	mov	r1, r8
   13e2c:	bl	128cc <__assert_fail@plt+0x1750>
   13e30:	str	fp, [r7]
   13e34:	cmp	r6, #0
   13e38:	strne	sl, [r6]
   13e3c:	ldr	r0, [sp, #36]	; 0x24
   13e40:	add	sp, sp, #44	; 0x2c
   13e44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e48:	andeq	r8, r2, ip, ror #5
   13e4c:	push	{r4, lr}
   13e50:	mov	r3, r2
   13e54:	mov	r2, #0
   13e58:	bl	13d7c <__assert_fail@plt+0x2c00>
   13e5c:	pop	{r4, pc}
   13e60:	push	{r4, r5, r6, r7, r8, lr}
   13e64:	ldr	r3, [pc, #140]	; 13ef8 <__assert_fail@plt+0x2d7c>
   13e68:	ldr	r7, [r3]
   13e6c:	ldr	r3, [r3, #4]
   13e70:	cmp	r3, #1
   13e74:	ble	13ea0 <__assert_fail@plt+0x2d24>
   13e78:	mov	r5, r7
   13e7c:	mov	r4, #1
   13e80:	ldr	r6, [pc, #112]	; 13ef8 <__assert_fail@plt+0x2d7c>
   13e84:	ldr	r0, [r5, #12]
   13e88:	bl	125ec <__assert_fail@plt+0x1470>
   13e8c:	add	r4, r4, #1
   13e90:	add	r5, r5, #8
   13e94:	ldr	r3, [r6, #4]
   13e98:	cmp	r3, r4
   13e9c:	bgt	13e84 <__assert_fail@plt+0x2d08>
   13ea0:	ldr	r0, [r7, #4]
   13ea4:	ldr	r3, [pc, #80]	; 13efc <__assert_fail@plt+0x2d80>
   13ea8:	cmp	r0, r3
   13eac:	beq	13ec8 <__assert_fail@plt+0x2d4c>
   13eb0:	bl	125ec <__assert_fail@plt+0x1470>
   13eb4:	ldr	r3, [pc, #60]	; 13ef8 <__assert_fail@plt+0x2d7c>
   13eb8:	mov	r2, #256	; 0x100
   13ebc:	str	r2, [r3, #8]
   13ec0:	ldr	r2, [pc, #52]	; 13efc <__assert_fail@plt+0x2d80>
   13ec4:	str	r2, [r3, #12]
   13ec8:	ldr	r3, [pc, #48]	; 13f00 <__assert_fail@plt+0x2d84>
   13ecc:	cmp	r7, r3
   13ed0:	beq	13ee8 <__assert_fail@plt+0x2d6c>
   13ed4:	mov	r0, r7
   13ed8:	bl	125ec <__assert_fail@plt+0x1470>
   13edc:	ldr	r3, [pc, #20]	; 13ef8 <__assert_fail@plt+0x2d7c>
   13ee0:	add	r2, r3, #8
   13ee4:	str	r2, [r3]
   13ee8:	mov	r2, #1
   13eec:	ldr	r3, [pc, #4]	; 13ef8 <__assert_fail@plt+0x2d7c>
   13ef0:	str	r2, [r3, #4]
   13ef4:	pop	{r4, r5, r6, r7, r8, pc}
   13ef8:	andeq	r8, r2, ip, lsl r1
   13efc:	andeq	r8, r2, ip, ror #3
   13f00:	andeq	r8, r2, r4, lsr #2
   13f04:	push	{r4, lr}
   13f08:	ldr	r3, [pc, #8]	; 13f18 <__assert_fail@plt+0x2d9c>
   13f0c:	mvn	r2, #0
   13f10:	bl	13a3c <__assert_fail@plt+0x28c0>
   13f14:	pop	{r4, pc}
   13f18:	andeq	r8, r2, ip, ror #5
   13f1c:	push	{r4, lr}
   13f20:	ldr	r3, [pc, #4]	; 13f2c <__assert_fail@plt+0x2db0>
   13f24:	bl	13a3c <__assert_fail@plt+0x28c0>
   13f28:	pop	{r4, pc}
   13f2c:	andeq	r8, r2, ip, ror #5
   13f30:	push	{r4, lr}
   13f34:	mov	r1, r0
   13f38:	mov	r0, #0
   13f3c:	bl	13f04 <__assert_fail@plt+0x2d88>
   13f40:	pop	{r4, pc}
   13f44:	push	{r4, lr}
   13f48:	mov	r2, r1
   13f4c:	mov	r1, r0
   13f50:	mov	r0, #0
   13f54:	bl	13f1c <__assert_fail@plt+0x2da0>
   13f58:	pop	{r4, pc}
   13f5c:	push	{r4, r5, lr}
   13f60:	sub	sp, sp, #52	; 0x34
   13f64:	mov	r4, r0
   13f68:	mov	r5, r2
   13f6c:	mov	r0, sp
   13f70:	bl	12764 <__assert_fail@plt+0x15e8>
   13f74:	mov	r3, sp
   13f78:	mvn	r2, #0
   13f7c:	mov	r1, r5
   13f80:	mov	r0, r4
   13f84:	bl	13a3c <__assert_fail@plt+0x28c0>
   13f88:	add	sp, sp, #52	; 0x34
   13f8c:	pop	{r4, r5, pc}
   13f90:	push	{r4, r5, r6, lr}
   13f94:	sub	sp, sp, #48	; 0x30
   13f98:	mov	r4, r0
   13f9c:	mov	r5, r2
   13fa0:	mov	r6, r3
   13fa4:	mov	r0, sp
   13fa8:	bl	12764 <__assert_fail@plt+0x15e8>
   13fac:	mov	r3, sp
   13fb0:	mov	r2, r6
   13fb4:	mov	r1, r5
   13fb8:	mov	r0, r4
   13fbc:	bl	13a3c <__assert_fail@plt+0x28c0>
   13fc0:	add	sp, sp, #48	; 0x30
   13fc4:	pop	{r4, r5, r6, pc}
   13fc8:	push	{r4, lr}
   13fcc:	mov	r2, r1
   13fd0:	mov	r1, r0
   13fd4:	mov	r0, #0
   13fd8:	bl	13f5c <__assert_fail@plt+0x2de0>
   13fdc:	pop	{r4, pc}
   13fe0:	push	{r4, lr}
   13fe4:	mov	r3, r2
   13fe8:	mov	r2, r1
   13fec:	mov	r1, r0
   13ff0:	mov	r0, #0
   13ff4:	bl	13f90 <__assert_fail@plt+0x2e14>
   13ff8:	pop	{r4, pc}
   13ffc:	push	{r4, r5, r6, lr}
   14000:	sub	sp, sp, #48	; 0x30
   14004:	mov	r4, r0
   14008:	mov	r5, r1
   1400c:	mov	r6, r2
   14010:	mov	ip, sp
   14014:	ldr	lr, [pc, #64]	; 1405c <__assert_fail@plt+0x2ee0>
   14018:	ldm	lr!, {r0, r1, r2, r3}
   1401c:	stmia	ip!, {r0, r1, r2, r3}
   14020:	ldm	lr!, {r0, r1, r2, r3}
   14024:	stmia	ip!, {r0, r1, r2, r3}
   14028:	ldm	lr, {r0, r1, r2, r3}
   1402c:	stm	ip, {r0, r1, r2, r3}
   14030:	mov	r2, #1
   14034:	mov	r1, r6
   14038:	mov	r0, sp
   1403c:	bl	13c68 <__assert_fail@plt+0x2aec>
   14040:	mov	r3, sp
   14044:	mov	r2, r5
   14048:	mov	r1, r4
   1404c:	mov	r0, #0
   14050:	bl	13a3c <__assert_fail@plt+0x28c0>
   14054:	add	sp, sp, #48	; 0x30
   14058:	pop	{r4, r5, r6, pc}
   1405c:	andeq	r8, r2, ip, ror #5
   14060:	push	{r4, lr}
   14064:	mov	r2, r1
   14068:	mvn	r1, #0
   1406c:	bl	13ffc <__assert_fail@plt+0x2e80>
   14070:	pop	{r4, pc}
   14074:	push	{r4, lr}
   14078:	mov	r1, #58	; 0x3a
   1407c:	bl	14060 <__assert_fail@plt+0x2ee4>
   14080:	pop	{r4, pc}
   14084:	push	{r4, lr}
   14088:	mov	r2, #58	; 0x3a
   1408c:	bl	13ffc <__assert_fail@plt+0x2e80>
   14090:	pop	{r4, pc}
   14094:	push	{r4, r5, lr}
   14098:	sub	sp, sp, #100	; 0x64
   1409c:	mov	r4, r0
   140a0:	mov	r5, r2
   140a4:	mov	r0, sp
   140a8:	bl	12764 <__assert_fail@plt+0x15e8>
   140ac:	add	lr, sp, #48	; 0x30
   140b0:	mov	ip, sp
   140b4:	ldm	ip!, {r0, r1, r2, r3}
   140b8:	stmia	lr!, {r0, r1, r2, r3}
   140bc:	ldm	ip!, {r0, r1, r2, r3}
   140c0:	stmia	lr!, {r0, r1, r2, r3}
   140c4:	ldm	ip, {r0, r1, r2, r3}
   140c8:	stm	lr, {r0, r1, r2, r3}
   140cc:	mov	r2, #1
   140d0:	mov	r1, #58	; 0x3a
   140d4:	add	r0, sp, #48	; 0x30
   140d8:	bl	13c68 <__assert_fail@plt+0x2aec>
   140dc:	add	r3, sp, #48	; 0x30
   140e0:	mvn	r2, #0
   140e4:	mov	r1, r5
   140e8:	mov	r0, r4
   140ec:	bl	13a3c <__assert_fail@plt+0x28c0>
   140f0:	add	sp, sp, #100	; 0x64
   140f4:	pop	{r4, r5, pc}
   140f8:	push	{r4, r5, r6, r7, lr}
   140fc:	sub	sp, sp, #52	; 0x34
   14100:	mov	r4, r0
   14104:	mov	r6, r1
   14108:	mov	r7, r2
   1410c:	mov	r5, r3
   14110:	mov	ip, sp
   14114:	ldr	lr, [pc, #64]	; 1415c <__assert_fail@plt+0x2fe0>
   14118:	ldm	lr!, {r0, r1, r2, r3}
   1411c:	stmia	ip!, {r0, r1, r2, r3}
   14120:	ldm	lr!, {r0, r1, r2, r3}
   14124:	stmia	ip!, {r0, r1, r2, r3}
   14128:	ldm	lr, {r0, r1, r2, r3}
   1412c:	stm	ip, {r0, r1, r2, r3}
   14130:	mov	r2, r7
   14134:	mov	r1, r6
   14138:	mov	r0, sp
   1413c:	bl	13cc4 <__assert_fail@plt+0x2b48>
   14140:	mov	r3, sp
   14144:	ldr	r2, [sp, #72]	; 0x48
   14148:	mov	r1, r5
   1414c:	mov	r0, r4
   14150:	bl	13a3c <__assert_fail@plt+0x28c0>
   14154:	add	sp, sp, #52	; 0x34
   14158:	pop	{r4, r5, r6, r7, pc}
   1415c:	andeq	r8, r2, ip, ror #5
   14160:	push	{lr}		; (str lr, [sp, #-4]!)
   14164:	sub	sp, sp, #12
   14168:	mvn	ip, #0
   1416c:	str	ip, [sp]
   14170:	bl	140f8 <__assert_fail@plt+0x2f7c>
   14174:	add	sp, sp, #12
   14178:	pop	{pc}		; (ldr pc, [sp], #4)
   1417c:	push	{r4, lr}
   14180:	mov	r3, r2
   14184:	mov	r2, r1
   14188:	mov	r1, r0
   1418c:	mov	r0, #0
   14190:	bl	14160 <__assert_fail@plt+0x2fe4>
   14194:	pop	{r4, pc}
   14198:	push	{lr}		; (str lr, [sp, #-4]!)
   1419c:	sub	sp, sp, #12
   141a0:	str	r3, [sp]
   141a4:	mov	r3, r2
   141a8:	mov	r2, r1
   141ac:	mov	r1, r0
   141b0:	mov	r0, #0
   141b4:	bl	140f8 <__assert_fail@plt+0x2f7c>
   141b8:	add	sp, sp, #12
   141bc:	pop	{pc}		; (ldr pc, [sp], #4)
   141c0:	push	{r4, lr}
   141c4:	ldr	r3, [pc, #4]	; 141d0 <__assert_fail@plt+0x3054>
   141c8:	bl	13a3c <__assert_fail@plt+0x28c0>
   141cc:	pop	{r4, pc}
   141d0:	andeq	r8, r2, ip, lsr #2
   141d4:	push	{r4, lr}
   141d8:	mov	r2, r1
   141dc:	mov	r1, r0
   141e0:	mov	r0, #0
   141e4:	bl	141c0 <__assert_fail@plt+0x3044>
   141e8:	pop	{r4, pc}
   141ec:	push	{r4, lr}
   141f0:	mvn	r2, #0
   141f4:	bl	141c0 <__assert_fail@plt+0x3044>
   141f8:	pop	{r4, pc}
   141fc:	push	{r4, lr}
   14200:	mov	r1, r0
   14204:	mov	r0, #0
   14208:	bl	141ec <__assert_fail@plt+0x3070>
   1420c:	pop	{r4, pc}
   14210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14214:	sub	sp, sp, #44	; 0x2c
   14218:	mov	r6, r1
   1421c:	mov	r8, r2
   14220:	ldr	r7, [sp, #80]	; 0x50
   14224:	ldr	fp, [r2]
   14228:	subs	r9, r3, #0
   1422c:	ldrne	sl, [r9]
   14230:	mvneq	sl, #0
   14234:	cmp	r7, #0
   14238:	movne	r3, #0
   1423c:	strne	r3, [r7]
   14240:	ldr	r3, [sp, #84]	; 0x54
   14244:	cmp	r3, #0
   14248:	movne	r3, #0
   1424c:	ldrne	r2, [sp, #84]	; 0x54
   14250:	strne	r3, [r2]
   14254:	cmp	r1, #0
   14258:	beq	14344 <__assert_fail@plt+0x31c8>
   1425c:	subs	r5, r1, r0
   14260:	moveq	r4, #0
   14264:	bne	14360 <__assert_fail@plt+0x31e4>
   14268:	ldrb	r3, [r6, #1]
   1426c:	cmp	r3, #0
   14270:	bne	14378 <__assert_fail@plt+0x31fc>
   14274:	cmp	r4, #0
   14278:	streq	r4, [sp, #12]
   1427c:	beq	1449c <__assert_fail@plt+0x3320>
   14280:	mov	r5, #0
   14284:	ldrb	r3, [r4]
   14288:	cmp	r3, #43	; 0x2b
   1428c:	beq	14398 <__assert_fail@plt+0x321c>
   14290:	mov	r0, r4
   14294:	bl	10ed0 <getpwnam@plt>
   14298:	cmp	r0, #0
   1429c:	beq	14398 <__assert_fail@plt+0x321c>
   142a0:	ldr	fp, [r0, #8]
   142a4:	clz	r3, r5
   142a8:	lsr	r3, r3, #5
   142ac:	cmp	r6, #0
   142b0:	moveq	r3, #0
   142b4:	cmp	r3, #0
   142b8:	moveq	r3, #0
   142bc:	streq	r3, [sp, #12]
   142c0:	moveq	r6, r3
   142c4:	bne	14414 <__assert_fail@plt+0x3298>
   142c8:	bl	11110 <endpwent@plt>
   142cc:	adds	r3, r5, #0
   142d0:	movne	r3, #1
   142d4:	cmp	r6, #0
   142d8:	movne	r3, #0
   142dc:	cmp	r3, #0
   142e0:	beq	14314 <__assert_fail@plt+0x3198>
   142e4:	ldrb	r3, [r5]
   142e8:	cmp	r3, #43	; 0x2b
   142ec:	beq	14454 <__assert_fail@plt+0x32d8>
   142f0:	mov	r0, r5
   142f4:	bl	11170 <getgrnam@plt>
   142f8:	cmp	r0, #0
   142fc:	ldrne	sl, [r0, #8]
   14300:	beq	14454 <__assert_fail@plt+0x32d8>
   14304:	bl	10eac <endgrent@plt>
   14308:	mov	r0, r5
   1430c:	bl	150c4 <__assert_fail@plt+0x3f48>
   14310:	str	r0, [sp, #12]
   14314:	cmp	r6, #0
   14318:	beq	1449c <__assert_fail@plt+0x3320>
   1431c:	mov	r0, r4
   14320:	bl	125ec <__assert_fail@plt+0x1470>
   14324:	ldr	r0, [sp, #12]
   14328:	bl	125ec <__assert_fail@plt+0x1470>
   1432c:	mov	r2, #5
   14330:	mov	r1, r6
   14334:	mov	r0, #0
   14338:	bl	10f60 <dcgettext@plt>
   1433c:	add	sp, sp, #44	; 0x2c
   14340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14344:	ldrb	r3, [r0]
   14348:	cmp	r3, #0
   1434c:	moveq	r4, #0
   14350:	beq	14274 <__assert_fail@plt+0x30f8>
   14354:	bl	150c4 <__assert_fail@plt+0x3f48>
   14358:	mov	r4, r0
   1435c:	b	14274 <__assert_fail@plt+0x30f8>
   14360:	add	r1, r5, #1
   14364:	bl	15074 <__assert_fail@plt+0x3ef8>
   14368:	mov	r4, r0
   1436c:	mov	r3, #0
   14370:	strb	r3, [r0, r5]
   14374:	b	14268 <__assert_fail@plt+0x30ec>
   14378:	add	r5, r6, #1
   1437c:	cmp	r4, #0
   14380:	bne	14284 <__assert_fail@plt+0x3108>
   14384:	cmp	r5, #0
   14388:	streq	r4, [sp, #12]
   1438c:	beq	1449c <__assert_fail@plt+0x3320>
   14390:	mov	r6, #0
   14394:	b	142e4 <__assert_fail@plt+0x3168>
   14398:	adds	r6, r6, #0
   1439c:	movne	r6, #1
   143a0:	cmp	r5, #0
   143a4:	movne	r6, #0
   143a8:	cmp	r6, #0
   143ac:	beq	143c4 <__assert_fail@plt+0x3248>
   143b0:	bl	11110 <endpwent@plt>
   143b4:	mov	r3, #0
   143b8:	str	r3, [sp, #12]
   143bc:	ldr	r6, [pc, #288]	; 144e4 <__assert_fail@plt+0x3368>
   143c0:	b	14314 <__assert_fail@plt+0x3198>
   143c4:	ldr	r3, [pc, #284]	; 144e8 <__assert_fail@plt+0x336c>
   143c8:	str	r3, [sp]
   143cc:	add	r3, sp, #16
   143d0:	mov	r2, #10
   143d4:	mov	r1, #0
   143d8:	mov	r0, r4
   143dc:	bl	1520c <__assert_fail@plt+0x4090>
   143e0:	cmp	r0, #0
   143e4:	bne	1440c <__assert_fail@plt+0x3290>
   143e8:	ldr	r3, [sp, #16]
   143ec:	cmn	r3, #1
   143f0:	movne	fp, r3
   143f4:	ldr	r6, [pc, #240]	; 144ec <__assert_fail@plt+0x3370>
   143f8:	cmn	r3, #1
   143fc:	movne	r6, #0
   14400:	mov	r3, #0
   14404:	str	r3, [sp, #12]
   14408:	b	142c8 <__assert_fail@plt+0x314c>
   1440c:	ldr	r6, [pc, #216]	; 144ec <__assert_fail@plt+0x3370>
   14410:	b	14400 <__assert_fail@plt+0x3284>
   14414:	ldr	sl, [r0, #12]
   14418:	mov	r0, sl
   1441c:	bl	11164 <getgrgid@plt>
   14420:	cmp	r0, #0
   14424:	beq	14440 <__assert_fail@plt+0x32c4>
   14428:	ldr	r0, [r0]
   1442c:	bl	150c4 <__assert_fail@plt+0x3f48>
   14430:	str	r0, [sp, #12]
   14434:	bl	10eac <endgrent@plt>
   14438:	mov	r6, #0
   1443c:	b	142c8 <__assert_fail@plt+0x314c>
   14440:	add	r2, sp, #16
   14444:	mov	r0, sl
   14448:	mov	r1, #0
   1444c:	bl	12644 <__assert_fail@plt+0x14c8>
   14450:	b	1442c <__assert_fail@plt+0x32b0>
   14454:	ldr	r3, [pc, #140]	; 144e8 <__assert_fail@plt+0x336c>
   14458:	str	r3, [sp]
   1445c:	add	r3, sp, #16
   14460:	mov	r2, #10
   14464:	mov	r1, #0
   14468:	mov	r0, r5
   1446c:	bl	1520c <__assert_fail@plt+0x4090>
   14470:	cmp	r0, #0
   14474:	bne	14494 <__assert_fail@plt+0x3318>
   14478:	ldr	r3, [sp, #16]
   1447c:	cmn	r3, #1
   14480:	movne	sl, r3
   14484:	ldr	r2, [pc, #100]	; 144f0 <__assert_fail@plt+0x3374>
   14488:	cmn	r3, #1
   1448c:	moveq	r6, r2
   14490:	b	14304 <__assert_fail@plt+0x3188>
   14494:	ldr	r6, [pc, #84]	; 144f0 <__assert_fail@plt+0x3374>
   14498:	b	14304 <__assert_fail@plt+0x3188>
   1449c:	str	fp, [r8]
   144a0:	cmp	r9, #0
   144a4:	strne	sl, [r9]
   144a8:	cmp	r7, #0
   144ac:	strne	r4, [r7]
   144b0:	movne	r4, #0
   144b4:	ldr	r3, [sp, #84]	; 0x54
   144b8:	cmp	r3, #0
   144bc:	ldrne	r2, [sp, #12]
   144c0:	strne	r2, [r3]
   144c4:	movne	r3, #0
   144c8:	strne	r3, [sp, #12]
   144cc:	mov	r0, r4
   144d0:	bl	125ec <__assert_fail@plt+0x1470>
   144d4:	ldr	r0, [sp, #12]
   144d8:	bl	125ec <__assert_fail@plt+0x1470>
   144dc:	mov	r0, #0
   144e0:	b	1433c <__assert_fail@plt+0x31c0>
   144e4:	andeq	r6, r1, r4, asr #27
   144e8:	andeq	r6, r1, r4, lsr #11
   144ec:	andeq	r6, r1, r4, lsr #27
   144f0:			; <UNDEFINED> instruction: 0x00016db4
   144f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   144f8:	sub	sp, sp, #8
   144fc:	mov	r5, r0
   14500:	mov	r7, r1
   14504:	mov	r8, r3
   14508:	ldr	r9, [sp, #40]	; 0x28
   1450c:	subs	sl, r2, #0
   14510:	beq	14598 <__assert_fail@plt+0x341c>
   14514:	mov	r1, #58	; 0x3a
   14518:	bl	11074 <strchr@plt>
   1451c:	mov	r4, r0
   14520:	str	r9, [sp, #4]
   14524:	str	r8, [sp]
   14528:	mov	r3, sl
   1452c:	mov	r2, r7
   14530:	mov	r1, r0
   14534:	mov	r0, r5
   14538:	bl	14210 <__assert_fail@plt+0x3094>
   1453c:	mov	r6, r0
   14540:	clz	r3, r4
   14544:	lsr	r3, r3, #5
   14548:	cmp	r0, #0
   1454c:	moveq	r3, #0
   14550:	cmp	r3, #0
   14554:	beq	1458c <__assert_fail@plt+0x3410>
   14558:	mov	r1, #46	; 0x2e
   1455c:	mov	r0, r5
   14560:	bl	11074 <strchr@plt>
   14564:	subs	r1, r0, #0
   14568:	beq	1458c <__assert_fail@plt+0x3410>
   1456c:	str	r9, [sp, #4]
   14570:	str	r8, [sp]
   14574:	mov	r3, sl
   14578:	mov	r2, r7
   1457c:	mov	r0, r5
   14580:	bl	14210 <__assert_fail@plt+0x3094>
   14584:	cmp	r0, #0
   14588:	moveq	r6, #0
   1458c:	mov	r0, r6
   14590:	add	sp, sp, #8
   14594:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14598:	str	r9, [sp, #4]
   1459c:	str	r3, [sp]
   145a0:	mov	r3, #0
   145a4:	mov	r2, r1
   145a8:	mov	r1, r3
   145ac:	bl	14210 <__assert_fail@plt+0x3094>
   145b0:	mov	r6, r0
   145b4:	b	1458c <__assert_fail@plt+0x3410>
   145b8:	push	{r4, r5, r6, lr}
   145bc:	sub	sp, sp, #32
   145c0:	mov	r4, r0
   145c4:	ldr	r5, [sp, #48]	; 0x30
   145c8:	ldr	r6, [sp, #52]	; 0x34
   145cc:	cmp	r1, #0
   145d0:	beq	14688 <__assert_fail@plt+0x350c>
   145d4:	str	r3, [sp, #4]
   145d8:	str	r2, [sp]
   145dc:	mov	r3, r1
   145e0:	ldr	r2, [pc, #940]	; 14994 <__assert_fail@plt+0x3818>
   145e4:	mov	r1, #1
   145e8:	bl	110d4 <__fprintf_chk@plt>
   145ec:	mov	r2, #5
   145f0:	ldr	r1, [pc, #928]	; 14998 <__assert_fail@plt+0x381c>
   145f4:	mov	r0, #0
   145f8:	bl	10f60 <dcgettext@plt>
   145fc:	ldr	r3, [pc, #920]	; 1499c <__assert_fail@plt+0x3820>
   14600:	str	r3, [sp]
   14604:	mov	r3, r0
   14608:	ldr	r2, [pc, #912]	; 149a0 <__assert_fail@plt+0x3824>
   1460c:	mov	r1, #1
   14610:	mov	r0, r4
   14614:	bl	110d4 <__fprintf_chk@plt>
   14618:	mov	r1, r4
   1461c:	mov	r0, #10
   14620:	bl	10f54 <fputc_unlocked@plt>
   14624:	mov	r2, #5
   14628:	ldr	r1, [pc, #884]	; 149a4 <__assert_fail@plt+0x3828>
   1462c:	mov	r0, #0
   14630:	bl	10f60 <dcgettext@plt>
   14634:	ldr	r3, [pc, #876]	; 149a8 <__assert_fail@plt+0x382c>
   14638:	mov	r2, r0
   1463c:	mov	r1, #1
   14640:	mov	r0, r4
   14644:	bl	110d4 <__fprintf_chk@plt>
   14648:	mov	r1, r4
   1464c:	mov	r0, #10
   14650:	bl	10f54 <fputc_unlocked@plt>
   14654:	cmp	r6, #9
   14658:	ldrls	pc, [pc, r6, lsl #2]
   1465c:	b	1492c <__assert_fail@plt+0x37b0>
   14660:	andeq	r4, r1, r4, asr #13
   14664:	andeq	r4, r1, r0, lsr #13
   14668:	andeq	r4, r1, ip, asr #13
   1466c:	strdeq	r4, [r1], -ip
   14670:	andeq	r4, r1, r4, lsr r7
   14674:	andeq	r4, r1, r4, ror r7
   14678:			; <UNDEFINED> instruction: 0x000147bc
   1467c:	andeq	r4, r1, ip, lsl #16
   14680:	andeq	r4, r1, r4, ror #16
   14684:	andeq	r4, r1, r4, asr #17
   14688:	str	r3, [sp]
   1468c:	mov	r3, r2
   14690:	ldr	r2, [pc, #788]	; 149ac <__assert_fail@plt+0x3830>
   14694:	mov	r1, #1
   14698:	bl	110d4 <__fprintf_chk@plt>
   1469c:	b	145ec <__assert_fail@plt+0x3470>
   146a0:	mov	r2, #5
   146a4:	ldr	r1, [pc, #772]	; 149b0 <__assert_fail@plt+0x3834>
   146a8:	mov	r0, #0
   146ac:	bl	10f60 <dcgettext@plt>
   146b0:	ldr	r3, [r5]
   146b4:	mov	r2, r0
   146b8:	mov	r1, #1
   146bc:	mov	r0, r4
   146c0:	bl	110d4 <__fprintf_chk@plt>
   146c4:	add	sp, sp, #32
   146c8:	pop	{r4, r5, r6, pc}
   146cc:	mov	r2, #5
   146d0:	ldr	r1, [pc, #732]	; 149b4 <__assert_fail@plt+0x3838>
   146d4:	mov	r0, #0
   146d8:	bl	10f60 <dcgettext@plt>
   146dc:	ldr	r3, [r5]
   146e0:	ldr	r2, [r5, #4]
   146e4:	str	r2, [sp]
   146e8:	mov	r2, r0
   146ec:	mov	r1, #1
   146f0:	mov	r0, r4
   146f4:	bl	110d4 <__fprintf_chk@plt>
   146f8:	b	146c4 <__assert_fail@plt+0x3548>
   146fc:	mov	r2, #5
   14700:	ldr	r1, [pc, #688]	; 149b8 <__assert_fail@plt+0x383c>
   14704:	mov	r0, #0
   14708:	bl	10f60 <dcgettext@plt>
   1470c:	ldr	r3, [r5]
   14710:	ldr	r2, [r5, #8]
   14714:	str	r2, [sp, #4]
   14718:	ldr	r2, [r5, #4]
   1471c:	str	r2, [sp]
   14720:	mov	r2, r0
   14724:	mov	r1, #1
   14728:	mov	r0, r4
   1472c:	bl	110d4 <__fprintf_chk@plt>
   14730:	b	146c4 <__assert_fail@plt+0x3548>
   14734:	mov	r2, #5
   14738:	ldr	r1, [pc, #636]	; 149bc <__assert_fail@plt+0x3840>
   1473c:	mov	r0, #0
   14740:	bl	10f60 <dcgettext@plt>
   14744:	ldr	r3, [r5]
   14748:	ldr	r2, [r5, #12]
   1474c:	str	r2, [sp, #8]
   14750:	ldr	r2, [r5, #8]
   14754:	str	r2, [sp, #4]
   14758:	ldr	r2, [r5, #4]
   1475c:	str	r2, [sp]
   14760:	mov	r2, r0
   14764:	mov	r1, #1
   14768:	mov	r0, r4
   1476c:	bl	110d4 <__fprintf_chk@plt>
   14770:	b	146c4 <__assert_fail@plt+0x3548>
   14774:	mov	r2, #5
   14778:	ldr	r1, [pc, #576]	; 149c0 <__assert_fail@plt+0x3844>
   1477c:	mov	r0, #0
   14780:	bl	10f60 <dcgettext@plt>
   14784:	ldr	r3, [r5]
   14788:	ldr	r2, [r5, #16]
   1478c:	str	r2, [sp, #12]
   14790:	ldr	r2, [r5, #12]
   14794:	str	r2, [sp, #8]
   14798:	ldr	r2, [r5, #8]
   1479c:	str	r2, [sp, #4]
   147a0:	ldr	r2, [r5, #4]
   147a4:	str	r2, [sp]
   147a8:	mov	r2, r0
   147ac:	mov	r1, #1
   147b0:	mov	r0, r4
   147b4:	bl	110d4 <__fprintf_chk@plt>
   147b8:	b	146c4 <__assert_fail@plt+0x3548>
   147bc:	mov	r2, #5
   147c0:	ldr	r1, [pc, #508]	; 149c4 <__assert_fail@plt+0x3848>
   147c4:	mov	r0, #0
   147c8:	bl	10f60 <dcgettext@plt>
   147cc:	ldr	r3, [r5]
   147d0:	ldr	r2, [r5, #20]
   147d4:	str	r2, [sp, #16]
   147d8:	ldr	r2, [r5, #16]
   147dc:	str	r2, [sp, #12]
   147e0:	ldr	r2, [r5, #12]
   147e4:	str	r2, [sp, #8]
   147e8:	ldr	r2, [r5, #8]
   147ec:	str	r2, [sp, #4]
   147f0:	ldr	r2, [r5, #4]
   147f4:	str	r2, [sp]
   147f8:	mov	r2, r0
   147fc:	mov	r1, #1
   14800:	mov	r0, r4
   14804:	bl	110d4 <__fprintf_chk@plt>
   14808:	b	146c4 <__assert_fail@plt+0x3548>
   1480c:	mov	r2, #5
   14810:	ldr	r1, [pc, #432]	; 149c8 <__assert_fail@plt+0x384c>
   14814:	mov	r0, #0
   14818:	bl	10f60 <dcgettext@plt>
   1481c:	ldr	r3, [r5]
   14820:	ldr	r2, [r5, #24]
   14824:	str	r2, [sp, #20]
   14828:	ldr	r2, [r5, #20]
   1482c:	str	r2, [sp, #16]
   14830:	ldr	r2, [r5, #16]
   14834:	str	r2, [sp, #12]
   14838:	ldr	r2, [r5, #12]
   1483c:	str	r2, [sp, #8]
   14840:	ldr	r2, [r5, #8]
   14844:	str	r2, [sp, #4]
   14848:	ldr	r2, [r5, #4]
   1484c:	str	r2, [sp]
   14850:	mov	r2, r0
   14854:	mov	r1, #1
   14858:	mov	r0, r4
   1485c:	bl	110d4 <__fprintf_chk@plt>
   14860:	b	146c4 <__assert_fail@plt+0x3548>
   14864:	mov	r2, #5
   14868:	ldr	r1, [pc, #348]	; 149cc <__assert_fail@plt+0x3850>
   1486c:	mov	r0, #0
   14870:	bl	10f60 <dcgettext@plt>
   14874:	ldr	r3, [r5]
   14878:	ldr	r2, [r5, #28]
   1487c:	str	r2, [sp, #24]
   14880:	ldr	r2, [r5, #24]
   14884:	str	r2, [sp, #20]
   14888:	ldr	r2, [r5, #20]
   1488c:	str	r2, [sp, #16]
   14890:	ldr	r2, [r5, #16]
   14894:	str	r2, [sp, #12]
   14898:	ldr	r2, [r5, #12]
   1489c:	str	r2, [sp, #8]
   148a0:	ldr	r2, [r5, #8]
   148a4:	str	r2, [sp, #4]
   148a8:	ldr	r2, [r5, #4]
   148ac:	str	r2, [sp]
   148b0:	mov	r2, r0
   148b4:	mov	r1, #1
   148b8:	mov	r0, r4
   148bc:	bl	110d4 <__fprintf_chk@plt>
   148c0:	b	146c4 <__assert_fail@plt+0x3548>
   148c4:	mov	r2, #5
   148c8:	ldr	r1, [pc, #256]	; 149d0 <__assert_fail@plt+0x3854>
   148cc:	mov	r0, #0
   148d0:	bl	10f60 <dcgettext@plt>
   148d4:	ldr	r3, [r5]
   148d8:	ldr	r2, [r5, #32]
   148dc:	str	r2, [sp, #28]
   148e0:	ldr	r2, [r5, #28]
   148e4:	str	r2, [sp, #24]
   148e8:	ldr	r2, [r5, #24]
   148ec:	str	r2, [sp, #20]
   148f0:	ldr	r2, [r5, #20]
   148f4:	str	r2, [sp, #16]
   148f8:	ldr	r2, [r5, #16]
   148fc:	str	r2, [sp, #12]
   14900:	ldr	r2, [r5, #12]
   14904:	str	r2, [sp, #8]
   14908:	ldr	r2, [r5, #8]
   1490c:	str	r2, [sp, #4]
   14910:	ldr	r2, [r5, #4]
   14914:	str	r2, [sp]
   14918:	mov	r2, r0
   1491c:	mov	r1, #1
   14920:	mov	r0, r4
   14924:	bl	110d4 <__fprintf_chk@plt>
   14928:	b	146c4 <__assert_fail@plt+0x3548>
   1492c:	mov	r2, #5
   14930:	ldr	r1, [pc, #156]	; 149d4 <__assert_fail@plt+0x3858>
   14934:	mov	r0, #0
   14938:	bl	10f60 <dcgettext@plt>
   1493c:	ldr	r3, [r5]
   14940:	ldr	r2, [r5, #32]
   14944:	str	r2, [sp, #28]
   14948:	ldr	r2, [r5, #28]
   1494c:	str	r2, [sp, #24]
   14950:	ldr	r2, [r5, #24]
   14954:	str	r2, [sp, #20]
   14958:	ldr	r2, [r5, #20]
   1495c:	str	r2, [sp, #16]
   14960:	ldr	r2, [r5, #16]
   14964:	str	r2, [sp, #12]
   14968:	ldr	r2, [r5, #12]
   1496c:	str	r2, [sp, #8]
   14970:	ldr	r2, [r5, #8]
   14974:	str	r2, [sp, #4]
   14978:	ldr	r2, [r5, #4]
   1497c:	str	r2, [sp]
   14980:	mov	r2, r0
   14984:	mov	r1, #1
   14988:	mov	r0, r4
   1498c:	bl	110d4 <__fprintf_chk@plt>
   14990:	b	146c4 <__assert_fail@plt+0x3548>
   14994:	ldrdeq	r6, [r1], -r4
   14998:	andeq	r6, r1, r8, ror #27
   1499c:	andeq	r0, r0, r6, ror #15
   149a0:	andeq	r7, r1, r0, asr #1
   149a4:	andeq	r6, r1, ip, ror #27
   149a8:	muleq	r1, r8, lr
   149ac:	andeq	r6, r1, r0, ror #27
   149b0:			; <UNDEFINED> instruction: 0x00016ebc
   149b4:	andeq	r6, r1, ip, asr #29
   149b8:	andeq	r6, r1, r4, ror #29
   149bc:	andeq	r6, r1, r0, lsl #30
   149c0:	andeq	r6, r1, r0, lsr #30
   149c4:	andeq	r6, r1, r4, asr #30
   149c8:	andeq	r6, r1, ip, ror #30
   149cc:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   149d0:	andeq	r6, r1, r8, asr #31
   149d4:	strdeq	r6, [r1], -ip
   149d8:	push	{r4, r5, lr}
   149dc:	sub	sp, sp, #12
   149e0:	ldr	r5, [sp, #24]
   149e4:	ldr	ip, [r5]
   149e8:	cmp	ip, #0
   149ec:	beq	14a1c <__assert_fail@plt+0x38a0>
   149f0:	mov	lr, r5
   149f4:	mov	ip, #0
   149f8:	add	ip, ip, #1
   149fc:	ldr	r4, [lr, #4]!
   14a00:	cmp	r4, #0
   14a04:	bne	149f8 <__assert_fail@plt+0x387c>
   14a08:	str	ip, [sp, #4]
   14a0c:	str	r5, [sp]
   14a10:	bl	145b8 <__assert_fail@plt+0x343c>
   14a14:	add	sp, sp, #12
   14a18:	pop	{r4, r5, pc}
   14a1c:	mov	ip, #0
   14a20:	b	14a08 <__assert_fail@plt+0x388c>
   14a24:	push	{r4, r5, lr}
   14a28:	sub	sp, sp, #52	; 0x34
   14a2c:	ldr	r4, [sp, #64]	; 0x40
   14a30:	sub	r4, r4, #4
   14a34:	add	r5, sp, #4
   14a38:	mov	ip, #0
   14a3c:	ldr	lr, [r4, #4]!
   14a40:	str	lr, [r5, #4]!
   14a44:	cmp	lr, #0
   14a48:	beq	14a58 <__assert_fail@plt+0x38dc>
   14a4c:	add	ip, ip, #1
   14a50:	cmp	ip, #10
   14a54:	bne	14a3c <__assert_fail@plt+0x38c0>
   14a58:	str	ip, [sp, #4]
   14a5c:	add	ip, sp, #8
   14a60:	str	ip, [sp]
   14a64:	bl	145b8 <__assert_fail@plt+0x343c>
   14a68:	add	sp, sp, #52	; 0x34
   14a6c:	pop	{r4, r5, pc}
   14a70:	push	{r3}		; (str r3, [sp, #-4]!)
   14a74:	push	{lr}		; (str lr, [sp, #-4]!)
   14a78:	sub	sp, sp, #16
   14a7c:	add	r3, sp, #24
   14a80:	str	r3, [sp, #12]
   14a84:	str	r3, [sp]
   14a88:	ldr	r3, [sp, #20]
   14a8c:	bl	14a24 <__assert_fail@plt+0x38a8>
   14a90:	add	sp, sp, #16
   14a94:	pop	{lr}		; (ldr lr, [sp], #4)
   14a98:	add	sp, sp, #4
   14a9c:	bx	lr
   14aa0:	push	{r4, lr}
   14aa4:	ldr	r3, [pc, #112]	; 14b1c <__assert_fail@plt+0x39a0>
   14aa8:	ldr	r1, [r3]
   14aac:	mov	r0, #10
   14ab0:	bl	10f54 <fputc_unlocked@plt>
   14ab4:	mov	r2, #5
   14ab8:	ldr	r1, [pc, #96]	; 14b20 <__assert_fail@plt+0x39a4>
   14abc:	mov	r0, #0
   14ac0:	bl	10f60 <dcgettext@plt>
   14ac4:	ldr	r2, [pc, #88]	; 14b24 <__assert_fail@plt+0x39a8>
   14ac8:	mov	r1, r0
   14acc:	mov	r0, #1
   14ad0:	bl	110bc <__printf_chk@plt>
   14ad4:	mov	r2, #5
   14ad8:	ldr	r1, [pc, #72]	; 14b28 <__assert_fail@plt+0x39ac>
   14adc:	mov	r0, #0
   14ae0:	bl	10f60 <dcgettext@plt>
   14ae4:	ldr	r3, [pc, #64]	; 14b2c <__assert_fail@plt+0x39b0>
   14ae8:	ldr	r2, [pc, #64]	; 14b30 <__assert_fail@plt+0x39b4>
   14aec:	mov	r1, r0
   14af0:	mov	r0, #1
   14af4:	bl	110bc <__printf_chk@plt>
   14af8:	mov	r2, #5
   14afc:	ldr	r1, [pc, #48]	; 14b34 <__assert_fail@plt+0x39b8>
   14b00:	mov	r0, #0
   14b04:	bl	10f60 <dcgettext@plt>
   14b08:	ldr	r2, [pc, #40]	; 14b38 <__assert_fail@plt+0x39bc>
   14b0c:	mov	r1, r0
   14b10:	mov	r0, #1
   14b14:	bl	110bc <__printf_chk@plt>
   14b18:	pop	{r4, pc}
   14b1c:	andeq	r8, r2, r4, ror r1
   14b20:	andeq	r7, r1, r8, lsr r0
   14b24:	andeq	r7, r1, ip, asr #32
   14b28:	andeq	r7, r1, r4, rrx
   14b2c:	andeq	r6, r1, r8, ror #17
   14b30:	andeq	r6, r1, r0, lsl r9
   14b34:	andeq	r7, r1, r8, ror r0
   14b38:	andeq	r7, r1, r0, lsr #1
   14b3c:	push	{r4, lr}
   14b40:	bl	156d0 <__assert_fail@plt+0x4554>
   14b44:	cmp	r0, #0
   14b48:	popne	{r4, pc}
   14b4c:	bl	150e0 <__assert_fail@plt+0x3f64>
   14b50:	push	{r4, lr}
   14b54:	bl	156d0 <__assert_fail@plt+0x4554>
   14b58:	cmp	r0, #0
   14b5c:	popne	{r4, pc}
   14b60:	bl	150e0 <__assert_fail@plt+0x3f64>
   14b64:	push	{r4, lr}
   14b68:	bl	14b3c <__assert_fail@plt+0x39c0>
   14b6c:	pop	{r4, pc}
   14b70:	push	{r4, r5, r6, lr}
   14b74:	mov	r5, r0
   14b78:	mov	r4, r1
   14b7c:	bl	15700 <__assert_fail@plt+0x4584>
   14b80:	cmp	r0, #0
   14b84:	popne	{r4, r5, r6, pc}
   14b88:	adds	r4, r4, #0
   14b8c:	movne	r4, #1
   14b90:	cmp	r5, #0
   14b94:	orreq	r4, r4, #1
   14b98:	cmp	r4, #0
   14b9c:	popeq	{r4, r5, r6, pc}
   14ba0:	bl	150e0 <__assert_fail@plt+0x3f64>
   14ba4:	push	{r4, lr}
   14ba8:	cmp	r1, #0
   14bac:	orreq	r1, r1, #1
   14bb0:	bl	15700 <__assert_fail@plt+0x4584>
   14bb4:	cmp	r0, #0
   14bb8:	popne	{r4, pc}
   14bbc:	bl	150e0 <__assert_fail@plt+0x3f64>
   14bc0:	push	{r4, r5, r6, lr}
   14bc4:	mov	r6, r0
   14bc8:	mov	r5, r1
   14bcc:	mov	r4, r2
   14bd0:	bl	15c28 <__assert_fail@plt+0x4aac>
   14bd4:	cmp	r0, #0
   14bd8:	popne	{r4, r5, r6, pc}
   14bdc:	cmp	r6, #0
   14be0:	beq	14bf0 <__assert_fail@plt+0x3a74>
   14be4:	cmp	r5, #0
   14be8:	cmpne	r4, #0
   14bec:	popeq	{r4, r5, r6, pc}
   14bf0:	bl	150e0 <__assert_fail@plt+0x3f64>
   14bf4:	push	{r4, lr}
   14bf8:	bl	14bc0 <__assert_fail@plt+0x3a44>
   14bfc:	pop	{r4, pc}
   14c00:	push	{r4, lr}
   14c04:	mov	ip, r1
   14c08:	mov	r3, r2
   14c0c:	cmp	r2, #0
   14c10:	cmpne	r1, #0
   14c14:	moveq	r3, #1
   14c18:	moveq	ip, r3
   14c1c:	mov	r2, r3
   14c20:	mov	r1, ip
   14c24:	bl	15c28 <__assert_fail@plt+0x4aac>
   14c28:	cmp	r0, #0
   14c2c:	popne	{r4, pc}
   14c30:	bl	150e0 <__assert_fail@plt+0x3f64>
   14c34:	push	{r4, lr}
   14c38:	mov	r2, r1
   14c3c:	mov	r1, r0
   14c40:	mov	r0, #0
   14c44:	bl	14bc0 <__assert_fail@plt+0x3a44>
   14c48:	pop	{r4, pc}
   14c4c:	push	{r4, lr}
   14c50:	mov	r2, r1
   14c54:	mov	r1, r0
   14c58:	mov	r0, #0
   14c5c:	bl	14c00 <__assert_fail@plt+0x3a84>
   14c60:	pop	{r4, pc}
   14c64:	push	{r4, r5, r6, r7, r8, lr}
   14c68:	mov	r5, r1
   14c6c:	mov	r6, r2
   14c70:	ldr	r4, [r1]
   14c74:	subs	r7, r0, #0
   14c78:	beq	14c94 <__assert_fail@plt+0x3b18>
   14c7c:	lsr	r2, r4, #1
   14c80:	add	r3, r2, #1
   14c84:	mvn	r3, r3
   14c88:	cmp	r4, r3
   14c8c:	bls	14cb8 <__assert_fail@plt+0x3b3c>
   14c90:	bl	150e0 <__assert_fail@plt+0x3f64>
   14c94:	cmp	r4, #0
   14c98:	bne	14cc0 <__assert_fail@plt+0x3b44>
   14c9c:	mov	r1, r2
   14ca0:	mov	r0, #64	; 0x40
   14ca4:	bl	15d7c <__assert_fail@plt+0x4c00>
   14ca8:	cmp	r0, #0
   14cac:	movne	r4, r0
   14cb0:	addeq	r4, r0, #1
   14cb4:	b	14cc0 <__assert_fail@plt+0x3b44>
   14cb8:	add	r4, r4, #1
   14cbc:	add	r4, r4, r2
   14cc0:	mov	r2, r6
   14cc4:	mov	r1, r4
   14cc8:	mov	r0, r7
   14ccc:	bl	14bc0 <__assert_fail@plt+0x3a44>
   14cd0:	str	r4, [r5]
   14cd4:	pop	{r4, r5, r6, r7, r8, pc}
   14cd8:	push	{r4, lr}
   14cdc:	mov	r2, #1
   14ce0:	bl	14c64 <__assert_fail@plt+0x3ae8>
   14ce4:	pop	{r4, pc}
   14ce8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14cec:	sub	sp, sp, #12
   14cf0:	mov	fp, r0
   14cf4:	mov	sl, r1
   14cf8:	mov	r9, r2
   14cfc:	mov	r7, r3
   14d00:	ldr	r6, [sp, #48]	; 0x30
   14d04:	ldr	r5, [r1]
   14d08:	asrs	r4, r5, #1
   14d0c:	bmi	14e68 <__assert_fail@plt+0x3cec>
   14d10:	cmp	r5, #0
   14d14:	blt	14e7c <__assert_fail@plt+0x3d00>
   14d18:	mvn	r3, #-2147483648	; 0x80000000
   14d1c:	sub	r3, r3, r4
   14d20:	cmp	r5, r3
   14d24:	movle	r3, #0
   14d28:	movgt	r3, #1
   14d2c:	cmp	r3, #0
   14d30:	addeq	r4, r4, r5
   14d34:	mvnne	r4, #-2147483648	; 0x80000000
   14d38:	mvn	r8, r7
   14d3c:	lsr	r8, r8, #31
   14d40:	cmp	r7, r4
   14d44:	movge	r3, #0
   14d48:	andlt	r3, r8, #1
   14d4c:	cmp	r3, #0
   14d50:	movne	r4, r7
   14d54:	cmp	r6, #0
   14d58:	blt	14e90 <__assert_fail@plt+0x3d14>
   14d5c:	cmp	r6, #0
   14d60:	beq	14f3c <__assert_fail@plt+0x3dc0>
   14d64:	cmp	r4, #0
   14d68:	blt	14eec <__assert_fail@plt+0x3d70>
   14d6c:	mov	r1, r6
   14d70:	mvn	r0, #-2147483648	; 0x80000000
   14d74:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14d78:	cmp	r0, r4
   14d7c:	movge	r0, #0
   14d80:	movlt	r0, #1
   14d84:	cmp	r0, #0
   14d88:	mvnne	r3, #-2147483648	; 0x80000000
   14d8c:	strne	r3, [sp, #4]
   14d90:	beq	14f24 <__assert_fail@plt+0x3da8>
   14d94:	mov	r1, r6
   14d98:	ldr	r0, [sp, #4]
   14d9c:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14da0:	mov	r4, r0
   14da4:	mov	r1, r6
   14da8:	ldr	r0, [sp, #4]
   14dac:	bl	161a8 <__assert_fail@plt+0x502c>
   14db0:	ldr	r3, [sp, #4]
   14db4:	sub	r1, r3, r1
   14db8:	cmp	fp, #0
   14dbc:	moveq	r3, #0
   14dc0:	streq	r3, [sl]
   14dc4:	sub	r3, r4, r5
   14dc8:	cmp	r3, r9
   14dcc:	bge	14e54 <__assert_fail@plt+0x3cd8>
   14dd0:	cmp	r9, #0
   14dd4:	blt	14f48 <__assert_fail@plt+0x3dcc>
   14dd8:	cmp	r5, #0
   14ddc:	blt	14f5c <__assert_fail@plt+0x3de0>
   14de0:	mvn	r3, #-2147483648	; 0x80000000
   14de4:	sub	r3, r3, r9
   14de8:	cmp	r5, r3
   14dec:	movle	r3, #0
   14df0:	movgt	r3, #1
   14df4:	cmp	r3, #0
   14df8:	bne	15004 <__assert_fail@plt+0x3e88>
   14dfc:	add	r5, r5, r9
   14e00:	mov	r4, r5
   14e04:	cmp	r7, r5
   14e08:	movge	r7, #0
   14e0c:	andlt	r7, r8, #1
   14e10:	cmp	r7, #0
   14e14:	bne	15004 <__assert_fail@plt+0x3e88>
   14e18:	cmp	r6, #0
   14e1c:	blt	14f70 <__assert_fail@plt+0x3df4>
   14e20:	cmp	r6, #0
   14e24:	beq	14e50 <__assert_fail@plt+0x3cd4>
   14e28:	cmp	r5, #0
   14e2c:	blt	14fcc <__assert_fail@plt+0x3e50>
   14e30:	mov	r1, r6
   14e34:	mvn	r0, #-2147483648	; 0x80000000
   14e38:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14e3c:	cmp	r5, r0
   14e40:	movle	r0, #0
   14e44:	movgt	r0, #1
   14e48:	cmp	r0, #0
   14e4c:	bne	15004 <__assert_fail@plt+0x3e88>
   14e50:	mul	r1, r5, r6
   14e54:	mov	r0, fp
   14e58:	bl	14b70 <__assert_fail@plt+0x39f4>
   14e5c:	str	r4, [sl]
   14e60:	add	sp, sp, #12
   14e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e68:	rsb	r3, r4, #-2147483648	; 0x80000000
   14e6c:	cmp	r5, r3
   14e70:	movge	r3, #0
   14e74:	movlt	r3, #1
   14e78:	b	14d2c <__assert_fail@plt+0x3bb0>
   14e7c:	rsb	r3, r5, #-2147483648	; 0x80000000
   14e80:	cmp	r4, r3
   14e84:	movge	r3, #0
   14e88:	movlt	r3, #1
   14e8c:	b	14d2c <__assert_fail@plt+0x3bb0>
   14e90:	cmp	r4, #0
   14e94:	blt	14ebc <__assert_fail@plt+0x3d40>
   14e98:	cmn	r6, #1
   14e9c:	beq	14ed8 <__assert_fail@plt+0x3d5c>
   14ea0:	mov	r1, r6
   14ea4:	mov	r0, #-2147483648	; 0x80000000
   14ea8:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14eac:	cmp	r0, r4
   14eb0:	movge	r0, #0
   14eb4:	movlt	r0, #1
   14eb8:	b	14d84 <__assert_fail@plt+0x3c08>
   14ebc:	mov	r1, r6
   14ec0:	mvn	r0, #-2147483648	; 0x80000000
   14ec4:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14ec8:	cmp	r0, r4
   14ecc:	movle	r0, #0
   14ed0:	movgt	r0, #1
   14ed4:	b	14d84 <__assert_fail@plt+0x3c08>
   14ed8:	add	r0, r4, #-2147483648	; 0x80000000
   14edc:	cmp	r0, #0
   14ee0:	movle	r0, #0
   14ee4:	movgt	r0, #1
   14ee8:	b	14d84 <__assert_fail@plt+0x3c08>
   14eec:	cmn	r4, #1
   14ef0:	beq	14f10 <__assert_fail@plt+0x3d94>
   14ef4:	mov	r1, r4
   14ef8:	mov	r0, #-2147483648	; 0x80000000
   14efc:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14f00:	cmp	r6, r0
   14f04:	movle	r0, #0
   14f08:	movgt	r0, #1
   14f0c:	b	14d84 <__assert_fail@plt+0x3c08>
   14f10:	add	r0, r6, #-2147483648	; 0x80000000
   14f14:	cmp	r0, #0
   14f18:	movle	r0, #0
   14f1c:	movgt	r0, #1
   14f20:	b	14d84 <__assert_fail@plt+0x3c08>
   14f24:	mul	r1, r6, r4
   14f28:	cmp	r1, #63	; 0x3f
   14f2c:	movle	r3, #64	; 0x40
   14f30:	strle	r3, [sp, #4]
   14f34:	bgt	14db8 <__assert_fail@plt+0x3c3c>
   14f38:	b	14d94 <__assert_fail@plt+0x3c18>
   14f3c:	mov	r3, #64	; 0x40
   14f40:	str	r3, [sp, #4]
   14f44:	b	14d94 <__assert_fail@plt+0x3c18>
   14f48:	rsb	r3, r9, #-2147483648	; 0x80000000
   14f4c:	cmp	r5, r3
   14f50:	movge	r3, #0
   14f54:	movlt	r3, #1
   14f58:	b	14df4 <__assert_fail@plt+0x3c78>
   14f5c:	rsb	r3, r5, #-2147483648	; 0x80000000
   14f60:	cmp	r9, r3
   14f64:	movge	r3, #0
   14f68:	movlt	r3, #1
   14f6c:	b	14df4 <__assert_fail@plt+0x3c78>
   14f70:	cmp	r5, #0
   14f74:	blt	14f9c <__assert_fail@plt+0x3e20>
   14f78:	cmn	r6, #1
   14f7c:	beq	14fb8 <__assert_fail@plt+0x3e3c>
   14f80:	mov	r1, r6
   14f84:	mov	r0, #-2147483648	; 0x80000000
   14f88:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14f8c:	cmp	r5, r0
   14f90:	movle	r0, #0
   14f94:	movgt	r0, #1
   14f98:	b	14e48 <__assert_fail@plt+0x3ccc>
   14f9c:	mov	r1, r6
   14fa0:	mvn	r0, #-2147483648	; 0x80000000
   14fa4:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14fa8:	cmp	r5, r0
   14fac:	movge	r0, #0
   14fb0:	movlt	r0, #1
   14fb4:	b	14e48 <__assert_fail@plt+0x3ccc>
   14fb8:	add	r0, r5, #-2147483648	; 0x80000000
   14fbc:	cmp	r0, #0
   14fc0:	movle	r0, #0
   14fc4:	movgt	r0, #1
   14fc8:	b	14e48 <__assert_fail@plt+0x3ccc>
   14fcc:	cmn	r5, #1
   14fd0:	beq	14ff0 <__assert_fail@plt+0x3e74>
   14fd4:	mov	r1, r5
   14fd8:	mov	r0, #-2147483648	; 0x80000000
   14fdc:	bl	15f88 <__assert_fail@plt+0x4e0c>
   14fe0:	cmp	r6, r0
   14fe4:	movle	r0, #0
   14fe8:	movgt	r0, #1
   14fec:	b	14e48 <__assert_fail@plt+0x3ccc>
   14ff0:	add	r0, r6, #-2147483648	; 0x80000000
   14ff4:	cmp	r0, #0
   14ff8:	movle	r0, #0
   14ffc:	movgt	r0, #1
   15000:	b	14e48 <__assert_fail@plt+0x3ccc>
   15004:	bl	150e0 <__assert_fail@plt+0x3f64>
   15008:	push	{r4, lr}
   1500c:	bl	15680 <__assert_fail@plt+0x4504>
   15010:	cmp	r0, #0
   15014:	popne	{r4, pc}
   15018:	bl	150e0 <__assert_fail@plt+0x3f64>
   1501c:	push	{r4, lr}
   15020:	mov	r1, #1
   15024:	bl	15008 <__assert_fail@plt+0x3e8c>
   15028:	pop	{r4, pc}
   1502c:	push	{r4, lr}
   15030:	bl	15680 <__assert_fail@plt+0x4504>
   15034:	cmp	r0, #0
   15038:	popne	{r4, pc}
   1503c:	bl	150e0 <__assert_fail@plt+0x3f64>
   15040:	push	{r4, lr}
   15044:	mov	r1, #1
   15048:	bl	1502c <__assert_fail@plt+0x3eb0>
   1504c:	pop	{r4, pc}
   15050:	push	{r4, r5, r6, lr}
   15054:	mov	r5, r0
   15058:	mov	r4, r1
   1505c:	mov	r0, r1
   15060:	bl	14b3c <__assert_fail@plt+0x39c0>
   15064:	mov	r2, r4
   15068:	mov	r1, r5
   1506c:	bl	10f30 <memcpy@plt>
   15070:	pop	{r4, r5, r6, pc}
   15074:	push	{r4, r5, r6, lr}
   15078:	mov	r5, r0
   1507c:	mov	r4, r1
   15080:	mov	r0, r1
   15084:	bl	14b50 <__assert_fail@plt+0x39d4>
   15088:	mov	r2, r4
   1508c:	mov	r1, r5
   15090:	bl	10f30 <memcpy@plt>
   15094:	pop	{r4, r5, r6, pc}
   15098:	push	{r4, r5, r6, lr}
   1509c:	mov	r5, r0
   150a0:	mov	r4, r1
   150a4:	add	r0, r1, #1
   150a8:	bl	14b50 <__assert_fail@plt+0x39d4>
   150ac:	mov	r2, #0
   150b0:	strb	r2, [r0, r4]
   150b4:	mov	r2, r4
   150b8:	mov	r1, r5
   150bc:	bl	10f30 <memcpy@plt>
   150c0:	pop	{r4, r5, r6, pc}
   150c4:	push	{r4, lr}
   150c8:	mov	r4, r0
   150cc:	bl	11068 <strlen@plt>
   150d0:	add	r1, r0, #1
   150d4:	mov	r0, r4
   150d8:	bl	15050 <__assert_fail@plt+0x3ed4>
   150dc:	pop	{r4, pc}
   150e0:	push	{r4, lr}
   150e4:	ldr	r3, [pc, #40]	; 15114 <__assert_fail@plt+0x3f98>
   150e8:	ldr	r4, [r3]
   150ec:	mov	r2, #5
   150f0:	ldr	r1, [pc, #32]	; 15118 <__assert_fail@plt+0x3f9c>
   150f4:	mov	r0, #0
   150f8:	bl	10f60 <dcgettext@plt>
   150fc:	mov	r3, r0
   15100:	ldr	r2, [pc, #20]	; 1511c <__assert_fail@plt+0x3fa0>
   15104:	mov	r1, #0
   15108:	mov	r0, r4
   1510c:	bl	10ff0 <error@plt>
   15110:	bl	11158 <abort@plt>
   15114:	andeq	r8, r2, r8, lsl r1
   15118:	strdeq	r7, [r1], -r0
   1511c:	andeq	r6, r1, r8, lsl #25
   15120:	push	{r4, lr}
   15124:	bl	15a40 <__assert_fail@plt+0x48c4>
   15128:	mov	r4, r0
   1512c:	cmn	r0, #1
   15130:	beq	1513c <__assert_fail@plt+0x3fc0>
   15134:	mov	r0, r4
   15138:	pop	{r4, pc}
   1513c:	bl	11080 <__errno_location@plt>
   15140:	ldr	r3, [r0]
   15144:	cmp	r3, #12
   15148:	bne	15134 <__assert_fail@plt+0x3fb8>
   1514c:	bl	150e0 <__assert_fail@plt+0x3f64>
   15150:	push	{r4, r5, r6, lr}
   15154:	mov	r5, r0
   15158:	subs	r4, r1, #0
   1515c:	blt	151ac <__assert_fail@plt+0x4030>
   15160:	cmp	r4, #0
   15164:	moveq	r0, #0
   15168:	beq	15188 <__assert_fail@plt+0x400c>
   1516c:	mov	r1, r4
   15170:	mvn	r0, #0
   15174:	bl	15d7c <__assert_fail@plt+0x4c00>
   15178:	ldr	r3, [r5]
   1517c:	cmp	r0, r3
   15180:	movcs	r0, #0
   15184:	movcc	r0, #1
   15188:	cmp	r0, #0
   1518c:	mvnne	r3, #0
   15190:	strne	r3, [r5]
   15194:	movne	r0, #1
   15198:	ldreq	r3, [r5]
   1519c:	muleq	r4, r4, r3
   151a0:	streq	r4, [r5]
   151a4:	moveq	r0, #0
   151a8:	pop	{r4, r5, r6, pc}
   151ac:	mov	r1, r4
   151b0:	mov	r0, #0
   151b4:	bl	15f88 <__assert_fail@plt+0x4e0c>
   151b8:	ldr	r3, [r5]
   151bc:	cmp	r0, r3
   151c0:	movcs	r0, #0
   151c4:	movcc	r0, #1
   151c8:	b	15188 <__assert_fail@plt+0x400c>
   151cc:	push	{r4, r5, r6, r7, r8, lr}
   151d0:	subs	r4, r2, #0
   151d4:	beq	15204 <__assert_fail@plt+0x4088>
   151d8:	mov	r7, r1
   151dc:	mov	r6, r0
   151e0:	mov	r5, #0
   151e4:	mov	r1, r7
   151e8:	mov	r0, r6
   151ec:	bl	15150 <__assert_fail@plt+0x3fd4>
   151f0:	orr	r5, r5, r0
   151f4:	subs	r4, r4, #1
   151f8:	bne	151e4 <__assert_fail@plt+0x4068>
   151fc:	mov	r0, r5
   15200:	pop	{r4, r5, r6, r7, r8, pc}
   15204:	mov	r5, #0
   15208:	b	151fc <__assert_fail@plt+0x4080>
   1520c:	push	{r4, r5, r6, r7, r8, r9, lr}
   15210:	sub	sp, sp, #12
   15214:	cmp	r2, #36	; 0x24
   15218:	bhi	15258 <__assert_fail@plt+0x40dc>
   1521c:	mov	r5, r0
   15220:	mov	r6, r1
   15224:	mov	r7, r2
   15228:	mov	r9, r3
   1522c:	cmp	r1, #0
   15230:	addeq	r6, sp, #4
   15234:	bl	11080 <__errno_location@plt>
   15238:	mov	r8, r0
   1523c:	mov	r3, #0
   15240:	str	r3, [r0]
   15244:	ldrb	r4, [r5]
   15248:	bl	11044 <__ctype_b_loc@plt>
   1524c:	ldr	r1, [r0]
   15250:	mov	r2, r5
   15254:	b	15270 <__assert_fail@plt+0x40f4>
   15258:	ldr	r3, [pc, #1044]	; 15674 <__assert_fail@plt+0x44f8>
   1525c:	mov	r2, #85	; 0x55
   15260:	ldr	r1, [pc, #1040]	; 15678 <__assert_fail@plt+0x44fc>
   15264:	ldr	r0, [pc, #1040]	; 1567c <__assert_fail@plt+0x4500>
   15268:	bl	1117c <__assert_fail@plt>
   1526c:	ldrb	r4, [r2, #1]!
   15270:	lsl	r3, r4, #1
   15274:	ldrh	r3, [r1, r3]
   15278:	tst	r3, #8192	; 0x2000
   1527c:	bne	1526c <__assert_fail@plt+0x40f0>
   15280:	cmp	r4, #45	; 0x2d
   15284:	moveq	r4, #4
   15288:	bne	15298 <__assert_fail@plt+0x411c>
   1528c:	mov	r0, r4
   15290:	add	sp, sp, #12
   15294:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15298:	mov	r2, r7
   1529c:	mov	r1, r6
   152a0:	mov	r0, r5
   152a4:	bl	1105c <strtoul@plt>
   152a8:	str	r0, [sp]
   152ac:	ldr	r7, [r6]
   152b0:	cmp	r5, r7
   152b4:	beq	152d8 <__assert_fail@plt+0x415c>
   152b8:	ldr	r3, [r8]
   152bc:	cmp	r3, #0
   152c0:	beq	1531c <__assert_fail@plt+0x41a0>
   152c4:	cmp	r3, #34	; 0x22
   152c8:	moveq	r4, #1
   152cc:	beq	15320 <__assert_fail@plt+0x41a4>
   152d0:	mov	r4, #4
   152d4:	b	1528c <__assert_fail@plt+0x4110>
   152d8:	ldr	r3, [sp, #40]	; 0x28
   152dc:	cmp	r3, #0
   152e0:	moveq	r4, #4
   152e4:	beq	1528c <__assert_fail@plt+0x4110>
   152e8:	ldrb	r1, [r7]
   152ec:	cmp	r1, #0
   152f0:	moveq	r4, #4
   152f4:	beq	1528c <__assert_fail@plt+0x4110>
   152f8:	mov	r0, r3
   152fc:	bl	11074 <strchr@plt>
   15300:	cmp	r0, #0
   15304:	moveq	r4, #4
   15308:	beq	1528c <__assert_fail@plt+0x4110>
   1530c:	mov	r3, #1
   15310:	str	r3, [sp]
   15314:	mov	r4, #0
   15318:	b	15330 <__assert_fail@plt+0x41b4>
   1531c:	mov	r4, #0
   15320:	ldr	r3, [sp, #40]	; 0x28
   15324:	cmp	r3, #0
   15328:	streq	r0, [r9]
   1532c:	beq	1528c <__assert_fail@plt+0x4110>
   15330:	ldrb	r5, [r7]
   15334:	cmp	r5, #0
   15338:	beq	155b0 <__assert_fail@plt+0x4434>
   1533c:	mov	r1, r5
   15340:	ldr	r0, [sp, #40]	; 0x28
   15344:	bl	11074 <strchr@plt>
   15348:	cmp	r0, #0
   1534c:	beq	15420 <__assert_fail@plt+0x42a4>
   15350:	sub	r3, r5, #69	; 0x45
   15354:	cmp	r3, #47	; 0x2f
   15358:	ldrls	pc, [pc, r3, lsl #2]
   1535c:	b	1548c <__assert_fail@plt+0x4310>
   15360:	andeq	r5, r1, r0, lsr r4
   15364:	andeq	r5, r1, ip, lsl #9
   15368:	andeq	r5, r1, r0, lsr r4
   1536c:	andeq	r5, r1, ip, lsl #9
   15370:	andeq	r5, r1, ip, lsl #9
   15374:	andeq	r5, r1, ip, lsl #9
   15378:	andeq	r5, r1, r0, lsr r4
   1537c:	andeq	r5, r1, ip, lsl #9
   15380:	andeq	r5, r1, r0, lsr r4
   15384:	andeq	r5, r1, ip, lsl #9
   15388:	andeq	r5, r1, ip, lsl #9
   1538c:	andeq	r5, r1, r0, lsr r4
   15390:	andeq	r5, r1, ip, lsl #9
   15394:	andeq	r5, r1, ip, lsl #9
   15398:	andeq	r5, r1, ip, lsl #9
   1539c:	andeq	r5, r1, r0, lsr r4
   153a0:	andeq	r5, r1, ip, lsl #9
   153a4:	andeq	r5, r1, ip, lsl #9
   153a8:	andeq	r5, r1, ip, lsl #9
   153ac:	andeq	r5, r1, ip, lsl #9
   153b0:	andeq	r5, r1, r0, lsr r4
   153b4:	andeq	r5, r1, r0, lsr r4
   153b8:	andeq	r5, r1, ip, lsl #9
   153bc:	andeq	r5, r1, ip, lsl #9
   153c0:	andeq	r5, r1, ip, lsl #9
   153c4:	andeq	r5, r1, ip, lsl #9
   153c8:	andeq	r5, r1, ip, lsl #9
   153cc:	andeq	r5, r1, ip, lsl #9
   153d0:	andeq	r5, r1, ip, lsl #9
   153d4:	andeq	r5, r1, ip, lsl #9
   153d8:	andeq	r5, r1, ip, lsl #9
   153dc:	andeq	r5, r1, ip, lsl #9
   153e0:	andeq	r5, r1, ip, lsl #9
   153e4:	andeq	r5, r1, ip, lsl #9
   153e8:	andeq	r5, r1, r0, lsr r4
   153ec:	andeq	r5, r1, ip, lsl #9
   153f0:	andeq	r5, r1, ip, lsl #9
   153f4:	andeq	r5, r1, ip, lsl #9
   153f8:	andeq	r5, r1, r0, lsr r4
   153fc:	andeq	r5, r1, ip, lsl #9
   15400:	andeq	r5, r1, r0, lsr r4
   15404:	andeq	r5, r1, ip, lsl #9
   15408:	andeq	r5, r1, ip, lsl #9
   1540c:	andeq	r5, r1, ip, lsl #9
   15410:	andeq	r5, r1, ip, lsl #9
   15414:	andeq	r5, r1, ip, lsl #9
   15418:	andeq	r5, r1, ip, lsl #9
   1541c:	andeq	r5, r1, r0, lsr r4
   15420:	ldr	r3, [sp]
   15424:	str	r3, [r9]
   15428:	orr	r4, r4, #2
   1542c:	b	1528c <__assert_fail@plt+0x4110>
   15430:	mov	r1, #48	; 0x30
   15434:	ldr	r0, [sp, #40]	; 0x28
   15438:	bl	11074 <strchr@plt>
   1543c:	cmp	r0, #0
   15440:	beq	1557c <__assert_fail@plt+0x4400>
   15444:	ldrb	r3, [r7, #1]
   15448:	cmp	r3, #68	; 0x44
   1544c:	beq	15468 <__assert_fail@plt+0x42ec>
   15450:	cmp	r3, #105	; 0x69
   15454:	beq	15474 <__assert_fail@plt+0x42f8>
   15458:	cmp	r3, #66	; 0x42
   1545c:	movne	r7, #1
   15460:	movne	r1, #1024	; 0x400
   15464:	bne	15494 <__assert_fail@plt+0x4318>
   15468:	mov	r7, #2
   1546c:	mov	r1, #1000	; 0x3e8
   15470:	b	15494 <__assert_fail@plt+0x4318>
   15474:	ldrb	r7, [r7, #2]
   15478:	cmp	r7, #66	; 0x42
   1547c:	movne	r7, #1
   15480:	moveq	r7, #3
   15484:	mov	r1, #1024	; 0x400
   15488:	b	15494 <__assert_fail@plt+0x4318>
   1548c:	mov	r7, #1
   15490:	mov	r1, #1024	; 0x400
   15494:	sub	r5, r5, #66	; 0x42
   15498:	cmp	r5, #53	; 0x35
   1549c:	ldrls	pc, [pc, r5, lsl #2]
   154a0:	b	1565c <__assert_fail@plt+0x44e0>
   154a4:			; <UNDEFINED> instruction: 0x000155bc
   154a8:	andeq	r5, r1, ip, asr r6
   154ac:	andeq	r5, r1, ip, asr r6
   154b0:	andeq	r5, r1, ip, asr #11
   154b4:	andeq	r5, r1, ip, asr r6
   154b8:	ldrdeq	r5, [r1], -ip
   154bc:	andeq	r5, r1, ip, asr r6
   154c0:	andeq	r5, r1, ip, asr r6
   154c4:	andeq	r5, r1, ip, asr r6
   154c8:	andeq	r5, r1, ip, ror #11
   154cc:	andeq	r5, r1, ip, asr r6
   154d0:	strdeq	r5, [r1], -ip
   154d4:	andeq	r5, r1, ip, asr r6
   154d8:	andeq	r5, r1, ip, asr r6
   154dc:	andeq	r5, r1, ip, lsl #12
   154e0:	andeq	r5, r1, ip, asr r6
   154e4:	andeq	r5, r1, ip, asr r6
   154e8:	andeq	r5, r1, ip, asr r6
   154ec:	andeq	r5, r1, ip, lsl r6
   154f0:	andeq	r5, r1, ip, asr r6
   154f4:	andeq	r5, r1, ip, asr r6
   154f8:	andeq	r5, r1, ip, asr r6
   154fc:	andeq	r5, r1, ip, asr r6
   15500:	andeq	r5, r1, ip, lsr r6
   15504:	andeq	r5, r1, ip, asr #12
   15508:	andeq	r5, r1, ip, asr r6
   1550c:	andeq	r5, r1, ip, asr r6
   15510:	andeq	r5, r1, ip, asr r6
   15514:	andeq	r5, r1, ip, asr r6
   15518:	andeq	r5, r1, ip, asr r6
   1551c:	andeq	r5, r1, ip, asr r6
   15520:	andeq	r5, r1, ip, asr r6
   15524:	andeq	r5, r1, r8, lsl #11
   15528:	andeq	r5, r1, ip, ror #12
   1552c:	andeq	r5, r1, ip, asr r6
   15530:	andeq	r5, r1, ip, asr r6
   15534:	andeq	r5, r1, ip, asr r6
   15538:	ldrdeq	r5, [r1], -ip
   1553c:	andeq	r5, r1, ip, asr r6
   15540:	andeq	r5, r1, ip, asr r6
   15544:	andeq	r5, r1, ip, asr r6
   15548:	andeq	r5, r1, ip, ror #11
   1554c:	andeq	r5, r1, ip, asr r6
   15550:	strdeq	r5, [r1], -ip
   15554:	andeq	r5, r1, ip, asr r6
   15558:	andeq	r5, r1, ip, asr r6
   1555c:	andeq	r5, r1, ip, asr r6
   15560:	andeq	r5, r1, ip, asr r6
   15564:	andeq	r5, r1, ip, asr r6
   15568:	andeq	r5, r1, ip, asr r6
   1556c:	andeq	r5, r1, ip, lsl r6
   15570:	andeq	r5, r1, ip, asr r6
   15574:	andeq	r5, r1, ip, asr r6
   15578:	andeq	r5, r1, ip, lsr #12
   1557c:	mov	r7, #1
   15580:	mov	r1, #1024	; 0x400
   15584:	b	15494 <__assert_fail@plt+0x4318>
   15588:	mov	r1, #512	; 0x200
   1558c:	mov	r0, sp
   15590:	bl	15150 <__assert_fail@plt+0x3fd4>
   15594:	orr	r4, r4, r0
   15598:	ldr	r3, [r6]
   1559c:	add	r2, r3, r7
   155a0:	str	r2, [r6]
   155a4:	ldrb	r3, [r3, r7]
   155a8:	cmp	r3, #0
   155ac:	orrne	r4, r4, #2
   155b0:	ldr	r3, [sp]
   155b4:	str	r3, [r9]
   155b8:	b	1528c <__assert_fail@plt+0x4110>
   155bc:	mov	r1, #1024	; 0x400
   155c0:	mov	r0, sp
   155c4:	bl	15150 <__assert_fail@plt+0x3fd4>
   155c8:	b	15594 <__assert_fail@plt+0x4418>
   155cc:	mov	r2, #6
   155d0:	mov	r0, sp
   155d4:	bl	151cc <__assert_fail@plt+0x4050>
   155d8:	b	15594 <__assert_fail@plt+0x4418>
   155dc:	mov	r2, #3
   155e0:	mov	r0, sp
   155e4:	bl	151cc <__assert_fail@plt+0x4050>
   155e8:	b	15594 <__assert_fail@plt+0x4418>
   155ec:	mov	r2, #1
   155f0:	mov	r0, sp
   155f4:	bl	151cc <__assert_fail@plt+0x4050>
   155f8:	b	15594 <__assert_fail@plt+0x4418>
   155fc:	mov	r2, #2
   15600:	mov	r0, sp
   15604:	bl	151cc <__assert_fail@plt+0x4050>
   15608:	b	15594 <__assert_fail@plt+0x4418>
   1560c:	mov	r2, #5
   15610:	mov	r0, sp
   15614:	bl	151cc <__assert_fail@plt+0x4050>
   15618:	b	15594 <__assert_fail@plt+0x4418>
   1561c:	mov	r2, #4
   15620:	mov	r0, sp
   15624:	bl	151cc <__assert_fail@plt+0x4050>
   15628:	b	15594 <__assert_fail@plt+0x4418>
   1562c:	mov	r1, #2
   15630:	mov	r0, sp
   15634:	bl	15150 <__assert_fail@plt+0x3fd4>
   15638:	b	15594 <__assert_fail@plt+0x4418>
   1563c:	mov	r2, #8
   15640:	mov	r0, sp
   15644:	bl	151cc <__assert_fail@plt+0x4050>
   15648:	b	15594 <__assert_fail@plt+0x4418>
   1564c:	mov	r2, #7
   15650:	mov	r0, sp
   15654:	bl	151cc <__assert_fail@plt+0x4050>
   15658:	b	15594 <__assert_fail@plt+0x4418>
   1565c:	ldr	r3, [sp]
   15660:	str	r3, [r9]
   15664:	orr	r4, r4, #2
   15668:	b	1528c <__assert_fail@plt+0x4110>
   1566c:	mov	r0, #0
   15670:	b	15594 <__assert_fail@plt+0x4418>
   15674:	andeq	r7, r1, r4, lsl #2
   15678:	andeq	r7, r1, r0, lsl r1
   1567c:	andeq	r7, r1, r0, lsr #2
   15680:	push	{r4, lr}
   15684:	mov	r2, r0
   15688:	mov	r3, r1
   1568c:	cmp	r1, #0
   15690:	cmpne	r0, #0
   15694:	moveq	r3, #1
   15698:	moveq	r2, r3
   1569c:	umull	r0, r1, r2, r3
   156a0:	cmp	r0, #0
   156a4:	cmpge	r1, #0
   156a8:	bne	156bc <__assert_fail@plt+0x4540>
   156ac:	mov	r1, r3
   156b0:	mov	r0, r2
   156b4:	bl	10ea0 <calloc@plt>
   156b8:	pop	{r4, pc}
   156bc:	bl	11080 <__errno_location@plt>
   156c0:	mov	r3, #12
   156c4:	str	r3, [r0]
   156c8:	mov	r0, #0
   156cc:	pop	{r4, pc}
   156d0:	push	{r4, lr}
   156d4:	cmp	r0, #0
   156d8:	moveq	r0, #1
   156dc:	cmp	r0, #0
   156e0:	blt	156ec <__assert_fail@plt+0x4570>
   156e4:	bl	11008 <malloc@plt>
   156e8:	pop	{r4, pc}
   156ec:	bl	11080 <__errno_location@plt>
   156f0:	mov	r3, #12
   156f4:	str	r3, [r0]
   156f8:	mov	r0, #0
   156fc:	pop	{r4, pc}
   15700:	push	{r4, lr}
   15704:	cmp	r0, #0
   15708:	beq	15724 <__assert_fail@plt+0x45a8>
   1570c:	cmp	r1, #0
   15710:	beq	15730 <__assert_fail@plt+0x45b4>
   15714:	cmp	r1, #0
   15718:	blt	1573c <__assert_fail@plt+0x45c0>
   1571c:	bl	10f6c <realloc@plt>
   15720:	pop	{r4, pc}
   15724:	mov	r0, r1
   15728:	bl	156d0 <__assert_fail@plt+0x4554>
   1572c:	pop	{r4, pc}
   15730:	bl	125ec <__assert_fail@plt+0x1470>
   15734:	mov	r0, #0
   15738:	pop	{r4, pc}
   1573c:	bl	11080 <__errno_location@plt>
   15740:	mov	r3, #12
   15744:	str	r3, [r0]
   15748:	mov	r0, #0
   1574c:	pop	{r4, pc}
   15750:	push	{r4, r5, r6, lr}
   15754:	mov	r5, r0
   15758:	bl	10fd8 <__fpending@plt>
   1575c:	mov	r6, r0
   15760:	ldr	r4, [r5]
   15764:	and	r4, r4, #32
   15768:	mov	r0, r5
   1576c:	bl	157c8 <__assert_fail@plt+0x464c>
   15770:	cmp	r4, #0
   15774:	bne	1579c <__assert_fail@plt+0x4620>
   15778:	cmp	r0, #0
   1577c:	popeq	{r4, r5, r6, pc}
   15780:	cmp	r6, #0
   15784:	bne	157b8 <__assert_fail@plt+0x463c>
   15788:	bl	11080 <__errno_location@plt>
   1578c:	ldr	r0, [r0]
   15790:	subs	r0, r0, #9
   15794:	mvnne	r0, #0
   15798:	pop	{r4, r5, r6, pc}
   1579c:	cmp	r0, #0
   157a0:	bne	157c0 <__assert_fail@plt+0x4644>
   157a4:	bl	11080 <__errno_location@plt>
   157a8:	mov	r3, #0
   157ac:	str	r3, [r0]
   157b0:	mvn	r0, #0
   157b4:	pop	{r4, r5, r6, pc}
   157b8:	mvn	r0, #0
   157bc:	pop	{r4, r5, r6, pc}
   157c0:	mvn	r0, #0
   157c4:	pop	{r4, r5, r6, pc}
   157c8:	push	{r4, r5, r6, lr}
   157cc:	sub	sp, sp, #8
   157d0:	mov	r4, r0
   157d4:	bl	110c8 <fileno@plt>
   157d8:	cmp	r0, #0
   157dc:	blt	15854 <__assert_fail@plt+0x46d8>
   157e0:	mov	r0, r4
   157e4:	bl	11020 <__freading@plt>
   157e8:	cmp	r0, #0
   157ec:	beq	15820 <__assert_fail@plt+0x46a4>
   157f0:	mov	r0, r4
   157f4:	bl	110c8 <fileno@plt>
   157f8:	mov	r3, #1
   157fc:	str	r3, [sp]
   15800:	mov	r2, #0
   15804:	mov	r3, #0
   15808:	bl	10fb4 <lseek64@plt>
   1580c:	mvn	r2, #0
   15810:	mvn	r3, #0
   15814:	cmp	r1, r3
   15818:	cmpeq	r0, r2
   1581c:	beq	15860 <__assert_fail@plt+0x46e4>
   15820:	mov	r0, r4
   15824:	bl	15870 <__assert_fail@plt+0x46f4>
   15828:	cmp	r0, #0
   1582c:	beq	15860 <__assert_fail@plt+0x46e4>
   15830:	bl	11080 <__errno_location@plt>
   15834:	mov	r5, r0
   15838:	ldr	r6, [r0]
   1583c:	mov	r0, r4
   15840:	bl	110e0 <fclose@plt>
   15844:	cmp	r6, #0
   15848:	strne	r6, [r5]
   1584c:	mvnne	r0, #0
   15850:	b	15868 <__assert_fail@plt+0x46ec>
   15854:	mov	r0, r4
   15858:	bl	110e0 <fclose@plt>
   1585c:	b	15868 <__assert_fail@plt+0x46ec>
   15860:	mov	r0, r4
   15864:	bl	110e0 <fclose@plt>
   15868:	add	sp, sp, #8
   1586c:	pop	{r4, r5, r6, pc}
   15870:	push	{r4, lr}
   15874:	sub	sp, sp, #8
   15878:	subs	r4, r0, #0
   1587c:	beq	15890 <__assert_fail@plt+0x4714>
   15880:	mov	r0, r4
   15884:	bl	11020 <__freading@plt>
   15888:	cmp	r0, #0
   1588c:	bne	158a0 <__assert_fail@plt+0x4724>
   15890:	mov	r0, r4
   15894:	bl	10f00 <fflush@plt>
   15898:	add	sp, sp, #8
   1589c:	pop	{r4, pc}
   158a0:	ldr	r3, [r4]
   158a4:	tst	r3, #256	; 0x100
   158a8:	bne	158b8 <__assert_fail@plt+0x473c>
   158ac:	mov	r0, r4
   158b0:	bl	10f00 <fflush@plt>
   158b4:	b	15898 <__assert_fail@plt+0x471c>
   158b8:	mov	r3, #1
   158bc:	str	r3, [sp]
   158c0:	mov	r2, #0
   158c4:	mov	r3, #0
   158c8:	mov	r0, r4
   158cc:	bl	158d4 <__assert_fail@plt+0x4758>
   158d0:	b	158ac <__assert_fail@plt+0x4730>
   158d4:	push	{r4, r5, r6, r7, lr}
   158d8:	sub	sp, sp, #12
   158dc:	mov	r4, r0
   158e0:	mov	r6, r2
   158e4:	mov	r7, r3
   158e8:	ldr	r5, [sp, #32]
   158ec:	ldr	r2, [r0, #8]
   158f0:	ldr	r3, [r0, #4]
   158f4:	cmp	r2, r3
   158f8:	beq	15918 <__assert_fail@plt+0x479c>
   158fc:	str	r5, [sp]
   15900:	mov	r2, r6
   15904:	mov	r3, r7
   15908:	mov	r0, r4
   1590c:	bl	110ec <fseeko64@plt>
   15910:	add	sp, sp, #12
   15914:	pop	{r4, r5, r6, r7, pc}
   15918:	ldr	r2, [r0, #20]
   1591c:	ldr	r3, [r0, #16]
   15920:	cmp	r2, r3
   15924:	bne	158fc <__assert_fail@plt+0x4780>
   15928:	ldr	r3, [r0, #36]	; 0x24
   1592c:	cmp	r3, #0
   15930:	bne	158fc <__assert_fail@plt+0x4780>
   15934:	bl	110c8 <fileno@plt>
   15938:	str	r5, [sp]
   1593c:	mov	r2, r6
   15940:	mov	r3, r7
   15944:	bl	10fb4 <lseek64@plt>
   15948:	mvn	r2, #0
   1594c:	mvn	r3, #0
   15950:	cmp	r1, r3
   15954:	cmpeq	r0, r2
   15958:	beq	15974 <__assert_fail@plt+0x47f8>
   1595c:	ldr	r3, [r4]
   15960:	bic	r3, r3, #16
   15964:	str	r3, [r4]
   15968:	strd	r0, [r4, #80]	; 0x50
   1596c:	mov	r0, #0
   15970:	b	15910 <__assert_fail@plt+0x4794>
   15974:	mvn	r0, #0
   15978:	b	15910 <__assert_fail@plt+0x4794>
   1597c:	push	{r4, lr}
   15980:	mov	r0, #14
   15984:	bl	11128 <nl_langinfo@plt>
   15988:	cmp	r0, #0
   1598c:	beq	159a4 <__assert_fail@plt+0x4828>
   15990:	ldrb	r2, [r0]
   15994:	ldr	r3, [pc, #16]	; 159ac <__assert_fail@plt+0x4830>
   15998:	cmp	r2, #0
   1599c:	moveq	r0, r3
   159a0:	pop	{r4, pc}
   159a4:	ldr	r0, [pc]	; 159ac <__assert_fail@plt+0x4830>
   159a8:	pop	{r4, pc}
   159ac:	andeq	r7, r1, r8, asr #2
   159b0:	push	{r4, r5, r6, r7, lr}
   159b4:	sub	sp, sp, #12
   159b8:	mov	r7, r1
   159bc:	mov	r5, r2
   159c0:	subs	r6, r0, #0
   159c4:	addeq	r6, sp, #4
   159c8:	mov	r0, r6
   159cc:	bl	10fe4 <mbrtowc@plt>
   159d0:	mov	r4, r0
   159d4:	cmp	r5, #0
   159d8:	cmnne	r0, #3
   159dc:	bhi	159ec <__assert_fail@plt+0x4870>
   159e0:	mov	r0, r4
   159e4:	add	sp, sp, #12
   159e8:	pop	{r4, r5, r6, r7, pc}
   159ec:	mov	r0, #0
   159f0:	bl	15c74 <__assert_fail@plt+0x4af8>
   159f4:	cmp	r0, #0
   159f8:	ldrbeq	r3, [r7]
   159fc:	streq	r3, [r6]
   15a00:	moveq	r4, #1
   15a04:	b	159e0 <__assert_fail@plt+0x4864>
   15a08:	push	{r4, lr}
   15a0c:	lsr	r3, r1, #30
   15a10:	lsl	r2, r1, #2
   15a14:	cmp	r2, #0
   15a18:	cmpge	r3, #0
   15a1c:	bne	15a2c <__assert_fail@plt+0x48b0>
   15a20:	lsl	r1, r1, #2
   15a24:	bl	15700 <__assert_fail@plt+0x4584>
   15a28:	pop	{r4, pc}
   15a2c:	bl	11080 <__errno_location@plt>
   15a30:	mov	r3, #12
   15a34:	str	r3, [r0]
   15a38:	mov	r0, #0
   15a3c:	pop	{r4, pc}
   15a40:	push	{r4, r5, r6, r7, r8, lr}
   15a44:	sub	sp, sp, #8
   15a48:	mov	r6, r1
   15a4c:	mov	r8, r2
   15a50:	subs	r7, r0, #0
   15a54:	beq	15af4 <__assert_fail@plt+0x4978>
   15a58:	mov	r1, #10
   15a5c:	str	r1, [sp, #4]
   15a60:	mov	r0, #0
   15a64:	bl	15a08 <__assert_fail@plt+0x488c>
   15a68:	subs	r4, r0, #0
   15a6c:	bne	15aa0 <__assert_fail@plt+0x4924>
   15a70:	mvn	r0, #0
   15a74:	b	15ae0 <__assert_fail@plt+0x4964>
   15a78:	ldr	r3, [sp, #4]
   15a7c:	cmp	r5, r3
   15a80:	lsleq	r5, r5, #1
   15a84:	streq	r5, [sp, #4]
   15a88:	ldr	r1, [sp, #4]
   15a8c:	mov	r0, r4
   15a90:	bl	15a08 <__assert_fail@plt+0x488c>
   15a94:	cmp	r0, #0
   15a98:	beq	15ad4 <__assert_fail@plt+0x4958>
   15a9c:	mov	r4, r0
   15aa0:	ldr	r5, [sp, #4]
   15aa4:	add	r3, sp, #4
   15aa8:	mov	r2, r4
   15aac:	mov	r1, r6
   15ab0:	mov	r0, r7
   15ab4:	bl	110a4 <getgrouplist@plt>
   15ab8:	cmp	r0, #0
   15abc:	blt	15a78 <__assert_fail@plt+0x48fc>
   15ac0:	ldr	r1, [sp, #4]
   15ac4:	mov	r0, r4
   15ac8:	bl	15a08 <__assert_fail@plt+0x488c>
   15acc:	cmp	r0, #0
   15ad0:	bne	15ae8 <__assert_fail@plt+0x496c>
   15ad4:	mov	r0, r4
   15ad8:	bl	125ec <__assert_fail@plt+0x1470>
   15adc:	mvn	r0, #0
   15ae0:	add	sp, sp, #8
   15ae4:	pop	{r4, r5, r6, r7, r8, pc}
   15ae8:	str	r0, [r8]
   15aec:	ldr	r0, [sp, #4]
   15af0:	b	15ae0 <__assert_fail@plt+0x4964>
   15af4:	mov	r1, #0
   15af8:	mov	r0, r1
   15afc:	bl	11134 <getgroups@plt>
   15b00:	str	r0, [sp, #4]
   15b04:	cmp	r0, #0
   15b08:	blt	15b8c <__assert_fail@plt+0x4a10>
   15b0c:	adds	r5, r6, #1
   15b10:	movne	r5, #1
   15b14:	cmp	r0, #0
   15b18:	movne	r3, r5
   15b1c:	orreq	r3, r5, #1
   15b20:	cmp	r3, #0
   15b24:	addne	r0, r0, #1
   15b28:	strne	r0, [sp, #4]
   15b2c:	ldr	r1, [sp, #4]
   15b30:	mov	r0, #0
   15b34:	bl	15a08 <__assert_fail@plt+0x488c>
   15b38:	subs	r4, r0, #0
   15b3c:	beq	15c00 <__assert_fail@plt+0x4a84>
   15b40:	ldr	r0, [sp, #4]
   15b44:	sub	r0, r0, r5
   15b48:	cmn	r6, #1
   15b4c:	beq	15c08 <__assert_fail@plt+0x4a8c>
   15b50:	add	r1, r4, #4
   15b54:	bl	11134 <getgroups@plt>
   15b58:	cmp	r0, #0
   15b5c:	strge	r6, [r4]
   15b60:	addge	r0, r0, #1
   15b64:	blt	15c18 <__assert_fail@plt+0x4a9c>
   15b68:	str	r4, [r8]
   15b6c:	cmp	r0, #1
   15b70:	ble	15ae0 <__assert_fail@plt+0x4964>
   15b74:	ldr	lr, [r4]
   15b78:	add	ip, r4, r0, lsl #2
   15b7c:	add	r3, r4, #4
   15b80:	cmp	ip, r3
   15b84:	bhi	15bd4 <__assert_fail@plt+0x4a58>
   15b88:	b	15ae0 <__assert_fail@plt+0x4964>
   15b8c:	bl	11080 <__errno_location@plt>
   15b90:	ldr	r3, [r0]
   15b94:	cmp	r3, #38	; 0x26
   15b98:	mvnne	r0, #0
   15b9c:	bne	15ae0 <__assert_fail@plt+0x4964>
   15ba0:	mov	r1, #1
   15ba4:	mov	r0, #0
   15ba8:	bl	15a08 <__assert_fail@plt+0x488c>
   15bac:	cmp	r0, #0
   15bb0:	beq	15bf8 <__assert_fail@plt+0x4a7c>
   15bb4:	str	r0, [r8]
   15bb8:	str	r6, [r0]
   15bbc:	adds	r0, r6, #1
   15bc0:	movne	r0, #1
   15bc4:	b	15ae0 <__assert_fail@plt+0x4964>
   15bc8:	sub	r0, r0, #1
   15bcc:	cmp	ip, r3
   15bd0:	bls	15ae0 <__assert_fail@plt+0x4964>
   15bd4:	ldr	r2, [r3], #4
   15bd8:	cmp	lr, r2
   15bdc:	beq	15bc8 <__assert_fail@plt+0x4a4c>
   15be0:	ldr	r1, [r4]
   15be4:	cmp	r2, r1
   15be8:	strne	r2, [r4, #4]
   15bec:	addne	r4, r4, #4
   15bf0:	bne	15bcc <__assert_fail@plt+0x4a50>
   15bf4:	b	15bc8 <__assert_fail@plt+0x4a4c>
   15bf8:	mvn	r0, #0
   15bfc:	b	15ae0 <__assert_fail@plt+0x4964>
   15c00:	mvn	r0, #0
   15c04:	b	15ae0 <__assert_fail@plt+0x4964>
   15c08:	mov	r1, r4
   15c0c:	bl	11134 <getgroups@plt>
   15c10:	cmp	r0, #0
   15c14:	bge	15b68 <__assert_fail@plt+0x49ec>
   15c18:	mov	r0, r4
   15c1c:	bl	125ec <__assert_fail@plt+0x1470>
   15c20:	mvn	r0, #0
   15c24:	b	15ae0 <__assert_fail@plt+0x4964>
   15c28:	push	{r4, r5, r6, lr}
   15c2c:	mov	r6, r0
   15c30:	mov	r5, r1
   15c34:	subs	r4, r2, #0
   15c38:	beq	15c64 <__assert_fail@plt+0x4ae8>
   15c3c:	mov	r1, r4
   15c40:	mvn	r0, #0
   15c44:	bl	15d7c <__assert_fail@plt+0x4c00>
   15c48:	cmp	r0, r5
   15c4c:	bcs	15c64 <__assert_fail@plt+0x4ae8>
   15c50:	bl	11080 <__errno_location@plt>
   15c54:	mov	r3, #12
   15c58:	str	r3, [r0]
   15c5c:	mov	r0, #0
   15c60:	pop	{r4, r5, r6, pc}
   15c64:	mul	r1, r5, r4
   15c68:	mov	r0, r6
   15c6c:	bl	15700 <__assert_fail@plt+0x4584>
   15c70:	pop	{r4, r5, r6, pc}
   15c74:	push	{lr}		; (str lr, [sp, #-4]!)
   15c78:	sub	sp, sp, #268	; 0x10c
   15c7c:	ldr	r2, [pc, #68]	; 15cc8 <__assert_fail@plt+0x4b4c>
   15c80:	add	r1, sp, #4
   15c84:	bl	15cd4 <__assert_fail@plt+0x4b58>
   15c88:	cmp	r0, #0
   15c8c:	movne	r0, #0
   15c90:	bne	15cc0 <__assert_fail@plt+0x4b44>
   15c94:	ldr	r1, [pc, #48]	; 15ccc <__assert_fail@plt+0x4b50>
   15c98:	add	r0, sp, #4
   15c9c:	bl	10ee8 <strcmp@plt>
   15ca0:	cmp	r0, #0
   15ca4:	moveq	r0, #0
   15ca8:	beq	15cc0 <__assert_fail@plt+0x4b44>
   15cac:	ldr	r1, [pc, #28]	; 15cd0 <__assert_fail@plt+0x4b54>
   15cb0:	add	r0, sp, #4
   15cb4:	bl	10ee8 <strcmp@plt>
   15cb8:	adds	r0, r0, #0
   15cbc:	movne	r0, #1
   15cc0:	add	sp, sp, #268	; 0x10c
   15cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc8:	andeq	r0, r0, r1, lsl #2
   15ccc:	andeq	r7, r1, r0, asr r1
   15cd0:	andeq	r7, r1, r4, asr r1
   15cd4:	push	{r4, r5, r6, lr}
   15cd8:	mov	r6, r1
   15cdc:	mov	r4, r2
   15ce0:	mov	r1, #0
   15ce4:	bl	11104 <setlocale@plt>
   15ce8:	subs	r5, r0, #0
   15cec:	beq	15d10 <__assert_fail@plt+0x4b94>
   15cf0:	mov	r0, r5
   15cf4:	bl	11068 <strlen@plt>
   15cf8:	cmp	r4, r0
   15cfc:	bhi	15d28 <__assert_fail@plt+0x4bac>
   15d00:	cmp	r4, #0
   15d04:	bne	15d40 <__assert_fail@plt+0x4bc4>
   15d08:	mov	r0, #34	; 0x22
   15d0c:	pop	{r4, r5, r6, pc}
   15d10:	cmp	r4, #0
   15d14:	beq	15d64 <__assert_fail@plt+0x4be8>
   15d18:	mov	r3, #0
   15d1c:	strb	r3, [r6]
   15d20:	mov	r0, #22
   15d24:	pop	{r4, r5, r6, pc}
   15d28:	add	r2, r0, #1
   15d2c:	mov	r1, r5
   15d30:	mov	r0, r6
   15d34:	bl	10f30 <memcpy@plt>
   15d38:	mov	r0, #0
   15d3c:	pop	{r4, r5, r6, pc}
   15d40:	sub	r4, r4, #1
   15d44:	mov	r2, r4
   15d48:	mov	r1, r5
   15d4c:	mov	r0, r6
   15d50:	bl	10f30 <memcpy@plt>
   15d54:	mov	r3, #0
   15d58:	strb	r3, [r6, r4]
   15d5c:	mov	r0, #34	; 0x22
   15d60:	pop	{r4, r5, r6, pc}
   15d64:	mov	r0, #22
   15d68:	pop	{r4, r5, r6, pc}
   15d6c:	push	{r4, lr}
   15d70:	mov	r1, #0
   15d74:	bl	11104 <setlocale@plt>
   15d78:	pop	{r4, pc}
   15d7c:	subs	r2, r1, #1
   15d80:	bxeq	lr
   15d84:	bcc	15f5c <__assert_fail@plt+0x4de0>
   15d88:	cmp	r0, r1
   15d8c:	bls	15f40 <__assert_fail@plt+0x4dc4>
   15d90:	tst	r1, r2
   15d94:	beq	15f4c <__assert_fail@plt+0x4dd0>
   15d98:	clz	r3, r0
   15d9c:	clz	r2, r1
   15da0:	sub	r3, r2, r3
   15da4:	rsbs	r3, r3, #31
   15da8:	addne	r3, r3, r3, lsl #1
   15dac:	mov	r2, #0
   15db0:	addne	pc, pc, r3, lsl #2
   15db4:	nop			; (mov r0, r0)
   15db8:	cmp	r0, r1, lsl #31
   15dbc:	adc	r2, r2, r2
   15dc0:	subcs	r0, r0, r1, lsl #31
   15dc4:	cmp	r0, r1, lsl #30
   15dc8:	adc	r2, r2, r2
   15dcc:	subcs	r0, r0, r1, lsl #30
   15dd0:	cmp	r0, r1, lsl #29
   15dd4:	adc	r2, r2, r2
   15dd8:	subcs	r0, r0, r1, lsl #29
   15ddc:	cmp	r0, r1, lsl #28
   15de0:	adc	r2, r2, r2
   15de4:	subcs	r0, r0, r1, lsl #28
   15de8:	cmp	r0, r1, lsl #27
   15dec:	adc	r2, r2, r2
   15df0:	subcs	r0, r0, r1, lsl #27
   15df4:	cmp	r0, r1, lsl #26
   15df8:	adc	r2, r2, r2
   15dfc:	subcs	r0, r0, r1, lsl #26
   15e00:	cmp	r0, r1, lsl #25
   15e04:	adc	r2, r2, r2
   15e08:	subcs	r0, r0, r1, lsl #25
   15e0c:	cmp	r0, r1, lsl #24
   15e10:	adc	r2, r2, r2
   15e14:	subcs	r0, r0, r1, lsl #24
   15e18:	cmp	r0, r1, lsl #23
   15e1c:	adc	r2, r2, r2
   15e20:	subcs	r0, r0, r1, lsl #23
   15e24:	cmp	r0, r1, lsl #22
   15e28:	adc	r2, r2, r2
   15e2c:	subcs	r0, r0, r1, lsl #22
   15e30:	cmp	r0, r1, lsl #21
   15e34:	adc	r2, r2, r2
   15e38:	subcs	r0, r0, r1, lsl #21
   15e3c:	cmp	r0, r1, lsl #20
   15e40:	adc	r2, r2, r2
   15e44:	subcs	r0, r0, r1, lsl #20
   15e48:	cmp	r0, r1, lsl #19
   15e4c:	adc	r2, r2, r2
   15e50:	subcs	r0, r0, r1, lsl #19
   15e54:	cmp	r0, r1, lsl #18
   15e58:	adc	r2, r2, r2
   15e5c:	subcs	r0, r0, r1, lsl #18
   15e60:	cmp	r0, r1, lsl #17
   15e64:	adc	r2, r2, r2
   15e68:	subcs	r0, r0, r1, lsl #17
   15e6c:	cmp	r0, r1, lsl #16
   15e70:	adc	r2, r2, r2
   15e74:	subcs	r0, r0, r1, lsl #16
   15e78:	cmp	r0, r1, lsl #15
   15e7c:	adc	r2, r2, r2
   15e80:	subcs	r0, r0, r1, lsl #15
   15e84:	cmp	r0, r1, lsl #14
   15e88:	adc	r2, r2, r2
   15e8c:	subcs	r0, r0, r1, lsl #14
   15e90:	cmp	r0, r1, lsl #13
   15e94:	adc	r2, r2, r2
   15e98:	subcs	r0, r0, r1, lsl #13
   15e9c:	cmp	r0, r1, lsl #12
   15ea0:	adc	r2, r2, r2
   15ea4:	subcs	r0, r0, r1, lsl #12
   15ea8:	cmp	r0, r1, lsl #11
   15eac:	adc	r2, r2, r2
   15eb0:	subcs	r0, r0, r1, lsl #11
   15eb4:	cmp	r0, r1, lsl #10
   15eb8:	adc	r2, r2, r2
   15ebc:	subcs	r0, r0, r1, lsl #10
   15ec0:	cmp	r0, r1, lsl #9
   15ec4:	adc	r2, r2, r2
   15ec8:	subcs	r0, r0, r1, lsl #9
   15ecc:	cmp	r0, r1, lsl #8
   15ed0:	adc	r2, r2, r2
   15ed4:	subcs	r0, r0, r1, lsl #8
   15ed8:	cmp	r0, r1, lsl #7
   15edc:	adc	r2, r2, r2
   15ee0:	subcs	r0, r0, r1, lsl #7
   15ee4:	cmp	r0, r1, lsl #6
   15ee8:	adc	r2, r2, r2
   15eec:	subcs	r0, r0, r1, lsl #6
   15ef0:	cmp	r0, r1, lsl #5
   15ef4:	adc	r2, r2, r2
   15ef8:	subcs	r0, r0, r1, lsl #5
   15efc:	cmp	r0, r1, lsl #4
   15f00:	adc	r2, r2, r2
   15f04:	subcs	r0, r0, r1, lsl #4
   15f08:	cmp	r0, r1, lsl #3
   15f0c:	adc	r2, r2, r2
   15f10:	subcs	r0, r0, r1, lsl #3
   15f14:	cmp	r0, r1, lsl #2
   15f18:	adc	r2, r2, r2
   15f1c:	subcs	r0, r0, r1, lsl #2
   15f20:	cmp	r0, r1, lsl #1
   15f24:	adc	r2, r2, r2
   15f28:	subcs	r0, r0, r1, lsl #1
   15f2c:	cmp	r0, r1
   15f30:	adc	r2, r2, r2
   15f34:	subcs	r0, r0, r1
   15f38:	mov	r0, r2
   15f3c:	bx	lr
   15f40:	moveq	r0, #1
   15f44:	movne	r0, #0
   15f48:	bx	lr
   15f4c:	clz	r2, r1
   15f50:	rsb	r2, r2, #31
   15f54:	lsr	r0, r0, r2
   15f58:	bx	lr
   15f5c:	cmp	r0, #0
   15f60:	mvnne	r0, #0
   15f64:	b	16204 <__assert_fail@plt+0x5088>
   15f68:	cmp	r1, #0
   15f6c:	beq	15f5c <__assert_fail@plt+0x4de0>
   15f70:	push	{r0, r1, lr}
   15f74:	bl	15d7c <__assert_fail@plt+0x4c00>
   15f78:	pop	{r1, r2, lr}
   15f7c:	mul	r3, r2, r0
   15f80:	sub	r1, r1, r3
   15f84:	bx	lr
   15f88:	cmp	r1, #0
   15f8c:	beq	16198 <__assert_fail@plt+0x501c>
   15f90:	eor	ip, r0, r1
   15f94:	rsbmi	r1, r1, #0
   15f98:	subs	r2, r1, #1
   15f9c:	beq	16164 <__assert_fail@plt+0x4fe8>
   15fa0:	movs	r3, r0
   15fa4:	rsbmi	r3, r0, #0
   15fa8:	cmp	r3, r1
   15fac:	bls	16170 <__assert_fail@plt+0x4ff4>
   15fb0:	tst	r1, r2
   15fb4:	beq	16180 <__assert_fail@plt+0x5004>
   15fb8:	clz	r2, r3
   15fbc:	clz	r0, r1
   15fc0:	sub	r2, r0, r2
   15fc4:	rsbs	r2, r2, #31
   15fc8:	addne	r2, r2, r2, lsl #1
   15fcc:	mov	r0, #0
   15fd0:	addne	pc, pc, r2, lsl #2
   15fd4:	nop			; (mov r0, r0)
   15fd8:	cmp	r3, r1, lsl #31
   15fdc:	adc	r0, r0, r0
   15fe0:	subcs	r3, r3, r1, lsl #31
   15fe4:	cmp	r3, r1, lsl #30
   15fe8:	adc	r0, r0, r0
   15fec:	subcs	r3, r3, r1, lsl #30
   15ff0:	cmp	r3, r1, lsl #29
   15ff4:	adc	r0, r0, r0
   15ff8:	subcs	r3, r3, r1, lsl #29
   15ffc:	cmp	r3, r1, lsl #28
   16000:	adc	r0, r0, r0
   16004:	subcs	r3, r3, r1, lsl #28
   16008:	cmp	r3, r1, lsl #27
   1600c:	adc	r0, r0, r0
   16010:	subcs	r3, r3, r1, lsl #27
   16014:	cmp	r3, r1, lsl #26
   16018:	adc	r0, r0, r0
   1601c:	subcs	r3, r3, r1, lsl #26
   16020:	cmp	r3, r1, lsl #25
   16024:	adc	r0, r0, r0
   16028:	subcs	r3, r3, r1, lsl #25
   1602c:	cmp	r3, r1, lsl #24
   16030:	adc	r0, r0, r0
   16034:	subcs	r3, r3, r1, lsl #24
   16038:	cmp	r3, r1, lsl #23
   1603c:	adc	r0, r0, r0
   16040:	subcs	r3, r3, r1, lsl #23
   16044:	cmp	r3, r1, lsl #22
   16048:	adc	r0, r0, r0
   1604c:	subcs	r3, r3, r1, lsl #22
   16050:	cmp	r3, r1, lsl #21
   16054:	adc	r0, r0, r0
   16058:	subcs	r3, r3, r1, lsl #21
   1605c:	cmp	r3, r1, lsl #20
   16060:	adc	r0, r0, r0
   16064:	subcs	r3, r3, r1, lsl #20
   16068:	cmp	r3, r1, lsl #19
   1606c:	adc	r0, r0, r0
   16070:	subcs	r3, r3, r1, lsl #19
   16074:	cmp	r3, r1, lsl #18
   16078:	adc	r0, r0, r0
   1607c:	subcs	r3, r3, r1, lsl #18
   16080:	cmp	r3, r1, lsl #17
   16084:	adc	r0, r0, r0
   16088:	subcs	r3, r3, r1, lsl #17
   1608c:	cmp	r3, r1, lsl #16
   16090:	adc	r0, r0, r0
   16094:	subcs	r3, r3, r1, lsl #16
   16098:	cmp	r3, r1, lsl #15
   1609c:	adc	r0, r0, r0
   160a0:	subcs	r3, r3, r1, lsl #15
   160a4:	cmp	r3, r1, lsl #14
   160a8:	adc	r0, r0, r0
   160ac:	subcs	r3, r3, r1, lsl #14
   160b0:	cmp	r3, r1, lsl #13
   160b4:	adc	r0, r0, r0
   160b8:	subcs	r3, r3, r1, lsl #13
   160bc:	cmp	r3, r1, lsl #12
   160c0:	adc	r0, r0, r0
   160c4:	subcs	r3, r3, r1, lsl #12
   160c8:	cmp	r3, r1, lsl #11
   160cc:	adc	r0, r0, r0
   160d0:	subcs	r3, r3, r1, lsl #11
   160d4:	cmp	r3, r1, lsl #10
   160d8:	adc	r0, r0, r0
   160dc:	subcs	r3, r3, r1, lsl #10
   160e0:	cmp	r3, r1, lsl #9
   160e4:	adc	r0, r0, r0
   160e8:	subcs	r3, r3, r1, lsl #9
   160ec:	cmp	r3, r1, lsl #8
   160f0:	adc	r0, r0, r0
   160f4:	subcs	r3, r3, r1, lsl #8
   160f8:	cmp	r3, r1, lsl #7
   160fc:	adc	r0, r0, r0
   16100:	subcs	r3, r3, r1, lsl #7
   16104:	cmp	r3, r1, lsl #6
   16108:	adc	r0, r0, r0
   1610c:	subcs	r3, r3, r1, lsl #6
   16110:	cmp	r3, r1, lsl #5
   16114:	adc	r0, r0, r0
   16118:	subcs	r3, r3, r1, lsl #5
   1611c:	cmp	r3, r1, lsl #4
   16120:	adc	r0, r0, r0
   16124:	subcs	r3, r3, r1, lsl #4
   16128:	cmp	r3, r1, lsl #3
   1612c:	adc	r0, r0, r0
   16130:	subcs	r3, r3, r1, lsl #3
   16134:	cmp	r3, r1, lsl #2
   16138:	adc	r0, r0, r0
   1613c:	subcs	r3, r3, r1, lsl #2
   16140:	cmp	r3, r1, lsl #1
   16144:	adc	r0, r0, r0
   16148:	subcs	r3, r3, r1, lsl #1
   1614c:	cmp	r3, r1
   16150:	adc	r0, r0, r0
   16154:	subcs	r3, r3, r1
   16158:	cmp	ip, #0
   1615c:	rsbmi	r0, r0, #0
   16160:	bx	lr
   16164:	teq	ip, r0
   16168:	rsbmi	r0, r0, #0
   1616c:	bx	lr
   16170:	movcc	r0, #0
   16174:	asreq	r0, ip, #31
   16178:	orreq	r0, r0, #1
   1617c:	bx	lr
   16180:	clz	r2, r1
   16184:	rsb	r2, r2, #31
   16188:	cmp	ip, #0
   1618c:	lsr	r0, r3, r2
   16190:	rsbmi	r0, r0, #0
   16194:	bx	lr
   16198:	cmp	r0, #0
   1619c:	mvngt	r0, #-2147483648	; 0x80000000
   161a0:	movlt	r0, #-2147483648	; 0x80000000
   161a4:	b	16204 <__assert_fail@plt+0x5088>
   161a8:	cmp	r1, #0
   161ac:	beq	16198 <__assert_fail@plt+0x501c>
   161b0:	push	{r0, r1, lr}
   161b4:	bl	15f90 <__assert_fail@plt+0x4e14>
   161b8:	pop	{r1, r2, lr}
   161bc:	mul	r3, r2, r0
   161c0:	sub	r1, r1, r3
   161c4:	bx	lr
   161c8:	cmp	r3, #0
   161cc:	cmpeq	r2, #0
   161d0:	bne	161e8 <__assert_fail@plt+0x506c>
   161d4:	cmp	r1, #0
   161d8:	cmpeq	r0, #0
   161dc:	mvnne	r1, #0
   161e0:	mvnne	r0, #0
   161e4:	b	16204 <__assert_fail@plt+0x5088>
   161e8:	sub	sp, sp, #8
   161ec:	push	{sp, lr}
   161f0:	bl	16214 <__assert_fail@plt+0x5098>
   161f4:	ldr	lr, [sp, #4]
   161f8:	add	sp, sp, #8
   161fc:	pop	{r2, r3}
   16200:	bx	lr
   16204:	push	{r1, lr}
   16208:	mov	r0, #8
   1620c:	bl	10ec4 <raise@plt>
   16210:	pop	{r1, pc}
   16214:	cmp	r1, r3
   16218:	push	{r4, r5, r6, r7, r8, r9, lr}
   1621c:	cmpeq	r0, r2
   16220:	mov	r4, r0
   16224:	mov	r5, r1
   16228:	ldr	r9, [sp, #28]
   1622c:	movcc	r0, #0
   16230:	movcc	r1, #0
   16234:	bcc	1632c <__assert_fail@plt+0x51b0>
   16238:	cmp	r3, #0
   1623c:	clzeq	ip, r2
   16240:	clzne	ip, r3
   16244:	addeq	ip, ip, #32
   16248:	cmp	r5, #0
   1624c:	clzeq	r1, r4
   16250:	addeq	r1, r1, #32
   16254:	clzne	r1, r5
   16258:	sub	ip, ip, r1
   1625c:	sub	lr, ip, #32
   16260:	lsl	r7, r3, ip
   16264:	rsb	r8, ip, #32
   16268:	orr	r7, r7, r2, lsl lr
   1626c:	orr	r7, r7, r2, lsr r8
   16270:	lsl	r6, r2, ip
   16274:	cmp	r5, r7
   16278:	cmpeq	r4, r6
   1627c:	movcc	r0, #0
   16280:	movcc	r1, #0
   16284:	bcc	162a0 <__assert_fail@plt+0x5124>
   16288:	mov	r3, #1
   1628c:	subs	r4, r4, r6
   16290:	lsl	r1, r3, lr
   16294:	lsl	r0, r3, ip
   16298:	orr	r1, r1, r3, lsr r8
   1629c:	sbc	r5, r5, r7
   162a0:	cmp	ip, #0
   162a4:	beq	1632c <__assert_fail@plt+0x51b0>
   162a8:	lsrs	r3, r7, #1
   162ac:	rrx	r2, r6
   162b0:	mov	r6, ip
   162b4:	b	162d8 <__assert_fail@plt+0x515c>
   162b8:	subs	r4, r4, r2
   162bc:	sbc	r5, r5, r3
   162c0:	adds	r4, r4, r4
   162c4:	adc	r5, r5, r5
   162c8:	adds	r4, r4, #1
   162cc:	adc	r5, r5, #0
   162d0:	subs	r6, r6, #1
   162d4:	beq	162f4 <__assert_fail@plt+0x5178>
   162d8:	cmp	r5, r3
   162dc:	cmpeq	r4, r2
   162e0:	bcs	162b8 <__assert_fail@plt+0x513c>
   162e4:	adds	r4, r4, r4
   162e8:	adc	r5, r5, r5
   162ec:	subs	r6, r6, #1
   162f0:	bne	162d8 <__assert_fail@plt+0x515c>
   162f4:	lsr	r6, r4, ip
   162f8:	lsr	r7, r5, ip
   162fc:	orr	r6, r6, r5, lsl r8
   16300:	adds	r2, r0, r4
   16304:	orr	r6, r6, r5, lsr lr
   16308:	adc	r3, r1, r5
   1630c:	lsl	r1, r7, ip
   16310:	orr	r1, r1, r6, lsl lr
   16314:	lsl	r0, r6, ip
   16318:	orr	r1, r1, r6, lsr r8
   1631c:	subs	r0, r2, r0
   16320:	mov	r4, r6
   16324:	mov	r5, r7
   16328:	sbc	r1, r3, r1
   1632c:	cmp	r9, #0
   16330:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   16334:	strd	r4, [r9]
   16338:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1633c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16340:	mov	r7, r0
   16344:	ldr	r6, [pc, #72]	; 16394 <__assert_fail@plt+0x5218>
   16348:	ldr	r5, [pc, #72]	; 16398 <__assert_fail@plt+0x521c>
   1634c:	add	r6, pc, r6
   16350:	add	r5, pc, r5
   16354:	sub	r6, r6, r5
   16358:	mov	r8, r1
   1635c:	mov	r9, r2
   16360:	bl	10e80 <calloc@plt-0x20>
   16364:	asrs	r6, r6, #2
   16368:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1636c:	mov	r4, #0
   16370:	add	r4, r4, #1
   16374:	ldr	r3, [r5], #4
   16378:	mov	r2, r9
   1637c:	mov	r1, r8
   16380:	mov	r0, r7
   16384:	blx	r3
   16388:	cmp	r6, r4
   1638c:	bne	16370 <__assert_fail@plt+0x51f4>
   16390:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16394:			; <UNDEFINED> instruction: 0x00011bb4
   16398:	andeq	r1, r1, ip, lsr #23
   1639c:	bx	lr
   163a0:	ldr	r3, [pc, #12]	; 163b4 <__assert_fail@plt+0x5238>
   163a4:	mov	r1, #0
   163a8:	add	r3, pc, r3
   163ac:	ldr	r2, [r3]
   163b0:	b	1108c <__cxa_atexit@plt>
   163b4:	andeq	r1, r1, ip, asr sp

Disassembly of section .fini:

000163b8 <.fini>:
   163b8:	push	{r3, lr}
   163bc:	pop	{r3, pc}
