
../repos/coreutils/src/base32:     file format elf32-littlearm


Disassembly of section .init:

00010ca0 <.init>:
   10ca0:	push	{r3, lr}
   10ca4:	bl	115ac <__assert_fail@plt+0x67c>
   10ca8:	pop	{r3, pc}

Disassembly of section .plt:

00010cac <calloc@plt-0x14>:
   10cac:	push	{lr}		; (str lr, [sp, #-4]!)
   10cb0:	ldr	lr, [pc, #4]	; 10cbc <calloc@plt-0x4>
   10cb4:	add	lr, pc, lr
   10cb8:	ldr	pc, [lr, #8]!
   10cbc:	andeq	r5, r1, r4, asr #6

00010cc0 <calloc@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #86016	; 0x15000
   10cc8:	ldr	pc, [ip, #836]!	; 0x344

00010ccc <fputs_unlocked@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #86016	; 0x15000
   10cd4:	ldr	pc, [ip, #828]!	; 0x33c

00010cd8 <strcmp@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #86016	; 0x15000
   10ce0:	ldr	pc, [ip, #820]!	; 0x334

00010ce4 <posix_fadvise64@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #86016	; 0x15000
   10cec:	ldr	pc, [ip, #812]!	; 0x32c

00010cf0 <fflush@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #86016	; 0x15000
   10cf8:	ldr	pc, [ip, #804]!	; 0x324

00010cfc <memmove@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #86016	; 0x15000
   10d04:	ldr	pc, [ip, #796]!	; 0x31c

00010d08 <free@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #86016	; 0x15000
   10d10:	ldr	pc, [ip, #788]!	; 0x314

00010d14 <_exit@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #86016	; 0x15000
   10d1c:	ldr	pc, [ip, #780]!	; 0x30c

00010d20 <memcpy@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #86016	; 0x15000
   10d28:	ldr	pc, [ip, #772]!	; 0x304

00010d2c <mbsinit@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #86016	; 0x15000
   10d34:	ldr	pc, [ip, #764]!	; 0x2fc

00010d38 <fwrite_unlocked@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #86016	; 0x15000
   10d40:	ldr	pc, [ip, #756]!	; 0x2f4

00010d44 <memcmp@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #86016	; 0x15000
   10d4c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d50 <fputc_unlocked@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #86016	; 0x15000
   10d58:	ldr	pc, [ip, #740]!	; 0x2e4

00010d5c <dcgettext@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #86016	; 0x15000
   10d64:	ldr	pc, [ip, #732]!	; 0x2dc

00010d68 <realloc@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #86016	; 0x15000
   10d70:	ldr	pc, [ip, #724]!	; 0x2d4

00010d74 <textdomain@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #86016	; 0x15000
   10d7c:	ldr	pc, [ip, #716]!	; 0x2cc

00010d80 <iswprint@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #86016	; 0x15000
   10d88:	ldr	pc, [ip, #708]!	; 0x2c4

00010d8c <lseek64@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #86016	; 0x15000
   10d94:	ldr	pc, [ip, #700]!	; 0x2bc

00010d98 <__ctype_get_mb_cur_max@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #86016	; 0x15000
   10da0:	ldr	pc, [ip, #692]!	; 0x2b4

00010da4 <__fpending@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #86016	; 0x15000
   10dac:	ldr	pc, [ip, #684]!	; 0x2ac

00010db0 <ferror_unlocked@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #86016	; 0x15000
   10db8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dbc <mbrtowc@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #86016	; 0x15000
   10dc4:	ldr	pc, [ip, #668]!	; 0x29c

00010dc8 <error@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #86016	; 0x15000
   10dd0:	ldr	pc, [ip, #660]!	; 0x294

00010dd4 <malloc@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #86016	; 0x15000
   10ddc:	ldr	pc, [ip, #652]!	; 0x28c

00010de0 <__libc_start_main@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #86016	; 0x15000
   10de8:	ldr	pc, [ip, #644]!	; 0x284

00010dec <__freading@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #86016	; 0x15000
   10df4:	ldr	pc, [ip, #636]!	; 0x27c

00010df8 <__gmon_start__@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #86016	; 0x15000
   10e00:	ldr	pc, [ip, #628]!	; 0x274

00010e04 <getopt_long@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #86016	; 0x15000
   10e0c:	ldr	pc, [ip, #620]!	; 0x26c

00010e10 <__ctype_b_loc@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #86016	; 0x15000
   10e18:	ldr	pc, [ip, #612]!	; 0x264

00010e1c <exit@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #86016	; 0x15000
   10e24:	ldr	pc, [ip, #604]!	; 0x25c

00010e28 <strlen@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #86016	; 0x15000
   10e30:	ldr	pc, [ip, #596]!	; 0x254

00010e34 <strchr@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #86016	; 0x15000
   10e3c:	ldr	pc, [ip, #588]!	; 0x24c

00010e40 <__errno_location@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #86016	; 0x15000
   10e48:	ldr	pc, [ip, #580]!	; 0x244

00010e4c <__cxa_atexit@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #86016	; 0x15000
   10e54:	ldr	pc, [ip, #572]!	; 0x23c

00010e58 <memset@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #86016	; 0x15000
   10e60:	ldr	pc, [ip, #564]!	; 0x234

00010e64 <__printf_chk@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #86016	; 0x15000
   10e6c:	ldr	pc, [ip, #556]!	; 0x22c

00010e70 <fileno@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #86016	; 0x15000
   10e78:	ldr	pc, [ip, #548]!	; 0x224

00010e7c <__fprintf_chk@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #86016	; 0x15000
   10e84:	ldr	pc, [ip, #540]!	; 0x21c

00010e88 <memchr@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #86016	; 0x15000
   10e90:	ldr	pc, [ip, #532]!	; 0x214

00010e94 <strtoimax@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #86016	; 0x15000
   10e9c:	ldr	pc, [ip, #524]!	; 0x20c

00010ea0 <fclose@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #86016	; 0x15000
   10ea8:	ldr	pc, [ip, #516]!	; 0x204

00010eac <fseeko64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #86016	; 0x15000
   10eb4:	ldr	pc, [ip, #508]!	; 0x1fc

00010eb8 <setlocale@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #86016	; 0x15000
   10ec0:	ldr	pc, [ip, #500]!	; 0x1f4

00010ec4 <strrchr@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #86016	; 0x15000
   10ecc:	ldr	pc, [ip, #492]!	; 0x1ec

00010ed0 <nl_langinfo@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #86016	; 0x15000
   10ed8:	ldr	pc, [ip, #484]!	; 0x1e4

00010edc <fopen64@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #86016	; 0x15000
   10ee4:	ldr	pc, [ip, #476]!	; 0x1dc

00010ee8 <bindtextdomain@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #86016	; 0x15000
   10ef0:	ldr	pc, [ip, #468]!	; 0x1d4

00010ef4 <fread_unlocked@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #86016	; 0x15000
   10efc:	ldr	pc, [ip, #460]!	; 0x1cc

00010f00 <fputs@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #86016	; 0x15000
   10f08:	ldr	pc, [ip, #452]!	; 0x1c4

00010f0c <strncmp@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #86016	; 0x15000
   10f14:	ldr	pc, [ip, #444]!	; 0x1bc

00010f18 <abort@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #86016	; 0x15000
   10f20:	ldr	pc, [ip, #436]!	; 0x1b4

00010f24 <feof_unlocked@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #86016	; 0x15000
   10f2c:	ldr	pc, [ip, #428]!	; 0x1ac

00010f30 <__assert_fail@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #86016	; 0x15000
   10f38:	ldr	pc, [ip, #420]!	; 0x1a4

Disassembly of section .text:

00010f3c <.text>:
   10f3c:	push	{r4, lr}
   10f40:	bl	10e40 <__errno_location@plt>
   10f44:	mov	r3, #12
   10f48:	str	r3, [r0]
   10f4c:	mov	r0, #0
   10f50:	pop	{r4, pc}
   10f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10f58:	mov	r9, r0
   10f5c:	sub	sp, sp, #52	; 0x34
   10f60:	mov	r5, r1
   10f64:	mov	r8, #0
   10f68:	mov	r6, #76	; 0x4c
   10f6c:	mov	r7, r8
   10f70:	ldr	r0, [r1]
   10f74:	bl	12364 <__assert_fail@plt+0x1434>
   10f78:	ldr	r1, [pc, #1428]	; 11514 <__assert_fail@plt+0x5e4>
   10f7c:	mov	r0, #6
   10f80:	bl	10eb8 <setlocale@plt>
   10f84:	ldr	r1, [pc, #1420]	; 11518 <__assert_fail@plt+0x5e8>
   10f88:	ldr	r0, [pc, #1420]	; 1151c <__assert_fail@plt+0x5ec>
   10f8c:	bl	10ee8 <bindtextdomain@plt>
   10f90:	ldr	r0, [pc, #1412]	; 1151c <__assert_fail@plt+0x5ec>
   10f94:	bl	10d74 <textdomain@plt>
   10f98:	ldr	r0, [pc, #1408]	; 11520 <__assert_fail@plt+0x5f0>
   10f9c:	ldr	fp, [pc, #1408]	; 11524 <__assert_fail@plt+0x5f4>
   10fa0:	ldr	sl, [pc, #1408]	; 11528 <__assert_fail@plt+0x5f8>
   10fa4:	bl	149d4 <__assert_fail@plt+0x3aa4>
   10fa8:	mov	r4, #0
   10fac:	mov	r3, fp
   10fb0:	ldr	r2, [pc, #1396]	; 1152c <__assert_fail@plt+0x5fc>
   10fb4:	mov	r1, r5
   10fb8:	mov	r0, r9
   10fbc:	str	r4, [sp]
   10fc0:	bl	10e04 <getopt_long@plt>
   10fc4:	cmn	r0, #1
   10fc8:	bne	1101c <__assert_fail@plt+0xec>
   10fcc:	ldr	sl, [pc, #1372]	; 11530 <__assert_fail@plt+0x600>
   10fd0:	ldr	r3, [sl]
   10fd4:	sub	r2, r9, r3
   10fd8:	cmp	r2, #1
   10fdc:	ble	11124 <__assert_fail@plt+0x1f4>
   10fe0:	mov	r2, #5
   10fe4:	ldr	r1, [pc, #1352]	; 11534 <__assert_fail@plt+0x604>
   10fe8:	mov	r0, r4
   10fec:	bl	10d5c <dcgettext@plt>
   10ff0:	ldr	r3, [sl]
   10ff4:	mov	r6, r0
   10ff8:	add	r3, r3, #1
   10ffc:	ldr	r0, [r5, r3, lsl #2]
   11000:	bl	13964 <__assert_fail@plt+0x2a34>
   11004:	mov	r3, r0
   11008:	mov	r2, r6
   1100c:	mov	r1, r4
   11010:	mov	r0, r4
   11014:	bl	10dc8 <error@plt>
   11018:	b	1103c <__assert_fail@plt+0x10c>
   1101c:	cmp	r0, #100	; 0x64
   11020:	beq	11114 <__assert_fail@plt+0x1e4>
   11024:	bgt	11044 <__assert_fail@plt+0x114>
   11028:	cmn	r0, #3
   1102c:	beq	110e8 <__assert_fail@plt+0x1b8>
   11030:	cmn	r0, #2
   11034:	moveq	r0, r4
   11038:	beq	11040 <__assert_fail@plt+0x110>
   1103c:	mov	r0, #1
   11040:	bl	116e8 <__assert_fail@plt+0x7b8>
   11044:	cmp	r0, #105	; 0x69
   11048:	beq	1111c <__assert_fail@plt+0x1ec>
   1104c:	cmp	r0, #119	; 0x77
   11050:	bne	1103c <__assert_fail@plt+0x10c>
   11054:	ldr	r3, [pc, #1208]	; 11514 <__assert_fail@plt+0x5e4>
   11058:	mov	r2, #10
   1105c:	mov	r1, r4
   11060:	str	r3, [sp]
   11064:	add	r3, sp, #32
   11068:	ldr	r0, [sl]
   1106c:	bl	14234 <__assert_fail@plt+0x3304>
   11070:	cmp	r0, #1
   11074:	bhi	11088 <__assert_fail@plt+0x158>
   11078:	ldrd	r2, [sp, #32]
   1107c:	cmp	r2, #0
   11080:	sbcs	r1, r3, #0
   11084:	bge	110bc <__assert_fail@plt+0x18c>
   11088:	mov	r2, #5
   1108c:	ldr	r1, [pc, #1188]	; 11538 <__assert_fail@plt+0x608>
   11090:	mov	r0, #0
   11094:	bl	10d5c <dcgettext@plt>
   11098:	mov	r4, r0
   1109c:	ldr	r0, [sl]
   110a0:	bl	13964 <__assert_fail@plt+0x2a34>
   110a4:	mov	r3, r4
   110a8:	ldr	r2, [pc, #1164]	; 1153c <__assert_fail@plt+0x60c>
   110ac:	mov	r1, #0
   110b0:	str	r0, [sp]
   110b4:	mov	r0, #1
   110b8:	bl	10dc8 <error@plt>
   110bc:	eor	ip, r0, #1
   110c0:	mvn	r0, #-2147483648	; 0x80000000
   110c4:	cmp	r0, r2
   110c8:	mov	r1, #0
   110cc:	sbcs	r1, r1, r3
   110d0:	movlt	r0, #0
   110d4:	andge	r0, ip, #1
   110d8:	cmp	r0, #0
   110dc:	moveq	r2, #0
   110e0:	mov	r6, r2
   110e4:	b	10fa8 <__assert_fail@plt+0x78>
   110e8:	ldr	r3, [pc, #1104]	; 11540 <__assert_fail@plt+0x610>
   110ec:	ldr	r0, [pc, #1104]	; 11544 <__assert_fail@plt+0x614>
   110f0:	ldr	r2, [pc, #1104]	; 11548 <__assert_fail@plt+0x618>
   110f4:	stm	sp, {r3, r4}
   110f8:	ldr	r3, [pc, #1100]	; 1154c <__assert_fail@plt+0x61c>
   110fc:	ldr	r1, [pc, #1100]	; 11550 <__assert_fail@plt+0x620>
   11100:	ldr	r0, [r0]
   11104:	ldr	r3, [r3]
   11108:	bl	13db0 <__assert_fail@plt+0x2e80>
   1110c:	mov	r0, r4
   11110:	bl	10e1c <exit@plt>
   11114:	mov	r7, #1
   11118:	b	10fa8 <__assert_fail@plt+0x78>
   1111c:	mov	r8, #1
   11120:	b	10fa8 <__assert_fail@plt+0x78>
   11124:	cmp	r3, r9
   11128:	bge	111bc <__assert_fail@plt+0x28c>
   1112c:	ldr	r3, [r5, r3, lsl #2]
   11130:	ldr	r1, [pc, #1052]	; 11554 <__assert_fail@plt+0x624>
   11134:	mov	r0, r3
   11138:	str	r3, [sp, #8]
   1113c:	bl	10cd8 <strcmp@plt>
   11140:	cmp	r0, #0
   11144:	bne	111c8 <__assert_fail@plt+0x298>
   11148:	ldr	r3, [pc, #1032]	; 11558 <__assert_fail@plt+0x628>
   1114c:	ldr	r4, [r3]
   11150:	mov	r1, #2
   11154:	mov	r0, r4
   11158:	ldr	fp, [pc, #996]	; 11544 <__assert_fail@plt+0x614>
   1115c:	bl	12154 <__assert_fail@plt+0x1224>
   11160:	cmp	r7, #0
   11164:	ldr	r3, [fp]
   11168:	beq	11398 <__assert_fail@plt+0x468>
   1116c:	mov	r0, #8192	; 0x2000
   11170:	str	r3, [sp, #12]
   11174:	bl	13e78 <__assert_fail@plt+0x2f48>
   11178:	mov	r6, r0
   1117c:	mov	r0, #5120	; 0x1400
   11180:	bl	13e78 <__assert_fail@plt+0x2f48>
   11184:	mov	sl, r0
   11188:	add	r0, sp, #32
   1118c:	bl	11dc0 <__assert_fail@plt+0xe90>
   11190:	mov	r5, #0
   11194:	mov	r3, r4
   11198:	rsb	r2, r5, #8192	; 0x2000
   1119c:	mov	r1, #1
   111a0:	add	r0, r6, r5
   111a4:	bl	10ef4 <fread_unlocked@plt>
   111a8:	cmp	r8, #0
   111ac:	mov	r7, r0
   111b0:	beq	11260 <__assert_fail@plt+0x330>
   111b4:	mov	r9, #0
   111b8:	b	11258 <__assert_fail@plt+0x328>
   111bc:	ldr	r3, [pc, #912]	; 11554 <__assert_fail@plt+0x624>
   111c0:	str	r3, [sp, #8]
   111c4:	b	11148 <__assert_fail@plt+0x218>
   111c8:	ldr	r1, [pc, #908]	; 1155c <__assert_fail@plt+0x62c>
   111cc:	ldr	r0, [sp, #8]
   111d0:	bl	10edc <fopen64@plt>
   111d4:	subs	r4, r0, #0
   111d8:	bne	11150 <__assert_fail@plt+0x220>
   111dc:	bl	10e40 <__errno_location@plt>
   111e0:	ldr	r5, [r0]
   111e4:	mov	r1, #3
   111e8:	mov	r0, r4
   111ec:	ldr	r2, [sp, #8]
   111f0:	bl	13824 <__assert_fail@plt+0x28f4>
   111f4:	mov	r3, r0
   111f8:	ldr	r2, [pc, #864]	; 11560 <__assert_fail@plt+0x630>
   111fc:	mov	r0, #1
   11200:	mov	r1, r5
   11204:	bl	10dc8 <error@plt>
   11208:	add	r1, r5, r9
   1120c:	ldrb	r3, [r6, r1]
   11210:	add	fp, r6, r1
   11214:	mov	r0, r3
   11218:	str	r3, [sp, #16]
   1121c:	str	r1, [sp, #20]
   11220:	bl	11da8 <__assert_fail@plt+0xe78>
   11224:	ldr	r3, [sp, #16]
   11228:	ldr	r1, [sp, #20]
   1122c:	cmp	r3, #61	; 0x3d
   11230:	orreq	r0, r0, #1
   11234:	tst	r0, #255	; 0xff
   11238:	addne	r9, r9, #1
   1123c:	bne	11258 <__assert_fail@plt+0x328>
   11240:	sub	r7, r7, #1
   11244:	add	r1, r1, #1
   11248:	sub	r2, r7, r9
   1124c:	add	r1, r6, r1
   11250:	mov	r0, fp
   11254:	bl	10cfc <memmove@plt>
   11258:	cmp	r9, r7
   1125c:	blt	11208 <__assert_fail@plt+0x2d8>
   11260:	mov	r0, r4
   11264:	add	r5, r5, r7
   11268:	bl	10db0 <ferror_unlocked@plt>
   1126c:	cmp	r0, #0
   11270:	beq	11288 <__assert_fail@plt+0x358>
   11274:	bl	10e40 <__errno_location@plt>
   11278:	mov	r2, #5
   1127c:	ldr	r1, [pc, #736]	; 11564 <__assert_fail@plt+0x634>
   11280:	ldr	r4, [r0]
   11284:	b	11354 <__assert_fail@plt+0x424>
   11288:	cmp	r5, #8192	; 0x2000
   1128c:	blt	112d0 <__assert_fail@plt+0x3a0>
   11290:	mov	r7, #0
   11294:	add	fp, sp, #28
   11298:	mov	r0, r4
   1129c:	bl	10f24 <feof_unlocked@plt>
   112a0:	cmp	r0, #0
   112a4:	movne	r3, #2
   112a8:	moveq	r3, #1
   112ac:	cmp	r7, r3
   112b0:	blt	112e4 <__assert_fail@plt+0x3b4>
   112b4:	mov	r0, r4
   112b8:	bl	10f24 <feof_unlocked@plt>
   112bc:	cmp	r0, #0
   112c0:	beq	11190 <__assert_fail@plt+0x260>
   112c4:	mov	r0, r4
   112c8:	ldr	r1, [sp, #8]
   112cc:	bl	11660 <__assert_fail@plt+0x730>
   112d0:	mov	r0, r4
   112d4:	bl	10f24 <feof_unlocked@plt>
   112d8:	cmp	r0, #0
   112dc:	beq	11194 <__assert_fail@plt+0x264>
   112e0:	b	11290 <__assert_fail@plt+0x360>
   112e4:	cmp	r7, #1
   112e8:	bne	112f8 <__assert_fail@plt+0x3c8>
   112ec:	ldr	r3, [sp, #32]
   112f0:	cmp	r3, #0
   112f4:	beq	112b4 <__assert_fail@plt+0x384>
   112f8:	mov	r3, #5120	; 0x1400
   112fc:	cmp	r7, #0
   11300:	str	fp, [sp]
   11304:	moveq	r2, r5
   11308:	movne	r2, #0
   1130c:	mov	r1, r6
   11310:	add	r0, sp, #32
   11314:	str	r3, [sp, #28]
   11318:	mov	r3, sl
   1131c:	bl	11dcc <__assert_fail@plt+0xe9c>
   11320:	mov	r9, r0
   11324:	mov	r1, #1
   11328:	ldr	r3, [sp, #12]
   1132c:	mov	r0, sl
   11330:	ldr	r2, [sp, #28]
   11334:	bl	10d38 <fwrite_unlocked@plt>
   11338:	ldr	r3, [sp, #28]
   1133c:	cmp	r0, r3
   11340:	bcs	11368 <__assert_fail@plt+0x438>
   11344:	bl	10e40 <__errno_location@plt>
   11348:	ldr	r1, [pc, #536]	; 11568 <__assert_fail@plt+0x638>
   1134c:	mov	r2, #5
   11350:	ldr	r4, [r0]
   11354:	mov	r0, #0
   11358:	bl	10d5c <dcgettext@plt>
   1135c:	mov	r2, r0
   11360:	mov	r1, r4
   11364:	b	11388 <__assert_fail@plt+0x458>
   11368:	cmp	r9, #0
   1136c:	bne	11390 <__assert_fail@plt+0x460>
   11370:	mov	r2, #5
   11374:	ldr	r1, [pc, #496]	; 1156c <__assert_fail@plt+0x63c>
   11378:	mov	r0, r9
   1137c:	bl	10d5c <dcgettext@plt>
   11380:	mov	r2, r0
   11384:	mov	r1, r9
   11388:	mov	r0, #1
   1138c:	bl	10dc8 <error@plt>
   11390:	add	r7, r7, #1
   11394:	b	11298 <__assert_fail@plt+0x368>
   11398:	mov	r0, #30720	; 0x7800
   1139c:	str	r3, [sp, #16]
   113a0:	bl	13e78 <__assert_fail@plt+0x2f48>
   113a4:	str	r0, [sp, #20]
   113a8:	mov	r0, #49152	; 0xc000
   113ac:	bl	13e78 <__assert_fail@plt+0x2f48>
   113b0:	str	r0, [sp, #12]
   113b4:	mov	r8, #0
   113b8:	ldr	r0, [sp, #20]
   113bc:	rsb	r2, r8, #30720	; 0x7800
   113c0:	mov	r3, r4
   113c4:	mov	r1, #1
   113c8:	add	r0, r0, r8
   113cc:	bl	10ef4 <fread_unlocked@plt>
   113d0:	add	r8, r8, r0
   113d4:	mov	r0, r4
   113d8:	bl	10f24 <feof_unlocked@plt>
   113dc:	cmp	r0, #0
   113e0:	bne	1144c <__assert_fail@plt+0x51c>
   113e4:	mov	r0, r4
   113e8:	bl	10db0 <ferror_unlocked@plt>
   113ec:	cmp	r0, #0
   113f0:	bne	1144c <__assert_fail@plt+0x51c>
   113f4:	cmp	r8, #30720	; 0x7800
   113f8:	blt	113b8 <__assert_fail@plt+0x488>
   113fc:	add	r9, r8, #4
   11400:	mov	r5, #5
   11404:	ldr	r2, [sp, #12]
   11408:	mov	r1, r8
   1140c:	udiv	r9, r9, r5
   11410:	ldr	r0, [sp, #20]
   11414:	lsl	r9, r9, #3
   11418:	mov	r3, r9
   1141c:	bl	11b5c <__assert_fail@plt+0xc2c>
   11420:	cmp	r6, #0
   11424:	movne	sl, #0
   11428:	bne	114e0 <__assert_fail@plt+0x5b0>
   1142c:	mov	r2, r9
   11430:	mov	r1, #1
   11434:	ldr	r3, [fp]
   11438:	ldr	r0, [sp, #12]
   1143c:	bl	10d38 <fwrite_unlocked@plt>
   11440:	cmp	r9, r0
   11444:	bls	11454 <__assert_fail@plt+0x524>
   11448:	b	11344 <__assert_fail@plt+0x414>
   1144c:	cmp	r8, #0
   11450:	bgt	113fc <__assert_fail@plt+0x4cc>
   11454:	mov	r0, r4
   11458:	bl	10f24 <feof_unlocked@plt>
   1145c:	cmp	r0, #0
   11460:	bne	11478 <__assert_fail@plt+0x548>
   11464:	mov	r0, r4
   11468:	bl	10db0 <ferror_unlocked@plt>
   1146c:	cmp	r8, #30720	; 0x7800
   11470:	cmpeq	r0, #0
   11474:	beq	113b4 <__assert_fail@plt+0x484>
   11478:	cmp	r6, #0
   1147c:	cmpne	r7, #0
   11480:	ble	11498 <__assert_fail@plt+0x568>
   11484:	mov	r0, #10
   11488:	ldr	r1, [sp, #16]
   1148c:	bl	10d50 <fputc_unlocked@plt>
   11490:	cmn	r0, #1
   11494:	beq	11344 <__assert_fail@plt+0x414>
   11498:	mov	r0, r4
   1149c:	bl	10db0 <ferror_unlocked@plt>
   114a0:	cmp	r0, #0
   114a4:	beq	112c4 <__assert_fail@plt+0x394>
   114a8:	b	11274 <__assert_fail@plt+0x344>
   114ac:	ldr	r3, [pc, #144]	; 11544 <__assert_fail@plt+0x614>
   114b0:	mov	r2, r5
   114b4:	mov	r1, #1
   114b8:	ldr	r0, [sp, #12]
   114bc:	ldr	r3, [r3]
   114c0:	add	r0, r0, sl
   114c4:	bl	10d38 <fwrite_unlocked@plt>
   114c8:	cmp	r5, r0
   114cc:	bhi	11344 <__assert_fail@plt+0x414>
   114d0:	add	r7, r7, r5
   114d4:	add	sl, sl, r5
   114d8:	cmp	sl, r9
   114dc:	bge	11454 <__assert_fail@plt+0x524>
   114e0:	sub	r5, r9, sl
   114e4:	sub	r3, r6, r7
   114e8:	cmp	r5, r3
   114ec:	movge	r5, r3
   114f0:	cmp	r5, #0
   114f4:	bne	114ac <__assert_fail@plt+0x57c>
   114f8:	mov	r0, #10
   114fc:	ldr	r1, [sp, #16]
   11500:	bl	10d50 <fputc_unlocked@plt>
   11504:	cmn	r0, #1
   11508:	beq	11344 <__assert_fail@plt+0x414>
   1150c:	mov	r7, r5
   11510:	b	114d8 <__assert_fail@plt+0x5a8>
   11514:	andeq	r4, r1, r2, lsl #30
   11518:	andeq	r4, r1, r3, lsl #30
   1151c:	andeq	r4, r1, r0, ror #28
   11520:	andeq	r2, r1, ip, ror r0
   11524:	andeq	r4, r1, r0, lsr sl
   11528:	andeq	r6, r2, r8, asr r1
   1152c:	andeq	r4, r1, r4, asr #30
   11530:	andeq	r6, r2, r0, asr #2
   11534:	andeq	r4, r1, r9, asr #30
   11538:	andeq	r4, r1, fp, lsl pc
   1153c:	andeq	r4, r1, sp, lsr #30
   11540:	andeq	r4, r1, r4, lsr pc
   11544:	andeq	r6, r2, r4, asr r1
   11548:	andeq	r4, r1, ip, asr lr
   1154c:	andeq	r6, r2, ip, ror #1
   11550:	andeq	r4, r1, r7, lsr #21
   11554:	andeq	r5, r1, sl, ror r1
   11558:	andeq	r6, r2, r0, asr r1
   1155c:	andeq	r4, r1, sl, asr pc
   11560:	andeq	r4, r1, r1, lsr pc
   11564:	andeq	r4, r1, sp, asr pc
   11568:	andeq	r4, r1, r8, ror #30
   1156c:	andeq	r4, r1, r4, ror pc
   11570:	mov	fp, #0
   11574:	mov	lr, #0
   11578:	pop	{r1}		; (ldr r1, [sp], #4)
   1157c:	mov	r2, sp
   11580:	push	{r2}		; (str r2, [sp, #-4]!)
   11584:	push	{r0}		; (str r0, [sp, #-4]!)
   11588:	ldr	ip, [pc, #16]	; 115a0 <__assert_fail@plt+0x670>
   1158c:	push	{ip}		; (str ip, [sp, #-4]!)
   11590:	ldr	r0, [pc, #12]	; 115a4 <__assert_fail@plt+0x674>
   11594:	ldr	r3, [pc, #12]	; 115a8 <__assert_fail@plt+0x678>
   11598:	bl	10de0 <__libc_start_main@plt>
   1159c:	bl	10f18 <abort@plt>
   115a0:	ldrdeq	r4, [r1], -r0
   115a4:	andeq	r0, r1, r4, asr pc
   115a8:	andeq	r4, r1, r0, ror r9
   115ac:	ldr	r3, [pc, #20]	; 115c8 <__assert_fail@plt+0x698>
   115b0:	ldr	r2, [pc, #20]	; 115cc <__assert_fail@plt+0x69c>
   115b4:	add	r3, pc, r3
   115b8:	ldr	r2, [r3, r2]
   115bc:	cmp	r2, #0
   115c0:	bxeq	lr
   115c4:	b	10df8 <__gmon_start__@plt>
   115c8:	andeq	r4, r1, r4, asr #20
   115cc:	andeq	r0, r0, r0, ror #1
   115d0:	ldr	r0, [pc, #24]	; 115f0 <__assert_fail@plt+0x6c0>
   115d4:	ldr	r3, [pc, #24]	; 115f4 <__assert_fail@plt+0x6c4>
   115d8:	cmp	r3, r0
   115dc:	bxeq	lr
   115e0:	ldr	r3, [pc, #16]	; 115f8 <__assert_fail@plt+0x6c8>
   115e4:	cmp	r3, #0
   115e8:	bxeq	lr
   115ec:	bx	r3
   115f0:	andeq	r6, r2, r4, lsr r1
   115f4:	andeq	r6, r2, r4, lsr r1
   115f8:	andeq	r0, r0, r0
   115fc:	ldr	r0, [pc, #36]	; 11628 <__assert_fail@plt+0x6f8>
   11600:	ldr	r1, [pc, #36]	; 1162c <__assert_fail@plt+0x6fc>
   11604:	sub	r1, r1, r0
   11608:	asr	r1, r1, #2
   1160c:	add	r1, r1, r1, lsr #31
   11610:	asrs	r1, r1, #1
   11614:	bxeq	lr
   11618:	ldr	r3, [pc, #16]	; 11630 <__assert_fail@plt+0x700>
   1161c:	cmp	r3, #0
   11620:	bxeq	lr
   11624:	bx	r3
   11628:	andeq	r6, r2, r4, lsr r1
   1162c:	andeq	r6, r2, r4, lsr r1
   11630:	andeq	r0, r0, r0
   11634:	push	{r4, lr}
   11638:	ldr	r4, [pc, #24]	; 11658 <__assert_fail@plt+0x728>
   1163c:	ldrb	r3, [r4]
   11640:	cmp	r3, #0
   11644:	popne	{r4, pc}
   11648:	bl	115d0 <__assert_fail@plt+0x6a0>
   1164c:	mov	r3, #1
   11650:	strb	r3, [r4]
   11654:	pop	{r4, pc}
   11658:	andeq	r6, r2, ip, asr r1
   1165c:	b	115fc <__assert_fail@plt+0x6cc>
   11660:	push	{r4, lr}
   11664:	mov	r5, r1
   11668:	bl	12184 <__assert_fail@plt+0x1254>
   1166c:	cmp	r0, #0
   11670:	beq	116d8 <__assert_fail@plt+0x7a8>
   11674:	ldr	r1, [pc, #96]	; 116dc <__assert_fail@plt+0x7ac>
   11678:	mov	r0, r5
   1167c:	bl	10cd8 <strcmp@plt>
   11680:	mov	r6, r0
   11684:	bl	10e40 <__errno_location@plt>
   11688:	cmp	r6, #0
   1168c:	ldr	r4, [r0]
   11690:	bne	116b4 <__assert_fail@plt+0x784>
   11694:	mov	r2, #5
   11698:	ldr	r1, [pc, #64]	; 116e0 <__assert_fail@plt+0x7b0>
   1169c:	mov	r0, r6
   116a0:	bl	10d5c <dcgettext@plt>
   116a4:	mov	r2, r0
   116a8:	mov	r1, r4
   116ac:	mov	r0, #1
   116b0:	bl	10dc8 <error@plt>
   116b4:	mov	r2, r5
   116b8:	mov	r1, #3
   116bc:	mov	r0, #0
   116c0:	bl	13824 <__assert_fail@plt+0x28f4>
   116c4:	mov	r3, r0
   116c8:	ldr	r2, [pc, #20]	; 116e4 <__assert_fail@plt+0x7b4>
   116cc:	mov	r1, r4
   116d0:	mov	r0, #1
   116d4:	bl	10dc8 <error@plt>
   116d8:	bl	10e1c <exit@plt>
   116dc:	andeq	r5, r1, sl, ror r1
   116e0:	muleq	r1, r0, sl
   116e4:	andeq	r4, r1, r1, lsr pc
   116e8:	subs	r4, r0, #0
   116ec:	push	{r7, lr}
   116f0:	sub	sp, sp, #56	; 0x38
   116f4:	ldr	r5, [pc, #564]	; 11930 <__assert_fail@plt+0xa00>
   116f8:	beq	11730 <__assert_fail@plt+0x800>
   116fc:	mov	r2, #5
   11700:	mov	r0, #0
   11704:	ldr	r3, [pc, #552]	; 11934 <__assert_fail@plt+0xa04>
   11708:	ldr	r1, [pc, #552]	; 11938 <__assert_fail@plt+0xa08>
   1170c:	ldr	r6, [r3]
   11710:	bl	10d5c <dcgettext@plt>
   11714:	mov	r2, r0
   11718:	mov	r1, #1
   1171c:	ldr	r3, [r5]
   11720:	mov	r0, r6
   11724:	bl	10e7c <__fprintf_chk@plt>
   11728:	mov	r0, r4
   1172c:	bl	10e1c <exit@plt>
   11730:	mov	r2, #5
   11734:	ldr	r1, [pc, #512]	; 1193c <__assert_fail@plt+0xa0c>
   11738:	mov	r6, sp
   1173c:	bl	10d5c <dcgettext@plt>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	ldr	r2, [r5]
   1174c:	bl	10e64 <__printf_chk@plt>
   11750:	ldr	r5, [pc, #488]	; 11940 <__assert_fail@plt+0xa10>
   11754:	mov	r2, #5
   11758:	mov	r0, r4
   1175c:	ldr	r1, [pc, #480]	; 11944 <__assert_fail@plt+0xa14>
   11760:	bl	10d5c <dcgettext@plt>
   11764:	mov	r1, r0
   11768:	mov	r2, #32
   1176c:	ldr	r7, [pc, #468]	; 11948 <__assert_fail@plt+0xa18>
   11770:	mov	r0, #1
   11774:	bl	10e64 <__printf_chk@plt>
   11778:	mov	r2, #5
   1177c:	ldr	r1, [pc, #456]	; 1194c <__assert_fail@plt+0xa1c>
   11780:	mov	r0, r4
   11784:	bl	10d5c <dcgettext@plt>
   11788:	ldr	r1, [r5]
   1178c:	bl	10ccc <fputs_unlocked@plt>
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #436]	; 11950 <__assert_fail@plt+0xa20>
   11798:	mov	r0, r4
   1179c:	bl	10d5c <dcgettext@plt>
   117a0:	ldr	r1, [r5]
   117a4:	bl	10ccc <fputs_unlocked@plt>
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #416]	; 11954 <__assert_fail@plt+0xa24>
   117b0:	mov	r0, r4
   117b4:	bl	10d5c <dcgettext@plt>
   117b8:	ldr	r1, [r5]
   117bc:	bl	10ccc <fputs_unlocked@plt>
   117c0:	mov	r2, #5
   117c4:	ldr	r1, [pc, #396]	; 11958 <__assert_fail@plt+0xa28>
   117c8:	mov	r0, r4
   117cc:	bl	10d5c <dcgettext@plt>
   117d0:	ldr	r1, [r5]
   117d4:	bl	10ccc <fputs_unlocked@plt>
   117d8:	mov	r2, #5
   117dc:	ldr	r1, [pc, #376]	; 1195c <__assert_fail@plt+0xa2c>
   117e0:	mov	r0, r4
   117e4:	bl	10d5c <dcgettext@plt>
   117e8:	ldr	r1, [r5]
   117ec:	bl	10ccc <fputs_unlocked@plt>
   117f0:	mov	r2, #5
   117f4:	ldr	r1, [pc, #356]	; 11960 <__assert_fail@plt+0xa30>
   117f8:	mov	r0, r4
   117fc:	bl	10d5c <dcgettext@plt>
   11800:	ldr	r3, [pc, #320]	; 11948 <__assert_fail@plt+0xa18>
   11804:	mov	r1, r0
   11808:	mov	r0, #1
   1180c:	mov	r2, r3
   11810:	bl	10e64 <__printf_chk@plt>
   11814:	ldr	lr, [pc, #328]	; 11964 <__assert_fail@plt+0xa34>
   11818:	mov	ip, sp
   1181c:	ldm	lr!, {r0, r1, r2, r3}
   11820:	stmia	ip!, {r0, r1, r2, r3}
   11824:	ldm	lr!, {r0, r1, r2, r3}
   11828:	stmia	ip!, {r0, r1, r2, r3}
   1182c:	ldm	lr!, {r0, r1, r2, r3}
   11830:	stmia	ip!, {r0, r1, r2, r3}
   11834:	ldm	lr, {r0, r1}
   11838:	stm	ip, {r0, r1}
   1183c:	ldr	r1, [r6]
   11840:	cmp	r1, #0
   11844:	bne	118e8 <__assert_fail@plt+0x9b8>
   11848:	ldr	r6, [r6, #4]
   1184c:	mov	r2, #5
   11850:	mov	r0, #0
   11854:	ldr	r7, [pc, #236]	; 11948 <__assert_fail@plt+0xa18>
   11858:	ldr	r1, [pc, #264]	; 11968 <__assert_fail@plt+0xa38>
   1185c:	cmp	r6, #0
   11860:	moveq	r6, r7
   11864:	bl	10d5c <dcgettext@plt>
   11868:	mov	r1, r0
   1186c:	ldr	r3, [pc, #248]	; 1196c <__assert_fail@plt+0xa3c>
   11870:	mov	r0, #1
   11874:	ldr	r2, [pc, #244]	; 11970 <__assert_fail@plt+0xa40>
   11878:	bl	10e64 <__printf_chk@plt>
   1187c:	mov	r1, #0
   11880:	mov	r0, #5
   11884:	bl	10eb8 <setlocale@plt>
   11888:	cmp	r0, #0
   1188c:	bne	11900 <__assert_fail@plt+0x9d0>
   11890:	mov	r2, #5
   11894:	ldr	r1, [pc, #216]	; 11974 <__assert_fail@plt+0xa44>
   11898:	mov	r0, #0
   1189c:	bl	10d5c <dcgettext@plt>
   118a0:	mov	r1, r0
   118a4:	ldr	r3, [pc, #156]	; 11948 <__assert_fail@plt+0xa18>
   118a8:	mov	r0, #1
   118ac:	ldr	r2, [pc, #184]	; 1196c <__assert_fail@plt+0xa3c>
   118b0:	bl	10e64 <__printf_chk@plt>
   118b4:	mov	r2, #5
   118b8:	ldr	r1, [pc, #184]	; 11978 <__assert_fail@plt+0xa48>
   118bc:	mov	r0, #0
   118c0:	bl	10d5c <dcgettext@plt>
   118c4:	ldr	r2, [pc, #176]	; 1197c <__assert_fail@plt+0xa4c>
   118c8:	cmp	r6, r7
   118cc:	mov	r1, r0
   118d0:	mov	r0, #1
   118d4:	ldr	r3, [pc, #164]	; 11980 <__assert_fail@plt+0xa50>
   118d8:	moveq	r3, r2
   118dc:	mov	r2, r6
   118e0:	bl	10e64 <__printf_chk@plt>
   118e4:	b	11728 <__assert_fail@plt+0x7f8>
   118e8:	mov	r0, r7
   118ec:	bl	10cd8 <strcmp@plt>
   118f0:	cmp	r0, #0
   118f4:	beq	11848 <__assert_fail@plt+0x918>
   118f8:	add	r6, r6, #8
   118fc:	b	1183c <__assert_fail@plt+0x90c>
   11900:	mov	r2, #3
   11904:	ldr	r1, [pc, #120]	; 11984 <__assert_fail@plt+0xa54>
   11908:	bl	10f0c <strncmp@plt>
   1190c:	cmp	r0, #0
   11910:	beq	11890 <__assert_fail@plt+0x960>
   11914:	mov	r2, #5
   11918:	ldr	r1, [pc, #104]	; 11988 <__assert_fail@plt+0xa58>
   1191c:	mov	r0, #0
   11920:	bl	10d5c <dcgettext@plt>
   11924:	ldr	r1, [r5]
   11928:	bl	10ccc <fputs_unlocked@plt>
   1192c:	b	11890 <__assert_fail@plt+0x960>
   11930:	andeq	r6, r2, r8, ror #2
   11934:	andeq	r6, r2, r8, asr #2
   11938:	andeq	r4, r1, lr, lsr #21
   1193c:	ldrdeq	r4, [r1], -r5
   11940:	andeq	r6, r2, r4, asr r1
   11944:	strdeq	r4, [r1], -r3
   11948:	andeq	r4, r1, r7, lsr #21
   1194c:	andeq	r4, r1, r9, lsr fp
   11950:	andeq	r4, r1, r1, ror fp
   11954:			; <UNDEFINED> instruction: 0x00014bbc
   11958:	andeq	r4, r1, lr, lsr #25
   1195c:	ldrdeq	r4, [r1], -fp
   11960:	andeq	r4, r1, r1, lsl sp
   11964:	strdeq	r4, [r1], -r8
   11968:	andeq	r4, r1, sp, lsl lr
   1196c:	andeq	r4, r1, r4, lsr lr
   11970:	andeq	r4, r1, ip, asr lr
   11974:			; <UNDEFINED> instruction: 0x00014eb5
   11978:	ldrdeq	r4, [r1], -r0
   1197c:	muleq	r1, lr, pc	; <UNPREDICTABLE>
   11980:	andeq	r4, r1, r2, lsl #30
   11984:	andeq	r4, r1, sl, ror #28
   11988:	andeq	r4, r1, lr, ror #28
   1198c:	cmp	r1, #7
   11990:	ble	11b50 <__assert_fail@plt+0xc20>
   11994:	push	{r4, r5, r6, lr}
   11998:	ldr	lr, [pc, #440]	; 11b58 <__assert_fail@plt+0xc28>
   1199c:	ldrb	r1, [r0]
   119a0:	ldrsb	r4, [lr, r1]
   119a4:	cmp	r4, #0
   119a8:	blt	11a58 <__assert_fail@plt+0xb28>
   119ac:	ldrb	r1, [r0, #1]
   119b0:	ldrsb	r5, [lr, r1]
   119b4:	cmp	r5, #0
   119b8:	blt	11a58 <__assert_fail@plt+0xb28>
   119bc:	ldr	ip, [r3]
   119c0:	ldr	r1, [r2]
   119c4:	cmp	ip, #0
   119c8:	beq	119e4 <__assert_fail@plt+0xab4>
   119cc:	asr	ip, r5, #2
   119d0:	orr	ip, ip, r4, lsl #3
   119d4:	strb	ip, [r1], #1
   119d8:	ldr	ip, [r3]
   119dc:	sub	ip, ip, #1
   119e0:	str	ip, [r3]
   119e4:	ldrb	ip, [r0, #2]
   119e8:	cmp	ip, #61	; 0x3d
   119ec:	bne	11a38 <__assert_fail@plt+0xb08>
   119f0:	ldrb	r3, [r0, #3]
   119f4:	cmp	r3, #61	; 0x3d
   119f8:	bne	11a54 <__assert_fail@plt+0xb24>
   119fc:	ldrb	r3, [r0, #4]
   11a00:	cmp	r3, #61	; 0x3d
   11a04:	bne	11a54 <__assert_fail@plt+0xb24>
   11a08:	ldrb	r3, [r0, #5]
   11a0c:	cmp	r3, #61	; 0x3d
   11a10:	bne	11a54 <__assert_fail@plt+0xb24>
   11a14:	ldrb	r3, [r0, #6]
   11a18:	cmp	r3, #61	; 0x3d
   11a1c:	bne	11a54 <__assert_fail@plt+0xb24>
   11a20:	ldrb	r3, [r0, #7]
   11a24:	cmp	r3, #61	; 0x3d
   11a28:	bne	11a54 <__assert_fail@plt+0xb24>
   11a2c:	mov	r0, #1
   11a30:	str	r1, [r2]
   11a34:	pop	{r4, r5, r6, pc}
   11a38:	ldrsb	ip, [lr, ip]
   11a3c:	cmp	ip, #0
   11a40:	blt	11a54 <__assert_fail@plt+0xb24>
   11a44:	ldrb	r4, [r0, #3]
   11a48:	ldrsb	r4, [lr, r4]
   11a4c:	cmp	r4, #0
   11a50:	bge	11a60 <__assert_fail@plt+0xb30>
   11a54:	str	r1, [r2]
   11a58:	mov	r0, #0
   11a5c:	pop	{r4, r5, r6, pc}
   11a60:	ldr	r6, [r3]
   11a64:	cmp	r6, #0
   11a68:	beq	11a88 <__assert_fail@plt+0xb58>
   11a6c:	lsl	ip, ip, #1
   11a70:	orr	ip, ip, r5, lsl #6
   11a74:	orr	ip, ip, r4, asr #4
   11a78:	strb	ip, [r1], #1
   11a7c:	ldr	ip, [r3]
   11a80:	sub	ip, ip, #1
   11a84:	str	ip, [r3]
   11a88:	ldrb	ip, [r0, #4]
   11a8c:	cmp	ip, #61	; 0x3d
   11a90:	beq	11a08 <__assert_fail@plt+0xad8>
   11a94:	ldrsb	r5, [lr, ip]
   11a98:	cmp	r5, #0
   11a9c:	blt	11a54 <__assert_fail@plt+0xb24>
   11aa0:	ldr	ip, [r3]
   11aa4:	cmp	ip, #0
   11aa8:	beq	11ac4 <__assert_fail@plt+0xb94>
   11aac:	asr	ip, r5, #1
   11ab0:	orr	ip, ip, r4, lsl #4
   11ab4:	strb	ip, [r1], #1
   11ab8:	ldr	ip, [r3]
   11abc:	sub	ip, ip, #1
   11ac0:	str	ip, [r3]
   11ac4:	ldrb	ip, [r0, #5]
   11ac8:	cmp	ip, #61	; 0x3d
   11acc:	beq	11a14 <__assert_fail@plt+0xae4>
   11ad0:	ldrsb	ip, [lr, ip]
   11ad4:	cmp	ip, #0
   11ad8:	blt	11a54 <__assert_fail@plt+0xb24>
   11adc:	ldrb	r4, [r0, #6]
   11ae0:	ldrsb	r4, [lr, r4]
   11ae4:	cmp	r4, #0
   11ae8:	blt	11a54 <__assert_fail@plt+0xb24>
   11aec:	ldr	r6, [r3]
   11af0:	cmp	r6, #0
   11af4:	beq	11b14 <__assert_fail@plt+0xbe4>
   11af8:	lsl	ip, ip, #2
   11afc:	orr	ip, ip, r5, lsl #7
   11b00:	orr	ip, ip, r4, asr #3
   11b04:	strb	ip, [r1], #1
   11b08:	ldr	ip, [r3]
   11b0c:	sub	ip, ip, #1
   11b10:	str	ip, [r3]
   11b14:	ldrb	r0, [r0, #7]
   11b18:	cmp	r0, #61	; 0x3d
   11b1c:	beq	11a2c <__assert_fail@plt+0xafc>
   11b20:	ldrsb	r0, [lr, r0]
   11b24:	cmp	r0, #0
   11b28:	blt	11a54 <__assert_fail@plt+0xb24>
   11b2c:	ldr	ip, [r3]
   11b30:	cmp	ip, #0
   11b34:	beq	11a2c <__assert_fail@plt+0xafc>
   11b38:	orr	r0, r0, r4, lsl #5
   11b3c:	strb	r0, [r1], #1
   11b40:	ldr	r0, [r3]
   11b44:	sub	r0, r0, #1
   11b48:	str	r0, [r3]
   11b4c:	b	11a2c <__assert_fail@plt+0xafc>
   11b50:	mov	r0, #0
   11b54:	bx	lr
   11b58:	andeq	r5, r1, r8, lsl r0
   11b5c:	push	{r4, r5, lr}
   11b60:	ldr	r4, [pc, #432]	; 11d18 <__assert_fail@plt+0xde8>
   11b64:	adds	ip, r3, #0
   11b68:	movne	ip, #1
   11b6c:	cmp	r1, #0
   11b70:	moveq	ip, #0
   11b74:	cmp	ip, #0
   11b78:	bne	11b88 <__assert_fail@plt+0xc58>
   11b7c:	cmp	r3, #0
   11b80:	strbne	ip, [r2]
   11b84:	pop	{r4, r5, pc}
   11b88:	ldrb	ip, [r0]
   11b8c:	cmp	r3, #1
   11b90:	add	lr, r4, ip, lsr #3
   11b94:	ldrb	lr, [lr, #256]	; 0x100
   11b98:	strb	lr, [r2]
   11b9c:	popeq	{r4, r5, pc}
   11ba0:	lsl	lr, ip, #2
   11ba4:	subs	ip, r1, #1
   11ba8:	ldrbne	r5, [r0, #1]
   11bac:	moveq	r5, ip
   11bb0:	lsrne	r5, r5, #6
   11bb4:	cmp	r3, #2
   11bb8:	add	lr, lr, r5
   11bbc:	and	lr, lr, #31
   11bc0:	add	lr, r4, lr
   11bc4:	ldrb	lr, [lr, #256]	; 0x100
   11bc8:	strb	lr, [r2, #1]
   11bcc:	popeq	{r4, r5, pc}
   11bd0:	cmp	ip, #0
   11bd4:	ldrbne	lr, [r0, #1]
   11bd8:	moveq	lr, #61	; 0x3d
   11bdc:	ubfxne	lr, lr, #1, #5
   11be0:	addne	lr, r4, lr
   11be4:	ldrbne	lr, [lr, #256]	; 0x100
   11be8:	cmp	r3, #3
   11bec:	strb	lr, [r2, #2]
   11bf0:	popeq	{r4, r5, pc}
   11bf4:	cmp	ip, #0
   11bf8:	moveq	r1, #61	; 0x3d
   11bfc:	beq	11c28 <__assert_fail@plt+0xcf8>
   11c00:	subs	ip, r1, #2
   11c04:	ldrb	lr, [r0, #1]
   11c08:	moveq	r1, ip
   11c0c:	ldrbne	r1, [r0, #2]
   11c10:	lsl	lr, lr, #4
   11c14:	lsrne	r1, r1, #4
   11c18:	add	lr, lr, r1
   11c1c:	and	lr, lr, #31
   11c20:	add	lr, r4, lr
   11c24:	ldrb	r1, [lr, #256]	; 0x100
   11c28:	cmp	r3, #4
   11c2c:	strb	r1, [r2, #3]
   11c30:	popeq	{r4, r5, pc}
   11c34:	cmp	ip, #0
   11c38:	moveq	r1, #61	; 0x3d
   11c3c:	beq	11c68 <__assert_fail@plt+0xd38>
   11c40:	subs	ip, ip, #1
   11c44:	ldrb	r1, [r0, #2]
   11c48:	moveq	lr, ip
   11c4c:	ldrbne	lr, [r0, #3]
   11c50:	lsl	r1, r1, #1
   11c54:	lsrne	lr, lr, #7
   11c58:	add	r1, r1, lr
   11c5c:	and	r1, r1, #31
   11c60:	add	r1, r4, r1
   11c64:	ldrb	r1, [r1, #256]	; 0x100
   11c68:	cmp	r3, #5
   11c6c:	strb	r1, [r2, #4]
   11c70:	popeq	{r4, r5, pc}
   11c74:	cmp	ip, #0
   11c78:	ldrbne	r1, [r0, #3]
   11c7c:	moveq	r1, #61	; 0x3d
   11c80:	ubfxne	r1, r1, #2, #5
   11c84:	addne	r1, r4, r1
   11c88:	ldrbne	r1, [r1, #256]	; 0x100
   11c8c:	cmp	r3, #6
   11c90:	strb	r1, [r2, #5]
   11c94:	popeq	{r4, r5, pc}
   11c98:	cmp	ip, #0
   11c9c:	moveq	r1, #61	; 0x3d
   11ca0:	beq	11ccc <__assert_fail@plt+0xd9c>
   11ca4:	subs	ip, ip, #1
   11ca8:	ldrb	r1, [r0, #3]
   11cac:	moveq	lr, ip
   11cb0:	ldrbne	lr, [r0, #4]
   11cb4:	lsl	r1, r1, #3
   11cb8:	lsrne	lr, lr, #5
   11cbc:	add	r1, r1, lr
   11cc0:	and	r1, r1, #31
   11cc4:	add	r1, r4, r1
   11cc8:	ldrb	r1, [r1, #256]	; 0x100
   11ccc:	cmp	r3, #7
   11cd0:	strb	r1, [r2, #6]
   11cd4:	popeq	{r4, r5, pc}
   11cd8:	cmp	ip, #0
   11cdc:	add	r2, r2, #8
   11ce0:	ldrbne	r1, [r0, #4]
   11ce4:	moveq	r1, #61	; 0x3d
   11ce8:	andne	r1, r1, #31
   11cec:	addne	r1, r4, r1
   11cf0:	ldrbne	r1, [r1, #256]	; 0x100
   11cf4:	subs	r3, r3, #8
   11cf8:	strb	r1, [r2, #-1]
   11cfc:	popeq	{r4, r5, pc}
   11d00:	cmp	ip, #0
   11d04:	beq	11d10 <__assert_fail@plt+0xde0>
   11d08:	subs	ip, ip, #1
   11d0c:	addne	r0, r0, #5
   11d10:	mov	r1, ip
   11d14:	b	11b64 <__assert_fail@plt+0xc34>
   11d18:	andeq	r5, r1, r8, lsl r0
   11d1c:	push	{r4, r5, r6, r7, r8, lr}
   11d20:	mov	r4, #5
   11d24:	sdiv	r4, r1, r4
   11d28:	add	r3, r4, r4, lsl #2
   11d2c:	cmp	r1, r3
   11d30:	addne	r4, r4, #1
   11d34:	asr	r7, r4, #31
   11d38:	mov	r6, r4
   11d3c:	lsl	r3, r7, #3
   11d40:	orr	r3, r3, r4, lsr #29
   11d44:	lsl	r4, r4, #3
   11d48:	cmp	r3, r4, asr #31
   11d4c:	movne	r3, #1
   11d50:	moveq	r3, #0
   11d54:	orrs	r3, r3, r1, lsr #31
   11d58:	movne	r5, #0
   11d5c:	strne	r5, [r2]
   11d60:	bne	11da0 <__assert_fail@plt+0xe70>
   11d64:	add	r5, r4, #1
   11d68:	mov	r8, r0
   11d6c:	mov	r0, r5
   11d70:	mov	r7, r2
   11d74:	mov	r6, r1
   11d78:	bl	146d8 <__assert_fail@plt+0x37a8>
   11d7c:	cmp	r0, #0
   11d80:	mov	r2, r0
   11d84:	str	r0, [r7]
   11d88:	beq	11da0 <__assert_fail@plt+0xe70>
   11d8c:	mov	r3, r5
   11d90:	mov	r1, r6
   11d94:	mov	r0, r8
   11d98:	mov	r5, r4
   11d9c:	bl	11b5c <__assert_fail@plt+0xc2c>
   11da0:	mov	r0, r5
   11da4:	pop	{r4, r5, r6, r7, r8, pc}
   11da8:	ldr	r3, [pc, #12]	; 11dbc <__assert_fail@plt+0xe8c>
   11dac:	ldrb	r0, [r3, r0]
   11db0:	mvn	r0, r0
   11db4:	ubfx	r0, r0, #7, #1
   11db8:	bx	lr
   11dbc:	andeq	r5, r1, r8, lsl r0
   11dc0:	mov	r3, #0
   11dc4:	str	r3, [r0]
   11dc8:	bx	lr
   11dcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dd0:	sub	sp, sp, #28
   11dd4:	subs	r8, r0, #0
   11dd8:	clzne	r9, r2
   11ddc:	moveq	r9, r8
   11de0:	lsrne	r9, r9, #5
   11de4:	mov	r7, r1
   11de8:	moveq	fp, r8
   11dec:	ldr	sl, [sp, #64]	; 0x40
   11df0:	str	r3, [sp, #12]
   11df4:	eor	r9, r9, #1
   11df8:	ldrne	fp, [r8]
   11dfc:	ldr	r3, [sl]
   11e00:	str	r3, [sp, #20]
   11e04:	movne	r3, #1
   11e08:	moveq	r3, #0
   11e0c:	str	r3, [sp, #4]
   11e10:	ldr	r3, [sp, #4]
   11e14:	and	r3, r9, r3
   11e18:	str	r3, [sp, #8]
   11e1c:	cmp	fp, #0
   11e20:	moveq	r3, r9
   11e24:	movne	r3, #0
   11e28:	cmp	r3, #0
   11e2c:	moveq	r4, r2
   11e30:	moveq	r5, r7
   11e34:	ldreq	r6, [sp, #20]
   11e38:	beq	11e6c <__assert_fail@plt+0xf3c>
   11e3c:	mov	r5, r7
   11e40:	add	r7, r7, r2
   11e44:	sub	r4, r7, r5
   11e48:	add	r3, sp, #20
   11e4c:	ldr	r6, [sp, #20]
   11e50:	add	r2, sp, #12
   11e54:	mov	r1, r4
   11e58:	mov	r0, r5
   11e5c:	bl	1198c <__assert_fail@plt+0xa5c>
   11e60:	cmp	r0, #0
   11e64:	addne	r5, r5, #8
   11e68:	bne	11e44 <__assert_fail@plt+0xf14>
   11e6c:	cmp	r4, #0
   11e70:	moveq	r3, r9
   11e74:	movne	r3, #0
   11e78:	cmp	r3, #0
   11e7c:	bne	11fa8 <__assert_fail@plt+0x1078>
   11e80:	cmp	r4, #0
   11e84:	beq	11eb0 <__assert_fail@plt+0xf80>
   11e88:	ldrb	r3, [r5]
   11e8c:	ldr	r2, [sp, #4]
   11e90:	cmp	r3, #10
   11e94:	movne	r2, #0
   11e98:	andeq	r2, r2, #1
   11e9c:	cmp	r2, #0
   11ea0:	mov	r3, r2
   11ea4:	addne	r7, r5, #1
   11ea8:	subne	r2, r4, #1
   11eac:	bne	11e1c <__assert_fail@plt+0xeec>
   11eb0:	ldr	r3, [sp, #20]
   11eb4:	cmp	r8, #0
   11eb8:	str	r6, [sp, #20]
   11ebc:	sub	r2, r6, r3
   11ec0:	ldr	r3, [sp, #12]
   11ec4:	add	r6, r5, r4
   11ec8:	sub	r3, r3, r2
   11ecc:	str	r3, [sp, #12]
   11ed0:	beq	11fa0 <__assert_fail@plt+0x1070>
   11ed4:	ldr	r3, [r8]
   11ed8:	cmp	r3, #8
   11edc:	moveq	r3, #0
   11ee0:	streq	r3, [r8]
   11ee4:	cmp	r4, #7
   11ee8:	ldr	r2, [r8]
   11eec:	movle	r4, #0
   11ef0:	movgt	r4, #1
   11ef4:	cmp	r2, #0
   11ef8:	movne	r4, #0
   11efc:	cmp	r4, #0
   11f00:	beq	11f24 <__assert_fail@plt+0xff4>
   11f04:	mov	r2, #8
   11f08:	mov	r1, #10
   11f0c:	mov	r0, r5
   11f10:	bl	10e88 <memchr@plt>
   11f14:	cmp	r0, #0
   11f18:	addeq	r7, r5, #8
   11f1c:	moveq	r4, #8
   11f20:	beq	11f7c <__assert_fail@plt+0x104c>
   11f24:	mov	r7, r5
   11f28:	cmp	r6, r7
   11f2c:	bls	11f58 <__assert_fail@plt+0x1028>
   11f30:	ldrb	r1, [r7], #1
   11f34:	cmp	r1, #10
   11f38:	beq	11f28 <__assert_fail@plt+0xff8>
   11f3c:	ldr	r0, [r8]
   11f40:	mov	r3, r8
   11f44:	add	r2, r0, #1
   11f48:	cmp	r2, #8
   11f4c:	str	r2, [r3], r0
   11f50:	strb	r1, [r3, #4]
   11f54:	bne	11f28 <__assert_fail@plt+0xff8>
   11f58:	mov	r5, r8
   11f5c:	ldr	r4, [r5], #4
   11f60:	cmp	r4, #0
   11f64:	beq	11fa8 <__assert_fail@plt+0x1078>
   11f68:	cmp	r4, #7
   11f6c:	bgt	11f7c <__assert_fail@plt+0x104c>
   11f70:	ldr	r3, [sp, #8]
   11f74:	cmp	r3, #0
   11f78:	bne	11fa8 <__assert_fail@plt+0x1078>
   11f7c:	add	r3, sp, #20
   11f80:	add	r2, sp, #12
   11f84:	mov	r1, r4
   11f88:	mov	r0, r5
   11f8c:	bl	1198c <__assert_fail@plt+0xa5c>
   11f90:	cmp	r0, #0
   11f94:	beq	11fac <__assert_fail@plt+0x107c>
   11f98:	sub	r2, r6, r7
   11f9c:	b	11e1c <__assert_fail@plt+0xeec>
   11fa0:	mov	r7, r5
   11fa4:	b	11f60 <__assert_fail@plt+0x1030>
   11fa8:	mov	r4, #0
   11fac:	ldr	r3, [sl]
   11fb0:	clz	r0, r4
   11fb4:	lsr	r0, r0, #5
   11fb8:	ldr	r2, [sp, #20]
   11fbc:	sub	r3, r3, r2
   11fc0:	str	r3, [sl]
   11fc4:	add	sp, sp, #28
   11fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11fcc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   11fd0:	mov	r7, r0
   11fd4:	asr	r0, r2, #3
   11fd8:	mov	r5, r3
   11fdc:	mov	r8, r1
   11fe0:	add	r0, r0, #1
   11fe4:	mov	r4, r2
   11fe8:	add	r0, r0, r0, lsl #2
   11fec:	ldr	r6, [sp, #40]	; 0x28
   11ff0:	str	r0, [sp, #12]
   11ff4:	bl	146d8 <__assert_fail@plt+0x37a8>
   11ff8:	cmp	r0, #0
   11ffc:	str	r0, [r5]
   12000:	bne	12014 <__assert_fail@plt+0x10e4>
   12004:	mov	r4, #1
   12008:	mov	r0, r4
   1200c:	add	sp, sp, #16
   12010:	pop	{r4, r5, r6, r7, r8, pc}
   12014:	add	r2, sp, #12
   12018:	mov	r3, r0
   1201c:	mov	r1, r8
   12020:	mov	r0, r7
   12024:	str	r2, [sp]
   12028:	mov	r2, r4
   1202c:	bl	11dcc <__assert_fail@plt+0xe9c>
   12030:	subs	r4, r0, #0
   12034:	bne	12048 <__assert_fail@plt+0x1118>
   12038:	ldr	r0, [r5]
   1203c:	bl	1227c <__assert_fail@plt+0x134c>
   12040:	str	r4, [r5]
   12044:	b	12008 <__assert_fail@plt+0x10d8>
   12048:	cmp	r6, #0
   1204c:	beq	12004 <__assert_fail@plt+0x10d4>
   12050:	ldr	r3, [sp, #12]
   12054:	str	r3, [r6]
   12058:	b	12008 <__assert_fail@plt+0x10d8>
   1205c:	ldr	r3, [pc, #4]	; 12068 <__assert_fail@plt+0x1138>
   12060:	str	r0, [r3]
   12064:	bx	lr
   12068:	andeq	r6, r2, r0, ror #2
   1206c:	ldr	r3, [pc, #4]	; 12078 <__assert_fail@plt+0x1148>
   12070:	strb	r0, [r3, #4]
   12074:	bx	lr
   12078:	andeq	r6, r2, r0, ror #2
   1207c:	ldr	r3, [pc, #176]	; 12134 <__assert_fail@plt+0x1204>
   12080:	push	{r0, r1, r4, r5, r6, lr}
   12084:	ldr	r0, [r3]
   12088:	bl	14748 <__assert_fail@plt+0x3818>
   1208c:	cmp	r0, #0
   12090:	beq	12118 <__assert_fail@plt+0x11e8>
   12094:	ldr	r4, [pc, #156]	; 12138 <__assert_fail@plt+0x1208>
   12098:	bl	10e40 <__errno_location@plt>
   1209c:	mov	r5, r0
   120a0:	ldrb	r6, [r4, #4]
   120a4:	cmp	r6, #0
   120a8:	beq	120b8 <__assert_fail@plt+0x1188>
   120ac:	ldr	r3, [r0]
   120b0:	cmp	r3, #32
   120b4:	beq	12118 <__assert_fail@plt+0x11e8>
   120b8:	mov	r2, #5
   120bc:	ldr	r1, [pc, #120]	; 1213c <__assert_fail@plt+0x120c>
   120c0:	mov	r0, #0
   120c4:	bl	10d5c <dcgettext@plt>
   120c8:	mov	r6, r0
   120cc:	ldr	r0, [r4]
   120d0:	cmp	r0, #0
   120d4:	beq	12104 <__assert_fail@plt+0x11d4>
   120d8:	ldr	r4, [r5]
   120dc:	bl	13814 <__assert_fail@plt+0x28e4>
   120e0:	mov	r3, r0
   120e4:	ldr	r2, [pc, #84]	; 12140 <__assert_fail@plt+0x1210>
   120e8:	mov	r0, #0
   120ec:	str	r6, [sp]
   120f0:	mov	r1, r4
   120f4:	bl	10dc8 <error@plt>
   120f8:	ldr	r3, [pc, #68]	; 12144 <__assert_fail@plt+0x1214>
   120fc:	ldr	r0, [r3]
   12100:	bl	10d14 <_exit@plt>
   12104:	mov	r3, r6
   12108:	ldr	r2, [pc, #56]	; 12148 <__assert_fail@plt+0x1218>
   1210c:	ldr	r1, [r5]
   12110:	bl	10dc8 <error@plt>
   12114:	b	120f8 <__assert_fail@plt+0x11c8>
   12118:	ldr	r3, [pc, #44]	; 1214c <__assert_fail@plt+0x121c>
   1211c:	ldr	r0, [r3]
   12120:	bl	14748 <__assert_fail@plt+0x3818>
   12124:	cmp	r0, #0
   12128:	bne	120f8 <__assert_fail@plt+0x11c8>
   1212c:	add	sp, sp, #8
   12130:	pop	{r4, r5, r6, pc}
   12134:	andeq	r6, r2, r4, asr r1
   12138:	andeq	r6, r2, r0, ror #2
   1213c:	andeq	r4, r1, r8, ror #30
   12140:	andeq	r4, r1, sp, lsr #30
   12144:	strdeq	r6, [r2], -r0
   12148:	andeq	r4, r1, r1, lsr pc
   1214c:	andeq	r6, r2, r8, asr #2
   12150:	b	10ce4 <posix_fadvise64@plt>
   12154:	cmp	r0, #0
   12158:	bxeq	lr
   1215c:	push	{r0, r1, r2, r3, r4, lr}
   12160:	mov	r4, r1
   12164:	bl	10e70 <fileno@plt>
   12168:	mov	r2, #0
   1216c:	mov	r3, #0
   12170:	strd	r2, [sp]
   12174:	str	r4, [sp, #8]
   12178:	bl	10ce4 <posix_fadvise64@plt>
   1217c:	add	sp, sp, #16
   12180:	pop	{r4, pc}
   12184:	push	{r0, r1, r2, r4, r5, lr}
   12188:	mov	r4, r0
   1218c:	bl	10e70 <fileno@plt>
   12190:	cmp	r0, #0
   12194:	mov	r0, r4
   12198:	bge	121a8 <__assert_fail@plt+0x1278>
   1219c:	add	sp, sp, #12
   121a0:	pop	{r4, r5, lr}
   121a4:	b	10ea0 <fclose@plt>
   121a8:	bl	10dec <__freading@plt>
   121ac:	cmp	r0, #0
   121b0:	bne	121ec <__assert_fail@plt+0x12bc>
   121b4:	mov	r0, r4
   121b8:	bl	1222c <__assert_fail@plt+0x12fc>
   121bc:	cmp	r0, #0
   121c0:	bne	12220 <__assert_fail@plt+0x12f0>
   121c4:	mov	r5, #0
   121c8:	mov	r0, r4
   121cc:	bl	10ea0 <fclose@plt>
   121d0:	cmp	r5, #0
   121d4:	beq	121e4 <__assert_fail@plt+0x12b4>
   121d8:	bl	10e40 <__errno_location@plt>
   121dc:	str	r5, [r0]
   121e0:	mvn	r0, #0
   121e4:	add	sp, sp, #12
   121e8:	pop	{r4, r5, pc}
   121ec:	mov	r0, r4
   121f0:	bl	10e70 <fileno@plt>
   121f4:	mov	r3, #1
   121f8:	mov	r2, #0
   121fc:	str	r3, [sp]
   12200:	mov	r3, #0
   12204:	bl	10d8c <lseek64@plt>
   12208:	mvn	r3, #0
   1220c:	mvn	r2, #0
   12210:	cmp	r1, r3
   12214:	cmpeq	r0, r2
   12218:	bne	121b4 <__assert_fail@plt+0x1284>
   1221c:	b	121c4 <__assert_fail@plt+0x1294>
   12220:	bl	10e40 <__errno_location@plt>
   12224:	ldr	r5, [r0]
   12228:	b	121c8 <__assert_fail@plt+0x1298>
   1222c:	push	{r0, r1, r4, lr}
   12230:	subs	r4, r0, #0
   12234:	bne	12248 <__assert_fail@plt+0x1318>
   12238:	mov	r0, r4
   1223c:	add	sp, sp, #8
   12240:	pop	{r4, lr}
   12244:	b	10cf0 <fflush@plt>
   12248:	bl	10dec <__freading@plt>
   1224c:	cmp	r0, #0
   12250:	beq	12238 <__assert_fail@plt+0x1308>
   12254:	ldr	r3, [r4]
   12258:	tst	r3, #256	; 0x100
   1225c:	beq	12238 <__assert_fail@plt+0x1308>
   12260:	mov	r3, #1
   12264:	mov	r2, #0
   12268:	mov	r0, r4
   1226c:	str	r3, [sp]
   12270:	mov	r3, #0
   12274:	bl	122cc <__assert_fail@plt+0x139c>
   12278:	b	12238 <__assert_fail@plt+0x1308>
   1227c:	push	{r0, r1, r2, r4, r5, lr}
   12280:	mov	r5, r0
   12284:	bl	10e40 <__errno_location@plt>
   12288:	mov	r4, r0
   1228c:	mov	r0, r5
   12290:	ldr	r3, [r4]
   12294:	str	r3, [sp]
   12298:	str	r3, [sp, #4]
   1229c:	mov	r3, #0
   122a0:	str	r3, [r4]
   122a4:	bl	10d08 <free@plt>
   122a8:	ldr	r3, [r4]
   122ac:	add	r2, sp, #8
   122b0:	clz	r3, r3
   122b4:	lsr	r3, r3, #5
   122b8:	add	r3, r2, r3, lsl #2
   122bc:	ldr	r3, [r3, #-8]
   122c0:	str	r3, [r4]
   122c4:	add	sp, sp, #12
   122c8:	pop	{r4, r5, pc}
   122cc:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   122d0:	mov	r4, r0
   122d4:	ldmib	r0, {ip, lr}
   122d8:	ldr	r8, [sp, #32]
   122dc:	cmp	lr, ip
   122e0:	bne	12350 <__assert_fail@plt+0x1420>
   122e4:	ldr	ip, [r0, #16]
   122e8:	ldr	lr, [r0, #20]
   122ec:	cmp	lr, ip
   122f0:	bne	12350 <__assert_fail@plt+0x1420>
   122f4:	ldr	r5, [r0, #36]	; 0x24
   122f8:	cmp	r5, #0
   122fc:	bne	12350 <__assert_fail@plt+0x1420>
   12300:	mov	r6, r2
   12304:	mov	r7, r3
   12308:	bl	10e70 <fileno@plt>
   1230c:	mov	r2, r6
   12310:	mov	r3, r7
   12314:	str	r8, [sp]
   12318:	bl	10d8c <lseek64@plt>
   1231c:	mvn	r3, #0
   12320:	mvn	r2, #0
   12324:	cmp	r1, r3
   12328:	cmpeq	r0, r2
   1232c:	mvneq	r0, #0
   12330:	beq	12348 <__assert_fail@plt+0x1418>
   12334:	ldr	r3, [r4]
   12338:	strd	r0, [r4, #80]	; 0x50
   1233c:	mov	r0, r5
   12340:	bic	r3, r3, #16
   12344:	str	r3, [r4]
   12348:	add	sp, sp, #8
   1234c:	pop	{r4, r5, r6, r7, r8, pc}
   12350:	mov	r0, r4
   12354:	str	r8, [sp, #32]
   12358:	add	sp, sp, #8
   1235c:	pop	{r4, r5, r6, r7, r8, lr}
   12360:	b	10eac <fseeko64@plt>
   12364:	push	{r4, r5, r6, lr}
   12368:	subs	r4, r0, #0
   1236c:	bne	12384 <__assert_fail@plt+0x1454>
   12370:	ldr	r3, [pc, #124]	; 123f4 <__assert_fail@plt+0x14c4>
   12374:	ldr	r0, [pc, #124]	; 123f8 <__assert_fail@plt+0x14c8>
   12378:	ldr	r1, [r3]
   1237c:	bl	10f00 <fputs@plt>
   12380:	bl	10f18 <abort@plt>
   12384:	mov	r1, #47	; 0x2f
   12388:	bl	10ec4 <strrchr@plt>
   1238c:	subs	r6, r0, #0
   12390:	beq	123e0 <__assert_fail@plt+0x14b0>
   12394:	add	r5, r6, #1
   12398:	sub	r3, r5, r4
   1239c:	cmp	r3, #6
   123a0:	ble	123e0 <__assert_fail@plt+0x14b0>
   123a4:	mov	r2, #7
   123a8:	ldr	r1, [pc, #76]	; 123fc <__assert_fail@plt+0x14cc>
   123ac:	sub	r0, r6, #6
   123b0:	bl	10f0c <strncmp@plt>
   123b4:	cmp	r0, #0
   123b8:	bne	123e0 <__assert_fail@plt+0x14b0>
   123bc:	mov	r2, #3
   123c0:	ldr	r1, [pc, #56]	; 12400 <__assert_fail@plt+0x14d0>
   123c4:	mov	r0, r5
   123c8:	bl	10f0c <strncmp@plt>
   123cc:	cmp	r0, #0
   123d0:	ldreq	r3, [pc, #44]	; 12404 <__assert_fail@plt+0x14d4>
   123d4:	addeq	r4, r6, #4
   123d8:	movne	r4, r5
   123dc:	streq	r4, [r3]
   123e0:	ldr	r3, [pc, #32]	; 12408 <__assert_fail@plt+0x14d8>
   123e4:	str	r4, [r3]
   123e8:	ldr	r3, [pc, #28]	; 1240c <__assert_fail@plt+0x14dc>
   123ec:	str	r4, [r3]
   123f0:	pop	{r4, r5, r6, pc}
   123f4:	andeq	r6, r2, r8, asr #2
   123f8:	andeq	r5, r1, r8, lsr r1
   123fc:	andeq	r5, r1, r0, ror r1
   12400:	andeq	r5, r1, r8, ror r1
   12404:	andeq	r6, r2, r8, lsr r1
   12408:	andeq	r6, r2, r8, ror #2
   1240c:	andeq	r6, r2, ip, lsr r1
   12410:	push	{r4, lr}
   12414:	mov	r2, #48	; 0x30
   12418:	mov	r4, r1
   1241c:	mov	r1, #0
   12420:	bl	10e58 <memset@plt>
   12424:	cmp	r4, #10
   12428:	bne	12430 <__assert_fail@plt+0x1500>
   1242c:	bl	10f18 <abort@plt>
   12430:	str	r4, [r0]
   12434:	pop	{r4, pc}
   12438:	push	{r4, r5, r6, lr}
   1243c:	mov	r2, #5
   12440:	mov	r6, r0
   12444:	mov	r5, r1
   12448:	mov	r1, r0
   1244c:	mov	r0, #0
   12450:	bl	10d5c <dcgettext@plt>
   12454:	cmp	r6, r0
   12458:	mov	r4, r0
   1245c:	bne	124cc <__assert_fail@plt+0x159c>
   12460:	bl	147e0 <__assert_fail@plt+0x38b0>
   12464:	ldrb	r3, [r0]
   12468:	bic	r3, r3, #32
   1246c:	cmp	r3, #85	; 0x55
   12470:	bne	124d4 <__assert_fail@plt+0x15a4>
   12474:	ldrb	r3, [r0, #1]
   12478:	bic	r3, r3, #32
   1247c:	cmp	r3, #84	; 0x54
   12480:	bne	12544 <__assert_fail@plt+0x1614>
   12484:	ldrb	r3, [r0, #2]
   12488:	bic	r3, r3, #32
   1248c:	cmp	r3, #70	; 0x46
   12490:	bne	12544 <__assert_fail@plt+0x1614>
   12494:	ldrb	r3, [r0, #3]
   12498:	cmp	r3, #45	; 0x2d
   1249c:	bne	12544 <__assert_fail@plt+0x1614>
   124a0:	ldrb	r3, [r0, #4]
   124a4:	cmp	r3, #56	; 0x38
   124a8:	bne	12544 <__assert_fail@plt+0x1614>
   124ac:	ldrb	r3, [r0, #5]
   124b0:	cmp	r3, #0
   124b4:	bne	12544 <__assert_fail@plt+0x1614>
   124b8:	ldrb	r2, [r4]
   124bc:	ldr	r3, [pc, #144]	; 12554 <__assert_fail@plt+0x1624>
   124c0:	ldr	r4, [pc, #144]	; 12558 <__assert_fail@plt+0x1628>
   124c4:	cmp	r2, #96	; 0x60
   124c8:	movne	r4, r3
   124cc:	mov	r0, r4
   124d0:	pop	{r4, r5, r6, pc}
   124d4:	cmp	r3, #71	; 0x47
   124d8:	bne	12544 <__assert_fail@plt+0x1614>
   124dc:	ldrb	r3, [r0, #1]
   124e0:	bic	r3, r3, #32
   124e4:	cmp	r3, #66	; 0x42
   124e8:	bne	12544 <__assert_fail@plt+0x1614>
   124ec:	ldrb	r3, [r0, #2]
   124f0:	cmp	r3, #49	; 0x31
   124f4:	bne	12544 <__assert_fail@plt+0x1614>
   124f8:	ldrb	r3, [r0, #3]
   124fc:	cmp	r3, #56	; 0x38
   12500:	bne	12544 <__assert_fail@plt+0x1614>
   12504:	ldrb	r3, [r0, #4]
   12508:	cmp	r3, #48	; 0x30
   1250c:	bne	12544 <__assert_fail@plt+0x1614>
   12510:	ldrb	r3, [r0, #5]
   12514:	cmp	r3, #51	; 0x33
   12518:	bne	12544 <__assert_fail@plt+0x1614>
   1251c:	ldrb	r3, [r0, #6]
   12520:	cmp	r3, #48	; 0x30
   12524:	bne	12544 <__assert_fail@plt+0x1614>
   12528:	ldrb	r3, [r0, #7]
   1252c:	cmp	r3, #0
   12530:	bne	12544 <__assert_fail@plt+0x1614>
   12534:	ldrb	r2, [r4]
   12538:	ldr	r3, [pc, #28]	; 1255c <__assert_fail@plt+0x162c>
   1253c:	ldr	r4, [pc, #28]	; 12560 <__assert_fail@plt+0x1630>
   12540:	b	124c4 <__assert_fail@plt+0x1594>
   12544:	ldr	r4, [pc, #24]	; 12564 <__assert_fail@plt+0x1634>
   12548:	cmp	r5, #9
   1254c:	ldr	r3, [pc, #20]	; 12568 <__assert_fail@plt+0x1638>
   12550:	b	124c8 <__assert_fail@plt+0x1598>
   12554:	ldrdeq	r5, [r1], -r2
   12558:	ldrdeq	r5, [r1], -sp
   1255c:	ldrdeq	r5, [r1], -r6
   12560:	ldrdeq	r5, [r1], -r9
   12564:	ldrdeq	r5, [r1], -r0
   12568:	andeq	r5, r1, r1, ror #3
   1256c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12570:	sub	sp, sp, #108	; 0x6c
   12574:	mov	r8, r0
   12578:	mov	r5, r1
   1257c:	mov	r6, #0
   12580:	str	r3, [sp, #40]	; 0x28
   12584:	str	r2, [sp, #48]	; 0x30
   12588:	ldr	sl, [sp, #144]	; 0x90
   1258c:	bl	10d98 <__ctype_get_mb_cur_max@plt>
   12590:	ldr	r3, [sp, #148]	; 0x94
   12594:	str	r6, [sp, #24]
   12598:	str	r6, [sp, #32]
   1259c:	str	r6, [sp, #44]	; 0x2c
   125a0:	str	r6, [sp, #52]	; 0x34
   125a4:	ubfx	r7, r3, #1, #1
   125a8:	mov	r3, #1
   125ac:	str	r6, [sp, #60]	; 0x3c
   125b0:	str	r3, [sp, #72]	; 0x48
   125b4:	str	r0, [sp, #76]	; 0x4c
   125b8:	cmp	sl, #10
   125bc:	ldrls	pc, [pc, sl, lsl #2]
   125c0:	b	12804 <__assert_fail@plt+0x18d4>
   125c4:	strdeq	r2, [r1], -r0
   125c8:	andeq	r2, r1, ip, lsl r8
   125cc:	andeq	r2, r1, r0, lsr #15
   125d0:			; <UNDEFINED> instruction: 0x000127b8
   125d4:	andeq	r2, r1, r8, lsl #15
   125d8:	andeq	r2, r1, r0, ror #13
   125dc:	andeq	r2, r1, r0, asr #13
   125e0:	andeq	r2, r1, r8, lsl #16
   125e4:	andeq	r2, r1, r0, lsl r7
   125e8:	andeq	r2, r1, r0, lsl r7
   125ec:	andeq	r2, r1, r0, lsl r7
   125f0:	mov	r4, sl
   125f4:	mov	r7, #0
   125f8:	mov	r9, r5
   125fc:	mov	r3, #0
   12600:	str	r6, [sp, #68]	; 0x44
   12604:	str	r3, [sp, #28]
   12608:	ldr	r3, [sp, #40]	; 0x28
   1260c:	cmn	r3, #1
   12610:	bne	131b0 <__assert_fail@plt+0x2280>
   12614:	ldr	r2, [sp, #28]
   12618:	ldr	r3, [sp, #48]	; 0x30
   1261c:	ldrb	r3, [r3, r2]
   12620:	adds	r3, r3, #0
   12624:	movne	r3, #1
   12628:	str	r3, [sp, #36]	; 0x24
   1262c:	ldr	r3, [sp, #36]	; 0x24
   12630:	cmp	r3, #0
   12634:	bne	12840 <__assert_fail@plt+0x1910>
   12638:	sub	r3, sl, #2
   1263c:	cmp	r4, #0
   12640:	clz	r3, r3
   12644:	movne	r2, #0
   12648:	lsr	r3, r3, #5
   1264c:	andeq	r2, r3, r7
   12650:	cmp	r2, #0
   12654:	bne	12a04 <__assert_fail@plt+0x1ad4>
   12658:	eor	r7, r7, #1
   1265c:	ands	r3, r3, r7
   12660:	beq	13228 <__assert_fail@plt+0x22f8>
   12664:	ldr	r2, [sp, #68]	; 0x44
   12668:	cmp	r2, #0
   1266c:	beq	131f0 <__assert_fail@plt+0x22c0>
   12670:	ldr	r3, [sp, #72]	; 0x48
   12674:	cmp	r3, #0
   12678:	beq	131c4 <__assert_fail@plt+0x2294>
   1267c:	ldr	r2, [sp, #48]	; 0x30
   12680:	ldr	r3, [sp, #160]	; 0xa0
   12684:	ldr	r1, [sp, #60]	; 0x3c
   12688:	str	r3, [sp, #16]
   1268c:	ldr	r3, [sp, #156]	; 0x9c
   12690:	str	r3, [sp, #12]
   12694:	ldr	r3, [sp, #152]	; 0x98
   12698:	str	r3, [sp, #8]
   1269c:	ldr	r3, [sp, #148]	; 0x94
   126a0:	str	r3, [sp, #4]
   126a4:	mov	r3, #5
   126a8:	str	r3, [sp]
   126ac:	ldr	r3, [sp, #40]	; 0x28
   126b0:	mov	r0, r8
   126b4:	bl	1256c <__assert_fail@plt+0x163c>
   126b8:	mov	r4, r0
   126bc:	b	1321c <__assert_fail@plt+0x22ec>
   126c0:	ldr	r3, [pc, #2948]	; 1324c <__assert_fail@plt+0x231c>
   126c4:	mov	r7, #1
   126c8:	mov	r4, #0
   126cc:	mov	sl, #5
   126d0:	str	r7, [sp, #24]
   126d4:	str	r7, [sp, #32]
   126d8:	str	r3, [sp, #44]	; 0x2c
   126dc:	b	125f8 <__assert_fail@plt+0x16c8>
   126e0:	cmp	r7, #0
   126e4:	bne	12828 <__assert_fail@plt+0x18f8>
   126e8:	cmp	r5, #0
   126ec:	mov	r4, #1
   126f0:	movne	r3, #34	; 0x22
   126f4:	strbne	r3, [r8]
   126f8:	mov	r3, #1
   126fc:	str	r3, [sp, #24]
   12700:	str	r3, [sp, #32]
   12704:	ldr	r3, [pc, #2880]	; 1324c <__assert_fail@plt+0x231c>
   12708:	str	r3, [sp, #44]	; 0x2c
   1270c:	b	125f8 <__assert_fail@plt+0x16c8>
   12710:	cmp	sl, #10
   12714:	beq	12738 <__assert_fail@plt+0x1808>
   12718:	mov	r1, sl
   1271c:	ldr	r0, [pc, #2860]	; 13250 <__assert_fail@plt+0x2320>
   12720:	bl	12438 <__assert_fail@plt+0x1508>
   12724:	mov	r1, sl
   12728:	str	r0, [sp, #156]	; 0x9c
   1272c:	ldr	r0, [pc, #2848]	; 13254 <__assert_fail@plt+0x2324>
   12730:	bl	12438 <__assert_fail@plt+0x1508>
   12734:	str	r0, [sp, #160]	; 0xa0
   12738:	cmp	r7, #0
   1273c:	moveq	r4, r7
   12740:	beq	12758 <__assert_fail@plt+0x1828>
   12744:	mov	r4, #0
   12748:	b	12768 <__assert_fail@plt+0x1838>
   1274c:	cmp	r5, r4
   12750:	strbhi	r3, [r8, r4]
   12754:	add	r4, r4, #1
   12758:	ldr	r3, [sp, #156]	; 0x9c
   1275c:	ldrb	r3, [r3, r4]
   12760:	cmp	r3, #0
   12764:	bne	1274c <__assert_fail@plt+0x181c>
   12768:	ldr	r0, [sp, #160]	; 0xa0
   1276c:	bl	10e28 <strlen@plt>
   12770:	ldr	r3, [sp, #160]	; 0xa0
   12774:	str	r0, [sp, #32]
   12778:	str	r3, [sp, #44]	; 0x2c
   1277c:	mov	r3, #1
   12780:	str	r3, [sp, #24]
   12784:	b	125f8 <__assert_fail@plt+0x16c8>
   12788:	mov	r3, #1
   1278c:	cmp	r7, #0
   12790:	streq	r3, [sp, #24]
   12794:	beq	127d8 <__assert_fail@plt+0x18a8>
   12798:	str	r3, [sp, #32]
   1279c:	b	127c4 <__assert_fail@plt+0x1894>
   127a0:	cmp	r7, #0
   127a4:	beq	127d8 <__assert_fail@plt+0x18a8>
   127a8:	mov	r3, #1
   127ac:	str	r3, [sp, #32]
   127b0:	ldr	r3, [pc, #2716]	; 13254 <__assert_fail@plt+0x2324>
   127b4:	b	12838 <__assert_fail@plt+0x1908>
   127b8:	mov	r7, #1
   127bc:	str	r7, [sp, #24]
   127c0:	str	r7, [sp, #32]
   127c4:	ldr	r3, [pc, #2696]	; 13254 <__assert_fail@plt+0x2324>
   127c8:	mov	r4, #0
   127cc:	str	r3, [sp, #44]	; 0x2c
   127d0:	mov	sl, #2
   127d4:	b	125f8 <__assert_fail@plt+0x16c8>
   127d8:	cmp	r5, #0
   127dc:	movne	r3, #39	; 0x27
   127e0:	movne	r7, #0
   127e4:	strbne	r3, [r8]
   127e8:	moveq	r7, r5
   127ec:	mov	r3, #1
   127f0:	mov	r4, #1
   127f4:	str	r3, [sp, #32]
   127f8:	ldr	r3, [pc, #2644]	; 13254 <__assert_fail@plt+0x2324>
   127fc:	str	r3, [sp, #44]	; 0x2c
   12800:	b	127d0 <__assert_fail@plt+0x18a0>
   12804:	bl	10f18 <abort@plt>
   12808:	mov	r3, #1
   1280c:	mov	r7, #0
   12810:	str	r3, [sp, #24]
   12814:	mov	r4, #0
   12818:	b	125f8 <__assert_fail@plt+0x16c8>
   1281c:	mov	r7, #1
   12820:	str	sl, [sp, #32]
   12824:	b	127c4 <__assert_fail@plt+0x1894>
   12828:	mov	r3, #1
   1282c:	str	r7, [sp, #24]
   12830:	str	r3, [sp, #32]
   12834:	ldr	r3, [pc, #2576]	; 1324c <__assert_fail@plt+0x231c>
   12838:	str	r3, [sp, #44]	; 0x2c
   1283c:	b	12814 <__assert_fail@plt+0x18e4>
   12840:	ldr	fp, [sp, #24]
   12844:	ldr	r3, [sp, #32]
   12848:	cmp	sl, #2
   1284c:	moveq	fp, #0
   12850:	andne	fp, fp, #1
   12854:	adds	r5, r3, #0
   12858:	movne	r5, #1
   1285c:	ands	r3, fp, r5
   12860:	str	r3, [sp, #64]	; 0x40
   12864:	beq	12934 <__assert_fail@plt+0x1a04>
   12868:	ldr	r3, [sp, #28]
   1286c:	ldr	r2, [sp, #32]
   12870:	cmp	r2, #1
   12874:	add	r6, r3, r2
   12878:	mov	r3, r2
   1287c:	ldr	r2, [sp, #40]	; 0x28
   12880:	movls	r3, #0
   12884:	movhi	r3, #1
   12888:	cmn	r2, #1
   1288c:	movne	r3, #0
   12890:	cmp	r3, #0
   12894:	beq	128a4 <__assert_fail@plt+0x1974>
   12898:	ldr	r0, [sp, #48]	; 0x30
   1289c:	bl	10e28 <strlen@plt>
   128a0:	str	r0, [sp, #40]	; 0x28
   128a4:	ldr	r3, [sp, #40]	; 0x28
   128a8:	cmp	r6, r3
   128ac:	bhi	1292c <__assert_fail@plt+0x19fc>
   128b0:	ldr	r0, [sp, #28]
   128b4:	ldr	r2, [sp, #32]
   128b8:	ldr	r3, [sp, #48]	; 0x30
   128bc:	ldr	r1, [sp, #44]	; 0x2c
   128c0:	add	r0, r3, r0
   128c4:	bl	10d44 <memcmp@plt>
   128c8:	cmp	r0, #0
   128cc:	bne	1292c <__assert_fail@plt+0x19fc>
   128d0:	cmp	r7, #0
   128d4:	beq	12934 <__assert_fail@plt+0x1a04>
   128d8:	str	r7, [sp, #24]
   128dc:	ldr	r3, [sp, #24]
   128e0:	mov	r1, r9
   128e4:	ldr	r2, [sp, #48]	; 0x30
   128e8:	cmp	sl, #2
   128ec:	movne	r3, #0
   128f0:	andeq	r3, r3, #1
   128f4:	cmp	r3, #0
   128f8:	ldr	r3, [sp, #160]	; 0xa0
   128fc:	movne	sl, #4
   12900:	str	sl, [sp]
   12904:	str	r3, [sp, #16]
   12908:	ldr	r3, [sp, #156]	; 0x9c
   1290c:	str	r3, [sp, #12]
   12910:	mov	r3, #0
   12914:	str	r3, [sp, #8]
   12918:	ldr	r3, [sp, #148]	; 0x94
   1291c:	bic	r3, r3, #2
   12920:	str	r3, [sp, #4]
   12924:	ldr	r3, [sp, #40]	; 0x28
   12928:	b	126b0 <__assert_fail@plt+0x1780>
   1292c:	mov	r3, #0
   12930:	str	r3, [sp, #64]	; 0x40
   12934:	ldr	r2, [sp, #28]
   12938:	ldr	r3, [sp, #48]	; 0x30
   1293c:	add	r3, r3, r2
   12940:	str	r3, [sp, #80]	; 0x50
   12944:	ldr	r3, [sp, #48]	; 0x30
   12948:	ldrb	r6, [r3, r2]
   1294c:	cmp	r6, #58	; 0x3a
   12950:	bhi	12ab4 <__assert_fail@plt+0x1b84>
   12954:	cmp	r6, #43	; 0x2b
   12958:	bcs	12c74 <__assert_fail@plt+0x1d44>
   1295c:	cmp	r6, #32
   12960:	beq	12cc8 <__assert_fail@plt+0x1d98>
   12964:	bhi	12a0c <__assert_fail@plt+0x1adc>
   12968:	cmp	r6, #9
   1296c:	beq	12e70 <__assert_fail@plt+0x1f40>
   12970:	bhi	129d0 <__assert_fail@plt+0x1aa0>
   12974:	cmp	r6, #7
   12978:	beq	12e80 <__assert_fail@plt+0x1f50>
   1297c:	bhi	12e9c <__assert_fail@plt+0x1f6c>
   12980:	cmp	r6, #0
   12984:	beq	12ce4 <__assert_fail@plt+0x1db4>
   12988:	ldr	r3, [sp, #76]	; 0x4c
   1298c:	cmp	r3, #1
   12990:	bne	12ee8 <__assert_fail@plt+0x1fb8>
   12994:	bl	10e10 <__ctype_b_loc@plt>
   12998:	ldr	r2, [r0]
   1299c:	sxth	r3, r6
   129a0:	lsl	r3, r3, #1
   129a4:	ldrh	r5, [r2, r3]
   129a8:	ldr	r3, [sp, #76]	; 0x4c
   129ac:	ubfx	r5, r5, #14, #1
   129b0:	str	r3, [sp, #56]	; 0x38
   129b4:	ldr	r3, [sp, #24]
   129b8:	eor	fp, r5, #1
   129bc:	and	fp, fp, r3
   129c0:	ands	fp, fp, #255	; 0xff
   129c4:	beq	12ba4 <__assert_fail@plt+0x1c74>
   129c8:	mov	r5, #0
   129cc:	b	12f94 <__assert_fail@plt+0x2064>
   129d0:	cmp	r6, #11
   129d4:	beq	12ea4 <__assert_fail@plt+0x1f74>
   129d8:	bcc	12e78 <__assert_fail@plt+0x1f48>
   129dc:	cmp	r6, #12
   129e0:	beq	12eac <__assert_fail@plt+0x1f7c>
   129e4:	cmp	r6, #13
   129e8:	moveq	r3, #114	; 0x72
   129ec:	bne	12988 <__assert_fail@plt+0x1a58>
   129f0:	cmp	sl, #2
   129f4:	movne	r2, #0
   129f8:	andeq	r2, r7, #1
   129fc:	cmp	r2, #0
   12a00:	beq	12e84 <__assert_fail@plt+0x1f54>
   12a04:	mov	sl, #2
   12a08:	b	128dc <__assert_fail@plt+0x19ac>
   12a0c:	cmp	r6, #37	; 0x25
   12a10:	beq	12c74 <__assert_fail@plt+0x1d44>
   12a14:	bhi	12a28 <__assert_fail@plt+0x1af8>
   12a18:	cmp	r6, #35	; 0x23
   12a1c:	beq	12cbc <__assert_fail@plt+0x1d8c>
   12a20:	mov	r5, #0
   12a24:	b	12ccc <__assert_fail@plt+0x1d9c>
   12a28:	cmp	r6, #39	; 0x27
   12a2c:	bne	12a20 <__assert_fail@plt+0x1af0>
   12a30:	cmp	sl, #2
   12a34:	ldrne	r5, [sp, #36]	; 0x24
   12a38:	movne	r3, r5
   12a3c:	strne	r3, [sp, #68]	; 0x44
   12a40:	bne	12dc0 <__assert_fail@plt+0x1e90>
   12a44:	cmp	r7, #0
   12a48:	bne	128dc <__assert_fail@plt+0x19ac>
   12a4c:	ldr	r3, [sp, #60]	; 0x3c
   12a50:	cmp	r9, #0
   12a54:	clz	r3, r3
   12a58:	lsr	r3, r3, #5
   12a5c:	moveq	r3, #0
   12a60:	cmp	r3, #0
   12a64:	strne	r9, [sp, #60]	; 0x3c
   12a68:	movne	r9, #0
   12a6c:	bne	12a7c <__assert_fail@plt+0x1b4c>
   12a70:	cmp	r9, r4
   12a74:	movhi	r3, #39	; 0x27
   12a78:	strbhi	r3, [r8, r4]
   12a7c:	add	r3, r4, #1
   12a80:	ldr	r5, [sp, #36]	; 0x24
   12a84:	mov	fp, #0
   12a88:	cmp	r3, r9
   12a8c:	movcc	r2, #92	; 0x5c
   12a90:	str	fp, [sp, #52]	; 0x34
   12a94:	strbcc	r2, [r8, r3]
   12a98:	add	r3, r4, #2
   12a9c:	add	r4, r4, #3
   12aa0:	cmp	r3, r9
   12aa4:	str	r5, [sp, #68]	; 0x44
   12aa8:	movcc	r2, #39	; 0x27
   12aac:	strbcc	r2, [r8, r3]
   12ab0:	b	12ba4 <__assert_fail@plt+0x1c74>
   12ab4:	cmp	r6, #94	; 0x5e
   12ab8:	beq	12a20 <__assert_fail@plt+0x1af0>
   12abc:	bhi	12c7c <__assert_fail@plt+0x1d4c>
   12ac0:	cmp	r6, #90	; 0x5a
   12ac4:	bhi	12c68 <__assert_fail@plt+0x1d38>
   12ac8:	cmp	r6, #65	; 0x41
   12acc:	bcs	12c74 <__assert_fail@plt+0x1d44>
   12ad0:	cmp	r6, #62	; 0x3e
   12ad4:	bls	12a20 <__assert_fail@plt+0x1af0>
   12ad8:	cmp	r6, #63	; 0x3f
   12adc:	bne	12988 <__assert_fail@plt+0x1a58>
   12ae0:	cmp	sl, #2
   12ae4:	beq	12dc8 <__assert_fail@plt+0x1e98>
   12ae8:	cmp	sl, #5
   12aec:	movne	fp, #0
   12af0:	bne	13198 <__assert_fail@plt+0x2268>
   12af4:	ldr	r3, [sp, #148]	; 0x94
   12af8:	tst	r3, #4
   12afc:	beq	12dd0 <__assert_fail@plt+0x1ea0>
   12b00:	ldr	r3, [sp, #28]
   12b04:	add	r2, r3, #2
   12b08:	ldr	r3, [sp, #40]	; 0x28
   12b0c:	cmp	r2, r3
   12b10:	bcs	12dd0 <__assert_fail@plt+0x1ea0>
   12b14:	ldr	r1, [sp, #28]
   12b18:	ldr	r3, [sp, #48]	; 0x30
   12b1c:	add	r3, r3, r1
   12b20:	ldrb	r1, [r3, #1]
   12b24:	cmp	r1, #63	; 0x3f
   12b28:	bne	12dd0 <__assert_fail@plt+0x1ea0>
   12b2c:	ldr	r3, [sp, #48]	; 0x30
   12b30:	ldrb	r6, [r3, r2]
   12b34:	sub	r3, r6, #33	; 0x21
   12b38:	uxtb	r3, r3
   12b3c:	cmp	r3, #29
   12b40:	bhi	131a0 <__assert_fail@plt+0x2270>
   12b44:	ldr	r0, [pc, #1804]	; 13258 <__assert_fail@plt+0x2328>
   12b48:	mov	r5, #1
   12b4c:	ands	r5, r0, r5, lsl r3
   12b50:	beq	131a8 <__assert_fail@plt+0x2278>
   12b54:	cmp	r7, #0
   12b58:	bne	128dc <__assert_fail@plt+0x19ac>
   12b5c:	cmp	r9, r4
   12b60:	add	r3, r4, #1
   12b64:	str	r2, [sp, #28]
   12b68:	mov	r5, #0
   12b6c:	strbhi	r1, [r8, r4]
   12b70:	cmp	r9, r3
   12b74:	mov	fp, r5
   12b78:	movhi	r1, #34	; 0x22
   12b7c:	strbhi	r1, [r8, r3]
   12b80:	add	r3, r4, #2
   12b84:	cmp	r9, r3
   12b88:	movhi	r1, #34	; 0x22
   12b8c:	strbhi	r1, [r8, r3]
   12b90:	add	r3, r4, #3
   12b94:	add	r4, r4, #4
   12b98:	cmp	r9, r3
   12b9c:	movhi	r1, #63	; 0x3f
   12ba0:	strbhi	r1, [r8, r3]
   12ba4:	ldr	r3, [sp, #24]
   12ba8:	eor	r3, r3, #1
   12bac:	cmp	sl, #2
   12bb0:	orreq	r3, r3, #1
   12bb4:	eor	r3, r3, #1
   12bb8:	orr	r3, r7, r3
   12bbc:	tst	r3, #255	; 0xff
   12bc0:	beq	12bec <__assert_fail@plt+0x1cbc>
   12bc4:	ldr	r3, [sp, #152]	; 0x98
   12bc8:	cmp	r3, #0
   12bcc:	beq	12bec <__assert_fail@plt+0x1cbc>
   12bd0:	ldr	r1, [sp, #152]	; 0x98
   12bd4:	ubfx	r2, r6, #5, #8
   12bd8:	and	r3, r6, #31
   12bdc:	ldr	r2, [r1, r2, lsl #2]
   12be0:	lsr	r3, r2, r3
   12be4:	tst	r3, #1
   12be8:	bne	12bf8 <__assert_fail@plt+0x1cc8>
   12bec:	ldr	r3, [sp, #64]	; 0x40
   12bf0:	cmp	r3, #0
   12bf4:	beq	12df0 <__assert_fail@plt+0x1ec0>
   12bf8:	sub	r3, sl, #2
   12bfc:	cmp	r7, #0
   12c00:	clz	r3, r3
   12c04:	lsr	r3, r3, #5
   12c08:	bne	128dc <__assert_fail@plt+0x19ac>
   12c0c:	ldr	r2, [sp, #52]	; 0x34
   12c10:	eor	r2, r2, #1
   12c14:	ands	r3, r3, r2
   12c18:	beq	12c50 <__assert_fail@plt+0x1d20>
   12c1c:	cmp	r9, r4
   12c20:	str	r3, [sp, #52]	; 0x34
   12c24:	movhi	r2, #39	; 0x27
   12c28:	strbhi	r2, [r8, r4]
   12c2c:	add	r2, r4, #1
   12c30:	cmp	r9, r2
   12c34:	movhi	r1, #36	; 0x24
   12c38:	strbhi	r1, [r8, r2]
   12c3c:	add	r2, r4, #2
   12c40:	add	r4, r4, #3
   12c44:	cmp	r9, r2
   12c48:	movhi	r1, #39	; 0x27
   12c4c:	strbhi	r1, [r8, r2]
   12c50:	cmp	r9, r4
   12c54:	ldr	fp, [sp, #36]	; 0x24
   12c58:	movhi	r3, #92	; 0x5c
   12c5c:	strbhi	r3, [r8, r4]
   12c60:	add	r4, r4, #1
   12c64:	b	12df0 <__assert_fail@plt+0x1ec0>
   12c68:	cmp	r6, #92	; 0x5c
   12c6c:	beq	12dd8 <__assert_fail@plt+0x1ea8>
   12c70:	bls	12a20 <__assert_fail@plt+0x1af0>
   12c74:	ldr	r5, [sp, #36]	; 0x24
   12c78:	b	12dc0 <__assert_fail@plt+0x1e90>
   12c7c:	cmp	r6, #122	; 0x7a
   12c80:	bhi	12ca0 <__assert_fail@plt+0x1d70>
   12c84:	cmp	r6, #97	; 0x61
   12c88:	bcs	12c74 <__assert_fail@plt+0x1d44>
   12c8c:	cmp	r6, #95	; 0x5f
   12c90:	beq	12c74 <__assert_fail@plt+0x1d44>
   12c94:	cmp	r6, #96	; 0x60
   12c98:	bne	12988 <__assert_fail@plt+0x1a58>
   12c9c:	b	12a20 <__assert_fail@plt+0x1af0>
   12ca0:	cmp	r6, #124	; 0x7c
   12ca4:	beq	12a20 <__assert_fail@plt+0x1af0>
   12ca8:	bcc	12eb4 <__assert_fail@plt+0x1f84>
   12cac:	cmp	r6, #125	; 0x7d
   12cb0:	beq	12eb4 <__assert_fail@plt+0x1f84>
   12cb4:	cmp	r6, #126	; 0x7e
   12cb8:	bne	12988 <__assert_fail@plt+0x1a58>
   12cbc:	ldr	r3, [sp, #28]
   12cc0:	cmp	r3, #0
   12cc4:	bne	12dd0 <__assert_fail@plt+0x1ea0>
   12cc8:	ldr	r5, [sp, #36]	; 0x24
   12ccc:	cmp	sl, #2
   12cd0:	movne	fp, #0
   12cd4:	andeq	fp, r7, #1
   12cd8:	cmp	fp, #0
   12cdc:	beq	12ba4 <__assert_fail@plt+0x1c74>
   12ce0:	b	12a04 <__assert_fail@plt+0x1ad4>
   12ce4:	ldr	r3, [sp, #24]
   12ce8:	cmp	r3, #0
   12cec:	beq	12db4 <__assert_fail@plt+0x1e84>
   12cf0:	sub	r2, sl, #2
   12cf4:	cmp	r7, #0
   12cf8:	clz	r2, r2
   12cfc:	lsr	r2, r2, #5
   12d00:	bne	128d8 <__assert_fail@plt+0x19a8>
   12d04:	ldr	r3, [sp, #52]	; 0x34
   12d08:	eor	r3, r3, #1
   12d0c:	ands	r2, r2, r3
   12d10:	moveq	r3, r4
   12d14:	beq	12d4c <__assert_fail@plt+0x1e1c>
   12d18:	cmp	r9, r4
   12d1c:	str	r2, [sp, #52]	; 0x34
   12d20:	movhi	r3, #39	; 0x27
   12d24:	strbhi	r3, [r8, r4]
   12d28:	add	r3, r4, #1
   12d2c:	cmp	r9, r3
   12d30:	movhi	r1, #36	; 0x24
   12d34:	strbhi	r1, [r8, r3]
   12d38:	add	r3, r4, #2
   12d3c:	cmp	r9, r3
   12d40:	movhi	r1, #39	; 0x27
   12d44:	strbhi	r1, [r8, r3]
   12d48:	add	r3, r4, #3
   12d4c:	cmp	r9, r3
   12d50:	add	r4, r3, #1
   12d54:	movhi	r2, #92	; 0x5c
   12d58:	strbhi	r2, [r8, r3]
   12d5c:	cmp	fp, #0
   12d60:	beq	13188 <__assert_fail@plt+0x2258>
   12d64:	ldr	r2, [sp, #28]
   12d68:	ldr	r1, [sp, #40]	; 0x28
   12d6c:	add	r2, r2, #1
   12d70:	cmp	r2, r1
   12d74:	bcs	12dac <__assert_fail@plt+0x1e7c>
   12d78:	ldr	r1, [sp, #48]	; 0x30
   12d7c:	mov	r6, #48	; 0x30
   12d80:	ldrb	r2, [r1, r2]
   12d84:	sub	r2, r2, #48	; 0x30
   12d88:	cmp	r2, #9
   12d8c:	bhi	13198 <__assert_fail@plt+0x2268>
   12d90:	cmp	r9, r4
   12d94:	add	r2, r3, #2
   12d98:	strbhi	r6, [r8, r4]
   12d9c:	cmp	r9, r2
   12da0:	add	r4, r3, #3
   12da4:	movhi	r1, #48	; 0x30
   12da8:	strbhi	r1, [r8, r2]
   12dac:	mov	r5, #0
   12db0:	b	13190 <__assert_fail@plt+0x2260>
   12db4:	ldr	r3, [sp, #148]	; 0x94
   12db8:	ands	r5, r3, #1
   12dbc:	bne	12e44 <__assert_fail@plt+0x1f14>
   12dc0:	mov	fp, #0
   12dc4:	b	12ba4 <__assert_fail@plt+0x1c74>
   12dc8:	cmp	r7, #0
   12dcc:	bne	128dc <__assert_fail@plt+0x19ac>
   12dd0:	mov	r5, #0
   12dd4:	b	12dc0 <__assert_fail@plt+0x1e90>
   12dd8:	cmp	sl, #2
   12ddc:	bne	12e50 <__assert_fail@plt+0x1f20>
   12de0:	cmp	r7, #0
   12de4:	bne	128dc <__assert_fail@plt+0x19ac>
   12de8:	mov	r5, r7
   12dec:	mov	fp, r7
   12df0:	ldr	r3, [sp, #52]	; 0x34
   12df4:	eor	fp, fp, #1
   12df8:	tst	r3, fp
   12dfc:	beq	12e28 <__assert_fail@plt+0x1ef8>
   12e00:	cmp	r9, r4
   12e04:	movhi	r3, #39	; 0x27
   12e08:	strbhi	r3, [r8, r4]
   12e0c:	add	r3, r4, #1
   12e10:	add	r4, r4, #2
   12e14:	cmp	r9, r3
   12e18:	movhi	r2, #39	; 0x27
   12e1c:	strbhi	r2, [r8, r3]
   12e20:	mov	r3, #0
   12e24:	str	r3, [sp, #52]	; 0x34
   12e28:	cmp	r9, r4
   12e2c:	ldr	r3, [sp, #72]	; 0x48
   12e30:	strbhi	r6, [r8, r4]
   12e34:	cmp	r5, #0
   12e38:	add	r4, r4, #1
   12e3c:	moveq	r3, #0
   12e40:	str	r3, [sp, #72]	; 0x48
   12e44:	ldr	r3, [sp, #28]
   12e48:	add	r3, r3, #1
   12e4c:	b	12604 <__assert_fail@plt+0x16d4>
   12e50:	ldr	r3, [sp, #24]
   12e54:	and	r3, r3, r7
   12e58:	tst	r5, r3
   12e5c:	moveq	r3, r6
   12e60:	beq	129f0 <__assert_fail@plt+0x1ac0>
   12e64:	mov	fp, #0
   12e68:	mov	r5, fp
   12e6c:	b	12df0 <__assert_fail@plt+0x1ec0>
   12e70:	mov	r3, #116	; 0x74
   12e74:	b	129f0 <__assert_fail@plt+0x1ac0>
   12e78:	mov	r3, #110	; 0x6e
   12e7c:	b	129f0 <__assert_fail@plt+0x1ac0>
   12e80:	mov	r3, #97	; 0x61
   12e84:	ldr	r2, [sp, #24]
   12e88:	cmp	r2, #0
   12e8c:	beq	12dd0 <__assert_fail@plt+0x1ea0>
   12e90:	mov	r6, r3
   12e94:	mov	r5, #0
   12e98:	b	12bf8 <__assert_fail@plt+0x1cc8>
   12e9c:	mov	r3, #98	; 0x62
   12ea0:	b	12e84 <__assert_fail@plt+0x1f54>
   12ea4:	mov	r3, #118	; 0x76
   12ea8:	b	12e84 <__assert_fail@plt+0x1f54>
   12eac:	mov	r3, #102	; 0x66
   12eb0:	b	12e84 <__assert_fail@plt+0x1f54>
   12eb4:	ldr	r3, [sp, #40]	; 0x28
   12eb8:	cmn	r3, #1
   12ebc:	bne	12edc <__assert_fail@plt+0x1fac>
   12ec0:	ldr	r3, [sp, #48]	; 0x30
   12ec4:	ldrb	r3, [r3, #1]
   12ec8:	adds	r3, r3, #0
   12ecc:	movne	r3, #1
   12ed0:	cmp	r3, #0
   12ed4:	bne	12dd0 <__assert_fail@plt+0x1ea0>
   12ed8:	b	12cbc <__assert_fail@plt+0x1d8c>
   12edc:	ldr	r3, [sp, #40]	; 0x28
   12ee0:	subs	r3, r3, #1
   12ee4:	b	12ecc <__assert_fail@plt+0x1f9c>
   12ee8:	mov	r3, #0
   12eec:	mov	r2, #0
   12ef0:	strd	r2, [sp, #96]	; 0x60
   12ef4:	ldr	r3, [sp, #40]	; 0x28
   12ef8:	cmn	r3, #1
   12efc:	bne	12f0c <__assert_fail@plt+0x1fdc>
   12f00:	ldr	r0, [sp, #48]	; 0x30
   12f04:	bl	10e28 <strlen@plt>
   12f08:	str	r0, [sp, #40]	; 0x28
   12f0c:	ldr	r5, [sp, #36]	; 0x24
   12f10:	mov	r3, #0
   12f14:	str	r3, [sp, #56]	; 0x38
   12f18:	ldr	r3, [sp, #28]
   12f1c:	add	r0, sp, #92	; 0x5c
   12f20:	ldr	r1, [sp, #40]	; 0x28
   12f24:	ldr	r2, [sp, #56]	; 0x38
   12f28:	add	r2, r3, r2
   12f2c:	ldr	r3, [sp, #48]	; 0x30
   12f30:	add	fp, r3, r2
   12f34:	sub	r2, r1, r2
   12f38:	add	r3, sp, #96	; 0x60
   12f3c:	mov	r1, fp
   12f40:	bl	14814 <__assert_fail@plt+0x38e4>
   12f44:	subs	r2, r0, #0
   12f48:	beq	12f88 <__assert_fail@plt+0x2058>
   12f4c:	cmn	r2, #1
   12f50:	beq	1315c <__assert_fail@plt+0x222c>
   12f54:	cmn	r2, #2
   12f58:	bne	130cc <__assert_fail@plt+0x219c>
   12f5c:	ldr	r3, [sp, #28]
   12f60:	ldr	r2, [sp, #56]	; 0x38
   12f64:	add	r3, r3, r2
   12f68:	ldr	r2, [sp, #40]	; 0x28
   12f6c:	cmp	r2, r3
   12f70:	bls	1315c <__assert_fail@plt+0x222c>
   12f74:	ldr	r2, [sp, #56]	; 0x38
   12f78:	ldr	r3, [sp, #80]	; 0x50
   12f7c:	ldrb	r5, [r3, r2]
   12f80:	cmp	r5, #0
   12f84:	bne	130bc <__assert_fail@plt+0x218c>
   12f88:	ldr	r3, [sp, #56]	; 0x38
   12f8c:	cmp	r3, #1
   12f90:	bls	129b4 <__assert_fail@plt+0x1a84>
   12f94:	ldr	r3, [sp, #28]
   12f98:	mov	fp, #0
   12f9c:	mov	ip, #92	; 0x5c
   12fa0:	ldr	r2, [sp, #56]	; 0x38
   12fa4:	add	r3, r3, r2
   12fa8:	ldr	r2, [sp, #24]
   12fac:	str	r3, [sp, #36]	; 0x24
   12fb0:	eor	r3, r5, #1
   12fb4:	and	r3, r3, r2
   12fb8:	mov	r2, #39	; 0x27
   12fbc:	uxtb	r3, r3
   12fc0:	cmp	r3, #0
   12fc4:	beq	13164 <__assert_fail@plt+0x2234>
   12fc8:	sub	r0, sl, #2
   12fcc:	cmp	r7, #0
   12fd0:	clz	r0, r0
   12fd4:	lsr	r0, r0, #5
   12fd8:	bne	128d8 <__assert_fail@plt+0x19a8>
   12fdc:	ldr	r1, [sp, #52]	; 0x34
   12fe0:	eor	r1, r1, #1
   12fe4:	ands	r1, r0, r1
   12fe8:	beq	13018 <__assert_fail@plt+0x20e8>
   12fec:	cmp	r9, r4
   12ff0:	add	r0, r4, #1
   12ff4:	str	r1, [sp, #52]	; 0x34
   12ff8:	strbhi	r2, [r8, r4]
   12ffc:	cmp	r9, r0
   13000:	movhi	lr, #36	; 0x24
   13004:	strbhi	lr, [r8, r0]
   13008:	add	r0, r4, #2
   1300c:	add	r4, r4, #3
   13010:	cmp	r9, r0
   13014:	strbhi	r2, [r8, r0]
   13018:	cmp	r9, r4
   1301c:	add	r0, r4, #1
   13020:	mov	fp, r3
   13024:	strbhi	ip, [r8, r4]
   13028:	cmp	r9, r0
   1302c:	lsrhi	r1, r6, #6
   13030:	addhi	r1, r1, #48	; 0x30
   13034:	strbhi	r1, [r8, r0]
   13038:	add	r0, r4, #2
   1303c:	add	r4, r4, #3
   13040:	cmp	r9, r0
   13044:	ubfxhi	r1, r6, #3, #3
   13048:	and	r6, r6, #7
   1304c:	add	r6, r6, #48	; 0x30
   13050:	addhi	r1, r1, #48	; 0x30
   13054:	strbhi	r1, [r8, r0]
   13058:	eor	r0, fp, #1
   1305c:	ldr	r1, [sp, #28]
   13060:	ldr	lr, [sp, #52]	; 0x34
   13064:	add	r1, r1, #1
   13068:	and	r0, r0, lr
   1306c:	ldr	lr, [sp, #36]	; 0x24
   13070:	cmp	r1, lr
   13074:	bcs	12df0 <__assert_fail@plt+0x1ec0>
   13078:	cmp	r0, #0
   1307c:	beq	130a0 <__assert_fail@plt+0x2170>
   13080:	cmp	r9, r4
   13084:	add	r0, r4, #1
   13088:	strbhi	r2, [r8, r4]
   1308c:	cmp	r9, r0
   13090:	add	r4, r4, #2
   13094:	strbhi	r2, [r8, r0]
   13098:	mov	r0, #0
   1309c:	str	r0, [sp, #52]	; 0x34
   130a0:	ldr	r0, [sp, #48]	; 0x30
   130a4:	cmp	r9, r4
   130a8:	str	r1, [sp, #28]
   130ac:	strbhi	r6, [r8, r4]
   130b0:	add	r4, r4, #1
   130b4:	ldrb	r6, [r0, r1]
   130b8:	b	12fc0 <__assert_fail@plt+0x2090>
   130bc:	ldr	r3, [sp, #56]	; 0x38
   130c0:	add	r3, r3, #1
   130c4:	str	r3, [sp, #56]	; 0x38
   130c8:	b	12f5c <__assert_fail@plt+0x202c>
   130cc:	cmp	sl, #2
   130d0:	movne	r3, #0
   130d4:	andeq	r3, r7, #1
   130d8:	cmp	r3, #0
   130dc:	movne	r1, #1
   130e0:	bne	1313c <__assert_fail@plt+0x220c>
   130e4:	ldr	r0, [sp, #92]	; 0x5c
   130e8:	str	r2, [sp, #84]	; 0x54
   130ec:	bl	10d80 <iswprint@plt>
   130f0:	ldr	r3, [sp, #56]	; 0x38
   130f4:	cmp	r0, #0
   130f8:	add	r0, sp, #96	; 0x60
   130fc:	moveq	r5, #0
   13100:	ldr	r2, [sp, #84]	; 0x54
   13104:	add	r3, r3, r2
   13108:	str	r3, [sp, #56]	; 0x38
   1310c:	bl	10d2c <mbsinit@plt>
   13110:	cmp	r0, #0
   13114:	beq	12f18 <__assert_fail@plt+0x1fe8>
   13118:	b	12f88 <__assert_fail@plt+0x2058>
   1311c:	ldrb	r3, [fp, #1]!
   13120:	cmp	r3, #94	; 0x5e
   13124:	beq	12a04 <__assert_fail@plt+0x1ad4>
   13128:	bhi	13148 <__assert_fail@plt+0x2218>
   1312c:	sub	r3, r3, #91	; 0x5b
   13130:	cmp	r3, #1
   13134:	bls	12a04 <__assert_fail@plt+0x1ad4>
   13138:	add	r1, r1, #1
   1313c:	cmp	r1, r2
   13140:	bne	1311c <__assert_fail@plt+0x21ec>
   13144:	b	130e4 <__assert_fail@plt+0x21b4>
   13148:	cmp	r3, #96	; 0x60
   1314c:	beq	12a04 <__assert_fail@plt+0x1ad4>
   13150:	cmp	r3, #124	; 0x7c
   13154:	bne	13138 <__assert_fail@plt+0x2208>
   13158:	b	12a04 <__assert_fail@plt+0x1ad4>
   1315c:	mov	r5, #0
   13160:	b	12f88 <__assert_fail@plt+0x2058>
   13164:	ldr	r1, [sp, #64]	; 0x40
   13168:	cmp	r1, #0
   1316c:	beq	13058 <__assert_fail@plt+0x2128>
   13170:	cmp	r9, r4
   13174:	mov	r1, #0
   13178:	strbhi	ip, [r8, r4]
   1317c:	add	r4, r4, #1
   13180:	str	r1, [sp, #64]	; 0x40
   13184:	b	13058 <__assert_fail@plt+0x2128>
   13188:	mov	r5, fp
   1318c:	ldr	fp, [sp, #24]
   13190:	mov	r6, #48	; 0x30
   13194:	b	12ba4 <__assert_fail@plt+0x1c74>
   13198:	mov	r5, #0
   1319c:	b	12ba4 <__assert_fail@plt+0x1c74>
   131a0:	mov	r6, r1
   131a4:	b	12dd0 <__assert_fail@plt+0x1ea0>
   131a8:	mov	r6, r1
   131ac:	b	12dc0 <__assert_fail@plt+0x1e90>
   131b0:	ldr	r2, [sp, #28]
   131b4:	ldr	r3, [sp, #40]	; 0x28
   131b8:	subs	r3, r3, r2
   131bc:	movne	r3, #1
   131c0:	b	12628 <__assert_fail@plt+0x16f8>
   131c4:	ldr	r3, [sp, #60]	; 0x3c
   131c8:	mov	sl, #2
   131cc:	ldr	r7, [sp, #72]	; 0x48
   131d0:	adds	r6, r3, #0
   131d4:	mov	r5, r3
   131d8:	movne	r6, #1
   131dc:	cmp	r9, #0
   131e0:	movne	r6, #0
   131e4:	cmp	r6, #0
   131e8:	bne	125b8 <__assert_fail@plt+0x1688>
   131ec:	ldr	r3, [sp, #68]	; 0x44
   131f0:	ldr	r2, [sp, #44]	; 0x2c
   131f4:	cmp	r2, #0
   131f8:	moveq	r3, #0
   131fc:	andne	r3, r3, #1
   13200:	cmp	r3, #0
   13204:	movne	r3, r2
   13208:	subne	r3, r3, #1
   1320c:	bne	1323c <__assert_fail@plt+0x230c>
   13210:	cmp	r9, r4
   13214:	movhi	r3, #0
   13218:	strbhi	r3, [r8, r4]
   1321c:	mov	r0, r4
   13220:	add	sp, sp, #108	; 0x6c
   13224:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13228:	mov	r3, r7
   1322c:	b	131f0 <__assert_fail@plt+0x22c0>
   13230:	cmp	r9, r4
   13234:	strbhi	r2, [r8, r4]
   13238:	add	r4, r4, #1
   1323c:	ldrb	r2, [r3, #1]!
   13240:	cmp	r2, #0
   13244:	bne	13230 <__assert_fail@plt+0x2300>
   13248:	b	13210 <__assert_fail@plt+0x22e0>
   1324c:	ldrdeq	r5, [r1], -r0
   13250:	andeq	r5, r1, r3, ror #3
   13254:	andeq	r5, r1, r1, ror #3
   13258:	stmdacc	r0, {r0, r6, r7, r8, ip, lr}
   1325c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13260:	sub	sp, sp, #52	; 0x34
   13264:	mov	r6, r0
   13268:	mov	r5, r3
   1326c:	mov	r8, r1
   13270:	mov	r9, r2
   13274:	bl	10e40 <__errno_location@plt>
   13278:	ldr	r3, [r0]
   1327c:	cmn	r6, #-2147483647	; 0x80000001
   13280:	str	r0, [sp, #24]
   13284:	ldr	r7, [pc, #368]	; 133fc <__assert_fail@plt+0x24cc>
   13288:	str	r3, [sp, #32]
   1328c:	movne	r3, #0
   13290:	moveq	r3, #1
   13294:	orrs	r3, r3, r6, lsr #31
   13298:	ldr	r4, [r7]
   1329c:	beq	132a4 <__assert_fail@plt+0x2374>
   132a0:	bl	10f18 <abort@plt>
   132a4:	ldr	r2, [r7, #4]
   132a8:	cmp	r2, r6
   132ac:	bgt	1331c <__assert_fail@plt+0x23ec>
   132b0:	add	sl, r7, #8
   132b4:	mov	r3, #8
   132b8:	cmp	r4, sl
   132bc:	add	r1, sp, #44	; 0x2c
   132c0:	str	r2, [sp, #44]	; 0x2c
   132c4:	sub	r2, r6, r2
   132c8:	movne	r0, r4
   132cc:	moveq	r0, #0
   132d0:	add	r2, r2, #1
   132d4:	str	r3, [sp]
   132d8:	mvn	r3, #-2147483648	; 0x80000000
   132dc:	bl	13fb0 <__assert_fail@plt+0x3080>
   132e0:	cmp	r4, sl
   132e4:	mov	fp, r0
   132e8:	str	r0, [r7]
   132ec:	ldmeq	r4, {r0, r1}
   132f0:	mov	r4, fp
   132f4:	ldr	r2, [sp, #44]	; 0x2c
   132f8:	stmeq	fp, {r0, r1}
   132fc:	mov	r1, #0
   13300:	ldr	r0, [r7, #4]
   13304:	sub	r2, r2, r0
   13308:	add	r0, fp, r0, lsl #3
   1330c:	lsl	r2, r2, #3
   13310:	bl	10e58 <memset@plt>
   13314:	ldr	r3, [sp, #44]	; 0x2c
   13318:	str	r3, [r7, #4]
   1331c:	ldr	r3, [r5, #4]
   13320:	add	sl, r4, r6, lsl #3
   13324:	mov	r2, r8
   13328:	ldr	fp, [r4, r6, lsl #3]
   1332c:	ldr	r7, [sl, #4]
   13330:	orr	r3, r3, #1
   13334:	str	r3, [sp, #28]
   13338:	add	r3, r5, #8
   1333c:	mov	r1, fp
   13340:	str	r3, [sp, #36]	; 0x24
   13344:	mov	r0, r7
   13348:	ldr	r3, [r5, #44]	; 0x2c
   1334c:	str	r3, [sp, #16]
   13350:	ldr	r3, [r5, #40]	; 0x28
   13354:	str	r3, [sp, #12]
   13358:	add	r3, r5, #8
   1335c:	str	r3, [sp, #8]
   13360:	ldr	r3, [sp, #28]
   13364:	str	r3, [sp, #4]
   13368:	ldr	r3, [r5]
   1336c:	str	r3, [sp]
   13370:	mov	r3, r9
   13374:	bl	1256c <__assert_fail@plt+0x163c>
   13378:	cmp	fp, r0
   1337c:	bhi	133e4 <__assert_fail@plt+0x24b4>
   13380:	ldr	r3, [pc, #120]	; 13400 <__assert_fail@plt+0x24d0>
   13384:	add	fp, r0, #1
   13388:	str	fp, [r4, r6, lsl #3]
   1338c:	cmp	r7, r3
   13390:	beq	1339c <__assert_fail@plt+0x246c>
   13394:	mov	r0, r7
   13398:	bl	1227c <__assert_fail@plt+0x134c>
   1339c:	mov	r0, fp
   133a0:	bl	13ea0 <__assert_fail@plt+0x2f70>
   133a4:	ldr	r3, [r5, #44]	; 0x2c
   133a8:	mov	r2, r8
   133ac:	mov	r1, fp
   133b0:	str	r0, [sl, #4]
   133b4:	mov	r7, r0
   133b8:	str	r3, [sp, #16]
   133bc:	ldr	r3, [r5, #40]	; 0x28
   133c0:	str	r3, [sp, #12]
   133c4:	add	r3, r5, #8
   133c8:	str	r3, [sp, #8]
   133cc:	ldr	r3, [sp, #28]
   133d0:	str	r3, [sp, #4]
   133d4:	ldr	r3, [r5]
   133d8:	str	r3, [sp]
   133dc:	mov	r3, r9
   133e0:	bl	1256c <__assert_fail@plt+0x163c>
   133e4:	ldr	r3, [sp, #24]
   133e8:	mov	r0, r7
   133ec:	ldr	r2, [sp, #32]
   133f0:	str	r2, [r3]
   133f4:	add	sp, sp, #52	; 0x34
   133f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   133fc:	strdeq	r6, [r2], -r4
   13400:	andeq	r6, r2, ip, ror #2
   13404:	push	{r4, r5, r6, lr}
   13408:	mov	r5, r0
   1340c:	bl	10e40 <__errno_location@plt>
   13410:	mov	r4, r0
   13414:	cmp	r5, #0
   13418:	ldr	r0, [pc, #20]	; 13434 <__assert_fail@plt+0x2504>
   1341c:	mov	r1, #48	; 0x30
   13420:	movne	r0, r5
   13424:	ldr	r6, [r4]
   13428:	bl	140a0 <__assert_fail@plt+0x3170>
   1342c:	str	r6, [r4]
   13430:	pop	{r4, r5, r6, pc}
   13434:	andeq	r6, r2, ip, ror #4
   13438:	ldr	r3, [pc, #12]	; 1344c <__assert_fail@plt+0x251c>
   1343c:	cmp	r0, #0
   13440:	moveq	r0, r3
   13444:	ldr	r0, [r0]
   13448:	bx	lr
   1344c:	andeq	r6, r2, ip, ror #4
   13450:	ldr	r3, [pc, #12]	; 13464 <__assert_fail@plt+0x2534>
   13454:	cmp	r0, #0
   13458:	moveq	r0, r3
   1345c:	str	r1, [r0]
   13460:	bx	lr
   13464:	andeq	r6, r2, ip, ror #4
   13468:	ldr	r3, [pc, #52]	; 134a4 <__assert_fail@plt+0x2574>
   1346c:	cmp	r0, #0
   13470:	push	{lr}		; (str lr, [sp, #-4]!)
   13474:	lsr	lr, r1, #5
   13478:	and	r1, r1, #31
   1347c:	moveq	r0, r3
   13480:	add	r3, r0, #8
   13484:	ldr	ip, [r3, lr, lsl #2]
   13488:	lsr	r0, ip, r1
   1348c:	eor	r2, r2, r0
   13490:	and	r0, r0, #1
   13494:	and	r2, r2, #1
   13498:	eor	r1, ip, r2, lsl r1
   1349c:	str	r1, [r3, lr, lsl #2]
   134a0:	pop	{pc}		; (ldr pc, [sp], #4)
   134a4:	andeq	r6, r2, ip, ror #4
   134a8:	ldr	r3, [pc, #16]	; 134c0 <__assert_fail@plt+0x2590>
   134ac:	cmp	r0, #0
   134b0:	movne	r3, r0
   134b4:	ldr	r0, [r3, #4]
   134b8:	str	r1, [r3, #4]
   134bc:	bx	lr
   134c0:	andeq	r6, r2, ip, ror #4
   134c4:	ldr	r3, [pc, #44]	; 134f8 <__assert_fail@plt+0x25c8>
   134c8:	cmp	r0, #0
   134cc:	moveq	r0, r3
   134d0:	mov	r3, #10
   134d4:	cmp	r2, #0
   134d8:	cmpne	r1, #0
   134dc:	str	r3, [r0]
   134e0:	bne	134ec <__assert_fail@plt+0x25bc>
   134e4:	push	{r4, lr}
   134e8:	bl	10f18 <abort@plt>
   134ec:	str	r1, [r0, #40]	; 0x28
   134f0:	str	r2, [r0, #44]	; 0x2c
   134f4:	bx	lr
   134f8:	andeq	r6, r2, ip, ror #4
   134fc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13500:	sub	sp, sp, #24
   13504:	mov	sl, r3
   13508:	mov	r7, r0
   1350c:	mov	r8, r1
   13510:	mov	r9, r2
   13514:	ldr	r4, [sp, #56]	; 0x38
   13518:	ldr	r3, [pc, #88]	; 13578 <__assert_fail@plt+0x2648>
   1351c:	cmp	r4, #0
   13520:	moveq	r4, r3
   13524:	bl	10e40 <__errno_location@plt>
   13528:	ldr	r3, [r4, #44]	; 0x2c
   1352c:	mov	r5, r0
   13530:	mov	r2, r9
   13534:	mov	r1, r8
   13538:	mov	r0, r7
   1353c:	ldr	r6, [r5]
   13540:	str	r3, [sp, #16]
   13544:	ldr	r3, [r4, #40]	; 0x28
   13548:	str	r3, [sp, #12]
   1354c:	add	r3, r4, #8
   13550:	str	r3, [sp, #8]
   13554:	ldr	r3, [r4, #4]
   13558:	str	r3, [sp, #4]
   1355c:	ldr	r3, [r4]
   13560:	str	r3, [sp]
   13564:	mov	r3, sl
   13568:	bl	1256c <__assert_fail@plt+0x163c>
   1356c:	str	r6, [r5]
   13570:	add	sp, sp, #24
   13574:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13578:	andeq	r6, r2, ip, ror #4
   1357c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13580:	cmp	r3, #0
   13584:	sub	sp, sp, #44	; 0x2c
   13588:	mov	r6, r2
   1358c:	mov	sl, r1
   13590:	mov	r9, r0
   13594:	ldr	r4, [pc, #176]	; 1364c <__assert_fail@plt+0x271c>
   13598:	movne	r4, r3
   1359c:	bl	10e40 <__errno_location@plt>
   135a0:	ldr	r3, [r0]
   135a4:	mov	r1, #0
   135a8:	mov	r2, r9
   135ac:	mov	r8, r0
   135b0:	mov	r0, r1
   135b4:	ldr	r5, [r4, #4]
   135b8:	add	fp, r4, #8
   135bc:	str	r3, [sp, #28]
   135c0:	ldr	r3, [r4, #44]	; 0x2c
   135c4:	cmp	r6, #0
   135c8:	orreq	r5, r5, #1
   135cc:	str	r3, [sp, #16]
   135d0:	ldr	r3, [r4, #40]	; 0x28
   135d4:	stmib	sp, {r5, fp}
   135d8:	str	r3, [sp, #12]
   135dc:	ldr	r3, [r4]
   135e0:	str	r3, [sp]
   135e4:	mov	r3, sl
   135e8:	bl	1256c <__assert_fail@plt+0x163c>
   135ec:	add	r1, r0, #1
   135f0:	mov	r7, r0
   135f4:	mov	r0, r1
   135f8:	str	r1, [sp, #36]	; 0x24
   135fc:	bl	13ea0 <__assert_fail@plt+0x2f70>
   13600:	ldr	r3, [r4, #44]	; 0x2c
   13604:	mov	r2, r9
   13608:	ldr	r1, [sp, #36]	; 0x24
   1360c:	str	r3, [sp, #16]
   13610:	ldr	r3, [r4, #40]	; 0x28
   13614:	stmib	sp, {r5, fp}
   13618:	str	r0, [sp, #32]
   1361c:	str	r3, [sp, #12]
   13620:	ldr	r3, [r4]
   13624:	str	r3, [sp]
   13628:	mov	r3, sl
   1362c:	bl	1256c <__assert_fail@plt+0x163c>
   13630:	ldr	r3, [sp, #28]
   13634:	cmp	r6, #0
   13638:	ldr	r0, [sp, #32]
   1363c:	str	r3, [r8]
   13640:	strne	r7, [r6]
   13644:	add	sp, sp, #44	; 0x2c
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364c:	andeq	r6, r2, ip, ror #4
   13650:	mov	r3, r2
   13654:	mov	r2, #0
   13658:	b	1357c <__assert_fail@plt+0x264c>
   1365c:	push	{r4, r5, r6, r7, r8, lr}
   13660:	mov	r6, #1
   13664:	ldr	r4, [pc, #100]	; 136d0 <__assert_fail@plt+0x27a0>
   13668:	ldr	r5, [r4]
   1366c:	add	r7, r5, #4
   13670:	ldr	r3, [r4, #4]
   13674:	cmp	r3, r6
   13678:	bgt	136c0 <__assert_fail@plt+0x2790>
   1367c:	ldr	r6, [pc, #80]	; 136d4 <__assert_fail@plt+0x27a4>
   13680:	ldr	r0, [r5, #4]
   13684:	cmp	r0, r6
   13688:	beq	1369c <__assert_fail@plt+0x276c>
   1368c:	bl	1227c <__assert_fail@plt+0x134c>
   13690:	mov	r3, #256	; 0x100
   13694:	str	r3, [r4, #8]
   13698:	str	r6, [r4, #12]
   1369c:	ldr	r6, [pc, #52]	; 136d8 <__assert_fail@plt+0x27a8>
   136a0:	cmp	r5, r6
   136a4:	beq	136b4 <__assert_fail@plt+0x2784>
   136a8:	mov	r0, r5
   136ac:	bl	1227c <__assert_fail@plt+0x134c>
   136b0:	str	r6, [r4]
   136b4:	mov	r3, #1
   136b8:	str	r3, [r4, #4]
   136bc:	pop	{r4, r5, r6, r7, r8, pc}
   136c0:	ldr	r0, [r7, r6, lsl #3]
   136c4:	add	r6, r6, #1
   136c8:	bl	1227c <__assert_fail@plt+0x134c>
   136cc:	b	13670 <__assert_fail@plt+0x2740>
   136d0:	strdeq	r6, [r2], -r4
   136d4:	andeq	r6, r2, ip, ror #2
   136d8:	strdeq	r6, [r2], -ip
   136dc:	ldr	r3, [pc, #4]	; 136e8 <__assert_fail@plt+0x27b8>
   136e0:	mvn	r2, #0
   136e4:	b	1325c <__assert_fail@plt+0x232c>
   136e8:	andeq	r6, r2, ip, ror #4
   136ec:	ldr	r3, [pc]	; 136f4 <__assert_fail@plt+0x27c4>
   136f0:	b	1325c <__assert_fail@plt+0x232c>
   136f4:	andeq	r6, r2, ip, ror #4
   136f8:	mov	r1, r0
   136fc:	mov	r0, #0
   13700:	b	136dc <__assert_fail@plt+0x27ac>
   13704:	mov	r2, r1
   13708:	mov	r1, r0
   1370c:	mov	r0, #0
   13710:	b	136ec <__assert_fail@plt+0x27bc>
   13714:	push	{r4, r5, lr}
   13718:	sub	sp, sp, #52	; 0x34
   1371c:	mov	r5, r2
   13720:	mov	r4, r0
   13724:	mov	r0, sp
   13728:	bl	12410 <__assert_fail@plt+0x14e0>
   1372c:	mov	r3, sp
   13730:	mvn	r2, #0
   13734:	mov	r1, r5
   13738:	mov	r0, r4
   1373c:	bl	1325c <__assert_fail@plt+0x232c>
   13740:	add	sp, sp, #52	; 0x34
   13744:	pop	{r4, r5, pc}
   13748:	push	{r4, r5, r6, lr}
   1374c:	sub	sp, sp, #48	; 0x30
   13750:	mov	r5, r2
   13754:	mov	r6, r3
   13758:	mov	r4, r0
   1375c:	mov	r0, sp
   13760:	bl	12410 <__assert_fail@plt+0x14e0>
   13764:	mov	r3, sp
   13768:	mov	r2, r6
   1376c:	mov	r1, r5
   13770:	mov	r0, r4
   13774:	bl	1325c <__assert_fail@plt+0x232c>
   13778:	add	sp, sp, #48	; 0x30
   1377c:	pop	{r4, r5, r6, pc}
   13780:	mov	r2, r1
   13784:	mov	r1, r0
   13788:	mov	r0, #0
   1378c:	b	13714 <__assert_fail@plt+0x27e4>
   13790:	mov	r3, r2
   13794:	mov	r2, r1
   13798:	mov	r1, r0
   1379c:	mov	r0, #0
   137a0:	b	13748 <__assert_fail@plt+0x2818>
   137a4:	push	{r4, r5, r6, lr}
   137a8:	mov	r4, r0
   137ac:	mov	r5, r1
   137b0:	mov	r6, r2
   137b4:	sub	sp, sp, #48	; 0x30
   137b8:	mov	ip, sp
   137bc:	ldr	lr, [pc, #64]	; 13804 <__assert_fail@plt+0x28d4>
   137c0:	ldm	lr!, {r0, r1, r2, r3}
   137c4:	stmia	ip!, {r0, r1, r2, r3}
   137c8:	ldm	lr!, {r0, r1, r2, r3}
   137cc:	stmia	ip!, {r0, r1, r2, r3}
   137d0:	ldm	lr, {r0, r1, r2, r3}
   137d4:	stm	ip, {r0, r1, r2, r3}
   137d8:	mov	r1, r6
   137dc:	mov	r2, #1
   137e0:	mov	r0, sp
   137e4:	bl	13468 <__assert_fail@plt+0x2538>
   137e8:	mov	r3, sp
   137ec:	mov	r2, r5
   137f0:	mov	r1, r4
   137f4:	mov	r0, #0
   137f8:	bl	1325c <__assert_fail@plt+0x232c>
   137fc:	add	sp, sp, #48	; 0x30
   13800:	pop	{r4, r5, r6, pc}
   13804:	andeq	r6, r2, ip, ror #4
   13808:	mov	r2, r1
   1380c:	mvn	r1, #0
   13810:	b	137a4 <__assert_fail@plt+0x2874>
   13814:	mov	r1, #58	; 0x3a
   13818:	b	13808 <__assert_fail@plt+0x28d8>
   1381c:	mov	r2, #58	; 0x3a
   13820:	b	137a4 <__assert_fail@plt+0x2874>
   13824:	push	{r4, r5, lr}
   13828:	sub	sp, sp, #100	; 0x64
   1382c:	mov	r4, r0
   13830:	mov	r0, sp
   13834:	mov	r5, r2
   13838:	bl	12410 <__assert_fail@plt+0x14e0>
   1383c:	mov	ip, sp
   13840:	add	lr, sp, #48	; 0x30
   13844:	ldm	ip!, {r0, r1, r2, r3}
   13848:	stmia	lr!, {r0, r1, r2, r3}
   1384c:	ldm	ip!, {r0, r1, r2, r3}
   13850:	stmia	lr!, {r0, r1, r2, r3}
   13854:	ldm	ip, {r0, r1, r2, r3}
   13858:	stm	lr, {r0, r1, r2, r3}
   1385c:	mov	r2, #1
   13860:	mov	r1, #58	; 0x3a
   13864:	add	r0, sp, #48	; 0x30
   13868:	bl	13468 <__assert_fail@plt+0x2538>
   1386c:	add	r3, sp, #48	; 0x30
   13870:	mvn	r2, #0
   13874:	mov	r1, r5
   13878:	mov	r0, r4
   1387c:	bl	1325c <__assert_fail@plt+0x232c>
   13880:	add	sp, sp, #100	; 0x64
   13884:	pop	{r4, r5, pc}
   13888:	push	{r4, r5, r6, r7, lr}
   1388c:	mov	r4, r0
   13890:	mov	r6, r1
   13894:	mov	r7, r2
   13898:	mov	r5, r3
   1389c:	sub	sp, sp, #52	; 0x34
   138a0:	ldr	lr, [pc, #68]	; 138ec <__assert_fail@plt+0x29bc>
   138a4:	mov	ip, sp
   138a8:	ldm	lr!, {r0, r1, r2, r3}
   138ac:	stmia	ip!, {r0, r1, r2, r3}
   138b0:	ldm	lr!, {r0, r1, r2, r3}
   138b4:	stmia	ip!, {r0, r1, r2, r3}
   138b8:	ldm	lr, {r0, r1, r2, r3}
   138bc:	stm	ip, {r0, r1, r2, r3}
   138c0:	mov	r2, r7
   138c4:	mov	r1, r6
   138c8:	mov	r0, sp
   138cc:	bl	134c4 <__assert_fail@plt+0x2594>
   138d0:	ldr	r2, [sp, #72]	; 0x48
   138d4:	mov	r3, sp
   138d8:	mov	r1, r5
   138dc:	mov	r0, r4
   138e0:	bl	1325c <__assert_fail@plt+0x232c>
   138e4:	add	sp, sp, #52	; 0x34
   138e8:	pop	{r4, r5, r6, r7, pc}
   138ec:	andeq	r6, r2, ip, ror #4
   138f0:	mvn	ip, #0
   138f4:	push	{r0, r1, r2, lr}
   138f8:	str	ip, [sp]
   138fc:	bl	13888 <__assert_fail@plt+0x2958>
   13900:	add	sp, sp, #12
   13904:	pop	{pc}		; (ldr pc, [sp], #4)
   13908:	mov	r3, r2
   1390c:	mov	r2, r1
   13910:	mov	r1, r0
   13914:	mov	r0, #0
   13918:	b	138f0 <__assert_fail@plt+0x29c0>
   1391c:	push	{r0, r1, r2, lr}
   13920:	str	r3, [sp]
   13924:	mov	r3, r2
   13928:	mov	r2, r1
   1392c:	mov	r1, r0
   13930:	mov	r0, #0
   13934:	bl	13888 <__assert_fail@plt+0x2958>
   13938:	add	sp, sp, #12
   1393c:	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	ldr	r3, [pc]	; 13948 <__assert_fail@plt+0x2a18>
   13944:	b	1325c <__assert_fail@plt+0x232c>
   13948:	andeq	r6, r2, r4, lsl #2
   1394c:	mov	r2, r1
   13950:	mov	r1, r0
   13954:	mov	r0, #0
   13958:	b	13940 <__assert_fail@plt+0x2a10>
   1395c:	mvn	r2, #0
   13960:	b	13940 <__assert_fail@plt+0x2a10>
   13964:	mov	r1, r0
   13968:	mov	r0, #0
   1396c:	b	1395c <__assert_fail@plt+0x2a2c>
   13970:	push	{r4, r5, r6, lr}
   13974:	cmp	r1, #0
   13978:	sub	sp, sp, #32
   1397c:	mov	r5, r0
   13980:	ldr	r4, [sp, #48]	; 0x30
   13984:	ldr	r6, [sp, #52]	; 0x34
   13988:	beq	13a3c <__assert_fail@plt+0x2b0c>
   1398c:	strd	r2, [sp]
   13990:	mov	r3, r1
   13994:	mov	r1, #1
   13998:	ldr	r2, [pc, #856]	; 13cf8 <__assert_fail@plt+0x2dc8>
   1399c:	bl	10e7c <__fprintf_chk@plt>
   139a0:	mov	r2, #5
   139a4:	ldr	r1, [pc, #848]	; 13cfc <__assert_fail@plt+0x2dcc>
   139a8:	mov	r0, #0
   139ac:	bl	10d5c <dcgettext@plt>
   139b0:	movw	r3, #2022	; 0x7e6
   139b4:	ldr	r2, [pc, #836]	; 13d00 <__assert_fail@plt+0x2dd0>
   139b8:	mov	r1, #1
   139bc:	str	r3, [sp]
   139c0:	mov	r3, r0
   139c4:	mov	r0, r5
   139c8:	bl	10e7c <__fprintf_chk@plt>
   139cc:	mov	r1, r5
   139d0:	mov	r0, #10
   139d4:	bl	10d50 <fputc_unlocked@plt>
   139d8:	mov	r2, #5
   139dc:	ldr	r1, [pc, #800]	; 13d04 <__assert_fail@plt+0x2dd4>
   139e0:	mov	r0, #0
   139e4:	bl	10d5c <dcgettext@plt>
   139e8:	mov	r2, r0
   139ec:	mov	r1, #1
   139f0:	ldr	r3, [pc, #784]	; 13d08 <__assert_fail@plt+0x2dd8>
   139f4:	mov	r0, r5
   139f8:	bl	10e7c <__fprintf_chk@plt>
   139fc:	mov	r1, r5
   13a00:	mov	r0, #10
   13a04:	bl	10d50 <fputc_unlocked@plt>
   13a08:	cmp	r6, #9
   13a0c:	ldrls	pc, [pc, r6, lsl #2]
   13a10:	b	13cec <__assert_fail@plt+0x2dbc>
   13a14:	andeq	r3, r1, ip, lsr #22
   13a18:	andeq	r3, r1, r4, asr sl
   13a1c:	andeq	r3, r1, r0, lsl #21
   13a20:			; <UNDEFINED> instruction: 0x00013ab4
   13a24:	strdeq	r3, [r1], -r0
   13a28:	andeq	r3, r1, r4, lsr fp
   13a2c:	andeq	r3, r1, ip, ror fp
   13a30:	andeq	r3, r1, ip, asr #23
   13a34:	andeq	r3, r1, r4, lsr #24
   13a38:	andeq	r3, r1, r4, lsl #25
   13a3c:	mov	r1, #1
   13a40:	str	r3, [sp]
   13a44:	mov	r3, r2
   13a48:	ldr	r2, [pc, #700]	; 13d0c <__assert_fail@plt+0x2ddc>
   13a4c:	bl	10e7c <__fprintf_chk@plt>
   13a50:	b	139a0 <__assert_fail@plt+0x2a70>
   13a54:	mov	r2, #5
   13a58:	ldr	r1, [pc, #688]	; 13d10 <__assert_fail@plt+0x2de0>
   13a5c:	mov	r0, #0
   13a60:	bl	10d5c <dcgettext@plt>
   13a64:	ldr	r3, [r4]
   13a68:	mov	r2, r0
   13a6c:	mov	r1, #1
   13a70:	mov	r0, r5
   13a74:	add	sp, sp, #32
   13a78:	pop	{r4, r5, r6, lr}
   13a7c:	b	10e7c <__fprintf_chk@plt>
   13a80:	mov	r2, #5
   13a84:	ldr	r1, [pc, #648]	; 13d14 <__assert_fail@plt+0x2de4>
   13a88:	mov	r0, #0
   13a8c:	bl	10d5c <dcgettext@plt>
   13a90:	ldr	r3, [r4, #4]
   13a94:	mov	r2, r0
   13a98:	mov	r1, #1
   13a9c:	mov	r0, r5
   13aa0:	str	r3, [sp, #48]	; 0x30
   13aa4:	ldr	r3, [r4]
   13aa8:	add	sp, sp, #32
   13aac:	pop	{r4, r5, r6, lr}
   13ab0:	b	10e7c <__fprintf_chk@plt>
   13ab4:	mov	r2, #5
   13ab8:	ldr	r1, [pc, #600]	; 13d18 <__assert_fail@plt+0x2de8>
   13abc:	mov	r0, #0
   13ac0:	bl	10d5c <dcgettext@plt>
   13ac4:	ldr	r3, [r4, #8]
   13ac8:	mov	r2, r0
   13acc:	mov	r1, #1
   13ad0:	mov	r0, r5
   13ad4:	str	r3, [sp, #52]	; 0x34
   13ad8:	ldr	r3, [r4, #4]
   13adc:	str	r3, [sp, #48]	; 0x30
   13ae0:	ldr	r3, [r4]
   13ae4:	add	sp, sp, #32
   13ae8:	pop	{r4, r5, r6, lr}
   13aec:	b	10e7c <__fprintf_chk@plt>
   13af0:	mov	r2, #5
   13af4:	ldr	r1, [pc, #544]	; 13d1c <__assert_fail@plt+0x2dec>
   13af8:	mov	r0, #0
   13afc:	bl	10d5c <dcgettext@plt>
   13b00:	ldr	r3, [r4, #12]
   13b04:	mov	r2, r0
   13b08:	mov	r1, #1
   13b0c:	mov	r0, r5
   13b10:	str	r3, [sp, #8]
   13b14:	ldr	r3, [r4, #8]
   13b18:	str	r3, [sp, #4]
   13b1c:	ldr	r3, [r4, #4]
   13b20:	str	r3, [sp]
   13b24:	ldr	r3, [r4]
   13b28:	bl	10e7c <__fprintf_chk@plt>
   13b2c:	add	sp, sp, #32
   13b30:	pop	{r4, r5, r6, pc}
   13b34:	mov	r2, #5
   13b38:	ldr	r1, [pc, #480]	; 13d20 <__assert_fail@plt+0x2df0>
   13b3c:	mov	r0, #0
   13b40:	bl	10d5c <dcgettext@plt>
   13b44:	ldr	r3, [r4, #16]
   13b48:	mov	r2, r0
   13b4c:	mov	r1, #1
   13b50:	mov	r0, r5
   13b54:	str	r3, [sp, #12]
   13b58:	ldr	r3, [r4, #12]
   13b5c:	str	r3, [sp, #8]
   13b60:	ldr	r3, [r4, #8]
   13b64:	str	r3, [sp, #4]
   13b68:	ldr	r3, [r4, #4]
   13b6c:	str	r3, [sp]
   13b70:	ldr	r3, [r4]
   13b74:	bl	10e7c <__fprintf_chk@plt>
   13b78:	b	13b2c <__assert_fail@plt+0x2bfc>
   13b7c:	mov	r2, #5
   13b80:	ldr	r1, [pc, #412]	; 13d24 <__assert_fail@plt+0x2df4>
   13b84:	mov	r0, #0
   13b88:	bl	10d5c <dcgettext@plt>
   13b8c:	ldr	r3, [r4, #20]
   13b90:	mov	r2, r0
   13b94:	mov	r1, #1
   13b98:	mov	r0, r5
   13b9c:	str	r3, [sp, #16]
   13ba0:	ldr	r3, [r4, #16]
   13ba4:	str	r3, [sp, #12]
   13ba8:	ldr	r3, [r4, #12]
   13bac:	str	r3, [sp, #8]
   13bb0:	ldr	r3, [r4, #8]
   13bb4:	str	r3, [sp, #4]
   13bb8:	ldr	r3, [r4, #4]
   13bbc:	str	r3, [sp]
   13bc0:	ldr	r3, [r4]
   13bc4:	bl	10e7c <__fprintf_chk@plt>
   13bc8:	b	13b2c <__assert_fail@plt+0x2bfc>
   13bcc:	mov	r2, #5
   13bd0:	ldr	r1, [pc, #336]	; 13d28 <__assert_fail@plt+0x2df8>
   13bd4:	mov	r0, #0
   13bd8:	bl	10d5c <dcgettext@plt>
   13bdc:	ldr	r3, [r4, #24]
   13be0:	mov	r2, r0
   13be4:	mov	r1, #1
   13be8:	mov	r0, r5
   13bec:	str	r3, [sp, #20]
   13bf0:	ldr	r3, [r4, #20]
   13bf4:	str	r3, [sp, #16]
   13bf8:	ldr	r3, [r4, #16]
   13bfc:	str	r3, [sp, #12]
   13c00:	ldr	r3, [r4, #12]
   13c04:	str	r3, [sp, #8]
   13c08:	ldr	r3, [r4, #8]
   13c0c:	str	r3, [sp, #4]
   13c10:	ldr	r3, [r4, #4]
   13c14:	str	r3, [sp]
   13c18:	ldr	r3, [r4]
   13c1c:	bl	10e7c <__fprintf_chk@plt>
   13c20:	b	13b2c <__assert_fail@plt+0x2bfc>
   13c24:	mov	r2, #5
   13c28:	ldr	r1, [pc, #252]	; 13d2c <__assert_fail@plt+0x2dfc>
   13c2c:	mov	r0, #0
   13c30:	bl	10d5c <dcgettext@plt>
   13c34:	ldr	r3, [r4, #28]
   13c38:	mov	r2, r0
   13c3c:	mov	r1, #1
   13c40:	mov	r0, r5
   13c44:	str	r3, [sp, #24]
   13c48:	ldr	r3, [r4, #24]
   13c4c:	str	r3, [sp, #20]
   13c50:	ldr	r3, [r4, #20]
   13c54:	str	r3, [sp, #16]
   13c58:	ldr	r3, [r4, #16]
   13c5c:	str	r3, [sp, #12]
   13c60:	ldr	r3, [r4, #12]
   13c64:	str	r3, [sp, #8]
   13c68:	ldr	r3, [r4, #8]
   13c6c:	str	r3, [sp, #4]
   13c70:	ldr	r3, [r4, #4]
   13c74:	str	r3, [sp]
   13c78:	ldr	r3, [r4]
   13c7c:	bl	10e7c <__fprintf_chk@plt>
   13c80:	b	13b2c <__assert_fail@plt+0x2bfc>
   13c84:	ldr	r1, [pc, #164]	; 13d30 <__assert_fail@plt+0x2e00>
   13c88:	mov	r2, #5
   13c8c:	mov	r0, #0
   13c90:	bl	10d5c <dcgettext@plt>
   13c94:	ldr	r3, [r4, #32]
   13c98:	mov	r2, r0
   13c9c:	mov	r1, #1
   13ca0:	mov	r0, r5
   13ca4:	str	r3, [sp, #28]
   13ca8:	ldr	r3, [r4, #28]
   13cac:	str	r3, [sp, #24]
   13cb0:	ldr	r3, [r4, #24]
   13cb4:	str	r3, [sp, #20]
   13cb8:	ldr	r3, [r4, #20]
   13cbc:	str	r3, [sp, #16]
   13cc0:	ldr	r3, [r4, #16]
   13cc4:	str	r3, [sp, #12]
   13cc8:	ldr	r3, [r4, #12]
   13ccc:	str	r3, [sp, #8]
   13cd0:	ldr	r3, [r4, #8]
   13cd4:	str	r3, [sp, #4]
   13cd8:	ldr	r3, [r4, #4]
   13cdc:	str	r3, [sp]
   13ce0:	ldr	r3, [r4]
   13ce4:	bl	10e7c <__fprintf_chk@plt>
   13ce8:	b	13b2c <__assert_fail@plt+0x2bfc>
   13cec:	mov	r2, #5
   13cf0:	ldr	r1, [pc, #60]	; 13d34 <__assert_fail@plt+0x2e04>
   13cf4:	b	13c8c <__assert_fail@plt+0x2d5c>
   13cf8:	andeq	r5, r1, r1, lsr r2
   13cfc:	andeq	r5, r1, r4, asr #4
   13d00:	andeq	r5, r1, r2, lsl r5
   13d04:	andeq	r5, r1, r8, asr #4
   13d08:	strdeq	r5, [r1], -r3
   13d0c:	andeq	r5, r1, sp, lsr r2
   13d10:	andeq	r5, r1, r5, lsl r3
   13d14:	andeq	r5, r1, r5, lsr #6
   13d18:	andeq	r5, r1, ip, lsr r3
   13d1c:	andeq	r5, r1, r8, asr r3
   13d20:	andeq	r5, r1, r8, ror r3
   13d24:	muleq	r1, ip, r3
   13d28:	andeq	r5, r1, r4, asr #7
   13d2c:	strdeq	r5, [r1], -r0
   13d30:	andeq	r5, r1, r0, lsr #8
   13d34:	andeq	r5, r1, r4, asr r4
   13d38:	push	{r0, r1, r4, lr}
   13d3c:	mov	ip, #0
   13d40:	ldr	lr, [sp, #16]
   13d44:	ldr	r4, [lr, ip, lsl #2]
   13d48:	cmp	r4, #0
   13d4c:	bne	13d64 <__assert_fail@plt+0x2e34>
   13d50:	str	lr, [sp]
   13d54:	str	ip, [sp, #4]
   13d58:	bl	13970 <__assert_fail@plt+0x2a40>
   13d5c:	add	sp, sp, #8
   13d60:	pop	{r4, pc}
   13d64:	add	ip, ip, #1
   13d68:	b	13d44 <__assert_fail@plt+0x2e14>
   13d6c:	push	{r4, r5, r6, lr}
   13d70:	sub	sp, sp, #48	; 0x30
   13d74:	mov	ip, #0
   13d78:	add	lr, sp, #8
   13d7c:	mov	r5, lr
   13d80:	ldr	r6, [sp, #64]	; 0x40
   13d84:	ldr	r4, [r6, ip, lsl #2]
   13d88:	cmp	r4, #0
   13d8c:	str	r4, [lr], #4
   13d90:	beq	13da0 <__assert_fail@plt+0x2e70>
   13d94:	add	ip, ip, #1
   13d98:	cmp	ip, #10
   13d9c:	bne	13d84 <__assert_fail@plt+0x2e54>
   13da0:	stm	sp, {r5, ip}
   13da4:	bl	13970 <__assert_fail@plt+0x2a40>
   13da8:	add	sp, sp, #48	; 0x30
   13dac:	pop	{r4, r5, r6, pc}
   13db0:	push	{r3}		; (str r3, [sp, #-4]!)
   13db4:	push	{r0, r1, r2, r3, lr}
   13db8:	add	r3, sp, #24
   13dbc:	str	r3, [sp]
   13dc0:	str	r3, [sp, #12]
   13dc4:	ldr	r3, [sp, #20]
   13dc8:	bl	13d6c <__assert_fail@plt+0x2e3c>
   13dcc:	add	sp, sp, #16
   13dd0:	pop	{lr}		; (ldr lr, [sp], #4)
   13dd4:	add	sp, sp, #4
   13dd8:	bx	lr
   13ddc:	ldr	r3, [pc, #116]	; 13e58 <__assert_fail@plt+0x2f28>
   13de0:	mov	r0, #10
   13de4:	push	{r4, lr}
   13de8:	ldr	r1, [r3]
   13dec:	bl	10d50 <fputc_unlocked@plt>
   13df0:	mov	r2, #5
   13df4:	ldr	r1, [pc, #96]	; 13e5c <__assert_fail@plt+0x2f2c>
   13df8:	mov	r0, #0
   13dfc:	bl	10d5c <dcgettext@plt>
   13e00:	mov	r1, r0
   13e04:	ldr	r2, [pc, #84]	; 13e60 <__assert_fail@plt+0x2f30>
   13e08:	mov	r0, #1
   13e0c:	bl	10e64 <__printf_chk@plt>
   13e10:	mov	r2, #5
   13e14:	ldr	r1, [pc, #72]	; 13e64 <__assert_fail@plt+0x2f34>
   13e18:	mov	r0, #0
   13e1c:	bl	10d5c <dcgettext@plt>
   13e20:	mov	r1, r0
   13e24:	ldr	r3, [pc, #60]	; 13e68 <__assert_fail@plt+0x2f38>
   13e28:	mov	r0, #1
   13e2c:	ldr	r2, [pc, #56]	; 13e6c <__assert_fail@plt+0x2f3c>
   13e30:	bl	10e64 <__printf_chk@plt>
   13e34:	mov	r2, #5
   13e38:	ldr	r1, [pc, #48]	; 13e70 <__assert_fail@plt+0x2f40>
   13e3c:	mov	r0, #0
   13e40:	bl	10d5c <dcgettext@plt>
   13e44:	mov	r1, r0
   13e48:	ldr	r2, [pc, #36]	; 13e74 <__assert_fail@plt+0x2f44>
   13e4c:	mov	r0, #1
   13e50:	pop	{r4, lr}
   13e54:	b	10e64 <__printf_chk@plt>
   13e58:	andeq	r6, r2, r4, asr r1
   13e5c:	muleq	r1, r0, r4
   13e60:	andeq	r5, r1, r4, lsr #9
   13e64:			; <UNDEFINED> instruction: 0x000154ba
   13e68:	andeq	r4, r1, r4, lsr lr
   13e6c:	andeq	r4, r1, ip, asr lr
   13e70:	andeq	r5, r1, lr, asr #9
   13e74:	strdeq	r5, [r1], -r5	; <UNPREDICTABLE>
   13e78:	push	{r4, lr}
   13e7c:	bl	146d8 <__assert_fail@plt+0x37a8>
   13e80:	cmp	r0, #0
   13e84:	popne	{r4, pc}
   13e88:	bl	14130 <__assert_fail@plt+0x3200>
   13e8c:	push	{r4, lr}
   13e90:	bl	146d8 <__assert_fail@plt+0x37a8>
   13e94:	cmp	r0, #0
   13e98:	popne	{r4, pc}
   13e9c:	bl	14130 <__assert_fail@plt+0x3200>
   13ea0:	b	13e78 <__assert_fail@plt+0x2f48>
   13ea4:	push	{r4, r5, r6, lr}
   13ea8:	mov	r5, r0
   13eac:	mov	r4, r1
   13eb0:	bl	14704 <__assert_fail@plt+0x37d4>
   13eb4:	cmp	r0, #0
   13eb8:	popne	{r4, r5, r6, pc}
   13ebc:	adds	r4, r4, #0
   13ec0:	movne	r4, #1
   13ec4:	cmp	r5, #0
   13ec8:	moveq	r4, #1
   13ecc:	cmp	r4, #0
   13ed0:	popeq	{r4, r5, r6, pc}
   13ed4:	bl	14130 <__assert_fail@plt+0x3200>
   13ed8:	push	{r4, lr}
   13edc:	bl	147bc <__assert_fail@plt+0x388c>
   13ee0:	cmp	r0, #0
   13ee4:	popne	{r4, pc}
   13ee8:	bl	14130 <__assert_fail@plt+0x3200>
   13eec:	push	{r4, r5, r6, lr}
   13ef0:	mov	r6, r0
   13ef4:	mov	r5, r1
   13ef8:	mov	r4, r2
   13efc:	bl	14864 <__assert_fail@plt+0x3934>
   13f00:	cmp	r0, #0
   13f04:	popne	{r4, r5, r6, pc}
   13f08:	cmp	r6, #0
   13f0c:	beq	13f1c <__assert_fail@plt+0x2fec>
   13f10:	cmp	r5, #0
   13f14:	cmpne	r4, #0
   13f18:	popeq	{r4, r5, r6, pc}
   13f1c:	bl	14130 <__assert_fail@plt+0x3200>
   13f20:	b	13eec <__assert_fail@plt+0x2fbc>
   13f24:	push	{r4, lr}
   13f28:	bl	147cc <__assert_fail@plt+0x389c>
   13f2c:	cmp	r0, #0
   13f30:	popne	{r4, pc}
   13f34:	bl	14130 <__assert_fail@plt+0x3200>
   13f38:	mov	r2, r1
   13f3c:	mov	r1, r0
   13f40:	mov	r0, #0
   13f44:	b	13eec <__assert_fail@plt+0x2fbc>
   13f48:	mov	r2, r1
   13f4c:	mov	r1, r0
   13f50:	mov	r0, #0
   13f54:	b	13f24 <__assert_fail@plt+0x2ff4>
   13f58:	cmp	r0, #0
   13f5c:	push	{r4, r5, r6, lr}
   13f60:	mov	r5, r1
   13f64:	ldr	r4, [r1]
   13f68:	bne	13f94 <__assert_fail@plt+0x3064>
   13f6c:	cmp	r4, #0
   13f70:	bne	13f84 <__assert_fail@plt+0x3054>
   13f74:	mov	r4, #64	; 0x40
   13f78:	udiv	r4, r4, r2
   13f7c:	cmp	r2, #64	; 0x40
   13f80:	addhi	r4, r4, #1
   13f84:	mov	r1, r4
   13f88:	bl	13eec <__assert_fail@plt+0x2fbc>
   13f8c:	str	r4, [r5]
   13f90:	pop	{r4, r5, r6, pc}
   13f94:	lsr	r3, r4, #1
   13f98:	add	r3, r3, #1
   13f9c:	adds	r4, r4, r3
   13fa0:	bcc	13f84 <__assert_fail@plt+0x3054>
   13fa4:	bl	14130 <__assert_fail@plt+0x3200>
   13fa8:	mov	r2, #1
   13fac:	b	13f58 <__assert_fail@plt+0x3028>
   13fb0:	ldr	ip, [r1]
   13fb4:	push	{r4, r5, r6, r7, r8, lr}
   13fb8:	mov	r5, r1
   13fbc:	mvn	r8, r3
   13fc0:	lsr	r8, r8, #31
   13fc4:	ldr	lr, [sp, #24]
   13fc8:	asr	r1, ip, #1
   13fcc:	adds	r4, ip, r1
   13fd0:	mvnvs	r4, #-2147483648	; 0x80000000
   13fd4:	cmp	r3, r4
   13fd8:	movge	r1, #0
   13fdc:	andlt	r1, r8, #1
   13fe0:	cmp	r1, #0
   13fe4:	movne	r4, r3
   13fe8:	smull	r6, r7, r4, lr
   13fec:	cmp	r7, r6, asr #31
   13ff0:	bne	14008 <__assert_fail@plt+0x30d8>
   13ff4:	cmp	r6, #63	; 0x3f
   13ff8:	mov	r1, r6
   13ffc:	bgt	14018 <__assert_fail@plt+0x30e8>
   14000:	mov	r1, #64	; 0x40
   14004:	b	1400c <__assert_fail@plt+0x30dc>
   14008:	mvn	r1, #-2147483648	; 0x80000000
   1400c:	sdiv	r4, r1, lr
   14010:	mls	r6, lr, r4, r1
   14014:	sub	r1, r1, r6
   14018:	cmp	r0, #0
   1401c:	sub	r6, r4, ip
   14020:	streq	r0, [r5]
   14024:	cmp	r6, r2
   14028:	bge	1405c <__assert_fail@plt+0x312c>
   1402c:	adds	r4, ip, r2
   14030:	bvs	14058 <__assert_fail@plt+0x3128>
   14034:	cmp	r4, r3
   14038:	movle	r3, #0
   1403c:	andgt	r3, r8, #1
   14040:	cmp	r3, #0
   14044:	bne	14058 <__assert_fail@plt+0x3128>
   14048:	smull	r2, r3, r4, lr
   1404c:	cmp	r3, r2, asr #31
   14050:	mov	r1, r2
   14054:	beq	1405c <__assert_fail@plt+0x312c>
   14058:	bl	14130 <__assert_fail@plt+0x3200>
   1405c:	bl	13ea4 <__assert_fail@plt+0x2f74>
   14060:	str	r4, [r5]
   14064:	pop	{r4, r5, r6, r7, r8, pc}
   14068:	push	{r4, lr}
   1406c:	bl	14684 <__assert_fail@plt+0x3754>
   14070:	cmp	r0, #0
   14074:	popne	{r4, pc}
   14078:	bl	14130 <__assert_fail@plt+0x3200>
   1407c:	mov	r1, #1
   14080:	b	14068 <__assert_fail@plt+0x3138>
   14084:	push	{r4, lr}
   14088:	bl	14684 <__assert_fail@plt+0x3754>
   1408c:	cmp	r0, #0
   14090:	popne	{r4, pc}
   14094:	bl	14130 <__assert_fail@plt+0x3200>
   14098:	mov	r1, #1
   1409c:	b	14084 <__assert_fail@plt+0x3154>
   140a0:	push	{r4, r5, r6, lr}
   140a4:	mov	r4, r1
   140a8:	mov	r5, r0
   140ac:	mov	r0, r1
   140b0:	bl	13e78 <__assert_fail@plt+0x2f48>
   140b4:	mov	r2, r4
   140b8:	mov	r1, r5
   140bc:	pop	{r4, r5, r6, lr}
   140c0:	b	10d20 <memcpy@plt>
   140c4:	push	{r4, r5, r6, lr}
   140c8:	mov	r4, r1
   140cc:	mov	r5, r0
   140d0:	mov	r0, r1
   140d4:	bl	13e8c <__assert_fail@plt+0x2f5c>
   140d8:	mov	r2, r4
   140dc:	mov	r1, r5
   140e0:	pop	{r4, r5, r6, lr}
   140e4:	b	10d20 <memcpy@plt>
   140e8:	push	{r4, r5, r6, lr}
   140ec:	mov	r5, r0
   140f0:	add	r0, r1, #1
   140f4:	mov	r4, r1
   140f8:	bl	13e8c <__assert_fail@plt+0x2f5c>
   140fc:	mov	r2, #0
   14100:	mov	r1, r5
   14104:	strb	r2, [r0, r4]
   14108:	mov	r2, r4
   1410c:	pop	{r4, r5, r6, lr}
   14110:	b	10d20 <memcpy@plt>
   14114:	push	{r4, lr}
   14118:	mov	r4, r0
   1411c:	bl	10e28 <strlen@plt>
   14120:	add	r1, r0, #1
   14124:	mov	r0, r4
   14128:	pop	{r4, lr}
   1412c:	b	140a0 <__assert_fail@plt+0x3170>
   14130:	ldr	r3, [pc, #44]	; 14164 <__assert_fail@plt+0x3234>
   14134:	mov	r2, #5
   14138:	mov	r0, #0
   1413c:	push	{r4, lr}
   14140:	ldr	r1, [pc, #32]	; 14168 <__assert_fail@plt+0x3238>
   14144:	ldr	r4, [r3]
   14148:	bl	10d5c <dcgettext@plt>
   1414c:	mov	r3, r0
   14150:	ldr	r2, [pc, #20]	; 1416c <__assert_fail@plt+0x323c>
   14154:	mov	r1, #0
   14158:	mov	r0, r4
   1415c:	bl	10dc8 <error@plt>
   14160:	bl	10f18 <abort@plt>
   14164:	strdeq	r6, [r2], -r0
   14168:	andeq	r5, r1, r1, asr #10
   1416c:	andeq	r4, r1, r1, lsr pc
   14170:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14174:	mov	r3, #0
   14178:	asr	r5, r1, #31
   1417c:	mov	r4, r1
   14180:	mov	ip, r3
   14184:	strd	r4, [sp]
   14188:	subs	r2, r2, #1
   1418c:	bcs	1419c <__assert_fail@plt+0x326c>
   14190:	mov	r0, r3
   14194:	add	sp, sp, #12
   14198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1419c:	ldrd	r4, [r0]
   141a0:	mov	lr, #0
   141a4:	cmp	r5, r4, asr #31
   141a8:	smulleq	r8, r9, r4, r1
   141ac:	moveq	r6, r8
   141b0:	moveq	sl, r9
   141b4:	beq	141fc <__assert_fail@plt+0x32cc>
   141b8:	cmp	r5, #0
   141bc:	umull	r8, r9, r4, r1
   141c0:	umull	r6, r7, r1, r5
   141c4:	bge	141d0 <__assert_fail@plt+0x32a0>
   141c8:	subs	r6, r6, ip
   141cc:	sbc	r7, r7, r1
   141d0:	adds	sl, r6, r9
   141d4:	mov	fp, #0
   141d8:	adc	fp, r7, fp
   141dc:	cmp	fp, sl, asr #31
   141e0:	ldrne	lr, [sp, #4]
   141e4:	moveq	r6, r8
   141e8:	umullne	r6, r7, r4, r1
   141ec:	mulne	sl, r4, lr
   141f0:	movne	lr, #1
   141f4:	mlane	sl, r1, r5, sl
   141f8:	addne	sl, sl, r7
   141fc:	cmp	lr, #0
   14200:	beq	1422c <__assert_fail@plt+0x32fc>
   14204:	cmp	r4, #0
   14208:	sbcs	lr, r5, #0
   1420c:	mov	lr, #1
   14210:	mvnge	r4, #0
   14214:	mvnge	r5, #-2147483648	; 0x80000000
   14218:	movlt	r4, #0
   1421c:	movlt	r5, #-2147483648	; 0x80000000
   14220:	strd	r4, [r0]
   14224:	orr	r3, r3, lr
   14228:	b	14188 <__assert_fail@plt+0x3258>
   1422c:	stm	r0, {r6, sl}
   14230:	b	14224 <__assert_fail@plt+0x32f4>
   14234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14238:	cmp	r2, #36	; 0x24
   1423c:	sub	sp, sp, #20
   14240:	ldr	r5, [sp, #56]	; 0x38
   14244:	bls	1425c <__assert_fail@plt+0x332c>
   14248:	ldr	r3, [pc, #1064]	; 14678 <__assert_fail@plt+0x3748>
   1424c:	mov	r2, #85	; 0x55
   14250:	ldr	r1, [pc, #1060]	; 1467c <__assert_fail@plt+0x374c>
   14254:	ldr	r0, [pc, #1060]	; 14680 <__assert_fail@plt+0x3750>
   14258:	bl	10f30 <__assert_fail@plt>
   1425c:	cmp	r1, #0
   14260:	mov	r6, r1
   14264:	mov	r8, r0
   14268:	addeq	r6, sp, #4
   1426c:	mov	r9, r2
   14270:	mov	r7, r3
   14274:	bl	10e40 <__errno_location@plt>
   14278:	mov	sl, r0
   1427c:	mov	r4, #0
   14280:	mov	r2, r9
   14284:	mov	r1, r6
   14288:	mov	r0, r8
   1428c:	str	r4, [sl]
   14290:	bl	10e94 <strtoimax@plt>
   14294:	ldr	r9, [r6]
   14298:	strd	r0, [sp, #8]
   1429c:	cmp	r9, r8
   142a0:	bne	142dc <__assert_fail@plt+0x33ac>
   142a4:	cmp	r5, r4
   142a8:	beq	142d4 <__assert_fail@plt+0x33a4>
   142ac:	ldrb	r1, [r8]
   142b0:	cmp	r1, r4
   142b4:	beq	142d4 <__assert_fail@plt+0x33a4>
   142b8:	mov	r0, r5
   142bc:	bl	10e34 <strchr@plt>
   142c0:	cmp	r0, r4
   142c4:	movne	r2, #1
   142c8:	movne	r3, #0
   142cc:	strdne	r2, [sp, #8]
   142d0:	bne	14300 <__assert_fail@plt+0x33d0>
   142d4:	mov	r4, #4
   142d8:	b	1432c <__assert_fail@plt+0x33fc>
   142dc:	ldr	r4, [sl]
   142e0:	cmp	r4, #0
   142e4:	beq	142f4 <__assert_fail@plt+0x33c4>
   142e8:	cmp	r4, #34	; 0x22
   142ec:	bne	142d4 <__assert_fail@plt+0x33a4>
   142f0:	mov	r4, #1
   142f4:	cmp	r5, #0
   142f8:	strdeq	r0, [r7]
   142fc:	beq	1432c <__assert_fail@plt+0x33fc>
   14300:	ldrb	r8, [r9]
   14304:	cmp	r8, #0
   14308:	beq	1461c <__assert_fail@plt+0x36ec>
   1430c:	mov	r1, r8
   14310:	mov	r0, r5
   14314:	bl	10e34 <strchr@plt>
   14318:	cmp	r0, #0
   1431c:	bne	14338 <__assert_fail@plt+0x3408>
   14320:	ldrd	r2, [sp, #8]
   14324:	orr	r4, r4, #2
   14328:	strd	r2, [r7]
   1432c:	mov	r0, r4
   14330:	add	sp, sp, #20
   14334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14338:	cmp	r8, #84	; 0x54
   1433c:	beq	14390 <__assert_fail@plt+0x3460>
   14340:	bhi	14378 <__assert_fail@plt+0x3448>
   14344:	cmp	r8, #75	; 0x4b
   14348:	beq	14390 <__assert_fail@plt+0x3460>
   1434c:	bhi	14368 <__assert_fail@plt+0x3438>
   14350:	cmp	r8, #69	; 0x45
   14354:	beq	14390 <__assert_fail@plt+0x3460>
   14358:	cmp	r8, #71	; 0x47
   1435c:	beq	14390 <__assert_fail@plt+0x3460>
   14360:	mov	r5, #1
   14364:	b	1448c <__assert_fail@plt+0x355c>
   14368:	cmp	r8, #77	; 0x4d
   1436c:	beq	14390 <__assert_fail@plt+0x3460>
   14370:	cmp	r8, #80	; 0x50
   14374:	b	1435c <__assert_fail@plt+0x342c>
   14378:	cmp	r8, #103	; 0x67
   1437c:	beq	14390 <__assert_fail@plt+0x3460>
   14380:	bhi	14464 <__assert_fail@plt+0x3534>
   14384:	sub	r3, r8, #89	; 0x59
   14388:	cmp	r3, #1
   1438c:	bhi	14360 <__assert_fail@plt+0x3430>
   14390:	mov	r1, #48	; 0x30
   14394:	mov	r0, r5
   14398:	bl	10e34 <strchr@plt>
   1439c:	cmp	r0, #0
   143a0:	beq	14360 <__assert_fail@plt+0x3430>
   143a4:	ldrb	r3, [r9, #1]
   143a8:	cmp	r3, #68	; 0x44
   143ac:	moveq	r5, #2
   143b0:	moveq	r1, #1000	; 0x3e8
   143b4:	beq	143d4 <__assert_fail@plt+0x34a4>
   143b8:	cmp	r3, #105	; 0x69
   143bc:	beq	1447c <__assert_fail@plt+0x354c>
   143c0:	cmp	r3, #66	; 0x42
   143c4:	moveq	r5, #2
   143c8:	movne	r5, #1
   143cc:	moveq	r1, #1000	; 0x3e8
   143d0:	movne	r1, #1024	; 0x400
   143d4:	cmp	r8, #89	; 0x59
   143d8:	beq	14660 <__assert_fail@plt+0x3730>
   143dc:	bhi	144b4 <__assert_fail@plt+0x3584>
   143e0:	cmp	r8, #75	; 0x4b
   143e4:	beq	144f4 <__assert_fail@plt+0x35c4>
   143e8:	bhi	14494 <__assert_fail@plt+0x3564>
   143ec:	cmp	r8, #69	; 0x45
   143f0:	beq	1463c <__assert_fail@plt+0x370c>
   143f4:	cmp	r8, #71	; 0x47
   143f8:	beq	14648 <__assert_fail@plt+0x3718>
   143fc:	cmp	r8, #66	; 0x42
   14400:	bne	14320 <__assert_fail@plt+0x33f0>
   14404:	ldrd	r2, [sp, #8]
   14408:	mov	r0, #0
   1440c:	cmp	r3, r2, asr #31
   14410:	lsleq	r1, r3, #10
   14414:	lsleq	r8, r2, #10
   14418:	orreq	r1, r1, r2, lsr #22
   1441c:	beq	145d4 <__assert_fail@plt+0x36a4>
   14420:	mov	r1, #1024	; 0x400
   14424:	cmp	r3, #0
   14428:	lsr	sl, r2, #22
   1442c:	lsl	lr, r2, #10
   14430:	umull	r8, r9, r1, r3
   14434:	bge	14440 <__assert_fail@plt+0x3510>
   14438:	subs	r8, r8, r0
   1443c:	sbc	r9, r9, r1
   14440:	adds	r1, r8, sl
   14444:	mov	ip, #0
   14448:	adc	ip, r9, ip
   1444c:	cmp	ip, r1, asr #31
   14450:	beq	145d0 <__assert_fail@plt+0x36a0>
   14454:	lsl	r1, r3, #10
   14458:	lsl	r8, r2, #10
   1445c:	orr	r1, r1, r2, lsr #22
   14460:	b	14634 <__assert_fail@plt+0x3704>
   14464:	cmp	r8, #109	; 0x6d
   14468:	beq	14390 <__assert_fail@plt+0x3460>
   1446c:	cmp	r8, #116	; 0x74
   14470:	beq	14390 <__assert_fail@plt+0x3460>
   14474:	cmp	r8, #107	; 0x6b
   14478:	b	1435c <__assert_fail@plt+0x342c>
   1447c:	ldrb	r3, [r9, #2]
   14480:	cmp	r3, #66	; 0x42
   14484:	movne	r5, #1
   14488:	moveq	r5, #3
   1448c:	mov	r1, #1024	; 0x400
   14490:	b	143d4 <__assert_fail@plt+0x34a4>
   14494:	cmp	r8, #80	; 0x50
   14498:	beq	14650 <__assert_fail@plt+0x3720>
   1449c:	cmp	r8, #84	; 0x54
   144a0:	beq	14658 <__assert_fail@plt+0x3728>
   144a4:	cmp	r8, #77	; 0x4d
   144a8:	bne	14320 <__assert_fail@plt+0x33f0>
   144ac:	mov	r2, #2
   144b0:	b	14640 <__assert_fail@plt+0x3710>
   144b4:	cmp	r8, #103	; 0x67
   144b8:	beq	14648 <__assert_fail@plt+0x3718>
   144bc:	bhi	144e0 <__assert_fail@plt+0x35b0>
   144c0:	cmp	r8, #98	; 0x62
   144c4:	beq	14580 <__assert_fail@plt+0x3650>
   144c8:	cmp	r8, #99	; 0x63
   144cc:	beq	14670 <__assert_fail@plt+0x3740>
   144d0:	cmp	r8, #90	; 0x5a
   144d4:	bne	14320 <__assert_fail@plt+0x33f0>
   144d8:	mov	r2, #7
   144dc:	b	14640 <__assert_fail@plt+0x3710>
   144e0:	cmp	r8, #109	; 0x6d
   144e4:	beq	144ac <__assert_fail@plt+0x357c>
   144e8:	bhi	144fc <__assert_fail@plt+0x35cc>
   144ec:	cmp	r8, #107	; 0x6b
   144f0:	bne	14320 <__assert_fail@plt+0x33f0>
   144f4:	mov	r2, #1
   144f8:	b	14640 <__assert_fail@plt+0x3710>
   144fc:	cmp	r8, #116	; 0x74
   14500:	beq	14658 <__assert_fail@plt+0x3728>
   14504:	cmp	r8, #119	; 0x77
   14508:	bne	14320 <__assert_fail@plt+0x33f0>
   1450c:	ldrd	r2, [sp, #8]
   14510:	mov	r0, #0
   14514:	adds	ip, r2, r2
   14518:	adc	r1, r3, r3
   1451c:	cmp	r3, r2, asr #31
   14520:	beq	1456c <__assert_fail@plt+0x363c>
   14524:	mov	r9, #0
   14528:	adds	ip, r2, r2
   1452c:	mov	r1, #2
   14530:	adc	sl, r9, r9
   14534:	cmp	r3, #0
   14538:	umull	r8, r9, r1, r3
   1453c:	bge	1454c <__assert_fail@plt+0x361c>
   14540:	mov	lr, #0
   14544:	subs	r8, r8, lr
   14548:	sbc	r9, r9, r1
   1454c:	adds	r1, r8, sl
   14550:	mov	lr, #0
   14554:	adc	lr, r9, lr
   14558:	cmp	lr, r1, asr #31
   1455c:	beq	1456c <__assert_fail@plt+0x363c>
   14560:	adds	ip, r2, r2
   14564:	mov	r0, #1
   14568:	adc	r1, r3, r3
   1456c:	cmp	r0, #0
   14570:	streq	ip, [sp, #8]
   14574:	bne	145e0 <__assert_fail@plt+0x36b0>
   14578:	str	r1, [sp, #12]
   1457c:	b	14600 <__assert_fail@plt+0x36d0>
   14580:	ldrd	r2, [sp, #8]
   14584:	mov	r0, #0
   14588:	cmp	r3, r2, asr #31
   1458c:	lsleq	r1, r3, #9
   14590:	lsleq	r8, r2, #9
   14594:	orreq	r1, r1, r2, lsr #23
   14598:	beq	145d4 <__assert_fail@plt+0x36a4>
   1459c:	mov	r1, #512	; 0x200
   145a0:	cmp	r3, #0
   145a4:	lsr	sl, r2, #23
   145a8:	lsl	lr, r2, #9
   145ac:	umull	r8, r9, r1, r3
   145b0:	bge	145bc <__assert_fail@plt+0x368c>
   145b4:	subs	r8, r8, r0
   145b8:	sbc	r9, r9, r1
   145bc:	adds	r1, r8, sl
   145c0:	mov	ip, #0
   145c4:	adc	ip, r9, ip
   145c8:	cmp	ip, r1, asr #31
   145cc:	bne	14628 <__assert_fail@plt+0x36f8>
   145d0:	mov	r8, lr
   145d4:	cmp	r0, #0
   145d8:	streq	r8, [sp, #8]
   145dc:	beq	14578 <__assert_fail@plt+0x3648>
   145e0:	cmp	r2, #0
   145e4:	mov	r0, #1
   145e8:	sbcs	r3, r3, #0
   145ec:	mvnge	r2, #0
   145f0:	mvnge	r3, #-2147483648	; 0x80000000
   145f4:	movlt	r2, #0
   145f8:	movlt	r3, #-2147483648	; 0x80000000
   145fc:	strd	r2, [sp, #8]
   14600:	ldr	r3, [r6]
   14604:	orr	r4, r4, r0
   14608:	add	r2, r3, r5
   1460c:	str	r2, [r6]
   14610:	ldrb	r3, [r3, r5]
   14614:	cmp	r3, #0
   14618:	orrne	r4, r4, #2
   1461c:	ldrd	r2, [sp, #8]
   14620:	strd	r2, [r7]
   14624:	b	1432c <__assert_fail@plt+0x33fc>
   14628:	lsl	r1, r3, #9
   1462c:	lsl	r8, r2, #9
   14630:	orr	r1, r1, r2, lsr #23
   14634:	mov	r0, #1
   14638:	b	145d4 <__assert_fail@plt+0x36a4>
   1463c:	mov	r2, #6
   14640:	add	r0, sp, #8
   14644:	b	14668 <__assert_fail@plt+0x3738>
   14648:	mov	r2, #3
   1464c:	b	14640 <__assert_fail@plt+0x3710>
   14650:	mov	r2, #5
   14654:	b	14640 <__assert_fail@plt+0x3710>
   14658:	mov	r2, #4
   1465c:	b	14640 <__assert_fail@plt+0x3710>
   14660:	mov	r2, #8
   14664:	add	r0, sp, r2
   14668:	bl	14170 <__assert_fail@plt+0x3240>
   1466c:	b	14600 <__assert_fail@plt+0x36d0>
   14670:	mov	r0, #0
   14674:	b	14600 <__assert_fail@plt+0x36d0>
   14678:	andeq	r5, r1, r2, asr r5
   1467c:	andeq	r5, r1, sp, asr r5
   14680:	andeq	r5, r1, fp, ror #10
   14684:	cmp	r1, #0
   14688:	cmpne	r0, #0
   1468c:	beq	146c4 <__assert_fail@plt+0x3794>
   14690:	push	{r4, r5, r6, lr}
   14694:	umull	r4, r5, r0, r1
   14698:	adds	r3, r5, #0
   1469c:	movne	r3, #1
   146a0:	cmp	r4, #0
   146a4:	blt	146b0 <__assert_fail@plt+0x3780>
   146a8:	cmp	r3, #0
   146ac:	beq	146d0 <__assert_fail@plt+0x37a0>
   146b0:	bl	10e40 <__errno_location@plt>
   146b4:	mov	r3, #12
   146b8:	str	r3, [r0]
   146bc:	mov	r0, #0
   146c0:	pop	{r4, r5, r6, pc}
   146c4:	mov	r1, #1
   146c8:	mov	r0, r1
   146cc:	b	10cc0 <calloc@plt>
   146d0:	pop	{r4, r5, r6, lr}
   146d4:	b	146cc <__assert_fail@plt+0x379c>
   146d8:	cmp	r0, #0
   146dc:	beq	146fc <__assert_fail@plt+0x37cc>
   146e0:	bge	14700 <__assert_fail@plt+0x37d0>
   146e4:	push	{r4, lr}
   146e8:	bl	10e40 <__errno_location@plt>
   146ec:	mov	r3, #12
   146f0:	str	r3, [r0]
   146f4:	mov	r0, #0
   146f8:	pop	{r4, pc}
   146fc:	mov	r0, #1
   14700:	b	10dd4 <malloc@plt>
   14704:	cmp	r0, #0
   14708:	bne	14714 <__assert_fail@plt+0x37e4>
   1470c:	mov	r0, r1
   14710:	b	146d8 <__assert_fail@plt+0x37a8>
   14714:	cmp	r1, #0
   14718:	push	{r4, lr}
   1471c:	bne	1472c <__assert_fail@plt+0x37fc>
   14720:	bl	1227c <__assert_fail@plt+0x134c>
   14724:	mov	r0, #0
   14728:	pop	{r4, pc}
   1472c:	blt	14738 <__assert_fail@plt+0x3808>
   14730:	pop	{r4, lr}
   14734:	b	10d68 <realloc@plt>
   14738:	bl	10e40 <__errno_location@plt>
   1473c:	mov	r3, #12
   14740:	str	r3, [r0]
   14744:	b	14724 <__assert_fail@plt+0x37f4>
   14748:	push	{r4, r5, r6, lr}
   1474c:	mov	r4, r0
   14750:	bl	10da4 <__fpending@plt>
   14754:	mov	r5, r0
   14758:	mov	r0, r4
   1475c:	bl	10db0 <ferror_unlocked@plt>
   14760:	mov	r6, r0
   14764:	mov	r0, r4
   14768:	bl	12184 <__assert_fail@plt+0x1254>
   1476c:	cmp	r6, #0
   14770:	mov	r4, r0
   14774:	bne	147a0 <__assert_fail@plt+0x3870>
   14778:	cmp	r0, #0
   1477c:	beq	14798 <__assert_fail@plt+0x3868>
   14780:	cmp	r5, #0
   14784:	bne	147b0 <__assert_fail@plt+0x3880>
   14788:	bl	10e40 <__errno_location@plt>
   1478c:	ldr	r4, [r0]
   14790:	subs	r4, r4, #9
   14794:	mvnne	r4, #0
   14798:	mov	r0, r4
   1479c:	pop	{r4, r5, r6, pc}
   147a0:	cmp	r0, #0
   147a4:	bne	147b0 <__assert_fail@plt+0x3880>
   147a8:	bl	10e40 <__errno_location@plt>
   147ac:	str	r4, [r0]
   147b0:	mvn	r4, #0
   147b4:	b	14798 <__assert_fail@plt+0x3868>
   147b8:	b	146d8 <__assert_fail@plt+0x37a8>
   147bc:	cmp	r1, #0
   147c0:	orreq	r1, r1, #1
   147c4:	b	14704 <__assert_fail@plt+0x37d4>
   147c8:	b	14684 <__assert_fail@plt+0x3754>
   147cc:	cmp	r2, #0
   147d0:	cmpne	r1, #0
   147d4:	moveq	r2, #1
   147d8:	moveq	r1, r2
   147dc:	b	14864 <__assert_fail@plt+0x3934>
   147e0:	push	{r4, lr}
   147e4:	mov	r0, #14
   147e8:	bl	10ed0 <nl_langinfo@plt>
   147ec:	cmp	r0, #0
   147f0:	beq	14808 <__assert_fail@plt+0x38d8>
   147f4:	ldrb	r2, [r0]
   147f8:	ldr	r3, [pc, #16]	; 14810 <__assert_fail@plt+0x38e0>
   147fc:	cmp	r2, #0
   14800:	moveq	r0, r3
   14804:	pop	{r4, pc}
   14808:	ldr	r0, [pc]	; 14810 <__assert_fail@plt+0x38e0>
   1480c:	pop	{r4, pc}
   14810:	muleq	r1, r1, r5
   14814:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14818:	subs	r5, r0, #0
   1481c:	mov	r7, r2
   14820:	addeq	r5, sp, #4
   14824:	mov	r6, r1
   14828:	mov	r0, r5
   1482c:	bl	10dbc <mbrtowc@plt>
   14830:	cmp	r7, #0
   14834:	cmnne	r0, #3
   14838:	mov	r4, r0
   1483c:	bls	14858 <__assert_fail@plt+0x3928>
   14840:	mov	r0, #0
   14844:	bl	14890 <__assert_fail@plt+0x3960>
   14848:	cmp	r0, #0
   1484c:	ldrbeq	r3, [r6]
   14850:	moveq	r4, #1
   14854:	streq	r3, [r5]
   14858:	mov	r0, r4
   1485c:	add	sp, sp, #12
   14860:	pop	{r4, r5, r6, r7, pc}
   14864:	umull	r2, r3, r1, r2
   14868:	cmp	r3, #0
   1486c:	bne	14878 <__assert_fail@plt+0x3948>
   14870:	mov	r1, r2
   14874:	b	14704 <__assert_fail@plt+0x37d4>
   14878:	push	{r4, lr}
   1487c:	bl	10e40 <__errno_location@plt>
   14880:	mov	r3, #12
   14884:	str	r3, [r0]
   14888:	mov	r0, #0
   1488c:	pop	{r4, pc}
   14890:	push	{lr}		; (str lr, [sp, #-4]!)
   14894:	sub	sp, sp, #268	; 0x10c
   14898:	movw	r2, #257	; 0x101
   1489c:	add	r1, sp, #4
   148a0:	bl	148ec <__assert_fail@plt+0x39bc>
   148a4:	cmp	r0, #0
   148a8:	movne	r0, #0
   148ac:	bne	148dc <__assert_fail@plt+0x39ac>
   148b0:	ldr	r1, [pc, #44]	; 148e4 <__assert_fail@plt+0x39b4>
   148b4:	add	r0, sp, #4
   148b8:	bl	10cd8 <strcmp@plt>
   148bc:	cmp	r0, #0
   148c0:	beq	148d8 <__assert_fail@plt+0x39a8>
   148c4:	ldr	r1, [pc, #28]	; 148e8 <__assert_fail@plt+0x39b8>
   148c8:	add	r0, sp, #4
   148cc:	bl	10cd8 <strcmp@plt>
   148d0:	adds	r0, r0, #0
   148d4:	movne	r0, #1
   148d8:	and	r0, r0, #1
   148dc:	add	sp, sp, #268	; 0x10c
   148e0:	pop	{pc}		; (ldr pc, [sp], #4)
   148e4:	muleq	r1, r7, r5
   148e8:	muleq	r1, r9, r5
   148ec:	push	{r4, r5, r6, lr}
   148f0:	mov	r5, r1
   148f4:	mov	r1, #0
   148f8:	mov	r4, r2
   148fc:	bl	10eb8 <setlocale@plt>
   14900:	subs	r6, r0, #0
   14904:	bne	14918 <__assert_fail@plt+0x39e8>
   14908:	cmp	r4, #0
   1490c:	mov	r0, #22
   14910:	strbne	r6, [r5]
   14914:	pop	{r4, r5, r6, pc}
   14918:	bl	10e28 <strlen@plt>
   1491c:	cmp	r4, r0
   14920:	bls	1493c <__assert_fail@plt+0x3a0c>
   14924:	add	r2, r0, #1
   14928:	mov	r1, r6
   1492c:	mov	r0, r5
   14930:	bl	10d20 <memcpy@plt>
   14934:	mov	r0, #0
   14938:	pop	{r4, r5, r6, pc}
   1493c:	cmp	r4, #0
   14940:	beq	14960 <__assert_fail@plt+0x3a30>
   14944:	sub	r4, r4, #1
   14948:	mov	r1, r6
   1494c:	mov	r2, r4
   14950:	mov	r0, r5
   14954:	bl	10d20 <memcpy@plt>
   14958:	mov	r3, #0
   1495c:	strb	r3, [r5, r4]
   14960:	mov	r0, #34	; 0x22
   14964:	pop	{r4, r5, r6, pc}
   14968:	mov	r1, #0
   1496c:	b	10eb8 <setlocale@plt>
   14970:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14974:	mov	r7, r0
   14978:	ldr	r6, [pc, #72]	; 149c8 <__assert_fail@plt+0x3a98>
   1497c:	ldr	r5, [pc, #72]	; 149cc <__assert_fail@plt+0x3a9c>
   14980:	add	r6, pc, r6
   14984:	add	r5, pc, r5
   14988:	sub	r6, r6, r5
   1498c:	mov	r8, r1
   14990:	mov	r9, r2
   14994:	bl	10ca0 <calloc@plt-0x20>
   14998:	asrs	r6, r6, #2
   1499c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   149a0:	mov	r4, #0
   149a4:	add	r4, r4, #1
   149a8:	ldr	r3, [r5], #4
   149ac:	mov	r2, r9
   149b0:	mov	r1, r8
   149b4:	mov	r0, r7
   149b8:	blx	r3
   149bc:	cmp	r6, r4
   149c0:	bne	149a4 <__assert_fail@plt+0x3a74>
   149c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149c8:	andeq	r1, r1, ip, lsl #11
   149cc:	andeq	r1, r1, r4, lsl #11
   149d0:	bx	lr
   149d4:	ldr	r3, [pc, #12]	; 149e8 <__assert_fail@plt+0x3ab8>
   149d8:	mov	r1, #0
   149dc:	add	r3, pc, r3
   149e0:	ldr	r2, [r3]
   149e4:	b	10e4c <__cxa_atexit@plt>
   149e8:	andeq	r1, r1, r4, lsl #14

Disassembly of section .fini:

000149ec <.fini>:
   149ec:	push	{r3, lr}
   149f0:	pop	{r3, pc}
