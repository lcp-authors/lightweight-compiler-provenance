
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

00010618 <.init>:
   10618:	push	{r3, lr}
   1061c:	bl	108fc <_start@@Base+0x3c>
   10620:	pop	{r3, pc}

Disassembly of section .plt:

00010624 <printf@plt-0x14>:
   10624:	push	{lr}		; (str lr, [sp, #-4]!)
   10628:	ldr	lr, [pc, #4]	; 10634 <printf@plt-0x4>
   1062c:	add	lr, pc, lr
   10630:	ldr	pc, [lr, #8]!
   10634:	andeq	r0, r1, ip, asr #19

00010638 <printf@plt>:
   10638:	add	ip, pc, #0, 12
   1063c:	add	ip, ip, #16, 20	; 0x10000
   10640:	ldr	pc, [ip, #2508]!	; 0x9cc

00010644 <fopen@plt>:
   10644:	add	ip, pc, #0, 12
   10648:	add	ip, ip, #16, 20	; 0x10000
   1064c:	ldr	pc, [ip, #2500]!	; 0x9c4

00010650 <tolower@plt>:
   10650:	add	ip, pc, #0, 12
   10654:	add	ip, ip, #16, 20	; 0x10000
   10658:	ldr	pc, [ip, #2492]!	; 0x9bc

0001065c <puts@plt>:
   1065c:	add	ip, pc, #0, 12
   10660:	add	ip, ip, #16, 20	; 0x10000
   10664:	ldr	pc, [ip, #2484]!	; 0x9b4

00010668 <__libc_start_main@plt>:
   10668:	add	ip, pc, #0, 12
   1066c:	add	ip, ip, #16, 20	; 0x10000
   10670:	ldr	pc, [ip, #2476]!	; 0x9ac

00010674 <__gmon_start__@plt>:
   10674:	add	ip, pc, #0, 12
   10678:	add	ip, ip, #16, 20	; 0x10000
   1067c:	ldr	pc, [ip, #2468]!	; 0x9a4

00010680 <memset@plt>:
   10680:	add	ip, pc, #0, 12
   10684:	add	ip, ip, #16, 20	; 0x10000
   10688:	ldr	pc, [ip, #2460]!	; 0x99c

0001068c <fclose@plt>:
   1068c:	add	ip, pc, #0, 12
   10690:	add	ip, ip, #16, 20	; 0x10000
   10694:	ldr	pc, [ip, #2452]!	; 0x994

00010698 <abort@plt>:
   10698:	add	ip, pc, #0, 12
   1069c:	add	ip, ip, #16, 20	; 0x10000
   106a0:	ldr	pc, [ip, #2444]!	; 0x98c

000106a4 <getc@plt>:
   106a4:	add	ip, pc, #0, 12
   106a8:	add	ip, ip, #16, 20	; 0x10000
   106ac:	ldr	pc, [ip, #2436]!	; 0x984

Disassembly of section .text:

000106b0 <main@@Base>:
   106b0:	ldr	ip, [pc, #496]	; 108a8 <main@@Base+0x1f8>
   106b4:	push	{r4, r5, r6, r7, lr}
   106b8:	mov	r5, #0
   106bc:	vpush	{d8}
   106c0:	sub	sp, sp, #204	; 0xcc
   106c4:	ldm	ip!, {r0, r1, r2, r3}
   106c8:	add	lr, sp, #64	; 0x40
   106cc:	add	r6, sp, #24
   106d0:	stmia	lr!, {r0, r1, r2, r3}
   106d4:	ldm	ip, {r0, r1, r2, r3}
   106d8:	stm	lr, {r0, r1, r2, r3}
   106dc:	add	r3, ip, #16
   106e0:	add	ip, ip, #32
   106e4:	add	lr, sp, #40	; 0x28
   106e8:	ldm	r3, {r0, r1, r2, r3}
   106ec:	stm	r6, {r0, r1, r2, r3}
   106f0:	mov	r3, #205	; 0xcd
   106f4:	str	r3, [sp]
   106f8:	mov	r3, #237	; 0xed
   106fc:	str	r3, [sp, #4]
   10700:	ldm	ip!, {r0, r1, r2, r3}
   10704:	stmia	lr!, {r0, r1, r2, r3}
   10708:	mov	r3, #218	; 0xda
   1070c:	mov	r2, #250	; 0xfa
   10710:	ldm	ip, {r0, r1}
   10714:	str	r3, [sp, #8]
   10718:	mov	r3, #199	; 0xc7
   1071c:	stm	lr, {r0, r1}
   10720:	strd	r2, [sp, #12]
   10724:	mov	r3, #231	; 0xe7
   10728:	ldr	r1, [pc, #380]	; 108ac <main@@Base+0x1fc>
   1072c:	str	r3, [sp, #20]
   10730:	ldr	r0, [pc, #376]	; 108b0 <main@@Base+0x200>
   10734:	bl	10644 <fopen@plt>
   10738:	mov	r7, r0
   1073c:	mov	r2, #104	; 0x68
   10740:	mov	r1, #0
   10744:	add	r0, sp, #96	; 0x60
   10748:	bl	10680 <memset@plt>
   1074c:	mov	r0, r7
   10750:	bl	106a4 <getc@plt>
   10754:	cmn	r0, #1
   10758:	mov	r4, r0
   1075c:	beq	10830 <main@@Base+0x180>
   10760:	mov	r2, #8
   10764:	add	r1, sp, #64	; 0x40
   10768:	bl	109b0 <in_array@@Base>
   1076c:	cmp	r0, #0
   10770:	movne	r4, #97	; 0x61
   10774:	bne	10800 <main@@Base+0x150>
   10778:	mov	r0, r4
   1077c:	mov	r2, #4
   10780:	mov	r1, r6
   10784:	bl	109b0 <in_array@@Base>
   10788:	cmp	r0, #0
   1078c:	movne	r4, #101	; 0x65
   10790:	bne	10800 <main@@Base+0x150>
   10794:	mov	r0, r4
   10798:	mov	r2, #2
   1079c:	mov	r1, sp
   107a0:	bl	109b0 <in_array@@Base>
   107a4:	cmp	r0, #0
   107a8:	movne	r4, #105	; 0x69
   107ac:	bne	10800 <main@@Base+0x150>
   107b0:	mov	r0, r4
   107b4:	mov	r2, #6
   107b8:	add	r1, sp, #40	; 0x28
   107bc:	bl	109b0 <in_array@@Base>
   107c0:	cmp	r0, #0
   107c4:	movne	r4, #111	; 0x6f
   107c8:	bne	10800 <main@@Base+0x150>
   107cc:	mov	r0, r4
   107d0:	mov	r2, #2
   107d4:	add	r1, sp, #8
   107d8:	bl	109b0 <in_array@@Base>
   107dc:	cmp	r0, #0
   107e0:	movne	r4, #117	; 0x75
   107e4:	bne	10800 <main@@Base+0x150>
   107e8:	mov	r0, r4
   107ec:	mov	r2, #2
   107f0:	add	r1, sp, #16
   107f4:	bl	109b0 <in_array@@Base>
   107f8:	cmp	r0, #0
   107fc:	movne	r4, #99	; 0x63
   10800:	mov	r0, r4
   10804:	bl	10650 <tolower@plt>
   10808:	sub	r0, r0, #97	; 0x61
   1080c:	cmp	r0, #25
   10810:	bhi	1074c <main@@Base+0x9c>
   10814:	add	r3, sp, #200	; 0xc8
   10818:	add	r5, r5, #1
   1081c:	add	r0, r3, r0, lsl #2
   10820:	ldr	r3, [r0, #-104]	; 0xffffff98
   10824:	add	r3, r3, #1
   10828:	str	r3, [r0, #-104]	; 0xffffff98
   1082c:	b	1074c <main@@Base+0x9c>
   10830:	mov	r0, r7
   10834:	vldr	s17, [pc, #104]	; 108a4 <main@@Base+0x1f4>
   10838:	add	r4, sp, #96	; 0x60
   1083c:	bl	1068c <fclose@plt>
   10840:	ldr	r0, [pc, #108]	; 108b4 <main@@Base+0x204>
   10844:	mov	r6, #97	; 0x61
   10848:	bl	1065c <puts@plt>
   1084c:	mov	r1, r5
   10850:	ldr	r0, [pc, #96]	; 108b8 <main@@Base+0x208>
   10854:	bl	10638 <printf@plt>
   10858:	vmov	s15, r5
   1085c:	ldr	r5, [pc, #88]	; 108bc <main@@Base+0x20c>
   10860:	vcvt.f32.s32	s16, s15
   10864:	vldmia	r4!, {s14}
   10868:	mov	r1, r6
   1086c:	mov	r0, r5
   10870:	add	r6, r6, #1
   10874:	vcvt.f32.s32	s14, s14
   10878:	vdiv.f32	s15, s14, s16
   1087c:	vmul.f32	s15, s15, s17
   10880:	vcvt.f64.f32	d7, s15
   10884:	vmov	r2, r3, d7
   10888:	bl	10638 <printf@plt>
   1088c:	cmp	r6, #123	; 0x7b
   10890:	bne	10864 <main@@Base+0x1b4>
   10894:	mov	r0, #0
   10898:	add	sp, sp, #204	; 0xcc
   1089c:	vpop	{d8}
   108a0:	pop	{r4, r5, r6, r7, pc}
   108a4:	sbcmi	r0, r8, #0
   108a8:	andeq	r0, r1, ip, asr #20
   108ac:	muleq	r1, r4, sl
   108b0:	muleq	r1, r6, sl
   108b4:	andeq	r0, r1, r1, ror #21
   108b8:	andeq	r0, r1, sp, lsr #21
   108bc:	andeq	r0, r1, sp, asr #21

000108c0 <_start@@Base>:
   108c0:	mov	fp, #0
   108c4:	mov	lr, #0
   108c8:	pop	{r1}		; (ldr r1, [sp], #4)
   108cc:	mov	r2, sp
   108d0:	push	{r2}		; (str r2, [sp, #-4]!)
   108d4:	push	{r0}		; (str r0, [sp, #-4]!)
   108d8:	ldr	ip, [pc, #16]	; 108f0 <_start@@Base+0x30>
   108dc:	push	{ip}		; (str ip, [sp, #-4]!)
   108e0:	ldr	r0, [pc, #12]	; 108f4 <_start@@Base+0x34>
   108e4:	ldr	r3, [pc, #12]	; 108f8 <_start@@Base+0x38>
   108e8:	bl	10668 <__libc_start_main@plt>
   108ec:	bl	10698 <abort@plt>
   108f0:	andeq	r0, r1, ip, lsr sl
   108f4:			; <UNDEFINED> instruction: 0x000106b0
   108f8:	ldrdeq	r0, [r1], -ip
   108fc:	ldr	r3, [pc, #20]	; 10918 <_start@@Base+0x58>
   10900:	ldr	r2, [pc, #20]	; 1091c <_start@@Base+0x5c>
   10904:	add	r3, pc, r3
   10908:	ldr	r2, [r3, r2]
   1090c:	cmp	r2, #0
   10910:	bxeq	lr
   10914:	b	10674 <__gmon_start__@plt>
   10918:	strdeq	r0, [r1], -r4
   1091c:	andeq	r0, r0, r4, lsr r0
   10920:	ldr	r0, [pc, #24]	; 10940 <_start@@Base+0x80>
   10924:	ldr	r3, [pc, #24]	; 10944 <_start@@Base+0x84>
   10928:	cmp	r3, r0
   1092c:	bxeq	lr
   10930:	ldr	r3, [pc, #16]	; 10948 <_start@@Base+0x88>
   10934:	cmp	r3, #0
   10938:	bxeq	lr
   1093c:	bx	r3
   10940:	andeq	r1, r2, r0, asr #32
   10944:	andeq	r1, r2, r0, asr #32
   10948:	andeq	r0, r0, r0
   1094c:	ldr	r0, [pc, #36]	; 10978 <_start@@Base+0xb8>
   10950:	ldr	r1, [pc, #36]	; 1097c <_start@@Base+0xbc>
   10954:	sub	r1, r1, r0
   10958:	asr	r1, r1, #2
   1095c:	add	r1, r1, r1, lsr #31
   10960:	asrs	r1, r1, #1
   10964:	bxeq	lr
   10968:	ldr	r3, [pc, #16]	; 10980 <_start@@Base+0xc0>
   1096c:	cmp	r3, #0
   10970:	bxeq	lr
   10974:	bx	r3
   10978:	andeq	r1, r2, r0, asr #32
   1097c:	andeq	r1, r2, r0, asr #32
   10980:	andeq	r0, r0, r0
   10984:	push	{r4, lr}
   10988:	ldr	r4, [pc, #24]	; 109a8 <_start@@Base+0xe8>
   1098c:	ldrb	r3, [r4]
   10990:	cmp	r3, #0
   10994:	popne	{r4, pc}
   10998:	bl	10920 <_start@@Base+0x60>
   1099c:	mov	r3, #1
   109a0:	strb	r3, [r4]
   109a4:	pop	{r4, pc}
   109a8:	andeq	r1, r2, r0, asr #32
   109ac:	b	1094c <_start@@Base+0x8c>

000109b0 <in_array@@Base>:
   109b0:	mov	r3, #0
   109b4:	cmp	r3, r2
   109b8:	ble	109c4 <in_array@@Base+0x14>
   109bc:	mov	r0, #0
   109c0:	bx	lr
   109c4:	ldr	ip, [r1, r3, lsl #2]
   109c8:	cmp	ip, r0
   109cc:	addne	r3, r3, #1
   109d0:	bne	109b4 <in_array@@Base+0x4>
   109d4:	mov	r0, #1
   109d8:	bx	lr

000109dc <__libc_csu_init@@Base>:
   109dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109e0:	mov	r7, r0
   109e4:	ldr	r6, [pc, #72]	; 10a34 <__libc_csu_init@@Base+0x58>
   109e8:	ldr	r5, [pc, #72]	; 10a38 <__libc_csu_init@@Base+0x5c>
   109ec:	add	r6, pc, r6
   109f0:	add	r5, pc, r5
   109f4:	sub	r6, r6, r5
   109f8:	mov	r8, r1
   109fc:	mov	r9, r2
   10a00:	bl	10618 <printf@plt-0x20>
   10a04:	asrs	r6, r6, #2
   10a08:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a0c:	mov	r4, #0
   10a10:	add	r4, r4, #1
   10a14:	ldr	r3, [r5], #4
   10a18:	mov	r2, r9
   10a1c:	mov	r1, r8
   10a20:	mov	r0, r7
   10a24:	blx	r3
   10a28:	cmp	r6, r4
   10a2c:	bne	10a10 <__libc_csu_init@@Base+0x34>
   10a30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a34:	andeq	r0, r1, r0, lsr #10
   10a38:	andeq	r0, r1, r8, lsl r5

00010a3c <__libc_csu_fini@@Base>:
   10a3c:	bx	lr

Disassembly of section .fini:

00010a40 <.fini>:
   10a40:	push	{r3, lr}
   10a44:	pop	{r3, pc}
