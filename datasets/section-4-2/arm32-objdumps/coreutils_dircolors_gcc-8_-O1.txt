
../repos/coreutils/src/dircolors:     file format elf32-littlearm


Disassembly of section .init:

00010d18 <.init>:
   10d18:	push	{r3, lr}
   10d1c:	bl	10fd8 <close@plt+0x48>
   10d20:	pop	{r3, pc}

Disassembly of section .plt:

00010d24 <calloc@plt-0x14>:
   10d24:	push	{lr}		; (str lr, [sp, #-4]!)
   10d28:	ldr	lr, [pc, #4]	; 10d34 <calloc@plt-0x4>
   10d2c:	add	lr, pc, lr
   10d30:	ldr	pc, [lr, #8]!
   10d34:	andeq	r7, r1, ip, asr #5

00010d38 <calloc@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #94208	; 0x17000
   10d40:	ldr	pc, [ip, #716]!	; 0x2cc

00010d44 <fputs_unlocked@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #94208	; 0x17000
   10d4c:	ldr	pc, [ip, #708]!	; 0x2c4

00010d50 <__getdelim@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #94208	; 0x17000
   10d58:	ldr	pc, [ip, #700]!	; 0x2bc

00010d5c <strcmp@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #94208	; 0x17000
   10d64:	ldr	pc, [ip, #692]!	; 0x2b4

00010d68 <fflush@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #94208	; 0x17000
   10d70:	ldr	pc, [ip, #684]!	; 0x2ac

00010d74 <free@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #94208	; 0x17000
   10d7c:	ldr	pc, [ip, #676]!	; 0x2a4

00010d80 <_exit@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #94208	; 0x17000
   10d88:	ldr	pc, [ip, #668]!	; 0x29c

00010d8c <memcpy@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #94208	; 0x17000
   10d94:	ldr	pc, [ip, #660]!	; 0x294

00010d98 <mbsinit@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #94208	; 0x17000
   10da0:	ldr	pc, [ip, #652]!	; 0x28c

00010da4 <fwrite_unlocked@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #94208	; 0x17000
   10dac:	ldr	pc, [ip, #644]!	; 0x284

00010db0 <memcmp@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #94208	; 0x17000
   10db8:	ldr	pc, [ip, #636]!	; 0x27c

00010dbc <fputc_unlocked@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #94208	; 0x17000
   10dc4:	ldr	pc, [ip, #628]!	; 0x274

00010dc8 <dcgettext@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #94208	; 0x17000
   10dd0:	ldr	pc, [ip, #620]!	; 0x26c

00010dd4 <dup2@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #94208	; 0x17000
   10ddc:	ldr	pc, [ip, #612]!	; 0x264

00010de0 <realloc@plt>:
   10de0:	add	ip, pc, #0, 12
   10de4:	add	ip, ip, #94208	; 0x17000
   10de8:	ldr	pc, [ip, #604]!	; 0x25c

00010dec <textdomain@plt>:
   10dec:	add	ip, pc, #0, 12
   10df0:	add	ip, ip, #94208	; 0x17000
   10df4:	ldr	pc, [ip, #596]!	; 0x254

00010df8 <iswprint@plt>:
   10df8:	add	ip, pc, #0, 12
   10dfc:	add	ip, ip, #94208	; 0x17000
   10e00:	ldr	pc, [ip, #588]!	; 0x24c

00010e04 <fwrite@plt>:
   10e04:	add	ip, pc, #0, 12
   10e08:	add	ip, ip, #94208	; 0x17000
   10e0c:	ldr	pc, [ip, #580]!	; 0x244

00010e10 <lseek64@plt>:
   10e10:	add	ip, pc, #0, 12
   10e14:	add	ip, ip, #94208	; 0x17000
   10e18:	ldr	pc, [ip, #572]!	; 0x23c

00010e1c <__ctype_get_mb_cur_max@plt>:
   10e1c:	add	ip, pc, #0, 12
   10e20:	add	ip, ip, #94208	; 0x17000
   10e24:	ldr	pc, [ip, #564]!	; 0x234

00010e28 <__fpending@plt>:
   10e28:	add	ip, pc, #0, 12
   10e2c:	add	ip, ip, #94208	; 0x17000
   10e30:	ldr	pc, [ip, #556]!	; 0x22c

00010e34 <mbrtowc@plt>:
   10e34:	add	ip, pc, #0, 12
   10e38:	add	ip, ip, #94208	; 0x17000
   10e3c:	ldr	pc, [ip, #548]!	; 0x224

00010e40 <error@plt>:
   10e40:	add	ip, pc, #0, 12
   10e44:	add	ip, ip, #94208	; 0x17000
   10e48:	ldr	pc, [ip, #540]!	; 0x21c

00010e4c <fnmatch@plt>:
   10e4c:	add	ip, pc, #0, 12
   10e50:	add	ip, ip, #94208	; 0x17000
   10e54:	ldr	pc, [ip, #532]!	; 0x214

00010e58 <open64@plt>:
   10e58:	add	ip, pc, #0, 12
   10e5c:	add	ip, ip, #94208	; 0x17000
   10e60:	ldr	pc, [ip, #524]!	; 0x20c

00010e64 <getenv@plt>:
   10e64:	add	ip, pc, #0, 12
   10e68:	add	ip, ip, #94208	; 0x17000
   10e6c:	ldr	pc, [ip, #516]!	; 0x204

00010e70 <puts@plt>:
   10e70:	add	ip, pc, #0, 12
   10e74:	add	ip, ip, #94208	; 0x17000
   10e78:	ldr	pc, [ip, #508]!	; 0x1fc

00010e7c <malloc@plt>:
   10e7c:	add	ip, pc, #0, 12
   10e80:	add	ip, ip, #94208	; 0x17000
   10e84:	ldr	pc, [ip, #500]!	; 0x1f4

00010e88 <__libc_start_main@plt>:
   10e88:	add	ip, pc, #0, 12
   10e8c:	add	ip, ip, #94208	; 0x17000
   10e90:	ldr	pc, [ip, #492]!	; 0x1ec

00010e94 <__freading@plt>:
   10e94:	add	ip, pc, #0, 12
   10e98:	add	ip, ip, #94208	; 0x17000
   10e9c:	ldr	pc, [ip, #484]!	; 0x1e4

00010ea0 <__gmon_start__@plt>:
   10ea0:	add	ip, pc, #0, 12
   10ea4:	add	ip, ip, #94208	; 0x17000
   10ea8:	ldr	pc, [ip, #476]!	; 0x1dc

00010eac <freopen64@plt>:
   10eac:	add	ip, pc, #0, 12
   10eb0:	add	ip, ip, #94208	; 0x17000
   10eb4:	ldr	pc, [ip, #468]!	; 0x1d4

00010eb8 <getopt_long@plt>:
   10eb8:	add	ip, pc, #0, 12
   10ebc:	add	ip, ip, #94208	; 0x17000
   10ec0:	ldr	pc, [ip, #460]!	; 0x1cc

00010ec4 <__ctype_b_loc@plt>:
   10ec4:	add	ip, pc, #0, 12
   10ec8:	add	ip, ip, #94208	; 0x17000
   10ecc:	ldr	pc, [ip, #452]!	; 0x1c4

00010ed0 <exit@plt>:
   10ed0:	add	ip, pc, #0, 12
   10ed4:	add	ip, ip, #94208	; 0x17000
   10ed8:	ldr	pc, [ip, #444]!	; 0x1bc

00010edc <strlen@plt>:
   10edc:	add	ip, pc, #0, 12
   10ee0:	add	ip, ip, #94208	; 0x17000
   10ee4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ee8 <__errno_location@plt>:
   10ee8:	add	ip, pc, #0, 12
   10eec:	add	ip, ip, #94208	; 0x17000
   10ef0:	ldr	pc, [ip, #428]!	; 0x1ac

00010ef4 <__cxa_atexit@plt>:
   10ef4:	add	ip, pc, #0, 12
   10ef8:	add	ip, ip, #94208	; 0x17000
   10efc:	ldr	pc, [ip, #420]!	; 0x1a4

00010f00 <memset@plt>:
   10f00:	add	ip, pc, #0, 12
   10f04:	add	ip, ip, #94208	; 0x17000
   10f08:	ldr	pc, [ip, #412]!	; 0x19c

00010f0c <__printf_chk@plt>:
   10f0c:	add	ip, pc, #0, 12
   10f10:	add	ip, ip, #94208	; 0x17000
   10f14:	ldr	pc, [ip, #404]!	; 0x194

00010f18 <fileno@plt>:
   10f18:	add	ip, pc, #0, 12
   10f1c:	add	ip, ip, #94208	; 0x17000
   10f20:	ldr	pc, [ip, #396]!	; 0x18c

00010f24 <__fprintf_chk@plt>:
   10f24:	add	ip, pc, #0, 12
   10f28:	add	ip, ip, #94208	; 0x17000
   10f2c:	ldr	pc, [ip, #388]!	; 0x184

00010f30 <fclose@plt>:
   10f30:	add	ip, pc, #0, 12
   10f34:	add	ip, ip, #94208	; 0x17000
   10f38:	ldr	pc, [ip, #380]!	; 0x17c

00010f3c <fseeko64@plt>:
   10f3c:	add	ip, pc, #0, 12
   10f40:	add	ip, ip, #94208	; 0x17000
   10f44:	ldr	pc, [ip, #372]!	; 0x174

00010f48 <setlocale@plt>:
   10f48:	add	ip, pc, #0, 12
   10f4c:	add	ip, ip, #94208	; 0x17000
   10f50:	ldr	pc, [ip, #364]!	; 0x16c

00010f54 <strrchr@plt>:
   10f54:	add	ip, pc, #0, 12
   10f58:	add	ip, ip, #94208	; 0x17000
   10f5c:	ldr	pc, [ip, #356]!	; 0x164

00010f60 <nl_langinfo@plt>:
   10f60:	add	ip, pc, #0, 12
   10f64:	add	ip, ip, #94208	; 0x17000
   10f68:	ldr	pc, [ip, #348]!	; 0x15c

00010f6c <bindtextdomain@plt>:
   10f6c:	add	ip, pc, #0, 12
   10f70:	add	ip, ip, #94208	; 0x17000
   10f74:	ldr	pc, [ip, #340]!	; 0x154

00010f78 <strncmp@plt>:
   10f78:	add	ip, pc, #0, 12
   10f7c:	add	ip, ip, #94208	; 0x17000
   10f80:	ldr	pc, [ip, #332]!	; 0x14c

00010f84 <abort@plt>:
   10f84:	add	ip, pc, #0, 12
   10f88:	add	ip, ip, #94208	; 0x17000
   10f8c:	ldr	pc, [ip, #324]!	; 0x144

00010f90 <close@plt>:
   10f90:	add	ip, pc, #0, 12
   10f94:	add	ip, ip, #94208	; 0x17000
   10f98:	ldr	pc, [ip, #316]!	; 0x13c

Disassembly of section .text:

00010f9c <_obstack_begin@@Base-0x19c8>:
   10f9c:	mov	fp, #0
   10fa0:	mov	lr, #0
   10fa4:	pop	{r1}		; (ldr r1, [sp], #4)
   10fa8:	mov	r2, sp
   10fac:	push	{r2}		; (str r2, [sp, #-4]!)
   10fb0:	push	{r0}		; (str r0, [sp, #-4]!)
   10fb4:	ldr	ip, [pc, #16]	; 10fcc <close@plt+0x3c>
   10fb8:	push	{ip}		; (str ip, [sp, #-4]!)
   10fbc:	ldr	r0, [pc, #12]	; 10fd0 <close@plt+0x40>
   10fc0:	ldr	r3, [pc, #12]	; 10fd4 <close@plt+0x44>
   10fc4:	bl	10e88 <__libc_start_main@plt>
   10fc8:	bl	10f84 <abort@plt>
   10fcc:	andeq	r5, r1, r8, lsl #27
   10fd0:	andeq	r1, r1, r8, lsr ip
   10fd4:	andeq	r5, r1, r8, lsr #26
   10fd8:	ldr	r3, [pc, #20]	; 10ff4 <close@plt+0x64>
   10fdc:	ldr	r2, [pc, #20]	; 10ff8 <close@plt+0x68>
   10fe0:	add	r3, pc, r3
   10fe4:	ldr	r2, [r3, r2]
   10fe8:	cmp	r2, #0
   10fec:	bxeq	lr
   10ff0:	b	10ea0 <__gmon_start__@plt>
   10ff4:	andeq	r7, r1, r8, lsl r0
   10ff8:	ldrdeq	r0, [r0], -r8
   10ffc:	ldr	r0, [pc, #24]	; 1101c <close@plt+0x8c>
   11000:	ldr	r3, [pc, #24]	; 11020 <close@plt+0x90>
   11004:	cmp	r3, r0
   11008:	bxeq	lr
   1100c:	ldr	r3, [pc, #16]	; 11024 <close@plt+0x94>
   11010:	cmp	r3, #0
   11014:	bxeq	lr
   11018:	bx	r3
   1101c:	andeq	r8, r2, r0, lsr r1
   11020:	andeq	r8, r2, r0, lsr r1
   11024:	andeq	r0, r0, r0
   11028:	ldr	r0, [pc, #36]	; 11054 <close@plt+0xc4>
   1102c:	ldr	r1, [pc, #36]	; 11058 <close@plt+0xc8>
   11030:	sub	r1, r1, r0
   11034:	asr	r1, r1, #2
   11038:	add	r1, r1, r1, lsr #31
   1103c:	asrs	r1, r1, #1
   11040:	bxeq	lr
   11044:	ldr	r3, [pc, #16]	; 1105c <close@plt+0xcc>
   11048:	cmp	r3, #0
   1104c:	bxeq	lr
   11050:	bx	r3
   11054:	andeq	r8, r2, r0, lsr r1
   11058:	andeq	r8, r2, r0, lsr r1
   1105c:	andeq	r0, r0, r0
   11060:	push	{r4, lr}
   11064:	ldr	r4, [pc, #24]	; 11084 <close@plt+0xf4>
   11068:	ldrb	r3, [r4]
   1106c:	cmp	r3, #0
   11070:	popne	{r4, pc}
   11074:	bl	10ffc <close@plt+0x6c>
   11078:	mov	r3, #1
   1107c:	strb	r3, [r4]
   11080:	pop	{r4, pc}
   11084:	andeq	r8, r2, r0, asr r1
   11088:	b	11028 <close@plt+0x98>
   1108c:	ldrb	r3, [r0]
   11090:	cmp	r3, #0
   11094:	bxeq	lr
   11098:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1109c:	strd	r6, [sp, #8]
   110a0:	str	r8, [sp, #16]
   110a4:	str	lr, [sp, #20]
   110a8:	mov	r5, r0
   110ac:	mov	r6, #1
   110b0:	mov	r7, r6
   110b4:	movw	r4, #33108	; 0x8154
   110b8:	movt	r4, #2
   110bc:	mov	r8, #92	; 0x5c
   110c0:	b	1117c <close@plt+0x1ec>
   110c4:	cmp	r3, #92	; 0x5c
   110c8:	beq	110d8 <close@plt+0x148>
   110cc:	cmp	r3, #94	; 0x5e
   110d0:	movne	r6, r7
   110d4:	bne	1114c <close@plt+0x1bc>
   110d8:	eor	r6, r6, #1
   110dc:	b	1114c <close@plt+0x1bc>
   110e0:	ldr	r2, [r4, #16]
   110e4:	ldr	r3, [r4, #12]
   110e8:	cmp	r2, r3
   110ec:	beq	111cc <close@plt+0x23c>
   110f0:	ldr	r3, [r4, #12]
   110f4:	add	r2, r3, #1
   110f8:	str	r2, [r4, #12]
   110fc:	mov	r2, #39	; 0x27
   11100:	strb	r2, [r3]
   11104:	ldr	r2, [r4, #16]
   11108:	ldr	r3, [r4, #12]
   1110c:	cmp	r2, r3
   11110:	beq	111dc <close@plt+0x24c>
   11114:	ldr	r3, [r4, #12]
   11118:	add	r2, r3, #1
   1111c:	str	r2, [r4, #12]
   11120:	strb	r8, [r3]
   11124:	ldr	r2, [r4, #16]
   11128:	ldr	r3, [r4, #12]
   1112c:	cmp	r2, r3
   11130:	beq	111ec <close@plt+0x25c>
   11134:	ldr	r3, [r4, #12]
   11138:	add	r2, r3, #1
   1113c:	str	r2, [r4, #12]
   11140:	mov	r2, #39	; 0x27
   11144:	strb	r2, [r3]
   11148:	mov	r6, r7
   1114c:	ldr	r2, [r4, #16]
   11150:	ldr	r3, [r4, #12]
   11154:	cmp	r2, r3
   11158:	beq	1120c <close@plt+0x27c>
   1115c:	ldr	r3, [r4, #12]
   11160:	add	r2, r3, #1
   11164:	str	r2, [r4, #12]
   11168:	ldrb	r2, [r5]
   1116c:	strb	r2, [r3]
   11170:	ldrb	r3, [r5, #1]!
   11174:	cmp	r3, #0
   11178:	beq	1121c <close@plt+0x28c>
   1117c:	cmp	r3, #61	; 0x3d
   11180:	beq	1119c <close@plt+0x20c>
   11184:	bhi	110c4 <close@plt+0x134>
   11188:	cmp	r3, #39	; 0x27
   1118c:	beq	110e0 <close@plt+0x150>
   11190:	cmp	r3, #58	; 0x3a
   11194:	movne	r6, r7
   11198:	bne	1114c <close@plt+0x1bc>
   1119c:	cmp	r6, #0
   111a0:	moveq	r6, r7
   111a4:	beq	1114c <close@plt+0x1bc>
   111a8:	ldr	r2, [r4, #16]
   111ac:	ldr	r3, [r4, #12]
   111b0:	cmp	r2, r3
   111b4:	beq	111fc <close@plt+0x26c>
   111b8:	ldr	r3, [r4, #12]
   111bc:	add	r2, r3, #1
   111c0:	str	r2, [r4, #12]
   111c4:	strb	r8, [r3]
   111c8:	b	1114c <close@plt+0x1bc>
   111cc:	mov	r1, r7
   111d0:	mov	r0, r4
   111d4:	bl	129cc <_obstack_newchunk@@Base>
   111d8:	b	110f0 <close@plt+0x160>
   111dc:	mov	r1, r7
   111e0:	mov	r0, r4
   111e4:	bl	129cc <_obstack_newchunk@@Base>
   111e8:	b	11114 <close@plt+0x184>
   111ec:	mov	r1, r7
   111f0:	mov	r0, r4
   111f4:	bl	129cc <_obstack_newchunk@@Base>
   111f8:	b	11134 <close@plt+0x1a4>
   111fc:	mov	r1, r7
   11200:	mov	r0, r4
   11204:	bl	129cc <_obstack_newchunk@@Base>
   11208:	b	111b8 <close@plt+0x228>
   1120c:	mov	r1, r7
   11210:	mov	r0, r4
   11214:	bl	129cc <_obstack_newchunk@@Base>
   11218:	b	1115c <close@plt+0x1cc>
   1121c:	ldrd	r4, [sp]
   11220:	ldrd	r6, [sp, #8]
   11224:	ldr	r8, [sp, #16]
   11228:	add	sp, sp, #20
   1122c:	pop	{pc}		; (ldr pc, [sp], #4)
   11230:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11234:	strd	r6, [sp, #8]
   11238:	strd	r8, [sp, #16]
   1123c:	strd	sl, [sp, #24]
   11240:	str	lr, [sp, #32]
   11244:	sub	sp, sp, #52	; 0x34
   11248:	mov	fp, r0
   1124c:	str	r1, [sp, #28]
   11250:	mov	r3, #0
   11254:	str	r3, [sp, #44]	; 0x2c
   11258:	str	r3, [sp, #40]	; 0x28
   1125c:	movw	r0, #28800	; 0x7080
   11260:	movt	r0, #1
   11264:	bl	10e64 <getenv@plt>
   11268:	subs	r1, r0, #0
   1126c:	beq	112bc <close@plt+0x32c>
   11270:	ldrb	r2, [r1]
   11274:	movw	r3, #28784	; 0x7070
   11278:	movt	r3, #1
   1127c:	cmp	r2, #0
   11280:	moveq	r1, r3
   11284:	str	r1, [sp, #20]
   11288:	mov	sl, #3
   1128c:	mov	r3, #1
   11290:	str	r3, [sp, #24]
   11294:	movw	r6, #24472	; 0x5f98
   11298:	movt	r6, #1
   1129c:	mov	r7, #0
   112a0:	movw	r3, #28880	; 0x70d0
   112a4:	movt	r3, #1
   112a8:	str	r3, [sp, #32]
   112ac:	movw	r3, #28800	; 0x7080
   112b0:	movt	r3, #1
   112b4:	str	r3, [sp, #16]
   112b8:	b	11398 <close@plt+0x408>
   112bc:	movw	r3, #28784	; 0x7070
   112c0:	movt	r3, #1
   112c4:	str	r3, [sp, #20]
   112c8:	b	11288 <close@plt+0x2f8>
   112cc:	ldr	r0, [sp, #44]	; 0x2c
   112d0:	bl	124e0 <close@plt+0x1550>
   112d4:	ldr	r0, [sp, #24]
   112d8:	add	sp, sp, #52	; 0x34
   112dc:	ldrd	r4, [sp]
   112e0:	ldrd	r6, [sp, #8]
   112e4:	ldrd	r8, [sp, #16]
   112e8:	ldrd	sl, [sp, #24]
   112ec:	add	sp, sp, #32
   112f0:	pop	{pc}		; (ldr pc, [sp], #4)
   112f4:	ldr	r3, [pc, #1452]	; 118a8 <close@plt+0x918>
   112f8:	cmp	r6, r3
   112fc:	beq	112d4 <close@plt+0x344>
   11300:	mov	r0, r6
   11304:	bl	10edc <strlen@plt>
   11308:	add	r0, r0, #1
   1130c:	mov	r4, r6
   11310:	add	r6, r6, r0
   11314:	b	113c4 <close@plt+0x434>
   11318:	mov	r1, r2
   1131c:	add	r2, r1, #1
   11320:	ldrb	r3, [r1, #1]
   11324:	subs	r4, r3, #35	; 0x23
   11328:	movne	r4, #1
   1132c:	cmp	r3, #0
   11330:	moveq	r4, #0
   11334:	cmp	r4, #0
   11338:	bne	11318 <close@plt+0x388>
   1133c:	ldrb	r3, [r2, #-1]
   11340:	lsl	r3, r3, #1
   11344:	ldrh	r3, [r0, r3]
   11348:	tst	r3, #8192	; 0x2000
   1134c:	bne	114ac <close@plt+0x51c>
   11350:	add	r1, r1, #1
   11354:	sub	r1, r1, r8
   11358:	mov	r0, r8
   1135c:	bl	158d8 <_obstack_memory_used@@Base+0x2d30>
   11360:	str	r0, [sp, #12]
   11364:	ldr	r1, [sp, #16]
   11368:	mov	r0, r5
   1136c:	bl	12220 <close@plt+0x1290>
   11370:	cmp	r0, #0
   11374:	beq	114c4 <close@plt+0x534>
   11378:	cmp	sl, #2
   1137c:	beq	114ec <close@plt+0x55c>
   11380:	cmp	sl, #0
   11384:	bne	114f0 <close@plt+0x560>
   11388:	mov	r0, r5
   1138c:	bl	124e0 <close@plt+0x1550>
   11390:	ldr	r0, [sp, #12]
   11394:	bl	124e0 <close@plt+0x1550>
   11398:	add	r7, r7, #1
   1139c:	cmp	fp, #0
   113a0:	beq	112f4 <close@plt+0x364>
   113a4:	mov	r3, fp
   113a8:	mov	r2, #10
   113ac:	add	r1, sp, #40	; 0x28
   113b0:	add	r0, sp, #44	; 0x2c
   113b4:	bl	10d50 <__getdelim@plt>
   113b8:	cmp	r0, #0
   113bc:	ble	112cc <close@plt+0x33c>
   113c0:	ldr	r4, [sp, #44]	; 0x2c
   113c4:	bl	10ec4 <__ctype_b_loc@plt>
   113c8:	mov	r9, r0
   113cc:	ldr	r2, [r0]
   113d0:	mov	r3, r4
   113d4:	mov	r0, r3
   113d8:	ldrb	r1, [r3], #1
   113dc:	lsl	ip, r1, #1
   113e0:	ldrh	ip, [r2, ip]
   113e4:	tst	ip, #8192	; 0x2000
   113e8:	bne	113d4 <close@plt+0x444>
   113ec:	cmp	r1, #35	; 0x23
   113f0:	cmpne	r1, #0
   113f4:	beq	11398 <close@plt+0x408>
   113f8:	mov	r8, r0
   113fc:	ldrb	r3, [r8, #1]!
   11400:	lsl	r1, r3, #1
   11404:	ldrh	r4, [r2, r1]
   11408:	eor	r4, r4, #8192	; 0x2000
   1140c:	ubfx	r4, r4, #13, #1
   11410:	cmp	r3, #0
   11414:	moveq	r4, #0
   11418:	cmp	r4, #0
   1141c:	bne	113fc <close@plt+0x46c>
   11420:	sub	r1, r8, r0
   11424:	bl	158d8 <_obstack_memory_used@@Base+0x2d30>
   11428:	mov	r5, r0
   1142c:	ldrb	r3, [r8]
   11430:	cmp	r3, #0
   11434:	beq	11460 <close@plt+0x4d0>
   11438:	ldr	r0, [r9]
   1143c:	ldrb	r3, [r8, #1]!
   11440:	lsl	r2, r3, #1
   11444:	ldrh	r2, [r0, r2]
   11448:	tst	r2, #8192	; 0x2000
   1144c:	bne	1143c <close@plt+0x4ac>
   11450:	cmp	r3, #35	; 0x23
   11454:	cmpne	r3, #0
   11458:	movne	r1, r8
   1145c:	bne	1131c <close@plt+0x38c>
   11460:	mov	r2, #5
   11464:	ldr	r1, [sp, #32]
   11468:	mov	r0, #0
   1146c:	bl	10dc8 <dcgettext@plt>
   11470:	mov	r8, r0
   11474:	ldr	r2, [sp, #28]
   11478:	mov	r1, #3
   1147c:	mov	r0, #0
   11480:	bl	14d0c <_obstack_memory_used@@Base+0x2164>
   11484:	str	r7, [sp]
   11488:	mov	r3, r0
   1148c:	mov	r2, r8
   11490:	mov	r1, #0
   11494:	mov	r0, r1
   11498:	bl	10e40 <error@plt>
   1149c:	mov	r0, r5
   114a0:	bl	124e0 <close@plt+0x1550>
   114a4:	str	r4, [sp, #24]
   114a8:	b	11398 <close@plt+0x408>
   114ac:	ldrb	r3, [r1, #-1]!
   114b0:	lsl	r3, r3, #1
   114b4:	ldrh	r3, [r0, r3]
   114b8:	tst	r3, #8192	; 0x2000
   114bc:	beq	11350 <close@plt+0x3c0>
   114c0:	b	114ac <close@plt+0x51c>
   114c4:	mov	r2, #0
   114c8:	ldr	r1, [sp, #20]
   114cc:	ldr	r0, [sp, #12]
   114d0:	bl	10e4c <fnmatch@plt>
   114d4:	cmp	r0, #0
   114d8:	moveq	sl, #2
   114dc:	beq	11388 <close@plt+0x3f8>
   114e0:	cmp	sl, #2
   114e4:	movne	sl, #0
   114e8:	b	11388 <close@plt+0x3f8>
   114ec:	mov	sl, #1
   114f0:	ldrb	r3, [r5]
   114f4:	cmp	r3, #46	; 0x2e
   114f8:	beq	115f0 <close@plt+0x660>
   114fc:	cmp	r3, #42	; 0x2a
   11500:	beq	116c4 <close@plt+0x734>
   11504:	movw	r1, #28808	; 0x7088
   11508:	movt	r1, #1
   1150c:	mov	r0, r5
   11510:	bl	12220 <close@plt+0x1290>
   11514:	cmp	r0, #0
   11518:	beq	11388 <close@plt+0x3f8>
   1151c:	movw	r1, #28816	; 0x7090
   11520:	movt	r1, #1
   11524:	mov	r0, r5
   11528:	bl	12220 <close@plt+0x1290>
   1152c:	cmp	r0, #0
   11530:	beq	11388 <close@plt+0x3f8>
   11534:	movw	r1, #28824	; 0x7098
   11538:	movt	r1, #1
   1153c:	mov	r0, r5
   11540:	bl	12220 <close@plt+0x1290>
   11544:	cmp	r0, #0
   11548:	beq	11388 <close@plt+0x3f8>
   1154c:	movw	r9, #23984	; 0x5db0
   11550:	movt	r9, #1
   11554:	mov	r3, #0
   11558:	movw	r8, #28792	; 0x7078
   1155c:	movt	r8, #1
   11560:	str	r7, [sp, #36]	; 0x24
   11564:	mov	r7, r3
   11568:	mov	r1, r8
   1156c:	mov	r0, r5
   11570:	bl	12220 <close@plt+0x1290>
   11574:	cmp	r0, #0
   11578:	beq	1175c <close@plt+0x7cc>
   1157c:	add	r7, r7, #1
   11580:	ldr	r8, [r9, #4]!
   11584:	cmp	r8, #0
   11588:	bne	11568 <close@plt+0x5d8>
   1158c:	ldr	r7, [sp, #36]	; 0x24
   11590:	sub	r3, sl, #1
   11594:	cmp	r3, #1
   11598:	bhi	11388 <close@plt+0x3f8>
   1159c:	mov	r2, #5
   115a0:	movw	r1, #28836	; 0x70a4
   115a4:	movt	r1, #1
   115a8:	mov	r0, #0
   115ac:	bl	10dc8 <dcgettext@plt>
   115b0:	mov	r8, r0
   115b4:	ldr	r2, [sp, #28]
   115b8:	cmp	r2, #0
   115bc:	beq	1188c <close@plt+0x8fc>
   115c0:	mov	r1, #3
   115c4:	mov	r0, #0
   115c8:	bl	14d0c <_obstack_memory_used@@Base+0x2164>
   115cc:	mov	r3, r0
   115d0:	str	r5, [sp, #4]
   115d4:	str	r7, [sp]
   115d8:	mov	r2, r8
   115dc:	mov	r1, #0
   115e0:	mov	r0, r1
   115e4:	bl	10e40 <error@plt>
   115e8:	str	r4, [sp, #24]
   115ec:	b	11388 <close@plt+0x3f8>
   115f0:	movw	r3, #33108	; 0x8154
   115f4:	movt	r3, #2
   115f8:	ldr	r2, [r3, #16]
   115fc:	ldr	r3, [r3, #12]
   11600:	cmp	r2, r3
   11604:	beq	11690 <close@plt+0x700>
   11608:	movw	r4, #33108	; 0x8154
   1160c:	movt	r4, #2
   11610:	ldr	r3, [r4, #12]
   11614:	add	r2, r3, #1
   11618:	str	r2, [r4, #12]
   1161c:	mov	r2, #42	; 0x2a
   11620:	strb	r2, [r3]
   11624:	mov	r0, r5
   11628:	bl	1108c <close@plt+0xfc>
   1162c:	ldr	r2, [r4, #16]
   11630:	ldr	r3, [r4, #12]
   11634:	cmp	r2, r3
   11638:	beq	116a4 <close@plt+0x714>
   1163c:	movw	r4, #33108	; 0x8154
   11640:	movt	r4, #2
   11644:	ldr	r3, [r4, #12]
   11648:	add	r2, r3, #1
   1164c:	str	r2, [r4, #12]
   11650:	mov	r2, #61	; 0x3d
   11654:	strb	r2, [r3]
   11658:	ldr	r0, [sp, #12]
   1165c:	bl	1108c <close@plt+0xfc>
   11660:	ldr	r2, [r4, #16]
   11664:	ldr	r3, [r4, #12]
   11668:	cmp	r2, r3
   1166c:	beq	116b4 <close@plt+0x724>
   11670:	movw	r3, #33108	; 0x8154
   11674:	movt	r3, #2
   11678:	ldr	r2, [r3, #12]
   1167c:	add	r1, r2, #1
   11680:	str	r1, [r3, #12]
   11684:	mov	r3, #58	; 0x3a
   11688:	strb	r3, [r2]
   1168c:	b	11388 <close@plt+0x3f8>
   11690:	mov	r1, #1
   11694:	movw	r0, #33108	; 0x8154
   11698:	movt	r0, #2
   1169c:	bl	129cc <_obstack_newchunk@@Base>
   116a0:	b	11608 <close@plt+0x678>
   116a4:	mov	r1, #1
   116a8:	mov	r0, r4
   116ac:	bl	129cc <_obstack_newchunk@@Base>
   116b0:	b	1163c <close@plt+0x6ac>
   116b4:	mov	r1, #1
   116b8:	mov	r0, r4
   116bc:	bl	129cc <_obstack_newchunk@@Base>
   116c0:	b	11670 <close@plt+0x6e0>
   116c4:	mov	r0, r5
   116c8:	bl	1108c <close@plt+0xfc>
   116cc:	movw	r3, #33108	; 0x8154
   116d0:	movt	r3, #2
   116d4:	ldr	r2, [r3, #16]
   116d8:	ldr	r3, [r3, #12]
   116dc:	cmp	r2, r3
   116e0:	beq	11738 <close@plt+0x7a8>
   116e4:	movw	r4, #33108	; 0x8154
   116e8:	movt	r4, #2
   116ec:	ldr	r3, [r4, #12]
   116f0:	add	r2, r3, #1
   116f4:	str	r2, [r4, #12]
   116f8:	mov	r2, #61	; 0x3d
   116fc:	strb	r2, [r3]
   11700:	ldr	r0, [sp, #12]
   11704:	bl	1108c <close@plt+0xfc>
   11708:	ldr	r2, [r4, #16]
   1170c:	ldr	r3, [r4, #12]
   11710:	cmp	r2, r3
   11714:	beq	1174c <close@plt+0x7bc>
   11718:	movw	r3, #33108	; 0x8154
   1171c:	movt	r3, #2
   11720:	ldr	r2, [r3, #12]
   11724:	add	r1, r2, #1
   11728:	str	r1, [r3, #12]
   1172c:	mov	r3, #58	; 0x3a
   11730:	strb	r3, [r2]
   11734:	b	11388 <close@plt+0x3f8>
   11738:	mov	r1, #1
   1173c:	movw	r0, #33108	; 0x8154
   11740:	movt	r0, #2
   11744:	bl	129cc <_obstack_newchunk@@Base>
   11748:	b	116e4 <close@plt+0x754>
   1174c:	mov	r1, #1
   11750:	mov	r0, r4
   11754:	bl	129cc <_obstack_newchunk@@Base>
   11758:	b	11718 <close@plt+0x788>
   1175c:	mov	r9, r7
   11760:	ldr	r7, [sp, #36]	; 0x24
   11764:	cmp	r8, #0
   11768:	beq	11590 <close@plt+0x600>
   1176c:	movw	r3, #33108	; 0x8154
   11770:	movt	r3, #2
   11774:	ldr	r2, [r3, #16]
   11778:	ldr	r3, [r3, #12]
   1177c:	cmp	r2, r3
   11780:	beq	11840 <close@plt+0x8b0>
   11784:	movw	r3, #23984	; 0x5db0
   11788:	movt	r3, #1
   1178c:	add	r3, r3, r9, lsl #2
   11790:	ldr	r4, [r3, #152]	; 0x98
   11794:	movw	r3, #33108	; 0x8154
   11798:	movt	r3, #2
   1179c:	ldr	r2, [r3, #12]
   117a0:	add	r1, r2, #1
   117a4:	str	r1, [r3, #12]
   117a8:	ldrb	r1, [r4]
   117ac:	strb	r1, [r2]
   117b0:	ldr	r2, [r3, #16]
   117b4:	ldr	r3, [r3, #12]
   117b8:	cmp	r2, r3
   117bc:	beq	11854 <close@plt+0x8c4>
   117c0:	movw	r3, #33108	; 0x8154
   117c4:	movt	r3, #2
   117c8:	ldr	r2, [r3, #12]
   117cc:	add	r1, r2, #1
   117d0:	str	r1, [r3, #12]
   117d4:	ldrb	r1, [r4, #1]
   117d8:	strb	r1, [r2]
   117dc:	ldr	r2, [r3, #16]
   117e0:	ldr	r3, [r3, #12]
   117e4:	cmp	r2, r3
   117e8:	beq	11868 <close@plt+0x8d8>
   117ec:	movw	r4, #33108	; 0x8154
   117f0:	movt	r4, #2
   117f4:	ldr	r3, [r4, #12]
   117f8:	add	r2, r3, #1
   117fc:	str	r2, [r4, #12]
   11800:	mov	r2, #61	; 0x3d
   11804:	strb	r2, [r3]
   11808:	ldr	r0, [sp, #12]
   1180c:	bl	1108c <close@plt+0xfc>
   11810:	ldr	r2, [r4, #16]
   11814:	ldr	r3, [r4, #12]
   11818:	cmp	r2, r3
   1181c:	beq	1187c <close@plt+0x8ec>
   11820:	movw	r3, #33108	; 0x8154
   11824:	movt	r3, #2
   11828:	ldr	r2, [r3, #12]
   1182c:	add	r1, r2, #1
   11830:	str	r1, [r3, #12]
   11834:	mov	r3, #58	; 0x3a
   11838:	strb	r3, [r2]
   1183c:	b	11388 <close@plt+0x3f8>
   11840:	mov	r1, #1
   11844:	movw	r0, #33108	; 0x8154
   11848:	movt	r0, #2
   1184c:	bl	129cc <_obstack_newchunk@@Base>
   11850:	b	11784 <close@plt+0x7f4>
   11854:	mov	r1, #1
   11858:	movw	r0, #33108	; 0x8154
   1185c:	movt	r0, #2
   11860:	bl	129cc <_obstack_newchunk@@Base>
   11864:	b	117c0 <close@plt+0x830>
   11868:	mov	r1, #1
   1186c:	movw	r0, #33108	; 0x8154
   11870:	movt	r0, #2
   11874:	bl	129cc <_obstack_newchunk@@Base>
   11878:	b	117ec <close@plt+0x85c>
   1187c:	mov	r1, #1
   11880:	mov	r0, r4
   11884:	bl	129cc <_obstack_newchunk@@Base>
   11888:	b	11820 <close@plt+0x890>
   1188c:	mov	r2, #5
   11890:	movw	r1, #28868	; 0x70c4
   11894:	movt	r1, #1
   11898:	mov	r0, #0
   1189c:	bl	10dc8 <dcgettext@plt>
   118a0:	mov	r3, r0
   118a4:	b	115d0 <close@plt+0x640>
   118a8:	andeq	r7, r1, lr, rrx
   118ac:	push	{lr}		; (str lr, [sp, #-4]!)
   118b0:	sub	sp, sp, #60	; 0x3c
   118b4:	subs	r4, r0, #0
   118b8:	beq	11900 <close@plt+0x970>
   118bc:	movw	r3, #33088	; 0x8140
   118c0:	movt	r3, #2
   118c4:	ldr	r5, [r3]
   118c8:	mov	r2, #5
   118cc:	movw	r1, #28936	; 0x7108
   118d0:	movt	r1, #1
   118d4:	mov	r0, #0
   118d8:	bl	10dc8 <dcgettext@plt>
   118dc:	movw	r3, #33160	; 0x8188
   118e0:	movt	r3, #2
   118e4:	ldr	r3, [r3]
   118e8:	mov	r2, r0
   118ec:	mov	r1, #1
   118f0:	mov	r0, r5
   118f4:	bl	10f24 <__fprintf_chk@plt>
   118f8:	mov	r0, r4
   118fc:	bl	10ed0 <exit@plt>
   11900:	mov	r2, #5
   11904:	movw	r1, #28976	; 0x7130
   11908:	movt	r1, #1
   1190c:	mov	r0, #0
   11910:	bl	10dc8 <dcgettext@plt>
   11914:	movw	r3, #33160	; 0x8188
   11918:	movt	r3, #2
   1191c:	ldr	r2, [r3]
   11920:	mov	r1, r0
   11924:	mov	r0, #1
   11928:	bl	10f0c <__printf_chk@plt>
   1192c:	mov	r2, #5
   11930:	movw	r1, #29008	; 0x7150
   11934:	movt	r1, #1
   11938:	mov	r0, #0
   1193c:	bl	10dc8 <dcgettext@plt>
   11940:	movw	r5, #33100	; 0x814c
   11944:	movt	r5, #2
   11948:	ldr	r1, [r5]
   1194c:	bl	10d44 <fputs_unlocked@plt>
   11950:	mov	r2, #5
   11954:	movw	r1, #29284	; 0x7264
   11958:	movt	r1, #1
   1195c:	mov	r0, #0
   11960:	bl	10dc8 <dcgettext@plt>
   11964:	ldr	r1, [r5]
   11968:	bl	10d44 <fputs_unlocked@plt>
   1196c:	mov	r2, #5
   11970:	movw	r1, #29332	; 0x7294
   11974:	movt	r1, #1
   11978:	mov	r0, #0
   1197c:	bl	10dc8 <dcgettext@plt>
   11980:	ldr	r1, [r5]
   11984:	bl	10d44 <fputs_unlocked@plt>
   11988:	mov	r2, #5
   1198c:	movw	r1, #29388	; 0x72cc
   11990:	movt	r1, #1
   11994:	mov	r0, #0
   11998:	bl	10dc8 <dcgettext@plt>
   1199c:	ldr	r1, [r5]
   119a0:	bl	10d44 <fputs_unlocked@plt>
   119a4:	ldr	r0, [pc, #648]	; 11c34 <close@plt+0xca4>
   119a8:	ldr	r1, [r0]
   119ac:	ldr	r3, [r0, #4]
   119b0:	str	r1, [sp]
   119b4:	str	r3, [sp, #4]
   119b8:	ldrd	r2, [r0, #8]
   119bc:	strd	r2, [sp, #8]
   119c0:	ldrd	r2, [r0, #16]
   119c4:	strd	r2, [sp, #16]
   119c8:	ldrd	r2, [r0, #24]
   119cc:	strd	r2, [sp, #24]
   119d0:	ldrd	r2, [r0, #32]
   119d4:	strd	r2, [sp, #32]
   119d8:	ldrd	r2, [r0, #40]	; 0x28
   119dc:	strd	r2, [sp, #40]	; 0x28
   119e0:	ldrd	r2, [r0, #48]	; 0x30
   119e4:	strd	r2, [sp, #48]	; 0x30
   119e8:	cmp	r1, #0
   119ec:	moveq	r5, sp
   119f0:	beq	11a1c <close@plt+0xa8c>
   119f4:	mov	r5, sp
   119f8:	movw	r6, #28924	; 0x70fc
   119fc:	movt	r6, #1
   11a00:	mov	r0, r6
   11a04:	bl	10d5c <strcmp@plt>
   11a08:	cmp	r0, #0
   11a0c:	beq	11a1c <close@plt+0xa8c>
   11a10:	ldr	r1, [r5, #8]!
   11a14:	cmp	r1, #0
   11a18:	bne	11a00 <close@plt+0xa70>
   11a1c:	ldr	r5, [r5, #4]
   11a20:	cmp	r5, #0
   11a24:	beq	11b80 <close@plt+0xbf0>
   11a28:	mov	r2, #5
   11a2c:	movw	r1, #29612	; 0x73ac
   11a30:	movt	r1, #1
   11a34:	mov	r0, #0
   11a38:	bl	10dc8 <dcgettext@plt>
   11a3c:	movw	r3, #29636	; 0x73c4
   11a40:	movt	r3, #1
   11a44:	movw	r2, #29676	; 0x73ec
   11a48:	movt	r2, #1
   11a4c:	mov	r1, r0
   11a50:	mov	r0, #1
   11a54:	bl	10f0c <__printf_chk@plt>
   11a58:	mov	r1, #0
   11a5c:	mov	r0, #5
   11a60:	bl	10f48 <setlocale@plt>
   11a64:	cmp	r0, #0
   11a68:	beq	11a84 <close@plt+0xaf4>
   11a6c:	mov	r2, #3
   11a70:	movw	r1, #29692	; 0x73fc
   11a74:	movt	r1, #1
   11a78:	bl	10f78 <strncmp@plt>
   11a7c:	cmp	r0, #0
   11a80:	bne	11b00 <close@plt+0xb70>
   11a84:	mov	r2, #5
   11a88:	movw	r1, #29768	; 0x7448
   11a8c:	movt	r1, #1
   11a90:	mov	r0, #0
   11a94:	bl	10dc8 <dcgettext@plt>
   11a98:	movw	r6, #28924	; 0x70fc
   11a9c:	movt	r6, #1
   11aa0:	mov	r3, r6
   11aa4:	movw	r2, #29636	; 0x73c4
   11aa8:	movt	r2, #1
   11aac:	mov	r1, r0
   11ab0:	mov	r0, #1
   11ab4:	bl	10f0c <__printf_chk@plt>
   11ab8:	mov	r2, #5
   11abc:	movw	r1, #29796	; 0x7464
   11ac0:	movt	r1, #1
   11ac4:	mov	r0, #0
   11ac8:	bl	10dc8 <dcgettext@plt>
   11acc:	mov	r1, r0
   11ad0:	movw	r2, #30232	; 0x7618
   11ad4:	movt	r2, #1
   11ad8:	movw	r3, #29868	; 0x74ac
   11adc:	movt	r3, #1
   11ae0:	cmp	r5, r6
   11ae4:	moveq	r3, r2
   11ae8:	mov	r2, r5
   11aec:	mov	r0, #1
   11af0:	bl	10f0c <__printf_chk@plt>
   11af4:	b	118f8 <close@plt+0x968>
   11af8:	movw	r5, #28924	; 0x70fc
   11afc:	movt	r5, #1
   11b00:	mov	r2, #5
   11b04:	movw	r1, #29696	; 0x7400
   11b08:	movt	r1, #1
   11b0c:	mov	r0, #0
   11b10:	bl	10dc8 <dcgettext@plt>
   11b14:	movw	r3, #33100	; 0x814c
   11b18:	movt	r3, #2
   11b1c:	ldr	r1, [r3]
   11b20:	bl	10d44 <fputs_unlocked@plt>
   11b24:	b	11a84 <close@plt+0xaf4>
   11b28:	mov	r2, #5
   11b2c:	movw	r1, #29768	; 0x7448
   11b30:	movt	r1, #1
   11b34:	mov	r0, #0
   11b38:	bl	10dc8 <dcgettext@plt>
   11b3c:	movw	r5, #28924	; 0x70fc
   11b40:	movt	r5, #1
   11b44:	mov	r3, r5
   11b48:	movw	r2, #29636	; 0x73c4
   11b4c:	movt	r2, #1
   11b50:	mov	r1, r0
   11b54:	mov	r0, #1
   11b58:	bl	10f0c <__printf_chk@plt>
   11b5c:	mov	r2, #5
   11b60:	movw	r1, #29796	; 0x7464
   11b64:	movt	r1, #1
   11b68:	mov	r0, #0
   11b6c:	bl	10dc8 <dcgettext@plt>
   11b70:	mov	r1, r0
   11b74:	movw	r3, #30232	; 0x7618
   11b78:	movt	r3, #1
   11b7c:	b	11ae8 <close@plt+0xb58>
   11b80:	mov	r2, #5
   11b84:	movw	r1, #29612	; 0x73ac
   11b88:	movt	r1, #1
   11b8c:	mov	r0, #0
   11b90:	bl	10dc8 <dcgettext@plt>
   11b94:	movw	r3, #29636	; 0x73c4
   11b98:	movt	r3, #1
   11b9c:	movw	r2, #29676	; 0x73ec
   11ba0:	movt	r2, #1
   11ba4:	mov	r1, r0
   11ba8:	mov	r0, #1
   11bac:	bl	10f0c <__printf_chk@plt>
   11bb0:	mov	r1, #0
   11bb4:	mov	r0, #5
   11bb8:	bl	10f48 <setlocale@plt>
   11bbc:	cmp	r0, #0
   11bc0:	beq	11b28 <close@plt+0xb98>
   11bc4:	mov	r2, #3
   11bc8:	movw	r1, #29692	; 0x73fc
   11bcc:	movt	r1, #1
   11bd0:	bl	10f78 <strncmp@plt>
   11bd4:	cmp	r0, #0
   11bd8:	bne	11af8 <close@plt+0xb68>
   11bdc:	mov	r2, #5
   11be0:	movw	r1, #29768	; 0x7448
   11be4:	movt	r1, #1
   11be8:	mov	r0, #0
   11bec:	bl	10dc8 <dcgettext@plt>
   11bf0:	movw	r5, #28924	; 0x70fc
   11bf4:	movt	r5, #1
   11bf8:	mov	r3, r5
   11bfc:	movw	r2, #29636	; 0x73c4
   11c00:	movt	r2, #1
   11c04:	mov	r1, r0
   11c08:	mov	r0, #1
   11c0c:	bl	10f0c <__printf_chk@plt>
   11c10:	mov	r2, #5
   11c14:	movw	r1, #29796	; 0x7464
   11c18:	movt	r1, #1
   11c1c:	mov	r0, #0
   11c20:	bl	10dc8 <dcgettext@plt>
   11c24:	mov	r1, r0
   11c28:	movw	r3, #30232	; 0x7618
   11c2c:	movt	r3, #1
   11c30:	b	11ae8 <close@plt+0xb58>
   11c34:	andeq	r5, r1, r0, ror #29
   11c38:	strd	r4, [sp, #-32]!	; 0xffffffe0
   11c3c:	strd	r6, [sp, #8]
   11c40:	strd	r8, [sp, #16]
   11c44:	str	sl, [sp, #24]
   11c48:	str	lr, [sp, #28]
   11c4c:	sub	sp, sp, #8
   11c50:	mov	r8, r0
   11c54:	mov	r5, r1
   11c58:	ldr	r0, [r1]
   11c5c:	bl	12bdc <_obstack_memory_used@@Base+0x34>
   11c60:	movw	r1, #29868	; 0x74ac
   11c64:	movt	r1, #1
   11c68:	mov	r0, #6
   11c6c:	bl	10f48 <setlocale@plt>
   11c70:	movw	r4, #29680	; 0x73f0
   11c74:	movt	r4, #1
   11c78:	movw	r1, #29904	; 0x74d0
   11c7c:	movt	r1, #1
   11c80:	mov	r0, r4
   11c84:	bl	10f6c <bindtextdomain@plt>
   11c88:	mov	r0, r4
   11c8c:	bl	10dec <textdomain@plt>
   11c90:	movw	r0, #8868	; 0x22a4
   11c94:	movt	r0, #1
   11c98:	bl	15d8c <_obstack_memory_used@@Base+0x31e4>
   11c9c:	mov	r7, #0
   11ca0:	mov	sl, #2
   11ca4:	ldr	r9, [pc, #1196]	; 12158 <close@plt+0x11c8>
   11ca8:	movw	r4, #29944	; 0x74f8
   11cac:	movt	r4, #1
   11cb0:	mov	r6, r7
   11cb4:	b	11d24 <close@plt+0xd94>
   11cb8:	cmn	r0, #3
   11cbc:	bne	11d08 <close@plt+0xd78>
   11cc0:	movw	r3, #32996	; 0x80e4
   11cc4:	movt	r3, #2
   11cc8:	movw	r0, #33100	; 0x814c
   11ccc:	movt	r0, #2
   11cd0:	mov	r4, #0
   11cd4:	str	r4, [sp, #4]
   11cd8:	movw	r2, #29928	; 0x74e8
   11cdc:	movt	r2, #1
   11ce0:	str	r2, [sp]
   11ce4:	ldr	r3, [r3]
   11ce8:	movw	r2, #29676	; 0x73ec
   11cec:	movt	r2, #1
   11cf0:	movw	r1, #28924	; 0x70fc
   11cf4:	movt	r1, #1
   11cf8:	ldr	r0, [r0]
   11cfc:	bl	153d4 <_obstack_memory_used@@Base+0x282c>
   11d00:	mov	r0, r4
   11d04:	bl	10ed0 <exit@plt>
   11d08:	cmn	r0, #2
   11d0c:	bne	11d60 <close@plt+0xdd0>
   11d10:	mov	r0, #0
   11d14:	bl	118ac <close@plt+0x91c>
   11d18:	cmp	r0, #112	; 0x70
   11d1c:	bne	11d60 <close@plt+0xdd0>
   11d20:	mov	r7, #1
   11d24:	str	r6, [sp]
   11d28:	mov	r3, r9
   11d2c:	mov	r2, r4
   11d30:	mov	r1, r5
   11d34:	mov	r0, r8
   11d38:	bl	10eb8 <getopt_long@plt>
   11d3c:	cmn	r0, #1
   11d40:	beq	11d70 <close@plt+0xde0>
   11d44:	cmp	r0, #98	; 0x62
   11d48:	beq	11d68 <close@plt+0xdd8>
   11d4c:	ble	11cb8 <close@plt+0xd28>
   11d50:	cmp	r0, #99	; 0x63
   11d54:	bne	11d18 <close@plt+0xd88>
   11d58:	mov	sl, #1
   11d5c:	b	11d24 <close@plt+0xd94>
   11d60:	mov	r0, #1
   11d64:	bl	118ac <close@plt+0x91c>
   11d68:	mov	sl, r6
   11d6c:	b	11d24 <close@plt+0xd94>
   11d70:	movw	r3, #33080	; 0x8138
   11d74:	movt	r3, #2
   11d78:	ldr	r4, [r3]
   11d7c:	sub	r8, r8, r4
   11d80:	add	r6, r5, r4, lsl #2
   11d84:	cmp	sl, #2
   11d88:	moveq	r3, #0
   11d8c:	andne	r3, r7, #1
   11d90:	cmp	r3, #0
   11d94:	bne	11e08 <close@plt+0xe78>
   11d98:	eor	r3, r7, #1
   11d9c:	uxtb	r3, r3
   11da0:	cmp	r3, r8
   11da4:	blt	11e34 <close@plt+0xea4>
   11da8:	cmp	r7, #0
   11dac:	beq	11e78 <close@plt+0xee8>
   11db0:	movw	r4, #24472	; 0x5f98
   11db4:	movt	r4, #1
   11db8:	mov	r5, r4
   11dbc:	movw	r6, #4309	; 0x10d5
   11dc0:	mov	r0, r4
   11dc4:	bl	10e70 <puts@plt>
   11dc8:	mov	r0, r4
   11dcc:	bl	10edc <strlen@plt>
   11dd0:	add	r0, r0, #1
   11dd4:	add	r4, r4, r0
   11dd8:	sub	r3, r4, r5
   11ddc:	cmp	r3, r6
   11de0:	bls	11dc0 <close@plt+0xe30>
   11de4:	eor	r0, r7, #1
   11de8:	uxtb	r0, r0
   11dec:	add	sp, sp, #8
   11df0:	ldrd	r4, [sp]
   11df4:	ldrd	r6, [sp, #8]
   11df8:	ldrd	r8, [sp, #16]
   11dfc:	ldr	sl, [sp, #24]
   11e00:	add	sp, sp, #28
   11e04:	pop	{pc}		; (ldr pc, [sp], #4)
   11e08:	mov	r2, #5
   11e0c:	movw	r1, #29948	; 0x74fc
   11e10:	movt	r1, #1
   11e14:	mov	r0, #0
   11e18:	bl	10dc8 <dcgettext@plt>
   11e1c:	mov	r2, r0
   11e20:	mov	r1, #0
   11e24:	mov	r0, r1
   11e28:	bl	10e40 <error@plt>
   11e2c:	mov	r0, #1
   11e30:	bl	118ac <close@plt+0x91c>
   11e34:	mov	r2, #5
   11e38:	movw	r1, #30052	; 0x7564
   11e3c:	movt	r1, #1
   11e40:	mov	r0, #0
   11e44:	bl	10dc8 <dcgettext@plt>
   11e48:	mov	r8, r0
   11e4c:	cmp	r7, #0
   11e50:	bne	120dc <close@plt+0x114c>
   11e54:	ldr	r0, [r6, #4]
   11e58:	bl	14ed8 <_obstack_memory_used@@Base+0x2330>
   11e5c:	mov	r3, r0
   11e60:	mov	r2, r8
   11e64:	mov	r1, #0
   11e68:	mov	r0, r1
   11e6c:	bl	10e40 <error@plt>
   11e70:	mov	r0, #1
   11e74:	bl	118ac <close@plt+0x91c>
   11e78:	cmp	sl, #2
   11e7c:	beq	11f94 <close@plt+0x1004>
   11e80:	movw	r3, #9440	; 0x24e0
   11e84:	movt	r3, #1
   11e88:	str	r3, [sp]
   11e8c:	movw	r3, #23032	; 0x59f8
   11e90:	movt	r3, #1
   11e94:	mov	r2, #0
   11e98:	mov	r1, r2
   11e9c:	movw	r0, #33108	; 0x8154
   11ea0:	movt	r0, #2
   11ea4:	bl	12964 <_obstack_begin@@Base>
   11ea8:	cmp	r8, #0
   11eac:	bne	11ff0 <close@plt+0x1060>
   11eb0:	mov	r1, #0
   11eb4:	mov	r0, r1
   11eb8:	bl	11230 <close@plt+0x2a0>
   11ebc:	mov	r7, r0
   11ec0:	cmp	r7, #0
   11ec4:	beq	11de4 <close@plt+0xe54>
   11ec8:	movw	r2, #33108	; 0x8154
   11ecc:	movt	r2, #2
   11ed0:	ldr	r3, [r2, #12]
   11ed4:	ldr	r4, [r2, #8]
   11ed8:	sub	r5, r3, r4
   11edc:	cmp	r3, r4
   11ee0:	beq	120c4 <close@plt+0x1134>
   11ee4:	movw	r2, #33108	; 0x8154
   11ee8:	movt	r2, #2
   11eec:	ldr	r1, [r2, #24]
   11ef0:	add	r3, r3, r1
   11ef4:	bic	r3, r3, r1
   11ef8:	str	r3, [r2, #12]
   11efc:	ldr	r1, [r2, #4]
   11f00:	ldr	r2, [r2, #16]
   11f04:	sub	r3, r3, r1
   11f08:	sub	r1, r2, r1
   11f0c:	cmp	r3, r1
   11f10:	bls	11f20 <close@plt+0xf90>
   11f14:	movw	r3, #33108	; 0x8154
   11f18:	movt	r3, #2
   11f1c:	str	r2, [r3, #12]
   11f20:	movw	r3, #33108	; 0x8154
   11f24:	movt	r3, #2
   11f28:	ldr	r2, [r3, #12]
   11f2c:	str	r2, [r3, #8]
   11f30:	movw	r3, #29848	; 0x7498
   11f34:	movt	r3, #1
   11f38:	movw	r6, #29844	; 0x7494
   11f3c:	movt	r6, #1
   11f40:	cmp	sl, #0
   11f44:	moveq	r6, r3
   11f48:	movw	r0, #29872	; 0x74b0
   11f4c:	movt	r0, #1
   11f50:	movw	r3, #29884	; 0x74bc
   11f54:	movt	r3, #1
   11f58:	movw	r8, #33100	; 0x814c
   11f5c:	movt	r8, #2
   11f60:	ldr	r1, [r8]
   11f64:	cmp	sl, #0
   11f68:	movne	r0, r3
   11f6c:	bl	10d44 <fputs_unlocked@plt>
   11f70:	ldr	r3, [r8]
   11f74:	mov	r2, r5
   11f78:	mov	r1, #1
   11f7c:	mov	r0, r4
   11f80:	bl	10da4 <fwrite_unlocked@plt>
   11f84:	ldr	r1, [r8]
   11f88:	mov	r0, r6
   11f8c:	bl	10d44 <fputs_unlocked@plt>
   11f90:	b	11de4 <close@plt+0xe54>
   11f94:	movw	r0, #30072	; 0x7578
   11f98:	movt	r0, #1
   11f9c:	bl	10e64 <getenv@plt>
   11fa0:	cmp	r0, #0
   11fa4:	beq	12134 <close@plt+0x11a4>
   11fa8:	ldrb	r3, [r0]
   11fac:	cmp	r3, #0
   11fb0:	beq	12134 <close@plt+0x11a4>
   11fb4:	bl	1215c <close@plt+0x11cc>
   11fb8:	mov	r6, r0
   11fbc:	movw	r1, #30080	; 0x7580
   11fc0:	movt	r1, #1
   11fc4:	bl	10d5c <strcmp@plt>
   11fc8:	cmp	r0, #0
   11fcc:	moveq	sl, #1
   11fd0:	beq	11e80 <close@plt+0xef0>
   11fd4:	movw	r1, #30084	; 0x7584
   11fd8:	movt	r1, #1
   11fdc:	mov	r0, r6
   11fe0:	bl	10d5c <strcmp@plt>
   11fe4:	clz	sl, r0
   11fe8:	lsr	sl, sl, #5
   11fec:	b	11e80 <close@plt+0xef0>
   11ff0:	ldr	r5, [r5, r4, lsl #2]
   11ff4:	movw	r1, #30092	; 0x758c
   11ff8:	movt	r1, #1
   11ffc:	mov	r0, r5
   12000:	bl	10d5c <strcmp@plt>
   12004:	cmp	r0, #0
   12008:	beq	12030 <close@plt+0x10a0>
   1200c:	movw	r3, #33096	; 0x8148
   12010:	movt	r3, #2
   12014:	ldr	r2, [r3]
   12018:	movw	r1, #30096	; 0x7590
   1201c:	movt	r1, #1
   12020:	mov	r0, r5
   12024:	bl	12598 <close@plt+0x1608>
   12028:	cmp	r0, #0
   1202c:	beq	12090 <close@plt+0x1100>
   12030:	movw	r4, #33096	; 0x8148
   12034:	movt	r4, #2
   12038:	mov	r1, r5
   1203c:	ldr	r0, [r4]
   12040:	bl	11230 <close@plt+0x2a0>
   12044:	mov	r6, r0
   12048:	ldr	r0, [r4]
   1204c:	bl	123b4 <close@plt+0x1424>
   12050:	cmp	r0, #0
   12054:	moveq	r7, r6
   12058:	beq	11ec0 <close@plt+0xf30>
   1205c:	bl	10ee8 <__errno_location@plt>
   12060:	ldr	r4, [r0]
   12064:	mov	r2, r5
   12068:	mov	r1, #3
   1206c:	mov	r0, #0
   12070:	bl	14d0c <_obstack_memory_used@@Base+0x2164>
   12074:	mov	r3, r0
   12078:	movw	r2, #30828	; 0x786c
   1207c:	movt	r2, #1
   12080:	mov	r1, r4
   12084:	mov	r0, #0
   12088:	bl	10e40 <error@plt>
   1208c:	b	11de4 <close@plt+0xe54>
   12090:	bl	10ee8 <__errno_location@plt>
   12094:	ldr	r4, [r0]
   12098:	mov	r2, r5
   1209c:	mov	r1, #3
   120a0:	mov	r0, #0
   120a4:	bl	14d0c <_obstack_memory_used@@Base+0x2164>
   120a8:	mov	r3, r0
   120ac:	movw	r2, #30828	; 0x786c
   120b0:	movt	r2, #1
   120b4:	mov	r1, r4
   120b8:	mov	r0, #0
   120bc:	bl	10e40 <error@plt>
   120c0:	b	11de4 <close@plt+0xe54>
   120c4:	movw	r2, #33108	; 0x8154
   120c8:	movt	r2, #2
   120cc:	ldrb	r1, [r2, #40]	; 0x28
   120d0:	orr	r1, r1, #2
   120d4:	strb	r1, [r2, #40]	; 0x28
   120d8:	b	11ee4 <close@plt+0xf54>
   120dc:	ldr	r0, [r5, r4, lsl #2]
   120e0:	bl	14ed8 <_obstack_memory_used@@Base+0x2330>
   120e4:	mov	r3, r0
   120e8:	mov	r2, r8
   120ec:	mov	r1, #0
   120f0:	mov	r0, r1
   120f4:	bl	10e40 <error@plt>
   120f8:	movw	r3, #33088	; 0x8140
   120fc:	movt	r3, #2
   12100:	ldr	r4, [r3]
   12104:	mov	r2, #5
   12108:	movw	r1, #30100	; 0x7594
   1210c:	movt	r1, #1
   12110:	mov	r0, #0
   12114:	bl	10dc8 <dcgettext@plt>
   12118:	mov	r3, r0
   1211c:	movw	r2, #31156	; 0x79b4
   12120:	movt	r2, #1
   12124:	mov	r1, #1
   12128:	mov	r0, r4
   1212c:	bl	10f24 <__fprintf_chk@plt>
   12130:	b	11e70 <close@plt+0xee0>
   12134:	mov	r2, #5
   12138:	movw	r1, #30160	; 0x75d0
   1213c:	movt	r1, #1
   12140:	mov	r0, #0
   12144:	bl	10dc8 <dcgettext@plt>
   12148:	mov	r2, r0
   1214c:	mov	r1, #0
   12150:	mov	r0, #1
   12154:	bl	10e40 <error@plt>
   12158:	andeq	r5, r1, r8, lsl pc
   1215c:	ldrb	r3, [r0]
   12160:	cmp	r3, #47	; 0x2f
   12164:	bne	12174 <close@plt+0x11e4>
   12168:	ldrb	r3, [r0, #1]!
   1216c:	cmp	r3, #47	; 0x2f
   12170:	beq	12168 <close@plt+0x11d8>
   12174:	ldrb	r2, [r0]
   12178:	cmp	r2, #0
   1217c:	bxeq	lr
   12180:	push	{lr}		; (str lr, [sp, #-4]!)
   12184:	mov	r1, r0
   12188:	mov	r3, #0
   1218c:	mov	lr, #1
   12190:	mov	ip, r3
   12194:	b	121b0 <close@plt+0x1220>
   12198:	cmp	r3, #0
   1219c:	movne	r0, r1
   121a0:	movne	r3, ip
   121a4:	ldrb	r2, [r1, #1]!
   121a8:	cmp	r2, #0
   121ac:	beq	121c0 <close@plt+0x1230>
   121b0:	cmp	r2, #47	; 0x2f
   121b4:	moveq	r3, lr
   121b8:	bne	12198 <close@plt+0x1208>
   121bc:	b	121a4 <close@plt+0x1214>
   121c0:	pop	{pc}		; (ldr pc, [sp], #4)
   121c4:	str	r4, [sp, #-8]!
   121c8:	str	lr, [sp, #4]
   121cc:	mov	r4, r0
   121d0:	bl	10edc <strlen@plt>
   121d4:	cmp	r0, #1
   121d8:	bls	121f8 <close@plt+0x1268>
   121dc:	add	r3, r4, r0
   121e0:	ldrb	r3, [r3, #-1]
   121e4:	cmp	r3, #47	; 0x2f
   121e8:	subeq	r0, r0, #2
   121ec:	addeq	r3, r4, r0
   121f0:	rsbeq	r1, r4, #1
   121f4:	beq	12204 <close@plt+0x1274>
   121f8:	ldr	r4, [sp]
   121fc:	add	sp, sp, #4
   12200:	pop	{pc}		; (ldr pc, [sp], #4)
   12204:	add	r0, r1, r3
   12208:	cmp	r3, r4
   1220c:	beq	121f8 <close@plt+0x1268>
   12210:	ldrb	r2, [r3], #-1
   12214:	cmp	r2, #47	; 0x2f
   12218:	bne	121f8 <close@plt+0x1268>
   1221c:	b	12204 <close@plt+0x1274>
   12220:	cmp	r0, r1
   12224:	beq	1227c <close@plt+0x12ec>
   12228:	push	{lr}		; (str lr, [sp, #-4]!)
   1222c:	sub	ip, r0, #1
   12230:	sub	r1, r1, #1
   12234:	ldrb	r3, [ip, #1]!
   12238:	sub	r2, r3, #65	; 0x41
   1223c:	cmp	r2, #25
   12240:	addls	r3, r3, #32
   12244:	uxtb	r2, r3
   12248:	ldrb	r0, [r1, #1]!
   1224c:	sub	lr, r0, #65	; 0x41
   12250:	cmp	lr, #25
   12254:	addls	r0, r0, #32
   12258:	uxtb	lr, r0
   1225c:	cmp	r2, #0
   12260:	beq	1226c <close@plt+0x12dc>
   12264:	cmp	r2, lr
   12268:	beq	12234 <close@plt+0x12a4>
   1226c:	uxtb	r3, r3
   12270:	uxtb	r0, r0
   12274:	sub	r0, r3, r0
   12278:	pop	{pc}		; (ldr pc, [sp], #4)
   1227c:	mov	r0, #0
   12280:	bx	lr
   12284:	movw	r3, #33152	; 0x8180
   12288:	movt	r3, #2
   1228c:	str	r0, [r3]
   12290:	bx	lr
   12294:	movw	r3, #33152	; 0x8180
   12298:	movt	r3, #2
   1229c:	strb	r0, [r3, #4]
   122a0:	bx	lr
   122a4:	strd	r4, [sp, #-16]!
   122a8:	str	r6, [sp, #8]
   122ac:	str	lr, [sp, #12]
   122b0:	sub	sp, sp, #8
   122b4:	movw	r3, #33100	; 0x814c
   122b8:	movt	r3, #2
   122bc:	ldr	r0, [r3]
   122c0:	bl	15a90 <_obstack_memory_used@@Base+0x2ee8>
   122c4:	cmp	r0, #0
   122c8:	beq	122f0 <close@plt+0x1360>
   122cc:	movw	r3, #33152	; 0x8180
   122d0:	movt	r3, #2
   122d4:	ldrb	r3, [r3, #4]
   122d8:	cmp	r3, #0
   122dc:	beq	1231c <close@plt+0x138c>
   122e0:	bl	10ee8 <__errno_location@plt>
   122e4:	ldr	r3, [r0]
   122e8:	cmp	r3, #32
   122ec:	bne	1231c <close@plt+0x138c>
   122f0:	movw	r3, #33088	; 0x8140
   122f4:	movt	r3, #2
   122f8:	ldr	r0, [r3]
   122fc:	bl	15a90 <_obstack_memory_used@@Base+0x2ee8>
   12300:	cmp	r0, #0
   12304:	bne	123a4 <close@plt+0x1414>
   12308:	add	sp, sp, #8
   1230c:	ldrd	r4, [sp]
   12310:	ldr	r6, [sp, #8]
   12314:	add	sp, sp, #12
   12318:	pop	{pc}		; (ldr pc, [sp], #4)
   1231c:	mov	r2, #5
   12320:	movw	r1, #30812	; 0x785c
   12324:	movt	r1, #1
   12328:	mov	r0, #0
   1232c:	bl	10dc8 <dcgettext@plt>
   12330:	mov	r4, r0
   12334:	movw	r3, #33152	; 0x8180
   12338:	movt	r3, #2
   1233c:	ldr	r5, [r3]
   12340:	cmp	r5, #0
   12344:	beq	12384 <close@plt+0x13f4>
   12348:	bl	10ee8 <__errno_location@plt>
   1234c:	ldr	r6, [r0]
   12350:	mov	r0, r5
   12354:	bl	14cd4 <_obstack_memory_used@@Base+0x212c>
   12358:	str	r4, [sp]
   1235c:	mov	r3, r0
   12360:	movw	r2, #30824	; 0x7868
   12364:	movt	r2, #1
   12368:	mov	r1, r6
   1236c:	mov	r0, #0
   12370:	bl	10e40 <error@plt>
   12374:	movw	r3, #33000	; 0x80e8
   12378:	movt	r3, #2
   1237c:	ldr	r0, [r3]
   12380:	bl	10d80 <_exit@plt>
   12384:	bl	10ee8 <__errno_location@plt>
   12388:	mov	r3, r4
   1238c:	movw	r2, #30828	; 0x786c
   12390:	movt	r2, #1
   12394:	ldr	r1, [r0]
   12398:	mov	r0, #0
   1239c:	bl	10e40 <error@plt>
   123a0:	b	12374 <close@plt+0x13e4>
   123a4:	movw	r3, #33000	; 0x80e8
   123a8:	movt	r3, #2
   123ac:	ldr	r0, [r3]
   123b0:	bl	10d80 <_exit@plt>
   123b4:	strd	r4, [sp, #-16]!
   123b8:	str	r6, [sp, #8]
   123bc:	str	lr, [sp, #12]
   123c0:	sub	sp, sp, #8
   123c4:	mov	r4, r0
   123c8:	bl	10f18 <fileno@plt>
   123cc:	cmp	r0, #0
   123d0:	blt	12448 <close@plt+0x14b8>
   123d4:	mov	r0, r4
   123d8:	bl	10e94 <__freading@plt>
   123dc:	cmp	r0, #0
   123e0:	beq	12414 <close@plt+0x1484>
   123e4:	mov	r0, r4
   123e8:	bl	10f18 <fileno@plt>
   123ec:	mov	r3, #1
   123f0:	str	r3, [sp]
   123f4:	mov	r2, #0
   123f8:	mov	r3, #0
   123fc:	bl	10e10 <lseek64@plt>
   12400:	mvn	r2, #0
   12404:	mvn	r3, #0
   12408:	cmp	r1, r3
   1240c:	cmpeq	r0, r2
   12410:	beq	12454 <close@plt+0x14c4>
   12414:	mov	r0, r4
   12418:	bl	12470 <close@plt+0x14e0>
   1241c:	cmp	r0, #0
   12420:	beq	12454 <close@plt+0x14c4>
   12424:	bl	10ee8 <__errno_location@plt>
   12428:	mov	r5, r0
   1242c:	ldr	r6, [r0]
   12430:	mov	r0, r4
   12434:	bl	10f30 <fclose@plt>
   12438:	cmp	r6, #0
   1243c:	strne	r6, [r5]
   12440:	mvnne	r0, #0
   12444:	b	1245c <close@plt+0x14cc>
   12448:	mov	r0, r4
   1244c:	bl	10f30 <fclose@plt>
   12450:	b	1245c <close@plt+0x14cc>
   12454:	mov	r0, r4
   12458:	bl	10f30 <fclose@plt>
   1245c:	add	sp, sp, #8
   12460:	ldrd	r4, [sp]
   12464:	ldr	r6, [sp, #8]
   12468:	add	sp, sp, #12
   1246c:	pop	{pc}		; (ldr pc, [sp], #4)
   12470:	str	r4, [sp, #-8]!
   12474:	str	lr, [sp, #4]
   12478:	sub	sp, sp, #8
   1247c:	subs	r4, r0, #0
   12480:	beq	12494 <close@plt+0x1504>
   12484:	mov	r0, r4
   12488:	bl	10e94 <__freading@plt>
   1248c:	cmp	r0, #0
   12490:	bne	124ac <close@plt+0x151c>
   12494:	mov	r0, r4
   12498:	bl	10d68 <fflush@plt>
   1249c:	add	sp, sp, #8
   124a0:	ldr	r4, [sp]
   124a4:	add	sp, sp, #4
   124a8:	pop	{pc}		; (ldr pc, [sp], #4)
   124ac:	ldr	r3, [r4]
   124b0:	tst	r3, #256	; 0x100
   124b4:	bne	124c4 <close@plt+0x1534>
   124b8:	mov	r0, r4
   124bc:	bl	10d68 <fflush@plt>
   124c0:	b	1249c <close@plt+0x150c>
   124c4:	mov	r3, #1
   124c8:	str	r3, [sp]
   124cc:	mov	r2, #0
   124d0:	mov	r3, #0
   124d4:	mov	r0, r4
   124d8:	bl	12738 <close@plt+0x17a8>
   124dc:	b	124b8 <close@plt+0x1528>
   124e0:	strd	r4, [sp, #-12]!
   124e4:	str	lr, [sp, #8]
   124e8:	sub	sp, sp, #12
   124ec:	mov	r5, r0
   124f0:	bl	10ee8 <__errno_location@plt>
   124f4:	mov	r4, r0
   124f8:	ldr	r3, [r0]
   124fc:	str	r3, [sp]
   12500:	str	r3, [sp, #4]
   12504:	mov	r3, #0
   12508:	str	r3, [r0]
   1250c:	mov	r0, r5
   12510:	bl	10d74 <free@plt>
   12514:	ldr	r3, [r4]
   12518:	clz	r3, r3
   1251c:	lsr	r3, r3, #5
   12520:	add	r2, sp, #8
   12524:	add	r3, r2, r3, lsl #2
   12528:	ldr	r3, [r3, #-8]
   1252c:	str	r3, [r4]
   12530:	add	sp, sp, #12
   12534:	ldrd	r4, [sp]
   12538:	add	sp, sp, #8
   1253c:	pop	{pc}		; (ldr pc, [sp], #4)
   12540:	str	r4, [sp, #-8]!
   12544:	str	lr, [sp, #4]
   12548:	mov	r4, r0
   1254c:	mov	r1, #0
   12550:	movw	r0, #30832	; 0x7870
   12554:	movt	r0, #1
   12558:	bl	10e58 <open64@plt>
   1255c:	cmp	r4, r0
   12560:	moveq	r0, #1
   12564:	beq	12574 <close@plt+0x15e4>
   12568:	cmp	r0, #0
   1256c:	movlt	r0, #0
   12570:	bge	12580 <close@plt+0x15f0>
   12574:	ldr	r4, [sp]
   12578:	add	sp, sp, #4
   1257c:	pop	{pc}		; (ldr pc, [sp], #4)
   12580:	bl	10f90 <close@plt>
   12584:	bl	10ee8 <__errno_location@plt>
   12588:	mov	r3, #9
   1258c:	str	r3, [r0]
   12590:	mov	r0, #0
   12594:	b	12574 <close@plt+0x15e4>
   12598:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1259c:	strd	r6, [sp, #8]
   125a0:	strd	r8, [sp, #16]
   125a4:	str	sl, [sp, #24]
   125a8:	str	lr, [sp, #28]
   125ac:	mov	r8, r0
   125b0:	mov	r9, r1
   125b4:	mov	r6, r2
   125b8:	mov	r0, r2
   125bc:	bl	10f18 <fileno@plt>
   125c0:	cmp	r0, #1
   125c4:	beq	126a0 <close@plt+0x1710>
   125c8:	cmp	r0, #2
   125cc:	beq	125f0 <close@plt+0x1660>
   125d0:	cmp	r0, #0
   125d4:	beq	126ac <close@plt+0x171c>
   125d8:	mov	r1, #2
   125dc:	mov	r0, r1
   125e0:	bl	10dd4 <dup2@plt>
   125e4:	subs	r4, r0, #2
   125e8:	movne	r4, #1
   125ec:	b	125f4 <close@plt+0x1664>
   125f0:	mov	r4, #0
   125f4:	mov	r1, #1
   125f8:	mov	r0, r1
   125fc:	bl	10dd4 <dup2@plt>
   12600:	subs	r7, r0, #1
   12604:	movne	r7, #1
   12608:	mov	r1, #0
   1260c:	mov	r0, r1
   12610:	bl	10dd4 <dup2@plt>
   12614:	adds	r5, r0, #0
   12618:	movne	r5, #1
   1261c:	cmp	r5, #0
   12620:	bne	126bc <close@plt+0x172c>
   12624:	cmp	r7, #0
   12628:	bne	126d4 <close@plt+0x1744>
   1262c:	cmp	r4, #0
   12630:	beq	12644 <close@plt+0x16b4>
   12634:	mov	r0, #2
   12638:	bl	12540 <close@plt+0x15b0>
   1263c:	cmp	r0, #0
   12640:	beq	1271c <close@plt+0x178c>
   12644:	mov	r2, r6
   12648:	mov	r1, r9
   1264c:	mov	r0, r8
   12650:	bl	10eac <freopen64@plt>
   12654:	mov	r6, r0
   12658:	bl	10ee8 <__errno_location@plt>
   1265c:	mov	r8, r0
   12660:	ldr	r9, [r0]
   12664:	cmp	r4, #0
   12668:	bne	1272c <close@plt+0x179c>
   1266c:	cmp	r7, #0
   12670:	bne	126fc <close@plt+0x176c>
   12674:	cmp	r5, #0
   12678:	bne	12710 <close@plt+0x1780>
   1267c:	cmp	r6, #0
   12680:	streq	r9, [r8]
   12684:	mov	r0, r6
   12688:	ldrd	r4, [sp]
   1268c:	ldrd	r6, [sp, #8]
   12690:	ldrd	r8, [sp, #16]
   12694:	ldr	sl, [sp, #24]
   12698:	add	sp, sp, #28
   1269c:	pop	{pc}		; (ldr pc, [sp], #4)
   126a0:	mov	r4, #0
   126a4:	mov	r7, r4
   126a8:	b	12608 <close@plt+0x1678>
   126ac:	mov	r4, #0
   126b0:	mov	r7, r4
   126b4:	mov	r5, r4
   126b8:	b	1261c <close@plt+0x168c>
   126bc:	mov	r0, #0
   126c0:	bl	12540 <close@plt+0x15b0>
   126c4:	cmp	r0, #0
   126c8:	bne	12624 <close@plt+0x1694>
   126cc:	mov	r6, #0
   126d0:	b	12658 <close@plt+0x16c8>
   126d4:	mov	r0, #1
   126d8:	bl	12540 <close@plt+0x15b0>
   126dc:	cmp	r0, #0
   126e0:	bne	1262c <close@plt+0x169c>
   126e4:	bl	10ee8 <__errno_location@plt>
   126e8:	mov	r8, r0
   126ec:	ldr	r9, [r0]
   126f0:	cmp	r4, #0
   126f4:	moveq	r6, #0
   126f8:	bne	12708 <close@plt+0x1778>
   126fc:	mov	r0, #1
   12700:	bl	10f90 <close@plt>
   12704:	b	12674 <close@plt+0x16e4>
   12708:	mov	r6, #0
   1270c:	b	1272c <close@plt+0x179c>
   12710:	mov	r0, #0
   12714:	bl	10f90 <close@plt>
   12718:	b	1267c <close@plt+0x16ec>
   1271c:	bl	10ee8 <__errno_location@plt>
   12720:	mov	r8, r0
   12724:	ldr	r9, [r0]
   12728:	mov	r6, #0
   1272c:	mov	r0, #2
   12730:	bl	10f90 <close@plt>
   12734:	b	1266c <close@plt+0x16dc>
   12738:	str	r4, [sp, #-16]!
   1273c:	strd	r6, [sp, #4]
   12740:	str	lr, [sp, #12]
   12744:	sub	sp, sp, #8
   12748:	mov	r4, r0
   1274c:	mov	r6, r2
   12750:	mov	r7, r3
   12754:	ldr	r2, [r0, #8]
   12758:	ldr	r3, [r0, #4]
   1275c:	cmp	r2, r3
   12760:	beq	12790 <close@plt+0x1800>
   12764:	ldr	r3, [sp, #24]
   12768:	str	r3, [sp]
   1276c:	mov	r2, r6
   12770:	mov	r3, r7
   12774:	mov	r0, r4
   12778:	bl	10f3c <fseeko64@plt>
   1277c:	add	sp, sp, #8
   12780:	ldr	r4, [sp]
   12784:	ldrd	r6, [sp, #4]
   12788:	add	sp, sp, #12
   1278c:	pop	{pc}		; (ldr pc, [sp], #4)
   12790:	ldr	r2, [r0, #20]
   12794:	ldr	r3, [r0, #16]
   12798:	cmp	r2, r3
   1279c:	bne	12764 <close@plt+0x17d4>
   127a0:	ldr	r3, [r0, #36]	; 0x24
   127a4:	cmp	r3, #0
   127a8:	bne	12764 <close@plt+0x17d4>
   127ac:	bl	10f18 <fileno@plt>
   127b0:	ldr	r3, [sp, #24]
   127b4:	str	r3, [sp]
   127b8:	mov	r2, r6
   127bc:	mov	r3, r7
   127c0:	bl	10e10 <lseek64@plt>
   127c4:	mvn	r2, #0
   127c8:	mvn	r3, #0
   127cc:	cmp	r1, r3
   127d0:	cmpeq	r0, r2
   127d4:	beq	127f0 <close@plt+0x1860>
   127d8:	ldr	r3, [r4]
   127dc:	bic	r3, r3, #16
   127e0:	str	r3, [r4]
   127e4:	strd	r0, [r4, #80]	; 0x50
   127e8:	mov	r0, #0
   127ec:	b	1277c <close@plt+0x17ec>
   127f0:	mvn	r0, #0
   127f4:	b	1277c <close@plt+0x17ec>
   127f8:	str	r4, [sp, #-8]!
   127fc:	str	lr, [sp, #4]
   12800:	ldrb	r3, [r0, #40]	; 0x28
   12804:	tst	r3, #1
   12808:	beq	12824 <close@plt+0x1894>
   1280c:	ldr	r3, [r0, #28]
   12810:	ldr	r0, [r0, #36]	; 0x24
   12814:	blx	r3
   12818:	ldr	r4, [sp]
   1281c:	add	sp, sp, #4
   12820:	pop	{pc}		; (ldr pc, [sp], #4)
   12824:	ldr	r3, [r0, #28]
   12828:	mov	r0, r1
   1282c:	blx	r3
   12830:	b	12818 <close@plt+0x1888>
   12834:	str	r4, [sp, #-8]!
   12838:	str	lr, [sp, #4]
   1283c:	ldrb	r3, [r0, #40]	; 0x28
   12840:	tst	r3, #1
   12844:	beq	12860 <close@plt+0x18d0>
   12848:	ldr	r3, [r0, #32]
   1284c:	ldr	r0, [r0, #36]	; 0x24
   12850:	blx	r3
   12854:	ldr	r4, [sp]
   12858:	add	sp, sp, #4
   1285c:	pop	{pc}		; (ldr pc, [sp], #4)
   12860:	ldr	r3, [r0, #32]
   12864:	mov	r0, r1
   12868:	blx	r3
   1286c:	b	12854 <close@plt+0x18c4>
   12870:	strd	r4, [sp, #-16]!
   12874:	str	r6, [sp, #8]
   12878:	str	lr, [sp, #12]
   1287c:	mov	r4, r0
   12880:	subs	r5, r2, #0
   12884:	moveq	r5, #8
   12888:	movw	r3, #4072	; 0xfe8
   1288c:	cmp	r1, #0
   12890:	moveq	r1, r3
   12894:	str	r1, [r0]
   12898:	sub	r6, r5, #1
   1289c:	str	r6, [r0, #24]
   128a0:	bl	127f8 <close@plt+0x1868>
   128a4:	str	r0, [r4, #4]
   128a8:	cmp	r0, #0
   128ac:	beq	12904 <close@plt+0x1974>
   128b0:	add	r3, r0, #8
   128b4:	add	r3, r3, r6
   128b8:	rsb	r5, r5, #0
   128bc:	and	r5, r5, r3
   128c0:	str	r5, [r4, #8]
   128c4:	str	r5, [r4, #12]
   128c8:	ldr	r3, [r4]
   128cc:	add	r3, r0, r3
   128d0:	str	r3, [r0]
   128d4:	str	r3, [r4, #16]
   128d8:	mov	r2, #0
   128dc:	str	r2, [r0, #4]
   128e0:	ldrb	r3, [r4, #40]	; 0x28
   128e4:	and	r3, r3, #253	; 0xfd
   128e8:	bfi	r3, r2, #2, #1
   128ec:	strb	r3, [r4, #40]	; 0x28
   128f0:	mov	r0, #1
   128f4:	ldrd	r4, [sp]
   128f8:	ldr	r6, [sp, #8]
   128fc:	add	sp, sp, #12
   12900:	pop	{pc}		; (ldr pc, [sp], #4)
   12904:	movw	r3, #33004	; 0x80ec
   12908:	movt	r3, #2
   1290c:	ldr	r3, [r3]
   12910:	blx	r3
   12914:	str	r4, [sp, #-8]!
   12918:	str	lr, [sp, #4]
   1291c:	movw	r3, #33088	; 0x8140
   12920:	movt	r3, #2
   12924:	ldr	r4, [r3]
   12928:	mov	r2, #5
   1292c:	movw	r1, #30844	; 0x787c
   12930:	movt	r1, #1
   12934:	mov	r0, #0
   12938:	bl	10dc8 <dcgettext@plt>
   1293c:	mov	r3, r0
   12940:	movw	r2, #31156	; 0x79b4
   12944:	movt	r2, #1
   12948:	mov	r1, #1
   1294c:	mov	r0, r4
   12950:	bl	10f24 <__fprintf_chk@plt>
   12954:	movw	r3, #33000	; 0x80e8
   12958:	movt	r3, #2
   1295c:	ldr	r0, [r3]
   12960:	bl	10ed0 <exit@plt>

00012964 <_obstack_begin@@Base>:
   12964:	str	r4, [sp, #-8]!
   12968:	str	lr, [sp, #4]
   1296c:	str	r3, [r0, #28]
   12970:	ldr	r3, [sp, #8]
   12974:	str	r3, [r0, #32]
   12978:	ldrb	r3, [r0, #40]	; 0x28
   1297c:	bfc	r3, #0, #1
   12980:	strb	r3, [r0, #40]	; 0x28
   12984:	bl	12870 <close@plt+0x18e0>
   12988:	ldr	r4, [sp]
   1298c:	add	sp, sp, #4
   12990:	pop	{pc}		; (ldr pc, [sp], #4)

00012994 <_obstack_begin_1@@Base>:
   12994:	str	r4, [sp, #-8]!
   12998:	str	lr, [sp, #4]
   1299c:	str	r3, [r0, #28]
   129a0:	ldr	r3, [sp, #8]
   129a4:	str	r3, [r0, #32]
   129a8:	ldr	r3, [sp, #12]
   129ac:	str	r3, [r0, #36]	; 0x24
   129b0:	ldrb	r3, [r0, #40]	; 0x28
   129b4:	orr	r3, r3, #1
   129b8:	strb	r3, [r0, #40]	; 0x28
   129bc:	bl	12870 <close@plt+0x18e0>
   129c0:	ldr	r4, [sp]
   129c4:	add	sp, sp, #4
   129c8:	pop	{pc}		; (ldr pc, [sp], #4)

000129cc <_obstack_newchunk@@Base>:
   129cc:	strd	r4, [sp, #-24]!	; 0xffffffe8
   129d0:	strd	r6, [sp, #8]
   129d4:	str	r8, [sp, #16]
   129d8:	str	lr, [sp, #20]
   129dc:	ldr	r7, [r0, #4]
   129e0:	ldr	r6, [r0, #12]
   129e4:	ldr	r3, [r0, #8]
   129e8:	sub	r6, r6, r3
   129ec:	add	r1, r6, r1
   129f0:	ldr	r2, [r0, #24]
   129f4:	add	r2, r1, r2
   129f8:	add	r5, r2, r6, lsr #3
   129fc:	add	r5, r5, #100	; 0x64
   12a00:	ldr	r3, [r0]
   12a04:	cmp	r2, r3
   12a08:	movcs	r3, r2
   12a0c:	cmp	r3, r5
   12a10:	movcs	r5, r3
   12a14:	cmp	r6, r1
   12a18:	cmpls	r1, r2
   12a1c:	bhi	12abc <_obstack_newchunk@@Base+0xf0>
   12a20:	mov	r4, r0
   12a24:	mov	r1, r5
   12a28:	bl	127f8 <close@plt+0x1868>
   12a2c:	subs	r8, r0, #0
   12a30:	beq	12abc <_obstack_newchunk@@Base+0xf0>
   12a34:	str	r8, [r4, #4]
   12a38:	str	r7, [r8, #4]
   12a3c:	add	r3, r8, r5
   12a40:	str	r3, [r4, #16]
   12a44:	mov	r5, r8
   12a48:	str	r3, [r5], #8
   12a4c:	ldr	r3, [r4, #24]
   12a50:	add	r5, r5, r3
   12a54:	bic	r5, r5, r3
   12a58:	mov	r2, r6
   12a5c:	ldr	r1, [r4, #8]
   12a60:	mov	r0, r5
   12a64:	bl	10d8c <memcpy@plt>
   12a68:	ldrb	r3, [r4, #40]	; 0x28
   12a6c:	tst	r3, #2
   12a70:	bne	12a90 <_obstack_newchunk@@Base+0xc4>
   12a74:	ldr	r2, [r4, #24]
   12a78:	add	r3, r7, #8
   12a7c:	add	r3, r3, r2
   12a80:	bic	r3, r3, r2
   12a84:	ldr	r2, [r4, #8]
   12a88:	cmp	r2, r3
   12a8c:	beq	12acc <_obstack_newchunk@@Base+0x100>
   12a90:	str	r5, [r4, #8]
   12a94:	add	r5, r5, r6
   12a98:	str	r5, [r4, #12]
   12a9c:	ldrb	r3, [r4, #40]	; 0x28
   12aa0:	bfc	r3, #1, #1
   12aa4:	strb	r3, [r4, #40]	; 0x28
   12aa8:	ldrd	r4, [sp]
   12aac:	ldrd	r6, [sp, #8]
   12ab0:	ldr	r8, [sp, #16]
   12ab4:	add	sp, sp, #20
   12ab8:	pop	{pc}		; (ldr pc, [sp], #4)
   12abc:	movw	r3, #33004	; 0x80ec
   12ac0:	movt	r3, #2
   12ac4:	ldr	r3, [r3]
   12ac8:	blx	r3
   12acc:	ldr	r3, [r7, #4]
   12ad0:	str	r3, [r8, #4]
   12ad4:	mov	r1, r7
   12ad8:	mov	r0, r4
   12adc:	bl	12834 <close@plt+0x18a4>
   12ae0:	b	12a90 <_obstack_newchunk@@Base+0xc4>

00012ae4 <_obstack_allocated_p@@Base>:
   12ae4:	ldr	r0, [r0, #4]
   12ae8:	cmp	r0, #0
   12aec:	bne	12b00 <_obstack_allocated_p@@Base+0x1c>
   12af0:	b	12b14 <_obstack_allocated_p@@Base+0x30>
   12af4:	ldr	r0, [r0, #4]
   12af8:	cmp	r0, #0
   12afc:	beq	12b14 <_obstack_allocated_p@@Base+0x30>
   12b00:	cmp	r1, r0
   12b04:	bls	12af4 <_obstack_allocated_p@@Base+0x10>
   12b08:	ldr	r3, [r0]
   12b0c:	cmp	r3, r1
   12b10:	bcc	12af4 <_obstack_allocated_p@@Base+0x10>
   12b14:	adds	r0, r0, #0
   12b18:	movne	r0, #1
   12b1c:	bx	lr

00012b20 <_obstack_free@@Base>:
   12b20:	strd	r4, [sp, #-16]!
   12b24:	str	r6, [sp, #8]
   12b28:	str	lr, [sp, #12]
   12b2c:	mov	r4, r0
   12b30:	mov	r6, r1
   12b34:	ldr	r1, [r0, #4]
   12b38:	cmp	r1, #0
   12b3c:	bne	12b70 <_obstack_free@@Base+0x50>
   12b40:	cmp	r6, #0
   12b44:	beq	12b98 <_obstack_free@@Base+0x78>
   12b48:	bl	10f84 <abort@plt>
   12b4c:	ldr	r5, [r1, #4]
   12b50:	mov	r0, r4
   12b54:	bl	12834 <close@plt+0x18a4>
   12b58:	ldrb	r3, [r4, #40]	; 0x28
   12b5c:	orr	r3, r3, #2
   12b60:	strb	r3, [r4, #40]	; 0x28
   12b64:	mov	r1, r5
   12b68:	cmp	r5, #0
   12b6c:	beq	12b40 <_obstack_free@@Base+0x20>
   12b70:	cmp	r6, r1
   12b74:	bls	12b4c <_obstack_free@@Base+0x2c>
   12b78:	ldr	r3, [r1]
   12b7c:	cmp	r3, r6
   12b80:	bcc	12b4c <_obstack_free@@Base+0x2c>
   12b84:	str	r6, [r4, #12]
   12b88:	str	r6, [r4, #8]
   12b8c:	ldr	r3, [r1]
   12b90:	str	r3, [r4, #16]
   12b94:	str	r1, [r4, #4]
   12b98:	ldrd	r4, [sp]
   12b9c:	ldr	r6, [sp, #8]
   12ba0:	add	sp, sp, #12
   12ba4:	pop	{pc}		; (ldr pc, [sp], #4)

00012ba8 <_obstack_memory_used@@Base>:
   12ba8:	ldr	r3, [r0, #4]
   12bac:	cmp	r3, #0
   12bb0:	beq	12bd4 <_obstack_memory_used@@Base+0x2c>
   12bb4:	mov	r0, #0
   12bb8:	ldr	r2, [r3]
   12bbc:	sub	r2, r2, r3
   12bc0:	add	r0, r0, r2
   12bc4:	ldr	r3, [r3, #4]
   12bc8:	cmp	r3, #0
   12bcc:	bne	12bb8 <_obstack_memory_used@@Base+0x10>
   12bd0:	bx	lr
   12bd4:	mov	r0, #0
   12bd8:	bx	lr
   12bdc:	strd	r4, [sp, #-16]!
   12be0:	str	r6, [sp, #8]
   12be4:	str	lr, [sp, #12]
   12be8:	subs	r4, r0, #0
   12bec:	beq	12c88 <_obstack_memory_used@@Base+0xe0>
   12bf0:	mov	r1, #47	; 0x2f
   12bf4:	mov	r0, r4
   12bf8:	bl	10f54 <strrchr@plt>
   12bfc:	subs	r5, r0, #0
   12c00:	beq	12c60 <_obstack_memory_used@@Base+0xb8>
   12c04:	add	r6, r5, #1
   12c08:	sub	r3, r6, r4
   12c0c:	cmp	r3, #6
   12c10:	ble	12c60 <_obstack_memory_used@@Base+0xb8>
   12c14:	mov	r2, #7
   12c18:	movw	r1, #30920	; 0x78c8
   12c1c:	movt	r1, #1
   12c20:	sub	r0, r5, #6
   12c24:	bl	10f78 <strncmp@plt>
   12c28:	cmp	r0, #0
   12c2c:	bne	12c60 <_obstack_memory_used@@Base+0xb8>
   12c30:	mov	r2, #3
   12c34:	movw	r1, #30928	; 0x78d0
   12c38:	movt	r1, #1
   12c3c:	mov	r0, r6
   12c40:	bl	10f78 <strncmp@plt>
   12c44:	cmp	r0, #0
   12c48:	movne	r4, r6
   12c4c:	bne	12c60 <_obstack_memory_used@@Base+0xb8>
   12c50:	add	r4, r5, #4
   12c54:	movw	r3, #33072	; 0x8130
   12c58:	movt	r3, #2
   12c5c:	str	r4, [r3]
   12c60:	movw	r3, #33160	; 0x8188
   12c64:	movt	r3, #2
   12c68:	str	r4, [r3]
   12c6c:	movw	r3, #33076	; 0x8134
   12c70:	movt	r3, #2
   12c74:	str	r4, [r3]
   12c78:	ldrd	r4, [sp]
   12c7c:	ldr	r6, [sp, #8]
   12c80:	add	sp, sp, #12
   12c84:	pop	{pc}		; (ldr pc, [sp], #4)
   12c88:	movw	r3, #33088	; 0x8140
   12c8c:	movt	r3, #2
   12c90:	ldr	r3, [r3]
   12c94:	mov	r2, #55	; 0x37
   12c98:	mov	r1, #1
   12c9c:	movw	r0, #30864	; 0x7890
   12ca0:	movt	r0, #1
   12ca4:	bl	10e04 <fwrite@plt>
   12ca8:	bl	10f84 <abort@plt>
   12cac:	mov	r2, #0
   12cb0:	mov	r3, #0
   12cb4:	strd	r2, [r0]
   12cb8:	strd	r2, [r0, #8]
   12cbc:	strd	r2, [r0, #16]
   12cc0:	strd	r2, [r0, #24]
   12cc4:	strd	r2, [r0, #32]
   12cc8:	strd	r2, [r0, #40]	; 0x28
   12ccc:	cmp	r1, #10
   12cd0:	beq	12cdc <_obstack_memory_used@@Base+0x134>
   12cd4:	str	r1, [r0]
   12cd8:	bx	lr
   12cdc:	str	r4, [sp, #-8]!
   12ce0:	str	lr, [sp, #4]
   12ce4:	bl	10f84 <abort@plt>
   12ce8:	strd	r4, [sp, #-16]!
   12cec:	str	r6, [sp, #8]
   12cf0:	str	lr, [sp, #12]
   12cf4:	mov	r5, r0
   12cf8:	mov	r6, r1
   12cfc:	mov	r2, #5
   12d00:	mov	r1, r0
   12d04:	mov	r0, #0
   12d08:	bl	10dc8 <dcgettext@plt>
   12d0c:	mov	r4, r0
   12d10:	cmp	r5, r0
   12d14:	beq	12d2c <_obstack_memory_used@@Base+0x184>
   12d18:	mov	r0, r4
   12d1c:	ldrd	r4, [sp]
   12d20:	ldr	r6, [sp, #8]
   12d24:	add	sp, sp, #12
   12d28:	pop	{pc}		; (ldr pc, [sp], #4)
   12d2c:	bl	15b1c <_obstack_memory_used@@Base+0x2f74>
   12d30:	ldrb	r3, [r0]
   12d34:	bic	r3, r3, #32
   12d38:	cmp	r3, #85	; 0x55
   12d3c:	bne	12dc0 <_obstack_memory_used@@Base+0x218>
   12d40:	ldrb	r3, [r0, #1]
   12d44:	bic	r3, r3, #32
   12d48:	cmp	r3, #84	; 0x54
   12d4c:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12d50:	ldrb	r3, [r0, #2]
   12d54:	bic	r3, r3, #32
   12d58:	cmp	r3, #70	; 0x46
   12d5c:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12d60:	ldrb	r3, [r0, #3]
   12d64:	cmp	r3, #45	; 0x2d
   12d68:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12d6c:	ldrb	r3, [r0, #4]
   12d70:	cmp	r3, #56	; 0x38
   12d74:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12d78:	ldrb	r3, [r0, #5]
   12d7c:	cmp	r3, #0
   12d80:	beq	12da0 <_obstack_memory_used@@Base+0x1f8>
   12d84:	movw	r4, #31016	; 0x7928
   12d88:	movt	r4, #1
   12d8c:	movw	r3, #31036	; 0x793c
   12d90:	movt	r3, #1
   12d94:	cmp	r6, #9
   12d98:	movne	r4, r3
   12d9c:	b	12d18 <_obstack_memory_used@@Base+0x170>
   12da0:	ldrb	r2, [r4]
   12da4:	movw	r4, #31032	; 0x7938
   12da8:	movt	r4, #1
   12dac:	movw	r3, #31020	; 0x792c
   12db0:	movt	r3, #1
   12db4:	cmp	r2, #96	; 0x60
   12db8:	movne	r4, r3
   12dbc:	b	12d18 <_obstack_memory_used@@Base+0x170>
   12dc0:	cmp	r3, #71	; 0x47
   12dc4:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12dc8:	ldrb	r3, [r0, #1]
   12dcc:	bic	r3, r3, #32
   12dd0:	cmp	r3, #66	; 0x42
   12dd4:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12dd8:	ldrb	r3, [r0, #2]
   12ddc:	cmp	r3, #49	; 0x31
   12de0:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12de4:	ldrb	r3, [r0, #3]
   12de8:	cmp	r3, #56	; 0x38
   12dec:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12df0:	ldrb	r3, [r0, #4]
   12df4:	cmp	r3, #48	; 0x30
   12df8:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12dfc:	ldrb	r3, [r0, #5]
   12e00:	cmp	r3, #51	; 0x33
   12e04:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12e08:	ldrb	r3, [r0, #6]
   12e0c:	cmp	r3, #48	; 0x30
   12e10:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12e14:	ldrb	r3, [r0, #7]
   12e18:	cmp	r3, #0
   12e1c:	bne	12d84 <_obstack_memory_used@@Base+0x1dc>
   12e20:	ldrb	r2, [r4]
   12e24:	movw	r4, #31028	; 0x7934
   12e28:	movt	r4, #1
   12e2c:	movw	r3, #31024	; 0x7930
   12e30:	movt	r3, #1
   12e34:	cmp	r2, #96	; 0x60
   12e38:	movne	r4, r3
   12e3c:	b	12d18 <_obstack_memory_used@@Base+0x170>
   12e40:	strd	r4, [sp, #-36]!	; 0xffffffdc
   12e44:	strd	r6, [sp, #8]
   12e48:	strd	r8, [sp, #16]
   12e4c:	strd	sl, [sp, #24]
   12e50:	str	lr, [sp, #32]
   12e54:	sub	sp, sp, #116	; 0x74
   12e58:	str	r0, [sp, #64]	; 0x40
   12e5c:	mov	r8, r1
   12e60:	str	r2, [sp, #48]	; 0x30
   12e64:	str	r3, [sp, #24]
   12e68:	ldr	r7, [sp, #152]	; 0x98
   12e6c:	bl	10e1c <__ctype_get_mb_cur_max@plt>
   12e70:	str	r0, [sp, #76]	; 0x4c
   12e74:	ldr	r3, [sp, #156]	; 0x9c
   12e78:	ubfx	r3, r3, #1, #1
   12e7c:	str	r3, [sp, #32]
   12e80:	mov	r3, #1
   12e84:	str	r3, [sp, #40]	; 0x28
   12e88:	mov	r3, #0
   12e8c:	str	r3, [sp, #68]	; 0x44
   12e90:	str	r3, [sp, #36]	; 0x24
   12e94:	str	r3, [sp, #28]
   12e98:	str	r3, [sp, #52]	; 0x34
   12e9c:	str	r3, [sp, #60]	; 0x3c
   12ea0:	str	r3, [sp, #72]	; 0x48
   12ea4:	movw	r3, #31040	; 0x7940
   12ea8:	movt	r3, #1
   12eac:	str	r3, [sp, #80]	; 0x50
   12eb0:	mov	r9, r8
   12eb4:	mov	sl, r7
   12eb8:	cmp	sl, #10
   12ebc:	ldrls	pc, [pc, sl, lsl #2]
   12ec0:	b	13084 <_obstack_memory_used@@Base+0x4dc>
   12ec4:	andeq	r2, r1, r4, lsr #30
   12ec8:	strdeq	r2, [r1], -r8
   12ecc:	andeq	r3, r1, ip, asr r0
   12ed0:	strdeq	r2, [r1], -r0
   12ed4:	andeq	r3, r1, r0, lsl r0
   12ed8:	andeq	r2, r1, r4, lsr pc
   12edc:	andeq	r4, r1, r0, lsl #6
   12ee0:	andeq	r3, r1, r8, lsl #1
   12ee4:	andeq	r2, r1, r0, ror pc
   12ee8:	andeq	r2, r1, r0, ror pc
   12eec:	andeq	r2, r1, r0, ror pc
   12ef0:	mov	r3, #1
   12ef4:	str	r3, [sp, #28]
   12ef8:	mov	r3, #1
   12efc:	str	r3, [sp, #32]
   12f00:	str	r3, [sp, #52]	; 0x34
   12f04:	movw	r3, #31036	; 0x793c
   12f08:	movt	r3, #1
   12f0c:	str	r3, [sp, #60]	; 0x3c
   12f10:	mov	fp, #0
   12f14:	mov	sl, #2
   12f18:	mov	r6, #0
   12f1c:	ldr	r8, [sp, #64]	; 0x40
   12f20:	b	13798 <_obstack_memory_used@@Base+0xbf0>
   12f24:	mov	fp, sl
   12f28:	mov	r3, #0
   12f2c:	str	r3, [sp, #32]
   12f30:	b	12f18 <_obstack_memory_used@@Base+0x370>
   12f34:	ldr	r3, [sp, #32]
   12f38:	cmp	r3, #0
   12f3c:	bne	1309c <_obstack_memory_used@@Base+0x4f4>
   12f40:	cmp	r9, #0
   12f44:	beq	130c0 <_obstack_memory_used@@Base+0x518>
   12f48:	mov	r3, #34	; 0x22
   12f4c:	ldr	r2, [sp, #64]	; 0x40
   12f50:	strb	r3, [r2]
   12f54:	mov	fp, #1
   12f58:	str	fp, [sp, #28]
   12f5c:	str	fp, [sp, #52]	; 0x34
   12f60:	movw	r3, #31016	; 0x7928
   12f64:	movt	r3, #1
   12f68:	str	r3, [sp, #60]	; 0x3c
   12f6c:	b	12f18 <_obstack_memory_used@@Base+0x370>
   12f70:	cmp	sl, #10
   12f74:	bne	12fa8 <_obstack_memory_used@@Base+0x400>
   12f78:	ldr	r3, [sp, #32]
   12f7c:	cmp	r3, #0
   12f80:	movne	fp, #0
   12f84:	beq	12fd0 <_obstack_memory_used@@Base+0x428>
   12f88:	ldr	r0, [sp, #168]	; 0xa8
   12f8c:	bl	10edc <strlen@plt>
   12f90:	str	r0, [sp, #52]	; 0x34
   12f94:	ldr	r3, [sp, #168]	; 0xa8
   12f98:	str	r3, [sp, #60]	; 0x3c
   12f9c:	mov	r3, #1
   12fa0:	str	r3, [sp, #28]
   12fa4:	b	12f18 <_obstack_memory_used@@Base+0x370>
   12fa8:	mov	r1, sl
   12fac:	ldr	r0, [sp, #80]	; 0x50
   12fb0:	bl	12ce8 <_obstack_memory_used@@Base+0x140>
   12fb4:	str	r0, [sp, #164]	; 0xa4
   12fb8:	mov	r1, sl
   12fbc:	movw	r0, #31036	; 0x793c
   12fc0:	movt	r0, #1
   12fc4:	bl	12ce8 <_obstack_memory_used@@Base+0x140>
   12fc8:	str	r0, [sp, #168]	; 0xa8
   12fcc:	b	12f78 <_obstack_memory_used@@Base+0x3d0>
   12fd0:	ldr	r3, [sp, #164]	; 0xa4
   12fd4:	ldrb	r3, [r3]
   12fd8:	cmp	r3, #0
   12fdc:	beq	13008 <_obstack_memory_used@@Base+0x460>
   12fe0:	ldr	r2, [sp, #164]	; 0xa4
   12fe4:	mov	fp, #0
   12fe8:	ldr	r1, [sp, #64]	; 0x40
   12fec:	cmp	r9, fp
   12ff0:	strbhi	r3, [r1, fp]
   12ff4:	add	fp, fp, #1
   12ff8:	ldrb	r3, [r2, #1]!
   12ffc:	cmp	r3, #0
   13000:	bne	12fec <_obstack_memory_used@@Base+0x444>
   13004:	b	12f88 <_obstack_memory_used@@Base+0x3e0>
   13008:	mov	fp, #0
   1300c:	b	12f88 <_obstack_memory_used@@Base+0x3e0>
   13010:	ldr	r3, [sp, #32]
   13014:	cmp	r3, #0
   13018:	bne	12ef8 <_obstack_memory_used@@Base+0x350>
   1301c:	mov	r3, #1
   13020:	str	r3, [sp, #28]
   13024:	cmp	r9, #0
   13028:	beq	130dc <_obstack_memory_used@@Base+0x534>
   1302c:	mov	r3, #39	; 0x27
   13030:	ldr	r2, [sp, #64]	; 0x40
   13034:	strb	r3, [r2]
   13038:	mov	r3, #0
   1303c:	str	r3, [sp, #32]
   13040:	mov	fp, #1
   13044:	str	fp, [sp, #52]	; 0x34
   13048:	movw	r3, #31036	; 0x793c
   1304c:	movt	r3, #1
   13050:	str	r3, [sp, #60]	; 0x3c
   13054:	mov	sl, #2
   13058:	b	12f18 <_obstack_memory_used@@Base+0x370>
   1305c:	ldr	r3, [sp, #32]
   13060:	cmp	r3, #0
   13064:	beq	13024 <_obstack_memory_used@@Base+0x47c>
   13068:	mov	r3, #1
   1306c:	str	r3, [sp, #52]	; 0x34
   13070:	movw	r3, #31036	; 0x793c
   13074:	movt	r3, #1
   13078:	str	r3, [sp, #60]	; 0x3c
   1307c:	mov	fp, #0
   13080:	b	12f18 <_obstack_memory_used@@Base+0x370>
   13084:	bl	10f84 <abort@plt>
   13088:	mov	fp, #0
   1308c:	str	fp, [sp, #32]
   13090:	mov	r3, #1
   13094:	str	r3, [sp, #28]
   13098:	b	12f18 <_obstack_memory_used@@Base+0x370>
   1309c:	ldr	r3, [sp, #32]
   130a0:	str	r3, [sp, #28]
   130a4:	mov	r3, #1
   130a8:	str	r3, [sp, #52]	; 0x34
   130ac:	movw	r3, #31016	; 0x7928
   130b0:	movt	r3, #1
   130b4:	str	r3, [sp, #60]	; 0x3c
   130b8:	mov	fp, #0
   130bc:	b	12f18 <_obstack_memory_used@@Base+0x370>
   130c0:	mov	fp, #1
   130c4:	str	fp, [sp, #28]
   130c8:	str	fp, [sp, #52]	; 0x34
   130cc:	movw	r3, #31016	; 0x7928
   130d0:	movt	r3, #1
   130d4:	str	r3, [sp, #60]	; 0x3c
   130d8:	b	12f18 <_obstack_memory_used@@Base+0x370>
   130dc:	mov	r3, #0
   130e0:	str	r3, [sp, #32]
   130e4:	mov	fp, #1
   130e8:	str	fp, [sp, #52]	; 0x34
   130ec:	movw	r3, #31036	; 0x793c
   130f0:	movt	r3, #1
   130f4:	str	r3, [sp, #60]	; 0x3c
   130f8:	mov	sl, #2
   130fc:	b	12f18 <_obstack_memory_used@@Base+0x370>
   13100:	mov	r3, r2
   13104:	add	r4, r6, r2
   13108:	ldr	r2, [sp, #24]
   1310c:	cmp	r3, #1
   13110:	movls	r3, #0
   13114:	movhi	r3, #1
   13118:	cmn	r2, #1
   1311c:	movne	r3, #0
   13120:	cmp	r3, #0
   13124:	beq	13134 <_obstack_memory_used@@Base+0x58c>
   13128:	ldr	r0, [sp, #48]	; 0x30
   1312c:	bl	10edc <strlen@plt>
   13130:	str	r0, [sp, #24]
   13134:	ldr	r3, [sp, #24]
   13138:	cmp	r4, r3
   1313c:	bhi	14328 <_obstack_memory_used@@Base+0x1780>
   13140:	ldr	r3, [sp, #48]	; 0x30
   13144:	add	r4, r3, r6
   13148:	ldr	r2, [sp, #52]	; 0x34
   1314c:	ldr	r1, [sp, #60]	; 0x3c
   13150:	mov	r0, r4
   13154:	bl	10db0 <memcmp@plt>
   13158:	cmp	r0, #0
   1315c:	bne	14328 <_obstack_memory_used@@Base+0x1780>
   13160:	ldr	r3, [sp, #32]
   13164:	cmp	r3, #0
   13168:	bne	13378 <_obstack_memory_used@@Base+0x7d0>
   1316c:	ldrb	r4, [r4]
   13170:	cmp	r4, #126	; 0x7e
   13174:	ldrls	pc, [pc, r4, lsl #2]
   13178:	b	13c2c <_obstack_memory_used@@Base+0x1084>
   1317c:			; <UNDEFINED> instruction: 0x000133bc
   13180:	andeq	r3, r1, ip, lsr #24
   13184:	andeq	r3, r1, ip, lsr #24
   13188:	andeq	r3, r1, ip, lsr #24
   1318c:	andeq	r3, r1, ip, lsr #24
   13190:	andeq	r3, r1, ip, lsr #24
   13194:	andeq	r3, r1, ip, lsr #24
   13198:	ldrdeq	r3, [r1], -r4
   1319c:	andeq	r3, r1, r8, asr r6
   131a0:	strdeq	r3, [r1], -ip
   131a4:	andeq	r3, r1, r8, lsr #21
   131a8:	andeq	r3, r1, r0, lsl sl
   131ac:	andeq	r3, r1, ip, ror #12
   131b0:	andeq	r3, r1, r0, lsl #13
   131b4:	andeq	r3, r1, ip, lsr #24
   131b8:	andeq	r3, r1, ip, lsr #24
   131bc:	andeq	r3, r1, ip, lsr #24
   131c0:	andeq	r3, r1, ip, lsr #24
   131c4:	andeq	r3, r1, ip, lsr #24
   131c8:	andeq	r3, r1, ip, lsr #24
   131cc:	andeq	r3, r1, ip, lsr #24
   131d0:	andeq	r3, r1, ip, lsr #24
   131d4:	andeq	r3, r1, ip, lsr #24
   131d8:	andeq	r3, r1, ip, lsr #24
   131dc:	andeq	r3, r1, ip, lsr #24
   131e0:	andeq	r3, r1, ip, lsr #24
   131e4:	andeq	r3, r1, ip, lsr #24
   131e8:	andeq	r3, r1, ip, lsr #24
   131ec:	andeq	r3, r1, ip, lsr #24
   131f0:	andeq	r3, r1, ip, lsr #24
   131f4:	andeq	r3, r1, ip, lsr #24
   131f8:	andeq	r3, r1, ip, lsr #24
   131fc:	andeq	r3, r1, r8, asr #22
   13200:	andeq	r3, r1, ip, ror #22
   13204:	andeq	r3, r1, ip, ror #22
   13208:	andeq	r3, r1, r4, lsl #22
   1320c:	andeq	r3, r1, ip, ror #22
   13210:	andeq	r4, r1, ip, lsl #1
   13214:	andeq	r3, r1, ip, ror #22
   13218:	andeq	r3, r1, ip, lsl #23
   1321c:	andeq	r3, r1, ip, ror #22
   13220:	andeq	r3, r1, ip, ror #22
   13224:	andeq	r3, r1, ip, ror #22
   13228:	andeq	r4, r1, ip, lsl #1
   1322c:	andeq	r4, r1, ip, lsl #1
   13230:	andeq	r4, r1, ip, lsl #1
   13234:	andeq	r4, r1, ip, lsl #1
   13238:	andeq	r4, r1, ip, lsl #1
   1323c:	andeq	r4, r1, ip, lsl #1
   13240:	andeq	r4, r1, ip, lsl #1
   13244:	andeq	r4, r1, ip, lsl #1
   13248:	andeq	r4, r1, ip, lsl #1
   1324c:	andeq	r4, r1, ip, lsl #1
   13250:	andeq	r4, r1, ip, lsl #1
   13254:	andeq	r4, r1, ip, lsl #1
   13258:	andeq	r4, r1, ip, lsl #1
   1325c:	andeq	r4, r1, ip, lsl #1
   13260:	andeq	r4, r1, ip, lsl #1
   13264:	andeq	r4, r1, ip, lsl #1
   13268:	andeq	r3, r1, ip, ror #22
   1326c:	andeq	r3, r1, ip, ror #22
   13270:	andeq	r3, r1, ip, ror #22
   13274:	andeq	r3, r1, ip, ror #22
   13278:	andeq	r3, r1, ip, ror #9
   1327c:	andeq	r3, r1, ip, lsr #24
   13280:	andeq	r4, r1, ip, lsl #1
   13284:	andeq	r4, r1, ip, lsl #1
   13288:	andeq	r4, r1, ip, lsl #1
   1328c:	andeq	r4, r1, ip, lsl #1
   13290:	andeq	r4, r1, ip, lsl #1
   13294:	andeq	r4, r1, ip, lsl #1
   13298:	andeq	r4, r1, ip, lsl #1
   1329c:	andeq	r4, r1, ip, lsl #1
   132a0:	andeq	r4, r1, ip, lsl #1
   132a4:	andeq	r4, r1, ip, lsl #1
   132a8:	andeq	r4, r1, ip, lsl #1
   132ac:	andeq	r4, r1, ip, lsl #1
   132b0:	andeq	r4, r1, ip, lsl #1
   132b4:	andeq	r4, r1, ip, lsl #1
   132b8:	andeq	r4, r1, ip, lsl #1
   132bc:	andeq	r4, r1, ip, lsl #1
   132c0:	andeq	r4, r1, ip, lsl #1
   132c4:	andeq	r4, r1, ip, lsl #1
   132c8:	andeq	r4, r1, ip, lsl #1
   132cc:	andeq	r4, r1, ip, lsl #1
   132d0:	andeq	r4, r1, ip, lsl #1
   132d4:	andeq	r4, r1, ip, lsl #1
   132d8:	andeq	r4, r1, ip, lsl #1
   132dc:	andeq	r4, r1, ip, lsl #1
   132e0:	andeq	r4, r1, ip, lsl #1
   132e4:	andeq	r4, r1, ip, lsl #1
   132e8:	andeq	r3, r1, ip, ror #22
   132ec:	andeq	r3, r1, r4, lsr #20
   132f0:	andeq	r4, r1, ip, lsl #1
   132f4:	andeq	r3, r1, ip, ror #22
   132f8:	andeq	r4, r1, ip, lsl #1
   132fc:	andeq	r3, r1, ip, ror #22
   13300:	andeq	r4, r1, ip, lsl #1
   13304:	andeq	r4, r1, ip, lsl #1
   13308:	andeq	r4, r1, ip, lsl #1
   1330c:	andeq	r4, r1, ip, lsl #1
   13310:	andeq	r4, r1, ip, lsl #1
   13314:	andeq	r4, r1, ip, lsl #1
   13318:	andeq	r4, r1, ip, lsl #1
   1331c:	andeq	r4, r1, ip, lsl #1
   13320:	andeq	r4, r1, ip, lsl #1
   13324:	andeq	r4, r1, ip, lsl #1
   13328:	andeq	r4, r1, ip, lsl #1
   1332c:	andeq	r4, r1, ip, lsl #1
   13330:	andeq	r4, r1, ip, lsl #1
   13334:	andeq	r4, r1, ip, lsl #1
   13338:	andeq	r4, r1, ip, lsl #1
   1333c:	andeq	r4, r1, ip, lsl #1
   13340:	andeq	r4, r1, ip, lsl #1
   13344:	andeq	r4, r1, ip, lsl #1
   13348:	andeq	r4, r1, ip, lsl #1
   1334c:	andeq	r4, r1, ip, lsl #1
   13350:	andeq	r4, r1, ip, lsl #1
   13354:	andeq	r4, r1, ip, lsl #1
   13358:	andeq	r4, r1, ip, lsl #1
   1335c:	andeq	r4, r1, ip, lsl #1
   13360:	andeq	r4, r1, ip, lsl #1
   13364:	andeq	r4, r1, ip, lsl #1
   13368:	andeq	r3, r1, r4, ror #21
   1336c:	andeq	r3, r1, ip, ror #22
   13370:	andeq	r3, r1, r4, ror #21
   13374:	andeq	r3, r1, r4, lsl #22
   13378:	mov	r8, r9
   1337c:	mov	r7, sl
   13380:	b	14280 <_obstack_memory_used@@Base+0x16d8>
   13384:	ldr	r3, [sp, #28]
   13388:	cmp	r3, #0
   1338c:	bne	133ac <_obstack_memory_used@@Base+0x804>
   13390:	ldr	r3, [sp, #156]	; 0x9c
   13394:	tst	r3, #1
   13398:	bne	13794 <_obstack_memory_used@@Base+0xbec>
   1339c:	ldr	r3, [sp, #28]
   133a0:	str	r3, [sp, #44]	; 0x2c
   133a4:	mov	r5, r3
   133a8:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   133ac:	ldr	r3, [sp, #32]
   133b0:	cmp	r3, #0
   133b4:	bne	14230 <_obstack_memory_used@@Base+0x1688>
   133b8:	str	r3, [sp, #44]	; 0x2c
   133bc:	ldr	r3, [sp, #36]	; 0x24
   133c0:	eor	r3, r3, #1
   133c4:	cmp	sl, #2
   133c8:	movne	r3, #0
   133cc:	andeq	r3, r3, #1
   133d0:	cmp	r3, #0
   133d4:	beq	1342c <_obstack_memory_used@@Base+0x884>
   133d8:	cmp	r9, fp
   133dc:	movhi	r2, #39	; 0x27
   133e0:	strbhi	r2, [r8, fp]
   133e4:	add	r2, fp, #1
   133e8:	cmp	r9, r2
   133ec:	movhi	r1, #36	; 0x24
   133f0:	strbhi	r1, [r8, r2]
   133f4:	add	r2, fp, #2
   133f8:	cmp	r9, r2
   133fc:	movhi	r1, #39	; 0x27
   13400:	strbhi	r1, [r8, r2]
   13404:	add	r2, fp, #3
   13408:	cmp	r9, r2
   1340c:	bls	142ec <_obstack_memory_used@@Base+0x1744>
   13410:	mov	r1, #92	; 0x5c
   13414:	strb	r1, [r8, r2]
   13418:	add	fp, fp, #4
   1341c:	str	r3, [sp, #36]	; 0x24
   13420:	mov	r5, #0
   13424:	mov	r4, #48	; 0x30
   13428:	b	13700 <_obstack_memory_used@@Base+0xb58>
   1342c:	cmp	r9, fp
   13430:	bhi	13458 <_obstack_memory_used@@Base+0x8b0>
   13434:	add	r1, fp, #1
   13438:	ldr	r2, [sp, #56]	; 0x38
   1343c:	cmp	r2, #0
   13440:	bne	13480 <_obstack_memory_used@@Base+0x8d8>
   13444:	mov	r3, r5
   13448:	ldr	r5, [sp, #56]	; 0x38
   1344c:	mov	fp, r1
   13450:	mov	r4, #48	; 0x30
   13454:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   13458:	mov	r2, #92	; 0x5c
   1345c:	strb	r2, [r8, fp]
   13460:	add	r1, fp, #1
   13464:	ldr	r2, [sp, #56]	; 0x38
   13468:	cmp	r2, #0
   1346c:	moveq	r3, r5
   13470:	moveq	r5, r2
   13474:	moveq	fp, r1
   13478:	moveq	r4, #48	; 0x30
   1347c:	beq	13700 <_obstack_memory_used@@Base+0xb58>
   13480:	add	r2, r6, #1
   13484:	ldr	r0, [sp, #24]
   13488:	cmp	r2, r0
   1348c:	bcs	134a8 <_obstack_memory_used@@Base+0x900>
   13490:	ldr	r0, [sp, #48]	; 0x30
   13494:	ldrb	r2, [r0, r2]
   13498:	sub	r2, r2, #48	; 0x30
   1349c:	uxtb	r2, r2
   134a0:	cmp	r2, #9
   134a4:	bls	134c0 <_obstack_memory_used@@Base+0x918>
   134a8:	mov	r2, r3
   134ac:	mov	r3, r5
   134b0:	mov	r5, r2
   134b4:	mov	fp, r1
   134b8:	mov	r4, #48	; 0x30
   134bc:	b	136d8 <_obstack_memory_used@@Base+0xb30>
   134c0:	cmp	r9, r1
   134c4:	movhi	r2, #48	; 0x30
   134c8:	strbhi	r2, [r8, r1]
   134cc:	add	r2, fp, #2
   134d0:	cmp	r9, r2
   134d4:	movhi	r1, #48	; 0x30
   134d8:	strbhi	r1, [r8, r2]
   134dc:	add	r1, fp, #3
   134e0:	b	134a8 <_obstack_memory_used@@Base+0x900>
   134e4:	mov	r3, #0
   134e8:	str	r3, [sp, #44]	; 0x2c
   134ec:	cmp	sl, #2
   134f0:	beq	1350c <_obstack_memory_used@@Base+0x964>
   134f4:	cmp	sl, #5
   134f8:	beq	13524 <_obstack_memory_used@@Base+0x97c>
   134fc:	mov	r5, #0
   13500:	mov	r3, r5
   13504:	mov	r4, #63	; 0x3f
   13508:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   1350c:	ldr	r3, [sp, #32]
   13510:	cmp	r3, #0
   13514:	bne	1423c <_obstack_memory_used@@Base+0x1694>
   13518:	mov	r5, r3
   1351c:	mov	r4, #63	; 0x3f
   13520:	b	13c1c <_obstack_memory_used@@Base+0x1074>
   13524:	ldr	r3, [sp, #156]	; 0x9c
   13528:	tst	r3, #4
   1352c:	beq	14054 <_obstack_memory_used@@Base+0x14ac>
   13530:	add	r2, r6, #2
   13534:	ldr	r3, [sp, #24]
   13538:	cmp	r2, r3
   1353c:	bcs	14064 <_obstack_memory_used@@Base+0x14bc>
   13540:	ldr	r3, [sp, #48]	; 0x30
   13544:	add	r3, r3, r6
   13548:	ldrb	r4, [r3, #1]
   1354c:	cmp	r4, #63	; 0x3f
   13550:	movne	r5, #0
   13554:	movne	r3, r5
   13558:	movne	r4, #63	; 0x3f
   1355c:	bne	136b4 <_obstack_memory_used@@Base+0xb0c>
   13560:	ldr	r3, [sp, #48]	; 0x30
   13564:	ldrb	r1, [r3, r2]
   13568:	sub	r3, r1, #33	; 0x21
   1356c:	cmp	r3, #29
   13570:	ldrls	pc, [pc, r3, lsl #2]
   13574:	b	14074 <_obstack_memory_used@@Base+0x14cc>
   13578:	strdeq	r3, [r1], -r0
   1357c:	andeq	r4, r1, r4, ror r0
   13580:	andeq	r4, r1, r4, ror r0
   13584:	andeq	r4, r1, r4, ror r0
   13588:	andeq	r4, r1, r4, ror r0
   1358c:	andeq	r4, r1, r4, ror r0
   13590:	strdeq	r3, [r1], -r0
   13594:	strdeq	r3, [r1], -r0
   13598:	strdeq	r3, [r1], -r0
   1359c:	andeq	r4, r1, r4, ror r0
   135a0:	andeq	r4, r1, r4, ror r0
   135a4:	andeq	r4, r1, r4, ror r0
   135a8:	strdeq	r3, [r1], -r0
   135ac:	andeq	r4, r1, r4, ror r0
   135b0:	strdeq	r3, [r1], -r0
   135b4:	andeq	r4, r1, r4, ror r0
   135b8:	andeq	r4, r1, r4, ror r0
   135bc:	andeq	r4, r1, r4, ror r0
   135c0:	andeq	r4, r1, r4, ror r0
   135c4:	andeq	r4, r1, r4, ror r0
   135c8:	andeq	r4, r1, r4, ror r0
   135cc:	andeq	r4, r1, r4, ror r0
   135d0:	andeq	r4, r1, r4, ror r0
   135d4:	andeq	r4, r1, r4, ror r0
   135d8:	andeq	r4, r1, r4, ror r0
   135dc:	andeq	r4, r1, r4, ror r0
   135e0:	andeq	r4, r1, r4, ror r0
   135e4:	strdeq	r3, [r1], -r0
   135e8:	strdeq	r3, [r1], -r0
   135ec:	strdeq	r3, [r1], -r0
   135f0:	ldr	r3, [sp, #32]
   135f4:	cmp	r3, #0
   135f8:	bne	142e0 <_obstack_memory_used@@Base+0x1738>
   135fc:	cmp	r9, fp
   13600:	movhi	r3, #63	; 0x3f
   13604:	strbhi	r3, [r8, fp]
   13608:	add	r3, fp, #1
   1360c:	cmp	r9, r3
   13610:	movhi	r0, #34	; 0x22
   13614:	strbhi	r0, [r8, r3]
   13618:	add	r3, fp, #2
   1361c:	cmp	r9, r3
   13620:	movhi	r0, #34	; 0x22
   13624:	strbhi	r0, [r8, r3]
   13628:	add	r3, fp, #3
   1362c:	cmp	r9, r3
   13630:	movhi	r0, #63	; 0x3f
   13634:	strbhi	r0, [r8, r3]
   13638:	add	fp, fp, #4
   1363c:	ldr	r3, [sp, #32]
   13640:	mov	r5, r3
   13644:	mov	r4, r1
   13648:	mov	r6, r2
   1364c:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   13650:	mov	r3, #0
   13654:	str	r3, [sp, #44]	; 0x2c
   13658:	mov	r4, #8
   1365c:	mov	r3, #98	; 0x62
   13660:	b	136a0 <_obstack_memory_used@@Base+0xaf8>
   13664:	mov	r3, #0
   13668:	str	r3, [sp, #44]	; 0x2c
   1366c:	mov	r4, #12
   13670:	mov	r3, #102	; 0x66
   13674:	b	136a0 <_obstack_memory_used@@Base+0xaf8>
   13678:	mov	r3, #0
   1367c:	str	r3, [sp, #44]	; 0x2c
   13680:	mov	r4, #13
   13684:	mov	r3, #114	; 0x72
   13688:	ldr	r2, [sp, #32]
   1368c:	cmp	sl, #2
   13690:	movne	r2, #0
   13694:	andeq	r2, r2, #1
   13698:	cmp	r2, #0
   1369c:	bne	13ac0 <_obstack_memory_used@@Base+0xf18>
   136a0:	ldr	r2, [sp, #28]
   136a4:	cmp	r2, #0
   136a8:	bne	140a8 <_obstack_memory_used@@Base+0x1500>
   136ac:	mov	r5, r2
   136b0:	mov	r3, r2
   136b4:	ldr	r2, [sp, #28]
   136b8:	eor	r2, r2, #1
   136bc:	cmp	sl, #2
   136c0:	orreq	r2, r2, #1
   136c4:	eor	r2, r2, #1
   136c8:	ldr	r1, [sp, #32]
   136cc:	orr	r2, r1, r2
   136d0:	tst	r2, #255	; 0xff
   136d4:	beq	13700 <_obstack_memory_used@@Base+0xb58>
   136d8:	ldr	r2, [sp, #160]	; 0xa0
   136dc:	cmp	r2, #0
   136e0:	beq	13700 <_obstack_memory_used@@Base+0xb58>
   136e4:	ubfx	r1, r4, #5, #8
   136e8:	and	r2, r4, #31
   136ec:	ldr	r0, [sp, #160]	; 0xa0
   136f0:	ldr	r1, [r0, r1, lsl #2]
   136f4:	lsr	r2, r1, r2
   136f8:	tst	r2, #1
   136fc:	bne	1370c <_obstack_memory_used@@Base+0xb64>
   13700:	ldr	r2, [sp, #44]	; 0x2c
   13704:	cmp	r2, #0
   13708:	beq	13a60 <_obstack_memory_used@@Base+0xeb8>
   1370c:	ldr	r3, [sp, #32]
   13710:	cmp	r3, #0
   13714:	bne	14260 <_obstack_memory_used@@Base+0x16b8>
   13718:	ldr	r3, [sp, #36]	; 0x24
   1371c:	eor	r3, r3, #1
   13720:	cmp	sl, #2
   13724:	movne	r3, #0
   13728:	andeq	r3, r3, #1
   1372c:	cmp	r3, #0
   13730:	beq	13768 <_obstack_memory_used@@Base+0xbc0>
   13734:	cmp	r9, fp
   13738:	movhi	r2, #39	; 0x27
   1373c:	strbhi	r2, [r8, fp]
   13740:	add	r2, fp, #1
   13744:	cmp	r9, r2
   13748:	movhi	r1, #36	; 0x24
   1374c:	strbhi	r1, [r8, r2]
   13750:	add	r2, fp, #2
   13754:	cmp	r9, r2
   13758:	movhi	r1, #39	; 0x27
   1375c:	strbhi	r1, [r8, r2]
   13760:	add	fp, fp, #3
   13764:	str	r3, [sp, #36]	; 0x24
   13768:	cmp	r9, fp
   1376c:	movhi	r3, #92	; 0x5c
   13770:	strbhi	r3, [r8, fp]
   13774:	add	fp, fp, #1
   13778:	cmp	fp, r9
   1377c:	strbcc	r4, [r8, fp]
   13780:	add	fp, fp, #1
   13784:	cmp	r5, #0
   13788:	ldr	r3, [sp, #40]	; 0x28
   1378c:	moveq	r3, r5
   13790:	str	r3, [sp, #40]	; 0x28
   13794:	add	r6, r6, #1
   13798:	ldr	r3, [sp, #24]
   1379c:	cmn	r3, #1
   137a0:	beq	140d0 <_obstack_memory_used@@Base+0x1528>
   137a4:	ldr	r3, [sp, #24]
   137a8:	subs	r5, r3, r6
   137ac:	movne	r5, #1
   137b0:	cmp	r5, #0
   137b4:	beq	140e4 <_obstack_memory_used@@Base+0x153c>
   137b8:	ldr	r3, [sp, #28]
   137bc:	cmp	sl, #2
   137c0:	moveq	r3, #0
   137c4:	andne	r3, r3, #1
   137c8:	str	r3, [sp, #56]	; 0x38
   137cc:	ldr	r2, [sp, #52]	; 0x34
   137d0:	adds	r7, r2, #0
   137d4:	movne	r7, #1
   137d8:	ands	r3, r3, r7
   137dc:	str	r3, [sp, #44]	; 0x2c
   137e0:	bne	13100 <_obstack_memory_used@@Base+0x558>
   137e4:	ldr	r3, [sp, #48]	; 0x30
   137e8:	ldrb	r4, [r3, r6]
   137ec:	cmp	r4, #126	; 0x7e
   137f0:	ldrls	pc, [pc, r4, lsl #2]
   137f4:	b	13c2c <_obstack_memory_used@@Base+0x1084>
   137f8:	andeq	r3, r1, r4, lsl #7
   137fc:	andeq	r3, r1, ip, lsr #24
   13800:	andeq	r3, r1, ip, lsr #24
   13804:	andeq	r3, r1, ip, lsr #24
   13808:	andeq	r3, r1, ip, lsr #24
   1380c:	andeq	r3, r1, ip, lsr #24
   13810:	andeq	r3, r1, ip, lsr #24
   13814:	andeq	r3, r1, ip, asr #21
   13818:	andeq	r3, r1, r8, asr r6
   1381c:	strdeq	r3, [r1], -ip
   13820:	andeq	r3, r1, r0, lsr #21
   13824:	andeq	r3, r1, r0, lsl sl
   13828:	andeq	r3, r1, ip, ror #12
   1382c:	andeq	r3, r1, r0, lsl #13
   13830:	andeq	r3, r1, ip, lsr #24
   13834:	andeq	r3, r1, ip, lsr #24
   13838:	andeq	r3, r1, ip, lsr #24
   1383c:	andeq	r3, r1, ip, lsr #24
   13840:	andeq	r3, r1, ip, lsr #24
   13844:	andeq	r3, r1, ip, lsr #24
   13848:	andeq	r3, r1, ip, lsr #24
   1384c:	andeq	r3, r1, ip, lsr #24
   13850:	andeq	r3, r1, ip, lsr #24
   13854:	andeq	r3, r1, ip, lsr #24
   13858:	andeq	r3, r1, ip, lsr #24
   1385c:	andeq	r3, r1, ip, lsr #24
   13860:	andeq	r3, r1, ip, lsr #24
   13864:	andeq	r3, r1, ip, lsr #24
   13868:	andeq	r3, r1, ip, lsr #24
   1386c:	andeq	r3, r1, ip, lsr #24
   13870:	andeq	r3, r1, ip, lsr #24
   13874:	andeq	r3, r1, ip, lsr #24
   13878:	andeq	r3, r1, r8, asr #22
   1387c:	andeq	r3, r1, r4, asr #22
   13880:	andeq	r3, r1, r4, asr #22
   13884:	andeq	r3, r1, r4, lsl #22
   13888:	andeq	r3, r1, r4, asr #22
   1388c:	andeq	r4, r1, ip, asr #32
   13890:	andeq	r3, r1, r4, asr #22
   13894:	andeq	r3, r1, ip, lsl #23
   13898:	andeq	r3, r1, r4, asr #22
   1389c:	andeq	r3, r1, r4, asr #22
   138a0:	andeq	r3, r1, r4, asr #22
   138a4:	andeq	r4, r1, ip, asr #32
   138a8:	andeq	r4, r1, ip, asr #32
   138ac:	andeq	r4, r1, ip, asr #32
   138b0:	andeq	r4, r1, ip, asr #32
   138b4:	andeq	r4, r1, ip, asr #32
   138b8:	andeq	r4, r1, ip, asr #32
   138bc:	andeq	r4, r1, ip, asr #32
   138c0:	andeq	r4, r1, ip, asr #32
   138c4:	andeq	r4, r1, ip, asr #32
   138c8:	andeq	r4, r1, ip, asr #32
   138cc:	andeq	r4, r1, ip, asr #32
   138d0:	andeq	r4, r1, ip, asr #32
   138d4:	andeq	r4, r1, ip, asr #32
   138d8:	andeq	r4, r1, ip, asr #32
   138dc:	andeq	r4, r1, ip, asr #32
   138e0:	andeq	r4, r1, ip, asr #32
   138e4:	andeq	r3, r1, r4, asr #22
   138e8:	andeq	r3, r1, r4, asr #22
   138ec:	andeq	r3, r1, r4, asr #22
   138f0:	andeq	r3, r1, r4, asr #22
   138f4:	andeq	r3, r1, ip, ror #9
   138f8:	andeq	r3, r1, ip, lsr #24
   138fc:	andeq	r4, r1, ip, asr #32
   13900:	andeq	r4, r1, ip, asr #32
   13904:	andeq	r4, r1, ip, asr #32
   13908:	andeq	r4, r1, ip, asr #32
   1390c:	andeq	r4, r1, ip, asr #32
   13910:	andeq	r4, r1, ip, asr #32
   13914:	andeq	r4, r1, ip, asr #32
   13918:	andeq	r4, r1, ip, asr #32
   1391c:	andeq	r4, r1, ip, asr #32
   13920:	andeq	r4, r1, ip, asr #32
   13924:	andeq	r4, r1, ip, asr #32
   13928:	andeq	r4, r1, ip, asr #32
   1392c:	andeq	r4, r1, ip, asr #32
   13930:	andeq	r4, r1, ip, asr #32
   13934:	andeq	r4, r1, ip, asr #32
   13938:	andeq	r4, r1, ip, asr #32
   1393c:	andeq	r4, r1, ip, asr #32
   13940:	andeq	r4, r1, ip, asr #32
   13944:	andeq	r4, r1, ip, asr #32
   13948:	andeq	r4, r1, ip, asr #32
   1394c:	andeq	r4, r1, ip, asr #32
   13950:	andeq	r4, r1, ip, asr #32
   13954:	andeq	r4, r1, ip, asr #32
   13958:	andeq	r4, r1, ip, asr #32
   1395c:	andeq	r4, r1, ip, asr #32
   13960:	andeq	r4, r1, ip, asr #32
   13964:	andeq	r3, r1, r4, asr #22
   13968:	andeq	r3, r1, r4, lsr #20
   1396c:	andeq	r4, r1, ip, asr #32
   13970:	andeq	r3, r1, r4, asr #22
   13974:	andeq	r4, r1, ip, asr #32
   13978:	andeq	r3, r1, r4, asr #22
   1397c:	andeq	r4, r1, ip, asr #32
   13980:	andeq	r4, r1, ip, asr #32
   13984:	andeq	r4, r1, ip, asr #32
   13988:	andeq	r4, r1, ip, asr #32
   1398c:	andeq	r4, r1, ip, asr #32
   13990:	andeq	r4, r1, ip, asr #32
   13994:	andeq	r4, r1, ip, asr #32
   13998:	andeq	r4, r1, ip, asr #32
   1399c:	andeq	r4, r1, ip, asr #32
   139a0:	andeq	r4, r1, ip, asr #32
   139a4:	andeq	r4, r1, ip, asr #32
   139a8:	andeq	r4, r1, ip, asr #32
   139ac:	andeq	r4, r1, ip, asr #32
   139b0:	andeq	r4, r1, ip, asr #32
   139b4:	andeq	r4, r1, ip, asr #32
   139b8:	andeq	r4, r1, ip, asr #32
   139bc:	andeq	r4, r1, ip, asr #32
   139c0:	andeq	r4, r1, ip, asr #32
   139c4:	andeq	r4, r1, ip, asr #32
   139c8:	andeq	r4, r1, ip, asr #32
   139cc:	andeq	r4, r1, ip, asr #32
   139d0:	andeq	r4, r1, ip, asr #32
   139d4:	andeq	r4, r1, ip, asr #32
   139d8:	andeq	r4, r1, ip, asr #32
   139dc:	andeq	r4, r1, ip, asr #32
   139e0:	andeq	r4, r1, ip, asr #32
   139e4:	andeq	r3, r1, r4, ror #21
   139e8:	andeq	r3, r1, r4, asr #22
   139ec:	andeq	r3, r1, r4, ror #21
   139f0:	andeq	r3, r1, r4, lsl #22
   139f4:	mov	r3, #0
   139f8:	str	r3, [sp, #44]	; 0x2c
   139fc:	mov	r4, #9
   13a00:	mov	r3, #116	; 0x74
   13a04:	b	13688 <_obstack_memory_used@@Base+0xae0>
   13a08:	mov	r3, #0
   13a0c:	str	r3, [sp, #44]	; 0x2c
   13a10:	mov	r4, #11
   13a14:	mov	r3, #118	; 0x76
   13a18:	b	136a0 <_obstack_memory_used@@Base+0xaf8>
   13a1c:	mov	r3, #0
   13a20:	str	r3, [sp, #44]	; 0x2c
   13a24:	cmp	sl, #2
   13a28:	beq	13a4c <_obstack_memory_used@@Base+0xea4>
   13a2c:	ldr	r3, [sp, #28]
   13a30:	ldr	r2, [sp, #32]
   13a34:	and	r3, r3, r2
   13a38:	tst	r7, r3
   13a3c:	bne	140c0 <_obstack_memory_used@@Base+0x1518>
   13a40:	mov	r4, #92	; 0x5c
   13a44:	mov	r3, r4
   13a48:	b	136a0 <_obstack_memory_used@@Base+0xaf8>
   13a4c:	ldr	r3, [sp, #32]
   13a50:	cmp	r3, #0
   13a54:	bne	14248 <_obstack_memory_used@@Base+0x16a0>
   13a58:	mov	r5, r3
   13a5c:	mov	r4, #92	; 0x5c
   13a60:	eor	r3, r3, #1
   13a64:	ldr	r2, [sp, #36]	; 0x24
   13a68:	and	r3, r3, r2
   13a6c:	tst	r3, #255	; 0xff
   13a70:	beq	13778 <_obstack_memory_used@@Base+0xbd0>
   13a74:	cmp	r9, fp
   13a78:	movhi	r3, #39	; 0x27
   13a7c:	strbhi	r3, [r8, fp]
   13a80:	add	r3, fp, #1
   13a84:	cmp	r9, r3
   13a88:	movhi	r2, #39	; 0x27
   13a8c:	strbhi	r2, [r8, r3]
   13a90:	add	fp, fp, #2
   13a94:	mov	r3, #0
   13a98:	str	r3, [sp, #36]	; 0x24
   13a9c:	b	13778 <_obstack_memory_used@@Base+0xbd0>
   13aa0:	mov	r3, #110	; 0x6e
   13aa4:	b	13688 <_obstack_memory_used@@Base+0xae0>
   13aa8:	mov	r3, #110	; 0x6e
   13aac:	b	13688 <_obstack_memory_used@@Base+0xae0>
   13ab0:	mov	r3, #0
   13ab4:	str	r3, [sp, #44]	; 0x2c
   13ab8:	mov	r3, #110	; 0x6e
   13abc:	b	13688 <_obstack_memory_used@@Base+0xae0>
   13ac0:	mov	r8, r9
   13ac4:	mov	r7, #2
   13ac8:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   13acc:	mov	r3, #97	; 0x61
   13ad0:	b	136a0 <_obstack_memory_used@@Base+0xaf8>
   13ad4:	mov	r3, #97	; 0x61
   13ad8:	b	136a0 <_obstack_memory_used@@Base+0xaf8>
   13adc:	mov	r3, #0
   13ae0:	str	r3, [sp, #44]	; 0x2c
   13ae4:	ldr	r3, [sp, #24]
   13ae8:	cmn	r3, #1
   13aec:	beq	13b18 <_obstack_memory_used@@Base+0xf70>
   13af0:	ldr	r3, [sp, #24]
   13af4:	subs	r3, r3, #1
   13af8:	movne	r3, #1
   13afc:	cmp	r3, #0
   13b00:	bne	14080 <_obstack_memory_used@@Base+0x14d8>
   13b04:	cmp	r6, #0
   13b08:	beq	13b48 <_obstack_memory_used@@Base+0xfa0>
   13b0c:	mov	r5, #0
   13b10:	mov	r3, r5
   13b14:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   13b18:	ldr	r3, [sp, #48]	; 0x30
   13b1c:	ldrb	r3, [r3, #1]
   13b20:	adds	r3, r3, #0
   13b24:	movne	r3, #1
   13b28:	b	13afc <_obstack_memory_used@@Base+0xf54>
   13b2c:	mov	r3, #0
   13b30:	str	r3, [sp, #44]	; 0x2c
   13b34:	b	13b04 <_obstack_memory_used@@Base+0xf5c>
   13b38:	mov	r3, #0
   13b3c:	str	r3, [sp, #44]	; 0x2c
   13b40:	b	13b48 <_obstack_memory_used@@Base+0xfa0>
   13b44:	ldr	r5, [sp, #44]	; 0x2c
   13b48:	ldr	r3, [sp, #32]
   13b4c:	cmp	sl, #2
   13b50:	movne	r3, #0
   13b54:	andeq	r3, r3, #1
   13b58:	cmp	r3, #0
   13b5c:	beq	136b4 <_obstack_memory_used@@Base+0xb0c>
   13b60:	mov	r8, r9
   13b64:	mov	r7, #2
   13b68:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   13b6c:	ldr	r5, [sp, #32]
   13b70:	b	13b48 <_obstack_memory_used@@Base+0xfa0>
   13b74:	mov	r3, #0
   13b78:	str	r3, [sp, #44]	; 0x2c
   13b7c:	mov	r5, r3
   13b80:	b	13b48 <_obstack_memory_used@@Base+0xfa0>
   13b84:	mov	r3, #0
   13b88:	str	r3, [sp, #44]	; 0x2c
   13b8c:	cmp	sl, #2
   13b90:	strne	r5, [sp, #68]	; 0x44
   13b94:	movne	r3, #0
   13b98:	movne	r4, #39	; 0x27
   13b9c:	bne	136b4 <_obstack_memory_used@@Base+0xb0c>
   13ba0:	ldr	r3, [sp, #32]
   13ba4:	cmp	r3, #0
   13ba8:	bne	14254 <_obstack_memory_used@@Base+0x16ac>
   13bac:	ldr	r3, [sp, #72]	; 0x48
   13bb0:	clz	r3, r3
   13bb4:	lsr	r3, r3, #5
   13bb8:	cmp	r9, #0
   13bbc:	moveq	r3, #0
   13bc0:	cmp	r3, #0
   13bc4:	movne	r3, #0
   13bc8:	bne	13bf0 <_obstack_memory_used@@Base+0x1048>
   13bcc:	cmp	r9, fp
   13bd0:	movhi	r3, #39	; 0x27
   13bd4:	strbhi	r3, [r8, fp]
   13bd8:	add	r3, fp, #1
   13bdc:	cmp	r9, r3
   13be0:	movhi	r2, #92	; 0x5c
   13be4:	strbhi	r2, [r8, r3]
   13be8:	mov	r3, r9
   13bec:	ldr	r9, [sp, #72]	; 0x48
   13bf0:	add	r2, fp, #2
   13bf4:	cmp	r2, r3
   13bf8:	movcc	r1, #39	; 0x27
   13bfc:	strbcc	r1, [r8, r2]
   13c00:	add	fp, fp, #3
   13c04:	str	r5, [sp, #68]	; 0x44
   13c08:	ldr	r2, [sp, #32]
   13c0c:	str	r2, [sp, #36]	; 0x24
   13c10:	str	r9, [sp, #72]	; 0x48
   13c14:	mov	r9, r3
   13c18:	mov	r4, #39	; 0x27
   13c1c:	mov	r3, #0
   13c20:	b	13700 <_obstack_memory_used@@Base+0xb58>
   13c24:	mov	r3, #0
   13c28:	str	r3, [sp, #44]	; 0x2c
   13c2c:	ldr	r7, [sp, #76]	; 0x4c
   13c30:	cmp	r7, #1
   13c34:	bne	13c6c <_obstack_memory_used@@Base+0x10c4>
   13c38:	bl	10ec4 <__ctype_b_loc@plt>
   13c3c:	ldr	r2, [r0]
   13c40:	lsl	r3, r4, #1
   13c44:	ldrh	r5, [r2, r3]
   13c48:	ubfx	r5, r5, #14, #1
   13c4c:	mov	ip, r7
   13c50:	eor	r3, r5, #1
   13c54:	ldr	r2, [sp, #28]
   13c58:	and	r3, r3, r2
   13c5c:	ands	r3, r3, #255	; 0xff
   13c60:	beq	136b4 <_obstack_memory_used@@Base+0xb0c>
   13c64:	mov	r5, #0
   13c68:	b	13ec8 <_obstack_memory_used@@Base+0x1320>
   13c6c:	mov	r2, #0
   13c70:	mov	r3, #0
   13c74:	strd	r2, [sp, #104]	; 0x68
   13c78:	ldr	r3, [sp, #24]
   13c7c:	cmn	r3, #1
   13c80:	beq	13ca4 <_obstack_memory_used@@Base+0x10fc>
   13c84:	mov	r3, #0
   13c88:	str	r4, [sp, #88]	; 0x58
   13c8c:	str	fp, [sp, #92]	; 0x5c
   13c90:	str	r8, [sp, #56]	; 0x38
   13c94:	mov	r8, r3
   13c98:	str	r9, [sp, #84]	; 0x54
   13c9c:	ldr	r9, [sp, #48]	; 0x30
   13ca0:	b	13df0 <_obstack_memory_used@@Base+0x1248>
   13ca4:	ldr	r0, [sp, #48]	; 0x30
   13ca8:	bl	10edc <strlen@plt>
   13cac:	str	r0, [sp, #24]
   13cb0:	b	13c84 <_obstack_memory_used@@Base+0x10dc>
   13cb4:	mov	r1, fp
   13cb8:	ldr	r4, [sp, #88]	; 0x58
   13cbc:	mov	r2, r8
   13cc0:	mov	ip, r8
   13cc4:	ldr	fp, [sp, #92]	; 0x5c
   13cc8:	ldr	r8, [sp, #56]	; 0x38
   13ccc:	ldr	r9, [sp, #84]	; 0x54
   13cd0:	ldr	r0, [sp, #24]
   13cd4:	cmp	r7, r0
   13cd8:	bcs	13e90 <_obstack_memory_used@@Base+0x12e8>
   13cdc:	ldrb	r3, [r1]
   13ce0:	cmp	r3, #0
   13ce4:	beq	13e98 <_obstack_memory_used@@Base+0x12f0>
   13ce8:	mov	r3, r1
   13cec:	add	r2, r2, #1
   13cf0:	add	r1, r6, r2
   13cf4:	cmp	r0, r1
   13cf8:	bls	13ea0 <_obstack_memory_used@@Base+0x12f8>
   13cfc:	ldrb	r1, [r3, #1]!
   13d00:	cmp	r1, #0
   13d04:	bne	13cec <_obstack_memory_used@@Base+0x1144>
   13d08:	mov	ip, r2
   13d0c:	mov	r5, #0
   13d10:	b	13ec0 <_obstack_memory_used@@Base+0x1318>
   13d14:	ldr	r3, [sp, #56]	; 0x38
   13d18:	str	r3, [sp, #64]	; 0x40
   13d1c:	ldr	r8, [sp, #84]	; 0x54
   13d20:	mov	r7, #2
   13d24:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   13d28:	cmp	r2, r7
   13d2c:	beq	13dcc <_obstack_memory_used@@Base+0x1224>
   13d30:	ldrb	r3, [r2], #1
   13d34:	sub	r3, r3, #91	; 0x5b
   13d38:	cmp	r3, #33	; 0x21
   13d3c:	ldrls	pc, [pc, r3, lsl #2]
   13d40:	b	13d28 <_obstack_memory_used@@Base+0x1180>
   13d44:	andeq	r3, r1, r4, lsl sp
   13d48:	andeq	r3, r1, r4, lsl sp
   13d4c:	andeq	r3, r1, r8, lsr #26
   13d50:	andeq	r3, r1, r4, lsl sp
   13d54:	andeq	r3, r1, r8, lsr #26
   13d58:	andeq	r3, r1, r4, lsl sp
   13d5c:	andeq	r3, r1, r8, lsr #26
   13d60:	andeq	r3, r1, r8, lsr #26
   13d64:	andeq	r3, r1, r8, lsr #26
   13d68:	andeq	r3, r1, r8, lsr #26
   13d6c:	andeq	r3, r1, r8, lsr #26
   13d70:	andeq	r3, r1, r8, lsr #26
   13d74:	andeq	r3, r1, r8, lsr #26
   13d78:	andeq	r3, r1, r8, lsr #26
   13d7c:	andeq	r3, r1, r8, lsr #26
   13d80:	andeq	r3, r1, r8, lsr #26
   13d84:	andeq	r3, r1, r8, lsr #26
   13d88:	andeq	r3, r1, r8, lsr #26
   13d8c:	andeq	r3, r1, r8, lsr #26
   13d90:	andeq	r3, r1, r8, lsr #26
   13d94:	andeq	r3, r1, r8, lsr #26
   13d98:	andeq	r3, r1, r8, lsr #26
   13d9c:	andeq	r3, r1, r8, lsr #26
   13da0:	andeq	r3, r1, r8, lsr #26
   13da4:	andeq	r3, r1, r8, lsr #26
   13da8:	andeq	r3, r1, r8, lsr #26
   13dac:	andeq	r3, r1, r8, lsr #26
   13db0:	andeq	r3, r1, r8, lsr #26
   13db4:	andeq	r3, r1, r8, lsr #26
   13db8:	andeq	r3, r1, r8, lsr #26
   13dbc:	andeq	r3, r1, r8, lsr #26
   13dc0:	andeq	r3, r1, r8, lsr #26
   13dc4:	andeq	r3, r1, r8, lsr #26
   13dc8:	andeq	r3, r1, r4, lsl sp
   13dcc:	ldr	r0, [sp, #100]	; 0x64
   13dd0:	bl	10df8 <iswprint@plt>
   13dd4:	cmp	r0, #0
   13dd8:	moveq	r5, #0
   13ddc:	add	r8, r8, r4
   13de0:	add	r0, sp, #104	; 0x68
   13de4:	bl	10d98 <mbsinit@plt>
   13de8:	cmp	r0, #0
   13dec:	bne	13e5c <_obstack_memory_used@@Base+0x12b4>
   13df0:	add	r7, r6, r8
   13df4:	add	fp, r9, r7
   13df8:	add	r3, sp, #104	; 0x68
   13dfc:	ldr	r2, [sp, #24]
   13e00:	sub	r2, r2, r7
   13e04:	mov	r1, fp
   13e08:	add	r0, sp, #100	; 0x64
   13e0c:	bl	15b60 <_obstack_memory_used@@Base+0x2fb8>
   13e10:	subs	r4, r0, #0
   13e14:	beq	13eac <_obstack_memory_used@@Base+0x1304>
   13e18:	cmn	r4, #1
   13e1c:	beq	13e74 <_obstack_memory_used@@Base+0x12cc>
   13e20:	cmn	r4, #2
   13e24:	beq	13cb4 <_obstack_memory_used@@Base+0x110c>
   13e28:	ldr	r3, [sp, #32]
   13e2c:	cmp	sl, #2
   13e30:	movne	r3, #0
   13e34:	andeq	r3, r3, #1
   13e38:	cmp	r3, #0
   13e3c:	beq	13dcc <_obstack_memory_used@@Base+0x1224>
   13e40:	cmp	r4, #1
   13e44:	bls	13dcc <_obstack_memory_used@@Base+0x1224>
   13e48:	add	r2, r7, #1
   13e4c:	add	r2, r9, r2
   13e50:	add	r3, r9, r4
   13e54:	add	r7, r3, r7
   13e58:	b	13d30 <_obstack_memory_used@@Base+0x1188>
   13e5c:	ldr	r4, [sp, #88]	; 0x58
   13e60:	mov	ip, r8
   13e64:	ldr	fp, [sp, #92]	; 0x5c
   13e68:	ldr	r8, [sp, #56]	; 0x38
   13e6c:	ldr	r9, [sp, #84]	; 0x54
   13e70:	b	13ec0 <_obstack_memory_used@@Base+0x1318>
   13e74:	ldr	r4, [sp, #88]	; 0x58
   13e78:	mov	ip, r8
   13e7c:	ldr	fp, [sp, #92]	; 0x5c
   13e80:	ldr	r8, [sp, #56]	; 0x38
   13e84:	ldr	r9, [sp, #84]	; 0x54
   13e88:	mov	r5, #0
   13e8c:	b	13ec0 <_obstack_memory_used@@Base+0x1318>
   13e90:	mov	r5, #0
   13e94:	b	13ec0 <_obstack_memory_used@@Base+0x1318>
   13e98:	mov	r5, #0
   13e9c:	b	13ec0 <_obstack_memory_used@@Base+0x1318>
   13ea0:	mov	ip, r2
   13ea4:	mov	r5, #0
   13ea8:	b	13ec0 <_obstack_memory_used@@Base+0x1318>
   13eac:	ldr	r4, [sp, #88]	; 0x58
   13eb0:	mov	ip, r8
   13eb4:	ldr	fp, [sp, #92]	; 0x5c
   13eb8:	ldr	r8, [sp, #56]	; 0x38
   13ebc:	ldr	r9, [sp, #84]	; 0x54
   13ec0:	cmp	ip, #1
   13ec4:	bls	13c50 <_obstack_memory_used@@Base+0x10a8>
   13ec8:	add	lr, r6, ip
   13ecc:	ldr	r3, [sp, #48]	; 0x30
   13ed0:	add	r1, r3, r6
   13ed4:	mov	r3, #0
   13ed8:	eor	r0, r5, #1
   13edc:	ldr	r2, [sp, #28]
   13ee0:	and	r0, r0, r2
   13ee4:	uxtb	r0, r0
   13ee8:	str	r0, [sp, #56]	; 0x38
   13eec:	mov	r7, #92	; 0x5c
   13ef0:	ldr	ip, [sp, #36]	; 0x24
   13ef4:	str	r5, [sp, #84]	; 0x54
   13ef8:	ldr	r2, [sp, #44]	; 0x2c
   13efc:	b	13f6c <_obstack_memory_used@@Base+0x13c4>
   13f00:	cmp	r2, #0
   13f04:	beq	13f14 <_obstack_memory_used@@Base+0x136c>
   13f08:	cmp	r9, fp
   13f0c:	strbhi	r7, [r8, fp]
   13f10:	add	fp, fp, #1
   13f14:	add	r5, r6, #1
   13f18:	cmp	r5, lr
   13f1c:	bcs	14028 <_obstack_memory_used@@Base+0x1480>
   13f20:	eor	r2, r3, #1
   13f24:	and	r2, r2, ip
   13f28:	ands	r2, r2, #255	; 0xff
   13f2c:	beq	14044 <_obstack_memory_used@@Base+0x149c>
   13f30:	cmp	r9, fp
   13f34:	movhi	r2, #39	; 0x27
   13f38:	strbhi	r2, [r8, fp]
   13f3c:	add	r2, fp, #1
   13f40:	cmp	r9, r2
   13f44:	movhi	ip, #39	; 0x27
   13f48:	strbhi	ip, [r8, r2]
   13f4c:	add	fp, fp, #2
   13f50:	ldr	ip, [sp, #56]	; 0x38
   13f54:	mov	r2, ip
   13f58:	mov	r6, r5
   13f5c:	cmp	r9, fp
   13f60:	strbhi	r4, [r8, fp]
   13f64:	add	fp, fp, #1
   13f68:	ldrb	r4, [r1, #1]!
   13f6c:	cmp	r0, #0
   13f70:	beq	13f00 <_obstack_memory_used@@Base+0x1358>
   13f74:	ldr	r3, [sp, #32]
   13f78:	cmp	r3, #0
   13f7c:	bne	14210 <_obstack_memory_used@@Base+0x1668>
   13f80:	eor	r3, ip, #1
   13f84:	cmp	sl, #2
   13f88:	movne	r3, #0
   13f8c:	andeq	r3, r3, #1
   13f90:	cmp	r3, #0
   13f94:	beq	13fcc <_obstack_memory_used@@Base+0x1424>
   13f98:	cmp	r9, fp
   13f9c:	movhi	ip, #39	; 0x27
   13fa0:	strbhi	ip, [r8, fp]
   13fa4:	add	ip, fp, #1
   13fa8:	cmp	r9, ip
   13fac:	movhi	r5, #36	; 0x24
   13fb0:	strbhi	r5, [r8, ip]
   13fb4:	add	ip, fp, #2
   13fb8:	cmp	r9, ip
   13fbc:	movhi	r5, #39	; 0x27
   13fc0:	strbhi	r5, [r8, ip]
   13fc4:	add	fp, fp, #3
   13fc8:	mov	ip, r3
   13fcc:	cmp	r9, fp
   13fd0:	strbhi	r7, [r8, fp]
   13fd4:	add	r3, fp, #1
   13fd8:	cmp	r9, r3
   13fdc:	bls	13fec <_obstack_memory_used@@Base+0x1444>
   13fe0:	lsr	r5, r4, #6
   13fe4:	add	r5, r5, #48	; 0x30
   13fe8:	strb	r5, [r8, r3]
   13fec:	add	r3, fp, #2
   13ff0:	cmp	r9, r3
   13ff4:	bls	14004 <_obstack_memory_used@@Base+0x145c>
   13ff8:	ubfx	r5, r4, #3, #3
   13ffc:	add	r5, r5, #48	; 0x30
   14000:	strb	r5, [r8, r3]
   14004:	add	fp, fp, #3
   14008:	and	r4, r4, #7
   1400c:	add	r4, r4, #48	; 0x30
   14010:	add	r5, r6, #1
   14014:	cmp	r5, lr
   14018:	bcs	14034 <_obstack_memory_used@@Base+0x148c>
   1401c:	ldr	r3, [sp, #56]	; 0x38
   14020:	mov	r6, r5
   14024:	b	13f5c <_obstack_memory_used@@Base+0x13b4>
   14028:	str	ip, [sp, #36]	; 0x24
   1402c:	ldr	r5, [sp, #84]	; 0x54
   14030:	b	13a60 <_obstack_memory_used@@Base+0xeb8>
   14034:	str	ip, [sp, #36]	; 0x24
   14038:	ldr	r5, [sp, #84]	; 0x54
   1403c:	mov	r3, r0
   14040:	b	13a60 <_obstack_memory_used@@Base+0xeb8>
   14044:	mov	r6, r5
   14048:	b	13f5c <_obstack_memory_used@@Base+0x13b4>
   1404c:	ldr	r3, [sp, #44]	; 0x2c
   14050:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   14054:	mov	r5, #0
   14058:	mov	r3, r5
   1405c:	mov	r4, #63	; 0x3f
   14060:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   14064:	mov	r5, #0
   14068:	mov	r3, r5
   1406c:	mov	r4, #63	; 0x3f
   14070:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   14074:	mov	r5, #0
   14078:	mov	r3, r5
   1407c:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   14080:	mov	r5, #0
   14084:	mov	r3, r5
   14088:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   1408c:	ldr	r5, [sp, #44]	; 0x2c
   14090:	ldr	r3, [sp, #32]
   14094:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   14098:	ldr	r5, [sp, #44]	; 0x2c
   1409c:	mov	r3, #0
   140a0:	str	r3, [sp, #44]	; 0x2c
   140a4:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   140a8:	mov	r4, r3
   140ac:	mov	r5, #0
   140b0:	b	1370c <_obstack_memory_used@@Base+0xb64>
   140b4:	mov	r5, #0
   140b8:	mov	r4, #97	; 0x61
   140bc:	b	1370c <_obstack_memory_used@@Base+0xb64>
   140c0:	mov	r5, #0
   140c4:	mov	r3, r5
   140c8:	mov	r4, #92	; 0x5c
   140cc:	b	13a60 <_obstack_memory_used@@Base+0xeb8>
   140d0:	ldr	r3, [sp, #48]	; 0x30
   140d4:	ldrb	r5, [r3, r6]
   140d8:	adds	r5, r5, #0
   140dc:	movne	r5, #1
   140e0:	b	137b0 <_obstack_memory_used@@Base+0xc08>
   140e4:	cmp	sl, #2
   140e8:	movne	r3, #0
   140ec:	moveq	r3, #1
   140f0:	ldr	r1, [sp, #32]
   140f4:	cmp	fp, #0
   140f8:	andeq	r2, r3, r1
   140fc:	movne	r2, #0
   14100:	cmp	r2, #0
   14104:	bne	14224 <_obstack_memory_used@@Base+0x167c>
   14108:	eor	r2, r1, #1
   1410c:	uxtb	r2, r2
   14110:	and	r3, r3, r2
   14114:	ldr	r1, [sp, #68]	; 0x44
   14118:	ands	r3, r1, r3
   1411c:	beq	141b0 <_obstack_memory_used@@Base+0x1608>
   14120:	ldr	r2, [sp, #40]	; 0x28
   14124:	cmp	r2, #0
   14128:	bne	14160 <_obstack_memory_used@@Base+0x15b8>
   1412c:	ldr	r2, [sp, #72]	; 0x48
   14130:	adds	r2, r2, #0
   14134:	movne	r2, #1
   14138:	cmp	r9, #0
   1413c:	movne	r2, #0
   14140:	str	r2, [sp, #68]	; 0x44
   14144:	mov	sl, #2
   14148:	ldr	r1, [sp, #40]	; 0x28
   1414c:	str	r1, [sp, #32]
   14150:	cmp	r2, #0
   14154:	beq	141a4 <_obstack_memory_used@@Base+0x15fc>
   14158:	ldr	r9, [sp, #72]	; 0x48
   1415c:	b	12eb8 <_obstack_memory_used@@Base+0x310>
   14160:	ldr	r3, [sp, #168]	; 0xa8
   14164:	str	r3, [sp, #16]
   14168:	ldr	r3, [sp, #164]	; 0xa4
   1416c:	str	r3, [sp, #12]
   14170:	ldr	r3, [sp, #160]	; 0xa0
   14174:	str	r3, [sp, #8]
   14178:	ldr	r3, [sp, #156]	; 0x9c
   1417c:	str	r3, [sp, #4]
   14180:	mov	r3, #5
   14184:	str	r3, [sp]
   14188:	ldr	r3, [sp, #24]
   1418c:	ldr	r2, [sp, #48]	; 0x30
   14190:	ldr	r1, [sp, #72]	; 0x48
   14194:	ldr	r0, [sp, #64]	; 0x40
   14198:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   1419c:	mov	fp, r0
   141a0:	b	142c0 <_obstack_memory_used@@Base+0x1718>
   141a4:	mov	r8, r9
   141a8:	mov	r2, r3
   141ac:	b	141b4 <_obstack_memory_used@@Base+0x160c>
   141b0:	mov	r8, r9
   141b4:	ldr	r3, [sp, #60]	; 0x3c
   141b8:	cmp	r3, #0
   141bc:	moveq	r2, #0
   141c0:	andne	r2, r2, #1
   141c4:	cmp	r2, #0
   141c8:	beq	141f8 <_obstack_memory_used@@Base+0x1650>
   141cc:	mov	r2, r3
   141d0:	ldrb	r3, [r3]
   141d4:	cmp	r3, #0
   141d8:	beq	141f8 <_obstack_memory_used@@Base+0x1650>
   141dc:	ldr	r1, [sp, #64]	; 0x40
   141e0:	cmp	r8, fp
   141e4:	strbhi	r3, [r1, fp]
   141e8:	add	fp, fp, #1
   141ec:	ldrb	r3, [r2, #1]!
   141f0:	cmp	r3, #0
   141f4:	bne	141e0 <_obstack_memory_used@@Base+0x1638>
   141f8:	cmp	r8, fp
   141fc:	bls	142c0 <_obstack_memory_used@@Base+0x1718>
   14200:	mov	r3, #0
   14204:	ldr	r2, [sp, #64]	; 0x40
   14208:	strb	r3, [r2, fp]
   1420c:	b	142c0 <_obstack_memory_used@@Base+0x1718>
   14210:	mov	r8, r9
   14214:	mov	r7, sl
   14218:	ldr	r3, [sp, #32]
   1421c:	str	r3, [sp, #28]
   14220:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   14224:	mov	r8, r9
   14228:	mov	r7, #2
   1422c:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   14230:	mov	r8, r9
   14234:	mov	r7, sl
   14238:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   1423c:	mov	r8, r9
   14240:	mov	r7, sl
   14244:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   14248:	mov	r8, r9
   1424c:	mov	r7, sl
   14250:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   14254:	mov	r8, r9
   14258:	mov	r7, sl
   1425c:	b	14268 <_obstack_memory_used@@Base+0x16c0>
   14260:	mov	r8, r9
   14264:	mov	r7, sl
   14268:	ldr	r3, [sp, #28]
   1426c:	cmp	r7, #2
   14270:	movne	r3, #0
   14274:	andeq	r3, r3, #1
   14278:	cmp	r3, #0
   1427c:	movne	r7, #4
   14280:	ldr	r3, [sp, #168]	; 0xa8
   14284:	str	r3, [sp, #16]
   14288:	ldr	r3, [sp, #164]	; 0xa4
   1428c:	str	r3, [sp, #12]
   14290:	mov	r3, #0
   14294:	str	r3, [sp, #8]
   14298:	ldr	r3, [sp, #156]	; 0x9c
   1429c:	bic	r3, r3, #2
   142a0:	str	r3, [sp, #4]
   142a4:	str	r7, [sp]
   142a8:	ldr	r3, [sp, #24]
   142ac:	ldr	r2, [sp, #48]	; 0x30
   142b0:	mov	r1, r8
   142b4:	ldr	r0, [sp, #64]	; 0x40
   142b8:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   142bc:	mov	fp, r0
   142c0:	mov	r0, fp
   142c4:	add	sp, sp, #116	; 0x74
   142c8:	ldrd	r4, [sp]
   142cc:	ldrd	r6, [sp, #8]
   142d0:	ldrd	r8, [sp, #16]
   142d4:	ldrd	sl, [sp, #24]
   142d8:	add	sp, sp, #32
   142dc:	pop	{pc}		; (ldr pc, [sp], #4)
   142e0:	mov	r8, r9
   142e4:	mov	r7, sl
   142e8:	b	14280 <_obstack_memory_used@@Base+0x16d8>
   142ec:	add	fp, fp, #4
   142f0:	str	r3, [sp, #36]	; 0x24
   142f4:	mov	r5, #0
   142f8:	mov	r4, #48	; 0x30
   142fc:	b	136b4 <_obstack_memory_used@@Base+0xb0c>
   14300:	mov	r3, #1
   14304:	str	r3, [sp, #32]
   14308:	str	r3, [sp, #28]
   1430c:	str	r3, [sp, #52]	; 0x34
   14310:	movw	r3, #31016	; 0x7928
   14314:	movt	r3, #1
   14318:	str	r3, [sp, #60]	; 0x3c
   1431c:	mov	fp, #0
   14320:	mov	sl, #5
   14324:	b	12f18 <_obstack_memory_used@@Base+0x370>
   14328:	ldr	r3, [sp, #48]	; 0x30
   1432c:	ldrb	r4, [r3, r6]
   14330:	cmp	r4, #126	; 0x7e
   14334:	ldrls	pc, [pc, r4, lsl #2]
   14338:	b	13c24 <_obstack_memory_used@@Base+0x107c>
   1433c:	andeq	r3, r1, ip, lsr #7
   14340:	andeq	r3, r1, r4, lsr #24
   14344:	andeq	r3, r1, r4, lsr #24
   14348:	andeq	r3, r1, r4, lsr #24
   1434c:	andeq	r3, r1, r4, lsr #24
   14350:	andeq	r3, r1, r4, lsr #24
   14354:	andeq	r3, r1, r4, lsr #24
   14358:	strheq	r4, [r1], -r4	; <UNPREDICTABLE>
   1435c:	andeq	r3, r1, r0, asr r6
   14360:	strdeq	r3, [r1], -r4
   14364:			; <UNDEFINED> instruction: 0x00013ab0
   14368:	andeq	r3, r1, r8, lsl #20
   1436c:	andeq	r3, r1, r4, ror #12
   14370:	andeq	r3, r1, r8, ror r6
   14374:	andeq	r3, r1, r4, lsr #24
   14378:	andeq	r3, r1, r4, lsr #24
   1437c:	andeq	r3, r1, r4, lsr #24
   14380:	andeq	r3, r1, r4, lsr #24
   14384:	andeq	r3, r1, r4, lsr #24
   14388:	andeq	r3, r1, r4, lsr #24
   1438c:	andeq	r3, r1, r4, lsr #24
   14390:	andeq	r3, r1, r4, lsr #24
   14394:	andeq	r3, r1, r4, lsr #24
   14398:	andeq	r3, r1, r4, lsr #24
   1439c:	andeq	r3, r1, r4, lsr #24
   143a0:	andeq	r3, r1, r4, lsr #24
   143a4:	andeq	r3, r1, r4, lsr #24
   143a8:	andeq	r3, r1, r4, lsr #24
   143ac:	andeq	r3, r1, r4, lsr #24
   143b0:	andeq	r3, r1, r4, lsr #24
   143b4:	andeq	r3, r1, r4, lsr #24
   143b8:	andeq	r3, r1, r4, lsr #24
   143bc:	andeq	r3, r1, r8, lsr fp
   143c0:	andeq	r3, r1, r4, ror fp
   143c4:	andeq	r3, r1, r4, ror fp
   143c8:	andeq	r3, r1, ip, lsr #22
   143cc:	andeq	r3, r1, r4, ror fp
   143d0:	muleq	r1, r8, r0
   143d4:	andeq	r3, r1, r4, ror fp
   143d8:	andeq	r3, r1, r4, lsl #23
   143dc:	andeq	r3, r1, r4, ror fp
   143e0:	andeq	r3, r1, r4, ror fp
   143e4:	andeq	r3, r1, r4, ror fp
   143e8:	muleq	r1, r8, r0
   143ec:	muleq	r1, r8, r0
   143f0:	muleq	r1, r8, r0
   143f4:	muleq	r1, r8, r0
   143f8:	muleq	r1, r8, r0
   143fc:	muleq	r1, r8, r0
   14400:	muleq	r1, r8, r0
   14404:	muleq	r1, r8, r0
   14408:	muleq	r1, r8, r0
   1440c:	muleq	r1, r8, r0
   14410:	muleq	r1, r8, r0
   14414:	muleq	r1, r8, r0
   14418:	muleq	r1, r8, r0
   1441c:	muleq	r1, r8, r0
   14420:	muleq	r1, r8, r0
   14424:	muleq	r1, r8, r0
   14428:	andeq	r3, r1, r4, ror fp
   1442c:	andeq	r3, r1, r4, ror fp
   14430:	andeq	r3, r1, r4, ror fp
   14434:	andeq	r3, r1, r4, ror fp
   14438:	andeq	r3, r1, r4, ror #9
   1443c:	andeq	r3, r1, r4, lsr #24
   14440:	muleq	r1, r8, r0
   14444:	muleq	r1, r8, r0
   14448:	muleq	r1, r8, r0
   1444c:	muleq	r1, r8, r0
   14450:	muleq	r1, r8, r0
   14454:	muleq	r1, r8, r0
   14458:	muleq	r1, r8, r0
   1445c:	muleq	r1, r8, r0
   14460:	muleq	r1, r8, r0
   14464:	muleq	r1, r8, r0
   14468:	muleq	r1, r8, r0
   1446c:	muleq	r1, r8, r0
   14470:	muleq	r1, r8, r0
   14474:	muleq	r1, r8, r0
   14478:	muleq	r1, r8, r0
   1447c:	muleq	r1, r8, r0
   14480:	muleq	r1, r8, r0
   14484:	muleq	r1, r8, r0
   14488:	muleq	r1, r8, r0
   1448c:	muleq	r1, r8, r0
   14490:	muleq	r1, r8, r0
   14494:	muleq	r1, r8, r0
   14498:	muleq	r1, r8, r0
   1449c:	muleq	r1, r8, r0
   144a0:	muleq	r1, r8, r0
   144a4:	muleq	r1, r8, r0
   144a8:	andeq	r3, r1, r4, ror fp
   144ac:	andeq	r3, r1, ip, lsl sl
   144b0:	muleq	r1, r8, r0
   144b4:	andeq	r3, r1, r4, ror fp
   144b8:	muleq	r1, r8, r0
   144bc:	andeq	r3, r1, r4, ror fp
   144c0:	muleq	r1, r8, r0
   144c4:	muleq	r1, r8, r0
   144c8:	muleq	r1, r8, r0
   144cc:	muleq	r1, r8, r0
   144d0:	muleq	r1, r8, r0
   144d4:	muleq	r1, r8, r0
   144d8:	muleq	r1, r8, r0
   144dc:	muleq	r1, r8, r0
   144e0:	muleq	r1, r8, r0
   144e4:	muleq	r1, r8, r0
   144e8:	muleq	r1, r8, r0
   144ec:	muleq	r1, r8, r0
   144f0:	muleq	r1, r8, r0
   144f4:	muleq	r1, r8, r0
   144f8:	muleq	r1, r8, r0
   144fc:	muleq	r1, r8, r0
   14500:	muleq	r1, r8, r0
   14504:	muleq	r1, r8, r0
   14508:	muleq	r1, r8, r0
   1450c:	muleq	r1, r8, r0
   14510:	muleq	r1, r8, r0
   14514:	muleq	r1, r8, r0
   14518:	muleq	r1, r8, r0
   1451c:	muleq	r1, r8, r0
   14520:	muleq	r1, r8, r0
   14524:	muleq	r1, r8, r0
   14528:	ldrdeq	r3, [r1], -ip
   1452c:	andeq	r3, r1, r4, ror fp
   14530:	ldrdeq	r3, [r1], -ip
   14534:	andeq	r3, r1, ip, lsr #22
   14538:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1453c:	strd	r6, [sp, #8]
   14540:	strd	r8, [sp, #16]
   14544:	strd	sl, [sp, #24]
   14548:	str	lr, [sp, #32]
   1454c:	sub	sp, sp, #52	; 0x34
   14550:	mov	r5, r0
   14554:	str	r1, [sp, #24]
   14558:	str	r2, [sp, #28]
   1455c:	mov	r4, r3
   14560:	bl	10ee8 <__errno_location@plt>
   14564:	str	r0, [sp, #32]
   14568:	ldr	r3, [r0]
   1456c:	str	r3, [sp, #36]	; 0x24
   14570:	movw	r3, #33008	; 0x80f0
   14574:	movt	r3, #2
   14578:	ldr	r6, [r3]
   1457c:	cmn	r5, #-2147483647	; 0x80000001
   14580:	movne	r3, #0
   14584:	moveq	r3, #1
   14588:	orrs	r3, r3, r5, lsr #31
   1458c:	bne	146f0 <_obstack_memory_used@@Base+0x1b48>
   14590:	movw	r3, #33008	; 0x80f0
   14594:	movt	r3, #2
   14598:	ldr	r2, [r3, #4]
   1459c:	cmp	r2, r5
   145a0:	bgt	14610 <_obstack_memory_used@@Base+0x1a68>
   145a4:	str	r2, [sp, #44]	; 0x2c
   145a8:	add	r3, r3, #8
   145ac:	cmp	r6, r3
   145b0:	beq	146f4 <_obstack_memory_used@@Base+0x1b4c>
   145b4:	sub	r2, r5, r2
   145b8:	mov	r3, #8
   145bc:	str	r3, [sp]
   145c0:	mvn	r3, #-2147483648	; 0x80000000
   145c4:	add	r2, r2, #1
   145c8:	add	r1, sp, #44	; 0x2c
   145cc:	mov	r0, r6
   145d0:	bl	156f8 <_obstack_memory_used@@Base+0x2b50>
   145d4:	mov	r6, r0
   145d8:	movw	r3, #33008	; 0x80f0
   145dc:	movt	r3, #2
   145e0:	str	r0, [r3]
   145e4:	movw	r7, #33008	; 0x80f0
   145e8:	movt	r7, #2
   145ec:	ldr	r0, [r7, #4]
   145f0:	ldr	r2, [sp, #44]	; 0x2c
   145f4:	sub	r2, r2, r0
   145f8:	lsl	r2, r2, #3
   145fc:	mov	r1, #0
   14600:	add	r0, r6, r0, lsl #3
   14604:	bl	10f00 <memset@plt>
   14608:	ldr	r3, [sp, #44]	; 0x2c
   1460c:	str	r3, [r7, #4]
   14610:	add	fp, r6, r5, lsl #3
   14614:	ldr	r8, [r6, r5, lsl #3]
   14618:	ldr	r7, [fp, #4]
   1461c:	ldr	r3, [r4, #4]
   14620:	orr	r9, r3, #1
   14624:	add	sl, r4, #8
   14628:	ldr	r3, [r4, #44]	; 0x2c
   1462c:	str	r3, [sp, #16]
   14630:	ldr	r3, [r4, #40]	; 0x28
   14634:	str	r3, [sp, #12]
   14638:	str	sl, [sp, #8]
   1463c:	str	r9, [sp, #4]
   14640:	ldr	r3, [r4]
   14644:	str	r3, [sp]
   14648:	ldr	r3, [sp, #28]
   1464c:	ldr	r2, [sp, #24]
   14650:	mov	r1, r8
   14654:	mov	r0, r7
   14658:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   1465c:	cmp	r8, r0
   14660:	bhi	146c4 <_obstack_memory_used@@Base+0x1b1c>
   14664:	add	r8, r0, #1
   14668:	str	r8, [r6, r5, lsl #3]
   1466c:	movw	r3, #33164	; 0x818c
   14670:	movt	r3, #2
   14674:	cmp	r7, r3
   14678:	beq	14684 <_obstack_memory_used@@Base+0x1adc>
   1467c:	mov	r0, r7
   14680:	bl	124e0 <close@plt+0x1550>
   14684:	mov	r0, r8
   14688:	bl	154f4 <_obstack_memory_used@@Base+0x294c>
   1468c:	mov	r7, r0
   14690:	str	r0, [fp, #4]
   14694:	ldr	r3, [r4, #44]	; 0x2c
   14698:	str	r3, [sp, #16]
   1469c:	ldr	r3, [r4, #40]	; 0x28
   146a0:	str	r3, [sp, #12]
   146a4:	str	sl, [sp, #8]
   146a8:	str	r9, [sp, #4]
   146ac:	ldr	r3, [r4]
   146b0:	str	r3, [sp]
   146b4:	ldr	r3, [sp, #28]
   146b8:	ldr	r2, [sp, #24]
   146bc:	mov	r1, r8
   146c0:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   146c4:	ldr	r3, [sp, #32]
   146c8:	ldr	r2, [sp, #36]	; 0x24
   146cc:	str	r2, [r3]
   146d0:	mov	r0, r7
   146d4:	add	sp, sp, #52	; 0x34
   146d8:	ldrd	r4, [sp]
   146dc:	ldrd	r6, [sp, #8]
   146e0:	ldrd	r8, [sp, #16]
   146e4:	ldrd	sl, [sp, #24]
   146e8:	add	sp, sp, #32
   146ec:	pop	{pc}		; (ldr pc, [sp], #4)
   146f0:	bl	10f84 <abort@plt>
   146f4:	sub	r2, r5, r2
   146f8:	mov	r3, #8
   146fc:	str	r3, [sp]
   14700:	mvn	r3, #-2147483648	; 0x80000000
   14704:	add	r2, r2, #1
   14708:	add	r1, sp, #44	; 0x2c
   1470c:	mov	r0, #0
   14710:	bl	156f8 <_obstack_memory_used@@Base+0x2b50>
   14714:	mov	r6, r0
   14718:	movw	r3, #33008	; 0x80f0
   1471c:	movt	r3, #2
   14720:	str	r0, [r3]
   14724:	ldrd	r2, [r3, #8]
   14728:	strd	r2, [r0]
   1472c:	b	145e4 <_obstack_memory_used@@Base+0x1a3c>
   14730:	strd	r4, [sp, #-16]!
   14734:	str	r6, [sp, #8]
   14738:	str	lr, [sp, #12]
   1473c:	mov	r4, r0
   14740:	bl	10ee8 <__errno_location@plt>
   14744:	mov	r5, r0
   14748:	ldr	r6, [r0]
   1474c:	cmp	r4, #0
   14750:	ldr	r3, [pc, #32]	; 14778 <_obstack_memory_used@@Base+0x1bd0>
   14754:	moveq	r4, r3
   14758:	mov	r1, #48	; 0x30
   1475c:	mov	r0, r4
   14760:	bl	15868 <_obstack_memory_used@@Base+0x2cc0>
   14764:	str	r6, [r5]
   14768:	ldrd	r4, [sp]
   1476c:	ldr	r6, [sp, #8]
   14770:	add	sp, sp, #12
   14774:	pop	{pc}		; (ldr pc, [sp], #4)
   14778:	andeq	r8, r2, ip, lsl #5
   1477c:	subs	r3, r0, #0
   14780:	ldr	r2, [pc, #8]	; 14790 <_obstack_memory_used@@Base+0x1be8>
   14784:	moveq	r3, r2
   14788:	ldr	r0, [r3]
   1478c:	bx	lr
   14790:	andeq	r8, r2, ip, lsl #5
   14794:	subs	r3, r0, #0
   14798:	ldr	r2, [pc, #8]	; 147a8 <_obstack_memory_used@@Base+0x1c00>
   1479c:	moveq	r3, r2
   147a0:	str	r1, [r3]
   147a4:	bx	lr
   147a8:	andeq	r8, r2, ip, lsl #5
   147ac:	push	{lr}		; (str lr, [sp, #-4]!)
   147b0:	subs	r3, r0, #0
   147b4:	ldr	r0, [pc, #44]	; 147e8 <_obstack_memory_used@@Base+0x1c40>
   147b8:	moveq	r3, r0
   147bc:	add	r3, r3, #8
   147c0:	lsr	lr, r1, #5
   147c4:	and	r1, r1, #31
   147c8:	ldr	ip, [r3, lr, lsl #2]
   147cc:	lsr	r0, ip, r1
   147d0:	eor	r2, r2, r0
   147d4:	and	r2, r2, #1
   147d8:	eor	r1, ip, r2, lsl r1
   147dc:	str	r1, [r3, lr, lsl #2]
   147e0:	and	r0, r0, #1
   147e4:	pop	{pc}		; (ldr pc, [sp], #4)
   147e8:	andeq	r8, r2, ip, lsl #5
   147ec:	subs	r3, r0, #0
   147f0:	ldr	r2, [pc, #12]	; 14804 <_obstack_memory_used@@Base+0x1c5c>
   147f4:	moveq	r3, r2
   147f8:	ldr	r0, [r3, #4]
   147fc:	str	r1, [r3, #4]
   14800:	bx	lr
   14804:	andeq	r8, r2, ip, lsl #5
   14808:	subs	r3, r0, #0
   1480c:	ldr	r0, [pc, #44]	; 14840 <_obstack_memory_used@@Base+0x1c98>
   14810:	moveq	r3, r0
   14814:	mov	r0, #10
   14818:	str	r0, [r3]
   1481c:	cmp	r2, #0
   14820:	cmpne	r1, #0
   14824:	beq	14834 <_obstack_memory_used@@Base+0x1c8c>
   14828:	str	r1, [r3, #40]	; 0x28
   1482c:	str	r2, [r3, #44]	; 0x2c
   14830:	bx	lr
   14834:	str	r4, [sp, #-8]!
   14838:	str	lr, [sp, #4]
   1483c:	bl	10f84 <abort@plt>
   14840:	andeq	r8, r2, ip, lsl #5
   14844:	strd	r4, [sp, #-32]!	; 0xffffffe0
   14848:	strd	r6, [sp, #8]
   1484c:	strd	r8, [sp, #16]
   14850:	str	sl, [sp, #24]
   14854:	str	lr, [sp, #28]
   14858:	sub	sp, sp, #24
   1485c:	mov	r7, r0
   14860:	mov	r8, r1
   14864:	mov	r9, r2
   14868:	mov	sl, r3
   1486c:	ldr	r4, [sp, #56]	; 0x38
   14870:	cmp	r4, #0
   14874:	ldr	r3, [pc, #104]	; 148e4 <_obstack_memory_used@@Base+0x1d3c>
   14878:	moveq	r4, r3
   1487c:	bl	10ee8 <__errno_location@plt>
   14880:	mov	r5, r0
   14884:	ldr	r6, [r0]
   14888:	ldr	r3, [r4, #44]	; 0x2c
   1488c:	str	r3, [sp, #16]
   14890:	ldr	r3, [r4, #40]	; 0x28
   14894:	str	r3, [sp, #12]
   14898:	add	r3, r4, #8
   1489c:	str	r3, [sp, #8]
   148a0:	ldr	r3, [r4, #4]
   148a4:	str	r3, [sp, #4]
   148a8:	ldr	r3, [r4]
   148ac:	str	r3, [sp]
   148b0:	mov	r3, sl
   148b4:	mov	r2, r9
   148b8:	mov	r1, r8
   148bc:	mov	r0, r7
   148c0:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   148c4:	str	r6, [r5]
   148c8:	add	sp, sp, #24
   148cc:	ldrd	r4, [sp]
   148d0:	ldrd	r6, [sp, #8]
   148d4:	ldrd	r8, [sp, #16]
   148d8:	ldr	sl, [sp, #24]
   148dc:	add	sp, sp, #28
   148e0:	pop	{pc}		; (ldr pc, [sp], #4)
   148e4:	andeq	r8, r2, ip, lsl #5
   148e8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   148ec:	strd	r6, [sp, #8]
   148f0:	strd	r8, [sp, #16]
   148f4:	strd	sl, [sp, #24]
   148f8:	str	lr, [sp, #32]
   148fc:	sub	sp, sp, #44	; 0x2c
   14900:	mov	r8, r0
   14904:	mov	sl, r1
   14908:	mov	r6, r2
   1490c:	subs	r4, r3, #0
   14910:	ldr	r3, [pc, #200]	; 149e0 <_obstack_memory_used@@Base+0x1e38>
   14914:	moveq	r4, r3
   14918:	bl	10ee8 <__errno_location@plt>
   1491c:	mov	r7, r0
   14920:	ldr	fp, [r0]
   14924:	ldr	r5, [r4, #4]
   14928:	cmp	r6, #0
   1492c:	orreq	r5, r5, #1
   14930:	add	r9, r4, #8
   14934:	ldr	r3, [r4, #44]	; 0x2c
   14938:	str	r3, [sp, #16]
   1493c:	ldr	r3, [r4, #40]	; 0x28
   14940:	str	r3, [sp, #12]
   14944:	str	r9, [sp, #8]
   14948:	str	r5, [sp, #4]
   1494c:	ldr	r3, [r4]
   14950:	str	r3, [sp]
   14954:	str	sl, [sp, #36]	; 0x24
   14958:	mov	r3, sl
   1495c:	str	r8, [sp, #32]
   14960:	mov	r2, r8
   14964:	mov	r1, #0
   14968:	mov	r0, r1
   1496c:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   14970:	mov	sl, r0
   14974:	add	r8, r0, #1
   14978:	mov	r0, r8
   1497c:	bl	154f4 <_obstack_memory_used@@Base+0x294c>
   14980:	str	r0, [sp, #28]
   14984:	ldr	r3, [r4, #44]	; 0x2c
   14988:	str	r3, [sp, #16]
   1498c:	ldr	r3, [r4, #40]	; 0x28
   14990:	str	r3, [sp, #12]
   14994:	str	r9, [sp, #8]
   14998:	str	r5, [sp, #4]
   1499c:	ldr	r3, [r4]
   149a0:	str	r3, [sp]
   149a4:	ldr	r3, [sp, #36]	; 0x24
   149a8:	ldr	r2, [sp, #32]
   149ac:	mov	r1, r8
   149b0:	bl	12e40 <_obstack_memory_used@@Base+0x298>
   149b4:	str	fp, [r7]
   149b8:	cmp	r6, #0
   149bc:	strne	sl, [r6]
   149c0:	ldr	r0, [sp, #28]
   149c4:	add	sp, sp, #44	; 0x2c
   149c8:	ldrd	r4, [sp]
   149cc:	ldrd	r6, [sp, #8]
   149d0:	ldrd	r8, [sp, #16]
   149d4:	ldrd	sl, [sp, #24]
   149d8:	add	sp, sp, #32
   149dc:	pop	{pc}		; (ldr pc, [sp], #4)
   149e0:	andeq	r8, r2, ip, lsl #5
   149e4:	str	r4, [sp, #-8]!
   149e8:	str	lr, [sp, #4]
   149ec:	mov	r3, r2
   149f0:	mov	r2, #0
   149f4:	bl	148e8 <_obstack_memory_used@@Base+0x1d40>
   149f8:	ldr	r4, [sp]
   149fc:	add	sp, sp, #4
   14a00:	pop	{pc}		; (ldr pc, [sp], #4)
   14a04:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14a08:	strd	r6, [sp, #8]
   14a0c:	str	r8, [sp, #16]
   14a10:	str	lr, [sp, #20]
   14a14:	movw	r3, #33008	; 0x80f0
   14a18:	movt	r3, #2
   14a1c:	ldr	r7, [r3]
   14a20:	ldr	r3, [r3, #4]
   14a24:	cmp	r3, #1
   14a28:	ble	14a54 <_obstack_memory_used@@Base+0x1eac>
   14a2c:	mov	r4, #1
   14a30:	add	r6, r7, #4
   14a34:	movw	r5, #33008	; 0x80f0
   14a38:	movt	r5, #2
   14a3c:	ldr	r0, [r6, r4, lsl #3]
   14a40:	bl	124e0 <close@plt+0x1550>
   14a44:	add	r4, r4, #1
   14a48:	ldr	r3, [r5, #4]
   14a4c:	cmp	r3, r4
   14a50:	bgt	14a3c <_obstack_memory_used@@Base+0x1e94>
   14a54:	ldr	r0, [r7, #4]
   14a58:	movw	r3, #33164	; 0x818c
   14a5c:	movt	r3, #2
   14a60:	cmp	r0, r3
   14a64:	beq	14a88 <_obstack_memory_used@@Base+0x1ee0>
   14a68:	bl	124e0 <close@plt+0x1550>
   14a6c:	movw	r3, #33008	; 0x80f0
   14a70:	movt	r3, #2
   14a74:	mov	r2, #256	; 0x100
   14a78:	str	r2, [r3, #8]
   14a7c:	movw	r2, #33164	; 0x818c
   14a80:	movt	r2, #2
   14a84:	str	r2, [r3, #12]
   14a88:	ldr	r3, [pc, #64]	; 14ad0 <_obstack_memory_used@@Base+0x1f28>
   14a8c:	cmp	r7, r3
   14a90:	beq	14aac <_obstack_memory_used@@Base+0x1f04>
   14a94:	mov	r0, r7
   14a98:	bl	124e0 <close@plt+0x1550>
   14a9c:	movw	r3, #33008	; 0x80f0
   14aa0:	movt	r3, #2
   14aa4:	add	r2, r3, #8
   14aa8:	str	r2, [r3]
   14aac:	movw	r3, #33008	; 0x80f0
   14ab0:	movt	r3, #2
   14ab4:	mov	r2, #1
   14ab8:	str	r2, [r3, #4]
   14abc:	ldrd	r4, [sp]
   14ac0:	ldrd	r6, [sp, #8]
   14ac4:	ldr	r8, [sp, #16]
   14ac8:	add	sp, sp, #20
   14acc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ad0:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   14ad4:	str	r4, [sp, #-8]!
   14ad8:	str	lr, [sp, #4]
   14adc:	ldr	r3, [pc, #16]	; 14af4 <_obstack_memory_used@@Base+0x1f4c>
   14ae0:	mvn	r2, #0
   14ae4:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14ae8:	ldr	r4, [sp]
   14aec:	add	sp, sp, #4
   14af0:	pop	{pc}		; (ldr pc, [sp], #4)
   14af4:	andeq	r8, r2, ip, lsl #5
   14af8:	str	r4, [sp, #-8]!
   14afc:	str	lr, [sp, #4]
   14b00:	ldr	r3, [pc, #12]	; 14b14 <_obstack_memory_used@@Base+0x1f6c>
   14b04:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14b08:	ldr	r4, [sp]
   14b0c:	add	sp, sp, #4
   14b10:	pop	{pc}		; (ldr pc, [sp], #4)
   14b14:	andeq	r8, r2, ip, lsl #5
   14b18:	str	r4, [sp, #-8]!
   14b1c:	str	lr, [sp, #4]
   14b20:	mov	r1, r0
   14b24:	mov	r0, #0
   14b28:	bl	14ad4 <_obstack_memory_used@@Base+0x1f2c>
   14b2c:	ldr	r4, [sp]
   14b30:	add	sp, sp, #4
   14b34:	pop	{pc}		; (ldr pc, [sp], #4)
   14b38:	str	r4, [sp, #-8]!
   14b3c:	str	lr, [sp, #4]
   14b40:	mov	r2, r1
   14b44:	mov	r1, r0
   14b48:	mov	r0, #0
   14b4c:	bl	14af8 <_obstack_memory_used@@Base+0x1f50>
   14b50:	ldr	r4, [sp]
   14b54:	add	sp, sp, #4
   14b58:	pop	{pc}		; (ldr pc, [sp], #4)
   14b5c:	strd	r4, [sp, #-12]!
   14b60:	str	lr, [sp, #8]
   14b64:	sub	sp, sp, #52	; 0x34
   14b68:	mov	r4, r0
   14b6c:	mov	r5, r2
   14b70:	mov	r0, sp
   14b74:	bl	12cac <_obstack_memory_used@@Base+0x104>
   14b78:	mov	r3, sp
   14b7c:	mvn	r2, #0
   14b80:	mov	r1, r5
   14b84:	mov	r0, r4
   14b88:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14b8c:	add	sp, sp, #52	; 0x34
   14b90:	ldrd	r4, [sp]
   14b94:	add	sp, sp, #8
   14b98:	pop	{pc}		; (ldr pc, [sp], #4)
   14b9c:	strd	r4, [sp, #-16]!
   14ba0:	str	r6, [sp, #8]
   14ba4:	str	lr, [sp, #12]
   14ba8:	sub	sp, sp, #48	; 0x30
   14bac:	mov	r4, r0
   14bb0:	mov	r5, r2
   14bb4:	mov	r6, r3
   14bb8:	mov	r0, sp
   14bbc:	bl	12cac <_obstack_memory_used@@Base+0x104>
   14bc0:	mov	r3, sp
   14bc4:	mov	r2, r6
   14bc8:	mov	r1, r5
   14bcc:	mov	r0, r4
   14bd0:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14bd4:	add	sp, sp, #48	; 0x30
   14bd8:	ldrd	r4, [sp]
   14bdc:	ldr	r6, [sp, #8]
   14be0:	add	sp, sp, #12
   14be4:	pop	{pc}		; (ldr pc, [sp], #4)
   14be8:	str	r4, [sp, #-8]!
   14bec:	str	lr, [sp, #4]
   14bf0:	mov	r2, r1
   14bf4:	mov	r1, r0
   14bf8:	mov	r0, #0
   14bfc:	bl	14b5c <_obstack_memory_used@@Base+0x1fb4>
   14c00:	ldr	r4, [sp]
   14c04:	add	sp, sp, #4
   14c08:	pop	{pc}		; (ldr pc, [sp], #4)
   14c0c:	str	r4, [sp, #-8]!
   14c10:	str	lr, [sp, #4]
   14c14:	mov	r3, r2
   14c18:	mov	r2, r1
   14c1c:	mov	r1, r0
   14c20:	mov	r0, #0
   14c24:	bl	14b9c <_obstack_memory_used@@Base+0x1ff4>
   14c28:	ldr	r4, [sp]
   14c2c:	add	sp, sp, #4
   14c30:	pop	{pc}		; (ldr pc, [sp], #4)
   14c34:	strd	r4, [sp, #-12]!
   14c38:	str	lr, [sp, #8]
   14c3c:	sub	sp, sp, #52	; 0x34
   14c40:	mov	r4, r0
   14c44:	mov	r5, r1
   14c48:	mov	r1, r2
   14c4c:	ldr	r0, [pc, #92]	; 14cb0 <_obstack_memory_used@@Base+0x2108>
   14c50:	ldrd	r2, [r0]
   14c54:	strd	r2, [sp]
   14c58:	ldrd	r2, [r0, #8]
   14c5c:	strd	r2, [sp, #8]
   14c60:	ldrd	r2, [r0, #16]
   14c64:	strd	r2, [sp, #16]
   14c68:	ldrd	r2, [r0, #24]
   14c6c:	strd	r2, [sp, #24]
   14c70:	ldrd	r2, [r0, #32]
   14c74:	strd	r2, [sp, #32]
   14c78:	ldrd	r2, [r0, #40]	; 0x28
   14c7c:	strd	r2, [sp, #40]	; 0x28
   14c80:	mov	r2, #1
   14c84:	mov	r0, sp
   14c88:	bl	147ac <_obstack_memory_used@@Base+0x1c04>
   14c8c:	mov	r3, sp
   14c90:	mov	r2, r5
   14c94:	mov	r1, r4
   14c98:	mov	r0, #0
   14c9c:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14ca0:	add	sp, sp, #52	; 0x34
   14ca4:	ldrd	r4, [sp]
   14ca8:	add	sp, sp, #8
   14cac:	pop	{pc}		; (ldr pc, [sp], #4)
   14cb0:	andeq	r8, r2, ip, lsl #5
   14cb4:	str	r4, [sp, #-8]!
   14cb8:	str	lr, [sp, #4]
   14cbc:	mov	r2, r1
   14cc0:	mvn	r1, #0
   14cc4:	bl	14c34 <_obstack_memory_used@@Base+0x208c>
   14cc8:	ldr	r4, [sp]
   14ccc:	add	sp, sp, #4
   14cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   14cd4:	str	r4, [sp, #-8]!
   14cd8:	str	lr, [sp, #4]
   14cdc:	mov	r1, #58	; 0x3a
   14ce0:	bl	14cb4 <_obstack_memory_used@@Base+0x210c>
   14ce4:	ldr	r4, [sp]
   14ce8:	add	sp, sp, #4
   14cec:	pop	{pc}		; (ldr pc, [sp], #4)
   14cf0:	str	r4, [sp, #-8]!
   14cf4:	str	lr, [sp, #4]
   14cf8:	mov	r2, #58	; 0x3a
   14cfc:	bl	14c34 <_obstack_memory_used@@Base+0x208c>
   14d00:	ldr	r4, [sp]
   14d04:	add	sp, sp, #4
   14d08:	pop	{pc}		; (ldr pc, [sp], #4)
   14d0c:	strd	r4, [sp, #-12]!
   14d10:	str	lr, [sp, #8]
   14d14:	sub	sp, sp, #100	; 0x64
   14d18:	mov	r4, r0
   14d1c:	mov	r5, r2
   14d20:	mov	r0, sp
   14d24:	bl	12cac <_obstack_memory_used@@Base+0x104>
   14d28:	ldrd	r2, [sp]
   14d2c:	strd	r2, [sp, #48]	; 0x30
   14d30:	ldrd	r2, [sp, #8]
   14d34:	strd	r2, [sp, #56]	; 0x38
   14d38:	ldrd	r2, [sp, #16]
   14d3c:	strd	r2, [sp, #64]	; 0x40
   14d40:	ldrd	r2, [sp, #24]
   14d44:	strd	r2, [sp, #72]	; 0x48
   14d48:	ldrd	r2, [sp, #32]
   14d4c:	strd	r2, [sp, #80]	; 0x50
   14d50:	ldrd	r2, [sp, #40]	; 0x28
   14d54:	strd	r2, [sp, #88]	; 0x58
   14d58:	mov	r2, #1
   14d5c:	mov	r1, #58	; 0x3a
   14d60:	add	r0, sp, #48	; 0x30
   14d64:	bl	147ac <_obstack_memory_used@@Base+0x1c04>
   14d68:	add	r3, sp, #48	; 0x30
   14d6c:	mvn	r2, #0
   14d70:	mov	r1, r5
   14d74:	mov	r0, r4
   14d78:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14d7c:	add	sp, sp, #100	; 0x64
   14d80:	ldrd	r4, [sp]
   14d84:	add	sp, sp, #8
   14d88:	pop	{pc}		; (ldr pc, [sp], #4)
   14d8c:	strd	r4, [sp, #-20]!	; 0xffffffec
   14d90:	strd	r6, [sp, #8]
   14d94:	str	lr, [sp, #16]
   14d98:	sub	sp, sp, #52	; 0x34
   14d9c:	mov	r4, r0
   14da0:	mov	r5, r3
   14da4:	ldr	r3, [pc, #92]	; 14e08 <_obstack_memory_used@@Base+0x2260>
   14da8:	ldrd	r6, [r3]
   14dac:	strd	r6, [sp]
   14db0:	ldrd	r6, [r3, #8]
   14db4:	strd	r6, [sp, #8]
   14db8:	ldrd	r6, [r3, #16]
   14dbc:	strd	r6, [sp, #16]
   14dc0:	ldrd	r6, [r3, #24]
   14dc4:	strd	r6, [sp, #24]
   14dc8:	ldrd	r6, [r3, #32]
   14dcc:	strd	r6, [sp, #32]
   14dd0:	ldrd	r6, [r3, #40]	; 0x28
   14dd4:	strd	r6, [sp, #40]	; 0x28
   14dd8:	mov	r0, sp
   14ddc:	bl	14808 <_obstack_memory_used@@Base+0x1c60>
   14de0:	mov	r3, sp
   14de4:	ldr	r2, [sp, #72]	; 0x48
   14de8:	mov	r1, r5
   14dec:	mov	r0, r4
   14df0:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14df4:	add	sp, sp, #52	; 0x34
   14df8:	ldrd	r4, [sp]
   14dfc:	ldrd	r6, [sp, #8]
   14e00:	add	sp, sp, #16
   14e04:	pop	{pc}		; (ldr pc, [sp], #4)
   14e08:	andeq	r8, r2, ip, lsl #5
   14e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   14e10:	sub	sp, sp, #12
   14e14:	mvn	ip, #0
   14e18:	str	ip, [sp]
   14e1c:	bl	14d8c <_obstack_memory_used@@Base+0x21e4>
   14e20:	add	sp, sp, #12
   14e24:	pop	{pc}		; (ldr pc, [sp], #4)
   14e28:	str	r4, [sp, #-8]!
   14e2c:	str	lr, [sp, #4]
   14e30:	mov	r3, r2
   14e34:	mov	r2, r1
   14e38:	mov	r1, r0
   14e3c:	mov	r0, #0
   14e40:	bl	14e0c <_obstack_memory_used@@Base+0x2264>
   14e44:	ldr	r4, [sp]
   14e48:	add	sp, sp, #4
   14e4c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e50:	push	{lr}		; (str lr, [sp, #-4]!)
   14e54:	sub	sp, sp, #12
   14e58:	str	r3, [sp]
   14e5c:	mov	r3, r2
   14e60:	mov	r2, r1
   14e64:	mov	r1, r0
   14e68:	mov	r0, #0
   14e6c:	bl	14d8c <_obstack_memory_used@@Base+0x21e4>
   14e70:	add	sp, sp, #12
   14e74:	pop	{pc}		; (ldr pc, [sp], #4)
   14e78:	str	r4, [sp, #-8]!
   14e7c:	str	lr, [sp, #4]
   14e80:	ldr	r3, [pc, #12]	; 14e94 <_obstack_memory_used@@Base+0x22ec>
   14e84:	bl	14538 <_obstack_memory_used@@Base+0x1990>
   14e88:	ldr	r4, [sp]
   14e8c:	add	sp, sp, #4
   14e90:	pop	{pc}		; (ldr pc, [sp], #4)
   14e94:	andeq	r8, r2, r0, lsl #2
   14e98:	str	r4, [sp, #-8]!
   14e9c:	str	lr, [sp, #4]
   14ea0:	mov	r2, r1
   14ea4:	mov	r1, r0
   14ea8:	mov	r0, #0
   14eac:	bl	14e78 <_obstack_memory_used@@Base+0x22d0>
   14eb0:	ldr	r4, [sp]
   14eb4:	add	sp, sp, #4
   14eb8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ebc:	str	r4, [sp, #-8]!
   14ec0:	str	lr, [sp, #4]
   14ec4:	mvn	r2, #0
   14ec8:	bl	14e78 <_obstack_memory_used@@Base+0x22d0>
   14ecc:	ldr	r4, [sp]
   14ed0:	add	sp, sp, #4
   14ed4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed8:	str	r4, [sp, #-8]!
   14edc:	str	lr, [sp, #4]
   14ee0:	mov	r1, r0
   14ee4:	mov	r0, #0
   14ee8:	bl	14ebc <_obstack_memory_used@@Base+0x2314>
   14eec:	ldr	r4, [sp]
   14ef0:	add	sp, sp, #4
   14ef4:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef8:	strd	r4, [sp, #-16]!
   14efc:	str	r6, [sp, #8]
   14f00:	str	lr, [sp, #12]
   14f04:	sub	sp, sp, #32
   14f08:	mov	r4, r0
   14f0c:	ldr	r5, [sp, #48]	; 0x30
   14f10:	ldr	r6, [sp, #52]	; 0x34
   14f14:	cmp	r1, #0
   14f18:	beq	14fe4 <_obstack_memory_used@@Base+0x243c>
   14f1c:	str	r3, [sp, #4]
   14f20:	str	r2, [sp]
   14f24:	mov	r3, r1
   14f28:	movw	r2, #31148	; 0x79ac
   14f2c:	movt	r2, #1
   14f30:	mov	r1, #1
   14f34:	bl	10f24 <__fprintf_chk@plt>
   14f38:	mov	r2, #5
   14f3c:	movw	r1, #31168	; 0x79c0
   14f40:	movt	r1, #1
   14f44:	mov	r0, #0
   14f48:	bl	10dc8 <dcgettext@plt>
   14f4c:	movw	r3, #2022	; 0x7e6
   14f50:	str	r3, [sp]
   14f54:	mov	r3, r0
   14f58:	movw	r2, #31896	; 0x7c98
   14f5c:	movt	r2, #1
   14f60:	mov	r1, #1
   14f64:	mov	r0, r4
   14f68:	bl	10f24 <__fprintf_chk@plt>
   14f6c:	mov	r1, r4
   14f70:	mov	r0, #10
   14f74:	bl	10dbc <fputc_unlocked@plt>
   14f78:	mov	r2, #5
   14f7c:	movw	r1, #31172	; 0x79c4
   14f80:	movt	r1, #1
   14f84:	mov	r0, #0
   14f88:	bl	10dc8 <dcgettext@plt>
   14f8c:	movw	r3, #31344	; 0x7a70
   14f90:	movt	r3, #1
   14f94:	mov	r2, r0
   14f98:	mov	r1, #1
   14f9c:	mov	r0, r4
   14fa0:	bl	10f24 <__fprintf_chk@plt>
   14fa4:	mov	r1, r4
   14fa8:	mov	r0, #10
   14fac:	bl	10dbc <fputc_unlocked@plt>
   14fb0:	cmp	r6, #9
   14fb4:	ldrls	pc, [pc, r6, lsl #2]
   14fb8:	b	152bc <_obstack_memory_used@@Base+0x2714>
   14fbc:	andeq	r5, r1, r8, lsr #32
   14fc0:	andeq	r5, r1, r0
   14fc4:	andeq	r5, r1, ip, lsr r0
   14fc8:	andeq	r5, r1, r0, ror r0
   14fcc:	andeq	r5, r1, ip, lsr #1
   14fd0:	strdeq	r5, [r1], -r0
   14fd4:	andeq	r5, r1, ip, lsr r1
   14fd8:	muleq	r1, r0, r1
   14fdc:	andeq	r5, r1, ip, ror #3
   14fe0:	andeq	r5, r1, r0, asr r2
   14fe4:	str	r3, [sp]
   14fe8:	mov	r3, r2
   14fec:	movw	r2, #31160	; 0x79b8
   14ff0:	movt	r2, #1
   14ff4:	mov	r1, #1
   14ff8:	bl	10f24 <__fprintf_chk@plt>
   14ffc:	b	14f38 <_obstack_memory_used@@Base+0x2390>
   15000:	mov	r2, #5
   15004:	movw	r1, #31380	; 0x7a94
   15008:	movt	r1, #1
   1500c:	mov	r0, #0
   15010:	bl	10dc8 <dcgettext@plt>
   15014:	ldr	r3, [r5]
   15018:	mov	r2, r0
   1501c:	mov	r1, #1
   15020:	mov	r0, r4
   15024:	bl	10f24 <__fprintf_chk@plt>
   15028:	add	sp, sp, #32
   1502c:	ldrd	r4, [sp]
   15030:	ldr	r6, [sp, #8]
   15034:	add	sp, sp, #12
   15038:	pop	{pc}		; (ldr pc, [sp], #4)
   1503c:	mov	r2, #5
   15040:	movw	r1, #31396	; 0x7aa4
   15044:	movt	r1, #1
   15048:	mov	r0, #0
   1504c:	bl	10dc8 <dcgettext@plt>
   15050:	ldr	r3, [r5, #4]
   15054:	str	r3, [sp]
   15058:	ldr	r3, [r5]
   1505c:	mov	r2, r0
   15060:	mov	r1, #1
   15064:	mov	r0, r4
   15068:	bl	10f24 <__fprintf_chk@plt>
   1506c:	b	15028 <_obstack_memory_used@@Base+0x2480>
   15070:	mov	r2, #5
   15074:	movw	r1, #31420	; 0x7abc
   15078:	movt	r1, #1
   1507c:	mov	r0, #0
   15080:	bl	10dc8 <dcgettext@plt>
   15084:	ldr	r3, [r5, #8]
   15088:	str	r3, [sp, #4]
   1508c:	ldr	r3, [r5, #4]
   15090:	str	r3, [sp]
   15094:	ldr	r3, [r5]
   15098:	mov	r2, r0
   1509c:	mov	r1, #1
   150a0:	mov	r0, r4
   150a4:	bl	10f24 <__fprintf_chk@plt>
   150a8:	b	15028 <_obstack_memory_used@@Base+0x2480>
   150ac:	mov	r2, #5
   150b0:	movw	r1, #31448	; 0x7ad8
   150b4:	movt	r1, #1
   150b8:	mov	r0, #0
   150bc:	bl	10dc8 <dcgettext@plt>
   150c0:	ldr	r3, [r5, #12]
   150c4:	str	r3, [sp, #8]
   150c8:	ldr	r3, [r5, #8]
   150cc:	str	r3, [sp, #4]
   150d0:	ldr	r3, [r5, #4]
   150d4:	str	r3, [sp]
   150d8:	ldr	r3, [r5]
   150dc:	mov	r2, r0
   150e0:	mov	r1, #1
   150e4:	mov	r0, r4
   150e8:	bl	10f24 <__fprintf_chk@plt>
   150ec:	b	15028 <_obstack_memory_used@@Base+0x2480>
   150f0:	mov	r2, #5
   150f4:	movw	r1, #31480	; 0x7af8
   150f8:	movt	r1, #1
   150fc:	mov	r0, #0
   15100:	bl	10dc8 <dcgettext@plt>
   15104:	ldr	r3, [r5, #16]
   15108:	str	r3, [sp, #12]
   1510c:	ldr	r3, [r5, #12]
   15110:	str	r3, [sp, #8]
   15114:	ldr	r3, [r5, #8]
   15118:	str	r3, [sp, #4]
   1511c:	ldr	r3, [r5, #4]
   15120:	str	r3, [sp]
   15124:	ldr	r3, [r5]
   15128:	mov	r2, r0
   1512c:	mov	r1, #1
   15130:	mov	r0, r4
   15134:	bl	10f24 <__fprintf_chk@plt>
   15138:	b	15028 <_obstack_memory_used@@Base+0x2480>
   1513c:	mov	r2, #5
   15140:	movw	r1, #31516	; 0x7b1c
   15144:	movt	r1, #1
   15148:	mov	r0, #0
   1514c:	bl	10dc8 <dcgettext@plt>
   15150:	ldr	r3, [r5, #20]
   15154:	str	r3, [sp, #16]
   15158:	ldr	r3, [r5, #16]
   1515c:	str	r3, [sp, #12]
   15160:	ldr	r3, [r5, #12]
   15164:	str	r3, [sp, #8]
   15168:	ldr	r3, [r5, #8]
   1516c:	str	r3, [sp, #4]
   15170:	ldr	r3, [r5, #4]
   15174:	str	r3, [sp]
   15178:	ldr	r3, [r5]
   1517c:	mov	r2, r0
   15180:	mov	r1, #1
   15184:	mov	r0, r4
   15188:	bl	10f24 <__fprintf_chk@plt>
   1518c:	b	15028 <_obstack_memory_used@@Base+0x2480>
   15190:	mov	r2, #5
   15194:	movw	r1, #31556	; 0x7b44
   15198:	movt	r1, #1
   1519c:	mov	r0, #0
   151a0:	bl	10dc8 <dcgettext@plt>
   151a4:	ldr	r3, [r5, #24]
   151a8:	str	r3, [sp, #20]
   151ac:	ldr	r3, [r5, #20]
   151b0:	str	r3, [sp, #16]
   151b4:	ldr	r3, [r5, #16]
   151b8:	str	r3, [sp, #12]
   151bc:	ldr	r3, [r5, #12]
   151c0:	str	r3, [sp, #8]
   151c4:	ldr	r3, [r5, #8]
   151c8:	str	r3, [sp, #4]
   151cc:	ldr	r3, [r5, #4]
   151d0:	str	r3, [sp]
   151d4:	ldr	r3, [r5]
   151d8:	mov	r2, r0
   151dc:	mov	r1, #1
   151e0:	mov	r0, r4
   151e4:	bl	10f24 <__fprintf_chk@plt>
   151e8:	b	15028 <_obstack_memory_used@@Base+0x2480>
   151ec:	mov	r2, #5
   151f0:	movw	r1, #31600	; 0x7b70
   151f4:	movt	r1, #1
   151f8:	mov	r0, #0
   151fc:	bl	10dc8 <dcgettext@plt>
   15200:	ldr	r3, [r5, #28]
   15204:	str	r3, [sp, #24]
   15208:	ldr	r3, [r5, #24]
   1520c:	str	r3, [sp, #20]
   15210:	ldr	r3, [r5, #20]
   15214:	str	r3, [sp, #16]
   15218:	ldr	r3, [r5, #16]
   1521c:	str	r3, [sp, #12]
   15220:	ldr	r3, [r5, #12]
   15224:	str	r3, [sp, #8]
   15228:	ldr	r3, [r5, #8]
   1522c:	str	r3, [sp, #4]
   15230:	ldr	r3, [r5, #4]
   15234:	str	r3, [sp]
   15238:	ldr	r3, [r5]
   1523c:	mov	r2, r0
   15240:	mov	r1, #1
   15244:	mov	r0, r4
   15248:	bl	10f24 <__fprintf_chk@plt>
   1524c:	b	15028 <_obstack_memory_used@@Base+0x2480>
   15250:	mov	r2, #5
   15254:	movw	r1, #31648	; 0x7ba0
   15258:	movt	r1, #1
   1525c:	mov	r0, #0
   15260:	bl	10dc8 <dcgettext@plt>
   15264:	ldr	r3, [r5, #32]
   15268:	str	r3, [sp, #28]
   1526c:	ldr	r3, [r5, #28]
   15270:	str	r3, [sp, #24]
   15274:	ldr	r3, [r5, #24]
   15278:	str	r3, [sp, #20]
   1527c:	ldr	r3, [r5, #20]
   15280:	str	r3, [sp, #16]
   15284:	ldr	r3, [r5, #16]
   15288:	str	r3, [sp, #12]
   1528c:	ldr	r3, [r5, #12]
   15290:	str	r3, [sp, #8]
   15294:	ldr	r3, [r5, #8]
   15298:	str	r3, [sp, #4]
   1529c:	ldr	r3, [r5, #4]
   152a0:	str	r3, [sp]
   152a4:	ldr	r3, [r5]
   152a8:	mov	r2, r0
   152ac:	mov	r1, #1
   152b0:	mov	r0, r4
   152b4:	bl	10f24 <__fprintf_chk@plt>
   152b8:	b	15028 <_obstack_memory_used@@Base+0x2480>
   152bc:	mov	r2, #5
   152c0:	movw	r1, #31700	; 0x7bd4
   152c4:	movt	r1, #1
   152c8:	mov	r0, #0
   152cc:	bl	10dc8 <dcgettext@plt>
   152d0:	ldr	r3, [r5, #32]
   152d4:	str	r3, [sp, #28]
   152d8:	ldr	r3, [r5, #28]
   152dc:	str	r3, [sp, #24]
   152e0:	ldr	r3, [r5, #24]
   152e4:	str	r3, [sp, #20]
   152e8:	ldr	r3, [r5, #20]
   152ec:	str	r3, [sp, #16]
   152f0:	ldr	r3, [r5, #16]
   152f4:	str	r3, [sp, #12]
   152f8:	ldr	r3, [r5, #12]
   152fc:	str	r3, [sp, #8]
   15300:	ldr	r3, [r5, #8]
   15304:	str	r3, [sp, #4]
   15308:	ldr	r3, [r5, #4]
   1530c:	str	r3, [sp]
   15310:	ldr	r3, [r5]
   15314:	mov	r2, r0
   15318:	mov	r1, #1
   1531c:	mov	r0, r4
   15320:	bl	10f24 <__fprintf_chk@plt>
   15324:	b	15028 <_obstack_memory_used@@Base+0x2480>
   15328:	strd	r4, [sp, #-12]!
   1532c:	str	lr, [sp, #8]
   15330:	sub	sp, sp, #12
   15334:	ldr	r5, [sp, #24]
   15338:	ldr	ip, [r5]
   1533c:	cmp	ip, #0
   15340:	beq	15378 <_obstack_memory_used@@Base+0x27d0>
   15344:	mov	lr, r5
   15348:	mov	ip, #0
   1534c:	add	ip, ip, #1
   15350:	ldr	r4, [lr, #4]!
   15354:	cmp	r4, #0
   15358:	bne	1534c <_obstack_memory_used@@Base+0x27a4>
   1535c:	str	ip, [sp, #4]
   15360:	str	r5, [sp]
   15364:	bl	14ef8 <_obstack_memory_used@@Base+0x2350>
   15368:	add	sp, sp, #12
   1536c:	ldrd	r4, [sp]
   15370:	add	sp, sp, #8
   15374:	pop	{pc}		; (ldr pc, [sp], #4)
   15378:	mov	ip, #0
   1537c:	b	1535c <_obstack_memory_used@@Base+0x27b4>
   15380:	strd	r4, [sp, #-12]!
   15384:	str	lr, [sp, #8]
   15388:	sub	sp, sp, #52	; 0x34
   1538c:	ldr	r5, [sp, #64]	; 0x40
   15390:	add	r4, sp, #8
   15394:	mov	ip, #0
   15398:	ldr	lr, [r5], #4
   1539c:	str	lr, [r4], #4
   153a0:	cmp	lr, #0
   153a4:	beq	153b4 <_obstack_memory_used@@Base+0x280c>
   153a8:	add	ip, ip, #1
   153ac:	cmp	ip, #10
   153b0:	bne	15398 <_obstack_memory_used@@Base+0x27f0>
   153b4:	str	ip, [sp, #4]
   153b8:	add	ip, sp, #8
   153bc:	str	ip, [sp]
   153c0:	bl	14ef8 <_obstack_memory_used@@Base+0x2350>
   153c4:	add	sp, sp, #52	; 0x34
   153c8:	ldrd	r4, [sp]
   153cc:	add	sp, sp, #8
   153d0:	pop	{pc}		; (ldr pc, [sp], #4)
   153d4:	push	{r3}		; (str r3, [sp, #-4]!)
   153d8:	push	{lr}		; (str lr, [sp, #-4]!)
   153dc:	sub	sp, sp, #16
   153e0:	add	r3, sp, #24
   153e4:	str	r3, [sp, #12]
   153e8:	str	r3, [sp]
   153ec:	ldr	r3, [sp, #20]
   153f0:	bl	15380 <_obstack_memory_used@@Base+0x27d8>
   153f4:	add	sp, sp, #16
   153f8:	pop	{lr}		; (ldr lr, [sp], #4)
   153fc:	add	sp, sp, #4
   15400:	bx	lr
   15404:	str	r4, [sp, #-8]!
   15408:	str	lr, [sp, #4]
   1540c:	movw	r3, #33100	; 0x814c
   15410:	movt	r3, #2
   15414:	ldr	r1, [r3]
   15418:	mov	r0, #10
   1541c:	bl	10dbc <fputc_unlocked@plt>
   15420:	mov	r2, #5
   15424:	movw	r1, #31760	; 0x7c10
   15428:	movt	r1, #1
   1542c:	mov	r0, #0
   15430:	bl	10dc8 <dcgettext@plt>
   15434:	movw	r2, #31780	; 0x7c24
   15438:	movt	r2, #1
   1543c:	mov	r1, r0
   15440:	mov	r0, #1
   15444:	bl	10f0c <__printf_chk@plt>
   15448:	mov	r2, #5
   1544c:	movw	r1, #31804	; 0x7c3c
   15450:	movt	r1, #1
   15454:	mov	r0, #0
   15458:	bl	10dc8 <dcgettext@plt>
   1545c:	movw	r3, #29636	; 0x73c4
   15460:	movt	r3, #1
   15464:	movw	r2, #29676	; 0x73ec
   15468:	movt	r2, #1
   1546c:	mov	r1, r0
   15470:	mov	r0, #1
   15474:	bl	10f0c <__printf_chk@plt>
   15478:	mov	r2, #5
   1547c:	movw	r1, #31824	; 0x7c50
   15480:	movt	r1, #1
   15484:	mov	r0, #0
   15488:	bl	10dc8 <dcgettext@plt>
   1548c:	movw	r2, #31864	; 0x7c78
   15490:	movt	r2, #1
   15494:	mov	r1, r0
   15498:	mov	r0, #1
   1549c:	bl	10f0c <__printf_chk@plt>
   154a0:	ldr	r4, [sp]
   154a4:	add	sp, sp, #4
   154a8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ac:	str	r4, [sp, #-8]!
   154b0:	str	lr, [sp, #4]
   154b4:	bl	159f8 <_obstack_memory_used@@Base+0x2e50>
   154b8:	cmp	r0, #0
   154bc:	beq	154cc <_obstack_memory_used@@Base+0x2924>
   154c0:	ldr	r4, [sp]
   154c4:	add	sp, sp, #4
   154c8:	pop	{pc}		; (ldr pc, [sp], #4)
   154cc:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   154d0:	str	r4, [sp, #-8]!
   154d4:	str	lr, [sp, #4]
   154d8:	bl	159f8 <_obstack_memory_used@@Base+0x2e50>
   154dc:	cmp	r0, #0
   154e0:	beq	154f0 <_obstack_memory_used@@Base+0x2948>
   154e4:	ldr	r4, [sp]
   154e8:	add	sp, sp, #4
   154ec:	pop	{pc}		; (ldr pc, [sp], #4)
   154f0:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   154f4:	str	r4, [sp, #-8]!
   154f8:	str	lr, [sp, #4]
   154fc:	bl	154ac <_obstack_memory_used@@Base+0x2904>
   15500:	ldr	r4, [sp]
   15504:	add	sp, sp, #4
   15508:	pop	{pc}		; (ldr pc, [sp], #4)
   1550c:	strd	r4, [sp, #-16]!
   15510:	str	r6, [sp, #8]
   15514:	str	lr, [sp, #12]
   15518:	mov	r5, r0
   1551c:	mov	r4, r1
   15520:	bl	15a34 <_obstack_memory_used@@Base+0x2e8c>
   15524:	cmp	r0, #0
   15528:	beq	1553c <_obstack_memory_used@@Base+0x2994>
   1552c:	ldrd	r4, [sp]
   15530:	ldr	r6, [sp, #8]
   15534:	add	sp, sp, #12
   15538:	pop	{pc}		; (ldr pc, [sp], #4)
   1553c:	adds	r4, r4, #0
   15540:	movne	r4, #1
   15544:	cmp	r5, #0
   15548:	moveq	r4, #1
   1554c:	cmp	r4, #0
   15550:	beq	1552c <_obstack_memory_used@@Base+0x2984>
   15554:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   15558:	str	r4, [sp, #-8]!
   1555c:	str	lr, [sp, #4]
   15560:	cmp	r1, #0
   15564:	orreq	r1, r1, #1
   15568:	bl	15a34 <_obstack_memory_used@@Base+0x2e8c>
   1556c:	cmp	r0, #0
   15570:	beq	15580 <_obstack_memory_used@@Base+0x29d8>
   15574:	ldr	r4, [sp]
   15578:	add	sp, sp, #4
   1557c:	pop	{pc}		; (ldr pc, [sp], #4)
   15580:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   15584:	strd	r4, [sp, #-16]!
   15588:	str	r6, [sp, #8]
   1558c:	str	lr, [sp, #12]
   15590:	mov	r4, r0
   15594:	mov	r6, r1
   15598:	mov	r5, r2
   1559c:	bl	15bd0 <_obstack_memory_used@@Base+0x3028>
   155a0:	cmp	r0, #0
   155a4:	beq	155b8 <_obstack_memory_used@@Base+0x2a10>
   155a8:	ldrd	r4, [sp]
   155ac:	ldr	r6, [sp, #8]
   155b0:	add	sp, sp, #12
   155b4:	pop	{pc}		; (ldr pc, [sp], #4)
   155b8:	cmp	r4, #0
   155bc:	beq	155cc <_obstack_memory_used@@Base+0x2a24>
   155c0:	cmp	r6, #0
   155c4:	cmpne	r5, #0
   155c8:	beq	155a8 <_obstack_memory_used@@Base+0x2a00>
   155cc:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   155d0:	str	r4, [sp, #-8]!
   155d4:	str	lr, [sp, #4]
   155d8:	bl	15584 <_obstack_memory_used@@Base+0x29dc>
   155dc:	ldr	r4, [sp]
   155e0:	add	sp, sp, #4
   155e4:	pop	{pc}		; (ldr pc, [sp], #4)
   155e8:	str	r4, [sp, #-8]!
   155ec:	str	lr, [sp, #4]
   155f0:	mov	ip, r1
   155f4:	mov	r3, r2
   155f8:	cmp	r2, #0
   155fc:	cmpne	r1, #0
   15600:	moveq	r3, #1
   15604:	moveq	ip, r3
   15608:	mov	r2, r3
   1560c:	mov	r1, ip
   15610:	bl	15bd0 <_obstack_memory_used@@Base+0x3028>
   15614:	cmp	r0, #0
   15618:	beq	15628 <_obstack_memory_used@@Base+0x2a80>
   1561c:	ldr	r4, [sp]
   15620:	add	sp, sp, #4
   15624:	pop	{pc}		; (ldr pc, [sp], #4)
   15628:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   1562c:	str	r4, [sp, #-8]!
   15630:	str	lr, [sp, #4]
   15634:	mov	r2, r1
   15638:	mov	r1, r0
   1563c:	mov	r0, #0
   15640:	bl	15584 <_obstack_memory_used@@Base+0x29dc>
   15644:	ldr	r4, [sp]
   15648:	add	sp, sp, #4
   1564c:	pop	{pc}		; (ldr pc, [sp], #4)
   15650:	str	r4, [sp, #-8]!
   15654:	str	lr, [sp, #4]
   15658:	mov	r2, r1
   1565c:	mov	r1, r0
   15660:	mov	r0, #0
   15664:	bl	155e8 <_obstack_memory_used@@Base+0x2a40>
   15668:	ldr	r4, [sp]
   1566c:	add	sp, sp, #4
   15670:	pop	{pc}		; (ldr pc, [sp], #4)
   15674:	strd	r4, [sp, #-16]!
   15678:	str	r6, [sp, #8]
   1567c:	str	lr, [sp, #12]
   15680:	mov	r5, r1
   15684:	ldr	r4, [r1]
   15688:	cmp	r0, #0
   1568c:	beq	156bc <_obstack_memory_used@@Base+0x2b14>
   15690:	lsr	r3, r4, #1
   15694:	add	r3, r3, #1
   15698:	adds	r4, r4, r3
   1569c:	bcs	156d8 <_obstack_memory_used@@Base+0x2b30>
   156a0:	mov	r1, r4
   156a4:	bl	15584 <_obstack_memory_used@@Base+0x29dc>
   156a8:	str	r4, [r5]
   156ac:	ldrd	r4, [sp]
   156b0:	ldr	r6, [sp, #8]
   156b4:	add	sp, sp, #12
   156b8:	pop	{pc}		; (ldr pc, [sp], #4)
   156bc:	cmp	r4, #0
   156c0:	bne	156a0 <_obstack_memory_used@@Base+0x2af8>
   156c4:	mov	r4, #64	; 0x40
   156c8:	udiv	r4, r4, r2
   156cc:	cmp	r2, #64	; 0x40
   156d0:	addhi	r4, r4, #1
   156d4:	b	156a0 <_obstack_memory_used@@Base+0x2af8>
   156d8:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   156dc:	str	r4, [sp, #-8]!
   156e0:	str	lr, [sp, #4]
   156e4:	mov	r2, #1
   156e8:	bl	15674 <_obstack_memory_used@@Base+0x2acc>
   156ec:	ldr	r4, [sp]
   156f0:	add	sp, sp, #4
   156f4:	pop	{pc}		; (ldr pc, [sp], #4)
   156f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   156fc:	strd	r6, [sp, #8]
   15700:	str	r8, [sp, #16]
   15704:	str	lr, [sp, #20]
   15708:	mov	r5, r1
   1570c:	ldr	lr, [sp, #24]
   15710:	ldr	ip, [r1]
   15714:	asr	r4, ip, #1
   15718:	adds	r4, ip, r4
   1571c:	movvs	r1, #1
   15720:	movvc	r1, #0
   15724:	cmp	r1, #0
   15728:	mvnne	r4, #-2147483648	; 0x80000000
   1572c:	mvn	r8, r3
   15730:	lsr	r8, r8, #31
   15734:	cmp	r3, r4
   15738:	movge	r1, #0
   1573c:	andlt	r1, r8, #1
   15740:	cmp	r1, #0
   15744:	movne	r4, r3
   15748:	smull	r6, r7, r4, lr
   1574c:	asr	r1, r6, #31
   15750:	cmp	r1, r7
   15754:	bne	1576c <_obstack_memory_used@@Base+0x2bc4>
   15758:	mov	r1, r6
   1575c:	cmp	r6, #63	; 0x3f
   15760:	movle	r1, #64	; 0x40
   15764:	ble	15770 <_obstack_memory_used@@Base+0x2bc8>
   15768:	b	1577c <_obstack_memory_used@@Base+0x2bd4>
   1576c:	mvn	r1, #-2147483648	; 0x80000000
   15770:	sdiv	r4, r1, lr
   15774:	mls	r6, lr, r4, r1
   15778:	sub	r1, r1, r6
   1577c:	cmp	r0, #0
   15780:	moveq	r6, #0
   15784:	streq	r6, [r5]
   15788:	sub	r6, r4, ip
   1578c:	cmp	r6, r2
   15790:	bge	157c8 <_obstack_memory_used@@Base+0x2c20>
   15794:	adds	r2, ip, r2
   15798:	mov	r4, r2
   1579c:	bvs	157e4 <_obstack_memory_used@@Base+0x2c3c>
   157a0:	cmp	r2, r3
   157a4:	movle	r3, #0
   157a8:	andgt	r3, r8, #1
   157ac:	cmp	r3, #0
   157b0:	bne	157e4 <_obstack_memory_used@@Base+0x2c3c>
   157b4:	smull	r2, r3, r2, lr
   157b8:	asr	ip, r2, #31
   157bc:	mov	r1, r2
   157c0:	cmp	ip, r3
   157c4:	bne	157e4 <_obstack_memory_used@@Base+0x2c3c>
   157c8:	bl	1550c <_obstack_memory_used@@Base+0x2964>
   157cc:	str	r4, [r5]
   157d0:	ldrd	r4, [sp]
   157d4:	ldrd	r6, [sp, #8]
   157d8:	ldr	r8, [sp, #16]
   157dc:	add	sp, sp, #20
   157e0:	pop	{pc}		; (ldr pc, [sp], #4)
   157e4:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   157e8:	str	r4, [sp, #-8]!
   157ec:	str	lr, [sp, #4]
   157f0:	bl	15984 <_obstack_memory_used@@Base+0x2ddc>
   157f4:	cmp	r0, #0
   157f8:	beq	15808 <_obstack_memory_used@@Base+0x2c60>
   157fc:	ldr	r4, [sp]
   15800:	add	sp, sp, #4
   15804:	pop	{pc}		; (ldr pc, [sp], #4)
   15808:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   1580c:	str	r4, [sp, #-8]!
   15810:	str	lr, [sp, #4]
   15814:	mov	r1, #1
   15818:	bl	157e8 <_obstack_memory_used@@Base+0x2c40>
   1581c:	ldr	r4, [sp]
   15820:	add	sp, sp, #4
   15824:	pop	{pc}		; (ldr pc, [sp], #4)
   15828:	str	r4, [sp, #-8]!
   1582c:	str	lr, [sp, #4]
   15830:	bl	15984 <_obstack_memory_used@@Base+0x2ddc>
   15834:	cmp	r0, #0
   15838:	beq	15848 <_obstack_memory_used@@Base+0x2ca0>
   1583c:	ldr	r4, [sp]
   15840:	add	sp, sp, #4
   15844:	pop	{pc}		; (ldr pc, [sp], #4)
   15848:	bl	15940 <_obstack_memory_used@@Base+0x2d98>
   1584c:	str	r4, [sp, #-8]!
   15850:	str	lr, [sp, #4]
   15854:	mov	r1, #1
   15858:	bl	15828 <_obstack_memory_used@@Base+0x2c80>
   1585c:	ldr	r4, [sp]
   15860:	add	sp, sp, #4
   15864:	pop	{pc}		; (ldr pc, [sp], #4)
   15868:	strd	r4, [sp, #-16]!
   1586c:	str	r6, [sp, #8]
   15870:	str	lr, [sp, #12]
   15874:	mov	r5, r0
   15878:	mov	r4, r1
   1587c:	mov	r0, r1
   15880:	bl	154ac <_obstack_memory_used@@Base+0x2904>
   15884:	mov	r2, r4
   15888:	mov	r1, r5
   1588c:	bl	10d8c <memcpy@plt>
   15890:	ldrd	r4, [sp]
   15894:	ldr	r6, [sp, #8]
   15898:	add	sp, sp, #12
   1589c:	pop	{pc}		; (ldr pc, [sp], #4)
   158a0:	strd	r4, [sp, #-16]!
   158a4:	str	r6, [sp, #8]
   158a8:	str	lr, [sp, #12]
   158ac:	mov	r5, r0
   158b0:	mov	r4, r1
   158b4:	mov	r0, r1
   158b8:	bl	154d0 <_obstack_memory_used@@Base+0x2928>
   158bc:	mov	r2, r4
   158c0:	mov	r1, r5
   158c4:	bl	10d8c <memcpy@plt>
   158c8:	ldrd	r4, [sp]
   158cc:	ldr	r6, [sp, #8]
   158d0:	add	sp, sp, #12
   158d4:	pop	{pc}		; (ldr pc, [sp], #4)
   158d8:	strd	r4, [sp, #-16]!
   158dc:	str	r6, [sp, #8]
   158e0:	str	lr, [sp, #12]
   158e4:	mov	r5, r0
   158e8:	mov	r4, r1
   158ec:	add	r0, r1, #1
   158f0:	bl	154d0 <_obstack_memory_used@@Base+0x2928>
   158f4:	mov	r2, #0
   158f8:	strb	r2, [r0, r4]
   158fc:	mov	r2, r4
   15900:	mov	r1, r5
   15904:	bl	10d8c <memcpy@plt>
   15908:	ldrd	r4, [sp]
   1590c:	ldr	r6, [sp, #8]
   15910:	add	sp, sp, #12
   15914:	pop	{pc}		; (ldr pc, [sp], #4)
   15918:	str	r4, [sp, #-8]!
   1591c:	str	lr, [sp, #4]
   15920:	mov	r4, r0
   15924:	bl	10edc <strlen@plt>
   15928:	add	r1, r0, #1
   1592c:	mov	r0, r4
   15930:	bl	15868 <_obstack_memory_used@@Base+0x2cc0>
   15934:	ldr	r4, [sp]
   15938:	add	sp, sp, #4
   1593c:	pop	{pc}		; (ldr pc, [sp], #4)
   15940:	str	r4, [sp, #-8]!
   15944:	str	lr, [sp, #4]
   15948:	movw	r3, #33000	; 0x80e8
   1594c:	movt	r3, #2
   15950:	ldr	r4, [r3]
   15954:	mov	r2, #5
   15958:	movw	r1, #30844	; 0x787c
   1595c:	movt	r1, #1
   15960:	mov	r0, #0
   15964:	bl	10dc8 <dcgettext@plt>
   15968:	mov	r3, r0
   1596c:	movw	r2, #30828	; 0x786c
   15970:	movt	r2, #1
   15974:	mov	r1, #0
   15978:	mov	r0, r4
   1597c:	bl	10e40 <error@plt>
   15980:	bl	10f84 <abort@plt>
   15984:	strd	r4, [sp, #-16]!
   15988:	str	r6, [sp, #8]
   1598c:	str	lr, [sp, #12]
   15990:	cmp	r1, #0
   15994:	cmpne	r0, #0
   15998:	beq	159d4 <_obstack_memory_used@@Base+0x2e2c>
   1599c:	mov	r2, r0
   159a0:	mov	r3, r1
   159a4:	umull	r4, r5, r0, r1
   159a8:	adds	r1, r5, #0
   159ac:	movne	r1, #1
   159b0:	cmp	r4, #0
   159b4:	movlt	r1, #1
   159b8:	cmp	r1, #0
   159bc:	beq	159dc <_obstack_memory_used@@Base+0x2e34>
   159c0:	bl	10ee8 <__errno_location@plt>
   159c4:	mov	r3, #12
   159c8:	str	r3, [r0]
   159cc:	mov	r0, #0
   159d0:	b	159e8 <_obstack_memory_used@@Base+0x2e40>
   159d4:	mov	r3, #1
   159d8:	mov	r2, r3
   159dc:	mov	r1, r3
   159e0:	mov	r0, r2
   159e4:	bl	10d38 <calloc@plt>
   159e8:	ldrd	r4, [sp]
   159ec:	ldr	r6, [sp, #8]
   159f0:	add	sp, sp, #12
   159f4:	pop	{pc}		; (ldr pc, [sp], #4)
   159f8:	str	r4, [sp, #-8]!
   159fc:	str	lr, [sp, #4]
   15a00:	cmp	r0, #0
   15a04:	beq	15a20 <_obstack_memory_used@@Base+0x2e78>
   15a08:	bge	15a24 <_obstack_memory_used@@Base+0x2e7c>
   15a0c:	bl	10ee8 <__errno_location@plt>
   15a10:	mov	r3, #12
   15a14:	str	r3, [r0]
   15a18:	mov	r0, #0
   15a1c:	b	15a28 <_obstack_memory_used@@Base+0x2e80>
   15a20:	mov	r0, #1
   15a24:	bl	10e7c <malloc@plt>
   15a28:	ldr	r4, [sp]
   15a2c:	add	sp, sp, #4
   15a30:	pop	{pc}		; (ldr pc, [sp], #4)
   15a34:	str	r4, [sp, #-8]!
   15a38:	str	lr, [sp, #4]
   15a3c:	cmp	r0, #0
   15a40:	beq	15a64 <_obstack_memory_used@@Base+0x2ebc>
   15a44:	cmp	r1, #0
   15a48:	beq	15a70 <_obstack_memory_used@@Base+0x2ec8>
   15a4c:	cmp	r1, #0
   15a50:	blt	15a7c <_obstack_memory_used@@Base+0x2ed4>
   15a54:	bl	10de0 <realloc@plt>
   15a58:	ldr	r4, [sp]
   15a5c:	add	sp, sp, #4
   15a60:	pop	{pc}		; (ldr pc, [sp], #4)
   15a64:	mov	r0, r1
   15a68:	bl	159f8 <_obstack_memory_used@@Base+0x2e50>
   15a6c:	b	15a58 <_obstack_memory_used@@Base+0x2eb0>
   15a70:	bl	124e0 <close@plt+0x1550>
   15a74:	mov	r0, #0
   15a78:	b	15a58 <_obstack_memory_used@@Base+0x2eb0>
   15a7c:	bl	10ee8 <__errno_location@plt>
   15a80:	mov	r3, #12
   15a84:	str	r3, [r0]
   15a88:	mov	r0, #0
   15a8c:	b	15a58 <_obstack_memory_used@@Base+0x2eb0>
   15a90:	strd	r4, [sp, #-16]!
   15a94:	str	r6, [sp, #8]
   15a98:	str	lr, [sp, #12]
   15a9c:	mov	r5, r0
   15aa0:	bl	10e28 <__fpending@plt>
   15aa4:	mov	r6, r0
   15aa8:	ldr	r4, [r5]
   15aac:	and	r4, r4, #32
   15ab0:	mov	r0, r5
   15ab4:	bl	123b4 <close@plt+0x1424>
   15ab8:	cmp	r4, #0
   15abc:	bne	15af0 <_obstack_memory_used@@Base+0x2f48>
   15ac0:	cmp	r0, #0
   15ac4:	beq	15ae0 <_obstack_memory_used@@Base+0x2f38>
   15ac8:	cmp	r6, #0
   15acc:	bne	15b0c <_obstack_memory_used@@Base+0x2f64>
   15ad0:	bl	10ee8 <__errno_location@plt>
   15ad4:	ldr	r0, [r0]
   15ad8:	subs	r0, r0, #9
   15adc:	mvnne	r0, #0
   15ae0:	ldrd	r4, [sp]
   15ae4:	ldr	r6, [sp, #8]
   15ae8:	add	sp, sp, #12
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	cmp	r0, #0
   15af4:	bne	15b14 <_obstack_memory_used@@Base+0x2f6c>
   15af8:	bl	10ee8 <__errno_location@plt>
   15afc:	mov	r3, #0
   15b00:	str	r3, [r0]
   15b04:	mvn	r0, #0
   15b08:	b	15ae0 <_obstack_memory_used@@Base+0x2f38>
   15b0c:	mvn	r0, #0
   15b10:	b	15ae0 <_obstack_memory_used@@Base+0x2f38>
   15b14:	mvn	r0, #0
   15b18:	b	15ae0 <_obstack_memory_used@@Base+0x2f38>
   15b1c:	str	r4, [sp, #-8]!
   15b20:	str	lr, [sp, #4]
   15b24:	mov	r0, #14
   15b28:	bl	10f60 <nl_langinfo@plt>
   15b2c:	cmp	r0, #0
   15b30:	beq	15b54 <_obstack_memory_used@@Base+0x2fac>
   15b34:	ldrb	r2, [r0]
   15b38:	movw	r3, #31944	; 0x7cc8
   15b3c:	movt	r3, #1
   15b40:	cmp	r2, #0
   15b44:	moveq	r0, r3
   15b48:	ldr	r4, [sp]
   15b4c:	add	sp, sp, #4
   15b50:	pop	{pc}		; (ldr pc, [sp], #4)
   15b54:	movw	r0, #31944	; 0x7cc8
   15b58:	movt	r0, #1
   15b5c:	b	15b48 <_obstack_memory_used@@Base+0x2fa0>
   15b60:	strd	r4, [sp, #-20]!	; 0xffffffec
   15b64:	strd	r6, [sp, #8]
   15b68:	str	lr, [sp, #16]
   15b6c:	sub	sp, sp, #12
   15b70:	mov	r7, r1
   15b74:	mov	r5, r2
   15b78:	subs	r6, r0, #0
   15b7c:	addeq	r6, sp, #4
   15b80:	mov	r0, r6
   15b84:	bl	10e34 <mbrtowc@plt>
   15b88:	mov	r4, r0
   15b8c:	cmp	r5, #0
   15b90:	cmnne	r0, #3
   15b94:	bhi	15bb0 <_obstack_memory_used@@Base+0x3008>
   15b98:	mov	r0, r4
   15b9c:	add	sp, sp, #12
   15ba0:	ldrd	r4, [sp]
   15ba4:	ldrd	r6, [sp, #8]
   15ba8:	add	sp, sp, #16
   15bac:	pop	{pc}		; (ldr pc, [sp], #4)
   15bb0:	mov	r0, #0
   15bb4:	bl	15c0c <_obstack_memory_used@@Base+0x3064>
   15bb8:	cmp	r0, #0
   15bbc:	bne	15b98 <_obstack_memory_used@@Base+0x2ff0>
   15bc0:	ldrb	r3, [r7]
   15bc4:	str	r3, [r6]
   15bc8:	mov	r4, #1
   15bcc:	b	15b98 <_obstack_memory_used@@Base+0x2ff0>
   15bd0:	str	r4, [sp, #-8]!
   15bd4:	str	lr, [sp, #4]
   15bd8:	umull	r2, r3, r1, r2
   15bdc:	cmp	r3, #0
   15be0:	bne	15bf8 <_obstack_memory_used@@Base+0x3050>
   15be4:	mov	r1, r2
   15be8:	bl	15a34 <_obstack_memory_used@@Base+0x2e8c>
   15bec:	ldr	r4, [sp]
   15bf0:	add	sp, sp, #4
   15bf4:	pop	{pc}		; (ldr pc, [sp], #4)
   15bf8:	bl	10ee8 <__errno_location@plt>
   15bfc:	mov	r3, #12
   15c00:	str	r3, [r0]
   15c04:	mov	r0, #0
   15c08:	b	15bec <_obstack_memory_used@@Base+0x3044>
   15c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   15c10:	sub	sp, sp, #268	; 0x10c
   15c14:	movw	r2, #257	; 0x101
   15c18:	add	r1, sp, #4
   15c1c:	bl	15c68 <_obstack_memory_used@@Base+0x30c0>
   15c20:	cmp	r0, #0
   15c24:	movne	r0, #0
   15c28:	bne	15c60 <_obstack_memory_used@@Base+0x30b8>
   15c2c:	movw	r1, #31952	; 0x7cd0
   15c30:	movt	r1, #1
   15c34:	add	r0, sp, #4
   15c38:	bl	10d5c <strcmp@plt>
   15c3c:	cmp	r0, #0
   15c40:	beq	15c5c <_obstack_memory_used@@Base+0x30b4>
   15c44:	movw	r1, #31956	; 0x7cd4
   15c48:	movt	r1, #1
   15c4c:	add	r0, sp, #4
   15c50:	bl	10d5c <strcmp@plt>
   15c54:	adds	r0, r0, #0
   15c58:	movne	r0, #1
   15c5c:	and	r0, r0, #1
   15c60:	add	sp, sp, #268	; 0x10c
   15c64:	pop	{pc}		; (ldr pc, [sp], #4)
   15c68:	strd	r4, [sp, #-16]!
   15c6c:	str	r6, [sp, #8]
   15c70:	str	lr, [sp, #12]
   15c74:	mov	r6, r1
   15c78:	mov	r4, r2
   15c7c:	mov	r1, #0
   15c80:	bl	10f48 <setlocale@plt>
   15c84:	subs	r5, r0, #0
   15c88:	beq	15ccc <_obstack_memory_used@@Base+0x3124>
   15c8c:	mov	r0, r5
   15c90:	bl	10edc <strlen@plt>
   15c94:	cmp	r4, r0
   15c98:	bhi	15ce8 <_obstack_memory_used@@Base+0x3140>
   15c9c:	cmp	r4, #0
   15ca0:	moveq	r0, #34	; 0x22
   15ca4:	beq	15cfc <_obstack_memory_used@@Base+0x3154>
   15ca8:	sub	r4, r4, #1
   15cac:	mov	r2, r4
   15cb0:	mov	r1, r5
   15cb4:	mov	r0, r6
   15cb8:	bl	10d8c <memcpy@plt>
   15cbc:	mov	r3, #0
   15cc0:	strb	r3, [r6, r4]
   15cc4:	mov	r0, #34	; 0x22
   15cc8:	b	15cfc <_obstack_memory_used@@Base+0x3154>
   15ccc:	cmp	r4, #0
   15cd0:	moveq	r0, #22
   15cd4:	beq	15cfc <_obstack_memory_used@@Base+0x3154>
   15cd8:	mov	r3, #0
   15cdc:	strb	r3, [r6]
   15ce0:	mov	r0, #22
   15ce4:	b	15cfc <_obstack_memory_used@@Base+0x3154>
   15ce8:	add	r2, r0, #1
   15cec:	mov	r1, r5
   15cf0:	mov	r0, r6
   15cf4:	bl	10d8c <memcpy@plt>
   15cf8:	mov	r0, #0
   15cfc:	ldrd	r4, [sp]
   15d00:	ldr	r6, [sp, #8]
   15d04:	add	sp, sp, #12
   15d08:	pop	{pc}		; (ldr pc, [sp], #4)
   15d0c:	str	r4, [sp, #-8]!
   15d10:	str	lr, [sp, #4]
   15d14:	mov	r1, #0
   15d18:	bl	10f48 <setlocale@plt>
   15d1c:	ldr	r4, [sp]
   15d20:	add	sp, sp, #4
   15d24:	pop	{pc}		; (ldr pc, [sp], #4)
   15d28:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d2c:	mov	r7, r0
   15d30:	ldr	r6, [pc, #72]	; 15d80 <_obstack_memory_used@@Base+0x31d8>
   15d34:	ldr	r5, [pc, #72]	; 15d84 <_obstack_memory_used@@Base+0x31dc>
   15d38:	add	r6, pc, r6
   15d3c:	add	r5, pc, r5
   15d40:	sub	r6, r6, r5
   15d44:	mov	r8, r1
   15d48:	mov	r9, r2
   15d4c:	bl	10d18 <calloc@plt-0x20>
   15d50:	asrs	r6, r6, #2
   15d54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d58:	mov	r4, #0
   15d5c:	add	r4, r4, #1
   15d60:	ldr	r3, [r5], #4
   15d64:	mov	r2, r9
   15d68:	mov	r1, r8
   15d6c:	mov	r0, r7
   15d70:	blx	r3
   15d74:	cmp	r6, r4
   15d78:	bne	15d5c <_obstack_memory_used@@Base+0x31b4>
   15d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15d80:	ldrdeq	r2, [r1], -r4
   15d84:	andeq	r2, r1, ip, asr #3
   15d88:	bx	lr
   15d8c:	ldr	r3, [pc, #12]	; 15da0 <_obstack_memory_used@@Base+0x31f8>
   15d90:	mov	r1, #0
   15d94:	add	r3, pc, r3
   15d98:	ldr	r2, [r3]
   15d9c:	b	10ef4 <__cxa_atexit@plt>
   15da0:	andeq	r2, r1, r4, asr #6

Disassembly of section .fini:

00015da4 <.fini>:
   15da4:	push	{r3, lr}
   15da8:	pop	{r3, pc}
