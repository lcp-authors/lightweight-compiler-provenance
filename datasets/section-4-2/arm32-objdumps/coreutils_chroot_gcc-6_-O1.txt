
../repos/coreutils/src/chroot:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	111f0 <__assert_fail@plt+0x48>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <calloc@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <calloc@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	r7, r1, r0, asr r1

00010eb4 <calloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #94208	; 0x17000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <endgrent@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #94208	; 0x17000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #94208	; 0x17000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #94208	; 0x17000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <getpwnam@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #94208	; 0x17000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <strcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #94208	; 0x17000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <getpwuid@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #94208	; 0x17000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <fflush@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #94208	; 0x17000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <free@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #94208	; 0x17000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <_exit@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #94208	; 0x17000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <memcpy@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #94208	; 0x17000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <execvp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #94208	; 0x17000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <__strtoull_internal@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #94208	; 0x17000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <mbsinit@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #94208	; 0x17000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <memcmp@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #94208	; 0x17000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <fputc_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #94208	; 0x17000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <dcgettext@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #94208	; 0x17000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <realloc@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #94208	; 0x17000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <textdomain@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #94208	; 0x17000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <chdir@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #94208	; 0x17000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <iswprint@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #94208	; 0x17000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <setgroups@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #94208	; 0x17000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <fwrite@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #94208	; 0x17000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <lseek64@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #94208	; 0x17000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <__ctype_get_mb_cur_max@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #94208	; 0x17000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <chroot@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #94208	; 0x17000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <__fpending@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #94208	; 0x17000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <mbrtowc@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #94208	; 0x17000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <error@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #94208	; 0x17000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <getenv@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #94208	; 0x17000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <setgid@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #94208	; 0x17000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <malloc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #94208	; 0x17000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <__libc_start_main@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #94208	; 0x17000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <__freading@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #94208	; 0x17000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <__gmon_start__@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #94208	; 0x17000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <getopt_long@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #94208	; 0x17000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__ctype_b_loc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #94208	; 0x17000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <exit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #94208	; 0x17000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <strtoul@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #94208	; 0x17000
   11084:	ldr	pc, [ip, #32]!

00011088 <strlen@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #94208	; 0x17000
   11090:	ldr	pc, [ip, #24]!

00011094 <strchr@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #94208	; 0x17000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <__errno_location@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #94208	; 0x17000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__cxa_atexit@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #94208	; 0x17000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <getgrouplist@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #90112	; 0x16000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <memset@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #90112	; 0x16000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__printf_chk@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #90112	; 0x16000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <fileno@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #90112	; 0x16000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <__fprintf_chk@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #90112	; 0x16000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <fclose@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #90112	; 0x16000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <fseeko64@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #90112	; 0x16000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strtok@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #90112	; 0x16000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <setlocale@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #90112	; 0x16000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <endpwent@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <strrchr@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <nl_langinfo@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

00011148 <setuid@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3992]!	; 0xf98

00011154 <getgroups@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3984]!	; 0xf90

00011160 <canonicalize_file_name@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3976]!	; 0xf88

0001116c <bindtextdomain@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3968]!	; 0xf80

00011178 <strncmp@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3960]!	; 0xf78

00011184 <abort@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3952]!	; 0xf70

00011190 <getgrgid@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3944]!	; 0xf68

0001119c <getgrnam@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3936]!	; 0xf60

000111a8 <__assert_fail@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3928]!	; 0xf58

Disassembly of section .text:

000111b4 <.text>:
   111b4:	mov	fp, #0
   111b8:	mov	lr, #0
   111bc:	pop	{r1}		; (ldr r1, [sp], #4)
   111c0:	mov	r2, sp
   111c4:	push	{r2}		; (str r2, [sp, #-4]!)
   111c8:	push	{r0}		; (str r0, [sp, #-4]!)
   111cc:	ldr	ip, [pc, #16]	; 111e4 <__assert_fail@plt+0x3c>
   111d0:	push	{ip}		; (str ip, [sp, #-4]!)
   111d4:	ldr	r0, [pc, #12]	; 111e8 <__assert_fail@plt+0x40>
   111d8:	ldr	r3, [pc, #12]	; 111ec <__assert_fail@plt+0x44>
   111dc:	bl	11034 <__libc_start_main@plt>
   111e0:	bl	11184 <abort@plt>
   111e4:	andeq	r6, r1, r4, lsl #8
   111e8:	muleq	r1, r8, r8
   111ec:	andeq	r6, r1, r4, lsr #7
   111f0:	ldr	r3, [pc, #20]	; 1120c <__assert_fail@plt+0x64>
   111f4:	ldr	r2, [pc, #20]	; 11210 <__assert_fail@plt+0x68>
   111f8:	add	r3, pc, r3
   111fc:	ldr	r2, [r3, r2]
   11200:	cmp	r2, #0
   11204:	bxeq	lr
   11208:	b	1104c <__gmon_start__@plt>
   1120c:	andeq	r6, r1, r0, lsl #28
   11210:	andeq	r0, r0, ip, lsl #2
   11214:	ldr	r3, [pc, #28]	; 11238 <__assert_fail@plt+0x90>
   11218:	ldr	r0, [pc, #28]	; 1123c <__assert_fail@plt+0x94>
   1121c:	sub	r3, r3, r0
   11220:	cmp	r3, #6
   11224:	bxls	lr
   11228:	ldr	r3, [pc, #16]	; 11240 <__assert_fail@plt+0x98>
   1122c:	cmp	r3, #0
   11230:	bxeq	lr
   11234:	bx	r3
   11238:	andeq	r8, r2, r3, ror #2
   1123c:	andeq	r8, r2, r0, ror #2
   11240:	andeq	r0, r0, r0
   11244:	ldr	r1, [pc, #36]	; 11270 <__assert_fail@plt+0xc8>
   11248:	ldr	r0, [pc, #36]	; 11274 <__assert_fail@plt+0xcc>
   1124c:	sub	r1, r1, r0
   11250:	asr	r1, r1, #2
   11254:	add	r1, r1, r1, lsr #31
   11258:	asrs	r1, r1, #1
   1125c:	bxeq	lr
   11260:	ldr	r3, [pc, #16]	; 11278 <__assert_fail@plt+0xd0>
   11264:	cmp	r3, #0
   11268:	bxeq	lr
   1126c:	bx	r3
   11270:	andeq	r8, r2, r0, ror #2
   11274:	andeq	r8, r2, r0, ror #2
   11278:	andeq	r0, r0, r0
   1127c:	push	{r4, lr}
   11280:	ldr	r4, [pc, #24]	; 112a0 <__assert_fail@plt+0xf8>
   11284:	ldrb	r3, [r4]
   11288:	cmp	r3, #0
   1128c:	popne	{r4, pc}
   11290:	bl	11214 <__assert_fail@plt+0x6c>
   11294:	mov	r3, #1
   11298:	strb	r3, [r4]
   1129c:	pop	{r4, pc}
   112a0:	andeq	r8, r2, ip, ror r1
   112a4:	ldr	r0, [pc, #40]	; 112d4 <__assert_fail@plt+0x12c>
   112a8:	ldr	r3, [r0]
   112ac:	cmp	r3, #0
   112b0:	bne	112b8 <__assert_fail@plt+0x110>
   112b4:	b	11244 <__assert_fail@plt+0x9c>
   112b8:	ldr	r3, [pc, #24]	; 112d8 <__assert_fail@plt+0x130>
   112bc:	cmp	r3, #0
   112c0:	beq	112b4 <__assert_fail@plt+0x10c>
   112c4:	push	{r4, lr}
   112c8:	blx	r3
   112cc:	pop	{r4, lr}
   112d0:	b	11244 <__assert_fail@plt+0x9c>
   112d4:	andeq	r7, r2, r4, lsl pc
   112d8:	andeq	r0, r0, r0
   112dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112e0:	sub	sp, sp, #44	; 0x2c
   112e4:	str	r0, [sp, #16]
   112e8:	mov	r9, r1
   112ec:	str	r2, [sp, #12]
   112f0:	mov	r8, r3
   112f4:	mov	r3, #0
   112f8:	str	r3, [sp, #36]	; 0x24
   112fc:	bl	14b5c <__assert_fail@plt+0x39b4>
   11300:	str	r0, [sp, #8]
   11304:	ldr	r1, [pc, #480]	; 114ec <__assert_fail@plt+0x344>
   11308:	bl	1110c <strtok@plt>
   1130c:	subs	r4, r0, #0
   11310:	beq	11478 <__assert_fail@plt+0x2d0>
   11314:	mov	sl, #0
   11318:	mov	r5, sl
   1131c:	mov	r6, sl
   11320:	ldr	r7, [pc, #456]	; 114f0 <__assert_fail@plt+0x348>
   11324:	mov	fp, #10
   11328:	b	11378 <__assert_fail@plt+0x1d0>
   1132c:	mov	r0, r4
   11330:	bl	1119c <getgrnam@plt>
   11334:	cmp	r0, #0
   11338:	beq	114c8 <__assert_fail@plt+0x320>
   1133c:	ldr	r3, [r0, #8]
   11340:	str	r3, [sp, #24]
   11344:	mov	r3, #0
   11348:	str	r3, [sp, #28]
   1134c:	ldr	r3, [sp, #36]	; 0x24
   11350:	cmp	r3, r5
   11354:	beq	11434 <__assert_fail@plt+0x28c>
   11358:	ldr	r3, [sp, #24]
   1135c:	str	r3, [r6, r5, lsl #2]
   11360:	add	r5, r5, #1
   11364:	ldr	r1, [pc, #384]	; 114ec <__assert_fail@plt+0x344>
   11368:	mov	r0, #0
   1136c:	bl	1110c <strtok@plt>
   11370:	subs	r4, r0, #0
   11374:	beq	1144c <__assert_fail@plt+0x2a4>
   11378:	str	r7, [sp]
   1137c:	add	r3, sp, #24
   11380:	mov	r2, fp
   11384:	mov	r1, #0
   11388:	mov	r0, r4
   1138c:	bl	15200 <__assert_fail@plt+0x4058>
   11390:	cmp	r0, #0
   11394:	bne	1132c <__assert_fail@plt+0x184>
   11398:	mvn	r0, #0
   1139c:	mov	r1, #0
   113a0:	ldrd	r2, [sp, #24]
   113a4:	cmp	r3, r1
   113a8:	cmpeq	r2, r0
   113ac:	bhi	1132c <__assert_fail@plt+0x184>
   113b0:	bl	11064 <__ctype_b_loc@plt>
   113b4:	ldr	r1, [r0]
   113b8:	mov	r0, r4
   113bc:	ldrb	r3, [r4], #1
   113c0:	lsl	r2, r3, #1
   113c4:	ldrh	r2, [r1, r2]
   113c8:	tst	r2, #8192	; 0x2000
   113cc:	bne	113b8 <__assert_fail@plt+0x210>
   113d0:	cmp	r3, #43	; 0x2b
   113d4:	beq	1134c <__assert_fail@plt+0x1a4>
   113d8:	bl	1119c <getgrnam@plt>
   113dc:	cmp	r0, #0
   113e0:	ldrne	r3, [r0, #8]
   113e4:	strne	r3, [sp, #24]
   113e8:	movne	r3, #0
   113ec:	strne	r3, [sp, #28]
   113f0:	b	1134c <__assert_fail@plt+0x1a4>
   113f4:	bl	110a0 <__errno_location@plt>
   113f8:	ldr	sl, [r0]
   113fc:	mov	r2, #5
   11400:	ldr	r1, [pc, #236]	; 114f4 <__assert_fail@plt+0x34c>
   11404:	mov	r0, #0
   11408:	bl	10f74 <dcgettext@plt>
   1140c:	str	r0, [sp, #20]
   11410:	mov	r0, r4
   11414:	bl	13c94 <__assert_fail@plt+0x2aec>
   11418:	mov	r3, r0
   1141c:	ldr	r2, [sp, #20]
   11420:	mov	r1, sl
   11424:	mov	r0, #0
   11428:	bl	11004 <error@plt>
   1142c:	mvn	sl, #0
   11430:	b	11364 <__assert_fail@plt+0x1bc>
   11434:	mov	r2, #4
   11438:	add	r1, sp, #36	; 0x24
   1143c:	mov	r0, r6
   11440:	bl	146fc <__assert_fail@plt+0x3554>
   11444:	mov	r6, r0
   11448:	b	11358 <__assert_fail@plt+0x1b0>
   1144c:	add	r3, sl, #1
   11450:	cmp	r5, #0
   11454:	movne	r3, #0
   11458:	andeq	r3, r3, #1
   1145c:	cmp	r3, #0
   11460:	beq	114b4 <__assert_fail@plt+0x30c>
   11464:	cmp	r8, #0
   11468:	bne	11480 <__assert_fail@plt+0x2d8>
   1146c:	str	r6, [r9]
   11470:	mvn	sl, #0
   11474:	b	114d8 <__assert_fail@plt+0x330>
   11478:	mov	r6, #0
   1147c:	b	11464 <__assert_fail@plt+0x2bc>
   11480:	mov	r2, #5
   11484:	ldr	r1, [pc, #108]	; 114f8 <__assert_fail@plt+0x350>
   11488:	mov	r0, #0
   1148c:	bl	10f74 <dcgettext@plt>
   11490:	mov	r4, r0
   11494:	ldr	r0, [sp, #16]
   11498:	bl	13c94 <__assert_fail@plt+0x2aec>
   1149c:	mov	r3, r0
   114a0:	mov	r2, r4
   114a4:	mov	r1, #0
   114a8:	mov	r0, r1
   114ac:	bl	11004 <error@plt>
   114b0:	b	1146c <__assert_fail@plt+0x2c4>
   114b4:	str	r6, [r9]
   114b8:	cmp	sl, #0
   114bc:	ldreq	r3, [sp, #12]
   114c0:	streq	r5, [r3]
   114c4:	b	114d8 <__assert_fail@plt+0x330>
   114c8:	cmp	r8, #0
   114cc:	bne	113f4 <__assert_fail@plt+0x24c>
   114d0:	str	r6, [r9]
   114d4:	mvn	sl, #0
   114d8:	ldr	r0, [sp, #8]
   114dc:	bl	120ec <__assert_fail@plt+0xf44>
   114e0:	mov	r0, sl
   114e4:	add	sp, sp, #44	; 0x2c
   114e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   114ec:	andeq	r6, r1, r4, asr #9
   114f0:	andeq	r6, r1, r4, lsr #14
   114f4:	andeq	r6, r1, r8, asr #9
   114f8:	ldrdeq	r6, [r1], -ip
   114fc:	push	{lr}		; (str lr, [sp, #-4]!)
   11500:	sub	sp, sp, #60	; 0x3c
   11504:	subs	r6, r0, #0
   11508:	beq	11544 <__assert_fail@plt+0x39c>
   1150c:	ldr	r3, [pc, #804]	; 11838 <__assert_fail@plt+0x690>
   11510:	ldr	r4, [r3]
   11514:	mov	r2, #5
   11518:	ldr	r1, [pc, #796]	; 1183c <__assert_fail@plt+0x694>
   1151c:	mov	r0, #0
   11520:	bl	10f74 <dcgettext@plt>
   11524:	ldr	r3, [pc, #788]	; 11840 <__assert_fail@plt+0x698>
   11528:	ldr	r3, [r3]
   1152c:	mov	r2, r0
   11530:	mov	r1, #1
   11534:	mov	r0, r4
   11538:	bl	110e8 <__fprintf_chk@plt>
   1153c:	mov	r0, r6
   11540:	bl	11070 <exit@plt>
   11544:	mov	r2, #5
   11548:	ldr	r1, [pc, #756]	; 11844 <__assert_fail@plt+0x69c>
   1154c:	mov	r0, #0
   11550:	bl	10f74 <dcgettext@plt>
   11554:	ldr	r3, [pc, #740]	; 11840 <__assert_fail@plt+0x698>
   11558:	ldr	r2, [r3]
   1155c:	mov	r3, r2
   11560:	mov	r1, r0
   11564:	mov	r0, #1
   11568:	bl	110d0 <__printf_chk@plt>
   1156c:	mov	r2, #5
   11570:	ldr	r1, [pc, #720]	; 11848 <__assert_fail@plt+0x6a0>
   11574:	mov	r0, #0
   11578:	bl	10f74 <dcgettext@plt>
   1157c:	ldr	r4, [pc, #712]	; 1184c <__assert_fail@plt+0x6a4>
   11580:	ldr	r1, [r4]
   11584:	bl	10ecc <fputs_unlocked@plt>
   11588:	mov	r2, #5
   1158c:	ldr	r1, [pc, #700]	; 11850 <__assert_fail@plt+0x6a8>
   11590:	mov	r0, #0
   11594:	bl	10f74 <dcgettext@plt>
   11598:	ldr	r1, [r4]
   1159c:	bl	10ecc <fputs_unlocked@plt>
   115a0:	mov	r2, #5
   115a4:	ldr	r1, [pc, #680]	; 11854 <__assert_fail@plt+0x6ac>
   115a8:	mov	r0, #0
   115ac:	bl	10f74 <dcgettext@plt>
   115b0:	ldr	r1, [r4]
   115b4:	bl	10ecc <fputs_unlocked@plt>
   115b8:	mov	r2, #5
   115bc:	ldr	r1, [pc, #660]	; 11858 <__assert_fail@plt+0x6b0>
   115c0:	mov	r0, #0
   115c4:	bl	10f74 <dcgettext@plt>
   115c8:	mov	r5, r0
   115cc:	ldr	r1, [pc, #648]	; 1185c <__assert_fail@plt+0x6b4>
   115d0:	mov	r0, #4
   115d4:	bl	13a60 <__assert_fail@plt+0x28b8>
   115d8:	mov	r2, r0
   115dc:	mov	r1, r5
   115e0:	mov	r0, #1
   115e4:	bl	110d0 <__printf_chk@plt>
   115e8:	mov	r2, #5
   115ec:	ldr	r1, [pc, #620]	; 11860 <__assert_fail@plt+0x6b8>
   115f0:	mov	r0, #0
   115f4:	bl	10f74 <dcgettext@plt>
   115f8:	ldr	r1, [r4]
   115fc:	bl	10ecc <fputs_unlocked@plt>
   11600:	mov	r2, #5
   11604:	ldr	r1, [pc, #600]	; 11864 <__assert_fail@plt+0x6bc>
   11608:	mov	r0, #0
   1160c:	bl	10f74 <dcgettext@plt>
   11610:	ldr	r1, [r4]
   11614:	bl	10ecc <fputs_unlocked@plt>
   11618:	mov	r2, #5
   1161c:	ldr	r1, [pc, #580]	; 11868 <__assert_fail@plt+0x6c0>
   11620:	mov	r0, #0
   11624:	bl	10f74 <dcgettext@plt>
   11628:	ldr	r1, [r4]
   1162c:	bl	10ecc <fputs_unlocked@plt>
   11630:	mov	ip, sp
   11634:	ldr	lr, [pc, #560]	; 1186c <__assert_fail@plt+0x6c4>
   11638:	ldm	lr!, {r0, r1, r2, r3}
   1163c:	stmia	ip!, {r0, r1, r2, r3}
   11640:	ldm	lr!, {r0, r1, r2, r3}
   11644:	stmia	ip!, {r0, r1, r2, r3}
   11648:	ldm	lr!, {r0, r1, r2, r3}
   1164c:	stmia	ip!, {r0, r1, r2, r3}
   11650:	ldm	lr, {r0, r1}
   11654:	stm	ip, {r0, r1}
   11658:	ldr	r1, [sp]
   1165c:	cmp	r1, #0
   11660:	moveq	r4, sp
   11664:	beq	1168c <__assert_fail@plt+0x4e4>
   11668:	mov	r4, sp
   1166c:	ldr	r5, [pc, #508]	; 11870 <__assert_fail@plt+0x6c8>
   11670:	mov	r0, r5
   11674:	bl	10ef0 <strcmp@plt>
   11678:	cmp	r0, #0
   1167c:	beq	1168c <__assert_fail@plt+0x4e4>
   11680:	ldr	r1, [r4, #8]!
   11684:	cmp	r1, #0
   11688:	bne	11670 <__assert_fail@plt+0x4c8>
   1168c:	ldr	r4, [r4, #4]
   11690:	cmp	r4, #0
   11694:	beq	117a8 <__assert_fail@plt+0x600>
   11698:	mov	r2, #5
   1169c:	ldr	r1, [pc, #464]	; 11874 <__assert_fail@plt+0x6cc>
   116a0:	mov	r0, #0
   116a4:	bl	10f74 <dcgettext@plt>
   116a8:	ldr	r3, [pc, #456]	; 11878 <__assert_fail@plt+0x6d0>
   116ac:	ldr	r2, [pc, #456]	; 1187c <__assert_fail@plt+0x6d4>
   116b0:	mov	r1, r0
   116b4:	mov	r0, #1
   116b8:	bl	110d0 <__printf_chk@plt>
   116bc:	mov	r1, #0
   116c0:	mov	r0, #5
   116c4:	bl	11118 <setlocale@plt>
   116c8:	cmp	r0, #0
   116cc:	beq	116e4 <__assert_fail@plt+0x53c>
   116d0:	mov	r2, #3
   116d4:	ldr	r1, [pc, #420]	; 11880 <__assert_fail@plt+0x6d8>
   116d8:	bl	11178 <strncmp@plt>
   116dc:	cmp	r0, #0
   116e0:	bne	11744 <__assert_fail@plt+0x59c>
   116e4:	mov	r2, #5
   116e8:	ldr	r1, [pc, #404]	; 11884 <__assert_fail@plt+0x6dc>
   116ec:	mov	r0, #0
   116f0:	bl	10f74 <dcgettext@plt>
   116f4:	ldr	r5, [pc, #372]	; 11870 <__assert_fail@plt+0x6c8>
   116f8:	mov	r3, r5
   116fc:	ldr	r2, [pc, #372]	; 11878 <__assert_fail@plt+0x6d0>
   11700:	mov	r1, r0
   11704:	mov	r0, #1
   11708:	bl	110d0 <__printf_chk@plt>
   1170c:	mov	r2, #5
   11710:	ldr	r1, [pc, #368]	; 11888 <__assert_fail@plt+0x6e0>
   11714:	mov	r0, #0
   11718:	bl	10f74 <dcgettext@plt>
   1171c:	mov	r1, r0
   11720:	ldr	r2, [pc, #356]	; 1188c <__assert_fail@plt+0x6e4>
   11724:	ldr	r3, [pc, #356]	; 11890 <__assert_fail@plt+0x6e8>
   11728:	cmp	r4, r5
   1172c:	movne	r3, r2
   11730:	mov	r2, r4
   11734:	mov	r0, #1
   11738:	bl	110d0 <__printf_chk@plt>
   1173c:	b	1153c <__assert_fail@plt+0x394>
   11740:	ldr	r4, [pc, #296]	; 11870 <__assert_fail@plt+0x6c8>
   11744:	mov	r2, #5
   11748:	ldr	r1, [pc, #324]	; 11894 <__assert_fail@plt+0x6ec>
   1174c:	mov	r0, #0
   11750:	bl	10f74 <dcgettext@plt>
   11754:	ldr	r3, [pc, #240]	; 1184c <__assert_fail@plt+0x6a4>
   11758:	ldr	r1, [r3]
   1175c:	bl	10ecc <fputs_unlocked@plt>
   11760:	b	116e4 <__assert_fail@plt+0x53c>
   11764:	mov	r2, #5
   11768:	ldr	r1, [pc, #276]	; 11884 <__assert_fail@plt+0x6dc>
   1176c:	mov	r0, #0
   11770:	bl	10f74 <dcgettext@plt>
   11774:	ldr	r4, [pc, #244]	; 11870 <__assert_fail@plt+0x6c8>
   11778:	mov	r3, r4
   1177c:	ldr	r2, [pc, #244]	; 11878 <__assert_fail@plt+0x6d0>
   11780:	mov	r1, r0
   11784:	mov	r0, #1
   11788:	bl	110d0 <__printf_chk@plt>
   1178c:	mov	r2, #5
   11790:	ldr	r1, [pc, #240]	; 11888 <__assert_fail@plt+0x6e0>
   11794:	mov	r0, #0
   11798:	bl	10f74 <dcgettext@plt>
   1179c:	mov	r1, r0
   117a0:	ldr	r3, [pc, #232]	; 11890 <__assert_fail@plt+0x6e8>
   117a4:	b	11730 <__assert_fail@plt+0x588>
   117a8:	mov	r2, #5
   117ac:	ldr	r1, [pc, #192]	; 11874 <__assert_fail@plt+0x6cc>
   117b0:	mov	r0, #0
   117b4:	bl	10f74 <dcgettext@plt>
   117b8:	ldr	r3, [pc, #184]	; 11878 <__assert_fail@plt+0x6d0>
   117bc:	ldr	r2, [pc, #184]	; 1187c <__assert_fail@plt+0x6d4>
   117c0:	mov	r1, r0
   117c4:	mov	r0, #1
   117c8:	bl	110d0 <__printf_chk@plt>
   117cc:	mov	r1, #0
   117d0:	mov	r0, #5
   117d4:	bl	11118 <setlocale@plt>
   117d8:	cmp	r0, #0
   117dc:	beq	11764 <__assert_fail@plt+0x5bc>
   117e0:	mov	r2, #3
   117e4:	ldr	r1, [pc, #148]	; 11880 <__assert_fail@plt+0x6d8>
   117e8:	bl	11178 <strncmp@plt>
   117ec:	cmp	r0, #0
   117f0:	bne	11740 <__assert_fail@plt+0x598>
   117f4:	mov	r2, #5
   117f8:	ldr	r1, [pc, #132]	; 11884 <__assert_fail@plt+0x6dc>
   117fc:	mov	r0, #0
   11800:	bl	10f74 <dcgettext@plt>
   11804:	ldr	r4, [pc, #100]	; 11870 <__assert_fail@plt+0x6c8>
   11808:	mov	r3, r4
   1180c:	ldr	r2, [pc, #100]	; 11878 <__assert_fail@plt+0x6d0>
   11810:	mov	r1, r0
   11814:	mov	r0, #1
   11818:	bl	110d0 <__printf_chk@plt>
   1181c:	mov	r2, #5
   11820:	ldr	r1, [pc, #96]	; 11888 <__assert_fail@plt+0x6e0>
   11824:	mov	r0, #0
   11828:	bl	10f74 <dcgettext@plt>
   1182c:	mov	r1, r0
   11830:	ldr	r3, [pc, #88]	; 11890 <__assert_fail@plt+0x6e8>
   11834:	b	11730 <__assert_fail@plt+0x588>
   11838:	andeq	r8, r2, r0, ror r1
   1183c:	strdeq	r6, [r1], -ip
   11840:	andeq	r8, r2, r8, lsl #3
   11844:	andeq	r6, r1, r4, lsr #10
   11848:	andeq	r6, r1, r4, ror #10
   1184c:	andeq	r8, r2, r4, ror r1
   11850:	muleq	r1, r8, r5
   11854:	andeq	r6, r1, r4, ror #11
   11858:	andeq	r6, r1, r0, lsr r6
   1185c:	andeq	r6, r1, r4, ror r6
   11860:	andeq	r6, r1, r8, ror r6
   11864:	andeq	r6, r1, r8, lsr #13
   11868:	andeq	r6, r1, r0, ror #13
   1186c:	andeq	r6, r1, ip, lsr #8
   11870:	strdeq	r6, [r1], -r4
   11874:	andeq	r6, r1, r8, lsr #14
   11878:	andeq	r6, r1, r0, asr #14
   1187c:	andeq	r6, r1, r8, ror #14
   11880:	andeq	r6, r1, r8, ror r7
   11884:	andeq	r6, r1, r4, asr #15
   11888:	andeq	r6, r1, r0, ror #15
   1188c:	andeq	r6, r1, r4, lsr #14
   11890:	andeq	r6, r1, r4, lsr #19
   11894:	andeq	r6, r1, ip, ror r7
   11898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1189c:	sub	sp, sp, #44	; 0x2c
   118a0:	str	r0, [sp, #8]
   118a4:	mov	r5, r1
   118a8:	mvn	r3, #0
   118ac:	str	r3, [sp, #36]	; 0x24
   118b0:	str	r3, [sp, #32]
   118b4:	mov	r4, #0
   118b8:	str	r4, [sp, #28]
   118bc:	str	r4, [sp, #24]
   118c0:	ldr	r0, [r1]
   118c4:	bl	12144 <__assert_fail@plt+0xf9c>
   118c8:	ldr	r1, [pc, #1676]	; 11f5c <__assert_fail@plt+0xdb4>
   118cc:	mov	r0, #6
   118d0:	bl	11118 <setlocale@plt>
   118d4:	ldr	r7, [pc, #1668]	; 11f60 <__assert_fail@plt+0xdb8>
   118d8:	ldr	r1, [pc, #1668]	; 11f64 <__assert_fail@plt+0xdbc>
   118dc:	mov	r0, r7
   118e0:	bl	1116c <bindtextdomain@plt>
   118e4:	mov	r0, r7
   118e8:	bl	10f8c <textdomain@plt>
   118ec:	mov	r2, #125	; 0x7d
   118f0:	ldr	r3, [pc, #1648]	; 11f68 <__assert_fail@plt+0xdc0>
   118f4:	str	r2, [r3]
   118f8:	ldr	r0, [pc, #1644]	; 11f6c <__assert_fail@plt+0xdc4>
   118fc:	bl	16408 <__assert_fail@plt+0x5260>
   11900:	str	r4, [sp, #12]
   11904:	mov	r6, r4
   11908:	ldr	r8, [pc, #1632]	; 11f70 <__assert_fail@plt+0xdc8>
   1190c:	ldr	r7, [pc, #1632]	; 11f74 <__assert_fail@plt+0xdcc>
   11910:	ldr	sl, [pc, #1632]	; 11f78 <__assert_fail@plt+0xdd0>
   11914:	ldr	r9, [pc, #1632]	; 11f7c <__assert_fail@plt+0xdd4>
   11918:	ldr	fp, [pc, #1632]	; 11f80 <__assert_fail@plt+0xdd8>
   1191c:	mov	r3, #0
   11920:	str	r3, [sp]
   11924:	mov	r3, r8
   11928:	mov	r2, r7
   1192c:	mov	r1, r5
   11930:	ldr	r0, [sp, #8]
   11934:	bl	11058 <getopt_long@plt>
   11938:	cmn	r0, #1
   1193c:	beq	119f0 <__assert_fail@plt+0x848>
   11940:	cmp	r0, #256	; 0x100
   11944:	beq	119ac <__assert_fail@plt+0x804>
   11948:	bgt	11964 <__assert_fail@plt+0x7bc>
   1194c:	cmn	r0, #3
   11950:	beq	119b4 <__assert_fail@plt+0x80c>
   11954:	cmn	r0, #2
   11958:	bne	119e8 <__assert_fail@plt+0x840>
   1195c:	mov	r0, #0
   11960:	bl	114fc <__assert_fail@plt+0x354>
   11964:	cmp	r0, r9
   11968:	beq	11980 <__assert_fail@plt+0x7d8>
   1196c:	cmp	r0, fp
   11970:	bne	119e8 <__assert_fail@plt+0x840>
   11974:	mov	r3, #1
   11978:	str	r3, [sp, #12]
   1197c:	b	1191c <__assert_fail@plt+0x774>
   11980:	ldr	r4, [sl]
   11984:	mov	r0, r4
   11988:	bl	11088 <strlen@plt>
   1198c:	cmp	r0, #0
   11990:	beq	1191c <__assert_fail@plt+0x774>
   11994:	sub	r0, r0, #1
   11998:	ldrb	r3, [r4, r0]
   1199c:	cmp	r3, #58	; 0x3a
   119a0:	moveq	r3, #0
   119a4:	strbeq	r3, [r4, r0]
   119a8:	b	1191c <__assert_fail@plt+0x774>
   119ac:	ldr	r6, [sl]
   119b0:	b	1191c <__assert_fail@plt+0x774>
   119b4:	mov	r4, #0
   119b8:	str	r4, [sp, #4]
   119bc:	ldr	r3, [pc, #1472]	; 11f84 <__assert_fail@plt+0xddc>
   119c0:	str	r3, [sp]
   119c4:	ldr	r3, [pc, #1468]	; 11f88 <__assert_fail@plt+0xde0>
   119c8:	ldr	r3, [r3]
   119cc:	ldr	r2, [pc, #1464]	; 11f8c <__assert_fail@plt+0xde4>
   119d0:	ldr	r1, [pc, #1464]	; 11f90 <__assert_fail@plt+0xde8>
   119d4:	ldr	r0, [pc, #1464]	; 11f94 <__assert_fail@plt+0xdec>
   119d8:	ldr	r0, [r0]
   119dc:	bl	14508 <__assert_fail@plt+0x3360>
   119e0:	mov	r0, r4
   119e4:	bl	11070 <exit@plt>
   119e8:	mov	r0, #125	; 0x7d
   119ec:	bl	114fc <__assert_fail@plt+0x354>
   119f0:	ldr	r3, [pc, #1440]	; 11f98 <__assert_fail@plt+0xdf0>
   119f4:	ldr	r3, [r3]
   119f8:	ldr	r2, [sp, #8]
   119fc:	cmp	r2, r3
   11a00:	ble	11ad8 <__assert_fail@plt+0x930>
   11a04:	ldr	r8, [r5, r3, lsl #2]
   11a08:	mov	r0, r8
   11a0c:	bl	11160 <canonicalize_file_name@plt>
   11a10:	subs	r7, r0, #0
   11a14:	beq	11a2c <__assert_fail@plt+0x884>
   11a18:	mov	r1, r7
   11a1c:	ldr	r0, [pc, #1400]	; 11f9c <__assert_fail@plt+0xdf4>
   11a20:	bl	10ef0 <strcmp@plt>
   11a24:	cmp	r0, #0
   11a28:	beq	11df0 <__assert_fail@plt+0xc48>
   11a2c:	mov	r0, r7
   11a30:	bl	120ec <__assert_fail@plt+0xf44>
   11a34:	ldr	r3, [sp, #12]
   11a38:	cmp	r3, #0
   11a3c:	bne	11b00 <__assert_fail@plt+0x958>
   11a40:	cmp	r4, #0
   11a44:	beq	11a60 <__assert_fail@plt+0x8b8>
   11a48:	mov	r3, #0
   11a4c:	str	r3, [sp]
   11a50:	add	r2, sp, #32
   11a54:	add	r1, sp, #36	; 0x24
   11a58:	mov	r0, r4
   11a5c:	bl	13f8c <__assert_fail@plt+0x2de4>
   11a60:	ldr	r0, [sp, #36]	; 0x24
   11a64:	cmn	r0, #1
   11a68:	beq	11b60 <__assert_fail@plt+0x9b8>
   11a6c:	cmp	r6, #0
   11a70:	beq	11f48 <__assert_fail@plt+0xda0>
   11a74:	ldr	r3, [sp, #32]
   11a78:	cmn	r3, #1
   11a7c:	movne	r7, #0
   11a80:	beq	11b3c <__assert_fail@plt+0x994>
   11a84:	ldrb	r3, [r6]
   11a88:	cmp	r3, #0
   11a8c:	bne	11b9c <__assert_fail@plt+0x9f4>
   11a90:	mov	r0, r8
   11a94:	bl	10fe0 <chroot@plt>
   11a98:	cmp	r0, #0
   11a9c:	bne	11bb4 <__assert_fail@plt+0xa0c>
   11aa0:	ldr	r0, [pc, #1268]	; 11f9c <__assert_fail@plt+0xdf4>
   11aa4:	bl	10f98 <chdir@plt>
   11aa8:	cmp	r0, #0
   11aac:	beq	11e18 <__assert_fail@plt+0xc70>
   11ab0:	bl	110a0 <__errno_location@plt>
   11ab4:	ldr	r4, [r0]
   11ab8:	mov	r2, #5
   11abc:	ldr	r1, [pc, #1244]	; 11fa0 <__assert_fail@plt+0xdf8>
   11ac0:	mov	r0, #0
   11ac4:	bl	10f74 <dcgettext@plt>
   11ac8:	mov	r2, r0
   11acc:	mov	r1, r4
   11ad0:	mov	r0, #125	; 0x7d
   11ad4:	bl	11004 <error@plt>
   11ad8:	mov	r2, #5
   11adc:	ldr	r1, [pc, #1216]	; 11fa4 <__assert_fail@plt+0xdfc>
   11ae0:	mov	r0, #0
   11ae4:	bl	10f74 <dcgettext@plt>
   11ae8:	mov	r2, r0
   11aec:	mov	r1, #0
   11af0:	mov	r0, r1
   11af4:	bl	11004 <error@plt>
   11af8:	mov	r0, #125	; 0x7d
   11afc:	bl	114fc <__assert_fail@plt+0x354>
   11b00:	mov	r2, #5
   11b04:	ldr	r1, [pc, #1180]	; 11fa8 <__assert_fail@plt+0xe00>
   11b08:	mov	r0, #0
   11b0c:	bl	10f74 <dcgettext@plt>
   11b10:	mov	r4, r0
   11b14:	ldr	r1, [pc, #1152]	; 11f9c <__assert_fail@plt+0xdf4>
   11b18:	mov	r0, #4
   11b1c:	bl	13a60 <__assert_fail@plt+0x28b8>
   11b20:	mov	r3, r0
   11b24:	mov	r2, r4
   11b28:	mov	r1, #0
   11b2c:	mov	r0, r1
   11b30:	bl	11004 <error@plt>
   11b34:	mov	r0, #125	; 0x7d
   11b38:	bl	114fc <__assert_fail@plt+0x354>
   11b3c:	bl	10efc <getpwuid@plt>
   11b40:	cmp	r0, #0
   11b44:	beq	11b94 <__assert_fail@plt+0x9ec>
   11b48:	ldr	r3, [sp, #32]
   11b4c:	cmn	r3, #1
   11b50:	ldreq	r3, [r0, #12]
   11b54:	streq	r3, [sp, #32]
   11b58:	ldr	r7, [r0]
   11b5c:	b	11b64 <__assert_fail@plt+0x9bc>
   11b60:	mov	r7, #0
   11b64:	cmp	r6, #0
   11b68:	bne	11a84 <__assert_fail@plt+0x8dc>
   11b6c:	ldr	r1, [sp, #32]
   11b70:	cmp	r7, #0
   11b74:	cmnne	r1, #1
   11b78:	beq	11a90 <__assert_fail@plt+0x8e8>
   11b7c:	add	r2, sp, #28
   11b80:	mov	r0, r7
   11b84:	bl	14bb8 <__assert_fail@plt+0x3a10>
   11b88:	cmp	r0, #0
   11b8c:	strgt	r0, [sp, #24]
   11b90:	b	11a90 <__assert_fail@plt+0x8e8>
   11b94:	mov	r7, #0
   11b98:	b	11b64 <__assert_fail@plt+0x9bc>
   11b9c:	mov	r3, #0
   11ba0:	add	r2, sp, #24
   11ba4:	add	r1, sp, #28
   11ba8:	mov	r0, r6
   11bac:	bl	112dc <__assert_fail@plt+0x134>
   11bb0:	b	11a90 <__assert_fail@plt+0x8e8>
   11bb4:	bl	110a0 <__errno_location@plt>
   11bb8:	ldr	r4, [r0]
   11bbc:	mov	r2, #5
   11bc0:	ldr	r1, [pc, #996]	; 11fac <__assert_fail@plt+0xe04>
   11bc4:	mov	r0, #0
   11bc8:	bl	10f74 <dcgettext@plt>
   11bcc:	mov	r5, r0
   11bd0:	mov	r1, r8
   11bd4:	mov	r0, #4
   11bd8:	bl	13a60 <__assert_fail@plt+0x28b8>
   11bdc:	mov	r3, r0
   11be0:	mov	r2, r5
   11be4:	mov	r1, r4
   11be8:	mov	r0, #125	; 0x7d
   11bec:	bl	11004 <error@plt>
   11bf0:	mov	r7, #0
   11bf4:	b	11aa0 <__assert_fail@plt+0x8f8>
   11bf8:	ldr	r0, [pc, #944]	; 11fb0 <__assert_fail@plt+0xe08>
   11bfc:	bl	11010 <getenv@plt>
   11c00:	ldr	r3, [pc, #940]	; 11fb4 <__assert_fail@plt+0xe0c>
   11c04:	cmp	r0, #0
   11c08:	moveq	r0, r3
   11c0c:	str	r0, [r5]
   11c10:	ldr	r3, [pc, #928]	; 11fb8 <__assert_fail@plt+0xe10>
   11c14:	str	r3, [r5, #4]
   11c18:	mov	r3, #0
   11c1c:	str	r3, [r5, #8]
   11c20:	b	11e38 <__assert_fail@plt+0xc90>
   11c24:	ldr	r3, [sp, #32]
   11c28:	cmn	r3, #1
   11c2c:	bne	11c78 <__assert_fail@plt+0xad0>
   11c30:	bl	110a0 <__errno_location@plt>
   11c34:	mov	r3, r4
   11c38:	ldr	r2, [pc, #892]	; 11fbc <__assert_fail@plt+0xe14>
   11c3c:	ldr	r1, [r0]
   11c40:	mov	r0, #125	; 0x7d
   11c44:	bl	11004 <error@plt>
   11c48:	ldr	r0, [sp, #36]	; 0x24
   11c4c:	cmn	r0, #1
   11c50:	bne	11e6c <__assert_fail@plt+0xcc4>
   11c54:	b	11c78 <__assert_fail@plt+0xad0>
   11c58:	bl	10efc <getpwuid@plt>
   11c5c:	cmp	r0, #0
   11c60:	beq	11ccc <__assert_fail@plt+0xb24>
   11c64:	ldr	r3, [sp, #32]
   11c68:	cmn	r3, #1
   11c6c:	ldreq	r3, [r0, #12]
   11c70:	streq	r3, [sp, #32]
   11c74:	ldr	r7, [r0]
   11c78:	ldr	r4, [sp, #28]
   11c7c:	mov	r3, #0
   11c80:	str	r3, [sp, #20]
   11c84:	cmp	r6, r3
   11c88:	bne	11e8c <__assert_fail@plt+0xce4>
   11c8c:	ldr	r1, [sp, #32]
   11c90:	cmp	r7, #0
   11c94:	cmnne	r1, #1
   11c98:	beq	11cb8 <__assert_fail@plt+0xb10>
   11c9c:	add	r2, sp, #20
   11ca0:	mov	r0, r7
   11ca4:	bl	14bb8 <__assert_fail@plt+0x3a10>
   11ca8:	cmp	r0, #0
   11cac:	strgt	r0, [sp, #24]
   11cb0:	ldrgt	r4, [sp, #20]
   11cb4:	ble	11d44 <__assert_fail@plt+0xb9c>
   11cb8:	ldr	r3, [sp, #36]	; 0x24
   11cbc:	cmn	r3, #1
   11cc0:	cmpeq	r6, #0
   11cc4:	beq	11eac <__assert_fail@plt+0xd04>
   11cc8:	b	11e98 <__assert_fail@plt+0xcf0>
   11ccc:	ldr	r3, [sp, #32]
   11cd0:	cmn	r3, #1
   11cd4:	bne	11c78 <__assert_fail@plt+0xad0>
   11cd8:	bl	110a0 <__errno_location@plt>
   11cdc:	ldr	r4, [r0]
   11ce0:	mov	r2, #5
   11ce4:	ldr	r1, [pc, #724]	; 11fc0 <__assert_fail@plt+0xe18>
   11ce8:	mov	r0, #0
   11cec:	bl	10f74 <dcgettext@plt>
   11cf0:	ldr	r3, [sp, #36]	; 0x24
   11cf4:	mov	r2, r0
   11cf8:	mov	r1, r4
   11cfc:	mov	r0, #125	; 0x7d
   11d00:	bl	11004 <error@plt>
   11d04:	add	r2, sp, #40	; 0x28
   11d08:	ldr	r3, [r2, #-16]!
   11d0c:	clz	r3, r3
   11d10:	lsr	r3, r3, #5
   11d14:	add	r1, sp, #20
   11d18:	mov	r0, r6
   11d1c:	bl	112dc <__assert_fail@plt+0x134>
   11d20:	cmp	r0, #0
   11d24:	beq	11d3c <__assert_fail@plt+0xb94>
   11d28:	ldr	r3, [sp, #24]
   11d2c:	cmp	r3, #0
   11d30:	moveq	r4, #125	; 0x7d
   11d34:	beq	11f3c <__assert_fail@plt+0xd94>
   11d38:	b	11e98 <__assert_fail@plt+0xcf0>
   11d3c:	ldr	r4, [sp, #20]
   11d40:	b	11e98 <__assert_fail@plt+0xcf0>
   11d44:	ldr	r3, [sp, #24]
   11d48:	cmp	r3, #0
   11d4c:	bne	11cb8 <__assert_fail@plt+0xb10>
   11d50:	bl	110a0 <__errno_location@plt>
   11d54:	ldr	r4, [r0]
   11d58:	mov	r2, #5
   11d5c:	ldr	r1, [pc, #608]	; 11fc4 <__assert_fail@plt+0xe1c>
   11d60:	mov	r0, #0
   11d64:	bl	10f74 <dcgettext@plt>
   11d68:	mov	r2, r0
   11d6c:	mov	r1, r4
   11d70:	mov	r0, #125	; 0x7d
   11d74:	bl	11004 <error@plt>
   11d78:	bl	110a0 <__errno_location@plt>
   11d7c:	ldr	r4, [r0]
   11d80:	mov	r2, #5
   11d84:	ldr	r1, [pc, #572]	; 11fc8 <__assert_fail@plt+0xe20>
   11d88:	mov	r0, #0
   11d8c:	bl	10f74 <dcgettext@plt>
   11d90:	mov	r2, r0
   11d94:	mov	r1, r4
   11d98:	mov	r0, #125	; 0x7d
   11d9c:	bl	11004 <error@plt>
   11da0:	bl	110a0 <__errno_location@plt>
   11da4:	ldr	r4, [r0]
   11da8:	mov	r2, #5
   11dac:	ldr	r1, [pc, #536]	; 11fcc <__assert_fail@plt+0xe24>
   11db0:	mov	r0, #0
   11db4:	bl	10f74 <dcgettext@plt>
   11db8:	mov	r2, r0
   11dbc:	mov	r1, r4
   11dc0:	mov	r0, #125	; 0x7d
   11dc4:	bl	11004 <error@plt>
   11dc8:	bl	110a0 <__errno_location@plt>
   11dcc:	ldr	r4, [r0]
   11dd0:	mov	r2, #5
   11dd4:	ldr	r1, [pc, #500]	; 11fd0 <__assert_fail@plt+0xe28>
   11dd8:	mov	r0, #0
   11ddc:	bl	10f74 <dcgettext@plt>
   11de0:	mov	r2, r0
   11de4:	mov	r1, r4
   11de8:	mov	r0, #125	; 0x7d
   11dec:	bl	11004 <error@plt>
   11df0:	mov	r0, r7
   11df4:	bl	120ec <__assert_fail@plt+0xf44>
   11df8:	mov	r0, r8
   11dfc:	bl	10fe0 <chroot@plt>
   11e00:	cmp	r0, #0
   11e04:	bne	11bb4 <__assert_fail@plt+0xa0c>
   11e08:	ldr	r3, [sp, #12]
   11e0c:	cmp	r3, #0
   11e10:	movne	r7, #0
   11e14:	beq	11bf0 <__assert_fail@plt+0xa48>
   11e18:	ldr	r3, [pc, #376]	; 11f98 <__assert_fail@plt+0xdf0>
   11e1c:	ldr	r3, [r3]
   11e20:	add	r2, r3, #1
   11e24:	ldr	r1, [sp, #8]
   11e28:	cmp	r1, r2
   11e2c:	addne	r3, r3, #1
   11e30:	addne	r5, r5, r3, lsl #2
   11e34:	beq	11bf8 <__assert_fail@plt+0xa50>
   11e38:	cmp	r4, #0
   11e3c:	beq	11c48 <__assert_fail@plt+0xaa0>
   11e40:	mov	r3, #0
   11e44:	str	r3, [sp]
   11e48:	add	r2, sp, #32
   11e4c:	add	r1, sp, #36	; 0x24
   11e50:	mov	r0, r4
   11e54:	bl	13f8c <__assert_fail@plt+0x2de4>
   11e58:	subs	r4, r0, #0
   11e5c:	beq	11c48 <__assert_fail@plt+0xaa0>
   11e60:	ldr	r0, [sp, #36]	; 0x24
   11e64:	cmn	r0, #1
   11e68:	beq	11c24 <__assert_fail@plt+0xa7c>
   11e6c:	cmp	r6, #0
   11e70:	beq	11c58 <__assert_fail@plt+0xab0>
   11e74:	ldr	r3, [sp, #32]
   11e78:	cmn	r3, #1
   11e7c:	ldrne	r4, [sp, #28]
   11e80:	movne	r3, #0
   11e84:	strne	r3, [sp, #20]
   11e88:	beq	11c58 <__assert_fail@plt+0xab0>
   11e8c:	ldrb	r3, [r6]
   11e90:	cmp	r3, #0
   11e94:	bne	11d04 <__assert_fail@plt+0xb5c>
   11e98:	mov	r1, r4
   11e9c:	ldr	r0, [sp, #24]
   11ea0:	bl	10fb0 <setgroups@plt>
   11ea4:	cmp	r0, #0
   11ea8:	bne	11d78 <__assert_fail@plt+0xbd0>
   11eac:	ldr	r0, [sp, #20]
   11eb0:	bl	120ec <__assert_fail@plt+0xf44>
   11eb4:	ldr	r0, [sp, #28]
   11eb8:	bl	120ec <__assert_fail@plt+0xf44>
   11ebc:	ldr	r0, [sp, #32]
   11ec0:	cmn	r0, #1
   11ec4:	beq	11ed4 <__assert_fail@plt+0xd2c>
   11ec8:	bl	1101c <setgid@plt>
   11ecc:	cmp	r0, #0
   11ed0:	bne	11da0 <__assert_fail@plt+0xbf8>
   11ed4:	ldr	r0, [sp, #36]	; 0x24
   11ed8:	cmn	r0, #1
   11edc:	beq	11eec <__assert_fail@plt+0xd44>
   11ee0:	bl	11148 <setuid@plt>
   11ee4:	cmp	r0, #0
   11ee8:	bne	11dc8 <__assert_fail@plt+0xc20>
   11eec:	mov	r1, r5
   11ef0:	ldr	r0, [r5]
   11ef4:	bl	10f38 <execvp@plt>
   11ef8:	bl	110a0 <__errno_location@plt>
   11efc:	ldr	r6, [r0]
   11f00:	cmp	r6, #2
   11f04:	moveq	r4, #127	; 0x7f
   11f08:	movne	r4, #126	; 0x7e
   11f0c:	mov	r2, #5
   11f10:	ldr	r1, [pc, #188]	; 11fd4 <__assert_fail@plt+0xe2c>
   11f14:	mov	r0, #0
   11f18:	bl	10f74 <dcgettext@plt>
   11f1c:	mov	r7, r0
   11f20:	ldr	r0, [r5]
   11f24:	bl	13c94 <__assert_fail@plt+0x2aec>
   11f28:	mov	r3, r0
   11f2c:	mov	r2, r7
   11f30:	mov	r1, r6
   11f34:	mov	r0, #0
   11f38:	bl	11004 <error@plt>
   11f3c:	mov	r0, r4
   11f40:	add	sp, sp, #44	; 0x2c
   11f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11f48:	bl	10efc <getpwuid@plt>
   11f4c:	cmp	r0, #0
   11f50:	moveq	r7, r6
   11f54:	bne	11b48 <__assert_fail@plt+0x9a0>
   11f58:	b	11b6c <__assert_fail@plt+0x9c4>
   11f5c:	andeq	r6, r1, r4, lsr #14
   11f60:	andeq	r6, r1, ip, ror #14
   11f64:	andeq	r6, r1, ip, lsl r8
   11f68:	andeq	r8, r2, ip, lsl r1
   11f6c:	strdeq	r1, [r1], -r8
   11f70:	andeq	r6, r1, r4, ror #8
   11f74:	andeq	r6, r1, r4, asr #16
   11f78:	andeq	r8, r2, r8, ror r1
   11f7c:	andeq	r0, r0, r1, lsl #2
   11f80:	andeq	r0, r0, r2, lsl #2
   11f84:	andeq	r6, r1, r4, lsr r8
   11f88:	andeq	r8, r2, r8, lsl r1
   11f8c:	andeq	r6, r1, r8, ror #14
   11f90:	strdeq	r6, [r1], -r4
   11f94:	andeq	r8, r2, r4, ror r1
   11f98:	andeq	r8, r2, r8, ror #2
   11f9c:	andeq	r6, r1, r4, ror r6
   11fa0:			; <UNDEFINED> instruction: 0x000168b4
   11fa4:	andeq	r6, r1, r8, asr #16
   11fa8:	andeq	r6, r1, r8, asr r8
   11fac:	muleq	r1, r0, r8
   11fb0:	ldrdeq	r6, [r1], -r4
   11fb4:	andeq	r6, r1, r4, lsl r8
   11fb8:	ldrdeq	r6, [r1], -ip
   11fbc:	andeq	r6, r1, r8, asr sl
   11fc0:	andeq	r6, r1, r0, ror #17
   11fc4:	andeq	r6, r1, r8, lsl #18
   11fc8:	andeq	r6, r1, ip, lsr #18
   11fcc:	andeq	r6, r1, r0, asr r9
   11fd0:	andeq	r6, r1, r8, ror #18
   11fd4:	andeq	r6, r1, r0, lsl #19
   11fd8:	ldr	r3, [pc, #4]	; 11fe4 <__assert_fail@plt+0xe3c>
   11fdc:	str	r0, [r3]
   11fe0:	bx	lr
   11fe4:	andeq	r8, r2, r0, lsl #3
   11fe8:	ldr	r3, [pc, #4]	; 11ff4 <__assert_fail@plt+0xe4c>
   11fec:	strb	r0, [r3, #4]
   11ff0:	bx	lr
   11ff4:	andeq	r8, r2, r0, lsl #3
   11ff8:	push	{r4, r5, r6, lr}
   11ffc:	sub	sp, sp, #8
   12000:	ldr	r3, [pc, #200]	; 120d0 <__assert_fail@plt+0xf28>
   12004:	ldr	r0, [r3]
   12008:	bl	15750 <__assert_fail@plt+0x45a8>
   1200c:	cmp	r0, #0
   12010:	beq	12034 <__assert_fail@plt+0xe8c>
   12014:	ldr	r3, [pc, #184]	; 120d4 <__assert_fail@plt+0xf2c>
   12018:	ldrb	r3, [r3, #4]
   1201c:	cmp	r3, #0
   12020:	beq	12050 <__assert_fail@plt+0xea8>
   12024:	bl	110a0 <__errno_location@plt>
   12028:	ldr	r3, [r0]
   1202c:	cmp	r3, #32
   12030:	bne	12050 <__assert_fail@plt+0xea8>
   12034:	ldr	r3, [pc, #156]	; 120d8 <__assert_fail@plt+0xf30>
   12038:	ldr	r0, [r3]
   1203c:	bl	15750 <__assert_fail@plt+0x45a8>
   12040:	cmp	r0, #0
   12044:	bne	120c4 <__assert_fail@plt+0xf1c>
   12048:	add	sp, sp, #8
   1204c:	pop	{r4, r5, r6, pc}
   12050:	mov	r2, #5
   12054:	ldr	r1, [pc, #128]	; 120dc <__assert_fail@plt+0xf34>
   12058:	mov	r0, #0
   1205c:	bl	10f74 <dcgettext@plt>
   12060:	mov	r4, r0
   12064:	ldr	r3, [pc, #104]	; 120d4 <__assert_fail@plt+0xf2c>
   12068:	ldr	r5, [r3]
   1206c:	cmp	r5, #0
   12070:	beq	120a8 <__assert_fail@plt+0xf00>
   12074:	bl	110a0 <__errno_location@plt>
   12078:	ldr	r6, [r0]
   1207c:	mov	r0, r5
   12080:	bl	13b0c <__assert_fail@plt+0x2964>
   12084:	str	r4, [sp]
   12088:	mov	r3, r0
   1208c:	ldr	r2, [pc, #76]	; 120e0 <__assert_fail@plt+0xf38>
   12090:	mov	r1, r6
   12094:	mov	r0, #0
   12098:	bl	11004 <error@plt>
   1209c:	ldr	r3, [pc, #64]	; 120e4 <__assert_fail@plt+0xf3c>
   120a0:	ldr	r0, [r3]
   120a4:	bl	10f20 <_exit@plt>
   120a8:	bl	110a0 <__errno_location@plt>
   120ac:	mov	r3, r4
   120b0:	ldr	r2, [pc, #48]	; 120e8 <__assert_fail@plt+0xf40>
   120b4:	ldr	r1, [r0]
   120b8:	mov	r0, #0
   120bc:	bl	11004 <error@plt>
   120c0:	b	1209c <__assert_fail@plt+0xef4>
   120c4:	ldr	r3, [pc, #24]	; 120e4 <__assert_fail@plt+0xf3c>
   120c8:	ldr	r0, [r3]
   120cc:	bl	10f20 <_exit@plt>
   120d0:	andeq	r8, r2, r4, ror r1
   120d4:	andeq	r8, r2, r0, lsl #3
   120d8:	andeq	r8, r2, r0, ror r1
   120dc:	andeq	r6, r1, r8, asr #20
   120e0:	andeq	r6, r1, r4, asr sl
   120e4:	andeq	r8, r2, ip, lsl r1
   120e8:	andeq	r6, r1, r8, asr sl
   120ec:	push	{r4, r5, lr}
   120f0:	sub	sp, sp, #12
   120f4:	mov	r5, r0
   120f8:	bl	110a0 <__errno_location@plt>
   120fc:	mov	r4, r0
   12100:	ldr	r3, [r0]
   12104:	str	r3, [sp]
   12108:	str	r3, [sp, #4]
   1210c:	mov	r3, #0
   12110:	str	r3, [r0]
   12114:	mov	r0, r5
   12118:	bl	10f14 <free@plt>
   1211c:	ldr	r3, [r4]
   12120:	cmp	r3, #0
   12124:	moveq	r3, #4
   12128:	movne	r3, #0
   1212c:	add	r2, sp, #8
   12130:	add	r3, r2, r3
   12134:	ldr	r3, [r3, #-8]
   12138:	str	r3, [r4]
   1213c:	add	sp, sp, #12
   12140:	pop	{r4, r5, pc}
   12144:	push	{r4, r5, r6, lr}
   12148:	subs	r4, r0, #0
   1214c:	beq	121c4 <__assert_fail@plt+0x101c>
   12150:	mov	r1, #47	; 0x2f
   12154:	mov	r0, r4
   12158:	bl	11130 <strrchr@plt>
   1215c:	cmp	r0, #0
   12160:	addne	r5, r0, #1
   12164:	moveq	r5, r4
   12168:	sub	r3, r5, r4
   1216c:	cmp	r3, #6
   12170:	ble	121b0 <__assert_fail@plt+0x1008>
   12174:	mov	r2, #7
   12178:	ldr	r1, [pc, #96]	; 121e0 <__assert_fail@plt+0x1038>
   1217c:	sub	r0, r5, #7
   12180:	bl	11178 <strncmp@plt>
   12184:	cmp	r0, #0
   12188:	bne	121b0 <__assert_fail@plt+0x1008>
   1218c:	mov	r2, #3
   12190:	ldr	r1, [pc, #76]	; 121e4 <__assert_fail@plt+0x103c>
   12194:	mov	r0, r5
   12198:	bl	11178 <strncmp@plt>
   1219c:	cmp	r0, #0
   121a0:	addeq	r4, r5, #3
   121a4:	ldreq	r3, [pc, #60]	; 121e8 <__assert_fail@plt+0x1040>
   121a8:	streq	r4, [r3]
   121ac:	movne	r4, r5
   121b0:	ldr	r3, [pc, #52]	; 121ec <__assert_fail@plt+0x1044>
   121b4:	str	r4, [r3]
   121b8:	ldr	r3, [pc, #48]	; 121f0 <__assert_fail@plt+0x1048>
   121bc:	str	r4, [r3]
   121c0:	pop	{r4, r5, r6, pc}
   121c4:	ldr	r3, [pc, #40]	; 121f4 <__assert_fail@plt+0x104c>
   121c8:	ldr	r3, [r3]
   121cc:	mov	r2, #55	; 0x37
   121d0:	mov	r1, #1
   121d4:	ldr	r0, [pc, #28]	; 121f8 <__assert_fail@plt+0x1050>
   121d8:	bl	10fbc <fwrite@plt>
   121dc:	bl	11184 <abort@plt>
   121e0:	muleq	r1, r4, sl
   121e4:	muleq	r1, ip, sl
   121e8:	andeq	r8, r2, r0, ror #2
   121ec:	andeq	r8, r2, r8, lsl #3
   121f0:	andeq	r8, r2, r4, ror #2
   121f4:	andeq	r8, r2, r0, ror r1
   121f8:	andeq	r6, r1, ip, asr sl
   121fc:	push	{r4, r5, r6, lr}
   12200:	mov	r5, r0
   12204:	mov	r4, r1
   12208:	mov	r2, #48	; 0x30
   1220c:	mov	r1, #0
   12210:	bl	110c4 <memset@plt>
   12214:	cmp	r4, #10
   12218:	beq	12228 <__assert_fail@plt+0x1080>
   1221c:	str	r4, [r5]
   12220:	mov	r0, r5
   12224:	pop	{r4, r5, r6, pc}
   12228:	bl	11184 <abort@plt>
   1222c:	push	{r4, r5, r6, lr}
   12230:	mov	r4, r0
   12234:	mov	r5, r1
   12238:	mov	r2, #5
   1223c:	mov	r1, r0
   12240:	mov	r0, #0
   12244:	bl	10f74 <dcgettext@plt>
   12248:	cmp	r4, r0
   1224c:	popne	{r4, r5, r6, pc}
   12250:	bl	159e4 <__assert_fail@plt+0x483c>
   12254:	ldrb	r3, [r0]
   12258:	bic	r3, r3, #32
   1225c:	cmp	r3, #85	; 0x55
   12260:	beq	122dc <__assert_fail@plt+0x1134>
   12264:	cmp	r3, #71	; 0x47
   12268:	bne	12338 <__assert_fail@plt+0x1190>
   1226c:	ldrb	r3, [r0, #1]
   12270:	bic	r3, r3, #32
   12274:	cmp	r3, #66	; 0x42
   12278:	bne	12338 <__assert_fail@plt+0x1190>
   1227c:	ldrb	r3, [r0, #2]
   12280:	cmp	r3, #49	; 0x31
   12284:	bne	12338 <__assert_fail@plt+0x1190>
   12288:	ldrb	r3, [r0, #3]
   1228c:	cmp	r3, #56	; 0x38
   12290:	bne	12338 <__assert_fail@plt+0x1190>
   12294:	ldrb	r3, [r0, #4]
   12298:	cmp	r3, #48	; 0x30
   1229c:	bne	12338 <__assert_fail@plt+0x1190>
   122a0:	ldrb	r3, [r0, #5]
   122a4:	cmp	r3, #51	; 0x33
   122a8:	bne	12338 <__assert_fail@plt+0x1190>
   122ac:	ldrb	r3, [r0, #6]
   122b0:	cmp	r3, #48	; 0x30
   122b4:	bne	12338 <__assert_fail@plt+0x1190>
   122b8:	ldrb	r3, [r0, #7]
   122bc:	cmp	r3, #0
   122c0:	bne	12338 <__assert_fail@plt+0x1190>
   122c4:	ldrb	r2, [r4]
   122c8:	ldr	r3, [pc, #124]	; 1234c <__assert_fail@plt+0x11a4>
   122cc:	ldr	r0, [pc, #124]	; 12350 <__assert_fail@plt+0x11a8>
   122d0:	cmp	r2, #96	; 0x60
   122d4:	movne	r0, r3
   122d8:	pop	{r4, r5, r6, pc}
   122dc:	ldrb	r3, [r0, #1]
   122e0:	bic	r3, r3, #32
   122e4:	cmp	r3, #84	; 0x54
   122e8:	bne	12338 <__assert_fail@plt+0x1190>
   122ec:	ldrb	r3, [r0, #2]
   122f0:	bic	r3, r3, #32
   122f4:	cmp	r3, #70	; 0x46
   122f8:	bne	12338 <__assert_fail@plt+0x1190>
   122fc:	ldrb	r3, [r0, #3]
   12300:	cmp	r3, #45	; 0x2d
   12304:	bne	12338 <__assert_fail@plt+0x1190>
   12308:	ldrb	r3, [r0, #4]
   1230c:	cmp	r3, #56	; 0x38
   12310:	bne	12338 <__assert_fail@plt+0x1190>
   12314:	ldrb	r3, [r0, #5]
   12318:	cmp	r3, #0
   1231c:	bne	12338 <__assert_fail@plt+0x1190>
   12320:	ldrb	r2, [r4]
   12324:	ldr	r3, [pc, #40]	; 12354 <__assert_fail@plt+0x11ac>
   12328:	ldr	r0, [pc, #40]	; 12358 <__assert_fail@plt+0x11b0>
   1232c:	cmp	r2, #96	; 0x60
   12330:	movne	r0, r3
   12334:	pop	{r4, r5, r6, pc}
   12338:	ldr	r3, [pc, #28]	; 1235c <__assert_fail@plt+0x11b4>
   1233c:	ldr	r0, [pc, #28]	; 12360 <__assert_fail@plt+0x11b8>
   12340:	cmp	r5, #9
   12344:	movne	r0, r3
   12348:	pop	{r4, r5, r6, pc}
   1234c:	strdeq	r6, [r1], -r8
   12350:	andeq	r6, r1, r4, lsl #22
   12354:	strdeq	r6, [r1], -r4
   12358:	andeq	r6, r1, r8, lsl #22
   1235c:	strdeq	r6, [r1], -ip
   12360:	andeq	r6, r1, r0, lsl #22
   12364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12368:	sub	sp, sp, #116	; 0x74
   1236c:	str	r0, [sp, #36]	; 0x24
   12370:	mov	sl, r1
   12374:	str	r2, [sp, #52]	; 0x34
   12378:	str	r3, [sp, #28]
   1237c:	ldr	r8, [sp, #152]	; 0x98
   12380:	bl	10fd4 <__ctype_get_mb_cur_max@plt>
   12384:	str	r0, [sp, #84]	; 0x54
   12388:	ldr	r3, [sp, #156]	; 0x9c
   1238c:	lsr	r3, r3, #1
   12390:	and	r3, r3, #1
   12394:	str	r3, [sp, #32]
   12398:	mov	r3, #1
   1239c:	str	r3, [sp, #40]	; 0x28
   123a0:	mov	r3, #0
   123a4:	str	r3, [sp, #80]	; 0x50
   123a8:	str	r3, [sp, #44]	; 0x2c
   123ac:	str	r3, [sp, #48]	; 0x30
   123b0:	str	r3, [sp, #60]	; 0x3c
   123b4:	str	r3, [sp, #72]	; 0x48
   123b8:	str	r3, [sp, #76]	; 0x4c
   123bc:	mov	r7, sl
   123c0:	mov	sl, r8
   123c4:	cmp	sl, #10
   123c8:	ldrls	pc, [pc, sl, lsl #2]
   123cc:	b	12584 <__assert_fail@plt+0x13dc>
   123d0:	andeq	r2, r1, r4, lsr r4
   123d4:	andeq	r2, r1, r4, lsl #8
   123d8:	andeq	r2, r1, r0, ror #10
   123dc:	strdeq	r2, [r1], -ip
   123e0:	andeq	r2, r1, r4, lsl r5
   123e4:	andeq	r2, r1, r4, asr #8
   123e8:			; <UNDEFINED> instruction: 0x000134b0
   123ec:	andeq	r2, r1, r8, lsl #11
   123f0:	andeq	r2, r1, r0, lsl #9
   123f4:	andeq	r2, r1, r0, lsl #9
   123f8:	andeq	r2, r1, r0, lsl #9
   123fc:	mov	r3, #1
   12400:	str	r3, [sp, #48]	; 0x30
   12404:	mov	r3, #1
   12408:	str	r3, [sp, #32]
   1240c:	str	r3, [sp, #60]	; 0x3c
   12410:	ldr	r3, [pc, #4068]	; 133fc <__assert_fail@plt+0x2254>
   12414:	str	r3, [sp, #72]	; 0x48
   12418:	mov	fp, #0
   1241c:	mov	sl, #2
   12420:	mov	r6, #0
   12424:	ldr	r3, [sp, #48]	; 0x30
   12428:	eor	r3, r3, #1
   1242c:	str	r3, [sp, #68]	; 0x44
   12430:	b	12d18 <__assert_fail@plt+0x1b70>
   12434:	mov	r3, #0
   12438:	str	r3, [sp, #32]
   1243c:	mov	fp, r3
   12440:	b	12420 <__assert_fail@plt+0x1278>
   12444:	ldr	r3, [sp, #32]
   12448:	cmp	r3, #0
   1244c:	bne	125a0 <__assert_fail@plt+0x13f8>
   12450:	cmp	r7, #0
   12454:	beq	125c0 <__assert_fail@plt+0x1418>
   12458:	ldr	r3, [sp, #36]	; 0x24
   1245c:	mov	r2, #34	; 0x22
   12460:	strb	r2, [r3]
   12464:	mov	r3, #1
   12468:	str	r3, [sp, #48]	; 0x30
   1246c:	str	r3, [sp, #60]	; 0x3c
   12470:	ldr	r3, [pc, #3980]	; 13404 <__assert_fail@plt+0x225c>
   12474:	str	r3, [sp, #72]	; 0x48
   12478:	mov	fp, #1
   1247c:	b	12420 <__assert_fail@plt+0x1278>
   12480:	cmp	sl, #10
   12484:	beq	124a8 <__assert_fail@plt+0x1300>
   12488:	mov	r1, sl
   1248c:	ldr	r0, [pc, #3948]	; 13400 <__assert_fail@plt+0x2258>
   12490:	bl	1222c <__assert_fail@plt+0x1084>
   12494:	str	r0, [sp, #164]	; 0xa4
   12498:	mov	r1, sl
   1249c:	ldr	r0, [pc, #3928]	; 133fc <__assert_fail@plt+0x2254>
   124a0:	bl	1222c <__assert_fail@plt+0x1084>
   124a4:	str	r0, [sp, #168]	; 0xa8
   124a8:	ldr	r3, [sp, #32]
   124ac:	cmp	r3, #0
   124b0:	movne	fp, #0
   124b4:	bne	124ec <__assert_fail@plt+0x1344>
   124b8:	ldr	r3, [sp, #164]	; 0xa4
   124bc:	ldrb	r3, [r3]
   124c0:	cmp	r3, #0
   124c4:	beq	1250c <__assert_fail@plt+0x1364>
   124c8:	ldr	r2, [sp, #164]	; 0xa4
   124cc:	mov	fp, #0
   124d0:	ldr	r1, [sp, #36]	; 0x24
   124d4:	cmp	r7, fp
   124d8:	strbhi	r3, [r1, fp]
   124dc:	add	fp, fp, #1
   124e0:	ldrb	r3, [r2, #1]!
   124e4:	cmp	r3, #0
   124e8:	bne	124d4 <__assert_fail@plt+0x132c>
   124ec:	ldr	r0, [sp, #168]	; 0xa8
   124f0:	bl	11088 <strlen@plt>
   124f4:	str	r0, [sp, #60]	; 0x3c
   124f8:	ldr	r3, [sp, #168]	; 0xa8
   124fc:	str	r3, [sp, #72]	; 0x48
   12500:	mov	r3, #1
   12504:	str	r3, [sp, #48]	; 0x30
   12508:	b	12420 <__assert_fail@plt+0x1278>
   1250c:	mov	fp, #0
   12510:	b	124ec <__assert_fail@plt+0x1344>
   12514:	ldr	r3, [sp, #32]
   12518:	cmp	r3, #0
   1251c:	bne	125dc <__assert_fail@plt+0x1434>
   12520:	mov	r3, #1
   12524:	str	r3, [sp, #48]	; 0x30
   12528:	cmp	r7, #0
   1252c:	beq	125f8 <__assert_fail@plt+0x1450>
   12530:	ldr	r3, [sp, #36]	; 0x24
   12534:	mov	r2, #39	; 0x27
   12538:	strb	r2, [r3]
   1253c:	mov	r3, #0
   12540:	str	r3, [sp, #32]
   12544:	mov	r3, #1
   12548:	str	r3, [sp, #60]	; 0x3c
   1254c:	ldr	r3, [pc, #3752]	; 133fc <__assert_fail@plt+0x2254>
   12550:	str	r3, [sp, #72]	; 0x48
   12554:	mov	fp, #1
   12558:	mov	sl, #2
   1255c:	b	12420 <__assert_fail@plt+0x1278>
   12560:	ldr	r3, [sp, #32]
   12564:	cmp	r3, #0
   12568:	beq	12528 <__assert_fail@plt+0x1380>
   1256c:	mov	r3, #1
   12570:	str	r3, [sp, #60]	; 0x3c
   12574:	ldr	r3, [pc, #3712]	; 133fc <__assert_fail@plt+0x2254>
   12578:	str	r3, [sp, #72]	; 0x48
   1257c:	mov	fp, #0
   12580:	b	12420 <__assert_fail@plt+0x1278>
   12584:	bl	11184 <abort@plt>
   12588:	mov	r3, #0
   1258c:	str	r3, [sp, #32]
   12590:	mov	r3, #1
   12594:	str	r3, [sp, #48]	; 0x30
   12598:	mov	fp, #0
   1259c:	b	12420 <__assert_fail@plt+0x1278>
   125a0:	ldr	r3, [sp, #32]
   125a4:	str	r3, [sp, #48]	; 0x30
   125a8:	mov	r3, #1
   125ac:	str	r3, [sp, #60]	; 0x3c
   125b0:	ldr	r3, [pc, #3660]	; 13404 <__assert_fail@plt+0x225c>
   125b4:	str	r3, [sp, #72]	; 0x48
   125b8:	mov	fp, #0
   125bc:	b	12420 <__assert_fail@plt+0x1278>
   125c0:	mov	r3, #1
   125c4:	str	r3, [sp, #48]	; 0x30
   125c8:	str	r3, [sp, #60]	; 0x3c
   125cc:	ldr	r3, [pc, #3632]	; 13404 <__assert_fail@plt+0x225c>
   125d0:	str	r3, [sp, #72]	; 0x48
   125d4:	mov	fp, #1
   125d8:	b	12420 <__assert_fail@plt+0x1278>
   125dc:	mov	r3, #1
   125e0:	str	r3, [sp, #60]	; 0x3c
   125e4:	ldr	r3, [pc, #3600]	; 133fc <__assert_fail@plt+0x2254>
   125e8:	str	r3, [sp, #72]	; 0x48
   125ec:	mov	fp, #0
   125f0:	mov	sl, #2
   125f4:	b	12420 <__assert_fail@plt+0x1278>
   125f8:	mov	r3, #0
   125fc:	str	r3, [sp, #32]
   12600:	mov	r3, #1
   12604:	str	r3, [sp, #60]	; 0x3c
   12608:	ldr	r3, [pc, #3564]	; 133fc <__assert_fail@plt+0x2254>
   1260c:	str	r3, [sp, #72]	; 0x48
   12610:	mov	fp, #1
   12614:	mov	sl, #2
   12618:	b	12420 <__assert_fail@plt+0x1278>
   1261c:	mov	r3, #0
   12620:	str	r3, [sp, #56]	; 0x38
   12624:	ldr	r3, [sp, #52]	; 0x34
   12628:	add	r2, r3, r6
   1262c:	str	r2, [sp, #64]	; 0x40
   12630:	ldrb	r4, [r3, r6]
   12634:	cmp	r4, #126	; 0x7e
   12638:	ldrls	pc, [pc, r4, lsl #2]
   1263c:	b	12e78 <__assert_fail@plt+0x1cd0>
   12640:	andeq	r2, r1, r8, asr r8
   12644:	andeq	r2, r1, r8, ror lr
   12648:	andeq	r2, r1, r8, ror lr
   1264c:	andeq	r2, r1, r8, ror lr
   12650:	andeq	r2, r1, r8, ror lr
   12654:	andeq	r2, r1, r8, ror lr
   12658:	andeq	r2, r1, r8, ror lr
   1265c:			; <UNDEFINED> instruction: 0x00012bb4
   12660:	andeq	r2, r1, r0, asr r8
   12664:	andeq	r2, r1, ip, ror #22
   12668:	andeq	r2, r1, r4, ror #22
   1266c:	ldrdeq	r2, [r1], -r4
   12670:	andeq	r2, r1, ip, asr #21
   12674:	andeq	r2, r1, r8, asr #16
   12678:	andeq	r2, r1, r8, ror lr
   1267c:	andeq	r2, r1, r8, ror lr
   12680:	andeq	r2, r1, r8, ror lr
   12684:	andeq	r2, r1, r8, ror lr
   12688:	andeq	r2, r1, r8, ror lr
   1268c:	andeq	r2, r1, r8, ror lr
   12690:	andeq	r2, r1, r8, ror lr
   12694:	andeq	r2, r1, r8, ror lr
   12698:	andeq	r2, r1, r8, ror lr
   1269c:	andeq	r2, r1, r8, ror lr
   126a0:	andeq	r2, r1, r8, ror lr
   126a4:	andeq	r2, r1, r8, ror lr
   126a8:	andeq	r2, r1, r8, ror lr
   126ac:	andeq	r2, r1, r8, ror lr
   126b0:	andeq	r2, r1, r8, ror lr
   126b4:	andeq	r2, r1, r8, ror lr
   126b8:	andeq	r2, r1, r8, ror lr
   126bc:	andeq	r2, r1, r8, ror lr
   126c0:	andeq	r2, r1, r8, lsl #24
   126c4:	andeq	r2, r1, r4, lsl #24
   126c8:	andeq	r2, r1, r4, lsl #24
   126cc:	ldrdeq	r2, [r1], -ip
   126d0:	andeq	r2, r1, r4, lsl #24
   126d4:	andeq	r3, r1, ip, asr #4
   126d8:	andeq	r2, r1, r4, lsl #24
   126dc:	ldrdeq	r2, [r1], -ip
   126e0:	andeq	r2, r1, r4, lsl #24
   126e4:	andeq	r2, r1, r4, lsl #24
   126e8:	andeq	r2, r1, r4, lsl #24
   126ec:	andeq	r3, r1, ip, asr #4
   126f0:	andeq	r3, r1, ip, asr #4
   126f4:	andeq	r3, r1, ip, asr #4
   126f8:	andeq	r3, r1, ip, asr #4
   126fc:	andeq	r3, r1, ip, asr #4
   12700:	andeq	r3, r1, ip, asr #4
   12704:	andeq	r3, r1, ip, asr #4
   12708:	andeq	r3, r1, ip, asr #4
   1270c:	andeq	r3, r1, ip, asr #4
   12710:	andeq	r3, r1, ip, asr #4
   12714:	andeq	r3, r1, ip, asr #4
   12718:	andeq	r3, r1, ip, asr #4
   1271c:	andeq	r3, r1, ip, asr #4
   12720:	andeq	r3, r1, ip, asr #4
   12724:	andeq	r3, r1, ip, asr #4
   12728:	andeq	r3, r1, ip, asr #4
   1272c:	andeq	r2, r1, r4, lsl #24
   12730:	andeq	r2, r1, r4, lsl #24
   12734:	andeq	r2, r1, r4, lsl #24
   12738:	andeq	r2, r1, r4, lsl #24
   1273c:	andeq	r2, r1, r0, ror #18
   12740:	andeq	r2, r1, r8, ror lr
   12744:	andeq	r3, r1, ip, asr #4
   12748:	andeq	r3, r1, ip, asr #4
   1274c:	andeq	r3, r1, ip, asr #4
   12750:	andeq	r3, r1, ip, asr #4
   12754:	andeq	r3, r1, ip, asr #4
   12758:	andeq	r3, r1, ip, asr #4
   1275c:	andeq	r3, r1, ip, asr #4
   12760:	andeq	r3, r1, ip, asr #4
   12764:	andeq	r3, r1, ip, asr #4
   12768:	andeq	r3, r1, ip, asr #4
   1276c:	andeq	r3, r1, ip, asr #4
   12770:	andeq	r3, r1, ip, asr #4
   12774:	andeq	r3, r1, ip, asr #4
   12778:	andeq	r3, r1, ip, asr #4
   1277c:	andeq	r3, r1, ip, asr #4
   12780:	andeq	r3, r1, ip, asr #4
   12784:	andeq	r3, r1, ip, asr #4
   12788:	andeq	r3, r1, ip, asr #4
   1278c:	andeq	r3, r1, ip, asr #4
   12790:	andeq	r3, r1, ip, asr #4
   12794:	andeq	r3, r1, ip, asr #4
   12798:	andeq	r3, r1, ip, asr #4
   1279c:	andeq	r3, r1, ip, asr #4
   127a0:	andeq	r3, r1, ip, asr #4
   127a4:	andeq	r3, r1, ip, asr #4
   127a8:	andeq	r3, r1, ip, asr #4
   127ac:	andeq	r2, r1, r4, lsl #24
   127b0:	ldrdeq	r2, [r1], -ip
   127b4:	andeq	r3, r1, ip, asr #4
   127b8:	andeq	r2, r1, r4, lsl #24
   127bc:	andeq	r3, r1, ip, asr #4
   127c0:	andeq	r2, r1, r4, lsl #24
   127c4:	andeq	r3, r1, ip, asr #4
   127c8:	andeq	r3, r1, ip, asr #4
   127cc:	andeq	r3, r1, ip, asr #4
   127d0:	andeq	r3, r1, ip, asr #4
   127d4:	andeq	r3, r1, ip, asr #4
   127d8:	andeq	r3, r1, ip, asr #4
   127dc:	andeq	r3, r1, ip, asr #4
   127e0:	andeq	r3, r1, ip, asr #4
   127e4:	andeq	r3, r1, ip, asr #4
   127e8:	andeq	r3, r1, ip, asr #4
   127ec:	andeq	r3, r1, ip, asr #4
   127f0:	andeq	r3, r1, ip, asr #4
   127f4:	andeq	r3, r1, ip, asr #4
   127f8:	andeq	r3, r1, ip, asr #4
   127fc:	andeq	r3, r1, ip, asr #4
   12800:	andeq	r3, r1, ip, asr #4
   12804:	andeq	r3, r1, ip, asr #4
   12808:	andeq	r3, r1, ip, asr #4
   1280c:	andeq	r3, r1, ip, asr #4
   12810:	andeq	r3, r1, ip, asr #4
   12814:	andeq	r3, r1, ip, asr #4
   12818:	andeq	r3, r1, ip, asr #4
   1281c:	andeq	r3, r1, ip, asr #4
   12820:	andeq	r3, r1, ip, asr #4
   12824:	andeq	r3, r1, ip, asr #4
   12828:	andeq	r3, r1, ip, asr #4
   1282c:			; <UNDEFINED> instruction: 0x00012bbc
   12830:	andeq	r2, r1, r4, lsl #24
   12834:			; <UNDEFINED> instruction: 0x00012bbc
   12838:	ldrdeq	r2, [r1], -ip
   1283c:	mov	r3, #0
   12840:	str	r3, [sp, #56]	; 0x38
   12844:	b	12624 <__assert_fail@plt+0x147c>
   12848:	mov	r3, #114	; 0x72
   1284c:	b	12b70 <__assert_fail@plt+0x19c8>
   12850:	mov	r3, #98	; 0x62
   12854:	b	12b88 <__assert_fail@plt+0x19e0>
   12858:	ldr	r3, [sp, #48]	; 0x30
   1285c:	cmp	r3, #0
   12860:	beq	12948 <__assert_fail@plt+0x17a0>
   12864:	ldr	r3, [sp, #32]
   12868:	cmp	r3, #0
   1286c:	bne	133d0 <__assert_fail@plt+0x2228>
   12870:	ldr	r3, [sp, #44]	; 0x2c
   12874:	eor	r3, r3, #1
   12878:	cmp	sl, #2
   1287c:	movne	r3, #0
   12880:	andeq	r3, r3, #1
   12884:	cmp	r3, #0
   12888:	moveq	r2, fp
   1288c:	beq	128d0 <__assert_fail@plt+0x1728>
   12890:	cmp	r7, fp
   12894:	ldrhi	r2, [sp, #36]	; 0x24
   12898:	movhi	r1, #39	; 0x27
   1289c:	strbhi	r1, [r2, fp]
   128a0:	add	r2, fp, #1
   128a4:	cmp	r7, r2
   128a8:	ldrhi	r1, [sp, #36]	; 0x24
   128ac:	movhi	r0, #36	; 0x24
   128b0:	strbhi	r0, [r1, r2]
   128b4:	add	r2, fp, #2
   128b8:	cmp	r7, r2
   128bc:	ldrhi	r1, [sp, #36]	; 0x24
   128c0:	movhi	r0, #39	; 0x27
   128c4:	strbhi	r0, [r1, r2]
   128c8:	add	r2, fp, #3
   128cc:	str	r3, [sp, #44]	; 0x2c
   128d0:	cmp	r7, r2
   128d4:	ldrhi	r3, [sp, #36]	; 0x24
   128d8:	movhi	r1, #92	; 0x5c
   128dc:	strbhi	r1, [r3, r2]
   128e0:	add	fp, r2, #1
   128e4:	cmp	r5, #0
   128e8:	beq	13254 <__assert_fail@plt+0x20ac>
   128ec:	add	r3, r6, #1
   128f0:	ldr	r1, [sp, #28]
   128f4:	cmp	r1, r3
   128f8:	bls	13264 <__assert_fail@plt+0x20bc>
   128fc:	ldr	r1, [sp, #52]	; 0x34
   12900:	ldrb	r3, [r1, r3]
   12904:	sub	r3, r3, #48	; 0x30
   12908:	uxtb	r3, r3
   1290c:	cmp	r3, #9
   12910:	bhi	13270 <__assert_fail@plt+0x20c8>
   12914:	cmp	r7, fp
   12918:	movhi	r3, #48	; 0x30
   1291c:	ldrhi	r1, [sp, #36]	; 0x24
   12920:	strbhi	r3, [r1, fp]
   12924:	add	r3, r2, #2
   12928:	cmp	r7, r3
   1292c:	movhi	r1, #48	; 0x30
   12930:	ldrhi	r0, [sp, #36]	; 0x24
   12934:	strbhi	r1, [r0, r3]
   12938:	add	fp, r2, #3
   1293c:	ldr	r8, [sp, #32]
   12940:	mov	r4, #48	; 0x30
   12944:	b	12c20 <__assert_fail@plt+0x1a78>
   12948:	ldr	r3, [sp, #156]	; 0x9c
   1294c:	tst	r3, #1
   12950:	bne	12d14 <__assert_fail@plt+0x1b6c>
   12954:	ldr	r5, [sp, #48]	; 0x30
   12958:	mov	r8, r5
   1295c:	b	12c20 <__assert_fail@plt+0x1a78>
   12960:	cmp	sl, #2
   12964:	beq	1297c <__assert_fail@plt+0x17d4>
   12968:	cmp	sl, #5
   1296c:	beq	12994 <__assert_fail@plt+0x17ec>
   12970:	mov	r8, #0
   12974:	mov	r5, r8
   12978:	b	12c20 <__assert_fail@plt+0x1a78>
   1297c:	ldr	r3, [sp, #32]
   12980:	cmp	r3, #0
   12984:	bne	133e4 <__assert_fail@plt+0x223c>
   12988:	mov	r8, r3
   1298c:	mov	r5, r3
   12990:	b	12c20 <__assert_fail@plt+0x1a78>
   12994:	ldr	r3, [sp, #156]	; 0x9c
   12998:	tst	r3, #4
   1299c:	beq	1327c <__assert_fail@plt+0x20d4>
   129a0:	add	r3, r6, #2
   129a4:	ldr	r2, [sp, #28]
   129a8:	cmp	r2, r3
   129ac:	bls	13288 <__assert_fail@plt+0x20e0>
   129b0:	ldr	r2, [sp, #52]	; 0x34
   129b4:	add	r2, r2, r6
   129b8:	ldrb	r2, [r2, #1]
   129bc:	cmp	r2, #63	; 0x3f
   129c0:	movne	r8, #0
   129c4:	movne	r5, r8
   129c8:	bne	12c20 <__assert_fail@plt+0x1a78>
   129cc:	ldr	r2, [sp, #52]	; 0x34
   129d0:	ldrb	r2, [r2, r3]
   129d4:	sub	r1, r2, #33	; 0x21
   129d8:	cmp	r1, #29
   129dc:	ldrls	pc, [pc, r1, lsl #2]
   129e0:	b	13294 <__assert_fail@plt+0x20ec>
   129e4:	andeq	r2, r1, ip, asr sl
   129e8:	muleq	r1, r4, r2
   129ec:	muleq	r1, r4, r2
   129f0:	muleq	r1, r4, r2
   129f4:	muleq	r1, r4, r2
   129f8:	muleq	r1, r4, r2
   129fc:	andeq	r2, r1, ip, asr sl
   12a00:	andeq	r2, r1, ip, asr sl
   12a04:	andeq	r2, r1, ip, asr sl
   12a08:	muleq	r1, r4, r2
   12a0c:	muleq	r1, r4, r2
   12a10:	muleq	r1, r4, r2
   12a14:	andeq	r2, r1, ip, asr sl
   12a18:	muleq	r1, r4, r2
   12a1c:	andeq	r2, r1, ip, asr sl
   12a20:	muleq	r1, r4, r2
   12a24:	muleq	r1, r4, r2
   12a28:	muleq	r1, r4, r2
   12a2c:	muleq	r1, r4, r2
   12a30:	muleq	r1, r4, r2
   12a34:	muleq	r1, r4, r2
   12a38:	muleq	r1, r4, r2
   12a3c:	muleq	r1, r4, r2
   12a40:	muleq	r1, r4, r2
   12a44:	muleq	r1, r4, r2
   12a48:	muleq	r1, r4, r2
   12a4c:	muleq	r1, r4, r2
   12a50:	andeq	r2, r1, ip, asr sl
   12a54:	andeq	r2, r1, ip, asr sl
   12a58:	andeq	r2, r1, ip, asr sl
   12a5c:	ldr	r1, [sp, #32]
   12a60:	cmp	r1, #0
   12a64:	bne	134a4 <__assert_fail@plt+0x22fc>
   12a68:	cmp	r7, fp
   12a6c:	movhi	r1, #63	; 0x3f
   12a70:	ldrhi	r0, [sp, #36]	; 0x24
   12a74:	strbhi	r1, [r0, fp]
   12a78:	add	r1, fp, #1
   12a7c:	cmp	r7, r1
   12a80:	ldrhi	r0, [sp, #36]	; 0x24
   12a84:	movhi	ip, #34	; 0x22
   12a88:	strbhi	ip, [r0, r1]
   12a8c:	add	r1, fp, #2
   12a90:	cmp	r7, r1
   12a94:	ldrhi	r0, [sp, #36]	; 0x24
   12a98:	movhi	ip, #34	; 0x22
   12a9c:	strbhi	ip, [r0, r1]
   12aa0:	add	r1, fp, #3
   12aa4:	cmp	r7, r1
   12aa8:	movhi	r0, #63	; 0x3f
   12aac:	ldrhi	ip, [sp, #36]	; 0x24
   12ab0:	strbhi	r0, [ip, r1]
   12ab4:	add	fp, fp, #4
   12ab8:	ldr	r5, [sp, #32]
   12abc:	mov	r8, r5
   12ac0:	mov	r4, r2
   12ac4:	mov	r6, r3
   12ac8:	b	12c20 <__assert_fail@plt+0x1a78>
   12acc:	mov	r3, #102	; 0x66
   12ad0:	b	12b88 <__assert_fail@plt+0x19e0>
   12ad4:	mov	r3, #118	; 0x76
   12ad8:	b	12b88 <__assert_fail@plt+0x19e0>
   12adc:	cmp	sl, #2
   12ae0:	beq	12b4c <__assert_fail@plt+0x19a4>
   12ae4:	ldr	r3, [sp, #48]	; 0x30
   12ae8:	ldr	r2, [sp, #32]
   12aec:	and	r3, r3, r2
   12af0:	tst	r9, r3
   12af4:	moveq	r3, r4
   12af8:	beq	12b88 <__assert_fail@plt+0x19e0>
   12afc:	mov	r8, #0
   12b00:	mov	r5, r8
   12b04:	eor	r5, r5, #1
   12b08:	ldr	r3, [sp, #44]	; 0x2c
   12b0c:	and	r5, r5, r3
   12b10:	tst	r5, #255	; 0xff
   12b14:	beq	12cf4 <__assert_fail@plt+0x1b4c>
   12b18:	cmp	r7, fp
   12b1c:	ldrhi	r3, [sp, #36]	; 0x24
   12b20:	movhi	r2, #39	; 0x27
   12b24:	strbhi	r2, [r3, fp]
   12b28:	add	r3, fp, #1
   12b2c:	cmp	r7, r3
   12b30:	ldrhi	r2, [sp, #36]	; 0x24
   12b34:	movhi	r1, #39	; 0x27
   12b38:	strbhi	r1, [r2, r3]
   12b3c:	add	fp, fp, #2
   12b40:	mov	r3, #0
   12b44:	str	r3, [sp, #44]	; 0x2c
   12b48:	b	12cf4 <__assert_fail@plt+0x1b4c>
   12b4c:	ldr	r3, [sp, #32]
   12b50:	cmp	r3, #0
   12b54:	bne	133f0 <__assert_fail@plt+0x2248>
   12b58:	mov	r8, r3
   12b5c:	mov	r5, r3
   12b60:	b	12b04 <__assert_fail@plt+0x195c>
   12b64:	mov	r3, #110	; 0x6e
   12b68:	b	12b70 <__assert_fail@plt+0x19c8>
   12b6c:	mov	r3, #116	; 0x74
   12b70:	ldr	r2, [sp, #32]
   12b74:	cmp	sl, #2
   12b78:	movne	r2, #0
   12b7c:	andeq	r2, r2, #1
   12b80:	cmp	r2, #0
   12b84:	bne	12ba8 <__assert_fail@plt+0x1a00>
   12b88:	ldr	r2, [sp, #48]	; 0x30
   12b8c:	cmp	r2, #0
   12b90:	moveq	r8, r2
   12b94:	moveq	r5, r2
   12b98:	beq	12c20 <__assert_fail@plt+0x1a78>
   12b9c:	mov	r4, r3
   12ba0:	mov	r8, #0
   12ba4:	b	12c78 <__assert_fail@plt+0x1ad0>
   12ba8:	mov	r8, sl
   12bac:	mov	sl, r7
   12bb0:	b	1341c <__assert_fail@plt+0x2274>
   12bb4:	mov	r3, #97	; 0x61
   12bb8:	b	12b88 <__assert_fail@plt+0x19e0>
   12bbc:	ldr	r3, [sp, #28]
   12bc0:	cmn	r3, #1
   12bc4:	beq	12bf0 <__assert_fail@plt+0x1a48>
   12bc8:	ldr	r3, [sp, #28]
   12bcc:	subs	r3, r3, #1
   12bd0:	movne	r3, #1
   12bd4:	cmp	r3, #0
   12bd8:	bne	132a0 <__assert_fail@plt+0x20f8>
   12bdc:	cmp	r6, #0
   12be0:	beq	12c08 <__assert_fail@plt+0x1a60>
   12be4:	mov	r8, #0
   12be8:	mov	r5, r8
   12bec:	b	12c20 <__assert_fail@plt+0x1a78>
   12bf0:	ldr	r3, [sp, #52]	; 0x34
   12bf4:	ldrb	r3, [r3, #1]
   12bf8:	adds	r3, r3, #0
   12bfc:	movne	r3, #1
   12c00:	b	12bd4 <__assert_fail@plt+0x1a2c>
   12c04:	mov	r8, #0
   12c08:	ldr	r5, [sp, #32]
   12c0c:	cmp	sl, #2
   12c10:	movne	r5, #0
   12c14:	andeq	r5, r5, #1
   12c18:	cmp	r5, #0
   12c1c:	bne	12dd0 <__assert_fail@plt+0x1c28>
   12c20:	ldr	r3, [sp, #68]	; 0x44
   12c24:	cmp	sl, #2
   12c28:	orreq	r3, r3, #1
   12c2c:	eor	r3, r3, #1
   12c30:	ldr	r2, [sp, #32]
   12c34:	orr	r3, r2, r3
   12c38:	tst	r3, #255	; 0xff
   12c3c:	beq	12c6c <__assert_fail@plt+0x1ac4>
   12c40:	ldr	r3, [sp, #160]	; 0xa0
   12c44:	cmp	r3, #0
   12c48:	beq	12c6c <__assert_fail@plt+0x1ac4>
   12c4c:	lsr	r2, r4, #5
   12c50:	uxtb	r2, r2
   12c54:	and	r3, r4, #31
   12c58:	ldr	r1, [sp, #160]	; 0xa0
   12c5c:	ldr	r2, [r1, r2, lsl #2]
   12c60:	lsr	r3, r2, r3
   12c64:	tst	r3, #1
   12c68:	bne	12c78 <__assert_fail@plt+0x1ad0>
   12c6c:	ldr	r3, [sp, #56]	; 0x38
   12c70:	cmp	r3, #0
   12c74:	beq	12b04 <__assert_fail@plt+0x195c>
   12c78:	ldr	r3, [sp, #32]
   12c7c:	cmp	r3, #0
   12c80:	bne	1348c <__assert_fail@plt+0x22e4>
   12c84:	ldr	r3, [sp, #44]	; 0x2c
   12c88:	eor	r3, r3, #1
   12c8c:	cmp	sl, #2
   12c90:	movne	r3, #0
   12c94:	andeq	r3, r3, #1
   12c98:	cmp	r3, #0
   12c9c:	beq	12ce0 <__assert_fail@plt+0x1b38>
   12ca0:	cmp	r7, fp
   12ca4:	ldrhi	r2, [sp, #36]	; 0x24
   12ca8:	movhi	r1, #39	; 0x27
   12cac:	strbhi	r1, [r2, fp]
   12cb0:	add	r2, fp, #1
   12cb4:	cmp	r7, r2
   12cb8:	ldrhi	r1, [sp, #36]	; 0x24
   12cbc:	movhi	r0, #36	; 0x24
   12cc0:	strbhi	r0, [r1, r2]
   12cc4:	add	r2, fp, #2
   12cc8:	cmp	r7, r2
   12ccc:	ldrhi	r1, [sp, #36]	; 0x24
   12cd0:	movhi	r0, #39	; 0x27
   12cd4:	strbhi	r0, [r1, r2]
   12cd8:	add	fp, fp, #3
   12cdc:	str	r3, [sp, #44]	; 0x2c
   12ce0:	cmp	r7, fp
   12ce4:	ldrhi	r3, [sp, #36]	; 0x24
   12ce8:	movhi	r2, #92	; 0x5c
   12cec:	strbhi	r2, [r3, fp]
   12cf0:	add	fp, fp, #1
   12cf4:	cmp	fp, r7
   12cf8:	ldrcc	r3, [sp, #36]	; 0x24
   12cfc:	strbcc	r4, [r3, fp]
   12d00:	add	fp, fp, #1
   12d04:	ldr	r3, [sp, #40]	; 0x28
   12d08:	cmp	r8, #0
   12d0c:	moveq	r3, #0
   12d10:	str	r3, [sp, #40]	; 0x28
   12d14:	add	r6, r6, #1
   12d18:	ldr	r3, [sp, #28]
   12d1c:	cmn	r3, #1
   12d20:	beq	132ac <__assert_fail@plt+0x2104>
   12d24:	ldr	r3, [sp, #28]
   12d28:	subs	r8, r3, r6
   12d2c:	movne	r8, #1
   12d30:	cmp	r8, #0
   12d34:	beq	132c0 <__assert_fail@plt+0x2118>
   12d38:	ldr	r5, [sp, #48]	; 0x30
   12d3c:	cmp	sl, #2
   12d40:	moveq	r5, #0
   12d44:	andne	r5, r5, #1
   12d48:	ldr	r3, [sp, #60]	; 0x3c
   12d4c:	adds	r9, r3, #0
   12d50:	movne	r9, #1
   12d54:	ands	r2, r5, r9
   12d58:	str	r2, [sp, #56]	; 0x38
   12d5c:	beq	12624 <__assert_fail@plt+0x147c>
   12d60:	add	r4, r6, r3
   12d64:	ldr	r2, [sp, #28]
   12d68:	cmp	r3, #1
   12d6c:	movls	r3, #0
   12d70:	movhi	r3, #1
   12d74:	cmn	r2, #1
   12d78:	movne	r3, #0
   12d7c:	cmp	r3, #0
   12d80:	beq	12d90 <__assert_fail@plt+0x1be8>
   12d84:	ldr	r0, [sp, #52]	; 0x34
   12d88:	bl	11088 <strlen@plt>
   12d8c:	str	r0, [sp, #28]
   12d90:	ldr	r3, [sp, #28]
   12d94:	cmp	r3, r4
   12d98:	bcc	1261c <__assert_fail@plt+0x1474>
   12d9c:	ldr	r2, [sp, #60]	; 0x3c
   12da0:	ldr	r1, [sp, #72]	; 0x48
   12da4:	ldr	r3, [sp, #52]	; 0x34
   12da8:	add	r0, r3, r6
   12dac:	bl	10f5c <memcmp@plt>
   12db0:	cmp	r0, #0
   12db4:	bne	1283c <__assert_fail@plt+0x1694>
   12db8:	ldr	r3, [sp, #32]
   12dbc:	cmp	r3, #0
   12dc0:	beq	12624 <__assert_fail@plt+0x147c>
   12dc4:	mov	r8, sl
   12dc8:	mov	sl, r7
   12dcc:	b	1341c <__assert_fail@plt+0x2274>
   12dd0:	mov	r8, sl
   12dd4:	mov	sl, r7
   12dd8:	b	1341c <__assert_fail@plt+0x2274>
   12ddc:	cmp	sl, #2
   12de0:	strne	r8, [sp, #80]	; 0x50
   12de4:	movne	r5, #0
   12de8:	bne	12c20 <__assert_fail@plt+0x1a78>
   12dec:	ldr	r3, [sp, #32]
   12df0:	cmp	r3, #0
   12df4:	bne	13408 <__assert_fail@plt+0x2260>
   12df8:	ldr	r2, [sp, #76]	; 0x4c
   12dfc:	adds	r3, r7, #0
   12e00:	movne	r3, #1
   12e04:	cmp	r2, #0
   12e08:	movne	r3, #0
   12e0c:	cmp	r3, #0
   12e10:	movne	r3, #0
   12e14:	bne	12e44 <__assert_fail@plt+0x1c9c>
   12e18:	cmp	r7, fp
   12e1c:	ldrhi	r3, [sp, #36]	; 0x24
   12e20:	movhi	r2, #39	; 0x27
   12e24:	strbhi	r2, [r3, fp]
   12e28:	add	r3, fp, #1
   12e2c:	cmp	r7, r3
   12e30:	ldrhi	r2, [sp, #36]	; 0x24
   12e34:	movhi	r1, #92	; 0x5c
   12e38:	strbhi	r1, [r2, r3]
   12e3c:	mov	r3, r7
   12e40:	ldr	r7, [sp, #76]	; 0x4c
   12e44:	add	r2, fp, #2
   12e48:	cmp	r2, r3
   12e4c:	ldrcc	r1, [sp, #36]	; 0x24
   12e50:	movcc	r0, #39	; 0x27
   12e54:	strbcc	r0, [r1, r2]
   12e58:	add	fp, fp, #3
   12e5c:	ldr	r2, [sp, #32]
   12e60:	mov	r5, r2
   12e64:	str	r8, [sp, #80]	; 0x50
   12e68:	str	r2, [sp, #44]	; 0x2c
   12e6c:	str	r7, [sp, #76]	; 0x4c
   12e70:	mov	r7, r3
   12e74:	b	12c20 <__assert_fail@plt+0x1a78>
   12e78:	ldr	r5, [sp, #84]	; 0x54
   12e7c:	cmp	r5, #1
   12e80:	beq	12eb0 <__assert_fail@plt+0x1d08>
   12e84:	mov	r3, #0
   12e88:	str	r3, [sp, #104]	; 0x68
   12e8c:	str	r3, [sp, #108]	; 0x6c
   12e90:	ldr	r3, [sp, #28]
   12e94:	cmn	r3, #1
   12e98:	beq	12ee4 <__assert_fail@plt+0x1d3c>
   12e9c:	mov	r3, #0
   12ea0:	str	r4, [sp, #88]	; 0x58
   12ea4:	str	fp, [sp, #92]	; 0x5c
   12ea8:	mov	fp, r3
   12eac:	b	1300c <__assert_fail@plt+0x1e64>
   12eb0:	bl	11064 <__ctype_b_loc@plt>
   12eb4:	ldr	r2, [r0]
   12eb8:	lsl	r3, r4, #1
   12ebc:	ldrh	r8, [r2, r3]
   12ec0:	lsr	r8, r8, #14
   12ec4:	and	r8, r8, #1
   12ec8:	mov	r2, r5
   12ecc:	eor	r5, r8, #1
   12ed0:	ldr	r3, [sp, #48]	; 0x30
   12ed4:	and	r5, r5, r3
   12ed8:	ands	r5, r5, #255	; 0xff
   12edc:	beq	12c20 <__assert_fail@plt+0x1a78>
   12ee0:	b	130a4 <__assert_fail@plt+0x1efc>
   12ee4:	ldr	r0, [sp, #52]	; 0x34
   12ee8:	bl	11088 <strlen@plt>
   12eec:	str	r0, [sp, #28]
   12ef0:	b	12e9c <__assert_fail@plt+0x1cf4>
   12ef4:	mov	r2, fp
   12ef8:	mov	r1, r4
   12efc:	ldr	r4, [sp, #88]	; 0x58
   12f00:	ldr	fp, [sp, #92]	; 0x5c
   12f04:	ldr	r0, [sp, #28]
   12f08:	cmp	r0, r5
   12f0c:	bls	130d8 <__assert_fail@plt+0x1f30>
   12f10:	ldrb	r3, [r1]
   12f14:	cmp	r3, #0
   12f18:	beq	130e0 <__assert_fail@plt+0x1f38>
   12f1c:	mov	r3, r1
   12f20:	add	r2, r2, #1
   12f24:	add	r1, r6, r2
   12f28:	cmp	r0, r1
   12f2c:	bls	130e8 <__assert_fail@plt+0x1f40>
   12f30:	ldrb	r1, [r3, #1]!
   12f34:	cmp	r1, #0
   12f38:	bne	12f20 <__assert_fail@plt+0x1d78>
   12f3c:	mov	r8, #0
   12f40:	b	1309c <__assert_fail@plt+0x1ef4>
   12f44:	cmp	r4, r5
   12f48:	beq	12fe8 <__assert_fail@plt+0x1e40>
   12f4c:	ldrb	r3, [r4, #1]!
   12f50:	sub	r3, r3, #91	; 0x5b
   12f54:	cmp	r3, #33	; 0x21
   12f58:	ldrls	pc, [pc, r3, lsl #2]
   12f5c:	b	12f44 <__assert_fail@plt+0x1d9c>
   12f60:	andeq	r3, r1, r4, lsl r4
   12f64:	andeq	r3, r1, r4, lsl r4
   12f68:	andeq	r2, r1, r4, asr #30
   12f6c:	andeq	r3, r1, r4, lsl r4
   12f70:	andeq	r2, r1, r4, asr #30
   12f74:	andeq	r3, r1, r4, lsl r4
   12f78:	andeq	r2, r1, r4, asr #30
   12f7c:	andeq	r2, r1, r4, asr #30
   12f80:	andeq	r2, r1, r4, asr #30
   12f84:	andeq	r2, r1, r4, asr #30
   12f88:	andeq	r2, r1, r4, asr #30
   12f8c:	andeq	r2, r1, r4, asr #30
   12f90:	andeq	r2, r1, r4, asr #30
   12f94:	andeq	r2, r1, r4, asr #30
   12f98:	andeq	r2, r1, r4, asr #30
   12f9c:	andeq	r2, r1, r4, asr #30
   12fa0:	andeq	r2, r1, r4, asr #30
   12fa4:	andeq	r2, r1, r4, asr #30
   12fa8:	andeq	r2, r1, r4, asr #30
   12fac:	andeq	r2, r1, r4, asr #30
   12fb0:	andeq	r2, r1, r4, asr #30
   12fb4:	andeq	r2, r1, r4, asr #30
   12fb8:	andeq	r2, r1, r4, asr #30
   12fbc:	andeq	r2, r1, r4, asr #30
   12fc0:	andeq	r2, r1, r4, asr #30
   12fc4:	andeq	r2, r1, r4, asr #30
   12fc8:	andeq	r2, r1, r4, asr #30
   12fcc:	andeq	r2, r1, r4, asr #30
   12fd0:	andeq	r2, r1, r4, asr #30
   12fd4:	andeq	r2, r1, r4, asr #30
   12fd8:	andeq	r2, r1, r4, asr #30
   12fdc:	andeq	r2, r1, r4, asr #30
   12fe0:	andeq	r2, r1, r4, asr #30
   12fe4:	andeq	r3, r1, r4, lsl r4
   12fe8:	ldr	r0, [sp, #100]	; 0x64
   12fec:	bl	10fa4 <iswprint@plt>
   12ff0:	cmp	r0, #0
   12ff4:	moveq	r8, #0
   12ff8:	add	fp, fp, r9
   12ffc:	add	r0, sp, #104	; 0x68
   13000:	bl	10f50 <mbsinit@plt>
   13004:	cmp	r0, #0
   13008:	bne	1307c <__assert_fail@plt+0x1ed4>
   1300c:	add	r5, r6, fp
   13010:	ldr	r3, [sp, #52]	; 0x34
   13014:	add	r4, r3, r5
   13018:	add	r3, sp, #104	; 0x68
   1301c:	ldr	r2, [sp, #28]
   13020:	sub	r2, r2, r5
   13024:	mov	r1, r4
   13028:	add	r0, sp, #100	; 0x64
   1302c:	bl	15a18 <__assert_fail@plt+0x4870>
   13030:	subs	r9, r0, #0
   13034:	beq	130f0 <__assert_fail@plt+0x1f48>
   13038:	cmn	r9, #1
   1303c:	beq	1308c <__assert_fail@plt+0x1ee4>
   13040:	cmn	r9, #2
   13044:	beq	12ef4 <__assert_fail@plt+0x1d4c>
   13048:	ldr	r3, [sp, #32]
   1304c:	cmp	sl, #2
   13050:	movne	r3, #0
   13054:	andeq	r3, r3, #1
   13058:	cmp	r3, #0
   1305c:	beq	12fe8 <__assert_fail@plt+0x1e40>
   13060:	cmp	r9, #1
   13064:	bls	12fe8 <__assert_fail@plt+0x1e40>
   13068:	sub	r3, r9, #1
   1306c:	add	r5, r3, r5
   13070:	ldr	r3, [sp, #52]	; 0x34
   13074:	add	r5, r3, r5
   13078:	b	12f4c <__assert_fail@plt+0x1da4>
   1307c:	ldr	r4, [sp, #88]	; 0x58
   13080:	mov	r2, fp
   13084:	ldr	fp, [sp, #92]	; 0x5c
   13088:	b	1309c <__assert_fail@plt+0x1ef4>
   1308c:	ldr	r4, [sp, #88]	; 0x58
   13090:	mov	r2, fp
   13094:	ldr	fp, [sp, #92]	; 0x5c
   13098:	mov	r8, #0
   1309c:	cmp	r2, #1
   130a0:	bls	12ecc <__assert_fail@plt+0x1d24>
   130a4:	add	r1, r6, r2
   130a8:	ldr	ip, [sp, #64]	; 0x40
   130ac:	mov	r5, #0
   130b0:	eor	r3, r8, #1
   130b4:	ldr	r2, [sp, #48]	; 0x30
   130b8:	and	r3, r3, r2
   130bc:	uxtb	r3, r3
   130c0:	ldr	r9, [sp, #32]
   130c4:	ldr	lr, [sp, #44]	; 0x2c
   130c8:	ldr	r2, [sp, #56]	; 0x38
   130cc:	str	r8, [sp, #56]	; 0x38
   130d0:	ldr	r0, [sp, #36]	; 0x24
   130d4:	b	13170 <__assert_fail@plt+0x1fc8>
   130d8:	mov	r8, #0
   130dc:	b	1309c <__assert_fail@plt+0x1ef4>
   130e0:	mov	r8, #0
   130e4:	b	1309c <__assert_fail@plt+0x1ef4>
   130e8:	mov	r8, #0
   130ec:	b	1309c <__assert_fail@plt+0x1ef4>
   130f0:	ldr	r4, [sp, #88]	; 0x58
   130f4:	mov	r2, fp
   130f8:	ldr	fp, [sp, #92]	; 0x5c
   130fc:	b	1309c <__assert_fail@plt+0x1ef4>
   13100:	cmp	r2, #0
   13104:	beq	13118 <__assert_fail@plt+0x1f70>
   13108:	cmp	r7, fp
   1310c:	movhi	r2, #92	; 0x5c
   13110:	strbhi	r2, [r0, fp]
   13114:	add	fp, fp, #1
   13118:	add	r8, r6, #1
   1311c:	cmp	r1, r8
   13120:	bls	13228 <__assert_fail@plt+0x2080>
   13124:	eor	r2, r5, #1
   13128:	and	r2, r2, lr
   1312c:	ands	r2, r2, #255	; 0xff
   13130:	beq	13244 <__assert_fail@plt+0x209c>
   13134:	cmp	r7, fp
   13138:	movhi	r2, #39	; 0x27
   1313c:	strbhi	r2, [r0, fp]
   13140:	add	r2, fp, #1
   13144:	cmp	r7, r2
   13148:	movhi	lr, #39	; 0x27
   1314c:	strbhi	lr, [r0, r2]
   13150:	add	fp, fp, #2
   13154:	mov	r6, r8
   13158:	mov	r2, r3
   1315c:	mov	lr, r3
   13160:	cmp	r7, fp
   13164:	strbhi	r4, [r0, fp]
   13168:	add	fp, fp, #1
   1316c:	ldrb	r4, [ip, #1]!
   13170:	cmp	r3, #0
   13174:	beq	13100 <__assert_fail@plt+0x1f58>
   13178:	cmp	r9, #0
   1317c:	bne	13480 <__assert_fail@plt+0x22d8>
   13180:	eor	r5, lr, #1
   13184:	cmp	sl, #2
   13188:	movne	r5, #0
   1318c:	andeq	r5, r5, #1
   13190:	cmp	r5, #0
   13194:	beq	131cc <__assert_fail@plt+0x2024>
   13198:	cmp	r7, fp
   1319c:	movhi	lr, #39	; 0x27
   131a0:	strbhi	lr, [r0, fp]
   131a4:	add	lr, fp, #1
   131a8:	cmp	r7, lr
   131ac:	movhi	r8, #36	; 0x24
   131b0:	strbhi	r8, [r0, lr]
   131b4:	add	lr, fp, #2
   131b8:	cmp	r7, lr
   131bc:	movhi	r8, #39	; 0x27
   131c0:	strbhi	r8, [r0, lr]
   131c4:	add	fp, fp, #3
   131c8:	mov	lr, r5
   131cc:	cmp	r7, fp
   131d0:	movhi	r5, #92	; 0x5c
   131d4:	strbhi	r5, [r0, fp]
   131d8:	add	r5, fp, #1
   131dc:	cmp	r7, r5
   131e0:	lsrhi	r8, r4, #6
   131e4:	addhi	r8, r8, #48	; 0x30
   131e8:	strbhi	r8, [r0, r5]
   131ec:	add	r8, fp, #2
   131f0:	cmp	r7, r8
   131f4:	lsrhi	r5, r4, #3
   131f8:	andhi	r5, r5, #7
   131fc:	addhi	r5, r5, #48	; 0x30
   13200:	strbhi	r5, [r0, r8]
   13204:	add	fp, fp, #3
   13208:	and	r4, r4, #7
   1320c:	add	r4, r4, #48	; 0x30
   13210:	add	r5, r6, #1
   13214:	cmp	r1, r5
   13218:	bls	13234 <__assert_fail@plt+0x208c>
   1321c:	mov	r6, r5
   13220:	mov	r5, r3
   13224:	b	13160 <__assert_fail@plt+0x1fb8>
   13228:	str	lr, [sp, #44]	; 0x2c
   1322c:	ldr	r8, [sp, #56]	; 0x38
   13230:	b	12b04 <__assert_fail@plt+0x195c>
   13234:	str	lr, [sp, #44]	; 0x2c
   13238:	ldr	r8, [sp, #56]	; 0x38
   1323c:	mov	r5, r3
   13240:	b	12b04 <__assert_fail@plt+0x195c>
   13244:	mov	r6, r8
   13248:	b	13160 <__assert_fail@plt+0x1fb8>
   1324c:	mov	r5, #0
   13250:	b	12c20 <__assert_fail@plt+0x1a78>
   13254:	mov	r8, r5
   13258:	ldr	r5, [sp, #48]	; 0x30
   1325c:	mov	r4, #48	; 0x30
   13260:	b	12c20 <__assert_fail@plt+0x1a78>
   13264:	ldr	r8, [sp, #32]
   13268:	mov	r4, #48	; 0x30
   1326c:	b	12c20 <__assert_fail@plt+0x1a78>
   13270:	ldr	r8, [sp, #32]
   13274:	mov	r4, #48	; 0x30
   13278:	b	12c20 <__assert_fail@plt+0x1a78>
   1327c:	mov	r8, #0
   13280:	mov	r5, r8
   13284:	b	12c20 <__assert_fail@plt+0x1a78>
   13288:	mov	r8, #0
   1328c:	mov	r5, r8
   13290:	b	12c20 <__assert_fail@plt+0x1a78>
   13294:	mov	r8, #0
   13298:	mov	r5, r8
   1329c:	b	12c20 <__assert_fail@plt+0x1a78>
   132a0:	mov	r8, #0
   132a4:	mov	r5, r8
   132a8:	b	12c20 <__assert_fail@plt+0x1a78>
   132ac:	ldr	r3, [sp, #52]	; 0x34
   132b0:	ldrb	r8, [r3, r6]
   132b4:	adds	r8, r8, #0
   132b8:	movne	r8, #1
   132bc:	b	12d30 <__assert_fail@plt+0x1b88>
   132c0:	cmp	sl, #2
   132c4:	movne	r3, #0
   132c8:	moveq	r3, #1
   132cc:	ldr	r1, [sp, #32]
   132d0:	mov	r2, r1
   132d4:	and	r2, r2, r3
   132d8:	cmp	fp, #0
   132dc:	movne	r2, #0
   132e0:	andeq	r2, r2, #1
   132e4:	cmp	r2, #0
   132e8:	bne	13498 <__assert_fail@plt+0x22f0>
   132ec:	eor	r2, r1, #1
   132f0:	and	r3, r3, r2
   132f4:	ldr	r1, [sp, #80]	; 0x50
   132f8:	tst	r1, r3
   132fc:	beq	13374 <__assert_fail@plt+0x21cc>
   13300:	ldr	r3, [sp, #40]	; 0x28
   13304:	cmp	r3, #0
   13308:	bne	13330 <__assert_fail@plt+0x2188>
   1330c:	ldr	r1, [sp, #76]	; 0x4c
   13310:	clz	r3, r7
   13314:	lsr	r3, r3, #5
   13318:	cmp	r1, #0
   1331c:	moveq	r3, #0
   13320:	cmp	r3, #0
   13324:	beq	13374 <__assert_fail@plt+0x21cc>
   13328:	ldr	r7, [sp, #76]	; 0x4c
   1332c:	b	123c4 <__assert_fail@plt+0x121c>
   13330:	ldr	r3, [sp, #168]	; 0xa8
   13334:	str	r3, [sp, #16]
   13338:	ldr	r3, [sp, #164]	; 0xa4
   1333c:	str	r3, [sp, #12]
   13340:	ldr	r3, [sp, #160]	; 0xa0
   13344:	str	r3, [sp, #8]
   13348:	ldr	r3, [sp, #156]	; 0x9c
   1334c:	str	r3, [sp, #4]
   13350:	mov	r3, #5
   13354:	str	r3, [sp]
   13358:	ldr	r3, [sp, #28]
   1335c:	ldr	r2, [sp, #52]	; 0x34
   13360:	ldr	r1, [sp, #76]	; 0x4c
   13364:	ldr	r0, [sp, #36]	; 0x24
   13368:	bl	12364 <__assert_fail@plt+0x11bc>
   1336c:	mov	fp, r0
   13370:	b	13474 <__assert_fail@plt+0x22cc>
   13374:	mov	sl, r7
   13378:	ldr	r3, [sp, #72]	; 0x48
   1337c:	cmp	r3, #0
   13380:	moveq	r2, #0
   13384:	andne	r2, r2, #1
   13388:	cmp	r2, #0
   1338c:	beq	133bc <__assert_fail@plt+0x2214>
   13390:	mov	r2, r3
   13394:	ldrb	r3, [r3]
   13398:	cmp	r3, #0
   1339c:	beq	133bc <__assert_fail@plt+0x2214>
   133a0:	ldr	r1, [sp, #36]	; 0x24
   133a4:	cmp	sl, fp
   133a8:	strbhi	r3, [r1, fp]
   133ac:	add	fp, fp, #1
   133b0:	ldrb	r3, [r2, #1]!
   133b4:	cmp	r3, #0
   133b8:	bne	133a4 <__assert_fail@plt+0x21fc>
   133bc:	cmp	sl, fp
   133c0:	movhi	r3, #0
   133c4:	ldrhi	r2, [sp, #36]	; 0x24
   133c8:	strbhi	r3, [r2, fp]
   133cc:	b	13474 <__assert_fail@plt+0x22cc>
   133d0:	mov	r8, sl
   133d4:	mov	sl, r7
   133d8:	ldr	r3, [sp, #32]
   133dc:	str	r3, [sp, #48]	; 0x30
   133e0:	b	1341c <__assert_fail@plt+0x2274>
   133e4:	mov	r8, sl
   133e8:	mov	sl, r7
   133ec:	b	1341c <__assert_fail@plt+0x2274>
   133f0:	mov	r8, sl
   133f4:	mov	sl, r7
   133f8:	b	1341c <__assert_fail@plt+0x2274>
   133fc:	strdeq	r6, [r1], -ip
   13400:	andeq	r6, r1, ip, lsl #22
   13404:	andeq	r6, r1, r0, lsl #22
   13408:	mov	r8, sl
   1340c:	mov	sl, r7
   13410:	b	1341c <__assert_fail@plt+0x2274>
   13414:	mov	r8, sl
   13418:	mov	sl, r7
   1341c:	ldr	r3, [sp, #48]	; 0x30
   13420:	cmp	r8, #2
   13424:	movne	r3, #0
   13428:	andeq	r3, r3, #1
   1342c:	cmp	r3, #0
   13430:	movne	r8, #4
   13434:	ldr	r3, [sp, #168]	; 0xa8
   13438:	str	r3, [sp, #16]
   1343c:	ldr	r3, [sp, #164]	; 0xa4
   13440:	str	r3, [sp, #12]
   13444:	mov	r3, #0
   13448:	str	r3, [sp, #8]
   1344c:	ldr	r3, [sp, #156]	; 0x9c
   13450:	bic	r3, r3, #2
   13454:	str	r3, [sp, #4]
   13458:	str	r8, [sp]
   1345c:	ldr	r3, [sp, #28]
   13460:	ldr	r2, [sp, #52]	; 0x34
   13464:	mov	r1, sl
   13468:	ldr	r0, [sp, #36]	; 0x24
   1346c:	bl	12364 <__assert_fail@plt+0x11bc>
   13470:	mov	fp, r0
   13474:	mov	r0, fp
   13478:	add	sp, sp, #116	; 0x74
   1347c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13480:	mov	r8, sl
   13484:	mov	sl, r7
   13488:	b	1341c <__assert_fail@plt+0x2274>
   1348c:	mov	r8, sl
   13490:	mov	sl, r7
   13494:	b	1341c <__assert_fail@plt+0x2274>
   13498:	mov	r8, sl
   1349c:	mov	sl, r7
   134a0:	b	1341c <__assert_fail@plt+0x2274>
   134a4:	mov	r8, sl
   134a8:	mov	sl, r7
   134ac:	b	13434 <__assert_fail@plt+0x228c>
   134b0:	mov	r3, #1
   134b4:	str	r3, [sp, #32]
   134b8:	str	r3, [sp, #48]	; 0x30
   134bc:	str	r3, [sp, #60]	; 0x3c
   134c0:	ldr	r3, [pc, #-196]	; 13404 <__assert_fail@plt+0x225c>
   134c4:	str	r3, [sp, #72]	; 0x48
   134c8:	mov	fp, #0
   134cc:	mov	sl, #5
   134d0:	b	12420 <__assert_fail@plt+0x1278>
   134d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134d8:	sub	sp, sp, #52	; 0x34
   134dc:	mov	r5, r0
   134e0:	str	r1, [sp, #24]
   134e4:	str	r2, [sp, #28]
   134e8:	mov	r4, r3
   134ec:	bl	110a0 <__errno_location@plt>
   134f0:	str	r0, [sp, #32]
   134f4:	ldr	r3, [r0]
   134f8:	str	r3, [sp, #36]	; 0x24
   134fc:	ldr	r3, [pc, #396]	; 13690 <__assert_fail@plt+0x24e8>
   13500:	ldr	r6, [r3]
   13504:	cmn	r5, #-2147483647	; 0x80000001
   13508:	movne	r3, #0
   1350c:	moveq	r3, #1
   13510:	orrs	r3, r3, r5, lsr #31
   13514:	bne	13654 <__assert_fail@plt+0x24ac>
   13518:	ldr	r3, [pc, #368]	; 13690 <__assert_fail@plt+0x24e8>
   1351c:	ldr	r2, [r3, #4]
   13520:	cmp	r5, r2
   13524:	blt	1358c <__assert_fail@plt+0x23e4>
   13528:	str	r2, [sp, #44]	; 0x2c
   1352c:	add	r3, r3, #8
   13530:	cmp	r6, r3
   13534:	beq	13658 <__assert_fail@plt+0x24b0>
   13538:	sub	r2, r5, r2
   1353c:	mov	r3, #8
   13540:	str	r3, [sp]
   13544:	mvn	r3, #-2147483648	; 0x80000000
   13548:	add	r2, r2, #1
   1354c:	add	r1, sp, #44	; 0x2c
   13550:	mov	r0, r6
   13554:	bl	14780 <__assert_fail@plt+0x35d8>
   13558:	mov	r6, r0
   1355c:	ldr	r3, [pc, #300]	; 13690 <__assert_fail@plt+0x24e8>
   13560:	str	r0, [r3]
   13564:	ldr	r7, [pc, #292]	; 13690 <__assert_fail@plt+0x24e8>
   13568:	ldr	r0, [r7, #4]
   1356c:	ldr	r2, [sp, #44]	; 0x2c
   13570:	sub	r2, r2, r0
   13574:	lsl	r2, r2, #3
   13578:	mov	r1, #0
   1357c:	add	r0, r6, r0, lsl #3
   13580:	bl	110c4 <memset@plt>
   13584:	ldr	r3, [sp, #44]	; 0x2c
   13588:	str	r3, [r7, #4]
   1358c:	add	fp, r6, r5, lsl #3
   13590:	ldr	r8, [r6, r5, lsl #3]
   13594:	ldr	r7, [fp, #4]
   13598:	ldr	r9, [r4, #4]
   1359c:	orr	r9, r9, #1
   135a0:	add	sl, r4, #8
   135a4:	ldr	r3, [r4, #44]	; 0x2c
   135a8:	str	r3, [sp, #16]
   135ac:	ldr	r3, [r4, #40]	; 0x28
   135b0:	str	r3, [sp, #12]
   135b4:	str	sl, [sp, #8]
   135b8:	str	r9, [sp, #4]
   135bc:	ldr	r3, [r4]
   135c0:	str	r3, [sp]
   135c4:	ldr	r3, [sp, #28]
   135c8:	ldr	r2, [sp, #24]
   135cc:	mov	r1, r8
   135d0:	mov	r0, r7
   135d4:	bl	12364 <__assert_fail@plt+0x11bc>
   135d8:	cmp	r8, r0
   135dc:	bhi	1363c <__assert_fail@plt+0x2494>
   135e0:	add	r8, r0, #1
   135e4:	str	r8, [r6, r5, lsl #3]
   135e8:	ldr	r3, [pc, #164]	; 13694 <__assert_fail@plt+0x24ec>
   135ec:	cmp	r7, r3
   135f0:	beq	135fc <__assert_fail@plt+0x2454>
   135f4:	mov	r0, r7
   135f8:	bl	120ec <__assert_fail@plt+0xf44>
   135fc:	mov	r0, r8
   13600:	bl	145fc <__assert_fail@plt+0x3454>
   13604:	mov	r7, r0
   13608:	str	r0, [fp, #4]
   1360c:	ldr	r3, [r4, #44]	; 0x2c
   13610:	str	r3, [sp, #16]
   13614:	ldr	r3, [r4, #40]	; 0x28
   13618:	str	r3, [sp, #12]
   1361c:	str	sl, [sp, #8]
   13620:	str	r9, [sp, #4]
   13624:	ldr	r3, [r4]
   13628:	str	r3, [sp]
   1362c:	ldr	r3, [sp, #28]
   13630:	ldr	r2, [sp, #24]
   13634:	mov	r1, r8
   13638:	bl	12364 <__assert_fail@plt+0x11bc>
   1363c:	ldr	r3, [sp, #32]
   13640:	ldr	r2, [sp, #36]	; 0x24
   13644:	str	r2, [r3]
   13648:	mov	r0, r7
   1364c:	add	sp, sp, #52	; 0x34
   13650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13654:	bl	11184 <abort@plt>
   13658:	sub	r2, r5, r2
   1365c:	mov	r3, #8
   13660:	str	r3, [sp]
   13664:	mvn	r3, #-2147483648	; 0x80000000
   13668:	add	r2, r2, #1
   1366c:	add	r1, sp, #44	; 0x2c
   13670:	mov	r0, #0
   13674:	bl	14780 <__assert_fail@plt+0x35d8>
   13678:	mov	r6, r0
   1367c:	ldr	r3, [pc, #12]	; 13690 <__assert_fail@plt+0x24e8>
   13680:	str	r0, [r3], #8
   13684:	ldm	r3, {r0, r1}
   13688:	stm	r6, {r0, r1}
   1368c:	b	13564 <__assert_fail@plt+0x23bc>
   13690:	andeq	r8, r2, r0, lsr #2
   13694:	andeq	r8, r2, ip, lsl #3
   13698:	push	{r4, r5, r6, lr}
   1369c:	mov	r4, r0
   136a0:	bl	110a0 <__errno_location@plt>
   136a4:	mov	r5, r0
   136a8:	ldr	r6, [r0]
   136ac:	cmp	r4, #0
   136b0:	ldr	r3, [pc, #20]	; 136cc <__assert_fail@plt+0x2524>
   136b4:	moveq	r4, r3
   136b8:	mov	r1, #48	; 0x30
   136bc:	mov	r0, r4
   136c0:	bl	14ae8 <__assert_fail@plt+0x3940>
   136c4:	str	r6, [r5]
   136c8:	pop	{r4, r5, r6, pc}
   136cc:	andeq	r8, r2, ip, lsl #5
   136d0:	subs	r3, r0, #0
   136d4:	ldr	r2, [pc, #8]	; 136e4 <__assert_fail@plt+0x253c>
   136d8:	moveq	r3, r2
   136dc:	ldr	r0, [r3]
   136e0:	bx	lr
   136e4:	andeq	r8, r2, ip, lsl #5
   136e8:	subs	r3, r0, #0
   136ec:	ldr	r2, [pc, #8]	; 136fc <__assert_fail@plt+0x2554>
   136f0:	moveq	r3, r2
   136f4:	str	r1, [r3]
   136f8:	bx	lr
   136fc:	andeq	r8, r2, ip, lsl #5
   13700:	push	{lr}		; (str lr, [sp, #-4]!)
   13704:	subs	r3, r0, #0
   13708:	ldr	r0, [pc, #44]	; 1373c <__assert_fail@plt+0x2594>
   1370c:	moveq	r3, r0
   13710:	add	r3, r3, #8
   13714:	lsr	lr, r1, #5
   13718:	and	r1, r1, #31
   1371c:	ldr	ip, [r3, lr, lsl #2]
   13720:	lsr	r0, ip, r1
   13724:	eor	r2, r2, r0
   13728:	and	r2, r2, #1
   1372c:	eor	r1, ip, r2, lsl r1
   13730:	str	r1, [r3, lr, lsl #2]
   13734:	and	r0, r0, #1
   13738:	pop	{pc}		; (ldr pc, [sp], #4)
   1373c:	andeq	r8, r2, ip, lsl #5
   13740:	subs	r3, r0, #0
   13744:	ldr	r2, [pc, #12]	; 13758 <__assert_fail@plt+0x25b0>
   13748:	moveq	r3, r2
   1374c:	ldr	r0, [r3, #4]
   13750:	str	r1, [r3, #4]
   13754:	bx	lr
   13758:	andeq	r8, r2, ip, lsl #5
   1375c:	subs	r3, r0, #0
   13760:	ldr	r0, [pc, #40]	; 13790 <__assert_fail@plt+0x25e8>
   13764:	moveq	r3, r0
   13768:	mov	r0, #10
   1376c:	str	r0, [r3]
   13770:	cmp	r2, #0
   13774:	cmpne	r1, #0
   13778:	beq	13788 <__assert_fail@plt+0x25e0>
   1377c:	str	r1, [r3, #40]	; 0x28
   13780:	str	r2, [r3, #44]	; 0x2c
   13784:	bx	lr
   13788:	push	{r4, lr}
   1378c:	bl	11184 <abort@plt>
   13790:	andeq	r8, r2, ip, lsl #5
   13794:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13798:	sub	sp, sp, #24
   1379c:	mov	r7, r0
   137a0:	mov	r8, r1
   137a4:	mov	r9, r2
   137a8:	mov	sl, r3
   137ac:	ldr	r4, [sp, #56]	; 0x38
   137b0:	cmp	r4, #0
   137b4:	ldr	r3, [pc, #84]	; 13810 <__assert_fail@plt+0x2668>
   137b8:	moveq	r4, r3
   137bc:	bl	110a0 <__errno_location@plt>
   137c0:	mov	r5, r0
   137c4:	ldr	r6, [r0]
   137c8:	ldr	r3, [r4, #44]	; 0x2c
   137cc:	str	r3, [sp, #16]
   137d0:	ldr	r3, [r4, #40]	; 0x28
   137d4:	str	r3, [sp, #12]
   137d8:	add	r3, r4, #8
   137dc:	str	r3, [sp, #8]
   137e0:	ldr	r3, [r4, #4]
   137e4:	str	r3, [sp, #4]
   137e8:	ldr	r3, [r4]
   137ec:	str	r3, [sp]
   137f0:	mov	r3, sl
   137f4:	mov	r2, r9
   137f8:	mov	r1, r8
   137fc:	mov	r0, r7
   13800:	bl	12364 <__assert_fail@plt+0x11bc>
   13804:	str	r6, [r5]
   13808:	add	sp, sp, #24
   1380c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13810:	andeq	r8, r2, ip, lsl #5
   13814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13818:	sub	sp, sp, #44	; 0x2c
   1381c:	str	r0, [sp, #28]
   13820:	str	r1, [sp, #32]
   13824:	mov	r6, r2
   13828:	subs	r4, r3, #0
   1382c:	ldr	r3, [pc, #172]	; 138e0 <__assert_fail@plt+0x2738>
   13830:	moveq	r4, r3
   13834:	bl	110a0 <__errno_location@plt>
   13838:	mov	r7, r0
   1383c:	ldr	fp, [r0]
   13840:	ldr	r5, [r4, #4]
   13844:	cmp	r6, #0
   13848:	orreq	r5, r5, #1
   1384c:	add	r9, r4, #8
   13850:	ldr	r3, [r4, #44]	; 0x2c
   13854:	str	r3, [sp, #16]
   13858:	ldr	r3, [r4, #40]	; 0x28
   1385c:	str	r3, [sp, #12]
   13860:	str	r9, [sp, #8]
   13864:	str	r5, [sp, #4]
   13868:	ldr	r3, [r4]
   1386c:	str	r3, [sp]
   13870:	ldr	r3, [sp, #32]
   13874:	ldr	r2, [sp, #28]
   13878:	mov	r1, #0
   1387c:	mov	r0, r1
   13880:	bl	12364 <__assert_fail@plt+0x11bc>
   13884:	mov	sl, r0
   13888:	add	r8, r0, #1
   1388c:	mov	r0, r8
   13890:	bl	145fc <__assert_fail@plt+0x3454>
   13894:	str	r0, [sp, #36]	; 0x24
   13898:	ldr	r3, [r4, #44]	; 0x2c
   1389c:	str	r3, [sp, #16]
   138a0:	ldr	r3, [r4, #40]	; 0x28
   138a4:	str	r3, [sp, #12]
   138a8:	str	r9, [sp, #8]
   138ac:	str	r5, [sp, #4]
   138b0:	ldr	r3, [r4]
   138b4:	str	r3, [sp]
   138b8:	ldr	r3, [sp, #32]
   138bc:	ldr	r2, [sp, #28]
   138c0:	mov	r1, r8
   138c4:	bl	12364 <__assert_fail@plt+0x11bc>
   138c8:	str	fp, [r7]
   138cc:	cmp	r6, #0
   138d0:	strne	sl, [r6]
   138d4:	ldr	r0, [sp, #36]	; 0x24
   138d8:	add	sp, sp, #44	; 0x2c
   138dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   138e0:	andeq	r8, r2, ip, lsl #5
   138e4:	push	{r4, lr}
   138e8:	mov	r3, r2
   138ec:	mov	r2, #0
   138f0:	bl	13814 <__assert_fail@plt+0x266c>
   138f4:	pop	{r4, pc}
   138f8:	push	{r4, r5, r6, r7, r8, lr}
   138fc:	ldr	r3, [pc, #140]	; 13990 <__assert_fail@plt+0x27e8>
   13900:	ldr	r7, [r3]
   13904:	ldr	r3, [r3, #4]
   13908:	cmp	r3, #1
   1390c:	ble	13938 <__assert_fail@plt+0x2790>
   13910:	mov	r5, r7
   13914:	mov	r4, #1
   13918:	ldr	r6, [pc, #112]	; 13990 <__assert_fail@plt+0x27e8>
   1391c:	ldr	r0, [r5, #12]
   13920:	bl	120ec <__assert_fail@plt+0xf44>
   13924:	add	r4, r4, #1
   13928:	add	r5, r5, #8
   1392c:	ldr	r3, [r6, #4]
   13930:	cmp	r3, r4
   13934:	bgt	1391c <__assert_fail@plt+0x2774>
   13938:	ldr	r0, [r7, #4]
   1393c:	ldr	r3, [pc, #80]	; 13994 <__assert_fail@plt+0x27ec>
   13940:	cmp	r0, r3
   13944:	beq	13960 <__assert_fail@plt+0x27b8>
   13948:	bl	120ec <__assert_fail@plt+0xf44>
   1394c:	ldr	r3, [pc, #60]	; 13990 <__assert_fail@plt+0x27e8>
   13950:	mov	r2, #256	; 0x100
   13954:	str	r2, [r3, #8]
   13958:	ldr	r2, [pc, #52]	; 13994 <__assert_fail@plt+0x27ec>
   1395c:	str	r2, [r3, #12]
   13960:	ldr	r3, [pc, #48]	; 13998 <__assert_fail@plt+0x27f0>
   13964:	cmp	r7, r3
   13968:	beq	13980 <__assert_fail@plt+0x27d8>
   1396c:	mov	r0, r7
   13970:	bl	120ec <__assert_fail@plt+0xf44>
   13974:	ldr	r3, [pc, #20]	; 13990 <__assert_fail@plt+0x27e8>
   13978:	add	r2, r3, #8
   1397c:	str	r2, [r3]
   13980:	mov	r2, #1
   13984:	ldr	r3, [pc, #4]	; 13990 <__assert_fail@plt+0x27e8>
   13988:	str	r2, [r3, #4]
   1398c:	pop	{r4, r5, r6, r7, r8, pc}
   13990:	andeq	r8, r2, r0, lsr #2
   13994:	andeq	r8, r2, ip, lsl #3
   13998:	andeq	r8, r2, r8, lsr #2
   1399c:	push	{r4, lr}
   139a0:	ldr	r3, [pc, #8]	; 139b0 <__assert_fail@plt+0x2808>
   139a4:	mvn	r2, #0
   139a8:	bl	134d4 <__assert_fail@plt+0x232c>
   139ac:	pop	{r4, pc}
   139b0:	andeq	r8, r2, ip, lsl #5
   139b4:	push	{r4, lr}
   139b8:	ldr	r3, [pc, #4]	; 139c4 <__assert_fail@plt+0x281c>
   139bc:	bl	134d4 <__assert_fail@plt+0x232c>
   139c0:	pop	{r4, pc}
   139c4:	andeq	r8, r2, ip, lsl #5
   139c8:	push	{r4, lr}
   139cc:	mov	r1, r0
   139d0:	mov	r0, #0
   139d4:	bl	1399c <__assert_fail@plt+0x27f4>
   139d8:	pop	{r4, pc}
   139dc:	push	{r4, lr}
   139e0:	mov	r2, r1
   139e4:	mov	r1, r0
   139e8:	mov	r0, #0
   139ec:	bl	139b4 <__assert_fail@plt+0x280c>
   139f0:	pop	{r4, pc}
   139f4:	push	{r4, r5, lr}
   139f8:	sub	sp, sp, #52	; 0x34
   139fc:	mov	r4, r0
   13a00:	mov	r5, r2
   13a04:	mov	r0, sp
   13a08:	bl	121fc <__assert_fail@plt+0x1054>
   13a0c:	mov	r3, sp
   13a10:	mvn	r2, #0
   13a14:	mov	r1, r5
   13a18:	mov	r0, r4
   13a1c:	bl	134d4 <__assert_fail@plt+0x232c>
   13a20:	add	sp, sp, #52	; 0x34
   13a24:	pop	{r4, r5, pc}
   13a28:	push	{r4, r5, r6, lr}
   13a2c:	sub	sp, sp, #48	; 0x30
   13a30:	mov	r4, r0
   13a34:	mov	r5, r2
   13a38:	mov	r6, r3
   13a3c:	mov	r0, sp
   13a40:	bl	121fc <__assert_fail@plt+0x1054>
   13a44:	mov	r3, sp
   13a48:	mov	r2, r6
   13a4c:	mov	r1, r5
   13a50:	mov	r0, r4
   13a54:	bl	134d4 <__assert_fail@plt+0x232c>
   13a58:	add	sp, sp, #48	; 0x30
   13a5c:	pop	{r4, r5, r6, pc}
   13a60:	push	{r4, lr}
   13a64:	mov	r2, r1
   13a68:	mov	r1, r0
   13a6c:	mov	r0, #0
   13a70:	bl	139f4 <__assert_fail@plt+0x284c>
   13a74:	pop	{r4, pc}
   13a78:	push	{r4, lr}
   13a7c:	mov	r3, r2
   13a80:	mov	r2, r1
   13a84:	mov	r1, r0
   13a88:	mov	r0, #0
   13a8c:	bl	13a28 <__assert_fail@plt+0x2880>
   13a90:	pop	{r4, pc}
   13a94:	push	{r4, r5, r6, lr}
   13a98:	sub	sp, sp, #48	; 0x30
   13a9c:	mov	r4, r0
   13aa0:	mov	r5, r1
   13aa4:	mov	r6, r2
   13aa8:	mov	ip, sp
   13aac:	ldr	lr, [pc, #64]	; 13af4 <__assert_fail@plt+0x294c>
   13ab0:	ldm	lr!, {r0, r1, r2, r3}
   13ab4:	stmia	ip!, {r0, r1, r2, r3}
   13ab8:	ldm	lr!, {r0, r1, r2, r3}
   13abc:	stmia	ip!, {r0, r1, r2, r3}
   13ac0:	ldm	lr, {r0, r1, r2, r3}
   13ac4:	stm	ip, {r0, r1, r2, r3}
   13ac8:	mov	r2, #1
   13acc:	mov	r1, r6
   13ad0:	mov	r0, sp
   13ad4:	bl	13700 <__assert_fail@plt+0x2558>
   13ad8:	mov	r3, sp
   13adc:	mov	r2, r5
   13ae0:	mov	r1, r4
   13ae4:	mov	r0, #0
   13ae8:	bl	134d4 <__assert_fail@plt+0x232c>
   13aec:	add	sp, sp, #48	; 0x30
   13af0:	pop	{r4, r5, r6, pc}
   13af4:	andeq	r8, r2, ip, lsl #5
   13af8:	push	{r4, lr}
   13afc:	mov	r2, r1
   13b00:	mvn	r1, #0
   13b04:	bl	13a94 <__assert_fail@plt+0x28ec>
   13b08:	pop	{r4, pc}
   13b0c:	push	{r4, lr}
   13b10:	mov	r1, #58	; 0x3a
   13b14:	bl	13af8 <__assert_fail@plt+0x2950>
   13b18:	pop	{r4, pc}
   13b1c:	push	{r4, lr}
   13b20:	mov	r2, #58	; 0x3a
   13b24:	bl	13a94 <__assert_fail@plt+0x28ec>
   13b28:	pop	{r4, pc}
   13b2c:	push	{r4, r5, lr}
   13b30:	sub	sp, sp, #100	; 0x64
   13b34:	mov	r4, r0
   13b38:	mov	r5, r2
   13b3c:	mov	r0, sp
   13b40:	bl	121fc <__assert_fail@plt+0x1054>
   13b44:	add	lr, sp, #48	; 0x30
   13b48:	mov	ip, sp
   13b4c:	ldm	ip!, {r0, r1, r2, r3}
   13b50:	stmia	lr!, {r0, r1, r2, r3}
   13b54:	ldm	ip!, {r0, r1, r2, r3}
   13b58:	stmia	lr!, {r0, r1, r2, r3}
   13b5c:	ldm	ip, {r0, r1, r2, r3}
   13b60:	stm	lr, {r0, r1, r2, r3}
   13b64:	mov	r2, #1
   13b68:	mov	r1, #58	; 0x3a
   13b6c:	add	r0, sp, #48	; 0x30
   13b70:	bl	13700 <__assert_fail@plt+0x2558>
   13b74:	add	r3, sp, #48	; 0x30
   13b78:	mvn	r2, #0
   13b7c:	mov	r1, r5
   13b80:	mov	r0, r4
   13b84:	bl	134d4 <__assert_fail@plt+0x232c>
   13b88:	add	sp, sp, #100	; 0x64
   13b8c:	pop	{r4, r5, pc}
   13b90:	push	{r4, r5, r6, r7, lr}
   13b94:	sub	sp, sp, #52	; 0x34
   13b98:	mov	r4, r0
   13b9c:	mov	r6, r1
   13ba0:	mov	r7, r2
   13ba4:	mov	r5, r3
   13ba8:	mov	ip, sp
   13bac:	ldr	lr, [pc, #64]	; 13bf4 <__assert_fail@plt+0x2a4c>
   13bb0:	ldm	lr!, {r0, r1, r2, r3}
   13bb4:	stmia	ip!, {r0, r1, r2, r3}
   13bb8:	ldm	lr!, {r0, r1, r2, r3}
   13bbc:	stmia	ip!, {r0, r1, r2, r3}
   13bc0:	ldm	lr, {r0, r1, r2, r3}
   13bc4:	stm	ip, {r0, r1, r2, r3}
   13bc8:	mov	r2, r7
   13bcc:	mov	r1, r6
   13bd0:	mov	r0, sp
   13bd4:	bl	1375c <__assert_fail@plt+0x25b4>
   13bd8:	mov	r3, sp
   13bdc:	ldr	r2, [sp, #72]	; 0x48
   13be0:	mov	r1, r5
   13be4:	mov	r0, r4
   13be8:	bl	134d4 <__assert_fail@plt+0x232c>
   13bec:	add	sp, sp, #52	; 0x34
   13bf0:	pop	{r4, r5, r6, r7, pc}
   13bf4:	andeq	r8, r2, ip, lsl #5
   13bf8:	push	{lr}		; (str lr, [sp, #-4]!)
   13bfc:	sub	sp, sp, #12
   13c00:	mvn	ip, #0
   13c04:	str	ip, [sp]
   13c08:	bl	13b90 <__assert_fail@plt+0x29e8>
   13c0c:	add	sp, sp, #12
   13c10:	pop	{pc}		; (ldr pc, [sp], #4)
   13c14:	push	{r4, lr}
   13c18:	mov	r3, r2
   13c1c:	mov	r2, r1
   13c20:	mov	r1, r0
   13c24:	mov	r0, #0
   13c28:	bl	13bf8 <__assert_fail@plt+0x2a50>
   13c2c:	pop	{r4, pc}
   13c30:	push	{lr}		; (str lr, [sp, #-4]!)
   13c34:	sub	sp, sp, #12
   13c38:	str	r3, [sp]
   13c3c:	mov	r3, r2
   13c40:	mov	r2, r1
   13c44:	mov	r1, r0
   13c48:	mov	r0, #0
   13c4c:	bl	13b90 <__assert_fail@plt+0x29e8>
   13c50:	add	sp, sp, #12
   13c54:	pop	{pc}		; (ldr pc, [sp], #4)
   13c58:	push	{r4, lr}
   13c5c:	ldr	r3, [pc, #4]	; 13c68 <__assert_fail@plt+0x2ac0>
   13c60:	bl	134d4 <__assert_fail@plt+0x232c>
   13c64:	pop	{r4, pc}
   13c68:	andeq	r8, r2, r0, lsr r1
   13c6c:	push	{r4, lr}
   13c70:	mov	r2, r1
   13c74:	mov	r1, r0
   13c78:	mov	r0, #0
   13c7c:	bl	13c58 <__assert_fail@plt+0x2ab0>
   13c80:	pop	{r4, pc}
   13c84:	push	{r4, lr}
   13c88:	mvn	r2, #0
   13c8c:	bl	13c58 <__assert_fail@plt+0x2ab0>
   13c90:	pop	{r4, pc}
   13c94:	push	{r4, lr}
   13c98:	mov	r1, r0
   13c9c:	mov	r0, #0
   13ca0:	bl	13c84 <__assert_fail@plt+0x2adc>
   13ca4:	pop	{r4, pc}
   13ca8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cac:	sub	sp, sp, #44	; 0x2c
   13cb0:	mov	r6, r1
   13cb4:	mov	r8, r2
   13cb8:	ldr	r7, [sp, #80]	; 0x50
   13cbc:	ldr	fp, [r2]
   13cc0:	subs	r9, r3, #0
   13cc4:	ldrne	sl, [r9]
   13cc8:	mvneq	sl, #0
   13ccc:	cmp	r7, #0
   13cd0:	movne	r3, #0
   13cd4:	strne	r3, [r7]
   13cd8:	ldr	r3, [sp, #84]	; 0x54
   13cdc:	cmp	r3, #0
   13ce0:	movne	r3, #0
   13ce4:	ldrne	r2, [sp, #84]	; 0x54
   13ce8:	strne	r3, [r2]
   13cec:	cmp	r1, #0
   13cf0:	beq	13ddc <__assert_fail@plt+0x2c34>
   13cf4:	subs	r5, r1, r0
   13cf8:	moveq	r4, #0
   13cfc:	bne	13df8 <__assert_fail@plt+0x2c50>
   13d00:	ldrb	r3, [r6, #1]
   13d04:	cmp	r3, #0
   13d08:	bne	13e10 <__assert_fail@plt+0x2c68>
   13d0c:	cmp	r4, #0
   13d10:	streq	r4, [sp, #12]
   13d14:	beq	13f34 <__assert_fail@plt+0x2d8c>
   13d18:	mov	r5, #0
   13d1c:	ldrb	r3, [r4]
   13d20:	cmp	r3, #43	; 0x2b
   13d24:	beq	13e30 <__assert_fail@plt+0x2c88>
   13d28:	mov	r0, r4
   13d2c:	bl	10ee4 <getpwnam@plt>
   13d30:	cmp	r0, #0
   13d34:	beq	13e30 <__assert_fail@plt+0x2c88>
   13d38:	ldr	fp, [r0, #8]
   13d3c:	clz	r3, r5
   13d40:	lsr	r3, r3, #5
   13d44:	cmp	r6, #0
   13d48:	moveq	r3, #0
   13d4c:	cmp	r3, #0
   13d50:	moveq	r3, #0
   13d54:	streq	r3, [sp, #12]
   13d58:	moveq	r6, r3
   13d5c:	bne	13eac <__assert_fail@plt+0x2d04>
   13d60:	bl	11124 <endpwent@plt>
   13d64:	adds	r3, r5, #0
   13d68:	movne	r3, #1
   13d6c:	cmp	r6, #0
   13d70:	movne	r3, #0
   13d74:	cmp	r3, #0
   13d78:	beq	13dac <__assert_fail@plt+0x2c04>
   13d7c:	ldrb	r3, [r5]
   13d80:	cmp	r3, #43	; 0x2b
   13d84:	beq	13eec <__assert_fail@plt+0x2d44>
   13d88:	mov	r0, r5
   13d8c:	bl	1119c <getgrnam@plt>
   13d90:	cmp	r0, #0
   13d94:	ldrne	sl, [r0, #8]
   13d98:	beq	13eec <__assert_fail@plt+0x2d44>
   13d9c:	bl	10ec0 <endgrent@plt>
   13da0:	mov	r0, r5
   13da4:	bl	14b5c <__assert_fail@plt+0x39b4>
   13da8:	str	r0, [sp, #12]
   13dac:	cmp	r6, #0
   13db0:	beq	13f34 <__assert_fail@plt+0x2d8c>
   13db4:	mov	r0, r4
   13db8:	bl	120ec <__assert_fail@plt+0xf44>
   13dbc:	ldr	r0, [sp, #12]
   13dc0:	bl	120ec <__assert_fail@plt+0xf44>
   13dc4:	mov	r2, #5
   13dc8:	mov	r1, r6
   13dcc:	mov	r0, #0
   13dd0:	bl	10f74 <dcgettext@plt>
   13dd4:	add	sp, sp, #44	; 0x2c
   13dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ddc:	ldrb	r3, [r0]
   13de0:	cmp	r3, #0
   13de4:	moveq	r4, #0
   13de8:	beq	13d0c <__assert_fail@plt+0x2b64>
   13dec:	bl	14b5c <__assert_fail@plt+0x39b4>
   13df0:	mov	r4, r0
   13df4:	b	13d0c <__assert_fail@plt+0x2b64>
   13df8:	add	r1, r5, #1
   13dfc:	bl	14b0c <__assert_fail@plt+0x3964>
   13e00:	mov	r4, r0
   13e04:	mov	r3, #0
   13e08:	strb	r3, [r0, r5]
   13e0c:	b	13d00 <__assert_fail@plt+0x2b58>
   13e10:	add	r5, r6, #1
   13e14:	cmp	r4, #0
   13e18:	bne	13d1c <__assert_fail@plt+0x2b74>
   13e1c:	cmp	r5, #0
   13e20:	streq	r4, [sp, #12]
   13e24:	beq	13f34 <__assert_fail@plt+0x2d8c>
   13e28:	mov	r6, #0
   13e2c:	b	13d7c <__assert_fail@plt+0x2bd4>
   13e30:	adds	r6, r6, #0
   13e34:	movne	r6, #1
   13e38:	cmp	r5, #0
   13e3c:	movne	r6, #0
   13e40:	cmp	r6, #0
   13e44:	beq	13e5c <__assert_fail@plt+0x2cb4>
   13e48:	bl	11124 <endpwent@plt>
   13e4c:	mov	r3, #0
   13e50:	str	r3, [sp, #12]
   13e54:	ldr	r6, [pc, #288]	; 13f7c <__assert_fail@plt+0x2dd4>
   13e58:	b	13dac <__assert_fail@plt+0x2c04>
   13e5c:	ldr	r3, [pc, #284]	; 13f80 <__assert_fail@plt+0x2dd8>
   13e60:	str	r3, [sp]
   13e64:	add	r3, sp, #16
   13e68:	mov	r2, #10
   13e6c:	mov	r1, #0
   13e70:	mov	r0, r4
   13e74:	bl	14ca4 <__assert_fail@plt+0x3afc>
   13e78:	cmp	r0, #0
   13e7c:	bne	13ea4 <__assert_fail@plt+0x2cfc>
   13e80:	ldr	r3, [sp, #16]
   13e84:	cmn	r3, #1
   13e88:	movne	fp, r3
   13e8c:	ldr	r6, [pc, #240]	; 13f84 <__assert_fail@plt+0x2ddc>
   13e90:	cmn	r3, #1
   13e94:	movne	r6, #0
   13e98:	mov	r3, #0
   13e9c:	str	r3, [sp, #12]
   13ea0:	b	13d60 <__assert_fail@plt+0x2bb8>
   13ea4:	ldr	r6, [pc, #216]	; 13f84 <__assert_fail@plt+0x2ddc>
   13ea8:	b	13e98 <__assert_fail@plt+0x2cf0>
   13eac:	ldr	sl, [r0, #12]
   13eb0:	mov	r0, sl
   13eb4:	bl	11190 <getgrgid@plt>
   13eb8:	cmp	r0, #0
   13ebc:	beq	13ed8 <__assert_fail@plt+0x2d30>
   13ec0:	ldr	r0, [r0]
   13ec4:	bl	14b5c <__assert_fail@plt+0x39b4>
   13ec8:	str	r0, [sp, #12]
   13ecc:	bl	10ec0 <endgrent@plt>
   13ed0:	mov	r6, #0
   13ed4:	b	13d60 <__assert_fail@plt+0x2bb8>
   13ed8:	add	r2, sp, #16
   13edc:	mov	r0, sl
   13ee0:	mov	r1, #0
   13ee4:	bl	1597c <__assert_fail@plt+0x47d4>
   13ee8:	b	13ec4 <__assert_fail@plt+0x2d1c>
   13eec:	ldr	r3, [pc, #140]	; 13f80 <__assert_fail@plt+0x2dd8>
   13ef0:	str	r3, [sp]
   13ef4:	add	r3, sp, #16
   13ef8:	mov	r2, #10
   13efc:	mov	r1, #0
   13f00:	mov	r0, r5
   13f04:	bl	14ca4 <__assert_fail@plt+0x3afc>
   13f08:	cmp	r0, #0
   13f0c:	bne	13f2c <__assert_fail@plt+0x2d84>
   13f10:	ldr	r3, [sp, #16]
   13f14:	cmn	r3, #1
   13f18:	movne	sl, r3
   13f1c:	ldr	r2, [pc, #100]	; 13f88 <__assert_fail@plt+0x2de0>
   13f20:	cmn	r3, #1
   13f24:	moveq	r6, r2
   13f28:	b	13d9c <__assert_fail@plt+0x2bf4>
   13f2c:	ldr	r6, [pc, #84]	; 13f88 <__assert_fail@plt+0x2de0>
   13f30:	b	13d9c <__assert_fail@plt+0x2bf4>
   13f34:	str	fp, [r8]
   13f38:	cmp	r9, #0
   13f3c:	strne	sl, [r9]
   13f40:	cmp	r7, #0
   13f44:	strne	r4, [r7]
   13f48:	movne	r4, #0
   13f4c:	ldr	r3, [sp, #84]	; 0x54
   13f50:	cmp	r3, #0
   13f54:	ldrne	r2, [sp, #12]
   13f58:	strne	r2, [r3]
   13f5c:	movne	r3, #0
   13f60:	strne	r3, [sp, #12]
   13f64:	mov	r0, r4
   13f68:	bl	120ec <__assert_fail@plt+0xf44>
   13f6c:	ldr	r0, [sp, #12]
   13f70:	bl	120ec <__assert_fail@plt+0xf44>
   13f74:	mov	r0, #0
   13f78:	b	13dd4 <__assert_fail@plt+0x2c2c>
   13f7c:	muleq	r1, r4, fp
   13f80:	andeq	r6, r1, r4, lsr #14
   13f84:	andeq	r6, r1, r4, ror fp
   13f88:	andeq	r6, r1, r4, lsl #23
   13f8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f90:	sub	sp, sp, #8
   13f94:	mov	r5, r0
   13f98:	mov	r7, r1
   13f9c:	mov	r8, r3
   13fa0:	ldr	r9, [sp, #40]	; 0x28
   13fa4:	subs	sl, r2, #0
   13fa8:	beq	14030 <__assert_fail@plt+0x2e88>
   13fac:	mov	r1, #58	; 0x3a
   13fb0:	bl	11094 <strchr@plt>
   13fb4:	mov	r4, r0
   13fb8:	str	r9, [sp, #4]
   13fbc:	str	r8, [sp]
   13fc0:	mov	r3, sl
   13fc4:	mov	r2, r7
   13fc8:	mov	r1, r0
   13fcc:	mov	r0, r5
   13fd0:	bl	13ca8 <__assert_fail@plt+0x2b00>
   13fd4:	mov	r6, r0
   13fd8:	clz	r3, r4
   13fdc:	lsr	r3, r3, #5
   13fe0:	cmp	r0, #0
   13fe4:	moveq	r3, #0
   13fe8:	cmp	r3, #0
   13fec:	beq	14024 <__assert_fail@plt+0x2e7c>
   13ff0:	mov	r1, #46	; 0x2e
   13ff4:	mov	r0, r5
   13ff8:	bl	11094 <strchr@plt>
   13ffc:	subs	r1, r0, #0
   14000:	beq	14024 <__assert_fail@plt+0x2e7c>
   14004:	str	r9, [sp, #4]
   14008:	str	r8, [sp]
   1400c:	mov	r3, sl
   14010:	mov	r2, r7
   14014:	mov	r0, r5
   14018:	bl	13ca8 <__assert_fail@plt+0x2b00>
   1401c:	cmp	r0, #0
   14020:	moveq	r6, #0
   14024:	mov	r0, r6
   14028:	add	sp, sp, #8
   1402c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14030:	str	r9, [sp, #4]
   14034:	str	r3, [sp]
   14038:	mov	r3, #0
   1403c:	mov	r2, r1
   14040:	mov	r1, r3
   14044:	bl	13ca8 <__assert_fail@plt+0x2b00>
   14048:	mov	r6, r0
   1404c:	b	14024 <__assert_fail@plt+0x2e7c>
   14050:	push	{r4, r5, r6, lr}
   14054:	sub	sp, sp, #32
   14058:	mov	r4, r0
   1405c:	ldr	r5, [sp, #48]	; 0x30
   14060:	ldr	r6, [sp, #52]	; 0x34
   14064:	cmp	r1, #0
   14068:	beq	14120 <__assert_fail@plt+0x2f78>
   1406c:	str	r3, [sp, #4]
   14070:	str	r2, [sp]
   14074:	mov	r3, r1
   14078:	ldr	r2, [pc, #940]	; 1442c <__assert_fail@plt+0x3284>
   1407c:	mov	r1, #1
   14080:	bl	110e8 <__fprintf_chk@plt>
   14084:	mov	r2, #5
   14088:	ldr	r1, [pc, #928]	; 14430 <__assert_fail@plt+0x3288>
   1408c:	mov	r0, #0
   14090:	bl	10f74 <dcgettext@plt>
   14094:	ldr	r3, [pc, #920]	; 14434 <__assert_fail@plt+0x328c>
   14098:	str	r3, [sp]
   1409c:	mov	r3, r0
   140a0:	ldr	r2, [pc, #912]	; 14438 <__assert_fail@plt+0x3290>
   140a4:	mov	r1, #1
   140a8:	mov	r0, r4
   140ac:	bl	110e8 <__fprintf_chk@plt>
   140b0:	mov	r1, r4
   140b4:	mov	r0, #10
   140b8:	bl	10f68 <fputc_unlocked@plt>
   140bc:	mov	r2, #5
   140c0:	ldr	r1, [pc, #884]	; 1443c <__assert_fail@plt+0x3294>
   140c4:	mov	r0, #0
   140c8:	bl	10f74 <dcgettext@plt>
   140cc:	ldr	r3, [pc, #876]	; 14440 <__assert_fail@plt+0x3298>
   140d0:	mov	r2, r0
   140d4:	mov	r1, #1
   140d8:	mov	r0, r4
   140dc:	bl	110e8 <__fprintf_chk@plt>
   140e0:	mov	r1, r4
   140e4:	mov	r0, #10
   140e8:	bl	10f68 <fputc_unlocked@plt>
   140ec:	cmp	r6, #9
   140f0:	ldrls	pc, [pc, r6, lsl #2]
   140f4:	b	143c4 <__assert_fail@plt+0x321c>
   140f8:	andeq	r4, r1, ip, asr r1
   140fc:	andeq	r4, r1, r8, lsr r1
   14100:	andeq	r4, r1, r4, ror #2
   14104:	muleq	r1, r4, r1
   14108:	andeq	r4, r1, ip, asr #3
   1410c:	andeq	r4, r1, ip, lsl #4
   14110:	andeq	r4, r1, r4, asr r2
   14114:	andeq	r4, r1, r4, lsr #5
   14118:	strdeq	r4, [r1], -ip
   1411c:	andeq	r4, r1, ip, asr r3
   14120:	str	r3, [sp]
   14124:	mov	r3, r2
   14128:	ldr	r2, [pc, #788]	; 14444 <__assert_fail@plt+0x329c>
   1412c:	mov	r1, #1
   14130:	bl	110e8 <__fprintf_chk@plt>
   14134:	b	14084 <__assert_fail@plt+0x2edc>
   14138:	mov	r2, #5
   1413c:	ldr	r1, [pc, #772]	; 14448 <__assert_fail@plt+0x32a0>
   14140:	mov	r0, #0
   14144:	bl	10f74 <dcgettext@plt>
   14148:	ldr	r3, [r5]
   1414c:	mov	r2, r0
   14150:	mov	r1, #1
   14154:	mov	r0, r4
   14158:	bl	110e8 <__fprintf_chk@plt>
   1415c:	add	sp, sp, #32
   14160:	pop	{r4, r5, r6, pc}
   14164:	mov	r2, #5
   14168:	ldr	r1, [pc, #732]	; 1444c <__assert_fail@plt+0x32a4>
   1416c:	mov	r0, #0
   14170:	bl	10f74 <dcgettext@plt>
   14174:	ldr	r3, [r5]
   14178:	ldr	r2, [r5, #4]
   1417c:	str	r2, [sp]
   14180:	mov	r2, r0
   14184:	mov	r1, #1
   14188:	mov	r0, r4
   1418c:	bl	110e8 <__fprintf_chk@plt>
   14190:	b	1415c <__assert_fail@plt+0x2fb4>
   14194:	mov	r2, #5
   14198:	ldr	r1, [pc, #688]	; 14450 <__assert_fail@plt+0x32a8>
   1419c:	mov	r0, #0
   141a0:	bl	10f74 <dcgettext@plt>
   141a4:	ldr	r3, [r5]
   141a8:	ldr	r2, [r5, #8]
   141ac:	str	r2, [sp, #4]
   141b0:	ldr	r2, [r5, #4]
   141b4:	str	r2, [sp]
   141b8:	mov	r2, r0
   141bc:	mov	r1, #1
   141c0:	mov	r0, r4
   141c4:	bl	110e8 <__fprintf_chk@plt>
   141c8:	b	1415c <__assert_fail@plt+0x2fb4>
   141cc:	mov	r2, #5
   141d0:	ldr	r1, [pc, #636]	; 14454 <__assert_fail@plt+0x32ac>
   141d4:	mov	r0, #0
   141d8:	bl	10f74 <dcgettext@plt>
   141dc:	ldr	r3, [r5]
   141e0:	ldr	r2, [r5, #12]
   141e4:	str	r2, [sp, #8]
   141e8:	ldr	r2, [r5, #8]
   141ec:	str	r2, [sp, #4]
   141f0:	ldr	r2, [r5, #4]
   141f4:	str	r2, [sp]
   141f8:	mov	r2, r0
   141fc:	mov	r1, #1
   14200:	mov	r0, r4
   14204:	bl	110e8 <__fprintf_chk@plt>
   14208:	b	1415c <__assert_fail@plt+0x2fb4>
   1420c:	mov	r2, #5
   14210:	ldr	r1, [pc, #576]	; 14458 <__assert_fail@plt+0x32b0>
   14214:	mov	r0, #0
   14218:	bl	10f74 <dcgettext@plt>
   1421c:	ldr	r3, [r5]
   14220:	ldr	r2, [r5, #16]
   14224:	str	r2, [sp, #12]
   14228:	ldr	r2, [r5, #12]
   1422c:	str	r2, [sp, #8]
   14230:	ldr	r2, [r5, #8]
   14234:	str	r2, [sp, #4]
   14238:	ldr	r2, [r5, #4]
   1423c:	str	r2, [sp]
   14240:	mov	r2, r0
   14244:	mov	r1, #1
   14248:	mov	r0, r4
   1424c:	bl	110e8 <__fprintf_chk@plt>
   14250:	b	1415c <__assert_fail@plt+0x2fb4>
   14254:	mov	r2, #5
   14258:	ldr	r1, [pc, #508]	; 1445c <__assert_fail@plt+0x32b4>
   1425c:	mov	r0, #0
   14260:	bl	10f74 <dcgettext@plt>
   14264:	ldr	r3, [r5]
   14268:	ldr	r2, [r5, #20]
   1426c:	str	r2, [sp, #16]
   14270:	ldr	r2, [r5, #16]
   14274:	str	r2, [sp, #12]
   14278:	ldr	r2, [r5, #12]
   1427c:	str	r2, [sp, #8]
   14280:	ldr	r2, [r5, #8]
   14284:	str	r2, [sp, #4]
   14288:	ldr	r2, [r5, #4]
   1428c:	str	r2, [sp]
   14290:	mov	r2, r0
   14294:	mov	r1, #1
   14298:	mov	r0, r4
   1429c:	bl	110e8 <__fprintf_chk@plt>
   142a0:	b	1415c <__assert_fail@plt+0x2fb4>
   142a4:	mov	r2, #5
   142a8:	ldr	r1, [pc, #432]	; 14460 <__assert_fail@plt+0x32b8>
   142ac:	mov	r0, #0
   142b0:	bl	10f74 <dcgettext@plt>
   142b4:	ldr	r3, [r5]
   142b8:	ldr	r2, [r5, #24]
   142bc:	str	r2, [sp, #20]
   142c0:	ldr	r2, [r5, #20]
   142c4:	str	r2, [sp, #16]
   142c8:	ldr	r2, [r5, #16]
   142cc:	str	r2, [sp, #12]
   142d0:	ldr	r2, [r5, #12]
   142d4:	str	r2, [sp, #8]
   142d8:	ldr	r2, [r5, #8]
   142dc:	str	r2, [sp, #4]
   142e0:	ldr	r2, [r5, #4]
   142e4:	str	r2, [sp]
   142e8:	mov	r2, r0
   142ec:	mov	r1, #1
   142f0:	mov	r0, r4
   142f4:	bl	110e8 <__fprintf_chk@plt>
   142f8:	b	1415c <__assert_fail@plt+0x2fb4>
   142fc:	mov	r2, #5
   14300:	ldr	r1, [pc, #348]	; 14464 <__assert_fail@plt+0x32bc>
   14304:	mov	r0, #0
   14308:	bl	10f74 <dcgettext@plt>
   1430c:	ldr	r3, [r5]
   14310:	ldr	r2, [r5, #28]
   14314:	str	r2, [sp, #24]
   14318:	ldr	r2, [r5, #24]
   1431c:	str	r2, [sp, #20]
   14320:	ldr	r2, [r5, #20]
   14324:	str	r2, [sp, #16]
   14328:	ldr	r2, [r5, #16]
   1432c:	str	r2, [sp, #12]
   14330:	ldr	r2, [r5, #12]
   14334:	str	r2, [sp, #8]
   14338:	ldr	r2, [r5, #8]
   1433c:	str	r2, [sp, #4]
   14340:	ldr	r2, [r5, #4]
   14344:	str	r2, [sp]
   14348:	mov	r2, r0
   1434c:	mov	r1, #1
   14350:	mov	r0, r4
   14354:	bl	110e8 <__fprintf_chk@plt>
   14358:	b	1415c <__assert_fail@plt+0x2fb4>
   1435c:	mov	r2, #5
   14360:	ldr	r1, [pc, #256]	; 14468 <__assert_fail@plt+0x32c0>
   14364:	mov	r0, #0
   14368:	bl	10f74 <dcgettext@plt>
   1436c:	ldr	r3, [r5]
   14370:	ldr	r2, [r5, #32]
   14374:	str	r2, [sp, #28]
   14378:	ldr	r2, [r5, #28]
   1437c:	str	r2, [sp, #24]
   14380:	ldr	r2, [r5, #24]
   14384:	str	r2, [sp, #20]
   14388:	ldr	r2, [r5, #20]
   1438c:	str	r2, [sp, #16]
   14390:	ldr	r2, [r5, #16]
   14394:	str	r2, [sp, #12]
   14398:	ldr	r2, [r5, #12]
   1439c:	str	r2, [sp, #8]
   143a0:	ldr	r2, [r5, #8]
   143a4:	str	r2, [sp, #4]
   143a8:	ldr	r2, [r5, #4]
   143ac:	str	r2, [sp]
   143b0:	mov	r2, r0
   143b4:	mov	r1, #1
   143b8:	mov	r0, r4
   143bc:	bl	110e8 <__fprintf_chk@plt>
   143c0:	b	1415c <__assert_fail@plt+0x2fb4>
   143c4:	mov	r2, #5
   143c8:	ldr	r1, [pc, #156]	; 1446c <__assert_fail@plt+0x32c4>
   143cc:	mov	r0, #0
   143d0:	bl	10f74 <dcgettext@plt>
   143d4:	ldr	r3, [r5]
   143d8:	ldr	r2, [r5, #32]
   143dc:	str	r2, [sp, #28]
   143e0:	ldr	r2, [r5, #28]
   143e4:	str	r2, [sp, #24]
   143e8:	ldr	r2, [r5, #24]
   143ec:	str	r2, [sp, #20]
   143f0:	ldr	r2, [r5, #20]
   143f4:	str	r2, [sp, #16]
   143f8:	ldr	r2, [r5, #16]
   143fc:	str	r2, [sp, #12]
   14400:	ldr	r2, [r5, #12]
   14404:	str	r2, [sp, #8]
   14408:	ldr	r2, [r5, #8]
   1440c:	str	r2, [sp, #4]
   14410:	ldr	r2, [r5, #4]
   14414:	str	r2, [sp]
   14418:	mov	r2, r0
   1441c:	mov	r1, #1
   14420:	mov	r0, r4
   14424:	bl	110e8 <__fprintf_chk@plt>
   14428:	b	1415c <__assert_fail@plt+0x2fb4>
   1442c:	andeq	r6, r1, r4, lsr #23
   14430:			; <UNDEFINED> instruction: 0x00016bb8
   14434:	andeq	r0, r0, r6, ror #15
   14438:	muleq	r1, r0, lr
   1443c:			; <UNDEFINED> instruction: 0x00016bbc
   14440:	andeq	r6, r1, r8, ror #24
   14444:			; <UNDEFINED> instruction: 0x00016bb0
   14448:	andeq	r6, r1, ip, lsl #25
   1444c:	muleq	r1, ip, ip
   14450:			; <UNDEFINED> instruction: 0x00016cb4
   14454:	ldrdeq	r6, [r1], -r0
   14458:	strdeq	r6, [r1], -r0
   1445c:	andeq	r6, r1, r4, lsl sp
   14460:	andeq	r6, r1, ip, lsr sp
   14464:	andeq	r6, r1, r8, ror #26
   14468:	muleq	r1, r8, sp
   1446c:	andeq	r6, r1, ip, asr #27
   14470:	push	{r4, r5, lr}
   14474:	sub	sp, sp, #12
   14478:	ldr	r5, [sp, #24]
   1447c:	ldr	ip, [r5]
   14480:	cmp	ip, #0
   14484:	beq	144b4 <__assert_fail@plt+0x330c>
   14488:	mov	lr, r5
   1448c:	mov	ip, #0
   14490:	add	ip, ip, #1
   14494:	ldr	r4, [lr, #4]!
   14498:	cmp	r4, #0
   1449c:	bne	14490 <__assert_fail@plt+0x32e8>
   144a0:	str	ip, [sp, #4]
   144a4:	str	r5, [sp]
   144a8:	bl	14050 <__assert_fail@plt+0x2ea8>
   144ac:	add	sp, sp, #12
   144b0:	pop	{r4, r5, pc}
   144b4:	mov	ip, #0
   144b8:	b	144a0 <__assert_fail@plt+0x32f8>
   144bc:	push	{r4, r5, lr}
   144c0:	sub	sp, sp, #52	; 0x34
   144c4:	ldr	r4, [sp, #64]	; 0x40
   144c8:	sub	r4, r4, #4
   144cc:	add	r5, sp, #4
   144d0:	mov	ip, #0
   144d4:	ldr	lr, [r4, #4]!
   144d8:	str	lr, [r5, #4]!
   144dc:	cmp	lr, #0
   144e0:	beq	144f0 <__assert_fail@plt+0x3348>
   144e4:	add	ip, ip, #1
   144e8:	cmp	ip, #10
   144ec:	bne	144d4 <__assert_fail@plt+0x332c>
   144f0:	str	ip, [sp, #4]
   144f4:	add	ip, sp, #8
   144f8:	str	ip, [sp]
   144fc:	bl	14050 <__assert_fail@plt+0x2ea8>
   14500:	add	sp, sp, #52	; 0x34
   14504:	pop	{r4, r5, pc}
   14508:	push	{r3}		; (str r3, [sp, #-4]!)
   1450c:	push	{lr}		; (str lr, [sp, #-4]!)
   14510:	sub	sp, sp, #16
   14514:	add	r3, sp, #24
   14518:	str	r3, [sp, #12]
   1451c:	str	r3, [sp]
   14520:	ldr	r3, [sp, #20]
   14524:	bl	144bc <__assert_fail@plt+0x3314>
   14528:	add	sp, sp, #16
   1452c:	pop	{lr}		; (ldr lr, [sp], #4)
   14530:	add	sp, sp, #4
   14534:	bx	lr
   14538:	push	{r4, lr}
   1453c:	ldr	r3, [pc, #112]	; 145b4 <__assert_fail@plt+0x340c>
   14540:	ldr	r1, [r3]
   14544:	mov	r0, #10
   14548:	bl	10f68 <fputc_unlocked@plt>
   1454c:	mov	r2, #5
   14550:	ldr	r1, [pc, #96]	; 145b8 <__assert_fail@plt+0x3410>
   14554:	mov	r0, #0
   14558:	bl	10f74 <dcgettext@plt>
   1455c:	ldr	r2, [pc, #88]	; 145bc <__assert_fail@plt+0x3414>
   14560:	mov	r1, r0
   14564:	mov	r0, #1
   14568:	bl	110d0 <__printf_chk@plt>
   1456c:	mov	r2, #5
   14570:	ldr	r1, [pc, #72]	; 145c0 <__assert_fail@plt+0x3418>
   14574:	mov	r0, #0
   14578:	bl	10f74 <dcgettext@plt>
   1457c:	ldr	r3, [pc, #64]	; 145c4 <__assert_fail@plt+0x341c>
   14580:	ldr	r2, [pc, #64]	; 145c8 <__assert_fail@plt+0x3420>
   14584:	mov	r1, r0
   14588:	mov	r0, #1
   1458c:	bl	110d0 <__printf_chk@plt>
   14590:	mov	r2, #5
   14594:	ldr	r1, [pc, #48]	; 145cc <__assert_fail@plt+0x3424>
   14598:	mov	r0, #0
   1459c:	bl	10f74 <dcgettext@plt>
   145a0:	ldr	r2, [pc, #40]	; 145d0 <__assert_fail@plt+0x3428>
   145a4:	mov	r1, r0
   145a8:	mov	r0, #1
   145ac:	bl	110d0 <__printf_chk@plt>
   145b0:	pop	{r4, pc}
   145b4:	andeq	r8, r2, r4, ror r1
   145b8:	andeq	r6, r1, r8, lsl #28
   145bc:	andeq	r6, r1, ip, lsl lr
   145c0:	andeq	r6, r1, r4, lsr lr
   145c4:	andeq	r6, r1, r0, asr #14
   145c8:	andeq	r6, r1, r8, ror #14
   145cc:	andeq	r6, r1, r8, asr #28
   145d0:	andeq	r6, r1, r0, ror lr
   145d4:	push	{r4, lr}
   145d8:	bl	156d0 <__assert_fail@plt+0x4528>
   145dc:	cmp	r0, #0
   145e0:	popne	{r4, pc}
   145e4:	bl	14b78 <__assert_fail@plt+0x39d0>
   145e8:	push	{r4, lr}
   145ec:	bl	156d0 <__assert_fail@plt+0x4528>
   145f0:	cmp	r0, #0
   145f4:	popne	{r4, pc}
   145f8:	bl	14b78 <__assert_fail@plt+0x39d0>
   145fc:	push	{r4, lr}
   14600:	bl	145d4 <__assert_fail@plt+0x342c>
   14604:	pop	{r4, pc}
   14608:	push	{r4, r5, r6, lr}
   1460c:	mov	r5, r0
   14610:	mov	r4, r1
   14614:	bl	15700 <__assert_fail@plt+0x4558>
   14618:	cmp	r0, #0
   1461c:	popne	{r4, r5, r6, pc}
   14620:	adds	r4, r4, #0
   14624:	movne	r4, #1
   14628:	cmp	r5, #0
   1462c:	orreq	r4, r4, #1
   14630:	cmp	r4, #0
   14634:	popeq	{r4, r5, r6, pc}
   14638:	bl	14b78 <__assert_fail@plt+0x39d0>
   1463c:	push	{r4, lr}
   14640:	cmp	r1, #0
   14644:	orreq	r1, r1, #1
   14648:	bl	15700 <__assert_fail@plt+0x4558>
   1464c:	cmp	r0, #0
   14650:	popne	{r4, pc}
   14654:	bl	14b78 <__assert_fail@plt+0x39d0>
   14658:	push	{r4, r5, r6, lr}
   1465c:	mov	r6, r0
   14660:	mov	r5, r1
   14664:	mov	r4, r2
   14668:	bl	15c90 <__assert_fail@plt+0x4ae8>
   1466c:	cmp	r0, #0
   14670:	popne	{r4, r5, r6, pc}
   14674:	cmp	r6, #0
   14678:	beq	14688 <__assert_fail@plt+0x34e0>
   1467c:	cmp	r5, #0
   14680:	cmpne	r4, #0
   14684:	popeq	{r4, r5, r6, pc}
   14688:	bl	14b78 <__assert_fail@plt+0x39d0>
   1468c:	push	{r4, lr}
   14690:	bl	14658 <__assert_fail@plt+0x34b0>
   14694:	pop	{r4, pc}
   14698:	push	{r4, lr}
   1469c:	mov	ip, r1
   146a0:	mov	r3, r2
   146a4:	cmp	r2, #0
   146a8:	cmpne	r1, #0
   146ac:	moveq	r3, #1
   146b0:	moveq	ip, r3
   146b4:	mov	r2, r3
   146b8:	mov	r1, ip
   146bc:	bl	15c90 <__assert_fail@plt+0x4ae8>
   146c0:	cmp	r0, #0
   146c4:	popne	{r4, pc}
   146c8:	bl	14b78 <__assert_fail@plt+0x39d0>
   146cc:	push	{r4, lr}
   146d0:	mov	r2, r1
   146d4:	mov	r1, r0
   146d8:	mov	r0, #0
   146dc:	bl	14658 <__assert_fail@plt+0x34b0>
   146e0:	pop	{r4, pc}
   146e4:	push	{r4, lr}
   146e8:	mov	r2, r1
   146ec:	mov	r1, r0
   146f0:	mov	r0, #0
   146f4:	bl	14698 <__assert_fail@plt+0x34f0>
   146f8:	pop	{r4, pc}
   146fc:	push	{r4, r5, r6, r7, r8, lr}
   14700:	mov	r5, r1
   14704:	mov	r6, r2
   14708:	ldr	r4, [r1]
   1470c:	subs	r7, r0, #0
   14710:	beq	1472c <__assert_fail@plt+0x3584>
   14714:	lsr	r2, r4, #1
   14718:	add	r3, r2, #1
   1471c:	mvn	r3, r3
   14720:	cmp	r4, r3
   14724:	bls	14750 <__assert_fail@plt+0x35a8>
   14728:	bl	14b78 <__assert_fail@plt+0x39d0>
   1472c:	cmp	r4, #0
   14730:	bne	14758 <__assert_fail@plt+0x35b0>
   14734:	mov	r1, r2
   14738:	mov	r0, #64	; 0x40
   1473c:	bl	15de4 <__assert_fail@plt+0x4c3c>
   14740:	cmp	r0, #0
   14744:	movne	r4, r0
   14748:	addeq	r4, r0, #1
   1474c:	b	14758 <__assert_fail@plt+0x35b0>
   14750:	add	r4, r4, #1
   14754:	add	r4, r4, r2
   14758:	mov	r2, r6
   1475c:	mov	r1, r4
   14760:	mov	r0, r7
   14764:	bl	14658 <__assert_fail@plt+0x34b0>
   14768:	str	r4, [r5]
   1476c:	pop	{r4, r5, r6, r7, r8, pc}
   14770:	push	{r4, lr}
   14774:	mov	r2, #1
   14778:	bl	146fc <__assert_fail@plt+0x3554>
   1477c:	pop	{r4, pc}
   14780:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14784:	sub	sp, sp, #12
   14788:	mov	fp, r0
   1478c:	mov	sl, r1
   14790:	mov	r9, r2
   14794:	mov	r7, r3
   14798:	ldr	r6, [sp, #48]	; 0x30
   1479c:	ldr	r5, [r1]
   147a0:	asrs	r4, r5, #1
   147a4:	bmi	14900 <__assert_fail@plt+0x3758>
   147a8:	cmp	r5, #0
   147ac:	blt	14914 <__assert_fail@plt+0x376c>
   147b0:	mvn	r3, #-2147483648	; 0x80000000
   147b4:	sub	r3, r3, r4
   147b8:	cmp	r5, r3
   147bc:	movle	r3, #0
   147c0:	movgt	r3, #1
   147c4:	cmp	r3, #0
   147c8:	addeq	r4, r4, r5
   147cc:	mvnne	r4, #-2147483648	; 0x80000000
   147d0:	mvn	r8, r7
   147d4:	lsr	r8, r8, #31
   147d8:	cmp	r7, r4
   147dc:	movge	r3, #0
   147e0:	andlt	r3, r8, #1
   147e4:	cmp	r3, #0
   147e8:	movne	r4, r7
   147ec:	cmp	r6, #0
   147f0:	blt	14928 <__assert_fail@plt+0x3780>
   147f4:	cmp	r6, #0
   147f8:	beq	149d4 <__assert_fail@plt+0x382c>
   147fc:	cmp	r4, #0
   14800:	blt	14984 <__assert_fail@plt+0x37dc>
   14804:	mov	r1, r6
   14808:	mvn	r0, #-2147483648	; 0x80000000
   1480c:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14810:	cmp	r0, r4
   14814:	movge	r0, #0
   14818:	movlt	r0, #1
   1481c:	cmp	r0, #0
   14820:	mvnne	r3, #-2147483648	; 0x80000000
   14824:	strne	r3, [sp, #4]
   14828:	beq	149bc <__assert_fail@plt+0x3814>
   1482c:	mov	r1, r6
   14830:	ldr	r0, [sp, #4]
   14834:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14838:	mov	r4, r0
   1483c:	mov	r1, r6
   14840:	ldr	r0, [sp, #4]
   14844:	bl	16210 <__assert_fail@plt+0x5068>
   14848:	ldr	r3, [sp, #4]
   1484c:	sub	r1, r3, r1
   14850:	cmp	fp, #0
   14854:	moveq	r3, #0
   14858:	streq	r3, [sl]
   1485c:	sub	r3, r4, r5
   14860:	cmp	r3, r9
   14864:	bge	148ec <__assert_fail@plt+0x3744>
   14868:	cmp	r9, #0
   1486c:	blt	149e0 <__assert_fail@plt+0x3838>
   14870:	cmp	r5, #0
   14874:	blt	149f4 <__assert_fail@plt+0x384c>
   14878:	mvn	r3, #-2147483648	; 0x80000000
   1487c:	sub	r3, r3, r9
   14880:	cmp	r5, r3
   14884:	movle	r3, #0
   14888:	movgt	r3, #1
   1488c:	cmp	r3, #0
   14890:	bne	14a9c <__assert_fail@plt+0x38f4>
   14894:	add	r5, r5, r9
   14898:	mov	r4, r5
   1489c:	cmp	r7, r5
   148a0:	movge	r7, #0
   148a4:	andlt	r7, r8, #1
   148a8:	cmp	r7, #0
   148ac:	bne	14a9c <__assert_fail@plt+0x38f4>
   148b0:	cmp	r6, #0
   148b4:	blt	14a08 <__assert_fail@plt+0x3860>
   148b8:	cmp	r6, #0
   148bc:	beq	148e8 <__assert_fail@plt+0x3740>
   148c0:	cmp	r5, #0
   148c4:	blt	14a64 <__assert_fail@plt+0x38bc>
   148c8:	mov	r1, r6
   148cc:	mvn	r0, #-2147483648	; 0x80000000
   148d0:	bl	15ff0 <__assert_fail@plt+0x4e48>
   148d4:	cmp	r5, r0
   148d8:	movle	r0, #0
   148dc:	movgt	r0, #1
   148e0:	cmp	r0, #0
   148e4:	bne	14a9c <__assert_fail@plt+0x38f4>
   148e8:	mul	r1, r5, r6
   148ec:	mov	r0, fp
   148f0:	bl	14608 <__assert_fail@plt+0x3460>
   148f4:	str	r4, [sl]
   148f8:	add	sp, sp, #12
   148fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14900:	rsb	r3, r4, #-2147483648	; 0x80000000
   14904:	cmp	r5, r3
   14908:	movge	r3, #0
   1490c:	movlt	r3, #1
   14910:	b	147c4 <__assert_fail@plt+0x361c>
   14914:	rsb	r3, r5, #-2147483648	; 0x80000000
   14918:	cmp	r4, r3
   1491c:	movge	r3, #0
   14920:	movlt	r3, #1
   14924:	b	147c4 <__assert_fail@plt+0x361c>
   14928:	cmp	r4, #0
   1492c:	blt	14954 <__assert_fail@plt+0x37ac>
   14930:	cmn	r6, #1
   14934:	beq	14970 <__assert_fail@plt+0x37c8>
   14938:	mov	r1, r6
   1493c:	mov	r0, #-2147483648	; 0x80000000
   14940:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14944:	cmp	r0, r4
   14948:	movge	r0, #0
   1494c:	movlt	r0, #1
   14950:	b	1481c <__assert_fail@plt+0x3674>
   14954:	mov	r1, r6
   14958:	mvn	r0, #-2147483648	; 0x80000000
   1495c:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14960:	cmp	r0, r4
   14964:	movle	r0, #0
   14968:	movgt	r0, #1
   1496c:	b	1481c <__assert_fail@plt+0x3674>
   14970:	add	r0, r4, #-2147483648	; 0x80000000
   14974:	cmp	r0, #0
   14978:	movle	r0, #0
   1497c:	movgt	r0, #1
   14980:	b	1481c <__assert_fail@plt+0x3674>
   14984:	cmn	r4, #1
   14988:	beq	149a8 <__assert_fail@plt+0x3800>
   1498c:	mov	r1, r4
   14990:	mov	r0, #-2147483648	; 0x80000000
   14994:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14998:	cmp	r6, r0
   1499c:	movle	r0, #0
   149a0:	movgt	r0, #1
   149a4:	b	1481c <__assert_fail@plt+0x3674>
   149a8:	add	r0, r6, #-2147483648	; 0x80000000
   149ac:	cmp	r0, #0
   149b0:	movle	r0, #0
   149b4:	movgt	r0, #1
   149b8:	b	1481c <__assert_fail@plt+0x3674>
   149bc:	mul	r1, r6, r4
   149c0:	cmp	r1, #63	; 0x3f
   149c4:	movle	r3, #64	; 0x40
   149c8:	strle	r3, [sp, #4]
   149cc:	bgt	14850 <__assert_fail@plt+0x36a8>
   149d0:	b	1482c <__assert_fail@plt+0x3684>
   149d4:	mov	r3, #64	; 0x40
   149d8:	str	r3, [sp, #4]
   149dc:	b	1482c <__assert_fail@plt+0x3684>
   149e0:	rsb	r3, r9, #-2147483648	; 0x80000000
   149e4:	cmp	r5, r3
   149e8:	movge	r3, #0
   149ec:	movlt	r3, #1
   149f0:	b	1488c <__assert_fail@plt+0x36e4>
   149f4:	rsb	r3, r5, #-2147483648	; 0x80000000
   149f8:	cmp	r9, r3
   149fc:	movge	r3, #0
   14a00:	movlt	r3, #1
   14a04:	b	1488c <__assert_fail@plt+0x36e4>
   14a08:	cmp	r5, #0
   14a0c:	blt	14a34 <__assert_fail@plt+0x388c>
   14a10:	cmn	r6, #1
   14a14:	beq	14a50 <__assert_fail@plt+0x38a8>
   14a18:	mov	r1, r6
   14a1c:	mov	r0, #-2147483648	; 0x80000000
   14a20:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14a24:	cmp	r5, r0
   14a28:	movle	r0, #0
   14a2c:	movgt	r0, #1
   14a30:	b	148e0 <__assert_fail@plt+0x3738>
   14a34:	mov	r1, r6
   14a38:	mvn	r0, #-2147483648	; 0x80000000
   14a3c:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14a40:	cmp	r5, r0
   14a44:	movge	r0, #0
   14a48:	movlt	r0, #1
   14a4c:	b	148e0 <__assert_fail@plt+0x3738>
   14a50:	add	r0, r5, #-2147483648	; 0x80000000
   14a54:	cmp	r0, #0
   14a58:	movle	r0, #0
   14a5c:	movgt	r0, #1
   14a60:	b	148e0 <__assert_fail@plt+0x3738>
   14a64:	cmn	r5, #1
   14a68:	beq	14a88 <__assert_fail@plt+0x38e0>
   14a6c:	mov	r1, r5
   14a70:	mov	r0, #-2147483648	; 0x80000000
   14a74:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14a78:	cmp	r6, r0
   14a7c:	movle	r0, #0
   14a80:	movgt	r0, #1
   14a84:	b	148e0 <__assert_fail@plt+0x3738>
   14a88:	add	r0, r6, #-2147483648	; 0x80000000
   14a8c:	cmp	r0, #0
   14a90:	movle	r0, #0
   14a94:	movgt	r0, #1
   14a98:	b	148e0 <__assert_fail@plt+0x3738>
   14a9c:	bl	14b78 <__assert_fail@plt+0x39d0>
   14aa0:	push	{r4, lr}
   14aa4:	bl	15680 <__assert_fail@plt+0x44d8>
   14aa8:	cmp	r0, #0
   14aac:	popne	{r4, pc}
   14ab0:	bl	14b78 <__assert_fail@plt+0x39d0>
   14ab4:	push	{r4, lr}
   14ab8:	mov	r1, #1
   14abc:	bl	14aa0 <__assert_fail@plt+0x38f8>
   14ac0:	pop	{r4, pc}
   14ac4:	push	{r4, lr}
   14ac8:	bl	15680 <__assert_fail@plt+0x44d8>
   14acc:	cmp	r0, #0
   14ad0:	popne	{r4, pc}
   14ad4:	bl	14b78 <__assert_fail@plt+0x39d0>
   14ad8:	push	{r4, lr}
   14adc:	mov	r1, #1
   14ae0:	bl	14ac4 <__assert_fail@plt+0x391c>
   14ae4:	pop	{r4, pc}
   14ae8:	push	{r4, r5, r6, lr}
   14aec:	mov	r5, r0
   14af0:	mov	r4, r1
   14af4:	mov	r0, r1
   14af8:	bl	145d4 <__assert_fail@plt+0x342c>
   14afc:	mov	r2, r4
   14b00:	mov	r1, r5
   14b04:	bl	10f2c <memcpy@plt>
   14b08:	pop	{r4, r5, r6, pc}
   14b0c:	push	{r4, r5, r6, lr}
   14b10:	mov	r5, r0
   14b14:	mov	r4, r1
   14b18:	mov	r0, r1
   14b1c:	bl	145e8 <__assert_fail@plt+0x3440>
   14b20:	mov	r2, r4
   14b24:	mov	r1, r5
   14b28:	bl	10f2c <memcpy@plt>
   14b2c:	pop	{r4, r5, r6, pc}
   14b30:	push	{r4, r5, r6, lr}
   14b34:	mov	r5, r0
   14b38:	mov	r4, r1
   14b3c:	add	r0, r1, #1
   14b40:	bl	145e8 <__assert_fail@plt+0x3440>
   14b44:	mov	r2, #0
   14b48:	strb	r2, [r0, r4]
   14b4c:	mov	r2, r4
   14b50:	mov	r1, r5
   14b54:	bl	10f2c <memcpy@plt>
   14b58:	pop	{r4, r5, r6, pc}
   14b5c:	push	{r4, lr}
   14b60:	mov	r4, r0
   14b64:	bl	11088 <strlen@plt>
   14b68:	add	r1, r0, #1
   14b6c:	mov	r0, r4
   14b70:	bl	14ae8 <__assert_fail@plt+0x3940>
   14b74:	pop	{r4, pc}
   14b78:	push	{r4, lr}
   14b7c:	ldr	r3, [pc, #40]	; 14bac <__assert_fail@plt+0x3a04>
   14b80:	ldr	r4, [r3]
   14b84:	mov	r2, #5
   14b88:	ldr	r1, [pc, #32]	; 14bb0 <__assert_fail@plt+0x3a08>
   14b8c:	mov	r0, #0
   14b90:	bl	10f74 <dcgettext@plt>
   14b94:	mov	r3, r0
   14b98:	ldr	r2, [pc, #20]	; 14bb4 <__assert_fail@plt+0x3a0c>
   14b9c:	mov	r1, #0
   14ba0:	mov	r0, r4
   14ba4:	bl	11004 <error@plt>
   14ba8:	bl	11184 <abort@plt>
   14bac:	andeq	r8, r2, ip, lsl r1
   14bb0:	andeq	r6, r1, r0, asr #29
   14bb4:	andeq	r6, r1, r8, asr sl
   14bb8:	push	{r4, lr}
   14bbc:	bl	15aa8 <__assert_fail@plt+0x4900>
   14bc0:	mov	r4, r0
   14bc4:	cmn	r0, #1
   14bc8:	beq	14bd4 <__assert_fail@plt+0x3a2c>
   14bcc:	mov	r0, r4
   14bd0:	pop	{r4, pc}
   14bd4:	bl	110a0 <__errno_location@plt>
   14bd8:	ldr	r3, [r0]
   14bdc:	cmp	r3, #12
   14be0:	bne	14bcc <__assert_fail@plt+0x3a24>
   14be4:	bl	14b78 <__assert_fail@plt+0x39d0>
   14be8:	push	{r4, r5, r6, lr}
   14bec:	mov	r5, r0
   14bf0:	subs	r4, r1, #0
   14bf4:	blt	14c44 <__assert_fail@plt+0x3a9c>
   14bf8:	cmp	r4, #0
   14bfc:	moveq	r0, #0
   14c00:	beq	14c20 <__assert_fail@plt+0x3a78>
   14c04:	mov	r1, r4
   14c08:	mvn	r0, #0
   14c0c:	bl	15de4 <__assert_fail@plt+0x4c3c>
   14c10:	ldr	r3, [r5]
   14c14:	cmp	r0, r3
   14c18:	movcs	r0, #0
   14c1c:	movcc	r0, #1
   14c20:	cmp	r0, #0
   14c24:	mvnne	r3, #0
   14c28:	strne	r3, [r5]
   14c2c:	movne	r0, #1
   14c30:	ldreq	r3, [r5]
   14c34:	muleq	r4, r4, r3
   14c38:	streq	r4, [r5]
   14c3c:	moveq	r0, #0
   14c40:	pop	{r4, r5, r6, pc}
   14c44:	mov	r1, r4
   14c48:	mov	r0, #0
   14c4c:	bl	15ff0 <__assert_fail@plt+0x4e48>
   14c50:	ldr	r3, [r5]
   14c54:	cmp	r0, r3
   14c58:	movcs	r0, #0
   14c5c:	movcc	r0, #1
   14c60:	b	14c20 <__assert_fail@plt+0x3a78>
   14c64:	push	{r4, r5, r6, r7, r8, lr}
   14c68:	subs	r4, r2, #0
   14c6c:	beq	14c9c <__assert_fail@plt+0x3af4>
   14c70:	mov	r7, r1
   14c74:	mov	r6, r0
   14c78:	mov	r5, #0
   14c7c:	mov	r1, r7
   14c80:	mov	r0, r6
   14c84:	bl	14be8 <__assert_fail@plt+0x3a40>
   14c88:	orr	r5, r5, r0
   14c8c:	subs	r4, r4, #1
   14c90:	bne	14c7c <__assert_fail@plt+0x3ad4>
   14c94:	mov	r0, r5
   14c98:	pop	{r4, r5, r6, r7, r8, pc}
   14c9c:	mov	r5, #0
   14ca0:	b	14c94 <__assert_fail@plt+0x3aec>
   14ca4:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ca8:	sub	sp, sp, #12
   14cac:	cmp	r2, #36	; 0x24
   14cb0:	bhi	14cf0 <__assert_fail@plt+0x3b48>
   14cb4:	mov	r5, r0
   14cb8:	mov	r6, r1
   14cbc:	mov	r7, r2
   14cc0:	mov	r9, r3
   14cc4:	cmp	r1, #0
   14cc8:	addeq	r6, sp, #4
   14ccc:	bl	110a0 <__errno_location@plt>
   14cd0:	mov	r8, r0
   14cd4:	mov	r3, #0
   14cd8:	str	r3, [r0]
   14cdc:	ldrb	r4, [r5]
   14ce0:	bl	11064 <__ctype_b_loc@plt>
   14ce4:	ldr	r1, [r0]
   14ce8:	mov	r2, r5
   14cec:	b	14d08 <__assert_fail@plt+0x3b60>
   14cf0:	ldr	r3, [pc, #1044]	; 1510c <__assert_fail@plt+0x3f64>
   14cf4:	mov	r2, #85	; 0x55
   14cf8:	ldr	r1, [pc, #1040]	; 15110 <__assert_fail@plt+0x3f68>
   14cfc:	ldr	r0, [pc, #1040]	; 15114 <__assert_fail@plt+0x3f6c>
   14d00:	bl	111a8 <__assert_fail@plt>
   14d04:	ldrb	r4, [r2, #1]!
   14d08:	lsl	r3, r4, #1
   14d0c:	ldrh	r3, [r1, r3]
   14d10:	tst	r3, #8192	; 0x2000
   14d14:	bne	14d04 <__assert_fail@plt+0x3b5c>
   14d18:	cmp	r4, #45	; 0x2d
   14d1c:	moveq	r4, #4
   14d20:	bne	14d30 <__assert_fail@plt+0x3b88>
   14d24:	mov	r0, r4
   14d28:	add	sp, sp, #12
   14d2c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14d30:	mov	r2, r7
   14d34:	mov	r1, r6
   14d38:	mov	r0, r5
   14d3c:	bl	1107c <strtoul@plt>
   14d40:	str	r0, [sp]
   14d44:	ldr	r7, [r6]
   14d48:	cmp	r5, r7
   14d4c:	beq	14d70 <__assert_fail@plt+0x3bc8>
   14d50:	ldr	r3, [r8]
   14d54:	cmp	r3, #0
   14d58:	beq	14db4 <__assert_fail@plt+0x3c0c>
   14d5c:	cmp	r3, #34	; 0x22
   14d60:	moveq	r4, #1
   14d64:	beq	14db8 <__assert_fail@plt+0x3c10>
   14d68:	mov	r4, #4
   14d6c:	b	14d24 <__assert_fail@plt+0x3b7c>
   14d70:	ldr	r3, [sp, #40]	; 0x28
   14d74:	cmp	r3, #0
   14d78:	moveq	r4, #4
   14d7c:	beq	14d24 <__assert_fail@plt+0x3b7c>
   14d80:	ldrb	r1, [r7]
   14d84:	cmp	r1, #0
   14d88:	moveq	r4, #4
   14d8c:	beq	14d24 <__assert_fail@plt+0x3b7c>
   14d90:	mov	r0, r3
   14d94:	bl	11094 <strchr@plt>
   14d98:	cmp	r0, #0
   14d9c:	moveq	r4, #4
   14da0:	beq	14d24 <__assert_fail@plt+0x3b7c>
   14da4:	mov	r3, #1
   14da8:	str	r3, [sp]
   14dac:	mov	r4, #0
   14db0:	b	14dc8 <__assert_fail@plt+0x3c20>
   14db4:	mov	r4, #0
   14db8:	ldr	r3, [sp, #40]	; 0x28
   14dbc:	cmp	r3, #0
   14dc0:	streq	r0, [r9]
   14dc4:	beq	14d24 <__assert_fail@plt+0x3b7c>
   14dc8:	ldrb	r5, [r7]
   14dcc:	cmp	r5, #0
   14dd0:	beq	15048 <__assert_fail@plt+0x3ea0>
   14dd4:	mov	r1, r5
   14dd8:	ldr	r0, [sp, #40]	; 0x28
   14ddc:	bl	11094 <strchr@plt>
   14de0:	cmp	r0, #0
   14de4:	beq	14eb8 <__assert_fail@plt+0x3d10>
   14de8:	sub	r3, r5, #69	; 0x45
   14dec:	cmp	r3, #47	; 0x2f
   14df0:	ldrls	pc, [pc, r3, lsl #2]
   14df4:	b	14f24 <__assert_fail@plt+0x3d7c>
   14df8:	andeq	r4, r1, r8, asr #29
   14dfc:	andeq	r4, r1, r4, lsr #30
   14e00:	andeq	r4, r1, r8, asr #29
   14e04:	andeq	r4, r1, r4, lsr #30
   14e08:	andeq	r4, r1, r4, lsr #30
   14e0c:	andeq	r4, r1, r4, lsr #30
   14e10:	andeq	r4, r1, r8, asr #29
   14e14:	andeq	r4, r1, r4, lsr #30
   14e18:	andeq	r4, r1, r8, asr #29
   14e1c:	andeq	r4, r1, r4, lsr #30
   14e20:	andeq	r4, r1, r4, lsr #30
   14e24:	andeq	r4, r1, r8, asr #29
   14e28:	andeq	r4, r1, r4, lsr #30
   14e2c:	andeq	r4, r1, r4, lsr #30
   14e30:	andeq	r4, r1, r4, lsr #30
   14e34:	andeq	r4, r1, r8, asr #29
   14e38:	andeq	r4, r1, r4, lsr #30
   14e3c:	andeq	r4, r1, r4, lsr #30
   14e40:	andeq	r4, r1, r4, lsr #30
   14e44:	andeq	r4, r1, r4, lsr #30
   14e48:	andeq	r4, r1, r8, asr #29
   14e4c:	andeq	r4, r1, r8, asr #29
   14e50:	andeq	r4, r1, r4, lsr #30
   14e54:	andeq	r4, r1, r4, lsr #30
   14e58:	andeq	r4, r1, r4, lsr #30
   14e5c:	andeq	r4, r1, r4, lsr #30
   14e60:	andeq	r4, r1, r4, lsr #30
   14e64:	andeq	r4, r1, r4, lsr #30
   14e68:	andeq	r4, r1, r4, lsr #30
   14e6c:	andeq	r4, r1, r4, lsr #30
   14e70:	andeq	r4, r1, r4, lsr #30
   14e74:	andeq	r4, r1, r4, lsr #30
   14e78:	andeq	r4, r1, r4, lsr #30
   14e7c:	andeq	r4, r1, r4, lsr #30
   14e80:	andeq	r4, r1, r8, asr #29
   14e84:	andeq	r4, r1, r4, lsr #30
   14e88:	andeq	r4, r1, r4, lsr #30
   14e8c:	andeq	r4, r1, r4, lsr #30
   14e90:	andeq	r4, r1, r8, asr #29
   14e94:	andeq	r4, r1, r4, lsr #30
   14e98:	andeq	r4, r1, r8, asr #29
   14e9c:	andeq	r4, r1, r4, lsr #30
   14ea0:	andeq	r4, r1, r4, lsr #30
   14ea4:	andeq	r4, r1, r4, lsr #30
   14ea8:	andeq	r4, r1, r4, lsr #30
   14eac:	andeq	r4, r1, r4, lsr #30
   14eb0:	andeq	r4, r1, r4, lsr #30
   14eb4:	andeq	r4, r1, r8, asr #29
   14eb8:	ldr	r3, [sp]
   14ebc:	str	r3, [r9]
   14ec0:	orr	r4, r4, #2
   14ec4:	b	14d24 <__assert_fail@plt+0x3b7c>
   14ec8:	mov	r1, #48	; 0x30
   14ecc:	ldr	r0, [sp, #40]	; 0x28
   14ed0:	bl	11094 <strchr@plt>
   14ed4:	cmp	r0, #0
   14ed8:	beq	15014 <__assert_fail@plt+0x3e6c>
   14edc:	ldrb	r3, [r7, #1]
   14ee0:	cmp	r3, #68	; 0x44
   14ee4:	beq	14f00 <__assert_fail@plt+0x3d58>
   14ee8:	cmp	r3, #105	; 0x69
   14eec:	beq	14f0c <__assert_fail@plt+0x3d64>
   14ef0:	cmp	r3, #66	; 0x42
   14ef4:	movne	r7, #1
   14ef8:	movne	r1, #1024	; 0x400
   14efc:	bne	14f2c <__assert_fail@plt+0x3d84>
   14f00:	mov	r7, #2
   14f04:	mov	r1, #1000	; 0x3e8
   14f08:	b	14f2c <__assert_fail@plt+0x3d84>
   14f0c:	ldrb	r7, [r7, #2]
   14f10:	cmp	r7, #66	; 0x42
   14f14:	movne	r7, #1
   14f18:	moveq	r7, #3
   14f1c:	mov	r1, #1024	; 0x400
   14f20:	b	14f2c <__assert_fail@plt+0x3d84>
   14f24:	mov	r7, #1
   14f28:	mov	r1, #1024	; 0x400
   14f2c:	sub	r5, r5, #66	; 0x42
   14f30:	cmp	r5, #53	; 0x35
   14f34:	ldrls	pc, [pc, r5, lsl #2]
   14f38:	b	150f4 <__assert_fail@plt+0x3f4c>
   14f3c:	andeq	r5, r1, r4, asr r0
   14f40:	strdeq	r5, [r1], -r4
   14f44:	strdeq	r5, [r1], -r4
   14f48:	andeq	r5, r1, r4, rrx
   14f4c:	strdeq	r5, [r1], -r4
   14f50:	andeq	r5, r1, r4, ror r0
   14f54:	strdeq	r5, [r1], -r4
   14f58:	strdeq	r5, [r1], -r4
   14f5c:	strdeq	r5, [r1], -r4
   14f60:	andeq	r5, r1, r4, lsl #1
   14f64:	strdeq	r5, [r1], -r4
   14f68:	muleq	r1, r4, r0
   14f6c:	strdeq	r5, [r1], -r4
   14f70:	strdeq	r5, [r1], -r4
   14f74:	andeq	r5, r1, r4, lsr #1
   14f78:	strdeq	r5, [r1], -r4
   14f7c:	strdeq	r5, [r1], -r4
   14f80:	strdeq	r5, [r1], -r4
   14f84:	strheq	r5, [r1], -r4
   14f88:	strdeq	r5, [r1], -r4
   14f8c:	strdeq	r5, [r1], -r4
   14f90:	strdeq	r5, [r1], -r4
   14f94:	strdeq	r5, [r1], -r4
   14f98:	ldrdeq	r5, [r1], -r4
   14f9c:	andeq	r5, r1, r4, ror #1
   14fa0:	strdeq	r5, [r1], -r4
   14fa4:	strdeq	r5, [r1], -r4
   14fa8:	strdeq	r5, [r1], -r4
   14fac:	strdeq	r5, [r1], -r4
   14fb0:	strdeq	r5, [r1], -r4
   14fb4:	strdeq	r5, [r1], -r4
   14fb8:	strdeq	r5, [r1], -r4
   14fbc:	andeq	r5, r1, r0, lsr #32
   14fc0:	andeq	r5, r1, r4, lsl #2
   14fc4:	strdeq	r5, [r1], -r4
   14fc8:	strdeq	r5, [r1], -r4
   14fcc:	strdeq	r5, [r1], -r4
   14fd0:	andeq	r5, r1, r4, ror r0
   14fd4:	strdeq	r5, [r1], -r4
   14fd8:	strdeq	r5, [r1], -r4
   14fdc:	strdeq	r5, [r1], -r4
   14fe0:	andeq	r5, r1, r4, lsl #1
   14fe4:	strdeq	r5, [r1], -r4
   14fe8:	muleq	r1, r4, r0
   14fec:	strdeq	r5, [r1], -r4
   14ff0:	strdeq	r5, [r1], -r4
   14ff4:	strdeq	r5, [r1], -r4
   14ff8:	strdeq	r5, [r1], -r4
   14ffc:	strdeq	r5, [r1], -r4
   15000:	strdeq	r5, [r1], -r4
   15004:	strheq	r5, [r1], -r4
   15008:	strdeq	r5, [r1], -r4
   1500c:	strdeq	r5, [r1], -r4
   15010:	andeq	r5, r1, r4, asr #1
   15014:	mov	r7, #1
   15018:	mov	r1, #1024	; 0x400
   1501c:	b	14f2c <__assert_fail@plt+0x3d84>
   15020:	mov	r1, #512	; 0x200
   15024:	mov	r0, sp
   15028:	bl	14be8 <__assert_fail@plt+0x3a40>
   1502c:	orr	r4, r4, r0
   15030:	ldr	r3, [r6]
   15034:	add	r2, r3, r7
   15038:	str	r2, [r6]
   1503c:	ldrb	r3, [r3, r7]
   15040:	cmp	r3, #0
   15044:	orrne	r4, r4, #2
   15048:	ldr	r3, [sp]
   1504c:	str	r3, [r9]
   15050:	b	14d24 <__assert_fail@plt+0x3b7c>
   15054:	mov	r1, #1024	; 0x400
   15058:	mov	r0, sp
   1505c:	bl	14be8 <__assert_fail@plt+0x3a40>
   15060:	b	1502c <__assert_fail@plt+0x3e84>
   15064:	mov	r2, #6
   15068:	mov	r0, sp
   1506c:	bl	14c64 <__assert_fail@plt+0x3abc>
   15070:	b	1502c <__assert_fail@plt+0x3e84>
   15074:	mov	r2, #3
   15078:	mov	r0, sp
   1507c:	bl	14c64 <__assert_fail@plt+0x3abc>
   15080:	b	1502c <__assert_fail@plt+0x3e84>
   15084:	mov	r2, #1
   15088:	mov	r0, sp
   1508c:	bl	14c64 <__assert_fail@plt+0x3abc>
   15090:	b	1502c <__assert_fail@plt+0x3e84>
   15094:	mov	r2, #2
   15098:	mov	r0, sp
   1509c:	bl	14c64 <__assert_fail@plt+0x3abc>
   150a0:	b	1502c <__assert_fail@plt+0x3e84>
   150a4:	mov	r2, #5
   150a8:	mov	r0, sp
   150ac:	bl	14c64 <__assert_fail@plt+0x3abc>
   150b0:	b	1502c <__assert_fail@plt+0x3e84>
   150b4:	mov	r2, #4
   150b8:	mov	r0, sp
   150bc:	bl	14c64 <__assert_fail@plt+0x3abc>
   150c0:	b	1502c <__assert_fail@plt+0x3e84>
   150c4:	mov	r1, #2
   150c8:	mov	r0, sp
   150cc:	bl	14be8 <__assert_fail@plt+0x3a40>
   150d0:	b	1502c <__assert_fail@plt+0x3e84>
   150d4:	mov	r2, #8
   150d8:	mov	r0, sp
   150dc:	bl	14c64 <__assert_fail@plt+0x3abc>
   150e0:	b	1502c <__assert_fail@plt+0x3e84>
   150e4:	mov	r2, #7
   150e8:	mov	r0, sp
   150ec:	bl	14c64 <__assert_fail@plt+0x3abc>
   150f0:	b	1502c <__assert_fail@plt+0x3e84>
   150f4:	ldr	r3, [sp]
   150f8:	str	r3, [r9]
   150fc:	orr	r4, r4, #2
   15100:	b	14d24 <__assert_fail@plt+0x3b7c>
   15104:	mov	r0, #0
   15108:	b	1502c <__assert_fail@plt+0x3e84>
   1510c:	ldrdeq	r6, [r1], -r4
   15110:	andeq	r6, r1, r0, ror #29
   15114:	strdeq	r6, [r1], -r0
   15118:	push	{r4, r5, r6, lr}
   1511c:	mov	r5, r0
   15120:	subs	r4, r1, #0
   15124:	blt	15178 <__assert_fail@plt+0x3fd0>
   15128:	cmp	r4, #0
   1512c:	moveq	r3, #0
   15130:	beq	1515c <__assert_fail@plt+0x3fb4>
   15134:	mov	r2, r4
   15138:	asr	r3, r4, #31
   1513c:	mvn	r0, #0
   15140:	mvn	r1, #0
   15144:	bl	16230 <__assert_fail@plt+0x5088>
   15148:	ldrd	r2, [r5]
   1514c:	cmp	r1, r3
   15150:	cmpeq	r0, r2
   15154:	movcc	r3, #1
   15158:	movcs	r3, #0
   1515c:	cmp	r3, #0
   15160:	beq	15198 <__assert_fail@plt+0x3ff0>
   15164:	mvn	r2, #0
   15168:	mvn	r3, #0
   1516c:	strd	r2, [r5]
   15170:	mov	r0, #1
   15174:	pop	{r4, r5, r6, pc}
   15178:	mov	r1, r4
   1517c:	mov	r0, #0
   15180:	bl	15ff0 <__assert_fail@plt+0x4e48>
   15184:	ldrd	r2, [r5]
   15188:	orrs	r3, r2, r3
   1518c:	movne	r3, #1
   15190:	moveq	r3, #0
   15194:	b	1515c <__assert_fail@plt+0x3fb4>
   15198:	asr	r3, r4, #31
   1519c:	ldr	r1, [r5, #4]
   151a0:	ldr	r2, [r5]
   151a4:	mul	r3, r3, r2
   151a8:	mla	r1, r4, r1, r3
   151ac:	umull	r2, r3, r2, r4
   151b0:	add	r3, r1, r3
   151b4:	strd	r2, [r5]
   151b8:	mov	r0, #0
   151bc:	pop	{r4, r5, r6, pc}
   151c0:	push	{r4, r5, r6, r7, r8, lr}
   151c4:	subs	r4, r2, #0
   151c8:	beq	151f8 <__assert_fail@plt+0x4050>
   151cc:	mov	r7, r1
   151d0:	mov	r6, r0
   151d4:	mov	r5, #0
   151d8:	mov	r1, r7
   151dc:	mov	r0, r6
   151e0:	bl	15118 <__assert_fail@plt+0x3f70>
   151e4:	orr	r5, r5, r0
   151e8:	subs	r4, r4, #1
   151ec:	bne	151d8 <__assert_fail@plt+0x4030>
   151f0:	mov	r0, r5
   151f4:	pop	{r4, r5, r6, r7, r8, pc}
   151f8:	mov	r5, #0
   151fc:	b	151f0 <__assert_fail@plt+0x4048>
   15200:	push	{r4, r5, r6, r7, r8, r9, lr}
   15204:	sub	sp, sp, #20
   15208:	cmp	r2, #36	; 0x24
   1520c:	bhi	1524c <__assert_fail@plt+0x40a4>
   15210:	mov	r5, r0
   15214:	mov	r6, r1
   15218:	mov	r7, r2
   1521c:	mov	r9, r3
   15220:	cmp	r1, #0
   15224:	addeq	r6, sp, #12
   15228:	bl	110a0 <__errno_location@plt>
   1522c:	mov	r8, r0
   15230:	mov	r3, #0
   15234:	str	r3, [r0]
   15238:	ldrb	r4, [r5]
   1523c:	bl	11064 <__ctype_b_loc@plt>
   15240:	ldr	r1, [r0]
   15244:	mov	r2, r5
   15248:	b	15264 <__assert_fail@plt+0x40bc>
   1524c:	ldr	r3, [pc, #1056]	; 15674 <__assert_fail@plt+0x44cc>
   15250:	mov	r2, #85	; 0x55
   15254:	ldr	r1, [pc, #1052]	; 15678 <__assert_fail@plt+0x44d0>
   15258:	ldr	r0, [pc, #1052]	; 1567c <__assert_fail@plt+0x44d4>
   1525c:	bl	111a8 <__assert_fail@plt>
   15260:	ldrb	r4, [r2, #1]!
   15264:	lsl	r3, r4, #1
   15268:	ldrh	r3, [r1, r3]
   1526c:	tst	r3, #8192	; 0x2000
   15270:	bne	15260 <__assert_fail@plt+0x40b8>
   15274:	cmp	r4, #45	; 0x2d
   15278:	moveq	r4, #4
   1527c:	bne	1528c <__assert_fail@plt+0x40e4>
   15280:	mov	r0, r4
   15284:	add	sp, sp, #20
   15288:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1528c:	mov	r3, #0
   15290:	mov	r2, r7
   15294:	mov	r1, r6
   15298:	mov	r0, r5
   1529c:	bl	10f44 <__strtoull_internal@plt>
   152a0:	strd	r0, [sp]
   152a4:	ldr	r7, [r6]
   152a8:	cmp	r5, r7
   152ac:	beq	152d0 <__assert_fail@plt+0x4128>
   152b0:	ldr	r3, [r8]
   152b4:	cmp	r3, #0
   152b8:	beq	15318 <__assert_fail@plt+0x4170>
   152bc:	cmp	r3, #34	; 0x22
   152c0:	moveq	r4, #1
   152c4:	beq	1531c <__assert_fail@plt+0x4174>
   152c8:	mov	r4, #4
   152cc:	b	15280 <__assert_fail@plt+0x40d8>
   152d0:	ldr	r3, [sp, #48]	; 0x30
   152d4:	cmp	r3, #0
   152d8:	moveq	r4, #4
   152dc:	beq	15280 <__assert_fail@plt+0x40d8>
   152e0:	ldrb	r1, [r7]
   152e4:	cmp	r1, #0
   152e8:	moveq	r4, #4
   152ec:	beq	15280 <__assert_fail@plt+0x40d8>
   152f0:	mov	r0, r3
   152f4:	bl	11094 <strchr@plt>
   152f8:	cmp	r0, #0
   152fc:	moveq	r4, #4
   15300:	beq	15280 <__assert_fail@plt+0x40d8>
   15304:	mov	r2, #1
   15308:	mov	r3, #0
   1530c:	strd	r2, [sp]
   15310:	mov	r4, #0
   15314:	b	15328 <__assert_fail@plt+0x4180>
   15318:	mov	r4, #0
   1531c:	ldr	r3, [sp, #48]	; 0x30
   15320:	cmp	r3, #0
   15324:	beq	15418 <__assert_fail@plt+0x4270>
   15328:	ldrb	r5, [r7]
   1532c:	cmp	r5, #0
   15330:	beq	155b0 <__assert_fail@plt+0x4408>
   15334:	mov	r1, r5
   15338:	ldr	r0, [sp, #48]	; 0x30
   1533c:	bl	11094 <strchr@plt>
   15340:	cmp	r0, #0
   15344:	beq	15420 <__assert_fail@plt+0x4278>
   15348:	sub	r3, r5, #69	; 0x45
   1534c:	cmp	r3, #47	; 0x2f
   15350:	ldrls	pc, [pc, r3, lsl #2]
   15354:	b	1548c <__assert_fail@plt+0x42e4>
   15358:	andeq	r5, r1, r0, lsr r4
   1535c:	andeq	r5, r1, ip, lsl #9
   15360:	andeq	r5, r1, r0, lsr r4
   15364:	andeq	r5, r1, ip, lsl #9
   15368:	andeq	r5, r1, ip, lsl #9
   1536c:	andeq	r5, r1, ip, lsl #9
   15370:	andeq	r5, r1, r0, lsr r4
   15374:	andeq	r5, r1, ip, lsl #9
   15378:	andeq	r5, r1, r0, lsr r4
   1537c:	andeq	r5, r1, ip, lsl #9
   15380:	andeq	r5, r1, ip, lsl #9
   15384:	andeq	r5, r1, r0, lsr r4
   15388:	andeq	r5, r1, ip, lsl #9
   1538c:	andeq	r5, r1, ip, lsl #9
   15390:	andeq	r5, r1, ip, lsl #9
   15394:	andeq	r5, r1, r0, lsr r4
   15398:	andeq	r5, r1, ip, lsl #9
   1539c:	andeq	r5, r1, ip, lsl #9
   153a0:	andeq	r5, r1, ip, lsl #9
   153a4:	andeq	r5, r1, ip, lsl #9
   153a8:	andeq	r5, r1, r0, lsr r4
   153ac:	andeq	r5, r1, r0, lsr r4
   153b0:	andeq	r5, r1, ip, lsl #9
   153b4:	andeq	r5, r1, ip, lsl #9
   153b8:	andeq	r5, r1, ip, lsl #9
   153bc:	andeq	r5, r1, ip, lsl #9
   153c0:	andeq	r5, r1, ip, lsl #9
   153c4:	andeq	r5, r1, ip, lsl #9
   153c8:	andeq	r5, r1, ip, lsl #9
   153cc:	andeq	r5, r1, ip, lsl #9
   153d0:	andeq	r5, r1, ip, lsl #9
   153d4:	andeq	r5, r1, ip, lsl #9
   153d8:	andeq	r5, r1, ip, lsl #9
   153dc:	andeq	r5, r1, ip, lsl #9
   153e0:	andeq	r5, r1, r0, lsr r4
   153e4:	andeq	r5, r1, ip, lsl #9
   153e8:	andeq	r5, r1, ip, lsl #9
   153ec:	andeq	r5, r1, ip, lsl #9
   153f0:	andeq	r5, r1, r0, lsr r4
   153f4:	andeq	r5, r1, ip, lsl #9
   153f8:	andeq	r5, r1, r0, lsr r4
   153fc:	andeq	r5, r1, ip, lsl #9
   15400:	andeq	r5, r1, ip, lsl #9
   15404:	andeq	r5, r1, ip, lsl #9
   15408:	andeq	r5, r1, ip, lsl #9
   1540c:	andeq	r5, r1, ip, lsl #9
   15410:	andeq	r5, r1, ip, lsl #9
   15414:	andeq	r5, r1, r0, lsr r4
   15418:	strd	r0, [r9]
   1541c:	b	15280 <__assert_fail@plt+0x40d8>
   15420:	ldrd	r2, [sp]
   15424:	strd	r2, [r9]
   15428:	orr	r4, r4, #2
   1542c:	b	15280 <__assert_fail@plt+0x40d8>
   15430:	mov	r1, #48	; 0x30
   15434:	ldr	r0, [sp, #48]	; 0x30
   15438:	bl	11094 <strchr@plt>
   1543c:	cmp	r0, #0
   15440:	beq	1557c <__assert_fail@plt+0x43d4>
   15444:	ldrb	r3, [r7, #1]
   15448:	cmp	r3, #68	; 0x44
   1544c:	beq	15468 <__assert_fail@plt+0x42c0>
   15450:	cmp	r3, #105	; 0x69
   15454:	beq	15474 <__assert_fail@plt+0x42cc>
   15458:	cmp	r3, #66	; 0x42
   1545c:	movne	r7, #1
   15460:	movne	r1, #1024	; 0x400
   15464:	bne	15494 <__assert_fail@plt+0x42ec>
   15468:	mov	r7, #2
   1546c:	mov	r1, #1000	; 0x3e8
   15470:	b	15494 <__assert_fail@plt+0x42ec>
   15474:	ldrb	r7, [r7, #2]
   15478:	cmp	r7, #66	; 0x42
   1547c:	movne	r7, #1
   15480:	moveq	r7, #3
   15484:	mov	r1, #1024	; 0x400
   15488:	b	15494 <__assert_fail@plt+0x42ec>
   1548c:	mov	r7, #1
   15490:	mov	r1, #1024	; 0x400
   15494:	sub	r5, r5, #66	; 0x42
   15498:	cmp	r5, #53	; 0x35
   1549c:	ldrls	pc, [pc, r5, lsl #2]
   154a0:	b	1565c <__assert_fail@plt+0x44b4>
   154a4:			; <UNDEFINED> instruction: 0x000155bc
   154a8:	andeq	r5, r1, ip, asr r6
   154ac:	andeq	r5, r1, ip, asr r6
   154b0:	andeq	r5, r1, ip, asr #11
   154b4:	andeq	r5, r1, ip, asr r6
   154b8:	ldrdeq	r5, [r1], -ip
   154bc:	andeq	r5, r1, ip, asr r6
   154c0:	andeq	r5, r1, ip, asr r6
   154c4:	andeq	r5, r1, ip, asr r6
   154c8:	andeq	r5, r1, ip, ror #11
   154cc:	andeq	r5, r1, ip, asr r6
   154d0:	strdeq	r5, [r1], -ip
   154d4:	andeq	r5, r1, ip, asr r6
   154d8:	andeq	r5, r1, ip, asr r6
   154dc:	andeq	r5, r1, ip, lsl #12
   154e0:	andeq	r5, r1, ip, asr r6
   154e4:	andeq	r5, r1, ip, asr r6
   154e8:	andeq	r5, r1, ip, asr r6
   154ec:	andeq	r5, r1, ip, lsl r6
   154f0:	andeq	r5, r1, ip, asr r6
   154f4:	andeq	r5, r1, ip, asr r6
   154f8:	andeq	r5, r1, ip, asr r6
   154fc:	andeq	r5, r1, ip, asr r6
   15500:	andeq	r5, r1, ip, lsr r6
   15504:	andeq	r5, r1, ip, asr #12
   15508:	andeq	r5, r1, ip, asr r6
   1550c:	andeq	r5, r1, ip, asr r6
   15510:	andeq	r5, r1, ip, asr r6
   15514:	andeq	r5, r1, ip, asr r6
   15518:	andeq	r5, r1, ip, asr r6
   1551c:	andeq	r5, r1, ip, asr r6
   15520:	andeq	r5, r1, ip, asr r6
   15524:	andeq	r5, r1, r8, lsl #11
   15528:	andeq	r5, r1, ip, ror #12
   1552c:	andeq	r5, r1, ip, asr r6
   15530:	andeq	r5, r1, ip, asr r6
   15534:	andeq	r5, r1, ip, asr r6
   15538:	ldrdeq	r5, [r1], -ip
   1553c:	andeq	r5, r1, ip, asr r6
   15540:	andeq	r5, r1, ip, asr r6
   15544:	andeq	r5, r1, ip, asr r6
   15548:	andeq	r5, r1, ip, ror #11
   1554c:	andeq	r5, r1, ip, asr r6
   15550:	strdeq	r5, [r1], -ip
   15554:	andeq	r5, r1, ip, asr r6
   15558:	andeq	r5, r1, ip, asr r6
   1555c:	andeq	r5, r1, ip, asr r6
   15560:	andeq	r5, r1, ip, asr r6
   15564:	andeq	r5, r1, ip, asr r6
   15568:	andeq	r5, r1, ip, asr r6
   1556c:	andeq	r5, r1, ip, lsl r6
   15570:	andeq	r5, r1, ip, asr r6
   15574:	andeq	r5, r1, ip, asr r6
   15578:	andeq	r5, r1, ip, lsr #12
   1557c:	mov	r7, #1
   15580:	mov	r1, #1024	; 0x400
   15584:	b	15494 <__assert_fail@plt+0x42ec>
   15588:	mov	r1, #512	; 0x200
   1558c:	mov	r0, sp
   15590:	bl	15118 <__assert_fail@plt+0x3f70>
   15594:	orr	r4, r4, r0
   15598:	ldr	r3, [r6]
   1559c:	add	r2, r3, r7
   155a0:	str	r2, [r6]
   155a4:	ldrb	r3, [r3, r7]
   155a8:	cmp	r3, #0
   155ac:	orrne	r4, r4, #2
   155b0:	ldrd	r2, [sp]
   155b4:	strd	r2, [r9]
   155b8:	b	15280 <__assert_fail@plt+0x40d8>
   155bc:	mov	r1, #1024	; 0x400
   155c0:	mov	r0, sp
   155c4:	bl	15118 <__assert_fail@plt+0x3f70>
   155c8:	b	15594 <__assert_fail@plt+0x43ec>
   155cc:	mov	r2, #6
   155d0:	mov	r0, sp
   155d4:	bl	151c0 <__assert_fail@plt+0x4018>
   155d8:	b	15594 <__assert_fail@plt+0x43ec>
   155dc:	mov	r2, #3
   155e0:	mov	r0, sp
   155e4:	bl	151c0 <__assert_fail@plt+0x4018>
   155e8:	b	15594 <__assert_fail@plt+0x43ec>
   155ec:	mov	r2, #1
   155f0:	mov	r0, sp
   155f4:	bl	151c0 <__assert_fail@plt+0x4018>
   155f8:	b	15594 <__assert_fail@plt+0x43ec>
   155fc:	mov	r2, #2
   15600:	mov	r0, sp
   15604:	bl	151c0 <__assert_fail@plt+0x4018>
   15608:	b	15594 <__assert_fail@plt+0x43ec>
   1560c:	mov	r2, #5
   15610:	mov	r0, sp
   15614:	bl	151c0 <__assert_fail@plt+0x4018>
   15618:	b	15594 <__assert_fail@plt+0x43ec>
   1561c:	mov	r2, #4
   15620:	mov	r0, sp
   15624:	bl	151c0 <__assert_fail@plt+0x4018>
   15628:	b	15594 <__assert_fail@plt+0x43ec>
   1562c:	mov	r1, #2
   15630:	mov	r0, sp
   15634:	bl	15118 <__assert_fail@plt+0x3f70>
   15638:	b	15594 <__assert_fail@plt+0x43ec>
   1563c:	mov	r2, #8
   15640:	mov	r0, sp
   15644:	bl	151c0 <__assert_fail@plt+0x4018>
   15648:	b	15594 <__assert_fail@plt+0x43ec>
   1564c:	mov	r2, #7
   15650:	mov	r0, sp
   15654:	bl	151c0 <__assert_fail@plt+0x4018>
   15658:	b	15594 <__assert_fail@plt+0x43ec>
   1565c:	ldrd	r2, [sp]
   15660:	strd	r2, [r9]
   15664:	orr	r4, r4, #2
   15668:	b	15280 <__assert_fail@plt+0x40d8>
   1566c:	mov	r0, #0
   15670:	b	15594 <__assert_fail@plt+0x43ec>
   15674:	andeq	r6, r1, r8, lsl pc
   15678:	andeq	r6, r1, r0, ror #29
   1567c:	strdeq	r6, [r1], -r0
   15680:	push	{r4, lr}
   15684:	mov	r2, r0
   15688:	mov	r3, r1
   1568c:	cmp	r1, #0
   15690:	cmpne	r0, #0
   15694:	moveq	r3, #1
   15698:	moveq	r2, r3
   1569c:	umull	r0, r1, r2, r3
   156a0:	cmp	r0, #0
   156a4:	cmpge	r1, #0
   156a8:	bne	156bc <__assert_fail@plt+0x4514>
   156ac:	mov	r1, r3
   156b0:	mov	r0, r2
   156b4:	bl	10eb4 <calloc@plt>
   156b8:	pop	{r4, pc}
   156bc:	bl	110a0 <__errno_location@plt>
   156c0:	mov	r3, #12
   156c4:	str	r3, [r0]
   156c8:	mov	r0, #0
   156cc:	pop	{r4, pc}
   156d0:	push	{r4, lr}
   156d4:	cmp	r0, #0
   156d8:	moveq	r0, #1
   156dc:	cmp	r0, #0
   156e0:	blt	156ec <__assert_fail@plt+0x4544>
   156e4:	bl	11028 <malloc@plt>
   156e8:	pop	{r4, pc}
   156ec:	bl	110a0 <__errno_location@plt>
   156f0:	mov	r3, #12
   156f4:	str	r3, [r0]
   156f8:	mov	r0, #0
   156fc:	pop	{r4, pc}
   15700:	push	{r4, lr}
   15704:	cmp	r0, #0
   15708:	beq	15724 <__assert_fail@plt+0x457c>
   1570c:	cmp	r1, #0
   15710:	beq	15730 <__assert_fail@plt+0x4588>
   15714:	cmp	r1, #0
   15718:	blt	1573c <__assert_fail@plt+0x4594>
   1571c:	bl	10f80 <realloc@plt>
   15720:	pop	{r4, pc}
   15724:	mov	r0, r1
   15728:	bl	156d0 <__assert_fail@plt+0x4528>
   1572c:	pop	{r4, pc}
   15730:	bl	120ec <__assert_fail@plt+0xf44>
   15734:	mov	r0, #0
   15738:	pop	{r4, pc}
   1573c:	bl	110a0 <__errno_location@plt>
   15740:	mov	r3, #12
   15744:	str	r3, [r0]
   15748:	mov	r0, #0
   1574c:	pop	{r4, pc}
   15750:	push	{r4, r5, r6, lr}
   15754:	mov	r5, r0
   15758:	bl	10fec <__fpending@plt>
   1575c:	mov	r6, r0
   15760:	ldr	r4, [r5]
   15764:	and	r4, r4, #32
   15768:	mov	r0, r5
   1576c:	bl	157c8 <__assert_fail@plt+0x4620>
   15770:	cmp	r4, #0
   15774:	bne	1579c <__assert_fail@plt+0x45f4>
   15778:	cmp	r0, #0
   1577c:	popeq	{r4, r5, r6, pc}
   15780:	cmp	r6, #0
   15784:	bne	157b8 <__assert_fail@plt+0x4610>
   15788:	bl	110a0 <__errno_location@plt>
   1578c:	ldr	r0, [r0]
   15790:	subs	r0, r0, #9
   15794:	mvnne	r0, #0
   15798:	pop	{r4, r5, r6, pc}
   1579c:	cmp	r0, #0
   157a0:	bne	157c0 <__assert_fail@plt+0x4618>
   157a4:	bl	110a0 <__errno_location@plt>
   157a8:	mov	r3, #0
   157ac:	str	r3, [r0]
   157b0:	mvn	r0, #0
   157b4:	pop	{r4, r5, r6, pc}
   157b8:	mvn	r0, #0
   157bc:	pop	{r4, r5, r6, pc}
   157c0:	mvn	r0, #0
   157c4:	pop	{r4, r5, r6, pc}
   157c8:	push	{r4, r5, r6, lr}
   157cc:	sub	sp, sp, #8
   157d0:	mov	r4, r0
   157d4:	bl	110dc <fileno@plt>
   157d8:	cmp	r0, #0
   157dc:	blt	15854 <__assert_fail@plt+0x46ac>
   157e0:	mov	r0, r4
   157e4:	bl	11040 <__freading@plt>
   157e8:	cmp	r0, #0
   157ec:	beq	15820 <__assert_fail@plt+0x4678>
   157f0:	mov	r0, r4
   157f4:	bl	110dc <fileno@plt>
   157f8:	mov	r3, #1
   157fc:	str	r3, [sp]
   15800:	mov	r2, #0
   15804:	mov	r3, #0
   15808:	bl	10fc8 <lseek64@plt>
   1580c:	mvn	r2, #0
   15810:	mvn	r3, #0
   15814:	cmp	r1, r3
   15818:	cmpeq	r0, r2
   1581c:	beq	15860 <__assert_fail@plt+0x46b8>
   15820:	mov	r0, r4
   15824:	bl	15870 <__assert_fail@plt+0x46c8>
   15828:	cmp	r0, #0
   1582c:	beq	15860 <__assert_fail@plt+0x46b8>
   15830:	bl	110a0 <__errno_location@plt>
   15834:	mov	r5, r0
   15838:	ldr	r6, [r0]
   1583c:	mov	r0, r4
   15840:	bl	110f4 <fclose@plt>
   15844:	cmp	r6, #0
   15848:	strne	r6, [r5]
   1584c:	mvnne	r0, #0
   15850:	b	15868 <__assert_fail@plt+0x46c0>
   15854:	mov	r0, r4
   15858:	bl	110f4 <fclose@plt>
   1585c:	b	15868 <__assert_fail@plt+0x46c0>
   15860:	mov	r0, r4
   15864:	bl	110f4 <fclose@plt>
   15868:	add	sp, sp, #8
   1586c:	pop	{r4, r5, r6, pc}
   15870:	push	{r4, lr}
   15874:	sub	sp, sp, #8
   15878:	subs	r4, r0, #0
   1587c:	beq	15890 <__assert_fail@plt+0x46e8>
   15880:	mov	r0, r4
   15884:	bl	11040 <__freading@plt>
   15888:	cmp	r0, #0
   1588c:	bne	158a0 <__assert_fail@plt+0x46f8>
   15890:	mov	r0, r4
   15894:	bl	10f08 <fflush@plt>
   15898:	add	sp, sp, #8
   1589c:	pop	{r4, pc}
   158a0:	ldr	r3, [r4]
   158a4:	tst	r3, #256	; 0x100
   158a8:	bne	158b8 <__assert_fail@plt+0x4710>
   158ac:	mov	r0, r4
   158b0:	bl	10f08 <fflush@plt>
   158b4:	b	15898 <__assert_fail@plt+0x46f0>
   158b8:	mov	r3, #1
   158bc:	str	r3, [sp]
   158c0:	mov	r2, #0
   158c4:	mov	r3, #0
   158c8:	mov	r0, r4
   158cc:	bl	158d4 <__assert_fail@plt+0x472c>
   158d0:	b	158ac <__assert_fail@plt+0x4704>
   158d4:	push	{r4, r5, r6, r7, lr}
   158d8:	sub	sp, sp, #12
   158dc:	mov	r4, r0
   158e0:	mov	r6, r2
   158e4:	mov	r7, r3
   158e8:	ldr	r5, [sp, #32]
   158ec:	ldr	r2, [r0, #8]
   158f0:	ldr	r3, [r0, #4]
   158f4:	cmp	r2, r3
   158f8:	beq	15918 <__assert_fail@plt+0x4770>
   158fc:	str	r5, [sp]
   15900:	mov	r2, r6
   15904:	mov	r3, r7
   15908:	mov	r0, r4
   1590c:	bl	11100 <fseeko64@plt>
   15910:	add	sp, sp, #12
   15914:	pop	{r4, r5, r6, r7, pc}
   15918:	ldr	r2, [r0, #20]
   1591c:	ldr	r3, [r0, #16]
   15920:	cmp	r2, r3
   15924:	bne	158fc <__assert_fail@plt+0x4754>
   15928:	ldr	r3, [r0, #36]	; 0x24
   1592c:	cmp	r3, #0
   15930:	bne	158fc <__assert_fail@plt+0x4754>
   15934:	bl	110dc <fileno@plt>
   15938:	str	r5, [sp]
   1593c:	mov	r2, r6
   15940:	mov	r3, r7
   15944:	bl	10fc8 <lseek64@plt>
   15948:	mvn	r2, #0
   1594c:	mvn	r3, #0
   15950:	cmp	r1, r3
   15954:	cmpeq	r0, r2
   15958:	beq	15974 <__assert_fail@plt+0x47cc>
   1595c:	ldr	r3, [r4]
   15960:	bic	r3, r3, #16
   15964:	str	r3, [r4]
   15968:	strd	r0, [r4, #80]	; 0x50
   1596c:	mov	r0, #0
   15970:	b	15910 <__assert_fail@plt+0x4768>
   15974:	mvn	r0, #0
   15978:	b	15910 <__assert_fail@plt+0x4768>
   1597c:	push	{r4, r5, r6, r8, r9, lr}
   15980:	mov	r4, r0
   15984:	mov	r5, r1
   15988:	add	r6, r2, #20
   1598c:	mov	r3, #0
   15990:	strb	r3, [r2, #20]
   15994:	mov	r8, #10
   15998:	mov	r9, #0
   1599c:	mov	r2, r8
   159a0:	mov	r3, r9
   159a4:	mov	r0, r4
   159a8:	mov	r1, r5
   159ac:	bl	16230 <__assert_fail@plt+0x5088>
   159b0:	add	r2, r2, #48	; 0x30
   159b4:	strb	r2, [r6, #-1]!
   159b8:	mov	r2, r8
   159bc:	mov	r3, r9
   159c0:	mov	r0, r4
   159c4:	mov	r1, r5
   159c8:	bl	16230 <__assert_fail@plt+0x5088>
   159cc:	mov	r4, r0
   159d0:	mov	r5, r1
   159d4:	orrs	r3, r4, r5
   159d8:	bne	1599c <__assert_fail@plt+0x47f4>
   159dc:	mov	r0, r6
   159e0:	pop	{r4, r5, r6, r8, r9, pc}
   159e4:	push	{r4, lr}
   159e8:	mov	r0, #14
   159ec:	bl	1113c <nl_langinfo@plt>
   159f0:	cmp	r0, #0
   159f4:	beq	15a0c <__assert_fail@plt+0x4864>
   159f8:	ldrb	r2, [r0]
   159fc:	ldr	r3, [pc, #16]	; 15a14 <__assert_fail@plt+0x486c>
   15a00:	cmp	r2, #0
   15a04:	moveq	r0, r3
   15a08:	pop	{r4, pc}
   15a0c:	ldr	r0, [pc]	; 15a14 <__assert_fail@plt+0x486c>
   15a10:	pop	{r4, pc}
   15a14:	andeq	r6, r1, r4, lsr #30
   15a18:	push	{r4, r5, r6, r7, lr}
   15a1c:	sub	sp, sp, #12
   15a20:	mov	r7, r1
   15a24:	mov	r5, r2
   15a28:	subs	r6, r0, #0
   15a2c:	addeq	r6, sp, #4
   15a30:	mov	r0, r6
   15a34:	bl	10ff8 <mbrtowc@plt>
   15a38:	mov	r4, r0
   15a3c:	cmp	r5, #0
   15a40:	cmnne	r0, #3
   15a44:	bhi	15a54 <__assert_fail@plt+0x48ac>
   15a48:	mov	r0, r4
   15a4c:	add	sp, sp, #12
   15a50:	pop	{r4, r5, r6, r7, pc}
   15a54:	mov	r0, #0
   15a58:	bl	15cdc <__assert_fail@plt+0x4b34>
   15a5c:	cmp	r0, #0
   15a60:	ldrbeq	r3, [r7]
   15a64:	streq	r3, [r6]
   15a68:	moveq	r4, #1
   15a6c:	b	15a48 <__assert_fail@plt+0x48a0>
   15a70:	push	{r4, lr}
   15a74:	lsr	r3, r1, #30
   15a78:	lsl	r2, r1, #2
   15a7c:	cmp	r2, #0
   15a80:	cmpge	r3, #0
   15a84:	bne	15a94 <__assert_fail@plt+0x48ec>
   15a88:	lsl	r1, r1, #2
   15a8c:	bl	15700 <__assert_fail@plt+0x4558>
   15a90:	pop	{r4, pc}
   15a94:	bl	110a0 <__errno_location@plt>
   15a98:	mov	r3, #12
   15a9c:	str	r3, [r0]
   15aa0:	mov	r0, #0
   15aa4:	pop	{r4, pc}
   15aa8:	push	{r4, r5, r6, r7, r8, lr}
   15aac:	sub	sp, sp, #8
   15ab0:	mov	r6, r1
   15ab4:	mov	r8, r2
   15ab8:	subs	r7, r0, #0
   15abc:	beq	15b5c <__assert_fail@plt+0x49b4>
   15ac0:	mov	r1, #10
   15ac4:	str	r1, [sp, #4]
   15ac8:	mov	r0, #0
   15acc:	bl	15a70 <__assert_fail@plt+0x48c8>
   15ad0:	subs	r4, r0, #0
   15ad4:	bne	15b08 <__assert_fail@plt+0x4960>
   15ad8:	mvn	r0, #0
   15adc:	b	15b48 <__assert_fail@plt+0x49a0>
   15ae0:	ldr	r3, [sp, #4]
   15ae4:	cmp	r5, r3
   15ae8:	lsleq	r5, r5, #1
   15aec:	streq	r5, [sp, #4]
   15af0:	ldr	r1, [sp, #4]
   15af4:	mov	r0, r4
   15af8:	bl	15a70 <__assert_fail@plt+0x48c8>
   15afc:	cmp	r0, #0
   15b00:	beq	15b3c <__assert_fail@plt+0x4994>
   15b04:	mov	r4, r0
   15b08:	ldr	r5, [sp, #4]
   15b0c:	add	r3, sp, #4
   15b10:	mov	r2, r4
   15b14:	mov	r1, r6
   15b18:	mov	r0, r7
   15b1c:	bl	110b8 <getgrouplist@plt>
   15b20:	cmp	r0, #0
   15b24:	blt	15ae0 <__assert_fail@plt+0x4938>
   15b28:	ldr	r1, [sp, #4]
   15b2c:	mov	r0, r4
   15b30:	bl	15a70 <__assert_fail@plt+0x48c8>
   15b34:	cmp	r0, #0
   15b38:	bne	15b50 <__assert_fail@plt+0x49a8>
   15b3c:	mov	r0, r4
   15b40:	bl	120ec <__assert_fail@plt+0xf44>
   15b44:	mvn	r0, #0
   15b48:	add	sp, sp, #8
   15b4c:	pop	{r4, r5, r6, r7, r8, pc}
   15b50:	str	r0, [r8]
   15b54:	ldr	r0, [sp, #4]
   15b58:	b	15b48 <__assert_fail@plt+0x49a0>
   15b5c:	mov	r1, #0
   15b60:	mov	r0, r1
   15b64:	bl	11154 <getgroups@plt>
   15b68:	str	r0, [sp, #4]
   15b6c:	cmp	r0, #0
   15b70:	blt	15bf4 <__assert_fail@plt+0x4a4c>
   15b74:	adds	r5, r6, #1
   15b78:	movne	r5, #1
   15b7c:	cmp	r0, #0
   15b80:	movne	r3, r5
   15b84:	orreq	r3, r5, #1
   15b88:	cmp	r3, #0
   15b8c:	addne	r0, r0, #1
   15b90:	strne	r0, [sp, #4]
   15b94:	ldr	r1, [sp, #4]
   15b98:	mov	r0, #0
   15b9c:	bl	15a70 <__assert_fail@plt+0x48c8>
   15ba0:	subs	r4, r0, #0
   15ba4:	beq	15c68 <__assert_fail@plt+0x4ac0>
   15ba8:	ldr	r0, [sp, #4]
   15bac:	sub	r0, r0, r5
   15bb0:	cmn	r6, #1
   15bb4:	beq	15c70 <__assert_fail@plt+0x4ac8>
   15bb8:	add	r1, r4, #4
   15bbc:	bl	11154 <getgroups@plt>
   15bc0:	cmp	r0, #0
   15bc4:	strge	r6, [r4]
   15bc8:	addge	r0, r0, #1
   15bcc:	blt	15c80 <__assert_fail@plt+0x4ad8>
   15bd0:	str	r4, [r8]
   15bd4:	cmp	r0, #1
   15bd8:	ble	15b48 <__assert_fail@plt+0x49a0>
   15bdc:	ldr	lr, [r4]
   15be0:	add	ip, r4, r0, lsl #2
   15be4:	add	r3, r4, #4
   15be8:	cmp	ip, r3
   15bec:	bhi	15c3c <__assert_fail@plt+0x4a94>
   15bf0:	b	15b48 <__assert_fail@plt+0x49a0>
   15bf4:	bl	110a0 <__errno_location@plt>
   15bf8:	ldr	r3, [r0]
   15bfc:	cmp	r3, #38	; 0x26
   15c00:	mvnne	r0, #0
   15c04:	bne	15b48 <__assert_fail@plt+0x49a0>
   15c08:	mov	r1, #1
   15c0c:	mov	r0, #0
   15c10:	bl	15a70 <__assert_fail@plt+0x48c8>
   15c14:	cmp	r0, #0
   15c18:	beq	15c60 <__assert_fail@plt+0x4ab8>
   15c1c:	str	r0, [r8]
   15c20:	str	r6, [r0]
   15c24:	adds	r0, r6, #1
   15c28:	movne	r0, #1
   15c2c:	b	15b48 <__assert_fail@plt+0x49a0>
   15c30:	sub	r0, r0, #1
   15c34:	cmp	ip, r3
   15c38:	bls	15b48 <__assert_fail@plt+0x49a0>
   15c3c:	ldr	r2, [r3], #4
   15c40:	cmp	lr, r2
   15c44:	beq	15c30 <__assert_fail@plt+0x4a88>
   15c48:	ldr	r1, [r4]
   15c4c:	cmp	r2, r1
   15c50:	strne	r2, [r4, #4]
   15c54:	addne	r4, r4, #4
   15c58:	bne	15c34 <__assert_fail@plt+0x4a8c>
   15c5c:	b	15c30 <__assert_fail@plt+0x4a88>
   15c60:	mvn	r0, #0
   15c64:	b	15b48 <__assert_fail@plt+0x49a0>
   15c68:	mvn	r0, #0
   15c6c:	b	15b48 <__assert_fail@plt+0x49a0>
   15c70:	mov	r1, r4
   15c74:	bl	11154 <getgroups@plt>
   15c78:	cmp	r0, #0
   15c7c:	bge	15bd0 <__assert_fail@plt+0x4a28>
   15c80:	mov	r0, r4
   15c84:	bl	120ec <__assert_fail@plt+0xf44>
   15c88:	mvn	r0, #0
   15c8c:	b	15b48 <__assert_fail@plt+0x49a0>
   15c90:	push	{r4, r5, r6, lr}
   15c94:	mov	r6, r0
   15c98:	mov	r5, r1
   15c9c:	subs	r4, r2, #0
   15ca0:	beq	15ccc <__assert_fail@plt+0x4b24>
   15ca4:	mov	r1, r4
   15ca8:	mvn	r0, #0
   15cac:	bl	15de4 <__assert_fail@plt+0x4c3c>
   15cb0:	cmp	r0, r5
   15cb4:	bcs	15ccc <__assert_fail@plt+0x4b24>
   15cb8:	bl	110a0 <__errno_location@plt>
   15cbc:	mov	r3, #12
   15cc0:	str	r3, [r0]
   15cc4:	mov	r0, #0
   15cc8:	pop	{r4, r5, r6, pc}
   15ccc:	mul	r1, r5, r4
   15cd0:	mov	r0, r6
   15cd4:	bl	15700 <__assert_fail@plt+0x4558>
   15cd8:	pop	{r4, r5, r6, pc}
   15cdc:	push	{lr}		; (str lr, [sp, #-4]!)
   15ce0:	sub	sp, sp, #268	; 0x10c
   15ce4:	ldr	r2, [pc, #68]	; 15d30 <__assert_fail@plt+0x4b88>
   15ce8:	add	r1, sp, #4
   15cec:	bl	15d3c <__assert_fail@plt+0x4b94>
   15cf0:	cmp	r0, #0
   15cf4:	movne	r0, #0
   15cf8:	bne	15d28 <__assert_fail@plt+0x4b80>
   15cfc:	ldr	r1, [pc, #48]	; 15d34 <__assert_fail@plt+0x4b8c>
   15d00:	add	r0, sp, #4
   15d04:	bl	10ef0 <strcmp@plt>
   15d08:	cmp	r0, #0
   15d0c:	moveq	r0, #0
   15d10:	beq	15d28 <__assert_fail@plt+0x4b80>
   15d14:	ldr	r1, [pc, #28]	; 15d38 <__assert_fail@plt+0x4b90>
   15d18:	add	r0, sp, #4
   15d1c:	bl	10ef0 <strcmp@plt>
   15d20:	adds	r0, r0, #0
   15d24:	movne	r0, #1
   15d28:	add	sp, sp, #268	; 0x10c
   15d2c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d30:	andeq	r0, r0, r1, lsl #2
   15d34:	andeq	r6, r1, ip, lsr #30
   15d38:	andeq	r6, r1, r0, lsr pc
   15d3c:	push	{r4, r5, r6, lr}
   15d40:	mov	r6, r1
   15d44:	mov	r4, r2
   15d48:	mov	r1, #0
   15d4c:	bl	11118 <setlocale@plt>
   15d50:	subs	r5, r0, #0
   15d54:	beq	15d78 <__assert_fail@plt+0x4bd0>
   15d58:	mov	r0, r5
   15d5c:	bl	11088 <strlen@plt>
   15d60:	cmp	r4, r0
   15d64:	bhi	15d90 <__assert_fail@plt+0x4be8>
   15d68:	cmp	r4, #0
   15d6c:	bne	15da8 <__assert_fail@plt+0x4c00>
   15d70:	mov	r0, #34	; 0x22
   15d74:	pop	{r4, r5, r6, pc}
   15d78:	cmp	r4, #0
   15d7c:	beq	15dcc <__assert_fail@plt+0x4c24>
   15d80:	mov	r3, #0
   15d84:	strb	r3, [r6]
   15d88:	mov	r0, #22
   15d8c:	pop	{r4, r5, r6, pc}
   15d90:	add	r2, r0, #1
   15d94:	mov	r1, r5
   15d98:	mov	r0, r6
   15d9c:	bl	10f2c <memcpy@plt>
   15da0:	mov	r0, #0
   15da4:	pop	{r4, r5, r6, pc}
   15da8:	sub	r4, r4, #1
   15dac:	mov	r2, r4
   15db0:	mov	r1, r5
   15db4:	mov	r0, r6
   15db8:	bl	10f2c <memcpy@plt>
   15dbc:	mov	r3, #0
   15dc0:	strb	r3, [r6, r4]
   15dc4:	mov	r0, #34	; 0x22
   15dc8:	pop	{r4, r5, r6, pc}
   15dcc:	mov	r0, #22
   15dd0:	pop	{r4, r5, r6, pc}
   15dd4:	push	{r4, lr}
   15dd8:	mov	r1, #0
   15ddc:	bl	11118 <setlocale@plt>
   15de0:	pop	{r4, pc}
   15de4:	subs	r2, r1, #1
   15de8:	bxeq	lr
   15dec:	bcc	15fc4 <__assert_fail@plt+0x4e1c>
   15df0:	cmp	r0, r1
   15df4:	bls	15fa8 <__assert_fail@plt+0x4e00>
   15df8:	tst	r1, r2
   15dfc:	beq	15fb4 <__assert_fail@plt+0x4e0c>
   15e00:	clz	r3, r0
   15e04:	clz	r2, r1
   15e08:	sub	r3, r2, r3
   15e0c:	rsbs	r3, r3, #31
   15e10:	addne	r3, r3, r3, lsl #1
   15e14:	mov	r2, #0
   15e18:	addne	pc, pc, r3, lsl #2
   15e1c:	nop			; (mov r0, r0)
   15e20:	cmp	r0, r1, lsl #31
   15e24:	adc	r2, r2, r2
   15e28:	subcs	r0, r0, r1, lsl #31
   15e2c:	cmp	r0, r1, lsl #30
   15e30:	adc	r2, r2, r2
   15e34:	subcs	r0, r0, r1, lsl #30
   15e38:	cmp	r0, r1, lsl #29
   15e3c:	adc	r2, r2, r2
   15e40:	subcs	r0, r0, r1, lsl #29
   15e44:	cmp	r0, r1, lsl #28
   15e48:	adc	r2, r2, r2
   15e4c:	subcs	r0, r0, r1, lsl #28
   15e50:	cmp	r0, r1, lsl #27
   15e54:	adc	r2, r2, r2
   15e58:	subcs	r0, r0, r1, lsl #27
   15e5c:	cmp	r0, r1, lsl #26
   15e60:	adc	r2, r2, r2
   15e64:	subcs	r0, r0, r1, lsl #26
   15e68:	cmp	r0, r1, lsl #25
   15e6c:	adc	r2, r2, r2
   15e70:	subcs	r0, r0, r1, lsl #25
   15e74:	cmp	r0, r1, lsl #24
   15e78:	adc	r2, r2, r2
   15e7c:	subcs	r0, r0, r1, lsl #24
   15e80:	cmp	r0, r1, lsl #23
   15e84:	adc	r2, r2, r2
   15e88:	subcs	r0, r0, r1, lsl #23
   15e8c:	cmp	r0, r1, lsl #22
   15e90:	adc	r2, r2, r2
   15e94:	subcs	r0, r0, r1, lsl #22
   15e98:	cmp	r0, r1, lsl #21
   15e9c:	adc	r2, r2, r2
   15ea0:	subcs	r0, r0, r1, lsl #21
   15ea4:	cmp	r0, r1, lsl #20
   15ea8:	adc	r2, r2, r2
   15eac:	subcs	r0, r0, r1, lsl #20
   15eb0:	cmp	r0, r1, lsl #19
   15eb4:	adc	r2, r2, r2
   15eb8:	subcs	r0, r0, r1, lsl #19
   15ebc:	cmp	r0, r1, lsl #18
   15ec0:	adc	r2, r2, r2
   15ec4:	subcs	r0, r0, r1, lsl #18
   15ec8:	cmp	r0, r1, lsl #17
   15ecc:	adc	r2, r2, r2
   15ed0:	subcs	r0, r0, r1, lsl #17
   15ed4:	cmp	r0, r1, lsl #16
   15ed8:	adc	r2, r2, r2
   15edc:	subcs	r0, r0, r1, lsl #16
   15ee0:	cmp	r0, r1, lsl #15
   15ee4:	adc	r2, r2, r2
   15ee8:	subcs	r0, r0, r1, lsl #15
   15eec:	cmp	r0, r1, lsl #14
   15ef0:	adc	r2, r2, r2
   15ef4:	subcs	r0, r0, r1, lsl #14
   15ef8:	cmp	r0, r1, lsl #13
   15efc:	adc	r2, r2, r2
   15f00:	subcs	r0, r0, r1, lsl #13
   15f04:	cmp	r0, r1, lsl #12
   15f08:	adc	r2, r2, r2
   15f0c:	subcs	r0, r0, r1, lsl #12
   15f10:	cmp	r0, r1, lsl #11
   15f14:	adc	r2, r2, r2
   15f18:	subcs	r0, r0, r1, lsl #11
   15f1c:	cmp	r0, r1, lsl #10
   15f20:	adc	r2, r2, r2
   15f24:	subcs	r0, r0, r1, lsl #10
   15f28:	cmp	r0, r1, lsl #9
   15f2c:	adc	r2, r2, r2
   15f30:	subcs	r0, r0, r1, lsl #9
   15f34:	cmp	r0, r1, lsl #8
   15f38:	adc	r2, r2, r2
   15f3c:	subcs	r0, r0, r1, lsl #8
   15f40:	cmp	r0, r1, lsl #7
   15f44:	adc	r2, r2, r2
   15f48:	subcs	r0, r0, r1, lsl #7
   15f4c:	cmp	r0, r1, lsl #6
   15f50:	adc	r2, r2, r2
   15f54:	subcs	r0, r0, r1, lsl #6
   15f58:	cmp	r0, r1, lsl #5
   15f5c:	adc	r2, r2, r2
   15f60:	subcs	r0, r0, r1, lsl #5
   15f64:	cmp	r0, r1, lsl #4
   15f68:	adc	r2, r2, r2
   15f6c:	subcs	r0, r0, r1, lsl #4
   15f70:	cmp	r0, r1, lsl #3
   15f74:	adc	r2, r2, r2
   15f78:	subcs	r0, r0, r1, lsl #3
   15f7c:	cmp	r0, r1, lsl #2
   15f80:	adc	r2, r2, r2
   15f84:	subcs	r0, r0, r1, lsl #2
   15f88:	cmp	r0, r1, lsl #1
   15f8c:	adc	r2, r2, r2
   15f90:	subcs	r0, r0, r1, lsl #1
   15f94:	cmp	r0, r1
   15f98:	adc	r2, r2, r2
   15f9c:	subcs	r0, r0, r1
   15fa0:	mov	r0, r2
   15fa4:	bx	lr
   15fa8:	moveq	r0, #1
   15fac:	movne	r0, #0
   15fb0:	bx	lr
   15fb4:	clz	r2, r1
   15fb8:	rsb	r2, r2, #31
   15fbc:	lsr	r0, r0, r2
   15fc0:	bx	lr
   15fc4:	cmp	r0, #0
   15fc8:	mvnne	r0, #0
   15fcc:	b	1626c <__assert_fail@plt+0x50c4>
   15fd0:	cmp	r1, #0
   15fd4:	beq	15fc4 <__assert_fail@plt+0x4e1c>
   15fd8:	push	{r0, r1, lr}
   15fdc:	bl	15de4 <__assert_fail@plt+0x4c3c>
   15fe0:	pop	{r1, r2, lr}
   15fe4:	mul	r3, r2, r0
   15fe8:	sub	r1, r1, r3
   15fec:	bx	lr
   15ff0:	cmp	r1, #0
   15ff4:	beq	16200 <__assert_fail@plt+0x5058>
   15ff8:	eor	ip, r0, r1
   15ffc:	rsbmi	r1, r1, #0
   16000:	subs	r2, r1, #1
   16004:	beq	161cc <__assert_fail@plt+0x5024>
   16008:	movs	r3, r0
   1600c:	rsbmi	r3, r0, #0
   16010:	cmp	r3, r1
   16014:	bls	161d8 <__assert_fail@plt+0x5030>
   16018:	tst	r1, r2
   1601c:	beq	161e8 <__assert_fail@plt+0x5040>
   16020:	clz	r2, r3
   16024:	clz	r0, r1
   16028:	sub	r2, r0, r2
   1602c:	rsbs	r2, r2, #31
   16030:	addne	r2, r2, r2, lsl #1
   16034:	mov	r0, #0
   16038:	addne	pc, pc, r2, lsl #2
   1603c:	nop			; (mov r0, r0)
   16040:	cmp	r3, r1, lsl #31
   16044:	adc	r0, r0, r0
   16048:	subcs	r3, r3, r1, lsl #31
   1604c:	cmp	r3, r1, lsl #30
   16050:	adc	r0, r0, r0
   16054:	subcs	r3, r3, r1, lsl #30
   16058:	cmp	r3, r1, lsl #29
   1605c:	adc	r0, r0, r0
   16060:	subcs	r3, r3, r1, lsl #29
   16064:	cmp	r3, r1, lsl #28
   16068:	adc	r0, r0, r0
   1606c:	subcs	r3, r3, r1, lsl #28
   16070:	cmp	r3, r1, lsl #27
   16074:	adc	r0, r0, r0
   16078:	subcs	r3, r3, r1, lsl #27
   1607c:	cmp	r3, r1, lsl #26
   16080:	adc	r0, r0, r0
   16084:	subcs	r3, r3, r1, lsl #26
   16088:	cmp	r3, r1, lsl #25
   1608c:	adc	r0, r0, r0
   16090:	subcs	r3, r3, r1, lsl #25
   16094:	cmp	r3, r1, lsl #24
   16098:	adc	r0, r0, r0
   1609c:	subcs	r3, r3, r1, lsl #24
   160a0:	cmp	r3, r1, lsl #23
   160a4:	adc	r0, r0, r0
   160a8:	subcs	r3, r3, r1, lsl #23
   160ac:	cmp	r3, r1, lsl #22
   160b0:	adc	r0, r0, r0
   160b4:	subcs	r3, r3, r1, lsl #22
   160b8:	cmp	r3, r1, lsl #21
   160bc:	adc	r0, r0, r0
   160c0:	subcs	r3, r3, r1, lsl #21
   160c4:	cmp	r3, r1, lsl #20
   160c8:	adc	r0, r0, r0
   160cc:	subcs	r3, r3, r1, lsl #20
   160d0:	cmp	r3, r1, lsl #19
   160d4:	adc	r0, r0, r0
   160d8:	subcs	r3, r3, r1, lsl #19
   160dc:	cmp	r3, r1, lsl #18
   160e0:	adc	r0, r0, r0
   160e4:	subcs	r3, r3, r1, lsl #18
   160e8:	cmp	r3, r1, lsl #17
   160ec:	adc	r0, r0, r0
   160f0:	subcs	r3, r3, r1, lsl #17
   160f4:	cmp	r3, r1, lsl #16
   160f8:	adc	r0, r0, r0
   160fc:	subcs	r3, r3, r1, lsl #16
   16100:	cmp	r3, r1, lsl #15
   16104:	adc	r0, r0, r0
   16108:	subcs	r3, r3, r1, lsl #15
   1610c:	cmp	r3, r1, lsl #14
   16110:	adc	r0, r0, r0
   16114:	subcs	r3, r3, r1, lsl #14
   16118:	cmp	r3, r1, lsl #13
   1611c:	adc	r0, r0, r0
   16120:	subcs	r3, r3, r1, lsl #13
   16124:	cmp	r3, r1, lsl #12
   16128:	adc	r0, r0, r0
   1612c:	subcs	r3, r3, r1, lsl #12
   16130:	cmp	r3, r1, lsl #11
   16134:	adc	r0, r0, r0
   16138:	subcs	r3, r3, r1, lsl #11
   1613c:	cmp	r3, r1, lsl #10
   16140:	adc	r0, r0, r0
   16144:	subcs	r3, r3, r1, lsl #10
   16148:	cmp	r3, r1, lsl #9
   1614c:	adc	r0, r0, r0
   16150:	subcs	r3, r3, r1, lsl #9
   16154:	cmp	r3, r1, lsl #8
   16158:	adc	r0, r0, r0
   1615c:	subcs	r3, r3, r1, lsl #8
   16160:	cmp	r3, r1, lsl #7
   16164:	adc	r0, r0, r0
   16168:	subcs	r3, r3, r1, lsl #7
   1616c:	cmp	r3, r1, lsl #6
   16170:	adc	r0, r0, r0
   16174:	subcs	r3, r3, r1, lsl #6
   16178:	cmp	r3, r1, lsl #5
   1617c:	adc	r0, r0, r0
   16180:	subcs	r3, r3, r1, lsl #5
   16184:	cmp	r3, r1, lsl #4
   16188:	adc	r0, r0, r0
   1618c:	subcs	r3, r3, r1, lsl #4
   16190:	cmp	r3, r1, lsl #3
   16194:	adc	r0, r0, r0
   16198:	subcs	r3, r3, r1, lsl #3
   1619c:	cmp	r3, r1, lsl #2
   161a0:	adc	r0, r0, r0
   161a4:	subcs	r3, r3, r1, lsl #2
   161a8:	cmp	r3, r1, lsl #1
   161ac:	adc	r0, r0, r0
   161b0:	subcs	r3, r3, r1, lsl #1
   161b4:	cmp	r3, r1
   161b8:	adc	r0, r0, r0
   161bc:	subcs	r3, r3, r1
   161c0:	cmp	ip, #0
   161c4:	rsbmi	r0, r0, #0
   161c8:	bx	lr
   161cc:	teq	ip, r0
   161d0:	rsbmi	r0, r0, #0
   161d4:	bx	lr
   161d8:	movcc	r0, #0
   161dc:	asreq	r0, ip, #31
   161e0:	orreq	r0, r0, #1
   161e4:	bx	lr
   161e8:	clz	r2, r1
   161ec:	rsb	r2, r2, #31
   161f0:	cmp	ip, #0
   161f4:	lsr	r0, r3, r2
   161f8:	rsbmi	r0, r0, #0
   161fc:	bx	lr
   16200:	cmp	r0, #0
   16204:	mvngt	r0, #-2147483648	; 0x80000000
   16208:	movlt	r0, #-2147483648	; 0x80000000
   1620c:	b	1626c <__assert_fail@plt+0x50c4>
   16210:	cmp	r1, #0
   16214:	beq	16200 <__assert_fail@plt+0x5058>
   16218:	push	{r0, r1, lr}
   1621c:	bl	15ff8 <__assert_fail@plt+0x4e50>
   16220:	pop	{r1, r2, lr}
   16224:	mul	r3, r2, r0
   16228:	sub	r1, r1, r3
   1622c:	bx	lr
   16230:	cmp	r3, #0
   16234:	cmpeq	r2, #0
   16238:	bne	16250 <__assert_fail@plt+0x50a8>
   1623c:	cmp	r1, #0
   16240:	cmpeq	r0, #0
   16244:	mvnne	r1, #0
   16248:	mvnne	r0, #0
   1624c:	b	1626c <__assert_fail@plt+0x50c4>
   16250:	sub	sp, sp, #8
   16254:	push	{sp, lr}
   16258:	bl	1627c <__assert_fail@plt+0x50d4>
   1625c:	ldr	lr, [sp, #4]
   16260:	add	sp, sp, #8
   16264:	pop	{r2, r3}
   16268:	bx	lr
   1626c:	push	{r1, lr}
   16270:	mov	r0, #8
   16274:	bl	10ed8 <raise@plt>
   16278:	pop	{r1, pc}
   1627c:	cmp	r1, r3
   16280:	push	{r4, r5, r6, r7, r8, r9, lr}
   16284:	cmpeq	r0, r2
   16288:	mov	r4, r0
   1628c:	mov	r5, r1
   16290:	ldr	r9, [sp, #28]
   16294:	movcc	r0, #0
   16298:	movcc	r1, #0
   1629c:	bcc	16394 <__assert_fail@plt+0x51ec>
   162a0:	cmp	r3, #0
   162a4:	clzeq	ip, r2
   162a8:	clzne	ip, r3
   162ac:	addeq	ip, ip, #32
   162b0:	cmp	r5, #0
   162b4:	clzeq	r1, r4
   162b8:	addeq	r1, r1, #32
   162bc:	clzne	r1, r5
   162c0:	sub	ip, ip, r1
   162c4:	sub	lr, ip, #32
   162c8:	lsl	r7, r3, ip
   162cc:	rsb	r8, ip, #32
   162d0:	orr	r7, r7, r2, lsl lr
   162d4:	orr	r7, r7, r2, lsr r8
   162d8:	lsl	r6, r2, ip
   162dc:	cmp	r5, r7
   162e0:	cmpeq	r4, r6
   162e4:	movcc	r0, #0
   162e8:	movcc	r1, #0
   162ec:	bcc	16308 <__assert_fail@plt+0x5160>
   162f0:	mov	r3, #1
   162f4:	subs	r4, r4, r6
   162f8:	lsl	r1, r3, lr
   162fc:	lsl	r0, r3, ip
   16300:	orr	r1, r1, r3, lsr r8
   16304:	sbc	r5, r5, r7
   16308:	cmp	ip, #0
   1630c:	beq	16394 <__assert_fail@plt+0x51ec>
   16310:	lsrs	r3, r7, #1
   16314:	rrx	r2, r6
   16318:	mov	r6, ip
   1631c:	b	16340 <__assert_fail@plt+0x5198>
   16320:	subs	r4, r4, r2
   16324:	sbc	r5, r5, r3
   16328:	adds	r4, r4, r4
   1632c:	adc	r5, r5, r5
   16330:	adds	r4, r4, #1
   16334:	adc	r5, r5, #0
   16338:	subs	r6, r6, #1
   1633c:	beq	1635c <__assert_fail@plt+0x51b4>
   16340:	cmp	r5, r3
   16344:	cmpeq	r4, r2
   16348:	bcs	16320 <__assert_fail@plt+0x5178>
   1634c:	adds	r4, r4, r4
   16350:	adc	r5, r5, r5
   16354:	subs	r6, r6, #1
   16358:	bne	16340 <__assert_fail@plt+0x5198>
   1635c:	lsr	r6, r4, ip
   16360:	lsr	r7, r5, ip
   16364:	orr	r6, r6, r5, lsl r8
   16368:	adds	r2, r0, r4
   1636c:	orr	r6, r6, r5, lsr lr
   16370:	adc	r3, r1, r5
   16374:	lsl	r1, r7, ip
   16378:	orr	r1, r1, r6, lsl lr
   1637c:	lsl	r0, r6, ip
   16380:	orr	r1, r1, r6, lsr r8
   16384:	subs	r0, r2, r0
   16388:	mov	r4, r6
   1638c:	mov	r5, r7
   16390:	sbc	r1, r3, r1
   16394:	cmp	r9, #0
   16398:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1639c:	strd	r4, [r9]
   163a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   163a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   163a8:	mov	r7, r0
   163ac:	ldr	r6, [pc, #72]	; 163fc <__assert_fail@plt+0x5254>
   163b0:	ldr	r5, [pc, #72]	; 16400 <__assert_fail@plt+0x5258>
   163b4:	add	r6, pc, r6
   163b8:	add	r5, pc, r5
   163bc:	sub	r6, r6, r5
   163c0:	mov	r8, r1
   163c4:	mov	r9, r2
   163c8:	bl	10e94 <calloc@plt-0x20>
   163cc:	asrs	r6, r6, #2
   163d0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   163d4:	mov	r4, #0
   163d8:	add	r4, r4, #1
   163dc:	ldr	r3, [r5], #4
   163e0:	mov	r2, r9
   163e4:	mov	r1, r8
   163e8:	mov	r0, r7
   163ec:	blx	r3
   163f0:	cmp	r6, r4
   163f4:	bne	163d8 <__assert_fail@plt+0x5230>
   163f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   163fc:	andeq	r1, r1, r4, asr fp
   16400:	andeq	r1, r1, ip, asr #22
   16404:	bx	lr
   16408:	ldr	r3, [pc, #12]	; 1641c <__assert_fail@plt+0x5274>
   1640c:	mov	r1, #0
   16410:	add	r3, pc, r3
   16414:	ldr	r2, [r3]
   16418:	b	110ac <__cxa_atexit@plt>
   1641c:	strdeq	r1, [r1], -ip

Disassembly of section .fini:

00016420 <.fini>:
   16420:	push	{r3, lr}
   16424:	pop	{r3, pc}
