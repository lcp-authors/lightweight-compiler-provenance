
../repos/eddieantonio-ocreval-3ab279a/wordfreq/wordfreq:     file format elf32-littlearm


Disassembly of section .init:

000109c4 <.init>:
   109c4:	push	{r3, lr}
   109c8:	bl	10c38 <__assert_fail@plt+0xa4>
   109cc:	pop	{r3, pc}

Disassembly of section .plt:

000109d0 <calloc@plt-0x14>:
   109d0:	push	{lr}		; (str lr, [sp, #-4]!)
   109d4:	ldr	lr, [pc, #4]	; 109e0 <calloc@plt-0x4>
   109d8:	add	lr, pc, lr
   109dc:	ldr	pc, [lr, #8]!
   109e0:	andeq	r6, r1, r0, lsr #12

000109e4 <calloc@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #90112	; 0x16000
   109ec:	ldr	pc, [ip, #1568]!	; 0x620

000109f0 <strcmp@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #90112	; 0x16000
   109f8:	ldr	pc, [ip, #1560]!	; 0x618

000109fc <printf@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #90112	; 0x16000
   10a04:	ldr	pc, [ip, #1552]!	; 0x610

00010a08 <fopen@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #90112	; 0x16000
   10a10:	ldr	pc, [ip, #1544]!	; 0x608

00010a14 <free@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #90112	; 0x16000
   10a1c:	ldr	pc, [ip, #1536]!	; 0x600

00010a20 <utf8proc_get_property@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #90112	; 0x16000
   10a28:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a2c <fgets@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #90112	; 0x16000
   10a34:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a38 <utf8proc_encode_char@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #90112	; 0x16000
   10a40:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a44 <strdup@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #90112	; 0x16000
   10a4c:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a50 <rewind@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #90112	; 0x16000
   10a58:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a5c <unlink@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #90112	; 0x16000
   10a64:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a68 <utf8proc_tolower@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #90112	; 0x16000
   10a70:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a74 <__xstat@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #90112	; 0x16000
   10a7c:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a80 <fread@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #90112	; 0x16000
   10a88:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a8c <utf8proc_iterate@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #90112	; 0x16000
   10a94:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a98 <puts@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #90112	; 0x16000
   10aa0:	ldr	pc, [ip, #1448]!	; 0x5a8

00010aa4 <malloc@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #90112	; 0x16000
   10aac:	ldr	pc, [ip, #1440]!	; 0x5a0

00010ab0 <__libc_start_main@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #90112	; 0x16000
   10ab8:	ldr	pc, [ip, #1432]!	; 0x598

00010abc <__sysv_signal@plt>:
   10abc:	add	ip, pc, #0, 12
   10ac0:	add	ip, ip, #90112	; 0x16000
   10ac4:	ldr	pc, [ip, #1424]!	; 0x590

00010ac8 <__gmon_start__@plt>:
   10ac8:	add	ip, pc, #0, 12
   10acc:	add	ip, ip, #90112	; 0x16000
   10ad0:	ldr	pc, [ip, #1416]!	; 0x588

00010ad4 <getpid@plt>:
   10ad4:	add	ip, pc, #0, 12
   10ad8:	add	ip, ip, #90112	; 0x16000
   10adc:	ldr	pc, [ip, #1408]!	; 0x580

00010ae0 <exit@plt>:
   10ae0:	add	ip, pc, #0, 12
   10ae4:	add	ip, ip, #90112	; 0x16000
   10ae8:	ldr	pc, [ip, #1400]!	; 0x578

00010aec <utf8proc_category@plt>:
   10aec:	add	ip, pc, #0, 12
   10af0:	add	ip, ip, #90112	; 0x16000
   10af4:	ldr	pc, [ip, #1392]!	; 0x570

00010af8 <strlen@plt>:
   10af8:	add	ip, pc, #0, 12
   10afc:	add	ip, ip, #90112	; 0x16000
   10b00:	ldr	pc, [ip, #1384]!	; 0x568

00010b04 <fprintf@plt>:
   10b04:	add	ip, pc, #0, 12
   10b08:	add	ip, ip, #90112	; 0x16000
   10b0c:	ldr	pc, [ip, #1376]!	; 0x560

00010b10 <__isoc99_sscanf@plt>:
   10b10:	add	ip, pc, #0, 12
   10b14:	add	ip, ip, #90112	; 0x16000
   10b18:	ldr	pc, [ip, #1368]!	; 0x558

00010b1c <fclose@plt>:
   10b1c:	add	ip, pc, #0, 12
   10b20:	add	ip, ip, #90112	; 0x16000
   10b24:	ldr	pc, [ip, #1360]!	; 0x550

00010b28 <utf8proc_NFC@plt>:
   10b28:	add	ip, pc, #0, 12
   10b2c:	add	ip, ip, #90112	; 0x16000
   10b30:	ldr	pc, [ip, #1352]!	; 0x548

00010b34 <fputc@plt>:
   10b34:	add	ip, pc, #0, 12
   10b38:	add	ip, ip, #90112	; 0x16000
   10b3c:	ldr	pc, [ip, #1344]!	; 0x540

00010b40 <sprintf@plt>:
   10b40:	add	ip, pc, #0, 12
   10b44:	add	ip, ip, #90112	; 0x16000
   10b48:	ldr	pc, [ip, #1336]!	; 0x538

00010b4c <atoi@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #90112	; 0x16000
   10b54:	ldr	pc, [ip, #1328]!	; 0x530

00010b58 <utf8proc_errmsg@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #90112	; 0x16000
   10b60:	ldr	pc, [ip, #1320]!	; 0x528

00010b64 <fputs@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #90112	; 0x16000
   10b6c:	ldr	pc, [ip, #1312]!	; 0x520

00010b70 <strncmp@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #90112	; 0x16000
   10b78:	ldr	pc, [ip, #1304]!	; 0x518

00010b7c <abort@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #90112	; 0x16000
   10b84:	ldr	pc, [ip, #1296]!	; 0x510

00010b88 <getc@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #90112	; 0x16000
   10b90:	ldr	pc, [ip, #1288]!	; 0x508

00010b94 <__assert_fail@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #90112	; 0x16000
   10b9c:	ldr	pc, [ip, #1280]!	; 0x500

Disassembly of section .text:

00010ba0 <error@@Base-0x1590>:
   10ba0:	push	{r0, r1, r2, r4, r5, lr}
   10ba4:	mov	r3, #0
   10ba8:	mov	r5, r1
   10bac:	ldr	r2, [pc, #64]	; 10bf4 <__assert_fail@plt+0x60>
   10bb0:	str	r0, [sp, #4]
   10bb4:	add	r0, sp, #4
   10bb8:	bl	12250 <error@@Base+0x120>
   10bbc:	ldr	r3, [sp, #4]
   10bc0:	cmp	r3, #0
   10bc4:	movne	r4, #0
   10bc8:	bne	10be0 <__assert_fail@plt+0x4c>
   10bcc:	ldr	r0, [pc, #36]	; 10bf8 <__assert_fail@plt+0x64>
   10bd0:	bl	12130 <error@@Base>
   10bd4:	ldr	r0, [r5, r4, lsl #2]
   10bd8:	add	r4, r4, #1
   10bdc:	bl	10d14 <__assert_fail@plt+0x180>
   10be0:	ldr	r3, [sp, #4]
   10be4:	cmp	r3, r4
   10be8:	bgt	10bd4 <__assert_fail@plt+0x40>
   10bec:	bl	10e10 <__assert_fail@plt+0x27c>
   10bf0:	bl	120d8 <__assert_fail@plt+0x1544>
   10bf4:	andeq	r2, r1, r6, ror sl
   10bf8:	muleq	r1, sl, sl
   10bfc:	mov	fp, #0
   10c00:	mov	lr, #0
   10c04:	pop	{r1}		; (ldr r1, [sp], #4)
   10c08:	mov	r2, sp
   10c0c:	push	{r2}		; (str r2, [sp, #-4]!)
   10c10:	push	{r0}		; (str r0, [sp, #-4]!)
   10c14:	ldr	ip, [pc, #16]	; 10c2c <__assert_fail@plt+0x98>
   10c18:	push	{ip}		; (str ip, [sp, #-4]!)
   10c1c:	ldr	r0, [pc, #12]	; 10c30 <__assert_fail@plt+0x9c>
   10c20:	ldr	r3, [pc, #12]	; 10c34 <__assert_fail@plt+0xa0>
   10c24:	bl	10ab0 <__libc_start_main@plt>
   10c28:	bl	10b7c <abort@plt>
   10c2c:	andeq	r2, r1, r4, lsr sl
   10c30:	andeq	r0, r1, r0, lsr #23
   10c34:	ldrdeq	r2, [r1], -r4
   10c38:	ldr	r3, [pc, #20]	; 10c54 <__assert_fail@plt+0xc0>
   10c3c:	ldr	r2, [pc, #20]	; 10c58 <__assert_fail@plt+0xc4>
   10c40:	add	r3, pc, r3
   10c44:	ldr	r2, [r3, r2]
   10c48:	cmp	r2, #0
   10c4c:	bxeq	lr
   10c50:	b	10ac8 <__gmon_start__@plt>
   10c54:			; <UNDEFINED> instruction: 0x000163b8
   10c58:	andeq	r0, r0, r0, lsr #1
   10c5c:	ldr	r0, [pc, #24]	; 10c7c <__assert_fail@plt+0xe8>
   10c60:	ldr	r3, [pc, #24]	; 10c80 <__assert_fail@plt+0xec>
   10c64:	cmp	r3, r0
   10c68:	bxeq	lr
   10c6c:	ldr	r3, [pc, #16]	; 10c84 <__assert_fail@plt+0xf0>
   10c70:	cmp	r3, #0
   10c74:	bxeq	lr
   10c78:	bx	r3
   10c7c:	andeq	r7, r2, r0, asr #1
   10c80:	andeq	r7, r2, r0, asr #1
   10c84:	andeq	r0, r0, r0
   10c88:	ldr	r0, [pc, #36]	; 10cb4 <__assert_fail@plt+0x120>
   10c8c:	ldr	r1, [pc, #36]	; 10cb8 <__assert_fail@plt+0x124>
   10c90:	sub	r1, r1, r0
   10c94:	asr	r1, r1, #2
   10c98:	add	r1, r1, r1, lsr #31
   10c9c:	asrs	r1, r1, #1
   10ca0:	bxeq	lr
   10ca4:	ldr	r3, [pc, #16]	; 10cbc <__assert_fail@plt+0x128>
   10ca8:	cmp	r3, #0
   10cac:	bxeq	lr
   10cb0:	bx	r3
   10cb4:	andeq	r7, r2, r0, asr #1
   10cb8:	andeq	r7, r2, r0, asr #1
   10cbc:	andeq	r0, r0, r0
   10cc0:	push	{r4, lr}
   10cc4:	ldr	r4, [pc, #24]	; 10ce4 <__assert_fail@plt+0x150>
   10cc8:	ldrb	r3, [r4]
   10ccc:	cmp	r3, #0
   10cd0:	popne	{r4, pc}
   10cd4:	bl	10c5c <__assert_fail@plt+0xc8>
   10cd8:	mov	r3, #1
   10cdc:	strb	r3, [r4]
   10ce0:	pop	{r4, pc}
   10ce4:	ldrdeq	r7, [r2], -r0
   10ce8:	b	10c88 <__assert_fail@plt+0xf4>
   10cec:	ldr	r0, [r0, #8]
   10cf0:	ldr	r1, [r1, #8]
   10cf4:	b	11fdc <__assert_fail@plt+0x1448>
   10cf8:	ldr	r2, [r0, #12]
   10cfc:	ldr	r3, [r1, #12]
   10d00:	cmp	r2, r3
   10d04:	bne	10d0c <__assert_fail@plt+0x178>
   10d08:	b	10cec <__assert_fail@plt+0x158>
   10d0c:	sub	r0, r3, r2
   10d10:	bx	lr
   10d14:	push	{r4, r5, r6, lr}
   10d18:	mov	r1, r0
   10d1c:	ldr	r4, [pc, #92]	; 10d80 <__assert_fail@plt+0x1ec>
   10d20:	ldr	r2, [pc, #92]	; 10d84 <__assert_fail@plt+0x1f0>
   10d24:	ldr	r0, [pc, #92]	; 10d88 <__assert_fail@plt+0x1f4>
   10d28:	bl	12484 <error@@Base+0x354>
   10d2c:	mov	r0, r4
   10d30:	ldr	r1, [pc, #80]	; 10d88 <__assert_fail@plt+0x1f4>
   10d34:	bl	11b28 <__assert_fail@plt+0xf94>
   10d38:	ldr	r5, [pc, #76]	; 10d8c <__assert_fail@plt+0x1f8>
   10d3c:	ldr	r4, [r4]
   10d40:	cmp	r4, #0
   10d44:	bne	10d64 <__assert_fail@plt+0x1d0>
   10d48:	ldr	r1, [pc, #64]	; 10d90 <__assert_fail@plt+0x1fc>
   10d4c:	ldr	r0, [pc, #52]	; 10d88 <__assert_fail@plt+0x1f4>
   10d50:	bl	10fac <__assert_fail@plt+0x418>
   10d54:	ldr	r1, [pc, #56]	; 10d94 <__assert_fail@plt+0x200>
   10d58:	pop	{r4, r5, r6, lr}
   10d5c:	ldr	r0, [pc, #28]	; 10d80 <__assert_fail@plt+0x1ec>
   10d60:	b	10fac <__assert_fail@plt+0x418>
   10d64:	mov	r3, #0
   10d68:	mov	r2, #1
   10d6c:	ldr	r1, [r4, #8]
   10d70:	mov	r0, r5
   10d74:	bl	114bc <__assert_fail@plt+0x928>
   10d78:	ldr	r4, [r4, #4]
   10d7c:	b	10d40 <__assert_fail@plt+0x1ac>
   10d80:	andeq	r7, r2, r4, asr r1
   10d84:	andeq	r7, r2, ip, lsr #1
   10d88:	andeq	r7, r2, r4, asr #2
   10d8c:	andeq	r7, r2, r4, ror #2
   10d90:	andeq	r0, r1, r4, lsl sl
   10d94:	andeq	r1, r1, r4, lsl pc
   10d98:	push	{r4, r5, r6, r7, r8, lr}
   10d9c:	mov	r5, #0
   10da0:	mov	r4, r5
   10da4:	ldr	r6, [pc, #84]	; 10e00 <__assert_fail@plt+0x26c>
   10da8:	ldr	r7, [pc, #84]	; 10e04 <__assert_fail@plt+0x270>
   10dac:	ldr	r0, [pc, #84]	; 10e08 <__assert_fail@plt+0x274>
   10db0:	bl	10a98 <puts@plt>
   10db4:	ldr	r3, [r6, #3956]	; 0xf74
   10db8:	cmp	r3, r4
   10dbc:	bgt	10dd0 <__assert_fail@plt+0x23c>
   10dc0:	mov	r1, r5
   10dc4:	ldr	r0, [pc, #64]	; 10e0c <__assert_fail@plt+0x278>
   10dc8:	pop	{r4, r5, r6, r7, r8, lr}
   10dcc:	b	109fc <printf@plt>
   10dd0:	ldr	r3, [r6, #3952]	; 0xf70
   10dd4:	mov	r0, r7
   10dd8:	ldr	r3, [r3, r4, lsl #2]
   10ddc:	ldr	r2, [r3, #8]
   10de0:	ldr	r1, [r3, #12]
   10de4:	bl	109fc <printf@plt>
   10de8:	ldr	r3, [r6, #3952]	; 0xf70
   10dec:	ldr	r3, [r3, r4, lsl #2]
   10df0:	add	r4, r4, #1
   10df4:	ldr	r3, [r3, #12]
   10df8:	add	r5, r5, r3
   10dfc:	b	10db4 <__assert_fail@plt+0x220>
   10e00:	andeq	r8, r2, r4, ror #2
   10e04:	andeq	r2, r1, sp, asr sl
   10e08:	andeq	r2, r1, r4, asr sl
   10e0c:	andeq	r2, r1, r8, ror #20
   10e10:	push	{r4, lr}
   10e14:	ldr	r4, [pc, #60]	; 10e58 <__assert_fail@plt+0x2c4>
   10e18:	mov	r0, r4
   10e1c:	add	r4, r4, #4096	; 0x1000
   10e20:	bl	119b8 <__assert_fail@plt+0xe24>
   10e24:	ldr	r2, [pc, #48]	; 10e5c <__assert_fail@plt+0x2c8>
   10e28:	ldr	r1, [r4, #3952]	; 0xf70
   10e2c:	ldr	r0, [r4, #3956]	; 0xf74
   10e30:	bl	110ec <__assert_fail@plt+0x558>
   10e34:	bl	10d98 <__assert_fail@plt+0x204>
   10e38:	ldr	r0, [pc, #32]	; 10e60 <__assert_fail@plt+0x2cc>
   10e3c:	bl	10a98 <puts@plt>
   10e40:	ldr	r2, [pc, #28]	; 10e64 <__assert_fail@plt+0x2d0>
   10e44:	ldr	r1, [r4, #3952]	; 0xf70
   10e48:	ldr	r0, [r4, #3956]	; 0xf74
   10e4c:	bl	110ec <__assert_fail@plt+0x558>
   10e50:	pop	{r4, lr}
   10e54:	b	10d98 <__assert_fail@plt+0x204>
   10e58:	andeq	r7, r2, r4, ror #2
   10e5c:	andeq	r0, r1, ip, ror #25
   10e60:	andeq	r5, r1, r7, lsr #31
   10e64:	strdeq	r0, [r1], -r8
   10e68:	cmp	r1, #0
   10e6c:	push	{r4, lr}
   10e70:	mov	r4, r0
   10e74:	stm	r2, {r1, r3}
   10e78:	strne	r2, [r1, #4]
   10e7c:	streq	r2, [r0]
   10e80:	cmp	r3, #0
   10e84:	streq	r2, [r0, #4]
   10e88:	ldr	r0, [r0, #8]
   10e8c:	strne	r2, [r3]
   10e90:	cmp	r0, #0
   10e94:	beq	10ea4 <__assert_fail@plt+0x310>
   10e98:	bl	10a14 <free@plt>
   10e9c:	mov	r3, #0
   10ea0:	str	r3, [r4, #8]
   10ea4:	ldr	r3, [r4, #12]
   10ea8:	add	r3, r3, #1
   10eac:	str	r3, [r4, #12]
   10eb0:	pop	{r4, pc}
   10eb4:	mov	r3, #0
   10eb8:	str	r3, [r0]
   10ebc:	str	r3, [r0, #4]
   10ec0:	str	r3, [r0, #8]
   10ec4:	str	r3, [r0, #12]
   10ec8:	bx	lr
   10ecc:	mov	r2, r1
   10ed0:	mov	r1, #0
   10ed4:	ldr	r3, [r0]
   10ed8:	b	10e68 <__assert_fail@plt+0x2d4>
   10edc:	mov	r2, r1
   10ee0:	mov	r3, #0
   10ee4:	ldr	r1, [r0, #4]
   10ee8:	b	10e68 <__assert_fail@plt+0x2d4>
   10eec:	mov	r3, r2
   10ef0:	mov	r2, r1
   10ef4:	ldr	r1, [r3]
   10ef8:	b	10e68 <__assert_fail@plt+0x2d4>
   10efc:	ldr	r3, [r1, #4]
   10f00:	b	10e68 <__assert_fail@plt+0x2d4>
   10f04:	ldr	r3, [r1]
   10f08:	push	{r4, r5, r6, lr}
   10f0c:	mov	r4, r0
   10f10:	mov	r5, #0
   10f14:	ldr	r2, [r1, #4]
   10f18:	cmp	r3, #0
   10f1c:	strne	r2, [r3, #4]
   10f20:	streq	r2, [r0]
   10f24:	ldr	r2, [r1, #4]
   10f28:	cmp	r2, #0
   10f2c:	streq	r3, [r0, #4]
   10f30:	ldr	r0, [r0, #8]
   10f34:	strne	r3, [r2]
   10f38:	str	r5, [r1]
   10f3c:	str	r5, [r1, #4]
   10f40:	cmp	r0, r5
   10f44:	beq	10f50 <__assert_fail@plt+0x3bc>
   10f48:	bl	10a14 <free@plt>
   10f4c:	str	r5, [r4, #8]
   10f50:	ldr	r3, [r4, #12]
   10f54:	sub	r3, r3, #1
   10f58:	str	r3, [r4, #12]
   10f5c:	pop	{r4, r5, r6, pc}
   10f60:	ldr	r3, [r0, #8]
   10f64:	cmp	r3, #0
   10f68:	bxne	lr
   10f6c:	ldr	r3, [r0, #12]
   10f70:	cmp	r3, #0
   10f74:	bxeq	lr
   10f78:	push	{r4, lr}
   10f7c:	mov	r1, #4
   10f80:	mov	r4, r0
   10f84:	mov	r0, r3
   10f88:	bl	1216c <error@@Base+0x3c>
   10f8c:	ldr	r3, [r4]
   10f90:	str	r0, [r4, #8]
   10f94:	sub	r0, r0, #4
   10f98:	cmp	r3, #0
   10f9c:	popeq	{r4, pc}
   10fa0:	str	r3, [r0, #4]!
   10fa4:	ldr	r3, [r3, #4]
   10fa8:	b	10f98 <__assert_fail@plt+0x404>
   10fac:	push	{r4, r5, r6, lr}
   10fb0:	mov	r5, r0
   10fb4:	mov	r6, r1
   10fb8:	ldr	r4, [r5]
   10fbc:	cmp	r4, #0
   10fc0:	popeq	{r4, r5, r6, pc}
   10fc4:	mov	r0, r5
   10fc8:	mov	r1, r4
   10fcc:	bl	10f04 <__assert_fail@plt+0x370>
   10fd0:	mov	r0, r4
   10fd4:	blx	r6
   10fd8:	b	10fb8 <__assert_fail@plt+0x424>
   10fdc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fe0:	mov	r8, r0
   10fe4:	mov	r9, r1
   10fe8:	ldr	sl, [pc, #248]	; 110e8 <__assert_fail@plt+0x554>
   10fec:	mov	r7, sl
   10ff0:	ldr	r3, [sl]
   10ff4:	mov	r4, r9
   10ff8:	mov	r5, r8
   10ffc:	ldr	fp, [r3, r8, lsl #2]
   11000:	cmp	r5, r4
   11004:	blt	11044 <__assert_fail@plt+0x4b0>
   11008:	ldr	r3, [r7]
   1100c:	sub	r1, r4, #1
   11010:	cmp	r8, r1
   11014:	str	fp, [r3, r4, lsl #2]
   11018:	bge	11024 <__assert_fail@plt+0x490>
   1101c:	mov	r0, r8
   11020:	bl	10fdc <__assert_fail@plt+0x448>
   11024:	add	r8, r5, #1
   11028:	cmp	r8, r9
   1102c:	blt	10ff0 <__assert_fail@plt+0x45c>
   11030:	add	sp, sp, #12
   11034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11038:	sub	r4, r4, #1
   1103c:	cmp	r5, r4
   11040:	beq	110e0 <__assert_fail@plt+0x54c>
   11044:	ldrd	r2, [r7]
   11048:	mov	r0, fp
   1104c:	ldr	r1, [r2, r4, lsl #2]
   11050:	blx	r3
   11054:	cmp	r0, #0
   11058:	blt	11038 <__assert_fail@plt+0x4a4>
   1105c:	cmp	r5, r4
   11060:	beq	110e0 <__assert_fail@plt+0x54c>
   11064:	ldr	r2, [r7]
   11068:	lsl	r3, r4, #2
   1106c:	add	r6, r5, #1
   11070:	ldr	r1, [r2, r4, lsl #2]
   11074:	str	r1, [r2, r5, lsl #2]
   11078:	cmp	r6, r4
   1107c:	lsl	r2, r6, #2
   11080:	ldr	r1, [r7]
   11084:	bge	110d4 <__assert_fail@plt+0x540>
   11088:	mov	r0, fp
   1108c:	ldr	r1, [r1, r6, lsl #2]
   11090:	str	r3, [sp]
   11094:	ldr	r5, [r7, #4]
   11098:	str	r2, [sp, #4]
   1109c:	blx	r5
   110a0:	cmp	r0, #0
   110a4:	ldr	r3, [sp]
   110a8:	ldr	r2, [sp, #4]
   110ac:	bgt	110cc <__assert_fail@plt+0x538>
   110b0:	ldr	r1, [r7]
   110b4:	sub	r5, r4, #1
   110b8:	ldr	r2, [r1, r2]
   110bc:	str	r2, [r1, r3]
   110c0:	mov	r4, r5
   110c4:	mov	r5, r6
   110c8:	b	11000 <__assert_fail@plt+0x46c>
   110cc:	add	r6, r6, #1
   110d0:	b	11078 <__assert_fail@plt+0x4e4>
   110d4:	moveq	r5, r6
   110d8:	bne	110b0 <__assert_fail@plt+0x51c>
   110dc:	b	110c0 <__assert_fail@plt+0x52c>
   110e0:	mov	r6, r5
   110e4:	b	110c0 <__assert_fail@plt+0x52c>
   110e8:	ldrdeq	r7, [r2], -r4
   110ec:	cmp	r0, #1
   110f0:	bxle	lr
   110f4:	ldr	r3, [pc, #12]	; 11108 <__assert_fail@plt+0x574>
   110f8:	stm	r3, {r1, r2}
   110fc:	sub	r1, r0, #1
   11100:	mov	r0, #0
   11104:	b	10fdc <__assert_fail@plt+0x448>
   11108:	ldrdeq	r7, [r2], -r4
   1110c:	andeq	r0, r0, r0
   11110:	mov	r2, r0
   11114:	push	{r4, lr}
   11118:	mov	r1, #99	; 0x63
   1111c:	ldr	r0, [pc, #12]	; 11130 <__assert_fail@plt+0x59c>
   11120:	bl	10a2c <fgets@plt>
   11124:	adds	r0, r0, #0
   11128:	movne	r0, #1
   1112c:	pop	{r4, pc}
   11130:	ldrdeq	r7, [r2], -ip
   11134:	push	{r4, lr}
   11138:	mov	r4, r1
   1113c:	bl	11110 <__assert_fail@plt+0x57c>
   11140:	cmp	r0, #0
   11144:	popeq	{r4, pc}
   11148:	mov	r2, r4
   1114c:	ldr	r1, [pc, #20]	; 11168 <__assert_fail@plt+0x5d4>
   11150:	ldr	r0, [pc, #20]	; 1116c <__assert_fail@plt+0x5d8>
   11154:	bl	10b10 <__isoc99_sscanf@plt>
   11158:	sub	r0, r0, #1
   1115c:	clz	r0, r0
   11160:	lsr	r0, r0, #5
   11164:	pop	{r4, pc}
   11168:	andeq	r2, r1, r4, lsl fp
   1116c:	ldrdeq	r7, [r2], -ip
   11170:	ldr	r2, [r1]
   11174:	cmp	r2, #0
   11178:	bne	11188 <__assert_fail@plt+0x5f4>
   1117c:	mov	r1, r0
   11180:	ldr	r0, [pc, #56]	; 111c0 <__assert_fail@plt+0x62c>
   11184:	b	10b64 <fputs@plt>
   11188:	ldr	r3, [r1, #4]
   1118c:	vldr	d6, [pc, #36]	; 111b8 <__assert_fail@plt+0x624>
   11190:	ldr	r1, [pc, #44]	; 111c4 <__assert_fail@plt+0x630>
   11194:	sub	r3, r2, r3
   11198:	vmov	s14, r3
   1119c:	vcvt.f64.s32	d7, s14
   111a0:	vmul.f64	d7, d7, d6
   111a4:	vmov	s13, r2
   111a8:	vcvt.f64.s32	d6, s13
   111ac:	vdiv.f64	d7, d7, d6
   111b0:	vmov	r2, r3, d7
   111b4:	b	10b04 <fprintf@plt>
   111b8:	andeq	r0, r0, r0
   111bc:	subsmi	r0, r9, r0
   111c0:			; <UNDEFINED> instruction: 0x00012ab2
   111c4:			; <UNDEFINED> instruction: 0x00012abb
   111c8:	push	{r4, r5, r6, lr}
   111cc:	subs	r5, r1, #0
   111d0:	mov	r4, r0
   111d4:	beq	11200 <__assert_fail@plt+0x66c>
   111d8:	ldr	r1, [pc, #48]	; 11210 <__assert_fail@plt+0x67c>
   111dc:	ldrd	r2, [r5]
   111e0:	bl	10b04 <fprintf@plt>
   111e4:	mov	r1, r5
   111e8:	mov	r0, r4
   111ec:	bl	11170 <__assert_fail@plt+0x5dc>
   111f0:	mov	r1, r4
   111f4:	ldr	r0, [pc, #24]	; 11214 <__assert_fail@plt+0x680>
   111f8:	pop	{r4, r5, r6, lr}
   111fc:	b	10b64 <fputs@plt>
   11200:	mov	r1, r0
   11204:	ldr	r0, [pc, #12]	; 11218 <__assert_fail@plt+0x684>
   11208:	bl	10b64 <fputs@plt>
   1120c:	b	111f0 <__assert_fail@plt+0x65c>
   11210:	andeq	r2, r1, r1, asr #21
   11214:	andeq	r2, r1, r7, ror #21
   11218:	andeq	r2, r1, ip, asr #21
   1121c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11220:	mov	r4, r0
   11224:	mov	r6, r1
   11228:	mov	r7, r2
   1122c:	mov	r2, r3
   11230:	mov	r5, #1
   11234:	ldr	r1, [pc, #196]	; 11300 <__assert_fail@plt+0x76c>
   11238:	ldrb	r8, [sp, #32]
   1123c:	ldrb	r9, [sp, #36]	; 0x24
   11240:	bl	10b04 <fprintf@plt>
   11244:	mov	r1, #0
   11248:	mov	r0, r4
   1124c:	ldr	sl, [pc, #176]	; 11304 <__assert_fail@plt+0x770>
   11250:	bl	111c8 <__assert_fail@plt+0x634>
   11254:	ldr	r3, [pc, #172]	; 11308 <__assert_fail@plt+0x774>
   11258:	cmp	r8, #0
   1125c:	mov	r0, r4
   11260:	ldr	r2, [pc, #164]	; 1130c <__assert_fail@plt+0x778>
   11264:	ldr	r1, [pc, #164]	; 11310 <__assert_fail@plt+0x77c>
   11268:	moveq	r2, r3
   1126c:	bl	10b04 <fprintf@plt>
   11270:	ldr	r3, [r6, r5, lsl #3]
   11274:	add	r1, r6, r5, lsl #3
   11278:	cmp	r3, #0
   1127c:	ble	11298 <__assert_fail@plt+0x704>
   11280:	mov	r0, r4
   11284:	bl	111c8 <__assert_fail@plt+0x634>
   11288:	mov	r2, r5
   1128c:	mov	r1, sl
   11290:	mov	r0, r4
   11294:	bl	10b04 <fprintf@plt>
   11298:	add	r5, r5, #1
   1129c:	sxth	r3, r5
   112a0:	cmp	r7, r3
   112a4:	bge	11270 <__assert_fail@plt+0x6dc>
   112a8:	cmp	r8, #0
   112ac:	beq	112dc <__assert_fail@plt+0x748>
   112b0:	add	r3, r7, #1
   112b4:	add	r1, r6, r3, lsl #3
   112b8:	ldr	r3, [r6, r3, lsl #3]
   112bc:	cmp	r3, #0
   112c0:	ble	112dc <__assert_fail@plt+0x748>
   112c4:	mov	r0, r4
   112c8:	bl	111c8 <__assert_fail@plt+0x634>
   112cc:	mov	r2, r7
   112d0:	ldr	r1, [pc, #60]	; 11314 <__assert_fail@plt+0x780>
   112d4:	mov	r0, r4
   112d8:	bl	10b04 <fprintf@plt>
   112dc:	cmp	r9, #0
   112e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   112e4:	mov	r1, r6
   112e8:	mov	r0, r4
   112ec:	bl	111c8 <__assert_fail@plt+0x634>
   112f0:	mov	r1, r4
   112f4:	ldr	r0, [pc, #28]	; 11318 <__assert_fail@plt+0x784>
   112f8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   112fc:	b	10b64 <fputs@plt>
   11300:	strdeq	r2, [r1], -r9
   11304:	strdeq	r2, [r1], -lr
   11308:	strdeq	r2, [r1], -r2	; <UNPREDICTABLE>
   1130c:	andeq	r2, r1, fp, ror #21
   11310:	strdeq	r2, [r1], -sl
   11314:	andeq	r2, r1, r7, lsl #22
   11318:	andeq	r2, r1, lr, ror #20
   1131c:	push	{r4, r5, r6, r7, r8, lr}
   11320:	mov	r4, r1
   11324:	mov	r6, r0
   11328:	add	r4, r4, #4096	; 0x1000
   1132c:	mov	r0, r1
   11330:	mov	r5, r2
   11334:	ldr	r7, [pc, #124]	; 113b8 <__assert_fail@plt+0x824>
   11338:	bl	119b8 <__assert_fail@plt+0xe24>
   1133c:	ldr	r2, [pc, #120]	; 113bc <__assert_fail@plt+0x828>
   11340:	ldr	r1, [r4, #3952]	; 0xf70
   11344:	ldr	r0, [r4, #3956]	; 0xf74
   11348:	bl	110ec <__assert_fail@plt+0x558>
   1134c:	mov	r2, r5
   11350:	ldr	r1, [pc, #104]	; 113c0 <__assert_fail@plt+0x82c>
   11354:	mov	r0, r6
   11358:	bl	10b04 <fprintf@plt>
   1135c:	mov	r1, #0
   11360:	mov	r0, r6
   11364:	bl	111c8 <__assert_fail@plt+0x634>
   11368:	mov	r5, #0
   1136c:	mov	r1, r6
   11370:	mov	r0, #10
   11374:	bl	10b34 <fputc@plt>
   11378:	ldr	r3, [r4, #3956]	; 0xf74
   1137c:	cmp	r3, r5
   11380:	pople	{r4, r5, r6, r7, r8, pc}
   11384:	mov	r0, r6
   11388:	ldr	r3, [r4, #3952]	; 0xf70
   1138c:	ldr	r1, [r3, r5, lsl #2]
   11390:	add	r1, r1, #12
   11394:	bl	111c8 <__assert_fail@plt+0x634>
   11398:	ldr	r3, [r4, #3952]	; 0xf70
   1139c:	mov	r1, r7
   113a0:	mov	r0, r6
   113a4:	ldr	r3, [r3, r5, lsl #2]
   113a8:	add	r5, r5, #1
   113ac:	ldr	r2, [r3, #8]
   113b0:	bl	10b04 <fprintf@plt>
   113b4:	b	11378 <__assert_fail@plt+0x7e4>
   113b8:	strdeq	r2, [r1], -sl
   113bc:	andeq	r1, r1, r4, asr #7
   113c0:	strdeq	r2, [r1], -r9
   113c4:	ldr	r0, [r0, #8]
   113c8:	ldr	r1, [r1, #8]
   113cc:	b	11fdc <__assert_fail@plt+0x1448>
   113d0:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   113d4:	mov	r7, r0
   113d8:	mov	r5, r1
   113dc:	bl	11110 <__assert_fail@plt+0x57c>
   113e0:	cmp	r0, #0
   113e4:	bne	113f8 <__assert_fail@plt+0x864>
   113e8:	mov	r4, #0
   113ec:	mov	r0, r4
   113f0:	add	sp, sp, #8
   113f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   113f8:	mov	r0, r7
   113fc:	bl	11110 <__assert_fail@plt+0x57c>
   11400:	cmp	r0, #0
   11404:	beq	113e8 <__assert_fail@plt+0x854>
   11408:	ldr	r6, [pc, #136]	; 11498 <__assert_fail@plt+0x904>
   1140c:	mov	r4, #0
   11410:	ldr	r9, [pc, #132]	; 1149c <__assert_fail@plt+0x908>
   11414:	add	r8, r6, #29
   11418:	b	11468 <__assert_fail@plt+0x8d4>
   1141c:	mov	r0, r8
   11420:	bl	10b4c <atoi@plt>
   11424:	subs	r3, r0, #0
   11428:	ldr	sl, [sp]
   1142c:	bne	11448 <__assert_fail@plt+0x8b4>
   11430:	ldr	r1, [pc, #104]	; 114a0 <__assert_fail@plt+0x90c>
   11434:	mov	r0, r8
   11438:	bl	109f0 <strcmp@plt>
   1143c:	subs	r3, r0, #0
   11440:	moveq	r4, sl
   11444:	movne	r3, #11
   11448:	ldr	r2, [r5, r3, lsl #3]
   1144c:	add	r1, r5, r3, lsl #3
   11450:	add	r2, r2, sl
   11454:	str	r2, [r5, r3, lsl #3]
   11458:	ldr	r3, [r1, #4]
   1145c:	ldr	r2, [sp, #4]
   11460:	add	r3, r3, r2
   11464:	str	r3, [r1, #4]
   11468:	mov	r0, r7
   1146c:	bl	11110 <__assert_fail@plt+0x57c>
   11470:	cmp	r0, #0
   11474:	beq	113ec <__assert_fail@plt+0x858>
   11478:	add	r3, sp, #4
   1147c:	mov	r2, sp
   11480:	mov	r1, r9
   11484:	mov	r0, r6
   11488:	bl	10b10 <__isoc99_sscanf@plt>
   1148c:	cmp	r0, #2
   11490:	beq	1141c <__assert_fail@plt+0x888>
   11494:	b	113ec <__assert_fail@plt+0x858>
   11498:	ldrdeq	r7, [r2], -ip
   1149c:	andeq	r2, r1, r0, lsl fp
   114a0:	andeq	r2, r1, lr, ror #20
   114a4:	ldr	r3, [r0]
   114a8:	add	r1, r3, r1
   114ac:	ldr	r3, [r0, #4]
   114b0:	add	r2, r3, r2
   114b4:	stm	r0, {r1, r2}
   114b8:	bx	lr
   114bc:	push	{r4, r5, r6, r7, r8, lr}
   114c0:	mov	r7, r0
   114c4:	mov	r8, r1
   114c8:	mov	r6, r2
   114cc:	mov	r5, r3
   114d0:	bl	118ec <__assert_fail@plt+0xd58>
   114d4:	subs	r4, r0, #0
   114d8:	bne	11504 <__assert_fail@plt+0x970>
   114dc:	mov	r1, #20
   114e0:	mov	r0, #1
   114e4:	bl	1216c <error@@Base+0x3c>
   114e8:	mov	r4, r0
   114ec:	mov	r0, r8
   114f0:	bl	10a44 <strdup@plt>
   114f4:	mov	r1, r4
   114f8:	str	r0, [r4, #8]
   114fc:	mov	r0, r7
   11500:	bl	11930 <__assert_fail@plt+0xd9c>
   11504:	ldrd	r2, [r4, #12]
   11508:	add	r2, r2, r6
   1150c:	add	r3, r3, r5
   11510:	strd	r2, [r4, #12]
   11514:	pop	{r4, r5, r6, r7, r8, pc}
   11518:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1151c:	mov	r5, r0
   11520:	mov	r7, r1
   11524:	bl	11110 <__assert_fail@plt+0x57c>
   11528:	cmp	r0, #0
   1152c:	beq	11578 <__assert_fail@plt+0x9e4>
   11530:	mov	r0, r5
   11534:	bl	11110 <__assert_fail@plt+0x57c>
   11538:	cmp	r0, #0
   1153c:	beq	11578 <__assert_fail@plt+0x9e4>
   11540:	ldr	r4, [pc, #100]	; 115ac <__assert_fail@plt+0xa18>
   11544:	ldr	r6, [pc, #100]	; 115b0 <__assert_fail@plt+0xa1c>
   11548:	add	r8, r4, #29
   1154c:	mov	r0, r5
   11550:	bl	11110 <__assert_fail@plt+0x57c>
   11554:	cmp	r0, #0
   11558:	beq	11578 <__assert_fail@plt+0x9e4>
   1155c:	add	r3, sp, #4
   11560:	mov	r2, sp
   11564:	ldr	r0, [pc, #64]	; 115ac <__assert_fail@plt+0xa18>
   11568:	mov	r1, r6
   1156c:	bl	10b10 <__isoc99_sscanf@plt>
   11570:	cmp	r0, #2
   11574:	beq	11580 <__assert_fail@plt+0x9ec>
   11578:	add	sp, sp, #8
   1157c:	pop	{r4, r5, r6, r7, r8, pc}
   11580:	mov	r0, r4
   11584:	bl	10af8 <strlen@plt>
   11588:	add	r0, r4, r0
   1158c:	mov	r3, #0
   11590:	ldr	r2, [sp]
   11594:	mov	r1, r8
   11598:	strb	r3, [r0, #-1]
   1159c:	mov	r0, r7
   115a0:	ldr	r3, [sp, #4]
   115a4:	bl	114bc <__assert_fail@plt+0x928>
   115a8:	b	1154c <__assert_fail@plt+0x9b8>
   115ac:	ldrdeq	r7, [r2], -ip
   115b0:	andeq	r2, r1, r0, lsl fp
   115b4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   115b8:	mov	r6, r1
   115bc:	mov	r5, r0
   115c0:	mov	r0, r6
   115c4:	ldr	r1, [pc, #328]	; 11714 <__assert_fail@plt+0xb80>
   115c8:	bl	121f4 <error@@Base+0xc4>
   115cc:	mov	r4, r0
   115d0:	bl	11110 <__assert_fail@plt+0x57c>
   115d4:	cmp	r0, #0
   115d8:	beq	11700 <__assert_fail@plt+0xb6c>
   115dc:	mov	r2, #45	; 0x2d
   115e0:	ldr	r1, [pc, #304]	; 11718 <__assert_fail@plt+0xb84>
   115e4:	ldr	r0, [pc, #304]	; 1171c <__assert_fail@plt+0xb88>
   115e8:	bl	10b70 <strncmp@plt>
   115ec:	cmp	r0, #0
   115f0:	bne	11700 <__assert_fail@plt+0xb6c>
   115f4:	mov	r0, r4
   115f8:	bl	11110 <__assert_fail@plt+0x57c>
   115fc:	cmp	r0, #0
   11600:	beq	11700 <__assert_fail@plt+0xb6c>
   11604:	ldr	r1, [pc, #276]	; 11720 <__assert_fail@plt+0xb8c>
   11608:	ldr	r0, [pc, #268]	; 1171c <__assert_fail@plt+0xb88>
   1160c:	bl	109f0 <strcmp@plt>
   11610:	cmp	r0, #0
   11614:	bne	11700 <__assert_fail@plt+0xb6c>
   11618:	mov	r1, sp
   1161c:	mov	r0, r4
   11620:	bl	11134 <__assert_fail@plt+0x5a0>
   11624:	cmp	r0, #0
   11628:	beq	11700 <__assert_fail@plt+0xb6c>
   1162c:	add	r1, sp, #4
   11630:	mov	r0, r4
   11634:	bl	11134 <__assert_fail@plt+0x5a0>
   11638:	cmp	r0, #0
   1163c:	beq	11700 <__assert_fail@plt+0xb6c>
   11640:	mov	r0, r4
   11644:	bl	11110 <__assert_fail@plt+0x57c>
   11648:	cmp	r0, #0
   1164c:	beq	11700 <__assert_fail@plt+0xb6c>
   11650:	mov	r0, r4
   11654:	bl	11110 <__assert_fail@plt+0x57c>
   11658:	cmp	r0, #0
   1165c:	beq	11700 <__assert_fail@plt+0xb6c>
   11660:	ldr	r3, [r5]
   11664:	add	r1, r5, #8
   11668:	mov	r0, r4
   1166c:	ldr	r2, [sp]
   11670:	add	r3, r3, r2
   11674:	ldr	r2, [sp, #4]
   11678:	str	r3, [r5]
   1167c:	ldr	r3, [r5, #4]
   11680:	add	r3, r3, r2
   11684:	str	r3, [r5, #4]
   11688:	bl	113d0 <__assert_fail@plt+0x83c>
   1168c:	mov	r7, r0
   11690:	add	r1, r5, #416	; 0x1a0
   11694:	mov	r0, r4
   11698:	bl	113d0 <__assert_fail@plt+0x83c>
   1169c:	mov	r6, r0
   116a0:	add	r1, r5, #824	; 0x338
   116a4:	mov	r0, r4
   116a8:	bl	113d0 <__assert_fail@plt+0x83c>
   116ac:	ldr	r3, [sp]
   116b0:	cmp	r3, #0
   116b4:	ble	116f0 <__assert_fail@plt+0xb5c>
   116b8:	add	r1, r5, #920	; 0x398
   116bc:	mov	r0, r4
   116c0:	bl	113d0 <__assert_fail@plt+0x83c>
   116c4:	cmp	r7, #0
   116c8:	ble	116d8 <__assert_fail@plt+0xb44>
   116cc:	add	r1, r5, #992	; 0x3e0
   116d0:	mov	r0, r4
   116d4:	bl	11518 <__assert_fail@plt+0x984>
   116d8:	cmp	r6, #0
   116dc:	ble	116f0 <__assert_fail@plt+0xb5c>
   116e0:	add	r1, r5, #9024	; 0x2340
   116e4:	mov	r0, r4
   116e8:	add	r1, r1, #24
   116ec:	bl	11518 <__assert_fail@plt+0x984>
   116f0:	mov	r0, r4
   116f4:	bl	12018 <__assert_fail@plt+0x1484>
   116f8:	add	sp, sp, #12
   116fc:	pop	{r4, r5, r6, r7, pc}
   11700:	cmp	r6, #0
   11704:	ldr	r1, [pc, #24]	; 11724 <__assert_fail@plt+0xb90>
   11708:	movne	r1, r6
   1170c:	ldr	r0, [pc, #20]	; 11728 <__assert_fail@plt+0xb94>
   11710:	bl	121b4 <error@@Base+0x84>
   11714:	muleq	r1, r9, r0
   11718:	andeq	r2, r1, lr, lsl fp
   1171c:	ldrdeq	r7, [r2], -ip
   11720:	andeq	r6, r1, r3, asr r0
   11724:	andeq	r2, r1, r8, lsl fp
   11728:	andeq	r2, r1, lr, asr #22
   1172c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   11730:	mov	r4, r0
   11734:	mov	r0, r1
   11738:	mov	r7, #1
   1173c:	mov	r6, #0
   11740:	ldr	r1, [pc, #268]	; 11854 <__assert_fail@plt+0xcc0>
   11744:	bl	121f4 <error@@Base+0xc4>
   11748:	mov	r5, r0
   1174c:	ldr	r3, [pc, #260]	; 11858 <__assert_fail@plt+0xcc4>
   11750:	ldr	r2, [pc, #260]	; 1185c <__assert_fail@plt+0xcc8>
   11754:	ldr	r1, [pc, #260]	; 11860 <__assert_fail@plt+0xccc>
   11758:	bl	10b04 <fprintf@plt>
   1175c:	ldr	r1, [pc, #256]	; 11864 <__assert_fail@plt+0xcd0>
   11760:	mov	r0, r5
   11764:	ldr	r2, [r4]
   11768:	bl	10b04 <fprintf@plt>
   1176c:	ldr	r1, [pc, #244]	; 11868 <__assert_fail@plt+0xcd4>
   11770:	mov	r0, r5
   11774:	ldr	r2, [r4, #4]
   11778:	bl	10b04 <fprintf@plt>
   1177c:	mov	r1, r4
   11780:	mov	r0, r5
   11784:	bl	11170 <__assert_fail@plt+0x5dc>
   11788:	mov	r1, r5
   1178c:	ldr	r0, [pc, #216]	; 1186c <__assert_fail@plt+0xcd8>
   11790:	bl	10b64 <fputs@plt>
   11794:	ldr	r3, [pc, #212]	; 11870 <__assert_fail@plt+0xcdc>
   11798:	mov	r2, #50	; 0x32
   1179c:	add	r1, r4, #8
   117a0:	mov	r0, r5
   117a4:	strd	r6, [sp]
   117a8:	bl	1121c <__assert_fail@plt+0x688>
   117ac:	ldr	r3, [pc, #192]	; 11874 <__assert_fail@plt+0xce0>
   117b0:	mov	r2, #50	; 0x32
   117b4:	add	r1, r4, #416	; 0x1a0
   117b8:	mov	r0, r5
   117bc:	strd	r6, [sp]
   117c0:	bl	1121c <__assert_fail@plt+0x688>
   117c4:	ldr	r3, [pc, #172]	; 11878 <__assert_fail@plt+0xce4>
   117c8:	mov	r2, #10
   117cc:	add	r1, r4, #824	; 0x338
   117d0:	mov	r0, r5
   117d4:	str	r7, [sp]
   117d8:	str	r7, [sp, #4]
   117dc:	bl	1121c <__assert_fail@plt+0x688>
   117e0:	ldr	r3, [r4]
   117e4:	cmp	r3, r6
   117e8:	ble	11844 <__assert_fail@plt+0xcb0>
   117ec:	ldr	r3, [pc, #136]	; 1187c <__assert_fail@plt+0xce8>
   117f0:	mov	r2, #8
   117f4:	add	r1, r4, #920	; 0x398
   117f8:	mov	r0, r5
   117fc:	str	r6, [sp]
   11800:	str	r6, [sp, #4]
   11804:	bl	1121c <__assert_fail@plt+0x688>
   11808:	ldr	r3, [r4, #8]
   1180c:	cmp	r3, r6
   11810:	ble	11824 <__assert_fail@plt+0xc90>
   11814:	ldr	r2, [pc, #84]	; 11870 <__assert_fail@plt+0xcdc>
   11818:	add	r1, r4, #992	; 0x3e0
   1181c:	mov	r0, r5
   11820:	bl	1131c <__assert_fail@plt+0x788>
   11824:	ldr	r3, [r4, #416]	; 0x1a0
   11828:	cmp	r3, #0
   1182c:	ble	11844 <__assert_fail@plt+0xcb0>
   11830:	add	r1, r4, #9024	; 0x2340
   11834:	ldr	r2, [pc, #56]	; 11874 <__assert_fail@plt+0xce0>
   11838:	mov	r0, r5
   1183c:	add	r1, r1, #24
   11840:	bl	1131c <__assert_fail@plt+0x788>
   11844:	mov	r0, r5
   11848:	add	sp, sp, #12
   1184c:	pop	{r4, r5, r6, r7, lr}
   11850:	b	12018 <__assert_fail@plt+0x1484>
   11854:	andeq	r2, r1, r0, ror #22
   11858:	andeq	r6, r1, r3, asr r0
   1185c:	andeq	r2, r1, lr, lsl fp
   11860:	andeq	r2, r1, r2, ror #22
   11864:	andeq	r2, r1, r7, ror #22
   11868:	andeq	r2, r1, r5, ror fp
   1186c:	andeq	r2, r1, fp, lsl #23
   11870:	muleq	r1, r8, fp
   11874:	andeq	r2, r1, fp, lsr #23
   11878:	andeq	r2, r1, r2, lsr #23
   1187c:			; <UNDEFINED> instruction: 0x00012bb9
   11880:	sub	r0, r0, #1
   11884:	mov	r3, #0
   11888:	ldrb	r2, [r0, #1]!
   1188c:	cmp	r2, #0
   11890:	bne	118a8 <__assert_fail@plt+0xd14>
   11894:	movw	r2, #503	; 0x1f7
   11898:	udiv	r0, r3, r2
   1189c:	mls	r0, r2, r0, r3
   118a0:	sxth	r0, r0
   118a4:	bx	lr
   118a8:	add	r3, r3, r2
   118ac:	b	11888 <__assert_fail@plt+0xcf4>
   118b0:	push	{r4, r5, r6, lr}
   118b4:	add	r6, r0, #8000	; 0x1f40
   118b8:	mov	r4, r0
   118bc:	mov	r5, r0
   118c0:	add	r6, r6, #48	; 0x30
   118c4:	mov	r0, r5
   118c8:	add	r5, r5, #16
   118cc:	bl	10eb4 <__assert_fail@plt+0x320>
   118d0:	cmp	r5, r6
   118d4:	bne	118c4 <__assert_fail@plt+0xd30>
   118d8:	add	r4, r4, #4096	; 0x1000
   118dc:	mov	r3, #0
   118e0:	str	r3, [r4, #3952]	; 0xf70
   118e4:	str	r3, [r4, #3956]	; 0xf74
   118e8:	pop	{r4, r5, r6, pc}
   118ec:	push	{r4, r5, r6, lr}
   118f0:	mov	r4, r0
   118f4:	mov	r0, r1
   118f8:	mov	r5, r1
   118fc:	bl	11880 <__assert_fail@plt+0xcec>
   11900:	ldr	r4, [r4, r0, lsl #4]
   11904:	cmp	r4, #0
   11908:	beq	11920 <__assert_fail@plt+0xd8c>
   1190c:	mov	r0, r5
   11910:	ldr	r1, [r4, #8]
   11914:	bl	109f0 <strcmp@plt>
   11918:	cmp	r0, #0
   1191c:	bne	11928 <__assert_fail@plt+0xd94>
   11920:	mov	r0, r4
   11924:	pop	{r4, r5, r6, pc}
   11928:	ldr	r4, [r4, #4]
   1192c:	b	11904 <__assert_fail@plt+0xd70>
   11930:	push	{r4, lr}
   11934:	mov	r4, r0
   11938:	ldr	r0, [r1, #8]
   1193c:	bl	11880 <__assert_fail@plt+0xcec>
   11940:	add	r0, r4, r0, lsl #4
   11944:	add	r4, r4, #4096	; 0x1000
   11948:	bl	10ecc <__assert_fail@plt+0x338>
   1194c:	ldr	r0, [r4, #3952]	; 0xf70
   11950:	cmp	r0, #0
   11954:	beq	11964 <__assert_fail@plt+0xdd0>
   11958:	bl	10a14 <free@plt>
   1195c:	mov	r3, #0
   11960:	str	r3, [r4, #3952]	; 0xf70
   11964:	ldr	r3, [r4, #3956]	; 0xf74
   11968:	add	r3, r3, #1
   1196c:	str	r3, [r4, #3956]	; 0xf74
   11970:	pop	{r4, pc}
   11974:	push	{r4, lr}
   11978:	mov	r4, r0
   1197c:	ldr	r0, [r1, #8]
   11980:	bl	11880 <__assert_fail@plt+0xcec>
   11984:	add	r0, r4, r0, lsl #4
   11988:	add	r4, r4, #4096	; 0x1000
   1198c:	bl	10f04 <__assert_fail@plt+0x370>
   11990:	ldr	r0, [r4, #3952]	; 0xf70
   11994:	cmp	r0, #0
   11998:	beq	119a8 <__assert_fail@plt+0xe14>
   1199c:	bl	10a14 <free@plt>
   119a0:	mov	r3, #0
   119a4:	str	r3, [r4, #3952]	; 0xf70
   119a8:	ldr	r3, [r4, #3956]	; 0xf74
   119ac:	sub	r3, r3, #1
   119b0:	str	r3, [r4, #3956]	; 0xf74
   119b4:	pop	{r4, pc}
   119b8:	push	{r4, r5, r6, lr}
   119bc:	add	r6, r0, #4096	; 0x1000
   119c0:	ldr	r4, [r6, #3952]	; 0xf70
   119c4:	cmp	r4, #0
   119c8:	popne	{r4, r5, r6, pc}
   119cc:	ldr	r3, [r6, #3956]	; 0xf74
   119d0:	cmp	r3, #0
   119d4:	popeq	{r4, r5, r6, pc}
   119d8:	mov	r5, r0
   119dc:	mov	r1, #4
   119e0:	mov	r0, r3
   119e4:	bl	1216c <error@@Base+0x3c>
   119e8:	mov	r3, r4
   119ec:	mov	r2, r4
   119f0:	str	r0, [r6, #3952]	; 0xf70
   119f4:	movw	lr, #503	; 0x1f7
   119f8:	ldr	r1, [r5, r2, lsl #4]
   119fc:	mov	ip, r3
   11a00:	cmp	r1, #0
   11a04:	mov	r3, ip
   11a08:	bne	11a1c <__assert_fail@plt+0xe88>
   11a0c:	add	r2, r2, #1
   11a10:	cmp	r2, lr
   11a14:	bne	119f8 <__assert_fail@plt+0xe64>
   11a18:	pop	{r4, r5, r6, pc}
   11a1c:	str	r1, [r0, ip, lsl #2]
   11a20:	add	ip, ip, #1
   11a24:	ldr	r1, [r1, #4]
   11a28:	b	11a00 <__assert_fail@plt+0xe6c>
   11a2c:	push	{r4, r5, r6, r7, r8, lr}
   11a30:	add	r6, r0, #8000	; 0x1f40
   11a34:	mov	r4, r0
   11a38:	mov	r7, r1
   11a3c:	mov	r5, r0
   11a40:	add	r6, r6, #48	; 0x30
   11a44:	mov	r0, r5
   11a48:	mov	r1, r7
   11a4c:	add	r5, r5, #16
   11a50:	bl	10fac <__assert_fail@plt+0x418>
   11a54:	cmp	r5, r6
   11a58:	bne	11a44 <__assert_fail@plt+0xeb0>
   11a5c:	add	r4, r4, #4096	; 0x1000
   11a60:	ldr	r0, [r4, #3952]	; 0xf70
   11a64:	cmp	r0, #0
   11a68:	beq	11a78 <__assert_fail@plt+0xee4>
   11a6c:	bl	10a14 <free@plt>
   11a70:	mov	r3, #0
   11a74:	str	r3, [r4, #3952]	; 0xf70
   11a78:	mov	r3, #0
   11a7c:	str	r3, [r4, #3956]	; 0xf74
   11a80:	pop	{r4, r5, r6, r7, r8, pc}
   11a84:	cmp	r0, #0
   11a88:	beq	11aec <__assert_fail@plt+0xf58>
   11a8c:	push	{r4, r5, lr}
   11a90:	mov	r2, #0
   11a94:	movw	r1, #1092	; 0x444
   11a98:	mov	r5, #12
   11a9c:	ldr	lr, [pc, #80]	; 11af4 <__assert_fail@plt+0xf60>
   11aa0:	ldr	ip, [r0, #12]
   11aa4:	sub	r3, r1, r2
   11aa8:	add	r3, r2, r3, lsr #1
   11aac:	mul	r4, r5, r3
   11ab0:	add	r0, lr, r4
   11ab4:	ldr	r4, [lr, r4]
   11ab8:	cmp	ip, r4
   11abc:	subcc	r1, r3, #1
   11ac0:	bcc	11ad4 <__assert_fail@plt+0xf40>
   11ac4:	ldr	r2, [r0, #4]
   11ac8:	cmp	ip, r2
   11acc:	bls	11ae4 <__assert_fail@plt+0xf50>
   11ad0:	add	r2, r3, #1
   11ad4:	cmp	r1, r2
   11ad8:	bcs	11aa4 <__assert_fail@plt+0xf10>
   11adc:	mov	r0, #0
   11ae0:	pop	{r4, r5, pc}
   11ae4:	ldr	r0, [r0, #8]
   11ae8:	pop	{r4, r5, pc}
   11aec:	mov	r0, #18
   11af0:	bx	lr
   11af4:	andeq	r2, r1, r8, ror #23
   11af8:	push	{r4, lr}
   11afc:	mov	r4, r0
   11b00:	ldr	r4, [r4, #4]
   11b04:	cmp	r4, #0
   11b08:	beq	11b20 <__assert_fail@plt+0xf8c>
   11b0c:	mov	r0, r4
   11b10:	bl	11a84 <__assert_fail@plt+0xef0>
   11b14:	bic	r0, r0, #2
   11b18:	cmp	r0, #4
   11b1c:	beq	11b00 <__assert_fail@plt+0xf6c>
   11b20:	mov	r0, r4
   11b24:	pop	{r4, pc}
   11b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11b2c:	mov	sl, r0
   11b30:	sub	sp, sp, #20
   11b34:	ldr	fp, [pc, #960]	; 11efc <__assert_fail@plt+0x1368>
   11b38:	ldr	r7, [r1]
   11b3c:	cmp	r7, #0
   11b40:	str	r7, [sp, #4]
   11b44:	beq	11e94 <__assert_fail@plt+0x1300>
   11b48:	mov	r9, #17
   11b4c:	mov	r6, sp
   11b50:	mov	r0, r6
   11b54:	bl	11af8 <__assert_fail@plt+0xf64>
   11b58:	mov	r6, r0
   11b5c:	bl	11a84 <__assert_fail@plt+0xef0>
   11b60:	cmp	r6, #0
   11b64:	mov	r4, r0
   11b68:	moveq	r8, r6
   11b6c:	beq	11b7c <__assert_fail@plt+0xfe8>
   11b70:	mov	r0, r6
   11b74:	bl	11af8 <__assert_fail@plt+0xf64>
   11b78:	mov	r8, r0
   11b7c:	mov	r0, r8
   11b80:	bl	11a84 <__assert_fail@plt+0xef0>
   11b84:	cmp	r8, #0
   11b88:	mov	r5, r0
   11b8c:	beq	11b9c <__assert_fail@plt+0x1008>
   11b90:	mov	r0, r8
   11b94:	bl	11af8 <__assert_fail@plt+0xf64>
   11b98:	mov	r8, r0
   11b9c:	mov	r0, r8
   11ba0:	bl	11a84 <__assert_fail@plt+0xef0>
   11ba4:	sub	r3, r5, #2
   11ba8:	cmp	r4, #1
   11bac:	cmpeq	r5, #2
   11bb0:	clz	r3, r3
   11bb4:	sub	r2, r4, #1
   11bb8:	lsr	r3, r3, #5
   11bbc:	beq	11eb0 <__assert_fail@plt+0x131c>
   11bc0:	cmp	r2, #2
   11bc4:	bls	11e8c <__assert_fail@plt+0x12f8>
   11bc8:	bic	ip, r5, #2
   11bcc:	cmp	ip, #1
   11bd0:	orreq	r3, r3, #1
   11bd4:	cmp	r3, #0
   11bd8:	bne	11e8c <__assert_fail@plt+0x12f8>
   11bdc:	sub	r3, r4, #8
   11be0:	cmp	r3, #1
   11be4:	bhi	11c10 <__assert_fail@plt+0x107c>
   11be8:	sub	r2, r5, #8
   11bec:	cmp	r2, #1
   11bf0:	bls	11dc0 <__assert_fail@plt+0x122c>
   11bf4:	sub	r2, r5, #12
   11bf8:	cmp	r5, #10
   11bfc:	cmpne	r2, #1
   11c00:	bhi	11c10 <__assert_fail@plt+0x107c>
   11c04:	sub	r2, r0, #8
   11c08:	cmp	r2, #1
   11c0c:	bls	11dc0 <__assert_fail@plt+0x122c>
   11c10:	sub	r2, r9, #8
   11c14:	cmp	r2, #1
   11c18:	bhi	11c38 <__assert_fail@plt+0x10a4>
   11c1c:	sub	r2, r4, #12
   11c20:	cmp	r4, #10
   11c24:	cmpne	r2, #1
   11c28:	bhi	11c38 <__assert_fail@plt+0x10a4>
   11c2c:	sub	r2, r5, #8
   11c30:	cmp	r2, #1
   11c34:	bls	11dc0 <__assert_fail@plt+0x122c>
   11c38:	sub	r1, r4, #8
   11c3c:	sub	r2, r5, #10
   11c40:	clz	r1, r1
   11c44:	clz	r2, r2
   11c48:	lsr	r1, r1, #5
   11c4c:	lsr	r2, r2, #5
   11c50:	tst	r1, r2
   11c54:	bne	11c74 <__assert_fail@plt+0x10e0>
   11c58:	cmp	r5, #11
   11c5c:	movne	r1, #0
   11c60:	andeq	r1, r1, #1
   11c64:	cmp	r1, #0
   11c68:	beq	11d54 <__assert_fail@plt+0x11c0>
   11c6c:	cmp	r0, #8
   11c70:	bne	11d78 <__assert_fail@plt+0x11e4>
   11c74:	mov	r4, #8
   11c78:	b	11dc0 <__assert_fail@plt+0x122c>
   11c7c:	cmp	r4, #0
   11c80:	bne	11c98 <__assert_fail@plt+0x1104>
   11c84:	ldr	r3, [pc, #628]	; 11f00 <__assert_fail@plt+0x136c>
   11c88:	mov	r2, #249	; 0xf9
   11c8c:	ldr	r1, [pc, #624]	; 11f04 <__assert_fail@plt+0x1370>
   11c90:	ldr	r0, [pc, #624]	; 11f08 <__assert_fail@plt+0x1374>
   11c94:	b	11cbc <__assert_fail@plt+0x1128>
   11c98:	mov	r1, sp
   11c9c:	ldr	r0, [r4, #12]
   11ca0:	bl	10a38 <utf8proc_encode_char@plt>
   11ca4:	cmp	r0, #0
   11ca8:	bne	11cc0 <__assert_fail@plt+0x112c>
   11cac:	ldr	r3, [pc, #588]	; 11f00 <__assert_fail@plt+0x136c>
   11cb0:	mov	r2, #253	; 0xfd
   11cb4:	ldr	r1, [pc, #584]	; 11f04 <__assert_fail@plt+0x1370>
   11cb8:	ldr	r0, [pc, #588]	; 11f0c <__assert_fail@plt+0x1378>
   11cbc:	bl	10b94 <__assert_fail@plt>
   11cc0:	ldr	r4, [r4, #4]
   11cc4:	add	r5, r5, r0
   11cc8:	cmp	r4, r8
   11ccc:	bne	11c7c <__assert_fail@plt+0x10e8>
   11cd0:	add	r0, r5, #1
   11cd4:	mov	r5, #0
   11cd8:	bl	10aa4 <malloc@plt>
   11cdc:	mov	r4, r0
   11ce0:	cmp	r7, r8
   11ce4:	bne	11d24 <__assert_fail@plt+0x1190>
   11ce8:	mov	r3, #0
   11cec:	mov	r1, #12
   11cf0:	mov	r0, #1
   11cf4:	strb	r3, [r4, r5]
   11cf8:	bl	1216c <error@@Base+0x3c>
   11cfc:	mov	r5, r0
   11d00:	mov	r0, r4
   11d04:	bl	10b28 <utf8proc_NFC@plt>
   11d08:	mov	r1, r5
   11d0c:	str	r0, [r5, #8]
   11d10:	mov	r0, sl
   11d14:	bl	10edc <__assert_fail@plt+0x348>
   11d18:	mov	r0, r4
   11d1c:	bl	10a14 <free@plt>
   11d20:	b	11e18 <__assert_fail@plt+0x1284>
   11d24:	cmp	r7, #0
   11d28:	ldreq	r3, [pc, #480]	; 11f10 <__assert_fail@plt+0x137c>
   11d2c:	movweq	r2, #269	; 0x10d
   11d30:	beq	11c8c <__assert_fail@plt+0x10f8>
   11d34:	add	r1, r4, r5
   11d38:	ldr	r0, [r7, #12]
   11d3c:	bl	10a38 <utf8proc_encode_char@plt>
   11d40:	add	r5, r5, r0
   11d44:	ldr	r7, [r7, #4]
   11d48:	b	11ce0 <__assert_fail@plt+0x114c>
   11d4c:	mov	r9, r4
   11d50:	b	11b50 <__assert_fail@plt+0xfbc>
   11d54:	cmp	r9, #8
   11d58:	cmpeq	r4, #11
   11d5c:	moveq	r1, #1
   11d60:	movne	r1, #0
   11d64:	cmp	r5, #8
   11d68:	movne	r1, #0
   11d6c:	andeq	r1, r1, #1
   11d70:	cmp	r1, #0
   11d74:	bne	11eb8 <__assert_fail@plt+0x1324>
   11d78:	sub	r1, r4, #15
   11d7c:	sub	r8, r5, #15
   11d80:	clz	r1, r1
   11d84:	clz	r8, r8
   11d88:	lsr	r1, r1, #5
   11d8c:	lsr	r8, r8, #5
   11d90:	tst	r1, r8
   11d94:	bne	11ec0 <__assert_fail@plt+0x132c>
   11d98:	cmp	r3, #1
   11d9c:	movhi	lr, #0
   11da0:	movls	lr, #1
   11da4:	tst	r8, lr
   11da8:	bne	11dc0 <__assert_fail@plt+0x122c>
   11dac:	cmp	r4, #15
   11db0:	bne	11ed8 <__assert_fail@plt+0x1344>
   11db4:	sub	r3, r5, #8
   11db8:	cmp	r3, #1
   11dbc:	bhi	11e20 <__assert_fail@plt+0x128c>
   11dc0:	ldr	r3, [r6, #4]
   11dc4:	cmp	r3, #0
   11dc8:	bne	11d4c <__assert_fail@plt+0x11b8>
   11dcc:	ldr	r4, [r6, #4]
   11dd0:	cmp	r4, #0
   11dd4:	beq	11dec <__assert_fail@plt+0x1258>
   11dd8:	mov	r0, r4
   11ddc:	bl	11a84 <__assert_fail@plt+0xef0>
   11de0:	bic	r0, r0, #2
   11de4:	cmp	r0, #4
   11de8:	beq	11ed0 <__assert_fail@plt+0x133c>
   11dec:	ldr	r0, [r7, #12]
   11df0:	bl	10a20 <utf8proc_get_property@plt>
   11df4:	ldrh	r3, [r0]
   11df8:	cmp	r3, #29
   11dfc:	bhi	11e18 <__assert_fail@plt+0x1284>
   11e00:	mov	r2, #1
   11e04:	ands	r3, fp, r2, lsl r3
   11e08:	movne	r4, r7
   11e0c:	movne	r5, #0
   11e10:	ldrne	r8, [r6, #4]
   11e14:	bne	11cc8 <__assert_fail@plt+0x1134>
   11e18:	ldr	r7, [r6, #4]
   11e1c:	b	11b3c <__assert_fail@plt+0xfa8>
   11e20:	cmp	ip, #12
   11e24:	orreq	r2, r2, #1
   11e28:	cmp	r2, #0
   11e2c:	beq	11e38 <__assert_fail@plt+0x12a4>
   11e30:	cmp	r0, #15
   11e34:	beq	11dc0 <__assert_fail@plt+0x122c>
   11e38:	sub	r3, r4, #7
   11e3c:	cmp	r5, #7
   11e40:	cmpeq	r4, #7
   11e44:	clz	r3, r3
   11e48:	lsr	r3, r3, #5
   11e4c:	beq	11ec8 <__assert_fail@plt+0x1334>
   11e50:	orrs	r2, r1, lr
   11e54:	bne	11e68 <__assert_fail@plt+0x12d4>
   11e58:	cmp	r4, #16
   11e5c:	orreq	r3, r3, #1
   11e60:	cmp	r3, #0
   11e64:	beq	11e9c <__assert_fail@plt+0x1308>
   11e68:	cmp	r5, #16
   11e6c:	beq	11dc0 <__assert_fail@plt+0x122c>
   11e70:	cmp	r4, #16
   11e74:	bne	11e9c <__assert_fail@plt+0x1308>
   11e78:	cmp	r5, #15
   11e7c:	beq	11dc0 <__assert_fail@plt+0x122c>
   11e80:	sub	r5, r5, #7
   11e84:	cmp	r5, #2
   11e88:	bls	11dc0 <__assert_fail@plt+0x122c>
   11e8c:	cmp	r6, #0
   11e90:	bne	11dcc <__assert_fail@plt+0x1238>
   11e94:	add	sp, sp, #20
   11e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e9c:	cmp	r4, #5
   11ea0:	cmpeq	r5, #5
   11ea4:	bne	11e8c <__assert_fail@plt+0x12f8>
   11ea8:	mov	r4, #5
   11eac:	b	11dc0 <__assert_fail@plt+0x122c>
   11eb0:	mov	r4, #1
   11eb4:	b	11dc0 <__assert_fail@plt+0x122c>
   11eb8:	mov	r4, #11
   11ebc:	b	11dc0 <__assert_fail@plt+0x122c>
   11ec0:	mov	r4, #15
   11ec4:	b	11dc0 <__assert_fail@plt+0x122c>
   11ec8:	mov	r4, #7
   11ecc:	b	11dc0 <__assert_fail@plt+0x122c>
   11ed0:	mov	r6, r4
   11ed4:	b	11dcc <__assert_fail@plt+0x1238>
   11ed8:	cmp	r9, #15
   11edc:	bne	11e38 <__assert_fail@plt+0x12a4>
   11ee0:	cmp	r4, #14
   11ee4:	beq	11ef4 <__assert_fail@plt+0x1360>
   11ee8:	sub	r3, r4, #10
   11eec:	bics	r3, r3, #2
   11ef0:	bne	11e38 <__assert_fail@plt+0x12a4>
   11ef4:	cmp	r5, #15
   11ef8:	b	11e34 <__assert_fail@plt+0x12a0>
   11efc:	strdcs	r1, [r0], -lr
   11f00:	andeq	r2, r1, r4, asr #23
   11f04:	andeq	r5, r1, r4, lsr #30
   11f08:	andeq	r5, r1, fp, lsr #30
   11f0c:	andeq	r5, r1, fp, lsr pc
   11f10:	ldrdeq	r2, [r1], -r5
   11f14:	push	{r4, lr}
   11f18:	mov	r4, r0
   11f1c:	ldr	r0, [r0, #8]
   11f20:	bl	10a14 <free@plt>
   11f24:	mov	r0, r4
   11f28:	pop	{r4, lr}
   11f2c:	b	10a14 <free@plt>
   11f30:	ldr	r3, [pc, #56]	; 11f70 <__assert_fail@plt+0x13dc>
   11f34:	push	{r4, r5, lr}
   11f38:	sub	sp, sp, #116	; 0x74
   11f3c:	mov	r5, r0
   11f40:	ldr	r4, [r3]
   11f44:	bl	10ad4 <getpid@plt>
   11f48:	ldr	r1, [pc, #36]	; 11f74 <__assert_fail@plt+0x13e0>
   11f4c:	mov	r3, r0
   11f50:	add	r0, sp, #12
   11f54:	str	r5, [sp]
   11f58:	mov	r2, r4
   11f5c:	bl	10b40 <sprintf@plt>
   11f60:	add	r0, sp, #12
   11f64:	bl	10a44 <strdup@plt>
   11f68:	add	sp, sp, #116	; 0x74
   11f6c:	pop	{r4, r5, pc}
   11f70:	andeq	r9, r2, r0, ror #1
   11f74:	andeq	r5, r1, lr, asr #30
   11f78:	ldr	r3, [pc, #84]	; 11fd4 <__assert_fail@plt+0x1440>
   11f7c:	mov	r5, r0
   11f80:	push	{r7, lr}
   11f84:	ldr	r3, [r3]
   11f88:	cmp	r3, #0
   11f8c:	beq	11f94 <__assert_fail@plt+0x1400>
   11f90:	blx	r3
   11f94:	ldr	r6, [pc, #60]	; 11fd8 <__assert_fail@plt+0x1444>
   11f98:	mov	r4, #1
   11f9c:	ldrsh	r3, [r6]
   11fa0:	cmp	r3, r4
   11fa4:	bge	11fb0 <__assert_fail@plt+0x141c>
   11fa8:	mov	r0, r5
   11fac:	bl	10ae0 <exit@plt>
   11fb0:	mov	r0, r4
   11fb4:	add	r4, r4, #1
   11fb8:	bl	11f30 <__assert_fail@plt+0x139c>
   11fbc:	mov	r7, r0
   11fc0:	sxth	r4, r4
   11fc4:	bl	10a5c <unlink@plt>
   11fc8:	mov	r0, r7
   11fcc:	bl	10a14 <free@plt>
   11fd0:	b	11f9c <__assert_fail@plt+0x1408>
   11fd4:	andeq	r9, r2, r4, ror #1
   11fd8:	andeq	r7, r2, r0, asr #2
   11fdc:	sub	r2, r0, #1
   11fe0:	sub	r1, r1, #1
   11fe4:	ldrb	r3, [r2, #1]!
   11fe8:	ldrb	r0, [r1, #1]!
   11fec:	cmp	r3, #0
   11ff0:	beq	1200c <__assert_fail@plt+0x1478>
   11ff4:	cmp	r3, r0
   11ff8:	beq	11fe4 <__assert_fail@plt+0x1450>
   11ffc:	cmp	r3, r0
   12000:	mvncc	r0, #0
   12004:	movcs	r0, #1
   12008:	bx	lr
   1200c:	cmp	r0, #0
   12010:	bxeq	lr
   12014:	b	11ffc <__assert_fail@plt+0x1468>
   12018:	ldr	r2, [pc, #28]	; 1203c <__assert_fail@plt+0x14a8>
   1201c:	ldr	r2, [r2]
   12020:	cmp	r2, r0
   12024:	bxeq	lr
   12028:	ldr	r2, [pc, #16]	; 12040 <__assert_fail@plt+0x14ac>
   1202c:	ldr	r2, [r2]
   12030:	cmp	r2, r0
   12034:	bxeq	lr
   12038:	b	10b1c <fclose@plt>
   1203c:	andeq	r7, r2, r8, asr #1
   12040:	andeq	r7, r2, ip, asr #1
   12044:	push	{lr}		; (str lr, [sp, #-4]!)
   12048:	sub	sp, sp, #92	; 0x5c
   1204c:	mov	r1, sp
   12050:	bl	12a38 <error@@Base+0x908>
   12054:	clz	r0, r0
   12058:	lsr	r0, r0, #5
   1205c:	add	sp, sp, #92	; 0x5c
   12060:	pop	{pc}		; (ldr pc, [sp], #4)
   12064:	ldr	r3, [pc, #36]	; 12090 <__assert_fail@plt+0x14fc>
   12068:	push	{r4, lr}
   1206c:	ldrh	r0, [r3]
   12070:	add	r0, r0, #1
   12074:	sxth	r0, r0
   12078:	strh	r0, [r3]
   1207c:	bl	11f30 <__assert_fail@plt+0x139c>
   12080:	mov	r4, r0
   12084:	bl	10a5c <unlink@plt>
   12088:	mov	r0, r4
   1208c:	pop	{r4, pc}
   12090:	andeq	r7, r2, r0, asr #2
   12094:	push	{r4, lr}
   12098:	mov	r4, r0
   1209c:	bl	10af8 <strlen@plt>
   120a0:	sub	r0, r0, #1
   120a4:	add	r1, r4, #1
   120a8:	sxth	r0, r0
   120ac:	tst	r0, #32768	; 0x8000
   120b0:	bne	120c4 <__assert_fail@plt+0x1530>
   120b4:	sub	r3, r0, #1
   120b8:	ldrb	r2, [r1, r3]
   120bc:	cmp	r2, #47	; 0x2f
   120c0:	bne	120d0 <__assert_fail@plt+0x153c>
   120c4:	add	r0, r0, #1
   120c8:	add	r0, r4, r0
   120cc:	pop	{r4, pc}
   120d0:	mov	r0, r3
   120d4:	b	120ac <__assert_fail@plt+0x1518>
   120d8:	push	{r4, lr}
   120dc:	mov	r0, #0
   120e0:	bl	11f78 <__assert_fail@plt+0x13e4>
   120e4:	ldr	r2, [pc, #52]	; 12120 <__assert_fail@plt+0x158c>
   120e8:	push	{r4, lr}
   120ec:	ldr	r2, [r2]
   120f0:	cmp	r2, #0
   120f4:	beq	12100 <__assert_fail@plt+0x156c>
   120f8:	blx	r2
   120fc:	bl	120d8 <__assert_fail@plt+0x1544>
   12100:	mov	r3, r0
   12104:	ldr	r2, [pc, #24]	; 12124 <__assert_fail@plt+0x1590>
   12108:	ldr	r0, [pc, #24]	; 12128 <__assert_fail@plt+0x1594>
   1210c:	ldr	r1, [pc, #24]	; 1212c <__assert_fail@plt+0x1598>
   12110:	ldr	r2, [r2]
   12114:	ldr	r0, [r0]
   12118:	bl	10b04 <fprintf@plt>
   1211c:	b	120fc <__assert_fail@plt+0x1568>
   12120:	ldrdeq	r9, [r2], -ip
   12124:	andeq	r9, r2, r0, ror #1
   12128:	andeq	r7, r2, r0, asr #1
   1212c:	andeq	r5, r1, ip, asr pc

00012130 <error@@Base>:
   12130:	mov	r3, r0
   12134:	ldr	r2, [pc, #32]	; 1215c <error@@Base+0x2c>
   12138:	push	{r4, lr}
   1213c:	ldr	r0, [pc, #28]	; 12160 <error@@Base+0x30>
   12140:	ldr	r1, [pc, #28]	; 12164 <error@@Base+0x34>
   12144:	ldr	r2, [r2]
   12148:	ldr	r0, [r0]
   1214c:	bl	10b04 <fprintf@plt>
   12150:	ldr	r3, [pc, #16]	; 12168 <error@@Base+0x38>
   12154:	ldr	r0, [r3]
   12158:	bl	11f78 <__assert_fail@plt+0x13e4>
   1215c:	andeq	r9, r2, r0, ror #1
   12160:	andeq	r7, r2, r0, asr #1
   12164:	andeq	r5, r1, fp, ror #30
   12168:	strheq	r7, [r2], -r8
   1216c:	push	{r4, lr}
   12170:	bl	109e4 <calloc@plt>
   12174:	cmp	r0, #0
   12178:	popne	{r4, pc}
   1217c:	ldr	r0, [pc]	; 12184 <error@@Base+0x54>
   12180:	bl	12130 <error@@Base>
   12184:	andeq	r5, r1, r3, ror pc
   12188:	ldr	r3, [pc, #28]	; 121ac <error@@Base+0x7c>
   1218c:	ldrb	r2, [r3, #2]
   12190:	cmp	r2, #0
   12194:	bxne	lr
   12198:	mov	r2, #1
   1219c:	push	{r4, lr}
   121a0:	ldr	r0, [pc, #8]	; 121b0 <error@@Base+0x80>
   121a4:	strb	r2, [r3, #2]
   121a8:	bl	12130 <error@@Base>
   121ac:	andeq	r7, r2, r0, asr #2
   121b0:	andeq	r5, r1, sp, lsl #31
   121b4:	push	{r0, r1, r2, lr}
   121b8:	mov	r3, r0
   121bc:	ldr	r2, [pc, #32]	; 121e4 <error@@Base+0xb4>
   121c0:	str	r1, [sp]
   121c4:	ldr	r0, [pc, #28]	; 121e8 <error@@Base+0xb8>
   121c8:	ldr	r1, [pc, #28]	; 121ec <error@@Base+0xbc>
   121cc:	ldr	r2, [r2]
   121d0:	ldr	r0, [r0]
   121d4:	bl	10b04 <fprintf@plt>
   121d8:	ldr	r3, [pc, #16]	; 121f0 <error@@Base+0xc0>
   121dc:	ldr	r0, [r3]
   121e0:	bl	11f78 <__assert_fail@plt+0x13e4>
   121e4:	andeq	r9, r2, r0, ror #1
   121e8:	andeq	r7, r2, r0, asr #1
   121ec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   121f0:	strheq	r7, [r2], -r8
   121f4:	push	{r4, r5, r6, lr}
   121f8:	subs	r4, r0, #0
   121fc:	mov	r5, r1
   12200:	bne	1221c <error@@Base+0xec>
   12204:	ldrb	r3, [r1]
   12208:	cmp	r3, #114	; 0x72
   1220c:	ldreq	r3, [pc, #44]	; 12240 <error@@Base+0x110>
   12210:	ldrne	r3, [pc, #44]	; 12244 <error@@Base+0x114>
   12214:	ldr	r0, [r3]
   12218:	pop	{r4, r5, r6, pc}
   1221c:	bl	10a08 <fopen@plt>
   12220:	cmp	r0, #0
   12224:	popne	{r4, r5, r6, pc}
   12228:	mov	r1, r4
   1222c:	ldrb	r3, [r5]
   12230:	cmp	r3, #119	; 0x77
   12234:	ldreq	r0, [pc, #12]	; 12248 <error@@Base+0x118>
   12238:	ldrne	r0, [pc, #12]	; 1224c <error@@Base+0x11c>
   1223c:	bl	121b4 <error@@Base+0x84>
   12240:	andeq	r7, r2, r8, asr #1
   12244:	andeq	r7, r2, ip, asr #1
   12248:	andeq	r5, r1, r9, lsr #31
   1224c:			; <UNDEFINED> instruction: 0x00015fbf
   12250:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12254:	mov	r8, r0
   12258:	mov	r7, r1
   1225c:	mov	r9, r3
   12260:	ldr	r0, [r1]
   12264:	str	r2, [sp]
   12268:	bl	12094 <__assert_fail@plt+0x1500>
   1226c:	ldr	r3, [pc, #396]	; 12400 <error@@Base+0x2d0>
   12270:	ldr	r1, [pc, #396]	; 12404 <error@@Base+0x2d4>
   12274:	str	r0, [r3]
   12278:	mov	r0, #2
   1227c:	bl	10abc <__sysv_signal@plt>
   12280:	ldr	r1, [pc, #380]	; 12404 <error@@Base+0x2d4>
   12284:	mov	r0, #15
   12288:	bl	10abc <__sysv_signal@plt>
   1228c:	ldr	r4, [r8]
   12290:	cmp	r4, #1
   12294:	movne	r6, #0
   12298:	movne	r4, #1
   1229c:	bne	123c0 <error@@Base+0x290>
   122a0:	ldr	r3, [pc, #352]	; 12408 <error@@Base+0x2d8>
   122a4:	ldrb	r6, [r3, #4]
   122a8:	cmp	r6, #0
   122ac:	beq	123c0 <error@@Base+0x290>
   122b0:	ldr	r0, [sp]
   122b4:	bl	120e4 <__assert_fail@plt+0x1550>
   122b8:	ldr	r5, [r7, r4, lsl #2]
   122bc:	lsl	sl, r4, #2
   122c0:	ldrb	r3, [r5]
   122c4:	cmp	r3, #45	; 0x2d
   122c8:	bne	123f0 <error@@Base+0x2c0>
   122cc:	ldrb	r3, [r5, #1]
   122d0:	cmp	r3, #0
   122d4:	str	r3, [sp, #4]
   122d8:	beq	123f0 <error@@Base+0x2c0>
   122dc:	mov	r0, r5
   122e0:	bl	10af8 <strlen@plt>
   122e4:	mov	r2, r0
   122e8:	mov	r1, r5
   122ec:	ldr	r0, [pc, #280]	; 1240c <error@@Base+0x2dc>
   122f0:	bl	10b70 <strncmp@plt>
   122f4:	cmp	r0, #0
   122f8:	beq	122b0 <error@@Base+0x180>
   122fc:	add	r0, r4, #1
   12300:	ldr	r3, [sp, #4]
   12304:	cmp	r0, fp
   12308:	addlt	sl, r7, sl
   1230c:	movge	r1, #0
   12310:	ldrlt	r1, [sl, #4]
   12314:	cmp	r9, #0
   12318:	beq	123d8 <error@@Base+0x2a8>
   1231c:	mov	ip, #0
   12320:	sxth	r2, ip
   12324:	add	r2, r2, r2, lsl #1
   12328:	add	lr, r9, r2, lsl #2
   1232c:	ldrb	r2, [r9, r2, lsl #2]
   12330:	cmp	r2, #0
   12334:	beq	123d8 <error@@Base+0x2a8>
   12338:	cmp	r3, r2
   1233c:	add	ip, ip, #1
   12340:	bne	12320 <error@@Base+0x1f0>
   12344:	ldr	r3, [lr, #4]
   12348:	cmp	r3, #0
   1234c:	bne	12380 <error@@Base+0x250>
   12350:	ldr	r3, [lr, #8]
   12354:	cmp	r3, #0
   12358:	beq	123d8 <error@@Base+0x2a8>
   1235c:	ldrb	r2, [r5, #2]
   12360:	cmp	r2, #0
   12364:	bne	123d8 <error@@Base+0x2a8>
   12368:	ldrb	r2, [r3]
   1236c:	cmp	r2, #0
   12370:	bne	123e4 <error@@Base+0x2b4>
   12374:	mov	r2, #1
   12378:	strb	r2, [r3]
   1237c:	b	123b8 <error@@Base+0x288>
   12380:	ldrb	r2, [r5, #2]
   12384:	cmp	r1, #0
   12388:	cmpeq	r2, #0
   1238c:	beq	12350 <error@@Base+0x220>
   12390:	ldr	ip, [r3]
   12394:	cmp	ip, #0
   12398:	bne	123e4 <error@@Base+0x2b4>
   1239c:	cmp	r2, #0
   123a0:	sxth	r0, r0
   123a4:	addne	r1, r5, #2
   123a8:	str	r1, [r3]
   123ac:	ldrb	r3, [r5, #2]
   123b0:	cmp	r3, #0
   123b4:	moveq	r4, r0
   123b8:	add	r4, r4, #1
   123bc:	sxth	r4, r4
   123c0:	ldr	fp, [r8]
   123c4:	cmp	r4, fp
   123c8:	blt	122b8 <error@@Base+0x188>
   123cc:	str	r6, [r8]
   123d0:	add	sp, sp, #12
   123d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123d8:	ldr	r0, [pc, #48]	; 12410 <error@@Base+0x2e0>
   123dc:	mov	r1, r5
   123e0:	bl	121b4 <error@@Base+0x84>
   123e4:	mov	r1, r5
   123e8:	ldr	r0, [pc, #36]	; 12414 <error@@Base+0x2e4>
   123ec:	b	123e0 <error@@Base+0x2b0>
   123f0:	add	r3, r6, #1
   123f4:	str	r5, [r7, r6, lsl #2]
   123f8:	sxth	r6, r3
   123fc:	b	123b8 <error@@Base+0x288>
   12400:	andeq	r9, r2, r0, ror #1
   12404:	andeq	r2, r1, r8, lsl #3
   12408:	strheq	r7, [r2], -r8
   1240c:	ldrdeq	r5, [r1], -r3
   12410:	ldrdeq	r5, [r1], -r9
   12414:	andeq	r5, r1, r8, ror #31
   12418:	push	{r0, r1, r2, lr}
   1241c:	mov	r3, r0
   12420:	ldr	r2, [pc, #28]	; 12444 <error@@Base+0x314>
   12424:	str	r1, [sp]
   12428:	ldr	r0, [pc, #24]	; 12448 <error@@Base+0x318>
   1242c:	ldr	r1, [pc, #24]	; 1244c <error@@Base+0x31c>
   12430:	ldr	r2, [r2]
   12434:	ldr	r0, [r0]
   12438:	bl	10b04 <fprintf@plt>
   1243c:	add	sp, sp, #12
   12440:	pop	{pc}		; (ldr pc, [sp], #4)
   12444:	andeq	r9, r2, r0, ror #1
   12448:	andeq	r7, r2, r0, asr #1
   1244c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   12450:	push	{r4, r5, r6, lr}
   12454:	mov	r4, r0
   12458:	uxtb	r6, r1
   1245c:	mov	r0, #1
   12460:	mov	r1, #16
   12464:	mov	r5, r2
   12468:	bl	1216c <error@@Base+0x3c>
   1246c:	mov	r1, r0
   12470:	mov	r0, r4
   12474:	strb	r6, [r1, #8]
   12478:	str	r5, [r1, #12]
   1247c:	pop	{r4, r5, r6, lr}
   12480:	b	10edc <__assert_fail@plt+0x348>
   12484:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12488:	mov	r6, r0
   1248c:	mov	r0, r1
   12490:	clz	r1, r1
   12494:	sub	sp, sp, #116	; 0x74
   12498:	lsr	r1, r1, #5
   1249c:	ldrb	r3, [r2]
   124a0:	cmp	r3, #0
   124a4:	moveq	r1, #0
   124a8:	cmp	r1, #0
   124ac:	beq	124bc <error@@Base+0x38c>
   124b0:	ldr	r1, [pc, #732]	; 12794 <error@@Base+0x664>
   124b4:	ldr	r0, [pc, #732]	; 12798 <error@@Base+0x668>
   124b8:	bl	121b4 <error@@Base+0x84>
   124bc:	mov	r4, r2
   124c0:	ldr	r1, [pc, #724]	; 1279c <error@@Base+0x66c>
   124c4:	ldr	r7, [r6, #4]
   124c8:	bl	121f4 <error@@Base+0xc4>
   124cc:	ldrb	r3, [r4]
   124d0:	mov	r5, r0
   124d4:	cmp	r3, #0
   124d8:	beq	12564 <error@@Base+0x434>
   124dc:	mov	r2, r0
   124e0:	mov	r1, #99	; 0x63
   124e4:	add	r0, sp, #12
   124e8:	bl	10a2c <fgets@plt>
   124ec:	cmp	r0, #0
   124f0:	beq	12554 <error@@Base+0x424>
   124f4:	mov	r2, #51	; 0x33
   124f8:	ldr	r1, [pc, #672]	; 127a0 <error@@Base+0x670>
   124fc:	add	r0, sp, #12
   12500:	bl	10b70 <strncmp@plt>
   12504:	subs	r8, r0, #0
   12508:	bne	12554 <error@@Base+0x424>
   1250c:	ldr	r9, [pc, #656]	; 127a4 <error@@Base+0x674>
   12510:	mov	r2, r5
   12514:	mov	r1, #99	; 0x63
   12518:	add	r0, sp, #12
   1251c:	bl	10a2c <fgets@plt>
   12520:	cmp	r0, #0
   12524:	beq	1254c <error@@Base+0x41c>
   12528:	mov	r1, r9
   1252c:	add	r0, sp, #12
   12530:	bl	109f0 <strcmp@plt>
   12534:	cmp	r0, #0
   12538:	bne	12510 <error@@Base+0x3e0>
   1253c:	add	r8, r8, #1
   12540:	sxth	r8, r8
   12544:	cmp	r8, #2
   12548:	bne	12510 <error@@Base+0x3e0>
   1254c:	mov	r3, #1
   12550:	b	12560 <error@@Base+0x430>
   12554:	mov	r0, r5
   12558:	bl	10a50 <rewind@plt>
   1255c:	mov	r3, #0
   12560:	strb	r3, [r4, #11]
   12564:	ldr	r8, [r4, #4]
   12568:	mov	r0, r5
   1256c:	mov	fp, #0
   12570:	ldrb	r3, [r4, #1]
   12574:	cmp	r8, #0
   12578:	moveq	r8, #94	; 0x5e
   1257c:	str	r3, [sp, #4]
   12580:	bl	10b88 <getc@plt>
   12584:	cmn	r0, #1
   12588:	bne	125b4 <error@@Base+0x484>
   1258c:	mov	r0, r5
   12590:	bl	12018 <__assert_fail@plt+0x1484>
   12594:	ldrb	r3, [r4, #9]
   12598:	cmp	r3, #0
   1259c:	bne	12654 <error@@Base+0x524>
   125a0:	ldrb	r3, [r4, #10]
   125a4:	cmp	r3, #0
   125a8:	bne	1276c <error@@Base+0x63c>
   125ac:	add	sp, sp, #116	; 0x74
   125b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125b4:	ldr	r3, [pc, #492]	; 127a8 <error@@Base+0x678>
   125b8:	ldrsb	r9, [r3, r0]
   125bc:	cmp	r9, #0
   125c0:	bgt	125cc <error@@Base+0x49c>
   125c4:	ldr	r0, [pc, #480]	; 127ac <error@@Base+0x67c>
   125c8:	bl	12130 <error@@Base>
   125cc:	cmp	r9, #1
   125d0:	strb	r0, [sp, #8]
   125d4:	beq	125fc <error@@Base+0x4cc>
   125d8:	sub	sl, r9, #1
   125dc:	mov	r3, r5
   125e0:	mov	r2, sl
   125e4:	mov	r1, #1
   125e8:	add	r0, sp, #9
   125ec:	bl	10a80 <fread@plt>
   125f0:	cmp	sl, r0
   125f4:	ldrne	r0, [pc, #436]	; 127b0 <error@@Base+0x680>
   125f8:	bne	125c8 <error@@Base+0x498>
   125fc:	add	r2, sp, #12
   12600:	mov	r1, #4
   12604:	add	r0, sp, #8
   12608:	bl	10a8c <utf8proc_iterate@plt>
   1260c:	cmp	r9, r0
   12610:	beq	1261c <error@@Base+0x4ec>
   12614:	bl	10b58 <utf8proc_errmsg@plt>
   12618:	b	125c8 <error@@Base+0x498>
   1261c:	ldr	r3, [sp, #4]
   12620:	ldr	r2, [sp, #12]
   12624:	cmp	r3, #0
   12628:	beq	12638 <error@@Base+0x508>
   1262c:	cmp	r8, r2
   12630:	moveq	fp, #1
   12634:	beq	12648 <error@@Base+0x518>
   12638:	mov	r1, fp
   1263c:	mov	r0, r6
   12640:	mov	fp, #0
   12644:	bl	12450 <error@@Base+0x320>
   12648:	mov	r0, r5
   1264c:	bl	10b88 <getc@plt>
   12650:	b	12584 <error@@Base+0x454>
   12654:	cmp	r7, #0
   12658:	mov	sl, #32
   1265c:	ldrne	r8, [r7, #4]
   12660:	ldreq	r8, [r6]
   12664:	mov	r5, r8
   12668:	cmp	r5, #0
   1266c:	bne	126b8 <error@@Base+0x588>
   12670:	cmp	r8, #0
   12674:	beq	125a0 <error@@Base+0x470>
   12678:	eor	r3, r5, #1
   1267c:	ldr	r9, [r8, #4]
   12680:	ldr	r2, [r8, #12]
   12684:	cmp	r2, #32
   12688:	bne	1270c <error@@Base+0x5dc>
   1268c:	cmp	r9, #0
   12690:	moveq	r3, #1
   12694:	cmp	r3, #0
   12698:	bne	1273c <error@@Base+0x60c>
   1269c:	ldr	r3, [r9, #12]
   126a0:	cmp	r3, #10
   126a4:	cmpne	r3, #32
   126a8:	beq	1273c <error@@Base+0x60c>
   126ac:	subs	r5, r2, #10
   126b0:	movne	r5, #1
   126b4:	b	12734 <error@@Base+0x604>
   126b8:	ldr	r9, [r5, #12]
   126bc:	mov	r0, r9
   126c0:	bl	10a20 <utf8proc_get_property@plt>
   126c4:	cmp	r9, #13
   126c8:	bhi	126fc <error@@Base+0x5cc>
   126cc:	cmp	r9, #11
   126d0:	bcs	12704 <error@@Base+0x5d4>
   126d4:	cmp	r9, #9
   126d8:	beq	12704 <error@@Base+0x5d4>
   126dc:	cmp	r9, #10
   126e0:	beq	126f4 <error@@Base+0x5c4>
   126e4:	ldrsh	r3, [r0]
   126e8:	sub	r3, r3, #23
   126ec:	cmp	r3, #2
   126f0:	bls	12704 <error@@Base+0x5d4>
   126f4:	ldr	r5, [r5, #4]
   126f8:	b	12668 <error@@Base+0x538>
   126fc:	cmp	r9, #160	; 0xa0
   12700:	bne	126e4 <error@@Base+0x5b4>
   12704:	str	sl, [r5, #12]
   12708:	b	126f4 <error@@Base+0x5c4>
   1270c:	cmp	r2, #10
   12710:	movne	r3, #0
   12714:	andeq	r3, r3, #1
   12718:	cmp	r3, #0
   1271c:	beq	126ac <error@@Base+0x57c>
   12720:	mov	r0, r6
   12724:	mov	r1, r8
   12728:	bl	10f04 <__assert_fail@plt+0x370>
   1272c:	mov	r0, r8
   12730:	bl	10a14 <free@plt>
   12734:	mov	r8, r9
   12738:	b	12670 <error@@Base+0x540>
   1273c:	cmp	r9, #0
   12740:	movne	r3, r5
   12744:	moveq	r3, #0
   12748:	cmp	r3, #0
   1274c:	beq	12720 <error@@Base+0x5f0>
   12750:	ldr	r3, [r9, #12]
   12754:	cmp	r3, #32
   12758:	ldrbeq	r3, [r9, #8]
   1275c:	ldrbeq	r2, [r8, #8]
   12760:	orreq	r3, r3, r2
   12764:	strbeq	r3, [r9, #8]
   12768:	b	12720 <error@@Base+0x5f0>
   1276c:	cmp	r7, #0
   12770:	ldrne	r4, [r7, #4]
   12774:	ldreq	r4, [r6]
   12778:	cmp	r4, #0
   1277c:	beq	125ac <error@@Base+0x47c>
   12780:	ldr	r0, [r4, #12]
   12784:	bl	10a68 <utf8proc_tolower@plt>
   12788:	str	r0, [r4, #12]
   1278c:	ldr	r4, [r4, #4]
   12790:	b	12778 <error@@Base+0x648>
   12794:	strdeq	r5, [r1], -r9
   12798:	andeq	r6, r1, r3
   1279c:	muleq	r1, r9, r0
   127a0:	andeq	r6, r1, r3, lsl r0
   127a4:	andeq	r6, r1, fp, asr #32
   127a8:	andeq	r6, r2, r8, lsl #28
   127ac:	andeq	r6, r1, r3, lsl #1
   127b0:	muleq	r1, fp, r0
   127b4:	push	{r4, lr}
   127b8:	bl	10a38 <utf8proc_encode_char@plt>
   127bc:	cmp	r0, #0
   127c0:	bgt	127cc <error@@Base+0x69c>
   127c4:	ldr	r0, [pc, #8]	; 127d4 <error@@Base+0x6a4>
   127c8:	bl	12130 <error@@Base>
   127cc:	sxtb	r0, r0
   127d0:	pop	{r4, pc}
   127d4:	strheq	r6, [r1], -r3
   127d8:	push	{r4, r5, r6, r7, r8, lr}
   127dc:	uxtb	r4, r0
   127e0:	mov	r7, r1
   127e4:	cmp	r4, #0
   127e8:	mov	r6, r2
   127ec:	uxtb	r8, r3
   127f0:	beq	12804 <error@@Base+0x6d4>
   127f4:	mov	r1, r2
   127f8:	mov	r0, #94	; 0x5e
   127fc:	bl	127b4 <error@@Base+0x684>
   12800:	sxth	r4, r0
   12804:	cmp	r7, #10
   12808:	add	r5, r6, r4
   1280c:	bne	1282c <error@@Base+0x6fc>
   12810:	ldr	r2, [pc, #164]	; 128bc <error@@Base+0x78c>
   12814:	cmp	r8, #0
   12818:	mov	r0, r5
   1281c:	pop	{r4, r5, r6, r7, r8, lr}
   12820:	ldr	r1, [pc, #152]	; 128c0 <error@@Base+0x790>
   12824:	moveq	r1, r2
   12828:	b	10b40 <sprintf@plt>
   1282c:	mov	r0, r7
   12830:	bl	10a20 <utf8proc_get_property@plt>
   12834:	cmp	r7, #32
   12838:	beq	12858 <error@@Base+0x728>
   1283c:	ldrh	r3, [r0]
   12840:	cmp	r3, #29
   12844:	bhi	128a0 <error@@Base+0x770>
   12848:	ldr	r2, [pc, #116]	; 128c4 <error@@Base+0x794>
   1284c:	mov	r1, #1
   12850:	ands	r3, r2, r1, lsl r3
   12854:	beq	128a0 <error@@Base+0x770>
   12858:	mov	r0, r7
   1285c:	bl	10aec <utf8proc_category@plt>
   12860:	sub	r0, r0, #6
   12864:	cmp	r0, #2
   12868:	bhi	12880 <error@@Base+0x750>
   1286c:	mov	r1, r5
   12870:	movw	r0, #9676	; 0x25cc
   12874:	bl	127b4 <error@@Base+0x684>
   12878:	add	r4, r0, r4
   1287c:	sxth	r4, r4
   12880:	add	r1, r6, r4
   12884:	mov	r0, r7
   12888:	bl	127b4 <error@@Base+0x684>
   1288c:	add	r0, r0, r4
   12890:	mov	r3, #0
   12894:	sxth	r0, r0
   12898:	strb	r3, [r6, r0]
   1289c:	pop	{r4, r5, r6, r7, r8, pc}
   128a0:	cmp	r7, #255	; 0xff
   128a4:	mov	r2, r7
   128a8:	mov	r0, r5
   128ac:	ldrls	r1, [pc, #20]	; 128c8 <error@@Base+0x798>
   128b0:	pop	{r4, r5, r6, r7, r8, lr}
   128b4:	ldrhi	r1, [pc, #16]	; 128cc <error@@Base+0x79c>
   128b8:	b	10b40 <sprintf@plt>
   128bc:	andeq	r5, r1, r7, lsr #31
   128c0:	andeq	r6, r1, sl, asr #1
   128c4:	ldrshtcs	pc, [pc], #-254	; <UNPREDICTABLE>
   128c8:	andeq	r6, r1, pc, asr #1
   128cc:	ldrdeq	r6, [r1], -r6	; <UNPREDICTABLE>
   128d0:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   128d4:	mov	r5, r2
   128d8:	mov	r6, r0
   128dc:	mov	r0, r1
   128e0:	ldr	r1, [pc, #124]	; 12964 <error@@Base+0x834>
   128e4:	bl	121f4 <error@@Base+0xc4>
   128e8:	cmp	r5, #0
   128ec:	mov	r4, r0
   128f0:	beq	12920 <error@@Base+0x7f0>
   128f4:	mov	r1, r0
   128f8:	ldr	r0, [pc, #104]	; 12968 <error@@Base+0x838>
   128fc:	bl	10b64 <fputs@plt>
   12900:	mov	r1, r4
   12904:	ldr	r0, [pc, #96]	; 1296c <error@@Base+0x83c>
   12908:	bl	10b64 <fputs@plt>
   1290c:	mov	r0, r4
   12910:	blx	r5
   12914:	mov	r1, r4
   12918:	ldr	r0, [pc, #76]	; 1296c <error@@Base+0x83c>
   1291c:	bl	10b64 <fputs@plt>
   12920:	ldr	r5, [r6]
   12924:	cmp	r5, #0
   12928:	bne	1293c <error@@Base+0x80c>
   1292c:	mov	r0, r4
   12930:	bl	12018 <__assert_fail@plt+0x1484>
   12934:	add	sp, sp, #16
   12938:	pop	{r4, r5, r6, pc}
   1293c:	ldrb	r0, [r5, #8]
   12940:	mov	r3, #0
   12944:	add	r2, sp, #4
   12948:	ldr	r1, [r5, #12]
   1294c:	bl	127d8 <error@@Base+0x6a8>
   12950:	mov	r1, r4
   12954:	add	r0, sp, #4
   12958:	bl	10b64 <fputs@plt>
   1295c:	ldr	r5, [r5, #4]
   12960:	b	12924 <error@@Base+0x7f4>
   12964:	andeq	r2, r1, r0, ror #22
   12968:	andeq	r6, r1, r3, lsl r0
   1296c:	andeq	r6, r1, fp, asr #32
   12970:	push	{r0, r1, r4, r5, r6, lr}
   12974:	mov	r3, #0
   12978:	mov	r5, r0
   1297c:	mov	r4, r1
   12980:	str	r3, [sp, #4]
   12984:	ldrb	r3, [r4]
   12988:	cmp	r3, #0
   1298c:	bne	1299c <error@@Base+0x86c>
   12990:	mov	r0, #1
   12994:	add	sp, sp, #8
   12998:	pop	{r4, r5, r6, pc}
   1299c:	add	r2, sp, #4
   129a0:	mvn	r1, #0
   129a4:	mov	r0, r4
   129a8:	bl	10a8c <utf8proc_iterate@plt>
   129ac:	subs	r6, r0, #0
   129b0:	ble	129cc <error@@Base+0x89c>
   129b4:	mov	r1, #0
   129b8:	mov	r0, r5
   129bc:	ldr	r2, [sp, #4]
   129c0:	add	r4, r4, r6
   129c4:	bl	12450 <error@@Base+0x320>
   129c8:	b	12984 <error@@Base+0x854>
   129cc:	mov	r0, #0
   129d0:	b	12994 <error@@Base+0x864>
   129d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   129d8:	mov	r7, r0
   129dc:	ldr	r6, [pc, #72]	; 12a2c <error@@Base+0x8fc>
   129e0:	ldr	r5, [pc, #72]	; 12a30 <error@@Base+0x900>
   129e4:	add	r6, pc, r6
   129e8:	add	r5, pc, r5
   129ec:	sub	r6, r6, r5
   129f0:	mov	r8, r1
   129f4:	mov	r9, r2
   129f8:	bl	109c4 <calloc@plt-0x20>
   129fc:	asrs	r6, r6, #2
   12a00:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a04:	mov	r4, #0
   12a08:	add	r4, r4, #1
   12a0c:	ldr	r3, [r5], #4
   12a10:	mov	r2, r9
   12a14:	mov	r1, r8
   12a18:	mov	r0, r7
   12a1c:	blx	r3
   12a20:	cmp	r6, r4
   12a24:	bne	12a08 <error@@Base+0x8d8>
   12a28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12a2c:	andeq	r4, r1, r8, lsl r4
   12a30:	andeq	r4, r1, r0, lsl r4
   12a34:	bx	lr
   12a38:	mov	r2, r1
   12a3c:	mov	r1, r0
   12a40:	mov	r0, #3
   12a44:	b	10a74 <__xstat@plt>

Disassembly of section .fini:

00012a48 <.fini>:
   12a48:	push	{r3, lr}
   12a4c:	pop	{r3, pc}
