
../repos/coreutils/src/fold:     file format elf32-littlearm


Disassembly of section .init:

00010e3c <.init>:
   10e3c:	push	{r3, lr}
   10e40:	bl	11114 <__assert_fail@plt+0x48>
   10e44:	pop	{r3, pc}

Disassembly of section .plt:

00010e48 <calloc@plt-0x14>:
   10e48:	push	{lr}		; (str lr, [sp, #-4]!)
   10e4c:	ldr	lr, [pc, #4]	; 10e58 <calloc@plt-0x4>
   10e50:	add	lr, pc, lr
   10e54:	ldr	pc, [lr, #8]!
   10e58:	andeq	r5, r1, r8, lsr #3

00010e5c <calloc@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #424]!	; 0x1a8

00010e68 <fputs_unlocked@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #416]!	; 0x1a0

00010e74 <raise@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #408]!	; 0x198

00010e80 <strcmp@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #400]!	; 0x190

00010e8c <posix_fadvise64@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #392]!	; 0x188

00010e98 <fflush@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #86016	; 0x15000
   10ea0:	ldr	pc, [ip, #384]!	; 0x180

00010ea4 <memmove@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #86016	; 0x15000
   10eac:	ldr	pc, [ip, #376]!	; 0x178

00010eb0 <free@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #86016	; 0x15000
   10eb8:	ldr	pc, [ip, #368]!	; 0x170

00010ebc <_exit@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #86016	; 0x15000
   10ec4:	ldr	pc, [ip, #360]!	; 0x168

00010ec8 <memcpy@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #86016	; 0x15000
   10ed0:	ldr	pc, [ip, #352]!	; 0x160

00010ed4 <mbsinit@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #86016	; 0x15000
   10edc:	ldr	pc, [ip, #344]!	; 0x158

00010ee0 <fwrite_unlocked@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #86016	; 0x15000
   10ee8:	ldr	pc, [ip, #336]!	; 0x150

00010eec <getc_unlocked@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #328]!	; 0x148

00010ef8 <dcgettext@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #320]!	; 0x140

00010f04 <realloc@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #312]!	; 0x138

00010f10 <textdomain@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #304]!	; 0x130

00010f1c <iswprint@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #296]!	; 0x128

00010f28 <fwrite@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #288]!	; 0x120

00010f34 <lseek64@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #280]!	; 0x118

00010f40 <__ctype_get_mb_cur_max@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #272]!	; 0x110

00010f4c <__fpending@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #264]!	; 0x108

00010f58 <ferror_unlocked@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #256]!	; 0x100

00010f64 <mbrtowc@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #248]!	; 0xf8

00010f70 <error@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #240]!	; 0xf0

00010f7c <malloc@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #232]!	; 0xe8

00010f88 <__libc_start_main@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #224]!	; 0xe0

00010f94 <__freading@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #216]!	; 0xd8

00010fa0 <__gmon_start__@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #208]!	; 0xd0

00010fac <getopt_long@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #200]!	; 0xc8

00010fb8 <__ctype_b_loc@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #192]!	; 0xc0

00010fc4 <exit@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #184]!	; 0xb8

00010fd0 <bcmp@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #176]!	; 0xb0

00010fdc <strlen@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #168]!	; 0xa8

00010fe8 <strchr@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #160]!	; 0xa0

00010ff4 <__errno_location@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #152]!	; 0x98

00011000 <__cxa_atexit@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #144]!	; 0x90

0001100c <memset@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #136]!	; 0x88

00011018 <__printf_chk@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #128]!	; 0x80

00011024 <fileno@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #120]!	; 0x78

00011030 <strtoumax@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #112]!	; 0x70

0001103c <__fprintf_chk@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #104]!	; 0x68

00011048 <fclose@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #96]!	; 0x60

00011054 <fseeko64@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #88]!	; 0x58

00011060 <setlocale@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #80]!	; 0x50

0001106c <strrchr@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #72]!	; 0x48

00011078 <nl_langinfo@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #64]!	; 0x40

00011084 <clearerr_unlocked@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #56]!	; 0x38

00011090 <fopen64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #48]!	; 0x30

0001109c <bindtextdomain@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #40]!	; 0x28

000110a8 <strncmp@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #32]!

000110b4 <abort@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #24]!

000110c0 <putchar_unlocked@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #16]!

000110cc <__assert_fail@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #8]!

Disassembly of section .text:

000110d8 <.text>:
   110d8:	mov	fp, #0
   110dc:	mov	lr, #0
   110e0:	pop	{r1}		; (ldr r1, [sp], #4)
   110e4:	mov	r2, sp
   110e8:	push	{r2}		; (str r2, [sp, #-4]!)
   110ec:	push	{r0}		; (str r0, [sp, #-4]!)
   110f0:	ldr	ip, [pc, #16]	; 11108 <__assert_fail@plt+0x3c>
   110f4:	push	{ip}		; (str ip, [sp, #-4]!)
   110f8:	ldr	r0, [pc, #12]	; 1110c <__assert_fail@plt+0x40>
   110fc:	ldr	r3, [pc, #12]	; 11110 <__assert_fail@plt+0x44>
   11100:	bl	10f88 <__libc_start_main@plt>
   11104:	bl	110b4 <abort@plt>
   11108:			; <UNDEFINED> instruction: 0x000151bc
   1110c:	andeq	r1, r1, r0, asr #9
   11110:	andeq	r5, r1, ip, asr r1
   11114:	ldr	r3, [pc, #20]	; 11130 <__assert_fail@plt+0x64>
   11118:	ldr	r2, [pc, #20]	; 11134 <__assert_fail@plt+0x68>
   1111c:	add	r3, pc, r3
   11120:	ldr	r2, [r3, r2]
   11124:	cmp	r2, #0
   11128:	bxeq	lr
   1112c:	b	10fa0 <__gmon_start__@plt>
   11130:	ldrdeq	r4, [r1], -ip
   11134:	andeq	r0, r0, r0, ror #1
   11138:	ldr	r0, [pc, #24]	; 11158 <__assert_fail@plt+0x8c>
   1113c:	ldr	r3, [pc, #24]	; 1115c <__assert_fail@plt+0x90>
   11140:	cmp	r3, r0
   11144:	bxeq	lr
   11148:	ldr	r3, [pc, #16]	; 11160 <__assert_fail@plt+0x94>
   1114c:	cmp	r3, #0
   11150:	bxeq	lr
   11154:	bx	r3
   11158:	andeq	r6, r2, r8, lsr r1
   1115c:	andeq	r6, r2, r8, lsr r1
   11160:	andeq	r0, r0, r0
   11164:	ldr	r0, [pc, #36]	; 11190 <__assert_fail@plt+0xc4>
   11168:	ldr	r1, [pc, #36]	; 11194 <__assert_fail@plt+0xc8>
   1116c:	sub	r1, r1, r0
   11170:	asr	r1, r1, #2
   11174:	add	r1, r1, r1, lsr #31
   11178:	asrs	r1, r1, #1
   1117c:	bxeq	lr
   11180:	ldr	r3, [pc, #16]	; 11198 <__assert_fail@plt+0xcc>
   11184:	cmp	r3, #0
   11188:	bxeq	lr
   1118c:	bx	r3
   11190:	andeq	r6, r2, r8, lsr r1
   11194:	andeq	r6, r2, r8, lsr r1
   11198:	andeq	r0, r0, r0
   1119c:	push	{r4, lr}
   111a0:	ldr	r4, [pc, #24]	; 111c0 <__assert_fail@plt+0xf4>
   111a4:	ldrb	r3, [r4]
   111a8:	cmp	r3, #0
   111ac:	popne	{r4, pc}
   111b0:	bl	11138 <__assert_fail@plt+0x6c>
   111b4:	mov	r3, #1
   111b8:	strb	r3, [r4]
   111bc:	pop	{r4, pc}
   111c0:	andeq	r6, r2, ip, asr r1
   111c4:	b	11164 <__assert_fail@plt+0x98>
   111c8:	push	{fp, lr}
   111cc:	mov	fp, sp
   111d0:	mov	r4, r0
   111d4:	cmp	r0, #0
   111d8:	bne	11294 <__assert_fail@plt+0x1c8>
   111dc:	movw	r1, #21003	; 0x520b
   111e0:	movt	r1, #1
   111e4:	mov	r0, #0
   111e8:	mov	r2, #5
   111ec:	bl	10ef8 <dcgettext@plt>
   111f0:	mov	r1, r0
   111f4:	movw	r0, #24948	; 0x6174
   111f8:	movt	r0, #2
   111fc:	ldr	r2, [r0]
   11200:	mov	r0, #1
   11204:	bl	11018 <__printf_chk@plt>
   11208:	movw	r1, #21036	; 0x522c
   1120c:	movt	r1, #1
   11210:	mov	r0, #0
   11214:	mov	r2, #5
   11218:	bl	10ef8 <dcgettext@plt>
   1121c:	movw	r5, #24916	; 0x6154
   11220:	movt	r5, #2
   11224:	ldr	r1, [r5]
   11228:	bl	10e68 <fputs_unlocked@plt>
   1122c:	bl	112d8 <__assert_fail@plt+0x20c>
   11230:	bl	11308 <__assert_fail@plt+0x23c>
   11234:	movw	r1, #21096	; 0x5268
   11238:	movt	r1, #1
   1123c:	mov	r0, #0
   11240:	mov	r2, #5
   11244:	bl	10ef8 <dcgettext@plt>
   11248:	ldr	r1, [r5]
   1124c:	bl	10e68 <fputs_unlocked@plt>
   11250:	movw	r1, #21243	; 0x52fb
   11254:	movt	r1, #1
   11258:	mov	r0, #0
   1125c:	mov	r2, #5
   11260:	bl	10ef8 <dcgettext@plt>
   11264:	ldr	r1, [r5]
   11268:	bl	10e68 <fputs_unlocked@plt>
   1126c:	movw	r1, #21288	; 0x5328
   11270:	movt	r1, #1
   11274:	mov	r0, #0
   11278:	mov	r2, #5
   1127c:	bl	10ef8 <dcgettext@plt>
   11280:	ldr	r1, [r5]
   11284:	bl	10e68 <fputs_unlocked@plt>
   11288:	bl	11338 <__assert_fail@plt+0x26c>
   1128c:	mov	r0, r4
   11290:	bl	10fc4 <exit@plt>
   11294:	movw	r0, #24904	; 0x6148
   11298:	movt	r0, #2
   1129c:	ldr	r5, [r0]
   112a0:	movw	r1, #20964	; 0x51e4
   112a4:	movt	r1, #1
   112a8:	mov	r0, #0
   112ac:	mov	r2, #5
   112b0:	bl	10ef8 <dcgettext@plt>
   112b4:	mov	r2, r0
   112b8:	movw	r0, #24948	; 0x6174
   112bc:	movt	r0, #2
   112c0:	ldr	r3, [r0]
   112c4:	mov	r0, r5
   112c8:	mov	r1, #1
   112cc:	bl	1103c <__fprintf_chk@plt>
   112d0:	mov	r0, r4
   112d4:	bl	10fc4 <exit@plt>
   112d8:	push	{fp, lr}
   112dc:	mov	fp, sp
   112e0:	movw	r1, #21427	; 0x53b3
   112e4:	movt	r1, #1
   112e8:	mov	r0, #0
   112ec:	mov	r2, #5
   112f0:	bl	10ef8 <dcgettext@plt>
   112f4:	movw	r1, #24916	; 0x6154
   112f8:	movt	r1, #2
   112fc:	ldr	r1, [r1]
   11300:	pop	{fp, lr}
   11304:	b	10e68 <fputs_unlocked@plt>
   11308:	push	{fp, lr}
   1130c:	mov	fp, sp
   11310:	movw	r1, #21483	; 0x53eb
   11314:	movt	r1, #1
   11318:	mov	r0, #0
   1131c:	mov	r2, #5
   11320:	bl	10ef8 <dcgettext@plt>
   11324:	movw	r1, #24916	; 0x6154
   11328:	movt	r1, #2
   1132c:	ldr	r1, [r1]
   11330:	pop	{fp, lr}
   11334:	b	10e68 <fputs_unlocked@plt>
   11338:	push	{r4, r5, r6, sl, fp, lr}
   1133c:	add	fp, sp, #16
   11340:	sub	sp, sp, #56	; 0x38
   11344:	movw	r0, #22040	; 0x5618
   11348:	movt	r0, #1
   1134c:	add	r1, r0, #32
   11350:	mov	r2, #48	; 0x30
   11354:	vld1.64	{d16-d17}, [r1]
   11358:	mov	r6, sp
   1135c:	add	r1, r6, #32
   11360:	add	r3, r0, #16
   11364:	vld1.64	{d18-d19}, [r0], r2
   11368:	vld1.64	{d20-d21}, [r3]
   1136c:	vldr	d22, [r0]
   11370:	vst1.64	{d16-d17}, [r1]
   11374:	add	r0, r6, #16
   11378:	vst1.64	{d20-d21}, [r0]
   1137c:	mov	r0, r6
   11380:	vst1.64	{d18-d19}, [r0], r2
   11384:	vstr	d22, [r0]
   11388:	ldr	r1, [sp]
   1138c:	cmp	r1, #0
   11390:	movw	r4, #21342	; 0x535e
   11394:	movt	r4, #1
   11398:	beq	113c0 <__assert_fail@plt+0x2f4>
   1139c:	mov	r6, sp
   113a0:	movw	r5, #21342	; 0x535e
   113a4:	movt	r5, #1
   113a8:	mov	r0, r5
   113ac:	bl	10e80 <strcmp@plt>
   113b0:	cmp	r0, #0
   113b4:	ldrne	r1, [r6, #8]!
   113b8:	cmpne	r1, #0
   113bc:	bne	113a8 <__assert_fail@plt+0x2dc>
   113c0:	ldr	r5, [r6, #4]
   113c4:	movw	r1, #21653	; 0x5495
   113c8:	movt	r1, #1
   113cc:	mov	r0, #0
   113d0:	mov	r2, #5
   113d4:	bl	10ef8 <dcgettext@plt>
   113d8:	mov	r1, r0
   113dc:	movw	r2, #21397	; 0x5395
   113e0:	movt	r2, #1
   113e4:	movw	r3, #21676	; 0x54ac
   113e8:	movt	r3, #1
   113ec:	mov	r0, #1
   113f0:	bl	11018 <__printf_chk@plt>
   113f4:	cmp	r5, #0
   113f8:	moveq	r5, r4
   113fc:	mov	r0, #5
   11400:	mov	r1, #0
   11404:	bl	11060 <setlocale@plt>
   11408:	cmp	r0, #0
   1140c:	beq	1144c <__assert_fail@plt+0x380>
   11410:	movw	r1, #21716	; 0x54d4
   11414:	movt	r1, #1
   11418:	mov	r2, #3
   1141c:	bl	110a8 <strncmp@plt>
   11420:	cmp	r0, #0
   11424:	beq	1144c <__assert_fail@plt+0x380>
   11428:	movw	r1, #21720	; 0x54d8
   1142c:	movt	r1, #1
   11430:	mov	r0, #0
   11434:	mov	r2, #5
   11438:	bl	10ef8 <dcgettext@plt>
   1143c:	movw	r1, #24916	; 0x6154
   11440:	movt	r1, #2
   11444:	ldr	r1, [r1]
   11448:	bl	10e68 <fputs_unlocked@plt>
   1144c:	movw	r1, #21791	; 0x551f
   11450:	movt	r1, #1
   11454:	mov	r0, #0
   11458:	mov	r2, #5
   1145c:	bl	10ef8 <dcgettext@plt>
   11460:	mov	r1, r0
   11464:	movw	r2, #21676	; 0x54ac
   11468:	movt	r2, #1
   1146c:	mov	r0, #1
   11470:	mov	r3, r4
   11474:	bl	11018 <__printf_chk@plt>
   11478:	movw	r0, #21586	; 0x5452
   1147c:	movt	r0, #1
   11480:	movw	r6, #21868	; 0x556c
   11484:	movt	r6, #1
   11488:	cmp	r5, r4
   1148c:	moveq	r6, r0
   11490:	movw	r1, #21818	; 0x553a
   11494:	movt	r1, #1
   11498:	mov	r0, #0
   1149c:	mov	r2, #5
   114a0:	bl	10ef8 <dcgettext@plt>
   114a4:	mov	r1, r0
   114a8:	mov	r0, #1
   114ac:	mov	r2, r5
   114b0:	mov	r3, r6
   114b4:	sub	sp, fp, #16
   114b8:	pop	{r4, r5, r6, sl, fp, lr}
   114bc:	b	11018 <__printf_chk@plt>
   114c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114c4:	add	fp, sp, #28
   114c8:	sub	sp, sp, #28
   114cc:	mov	r5, r1
   114d0:	mov	r4, r0
   114d4:	ldr	r0, [r1]
   114d8:	bl	11e34 <__assert_fail@plt+0xd68>
   114dc:	movw	r1, #21868	; 0x556c
   114e0:	movt	r1, #1
   114e4:	mov	r0, #6
   114e8:	bl	11060 <setlocale@plt>
   114ec:	movw	r6, #21401	; 0x5399
   114f0:	movt	r6, #1
   114f4:	movw	r1, #21347	; 0x5363
   114f8:	movt	r1, #1
   114fc:	mov	r0, r6
   11500:	bl	1109c <bindtextdomain@plt>
   11504:	mov	r0, r6
   11508:	bl	10f10 <textdomain@plt>
   1150c:	movw	r0, #7004	; 0x1b5c
   11510:	movt	r0, #1
   11514:	bl	151c0 <__assert_fail@plt+0x40f4>
   11518:	movw	r0, #24928	; 0x6160
   1151c:	movt	r0, #2
   11520:	mov	r8, #0
   11524:	strb	r8, [r0]
   11528:	movw	r0, #24929	; 0x6161
   1152c:	movt	r0, #2
   11530:	strb	r8, [r0]
   11534:	movw	r0, #24930	; 0x6162
   11538:	movt	r0, #2
   1153c:	strb	r8, [r0]
   11540:	str	r8, [sp]
   11544:	movw	r2, #21904	; 0x5590
   11548:	movt	r2, #1
   1154c:	movw	r3, #21940	; 0x55b4
   11550:	movt	r3, #1
   11554:	mov	r0, r4
   11558:	mov	r1, r5
   1155c:	bl	10fac <getopt_long@plt>
   11560:	mov	r7, #80	; 0x50
   11564:	cmn	r0, #1
   11568:	beq	11664 <__assert_fail@plt+0x598>
   1156c:	movw	r9, #24920	; 0x6158
   11570:	movt	r9, #2
   11574:	movw	sl, #21904	; 0x5590
   11578:	movt	sl, #1
   1157c:	movw	r6, #21940	; 0x55b4
   11580:	movt	r6, #1
   11584:	b	11600 <__assert_fail@plt+0x534>
   11588:	strb	r8, [sp, #27]
   1158c:	strb	r0, [sp, #26]
   11590:	add	r0, sp, #26
   11594:	str	r0, [r9]
   11598:	ldr	r7, [r9]
   1159c:	mov	r0, #0
   115a0:	movw	r1, #21371	; 0x537b
   115a4:	movt	r1, #1
   115a8:	mov	r2, #5
   115ac:	bl	10ef8 <dcgettext@plt>
   115b0:	mvn	r1, #9
   115b4:	stm	sp, {r1, r8}
   115b8:	movw	r1, #21868	; 0x556c
   115bc:	movt	r1, #1
   115c0:	str	r1, [sp, #8]
   115c4:	str	r0, [sp, #12]
   115c8:	str	r8, [sp, #16]
   115cc:	mov	r0, r7
   115d0:	mov	r2, #1
   115d4:	mov	r3, #0
   115d8:	bl	143c4 <__assert_fail@plt+0x32f8>
   115dc:	mov	r7, r0
   115e0:	str	r8, [sp]
   115e4:	mov	r0, r4
   115e8:	mov	r1, r5
   115ec:	mov	r2, sl
   115f0:	mov	r3, r6
   115f4:	bl	10fac <getopt_long@plt>
   115f8:	cmn	r0, #1
   115fc:	beq	11664 <__assert_fail@plt+0x598>
   11600:	sub	r1, r0, #48	; 0x30
   11604:	cmp	r1, #10
   11608:	bcs	11620 <__assert_fail@plt+0x554>
   1160c:	ldr	r1, [r9]
   11610:	cmp	r1, #0
   11614:	beq	11588 <__assert_fail@plt+0x4bc>
   11618:	sub	r0, r1, #1
   1161c:	b	11594 <__assert_fail@plt+0x4c8>
   11620:	cmp	r0, #114	; 0x72
   11624:	ble	1163c <__assert_fail@plt+0x570>
   11628:	cmp	r0, #115	; 0x73
   1162c:	beq	11650 <__assert_fail@plt+0x584>
   11630:	cmp	r0, #119	; 0x77
   11634:	beq	11598 <__assert_fail@plt+0x4cc>
   11638:	b	11754 <__assert_fail@plt+0x688>
   1163c:	cmp	r0, #98	; 0x62
   11640:	bne	116f4 <__assert_fail@plt+0x628>
   11644:	movw	r0, #24929	; 0x6161
   11648:	movt	r0, #2
   1164c:	b	11658 <__assert_fail@plt+0x58c>
   11650:	movw	r0, #24930	; 0x6162
   11654:	movt	r0, #2
   11658:	mov	r1, #1
   1165c:	strb	r1, [r0]
   11660:	b	115e0 <__assert_fail@plt+0x514>
   11664:	movw	r0, #24896	; 0x6140
   11668:	movt	r0, #2
   1166c:	ldr	r0, [r0]
   11670:	cmp	r0, r4
   11674:	bne	11690 <__assert_fail@plt+0x5c4>
   11678:	movw	r0, #22196	; 0x56b4
   1167c:	movt	r0, #1
   11680:	mov	r1, r7
   11684:	bl	11774 <__assert_fail@plt+0x6a8>
   11688:	mov	r6, r0
   1168c:	b	116bc <__assert_fail@plt+0x5f0>
   11690:	mov	r6, #1
   11694:	bge	116bc <__assert_fail@plt+0x5f0>
   11698:	add	r5, r5, r0, lsl #2
   1169c:	sub	r4, r4, r0
   116a0:	mov	r6, #1
   116a4:	ldr	r0, [r5], #4
   116a8:	mov	r1, r7
   116ac:	bl	11774 <__assert_fail@plt+0x6a8>
   116b0:	and	r6, r6, r0
   116b4:	subs	r4, r4, #1
   116b8:	bne	116a4 <__assert_fail@plt+0x5d8>
   116bc:	movw	r0, #24928	; 0x6160
   116c0:	movt	r0, #2
   116c4:	ldrb	r0, [r0]
   116c8:	cmp	r0, #1
   116cc:	bne	116e8 <__assert_fail@plt+0x61c>
   116d0:	movw	r0, #24912	; 0x6150
   116d4:	movt	r0, #2
   116d8:	ldr	r0, [r0]
   116dc:	bl	11c84 <__assert_fail@plt+0xbb8>
   116e0:	cmn	r0, #1
   116e4:	beq	1175c <__assert_fail@plt+0x690>
   116e8:	eor	r0, r6, #1
   116ec:	sub	sp, fp, #28
   116f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f4:	cmn	r0, #3
   116f8:	beq	1170c <__assert_fail@plt+0x640>
   116fc:	cmn	r0, #2
   11700:	bne	11754 <__assert_fail@plt+0x688>
   11704:	mov	r0, #0
   11708:	bl	111c8 <__assert_fail@plt+0xfc>
   1170c:	movw	r0, #24816	; 0x60f0
   11710:	movt	r0, #2
   11714:	ldr	r3, [r0]
   11718:	movw	r0, #24916	; 0x6154
   1171c:	movt	r0, #2
   11720:	ldr	r0, [r0]
   11724:	mov	r1, #0
   11728:	movw	r2, #21411	; 0x53a3
   1172c:	movt	r2, #1
   11730:	str	r2, [sp]
   11734:	str	r1, [sp, #4]
   11738:	movw	r1, #21342	; 0x535e
   1173c:	movt	r1, #1
   11740:	movw	r2, #21397	; 0x5395
   11744:	movt	r2, #1
   11748:	bl	13e00 <__assert_fail@plt+0x2d34>
   1174c:	mov	r0, #0
   11750:	bl	10fc4 <exit@plt>
   11754:	mov	r0, #1
   11758:	bl	111c8 <__assert_fail@plt+0xfc>
   1175c:	bl	10ff4 <__errno_location@plt>
   11760:	ldr	r1, [r0]
   11764:	movw	r2, #22196	; 0x56b4
   11768:	movt	r2, #1
   1176c:	mov	r0, #1
   11770:	bl	10f70 <error@plt>
   11774:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11778:	add	fp, sp, #28
   1177c:	sub	sp, sp, #20
   11780:	str	r1, [sp, #16]
   11784:	mov	r7, r0
   11788:	movw	r1, #22196	; 0x56b4
   1178c:	movt	r1, #1
   11790:	bl	10e80 <strcmp@plt>
   11794:	cmp	r0, #0
   11798:	beq	119d8 <__assert_fail@plt+0x90c>
   1179c:	movw	r1, #22121	; 0x5669
   117a0:	movt	r1, #1
   117a4:	mov	r0, r7
   117a8:	bl	11090 <fopen64@plt>
   117ac:	mov	r4, r0
   117b0:	cmp	r4, #0
   117b4:	beq	119fc <__assert_fail@plt+0x930>
   117b8:	mov	r0, r4
   117bc:	mov	r1, #2
   117c0:	bl	11c48 <__assert_fail@plt+0xb7c>
   117c4:	mov	r0, r4
   117c8:	bl	10eec <getc_unlocked@plt>
   117cc:	cmn	r0, #1
   117d0:	str	r7, [sp]
   117d4:	str	r4, [sp, #4]
   117d8:	beq	11a08 <__assert_fail@plt+0x93c>
   117dc:	mov	r8, #0
   117e0:	mov	r4, #0
   117e4:	b	1182c <__assert_fail@plt+0x760>
   117e8:	movw	r0, #24932	; 0x6164
   117ec:	movt	r0, #2
   117f0:	ldr	r0, [r0]
   117f4:	mov	r1, #10
   117f8:	strb	r1, [r0, r4]
   117fc:	movw	r1, #24916	; 0x6154
   11800:	movt	r1, #2
   11804:	ldr	r3, [r1]
   11808:	mov	r1, #1
   1180c:	mov	r2, r5
   11810:	bl	10ee0 <fwrite_unlocked@plt>
   11814:	mov	r4, #0
   11818:	mov	r8, #0
   1181c:	ldr	r0, [sp, #4]
   11820:	bl	10eec <getc_unlocked@plt>
   11824:	cmn	r0, #1
   11828:	beq	11a0c <__assert_fail@plt+0x940>
   1182c:	str	r0, [sp, #8]
   11830:	movw	r0, #24936	; 0x6168
   11834:	movt	r0, #2
   11838:	ldr	r0, [r0]
   1183c:	add	r5, r4, #1
   11840:	cmp	r5, r0
   11844:	bcc	11868 <__assert_fail@plt+0x79c>
   11848:	movw	r0, #24932	; 0x6164
   1184c:	movt	r0, #2
   11850:	mov	r6, r0
   11854:	ldr	r0, [r0]
   11858:	movw	r1, #24936	; 0x6168
   1185c:	movt	r1, #2
   11860:	bl	13fc4 <__assert_fail@plt+0x2ef8>
   11864:	str	r0, [r6]
   11868:	ldr	r0, [sp, #8]
   1186c:	cmp	r0, #10
   11870:	beq	117e8 <__assert_fail@plt+0x71c>
   11874:	uxtb	r1, r0
   11878:	mov	r0, r8
   1187c:	str	r1, [sp, #12]
   11880:	b	118c4 <__assert_fail@plt+0x7f8>
   11884:	movw	r0, #24932	; 0x6164
   11888:	movt	r0, #2
   1188c:	ldr	r0, [r0]
   11890:	cmp	r4, #0
   11894:	beq	119c8 <__assert_fail@plt+0x8fc>
   11898:	mov	r1, #10
   1189c:	strb	r1, [r0, r4]
   118a0:	movw	r1, #24916	; 0x6154
   118a4:	movt	r1, #2
   118a8:	ldr	r3, [r1]
   118ac:	add	r2, r4, #1
   118b0:	mov	r1, #1
   118b4:	bl	10ee0 <fwrite_unlocked@plt>
   118b8:	mov	r4, #0
   118bc:	mov	r0, #0
   118c0:	ldr	r1, [sp, #12]
   118c4:	bl	11ae4 <__assert_fail@plt+0xa18>
   118c8:	mov	r8, r0
   118cc:	ldr	r0, [sp, #16]
   118d0:	cmp	r8, r0
   118d4:	bls	119ac <__assert_fail@plt+0x8e0>
   118d8:	movw	r0, #24930	; 0x6162
   118dc:	movt	r0, #2
   118e0:	ldrb	r0, [r0]
   118e4:	cmp	r0, #1
   118e8:	bne	11884 <__assert_fail@plt+0x7b8>
   118ec:	movw	r0, #24932	; 0x6164
   118f0:	movt	r0, #2
   118f4:	ldr	r0, [r0]
   118f8:	add	r0, r0, r4
   118fc:	sub	r5, r0, #1
   11900:	mov	sl, #0
   11904:	adds	r0, r4, sl
   11908:	beq	11884 <__assert_fail@plt+0x7b8>
   1190c:	mov	r9, sl
   11910:	bl	10fb8 <__ctype_b_loc@plt>
   11914:	ldrb	r6, [r5, sl]
   11918:	ldr	r7, [r0]
   1191c:	mov	r0, r6
   11920:	bl	11b38 <__assert_fail@plt+0xa6c>
   11924:	ldrb	r0, [r7, r6, lsl #1]
   11928:	sub	sl, sl, #1
   1192c:	tst	r0, #1
   11930:	beq	11904 <__assert_fail@plt+0x838>
   11934:	add	r0, r4, sl
   11938:	add	r2, r0, #1
   1193c:	movw	r0, #24916	; 0x6154
   11940:	movt	r0, #2
   11944:	ldr	r3, [r0]
   11948:	movw	r5, #24932	; 0x6164
   1194c:	movt	r5, #2
   11950:	ldr	r0, [r5]
   11954:	mov	r1, #1
   11958:	bl	10ee0 <fwrite_unlocked@plt>
   1195c:	mov	r0, #10
   11960:	bl	110c0 <putchar_unlocked@plt>
   11964:	ldr	r6, [r5]
   11968:	add	r0, r6, r4
   1196c:	add	r0, r0, sl
   11970:	add	r1, r0, #1
   11974:	mvn	r4, sl
   11978:	mov	r0, r6
   1197c:	mov	r2, r4
   11980:	bl	10ea4 <memmove@plt>
   11984:	cmn	sl, #1
   11988:	beq	118b8 <__assert_fail@plt+0x7ec>
   1198c:	mov	r5, #0
   11990:	mov	r0, #0
   11994:	ldrb	r1, [r6, -r5]
   11998:	bl	11ae4 <__assert_fail@plt+0xa18>
   1199c:	sub	r5, r5, #1
   119a0:	cmp	r9, r5
   119a4:	bne	11994 <__assert_fail@plt+0x8c8>
   119a8:	b	118c0 <__assert_fail@plt+0x7f4>
   119ac:	movw	r0, #24932	; 0x6164
   119b0:	movt	r0, #2
   119b4:	ldr	r0, [r0]
   119b8:	ldr	r1, [sp, #8]
   119bc:	strb	r1, [r0, r4]
   119c0:	add	r4, r4, #1
   119c4:	b	1181c <__assert_fail@plt+0x750>
   119c8:	ldr	r1, [sp, #8]
   119cc:	strb	r1, [r0]
   119d0:	mov	r4, #1
   119d4:	b	1181c <__assert_fail@plt+0x750>
   119d8:	movw	r0, #24928	; 0x6160
   119dc:	movt	r0, #2
   119e0:	mov	r1, #1
   119e4:	strb	r1, [r0]
   119e8:	movw	r0, #24912	; 0x6150
   119ec:	movt	r0, #2
   119f0:	ldr	r4, [r0]
   119f4:	cmp	r4, #0
   119f8:	bne	117b8 <__assert_fail@plt+0x6ec>
   119fc:	bl	10ff4 <__errno_location@plt>
   11a00:	ldr	r5, [r0]
   11a04:	b	11a94 <__assert_fail@plt+0x9c8>
   11a08:	mov	r4, #0
   11a0c:	bl	10ff4 <__errno_location@plt>
   11a10:	mov	r8, r0
   11a14:	ldr	r5, [r0]
   11a18:	ldr	r6, [sp, #4]
   11a1c:	mov	r0, r6
   11a20:	bl	10f58 <ferror_unlocked@plt>
   11a24:	cmp	r0, #0
   11a28:	moveq	r5, r0
   11a2c:	cmp	r4, #0
   11a30:	beq	11a58 <__assert_fail@plt+0x98c>
   11a34:	movw	r0, #24916	; 0x6154
   11a38:	movt	r0, #2
   11a3c:	ldr	r3, [r0]
   11a40:	movw	r0, #24932	; 0x6164
   11a44:	movt	r0, #2
   11a48:	ldr	r0, [r0]
   11a4c:	mov	r1, #1
   11a50:	mov	r2, r4
   11a54:	bl	10ee0 <fwrite_unlocked@plt>
   11a58:	movw	r1, #22196	; 0x56b4
   11a5c:	movt	r1, #1
   11a60:	ldr	r7, [sp]
   11a64:	mov	r0, r7
   11a68:	bl	10e80 <strcmp@plt>
   11a6c:	cmp	r0, #0
   11a70:	beq	11ac4 <__assert_fail@plt+0x9f8>
   11a74:	mov	r0, r6
   11a78:	bl	11c84 <__assert_fail@plt+0xbb8>
   11a7c:	cmp	r5, #0
   11a80:	bne	11a8c <__assert_fail@plt+0x9c0>
   11a84:	cmp	r0, #0
   11a88:	ldrne	r5, [r8]
   11a8c:	cmp	r5, #0
   11a90:	beq	11ad4 <__assert_fail@plt+0xa08>
   11a94:	mov	r4, #0
   11a98:	mov	r0, #0
   11a9c:	mov	r1, #3
   11aa0:	mov	r2, r7
   11aa4:	bl	134e8 <__assert_fail@plt+0x241c>
   11aa8:	mov	r3, r0
   11aac:	movw	r2, #22127	; 0x566f
   11ab0:	movt	r2, #1
   11ab4:	mov	r0, #0
   11ab8:	mov	r1, r5
   11abc:	bl	10f70 <error@plt>
   11ac0:	b	11ad8 <__assert_fail@plt+0xa0c>
   11ac4:	mov	r0, r6
   11ac8:	bl	11084 <clearerr_unlocked@plt>
   11acc:	cmp	r5, #0
   11ad0:	bne	11a94 <__assert_fail@plt+0x9c8>
   11ad4:	mov	r4, #1
   11ad8:	mov	r0, r4
   11adc:	sub	sp, fp, #28
   11ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11ae4:	movw	r2, #24929	; 0x6161
   11ae8:	movt	r2, #2
   11aec:	ldrb	r2, [r2]
   11af0:	cmp	r2, #0
   11af4:	bne	11b20 <__assert_fail@plt+0xa54>
   11af8:	cmp	r1, #13
   11afc:	moveq	r0, #0
   11b00:	bxeq	lr
   11b04:	cmp	r1, #9
   11b08:	beq	11b28 <__assert_fail@plt+0xa5c>
   11b0c:	cmp	r1, #8
   11b10:	bne	11b20 <__assert_fail@plt+0xa54>
   11b14:	cmp	r0, #0
   11b18:	subne	r0, r0, #1
   11b1c:	bx	lr
   11b20:	add	r0, r0, #1
   11b24:	bx	lr
   11b28:	and	r1, r0, #7
   11b2c:	sub	r0, r0, r1
   11b30:	add	r0, r0, #8
   11b34:	bx	lr
   11b38:	bx	lr
   11b3c:	movw	r1, #24940	; 0x616c
   11b40:	movt	r1, #2
   11b44:	str	r0, [r1]
   11b48:	bx	lr
   11b4c:	movw	r1, #24944	; 0x6170
   11b50:	movt	r1, #2
   11b54:	strb	r0, [r1]
   11b58:	bx	lr
   11b5c:	push	{r4, r5, r6, sl, fp, lr}
   11b60:	add	fp, sp, #16
   11b64:	sub	sp, sp, #8
   11b68:	movw	r0, #24916	; 0x6154
   11b6c:	movt	r0, #2
   11b70:	ldr	r0, [r0]
   11b74:	bl	14d04 <__assert_fail@plt+0x3c38>
   11b78:	cmp	r0, #0
   11b7c:	beq	11ba4 <__assert_fail@plt+0xad8>
   11b80:	movw	r0, #24944	; 0x6170
   11b84:	movt	r0, #2
   11b88:	ldrb	r0, [r0]
   11b8c:	cmp	r0, #0
   11b90:	beq	11bc4 <__assert_fail@plt+0xaf8>
   11b94:	bl	10ff4 <__errno_location@plt>
   11b98:	ldr	r0, [r0]
   11b9c:	cmp	r0, #32
   11ba0:	bne	11bc4 <__assert_fail@plt+0xaf8>
   11ba4:	movw	r0, #24904	; 0x6148
   11ba8:	movt	r0, #2
   11bac:	ldr	r0, [r0]
   11bb0:	bl	14d04 <__assert_fail@plt+0x3c38>
   11bb4:	cmp	r0, #0
   11bb8:	subeq	sp, fp, #16
   11bbc:	popeq	{r4, r5, r6, sl, fp, pc}
   11bc0:	b	11c34 <__assert_fail@plt+0xb68>
   11bc4:	movw	r1, #22111	; 0x565f
   11bc8:	movt	r1, #1
   11bcc:	mov	r0, #0
   11bd0:	mov	r2, #5
   11bd4:	bl	10ef8 <dcgettext@plt>
   11bd8:	mov	r4, r0
   11bdc:	movw	r0, #24940	; 0x616c
   11be0:	movt	r0, #2
   11be4:	ldr	r6, [r0]
   11be8:	bl	10ff4 <__errno_location@plt>
   11bec:	ldr	r5, [r0]
   11bf0:	cmp	r6, #0
   11bf4:	bne	11c10 <__assert_fail@plt+0xb44>
   11bf8:	movw	r2, #22127	; 0x566f
   11bfc:	movt	r2, #1
   11c00:	mov	r0, #0
   11c04:	mov	r1, r5
   11c08:	mov	r3, r4
   11c0c:	b	11c30 <__assert_fail@plt+0xb64>
   11c10:	mov	r0, r6
   11c14:	bl	134d8 <__assert_fail@plt+0x240c>
   11c18:	mov	r3, r0
   11c1c:	str	r4, [sp]
   11c20:	movw	r2, #22123	; 0x566b
   11c24:	movt	r2, #1
   11c28:	mov	r0, #0
   11c2c:	mov	r1, r5
   11c30:	bl	10f70 <error@plt>
   11c34:	movw	r0, #24820	; 0x60f4
   11c38:	movt	r0, #2
   11c3c:	ldr	r0, [r0]
   11c40:	bl	10ebc <_exit@plt>
   11c44:	b	10e8c <posix_fadvise64@plt>
   11c48:	cmp	r0, #0
   11c4c:	bxeq	lr
   11c50:	push	{r4, sl, fp, lr}
   11c54:	add	fp, sp, #8
   11c58:	sub	sp, sp, #16
   11c5c:	mov	r4, r1
   11c60:	bl	11024 <fileno@plt>
   11c64:	mov	r1, #0
   11c68:	str	r1, [sp]
   11c6c:	stmib	sp, {r1, r4}
   11c70:	mov	r2, #0
   11c74:	mov	r3, #0
   11c78:	bl	11c44 <__assert_fail@plt+0xb78>
   11c7c:	sub	sp, fp, #8
   11c80:	pop	{r4, sl, fp, pc}
   11c84:	push	{r4, r5, fp, lr}
   11c88:	add	fp, sp, #8
   11c8c:	sub	sp, sp, #8
   11c90:	mov	r4, r0
   11c94:	bl	11024 <fileno@plt>
   11c98:	cmn	r0, #1
   11c9c:	ble	11d14 <__assert_fail@plt+0xc48>
   11ca0:	mov	r0, r4
   11ca4:	bl	10f94 <__freading@plt>
   11ca8:	cmp	r0, #0
   11cac:	beq	11cd8 <__assert_fail@plt+0xc0c>
   11cb0:	mov	r0, r4
   11cb4:	bl	11024 <fileno@plt>
   11cb8:	mov	r1, #1
   11cbc:	str	r1, [sp]
   11cc0:	mov	r2, #0
   11cc4:	mov	r3, #0
   11cc8:	bl	10f34 <lseek64@plt>
   11ccc:	and	r0, r0, r1
   11cd0:	cmn	r0, #1
   11cd4:	beq	11d14 <__assert_fail@plt+0xc48>
   11cd8:	mov	r0, r4
   11cdc:	bl	11d24 <__assert_fail@plt+0xc58>
   11ce0:	cmp	r0, #0
   11ce4:	beq	11d14 <__assert_fail@plt+0xc48>
   11ce8:	bl	10ff4 <__errno_location@plt>
   11cec:	ldr	r5, [r0]
   11cf0:	mov	r0, r4
   11cf4:	bl	11048 <fclose@plt>
   11cf8:	cmp	r5, #0
   11cfc:	beq	11d0c <__assert_fail@plt+0xc40>
   11d00:	bl	10ff4 <__errno_location@plt>
   11d04:	str	r5, [r0]
   11d08:	mvn	r0, #0
   11d0c:	sub	sp, fp, #8
   11d10:	pop	{r4, r5, fp, pc}
   11d14:	mov	r0, r4
   11d18:	sub	sp, fp, #8
   11d1c:	pop	{r4, r5, fp, lr}
   11d20:	b	11048 <fclose@plt>
   11d24:	push	{r4, sl, fp, lr}
   11d28:	add	fp, sp, #8
   11d2c:	mov	r4, r0
   11d30:	cmp	r0, #0
   11d34:	beq	11d4c <__assert_fail@plt+0xc80>
   11d38:	mov	r0, r4
   11d3c:	bl	10f94 <__freading@plt>
   11d40:	cmp	r0, #0
   11d44:	movne	r0, r4
   11d48:	blne	11d58 <__assert_fail@plt+0xc8c>
   11d4c:	mov	r0, r4
   11d50:	pop	{r4, sl, fp, lr}
   11d54:	b	10e98 <fflush@plt>
   11d58:	push	{fp, lr}
   11d5c:	mov	fp, sp
   11d60:	sub	sp, sp, #8
   11d64:	ldrb	r1, [r0, #1]
   11d68:	tst	r1, #1
   11d6c:	beq	11d84 <__assert_fail@plt+0xcb8>
   11d70:	mov	r1, #1
   11d74:	str	r1, [sp]
   11d78:	mov	r2, #0
   11d7c:	mov	r3, #0
   11d80:	bl	11d8c <__assert_fail@plt+0xcc0>
   11d84:	mov	sp, fp
   11d88:	pop	{fp, pc}
   11d8c:	push	{r4, r5, r6, r7, fp, lr}
   11d90:	add	fp, sp, #16
   11d94:	sub	sp, sp, #8
   11d98:	mov	r5, r3
   11d9c:	mov	r6, r2
   11da0:	mov	r4, r0
   11da4:	ldr	r0, [r0, #4]
   11da8:	ldr	r1, [r4, #8]
   11dac:	cmp	r1, r0
   11db0:	bne	11dcc <__assert_fail@plt+0xd00>
   11db4:	ldrd	r0, [r4, #16]
   11db8:	cmp	r1, r0
   11dbc:	bne	11dcc <__assert_fail@plt+0xd00>
   11dc0:	ldr	r0, [r4, #36]	; 0x24
   11dc4:	cmp	r0, #0
   11dc8:	beq	11de4 <__assert_fail@plt+0xd18>
   11dcc:	mov	r0, r4
   11dd0:	mov	r2, r6
   11dd4:	mov	r3, r5
   11dd8:	sub	sp, fp, #16
   11ddc:	pop	{r4, r5, r6, r7, fp, lr}
   11de0:	b	11054 <fseeko64@plt>
   11de4:	ldr	r7, [fp, #8]
   11de8:	mov	r0, r4
   11dec:	bl	11024 <fileno@plt>
   11df0:	str	r7, [sp]
   11df4:	mov	r2, r6
   11df8:	mov	r3, r5
   11dfc:	bl	10f34 <lseek64@plt>
   11e00:	and	r2, r0, r1
   11e04:	cmn	r2, #1
   11e08:	beq	11e28 <__assert_fail@plt+0xd5c>
   11e0c:	strd	r0, [r4, #80]	; 0x50
   11e10:	ldr	r0, [r4]
   11e14:	bic	r0, r0, #16
   11e18:	str	r0, [r4]
   11e1c:	mov	r0, #0
   11e20:	sub	sp, fp, #16
   11e24:	pop	{r4, r5, r6, r7, fp, pc}
   11e28:	mvn	r0, #0
   11e2c:	sub	sp, fp, #16
   11e30:	pop	{r4, r5, r6, r7, fp, pc}
   11e34:	push	{r4, r5, fp, lr}
   11e38:	add	fp, sp, #8
   11e3c:	cmp	r0, #0
   11e40:	beq	11ed4 <__assert_fail@plt+0xe08>
   11e44:	mov	r4, r0
   11e48:	mov	r1, #47	; 0x2f
   11e4c:	bl	1106c <strrchr@plt>
   11e50:	cmp	r0, #0
   11e54:	mov	r5, r4
   11e58:	addne	r5, r0, #1
   11e5c:	sub	r0, r5, r4
   11e60:	cmp	r0, #7
   11e64:	blt	11eb8 <__assert_fail@plt+0xdec>
   11e68:	sub	r0, r5, #7
   11e6c:	movw	r1, #22186	; 0x56aa
   11e70:	movt	r1, #1
   11e74:	mov	r2, #7
   11e78:	bl	110a8 <strncmp@plt>
   11e7c:	cmp	r0, #0
   11e80:	bne	11eb8 <__assert_fail@plt+0xdec>
   11e84:	movw	r1, #22194	; 0x56b2
   11e88:	movt	r1, #1
   11e8c:	mov	r0, r5
   11e90:	mov	r2, #3
   11e94:	bl	110a8 <strncmp@plt>
   11e98:	cmp	r0, #0
   11e9c:	beq	11ea8 <__assert_fail@plt+0xddc>
   11ea0:	mov	r4, r5
   11ea4:	b	11eb8 <__assert_fail@plt+0xdec>
   11ea8:	add	r4, r5, #3
   11eac:	movw	r0, #24888	; 0x6138
   11eb0:	movt	r0, #2
   11eb4:	str	r4, [r0]
   11eb8:	movw	r0, #24892	; 0x613c
   11ebc:	movt	r0, #2
   11ec0:	str	r4, [r0]
   11ec4:	movw	r0, #24948	; 0x6174
   11ec8:	movt	r0, #2
   11ecc:	str	r4, [r0]
   11ed0:	pop	{r4, r5, fp, pc}
   11ed4:	movw	r0, #24904	; 0x6148
   11ed8:	movt	r0, #2
   11edc:	ldr	r3, [r0]
   11ee0:	movw	r0, #22130	; 0x5672
   11ee4:	movt	r0, #1
   11ee8:	mov	r1, #55	; 0x37
   11eec:	mov	r2, #1
   11ef0:	bl	10f28 <fwrite@plt>
   11ef4:	bl	110b4 <abort@plt>
   11ef8:	push	{r4, r5, r6, sl, fp, lr}
   11efc:	add	fp, sp, #16
   11f00:	mov	r4, r0
   11f04:	movw	r0, #24952	; 0x6178
   11f08:	movt	r0, #2
   11f0c:	cmp	r4, #0
   11f10:	moveq	r4, r0
   11f14:	bl	10ff4 <__errno_location@plt>
   11f18:	mov	r5, r0
   11f1c:	ldr	r6, [r0]
   11f20:	mov	r0, r4
   11f24:	mov	r1, #48	; 0x30
   11f28:	bl	141f0 <__assert_fail@plt+0x3124>
   11f2c:	str	r6, [r5]
   11f30:	pop	{r4, r5, r6, sl, fp, pc}
   11f34:	movw	r1, #24952	; 0x6178
   11f38:	movt	r1, #2
   11f3c:	cmp	r0, #0
   11f40:	movne	r1, r0
   11f44:	ldr	r0, [r1]
   11f48:	bx	lr
   11f4c:	movw	r2, #24952	; 0x6178
   11f50:	movt	r2, #2
   11f54:	cmp	r0, #0
   11f58:	movne	r2, r0
   11f5c:	str	r1, [r2]
   11f60:	bx	lr
   11f64:	movw	r3, #24952	; 0x6178
   11f68:	movt	r3, #2
   11f6c:	cmp	r0, #0
   11f70:	movne	r3, r0
   11f74:	ubfx	r0, r1, #5, #3
   11f78:	add	ip, r3, r0, lsl #2
   11f7c:	ldr	r3, [ip, #8]
   11f80:	and	r1, r1, #31
   11f84:	mov	r0, #1
   11f88:	and	r0, r0, r3, lsr r1
   11f8c:	and	r2, r2, #1
   11f90:	eor	r2, r0, r2
   11f94:	eor	r1, r3, r2, lsl r1
   11f98:	str	r1, [ip, #8]
   11f9c:	bx	lr
   11fa0:	movw	r2, #24952	; 0x6178
   11fa4:	movt	r2, #2
   11fa8:	cmp	r0, #0
   11fac:	movne	r2, r0
   11fb0:	ldr	r0, [r2, #4]
   11fb4:	str	r1, [r2, #4]
   11fb8:	bx	lr
   11fbc:	push	{fp, lr}
   11fc0:	mov	fp, sp
   11fc4:	movw	r3, #24952	; 0x6178
   11fc8:	movt	r3, #2
   11fcc:	cmp	r0, #0
   11fd0:	movne	r3, r0
   11fd4:	mov	r0, #10
   11fd8:	str	r0, [r3]
   11fdc:	cmp	r1, #0
   11fe0:	cmpne	r2, #0
   11fe4:	bne	11fec <__assert_fail@plt+0xf20>
   11fe8:	bl	110b4 <abort@plt>
   11fec:	str	r1, [r3, #40]	; 0x28
   11ff0:	str	r2, [r3, #44]	; 0x2c
   11ff4:	pop	{fp, pc}
   11ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	add	fp, sp, #28
   12000:	sub	sp, sp, #20
   12004:	mov	r8, r3
   12008:	mov	r9, r2
   1200c:	mov	sl, r1
   12010:	mov	r7, r0
   12014:	ldr	r0, [fp, #8]
   12018:	movw	r5, #24952	; 0x6178
   1201c:	movt	r5, #2
   12020:	cmp	r0, #0
   12024:	movne	r5, r0
   12028:	bl	10ff4 <__errno_location@plt>
   1202c:	mov	r4, r0
   12030:	ldm	r5, {r0, r1}
   12034:	ldr	r2, [r5, #40]	; 0x28
   12038:	ldr	r3, [r5, #44]	; 0x2c
   1203c:	ldr	r6, [r4]
   12040:	add	r5, r5, #8
   12044:	stm	sp, {r0, r1, r5}
   12048:	str	r2, [sp, #12]
   1204c:	str	r3, [sp, #16]
   12050:	mov	r0, r7
   12054:	mov	r1, sl
   12058:	mov	r2, r9
   1205c:	mov	r3, r8
   12060:	bl	12070 <__assert_fail@plt+0xfa4>
   12064:	str	r6, [r4]
   12068:	sub	sp, fp, #28
   1206c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12070:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12074:	add	fp, sp, #28
   12078:	sub	sp, sp, #156	; 0x9c
   1207c:	mov	r9, r3
   12080:	mov	r7, r1
   12084:	mov	r6, r0
   12088:	str	r2, [fp, #-80]	; 0xffffffb0
   1208c:	add	r0, r2, #1
   12090:	str	r0, [sp, #76]	; 0x4c
   12094:	ldr	r0, [fp, #12]
   12098:	and	r1, r0, #1
   1209c:	str	r1, [sp, #40]	; 0x28
   120a0:	and	r1, r0, #4
   120a4:	str	r1, [sp, #36]	; 0x24
   120a8:	ubfx	r4, r0, #1, #1
   120ac:	bl	10f40 <__ctype_get_mb_cur_max@plt>
   120b0:	str	r0, [sp, #44]	; 0x2c
   120b4:	ldr	r0, [fp, #24]
   120b8:	str	r0, [sp, #88]	; 0x58
   120bc:	ldr	r0, [fp, #20]
   120c0:	str	r0, [sp, #80]	; 0x50
   120c4:	ldr	r1, [fp, #8]
   120c8:	mov	r0, #0
   120cc:	str	r0, [sp, #84]	; 0x54
   120d0:	mov	r0, #0
   120d4:	str	r0, [fp, #-84]	; 0xffffffac
   120d8:	mov	r0, #0
   120dc:	str	r0, [fp, #-72]	; 0xffffffb8
   120e0:	mov	r0, #0
   120e4:	mov	r2, #0
   120e8:	str	r2, [fp, #-56]	; 0xffffffc8
   120ec:	mov	r2, #0
   120f0:	str	r2, [sp, #64]	; 0x40
   120f4:	mov	r2, #1
   120f8:	str	r2, [fp, #-48]	; 0xffffffd0
   120fc:	cmp	r1, #10
   12100:	bhi	1302c <__assert_fail@plt+0x1f60>
   12104:	mov	sl, r7
   12108:	mov	r7, r1
   1210c:	add	r1, pc, #24
   12110:	mov	r8, #0
   12114:	mov	r2, #1
   12118:	mov	r3, #0
   1211c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12120:	mov	lr, r9
   12124:	mov	r5, r6
   12128:	ldr	pc, [r1, r7, lsl #2]
   1212c:	andeq	r2, r1, r0, lsl #4
   12130:	andeq	r2, r1, r0, asr #4
   12134:	andeq	r2, r1, r0, lsl r2
   12138:	strdeq	r2, [r1], -r8
   1213c:	andeq	r2, r1, r4, lsr r2
   12140:	muleq	r1, r4, r2
   12144:	andeq	r2, r1, r0, lsr #4
   12148:	strdeq	r2, [r1], -r0
   1214c:	andeq	r2, r1, r8, asr r1
   12150:	andeq	r2, r1, r8, asr r1
   12154:	andeq	r2, r1, r4, lsl #3
   12158:	movw	r0, #22276	; 0x5704
   1215c:	movt	r0, #1
   12160:	mov	r1, r7
   12164:	bl	13634 <__assert_fail@plt+0x2568>
   12168:	str	r0, [sp, #80]	; 0x50
   1216c:	movw	r0, #22278	; 0x5706
   12170:	movt	r0, #1
   12174:	mov	r1, r7
   12178:	bl	13634 <__assert_fail@plt+0x2568>
   1217c:	mov	r5, r6
   12180:	str	r0, [sp, #88]	; 0x58
   12184:	mov	r8, #0
   12188:	tst	r4, #1
   1218c:	str	r7, [fp, #-64]	; 0xffffffc0
   12190:	bne	121c8 <__assert_fail@plt+0x10fc>
   12194:	ldr	r0, [sp, #80]	; 0x50
   12198:	ldrb	r0, [r0]
   1219c:	cmp	r0, #0
   121a0:	beq	121c8 <__assert_fail@plt+0x10fc>
   121a4:	ldr	r1, [sp, #80]	; 0x50
   121a8:	add	r1, r1, #1
   121ac:	mov	r8, #0
   121b0:	cmp	r8, sl
   121b4:	strbcc	r0, [r5, r8]
   121b8:	ldrb	r0, [r1, r8]
   121bc:	add	r8, r8, #1
   121c0:	cmp	r0, #0
   121c4:	bne	121b0 <__assert_fail@plt+0x10e4>
   121c8:	ldr	r7, [sp, #88]	; 0x58
   121cc:	mov	r0, r7
   121d0:	bl	10fdc <strlen@plt>
   121d4:	mov	r5, r6
   121d8:	str	r0, [fp, #-72]	; 0xffffffb8
   121dc:	str	r7, [fp, #-84]	; 0xffffffac
   121e0:	mov	r2, #1
   121e4:	mov	r3, r4
   121e8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   121ec:	mov	lr, r9
   121f0:	ldr	r7, [fp, #-64]	; 0xffffffc0
   121f4:	b	122f0 <__assert_fail@plt+0x1224>
   121f8:	mov	r0, #1
   121fc:	b	12240 <__assert_fail@plt+0x1174>
   12200:	mov	r7, #0
   12204:	mov	r8, #0
   12208:	mov	r2, r0
   1220c:	b	122ec <__assert_fail@plt+0x1220>
   12210:	tst	r4, #1
   12214:	bne	12240 <__assert_fail@plt+0x1174>
   12218:	mov	r2, r0
   1221c:	b	12268 <__assert_fail@plt+0x119c>
   12220:	mov	r0, #1
   12224:	str	r0, [fp, #-72]	; 0xffffffb8
   12228:	mov	r8, #0
   1222c:	mov	r7, #5
   12230:	b	122ac <__assert_fail@plt+0x11e0>
   12234:	mov	r2, #1
   12238:	tst	r4, #1
   1223c:	beq	12268 <__assert_fail@plt+0x119c>
   12240:	mov	r1, #1
   12244:	str	r1, [fp, #-72]	; 0xffffffb8
   12248:	mov	r8, #0
   1224c:	mov	r7, #2
   12250:	movw	r1, #22278	; 0x5706
   12254:	movt	r1, #1
   12258:	str	r1, [fp, #-84]	; 0xffffffac
   1225c:	mov	r2, r0
   12260:	mov	r3, #1
   12264:	b	122f0 <__assert_fail@plt+0x1224>
   12268:	mov	r8, #1
   1226c:	mov	r7, #2
   12270:	cmp	sl, #0
   12274:	movne	r0, #39	; 0x27
   12278:	strbne	r0, [r5]
   1227c:	movw	r0, #22278	; 0x5706
   12280:	movt	r0, #1
   12284:	str	r0, [fp, #-84]	; 0xffffffac
   12288:	mov	r0, #1
   1228c:	str	r0, [fp, #-72]	; 0xffffffb8
   12290:	b	122ec <__assert_fail@plt+0x1220>
   12294:	mov	r7, #5
   12298:	tst	r4, #1
   1229c:	beq	122c4 <__assert_fail@plt+0x11f8>
   122a0:	mov	r0, #1
   122a4:	str	r0, [fp, #-72]	; 0xffffffb8
   122a8:	mov	r8, #0
   122ac:	movw	r0, #22274	; 0x5702
   122b0:	movt	r0, #1
   122b4:	str	r0, [fp, #-84]	; 0xffffffac
   122b8:	mov	r2, #1
   122bc:	mov	r3, #1
   122c0:	b	122f0 <__assert_fail@plt+0x1224>
   122c4:	cmp	sl, #0
   122c8:	movne	r0, #34	; 0x22
   122cc:	strbne	r0, [r5]
   122d0:	mov	r8, #1
   122d4:	movw	r0, #22274	; 0x5702
   122d8:	movt	r0, #1
   122dc:	str	r0, [fp, #-84]	; 0xffffffac
   122e0:	mov	r0, #1
   122e4:	str	r0, [fp, #-72]	; 0xffffffb8
   122e8:	mov	r2, #1
   122ec:	mov	r3, #0
   122f0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   122f4:	cmp	r0, #0
   122f8:	movwne	r0, #1
   122fc:	and	r1, r0, r3
   12300:	and	r1, r2, r1
   12304:	str	r1, [sp, #56]	; 0x38
   12308:	sub	r1, r7, #2
   1230c:	clz	r1, r1
   12310:	lsr	r1, r1, #5
   12314:	and	r1, r1, r3
   12318:	str	r1, [sp, #68]	; 0x44
   1231c:	str	r7, [fp, #-64]	; 0xffffffc0
   12320:	subs	r1, r7, #2
   12324:	movwne	r1, #1
   12328:	eor	r4, r3, #1
   1232c:	str	r4, [fp, #-88]	; 0xffffffa8
   12330:	orr	r4, r1, r4
   12334:	str	r4, [sp, #72]	; 0x48
   12338:	and	r1, r1, r2
   1233c:	and	r0, r0, r1
   12340:	str	r0, [fp, #-60]	; 0xffffffc4
   12344:	str	r3, [fp, #-76]	; 0xffffffb4
   12348:	orr	r0, r1, r3
   1234c:	eor	r0, r0, #1
   12350:	ldr	r1, [fp, #16]
   12354:	clz	r1, r1
   12358:	lsr	r1, r1, #5
   1235c:	orr	r0, r1, r0
   12360:	str	r0, [fp, #-68]	; 0xffffffbc
   12364:	str	r2, [sp, #92]	; 0x5c
   12368:	eor	r0, r2, #1
   1236c:	str	r0, [sp, #60]	; 0x3c
   12370:	mov	r7, #0
   12374:	cmn	lr, #1
   12378:	beq	12388 <__assert_fail@plt+0x12bc>
   1237c:	cmp	r7, lr
   12380:	bne	12394 <__assert_fail@plt+0x12c8>
   12384:	b	12ea0 <__assert_fail@plt+0x1dd4>
   12388:	ldrb	r0, [ip, r7]
   1238c:	cmp	r0, #0
   12390:	beq	12ea0 <__assert_fail@plt+0x1dd4>
   12394:	mov	r9, #0
   12398:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1239c:	cmp	r0, #0
   123a0:	beq	123d4 <__assert_fail@plt+0x1308>
   123a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   123a8:	add	r4, r7, r0
   123ac:	cmp	r0, #2
   123b0:	bcc	123cc <__assert_fail@plt+0x1300>
   123b4:	cmn	lr, #1
   123b8:	bne	123cc <__assert_fail@plt+0x1300>
   123bc:	mov	r0, ip
   123c0:	bl	10fdc <strlen@plt>
   123c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   123c8:	mov	lr, r0
   123cc:	cmp	r4, lr
   123d0:	bls	123e0 <__assert_fail@plt+0x1314>
   123d4:	mov	r0, #0
   123d8:	str	r0, [fp, #-52]	; 0xffffffcc
   123dc:	b	12424 <__assert_fail@plt+0x1358>
   123e0:	mov	r4, lr
   123e4:	add	r0, ip, r7
   123e8:	ldr	r1, [fp, #-84]	; 0xffffffac
   123ec:	ldr	r2, [fp, #-72]	; 0xffffffb8
   123f0:	bl	10fd0 <bcmp@plt>
   123f4:	cmp	r0, #0
   123f8:	mov	r1, r0
   123fc:	movwne	r1, #1
   12400:	ldr	r2, [fp, #-88]	; 0xffffffa8
   12404:	orr	r1, r1, r2
   12408:	tst	r1, #1
   1240c:	beq	12f74 <__assert_fail@plt+0x1ea8>
   12410:	clz	r0, r0
   12414:	lsr	r0, r0, #5
   12418:	str	r0, [fp, #-52]	; 0xffffffcc
   1241c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12420:	mov	lr, r4
   12424:	ldrb	r4, [ip, r7]
   12428:	cmp	r4, #126	; 0x7e
   1242c:	bhi	1295c <__assert_fail@plt+0x1890>
   12430:	mov	r6, #1
   12434:	mov	r2, #110	; 0x6e
   12438:	mov	r0, #97	; 0x61
   1243c:	add	r3, pc, #4
   12440:	mov	r1, #0
   12444:	ldr	pc, [r3, r4, lsl #2]
   12448:			; <UNDEFINED> instruction: 0x000127bc
   1244c:	andeq	r2, r1, ip, asr r9
   12450:	andeq	r2, r1, ip, asr r9
   12454:	andeq	r2, r1, ip, asr r9
   12458:	andeq	r2, r1, ip, asr r9
   1245c:	andeq	r2, r1, ip, asr r9
   12460:	andeq	r2, r1, ip, asr r9
   12464:	andeq	r2, r1, r0, lsr sl
   12468:	muleq	r1, ip, r7
   1246c:	muleq	r1, r4, r7
   12470:	andeq	r2, r1, r8, lsr #15
   12474:	andeq	r2, r1, r4, asr #17
   12478:	andeq	r2, r1, ip, lsl #15
   1247c:	andeq	r2, r1, r4, lsr #15
   12480:	andeq	r2, r1, ip, asr r9
   12484:	andeq	r2, r1, ip, asr r9
   12488:	andeq	r2, r1, ip, asr r9
   1248c:	andeq	r2, r1, ip, asr r9
   12490:	andeq	r2, r1, ip, asr r9
   12494:	andeq	r2, r1, ip, asr r9
   12498:	andeq	r2, r1, ip, asr r9
   1249c:	andeq	r2, r1, ip, asr r9
   124a0:	andeq	r2, r1, ip, asr r9
   124a4:	andeq	r2, r1, ip, asr r9
   124a8:	andeq	r2, r1, ip, asr r9
   124ac:	andeq	r2, r1, ip, asr r9
   124b0:	andeq	r2, r1, ip, asr r9
   124b4:	andeq	r2, r1, ip, asr r9
   124b8:	andeq	r2, r1, ip, asr r9
   124bc:	andeq	r2, r1, ip, asr r9
   124c0:	andeq	r2, r1, ip, asr r9
   124c4:	andeq	r2, r1, ip, asr r9
   124c8:	andeq	r2, r1, r0, asr #14
   124cc:	andeq	r2, r1, r4, asr #14
   124d0:	andeq	r2, r1, r4, asr #14
   124d4:	andeq	r2, r1, ip, lsr #14
   124d8:	andeq	r2, r1, r4, asr #14
   124dc:	andeq	r2, r1, r4, asr #12
   124e0:	andeq	r2, r1, r4, asr #14
   124e4:	andeq	r2, r1, ip, asr #17
   124e8:	andeq	r2, r1, r4, asr #14
   124ec:	andeq	r2, r1, r4, asr #14
   124f0:	andeq	r2, r1, r4, asr #14
   124f4:	andeq	r2, r1, r4, asr #12
   124f8:	andeq	r2, r1, r4, asr #12
   124fc:	andeq	r2, r1, r4, asr #12
   12500:	andeq	r2, r1, r4, asr #12
   12504:	andeq	r2, r1, r4, asr #12
   12508:	andeq	r2, r1, r4, asr #12
   1250c:	andeq	r2, r1, r4, asr #12
   12510:	andeq	r2, r1, r4, asr #12
   12514:	andeq	r2, r1, r4, asr #12
   12518:	andeq	r2, r1, r4, asr #12
   1251c:	andeq	r2, r1, r4, asr #12
   12520:	andeq	r2, r1, r4, asr #12
   12524:	andeq	r2, r1, r4, asr #12
   12528:	andeq	r2, r1, r4, asr #12
   1252c:	andeq	r2, r1, r4, asr #12
   12530:	andeq	r2, r1, r4, asr #12
   12534:	andeq	r2, r1, r4, asr #14
   12538:	andeq	r2, r1, r4, asr #14
   1253c:	andeq	r2, r1, r4, asr #14
   12540:	andeq	r2, r1, r4, asr #14
   12544:	muleq	r1, r4, r8
   12548:	andeq	r2, r1, ip, asr r9
   1254c:	andeq	r2, r1, r4, asr #12
   12550:	andeq	r2, r1, r4, asr #12
   12554:	andeq	r2, r1, r4, asr #12
   12558:	andeq	r2, r1, r4, asr #12
   1255c:	andeq	r2, r1, r4, asr #12
   12560:	andeq	r2, r1, r4, asr #12
   12564:	andeq	r2, r1, r4, asr #12
   12568:	andeq	r2, r1, r4, asr #12
   1256c:	andeq	r2, r1, r4, asr #12
   12570:	andeq	r2, r1, r4, asr #12
   12574:	andeq	r2, r1, r4, asr #12
   12578:	andeq	r2, r1, r4, asr #12
   1257c:	andeq	r2, r1, r4, asr #12
   12580:	andeq	r2, r1, r4, asr #12
   12584:	andeq	r2, r1, r4, asr #12
   12588:	andeq	r2, r1, r4, asr #12
   1258c:	andeq	r2, r1, r4, asr #12
   12590:	andeq	r2, r1, r4, asr #12
   12594:	andeq	r2, r1, r4, asr #12
   12598:	andeq	r2, r1, r4, asr #12
   1259c:	andeq	r2, r1, r4, asr #12
   125a0:	andeq	r2, r1, r4, asr #12
   125a4:	andeq	r2, r1, r4, asr #12
   125a8:	andeq	r2, r1, r4, asr #12
   125ac:	andeq	r2, r1, r4, asr #12
   125b0:	andeq	r2, r1, r4, asr #12
   125b4:	andeq	r2, r1, r4, asr #14
   125b8:	andeq	r2, r1, ip, ror #14
   125bc:	andeq	r2, r1, r4, asr #12
   125c0:	andeq	r2, r1, r4, asr #14
   125c4:	andeq	r2, r1, r4, asr #12
   125c8:	andeq	r2, r1, r4, asr #14
   125cc:	andeq	r2, r1, r4, asr #12
   125d0:	andeq	r2, r1, r4, asr #12
   125d4:	andeq	r2, r1, r4, asr #12
   125d8:	andeq	r2, r1, r4, asr #12
   125dc:	andeq	r2, r1, r4, asr #12
   125e0:	andeq	r2, r1, r4, asr #12
   125e4:	andeq	r2, r1, r4, asr #12
   125e8:	andeq	r2, r1, r4, asr #12
   125ec:	andeq	r2, r1, r4, asr #12
   125f0:	andeq	r2, r1, r4, asr #12
   125f4:	andeq	r2, r1, r4, asr #12
   125f8:	andeq	r2, r1, r4, asr #12
   125fc:	andeq	r2, r1, r4, asr #12
   12600:	andeq	r2, r1, r4, asr #12
   12604:	andeq	r2, r1, r4, asr #12
   12608:	andeq	r2, r1, r4, asr #12
   1260c:	andeq	r2, r1, r4, asr #12
   12610:	andeq	r2, r1, r4, asr #12
   12614:	andeq	r2, r1, r4, asr #12
   12618:	andeq	r2, r1, r4, asr #12
   1261c:	andeq	r2, r1, r4, asr #12
   12620:	andeq	r2, r1, r4, asr #12
   12624:	andeq	r2, r1, r4, asr #12
   12628:	andeq	r2, r1, r4, asr #12
   1262c:	andeq	r2, r1, r4, asr #12
   12630:	andeq	r2, r1, r4, asr #12
   12634:	andeq	r2, r1, r0, lsl #14
   12638:	andeq	r2, r1, r4, asr #14
   1263c:	andeq	r2, r1, r0, lsl #14
   12640:	andeq	r2, r1, ip, lsr #14
   12644:	ldr	r0, [fp, #-68]	; 0xffffffbc
   12648:	tst	r0, #1
   1264c:	bne	12678 <__assert_fail@plt+0x15ac>
   12650:	ubfx	r0, r4, #5, #3
   12654:	ldr	r1, [fp, #16]
   12658:	ldr	r0, [r1, r0, lsl #2]
   1265c:	and	r1, r4, #31
   12660:	mov	r2, #1
   12664:	tst	r0, r2, lsl r1
   12668:	beq	12678 <__assert_fail@plt+0x15ac>
   1266c:	mov	r0, r4
   12670:	mov	r1, r6
   12674:	b	1268c <__assert_fail@plt+0x15c0>
   12678:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1267c:	cmp	r0, #0
   12680:	mov	r0, r4
   12684:	mov	r1, r6
   12688:	beq	129c4 <__assert_fail@plt+0x18f8>
   1268c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12690:	tst	r2, #1
   12694:	bne	12f88 <__assert_fail@plt+0x1ebc>
   12698:	ldr	r2, [fp, #-64]	; 0xffffffc0
   1269c:	subs	r2, r2, #2
   126a0:	movwne	r2, #1
   126a4:	ldr	r3, [fp, #-56]	; 0xffffffc8
   126a8:	orr	r2, r2, r3
   126ac:	tst	r2, #1
   126b0:	bne	126ec <__assert_fail@plt+0x1620>
   126b4:	cmp	r8, sl
   126b8:	movcc	r2, #39	; 0x27
   126bc:	strbcc	r2, [r5, r8]
   126c0:	add	r2, r8, #1
   126c4:	cmp	r2, sl
   126c8:	movcc	r3, #36	; 0x24
   126cc:	strbcc	r3, [r5, r2]
   126d0:	add	r2, r8, #2
   126d4:	cmp	r2, sl
   126d8:	movcc	r3, #39	; 0x27
   126dc:	strbcc	r3, [r5, r2]
   126e0:	add	r8, r8, #3
   126e4:	mov	r2, #1
   126e8:	str	r2, [fp, #-56]	; 0xffffffc8
   126ec:	cmp	r8, sl
   126f0:	movcc	r2, #92	; 0x5c
   126f4:	strbcc	r2, [r5, r8]
   126f8:	add	r8, r8, #1
   126fc:	b	12a08 <__assert_fail@plt+0x193c>
   12700:	cmp	lr, #1
   12704:	beq	1272c <__assert_fail@plt+0x1660>
   12708:	mov	r6, #0
   1270c:	cmn	lr, #1
   12710:	bne	12738 <__assert_fail@plt+0x166c>
   12714:	ldrb	r0, [ip, #1]
   12718:	cmp	r0, #0
   1271c:	beq	1272c <__assert_fail@plt+0x1660>
   12720:	mvn	lr, #0
   12724:	mov	r9, #0
   12728:	b	12644 <__assert_fail@plt+0x1578>
   1272c:	mov	r6, #0
   12730:	cmp	r7, #0
   12734:	beq	12740 <__assert_fail@plt+0x1674>
   12738:	mov	r9, #0
   1273c:	b	12644 <__assert_fail@plt+0x1578>
   12740:	mov	r1, #1
   12744:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12748:	cmp	r0, #2
   1274c:	bne	12764 <__assert_fail@plt+0x1698>
   12750:	ldr	r0, [fp, #-76]	; 0xffffffb4
   12754:	tst	r0, #1
   12758:	mov	r6, r1
   1275c:	beq	12644 <__assert_fail@plt+0x1578>
   12760:	b	12f88 <__assert_fail@plt+0x1ebc>
   12764:	mov	r6, r1
   12768:	b	12644 <__assert_fail@plt+0x1578>
   1276c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12770:	cmp	r0, #2
   12774:	bne	129a8 <__assert_fail@plt+0x18dc>
   12778:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1277c:	tst	r0, #1
   12780:	bne	12f88 <__assert_fail@plt+0x1ebc>
   12784:	mov	r9, #0
   12788:	b	129bc <__assert_fail@plt+0x18f0>
   1278c:	mov	r0, #102	; 0x66
   12790:	b	12a30 <__assert_fail@plt+0x1964>
   12794:	mov	r2, #116	; 0x74
   12798:	b	127a8 <__assert_fail@plt+0x16dc>
   1279c:	mov	r0, #98	; 0x62
   127a0:	b	12a30 <__assert_fail@plt+0x1964>
   127a4:	mov	r2, #114	; 0x72
   127a8:	ldr	r0, [sp, #72]	; 0x48
   127ac:	tst	r0, #1
   127b0:	mov	r0, r2
   127b4:	bne	12a30 <__assert_fail@plt+0x1964>
   127b8:	b	12f88 <__assert_fail@plt+0x1ebc>
   127bc:	ldr	r0, [sp, #92]	; 0x5c
   127c0:	tst	r0, #1
   127c4:	beq	12a4c <__assert_fail@plt+0x1980>
   127c8:	ldr	r0, [fp, #-76]	; 0xffffffb4
   127cc:	tst	r0, #1
   127d0:	bne	12f88 <__assert_fail@plt+0x1ebc>
   127d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   127d8:	subs	r0, r0, #2
   127dc:	movwne	r0, #1
   127e0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   127e4:	orr	r0, r0, r1
   127e8:	tst	r0, #1
   127ec:	bne	12828 <__assert_fail@plt+0x175c>
   127f0:	cmp	r8, sl
   127f4:	movcc	r0, #39	; 0x27
   127f8:	strbcc	r0, [r5, r8]
   127fc:	add	r0, r8, #1
   12800:	cmp	r0, sl
   12804:	movcc	r1, #36	; 0x24
   12808:	strbcc	r1, [r5, r0]
   1280c:	add	r0, r8, #2
   12810:	cmp	r0, sl
   12814:	movcc	r1, #39	; 0x27
   12818:	strbcc	r1, [r5, r0]
   1281c:	add	r8, r8, #3
   12820:	mov	r0, #1
   12824:	str	r0, [fp, #-56]	; 0xffffffc8
   12828:	cmp	r8, sl
   1282c:	movcc	r0, #92	; 0x5c
   12830:	strbcc	r0, [r5, r8]
   12834:	add	r0, r8, #1
   12838:	mov	r6, #0
   1283c:	mov	r9, #1
   12840:	mov	r4, #48	; 0x30
   12844:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12848:	cmp	r1, #2
   1284c:	beq	12c10 <__assert_fail@plt+0x1b44>
   12850:	add	r1, r7, #1
   12854:	cmp	r1, lr
   12858:	bcs	12c10 <__assert_fail@plt+0x1b44>
   1285c:	ldrb	r1, [ip, r1]
   12860:	sub	r1, r1, #48	; 0x30
   12864:	uxtb	r1, r1
   12868:	cmp	r1, #9
   1286c:	bhi	12c10 <__assert_fail@plt+0x1b44>
   12870:	cmp	r0, sl
   12874:	movcc	r1, #48	; 0x30
   12878:	strbcc	r1, [r5, r0]
   1287c:	add	r0, r8, #2
   12880:	cmp	r0, sl
   12884:	movcc	r1, #48	; 0x30
   12888:	strbcc	r1, [r5, r0]
   1288c:	add	r8, r8, #3
   12890:	b	12644 <__assert_fail@plt+0x1578>
   12894:	mov	r9, #0
   12898:	mov	r4, #63	; 0x3f
   1289c:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128a0:	cmp	r0, #5
   128a4:	beq	12c18 <__assert_fail@plt+0x1b4c>
   128a8:	cmp	r0, #2
   128ac:	bne	12cc0 <__assert_fail@plt+0x1bf4>
   128b0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128b4:	tst	r0, #1
   128b8:	mov	r6, #0
   128bc:	beq	12644 <__assert_fail@plt+0x1578>
   128c0:	b	12f88 <__assert_fail@plt+0x1ebc>
   128c4:	mov	r0, #118	; 0x76
   128c8:	b	12a30 <__assert_fail@plt+0x1964>
   128cc:	mov	r4, #39	; 0x27
   128d0:	mov	r0, #1
   128d4:	str	r0, [sp, #64]	; 0x40
   128d8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   128dc:	cmp	r0, #2
   128e0:	bne	12a68 <__assert_fail@plt+0x199c>
   128e4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   128e8:	tst	r0, #1
   128ec:	bne	12f88 <__assert_fail@plt+0x1ebc>
   128f0:	ldr	r2, [sp, #84]	; 0x54
   128f4:	cmp	r2, #0
   128f8:	mov	r0, r2
   128fc:	movwne	r0, #1
   12900:	clz	r1, sl
   12904:	lsr	r1, r1, #5
   12908:	orrs	r0, r0, r1
   1290c:	moveq	r2, sl
   12910:	str	r2, [sp, #84]	; 0x54
   12914:	moveq	sl, r0
   12918:	cmp	r8, sl
   1291c:	movcc	r0, #39	; 0x27
   12920:	strbcc	r0, [r5, r8]
   12924:	add	r0, r8, #1
   12928:	cmp	r0, sl
   1292c:	movcc	r1, #92	; 0x5c
   12930:	strbcc	r1, [r5, r0]
   12934:	add	r0, r8, #2
   12938:	cmp	r0, sl
   1293c:	movcc	r1, #39	; 0x27
   12940:	strbcc	r1, [r5, r0]
   12944:	add	r8, r8, #3
   12948:	mov	r0, #0
   1294c:	str	r0, [fp, #-56]	; 0xffffffc8
   12950:	mov	r9, #0
   12954:	mov	r6, #1
   12958:	b	12644 <__assert_fail@plt+0x1578>
   1295c:	ldr	r0, [sp, #44]	; 0x2c
   12960:	cmp	r0, #1
   12964:	bne	12a70 <__assert_fail@plt+0x19a4>
   12968:	str	lr, [sp, #32]
   1296c:	bl	10fb8 <__ctype_b_loc@plt>
   12970:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12974:	ldr	r0, [r0]
   12978:	add	r0, r0, r4, lsl #1
   1297c:	ldrb	r0, [r0, #1]
   12980:	ubfx	r6, r0, #6, #1
   12984:	mov	r2, #1
   12988:	ldr	r0, [sp, #60]	; 0x3c
   1298c:	orr	r1, r6, r0
   12990:	cmp	r2, #1
   12994:	bhi	12cc8 <__assert_fail@plt+0x1bfc>
   12998:	tst	r1, #1
   1299c:	beq	12cc8 <__assert_fail@plt+0x1bfc>
   129a0:	ldr	lr, [sp, #32]
   129a4:	b	12644 <__assert_fail@plt+0x1578>
   129a8:	mov	r9, #0
   129ac:	mov	r0, #92	; 0x5c
   129b0:	ldr	r1, [sp, #56]	; 0x38
   129b4:	cmp	r1, #0
   129b8:	beq	12a30 <__assert_fail@plt+0x1964>
   129bc:	mov	r4, #92	; 0x5c
   129c0:	mov	r6, #0
   129c4:	cmp	r9, #0
   129c8:	bne	12a00 <__assert_fail@plt+0x1934>
   129cc:	ldr	r0, [fp, #-56]	; 0xffffffc8
   129d0:	tst	r0, #1
   129d4:	beq	12a00 <__assert_fail@plt+0x1934>
   129d8:	cmp	r8, sl
   129dc:	movcc	r0, #39	; 0x27
   129e0:	strbcc	r0, [r5, r8]
   129e4:	add	r0, r8, #1
   129e8:	cmp	r0, sl
   129ec:	movcc	r1, #39	; 0x27
   129f0:	strbcc	r1, [r5, r0]
   129f4:	add	r8, r8, #2
   129f8:	mov	r0, #0
   129fc:	str	r0, [fp, #-56]	; 0xffffffc8
   12a00:	mov	r1, r6
   12a04:	mov	r0, r4
   12a08:	cmp	r8, sl
   12a0c:	strbcc	r0, [r5, r8]
   12a10:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12a14:	and	r0, r0, r1
   12a18:	str	r0, [fp, #-48]	; 0xffffffd0
   12a1c:	add	r8, r8, #1
   12a20:	add	r7, r7, #1
   12a24:	cmn	lr, #1
   12a28:	bne	1237c <__assert_fail@plt+0x12b0>
   12a2c:	b	12388 <__assert_fail@plt+0x12bc>
   12a30:	mov	r9, #0
   12a34:	ldr	r1, [sp, #92]	; 0x5c
   12a38:	tst	r1, #1
   12a3c:	mov	r6, #0
   12a40:	mov	r1, #0
   12a44:	beq	12644 <__assert_fail@plt+0x1578>
   12a48:	b	1268c <__assert_fail@plt+0x15c0>
   12a4c:	mov	r4, #0
   12a50:	ldr	r0, [sp, #40]	; 0x28
   12a54:	cmp	r0, #0
   12a58:	mov	r9, #0
   12a5c:	mov	r6, #0
   12a60:	beq	12644 <__assert_fail@plt+0x1578>
   12a64:	b	12a20 <__assert_fail@plt+0x1954>
   12a68:	mov	r6, #1
   12a6c:	b	12644 <__assert_fail@plt+0x1578>
   12a70:	mov	r0, #0
   12a74:	str	r0, [fp, #-36]	; 0xffffffdc
   12a78:	str	r0, [fp, #-40]	; 0xffffffd8
   12a7c:	cmn	lr, #1
   12a80:	bne	12a94 <__assert_fail@plt+0x19c8>
   12a84:	mov	r0, ip
   12a88:	bl	10fdc <strlen@plt>
   12a8c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12a90:	mov	lr, r0
   12a94:	ldr	r0, [sp, #76]	; 0x4c
   12a98:	add	r0, r0, r7
   12a9c:	str	r0, [sp, #24]
   12aa0:	mov	r6, #1
   12aa4:	mov	r2, #0
   12aa8:	sub	r0, fp, #40	; 0x28
   12aac:	mov	r3, r0
   12ab0:	str	r5, [sp, #28]
   12ab4:	str	lr, [sp, #32]
   12ab8:	b	12afc <__assert_fail@plt+0x1a30>
   12abc:	ldr	r5, [sp, #52]	; 0x34
   12ac0:	add	r5, r0, r5
   12ac4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   12ac8:	bl	10f1c <iswprint@plt>
   12acc:	cmp	r0, #0
   12ad0:	movwne	r0, #1
   12ad4:	and	r6, r6, r0
   12ad8:	sub	r0, fp, #40	; 0x28
   12adc:	bl	10ed4 <mbsinit@plt>
   12ae0:	sub	r3, fp, #40	; 0x28
   12ae4:	mov	r2, r5
   12ae8:	ldr	lr, [sp, #32]
   12aec:	cmp	r0, #0
   12af0:	ldr	r5, [sp, #28]
   12af4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12af8:	bne	12988 <__assert_fail@plt+0x18bc>
   12afc:	str	r2, [sp, #52]	; 0x34
   12b00:	add	r0, r2, r7
   12b04:	add	r1, ip, r0
   12b08:	str	r0, [sp, #48]	; 0x30
   12b0c:	sub	r2, lr, r0
   12b10:	sub	r0, fp, #44	; 0x2c
   12b14:	bl	14e38 <__assert_fail@plt+0x3d6c>
   12b18:	cmp	r0, #0
   12b1c:	beq	12e94 <__assert_fail@plt+0x1dc8>
   12b20:	cmn	r0, #1
   12b24:	beq	12e50 <__assert_fail@plt+0x1d84>
   12b28:	cmn	r0, #2
   12b2c:	ldr	lr, [sp, #32]
   12b30:	beq	12e58 <__assert_fail@plt+0x1d8c>
   12b34:	cmp	r0, #2
   12b38:	mov	r1, #0
   12b3c:	movwcc	r1, #1
   12b40:	ldr	r2, [sp, #68]	; 0x44
   12b44:	eor	r2, r2, #1
   12b48:	orrs	r1, r2, r1
   12b4c:	bne	12abc <__assert_fail@plt+0x19f0>
   12b50:	ldr	r1, [sp, #52]	; 0x34
   12b54:	ldr	r2, [sp, #24]
   12b58:	add	r1, r2, r1
   12b5c:	sub	r2, r0, #1
   12b60:	b	12b70 <__assert_fail@plt+0x1aa4>
   12b64:	add	r1, r1, #1
   12b68:	subs	r2, r2, #1
   12b6c:	beq	12abc <__assert_fail@plt+0x19f0>
   12b70:	ldrb	r3, [r1]
   12b74:	sub	r3, r3, #91	; 0x5b
   12b78:	cmp	r3, #33	; 0x21
   12b7c:	bhi	12b64 <__assert_fail@plt+0x1a98>
   12b80:	add	r5, pc, #0
   12b84:	ldr	pc, [r5, r3, lsl #2]
   12b88:	andeq	r2, r1, r0, lsl #31
   12b8c:	andeq	r2, r1, r0, lsl #31
   12b90:	andeq	r2, r1, r4, ror #22
   12b94:	andeq	r2, r1, r0, lsl #31
   12b98:	andeq	r2, r1, r4, ror #22
   12b9c:	andeq	r2, r1, r0, lsl #31
   12ba0:	andeq	r2, r1, r4, ror #22
   12ba4:	andeq	r2, r1, r4, ror #22
   12ba8:	andeq	r2, r1, r4, ror #22
   12bac:	andeq	r2, r1, r4, ror #22
   12bb0:	andeq	r2, r1, r4, ror #22
   12bb4:	andeq	r2, r1, r4, ror #22
   12bb8:	andeq	r2, r1, r4, ror #22
   12bbc:	andeq	r2, r1, r4, ror #22
   12bc0:	andeq	r2, r1, r4, ror #22
   12bc4:	andeq	r2, r1, r4, ror #22
   12bc8:	andeq	r2, r1, r4, ror #22
   12bcc:	andeq	r2, r1, r4, ror #22
   12bd0:	andeq	r2, r1, r4, ror #22
   12bd4:	andeq	r2, r1, r4, ror #22
   12bd8:	andeq	r2, r1, r4, ror #22
   12bdc:	andeq	r2, r1, r4, ror #22
   12be0:	andeq	r2, r1, r4, ror #22
   12be4:	andeq	r2, r1, r4, ror #22
   12be8:	andeq	r2, r1, r4, ror #22
   12bec:	andeq	r2, r1, r4, ror #22
   12bf0:	andeq	r2, r1, r4, ror #22
   12bf4:	andeq	r2, r1, r4, ror #22
   12bf8:	andeq	r2, r1, r4, ror #22
   12bfc:	andeq	r2, r1, r4, ror #22
   12c00:	andeq	r2, r1, r4, ror #22
   12c04:	andeq	r2, r1, r4, ror #22
   12c08:	andeq	r2, r1, r4, ror #22
   12c0c:	andeq	r2, r1, r0, lsl #31
   12c10:	mov	r8, r0
   12c14:	b	12644 <__assert_fail@plt+0x1578>
   12c18:	ldr	r0, [sp, #36]	; 0x24
   12c1c:	cmp	r0, #0
   12c20:	beq	12cc0 <__assert_fail@plt+0x1bf4>
   12c24:	add	r0, r7, #2
   12c28:	cmp	r0, lr
   12c2c:	bcs	12cc0 <__assert_fail@plt+0x1bf4>
   12c30:	add	r1, r7, ip
   12c34:	ldrb	r1, [r1, #1]
   12c38:	cmp	r1, #63	; 0x3f
   12c3c:	bne	12cc0 <__assert_fail@plt+0x1bf4>
   12c40:	ldrb	r1, [ip, r0]
   12c44:	sub	r2, r1, #33	; 0x21
   12c48:	cmp	r2, #29
   12c4c:	bhi	12cc0 <__assert_fail@plt+0x1bf4>
   12c50:	mov	r3, #1
   12c54:	movw	r6, #20929	; 0x51c1
   12c58:	movt	r6, #14336	; 0x3800
   12c5c:	tst	r6, r3, lsl r2
   12c60:	beq	12cc0 <__assert_fail@plt+0x1bf4>
   12c64:	ldr	r2, [fp, #-76]	; 0xffffffb4
   12c68:	tst	r2, #1
   12c6c:	bne	12f88 <__assert_fail@plt+0x1ebc>
   12c70:	cmp	r8, sl
   12c74:	movcc	r2, #63	; 0x3f
   12c78:	strbcc	r2, [r5, r8]
   12c7c:	add	r2, r8, #1
   12c80:	cmp	r2, sl
   12c84:	movcc	r3, #34	; 0x22
   12c88:	strbcc	r3, [r5, r2]
   12c8c:	add	r2, r8, #2
   12c90:	cmp	r2, sl
   12c94:	movcc	r3, #34	; 0x22
   12c98:	strbcc	r3, [r5, r2]
   12c9c:	add	r2, r8, #3
   12ca0:	cmp	r2, sl
   12ca4:	movcc	r3, #63	; 0x3f
   12ca8:	strbcc	r3, [r5, r2]
   12cac:	add	r8, r8, #4
   12cb0:	mov	r7, r0
   12cb4:	mov	r4, r1
   12cb8:	mov	r6, #0
   12cbc:	b	12644 <__assert_fail@plt+0x1578>
   12cc0:	mov	r6, #0
   12cc4:	b	12644 <__assert_fail@plt+0x1578>
   12cc8:	add	r0, r2, r7
   12ccc:	str	r0, [sp, #52]	; 0x34
   12cd0:	mov	r2, #0
   12cd4:	ldr	lr, [sp, #32]
   12cd8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   12cdc:	str	r1, [sp, #48]	; 0x30
   12ce0:	tst	r1, #1
   12ce4:	bne	12dc0 <__assert_fail@plt+0x1cf4>
   12ce8:	ldr	r1, [fp, #-76]	; 0xffffffb4
   12cec:	tst	r1, #1
   12cf0:	bne	12f88 <__assert_fail@plt+0x1ebc>
   12cf4:	mov	r3, r0
   12cf8:	ldr	r0, [fp, #-64]	; 0xffffffc0
   12cfc:	subs	r1, r0, #2
   12d00:	movwne	r1, #1
   12d04:	orr	r1, r1, r3
   12d08:	tst	r1, #1
   12d0c:	bne	12d44 <__assert_fail@plt+0x1c78>
   12d10:	cmp	r8, sl
   12d14:	movcc	r0, #39	; 0x27
   12d18:	strbcc	r0, [r5, r8]
   12d1c:	add	r2, r8, #1
   12d20:	cmp	r2, sl
   12d24:	movcc	r0, #36	; 0x24
   12d28:	strbcc	r0, [r5, r2]
   12d2c:	add	r2, r8, #2
   12d30:	cmp	r2, sl
   12d34:	movcc	r0, #39	; 0x27
   12d38:	strbcc	r0, [r5, r2]
   12d3c:	add	r8, r8, #3
   12d40:	mov	r3, #1
   12d44:	cmp	r8, sl
   12d48:	movcc	r1, #92	; 0x5c
   12d4c:	strbcc	r1, [r5, r8]
   12d50:	add	r2, r8, #1
   12d54:	cmp	r2, sl
   12d58:	bcs	12d6c <__assert_fail@plt+0x1ca0>
   12d5c:	uxtb	r1, r4
   12d60:	mov	r0, #48	; 0x30
   12d64:	orr	r1, r0, r1, lsr #6
   12d68:	strb	r1, [r5, r2]
   12d6c:	add	r2, r8, #2
   12d70:	cmp	r2, sl
   12d74:	lsrcc	r1, r4, #3
   12d78:	movcc	r0, #6
   12d7c:	bficc	r1, r0, #3, #29
   12d80:	strbcc	r1, [r5, r2]
   12d84:	mov	r0, #6
   12d88:	bfi	r4, r0, #3, #29
   12d8c:	add	r8, r8, #3
   12d90:	mov	r2, #1
   12d94:	mov	r0, r3
   12d98:	b	12de4 <__assert_fail@plt+0x1d18>
   12d9c:	cmp	r8, sl
   12da0:	strbcc	r4, [r5, r8]
   12da4:	ldr	r1, [sp, #76]	; 0x4c
   12da8:	ldrb	r4, [r1, r7]
   12dac:	add	r8, r8, #1
   12db0:	mov	r7, r3
   12db4:	ldr	r1, [sp, #48]	; 0x30
   12db8:	tst	r1, #1
   12dbc:	beq	12ce8 <__assert_fail@plt+0x1c1c>
   12dc0:	ldr	r1, [fp, #-52]	; 0xffffffcc
   12dc4:	tst	r1, #1
   12dc8:	beq	12ddc <__assert_fail@plt+0x1d10>
   12dcc:	cmp	r8, sl
   12dd0:	movcc	r1, #92	; 0x5c
   12dd4:	strbcc	r1, [r5, r8]
   12dd8:	add	r8, r8, #1
   12ddc:	mov	r1, #0
   12de0:	str	r1, [fp, #-52]	; 0xffffffcc
   12de4:	and	r9, r2, #1
   12de8:	add	r3, r7, #1
   12dec:	ldr	r1, [sp, #52]	; 0x34
   12df0:	cmp	r1, r3
   12df4:	bls	12e38 <__assert_fail@plt+0x1d6c>
   12df8:	cmp	r9, #0
   12dfc:	movwne	r9, #1
   12e00:	mvn	r1, r0
   12e04:	orr	r1, r1, r9
   12e08:	tst	r1, #1
   12e0c:	bne	12d9c <__assert_fail@plt+0x1cd0>
   12e10:	cmp	r8, sl
   12e14:	movcc	r1, #39	; 0x27
   12e18:	strbcc	r1, [r5, r8]
   12e1c:	add	r1, r8, #1
   12e20:	cmp	r1, sl
   12e24:	movcc	r0, #39	; 0x27
   12e28:	strbcc	r0, [r5, r1]
   12e2c:	add	r8, r8, #2
   12e30:	mov	r0, #0
   12e34:	b	12d9c <__assert_fail@plt+0x1cd0>
   12e38:	str	r0, [fp, #-56]	; 0xffffffc8
   12e3c:	cmp	r9, #0
   12e40:	movwne	r9, #1
   12e44:	cmp	r9, #0
   12e48:	beq	129cc <__assert_fail@plt+0x1900>
   12e4c:	b	12a00 <__assert_fail@plt+0x1934>
   12e50:	mov	r6, #0
   12e54:	b	12e94 <__assert_fail@plt+0x1dc8>
   12e58:	mov	r6, #0
   12e5c:	ldr	r0, [sp, #48]	; 0x30
   12e60:	cmp	r0, lr
   12e64:	bcs	12e94 <__assert_fail@plt+0x1dc8>
   12e68:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e6c:	add	r0, ip, r7
   12e70:	ldr	r2, [sp, #52]	; 0x34
   12e74:	ldrb	r1, [r0, r2]
   12e78:	cmp	r1, #0
   12e7c:	beq	12988 <__assert_fail@plt+0x18bc>
   12e80:	add	r2, r2, #1
   12e84:	add	r1, r7, r2
   12e88:	cmp	r1, lr
   12e8c:	bcc	12e74 <__assert_fail@plt+0x1da8>
   12e90:	b	12988 <__assert_fail@plt+0x18bc>
   12e94:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12e98:	ldr	r2, [sp, #52]	; 0x34
   12e9c:	b	12988 <__assert_fail@plt+0x18bc>
   12ea0:	ldr	r1, [fp, #-64]	; 0xffffffc0
   12ea4:	eor	r0, r1, #2
   12ea8:	orr	r0, r0, r8
   12eac:	clz	r0, r0
   12eb0:	lsr	r0, r0, #5
   12eb4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   12eb8:	tst	r3, r0
   12ebc:	bne	12f88 <__assert_fail@plt+0x1ebc>
   12ec0:	mov	r6, r5
   12ec4:	subs	r0, r1, #2
   12ec8:	movwne	r0, #1
   12ecc:	orr	r0, r3, r0
   12ed0:	tst	r0, #1
   12ed4:	ldr	r2, [sp, #92]	; 0x5c
   12ed8:	ldreq	r0, [sp, #64]	; 0x40
   12edc:	eoreq	r0, r0, #1
   12ee0:	tsteq	r0, #1
   12ee4:	bne	12f24 <__assert_fail@plt+0x1e58>
   12ee8:	mov	r9, lr
   12eec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   12ef0:	tst	r0, #1
   12ef4:	bne	12ff0 <__assert_fail@plt+0x1f24>
   12ef8:	ldr	r0, [sp, #84]	; 0x54
   12efc:	cmp	r0, #0
   12f00:	beq	12f24 <__assert_fail@plt+0x1e58>
   12f04:	mov	r0, #0
   12f08:	str	r0, [fp, #-48]	; 0xffffffd0
   12f0c:	mov	r1, #2
   12f10:	cmp	sl, #0
   12f14:	mov	r0, r2
   12f18:	mov	r4, r3
   12f1c:	ldr	r7, [sp, #84]	; 0x54
   12f20:	beq	120fc <__assert_fail@plt+0x1030>
   12f24:	ldr	r1, [fp, #-84]	; 0xffffffac
   12f28:	clz	r0, r1
   12f2c:	lsr	r0, r0, #5
   12f30:	orr	r0, r0, r3
   12f34:	tst	r0, #1
   12f38:	bne	12f64 <__assert_fail@plt+0x1e98>
   12f3c:	ldrb	r0, [r1]
   12f40:	cmp	r0, #0
   12f44:	beq	12f64 <__assert_fail@plt+0x1e98>
   12f48:	add	r1, r1, #1
   12f4c:	cmp	r8, sl
   12f50:	strbcc	r0, [r6, r8]
   12f54:	add	r8, r8, #1
   12f58:	ldrb	r0, [r1], #1
   12f5c:	cmp	r0, #0
   12f60:	bne	12f4c <__assert_fail@plt+0x1e80>
   12f64:	cmp	r8, sl
   12f68:	movcc	r0, #0
   12f6c:	strbcc	r0, [r6, r8]
   12f70:	b	12fe4 <__assert_fail@plt+0x1f18>
   12f74:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f78:	mov	lr, r4
   12f7c:	b	12f88 <__assert_fail@plt+0x1ebc>
   12f80:	ldr	r5, [sp, #28]
   12f84:	ldr	ip, [fp, #-80]	; 0xffffffb0
   12f88:	mov	r0, #0
   12f8c:	ldr	r1, [fp, #12]
   12f90:	bic	r1, r1, #2
   12f94:	mov	r2, #2
   12f98:	ldr	r3, [sp, #92]	; 0x5c
   12f9c:	tst	r3, #1
   12fa0:	movwne	r2, #4
   12fa4:	ldr	r3, [fp, #-64]	; 0xffffffc0
   12fa8:	cmp	r3, #2
   12fac:	movne	r2, r3
   12fb0:	str	r2, [sp]
   12fb4:	str	r1, [sp, #4]
   12fb8:	str	r0, [sp, #8]
   12fbc:	ldr	r0, [sp, #80]	; 0x50
   12fc0:	str	r0, [sp, #12]
   12fc4:	ldr	r0, [sp, #88]	; 0x58
   12fc8:	str	r0, [sp, #16]
   12fcc:	mov	r0, r5
   12fd0:	mov	r1, sl
   12fd4:	mov	r2, ip
   12fd8:	mov	r3, lr
   12fdc:	bl	12070 <__assert_fail@plt+0xfa4>
   12fe0:	mov	r8, r0
   12fe4:	mov	r0, r8
   12fe8:	sub	sp, fp, #28
   12fec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ff0:	mov	r0, #5
   12ff4:	str	r0, [sp]
   12ff8:	ldr	r0, [fp, #12]
   12ffc:	str	r0, [sp, #4]
   13000:	ldr	r0, [fp, #16]
   13004:	str	r0, [sp, #8]
   13008:	ldr	r0, [sp, #80]	; 0x50
   1300c:	str	r0, [sp, #12]
   13010:	ldr	r0, [sp, #88]	; 0x58
   13014:	str	r0, [sp, #16]
   13018:	mov	r0, r6
   1301c:	ldr	r1, [sp, #84]	; 0x54
   13020:	ldr	r2, [fp, #-80]	; 0xffffffb0
   13024:	mov	r3, r9
   13028:	b	12fdc <__assert_fail@plt+0x1f10>
   1302c:	bl	110b4 <abort@plt>
   13030:	mov	r3, r2
   13034:	mov	r2, #0
   13038:	b	1303c <__assert_fail@plt+0x1f70>
   1303c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13040:	add	fp, sp, #28
   13044:	sub	sp, sp, #36	; 0x24
   13048:	mov	r4, r2
   1304c:	str	r2, [sp, #24]
   13050:	mov	r5, r1
   13054:	mov	r6, r0
   13058:	str	r0, [sp, #20]
   1305c:	movw	r8, #24952	; 0x6178
   13060:	movt	r8, #2
   13064:	cmp	r3, #0
   13068:	movne	r8, r3
   1306c:	bl	10ff4 <__errno_location@plt>
   13070:	str	r0, [sp, #28]
   13074:	ldm	r8, {r3, r9}
   13078:	ldr	r1, [r8, #40]	; 0x28
   1307c:	ldr	r2, [r8, #44]	; 0x2c
   13080:	ldr	r7, [r0]
   13084:	str	r7, [sp, #32]
   13088:	add	sl, r8, #8
   1308c:	cmp	r4, #0
   13090:	orreq	r9, r9, #1
   13094:	stm	sp, {r3, r9, sl}
   13098:	str	r1, [sp, #12]
   1309c:	str	r2, [sp, #16]
   130a0:	mov	r0, #0
   130a4:	mov	r1, #0
   130a8:	mov	r2, r6
   130ac:	mov	r3, r5
   130b0:	mov	r7, r5
   130b4:	bl	12070 <__assert_fail@plt+0xfa4>
   130b8:	mov	r5, r0
   130bc:	add	r4, r0, #1
   130c0:	mov	r0, r4
   130c4:	bl	13f44 <__assert_fail@plt+0x2e78>
   130c8:	mov	r6, r0
   130cc:	ldr	r0, [r8]
   130d0:	ldr	r1, [r8, #40]	; 0x28
   130d4:	ldr	r2, [r8, #44]	; 0x2c
   130d8:	stm	sp, {r0, r9, sl}
   130dc:	str	r1, [sp, #12]
   130e0:	str	r2, [sp, #16]
   130e4:	mov	r0, r6
   130e8:	mov	r1, r4
   130ec:	ldr	r2, [sp, #20]
   130f0:	mov	r3, r7
   130f4:	bl	12070 <__assert_fail@plt+0xfa4>
   130f8:	ldr	r0, [sp, #24]
   130fc:	ldr	r1, [sp, #32]
   13100:	ldr	r2, [sp, #28]
   13104:	str	r1, [r2]
   13108:	cmp	r0, #0
   1310c:	strne	r5, [r0]
   13110:	mov	r0, r6
   13114:	sub	sp, fp, #28
   13118:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1311c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13120:	add	fp, sp, #24
   13124:	movw	r8, #24824	; 0x60f8
   13128:	movt	r8, #2
   1312c:	ldr	r4, [r8]
   13130:	movw	r5, #24828	; 0x60fc
   13134:	movt	r5, #2
   13138:	ldr	r0, [r5]
   1313c:	cmp	r0, #2
   13140:	blt	1316c <__assert_fail@plt+0x20a0>
   13144:	add	r7, r4, #12
   13148:	mov	r6, #0
   1314c:	ldr	r0, [r7, r6, lsl #3]
   13150:	bl	14d88 <__assert_fail@plt+0x3cbc>
   13154:	add	r0, r6, #1
   13158:	ldr	r1, [r5]
   1315c:	add	r2, r6, #2
   13160:	cmp	r2, r1
   13164:	mov	r6, r0
   13168:	blt	1314c <__assert_fail@plt+0x2080>
   1316c:	ldr	r0, [r4, #4]
   13170:	movw	r9, #25000	; 0x61a8
   13174:	movt	r9, #2
   13178:	cmp	r0, r9
   1317c:	movw	r7, #24832	; 0x6100
   13180:	movt	r7, #2
   13184:	beq	13194 <__assert_fail@plt+0x20c8>
   13188:	bl	14d88 <__assert_fail@plt+0x3cbc>
   1318c:	mov	r0, #256	; 0x100
   13190:	stm	r7, {r0, r9}
   13194:	cmp	r4, r7
   13198:	beq	131a8 <__assert_fail@plt+0x20dc>
   1319c:	mov	r0, r4
   131a0:	bl	14d88 <__assert_fail@plt+0x3cbc>
   131a4:	str	r7, [r8]
   131a8:	mov	r0, #1
   131ac:	str	r0, [r5]
   131b0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   131b4:	movw	r3, #24952	; 0x6178
   131b8:	movt	r3, #2
   131bc:	mvn	r2, #0
   131c0:	b	131c4 <__assert_fail@plt+0x20f8>
   131c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131c8:	add	fp, sp, #28
   131cc:	sub	sp, sp, #44	; 0x2c
   131d0:	mov	r7, r3
   131d4:	str	r2, [sp, #36]	; 0x24
   131d8:	str	r1, [sp, #32]
   131dc:	mov	r5, r0
   131e0:	bl	10ff4 <__errno_location@plt>
   131e4:	cmp	r5, #0
   131e8:	bmi	13358 <__assert_fail@plt+0x228c>
   131ec:	cmn	r5, #-2147483647	; 0x80000001
   131f0:	beq	13358 <__assert_fail@plt+0x228c>
   131f4:	movw	r4, #24824	; 0x60f8
   131f8:	movt	r4, #2
   131fc:	ldr	r6, [r4]
   13200:	str	r0, [sp, #28]
   13204:	ldr	r0, [r0]
   13208:	str	r0, [sp, #24]
   1320c:	movw	r8, #24828	; 0x60fc
   13210:	movt	r8, #2
   13214:	ldr	r1, [r8]
   13218:	cmp	r1, r5
   1321c:	ble	13228 <__assert_fail@plt+0x215c>
   13220:	mov	sl, r6
   13224:	b	13294 <__assert_fail@plt+0x21c8>
   13228:	str	r1, [fp, #-32]	; 0xffffffe0
   1322c:	mov	r0, #8
   13230:	str	r0, [sp]
   13234:	movw	r9, #24832	; 0x6100
   13238:	movt	r9, #2
   1323c:	subs	r0, r6, r9
   13240:	movne	r0, r6
   13244:	sub	r1, r5, r1
   13248:	add	r2, r1, #1
   1324c:	sub	r1, fp, #32
   13250:	mvn	r3, #-2147483648	; 0x80000000
   13254:	bl	14020 <__assert_fail@plt+0x2f54>
   13258:	mov	sl, r0
   1325c:	str	r0, [r4]
   13260:	cmp	r6, r9
   13264:	bne	13270 <__assert_fail@plt+0x21a4>
   13268:	ldrd	r0, [r9]
   1326c:	stm	sl, {r0, r1}
   13270:	ldr	r1, [r8]
   13274:	add	r0, sl, r1, lsl #3
   13278:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1327c:	sub	r1, r2, r1
   13280:	lsl	r2, r1, #3
   13284:	mov	r1, #0
   13288:	bl	1100c <memset@plt>
   1328c:	ldr	r0, [fp, #-32]	; 0xffffffe0
   13290:	str	r0, [r8]
   13294:	mov	r9, sl
   13298:	ldr	r6, [r9, r5, lsl #3]!
   1329c:	ldr	r4, [r9, #4]!
   132a0:	ldm	r7, {r0, r1}
   132a4:	ldr	r2, [r7, #40]	; 0x28
   132a8:	ldr	r3, [r7, #44]	; 0x2c
   132ac:	orr	r8, r1, #1
   132b0:	add	r1, r7, #8
   132b4:	stm	sp, {r0, r8}
   132b8:	str	r1, [sp, #20]
   132bc:	add	r0, sp, #8
   132c0:	stm	r0, {r1, r2, r3}
   132c4:	mov	r0, r4
   132c8:	mov	r1, r6
   132cc:	ldr	r2, [sp, #32]
   132d0:	ldr	r3, [sp, #36]	; 0x24
   132d4:	bl	12070 <__assert_fail@plt+0xfa4>
   132d8:	cmp	r6, r0
   132dc:	bhi	13340 <__assert_fail@plt+0x2274>
   132e0:	add	r6, r0, #1
   132e4:	str	r6, [sl, r5, lsl #3]
   132e8:	movw	r0, #25000	; 0x61a8
   132ec:	movt	r0, #2
   132f0:	cmp	r4, r0
   132f4:	beq	13300 <__assert_fail@plt+0x2234>
   132f8:	mov	r0, r4
   132fc:	bl	14d88 <__assert_fail@plt+0x3cbc>
   13300:	mov	r0, r6
   13304:	bl	13f44 <__assert_fail@plt+0x2e78>
   13308:	mov	r4, r0
   1330c:	str	r0, [r9]
   13310:	ldr	r0, [r7]
   13314:	ldr	r1, [r7, #40]	; 0x28
   13318:	ldr	r2, [r7, #44]	; 0x2c
   1331c:	stm	sp, {r0, r8}
   13320:	ldr	r0, [sp, #20]
   13324:	add	r3, sp, #8
   13328:	stm	r3, {r0, r1, r2}
   1332c:	mov	r0, r4
   13330:	mov	r1, r6
   13334:	ldr	r2, [sp, #32]
   13338:	ldr	r3, [sp, #36]	; 0x24
   1333c:	bl	12070 <__assert_fail@plt+0xfa4>
   13340:	ldr	r0, [sp, #28]
   13344:	ldr	r1, [sp, #24]
   13348:	str	r1, [r0]
   1334c:	mov	r0, r4
   13350:	sub	sp, fp, #28
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13358:	bl	110b4 <abort@plt>
   1335c:	movw	r3, #24952	; 0x6178
   13360:	movt	r3, #2
   13364:	b	131c4 <__assert_fail@plt+0x20f8>
   13368:	mov	r1, r0
   1336c:	mov	r0, #0
   13370:	b	131b4 <__assert_fail@plt+0x20e8>
   13374:	mov	r2, r1
   13378:	mov	r1, r0
   1337c:	mov	r0, #0
   13380:	b	1335c <__assert_fail@plt+0x2290>
   13384:	push	{r4, r5, r6, sl, fp, lr}
   13388:	add	fp, sp, #16
   1338c:	sub	sp, sp, #48	; 0x30
   13390:	mov	r4, r2
   13394:	mov	r5, r0
   13398:	mov	r6, sp
   1339c:	mov	r0, r6
   133a0:	bl	133c0 <__assert_fail@plt+0x22f4>
   133a4:	mov	r0, r5
   133a8:	mov	r1, r4
   133ac:	mvn	r2, #0
   133b0:	mov	r3, r6
   133b4:	bl	131c4 <__assert_fail@plt+0x20f8>
   133b8:	sub	sp, fp, #16
   133bc:	pop	{r4, r5, r6, sl, fp, pc}
   133c0:	push	{fp, lr}
   133c4:	mov	fp, sp
   133c8:	vmov.i32	q8, #0	; 0x00000000
   133cc:	mov	r2, #32
   133d0:	mov	r3, r0
   133d4:	vst1.32	{d16-d17}, [r3], r2
   133d8:	vst1.32	{d16-d17}, [r3]
   133dc:	add	r2, r0, #16
   133e0:	vst1.32	{d16-d17}, [r2]
   133e4:	cmp	r1, #10
   133e8:	strne	r1, [r0]
   133ec:	popne	{fp, pc}
   133f0:	bl	110b4 <abort@plt>
   133f4:	push	{r4, r5, r6, r7, fp, lr}
   133f8:	add	fp, sp, #16
   133fc:	sub	sp, sp, #48	; 0x30
   13400:	mov	r4, r3
   13404:	mov	r5, r2
   13408:	mov	r6, r0
   1340c:	mov	r7, sp
   13410:	mov	r0, r7
   13414:	bl	133c0 <__assert_fail@plt+0x22f4>
   13418:	mov	r0, r6
   1341c:	mov	r1, r5
   13420:	mov	r2, r4
   13424:	mov	r3, r7
   13428:	bl	131c4 <__assert_fail@plt+0x20f8>
   1342c:	sub	sp, fp, #16
   13430:	pop	{r4, r5, r6, r7, fp, pc}
   13434:	mov	r2, r1
   13438:	mov	r1, r0
   1343c:	mov	r0, #0
   13440:	b	13384 <__assert_fail@plt+0x22b8>
   13444:	mov	r3, r2
   13448:	mov	r2, r1
   1344c:	mov	r1, r0
   13450:	mov	r0, #0
   13454:	b	133f4 <__assert_fail@plt+0x2328>
   13458:	push	{r4, r5, r6, sl, fp, lr}
   1345c:	add	fp, sp, #16
   13460:	sub	sp, sp, #48	; 0x30
   13464:	mov	r4, r1
   13468:	mov	r5, r0
   1346c:	movw	r0, #24952	; 0x6178
   13470:	movt	r0, #2
   13474:	add	r1, r0, #16
   13478:	mov	r3, #32
   1347c:	vld1.64	{d16-d17}, [r0], r3
   13480:	vld1.64	{d18-d19}, [r1]
   13484:	mov	r6, sp
   13488:	add	r1, r6, #16
   1348c:	vld1.64	{d20-d21}, [r0]
   13490:	vst1.64	{d18-d19}, [r1]
   13494:	mov	r0, r6
   13498:	vst1.64	{d16-d17}, [r0], r3
   1349c:	vst1.64	{d20-d21}, [r0]
   134a0:	mov	r0, r6
   134a4:	mov	r1, r2
   134a8:	mov	r2, #1
   134ac:	bl	11f64 <__assert_fail@plt+0xe98>
   134b0:	mov	r0, #0
   134b4:	mov	r1, r5
   134b8:	mov	r2, r4
   134bc:	mov	r3, r6
   134c0:	bl	131c4 <__assert_fail@plt+0x20f8>
   134c4:	sub	sp, fp, #16
   134c8:	pop	{r4, r5, r6, sl, fp, pc}
   134cc:	mov	r2, r1
   134d0:	mvn	r1, #0
   134d4:	b	13458 <__assert_fail@plt+0x238c>
   134d8:	mov	r1, #58	; 0x3a
   134dc:	b	134cc <__assert_fail@plt+0x2400>
   134e0:	mov	r2, #58	; 0x3a
   134e4:	b	13458 <__assert_fail@plt+0x238c>
   134e8:	push	{r4, r5, r6, sl, fp, lr}
   134ec:	add	fp, sp, #16
   134f0:	sub	sp, sp, #48	; 0x30
   134f4:	mov	r4, r2
   134f8:	mov	r5, r0
   134fc:	mov	r6, sp
   13500:	mov	r0, r6
   13504:	bl	133c0 <__assert_fail@plt+0x22f4>
   13508:	mov	r0, r6
   1350c:	mov	r1, #58	; 0x3a
   13510:	mov	r2, #1
   13514:	bl	11f64 <__assert_fail@plt+0xe98>
   13518:	mov	r0, r5
   1351c:	mov	r1, r4
   13520:	mvn	r2, #0
   13524:	mov	r3, r6
   13528:	bl	131c4 <__assert_fail@plt+0x20f8>
   1352c:	sub	sp, fp, #16
   13530:	pop	{r4, r5, r6, sl, fp, pc}
   13534:	push	{fp, lr}
   13538:	mov	fp, sp
   1353c:	sub	sp, sp, #8
   13540:	mvn	ip, #0
   13544:	str	ip, [sp]
   13548:	bl	13554 <__assert_fail@plt+0x2488>
   1354c:	mov	sp, fp
   13550:	pop	{fp, pc}
   13554:	push	{r4, r5, r6, r7, fp, lr}
   13558:	add	fp, sp, #16
   1355c:	sub	sp, sp, #48	; 0x30
   13560:	mov	r7, r3
   13564:	mov	r5, r0
   13568:	movw	r0, #24952	; 0x6178
   1356c:	movt	r0, #2
   13570:	add	r3, r0, #16
   13574:	mov	r4, #32
   13578:	vld1.64	{d16-d17}, [r0], r4
   1357c:	vld1.64	{d18-d19}, [r3]
   13580:	mov	r6, sp
   13584:	add	r3, r6, #16
   13588:	vld1.64	{d20-d21}, [r0]
   1358c:	vst1.64	{d18-d19}, [r3]
   13590:	mov	r0, r6
   13594:	vst1.64	{d16-d17}, [r0], r4
   13598:	vst1.64	{d20-d21}, [r0]
   1359c:	mov	r0, r6
   135a0:	bl	11fbc <__assert_fail@plt+0xef0>
   135a4:	ldr	r2, [fp, #8]
   135a8:	mov	r0, r5
   135ac:	mov	r1, r7
   135b0:	mov	r3, r6
   135b4:	bl	131c4 <__assert_fail@plt+0x20f8>
   135b8:	sub	sp, fp, #16
   135bc:	pop	{r4, r5, r6, r7, fp, pc}
   135c0:	mov	r3, r2
   135c4:	mov	r2, r1
   135c8:	mov	r1, r0
   135cc:	mov	r0, #0
   135d0:	b	13534 <__assert_fail@plt+0x2468>
   135d4:	push	{fp, lr}
   135d8:	mov	fp, sp
   135dc:	sub	sp, sp, #8
   135e0:	mov	ip, r2
   135e4:	mov	r2, r1
   135e8:	mov	r1, r0
   135ec:	str	r3, [sp]
   135f0:	mov	r0, #0
   135f4:	mov	r3, ip
   135f8:	bl	13554 <__assert_fail@plt+0x2488>
   135fc:	mov	sp, fp
   13600:	pop	{fp, pc}
   13604:	movw	r3, #24840	; 0x6108
   13608:	movt	r3, #2
   1360c:	b	131c4 <__assert_fail@plt+0x20f8>
   13610:	mov	r2, r1
   13614:	mov	r1, r0
   13618:	mov	r0, #0
   1361c:	b	13604 <__assert_fail@plt+0x2538>
   13620:	mvn	r2, #0
   13624:	b	13604 <__assert_fail@plt+0x2538>
   13628:	mov	r1, r0
   1362c:	mov	r0, #0
   13630:	b	13620 <__assert_fail@plt+0x2554>
   13634:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13638:	add	fp, sp, #24
   1363c:	sub	sp, sp, #16
   13640:	mov	r4, r1
   13644:	mov	r5, r0
   13648:	mov	r7, #0
   1364c:	mov	r0, #0
   13650:	mov	r1, r5
   13654:	mov	r2, #5
   13658:	bl	10ef8 <dcgettext@plt>
   1365c:	cmp	r0, r5
   13660:	beq	1366c <__assert_fail@plt+0x25a0>
   13664:	sub	sp, fp, #24
   13668:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1366c:	bl	14e00 <__assert_fail@plt+0x3d34>
   13670:	mov	r6, r0
   13674:	mov	r8, #56	; 0x38
   13678:	mov	r0, #45	; 0x2d
   1367c:	stm	sp, {r0, r8}
   13680:	str	r7, [sp, #8]
   13684:	str	r7, [sp, #12]
   13688:	mov	r0, r6
   1368c:	mov	r1, #85	; 0x55
   13690:	mov	r2, #84	; 0x54
   13694:	mov	r3, #70	; 0x46
   13698:	bl	13730 <__assert_fail@plt+0x2664>
   1369c:	cmp	r0, #0
   136a0:	beq	136bc <__assert_fail@plt+0x25f0>
   136a4:	ldrb	r1, [r5]
   136a8:	movw	r2, #22280	; 0x5708
   136ac:	movt	r2, #1
   136b0:	movw	r0, #22284	; 0x570c
   136b4:	movt	r0, #1
   136b8:	b	13700 <__assert_fail@plt+0x2634>
   136bc:	mov	r0, #48	; 0x30
   136c0:	mov	r1, #51	; 0x33
   136c4:	str	r8, [sp]
   136c8:	stmib	sp, {r0, r1}
   136cc:	str	r0, [sp, #12]
   136d0:	mov	r0, r6
   136d4:	mov	r1, #71	; 0x47
   136d8:	mov	r2, #66	; 0x42
   136dc:	mov	r3, #49	; 0x31
   136e0:	bl	13730 <__assert_fail@plt+0x2664>
   136e4:	cmp	r0, #0
   136e8:	beq	13710 <__assert_fail@plt+0x2644>
   136ec:	ldrb	r1, [r5]
   136f0:	movw	r2, #22288	; 0x5710
   136f4:	movt	r2, #1
   136f8:	movw	r0, #22292	; 0x5714
   136fc:	movt	r0, #1
   13700:	cmp	r1, #96	; 0x60
   13704:	moveq	r0, r2
   13708:	sub	sp, fp, #24
   1370c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13710:	movw	r1, #22274	; 0x5702
   13714:	movt	r1, #1
   13718:	movw	r0, #22278	; 0x5706
   1371c:	movt	r0, #1
   13720:	cmp	r4, #9
   13724:	moveq	r0, r1
   13728:	sub	sp, fp, #24
   1372c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13730:	push	{r4, r5, r6, r7, fp, lr}
   13734:	add	fp, sp, #16
   13738:	sub	sp, sp, #16
   1373c:	mov	r4, r3
   13740:	mov	r5, r2
   13744:	mov	r7, r1
   13748:	mov	r6, r0
   1374c:	mov	r0, r1
   13750:	bl	14c94 <__assert_fail@plt+0x3bc8>
   13754:	ldrb	r1, [r6]
   13758:	cmp	r0, #0
   1375c:	andne	r1, r1, #223	; 0xdf
   13760:	mov	r0, #0
   13764:	cmp	r1, r7
   13768:	bne	137a0 <__assert_fail@plt+0x26d4>
   1376c:	cmp	r7, #0
   13770:	beq	137a8 <__assert_fail@plt+0x26dc>
   13774:	ldr	r0, [fp, #20]
   13778:	ldr	r1, [fp, #16]
   1377c:	ldr	r2, [fp, #12]
   13780:	ldr	r3, [fp, #8]
   13784:	str	r2, [sp]
   13788:	str	r1, [sp, #4]
   1378c:	str	r0, [sp, #8]
   13790:	mov	r0, r6
   13794:	mov	r1, r5
   13798:	mov	r2, r4
   1379c:	bl	137b4 <__assert_fail@plt+0x26e8>
   137a0:	sub	sp, fp, #16
   137a4:	pop	{r4, r5, r6, r7, fp, pc}
   137a8:	mov	r0, #1
   137ac:	sub	sp, fp, #16
   137b0:	pop	{r4, r5, r6, r7, fp, pc}
   137b4:	push	{r4, r5, r6, r7, fp, lr}
   137b8:	add	fp, sp, #16
   137bc:	sub	sp, sp, #8
   137c0:	mov	r4, r3
   137c4:	mov	r5, r2
   137c8:	mov	r7, r1
   137cc:	mov	r6, r0
   137d0:	mov	r0, r1
   137d4:	bl	14c94 <__assert_fail@plt+0x3bc8>
   137d8:	ldrb	r1, [r6, #1]
   137dc:	cmp	r0, #0
   137e0:	andne	r1, r1, #223	; 0xdf
   137e4:	mov	r0, #0
   137e8:	cmp	r1, r7
   137ec:	bne	1381c <__assert_fail@plt+0x2750>
   137f0:	cmp	r7, #0
   137f4:	beq	13824 <__assert_fail@plt+0x2758>
   137f8:	ldr	r0, [fp, #16]
   137fc:	ldr	r1, [fp, #12]
   13800:	ldr	r3, [fp, #8]
   13804:	str	r1, [sp]
   13808:	str	r0, [sp, #4]
   1380c:	mov	r0, r6
   13810:	mov	r1, r5
   13814:	mov	r2, r4
   13818:	bl	13830 <__assert_fail@plt+0x2764>
   1381c:	sub	sp, fp, #16
   13820:	pop	{r4, r5, r6, r7, fp, pc}
   13824:	mov	r0, #1
   13828:	sub	sp, fp, #16
   1382c:	pop	{r4, r5, r6, r7, fp, pc}
   13830:	push	{r4, r5, r6, r7, fp, lr}
   13834:	add	fp, sp, #16
   13838:	sub	sp, sp, #8
   1383c:	mov	r4, r3
   13840:	mov	r5, r2
   13844:	mov	r7, r1
   13848:	mov	r6, r0
   1384c:	mov	r0, r1
   13850:	bl	14c94 <__assert_fail@plt+0x3bc8>
   13854:	ldrb	r1, [r6, #2]
   13858:	cmp	r0, #0
   1385c:	andne	r1, r1, #223	; 0xdf
   13860:	mov	r0, #0
   13864:	cmp	r1, r7
   13868:	bne	13890 <__assert_fail@plt+0x27c4>
   1386c:	cmp	r7, #0
   13870:	beq	13898 <__assert_fail@plt+0x27cc>
   13874:	ldr	r0, [fp, #12]
   13878:	ldr	r3, [fp, #8]
   1387c:	str	r0, [sp]
   13880:	mov	r0, r6
   13884:	mov	r1, r5
   13888:	mov	r2, r4
   1388c:	bl	138a4 <__assert_fail@plt+0x27d8>
   13890:	sub	sp, fp, #16
   13894:	pop	{r4, r5, r6, r7, fp, pc}
   13898:	mov	r0, #1
   1389c:	sub	sp, fp, #16
   138a0:	pop	{r4, r5, r6, r7, fp, pc}
   138a4:	push	{r4, r5, r6, r7, fp, lr}
   138a8:	add	fp, sp, #16
   138ac:	mov	r4, r3
   138b0:	mov	r5, r2
   138b4:	mov	r7, r1
   138b8:	mov	r6, r0
   138bc:	mov	r0, r1
   138c0:	bl	14c94 <__assert_fail@plt+0x3bc8>
   138c4:	ldrb	r1, [r6, #3]
   138c8:	ldr	r3, [fp, #8]
   138cc:	cmp	r0, #0
   138d0:	andne	r1, r1, #223	; 0xdf
   138d4:	mov	r0, #0
   138d8:	cmp	r1, r7
   138dc:	bne	13900 <__assert_fail@plt+0x2834>
   138e0:	cmp	r7, #0
   138e4:	beq	138fc <__assert_fail@plt+0x2830>
   138e8:	mov	r0, r6
   138ec:	mov	r1, r5
   138f0:	mov	r2, r4
   138f4:	pop	{r4, r5, r6, r7, fp, lr}
   138f8:	b	13904 <__assert_fail@plt+0x2838>
   138fc:	mov	r0, #1
   13900:	pop	{r4, r5, r6, r7, fp, pc}
   13904:	push	{r4, r5, r6, r7, fp, lr}
   13908:	add	fp, sp, #16
   1390c:	mov	r4, r3
   13910:	mov	r5, r2
   13914:	mov	r7, r1
   13918:	mov	r6, r0
   1391c:	mov	r0, r1
   13920:	bl	14c94 <__assert_fail@plt+0x3bc8>
   13924:	ldrb	r1, [r6, #4]
   13928:	cmp	r0, #0
   1392c:	andne	r1, r1, #223	; 0xdf
   13930:	mov	r0, #0
   13934:	cmp	r1, r7
   13938:	bne	1395c <__assert_fail@plt+0x2890>
   1393c:	cmp	r7, #0
   13940:	beq	13958 <__assert_fail@plt+0x288c>
   13944:	mov	r0, r6
   13948:	mov	r1, r5
   1394c:	mov	r2, r4
   13950:	pop	{r4, r5, r6, r7, fp, lr}
   13954:	b	13960 <__assert_fail@plt+0x2894>
   13958:	mov	r0, #1
   1395c:	pop	{r4, r5, r6, r7, fp, pc}
   13960:	push	{r4, r5, r6, sl, fp, lr}
   13964:	add	fp, sp, #16
   13968:	mov	r4, r2
   1396c:	mov	r6, r1
   13970:	mov	r5, r0
   13974:	mov	r0, r1
   13978:	bl	14c94 <__assert_fail@plt+0x3bc8>
   1397c:	ldrb	r1, [r5, #5]
   13980:	cmp	r0, #0
   13984:	andne	r1, r1, #223	; 0xdf
   13988:	mov	r0, #0
   1398c:	cmp	r1, r6
   13990:	bne	139b0 <__assert_fail@plt+0x28e4>
   13994:	cmp	r6, #0
   13998:	beq	139ac <__assert_fail@plt+0x28e0>
   1399c:	mov	r0, r5
   139a0:	mov	r1, r4
   139a4:	pop	{r4, r5, r6, sl, fp, lr}
   139a8:	b	139b4 <__assert_fail@plt+0x28e8>
   139ac:	mov	r0, #1
   139b0:	pop	{r4, r5, r6, sl, fp, pc}
   139b4:	push	{r4, r5, fp, lr}
   139b8:	add	fp, sp, #8
   139bc:	mov	r5, r1
   139c0:	mov	r4, r0
   139c4:	mov	r0, r1
   139c8:	bl	14c94 <__assert_fail@plt+0x3bc8>
   139cc:	ldrb	r1, [r4, #6]
   139d0:	cmp	r0, #0
   139d4:	andne	r1, r1, #223	; 0xdf
   139d8:	mov	r0, #0
   139dc:	cmp	r1, r5
   139e0:	popne	{r4, r5, fp, pc}
   139e4:	cmp	r5, #0
   139e8:	beq	139f8 <__assert_fail@plt+0x292c>
   139ec:	mov	r0, r4
   139f0:	pop	{r4, r5, fp, lr}
   139f4:	b	13a00 <__assert_fail@plt+0x2934>
   139f8:	mov	r0, #1
   139fc:	pop	{r4, r5, fp, pc}
   13a00:	push	{r4, sl, fp, lr}
   13a04:	add	fp, sp, #8
   13a08:	mov	r4, r0
   13a0c:	mov	r0, #0
   13a10:	bl	14c94 <__assert_fail@plt+0x3bc8>
   13a14:	ldrb	r1, [r4, #7]
   13a18:	cmp	r0, #0
   13a1c:	beq	13a30 <__assert_fail@plt+0x2964>
   13a20:	tst	r1, #223	; 0xdf
   13a24:	bne	13a38 <__assert_fail@plt+0x296c>
   13a28:	mov	r0, #1
   13a2c:	pop	{r4, sl, fp, pc}
   13a30:	cmp	r1, #0
   13a34:	beq	13a28 <__assert_fail@plt+0x295c>
   13a38:	mov	r0, #0
   13a3c:	pop	{r4, sl, fp, pc}
   13a40:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   13a44:	add	fp, sp, #24
   13a48:	sub	sp, sp, #32
   13a4c:	mov	r4, r2
   13a50:	mov	r8, r0
   13a54:	ldr	r6, [fp, #12]
   13a58:	ldr	r7, [fp, #8]
   13a5c:	cmp	r1, #0
   13a60:	beq	13a88 <__assert_fail@plt+0x29bc>
   13a64:	mov	r5, r1
   13a68:	str	r4, [sp]
   13a6c:	str	r3, [sp, #4]
   13a70:	movw	r2, #22380	; 0x576c
   13a74:	movt	r2, #1
   13a78:	mov	r0, r8
   13a7c:	mov	r1, #1
   13a80:	mov	r3, r5
   13a84:	b	13aa0 <__assert_fail@plt+0x29d4>
   13a88:	str	r3, [sp]
   13a8c:	movw	r2, #22392	; 0x5778
   13a90:	movt	r2, #1
   13a94:	mov	r0, r8
   13a98:	mov	r1, #1
   13a9c:	mov	r3, r4
   13aa0:	bl	1103c <__fprintf_chk@plt>
   13aa4:	movw	r1, #22399	; 0x577f
   13aa8:	movt	r1, #1
   13aac:	mov	r0, #0
   13ab0:	mov	r2, #5
   13ab4:	bl	10ef8 <dcgettext@plt>
   13ab8:	mov	r3, r0
   13abc:	movw	r0, #2022	; 0x7e6
   13ac0:	str	r0, [sp]
   13ac4:	movw	r2, #23117	; 0x5a4d
   13ac8:	movt	r2, #1
   13acc:	mov	r0, r8
   13ad0:	mov	r1, #1
   13ad4:	bl	1103c <__fprintf_chk@plt>
   13ad8:	movw	r4, #21867	; 0x556b
   13adc:	movt	r4, #1
   13ae0:	mov	r0, r4
   13ae4:	mov	r1, r8
   13ae8:	bl	10e68 <fputs_unlocked@plt>
   13aec:	movw	r1, #22403	; 0x5783
   13af0:	movt	r1, #1
   13af4:	mov	r0, #0
   13af8:	mov	r2, #5
   13afc:	bl	10ef8 <dcgettext@plt>
   13b00:	mov	r2, r0
   13b04:	movw	r3, #22574	; 0x582e
   13b08:	movt	r3, #1
   13b0c:	mov	r0, r8
   13b10:	mov	r1, #1
   13b14:	bl	1103c <__fprintf_chk@plt>
   13b18:	mov	r0, r4
   13b1c:	mov	r1, r8
   13b20:	bl	10e68 <fputs_unlocked@plt>
   13b24:	cmp	r6, #9
   13b28:	bhi	13b64 <__assert_fail@plt+0x2a98>
   13b2c:	add	r0, pc, #0
   13b30:	ldr	pc, [r0, r6, lsl #2]
   13b34:	andeq	r3, r1, ip, asr fp
   13b38:	andeq	r3, r1, r0, ror fp
   13b3c:	andeq	r3, r1, r0, lsr #23
   13b40:	andeq	r3, r1, r8, asr #23
   13b44:	strdeq	r3, [r1], -r0
   13b48:	andeq	r3, r1, r8, lsl ip
   13b4c:	andeq	r3, r1, r0, asr #24
   13b50:	andeq	r3, r1, r8, ror ip
   13b54:	andeq	r3, r1, r8, lsl sp
   13b58:	andeq	r3, r1, r0, asr #25
   13b5c:	sub	sp, fp, #24
   13b60:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13b64:	movw	r1, #22927	; 0x598f
   13b68:	movt	r1, #1
   13b6c:	b	13cc8 <__assert_fail@plt+0x2bfc>
   13b70:	movw	r1, #22608	; 0x5850
   13b74:	movt	r1, #1
   13b78:	mov	r0, #0
   13b7c:	mov	r2, #5
   13b80:	bl	10ef8 <dcgettext@plt>
   13b84:	mov	r2, r0
   13b88:	ldr	r3, [r7]
   13b8c:	mov	r0, r8
   13b90:	mov	r1, #1
   13b94:	sub	sp, fp, #24
   13b98:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   13b9c:	b	1103c <__fprintf_chk@plt>
   13ba0:	movw	r1, #22624	; 0x5860
   13ba4:	movt	r1, #1
   13ba8:	mov	r0, #0
   13bac:	mov	r2, #5
   13bb0:	bl	10ef8 <dcgettext@plt>
   13bb4:	mov	r2, r0
   13bb8:	ldr	r3, [r7]
   13bbc:	ldr	r0, [r7, #4]
   13bc0:	str	r0, [sp]
   13bc4:	b	13cb4 <__assert_fail@plt+0x2be8>
   13bc8:	movw	r1, #22647	; 0x5877
   13bcc:	movt	r1, #1
   13bd0:	mov	r0, #0
   13bd4:	mov	r2, #5
   13bd8:	bl	10ef8 <dcgettext@plt>
   13bdc:	mov	r2, r0
   13be0:	ldr	r3, [r7]
   13be4:	ldmib	r7, {r0, r1}
   13be8:	stm	sp, {r0, r1}
   13bec:	b	13cb4 <__assert_fail@plt+0x2be8>
   13bf0:	movw	r1, #22675	; 0x5893
   13bf4:	movt	r1, #1
   13bf8:	mov	r0, #0
   13bfc:	mov	r2, #5
   13c00:	bl	10ef8 <dcgettext@plt>
   13c04:	mov	r2, r0
   13c08:	ldr	r3, [r7]
   13c0c:	ldmib	r7, {r0, r1, r7}
   13c10:	stm	sp, {r0, r1, r7}
   13c14:	b	13cb4 <__assert_fail@plt+0x2be8>
   13c18:	movw	r1, #22707	; 0x58b3
   13c1c:	movt	r1, #1
   13c20:	mov	r0, #0
   13c24:	mov	r2, #5
   13c28:	bl	10ef8 <dcgettext@plt>
   13c2c:	mov	r2, r0
   13c30:	ldr	r3, [r7]
   13c34:	ldmib	r7, {r0, r1, r6, r7}
   13c38:	stm	sp, {r0, r1, r6, r7}
   13c3c:	b	13cb4 <__assert_fail@plt+0x2be8>
   13c40:	movw	r1, #22743	; 0x58d7
   13c44:	movt	r1, #1
   13c48:	mov	r0, #0
   13c4c:	mov	r2, #5
   13c50:	bl	10ef8 <dcgettext@plt>
   13c54:	mov	r2, r0
   13c58:	ldr	r3, [r7]
   13c5c:	ldmib	r7, {r0, r1, r6}
   13c60:	ldr	r5, [r7, #16]
   13c64:	ldr	r7, [r7, #20]
   13c68:	stm	sp, {r0, r1, r6}
   13c6c:	str	r5, [sp, #12]
   13c70:	str	r7, [sp, #16]
   13c74:	b	13cb4 <__assert_fail@plt+0x2be8>
   13c78:	movw	r1, #22783	; 0x58ff
   13c7c:	movt	r1, #1
   13c80:	mov	r0, #0
   13c84:	mov	r2, #5
   13c88:	bl	10ef8 <dcgettext@plt>
   13c8c:	mov	r2, r0
   13c90:	ldr	r3, [r7]
   13c94:	ldmib	r7, {r0, r1, r6}
   13c98:	ldr	r5, [r7, #16]
   13c9c:	ldr	r4, [r7, #20]
   13ca0:	ldr	r7, [r7, #24]
   13ca4:	stm	sp, {r0, r1, r6}
   13ca8:	str	r5, [sp, #12]
   13cac:	str	r4, [sp, #16]
   13cb0:	str	r7, [sp, #20]
   13cb4:	mov	r0, r8
   13cb8:	mov	r1, #1
   13cbc:	b	13d68 <__assert_fail@plt+0x2c9c>
   13cc0:	movw	r1, #22875	; 0x595b
   13cc4:	movt	r1, #1
   13cc8:	mov	r0, #0
   13ccc:	mov	r2, #5
   13cd0:	bl	10ef8 <dcgettext@plt>
   13cd4:	mov	ip, r0
   13cd8:	ldr	r3, [r7]
   13cdc:	ldr	r0, [r7, #4]
   13ce0:	ldr	r1, [r7, #8]
   13ce4:	ldr	r6, [r7, #12]
   13ce8:	ldr	r5, [r7, #16]
   13cec:	ldr	r4, [r7, #20]
   13cf0:	ldr	r2, [r7, #24]
   13cf4:	ldr	lr, [r7, #28]
   13cf8:	ldr	r7, [r7, #32]
   13cfc:	stm	sp, {r0, r1, r6}
   13d00:	str	r5, [sp, #12]
   13d04:	str	r4, [sp, #16]
   13d08:	str	r2, [sp, #20]
   13d0c:	str	lr, [sp, #24]
   13d10:	str	r7, [sp, #28]
   13d14:	b	13d5c <__assert_fail@plt+0x2c90>
   13d18:	movw	r1, #22827	; 0x592b
   13d1c:	movt	r1, #1
   13d20:	mov	r0, #0
   13d24:	mov	r2, #5
   13d28:	bl	10ef8 <dcgettext@plt>
   13d2c:	mov	ip, r0
   13d30:	ldr	r3, [r7]
   13d34:	ldmib	r7, {r0, r1, r6}
   13d38:	ldr	r5, [r7, #16]
   13d3c:	ldr	r4, [r7, #20]
   13d40:	ldr	r2, [r7, #24]
   13d44:	ldr	r7, [r7, #28]
   13d48:	stm	sp, {r0, r1, r6}
   13d4c:	str	r5, [sp, #12]
   13d50:	str	r4, [sp, #16]
   13d54:	str	r2, [sp, #20]
   13d58:	str	r7, [sp, #24]
   13d5c:	mov	r0, r8
   13d60:	mov	r1, #1
   13d64:	mov	r2, ip
   13d68:	bl	1103c <__fprintf_chk@plt>
   13d6c:	sub	sp, fp, #24
   13d70:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13d74:	push	{r4, sl, fp, lr}
   13d78:	add	fp, sp, #8
   13d7c:	sub	sp, sp, #8
   13d80:	mov	lr, #0
   13d84:	ldr	ip, [fp, #8]
   13d88:	ldr	r4, [ip, lr, lsl #2]
   13d8c:	add	lr, lr, #1
   13d90:	cmp	r4, #0
   13d94:	bne	13d88 <__assert_fail@plt+0x2cbc>
   13d98:	sub	r4, lr, #1
   13d9c:	str	ip, [sp]
   13da0:	str	r4, [sp, #4]
   13da4:	bl	13a40 <__assert_fail@plt+0x2974>
   13da8:	sub	sp, fp, #8
   13dac:	pop	{r4, sl, fp, pc}
   13db0:	push	{r4, r5, fp, lr}
   13db4:	add	fp, sp, #8
   13db8:	sub	sp, sp, #48	; 0x30
   13dbc:	mov	ip, #0
   13dc0:	ldr	r4, [fp, #8]
   13dc4:	add	lr, sp, #8
   13dc8:	ldr	r5, [r4]
   13dcc:	str	r5, [lr, ip, lsl #2]
   13dd0:	cmp	r5, #0
   13dd4:	beq	13dec <__assert_fail@plt+0x2d20>
   13dd8:	add	ip, ip, #1
   13ddc:	add	r4, r4, #4
   13de0:	cmp	ip, #10
   13de4:	bne	13dc8 <__assert_fail@plt+0x2cfc>
   13de8:	mov	ip, #10
   13dec:	str	lr, [sp]
   13df0:	str	ip, [sp, #4]
   13df4:	bl	13a40 <__assert_fail@plt+0x2974>
   13df8:	sub	sp, fp, #8
   13dfc:	pop	{r4, r5, fp, pc}
   13e00:	push	{fp, lr}
   13e04:	mov	fp, sp
   13e08:	sub	sp, sp, #8
   13e0c:	add	ip, fp, #8
   13e10:	str	ip, [sp, #4]
   13e14:	str	ip, [sp]
   13e18:	bl	13db0 <__assert_fail@plt+0x2ce4>
   13e1c:	mov	sp, fp
   13e20:	pop	{fp, pc}
   13e24:	push	{fp, lr}
   13e28:	mov	fp, sp
   13e2c:	movw	r0, #24916	; 0x6154
   13e30:	movt	r0, #2
   13e34:	ldr	r1, [r0]
   13e38:	movw	r0, #21867	; 0x556b
   13e3c:	movt	r0, #1
   13e40:	bl	10e68 <fputs_unlocked@plt>
   13e44:	movw	r1, #22987	; 0x59cb
   13e48:	movt	r1, #1
   13e4c:	mov	r0, #0
   13e50:	mov	r2, #5
   13e54:	bl	10ef8 <dcgettext@plt>
   13e58:	mov	r1, r0
   13e5c:	movw	r2, #23007	; 0x59df
   13e60:	movt	r2, #1
   13e64:	mov	r0, #1
   13e68:	bl	11018 <__printf_chk@plt>
   13e6c:	movw	r1, #23029	; 0x59f5
   13e70:	movt	r1, #1
   13e74:	mov	r0, #0
   13e78:	mov	r2, #5
   13e7c:	bl	10ef8 <dcgettext@plt>
   13e80:	mov	r1, r0
   13e84:	movw	r2, #21397	; 0x5395
   13e88:	movt	r2, #1
   13e8c:	movw	r3, #21676	; 0x54ac
   13e90:	movt	r3, #1
   13e94:	mov	r0, #1
   13e98:	bl	11018 <__printf_chk@plt>
   13e9c:	movw	r1, #23049	; 0x5a09
   13ea0:	movt	r1, #1
   13ea4:	mov	r0, #0
   13ea8:	mov	r2, #5
   13eac:	bl	10ef8 <dcgettext@plt>
   13eb0:	mov	r1, r0
   13eb4:	movw	r2, #23088	; 0x5a30
   13eb8:	movt	r2, #1
   13ebc:	mov	r0, #1
   13ec0:	pop	{fp, lr}
   13ec4:	b	11018 <__printf_chk@plt>
   13ec8:	b	13ecc <__assert_fail@plt+0x2e00>
   13ecc:	push	{r4, r5, r6, sl, fp, lr}
   13ed0:	add	fp, sp, #16
   13ed4:	mov	r4, r2
   13ed8:	mov	r5, r1
   13edc:	mov	r6, r0
   13ee0:	bl	14e9c <__assert_fail@plt+0x3dd0>
   13ee4:	cmp	r0, #0
   13ee8:	popne	{r4, r5, r6, sl, fp, pc}
   13eec:	cmp	r6, #0
   13ef0:	beq	13f04 <__assert_fail@plt+0x2e38>
   13ef4:	cmp	r5, #0
   13ef8:	cmpne	r4, #0
   13efc:	bne	13f04 <__assert_fail@plt+0x2e38>
   13f00:	pop	{r4, r5, r6, sl, fp, pc}
   13f04:	bl	14290 <__assert_fail@plt+0x31c4>
   13f08:	push	{fp, lr}
   13f0c:	mov	fp, sp
   13f10:	bl	1495c <__assert_fail@plt+0x3890>
   13f14:	pop	{fp, lr}
   13f18:	b	13f1c <__assert_fail@plt+0x2e50>
   13f1c:	cmp	r0, #0
   13f20:	bxne	lr
   13f24:	push	{fp, lr}
   13f28:	mov	fp, sp
   13f2c:	bl	14290 <__assert_fail@plt+0x31c4>
   13f30:	push	{fp, lr}
   13f34:	mov	fp, sp
   13f38:	bl	14dcc <__assert_fail@plt+0x3d00>
   13f3c:	pop	{fp, lr}
   13f40:	b	13f1c <__assert_fail@plt+0x2e50>
   13f44:	b	13f08 <__assert_fail@plt+0x2e3c>
   13f48:	push	{r4, r5, fp, lr}
   13f4c:	add	fp, sp, #8
   13f50:	mov	r4, r1
   13f54:	mov	r5, r0
   13f58:	bl	1498c <__assert_fail@plt+0x38c0>
   13f5c:	cmp	r0, #0
   13f60:	popne	{r4, r5, fp, pc}
   13f64:	cmp	r5, #0
   13f68:	beq	13f78 <__assert_fail@plt+0x2eac>
   13f6c:	cmp	r4, #0
   13f70:	bne	13f78 <__assert_fail@plt+0x2eac>
   13f74:	pop	{r4, r5, fp, pc}
   13f78:	bl	14290 <__assert_fail@plt+0x31c4>
   13f7c:	push	{fp, lr}
   13f80:	mov	fp, sp
   13f84:	bl	14dd0 <__assert_fail@plt+0x3d04>
   13f88:	pop	{fp, lr}
   13f8c:	b	13f1c <__assert_fail@plt+0x2e50>
   13f90:	push	{fp, lr}
   13f94:	mov	fp, sp
   13f98:	bl	14de0 <__assert_fail@plt+0x3d14>
   13f9c:	pop	{fp, lr}
   13fa0:	b	13f1c <__assert_fail@plt+0x2e50>
   13fa4:	mov	r2, r1
   13fa8:	mov	r1, r0
   13fac:	mov	r0, #0
   13fb0:	b	13ecc <__assert_fail@plt+0x2e00>
   13fb4:	mov	r2, r1
   13fb8:	mov	r1, r0
   13fbc:	mov	r0, #0
   13fc0:	b	13f90 <__assert_fail@plt+0x2ec4>
   13fc4:	mov	r2, #1
   13fc8:	b	13fcc <__assert_fail@plt+0x2f00>
   13fcc:	push	{r4, r5, fp, lr}
   13fd0:	add	fp, sp, #8
   13fd4:	mov	r4, r1
   13fd8:	ldr	r5, [r1]
   13fdc:	cmp	r0, #0
   13fe0:	beq	13ff8 <__assert_fail@plt+0x2f2c>
   13fe4:	mov	r1, #1
   13fe8:	add	r1, r1, r5, lsr #1
   13fec:	adds	r5, r5, r1
   13ff0:	bcc	14010 <__assert_fail@plt+0x2f44>
   13ff4:	bl	14290 <__assert_fail@plt+0x31c4>
   13ff8:	cmp	r5, #0
   13ffc:	bne	14010 <__assert_fail@plt+0x2f44>
   14000:	mov	r1, #64	; 0x40
   14004:	udiv	r5, r1, r2
   14008:	cmp	r2, #64	; 0x40
   1400c:	addhi	r5, r5, #1
   14010:	mov	r1, r5
   14014:	bl	13ecc <__assert_fail@plt+0x2e00>
   14018:	str	r5, [r4]
   1401c:	pop	{r4, r5, fp, pc}
   14020:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14024:	add	fp, sp, #24
   14028:	mov	r8, r1
   1402c:	ldr	r6, [r1]
   14030:	add	r1, r6, r6, asr #1
   14034:	cmp	r1, r6
   14038:	mvnvs	r1, #-2147483648	; 0x80000000
   1403c:	cmp	r1, r3
   14040:	mov	r5, r1
   14044:	movgt	r5, r3
   14048:	cmn	r3, #1
   1404c:	movle	r5, r1
   14050:	ldr	r4, [fp, #8]
   14054:	cmn	r4, #1
   14058:	ble	14080 <__assert_fail@plt+0x2fb4>
   1405c:	cmp	r4, #0
   14060:	beq	140d4 <__assert_fail@plt+0x3008>
   14064:	cmn	r5, #1
   14068:	ble	140a8 <__assert_fail@plt+0x2fdc>
   1406c:	mvn	r7, #-2147483648	; 0x80000000
   14070:	udiv	r1, r7, r4
   14074:	cmp	r1, r5
   14078:	bge	140d4 <__assert_fail@plt+0x3008>
   1407c:	b	140e4 <__assert_fail@plt+0x3018>
   14080:	cmn	r5, #1
   14084:	ble	140c4 <__assert_fail@plt+0x2ff8>
   14088:	cmn	r4, #1
   1408c:	beq	140d4 <__assert_fail@plt+0x3008>
   14090:	mov	r1, #-2147483648	; 0x80000000
   14094:	sdiv	r1, r1, r4
   14098:	mvn	r7, #-2147483648	; 0x80000000
   1409c:	cmp	r1, r5
   140a0:	bge	140d4 <__assert_fail@plt+0x3008>
   140a4:	b	140e4 <__assert_fail@plt+0x3018>
   140a8:	beq	140d4 <__assert_fail@plt+0x3008>
   140ac:	mov	r1, #-2147483648	; 0x80000000
   140b0:	sdiv	r1, r1, r5
   140b4:	mvn	r7, #-2147483648	; 0x80000000
   140b8:	cmp	r1, r4
   140bc:	bge	140d4 <__assert_fail@plt+0x3008>
   140c0:	b	140e4 <__assert_fail@plt+0x3018>
   140c4:	mvn	r7, #-2147483648	; 0x80000000
   140c8:	sdiv	r1, r7, r4
   140cc:	cmp	r5, r1
   140d0:	blt	140e4 <__assert_fail@plt+0x3018>
   140d4:	mul	r1, r5, r4
   140d8:	mov	r7, #64	; 0x40
   140dc:	cmp	r1, #63	; 0x3f
   140e0:	bgt	140ec <__assert_fail@plt+0x3020>
   140e4:	sdiv	r5, r7, r4
   140e8:	mul	r1, r5, r4
   140ec:	cmp	r0, #0
   140f0:	moveq	r7, #0
   140f4:	streq	r7, [r8]
   140f8:	sub	r7, r5, r6
   140fc:	cmp	r7, r2
   14100:	bge	141ac <__assert_fail@plt+0x30e0>
   14104:	add	r5, r6, r2
   14108:	mov	r1, #0
   1410c:	cmp	r5, r3
   14110:	mov	r2, #0
   14114:	movwgt	r2, #1
   14118:	cmn	r3, #1
   1411c:	movwgt	r1, #1
   14120:	cmp	r5, r6
   14124:	bvs	14194 <__assert_fail@plt+0x30c8>
   14128:	ands	r1, r1, r2
   1412c:	bne	14194 <__assert_fail@plt+0x30c8>
   14130:	cmn	r4, #1
   14134:	ble	1415c <__assert_fail@plt+0x3090>
   14138:	cmp	r4, #0
   1413c:	beq	141a8 <__assert_fail@plt+0x30dc>
   14140:	cmn	r5, #1
   14144:	ble	14180 <__assert_fail@plt+0x30b4>
   14148:	mvn	r1, #-2147483648	; 0x80000000
   1414c:	udiv	r1, r1, r4
   14150:	cmp	r1, r5
   14154:	bge	141a8 <__assert_fail@plt+0x30dc>
   14158:	b	14194 <__assert_fail@plt+0x30c8>
   1415c:	cmn	r5, #1
   14160:	ble	14198 <__assert_fail@plt+0x30cc>
   14164:	cmn	r4, #1
   14168:	beq	141a8 <__assert_fail@plt+0x30dc>
   1416c:	mov	r1, #-2147483648	; 0x80000000
   14170:	sdiv	r1, r1, r4
   14174:	cmp	r1, r5
   14178:	bge	141a8 <__assert_fail@plt+0x30dc>
   1417c:	b	14194 <__assert_fail@plt+0x30c8>
   14180:	beq	141a8 <__assert_fail@plt+0x30dc>
   14184:	mov	r1, #-2147483648	; 0x80000000
   14188:	sdiv	r1, r1, r5
   1418c:	cmp	r1, r4
   14190:	bge	141a8 <__assert_fail@plt+0x30dc>
   14194:	bl	14290 <__assert_fail@plt+0x31c4>
   14198:	mvn	r1, #-2147483648	; 0x80000000
   1419c:	sdiv	r1, r1, r4
   141a0:	cmp	r5, r1
   141a4:	blt	14194 <__assert_fail@plt+0x30c8>
   141a8:	mul	r1, r5, r4
   141ac:	bl	13f48 <__assert_fail@plt+0x2e7c>
   141b0:	str	r5, [r8]
   141b4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   141b8:	mov	r1, #1
   141bc:	b	141c0 <__assert_fail@plt+0x30f4>
   141c0:	push	{fp, lr}
   141c4:	mov	fp, sp
   141c8:	bl	14908 <__assert_fail@plt+0x383c>
   141cc:	pop	{fp, lr}
   141d0:	b	13f1c <__assert_fail@plt+0x2e50>
   141d4:	mov	r1, #1
   141d8:	b	141dc <__assert_fail@plt+0x3110>
   141dc:	push	{fp, lr}
   141e0:	mov	fp, sp
   141e4:	bl	14ddc <__assert_fail@plt+0x3d10>
   141e8:	pop	{fp, lr}
   141ec:	b	13f1c <__assert_fail@plt+0x2e50>
   141f0:	push	{r4, r5, fp, lr}
   141f4:	add	fp, sp, #8
   141f8:	mov	r4, r1
   141fc:	mov	r5, r0
   14200:	mov	r0, r1
   14204:	bl	13f08 <__assert_fail@plt+0x2e3c>
   14208:	mov	r1, r5
   1420c:	mov	r2, r4
   14210:	pop	{r4, r5, fp, lr}
   14214:	b	10ec8 <memcpy@plt>
   14218:	push	{r4, r5, fp, lr}
   1421c:	add	fp, sp, #8
   14220:	mov	r4, r1
   14224:	mov	r5, r0
   14228:	mov	r0, r1
   1422c:	bl	13f30 <__assert_fail@plt+0x2e64>
   14230:	mov	r1, r5
   14234:	mov	r2, r4
   14238:	pop	{r4, r5, fp, lr}
   1423c:	b	10ec8 <memcpy@plt>
   14240:	push	{r4, r5, fp, lr}
   14244:	add	fp, sp, #8
   14248:	mov	r4, r1
   1424c:	mov	r5, r0
   14250:	add	r0, r1, #1
   14254:	bl	13f30 <__assert_fail@plt+0x2e64>
   14258:	mov	r1, #0
   1425c:	strb	r1, [r0, r4]
   14260:	mov	r1, r5
   14264:	mov	r2, r4
   14268:	pop	{r4, r5, fp, lr}
   1426c:	b	10ec8 <memcpy@plt>
   14270:	push	{r4, sl, fp, lr}
   14274:	add	fp, sp, #8
   14278:	mov	r4, r0
   1427c:	bl	10fdc <strlen@plt>
   14280:	add	r1, r0, #1
   14284:	mov	r0, r4
   14288:	pop	{r4, sl, fp, lr}
   1428c:	b	141f0 <__assert_fail@plt+0x3124>
   14290:	push	{fp, lr}
   14294:	mov	fp, sp
   14298:	movw	r0, #24820	; 0x60f4
   1429c:	movt	r0, #2
   142a0:	ldr	r4, [r0]
   142a4:	movw	r1, #23164	; 0x5a7c
   142a8:	movt	r1, #1
   142ac:	mov	r0, #0
   142b0:	mov	r2, #5
   142b4:	bl	10ef8 <dcgettext@plt>
   142b8:	mov	r3, r0
   142bc:	movw	r2, #22127	; 0x566f
   142c0:	movt	r2, #1
   142c4:	mov	r0, r4
   142c8:	mov	r1, #0
   142cc:	bl	10f70 <error@plt>
   142d0:	bl	110b4 <abort@plt>
   142d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   142d8:	add	fp, sp, #24
   142dc:	sub	sp, sp, #16
   142e0:	mov	r5, r3
   142e4:	mov	r6, r2
   142e8:	mov	r2, r1
   142ec:	mov	r8, r0
   142f0:	ldr	r0, [fp, #16]
   142f4:	str	r0, [sp]
   142f8:	add	r3, sp, #8
   142fc:	mov	r0, r8
   14300:	mov	r1, #0
   14304:	bl	143cc <__assert_fail@plt+0x3300>
   14308:	cmp	r0, #0
   1430c:	bne	1439c <__assert_fail@plt+0x32d0>
   14310:	ldr	r7, [sp, #8]
   14314:	ldr	r4, [sp, #12]
   14318:	subs	r0, r7, r6
   1431c:	sbcs	r0, r4, r5
   14320:	bcc	14344 <__assert_fail@plt+0x3278>
   14324:	ldr	r0, [fp, #12]
   14328:	ldr	r1, [fp, #8]
   1432c:	subs	r1, r1, r7
   14330:	sbcs	r0, r0, r4
   14334:	ldrcs	r0, [sp, #8]
   14338:	ldrcs	r1, [sp, #12]
   1433c:	subcs	sp, fp, #24
   14340:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   14344:	bl	10ff4 <__errno_location@plt>
   14348:	subs	r1, r7, #1073741824	; 0x40000000
   1434c:	sbcs	r1, r4, #0
   14350:	movcc	r1, #34	; 0x22
   14354:	movcs	r1, #75	; 0x4b
   14358:	str	r1, [r0]
   1435c:	ldr	r5, [fp, #24]
   14360:	ldr	r6, [fp, #20]
   14364:	bl	10ff4 <__errno_location@plt>
   14368:	ldr	r4, [r0]
   1436c:	mov	r0, r8
   14370:	bl	13628 <__assert_fail@plt+0x255c>
   14374:	str	r0, [sp]
   14378:	subs	r1, r4, #22
   1437c:	movne	r1, r4
   14380:	cmp	r5, #0
   14384:	movweq	r5, #1
   14388:	movw	r2, #22123	; 0x566b
   1438c:	movt	r2, #1
   14390:	mov	r0, r5
   14394:	mov	r3, r6
   14398:	bl	10f70 <error@plt>
   1439c:	cmp	r0, #1
   143a0:	beq	143b8 <__assert_fail@plt+0x32ec>
   143a4:	cmp	r0, #3
   143a8:	bne	1435c <__assert_fail@plt+0x3290>
   143ac:	bl	10ff4 <__errno_location@plt>
   143b0:	mov	r1, #0
   143b4:	b	14358 <__assert_fail@plt+0x328c>
   143b8:	bl	10ff4 <__errno_location@plt>
   143bc:	mov	r1, #75	; 0x4b
   143c0:	b	14358 <__assert_fail@plt+0x328c>
   143c4:	mov	r1, #10
   143c8:	b	142d4 <__assert_fail@plt+0x3208>
   143cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143d0:	add	fp, sp, #28
   143d4:	sub	sp, sp, #20
   143d8:	cmp	r2, #37	; 0x25
   143dc:	bcs	14810 <__assert_fail@plt+0x3744>
   143e0:	mov	r5, r2
   143e4:	mov	r6, r1
   143e8:	mov	r4, r0
   143ec:	str	r3, [sp, #4]
   143f0:	ldr	sl, [fp, #8]
   143f4:	bl	10ff4 <__errno_location@plt>
   143f8:	mov	r7, r0
   143fc:	mov	r0, #0
   14400:	str	r0, [r7]
   14404:	bl	10fb8 <__ctype_b_loc@plt>
   14408:	ldr	r1, [r0]
   1440c:	mov	r2, r4
   14410:	ldrb	r0, [r2], #1
   14414:	add	r3, r1, r0, lsl #1
   14418:	ldrb	r3, [r3, #1]
   1441c:	tst	r3, #32
   14420:	bne	14410 <__assert_fail@plt+0x3344>
   14424:	add	r9, sp, #16
   14428:	cmp	r6, #0
   1442c:	movne	r9, r6
   14430:	mov	r8, #4
   14434:	cmp	r0, #45	; 0x2d
   14438:	beq	14804 <__assert_fail@plt+0x3738>
   1443c:	mov	r0, r4
   14440:	mov	r1, r9
   14444:	mov	r2, r5
   14448:	bl	11030 <strtoumax@plt>
   1444c:	str	r1, [sp, #12]
   14450:	str	r0, [sp, #8]
   14454:	ldr	r6, [r9]
   14458:	cmp	r6, r4
   1445c:	beq	14484 <__assert_fail@plt+0x33b8>
   14460:	ldr	r0, [r7]
   14464:	cmp	r0, #0
   14468:	beq	144bc <__assert_fail@plt+0x33f0>
   1446c:	cmp	r0, #34	; 0x22
   14470:	bne	14804 <__assert_fail@plt+0x3738>
   14474:	mov	r8, #1
   14478:	cmp	sl, #0
   1447c:	bne	144c8 <__assert_fail@plt+0x33fc>
   14480:	b	147f4 <__assert_fail@plt+0x3728>
   14484:	cmp	sl, #0
   14488:	beq	14804 <__assert_fail@plt+0x3738>
   1448c:	ldrb	r1, [r6]
   14490:	cmp	r1, #0
   14494:	beq	14804 <__assert_fail@plt+0x3738>
   14498:	mov	r0, sl
   1449c:	bl	10fe8 <strchr@plt>
   144a0:	cmp	r0, #0
   144a4:	beq	14804 <__assert_fail@plt+0x3738>
   144a8:	mov	r8, #0
   144ac:	str	r8, [sp, #12]
   144b0:	mov	r0, #1
   144b4:	str	r0, [sp, #8]
   144b8:	b	144c8 <__assert_fail@plt+0x33fc>
   144bc:	mov	r8, r0
   144c0:	cmp	sl, #0
   144c4:	beq	147f4 <__assert_fail@plt+0x3728>
   144c8:	ldrb	r4, [r6]
   144cc:	cmp	r4, #0
   144d0:	beq	147f4 <__assert_fail@plt+0x3728>
   144d4:	mov	r0, sl
   144d8:	mov	r1, r4
   144dc:	bl	10fe8 <strchr@plt>
   144e0:	cmp	r0, #0
   144e4:	beq	14710 <__assert_fail@plt+0x3644>
   144e8:	sub	r0, r4, #69	; 0x45
   144ec:	mov	r7, #1
   144f0:	mov	r5, #1024	; 0x400
   144f4:	cmp	r0, #47	; 0x2f
   144f8:	bhi	1460c <__assert_fail@plt+0x3540>
   144fc:	add	r1, pc, #0
   14500:	ldr	pc, [r1, r0, lsl #2]
   14504:	andeq	r4, r1, r4, asr #11
   14508:	andeq	r4, r1, ip, lsl #12
   1450c:	andeq	r4, r1, r4, asr #11
   14510:	andeq	r4, r1, ip, lsl #12
   14514:	andeq	r4, r1, ip, lsl #12
   14518:	andeq	r4, r1, ip, lsl #12
   1451c:	andeq	r4, r1, r4, asr #11
   14520:	andeq	r4, r1, ip, lsl #12
   14524:	andeq	r4, r1, r4, asr #11
   14528:	andeq	r4, r1, ip, lsl #12
   1452c:	andeq	r4, r1, ip, lsl #12
   14530:	andeq	r4, r1, r4, asr #11
   14534:	andeq	r4, r1, ip, lsl #12
   14538:	andeq	r4, r1, ip, lsl #12
   1453c:	andeq	r4, r1, ip, lsl #12
   14540:	andeq	r4, r1, r4, asr #11
   14544:	andeq	r4, r1, ip, lsl #12
   14548:	andeq	r4, r1, ip, lsl #12
   1454c:	andeq	r4, r1, ip, lsl #12
   14550:	andeq	r4, r1, ip, lsl #12
   14554:	andeq	r4, r1, r4, asr #11
   14558:	andeq	r4, r1, r4, asr #11
   1455c:	andeq	r4, r1, ip, lsl #12
   14560:	andeq	r4, r1, ip, lsl #12
   14564:	andeq	r4, r1, ip, lsl #12
   14568:	andeq	r4, r1, ip, lsl #12
   1456c:	andeq	r4, r1, ip, lsl #12
   14570:	andeq	r4, r1, ip, lsl #12
   14574:	andeq	r4, r1, ip, lsl #12
   14578:	andeq	r4, r1, ip, lsl #12
   1457c:	andeq	r4, r1, ip, lsl #12
   14580:	andeq	r4, r1, ip, lsl #12
   14584:	andeq	r4, r1, ip, lsl #12
   14588:	andeq	r4, r1, ip, lsl #12
   1458c:	andeq	r4, r1, r4, asr #11
   14590:	andeq	r4, r1, ip, lsl #12
   14594:	andeq	r4, r1, ip, lsl #12
   14598:	andeq	r4, r1, ip, lsl #12
   1459c:	andeq	r4, r1, r4, asr #11
   145a0:	andeq	r4, r1, ip, lsl #12
   145a4:	andeq	r4, r1, r4, asr #11
   145a8:	andeq	r4, r1, ip, lsl #12
   145ac:	andeq	r4, r1, ip, lsl #12
   145b0:	andeq	r4, r1, ip, lsl #12
   145b4:	andeq	r4, r1, ip, lsl #12
   145b8:	andeq	r4, r1, ip, lsl #12
   145bc:	andeq	r4, r1, ip, lsl #12
   145c0:	andeq	r4, r1, r4, asr #11
   145c4:	mov	r0, sl
   145c8:	mov	r1, #48	; 0x30
   145cc:	bl	10fe8 <strchr@plt>
   145d0:	cmp	r0, #0
   145d4:	beq	1460c <__assert_fail@plt+0x3540>
   145d8:	ldrb	r0, [r6, #1]
   145dc:	cmp	r0, #66	; 0x42
   145e0:	cmpne	r0, #68	; 0x44
   145e4:	bne	145f4 <__assert_fail@plt+0x3528>
   145e8:	mov	r7, #2
   145ec:	mov	r5, #1000	; 0x3e8
   145f0:	b	1460c <__assert_fail@plt+0x3540>
   145f4:	cmp	r0, #105	; 0x69
   145f8:	bne	1460c <__assert_fail@plt+0x3540>
   145fc:	ldrb	r0, [r6, #2]
   14600:	mov	r7, #1
   14604:	cmp	r0, #66	; 0x42
   14608:	movweq	r7, #3
   1460c:	sub	r1, r4, #66	; 0x42
   14610:	cmp	r1, #53	; 0x35
   14614:	bhi	14710 <__assert_fail@plt+0x3644>
   14618:	mov	r0, #0
   1461c:	add	r2, pc, #0
   14620:	ldr	pc, [r2, r1, lsl #2]
   14624:	andeq	r4, r1, r8, ror r7
   14628:	andeq	r4, r1, r0, lsl r7
   1462c:	andeq	r4, r1, r0, lsl r7
   14630:	andeq	r4, r1, r4, lsl #15
   14634:	andeq	r4, r1, r0, lsl r7
   14638:	strdeq	r4, [r1], -ip
   1463c:	andeq	r4, r1, r0, lsl r7
   14640:	andeq	r4, r1, r0, lsl r7
   14644:	andeq	r4, r1, r0, lsl r7
   14648:	andeq	r4, r1, r8, lsr #14
   1464c:	andeq	r4, r1, r0, lsl r7
   14650:	andeq	r4, r1, ip, lsr r7
   14654:	andeq	r4, r1, r0, lsl r7
   14658:	andeq	r4, r1, r0, lsl r7
   1465c:	muleq	r1, r8, r7
   14660:	andeq	r4, r1, r0, lsl r7
   14664:	andeq	r4, r1, r0, lsl r7
   14668:	andeq	r4, r1, r0, lsl r7
   1466c:	andeq	r4, r1, r0, asr r7
   14670:	andeq	r4, r1, r0, lsl r7
   14674:	andeq	r4, r1, r0, lsl r7
   14678:	andeq	r4, r1, r0, lsl r7
   1467c:	andeq	r4, r1, r0, lsl r7
   14680:	andeq	r4, r1, ip, lsr #15
   14684:	andeq	r4, r1, r4, ror #14
   14688:	andeq	r4, r1, r0, lsl r7
   1468c:	andeq	r4, r1, r0, lsl r7
   14690:	andeq	r4, r1, r0, lsl r7
   14694:	andeq	r4, r1, r0, lsl r7
   14698:	andeq	r4, r1, r0, lsl r7
   1469c:	andeq	r4, r1, r0, lsl r7
   146a0:	andeq	r4, r1, r0, lsl r7
   146a4:	andeq	r4, r1, r0, asr #15
   146a8:	ldrdeq	r4, [r1], -r8
   146ac:	andeq	r4, r1, r0, lsl r7
   146b0:	andeq	r4, r1, r0, lsl r7
   146b4:	andeq	r4, r1, r0, lsl r7
   146b8:	strdeq	r4, [r1], -ip
   146bc:	andeq	r4, r1, r0, lsl r7
   146c0:	andeq	r4, r1, r0, lsl r7
   146c4:	andeq	r4, r1, r0, lsl r7
   146c8:	andeq	r4, r1, r8, lsr #14
   146cc:	andeq	r4, r1, r0, lsl r7
   146d0:	andeq	r4, r1, ip, lsr r7
   146d4:	andeq	r4, r1, r0, lsl r7
   146d8:	andeq	r4, r1, r0, lsl r7
   146dc:	andeq	r4, r1, r0, lsl r7
   146e0:	andeq	r4, r1, r0, lsl r7
   146e4:	andeq	r4, r1, r0, lsl r7
   146e8:	andeq	r4, r1, r0, lsl r7
   146ec:	andeq	r4, r1, r0, asr r7
   146f0:	andeq	r4, r1, r0, lsl r7
   146f4:	andeq	r4, r1, r0, lsl r7
   146f8:	andeq	r4, r1, ip, asr #15
   146fc:	add	r0, sp, #8
   14700:	mov	r1, r5
   14704:	mov	r2, #3
   14708:	bl	148bc <__assert_fail@plt+0x37f0>
   1470c:	b	147d8 <__assert_fail@plt+0x370c>
   14710:	ldr	r0, [sp, #8]
   14714:	ldr	r1, [sp, #12]
   14718:	ldr	r2, [sp, #4]
   1471c:	strd	r0, [r2]
   14720:	orr	r8, r8, #2
   14724:	b	14804 <__assert_fail@plt+0x3738>
   14728:	add	r0, sp, #8
   1472c:	mov	r1, r5
   14730:	mov	r2, #1
   14734:	bl	148bc <__assert_fail@plt+0x37f0>
   14738:	b	147d8 <__assert_fail@plt+0x370c>
   1473c:	add	r0, sp, #8
   14740:	mov	r1, r5
   14744:	mov	r2, #2
   14748:	bl	148bc <__assert_fail@plt+0x37f0>
   1474c:	b	147d8 <__assert_fail@plt+0x370c>
   14750:	add	r0, sp, #8
   14754:	mov	r1, r5
   14758:	mov	r2, #4
   1475c:	bl	148bc <__assert_fail@plt+0x37f0>
   14760:	b	147d8 <__assert_fail@plt+0x370c>
   14764:	add	r0, sp, #8
   14768:	mov	r1, r5
   1476c:	mov	r2, #7
   14770:	bl	148bc <__assert_fail@plt+0x37f0>
   14774:	b	147d8 <__assert_fail@plt+0x370c>
   14778:	add	r0, sp, #8
   1477c:	mov	r1, #1024	; 0x400
   14780:	b	147d4 <__assert_fail@plt+0x3708>
   14784:	add	r0, sp, #8
   14788:	mov	r1, r5
   1478c:	mov	r2, #6
   14790:	bl	148bc <__assert_fail@plt+0x37f0>
   14794:	b	147d8 <__assert_fail@plt+0x370c>
   14798:	add	r0, sp, #8
   1479c:	mov	r1, r5
   147a0:	mov	r2, #5
   147a4:	bl	148bc <__assert_fail@plt+0x37f0>
   147a8:	b	147d8 <__assert_fail@plt+0x370c>
   147ac:	add	r0, sp, #8
   147b0:	mov	r1, r5
   147b4:	mov	r2, #8
   147b8:	bl	148bc <__assert_fail@plt+0x37f0>
   147bc:	b	147d8 <__assert_fail@plt+0x370c>
   147c0:	add	r0, sp, #8
   147c4:	mov	r1, #512	; 0x200
   147c8:	b	147d4 <__assert_fail@plt+0x3708>
   147cc:	add	r0, sp, #8
   147d0:	mov	r1, #2
   147d4:	bl	14830 <__assert_fail@plt+0x3764>
   147d8:	ldr	r1, [r9]
   147dc:	add	r2, r1, r7
   147e0:	str	r2, [r9]
   147e4:	ldrb	r1, [r1, r7]
   147e8:	orr	r8, r0, r8
   147ec:	cmp	r1, #0
   147f0:	orrne	r8, r8, #2
   147f4:	ldr	r0, [sp, #8]
   147f8:	ldr	r1, [sp, #12]
   147fc:	ldr	r2, [sp, #4]
   14800:	strd	r0, [r2]
   14804:	mov	r0, r8
   14808:	sub	sp, fp, #28
   1480c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14810:	movw	r0, #23181	; 0x5a8d
   14814:	movt	r0, #1
   14818:	movw	r1, #23219	; 0x5ab3
   1481c:	movt	r1, #1
   14820:	movw	r3, #23235	; 0x5ac3
   14824:	movt	r3, #1
   14828:	mov	r2, #85	; 0x55
   1482c:	bl	110cc <__assert_fail@plt>
   14830:	push	{r4, r5, r6, r7, fp, lr}
   14834:	add	fp, sp, #16
   14838:	mov	r5, r1
   1483c:	mov	r4, r0
   14840:	cmn	r1, #1
   14844:	ble	1487c <__assert_fail@plt+0x37b0>
   14848:	cmp	r5, #0
   1484c:	beq	1489c <__assert_fail@plt+0x37d0>
   14850:	asr	r3, r5, #31
   14854:	mvn	r6, #0
   14858:	mvn	r0, #0
   1485c:	mvn	r1, #0
   14860:	mov	r2, r5
   14864:	bl	14fe8 <__assert_fail@plt+0x3f1c>
   14868:	ldrd	r2, [r4]
   1486c:	subs	r0, r0, r2
   14870:	sbcs	r0, r1, r3
   14874:	bcc	1488c <__assert_fail@plt+0x37c0>
   14878:	b	1489c <__assert_fail@plt+0x37d0>
   1487c:	ldrd	r0, [r4]
   14880:	orrs	r0, r0, r1
   14884:	beq	1489c <__assert_fail@plt+0x37d0>
   14888:	mvn	r6, #0
   1488c:	mov	r0, #1
   14890:	mvn	r7, #0
   14894:	strd	r6, [r4]
   14898:	pop	{r4, r5, r6, r7, fp, pc}
   1489c:	ldrd	r0, [r4]
   148a0:	umull	r6, r2, r0, r5
   148a4:	asr	r3, r5, #31
   148a8:	mla	r0, r0, r3, r2
   148ac:	mla	r7, r1, r5, r0
   148b0:	mov	r0, #0
   148b4:	strd	r6, [r4]
   148b8:	pop	{r4, r5, r6, r7, fp, pc}
   148bc:	push	{r4, r5, r6, r7, fp, lr}
   148c0:	add	fp, sp, #16
   148c4:	cmp	r2, #0
   148c8:	beq	148fc <__assert_fail@plt+0x3830>
   148cc:	mov	r4, r2
   148d0:	mov	r5, r1
   148d4:	mov	r7, r0
   148d8:	mov	r6, #0
   148dc:	mov	r0, r7
   148e0:	mov	r1, r5
   148e4:	bl	14830 <__assert_fail@plt+0x3764>
   148e8:	orr	r6, r0, r6
   148ec:	subs	r4, r4, #1
   148f0:	bne	148dc <__assert_fail@plt+0x3810>
   148f4:	mov	r0, r6
   148f8:	pop	{r4, r5, r6, r7, fp, pc}
   148fc:	mov	r6, #0
   14900:	mov	r0, r6
   14904:	pop	{r4, r5, r6, r7, fp, pc}
   14908:	clz	r2, r1
   1490c:	lsr	r2, r2, #5
   14910:	clz	r3, r0
   14914:	lsr	r3, r3, #5
   14918:	orrs	r2, r3, r2
   1491c:	movwne	r1, #1
   14920:	movwne	r0, #1
   14924:	cmp	r1, #0
   14928:	beq	14958 <__assert_fail@plt+0x388c>
   1492c:	mvn	r2, #-2147483648	; 0x80000000
   14930:	udiv	r2, r2, r1
   14934:	cmp	r2, r0
   14938:	bcs	14958 <__assert_fail@plt+0x388c>
   1493c:	push	{fp, lr}
   14940:	mov	fp, sp
   14944:	bl	10ff4 <__errno_location@plt>
   14948:	mov	r1, #12
   1494c:	str	r1, [r0]
   14950:	mov	r0, #0
   14954:	pop	{fp, pc}
   14958:	b	10e5c <calloc@plt>
   1495c:	cmp	r0, #0
   14960:	movweq	r0, #1
   14964:	cmn	r0, #1
   14968:	ble	14970 <__assert_fail@plt+0x38a4>
   1496c:	b	10f7c <malloc@plt>
   14970:	push	{fp, lr}
   14974:	mov	fp, sp
   14978:	bl	10ff4 <__errno_location@plt>
   1497c:	mov	r1, #12
   14980:	str	r1, [r0]
   14984:	mov	r0, #0
   14988:	pop	{fp, pc}
   1498c:	push	{fp, lr}
   14990:	mov	fp, sp
   14994:	cmp	r0, #0
   14998:	beq	149b4 <__assert_fail@plt+0x38e8>
   1499c:	cmp	r1, #0
   149a0:	beq	149c0 <__assert_fail@plt+0x38f4>
   149a4:	cmn	r1, #1
   149a8:	ble	149cc <__assert_fail@plt+0x3900>
   149ac:	pop	{fp, lr}
   149b0:	b	10f04 <realloc@plt>
   149b4:	mov	r0, r1
   149b8:	pop	{fp, lr}
   149bc:	b	1495c <__assert_fail@plt+0x3890>
   149c0:	bl	14d88 <__assert_fail@plt+0x3cbc>
   149c4:	mov	r0, #0
   149c8:	pop	{fp, pc}
   149cc:	bl	10ff4 <__errno_location@plt>
   149d0:	mov	r1, #12
   149d4:	str	r1, [r0]
   149d8:	mov	r0, #0
   149dc:	pop	{fp, pc}
   149e0:	mov	r1, r0
   149e4:	sub	r2, r0, #65	; 0x41
   149e8:	mov	r0, #1
   149ec:	cmp	r2, #26
   149f0:	subcs	r2, r1, #97	; 0x61
   149f4:	cmpcs	r2, #26
   149f8:	bcs	14a00 <__assert_fail@plt+0x3934>
   149fc:	bx	lr
   14a00:	sub	r1, r1, #48	; 0x30
   14a04:	cmp	r1, #10
   14a08:	movcs	r0, #0
   14a0c:	bx	lr
   14a10:	mov	r1, r0
   14a14:	sub	r2, r0, #65	; 0x41
   14a18:	mov	r0, #1
   14a1c:	cmp	r2, #26
   14a20:	subcs	r1, r1, #97	; 0x61
   14a24:	cmpcs	r1, #26
   14a28:	movcs	r0, #0
   14a2c:	bx	lr
   14a30:	mov	r1, #0
   14a34:	cmp	r0, #128	; 0x80
   14a38:	movwcc	r1, #1
   14a3c:	mov	r0, r1
   14a40:	bx	lr
   14a44:	sub	r1, r0, #9
   14a48:	clz	r1, r1
   14a4c:	lsr	r1, r1, #5
   14a50:	sub	r0, r0, #32
   14a54:	clz	r0, r0
   14a58:	lsr	r0, r0, #5
   14a5c:	orr	r0, r0, r1
   14a60:	bx	lr
   14a64:	mov	r1, r0
   14a68:	mov	r0, #1
   14a6c:	cmp	r1, #32
   14a70:	bxcc	lr
   14a74:	cmp	r1, #127	; 0x7f
   14a78:	movne	r0, #0
   14a7c:	bx	lr
   14a80:	sub	r1, r0, #48	; 0x30
   14a84:	mov	r0, #0
   14a88:	cmp	r1, #10
   14a8c:	movwcc	r0, #1
   14a90:	bx	lr
   14a94:	sub	r1, r0, #33	; 0x21
   14a98:	mov	r0, #0
   14a9c:	cmp	r1, #94	; 0x5e
   14aa0:	movwcc	r0, #1
   14aa4:	bx	lr
   14aa8:	sub	r1, r0, #97	; 0x61
   14aac:	mov	r0, #0
   14ab0:	cmp	r1, #26
   14ab4:	movwcc	r0, #1
   14ab8:	bx	lr
   14abc:	sub	r1, r0, #32
   14ac0:	mov	r0, #0
   14ac4:	cmp	r1, #95	; 0x5f
   14ac8:	movwcc	r0, #1
   14acc:	bx	lr
   14ad0:	sub	r1, r0, #33	; 0x21
   14ad4:	cmp	r1, #93	; 0x5d
   14ad8:	bhi	14c64 <__assert_fail@plt+0x3b98>
   14adc:	mov	r0, #1
   14ae0:	add	r2, pc, #0
   14ae4:	ldr	pc, [r2, r1, lsl #2]
   14ae8:	andeq	r4, r1, r0, ror #24
   14aec:	andeq	r4, r1, r0, ror #24
   14af0:	andeq	r4, r1, r0, ror #24
   14af4:	andeq	r4, r1, r0, ror #24
   14af8:	andeq	r4, r1, r0, ror #24
   14afc:	andeq	r4, r1, r0, ror #24
   14b00:	andeq	r4, r1, r0, ror #24
   14b04:	andeq	r4, r1, r0, ror #24
   14b08:	andeq	r4, r1, r0, ror #24
   14b0c:	andeq	r4, r1, r0, ror #24
   14b10:	andeq	r4, r1, r0, ror #24
   14b14:	andeq	r4, r1, r0, ror #24
   14b18:	andeq	r4, r1, r0, ror #24
   14b1c:	andeq	r4, r1, r0, ror #24
   14b20:	andeq	r4, r1, r0, ror #24
   14b24:	andeq	r4, r1, r4, ror #24
   14b28:	andeq	r4, r1, r4, ror #24
   14b2c:	andeq	r4, r1, r4, ror #24
   14b30:	andeq	r4, r1, r4, ror #24
   14b34:	andeq	r4, r1, r4, ror #24
   14b38:	andeq	r4, r1, r4, ror #24
   14b3c:	andeq	r4, r1, r4, ror #24
   14b40:	andeq	r4, r1, r4, ror #24
   14b44:	andeq	r4, r1, r4, ror #24
   14b48:	andeq	r4, r1, r4, ror #24
   14b4c:	andeq	r4, r1, r0, ror #24
   14b50:	andeq	r4, r1, r0, ror #24
   14b54:	andeq	r4, r1, r0, ror #24
   14b58:	andeq	r4, r1, r0, ror #24
   14b5c:	andeq	r4, r1, r0, ror #24
   14b60:	andeq	r4, r1, r0, ror #24
   14b64:	andeq	r4, r1, r0, ror #24
   14b68:	andeq	r4, r1, r4, ror #24
   14b6c:	andeq	r4, r1, r4, ror #24
   14b70:	andeq	r4, r1, r4, ror #24
   14b74:	andeq	r4, r1, r4, ror #24
   14b78:	andeq	r4, r1, r4, ror #24
   14b7c:	andeq	r4, r1, r4, ror #24
   14b80:	andeq	r4, r1, r4, ror #24
   14b84:	andeq	r4, r1, r4, ror #24
   14b88:	andeq	r4, r1, r4, ror #24
   14b8c:	andeq	r4, r1, r4, ror #24
   14b90:	andeq	r4, r1, r4, ror #24
   14b94:	andeq	r4, r1, r4, ror #24
   14b98:	andeq	r4, r1, r4, ror #24
   14b9c:	andeq	r4, r1, r4, ror #24
   14ba0:	andeq	r4, r1, r4, ror #24
   14ba4:	andeq	r4, r1, r4, ror #24
   14ba8:	andeq	r4, r1, r4, ror #24
   14bac:	andeq	r4, r1, r4, ror #24
   14bb0:	andeq	r4, r1, r4, ror #24
   14bb4:	andeq	r4, r1, r4, ror #24
   14bb8:	andeq	r4, r1, r4, ror #24
   14bbc:	andeq	r4, r1, r4, ror #24
   14bc0:	andeq	r4, r1, r4, ror #24
   14bc4:	andeq	r4, r1, r4, ror #24
   14bc8:	andeq	r4, r1, r4, ror #24
   14bcc:	andeq	r4, r1, r4, ror #24
   14bd0:	andeq	r4, r1, r0, ror #24
   14bd4:	andeq	r4, r1, r0, ror #24
   14bd8:	andeq	r4, r1, r0, ror #24
   14bdc:	andeq	r4, r1, r0, ror #24
   14be0:	andeq	r4, r1, r0, ror #24
   14be4:	andeq	r4, r1, r0, ror #24
   14be8:	andeq	r4, r1, r4, ror #24
   14bec:	andeq	r4, r1, r4, ror #24
   14bf0:	andeq	r4, r1, r4, ror #24
   14bf4:	andeq	r4, r1, r4, ror #24
   14bf8:	andeq	r4, r1, r4, ror #24
   14bfc:	andeq	r4, r1, r4, ror #24
   14c00:	andeq	r4, r1, r4, ror #24
   14c04:	andeq	r4, r1, r4, ror #24
   14c08:	andeq	r4, r1, r4, ror #24
   14c0c:	andeq	r4, r1, r4, ror #24
   14c10:	andeq	r4, r1, r4, ror #24
   14c14:	andeq	r4, r1, r4, ror #24
   14c18:	andeq	r4, r1, r4, ror #24
   14c1c:	andeq	r4, r1, r4, ror #24
   14c20:	andeq	r4, r1, r4, ror #24
   14c24:	andeq	r4, r1, r4, ror #24
   14c28:	andeq	r4, r1, r4, ror #24
   14c2c:	andeq	r4, r1, r4, ror #24
   14c30:	andeq	r4, r1, r4, ror #24
   14c34:	andeq	r4, r1, r4, ror #24
   14c38:	andeq	r4, r1, r4, ror #24
   14c3c:	andeq	r4, r1, r4, ror #24
   14c40:	andeq	r4, r1, r4, ror #24
   14c44:	andeq	r4, r1, r4, ror #24
   14c48:	andeq	r4, r1, r4, ror #24
   14c4c:	andeq	r4, r1, r4, ror #24
   14c50:	andeq	r4, r1, r0, ror #24
   14c54:	andeq	r4, r1, r0, ror #24
   14c58:	andeq	r4, r1, r0, ror #24
   14c5c:	andeq	r4, r1, r0, ror #24
   14c60:	bx	lr
   14c64:	mov	r0, #0
   14c68:	bx	lr
   14c6c:	sub	r0, r0, #9
   14c70:	cmp	r0, #23
   14c74:	movhi	r0, #0
   14c78:	bxhi	lr
   14c7c:	bic	r0, r0, #-16777216	; 0xff000000
   14c80:	movw	r1, #31
   14c84:	movt	r1, #128	; 0x80
   14c88:	mov	r2, #1
   14c8c:	and	r0, r2, r1, lsr r0
   14c90:	bx	lr
   14c94:	sub	r1, r0, #65	; 0x41
   14c98:	mov	r0, #0
   14c9c:	cmp	r1, #26
   14ca0:	movwcc	r0, #1
   14ca4:	bx	lr
   14ca8:	mov	r1, r0
   14cac:	sub	r2, r0, #48	; 0x30
   14cb0:	mov	r0, #1
   14cb4:	cmp	r2, #22
   14cb8:	bhi	14cd0 <__assert_fail@plt+0x3c04>
   14cbc:	mov	ip, #1
   14cc0:	movw	r3, #1023	; 0x3ff
   14cc4:	movt	r3, #126	; 0x7e
   14cc8:	tst	r3, ip, lsl r2
   14ccc:	bxne	lr
   14cd0:	sub	r1, r1, #97	; 0x61
   14cd4:	cmp	r1, #6
   14cd8:	movcs	r0, #0
   14cdc:	bxcs	lr
   14ce0:	bx	lr
   14ce4:	sub	r1, r0, #65	; 0x41
   14ce8:	cmp	r1, #26
   14cec:	addcc	r0, r0, #32
   14cf0:	bx	lr
   14cf4:	sub	r1, r0, #97	; 0x61
   14cf8:	cmp	r1, #26
   14cfc:	subcc	r0, r0, #32
   14d00:	bx	lr
   14d04:	push	{r4, r5, r6, sl, fp, lr}
   14d08:	add	fp, sp, #16
   14d0c:	mov	r4, r0
   14d10:	bl	10f4c <__fpending@plt>
   14d14:	mov	r5, r0
   14d18:	mov	r0, r4
   14d1c:	bl	10f58 <ferror_unlocked@plt>
   14d20:	mov	r6, r0
   14d24:	mov	r0, r4
   14d28:	bl	11c84 <__assert_fail@plt+0xbb8>
   14d2c:	cmp	r6, #0
   14d30:	beq	14d54 <__assert_fail@plt+0x3c88>
   14d34:	mvn	r4, #0
   14d38:	cmp	r0, #0
   14d3c:	bne	14d80 <__assert_fail@plt+0x3cb4>
   14d40:	bl	10ff4 <__errno_location@plt>
   14d44:	mov	r1, #0
   14d48:	str	r1, [r0]
   14d4c:	mov	r0, r4
   14d50:	pop	{r4, r5, r6, sl, fp, pc}
   14d54:	cmp	r0, #0
   14d58:	mov	r4, r0
   14d5c:	mvnne	r4, #0
   14d60:	cmp	r5, #0
   14d64:	bne	14d80 <__assert_fail@plt+0x3cb4>
   14d68:	cmp	r0, #0
   14d6c:	beq	14d80 <__assert_fail@plt+0x3cb4>
   14d70:	bl	10ff4 <__errno_location@plt>
   14d74:	ldr	r0, [r0]
   14d78:	subs	r4, r0, #9
   14d7c:	mvnne	r4, #0
   14d80:	mov	r0, r4
   14d84:	pop	{r4, r5, r6, sl, fp, pc}
   14d88:	push	{r4, r5, r6, sl, fp, lr}
   14d8c:	add	fp, sp, #16
   14d90:	mov	r4, r0
   14d94:	bl	10ff4 <__errno_location@plt>
   14d98:	mov	r5, r0
   14d9c:	ldr	r6, [r0]
   14da0:	mov	r0, r4
   14da4:	bl	10eb0 <free@plt>
   14da8:	str	r6, [r5]
   14dac:	pop	{r4, r5, r6, sl, fp, pc}
   14db0:	push	{fp, lr}
   14db4:	mov	fp, sp
   14db8:	bl	10ff4 <__errno_location@plt>
   14dbc:	mov	r1, #12
   14dc0:	str	r1, [r0]
   14dc4:	mov	r0, #0
   14dc8:	pop	{fp, pc}
   14dcc:	b	1495c <__assert_fail@plt+0x3890>
   14dd0:	cmp	r1, #0
   14dd4:	orreq	r1, r1, #1
   14dd8:	b	1498c <__assert_fail@plt+0x38c0>
   14ddc:	b	14908 <__assert_fail@plt+0x383c>
   14de0:	clz	r3, r2
   14de4:	lsr	ip, r3, #5
   14de8:	clz	r3, r1
   14dec:	lsr	r3, r3, #5
   14df0:	orrs	r3, r3, ip
   14df4:	movwne	r1, #1
   14df8:	movwne	r2, #1
   14dfc:	b	14e9c <__assert_fail@plt+0x3dd0>
   14e00:	push	{fp, lr}
   14e04:	mov	fp, sp
   14e08:	mov	r0, #14
   14e0c:	bl	11078 <nl_langinfo@plt>
   14e10:	movw	r1, #21868	; 0x556c
   14e14:	movt	r1, #1
   14e18:	cmp	r0, #0
   14e1c:	movne	r1, r0
   14e20:	ldrb	r2, [r1]
   14e24:	movw	r0, #23314	; 0x5b12
   14e28:	movt	r0, #1
   14e2c:	cmp	r2, #0
   14e30:	movne	r0, r1
   14e34:	pop	{fp, pc}
   14e38:	push	{r4, r5, r6, r7, fp, lr}
   14e3c:	add	fp, sp, #16
   14e40:	sub	sp, sp, #8
   14e44:	mov	r7, r2
   14e48:	mov	r4, r1
   14e4c:	add	r5, sp, #4
   14e50:	cmp	r0, #0
   14e54:	movne	r5, r0
   14e58:	mov	r0, r5
   14e5c:	bl	10f64 <mbrtowc@plt>
   14e60:	mov	r6, r0
   14e64:	cmp	r7, #0
   14e68:	beq	14e90 <__assert_fail@plt+0x3dc4>
   14e6c:	cmn	r6, #2
   14e70:	bcc	14e90 <__assert_fail@plt+0x3dc4>
   14e74:	mov	r0, #0
   14e78:	bl	14ed8 <__assert_fail@plt+0x3e0c>
   14e7c:	cmp	r0, #0
   14e80:	bne	14e90 <__assert_fail@plt+0x3dc4>
   14e84:	ldrb	r0, [r4]
   14e88:	str	r0, [r5]
   14e8c:	mov	r6, #1
   14e90:	mov	r0, r6
   14e94:	sub	sp, fp, #16
   14e98:	pop	{r4, r5, r6, r7, fp, pc}
   14e9c:	cmp	r2, #0
   14ea0:	beq	14ed0 <__assert_fail@plt+0x3e04>
   14ea4:	mvn	r3, #0
   14ea8:	udiv	r3, r3, r2
   14eac:	cmp	r3, r1
   14eb0:	bcs	14ed0 <__assert_fail@plt+0x3e04>
   14eb4:	push	{fp, lr}
   14eb8:	mov	fp, sp
   14ebc:	bl	10ff4 <__errno_location@plt>
   14ec0:	mov	r1, #12
   14ec4:	str	r1, [r0]
   14ec8:	mov	r0, #0
   14ecc:	pop	{fp, pc}
   14ed0:	mul	r1, r2, r1
   14ed4:	b	1498c <__assert_fail@plt+0x38c0>
   14ed8:	push	{r4, sl, fp, lr}
   14edc:	add	fp, sp, #8
   14ee0:	sub	sp, sp, #264	; 0x108
   14ee4:	add	r1, sp, #7
   14ee8:	movw	r2, #257	; 0x101
   14eec:	bl	14f44 <__assert_fail@plt+0x3e78>
   14ef0:	mov	r4, #0
   14ef4:	cmp	r0, #0
   14ef8:	bne	14f38 <__assert_fail@plt+0x3e6c>
   14efc:	add	r0, sp, #7
   14f00:	movw	r1, #23320	; 0x5b18
   14f04:	movt	r1, #1
   14f08:	mov	r2, #2
   14f0c:	bl	10fd0 <bcmp@plt>
   14f10:	cmp	r0, #0
   14f14:	beq	14f38 <__assert_fail@plt+0x3e6c>
   14f18:	add	r0, sp, #7
   14f1c:	movw	r1, #23322	; 0x5b1a
   14f20:	movt	r1, #1
   14f24:	mov	r2, #6
   14f28:	bl	10fd0 <bcmp@plt>
   14f2c:	mov	r4, r0
   14f30:	cmp	r0, #0
   14f34:	movwne	r4, #1
   14f38:	mov	r0, r4
   14f3c:	sub	sp, fp, #8
   14f40:	pop	{r4, sl, fp, pc}
   14f44:	b	14f48 <__assert_fail@plt+0x3e7c>
   14f48:	push	{r4, r5, r6, r7, fp, lr}
   14f4c:	add	fp, sp, #16
   14f50:	mov	r6, r2
   14f54:	mov	r4, r1
   14f58:	bl	14fe0 <__assert_fail@plt+0x3f14>
   14f5c:	cmp	r0, #0
   14f60:	beq	14f90 <__assert_fail@plt+0x3ec4>
   14f64:	mov	r7, r0
   14f68:	bl	10fdc <strlen@plt>
   14f6c:	cmp	r0, r6
   14f70:	bcs	14fac <__assert_fail@plt+0x3ee0>
   14f74:	add	r2, r0, #1
   14f78:	mov	r0, r4
   14f7c:	mov	r1, r7
   14f80:	bl	10ec8 <memcpy@plt>
   14f84:	mov	r5, #0
   14f88:	mov	r0, r5
   14f8c:	pop	{r4, r5, r6, r7, fp, pc}
   14f90:	mov	r5, #22
   14f94:	cmp	r6, #0
   14f98:	beq	14fd4 <__assert_fail@plt+0x3f08>
   14f9c:	mov	r0, #0
   14fa0:	strb	r0, [r4]
   14fa4:	mov	r0, r5
   14fa8:	pop	{r4, r5, r6, r7, fp, pc}
   14fac:	mov	r5, #34	; 0x22
   14fb0:	cmp	r6, #0
   14fb4:	beq	14fd4 <__assert_fail@plt+0x3f08>
   14fb8:	sub	r6, r6, #1
   14fbc:	mov	r0, r4
   14fc0:	mov	r1, r7
   14fc4:	mov	r2, r6
   14fc8:	bl	10ec8 <memcpy@plt>
   14fcc:	mov	r0, #0
   14fd0:	strb	r0, [r4, r6]
   14fd4:	mov	r0, r5
   14fd8:	pop	{r4, r5, r6, r7, fp, pc}
   14fdc:	b	14fe0 <__assert_fail@plt+0x3f14>
   14fe0:	mov	r1, #0
   14fe4:	b	11060 <setlocale@plt>
   14fe8:	cmp	r3, #0
   14fec:	cmpeq	r2, #0
   14ff0:	bne	15008 <__assert_fail@plt+0x3f3c>
   14ff4:	cmp	r1, #0
   14ff8:	cmpeq	r0, #0
   14ffc:	mvnne	r1, #0
   15000:	mvnne	r0, #0
   15004:	b	15024 <__assert_fail@plt+0x3f58>
   15008:	sub	sp, sp, #8
   1500c:	push	{sp, lr}
   15010:	bl	15034 <__assert_fail@plt+0x3f68>
   15014:	ldr	lr, [sp, #4]
   15018:	add	sp, sp, #8
   1501c:	pop	{r2, r3}
   15020:	bx	lr
   15024:	push	{r1, lr}
   15028:	mov	r0, #8
   1502c:	bl	10e74 <raise@plt>
   15030:	pop	{r1, pc}
   15034:	cmp	r1, r3
   15038:	cmpeq	r0, r2
   1503c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15040:	mov	r4, r0
   15044:	movcc	r0, #0
   15048:	mov	r5, r1
   1504c:	ldr	lr, [sp, #36]	; 0x24
   15050:	movcc	r1, r0
   15054:	bcc	15150 <__assert_fail@plt+0x4084>
   15058:	cmp	r3, #0
   1505c:	clzeq	ip, r2
   15060:	clzne	ip, r3
   15064:	addeq	ip, ip, #32
   15068:	cmp	r5, #0
   1506c:	clzeq	r1, r4
   15070:	addeq	r1, r1, #32
   15074:	clzne	r1, r5
   15078:	sub	ip, ip, r1
   1507c:	sub	sl, ip, #32
   15080:	lsl	r9, r3, ip
   15084:	rsb	fp, ip, #32
   15088:	orr	r9, r9, r2, lsl sl
   1508c:	orr	r9, r9, r2, lsr fp
   15090:	lsl	r8, r2, ip
   15094:	cmp	r5, r9
   15098:	cmpeq	r4, r8
   1509c:	movcc	r0, #0
   150a0:	movcc	r1, r0
   150a4:	bcc	150c0 <__assert_fail@plt+0x3ff4>
   150a8:	mov	r0, #1
   150ac:	subs	r4, r4, r8
   150b0:	lsl	r1, r0, sl
   150b4:	orr	r1, r1, r0, lsr fp
   150b8:	lsl	r0, r0, ip
   150bc:	sbc	r5, r5, r9
   150c0:	cmp	ip, #0
   150c4:	beq	15150 <__assert_fail@plt+0x4084>
   150c8:	lsr	r6, r8, #1
   150cc:	orr	r6, r6, r9, lsl #31
   150d0:	lsr	r7, r9, #1
   150d4:	mov	r2, ip
   150d8:	b	150fc <__assert_fail@plt+0x4030>
   150dc:	subs	r3, r4, r6
   150e0:	sbc	r8, r5, r7
   150e4:	adds	r3, r3, r3
   150e8:	adc	r8, r8, r8
   150ec:	adds	r4, r3, #1
   150f0:	adc	r5, r8, #0
   150f4:	subs	r2, r2, #1
   150f8:	beq	15118 <__assert_fail@plt+0x404c>
   150fc:	cmp	r5, r7
   15100:	cmpeq	r4, r6
   15104:	bcs	150dc <__assert_fail@plt+0x4010>
   15108:	adds	r4, r4, r4
   1510c:	adc	r5, r5, r5
   15110:	subs	r2, r2, #1
   15114:	bne	150fc <__assert_fail@plt+0x4030>
   15118:	lsr	r3, r4, ip
   1511c:	orr	r3, r3, r5, lsl fp
   15120:	lsr	r2, r5, ip
   15124:	orr	r3, r3, r5, lsr sl
   15128:	adds	r0, r0, r4
   1512c:	mov	r4, r3
   15130:	lsl	r3, r2, ip
   15134:	orr	r3, r3, r4, lsl sl
   15138:	lsl	ip, r4, ip
   1513c:	orr	r3, r3, r4, lsr fp
   15140:	adc	r1, r1, r5
   15144:	subs	r0, r0, ip
   15148:	mov	r5, r2
   1514c:	sbc	r1, r1, r3
   15150:	cmp	lr, #0
   15154:	strdne	r4, [lr]
   15158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1515c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15160:	mov	r7, r0
   15164:	ldr	r6, [pc, #72]	; 151b4 <__assert_fail@plt+0x40e8>
   15168:	ldr	r5, [pc, #72]	; 151b8 <__assert_fail@plt+0x40ec>
   1516c:	add	r6, pc, r6
   15170:	add	r5, pc, r5
   15174:	sub	r6, r6, r5
   15178:	mov	r8, r1
   1517c:	mov	r9, r2
   15180:	bl	10e3c <calloc@plt-0x20>
   15184:	asrs	r6, r6, #2
   15188:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1518c:	mov	r4, #0
   15190:	add	r4, r4, #1
   15194:	ldr	r3, [r5], #4
   15198:	mov	r2, r9
   1519c:	mov	r1, r8
   151a0:	mov	r0, r7
   151a4:	blx	r3
   151a8:	cmp	r6, r4
   151ac:	bne	15190 <__assert_fail@plt+0x40c4>
   151b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   151b4:	muleq	r1, r8, sp
   151b8:	muleq	r1, r0, sp
   151bc:	bx	lr
   151c0:	ldr	r3, [pc, #12]	; 151d4 <__assert_fail@plt+0x4108>
   151c4:	mov	r1, #0
   151c8:	add	r3, pc, r3
   151cc:	ldr	r2, [r3]
   151d0:	b	11000 <__cxa_atexit@plt>
   151d4:	andeq	r0, r1, ip, lsl pc

Disassembly of section .fini:

000151d8 <.fini>:
   151d8:	push	{r3, lr}
   151dc:	pop	{r3, pc}
