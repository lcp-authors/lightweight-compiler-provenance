
../repos/prog2/0.5:     file format elf32-littlearm


Disassembly of section .init:

00010694 <.init>:
   10694:	push	{r3, lr}
   10698:	bl	10750 <_start@@Base+0x3c>
   1069c:	pop	{r3, pc}

Disassembly of section .plt:

000106a0 <strcmp@plt-0x14>:
   106a0:	push	{lr}		; (str lr, [sp, #-4]!)
   106a4:	ldr	lr, [pc, #4]	; 106b0 <strcmp@plt-0x4>
   106a8:	add	lr, pc, lr
   106ac:	ldr	pc, [lr, #8]!
   106b0:	andeq	r0, r1, r0, asr r9

000106b4 <strcmp@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2384]!	; 0x950

000106c0 <printf@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2376]!	; 0x948

000106cc <__libc_start_main@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2368]!	; 0x940

000106d8 <__gmon_start__@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2360]!	; 0x938

000106e4 <bcmp@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #16, 20	; 0x10000
   106ec:	ldr	pc, [ip, #2352]!	; 0x930

000106f0 <strlen@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2344]!	; 0x928

000106fc <__isoc99_scanf@plt>:
   106fc:	add	ip, pc, #0, 12
   10700:	add	ip, ip, #16, 20	; 0x10000
   10704:	ldr	pc, [ip, #2336]!	; 0x920

00010708 <abort@plt>:
   10708:	add	ip, pc, #0, 12
   1070c:	add	ip, ip, #16, 20	; 0x10000
   10710:	ldr	pc, [ip, #2328]!	; 0x918

Disassembly of section .text:

00010714 <_start@@Base>:
   10714:	mov	fp, #0
   10718:	mov	lr, #0
   1071c:	pop	{r1}		; (ldr r1, [sp], #4)
   10720:	mov	r2, sp
   10724:	push	{r2}		; (str r2, [sp, #-4]!)
   10728:	push	{r0}		; (str r0, [sp, #-4]!)
   1072c:	ldr	ip, [pc, #16]	; 10744 <_start@@Base+0x30>
   10730:	push	{ip}		; (str ip, [sp, #-4]!)
   10734:	ldr	r0, [pc, #12]	; 10748 <_start@@Base+0x34>
   10738:	ldr	r3, [pc, #12]	; 1074c <_start@@Base+0x38>
   1073c:	bl	106cc <__libc_start_main@plt>
   10740:	bl	10708 <abort@plt>
   10744:	strdeq	r0, [r1], -r4
   10748:	andeq	r0, r1, ip, asr #16
   1074c:	muleq	r1, r4, sl
   10750:	ldr	r3, [pc, #20]	; 1076c <_start@@Base+0x58>
   10754:	ldr	r2, [pc, #20]	; 10770 <_start@@Base+0x5c>
   10758:	add	r3, pc, r3
   1075c:	ldr	r2, [r3, r2]
   10760:	cmp	r2, #0
   10764:	bxeq	lr
   10768:	b	106d8 <__gmon_start__@plt>
   1076c:	andeq	r0, r1, r0, lsr #17
   10770:	andeq	r0, r0, ip, lsr #32
   10774:	ldr	r0, [pc, #24]	; 10794 <_start@@Base+0x80>
   10778:	ldr	r3, [pc, #24]	; 10798 <_start@@Base+0x84>
   1077c:	cmp	r3, r0
   10780:	bxeq	lr
   10784:	ldr	r3, [pc, #16]	; 1079c <_start@@Base+0x88>
   10788:	cmp	r3, #0
   1078c:	bxeq	lr
   10790:	bx	r3
   10794:	andeq	r1, r2, r8, lsr r0
   10798:	andeq	r1, r2, r8, lsr r0
   1079c:	andeq	r0, r0, r0
   107a0:	ldr	r0, [pc, #36]	; 107cc <_start@@Base+0xb8>
   107a4:	ldr	r1, [pc, #36]	; 107d0 <_start@@Base+0xbc>
   107a8:	sub	r1, r1, r0
   107ac:	asr	r1, r1, #2
   107b0:	add	r1, r1, r1, lsr #31
   107b4:	asrs	r1, r1, #1
   107b8:	bxeq	lr
   107bc:	ldr	r3, [pc, #16]	; 107d4 <_start@@Base+0xc0>
   107c0:	cmp	r3, #0
   107c4:	bxeq	lr
   107c8:	bx	r3
   107cc:	andeq	r1, r2, r8, lsr r0
   107d0:	andeq	r1, r2, r8, lsr r0
   107d4:	andeq	r0, r0, r0
   107d8:	push	{r4, lr}
   107dc:	ldr	r4, [pc, #24]	; 107fc <_start@@Base+0xe8>
   107e0:	ldrb	r3, [r4]
   107e4:	cmp	r3, #0
   107e8:	popne	{r4, pc}
   107ec:	bl	10774 <_start@@Base+0x60>
   107f0:	mov	r3, #1
   107f4:	strb	r3, [r4]
   107f8:	pop	{r4, pc}
   107fc:	andeq	r1, r2, r8, lsr r0
   10800:	b	107a0 <_start@@Base+0x8c>

00010804 <inverte@@Base>:
   10804:	push	{r4, r5, r6, r7, fp, lr}
   10808:	add	fp, sp, #16
   1080c:	mov	r4, r1
   10810:	mov	r5, r0
   10814:	bl	106f0 <strlen@plt>
   10818:	cmp	r0, #0
   1081c:	beq	10848 <inverte@@Base+0x44>
   10820:	sub	r6, r5, #1
   10824:	mov	r7, #0
   10828:	add	r0, r6, r0
   1082c:	ldrb	r0, [r0, -r7]
   10830:	strb	r0, [r4, r7]
   10834:	mov	r0, r5
   10838:	add	r7, r7, #1
   1083c:	bl	106f0 <strlen@plt>
   10840:	cmp	r0, r7
   10844:	bhi	10828 <inverte@@Base+0x24>
   10848:	pop	{r4, r5, r6, r7, fp, pc}

0001084c <main@@Base>:
   1084c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10850:	add	fp, sp, #28
   10854:	sub	sp, sp, #220	; 0xdc
   10858:	vmov.i32	q8, #0	; 0x00000000
   1085c:	add	r9, sp, #112	; 0x70
   10860:	mov	r0, #96	; 0x60
   10864:	mov	r2, #0
   10868:	add	r5, sp, #8
   1086c:	mov	r1, r9
   10870:	vst1.64	{d16-d17}, [r1], r0
   10874:	str	r2, [r1]
   10878:	add	r1, r9, #80	; 0x50
   1087c:	vst1.64	{d16-d17}, [r1]
   10880:	add	r1, r9, #64	; 0x40
   10884:	vst1.64	{d16-d17}, [r1]
   10888:	add	r1, r9, #48	; 0x30
   1088c:	vst1.64	{d16-d17}, [r1]
   10890:	add	r1, r9, #32
   10894:	vst1.64	{d16-d17}, [r1]
   10898:	add	r1, r9, #16
   1089c:	vst1.64	{d16-d17}, [r1]
   108a0:	add	r1, r5, #80	; 0x50
   108a4:	vst1.64	{d16-d17}, [r1]
   108a8:	add	r1, r5, #64	; 0x40
   108ac:	vst1.64	{d16-d17}, [r1]
   108b0:	add	r1, r5, #48	; 0x30
   108b4:	vst1.64	{d16-d17}, [r1]
   108b8:	add	r1, r5, #32
   108bc:	vst1.64	{d16-d17}, [r1]
   108c0:	add	r1, r5, #16
   108c4:	vst1.64	{d16-d17}, [r1]
   108c8:	mov	r1, r5
   108cc:	vst1.64	{d16-d17}, [r1], r0
   108d0:	movw	r0, #2820	; 0xb04
   108d4:	movt	r0, #1
   108d8:	str	r2, [r1]
   108dc:	bl	106c0 <printf@plt>
   108e0:	movw	r0, #2830	; 0xb0e
   108e4:	mov	r1, r9
   108e8:	movt	r0, #1
   108ec:	bl	106fc <__isoc99_scanf@plt>
   108f0:	movw	r1, #2833	; 0xb11
   108f4:	mov	r0, r9
   108f8:	mov	r2, #2
   108fc:	movt	r1, #1
   10900:	bl	106e4 <bcmp@plt>
   10904:	cmp	r0, #0
   10908:	beq	10a88 <main@@Base+0x23c>
   1090c:	movw	r4, #2835	; 0xb13
   10910:	movw	r6, #2861	; 0xb2d
   10914:	movw	r8, #2833	; 0xb11
   10918:	sub	r0, r9, #32
   1091c:	sub	r7, r9, #1
   10920:	mvn	sl, #31
   10924:	movt	r4, #1
   10928:	movt	r6, #1
   1092c:	movt	r8, #1
   10930:	str	r0, [sp, #4]
   10934:	mov	r0, r9
   10938:	bl	106f0 <strlen@plt>
   1093c:	cmp	r0, #0
   10940:	bne	109a8 <main@@Base+0x15c>
   10944:	mov	r0, r9
   10948:	mov	r1, r5
   1094c:	bl	106b4 <strcmp@plt>
   10950:	cmp	r0, #0
   10954:	mov	r0, r6
   10958:	mov	r1, r9
   1095c:	moveq	r0, r4
   10960:	bl	106c0 <printf@plt>
   10964:	movw	r0, #2820	; 0xb04
   10968:	movt	r0, #1
   1096c:	bl	106c0 <printf@plt>
   10970:	movw	r0, #2830	; 0xb0e
   10974:	mov	r1, r9
   10978:	movt	r0, #1
   1097c:	bl	106fc <__isoc99_scanf@plt>
   10980:	mov	r0, r9
   10984:	mov	r1, r8
   10988:	mov	r2, #2
   1098c:	bl	106e4 <bcmp@plt>
   10990:	cmp	r0, #0
   10994:	beq	10a88 <main@@Base+0x23c>
   10998:	mov	r0, r9
   1099c:	bl	106f0 <strlen@plt>
   109a0:	cmp	r0, #0
   109a4:	beq	10944 <main@@Base+0xf8>
   109a8:	mov	r1, #0
   109ac:	cmp	r0, #16
   109b0:	bcc	10a54 <main@@Base+0x208>
   109b4:	bic	r1, r0, #15
   109b8:	mov	r3, #1
   109bc:	subs	r2, r1, #16
   109c0:	add	r2, r3, r2, lsr #4
   109c4:	and	ip, r2, #1
   109c8:	beq	10a70 <main@@Base+0x224>
   109cc:	ldr	r3, [sp, #4]
   109d0:	add	r6, r3, r0
   109d4:	sub	r3, r2, ip
   109d8:	mov	r2, #0
   109dc:	add	r4, r6, #16
   109e0:	subs	r3, r3, #2
   109e4:	vld1.8	{d16-d17}, [r4]
   109e8:	add	r4, r5, r2
   109ec:	add	r2, r2, #32
   109f0:	vrev64.8	q8, q8
   109f4:	vext.8	q8, q8, q8, #8
   109f8:	vst1.8	{d16-d17}, [r4]!
   109fc:	vld1.8	{d16-d17}, [r6], sl
   10a00:	vrev64.8	q8, q8
   10a04:	vext.8	q8, q8, q8, #8
   10a08:	vst1.8	{d16-d17}, [r4]
   10a0c:	bne	109dc <main@@Base+0x190>
   10a10:	movw	r6, #2861	; 0xb2d
   10a14:	cmp	ip, #0
   10a18:	movt	r6, #1
   10a1c:	beq	10a44 <main@@Base+0x1f8>
   10a20:	mvn	r3, r2
   10a24:	add	r2, r5, r2
   10a28:	add	r3, r0, r3
   10a2c:	add	r3, r9, r3
   10a30:	sub	r3, r3, #15
   10a34:	vld1.8	{d16-d17}, [r3]
   10a38:	vrev64.8	q8, q8
   10a3c:	vext.8	q8, q8, q8, #8
   10a40:	vst1.8	{d16-d17}, [r2]
   10a44:	movw	r4, #2835	; 0xb13
   10a48:	cmp	r0, r1
   10a4c:	movt	r4, #1
   10a50:	beq	10944 <main@@Base+0xf8>
   10a54:	sub	r0, r0, r1
   10a58:	add	r1, r5, r1
   10a5c:	ldrb	r2, [r7, r0]
   10a60:	subs	r0, r0, #1
   10a64:	strb	r2, [r1], #1
   10a68:	bne	10a5c <main@@Base+0x210>
   10a6c:	b	10944 <main@@Base+0xf8>
   10a70:	mov	r2, #0
   10a74:	movw	r6, #2861	; 0xb2d
   10a78:	cmp	ip, #0
   10a7c:	movt	r6, #1
   10a80:	bne	10a20 <main@@Base+0x1d4>
   10a84:	b	10a44 <main@@Base+0x1f8>
   10a88:	mov	r0, #0
   10a8c:	sub	sp, fp, #28
   10a90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010a94 <__libc_csu_init@@Base>:
   10a94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10a98:	mov	r7, r0
   10a9c:	ldr	r6, [pc, #72]	; 10aec <__libc_csu_init@@Base+0x58>
   10aa0:	ldr	r5, [pc, #72]	; 10af0 <__libc_csu_init@@Base+0x5c>
   10aa4:	add	r6, pc, r6
   10aa8:	add	r5, pc, r5
   10aac:	sub	r6, r6, r5
   10ab0:	mov	r8, r1
   10ab4:	mov	r9, r2
   10ab8:	bl	10694 <strcmp@plt-0x20>
   10abc:	asrs	r6, r6, #2
   10ac0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ac4:	mov	r4, #0
   10ac8:	add	r4, r4, #1
   10acc:	ldr	r3, [r5], #4
   10ad0:	mov	r2, r9
   10ad4:	mov	r1, r8
   10ad8:	mov	r0, r7
   10adc:	blx	r3
   10ae0:	cmp	r6, r4
   10ae4:	bne	10ac8 <__libc_csu_init@@Base+0x34>
   10ae8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10aec:	andeq	r0, r1, r0, ror #8
   10af0:	andeq	r0, r1, r8, asr r4

00010af4 <__libc_csu_fini@@Base>:
   10af4:	bx	lr

Disassembly of section .fini:

00010af8 <.fini>:
   10af8:	push	{r3, lr}
   10afc:	pop	{r3, pc}
