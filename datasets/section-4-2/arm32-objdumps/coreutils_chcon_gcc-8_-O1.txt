
../repos/coreutils/src/chcon:     file format elf32-littlearm


Disassembly of section .init:

0001120c <.init>:
   1120c:	push	{r3, lr}
   11210:	bl	1164c <__assert_fail@plt+0x48>
   11214:	pop	{r3, pc}

Disassembly of section .plt:

00011218 <fstatfs64@plt-0x14>:
   11218:	push	{lr}		; (str lr, [sp, #-4]!)
   1121c:	ldr	lr, [pc, #4]	; 11228 <fstatfs64@plt-0x4>
   11220:	add	lr, pc, lr
   11224:	ldr	pc, [lr, #8]!
   11228:	ldrdeq	sl, [r1], -r8

0001122c <fstatfs64@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3544]!	; 0xdd8

00011238 <calloc@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3536]!	; 0xdd0

00011244 <fputs_unlocked@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3528]!	; 0xdc8

00011250 <raise@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3520]!	; 0xdc0

0001125c <is_selinux_enabled@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3512]!	; 0xdb8

00011268 <strcmp@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3504]!	; 0xdb0

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3496]!	; 0xda8

00011280 <lsetfilecon@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3488]!	; 0xda0

0001128c <memmove@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3480]!	; 0xd98

00011298 <free@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3472]!	; 0xd90

000112a4 <_exit@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3464]!	; 0xd88

000112b0 <memcpy@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3456]!	; 0xd80

000112bc <mbsinit@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3448]!	; 0xd78

000112c8 <context_new@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3440]!	; 0xd70

000112d4 <memcmp@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3432]!	; 0xd68

000112e0 <fputc_unlocked@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3424]!	; 0xd60

000112ec <context_role_set@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3416]!	; 0xd58

000112f8 <dcgettext@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3408]!	; 0xd50

00011304 <context_type_set@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3400]!	; 0xd48

00011310 <realloc@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3392]!	; 0xd40

0001131c <fgetfilecon@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3384]!	; 0xd38

00011328 <textdomain@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3376]!	; 0xd30

00011334 <chdir@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3368]!	; 0xd28

00011340 <__fxstatat64@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3360]!	; 0xd20

0001134c <iswprint@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3352]!	; 0xd18

00011358 <__fxstat64@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3344]!	; 0xd10

00011364 <fwrite@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3336]!	; 0xd08

00011370 <lseek64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3328]!	; 0xd00

0001137c <__ctype_get_mb_cur_max@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3320]!	; 0xcf8

00011388 <strcpy@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3312]!	; 0xcf0

00011394 <__fpending@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3304]!	; 0xce8

000113a0 <mbrtowc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3296]!	; 0xce0

000113ac <error@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b8 <security_check_context@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3280]!	; 0xcd0

000113c4 <open64@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3272]!	; 0xcc8

000113d0 <lgetfilecon@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3264]!	; 0xcc0

000113dc <malloc@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e8 <__libc_start_main@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3248]!	; 0xcb0

000113f4 <__freading@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3240]!	; 0xca8

00011400 <__gmon_start__@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3232]!	; 0xca0

0001140c <context_free@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3224]!	; 0xc98

00011418 <getopt_long@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3216]!	; 0xc90

00011424 <__ctype_b_loc@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3208]!	; 0xc88

00011430 <getcwd@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3200]!	; 0xc80

0001143c <exit@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3192]!	; 0xc78

00011448 <context_user_set@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3184]!	; 0xc70

00011454 <getfilecon@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3176]!	; 0xc68

00011460 <strlen@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3168]!	; 0xc60

0001146c <openat64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3160]!	; 0xc58

00011478 <memrchr@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3152]!	; 0xc50

00011484 <__errno_location@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3144]!	; 0xc48

00011490 <__sprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3136]!	; 0xc40

0001149c <__cxa_atexit@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3128]!	; 0xc38

000114a8 <memset@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3120]!	; 0xc30

000114b4 <__printf_chk@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3112]!	; 0xc28

000114c0 <fileno@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3104]!	; 0xc20

000114cc <__fprintf_chk@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3096]!	; 0xc18

000114d8 <memchr@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3088]!	; 0xc10

000114e4 <setfilecon@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3080]!	; 0xc08

000114f0 <access@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3072]!	; 0xc00

000114fc <fclose@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3064]!	; 0xbf8

00011508 <fseeko64@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3056]!	; 0xbf0

00011514 <fcntl64@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3048]!	; 0xbe8

00011520 <setlocale@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3040]!	; 0xbe0

0001152c <strrchr@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3032]!	; 0xbd8

00011538 <nl_langinfo@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3024]!	; 0xbd0

00011544 <readdir64@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3016]!	; 0xbc8

00011550 <fdopendir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3008]!	; 0xbc0

0001155c <dirfd@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3000]!	; 0xbb8

00011568 <fchdir@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #106496	; 0x1a000
   11570:	ldr	pc, [ip, #2992]!	; 0xbb0

00011574 <qsort@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #106496	; 0x1a000
   1157c:	ldr	pc, [ip, #2984]!	; 0xba8

00011580 <freecon@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #106496	; 0x1a000
   11588:	ldr	pc, [ip, #2976]!	; 0xba0

0001158c <bindtextdomain@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #106496	; 0x1a000
   11594:	ldr	pc, [ip, #2968]!	; 0xb98

00011598 <context_range_set@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #106496	; 0x1a000
   115a0:	ldr	pc, [ip, #2960]!	; 0xb90

000115a4 <context_str@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #106496	; 0x1a000
   115ac:	ldr	pc, [ip, #2952]!	; 0xb88

000115b0 <__xstat64@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #106496	; 0x1a000
   115b8:	ldr	pc, [ip, #2944]!	; 0xb80

000115bc <strncmp@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #106496	; 0x1a000
   115c4:	ldr	pc, [ip, #2936]!	; 0xb78

000115c8 <abort@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #106496	; 0x1a000
   115d0:	ldr	pc, [ip, #2928]!	; 0xb70

000115d4 <close@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #106496	; 0x1a000
   115dc:	ldr	pc, [ip, #2920]!	; 0xb68

000115e0 <__lxstat64@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #106496	; 0x1a000
   115e8:	ldr	pc, [ip, #2912]!	; 0xb60

000115ec <closedir@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #106496	; 0x1a000
   115f4:	ldr	pc, [ip, #2904]!	; 0xb58

000115f8 <strspn@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #106496	; 0x1a000
   11600:	ldr	pc, [ip, #2896]!	; 0xb50

00011604 <__assert_fail@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #106496	; 0x1a000
   1160c:	ldr	pc, [ip, #2888]!	; 0xb48

Disassembly of section .text:

00011610 <.text>:
   11610:	mov	fp, #0
   11614:	mov	lr, #0
   11618:	pop	{r1}		; (ldr r1, [sp], #4)
   1161c:	mov	r2, sp
   11620:	push	{r2}		; (str r2, [sp, #-4]!)
   11624:	push	{r0}		; (str r0, [sp, #-4]!)
   11628:	ldr	ip, [pc, #16]	; 11640 <__assert_fail@plt+0x3c>
   1162c:	push	{ip}		; (str ip, [sp, #-4]!)
   11630:	ldr	r0, [pc, #12]	; 11644 <__assert_fail@plt+0x40>
   11634:	ldr	r3, [pc, #12]	; 11648 <__assert_fail@plt+0x44>
   11638:	bl	113e8 <__libc_start_main@plt>
   1163c:	bl	115c8 <abort@plt>
   11640:	andeq	sl, r1, r4, ror #19
   11644:	andeq	r1, r1, r8, asr fp
   11648:	andeq	sl, r1, r4, lsl #19
   1164c:	ldr	r3, [pc, #20]	; 11668 <__assert_fail@plt+0x64>
   11650:	ldr	r2, [pc, #20]	; 1166c <__assert_fail@plt+0x68>
   11654:	add	r3, pc, r3
   11658:	ldr	r2, [r3, r2]
   1165c:	cmp	r2, #0
   11660:	bxeq	lr
   11664:	b	11400 <__gmon_start__@plt>
   11668:	andeq	sl, r1, r4, lsr #19
   1166c:	andeq	r0, r0, r8, asr r1
   11670:	ldr	r0, [pc, #24]	; 11690 <__assert_fail@plt+0x8c>
   11674:	ldr	r3, [pc, #24]	; 11694 <__assert_fail@plt+0x90>
   11678:	cmp	r3, r0
   1167c:	bxeq	lr
   11680:	ldr	r3, [pc, #16]	; 11698 <__assert_fail@plt+0x94>
   11684:	cmp	r3, #0
   11688:	bxeq	lr
   1168c:	bx	r3
   11690:	andeq	ip, r2, ip, lsr #3
   11694:	andeq	ip, r2, ip, lsr #3
   11698:	andeq	r0, r0, r0
   1169c:	ldr	r0, [pc, #36]	; 116c8 <__assert_fail@plt+0xc4>
   116a0:	ldr	r1, [pc, #36]	; 116cc <__assert_fail@plt+0xc8>
   116a4:	sub	r1, r1, r0
   116a8:	asr	r1, r1, #2
   116ac:	add	r1, r1, r1, lsr #31
   116b0:	asrs	r1, r1, #1
   116b4:	bxeq	lr
   116b8:	ldr	r3, [pc, #16]	; 116d0 <__assert_fail@plt+0xcc>
   116bc:	cmp	r3, #0
   116c0:	bxeq	lr
   116c4:	bx	r3
   116c8:	andeq	ip, r2, ip, lsr #3
   116cc:	andeq	ip, r2, ip, lsr #3
   116d0:	andeq	r0, r0, r0
   116d4:	push	{r4, lr}
   116d8:	ldr	r4, [pc, #24]	; 116f8 <__assert_fail@plt+0xf4>
   116dc:	ldrb	r3, [r4]
   116e0:	cmp	r3, #0
   116e4:	popne	{r4, pc}
   116e8:	bl	11670 <__assert_fail@plt+0x6c>
   116ec:	mov	r3, #1
   116f0:	strb	r3, [r4]
   116f4:	pop	{r4, pc}
   116f8:	andeq	ip, r2, ip, asr #3
   116fc:	b	1169c <__assert_fail@plt+0x98>
   11700:	push	{lr}		; (str lr, [sp, #-4]!)
   11704:	sub	sp, sp, #68	; 0x44
   11708:	subs	r5, r0, #0
   1170c:	beq	11754 <__assert_fail@plt+0x150>
   11710:	movw	r3, #49600	; 0xc1c0
   11714:	movt	r3, #2
   11718:	ldr	r4, [r3]
   1171c:	mov	r2, #5
   11720:	movw	r1, #43820	; 0xab2c
   11724:	movt	r1, #1
   11728:	mov	r0, #0
   1172c:	bl	112f8 <dcgettext@plt>
   11730:	movw	r3, #49676	; 0xc20c
   11734:	movt	r3, #2
   11738:	ldr	r3, [r3]
   1173c:	mov	r2, r0
   11740:	mov	r1, #1
   11744:	mov	r0, r4
   11748:	bl	114cc <__fprintf_chk@plt>
   1174c:	mov	r0, r5
   11750:	bl	1143c <exit@plt>
   11754:	mov	r2, #5
   11758:	movw	r1, #43860	; 0xab54
   1175c:	movt	r1, #1
   11760:	mov	r0, #0
   11764:	bl	112f8 <dcgettext@plt>
   11768:	movw	r3, #49676	; 0xc20c
   1176c:	movt	r3, #2
   11770:	ldr	r2, [r3]
   11774:	str	r2, [sp]
   11778:	mov	r3, r2
   1177c:	mov	r1, r0
   11780:	mov	r0, #1
   11784:	bl	114b4 <__printf_chk@plt>
   11788:	mov	r2, #5
   1178c:	movw	r1, #44020	; 0xabf4
   11790:	movt	r1, #1
   11794:	mov	r0, #0
   11798:	bl	112f8 <dcgettext@plt>
   1179c:	movw	r4, #49604	; 0xc1c4
   117a0:	movt	r4, #2
   117a4:	ldr	r1, [r4]
   117a8:	bl	11244 <fputs_unlocked@plt>
   117ac:	mov	r2, #5
   117b0:	movw	r1, #44160	; 0xac80
   117b4:	movt	r1, #1
   117b8:	mov	r0, #0
   117bc:	bl	112f8 <dcgettext@plt>
   117c0:	ldr	r1, [r4]
   117c4:	bl	11244 <fputs_unlocked@plt>
   117c8:	mov	r2, #5
   117cc:	movw	r1, #44236	; 0xaccc
   117d0:	movt	r1, #1
   117d4:	mov	r0, #0
   117d8:	bl	112f8 <dcgettext@plt>
   117dc:	ldr	r1, [r4]
   117e0:	bl	11244 <fputs_unlocked@plt>
   117e4:	mov	r2, #5
   117e8:	movw	r1, #44468	; 0xadb4
   117ec:	movt	r1, #1
   117f0:	mov	r0, #0
   117f4:	bl	112f8 <dcgettext@plt>
   117f8:	ldr	r1, [r4]
   117fc:	bl	11244 <fputs_unlocked@plt>
   11800:	mov	r2, #5
   11804:	movw	r1, #44752	; 0xaed0
   11808:	movt	r1, #1
   1180c:	mov	r0, #0
   11810:	bl	112f8 <dcgettext@plt>
   11814:	ldr	r1, [r4]
   11818:	bl	11244 <fputs_unlocked@plt>
   1181c:	mov	r2, #5
   11820:	movw	r1, #44880	; 0xaf50
   11824:	movt	r1, #1
   11828:	mov	r0, #0
   1182c:	bl	112f8 <dcgettext@plt>
   11830:	ldr	r1, [r4]
   11834:	bl	11244 <fputs_unlocked@plt>
   11838:	mov	r2, #5
   1183c:	movw	r1, #45000	; 0xafc8
   11840:	movt	r1, #1
   11844:	mov	r0, #0
   11848:	bl	112f8 <dcgettext@plt>
   1184c:	ldr	r1, [r4]
   11850:	bl	11244 <fputs_unlocked@plt>
   11854:	mov	r2, #5
   11858:	movw	r1, #45072	; 0xb010
   1185c:	movt	r1, #1
   11860:	mov	r0, #0
   11864:	bl	112f8 <dcgettext@plt>
   11868:	ldr	r1, [r4]
   1186c:	bl	11244 <fputs_unlocked@plt>
   11870:	mov	r2, #5
   11874:	movw	r1, #45144	; 0xb058
   11878:	movt	r1, #1
   1187c:	mov	r0, #0
   11880:	bl	112f8 <dcgettext@plt>
   11884:	ldr	r1, [r4]
   11888:	bl	11244 <fputs_unlocked@plt>
   1188c:	mov	r2, #5
   11890:	movw	r1, #45612	; 0xb22c
   11894:	movt	r1, #1
   11898:	mov	r0, #0
   1189c:	bl	112f8 <dcgettext@plt>
   118a0:	ldr	r1, [r4]
   118a4:	bl	11244 <fputs_unlocked@plt>
   118a8:	mov	r2, #5
   118ac:	movw	r1, #45660	; 0xb25c
   118b0:	movt	r1, #1
   118b4:	mov	r0, #0
   118b8:	bl	112f8 <dcgettext@plt>
   118bc:	ldr	r1, [r4]
   118c0:	bl	11244 <fputs_unlocked@plt>
   118c4:	movw	r0, #43532	; 0xaa0c
   118c8:	movt	r0, #1
   118cc:	ldr	r1, [r0]
   118d0:	ldr	r3, [r0, #4]
   118d4:	str	r1, [sp, #8]
   118d8:	str	r3, [sp, #12]
   118dc:	ldrd	r2, [r0, #8]
   118e0:	strd	r2, [sp, #16]
   118e4:	ldrd	r2, [r0, #16]
   118e8:	strd	r2, [sp, #24]
   118ec:	ldrd	r2, [r0, #24]
   118f0:	strd	r2, [sp, #32]
   118f4:	ldrd	r2, [r0, #32]
   118f8:	strd	r2, [sp, #40]	; 0x28
   118fc:	ldrd	r2, [r0, #40]	; 0x28
   11900:	strd	r2, [sp, #48]	; 0x30
   11904:	ldrd	r2, [r0, #48]	; 0x30
   11908:	strd	r2, [sp, #56]	; 0x38
   1190c:	cmp	r1, #0
   11910:	addeq	r4, sp, #8
   11914:	beq	11940 <__assert_fail@plt+0x33c>
   11918:	add	r4, sp, #8
   1191c:	movw	r6, #43812	; 0xab24
   11920:	movt	r6, #1
   11924:	mov	r0, r6
   11928:	bl	11268 <strcmp@plt>
   1192c:	cmp	r0, #0
   11930:	beq	11940 <__assert_fail@plt+0x33c>
   11934:	ldr	r1, [r4, #8]!
   11938:	cmp	r1, #0
   1193c:	bne	11924 <__assert_fail@plt+0x320>
   11940:	ldr	r4, [r4, #4]
   11944:	cmp	r4, #0
   11948:	beq	11aa4 <__assert_fail@plt+0x4a0>
   1194c:	mov	r2, #5
   11950:	movw	r1, #45716	; 0xb294
   11954:	movt	r1, #1
   11958:	mov	r0, #0
   1195c:	bl	112f8 <dcgettext@plt>
   11960:	movw	r3, #45740	; 0xb2ac
   11964:	movt	r3, #1
   11968:	movw	r2, #45780	; 0xb2d4
   1196c:	movt	r2, #1
   11970:	mov	r1, r0
   11974:	mov	r0, #1
   11978:	bl	114b4 <__printf_chk@plt>
   1197c:	mov	r1, #0
   11980:	mov	r0, #5
   11984:	bl	11520 <setlocale@plt>
   11988:	cmp	r0, #0
   1198c:	beq	119a8 <__assert_fail@plt+0x3a4>
   11990:	mov	r2, #3
   11994:	movw	r1, #45796	; 0xb2e4
   11998:	movt	r1, #1
   1199c:	bl	115bc <strncmp@plt>
   119a0:	cmp	r0, #0
   119a4:	bne	11a24 <__assert_fail@plt+0x420>
   119a8:	mov	r2, #5
   119ac:	movw	r1, #45872	; 0xb330
   119b0:	movt	r1, #1
   119b4:	mov	r0, #0
   119b8:	bl	112f8 <dcgettext@plt>
   119bc:	movw	r6, #43812	; 0xab24
   119c0:	movt	r6, #1
   119c4:	mov	r3, r6
   119c8:	movw	r2, #45740	; 0xb2ac
   119cc:	movt	r2, #1
   119d0:	mov	r1, r0
   119d4:	mov	r0, #1
   119d8:	bl	114b4 <__printf_chk@plt>
   119dc:	mov	r2, #5
   119e0:	movw	r1, #45900	; 0xb34c
   119e4:	movt	r1, #1
   119e8:	mov	r0, #0
   119ec:	bl	112f8 <dcgettext@plt>
   119f0:	mov	r1, r0
   119f4:	movw	r2, #46964	; 0xb774
   119f8:	movt	r2, #1
   119fc:	movw	r3, #45608	; 0xb228
   11a00:	movt	r3, #1
   11a04:	cmp	r4, r6
   11a08:	moveq	r3, r2
   11a0c:	mov	r2, r4
   11a10:	mov	r0, #1
   11a14:	bl	114b4 <__printf_chk@plt>
   11a18:	b	1174c <__assert_fail@plt+0x148>
   11a1c:	movw	r4, #43812	; 0xab24
   11a20:	movt	r4, #1
   11a24:	mov	r2, #5
   11a28:	movw	r1, #45800	; 0xb2e8
   11a2c:	movt	r1, #1
   11a30:	mov	r0, #0
   11a34:	bl	112f8 <dcgettext@plt>
   11a38:	movw	r3, #49604	; 0xc1c4
   11a3c:	movt	r3, #2
   11a40:	ldr	r1, [r3]
   11a44:	bl	11244 <fputs_unlocked@plt>
   11a48:	b	119a8 <__assert_fail@plt+0x3a4>
   11a4c:	mov	r2, #5
   11a50:	movw	r1, #45872	; 0xb330
   11a54:	movt	r1, #1
   11a58:	mov	r0, #0
   11a5c:	bl	112f8 <dcgettext@plt>
   11a60:	movw	r4, #43812	; 0xab24
   11a64:	movt	r4, #1
   11a68:	mov	r3, r4
   11a6c:	movw	r2, #45740	; 0xb2ac
   11a70:	movt	r2, #1
   11a74:	mov	r1, r0
   11a78:	mov	r0, #1
   11a7c:	bl	114b4 <__printf_chk@plt>
   11a80:	mov	r2, #5
   11a84:	movw	r1, #45900	; 0xb34c
   11a88:	movt	r1, #1
   11a8c:	mov	r0, #0
   11a90:	bl	112f8 <dcgettext@plt>
   11a94:	mov	r1, r0
   11a98:	movw	r3, #46964	; 0xb774
   11a9c:	movt	r3, #1
   11aa0:	b	11a0c <__assert_fail@plt+0x408>
   11aa4:	mov	r2, #5
   11aa8:	movw	r1, #45716	; 0xb294
   11aac:	movt	r1, #1
   11ab0:	mov	r0, #0
   11ab4:	bl	112f8 <dcgettext@plt>
   11ab8:	movw	r3, #45740	; 0xb2ac
   11abc:	movt	r3, #1
   11ac0:	movw	r2, #45780	; 0xb2d4
   11ac4:	movt	r2, #1
   11ac8:	mov	r1, r0
   11acc:	mov	r0, #1
   11ad0:	bl	114b4 <__printf_chk@plt>
   11ad4:	mov	r1, #0
   11ad8:	mov	r0, #5
   11adc:	bl	11520 <setlocale@plt>
   11ae0:	cmp	r0, #0
   11ae4:	beq	11a4c <__assert_fail@plt+0x448>
   11ae8:	mov	r2, #3
   11aec:	movw	r1, #45796	; 0xb2e4
   11af0:	movt	r1, #1
   11af4:	bl	115bc <strncmp@plt>
   11af8:	cmp	r0, #0
   11afc:	bne	11a1c <__assert_fail@plt+0x418>
   11b00:	mov	r2, #5
   11b04:	movw	r1, #45872	; 0xb330
   11b08:	movt	r1, #1
   11b0c:	mov	r0, #0
   11b10:	bl	112f8 <dcgettext@plt>
   11b14:	movw	r4, #43812	; 0xab24
   11b18:	movt	r4, #1
   11b1c:	mov	r3, r4
   11b20:	movw	r2, #45740	; 0xb2ac
   11b24:	movt	r2, #1
   11b28:	mov	r1, r0
   11b2c:	mov	r0, #1
   11b30:	bl	114b4 <__printf_chk@plt>
   11b34:	mov	r2, #5
   11b38:	movw	r1, #45900	; 0xb34c
   11b3c:	movt	r1, #1
   11b40:	mov	r0, #0
   11b44:	bl	112f8 <dcgettext@plt>
   11b48:	mov	r1, r0
   11b4c:	movw	r3, #46964	; 0xb774
   11b50:	movt	r3, #1
   11b54:	b	11a0c <__assert_fail@plt+0x408>
   11b58:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11b5c:	strd	r6, [sp, #8]
   11b60:	strd	r8, [sp, #16]
   11b64:	strd	sl, [sp, #24]
   11b68:	str	lr, [sp, #32]
   11b6c:	sub	sp, sp, #44	; 0x2c
   11b70:	str	r0, [sp, #20]
   11b74:	mov	r7, r1
   11b78:	ldr	r0, [r1]
   11b7c:	bl	1616c <__assert_fail@plt+0x4b68>
   11b80:	movw	r1, #45608	; 0xb228
   11b84:	movt	r1, #1
   11b88:	mov	r0, #6
   11b8c:	bl	11520 <setlocale@plt>
   11b90:	movw	r4, #45784	; 0xb2d8
   11b94:	movt	r4, #1
   11b98:	movw	r1, #45952	; 0xb380
   11b9c:	movt	r1, #1
   11ba0:	mov	r0, r4
   11ba4:	bl	1158c <bindtextdomain@plt>
   11ba8:	mov	r0, r4
   11bac:	bl	11328 <textdomain@plt>
   11bb0:	movw	r0, #10828	; 0x2a4c
   11bb4:	movt	r0, #1
   11bb8:	bl	1a9e8 <__assert_fail@plt+0x93e4>
   11bbc:	mov	r8, #0
   11bc0:	mov	fp, r8
   11bc4:	mov	r9, r8
   11bc8:	mvn	r4, #0
   11bcc:	mov	r5, #16
   11bd0:	movw	r6, #46008	; 0xb3b8
   11bd4:	movt	r6, #1
   11bd8:	movw	sl, #49616	; 0xc1d0
   11bdc:	movt	sl, #2
   11be0:	b	11c40 <__assert_fail@plt+0x63c>
   11be4:	cmp	r0, #76	; 0x4c
   11be8:	beq	11dac <__assert_fail@plt+0x7a8>
   11bec:	ble	11c14 <__assert_fail@plt+0x610>
   11bf0:	cmp	r0, #82	; 0x52
   11bf4:	beq	11cf0 <__assert_fail@plt+0x6ec>
   11bf8:	ble	11c34 <__assert_fail@plt+0x630>
   11bfc:	cmp	r0, #102	; 0x66
   11c00:	beq	11c40 <__assert_fail@plt+0x63c>
   11c04:	cmp	r0, #104	; 0x68
   11c08:	bne	11c2c <__assert_fail@plt+0x628>
   11c0c:	mov	r4, #0
   11c10:	b	11c40 <__assert_fail@plt+0x63c>
   11c14:	cmn	r0, #2
   11c18:	beq	11d50 <__assert_fail@plt+0x74c>
   11c1c:	cmp	r0, #72	; 0x48
   11c20:	beq	11db4 <__assert_fail@plt+0x7b0>
   11c24:	cmn	r0, #3
   11c28:	beq	11d58 <__assert_fail@plt+0x754>
   11c2c:	mov	r0, #1
   11c30:	bl	11700 <__assert_fail@plt+0xfc>
   11c34:	cmp	r0, #80	; 0x50
   11c38:	bne	11c2c <__assert_fail@plt+0x628>
   11c3c:	mov	r5, #16
   11c40:	mov	r3, #0
   11c44:	str	r3, [sp]
   11c48:	ldr	r3, [pc, #3544]	; 12a28 <__assert_fail@plt+0x1424>
   11c4c:	mov	r2, r6
   11c50:	mov	r1, r7
   11c54:	ldr	r0, [sp, #20]
   11c58:	bl	11418 <getopt_long@plt>
   11c5c:	cmn	r0, #1
   11c60:	beq	11dcc <__assert_fail@plt+0x7c8>
   11c64:	cmp	r0, #108	; 0x6c
   11c68:	beq	11d38 <__assert_fail@plt+0x734>
   11c6c:	ble	11be4 <__assert_fail@plt+0x5e0>
   11c70:	cmp	r0, #118	; 0x76
   11c74:	beq	11cfc <__assert_fail@plt+0x6f8>
   11c78:	ble	11cb4 <__assert_fail@plt+0x6b0>
   11c7c:	movw	r3, #257	; 0x101
   11c80:	cmp	r0, r3
   11c84:	beq	11dbc <__assert_fail@plt+0x7b8>
   11c88:	ble	11ce0 <__assert_fail@plt+0x6dc>
   11c8c:	movw	r3, #258	; 0x102
   11c90:	cmp	r0, r3
   11c94:	beq	11dc4 <__assert_fail@plt+0x7c0>
   11c98:	movw	r3, #259	; 0x103
   11c9c:	cmp	r0, r3
   11ca0:	bne	11c2c <__assert_fail@plt+0x628>
   11ca4:	movw	r3, #49608	; 0xc1c8
   11ca8:	movt	r3, #2
   11cac:	ldr	r8, [r3]
   11cb0:	b	11c40 <__assert_fail@plt+0x63c>
   11cb4:	cmp	r0, #116	; 0x74
   11cb8:	beq	11d20 <__assert_fail@plt+0x71c>
   11cbc:	bgt	11d08 <__assert_fail@plt+0x704>
   11cc0:	cmp	r0, #114	; 0x72
   11cc4:	bne	11c2c <__assert_fail@plt+0x628>
   11cc8:	movw	r3, #49608	; 0xc1c8
   11ccc:	movt	r3, #2
   11cd0:	ldr	r3, [r3]
   11cd4:	str	r3, [sl, #8]
   11cd8:	mov	fp, #1
   11cdc:	b	11c40 <__assert_fail@plt+0x63c>
   11ce0:	cmp	r0, #256	; 0x100
   11ce4:	bne	11c2c <__assert_fail@plt+0x628>
   11ce8:	mov	r4, #1
   11cec:	b	11c40 <__assert_fail@plt+0x63c>
   11cf0:	mov	r3, #1
   11cf4:	strb	r3, [sl]
   11cf8:	b	11c40 <__assert_fail@plt+0x63c>
   11cfc:	mov	r3, #1
   11d00:	strb	r3, [sl, #1]
   11d04:	b	11c40 <__assert_fail@plt+0x63c>
   11d08:	movw	r3, #49608	; 0xc1c8
   11d0c:	movt	r3, #2
   11d10:	ldr	r3, [r3]
   11d14:	str	r3, [sl, #4]
   11d18:	mov	fp, #1
   11d1c:	b	11c40 <__assert_fail@plt+0x63c>
   11d20:	movw	r3, #49608	; 0xc1c8
   11d24:	movt	r3, #2
   11d28:	ldr	r3, [r3]
   11d2c:	str	r3, [sl, #12]
   11d30:	mov	fp, #1
   11d34:	b	11c40 <__assert_fail@plt+0x63c>
   11d38:	movw	r3, #49608	; 0xc1c8
   11d3c:	movt	r3, #2
   11d40:	ldr	r3, [r3]
   11d44:	str	r3, [sl, #16]
   11d48:	mov	fp, #1
   11d4c:	b	11c40 <__assert_fail@plt+0x63c>
   11d50:	mov	r0, #0
   11d54:	bl	11700 <__assert_fail@plt+0xfc>
   11d58:	movw	r3, #49508	; 0xc164
   11d5c:	movt	r3, #2
   11d60:	movw	r0, #49604	; 0xc1c4
   11d64:	movt	r0, #2
   11d68:	mov	r4, #0
   11d6c:	str	r4, [sp, #8]
   11d70:	movw	r2, #45976	; 0xb398
   11d74:	movt	r2, #1
   11d78:	str	r2, [sp, #4]
   11d7c:	movw	r2, #45992	; 0xb3a8
   11d80:	movt	r2, #1
   11d84:	str	r2, [sp]
   11d88:	ldr	r3, [r3]
   11d8c:	movw	r2, #45780	; 0xb2d4
   11d90:	movt	r2, #1
   11d94:	movw	r1, #43812	; 0xab24
   11d98:	movt	r1, #1
   11d9c:	ldr	r0, [r0]
   11da0:	bl	19238 <__assert_fail@plt+0x7c34>
   11da4:	mov	r0, r4
   11da8:	bl	1143c <exit@plt>
   11dac:	mov	r5, #2
   11db0:	b	11c40 <__assert_fail@plt+0x63c>
   11db4:	mov	r5, #17
   11db8:	b	11c40 <__assert_fail@plt+0x63c>
   11dbc:	mov	r9, #0
   11dc0:	b	11c40 <__assert_fail@plt+0x63c>
   11dc4:	mov	r9, #1
   11dc8:	b	11c40 <__assert_fail@plt+0x63c>
   11dcc:	movw	r3, #49616	; 0xc1d0
   11dd0:	movt	r3, #2
   11dd4:	ldrb	r3, [r3]
   11dd8:	cmp	r3, #0
   11ddc:	beq	11e68 <__assert_fail@plt+0x864>
   11de0:	cmp	r5, #16
   11de4:	beq	11e04 <__assert_fail@plt+0x800>
   11de8:	cmp	r4, #0
   11dec:	beq	11e44 <__assert_fail@plt+0x840>
   11df0:	movw	r3, #49616	; 0xc1d0
   11df4:	movt	r3, #2
   11df8:	mov	r2, #1
   11dfc:	strb	r2, [r3, #20]
   11e00:	b	11e80 <__assert_fail@plt+0x87c>
   11e04:	cmp	r4, #1
   11e08:	beq	11e20 <__assert_fail@plt+0x81c>
   11e0c:	movw	r3, #49616	; 0xc1d0
   11e10:	movt	r3, #2
   11e14:	mov	r2, #0
   11e18:	strb	r2, [r3, #20]
   11e1c:	b	11e80 <__assert_fail@plt+0x87c>
   11e20:	mov	r2, #5
   11e24:	movw	r1, #46024	; 0xb3c8
   11e28:	movt	r1, #1
   11e2c:	mov	r0, #0
   11e30:	bl	112f8 <dcgettext@plt>
   11e34:	mov	r2, r0
   11e38:	mov	r1, #0
   11e3c:	mov	r0, #1
   11e40:	bl	113ac <error@plt>
   11e44:	mov	r2, #5
   11e48:	movw	r1, #46068	; 0xb3f4
   11e4c:	movt	r1, #1
   11e50:	mov	r0, #0
   11e54:	bl	112f8 <dcgettext@plt>
   11e58:	mov	r2, r0
   11e5c:	mov	r1, #0
   11e60:	mov	r0, #1
   11e64:	bl	113ac <error@plt>
   11e68:	movw	r3, #49616	; 0xc1d0
   11e6c:	movt	r3, #2
   11e70:	adds	r4, r4, #0
   11e74:	movne	r4, #1
   11e78:	strb	r4, [r3, #20]
   11e7c:	mov	r5, #16
   11e80:	movw	r3, #49592	; 0xc1b8
   11e84:	movt	r3, #2
   11e88:	ldr	r3, [r3]
   11e8c:	ldr	r2, [sp, #20]
   11e90:	sub	r1, r2, r3
   11e94:	cmp	r8, #0
   11e98:	moveq	r2, fp
   11e9c:	movne	r2, #1
   11ea0:	cmp	r2, #0
   11ea4:	beq	129e8 <__assert_fail@plt+0x13e4>
   11ea8:	cmp	r1, #0
   11eac:	ble	129f0 <__assert_fail@plt+0x13ec>
   11eb0:	cmp	r8, #0
   11eb4:	beq	11fd8 <__assert_fail@plt+0x9d4>
   11eb8:	mov	r3, #0
   11ebc:	str	r3, [sp, #36]	; 0x24
   11ec0:	add	r1, sp, #36	; 0x24
   11ec4:	mov	r0, r8
   11ec8:	bl	18c94 <__assert_fail@plt+0x7690>
   11ecc:	cmp	r0, #0
   11ed0:	blt	11f98 <__assert_fail@plt+0x994>
   11ed4:	movw	r3, #49616	; 0xc1d0
   11ed8:	movt	r3, #2
   11edc:	ldr	r2, [sp, #36]	; 0x24
   11ee0:	str	r2, [r3, #24]
   11ee4:	cmp	fp, #0
   11ee8:	bne	1207c <__assert_fail@plt+0xa78>
   11eec:	movw	r3, #49616	; 0xc1d0
   11ef0:	movt	r3, #2
   11ef4:	ldrb	r3, [r3]
   11ef8:	tst	r9, r3
   11efc:	bne	120a8 <__assert_fail@plt+0xaa4>
   11f00:	movw	r3, #49616	; 0xc1d0
   11f04:	movt	r3, #2
   11f08:	mov	r2, #0
   11f0c:	str	r2, [r3, #48]	; 0x30
   11f10:	movw	r3, #49592	; 0xc1b8
   11f14:	movt	r3, #2
   11f18:	ldr	r0, [r3]
   11f1c:	mov	r2, #0
   11f20:	orr	r1, r5, #8
   11f24:	add	r0, r7, r0, lsl #2
   11f28:	bl	197e8 <__assert_fail@plt+0x81e4>
   11f2c:	mov	r9, r0
   11f30:	mov	r8, #1
   11f34:	movw	r6, #49616	; 0xc1d0
   11f38:	movt	r6, #2
   11f3c:	movw	r3, #46896	; 0xb730
   11f40:	movt	r3, #1
   11f44:	str	r3, [sp, #20]
   11f48:	movw	r3, #46812	; 0xb6dc
   11f4c:	movt	r3, #1
   11f50:	str	r3, [sp, #24]
   11f54:	b	12414 <__assert_fail@plt+0xe10>
   11f58:	mov	r2, #5
   11f5c:	movw	r1, #46104	; 0xb418
   11f60:	movt	r1, #1
   11f64:	mov	r0, #0
   11f68:	bl	112f8 <dcgettext@plt>
   11f6c:	mov	r4, r0
   11f70:	ldr	r3, [sp, #20]
   11f74:	sub	r8, r3, #-1073741823	; 0xc0000001
   11f78:	ldr	r0, [r7, r8, lsl #2]
   11f7c:	bl	18468 <__assert_fail@plt+0x6e64>
   11f80:	mov	r3, r0
   11f84:	mov	r2, r4
   11f88:	mov	r1, #0
   11f8c:	mov	r0, r1
   11f90:	bl	113ac <error@plt>
   11f94:	b	12a20 <__assert_fail@plt+0x141c>
   11f98:	bl	11484 <__errno_location@plt>
   11f9c:	ldr	r4, [r0]
   11fa0:	mov	r2, #5
   11fa4:	movw	r1, #46132	; 0xb434
   11fa8:	movt	r1, #1
   11fac:	mov	r0, #0
   11fb0:	bl	112f8 <dcgettext@plt>
   11fb4:	mov	r5, r0
   11fb8:	mov	r1, r8
   11fbc:	mov	r0, #4
   11fc0:	bl	18178 <__assert_fail@plt+0x6b74>
   11fc4:	mov	r3, r0
   11fc8:	mov	r2, r5
   11fcc:	mov	r1, r4
   11fd0:	mov	r0, #1
   11fd4:	bl	113ac <error@plt>
   11fd8:	cmp	fp, #0
   11fdc:	beq	11ff4 <__assert_fail@plt+0x9f0>
   11fe0:	movw	r3, #49616	; 0xc1d0
   11fe4:	movt	r3, #2
   11fe8:	mov	r2, #0
   11fec:	str	r2, [r3, #24]
   11ff0:	b	11eec <__assert_fail@plt+0x8e8>
   11ff4:	movw	r2, #49592	; 0xc1b8
   11ff8:	movt	r2, #2
   11ffc:	add	r1, r3, #1
   12000:	str	r1, [r2]
   12004:	movw	r2, #49616	; 0xc1d0
   12008:	movt	r2, #2
   1200c:	ldr	r3, [r7, r3, lsl #2]
   12010:	str	r3, [r2, #24]
   12014:	bl	1125c <is_selinux_enabled@plt>
   12018:	cmp	r0, #0
   1201c:	ble	11eec <__assert_fail@plt+0x8e8>
   12020:	movw	r3, #49616	; 0xc1d0
   12024:	movt	r3, #2
   12028:	ldr	r0, [r3, #24]
   1202c:	bl	113b8 <security_check_context@plt>
   12030:	cmp	r0, #0
   12034:	bge	11eec <__assert_fail@plt+0x8e8>
   12038:	bl	11484 <__errno_location@plt>
   1203c:	ldr	r4, [r0]
   12040:	mov	r2, #5
   12044:	movw	r1, #46172	; 0xb45c
   12048:	movt	r1, #1
   1204c:	mov	r0, #0
   12050:	bl	112f8 <dcgettext@plt>
   12054:	mov	r5, r0
   12058:	movw	r3, #49616	; 0xc1d0
   1205c:	movt	r3, #2
   12060:	ldr	r0, [r3, #24]
   12064:	bl	18468 <__assert_fail@plt+0x6e64>
   12068:	mov	r3, r0
   1206c:	mov	r2, r5
   12070:	mov	r1, r4
   12074:	mov	r0, #1
   12078:	bl	113ac <error@plt>
   1207c:	mov	r2, #5
   12080:	movw	r1, #46192	; 0xb470
   12084:	movt	r1, #1
   12088:	mov	r0, #0
   1208c:	bl	112f8 <dcgettext@plt>
   12090:	mov	r2, r0
   12094:	mov	r1, #0
   12098:	mov	r0, r1
   1209c:	bl	113ac <error@plt>
   120a0:	mov	r0, #1
   120a4:	bl	11700 <__assert_fail@plt+0xfc>
   120a8:	movw	r4, #49616	; 0xc1d0
   120ac:	movt	r4, #2
   120b0:	add	r0, r4, #32
   120b4:	bl	18488 <__assert_fail@plt+0x6e84>
   120b8:	str	r0, [r4, #48]	; 0x30
   120bc:	cmp	r0, #0
   120c0:	bne	11f10 <__assert_fail@plt+0x90c>
   120c4:	bl	11484 <__errno_location@plt>
   120c8:	ldr	r4, [r0]
   120cc:	mov	r2, #5
   120d0:	movw	r1, #46240	; 0xb4a0
   120d4:	movt	r1, #1
   120d8:	mov	r0, #0
   120dc:	bl	112f8 <dcgettext@plt>
   120e0:	mov	r5, r0
   120e4:	movw	r1, #48552	; 0xbda8
   120e8:	movt	r1, #1
   120ec:	mov	r0, #4
   120f0:	bl	18178 <__assert_fail@plt+0x6b74>
   120f4:	mov	r3, r0
   120f8:	mov	r2, r5
   120fc:	mov	r1, r4
   12100:	mov	r0, #1
   12104:	bl	113ac <error@plt>
   12108:	bl	11484 <__errno_location@plt>
   1210c:	mov	r4, r0
   12110:	ldr	r5, [r0]
   12114:	cmp	r5, #0
   12118:	bne	1214c <__assert_fail@plt+0xb48>
   1211c:	mov	r0, r9
   12120:	bl	14528 <__assert_fail@plt+0x2f24>
   12124:	cmp	r0, #0
   12128:	bne	129b8 <__assert_fail@plt+0x13b4>
   1212c:	eor	r0, r8, #1
   12130:	add	sp, sp, #44	; 0x2c
   12134:	ldrd	r4, [sp]
   12138:	ldrd	r6, [sp, #8]
   1213c:	ldrd	r8, [sp, #16]
   12140:	ldrd	sl, [sp, #24]
   12144:	add	sp, sp, #32
   12148:	pop	{pc}		; (ldr pc, [sp], #4)
   1214c:	mov	r2, #5
   12150:	movw	r1, #46272	; 0xb4c0
   12154:	movt	r1, #1
   12158:	mov	r0, #0
   1215c:	bl	112f8 <dcgettext@plt>
   12160:	mov	r2, r0
   12164:	mov	r1, r5
   12168:	mov	r0, #0
   1216c:	bl	113ac <error@plt>
   12170:	mov	r8, #0
   12174:	b	1211c <__assert_fail@plt+0xb18>
   12178:	ldrb	r7, [r6]
   1217c:	cmp	r7, #0
   12180:	beq	124b8 <__assert_fail@plt+0xeb4>
   12184:	ldr	ip, [r6, #48]	; 0x30
   12188:	cmp	ip, #0
   1218c:	beq	12410 <__assert_fail@plt+0xe0c>
   12190:	ldrd	r0, [r5, #160]	; 0xa0
   12194:	ldrd	r2, [ip]
   12198:	cmp	r1, r3
   1219c:	cmpeq	r0, r2
   121a0:	bne	12410 <__assert_fail@plt+0xe0c>
   121a4:	ldrd	r2, [r5, #64]	; 0x40
   121a8:	ldrd	r0, [ip, #8]
   121ac:	cmp	r3, r1
   121b0:	cmpeq	r2, r0
   121b4:	bne	12410 <__assert_fail@plt+0xe0c>
   121b8:	movw	r1, #48552	; 0xbda8
   121bc:	movt	r1, #1
   121c0:	mov	r0, r4
   121c4:	bl	11268 <strcmp@plt>
   121c8:	cmp	r0, #0
   121cc:	bne	12248 <__assert_fail@plt+0xc44>
   121d0:	mov	r2, #5
   121d4:	movw	r1, #46288	; 0xb4d0
   121d8:	movt	r1, #1
   121dc:	bl	112f8 <dcgettext@plt>
   121e0:	mov	r7, r0
   121e4:	mov	r1, r4
   121e8:	mov	r0, #4
   121ec:	bl	18178 <__assert_fail@plt+0x6b74>
   121f0:	mov	r3, r0
   121f4:	mov	r2, r7
   121f8:	mov	r1, #0
   121fc:	mov	r0, r1
   12200:	bl	113ac <error@plt>
   12204:	mov	r2, #5
   12208:	movw	r1, #46396	; 0xb53c
   1220c:	movt	r1, #1
   12210:	mov	r0, #0
   12214:	bl	112f8 <dcgettext@plt>
   12218:	mov	r2, r0
   1221c:	mov	r1, #0
   12220:	mov	r0, r1
   12224:	bl	113ac <error@plt>
   12228:	mov	r2, #4
   1222c:	mov	r1, r5
   12230:	mov	r0, r9
   12234:	bl	14d34 <__assert_fail@plt+0x3730>
   12238:	mov	r0, r9
   1223c:	bl	146a4 <__assert_fail@plt+0x30a0>
   12240:	mov	r7, #0
   12244:	b	12410 <__assert_fail@plt+0xe0c>
   12248:	mov	r2, #5
   1224c:	movw	r1, #46336	; 0xb500
   12250:	movt	r1, #1
   12254:	mov	r0, #0
   12258:	bl	112f8 <dcgettext@plt>
   1225c:	mov	r7, r0
   12260:	mov	r2, r4
   12264:	mov	r1, #4
   12268:	mov	r0, #0
   1226c:	bl	180ec <__assert_fail@plt+0x6ae8>
   12270:	mov	r4, r0
   12274:	movw	r2, #48552	; 0xbda8
   12278:	movt	r2, #1
   1227c:	mov	r1, #4
   12280:	mov	r0, #1
   12284:	bl	180ec <__assert_fail@plt+0x6ae8>
   12288:	str	r0, [sp]
   1228c:	mov	r3, r4
   12290:	mov	r2, r7
   12294:	mov	r1, #0
   12298:	mov	r0, r1
   1229c:	bl	113ac <error@plt>
   122a0:	b	12204 <__assert_fail@plt+0xc00>
   122a4:	ldrb	r3, [r6]
   122a8:	cmp	r3, #0
   122ac:	moveq	r7, #1
   122b0:	beq	12410 <__assert_fail@plt+0xe0c>
   122b4:	ldr	ip, [r6, #48]	; 0x30
   122b8:	cmp	ip, #0
   122bc:	beq	124b8 <__assert_fail@plt+0xeb4>
   122c0:	ldrd	r0, [r5, #160]	; 0xa0
   122c4:	ldrd	r2, [ip]
   122c8:	cmp	r1, r3
   122cc:	cmpeq	r0, r2
   122d0:	bne	124b8 <__assert_fail@plt+0xeb4>
   122d4:	ldrd	r2, [r5, #64]	; 0x40
   122d8:	ldrd	r0, [ip, #8]
   122dc:	cmp	r3, r1
   122e0:	cmpeq	r2, r0
   122e4:	bne	124b8 <__assert_fail@plt+0xeb4>
   122e8:	movw	r1, #48552	; 0xbda8
   122ec:	movt	r1, #1
   122f0:	mov	r0, r4
   122f4:	bl	11268 <strcmp@plt>
   122f8:	cmp	r0, #0
   122fc:	bne	12584 <__assert_fail@plt+0xf80>
   12300:	mov	r2, #5
   12304:	movw	r1, #46288	; 0xb4d0
   12308:	movt	r1, #1
   1230c:	bl	112f8 <dcgettext@plt>
   12310:	mov	r7, r0
   12314:	mov	r1, r4
   12318:	mov	r0, #4
   1231c:	bl	18178 <__assert_fail@plt+0x6b74>
   12320:	mov	r3, r0
   12324:	mov	r2, r7
   12328:	mov	r1, #0
   1232c:	mov	r0, r1
   12330:	bl	113ac <error@plt>
   12334:	mov	r2, #5
   12338:	movw	r1, #46396	; 0xb53c
   1233c:	movt	r1, #1
   12340:	mov	r0, #0
   12344:	bl	112f8 <dcgettext@plt>
   12348:	mov	r2, r0
   1234c:	mov	r1, #0
   12350:	mov	r0, r1
   12354:	bl	113ac <error@plt>
   12358:	mov	r7, #0
   1235c:	b	12404 <__assert_fail@plt+0xe00>
   12360:	ldr	r3, [r5, #48]	; 0x30
   12364:	cmp	r3, #0
   12368:	bne	12378 <__assert_fail@plt+0xd74>
   1236c:	ldr	r3, [r5, #16]
   12370:	cmp	r3, #0
   12374:	beq	123b8 <__assert_fail@plt+0xdb4>
   12378:	ldr	r7, [r5, #32]
   1237c:	mov	r2, #5
   12380:	movw	r1, #46448	; 0xb570
   12384:	movt	r1, #1
   12388:	mov	r0, #0
   1238c:	bl	112f8 <dcgettext@plt>
   12390:	mov	sl, r0
   12394:	mov	r1, r4
   12398:	mov	r0, #4
   1239c:	bl	18178 <__assert_fail@plt+0x6b74>
   123a0:	mov	r3, r0
   123a4:	mov	r2, sl
   123a8:	mov	r1, r7
   123ac:	mov	r0, #0
   123b0:	bl	113ac <error@plt>
   123b4:	b	12400 <__assert_fail@plt+0xdfc>
   123b8:	mov	r7, #1
   123bc:	str	r7, [r5, #16]
   123c0:	mov	r2, r7
   123c4:	mov	r1, r5
   123c8:	mov	r0, r9
   123cc:	bl	14d34 <__assert_fail@plt+0x3730>
   123d0:	b	12410 <__assert_fail@plt+0xe0c>
   123d4:	ldr	r7, [r5, #32]
   123d8:	mov	r2, r4
   123dc:	mov	r1, #3
   123e0:	mov	r0, #0
   123e4:	bl	1829c <__assert_fail@plt+0x6c98>
   123e8:	mov	r3, r0
   123ec:	movw	r2, #47208	; 0xb868
   123f0:	movt	r2, #1
   123f4:	mov	r1, r7
   123f8:	mov	r0, #0
   123fc:	bl	113ac <error@plt>
   12400:	mov	r7, #0
   12404:	ldrb	r3, [r6]
   12408:	cmp	r3, #0
   1240c:	beq	129a4 <__assert_fail@plt+0x13a0>
   12410:	and	r8, r8, r7
   12414:	mov	r0, r9
   12418:	bl	146a4 <__assert_fail@plt+0x30a0>
   1241c:	subs	r5, r0, #0
   12420:	beq	12108 <__assert_fail@plt+0xb04>
   12424:	ldr	r4, [r5, #28]
   12428:	ldrh	r2, [r5, #56]	; 0x38
   1242c:	sub	r3, r2, #1
   12430:	cmp	r3, #9
   12434:	ldrls	pc, [pc, r3, lsl #2]
   12438:	b	12578 <__assert_fail@plt+0xf74>
   1243c:	andeq	r2, r1, r8, ror r1
   12440:	andeq	r2, r1, r4, lsr #9
   12444:	andeq	r2, r1, r8, ror r5
   12448:	andeq	r2, r1, r4, ror #8
   1244c:	andeq	r2, r1, r8, ror r5
   12450:	andeq	r2, r1, r4, lsr #5
   12454:	ldrdeq	r2, [r1], -r4
   12458:	andeq	r2, r1, r8, ror r5
   1245c:	andeq	r2, r1, r8, ror r5
   12460:	andeq	r2, r1, r0, ror #6
   12464:	ldr	r7, [r5, #32]
   12468:	mov	r2, #5
   1246c:	movw	r1, #46468	; 0xb584
   12470:	movt	r1, #1
   12474:	mov	r0, #0
   12478:	bl	112f8 <dcgettext@plt>
   1247c:	mov	sl, r0
   12480:	mov	r1, r4
   12484:	mov	r0, #4
   12488:	bl	18178 <__assert_fail@plt+0x6b74>
   1248c:	mov	r3, r0
   12490:	mov	r2, sl
   12494:	mov	r1, r7
   12498:	mov	r0, #0
   1249c:	bl	113ac <error@plt>
   124a0:	b	12400 <__assert_fail@plt+0xdfc>
   124a4:	mov	r1, r5
   124a8:	mov	r0, r9
   124ac:	bl	19840 <__assert_fail@plt+0x823c>
   124b0:	cmp	r0, #0
   124b4:	bne	12534 <__assert_fail@plt+0xf30>
   124b8:	ldr	r7, [r5, #24]
   124bc:	ldrb	r3, [r6, #1]
   124c0:	cmp	r3, #0
   124c4:	bne	125e0 <__assert_fail@plt+0xfdc>
   124c8:	ldr	fp, [r9, #32]
   124cc:	mov	r3, #0
   124d0:	str	r3, [sp, #36]	; 0x24
   124d4:	ldr	r4, [r6, #24]
   124d8:	cmp	r4, r3
   124dc:	movne	sl, #0
   124e0:	beq	12618 <__assert_fail@plt+0x1014>
   124e4:	ldrb	r3, [r6, #20]
   124e8:	cmp	r3, #0
   124ec:	beq	12924 <__assert_fail@plt+0x1320>
   124f0:	mov	r2, r4
   124f4:	mov	r1, r7
   124f8:	mov	r0, fp
   124fc:	bl	18874 <__assert_fail@plt+0x7270>
   12500:	cmp	r0, #0
   12504:	bne	12938 <__assert_fail@plt+0x1334>
   12508:	ldr	r3, [r6, #24]
   1250c:	cmp	r3, #0
   12510:	movne	r7, #1
   12514:	bne	12404 <__assert_fail@plt+0xe00>
   12518:	mov	r7, #0
   1251c:	mov	r0, sl
   12520:	bl	1140c <context_free@plt>
   12524:	ldr	r0, [sp, #36]	; 0x24
   12528:	bl	11580 <freecon@plt>
   1252c:	eor	r7, r7, #1
   12530:	b	12404 <__assert_fail@plt+0xe00>
   12534:	mov	r2, #5
   12538:	movw	r1, #46496	; 0xb5a0
   1253c:	movt	r1, #1
   12540:	mov	r0, #0
   12544:	bl	112f8 <dcgettext@plt>
   12548:	mov	r5, r0
   1254c:	mov	r2, r4
   12550:	mov	r1, #3
   12554:	mov	r0, #0
   12558:	bl	1829c <__assert_fail@plt+0x6c98>
   1255c:	mov	r3, r0
   12560:	mov	r2, r5
   12564:	mov	r1, #0
   12568:	mov	r0, r1
   1256c:	bl	113ac <error@plt>
   12570:	mov	r7, #0
   12574:	b	12410 <__assert_fail@plt+0xe0c>
   12578:	cmp	r2, #6
   1257c:	bne	124b8 <__assert_fail@plt+0xeb4>
   12580:	b	122b4 <__assert_fail@plt+0xcb0>
   12584:	mov	r2, #5
   12588:	movw	r1, #46336	; 0xb500
   1258c:	movt	r1, #1
   12590:	mov	r0, #0
   12594:	bl	112f8 <dcgettext@plt>
   12598:	mov	r7, r0
   1259c:	mov	r2, r4
   125a0:	mov	r1, #4
   125a4:	mov	r0, #0
   125a8:	bl	180ec <__assert_fail@plt+0x6ae8>
   125ac:	mov	r4, r0
   125b0:	movw	r2, #48552	; 0xbda8
   125b4:	movt	r2, #1
   125b8:	mov	r1, #4
   125bc:	mov	r0, #1
   125c0:	bl	180ec <__assert_fail@plt+0x6ae8>
   125c4:	str	r0, [sp]
   125c8:	mov	r3, r4
   125cc:	mov	r2, r7
   125d0:	mov	r1, #0
   125d4:	mov	r0, r1
   125d8:	bl	113ac <error@plt>
   125dc:	b	12334 <__assert_fail@plt+0xd30>
   125e0:	mov	r2, #5
   125e4:	movw	r1, #46684	; 0xb65c
   125e8:	movt	r1, #1
   125ec:	mov	r0, #0
   125f0:	bl	112f8 <dcgettext@plt>
   125f4:	mov	sl, r0
   125f8:	mov	r1, r4
   125fc:	mov	r0, #4
   12600:	bl	18178 <__assert_fail@plt+0x6b74>
   12604:	mov	r2, r0
   12608:	mov	r1, sl
   1260c:	mov	r0, #1
   12610:	bl	114b4 <__printf_chk@plt>
   12614:	b	124c8 <__assert_fail@plt+0xec4>
   12618:	ldrb	r3, [r6, #20]
   1261c:	cmp	r3, #0
   12620:	beq	12704 <__assert_fail@plt+0x1100>
   12624:	add	r2, sp, #36	; 0x24
   12628:	mov	r1, r7
   1262c:	mov	r0, fp
   12630:	bl	184dc <__assert_fail@plt+0x6ed8>
   12634:	cmp	r0, #0
   12638:	blt	12718 <__assert_fail@plt+0x1114>
   1263c:	ldr	r4, [sp, #36]	; 0x24
   12640:	cmp	r4, #0
   12644:	beq	12764 <__assert_fail@plt+0x1160>
   12648:	mov	r0, r4
   1264c:	bl	112c8 <context_new@plt>
   12650:	subs	sl, r0, #0
   12654:	beq	127a0 <__assert_fail@plt+0x119c>
   12658:	ldr	r1, [r6, #4]
   1265c:	cmp	r1, #0
   12660:	moveq	r4, #1
   12664:	beq	1267c <__assert_fail@plt+0x1078>
   12668:	mov	r0, sl
   1266c:	bl	11448 <context_user_set@plt>
   12670:	cmp	r0, #0
   12674:	moveq	r4, #1
   12678:	bne	127e0 <__assert_fail@plt+0x11dc>
   1267c:	ldr	r1, [r6, #16]
   12680:	cmp	r1, #0
   12684:	beq	12698 <__assert_fail@plt+0x1094>
   12688:	mov	r0, sl
   1268c:	bl	11598 <context_range_set@plt>
   12690:	cmp	r0, #0
   12694:	bne	12828 <__assert_fail@plt+0x1224>
   12698:	ldr	r1, [r6, #8]
   1269c:	cmp	r1, #0
   126a0:	beq	126b4 <__assert_fail@plt+0x10b0>
   126a4:	mov	r0, sl
   126a8:	bl	112ec <context_role_set@plt>
   126ac:	cmp	r0, #0
   126b0:	bne	12870 <__assert_fail@plt+0x126c>
   126b4:	ldr	r1, [r6, #12]
   126b8:	cmp	r1, #0
   126bc:	beq	126d0 <__assert_fail@plt+0x10cc>
   126c0:	mov	r0, sl
   126c4:	bl	11304 <context_type_set@plt>
   126c8:	cmp	r0, #0
   126cc:	bne	128c4 <__assert_fail@plt+0x12c0>
   126d0:	cmp	r4, #0
   126d4:	beq	12904 <__assert_fail@plt+0x1300>
   126d8:	mov	r0, sl
   126dc:	bl	115a4 <context_str@plt>
   126e0:	mov	r4, r0
   126e4:	ldr	r1, [sp, #36]	; 0x24
   126e8:	cmp	r1, #0
   126ec:	beq	124e4 <__assert_fail@plt+0xee0>
   126f0:	mov	r0, r4
   126f4:	bl	11268 <strcmp@plt>
   126f8:	cmp	r0, #0
   126fc:	beq	12508 <__assert_fail@plt+0xf04>
   12700:	b	124e4 <__assert_fail@plt+0xee0>
   12704:	add	r2, sp, #36	; 0x24
   12708:	mov	r1, r7
   1270c:	mov	r0, fp
   12710:	bl	186a8 <__assert_fail@plt+0x70a4>
   12714:	b	12634 <__assert_fail@plt+0x1030>
   12718:	bl	11484 <__errno_location@plt>
   1271c:	ldr	r4, [r0]
   12720:	cmp	r4, #61	; 0x3d
   12724:	beq	1263c <__assert_fail@plt+0x1038>
   12728:	mov	r2, #5
   1272c:	movw	r1, #46132	; 0xb434
   12730:	movt	r1, #1
   12734:	mov	r0, #0
   12738:	bl	112f8 <dcgettext@plt>
   1273c:	mov	sl, r0
   12740:	mov	r1, r7
   12744:	mov	r0, #4
   12748:	bl	18178 <__assert_fail@plt+0x6b74>
   1274c:	mov	r3, r0
   12750:	mov	r2, sl
   12754:	mov	r1, r4
   12758:	mov	r0, #0
   1275c:	bl	113ac <error@plt>
   12760:	b	1291c <__assert_fail@plt+0x1318>
   12764:	mov	r2, #5
   12768:	movw	r1, #46720	; 0xb680
   1276c:	movt	r1, #1
   12770:	mov	r0, #0
   12774:	bl	112f8 <dcgettext@plt>
   12778:	mov	r4, r0
   1277c:	mov	r1, r7
   12780:	mov	r0, #4
   12784:	bl	18178 <__assert_fail@plt+0x6b74>
   12788:	mov	r3, r0
   1278c:	mov	r2, r4
   12790:	mov	r1, #0
   12794:	mov	r0, r1
   12798:	bl	113ac <error@plt>
   1279c:	b	1291c <__assert_fail@plt+0x1318>
   127a0:	bl	11484 <__errno_location@plt>
   127a4:	ldr	r7, [r0]
   127a8:	mov	r2, #5
   127ac:	movw	r1, #46772	; 0xb6b4
   127b0:	movt	r1, #1
   127b4:	mov	r0, #0
   127b8:	bl	112f8 <dcgettext@plt>
   127bc:	mov	sl, r0
   127c0:	mov	r0, r4
   127c4:	bl	18468 <__assert_fail@plt+0x6e64>
   127c8:	mov	r3, r0
   127cc:	mov	r2, sl
   127d0:	mov	r1, r7
   127d4:	mov	r0, #0
   127d8:	bl	113ac <error@plt>
   127dc:	b	1291c <__assert_fail@plt+0x1318>
   127e0:	bl	11484 <__errno_location@plt>
   127e4:	ldr	r4, [r0]
   127e8:	mov	r2, #5
   127ec:	ldr	r1, [sp, #24]
   127f0:	mov	r0, #0
   127f4:	bl	112f8 <dcgettext@plt>
   127f8:	str	r0, [sp, #28]
   127fc:	ldr	r0, [r6, #4]
   12800:	bl	18468 <__assert_fail@plt+0x6e64>
   12804:	str	r0, [sp]
   12808:	movw	r3, #46864	; 0xb710
   1280c:	movt	r3, #1
   12810:	ldr	r2, [sp, #28]
   12814:	mov	r1, r4
   12818:	mov	r0, #0
   1281c:	bl	113ac <error@plt>
   12820:	mov	r4, #0
   12824:	b	1267c <__assert_fail@plt+0x1078>
   12828:	bl	11484 <__errno_location@plt>
   1282c:	ldr	r4, [r0]
   12830:	mov	r2, #5
   12834:	ldr	r1, [sp, #24]
   12838:	mov	r0, #0
   1283c:	bl	112f8 <dcgettext@plt>
   12840:	str	r0, [sp, #28]
   12844:	ldr	r0, [r6, #16]
   12848:	bl	18468 <__assert_fail@plt+0x6e64>
   1284c:	str	r0, [sp]
   12850:	movw	r3, #46872	; 0xb718
   12854:	movt	r3, #1
   12858:	ldr	r2, [sp, #28]
   1285c:	mov	r1, r4
   12860:	mov	r0, #0
   12864:	bl	113ac <error@plt>
   12868:	mov	r4, #0
   1286c:	b	12698 <__assert_fail@plt+0x1094>
   12870:	bl	11484 <__errno_location@plt>
   12874:	ldr	r4, [r0]
   12878:	mov	r2, #5
   1287c:	ldr	r1, [sp, #24]
   12880:	mov	r0, #0
   12884:	bl	112f8 <dcgettext@plt>
   12888:	str	r0, [sp, #28]
   1288c:	ldr	r0, [r6, #8]
   12890:	bl	18468 <__assert_fail@plt+0x6e64>
   12894:	str	r0, [sp]
   12898:	movw	r3, #46880	; 0xb720
   1289c:	movt	r3, #1
   128a0:	ldr	r2, [sp, #28]
   128a4:	mov	r1, r4
   128a8:	mov	r0, #0
   128ac:	bl	113ac <error@plt>
   128b0:	ldr	r1, [r6, #12]
   128b4:	cmp	r1, #0
   128b8:	movne	r4, #0
   128bc:	bne	126c0 <__assert_fail@plt+0x10bc>
   128c0:	b	12904 <__assert_fail@plt+0x1300>
   128c4:	bl	11484 <__errno_location@plt>
   128c8:	ldr	r4, [r0]
   128cc:	mov	r2, #5
   128d0:	ldr	r1, [sp, #24]
   128d4:	mov	r0, #0
   128d8:	bl	112f8 <dcgettext@plt>
   128dc:	mov	r7, r0
   128e0:	ldr	r0, [r6, #12]
   128e4:	bl	18468 <__assert_fail@plt+0x6e64>
   128e8:	str	r0, [sp]
   128ec:	movw	r3, #46888	; 0xb728
   128f0:	movt	r3, #1
   128f4:	mov	r2, r7
   128f8:	mov	r1, r4
   128fc:	mov	r0, #0
   12900:	bl	113ac <error@plt>
   12904:	bl	11484 <__errno_location@plt>
   12908:	mov	r4, r0
   1290c:	ldr	r7, [r0]
   12910:	mov	r0, sl
   12914:	bl	1140c <context_free@plt>
   12918:	str	r7, [r4]
   1291c:	mov	r7, #0
   12920:	b	12404 <__assert_fail@plt+0xe00>
   12924:	mov	r2, r4
   12928:	mov	r1, r7
   1292c:	mov	r0, fp
   12930:	bl	18a40 <__assert_fail@plt+0x743c>
   12934:	b	12500 <__assert_fail@plt+0xefc>
   12938:	bl	11484 <__errno_location@plt>
   1293c:	ldr	fp, [r0]
   12940:	mov	r2, #5
   12944:	ldr	r1, [sp, #20]
   12948:	mov	r0, #0
   1294c:	bl	112f8 <dcgettext@plt>
   12950:	str	r0, [sp, #28]
   12954:	mov	r2, r7
   12958:	mov	r1, #4
   1295c:	mov	r0, #0
   12960:	bl	180ec <__assert_fail@plt+0x6ae8>
   12964:	mov	r7, r0
   12968:	mov	r1, r4
   1296c:	mov	r0, #1
   12970:	bl	1844c <__assert_fail@plt+0x6e48>
   12974:	str	r0, [sp]
   12978:	mov	r3, r7
   1297c:	ldr	r2, [sp, #28]
   12980:	mov	r1, fp
   12984:	mov	r0, #0
   12988:	bl	113ac <error@plt>
   1298c:	ldr	r3, [r6, #24]
   12990:	cmp	r3, #0
   12994:	moveq	r7, #1
   12998:	beq	1251c <__assert_fail@plt+0xf18>
   1299c:	mov	r7, #0
   129a0:	b	12404 <__assert_fail@plt+0xe00>
   129a4:	mov	r2, #4
   129a8:	mov	r1, r5
   129ac:	mov	r0, r9
   129b0:	bl	14d34 <__assert_fail@plt+0x3730>
   129b4:	b	12410 <__assert_fail@plt+0xe0c>
   129b8:	ldr	r4, [r4]
   129bc:	mov	r2, #5
   129c0:	movw	r1, #46936	; 0xb758
   129c4:	movt	r1, #1
   129c8:	mov	r0, #0
   129cc:	bl	112f8 <dcgettext@plt>
   129d0:	mov	r2, r0
   129d4:	mov	r1, r4
   129d8:	mov	r0, #0
   129dc:	bl	113ac <error@plt>
   129e0:	mov	r8, #0
   129e4:	b	1212c <__assert_fail@plt+0xb28>
   129e8:	cmp	r1, #1
   129ec:	bgt	11ff4 <__assert_fail@plt+0x9f0>
   129f0:	ldr	r2, [sp, #20]
   129f4:	cmp	r3, r2
   129f8:	blt	11f58 <__assert_fail@plt+0x954>
   129fc:	mov	r2, #5
   12a00:	movw	r1, #46088	; 0xb408
   12a04:	movt	r1, #1
   12a08:	mov	r0, #0
   12a0c:	bl	112f8 <dcgettext@plt>
   12a10:	mov	r2, r0
   12a14:	mov	r1, #0
   12a18:	mov	r0, r1
   12a1c:	bl	113ac <error@plt>
   12a20:	mov	r0, #1
   12a24:	bl	11700 <__assert_fail@plt+0xfc>
   12a28:	andeq	sl, r1, r4, asr #20
   12a2c:	movw	r3, #49668	; 0xc204
   12a30:	movt	r3, #2
   12a34:	str	r0, [r3]
   12a38:	bx	lr
   12a3c:	movw	r3, #49668	; 0xc204
   12a40:	movt	r3, #2
   12a44:	strb	r0, [r3, #4]
   12a48:	bx	lr
   12a4c:	strd	r4, [sp, #-16]!
   12a50:	str	r6, [sp, #8]
   12a54:	str	lr, [sp, #12]
   12a58:	sub	sp, sp, #8
   12a5c:	movw	r3, #49604	; 0xc1c4
   12a60:	movt	r3, #2
   12a64:	ldr	r0, [r3]
   12a68:	bl	19ac8 <__assert_fail@plt+0x84c4>
   12a6c:	cmp	r0, #0
   12a70:	beq	12a98 <__assert_fail@plt+0x1494>
   12a74:	movw	r3, #49668	; 0xc204
   12a78:	movt	r3, #2
   12a7c:	ldrb	r3, [r3, #4]
   12a80:	cmp	r3, #0
   12a84:	beq	12ac4 <__assert_fail@plt+0x14c0>
   12a88:	bl	11484 <__errno_location@plt>
   12a8c:	ldr	r3, [r0]
   12a90:	cmp	r3, #32
   12a94:	bne	12ac4 <__assert_fail@plt+0x14c0>
   12a98:	movw	r3, #49600	; 0xc1c0
   12a9c:	movt	r3, #2
   12aa0:	ldr	r0, [r3]
   12aa4:	bl	19ac8 <__assert_fail@plt+0x84c4>
   12aa8:	cmp	r0, #0
   12aac:	bne	12b4c <__assert_fail@plt+0x1548>
   12ab0:	add	sp, sp, #8
   12ab4:	ldrd	r4, [sp]
   12ab8:	ldr	r6, [sp, #8]
   12abc:	add	sp, sp, #12
   12ac0:	pop	{pc}		; (ldr pc, [sp], #4)
   12ac4:	mov	r2, #5
   12ac8:	movw	r1, #47192	; 0xb858
   12acc:	movt	r1, #1
   12ad0:	mov	r0, #0
   12ad4:	bl	112f8 <dcgettext@plt>
   12ad8:	mov	r4, r0
   12adc:	movw	r3, #49668	; 0xc204
   12ae0:	movt	r3, #2
   12ae4:	ldr	r5, [r3]
   12ae8:	cmp	r5, #0
   12aec:	beq	12b2c <__assert_fail@plt+0x1528>
   12af0:	bl	11484 <__errno_location@plt>
   12af4:	ldr	r6, [r0]
   12af8:	mov	r0, r5
   12afc:	bl	18264 <__assert_fail@plt+0x6c60>
   12b00:	str	r4, [sp]
   12b04:	mov	r3, r0
   12b08:	movw	r2, #47204	; 0xb864
   12b0c:	movt	r2, #1
   12b10:	mov	r1, r6
   12b14:	mov	r0, #0
   12b18:	bl	113ac <error@plt>
   12b1c:	movw	r3, #49512	; 0xc168
   12b20:	movt	r3, #2
   12b24:	ldr	r0, [r3]
   12b28:	bl	112a4 <_exit@plt>
   12b2c:	bl	11484 <__errno_location@plt>
   12b30:	mov	r3, r4
   12b34:	movw	r2, #47208	; 0xb868
   12b38:	movt	r2, #1
   12b3c:	ldr	r1, [r0]
   12b40:	mov	r0, #0
   12b44:	bl	113ac <error@plt>
   12b48:	b	12b1c <__assert_fail@plt+0x1518>
   12b4c:	movw	r3, #49512	; 0xc168
   12b50:	movt	r3, #2
   12b54:	ldr	r0, [r3]
   12b58:	bl	112a4 <_exit@plt>
   12b5c:	strd	r4, [sp, #-8]!
   12b60:	ldrd	r4, [r0, #8]
   12b64:	ldrd	r2, [r1, #8]
   12b68:	cmp	r5, r3
   12b6c:	cmpeq	r4, r2
   12b70:	movne	r0, #0
   12b74:	beq	12b84 <__assert_fail@plt+0x1580>
   12b78:	ldrd	r4, [sp]
   12b7c:	add	sp, sp, #8
   12b80:	bx	lr
   12b84:	ldrd	r4, [r0]
   12b88:	ldrd	r2, [r1]
   12b8c:	cmp	r5, r3
   12b90:	cmpeq	r4, r2
   12b94:	moveq	r0, #1
   12b98:	movne	r0, #0
   12b9c:	b	12b78 <__assert_fail@plt+0x1574>
   12ba0:	str	r4, [sp, #-8]!
   12ba4:	str	lr, [sp, #4]
   12ba8:	mov	r2, r1
   12bac:	mov	r3, #0
   12bb0:	ldrd	r0, [r0, #8]
   12bb4:	bl	1a810 <__assert_fail@plt+0x920c>
   12bb8:	mov	r0, r2
   12bbc:	ldr	r4, [sp]
   12bc0:	add	sp, sp, #4
   12bc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12bc8:	str	r4, [sp, #-8]!
   12bcc:	str	lr, [sp, #4]
   12bd0:	mov	r2, r1
   12bd4:	mov	r3, #0
   12bd8:	ldrd	r0, [r0]
   12bdc:	bl	1a810 <__assert_fail@plt+0x920c>
   12be0:	mov	r0, r2
   12be4:	ldr	r4, [sp]
   12be8:	add	sp, sp, #4
   12bec:	pop	{pc}		; (ldr pc, [sp], #4)
   12bf0:	strd	r4, [sp, #-8]!
   12bf4:	ldrd	r4, [r0]
   12bf8:	ldrd	r2, [r1]
   12bfc:	cmp	r5, r3
   12c00:	cmpeq	r4, r2
   12c04:	moveq	r0, #1
   12c08:	movne	r0, #0
   12c0c:	ldrd	r4, [sp]
   12c10:	add	sp, sp, #8
   12c14:	bx	lr
   12c18:	strd	r4, [sp, #-8]!
   12c1c:	ldr	r3, [r0]
   12c20:	ldrd	r4, [r3, #160]	; 0xa0
   12c24:	ldr	r3, [r1]
   12c28:	ldrd	r2, [r3, #160]	; 0xa0
   12c2c:	cmp	r5, r3
   12c30:	cmpeq	r4, r2
   12c34:	movhi	r0, #1
   12c38:	movls	r0, #0
   12c3c:	movcc	r3, #1
   12c40:	movcs	r3, #0
   12c44:	sub	r0, r0, r3
   12c48:	ldrd	r4, [sp]
   12c4c:	add	sp, sp, #8
   12c50:	bx	lr
   12c54:	strd	r4, [sp, #-16]!
   12c58:	str	r6, [sp, #8]
   12c5c:	str	lr, [sp, #12]
   12c60:	mov	r4, r0
   12c64:	ldr	r3, [r0, #36]	; 0x24
   12c68:	add	r1, r1, #256	; 0x100
   12c6c:	adds	r1, r1, r3
   12c70:	bcs	12ca0 <__assert_fail@plt+0x169c>
   12c74:	str	r1, [r0, #36]	; 0x24
   12c78:	ldr	r0, [r0, #24]
   12c7c:	bl	19928 <__assert_fail@plt+0x8324>
   12c80:	cmp	r0, #0
   12c84:	strne	r0, [r4, #24]
   12c88:	movne	r0, #1
   12c8c:	beq	12cc4 <__assert_fail@plt+0x16c0>
   12c90:	ldrd	r4, [sp]
   12c94:	ldr	r6, [sp, #8]
   12c98:	add	sp, sp, #12
   12c9c:	pop	{pc}		; (ldr pc, [sp], #4)
   12ca0:	ldr	r0, [r0, #24]
   12ca4:	bl	1a034 <__assert_fail@plt+0x8a30>
   12ca8:	mov	r5, #0
   12cac:	str	r5, [r4, #24]
   12cb0:	bl	11484 <__errno_location@plt>
   12cb4:	mov	r3, #36	; 0x24
   12cb8:	str	r3, [r0]
   12cbc:	mov	r0, r5
   12cc0:	b	12c90 <__assert_fail@plt+0x168c>
   12cc4:	ldr	r0, [r4, #24]
   12cc8:	bl	1a034 <__assert_fail@plt+0x8a30>
   12ccc:	mov	r0, #0
   12cd0:	str	r0, [r4, #24]
   12cd4:	b	12c90 <__assert_fail@plt+0x168c>
   12cd8:	strd	r4, [sp, #-16]!
   12cdc:	str	r6, [sp, #8]
   12ce0:	str	lr, [sp, #12]
   12ce4:	sub	sp, sp, #8
   12ce8:	mov	r4, r1
   12cec:	add	r5, r1, #64	; 0x40
   12cf0:	ldr	r3, [r1, #48]	; 0x30
   12cf4:	cmp	r3, #0
   12cf8:	bne	12d08 <__assert_fail@plt+0x1704>
   12cfc:	ldr	r3, [r0, #48]	; 0x30
   12d00:	tst	r3, #1
   12d04:	bne	12d18 <__assert_fail@plt+0x1714>
   12d08:	ldr	r3, [r0, #48]	; 0x30
   12d0c:	ubfx	r3, r3, #1, #1
   12d10:	orrs	r3, r2, r3
   12d14:	beq	12d8c <__assert_fail@plt+0x1788>
   12d18:	mov	r2, r5
   12d1c:	ldr	r1, [r4, #24]
   12d20:	mov	r0, #3
   12d24:	bl	115b0 <__xstat64@plt>
   12d28:	cmp	r0, #0
   12d2c:	beq	12db0 <__assert_fail@plt+0x17ac>
   12d30:	bl	11484 <__errno_location@plt>
   12d34:	mov	r6, r0
   12d38:	ldr	r3, [r0]
   12d3c:	cmp	r3, #2
   12d40:	bne	12d6c <__assert_fail@plt+0x1768>
   12d44:	mov	r2, r5
   12d48:	ldr	r1, [r4, #24]
   12d4c:	mov	r0, #3
   12d50:	bl	115e0 <__lxstat64@plt>
   12d54:	cmp	r0, #0
   12d58:	bne	12d6c <__assert_fail@plt+0x1768>
   12d5c:	mov	r3, #0
   12d60:	str	r3, [r6]
   12d64:	mov	r0, #13
   12d68:	b	12dd4 <__assert_fail@plt+0x17d0>
   12d6c:	ldr	r3, [r6]
   12d70:	str	r3, [r4, #32]
   12d74:	mov	r2, #104	; 0x68
   12d78:	mov	r1, #0
   12d7c:	mov	r0, r5
   12d80:	bl	114a8 <memset@plt>
   12d84:	mov	r0, #10
   12d88:	b	12dd4 <__assert_fail@plt+0x17d0>
   12d8c:	mov	r3, #256	; 0x100
   12d90:	str	r3, [sp]
   12d94:	mov	r3, r5
   12d98:	ldr	r2, [r4, #24]
   12d9c:	ldr	r1, [r0, #32]
   12da0:	mov	r0, #3
   12da4:	bl	11340 <__fxstatat64@plt>
   12da8:	cmp	r0, #0
   12dac:	bne	12de8 <__assert_fail@plt+0x17e4>
   12db0:	ldr	r3, [r4, #80]	; 0x50
   12db4:	and	r3, r3, #61440	; 0xf000
   12db8:	cmp	r3, #16384	; 0x4000
   12dbc:	beq	12df8 <__assert_fail@plt+0x17f4>
   12dc0:	cmp	r3, #40960	; 0xa000
   12dc4:	beq	12e40 <__assert_fail@plt+0x183c>
   12dc8:	cmp	r3, #32768	; 0x8000
   12dcc:	movne	r0, #3
   12dd0:	moveq	r0, #8
   12dd4:	add	sp, sp, #8
   12dd8:	ldrd	r4, [sp]
   12ddc:	ldr	r6, [sp, #8]
   12de0:	add	sp, sp, #12
   12de4:	pop	{pc}		; (ldr pc, [sp], #4)
   12de8:	bl	11484 <__errno_location@plt>
   12dec:	ldr	r3, [r0]
   12df0:	str	r3, [r4, #32]
   12df4:	b	12d74 <__assert_fail@plt+0x1770>
   12df8:	ldrb	r3, [r4, #168]	; 0xa8
   12dfc:	cmp	r3, #46	; 0x2e
   12e00:	movne	r0, #1
   12e04:	bne	12dd4 <__assert_fail@plt+0x17d0>
   12e08:	ldrb	r3, [r4, #169]	; 0xa9
   12e0c:	cmp	r3, #0
   12e10:	beq	12e2c <__assert_fail@plt+0x1828>
   12e14:	ldr	r3, [r4, #168]	; 0xa8
   12e18:	bic	r3, r3, #-16777216	; 0xff000000
   12e1c:	bic	r3, r3, #255	; 0xff
   12e20:	cmp	r3, #11776	; 0x2e00
   12e24:	movne	r0, #1
   12e28:	bne	12dd4 <__assert_fail@plt+0x17d0>
   12e2c:	ldr	r3, [r4, #48]	; 0x30
   12e30:	cmp	r3, #0
   12e34:	moveq	r0, #1
   12e38:	movne	r0, #5
   12e3c:	b	12dd4 <__assert_fail@plt+0x17d0>
   12e40:	mov	r0, #12
   12e44:	b	12dd4 <__assert_fail@plt+0x17d0>
   12e48:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12e4c:	strd	r6, [sp, #8]
   12e50:	str	r8, [sp, #16]
   12e54:	str	lr, [sp, #20]
   12e58:	mov	r6, r0
   12e5c:	mov	r4, r1
   12e60:	mov	r5, r2
   12e64:	ldr	r7, [r0, #44]	; 0x2c
   12e68:	ldr	r3, [r0, #40]	; 0x28
   12e6c:	cmp	r3, r2
   12e70:	bcs	12e9c <__assert_fail@plt+0x1898>
   12e74:	add	r1, r2, #40	; 0x28
   12e78:	str	r1, [r0, #40]	; 0x28
   12e7c:	cmn	r1, #-1073741823	; 0xc0000001
   12e80:	bhi	12f1c <__assert_fail@plt+0x1918>
   12e84:	lsl	r1, r1, #2
   12e88:	ldr	r0, [r0, #8]
   12e8c:	bl	19928 <__assert_fail@plt+0x8324>
   12e90:	cmp	r0, #0
   12e94:	strne	r0, [r6, #8]
   12e98:	beq	12f1c <__assert_fail@plt+0x1918>
   12e9c:	ldr	r3, [r6, #8]
   12ea0:	cmp	r4, #0
   12ea4:	beq	12eb8 <__assert_fail@plt+0x18b4>
   12ea8:	str	r4, [r3], #4
   12eac:	ldr	r4, [r4, #8]
   12eb0:	cmp	r4, #0
   12eb4:	bne	12ea8 <__assert_fail@plt+0x18a4>
   12eb8:	mov	r3, r7
   12ebc:	mov	r2, #4
   12ec0:	mov	r1, r5
   12ec4:	ldr	r0, [r6, #8]
   12ec8:	bl	11574 <qsort@plt>
   12ecc:	ldr	lr, [r6, #8]
   12ed0:	ldr	r0, [lr]
   12ed4:	subs	r3, r5, #1
   12ed8:	beq	12efc <__assert_fail@plt+0x18f8>
   12edc:	mov	r2, lr
   12ee0:	ldr	r1, [r2]
   12ee4:	ldr	ip, [r2, #4]!
   12ee8:	str	ip, [r1, #8]
   12eec:	subs	r3, r3, #1
   12ef0:	bne	12ee0 <__assert_fail@plt+0x18dc>
   12ef4:	sub	r5, r5, #-1073741823	; 0xc0000001
   12ef8:	add	lr, lr, r5, lsl #2
   12efc:	ldr	r3, [lr]
   12f00:	mov	r2, #0
   12f04:	str	r2, [r3, #8]
   12f08:	ldrd	r4, [sp]
   12f0c:	ldrd	r6, [sp, #8]
   12f10:	ldr	r8, [sp, #16]
   12f14:	add	sp, sp, #20
   12f18:	pop	{pc}		; (ldr pc, [sp], #4)
   12f1c:	ldr	r0, [r6, #8]
   12f20:	bl	1a034 <__assert_fail@plt+0x8a30>
   12f24:	mov	r3, #0
   12f28:	str	r3, [r6, #8]
   12f2c:	str	r3, [r6, #40]	; 0x28
   12f30:	mov	r0, r4
   12f34:	b	12f08 <__assert_fail@plt+0x1904>
   12f38:	strd	r4, [sp, #-24]!	; 0xffffffe8
   12f3c:	strd	r6, [sp, #8]
   12f40:	str	r8, [sp, #16]
   12f44:	str	lr, [sp, #20]
   12f48:	mov	r6, r0
   12f4c:	mov	r7, r1
   12f50:	mov	r5, r2
   12f54:	add	r0, r2, #176	; 0xb0
   12f58:	bic	r0, r0, #7
   12f5c:	bl	198ec <__assert_fail@plt+0x82e8>
   12f60:	subs	r4, r0, #0
   12f64:	beq	12fb0 <__assert_fail@plt+0x19ac>
   12f68:	mov	r2, r5
   12f6c:	mov	r1, r7
   12f70:	add	r0, r4, #168	; 0xa8
   12f74:	bl	112b0 <memcpy@plt>
   12f78:	add	r2, r4, r5
   12f7c:	mov	r3, #0
   12f80:	strb	r3, [r2, #168]	; 0xa8
   12f84:	str	r5, [r4, #52]	; 0x34
   12f88:	str	r6, [r4, #44]	; 0x2c
   12f8c:	ldr	r2, [r6, #24]
   12f90:	str	r2, [r4, #28]
   12f94:	str	r3, [r4, #32]
   12f98:	str	r3, [r4, #12]
   12f9c:	strh	r3, [r4, #58]	; 0x3a
   12fa0:	mov	r2, #3
   12fa4:	strh	r2, [r4, #60]	; 0x3c
   12fa8:	str	r3, [r4, #16]
   12fac:	str	r3, [r4, #20]
   12fb0:	mov	r0, r4
   12fb4:	ldrd	r4, [sp]
   12fb8:	ldrd	r6, [sp, #8]
   12fbc:	ldr	r8, [sp, #16]
   12fc0:	add	sp, sp, #20
   12fc4:	pop	{pc}		; (ldr pc, [sp], #4)
   12fc8:	str	r4, [sp, #-8]!
   12fcc:	str	lr, [sp, #4]
   12fd0:	sub	sp, sp, #8
   12fd4:	mov	r4, r0
   12fd8:	ldr	r3, [r0, #48]	; 0x30
   12fdc:	movw	r2, #258	; 0x102
   12fe0:	tst	r2, r3
   12fe4:	beq	1302c <__assert_fail@plt+0x1a28>
   12fe8:	movw	r3, #41012	; 0xa034
   12fec:	movt	r3, #1
   12ff0:	str	r3, [sp]
   12ff4:	movw	r3, #11100	; 0x2b5c
   12ff8:	movt	r3, #1
   12ffc:	movw	r2, #11168	; 0x2ba0
   13000:	movt	r2, #1
   13004:	mov	r1, #0
   13008:	mov	r0, #31
   1300c:	bl	158c4 <__assert_fail@plt+0x42c0>
   13010:	str	r0, [r4, #56]	; 0x38
   13014:	adds	r0, r0, #0
   13018:	movne	r0, #1
   1301c:	add	sp, sp, #8
   13020:	ldr	r4, [sp]
   13024:	add	sp, sp, #4
   13028:	pop	{pc}		; (ldr pc, [sp], #4)
   1302c:	mov	r0, #32
   13030:	bl	198ec <__assert_fail@plt+0x82e8>
   13034:	str	r0, [r4, #56]	; 0x38
   13038:	cmp	r0, #0
   1303c:	moveq	r0, #0
   13040:	beq	1301c <__assert_fail@plt+0x1a18>
   13044:	bl	19b54 <__assert_fail@plt+0x8550>
   13048:	mov	r0, #1
   1304c:	b	1301c <__assert_fail@plt+0x1a18>
   13050:	str	r4, [sp, #-8]!
   13054:	str	lr, [sp, #4]
   13058:	mov	ip, r1
   1305c:	ldr	r3, [r0, #48]	; 0x30
   13060:	lsl	r2, r3, #11
   13064:	and	r2, r2, #32768	; 0x8000
   13068:	orr	r2, r2, #540672	; 0x84000
   1306c:	orr	r2, r2, #2304	; 0x900
   13070:	tst	r3, #512	; 0x200
   13074:	beq	1308c <__assert_fail@plt+0x1a88>
   13078:	ldr	r0, [r0, #32]
   1307c:	bl	160bc <__assert_fail@plt+0x4ab8>
   13080:	ldr	r4, [sp]
   13084:	add	sp, sp, #4
   13088:	pop	{pc}		; (ldr pc, [sp], #4)
   1308c:	mov	r1, r2
   13090:	mov	r0, ip
   13094:	bl	19f88 <__assert_fail@plt+0x8984>
   13098:	b	13080 <__assert_fail@plt+0x1a7c>
   1309c:	strd	r4, [sp, #-16]!
   130a0:	str	r6, [sp, #8]
   130a4:	str	lr, [sp, #12]
   130a8:	subs	r4, r0, #0
   130ac:	bne	130d8 <__assert_fail@plt+0x1ad4>
   130b0:	ldrd	r4, [sp]
   130b4:	ldr	r6, [sp, #8]
   130b8:	add	sp, sp, #12
   130bc:	pop	{pc}		; (ldr pc, [sp], #4)
   130c0:	bl	115ec <closedir@plt>
   130c4:	mov	r0, r4
   130c8:	bl	1a034 <__assert_fail@plt+0x8a30>
   130cc:	mov	r4, r5
   130d0:	cmp	r5, #0
   130d4:	beq	130b0 <__assert_fail@plt+0x1aac>
   130d8:	ldr	r5, [r4, #8]
   130dc:	ldr	r0, [r4, #12]
   130e0:	cmp	r0, #0
   130e4:	bne	130c0 <__assert_fail@plt+0x1abc>
   130e8:	b	130c4 <__assert_fail@plt+0x1ac0>
   130ec:	str	r4, [sp, #-8]!
   130f0:	str	lr, [sp, #4]
   130f4:	ldr	r3, [r0, #48]	; 0x30
   130f8:	movw	r2, #258	; 0x102
   130fc:	tst	r2, r3
   13100:	beq	13120 <__assert_fail@plt+0x1b1c>
   13104:	ldr	r0, [r0, #56]	; 0x38
   13108:	cmp	r0, #0
   1310c:	beq	13114 <__assert_fail@plt+0x1b10>
   13110:	bl	15a90 <__assert_fail@plt+0x448c>
   13114:	ldr	r4, [sp]
   13118:	add	sp, sp, #4
   1311c:	pop	{pc}		; (ldr pc, [sp], #4)
   13120:	ldr	r0, [r0, #56]	; 0x38
   13124:	bl	1a034 <__assert_fail@plt+0x8a30>
   13128:	b	13114 <__assert_fail@plt+0x1b10>
   1312c:	str	r4, [sp, #-8]!
   13130:	str	lr, [sp, #4]
   13134:	mov	r4, r0
   13138:	mov	r0, r4
   1313c:	bl	16018 <__assert_fail@plt+0x4a14>
   13140:	cmp	r0, #0
   13144:	bne	13160 <__assert_fail@plt+0x1b5c>
   13148:	mov	r0, r4
   1314c:	bl	1606c <__assert_fail@plt+0x4a68>
   13150:	cmp	r0, #0
   13154:	blt	13138 <__assert_fail@plt+0x1b34>
   13158:	bl	115d4 <close@plt>
   1315c:	b	13138 <__assert_fail@plt+0x1b34>
   13160:	ldr	r4, [sp]
   13164:	add	sp, sp, #4
   13168:	pop	{pc}		; (ldr pc, [sp], #4)
   1316c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13170:	strd	r6, [sp, #8]
   13174:	str	lr, [sp, #16]
   13178:	sub	sp, sp, #116	; 0x74
   1317c:	ldr	r7, [r0, #44]	; 0x2c
   13180:	ldr	r3, [r7, #48]	; 0x30
   13184:	ands	r3, r3, #512	; 0x200
   13188:	beq	13278 <__assert_fail@plt+0x1c74>
   1318c:	mov	r6, r1
   13190:	mov	r5, r0
   13194:	ldr	r4, [r7, #52]	; 0x34
   13198:	cmp	r4, #0
   1319c:	beq	131c4 <__assert_fail@plt+0x1bc0>
   131a0:	ldrd	r2, [r5, #64]	; 0x40
   131a4:	strd	r2, [sp, #8]
   131a8:	add	r1, sp, #8
   131ac:	mov	r0, r4
   131b0:	bl	155d0 <__assert_fail@plt+0x3fcc>
   131b4:	cmp	r0, #0
   131b8:	beq	131fc <__assert_fail@plt+0x1bf8>
   131bc:	ldr	r3, [r0, #8]
   131c0:	b	13278 <__assert_fail@plt+0x1c74>
   131c4:	movw	r3, #41012	; 0xa034
   131c8:	movt	r3, #1
   131cc:	str	r3, [sp]
   131d0:	movw	r3, #11248	; 0x2bf0
   131d4:	movt	r3, #1
   131d8:	movw	r2, #11208	; 0x2bc8
   131dc:	movt	r2, #1
   131e0:	mov	r1, #0
   131e4:	mov	r0, #13
   131e8:	bl	158c4 <__assert_fail@plt+0x42c0>
   131ec:	mov	r4, r0
   131f0:	str	r0, [r7, #52]	; 0x34
   131f4:	cmp	r0, #0
   131f8:	bne	131a0 <__assert_fail@plt+0x1b9c>
   131fc:	cmp	r6, #0
   13200:	blt	13274 <__assert_fail@plt+0x1c70>
   13204:	add	r1, sp, #24
   13208:	mov	r0, r6
   1320c:	bl	1122c <fstatfs64@plt>
   13210:	cmp	r0, #0
   13214:	bne	13290 <__assert_fail@plt+0x1c8c>
   13218:	cmp	r4, #0
   1321c:	beq	1325c <__assert_fail@plt+0x1c58>
   13220:	mov	r0, #16
   13224:	bl	198ec <__assert_fail@plt+0x82e8>
   13228:	subs	r6, r0, #0
   1322c:	beq	1325c <__assert_fail@plt+0x1c58>
   13230:	ldrd	r2, [r5, #64]	; 0x40
   13234:	strd	r2, [r6]
   13238:	ldr	r3, [sp, #24]
   1323c:	str	r3, [r6, #8]
   13240:	mov	r1, r6
   13244:	mov	r0, r4
   13248:	bl	15e78 <__assert_fail@plt+0x4874>
   1324c:	cmp	r0, #0
   13250:	beq	13268 <__assert_fail@plt+0x1c64>
   13254:	cmp	r6, r0
   13258:	bne	13264 <__assert_fail@plt+0x1c60>
   1325c:	ldr	r3, [sp, #24]
   13260:	b	13278 <__assert_fail@plt+0x1c74>
   13264:	bl	115c8 <abort@plt>
   13268:	mov	r0, r6
   1326c:	bl	1a034 <__assert_fail@plt+0x8a30>
   13270:	b	1325c <__assert_fail@plt+0x1c58>
   13274:	mov	r3, #0
   13278:	mov	r0, r3
   1327c:	add	sp, sp, #116	; 0x74
   13280:	ldrd	r4, [sp]
   13284:	ldrd	r6, [sp, #8]
   13288:	add	sp, sp, #16
   1328c:	pop	{pc}		; (ldr pc, [sp], #4)
   13290:	mov	r3, #0
   13294:	b	13278 <__assert_fail@plt+0x1c74>
   13298:	strd	r4, [sp, #-16]!
   1329c:	str	r6, [sp, #8]
   132a0:	str	lr, [sp, #12]
   132a4:	mov	r5, r0
   132a8:	mov	r4, r1
   132ac:	ldr	r3, [r0, #48]	; 0x30
   132b0:	movw	r2, #258	; 0x102
   132b4:	tst	r2, r3
   132b8:	beq	1332c <__assert_fail@plt+0x1d28>
   132bc:	mov	r0, #24
   132c0:	bl	198ec <__assert_fail@plt+0x82e8>
   132c4:	subs	r6, r0, #0
   132c8:	moveq	r0, #0
   132cc:	beq	13350 <__assert_fail@plt+0x1d4c>
   132d0:	ldrd	r2, [r4, #64]	; 0x40
   132d4:	strd	r2, [r6]
   132d8:	ldrd	r2, [r4, #160]	; 0xa0
   132dc:	strd	r2, [r6, #8]
   132e0:	str	r4, [r6, #16]
   132e4:	mov	r1, r6
   132e8:	ldr	r0, [r5, #56]	; 0x38
   132ec:	bl	15e78 <__assert_fail@plt+0x4874>
   132f0:	mov	r5, r0
   132f4:	cmp	r6, r0
   132f8:	moveq	r0, #1
   132fc:	beq	13350 <__assert_fail@plt+0x1d4c>
   13300:	mov	r0, r6
   13304:	bl	1a034 <__assert_fail@plt+0x8a30>
   13308:	cmp	r5, #0
   1330c:	moveq	r0, #0
   13310:	beq	13350 <__assert_fail@plt+0x1d4c>
   13314:	ldr	r3, [r5, #16]
   13318:	str	r3, [r4]
   1331c:	mov	r3, #2
   13320:	strh	r3, [r4, #56]	; 0x38
   13324:	mov	r0, #1
   13328:	b	13350 <__assert_fail@plt+0x1d4c>
   1332c:	add	r1, r1, #64	; 0x40
   13330:	ldr	r0, [r0, #56]	; 0x38
   13334:	bl	19b70 <__assert_fail@plt+0x856c>
   13338:	cmp	r0, #0
   1333c:	moveq	r0, #1
   13340:	beq	13350 <__assert_fail@plt+0x1d4c>
   13344:	str	r4, [r4]
   13348:	mov	r3, #2
   1334c:	strh	r3, [r4, #56]	; 0x38
   13350:	ldrd	r4, [sp]
   13354:	ldr	r6, [sp, #8]
   13358:	add	sp, sp, #12
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	strd	r4, [sp, #-16]!
   13364:	str	r6, [sp, #8]
   13368:	str	lr, [sp, #12]
   1336c:	mov	r5, r1
   13370:	ldr	r1, [r0, #32]
   13374:	cmp	r1, r5
   13378:	movne	r3, #0
   1337c:	moveq	r3, #1
   13380:	cmn	r1, #100	; 0x64
   13384:	moveq	r3, #0
   13388:	cmp	r3, #0
   1338c:	bne	133d0 <__assert_fail@plt+0x1dcc>
   13390:	mov	r4, r0
   13394:	cmp	r2, #0
   13398:	bne	133d4 <__assert_fail@plt+0x1dd0>
   1339c:	ldr	r3, [r0, #48]	; 0x30
   133a0:	eor	r3, r3, #4
   133a4:	ubfx	r3, r3, #2, #1
   133a8:	cmp	r1, #0
   133ac:	movlt	r3, #0
   133b0:	andge	r3, r3, #1
   133b4:	cmp	r3, #0
   133b8:	bne	133ec <__assert_fail@plt+0x1de8>
   133bc:	str	r5, [r4, #32]
   133c0:	ldrd	r4, [sp]
   133c4:	ldr	r6, [sp, #8]
   133c8:	add	sp, sp, #12
   133cc:	pop	{pc}		; (ldr pc, [sp], #4)
   133d0:	bl	115c8 <abort@plt>
   133d4:	add	r0, r0, #60	; 0x3c
   133d8:	bl	16020 <__assert_fail@plt+0x4a1c>
   133dc:	cmp	r0, #0
   133e0:	blt	133bc <__assert_fail@plt+0x1db8>
   133e4:	bl	115d4 <close@plt>
   133e8:	b	133bc <__assert_fail@plt+0x1db8>
   133ec:	mov	r0, r1
   133f0:	bl	115d4 <close@plt>
   133f4:	b	133bc <__assert_fail@plt+0x1db8>
   133f8:	strd	r4, [sp, #-16]!
   133fc:	str	r6, [sp, #8]
   13400:	str	lr, [sp, #12]
   13404:	mov	r4, r0
   13408:	ldr	r3, [r0, #48]	; 0x30
   1340c:	ands	r5, r3, #4
   13410:	movne	r5, #0
   13414:	bne	1342c <__assert_fail@plt+0x1e28>
   13418:	tst	r3, #512	; 0x200
   1341c:	beq	13448 <__assert_fail@plt+0x1e44>
   13420:	mov	r2, #1
   13424:	mvn	r1, #99	; 0x63
   13428:	bl	13360 <__assert_fail@plt+0x1d5c>
   1342c:	add	r0, r4, #60	; 0x3c
   13430:	bl	1312c <__assert_fail@plt+0x1b28>
   13434:	mov	r0, r5
   13438:	ldrd	r4, [sp]
   1343c:	ldr	r6, [sp, #8]
   13440:	add	sp, sp, #12
   13444:	pop	{pc}		; (ldr pc, [sp], #4)
   13448:	ldr	r0, [r0, #28]
   1344c:	bl	11568 <fchdir@plt>
   13450:	adds	r5, r0, #0
   13454:	movne	r5, #1
   13458:	b	1342c <__assert_fail@plt+0x1e28>
   1345c:	strd	r4, [sp, #-28]!	; 0xffffffe4
   13460:	strd	r6, [sp, #8]
   13464:	strd	r8, [sp, #16]
   13468:	str	lr, [sp, #24]
   1346c:	sub	sp, sp, #108	; 0x6c
   13470:	mov	r4, r0
   13474:	mov	r7, r1
   13478:	mov	r5, r2
   1347c:	subs	r9, r3, #0
   13480:	beq	135ac <__assert_fail@plt+0x1fa8>
   13484:	movw	r1, #47212	; 0xb86c
   13488:	movt	r1, #1
   1348c:	mov	r0, r9
   13490:	bl	11268 <strcmp@plt>
   13494:	cmp	r0, #0
   13498:	bne	135ac <__assert_fail@plt+0x1fa8>
   1349c:	ldr	r3, [r4, #48]	; 0x30
   134a0:	tst	r3, #4
   134a4:	bne	134ec <__assert_fail@plt+0x1ee8>
   134a8:	cmp	r5, #0
   134ac:	bge	13560 <__assert_fail@plt+0x1f5c>
   134b0:	tst	r3, #512	; 0x200
   134b4:	beq	134cc <__assert_fail@plt+0x1ec8>
   134b8:	add	r6, r4, #60	; 0x3c
   134bc:	mov	r0, r6
   134c0:	bl	16018 <__assert_fail@plt+0x4a14>
   134c4:	cmp	r0, #0
   134c8:	beq	13518 <__assert_fail@plt+0x1f14>
   134cc:	mov	r8, #1
   134d0:	mov	r1, r9
   134d4:	mov	r0, r4
   134d8:	bl	13050 <__assert_fail@plt+0x1a4c>
   134dc:	subs	r6, r0, #0
   134e0:	bge	135c8 <__assert_fail@plt+0x1fc4>
   134e4:	mvn	r4, #0
   134e8:	b	1364c <__assert_fail@plt+0x2048>
   134ec:	ubfx	r3, r3, #9, #1
   134f0:	cmp	r5, #0
   134f4:	movlt	r3, #0
   134f8:	andge	r3, r3, #1
   134fc:	cmp	r3, #0
   13500:	moveq	r4, #0
   13504:	beq	1364c <__assert_fail@plt+0x2048>
   13508:	mov	r0, r5
   1350c:	bl	115d4 <close@plt>
   13510:	mov	r4, #0
   13514:	b	1364c <__assert_fail@plt+0x2048>
   13518:	mov	r0, r6
   1351c:	bl	1606c <__assert_fail@plt+0x4a68>
   13520:	subs	r6, r0, #0
   13524:	blt	134cc <__assert_fail@plt+0x1ec8>
   13528:	ldr	r3, [r4, #48]	; 0x30
   1352c:	tst	r3, #2
   13530:	bne	1356c <__assert_fail@plt+0x1f68>
   13534:	mov	r5, r6
   13538:	mov	r8, #1
   1353c:	ldr	r3, [r4, #48]	; 0x30
   13540:	tst	r3, #512	; 0x200
   13544:	bne	13578 <__assert_fail@plt+0x1f74>
   13548:	mov	r0, r6
   1354c:	bl	11568 <fchdir@plt>
   13550:	mov	r4, r0
   13554:	b	13644 <__assert_fail@plt+0x2040>
   13558:	mov	r8, #0
   1355c:	b	134d0 <__assert_fail@plt+0x1ecc>
   13560:	mov	r6, r5
   13564:	mov	r8, #1
   13568:	b	135c8 <__assert_fail@plt+0x1fc4>
   1356c:	mov	r5, r6
   13570:	mov	r8, #1
   13574:	b	135f4 <__assert_fail@plt+0x1ff0>
   13578:	eor	r2, r8, #1
   1357c:	mov	r1, r6
   13580:	mov	r0, r4
   13584:	bl	13360 <__assert_fail@plt+0x1d5c>
   13588:	mov	r4, #0
   1358c:	b	1364c <__assert_fail@plt+0x2048>
   13590:	bl	11484 <__errno_location@plt>
   13594:	mov	r5, r0
   13598:	ldr	r7, [r0]
   1359c:	mov	r0, r6
   135a0:	bl	115d4 <close@plt>
   135a4:	str	r7, [r5]
   135a8:	b	1364c <__assert_fail@plt+0x2048>
   135ac:	ldr	r3, [r4, #48]	; 0x30
   135b0:	tst	r3, #4
   135b4:	bne	134ec <__assert_fail@plt+0x1ee8>
   135b8:	cmp	r5, #0
   135bc:	movge	r6, r5
   135c0:	movge	r8, #0
   135c4:	blt	13558 <__assert_fail@plt+0x1f54>
   135c8:	ldr	r3, [r4, #48]	; 0x30
   135cc:	tst	r3, #2
   135d0:	bne	135f4 <__assert_fail@plt+0x1ff0>
   135d4:	cmp	r9, #0
   135d8:	beq	1353c <__assert_fail@plt+0x1f38>
   135dc:	movw	r1, #47212	; 0xb86c
   135e0:	movt	r1, #1
   135e4:	mov	r0, r9
   135e8:	bl	11268 <strcmp@plt>
   135ec:	cmp	r0, #0
   135f0:	bne	1353c <__assert_fail@plt+0x1f38>
   135f4:	mov	r2, sp
   135f8:	mov	r1, r6
   135fc:	mov	r0, #3
   13600:	bl	11358 <__fxstat64@plt>
   13604:	cmp	r0, #0
   13608:	bne	13640 <__assert_fail@plt+0x203c>
   1360c:	ldrd	r0, [r7, #64]	; 0x40
   13610:	ldrd	r2, [sp]
   13614:	cmp	r1, r3
   13618:	cmpeq	r0, r2
   1361c:	bne	13634 <__assert_fail@plt+0x2030>
   13620:	ldrd	r0, [r7, #160]	; 0xa0
   13624:	ldrd	r2, [sp, #96]	; 0x60
   13628:	cmp	r1, r3
   1362c:	cmpeq	r0, r2
   13630:	beq	1353c <__assert_fail@plt+0x1f38>
   13634:	bl	11484 <__errno_location@plt>
   13638:	mov	r3, #2
   1363c:	str	r3, [r0]
   13640:	mvn	r4, #0
   13644:	cmp	r5, #0
   13648:	blt	13590 <__assert_fail@plt+0x1f8c>
   1364c:	mov	r0, r4
   13650:	add	sp, sp, #108	; 0x6c
   13654:	ldrd	r4, [sp]
   13658:	ldrd	r6, [sp, #8]
   1365c:	ldrd	r8, [sp, #16]
   13660:	add	sp, sp, #24
   13664:	pop	{pc}		; (ldr pc, [sp], #4)
   13668:	strd	r4, [sp, #-12]!
   1366c:	str	lr, [sp, #8]
   13670:	sub	sp, sp, #28
   13674:	ldr	r3, [r0, #48]	; 0x30
   13678:	movw	r2, #258	; 0x102
   1367c:	tst	r2, r3
   13680:	bne	136ec <__assert_fail@plt+0x20e8>
   13684:	ldr	ip, [r1, #4]
   13688:	cmp	ip, #0
   1368c:	beq	13714 <__assert_fail@plt+0x2110>
   13690:	ldr	r3, [ip, #48]	; 0x30
   13694:	cmp	r3, #0
   13698:	blt	13714 <__assert_fail@plt+0x2110>
   1369c:	ldr	lr, [r0, #56]	; 0x38
   136a0:	ldrd	r2, [lr, #16]
   136a4:	orrs	r3, r2, r3
   136a8:	beq	13728 <__assert_fail@plt+0x2124>
   136ac:	ldrd	r4, [lr]
   136b0:	ldrd	r2, [r1, #160]	; 0xa0
   136b4:	cmp	r5, r3
   136b8:	cmpeq	r4, r2
   136bc:	bne	13714 <__assert_fail@plt+0x2110>
   136c0:	ldrd	r2, [lr, #8]
   136c4:	ldrd	r4, [r1, #64]	; 0x40
   136c8:	cmp	r3, r5
   136cc:	cmpeq	r2, r4
   136d0:	bne	13714 <__assert_fail@plt+0x2110>
   136d4:	ldrd	r2, [ip, #64]	; 0x40
   136d8:	strd	r2, [lr, #8]
   136dc:	ldr	r3, [r0, #56]	; 0x38
   136e0:	ldrd	r0, [ip, #160]	; 0xa0
   136e4:	strd	r0, [r3]
   136e8:	b	13714 <__assert_fail@plt+0x2110>
   136ec:	ldrd	r2, [r1, #64]	; 0x40
   136f0:	strd	r2, [sp]
   136f4:	ldrd	r2, [r1, #160]	; 0xa0
   136f8:	strd	r2, [sp, #8]
   136fc:	mov	r1, sp
   13700:	ldr	r0, [r0, #56]	; 0x38
   13704:	bl	15eb8 <__assert_fail@plt+0x48b4>
   13708:	cmp	r0, #0
   1370c:	beq	13724 <__assert_fail@plt+0x2120>
   13710:	bl	1a034 <__assert_fail@plt+0x8a30>
   13714:	add	sp, sp, #28
   13718:	ldrd	r4, [sp]
   1371c:	add	sp, sp, #8
   13720:	pop	{pc}		; (ldr pc, [sp], #4)
   13724:	bl	115c8 <abort@plt>
   13728:	bl	115c8 <abort@plt>
   1372c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13730:	strd	r6, [sp, #8]
   13734:	strd	r8, [sp, #16]
   13738:	strd	sl, [sp, #24]
   1373c:	str	lr, [sp, #32]
   13740:	sub	sp, sp, #68	; 0x44
   13744:	mov	r5, r0
   13748:	str	r1, [sp, #32]
   1374c:	ldr	r9, [r0]
   13750:	ldr	r0, [r9, #12]
   13754:	str	r0, [sp, #40]	; 0x28
   13758:	cmp	r0, #0
   1375c:	beq	1386c <__assert_fail@plt+0x2268>
   13760:	bl	1155c <dirfd@plt>
   13764:	str	r0, [sp, #60]	; 0x3c
   13768:	cmp	r0, #0
   1376c:	blt	13828 <__assert_fail@plt+0x2224>
   13770:	ldr	r2, [r5, #44]	; 0x2c
   13774:	movw	r3, #34464	; 0x86a0
   13778:	movt	r3, #1
   1377c:	cmp	r2, #0
   13780:	mvnne	r3, #0
   13784:	str	r3, [sp, #16]
   13788:	mov	r3, #1
   1378c:	str	r3, [sp, #52]	; 0x34
   13790:	ldr	r3, [r9, #40]	; 0x28
   13794:	sub	r1, r3, #1
   13798:	ldr	r2, [r9, #28]
   1379c:	ldrb	r2, [r2, r1]
   137a0:	cmp	r2, #47	; 0x2f
   137a4:	movne	r1, r3
   137a8:	str	r1, [sp, #28]
   137ac:	ldr	r3, [r5, #48]	; 0x30
   137b0:	tst	r3, #4
   137b4:	moveq	r3, #0
   137b8:	streq	r3, [sp, #20]
   137bc:	beq	137d8 <__assert_fail@plt+0x21d4>
   137c0:	ldr	r3, [r5, #24]
   137c4:	add	r2, r3, r1
   137c8:	add	r2, r2, #1
   137cc:	str	r2, [sp, #20]
   137d0:	mov	r2, #47	; 0x2f
   137d4:	strb	r2, [r3, r1]
   137d8:	ldr	r3, [sp, #28]
   137dc:	add	sl, r3, #1
   137e0:	ldr	fp, [r5, #36]	; 0x24
   137e4:	sub	fp, fp, sl
   137e8:	ldr	r3, [r9, #48]	; 0x30
   137ec:	add	r3, r3, #1
   137f0:	str	r3, [sp, #12]
   137f4:	mov	r3, #0
   137f8:	str	r3, [sp, #36]	; 0x24
   137fc:	str	r3, [sp, #24]
   13800:	str	r3, [sp]
   13804:	mov	r8, r3
   13808:	str	r3, [sp, #4]
   1380c:	movw	r3, #6548	; 0x1994
   13810:	movt	r3, #258	; 0x102
   13814:	str	r3, [sp, #44]	; 0x2c
   13818:	movw	r3, #19778	; 0x4d42
   1381c:	movt	r3, #65363	; 0xff53
   13820:	str	r3, [sp, #48]	; 0x30
   13824:	b	13e04 <__assert_fail@plt+0x2800>
   13828:	ldr	r0, [r9, #12]
   1382c:	bl	115ec <closedir@plt>
   13830:	mov	r3, #0
   13834:	str	r3, [r9, #12]
   13838:	ldr	r3, [sp, #32]
   1383c:	cmp	r3, #3
   13840:	movne	r3, #0
   13844:	strne	r3, [sp, #4]
   13848:	bne	13cb4 <__assert_fail@plt+0x26b0>
   1384c:	mov	r3, #4
   13850:	strh	r3, [r9, #56]	; 0x38
   13854:	bl	11484 <__errno_location@plt>
   13858:	ldr	r3, [r0]
   1385c:	str	r3, [r9, #32]
   13860:	mov	r3, #0
   13864:	str	r3, [sp, #4]
   13868:	b	13cb4 <__assert_fail@plt+0x26b0>
   1386c:	ldr	r3, [r5, #48]	; 0x30
   13870:	and	r2, r3, #516	; 0x204
   13874:	cmp	r2, #512	; 0x200
   13878:	ldreq	r0, [r5, #32]
   1387c:	mvnne	r0, #99	; 0x63
   13880:	ldr	r1, [r9, #24]
   13884:	ands	r2, r3, #16
   13888:	beq	138a4 <__assert_fail@plt+0x22a0>
   1388c:	tst	r3, #1
   13890:	moveq	r2, #32768	; 0x8000
   13894:	beq	138a4 <__assert_fail@plt+0x22a0>
   13898:	ldr	r2, [r9, #48]	; 0x30
   1389c:	cmp	r2, #0
   138a0:	movne	r2, #32768	; 0x8000
   138a4:	add	r3, sp, #60	; 0x3c
   138a8:	bl	160f8 <__assert_fail@plt+0x4af4>
   138ac:	str	r0, [sp, #4]
   138b0:	str	r0, [r9, #12]
   138b4:	cmp	r0, #0
   138b8:	beq	1398c <__assert_fail@plt+0x2388>
   138bc:	ldrh	r3, [r9, #56]	; 0x38
   138c0:	cmp	r3, #11
   138c4:	beq	139b0 <__assert_fail@plt+0x23ac>
   138c8:	ldr	r3, [r5, #48]	; 0x30
   138cc:	tst	r3, #256	; 0x100
   138d0:	bne	139c8 <__assert_fail@plt+0x23c4>
   138d4:	ldr	r2, [r5, #44]	; 0x2c
   138d8:	movw	r3, #34464	; 0x86a0
   138dc:	movt	r3, #1
   138e0:	cmp	r2, #0
   138e4:	mvnne	r3, #0
   138e8:	str	r3, [sp, #16]
   138ec:	ldr	r3, [sp, #32]
   138f0:	cmp	r3, #2
   138f4:	beq	13aec <__assert_fail@plt+0x24e8>
   138f8:	ldr	r3, [r5, #48]	; 0x30
   138fc:	and	r3, r3, #56	; 0x38
   13900:	cmp	r3, #24
   13904:	beq	13a10 <__assert_fail@plt+0x240c>
   13908:	ldr	r3, [sp, #32]
   1390c:	cmp	r3, #3
   13910:	movne	r4, #0
   13914:	moveq	r4, #1
   13918:	mov	r6, #1
   1391c:	ldr	r3, [r5, #48]	; 0x30
   13920:	tst	r3, #512	; 0x200
   13924:	bne	13aa8 <__assert_fail@plt+0x24a4>
   13928:	ldr	r2, [sp, #60]	; 0x3c
   1392c:	cmp	r2, #0
   13930:	bge	13ac0 <__assert_fail@plt+0x24bc>
   13934:	tst	r4, r6
   13938:	beq	13948 <__assert_fail@plt+0x2344>
   1393c:	bl	11484 <__errno_location@plt>
   13940:	ldr	r3, [r0]
   13944:	str	r3, [r9, #32]
   13948:	ldrh	r3, [r9, #58]	; 0x3a
   1394c:	orr	r3, r3, #1
   13950:	strh	r3, [r9, #58]	; 0x3a
   13954:	ldr	r0, [r9, #12]
   13958:	bl	115ec <closedir@plt>
   1395c:	mov	r3, #0
   13960:	str	r3, [r9, #12]
   13964:	ldr	r3, [r5, #48]	; 0x30
   13968:	tst	r3, #512	; 0x200
   1396c:	beq	1397c <__assert_fail@plt+0x2378>
   13970:	ldr	r0, [sp, #60]	; 0x3c
   13974:	cmp	r0, #0
   13978:	bge	13ae4 <__assert_fail@plt+0x24e0>
   1397c:	mov	r3, #0
   13980:	str	r3, [r9, #12]
   13984:	str	r3, [sp, #52]	; 0x34
   13988:	b	13790 <__assert_fail@plt+0x218c>
   1398c:	ldr	r3, [sp, #32]
   13990:	cmp	r3, #3
   13994:	bne	13cb4 <__assert_fail@plt+0x26b0>
   13998:	mov	r3, #4
   1399c:	strh	r3, [r9, #56]	; 0x38
   139a0:	bl	11484 <__errno_location@plt>
   139a4:	ldr	r3, [r0]
   139a8:	str	r3, [r9, #32]
   139ac:	b	13cb4 <__assert_fail@plt+0x26b0>
   139b0:	mov	r2, #0
   139b4:	mov	r1, r9
   139b8:	mov	r0, r5
   139bc:	bl	12cd8 <__assert_fail@plt+0x16d4>
   139c0:	strh	r0, [r9, #56]	; 0x38
   139c4:	b	138d4 <__assert_fail@plt+0x22d0>
   139c8:	mov	r1, r9
   139cc:	mov	r0, r5
   139d0:	bl	13668 <__assert_fail@plt+0x2064>
   139d4:	mov	r2, #0
   139d8:	mov	r1, r9
   139dc:	mov	r0, r5
   139e0:	bl	12cd8 <__assert_fail@plt+0x16d4>
   139e4:	mov	r1, r9
   139e8:	mov	r0, r5
   139ec:	bl	13298 <__assert_fail@plt+0x1c94>
   139f0:	cmp	r0, #0
   139f4:	bne	138d4 <__assert_fail@plt+0x22d0>
   139f8:	bl	11484 <__errno_location@plt>
   139fc:	mov	r3, #12
   13a00:	str	r3, [r0]
   13a04:	ldr	r3, [sp, #40]	; 0x28
   13a08:	str	r3, [sp, #4]
   13a0c:	b	13cb4 <__assert_fail@plt+0x26b0>
   13a10:	ldr	r3, [r9, #84]	; 0x54
   13a14:	cmp	r3, #2
   13a18:	bne	13908 <__assert_fail@plt+0x2304>
   13a1c:	ldr	r1, [sp, #60]	; 0x3c
   13a20:	mov	r0, r9
   13a24:	bl	1316c <__assert_fail@plt+0x1b68>
   13a28:	movw	r3, #26985	; 0x6969
   13a2c:	cmp	r0, r3
   13a30:	beq	13a90 <__assert_fail@plt+0x248c>
   13a34:	bgt	13a74 <__assert_fail@plt+0x2470>
   13a38:	movw	r3, #19778	; 0x4d42
   13a3c:	movt	r3, #65363	; 0xff53
   13a40:	cmp	r0, r3
   13a44:	beq	13a90 <__assert_fail@plt+0x248c>
   13a48:	cmp	r0, #0
   13a4c:	beq	13a90 <__assert_fail@plt+0x248c>
   13a50:	ldr	r3, [sp, #32]
   13a54:	cmp	r3, #3
   13a58:	moveq	r4, #1
   13a5c:	movne	r4, #0
   13a60:	movne	r3, #0
   13a64:	strne	r3, [sp, #52]	; 0x34
   13a68:	bne	13790 <__assert_fail@plt+0x218c>
   13a6c:	mov	r6, #0
   13a70:	b	1391c <__assert_fail@plt+0x2318>
   13a74:	movw	r3, #40864	; 0x9fa0
   13a78:	cmp	r0, r3
   13a7c:	beq	13a90 <__assert_fail@plt+0x248c>
   13a80:	movw	r3, #16719	; 0x414f
   13a84:	movt	r3, #21318	; 0x5346
   13a88:	cmp	r0, r3
   13a8c:	bne	13a50 <__assert_fail@plt+0x244c>
   13a90:	ldr	r3, [sp, #32]
   13a94:	cmp	r3, #3
   13a98:	movne	r4, #0
   13a9c:	moveq	r4, #1
   13aa0:	mov	r6, #1
   13aa4:	b	1391c <__assert_fail@plt+0x2318>
   13aa8:	mov	r2, #3
   13aac:	movw	r1, #1030	; 0x406
   13ab0:	ldr	r0, [sp, #60]	; 0x3c
   13ab4:	bl	19d1c <__assert_fail@plt+0x8718>
   13ab8:	str	r0, [sp, #60]	; 0x3c
   13abc:	b	13928 <__assert_fail@plt+0x2324>
   13ac0:	mov	r3, #0
   13ac4:	mov	r1, r9
   13ac8:	mov	r0, r5
   13acc:	bl	1345c <__assert_fail@plt+0x1e58>
   13ad0:	cmp	r0, #0
   13ad4:	moveq	r3, #1
   13ad8:	streq	r3, [sp, #52]	; 0x34
   13adc:	beq	13790 <__assert_fail@plt+0x218c>
   13ae0:	b	13934 <__assert_fail@plt+0x2330>
   13ae4:	bl	115d4 <close@plt>
   13ae8:	b	1397c <__assert_fail@plt+0x2378>
   13aec:	mov	r3, #0
   13af0:	str	r3, [sp, #52]	; 0x34
   13af4:	b	13790 <__assert_fail@plt+0x218c>
   13af8:	ldr	r3, [sp, #8]
   13afc:	ldr	r3, [r3]
   13b00:	cmp	r3, #0
   13b04:	beq	13b24 <__assert_fail@plt+0x2520>
   13b08:	str	r3, [r9, #32]
   13b0c:	ldr	r3, [sp, #40]	; 0x28
   13b10:	orr	r3, r3, r8
   13b14:	cmp	r3, #0
   13b18:	movne	r3, #7
   13b1c:	moveq	r3, #4
   13b20:	strh	r3, [r9, #56]	; 0x38
   13b24:	ldr	r0, [r9, #12]
   13b28:	cmp	r0, #0
   13b2c:	beq	13b3c <__assert_fail@plt+0x2538>
   13b30:	bl	115ec <closedir@plt>
   13b34:	mov	r3, #0
   13b38:	str	r3, [r9, #12]
   13b3c:	ldr	r3, [sp, #24]
   13b40:	cmp	r3, #0
   13b44:	bne	14004 <__assert_fail@plt+0x2a00>
   13b48:	ldr	r3, [r5, #48]	; 0x30
   13b4c:	tst	r3, #4
   13b50:	beq	13b7c <__assert_fail@plt+0x2578>
   13b54:	ldr	r3, [r5, #36]	; 0x24
   13b58:	cmp	r8, #0
   13b5c:	cmpne	r3, sl
   13b60:	bne	13b70 <__assert_fail@plt+0x256c>
   13b64:	ldr	r3, [sp, #20]
   13b68:	sub	r3, r3, #1
   13b6c:	str	r3, [sp, #20]
   13b70:	mov	r3, #0
   13b74:	ldr	r2, [sp, #20]
   13b78:	strb	r3, [r2]
   13b7c:	ldr	r3, [sp, #52]	; 0x34
   13b80:	ldr	r2, [sp, #40]	; 0x28
   13b84:	cmp	r2, #0
   13b88:	movne	r3, #0
   13b8c:	cmp	r3, #0
   13b90:	beq	13bc8 <__assert_fail@plt+0x25c4>
   13b94:	ldr	r3, [sp, #32]
   13b98:	cmp	r8, #0
   13b9c:	cmpne	r3, #1
   13ba0:	bne	13bd0 <__assert_fail@plt+0x25cc>
   13ba4:	ldr	r3, [r9, #48]	; 0x30
   13ba8:	cmp	r3, #0
   13bac:	bne	14094 <__assert_fail@plt+0x2a90>
   13bb0:	mov	r0, r5
   13bb4:	bl	133f8 <__assert_fail@plt+0x1df4>
   13bb8:	adds	r0, r0, #0
   13bbc:	movne	r0, #1
   13bc0:	cmp	r0, #0
   13bc4:	bne	140b8 <__assert_fail@plt+0x2ab4>
   13bc8:	cmp	r8, #0
   13bcc:	beq	140e0 <__assert_fail@plt+0x2adc>
   13bd0:	ldr	r3, [sp, #36]	; 0x24
   13bd4:	cmp	r3, #0
   13bd8:	bne	14118 <__assert_fail@plt+0x2b14>
   13bdc:	ldr	r3, [r5, #44]	; 0x2c
   13be0:	cmp	r3, #0
   13be4:	cmpne	r8, #1
   13be8:	bls	13cb4 <__assert_fail@plt+0x26b0>
   13bec:	mov	r2, r8
   13bf0:	ldr	r1, [sp, #4]
   13bf4:	mov	r0, r5
   13bf8:	bl	12e48 <__assert_fail@plt+0x1844>
   13bfc:	str	r0, [sp, #4]
   13c00:	b	13cb4 <__assert_fail@plt+0x26b0>
   13c04:	ldrb	r3, [r7, #20]
   13c08:	cmp	r3, #0
   13c0c:	beq	13ffc <__assert_fail@plt+0x29f8>
   13c10:	ldrh	r3, [r7, #20]
   13c14:	cmp	r3, #46	; 0x2e
   13c18:	bne	13e48 <__assert_fail@plt+0x2844>
   13c1c:	ldr	r4, [sp]
   13c20:	b	13e00 <__assert_fail@plt+0x27fc>
   13c24:	ldr	fp, [r5, #24]
   13c28:	ldr	r3, [sp, #28]
   13c2c:	add	r1, r3, #2
   13c30:	add	r1, r1, r6
   13c34:	mov	r0, r5
   13c38:	bl	12c54 <__assert_fail@plt+0x1650>
   13c3c:	cmp	r0, #0
   13c40:	beq	13c70 <__assert_fail@plt+0x266c>
   13c44:	ldr	r3, [r5, #24]
   13c48:	cmp	r3, fp
   13c4c:	beq	13cd4 <__assert_fail@plt+0x26d0>
   13c50:	ldr	r2, [r5, #48]	; 0x30
   13c54:	tst	r2, #4
   13c58:	addne	r3, r3, sl
   13c5c:	strne	r3, [sp, #20]
   13c60:	ldr	fp, [r5, #36]	; 0x24
   13c64:	sub	fp, fp, sl
   13c68:	str	r0, [sp, #24]
   13c6c:	b	13e78 <__assert_fail@plt+0x2874>
   13c70:	ldr	r7, [sp, #8]
   13c74:	ldr	r6, [r7]
   13c78:	mov	r0, r4
   13c7c:	bl	1a034 <__assert_fail@plt+0x8a30>
   13c80:	ldr	r0, [sp, #4]
   13c84:	bl	1309c <__assert_fail@plt+0x1a98>
   13c88:	ldr	r0, [r9, #12]
   13c8c:	bl	115ec <closedir@plt>
   13c90:	mov	r2, #0
   13c94:	str	r2, [r9, #12]
   13c98:	mov	r3, #7
   13c9c:	strh	r3, [r9, #56]	; 0x38
   13ca0:	ldr	r3, [r5, #48]	; 0x30
   13ca4:	orr	r3, r3, #8192	; 0x2000
   13ca8:	str	r3, [r5, #48]	; 0x30
   13cac:	str	r6, [r7]
   13cb0:	str	r2, [sp, #4]
   13cb4:	ldr	r0, [sp, #4]
   13cb8:	add	sp, sp, #68	; 0x44
   13cbc:	ldrd	r4, [sp]
   13cc0:	ldrd	r6, [sp, #8]
   13cc4:	ldrd	r8, [sp, #16]
   13cc8:	ldrd	sl, [sp, #24]
   13ccc:	add	sp, sp, #32
   13cd0:	pop	{pc}		; (ldr pc, [sp], #4)
   13cd4:	ldr	r0, [sp, #24]
   13cd8:	b	13c60 <__assert_fail@plt+0x265c>
   13cdc:	mov	r0, r4
   13ce0:	bl	1a034 <__assert_fail@plt+0x8a30>
   13ce4:	ldr	r0, [sp, #4]
   13ce8:	bl	1309c <__assert_fail@plt+0x1a98>
   13cec:	ldr	r0, [r9, #12]
   13cf0:	bl	115ec <closedir@plt>
   13cf4:	mov	r2, #0
   13cf8:	str	r2, [r9, #12]
   13cfc:	mov	r3, #7
   13d00:	strh	r3, [r9, #56]	; 0x38
   13d04:	ldr	r3, [r5, #48]	; 0x30
   13d08:	orr	r3, r3, #8192	; 0x2000
   13d0c:	str	r3, [r5, #48]	; 0x30
   13d10:	mov	r3, #36	; 0x24
   13d14:	ldr	r1, [sp, #8]
   13d18:	str	r3, [r1]
   13d1c:	str	r2, [sp, #4]
   13d20:	b	13cb4 <__assert_fail@plt+0x26b0>
   13d24:	ldr	r3, [r4, #28]
   13d28:	str	r3, [r4, #24]
   13d2c:	ldr	r2, [r4, #52]	; 0x34
   13d30:	add	r2, r2, #1
   13d34:	add	r1, r4, #168	; 0xa8
   13d38:	ldr	r0, [sp, #20]
   13d3c:	bl	1128c <memmove@plt>
   13d40:	b	13eb0 <__assert_fail@plt+0x28ac>
   13d44:	ubfx	r3, r3, #4, #1
   13d48:	cmp	r2, #10
   13d4c:	orrne	r3, r3, #1
   13d50:	cmp	r3, #0
   13d54:	beq	13ee0 <__assert_fail@plt+0x28dc>
   13d58:	mov	r2, #11
   13d5c:	strh	r2, [r4, #56]	; 0x38
   13d60:	ldrb	r2, [r7, #18]
   13d64:	sub	r2, r2, #1
   13d68:	cmp	r2, #11
   13d6c:	ldrls	pc, [pc, r2, lsl #2]
   13d70:	b	13f6c <__assert_fail@plt+0x2968>
   13d74:	andeq	r3, r1, ip, lsr pc
   13d78:	andeq	r3, r1, r8, lsr #27
   13d7c:	andeq	r3, r1, ip, ror #30
   13d80:	andeq	r3, r1, r0, lsr pc
   13d84:	andeq	r3, r1, ip, ror #30
   13d88:	andeq	r4, r1, r4, asr #2
   13d8c:	andeq	r3, r1, ip, ror #30
   13d90:	andeq	r3, r1, r4, asr pc
   13d94:	andeq	r3, r1, ip, ror #30
   13d98:	andeq	r3, r1, r8, asr #30
   13d9c:	andeq	r3, r1, ip, ror #30
   13da0:	andeq	r3, r1, r0, ror #30
   13da4:	mov	r3, #0
   13da8:	mov	r2, #8192	; 0x2000
   13dac:	str	r2, [r4, #80]	; 0x50
   13db0:	cmp	r3, #0
   13db4:	movne	r2, #1
   13db8:	moveq	r2, #2
   13dbc:	mov	r3, #0
   13dc0:	str	r2, [r4, #112]	; 0x70
   13dc4:	str	r3, [r4, #116]	; 0x74
   13dc8:	mov	r3, #0
   13dcc:	str	r3, [r4, #8]
   13dd0:	ldr	r3, [sp, #4]
   13dd4:	cmp	r3, #0
   13dd8:	ldrne	r3, [sp]
   13ddc:	strne	r4, [r3, #8]
   13de0:	streq	r4, [sp, #4]
   13de4:	movw	r3, #10000	; 0x2710
   13de8:	cmp	r8, r3
   13dec:	beq	13f8c <__assert_fail@plt+0x2988>
   13df0:	add	r8, r8, #1
   13df4:	ldr	r3, [sp, #16]
   13df8:	cmp	r8, r3
   13dfc:	bcs	13b3c <__assert_fail@plt+0x2538>
   13e00:	str	r4, [sp]
   13e04:	ldr	r3, [r9, #12]
   13e08:	cmp	r3, #0
   13e0c:	beq	13b3c <__assert_fail@plt+0x2538>
   13e10:	bl	11484 <__errno_location@plt>
   13e14:	str	r0, [sp, #8]
   13e18:	mov	r3, #0
   13e1c:	str	r3, [r0]
   13e20:	ldr	r0, [r9, #12]
   13e24:	bl	11544 <readdir64@plt>
   13e28:	subs	r7, r0, #0
   13e2c:	beq	13af8 <__assert_fail@plt+0x24f4>
   13e30:	ldr	r3, [r5, #48]	; 0x30
   13e34:	tst	r3, #32
   13e38:	bne	13e48 <__assert_fail@plt+0x2844>
   13e3c:	ldrb	r3, [r7, #19]
   13e40:	cmp	r3, #46	; 0x2e
   13e44:	beq	13c04 <__assert_fail@plt+0x2600>
   13e48:	add	r4, r7, #19
   13e4c:	mov	r0, r4
   13e50:	bl	11460 <strlen@plt>
   13e54:	mov	r6, r0
   13e58:	mov	r2, r0
   13e5c:	mov	r1, r4
   13e60:	mov	r0, r5
   13e64:	bl	12f38 <__assert_fail@plt+0x1934>
   13e68:	subs	r4, r0, #0
   13e6c:	beq	13c70 <__assert_fail@plt+0x266c>
   13e70:	cmp	fp, r6
   13e74:	bls	13c24 <__assert_fail@plt+0x2620>
   13e78:	adds	r6, sl, r6
   13e7c:	bcs	13cdc <__assert_fail@plt+0x26d8>
   13e80:	ldr	r3, [sp, #12]
   13e84:	str	r3, [r4, #48]	; 0x30
   13e88:	ldr	r3, [r5]
   13e8c:	str	r3, [r4, #4]
   13e90:	str	r6, [r4, #40]	; 0x28
   13e94:	ldrd	r2, [r7]
   13e98:	strd	r2, [r4, #160]	; 0xa0
   13e9c:	ldr	r3, [r5, #48]	; 0x30
   13ea0:	tst	r3, #4
   13ea4:	addeq	r3, r4, #168	; 0xa8
   13ea8:	streq	r3, [r4, #24]
   13eac:	bne	13d24 <__assert_fail@plt+0x2720>
   13eb0:	ldr	r3, [r5, #44]	; 0x2c
   13eb4:	cmp	r3, #0
   13eb8:	beq	13ec8 <__assert_fail@plt+0x28c4>
   13ebc:	ldr	r3, [r5, #48]	; 0x30
   13ec0:	tst	r3, #1024	; 0x400
   13ec4:	beq	13f74 <__assert_fail@plt+0x2970>
   13ec8:	ldr	r3, [r5, #48]	; 0x30
   13ecc:	tst	r3, #8
   13ed0:	beq	13ee0 <__assert_fail@plt+0x28dc>
   13ed4:	ldrb	r2, [r7, #18]
   13ed8:	tst	r2, #251	; 0xfb
   13edc:	bne	13d44 <__assert_fail@plt+0x2740>
   13ee0:	mov	r3, #11
   13ee4:	strh	r3, [r4, #56]	; 0x38
   13ee8:	ldrb	r3, [r7, #18]
   13eec:	sub	r3, r3, #1
   13ef0:	cmp	r3, #11
   13ef4:	ldrls	pc, [pc, r3, lsl #2]
   13ef8:	b	13f68 <__assert_fail@plt+0x2964>
   13efc:	andeq	r3, r1, r8, lsr pc
   13f00:	andeq	r3, r1, r4, lsr #27
   13f04:	andeq	r3, r1, r8, ror #30
   13f08:	andeq	r3, r1, ip, lsr #30
   13f0c:	andeq	r3, r1, r8, ror #30
   13f10:	andeq	r4, r1, r8, asr r1
   13f14:	andeq	r3, r1, r8, ror #30
   13f18:	andeq	r3, r1, r0, asr pc
   13f1c:	andeq	r3, r1, r8, ror #30
   13f20:	andeq	r3, r1, r4, asr #30
   13f24:	andeq	r3, r1, r8, ror #30
   13f28:	andeq	r3, r1, ip, asr pc
   13f2c:	mov	r3, #0
   13f30:	mov	r2, #16384	; 0x4000
   13f34:	b	13dac <__assert_fail@plt+0x27a8>
   13f38:	mov	r3, #0
   13f3c:	mov	r2, #4096	; 0x1000
   13f40:	b	13dac <__assert_fail@plt+0x27a8>
   13f44:	mov	r3, #0
   13f48:	mov	r2, #40960	; 0xa000
   13f4c:	b	13dac <__assert_fail@plt+0x27a8>
   13f50:	mov	r3, #0
   13f54:	mov	r2, #32768	; 0x8000
   13f58:	b	13dac <__assert_fail@plt+0x27a8>
   13f5c:	mov	r3, #0
   13f60:	mov	r2, #49152	; 0xc000
   13f64:	b	13dac <__assert_fail@plt+0x27a8>
   13f68:	mov	r3, #0
   13f6c:	mov	r2, #0
   13f70:	b	13dac <__assert_fail@plt+0x27a8>
   13f74:	mov	r2, #0
   13f78:	mov	r1, r4
   13f7c:	mov	r0, r5
   13f80:	bl	12cd8 <__assert_fail@plt+0x16d4>
   13f84:	strh	r0, [r4, #56]	; 0x38
   13f88:	b	13dc8 <__assert_fail@plt+0x27c4>
   13f8c:	ldr	r3, [r5, #44]	; 0x2c
   13f90:	cmp	r3, #0
   13f94:	beq	13fa0 <__assert_fail@plt+0x299c>
   13f98:	movw	r8, #10001	; 0x2711
   13f9c:	b	13e00 <__assert_fail@plt+0x27fc>
   13fa0:	ldr	r1, [sp, #60]	; 0x3c
   13fa4:	mov	r0, r9
   13fa8:	bl	1316c <__assert_fail@plt+0x1b68>
   13fac:	movw	r3, #26985	; 0x6969
   13fb0:	cmp	r0, r3
   13fb4:	beq	13fe4 <__assert_fail@plt+0x29e0>
   13fb8:	ldr	r3, [sp, #44]	; 0x2c
   13fbc:	cmp	r0, r3
   13fc0:	beq	13ff0 <__assert_fail@plt+0x29ec>
   13fc4:	ldr	r3, [sp, #48]	; 0x30
   13fc8:	cmp	r0, r3
   13fcc:	moveq	r3, #0
   13fd0:	streq	r3, [sp, #36]	; 0x24
   13fd4:	beq	13df0 <__assert_fail@plt+0x27ec>
   13fd8:	mov	r3, #1
   13fdc:	str	r3, [sp, #36]	; 0x24
   13fe0:	b	13f98 <__assert_fail@plt+0x2994>
   13fe4:	mov	r3, #0
   13fe8:	str	r3, [sp, #36]	; 0x24
   13fec:	b	13df0 <__assert_fail@plt+0x27ec>
   13ff0:	mov	r3, #0
   13ff4:	str	r3, [sp, #36]	; 0x24
   13ff8:	b	13df0 <__assert_fail@plt+0x27ec>
   13ffc:	ldr	r4, [sp]
   14000:	b	13e00 <__assert_fail@plt+0x27fc>
   14004:	ldr	r1, [r5, #24]
   14008:	ldr	r3, [r5, #4]
   1400c:	cmp	r3, #0
   14010:	bne	1402c <__assert_fail@plt+0x2a28>
   14014:	ldr	r3, [sp, #4]
   14018:	b	14064 <__assert_fail@plt+0x2a60>
   1401c:	str	r1, [r3, #28]
   14020:	ldr	r3, [r3, #8]
   14024:	cmp	r3, #0
   14028:	beq	14014 <__assert_fail@plt+0x2a10>
   1402c:	ldr	r2, [r3, #24]
   14030:	add	r0, r3, #168	; 0xa8
   14034:	cmp	r2, r0
   14038:	beq	1401c <__assert_fail@plt+0x2a18>
   1403c:	ldr	r0, [r3, #28]
   14040:	sub	r2, r2, r0
   14044:	add	r2, r1, r2
   14048:	str	r2, [r3, #24]
   1404c:	b	1401c <__assert_fail@plt+0x2a18>
   14050:	str	r1, [r3, #28]
   14054:	ldr	r2, [r3, #8]
   14058:	cmp	r2, #0
   1405c:	ldreq	r2, [r3, #4]
   14060:	mov	r3, r2
   14064:	ldr	r2, [r3, #48]	; 0x30
   14068:	cmp	r2, #0
   1406c:	blt	13b48 <__assert_fail@plt+0x2544>
   14070:	ldr	r2, [r3, #24]
   14074:	add	r0, r3, #168	; 0xa8
   14078:	cmp	r2, r0
   1407c:	beq	14050 <__assert_fail@plt+0x2a4c>
   14080:	ldr	r0, [r3, #28]
   14084:	sub	r2, r2, r0
   14088:	add	r2, r1, r2
   1408c:	str	r2, [r3, #24]
   14090:	b	14050 <__assert_fail@plt+0x2a4c>
   14094:	movw	r3, #47212	; 0xb86c
   14098:	movt	r3, #1
   1409c:	mvn	r2, #0
   140a0:	ldr	r1, [r9, #4]
   140a4:	mov	r0, r5
   140a8:	bl	1345c <__assert_fail@plt+0x1e58>
   140ac:	adds	r0, r0, #0
   140b0:	movne	r0, #1
   140b4:	b	13bc0 <__assert_fail@plt+0x25bc>
   140b8:	mov	r3, #7
   140bc:	strh	r3, [r9, #56]	; 0x38
   140c0:	ldr	r3, [r5, #48]	; 0x30
   140c4:	orr	r3, r3, #8192	; 0x2000
   140c8:	str	r3, [r5, #48]	; 0x30
   140cc:	ldr	r0, [sp, #4]
   140d0:	bl	1309c <__assert_fail@plt+0x1a98>
   140d4:	mov	r3, #0
   140d8:	str	r3, [sp, #4]
   140dc:	b	13cb4 <__assert_fail@plt+0x26b0>
   140e0:	ldr	r3, [sp, #32]
   140e4:	cmp	r3, #3
   140e8:	beq	14100 <__assert_fail@plt+0x2afc>
   140ec:	ldr	r0, [sp, #4]
   140f0:	bl	1309c <__assert_fail@plt+0x1a98>
   140f4:	mov	r3, #0
   140f8:	str	r3, [sp, #4]
   140fc:	b	13cb4 <__assert_fail@plt+0x26b0>
   14100:	ldrh	r3, [r9, #56]	; 0x38
   14104:	cmp	r3, #7
   14108:	cmpne	r3, #4
   1410c:	movne	r3, #6
   14110:	strhne	r3, [r9, #56]	; 0x38
   14114:	b	140ec <__assert_fail@plt+0x2ae8>
   14118:	movw	r3, #11288	; 0x2c18
   1411c:	movt	r3, #1
   14120:	str	r3, [r5, #44]	; 0x2c
   14124:	mov	r2, r8
   14128:	ldr	r1, [sp, #4]
   1412c:	mov	r0, r5
   14130:	bl	12e48 <__assert_fail@plt+0x1844>
   14134:	str	r0, [sp, #4]
   14138:	mov	r3, #0
   1413c:	str	r3, [r5, #44]	; 0x2c
   14140:	b	13cb4 <__assert_fail@plt+0x26b0>
   14144:	mov	r3, #24576	; 0x6000
   14148:	str	r3, [r4, #80]	; 0x50
   1414c:	mov	r2, #1
   14150:	mov	r3, #0
   14154:	b	13dc0 <__assert_fail@plt+0x27bc>
   14158:	mov	r3, #24576	; 0x6000
   1415c:	str	r3, [r4, #80]	; 0x50
   14160:	mov	r2, #2
   14164:	mov	r3, #0
   14168:	b	13dc0 <__assert_fail@plt+0x27bc>
   1416c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14170:	strd	r6, [sp, #8]
   14174:	strd	r8, [sp, #16]
   14178:	strd	sl, [sp, #24]
   1417c:	str	lr, [sp, #32]
   14180:	sub	sp, sp, #20
   14184:	bic	r3, r1, #4080	; 0xff0
   14188:	bic	r3, r3, #15
   1418c:	cmp	r3, #0
   14190:	bne	14270 <__assert_fail@plt+0x2c6c>
   14194:	mov	r6, r0
   14198:	mov	r9, r1
   1419c:	mov	sl, r2
   141a0:	and	r3, r1, #516	; 0x204
   141a4:	cmp	r3, #516	; 0x204
   141a8:	beq	14284 <__assert_fail@plt+0x2c80>
   141ac:	tst	r1, #18
   141b0:	beq	14298 <__assert_fail@plt+0x2c94>
   141b4:	mov	r1, #96	; 0x60
   141b8:	mov	r0, #1
   141bc:	bl	19878 <__assert_fail@plt+0x8274>
   141c0:	subs	r5, r0, #0
   141c4:	beq	144c0 <__assert_fail@plt+0x2ebc>
   141c8:	str	sl, [r5, #44]	; 0x2c
   141cc:	tst	r9, #2
   141d0:	streq	r9, [r5, #48]	; 0x30
   141d4:	bicne	r3, r9, #512	; 0x200
   141d8:	orrne	r3, r3, #4
   141dc:	strne	r3, [r5, #48]	; 0x30
   141e0:	mvn	r3, #99	; 0x63
   141e4:	str	r3, [r5, #32]
   141e8:	ldr	r0, [r6]
   141ec:	cmp	r0, #0
   141f0:	beq	142ac <__assert_fail@plt+0x2ca8>
   141f4:	mov	r7, r6
   141f8:	mov	r4, #0
   141fc:	bl	11460 <strlen@plt>
   14200:	cmp	r4, r0
   14204:	movcc	r4, r0
   14208:	ldr	r0, [r7, #4]!
   1420c:	cmp	r0, #0
   14210:	bne	141fc <__assert_fail@plt+0x2bf8>
   14214:	add	r1, r4, #1
   14218:	cmp	r1, #4096	; 0x1000
   1421c:	movcc	r1, #4096	; 0x1000
   14220:	mov	r0, r5
   14224:	bl	12c54 <__assert_fail@plt+0x1650>
   14228:	cmp	r0, #0
   1422c:	beq	144b4 <__assert_fail@plt+0x2eb0>
   14230:	ldr	fp, [r6]
   14234:	cmp	fp, #0
   14238:	beq	144e0 <__assert_fail@plt+0x2edc>
   1423c:	mov	r2, #0
   14240:	movw	r1, #45608	; 0xb228
   14244:	movt	r1, #1
   14248:	mov	r0, r5
   1424c:	bl	12f38 <__assert_fail@plt+0x1934>
   14250:	subs	fp, r0, #0
   14254:	beq	144ac <__assert_fail@plt+0x2ea8>
   14258:	mvn	r3, #0
   1425c:	str	r3, [fp, #48]	; 0x30
   14260:	cmp	sl, #0
   14264:	moveq	r3, #1
   14268:	bne	144e8 <__assert_fail@plt+0x2ee4>
   1426c:	b	144f0 <__assert_fail@plt+0x2eec>
   14270:	bl	11484 <__errno_location@plt>
   14274:	mov	r3, #22
   14278:	str	r3, [r0]
   1427c:	mov	r5, #0
   14280:	b	144c0 <__assert_fail@plt+0x2ebc>
   14284:	bl	11484 <__errno_location@plt>
   14288:	mov	r3, #22
   1428c:	str	r3, [r0]
   14290:	mov	r5, #0
   14294:	b	144c0 <__assert_fail@plt+0x2ebc>
   14298:	bl	11484 <__errno_location@plt>
   1429c:	mov	r3, #22
   142a0:	str	r3, [r0]
   142a4:	mov	r5, #0
   142a8:	b	144c0 <__assert_fail@plt+0x2ebc>
   142ac:	mov	r4, #0
   142b0:	b	14214 <__assert_fail@plt+0x2c10>
   142b4:	sub	r1, r0, #1
   142b8:	ldrb	r3, [r4, r1]
   142bc:	cmp	r3, #47	; 0x2f
   142c0:	bne	1434c <__assert_fail@plt+0x2d48>
   142c4:	sub	r0, r0, #2
   142c8:	add	r3, r4, r0
   142cc:	ldrb	r0, [r4, r0]
   142d0:	cmp	r0, #47	; 0x2f
   142d4:	moveq	r2, r1
   142d8:	bne	1434c <__assert_fail@plt+0x2d48>
   142dc:	ldrb	r1, [r3, #-1]!
   142e0:	cmp	r1, #47	; 0x2f
   142e4:	bne	1434c <__assert_fail@plt+0x2d48>
   142e8:	sub	r2, r2, #1
   142ec:	cmp	r2, #1
   142f0:	bhi	142dc <__assert_fail@plt+0x2cd8>
   142f4:	b	1434c <__assert_fail@plt+0x2d48>
   142f8:	mov	r2, r9
   142fc:	mov	r1, r4
   14300:	ldr	r0, [sp, #4]
   14304:	bl	12cd8 <__assert_fail@plt+0x16d4>
   14308:	strh	r0, [r4, #56]	; 0x38
   1430c:	cmp	sl, #0
   14310:	beq	143b4 <__assert_fail@plt+0x2db0>
   14314:	str	r7, [r4, #8]
   14318:	mov	r7, r4
   1431c:	add	r8, r8, #1
   14320:	ldr	r4, [r6, #4]!
   14324:	cmp	r4, #0
   14328:	beq	143cc <__assert_fail@plt+0x2dc8>
   1432c:	mov	r0, r4
   14330:	bl	11460 <strlen@plt>
   14334:	mov	r2, r0
   14338:	cmp	r0, #2
   1433c:	movls	r3, #0
   14340:	andhi	r3, r5, #1
   14344:	cmp	r3, #0
   14348:	bne	142b4 <__assert_fail@plt+0x2cb0>
   1434c:	mov	r1, r4
   14350:	ldr	r0, [sp, #4]
   14354:	bl	12f38 <__assert_fail@plt+0x1934>
   14358:	subs	r4, r0, #0
   1435c:	beq	14498 <__assert_fail@plt+0x2e94>
   14360:	str	r9, [r4, #48]	; 0x30
   14364:	str	fp, [r4, #4]
   14368:	add	r3, r4, #168	; 0xa8
   1436c:	str	r3, [r4, #24]
   14370:	ldr	r3, [sp, #8]
   14374:	cmp	r7, #0
   14378:	moveq	r3, #0
   1437c:	cmp	r3, #0
   14380:	beq	142f8 <__assert_fail@plt+0x2cf4>
   14384:	mov	r3, #11
   14388:	strh	r3, [r4, #56]	; 0x38
   1438c:	mov	r2, #2
   14390:	mov	r3, #0
   14394:	strd	r2, [r4, #112]	; 0x70
   14398:	cmp	sl, #0
   1439c:	bne	14314 <__assert_fail@plt+0x2d10>
   143a0:	str	r9, [r4, #8]
   143a4:	ldr	r3, [sp, #12]
   143a8:	str	r4, [r3, #8]
   143ac:	str	r4, [sp, #12]
   143b0:	b	1431c <__assert_fail@plt+0x2d18>
   143b4:	str	r9, [r4, #8]
   143b8:	cmp	r7, #0
   143bc:	streq	r4, [sp, #12]
   143c0:	moveq	r7, r4
   143c4:	beq	1431c <__assert_fail@plt+0x2d18>
   143c8:	b	143a4 <__assert_fail@plt+0x2da0>
   143cc:	ldr	r5, [sp, #4]
   143d0:	cmp	sl, #0
   143d4:	cmpne	r8, #1
   143d8:	bhi	14444 <__assert_fail@plt+0x2e40>
   143dc:	mov	r2, #0
   143e0:	movw	r1, #45608	; 0xb228
   143e4:	movt	r1, #1
   143e8:	mov	r0, r5
   143ec:	bl	12f38 <__assert_fail@plt+0x1934>
   143f0:	str	r0, [r5]
   143f4:	cmp	r0, #0
   143f8:	beq	1449c <__assert_fail@plt+0x2e98>
   143fc:	str	r7, [r0, #8]
   14400:	ldr	r3, [r5]
   14404:	mov	r2, #9
   14408:	strh	r2, [r3, #56]	; 0x38
   1440c:	ldr	r3, [r5]
   14410:	mov	r2, #1
   14414:	str	r2, [r3, #48]	; 0x30
   14418:	mov	r0, r5
   1441c:	bl	12fc8 <__assert_fail@plt+0x19c4>
   14420:	cmp	r0, #0
   14424:	beq	1449c <__assert_fail@plt+0x2e98>
   14428:	ldr	r3, [r5, #48]	; 0x30
   1442c:	tst	r3, #516	; 0x204
   14430:	beq	1446c <__assert_fail@plt+0x2e68>
   14434:	mvn	r1, #0
   14438:	add	r0, r5, #60	; 0x3c
   1443c:	bl	15fec <__assert_fail@plt+0x49e8>
   14440:	b	144c0 <__assert_fail@plt+0x2ebc>
   14444:	mov	r2, r8
   14448:	mov	r1, r7
   1444c:	mov	r0, r5
   14450:	bl	12e48 <__assert_fail@plt+0x1844>
   14454:	mov	r7, r0
   14458:	b	143dc <__assert_fail@plt+0x2dd8>
   1445c:	mov	r7, r4
   14460:	b	143dc <__assert_fail@plt+0x2dd8>
   14464:	mov	r7, fp
   14468:	b	143dc <__assert_fail@plt+0x2dd8>
   1446c:	movw	r1, #47216	; 0xb870
   14470:	movt	r1, #1
   14474:	mov	r0, r5
   14478:	bl	13050 <__assert_fail@plt+0x1a4c>
   1447c:	str	r0, [r5, #28]
   14480:	cmp	r0, #0
   14484:	bge	14434 <__assert_fail@plt+0x2e30>
   14488:	ldr	r3, [r5, #48]	; 0x30
   1448c:	orr	r3, r3, #4
   14490:	str	r3, [r5, #48]	; 0x30
   14494:	b	14434 <__assert_fail@plt+0x2e30>
   14498:	ldr	r5, [sp, #4]
   1449c:	mov	r0, r7
   144a0:	bl	1309c <__assert_fail@plt+0x1a98>
   144a4:	mov	r0, fp
   144a8:	bl	1a034 <__assert_fail@plt+0x8a30>
   144ac:	ldr	r0, [r5, #24]
   144b0:	bl	1a034 <__assert_fail@plt+0x8a30>
   144b4:	mov	r0, r5
   144b8:	bl	1a034 <__assert_fail@plt+0x8a30>
   144bc:	mov	r5, #0
   144c0:	mov	r0, r5
   144c4:	add	sp, sp, #20
   144c8:	ldrd	r4, [sp]
   144cc:	ldrd	r6, [sp, #8]
   144d0:	ldrd	r8, [sp, #16]
   144d4:	ldrd	sl, [sp, #24]
   144d8:	add	sp, sp, #32
   144dc:	pop	{pc}		; (ldr pc, [sp], #4)
   144e0:	cmp	sl, #0
   144e4:	beq	14464 <__assert_fail@plt+0x2e60>
   144e8:	ldr	r3, [r5, #48]	; 0x30
   144ec:	ubfx	r3, r3, #10, #1
   144f0:	str	r3, [sp, #8]
   144f4:	ldr	r4, [r6]
   144f8:	cmp	r4, #0
   144fc:	beq	1445c <__assert_fail@plt+0x2e58>
   14500:	mov	r3, #0
   14504:	mov	r7, r3
   14508:	str	r3, [sp, #12]
   1450c:	mov	r8, r3
   14510:	eor	r9, r9, #2048	; 0x800
   14514:	ubfx	r3, r9, #11, #1
   14518:	mov	r9, r7
   1451c:	str	r5, [sp, #4]
   14520:	mov	r5, r3
   14524:	b	1432c <__assert_fail@plt+0x2d28>
   14528:	strd	r4, [sp, #-16]!
   1452c:	str	r6, [sp, #8]
   14530:	str	lr, [sp, #12]
   14534:	mov	r5, r0
   14538:	ldr	r0, [r0]
   1453c:	cmp	r0, #0
   14540:	beq	14578 <__assert_fail@plt+0x2f74>
   14544:	ldr	r3, [r0, #48]	; 0x30
   14548:	cmp	r3, #0
   1454c:	blt	145c8 <__assert_fail@plt+0x2fc4>
   14550:	ldr	r4, [r0, #8]
   14554:	cmp	r4, #0
   14558:	ldreq	r4, [r0, #4]
   1455c:	bl	1a034 <__assert_fail@plt+0x8a30>
   14560:	mov	r0, r4
   14564:	ldr	r3, [r4, #48]	; 0x30
   14568:	cmp	r3, #0
   1456c:	bge	14550 <__assert_fail@plt+0x2f4c>
   14570:	mov	r0, r4
   14574:	bl	1a034 <__assert_fail@plt+0x8a30>
   14578:	ldr	r0, [r5, #4]
   1457c:	cmp	r0, #0
   14580:	beq	14588 <__assert_fail@plt+0x2f84>
   14584:	bl	1309c <__assert_fail@plt+0x1a98>
   14588:	ldr	r0, [r5, #8]
   1458c:	bl	1a034 <__assert_fail@plt+0x8a30>
   14590:	ldr	r0, [r5, #24]
   14594:	bl	1a034 <__assert_fail@plt+0x8a30>
   14598:	ldr	r3, [r5, #48]	; 0x30
   1459c:	tst	r3, #512	; 0x200
   145a0:	beq	145d0 <__assert_fail@plt+0x2fcc>
   145a4:	ldr	r0, [r5, #32]
   145a8:	cmp	r0, #0
   145ac:	blt	145d8 <__assert_fail@plt+0x2fd4>
   145b0:	bl	115d4 <close@plt>
   145b4:	cmp	r0, #0
   145b8:	beq	145d8 <__assert_fail@plt+0x2fd4>
   145bc:	bl	11484 <__errno_location@plt>
   145c0:	ldr	r4, [r0]
   145c4:	b	14658 <__assert_fail@plt+0x3054>
   145c8:	mov	r4, r0
   145cc:	b	14570 <__assert_fail@plt+0x2f6c>
   145d0:	tst	r3, #4
   145d4:	beq	14620 <__assert_fail@plt+0x301c>
   145d8:	add	r0, r5, #60	; 0x3c
   145dc:	bl	1312c <__assert_fail@plt+0x1b28>
   145e0:	ldr	r0, [r5, #52]	; 0x34
   145e4:	cmp	r0, #0
   145e8:	movne	r4, #0
   145ec:	beq	1468c <__assert_fail@plt+0x3088>
   145f0:	bl	15a90 <__assert_fail@plt+0x448c>
   145f4:	mov	r0, r5
   145f8:	bl	130ec <__assert_fail@plt+0x1ae8>
   145fc:	mov	r0, r5
   14600:	bl	1a034 <__assert_fail@plt+0x8a30>
   14604:	cmp	r4, #0
   14608:	bne	1467c <__assert_fail@plt+0x3078>
   1460c:	mov	r0, r4
   14610:	ldrd	r4, [sp]
   14614:	ldr	r6, [sp, #8]
   14618:	add	sp, sp, #12
   1461c:	pop	{pc}		; (ldr pc, [sp], #4)
   14620:	ldr	r0, [r5, #28]
   14624:	bl	11568 <fchdir@plt>
   14628:	subs	r4, r0, #0
   1462c:	beq	14638 <__assert_fail@plt+0x3034>
   14630:	bl	11484 <__errno_location@plt>
   14634:	ldr	r4, [r0]
   14638:	ldr	r0, [r5, #28]
   1463c:	bl	115d4 <close@plt>
   14640:	adds	r0, r0, #0
   14644:	movne	r0, #1
   14648:	cmp	r4, #0
   1464c:	movne	r0, #0
   14650:	cmp	r0, #0
   14654:	bne	14670 <__assert_fail@plt+0x306c>
   14658:	add	r0, r5, #60	; 0x3c
   1465c:	bl	1312c <__assert_fail@plt+0x1b28>
   14660:	ldr	r0, [r5, #52]	; 0x34
   14664:	cmp	r0, #0
   14668:	bne	145f0 <__assert_fail@plt+0x2fec>
   1466c:	b	145f4 <__assert_fail@plt+0x2ff0>
   14670:	bl	11484 <__errno_location@plt>
   14674:	ldr	r4, [r0]
   14678:	b	14658 <__assert_fail@plt+0x3054>
   1467c:	bl	11484 <__errno_location@plt>
   14680:	str	r4, [r0]
   14684:	mvn	r4, #0
   14688:	b	1460c <__assert_fail@plt+0x3008>
   1468c:	mov	r0, r5
   14690:	bl	130ec <__assert_fail@plt+0x1ae8>
   14694:	mov	r0, r5
   14698:	bl	1a034 <__assert_fail@plt+0x8a30>
   1469c:	mov	r4, #0
   146a0:	b	1460c <__assert_fail@plt+0x3008>
   146a4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   146a8:	strd	r6, [sp, #8]
   146ac:	str	r8, [sp, #16]
   146b0:	str	lr, [sp, #20]
   146b4:	ldr	r5, [r0]
   146b8:	cmp	r5, #0
   146bc:	beq	14d1c <__assert_fail@plt+0x3718>
   146c0:	ldr	r3, [r0, #48]	; 0x30
   146c4:	tst	r3, #8192	; 0x2000
   146c8:	bne	14d18 <__assert_fail@plt+0x3714>
   146cc:	mov	r8, r0
   146d0:	ldrh	r3, [r5, #60]	; 0x3c
   146d4:	mov	r2, #3
   146d8:	strh	r2, [r5, #60]	; 0x3c
   146dc:	cmp	r3, #1
   146e0:	beq	1475c <__assert_fail@plt+0x3158>
   146e4:	cmp	r3, #2
   146e8:	beq	14770 <__assert_fail@plt+0x316c>
   146ec:	ldrh	r2, [r5, #56]	; 0x38
   146f0:	cmp	r2, #1
   146f4:	bne	149f0 <__assert_fail@plt+0x33ec>
   146f8:	cmp	r3, #4
   146fc:	beq	14720 <__assert_fail@plt+0x311c>
   14700:	ldr	r1, [r8, #48]	; 0x30
   14704:	tst	r1, #64	; 0x40
   14708:	beq	14804 <__assert_fail@plt+0x3200>
   1470c:	ldrd	r6, [r5, #64]	; 0x40
   14710:	ldrd	r2, [r8, #16]
   14714:	cmp	r7, r3
   14718:	cmpeq	r6, r2
   1471c:	beq	14804 <__assert_fail@plt+0x3200>
   14720:	ldrh	r3, [r5, #58]	; 0x3a
   14724:	tst	r3, #2
   14728:	bne	147f8 <__assert_fail@plt+0x31f4>
   1472c:	ldr	r0, [r8, #4]
   14730:	cmp	r0, #0
   14734:	beq	14744 <__assert_fail@plt+0x3140>
   14738:	bl	1309c <__assert_fail@plt+0x1a98>
   1473c:	mov	r3, #0
   14740:	str	r3, [r8, #4]
   14744:	mov	r3, #6
   14748:	strh	r3, [r5, #56]	; 0x38
   1474c:	mov	r1, r5
   14750:	mov	r0, r8
   14754:	bl	13668 <__assert_fail@plt+0x2064>
   14758:	b	14d1c <__assert_fail@plt+0x3718>
   1475c:	mov	r2, #0
   14760:	mov	r1, r5
   14764:	bl	12cd8 <__assert_fail@plt+0x16d4>
   14768:	strh	r0, [r5, #56]	; 0x38
   1476c:	b	14d1c <__assert_fail@plt+0x3718>
   14770:	ldrh	r2, [r5, #56]	; 0x38
   14774:	sub	r3, r2, #12
   14778:	uxth	r3, r3
   1477c:	cmp	r3, #1
   14780:	bls	14790 <__assert_fail@plt+0x318c>
   14784:	cmp	r2, #1
   14788:	bne	149f0 <__assert_fail@plt+0x33ec>
   1478c:	b	14700 <__assert_fail@plt+0x30fc>
   14790:	mov	r2, #1
   14794:	mov	r1, r5
   14798:	bl	12cd8 <__assert_fail@plt+0x16d4>
   1479c:	strh	r0, [r5, #56]	; 0x38
   147a0:	cmp	r0, #1
   147a4:	bne	14880 <__assert_fail@plt+0x327c>
   147a8:	ldr	r3, [r8, #48]	; 0x30
   147ac:	tst	r3, #4
   147b0:	bne	14880 <__assert_fail@plt+0x327c>
   147b4:	movw	r1, #47216	; 0xb870
   147b8:	movt	r1, #1
   147bc:	mov	r0, r8
   147c0:	bl	13050 <__assert_fail@plt+0x1a4c>
   147c4:	str	r0, [r5, #36]	; 0x24
   147c8:	cmp	r0, #0
   147cc:	blt	147e0 <__assert_fail@plt+0x31dc>
   147d0:	ldrh	r3, [r5, #58]	; 0x3a
   147d4:	orr	r3, r3, #2
   147d8:	strh	r3, [r5, #58]	; 0x3a
   147dc:	b	14880 <__assert_fail@plt+0x327c>
   147e0:	bl	11484 <__errno_location@plt>
   147e4:	ldr	r3, [r0]
   147e8:	str	r3, [r5, #32]
   147ec:	mov	r3, #7
   147f0:	strh	r3, [r5, #56]	; 0x38
   147f4:	b	14880 <__assert_fail@plt+0x327c>
   147f8:	ldr	r0, [r5, #36]	; 0x24
   147fc:	bl	115d4 <close@plt>
   14800:	b	1472c <__assert_fail@plt+0x3128>
   14804:	ldr	r0, [r8, #4]
   14808:	cmp	r0, #0
   1480c:	beq	148e8 <__assert_fail@plt+0x32e4>
   14810:	tst	r1, #4096	; 0x1000
   14814:	bne	148d4 <__assert_fail@plt+0x32d0>
   14818:	ldr	r3, [r5, #24]
   1481c:	mvn	r2, #0
   14820:	mov	r1, r5
   14824:	mov	r0, r8
   14828:	bl	1345c <__assert_fail@plt+0x1e58>
   1482c:	cmp	r0, #0
   14830:	bne	1493c <__assert_fail@plt+0x3338>
   14834:	ldr	r5, [r8, #4]
   14838:	mov	r3, #0
   1483c:	str	r3, [r8, #4]
   14840:	ldr	r2, [r8, #24]
   14844:	ldr	r0, [r5, #4]
   14848:	ldr	r1, [r0, #40]	; 0x28
   1484c:	sub	r3, r1, #1
   14850:	ldr	r0, [r0, #28]
   14854:	ldrb	r0, [r0, r3]
   14858:	cmp	r0, #47	; 0x2f
   1485c:	movne	r3, r1
   14860:	add	r0, r2, r3
   14864:	mov	r1, #47	; 0x2f
   14868:	strb	r1, [r2, r3]
   1486c:	ldr	r2, [r5, #52]	; 0x34
   14870:	add	r2, r2, #1
   14874:	add	r1, r5, #168	; 0xa8
   14878:	add	r0, r0, #1
   1487c:	bl	1128c <memmove@plt>
   14880:	str	r5, [r8]
   14884:	ldrh	r3, [r5, #56]	; 0x38
   14888:	cmp	r3, #11
   1488c:	beq	14c10 <__assert_fail@plt+0x360c>
   14890:	ldrh	r3, [r5, #56]	; 0x38
   14894:	cmp	r3, #1
   14898:	bne	14d1c <__assert_fail@plt+0x3718>
   1489c:	ldr	r3, [r5, #48]	; 0x30
   148a0:	cmp	r3, #0
   148a4:	ldrdeq	r2, [r5, #64]	; 0x40
   148a8:	strdeq	r2, [r8, #16]
   148ac:	mov	r1, r5
   148b0:	mov	r0, r8
   148b4:	bl	13298 <__assert_fail@plt+0x1c94>
   148b8:	cmp	r0, #0
   148bc:	bne	14d1c <__assert_fail@plt+0x3718>
   148c0:	bl	11484 <__errno_location@plt>
   148c4:	mov	r3, #12
   148c8:	str	r3, [r0]
   148cc:	mov	r5, #0
   148d0:	b	14d1c <__assert_fail@plt+0x3718>
   148d4:	bic	r1, r1, #4096	; 0x1000
   148d8:	str	r1, [r8, #48]	; 0x30
   148dc:	bl	1309c <__assert_fail@plt+0x1a98>
   148e0:	mov	r3, #0
   148e4:	str	r3, [r8, #4]
   148e8:	mov	r1, #3
   148ec:	mov	r0, r8
   148f0:	bl	1372c <__assert_fail@plt+0x2128>
   148f4:	str	r0, [r8, #4]
   148f8:	cmp	r0, #0
   148fc:	bne	14834 <__assert_fail@plt+0x3230>
   14900:	ldr	r3, [r8, #48]	; 0x30
   14904:	tst	r3, #8192	; 0x2000
   14908:	movne	r5, r0
   1490c:	bne	14d1c <__assert_fail@plt+0x3718>
   14910:	ldr	r3, [r5, #32]
   14914:	cmp	r3, #0
   14918:	beq	1492c <__assert_fail@plt+0x3328>
   1491c:	ldrh	r3, [r5, #56]	; 0x38
   14920:	cmp	r3, #4
   14924:	movne	r3, #7
   14928:	strhne	r3, [r5, #56]	; 0x38
   1492c:	mov	r1, r5
   14930:	mov	r0, r8
   14934:	bl	13668 <__assert_fail@plt+0x2064>
   14938:	b	14d1c <__assert_fail@plt+0x3718>
   1493c:	bl	11484 <__errno_location@plt>
   14940:	ldr	r3, [r0]
   14944:	str	r3, [r5, #32]
   14948:	ldrh	r3, [r5, #58]	; 0x3a
   1494c:	orr	r3, r3, #1
   14950:	strh	r3, [r5, #58]	; 0x3a
   14954:	ldr	r3, [r8, #4]
   14958:	cmp	r3, #0
   1495c:	beq	14834 <__assert_fail@plt+0x3230>
   14960:	ldr	r2, [r3, #4]
   14964:	ldr	r2, [r2, #24]
   14968:	str	r2, [r3, #24]
   1496c:	ldr	r3, [r3, #8]
   14970:	cmp	r3, #0
   14974:	bne	14960 <__assert_fail@plt+0x335c>
   14978:	b	14834 <__assert_fail@plt+0x3230>
   1497c:	str	r3, [r8]
   14980:	ldr	r2, [r8, #24]
   14984:	ldr	r3, [r3, #40]	; 0x28
   14988:	mov	r1, #0
   1498c:	strb	r1, [r2, r3]
   14990:	mov	r1, #3
   14994:	mov	r0, r8
   14998:	bl	1372c <__assert_fail@plt+0x2128>
   1499c:	subs	r6, r0, #0
   149a0:	bne	149b8 <__assert_fail@plt+0x33b4>
   149a4:	ldr	r3, [r8, #48]	; 0x30
   149a8:	tst	r3, #8192	; 0x2000
   149ac:	beq	14a0c <__assert_fail@plt+0x3408>
   149b0:	mov	r5, r6
   149b4:	b	14d1c <__assert_fail@plt+0x3718>
   149b8:	mov	r0, r5
   149bc:	bl	1a034 <__assert_fail@plt+0x8a30>
   149c0:	mov	r5, r6
   149c4:	b	14840 <__assert_fail@plt+0x323c>
   149c8:	str	r4, [r8]
   149cc:	mov	r0, r5
   149d0:	bl	1a034 <__assert_fail@plt+0x8a30>
   149d4:	ldr	r3, [r4, #48]	; 0x30
   149d8:	cmp	r3, #0
   149dc:	beq	14ad4 <__assert_fail@plt+0x34d0>
   149e0:	ldrh	r3, [r4, #60]	; 0x3c
   149e4:	mov	r5, r4
   149e8:	cmp	r3, #4
   149ec:	bne	14b88 <__assert_fail@plt+0x3584>
   149f0:	ldr	r4, [r5, #8]
   149f4:	cmp	r4, #0
   149f8:	bne	149c8 <__assert_fail@plt+0x33c4>
   149fc:	ldr	r3, [r5, #4]
   14a00:	ldr	r2, [r3, #12]
   14a04:	cmp	r2, #0
   14a08:	bne	1497c <__assert_fail@plt+0x3378>
   14a0c:	ldr	r6, [r5, #4]
   14a10:	str	r6, [r8]
   14a14:	mov	r0, r5
   14a18:	bl	1a034 <__assert_fail@plt+0x8a30>
   14a1c:	ldr	r3, [r6, #48]	; 0x30
   14a20:	cmn	r3, #1
   14a24:	beq	14c48 <__assert_fail@plt+0x3644>
   14a28:	ldrh	r3, [r6, #56]	; 0x38
   14a2c:	cmp	r3, #11
   14a30:	beq	14c68 <__assert_fail@plt+0x3664>
   14a34:	ldr	r2, [r8, #24]
   14a38:	ldr	r3, [r6, #40]	; 0x28
   14a3c:	mov	r1, #0
   14a40:	strb	r1, [r2, r3]
   14a44:	ldr	r3, [r6, #48]	; 0x30
   14a48:	cmp	r3, r1
   14a4c:	beq	14c6c <__assert_fail@plt+0x3668>
   14a50:	ldrh	r3, [r6, #58]	; 0x3a
   14a54:	tst	r3, #2
   14a58:	beq	14cd4 <__assert_fail@plt+0x36d0>
   14a5c:	ldr	r3, [r8, #48]	; 0x30
   14a60:	tst	r3, #4
   14a64:	bne	14a80 <__assert_fail@plt+0x347c>
   14a68:	tst	r3, #512	; 0x200
   14a6c:	beq	14ca8 <__assert_fail@plt+0x36a4>
   14a70:	mov	r2, #1
   14a74:	ldr	r1, [r6, #36]	; 0x24
   14a78:	mov	r0, r8
   14a7c:	bl	13360 <__assert_fail@plt+0x1d5c>
   14a80:	ldr	r0, [r6, #36]	; 0x24
   14a84:	bl	115d4 <close@plt>
   14a88:	ldrh	r3, [r6, #56]	; 0x38
   14a8c:	cmp	r3, #2
   14a90:	beq	14abc <__assert_fail@plt+0x34b8>
   14a94:	ldr	r3, [r6, #32]
   14a98:	cmp	r3, #0
   14a9c:	movne	r3, #7
   14aa0:	strhne	r3, [r6, #56]	; 0x38
   14aa4:	bne	14abc <__assert_fail@plt+0x34b8>
   14aa8:	mov	r3, #6
   14aac:	strh	r3, [r6, #56]	; 0x38
   14ab0:	mov	r1, r6
   14ab4:	mov	r0, r8
   14ab8:	bl	13668 <__assert_fail@plt+0x2064>
   14abc:	ldr	r5, [r8, #48]	; 0x30
   14ac0:	and	r5, r5, #8192	; 0x2000
   14ac4:	cmp	r5, #0
   14ac8:	moveq	r5, r6
   14acc:	movne	r5, r4
   14ad0:	b	14d1c <__assert_fail@plt+0x3718>
   14ad4:	mov	r0, r8
   14ad8:	bl	133f8 <__assert_fail@plt+0x1df4>
   14adc:	cmp	r0, #0
   14ae0:	bne	14b64 <__assert_fail@plt+0x3560>
   14ae4:	mov	r0, r8
   14ae8:	bl	130ec <__assert_fail@plt+0x1ae8>
   14aec:	ldr	r2, [r4, #52]	; 0x34
   14af0:	str	r2, [r4, #40]	; 0x28
   14af4:	add	r5, r4, #168	; 0xa8
   14af8:	add	r2, r2, #1
   14afc:	mov	r1, r5
   14b00:	ldr	r0, [r8, #24]
   14b04:	bl	1128c <memmove@plt>
   14b08:	mov	r1, #47	; 0x2f
   14b0c:	mov	r0, r5
   14b10:	bl	1152c <strrchr@plt>
   14b14:	cmp	r0, #0
   14b18:	beq	14b48 <__assert_fail@plt+0x3544>
   14b1c:	cmp	r5, r0
   14b20:	beq	14b78 <__assert_fail@plt+0x3574>
   14b24:	add	r6, r0, #1
   14b28:	mov	r0, r6
   14b2c:	bl	11460 <strlen@plt>
   14b30:	mov	r7, r0
   14b34:	add	r2, r0, #1
   14b38:	mov	r1, r6
   14b3c:	mov	r0, r5
   14b40:	bl	1128c <memmove@plt>
   14b44:	str	r7, [r4, #52]	; 0x34
   14b48:	ldr	r3, [r8, #24]
   14b4c:	str	r3, [r4, #28]
   14b50:	str	r3, [r4, #24]
   14b54:	mov	r0, r8
   14b58:	bl	12fc8 <__assert_fail@plt+0x19c4>
   14b5c:	mov	r5, r4
   14b60:	b	14880 <__assert_fail@plt+0x327c>
   14b64:	ldr	r3, [r8, #48]	; 0x30
   14b68:	orr	r3, r3, #8192	; 0x2000
   14b6c:	str	r3, [r8, #48]	; 0x30
   14b70:	mov	r5, #0
   14b74:	b	14d1c <__assert_fail@plt+0x3718>
   14b78:	ldrb	r3, [r0, #1]
   14b7c:	cmp	r3, #0
   14b80:	beq	14b48 <__assert_fail@plt+0x3544>
   14b84:	b	14b24 <__assert_fail@plt+0x3520>
   14b88:	cmp	r3, #2
   14b8c:	movne	r5, r4
   14b90:	bne	14840 <__assert_fail@plt+0x323c>
   14b94:	mov	r2, #1
   14b98:	mov	r1, r4
   14b9c:	mov	r0, r8
   14ba0:	bl	12cd8 <__assert_fail@plt+0x16d4>
   14ba4:	strh	r0, [r4, #56]	; 0x38
   14ba8:	cmp	r0, #1
   14bac:	beq	14bc0 <__assert_fail@plt+0x35bc>
   14bb0:	mov	r3, #3
   14bb4:	strh	r3, [r4, #60]	; 0x3c
   14bb8:	mov	r5, r4
   14bbc:	b	14840 <__assert_fail@plt+0x323c>
   14bc0:	ldr	r3, [r8, #48]	; 0x30
   14bc4:	tst	r3, #4
   14bc8:	bne	14bb0 <__assert_fail@plt+0x35ac>
   14bcc:	movw	r1, #47216	; 0xb870
   14bd0:	movt	r1, #1
   14bd4:	mov	r0, r8
   14bd8:	bl	13050 <__assert_fail@plt+0x1a4c>
   14bdc:	str	r0, [r4, #36]	; 0x24
   14be0:	cmp	r0, #0
   14be4:	blt	14bf8 <__assert_fail@plt+0x35f4>
   14be8:	ldrh	r3, [r4, #58]	; 0x3a
   14bec:	orr	r3, r3, #2
   14bf0:	strh	r3, [r4, #58]	; 0x3a
   14bf4:	b	14bb0 <__assert_fail@plt+0x35ac>
   14bf8:	bl	11484 <__errno_location@plt>
   14bfc:	ldr	r3, [r0]
   14c00:	str	r3, [r4, #32]
   14c04:	mov	r3, #7
   14c08:	strh	r3, [r4, #56]	; 0x38
   14c0c:	b	14bb0 <__assert_fail@plt+0x35ac>
   14c10:	ldrd	r2, [r5, #112]	; 0x70
   14c14:	cmp	r3, #0
   14c18:	cmpeq	r2, #2
   14c1c:	beq	14c30 <__assert_fail@plt+0x362c>
   14c20:	cmp	r3, #0
   14c24:	cmpeq	r2, #1
   14c28:	beq	14d1c <__assert_fail@plt+0x3718>
   14c2c:	bl	115c8 <abort@plt>
   14c30:	mov	r2, #0
   14c34:	mov	r1, r5
   14c38:	mov	r0, r8
   14c3c:	bl	12cd8 <__assert_fail@plt+0x16d4>
   14c40:	strh	r0, [r5, #56]	; 0x38
   14c44:	b	14890 <__assert_fail@plt+0x328c>
   14c48:	mov	r0, r6
   14c4c:	bl	1a034 <__assert_fail@plt+0x8a30>
   14c50:	bl	11484 <__errno_location@plt>
   14c54:	mov	r3, #0
   14c58:	str	r3, [r0]
   14c5c:	str	r3, [r8]
   14c60:	mov	r5, r4
   14c64:	b	14d1c <__assert_fail@plt+0x3718>
   14c68:	bl	115c8 <abort@plt>
   14c6c:	mov	r0, r8
   14c70:	bl	133f8 <__assert_fail@plt+0x1df4>
   14c74:	cmp	r0, #0
   14c78:	beq	14a88 <__assert_fail@plt+0x3484>
   14c7c:	bl	11484 <__errno_location@plt>
   14c80:	ldr	r3, [r0]
   14c84:	str	r3, [r6, #32]
   14c88:	ldr	r3, [r8, #48]	; 0x30
   14c8c:	orr	r3, r3, #8192	; 0x2000
   14c90:	str	r3, [r8, #48]	; 0x30
   14c94:	ldrh	r3, [r6, #56]	; 0x38
   14c98:	cmp	r3, #2
   14c9c:	moveq	r5, r4
   14ca0:	bne	14a94 <__assert_fail@plt+0x3490>
   14ca4:	b	14d1c <__assert_fail@plt+0x3718>
   14ca8:	ldr	r0, [r6, #36]	; 0x24
   14cac:	bl	11568 <fchdir@plt>
   14cb0:	cmp	r0, #0
   14cb4:	beq	14a80 <__assert_fail@plt+0x347c>
   14cb8:	bl	11484 <__errno_location@plt>
   14cbc:	ldr	r3, [r0]
   14cc0:	str	r3, [r6, #32]
   14cc4:	ldr	r3, [r8, #48]	; 0x30
   14cc8:	orr	r3, r3, #8192	; 0x2000
   14ccc:	str	r3, [r8, #48]	; 0x30
   14cd0:	b	14a80 <__assert_fail@plt+0x347c>
   14cd4:	tst	r3, #1
   14cd8:	bne	14a88 <__assert_fail@plt+0x3484>
   14cdc:	movw	r3, #47212	; 0xb86c
   14ce0:	movt	r3, #1
   14ce4:	mvn	r2, #0
   14ce8:	ldr	r1, [r6, #4]
   14cec:	mov	r0, r8
   14cf0:	bl	1345c <__assert_fail@plt+0x1e58>
   14cf4:	cmp	r0, #0
   14cf8:	beq	14a88 <__assert_fail@plt+0x3484>
   14cfc:	bl	11484 <__errno_location@plt>
   14d00:	ldr	r3, [r0]
   14d04:	str	r3, [r6, #32]
   14d08:	ldr	r3, [r8, #48]	; 0x30
   14d0c:	orr	r3, r3, #8192	; 0x2000
   14d10:	str	r3, [r8, #48]	; 0x30
   14d14:	b	14c94 <__assert_fail@plt+0x3690>
   14d18:	mov	r5, #0
   14d1c:	mov	r0, r5
   14d20:	ldrd	r4, [sp]
   14d24:	ldrd	r6, [sp, #8]
   14d28:	ldr	r8, [sp, #16]
   14d2c:	add	sp, sp, #20
   14d30:	pop	{pc}		; (ldr pc, [sp], #4)
   14d34:	cmp	r2, #4
   14d38:	bhi	14d48 <__assert_fail@plt+0x3744>
   14d3c:	strh	r2, [r1, #60]	; 0x3c
   14d40:	mov	r0, #0
   14d44:	bx	lr
   14d48:	str	r4, [sp, #-8]!
   14d4c:	str	lr, [sp, #4]
   14d50:	bl	11484 <__errno_location@plt>
   14d54:	mov	r3, #22
   14d58:	str	r3, [r0]
   14d5c:	mov	r0, #1
   14d60:	ldr	r4, [sp]
   14d64:	add	sp, sp, #4
   14d68:	pop	{pc}		; (ldr pc, [sp], #4)
   14d6c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14d70:	strd	r6, [sp, #8]
   14d74:	str	r8, [sp, #16]
   14d78:	str	lr, [sp, #20]
   14d7c:	bics	r3, r1, #4096	; 0x1000
   14d80:	bne	14e30 <__assert_fail@plt+0x382c>
   14d84:	mov	r4, r0
   14d88:	mov	r5, r1
   14d8c:	ldr	r6, [r0]
   14d90:	bl	11484 <__errno_location@plt>
   14d94:	mov	r7, r0
   14d98:	mov	r3, #0
   14d9c:	str	r3, [r0]
   14da0:	ldr	r3, [r4, #48]	; 0x30
   14da4:	tst	r3, #8192	; 0x2000
   14da8:	movne	r0, #0
   14dac:	bne	14e1c <__assert_fail@plt+0x3818>
   14db0:	ldrh	r3, [r6, #56]	; 0x38
   14db4:	cmp	r3, #9
   14db8:	beq	14e44 <__assert_fail@plt+0x3840>
   14dbc:	cmp	r3, #1
   14dc0:	movne	r0, #0
   14dc4:	bne	14e1c <__assert_fail@plt+0x3818>
   14dc8:	ldr	r0, [r4, #4]
   14dcc:	cmp	r0, #0
   14dd0:	beq	14dd8 <__assert_fail@plt+0x37d4>
   14dd4:	bl	1309c <__assert_fail@plt+0x1a98>
   14dd8:	cmp	r5, #4096	; 0x1000
   14ddc:	movne	r5, #1
   14de0:	beq	14e4c <__assert_fail@plt+0x3848>
   14de4:	ldr	r3, [r6, #48]	; 0x30
   14de8:	cmp	r3, #0
   14dec:	bne	14e0c <__assert_fail@plt+0x3808>
   14df0:	ldr	r3, [r6, #24]
   14df4:	ldrb	r3, [r3]
   14df8:	cmp	r3, #47	; 0x2f
   14dfc:	beq	14e0c <__assert_fail@plt+0x3808>
   14e00:	ldr	r3, [r4, #48]	; 0x30
   14e04:	tst	r3, #4
   14e08:	beq	14e60 <__assert_fail@plt+0x385c>
   14e0c:	mov	r1, r5
   14e10:	mov	r0, r4
   14e14:	bl	1372c <__assert_fail@plt+0x2128>
   14e18:	str	r0, [r4, #4]
   14e1c:	ldrd	r4, [sp]
   14e20:	ldrd	r6, [sp, #8]
   14e24:	ldr	r8, [sp, #16]
   14e28:	add	sp, sp, #20
   14e2c:	pop	{pc}		; (ldr pc, [sp], #4)
   14e30:	bl	11484 <__errno_location@plt>
   14e34:	mov	r3, #22
   14e38:	str	r3, [r0]
   14e3c:	mov	r0, #0
   14e40:	b	14e1c <__assert_fail@plt+0x3818>
   14e44:	ldr	r0, [r6, #8]
   14e48:	b	14e1c <__assert_fail@plt+0x3818>
   14e4c:	ldr	r3, [r4, #48]	; 0x30
   14e50:	orr	r3, r3, #4096	; 0x1000
   14e54:	str	r3, [r4, #48]	; 0x30
   14e58:	mov	r5, #2
   14e5c:	b	14de4 <__assert_fail@plt+0x37e0>
   14e60:	movw	r1, #47216	; 0xb870
   14e64:	movt	r1, #1
   14e68:	mov	r0, r4
   14e6c:	bl	13050 <__assert_fail@plt+0x1a4c>
   14e70:	subs	r6, r0, #0
   14e74:	movlt	r0, #0
   14e78:	strlt	r0, [r4, #4]
   14e7c:	blt	14e1c <__assert_fail@plt+0x3818>
   14e80:	mov	r1, r5
   14e84:	mov	r0, r4
   14e88:	bl	1372c <__assert_fail@plt+0x2128>
   14e8c:	str	r0, [r4, #4]
   14e90:	ldr	r3, [r4, #48]	; 0x30
   14e94:	tst	r3, #512	; 0x200
   14e98:	beq	14eb4 <__assert_fail@plt+0x38b0>
   14e9c:	mov	r2, #1
   14ea0:	mov	r1, r6
   14ea4:	mov	r0, r4
   14ea8:	bl	13360 <__assert_fail@plt+0x1d5c>
   14eac:	ldr	r0, [r4, #4]
   14eb0:	b	14e1c <__assert_fail@plt+0x3818>
   14eb4:	mov	r0, r6
   14eb8:	bl	11568 <fchdir@plt>
   14ebc:	cmp	r0, #0
   14ec0:	bne	14ed0 <__assert_fail@plt+0x38cc>
   14ec4:	mov	r0, r6
   14ec8:	bl	115d4 <close@plt>
   14ecc:	b	14eac <__assert_fail@plt+0x38a8>
   14ed0:	ldr	r4, [r7]
   14ed4:	mov	r0, r6
   14ed8:	bl	115d4 <close@plt>
   14edc:	str	r4, [r7]
   14ee0:	mov	r0, #0
   14ee4:	b	14e1c <__assert_fail@plt+0x3818>
   14ee8:	ror	r0, r0, #3
   14eec:	udiv	r3, r0, r1
   14ef0:	mls	r0, r3, r1, r0
   14ef4:	bx	lr
   14ef8:	cmp	r1, r0
   14efc:	movne	r0, #0
   14f00:	moveq	r0, #1
   14f04:	bx	lr
   14f08:	ldr	r2, [r0, #20]
   14f0c:	movw	r3, #47220	; 0xb874
   14f10:	movt	r3, #1
   14f14:	cmp	r2, r3
   14f18:	beq	14fb4 <__assert_fail@plt+0x39b0>
   14f1c:	vldr	s15, [r2, #8]
   14f20:	vldr	s14, [pc, #148]	; 14fbc <__assert_fail@plt+0x39b8>
   14f24:	vcmpe.f32	s15, s14
   14f28:	vmrs	APSR_nzcv, fpscr
   14f2c:	ble	14f8c <__assert_fail@plt+0x3988>
   14f30:	vldr	s14, [pc, #136]	; 14fc0 <__assert_fail@plt+0x39bc>
   14f34:	vcmpe.f32	s15, s14
   14f38:	vmrs	APSR_nzcv, fpscr
   14f3c:	bpl	14f8c <__assert_fail@plt+0x3988>
   14f40:	vldr	s13, [r2, #12]
   14f44:	vldr	s14, [pc, #120]	; 14fc4 <__assert_fail@plt+0x39c0>
   14f48:	vcmpe.f32	s13, s14
   14f4c:	vmrs	APSR_nzcv, fpscr
   14f50:	ble	14f8c <__assert_fail@plt+0x3988>
   14f54:	vldr	s14, [r2]
   14f58:	vcmpe.f32	s14, #0.0
   14f5c:	vmrs	APSR_nzcv, fpscr
   14f60:	blt	14f8c <__assert_fail@plt+0x3988>
   14f64:	vldr	s13, [pc, #80]	; 14fbc <__assert_fail@plt+0x39b8>
   14f68:	vadd.f32	s14, s14, s13
   14f6c:	vldr	s13, [r2, #4]
   14f70:	vcmpe.f32	s14, s13
   14f74:	vmrs	APSR_nzcv, fpscr
   14f78:	bpl	14f8c <__assert_fail@plt+0x3988>
   14f7c:	vldr	s12, [pc, #68]	; 14fc8 <__assert_fail@plt+0x39c4>
   14f80:	vcmpe.f32	s13, s12
   14f84:	vmrs	APSR_nzcv, fpscr
   14f88:	bls	14fa0 <__assert_fail@plt+0x399c>
   14f8c:	movw	r3, #47220	; 0xb874
   14f90:	movt	r3, #1
   14f94:	str	r3, [r0, #20]
   14f98:	mov	r0, #0
   14f9c:	bx	lr
   14fa0:	vcmpe.f32	s15, s14
   14fa4:	vmrs	APSR_nzcv, fpscr
   14fa8:	ble	14f8c <__assert_fail@plt+0x3988>
   14fac:	mov	r0, #1
   14fb0:	bx	lr
   14fb4:	mov	r0, #1
   14fb8:	bx	lr
   14fbc:	stclcc	12, cr12, [ip, #820]	; 0x334
   14fc0:	svccc	0x00666666
   14fc4:	svccc	0x008ccccd
   14fc8:	svccc	0x00800000
   14fcc:	ldrb	r3, [r1, #16]
   14fd0:	cmp	r3, #0
   14fd4:	bne	15000 <__assert_fail@plt+0x39fc>
   14fd8:	vmov	s15, r0
   14fdc:	vcvt.f32.u32	s15, s15
   14fe0:	vldr	s13, [r1, #8]
   14fe4:	vdiv.f32	s14, s15, s13
   14fe8:	vldr	s15, [pc, #224]	; 150d0 <__assert_fail@plt+0x3acc>
   14fec:	vcmpe.f32	s14, s15
   14ff0:	vmrs	APSR_nzcv, fpscr
   14ff4:	bge	150c0 <__assert_fail@plt+0x3abc>
   14ff8:	vcvt.u32.f32	s15, s14
   14ffc:	vmov	r0, s15
   15000:	cmp	r0, #10
   15004:	movcc	r0, #10
   15008:	orr	r0, r0, #1
   1500c:	cmn	r0, #1
   15010:	beq	15024 <__assert_fail@plt+0x3a20>
   15014:	push	{lr}		; (str lr, [sp, #-4]!)
   15018:	movw	lr, #43691	; 0xaaab
   1501c:	movt	lr, #43690	; 0xaaaa
   15020:	b	1504c <__assert_fail@plt+0x3a48>
   15024:	mov	r0, #0
   15028:	bx	lr
   1502c:	mov	r3, #3
   15030:	udiv	r2, r0, r3
   15034:	mls	r3, r3, r2, r0
   15038:	cmp	r3, #0
   1503c:	bne	1509c <__assert_fail@plt+0x3a98>
   15040:	add	r0, r0, #2
   15044:	cmn	r0, #1
   15048:	beq	150c8 <__assert_fail@plt+0x3ac4>
   1504c:	cmp	r0, #9
   15050:	bls	1502c <__assert_fail@plt+0x3a28>
   15054:	umull	r2, r3, lr, r0
   15058:	lsr	r3, r3, #1
   1505c:	add	r3, r3, r3, lsl #1
   15060:	cmp	r0, r3
   15064:	beq	15040 <__assert_fail@plt+0x3a3c>
   15068:	mov	r1, #16
   1506c:	mov	r2, #9
   15070:	mov	r3, #3
   15074:	add	r2, r2, r1
   15078:	add	r3, r3, #2
   1507c:	cmp	r2, r0
   15080:	bcs	15030 <__assert_fail@plt+0x3a2c>
   15084:	add	r1, r1, #8
   15088:	udiv	ip, r0, r3
   1508c:	mls	ip, r3, ip, r0
   15090:	cmp	ip, #0
   15094:	bne	15074 <__assert_fail@plt+0x3a70>
   15098:	b	15040 <__assert_fail@plt+0x3a3c>
   1509c:	lsl	r2, r0, #2
   150a0:	lsr	r3, r0, #30
   150a4:	adds	r3, r3, #0
   150a8:	movne	r3, #1
   150ac:	cmp	r2, #0
   150b0:	movlt	r3, #1
   150b4:	cmp	r3, #0
   150b8:	movne	r0, #0
   150bc:	pop	{pc}		; (ldr pc, [sp], #4)
   150c0:	mov	r0, #0
   150c4:	bx	lr
   150c8:	mov	r0, #0
   150cc:	b	150bc <__assert_fail@plt+0x3ab8>
   150d0:	svcmi	0x00800000
   150d4:	str	r4, [sp, #-8]!
   150d8:	str	lr, [sp, #4]
   150dc:	mov	r4, r0
   150e0:	mov	r0, r1
   150e4:	ldr	r3, [r4, #24]
   150e8:	ldr	r1, [r4, #8]
   150ec:	blx	r3
   150f0:	ldr	r3, [r4, #8]
   150f4:	cmp	r3, r0
   150f8:	bls	15110 <__assert_fail@plt+0x3b0c>
   150fc:	ldr	r3, [r4]
   15100:	add	r0, r3, r0, lsl #3
   15104:	ldr	r4, [sp]
   15108:	add	sp, sp, #4
   1510c:	pop	{pc}		; (ldr pc, [sp], #4)
   15110:	bl	115c8 <abort@plt>
   15114:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15118:	strd	r6, [sp, #8]
   1511c:	strd	r8, [sp, #16]
   15120:	strd	sl, [sp, #24]
   15124:	str	lr, [sp, #32]
   15128:	sub	sp, sp, #4
   1512c:	ldr	r7, [r1]
   15130:	ldr	r3, [r1, #4]
   15134:	cmp	r7, r3
   15138:	bcs	15290 <__assert_fail@plt+0x3c8c>
   1513c:	mov	fp, r2
   15140:	mov	r9, r1
   15144:	mov	r6, r0
   15148:	add	r7, r7, #8
   1514c:	mov	sl, #0
   15150:	b	15224 <__assert_fail@plt+0x3c20>
   15154:	str	r5, [r0]
   15158:	ldr	r2, [r6, #12]
   1515c:	add	r2, r2, #1
   15160:	str	r2, [r6, #12]
   15164:	str	sl, [r4]
   15168:	ldr	r2, [r6, #36]	; 0x24
   1516c:	str	r2, [r4, #4]
   15170:	str	r4, [r6, #36]	; 0x24
   15174:	mov	r4, r3
   15178:	cmp	r3, #0
   1517c:	beq	151b0 <__assert_fail@plt+0x3bac>
   15180:	ldr	r5, [r4]
   15184:	mov	r1, r5
   15188:	mov	r0, r6
   1518c:	bl	150d4 <__assert_fail@plt+0x3ad0>
   15190:	ldr	r3, [r4, #4]
   15194:	ldr	r2, [r0]
   15198:	cmp	r2, #0
   1519c:	beq	15154 <__assert_fail@plt+0x3b50>
   151a0:	ldr	r2, [r0, #4]
   151a4:	str	r2, [r4, #4]
   151a8:	str	r4, [r0, #4]
   151ac:	b	15174 <__assert_fail@plt+0x3b70>
   151b0:	ldr	r4, [r8, #-8]
   151b4:	str	sl, [r8, #-4]
   151b8:	cmp	fp, #0
   151bc:	bne	15210 <__assert_fail@plt+0x3c0c>
   151c0:	mov	r1, r4
   151c4:	mov	r0, r6
   151c8:	bl	150d4 <__assert_fail@plt+0x3ad0>
   151cc:	mov	r5, r0
   151d0:	ldr	r3, [r0]
   151d4:	cmp	r3, #0
   151d8:	beq	1525c <__assert_fail@plt+0x3c58>
   151dc:	ldr	r0, [r6, #36]	; 0x24
   151e0:	cmp	r0, #0
   151e4:	beq	15244 <__assert_fail@plt+0x3c40>
   151e8:	ldr	r3, [r0, #4]
   151ec:	str	r3, [r6, #36]	; 0x24
   151f0:	str	r4, [r0]
   151f4:	ldr	r3, [r5, #4]
   151f8:	str	r3, [r0, #4]
   151fc:	str	r0, [r5, #4]
   15200:	str	sl, [r8, #-8]
   15204:	ldr	r3, [r9, #12]
   15208:	sub	r3, r3, #1
   1520c:	str	r3, [r9, #12]
   15210:	add	r2, r7, #8
   15214:	ldr	r3, [r9, #4]
   15218:	cmp	r3, r7
   1521c:	bls	15270 <__assert_fail@plt+0x3c6c>
   15220:	mov	r7, r2
   15224:	mov	r8, r7
   15228:	ldr	r3, [r7, #-8]
   1522c:	cmp	r3, #0
   15230:	beq	15210 <__assert_fail@plt+0x3c0c>
   15234:	ldr	r4, [r7, #-4]
   15238:	cmp	r4, #0
   1523c:	bne	15180 <__assert_fail@plt+0x3b7c>
   15240:	b	151b0 <__assert_fail@plt+0x3bac>
   15244:	mov	r0, #8
   15248:	bl	198ec <__assert_fail@plt+0x82e8>
   1524c:	cmp	r0, #0
   15250:	bne	151f0 <__assert_fail@plt+0x3bec>
   15254:	mov	r0, fp
   15258:	b	15274 <__assert_fail@plt+0x3c70>
   1525c:	str	r4, [r0]
   15260:	ldr	r3, [r6, #12]
   15264:	add	r3, r3, #1
   15268:	str	r3, [r6, #12]
   1526c:	b	15200 <__assert_fail@plt+0x3bfc>
   15270:	mov	r0, #1
   15274:	add	sp, sp, #4
   15278:	ldrd	r4, [sp]
   1527c:	ldrd	r6, [sp, #8]
   15280:	ldrd	r8, [sp, #16]
   15284:	ldrd	sl, [sp, #24]
   15288:	add	sp, sp, #32
   1528c:	pop	{pc}		; (ldr pc, [sp], #4)
   15290:	mov	r0, #1
   15294:	b	15274 <__assert_fail@plt+0x3c70>
   15298:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1529c:	strd	r6, [sp, #8]
   152a0:	str	r8, [sp, #16]
   152a4:	str	lr, [sp, #20]
   152a8:	mov	r6, r0
   152ac:	mov	r5, r1
   152b0:	mov	r7, r2
   152b4:	mov	r8, r3
   152b8:	bl	150d4 <__assert_fail@plt+0x3ad0>
   152bc:	mov	r4, r0
   152c0:	str	r0, [r7]
   152c4:	ldr	r0, [r0]
   152c8:	cmp	r0, #0
   152cc:	beq	15348 <__assert_fail@plt+0x3d44>
   152d0:	cmp	r0, r5
   152d4:	beq	1535c <__assert_fail@plt+0x3d58>
   152d8:	ldr	r3, [r6, #28]
   152dc:	mov	r1, r0
   152e0:	mov	r0, r5
   152e4:	blx	r3
   152e8:	cmp	r0, #0
   152ec:	bne	1535c <__assert_fail@plt+0x3d58>
   152f0:	ldr	r0, [r4, #4]
   152f4:	cmp	r0, #0
   152f8:	beq	15348 <__assert_fail@plt+0x3d44>
   152fc:	ldr	r1, [r0]
   15300:	cmp	r5, r1
   15304:	beq	15338 <__assert_fail@plt+0x3d34>
   15308:	ldr	r3, [r6, #28]
   1530c:	mov	r0, r5
   15310:	blx	r3
   15314:	cmp	r0, #0
   15318:	bne	15338 <__assert_fail@plt+0x3d34>
   1531c:	ldr	r4, [r4, #4]
   15320:	ldr	r0, [r4, #4]
   15324:	cmp	r0, #0
   15328:	beq	15348 <__assert_fail@plt+0x3d44>
   1532c:	ldr	r1, [r0]
   15330:	cmp	r1, r5
   15334:	bne	15308 <__assert_fail@plt+0x3d04>
   15338:	ldr	r3, [r4, #4]
   1533c:	ldr	r0, [r3]
   15340:	cmp	r8, #0
   15344:	bne	1539c <__assert_fail@plt+0x3d98>
   15348:	ldrd	r4, [sp]
   1534c:	ldrd	r6, [sp, #8]
   15350:	ldr	r8, [sp, #16]
   15354:	add	sp, sp, #20
   15358:	pop	{pc}		; (ldr pc, [sp], #4)
   1535c:	ldr	r0, [r4]
   15360:	cmp	r8, #0
   15364:	beq	15348 <__assert_fail@plt+0x3d44>
   15368:	ldr	r1, [r4, #4]
   1536c:	cmp	r1, #0
   15370:	moveq	r3, #0
   15374:	streq	r3, [r4]
   15378:	beq	15348 <__assert_fail@plt+0x3d44>
   1537c:	ldrd	r2, [r1]
   15380:	strd	r2, [r4]
   15384:	mov	r3, #0
   15388:	str	r3, [r1]
   1538c:	ldr	r3, [r6, #36]	; 0x24
   15390:	str	r3, [r1, #4]
   15394:	str	r1, [r6, #36]	; 0x24
   15398:	b	15348 <__assert_fail@plt+0x3d44>
   1539c:	ldr	r2, [r3, #4]
   153a0:	str	r2, [r4, #4]
   153a4:	mov	r2, #0
   153a8:	str	r2, [r3]
   153ac:	ldr	r2, [r6, #36]	; 0x24
   153b0:	str	r2, [r3, #4]
   153b4:	str	r3, [r6, #36]	; 0x24
   153b8:	b	15348 <__assert_fail@plt+0x3d44>
   153bc:	ldr	r0, [r0, #8]
   153c0:	bx	lr
   153c4:	ldr	r0, [r0, #12]
   153c8:	bx	lr
   153cc:	ldr	r0, [r0, #16]
   153d0:	bx	lr
   153d4:	ldr	r2, [r0]
   153d8:	ldr	r3, [r0, #4]
   153dc:	cmp	r2, r3
   153e0:	bcs	15450 <__assert_fail@plt+0x3e4c>
   153e4:	add	r1, r2, #8
   153e8:	sub	ip, r3, #1
   153ec:	sub	ip, ip, r2
   153f0:	bic	ip, ip, #7
   153f4:	add	r2, r2, #16
   153f8:	add	ip, ip, r2
   153fc:	mov	r0, #0
   15400:	b	1541c <__assert_fail@plt+0x3e18>
   15404:	mov	r2, #1
   15408:	cmp	r0, r2
   1540c:	movcc	r0, r2
   15410:	add	r1, r1, #8
   15414:	cmp	r1, ip
   15418:	beq	1544c <__assert_fail@plt+0x3e48>
   1541c:	ldr	r3, [r1, #-8]
   15420:	cmp	r3, #0
   15424:	beq	15410 <__assert_fail@plt+0x3e0c>
   15428:	ldr	r3, [r1, #-4]
   1542c:	cmp	r3, #0
   15430:	beq	15404 <__assert_fail@plt+0x3e00>
   15434:	mov	r2, #1
   15438:	add	r2, r2, #1
   1543c:	ldr	r3, [r3, #4]
   15440:	cmp	r3, #0
   15444:	bne	15438 <__assert_fail@plt+0x3e34>
   15448:	b	15408 <__assert_fail@plt+0x3e04>
   1544c:	bx	lr
   15450:	mov	r0, #0
   15454:	bx	lr
   15458:	push	{lr}		; (str lr, [sp, #-4]!)
   1545c:	ldr	r2, [r0]
   15460:	ldr	r3, [r0, #4]
   15464:	cmp	r2, r3
   15468:	bcs	154d0 <__assert_fail@plt+0x3ecc>
   1546c:	add	r1, r2, #8
   15470:	sub	ip, r3, #1
   15474:	sub	ip, ip, r2
   15478:	bic	ip, ip, #7
   1547c:	add	r2, r2, #16
   15480:	add	ip, ip, r2
   15484:	mov	r2, #0
   15488:	mov	lr, r2
   1548c:	b	1549c <__assert_fail@plt+0x3e98>
   15490:	add	r1, r1, #8
   15494:	cmp	r1, ip
   15498:	beq	154d8 <__assert_fail@plt+0x3ed4>
   1549c:	ldr	r3, [r1, #-8]
   154a0:	cmp	r3, #0
   154a4:	beq	15490 <__assert_fail@plt+0x3e8c>
   154a8:	add	lr, lr, #1
   154ac:	add	r2, r2, #1
   154b0:	ldr	r3, [r1, #-4]
   154b4:	cmp	r3, #0
   154b8:	beq	15490 <__assert_fail@plt+0x3e8c>
   154bc:	add	r2, r2, #1
   154c0:	ldr	r3, [r3, #4]
   154c4:	cmp	r3, #0
   154c8:	bne	154bc <__assert_fail@plt+0x3eb8>
   154cc:	b	15490 <__assert_fail@plt+0x3e8c>
   154d0:	mov	r2, #0
   154d4:	mov	lr, r2
   154d8:	ldr	r3, [r0, #12]
   154dc:	cmp	r3, lr
   154e0:	movne	r0, #0
   154e4:	beq	154ec <__assert_fail@plt+0x3ee8>
   154e8:	pop	{pc}		; (ldr pc, [sp], #4)
   154ec:	ldr	r0, [r0, #16]
   154f0:	cmp	r0, r2
   154f4:	movne	r0, #0
   154f8:	moveq	r0, #1
   154fc:	b	154e8 <__assert_fail@plt+0x3ee4>
   15500:	strd	r4, [sp, #-24]!	; 0xffffffe8
   15504:	strd	r6, [sp, #8]
   15508:	str	r8, [sp, #16]
   1550c:	str	lr, [sp, #20]
   15510:	sub	sp, sp, #8
   15514:	mov	r6, r0
   15518:	mov	r4, r1
   1551c:	ldr	r5, [r0, #8]
   15520:	ldr	r7, [r0, #12]
   15524:	bl	153d4 <__assert_fail@plt+0x3dd0>
   15528:	mov	r8, r0
   1552c:	ldr	r3, [r6, #16]
   15530:	movw	r2, #47240	; 0xb888
   15534:	movt	r2, #1
   15538:	mov	r1, #1
   1553c:	mov	r0, r4
   15540:	bl	114cc <__fprintf_chk@plt>
   15544:	mov	r3, r5
   15548:	movw	r2, #47264	; 0xb8a0
   1554c:	movt	r2, #1
   15550:	mov	r1, #1
   15554:	mov	r0, r4
   15558:	bl	114cc <__fprintf_chk@plt>
   1555c:	vmov	s15, r7
   15560:	vcvt.f64.u32	d6, s15
   15564:	vldr	d7, [pc, #92]	; 155c8 <__assert_fail@plt+0x3fc4>
   15568:	vmul.f64	d6, d6, d7
   1556c:	vmov	s15, r5
   15570:	vcvt.f64.u32	d7, s15
   15574:	vdiv.f64	d5, d6, d7
   15578:	vstr	d5, [sp]
   1557c:	mov	r3, r7
   15580:	movw	r2, #47288	; 0xb8b8
   15584:	movt	r2, #1
   15588:	mov	r1, #1
   1558c:	mov	r0, r4
   15590:	bl	114cc <__fprintf_chk@plt>
   15594:	mov	r3, r8
   15598:	movw	r2, #47324	; 0xb8dc
   1559c:	movt	r2, #1
   155a0:	mov	r1, #1
   155a4:	mov	r0, r4
   155a8:	bl	114cc <__fprintf_chk@plt>
   155ac:	add	sp, sp, #8
   155b0:	ldrd	r4, [sp]
   155b4:	ldrd	r6, [sp, #8]
   155b8:	ldr	r8, [sp, #16]
   155bc:	add	sp, sp, #20
   155c0:	pop	{pc}		; (ldr pc, [sp], #4)
   155c4:	nop	{0}
   155c8:	andeq	r0, r0, r0
   155cc:	subsmi	r0, r9, r0
   155d0:	strd	r4, [sp, #-16]!
   155d4:	str	r6, [sp, #8]
   155d8:	str	lr, [sp, #12]
   155dc:	mov	r6, r0
   155e0:	mov	r5, r1
   155e4:	bl	150d4 <__assert_fail@plt+0x3ad0>
   155e8:	ldr	r1, [r0]
   155ec:	cmp	r1, #0
   155f0:	beq	15644 <__assert_fail@plt+0x4040>
   155f4:	mov	r4, r0
   155f8:	cmp	r1, r5
   155fc:	beq	1562c <__assert_fail@plt+0x4028>
   15600:	ldr	r3, [r6, #28]
   15604:	mov	r0, r5
   15608:	blx	r3
   1560c:	cmp	r0, #0
   15610:	bne	1562c <__assert_fail@plt+0x4028>
   15614:	ldr	r4, [r4, #4]
   15618:	cmp	r4, #0
   1561c:	beq	15630 <__assert_fail@plt+0x402c>
   15620:	ldr	r1, [r4]
   15624:	cmp	r1, r5
   15628:	bne	15600 <__assert_fail@plt+0x3ffc>
   1562c:	ldr	r4, [r4]
   15630:	mov	r0, r4
   15634:	ldrd	r4, [sp]
   15638:	ldr	r6, [sp, #8]
   1563c:	add	sp, sp, #12
   15640:	pop	{pc}		; (ldr pc, [sp], #4)
   15644:	mov	r4, r1
   15648:	b	15630 <__assert_fail@plt+0x402c>
   1564c:	ldr	r3, [r0, #16]
   15650:	cmp	r3, #0
   15654:	beq	156ac <__assert_fail@plt+0x40a8>
   15658:	ldr	r2, [r0]
   1565c:	ldr	r1, [r0, #4]
   15660:	cmp	r2, r1
   15664:	bcs	156a0 <__assert_fail@plt+0x409c>
   15668:	ldr	r0, [r2]
   1566c:	cmp	r0, #0
   15670:	bxne	lr
   15674:	mov	r3, r2
   15678:	sub	r1, r1, #1
   1567c:	sub	r1, r1, r2
   15680:	bic	r1, r1, #7
   15684:	add	r2, r2, r1
   15688:	cmp	r3, r2
   1568c:	beq	156a0 <__assert_fail@plt+0x409c>
   15690:	ldr	r0, [r3, #8]!
   15694:	cmp	r0, #0
   15698:	beq	15688 <__assert_fail@plt+0x4084>
   1569c:	bx	lr
   156a0:	str	r4, [sp, #-8]!
   156a4:	str	lr, [sp, #4]
   156a8:	bl	115c8 <abort@plt>
   156ac:	mov	r0, #0
   156b0:	bx	lr
   156b4:	strd	r4, [sp, #-16]!
   156b8:	str	r6, [sp, #8]
   156bc:	str	lr, [sp, #12]
   156c0:	mov	r5, r0
   156c4:	mov	r4, r1
   156c8:	bl	150d4 <__assert_fail@plt+0x3ad0>
   156cc:	mov	r2, r0
   156d0:	mov	r3, r0
   156d4:	b	156e4 <__assert_fail@plt+0x40e0>
   156d8:	ldr	r3, [r3, #4]
   156dc:	cmp	r3, #0
   156e0:	beq	15700 <__assert_fail@plt+0x40fc>
   156e4:	ldr	r1, [r3]
   156e8:	cmp	r1, r4
   156ec:	bne	156d8 <__assert_fail@plt+0x40d4>
   156f0:	ldr	r3, [r3, #4]
   156f4:	cmp	r3, #0
   156f8:	ldrne	r0, [r3]
   156fc:	bne	15724 <__assert_fail@plt+0x4120>
   15700:	ldr	r3, [r5, #4]
   15704:	add	r2, r2, #8
   15708:	cmp	r3, r2
   1570c:	bls	15720 <__assert_fail@plt+0x411c>
   15710:	ldr	r0, [r2]
   15714:	cmp	r0, #0
   15718:	beq	15704 <__assert_fail@plt+0x4100>
   1571c:	b	15724 <__assert_fail@plt+0x4120>
   15720:	mov	r0, #0
   15724:	ldrd	r4, [sp]
   15728:	ldr	r6, [sp, #8]
   1572c:	add	sp, sp, #12
   15730:	pop	{pc}		; (ldr pc, [sp], #4)
   15734:	strd	r4, [sp, #-12]!
   15738:	str	lr, [sp, #8]
   1573c:	ldr	r4, [r0]
   15740:	ldr	r3, [r0, #4]
   15744:	cmp	r4, r3
   15748:	bcs	157b0 <__assert_fail@plt+0x41ac>
   1574c:	mov	r5, r0
   15750:	mov	r0, #0
   15754:	b	15768 <__assert_fail@plt+0x4164>
   15758:	add	r4, r4, #8
   1575c:	ldr	r3, [r5, #4]
   15760:	cmp	r3, r4
   15764:	bls	157a4 <__assert_fail@plt+0x41a0>
   15768:	ldr	r3, [r4]
   1576c:	cmp	r3, #0
   15770:	beq	15758 <__assert_fail@plt+0x4154>
   15774:	cmp	r2, r0
   15778:	bls	157a4 <__assert_fail@plt+0x41a0>
   1577c:	add	ip, r1, r0, lsl #2
   15780:	mov	r3, r4
   15784:	add	r0, r0, #1
   15788:	ldr	lr, [r3]
   1578c:	str	lr, [ip], #4
   15790:	ldr	r3, [r3, #4]
   15794:	cmp	r3, #0
   15798:	beq	15758 <__assert_fail@plt+0x4154>
   1579c:	cmp	r2, r0
   157a0:	bne	15784 <__assert_fail@plt+0x4180>
   157a4:	ldrd	r4, [sp]
   157a8:	add	sp, sp, #8
   157ac:	pop	{pc}		; (ldr pc, [sp], #4)
   157b0:	mov	r0, #0
   157b4:	b	157a4 <__assert_fail@plt+0x41a0>
   157b8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   157bc:	strd	r6, [sp, #8]
   157c0:	strd	r8, [sp, #16]
   157c4:	str	sl, [sp, #24]
   157c8:	str	lr, [sp, #28]
   157cc:	ldr	r8, [r0]
   157d0:	ldr	r3, [r0, #4]
   157d4:	cmp	r8, r3
   157d8:	bcs	15838 <__assert_fail@plt+0x4234>
   157dc:	mov	r7, r2
   157e0:	mov	r6, r1
   157e4:	mov	r9, r0
   157e8:	mov	r5, #0
   157ec:	b	15800 <__assert_fail@plt+0x41fc>
   157f0:	add	r8, r8, #8
   157f4:	ldr	r3, [r9, #4]
   157f8:	cmp	r3, r8
   157fc:	bls	1583c <__assert_fail@plt+0x4238>
   15800:	ldr	r3, [r8]
   15804:	cmp	r3, #0
   15808:	beq	157f0 <__assert_fail@plt+0x41ec>
   1580c:	mov	r4, r8
   15810:	mov	r1, r7
   15814:	ldr	r0, [r4]
   15818:	blx	r6
   1581c:	cmp	r0, #0
   15820:	beq	1583c <__assert_fail@plt+0x4238>
   15824:	add	r5, r5, #1
   15828:	ldr	r4, [r4, #4]
   1582c:	cmp	r4, #0
   15830:	bne	15810 <__assert_fail@plt+0x420c>
   15834:	b	157f0 <__assert_fail@plt+0x41ec>
   15838:	mov	r5, #0
   1583c:	mov	r0, r5
   15840:	ldrd	r4, [sp]
   15844:	ldrd	r6, [sp, #8]
   15848:	ldrd	r8, [sp, #16]
   1584c:	ldr	sl, [sp, #24]
   15850:	add	sp, sp, #28
   15854:	pop	{pc}		; (ldr pc, [sp], #4)
   15858:	ldrb	r2, [r0]
   1585c:	cmp	r2, #0
   15860:	beq	1588c <__assert_fail@plt+0x4288>
   15864:	mov	r3, #0
   15868:	rsb	r3, r3, r3, lsl #5
   1586c:	add	r3, r3, r2
   15870:	udiv	r2, r3, r1
   15874:	mls	r3, r1, r2, r3
   15878:	ldrb	r2, [r0, #1]!
   1587c:	cmp	r2, #0
   15880:	bne	15868 <__assert_fail@plt+0x4264>
   15884:	mov	r0, r3
   15888:	bx	lr
   1588c:	mov	r3, #0
   15890:	b	15884 <__assert_fail@plt+0x4280>
   15894:	strd	r4, [sp, #-8]!
   15898:	movw	r3, #47220	; 0xb874
   1589c:	movt	r3, #1
   158a0:	ldrd	r4, [r3]
   158a4:	strd	r4, [r0]
   158a8:	ldrd	r4, [r3, #8]
   158ac:	strd	r4, [r0, #8]
   158b0:	ldr	r3, [r3, #16]
   158b4:	str	r3, [r0, #16]
   158b8:	ldrd	r4, [sp]
   158bc:	add	sp, sp, #8
   158c0:	bx	lr
   158c4:	strd	r4, [sp, #-24]!	; 0xffffffe8
   158c8:	strd	r6, [sp, #8]
   158cc:	str	r8, [sp, #16]
   158d0:	str	lr, [sp, #20]
   158d4:	mov	r8, r0
   158d8:	mov	r5, r1
   158dc:	subs	r7, r2, #0
   158e0:	movw	r2, #20200	; 0x4ee8
   158e4:	movt	r2, #1
   158e8:	cmp	r7, #0
   158ec:	moveq	r7, r2
   158f0:	subs	r6, r3, #0
   158f4:	movw	r3, #20216	; 0x4ef8
   158f8:	movt	r3, #1
   158fc:	cmp	r6, #0
   15900:	moveq	r6, r3
   15904:	mov	r0, #40	; 0x28
   15908:	bl	198ec <__assert_fail@plt+0x82e8>
   1590c:	subs	r4, r0, #0
   15910:	beq	15990 <__assert_fail@plt+0x438c>
   15914:	movw	r3, #47220	; 0xb874
   15918:	movt	r3, #1
   1591c:	cmp	r5, #0
   15920:	moveq	r5, r3
   15924:	str	r5, [r4, #20]
   15928:	mov	r0, r4
   1592c:	bl	14f08 <__assert_fail@plt+0x3904>
   15930:	cmp	r0, #0
   15934:	beq	159a8 <__assert_fail@plt+0x43a4>
   15938:	mov	r1, r5
   1593c:	mov	r0, r8
   15940:	bl	14fcc <__assert_fail@plt+0x39c8>
   15944:	str	r0, [r4, #8]
   15948:	cmp	r0, #0
   1594c:	beq	159a8 <__assert_fail@plt+0x43a4>
   15950:	mov	r1, #8
   15954:	bl	19878 <__assert_fail@plt+0x8274>
   15958:	str	r0, [r4]
   1595c:	cmp	r0, #0
   15960:	beq	159a8 <__assert_fail@plt+0x43a4>
   15964:	ldr	r3, [r4, #8]
   15968:	add	r0, r0, r3, lsl #3
   1596c:	str	r0, [r4, #4]
   15970:	mov	r3, #0
   15974:	str	r3, [r4, #12]
   15978:	str	r3, [r4, #16]
   1597c:	str	r7, [r4, #24]
   15980:	str	r6, [r4, #28]
   15984:	ldr	r2, [sp, #24]
   15988:	str	r2, [r4, #32]
   1598c:	str	r3, [r4, #36]	; 0x24
   15990:	mov	r0, r4
   15994:	ldrd	r4, [sp]
   15998:	ldrd	r6, [sp, #8]
   1599c:	ldr	r8, [sp, #16]
   159a0:	add	sp, sp, #20
   159a4:	pop	{pc}		; (ldr pc, [sp], #4)
   159a8:	mov	r0, r4
   159ac:	bl	1a034 <__assert_fail@plt+0x8a30>
   159b0:	mov	r4, #0
   159b4:	b	15990 <__assert_fail@plt+0x438c>
   159b8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   159bc:	strd	r6, [sp, #8]
   159c0:	str	r8, [sp, #16]
   159c4:	str	lr, [sp, #20]
   159c8:	mov	r5, r0
   159cc:	ldr	r6, [r0]
   159d0:	ldr	r3, [r0, #4]
   159d4:	cmp	r6, r3
   159d8:	bcs	15a70 <__assert_fail@plt+0x446c>
   159dc:	add	r6, r6, #8
   159e0:	mov	r7, #0
   159e4:	b	15a50 <__assert_fail@plt+0x444c>
   159e8:	str	r7, [r4]
   159ec:	ldr	r3, [r4, #4]
   159f0:	ldr	r2, [r5, #36]	; 0x24
   159f4:	str	r2, [r4, #4]
   159f8:	str	r4, [r5, #36]	; 0x24
   159fc:	mov	r4, r3
   15a00:	cmp	r3, #0
   15a04:	beq	15a20 <__assert_fail@plt+0x441c>
   15a08:	ldr	r3, [r5, #32]
   15a0c:	cmp	r3, #0
   15a10:	beq	159e8 <__assert_fail@plt+0x43e4>
   15a14:	ldr	r0, [r4]
   15a18:	blx	r3
   15a1c:	b	159e8 <__assert_fail@plt+0x43e4>
   15a20:	ldr	r3, [r5, #32]
   15a24:	cmp	r3, #0
   15a28:	beq	15a34 <__assert_fail@plt+0x4430>
   15a2c:	ldr	r0, [r8, #-8]
   15a30:	blx	r3
   15a34:	str	r7, [r8, #-8]
   15a38:	str	r7, [r8, #-4]
   15a3c:	add	r2, r6, #8
   15a40:	ldr	r3, [r5, #4]
   15a44:	cmp	r3, r6
   15a48:	bls	15a70 <__assert_fail@plt+0x446c>
   15a4c:	mov	r6, r2
   15a50:	mov	r8, r6
   15a54:	ldr	r3, [r6, #-8]
   15a58:	cmp	r3, #0
   15a5c:	beq	15a3c <__assert_fail@plt+0x4438>
   15a60:	ldr	r4, [r6, #-4]
   15a64:	cmp	r4, #0
   15a68:	bne	15a08 <__assert_fail@plt+0x4404>
   15a6c:	b	15a20 <__assert_fail@plt+0x441c>
   15a70:	mov	r3, #0
   15a74:	str	r3, [r5, #12]
   15a78:	str	r3, [r5, #16]
   15a7c:	ldrd	r4, [sp]
   15a80:	ldrd	r6, [sp, #8]
   15a84:	ldr	r8, [sp, #16]
   15a88:	add	sp, sp, #20
   15a8c:	pop	{pc}		; (ldr pc, [sp], #4)
   15a90:	strd	r4, [sp, #-16]!
   15a94:	str	r6, [sp, #8]
   15a98:	str	lr, [sp, #12]
   15a9c:	mov	r6, r0
   15aa0:	ldr	r3, [r0, #32]
   15aa4:	cmp	r3, #0
   15aa8:	beq	15b08 <__assert_fail@plt+0x4504>
   15aac:	ldr	r3, [r0, #16]
   15ab0:	cmp	r3, #0
   15ab4:	beq	15b08 <__assert_fail@plt+0x4504>
   15ab8:	ldr	r5, [r0]
   15abc:	ldr	r3, [r0, #4]
   15ac0:	cmp	r5, r3
   15ac4:	bcc	15adc <__assert_fail@plt+0x44d8>
   15ac8:	b	15b18 <__assert_fail@plt+0x4514>
   15acc:	add	r5, r5, #8
   15ad0:	ldr	r3, [r6, #4]
   15ad4:	cmp	r3, r5
   15ad8:	bls	15b08 <__assert_fail@plt+0x4504>
   15adc:	ldr	r3, [r5]
   15ae0:	cmp	r3, #0
   15ae4:	beq	15acc <__assert_fail@plt+0x44c8>
   15ae8:	mov	r4, r5
   15aec:	ldr	r3, [r6, #32]
   15af0:	ldr	r0, [r4]
   15af4:	blx	r3
   15af8:	ldr	r4, [r4, #4]
   15afc:	cmp	r4, #0
   15b00:	bne	15aec <__assert_fail@plt+0x44e8>
   15b04:	b	15acc <__assert_fail@plt+0x44c8>
   15b08:	ldr	r5, [r6]
   15b0c:	ldr	r3, [r6, #4]
   15b10:	cmp	r5, r3
   15b14:	bcc	15b68 <__assert_fail@plt+0x4564>
   15b18:	ldr	r0, [r6, #36]	; 0x24
   15b1c:	cmp	r0, #0
   15b20:	beq	15b38 <__assert_fail@plt+0x4534>
   15b24:	ldr	r4, [r0, #4]
   15b28:	bl	1a034 <__assert_fail@plt+0x8a30>
   15b2c:	mov	r0, r4
   15b30:	cmp	r4, #0
   15b34:	bne	15b24 <__assert_fail@plt+0x4520>
   15b38:	ldr	r0, [r6]
   15b3c:	bl	1a034 <__assert_fail@plt+0x8a30>
   15b40:	mov	r0, r6
   15b44:	bl	1a034 <__assert_fail@plt+0x8a30>
   15b48:	ldrd	r4, [sp]
   15b4c:	ldr	r6, [sp, #8]
   15b50:	add	sp, sp, #12
   15b54:	pop	{pc}		; (ldr pc, [sp], #4)
   15b58:	add	r5, r5, #8
   15b5c:	ldr	r3, [r6, #4]
   15b60:	cmp	r3, r5
   15b64:	bls	15b18 <__assert_fail@plt+0x4514>
   15b68:	ldr	r0, [r5, #4]
   15b6c:	cmp	r0, #0
   15b70:	beq	15b58 <__assert_fail@plt+0x4554>
   15b74:	ldr	r4, [r0, #4]
   15b78:	bl	1a034 <__assert_fail@plt+0x8a30>
   15b7c:	mov	r0, r4
   15b80:	cmp	r4, #0
   15b84:	bne	15b74 <__assert_fail@plt+0x4570>
   15b88:	b	15b58 <__assert_fail@plt+0x4554>
   15b8c:	strd	r4, [sp, #-12]!
   15b90:	str	lr, [sp, #8]
   15b94:	sub	sp, sp, #44	; 0x2c
   15b98:	mov	r4, r0
   15b9c:	mov	r0, r1
   15ba0:	ldr	r1, [r4, #20]
   15ba4:	bl	14fcc <__assert_fail@plt+0x39c8>
   15ba8:	subs	r5, r0, #0
   15bac:	beq	15ca4 <__assert_fail@plt+0x46a0>
   15bb0:	ldr	r3, [r4, #8]
   15bb4:	cmp	r3, r5
   15bb8:	beq	15cbc <__assert_fail@plt+0x46b8>
   15bbc:	mov	r1, #8
   15bc0:	mov	r0, r5
   15bc4:	bl	19878 <__assert_fail@plt+0x8274>
   15bc8:	str	r0, [sp]
   15bcc:	cmp	r0, #0
   15bd0:	beq	15cc4 <__assert_fail@plt+0x46c0>
   15bd4:	str	r5, [sp, #8]
   15bd8:	add	r0, r0, r5, lsl #3
   15bdc:	str	r0, [sp, #4]
   15be0:	mov	r2, #0
   15be4:	str	r2, [sp, #12]
   15be8:	str	r2, [sp, #16]
   15bec:	ldr	r3, [r4, #20]
   15bf0:	str	r3, [sp, #20]
   15bf4:	ldr	r3, [r4, #24]
   15bf8:	str	r3, [sp, #24]
   15bfc:	ldr	r3, [r4, #28]
   15c00:	str	r3, [sp, #28]
   15c04:	ldr	r3, [r4, #32]
   15c08:	str	r3, [sp, #32]
   15c0c:	ldr	r3, [r4, #36]	; 0x24
   15c10:	str	r3, [sp, #36]	; 0x24
   15c14:	mov	r1, r4
   15c18:	mov	r0, sp
   15c1c:	bl	15114 <__assert_fail@plt+0x3b10>
   15c20:	subs	r5, r0, #0
   15c24:	bne	15c6c <__assert_fail@plt+0x4668>
   15c28:	ldr	r3, [sp, #36]	; 0x24
   15c2c:	str	r3, [r4, #36]	; 0x24
   15c30:	mov	r2, #1
   15c34:	mov	r1, sp
   15c38:	mov	r0, r4
   15c3c:	bl	15114 <__assert_fail@plt+0x3b10>
   15c40:	cmp	r0, #0
   15c44:	beq	15ca0 <__assert_fail@plt+0x469c>
   15c48:	mov	r2, #0
   15c4c:	mov	r1, sp
   15c50:	mov	r0, r4
   15c54:	bl	15114 <__assert_fail@plt+0x3b10>
   15c58:	cmp	r0, #0
   15c5c:	beq	15ca0 <__assert_fail@plt+0x469c>
   15c60:	ldr	r0, [sp]
   15c64:	bl	1a034 <__assert_fail@plt+0x8a30>
   15c68:	b	15ca8 <__assert_fail@plt+0x46a4>
   15c6c:	ldr	r0, [r4]
   15c70:	bl	1a034 <__assert_fail@plt+0x8a30>
   15c74:	ldr	r3, [sp]
   15c78:	str	r3, [r4]
   15c7c:	ldr	r3, [sp, #4]
   15c80:	str	r3, [r4, #4]
   15c84:	ldr	r3, [sp, #8]
   15c88:	str	r3, [r4, #8]
   15c8c:	ldr	r3, [sp, #12]
   15c90:	str	r3, [r4, #12]
   15c94:	ldr	r3, [sp, #36]	; 0x24
   15c98:	str	r3, [r4, #36]	; 0x24
   15c9c:	b	15ca8 <__assert_fail@plt+0x46a4>
   15ca0:	bl	115c8 <abort@plt>
   15ca4:	mov	r5, #0
   15ca8:	mov	r0, r5
   15cac:	add	sp, sp, #44	; 0x2c
   15cb0:	ldrd	r4, [sp]
   15cb4:	add	sp, sp, #8
   15cb8:	pop	{pc}		; (ldr pc, [sp], #4)
   15cbc:	mov	r5, #1
   15cc0:	b	15ca8 <__assert_fail@plt+0x46a4>
   15cc4:	mov	r5, #0
   15cc8:	b	15ca8 <__assert_fail@plt+0x46a4>
   15ccc:	strd	r4, [sp, #-16]!
   15cd0:	str	r6, [sp, #8]
   15cd4:	str	lr, [sp, #12]
   15cd8:	sub	sp, sp, #8
   15cdc:	subs	r5, r1, #0
   15ce0:	beq	15d2c <__assert_fail@plt+0x4728>
   15ce4:	mov	r4, r0
   15ce8:	mov	r6, r2
   15cec:	mov	r3, #0
   15cf0:	add	r2, sp, #4
   15cf4:	mov	r1, r5
   15cf8:	bl	15298 <__assert_fail@plt+0x3c94>
   15cfc:	cmp	r0, #0
   15d00:	beq	15d30 <__assert_fail@plt+0x472c>
   15d04:	cmp	r6, #0
   15d08:	moveq	r0, #0
   15d0c:	beq	15d18 <__assert_fail@plt+0x4714>
   15d10:	str	r0, [r6]
   15d14:	mov	r0, #0
   15d18:	add	sp, sp, #8
   15d1c:	ldrd	r4, [sp]
   15d20:	ldr	r6, [sp, #8]
   15d24:	add	sp, sp, #12
   15d28:	pop	{pc}		; (ldr pc, [sp], #4)
   15d2c:	bl	115c8 <abort@plt>
   15d30:	vldr	s15, [r4, #12]
   15d34:	vcvt.f32.u32	s14, s15
   15d38:	ldr	r3, [r4, #20]
   15d3c:	vldr	s15, [r4, #8]
   15d40:	vcvt.f32.u32	s15, s15
   15d44:	vldr	s13, [r3, #8]
   15d48:	vmul.f32	s15, s15, s13
   15d4c:	vcmpe.f32	s14, s15
   15d50:	vmrs	APSR_nzcv, fpscr
   15d54:	bgt	15da4 <__assert_fail@plt+0x47a0>
   15d58:	ldr	r3, [sp, #4]
   15d5c:	ldr	r2, [r3]
   15d60:	cmp	r2, #0
   15d64:	beq	15e50 <__assert_fail@plt+0x484c>
   15d68:	ldr	r0, [r4, #36]	; 0x24
   15d6c:	cmp	r0, #0
   15d70:	beq	15e38 <__assert_fail@plt+0x4834>
   15d74:	ldr	r3, [r0, #4]
   15d78:	str	r3, [r4, #36]	; 0x24
   15d7c:	str	r5, [r0]
   15d80:	ldr	r3, [sp, #4]
   15d84:	ldr	r2, [r3, #4]
   15d88:	str	r2, [r0, #4]
   15d8c:	str	r0, [r3, #4]
   15d90:	ldr	r3, [r4, #16]
   15d94:	add	r3, r3, #1
   15d98:	str	r3, [r4, #16]
   15d9c:	mov	r0, #1
   15da0:	b	15d18 <__assert_fail@plt+0x4714>
   15da4:	mov	r0, r4
   15da8:	bl	14f08 <__assert_fail@plt+0x3904>
   15dac:	ldr	r3, [r4, #20]
   15db0:	vldr	s13, [r3, #8]
   15db4:	vldr	s15, [r4, #8]
   15db8:	vcvt.f32.u32	s15, s15
   15dbc:	vldr	s14, [r4, #12]
   15dc0:	vcvt.f32.u32	s14, s14
   15dc4:	vmul.f32	s12, s13, s15
   15dc8:	vcmpe.f32	s14, s12
   15dcc:	vmrs	APSR_nzcv, fpscr
   15dd0:	ble	15d58 <__assert_fail@plt+0x4754>
   15dd4:	ldrb	r2, [r3, #16]
   15dd8:	cmp	r2, #0
   15ddc:	vldr	s14, [r3, #12]
   15de0:	vmul.f32	s15, s15, s14
   15de4:	vmuleq.f32	s15, s15, s13
   15de8:	vldr	s14, [pc, #132]	; 15e74 <__assert_fail@plt+0x4870>
   15dec:	vcmpe.f32	s15, s14
   15df0:	vmrs	APSR_nzcv, fpscr
   15df4:	mvnge	r0, #0
   15df8:	bge	15d18 <__assert_fail@plt+0x4714>
   15dfc:	vcvt.u32.f32	s15, s15
   15e00:	vmov	r1, s15
   15e04:	mov	r0, r4
   15e08:	bl	15b8c <__assert_fail@plt+0x4588>
   15e0c:	cmp	r0, #0
   15e10:	mvneq	r0, #0
   15e14:	beq	15d18 <__assert_fail@plt+0x4714>
   15e18:	mov	r3, #0
   15e1c:	add	r2, sp, #4
   15e20:	mov	r1, r5
   15e24:	mov	r0, r4
   15e28:	bl	15298 <__assert_fail@plt+0x3c94>
   15e2c:	cmp	r0, #0
   15e30:	beq	15d58 <__assert_fail@plt+0x4754>
   15e34:	bl	115c8 <abort@plt>
   15e38:	mov	r0, #8
   15e3c:	bl	198ec <__assert_fail@plt+0x82e8>
   15e40:	cmp	r0, #0
   15e44:	mvneq	r0, #0
   15e48:	beq	15d18 <__assert_fail@plt+0x4714>
   15e4c:	b	15d7c <__assert_fail@plt+0x4778>
   15e50:	str	r5, [r3]
   15e54:	ldr	r3, [r4, #16]
   15e58:	add	r3, r3, #1
   15e5c:	str	r3, [r4, #16]
   15e60:	ldr	r3, [r4, #12]
   15e64:	add	r3, r3, #1
   15e68:	str	r3, [r4, #12]
   15e6c:	mov	r0, #1
   15e70:	b	15d18 <__assert_fail@plt+0x4714>
   15e74:	svcmi	0x00800000
   15e78:	str	r4, [sp, #-8]!
   15e7c:	str	lr, [sp, #4]
   15e80:	sub	sp, sp, #8
   15e84:	mov	r4, r1
   15e88:	add	r2, sp, #4
   15e8c:	bl	15ccc <__assert_fail@plt+0x46c8>
   15e90:	cmn	r0, #1
   15e94:	moveq	r0, #0
   15e98:	beq	15ea8 <__assert_fail@plt+0x48a4>
   15e9c:	cmp	r0, #0
   15ea0:	ldreq	r0, [sp, #4]
   15ea4:	movne	r0, r4
   15ea8:	add	sp, sp, #8
   15eac:	ldr	r4, [sp]
   15eb0:	add	sp, sp, #4
   15eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   15eb8:	strd	r4, [sp, #-16]!
   15ebc:	str	r6, [sp, #8]
   15ec0:	str	lr, [sp, #12]
   15ec4:	sub	sp, sp, #8
   15ec8:	mov	r4, r0
   15ecc:	mov	r3, #1
   15ed0:	add	r2, sp, #4
   15ed4:	bl	15298 <__assert_fail@plt+0x3c94>
   15ed8:	subs	r5, r0, #0
   15edc:	beq	15efc <__assert_fail@plt+0x48f8>
   15ee0:	ldr	r3, [r4, #16]
   15ee4:	sub	r3, r3, #1
   15ee8:	str	r3, [r4, #16]
   15eec:	ldr	r3, [sp, #4]
   15ef0:	ldr	r3, [r3]
   15ef4:	cmp	r3, #0
   15ef8:	beq	15f14 <__assert_fail@plt+0x4910>
   15efc:	mov	r0, r5
   15f00:	add	sp, sp, #8
   15f04:	ldrd	r4, [sp]
   15f08:	ldr	r6, [sp, #8]
   15f0c:	add	sp, sp, #12
   15f10:	pop	{pc}		; (ldr pc, [sp], #4)
   15f14:	ldr	r3, [r4, #12]
   15f18:	sub	r3, r3, #1
   15f1c:	str	r3, [r4, #12]
   15f20:	vmov	s15, r3
   15f24:	vcvt.f32.u32	s15, s15
   15f28:	ldr	r3, [r4, #20]
   15f2c:	vldr	s14, [r4, #8]
   15f30:	vcvt.f32.u32	s14, s14
   15f34:	vldr	s13, [r3]
   15f38:	vmul.f32	s14, s14, s13
   15f3c:	vcmpe.f32	s15, s14
   15f40:	vmrs	APSR_nzcv, fpscr
   15f44:	bpl	15efc <__assert_fail@plt+0x48f8>
   15f48:	mov	r0, r4
   15f4c:	bl	14f08 <__assert_fail@plt+0x3904>
   15f50:	ldr	r3, [r4, #20]
   15f54:	vldr	s15, [r4, #8]
   15f58:	vcvt.f32.u32	s15, s15
   15f5c:	vldr	s14, [r4, #12]
   15f60:	vcvt.f32.u32	s13, s14
   15f64:	vldr	s14, [r3]
   15f68:	vmul.f32	s14, s15, s14
   15f6c:	vcmpe.f32	s13, s14
   15f70:	vmrs	APSR_nzcv, fpscr
   15f74:	bpl	15efc <__assert_fail@plt+0x48f8>
   15f78:	ldrb	r2, [r3, #16]
   15f7c:	cmp	r2, #0
   15f80:	vldr	s14, [r3, #4]
   15f84:	vmuleq.f32	s15, s15, s14
   15f88:	vldreq	s14, [r3, #8]
   15f8c:	vmul.f32	s15, s15, s14
   15f90:	vcvt.u32.f32	s15, s15
   15f94:	vmov	r1, s15
   15f98:	mov	r0, r4
   15f9c:	bl	15b8c <__assert_fail@plt+0x4588>
   15fa0:	cmp	r0, #0
   15fa4:	bne	15efc <__assert_fail@plt+0x48f8>
   15fa8:	ldr	r0, [r4, #36]	; 0x24
   15fac:	cmp	r0, #0
   15fb0:	beq	15fc8 <__assert_fail@plt+0x49c4>
   15fb4:	ldr	r6, [r0, #4]
   15fb8:	bl	1a034 <__assert_fail@plt+0x8a30>
   15fbc:	mov	r0, r6
   15fc0:	cmp	r6, #0
   15fc4:	bne	15fb4 <__assert_fail@plt+0x49b0>
   15fc8:	mov	r3, #0
   15fcc:	str	r3, [r4, #36]	; 0x24
   15fd0:	b	15efc <__assert_fail@plt+0x48f8>
   15fd4:	str	r4, [sp, #-8]!
   15fd8:	str	lr, [sp, #4]
   15fdc:	bl	15eb8 <__assert_fail@plt+0x48b4>
   15fe0:	ldr	r4, [sp]
   15fe4:	add	sp, sp, #4
   15fe8:	pop	{pc}		; (ldr pc, [sp], #4)
   15fec:	mov	r3, #1
   15ff0:	strb	r3, [r0, #28]
   15ff4:	mov	r3, #0
   15ff8:	str	r3, [r0, #20]
   15ffc:	str	r3, [r0, #24]
   16000:	str	r1, [r0]
   16004:	str	r1, [r0, #4]
   16008:	str	r1, [r0, #8]
   1600c:	str	r1, [r0, #12]
   16010:	str	r1, [r0, #16]
   16014:	bx	lr
   16018:	ldrb	r0, [r0, #28]
   1601c:	bx	lr
   16020:	mov	r2, r0
   16024:	ldrb	ip, [r0, #28]
   16028:	eor	ip, ip, #1
   1602c:	ldr	r3, [r0, #20]
   16030:	add	r3, ip, r3
   16034:	and	r3, r3, #3
   16038:	ldr	r0, [r0, r3, lsl #2]
   1603c:	str	r1, [r2, r3, lsl #2]
   16040:	str	r3, [r2, #20]
   16044:	ldr	r1, [r2, #24]
   16048:	cmp	r1, r3
   1604c:	beq	1605c <__assert_fail@plt+0x4a58>
   16050:	mov	r3, #0
   16054:	strb	r3, [r2, #28]
   16058:	bx	lr
   1605c:	add	ip, ip, r1
   16060:	and	ip, ip, #3
   16064:	str	ip, [r2, #24]
   16068:	b	16050 <__assert_fail@plt+0x4a4c>
   1606c:	ldrb	r3, [r0, #28]
   16070:	cmp	r3, #0
   16074:	bne	160b0 <__assert_fail@plt+0x4aac>
   16078:	ldr	r3, [r0, #20]
   1607c:	ldr	r2, [r0, r3, lsl #2]
   16080:	ldr	r1, [r0, #16]
   16084:	str	r1, [r0, r3, lsl #2]
   16088:	ldr	r1, [r0, #24]
   1608c:	cmp	r3, r1
   16090:	moveq	r3, #1
   16094:	strbeq	r3, [r0, #28]
   16098:	beq	160a8 <__assert_fail@plt+0x4aa4>
   1609c:	add	r3, r3, #3
   160a0:	and	r3, r3, #3
   160a4:	str	r3, [r0, #20]
   160a8:	mov	r0, r2
   160ac:	bx	lr
   160b0:	str	r4, [sp, #-8]!
   160b4:	str	lr, [sp, #4]
   160b8:	bl	115c8 <abort@plt>
   160bc:	push	{r2, r3}
   160c0:	push	{lr}		; (str lr, [sp, #-4]!)
   160c4:	sub	sp, sp, #12
   160c8:	ldr	r2, [sp, #16]
   160cc:	tst	r2, #64	; 0x40
   160d0:	addne	r3, sp, #24
   160d4:	strne	r3, [sp, #4]
   160d8:	ldrne	r3, [sp, #20]
   160dc:	moveq	r3, #0
   160e0:	bl	1146c <openat64@plt>
   160e4:	bl	18d00 <__assert_fail@plt+0x76fc>
   160e8:	add	sp, sp, #12
   160ec:	pop	{lr}		; (ldr lr, [sp], #4)
   160f0:	add	sp, sp, #8
   160f4:	bx	lr
   160f8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   160fc:	strd	r6, [sp, #8]
   16100:	str	r8, [sp, #16]
   16104:	str	lr, [sp, #20]
   16108:	mov	r6, r3
   1610c:	orr	r2, r2, #540672	; 0x84000
   16110:	orr	r2, r2, #2304	; 0x900
   16114:	bl	160bc <__assert_fail@plt+0x4ab8>
   16118:	subs	r4, r0, #0
   1611c:	movlt	r5, #0
   16120:	blt	16138 <__assert_fail@plt+0x4b34>
   16124:	mov	r0, r4
   16128:	bl	11550 <fdopendir@plt>
   1612c:	subs	r5, r0, #0
   16130:	strne	r4, [r6]
   16134:	beq	16150 <__assert_fail@plt+0x4b4c>
   16138:	mov	r0, r5
   1613c:	ldrd	r4, [sp]
   16140:	ldrd	r6, [sp, #8]
   16144:	ldr	r8, [sp, #16]
   16148:	add	sp, sp, #20
   1614c:	pop	{pc}		; (ldr pc, [sp], #4)
   16150:	bl	11484 <__errno_location@plt>
   16154:	mov	r6, r0
   16158:	ldr	r7, [r0]
   1615c:	mov	r0, r4
   16160:	bl	115d4 <close@plt>
   16164:	str	r7, [r6]
   16168:	b	16138 <__assert_fail@plt+0x4b34>
   1616c:	strd	r4, [sp, #-16]!
   16170:	str	r6, [sp, #8]
   16174:	str	lr, [sp, #12]
   16178:	subs	r4, r0, #0
   1617c:	beq	16218 <__assert_fail@plt+0x4c14>
   16180:	mov	r1, #47	; 0x2f
   16184:	mov	r0, r4
   16188:	bl	1152c <strrchr@plt>
   1618c:	subs	r5, r0, #0
   16190:	beq	161f0 <__assert_fail@plt+0x4bec>
   16194:	add	r6, r5, #1
   16198:	sub	r3, r6, r4
   1619c:	cmp	r3, #6
   161a0:	ble	161f0 <__assert_fail@plt+0x4bec>
   161a4:	mov	r2, #7
   161a8:	movw	r1, #47404	; 0xb92c
   161ac:	movt	r1, #1
   161b0:	sub	r0, r5, #6
   161b4:	bl	115bc <strncmp@plt>
   161b8:	cmp	r0, #0
   161bc:	bne	161f0 <__assert_fail@plt+0x4bec>
   161c0:	mov	r2, #3
   161c4:	movw	r1, #47412	; 0xb934
   161c8:	movt	r1, #1
   161cc:	mov	r0, r6
   161d0:	bl	115bc <strncmp@plt>
   161d4:	cmp	r0, #0
   161d8:	movne	r4, r6
   161dc:	bne	161f0 <__assert_fail@plt+0x4bec>
   161e0:	add	r4, r5, #4
   161e4:	movw	r3, #49584	; 0xc1b0
   161e8:	movt	r3, #2
   161ec:	str	r4, [r3]
   161f0:	movw	r3, #49676	; 0xc20c
   161f4:	movt	r3, #2
   161f8:	str	r4, [r3]
   161fc:	movw	r3, #49588	; 0xc1b4
   16200:	movt	r3, #2
   16204:	str	r4, [r3]
   16208:	ldrd	r4, [sp]
   1620c:	ldr	r6, [sp, #8]
   16210:	add	sp, sp, #12
   16214:	pop	{pc}		; (ldr pc, [sp], #4)
   16218:	movw	r3, #49600	; 0xc1c0
   1621c:	movt	r3, #2
   16220:	ldr	r3, [r3]
   16224:	mov	r2, #55	; 0x37
   16228:	mov	r1, #1
   1622c:	movw	r0, #47348	; 0xb8f4
   16230:	movt	r0, #1
   16234:	bl	11364 <fwrite@plt>
   16238:	bl	115c8 <abort@plt>
   1623c:	mov	r2, #0
   16240:	mov	r3, #0
   16244:	strd	r2, [r0]
   16248:	strd	r2, [r0, #8]
   1624c:	strd	r2, [r0, #16]
   16250:	strd	r2, [r0, #24]
   16254:	strd	r2, [r0, #32]
   16258:	strd	r2, [r0, #40]	; 0x28
   1625c:	cmp	r1, #10
   16260:	beq	1626c <__assert_fail@plt+0x4c68>
   16264:	str	r1, [r0]
   16268:	bx	lr
   1626c:	str	r4, [sp, #-8]!
   16270:	str	lr, [sp, #4]
   16274:	bl	115c8 <abort@plt>
   16278:	strd	r4, [sp, #-16]!
   1627c:	str	r6, [sp, #8]
   16280:	str	lr, [sp, #12]
   16284:	mov	r5, r0
   16288:	mov	r6, r1
   1628c:	mov	r2, #5
   16290:	mov	r1, r0
   16294:	mov	r0, #0
   16298:	bl	112f8 <dcgettext@plt>
   1629c:	mov	r4, r0
   162a0:	cmp	r5, r0
   162a4:	beq	162bc <__assert_fail@plt+0x4cb8>
   162a8:	mov	r0, r4
   162ac:	ldrd	r4, [sp]
   162b0:	ldr	r6, [sp, #8]
   162b4:	add	sp, sp, #12
   162b8:	pop	{pc}		; (ldr pc, [sp], #4)
   162bc:	bl	1a154 <__assert_fail@plt+0x8b50>
   162c0:	ldrb	r3, [r0]
   162c4:	bic	r3, r3, #32
   162c8:	cmp	r3, #85	; 0x55
   162cc:	bne	16350 <__assert_fail@plt+0x4d4c>
   162d0:	ldrb	r3, [r0, #1]
   162d4:	bic	r3, r3, #32
   162d8:	cmp	r3, #84	; 0x54
   162dc:	bne	16314 <__assert_fail@plt+0x4d10>
   162e0:	ldrb	r3, [r0, #2]
   162e4:	bic	r3, r3, #32
   162e8:	cmp	r3, #70	; 0x46
   162ec:	bne	16314 <__assert_fail@plt+0x4d10>
   162f0:	ldrb	r3, [r0, #3]
   162f4:	cmp	r3, #45	; 0x2d
   162f8:	bne	16314 <__assert_fail@plt+0x4d10>
   162fc:	ldrb	r3, [r0, #4]
   16300:	cmp	r3, #56	; 0x38
   16304:	bne	16314 <__assert_fail@plt+0x4d10>
   16308:	ldrb	r3, [r0, #5]
   1630c:	cmp	r3, #0
   16310:	beq	16330 <__assert_fail@plt+0x4d2c>
   16314:	movw	r4, #47500	; 0xb98c
   16318:	movt	r4, #1
   1631c:	movw	r3, #47520	; 0xb9a0
   16320:	movt	r3, #1
   16324:	cmp	r6, #9
   16328:	movne	r4, r3
   1632c:	b	162a8 <__assert_fail@plt+0x4ca4>
   16330:	ldrb	r2, [r4]
   16334:	movw	r4, #47516	; 0xb99c
   16338:	movt	r4, #1
   1633c:	movw	r3, #47504	; 0xb990
   16340:	movt	r3, #1
   16344:	cmp	r2, #96	; 0x60
   16348:	movne	r4, r3
   1634c:	b	162a8 <__assert_fail@plt+0x4ca4>
   16350:	cmp	r3, #71	; 0x47
   16354:	bne	16314 <__assert_fail@plt+0x4d10>
   16358:	ldrb	r3, [r0, #1]
   1635c:	bic	r3, r3, #32
   16360:	cmp	r3, #66	; 0x42
   16364:	bne	16314 <__assert_fail@plt+0x4d10>
   16368:	ldrb	r3, [r0, #2]
   1636c:	cmp	r3, #49	; 0x31
   16370:	bne	16314 <__assert_fail@plt+0x4d10>
   16374:	ldrb	r3, [r0, #3]
   16378:	cmp	r3, #56	; 0x38
   1637c:	bne	16314 <__assert_fail@plt+0x4d10>
   16380:	ldrb	r3, [r0, #4]
   16384:	cmp	r3, #48	; 0x30
   16388:	bne	16314 <__assert_fail@plt+0x4d10>
   1638c:	ldrb	r3, [r0, #5]
   16390:	cmp	r3, #51	; 0x33
   16394:	bne	16314 <__assert_fail@plt+0x4d10>
   16398:	ldrb	r3, [r0, #6]
   1639c:	cmp	r3, #48	; 0x30
   163a0:	bne	16314 <__assert_fail@plt+0x4d10>
   163a4:	ldrb	r3, [r0, #7]
   163a8:	cmp	r3, #0
   163ac:	bne	16314 <__assert_fail@plt+0x4d10>
   163b0:	ldrb	r2, [r4]
   163b4:	movw	r4, #47512	; 0xb998
   163b8:	movt	r4, #1
   163bc:	movw	r3, #47508	; 0xb994
   163c0:	movt	r3, #1
   163c4:	cmp	r2, #96	; 0x60
   163c8:	movne	r4, r3
   163cc:	b	162a8 <__assert_fail@plt+0x4ca4>
   163d0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   163d4:	strd	r6, [sp, #8]
   163d8:	strd	r8, [sp, #16]
   163dc:	strd	sl, [sp, #24]
   163e0:	str	lr, [sp, #32]
   163e4:	sub	sp, sp, #116	; 0x74
   163e8:	str	r0, [sp, #64]	; 0x40
   163ec:	mov	r8, r1
   163f0:	str	r2, [sp, #48]	; 0x30
   163f4:	str	r3, [sp, #24]
   163f8:	ldr	r7, [sp, #152]	; 0x98
   163fc:	bl	1137c <__ctype_get_mb_cur_max@plt>
   16400:	str	r0, [sp, #76]	; 0x4c
   16404:	ldr	r3, [sp, #156]	; 0x9c
   16408:	ubfx	r3, r3, #1, #1
   1640c:	str	r3, [sp, #32]
   16410:	mov	r3, #1
   16414:	str	r3, [sp, #40]	; 0x28
   16418:	mov	r3, #0
   1641c:	str	r3, [sp, #68]	; 0x44
   16420:	str	r3, [sp, #36]	; 0x24
   16424:	str	r3, [sp, #28]
   16428:	str	r3, [sp, #52]	; 0x34
   1642c:	str	r3, [sp, #60]	; 0x3c
   16430:	str	r3, [sp, #72]	; 0x48
   16434:	movw	r3, #47524	; 0xb9a4
   16438:	movt	r3, #1
   1643c:	str	r3, [sp, #80]	; 0x50
   16440:	mov	r9, r8
   16444:	mov	sl, r7
   16448:	cmp	sl, #10
   1644c:	ldrls	pc, [pc, sl, lsl #2]
   16450:	b	16614 <__assert_fail@plt+0x5010>
   16454:			; <UNDEFINED> instruction: 0x000164b4
   16458:	andeq	r6, r1, r8, lsl #9
   1645c:	andeq	r6, r1, ip, ror #11
   16460:	andeq	r6, r1, r0, lsl #9
   16464:	andeq	r6, r1, r0, lsr #11
   16468:	andeq	r6, r1, r4, asr #9
   1646c:	muleq	r1, r0, r8
   16470:	andeq	r6, r1, r8, lsl r6
   16474:	andeq	r6, r1, r0, lsl #10
   16478:	andeq	r6, r1, r0, lsl #10
   1647c:	andeq	r6, r1, r0, lsl #10
   16480:	mov	r3, #1
   16484:	str	r3, [sp, #28]
   16488:	mov	r3, #1
   1648c:	str	r3, [sp, #32]
   16490:	str	r3, [sp, #52]	; 0x34
   16494:	movw	r3, #47520	; 0xb9a0
   16498:	movt	r3, #1
   1649c:	str	r3, [sp, #60]	; 0x3c
   164a0:	mov	fp, #0
   164a4:	mov	sl, #2
   164a8:	mov	r6, #0
   164ac:	ldr	r8, [sp, #64]	; 0x40
   164b0:	b	16d28 <__assert_fail@plt+0x5724>
   164b4:	mov	fp, sl
   164b8:	mov	r3, #0
   164bc:	str	r3, [sp, #32]
   164c0:	b	164a8 <__assert_fail@plt+0x4ea4>
   164c4:	ldr	r3, [sp, #32]
   164c8:	cmp	r3, #0
   164cc:	bne	1662c <__assert_fail@plt+0x5028>
   164d0:	cmp	r9, #0
   164d4:	beq	16650 <__assert_fail@plt+0x504c>
   164d8:	mov	r3, #34	; 0x22
   164dc:	ldr	r2, [sp, #64]	; 0x40
   164e0:	strb	r3, [r2]
   164e4:	mov	fp, #1
   164e8:	str	fp, [sp, #28]
   164ec:	str	fp, [sp, #52]	; 0x34
   164f0:	movw	r3, #47500	; 0xb98c
   164f4:	movt	r3, #1
   164f8:	str	r3, [sp, #60]	; 0x3c
   164fc:	b	164a8 <__assert_fail@plt+0x4ea4>
   16500:	cmp	sl, #10
   16504:	bne	16538 <__assert_fail@plt+0x4f34>
   16508:	ldr	r3, [sp, #32]
   1650c:	cmp	r3, #0
   16510:	movne	fp, #0
   16514:	beq	16560 <__assert_fail@plt+0x4f5c>
   16518:	ldr	r0, [sp, #168]	; 0xa8
   1651c:	bl	11460 <strlen@plt>
   16520:	str	r0, [sp, #52]	; 0x34
   16524:	ldr	r3, [sp, #168]	; 0xa8
   16528:	str	r3, [sp, #60]	; 0x3c
   1652c:	mov	r3, #1
   16530:	str	r3, [sp, #28]
   16534:	b	164a8 <__assert_fail@plt+0x4ea4>
   16538:	mov	r1, sl
   1653c:	ldr	r0, [sp, #80]	; 0x50
   16540:	bl	16278 <__assert_fail@plt+0x4c74>
   16544:	str	r0, [sp, #164]	; 0xa4
   16548:	mov	r1, sl
   1654c:	movw	r0, #47520	; 0xb9a0
   16550:	movt	r0, #1
   16554:	bl	16278 <__assert_fail@plt+0x4c74>
   16558:	str	r0, [sp, #168]	; 0xa8
   1655c:	b	16508 <__assert_fail@plt+0x4f04>
   16560:	ldr	r3, [sp, #164]	; 0xa4
   16564:	ldrb	r3, [r3]
   16568:	cmp	r3, #0
   1656c:	beq	16598 <__assert_fail@plt+0x4f94>
   16570:	ldr	r2, [sp, #164]	; 0xa4
   16574:	mov	fp, #0
   16578:	ldr	r1, [sp, #64]	; 0x40
   1657c:	cmp	r9, fp
   16580:	strbhi	r3, [r1, fp]
   16584:	add	fp, fp, #1
   16588:	ldrb	r3, [r2, #1]!
   1658c:	cmp	r3, #0
   16590:	bne	1657c <__assert_fail@plt+0x4f78>
   16594:	b	16518 <__assert_fail@plt+0x4f14>
   16598:	mov	fp, #0
   1659c:	b	16518 <__assert_fail@plt+0x4f14>
   165a0:	ldr	r3, [sp, #32]
   165a4:	cmp	r3, #0
   165a8:	bne	16488 <__assert_fail@plt+0x4e84>
   165ac:	mov	r3, #1
   165b0:	str	r3, [sp, #28]
   165b4:	cmp	r9, #0
   165b8:	beq	1666c <__assert_fail@plt+0x5068>
   165bc:	mov	r3, #39	; 0x27
   165c0:	ldr	r2, [sp, #64]	; 0x40
   165c4:	strb	r3, [r2]
   165c8:	mov	r3, #0
   165cc:	str	r3, [sp, #32]
   165d0:	mov	fp, #1
   165d4:	str	fp, [sp, #52]	; 0x34
   165d8:	movw	r3, #47520	; 0xb9a0
   165dc:	movt	r3, #1
   165e0:	str	r3, [sp, #60]	; 0x3c
   165e4:	mov	sl, #2
   165e8:	b	164a8 <__assert_fail@plt+0x4ea4>
   165ec:	ldr	r3, [sp, #32]
   165f0:	cmp	r3, #0
   165f4:	beq	165b4 <__assert_fail@plt+0x4fb0>
   165f8:	mov	r3, #1
   165fc:	str	r3, [sp, #52]	; 0x34
   16600:	movw	r3, #47520	; 0xb9a0
   16604:	movt	r3, #1
   16608:	str	r3, [sp, #60]	; 0x3c
   1660c:	mov	fp, #0
   16610:	b	164a8 <__assert_fail@plt+0x4ea4>
   16614:	bl	115c8 <abort@plt>
   16618:	mov	fp, #0
   1661c:	str	fp, [sp, #32]
   16620:	mov	r3, #1
   16624:	str	r3, [sp, #28]
   16628:	b	164a8 <__assert_fail@plt+0x4ea4>
   1662c:	ldr	r3, [sp, #32]
   16630:	str	r3, [sp, #28]
   16634:	mov	r3, #1
   16638:	str	r3, [sp, #52]	; 0x34
   1663c:	movw	r3, #47500	; 0xb98c
   16640:	movt	r3, #1
   16644:	str	r3, [sp, #60]	; 0x3c
   16648:	mov	fp, #0
   1664c:	b	164a8 <__assert_fail@plt+0x4ea4>
   16650:	mov	fp, #1
   16654:	str	fp, [sp, #28]
   16658:	str	fp, [sp, #52]	; 0x34
   1665c:	movw	r3, #47500	; 0xb98c
   16660:	movt	r3, #1
   16664:	str	r3, [sp, #60]	; 0x3c
   16668:	b	164a8 <__assert_fail@plt+0x4ea4>
   1666c:	mov	r3, #0
   16670:	str	r3, [sp, #32]
   16674:	mov	fp, #1
   16678:	str	fp, [sp, #52]	; 0x34
   1667c:	movw	r3, #47520	; 0xb9a0
   16680:	movt	r3, #1
   16684:	str	r3, [sp, #60]	; 0x3c
   16688:	mov	sl, #2
   1668c:	b	164a8 <__assert_fail@plt+0x4ea4>
   16690:	mov	r3, r2
   16694:	add	r4, r6, r2
   16698:	ldr	r2, [sp, #24]
   1669c:	cmp	r3, #1
   166a0:	movls	r3, #0
   166a4:	movhi	r3, #1
   166a8:	cmn	r2, #1
   166ac:	movne	r3, #0
   166b0:	cmp	r3, #0
   166b4:	beq	166c4 <__assert_fail@plt+0x50c0>
   166b8:	ldr	r0, [sp, #48]	; 0x30
   166bc:	bl	11460 <strlen@plt>
   166c0:	str	r0, [sp, #24]
   166c4:	ldr	r3, [sp, #24]
   166c8:	cmp	r4, r3
   166cc:	bhi	178b8 <__assert_fail@plt+0x62b4>
   166d0:	ldr	r3, [sp, #48]	; 0x30
   166d4:	add	r4, r3, r6
   166d8:	ldr	r2, [sp, #52]	; 0x34
   166dc:	ldr	r1, [sp, #60]	; 0x3c
   166e0:	mov	r0, r4
   166e4:	bl	112d4 <memcmp@plt>
   166e8:	cmp	r0, #0
   166ec:	bne	178b8 <__assert_fail@plt+0x62b4>
   166f0:	ldr	r3, [sp, #32]
   166f4:	cmp	r3, #0
   166f8:	bne	16908 <__assert_fail@plt+0x5304>
   166fc:	ldrb	r4, [r4]
   16700:	cmp	r4, #126	; 0x7e
   16704:	ldrls	pc, [pc, r4, lsl #2]
   16708:	b	171bc <__assert_fail@plt+0x5bb8>
   1670c:	andeq	r6, r1, ip, asr #18
   16710:			; <UNDEFINED> instruction: 0x000171bc
   16714:			; <UNDEFINED> instruction: 0x000171bc
   16718:			; <UNDEFINED> instruction: 0x000171bc
   1671c:			; <UNDEFINED> instruction: 0x000171bc
   16720:			; <UNDEFINED> instruction: 0x000171bc
   16724:			; <UNDEFINED> instruction: 0x000171bc
   16728:	andeq	r7, r1, r4, rrx
   1672c:	andeq	r6, r1, r8, ror #23
   16730:	andeq	r6, r1, ip, lsl #31
   16734:	andeq	r7, r1, r8, lsr r0
   16738:	andeq	r6, r1, r0, lsr #31
   1673c:	strdeq	r6, [r1], -ip
   16740:	andeq	r6, r1, r0, lsl ip
   16744:			; <UNDEFINED> instruction: 0x000171bc
   16748:			; <UNDEFINED> instruction: 0x000171bc
   1674c:			; <UNDEFINED> instruction: 0x000171bc
   16750:			; <UNDEFINED> instruction: 0x000171bc
   16754:			; <UNDEFINED> instruction: 0x000171bc
   16758:			; <UNDEFINED> instruction: 0x000171bc
   1675c:			; <UNDEFINED> instruction: 0x000171bc
   16760:			; <UNDEFINED> instruction: 0x000171bc
   16764:			; <UNDEFINED> instruction: 0x000171bc
   16768:			; <UNDEFINED> instruction: 0x000171bc
   1676c:			; <UNDEFINED> instruction: 0x000171bc
   16770:			; <UNDEFINED> instruction: 0x000171bc
   16774:			; <UNDEFINED> instruction: 0x000171bc
   16778:			; <UNDEFINED> instruction: 0x000171bc
   1677c:			; <UNDEFINED> instruction: 0x000171bc
   16780:			; <UNDEFINED> instruction: 0x000171bc
   16784:			; <UNDEFINED> instruction: 0x000171bc
   16788:			; <UNDEFINED> instruction: 0x000171bc
   1678c:	ldrdeq	r7, [r1], -r8
   16790:	strdeq	r7, [r1], -ip
   16794:	strdeq	r7, [r1], -ip
   16798:	muleq	r1, r4, r0
   1679c:	strdeq	r7, [r1], -ip
   167a0:	andeq	r7, r1, ip, lsl r6
   167a4:	strdeq	r7, [r1], -ip
   167a8:	andeq	r7, r1, ip, lsl r1
   167ac:	strdeq	r7, [r1], -ip
   167b0:	strdeq	r7, [r1], -ip
   167b4:	strdeq	r7, [r1], -ip
   167b8:	andeq	r7, r1, ip, lsl r6
   167bc:	andeq	r7, r1, ip, lsl r6
   167c0:	andeq	r7, r1, ip, lsl r6
   167c4:	andeq	r7, r1, ip, lsl r6
   167c8:	andeq	r7, r1, ip, lsl r6
   167cc:	andeq	r7, r1, ip, lsl r6
   167d0:	andeq	r7, r1, ip, lsl r6
   167d4:	andeq	r7, r1, ip, lsl r6
   167d8:	andeq	r7, r1, ip, lsl r6
   167dc:	andeq	r7, r1, ip, lsl r6
   167e0:	andeq	r7, r1, ip, lsl r6
   167e4:	andeq	r7, r1, ip, lsl r6
   167e8:	andeq	r7, r1, ip, lsl r6
   167ec:	andeq	r7, r1, ip, lsl r6
   167f0:	andeq	r7, r1, ip, lsl r6
   167f4:	andeq	r7, r1, ip, lsl r6
   167f8:	strdeq	r7, [r1], -ip
   167fc:	strdeq	r7, [r1], -ip
   16800:	strdeq	r7, [r1], -ip
   16804:	strdeq	r7, [r1], -ip
   16808:	andeq	r6, r1, ip, ror sl
   1680c:			; <UNDEFINED> instruction: 0x000171bc
   16810:	andeq	r7, r1, ip, lsl r6
   16814:	andeq	r7, r1, ip, lsl r6
   16818:	andeq	r7, r1, ip, lsl r6
   1681c:	andeq	r7, r1, ip, lsl r6
   16820:	andeq	r7, r1, ip, lsl r6
   16824:	andeq	r7, r1, ip, lsl r6
   16828:	andeq	r7, r1, ip, lsl r6
   1682c:	andeq	r7, r1, ip, lsl r6
   16830:	andeq	r7, r1, ip, lsl r6
   16834:	andeq	r7, r1, ip, lsl r6
   16838:	andeq	r7, r1, ip, lsl r6
   1683c:	andeq	r7, r1, ip, lsl r6
   16840:	andeq	r7, r1, ip, lsl r6
   16844:	andeq	r7, r1, ip, lsl r6
   16848:	andeq	r7, r1, ip, lsl r6
   1684c:	andeq	r7, r1, ip, lsl r6
   16850:	andeq	r7, r1, ip, lsl r6
   16854:	andeq	r7, r1, ip, lsl r6
   16858:	andeq	r7, r1, ip, lsl r6
   1685c:	andeq	r7, r1, ip, lsl r6
   16860:	andeq	r7, r1, ip, lsl r6
   16864:	andeq	r7, r1, ip, lsl r6
   16868:	andeq	r7, r1, ip, lsl r6
   1686c:	andeq	r7, r1, ip, lsl r6
   16870:	andeq	r7, r1, ip, lsl r6
   16874:	andeq	r7, r1, ip, lsl r6
   16878:	strdeq	r7, [r1], -ip
   1687c:			; <UNDEFINED> instruction: 0x00016fb4
   16880:	andeq	r7, r1, ip, lsl r6
   16884:	strdeq	r7, [r1], -ip
   16888:	andeq	r7, r1, ip, lsl r6
   1688c:	strdeq	r7, [r1], -ip
   16890:	andeq	r7, r1, ip, lsl r6
   16894:	andeq	r7, r1, ip, lsl r6
   16898:	andeq	r7, r1, ip, lsl r6
   1689c:	andeq	r7, r1, ip, lsl r6
   168a0:	andeq	r7, r1, ip, lsl r6
   168a4:	andeq	r7, r1, ip, lsl r6
   168a8:	andeq	r7, r1, ip, lsl r6
   168ac:	andeq	r7, r1, ip, lsl r6
   168b0:	andeq	r7, r1, ip, lsl r6
   168b4:	andeq	r7, r1, ip, lsl r6
   168b8:	andeq	r7, r1, ip, lsl r6
   168bc:	andeq	r7, r1, ip, lsl r6
   168c0:	andeq	r7, r1, ip, lsl r6
   168c4:	andeq	r7, r1, ip, lsl r6
   168c8:	andeq	r7, r1, ip, lsl r6
   168cc:	andeq	r7, r1, ip, lsl r6
   168d0:	andeq	r7, r1, ip, lsl r6
   168d4:	andeq	r7, r1, ip, lsl r6
   168d8:	andeq	r7, r1, ip, lsl r6
   168dc:	andeq	r7, r1, ip, lsl r6
   168e0:	andeq	r7, r1, ip, lsl r6
   168e4:	andeq	r7, r1, ip, lsl r6
   168e8:	andeq	r7, r1, ip, lsl r6
   168ec:	andeq	r7, r1, ip, lsl r6
   168f0:	andeq	r7, r1, ip, lsl r6
   168f4:	andeq	r7, r1, ip, lsl r6
   168f8:	andeq	r7, r1, r4, ror r0
   168fc:	strdeq	r7, [r1], -ip
   16900:	andeq	r7, r1, r4, ror r0
   16904:	muleq	r1, r4, r0
   16908:	mov	r8, r9
   1690c:	mov	r7, sl
   16910:	b	17810 <__assert_fail@plt+0x620c>
   16914:	ldr	r3, [sp, #28]
   16918:	cmp	r3, #0
   1691c:	bne	1693c <__assert_fail@plt+0x5338>
   16920:	ldr	r3, [sp, #156]	; 0x9c
   16924:	tst	r3, #1
   16928:	bne	16d24 <__assert_fail@plt+0x5720>
   1692c:	ldr	r3, [sp, #28]
   16930:	str	r3, [sp, #44]	; 0x2c
   16934:	mov	r5, r3
   16938:	b	16c44 <__assert_fail@plt+0x5640>
   1693c:	ldr	r3, [sp, #32]
   16940:	cmp	r3, #0
   16944:	bne	177c0 <__assert_fail@plt+0x61bc>
   16948:	str	r3, [sp, #44]	; 0x2c
   1694c:	ldr	r3, [sp, #36]	; 0x24
   16950:	eor	r3, r3, #1
   16954:	cmp	sl, #2
   16958:	movne	r3, #0
   1695c:	andeq	r3, r3, #1
   16960:	cmp	r3, #0
   16964:	beq	169bc <__assert_fail@plt+0x53b8>
   16968:	cmp	r9, fp
   1696c:	movhi	r2, #39	; 0x27
   16970:	strbhi	r2, [r8, fp]
   16974:	add	r2, fp, #1
   16978:	cmp	r9, r2
   1697c:	movhi	r1, #36	; 0x24
   16980:	strbhi	r1, [r8, r2]
   16984:	add	r2, fp, #2
   16988:	cmp	r9, r2
   1698c:	movhi	r1, #39	; 0x27
   16990:	strbhi	r1, [r8, r2]
   16994:	add	r2, fp, #3
   16998:	cmp	r9, r2
   1699c:	bls	1787c <__assert_fail@plt+0x6278>
   169a0:	mov	r1, #92	; 0x5c
   169a4:	strb	r1, [r8, r2]
   169a8:	add	fp, fp, #4
   169ac:	str	r3, [sp, #36]	; 0x24
   169b0:	mov	r5, #0
   169b4:	mov	r4, #48	; 0x30
   169b8:	b	16c90 <__assert_fail@plt+0x568c>
   169bc:	cmp	r9, fp
   169c0:	bhi	169e8 <__assert_fail@plt+0x53e4>
   169c4:	add	r1, fp, #1
   169c8:	ldr	r2, [sp, #56]	; 0x38
   169cc:	cmp	r2, #0
   169d0:	bne	16a10 <__assert_fail@plt+0x540c>
   169d4:	mov	r3, r5
   169d8:	ldr	r5, [sp, #56]	; 0x38
   169dc:	mov	fp, r1
   169e0:	mov	r4, #48	; 0x30
   169e4:	b	16c44 <__assert_fail@plt+0x5640>
   169e8:	mov	r2, #92	; 0x5c
   169ec:	strb	r2, [r8, fp]
   169f0:	add	r1, fp, #1
   169f4:	ldr	r2, [sp, #56]	; 0x38
   169f8:	cmp	r2, #0
   169fc:	moveq	r3, r5
   16a00:	moveq	r5, r2
   16a04:	moveq	fp, r1
   16a08:	moveq	r4, #48	; 0x30
   16a0c:	beq	16c90 <__assert_fail@plt+0x568c>
   16a10:	add	r2, r6, #1
   16a14:	ldr	r0, [sp, #24]
   16a18:	cmp	r2, r0
   16a1c:	bcs	16a38 <__assert_fail@plt+0x5434>
   16a20:	ldr	r0, [sp, #48]	; 0x30
   16a24:	ldrb	r2, [r0, r2]
   16a28:	sub	r2, r2, #48	; 0x30
   16a2c:	uxtb	r2, r2
   16a30:	cmp	r2, #9
   16a34:	bls	16a50 <__assert_fail@plt+0x544c>
   16a38:	mov	r2, r3
   16a3c:	mov	r3, r5
   16a40:	mov	r5, r2
   16a44:	mov	fp, r1
   16a48:	mov	r4, #48	; 0x30
   16a4c:	b	16c68 <__assert_fail@plt+0x5664>
   16a50:	cmp	r9, r1
   16a54:	movhi	r2, #48	; 0x30
   16a58:	strbhi	r2, [r8, r1]
   16a5c:	add	r2, fp, #2
   16a60:	cmp	r9, r2
   16a64:	movhi	r1, #48	; 0x30
   16a68:	strbhi	r1, [r8, r2]
   16a6c:	add	r1, fp, #3
   16a70:	b	16a38 <__assert_fail@plt+0x5434>
   16a74:	mov	r3, #0
   16a78:	str	r3, [sp, #44]	; 0x2c
   16a7c:	cmp	sl, #2
   16a80:	beq	16a9c <__assert_fail@plt+0x5498>
   16a84:	cmp	sl, #5
   16a88:	beq	16ab4 <__assert_fail@plt+0x54b0>
   16a8c:	mov	r5, #0
   16a90:	mov	r3, r5
   16a94:	mov	r4, #63	; 0x3f
   16a98:	b	16c44 <__assert_fail@plt+0x5640>
   16a9c:	ldr	r3, [sp, #32]
   16aa0:	cmp	r3, #0
   16aa4:	bne	177cc <__assert_fail@plt+0x61c8>
   16aa8:	mov	r5, r3
   16aac:	mov	r4, #63	; 0x3f
   16ab0:	b	171ac <__assert_fail@plt+0x5ba8>
   16ab4:	ldr	r3, [sp, #156]	; 0x9c
   16ab8:	tst	r3, #4
   16abc:	beq	175e4 <__assert_fail@plt+0x5fe0>
   16ac0:	add	r2, r6, #2
   16ac4:	ldr	r3, [sp, #24]
   16ac8:	cmp	r2, r3
   16acc:	bcs	175f4 <__assert_fail@plt+0x5ff0>
   16ad0:	ldr	r3, [sp, #48]	; 0x30
   16ad4:	add	r3, r3, r6
   16ad8:	ldrb	r4, [r3, #1]
   16adc:	cmp	r4, #63	; 0x3f
   16ae0:	movne	r5, #0
   16ae4:	movne	r3, r5
   16ae8:	movne	r4, #63	; 0x3f
   16aec:	bne	16c44 <__assert_fail@plt+0x5640>
   16af0:	ldr	r3, [sp, #48]	; 0x30
   16af4:	ldrb	r1, [r3, r2]
   16af8:	sub	r3, r1, #33	; 0x21
   16afc:	cmp	r3, #29
   16b00:	ldrls	pc, [pc, r3, lsl #2]
   16b04:	b	17604 <__assert_fail@plt+0x6000>
   16b08:	andeq	r6, r1, r0, lsl #23
   16b0c:	andeq	r7, r1, r4, lsl #12
   16b10:	andeq	r7, r1, r4, lsl #12
   16b14:	andeq	r7, r1, r4, lsl #12
   16b18:	andeq	r7, r1, r4, lsl #12
   16b1c:	andeq	r7, r1, r4, lsl #12
   16b20:	andeq	r6, r1, r0, lsl #23
   16b24:	andeq	r6, r1, r0, lsl #23
   16b28:	andeq	r6, r1, r0, lsl #23
   16b2c:	andeq	r7, r1, r4, lsl #12
   16b30:	andeq	r7, r1, r4, lsl #12
   16b34:	andeq	r7, r1, r4, lsl #12
   16b38:	andeq	r6, r1, r0, lsl #23
   16b3c:	andeq	r7, r1, r4, lsl #12
   16b40:	andeq	r6, r1, r0, lsl #23
   16b44:	andeq	r7, r1, r4, lsl #12
   16b48:	andeq	r7, r1, r4, lsl #12
   16b4c:	andeq	r7, r1, r4, lsl #12
   16b50:	andeq	r7, r1, r4, lsl #12
   16b54:	andeq	r7, r1, r4, lsl #12
   16b58:	andeq	r7, r1, r4, lsl #12
   16b5c:	andeq	r7, r1, r4, lsl #12
   16b60:	andeq	r7, r1, r4, lsl #12
   16b64:	andeq	r7, r1, r4, lsl #12
   16b68:	andeq	r7, r1, r4, lsl #12
   16b6c:	andeq	r7, r1, r4, lsl #12
   16b70:	andeq	r7, r1, r4, lsl #12
   16b74:	andeq	r6, r1, r0, lsl #23
   16b78:	andeq	r6, r1, r0, lsl #23
   16b7c:	andeq	r6, r1, r0, lsl #23
   16b80:	ldr	r3, [sp, #32]
   16b84:	cmp	r3, #0
   16b88:	bne	17870 <__assert_fail@plt+0x626c>
   16b8c:	cmp	r9, fp
   16b90:	movhi	r3, #63	; 0x3f
   16b94:	strbhi	r3, [r8, fp]
   16b98:	add	r3, fp, #1
   16b9c:	cmp	r9, r3
   16ba0:	movhi	r0, #34	; 0x22
   16ba4:	strbhi	r0, [r8, r3]
   16ba8:	add	r3, fp, #2
   16bac:	cmp	r9, r3
   16bb0:	movhi	r0, #34	; 0x22
   16bb4:	strbhi	r0, [r8, r3]
   16bb8:	add	r3, fp, #3
   16bbc:	cmp	r9, r3
   16bc0:	movhi	r0, #63	; 0x3f
   16bc4:	strbhi	r0, [r8, r3]
   16bc8:	add	fp, fp, #4
   16bcc:	ldr	r3, [sp, #32]
   16bd0:	mov	r5, r3
   16bd4:	mov	r4, r1
   16bd8:	mov	r6, r2
   16bdc:	b	16c44 <__assert_fail@plt+0x5640>
   16be0:	mov	r3, #0
   16be4:	str	r3, [sp, #44]	; 0x2c
   16be8:	mov	r4, #8
   16bec:	mov	r3, #98	; 0x62
   16bf0:	b	16c30 <__assert_fail@plt+0x562c>
   16bf4:	mov	r3, #0
   16bf8:	str	r3, [sp, #44]	; 0x2c
   16bfc:	mov	r4, #12
   16c00:	mov	r3, #102	; 0x66
   16c04:	b	16c30 <__assert_fail@plt+0x562c>
   16c08:	mov	r3, #0
   16c0c:	str	r3, [sp, #44]	; 0x2c
   16c10:	mov	r4, #13
   16c14:	mov	r3, #114	; 0x72
   16c18:	ldr	r2, [sp, #32]
   16c1c:	cmp	sl, #2
   16c20:	movne	r2, #0
   16c24:	andeq	r2, r2, #1
   16c28:	cmp	r2, #0
   16c2c:	bne	17050 <__assert_fail@plt+0x5a4c>
   16c30:	ldr	r2, [sp, #28]
   16c34:	cmp	r2, #0
   16c38:	bne	17638 <__assert_fail@plt+0x6034>
   16c3c:	mov	r5, r2
   16c40:	mov	r3, r2
   16c44:	ldr	r2, [sp, #28]
   16c48:	eor	r2, r2, #1
   16c4c:	cmp	sl, #2
   16c50:	orreq	r2, r2, #1
   16c54:	eor	r2, r2, #1
   16c58:	ldr	r1, [sp, #32]
   16c5c:	orr	r2, r1, r2
   16c60:	tst	r2, #255	; 0xff
   16c64:	beq	16c90 <__assert_fail@plt+0x568c>
   16c68:	ldr	r2, [sp, #160]	; 0xa0
   16c6c:	cmp	r2, #0
   16c70:	beq	16c90 <__assert_fail@plt+0x568c>
   16c74:	ubfx	r1, r4, #5, #8
   16c78:	and	r2, r4, #31
   16c7c:	ldr	r0, [sp, #160]	; 0xa0
   16c80:	ldr	r1, [r0, r1, lsl #2]
   16c84:	lsr	r2, r1, r2
   16c88:	tst	r2, #1
   16c8c:	bne	16c9c <__assert_fail@plt+0x5698>
   16c90:	ldr	r2, [sp, #44]	; 0x2c
   16c94:	cmp	r2, #0
   16c98:	beq	16ff0 <__assert_fail@plt+0x59ec>
   16c9c:	ldr	r3, [sp, #32]
   16ca0:	cmp	r3, #0
   16ca4:	bne	177f0 <__assert_fail@plt+0x61ec>
   16ca8:	ldr	r3, [sp, #36]	; 0x24
   16cac:	eor	r3, r3, #1
   16cb0:	cmp	sl, #2
   16cb4:	movne	r3, #0
   16cb8:	andeq	r3, r3, #1
   16cbc:	cmp	r3, #0
   16cc0:	beq	16cf8 <__assert_fail@plt+0x56f4>
   16cc4:	cmp	r9, fp
   16cc8:	movhi	r2, #39	; 0x27
   16ccc:	strbhi	r2, [r8, fp]
   16cd0:	add	r2, fp, #1
   16cd4:	cmp	r9, r2
   16cd8:	movhi	r1, #36	; 0x24
   16cdc:	strbhi	r1, [r8, r2]
   16ce0:	add	r2, fp, #2
   16ce4:	cmp	r9, r2
   16ce8:	movhi	r1, #39	; 0x27
   16cec:	strbhi	r1, [r8, r2]
   16cf0:	add	fp, fp, #3
   16cf4:	str	r3, [sp, #36]	; 0x24
   16cf8:	cmp	r9, fp
   16cfc:	movhi	r3, #92	; 0x5c
   16d00:	strbhi	r3, [r8, fp]
   16d04:	add	fp, fp, #1
   16d08:	cmp	fp, r9
   16d0c:	strbcc	r4, [r8, fp]
   16d10:	add	fp, fp, #1
   16d14:	cmp	r5, #0
   16d18:	ldr	r3, [sp, #40]	; 0x28
   16d1c:	moveq	r3, r5
   16d20:	str	r3, [sp, #40]	; 0x28
   16d24:	add	r6, r6, #1
   16d28:	ldr	r3, [sp, #24]
   16d2c:	cmn	r3, #1
   16d30:	beq	17660 <__assert_fail@plt+0x605c>
   16d34:	ldr	r3, [sp, #24]
   16d38:	subs	r5, r3, r6
   16d3c:	movne	r5, #1
   16d40:	cmp	r5, #0
   16d44:	beq	17674 <__assert_fail@plt+0x6070>
   16d48:	ldr	r3, [sp, #28]
   16d4c:	cmp	sl, #2
   16d50:	moveq	r3, #0
   16d54:	andne	r3, r3, #1
   16d58:	str	r3, [sp, #56]	; 0x38
   16d5c:	ldr	r2, [sp, #52]	; 0x34
   16d60:	adds	r7, r2, #0
   16d64:	movne	r7, #1
   16d68:	ands	r3, r3, r7
   16d6c:	str	r3, [sp, #44]	; 0x2c
   16d70:	bne	16690 <__assert_fail@plt+0x508c>
   16d74:	ldr	r3, [sp, #48]	; 0x30
   16d78:	ldrb	r4, [r3, r6]
   16d7c:	cmp	r4, #126	; 0x7e
   16d80:	ldrls	pc, [pc, r4, lsl #2]
   16d84:	b	171bc <__assert_fail@plt+0x5bb8>
   16d88:	andeq	r6, r1, r4, lsl r9
   16d8c:			; <UNDEFINED> instruction: 0x000171bc
   16d90:			; <UNDEFINED> instruction: 0x000171bc
   16d94:			; <UNDEFINED> instruction: 0x000171bc
   16d98:			; <UNDEFINED> instruction: 0x000171bc
   16d9c:			; <UNDEFINED> instruction: 0x000171bc
   16da0:			; <UNDEFINED> instruction: 0x000171bc
   16da4:	andeq	r7, r1, ip, asr r0
   16da8:	andeq	r6, r1, r8, ror #23
   16dac:	andeq	r6, r1, ip, lsl #31
   16db0:	andeq	r7, r1, r0, lsr r0
   16db4:	andeq	r6, r1, r0, lsr #31
   16db8:	strdeq	r6, [r1], -ip
   16dbc:	andeq	r6, r1, r0, lsl ip
   16dc0:			; <UNDEFINED> instruction: 0x000171bc
   16dc4:			; <UNDEFINED> instruction: 0x000171bc
   16dc8:			; <UNDEFINED> instruction: 0x000171bc
   16dcc:			; <UNDEFINED> instruction: 0x000171bc
   16dd0:			; <UNDEFINED> instruction: 0x000171bc
   16dd4:			; <UNDEFINED> instruction: 0x000171bc
   16dd8:			; <UNDEFINED> instruction: 0x000171bc
   16ddc:			; <UNDEFINED> instruction: 0x000171bc
   16de0:			; <UNDEFINED> instruction: 0x000171bc
   16de4:			; <UNDEFINED> instruction: 0x000171bc
   16de8:			; <UNDEFINED> instruction: 0x000171bc
   16dec:			; <UNDEFINED> instruction: 0x000171bc
   16df0:			; <UNDEFINED> instruction: 0x000171bc
   16df4:			; <UNDEFINED> instruction: 0x000171bc
   16df8:			; <UNDEFINED> instruction: 0x000171bc
   16dfc:			; <UNDEFINED> instruction: 0x000171bc
   16e00:			; <UNDEFINED> instruction: 0x000171bc
   16e04:			; <UNDEFINED> instruction: 0x000171bc
   16e08:	ldrdeq	r7, [r1], -r8
   16e0c:	ldrdeq	r7, [r1], -r4
   16e10:	ldrdeq	r7, [r1], -r4
   16e14:	muleq	r1, r4, r0
   16e18:	ldrdeq	r7, [r1], -r4
   16e1c:	ldrdeq	r7, [r1], -ip
   16e20:	ldrdeq	r7, [r1], -r4
   16e24:	andeq	r7, r1, ip, lsl r1
   16e28:	ldrdeq	r7, [r1], -r4
   16e2c:	ldrdeq	r7, [r1], -r4
   16e30:	ldrdeq	r7, [r1], -r4
   16e34:	ldrdeq	r7, [r1], -ip
   16e38:	ldrdeq	r7, [r1], -ip
   16e3c:	ldrdeq	r7, [r1], -ip
   16e40:	ldrdeq	r7, [r1], -ip
   16e44:	ldrdeq	r7, [r1], -ip
   16e48:	ldrdeq	r7, [r1], -ip
   16e4c:	ldrdeq	r7, [r1], -ip
   16e50:	ldrdeq	r7, [r1], -ip
   16e54:	ldrdeq	r7, [r1], -ip
   16e58:	ldrdeq	r7, [r1], -ip
   16e5c:	ldrdeq	r7, [r1], -ip
   16e60:	ldrdeq	r7, [r1], -ip
   16e64:	ldrdeq	r7, [r1], -ip
   16e68:	ldrdeq	r7, [r1], -ip
   16e6c:	ldrdeq	r7, [r1], -ip
   16e70:	ldrdeq	r7, [r1], -ip
   16e74:	ldrdeq	r7, [r1], -r4
   16e78:	ldrdeq	r7, [r1], -r4
   16e7c:	ldrdeq	r7, [r1], -r4
   16e80:	ldrdeq	r7, [r1], -r4
   16e84:	andeq	r6, r1, ip, ror sl
   16e88:			; <UNDEFINED> instruction: 0x000171bc
   16e8c:	ldrdeq	r7, [r1], -ip
   16e90:	ldrdeq	r7, [r1], -ip
   16e94:	ldrdeq	r7, [r1], -ip
   16e98:	ldrdeq	r7, [r1], -ip
   16e9c:	ldrdeq	r7, [r1], -ip
   16ea0:	ldrdeq	r7, [r1], -ip
   16ea4:	ldrdeq	r7, [r1], -ip
   16ea8:	ldrdeq	r7, [r1], -ip
   16eac:	ldrdeq	r7, [r1], -ip
   16eb0:	ldrdeq	r7, [r1], -ip
   16eb4:	ldrdeq	r7, [r1], -ip
   16eb8:	ldrdeq	r7, [r1], -ip
   16ebc:	ldrdeq	r7, [r1], -ip
   16ec0:	ldrdeq	r7, [r1], -ip
   16ec4:	ldrdeq	r7, [r1], -ip
   16ec8:	ldrdeq	r7, [r1], -ip
   16ecc:	ldrdeq	r7, [r1], -ip
   16ed0:	ldrdeq	r7, [r1], -ip
   16ed4:	ldrdeq	r7, [r1], -ip
   16ed8:	ldrdeq	r7, [r1], -ip
   16edc:	ldrdeq	r7, [r1], -ip
   16ee0:	ldrdeq	r7, [r1], -ip
   16ee4:	ldrdeq	r7, [r1], -ip
   16ee8:	ldrdeq	r7, [r1], -ip
   16eec:	ldrdeq	r7, [r1], -ip
   16ef0:	ldrdeq	r7, [r1], -ip
   16ef4:	ldrdeq	r7, [r1], -r4
   16ef8:			; <UNDEFINED> instruction: 0x00016fb4
   16efc:	ldrdeq	r7, [r1], -ip
   16f00:	ldrdeq	r7, [r1], -r4
   16f04:	ldrdeq	r7, [r1], -ip
   16f08:	ldrdeq	r7, [r1], -r4
   16f0c:	ldrdeq	r7, [r1], -ip
   16f10:	ldrdeq	r7, [r1], -ip
   16f14:	ldrdeq	r7, [r1], -ip
   16f18:	ldrdeq	r7, [r1], -ip
   16f1c:	ldrdeq	r7, [r1], -ip
   16f20:	ldrdeq	r7, [r1], -ip
   16f24:	ldrdeq	r7, [r1], -ip
   16f28:	ldrdeq	r7, [r1], -ip
   16f2c:	ldrdeq	r7, [r1], -ip
   16f30:	ldrdeq	r7, [r1], -ip
   16f34:	ldrdeq	r7, [r1], -ip
   16f38:	ldrdeq	r7, [r1], -ip
   16f3c:	ldrdeq	r7, [r1], -ip
   16f40:	ldrdeq	r7, [r1], -ip
   16f44:	ldrdeq	r7, [r1], -ip
   16f48:	ldrdeq	r7, [r1], -ip
   16f4c:	ldrdeq	r7, [r1], -ip
   16f50:	ldrdeq	r7, [r1], -ip
   16f54:	ldrdeq	r7, [r1], -ip
   16f58:	ldrdeq	r7, [r1], -ip
   16f5c:	ldrdeq	r7, [r1], -ip
   16f60:	ldrdeq	r7, [r1], -ip
   16f64:	ldrdeq	r7, [r1], -ip
   16f68:	ldrdeq	r7, [r1], -ip
   16f6c:	ldrdeq	r7, [r1], -ip
   16f70:	ldrdeq	r7, [r1], -ip
   16f74:	andeq	r7, r1, r4, ror r0
   16f78:	ldrdeq	r7, [r1], -r4
   16f7c:	andeq	r7, r1, r4, ror r0
   16f80:	muleq	r1, r4, r0
   16f84:	mov	r3, #0
   16f88:	str	r3, [sp, #44]	; 0x2c
   16f8c:	mov	r4, #9
   16f90:	mov	r3, #116	; 0x74
   16f94:	b	16c18 <__assert_fail@plt+0x5614>
   16f98:	mov	r3, #0
   16f9c:	str	r3, [sp, #44]	; 0x2c
   16fa0:	mov	r4, #11
   16fa4:	mov	r3, #118	; 0x76
   16fa8:	b	16c30 <__assert_fail@plt+0x562c>
   16fac:	mov	r3, #0
   16fb0:	str	r3, [sp, #44]	; 0x2c
   16fb4:	cmp	sl, #2
   16fb8:	beq	16fdc <__assert_fail@plt+0x59d8>
   16fbc:	ldr	r3, [sp, #28]
   16fc0:	ldr	r2, [sp, #32]
   16fc4:	and	r3, r3, r2
   16fc8:	tst	r7, r3
   16fcc:	bne	17650 <__assert_fail@plt+0x604c>
   16fd0:	mov	r4, #92	; 0x5c
   16fd4:	mov	r3, r4
   16fd8:	b	16c30 <__assert_fail@plt+0x562c>
   16fdc:	ldr	r3, [sp, #32]
   16fe0:	cmp	r3, #0
   16fe4:	bne	177d8 <__assert_fail@plt+0x61d4>
   16fe8:	mov	r5, r3
   16fec:	mov	r4, #92	; 0x5c
   16ff0:	eor	r3, r3, #1
   16ff4:	ldr	r2, [sp, #36]	; 0x24
   16ff8:	and	r3, r3, r2
   16ffc:	tst	r3, #255	; 0xff
   17000:	beq	16d08 <__assert_fail@plt+0x5704>
   17004:	cmp	r9, fp
   17008:	movhi	r3, #39	; 0x27
   1700c:	strbhi	r3, [r8, fp]
   17010:	add	r3, fp, #1
   17014:	cmp	r9, r3
   17018:	movhi	r2, #39	; 0x27
   1701c:	strbhi	r2, [r8, r3]
   17020:	add	fp, fp, #2
   17024:	mov	r3, #0
   17028:	str	r3, [sp, #36]	; 0x24
   1702c:	b	16d08 <__assert_fail@plt+0x5704>
   17030:	mov	r3, #110	; 0x6e
   17034:	b	16c18 <__assert_fail@plt+0x5614>
   17038:	mov	r3, #110	; 0x6e
   1703c:	b	16c18 <__assert_fail@plt+0x5614>
   17040:	mov	r3, #0
   17044:	str	r3, [sp, #44]	; 0x2c
   17048:	mov	r3, #110	; 0x6e
   1704c:	b	16c18 <__assert_fail@plt+0x5614>
   17050:	mov	r8, r9
   17054:	mov	r7, #2
   17058:	b	177f8 <__assert_fail@plt+0x61f4>
   1705c:	mov	r3, #97	; 0x61
   17060:	b	16c30 <__assert_fail@plt+0x562c>
   17064:	mov	r3, #97	; 0x61
   17068:	b	16c30 <__assert_fail@plt+0x562c>
   1706c:	mov	r3, #0
   17070:	str	r3, [sp, #44]	; 0x2c
   17074:	ldr	r3, [sp, #24]
   17078:	cmn	r3, #1
   1707c:	beq	170a8 <__assert_fail@plt+0x5aa4>
   17080:	ldr	r3, [sp, #24]
   17084:	subs	r3, r3, #1
   17088:	movne	r3, #1
   1708c:	cmp	r3, #0
   17090:	bne	17610 <__assert_fail@plt+0x600c>
   17094:	cmp	r6, #0
   17098:	beq	170d8 <__assert_fail@plt+0x5ad4>
   1709c:	mov	r5, #0
   170a0:	mov	r3, r5
   170a4:	b	16c44 <__assert_fail@plt+0x5640>
   170a8:	ldr	r3, [sp, #48]	; 0x30
   170ac:	ldrb	r3, [r3, #1]
   170b0:	adds	r3, r3, #0
   170b4:	movne	r3, #1
   170b8:	b	1708c <__assert_fail@plt+0x5a88>
   170bc:	mov	r3, #0
   170c0:	str	r3, [sp, #44]	; 0x2c
   170c4:	b	17094 <__assert_fail@plt+0x5a90>
   170c8:	mov	r3, #0
   170cc:	str	r3, [sp, #44]	; 0x2c
   170d0:	b	170d8 <__assert_fail@plt+0x5ad4>
   170d4:	ldr	r5, [sp, #44]	; 0x2c
   170d8:	ldr	r3, [sp, #32]
   170dc:	cmp	sl, #2
   170e0:	movne	r3, #0
   170e4:	andeq	r3, r3, #1
   170e8:	cmp	r3, #0
   170ec:	beq	16c44 <__assert_fail@plt+0x5640>
   170f0:	mov	r8, r9
   170f4:	mov	r7, #2
   170f8:	b	177f8 <__assert_fail@plt+0x61f4>
   170fc:	ldr	r5, [sp, #32]
   17100:	b	170d8 <__assert_fail@plt+0x5ad4>
   17104:	mov	r3, #0
   17108:	str	r3, [sp, #44]	; 0x2c
   1710c:	mov	r5, r3
   17110:	b	170d8 <__assert_fail@plt+0x5ad4>
   17114:	mov	r3, #0
   17118:	str	r3, [sp, #44]	; 0x2c
   1711c:	cmp	sl, #2
   17120:	strne	r5, [sp, #68]	; 0x44
   17124:	movne	r3, #0
   17128:	movne	r4, #39	; 0x27
   1712c:	bne	16c44 <__assert_fail@plt+0x5640>
   17130:	ldr	r3, [sp, #32]
   17134:	cmp	r3, #0
   17138:	bne	177e4 <__assert_fail@plt+0x61e0>
   1713c:	ldr	r3, [sp, #72]	; 0x48
   17140:	clz	r3, r3
   17144:	lsr	r3, r3, #5
   17148:	cmp	r9, #0
   1714c:	moveq	r3, #0
   17150:	cmp	r3, #0
   17154:	movne	r3, #0
   17158:	bne	17180 <__assert_fail@plt+0x5b7c>
   1715c:	cmp	r9, fp
   17160:	movhi	r3, #39	; 0x27
   17164:	strbhi	r3, [r8, fp]
   17168:	add	r3, fp, #1
   1716c:	cmp	r9, r3
   17170:	movhi	r2, #92	; 0x5c
   17174:	strbhi	r2, [r8, r3]
   17178:	mov	r3, r9
   1717c:	ldr	r9, [sp, #72]	; 0x48
   17180:	add	r2, fp, #2
   17184:	cmp	r2, r3
   17188:	movcc	r1, #39	; 0x27
   1718c:	strbcc	r1, [r8, r2]
   17190:	add	fp, fp, #3
   17194:	str	r5, [sp, #68]	; 0x44
   17198:	ldr	r2, [sp, #32]
   1719c:	str	r2, [sp, #36]	; 0x24
   171a0:	str	r9, [sp, #72]	; 0x48
   171a4:	mov	r9, r3
   171a8:	mov	r4, #39	; 0x27
   171ac:	mov	r3, #0
   171b0:	b	16c90 <__assert_fail@plt+0x568c>
   171b4:	mov	r3, #0
   171b8:	str	r3, [sp, #44]	; 0x2c
   171bc:	ldr	r7, [sp, #76]	; 0x4c
   171c0:	cmp	r7, #1
   171c4:	bne	171fc <__assert_fail@plt+0x5bf8>
   171c8:	bl	11424 <__ctype_b_loc@plt>
   171cc:	ldr	r2, [r0]
   171d0:	lsl	r3, r4, #1
   171d4:	ldrh	r5, [r2, r3]
   171d8:	ubfx	r5, r5, #14, #1
   171dc:	mov	ip, r7
   171e0:	eor	r3, r5, #1
   171e4:	ldr	r2, [sp, #28]
   171e8:	and	r3, r3, r2
   171ec:	ands	r3, r3, #255	; 0xff
   171f0:	beq	16c44 <__assert_fail@plt+0x5640>
   171f4:	mov	r5, #0
   171f8:	b	17458 <__assert_fail@plt+0x5e54>
   171fc:	mov	r2, #0
   17200:	mov	r3, #0
   17204:	strd	r2, [sp, #104]	; 0x68
   17208:	ldr	r3, [sp, #24]
   1720c:	cmn	r3, #1
   17210:	beq	17234 <__assert_fail@plt+0x5c30>
   17214:	mov	r3, #0
   17218:	str	r4, [sp, #88]	; 0x58
   1721c:	str	fp, [sp, #92]	; 0x5c
   17220:	str	r8, [sp, #56]	; 0x38
   17224:	mov	r8, r3
   17228:	str	r9, [sp, #84]	; 0x54
   1722c:	ldr	r9, [sp, #48]	; 0x30
   17230:	b	17380 <__assert_fail@plt+0x5d7c>
   17234:	ldr	r0, [sp, #48]	; 0x30
   17238:	bl	11460 <strlen@plt>
   1723c:	str	r0, [sp, #24]
   17240:	b	17214 <__assert_fail@plt+0x5c10>
   17244:	mov	r1, fp
   17248:	ldr	r4, [sp, #88]	; 0x58
   1724c:	mov	r2, r8
   17250:	mov	ip, r8
   17254:	ldr	fp, [sp, #92]	; 0x5c
   17258:	ldr	r8, [sp, #56]	; 0x38
   1725c:	ldr	r9, [sp, #84]	; 0x54
   17260:	ldr	r0, [sp, #24]
   17264:	cmp	r7, r0
   17268:	bcs	17420 <__assert_fail@plt+0x5e1c>
   1726c:	ldrb	r3, [r1]
   17270:	cmp	r3, #0
   17274:	beq	17428 <__assert_fail@plt+0x5e24>
   17278:	mov	r3, r1
   1727c:	add	r2, r2, #1
   17280:	add	r1, r6, r2
   17284:	cmp	r0, r1
   17288:	bls	17430 <__assert_fail@plt+0x5e2c>
   1728c:	ldrb	r1, [r3, #1]!
   17290:	cmp	r1, #0
   17294:	bne	1727c <__assert_fail@plt+0x5c78>
   17298:	mov	ip, r2
   1729c:	mov	r5, #0
   172a0:	b	17450 <__assert_fail@plt+0x5e4c>
   172a4:	ldr	r3, [sp, #56]	; 0x38
   172a8:	str	r3, [sp, #64]	; 0x40
   172ac:	ldr	r8, [sp, #84]	; 0x54
   172b0:	mov	r7, #2
   172b4:	b	177f8 <__assert_fail@plt+0x61f4>
   172b8:	cmp	r2, r7
   172bc:	beq	1735c <__assert_fail@plt+0x5d58>
   172c0:	ldrb	r3, [r2], #1
   172c4:	sub	r3, r3, #91	; 0x5b
   172c8:	cmp	r3, #33	; 0x21
   172cc:	ldrls	pc, [pc, r3, lsl #2]
   172d0:	b	172b8 <__assert_fail@plt+0x5cb4>
   172d4:	andeq	r7, r1, r4, lsr #5
   172d8:	andeq	r7, r1, r4, lsr #5
   172dc:			; <UNDEFINED> instruction: 0x000172b8
   172e0:	andeq	r7, r1, r4, lsr #5
   172e4:			; <UNDEFINED> instruction: 0x000172b8
   172e8:	andeq	r7, r1, r4, lsr #5
   172ec:			; <UNDEFINED> instruction: 0x000172b8
   172f0:			; <UNDEFINED> instruction: 0x000172b8
   172f4:			; <UNDEFINED> instruction: 0x000172b8
   172f8:			; <UNDEFINED> instruction: 0x000172b8
   172fc:			; <UNDEFINED> instruction: 0x000172b8
   17300:			; <UNDEFINED> instruction: 0x000172b8
   17304:			; <UNDEFINED> instruction: 0x000172b8
   17308:			; <UNDEFINED> instruction: 0x000172b8
   1730c:			; <UNDEFINED> instruction: 0x000172b8
   17310:			; <UNDEFINED> instruction: 0x000172b8
   17314:			; <UNDEFINED> instruction: 0x000172b8
   17318:			; <UNDEFINED> instruction: 0x000172b8
   1731c:			; <UNDEFINED> instruction: 0x000172b8
   17320:			; <UNDEFINED> instruction: 0x000172b8
   17324:			; <UNDEFINED> instruction: 0x000172b8
   17328:			; <UNDEFINED> instruction: 0x000172b8
   1732c:			; <UNDEFINED> instruction: 0x000172b8
   17330:			; <UNDEFINED> instruction: 0x000172b8
   17334:			; <UNDEFINED> instruction: 0x000172b8
   17338:			; <UNDEFINED> instruction: 0x000172b8
   1733c:			; <UNDEFINED> instruction: 0x000172b8
   17340:			; <UNDEFINED> instruction: 0x000172b8
   17344:			; <UNDEFINED> instruction: 0x000172b8
   17348:			; <UNDEFINED> instruction: 0x000172b8
   1734c:			; <UNDEFINED> instruction: 0x000172b8
   17350:			; <UNDEFINED> instruction: 0x000172b8
   17354:			; <UNDEFINED> instruction: 0x000172b8
   17358:	andeq	r7, r1, r4, lsr #5
   1735c:	ldr	r0, [sp, #100]	; 0x64
   17360:	bl	1134c <iswprint@plt>
   17364:	cmp	r0, #0
   17368:	moveq	r5, #0
   1736c:	add	r8, r8, r4
   17370:	add	r0, sp, #104	; 0x68
   17374:	bl	112bc <mbsinit@plt>
   17378:	cmp	r0, #0
   1737c:	bne	173ec <__assert_fail@plt+0x5de8>
   17380:	add	r7, r6, r8
   17384:	add	fp, r9, r7
   17388:	add	r3, sp, #104	; 0x68
   1738c:	ldr	r2, [sp, #24]
   17390:	sub	r2, r2, r7
   17394:	mov	r1, fp
   17398:	add	r0, sp, #100	; 0x64
   1739c:	bl	1a198 <__assert_fail@plt+0x8b94>
   173a0:	subs	r4, r0, #0
   173a4:	beq	1743c <__assert_fail@plt+0x5e38>
   173a8:	cmn	r4, #1
   173ac:	beq	17404 <__assert_fail@plt+0x5e00>
   173b0:	cmn	r4, #2
   173b4:	beq	17244 <__assert_fail@plt+0x5c40>
   173b8:	ldr	r3, [sp, #32]
   173bc:	cmp	sl, #2
   173c0:	movne	r3, #0
   173c4:	andeq	r3, r3, #1
   173c8:	cmp	r3, #0
   173cc:	beq	1735c <__assert_fail@plt+0x5d58>
   173d0:	cmp	r4, #1
   173d4:	bls	1735c <__assert_fail@plt+0x5d58>
   173d8:	add	r2, r7, #1
   173dc:	add	r2, r9, r2
   173e0:	add	r3, r9, r4
   173e4:	add	r7, r3, r7
   173e8:	b	172c0 <__assert_fail@plt+0x5cbc>
   173ec:	ldr	r4, [sp, #88]	; 0x58
   173f0:	mov	ip, r8
   173f4:	ldr	fp, [sp, #92]	; 0x5c
   173f8:	ldr	r8, [sp, #56]	; 0x38
   173fc:	ldr	r9, [sp, #84]	; 0x54
   17400:	b	17450 <__assert_fail@plt+0x5e4c>
   17404:	ldr	r4, [sp, #88]	; 0x58
   17408:	mov	ip, r8
   1740c:	ldr	fp, [sp, #92]	; 0x5c
   17410:	ldr	r8, [sp, #56]	; 0x38
   17414:	ldr	r9, [sp, #84]	; 0x54
   17418:	mov	r5, #0
   1741c:	b	17450 <__assert_fail@plt+0x5e4c>
   17420:	mov	r5, #0
   17424:	b	17450 <__assert_fail@plt+0x5e4c>
   17428:	mov	r5, #0
   1742c:	b	17450 <__assert_fail@plt+0x5e4c>
   17430:	mov	ip, r2
   17434:	mov	r5, #0
   17438:	b	17450 <__assert_fail@plt+0x5e4c>
   1743c:	ldr	r4, [sp, #88]	; 0x58
   17440:	mov	ip, r8
   17444:	ldr	fp, [sp, #92]	; 0x5c
   17448:	ldr	r8, [sp, #56]	; 0x38
   1744c:	ldr	r9, [sp, #84]	; 0x54
   17450:	cmp	ip, #1
   17454:	bls	171e0 <__assert_fail@plt+0x5bdc>
   17458:	add	lr, r6, ip
   1745c:	ldr	r3, [sp, #48]	; 0x30
   17460:	add	r1, r3, r6
   17464:	mov	r3, #0
   17468:	eor	r0, r5, #1
   1746c:	ldr	r2, [sp, #28]
   17470:	and	r0, r0, r2
   17474:	uxtb	r0, r0
   17478:	str	r0, [sp, #56]	; 0x38
   1747c:	mov	r7, #92	; 0x5c
   17480:	ldr	ip, [sp, #36]	; 0x24
   17484:	str	r5, [sp, #84]	; 0x54
   17488:	ldr	r2, [sp, #44]	; 0x2c
   1748c:	b	174fc <__assert_fail@plt+0x5ef8>
   17490:	cmp	r2, #0
   17494:	beq	174a4 <__assert_fail@plt+0x5ea0>
   17498:	cmp	r9, fp
   1749c:	strbhi	r7, [r8, fp]
   174a0:	add	fp, fp, #1
   174a4:	add	r5, r6, #1
   174a8:	cmp	r5, lr
   174ac:	bcs	175b8 <__assert_fail@plt+0x5fb4>
   174b0:	eor	r2, r3, #1
   174b4:	and	r2, r2, ip
   174b8:	ands	r2, r2, #255	; 0xff
   174bc:	beq	175d4 <__assert_fail@plt+0x5fd0>
   174c0:	cmp	r9, fp
   174c4:	movhi	r2, #39	; 0x27
   174c8:	strbhi	r2, [r8, fp]
   174cc:	add	r2, fp, #1
   174d0:	cmp	r9, r2
   174d4:	movhi	ip, #39	; 0x27
   174d8:	strbhi	ip, [r8, r2]
   174dc:	add	fp, fp, #2
   174e0:	ldr	ip, [sp, #56]	; 0x38
   174e4:	mov	r2, ip
   174e8:	mov	r6, r5
   174ec:	cmp	r9, fp
   174f0:	strbhi	r4, [r8, fp]
   174f4:	add	fp, fp, #1
   174f8:	ldrb	r4, [r1, #1]!
   174fc:	cmp	r0, #0
   17500:	beq	17490 <__assert_fail@plt+0x5e8c>
   17504:	ldr	r3, [sp, #32]
   17508:	cmp	r3, #0
   1750c:	bne	177a0 <__assert_fail@plt+0x619c>
   17510:	eor	r3, ip, #1
   17514:	cmp	sl, #2
   17518:	movne	r3, #0
   1751c:	andeq	r3, r3, #1
   17520:	cmp	r3, #0
   17524:	beq	1755c <__assert_fail@plt+0x5f58>
   17528:	cmp	r9, fp
   1752c:	movhi	ip, #39	; 0x27
   17530:	strbhi	ip, [r8, fp]
   17534:	add	ip, fp, #1
   17538:	cmp	r9, ip
   1753c:	movhi	r5, #36	; 0x24
   17540:	strbhi	r5, [r8, ip]
   17544:	add	ip, fp, #2
   17548:	cmp	r9, ip
   1754c:	movhi	r5, #39	; 0x27
   17550:	strbhi	r5, [r8, ip]
   17554:	add	fp, fp, #3
   17558:	mov	ip, r3
   1755c:	cmp	r9, fp
   17560:	strbhi	r7, [r8, fp]
   17564:	add	r3, fp, #1
   17568:	cmp	r9, r3
   1756c:	bls	1757c <__assert_fail@plt+0x5f78>
   17570:	lsr	r5, r4, #6
   17574:	add	r5, r5, #48	; 0x30
   17578:	strb	r5, [r8, r3]
   1757c:	add	r3, fp, #2
   17580:	cmp	r9, r3
   17584:	bls	17594 <__assert_fail@plt+0x5f90>
   17588:	ubfx	r5, r4, #3, #3
   1758c:	add	r5, r5, #48	; 0x30
   17590:	strb	r5, [r8, r3]
   17594:	add	fp, fp, #3
   17598:	and	r4, r4, #7
   1759c:	add	r4, r4, #48	; 0x30
   175a0:	add	r5, r6, #1
   175a4:	cmp	r5, lr
   175a8:	bcs	175c4 <__assert_fail@plt+0x5fc0>
   175ac:	ldr	r3, [sp, #56]	; 0x38
   175b0:	mov	r6, r5
   175b4:	b	174ec <__assert_fail@plt+0x5ee8>
   175b8:	str	ip, [sp, #36]	; 0x24
   175bc:	ldr	r5, [sp, #84]	; 0x54
   175c0:	b	16ff0 <__assert_fail@plt+0x59ec>
   175c4:	str	ip, [sp, #36]	; 0x24
   175c8:	ldr	r5, [sp, #84]	; 0x54
   175cc:	mov	r3, r0
   175d0:	b	16ff0 <__assert_fail@plt+0x59ec>
   175d4:	mov	r6, r5
   175d8:	b	174ec <__assert_fail@plt+0x5ee8>
   175dc:	ldr	r3, [sp, #44]	; 0x2c
   175e0:	b	16c44 <__assert_fail@plt+0x5640>
   175e4:	mov	r5, #0
   175e8:	mov	r3, r5
   175ec:	mov	r4, #63	; 0x3f
   175f0:	b	16c44 <__assert_fail@plt+0x5640>
   175f4:	mov	r5, #0
   175f8:	mov	r3, r5
   175fc:	mov	r4, #63	; 0x3f
   17600:	b	16c44 <__assert_fail@plt+0x5640>
   17604:	mov	r5, #0
   17608:	mov	r3, r5
   1760c:	b	16c44 <__assert_fail@plt+0x5640>
   17610:	mov	r5, #0
   17614:	mov	r3, r5
   17618:	b	16c44 <__assert_fail@plt+0x5640>
   1761c:	ldr	r5, [sp, #44]	; 0x2c
   17620:	ldr	r3, [sp, #32]
   17624:	b	16c44 <__assert_fail@plt+0x5640>
   17628:	ldr	r5, [sp, #44]	; 0x2c
   1762c:	mov	r3, #0
   17630:	str	r3, [sp, #44]	; 0x2c
   17634:	b	16c44 <__assert_fail@plt+0x5640>
   17638:	mov	r4, r3
   1763c:	mov	r5, #0
   17640:	b	16c9c <__assert_fail@plt+0x5698>
   17644:	mov	r5, #0
   17648:	mov	r4, #97	; 0x61
   1764c:	b	16c9c <__assert_fail@plt+0x5698>
   17650:	mov	r5, #0
   17654:	mov	r3, r5
   17658:	mov	r4, #92	; 0x5c
   1765c:	b	16ff0 <__assert_fail@plt+0x59ec>
   17660:	ldr	r3, [sp, #48]	; 0x30
   17664:	ldrb	r5, [r3, r6]
   17668:	adds	r5, r5, #0
   1766c:	movne	r5, #1
   17670:	b	16d40 <__assert_fail@plt+0x573c>
   17674:	cmp	sl, #2
   17678:	movne	r3, #0
   1767c:	moveq	r3, #1
   17680:	ldr	r1, [sp, #32]
   17684:	cmp	fp, #0
   17688:	andeq	r2, r3, r1
   1768c:	movne	r2, #0
   17690:	cmp	r2, #0
   17694:	bne	177b4 <__assert_fail@plt+0x61b0>
   17698:	eor	r2, r1, #1
   1769c:	uxtb	r2, r2
   176a0:	and	r3, r3, r2
   176a4:	ldr	r1, [sp, #68]	; 0x44
   176a8:	ands	r3, r1, r3
   176ac:	beq	17740 <__assert_fail@plt+0x613c>
   176b0:	ldr	r2, [sp, #40]	; 0x28
   176b4:	cmp	r2, #0
   176b8:	bne	176f0 <__assert_fail@plt+0x60ec>
   176bc:	ldr	r2, [sp, #72]	; 0x48
   176c0:	adds	r2, r2, #0
   176c4:	movne	r2, #1
   176c8:	cmp	r9, #0
   176cc:	movne	r2, #0
   176d0:	str	r2, [sp, #68]	; 0x44
   176d4:	mov	sl, #2
   176d8:	ldr	r1, [sp, #40]	; 0x28
   176dc:	str	r1, [sp, #32]
   176e0:	cmp	r2, #0
   176e4:	beq	17734 <__assert_fail@plt+0x6130>
   176e8:	ldr	r9, [sp, #72]	; 0x48
   176ec:	b	16448 <__assert_fail@plt+0x4e44>
   176f0:	ldr	r3, [sp, #168]	; 0xa8
   176f4:	str	r3, [sp, #16]
   176f8:	ldr	r3, [sp, #164]	; 0xa4
   176fc:	str	r3, [sp, #12]
   17700:	ldr	r3, [sp, #160]	; 0xa0
   17704:	str	r3, [sp, #8]
   17708:	ldr	r3, [sp, #156]	; 0x9c
   1770c:	str	r3, [sp, #4]
   17710:	mov	r3, #5
   17714:	str	r3, [sp]
   17718:	ldr	r3, [sp, #24]
   1771c:	ldr	r2, [sp, #48]	; 0x30
   17720:	ldr	r1, [sp, #72]	; 0x48
   17724:	ldr	r0, [sp, #64]	; 0x40
   17728:	bl	163d0 <__assert_fail@plt+0x4dcc>
   1772c:	mov	fp, r0
   17730:	b	17850 <__assert_fail@plt+0x624c>
   17734:	mov	r8, r9
   17738:	mov	r2, r3
   1773c:	b	17744 <__assert_fail@plt+0x6140>
   17740:	mov	r8, r9
   17744:	ldr	r3, [sp, #60]	; 0x3c
   17748:	cmp	r3, #0
   1774c:	moveq	r2, #0
   17750:	andne	r2, r2, #1
   17754:	cmp	r2, #0
   17758:	beq	17788 <__assert_fail@plt+0x6184>
   1775c:	mov	r2, r3
   17760:	ldrb	r3, [r3]
   17764:	cmp	r3, #0
   17768:	beq	17788 <__assert_fail@plt+0x6184>
   1776c:	ldr	r1, [sp, #64]	; 0x40
   17770:	cmp	r8, fp
   17774:	strbhi	r3, [r1, fp]
   17778:	add	fp, fp, #1
   1777c:	ldrb	r3, [r2, #1]!
   17780:	cmp	r3, #0
   17784:	bne	17770 <__assert_fail@plt+0x616c>
   17788:	cmp	r8, fp
   1778c:	bls	17850 <__assert_fail@plt+0x624c>
   17790:	mov	r3, #0
   17794:	ldr	r2, [sp, #64]	; 0x40
   17798:	strb	r3, [r2, fp]
   1779c:	b	17850 <__assert_fail@plt+0x624c>
   177a0:	mov	r8, r9
   177a4:	mov	r7, sl
   177a8:	ldr	r3, [sp, #32]
   177ac:	str	r3, [sp, #28]
   177b0:	b	177f8 <__assert_fail@plt+0x61f4>
   177b4:	mov	r8, r9
   177b8:	mov	r7, #2
   177bc:	b	177f8 <__assert_fail@plt+0x61f4>
   177c0:	mov	r8, r9
   177c4:	mov	r7, sl
   177c8:	b	177f8 <__assert_fail@plt+0x61f4>
   177cc:	mov	r8, r9
   177d0:	mov	r7, sl
   177d4:	b	177f8 <__assert_fail@plt+0x61f4>
   177d8:	mov	r8, r9
   177dc:	mov	r7, sl
   177e0:	b	177f8 <__assert_fail@plt+0x61f4>
   177e4:	mov	r8, r9
   177e8:	mov	r7, sl
   177ec:	b	177f8 <__assert_fail@plt+0x61f4>
   177f0:	mov	r8, r9
   177f4:	mov	r7, sl
   177f8:	ldr	r3, [sp, #28]
   177fc:	cmp	r7, #2
   17800:	movne	r3, #0
   17804:	andeq	r3, r3, #1
   17808:	cmp	r3, #0
   1780c:	movne	r7, #4
   17810:	ldr	r3, [sp, #168]	; 0xa8
   17814:	str	r3, [sp, #16]
   17818:	ldr	r3, [sp, #164]	; 0xa4
   1781c:	str	r3, [sp, #12]
   17820:	mov	r3, #0
   17824:	str	r3, [sp, #8]
   17828:	ldr	r3, [sp, #156]	; 0x9c
   1782c:	bic	r3, r3, #2
   17830:	str	r3, [sp, #4]
   17834:	str	r7, [sp]
   17838:	ldr	r3, [sp, #24]
   1783c:	ldr	r2, [sp, #48]	; 0x30
   17840:	mov	r1, r8
   17844:	ldr	r0, [sp, #64]	; 0x40
   17848:	bl	163d0 <__assert_fail@plt+0x4dcc>
   1784c:	mov	fp, r0
   17850:	mov	r0, fp
   17854:	add	sp, sp, #116	; 0x74
   17858:	ldrd	r4, [sp]
   1785c:	ldrd	r6, [sp, #8]
   17860:	ldrd	r8, [sp, #16]
   17864:	ldrd	sl, [sp, #24]
   17868:	add	sp, sp, #32
   1786c:	pop	{pc}		; (ldr pc, [sp], #4)
   17870:	mov	r8, r9
   17874:	mov	r7, sl
   17878:	b	17810 <__assert_fail@plt+0x620c>
   1787c:	add	fp, fp, #4
   17880:	str	r3, [sp, #36]	; 0x24
   17884:	mov	r5, #0
   17888:	mov	r4, #48	; 0x30
   1788c:	b	16c44 <__assert_fail@plt+0x5640>
   17890:	mov	r3, #1
   17894:	str	r3, [sp, #32]
   17898:	str	r3, [sp, #28]
   1789c:	str	r3, [sp, #52]	; 0x34
   178a0:	movw	r3, #47500	; 0xb98c
   178a4:	movt	r3, #1
   178a8:	str	r3, [sp, #60]	; 0x3c
   178ac:	mov	fp, #0
   178b0:	mov	sl, #5
   178b4:	b	164a8 <__assert_fail@plt+0x4ea4>
   178b8:	ldr	r3, [sp, #48]	; 0x30
   178bc:	ldrb	r4, [r3, r6]
   178c0:	cmp	r4, #126	; 0x7e
   178c4:	ldrls	pc, [pc, r4, lsl #2]
   178c8:	b	171b4 <__assert_fail@plt+0x5bb0>
   178cc:	andeq	r6, r1, ip, lsr r9
   178d0:			; <UNDEFINED> instruction: 0x000171b4
   178d4:			; <UNDEFINED> instruction: 0x000171b4
   178d8:			; <UNDEFINED> instruction: 0x000171b4
   178dc:			; <UNDEFINED> instruction: 0x000171b4
   178e0:			; <UNDEFINED> instruction: 0x000171b4
   178e4:			; <UNDEFINED> instruction: 0x000171b4
   178e8:	andeq	r7, r1, r4, asr #12
   178ec:	andeq	r6, r1, r0, ror #23
   178f0:	andeq	r6, r1, r4, lsl #31
   178f4:	andeq	r7, r1, r0, asr #32
   178f8:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   178fc:	strdeq	r6, [r1], -r4
   17900:	andeq	r6, r1, r8, lsl #24
   17904:			; <UNDEFINED> instruction: 0x000171b4
   17908:			; <UNDEFINED> instruction: 0x000171b4
   1790c:			; <UNDEFINED> instruction: 0x000171b4
   17910:			; <UNDEFINED> instruction: 0x000171b4
   17914:			; <UNDEFINED> instruction: 0x000171b4
   17918:			; <UNDEFINED> instruction: 0x000171b4
   1791c:			; <UNDEFINED> instruction: 0x000171b4
   17920:			; <UNDEFINED> instruction: 0x000171b4
   17924:			; <UNDEFINED> instruction: 0x000171b4
   17928:			; <UNDEFINED> instruction: 0x000171b4
   1792c:			; <UNDEFINED> instruction: 0x000171b4
   17930:			; <UNDEFINED> instruction: 0x000171b4
   17934:			; <UNDEFINED> instruction: 0x000171b4
   17938:			; <UNDEFINED> instruction: 0x000171b4
   1793c:			; <UNDEFINED> instruction: 0x000171b4
   17940:			; <UNDEFINED> instruction: 0x000171b4
   17944:			; <UNDEFINED> instruction: 0x000171b4
   17948:			; <UNDEFINED> instruction: 0x000171b4
   1794c:	andeq	r7, r1, r8, asr #1
   17950:	andeq	r7, r1, r4, lsl #2
   17954:	andeq	r7, r1, r4, lsl #2
   17958:	strheq	r7, [r1], -ip
   1795c:	andeq	r7, r1, r4, lsl #2
   17960:	andeq	r7, r1, r8, lsr #12
   17964:	andeq	r7, r1, r4, lsl #2
   17968:	andeq	r7, r1, r4, lsl r1
   1796c:	andeq	r7, r1, r4, lsl #2
   17970:	andeq	r7, r1, r4, lsl #2
   17974:	andeq	r7, r1, r4, lsl #2
   17978:	andeq	r7, r1, r8, lsr #12
   1797c:	andeq	r7, r1, r8, lsr #12
   17980:	andeq	r7, r1, r8, lsr #12
   17984:	andeq	r7, r1, r8, lsr #12
   17988:	andeq	r7, r1, r8, lsr #12
   1798c:	andeq	r7, r1, r8, lsr #12
   17990:	andeq	r7, r1, r8, lsr #12
   17994:	andeq	r7, r1, r8, lsr #12
   17998:	andeq	r7, r1, r8, lsr #12
   1799c:	andeq	r7, r1, r8, lsr #12
   179a0:	andeq	r7, r1, r8, lsr #12
   179a4:	andeq	r7, r1, r8, lsr #12
   179a8:	andeq	r7, r1, r8, lsr #12
   179ac:	andeq	r7, r1, r8, lsr #12
   179b0:	andeq	r7, r1, r8, lsr #12
   179b4:	andeq	r7, r1, r8, lsr #12
   179b8:	andeq	r7, r1, r4, lsl #2
   179bc:	andeq	r7, r1, r4, lsl #2
   179c0:	andeq	r7, r1, r4, lsl #2
   179c4:	andeq	r7, r1, r4, lsl #2
   179c8:	andeq	r6, r1, r4, ror sl
   179cc:			; <UNDEFINED> instruction: 0x000171b4
   179d0:	andeq	r7, r1, r8, lsr #12
   179d4:	andeq	r7, r1, r8, lsr #12
   179d8:	andeq	r7, r1, r8, lsr #12
   179dc:	andeq	r7, r1, r8, lsr #12
   179e0:	andeq	r7, r1, r8, lsr #12
   179e4:	andeq	r7, r1, r8, lsr #12
   179e8:	andeq	r7, r1, r8, lsr #12
   179ec:	andeq	r7, r1, r8, lsr #12
   179f0:	andeq	r7, r1, r8, lsr #12
   179f4:	andeq	r7, r1, r8, lsr #12
   179f8:	andeq	r7, r1, r8, lsr #12
   179fc:	andeq	r7, r1, r8, lsr #12
   17a00:	andeq	r7, r1, r8, lsr #12
   17a04:	andeq	r7, r1, r8, lsr #12
   17a08:	andeq	r7, r1, r8, lsr #12
   17a0c:	andeq	r7, r1, r8, lsr #12
   17a10:	andeq	r7, r1, r8, lsr #12
   17a14:	andeq	r7, r1, r8, lsr #12
   17a18:	andeq	r7, r1, r8, lsr #12
   17a1c:	andeq	r7, r1, r8, lsr #12
   17a20:	andeq	r7, r1, r8, lsr #12
   17a24:	andeq	r7, r1, r8, lsr #12
   17a28:	andeq	r7, r1, r8, lsr #12
   17a2c:	andeq	r7, r1, r8, lsr #12
   17a30:	andeq	r7, r1, r8, lsr #12
   17a34:	andeq	r7, r1, r8, lsr #12
   17a38:	andeq	r7, r1, r4, lsl #2
   17a3c:	andeq	r6, r1, ip, lsr #31
   17a40:	andeq	r7, r1, r8, lsr #12
   17a44:	andeq	r7, r1, r4, lsl #2
   17a48:	andeq	r7, r1, r8, lsr #12
   17a4c:	andeq	r7, r1, r4, lsl #2
   17a50:	andeq	r7, r1, r8, lsr #12
   17a54:	andeq	r7, r1, r8, lsr #12
   17a58:	andeq	r7, r1, r8, lsr #12
   17a5c:	andeq	r7, r1, r8, lsr #12
   17a60:	andeq	r7, r1, r8, lsr #12
   17a64:	andeq	r7, r1, r8, lsr #12
   17a68:	andeq	r7, r1, r8, lsr #12
   17a6c:	andeq	r7, r1, r8, lsr #12
   17a70:	andeq	r7, r1, r8, lsr #12
   17a74:	andeq	r7, r1, r8, lsr #12
   17a78:	andeq	r7, r1, r8, lsr #12
   17a7c:	andeq	r7, r1, r8, lsr #12
   17a80:	andeq	r7, r1, r8, lsr #12
   17a84:	andeq	r7, r1, r8, lsr #12
   17a88:	andeq	r7, r1, r8, lsr #12
   17a8c:	andeq	r7, r1, r8, lsr #12
   17a90:	andeq	r7, r1, r8, lsr #12
   17a94:	andeq	r7, r1, r8, lsr #12
   17a98:	andeq	r7, r1, r8, lsr #12
   17a9c:	andeq	r7, r1, r8, lsr #12
   17aa0:	andeq	r7, r1, r8, lsr #12
   17aa4:	andeq	r7, r1, r8, lsr #12
   17aa8:	andeq	r7, r1, r8, lsr #12
   17aac:	andeq	r7, r1, r8, lsr #12
   17ab0:	andeq	r7, r1, r8, lsr #12
   17ab4:	andeq	r7, r1, r8, lsr #12
   17ab8:	andeq	r7, r1, ip, rrx
   17abc:	andeq	r7, r1, r4, lsl #2
   17ac0:	andeq	r7, r1, ip, rrx
   17ac4:	strheq	r7, [r1], -ip
   17ac8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17acc:	strd	r6, [sp, #8]
   17ad0:	strd	r8, [sp, #16]
   17ad4:	strd	sl, [sp, #24]
   17ad8:	str	lr, [sp, #32]
   17adc:	sub	sp, sp, #52	; 0x34
   17ae0:	mov	r5, r0
   17ae4:	str	r1, [sp, #24]
   17ae8:	str	r2, [sp, #28]
   17aec:	mov	r4, r3
   17af0:	bl	11484 <__errno_location@plt>
   17af4:	str	r0, [sp, #32]
   17af8:	ldr	r3, [r0]
   17afc:	str	r3, [sp, #36]	; 0x24
   17b00:	movw	r3, #49516	; 0xc16c
   17b04:	movt	r3, #2
   17b08:	ldr	r6, [r3]
   17b0c:	cmn	r5, #-2147483647	; 0x80000001
   17b10:	movne	r3, #0
   17b14:	moveq	r3, #1
   17b18:	orrs	r3, r3, r5, lsr #31
   17b1c:	bne	17c80 <__assert_fail@plt+0x667c>
   17b20:	movw	r3, #49516	; 0xc16c
   17b24:	movt	r3, #2
   17b28:	ldr	r2, [r3, #4]
   17b2c:	cmp	r2, r5
   17b30:	bgt	17ba0 <__assert_fail@plt+0x659c>
   17b34:	str	r2, [sp, #44]	; 0x2c
   17b38:	add	r3, r3, #8
   17b3c:	cmp	r6, r3
   17b40:	beq	17c84 <__assert_fail@plt+0x6680>
   17b44:	sub	r2, r5, r2
   17b48:	mov	r3, #8
   17b4c:	str	r3, [sp]
   17b50:	mvn	r3, #-2147483648	; 0x80000000
   17b54:	add	r2, r2, #1
   17b58:	add	r1, sp, #44	; 0x2c
   17b5c:	mov	r0, r6
   17b60:	bl	1955c <__assert_fail@plt+0x7f58>
   17b64:	mov	r6, r0
   17b68:	movw	r3, #49516	; 0xc16c
   17b6c:	movt	r3, #2
   17b70:	str	r0, [r3]
   17b74:	movw	r7, #49516	; 0xc16c
   17b78:	movt	r7, #2
   17b7c:	ldr	r0, [r7, #4]
   17b80:	ldr	r2, [sp, #44]	; 0x2c
   17b84:	sub	r2, r2, r0
   17b88:	lsl	r2, r2, #3
   17b8c:	mov	r1, #0
   17b90:	add	r0, r6, r0, lsl #3
   17b94:	bl	114a8 <memset@plt>
   17b98:	ldr	r3, [sp, #44]	; 0x2c
   17b9c:	str	r3, [r7, #4]
   17ba0:	add	fp, r6, r5, lsl #3
   17ba4:	ldr	r8, [r6, r5, lsl #3]
   17ba8:	ldr	r7, [fp, #4]
   17bac:	ldr	r3, [r4, #4]
   17bb0:	orr	r9, r3, #1
   17bb4:	add	sl, r4, #8
   17bb8:	ldr	r3, [r4, #44]	; 0x2c
   17bbc:	str	r3, [sp, #16]
   17bc0:	ldr	r3, [r4, #40]	; 0x28
   17bc4:	str	r3, [sp, #12]
   17bc8:	str	sl, [sp, #8]
   17bcc:	str	r9, [sp, #4]
   17bd0:	ldr	r3, [r4]
   17bd4:	str	r3, [sp]
   17bd8:	ldr	r3, [sp, #28]
   17bdc:	ldr	r2, [sp, #24]
   17be0:	mov	r1, r8
   17be4:	mov	r0, r7
   17be8:	bl	163d0 <__assert_fail@plt+0x4dcc>
   17bec:	cmp	r8, r0
   17bf0:	bhi	17c54 <__assert_fail@plt+0x6650>
   17bf4:	add	r8, r0, #1
   17bf8:	str	r8, [r6, r5, lsl #3]
   17bfc:	movw	r3, #49680	; 0xc210
   17c00:	movt	r3, #2
   17c04:	cmp	r7, r3
   17c08:	beq	17c14 <__assert_fail@plt+0x6610>
   17c0c:	mov	r0, r7
   17c10:	bl	1a034 <__assert_fail@plt+0x8a30>
   17c14:	mov	r0, r8
   17c18:	bl	19358 <__assert_fail@plt+0x7d54>
   17c1c:	mov	r7, r0
   17c20:	str	r0, [fp, #4]
   17c24:	ldr	r3, [r4, #44]	; 0x2c
   17c28:	str	r3, [sp, #16]
   17c2c:	ldr	r3, [r4, #40]	; 0x28
   17c30:	str	r3, [sp, #12]
   17c34:	str	sl, [sp, #8]
   17c38:	str	r9, [sp, #4]
   17c3c:	ldr	r3, [r4]
   17c40:	str	r3, [sp]
   17c44:	ldr	r3, [sp, #28]
   17c48:	ldr	r2, [sp, #24]
   17c4c:	mov	r1, r8
   17c50:	bl	163d0 <__assert_fail@plt+0x4dcc>
   17c54:	ldr	r3, [sp, #32]
   17c58:	ldr	r2, [sp, #36]	; 0x24
   17c5c:	str	r2, [r3]
   17c60:	mov	r0, r7
   17c64:	add	sp, sp, #52	; 0x34
   17c68:	ldrd	r4, [sp]
   17c6c:	ldrd	r6, [sp, #8]
   17c70:	ldrd	r8, [sp, #16]
   17c74:	ldrd	sl, [sp, #24]
   17c78:	add	sp, sp, #32
   17c7c:	pop	{pc}		; (ldr pc, [sp], #4)
   17c80:	bl	115c8 <abort@plt>
   17c84:	sub	r2, r5, r2
   17c88:	mov	r3, #8
   17c8c:	str	r3, [sp]
   17c90:	mvn	r3, #-2147483648	; 0x80000000
   17c94:	add	r2, r2, #1
   17c98:	add	r1, sp, #44	; 0x2c
   17c9c:	mov	r0, #0
   17ca0:	bl	1955c <__assert_fail@plt+0x7f58>
   17ca4:	mov	r6, r0
   17ca8:	movw	r3, #49516	; 0xc16c
   17cac:	movt	r3, #2
   17cb0:	str	r0, [r3]
   17cb4:	ldrd	r2, [r3, #8]
   17cb8:	strd	r2, [r0]
   17cbc:	b	17b74 <__assert_fail@plt+0x6570>
   17cc0:	strd	r4, [sp, #-16]!
   17cc4:	str	r6, [sp, #8]
   17cc8:	str	lr, [sp, #12]
   17ccc:	mov	r4, r0
   17cd0:	bl	11484 <__errno_location@plt>
   17cd4:	mov	r5, r0
   17cd8:	ldr	r6, [r0]
   17cdc:	cmp	r4, #0
   17ce0:	ldr	r3, [pc, #32]	; 17d08 <__assert_fail@plt+0x6704>
   17ce4:	moveq	r4, r3
   17ce8:	mov	r1, #48	; 0x30
   17cec:	mov	r0, r4
   17cf0:	bl	196cc <__assert_fail@plt+0x80c8>
   17cf4:	str	r6, [r5]
   17cf8:	ldrd	r4, [sp]
   17cfc:	ldr	r6, [sp, #8]
   17d00:	add	sp, sp, #12
   17d04:	pop	{pc}		; (ldr pc, [sp], #4)
   17d08:	andeq	ip, r2, r0, lsl r3
   17d0c:	subs	r3, r0, #0
   17d10:	ldr	r2, [pc, #8]	; 17d20 <__assert_fail@plt+0x671c>
   17d14:	moveq	r3, r2
   17d18:	ldr	r0, [r3]
   17d1c:	bx	lr
   17d20:	andeq	ip, r2, r0, lsl r3
   17d24:	subs	r3, r0, #0
   17d28:	ldr	r2, [pc, #8]	; 17d38 <__assert_fail@plt+0x6734>
   17d2c:	moveq	r3, r2
   17d30:	str	r1, [r3]
   17d34:	bx	lr
   17d38:	andeq	ip, r2, r0, lsl r3
   17d3c:	push	{lr}		; (str lr, [sp, #-4]!)
   17d40:	subs	r3, r0, #0
   17d44:	ldr	r0, [pc, #44]	; 17d78 <__assert_fail@plt+0x6774>
   17d48:	moveq	r3, r0
   17d4c:	add	r3, r3, #8
   17d50:	lsr	lr, r1, #5
   17d54:	and	r1, r1, #31
   17d58:	ldr	ip, [r3, lr, lsl #2]
   17d5c:	lsr	r0, ip, r1
   17d60:	eor	r2, r2, r0
   17d64:	and	r2, r2, #1
   17d68:	eor	r1, ip, r2, lsl r1
   17d6c:	str	r1, [r3, lr, lsl #2]
   17d70:	and	r0, r0, #1
   17d74:	pop	{pc}		; (ldr pc, [sp], #4)
   17d78:	andeq	ip, r2, r0, lsl r3
   17d7c:	subs	r3, r0, #0
   17d80:	ldr	r2, [pc, #12]	; 17d94 <__assert_fail@plt+0x6790>
   17d84:	moveq	r3, r2
   17d88:	ldr	r0, [r3, #4]
   17d8c:	str	r1, [r3, #4]
   17d90:	bx	lr
   17d94:	andeq	ip, r2, r0, lsl r3
   17d98:	subs	r3, r0, #0
   17d9c:	ldr	r0, [pc, #44]	; 17dd0 <__assert_fail@plt+0x67cc>
   17da0:	moveq	r3, r0
   17da4:	mov	r0, #10
   17da8:	str	r0, [r3]
   17dac:	cmp	r2, #0
   17db0:	cmpne	r1, #0
   17db4:	beq	17dc4 <__assert_fail@plt+0x67c0>
   17db8:	str	r1, [r3, #40]	; 0x28
   17dbc:	str	r2, [r3, #44]	; 0x2c
   17dc0:	bx	lr
   17dc4:	str	r4, [sp, #-8]!
   17dc8:	str	lr, [sp, #4]
   17dcc:	bl	115c8 <abort@plt>
   17dd0:	andeq	ip, r2, r0, lsl r3
   17dd4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   17dd8:	strd	r6, [sp, #8]
   17ddc:	strd	r8, [sp, #16]
   17de0:	str	sl, [sp, #24]
   17de4:	str	lr, [sp, #28]
   17de8:	sub	sp, sp, #24
   17dec:	mov	r7, r0
   17df0:	mov	r8, r1
   17df4:	mov	r9, r2
   17df8:	mov	sl, r3
   17dfc:	ldr	r4, [sp, #56]	; 0x38
   17e00:	cmp	r4, #0
   17e04:	ldr	r3, [pc, #104]	; 17e74 <__assert_fail@plt+0x6870>
   17e08:	moveq	r4, r3
   17e0c:	bl	11484 <__errno_location@plt>
   17e10:	mov	r5, r0
   17e14:	ldr	r6, [r0]
   17e18:	ldr	r3, [r4, #44]	; 0x2c
   17e1c:	str	r3, [sp, #16]
   17e20:	ldr	r3, [r4, #40]	; 0x28
   17e24:	str	r3, [sp, #12]
   17e28:	add	r3, r4, #8
   17e2c:	str	r3, [sp, #8]
   17e30:	ldr	r3, [r4, #4]
   17e34:	str	r3, [sp, #4]
   17e38:	ldr	r3, [r4]
   17e3c:	str	r3, [sp]
   17e40:	mov	r3, sl
   17e44:	mov	r2, r9
   17e48:	mov	r1, r8
   17e4c:	mov	r0, r7
   17e50:	bl	163d0 <__assert_fail@plt+0x4dcc>
   17e54:	str	r6, [r5]
   17e58:	add	sp, sp, #24
   17e5c:	ldrd	r4, [sp]
   17e60:	ldrd	r6, [sp, #8]
   17e64:	ldrd	r8, [sp, #16]
   17e68:	ldr	sl, [sp, #24]
   17e6c:	add	sp, sp, #28
   17e70:	pop	{pc}		; (ldr pc, [sp], #4)
   17e74:	andeq	ip, r2, r0, lsl r3
   17e78:	strd	r4, [sp, #-36]!	; 0xffffffdc
   17e7c:	strd	r6, [sp, #8]
   17e80:	strd	r8, [sp, #16]
   17e84:	strd	sl, [sp, #24]
   17e88:	str	lr, [sp, #32]
   17e8c:	sub	sp, sp, #44	; 0x2c
   17e90:	mov	r8, r0
   17e94:	mov	sl, r1
   17e98:	mov	r6, r2
   17e9c:	subs	r4, r3, #0
   17ea0:	ldr	r3, [pc, #200]	; 17f70 <__assert_fail@plt+0x696c>
   17ea4:	moveq	r4, r3
   17ea8:	bl	11484 <__errno_location@plt>
   17eac:	mov	r7, r0
   17eb0:	ldr	fp, [r0]
   17eb4:	ldr	r5, [r4, #4]
   17eb8:	cmp	r6, #0
   17ebc:	orreq	r5, r5, #1
   17ec0:	add	r9, r4, #8
   17ec4:	ldr	r3, [r4, #44]	; 0x2c
   17ec8:	str	r3, [sp, #16]
   17ecc:	ldr	r3, [r4, #40]	; 0x28
   17ed0:	str	r3, [sp, #12]
   17ed4:	str	r9, [sp, #8]
   17ed8:	str	r5, [sp, #4]
   17edc:	ldr	r3, [r4]
   17ee0:	str	r3, [sp]
   17ee4:	str	sl, [sp, #36]	; 0x24
   17ee8:	mov	r3, sl
   17eec:	str	r8, [sp, #32]
   17ef0:	mov	r2, r8
   17ef4:	mov	r1, #0
   17ef8:	mov	r0, r1
   17efc:	bl	163d0 <__assert_fail@plt+0x4dcc>
   17f00:	mov	sl, r0
   17f04:	add	r8, r0, #1
   17f08:	mov	r0, r8
   17f0c:	bl	19358 <__assert_fail@plt+0x7d54>
   17f10:	str	r0, [sp, #28]
   17f14:	ldr	r3, [r4, #44]	; 0x2c
   17f18:	str	r3, [sp, #16]
   17f1c:	ldr	r3, [r4, #40]	; 0x28
   17f20:	str	r3, [sp, #12]
   17f24:	str	r9, [sp, #8]
   17f28:	str	r5, [sp, #4]
   17f2c:	ldr	r3, [r4]
   17f30:	str	r3, [sp]
   17f34:	ldr	r3, [sp, #36]	; 0x24
   17f38:	ldr	r2, [sp, #32]
   17f3c:	mov	r1, r8
   17f40:	bl	163d0 <__assert_fail@plt+0x4dcc>
   17f44:	str	fp, [r7]
   17f48:	cmp	r6, #0
   17f4c:	strne	sl, [r6]
   17f50:	ldr	r0, [sp, #28]
   17f54:	add	sp, sp, #44	; 0x2c
   17f58:	ldrd	r4, [sp]
   17f5c:	ldrd	r6, [sp, #8]
   17f60:	ldrd	r8, [sp, #16]
   17f64:	ldrd	sl, [sp, #24]
   17f68:	add	sp, sp, #32
   17f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   17f70:	andeq	ip, r2, r0, lsl r3
   17f74:	str	r4, [sp, #-8]!
   17f78:	str	lr, [sp, #4]
   17f7c:	mov	r3, r2
   17f80:	mov	r2, #0
   17f84:	bl	17e78 <__assert_fail@plt+0x6874>
   17f88:	ldr	r4, [sp]
   17f8c:	add	sp, sp, #4
   17f90:	pop	{pc}		; (ldr pc, [sp], #4)
   17f94:	strd	r4, [sp, #-24]!	; 0xffffffe8
   17f98:	strd	r6, [sp, #8]
   17f9c:	str	r8, [sp, #16]
   17fa0:	str	lr, [sp, #20]
   17fa4:	movw	r3, #49516	; 0xc16c
   17fa8:	movt	r3, #2
   17fac:	ldr	r7, [r3]
   17fb0:	ldr	r3, [r3, #4]
   17fb4:	cmp	r3, #1
   17fb8:	ble	17fe4 <__assert_fail@plt+0x69e0>
   17fbc:	mov	r4, #1
   17fc0:	add	r6, r7, #4
   17fc4:	movw	r5, #49516	; 0xc16c
   17fc8:	movt	r5, #2
   17fcc:	ldr	r0, [r6, r4, lsl #3]
   17fd0:	bl	1a034 <__assert_fail@plt+0x8a30>
   17fd4:	add	r4, r4, #1
   17fd8:	ldr	r3, [r5, #4]
   17fdc:	cmp	r3, r4
   17fe0:	bgt	17fcc <__assert_fail@plt+0x69c8>
   17fe4:	ldr	r0, [r7, #4]
   17fe8:	movw	r3, #49680	; 0xc210
   17fec:	movt	r3, #2
   17ff0:	cmp	r0, r3
   17ff4:	beq	18018 <__assert_fail@plt+0x6a14>
   17ff8:	bl	1a034 <__assert_fail@plt+0x8a30>
   17ffc:	movw	r3, #49516	; 0xc16c
   18000:	movt	r3, #2
   18004:	mov	r2, #256	; 0x100
   18008:	str	r2, [r3, #8]
   1800c:	movw	r2, #49680	; 0xc210
   18010:	movt	r2, #2
   18014:	str	r2, [r3, #12]
   18018:	ldr	r3, [pc, #64]	; 18060 <__assert_fail@plt+0x6a5c>
   1801c:	cmp	r7, r3
   18020:	beq	1803c <__assert_fail@plt+0x6a38>
   18024:	mov	r0, r7
   18028:	bl	1a034 <__assert_fail@plt+0x8a30>
   1802c:	movw	r3, #49516	; 0xc16c
   18030:	movt	r3, #2
   18034:	add	r2, r3, #8
   18038:	str	r2, [r3]
   1803c:	movw	r3, #49516	; 0xc16c
   18040:	movt	r3, #2
   18044:	mov	r2, #1
   18048:	str	r2, [r3, #4]
   1804c:	ldrd	r4, [sp]
   18050:	ldrd	r6, [sp, #8]
   18054:	ldr	r8, [sp, #16]
   18058:	add	sp, sp, #20
   1805c:	pop	{pc}		; (ldr pc, [sp], #4)
   18060:	andeq	ip, r2, r4, ror r1
   18064:	str	r4, [sp, #-8]!
   18068:	str	lr, [sp, #4]
   1806c:	ldr	r3, [pc, #16]	; 18084 <__assert_fail@plt+0x6a80>
   18070:	mvn	r2, #0
   18074:	bl	17ac8 <__assert_fail@plt+0x64c4>
   18078:	ldr	r4, [sp]
   1807c:	add	sp, sp, #4
   18080:	pop	{pc}		; (ldr pc, [sp], #4)
   18084:	andeq	ip, r2, r0, lsl r3
   18088:	str	r4, [sp, #-8]!
   1808c:	str	lr, [sp, #4]
   18090:	ldr	r3, [pc, #12]	; 180a4 <__assert_fail@plt+0x6aa0>
   18094:	bl	17ac8 <__assert_fail@plt+0x64c4>
   18098:	ldr	r4, [sp]
   1809c:	add	sp, sp, #4
   180a0:	pop	{pc}		; (ldr pc, [sp], #4)
   180a4:	andeq	ip, r2, r0, lsl r3
   180a8:	str	r4, [sp, #-8]!
   180ac:	str	lr, [sp, #4]
   180b0:	mov	r1, r0
   180b4:	mov	r0, #0
   180b8:	bl	18064 <__assert_fail@plt+0x6a60>
   180bc:	ldr	r4, [sp]
   180c0:	add	sp, sp, #4
   180c4:	pop	{pc}		; (ldr pc, [sp], #4)
   180c8:	str	r4, [sp, #-8]!
   180cc:	str	lr, [sp, #4]
   180d0:	mov	r2, r1
   180d4:	mov	r1, r0
   180d8:	mov	r0, #0
   180dc:	bl	18088 <__assert_fail@plt+0x6a84>
   180e0:	ldr	r4, [sp]
   180e4:	add	sp, sp, #4
   180e8:	pop	{pc}		; (ldr pc, [sp], #4)
   180ec:	strd	r4, [sp, #-12]!
   180f0:	str	lr, [sp, #8]
   180f4:	sub	sp, sp, #52	; 0x34
   180f8:	mov	r4, r0
   180fc:	mov	r5, r2
   18100:	mov	r0, sp
   18104:	bl	1623c <__assert_fail@plt+0x4c38>
   18108:	mov	r3, sp
   1810c:	mvn	r2, #0
   18110:	mov	r1, r5
   18114:	mov	r0, r4
   18118:	bl	17ac8 <__assert_fail@plt+0x64c4>
   1811c:	add	sp, sp, #52	; 0x34
   18120:	ldrd	r4, [sp]
   18124:	add	sp, sp, #8
   18128:	pop	{pc}		; (ldr pc, [sp], #4)
   1812c:	strd	r4, [sp, #-16]!
   18130:	str	r6, [sp, #8]
   18134:	str	lr, [sp, #12]
   18138:	sub	sp, sp, #48	; 0x30
   1813c:	mov	r4, r0
   18140:	mov	r5, r2
   18144:	mov	r6, r3
   18148:	mov	r0, sp
   1814c:	bl	1623c <__assert_fail@plt+0x4c38>
   18150:	mov	r3, sp
   18154:	mov	r2, r6
   18158:	mov	r1, r5
   1815c:	mov	r0, r4
   18160:	bl	17ac8 <__assert_fail@plt+0x64c4>
   18164:	add	sp, sp, #48	; 0x30
   18168:	ldrd	r4, [sp]
   1816c:	ldr	r6, [sp, #8]
   18170:	add	sp, sp, #12
   18174:	pop	{pc}		; (ldr pc, [sp], #4)
   18178:	str	r4, [sp, #-8]!
   1817c:	str	lr, [sp, #4]
   18180:	mov	r2, r1
   18184:	mov	r1, r0
   18188:	mov	r0, #0
   1818c:	bl	180ec <__assert_fail@plt+0x6ae8>
   18190:	ldr	r4, [sp]
   18194:	add	sp, sp, #4
   18198:	pop	{pc}		; (ldr pc, [sp], #4)
   1819c:	str	r4, [sp, #-8]!
   181a0:	str	lr, [sp, #4]
   181a4:	mov	r3, r2
   181a8:	mov	r2, r1
   181ac:	mov	r1, r0
   181b0:	mov	r0, #0
   181b4:	bl	1812c <__assert_fail@plt+0x6b28>
   181b8:	ldr	r4, [sp]
   181bc:	add	sp, sp, #4
   181c0:	pop	{pc}		; (ldr pc, [sp], #4)
   181c4:	strd	r4, [sp, #-12]!
   181c8:	str	lr, [sp, #8]
   181cc:	sub	sp, sp, #52	; 0x34
   181d0:	mov	r4, r0
   181d4:	mov	r5, r1
   181d8:	mov	r1, r2
   181dc:	ldr	r0, [pc, #92]	; 18240 <__assert_fail@plt+0x6c3c>
   181e0:	ldrd	r2, [r0]
   181e4:	strd	r2, [sp]
   181e8:	ldrd	r2, [r0, #8]
   181ec:	strd	r2, [sp, #8]
   181f0:	ldrd	r2, [r0, #16]
   181f4:	strd	r2, [sp, #16]
   181f8:	ldrd	r2, [r0, #24]
   181fc:	strd	r2, [sp, #24]
   18200:	ldrd	r2, [r0, #32]
   18204:	strd	r2, [sp, #32]
   18208:	ldrd	r2, [r0, #40]	; 0x28
   1820c:	strd	r2, [sp, #40]	; 0x28
   18210:	mov	r2, #1
   18214:	mov	r0, sp
   18218:	bl	17d3c <__assert_fail@plt+0x6738>
   1821c:	mov	r3, sp
   18220:	mov	r2, r5
   18224:	mov	r1, r4
   18228:	mov	r0, #0
   1822c:	bl	17ac8 <__assert_fail@plt+0x64c4>
   18230:	add	sp, sp, #52	; 0x34
   18234:	ldrd	r4, [sp]
   18238:	add	sp, sp, #8
   1823c:	pop	{pc}		; (ldr pc, [sp], #4)
   18240:	andeq	ip, r2, r0, lsl r3
   18244:	str	r4, [sp, #-8]!
   18248:	str	lr, [sp, #4]
   1824c:	mov	r2, r1
   18250:	mvn	r1, #0
   18254:	bl	181c4 <__assert_fail@plt+0x6bc0>
   18258:	ldr	r4, [sp]
   1825c:	add	sp, sp, #4
   18260:	pop	{pc}		; (ldr pc, [sp], #4)
   18264:	str	r4, [sp, #-8]!
   18268:	str	lr, [sp, #4]
   1826c:	mov	r1, #58	; 0x3a
   18270:	bl	18244 <__assert_fail@plt+0x6c40>
   18274:	ldr	r4, [sp]
   18278:	add	sp, sp, #4
   1827c:	pop	{pc}		; (ldr pc, [sp], #4)
   18280:	str	r4, [sp, #-8]!
   18284:	str	lr, [sp, #4]
   18288:	mov	r2, #58	; 0x3a
   1828c:	bl	181c4 <__assert_fail@plt+0x6bc0>
   18290:	ldr	r4, [sp]
   18294:	add	sp, sp, #4
   18298:	pop	{pc}		; (ldr pc, [sp], #4)
   1829c:	strd	r4, [sp, #-12]!
   182a0:	str	lr, [sp, #8]
   182a4:	sub	sp, sp, #100	; 0x64
   182a8:	mov	r4, r0
   182ac:	mov	r5, r2
   182b0:	mov	r0, sp
   182b4:	bl	1623c <__assert_fail@plt+0x4c38>
   182b8:	ldrd	r2, [sp]
   182bc:	strd	r2, [sp, #48]	; 0x30
   182c0:	ldrd	r2, [sp, #8]
   182c4:	strd	r2, [sp, #56]	; 0x38
   182c8:	ldrd	r2, [sp, #16]
   182cc:	strd	r2, [sp, #64]	; 0x40
   182d0:	ldrd	r2, [sp, #24]
   182d4:	strd	r2, [sp, #72]	; 0x48
   182d8:	ldrd	r2, [sp, #32]
   182dc:	strd	r2, [sp, #80]	; 0x50
   182e0:	ldrd	r2, [sp, #40]	; 0x28
   182e4:	strd	r2, [sp, #88]	; 0x58
   182e8:	mov	r2, #1
   182ec:	mov	r1, #58	; 0x3a
   182f0:	add	r0, sp, #48	; 0x30
   182f4:	bl	17d3c <__assert_fail@plt+0x6738>
   182f8:	add	r3, sp, #48	; 0x30
   182fc:	mvn	r2, #0
   18300:	mov	r1, r5
   18304:	mov	r0, r4
   18308:	bl	17ac8 <__assert_fail@plt+0x64c4>
   1830c:	add	sp, sp, #100	; 0x64
   18310:	ldrd	r4, [sp]
   18314:	add	sp, sp, #8
   18318:	pop	{pc}		; (ldr pc, [sp], #4)
   1831c:	strd	r4, [sp, #-20]!	; 0xffffffec
   18320:	strd	r6, [sp, #8]
   18324:	str	lr, [sp, #16]
   18328:	sub	sp, sp, #52	; 0x34
   1832c:	mov	r4, r0
   18330:	mov	r5, r3
   18334:	ldr	r3, [pc, #92]	; 18398 <__assert_fail@plt+0x6d94>
   18338:	ldrd	r6, [r3]
   1833c:	strd	r6, [sp]
   18340:	ldrd	r6, [r3, #8]
   18344:	strd	r6, [sp, #8]
   18348:	ldrd	r6, [r3, #16]
   1834c:	strd	r6, [sp, #16]
   18350:	ldrd	r6, [r3, #24]
   18354:	strd	r6, [sp, #24]
   18358:	ldrd	r6, [r3, #32]
   1835c:	strd	r6, [sp, #32]
   18360:	ldrd	r6, [r3, #40]	; 0x28
   18364:	strd	r6, [sp, #40]	; 0x28
   18368:	mov	r0, sp
   1836c:	bl	17d98 <__assert_fail@plt+0x6794>
   18370:	mov	r3, sp
   18374:	ldr	r2, [sp, #72]	; 0x48
   18378:	mov	r1, r5
   1837c:	mov	r0, r4
   18380:	bl	17ac8 <__assert_fail@plt+0x64c4>
   18384:	add	sp, sp, #52	; 0x34
   18388:	ldrd	r4, [sp]
   1838c:	ldrd	r6, [sp, #8]
   18390:	add	sp, sp, #16
   18394:	pop	{pc}		; (ldr pc, [sp], #4)
   18398:	andeq	ip, r2, r0, lsl r3
   1839c:	push	{lr}		; (str lr, [sp, #-4]!)
   183a0:	sub	sp, sp, #12
   183a4:	mvn	ip, #0
   183a8:	str	ip, [sp]
   183ac:	bl	1831c <__assert_fail@plt+0x6d18>
   183b0:	add	sp, sp, #12
   183b4:	pop	{pc}		; (ldr pc, [sp], #4)
   183b8:	str	r4, [sp, #-8]!
   183bc:	str	lr, [sp, #4]
   183c0:	mov	r3, r2
   183c4:	mov	r2, r1
   183c8:	mov	r1, r0
   183cc:	mov	r0, #0
   183d0:	bl	1839c <__assert_fail@plt+0x6d98>
   183d4:	ldr	r4, [sp]
   183d8:	add	sp, sp, #4
   183dc:	pop	{pc}		; (ldr pc, [sp], #4)
   183e0:	push	{lr}		; (str lr, [sp, #-4]!)
   183e4:	sub	sp, sp, #12
   183e8:	str	r3, [sp]
   183ec:	mov	r3, r2
   183f0:	mov	r2, r1
   183f4:	mov	r1, r0
   183f8:	mov	r0, #0
   183fc:	bl	1831c <__assert_fail@plt+0x6d18>
   18400:	add	sp, sp, #12
   18404:	pop	{pc}		; (ldr pc, [sp], #4)
   18408:	str	r4, [sp, #-8]!
   1840c:	str	lr, [sp, #4]
   18410:	ldr	r3, [pc, #12]	; 18424 <__assert_fail@plt+0x6e20>
   18414:	bl	17ac8 <__assert_fail@plt+0x64c4>
   18418:	ldr	r4, [sp]
   1841c:	add	sp, sp, #4
   18420:	pop	{pc}		; (ldr pc, [sp], #4)
   18424:	andeq	ip, r2, ip, ror r1
   18428:	str	r4, [sp, #-8]!
   1842c:	str	lr, [sp, #4]
   18430:	mov	r2, r1
   18434:	mov	r1, r0
   18438:	mov	r0, #0
   1843c:	bl	18408 <__assert_fail@plt+0x6e04>
   18440:	ldr	r4, [sp]
   18444:	add	sp, sp, #4
   18448:	pop	{pc}		; (ldr pc, [sp], #4)
   1844c:	str	r4, [sp, #-8]!
   18450:	str	lr, [sp, #4]
   18454:	mvn	r2, #0
   18458:	bl	18408 <__assert_fail@plt+0x6e04>
   1845c:	ldr	r4, [sp]
   18460:	add	sp, sp, #4
   18464:	pop	{pc}		; (ldr pc, [sp], #4)
   18468:	str	r4, [sp, #-8]!
   1846c:	str	lr, [sp, #4]
   18470:	mov	r1, r0
   18474:	mov	r0, #0
   18478:	bl	1844c <__assert_fail@plt+0x6e48>
   1847c:	ldr	r4, [sp]
   18480:	add	sp, sp, #4
   18484:	pop	{pc}		; (ldr pc, [sp], #4)
   18488:	str	r4, [sp, #-8]!
   1848c:	str	lr, [sp, #4]
   18490:	sub	sp, sp, #104	; 0x68
   18494:	mov	r4, r0
   18498:	mov	r2, sp
   1849c:	movw	r1, #48552	; 0xbda8
   184a0:	movt	r1, #1
   184a4:	mov	r0, #3
   184a8:	bl	115e0 <__lxstat64@plt>
   184ac:	cmp	r0, #0
   184b0:	movne	r0, #0
   184b4:	bne	184cc <__assert_fail@plt+0x6ec8>
   184b8:	ldrd	r2, [sp, #96]	; 0x60
   184bc:	strd	r2, [r4]
   184c0:	ldrd	r2, [sp]
   184c4:	strd	r2, [r4, #8]
   184c8:	mov	r0, r4
   184cc:	add	sp, sp, #104	; 0x68
   184d0:	ldr	r4, [sp]
   184d4:	add	sp, sp, #4
   184d8:	pop	{pc}		; (ldr pc, [sp], #4)
   184dc:	strd	r4, [sp, #-32]!	; 0xffffffe0
   184e0:	strd	r6, [sp, #8]
   184e4:	strd	r8, [sp, #16]
   184e8:	str	sl, [sp, #24]
   184ec:	str	lr, [sp, #28]
   184f0:	sub	sp, sp, #4032	; 0xfc0
   184f4:	mov	r5, r1
   184f8:	mov	r7, r2
   184fc:	cmn	r0, #100	; 0x64
   18500:	beq	185f4 <__assert_fail@plt+0x6ff0>
   18504:	mov	r4, r0
   18508:	ldrb	r3, [r1]
   1850c:	cmp	r3, #47	; 0x2f
   18510:	beq	185f4 <__assert_fail@plt+0x6ff0>
   18514:	mov	r2, r1
   18518:	mov	r1, r0
   1851c:	mov	r0, sp
   18520:	bl	19984 <__assert_fail@plt+0x8380>
   18524:	subs	r8, r0, #0
   18528:	beq	1858c <__assert_fail@plt+0x6f88>
   1852c:	mov	r1, r7
   18530:	mov	r0, r8
   18534:	bl	18c94 <__assert_fail@plt+0x7690>
   18538:	mov	r6, r0
   1853c:	bl	11484 <__errno_location@plt>
   18540:	mov	sl, r0
   18544:	ldr	r9, [r0]
   18548:	mov	r3, sp
   1854c:	cmp	r8, r3
   18550:	beq	1855c <__assert_fail@plt+0x6f58>
   18554:	mov	r0, r8
   18558:	bl	1a034 <__assert_fail@plt+0x8a30>
   1855c:	cmn	r6, #1
   18560:	bne	18604 <__assert_fail@plt+0x7000>
   18564:	cmp	r9, #20
   18568:	beq	1858c <__assert_fail@plt+0x6f88>
   1856c:	sub	r3, r9, #1
   18570:	cmp	r9, #13
   18574:	cmpne	r3, #1
   18578:	bls	1858c <__assert_fail@plt+0x6f88>
   1857c:	cmp	r9, #38	; 0x26
   18580:	cmpne	r9, #95	; 0x5f
   18584:	strne	r9, [sl]
   18588:	bne	18604 <__assert_fail@plt+0x7000>
   1858c:	mov	r0, sp
   18590:	bl	1a2c4 <__assert_fail@plt+0x8cc0>
   18594:	cmp	r0, #0
   18598:	bne	18624 <__assert_fail@plt+0x7020>
   1859c:	cmp	r4, #0
   185a0:	blt	185b0 <__assert_fail@plt+0x6fac>
   185a4:	ldr	r3, [sp]
   185a8:	cmp	r3, r4
   185ac:	beq	18630 <__assert_fail@plt+0x702c>
   185b0:	mov	r0, r4
   185b4:	bl	11568 <fchdir@plt>
   185b8:	cmp	r0, #0
   185bc:	bne	1864c <__assert_fail@plt+0x7048>
   185c0:	mov	r1, r7
   185c4:	mov	r0, r5
   185c8:	bl	18c94 <__assert_fail@plt+0x7690>
   185cc:	mov	r6, r0
   185d0:	cmn	r0, #1
   185d4:	beq	1866c <__assert_fail@plt+0x7068>
   185d8:	mov	r0, sp
   185dc:	bl	1a324 <__assert_fail@plt+0x8d20>
   185e0:	cmp	r0, #0
   185e4:	bne	1869c <__assert_fail@plt+0x7098>
   185e8:	mov	r0, sp
   185ec:	bl	1a358 <__assert_fail@plt+0x8d54>
   185f0:	b	18604 <__assert_fail@plt+0x7000>
   185f4:	mov	r1, r7
   185f8:	mov	r0, r5
   185fc:	bl	18c94 <__assert_fail@plt+0x7690>
   18600:	mov	r6, r0
   18604:	mov	r0, r6
   18608:	add	sp, sp, #4032	; 0xfc0
   1860c:	ldrd	r4, [sp]
   18610:	ldrd	r6, [sp, #8]
   18614:	ldrd	r8, [sp, #16]
   18618:	ldr	sl, [sp, #24]
   1861c:	add	sp, sp, #28
   18620:	pop	{pc}		; (ldr pc, [sp], #4)
   18624:	bl	11484 <__errno_location@plt>
   18628:	ldr	r0, [r0]
   1862c:	bl	1a208 <__assert_fail@plt+0x8c04>
   18630:	mov	r0, sp
   18634:	bl	1a358 <__assert_fail@plt+0x8d54>
   18638:	bl	11484 <__errno_location@plt>
   1863c:	mov	r3, #9
   18640:	str	r3, [r0]
   18644:	mvn	r6, #0
   18648:	b	18604 <__assert_fail@plt+0x7000>
   1864c:	bl	11484 <__errno_location@plt>
   18650:	mov	r4, r0
   18654:	ldr	r5, [r0]
   18658:	mov	r0, sp
   1865c:	bl	1a358 <__assert_fail@plt+0x8d54>
   18660:	str	r5, [r4]
   18664:	mvn	r6, #0
   18668:	b	18604 <__assert_fail@plt+0x7000>
   1866c:	bl	11484 <__errno_location@plt>
   18670:	mov	r5, r0
   18674:	ldr	r4, [r0]
   18678:	mov	r0, sp
   1867c:	bl	1a324 <__assert_fail@plt+0x8d20>
   18680:	cmp	r0, #0
   18684:	bne	1869c <__assert_fail@plt+0x7098>
   18688:	mov	r0, sp
   1868c:	bl	1a358 <__assert_fail@plt+0x8d54>
   18690:	cmp	r4, #0
   18694:	strne	r4, [r5]
   18698:	b	18604 <__assert_fail@plt+0x7000>
   1869c:	bl	11484 <__errno_location@plt>
   186a0:	ldr	r0, [r0]
   186a4:	bl	1a248 <__assert_fail@plt+0x8c44>
   186a8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   186ac:	strd	r6, [sp, #8]
   186b0:	strd	r8, [sp, #16]
   186b4:	str	sl, [sp, #24]
   186b8:	str	lr, [sp, #28]
   186bc:	sub	sp, sp, #4032	; 0xfc0
   186c0:	mov	r5, r1
   186c4:	mov	r7, r2
   186c8:	cmn	r0, #100	; 0x64
   186cc:	beq	187c0 <__assert_fail@plt+0x71bc>
   186d0:	mov	r4, r0
   186d4:	ldrb	r3, [r1]
   186d8:	cmp	r3, #47	; 0x2f
   186dc:	beq	187c0 <__assert_fail@plt+0x71bc>
   186e0:	mov	r2, r1
   186e4:	mov	r1, r0
   186e8:	mov	r0, sp
   186ec:	bl	19984 <__assert_fail@plt+0x8380>
   186f0:	subs	r8, r0, #0
   186f4:	beq	18758 <__assert_fail@plt+0x7154>
   186f8:	mov	r1, r7
   186fc:	mov	r0, r8
   18700:	bl	18cb8 <__assert_fail@plt+0x76b4>
   18704:	mov	r6, r0
   18708:	bl	11484 <__errno_location@plt>
   1870c:	mov	sl, r0
   18710:	ldr	r9, [r0]
   18714:	mov	r3, sp
   18718:	cmp	r8, r3
   1871c:	beq	18728 <__assert_fail@plt+0x7124>
   18720:	mov	r0, r8
   18724:	bl	1a034 <__assert_fail@plt+0x8a30>
   18728:	cmn	r6, #1
   1872c:	bne	187d0 <__assert_fail@plt+0x71cc>
   18730:	cmp	r9, #20
   18734:	beq	18758 <__assert_fail@plt+0x7154>
   18738:	sub	r3, r9, #1
   1873c:	cmp	r9, #13
   18740:	cmpne	r3, #1
   18744:	bls	18758 <__assert_fail@plt+0x7154>
   18748:	cmp	r9, #38	; 0x26
   1874c:	cmpne	r9, #95	; 0x5f
   18750:	strne	r9, [sl]
   18754:	bne	187d0 <__assert_fail@plt+0x71cc>
   18758:	mov	r0, sp
   1875c:	bl	1a2c4 <__assert_fail@plt+0x8cc0>
   18760:	cmp	r0, #0
   18764:	bne	187f0 <__assert_fail@plt+0x71ec>
   18768:	cmp	r4, #0
   1876c:	blt	1877c <__assert_fail@plt+0x7178>
   18770:	ldr	r3, [sp]
   18774:	cmp	r3, r4
   18778:	beq	187fc <__assert_fail@plt+0x71f8>
   1877c:	mov	r0, r4
   18780:	bl	11568 <fchdir@plt>
   18784:	cmp	r0, #0
   18788:	bne	18818 <__assert_fail@plt+0x7214>
   1878c:	mov	r1, r7
   18790:	mov	r0, r5
   18794:	bl	18cb8 <__assert_fail@plt+0x76b4>
   18798:	mov	r6, r0
   1879c:	cmn	r0, #1
   187a0:	beq	18838 <__assert_fail@plt+0x7234>
   187a4:	mov	r0, sp
   187a8:	bl	1a324 <__assert_fail@plt+0x8d20>
   187ac:	cmp	r0, #0
   187b0:	bne	18868 <__assert_fail@plt+0x7264>
   187b4:	mov	r0, sp
   187b8:	bl	1a358 <__assert_fail@plt+0x8d54>
   187bc:	b	187d0 <__assert_fail@plt+0x71cc>
   187c0:	mov	r1, r7
   187c4:	mov	r0, r5
   187c8:	bl	18cb8 <__assert_fail@plt+0x76b4>
   187cc:	mov	r6, r0
   187d0:	mov	r0, r6
   187d4:	add	sp, sp, #4032	; 0xfc0
   187d8:	ldrd	r4, [sp]
   187dc:	ldrd	r6, [sp, #8]
   187e0:	ldrd	r8, [sp, #16]
   187e4:	ldr	sl, [sp, #24]
   187e8:	add	sp, sp, #28
   187ec:	pop	{pc}		; (ldr pc, [sp], #4)
   187f0:	bl	11484 <__errno_location@plt>
   187f4:	ldr	r0, [r0]
   187f8:	bl	1a208 <__assert_fail@plt+0x8c04>
   187fc:	mov	r0, sp
   18800:	bl	1a358 <__assert_fail@plt+0x8d54>
   18804:	bl	11484 <__errno_location@plt>
   18808:	mov	r3, #9
   1880c:	str	r3, [r0]
   18810:	mvn	r6, #0
   18814:	b	187d0 <__assert_fail@plt+0x71cc>
   18818:	bl	11484 <__errno_location@plt>
   1881c:	mov	r4, r0
   18820:	ldr	r5, [r0]
   18824:	mov	r0, sp
   18828:	bl	1a358 <__assert_fail@plt+0x8d54>
   1882c:	str	r5, [r4]
   18830:	mvn	r6, #0
   18834:	b	187d0 <__assert_fail@plt+0x71cc>
   18838:	bl	11484 <__errno_location@plt>
   1883c:	mov	r5, r0
   18840:	ldr	r4, [r0]
   18844:	mov	r0, sp
   18848:	bl	1a324 <__assert_fail@plt+0x8d20>
   1884c:	cmp	r0, #0
   18850:	bne	18868 <__assert_fail@plt+0x7264>
   18854:	mov	r0, sp
   18858:	bl	1a358 <__assert_fail@plt+0x8d54>
   1885c:	cmp	r4, #0
   18860:	strne	r4, [r5]
   18864:	b	187d0 <__assert_fail@plt+0x71cc>
   18868:	bl	11484 <__errno_location@plt>
   1886c:	ldr	r0, [r0]
   18870:	bl	1a248 <__assert_fail@plt+0x8c44>
   18874:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18878:	strd	r6, [sp, #8]
   1887c:	strd	r8, [sp, #16]
   18880:	str	sl, [sp, #24]
   18884:	str	lr, [sp, #28]
   18888:	sub	sp, sp, #4032	; 0xfc0
   1888c:	mov	r5, r1
   18890:	mov	r7, r2
   18894:	cmn	r0, #100	; 0x64
   18898:	beq	1898c <__assert_fail@plt+0x7388>
   1889c:	mov	r4, r0
   188a0:	ldrb	r3, [r1]
   188a4:	cmp	r3, #47	; 0x2f
   188a8:	beq	1898c <__assert_fail@plt+0x7388>
   188ac:	mov	r2, r1
   188b0:	mov	r1, r0
   188b4:	mov	r0, sp
   188b8:	bl	19984 <__assert_fail@plt+0x8380>
   188bc:	subs	r8, r0, #0
   188c0:	beq	18924 <__assert_fail@plt+0x7320>
   188c4:	mov	r1, r7
   188c8:	mov	r0, r8
   188cc:	bl	114e4 <setfilecon@plt>
   188d0:	mov	r6, r0
   188d4:	bl	11484 <__errno_location@plt>
   188d8:	mov	sl, r0
   188dc:	ldr	r9, [r0]
   188e0:	mov	r3, sp
   188e4:	cmp	r8, r3
   188e8:	beq	188f4 <__assert_fail@plt+0x72f0>
   188ec:	mov	r0, r8
   188f0:	bl	1a034 <__assert_fail@plt+0x8a30>
   188f4:	cmn	r6, #1
   188f8:	bne	1899c <__assert_fail@plt+0x7398>
   188fc:	cmp	r9, #20
   18900:	beq	18924 <__assert_fail@plt+0x7320>
   18904:	sub	r3, r9, #1
   18908:	cmp	r9, #13
   1890c:	cmpne	r3, #1
   18910:	bls	18924 <__assert_fail@plt+0x7320>
   18914:	cmp	r9, #38	; 0x26
   18918:	cmpne	r9, #95	; 0x5f
   1891c:	strne	r9, [sl]
   18920:	bne	1899c <__assert_fail@plt+0x7398>
   18924:	mov	r0, sp
   18928:	bl	1a2c4 <__assert_fail@plt+0x8cc0>
   1892c:	cmp	r0, #0
   18930:	bne	189bc <__assert_fail@plt+0x73b8>
   18934:	cmp	r4, #0
   18938:	blt	18948 <__assert_fail@plt+0x7344>
   1893c:	ldr	r3, [sp]
   18940:	cmp	r3, r4
   18944:	beq	189c8 <__assert_fail@plt+0x73c4>
   18948:	mov	r0, r4
   1894c:	bl	11568 <fchdir@plt>
   18950:	cmp	r0, #0
   18954:	bne	189e4 <__assert_fail@plt+0x73e0>
   18958:	mov	r1, r7
   1895c:	mov	r0, r5
   18960:	bl	114e4 <setfilecon@plt>
   18964:	mov	r6, r0
   18968:	cmn	r0, #1
   1896c:	beq	18a04 <__assert_fail@plt+0x7400>
   18970:	mov	r0, sp
   18974:	bl	1a324 <__assert_fail@plt+0x8d20>
   18978:	cmp	r0, #0
   1897c:	bne	18a34 <__assert_fail@plt+0x7430>
   18980:	mov	r0, sp
   18984:	bl	1a358 <__assert_fail@plt+0x8d54>
   18988:	b	1899c <__assert_fail@plt+0x7398>
   1898c:	mov	r1, r7
   18990:	mov	r0, r5
   18994:	bl	114e4 <setfilecon@plt>
   18998:	mov	r6, r0
   1899c:	mov	r0, r6
   189a0:	add	sp, sp, #4032	; 0xfc0
   189a4:	ldrd	r4, [sp]
   189a8:	ldrd	r6, [sp, #8]
   189ac:	ldrd	r8, [sp, #16]
   189b0:	ldr	sl, [sp, #24]
   189b4:	add	sp, sp, #28
   189b8:	pop	{pc}		; (ldr pc, [sp], #4)
   189bc:	bl	11484 <__errno_location@plt>
   189c0:	ldr	r0, [r0]
   189c4:	bl	1a208 <__assert_fail@plt+0x8c04>
   189c8:	mov	r0, sp
   189cc:	bl	1a358 <__assert_fail@plt+0x8d54>
   189d0:	bl	11484 <__errno_location@plt>
   189d4:	mov	r3, #9
   189d8:	str	r3, [r0]
   189dc:	mvn	r6, #0
   189e0:	b	1899c <__assert_fail@plt+0x7398>
   189e4:	bl	11484 <__errno_location@plt>
   189e8:	mov	r4, r0
   189ec:	ldr	r5, [r0]
   189f0:	mov	r0, sp
   189f4:	bl	1a358 <__assert_fail@plt+0x8d54>
   189f8:	str	r5, [r4]
   189fc:	mvn	r6, #0
   18a00:	b	1899c <__assert_fail@plt+0x7398>
   18a04:	bl	11484 <__errno_location@plt>
   18a08:	mov	r5, r0
   18a0c:	ldr	r4, [r0]
   18a10:	mov	r0, sp
   18a14:	bl	1a324 <__assert_fail@plt+0x8d20>
   18a18:	cmp	r0, #0
   18a1c:	bne	18a34 <__assert_fail@plt+0x7430>
   18a20:	mov	r0, sp
   18a24:	bl	1a358 <__assert_fail@plt+0x8d54>
   18a28:	cmp	r4, #0
   18a2c:	strne	r4, [r5]
   18a30:	b	1899c <__assert_fail@plt+0x7398>
   18a34:	bl	11484 <__errno_location@plt>
   18a38:	ldr	r0, [r0]
   18a3c:	bl	1a248 <__assert_fail@plt+0x8c44>
   18a40:	strd	r4, [sp, #-32]!	; 0xffffffe0
   18a44:	strd	r6, [sp, #8]
   18a48:	strd	r8, [sp, #16]
   18a4c:	str	sl, [sp, #24]
   18a50:	str	lr, [sp, #28]
   18a54:	sub	sp, sp, #4032	; 0xfc0
   18a58:	mov	r5, r1
   18a5c:	mov	r7, r2
   18a60:	cmn	r0, #100	; 0x64
   18a64:	beq	18b58 <__assert_fail@plt+0x7554>
   18a68:	mov	r4, r0
   18a6c:	ldrb	r3, [r1]
   18a70:	cmp	r3, #47	; 0x2f
   18a74:	beq	18b58 <__assert_fail@plt+0x7554>
   18a78:	mov	r2, r1
   18a7c:	mov	r1, r0
   18a80:	mov	r0, sp
   18a84:	bl	19984 <__assert_fail@plt+0x8380>
   18a88:	subs	r8, r0, #0
   18a8c:	beq	18af0 <__assert_fail@plt+0x74ec>
   18a90:	mov	r1, r7
   18a94:	mov	r0, r8
   18a98:	bl	11280 <lsetfilecon@plt>
   18a9c:	mov	r6, r0
   18aa0:	bl	11484 <__errno_location@plt>
   18aa4:	mov	sl, r0
   18aa8:	ldr	r9, [r0]
   18aac:	mov	r3, sp
   18ab0:	cmp	r8, r3
   18ab4:	beq	18ac0 <__assert_fail@plt+0x74bc>
   18ab8:	mov	r0, r8
   18abc:	bl	1a034 <__assert_fail@plt+0x8a30>
   18ac0:	cmn	r6, #1
   18ac4:	bne	18b68 <__assert_fail@plt+0x7564>
   18ac8:	cmp	r9, #20
   18acc:	beq	18af0 <__assert_fail@plt+0x74ec>
   18ad0:	sub	r3, r9, #1
   18ad4:	cmp	r9, #13
   18ad8:	cmpne	r3, #1
   18adc:	bls	18af0 <__assert_fail@plt+0x74ec>
   18ae0:	cmp	r9, #38	; 0x26
   18ae4:	cmpne	r9, #95	; 0x5f
   18ae8:	strne	r9, [sl]
   18aec:	bne	18b68 <__assert_fail@plt+0x7564>
   18af0:	mov	r0, sp
   18af4:	bl	1a2c4 <__assert_fail@plt+0x8cc0>
   18af8:	cmp	r0, #0
   18afc:	bne	18b88 <__assert_fail@plt+0x7584>
   18b00:	cmp	r4, #0
   18b04:	blt	18b14 <__assert_fail@plt+0x7510>
   18b08:	ldr	r3, [sp]
   18b0c:	cmp	r3, r4
   18b10:	beq	18b94 <__assert_fail@plt+0x7590>
   18b14:	mov	r0, r4
   18b18:	bl	11568 <fchdir@plt>
   18b1c:	cmp	r0, #0
   18b20:	bne	18bb0 <__assert_fail@plt+0x75ac>
   18b24:	mov	r1, r7
   18b28:	mov	r0, r5
   18b2c:	bl	11280 <lsetfilecon@plt>
   18b30:	mov	r6, r0
   18b34:	cmn	r0, #1
   18b38:	beq	18bd0 <__assert_fail@plt+0x75cc>
   18b3c:	mov	r0, sp
   18b40:	bl	1a324 <__assert_fail@plt+0x8d20>
   18b44:	cmp	r0, #0
   18b48:	bne	18c00 <__assert_fail@plt+0x75fc>
   18b4c:	mov	r0, sp
   18b50:	bl	1a358 <__assert_fail@plt+0x8d54>
   18b54:	b	18b68 <__assert_fail@plt+0x7564>
   18b58:	mov	r1, r7
   18b5c:	mov	r0, r5
   18b60:	bl	11280 <lsetfilecon@plt>
   18b64:	mov	r6, r0
   18b68:	mov	r0, r6
   18b6c:	add	sp, sp, #4032	; 0xfc0
   18b70:	ldrd	r4, [sp]
   18b74:	ldrd	r6, [sp, #8]
   18b78:	ldrd	r8, [sp, #16]
   18b7c:	ldr	sl, [sp, #24]
   18b80:	add	sp, sp, #28
   18b84:	pop	{pc}		; (ldr pc, [sp], #4)
   18b88:	bl	11484 <__errno_location@plt>
   18b8c:	ldr	r0, [r0]
   18b90:	bl	1a208 <__assert_fail@plt+0x8c04>
   18b94:	mov	r0, sp
   18b98:	bl	1a358 <__assert_fail@plt+0x8d54>
   18b9c:	bl	11484 <__errno_location@plt>
   18ba0:	mov	r3, #9
   18ba4:	str	r3, [r0]
   18ba8:	mvn	r6, #0
   18bac:	b	18b68 <__assert_fail@plt+0x7564>
   18bb0:	bl	11484 <__errno_location@plt>
   18bb4:	mov	r4, r0
   18bb8:	ldr	r5, [r0]
   18bbc:	mov	r0, sp
   18bc0:	bl	1a358 <__assert_fail@plt+0x8d54>
   18bc4:	str	r5, [r4]
   18bc8:	mvn	r6, #0
   18bcc:	b	18b68 <__assert_fail@plt+0x7564>
   18bd0:	bl	11484 <__errno_location@plt>
   18bd4:	mov	r5, r0
   18bd8:	ldr	r4, [r0]
   18bdc:	mov	r0, sp
   18be0:	bl	1a324 <__assert_fail@plt+0x8d20>
   18be4:	cmp	r0, #0
   18be8:	bne	18c00 <__assert_fail@plt+0x75fc>
   18bec:	mov	r0, sp
   18bf0:	bl	1a358 <__assert_fail@plt+0x8d54>
   18bf4:	cmp	r4, #0
   18bf8:	strne	r4, [r5]
   18bfc:	b	18b68 <__assert_fail@plt+0x7564>
   18c00:	bl	11484 <__errno_location@plt>
   18c04:	ldr	r0, [r0]
   18c08:	bl	1a248 <__assert_fail@plt+0x8c44>
   18c0c:	strd	r4, [sp, #-16]!
   18c10:	str	r6, [sp, #8]
   18c14:	str	lr, [sp, #12]
   18c18:	subs	r4, r0, #0
   18c1c:	beq	18c40 <__assert_fail@plt+0x763c>
   18c20:	mov	r5, r1
   18c24:	cmp	r4, #10
   18c28:	beq	18c54 <__assert_fail@plt+0x7650>
   18c2c:	mov	r0, r4
   18c30:	ldrd	r4, [sp]
   18c34:	ldr	r6, [sp, #8]
   18c38:	add	sp, sp, #12
   18c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   18c40:	bl	11484 <__errno_location@plt>
   18c44:	mov	r3, #95	; 0x5f
   18c48:	str	r3, [r0]
   18c4c:	mvn	r4, #0
   18c50:	b	18c2c <__assert_fail@plt+0x7628>
   18c54:	ldr	r6, [r1]
   18c58:	movw	r1, #47628	; 0xba0c
   18c5c:	movt	r1, #1
   18c60:	mov	r0, r6
   18c64:	bl	11268 <strcmp@plt>
   18c68:	cmp	r0, #0
   18c6c:	bne	18c2c <__assert_fail@plt+0x7628>
   18c70:	mov	r0, r6
   18c74:	bl	11580 <freecon@plt>
   18c78:	mov	r3, #0
   18c7c:	str	r3, [r5]
   18c80:	bl	11484 <__errno_location@plt>
   18c84:	mov	r3, #61	; 0x3d
   18c88:	str	r3, [r0]
   18c8c:	mvn	r4, #0
   18c90:	b	18c2c <__assert_fail@plt+0x7628>
   18c94:	str	r4, [sp, #-8]!
   18c98:	str	lr, [sp, #4]
   18c9c:	mov	r4, r1
   18ca0:	bl	11454 <getfilecon@plt>
   18ca4:	mov	r1, r4
   18ca8:	bl	18c0c <__assert_fail@plt+0x7608>
   18cac:	ldr	r4, [sp]
   18cb0:	add	sp, sp, #4
   18cb4:	pop	{pc}		; (ldr pc, [sp], #4)
   18cb8:	str	r4, [sp, #-8]!
   18cbc:	str	lr, [sp, #4]
   18cc0:	mov	r4, r1
   18cc4:	bl	113d0 <lgetfilecon@plt>
   18cc8:	mov	r1, r4
   18ccc:	bl	18c0c <__assert_fail@plt+0x7608>
   18cd0:	ldr	r4, [sp]
   18cd4:	add	sp, sp, #4
   18cd8:	pop	{pc}		; (ldr pc, [sp], #4)
   18cdc:	str	r4, [sp, #-8]!
   18ce0:	str	lr, [sp, #4]
   18ce4:	mov	r4, r1
   18ce8:	bl	1131c <fgetfilecon@plt>
   18cec:	mov	r1, r4
   18cf0:	bl	18c0c <__assert_fail@plt+0x7608>
   18cf4:	ldr	r4, [sp]
   18cf8:	add	sp, sp, #4
   18cfc:	pop	{pc}		; (ldr pc, [sp], #4)
   18d00:	strd	r4, [sp, #-24]!	; 0xffffffe8
   18d04:	strd	r6, [sp, #8]
   18d08:	str	r8, [sp, #16]
   18d0c:	str	lr, [sp, #20]
   18d10:	mov	r4, r0
   18d14:	cmp	r0, #2
   18d18:	bls	18d34 <__assert_fail@plt+0x7730>
   18d1c:	mov	r0, r4
   18d20:	ldrd	r4, [sp]
   18d24:	ldrd	r6, [sp, #8]
   18d28:	ldr	r8, [sp, #16]
   18d2c:	add	sp, sp, #20
   18d30:	pop	{pc}		; (ldr pc, [sp], #4)
   18d34:	bl	1a38c <__assert_fail@plt+0x8d88>
   18d38:	mov	r6, r0
   18d3c:	bl	11484 <__errno_location@plt>
   18d40:	mov	r5, r0
   18d44:	ldr	r7, [r0]
   18d48:	mov	r0, r4
   18d4c:	bl	115d4 <close@plt>
   18d50:	str	r7, [r5]
   18d54:	mov	r4, r6
   18d58:	b	18d1c <__assert_fail@plt+0x7718>
   18d5c:	strd	r4, [sp, #-16]!
   18d60:	str	r6, [sp, #8]
   18d64:	str	lr, [sp, #12]
   18d68:	sub	sp, sp, #32
   18d6c:	mov	r4, r0
   18d70:	ldr	r5, [sp, #48]	; 0x30
   18d74:	ldr	r6, [sp, #52]	; 0x34
   18d78:	cmp	r1, #0
   18d7c:	beq	18e48 <__assert_fail@plt+0x7844>
   18d80:	str	r3, [sp, #4]
   18d84:	str	r2, [sp]
   18d88:	mov	r3, r1
   18d8c:	movw	r2, #47640	; 0xba18
   18d90:	movt	r2, #1
   18d94:	mov	r1, #1
   18d98:	bl	114cc <__fprintf_chk@plt>
   18d9c:	mov	r2, #5
   18da0:	movw	r1, #47660	; 0xba2c
   18da4:	movt	r1, #1
   18da8:	mov	r0, #0
   18dac:	bl	112f8 <dcgettext@plt>
   18db0:	movw	r3, #2022	; 0x7e6
   18db4:	str	r3, [sp]
   18db8:	mov	r3, r0
   18dbc:	movw	r2, #48388	; 0xbd04
   18dc0:	movt	r2, #1
   18dc4:	mov	r1, #1
   18dc8:	mov	r0, r4
   18dcc:	bl	114cc <__fprintf_chk@plt>
   18dd0:	mov	r1, r4
   18dd4:	mov	r0, #10
   18dd8:	bl	112e0 <fputc_unlocked@plt>
   18ddc:	mov	r2, #5
   18de0:	movw	r1, #47664	; 0xba30
   18de4:	movt	r1, #1
   18de8:	mov	r0, #0
   18dec:	bl	112f8 <dcgettext@plt>
   18df0:	movw	r3, #47836	; 0xbadc
   18df4:	movt	r3, #1
   18df8:	mov	r2, r0
   18dfc:	mov	r1, #1
   18e00:	mov	r0, r4
   18e04:	bl	114cc <__fprintf_chk@plt>
   18e08:	mov	r1, r4
   18e0c:	mov	r0, #10
   18e10:	bl	112e0 <fputc_unlocked@plt>
   18e14:	cmp	r6, #9
   18e18:	ldrls	pc, [pc, r6, lsl #2]
   18e1c:	b	19120 <__assert_fail@plt+0x7b1c>
   18e20:	andeq	r8, r1, ip, lsl #29
   18e24:	andeq	r8, r1, r4, ror #28
   18e28:	andeq	r8, r1, r0, lsr #29
   18e2c:	ldrdeq	r8, [r1], -r4
   18e30:	andeq	r8, r1, r0, lsl pc
   18e34:	andeq	r8, r1, r4, asr pc
   18e38:	andeq	r8, r1, r0, lsr #31
   18e3c:	strdeq	r8, [r1], -r4
   18e40:	andeq	r9, r1, r0, asr r0
   18e44:	strheq	r9, [r1], -r4
   18e48:	str	r3, [sp]
   18e4c:	mov	r3, r2
   18e50:	movw	r2, #47652	; 0xba24
   18e54:	movt	r2, #1
   18e58:	mov	r1, #1
   18e5c:	bl	114cc <__fprintf_chk@plt>
   18e60:	b	18d9c <__assert_fail@plt+0x7798>
   18e64:	mov	r2, #5
   18e68:	movw	r1, #47872	; 0xbb00
   18e6c:	movt	r1, #1
   18e70:	mov	r0, #0
   18e74:	bl	112f8 <dcgettext@plt>
   18e78:	ldr	r3, [r5]
   18e7c:	mov	r2, r0
   18e80:	mov	r1, #1
   18e84:	mov	r0, r4
   18e88:	bl	114cc <__fprintf_chk@plt>
   18e8c:	add	sp, sp, #32
   18e90:	ldrd	r4, [sp]
   18e94:	ldr	r6, [sp, #8]
   18e98:	add	sp, sp, #12
   18e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   18ea0:	mov	r2, #5
   18ea4:	movw	r1, #47888	; 0xbb10
   18ea8:	movt	r1, #1
   18eac:	mov	r0, #0
   18eb0:	bl	112f8 <dcgettext@plt>
   18eb4:	ldr	r3, [r5, #4]
   18eb8:	str	r3, [sp]
   18ebc:	ldr	r3, [r5]
   18ec0:	mov	r2, r0
   18ec4:	mov	r1, #1
   18ec8:	mov	r0, r4
   18ecc:	bl	114cc <__fprintf_chk@plt>
   18ed0:	b	18e8c <__assert_fail@plt+0x7888>
   18ed4:	mov	r2, #5
   18ed8:	movw	r1, #47912	; 0xbb28
   18edc:	movt	r1, #1
   18ee0:	mov	r0, #0
   18ee4:	bl	112f8 <dcgettext@plt>
   18ee8:	ldr	r3, [r5, #8]
   18eec:	str	r3, [sp, #4]
   18ef0:	ldr	r3, [r5, #4]
   18ef4:	str	r3, [sp]
   18ef8:	ldr	r3, [r5]
   18efc:	mov	r2, r0
   18f00:	mov	r1, #1
   18f04:	mov	r0, r4
   18f08:	bl	114cc <__fprintf_chk@plt>
   18f0c:	b	18e8c <__assert_fail@plt+0x7888>
   18f10:	mov	r2, #5
   18f14:	movw	r1, #47940	; 0xbb44
   18f18:	movt	r1, #1
   18f1c:	mov	r0, #0
   18f20:	bl	112f8 <dcgettext@plt>
   18f24:	ldr	r3, [r5, #12]
   18f28:	str	r3, [sp, #8]
   18f2c:	ldr	r3, [r5, #8]
   18f30:	str	r3, [sp, #4]
   18f34:	ldr	r3, [r5, #4]
   18f38:	str	r3, [sp]
   18f3c:	ldr	r3, [r5]
   18f40:	mov	r2, r0
   18f44:	mov	r1, #1
   18f48:	mov	r0, r4
   18f4c:	bl	114cc <__fprintf_chk@plt>
   18f50:	b	18e8c <__assert_fail@plt+0x7888>
   18f54:	mov	r2, #5
   18f58:	movw	r1, #47972	; 0xbb64
   18f5c:	movt	r1, #1
   18f60:	mov	r0, #0
   18f64:	bl	112f8 <dcgettext@plt>
   18f68:	ldr	r3, [r5, #16]
   18f6c:	str	r3, [sp, #12]
   18f70:	ldr	r3, [r5, #12]
   18f74:	str	r3, [sp, #8]
   18f78:	ldr	r3, [r5, #8]
   18f7c:	str	r3, [sp, #4]
   18f80:	ldr	r3, [r5, #4]
   18f84:	str	r3, [sp]
   18f88:	ldr	r3, [r5]
   18f8c:	mov	r2, r0
   18f90:	mov	r1, #1
   18f94:	mov	r0, r4
   18f98:	bl	114cc <__fprintf_chk@plt>
   18f9c:	b	18e8c <__assert_fail@plt+0x7888>
   18fa0:	mov	r2, #5
   18fa4:	movw	r1, #48008	; 0xbb88
   18fa8:	movt	r1, #1
   18fac:	mov	r0, #0
   18fb0:	bl	112f8 <dcgettext@plt>
   18fb4:	ldr	r3, [r5, #20]
   18fb8:	str	r3, [sp, #16]
   18fbc:	ldr	r3, [r5, #16]
   18fc0:	str	r3, [sp, #12]
   18fc4:	ldr	r3, [r5, #12]
   18fc8:	str	r3, [sp, #8]
   18fcc:	ldr	r3, [r5, #8]
   18fd0:	str	r3, [sp, #4]
   18fd4:	ldr	r3, [r5, #4]
   18fd8:	str	r3, [sp]
   18fdc:	ldr	r3, [r5]
   18fe0:	mov	r2, r0
   18fe4:	mov	r1, #1
   18fe8:	mov	r0, r4
   18fec:	bl	114cc <__fprintf_chk@plt>
   18ff0:	b	18e8c <__assert_fail@plt+0x7888>
   18ff4:	mov	r2, #5
   18ff8:	movw	r1, #48048	; 0xbbb0
   18ffc:	movt	r1, #1
   19000:	mov	r0, #0
   19004:	bl	112f8 <dcgettext@plt>
   19008:	ldr	r3, [r5, #24]
   1900c:	str	r3, [sp, #20]
   19010:	ldr	r3, [r5, #20]
   19014:	str	r3, [sp, #16]
   19018:	ldr	r3, [r5, #16]
   1901c:	str	r3, [sp, #12]
   19020:	ldr	r3, [r5, #12]
   19024:	str	r3, [sp, #8]
   19028:	ldr	r3, [r5, #8]
   1902c:	str	r3, [sp, #4]
   19030:	ldr	r3, [r5, #4]
   19034:	str	r3, [sp]
   19038:	ldr	r3, [r5]
   1903c:	mov	r2, r0
   19040:	mov	r1, #1
   19044:	mov	r0, r4
   19048:	bl	114cc <__fprintf_chk@plt>
   1904c:	b	18e8c <__assert_fail@plt+0x7888>
   19050:	mov	r2, #5
   19054:	movw	r1, #48092	; 0xbbdc
   19058:	movt	r1, #1
   1905c:	mov	r0, #0
   19060:	bl	112f8 <dcgettext@plt>
   19064:	ldr	r3, [r5, #28]
   19068:	str	r3, [sp, #24]
   1906c:	ldr	r3, [r5, #24]
   19070:	str	r3, [sp, #20]
   19074:	ldr	r3, [r5, #20]
   19078:	str	r3, [sp, #16]
   1907c:	ldr	r3, [r5, #16]
   19080:	str	r3, [sp, #12]
   19084:	ldr	r3, [r5, #12]
   19088:	str	r3, [sp, #8]
   1908c:	ldr	r3, [r5, #8]
   19090:	str	r3, [sp, #4]
   19094:	ldr	r3, [r5, #4]
   19098:	str	r3, [sp]
   1909c:	ldr	r3, [r5]
   190a0:	mov	r2, r0
   190a4:	mov	r1, #1
   190a8:	mov	r0, r4
   190ac:	bl	114cc <__fprintf_chk@plt>
   190b0:	b	18e8c <__assert_fail@plt+0x7888>
   190b4:	mov	r2, #5
   190b8:	movw	r1, #48140	; 0xbc0c
   190bc:	movt	r1, #1
   190c0:	mov	r0, #0
   190c4:	bl	112f8 <dcgettext@plt>
   190c8:	ldr	r3, [r5, #32]
   190cc:	str	r3, [sp, #28]
   190d0:	ldr	r3, [r5, #28]
   190d4:	str	r3, [sp, #24]
   190d8:	ldr	r3, [r5, #24]
   190dc:	str	r3, [sp, #20]
   190e0:	ldr	r3, [r5, #20]
   190e4:	str	r3, [sp, #16]
   190e8:	ldr	r3, [r5, #16]
   190ec:	str	r3, [sp, #12]
   190f0:	ldr	r3, [r5, #12]
   190f4:	str	r3, [sp, #8]
   190f8:	ldr	r3, [r5, #8]
   190fc:	str	r3, [sp, #4]
   19100:	ldr	r3, [r5, #4]
   19104:	str	r3, [sp]
   19108:	ldr	r3, [r5]
   1910c:	mov	r2, r0
   19110:	mov	r1, #1
   19114:	mov	r0, r4
   19118:	bl	114cc <__fprintf_chk@plt>
   1911c:	b	18e8c <__assert_fail@plt+0x7888>
   19120:	mov	r2, #5
   19124:	movw	r1, #48192	; 0xbc40
   19128:	movt	r1, #1
   1912c:	mov	r0, #0
   19130:	bl	112f8 <dcgettext@plt>
   19134:	ldr	r3, [r5, #32]
   19138:	str	r3, [sp, #28]
   1913c:	ldr	r3, [r5, #28]
   19140:	str	r3, [sp, #24]
   19144:	ldr	r3, [r5, #24]
   19148:	str	r3, [sp, #20]
   1914c:	ldr	r3, [r5, #20]
   19150:	str	r3, [sp, #16]
   19154:	ldr	r3, [r5, #16]
   19158:	str	r3, [sp, #12]
   1915c:	ldr	r3, [r5, #12]
   19160:	str	r3, [sp, #8]
   19164:	ldr	r3, [r5, #8]
   19168:	str	r3, [sp, #4]
   1916c:	ldr	r3, [r5, #4]
   19170:	str	r3, [sp]
   19174:	ldr	r3, [r5]
   19178:	mov	r2, r0
   1917c:	mov	r1, #1
   19180:	mov	r0, r4
   19184:	bl	114cc <__fprintf_chk@plt>
   19188:	b	18e8c <__assert_fail@plt+0x7888>
   1918c:	strd	r4, [sp, #-12]!
   19190:	str	lr, [sp, #8]
   19194:	sub	sp, sp, #12
   19198:	ldr	r5, [sp, #24]
   1919c:	ldr	ip, [r5]
   191a0:	cmp	ip, #0
   191a4:	beq	191dc <__assert_fail@plt+0x7bd8>
   191a8:	mov	lr, r5
   191ac:	mov	ip, #0
   191b0:	add	ip, ip, #1
   191b4:	ldr	r4, [lr, #4]!
   191b8:	cmp	r4, #0
   191bc:	bne	191b0 <__assert_fail@plt+0x7bac>
   191c0:	str	ip, [sp, #4]
   191c4:	str	r5, [sp]
   191c8:	bl	18d5c <__assert_fail@plt+0x7758>
   191cc:	add	sp, sp, #12
   191d0:	ldrd	r4, [sp]
   191d4:	add	sp, sp, #8
   191d8:	pop	{pc}		; (ldr pc, [sp], #4)
   191dc:	mov	ip, #0
   191e0:	b	191c0 <__assert_fail@plt+0x7bbc>
   191e4:	strd	r4, [sp, #-12]!
   191e8:	str	lr, [sp, #8]
   191ec:	sub	sp, sp, #52	; 0x34
   191f0:	ldr	r5, [sp, #64]	; 0x40
   191f4:	add	r4, sp, #8
   191f8:	mov	ip, #0
   191fc:	ldr	lr, [r5], #4
   19200:	str	lr, [r4], #4
   19204:	cmp	lr, #0
   19208:	beq	19218 <__assert_fail@plt+0x7c14>
   1920c:	add	ip, ip, #1
   19210:	cmp	ip, #10
   19214:	bne	191fc <__assert_fail@plt+0x7bf8>
   19218:	str	ip, [sp, #4]
   1921c:	add	ip, sp, #8
   19220:	str	ip, [sp]
   19224:	bl	18d5c <__assert_fail@plt+0x7758>
   19228:	add	sp, sp, #52	; 0x34
   1922c:	ldrd	r4, [sp]
   19230:	add	sp, sp, #8
   19234:	pop	{pc}		; (ldr pc, [sp], #4)
   19238:	push	{r3}		; (str r3, [sp, #-4]!)
   1923c:	push	{lr}		; (str lr, [sp, #-4]!)
   19240:	sub	sp, sp, #16
   19244:	add	r3, sp, #24
   19248:	str	r3, [sp, #12]
   1924c:	str	r3, [sp]
   19250:	ldr	r3, [sp, #20]
   19254:	bl	191e4 <__assert_fail@plt+0x7be0>
   19258:	add	sp, sp, #16
   1925c:	pop	{lr}		; (ldr lr, [sp], #4)
   19260:	add	sp, sp, #4
   19264:	bx	lr
   19268:	str	r4, [sp, #-8]!
   1926c:	str	lr, [sp, #4]
   19270:	movw	r3, #49604	; 0xc1c4
   19274:	movt	r3, #2
   19278:	ldr	r1, [r3]
   1927c:	mov	r0, #10
   19280:	bl	112e0 <fputc_unlocked@plt>
   19284:	mov	r2, #5
   19288:	movw	r1, #48252	; 0xbc7c
   1928c:	movt	r1, #1
   19290:	mov	r0, #0
   19294:	bl	112f8 <dcgettext@plt>
   19298:	movw	r2, #48272	; 0xbc90
   1929c:	movt	r2, #1
   192a0:	mov	r1, r0
   192a4:	mov	r0, #1
   192a8:	bl	114b4 <__printf_chk@plt>
   192ac:	mov	r2, #5
   192b0:	movw	r1, #48296	; 0xbca8
   192b4:	movt	r1, #1
   192b8:	mov	r0, #0
   192bc:	bl	112f8 <dcgettext@plt>
   192c0:	movw	r3, #45740	; 0xb2ac
   192c4:	movt	r3, #1
   192c8:	movw	r2, #45780	; 0xb2d4
   192cc:	movt	r2, #1
   192d0:	mov	r1, r0
   192d4:	mov	r0, #1
   192d8:	bl	114b4 <__printf_chk@plt>
   192dc:	mov	r2, #5
   192e0:	movw	r1, #48316	; 0xbcbc
   192e4:	movt	r1, #1
   192e8:	mov	r0, #0
   192ec:	bl	112f8 <dcgettext@plt>
   192f0:	movw	r2, #48356	; 0xbce4
   192f4:	movt	r2, #1
   192f8:	mov	r1, r0
   192fc:	mov	r0, #1
   19300:	bl	114b4 <__printf_chk@plt>
   19304:	ldr	r4, [sp]
   19308:	add	sp, sp, #4
   1930c:	pop	{pc}		; (ldr pc, [sp], #4)
   19310:	str	r4, [sp, #-8]!
   19314:	str	lr, [sp, #4]
   19318:	bl	198ec <__assert_fail@plt+0x82e8>
   1931c:	cmp	r0, #0
   19320:	beq	19330 <__assert_fail@plt+0x7d2c>
   19324:	ldr	r4, [sp]
   19328:	add	sp, sp, #4
   1932c:	pop	{pc}		; (ldr pc, [sp], #4)
   19330:	bl	197a4 <__assert_fail@plt+0x81a0>
   19334:	str	r4, [sp, #-8]!
   19338:	str	lr, [sp, #4]
   1933c:	bl	198ec <__assert_fail@plt+0x82e8>
   19340:	cmp	r0, #0
   19344:	beq	19354 <__assert_fail@plt+0x7d50>
   19348:	ldr	r4, [sp]
   1934c:	add	sp, sp, #4
   19350:	pop	{pc}		; (ldr pc, [sp], #4)
   19354:	bl	197a4 <__assert_fail@plt+0x81a0>
   19358:	str	r4, [sp, #-8]!
   1935c:	str	lr, [sp, #4]
   19360:	bl	19310 <__assert_fail@plt+0x7d0c>
   19364:	ldr	r4, [sp]
   19368:	add	sp, sp, #4
   1936c:	pop	{pc}		; (ldr pc, [sp], #4)
   19370:	strd	r4, [sp, #-16]!
   19374:	str	r6, [sp, #8]
   19378:	str	lr, [sp, #12]
   1937c:	mov	r5, r0
   19380:	mov	r4, r1
   19384:	bl	19928 <__assert_fail@plt+0x8324>
   19388:	cmp	r0, #0
   1938c:	beq	193a0 <__assert_fail@plt+0x7d9c>
   19390:	ldrd	r4, [sp]
   19394:	ldr	r6, [sp, #8]
   19398:	add	sp, sp, #12
   1939c:	pop	{pc}		; (ldr pc, [sp], #4)
   193a0:	adds	r4, r4, #0
   193a4:	movne	r4, #1
   193a8:	cmp	r5, #0
   193ac:	moveq	r4, #1
   193b0:	cmp	r4, #0
   193b4:	beq	19390 <__assert_fail@plt+0x7d8c>
   193b8:	bl	197a4 <__assert_fail@plt+0x81a0>
   193bc:	str	r4, [sp, #-8]!
   193c0:	str	lr, [sp, #4]
   193c4:	cmp	r1, #0
   193c8:	orreq	r1, r1, #1
   193cc:	bl	19928 <__assert_fail@plt+0x8324>
   193d0:	cmp	r0, #0
   193d4:	beq	193e4 <__assert_fail@plt+0x7de0>
   193d8:	ldr	r4, [sp]
   193dc:	add	sp, sp, #4
   193e0:	pop	{pc}		; (ldr pc, [sp], #4)
   193e4:	bl	197a4 <__assert_fail@plt+0x81a0>
   193e8:	strd	r4, [sp, #-16]!
   193ec:	str	r6, [sp, #8]
   193f0:	str	lr, [sp, #12]
   193f4:	mov	r4, r0
   193f8:	mov	r6, r1
   193fc:	mov	r5, r2
   19400:	bl	1a288 <__assert_fail@plt+0x8c84>
   19404:	cmp	r0, #0
   19408:	beq	1941c <__assert_fail@plt+0x7e18>
   1940c:	ldrd	r4, [sp]
   19410:	ldr	r6, [sp, #8]
   19414:	add	sp, sp, #12
   19418:	pop	{pc}		; (ldr pc, [sp], #4)
   1941c:	cmp	r4, #0
   19420:	beq	19430 <__assert_fail@plt+0x7e2c>
   19424:	cmp	r6, #0
   19428:	cmpne	r5, #0
   1942c:	beq	1940c <__assert_fail@plt+0x7e08>
   19430:	bl	197a4 <__assert_fail@plt+0x81a0>
   19434:	str	r4, [sp, #-8]!
   19438:	str	lr, [sp, #4]
   1943c:	bl	193e8 <__assert_fail@plt+0x7de4>
   19440:	ldr	r4, [sp]
   19444:	add	sp, sp, #4
   19448:	pop	{pc}		; (ldr pc, [sp], #4)
   1944c:	str	r4, [sp, #-8]!
   19450:	str	lr, [sp, #4]
   19454:	mov	ip, r1
   19458:	mov	r3, r2
   1945c:	cmp	r2, #0
   19460:	cmpne	r1, #0
   19464:	moveq	r3, #1
   19468:	moveq	ip, r3
   1946c:	mov	r2, r3
   19470:	mov	r1, ip
   19474:	bl	1a288 <__assert_fail@plt+0x8c84>
   19478:	cmp	r0, #0
   1947c:	beq	1948c <__assert_fail@plt+0x7e88>
   19480:	ldr	r4, [sp]
   19484:	add	sp, sp, #4
   19488:	pop	{pc}		; (ldr pc, [sp], #4)
   1948c:	bl	197a4 <__assert_fail@plt+0x81a0>
   19490:	str	r4, [sp, #-8]!
   19494:	str	lr, [sp, #4]
   19498:	mov	r2, r1
   1949c:	mov	r1, r0
   194a0:	mov	r0, #0
   194a4:	bl	193e8 <__assert_fail@plt+0x7de4>
   194a8:	ldr	r4, [sp]
   194ac:	add	sp, sp, #4
   194b0:	pop	{pc}		; (ldr pc, [sp], #4)
   194b4:	str	r4, [sp, #-8]!
   194b8:	str	lr, [sp, #4]
   194bc:	mov	r2, r1
   194c0:	mov	r1, r0
   194c4:	mov	r0, #0
   194c8:	bl	1944c <__assert_fail@plt+0x7e48>
   194cc:	ldr	r4, [sp]
   194d0:	add	sp, sp, #4
   194d4:	pop	{pc}		; (ldr pc, [sp], #4)
   194d8:	strd	r4, [sp, #-16]!
   194dc:	str	r6, [sp, #8]
   194e0:	str	lr, [sp, #12]
   194e4:	mov	r5, r1
   194e8:	ldr	r4, [r1]
   194ec:	cmp	r0, #0
   194f0:	beq	19520 <__assert_fail@plt+0x7f1c>
   194f4:	lsr	r3, r4, #1
   194f8:	add	r3, r3, #1
   194fc:	adds	r4, r4, r3
   19500:	bcs	1953c <__assert_fail@plt+0x7f38>
   19504:	mov	r1, r4
   19508:	bl	193e8 <__assert_fail@plt+0x7de4>
   1950c:	str	r4, [r5]
   19510:	ldrd	r4, [sp]
   19514:	ldr	r6, [sp, #8]
   19518:	add	sp, sp, #12
   1951c:	pop	{pc}		; (ldr pc, [sp], #4)
   19520:	cmp	r4, #0
   19524:	bne	19504 <__assert_fail@plt+0x7f00>
   19528:	mov	r4, #64	; 0x40
   1952c:	udiv	r4, r4, r2
   19530:	cmp	r2, #64	; 0x40
   19534:	addhi	r4, r4, #1
   19538:	b	19504 <__assert_fail@plt+0x7f00>
   1953c:	bl	197a4 <__assert_fail@plt+0x81a0>
   19540:	str	r4, [sp, #-8]!
   19544:	str	lr, [sp, #4]
   19548:	mov	r2, #1
   1954c:	bl	194d8 <__assert_fail@plt+0x7ed4>
   19550:	ldr	r4, [sp]
   19554:	add	sp, sp, #4
   19558:	pop	{pc}		; (ldr pc, [sp], #4)
   1955c:	strd	r4, [sp, #-24]!	; 0xffffffe8
   19560:	strd	r6, [sp, #8]
   19564:	str	r8, [sp, #16]
   19568:	str	lr, [sp, #20]
   1956c:	mov	r5, r1
   19570:	ldr	lr, [sp, #24]
   19574:	ldr	ip, [r1]
   19578:	asr	r4, ip, #1
   1957c:	adds	r4, ip, r4
   19580:	movvs	r1, #1
   19584:	movvc	r1, #0
   19588:	cmp	r1, #0
   1958c:	mvnne	r4, #-2147483648	; 0x80000000
   19590:	mvn	r8, r3
   19594:	lsr	r8, r8, #31
   19598:	cmp	r3, r4
   1959c:	movge	r1, #0
   195a0:	andlt	r1, r8, #1
   195a4:	cmp	r1, #0
   195a8:	movne	r4, r3
   195ac:	smull	r6, r7, r4, lr
   195b0:	asr	r1, r6, #31
   195b4:	cmp	r1, r7
   195b8:	bne	195d0 <__assert_fail@plt+0x7fcc>
   195bc:	mov	r1, r6
   195c0:	cmp	r6, #63	; 0x3f
   195c4:	movle	r1, #64	; 0x40
   195c8:	ble	195d4 <__assert_fail@plt+0x7fd0>
   195cc:	b	195e0 <__assert_fail@plt+0x7fdc>
   195d0:	mvn	r1, #-2147483648	; 0x80000000
   195d4:	sdiv	r4, r1, lr
   195d8:	mls	r6, lr, r4, r1
   195dc:	sub	r1, r1, r6
   195e0:	cmp	r0, #0
   195e4:	moveq	r6, #0
   195e8:	streq	r6, [r5]
   195ec:	sub	r6, r4, ip
   195f0:	cmp	r6, r2
   195f4:	bge	1962c <__assert_fail@plt+0x8028>
   195f8:	adds	r2, ip, r2
   195fc:	mov	r4, r2
   19600:	bvs	19648 <__assert_fail@plt+0x8044>
   19604:	cmp	r2, r3
   19608:	movle	r3, #0
   1960c:	andgt	r3, r8, #1
   19610:	cmp	r3, #0
   19614:	bne	19648 <__assert_fail@plt+0x8044>
   19618:	smull	r2, r3, r2, lr
   1961c:	asr	ip, r2, #31
   19620:	mov	r1, r2
   19624:	cmp	ip, r3
   19628:	bne	19648 <__assert_fail@plt+0x8044>
   1962c:	bl	19370 <__assert_fail@plt+0x7d6c>
   19630:	str	r4, [r5]
   19634:	ldrd	r4, [sp]
   19638:	ldrd	r6, [sp, #8]
   1963c:	ldr	r8, [sp, #16]
   19640:	add	sp, sp, #20
   19644:	pop	{pc}		; (ldr pc, [sp], #4)
   19648:	bl	197a4 <__assert_fail@plt+0x81a0>
   1964c:	str	r4, [sp, #-8]!
   19650:	str	lr, [sp, #4]
   19654:	bl	19878 <__assert_fail@plt+0x8274>
   19658:	cmp	r0, #0
   1965c:	beq	1966c <__assert_fail@plt+0x8068>
   19660:	ldr	r4, [sp]
   19664:	add	sp, sp, #4
   19668:	pop	{pc}		; (ldr pc, [sp], #4)
   1966c:	bl	197a4 <__assert_fail@plt+0x81a0>
   19670:	str	r4, [sp, #-8]!
   19674:	str	lr, [sp, #4]
   19678:	mov	r1, #1
   1967c:	bl	1964c <__assert_fail@plt+0x8048>
   19680:	ldr	r4, [sp]
   19684:	add	sp, sp, #4
   19688:	pop	{pc}		; (ldr pc, [sp], #4)
   1968c:	str	r4, [sp, #-8]!
   19690:	str	lr, [sp, #4]
   19694:	bl	19878 <__assert_fail@plt+0x8274>
   19698:	cmp	r0, #0
   1969c:	beq	196ac <__assert_fail@plt+0x80a8>
   196a0:	ldr	r4, [sp]
   196a4:	add	sp, sp, #4
   196a8:	pop	{pc}		; (ldr pc, [sp], #4)
   196ac:	bl	197a4 <__assert_fail@plt+0x81a0>
   196b0:	str	r4, [sp, #-8]!
   196b4:	str	lr, [sp, #4]
   196b8:	mov	r1, #1
   196bc:	bl	1968c <__assert_fail@plt+0x8088>
   196c0:	ldr	r4, [sp]
   196c4:	add	sp, sp, #4
   196c8:	pop	{pc}		; (ldr pc, [sp], #4)
   196cc:	strd	r4, [sp, #-16]!
   196d0:	str	r6, [sp, #8]
   196d4:	str	lr, [sp, #12]
   196d8:	mov	r5, r0
   196dc:	mov	r4, r1
   196e0:	mov	r0, r1
   196e4:	bl	19310 <__assert_fail@plt+0x7d0c>
   196e8:	mov	r2, r4
   196ec:	mov	r1, r5
   196f0:	bl	112b0 <memcpy@plt>
   196f4:	ldrd	r4, [sp]
   196f8:	ldr	r6, [sp, #8]
   196fc:	add	sp, sp, #12
   19700:	pop	{pc}		; (ldr pc, [sp], #4)
   19704:	strd	r4, [sp, #-16]!
   19708:	str	r6, [sp, #8]
   1970c:	str	lr, [sp, #12]
   19710:	mov	r5, r0
   19714:	mov	r4, r1
   19718:	mov	r0, r1
   1971c:	bl	19334 <__assert_fail@plt+0x7d30>
   19720:	mov	r2, r4
   19724:	mov	r1, r5
   19728:	bl	112b0 <memcpy@plt>
   1972c:	ldrd	r4, [sp]
   19730:	ldr	r6, [sp, #8]
   19734:	add	sp, sp, #12
   19738:	pop	{pc}		; (ldr pc, [sp], #4)
   1973c:	strd	r4, [sp, #-16]!
   19740:	str	r6, [sp, #8]
   19744:	str	lr, [sp, #12]
   19748:	mov	r5, r0
   1974c:	mov	r4, r1
   19750:	add	r0, r1, #1
   19754:	bl	19334 <__assert_fail@plt+0x7d30>
   19758:	mov	r2, #0
   1975c:	strb	r2, [r0, r4]
   19760:	mov	r2, r4
   19764:	mov	r1, r5
   19768:	bl	112b0 <memcpy@plt>
   1976c:	ldrd	r4, [sp]
   19770:	ldr	r6, [sp, #8]
   19774:	add	sp, sp, #12
   19778:	pop	{pc}		; (ldr pc, [sp], #4)
   1977c:	str	r4, [sp, #-8]!
   19780:	str	lr, [sp, #4]
   19784:	mov	r4, r0
   19788:	bl	11460 <strlen@plt>
   1978c:	add	r1, r0, #1
   19790:	mov	r0, r4
   19794:	bl	196cc <__assert_fail@plt+0x80c8>
   19798:	ldr	r4, [sp]
   1979c:	add	sp, sp, #4
   197a0:	pop	{pc}		; (ldr pc, [sp], #4)
   197a4:	str	r4, [sp, #-8]!
   197a8:	str	lr, [sp, #4]
   197ac:	movw	r3, #49512	; 0xc168
   197b0:	movt	r3, #2
   197b4:	ldr	r4, [r3]
   197b8:	mov	r2, #5
   197bc:	movw	r1, #48436	; 0xbd34
   197c0:	movt	r1, #1
   197c4:	mov	r0, #0
   197c8:	bl	112f8 <dcgettext@plt>
   197cc:	mov	r3, r0
   197d0:	movw	r2, #47208	; 0xb868
   197d4:	movt	r2, #1
   197d8:	mov	r1, #0
   197dc:	mov	r0, r4
   197e0:	bl	113ac <error@plt>
   197e4:	bl	115c8 <abort@plt>
   197e8:	str	r4, [sp, #-8]!
   197ec:	str	lr, [sp, #4]
   197f0:	orr	r1, r1, #512	; 0x200
   197f4:	bl	1416c <__assert_fail@plt+0x2b68>
   197f8:	cmp	r0, #0
   197fc:	beq	1980c <__assert_fail@plt+0x8208>
   19800:	ldr	r4, [sp]
   19804:	add	sp, sp, #4
   19808:	pop	{pc}		; (ldr pc, [sp], #4)
   1980c:	bl	11484 <__errno_location@plt>
   19810:	ldr	r3, [r0]
   19814:	cmp	r3, #22
   19818:	beq	19820 <__assert_fail@plt+0x821c>
   1981c:	bl	197a4 <__assert_fail@plt+0x81a0>
   19820:	movw	r3, #48456	; 0xbd48
   19824:	movt	r3, #1
   19828:	mov	r2, #41	; 0x29
   1982c:	movw	r1, #48468	; 0xbd54
   19830:	movt	r1, #1
   19834:	movw	r0, #48480	; 0xbd60
   19838:	movt	r0, #1
   1983c:	bl	11604 <__assert_fail@plt>
   19840:	ldr	r3, [r0, #48]	; 0x30
   19844:	and	r3, r3, #17
   19848:	cmp	r3, #16
   1984c:	beq	19870 <__assert_fail@plt+0x826c>
   19850:	cmp	r3, #17
   19854:	beq	19860 <__assert_fail@plt+0x825c>
   19858:	mov	r0, #0
   1985c:	bx	lr
   19860:	ldr	r0, [r1, #48]	; 0x30
   19864:	adds	r0, r0, #0
   19868:	movne	r0, #1
   1986c:	bx	lr
   19870:	mov	r0, #1
   19874:	bx	lr
   19878:	strd	r4, [sp, #-16]!
   1987c:	str	r6, [sp, #8]
   19880:	str	lr, [sp, #12]
   19884:	cmp	r1, #0
   19888:	cmpne	r0, #0
   1988c:	beq	198c8 <__assert_fail@plt+0x82c4>
   19890:	mov	r2, r0
   19894:	mov	r3, r1
   19898:	umull	r4, r5, r0, r1
   1989c:	adds	r1, r5, #0
   198a0:	movne	r1, #1
   198a4:	cmp	r4, #0
   198a8:	movlt	r1, #1
   198ac:	cmp	r1, #0
   198b0:	beq	198d0 <__assert_fail@plt+0x82cc>
   198b4:	bl	11484 <__errno_location@plt>
   198b8:	mov	r3, #12
   198bc:	str	r3, [r0]
   198c0:	mov	r0, #0
   198c4:	b	198dc <__assert_fail@plt+0x82d8>
   198c8:	mov	r3, #1
   198cc:	mov	r2, r3
   198d0:	mov	r1, r3
   198d4:	mov	r0, r2
   198d8:	bl	11238 <calloc@plt>
   198dc:	ldrd	r4, [sp]
   198e0:	ldr	r6, [sp, #8]
   198e4:	add	sp, sp, #12
   198e8:	pop	{pc}		; (ldr pc, [sp], #4)
   198ec:	str	r4, [sp, #-8]!
   198f0:	str	lr, [sp, #4]
   198f4:	cmp	r0, #0
   198f8:	beq	19914 <__assert_fail@plt+0x8310>
   198fc:	bge	19918 <__assert_fail@plt+0x8314>
   19900:	bl	11484 <__errno_location@plt>
   19904:	mov	r3, #12
   19908:	str	r3, [r0]
   1990c:	mov	r0, #0
   19910:	b	1991c <__assert_fail@plt+0x8318>
   19914:	mov	r0, #1
   19918:	bl	113dc <malloc@plt>
   1991c:	ldr	r4, [sp]
   19920:	add	sp, sp, #4
   19924:	pop	{pc}		; (ldr pc, [sp], #4)
   19928:	str	r4, [sp, #-8]!
   1992c:	str	lr, [sp, #4]
   19930:	cmp	r0, #0
   19934:	beq	19958 <__assert_fail@plt+0x8354>
   19938:	cmp	r1, #0
   1993c:	beq	19964 <__assert_fail@plt+0x8360>
   19940:	cmp	r1, #0
   19944:	blt	19970 <__assert_fail@plt+0x836c>
   19948:	bl	11310 <realloc@plt>
   1994c:	ldr	r4, [sp]
   19950:	add	sp, sp, #4
   19954:	pop	{pc}		; (ldr pc, [sp], #4)
   19958:	mov	r0, r1
   1995c:	bl	198ec <__assert_fail@plt+0x82e8>
   19960:	b	1994c <__assert_fail@plt+0x8348>
   19964:	bl	1a034 <__assert_fail@plt+0x8a30>
   19968:	mov	r0, #0
   1996c:	b	1994c <__assert_fail@plt+0x8348>
   19970:	bl	11484 <__errno_location@plt>
   19974:	mov	r3, #12
   19978:	str	r3, [r0]
   1997c:	mov	r0, #0
   19980:	b	1994c <__assert_fail@plt+0x8348>
   19984:	strd	r4, [sp, #-20]!	; 0xffffffec
   19988:	strd	r6, [sp, #8]
   1998c:	str	lr, [sp, #16]
   19990:	sub	sp, sp, #44	; 0x2c
   19994:	mov	r4, r0
   19998:	ldrb	r3, [r2]
   1999c:	cmp	r3, #0
   199a0:	strbeq	r3, [r0]
   199a4:	beq	19a24 <__assert_fail@plt+0x8420>
   199a8:	mov	r6, r1
   199ac:	mov	r5, r2
   199b0:	movw	r3, #49984	; 0xc340
   199b4:	movt	r3, #2
   199b8:	ldr	r3, [r3]
   199bc:	cmp	r3, #0
   199c0:	beq	19a38 <__assert_fail@plt+0x8434>
   199c4:	movw	r3, #49984	; 0xc340
   199c8:	movt	r3, #2
   199cc:	ldr	r3, [r3]
   199d0:	cmp	r3, #0
   199d4:	blt	19ab8 <__assert_fail@plt+0x84b4>
   199d8:	mov	r0, r5
   199dc:	bl	11460 <strlen@plt>
   199e0:	add	r0, r0, #27
   199e4:	cmp	r0, #4032	; 0xfc0
   199e8:	bls	199f8 <__assert_fail@plt+0x83f4>
   199ec:	bl	198ec <__assert_fail@plt+0x82e8>
   199f0:	subs	r4, r0, #0
   199f4:	beq	19ac0 <__assert_fail@plt+0x84bc>
   199f8:	str	r6, [sp]
   199fc:	movw	r3, #48536	; 0xbd98
   19a00:	movt	r3, #1
   19a04:	mvn	r2, #0
   19a08:	mov	r1, #1
   19a0c:	mov	r0, r4
   19a10:	bl	11490 <__sprintf_chk@plt>
   19a14:	mov	r1, r5
   19a18:	add	r0, r4, r0
   19a1c:	bl	11388 <strcpy@plt>
   19a20:	mov	r0, r4
   19a24:	add	sp, sp, #44	; 0x2c
   19a28:	ldrd	r4, [sp]
   19a2c:	ldrd	r6, [sp, #8]
   19a30:	add	sp, sp, #16
   19a34:	pop	{pc}		; (ldr pc, [sp], #4)
   19a38:	mov	r1, #18688	; 0x4900
   19a3c:	movt	r1, #8
   19a40:	movw	r0, #48496	; 0xbd70
   19a44:	movt	r0, #1
   19a48:	bl	113c4 <open64@plt>
   19a4c:	subs	r7, r0, #0
   19a50:	bge	19a6c <__assert_fail@plt+0x8468>
   19a54:	movw	r3, #49984	; 0xc340
   19a58:	movt	r3, #2
   19a5c:	mvn	r2, #0
   19a60:	str	r2, [r3]
   19a64:	mov	r0, #0
   19a68:	b	19a24 <__assert_fail@plt+0x8420>
   19a6c:	str	r7, [sp]
   19a70:	movw	r3, #48512	; 0xbd80
   19a74:	movt	r3, #1
   19a78:	mov	r2, #32
   19a7c:	mov	r1, #1
   19a80:	add	r0, sp, #8
   19a84:	bl	11490 <__sprintf_chk@plt>
   19a88:	mov	r1, #0
   19a8c:	add	r0, sp, #8
   19a90:	bl	114f0 <access@plt>
   19a94:	cmp	r0, #0
   19a98:	mvnne	r2, #0
   19a9c:	moveq	r2, #1
   19aa0:	movw	r3, #49984	; 0xc340
   19aa4:	movt	r3, #2
   19aa8:	str	r2, [r3]
   19aac:	mov	r0, r7
   19ab0:	bl	115d4 <close@plt>
   19ab4:	b	199c4 <__assert_fail@plt+0x83c0>
   19ab8:	mov	r0, #0
   19abc:	b	19a24 <__assert_fail@plt+0x8420>
   19ac0:	mov	r0, r4
   19ac4:	b	19a24 <__assert_fail@plt+0x8420>
   19ac8:	strd	r4, [sp, #-16]!
   19acc:	str	r6, [sp, #8]
   19ad0:	str	lr, [sp, #12]
   19ad4:	mov	r5, r0
   19ad8:	bl	11394 <__fpending@plt>
   19adc:	mov	r6, r0
   19ae0:	ldr	r4, [r5]
   19ae4:	and	r4, r4, #32
   19ae8:	mov	r0, r5
   19aec:	bl	19c60 <__assert_fail@plt+0x865c>
   19af0:	cmp	r4, #0
   19af4:	bne	19b28 <__assert_fail@plt+0x8524>
   19af8:	cmp	r0, #0
   19afc:	beq	19b18 <__assert_fail@plt+0x8514>
   19b00:	cmp	r6, #0
   19b04:	bne	19b44 <__assert_fail@plt+0x8540>
   19b08:	bl	11484 <__errno_location@plt>
   19b0c:	ldr	r0, [r0]
   19b10:	subs	r0, r0, #9
   19b14:	mvnne	r0, #0
   19b18:	ldrd	r4, [sp]
   19b1c:	ldr	r6, [sp, #8]
   19b20:	add	sp, sp, #12
   19b24:	pop	{pc}		; (ldr pc, [sp], #4)
   19b28:	cmp	r0, #0
   19b2c:	bne	19b4c <__assert_fail@plt+0x8548>
   19b30:	bl	11484 <__errno_location@plt>
   19b34:	mov	r3, #0
   19b38:	str	r3, [r0]
   19b3c:	mvn	r0, #0
   19b40:	b	19b18 <__assert_fail@plt+0x8514>
   19b44:	mvn	r0, #0
   19b48:	b	19b18 <__assert_fail@plt+0x8514>
   19b4c:	mvn	r0, #0
   19b50:	b	19b18 <__assert_fail@plt+0x8514>
   19b54:	mov	r2, #0
   19b58:	mov	r3, #0
   19b5c:	strd	r2, [r0, #16]
   19b60:	movw	r3, #62998	; 0xf616
   19b64:	movt	r3, #149	; 0x95
   19b68:	str	r3, [r0, #24]
   19b6c:	bx	lr
   19b70:	strd	r4, [sp, #-32]!	; 0xffffffe0
   19b74:	strd	r6, [sp, #8]
   19b78:	strd	r8, [sp, #16]
   19b7c:	str	sl, [sp, #24]
   19b80:	str	lr, [sp, #28]
   19b84:	movw	r3, #62998	; 0xf616
   19b88:	movt	r3, #149	; 0x95
   19b8c:	ldr	r2, [r0, #24]
   19b90:	cmp	r2, r3
   19b94:	bne	19bf0 <__assert_fail@plt+0x85ec>
   19b98:	ldrd	r6, [r0, #16]
   19b9c:	orrs	r3, r6, r7
   19ba0:	beq	19c3c <__assert_fail@plt+0x8638>
   19ba4:	ldrd	r4, [r1, #96]	; 0x60
   19ba8:	ldrd	r2, [r0]
   19bac:	cmp	r5, r3
   19bb0:	cmpeq	r4, r2
   19bb4:	beq	19c10 <__assert_fail@plt+0x860c>
   19bb8:	adds	r8, r6, #1
   19bbc:	adc	r9, r7, #0
   19bc0:	strd	r8, [r0, #16]
   19bc4:	and	r2, r6, r8
   19bc8:	and	r3, r7, r9
   19bcc:	orrs	r3, r2, r3
   19bd0:	movne	r0, #0
   19bd4:	beq	19c2c <__assert_fail@plt+0x8628>
   19bd8:	ldrd	r4, [sp]
   19bdc:	ldrd	r6, [sp, #8]
   19be0:	ldrd	r8, [sp, #16]
   19be4:	ldr	sl, [sp, #24]
   19be8:	add	sp, sp, #28
   19bec:	pop	{pc}		; (ldr pc, [sp], #4)
   19bf0:	movw	r3, #48556	; 0xbdac
   19bf4:	movt	r3, #1
   19bf8:	mov	r2, #60	; 0x3c
   19bfc:	movw	r1, #48568	; 0xbdb8
   19c00:	movt	r1, #1
   19c04:	movw	r0, #48588	; 0xbdcc
   19c08:	movt	r0, #1
   19c0c:	bl	11604 <__assert_fail@plt>
   19c10:	ldrd	r4, [r1]
   19c14:	ldrd	r2, [r0, #8]
   19c18:	cmp	r5, r3
   19c1c:	cmpeq	r4, r2
   19c20:	moveq	r0, #1
   19c24:	bne	19bb8 <__assert_fail@plt+0x85b4>
   19c28:	b	19bd8 <__assert_fail@plt+0x85d4>
   19c2c:	orrs	r3, r8, r9
   19c30:	moveq	r0, #1
   19c34:	beq	19bd8 <__assert_fail@plt+0x85d4>
   19c38:	b	19c48 <__assert_fail@plt+0x8644>
   19c3c:	mov	r2, #1
   19c40:	mov	r3, #0
   19c44:	strd	r2, [r0, #16]
   19c48:	ldrd	r2, [r1]
   19c4c:	strd	r2, [r0, #8]
   19c50:	ldrd	r2, [r1, #96]	; 0x60
   19c54:	strd	r2, [r0]
   19c58:	mov	r0, #0
   19c5c:	b	19bd8 <__assert_fail@plt+0x85d4>
   19c60:	strd	r4, [sp, #-16]!
   19c64:	str	r6, [sp, #8]
   19c68:	str	lr, [sp, #12]
   19c6c:	sub	sp, sp, #8
   19c70:	mov	r4, r0
   19c74:	bl	114c0 <fileno@plt>
   19c78:	cmp	r0, #0
   19c7c:	blt	19cf4 <__assert_fail@plt+0x86f0>
   19c80:	mov	r0, r4
   19c84:	bl	113f4 <__freading@plt>
   19c88:	cmp	r0, #0
   19c8c:	beq	19cc0 <__assert_fail@plt+0x86bc>
   19c90:	mov	r0, r4
   19c94:	bl	114c0 <fileno@plt>
   19c98:	mov	r3, #1
   19c9c:	str	r3, [sp]
   19ca0:	mov	r2, #0
   19ca4:	mov	r3, #0
   19ca8:	bl	11370 <lseek64@plt>
   19cac:	mvn	r2, #0
   19cb0:	mvn	r3, #0
   19cb4:	cmp	r1, r3
   19cb8:	cmpeq	r0, r2
   19cbc:	beq	19d00 <__assert_fail@plt+0x86fc>
   19cc0:	mov	r0, r4
   19cc4:	bl	19fc4 <__assert_fail@plt+0x89c0>
   19cc8:	cmp	r0, #0
   19ccc:	beq	19d00 <__assert_fail@plt+0x86fc>
   19cd0:	bl	11484 <__errno_location@plt>
   19cd4:	mov	r5, r0
   19cd8:	ldr	r6, [r0]
   19cdc:	mov	r0, r4
   19ce0:	bl	114fc <fclose@plt>
   19ce4:	cmp	r6, #0
   19ce8:	strne	r6, [r5]
   19cec:	mvnne	r0, #0
   19cf0:	b	19d08 <__assert_fail@plt+0x8704>
   19cf4:	mov	r0, r4
   19cf8:	bl	114fc <fclose@plt>
   19cfc:	b	19d08 <__assert_fail@plt+0x8704>
   19d00:	mov	r0, r4
   19d04:	bl	114fc <fclose@plt>
   19d08:	add	sp, sp, #8
   19d0c:	ldrd	r4, [sp]
   19d10:	ldr	r6, [sp, #8]
   19d14:	add	sp, sp, #12
   19d18:	pop	{pc}		; (ldr pc, [sp], #4)
   19d1c:	push	{r1, r2, r3}
   19d20:	strd	r4, [sp, #-16]!
   19d24:	str	r6, [sp, #8]
   19d28:	str	lr, [sp, #12]
   19d2c:	sub	sp, sp, #12
   19d30:	mov	r5, r0
   19d34:	ldr	r1, [sp, #28]
   19d38:	add	r3, sp, #32
   19d3c:	str	r3, [sp, #4]
   19d40:	cmp	r1, #0
   19d44:	beq	19d8c <__assert_fail@plt+0x8788>
   19d48:	movw	r3, #1030	; 0x406
   19d4c:	cmp	r1, r3
   19d50:	beq	19dc8 <__assert_fail@plt+0x87c4>
   19d54:	cmp	r1, #11
   19d58:	beq	19f78 <__assert_fail@plt+0x8974>
   19d5c:	bgt	19f04 <__assert_fail@plt+0x8900>
   19d60:	cmp	r1, #3
   19d64:	beq	19f78 <__assert_fail@plt+0x8974>
   19d68:	ble	19ec4 <__assert_fail@plt+0x88c0>
   19d6c:	cmp	r1, #8
   19d70:	beq	19ee4 <__assert_fail@plt+0x88e0>
   19d74:	ble	19edc <__assert_fail@plt+0x88d8>
   19d78:	cmp	r1, #9
   19d7c:	beq	19f78 <__assert_fail@plt+0x8974>
   19d80:	cmp	r1, #10
   19d84:	bne	19f3c <__assert_fail@plt+0x8938>
   19d88:	b	19ee4 <__assert_fail@plt+0x88e0>
   19d8c:	ldr	r3, [sp, #4]
   19d90:	add	r2, r3, #4
   19d94:	str	r2, [sp, #4]
   19d98:	ldr	r2, [r3]
   19d9c:	mov	r1, #0
   19da0:	bl	11514 <fcntl64@plt>
   19da4:	mov	r4, r0
   19da8:	mov	r0, r4
   19dac:	add	sp, sp, #12
   19db0:	ldrd	r4, [sp]
   19db4:	ldr	r6, [sp, #8]
   19db8:	ldr	lr, [sp, #12]
   19dbc:	add	sp, sp, #16
   19dc0:	add	sp, sp, #12
   19dc4:	bx	lr
   19dc8:	ldr	r3, [sp, #4]
   19dcc:	add	r2, r3, #4
   19dd0:	str	r2, [sp, #4]
   19dd4:	ldr	r6, [r3]
   19dd8:	movw	r3, #49988	; 0xc344
   19ddc:	movt	r3, #2
   19de0:	ldr	r3, [r3]
   19de4:	cmp	r3, #0
   19de8:	blt	19e50 <__assert_fail@plt+0x884c>
   19dec:	mov	r2, r6
   19df0:	movw	r1, #1030	; 0x406
   19df4:	bl	11514 <fcntl64@plt>
   19df8:	subs	r4, r0, #0
   19dfc:	blt	19e14 <__assert_fail@plt+0x8810>
   19e00:	movw	r3, #49988	; 0xc344
   19e04:	movt	r3, #2
   19e08:	mov	r2, #1
   19e0c:	str	r2, [r3]
   19e10:	b	19da8 <__assert_fail@plt+0x87a4>
   19e14:	bl	11484 <__errno_location@plt>
   19e18:	ldr	r3, [r0]
   19e1c:	cmp	r3, #22
   19e20:	bne	19e00 <__assert_fail@plt+0x87fc>
   19e24:	mov	r2, r6
   19e28:	mov	r1, #0
   19e2c:	mov	r0, r5
   19e30:	bl	11514 <fcntl64@plt>
   19e34:	subs	r4, r0, #0
   19e38:	blt	19da8 <__assert_fail@plt+0x87a4>
   19e3c:	movw	r3, #49988	; 0xc344
   19e40:	movt	r3, #2
   19e44:	mvn	r2, #0
   19e48:	str	r2, [r3]
   19e4c:	b	19e78 <__assert_fail@plt+0x8874>
   19e50:	mov	r2, r6
   19e54:	mov	r1, #0
   19e58:	bl	11514 <fcntl64@plt>
   19e5c:	subs	r4, r0, #0
   19e60:	blt	19da8 <__assert_fail@plt+0x87a4>
   19e64:	movw	r3, #49988	; 0xc344
   19e68:	movt	r3, #2
   19e6c:	ldr	r3, [r3]
   19e70:	cmn	r3, #1
   19e74:	bne	19da8 <__assert_fail@plt+0x87a4>
   19e78:	mov	r1, #1
   19e7c:	mov	r0, r4
   19e80:	bl	11514 <fcntl64@plt>
   19e84:	subs	r2, r0, #0
   19e88:	blt	19ea4 <__assert_fail@plt+0x88a0>
   19e8c:	orr	r2, r2, #1
   19e90:	mov	r1, #2
   19e94:	mov	r0, r4
   19e98:	bl	11514 <fcntl64@plt>
   19e9c:	cmn	r0, #1
   19ea0:	bne	19da8 <__assert_fail@plt+0x87a4>
   19ea4:	bl	11484 <__errno_location@plt>
   19ea8:	mov	r5, r0
   19eac:	ldr	r6, [r0]
   19eb0:	mov	r0, r4
   19eb4:	bl	115d4 <close@plt>
   19eb8:	str	r6, [r5]
   19ebc:	mvn	r4, #0
   19ec0:	b	19da8 <__assert_fail@plt+0x87a4>
   19ec4:	cmp	r1, #1
   19ec8:	beq	19f78 <__assert_fail@plt+0x8974>
   19ecc:	bgt	19ee4 <__assert_fail@plt+0x88e0>
   19ed0:	cmp	r1, #0
   19ed4:	bne	19f3c <__assert_fail@plt+0x8938>
   19ed8:	b	19ee4 <__assert_fail@plt+0x88e0>
   19edc:	cmp	r1, #4
   19ee0:	bne	19f3c <__assert_fail@plt+0x8938>
   19ee4:	ldr	r3, [sp, #4]
   19ee8:	add	r2, r3, #4
   19eec:	str	r2, [sp, #4]
   19ef0:	ldr	r2, [r3]
   19ef4:	mov	r0, r5
   19ef8:	bl	11514 <fcntl64@plt>
   19efc:	mov	r4, r0
   19f00:	b	19da8 <__assert_fail@plt+0x87a4>
   19f04:	movw	r3, #1031	; 0x407
   19f08:	cmp	r1, r3
   19f0c:	bgt	19f5c <__assert_fail@plt+0x8958>
   19f10:	movw	r3, #1030	; 0x406
   19f14:	cmp	r1, r3
   19f18:	bge	19ee4 <__assert_fail@plt+0x88e0>
   19f1c:	movw	r3, #1025	; 0x401
   19f20:	cmp	r1, r3
   19f24:	beq	19f78 <__assert_fail@plt+0x8974>
   19f28:	movw	r3, #1026	; 0x402
   19f2c:	cmp	r1, r3
   19f30:	beq	19ee4 <__assert_fail@plt+0x88e0>
   19f34:	cmp	r1, #1024	; 0x400
   19f38:	beq	19ee4 <__assert_fail@plt+0x88e0>
   19f3c:	ldr	r3, [sp, #4]
   19f40:	add	r2, r3, #4
   19f44:	str	r2, [sp, #4]
   19f48:	ldr	r2, [r3]
   19f4c:	mov	r0, r5
   19f50:	bl	11514 <fcntl64@plt>
   19f54:	mov	r4, r0
   19f58:	b	19da8 <__assert_fail@plt+0x87a4>
   19f5c:	movw	r3, #1033	; 0x409
   19f60:	cmp	r1, r3
   19f64:	beq	19ee4 <__assert_fail@plt+0x88e0>
   19f68:	blt	19f78 <__assert_fail@plt+0x8974>
   19f6c:	movw	r3, #1034	; 0x40a
   19f70:	cmp	r1, r3
   19f74:	bne	19f3c <__assert_fail@plt+0x8938>
   19f78:	mov	r0, r5
   19f7c:	bl	11514 <fcntl64@plt>
   19f80:	mov	r4, r0
   19f84:	b	19da8 <__assert_fail@plt+0x87a4>
   19f88:	push	{r1, r2, r3}
   19f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   19f90:	sub	sp, sp, #8
   19f94:	ldr	r1, [sp, #12]
   19f98:	tst	r1, #64	; 0x40
   19f9c:	addne	r3, sp, #20
   19fa0:	strne	r3, [sp, #4]
   19fa4:	ldrne	r2, [sp, #16]
   19fa8:	moveq	r2, #0
   19fac:	bl	113c4 <open64@plt>
   19fb0:	bl	18d00 <__assert_fail@plt+0x76fc>
   19fb4:	add	sp, sp, #8
   19fb8:	pop	{lr}		; (ldr lr, [sp], #4)
   19fbc:	add	sp, sp, #12
   19fc0:	bx	lr
   19fc4:	str	r4, [sp, #-8]!
   19fc8:	str	lr, [sp, #4]
   19fcc:	sub	sp, sp, #8
   19fd0:	subs	r4, r0, #0
   19fd4:	beq	19fe8 <__assert_fail@plt+0x89e4>
   19fd8:	mov	r0, r4
   19fdc:	bl	113f4 <__freading@plt>
   19fe0:	cmp	r0, #0
   19fe4:	bne	1a000 <__assert_fail@plt+0x89fc>
   19fe8:	mov	r0, r4
   19fec:	bl	11274 <fflush@plt>
   19ff0:	add	sp, sp, #8
   19ff4:	ldr	r4, [sp]
   19ff8:	add	sp, sp, #4
   19ffc:	pop	{pc}		; (ldr pc, [sp], #4)
   1a000:	ldr	r3, [r4]
   1a004:	tst	r3, #256	; 0x100
   1a008:	bne	1a018 <__assert_fail@plt+0x8a14>
   1a00c:	mov	r0, r4
   1a010:	bl	11274 <fflush@plt>
   1a014:	b	19ff0 <__assert_fail@plt+0x89ec>
   1a018:	mov	r3, #1
   1a01c:	str	r3, [sp]
   1a020:	mov	r2, #0
   1a024:	mov	r3, #0
   1a028:	mov	r0, r4
   1a02c:	bl	1a094 <__assert_fail@plt+0x8a90>
   1a030:	b	1a00c <__assert_fail@plt+0x8a08>
   1a034:	strd	r4, [sp, #-12]!
   1a038:	str	lr, [sp, #8]
   1a03c:	sub	sp, sp, #12
   1a040:	mov	r5, r0
   1a044:	bl	11484 <__errno_location@plt>
   1a048:	mov	r4, r0
   1a04c:	ldr	r3, [r0]
   1a050:	str	r3, [sp]
   1a054:	str	r3, [sp, #4]
   1a058:	mov	r3, #0
   1a05c:	str	r3, [r0]
   1a060:	mov	r0, r5
   1a064:	bl	11298 <free@plt>
   1a068:	ldr	r3, [r4]
   1a06c:	clz	r3, r3
   1a070:	lsr	r3, r3, #5
   1a074:	add	r2, sp, #8
   1a078:	add	r3, r2, r3, lsl #2
   1a07c:	ldr	r3, [r3, #-8]
   1a080:	str	r3, [r4]
   1a084:	add	sp, sp, #12
   1a088:	ldrd	r4, [sp]
   1a08c:	add	sp, sp, #8
   1a090:	pop	{pc}		; (ldr pc, [sp], #4)
   1a094:	str	r4, [sp, #-16]!
   1a098:	strd	r6, [sp, #4]
   1a09c:	str	lr, [sp, #12]
   1a0a0:	sub	sp, sp, #8
   1a0a4:	mov	r4, r0
   1a0a8:	mov	r6, r2
   1a0ac:	mov	r7, r3
   1a0b0:	ldr	r2, [r0, #8]
   1a0b4:	ldr	r3, [r0, #4]
   1a0b8:	cmp	r2, r3
   1a0bc:	beq	1a0ec <__assert_fail@plt+0x8ae8>
   1a0c0:	ldr	r3, [sp, #24]
   1a0c4:	str	r3, [sp]
   1a0c8:	mov	r2, r6
   1a0cc:	mov	r3, r7
   1a0d0:	mov	r0, r4
   1a0d4:	bl	11508 <fseeko64@plt>
   1a0d8:	add	sp, sp, #8
   1a0dc:	ldr	r4, [sp]
   1a0e0:	ldrd	r6, [sp, #4]
   1a0e4:	add	sp, sp, #12
   1a0e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a0ec:	ldr	r2, [r0, #20]
   1a0f0:	ldr	r3, [r0, #16]
   1a0f4:	cmp	r2, r3
   1a0f8:	bne	1a0c0 <__assert_fail@plt+0x8abc>
   1a0fc:	ldr	r3, [r0, #36]	; 0x24
   1a100:	cmp	r3, #0
   1a104:	bne	1a0c0 <__assert_fail@plt+0x8abc>
   1a108:	bl	114c0 <fileno@plt>
   1a10c:	ldr	r3, [sp, #24]
   1a110:	str	r3, [sp]
   1a114:	mov	r2, r6
   1a118:	mov	r3, r7
   1a11c:	bl	11370 <lseek64@plt>
   1a120:	mvn	r2, #0
   1a124:	mvn	r3, #0
   1a128:	cmp	r1, r3
   1a12c:	cmpeq	r0, r2
   1a130:	beq	1a14c <__assert_fail@plt+0x8b48>
   1a134:	ldr	r3, [r4]
   1a138:	bic	r3, r3, #16
   1a13c:	str	r3, [r4]
   1a140:	strd	r0, [r4, #80]	; 0x50
   1a144:	mov	r0, #0
   1a148:	b	1a0d8 <__assert_fail@plt+0x8ad4>
   1a14c:	mvn	r0, #0
   1a150:	b	1a0d8 <__assert_fail@plt+0x8ad4>
   1a154:	str	r4, [sp, #-8]!
   1a158:	str	lr, [sp, #4]
   1a15c:	mov	r0, #14
   1a160:	bl	11538 <nl_langinfo@plt>
   1a164:	cmp	r0, #0
   1a168:	beq	1a18c <__assert_fail@plt+0x8b88>
   1a16c:	ldrb	r2, [r0]
   1a170:	movw	r3, #48612	; 0xbde4
   1a174:	movt	r3, #1
   1a178:	cmp	r2, #0
   1a17c:	moveq	r0, r3
   1a180:	ldr	r4, [sp]
   1a184:	add	sp, sp, #4
   1a188:	pop	{pc}		; (ldr pc, [sp], #4)
   1a18c:	movw	r0, #48612	; 0xbde4
   1a190:	movt	r0, #1
   1a194:	b	1a180 <__assert_fail@plt+0x8b7c>
   1a198:	strd	r4, [sp, #-20]!	; 0xffffffec
   1a19c:	strd	r6, [sp, #8]
   1a1a0:	str	lr, [sp, #16]
   1a1a4:	sub	sp, sp, #12
   1a1a8:	mov	r7, r1
   1a1ac:	mov	r5, r2
   1a1b0:	subs	r6, r0, #0
   1a1b4:	addeq	r6, sp, #4
   1a1b8:	mov	r0, r6
   1a1bc:	bl	113a0 <mbrtowc@plt>
   1a1c0:	mov	r4, r0
   1a1c4:	cmp	r5, #0
   1a1c8:	cmnne	r0, #3
   1a1cc:	bhi	1a1e8 <__assert_fail@plt+0x8be4>
   1a1d0:	mov	r0, r4
   1a1d4:	add	sp, sp, #12
   1a1d8:	ldrd	r4, [sp]
   1a1dc:	ldrd	r6, [sp, #8]
   1a1e0:	add	sp, sp, #16
   1a1e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a1e8:	mov	r0, #0
   1a1ec:	bl	1a6f4 <__assert_fail@plt+0x90f0>
   1a1f0:	cmp	r0, #0
   1a1f4:	bne	1a1d0 <__assert_fail@plt+0x8bcc>
   1a1f8:	ldrb	r3, [r7]
   1a1fc:	str	r3, [r6]
   1a200:	mov	r4, #1
   1a204:	b	1a1d0 <__assert_fail@plt+0x8bcc>
   1a208:	str	r4, [sp, #-8]!
   1a20c:	str	lr, [sp, #4]
   1a210:	mov	r5, r0
   1a214:	movw	r3, #49512	; 0xc168
   1a218:	movt	r3, #2
   1a21c:	ldr	r4, [r3]
   1a220:	mov	r2, #5
   1a224:	movw	r1, #48620	; 0xbdec
   1a228:	movt	r1, #1
   1a22c:	mov	r0, #0
   1a230:	bl	112f8 <dcgettext@plt>
   1a234:	mov	r2, r0
   1a238:	mov	r1, r5
   1a23c:	mov	r0, r4
   1a240:	bl	113ac <error@plt>
   1a244:	bl	115c8 <abort@plt>
   1a248:	str	r4, [sp, #-8]!
   1a24c:	str	lr, [sp, #4]
   1a250:	mov	r5, r0
   1a254:	movw	r3, #49512	; 0xc168
   1a258:	movt	r3, #2
   1a25c:	ldr	r4, [r3]
   1a260:	mov	r2, #5
   1a264:	movw	r1, #48664	; 0xbe18
   1a268:	movt	r1, #1
   1a26c:	mov	r0, #0
   1a270:	bl	112f8 <dcgettext@plt>
   1a274:	mov	r2, r0
   1a278:	mov	r1, r5
   1a27c:	mov	r0, r4
   1a280:	bl	113ac <error@plt>
   1a284:	bl	115c8 <abort@plt>
   1a288:	str	r4, [sp, #-8]!
   1a28c:	str	lr, [sp, #4]
   1a290:	umull	r2, r3, r1, r2
   1a294:	cmp	r3, #0
   1a298:	bne	1a2b0 <__assert_fail@plt+0x8cac>
   1a29c:	mov	r1, r2
   1a2a0:	bl	19928 <__assert_fail@plt+0x8324>
   1a2a4:	ldr	r4, [sp]
   1a2a8:	add	sp, sp, #4
   1a2ac:	pop	{pc}		; (ldr pc, [sp], #4)
   1a2b0:	bl	11484 <__errno_location@plt>
   1a2b4:	mov	r3, #12
   1a2b8:	str	r3, [r0]
   1a2bc:	mov	r0, #0
   1a2c0:	b	1a2a4 <__assert_fail@plt+0x8ca0>
   1a2c4:	str	r4, [sp, #-8]!
   1a2c8:	str	lr, [sp, #4]
   1a2cc:	mov	r4, r0
   1a2d0:	mov	r3, #0
   1a2d4:	str	r3, [r0, #4]
   1a2d8:	mov	r1, #524288	; 0x80000
   1a2dc:	movw	r0, #47216	; 0xb870
   1a2e0:	movt	r0, #1
   1a2e4:	bl	19f88 <__assert_fail@plt+0x8984>
   1a2e8:	str	r0, [r4]
   1a2ec:	cmp	r0, #0
   1a2f0:	movge	r0, #0
   1a2f4:	blt	1a304 <__assert_fail@plt+0x8d00>
   1a2f8:	ldr	r4, [sp]
   1a2fc:	add	sp, sp, #4
   1a300:	pop	{pc}		; (ldr pc, [sp], #4)
   1a304:	mov	r1, #0
   1a308:	mov	r0, r1
   1a30c:	bl	11430 <getcwd@plt>
   1a310:	str	r0, [r4, #4]
   1a314:	clz	r0, r0
   1a318:	lsr	r0, r0, #5
   1a31c:	rsb	r0, r0, #0
   1a320:	b	1a2f8 <__assert_fail@plt+0x8cf4>
   1a324:	str	r4, [sp, #-8]!
   1a328:	str	lr, [sp, #4]
   1a32c:	ldr	r3, [r0]
   1a330:	cmp	r3, #0
   1a334:	blt	1a34c <__assert_fail@plt+0x8d48>
   1a338:	mov	r0, r3
   1a33c:	bl	11568 <fchdir@plt>
   1a340:	ldr	r4, [sp]
   1a344:	add	sp, sp, #4
   1a348:	pop	{pc}		; (ldr pc, [sp], #4)
   1a34c:	ldr	r0, [r0, #4]
   1a350:	bl	1a444 <__assert_fail@plt+0x8e40>
   1a354:	b	1a340 <__assert_fail@plt+0x8d3c>
   1a358:	str	r4, [sp, #-8]!
   1a35c:	str	lr, [sp, #4]
   1a360:	mov	r4, r0
   1a364:	ldr	r0, [r0]
   1a368:	cmp	r0, #0
   1a36c:	bge	1a384 <__assert_fail@plt+0x8d80>
   1a370:	ldr	r0, [r4, #4]
   1a374:	bl	1a034 <__assert_fail@plt+0x8a30>
   1a378:	ldr	r4, [sp]
   1a37c:	add	sp, sp, #4
   1a380:	pop	{pc}		; (ldr pc, [sp], #4)
   1a384:	bl	115d4 <close@plt>
   1a388:	b	1a370 <__assert_fail@plt+0x8d6c>
   1a38c:	str	r4, [sp, #-8]!
   1a390:	str	lr, [sp, #4]
   1a394:	mov	r2, #3
   1a398:	mov	r1, #0
   1a39c:	bl	19d1c <__assert_fail@plt+0x8718>
   1a3a0:	ldr	r4, [sp]
   1a3a4:	add	sp, sp, #4
   1a3a8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3ac:	ldr	r0, [r0]
   1a3b0:	cmp	r0, #0
   1a3b4:	bxlt	lr
   1a3b8:	str	r4, [sp, #-8]!
   1a3bc:	str	lr, [sp, #4]
   1a3c0:	bl	115d4 <close@plt>
   1a3c4:	cmp	r0, #0
   1a3c8:	bne	1a3d8 <__assert_fail@plt+0x8dd4>
   1a3cc:	ldr	r4, [sp]
   1a3d0:	add	sp, sp, #4
   1a3d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3d8:	movw	r3, #48712	; 0xbe48
   1a3dc:	movt	r3, #1
   1a3e0:	mov	r2, #64	; 0x40
   1a3e4:	movw	r1, #48736	; 0xbe60
   1a3e8:	movt	r1, #1
   1a3ec:	movw	r0, #48756	; 0xbe74
   1a3f0:	movt	r0, #1
   1a3f4:	bl	11604 <__assert_fail@plt>
   1a3f8:	strd	r4, [sp, #-16]!
   1a3fc:	str	r6, [sp, #8]
   1a400:	str	lr, [sp, #12]
   1a404:	mov	r4, r0
   1a408:	mov	r2, #18688	; 0x4900
   1a40c:	ldr	r0, [r0]
   1a410:	bl	1146c <openat64@plt>
   1a414:	subs	r5, r0, #0
   1a418:	blt	1a43c <__assert_fail@plt+0x8e38>
   1a41c:	mov	r0, r4
   1a420:	bl	1a3ac <__assert_fail@plt+0x8da8>
   1a424:	str	r5, [r4]
   1a428:	mov	r0, #0
   1a42c:	ldrd	r4, [sp]
   1a430:	ldr	r6, [sp, #8]
   1a434:	add	sp, sp, #12
   1a438:	pop	{pc}		; (ldr pc, [sp], #4)
   1a43c:	mvn	r0, #0
   1a440:	b	1a42c <__assert_fail@plt+0x8e28>
   1a444:	strd	r4, [sp, #-32]!	; 0xffffffe0
   1a448:	strd	r6, [sp, #8]
   1a44c:	strd	r8, [sp, #16]
   1a450:	str	sl, [sp, #24]
   1a454:	str	lr, [sp, #28]
   1a458:	sub	sp, sp, #8
   1a45c:	mov	r6, r0
   1a460:	bl	11334 <chdir@plt>
   1a464:	subs	r4, r0, #0
   1a468:	beq	1a480 <__assert_fail@plt+0x8e7c>
   1a46c:	bl	11484 <__errno_location@plt>
   1a470:	mov	sl, r0
   1a474:	ldr	r3, [r0]
   1a478:	cmp	r3, #36	; 0x24
   1a47c:	beq	1a4a0 <__assert_fail@plt+0x8e9c>
   1a480:	mov	r0, r4
   1a484:	add	sp, sp, #8
   1a488:	ldrd	r4, [sp]
   1a48c:	ldrd	r6, [sp, #8]
   1a490:	ldrd	r8, [sp, #16]
   1a494:	ldr	sl, [sp, #24]
   1a498:	add	sp, sp, #28
   1a49c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a4a0:	mov	r0, r6
   1a4a4:	bl	11460 <strlen@plt>
   1a4a8:	mvn	r3, #99	; 0x63
   1a4ac:	str	r3, [sp, #4]
   1a4b0:	subs	r7, r0, #0
   1a4b4:	beq	1a5c4 <__assert_fail@plt+0x8fc0>
   1a4b8:	cmp	r7, #4096	; 0x1000
   1a4bc:	bcc	1a5e0 <__assert_fail@plt+0x8fdc>
   1a4c0:	movw	r1, #48552	; 0xbda8
   1a4c4:	movt	r1, #1
   1a4c8:	mov	r0, r6
   1a4cc:	bl	115f8 <strspn@plt>
   1a4d0:	mov	r5, r0
   1a4d4:	cmp	r0, #2
   1a4d8:	beq	1a5fc <__assert_fail@plt+0x8ff8>
   1a4dc:	cmp	r0, #0
   1a4e0:	moveq	r5, r6
   1a4e4:	bne	1a660 <__assert_fail@plt+0x905c>
   1a4e8:	ldrb	r3, [r5]
   1a4ec:	cmp	r3, #47	; 0x2f
   1a4f0:	beq	1a680 <__assert_fail@plt+0x907c>
   1a4f4:	add	r6, r6, r7
   1a4f8:	cmp	r5, r6
   1a4fc:	bhi	1a69c <__assert_fail@plt+0x9098>
   1a500:	sub	r3, r6, r5
   1a504:	cmp	r3, #4096	; 0x1000
   1a508:	blt	1a580 <__assert_fail@plt+0x8f7c>
   1a50c:	mov	r9, #4096	; 0x1000
   1a510:	mov	r7, #47	; 0x2f
   1a514:	movw	r8, #48552	; 0xbda8
   1a518:	movt	r8, #1
   1a51c:	mov	r2, r9
   1a520:	mov	r1, r7
   1a524:	mov	r0, r5
   1a528:	bl	11478 <memrchr@plt>
   1a52c:	subs	r4, r0, #0
   1a530:	beq	1a6b8 <__assert_fail@plt+0x90b4>
   1a534:	mov	r3, #0
   1a538:	strb	r3, [r4]
   1a53c:	sub	r3, r4, r5
   1a540:	cmp	r3, #4096	; 0x1000
   1a544:	bge	1a6c8 <__assert_fail@plt+0x90c4>
   1a548:	mov	r1, r5
   1a54c:	add	r0, sp, #4
   1a550:	bl	1a3f8 <__assert_fail@plt+0x8df4>
   1a554:	strb	r7, [r4]
   1a558:	cmp	r0, #0
   1a55c:	bne	1a5ac <__assert_fail@plt+0x8fa8>
   1a560:	add	r4, r4, #1
   1a564:	mov	r1, r8
   1a568:	mov	r0, r4
   1a56c:	bl	115f8 <strspn@plt>
   1a570:	add	r5, r4, r0
   1a574:	sub	r3, r6, r5
   1a578:	cmp	r3, #4096	; 0x1000
   1a57c:	bge	1a51c <__assert_fail@plt+0x8f18>
   1a580:	cmp	r6, r5
   1a584:	bls	1a59c <__assert_fail@plt+0x8f98>
   1a588:	mov	r1, r5
   1a58c:	add	r0, sp, #4
   1a590:	bl	1a3f8 <__assert_fail@plt+0x8df4>
   1a594:	cmp	r0, #0
   1a598:	bne	1a5ac <__assert_fail@plt+0x8fa8>
   1a59c:	ldr	r0, [sp, #4]
   1a5a0:	bl	11568 <fchdir@plt>
   1a5a4:	subs	r4, r0, #0
   1a5a8:	beq	1a6e4 <__assert_fail@plt+0x90e0>
   1a5ac:	ldr	r4, [sl]
   1a5b0:	add	r0, sp, #4
   1a5b4:	bl	1a3ac <__assert_fail@plt+0x8da8>
   1a5b8:	str	r4, [sl]
   1a5bc:	mvn	r4, #0
   1a5c0:	b	1a480 <__assert_fail@plt+0x8e7c>
   1a5c4:	ldr	r3, [pc, #292]	; 1a6f0 <__assert_fail@plt+0x90ec>
   1a5c8:	mov	r2, #126	; 0x7e
   1a5cc:	movw	r1, #48736	; 0xbe60
   1a5d0:	movt	r1, #1
   1a5d4:	movw	r0, #48772	; 0xbe84
   1a5d8:	movt	r0, #1
   1a5dc:	bl	11604 <__assert_fail@plt>
   1a5e0:	ldr	r3, [pc, #264]	; 1a6f0 <__assert_fail@plt+0x90ec>
   1a5e4:	mov	r2, #127	; 0x7f
   1a5e8:	movw	r1, #48736	; 0xbe60
   1a5ec:	movt	r1, #1
   1a5f0:	movw	r0, #48780	; 0xbe8c
   1a5f4:	movt	r0, #1
   1a5f8:	bl	11604 <__assert_fail@plt>
   1a5fc:	sub	r2, r7, #3
   1a600:	mov	r1, #47	; 0x2f
   1a604:	add	r0, r6, #3
   1a608:	bl	114d8 <memchr@plt>
   1a60c:	subs	r4, r0, #0
   1a610:	moveq	r3, #36	; 0x24
   1a614:	streq	r3, [sl]
   1a618:	mvneq	r4, #0
   1a61c:	beq	1a480 <__assert_fail@plt+0x8e7c>
   1a620:	mov	r3, #0
   1a624:	strb	r3, [r4]
   1a628:	mov	r1, r6
   1a62c:	add	r0, sp, #4
   1a630:	bl	1a3f8 <__assert_fail@plt+0x8df4>
   1a634:	mov	r3, #47	; 0x2f
   1a638:	strb	r3, [r4]
   1a63c:	cmp	r0, #0
   1a640:	bne	1a5ac <__assert_fail@plt+0x8fa8>
   1a644:	add	r4, r4, #1
   1a648:	movw	r1, #48552	; 0xbda8
   1a64c:	movt	r1, #1
   1a650:	mov	r0, r4
   1a654:	bl	115f8 <strspn@plt>
   1a658:	add	r5, r4, r0
   1a65c:	b	1a4e8 <__assert_fail@plt+0x8ee4>
   1a660:	movw	r1, #48552	; 0xbda8
   1a664:	movt	r1, #1
   1a668:	add	r0, sp, #4
   1a66c:	bl	1a3f8 <__assert_fail@plt+0x8df4>
   1a670:	cmp	r0, #0
   1a674:	addeq	r5, r6, r5
   1a678:	beq	1a4e8 <__assert_fail@plt+0x8ee4>
   1a67c:	b	1a5ac <__assert_fail@plt+0x8fa8>
   1a680:	ldr	r3, [pc, #104]	; 1a6f0 <__assert_fail@plt+0x90ec>
   1a684:	mov	r2, #162	; 0xa2
   1a688:	movw	r1, #48736	; 0xbe60
   1a68c:	movt	r1, #1
   1a690:	movw	r0, #48792	; 0xbe98
   1a694:	movt	r0, #1
   1a698:	bl	11604 <__assert_fail@plt>
   1a69c:	ldr	r3, [pc, #76]	; 1a6f0 <__assert_fail@plt+0x90ec>
   1a6a0:	mov	r2, #163	; 0xa3
   1a6a4:	movw	r1, #48736	; 0xbe60
   1a6a8:	movt	r1, #1
   1a6ac:	movw	r0, #48804	; 0xbea4
   1a6b0:	movt	r0, #1
   1a6b4:	bl	11604 <__assert_fail@plt>
   1a6b8:	mov	r3, #36	; 0x24
   1a6bc:	str	r3, [sl]
   1a6c0:	mvn	r4, #0
   1a6c4:	b	1a480 <__assert_fail@plt+0x8e7c>
   1a6c8:	ldr	r3, [pc, #32]	; 1a6f0 <__assert_fail@plt+0x90ec>
   1a6cc:	mov	r2, #179	; 0xb3
   1a6d0:	movw	r1, #48736	; 0xbe60
   1a6d4:	movt	r1, #1
   1a6d8:	movw	r0, #48820	; 0xbeb4
   1a6dc:	movt	r0, #1
   1a6e0:	bl	11604 <__assert_fail@plt>
   1a6e4:	add	r0, sp, #4
   1a6e8:	bl	1a3ac <__assert_fail@plt+0x8da8>
   1a6ec:	b	1a480 <__assert_fail@plt+0x8e7c>
   1a6f0:	andeq	fp, r1, r4, asr lr
   1a6f4:	push	{lr}		; (str lr, [sp, #-4]!)
   1a6f8:	sub	sp, sp, #268	; 0x10c
   1a6fc:	movw	r2, #257	; 0x101
   1a700:	add	r1, sp, #4
   1a704:	bl	1a750 <__assert_fail@plt+0x914c>
   1a708:	cmp	r0, #0
   1a70c:	movne	r0, #0
   1a710:	bne	1a748 <__assert_fail@plt+0x9144>
   1a714:	movw	r1, #48840	; 0xbec8
   1a718:	movt	r1, #1
   1a71c:	add	r0, sp, #4
   1a720:	bl	11268 <strcmp@plt>
   1a724:	cmp	r0, #0
   1a728:	beq	1a744 <__assert_fail@plt+0x9140>
   1a72c:	movw	r1, #48844	; 0xbecc
   1a730:	movt	r1, #1
   1a734:	add	r0, sp, #4
   1a738:	bl	11268 <strcmp@plt>
   1a73c:	adds	r0, r0, #0
   1a740:	movne	r0, #1
   1a744:	and	r0, r0, #1
   1a748:	add	sp, sp, #268	; 0x10c
   1a74c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a750:	strd	r4, [sp, #-16]!
   1a754:	str	r6, [sp, #8]
   1a758:	str	lr, [sp, #12]
   1a75c:	mov	r6, r1
   1a760:	mov	r4, r2
   1a764:	mov	r1, #0
   1a768:	bl	11520 <setlocale@plt>
   1a76c:	subs	r5, r0, #0
   1a770:	beq	1a7b4 <__assert_fail@plt+0x91b0>
   1a774:	mov	r0, r5
   1a778:	bl	11460 <strlen@plt>
   1a77c:	cmp	r4, r0
   1a780:	bhi	1a7d0 <__assert_fail@plt+0x91cc>
   1a784:	cmp	r4, #0
   1a788:	moveq	r0, #34	; 0x22
   1a78c:	beq	1a7e4 <__assert_fail@plt+0x91e0>
   1a790:	sub	r4, r4, #1
   1a794:	mov	r2, r4
   1a798:	mov	r1, r5
   1a79c:	mov	r0, r6
   1a7a0:	bl	112b0 <memcpy@plt>
   1a7a4:	mov	r3, #0
   1a7a8:	strb	r3, [r6, r4]
   1a7ac:	mov	r0, #34	; 0x22
   1a7b0:	b	1a7e4 <__assert_fail@plt+0x91e0>
   1a7b4:	cmp	r4, #0
   1a7b8:	moveq	r0, #22
   1a7bc:	beq	1a7e4 <__assert_fail@plt+0x91e0>
   1a7c0:	mov	r3, #0
   1a7c4:	strb	r3, [r6]
   1a7c8:	mov	r0, #22
   1a7cc:	b	1a7e4 <__assert_fail@plt+0x91e0>
   1a7d0:	add	r2, r0, #1
   1a7d4:	mov	r1, r5
   1a7d8:	mov	r0, r6
   1a7dc:	bl	112b0 <memcpy@plt>
   1a7e0:	mov	r0, #0
   1a7e4:	ldrd	r4, [sp]
   1a7e8:	ldr	r6, [sp, #8]
   1a7ec:	add	sp, sp, #12
   1a7f0:	pop	{pc}		; (ldr pc, [sp], #4)
   1a7f4:	str	r4, [sp, #-8]!
   1a7f8:	str	lr, [sp, #4]
   1a7fc:	mov	r1, #0
   1a800:	bl	11520 <setlocale@plt>
   1a804:	ldr	r4, [sp]
   1a808:	add	sp, sp, #4
   1a80c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a810:	cmp	r3, #0
   1a814:	cmpeq	r2, #0
   1a818:	bne	1a830 <__assert_fail@plt+0x922c>
   1a81c:	cmp	r1, #0
   1a820:	cmpeq	r0, #0
   1a824:	mvnne	r1, #0
   1a828:	mvnne	r0, #0
   1a82c:	b	1a84c <__assert_fail@plt+0x9248>
   1a830:	sub	sp, sp, #8
   1a834:	push	{sp, lr}
   1a838:	bl	1a85c <__assert_fail@plt+0x9258>
   1a83c:	ldr	lr, [sp, #4]
   1a840:	add	sp, sp, #8
   1a844:	pop	{r2, r3}
   1a848:	bx	lr
   1a84c:	push	{r1, lr}
   1a850:	mov	r0, #8
   1a854:	bl	11250 <raise@plt>
   1a858:	pop	{r1, pc}
   1a85c:	cmp	r1, r3
   1a860:	cmpeq	r0, r2
   1a864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a868:	mov	r4, r0
   1a86c:	movcc	r0, #0
   1a870:	mov	r5, r1
   1a874:	ldr	lr, [sp, #36]	; 0x24
   1a878:	movcc	r1, r0
   1a87c:	bcc	1a978 <__assert_fail@plt+0x9374>
   1a880:	cmp	r3, #0
   1a884:	clzeq	ip, r2
   1a888:	clzne	ip, r3
   1a88c:	addeq	ip, ip, #32
   1a890:	cmp	r5, #0
   1a894:	clzeq	r1, r4
   1a898:	addeq	r1, r1, #32
   1a89c:	clzne	r1, r5
   1a8a0:	sub	ip, ip, r1
   1a8a4:	sub	sl, ip, #32
   1a8a8:	lsl	r9, r3, ip
   1a8ac:	rsb	fp, ip, #32
   1a8b0:	orr	r9, r9, r2, lsl sl
   1a8b4:	orr	r9, r9, r2, lsr fp
   1a8b8:	lsl	r8, r2, ip
   1a8bc:	cmp	r5, r9
   1a8c0:	cmpeq	r4, r8
   1a8c4:	movcc	r0, #0
   1a8c8:	movcc	r1, r0
   1a8cc:	bcc	1a8e8 <__assert_fail@plt+0x92e4>
   1a8d0:	mov	r0, #1
   1a8d4:	subs	r4, r4, r8
   1a8d8:	lsl	r1, r0, sl
   1a8dc:	orr	r1, r1, r0, lsr fp
   1a8e0:	lsl	r0, r0, ip
   1a8e4:	sbc	r5, r5, r9
   1a8e8:	cmp	ip, #0
   1a8ec:	beq	1a978 <__assert_fail@plt+0x9374>
   1a8f0:	lsr	r6, r8, #1
   1a8f4:	orr	r6, r6, r9, lsl #31
   1a8f8:	lsr	r7, r9, #1
   1a8fc:	mov	r2, ip
   1a900:	b	1a924 <__assert_fail@plt+0x9320>
   1a904:	subs	r3, r4, r6
   1a908:	sbc	r8, r5, r7
   1a90c:	adds	r3, r3, r3
   1a910:	adc	r8, r8, r8
   1a914:	adds	r4, r3, #1
   1a918:	adc	r5, r8, #0
   1a91c:	subs	r2, r2, #1
   1a920:	beq	1a940 <__assert_fail@plt+0x933c>
   1a924:	cmp	r5, r7
   1a928:	cmpeq	r4, r6
   1a92c:	bcs	1a904 <__assert_fail@plt+0x9300>
   1a930:	adds	r4, r4, r4
   1a934:	adc	r5, r5, r5
   1a938:	subs	r2, r2, #1
   1a93c:	bne	1a924 <__assert_fail@plt+0x9320>
   1a940:	lsr	r3, r4, ip
   1a944:	orr	r3, r3, r5, lsl fp
   1a948:	lsr	r2, r5, ip
   1a94c:	orr	r3, r3, r5, lsr sl
   1a950:	adds	r0, r0, r4
   1a954:	mov	r4, r3
   1a958:	lsl	r3, r2, ip
   1a95c:	orr	r3, r3, r4, lsl sl
   1a960:	lsl	ip, r4, ip
   1a964:	orr	r3, r3, r4, lsr fp
   1a968:	adc	r1, r1, r5
   1a96c:	subs	r0, r0, ip
   1a970:	mov	r5, r2
   1a974:	sbc	r1, r1, r3
   1a978:	cmp	lr, #0
   1a97c:	strdne	r4, [lr]
   1a980:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a984:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a988:	mov	r7, r0
   1a98c:	ldr	r6, [pc, #72]	; 1a9dc <__assert_fail@plt+0x93d8>
   1a990:	ldr	r5, [pc, #72]	; 1a9e0 <__assert_fail@plt+0x93dc>
   1a994:	add	r6, pc, r6
   1a998:	add	r5, pc, r5
   1a99c:	sub	r6, r6, r5
   1a9a0:	mov	r8, r1
   1a9a4:	mov	r9, r2
   1a9a8:	bl	1120c <fstatfs64@plt-0x20>
   1a9ac:	asrs	r6, r6, #2
   1a9b0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9b4:	mov	r4, #0
   1a9b8:	add	r4, r4, #1
   1a9bc:	ldr	r3, [r5], #4
   1a9c0:	mov	r2, r9
   1a9c4:	mov	r1, r8
   1a9c8:	mov	r0, r7
   1a9cc:	blx	r3
   1a9d0:	cmp	r6, r4
   1a9d4:	bne	1a9b8 <__assert_fail@plt+0x93b4>
   1a9d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a9dc:	andeq	r1, r1, r0, ror r5
   1a9e0:	andeq	r1, r1, r8, ror #10
   1a9e4:	bx	lr
   1a9e8:	ldr	r3, [pc, #12]	; 1a9fc <__assert_fail@plt+0x93f8>
   1a9ec:	mov	r1, #0
   1a9f0:	add	r3, pc, r3
   1a9f4:	ldr	r2, [r3]
   1a9f8:	b	1149c <__cxa_atexit@plt>
   1a9fc:	andeq	r1, r1, r8, ror #14

Disassembly of section .fini:

0001aa00 <.fini>:
   1aa00:	push	{r3, lr}
   1aa04:	pop	{r3, pc}
