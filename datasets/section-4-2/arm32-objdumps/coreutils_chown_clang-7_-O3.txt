
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111c4 <.init>:
   111c4:	push	{r3, lr}
   111c8:	bl	1156c <__assert_fail@plt+0x4c>
   111cc:	pop	{r3, pc}

Disassembly of section .plt:

000111d0 <fstatfs64@plt-0x14>:
   111d0:	push	{lr}		; (str lr, [sp, #-4]!)
   111d4:	ldr	lr, [pc, #4]	; 111e0 <fstatfs64@plt-0x4>
   111d8:	add	lr, pc, lr
   111dc:	ldr	pc, [lr, #8]!
   111e0:	andeq	fp, r1, r0, lsr #28

000111e4 <fstatfs64@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #110592	; 0x1b000
   111ec:	ldr	pc, [ip, #3616]!	; 0xe20

000111f0 <calloc@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #110592	; 0x1b000
   111f8:	ldr	pc, [ip, #3608]!	; 0xe18

000111fc <endgrent@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #110592	; 0x1b000
   11204:	ldr	pc, [ip, #3600]!	; 0xe10

00011208 <fputs_unlocked@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #110592	; 0x1b000
   11210:	ldr	pc, [ip, #3592]!	; 0xe08

00011214 <raise@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #110592	; 0x1b000
   1121c:	ldr	pc, [ip, #3584]!	; 0xe00

00011220 <getpwnam@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #110592	; 0x1b000
   11228:	ldr	pc, [ip, #3576]!	; 0xdf8

0001122c <strcmp@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #110592	; 0x1b000
   11234:	ldr	pc, [ip, #3568]!	; 0xdf0

00011238 <getpwuid@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #110592	; 0x1b000
   11240:	ldr	pc, [ip, #3560]!	; 0xde8

00011244 <fflush@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #110592	; 0x1b000
   1124c:	ldr	pc, [ip, #3552]!	; 0xde0

00011250 <memmove@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #110592	; 0x1b000
   11258:	ldr	pc, [ip, #3544]!	; 0xdd8

0001125c <free@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #110592	; 0x1b000
   11264:	ldr	pc, [ip, #3536]!	; 0xdd0

00011268 <_exit@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #110592	; 0x1b000
   11270:	ldr	pc, [ip, #3528]!	; 0xdc8

00011274 <memcpy@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #110592	; 0x1b000
   1127c:	ldr	pc, [ip, #3520]!	; 0xdc0

00011280 <mbsinit@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #110592	; 0x1b000
   11288:	ldr	pc, [ip, #3512]!	; 0xdb8

0001128c <memcmp@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #110592	; 0x1b000
   11294:	ldr	pc, [ip, #3504]!	; 0xdb0

00011298 <stpcpy@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #110592	; 0x1b000
   112a0:	ldr	pc, [ip, #3496]!	; 0xda8

000112a4 <dcgettext@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #110592	; 0x1b000
   112ac:	ldr	pc, [ip, #3488]!	; 0xda0

000112b0 <realloc@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #110592	; 0x1b000
   112b8:	ldr	pc, [ip, #3480]!	; 0xd98

000112bc <textdomain@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #110592	; 0x1b000
   112c4:	ldr	pc, [ip, #3472]!	; 0xd90

000112c8 <__fxstatat64@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #110592	; 0x1b000
   112d0:	ldr	pc, [ip, #3464]!	; 0xd88

000112d4 <iswprint@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #110592	; 0x1b000
   112dc:	ldr	pc, [ip, #3456]!	; 0xd80

000112e0 <__fxstat64@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #110592	; 0x1b000
   112e8:	ldr	pc, [ip, #3448]!	; 0xd78

000112ec <fwrite@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #110592	; 0x1b000
   112f4:	ldr	pc, [ip, #3440]!	; 0xd70

000112f8 <lseek64@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #110592	; 0x1b000
   11300:	ldr	pc, [ip, #3432]!	; 0xd68

00011304 <__ctype_get_mb_cur_max@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #110592	; 0x1b000
   1130c:	ldr	pc, [ip, #3424]!	; 0xd60

00011310 <__fpending@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #110592	; 0x1b000
   11318:	ldr	pc, [ip, #3416]!	; 0xd58

0001131c <mbrtowc@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #110592	; 0x1b000
   11324:	ldr	pc, [ip, #3408]!	; 0xd50

00011328 <error@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #110592	; 0x1b000
   11330:	ldr	pc, [ip, #3400]!	; 0xd48

00011334 <open64@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #110592	; 0x1b000
   1133c:	ldr	pc, [ip, #3392]!	; 0xd40

00011340 <malloc@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #110592	; 0x1b000
   11348:	ldr	pc, [ip, #3384]!	; 0xd38

0001134c <__libc_start_main@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #110592	; 0x1b000
   11354:	ldr	pc, [ip, #3376]!	; 0xd30

00011358 <__freading@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #110592	; 0x1b000
   11360:	ldr	pc, [ip, #3368]!	; 0xd28

00011364 <__gmon_start__@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #110592	; 0x1b000
   1136c:	ldr	pc, [ip, #3360]!	; 0xd20

00011370 <getopt_long@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #110592	; 0x1b000
   11378:	ldr	pc, [ip, #3352]!	; 0xd18

0001137c <__ctype_b_loc@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #110592	; 0x1b000
   11384:	ldr	pc, [ip, #3344]!	; 0xd10

00011388 <exit@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #110592	; 0x1b000
   11390:	ldr	pc, [ip, #3336]!	; 0xd08

00011394 <strtoul@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #110592	; 0x1b000
   1139c:	ldr	pc, [ip, #3328]!	; 0xd00

000113a0 <strlen@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #110592	; 0x1b000
   113a8:	ldr	pc, [ip, #3320]!	; 0xcf8

000113ac <strchr@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #110592	; 0x1b000
   113b4:	ldr	pc, [ip, #3312]!	; 0xcf0

000113b8 <openat64@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #110592	; 0x1b000
   113c0:	ldr	pc, [ip, #3304]!	; 0xce8

000113c4 <fchown@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #110592	; 0x1b000
   113cc:	ldr	pc, [ip, #3296]!	; 0xce0

000113d0 <__errno_location@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #110592	; 0x1b000
   113d8:	ldr	pc, [ip, #3288]!	; 0xcd8

000113dc <__cxa_atexit@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #110592	; 0x1b000
   113e4:	ldr	pc, [ip, #3280]!	; 0xcd0

000113e8 <memset@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #110592	; 0x1b000
   113f0:	ldr	pc, [ip, #3272]!	; 0xcc8

000113f4 <__printf_chk@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #110592	; 0x1b000
   113fc:	ldr	pc, [ip, #3264]!	; 0xcc0

00011400 <fileno@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #110592	; 0x1b000
   11408:	ldr	pc, [ip, #3256]!	; 0xcb8

0001140c <__fprintf_chk@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #110592	; 0x1b000
   11414:	ldr	pc, [ip, #3248]!	; 0xcb0

00011418 <fclose@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #110592	; 0x1b000
   11420:	ldr	pc, [ip, #3240]!	; 0xca8

00011424 <fseeko64@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #110592	; 0x1b000
   1142c:	ldr	pc, [ip, #3232]!	; 0xca0

00011430 <fcntl64@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #110592	; 0x1b000
   11438:	ldr	pc, [ip, #3224]!	; 0xc98

0001143c <setlocale@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #110592	; 0x1b000
   11444:	ldr	pc, [ip, #3216]!	; 0xc90

00011448 <endpwent@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #110592	; 0x1b000
   11450:	ldr	pc, [ip, #3208]!	; 0xc88

00011454 <strrchr@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #110592	; 0x1b000
   1145c:	ldr	pc, [ip, #3200]!	; 0xc80

00011460 <nl_langinfo@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #110592	; 0x1b000
   11468:	ldr	pc, [ip, #3192]!	; 0xc78

0001146c <readdir64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #110592	; 0x1b000
   11474:	ldr	pc, [ip, #3184]!	; 0xc70

00011478 <fdopendir@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #110592	; 0x1b000
   11480:	ldr	pc, [ip, #3176]!	; 0xc68

00011484 <dirfd@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #110592	; 0x1b000
   1148c:	ldr	pc, [ip, #3168]!	; 0xc60

00011490 <fchdir@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #110592	; 0x1b000
   11498:	ldr	pc, [ip, #3160]!	; 0xc58

0001149c <qsort@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #110592	; 0x1b000
   114a4:	ldr	pc, [ip, #3152]!	; 0xc50

000114a8 <fchownat@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #110592	; 0x1b000
   114b0:	ldr	pc, [ip, #3144]!	; 0xc48

000114b4 <bindtextdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #110592	; 0x1b000
   114bc:	ldr	pc, [ip, #3136]!	; 0xc40

000114c0 <__xstat64@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #110592	; 0x1b000
   114c8:	ldr	pc, [ip, #3128]!	; 0xc38

000114cc <strncmp@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #110592	; 0x1b000
   114d4:	ldr	pc, [ip, #3120]!	; 0xc30

000114d8 <abort@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #110592	; 0x1b000
   114e0:	ldr	pc, [ip, #3112]!	; 0xc28

000114e4 <close@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #110592	; 0x1b000
   114ec:	ldr	pc, [ip, #3104]!	; 0xc20

000114f0 <__lxstat64@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #110592	; 0x1b000
   114f8:	ldr	pc, [ip, #3096]!	; 0xc18

000114fc <closedir@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #110592	; 0x1b000
   11504:	ldr	pc, [ip, #3088]!	; 0xc10

00011508 <getgrgid@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #110592	; 0x1b000
   11510:	ldr	pc, [ip, #3080]!	; 0xc08

00011514 <getgrnam@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #110592	; 0x1b000
   1151c:	ldr	pc, [ip, #3072]!	; 0xc00

00011520 <__assert_fail@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #110592	; 0x1b000
   11528:	ldr	pc, [ip, #3064]!	; 0xbf8

Disassembly of section .text:

00011530 <.text>:
   11530:	mov	fp, #0
   11534:	mov	lr, #0
   11538:	pop	{r1}		; (ldr r1, [sp], #4)
   1153c:	mov	r2, sp
   11540:	push	{r2}		; (str r2, [sp, #-4]!)
   11544:	push	{r0}		; (str r0, [sp, #-4]!)
   11548:	ldr	ip, [pc, #16]	; 11560 <__assert_fail@plt+0x40>
   1154c:	push	{ip}		; (str ip, [sp, #-4]!)
   11550:	ldr	r0, [pc, #12]	; 11564 <__assert_fail@plt+0x44>
   11554:	ldr	r3, [pc, #12]	; 11568 <__assert_fail@plt+0x48>
   11558:	bl	1134c <__libc_start_main@plt>
   1155c:	bl	114d8 <abort@plt>
   11560:	andeq	fp, r1, ip, lsr r0
   11564:	muleq	r1, r0, r9
   11568:	ldrdeq	sl, [r1], -ip
   1156c:	ldr	r3, [pc, #20]	; 11588 <__assert_fail@plt+0x68>
   11570:	ldr	r2, [pc, #20]	; 1158c <__assert_fail@plt+0x6c>
   11574:	add	r3, pc, r3
   11578:	ldr	r2, [r3, r2]
   1157c:	cmp	r2, #0
   11580:	bxeq	lr
   11584:	b	11364 <__gmon_start__@plt>
   11588:	andeq	fp, r1, r4, lsl #21
   1158c:	andeq	r0, r0, r4, lsr #2
   11590:	ldr	r0, [pc, #24]	; 115b0 <__assert_fail@plt+0x90>
   11594:	ldr	r3, [pc, #24]	; 115b4 <__assert_fail@plt+0x94>
   11598:	cmp	r3, r0
   1159c:	bxeq	lr
   115a0:	ldr	r3, [pc, #16]	; 115b8 <__assert_fail@plt+0x98>
   115a4:	cmp	r3, #0
   115a8:	bxeq	lr
   115ac:	bx	r3
   115b0:	andeq	sp, r2, r8, ror r1
   115b4:	andeq	sp, r2, r8, ror r1
   115b8:	andeq	r0, r0, r0
   115bc:	ldr	r0, [pc, #36]	; 115e8 <__assert_fail@plt+0xc8>
   115c0:	ldr	r1, [pc, #36]	; 115ec <__assert_fail@plt+0xcc>
   115c4:	sub	r1, r1, r0
   115c8:	asr	r1, r1, #2
   115cc:	add	r1, r1, r1, lsr #31
   115d0:	asrs	r1, r1, #1
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0xd0>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	sp, r2, r8, ror r1
   115ec:	andeq	sp, r2, r8, ror r1
   115f0:	andeq	r0, r0, r0
   115f4:	push	{r4, lr}
   115f8:	ldr	r4, [pc, #24]	; 11618 <__assert_fail@plt+0xf8>
   115fc:	ldrb	r3, [r4]
   11600:	cmp	r3, #0
   11604:	popne	{r4, pc}
   11608:	bl	11590 <__assert_fail@plt+0x70>
   1160c:	mov	r3, #1
   11610:	strb	r3, [r4]
   11614:	pop	{r4, pc}
   11618:	muleq	r2, r4, r1
   1161c:	b	115bc <__assert_fail@plt+0x9c>
   11620:	push	{fp, lr}
   11624:	mov	fp, sp
   11628:	sub	sp, sp, #64	; 0x40
   1162c:	mov	r4, r0
   11630:	cmp	r0, #0
   11634:	bne	1194c <__assert_fail@plt+0x42c>
   11638:	movw	r1, #45195	; 0xb08b
   1163c:	mov	r0, #0
   11640:	mov	r2, #5
   11644:	movt	r1, #1
   11648:	bl	112a4 <dcgettext@plt>
   1164c:	movw	r5, #53688	; 0xd1b8
   11650:	mov	r1, r0
   11654:	mov	r0, #1
   11658:	movt	r5, #2
   1165c:	ldr	r2, [r5]
   11660:	mov	r3, r2
   11664:	bl	113f4 <__printf_chk@plt>
   11668:	movw	r1, #45292	; 0xb0ec
   1166c:	mov	r0, #0
   11670:	mov	r2, #5
   11674:	movt	r1, #1
   11678:	bl	112a4 <dcgettext@plt>
   1167c:	movw	r7, #53644	; 0xd18c
   11680:	movt	r7, #2
   11684:	ldr	r1, [r7]
   11688:	bl	11208 <fputs_unlocked@plt>
   1168c:	movw	r1, #45437	; 0xb17d
   11690:	mov	r0, #0
   11694:	mov	r2, #5
   11698:	movt	r1, #1
   1169c:	bl	112a4 <dcgettext@plt>
   116a0:	ldr	r1, [r7]
   116a4:	bl	11208 <fputs_unlocked@plt>
   116a8:	movw	r1, #45638	; 0xb246
   116ac:	mov	r0, #0
   116b0:	mov	r2, #5
   116b4:	movt	r1, #1
   116b8:	bl	112a4 <dcgettext@plt>
   116bc:	ldr	r1, [r7]
   116c0:	bl	11208 <fputs_unlocked@plt>
   116c4:	movw	r1, #45869	; 0xb32d
   116c8:	mov	r0, #0
   116cc:	mov	r2, #5
   116d0:	movt	r1, #1
   116d4:	bl	112a4 <dcgettext@plt>
   116d8:	ldr	r1, [r7]
   116dc:	bl	11208 <fputs_unlocked@plt>
   116e0:	movw	r1, #45988	; 0xb3a4
   116e4:	mov	r0, #0
   116e8:	mov	r2, #5
   116ec:	movt	r1, #1
   116f0:	bl	112a4 <dcgettext@plt>
   116f4:	ldr	r1, [r7]
   116f8:	bl	11208 <fputs_unlocked@plt>
   116fc:	movw	r1, #46328	; 0xb4f8
   11700:	mov	r0, #0
   11704:	mov	r2, #5
   11708:	movt	r1, #1
   1170c:	bl	112a4 <dcgettext@plt>
   11710:	ldr	r1, [r7]
   11714:	bl	11208 <fputs_unlocked@plt>
   11718:	movw	r1, #46456	; 0xb578
   1171c:	mov	r0, #0
   11720:	mov	r2, #5
   11724:	movt	r1, #1
   11728:	bl	112a4 <dcgettext@plt>
   1172c:	ldr	r1, [r7]
   11730:	bl	11208 <fputs_unlocked@plt>
   11734:	movw	r1, #46577	; 0xb5f1
   11738:	mov	r0, #0
   1173c:	mov	r2, #5
   11740:	movt	r1, #1
   11744:	bl	112a4 <dcgettext@plt>
   11748:	ldr	r1, [r7]
   1174c:	bl	11208 <fputs_unlocked@plt>
   11750:	movw	r1, #46648	; 0xb638
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	112a4 <dcgettext@plt>
   11764:	ldr	r1, [r7]
   11768:	bl	11208 <fputs_unlocked@plt>
   1176c:	movw	r1, #47113	; 0xb809
   11770:	mov	r0, #0
   11774:	mov	r2, #5
   11778:	movt	r1, #1
   1177c:	bl	112a4 <dcgettext@plt>
   11780:	ldr	r1, [r7]
   11784:	bl	11208 <fputs_unlocked@plt>
   11788:	movw	r1, #47158	; 0xb836
   1178c:	mov	r0, #0
   11790:	mov	r2, #5
   11794:	movt	r1, #1
   11798:	bl	112a4 <dcgettext@plt>
   1179c:	ldr	r1, [r7]
   117a0:	bl	11208 <fputs_unlocked@plt>
   117a4:	movw	r1, #47212	; 0xb86c
   117a8:	mov	r0, #0
   117ac:	mov	r2, #5
   117b0:	movt	r1, #1
   117b4:	bl	112a4 <dcgettext@plt>
   117b8:	ldr	r1, [r7]
   117bc:	bl	11208 <fputs_unlocked@plt>
   117c0:	movw	r1, #47404	; 0xb92c
   117c4:	mov	r0, #0
   117c8:	mov	r2, #5
   117cc:	movt	r1, #1
   117d0:	bl	112a4 <dcgettext@plt>
   117d4:	ldr	r2, [r5]
   117d8:	mov	r1, r0
   117dc:	mov	r0, #1
   117e0:	mov	r3, r2
   117e4:	str	r2, [sp]
   117e8:	bl	113f4 <__printf_chk@plt>
   117ec:	movw	r0, #48432	; 0xbd30
   117f0:	mov	r2, #48	; 0x30
   117f4:	add	r6, sp, #8
   117f8:	movw	r5, #47605	; 0xb9f5
   117fc:	movt	r0, #1
   11800:	movt	r5, #1
   11804:	add	r1, r0, #32
   11808:	add	r3, r0, #16
   1180c:	vld1.64	{d18-d19}, [r0], r2
   11810:	vld1.64	{d16-d17}, [r1]
   11814:	vld1.64	{d20-d21}, [r3]
   11818:	add	r1, r6, #32
   1181c:	vldr	d22, [r0]
   11820:	add	r0, r6, #16
   11824:	vst1.64	{d16-d17}, [r1]
   11828:	movw	r1, #47808	; 0xbac0
   1182c:	vst1.64	{d20-d21}, [r0]
   11830:	mov	r0, r6
   11834:	vst1.64	{d18-d19}, [r0], r2
   11838:	movt	r1, #1
   1183c:	vstr	d22, [r0]
   11840:	mov	r0, r5
   11844:	bl	1122c <strcmp@plt>
   11848:	cmp	r0, #0
   1184c:	ldrne	r1, [r6, #8]!
   11850:	cmpne	r1, #0
   11854:	bne	11840 <__assert_fail@plt+0x320>
   11858:	ldr	r6, [r6, #4]
   1185c:	movw	r1, #47903	; 0xbb1f
   11860:	mov	r0, #0
   11864:	mov	r2, #5
   11868:	movt	r1, #1
   1186c:	bl	112a4 <dcgettext@plt>
   11870:	movw	r2, #47651	; 0xba23
   11874:	movw	r3, #47926	; 0xbb36
   11878:	mov	r1, r0
   1187c:	mov	r0, #1
   11880:	movt	r2, #1
   11884:	movt	r3, #1
   11888:	bl	113f4 <__printf_chk@plt>
   1188c:	cmp	r6, #0
   11890:	mov	r0, #5
   11894:	mov	r1, #0
   11898:	moveq	r6, r5
   1189c:	bl	1143c <setlocale@plt>
   118a0:	cmp	r0, #0
   118a4:	beq	118dc <__assert_fail@plt+0x3bc>
   118a8:	movw	r1, #47966	; 0xbb5e
   118ac:	mov	r2, #3
   118b0:	movt	r1, #1
   118b4:	bl	114cc <strncmp@plt>
   118b8:	cmp	r0, #0
   118bc:	beq	118dc <__assert_fail@plt+0x3bc>
   118c0:	movw	r1, #47970	; 0xbb62
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	112a4 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	11208 <fputs_unlocked@plt>
   118dc:	movw	r1, #48041	; 0xbba9
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	112a4 <dcgettext@plt>
   118f0:	movw	r2, #47926	; 0xbb36
   118f4:	mov	r1, r0
   118f8:	mov	r0, #1
   118fc:	mov	r3, r5
   11900:	movt	r2, #1
   11904:	bl	113f4 <__printf_chk@plt>
   11908:	movw	r1, #48068	; 0xbbc4
   1190c:	mov	r0, #0
   11910:	mov	r2, #5
   11914:	movt	r1, #1
   11918:	bl	112a4 <dcgettext@plt>
   1191c:	movw	r3, #47112	; 0xb808
   11920:	mov	r1, r0
   11924:	movw	r0, #47836	; 0xbadc
   11928:	cmp	r6, r5
   1192c:	mov	r2, r6
   11930:	movt	r0, #1
   11934:	movt	r3, #1
   11938:	moveq	r3, r0
   1193c:	mov	r0, #1
   11940:	bl	113f4 <__printf_chk@plt>
   11944:	mov	r0, r4
   11948:	bl	11388 <exit@plt>
   1194c:	movw	r0, #53640	; 0xd188
   11950:	movw	r1, #45156	; 0xb064
   11954:	mov	r2, #5
   11958:	movt	r0, #2
   1195c:	movt	r1, #1
   11960:	ldr	r5, [r0]
   11964:	mov	r0, #0
   11968:	bl	112a4 <dcgettext@plt>
   1196c:	mov	r2, r0
   11970:	movw	r0, #53688	; 0xd1b8
   11974:	mov	r1, #1
   11978:	movt	r0, #2
   1197c:	ldr	r3, [r0]
   11980:	mov	r0, r5
   11984:	bl	1140c <__fprintf_chk@plt>
   11988:	mov	r0, r4
   1198c:	bl	11388 <exit@plt>
   11990:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11994:	add	fp, sp, #28
   11998:	sub	sp, sp, #164	; 0xa4
   1199c:	mvn	sl, #0
   119a0:	mov	r6, r0
   119a4:	mov	r9, r1
   119a8:	str	sl, [fp, #-32]	; 0xffffffe0
   119ac:	str	sl, [fp, #-36]	; 0xffffffdc
   119b0:	str	sl, [fp, #-40]	; 0xffffffd8
   119b4:	str	sl, [fp, #-44]	; 0xffffffd4
   119b8:	ldr	r0, [r1]
   119bc:	bl	16ce0 <__assert_fail@plt+0x57c0>
   119c0:	movw	r1, #47112	; 0xb808
   119c4:	mov	r0, #6
   119c8:	movt	r1, #1
   119cc:	bl	1143c <setlocale@plt>
   119d0:	movw	r5, #47655	; 0xba27
   119d4:	movw	r1, #47611	; 0xb9fb
   119d8:	movt	r5, #1
   119dc:	movt	r1, #1
   119e0:	mov	r0, r5
   119e4:	bl	114b4 <bindtextdomain@plt>
   119e8:	mov	r0, r5
   119ec:	bl	112bc <textdomain@plt>
   119f0:	movw	r0, #11916	; 0x2e8c
   119f4:	movt	r0, #1
   119f8:	bl	1b040 <__assert_fail@plt+0x9b20>
   119fc:	sub	r0, fp, #68	; 0x44
   11a00:	bl	11f64 <__assert_fail@plt+0xa44>
   11a04:	movw	r7, #47635	; 0xba13
   11a08:	movw	r5, #48208	; 0xbc50
   11a0c:	mov	r8, #0
   11a10:	mov	r0, #16
   11a14:	movt	r7, #1
   11a18:	movt	r5, #1
   11a1c:	b	11a24 <__assert_fail@plt+0x504>
   11a20:	mov	r0, r4
   11a24:	mov	r1, #0
   11a28:	str	r1, [sp, #12]
   11a2c:	b	11a3c <__assert_fail@plt+0x51c>
   11a30:	mov	r0, #1
   11a34:	str	r0, [fp, #-68]	; 0xffffffbc
   11a38:	mov	r0, r4
   11a3c:	mov	r4, r0
   11a40:	mov	r0, r6
   11a44:	mov	r1, r9
   11a48:	mov	r2, r7
   11a4c:	mov	r3, r5
   11a50:	str	r8, [sp]
   11a54:	bl	11370 <getopt_long@plt>
   11a58:	cmp	r0, #71	; 0x47
   11a5c:	ble	11c14 <__assert_fail@plt+0x6f4>
   11a60:	sub	r1, r0, #72	; 0x48
   11a64:	cmp	r1, #46	; 0x2e
   11a68:	bhi	11b3c <__assert_fail@plt+0x61c>
   11a6c:	add	r2, pc, #4
   11a70:	mov	r0, #17
   11a74:	ldr	pc, [r2, r1, lsl #2]
   11a78:	andeq	r1, r1, ip, lsr sl
   11a7c:	muleq	r1, r8, lr
   11a80:	muleq	r1, r8, lr
   11a84:	muleq	r1, r8, lr
   11a88:	andeq	r1, r1, r4, lsr fp
   11a8c:	muleq	r1, r8, lr
   11a90:	muleq	r1, r8, lr
   11a94:	muleq	r1, r8, lr
   11a98:	andeq	r1, r1, r0, lsr #23
   11a9c:	muleq	r1, r8, lr
   11aa0:	andeq	r1, r1, r0, ror fp
   11aa4:	muleq	r1, r8, lr
   11aa8:	muleq	r1, r8, lr
   11aac:	muleq	r1, r8, lr
   11ab0:	muleq	r1, r8, lr
   11ab4:	muleq	r1, r8, lr
   11ab8:	muleq	r1, r8, lr
   11abc:	muleq	r1, r8, lr
   11ac0:	muleq	r1, r8, lr
   11ac4:	muleq	r1, r8, lr
   11ac8:	muleq	r1, r8, lr
   11acc:	muleq	r1, r8, lr
   11ad0:	muleq	r1, r8, lr
   11ad4:	muleq	r1, r8, lr
   11ad8:	muleq	r1, r8, lr
   11adc:	muleq	r1, r8, lr
   11ae0:	muleq	r1, r8, lr
   11ae4:	andeq	r1, r1, r0, lsr sl
   11ae8:	muleq	r1, r8, lr
   11aec:	muleq	r1, r8, lr
   11af0:	andeq	r1, r1, r8, lsr #23
   11af4:	muleq	r1, r8, lr
   11af8:			; <UNDEFINED> instruction: 0x00011bb8
   11afc:	muleq	r1, r8, lr
   11b00:	muleq	r1, r8, lr
   11b04:	muleq	r1, r8, lr
   11b08:	muleq	r1, r8, lr
   11b0c:	muleq	r1, r8, lr
   11b10:	muleq	r1, r8, lr
   11b14:	muleq	r1, r8, lr
   11b18:	muleq	r1, r8, lr
   11b1c:	muleq	r1, r8, lr
   11b20:	muleq	r1, r8, lr
   11b24:	muleq	r1, r8, lr
   11b28:	muleq	r1, r8, lr
   11b2c:	muleq	r1, r8, lr
   11b30:	andeq	r1, r1, r4, asr #23
   11b34:	mov	r0, #2
   11b38:	b	11a3c <__assert_fail@plt+0x51c>
   11b3c:	sub	r0, r0, #256	; 0x100
   11b40:	cmp	r0, #4
   11b44:	bhi	11e98 <__assert_fail@plt+0x978>
   11b48:	add	r1, pc, #0
   11b4c:	ldr	pc, [r1, r0, lsl #2]
   11b50:	andeq	r1, r1, r4, ror #22
   11b54:	ldrdeq	r1, [r1], -r0
   11b58:	andeq	r1, r1, r0, lsr #20
   11b5c:	andeq	r1, r1, r4, lsl #24
   11b60:	andeq	r1, r1, r0, lsl #23
   11b64:	mov	sl, #1
   11b68:	mov	r0, r4
   11b6c:	b	11a3c <__assert_fail@plt+0x51c>
   11b70:	mov	r0, #1
   11b74:	strb	r0, [fp, #-64]	; 0xffffffc0
   11b78:	mov	r0, r4
   11b7c:	b	11a3c <__assert_fail@plt+0x51c>
   11b80:	movw	r0, #53648	; 0xd190
   11b84:	movw	r1, #53656	; 0xd198
   11b88:	movt	r0, #2
   11b8c:	movt	r1, #2
   11b90:	ldr	r0, [r0]
   11b94:	str	r0, [r1]
   11b98:	mov	r0, r4
   11b9c:	b	11a3c <__assert_fail@plt+0x51c>
   11ba0:	mov	r0, #16
   11ba4:	b	11a3c <__assert_fail@plt+0x51c>
   11ba8:	mov	r0, #1
   11bac:	strb	r0, [fp, #-55]	; 0xffffffc9
   11bb0:	mov	r0, r4
   11bb4:	b	11a3c <__assert_fail@plt+0x51c>
   11bb8:	mov	sl, #0
   11bbc:	mov	r0, r4
   11bc0:	b	11a3c <__assert_fail@plt+0x51c>
   11bc4:	str	r8, [fp, #-68]	; 0xffffffbc
   11bc8:	mov	r0, r4
   11bcc:	b	11a3c <__assert_fail@plt+0x51c>
   11bd0:	movw	r0, #53648	; 0xd190
   11bd4:	sub	r1, fp, #40	; 0x28
   11bd8:	sub	r2, fp, #44	; 0x2c
   11bdc:	mov	r3, #0
   11be0:	str	r8, [sp]
   11be4:	movt	r0, #2
   11be8:	ldr	r0, [r0]
   11bec:	bl	18d10 <__assert_fail@plt+0x77f0>
   11bf0:	mov	r1, r0
   11bf4:	cmp	r0, #0
   11bf8:	mov	r0, r4
   11bfc:	beq	11a3c <__assert_fail@plt+0x51c>
   11c00:	b	11e28 <__assert_fail@plt+0x908>
   11c04:	mov	r0, #1
   11c08:	str	r0, [sp, #12]
   11c0c:	mov	r0, r4
   11c10:	b	11a3c <__assert_fail@plt+0x51c>
   11c14:	cmn	r0, #1
   11c18:	bne	11dbc <__assert_fail@plt+0x89c>
   11c1c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11c20:	mov	r7, #16
   11c24:	cmp	r0, #0
   11c28:	beq	11c64 <__assert_fail@plt+0x744>
   11c2c:	cmp	r4, #16
   11c30:	bne	11c6c <__assert_fail@plt+0x74c>
   11c34:	mov	r0, #0
   11c38:	cmp	sl, #1
   11c3c:	bne	11c74 <__assert_fail@plt+0x754>
   11c40:	movw	r1, #47694	; 0xba4e
   11c44:	mov	r0, #0
   11c48:	mov	r2, #5
   11c4c:	movt	r1, #1
   11c50:	bl	112a4 <dcgettext@plt>
   11c54:	mov	r2, r0
   11c58:	mov	r0, #1
   11c5c:	mov	r1, #0
   11c60:	bl	11328 <error@plt>
   11c64:	mov	r0, sl
   11c68:	b	11c74 <__assert_fail@plt+0x754>
   11c6c:	mov	r0, sl
   11c70:	mov	r7, r4
   11c74:	movw	sl, #53656	; 0xd198
   11c78:	cmp	r0, #0
   11c7c:	movw	r4, #53632	; 0xd180
   11c80:	mov	r2, #2
   11c84:	sub	r8, fp, #68	; 0x44
   11c88:	movt	sl, #2
   11c8c:	movwne	r0, #1
   11c90:	movt	r4, #2
   11c94:	ldr	r1, [sl]
   11c98:	strb	r0, [fp, #-56]	; 0xffffffc8
   11c9c:	ldr	r0, [r4]
   11ca0:	cmp	r1, #0
   11ca4:	sub	r3, r6, r0
   11ca8:	movwne	r2, #1
   11cac:	cmp	r3, r2
   11cb0:	blt	11e58 <__assert_fail@plt+0x938>
   11cb4:	cmp	r1, #0
   11cb8:	beq	11d54 <__assert_fail@plt+0x834>
   11cbc:	add	r2, sp, #16
   11cc0:	mov	r0, #3
   11cc4:	bl	114c0 <__xstat64@plt>
   11cc8:	cmp	r0, #0
   11ccc:	bne	11ea0 <__assert_fail@plt+0x980>
   11cd0:	ldr	r0, [sp, #40]	; 0x28
   11cd4:	ldr	r1, [sp, #44]	; 0x2c
   11cd8:	str	r0, [fp, #-32]	; 0xffffffe0
   11cdc:	str	r1, [fp, #-36]	; 0xffffffdc
   11ce0:	bl	11ff4 <__assert_fail@plt+0xad4>
   11ce4:	str	r0, [fp, #-52]	; 0xffffffcc
   11ce8:	ldr	r0, [sp, #44]	; 0x2c
   11cec:	bl	11fac <__assert_fail@plt+0xa8c>
   11cf0:	str	r0, [fp, #-48]	; 0xffffffd0
   11cf4:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11cf8:	cmp	r0, #0
   11cfc:	beq	11d24 <__assert_fail@plt+0x804>
   11d00:	ldr	r0, [sp, #12]
   11d04:	eor	r0, r0, #1
   11d08:	tst	r0, #1
   11d0c:	bne	11d24 <__assert_fail@plt+0x804>
   11d10:	add	r0, sl, #8
   11d14:	bl	18c74 <__assert_fail@plt+0x7754>
   11d18:	cmp	r0, #0
   11d1c:	str	r0, [fp, #-60]	; 0xffffffc4
   11d20:	beq	11ec8 <__assert_fail@plt+0x9a8>
   11d24:	ldr	r0, [r4]
   11d28:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11d2c:	ldr	r6, [fp, #-44]	; 0xffffffd4
   11d30:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11d34:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11d38:	stm	sp, {r1, r6, r8}
   11d3c:	add	r0, r9, r0, lsl #2
   11d40:	orr	r1, r7, #1024	; 0x400
   11d44:	bl	1203c <__assert_fail@plt+0xb1c>
   11d48:	eor	r0, r0, #1
   11d4c:	sub	sp, fp, #28
   11d50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d54:	ldr	r0, [r9, r0, lsl #2]
   11d58:	add	r1, r8, #20
   11d5c:	add	r3, r8, #16
   11d60:	sub	r2, fp, #36	; 0x24
   11d64:	str	r1, [sp]
   11d68:	sub	r1, fp, #32
   11d6c:	bl	18d10 <__assert_fail@plt+0x77f0>
   11d70:	cmp	r0, #0
   11d74:	bne	11f38 <__assert_fail@plt+0xa18>
   11d78:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d7c:	cmp	r0, #0
   11d80:	bne	11da0 <__assert_fail@plt+0x880>
   11d84:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d88:	cmp	r0, #0
   11d8c:	beq	11da0 <__assert_fail@plt+0x880>
   11d90:	movw	r0, #47112	; 0xb808
   11d94:	movt	r0, #1
   11d98:	bl	19ce4 <__assert_fail@plt+0x87c4>
   11d9c:	str	r0, [fp, #-52]	; 0xffffffcc
   11da0:	ldr	r0, [r4]
   11da4:	add	r0, r0, #1
   11da8:	str	r0, [r4]
   11dac:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11db0:	cmp	r0, #0
   11db4:	bne	11d00 <__assert_fail@plt+0x7e0>
   11db8:	b	11d24 <__assert_fail@plt+0x804>
   11dbc:	cmn	r0, #3
   11dc0:	bne	11e18 <__assert_fail@plt+0x8f8>
   11dc4:	movw	r0, #53552	; 0xd130
   11dc8:	movw	r2, #47681	; 0xba41
   11dcc:	mov	r1, #0
   11dd0:	movw	r7, #47665	; 0xba31
   11dd4:	movt	r0, #2
   11dd8:	movt	r2, #1
   11ddc:	str	r1, [sp, #8]
   11de0:	movw	r1, #47605	; 0xb9f5
   11de4:	movt	r7, #1
   11de8:	ldr	r3, [r0]
   11dec:	movw	r0, #53644	; 0xd18c
   11df0:	str	r2, [sp, #4]
   11df4:	movw	r2, #47651	; 0xba23
   11df8:	movt	r1, #1
   11dfc:	str	r7, [sp]
   11e00:	movt	r0, #2
   11e04:	movt	r2, #1
   11e08:	ldr	r0, [r0]
   11e0c:	bl	19590 <__assert_fail@plt+0x8070>
   11e10:	mov	r0, #0
   11e14:	bl	11388 <exit@plt>
   11e18:	cmn	r0, #2
   11e1c:	bne	11e98 <__assert_fail@plt+0x978>
   11e20:	mov	r0, #0
   11e24:	bl	11620 <__assert_fail@plt+0x100>
   11e28:	movw	r0, #53648	; 0xd190
   11e2c:	mov	r4, r1
   11e30:	movt	r0, #2
   11e34:	ldr	r0, [r0]
   11e38:	bl	18c5c <__assert_fail@plt+0x773c>
   11e3c:	movw	r2, #47644	; 0xba1c
   11e40:	str	r0, [sp]
   11e44:	mov	r0, #1
   11e48:	mov	r1, #0
   11e4c:	mov	r3, r4
   11e50:	movt	r2, #1
   11e54:	bl	11328 <error@plt>
   11e58:	cmp	r0, r6
   11e5c:	bge	11f0c <__assert_fail@plt+0x9ec>
   11e60:	movw	r1, #47752	; 0xba88
   11e64:	mov	r0, #0
   11e68:	mov	r2, #5
   11e6c:	movt	r1, #1
   11e70:	bl	112a4 <dcgettext@plt>
   11e74:	mov	r5, r0
   11e78:	add	r0, r9, r6, lsl #2
   11e7c:	ldr	r0, [r0, #-4]
   11e80:	bl	18c5c <__assert_fail@plt+0x773c>
   11e84:	mov	r3, r0
   11e88:	mov	r0, #0
   11e8c:	mov	r1, #0
   11e90:	mov	r2, r5
   11e94:	bl	11328 <error@plt>
   11e98:	mov	r0, #1
   11e9c:	bl	11620 <__assert_fail@plt+0x100>
   11ea0:	bl	113d0 <__errno_location@plt>
   11ea4:	ldr	r4, [r0]
   11ea8:	movw	r1, #47777	; 0xbaa1
   11eac:	mov	r0, #0
   11eb0:	mov	r2, #5
   11eb4:	movt	r1, #1
   11eb8:	bl	112a4 <dcgettext@plt>
   11ebc:	ldr	r1, [sl]
   11ec0:	mov	r5, r0
   11ec4:	b	11ef0 <__assert_fail@plt+0x9d0>
   11ec8:	bl	113d0 <__errno_location@plt>
   11ecc:	ldr	r4, [r0]
   11ed0:	movw	r1, #47777	; 0xbaa1
   11ed4:	mov	r0, #0
   11ed8:	mov	r2, #5
   11edc:	movt	r1, #1
   11ee0:	bl	112a4 <dcgettext@plt>
   11ee4:	movw	r1, #50663	; 0xc5e7
   11ee8:	mov	r5, r0
   11eec:	movt	r1, #1
   11ef0:	mov	r0, #4
   11ef4:	bl	18734 <__assert_fail@plt+0x7214>
   11ef8:	mov	r3, r0
   11efc:	mov	r0, #1
   11f00:	mov	r1, r4
   11f04:	mov	r2, r5
   11f08:	bl	11328 <error@plt>
   11f0c:	movw	r1, #47736	; 0xba78
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	movt	r1, #1
   11f1c:	bl	112a4 <dcgettext@plt>
   11f20:	mov	r2, r0
   11f24:	mov	r0, #0
   11f28:	mov	r1, #0
   11f2c:	bl	11328 <error@plt>
   11f30:	mov	r0, #1
   11f34:	bl	11620 <__assert_fail@plt+0x100>
   11f38:	mov	r5, r0
   11f3c:	ldr	r0, [r4]
   11f40:	ldr	r0, [r9, r0, lsl #2]
   11f44:	bl	18c5c <__assert_fail@plt+0x773c>
   11f48:	movw	r2, #47644	; 0xba1c
   11f4c:	str	r0, [sp]
   11f50:	mov	r0, #1
   11f54:	mov	r1, #0
   11f58:	mov	r3, r5
   11f5c:	movt	r2, #1
   11f60:	bl	11328 <error@plt>
   11f64:	mov	r1, #0
   11f68:	mov	r2, #2
   11f6c:	str	r1, [r0, #8]
   11f70:	str	r2, [r0]
   11f74:	mov	r2, #1
   11f78:	strb	r1, [r0, #4]
   11f7c:	strh	r2, [r0, #12]
   11f80:	str	r1, [r0, #16]
   11f84:	str	r1, [r0, #20]
   11f88:	bx	lr
   11f8c:	push	{r4, sl, fp, lr}
   11f90:	add	fp, sp, #8
   11f94:	mov	r4, r0
   11f98:	ldr	r0, [r0, #16]
   11f9c:	bl	12f78 <__assert_fail@plt+0x1a58>
   11fa0:	ldr	r0, [r4, #20]
   11fa4:	pop	{r4, sl, fp, lr}
   11fa8:	b	12f78 <__assert_fail@plt+0x1a58>
   11fac:	push	{r4, sl, fp, lr}
   11fb0:	add	fp, sp, #8
   11fb4:	sub	sp, sp, #24
   11fb8:	mov	r4, r0
   11fbc:	bl	11508 <getgrgid@plt>
   11fc0:	cmp	r0, #0
   11fc4:	beq	11fd8 <__assert_fail@plt+0xab8>
   11fc8:	ldr	r0, [r0]
   11fcc:	bl	19ce4 <__assert_fail@plt+0x87c4>
   11fd0:	sub	sp, fp, #8
   11fd4:	pop	{r4, sl, fp, pc}
   11fd8:	add	r2, sp, #3
   11fdc:	mov	r0, r4
   11fe0:	mov	r1, #0
   11fe4:	bl	16be4 <__assert_fail@plt+0x56c4>
   11fe8:	bl	19ce4 <__assert_fail@plt+0x87c4>
   11fec:	sub	sp, fp, #8
   11ff0:	pop	{r4, sl, fp, pc}
   11ff4:	push	{r4, sl, fp, lr}
   11ff8:	add	fp, sp, #8
   11ffc:	sub	sp, sp, #24
   12000:	mov	r4, r0
   12004:	bl	11238 <getpwuid@plt>
   12008:	cmp	r0, #0
   1200c:	beq	12020 <__assert_fail@plt+0xb00>
   12010:	ldr	r0, [r0]
   12014:	bl	19ce4 <__assert_fail@plt+0x87c4>
   12018:	sub	sp, fp, #8
   1201c:	pop	{r4, sl, fp, pc}
   12020:	add	r2, sp, #3
   12024:	mov	r0, r4
   12028:	mov	r1, #0
   1202c:	bl	16be4 <__assert_fail@plt+0x56c4>
   12030:	bl	19ce4 <__assert_fail@plt+0x87c4>
   12034:	sub	sp, fp, #8
   12038:	pop	{r4, sl, fp, pc}
   1203c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12040:	add	fp, sp, #28
   12044:	sub	sp, sp, #260	; 0x104
   12048:	str	r3, [sp, #24]
   1204c:	str	r2, [sp, #28]
   12050:	ldr	r2, [fp, #8]
   12054:	ldr	r3, [fp, #12]
   12058:	ldr	r5, [fp, #16]
   1205c:	and	r3, r3, r2
   12060:	mov	r2, #0
   12064:	cmn	r3, #1
   12068:	str	r3, [sp, #32]
   1206c:	bne	12090 <__assert_fail@plt+0xb70>
   12070:	ldrb	r3, [r5, #12]
   12074:	cmp	r3, #0
   12078:	bne	12090 <__assert_fail@plt+0xb70>
   1207c:	ldr	r2, [r5]
   12080:	sub	r2, r2, #2
   12084:	clz	r2, r2
   12088:	lsr	r2, r2, #5
   1208c:	lsl	r2, r2, #3
   12090:	orr	r1, r2, r1
   12094:	mov	r2, #0
   12098:	bl	19d68 <__assert_fail@plt+0x8848>
   1209c:	str	r0, [sp, #44]	; 0x2c
   120a0:	bl	13a48 <__assert_fail@plt+0x2528>
   120a4:	cmp	r0, #0
   120a8:	beq	12d44 <__assert_fail@plt+0x1824>
   120ac:	ldr	r1, [sp, #28]
   120b0:	movw	r2, #48923	; 0xbf1b
   120b4:	mov	r9, r0
   120b8:	movw	r0, #48948	; 0xbf34
   120bc:	mov	r7, #1
   120c0:	movt	r0, #1
   120c4:	movt	r2, #1
   120c8:	cmn	r1, #1
   120cc:	moveq	r2, r0
   120d0:	sub	r0, fp, #136	; 0x88
   120d4:	add	r0, r0, #96	; 0x60
   120d8:	str	r2, [sp, #12]
   120dc:	str	r0, [sp, #8]
   120e0:	ldr	r8, [r9, #24]
   120e4:	ldr	r4, [r9, #28]
   120e8:	ldrh	r0, [r9, #56]	; 0x38
   120ec:	sub	r0, r0, #1
   120f0:	cmp	r0, #9
   120f4:	bhi	122f4 <__assert_fail@plt+0xdd4>
   120f8:	add	r1, pc, #0
   120fc:	ldr	pc, [r1, r0, lsl #2]
   12100:	andeq	r2, r1, r8, lsr #2
   12104:	andeq	r2, r1, ip, lsl #5
   12108:	strdeq	r2, [r1], -r4
   1210c:	andeq	r2, r1, ip, ror #3
   12110:	strdeq	r2, [r1], -r4
   12114:	andeq	r2, r1, r8, ror #5
   12118:	andeq	r2, r1, r8, asr #8
   1211c:	strdeq	r2, [r1], -r4
   12120:	strdeq	r2, [r1], -r4
   12124:	andeq	r2, r1, ip, lsl r2
   12128:	ldrb	r0, [r5, #4]
   1212c:	cmp	r0, #0
   12130:	beq	122f4 <__assert_fail@plt+0xdd4>
   12134:	ldr	r0, [r5, #8]
   12138:	mov	r6, r4
   1213c:	mov	r4, #1
   12140:	cmp	r0, #0
   12144:	beq	12d04 <__assert_fail@plt+0x17e4>
   12148:	ldrd	r2, [r0]
   1214c:	ldrd	r4, [r9, #160]	; 0xa0
   12150:	eor	r1, r5, r3
   12154:	eor	r2, r4, r2
   12158:	orrs	r1, r2, r1
   1215c:	bne	12834 <__assert_fail@plt+0x1314>
   12160:	ldrd	r0, [r0, #8]
   12164:	ldrd	r2, [r9, #64]	; 0x40
   12168:	ldr	r5, [fp, #16]
   1216c:	mov	r4, #1
   12170:	eor	r1, r3, r1
   12174:	eor	r0, r2, r0
   12178:	orrs	r0, r0, r1
   1217c:	bne	12d04 <__assert_fail@plt+0x17e4>
   12180:	movw	r8, #50663	; 0xc5e7
   12184:	mov	r0, r6
   12188:	mov	r4, r6
   1218c:	movt	r8, #1
   12190:	mov	r1, r8
   12194:	bl	1122c <strcmp@plt>
   12198:	cmp	r0, #0
   1219c:	beq	12bf0 <__assert_fail@plt+0x16d0>
   121a0:	movw	r1, #48566	; 0xbdb6
   121a4:	mov	r0, #0
   121a8:	mov	r2, #5
   121ac:	movt	r1, #1
   121b0:	bl	112a4 <dcgettext@plt>
   121b4:	mov	r6, r0
   121b8:	mov	r0, #0
   121bc:	mov	r1, #4
   121c0:	mov	r2, r4
   121c4:	bl	1868c <__assert_fail@plt+0x716c>
   121c8:	mov	r5, r0
   121cc:	mov	r0, #1
   121d0:	mov	r1, #4
   121d4:	mov	r2, r8
   121d8:	bl	1868c <__assert_fail@plt+0x716c>
   121dc:	mov	r3, r5
   121e0:	ldr	r5, [fp, #16]
   121e4:	str	r0, [sp]
   121e8:	b	12c18 <__assert_fail@plt+0x16f8>
   121ec:	ldrb	r0, [r5, #13]
   121f0:	mov	sl, #0
   121f4:	mov	r6, #1
   121f8:	str	r4, [sp, #40]	; 0x28
   121fc:	cmp	r0, #0
   12200:	bne	12460 <__assert_fail@plt+0xf40>
   12204:	ldr	r8, [r9, #32]
   12208:	movw	r1, #48690	; 0xbe32
   1220c:	mov	sl, #0
   12210:	mov	r0, #0
   12214:	movt	r1, #1
   12218:	b	12260 <__assert_fail@plt+0xd40>
   1221c:	ldr	r0, [r9, #48]	; 0x30
   12220:	cmp	r0, #0
   12224:	bne	12234 <__assert_fail@plt+0xd14>
   12228:	ldr	r0, [r9, #16]
   1222c:	cmp	r0, #0
   12230:	beq	12864 <__assert_fail@plt+0x1344>
   12234:	ldrb	r0, [r5, #13]
   12238:	mov	sl, #0
   1223c:	mov	r6, #1
   12240:	str	r4, [sp, #40]	; 0x28
   12244:	cmp	r0, #0
   12248:	bne	12460 <__assert_fail@plt+0xf40>
   1224c:	ldr	r8, [r9, #32]
   12250:	movw	r1, #48673	; 0xbe21
   12254:	mov	sl, #0
   12258:	mov	r0, #0
   1225c:	movt	r1, #1
   12260:	mov	r2, #5
   12264:	bl	112a4 <dcgettext@plt>
   12268:	mov	r5, r0
   1226c:	mov	r0, #4
   12270:	mov	r1, r4
   12274:	bl	18734 <__assert_fail@plt+0x7214>
   12278:	mov	r3, r0
   1227c:	mov	r0, #0
   12280:	mov	r1, r8
   12284:	mov	r2, r5
   12288:	b	12644 <__assert_fail@plt+0x1124>
   1228c:	ldr	r0, [sp, #44]	; 0x2c
   12290:	mov	r1, r9
   12294:	bl	19db4 <__assert_fail@plt+0x8894>
   12298:	cmp	r0, #0
   1229c:	beq	122f4 <__assert_fail@plt+0xdd4>
   122a0:	movw	r1, #48715	; 0xbe4b
   122a4:	mov	r0, #0
   122a8:	mov	r2, #5
   122ac:	mov	r6, r4
   122b0:	movt	r1, #1
   122b4:	bl	112a4 <dcgettext@plt>
   122b8:	mov	r4, r0
   122bc:	mov	r0, #0
   122c0:	mov	r1, #3
   122c4:	mov	r2, r6
   122c8:	bl	189b0 <__assert_fail@plt+0x7490>
   122cc:	mov	r3, r0
   122d0:	mov	r2, r4
   122d4:	mov	r0, #0
   122d8:	mov	r1, #0
   122dc:	mov	r4, #0
   122e0:	bl	11328 <error@plt>
   122e4:	b	12d04 <__assert_fail@plt+0x17e4>
   122e8:	ldrb	r0, [r5, #4]
   122ec:	cmp	r0, #0
   122f0:	beq	12610 <__assert_fail@plt+0x10f0>
   122f4:	ldr	r0, [sp, #32]
   122f8:	cmn	r0, #1
   122fc:	bne	12314 <__assert_fail@plt+0xdf4>
   12300:	ldr	r0, [r5]
   12304:	cmp	r0, #2
   12308:	ldreq	r0, [r5, #8]
   1230c:	cmpeq	r0, #0
   12310:	beq	12840 <__assert_fail@plt+0x1320>
   12314:	ldrb	r0, [r5, #12]
   12318:	add	sl, r9, #64	; 0x40
   1231c:	cmp	r0, #0
   12320:	beq	12414 <__assert_fail@plt+0xef4>
   12324:	ldr	r0, [r9, #80]	; 0x50
   12328:	and	r0, r0, #61440	; 0xf000
   1232c:	cmp	r0, #40960	; 0xa000
   12330:	bne	12414 <__assert_fail@plt+0xef4>
   12334:	ldr	r0, [sp, #44]	; 0x2c
   12338:	add	sl, sp, #48	; 0x30
   1233c:	mov	r2, r8
   12340:	mov	r3, sl
   12344:	ldr	r1, [r0, #32]
   12348:	mov	r0, #0
   1234c:	str	r0, [sp]
   12350:	mov	r0, #3
   12354:	bl	112c8 <__fxstatat64@plt>
   12358:	cmp	r0, #0
   1235c:	beq	12414 <__assert_fail@plt+0xef4>
   12360:	ldrb	r0, [r5, #13]
   12364:	str	r4, [sp, #40]	; 0x28
   12368:	mov	r4, #0
   1236c:	mov	r6, #1
   12370:	cmp	r0, #0
   12374:	bne	123bc <__assert_fail@plt+0xe9c>
   12378:	bl	113d0 <__errno_location@plt>
   1237c:	ldr	r4, [r0]
   12380:	movw	r1, #48901	; 0xbf05
   12384:	mov	r0, #0
   12388:	mov	r2, #5
   1238c:	movt	r1, #1
   12390:	bl	112a4 <dcgettext@plt>
   12394:	ldr	r1, [sp, #40]	; 0x28
   12398:	mov	r5, r0
   1239c:	mov	r0, #4
   123a0:	bl	18734 <__assert_fail@plt+0x7214>
   123a4:	mov	r3, r0
   123a8:	mov	r1, r4
   123ac:	mov	r0, #0
   123b0:	mov	r2, r5
   123b4:	mov	r4, #0
   123b8:	bl	11328 <error@plt>
   123bc:	add	sl, sp, #48	; 0x30
   123c0:	mov	r5, #1
   123c4:	ldr	r0, [fp, #16]
   123c8:	ldr	r0, [r0]
   123cc:	cmp	r0, #2
   123d0:	beq	129b8 <__assert_fail@plt+0x1498>
   123d4:	eor	r1, r4, #1
   123d8:	orrs	r1, r5, r1
   123dc:	eorseq	r1, r6, #1
   123e0:	beq	12468 <__assert_fail@plt+0xf48>
   123e4:	cmp	r0, #0
   123e8:	bne	129b8 <__assert_fail@plt+0x1498>
   123ec:	cmp	r6, #0
   123f0:	mov	r5, #1
   123f4:	mov	r0, #3
   123f8:	movwne	r5, #4
   123fc:	cmp	r4, #0
   12400:	moveq	r5, r0
   12404:	cmp	sl, #0
   12408:	beq	12738 <__assert_fail@plt+0x1218>
   1240c:	mov	r6, r4
   12410:	b	124bc <__assert_fail@plt+0xf9c>
   12414:	ldr	r2, [fp, #8]
   12418:	cmn	r2, #1
   1241c:	beq	124d8 <__assert_fail@plt+0xfb8>
   12420:	ldr	r1, [sl, #24]
   12424:	ldr	r3, [fp, #12]
   12428:	sub	r0, r1, r2
   1242c:	cmn	r3, #1
   12430:	clz	r0, r0
   12434:	lsr	r0, r0, #5
   12438:	beq	124f8 <__assert_fail@plt+0xfd8>
   1243c:	cmp	r1, r2
   12440:	beq	124e4 <__assert_fail@plt+0xfc4>
   12444:	b	124f8 <__assert_fail@plt+0xfd8>
   12448:	ldrb	r0, [r5, #13]
   1244c:	mov	sl, #0
   12450:	mov	r6, #1
   12454:	str	r4, [sp, #40]	; 0x28
   12458:	cmp	r0, #0
   1245c:	beq	12618 <__assert_fail@plt+0x10f8>
   12460:	mov	r5, #1
   12464:	b	12aac <__assert_fail@plt+0x158c>
   12468:	ldr	r1, [sp, #28]
   1246c:	cmn	r1, #1
   12470:	beq	12484 <__assert_fail@plt+0xf64>
   12474:	ldr	r1, [sl, #24]
   12478:	ldr	r2, [sp, #28]
   1247c:	cmp	r1, r2
   12480:	bne	124a0 <__assert_fail@plt+0xf80>
   12484:	ldr	r1, [sp, #24]
   12488:	cmn	r1, #1
   1248c:	beq	123e4 <__assert_fail@plt+0xec4>
   12490:	ldr	r1, [sl, #28]
   12494:	ldr	r2, [sp, #24]
   12498:	cmp	r1, r2
   1249c:	beq	123e4 <__assert_fail@plt+0xec4>
   124a0:	cmp	r6, #0
   124a4:	mov	r5, #1
   124a8:	mov	r0, #3
   124ac:	mov	r6, r4
   124b0:	movwne	r5, #2
   124b4:	cmp	r4, #0
   124b8:	moveq	r5, r0
   124bc:	ldr	r4, [sl, #24]
   124c0:	mov	r0, r4
   124c4:	bl	11238 <getpwuid@plt>
   124c8:	cmp	r0, #0
   124cc:	beq	12650 <__assert_fail@plt+0x1130>
   124d0:	ldr	r0, [r0]
   124d4:	b	12660 <__assert_fail@plt+0x1140>
   124d8:	ldr	r0, [fp, #12]
   124dc:	cmn	r0, #1
   124e0:	beq	12850 <__assert_fail@plt+0x1330>
   124e4:	ldr	r0, [sl, #28]
   124e8:	ldr	r1, [fp, #12]
   124ec:	sub	r0, r0, r1
   124f0:	clz	r0, r0
   124f4:	lsr	r0, r0, #5
   124f8:	ldrh	r1, [r9, #56]	; 0x38
   124fc:	cmp	r1, #6
   12500:	bhi	1251c <__assert_fail@plt+0xffc>
   12504:	mov	r2, #1
   12508:	mov	r3, #86	; 0x56
   1250c:	tst	r3, r2, lsl r1
   12510:	ldrne	r1, [r5, #8]
   12514:	cmpne	r1, #0
   12518:	bne	1256c <__assert_fail@plt+0x104c>
   1251c:	str	r4, [sp, #40]	; 0x28
   12520:	mov	r4, #1
   12524:	cmp	r0, #0
   12528:	beq	129a0 <__assert_fail@plt+0x1480>
   1252c:	ldr	r0, [sp, #44]	; 0x2c
   12530:	ldr	r6, [r0, #32]
   12534:	ldrb	r0, [r5, #12]
   12538:	cmp	r0, #0
   1253c:	beq	126e8 <__assert_fail@plt+0x11c8>
   12540:	ldr	r0, [sp, #32]
   12544:	cmn	r0, #1
   12548:	beq	12a2c <__assert_fail@plt+0x150c>
   1254c:	ldr	r0, [sl, #16]
   12550:	and	r0, r0, #61440	; 0xf000
   12554:	cmp	r0, #32768	; 0x8000
   12558:	beq	12888 <__assert_fail@plt+0x1368>
   1255c:	cmp	r0, #16384	; 0x4000
   12560:	bne	12a2c <__assert_fail@plt+0x150c>
   12564:	mov	r5, #18688	; 0x4900
   12568:	b	1288c <__assert_fail@plt+0x136c>
   1256c:	ldrd	r2, [r1]
   12570:	ldr	r6, [sl, #96]	; 0x60
   12574:	ldr	r5, [sl, #100]	; 0x64
   12578:	eor	r3, r5, r3
   1257c:	ldr	r5, [fp, #16]
   12580:	eor	r2, r6, r2
   12584:	orrs	r2, r2, r3
   12588:	bne	1251c <__assert_fail@plt+0xffc>
   1258c:	ldrd	r2, [r1, #8]
   12590:	ldr	r6, [sl]
   12594:	ldr	r1, [sl, #4]
   12598:	eor	r1, r1, r3
   1259c:	eor	r2, r6, r2
   125a0:	orrs	r1, r2, r1
   125a4:	bne	1251c <__assert_fail@plt+0xffc>
   125a8:	movw	r8, #50663	; 0xc5e7
   125ac:	mov	r0, r4
   125b0:	movt	r8, #1
   125b4:	mov	r1, r8
   125b8:	bl	1122c <strcmp@plt>
   125bc:	cmp	r0, #0
   125c0:	beq	12b6c <__assert_fail@plt+0x164c>
   125c4:	movw	r1, #48566	; 0xbdb6
   125c8:	mov	r0, #0
   125cc:	mov	r2, #5
   125d0:	movt	r1, #1
   125d4:	bl	112a4 <dcgettext@plt>
   125d8:	mov	r6, r0
   125dc:	mov	r0, #0
   125e0:	mov	r1, #4
   125e4:	mov	r2, r4
   125e8:	bl	1868c <__assert_fail@plt+0x716c>
   125ec:	mov	r5, r0
   125f0:	mov	r0, #1
   125f4:	mov	r1, #4
   125f8:	mov	r2, r8
   125fc:	bl	1868c <__assert_fail@plt+0x716c>
   12600:	mov	r3, r5
   12604:	ldr	r5, [fp, #16]
   12608:	str	r0, [sp]
   1260c:	b	12b94 <__assert_fail@plt+0x1674>
   12610:	mov	r4, #1
   12614:	b	12d04 <__assert_fail@plt+0x17e4>
   12618:	ldr	r5, [r9, #32]
   1261c:	mov	r0, #0
   12620:	mov	r1, #3
   12624:	mov	r2, r4
   12628:	mov	sl, #0
   1262c:	bl	189b0 <__assert_fail@plt+0x7490>
   12630:	movw	r2, #47648	; 0xba20
   12634:	mov	r3, r0
   12638:	mov	r0, #0
   1263c:	mov	r1, r5
   12640:	movt	r2, #1
   12644:	bl	11328 <error@plt>
   12648:	mov	r5, #1
   1264c:	b	12aac <__assert_fail@plt+0x158c>
   12650:	mov	r0, r4
   12654:	mov	r1, #0
   12658:	sub	r2, fp, #136	; 0x88
   1265c:	bl	16be4 <__assert_fail@plt+0x56c4>
   12660:	bl	19ce4 <__assert_fail@plt+0x87c4>
   12664:	ldr	r4, [sl, #28]
   12668:	str	r0, [sp, #36]	; 0x24
   1266c:	mov	r0, r4
   12670:	bl	11508 <getgrgid@plt>
   12674:	cmp	r0, #0
   12678:	beq	12684 <__assert_fail@plt+0x1164>
   1267c:	ldr	r0, [r0]
   12680:	b	12694 <__assert_fail@plt+0x1174>
   12684:	mov	r0, r4
   12688:	mov	r1, #0
   1268c:	sub	r2, fp, #136	; 0x88
   12690:	bl	16be4 <__assert_fail@plt+0x56c4>
   12694:	mov	r4, r6
   12698:	bl	19ce4 <__assert_fail@plt+0x87c4>
   1269c:	mov	sl, r0
   126a0:	mov	r8, r4
   126a4:	cmp	r5, #1
   126a8:	bne	12750 <__assert_fail@plt+0x1230>
   126ac:	movw	r1, #48969	; 0xbf49
   126b0:	mov	r0, #0
   126b4:	mov	r2, #5
   126b8:	movt	r1, #1
   126bc:	bl	112a4 <dcgettext@plt>
   126c0:	ldr	r1, [sp, #40]	; 0x28
   126c4:	mov	r4, r0
   126c8:	mov	r0, #4
   126cc:	bl	18734 <__assert_fail@plt+0x7214>
   126d0:	mov	r2, r0
   126d4:	mov	r0, #1
   126d8:	mov	r1, r4
   126dc:	bl	113f4 <__printf_chk@plt>
   126e0:	mov	r4, r8
   126e4:	b	12ce4 <__assert_fail@plt+0x17c4>
   126e8:	ldr	r2, [sp, #28]
   126ec:	ldr	r3, [sp, #24]
   126f0:	mov	r0, #256	; 0x100
   126f4:	mov	r1, r8
   126f8:	str	r0, [sp]
   126fc:	mov	r0, r6
   12700:	bl	114a8 <fchownat@plt>
   12704:	cmp	r0, #0
   12708:	beq	12880 <__assert_fail@plt+0x1360>
   1270c:	bl	113d0 <__errno_location@plt>
   12710:	ldr	r0, [r0]
   12714:	mov	r6, #0
   12718:	cmp	r0, #95	; 0x5f
   1271c:	bne	12a54 <__assert_fail@plt+0x1534>
   12720:	mov	r5, #0
   12724:	ldr	r0, [fp, #16]
   12728:	ldr	r0, [r0]
   1272c:	cmp	r0, #2
   12730:	bne	123d4 <__assert_fail@plt+0xeb4>
   12734:	b	129b8 <__assert_fail@plt+0x1498>
   12738:	mov	r0, #0
   1273c:	mov	sl, #0
   12740:	str	r0, [sp, #36]	; 0x24
   12744:	mov	r8, r4
   12748:	cmp	r5, #1
   1274c:	beq	126ac <__assert_fail@plt+0x118c>
   12750:	ldr	r0, [fp, #16]
   12754:	ldr	r6, [r0, #20]
   12758:	ldr	r4, [r0, #16]
   1275c:	mov	r0, r4
   12760:	mov	r1, r6
   12764:	bl	12de0 <__assert_fail@plt+0x18c0>
   12768:	ldr	r1, [sp, #36]	; 0x24
   1276c:	mov	r2, sl
   12770:	mov	sl, r0
   12774:	cmp	r4, #0
   12778:	mov	r0, r4
   1277c:	str	r2, [sp, #20]
   12780:	movne	r0, r1
   12784:	cmp	r6, #0
   12788:	mov	r1, r6
   1278c:	movne	r1, r2
   12790:	bl	12de0 <__assert_fail@plt+0x18c0>
   12794:	cmp	r5, #4
   12798:	beq	12804 <__assert_fail@plt+0x12e4>
   1279c:	cmp	r5, #3
   127a0:	beq	127cc <__assert_fail@plt+0x12ac>
   127a4:	cmp	r5, #2
   127a8:	bne	12d40 <__assert_fail@plt+0x1820>
   127ac:	cmp	r4, #0
   127b0:	mov	r5, sl
   127b4:	str	r0, [sp, #16]
   127b8:	beq	12adc <__assert_fail@plt+0x15bc>
   127bc:	movw	r1, #49025	; 0xbf81
   127c0:	mov	r0, #0
   127c4:	movt	r1, #1
   127c8:	b	127f0 <__assert_fail@plt+0x12d0>
   127cc:	cmp	r0, #0
   127d0:	beq	12afc <__assert_fail@plt+0x15dc>
   127d4:	cmp	r4, #0
   127d8:	mov	r5, sl
   127dc:	str	r0, [sp, #16]
   127e0:	beq	12bd0 <__assert_fail@plt+0x16b0>
   127e4:	movw	r1, #49129	; 0xbfe9
   127e8:	mov	r0, #0
   127ec:	movt	r1, #1
   127f0:	mov	r2, #5
   127f4:	bl	112a4 <dcgettext@plt>
   127f8:	mov	r6, r0
   127fc:	mov	r4, r8
   12800:	b	12c90 <__assert_fail@plt+0x1770>
   12804:	cmp	r4, #0
   12808:	str	r0, [sp, #16]
   1280c:	beq	12b4c <__assert_fail@plt+0x162c>
   12810:	movw	r1, #49331	; 0xc0b3
   12814:	mov	r0, #0
   12818:	mov	r2, #5
   1281c:	movt	r1, #1
   12820:	bl	112a4 <dcgettext@plt>
   12824:	mov	r6, r0
   12828:	mov	r4, r8
   1282c:	mov	r5, sl
   12830:	b	12c90 <__assert_fail@plt+0x1770>
   12834:	ldr	r5, [fp, #16]
   12838:	mov	r4, #1
   1283c:	b	12d04 <__assert_fail@plt+0x17e4>
   12840:	ldrb	r0, [r5, #12]
   12844:	add	sl, r9, #64	; 0x40
   12848:	cmp	r0, #0
   1284c:	bne	12324 <__assert_fail@plt+0xe04>
   12850:	mov	r0, #1
   12854:	ldrh	r1, [r9, #56]	; 0x38
   12858:	cmp	r1, #6
   1285c:	bls	12504 <__assert_fail@plt+0xfe4>
   12860:	b	1251c <__assert_fail@plt+0xffc>
   12864:	ldr	r0, [sp, #44]	; 0x2c
   12868:	mov	r4, #1
   1286c:	mov	r1, r9
   12870:	mov	r2, #1
   12874:	str	r4, [r9, #16]
   12878:	bl	152dc <__assert_fail@plt+0x3dbc>
   1287c:	b	12d04 <__assert_fail@plt+0x17e4>
   12880:	mov	r5, #0
   12884:	b	12ac4 <__assert_fail@plt+0x15a4>
   12888:	mov	r5, #2304	; 0x900
   1288c:	mov	r0, r6
   12890:	mov	r1, r8
   12894:	mov	r2, r5
   12898:	bl	113b8 <openat64@plt>
   1289c:	mov	r1, r0
   128a0:	cmn	r0, #1
   128a4:	ble	129dc <__assert_fail@plt+0x14bc>
   128a8:	mov	r0, #3
   128ac:	sub	r2, fp, #136	; 0x88
   128b0:	str	r1, [sp, #36]	; 0x24
   128b4:	bl	112e0 <__fxstat64@plt>
   128b8:	mov	r6, #6
   128bc:	cmp	r0, #0
   128c0:	bne	1294c <__assert_fail@plt+0x142c>
   128c4:	ldr	r0, [sp, #8]
   128c8:	ldrd	r2, [sl, #96]	; 0x60
   128cc:	mov	r6, #4
   128d0:	ldrd	r0, [r0]
   128d4:	eor	r1, r3, r1
   128d8:	eor	r0, r2, r0
   128dc:	orrs	r0, r0, r1
   128e0:	bne	1294c <__assert_fail@plt+0x142c>
   128e4:	ldrd	r0, [sl]
   128e8:	ldr	r2, [fp, #-136]	; 0xffffff78
   128ec:	ldr	r3, [fp, #-132]	; 0xffffff7c
   128f0:	eor	r1, r1, r3
   128f4:	eor	r0, r0, r2
   128f8:	orrs	r0, r0, r1
   128fc:	bne	1294c <__assert_fail@plt+0x142c>
   12900:	ldr	r1, [fp, #8]
   12904:	mov	r6, #2
   12908:	cmn	r1, #1
   1290c:	ldrne	r0, [fp, #-112]	; 0xffffff90
   12910:	cmpne	r0, r1
   12914:	bne	1294c <__assert_fail@plt+0x142c>
   12918:	ldr	r0, [fp, #12]
   1291c:	cmn	r0, #1
   12920:	ldrne	r0, [fp, #-108]	; 0xffffff94
   12924:	ldrne	r1, [fp, #12]
   12928:	cmpne	r0, r1
   1292c:	bne	1294c <__assert_fail@plt+0x142c>
   12930:	ldr	r0, [sp, #36]	; 0x24
   12934:	ldr	r1, [sp, #28]
   12938:	ldr	r2, [sp, #24]
   1293c:	bl	113c4 <fchown@plt>
   12940:	cmp	r0, #0
   12944:	mov	r6, #6
   12948:	beq	12d20 <__assert_fail@plt+0x1800>
   1294c:	str	r6, [sp, #20]
   12950:	bl	113d0 <__errno_location@plt>
   12954:	mov	r5, r0
   12958:	ldr	r6, [r0]
   1295c:	ldr	r0, [sp, #36]	; 0x24
   12960:	bl	114e4 <close@plt>
   12964:	ldr	r0, [sp, #20]
   12968:	str	r6, [r5]
   1296c:	sub	r0, r0, #2
   12970:	cmp	r0, #4
   12974:	bhi	12d40 <__assert_fail@plt+0x1820>
   12978:	add	r1, pc, #8
   1297c:	mov	r5, #0
   12980:	mov	r6, #1
   12984:	ldr	pc, [r1, r0, lsl #2]
   12988:	andeq	r2, r1, r8, lsr #19
   1298c:	muleq	r1, ip, r9
   12990:	muleq	r1, ip, r9
   12994:	andeq	r2, r1, ip, lsr #20
   12998:	andeq	r2, r1, r4, asr sl
   1299c:	mov	r4, #0
   129a0:	mov	r6, #1
   129a4:	mov	r5, #1
   129a8:	ldr	r0, [fp, #16]
   129ac:	ldr	r0, [r0]
   129b0:	cmp	r0, #2
   129b4:	bne	123d4 <__assert_fail@plt+0xeb4>
   129b8:	ldr	r5, [fp, #16]
   129bc:	ldrb	r0, [r5, #4]
   129c0:	cmp	r0, #0
   129c4:	bne	12d04 <__assert_fail@plt+0x17e4>
   129c8:	ldr	r0, [sp, #44]	; 0x2c
   129cc:	mov	r1, r9
   129d0:	mov	r2, #4
   129d4:	bl	152dc <__assert_fail@plt+0x3dbc>
   129d8:	b	12d04 <__assert_fail@plt+0x17e4>
   129dc:	bl	113d0 <__errno_location@plt>
   129e0:	ldr	r1, [r0]
   129e4:	cmp	r1, #13
   129e8:	bne	12a54 <__assert_fail@plt+0x1534>
   129ec:	ldr	r1, [sl, #16]
   129f0:	and	r1, r1, #61440	; 0xf000
   129f4:	cmp	r1, #32768	; 0x8000
   129f8:	bne	12a2c <__assert_fail@plt+0x150c>
   129fc:	str	r0, [sp, #36]	; 0x24
   12a00:	orr	r2, r5, #1
   12a04:	mov	r0, r6
   12a08:	mov	r1, r8
   12a0c:	bl	113b8 <openat64@plt>
   12a10:	mov	r1, r0
   12a14:	cmn	r0, #1
   12a18:	bgt	128a8 <__assert_fail@plt+0x1388>
   12a1c:	ldr	r0, [sp, #36]	; 0x24
   12a20:	ldr	r0, [r0]
   12a24:	cmp	r0, #13
   12a28:	bne	12a54 <__assert_fail@plt+0x1534>
   12a2c:	ldr	r0, [sp, #44]	; 0x2c
   12a30:	ldr	r2, [sp, #28]
   12a34:	ldr	r3, [sp, #24]
   12a38:	mov	r5, #0
   12a3c:	mov	r1, r8
   12a40:	str	r5, [sp]
   12a44:	ldr	r0, [r0, #32]
   12a48:	bl	114a8 <fchownat@plt>
   12a4c:	cmp	r0, #0
   12a50:	beq	12ac4 <__assert_fail@plt+0x15a4>
   12a54:	ldr	r0, [fp, #16]
   12a58:	mov	r5, #0
   12a5c:	ldrb	r0, [r0, #13]
   12a60:	cmp	r0, #0
   12a64:	bne	12aa8 <__assert_fail@plt+0x1588>
   12a68:	bl	113d0 <__errno_location@plt>
   12a6c:	ldr	r1, [sp, #12]
   12a70:	ldr	r4, [r0]
   12a74:	mov	r0, #0
   12a78:	mov	r2, #5
   12a7c:	mov	r5, #0
   12a80:	bl	112a4 <dcgettext@plt>
   12a84:	ldr	r1, [sp, #40]	; 0x28
   12a88:	mov	r6, r0
   12a8c:	mov	r0, #4
   12a90:	bl	18734 <__assert_fail@plt+0x7214>
   12a94:	mov	r3, r0
   12a98:	mov	r0, #0
   12a9c:	mov	r1, r4
   12aa0:	mov	r2, r6
   12aa4:	bl	11328 <error@plt>
   12aa8:	mov	r6, #1
   12aac:	mov	r4, #0
   12ab0:	ldr	r0, [fp, #16]
   12ab4:	ldr	r0, [r0]
   12ab8:	cmp	r0, #2
   12abc:	bne	123d4 <__assert_fail@plt+0xeb4>
   12ac0:	b	129b8 <__assert_fail@plt+0x1498>
   12ac4:	mov	r6, #1
   12ac8:	ldr	r0, [fp, #16]
   12acc:	ldr	r0, [r0]
   12ad0:	cmp	r0, #2
   12ad4:	bne	123d4 <__assert_fail@plt+0xeb4>
   12ad8:	b	129b8 <__assert_fail@plt+0x1498>
   12adc:	ldr	sl, [sp, #20]
   12ae0:	cmp	r6, #0
   12ae4:	mov	r4, r8
   12ae8:	mov	r0, #0
   12aec:	beq	12c70 <__assert_fail@plt+0x1750>
   12af0:	movw	r1, #49064	; 0xbfa8
   12af4:	movt	r1, #1
   12af8:	b	12ca0 <__assert_fail@plt+0x1780>
   12afc:	movw	r1, #49221	; 0xc045
   12b00:	movw	r0, #49295	; 0xc08f
   12b04:	cmp	r6, #0
   12b08:	mov	r2, #5
   12b0c:	movt	r1, #1
   12b10:	movt	r0, #1
   12b14:	movne	r1, r0
   12b18:	movw	r0, #49255	; 0xc067
   12b1c:	cmp	r4, #0
   12b20:	movt	r0, #1
   12b24:	movne	r1, r0
   12b28:	mov	r0, #0
   12b2c:	bl	112a4 <dcgettext@plt>
   12b30:	mov	r6, r0
   12b34:	mov	r0, #0
   12b38:	bl	12f78 <__assert_fail@plt+0x1a58>
   12b3c:	str	sl, [sp, #16]
   12b40:	mov	r5, #0
   12b44:	mov	r4, r8
   12b48:	b	12c90 <__assert_fail@plt+0x1770>
   12b4c:	cmp	r6, #0
   12b50:	mov	r4, r8
   12b54:	mov	r5, sl
   12b58:	mov	r0, #0
   12b5c:	beq	12c7c <__assert_fail@plt+0x175c>
   12b60:	movw	r1, #49363	; 0xc0d3
   12b64:	movt	r1, #1
   12b68:	b	12c84 <__assert_fail@plt+0x1764>
   12b6c:	movw	r1, #48521	; 0xbd89
   12b70:	mov	r0, #0
   12b74:	mov	r2, #5
   12b78:	movt	r1, #1
   12b7c:	bl	112a4 <dcgettext@plt>
   12b80:	mov	r6, r0
   12b84:	mov	r0, #4
   12b88:	mov	r1, r4
   12b8c:	bl	18734 <__assert_fail@plt+0x7214>
   12b90:	mov	r3, r0
   12b94:	mov	r0, #0
   12b98:	mov	r1, #0
   12b9c:	mov	r2, r6
   12ba0:	bl	11328 <error@plt>
   12ba4:	movw	r1, #48624	; 0xbdf0
   12ba8:	mov	r0, #0
   12bac:	mov	r2, #5
   12bb0:	mov	r4, #0
   12bb4:	movt	r1, #1
   12bb8:	bl	112a4 <dcgettext@plt>
   12bbc:	mov	r2, r0
   12bc0:	mov	r0, #0
   12bc4:	mov	r1, #0
   12bc8:	bl	11328 <error@plt>
   12bcc:	b	12d04 <__assert_fail@plt+0x17e4>
   12bd0:	ldr	sl, [sp, #20]
   12bd4:	cmp	r6, #0
   12bd8:	mov	r4, r8
   12bdc:	mov	r0, #0
   12be0:	beq	12c98 <__assert_fail@plt+0x1778>
   12be4:	movw	r1, #49177	; 0xc019
   12be8:	movt	r1, #1
   12bec:	b	12ca0 <__assert_fail@plt+0x1780>
   12bf0:	movw	r1, #48521	; 0xbd89
   12bf4:	mov	r0, #0
   12bf8:	mov	r2, #5
   12bfc:	movt	r1, #1
   12c00:	bl	112a4 <dcgettext@plt>
   12c04:	mov	r6, r0
   12c08:	mov	r0, #4
   12c0c:	mov	r1, r4
   12c10:	bl	18734 <__assert_fail@plt+0x7214>
   12c14:	mov	r3, r0
   12c18:	mov	r0, #0
   12c1c:	mov	r1, #0
   12c20:	mov	r2, r6
   12c24:	bl	11328 <error@plt>
   12c28:	movw	r1, #48624	; 0xbdf0
   12c2c:	mov	r0, #0
   12c30:	mov	r2, #5
   12c34:	movt	r1, #1
   12c38:	bl	112a4 <dcgettext@plt>
   12c3c:	mov	r2, r0
   12c40:	mov	r0, #0
   12c44:	mov	r1, #0
   12c48:	bl	11328 <error@plt>
   12c4c:	ldr	r4, [sp, #44]	; 0x2c
   12c50:	mov	r1, r9
   12c54:	mov	r2, #4
   12c58:	mov	r0, r4
   12c5c:	bl	152dc <__assert_fail@plt+0x3dbc>
   12c60:	mov	r0, r4
   12c64:	mov	r4, #0
   12c68:	bl	13a48 <__assert_fail@plt+0x2528>
   12c6c:	b	12d04 <__assert_fail@plt+0x17e4>
   12c70:	movw	r1, #49099	; 0xbfcb
   12c74:	movt	r1, #1
   12c78:	b	12ca0 <__assert_fail@plt+0x1780>
   12c7c:	movw	r1, #49391	; 0xc0ef
   12c80:	movt	r1, #1
   12c84:	mov	r2, #5
   12c88:	bl	112a4 <dcgettext@plt>
   12c8c:	mov	r6, r0
   12c90:	ldr	sl, [sp, #20]
   12c94:	b	12cac <__assert_fail@plt+0x178c>
   12c98:	movw	r1, #49221	; 0xc045
   12c9c:	movt	r1, #1
   12ca0:	mov	r2, #5
   12ca4:	bl	112a4 <dcgettext@plt>
   12ca8:	mov	r6, r0
   12cac:	ldr	r1, [sp, #40]	; 0x28
   12cb0:	mov	r0, #4
   12cb4:	bl	18734 <__assert_fail@plt+0x7214>
   12cb8:	mov	r1, r6
   12cbc:	ldr	r6, [sp, #16]
   12cc0:	mov	r2, r0
   12cc4:	mov	r0, #1
   12cc8:	str	r5, [sp]
   12ccc:	mov	r3, r6
   12cd0:	bl	113f4 <__printf_chk@plt>
   12cd4:	mov	r0, r6
   12cd8:	bl	12f78 <__assert_fail@plt+0x1a58>
   12cdc:	mov	r0, r5
   12ce0:	bl	12f78 <__assert_fail@plt+0x1a58>
   12ce4:	ldr	r0, [sp, #36]	; 0x24
   12ce8:	bl	12f78 <__assert_fail@plt+0x1a58>
   12cec:	mov	r0, sl
   12cf0:	bl	12f78 <__assert_fail@plt+0x1a58>
   12cf4:	ldr	r5, [fp, #16]
   12cf8:	ldrb	r0, [r5, #4]
   12cfc:	cmp	r0, #0
   12d00:	beq	129c8 <__assert_fail@plt+0x14a8>
   12d04:	ldr	r0, [sp, #44]	; 0x2c
   12d08:	and	r7, r7, r4
   12d0c:	bl	13a48 <__assert_fail@plt+0x2528>
   12d10:	mov	r9, r0
   12d14:	cmp	r0, #0
   12d18:	bne	120e0 <__assert_fail@plt+0xbc0>
   12d1c:	b	12d48 <__assert_fail@plt+0x1828>
   12d20:	ldr	r0, [sp, #36]	; 0x24
   12d24:	bl	114e4 <close@plt>
   12d28:	cmp	r0, #0
   12d2c:	mov	r0, #6
   12d30:	movweq	r0, #2
   12d34:	sub	r0, r0, #2
   12d38:	cmp	r0, #4
   12d3c:	bls	12978 <__assert_fail@plt+0x1458>
   12d40:	bl	114d8 <abort@plt>
   12d44:	mov	r7, #1
   12d48:	bl	113d0 <__errno_location@plt>
   12d4c:	ldr	r4, [r0]
   12d50:	mov	r5, r0
   12d54:	cmp	r4, #0
   12d58:	beq	12d98 <__assert_fail@plt+0x1878>
   12d5c:	ldr	r0, [fp, #16]
   12d60:	mov	r7, #0
   12d64:	ldrb	r0, [r0, #13]
   12d68:	cmp	r0, #0
   12d6c:	bne	12d98 <__assert_fail@plt+0x1878>
   12d70:	movw	r1, #48488	; 0xbd68
   12d74:	mov	r0, #0
   12d78:	mov	r2, #5
   12d7c:	mov	r7, #0
   12d80:	movt	r1, #1
   12d84:	bl	112a4 <dcgettext@plt>
   12d88:	mov	r2, r0
   12d8c:	mov	r0, #0
   12d90:	mov	r1, r4
   12d94:	bl	11328 <error@plt>
   12d98:	ldr	r0, [sp, #44]	; 0x2c
   12d9c:	bl	138a0 <__assert_fail@plt+0x2380>
   12da0:	cmp	r0, #0
   12da4:	beq	12dd4 <__assert_fail@plt+0x18b4>
   12da8:	ldr	r4, [r5]
   12dac:	movw	r1, #48504	; 0xbd78
   12db0:	mov	r0, #0
   12db4:	mov	r2, #5
   12db8:	mov	r7, #0
   12dbc:	movt	r1, #1
   12dc0:	bl	112a4 <dcgettext@plt>
   12dc4:	mov	r2, r0
   12dc8:	mov	r0, #0
   12dcc:	mov	r1, r4
   12dd0:	bl	11328 <error@plt>
   12dd4:	mov	r0, r7
   12dd8:	sub	sp, fp, #28
   12ddc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12de0:	push	{r4, r5, r6, sl, fp, lr}
   12de4:	add	fp, sp, #16
   12de8:	mov	r4, r1
   12dec:	cmp	r0, #0
   12df0:	beq	12e44 <__assert_fail@plt+0x1924>
   12df4:	mov	r5, r0
   12df8:	cmp	r4, #0
   12dfc:	beq	12e60 <__assert_fail@plt+0x1940>
   12e00:	mov	r0, r5
   12e04:	bl	113a0 <strlen@plt>
   12e08:	mov	r6, r0
   12e0c:	mov	r0, r4
   12e10:	bl	113a0 <strlen@plt>
   12e14:	add	r0, r6, r0
   12e18:	add	r0, r0, #2
   12e1c:	bl	197c4 <__assert_fail@plt+0x82a4>
   12e20:	mov	r1, r5
   12e24:	mov	r6, r0
   12e28:	bl	11298 <stpcpy@plt>
   12e2c:	mov	r1, #58	; 0x3a
   12e30:	strh	r1, [r0], #1
   12e34:	mov	r1, r4
   12e38:	bl	11298 <stpcpy@plt>
   12e3c:	mov	r0, r6
   12e40:	pop	{r4, r5, r6, sl, fp, pc}
   12e44:	cmp	r4, #0
   12e48:	moveq	r6, #0
   12e4c:	moveq	r0, r6
   12e50:	popeq	{r4, r5, r6, sl, fp, pc}
   12e54:	mov	r0, r4
   12e58:	bl	19ce4 <__assert_fail@plt+0x87c4>
   12e5c:	pop	{r4, r5, r6, sl, fp, pc}
   12e60:	mov	r0, r5
   12e64:	bl	19ce4 <__assert_fail@plt+0x87c4>
   12e68:	pop	{r4, r5, r6, sl, fp, pc}
   12e6c:	movw	r1, #53680	; 0xd1b0
   12e70:	movt	r1, #2
   12e74:	str	r0, [r1, #4]
   12e78:	bx	lr
   12e7c:	movw	r1, #53680	; 0xd1b0
   12e80:	movt	r1, #2
   12e84:	strb	r0, [r1]
   12e88:	bx	lr
   12e8c:	push	{r4, r5, r6, sl, fp, lr}
   12e90:	add	fp, sp, #16
   12e94:	sub	sp, sp, #8
   12e98:	movw	r0, #53644	; 0xd18c
   12e9c:	movt	r0, #2
   12ea0:	ldr	r0, [r0]
   12ea4:	bl	1a738 <__assert_fail@plt+0x9218>
   12ea8:	cmp	r0, #0
   12eac:	beq	12ed4 <__assert_fail@plt+0x19b4>
   12eb0:	movw	r5, #53680	; 0xd1b0
   12eb4:	movt	r5, #2
   12eb8:	ldrb	r0, [r5]
   12ebc:	cmp	r0, #0
   12ec0:	beq	12f00 <__assert_fail@plt+0x19e0>
   12ec4:	bl	113d0 <__errno_location@plt>
   12ec8:	ldr	r0, [r0]
   12ecc:	cmp	r0, #32
   12ed0:	bne	12f00 <__assert_fail@plt+0x19e0>
   12ed4:	movw	r0, #53640	; 0xd188
   12ed8:	movt	r0, #2
   12edc:	ldr	r0, [r0]
   12ee0:	bl	1a738 <__assert_fail@plt+0x9218>
   12ee4:	cmp	r0, #0
   12ee8:	subeq	sp, fp, #16
   12eec:	popeq	{r4, r5, r6, sl, fp, pc}
   12ef0:	movw	r0, #53556	; 0xd134
   12ef4:	movt	r0, #2
   12ef8:	ldr	r0, [r0]
   12efc:	bl	11268 <_exit@plt>
   12f00:	movw	r1, #49432	; 0xc118
   12f04:	mov	r0, #0
   12f08:	mov	r2, #5
   12f0c:	movt	r1, #1
   12f10:	bl	112a4 <dcgettext@plt>
   12f14:	ldr	r6, [r5, #4]
   12f18:	mov	r4, r0
   12f1c:	bl	113d0 <__errno_location@plt>
   12f20:	ldr	r5, [r0]
   12f24:	cmp	r6, #0
   12f28:	bne	12f44 <__assert_fail@plt+0x1a24>
   12f2c:	movw	r2, #47648	; 0xba20
   12f30:	mov	r0, #0
   12f34:	mov	r1, r5
   12f38:	mov	r3, r4
   12f3c:	movt	r2, #1
   12f40:	b	12f64 <__assert_fail@plt+0x1a44>
   12f44:	mov	r0, r6
   12f48:	bl	188d4 <__assert_fail@plt+0x73b4>
   12f4c:	movw	r2, #47644	; 0xba1c
   12f50:	mov	r3, r0
   12f54:	str	r4, [sp]
   12f58:	mov	r0, #0
   12f5c:	mov	r1, r5
   12f60:	movt	r2, #1
   12f64:	bl	11328 <error@plt>
   12f68:	movw	r0, #53556	; 0xd134
   12f6c:	movt	r0, #2
   12f70:	ldr	r0, [r0]
   12f74:	bl	11268 <_exit@plt>
   12f78:	push	{r4, r5, r6, sl, fp, lr}
   12f7c:	add	fp, sp, #16
   12f80:	mov	r4, r0
   12f84:	bl	113d0 <__errno_location@plt>
   12f88:	ldr	r6, [r0]
   12f8c:	mov	r5, r0
   12f90:	mov	r0, r4
   12f94:	bl	1125c <free@plt>
   12f98:	str	r6, [r5]
   12f9c:	pop	{r4, r5, r6, sl, fp, pc}
   12fa0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fa4:	add	fp, sp, #28
   12fa8:	sub	sp, sp, #28
   12fac:	cmp	r1, #4096	; 0x1000
   12fb0:	bcs	12fcc <__assert_fail@plt+0x1aac>
   12fb4:	mov	sl, r0
   12fb8:	and	r0, r1, #516	; 0x204
   12fbc:	mov	r6, r1
   12fc0:	cmp	r0, #516	; 0x204
   12fc4:	tstne	r6, #18
   12fc8:	bne	12fe8 <__assert_fail@plt+0x1ac8>
   12fcc:	bl	113d0 <__errno_location@plt>
   12fd0:	mov	r1, #22
   12fd4:	mov	r4, #0
   12fd8:	str	r1, [r0]
   12fdc:	mov	r0, r4
   12fe0:	sub	sp, fp, #28
   12fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12fe8:	mov	r0, #1
   12fec:	mov	r1, #96	; 0x60
   12ff0:	mov	r5, r2
   12ff4:	bl	1a660 <__assert_fail@plt+0x9140>
   12ff8:	cmp	r0, #0
   12ffc:	beq	135b8 <__assert_fail@plt+0x2098>
   13000:	mov	r4, r0
   13004:	mvn	r0, #99	; 0x63
   13008:	tst	r6, #2
   1300c:	mov	r1, r6
   13010:	str	r0, [r4, #32]
   13014:	bic	r0, r6, #516	; 0x204
   13018:	str	r5, [r4, #44]	; 0x2c
   1301c:	str	r4, [sp, #24]
   13020:	orrne	r1, r0, #4
   13024:	str	r1, [r4, #48]	; 0x30
   13028:	ldr	r0, [sl]
   1302c:	cmp	r0, #0
   13030:	beq	13094 <__assert_fail@plt+0x1b74>
   13034:	add	r7, sl, #4
   13038:	mov	r4, #0
   1303c:	bl	113a0 <strlen@plt>
   13040:	cmp	r0, r4
   13044:	movhi	r4, r0
   13048:	ldr	r0, [r7], #4
   1304c:	cmp	r0, #0
   13050:	bne	1303c <__assert_fail@plt+0x1b1c>
   13054:	add	r0, r4, #1
   13058:	ldr	r4, [sp, #24]
   1305c:	cmp	r0, #4096	; 0x1000
   13060:	movls	r0, #4096	; 0x1000
   13064:	ldr	r1, [r4, #36]	; 0x24
   13068:	add	r0, r0, #256	; 0x100
   1306c:	adds	r1, r0, r1
   13070:	bcc	130a8 <__assert_fail@plt+0x1b88>
   13074:	ldr	r0, [r4, #24]
   13078:	bl	12f78 <__assert_fail@plt+0x1a58>
   1307c:	mov	r0, #0
   13080:	str	r0, [r4, #24]
   13084:	bl	113d0 <__errno_location@plt>
   13088:	mov	r1, #36	; 0x24
   1308c:	str	r1, [r0]
   13090:	b	135b0 <__assert_fail@plt+0x2090>
   13094:	mov	r0, #4096	; 0x1000
   13098:	ldr	r1, [r4, #36]	; 0x24
   1309c:	add	r0, r0, #256	; 0x100
   130a0:	adds	r1, r0, r1
   130a4:	bcs	13074 <__assert_fail@plt+0x1b54>
   130a8:	str	r1, [r4, #36]	; 0x24
   130ac:	ldr	r0, [r4, #24]
   130b0:	bl	1a6e4 <__assert_fail@plt+0x91c4>
   130b4:	cmp	r0, #0
   130b8:	beq	1311c <__assert_fail@plt+0x1bfc>
   130bc:	str	r0, [r4, #24]
   130c0:	ldr	r0, [sl]
   130c4:	cmp	r0, #0
   130c8:	beq	13130 <__assert_fail@plt+0x1c10>
   130cc:	mov	r0, #176	; 0xb0
   130d0:	bl	1a6b4 <__assert_fail@plt+0x9194>
   130d4:	cmp	r0, #0
   130d8:	beq	135a8 <__assert_fail@plt+0x2088>
   130dc:	ldr	r1, [r4, #24]
   130e0:	mov	r7, r0
   130e4:	mov	r0, #0
   130e8:	mov	r2, #196608	; 0x30000
   130ec:	strb	r0, [r7, #168]	; 0xa8
   130f0:	str	r2, [r7, #58]	; 0x3a
   130f4:	mvn	r2, #0
   130f8:	str	r0, [r7, #12]
   130fc:	str	r0, [r7, #16]
   13100:	str	r0, [r7, #20]
   13104:	str	r4, [r7, #44]	; 0x2c
   13108:	str	r2, [r7, #48]	; 0x30
   1310c:	str	r0, [r7, #52]	; 0x34
   13110:	str	r1, [r7, #28]
   13114:	str	r0, [r7, #32]
   13118:	b	13134 <__assert_fail@plt+0x1c14>
   1311c:	ldr	r0, [r4, #24]
   13120:	bl	12f78 <__assert_fail@plt+0x1a58>
   13124:	mov	r0, #0
   13128:	str	r0, [r4, #24]
   1312c:	b	135b0 <__assert_fail@plt+0x2090>
   13130:	mov	r7, #0
   13134:	cmp	r5, #0
   13138:	ldrbne	r0, [r4, #49]	; 0x31
   1313c:	ubfxne	r0, r0, #2, #1
   13140:	ldr	r4, [sl]
   13144:	moveq	r0, #1
   13148:	str	r0, [sp, #12]
   1314c:	cmp	r4, #0
   13150:	beq	132b8 <__assert_fail@plt+0x1d98>
   13154:	tst	r6, #2048	; 0x800
   13158:	str	r7, [sp, #20]
   1315c:	str	r5, [sp, #16]
   13160:	bne	132dc <__assert_fail@plt+0x1dbc>
   13164:	mov	r0, #0
   13168:	mov	r8, #0
   1316c:	mov	r5, #0
   13170:	str	r0, [sp, #8]
   13174:	mov	r0, r4
   13178:	bl	113a0 <strlen@plt>
   1317c:	mov	r9, r0
   13180:	cmp	r0, #3
   13184:	bcc	131b4 <__assert_fail@plt+0x1c94>
   13188:	add	r0, r4, r9
   1318c:	ldrb	r0, [r0, #-1]
   13190:	cmp	r0, #47	; 0x2f
   13194:	bne	131b4 <__assert_fail@plt+0x1c94>
   13198:	sub	r0, r4, #2
   1319c:	ldrb	r1, [r0, r9]
   131a0:	cmp	r1, #47	; 0x2f
   131a4:	bne	131b4 <__assert_fail@plt+0x1c94>
   131a8:	sub	r9, r9, #1
   131ac:	cmp	r9, #1
   131b0:	bhi	1319c <__assert_fail@plt+0x1c7c>
   131b4:	add	r0, r9, #176	; 0xb0
   131b8:	bic	r0, r0, #7
   131bc:	bl	1a6b4 <__assert_fail@plt+0x9194>
   131c0:	cmp	r0, #0
   131c4:	beq	1341c <__assert_fail@plt+0x1efc>
   131c8:	add	r6, r0, #168	; 0xa8
   131cc:	mov	r7, r0
   131d0:	mov	r1, r4
   131d4:	mov	r2, r9
   131d8:	mov	r0, r6
   131dc:	bl	11274 <memcpy@plt>
   131e0:	ldr	r0, [sp, #24]
   131e4:	mov	r4, #0
   131e8:	mov	r1, #196608	; 0x30000
   131ec:	cmp	r8, #0
   131f0:	strb	r4, [r6, r9]
   131f4:	str	r1, [r7, #58]	; 0x3a
   131f8:	add	r1, r7, #44	; 0x2c
   131fc:	ldr	r2, [r0, #24]
   13200:	stm	r1, {r0, r4, r9}
   13204:	ldr	r1, [sp, #20]
   13208:	str	r1, [r7, #4]
   1320c:	str	r4, [r7, #12]
   13210:	str	r4, [r7, #16]
   13214:	str	r4, [r7, #20]
   13218:	str	r6, [r7, #24]
   1321c:	str	r2, [r7, #28]
   13220:	ldr	r2, [sp, #12]
   13224:	mov	r1, r8
   13228:	str	r4, [r7, #32]
   1322c:	movwne	r1, #1
   13230:	tst	r2, r1
   13234:	beq	13264 <__assert_fail@plt+0x1d44>
   13238:	mov	r0, #2
   1323c:	str	r0, [r7, #112]	; 0x70
   13240:	mov	r0, #11
   13244:	str	r4, [r7, #116]	; 0x74
   13248:	strh	r0, [r7, #56]	; 0x38
   1324c:	ldr	r0, [sp, #16]
   13250:	cmp	r0, #0
   13254:	beq	13280 <__assert_fail@plt+0x1d60>
   13258:	str	r8, [r7, #8]
   1325c:	mov	r8, r7
   13260:	b	13298 <__assert_fail@plt+0x1d78>
   13264:	mov	r1, r7
   13268:	mov	r2, #0
   1326c:	bl	13604 <__assert_fail@plt+0x20e4>
   13270:	strh	r0, [r7, #56]	; 0x38
   13274:	ldr	r0, [sp, #16]
   13278:	cmp	r0, #0
   1327c:	bne	13258 <__assert_fail@plt+0x1d38>
   13280:	cmp	r8, #0
   13284:	str	r4, [r7, #8]
   13288:	beq	132ac <__assert_fail@plt+0x1d8c>
   1328c:	ldr	r0, [sp, #8]
   13290:	str	r7, [sp, #8]
   13294:	str	r7, [r0, #8]
   13298:	ldr	r4, [sl, #4]!
   1329c:	add	r5, r5, #1
   132a0:	cmp	r4, #0
   132a4:	bne	13174 <__assert_fail@plt+0x1c54>
   132a8:	b	1342c <__assert_fail@plt+0x1f0c>
   132ac:	mov	r0, r7
   132b0:	str	r7, [sp, #8]
   132b4:	b	1325c <__assert_fail@plt+0x1d3c>
   132b8:	ldr	r4, [sp, #24]
   132bc:	mov	r8, #0
   132c0:	mov	r0, #176	; 0xb0
   132c4:	bl	1a6b4 <__assert_fail@plt+0x9194>
   132c8:	cmp	r0, #0
   132cc:	bne	13488 <__assert_fail@plt+0x1f68>
   132d0:	mov	r0, #0
   132d4:	str	r0, [r4]
   132d8:	b	1356c <__assert_fail@plt+0x204c>
   132dc:	add	r0, sl, #4
   132e0:	mov	r9, #0
   132e4:	mov	r8, #0
   132e8:	mov	r5, #0
   132ec:	str	r0, [sp, #8]
   132f0:	ldr	r0, [sp, #12]
   132f4:	eor	r0, r0, #1
   132f8:	str	r0, [sp, #12]
   132fc:	mov	r0, #0
   13300:	str	r0, [sp, #4]
   13304:	mov	r0, r4
   13308:	mov	sl, r5
   1330c:	bl	113a0 <strlen@plt>
   13310:	mov	r7, r0
   13314:	add	r0, r0, #176	; 0xb0
   13318:	bic	r0, r0, #7
   1331c:	bl	1a6b4 <__assert_fail@plt+0x9194>
   13320:	cmp	r0, #0
   13324:	beq	1341c <__assert_fail@plt+0x1efc>
   13328:	add	r6, r0, #168	; 0xa8
   1332c:	mov	r5, r0
   13330:	mov	r1, r4
   13334:	mov	r2, r7
   13338:	mov	r0, r6
   1333c:	bl	11274 <memcpy@plt>
   13340:	ldr	r0, [sp, #24]
   13344:	mov	r1, #196608	; 0x30000
   13348:	strb	r9, [r6, r7]
   1334c:	str	r1, [r5, #58]	; 0x3a
   13350:	ldr	r1, [sp, #20]
   13354:	ldr	r2, [r0, #24]
   13358:	str	r0, [r5, #44]	; 0x2c
   1335c:	str	r9, [r5, #48]	; 0x30
   13360:	str	r7, [r5, #52]	; 0x34
   13364:	str	r1, [r5, #4]
   13368:	str	r9, [r5, #12]
   1336c:	str	r9, [r5, #16]
   13370:	str	r9, [r5, #20]
   13374:	str	r6, [r5, #24]
   13378:	clz	r1, r8
   1337c:	lsr	r1, r1, #5
   13380:	str	r2, [r5, #28]
   13384:	ldr	r2, [sp, #12]
   13388:	str	r9, [r5, #32]
   1338c:	orrs	r1, r2, r1
   13390:	bne	133c0 <__assert_fail@plt+0x1ea0>
   13394:	mov	r0, #2
   13398:	str	r0, [r5, #112]	; 0x70
   1339c:	str	r9, [r5, #116]	; 0x74
   133a0:	mov	r0, #11
   133a4:	strh	r0, [r5, #56]	; 0x38
   133a8:	ldr	r0, [sp, #16]
   133ac:	cmp	r0, #0
   133b0:	beq	133dc <__assert_fail@plt+0x1ebc>
   133b4:	str	r8, [r5, #8]
   133b8:	mov	r8, r5
   133bc:	b	133f4 <__assert_fail@plt+0x1ed4>
   133c0:	mov	r1, r5
   133c4:	mov	r2, #0
   133c8:	bl	13604 <__assert_fail@plt+0x20e4>
   133cc:	strh	r0, [r5, #56]	; 0x38
   133d0:	ldr	r0, [sp, #16]
   133d4:	cmp	r0, #0
   133d8:	bne	133b4 <__assert_fail@plt+0x1e94>
   133dc:	cmp	r8, #0
   133e0:	str	r9, [r5, #8]
   133e4:	beq	13410 <__assert_fail@plt+0x1ef0>
   133e8:	ldr	r0, [sp, #4]
   133ec:	str	r5, [sp, #4]
   133f0:	str	r5, [r0, #8]
   133f4:	ldr	r0, [sp, #8]
   133f8:	mov	r5, sl
   133fc:	add	r5, sl, #1
   13400:	ldr	r4, [r0, sl, lsl #2]
   13404:	cmp	r4, #0
   13408:	bne	13304 <__assert_fail@plt+0x1de4>
   1340c:	b	1342c <__assert_fail@plt+0x1f0c>
   13410:	mov	r0, r5
   13414:	str	r5, [sp, #4]
   13418:	b	133b8 <__assert_fail@plt+0x1e98>
   1341c:	ldr	r7, [sp, #20]
   13420:	cmp	r8, #0
   13424:	bne	13574 <__assert_fail@plt+0x2054>
   13428:	b	1359c <__assert_fail@plt+0x207c>
   1342c:	ldr	r0, [sp, #16]
   13430:	cmp	r0, #0
   13434:	beq	13470 <__assert_fail@plt+0x1f50>
   13438:	ldr	r7, [sp, #20]
   1343c:	ldr	r4, [sp, #24]
   13440:	cmp	r5, #2
   13444:	bcc	13478 <__assert_fail@plt+0x1f58>
   13448:	mov	r0, r4
   1344c:	mov	r1, r8
   13450:	mov	r2, r5
   13454:	bl	1379c <__assert_fail@plt+0x227c>
   13458:	mov	r8, r0
   1345c:	mov	r0, #176	; 0xb0
   13460:	bl	1a6b4 <__assert_fail@plt+0x9194>
   13464:	cmp	r0, #0
   13468:	bne	13488 <__assert_fail@plt+0x1f68>
   1346c:	b	132d0 <__assert_fail@plt+0x1db0>
   13470:	ldr	r7, [sp, #20]
   13474:	ldr	r4, [sp, #24]
   13478:	mov	r0, #176	; 0xb0
   1347c:	bl	1a6b4 <__assert_fail@plt+0x9194>
   13480:	cmp	r0, #0
   13484:	beq	132d0 <__assert_fail@plt+0x1db0>
   13488:	ldr	r2, [r4, #24]
   1348c:	mov	r1, #0
   13490:	mov	r3, #196608	; 0x30000
   13494:	str	r0, [r4]
   13498:	str	r1, [r0, #52]	; 0x34
   1349c:	strb	r1, [r0, #168]	; 0xa8
   134a0:	str	r4, [r0, #44]	; 0x2c
   134a4:	str	r3, [r0, #58]	; 0x3a
   134a8:	str	r2, [r0, #28]
   134ac:	mov	r2, #9
   134b0:	str	r1, [r0, #32]
   134b4:	strh	r2, [r0, #56]	; 0x38
   134b8:	str	r8, [r0, #8]
   134bc:	str	r1, [r0, #12]
   134c0:	str	r1, [r0, #16]
   134c4:	str	r1, [r0, #20]
   134c8:	mov	r1, #1
   134cc:	str	r1, [r0, #48]	; 0x30
   134d0:	ldrh	r0, [r4, #48]	; 0x30
   134d4:	movw	r1, #258	; 0x102
   134d8:	tst	r0, r1
   134dc:	beq	13518 <__assert_fail@plt+0x1ff8>
   134e0:	movw	r0, #12152	; 0x2f78
   134e4:	movw	r2, #21796	; 0x5524
   134e8:	movw	r3, #21828	; 0x5544
   134ec:	mov	r1, #0
   134f0:	movt	r0, #1
   134f4:	movt	r2, #1
   134f8:	movt	r3, #1
   134fc:	str	r0, [sp]
   13500:	mov	r0, #31
   13504:	bl	15be0 <__assert_fail@plt+0x46c0>
   13508:	cmp	r0, #0
   1350c:	str	r0, [r4, #56]	; 0x38
   13510:	bne	13530 <__assert_fail@plt+0x2010>
   13514:	b	1356c <__assert_fail@plt+0x204c>
   13518:	mov	r0, #32
   1351c:	bl	1a6b4 <__assert_fail@plt+0x9194>
   13520:	cmp	r0, #0
   13524:	str	r0, [r4, #56]	; 0x38
   13528:	beq	1356c <__assert_fail@plt+0x204c>
   1352c:	bl	1a7bc <__assert_fail@plt+0x929c>
   13530:	ldr	r4, [sp, #24]
   13534:	ldr	r0, [r4, #48]	; 0x30
   13538:	tst	r0, #516	; 0x204
   1353c:	bne	135ec <__assert_fail@plt+0x20cc>
   13540:	mov	r1, #32768	; 0x8000
   13544:	tst	r0, #512	; 0x200
   13548:	and	r1, r1, r0, lsl #11
   1354c:	orr	r1, r1, #18688	; 0x4900
   13550:	orr	r2, r1, #524288	; 0x80000
   13554:	bne	135c8 <__assert_fail@plt+0x20a8>
   13558:	movw	r0, #49445	; 0xc125
   1355c:	mov	r1, r2
   13560:	movt	r0, #1
   13564:	bl	1ab2c <__assert_fail@plt+0x960c>
   13568:	b	135d8 <__assert_fail@plt+0x20b8>
   1356c:	cmp	r8, #0
   13570:	beq	1359c <__assert_fail@plt+0x207c>
   13574:	ldrd	r4, [r8, #8]
   13578:	cmp	r5, #0
   1357c:	beq	13588 <__assert_fail@plt+0x2068>
   13580:	mov	r0, r5
   13584:	bl	114fc <closedir@plt>
   13588:	mov	r0, r8
   1358c:	bl	12f78 <__assert_fail@plt+0x1a58>
   13590:	cmp	r4, #0
   13594:	mov	r8, r4
   13598:	bne	13574 <__assert_fail@plt+0x2054>
   1359c:	mov	r0, r7
   135a0:	bl	12f78 <__assert_fail@plt+0x1a58>
   135a4:	ldr	r4, [sp, #24]
   135a8:	ldr	r0, [r4, #24]
   135ac:	bl	12f78 <__assert_fail@plt+0x1a58>
   135b0:	mov	r0, r4
   135b4:	bl	12f78 <__assert_fail@plt+0x1a58>
   135b8:	mov	r4, #0
   135bc:	mov	r0, r4
   135c0:	sub	sp, fp, #28
   135c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c8:	ldr	r0, [r4, #32]
   135cc:	movw	r1, #49445	; 0xc125
   135d0:	movt	r1, #1
   135d4:	bl	16c40 <__assert_fail@plt+0x5720>
   135d8:	str	r0, [r4, #28]
   135dc:	cmn	r0, #1
   135e0:	ldrle	r0, [r4, #48]	; 0x30
   135e4:	orrle	r0, r0, #4
   135e8:	strle	r0, [r4, #48]	; 0x30
   135ec:	add	r0, r4, #60	; 0x3c
   135f0:	mvn	r1, #0
   135f4:	bl	16b14 <__assert_fail@plt+0x55f4>
   135f8:	mov	r0, r4
   135fc:	sub	sp, fp, #28
   13600:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13604:	push	{r4, r5, r6, sl, fp, lr}
   13608:	add	fp, sp, #16
   1360c:	sub	sp, sp, #8
   13610:	mov	r4, r1
   13614:	ldr	r1, [r0, #48]	; 0x30
   13618:	ldr	r3, [r4, #48]	; 0x30
   1361c:	add	r5, r4, #64	; 0x40
   13620:	cmp	r3, #0
   13624:	andeq	r3, r1, #1
   13628:	orreq	r2, r3, r2
   1362c:	cmp	r2, #0
   13630:	andseq	r1, r1, #2
   13634:	beq	13690 <__assert_fail@plt+0x2170>
   13638:	ldr	r1, [r4, #24]
   1363c:	mov	r0, #3
   13640:	mov	r2, r5
   13644:	bl	114c0 <__xstat64@plt>
   13648:	cmp	r0, #0
   1364c:	beq	13710 <__assert_fail@plt+0x21f0>
   13650:	bl	113d0 <__errno_location@plt>
   13654:	mov	r6, r0
   13658:	ldr	r0, [r0]
   1365c:	cmp	r0, #2
   13660:	bne	136c0 <__assert_fail@plt+0x21a0>
   13664:	ldr	r1, [r4, #24]
   13668:	mov	r0, #3
   1366c:	mov	r2, r5
   13670:	bl	114f0 <__lxstat64@plt>
   13674:	cmp	r0, #0
   13678:	bne	136bc <__assert_fail@plt+0x219c>
   1367c:	mov	r0, #0
   13680:	str	r0, [r6]
   13684:	mov	r0, #13
   13688:	sub	sp, fp, #16
   1368c:	pop	{r4, r5, r6, sl, fp, pc}
   13690:	ldr	r1, [r0, #32]
   13694:	ldr	r2, [r4, #24]
   13698:	mov	r0, #256	; 0x100
   1369c:	mov	r3, r5
   136a0:	str	r0, [sp]
   136a4:	mov	r0, #3
   136a8:	bl	112c8 <__fxstatat64@plt>
   136ac:	cmp	r0, #0
   136b0:	beq	13710 <__assert_fail@plt+0x21f0>
   136b4:	bl	113d0 <__errno_location@plt>
   136b8:	mov	r6, r0
   136bc:	ldr	r0, [r6]
   136c0:	vmov.i32	q8, #0	; 0x00000000
   136c4:	add	r1, r5, #80	; 0x50
   136c8:	str	r0, [r4, #32]
   136cc:	mov	r0, #0
   136d0:	vst1.64	{d16-d17}, [r1]
   136d4:	add	r1, r5, #64	; 0x40
   136d8:	str	r0, [r5, #96]	; 0x60
   136dc:	vst1.64	{d16-d17}, [r1]
   136e0:	add	r1, r5, #48	; 0x30
   136e4:	vst1.64	{d16-d17}, [r1]
   136e8:	add	r1, r5, #32
   136ec:	vst1.64	{d16-d17}, [r1]
   136f0:	add	r1, r5, #16
   136f4:	vst1.64	{d16-d17}, [r1]
   136f8:	mov	r1, #100	; 0x64
   136fc:	vst1.64	{d16-d17}, [r5], r1
   13700:	str	r0, [r5]
   13704:	mov	r0, #10
   13708:	sub	sp, fp, #16
   1370c:	pop	{r4, r5, r6, sl, fp, pc}
   13710:	ldr	r0, [r4, #80]	; 0x50
   13714:	and	r0, r0, #61440	; 0xf000
   13718:	cmp	r0, #40960	; 0xa000
   1371c:	beq	13778 <__assert_fail@plt+0x2258>
   13720:	cmp	r0, #32768	; 0x8000
   13724:	moveq	r0, #8
   13728:	subeq	sp, fp, #16
   1372c:	popeq	{r4, r5, r6, sl, fp, pc}
   13730:	cmp	r0, #16384	; 0x4000
   13734:	bne	1376c <__assert_fail@plt+0x224c>
   13738:	ldrb	r1, [r4, #168]	; 0xa8
   1373c:	mov	r0, #1
   13740:	cmp	r1, #46	; 0x2e
   13744:	bne	13764 <__assert_fail@plt+0x2244>
   13748:	ldrb	r1, [r4, #169]	; 0xa9
   1374c:	cmp	r1, #0
   13750:	beq	13784 <__assert_fail@plt+0x2264>
   13754:	cmp	r1, #46	; 0x2e
   13758:	ldrbeq	r1, [r4, #170]	; 0xaa
   1375c:	cmpeq	r1, #0
   13760:	beq	13784 <__assert_fail@plt+0x2264>
   13764:	sub	sp, fp, #16
   13768:	pop	{r4, r5, r6, sl, fp, pc}
   1376c:	mov	r0, #3
   13770:	sub	sp, fp, #16
   13774:	pop	{r4, r5, r6, sl, fp, pc}
   13778:	mov	r0, #12
   1377c:	sub	sp, fp, #16
   13780:	pop	{r4, r5, r6, sl, fp, pc}
   13784:	ldr	r1, [r4, #48]	; 0x30
   13788:	mov	r0, #5
   1378c:	cmp	r1, #0
   13790:	movweq	r0, #1
   13794:	sub	sp, fp, #16
   13798:	pop	{r4, r5, r6, sl, fp, pc}
   1379c:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   137a0:	add	fp, sp, #24
   137a4:	ldrd	r8, [r0, #40]	; 0x28
   137a8:	mov	r5, r2
   137ac:	mov	r4, r1
   137b0:	mov	r6, r0
   137b4:	cmp	r8, r2
   137b8:	bcs	137f8 <__assert_fail@plt+0x22d8>
   137bc:	add	r1, r5, #40	; 0x28
   137c0:	cmn	r1, #-1073741823	; 0xc0000001
   137c4:	str	r1, [r6, #40]	; 0x28
   137c8:	bhi	13884 <__assert_fail@plt+0x2364>
   137cc:	add	r7, r6, #8
   137d0:	lsl	r1, r1, #2
   137d4:	ldr	r0, [r7]
   137d8:	bl	1a6e4 <__assert_fail@plt+0x91c4>
   137dc:	cmp	r0, #0
   137e0:	beq	13884 <__assert_fail@plt+0x2364>
   137e4:	mov	r6, r7
   137e8:	str	r0, [r7]
   137ec:	cmp	r4, #0
   137f0:	bne	13804 <__assert_fail@plt+0x22e4>
   137f4:	b	13818 <__assert_fail@plt+0x22f8>
   137f8:	ldr	r0, [r6, #8]!
   137fc:	cmp	r4, #0
   13800:	beq	13818 <__assert_fail@plt+0x22f8>
   13804:	str	r4, [r0], #4
   13808:	ldr	r4, [r4, #8]
   1380c:	cmp	r4, #0
   13810:	bne	13804 <__assert_fail@plt+0x22e4>
   13814:	ldr	r0, [r6]
   13818:	mov	r1, r5
   1381c:	mov	r2, #4
   13820:	mov	r3, r9
   13824:	bl	1149c <qsort@plt>
   13828:	ldr	r7, [r6]
   1382c:	subs	r0, r5, #1
   13830:	ldr	r4, [r7]
   13834:	mov	r1, r4
   13838:	beq	13874 <__assert_fail@plt+0x2354>
   1383c:	mov	r1, r7
   13840:	cmp	r5, #2
   13844:	ldr	r2, [r1, #4]!
   13848:	str	r2, [r4, #8]
   1384c:	beq	13870 <__assert_fail@plt+0x2350>
   13850:	rsb	r3, r5, #2
   13854:	mov	r2, r1
   13858:	ldr	r6, [r2, #4]!
   1385c:	ldr	r1, [r1]
   13860:	adds	r3, r3, #1
   13864:	str	r6, [r1, #8]
   13868:	mov	r1, r2
   1386c:	bne	13858 <__assert_fail@plt+0x2338>
   13870:	ldr	r1, [r7, r0, lsl #2]
   13874:	mov	r0, #0
   13878:	str	r0, [r1, #8]
   1387c:	mov	r0, r4
   13880:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13884:	ldr	r0, [r6, #8]
   13888:	bl	12f78 <__assert_fail@plt+0x1a58>
   1388c:	mov	r0, #0
   13890:	str	r0, [r6, #40]	; 0x28
   13894:	str	r0, [r6, #8]
   13898:	mov	r0, r4
   1389c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   138a0:	push	{r4, r5, r6, r7, fp, lr}
   138a4:	add	fp, sp, #16
   138a8:	mov	r4, r0
   138ac:	ldr	r0, [r0]
   138b0:	cmp	r0, #0
   138b4:	beq	138f4 <__assert_fail@plt+0x23d4>
   138b8:	ldr	r1, [r0, #48]	; 0x30
   138bc:	cmp	r1, #0
   138c0:	blt	138e8 <__assert_fail@plt+0x23c8>
   138c4:	ldr	r5, [r0, #8]
   138c8:	cmp	r5, #0
   138cc:	ldreq	r5, [r0, #4]
   138d0:	bl	12f78 <__assert_fail@plt+0x1a58>
   138d4:	ldr	r0, [r5, #48]	; 0x30
   138d8:	cmn	r0, #1
   138dc:	mov	r0, r5
   138e0:	bgt	138c4 <__assert_fail@plt+0x23a4>
   138e4:	b	138ec <__assert_fail@plt+0x23cc>
   138e8:	mov	r5, r0
   138ec:	mov	r0, r5
   138f0:	bl	12f78 <__assert_fail@plt+0x1a58>
   138f4:	ldr	r5, [r4, #4]
   138f8:	cmp	r5, #0
   138fc:	beq	13928 <__assert_fail@plt+0x2408>
   13900:	ldrd	r6, [r5, #8]
   13904:	cmp	r7, #0
   13908:	beq	13914 <__assert_fail@plt+0x23f4>
   1390c:	mov	r0, r7
   13910:	bl	114fc <closedir@plt>
   13914:	mov	r0, r5
   13918:	bl	12f78 <__assert_fail@plt+0x1a58>
   1391c:	cmp	r6, #0
   13920:	mov	r5, r6
   13924:	bne	13900 <__assert_fail@plt+0x23e0>
   13928:	ldr	r0, [r4, #8]
   1392c:	bl	12f78 <__assert_fail@plt+0x1a58>
   13930:	ldr	r0, [r4, #24]
   13934:	bl	12f78 <__assert_fail@plt+0x1a58>
   13938:	ldr	r0, [r4, #48]	; 0x30
   1393c:	tst	r0, #512	; 0x200
   13940:	bne	1397c <__assert_fail@plt+0x245c>
   13944:	mov	r6, #0
   13948:	tst	r0, #4
   1394c:	bne	139a0 <__assert_fail@plt+0x2480>
   13950:	ldr	r0, [r4, #28]
   13954:	bl	11490 <fchdir@plt>
   13958:	cmp	r0, #0
   1395c:	beq	13a30 <__assert_fail@plt+0x2510>
   13960:	bl	113d0 <__errno_location@plt>
   13964:	ldr	r6, [r0]
   13968:	ldr	r0, [r4, #28]
   1396c:	bl	114e4 <close@plt>
   13970:	cmp	r6, #0
   13974:	beq	13990 <__assert_fail@plt+0x2470>
   13978:	b	139a0 <__assert_fail@plt+0x2480>
   1397c:	ldr	r0, [r4, #32]
   13980:	mov	r6, #0
   13984:	cmp	r0, #0
   13988:	blt	139a0 <__assert_fail@plt+0x2480>
   1398c:	bl	114e4 <close@plt>
   13990:	cmp	r0, #0
   13994:	beq	139a0 <__assert_fail@plt+0x2480>
   13998:	bl	113d0 <__errno_location@plt>
   1399c:	ldr	r6, [r0]
   139a0:	add	r5, r4, #60	; 0x3c
   139a4:	b	139ac <__assert_fail@plt+0x248c>
   139a8:	bl	114e4 <close@plt>
   139ac:	mov	r0, r5
   139b0:	bl	16b38 <__assert_fail@plt+0x5618>
   139b4:	cmp	r0, #0
   139b8:	bne	139d0 <__assert_fail@plt+0x24b0>
   139bc:	mov	r0, r5
   139c0:	bl	16b8c <__assert_fail@plt+0x566c>
   139c4:	cmp	r0, #0
   139c8:	bge	139a8 <__assert_fail@plt+0x2488>
   139cc:	b	139ac <__assert_fail@plt+0x248c>
   139d0:	ldr	r0, [r4, #52]	; 0x34
   139d4:	cmp	r0, #0
   139d8:	beq	139e0 <__assert_fail@plt+0x24c0>
   139dc:	bl	15efc <__assert_fail@plt+0x49dc>
   139e0:	ldrh	r0, [r4, #48]	; 0x30
   139e4:	movw	r1, #258	; 0x102
   139e8:	tst	r0, r1
   139ec:	beq	13a04 <__assert_fail@plt+0x24e4>
   139f0:	ldr	r0, [r4, #56]	; 0x38
   139f4:	cmp	r0, #0
   139f8:	beq	13a0c <__assert_fail@plt+0x24ec>
   139fc:	bl	15efc <__assert_fail@plt+0x49dc>
   13a00:	b	13a0c <__assert_fail@plt+0x24ec>
   13a04:	ldr	r0, [r4, #56]	; 0x38
   13a08:	bl	12f78 <__assert_fail@plt+0x1a58>
   13a0c:	mov	r0, r4
   13a10:	bl	12f78 <__assert_fail@plt+0x1a58>
   13a14:	cmp	r6, #0
   13a18:	moveq	r0, #0
   13a1c:	popeq	{r4, r5, r6, r7, fp, pc}
   13a20:	bl	113d0 <__errno_location@plt>
   13a24:	str	r6, [r0]
   13a28:	mvn	r0, #0
   13a2c:	pop	{r4, r5, r6, r7, fp, pc}
   13a30:	mov	r6, #0
   13a34:	ldr	r0, [r4, #28]
   13a38:	bl	114e4 <close@plt>
   13a3c:	cmp	r6, #0
   13a40:	beq	13990 <__assert_fail@plt+0x2470>
   13a44:	b	139a0 <__assert_fail@plt+0x2480>
   13a48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a4c:	add	fp, sp, #28
   13a50:	sub	sp, sp, #4
   13a54:	ldr	r6, [r0]
   13a58:	mov	sl, #0
   13a5c:	cmp	r6, #0
   13a60:	beq	142e8 <__assert_fail@plt+0x2dc8>
   13a64:	mov	r4, r0
   13a68:	ldr	r0, [r0, #48]	; 0x30
   13a6c:	tst	r0, #8192	; 0x2000
   13a70:	bne	142e8 <__assert_fail@plt+0x2dc8>
   13a74:	ldrh	r1, [r6, #60]	; 0x3c
   13a78:	mov	r2, #3
   13a7c:	strh	r2, [r6, #60]	; 0x3c
   13a80:	cmp	r1, #1
   13a84:	beq	13b04 <__assert_fail@plt+0x25e4>
   13a88:	mov	r5, r6
   13a8c:	cmp	r1, #2
   13a90:	bne	13b28 <__assert_fail@plt+0x2608>
   13a94:	ldrh	r2, [r5, #56]!	; 0x38
   13a98:	movw	r3, #65534	; 0xfffe
   13a9c:	and	r3, r2, r3
   13aa0:	cmp	r3, #12
   13aa4:	bne	13b2c <__assert_fail@plt+0x260c>
   13aa8:	mov	r0, r4
   13aac:	mov	r1, r6
   13ab0:	mov	r2, #1
   13ab4:	bl	13604 <__assert_fail@plt+0x20e4>
   13ab8:	strh	r0, [r6, #56]	; 0x38
   13abc:	cmp	r0, #1
   13ac0:	ldreq	r0, [r4, #48]	; 0x30
   13ac4:	tsteq	r0, #4
   13ac8:	bne	13de0 <__assert_fail@plt+0x28c0>
   13acc:	mov	r1, #32768	; 0x8000
   13ad0:	tst	r0, #512	; 0x200
   13ad4:	and	r1, r1, r0, lsl #11
   13ad8:	orr	r1, r1, #18688	; 0x4900
   13adc:	orr	r2, r1, #524288	; 0x80000
   13ae0:	bne	13ff4 <__assert_fail@plt+0x2ad4>
   13ae4:	movw	r0, #49445	; 0xc125
   13ae8:	mov	r1, r2
   13aec:	movt	r0, #1
   13af0:	bl	1ab2c <__assert_fail@plt+0x960c>
   13af4:	cmn	r0, #1
   13af8:	str	r0, [r6, #36]	; 0x24
   13afc:	bgt	14010 <__assert_fail@plt+0x2af0>
   13b00:	b	14054 <__assert_fail@plt+0x2b34>
   13b04:	mov	r0, r4
   13b08:	mov	r1, r6
   13b0c:	mov	r2, #0
   13b10:	bl	13604 <__assert_fail@plt+0x20e4>
   13b14:	strh	r0, [r6, #56]	; 0x38
   13b18:	mov	sl, r6
   13b1c:	mov	r0, sl
   13b20:	sub	sp, fp, #28
   13b24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13b28:	ldrh	r2, [r5, #56]!	; 0x38
   13b2c:	cmp	r2, #1
   13b30:	bne	13bb0 <__assert_fail@plt+0x2690>
   13b34:	cmp	r1, #4
   13b38:	bne	13c20 <__assert_fail@plt+0x2700>
   13b3c:	ldrb	r0, [r6, #58]	; 0x3a
   13b40:	tst	r0, #2
   13b44:	beq	13b50 <__assert_fail@plt+0x2630>
   13b48:	ldr	r0, [r6, #36]	; 0x24
   13b4c:	bl	114e4 <close@plt>
   13b50:	ldr	r5, [r4, #4]
   13b54:	cmp	r5, #0
   13b58:	beq	13b8c <__assert_fail@plt+0x266c>
   13b5c:	ldrd	r8, [r5, #8]
   13b60:	cmp	r9, #0
   13b64:	beq	13b70 <__assert_fail@plt+0x2650>
   13b68:	mov	r0, r9
   13b6c:	bl	114fc <closedir@plt>
   13b70:	mov	r0, r5
   13b74:	bl	12f78 <__assert_fail@plt+0x1a58>
   13b78:	cmp	r8, #0
   13b7c:	mov	r5, r8
   13b80:	bne	13b5c <__assert_fail@plt+0x263c>
   13b84:	mov	r0, #0
   13b88:	str	r0, [r4, #4]
   13b8c:	mov	r0, #6
   13b90:	strh	r0, [r6, #56]	; 0x38
   13b94:	mov	r0, r4
   13b98:	mov	r1, r6
   13b9c:	bl	142f8 <__assert_fail@plt+0x2dd8>
   13ba0:	mov	sl, r6
   13ba4:	mov	r0, sl
   13ba8:	sub	sp, fp, #28
   13bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13bb0:	mov	r7, r6
   13bb4:	ldr	r6, [r7, #8]
   13bb8:	cmp	r6, #0
   13bbc:	beq	13cb0 <__assert_fail@plt+0x2790>
   13bc0:	mov	r0, r7
   13bc4:	str	r6, [r4]
   13bc8:	bl	12f78 <__assert_fail@plt+0x1a58>
   13bcc:	ldr	r0, [r6, #48]	; 0x30
   13bd0:	cmp	r0, #0
   13bd4:	beq	13cf8 <__assert_fail@plt+0x27d8>
   13bd8:	ldrh	r0, [r6, #60]	; 0x3c
   13bdc:	mov	r7, r6
   13be0:	cmp	r0, #4
   13be4:	beq	13bb4 <__assert_fail@plt+0x2694>
   13be8:	cmp	r0, #2
   13bec:	bne	13da4 <__assert_fail@plt+0x2884>
   13bf0:	mov	r0, r4
   13bf4:	mov	r1, r6
   13bf8:	mov	r2, #1
   13bfc:	bl	13604 <__assert_fail@plt+0x20e4>
   13c00:	strh	r0, [r6, #56]	; 0x38
   13c04:	cmp	r0, #1
   13c08:	ldreq	r0, [r4, #48]	; 0x30
   13c0c:	tsteq	r0, #4
   13c10:	beq	141f4 <__assert_fail@plt+0x2cd4>
   13c14:	mov	r0, #3
   13c18:	strh	r0, [r6, #60]	; 0x3c
   13c1c:	b	13da4 <__assert_fail@plt+0x2884>
   13c20:	tst	r0, #64	; 0x40
   13c24:	beq	13c40 <__assert_fail@plt+0x2720>
   13c28:	ldrd	r2, [r4, #16]
   13c2c:	ldrd	r8, [r6, #64]	; 0x40
   13c30:	eor	r1, r9, r3
   13c34:	eor	r2, r8, r2
   13c38:	orrs	r1, r2, r1
   13c3c:	bne	13b3c <__assert_fail@plt+0x261c>
   13c40:	ldr	r7, [r4, #4]
   13c44:	cmp	r7, #0
   13c48:	beq	13d80 <__assert_fail@plt+0x2860>
   13c4c:	tst	r0, #4096	; 0x1000
   13c50:	bne	13d48 <__assert_fail@plt+0x2828>
   13c54:	ldr	r3, [r6, #24]
   13c58:	mov	r0, r4
   13c5c:	mov	r1, r6
   13c60:	mvn	r2, #0
   13c64:	bl	143c8 <__assert_fail@plt+0x2ea8>
   13c68:	cmp	r0, #0
   13c6c:	beq	13d98 <__assert_fail@plt+0x2878>
   13c70:	bl	113d0 <__errno_location@plt>
   13c74:	ldr	r0, [r0]
   13c78:	str	r0, [r6, #32]
   13c7c:	ldrh	r0, [r6, #58]	; 0x3a
   13c80:	orr	r0, r0, #1
   13c84:	strh	r0, [r6, #58]	; 0x3a
   13c88:	ldr	r0, [r4, #4]
   13c8c:	cmp	r0, #0
   13c90:	beq	13d98 <__assert_fail@plt+0x2878>
   13c94:	ldmib	r0, {r1, r2}
   13c98:	ldr	r1, [r1, #24]
   13c9c:	cmp	r2, #0
   13ca0:	str	r1, [r0, #24]
   13ca4:	mov	r0, r2
   13ca8:	bne	13c94 <__assert_fail@plt+0x2774>
   13cac:	b	13d98 <__assert_fail@plt+0x2878>
   13cb0:	ldr	r0, [r7, #4]
   13cb4:	ldr	r1, [r0, #12]
   13cb8:	cmp	r1, #0
   13cbc:	beq	13d20 <__assert_fail@plt+0x2800>
   13cc0:	str	r0, [r4]
   13cc4:	mov	r2, #0
   13cc8:	ldr	r1, [r4, #24]
   13ccc:	ldr	r0, [r0, #40]	; 0x28
   13cd0:	strb	r2, [r1, r0]
   13cd4:	mov	r0, r4
   13cd8:	mov	r1, #3
   13cdc:	bl	14670 <__assert_fail@plt+0x3150>
   13ce0:	cmp	r0, #0
   13ce4:	beq	13f68 <__assert_fail@plt+0x2a48>
   13ce8:	mov	r6, r0
   13cec:	mov	r0, r7
   13cf0:	bl	12f78 <__assert_fail@plt+0x1a58>
   13cf4:	b	13da4 <__assert_fail@plt+0x2884>
   13cf8:	mov	r0, r4
   13cfc:	bl	1524c <__assert_fail@plt+0x3d2c>
   13d00:	ldr	r1, [r4, #48]	; 0x30
   13d04:	cmp	r0, #0
   13d08:	beq	13d28 <__assert_fail@plt+0x2808>
   13d0c:	orr	r0, r1, #8192	; 0x2000
   13d10:	str	r0, [r4, #48]	; 0x30
   13d14:	mov	r0, sl
   13d18:	sub	sp, fp, #28
   13d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d20:	mov	sl, r0
   13d24:	b	13f7c <__assert_fail@plt+0x2a5c>
   13d28:	movw	r0, #258	; 0x102
   13d2c:	tst	r1, r0
   13d30:	beq	1407c <__assert_fail@plt+0x2b5c>
   13d34:	ldr	r0, [r4, #56]	; 0x38
   13d38:	cmp	r0, #0
   13d3c:	beq	14084 <__assert_fail@plt+0x2b64>
   13d40:	bl	15efc <__assert_fail@plt+0x49dc>
   13d44:	b	14084 <__assert_fail@plt+0x2b64>
   13d48:	bic	r0, r0, #4096	; 0x1000
   13d4c:	str	r0, [r4, #48]	; 0x30
   13d50:	ldrd	r8, [r7, #8]
   13d54:	cmp	r9, #0
   13d58:	beq	13d64 <__assert_fail@plt+0x2844>
   13d5c:	mov	r0, r9
   13d60:	bl	114fc <closedir@plt>
   13d64:	mov	r0, r7
   13d68:	bl	12f78 <__assert_fail@plt+0x1a58>
   13d6c:	cmp	r8, #0
   13d70:	mov	r7, r8
   13d74:	bne	13d50 <__assert_fail@plt+0x2830>
   13d78:	mov	r0, #0
   13d7c:	str	r0, [r4, #4]
   13d80:	mov	r0, r4
   13d84:	mov	r1, #3
   13d88:	bl	14670 <__assert_fail@plt+0x3150>
   13d8c:	cmp	r0, #0
   13d90:	str	r0, [r4, #4]
   13d94:	beq	13f30 <__assert_fail@plt+0x2a10>
   13d98:	ldr	r6, [r4, #4]
   13d9c:	mov	r0, #0
   13da0:	str	r0, [r4, #4]
   13da4:	ldr	r0, [r6, #4]
   13da8:	ldr	r1, [r0, #28]
   13dac:	ldr	r0, [r0, #40]	; 0x28
   13db0:	sub	r2, r0, #1
   13db4:	ldrb	r1, [r1, r2]
   13db8:	cmp	r1, #47	; 0x2f
   13dbc:	ldr	r1, [r4, #24]
   13dc0:	moveq	r0, r2
   13dc4:	mov	r2, #47	; 0x2f
   13dc8:	strb	r2, [r1, r0]!
   13dcc:	ldr	r2, [r6, #52]	; 0x34
   13dd0:	add	r0, r1, #1
   13dd4:	add	r1, r6, #168	; 0xa8
   13dd8:	add	r2, r2, #1
   13ddc:	bl	11250 <memmove@plt>
   13de0:	str	r6, [r4]
   13de4:	ldrh	r0, [r6, #56]	; 0x38
   13de8:	cmp	r0, #11
   13dec:	bne	13e20 <__assert_fail@plt+0x2900>
   13df0:	ldrd	r0, [r6, #112]	; 0x70
   13df4:	eor	r2, r0, #1
   13df8:	orrs	r2, r2, r1
   13dfc:	beq	13ec8 <__assert_fail@plt+0x29a8>
   13e00:	eor	r0, r0, #2
   13e04:	orrs	r0, r0, r1
   13e08:	bne	142f4 <__assert_fail@plt+0x2dd4>
   13e0c:	mov	r0, r4
   13e10:	mov	r1, r6
   13e14:	mov	r2, #0
   13e18:	bl	13604 <__assert_fail@plt+0x20e4>
   13e1c:	strh	r0, [r6, #56]	; 0x38
   13e20:	cmp	r0, #1
   13e24:	bne	13eb8 <__assert_fail@plt+0x2998>
   13e28:	ldr	r0, [r6, #48]	; 0x30
   13e2c:	cmp	r0, #0
   13e30:	ldrdeq	r0, [r6, #64]	; 0x40
   13e34:	strdeq	r0, [r4, #16]
   13e38:	movw	r1, #258	; 0x102
   13e3c:	ldrh	r0, [r4, #48]	; 0x30
   13e40:	tst	r0, r1
   13e44:	beq	13ed8 <__assert_fail@plt+0x29b8>
   13e48:	mov	r0, #24
   13e4c:	bl	1a6b4 <__assert_fail@plt+0x9194>
   13e50:	cmp	r0, #0
   13e54:	beq	13f08 <__assert_fail@plt+0x29e8>
   13e58:	mov	r7, r0
   13e5c:	ldrd	r0, [r6, #64]	; 0x40
   13e60:	add	r2, r7, #8
   13e64:	stm	r7, {r0, r1}
   13e68:	ldrd	r0, [r6, #160]	; 0xa0
   13e6c:	stm	r2, {r0, r1, r6}
   13e70:	mov	r1, r7
   13e74:	ldr	r0, [r4, #56]	; 0x38
   13e78:	bl	16818 <__assert_fail@plt+0x52f8>
   13e7c:	cmp	r0, r7
   13e80:	beq	13f58 <__assert_fail@plt+0x2a38>
   13e84:	mov	r4, r0
   13e88:	mov	r0, r7
   13e8c:	bl	12f78 <__assert_fail@plt+0x1a58>
   13e90:	cmp	r4, #0
   13e94:	beq	13f08 <__assert_fail@plt+0x29e8>
   13e98:	ldr	r0, [r4, #16]
   13e9c:	mov	r1, #2
   13ea0:	mov	sl, r6
   13ea4:	strh	r1, [r6, #56]	; 0x38
   13ea8:	str	r0, [r6]
   13eac:	mov	r0, sl
   13eb0:	sub	sp, fp, #28
   13eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eb8:	mov	sl, r6
   13ebc:	mov	r0, sl
   13ec0:	sub	sp, fp, #28
   13ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec8:	mov	sl, r6
   13ecc:	mov	r0, sl
   13ed0:	sub	sp, fp, #28
   13ed4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ed8:	ldr	r0, [r4, #56]	; 0x38
   13edc:	add	r1, r6, #64	; 0x40
   13ee0:	bl	1a7d8 <__assert_fail@plt+0x92b8>
   13ee4:	cmp	r0, #0
   13ee8:	beq	13f20 <__assert_fail@plt+0x2a00>
   13eec:	mov	r0, #2
   13ef0:	mov	sl, r6
   13ef4:	strh	r0, [r6, #56]	; 0x38
   13ef8:	str	r6, [r6]
   13efc:	mov	r0, sl
   13f00:	sub	sp, fp, #28
   13f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f08:	bl	113d0 <__errno_location@plt>
   13f0c:	mov	r1, #12
   13f10:	str	r1, [r0]
   13f14:	mov	r0, sl
   13f18:	sub	sp, fp, #28
   13f1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f20:	mov	sl, r6
   13f24:	mov	r0, sl
   13f28:	sub	sp, fp, #28
   13f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f30:	ldrb	r0, [r4, #49]	; 0x31
   13f34:	tst	r0, #32
   13f38:	bne	142e8 <__assert_fail@plt+0x2dc8>
   13f3c:	ldr	r0, [r6, #32]
   13f40:	cmp	r0, #0
   13f44:	ldrhne	r0, [r5]
   13f48:	cmpne	r0, #4
   13f4c:	movne	r0, #7
   13f50:	strhne	r0, [r5]
   13f54:	b	13b94 <__assert_fail@plt+0x2674>
   13f58:	mov	sl, r6
   13f5c:	mov	r0, sl
   13f60:	sub	sp, fp, #28
   13f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f68:	ldrb	r0, [r4, #49]	; 0x31
   13f6c:	mov	sl, #0
   13f70:	tst	r0, #32
   13f74:	bne	142e8 <__assert_fail@plt+0x2dc8>
   13f78:	ldr	sl, [r7, #4]
   13f7c:	mov	r0, r7
   13f80:	str	sl, [r4]
   13f84:	bl	12f78 <__assert_fail@plt+0x1a58>
   13f88:	ldr	r0, [sl, #48]	; 0x30
   13f8c:	cmn	r0, #1
   13f90:	beq	14030 <__assert_fail@plt+0x2b10>
   13f94:	ldrh	r0, [sl, #56]	; 0x38
   13f98:	cmp	r0, #11
   13f9c:	beq	142f4 <__assert_fail@plt+0x2dd4>
   13fa0:	ldr	r0, [sl, #40]	; 0x28
   13fa4:	ldr	r1, [r4, #24]
   13fa8:	mov	r2, #0
   13fac:	strb	r2, [r1, r0]
   13fb0:	ldr	r0, [sl, #48]	; 0x30
   13fb4:	cmp	r0, #0
   13fb8:	beq	14174 <__assert_fail@plt+0x2c54>
   13fbc:	ldrh	r0, [sl, #58]	; 0x3a
   13fc0:	tst	r0, #2
   13fc4:	bne	141ac <__assert_fail@plt+0x2c8c>
   13fc8:	tst	r0, #1
   13fcc:	bne	142ac <__assert_fail@plt+0x2d8c>
   13fd0:	ldr	r1, [sl, #4]
   13fd4:	movw	r3, #49444	; 0xc124
   13fd8:	mov	r0, r4
   13fdc:	mvn	r2, #0
   13fe0:	movt	r3, #1
   13fe4:	bl	143c8 <__assert_fail@plt+0x2ea8>
   13fe8:	cmp	r0, #0
   13fec:	bne	14184 <__assert_fail@plt+0x2c64>
   13ff0:	b	142ac <__assert_fail@plt+0x2d8c>
   13ff4:	ldr	r0, [r4, #32]
   13ff8:	movw	r1, #49445	; 0xc125
   13ffc:	movt	r1, #1
   14000:	bl	16c40 <__assert_fail@plt+0x5720>
   14004:	cmn	r0, #1
   14008:	str	r0, [r6, #36]	; 0x24
   1400c:	ble	14054 <__assert_fail@plt+0x2b34>
   14010:	ldrh	r0, [r6, #58]	; 0x3a
   14014:	orr	r0, r0, #2
   14018:	strh	r0, [r6, #58]	; 0x3a
   1401c:	str	r6, [r4]
   14020:	ldrh	r0, [r6, #56]	; 0x38
   14024:	cmp	r0, #11
   14028:	beq	13df0 <__assert_fail@plt+0x28d0>
   1402c:	b	13e20 <__assert_fail@plt+0x2900>
   14030:	mov	r0, sl
   14034:	bl	12f78 <__assert_fail@plt+0x1a58>
   14038:	bl	113d0 <__errno_location@plt>
   1403c:	mov	sl, #0
   14040:	str	sl, [r0]
   14044:	str	sl, [r4]
   14048:	mov	r0, sl
   1404c:	sub	sp, fp, #28
   14050:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14054:	bl	113d0 <__errno_location@plt>
   14058:	ldr	r0, [r0]
   1405c:	mov	r1, #7
   14060:	strh	r1, [r6, #56]	; 0x38
   14064:	str	r0, [r6, #32]
   14068:	str	r6, [r4]
   1406c:	ldrh	r0, [r6, #56]	; 0x38
   14070:	cmp	r0, #11
   14074:	beq	13df0 <__assert_fail@plt+0x28d0>
   14078:	b	13e20 <__assert_fail@plt+0x2900>
   1407c:	ldr	r0, [r4, #56]	; 0x38
   14080:	bl	12f78 <__assert_fail@plt+0x1a58>
   14084:	ldr	r1, [r6, #52]	; 0x34
   14088:	add	r7, r6, #168	; 0xa8
   1408c:	str	r1, [r6, #40]	; 0x28
   14090:	add	r2, r1, #1
   14094:	mov	r1, r7
   14098:	ldr	r0, [r4, #24]
   1409c:	bl	11250 <memmove@plt>
   140a0:	mov	r0, r7
   140a4:	mov	r1, #47	; 0x2f
   140a8:	bl	11454 <strrchr@plt>
   140ac:	cmp	r0, #0
   140b0:	beq	140ec <__assert_fail@plt+0x2bcc>
   140b4:	cmp	r0, r7
   140b8:	bne	140c8 <__assert_fail@plt+0x2ba8>
   140bc:	ldrb	r1, [r6, #169]	; 0xa9
   140c0:	cmp	r1, #0
   140c4:	beq	140ec <__assert_fail@plt+0x2bcc>
   140c8:	add	r8, r0, #1
   140cc:	mov	r0, r8
   140d0:	bl	113a0 <strlen@plt>
   140d4:	mov	r9, r0
   140d8:	add	r2, r0, #1
   140dc:	mov	r0, r7
   140e0:	mov	r1, r8
   140e4:	bl	11250 <memmove@plt>
   140e8:	str	r9, [r6, #52]	; 0x34
   140ec:	ldr	r0, [r4, #24]
   140f0:	movw	r1, #258	; 0x102
   140f4:	str	r0, [r6, #24]
   140f8:	str	r0, [r6, #28]
   140fc:	ldrh	r0, [r4, #48]	; 0x30
   14100:	tst	r0, r1
   14104:	beq	14148 <__assert_fail@plt+0x2c28>
   14108:	movw	r0, #12152	; 0x2f78
   1410c:	movw	r2, #21796	; 0x5524
   14110:	movw	r3, #21828	; 0x5544
   14114:	mov	r1, #0
   14118:	movt	r0, #1
   1411c:	movt	r2, #1
   14120:	movt	r3, #1
   14124:	str	r0, [sp]
   14128:	mov	r0, #31
   1412c:	bl	15be0 <__assert_fail@plt+0x46c0>
   14130:	str	r0, [r4, #56]	; 0x38
   14134:	str	r6, [r4]
   14138:	ldrh	r0, [r6, #56]	; 0x38
   1413c:	cmp	r0, #11
   14140:	beq	13df0 <__assert_fail@plt+0x28d0>
   14144:	b	13e20 <__assert_fail@plt+0x2900>
   14148:	mov	r0, #32
   1414c:	bl	1a6b4 <__assert_fail@plt+0x9194>
   14150:	cmp	r0, #0
   14154:	str	r0, [r4, #56]	; 0x38
   14158:	beq	13de0 <__assert_fail@plt+0x28c0>
   1415c:	bl	1a7bc <__assert_fail@plt+0x929c>
   14160:	str	r6, [r4]
   14164:	ldrh	r0, [r6, #56]	; 0x38
   14168:	cmp	r0, #11
   1416c:	beq	13df0 <__assert_fail@plt+0x28d0>
   14170:	b	13e20 <__assert_fail@plt+0x2900>
   14174:	mov	r0, r4
   14178:	bl	1524c <__assert_fail@plt+0x3d2c>
   1417c:	cmp	r0, #0
   14180:	beq	142ac <__assert_fail@plt+0x2d8c>
   14184:	bl	113d0 <__errno_location@plt>
   14188:	ldr	r0, [r0]
   1418c:	str	r0, [sl, #32]
   14190:	ldr	r0, [r4, #48]	; 0x30
   14194:	orr	r0, r0, #8192	; 0x2000
   14198:	str	r0, [r4, #48]	; 0x30
   1419c:	ldrh	r0, [sl, #56]	; 0x38
   141a0:	cmp	r0, #2
   141a4:	bne	142b8 <__assert_fail@plt+0x2d98>
   141a8:	b	142dc <__assert_fail@plt+0x2dbc>
   141ac:	ldr	r0, [r4, #48]	; 0x30
   141b0:	tst	r0, #4
   141b4:	bne	1422c <__assert_fail@plt+0x2d0c>
   141b8:	mov	r5, sl
   141bc:	tst	r0, #512	; 0x200
   141c0:	ldr	r6, [r5, #36]!	; 0x24
   141c4:	bne	14278 <__assert_fail@plt+0x2d58>
   141c8:	mov	r0, r6
   141cc:	bl	11490 <fchdir@plt>
   141d0:	cmp	r0, #0
   141d4:	beq	142a4 <__assert_fail@plt+0x2d84>
   141d8:	bl	113d0 <__errno_location@plt>
   141dc:	ldr	r0, [r0]
   141e0:	str	r0, [sl, #32]
   141e4:	ldr	r0, [r4, #48]	; 0x30
   141e8:	orr	r0, r0, #8192	; 0x2000
   141ec:	str	r0, [r4, #48]	; 0x30
   141f0:	b	142a4 <__assert_fail@plt+0x2d84>
   141f4:	mov	r1, #32768	; 0x8000
   141f8:	tst	r0, #512	; 0x200
   141fc:	and	r1, r1, r0, lsl #11
   14200:	orr	r1, r1, #18688	; 0x4900
   14204:	orr	r2, r1, #524288	; 0x80000
   14208:	bne	14234 <__assert_fail@plt+0x2d14>
   1420c:	movw	r0, #49445	; 0xc125
   14210:	mov	r1, r2
   14214:	movt	r0, #1
   14218:	bl	1ab2c <__assert_fail@plt+0x960c>
   1421c:	cmn	r0, #1
   14220:	str	r0, [r6, #36]	; 0x24
   14224:	bgt	14250 <__assert_fail@plt+0x2d30>
   14228:	b	14260 <__assert_fail@plt+0x2d40>
   1422c:	add	r5, sl, #36	; 0x24
   14230:	b	142a4 <__assert_fail@plt+0x2d84>
   14234:	ldr	r0, [r4, #32]
   14238:	movw	r1, #49445	; 0xc125
   1423c:	movt	r1, #1
   14240:	bl	16c40 <__assert_fail@plt+0x5720>
   14244:	cmn	r0, #1
   14248:	str	r0, [r6, #36]	; 0x24
   1424c:	ble	14260 <__assert_fail@plt+0x2d40>
   14250:	ldrh	r0, [r6, #58]	; 0x3a
   14254:	orr	r0, r0, #2
   14258:	strh	r0, [r6, #58]	; 0x3a
   1425c:	b	13c14 <__assert_fail@plt+0x26f4>
   14260:	bl	113d0 <__errno_location@plt>
   14264:	ldr	r0, [r0]
   14268:	mov	r1, #7
   1426c:	strh	r1, [r6, #56]	; 0x38
   14270:	str	r0, [r6, #32]
   14274:	b	13c14 <__assert_fail@plt+0x26f4>
   14278:	ldr	r1, [r4, #32]
   1427c:	cmp	r1, r6
   14280:	bne	1428c <__assert_fail@plt+0x2d6c>
   14284:	cmn	r1, #100	; 0x64
   14288:	bne	142f4 <__assert_fail@plt+0x2dd4>
   1428c:	add	r0, r4, #60	; 0x3c
   14290:	bl	16b40 <__assert_fail@plt+0x5620>
   14294:	cmp	r0, #0
   14298:	blt	142a0 <__assert_fail@plt+0x2d80>
   1429c:	bl	114e4 <close@plt>
   142a0:	str	r6, [r4, #32]
   142a4:	ldr	r0, [r5]
   142a8:	bl	114e4 <close@plt>
   142ac:	ldrh	r0, [sl, #56]	; 0x38
   142b0:	cmp	r0, #2
   142b4:	beq	142dc <__assert_fail@plt+0x2dbc>
   142b8:	ldr	r0, [sl, #32]
   142bc:	mov	r1, #7
   142c0:	cmp	r0, #0
   142c4:	movweq	r1, #6
   142c8:	strh	r1, [sl, #56]	; 0x38
   142cc:	bne	142dc <__assert_fail@plt+0x2dbc>
   142d0:	mov	r0, r4
   142d4:	mov	r1, sl
   142d8:	bl	142f8 <__assert_fail@plt+0x2dd8>
   142dc:	ldrb	r0, [r4, #49]	; 0x31
   142e0:	tst	r0, #32
   142e4:	movne	sl, #0
   142e8:	mov	r0, sl
   142ec:	sub	sp, fp, #28
   142f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142f4:	bl	114d8 <abort@plt>
   142f8:	push	{r4, r5, r6, r7, fp, lr}
   142fc:	add	fp, sp, #16
   14300:	sub	sp, sp, #24
   14304:	ldrh	r2, [r0, #48]	; 0x30
   14308:	movw	r3, #258	; 0x102
   1430c:	add	lr, r1, #64	; 0x40
   14310:	tst	r2, r3
   14314:	beq	1434c <__assert_fail@plt+0x2e2c>
   14318:	ldrd	r2, [lr]
   1431c:	stm	sp, {r2, r3}
   14320:	ldrd	r2, [r1, #160]	; 0xa0
   14324:	mov	r1, sp
   14328:	str	r3, [sp, #12]
   1432c:	str	r2, [sp, #8]
   14330:	ldr	r0, [r0, #56]	; 0x38
   14334:	bl	16860 <__assert_fail@plt+0x5340>
   14338:	cmp	r0, #0
   1433c:	beq	143c4 <__assert_fail@plt+0x2ea4>
   14340:	bl	12f78 <__assert_fail@plt+0x1a58>
   14344:	sub	sp, fp, #16
   14348:	pop	{r4, r5, r6, r7, fp, pc}
   1434c:	ldr	r2, [r1, #4]
   14350:	cmp	r2, #0
   14354:	beq	143bc <__assert_fail@plt+0x2e9c>
   14358:	ldr	r3, [r2, #48]	; 0x30
   1435c:	cmp	r3, #0
   14360:	blt	143bc <__assert_fail@plt+0x2e9c>
   14364:	ldr	ip, [r0, #56]	; 0x38
   14368:	ldrd	r4, [ip, #16]
   1436c:	orrs	r3, r4, r5
   14370:	beq	143c4 <__assert_fail@plt+0x2ea4>
   14374:	ldrd	r4, [r1, #160]	; 0xa0
   14378:	ldrd	r6, [ip]
   1437c:	eor	r1, r7, r5
   14380:	eor	r3, r6, r4
   14384:	orrs	r1, r3, r1
   14388:	bne	143bc <__assert_fail@plt+0x2e9c>
   1438c:	ldr	r1, [ip, #8]!
   14390:	ldrd	r4, [lr]
   14394:	ldr	r3, [ip, #4]
   14398:	eor	r1, r1, r4
   1439c:	eor	r3, r3, r5
   143a0:	orrs	r1, r1, r3
   143a4:	bne	143bc <__assert_fail@plt+0x2e9c>
   143a8:	ldrd	r4, [r2, #64]	; 0x40
   143ac:	strd	r4, [ip]
   143b0:	ldr	r0, [r0, #56]	; 0x38
   143b4:	ldrd	r2, [r2, #160]	; 0xa0
   143b8:	strd	r2, [r0]
   143bc:	sub	sp, fp, #16
   143c0:	pop	{r4, r5, r6, r7, fp, pc}
   143c4:	bl	114d8 <abort@plt>
   143c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143cc:	add	fp, sp, #28
   143d0:	sub	sp, sp, #108	; 0x6c
   143d4:	mov	r7, r3
   143d8:	mov	r4, r2
   143dc:	mov	r8, r1
   143e0:	mov	sl, r0
   143e4:	cmp	r3, #0
   143e8:	beq	14474 <__assert_fail@plt+0x2f54>
   143ec:	movw	r1, #49444	; 0xc124
   143f0:	mov	r0, r7
   143f4:	movt	r1, #1
   143f8:	bl	1122c <strcmp@plt>
   143fc:	mov	r6, r0
   14400:	cmp	r0, #0
   14404:	movwne	r6, #1
   14408:	ldr	r0, [sl, #48]	; 0x30
   1440c:	tst	r0, #4
   14410:	bne	14484 <__assert_fail@plt+0x2f64>
   14414:	cmn	r4, #1
   14418:	mov	r1, #0
   1441c:	mov	r9, #0
   14420:	movwgt	r1, #1
   14424:	orrs	r1, r1, r6
   14428:	bne	144ac <__assert_fail@plt+0x2f8c>
   1442c:	ands	r0, r0, #512	; 0x200
   14430:	beq	144ac <__assert_fail@plt+0x2f8c>
   14434:	add	r4, sl, #60	; 0x3c
   14438:	mov	r0, r4
   1443c:	bl	16b38 <__assert_fail@plt+0x5618>
   14440:	cmp	r0, #0
   14444:	bne	144b4 <__assert_fail@plt+0x2f94>
   14448:	mov	r0, r4
   1444c:	bl	16b8c <__assert_fail@plt+0x566c>
   14450:	cmn	r0, #1
   14454:	ble	144b4 <__assert_fail@plt+0x2f94>
   14458:	mov	r4, r0
   1445c:	mov	r9, #0
   14460:	mov	r7, #0
   14464:	ldr	r5, [sl, #48]	; 0x30
   14468:	tst	r5, #2
   1446c:	beq	144f8 <__assert_fail@plt+0x2fd8>
   14470:	b	14540 <__assert_fail@plt+0x3020>
   14474:	mov	r6, #1
   14478:	ldr	r0, [sl, #48]	; 0x30
   1447c:	tst	r0, #4
   14480:	beq	14414 <__assert_fail@plt+0x2ef4>
   14484:	mov	r5, #0
   14488:	cmp	r4, #0
   1448c:	blt	14534 <__assert_fail@plt+0x3014>
   14490:	ands	r0, r0, #512	; 0x200
   14494:	beq	14534 <__assert_fail@plt+0x3014>
   14498:	mov	r0, r4
   1449c:	bl	114e4 <close@plt>
   144a0:	mov	r0, r5
   144a4:	sub	sp, fp, #28
   144a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   144ac:	cmn	r4, #1
   144b0:	bgt	144ec <__assert_fail@plt+0x2fcc>
   144b4:	ldr	r0, [sl, #48]	; 0x30
   144b8:	mov	r1, #32768	; 0x8000
   144bc:	and	r1, r1, r0, lsl #11
   144c0:	tst	r0, #512	; 0x200
   144c4:	orr	r1, r1, #18688	; 0x4900
   144c8:	orr	r2, r1, #524288	; 0x80000
   144cc:	bne	14568 <__assert_fail@plt+0x3048>
   144d0:	mov	r0, r7
   144d4:	mov	r1, r2
   144d8:	bl	1ab2c <__assert_fail@plt+0x960c>
   144dc:	mov	r4, r0
   144e0:	mov	r9, #1
   144e4:	cmp	r0, #0
   144e8:	blt	14584 <__assert_fail@plt+0x3064>
   144ec:	ldr	r5, [sl, #48]	; 0x30
   144f0:	tst	r5, #2
   144f4:	bne	14540 <__assert_fail@plt+0x3020>
   144f8:	cmp	r7, #0
   144fc:	beq	14518 <__assert_fail@plt+0x2ff8>
   14500:	movw	r1, #49444	; 0xc124
   14504:	mov	r0, r7
   14508:	movt	r1, #1
   1450c:	bl	1122c <strcmp@plt>
   14510:	cmp	r0, #0
   14514:	beq	14540 <__assert_fail@plt+0x3020>
   14518:	tst	r5, #512	; 0x200
   1451c:	bne	145d4 <__assert_fail@plt+0x30b4>
   14520:	mov	r0, r4
   14524:	bl	11490 <fchdir@plt>
   14528:	mov	r5, r0
   1452c:	cmp	r9, #0
   14530:	bne	1461c <__assert_fail@plt+0x30fc>
   14534:	mov	r0, r5
   14538:	sub	sp, fp, #28
   1453c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14540:	mov	r2, sp
   14544:	mov	r0, #3
   14548:	mov	r1, r4
   1454c:	bl	112e0 <__fxstat64@plt>
   14550:	cmp	r0, #0
   14554:	beq	14594 <__assert_fail@plt+0x3074>
   14558:	mvn	r5, #0
   1455c:	cmp	r9, #0
   14560:	beq	14534 <__assert_fail@plt+0x3014>
   14564:	b	1461c <__assert_fail@plt+0x30fc>
   14568:	ldr	r0, [sl, #32]
   1456c:	mov	r1, r7
   14570:	bl	16c40 <__assert_fail@plt+0x5720>
   14574:	mov	r4, r0
   14578:	mov	r9, #1
   1457c:	cmp	r0, #0
   14580:	bge	144ec <__assert_fail@plt+0x2fcc>
   14584:	mvn	r5, #0
   14588:	mov	r0, r5
   1458c:	sub	sp, fp, #28
   14590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14594:	ldrd	r0, [r8, #64]	; 0x40
   14598:	ldm	sp, {r2, r3}
   1459c:	eor	r1, r1, r3
   145a0:	eor	r0, r0, r2
   145a4:	orrs	r0, r0, r1
   145a8:	bne	14604 <__assert_fail@plt+0x30e4>
   145ac:	ldrd	r0, [r8, #160]	; 0xa0
   145b0:	ldr	r2, [sp, #96]	; 0x60
   145b4:	ldr	r3, [sp, #100]	; 0x64
   145b8:	eor	r1, r1, r3
   145bc:	eor	r0, r0, r2
   145c0:	orrs	r0, r0, r1
   145c4:	bne	14604 <__assert_fail@plt+0x30e4>
   145c8:	ldr	r5, [sl, #48]	; 0x30
   145cc:	tst	r5, #512	; 0x200
   145d0:	beq	14520 <__assert_fail@plt+0x3000>
   145d4:	ldr	r1, [sl, #32]
   145d8:	cmp	r1, r4
   145dc:	bne	145e8 <__assert_fail@plt+0x30c8>
   145e0:	cmn	r1, #100	; 0x64
   145e4:	bne	1466c <__assert_fail@plt+0x314c>
   145e8:	cmp	r6, #0
   145ec:	beq	14640 <__assert_fail@plt+0x3120>
   145f0:	add	r0, sl, #60	; 0x3c
   145f4:	bl	16b40 <__assert_fail@plt+0x5620>
   145f8:	cmp	r0, #0
   145fc:	bge	14654 <__assert_fail@plt+0x3134>
   14600:	b	14658 <__assert_fail@plt+0x3138>
   14604:	bl	113d0 <__errno_location@plt>
   14608:	mov	r1, #2
   1460c:	str	r1, [r0]
   14610:	mvn	r5, #0
   14614:	cmp	r9, #0
   14618:	beq	14534 <__assert_fail@plt+0x3014>
   1461c:	bl	113d0 <__errno_location@plt>
   14620:	ldr	r7, [r0]
   14624:	mov	r6, r0
   14628:	mov	r0, r4
   1462c:	bl	114e4 <close@plt>
   14630:	str	r7, [r6]
   14634:	mov	r0, r5
   14638:	sub	sp, fp, #28
   1463c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14640:	tst	r5, #4
   14644:	bne	14658 <__assert_fail@plt+0x3138>
   14648:	cmp	r1, #0
   1464c:	blt	14658 <__assert_fail@plt+0x3138>
   14650:	mov	r0, r1
   14654:	bl	114e4 <close@plt>
   14658:	str	r4, [sl, #32]
   1465c:	mov	r5, #0
   14660:	mov	r0, r5
   14664:	sub	sp, fp, #28
   14668:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1466c:	bl	114d8 <abort@plt>
   14670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14674:	add	fp, sp, #28
   14678:	sub	sp, sp, #76	; 0x4c
   1467c:	ldr	r8, [r0]
   14680:	mov	r9, r1
   14684:	mov	r5, r0
   14688:	str	r0, [sp, #52]	; 0x34
   1468c:	ldr	r4, [r8, #12]
   14690:	cmp	r4, #0
   14694:	beq	146e0 <__assert_fail@plt+0x31c0>
   14698:	mov	r0, r4
   1469c:	bl	11484 <dirfd@plt>
   146a0:	cmn	r0, #1
   146a4:	str	r0, [fp, #-32]	; 0xffffffe0
   146a8:	ble	14718 <__assert_fail@plt+0x31f8>
   146ac:	mov	r1, r5
   146b0:	mvn	r2, #0
   146b4:	str	r4, [sp, #12]
   146b8:	str	r9, [sp, #4]
   146bc:	mov	ip, #0
   146c0:	ldr	r0, [r1, #44]!	; 0x2c
   146c4:	cmp	r0, #0
   146c8:	str	r1, [fp, #-48]	; 0xffffffd0
   146cc:	add	sl, r1, #4
   146d0:	movweq	r2, #34464	; 0x86a0
   146d4:	movteq	r2, #1
   146d8:	str	r2, [sp, #28]
   146dc:	b	149a8 <__assert_fail@plt+0x3488>
   146e0:	mov	sl, r5
   146e4:	mvn	r0, #99	; 0x63
   146e8:	mov	r2, #0
   146ec:	ldr	r3, [sl, #48]!	; 0x30
   146f0:	and	r1, r3, #516	; 0x204
   146f4:	cmp	r1, #512	; 0x200
   146f8:	ldr	r1, [r8, #24]
   146fc:	ldreq	r0, [r5, #32]
   14700:	tst	r3, #16
   14704:	beq	14740 <__assert_fail@plt+0x3220>
   14708:	tst	r3, #1
   1470c:	bne	14734 <__assert_fail@plt+0x3214>
   14710:	mov	r2, #32768	; 0x8000
   14714:	b	14740 <__assert_fail@plt+0x3220>
   14718:	ldr	r0, [r8, #12]
   1471c:	bl	114fc <closedir@plt>
   14720:	mov	r6, #0
   14724:	str	r6, [r8, #12]
   14728:	cmp	r9, #3
   1472c:	beq	1478c <__assert_fail@plt+0x326c>
   14730:	b	1505c <__assert_fail@plt+0x3b3c>
   14734:	ldr	r3, [r8, #48]	; 0x30
   14738:	cmp	r3, #0
   1473c:	movne	r2, #32768	; 0x8000
   14740:	sub	r3, fp, #32
   14744:	bl	16c84 <__assert_fail@plt+0x5764>
   14748:	cmp	r0, #0
   1474c:	str	r0, [r8, #12]
   14750:	beq	14780 <__assert_fail@plt+0x3260>
   14754:	ldrh	r0, [r8, #56]	; 0x38
   14758:	cmp	r0, #11
   1475c:	bne	147ac <__assert_fail@plt+0x328c>
   14760:	mov	r0, r5
   14764:	mov	r1, r8
   14768:	mov	r2, #0
   1476c:	bl	13604 <__assert_fail@plt+0x20e4>
   14770:	mov	r7, r8
   14774:	strh	r0, [r8, #56]	; 0x38
   14778:	mov	r6, r5
   1477c:	b	14880 <__assert_fail@plt+0x3360>
   14780:	mov	r6, #0
   14784:	cmp	r9, #3
   14788:	bne	1505c <__assert_fail@plt+0x3b3c>
   1478c:	mov	r0, #4
   14790:	strh	r0, [r8, #56]	; 0x38
   14794:	bl	113d0 <__errno_location@plt>
   14798:	ldr	r0, [r0]
   1479c:	str	r0, [r8, #32]
   147a0:	mov	r0, r6
   147a4:	sub	sp, fp, #28
   147a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147ac:	ldrb	r0, [sl, #1]
   147b0:	mov	r7, r8
   147b4:	mov	r6, r5
   147b8:	tst	r0, #1
   147bc:	beq	14880 <__assert_fail@plt+0x3360>
   147c0:	mov	r0, r6
   147c4:	mov	r1, r7
   147c8:	mov	r5, r7
   147cc:	bl	142f8 <__assert_fail@plt+0x2dd8>
   147d0:	mov	r0, r6
   147d4:	mov	r1, r7
   147d8:	mov	r2, #0
   147dc:	bl	13604 <__assert_fail@plt+0x20e4>
   147e0:	ldrh	r0, [r6, #48]	; 0x30
   147e4:	movw	r1, #258	; 0x102
   147e8:	tst	r0, r1
   147ec:	beq	14860 <__assert_fail@plt+0x3340>
   147f0:	mov	r0, #24
   147f4:	bl	1a6b4 <__assert_fail@plt+0x9194>
   147f8:	cmp	r0, #0
   147fc:	beq	15218 <__assert_fail@plt+0x3cf8>
   14800:	mov	r5, r0
   14804:	ldrd	r0, [r7, #64]	; 0x40
   14808:	add	r2, r5, #8
   1480c:	stm	r5, {r0, r1}
   14810:	ldrd	r0, [r7, #160]	; 0xa0
   14814:	stm	r2, {r0, r1, r7}
   14818:	mov	r1, r5
   1481c:	ldr	r6, [sp, #52]	; 0x34
   14820:	ldr	r0, [r6, #56]	; 0x38
   14824:	bl	16818 <__assert_fail@plt+0x52f8>
   14828:	cmp	r0, r5
   1482c:	beq	14880 <__assert_fail@plt+0x3360>
   14830:	mov	r8, r0
   14834:	mov	r0, r5
   14838:	bl	12f78 <__assert_fail@plt+0x1a58>
   1483c:	cmp	r8, #0
   14840:	beq	15218 <__assert_fail@plt+0x3cf8>
   14844:	ldr	r0, [r8, #16]
   14848:	ldr	r6, [sp, #52]	; 0x34
   1484c:	mov	r1, #2
   14850:	mov	r2, r7
   14854:	strh	r1, [r7, #56]	; 0x38
   14858:	str	r0, [r7]
   1485c:	b	14880 <__assert_fail@plt+0x3360>
   14860:	ldr	r0, [r6, #56]	; 0x38
   14864:	add	r1, r5, #64	; 0x40
   14868:	bl	1a7d8 <__assert_fail@plt+0x92b8>
   1486c:	cmp	r0, #0
   14870:	movne	r0, #2
   14874:	movne	r1, r7
   14878:	strhne	r0, [r7, #56]	; 0x38
   1487c:	strne	r7, [r7]
   14880:	mov	r1, r6
   14884:	mov	r5, r6
   14888:	mov	r8, r7
   1488c:	str	r9, [sp, #4]
   14890:	str	r4, [sp, #12]
   14894:	ldr	r0, [r1, #44]!	; 0x2c
   14898:	str	r1, [fp, #-48]	; 0xffffffd0
   1489c:	mvn	r1, #0
   148a0:	cmp	r0, #0
   148a4:	movweq	r1, #34464	; 0x86a0
   148a8:	movteq	r1, #1
   148ac:	cmp	r9, #2
   148b0:	str	r1, [sp, #28]
   148b4:	bne	148d0 <__assert_fail@plt+0x33b0>
   148b8:	mov	ip, #1
   148bc:	cmp	r9, #3
   148c0:	bne	149a8 <__assert_fail@plt+0x3488>
   148c4:	sub	r0, r9, #3
   148c8:	mov	r5, #0
   148cc:	b	148f0 <__assert_fail@plt+0x33d0>
   148d0:	ldr	r0, [sl]
   148d4:	and	r0, r0, #56	; 0x38
   148d8:	cmp	r0, #24
   148dc:	ldreq	r0, [r8, #84]	; 0x54
   148e0:	cmpeq	r0, #2
   148e4:	beq	151d8 <__assert_fail@plt+0x3cb8>
   148e8:	sub	r0, r9, #3
   148ec:	mov	r5, #1
   148f0:	clz	r0, r0
   148f4:	lsr	r6, r0, #5
   148f8:	ldrb	r0, [sl, #1]
   148fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14900:	tst	r0, #2
   14904:	beq	14920 <__assert_fail@plt+0x3400>
   14908:	mov	r0, r2
   1490c:	movw	r1, #1030	; 0x406
   14910:	mov	r2, #3
   14914:	bl	1a94c <__assert_fail@plt+0x942c>
   14918:	mov	r2, r0
   1491c:	str	r0, [fp, #-32]	; 0xffffffe0
   14920:	cmp	r2, #0
   14924:	blt	14940 <__assert_fail@plt+0x3420>
   14928:	ldr	r0, [sp, #52]	; 0x34
   1492c:	mov	r1, r8
   14930:	mov	r3, #0
   14934:	bl	143c8 <__assert_fail@plt+0x2ea8>
   14938:	cmp	r0, #0
   1493c:	beq	149a0 <__assert_fail@plt+0x3480>
   14940:	and	r0, r6, r5
   14944:	cmp	r0, #1
   14948:	bne	14958 <__assert_fail@plt+0x3438>
   1494c:	bl	113d0 <__errno_location@plt>
   14950:	ldr	r0, [r0]
   14954:	str	r0, [r8, #32]
   14958:	ldrh	r0, [r8, #58]	; 0x3a
   1495c:	orr	r0, r0, #1
   14960:	strh	r0, [r8, #58]	; 0x3a
   14964:	ldr	r0, [r8, #12]
   14968:	bl	114fc <closedir@plt>
   1496c:	mov	r4, #0
   14970:	ldr	r5, [sp, #52]	; 0x34
   14974:	str	r4, [r8, #12]
   14978:	ldr	r0, [sl]
   1497c:	tst	r0, #512	; 0x200
   14980:	beq	14994 <__assert_fail@plt+0x3474>
   14984:	ldr	r0, [fp, #-32]	; 0xffffffe0
   14988:	cmp	r0, #0
   1498c:	blt	14994 <__assert_fail@plt+0x3474>
   14990:	bl	114e4 <close@plt>
   14994:	mov	ip, #1
   14998:	str	r4, [r8, #12]
   1499c:	b	149a8 <__assert_fail@plt+0x3488>
   149a0:	ldr	r5, [sp, #52]	; 0x34
   149a4:	mov	ip, #0
   149a8:	ldr	r0, [r8, #40]	; 0x28
   149ac:	ldr	r1, [r8, #28]
   149b0:	mov	r7, #0
   149b4:	sub	r2, r0, #1
   149b8:	ldrb	r1, [r1, r2]
   149bc:	cmp	r1, #47	; 0x2f
   149c0:	ldrb	r1, [sl]
   149c4:	moveq	r0, r2
   149c8:	tst	r1, #4
   149cc:	mov	r1, #0
   149d0:	str	r1, [sp, #40]	; 0x28
   149d4:	beq	149ec <__assert_fail@plt+0x34cc>
   149d8:	ldr	r1, [r5, #24]
   149dc:	mov	r2, #47	; 0x2f
   149e0:	strb	r2, [r1, r0]!
   149e4:	add	r1, r1, #1
   149e8:	str	r1, [sp, #40]	; 0x28
   149ec:	ldr	r6, [r8, #12]
   149f0:	add	r1, r0, #1
   149f4:	str	r1, [fp, #-44]	; 0xffffffd4
   149f8:	cmp	r6, #0
   149fc:	beq	14d9c <__assert_fail@plt+0x387c>
   14a00:	ldr	r0, [r8, #48]	; 0x30
   14a04:	str	ip, [sp]
   14a08:	add	r0, r0, #1
   14a0c:	str	r0, [sp, #20]
   14a10:	ldr	r0, [r5, #36]	; 0x24
   14a14:	mov	r5, #0
   14a18:	sub	r0, r0, r1
   14a1c:	str	r0, [sp, #44]	; 0x2c
   14a20:	bl	113d0 <__errno_location@plt>
   14a24:	str	r0, [sp, #36]	; 0x24
   14a28:	mov	r0, #0
   14a2c:	mov	r7, #0
   14a30:	mov	r4, #0
   14a34:	str	r8, [sp, #24]
   14a38:	str	sl, [sp, #32]
   14a3c:	str	r0, [sp, #48]	; 0x30
   14a40:	mov	r0, #0
   14a44:	str	r0, [sp, #8]
   14a48:	mov	r0, #0
   14a4c:	str	r0, [sp, #16]
   14a50:	ldr	r0, [sp, #36]	; 0x24
   14a54:	str	r7, [fp, #-36]	; 0xffffffdc
   14a58:	str	r5, [r0]
   14a5c:	mov	r0, r6
   14a60:	bl	1146c <readdir64@plt>
   14a64:	cmp	r0, #0
   14a68:	beq	14f00 <__assert_fail@plt+0x39e0>
   14a6c:	mov	r9, r0
   14a70:	ldrb	r0, [sl]
   14a74:	str	r4, [fp, #-40]	; 0xffffffd8
   14a78:	mov	r1, sl
   14a7c:	add	r4, r9, #19
   14a80:	tst	r0, #32
   14a84:	ldrbeq	r0, [r4]
   14a88:	cmpeq	r0, #46	; 0x2e
   14a8c:	beq	14b88 <__assert_fail@plt+0x3668>
   14a90:	mov	r0, r4
   14a94:	bl	113a0 <strlen@plt>
   14a98:	mov	r5, r0
   14a9c:	add	r0, r0, #176	; 0xb0
   14aa0:	bic	r0, r0, #7
   14aa4:	bl	1a6b4 <__assert_fail@plt+0x9194>
   14aa8:	mov	r6, r0
   14aac:	cmp	r0, #0
   14ab0:	beq	150bc <__assert_fail@plt+0x3b9c>
   14ab4:	add	sl, r6, #168	; 0xa8
   14ab8:	mov	r1, r4
   14abc:	mov	r2, r5
   14ac0:	mov	r0, sl
   14ac4:	bl	11274 <memcpy@plt>
   14ac8:	ldr	r2, [sp, #52]	; 0x34
   14acc:	mov	r0, #0
   14ad0:	mov	r1, #196608	; 0x30000
   14ad4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14ad8:	strb	r0, [sl, r5]
   14adc:	str	r5, [r6, #52]	; 0x34
   14ae0:	str	r2, [r6, #44]	; 0x2c
   14ae4:	add	r7, r5, r3
   14ae8:	ldr	r4, [r2, #24]
   14aec:	str	r1, [r6, #58]	; 0x3a
   14af0:	str	r0, [r6, #12]
   14af4:	str	r0, [r6, #16]
   14af8:	str	r0, [r6, #20]
   14afc:	str	r4, [r6, #28]
   14b00:	str	r0, [r6, #32]
   14b04:	ldr	r0, [sp, #44]	; 0x2c
   14b08:	cmp	r5, r0
   14b0c:	bcs	14b24 <__assert_fail@plt+0x3604>
   14b10:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14b14:	mov	r5, r2
   14b18:	cmp	r7, r3
   14b1c:	bcs	14bdc <__assert_fail@plt+0x36bc>
   14b20:	b	14f60 <__assert_fail@plt+0x3a40>
   14b24:	ldr	r1, [r2, #36]	; 0x24
   14b28:	movw	r0, #257	; 0x101
   14b2c:	mov	r5, r2
   14b30:	add	r0, r7, r0
   14b34:	adds	r1, r0, r1
   14b38:	bcs	15068 <__assert_fail@plt+0x3b48>
   14b3c:	mov	r0, r4
   14b40:	str	r1, [r5, #36]	; 0x24
   14b44:	bl	1a6e4 <__assert_fail@plt+0x91c4>
   14b48:	cmp	r0, #0
   14b4c:	beq	150a8 <__assert_fail@plt+0x3b88>
   14b50:	cmp	r0, r4
   14b54:	str	r0, [r5, #24]
   14b58:	beq	14bc0 <__assert_fail@plt+0x36a0>
   14b5c:	ldr	r1, [sp, #32]
   14b60:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14b64:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14b68:	ldrb	r1, [r1]
   14b6c:	tst	r1, #4
   14b70:	ldr	r1, [sp, #40]	; 0x28
   14b74:	addne	r1, r0, r3
   14b78:	mov	r0, #1
   14b7c:	str	r1, [sp, #40]	; 0x28
   14b80:	str	r0, [sp, #16]
   14b84:	b	14bc8 <__assert_fail@plt+0x36a8>
   14b88:	ldrb	r0, [r9, #20]
   14b8c:	cmp	r0, #0
   14b90:	beq	14ba4 <__assert_fail@plt+0x3684>
   14b94:	cmp	r0, #46	; 0x2e
   14b98:	ldrbeq	r0, [r9, #21]
   14b9c:	cmpeq	r0, #0
   14ba0:	bne	14a90 <__assert_fail@plt+0x3570>
   14ba4:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14ba8:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14bac:	mov	r5, #0
   14bb0:	ldr	r6, [r8, #12]
   14bb4:	cmp	r6, #0
   14bb8:	bne	14a50 <__assert_fail@plt+0x3530>
   14bbc:	b	14d80 <__assert_fail@plt+0x3860>
   14bc0:	ldr	r4, [fp, #-40]	; 0xffffffd8
   14bc4:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14bc8:	ldr	r0, [r5, #36]	; 0x24
   14bcc:	sub	r0, r0, r3
   14bd0:	str	r0, [sp, #44]	; 0x2c
   14bd4:	cmp	r7, r3
   14bd8:	bcc	14f60 <__assert_fail@plt+0x3a40>
   14bdc:	ldr	r0, [sp, #20]
   14be0:	str	r0, [r6, #48]	; 0x30
   14be4:	ldr	r0, [r5]
   14be8:	str	r7, [r6, #40]	; 0x28
   14bec:	str	r0, [r6, #4]
   14bf0:	ldrd	r0, [r9]
   14bf4:	strd	r0, [r6, #160]	; 0xa0
   14bf8:	ldrb	r0, [r5, #48]	; 0x30
   14bfc:	tst	r0, #4
   14c00:	bne	14c0c <__assert_fail@plt+0x36ec>
   14c04:	str	sl, [r6, #24]
   14c08:	b	14c28 <__assert_fail@plt+0x3708>
   14c0c:	ldr	r0, [r6, #28]
   14c10:	ldr	r1, [r6, #52]	; 0x34
   14c14:	str	r0, [r6, #24]
   14c18:	ldr	r0, [sp, #40]	; 0x28
   14c1c:	add	r2, r1, #1
   14c20:	mov	r1, sl
   14c24:	bl	11250 <memmove@plt>
   14c28:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14c2c:	ldr	sl, [sp, #32]
   14c30:	ldr	r8, [sp, #24]
   14c34:	ldr	r0, [r0]
   14c38:	ldr	r2, [sl]
   14c3c:	cmp	r0, #0
   14c40:	beq	14c6c <__assert_fail@plt+0x374c>
   14c44:	ands	r0, r2, #1024	; 0x400
   14c48:	bne	14c6c <__assert_fail@plt+0x374c>
   14c4c:	mov	r0, r5
   14c50:	mov	r1, r6
   14c54:	mov	r2, #0
   14c58:	bl	13604 <__assert_fail@plt+0x20e4>
   14c5c:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14c60:	mov	r5, #0
   14c64:	strh	r0, [r6, #56]	; 0x38
   14c68:	b	14ce4 <__assert_fail@plt+0x37c4>
   14c6c:	ldrb	r3, [r9, #18]
   14c70:	mov	r0, #0
   14c74:	tst	r2, #8
   14c78:	mov	r1, #0
   14c7c:	beq	14ca0 <__assert_fail@plt+0x3780>
   14c80:	orr	r1, r3, #4
   14c84:	cmp	r1, #4
   14c88:	mov	r1, #0
   14c8c:	beq	14ca0 <__assert_fail@plt+0x3780>
   14c90:	eor	r1, r3, #10
   14c94:	and	r2, r2, #16
   14c98:	orrs	r1, r2, r1
   14c9c:	movwne	r1, #1
   14ca0:	mov	r2, #11
   14ca4:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14ca8:	mov	r5, #0
   14cac:	strh	r2, [r6, #56]	; 0x38
   14cb0:	sub	r2, r3, #1
   14cb4:	uxtb	r3, r2
   14cb8:	cmp	r3, #11
   14cbc:	sxtbls	r0, r2
   14cc0:	movwls	r2, #49456	; 0xc130
   14cc4:	movtls	r2, #1
   14cc8:	ldrls	r0, [r2, r0, lsl #2]
   14ccc:	cmp	r1, #0
   14cd0:	str	r0, [r6, #80]	; 0x50
   14cd4:	mov	r0, #2
   14cd8:	movwne	r0, #1
   14cdc:	str	r0, [r6, #112]	; 0x70
   14ce0:	str	r5, [r6, #116]	; 0x74
   14ce4:	cmp	r7, #0
   14ce8:	str	r5, [r6, #8]
   14cec:	ldrne	r0, [sp, #48]	; 0x30
   14cf0:	moveq	r7, r6
   14cf4:	strne	r6, [r0, #8]
   14cf8:	movw	r0, #10000	; 0x2710
   14cfc:	cmp	r4, r0
   14d00:	bne	14d54 <__assert_fail@plt+0x3834>
   14d04:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14d08:	ldr	r0, [r0]
   14d0c:	cmp	r0, #0
   14d10:	bne	14d54 <__assert_fail@plt+0x3834>
   14d14:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14d18:	mov	r0, r8
   14d1c:	bl	155c4 <__assert_fail@plt+0x40a4>
   14d20:	mov	r1, #0
   14d24:	str	r1, [sp, #8]
   14d28:	movw	r1, #19778	; 0x4d42
   14d2c:	movt	r1, #65363	; 0xff53
   14d30:	cmp	r0, r1
   14d34:	movwne	r1, #26985	; 0x6969
   14d38:	cmpne	r0, r1
   14d3c:	beq	14d54 <__assert_fail@plt+0x3834>
   14d40:	movw	r1, #6548	; 0x1994
   14d44:	movt	r1, #258	; 0x102
   14d48:	cmp	r0, r1
   14d4c:	movne	r0, #1
   14d50:	strne	r0, [sp, #8]
   14d54:	ldr	r0, [sp, #28]
   14d58:	add	r4, r4, #1
   14d5c:	cmp	r0, r4
   14d60:	mov	r0, #0
   14d64:	movwls	r0, #15
   14d68:	cmp	r0, #0
   14d6c:	bne	14fe0 <__assert_fail@plt+0x3ac0>
   14d70:	str	r6, [sp, #48]	; 0x30
   14d74:	ldr	r6, [r8, #12]
   14d78:	cmp	r6, #0
   14d7c:	bne	14a50 <__assert_fail@plt+0x3530>
   14d80:	ldr	r0, [sp, #16]
   14d84:	ldr	ip, [sp]
   14d88:	ldr	r6, [sp, #8]
   14d8c:	ldr	r5, [sp, #52]	; 0x34
   14d90:	tst	r0, #1
   14d94:	beq	14da4 <__assert_fail@plt+0x3884>
   14d98:	b	1514c <__assert_fail@plt+0x3c2c>
   14d9c:	mov	r4, #0
   14da0:	mov	r6, #0
   14da4:	ldrb	r0, [sl]
   14da8:	tst	r0, #4
   14dac:	beq	14dd8 <__assert_fail@plt+0x38b8>
   14db0:	ldr	r2, [sp, #40]	; 0x28
   14db4:	ldr	r0, [r5, #36]	; 0x24
   14db8:	ldr	r3, [fp, #-44]	; 0xffffffd4
   14dbc:	cmp	r3, r0
   14dc0:	sub	r1, r2, #1
   14dc4:	mov	r0, #0
   14dc8:	moveq	r2, r1
   14dcc:	cmp	r4, #0
   14dd0:	moveq	r2, r1
   14dd4:	strb	r0, [r2]
   14dd8:	ldr	r0, [sp, #12]
   14ddc:	cmp	r0, #0
   14de0:	movwne	r0, #1
   14de4:	orrs	r0, r0, ip
   14de8:	beq	14e4c <__assert_fail@plt+0x392c>
   14dec:	cmp	r4, #0
   14df0:	bne	14e8c <__assert_fail@plt+0x396c>
   14df4:	ldr	r0, [sp, #4]
   14df8:	cmp	r0, #3
   14dfc:	bne	14e14 <__assert_fail@plt+0x38f4>
   14e00:	ldrh	r0, [r8, #56]	; 0x38
   14e04:	cmp	r0, #4
   14e08:	cmpne	r0, #7
   14e0c:	movne	r0, #6
   14e10:	strhne	r0, [r8, #56]	; 0x38
   14e14:	mov	r6, #0
   14e18:	cmp	r7, #0
   14e1c:	beq	1505c <__assert_fail@plt+0x3b3c>
   14e20:	ldrd	r4, [r7, #8]
   14e24:	cmp	r5, #0
   14e28:	beq	14e34 <__assert_fail@plt+0x3914>
   14e2c:	mov	r0, r5
   14e30:	bl	114fc <closedir@plt>
   14e34:	mov	r0, r7
   14e38:	bl	12f78 <__assert_fail@plt+0x1a58>
   14e3c:	cmp	r4, #0
   14e40:	mov	r7, r4
   14e44:	bne	14e20 <__assert_fail@plt+0x3900>
   14e48:	b	1505c <__assert_fail@plt+0x3b3c>
   14e4c:	ldr	r0, [sp, #4]
   14e50:	cmp	r0, #1
   14e54:	cmpne	r4, #0
   14e58:	bne	14e8c <__assert_fail@plt+0x396c>
   14e5c:	ldr	r0, [r8, #48]	; 0x30
   14e60:	cmp	r0, #0
   14e64:	beq	15004 <__assert_fail@plt+0x3ae4>
   14e68:	ldr	r1, [r8, #4]
   14e6c:	movw	r3, #49444	; 0xc124
   14e70:	mov	r0, r5
   14e74:	mvn	r2, #0
   14e78:	movt	r3, #1
   14e7c:	bl	143c8 <__assert_fail@plt+0x2ea8>
   14e80:	cmp	r0, #0
   14e84:	bne	15014 <__assert_fail@plt+0x3af4>
   14e88:	b	14dec <__assert_fail@plt+0x38cc>
   14e8c:	tst	r6, #1
   14e90:	beq	14ec8 <__assert_fail@plt+0x39a8>
   14e94:	movw	r0, #21900	; 0x558c
   14e98:	mov	r1, r7
   14e9c:	mov	r2, r4
   14ea0:	movt	r0, #1
   14ea4:	str	r0, [r5, #44]	; 0x2c
   14ea8:	mov	r0, r5
   14eac:	bl	1379c <__assert_fail@plt+0x227c>
   14eb0:	mov	r6, r0
   14eb4:	mov	r0, #0
   14eb8:	str	r0, [r5, #44]	; 0x2c
   14ebc:	mov	r0, r6
   14ec0:	sub	sp, fp, #28
   14ec4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ec8:	cmp	r4, #2
   14ecc:	bcc	15088 <__assert_fail@plt+0x3b68>
   14ed0:	ldr	r0, [fp, #-48]	; 0xffffffd0
   14ed4:	ldr	r0, [r0]
   14ed8:	cmp	r0, #0
   14edc:	beq	15098 <__assert_fail@plt+0x3b78>
   14ee0:	mov	r0, r5
   14ee4:	mov	r1, r7
   14ee8:	mov	r2, r4
   14eec:	bl	1379c <__assert_fail@plt+0x227c>
   14ef0:	mov	r6, r0
   14ef4:	mov	r0, r6
   14ef8:	sub	sp, fp, #28
   14efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f00:	ldr	r0, [sp, #36]	; 0x24
   14f04:	ldr	r0, [r0]
   14f08:	cmp	r0, #0
   14f0c:	beq	14f28 <__assert_fail@plt+0x3a08>
   14f10:	str	r0, [r8, #32]
   14f14:	ldr	r0, [sp, #12]
   14f18:	orrs	r0, r0, r4
   14f1c:	mov	r0, #4
   14f20:	movwne	r0, #7
   14f24:	strh	r0, [r8, #56]	; 0x38
   14f28:	ldr	r0, [r8, #12]
   14f2c:	ldr	r6, [sp, #8]
   14f30:	ldr	r7, [fp, #-36]	; 0xffffffdc
   14f34:	ldr	r5, [sp, #52]	; 0x34
   14f38:	cmp	r0, #0
   14f3c:	beq	1513c <__assert_fail@plt+0x3c1c>
   14f40:	bl	114fc <closedir@plt>
   14f44:	mov	r0, #0
   14f48:	ldr	ip, [sp]
   14f4c:	str	r0, [r8, #12]
   14f50:	ldr	r0, [sp, #16]
   14f54:	tst	r0, #1
   14f58:	beq	14da4 <__assert_fail@plt+0x3884>
   14f5c:	b	1514c <__assert_fail@plt+0x3c2c>
   14f60:	mov	r0, r6
   14f64:	bl	12f78 <__assert_fail@plt+0x1a58>
   14f68:	ldr	r6, [fp, #-36]	; 0xffffffdc
   14f6c:	ldr	r7, [sp, #24]
   14f70:	cmp	r6, #0
   14f74:	beq	14fa0 <__assert_fail@plt+0x3a80>
   14f78:	ldrd	r4, [r6, #8]
   14f7c:	cmp	r5, #0
   14f80:	beq	14f8c <__assert_fail@plt+0x3a6c>
   14f84:	mov	r0, r5
   14f88:	bl	114fc <closedir@plt>
   14f8c:	mov	r0, r6
   14f90:	bl	12f78 <__assert_fail@plt+0x1a58>
   14f94:	cmp	r4, #0
   14f98:	mov	r6, r4
   14f9c:	bne	14f78 <__assert_fail@plt+0x3a58>
   14fa0:	ldr	r0, [r7, #12]
   14fa4:	bl	114fc <closedir@plt>
   14fa8:	ldr	r1, [sp, #32]
   14fac:	mov	r6, #0
   14fb0:	mov	r0, #7
   14fb4:	str	r6, [r7, #12]
   14fb8:	strh	r0, [r7, #56]	; 0x38
   14fbc:	ldr	r0, [r1]
   14fc0:	orr	r0, r0, #8192	; 0x2000
   14fc4:	str	r0, [r1]
   14fc8:	ldr	r1, [sp, #36]	; 0x24
   14fcc:	mov	r0, #36	; 0x24
   14fd0:	str	r0, [r1]
   14fd4:	mov	r0, r6
   14fd8:	sub	sp, fp, #28
   14fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14fe0:	ldr	ip, [sp]
   14fe4:	cmp	r0, #15
   14fe8:	bne	15224 <__assert_fail@plt+0x3d04>
   14fec:	ldr	r6, [sp, #8]
   14ff0:	ldr	r5, [sp, #52]	; 0x34
   14ff4:	ldr	r0, [sp, #16]
   14ff8:	tst	r0, #1
   14ffc:	beq	14da4 <__assert_fail@plt+0x3884>
   15000:	b	1514c <__assert_fail@plt+0x3c2c>
   15004:	mov	r0, r5
   15008:	bl	1524c <__assert_fail@plt+0x3d2c>
   1500c:	cmp	r0, #0
   15010:	beq	14dec <__assert_fail@plt+0x38cc>
   15014:	mov	r0, #7
   15018:	mov	r6, #0
   1501c:	cmp	r7, #0
   15020:	strh	r0, [r8, #56]	; 0x38
   15024:	ldr	r0, [sl]
   15028:	orr	r0, r0, #8192	; 0x2000
   1502c:	str	r0, [sl]
   15030:	beq	1505c <__assert_fail@plt+0x3b3c>
   15034:	ldrd	r4, [r7, #8]
   15038:	cmp	r5, #0
   1503c:	beq	15048 <__assert_fail@plt+0x3b28>
   15040:	mov	r0, r5
   15044:	bl	114fc <closedir@plt>
   15048:	mov	r0, r7
   1504c:	bl	12f78 <__assert_fail@plt+0x1a58>
   15050:	cmp	r4, #0
   15054:	mov	r7, r4
   15058:	bne	15034 <__assert_fail@plt+0x3b14>
   1505c:	mov	r0, r6
   15060:	sub	sp, fp, #28
   15064:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15068:	mov	r0, r4
   1506c:	bl	12f78 <__assert_fail@plt+0x1a58>
   15070:	ldr	r1, [sp, #36]	; 0x24
   15074:	mov	r0, #0
   15078:	str	r0, [r5, #24]
   1507c:	mov	r0, #36	; 0x24
   15080:	str	r0, [r1]
   15084:	b	150b8 <__assert_fail@plt+0x3b98>
   15088:	mov	r6, r7
   1508c:	mov	r0, r6
   15090:	sub	sp, fp, #28
   15094:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15098:	mov	r6, r7
   1509c:	mov	r0, r6
   150a0:	sub	sp, fp, #28
   150a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150a8:	ldr	r0, [r5, #24]
   150ac:	bl	12f78 <__assert_fail@plt+0x1a58>
   150b0:	mov	r0, #0
   150b4:	str	r0, [r5, #24]
   150b8:	ldr	r8, [sp, #24]
   150bc:	ldr	r0, [sp, #36]	; 0x24
   150c0:	ldr	r4, [r0]
   150c4:	mov	r0, r6
   150c8:	bl	12f78 <__assert_fail@plt+0x1a58>
   150cc:	ldr	r5, [fp, #-36]	; 0xffffffdc
   150d0:	cmp	r5, #0
   150d4:	beq	15100 <__assert_fail@plt+0x3be0>
   150d8:	ldrd	r6, [r5, #8]
   150dc:	cmp	r7, #0
   150e0:	beq	150ec <__assert_fail@plt+0x3bcc>
   150e4:	mov	r0, r7
   150e8:	bl	114fc <closedir@plt>
   150ec:	mov	r0, r5
   150f0:	bl	12f78 <__assert_fail@plt+0x1a58>
   150f4:	cmp	r6, #0
   150f8:	mov	r5, r6
   150fc:	bne	150d8 <__assert_fail@plt+0x3bb8>
   15100:	ldr	r0, [r8, #12]
   15104:	bl	114fc <closedir@plt>
   15108:	ldr	r1, [sp, #32]
   1510c:	mov	r6, #0
   15110:	mov	r0, #7
   15114:	str	r6, [r8, #12]
   15118:	strh	r0, [r8, #56]	; 0x38
   1511c:	ldr	r0, [r1]
   15120:	orr	r0, r0, #8192	; 0x2000
   15124:	str	r0, [r1]
   15128:	ldr	r0, [sp, #36]	; 0x24
   1512c:	str	r4, [r0]
   15130:	mov	r0, r6
   15134:	sub	sp, fp, #28
   15138:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1513c:	ldr	ip, [sp]
   15140:	ldr	r0, [sp, #16]
   15144:	tst	r0, #1
   15148:	beq	14da4 <__assert_fail@plt+0x3884>
   1514c:	ldr	r1, [r5, #4]
   15150:	ldr	r0, [r5, #24]
   15154:	cmp	r1, #0
   15158:	beq	15188 <__assert_fail@plt+0x3c68>
   1515c:	ldr	r2, [r1, #24]
   15160:	add	r3, r1, #168	; 0xa8
   15164:	cmp	r2, r3
   15168:	ldrne	r3, [r1, #28]
   1516c:	subne	r2, r2, r3
   15170:	addne	r2, r0, r2
   15174:	strne	r2, [r1, #24]
   15178:	str	r0, [r1, #28]
   1517c:	ldr	r1, [r1, #8]
   15180:	cmp	r1, #0
   15184:	bne	1515c <__assert_fail@plt+0x3c3c>
   15188:	ldr	r1, [r7, #48]	; 0x30
   1518c:	cmp	r1, #0
   15190:	blt	14da4 <__assert_fail@plt+0x3884>
   15194:	mov	r1, r7
   15198:	ldr	r2, [r1, #24]
   1519c:	add	r3, r1, #168	; 0xa8
   151a0:	cmp	r2, r3
   151a4:	ldrne	r3, [r1, #28]
   151a8:	subne	r2, r2, r3
   151ac:	addne	r2, r0, r2
   151b0:	strne	r2, [r1, #24]
   151b4:	str	r0, [r1, #28]
   151b8:	ldr	r2, [r1, #8]
   151bc:	cmp	r2, #0
   151c0:	ldreq	r2, [r1, #4]
   151c4:	ldr	r1, [r2, #48]	; 0x30
   151c8:	cmn	r1, #1
   151cc:	mov	r1, r2
   151d0:	bgt	15198 <__assert_fail@plt+0x3c78>
   151d4:	b	14da4 <__assert_fail@plt+0x3884>
   151d8:	ldr	r1, [fp, #-32]	; 0xffffffe0
   151dc:	mov	r0, r8
   151e0:	bl	155c4 <__assert_fail@plt+0x40a4>
   151e4:	movw	r1, #26984	; 0x6968
   151e8:	cmp	r0, r1
   151ec:	ble	15234 <__assert_fail@plt+0x3d14>
   151f0:	movw	r1, #26985	; 0x6969
   151f4:	cmp	r0, r1
   151f8:	movwne	r1, #16719	; 0x414f
   151fc:	movtne	r1, #21318	; 0x5346
   15200:	cmpne	r0, r1
   15204:	beq	148e8 <__assert_fail@plt+0x33c8>
   15208:	movw	r1, #40864	; 0x9fa0
   1520c:	cmp	r0, r1
   15210:	beq	148e8 <__assert_fail@plt+0x33c8>
   15214:	b	148b8 <__assert_fail@plt+0x3398>
   15218:	bl	113d0 <__errno_location@plt>
   1521c:	mov	r1, #12
   15220:	str	r1, [r0]
   15224:	mov	r6, #0
   15228:	mov	r0, r6
   1522c:	sub	sp, fp, #28
   15230:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15234:	movw	r1, #19778	; 0x4d42
   15238:	movt	r1, #65363	; 0xff53
   1523c:	cmp	r0, r1
   15240:	cmpne	r0, #0
   15244:	beq	148e8 <__assert_fail@plt+0x33c8>
   15248:	b	148b8 <__assert_fail@plt+0x3398>
   1524c:	push	{r4, r5, fp, lr}
   15250:	add	fp, sp, #8
   15254:	mov	r5, r0
   15258:	ldr	r0, [r0, #48]	; 0x30
   1525c:	mov	r4, #0
   15260:	tst	r0, #4
   15264:	bne	152a8 <__assert_fail@plt+0x3d88>
   15268:	tst	r0, #512	; 0x200
   1526c:	bne	15288 <__assert_fail@plt+0x3d68>
   15270:	ldr	r0, [r5, #28]
   15274:	bl	11490 <fchdir@plt>
   15278:	mov	r4, r0
   1527c:	cmp	r0, #0
   15280:	movwne	r4, #1
   15284:	b	152a8 <__assert_fail@plt+0x3d88>
   15288:	ldr	r1, [r5, #32]
   1528c:	add	r0, r5, #60	; 0x3c
   15290:	bl	16b40 <__assert_fail@plt+0x5620>
   15294:	cmp	r0, #0
   15298:	blt	152a0 <__assert_fail@plt+0x3d80>
   1529c:	bl	114e4 <close@plt>
   152a0:	mvn	r0, #99	; 0x63
   152a4:	str	r0, [r5, #32]
   152a8:	add	r5, r5, #60	; 0x3c
   152ac:	b	152b4 <__assert_fail@plt+0x3d94>
   152b0:	bl	114e4 <close@plt>
   152b4:	mov	r0, r5
   152b8:	bl	16b38 <__assert_fail@plt+0x5618>
   152bc:	cmp	r0, #0
   152c0:	movne	r0, r4
   152c4:	popne	{r4, r5, fp, pc}
   152c8:	mov	r0, r5
   152cc:	bl	16b8c <__assert_fail@plt+0x566c>
   152d0:	cmp	r0, #0
   152d4:	bge	152b0 <__assert_fail@plt+0x3d90>
   152d8:	b	152b4 <__assert_fail@plt+0x3d94>
   152dc:	cmp	r2, #5
   152e0:	movcc	r0, #0
   152e4:	strhcc	r2, [r1, #60]	; 0x3c
   152e8:	bxcc	lr
   152ec:	push	{fp, lr}
   152f0:	mov	fp, sp
   152f4:	bl	113d0 <__errno_location@plt>
   152f8:	mov	r1, #22
   152fc:	str	r1, [r0]
   15300:	mov	r0, #1
   15304:	pop	{fp, pc}
   15308:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1530c:	add	fp, sp, #28
   15310:	sub	sp, sp, #4
   15314:	mov	r9, r0
   15318:	orr	r0, r1, #4096	; 0x1000
   1531c:	cmp	r0, #4096	; 0x1000
   15320:	bne	15368 <__assert_fail@plt+0x3e48>
   15324:	ldr	r8, [r9]
   15328:	mov	r7, r1
   1532c:	bl	113d0 <__errno_location@plt>
   15330:	mov	r5, #0
   15334:	mov	sl, r0
   15338:	str	r5, [r0]
   1533c:	ldrb	r0, [r9, #49]	; 0x31
   15340:	tst	r0, #32
   15344:	bne	1535c <__assert_fail@plt+0x3e3c>
   15348:	ldrh	r0, [r8, #56]	; 0x38
   1534c:	cmp	r0, #1
   15350:	beq	15384 <__assert_fail@plt+0x3e64>
   15354:	cmp	r0, #9
   15358:	ldreq	r5, [r8, #8]
   1535c:	mov	r0, r5
   15360:	sub	sp, fp, #28
   15364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15368:	bl	113d0 <__errno_location@plt>
   1536c:	mov	r1, #22
   15370:	mov	r5, #0
   15374:	str	r1, [r0]
   15378:	mov	r0, r5
   1537c:	sub	sp, fp, #28
   15380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15384:	ldr	r6, [r9, #4]
   15388:	cmp	r6, #0
   1538c:	beq	153bc <__assert_fail@plt+0x3e9c>
   15390:	ldr	r4, [r6, #8]
   15394:	ldr	r1, [r6, #12]
   15398:	cmp	r1, #0
   1539c:	beq	153a8 <__assert_fail@plt+0x3e88>
   153a0:	mov	r0, r1
   153a4:	bl	114fc <closedir@plt>
   153a8:	mov	r0, r6
   153ac:	bl	12f78 <__assert_fail@plt+0x1a58>
   153b0:	cmp	r4, #0
   153b4:	mov	r6, r4
   153b8:	bne	15390 <__assert_fail@plt+0x3e70>
   153bc:	cmp	r7, #4096	; 0x1000
   153c0:	mov	r4, #1
   153c4:	ldreq	r0, [r9, #48]	; 0x30
   153c8:	moveq	r4, #2
   153cc:	orreq	r0, r0, #4096	; 0x1000
   153d0:	streq	r0, [r9, #48]	; 0x30
   153d4:	ldr	r0, [r8, #48]	; 0x30
   153d8:	cmp	r0, #0
   153dc:	bne	15434 <__assert_fail@plt+0x3f14>
   153e0:	ldr	r0, [r8, #24]
   153e4:	ldrb	r0, [r0]
   153e8:	cmp	r0, #47	; 0x2f
   153ec:	beq	15434 <__assert_fail@plt+0x3f14>
   153f0:	ldr	r0, [r9, #48]	; 0x30
   153f4:	tst	r0, #4
   153f8:	bne	15434 <__assert_fail@plt+0x3f14>
   153fc:	mov	r1, #32768	; 0x8000
   15400:	tst	r0, #512	; 0x200
   15404:	and	r1, r1, r0, lsl #11
   15408:	orr	r1, r1, #18688	; 0x4900
   1540c:	orr	r2, r1, #524288	; 0x80000
   15410:	bne	15454 <__assert_fail@plt+0x3f34>
   15414:	movw	r0, #49445	; 0xc125
   15418:	mov	r1, r2
   1541c:	movt	r0, #1
   15420:	bl	1ab2c <__assert_fail@plt+0x960c>
   15424:	mov	r8, r0
   15428:	cmn	r0, #1
   1542c:	bgt	15470 <__assert_fail@plt+0x3f50>
   15430:	b	154b8 <__assert_fail@plt+0x3f98>
   15434:	mov	r0, r9
   15438:	mov	r1, r4
   1543c:	bl	14670 <__assert_fail@plt+0x3150>
   15440:	mov	r5, r0
   15444:	str	r0, [r9, #4]
   15448:	mov	r0, r5
   1544c:	sub	sp, fp, #28
   15450:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15454:	ldr	r0, [r9, #32]
   15458:	movw	r1, #49445	; 0xc125
   1545c:	movt	r1, #1
   15460:	bl	16c40 <__assert_fail@plt+0x5720>
   15464:	mov	r8, r0
   15468:	cmn	r0, #1
   1546c:	ble	154b8 <__assert_fail@plt+0x3f98>
   15470:	mov	r0, r9
   15474:	mov	r1, r4
   15478:	bl	14670 <__assert_fail@plt+0x3150>
   1547c:	str	r0, [r9, #4]
   15480:	ldrb	r0, [r9, #49]	; 0x31
   15484:	tst	r0, #2
   15488:	bne	154cc <__assert_fail@plt+0x3fac>
   1548c:	mov	r0, r8
   15490:	bl	11490 <fchdir@plt>
   15494:	cmp	r0, #0
   15498:	beq	15508 <__assert_fail@plt+0x3fe8>
   1549c:	ldr	r4, [sl]
   154a0:	mov	r0, r8
   154a4:	bl	114e4 <close@plt>
   154a8:	str	r4, [sl]
   154ac:	mov	r0, r5
   154b0:	sub	sp, fp, #28
   154b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154b8:	mov	r5, #0
   154bc:	str	r5, [r9, #4]
   154c0:	mov	r0, r5
   154c4:	sub	sp, fp, #28
   154c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154cc:	ldr	r1, [r9, #32]
   154d0:	cmp	r1, r8
   154d4:	bne	154e0 <__assert_fail@plt+0x3fc0>
   154d8:	cmn	r1, #100	; 0x64
   154dc:	bne	15520 <__assert_fail@plt+0x4000>
   154e0:	add	r0, r9, #60	; 0x3c
   154e4:	bl	16b40 <__assert_fail@plt+0x5620>
   154e8:	cmp	r0, #0
   154ec:	blt	154f4 <__assert_fail@plt+0x3fd4>
   154f0:	bl	114e4 <close@plt>
   154f4:	str	r8, [r9, #32]
   154f8:	ldr	r5, [r9, #4]
   154fc:	mov	r0, r5
   15500:	sub	sp, fp, #28
   15504:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15508:	mov	r0, r8
   1550c:	bl	114e4 <close@plt>
   15510:	ldr	r5, [r9, #4]
   15514:	mov	r0, r5
   15518:	sub	sp, fp, #28
   1551c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15520:	bl	114d8 <abort@plt>
   15524:	push	{fp, lr}
   15528:	mov	fp, sp
   1552c:	mov	r2, r1
   15530:	ldrd	r0, [r0, #8]
   15534:	mov	r3, #0
   15538:	bl	1ae68 <__assert_fail@plt+0x9948>
   1553c:	mov	r0, r2
   15540:	pop	{fp, pc}
   15544:	push	{r4, r5, fp, lr}
   15548:	add	fp, sp, #8
   1554c:	ldrd	r2, [r1, #8]
   15550:	ldrd	r4, [r0, #8]
   15554:	eor	r3, r5, r3
   15558:	eor	r2, r4, r2
   1555c:	orrs	r2, r2, r3
   15560:	mov	r2, #0
   15564:	bne	15584 <__assert_fail@plt+0x4064>
   15568:	ldrd	r2, [r1]
   1556c:	ldrd	r0, [r0]
   15570:	eor	r1, r1, r3
   15574:	eor	r0, r0, r2
   15578:	orr	r0, r0, r1
   1557c:	clz	r0, r0
   15580:	lsr	r2, r0, #5
   15584:	mov	r0, r2
   15588:	pop	{r4, r5, fp, pc}
   1558c:	push	{r4, r5, fp, lr}
   15590:	add	fp, sp, #8
   15594:	ldr	r0, [r0]
   15598:	ldrd	r2, [r0, #160]	; 0xa0
   1559c:	ldr	r0, [r1]
   155a0:	ldrd	r4, [r0, #160]	; 0xa0
   155a4:	mov	r0, #0
   155a8:	subs	r1, r4, r2
   155ac:	sbcs	r1, r5, r3
   155b0:	movwcc	r0, #1
   155b4:	subs	r1, r2, r4
   155b8:	sbcs	r1, r3, r5
   155bc:	subcc	r0, r0, #1
   155c0:	pop	{r4, r5, fp, pc}
   155c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   155c8:	add	fp, sp, #24
   155cc:	sub	sp, sp, #96	; 0x60
   155d0:	ldr	r7, [r0, #44]	; 0x2c
   155d4:	mov	r4, r0
   155d8:	mov	r5, #0
   155dc:	ldrb	r0, [r7, #49]	; 0x31
   155e0:	tst	r0, #2
   155e4:	beq	15694 <__assert_fail@plt+0x4174>
   155e8:	ldr	r6, [r7, #52]	; 0x34
   155ec:	mov	r9, r1
   155f0:	cmp	r6, #0
   155f4:	bne	15634 <__assert_fail@plt+0x4114>
   155f8:	movw	r0, #12152	; 0x2f78
   155fc:	movw	r2, #22272	; 0x5700
   15600:	movw	r3, #22304	; 0x5720
   15604:	mov	r1, #0
   15608:	mov	r8, #0
   1560c:	movt	r0, #1
   15610:	movt	r2, #1
   15614:	movt	r3, #1
   15618:	str	r0, [sp]
   1561c:	mov	r0, #13
   15620:	bl	15be0 <__assert_fail@plt+0x46c0>
   15624:	mov	r6, r0
   15628:	cmp	r0, #0
   1562c:	str	r0, [r7, #52]	; 0x34
   15630:	beq	15674 <__assert_fail@plt+0x4154>
   15634:	ldrd	r0, [r4, #64]	; 0x40
   15638:	str	r1, [sp, #12]
   1563c:	str	r0, [sp, #8]
   15640:	add	r1, sp, #8
   15644:	mov	r0, r6
   15648:	bl	15918 <__assert_fail@plt+0x43f8>
   1564c:	cmp	r0, #0
   15650:	beq	15664 <__assert_fail@plt+0x4144>
   15654:	ldr	r5, [r0, #8]
   15658:	mov	r0, r5
   1565c:	sub	sp, fp, #24
   15660:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15664:	mov	r8, #1
   15668:	cmp	r9, #0
   1566c:	bge	15680 <__assert_fail@plt+0x4160>
   15670:	b	15694 <__assert_fail@plt+0x4174>
   15674:	mov	r6, #0
   15678:	cmp	r9, #0
   1567c:	blt	15694 <__assert_fail@plt+0x4174>
   15680:	add	r1, sp, #8
   15684:	mov	r0, r9
   15688:	bl	111e4 <fstatfs64@plt>
   1568c:	cmp	r0, #0
   15690:	beq	156a0 <__assert_fail@plt+0x4180>
   15694:	mov	r0, r5
   15698:	sub	sp, fp, #24
   1569c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   156a0:	cmp	r8, #0
   156a4:	beq	156f0 <__assert_fail@plt+0x41d0>
   156a8:	mov	r0, #16
   156ac:	bl	1a6b4 <__assert_fail@plt+0x9194>
   156b0:	cmp	r0, #0
   156b4:	beq	156f0 <__assert_fail@plt+0x41d0>
   156b8:	mov	r5, r0
   156bc:	ldrd	r0, [r4, #64]	; 0x40
   156c0:	ldr	r2, [sp, #8]
   156c4:	stm	r5, {r0, r1, r2}
   156c8:	mov	r0, r6
   156cc:	mov	r1, r5
   156d0:	bl	16818 <__assert_fail@plt+0x52f8>
   156d4:	cmp	r0, #0
   156d8:	beq	156e8 <__assert_fail@plt+0x41c8>
   156dc:	cmp	r0, r5
   156e0:	beq	156f0 <__assert_fail@plt+0x41d0>
   156e4:	bl	114d8 <abort@plt>
   156e8:	mov	r0, r5
   156ec:	bl	12f78 <__assert_fail@plt+0x1a58>
   156f0:	ldr	r5, [sp, #8]
   156f4:	mov	r0, r5
   156f8:	sub	sp, fp, #24
   156fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15700:	push	{fp, lr}
   15704:	mov	fp, sp
   15708:	mov	r2, r1
   1570c:	ldrd	r0, [r0]
   15710:	mov	r3, #0
   15714:	bl	1ae68 <__assert_fail@plt+0x9948>
   15718:	mov	r0, r2
   1571c:	pop	{fp, pc}
   15720:	ldrd	r2, [r1]
   15724:	ldrd	r0, [r0]
   15728:	eor	r1, r1, r3
   1572c:	eor	r0, r0, r2
   15730:	orr	r0, r0, r1
   15734:	clz	r0, r0
   15738:	lsr	r0, r0, #5
   1573c:	bx	lr
   15740:	ldr	r0, [r0, #8]
   15744:	bx	lr
   15748:	ldr	r0, [r0, #12]
   1574c:	bx	lr
   15750:	ldr	r0, [r0, #16]
   15754:	bx	lr
   15758:	ldm	r0, {r2, ip}
   1575c:	mov	r0, #0
   15760:	cmp	r2, ip
   15764:	bxcs	lr
   15768:	mov	r0, #0
   1576c:	ldr	r1, [r2]
   15770:	cmp	r1, #0
   15774:	beq	15798 <__assert_fail@plt+0x4278>
   15778:	mov	r3, #0
   1577c:	mov	r1, r2
   15780:	ldr	r1, [r1, #4]
   15784:	add	r3, r3, #1
   15788:	cmp	r1, #0
   1578c:	bne	15780 <__assert_fail@plt+0x4260>
   15790:	cmp	r3, r0
   15794:	movhi	r0, r3
   15798:	add	r2, r2, #8
   1579c:	cmp	r2, ip
   157a0:	bcc	1576c <__assert_fail@plt+0x424c>
   157a4:	bx	lr
   157a8:	push	{fp, lr}
   157ac:	mov	fp, sp
   157b0:	ldm	r0, {r3, ip}
   157b4:	mov	lr, #0
   157b8:	mov	r1, #0
   157bc:	cmp	r3, ip
   157c0:	bcs	157fc <__assert_fail@plt+0x42dc>
   157c4:	mov	r1, #0
   157c8:	mov	lr, #0
   157cc:	ldr	r2, [r3]
   157d0:	cmp	r2, #0
   157d4:	beq	157f0 <__assert_fail@plt+0x42d0>
   157d8:	mov	r2, r3
   157dc:	ldr	r2, [r2, #4]
   157e0:	add	r1, r1, #1
   157e4:	cmp	r2, #0
   157e8:	bne	157dc <__assert_fail@plt+0x42bc>
   157ec:	add	lr, lr, #1
   157f0:	add	r3, r3, #8
   157f4:	cmp	r3, ip
   157f8:	bcc	157cc <__assert_fail@plt+0x42ac>
   157fc:	ldr	r2, [r0, #12]
   15800:	cmp	lr, r2
   15804:	bne	1581c <__assert_fail@plt+0x42fc>
   15808:	ldr	r2, [r0, #16]
   1580c:	mov	r0, #1
   15810:	cmp	r1, r2
   15814:	movne	r0, #0
   15818:	pop	{fp, pc}
   1581c:	mov	r0, #0
   15820:	pop	{fp, pc}
   15824:	nop	{0}
   15828:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1582c:	add	fp, sp, #24
   15830:	sub	sp, sp, #8
   15834:	ldr	r6, [r0]
   15838:	ldmib	r0, {r2, r7, r8}
   1583c:	ldr	r3, [r0, #16]
   15840:	mov	r4, r1
   15844:	mov	r5, #0
   15848:	cmp	r6, r2
   1584c:	bcs	1588c <__assert_fail@plt+0x436c>
   15850:	mov	r5, #0
   15854:	ldr	r0, [r6]
   15858:	cmp	r0, #0
   1585c:	beq	15880 <__assert_fail@plt+0x4360>
   15860:	mov	r0, #0
   15864:	mov	r1, r6
   15868:	ldr	r1, [r1, #4]
   1586c:	add	r0, r0, #1
   15870:	cmp	r1, #0
   15874:	bne	15868 <__assert_fail@plt+0x4348>
   15878:	cmp	r0, r5
   1587c:	movhi	r5, r0
   15880:	add	r6, r6, #8
   15884:	cmp	r6, r2
   15888:	bcc	15854 <__assert_fail@plt+0x4334>
   1588c:	movw	r2, #49504	; 0xc160
   15890:	mov	r0, r4
   15894:	mov	r1, #1
   15898:	movt	r2, #1
   1589c:	bl	1140c <__fprintf_chk@plt>
   158a0:	movw	r2, #49528	; 0xc178
   158a4:	mov	r0, r4
   158a8:	mov	r1, #1
   158ac:	mov	r3, r7
   158b0:	movt	r2, #1
   158b4:	bl	1140c <__fprintf_chk@plt>
   158b8:	vldr	d16, [pc, #80]	; 15910 <__assert_fail@plt+0x43f0>
   158bc:	vmov	s0, r8
   158c0:	movw	r2, #49552	; 0xc190
   158c4:	mov	r0, r4
   158c8:	mov	r1, #1
   158cc:	mov	r3, r8
   158d0:	vcvt.f64.u32	d17, s0
   158d4:	vmov	s0, r7
   158d8:	movt	r2, #1
   158dc:	vcvt.f64.u32	d18, s0
   158e0:	vmul.f64	d16, d17, d16
   158e4:	vdiv.f64	d16, d16, d18
   158e8:	vstr	d16, [sp]
   158ec:	bl	1140c <__fprintf_chk@plt>
   158f0:	movw	r2, #49585	; 0xc1b1
   158f4:	mov	r0, r4
   158f8:	mov	r1, #1
   158fc:	mov	r3, r5
   15900:	movt	r2, #1
   15904:	sub	sp, fp, #24
   15908:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1590c:	b	1140c <__fprintf_chk@plt>
   15910:	andeq	r0, r0, r0
   15914:	subsmi	r0, r9, r0
   15918:	push	{r4, r5, r6, r7, fp, lr}
   1591c:	add	fp, sp, #16
   15920:	mov	r4, r1
   15924:	ldr	r1, [r0, #8]
   15928:	ldr	r2, [r0, #24]
   1592c:	mov	r5, r0
   15930:	mov	r0, r4
   15934:	blx	r2
   15938:	ldr	r1, [r5, #8]
   1593c:	cmp	r0, r1
   15940:	bcs	159ac <__assert_fail@plt+0x448c>
   15944:	ldr	r7, [r5]
   15948:	mov	r6, #0
   1594c:	ldr	r1, [r7, r0, lsl #3]!
   15950:	cmp	r1, #0
   15954:	cmpne	r7, #0
   15958:	bne	15968 <__assert_fail@plt+0x4448>
   1595c:	mov	r0, r6
   15960:	pop	{r4, r5, r6, r7, fp, pc}
   15964:	ldr	r1, [r7]
   15968:	cmp	r1, r4
   1596c:	beq	15994 <__assert_fail@plt+0x4474>
   15970:	ldr	r2, [r5, #28]
   15974:	mov	r0, r4
   15978:	blx	r2
   1597c:	cmp	r0, #0
   15980:	bne	159a0 <__assert_fail@plt+0x4480>
   15984:	ldr	r7, [r7, #4]
   15988:	cmp	r7, #0
   1598c:	bne	15964 <__assert_fail@plt+0x4444>
   15990:	b	1595c <__assert_fail@plt+0x443c>
   15994:	mov	r6, r4
   15998:	mov	r0, r6
   1599c:	pop	{r4, r5, r6, r7, fp, pc}
   159a0:	ldr	r6, [r7]
   159a4:	mov	r0, r6
   159a8:	pop	{r4, r5, r6, r7, fp, pc}
   159ac:	bl	114d8 <abort@plt>
   159b0:	ldr	r1, [r0, #16]
   159b4:	cmp	r1, #0
   159b8:	moveq	r0, #0
   159bc:	bxeq	lr
   159c0:	ldm	r0, {r1, r2}
   159c4:	cmp	r1, r2
   159c8:	bcs	159e0 <__assert_fail@plt+0x44c0>
   159cc:	ldr	r0, [r1], #8
   159d0:	cmp	r0, #0
   159d4:	bxne	lr
   159d8:	cmp	r1, r2
   159dc:	bcc	159cc <__assert_fail@plt+0x44ac>
   159e0:	push	{fp, lr}
   159e4:	mov	fp, sp
   159e8:	bl	114d8 <abort@plt>
   159ec:	push	{r4, r5, fp, lr}
   159f0:	add	fp, sp, #8
   159f4:	mov	r5, r1
   159f8:	ldr	r1, [r0, #8]
   159fc:	ldr	r2, [r0, #24]
   15a00:	mov	r4, r0
   15a04:	mov	r0, r5
   15a08:	blx	r2
   15a0c:	ldr	r1, [r4, #8]
   15a10:	cmp	r0, r1
   15a14:	bcs	15a70 <__assert_fail@plt+0x4550>
   15a18:	ldr	r1, [r4]
   15a1c:	add	r2, r1, r0, lsl #3
   15a20:	ldr	r3, [r2]
   15a24:	ldr	r2, [r2, #4]
   15a28:	cmp	r3, r5
   15a2c:	beq	15a3c <__assert_fail@plt+0x451c>
   15a30:	cmp	r2, #0
   15a34:	bne	15a20 <__assert_fail@plt+0x4500>
   15a38:	b	15a48 <__assert_fail@plt+0x4528>
   15a3c:	cmp	r2, #0
   15a40:	ldrne	r0, [r2]
   15a44:	popne	{r4, r5, fp, pc}
   15a48:	ldr	r2, [r4, #4]
   15a4c:	add	r0, r1, r0, lsl #3
   15a50:	add	r1, r0, #8
   15a54:	cmp	r1, r2
   15a58:	movcs	r0, #0
   15a5c:	popcs	{r4, r5, fp, pc}
   15a60:	ldr	r0, [r1], #8
   15a64:	cmp	r0, #0
   15a68:	popne	{r4, r5, fp, pc}
   15a6c:	b	15a54 <__assert_fail@plt+0x4534>
   15a70:	bl	114d8 <abort@plt>
   15a74:	push	{r4, r5, fp, lr}
   15a78:	add	fp, sp, #8
   15a7c:	ldm	r0, {r5, lr}
   15a80:	mov	ip, r0
   15a84:	mov	r0, #0
   15a88:	cmp	r5, lr
   15a8c:	bcs	15ae8 <__assert_fail@plt+0x45c8>
   15a90:	mov	r0, #0
   15a94:	ldr	r3, [r5]
   15a98:	cmp	r3, #0
   15a9c:	cmpne	r5, #0
   15aa0:	bne	15ab4 <__assert_fail@plt+0x4594>
   15aa4:	add	r5, r5, #8
   15aa8:	cmp	r5, lr
   15aac:	bcc	15a94 <__assert_fail@plt+0x4574>
   15ab0:	b	15ae8 <__assert_fail@plt+0x45c8>
   15ab4:	mov	r3, r5
   15ab8:	cmp	r0, r2
   15abc:	popcs	{r4, r5, fp, pc}
   15ac0:	ldr	r4, [r3]
   15ac4:	str	r4, [r1, r0, lsl #2]
   15ac8:	add	r0, r0, #1
   15acc:	ldr	r3, [r3, #4]
   15ad0:	cmp	r3, #0
   15ad4:	bne	15ab8 <__assert_fail@plt+0x4598>
   15ad8:	ldr	lr, [ip, #4]
   15adc:	add	r5, r5, #8
   15ae0:	cmp	r5, lr
   15ae4:	bcc	15a94 <__assert_fail@plt+0x4574>
   15ae8:	pop	{r4, r5, fp, pc}
   15aec:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15af0:	add	fp, sp, #24
   15af4:	mov	r5, r1
   15af8:	ldr	r4, [r0]
   15afc:	ldr	r1, [r0, #4]
   15b00:	mov	r6, #0
   15b04:	cmp	r4, r1
   15b08:	bcs	15b84 <__assert_fail@plt+0x4664>
   15b0c:	mov	r9, r2
   15b10:	mov	r8, r0
   15b14:	mov	r6, #0
   15b18:	ldr	r0, [r4]
   15b1c:	cmp	r0, #0
   15b20:	cmpne	r4, #0
   15b24:	bne	15b38 <__assert_fail@plt+0x4618>
   15b28:	add	r4, r4, #8
   15b2c:	cmp	r4, r1
   15b30:	bcc	15b18 <__assert_fail@plt+0x45f8>
   15b34:	b	15b84 <__assert_fail@plt+0x4664>
   15b38:	mov	r1, r9
   15b3c:	blx	r5
   15b40:	cmp	r0, #0
   15b44:	beq	15b84 <__assert_fail@plt+0x4664>
   15b48:	mov	r7, r4
   15b4c:	ldr	r7, [r7, #4]
   15b50:	add	r6, r6, #1
   15b54:	cmp	r7, #0
   15b58:	beq	15b74 <__assert_fail@plt+0x4654>
   15b5c:	ldr	r0, [r7]
   15b60:	mov	r1, r9
   15b64:	blx	r5
   15b68:	cmp	r0, #0
   15b6c:	bne	15b4c <__assert_fail@plt+0x462c>
   15b70:	b	15b84 <__assert_fail@plt+0x4664>
   15b74:	ldr	r1, [r8, #4]
   15b78:	add	r4, r4, #8
   15b7c:	cmp	r4, r1
   15b80:	bcc	15b18 <__assert_fail@plt+0x45f8>
   15b84:	mov	r0, r6
   15b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15b8c:	ldrb	r2, [r0]
   15b90:	cmp	r2, #0
   15b94:	moveq	r0, #0
   15b98:	bxeq	lr
   15b9c:	add	r3, r0, #1
   15ba0:	mov	r0, #0
   15ba4:	rsb	r0, r0, r0, lsl #5
   15ba8:	uxtab	r0, r0, r2
   15bac:	udiv	r2, r0, r1
   15bb0:	mls	r0, r2, r1, r0
   15bb4:	ldrb	r2, [r3], #1
   15bb8:	cmp	r2, #0
   15bbc:	bne	15ba4 <__assert_fail@plt+0x4684>
   15bc0:	bx	lr
   15bc4:	movw	r1, #49616	; 0xc1d0
   15bc8:	movt	r1, #1
   15bcc:	vld1.32	{d16-d17}, [r1]!
   15bd0:	ldr	r1, [r1]
   15bd4:	vst1.32	{d16-d17}, [r0]!
   15bd8:	str	r1, [r0]
   15bdc:	bx	lr
   15be0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   15be4:	add	fp, sp, #24
   15be8:	movw	r9, #24108	; 0x5e2c
   15bec:	movw	r5, #24088	; 0x5e18
   15bf0:	cmp	r3, #0
   15bf4:	mov	r6, r0
   15bf8:	mov	r0, #40	; 0x28
   15bfc:	mov	r7, r1
   15c00:	movt	r9, #1
   15c04:	movt	r5, #1
   15c08:	movne	r9, r3
   15c0c:	cmp	r2, #0
   15c10:	movne	r5, r2
   15c14:	bl	1a6b4 <__assert_fail@plt+0x9194>
   15c18:	mov	r8, #0
   15c1c:	cmp	r0, #0
   15c20:	beq	15e00 <__assert_fail@plt+0x48e0>
   15c24:	mov	r4, r0
   15c28:	cmp	r7, #0
   15c2c:	beq	15cdc <__assert_fail@plt+0x47bc>
   15c30:	movw	r0, #49616	; 0xc1d0
   15c34:	str	r7, [r4, #20]
   15c38:	movt	r0, #1
   15c3c:	cmp	r7, r0
   15c40:	beq	15ce8 <__assert_fail@plt+0x47c8>
   15c44:	vldr	s2, [pc, #444]	; 15e08 <__assert_fail@plt+0x48e8>
   15c48:	vldr	s0, [r7, #8]
   15c4c:	vcmpe.f32	s0, s2
   15c50:	vmrs	APSR_nzcv, fpscr
   15c54:	ble	15cc0 <__assert_fail@plt+0x47a0>
   15c58:	vldr	s4, [pc, #428]	; 15e0c <__assert_fail@plt+0x48ec>
   15c5c:	vcmpe.f32	s0, s4
   15c60:	vmrs	APSR_nzcv, fpscr
   15c64:	bpl	15cc0 <__assert_fail@plt+0x47a0>
   15c68:	vldr	s4, [pc, #416]	; 15e10 <__assert_fail@plt+0x48f0>
   15c6c:	vldr	s6, [r7, #12]
   15c70:	vcmpe.f32	s6, s4
   15c74:	vmrs	APSR_nzcv, fpscr
   15c78:	ble	15cc0 <__assert_fail@plt+0x47a0>
   15c7c:	vldr	s4, [r7]
   15c80:	vcmpe.f32	s4, #0.0
   15c84:	vmrs	APSR_nzcv, fpscr
   15c88:	blt	15cc0 <__assert_fail@plt+0x47a0>
   15c8c:	vadd.f32	s2, s4, s2
   15c90:	vcmpe.f32	s2, s0
   15c94:	vmrs	APSR_nzcv, fpscr
   15c98:	bpl	15cc0 <__assert_fail@plt+0x47a0>
   15c9c:	vldr	s0, [r7, #4]
   15ca0:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15ca4:	vcmpe.f32	s0, s4
   15ca8:	vmrs	APSR_nzcv, fpscr
   15cac:	bhi	15cc0 <__assert_fail@plt+0x47a0>
   15cb0:	vcmpe.f32	s2, s0
   15cb4:	mov	r0, r7
   15cb8:	vmrs	APSR_nzcv, fpscr
   15cbc:	bmi	15ce8 <__assert_fail@plt+0x47c8>
   15cc0:	movw	r0, #49616	; 0xc1d0
   15cc4:	movt	r0, #1
   15cc8:	str	r0, [r4, #20]
   15ccc:	mov	r0, r4
   15cd0:	bl	12f78 <__assert_fail@plt+0x1a58>
   15cd4:	mov	r0, r8
   15cd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15cdc:	movw	r0, #49616	; 0xc1d0
   15ce0:	movt	r0, #1
   15ce4:	str	r0, [r4, #20]
   15ce8:	ldrb	r1, [r0, #16]
   15cec:	cmp	r1, #0
   15cf0:	bne	15d1c <__assert_fail@plt+0x47fc>
   15cf4:	vldr	s0, [r0, #8]
   15cf8:	vldr	s4, [pc, #276]	; 15e14 <__assert_fail@plt+0x48f4>
   15cfc:	vmov	s2, r6
   15d00:	vcvt.f32.u32	s2, s2
   15d04:	vdiv.f32	s2, s2, s0
   15d08:	vcmpe.f32	s2, s4
   15d0c:	vcvt.u32.f32	s0, s2
   15d10:	vmrs	APSR_nzcv, fpscr
   15d14:	bge	15d9c <__assert_fail@plt+0x487c>
   15d18:	vmov	r6, s0
   15d1c:	cmp	r6, #10
   15d20:	movls	r6, #10
   15d24:	orr	r0, r6, #1
   15d28:	cmn	r0, #1
   15d2c:	beq	15d9c <__assert_fail@plt+0x487c>
   15d30:	ldr	r6, [fp, #8]
   15d34:	mov	r1, #3
   15d38:	cmp	r0, #10
   15d3c:	bcc	15d74 <__assert_fail@plt+0x4854>
   15d40:	mov	r1, #3
   15d44:	mov	r3, #9
   15d48:	mov	r2, #12
   15d4c:	udiv	r7, r0, r1
   15d50:	mls	r7, r7, r1, r0
   15d54:	cmp	r7, #0
   15d58:	beq	15d74 <__assert_fail@plt+0x4854>
   15d5c:	add	r3, r3, r2
   15d60:	add	r2, r2, #8
   15d64:	add	r1, r1, #2
   15d68:	add	r3, r3, #4
   15d6c:	cmp	r3, r0
   15d70:	bcc	15d4c <__assert_fail@plt+0x482c>
   15d74:	udiv	r2, r0, r1
   15d78:	mls	r1, r2, r1, r0
   15d7c:	cmp	r1, #0
   15d80:	bne	15d94 <__assert_fail@plt+0x4874>
   15d84:	add	r0, r0, #2
   15d88:	cmn	r0, #1
   15d8c:	bne	15d34 <__assert_fail@plt+0x4814>
   15d90:	b	15d9c <__assert_fail@plt+0x487c>
   15d94:	cmp	r0, #536870912	; 0x20000000
   15d98:	bcc	15db4 <__assert_fail@plt+0x4894>
   15d9c:	mov	r0, #0
   15da0:	str	r0, [r4, #8]
   15da4:	mov	r0, r4
   15da8:	bl	12f78 <__assert_fail@plt+0x1a58>
   15dac:	mov	r0, r8
   15db0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15db4:	cmp	r0, #0
   15db8:	str	r0, [r4, #8]
   15dbc:	beq	15da4 <__assert_fail@plt+0x4884>
   15dc0:	mov	r1, #8
   15dc4:	bl	1a660 <__assert_fail@plt+0x9140>
   15dc8:	cmp	r0, #0
   15dcc:	str	r0, [r4]
   15dd0:	beq	15da4 <__assert_fail@plt+0x4884>
   15dd4:	mov	r1, #0
   15dd8:	mov	r8, r4
   15ddc:	str	r1, [r4, #12]
   15de0:	str	r1, [r4, #16]
   15de4:	str	r5, [r4, #24]
   15de8:	str	r9, [r4, #28]
   15dec:	str	r6, [r4, #32]
   15df0:	str	r1, [r4, #36]	; 0x24
   15df4:	ldr	r1, [r4, #8]
   15df8:	add	r0, r0, r1, lsl #3
   15dfc:	str	r0, [r4, #4]
   15e00:	mov	r0, r8
   15e04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15e08:	stclcc	12, cr12, [ip, #820]	; 0x334
   15e0c:	svccc	0x00666666
   15e10:	svccc	0x008ccccd
   15e14:	svcmi	0x00800000
   15e18:	ror	r2, r0, #3
   15e1c:	udiv	r2, r2, r1
   15e20:	mul	r1, r2, r1
   15e24:	rsb	r0, r1, r0, ror #3
   15e28:	bx	lr
   15e2c:	sub	r0, r0, r1
   15e30:	clz	r0, r0
   15e34:	lsr	r0, r0, #5
   15e38:	bx	lr
   15e3c:	push	{r4, r5, r6, r7, fp, lr}
   15e40:	add	fp, sp, #16
   15e44:	mov	r4, r0
   15e48:	ldr	r5, [r0]
   15e4c:	ldr	r0, [r0, #4]
   15e50:	cmp	r5, r0
   15e54:	bcs	15eec <__assert_fail@plt+0x49cc>
   15e58:	mov	r6, #0
   15e5c:	ldr	r1, [r5]
   15e60:	cmp	r1, #0
   15e64:	beq	15ee0 <__assert_fail@plt+0x49c0>
   15e68:	ldr	r1, [r4, #32]
   15e6c:	ldr	r7, [r5, #4]
   15e70:	cmp	r1, #0
   15e74:	mov	r0, r1
   15e78:	movwne	r0, #1
   15e7c:	cmp	r7, #0
   15e80:	beq	15ec4 <__assert_fail@plt+0x49a4>
   15e84:	tst	r0, #1
   15e88:	beq	15e98 <__assert_fail@plt+0x4978>
   15e8c:	ldr	r0, [r7]
   15e90:	blx	r1
   15e94:	ldr	r1, [r4, #32]
   15e98:	str	r6, [r7]
   15e9c:	cmp	r1, #0
   15ea0:	ldr	r0, [r4, #36]	; 0x24
   15ea4:	ldr	r2, [r7, #4]
   15ea8:	str	r0, [r7, #4]
   15eac:	mov	r0, r1
   15eb0:	str	r7, [r4, #36]	; 0x24
   15eb4:	mov	r7, r2
   15eb8:	movwne	r0, #1
   15ebc:	cmp	r2, #0
   15ec0:	bne	15e84 <__assert_fail@plt+0x4964>
   15ec4:	cmp	r0, #0
   15ec8:	beq	15ed4 <__assert_fail@plt+0x49b4>
   15ecc:	ldr	r0, [r5]
   15ed0:	blx	r1
   15ed4:	str	r6, [r5]
   15ed8:	str	r6, [r5, #4]
   15edc:	ldr	r0, [r4, #4]
   15ee0:	add	r5, r5, #8
   15ee4:	cmp	r5, r0
   15ee8:	bcc	15e5c <__assert_fail@plt+0x493c>
   15eec:	mov	r0, #0
   15ef0:	str	r0, [r4, #12]
   15ef4:	str	r0, [r4, #16]
   15ef8:	pop	{r4, r5, r6, r7, fp, pc}
   15efc:	push	{r4, r5, r6, sl, fp, lr}
   15f00:	add	fp, sp, #16
   15f04:	mov	r4, r0
   15f08:	ldr	r0, [r0, #32]
   15f0c:	cmp	r0, #0
   15f10:	ldrne	r0, [r4, #16]
   15f14:	cmpne	r0, #0
   15f18:	beq	15f80 <__assert_fail@plt+0x4a60>
   15f1c:	ldr	r5, [r4]
   15f20:	ldr	r1, [r4, #4]
   15f24:	cmp	r5, r1
   15f28:	bcc	15f3c <__assert_fail@plt+0x4a1c>
   15f2c:	b	15f80 <__assert_fail@plt+0x4a60>
   15f30:	add	r5, r5, #8
   15f34:	cmp	r5, r1
   15f38:	bcs	15f80 <__assert_fail@plt+0x4a60>
   15f3c:	ldr	r0, [r5]
   15f40:	cmp	r0, #0
   15f44:	cmpne	r5, #0
   15f48:	beq	15f30 <__assert_fail@plt+0x4a10>
   15f4c:	ldr	r1, [r4, #32]
   15f50:	blx	r1
   15f54:	ldr	r6, [r5, #4]
   15f58:	cmp	r6, #0
   15f5c:	beq	15f78 <__assert_fail@plt+0x4a58>
   15f60:	ldr	r1, [r4, #32]
   15f64:	ldr	r0, [r6]
   15f68:	blx	r1
   15f6c:	ldr	r6, [r6, #4]
   15f70:	cmp	r6, #0
   15f74:	bne	15f60 <__assert_fail@plt+0x4a40>
   15f78:	ldr	r1, [r4, #4]
   15f7c:	b	15f30 <__assert_fail@plt+0x4a10>
   15f80:	ldr	r5, [r4]
   15f84:	ldr	r1, [r4, #4]
   15f88:	cmp	r5, r1
   15f8c:	bcc	15fa0 <__assert_fail@plt+0x4a80>
   15f90:	b	15fc8 <__assert_fail@plt+0x4aa8>
   15f94:	add	r5, r5, #8
   15f98:	cmp	r5, r1
   15f9c:	bcs	15fc8 <__assert_fail@plt+0x4aa8>
   15fa0:	ldr	r0, [r5, #4]
   15fa4:	cmp	r0, #0
   15fa8:	beq	15f94 <__assert_fail@plt+0x4a74>
   15fac:	ldr	r6, [r0, #4]
   15fb0:	bl	12f78 <__assert_fail@plt+0x1a58>
   15fb4:	cmp	r6, #0
   15fb8:	mov	r0, r6
   15fbc:	bne	15fac <__assert_fail@plt+0x4a8c>
   15fc0:	ldr	r1, [r4, #4]
   15fc4:	b	15f94 <__assert_fail@plt+0x4a74>
   15fc8:	ldr	r0, [r4, #36]	; 0x24
   15fcc:	cmp	r0, #0
   15fd0:	beq	15fe8 <__assert_fail@plt+0x4ac8>
   15fd4:	ldr	r5, [r0, #4]
   15fd8:	bl	12f78 <__assert_fail@plt+0x1a58>
   15fdc:	cmp	r5, #0
   15fe0:	mov	r0, r5
   15fe4:	bne	15fd4 <__assert_fail@plt+0x4ab4>
   15fe8:	ldr	r0, [r4]
   15fec:	bl	12f78 <__assert_fail@plt+0x1a58>
   15ff0:	mov	r0, r4
   15ff4:	pop	{r4, r5, r6, sl, fp, lr}
   15ff8:	b	12f78 <__assert_fail@plt+0x1a58>
   15ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16000:	add	fp, sp, #28
   16004:	sub	sp, sp, #44	; 0x2c
   16008:	mov	r7, r0
   1600c:	mov	r4, r0
   16010:	ldr	r0, [r7, #20]!
   16014:	ldrb	r2, [r0, #16]
   16018:	cmp	r2, #0
   1601c:	bne	1604c <__assert_fail@plt+0x4b2c>
   16020:	vldr	s0, [r0, #8]
   16024:	vldr	s4, [pc, #576]	; 1626c <__assert_fail@plt+0x4d4c>
   16028:	vmov	s2, r1
   1602c:	mov	r5, #0
   16030:	vcvt.f32.u32	s2, s2
   16034:	vdiv.f32	s2, s2, s0
   16038:	vcmpe.f32	s2, s4
   1603c:	vcvt.u32.f32	s0, s2
   16040:	vmrs	APSR_nzcv, fpscr
   16044:	bge	16170 <__assert_fail@plt+0x4c50>
   16048:	vmov	r1, s0
   1604c:	cmp	r1, #10
   16050:	mov	r5, #0
   16054:	movls	r1, #10
   16058:	orr	r6, r1, #1
   1605c:	cmn	r6, #1
   16060:	bne	16074 <__assert_fail@plt+0x4b54>
   16064:	b	16170 <__assert_fail@plt+0x4c50>
   16068:	add	r6, r6, #2
   1606c:	cmn	r6, #1
   16070:	beq	16170 <__assert_fail@plt+0x4c50>
   16074:	mov	r0, #3
   16078:	cmp	r6, #10
   1607c:	bcc	160b4 <__assert_fail@plt+0x4b94>
   16080:	mov	r0, #3
   16084:	mov	r2, #9
   16088:	mov	r1, #12
   1608c:	udiv	r3, r6, r0
   16090:	mls	r3, r3, r0, r6
   16094:	cmp	r3, #0
   16098:	beq	160b4 <__assert_fail@plt+0x4b94>
   1609c:	add	r2, r2, r1
   160a0:	add	r1, r1, #8
   160a4:	add	r0, r0, #2
   160a8:	add	r2, r2, #4
   160ac:	cmp	r2, r6
   160b0:	bcc	1608c <__assert_fail@plt+0x4b6c>
   160b4:	udiv	r1, r6, r0
   160b8:	mls	r0, r1, r0, r6
   160bc:	cmp	r0, #0
   160c0:	beq	16068 <__assert_fail@plt+0x4b48>
   160c4:	sub	r0, r6, #1
   160c8:	cmn	r0, #-536870910	; 0xe0000002
   160cc:	bhi	16170 <__assert_fail@plt+0x4c50>
   160d0:	ldr	r0, [r4, #8]
   160d4:	cmp	r6, r0
   160d8:	bne	160ec <__assert_fail@plt+0x4bcc>
   160dc:	mov	r5, #1
   160e0:	mov	r0, r5
   160e4:	sub	sp, fp, #28
   160e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160ec:	mov	r0, r6
   160f0:	mov	r1, #8
   160f4:	bl	1a660 <__assert_fail@plt+0x9140>
   160f8:	cmp	r0, #0
   160fc:	str	r0, [sp, #4]
   16100:	beq	16170 <__assert_fail@plt+0x4c50>
   16104:	mov	r1, #0
   16108:	add	r0, r0, r6, lsl #3
   1610c:	str	r6, [sp, #12]
   16110:	add	r5, sp, #4
   16114:	mov	sl, r4
   16118:	mov	r2, #0
   1611c:	str	r1, [sp, #16]
   16120:	str	r1, [sp, #20]
   16124:	str	r0, [sp, #8]
   16128:	add	r0, r5, #20
   1612c:	mov	r1, r4
   16130:	vld1.32	{d16-d17}, [r7]
   16134:	vst1.32	{d16-d17}, [r0]
   16138:	ldr	r0, [sl, #36]!	; 0x24
   1613c:	str	r0, [sp, #40]	; 0x28
   16140:	mov	r0, r5
   16144:	bl	16270 <__assert_fail@plt+0x4d50>
   16148:	cmp	r0, #0
   1614c:	beq	1617c <__assert_fail@plt+0x4c5c>
   16150:	ldr	r0, [r4]
   16154:	bl	12f78 <__assert_fail@plt+0x1a58>
   16158:	mov	r0, #36	; 0x24
   1615c:	vld1.32	{d16-d17}, [r5], r0
   16160:	vst1.32	{d16-d17}, [r4], r0
   16164:	ldr	r0, [r5]
   16168:	mov	r5, #1
   1616c:	str	r0, [r4]
   16170:	mov	r0, r5
   16174:	sub	sp, fp, #28
   16178:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1617c:	ldr	r0, [sp, #40]	; 0x28
   16180:	str	r0, [sl]
   16184:	ldr	r0, [sp, #8]
   16188:	ldr	r8, [sp, #4]
   1618c:	cmp	r8, r0
   16190:	str	r0, [sp]
   16194:	bcs	16238 <__assert_fail@plt+0x4d18>
   16198:	mov	r9, #0
   1619c:	ldr	r0, [r8]
   161a0:	cmp	r0, #0
   161a4:	beq	16228 <__assert_fail@plt+0x4d08>
   161a8:	ldr	r6, [r8, #4]
   161ac:	cmp	r6, #0
   161b0:	beq	16224 <__assert_fail@plt+0x4d04>
   161b4:	ldr	r1, [r4, #8]
   161b8:	ldr	r5, [r6]
   161bc:	ldr	r2, [r4, #24]
   161c0:	mov	r0, r5
   161c4:	blx	r2
   161c8:	ldr	r1, [r4, #8]
   161cc:	cmp	r0, r1
   161d0:	bcs	16268 <__assert_fail@plt+0x4d48>
   161d4:	ldr	r3, [r4]
   161d8:	ldr	r2, [r6, #4]
   161dc:	ldr	r7, [r3, r0, lsl #3]
   161e0:	cmp	r7, #0
   161e4:	beq	161f4 <__assert_fail@plt+0x4cd4>
   161e8:	add	r0, r3, r0, lsl #3
   161ec:	add	r0, r0, #4
   161f0:	b	1620c <__assert_fail@plt+0x4cec>
   161f4:	str	r5, [r3, r0, lsl #3]
   161f8:	ldr	r0, [r4, #12]
   161fc:	add	r0, r0, #1
   16200:	str	r0, [r4, #12]
   16204:	mov	r0, sl
   16208:	str	r9, [r6]
   1620c:	ldr	r3, [r0]
   16210:	cmp	r2, #0
   16214:	str	r3, [r6, #4]
   16218:	str	r6, [r0]
   1621c:	mov	r6, r2
   16220:	bne	161b8 <__assert_fail@plt+0x4c98>
   16224:	str	r9, [r8, #4]
   16228:	ldr	r0, [sp]
   1622c:	add	r8, r8, #8
   16230:	cmp	r8, r0
   16234:	bcc	1619c <__assert_fail@plt+0x4c7c>
   16238:	add	r1, sp, #4
   1623c:	mov	r0, r4
   16240:	mov	r2, #0
   16244:	mov	r5, #0
   16248:	bl	16270 <__assert_fail@plt+0x4d50>
   1624c:	cmp	r0, #0
   16250:	beq	16268 <__assert_fail@plt+0x4d48>
   16254:	ldr	r0, [sp, #4]
   16258:	bl	12f78 <__assert_fail@plt+0x1a58>
   1625c:	mov	r0, r5
   16260:	sub	sp, fp, #28
   16264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16268:	bl	114d8 <abort@plt>
   1626c:	svcmi	0x00800000
   16270:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16274:	add	fp, sp, #28
   16278:	sub	sp, sp, #4
   1627c:	ldr	r8, [r1]
   16280:	ldr	r3, [r1, #4]
   16284:	mov	r6, r0
   16288:	mov	r0, #1
   1628c:	str	r1, [sp]
   16290:	cmp	r8, r3
   16294:	bcs	16494 <__assert_fail@plt+0x4f74>
   16298:	add	r9, r6, #36	; 0x24
   1629c:	cmp	r2, #0
   162a0:	beq	1634c <__assert_fail@plt+0x4e2c>
   162a4:	mov	sl, #0
   162a8:	ldr	r1, [r8]
   162ac:	cmp	r1, #0
   162b0:	beq	1633c <__assert_fail@plt+0x4e1c>
   162b4:	ldr	r7, [r8, #4]
   162b8:	cmp	r7, #0
   162bc:	beq	16338 <__assert_fail@plt+0x4e18>
   162c0:	ldr	r1, [r6, #8]
   162c4:	ldr	r4, [r7]
   162c8:	ldr	r2, [r6, #24]
   162cc:	mov	r0, r4
   162d0:	blx	r2
   162d4:	ldr	r1, [r6, #8]
   162d8:	cmp	r0, r1
   162dc:	bcs	164a8 <__assert_fail@plt+0x4f88>
   162e0:	ldr	r3, [r6]
   162e4:	ldr	r2, [r7, #4]
   162e8:	ldr	r5, [r3, r0, lsl #3]
   162ec:	cmp	r5, #0
   162f0:	beq	16300 <__assert_fail@plt+0x4de0>
   162f4:	add	r0, r3, r0, lsl #3
   162f8:	add	r0, r0, #4
   162fc:	b	16318 <__assert_fail@plt+0x4df8>
   16300:	str	r4, [r3, r0, lsl #3]
   16304:	ldr	r0, [r6, #12]
   16308:	add	r0, r0, #1
   1630c:	str	r0, [r6, #12]
   16310:	mov	r0, r9
   16314:	str	sl, [r7]
   16318:	ldr	r3, [r0]
   1631c:	cmp	r2, #0
   16320:	str	r3, [r7, #4]
   16324:	str	r7, [r0]
   16328:	mov	r7, r2
   1632c:	bne	162c4 <__assert_fail@plt+0x4da4>
   16330:	ldr	r0, [sp]
   16334:	ldr	r3, [r0, #4]
   16338:	str	sl, [r8, #4]
   1633c:	add	r8, r8, #8
   16340:	cmp	r8, r3
   16344:	bcc	162a8 <__assert_fail@plt+0x4d88>
   16348:	b	16490 <__assert_fail@plt+0x4f70>
   1634c:	mov	r5, #0
   16350:	ldr	sl, [r8]
   16354:	cmp	sl, #0
   16358:	beq	16484 <__assert_fail@plt+0x4f64>
   1635c:	ldr	r7, [r8, #4]
   16360:	ldr	r1, [r6, #8]
   16364:	cmp	r7, #0
   16368:	beq	163e4 <__assert_fail@plt+0x4ec4>
   1636c:	mov	sl, #0
   16370:	ldr	r4, [r7]
   16374:	ldr	r2, [r6, #24]
   16378:	mov	r0, r4
   1637c:	blx	r2
   16380:	ldr	r1, [r6, #8]
   16384:	cmp	r0, r1
   16388:	bcs	164a8 <__assert_fail@plt+0x4f88>
   1638c:	ldr	r3, [r6]
   16390:	ldr	r2, [r7, #4]
   16394:	ldr	r5, [r3, r0, lsl #3]
   16398:	cmp	r5, #0
   1639c:	beq	163ac <__assert_fail@plt+0x4e8c>
   163a0:	add	r0, r3, r0, lsl #3
   163a4:	add	r0, r0, #4
   163a8:	b	163c4 <__assert_fail@plt+0x4ea4>
   163ac:	str	r4, [r3, r0, lsl #3]
   163b0:	ldr	r0, [r6, #12]
   163b4:	add	r0, r0, #1
   163b8:	str	r0, [r6, #12]
   163bc:	mov	r0, r9
   163c0:	str	sl, [r7]
   163c4:	ldr	r3, [r0]
   163c8:	cmp	r2, #0
   163cc:	str	r3, [r7, #4]
   163d0:	str	r7, [r0]
   163d4:	mov	r7, r2
   163d8:	bne	16370 <__assert_fail@plt+0x4e50>
   163dc:	ldr	sl, [r8]
   163e0:	mov	r5, #0
   163e4:	str	r5, [r8, #4]
   163e8:	mov	r0, sl
   163ec:	ldr	r2, [r6, #24]
   163f0:	blx	r2
   163f4:	mov	r4, r0
   163f8:	ldr	r0, [r6, #8]
   163fc:	cmp	r4, r0
   16400:	bcs	164a8 <__assert_fail@plt+0x4f88>
   16404:	ldr	r7, [r6]
   16408:	ldr	r0, [r7, r4, lsl #3]
   1640c:	cmp	r0, #0
   16410:	beq	16430 <__assert_fail@plt+0x4f10>
   16414:	ldr	r0, [r9]
   16418:	cmp	r0, #0
   1641c:	beq	16444 <__assert_fail@plt+0x4f24>
   16420:	mov	r1, r0
   16424:	ldr	r2, [r1, #4]!
   16428:	str	r2, [r9]
   1642c:	b	16458 <__assert_fail@plt+0x4f38>
   16430:	str	sl, [r7, r4, lsl #3]
   16434:	ldr	r0, [r6, #12]
   16438:	add	r0, r0, #1
   1643c:	str	r0, [r6, #12]
   16440:	b	1646c <__assert_fail@plt+0x4f4c>
   16444:	mov	r0, #8
   16448:	bl	1a6b4 <__assert_fail@plt+0x9194>
   1644c:	cmp	r0, #0
   16450:	beq	1649c <__assert_fail@plt+0x4f7c>
   16454:	add	r1, r0, #4
   16458:	str	sl, [r0]
   1645c:	add	r2, r7, r4, lsl #3
   16460:	ldr	r3, [r2, #4]
   16464:	str	r3, [r1]
   16468:	str	r0, [r2, #4]
   1646c:	ldr	r0, [sp]
   16470:	str	r5, [r8]
   16474:	ldr	r1, [r0, #12]
   16478:	ldr	r3, [r0, #4]
   1647c:	sub	r1, r1, #1
   16480:	str	r1, [r0, #12]
   16484:	add	r8, r8, #8
   16488:	cmp	r8, r3
   1648c:	bcc	16350 <__assert_fail@plt+0x4e30>
   16490:	mov	r0, #1
   16494:	sub	sp, fp, #28
   16498:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1649c:	mov	r0, #0
   164a0:	sub	sp, fp, #28
   164a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   164a8:	bl	114d8 <abort@plt>
   164ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   164b0:	add	fp, sp, #28
   164b4:	sub	sp, sp, #4
   164b8:	cmp	r1, #0
   164bc:	beq	16800 <__assert_fail@plt+0x52e0>
   164c0:	mov	r8, r2
   164c4:	mov	sl, r1
   164c8:	ldr	r1, [r0, #8]
   164cc:	ldr	r2, [r0, #24]
   164d0:	mov	r4, r0
   164d4:	mov	r0, sl
   164d8:	blx	r2
   164dc:	mov	r7, r0
   164e0:	ldr	r0, [r4, #8]
   164e4:	cmp	r7, r0
   164e8:	bcs	16800 <__assert_fail@plt+0x52e0>
   164ec:	ldr	r5, [r4]
   164f0:	mov	r9, r5
   164f4:	ldr	r1, [r9, r7, lsl #3]!
   164f8:	cmp	r1, #0
   164fc:	beq	16590 <__assert_fail@plt+0x5070>
   16500:	cmp	r1, sl
   16504:	beq	16530 <__assert_fail@plt+0x5010>
   16508:	ldr	r2, [r4, #28]
   1650c:	mov	r0, sl
   16510:	blx	r2
   16514:	cmp	r0, #0
   16518:	mov	r6, r9
   1651c:	beq	1654c <__assert_fail@plt+0x502c>
   16520:	ldr	r0, [r6]
   16524:	cmp	r0, #0
   16528:	bne	16534 <__assert_fail@plt+0x5014>
   1652c:	b	16590 <__assert_fail@plt+0x5070>
   16530:	mov	r0, sl
   16534:	cmp	r8, #0
   16538:	mov	r7, #0
   1653c:	strne	r0, [r8]
   16540:	mov	r0, r7
   16544:	sub	sp, fp, #28
   16548:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1654c:	add	r6, r5, r7, lsl #3
   16550:	ldr	r0, [r6, #4]!
   16554:	cmp	r0, #0
   16558:	beq	16590 <__assert_fail@plt+0x5070>
   1655c:	ldr	r1, [r0]
   16560:	cmp	r1, sl
   16564:	beq	16584 <__assert_fail@plt+0x5064>
   16568:	ldr	r2, [r4, #28]
   1656c:	mov	r0, sl
   16570:	blx	r2
   16574:	ldr	r6, [r6]
   16578:	cmp	r0, #0
   1657c:	beq	16550 <__assert_fail@plt+0x5030>
   16580:	b	16520 <__assert_fail@plt+0x5000>
   16584:	mov	r0, sl
   16588:	cmp	r0, #0
   1658c:	bne	16534 <__assert_fail@plt+0x5014>
   16590:	vldr	s0, [r4, #8]
   16594:	vldr	s2, [r4, #12]
   16598:	ldr	r0, [r4, #20]
   1659c:	vcvt.f32.u32	s0, s0
   165a0:	vcvt.f32.u32	s4, s2
   165a4:	vldr	s2, [r0, #8]
   165a8:	vmul.f32	s6, s2, s0
   165ac:	vcmpe.f32	s6, s4
   165b0:	vmrs	APSR_nzcv, fpscr
   165b4:	bpl	16718 <__assert_fail@plt+0x51f8>
   165b8:	movw	r1, #49616	; 0xc1d0
   165bc:	movt	r1, #1
   165c0:	cmp	r0, r1
   165c4:	beq	16660 <__assert_fail@plt+0x5140>
   165c8:	vldr	s6, [pc, #564]	; 16804 <__assert_fail@plt+0x52e4>
   165cc:	vcmpe.f32	s2, s6
   165d0:	vmrs	APSR_nzcv, fpscr
   165d4:	ble	1663c <__assert_fail@plt+0x511c>
   165d8:	vldr	s8, [pc, #552]	; 16808 <__assert_fail@plt+0x52e8>
   165dc:	vcmpe.f32	s2, s8
   165e0:	vmrs	APSR_nzcv, fpscr
   165e4:	bpl	1663c <__assert_fail@plt+0x511c>
   165e8:	vldr	s8, [pc, #540]	; 1680c <__assert_fail@plt+0x52ec>
   165ec:	vldr	s10, [r0, #12]
   165f0:	vcmpe.f32	s10, s8
   165f4:	vmrs	APSR_nzcv, fpscr
   165f8:	ble	1663c <__assert_fail@plt+0x511c>
   165fc:	vldr	s8, [r0]
   16600:	vcmpe.f32	s8, #0.0
   16604:	vmrs	APSR_nzcv, fpscr
   16608:	blt	1663c <__assert_fail@plt+0x511c>
   1660c:	vadd.f32	s6, s8, s6
   16610:	vcmpe.f32	s6, s2
   16614:	vmrs	APSR_nzcv, fpscr
   16618:	bpl	1663c <__assert_fail@plt+0x511c>
   1661c:	vldr	s8, [r0, #4]
   16620:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16624:	vcmpe.f32	s8, s10
   16628:	vmrs	APSR_nzcv, fpscr
   1662c:	bhi	1663c <__assert_fail@plt+0x511c>
   16630:	vcmpe.f32	s6, s8
   16634:	vmrs	APSR_nzcv, fpscr
   16638:	bmi	1664c <__assert_fail@plt+0x512c>
   1663c:	vldr	s2, [pc, #460]	; 16810 <__assert_fail@plt+0x52f0>
   16640:	movw	r0, #49616	; 0xc1d0
   16644:	movt	r0, #1
   16648:	str	r0, [r4, #20]
   1664c:	vmul.f32	s6, s2, s0
   16650:	vcmpe.f32	s6, s4
   16654:	vmrs	APSR_nzcv, fpscr
   16658:	bmi	16674 <__assert_fail@plt+0x5154>
   1665c:	b	16718 <__assert_fail@plt+0x51f8>
   16660:	mov	r0, r1
   16664:	vmul.f32	s6, s2, s0
   16668:	vcmpe.f32	s6, s4
   1666c:	vmrs	APSR_nzcv, fpscr
   16670:	bpl	16718 <__assert_fail@plt+0x51f8>
   16674:	vldr	s4, [r0, #12]
   16678:	ldrb	r0, [r0, #16]
   1667c:	mvn	r7, #0
   16680:	vmul.f32	s0, s4, s0
   16684:	vldr	s4, [pc, #392]	; 16814 <__assert_fail@plt+0x52f4>
   16688:	cmp	r0, #0
   1668c:	vmul.f32	s2, s2, s0
   16690:	vseleq.f32	s0, s2, s0
   16694:	vcmpe.f32	s0, s4
   16698:	vmrs	APSR_nzcv, fpscr
   1669c:	bge	16794 <__assert_fail@plt+0x5274>
   166a0:	vcvt.u32.f32	s0, s0
   166a4:	mov	r0, r4
   166a8:	vmov	r1, s0
   166ac:	bl	15ffc <__assert_fail@plt+0x4adc>
   166b0:	cmp	r0, #0
   166b4:	beq	16794 <__assert_fail@plt+0x5274>
   166b8:	ldr	r1, [r4, #8]
   166bc:	ldr	r2, [r4, #24]
   166c0:	mov	r0, sl
   166c4:	blx	r2
   166c8:	mov	r7, r0
   166cc:	ldr	r0, [r4, #8]
   166d0:	cmp	r7, r0
   166d4:	bcs	16800 <__assert_fail@plt+0x52e0>
   166d8:	ldr	r5, [r4]
   166dc:	mov	r9, r5
   166e0:	ldr	r1, [r9, r7, lsl #3]!
   166e4:	cmp	r1, #0
   166e8:	beq	16740 <__assert_fail@plt+0x5220>
   166ec:	cmp	r1, sl
   166f0:	mov	r0, sl
   166f4:	beq	16710 <__assert_fail@plt+0x51f0>
   166f8:	ldr	r2, [r4, #28]
   166fc:	mov	r0, sl
   16700:	blx	r2
   16704:	cmp	r0, #0
   16708:	beq	167b0 <__assert_fail@plt+0x5290>
   1670c:	ldr	r0, [r9]
   16710:	cmp	r0, #0
   16714:	bne	16800 <__assert_fail@plt+0x52e0>
   16718:	ldr	r0, [r9]
   1671c:	cmp	r0, #0
   16720:	beq	16740 <__assert_fail@plt+0x5220>
   16724:	ldr	r0, [r4, #36]	; 0x24
   16728:	cmp	r0, #0
   1672c:	beq	16760 <__assert_fail@plt+0x5240>
   16730:	mov	r1, r0
   16734:	ldr	r2, [r1, #4]!
   16738:	str	r2, [r4, #36]	; 0x24
   1673c:	b	16774 <__assert_fail@plt+0x5254>
   16740:	str	sl, [r9]
   16744:	ldr	r0, [r4, #12]
   16748:	ldr	r1, [r4, #16]
   1674c:	add	r0, r0, #1
   16750:	add	r1, r1, #1
   16754:	str	r0, [r4, #12]
   16758:	str	r1, [r4, #16]
   1675c:	b	16790 <__assert_fail@plt+0x5270>
   16760:	mov	r0, #8
   16764:	bl	1a6b4 <__assert_fail@plt+0x9194>
   16768:	cmp	r0, #0
   1676c:	beq	167a0 <__assert_fail@plt+0x5280>
   16770:	add	r1, r0, #4
   16774:	str	sl, [r0]
   16778:	ldr	r2, [r9, #4]
   1677c:	str	r2, [r1]
   16780:	str	r0, [r9, #4]
   16784:	ldr	r0, [r4, #16]
   16788:	add	r0, r0, #1
   1678c:	str	r0, [r4, #16]
   16790:	mov	r7, #1
   16794:	mov	r0, r7
   16798:	sub	sp, fp, #28
   1679c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167a0:	mvn	r7, #0
   167a4:	mov	r0, r7
   167a8:	sub	sp, fp, #28
   167ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167b0:	add	r6, r5, r7, lsl #3
   167b4:	ldr	r0, [r6, #4]!
   167b8:	cmp	r0, #0
   167bc:	beq	16718 <__assert_fail@plt+0x51f8>
   167c0:	ldr	r1, [r0]
   167c4:	cmp	r1, sl
   167c8:	beq	167f4 <__assert_fail@plt+0x52d4>
   167cc:	ldr	r2, [r4, #28]
   167d0:	mov	r0, sl
   167d4:	blx	r2
   167d8:	ldr	r6, [r6]
   167dc:	cmp	r0, #0
   167e0:	beq	167b4 <__assert_fail@plt+0x5294>
   167e4:	ldr	r0, [r6]
   167e8:	cmp	r0, #0
   167ec:	beq	16718 <__assert_fail@plt+0x51f8>
   167f0:	b	16800 <__assert_fail@plt+0x52e0>
   167f4:	mov	r0, sl
   167f8:	cmp	r0, #0
   167fc:	beq	16718 <__assert_fail@plt+0x51f8>
   16800:	bl	114d8 <abort@plt>
   16804:	stclcc	12, cr12, [ip, #820]	; 0x334
   16808:	svccc	0x00666666
   1680c:	svccc	0x008ccccd
   16810:	svccc	0x004ccccd
   16814:	svcmi	0x00800000
   16818:	push	{r4, sl, fp, lr}
   1681c:	add	fp, sp, #8
   16820:	sub	sp, sp, #8
   16824:	add	r2, sp, #4
   16828:	mov	r4, r1
   1682c:	bl	164ac <__assert_fail@plt+0x4f8c>
   16830:	cmn	r0, #1
   16834:	beq	16850 <__assert_fail@plt+0x5330>
   16838:	ldr	r1, [sp, #4]
   1683c:	cmp	r0, #0
   16840:	moveq	r4, r1
   16844:	mov	r0, r4
   16848:	sub	sp, fp, #8
   1684c:	pop	{r4, sl, fp, pc}
   16850:	mov	r4, #0
   16854:	mov	r0, r4
   16858:	sub	sp, fp, #8
   1685c:	pop	{r4, sl, fp, pc}
   16860:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16864:	add	fp, sp, #24
   16868:	mov	r9, r1
   1686c:	ldr	r1, [r0, #8]
   16870:	ldr	r2, [r0, #24]
   16874:	mov	r5, r0
   16878:	mov	r0, r9
   1687c:	blx	r2
   16880:	mov	r7, r0
   16884:	ldr	r0, [r5, #8]
   16888:	cmp	r7, r0
   1688c:	bcs	16afc <__assert_fail@plt+0x55dc>
   16890:	ldr	r6, [r5]
   16894:	mov	r8, #0
   16898:	mov	r4, r6
   1689c:	ldr	r1, [r4, r7, lsl #3]!
   168a0:	cmp	r1, #0
   168a4:	beq	16958 <__assert_fail@plt+0x5438>
   168a8:	cmp	r1, r9
   168ac:	beq	168c8 <__assert_fail@plt+0x53a8>
   168b0:	ldr	r2, [r5, #28]
   168b4:	mov	r0, r9
   168b8:	blx	r2
   168bc:	cmp	r0, #0
   168c0:	beq	16900 <__assert_fail@plt+0x53e0>
   168c4:	ldr	r9, [r4]
   168c8:	add	r0, r6, r7, lsl #3
   168cc:	ldr	r0, [r0, #4]
   168d0:	cmp	r0, #0
   168d4:	beq	16948 <__assert_fail@plt+0x5428>
   168d8:	ldm	r0, {r1, r2}
   168dc:	stm	r4, {r1, r2}
   168e0:	mov	r1, #0
   168e4:	str	r1, [r0]
   168e8:	ldr	r1, [r5, #36]	; 0x24
   168ec:	str	r1, [r0, #4]
   168f0:	str	r0, [r5, #36]	; 0x24
   168f4:	cmp	r9, #0
   168f8:	bne	16990 <__assert_fail@plt+0x5470>
   168fc:	b	16958 <__assert_fail@plt+0x5438>
   16900:	add	r7, r6, r7, lsl #3
   16904:	ldr	r0, [r7, #4]!
   16908:	cmp	r0, #0
   1690c:	beq	16958 <__assert_fail@plt+0x5438>
   16910:	ldr	r1, [r0]
   16914:	cmp	r1, r9
   16918:	beq	16960 <__assert_fail@plt+0x5440>
   1691c:	ldr	r2, [r5, #28]
   16920:	mov	r0, r9
   16924:	blx	r2
   16928:	ldr	r1, [r7]
   1692c:	cmp	r0, #0
   16930:	bne	16968 <__assert_fail@plt+0x5448>
   16934:	ldr	r0, [r1, #4]!
   16938:	cmp	r0, #0
   1693c:	mov	r7, r1
   16940:	bne	16910 <__assert_fail@plt+0x53f0>
   16944:	b	16958 <__assert_fail@plt+0x5438>
   16948:	mov	r0, #0
   1694c:	str	r0, [r4]
   16950:	cmp	r9, #0
   16954:	bne	16990 <__assert_fail@plt+0x5470>
   16958:	mov	r0, r8
   1695c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16960:	mov	r1, r0
   16964:	b	1696c <__assert_fail@plt+0x544c>
   16968:	ldr	r9, [r1]
   1696c:	ldr	r0, [r1, #4]
   16970:	str	r0, [r7]
   16974:	mov	r0, #0
   16978:	str	r0, [r1]
   1697c:	ldr	r0, [r5, #36]	; 0x24
   16980:	str	r0, [r1, #4]
   16984:	str	r1, [r5, #36]	; 0x24
   16988:	cmp	r9, #0
   1698c:	beq	16958 <__assert_fail@plt+0x5438>
   16990:	ldr	r0, [r5, #16]
   16994:	sub	r0, r0, #1
   16998:	str	r0, [r5, #16]
   1699c:	ldr	r0, [r4]
   169a0:	cmp	r0, #0
   169a4:	bne	16abc <__assert_fail@plt+0x559c>
   169a8:	ldr	r0, [r5, #12]
   169ac:	vldr	s0, [r5, #8]
   169b0:	sub	r1, r0, #1
   169b4:	str	r1, [r5, #12]
   169b8:	vmov	s2, r1
   169bc:	ldr	r0, [r5, #20]
   169c0:	vcvt.f32.u32	s0, s0
   169c4:	vcvt.f32.u32	s2, s2
   169c8:	vldr	s4, [r0]
   169cc:	vmul.f32	s6, s4, s0
   169d0:	vcmpe.f32	s6, s2
   169d4:	vmrs	APSR_nzcv, fpscr
   169d8:	ble	16abc <__assert_fail@plt+0x559c>
   169dc:	movw	r1, #49616	; 0xc1d0
   169e0:	movt	r1, #1
   169e4:	cmp	r0, r1
   169e8:	beq	16a50 <__assert_fail@plt+0x5530>
   169ec:	vldr	s8, [pc, #268]	; 16b00 <__assert_fail@plt+0x55e0>
   169f0:	vldr	s6, [r0, #8]
   169f4:	vcmpe.f32	s6, s8
   169f8:	vmrs	APSR_nzcv, fpscr
   169fc:	ble	16a2c <__assert_fail@plt+0x550c>
   16a00:	vldr	s10, [pc, #252]	; 16b04 <__assert_fail@plt+0x55e4>
   16a04:	vcmpe.f32	s6, s10
   16a08:	vmrs	APSR_nzcv, fpscr
   16a0c:	bpl	16a2c <__assert_fail@plt+0x550c>
   16a10:	vcmpe.f32	s4, #0.0
   16a14:	vmrs	APSR_nzcv, fpscr
   16a18:	vldrge	s10, [r0, #12]
   16a1c:	vldrge	s12, [pc, #228]	; 16b08 <__assert_fail@plt+0x55e8>
   16a20:	vcmpege.f32	s10, s12
   16a24:	vmrsge	APSR_nzcv, fpscr
   16a28:	bgt	16ac8 <__assert_fail@plt+0x55a8>
   16a2c:	vldr	s4, [pc, #216]	; 16b0c <__assert_fail@plt+0x55ec>
   16a30:	movw	r0, #49616	; 0xc1d0
   16a34:	movt	r0, #1
   16a38:	str	r0, [r5, #20]
   16a3c:	vmul.f32	s4, s4, s0
   16a40:	vcmpe.f32	s4, s2
   16a44:	vmrs	APSR_nzcv, fpscr
   16a48:	bgt	16a64 <__assert_fail@plt+0x5544>
   16a4c:	b	16abc <__assert_fail@plt+0x559c>
   16a50:	mov	r0, r1
   16a54:	vmul.f32	s4, s4, s0
   16a58:	vcmpe.f32	s4, s2
   16a5c:	vmrs	APSR_nzcv, fpscr
   16a60:	ble	16abc <__assert_fail@plt+0x559c>
   16a64:	ldrb	r1, [r0, #16]
   16a68:	vldr	s2, [r0, #4]
   16a6c:	cmp	r1, #0
   16a70:	vmul.f32	s0, s2, s0
   16a74:	vldreq	s2, [r0, #8]
   16a78:	mov	r0, r5
   16a7c:	vmuleq.f32	s0, s0, s2
   16a80:	vcvt.u32.f32	s0, s0
   16a84:	vmov	r1, s0
   16a88:	bl	15ffc <__assert_fail@plt+0x4adc>
   16a8c:	cmp	r0, #0
   16a90:	bne	16abc <__assert_fail@plt+0x559c>
   16a94:	ldr	r0, [r5, #36]	; 0x24
   16a98:	cmp	r0, #0
   16a9c:	beq	16ab4 <__assert_fail@plt+0x5594>
   16aa0:	ldr	r4, [r0, #4]
   16aa4:	bl	12f78 <__assert_fail@plt+0x1a58>
   16aa8:	cmp	r4, #0
   16aac:	mov	r0, r4
   16ab0:	bne	16aa0 <__assert_fail@plt+0x5580>
   16ab4:	mov	r0, #0
   16ab8:	str	r0, [r5, #36]	; 0x24
   16abc:	mov	r8, r9
   16ac0:	mov	r0, r8
   16ac4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ac8:	vadd.f32	s8, s4, s8
   16acc:	vcmpe.f32	s8, s6
   16ad0:	vmrs	APSR_nzcv, fpscr
   16ad4:	bpl	16a2c <__assert_fail@plt+0x550c>
   16ad8:	vldr	s6, [r0, #4]
   16adc:	vmov.f32	s10, #112	; 0x3f800000  1.0
   16ae0:	vcmpe.f32	s6, s10
   16ae4:	vmrs	APSR_nzcv, fpscr
   16ae8:	bhi	16a2c <__assert_fail@plt+0x550c>
   16aec:	vcmpe.f32	s8, s6
   16af0:	vmrs	APSR_nzcv, fpscr
   16af4:	bmi	16a54 <__assert_fail@plt+0x5534>
   16af8:	b	16a2c <__assert_fail@plt+0x550c>
   16afc:	bl	114d8 <abort@plt>
   16b00:	stclcc	12, cr12, [ip, #820]	; 0x334
   16b04:	svccc	0x00666666
   16b08:	svccc	0x008ccccd
   16b0c:	andeq	r0, r0, r0
   16b10:	b	16860 <__assert_fail@plt+0x5340>
   16b14:	mov	r3, #1
   16b18:	mov	r2, #0
   16b1c:	vdup.32	q8, r1
   16b20:	strb	r3, [r0, #28]
   16b24:	str	r2, [r0, #20]
   16b28:	str	r2, [r0, #24]
   16b2c:	vst1.32	{d16-d17}, [r0]!
   16b30:	str	r1, [r0]
   16b34:	bx	lr
   16b38:	ldrb	r0, [r0, #28]
   16b3c:	bx	lr
   16b40:	push	{fp, lr}
   16b44:	mov	fp, sp
   16b48:	ldrb	r3, [r0, #28]
   16b4c:	ldr	r2, [r0, #20]
   16b50:	eor	lr, r3, #1
   16b54:	add	r2, r2, lr
   16b58:	and	r3, r2, #3
   16b5c:	ldr	ip, [r0, r3, lsl #2]
   16b60:	str	r1, [r0, r3, lsl #2]
   16b64:	str	r3, [r0, #20]
   16b68:	ldr	r1, [r0, #24]
   16b6c:	cmp	r3, r1
   16b70:	addeq	r1, r2, lr
   16b74:	andeq	r1, r1, #3
   16b78:	streq	r1, [r0, #24]
   16b7c:	mov	r1, #0
   16b80:	strb	r1, [r0, #28]
   16b84:	mov	r0, ip
   16b88:	pop	{fp, pc}
   16b8c:	ldrb	r1, [r0, #28]
   16b90:	cmp	r1, #0
   16b94:	bne	16bd8 <__assert_fail@plt+0x56b8>
   16b98:	ldr	r3, [r0, #20]
   16b9c:	ldr	r2, [r0, #16]
   16ba0:	ldr	r1, [r0, r3, lsl #2]
   16ba4:	str	r2, [r0, r3, lsl #2]
   16ba8:	ldr	r2, [r0, #20]
   16bac:	ldr	r3, [r0, #24]
   16bb0:	cmp	r2, r3
   16bb4:	moveq	r2, #1
   16bb8:	strbeq	r2, [r0, #28]
   16bbc:	moveq	r0, r1
   16bc0:	bxeq	lr
   16bc4:	sub	r2, r2, #1
   16bc8:	and	r2, r2, #3
   16bcc:	str	r2, [r0, #20]
   16bd0:	mov	r0, r1
   16bd4:	bx	lr
   16bd8:	push	{fp, lr}
   16bdc:	mov	fp, sp
   16be0:	bl	114d8 <abort@plt>
   16be4:	push	{r4, r5, r6, sl, fp, lr}
   16be8:	add	fp, sp, #16
   16bec:	mov	r5, r0
   16bf0:	mov	r0, #0
   16bf4:	mov	r4, r1
   16bf8:	add	r6, r2, #19
   16bfc:	strb	r0, [r2, #20]
   16c00:	mov	r0, r5
   16c04:	mov	r1, r4
   16c08:	mov	r2, #10
   16c0c:	mov	r3, #0
   16c10:	bl	1ae68 <__assert_fail@plt+0x9948>
   16c14:	add	r2, r0, r0, lsl #2
   16c18:	sub	r2, r5, r2, lsl #1
   16c1c:	orr	r2, r2, #48	; 0x30
   16c20:	strb	r2, [r6], #-1
   16c24:	rsbs	r2, r5, #9
   16c28:	mov	r5, r0
   16c2c:	rscs	r2, r4, #0
   16c30:	mov	r4, r1
   16c34:	bcc	16c00 <__assert_fail@plt+0x56e0>
   16c38:	add	r0, r6, #1
   16c3c:	pop	{r4, r5, r6, sl, fp, pc}
   16c40:	sub	sp, sp, #4
   16c44:	push	{fp, lr}
   16c48:	mov	fp, sp
   16c4c:	sub	sp, sp, #4
   16c50:	str	r3, [fp, #8]
   16c54:	mov	r3, #0
   16c58:	tst	r2, #64	; 0x40
   16c5c:	addne	r3, fp, #8
   16c60:	addne	r3, r3, #4
   16c64:	strne	r3, [sp]
   16c68:	ldrne	r3, [fp, #8]
   16c6c:	bl	113b8 <openat64@plt>
   16c70:	bl	18ccc <__assert_fail@plt+0x77ac>
   16c74:	mov	sp, fp
   16c78:	pop	{fp, lr}
   16c7c:	add	sp, sp, #4
   16c80:	bx	lr
   16c84:	push	{r4, r5, r6, sl, fp, lr}
   16c88:	add	fp, sp, #16
   16c8c:	orr	r2, r2, #18688	; 0x4900
   16c90:	mov	r4, r3
   16c94:	orr	r2, r2, #524288	; 0x80000
   16c98:	bl	16c40 <__assert_fail@plt+0x5720>
   16c9c:	mov	r5, r0
   16ca0:	mov	r0, #0
   16ca4:	cmp	r5, #0
   16ca8:	poplt	{r4, r5, r6, sl, fp, pc}
   16cac:	mov	r0, r5
   16cb0:	bl	11478 <fdopendir@plt>
   16cb4:	cmp	r0, #0
   16cb8:	strne	r5, [r4]
   16cbc:	popne	{r4, r5, r6, sl, fp, pc}
   16cc0:	bl	113d0 <__errno_location@plt>
   16cc4:	ldr	r6, [r0]
   16cc8:	mov	r4, r0
   16ccc:	mov	r0, r5
   16cd0:	bl	114e4 <close@plt>
   16cd4:	mov	r0, #0
   16cd8:	str	r6, [r4]
   16cdc:	pop	{r4, r5, r6, sl, fp, pc}
   16ce0:	push	{r4, r5, fp, lr}
   16ce4:	add	fp, sp, #8
   16ce8:	cmp	r0, #0
   16cec:	beq	16d80 <__assert_fail@plt+0x5860>
   16cf0:	mov	r1, #47	; 0x2f
   16cf4:	mov	r4, r0
   16cf8:	bl	11454 <strrchr@plt>
   16cfc:	cmp	r0, #0
   16d00:	mov	r5, r4
   16d04:	addne	r5, r0, #1
   16d08:	sub	r0, r5, r4
   16d0c:	cmp	r0, #7
   16d10:	blt	16d64 <__assert_fail@plt+0x5844>
   16d14:	movw	r1, #49692	; 0xc21c
   16d18:	sub	r0, r5, #7
   16d1c:	mov	r2, #7
   16d20:	movt	r1, #1
   16d24:	bl	114cc <strncmp@plt>
   16d28:	cmp	r0, #0
   16d2c:	bne	16d64 <__assert_fail@plt+0x5844>
   16d30:	movw	r1, #49700	; 0xc224
   16d34:	mov	r0, r5
   16d38:	mov	r2, #3
   16d3c:	movt	r1, #1
   16d40:	bl	114cc <strncmp@plt>
   16d44:	cmp	r0, #0
   16d48:	beq	16d54 <__assert_fail@plt+0x5834>
   16d4c:	mov	r4, r5
   16d50:	b	16d64 <__assert_fail@plt+0x5844>
   16d54:	movw	r0, #53624	; 0xd178
   16d58:	add	r4, r5, #3
   16d5c:	movt	r0, #2
   16d60:	str	r4, [r0]
   16d64:	movw	r0, #53628	; 0xd17c
   16d68:	movt	r0, #2
   16d6c:	str	r4, [r0]
   16d70:	movw	r0, #53688	; 0xd1b8
   16d74:	movt	r0, #2
   16d78:	str	r4, [r0]
   16d7c:	pop	{r4, r5, fp, pc}
   16d80:	movw	r0, #53640	; 0xd188
   16d84:	mov	r1, #55	; 0x37
   16d88:	mov	r2, #1
   16d8c:	movt	r0, #2
   16d90:	ldr	r3, [r0]
   16d94:	movw	r0, #49636	; 0xc1e4
   16d98:	movt	r0, #1
   16d9c:	bl	112ec <fwrite@plt>
   16da0:	bl	114d8 <abort@plt>
   16da4:	push	{r4, r5, r6, sl, fp, lr}
   16da8:	add	fp, sp, #16
   16dac:	mov	r4, r0
   16db0:	movw	r0, #53696	; 0xd1c0
   16db4:	movt	r0, #2
   16db8:	cmp	r4, #0
   16dbc:	moveq	r4, r0
   16dc0:	bl	113d0 <__errno_location@plt>
   16dc4:	ldr	r6, [r0]
   16dc8:	mov	r5, r0
   16dcc:	mov	r0, r4
   16dd0:	mov	r1, #48	; 0x30
   16dd4:	bl	19c24 <__assert_fail@plt+0x8704>
   16dd8:	str	r6, [r5]
   16ddc:	pop	{r4, r5, r6, sl, fp, pc}
   16de0:	movw	r1, #53696	; 0xd1c0
   16de4:	cmp	r0, #0
   16de8:	movt	r1, #2
   16dec:	movne	r1, r0
   16df0:	ldr	r0, [r1]
   16df4:	bx	lr
   16df8:	movw	r2, #53696	; 0xd1c0
   16dfc:	cmp	r0, #0
   16e00:	movt	r2, #2
   16e04:	movne	r2, r0
   16e08:	str	r1, [r2]
   16e0c:	bx	lr
   16e10:	movw	r3, #53696	; 0xd1c0
   16e14:	cmp	r0, #0
   16e18:	movt	r3, #2
   16e1c:	movne	r3, r0
   16e20:	ubfx	r0, r1, #5, #3
   16e24:	and	r1, r1, #31
   16e28:	add	r0, r3, r0, lsl #2
   16e2c:	ldr	r3, [r0, #8]
   16e30:	eor	r2, r2, r3, lsr r1
   16e34:	and	r2, r2, #1
   16e38:	eor	r2, r3, r2, lsl r1
   16e3c:	str	r2, [r0, #8]
   16e40:	mov	r0, #1
   16e44:	and	r0, r0, r3, lsr r1
   16e48:	bx	lr
   16e4c:	movw	r2, #53696	; 0xd1c0
   16e50:	cmp	r0, #0
   16e54:	movt	r2, #2
   16e58:	movne	r2, r0
   16e5c:	ldr	r0, [r2, #4]
   16e60:	str	r1, [r2, #4]
   16e64:	bx	lr
   16e68:	movw	r3, #53696	; 0xd1c0
   16e6c:	cmp	r0, #0
   16e70:	movt	r3, #2
   16e74:	movne	r3, r0
   16e78:	cmp	r1, #0
   16e7c:	mov	r0, #10
   16e80:	cmpne	r2, #0
   16e84:	str	r0, [r3]
   16e88:	bne	16e98 <__assert_fail@plt+0x5978>
   16e8c:	push	{fp, lr}
   16e90:	mov	fp, sp
   16e94:	bl	114d8 <abort@plt>
   16e98:	str	r1, [r3, #40]	; 0x28
   16e9c:	str	r2, [r3, #44]	; 0x2c
   16ea0:	bx	lr
   16ea4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ea8:	add	fp, sp, #28
   16eac:	sub	sp, sp, #20
   16eb0:	mov	r7, r0
   16eb4:	ldr	r0, [fp, #8]
   16eb8:	movw	r5, #53696	; 0xd1c0
   16ebc:	mov	r8, r3
   16ec0:	mov	r9, r2
   16ec4:	mov	sl, r1
   16ec8:	movt	r5, #2
   16ecc:	cmp	r0, #0
   16ed0:	movne	r5, r0
   16ed4:	bl	113d0 <__errno_location@plt>
   16ed8:	mov	r4, r0
   16edc:	ldm	r5, {r0, r1}
   16ee0:	ldr	r2, [r5, #40]	; 0x28
   16ee4:	ldr	r3, [r5, #44]	; 0x2c
   16ee8:	add	r5, r5, #8
   16eec:	ldr	r6, [r4]
   16ef0:	stm	sp, {r0, r1, r5}
   16ef4:	str	r2, [sp, #12]
   16ef8:	str	r3, [sp, #16]
   16efc:	mov	r0, r7
   16f00:	mov	r1, sl
   16f04:	mov	r2, r9
   16f08:	mov	r3, r8
   16f0c:	bl	16f1c <__assert_fail@plt+0x59fc>
   16f10:	str	r6, [r4]
   16f14:	sub	sp, fp, #28
   16f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16f20:	add	fp, sp, #28
   16f24:	sub	sp, sp, #156	; 0x9c
   16f28:	str	r0, [sp, #76]	; 0x4c
   16f2c:	ldr	r0, [fp, #12]
   16f30:	mov	r6, r1
   16f34:	str	r3, [sp, #84]	; 0x54
   16f38:	str	r2, [fp, #-84]	; 0xffffffac
   16f3c:	and	r1, r0, #4
   16f40:	str	r1, [sp, #24]
   16f44:	and	r1, r0, #1
   16f48:	str	r1, [sp, #28]
   16f4c:	ubfx	r8, r0, #1, #1
   16f50:	bl	11304 <__ctype_get_mb_cur_max@plt>
   16f54:	str	r0, [sp, #32]
   16f58:	ldr	r0, [fp, #24]
   16f5c:	ldr	r7, [fp, #8]
   16f60:	mov	r1, #0
   16f64:	mov	r2, #0
   16f68:	mov	r4, #1
   16f6c:	str	r1, [sp, #52]	; 0x34
   16f70:	str	r0, [sp, #72]	; 0x48
   16f74:	ldr	r0, [fp, #20]
   16f78:	str	r0, [sp, #68]	; 0x44
   16f7c:	mov	r0, #0
   16f80:	str	r0, [sp, #48]	; 0x30
   16f84:	mov	r0, #0
   16f88:	str	r0, [sp, #92]	; 0x5c
   16f8c:	mov	r0, #0
   16f90:	str	r0, [fp, #-76]	; 0xffffffb4
   16f94:	mov	r0, #0
   16f98:	cmp	r7, #10
   16f9c:	bhi	18284 <__assert_fail@plt+0x6d64>
   16fa0:	add	r1, pc, #28
   16fa4:	mov	sl, r6
   16fa8:	ldr	r6, [sp, #76]	; 0x4c
   16fac:	ldr	ip, [fp, #-84]	; 0xffffffac
   16fb0:	ldr	lr, [sp, #84]	; 0x54
   16fb4:	mov	r9, #0
   16fb8:	mov	r3, #1
   16fbc:	mov	r5, #0
   16fc0:	ldr	pc, [r1, r7, lsl #2]
   16fc4:	muleq	r1, r4, r0
   16fc8:	ldrdeq	r7, [r1], -r0
   16fcc:	andeq	r7, r1, r4, lsr #1
   16fd0:	andeq	r7, r1, ip, lsl #1
   16fd4:	andeq	r7, r1, r4, asr #1
   16fd8:	strdeq	r7, [r1], -r8
   16fdc:	strheq	r7, [r1], -r4
   16fe0:	andeq	r7, r1, r4, lsl #6
   16fe4:	strdeq	r6, [r1], -r0
   16fe8:	strdeq	r6, [r1], -r0
   16fec:	muleq	r1, r8, r2
   16ff0:	mov	r9, r4
   16ff4:	movw	r4, #49782	; 0xc276
   16ff8:	mov	r5, r8
   16ffc:	mov	r8, r2
   17000:	mov	r0, #0
   17004:	mov	r2, #5
   17008:	movt	r4, #1
   1700c:	mov	r1, r4
   17010:	bl	112a4 <dcgettext@plt>
   17014:	cmp	r0, r4
   17018:	str	r0, [sp, #68]	; 0x44
   1701c:	bne	171ac <__assert_fail@plt+0x5c8c>
   17020:	bl	1ac80 <__assert_fail@plt+0x9760>
   17024:	ldrb	r1, [r0]
   17028:	and	r1, r1, #223	; 0xdf
   1702c:	cmp	r1, #71	; 0x47
   17030:	beq	17178 <__assert_fail@plt+0x5c58>
   17034:	cmp	r1, #85	; 0x55
   17038:	bne	17190 <__assert_fail@plt+0x5c70>
   1703c:	ldrb	r1, [r0, #1]
   17040:	and	r1, r1, #223	; 0xdf
   17044:	cmp	r1, #84	; 0x54
   17048:	bne	17190 <__assert_fail@plt+0x5c70>
   1704c:	ldrb	r1, [r0, #2]
   17050:	and	r1, r1, #223	; 0xdf
   17054:	cmp	r1, #70	; 0x46
   17058:	bne	17190 <__assert_fail@plt+0x5c70>
   1705c:	ldrb	r1, [r0, #3]
   17060:	cmp	r1, #45	; 0x2d
   17064:	ldrbeq	r1, [r0, #4]
   17068:	cmpeq	r1, #56	; 0x38
   1706c:	bne	17190 <__assert_fail@plt+0x5c70>
   17070:	ldrb	r0, [r0, #5]
   17074:	cmp	r0, #0
   17078:	movw	r0, #49786	; 0xc27a
   1707c:	movt	r0, #1
   17080:	str	r0, [sp, #68]	; 0x44
   17084:	bne	17190 <__assert_fail@plt+0x5c70>
   17088:	b	171ac <__assert_fail@plt+0x5c8c>
   1708c:	mov	r0, #1
   17090:	b	170d0 <__assert_fail@plt+0x5bb0>
   17094:	mov	r7, #0
   17098:	mov	r9, #0
   1709c:	mov	r3, r0
   170a0:	b	17170 <__assert_fail@plt+0x5c50>
   170a4:	tst	r8, #1
   170a8:	bne	170d0 <__assert_fail@plt+0x5bb0>
   170ac:	mov	r3, r0
   170b0:	b	17128 <__assert_fail@plt+0x5c08>
   170b4:	mov	r0, #1
   170b8:	mov	r9, #0
   170bc:	mov	r7, #5
   170c0:	b	1710c <__assert_fail@plt+0x5bec>
   170c4:	mov	r3, #1
   170c8:	tst	r8, #1
   170cc:	beq	17128 <__assert_fail@plt+0x5c08>
   170d0:	mov	r1, #1
   170d4:	mov	r9, #0
   170d8:	mov	r7, #2
   170dc:	mov	r3, r0
   170e0:	mov	r5, #1
   170e4:	str	r1, [fp, #-76]	; 0xffffffb4
   170e8:	movw	r1, #49784	; 0xc278
   170ec:	movt	r1, #1
   170f0:	str	r1, [sp, #92]	; 0x5c
   170f4:	b	17304 <__assert_fail@plt+0x5de4>
   170f8:	mov	r7, #5
   170fc:	tst	r8, #1
   17100:	beq	17148 <__assert_fail@plt+0x5c28>
   17104:	mov	r0, #1
   17108:	mov	r9, #0
   1710c:	str	r0, [fp, #-76]	; 0xffffffb4
   17110:	movw	r0, #49780	; 0xc274
   17114:	mov	r3, #1
   17118:	mov	r5, #1
   1711c:	movt	r0, #1
   17120:	str	r0, [sp, #92]	; 0x5c
   17124:	b	17304 <__assert_fail@plt+0x5de4>
   17128:	cmp	sl, #0
   1712c:	mov	r9, #1
   17130:	mov	r7, #2
   17134:	movne	r0, #39	; 0x27
   17138:	strbne	r0, [r6]
   1713c:	movw	r0, #49784	; 0xc278
   17140:	movt	r0, #1
   17144:	b	17164 <__assert_fail@plt+0x5c44>
   17148:	cmp	sl, #0
   1714c:	mov	r9, #1
   17150:	mov	r3, #1
   17154:	movne	r0, #34	; 0x22
   17158:	strbne	r0, [r6]
   1715c:	movw	r0, #49780	; 0xc274
   17160:	movt	r0, #1
   17164:	str	r0, [sp, #92]	; 0x5c
   17168:	mov	r0, #1
   1716c:	str	r0, [fp, #-76]	; 0xffffffb4
   17170:	mov	r5, #0
   17174:	b	17304 <__assert_fail@plt+0x5de4>
   17178:	ldrb	r1, [r0, #1]
   1717c:	and	r1, r1, #223	; 0xdf
   17180:	cmp	r1, #66	; 0x42
   17184:	ldrbeq	r1, [r0, #2]
   17188:	cmpeq	r1, #49	; 0x31
   1718c:	beq	180ac <__assert_fail@plt+0x6b8c>
   17190:	movw	r0, #49784	; 0xc278
   17194:	movw	r1, #49780	; 0xc274
   17198:	cmp	r7, #9
   1719c:	movt	r0, #1
   171a0:	movt	r1, #1
   171a4:	moveq	r0, r1
   171a8:	str	r0, [sp, #68]	; 0x44
   171ac:	movw	r4, #49784	; 0xc278
   171b0:	mov	r0, #0
   171b4:	mov	r2, #5
   171b8:	movt	r4, #1
   171bc:	mov	r1, r4
   171c0:	bl	112a4 <dcgettext@plt>
   171c4:	cmp	r0, r4
   171c8:	str	r0, [sp, #72]	; 0x48
   171cc:	beq	171dc <__assert_fail@plt+0x5cbc>
   171d0:	mov	r4, r9
   171d4:	mov	r2, r8
   171d8:	b	17294 <__assert_fail@plt+0x5d74>
   171dc:	bl	1ac80 <__assert_fail@plt+0x9760>
   171e0:	ldrb	r1, [r0]
   171e4:	mov	r4, r9
   171e8:	and	r1, r1, #223	; 0xdf
   171ec:	cmp	r1, #71	; 0x47
   171f0:	beq	1724c <__assert_fail@plt+0x5d2c>
   171f4:	cmp	r1, #85	; 0x55
   171f8:	mov	r2, r8
   171fc:	bne	17274 <__assert_fail@plt+0x5d54>
   17200:	ldrb	r1, [r0, #1]
   17204:	and	r1, r1, #223	; 0xdf
   17208:	cmp	r1, #84	; 0x54
   1720c:	bne	17274 <__assert_fail@plt+0x5d54>
   17210:	ldrb	r1, [r0, #2]
   17214:	and	r1, r1, #223	; 0xdf
   17218:	cmp	r1, #70	; 0x46
   1721c:	ldrbeq	r1, [r0, #3]
   17220:	cmpeq	r1, #45	; 0x2d
   17224:	bne	17274 <__assert_fail@plt+0x5d54>
   17228:	ldrb	r1, [r0, #4]
   1722c:	cmp	r1, #56	; 0x38
   17230:	ldrbeq	r0, [r0, #5]
   17234:	cmpeq	r0, #0
   17238:	bne	17274 <__assert_fail@plt+0x5d54>
   1723c:	movw	r0, #49790	; 0xc27e
   17240:	movt	r0, #1
   17244:	str	r0, [sp, #72]	; 0x48
   17248:	b	17294 <__assert_fail@plt+0x5d74>
   1724c:	ldrb	r1, [r0, #1]
   17250:	mov	r2, r8
   17254:	and	r1, r1, #223	; 0xdf
   17258:	cmp	r1, #66	; 0x42
   1725c:	bne	17274 <__assert_fail@plt+0x5d54>
   17260:	ldrb	r1, [r0, #2]
   17264:	cmp	r1, #49	; 0x31
   17268:	ldrbeq	r1, [r0, #3]
   1726c:	cmpeq	r1, #56	; 0x38
   17270:	beq	180f0 <__assert_fail@plt+0x6bd0>
   17274:	movw	r0, #49784	; 0xc278
   17278:	cmp	r7, #9
   1727c:	movt	r0, #1
   17280:	mov	r1, r0
   17284:	movw	r0, #49780	; 0xc274
   17288:	movt	r0, #1
   1728c:	moveq	r1, r0
   17290:	str	r1, [sp, #72]	; 0x48
   17294:	mov	r8, r5
   17298:	mov	r9, #0
   1729c:	tst	r8, #1
   172a0:	mov	r5, r8
   172a4:	str	r2, [fp, #-48]	; 0xffffffd0
   172a8:	bne	172e0 <__assert_fail@plt+0x5dc0>
   172ac:	ldr	r0, [sp, #68]	; 0x44
   172b0:	ldrb	r0, [r0]
   172b4:	cmp	r0, #0
   172b8:	beq	172e0 <__assert_fail@plt+0x5dc0>
   172bc:	ldr	r1, [sp, #68]	; 0x44
   172c0:	mov	r9, #0
   172c4:	add	r1, r1, #1
   172c8:	cmp	r9, sl
   172cc:	strbcc	r0, [r6, r9]
   172d0:	ldrb	r0, [r1, r9]
   172d4:	add	r9, r9, #1
   172d8:	cmp	r0, #0
   172dc:	bne	172c8 <__assert_fail@plt+0x5da8>
   172e0:	ldr	r8, [sp, #72]	; 0x48
   172e4:	mov	r0, r8
   172e8:	bl	113a0 <strlen@plt>
   172ec:	ldr	ip, [fp, #-84]	; 0xffffffac
   172f0:	ldr	lr, [sp, #84]	; 0x54
   172f4:	ldr	r2, [fp, #-48]	; 0xffffffd0
   172f8:	str	r0, [fp, #-76]	; 0xffffffb4
   172fc:	str	r8, [sp, #92]	; 0x5c
   17300:	mov	r3, #1
   17304:	ldr	r0, [fp, #16]
   17308:	str	r7, [fp, #-64]	; 0xffffffc0
   1730c:	str	r5, [fp, #-72]	; 0xffffffb8
   17310:	str	r3, [sp, #80]	; 0x50
   17314:	cmp	r0, #0
   17318:	movwne	r0, #1
   1731c:	and	r0, r0, r5
   17320:	str	r0, [fp, #-88]	; 0xffffffa8
   17324:	ldr	r0, [fp, #-76]	; 0xffffffb4
   17328:	cmp	r0, #0
   1732c:	movwne	r0, #1
   17330:	subs	r7, r7, #2
   17334:	and	r1, r0, r5
   17338:	str	r7, [fp, #-80]	; 0xffffffb0
   1733c:	and	r1, r3, r1
   17340:	str	r1, [sp, #40]	; 0x28
   17344:	clz	r1, r7
   17348:	lsr	r1, r1, #5
   1734c:	and	r1, r1, r5
   17350:	eor	r5, r5, #1
   17354:	str	r1, [sp, #36]	; 0x24
   17358:	mov	r1, r7
   1735c:	str	r5, [sp, #88]	; 0x58
   17360:	mov	r7, #0
   17364:	movwne	r1, #1
   17368:	orr	r5, r1, r5
   1736c:	and	r1, r1, r3
   17370:	and	r0, r0, r1
   17374:	str	r5, [sp, #60]	; 0x3c
   17378:	str	r1, [fp, #-68]	; 0xffffffbc
   1737c:	str	r0, [fp, #-60]	; 0xffffffc4
   17380:	eor	r0, r3, #1
   17384:	str	r0, [sp, #44]	; 0x2c
   17388:	cmn	lr, #1
   1738c:	beq	1739c <__assert_fail@plt+0x5e7c>
   17390:	cmp	r7, lr
   17394:	bne	173a8 <__assert_fail@plt+0x5e88>
   17398:	b	18020 <__assert_fail@plt+0x6b00>
   1739c:	ldrb	r0, [ip, r7]
   173a0:	cmp	r0, #0
   173a4:	beq	18028 <__assert_fail@plt+0x6b08>
   173a8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   173ac:	mov	r8, #0
   173b0:	str	r4, [fp, #-52]	; 0xffffffcc
   173b4:	str	r2, [fp, #-48]	; 0xffffffd0
   173b8:	cmp	r0, #0
   173bc:	beq	173f0 <__assert_fail@plt+0x5ed0>
   173c0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   173c4:	add	r4, r7, r0
   173c8:	cmp	r0, #2
   173cc:	bcc	173e8 <__assert_fail@plt+0x5ec8>
   173d0:	cmn	lr, #1
   173d4:	bne	173e8 <__assert_fail@plt+0x5ec8>
   173d8:	mov	r0, ip
   173dc:	bl	113a0 <strlen@plt>
   173e0:	ldr	ip, [fp, #-84]	; 0xffffffac
   173e4:	mov	lr, r0
   173e8:	cmp	r4, lr
   173ec:	bls	17408 <__assert_fail@plt+0x5ee8>
   173f0:	mov	r0, #0
   173f4:	str	r0, [fp, #-56]	; 0xffffffc8
   173f8:	ldrb	r5, [ip, r7]
   173fc:	cmp	r5, #126	; 0x7e
   17400:	bls	17458 <__assert_fail@plt+0x5f38>
   17404:	b	17860 <__assert_fail@plt+0x6340>
   17408:	ldr	r1, [sp, #92]	; 0x5c
   1740c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17410:	add	r0, ip, r7
   17414:	mov	r4, lr
   17418:	bl	1128c <memcmp@plt>
   1741c:	ldr	r2, [sp, #88]	; 0x58
   17420:	cmp	r0, #0
   17424:	mov	r1, r0
   17428:	movwne	r1, #1
   1742c:	orr	r1, r1, r2
   17430:	tst	r1, #1
   17434:	beq	18134 <__assert_fail@plt+0x6c14>
   17438:	ldr	ip, [fp, #-84]	; 0xffffffac
   1743c:	clz	r0, r0
   17440:	mov	lr, r4
   17444:	lsr	r0, r0, #5
   17448:	str	r0, [fp, #-56]	; 0xffffffc8
   1744c:	ldrb	r5, [ip, r7]
   17450:	cmp	r5, #126	; 0x7e
   17454:	bhi	17860 <__assert_fail@plt+0x6340>
   17458:	add	r3, pc, #16
   1745c:	mov	r4, #1
   17460:	mov	r2, #110	; 0x6e
   17464:	mov	r0, #97	; 0x61
   17468:	mov	r1, #0
   1746c:	ldr	pc, [r3, r5, lsl #2]
   17470:	andeq	r7, r1, r0, asr #14
   17474:	andeq	r7, r1, r0, ror #16
   17478:	andeq	r7, r1, r0, ror #16
   1747c:	andeq	r7, r1, r0, ror #16
   17480:	andeq	r7, r1, r0, ror #16
   17484:	andeq	r7, r1, r0, ror #16
   17488:	andeq	r7, r1, r0, ror #16
   1748c:	andeq	r7, r1, ip, lsr r9
   17490:	andeq	r7, r1, r0, lsr #14
   17494:	andeq	r7, r1, r8, lsl #14
   17498:	andeq	r7, r1, ip, lsr #14
   1749c:			; <UNDEFINED> instruction: 0x000177bc
   174a0:	andeq	r7, r1, r0, lsl #14
   174a4:	andeq	r7, r1, r8, lsr #14
   174a8:	andeq	r7, r1, r0, ror #16
   174ac:	andeq	r7, r1, r0, ror #16
   174b0:	andeq	r7, r1, r0, ror #16
   174b4:	andeq	r7, r1, r0, ror #16
   174b8:	andeq	r7, r1, r0, ror #16
   174bc:	andeq	r7, r1, r0, ror #16
   174c0:	andeq	r7, r1, r0, ror #16
   174c4:	andeq	r7, r1, r0, ror #16
   174c8:	andeq	r7, r1, r0, ror #16
   174cc:	andeq	r7, r1, r0, ror #16
   174d0:	andeq	r7, r1, r0, ror #16
   174d4:	andeq	r7, r1, r0, ror #16
   174d8:	andeq	r7, r1, r0, ror #16
   174dc:	andeq	r7, r1, r0, ror #16
   174e0:	andeq	r7, r1, r0, ror #16
   174e4:	andeq	r7, r1, r0, ror #16
   174e8:	andeq	r7, r1, r0, ror #16
   174ec:	andeq	r7, r1, r0, ror #16
   174f0:			; <UNDEFINED> instruction: 0x000178b8
   174f4:			; <UNDEFINED> instruction: 0x000178bc
   174f8:			; <UNDEFINED> instruction: 0x000178bc
   174fc:	andeq	r7, r1, ip, lsl #13
   17500:			; <UNDEFINED> instruction: 0x000178bc
   17504:	andeq	r7, r1, ip, ror #12
   17508:			; <UNDEFINED> instruction: 0x000178bc
   1750c:	andeq	r7, r1, r4, asr #15
   17510:			; <UNDEFINED> instruction: 0x000178bc
   17514:			; <UNDEFINED> instruction: 0x000178bc
   17518:			; <UNDEFINED> instruction: 0x000178bc
   1751c:	andeq	r7, r1, ip, ror #12
   17520:	andeq	r7, r1, ip, ror #12
   17524:	andeq	r7, r1, ip, ror #12
   17528:	andeq	r7, r1, ip, ror #12
   1752c:	andeq	r7, r1, ip, ror #12
   17530:	andeq	r7, r1, ip, ror #12
   17534:	andeq	r7, r1, ip, ror #12
   17538:	andeq	r7, r1, ip, ror #12
   1753c:	andeq	r7, r1, ip, ror #12
   17540:	andeq	r7, r1, ip, ror #12
   17544:	andeq	r7, r1, ip, ror #12
   17548:	andeq	r7, r1, ip, ror #12
   1754c:	andeq	r7, r1, ip, ror #12
   17550:	andeq	r7, r1, ip, ror #12
   17554:	andeq	r7, r1, ip, ror #12
   17558:	andeq	r7, r1, ip, ror #12
   1755c:			; <UNDEFINED> instruction: 0x000178bc
   17560:			; <UNDEFINED> instruction: 0x000178bc
   17564:			; <UNDEFINED> instruction: 0x000178bc
   17568:			; <UNDEFINED> instruction: 0x000178bc
   1756c:	andeq	r7, r1, r0, lsl #15
   17570:	andeq	r7, r1, r0, ror #16
   17574:	andeq	r7, r1, ip, ror #12
   17578:	andeq	r7, r1, ip, ror #12
   1757c:	andeq	r7, r1, ip, ror #12
   17580:	andeq	r7, r1, ip, ror #12
   17584:	andeq	r7, r1, ip, ror #12
   17588:	andeq	r7, r1, ip, ror #12
   1758c:	andeq	r7, r1, ip, ror #12
   17590:	andeq	r7, r1, ip, ror #12
   17594:	andeq	r7, r1, ip, ror #12
   17598:	andeq	r7, r1, ip, ror #12
   1759c:	andeq	r7, r1, ip, ror #12
   175a0:	andeq	r7, r1, ip, ror #12
   175a4:	andeq	r7, r1, ip, ror #12
   175a8:	andeq	r7, r1, ip, ror #12
   175ac:	andeq	r7, r1, ip, ror #12
   175b0:	andeq	r7, r1, ip, ror #12
   175b4:	andeq	r7, r1, ip, ror #12
   175b8:	andeq	r7, r1, ip, ror #12
   175bc:	andeq	r7, r1, ip, ror #12
   175c0:	andeq	r7, r1, ip, ror #12
   175c4:	andeq	r7, r1, ip, ror #12
   175c8:	andeq	r7, r1, ip, ror #12
   175cc:	andeq	r7, r1, ip, ror #12
   175d0:	andeq	r7, r1, ip, ror #12
   175d4:	andeq	r7, r1, ip, ror #12
   175d8:	andeq	r7, r1, ip, ror #12
   175dc:			; <UNDEFINED> instruction: 0x000178bc
   175e0:	andeq	r7, r1, ip, asr #13
   175e4:	andeq	r7, r1, ip, ror #12
   175e8:			; <UNDEFINED> instruction: 0x000178bc
   175ec:	andeq	r7, r1, ip, ror #12
   175f0:			; <UNDEFINED> instruction: 0x000178bc
   175f4:	andeq	r7, r1, ip, ror #12
   175f8:	andeq	r7, r1, ip, ror #12
   175fc:	andeq	r7, r1, ip, ror #12
   17600:	andeq	r7, r1, ip, ror #12
   17604:	andeq	r7, r1, ip, ror #12
   17608:	andeq	r7, r1, ip, ror #12
   1760c:	andeq	r7, r1, ip, ror #12
   17610:	andeq	r7, r1, ip, ror #12
   17614:	andeq	r7, r1, ip, ror #12
   17618:	andeq	r7, r1, ip, ror #12
   1761c:	andeq	r7, r1, ip, ror #12
   17620:	andeq	r7, r1, ip, ror #12
   17624:	andeq	r7, r1, ip, ror #12
   17628:	andeq	r7, r1, ip, ror #12
   1762c:	andeq	r7, r1, ip, ror #12
   17630:	andeq	r7, r1, ip, ror #12
   17634:	andeq	r7, r1, ip, ror #12
   17638:	andeq	r7, r1, ip, ror #12
   1763c:	andeq	r7, r1, ip, ror #12
   17640:	andeq	r7, r1, ip, ror #12
   17644:	andeq	r7, r1, ip, ror #12
   17648:	andeq	r7, r1, ip, ror #12
   1764c:	andeq	r7, r1, ip, ror #12
   17650:	andeq	r7, r1, ip, ror #12
   17654:	andeq	r7, r1, ip, ror #12
   17658:	andeq	r7, r1, ip, ror #12
   1765c:	andeq	r7, r1, ip, lsr #13
   17660:			; <UNDEFINED> instruction: 0x000178bc
   17664:	andeq	r7, r1, ip, lsr #13
   17668:	andeq	r7, r1, ip, lsl #13
   1766c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17670:	cmp	r0, #0
   17674:	beq	17950 <__assert_fail@plt+0x6430>
   17678:	ldr	r0, [fp, #16]
   1767c:	cmp	r0, #0
   17680:	mov	r0, r5
   17684:	bne	17960 <__assert_fail@plt+0x6440>
   17688:	b	17980 <__assert_fail@plt+0x6460>
   1768c:	mov	r4, #0
   17690:	cmp	r7, #0
   17694:	beq	178b8 <__assert_fail@plt+0x6398>
   17698:	mov	r8, #0
   1769c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   176a0:	cmp	r0, #0
   176a4:	bne	17678 <__assert_fail@plt+0x6158>
   176a8:	b	17950 <__assert_fail@plt+0x6430>
   176ac:	mov	r4, #0
   176b0:	cmn	lr, #1
   176b4:	beq	17890 <__assert_fail@plt+0x6370>
   176b8:	cmp	r7, #0
   176bc:	bne	17698 <__assert_fail@plt+0x6178>
   176c0:	cmp	lr, #1
   176c4:	beq	178b8 <__assert_fail@plt+0x6398>
   176c8:	b	17698 <__assert_fail@plt+0x6178>
   176cc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   176d0:	cmp	r0, #2
   176d4:	bne	178e8 <__assert_fail@plt+0x63c8>
   176d8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   176dc:	tst	r0, #1
   176e0:	bne	18148 <__assert_fail@plt+0x6c28>
   176e4:	mov	r8, #0
   176e8:	mov	r0, #92	; 0x5c
   176ec:	mov	r4, #0
   176f0:	cmp	r8, #0
   176f4:	beq	17908 <__assert_fail@plt+0x63e8>
   176f8:	ldr	r2, [fp, #-48]	; 0xffffffd0
   176fc:	b	179fc <__assert_fail@plt+0x64dc>
   17700:	mov	r0, #102	; 0x66
   17704:	b	1793c <__assert_fail@plt+0x641c>
   17708:	mov	r2, #116	; 0x74
   1770c:	ldr	r0, [sp, #60]	; 0x3c
   17710:	tst	r0, #1
   17714:	mov	r0, r2
   17718:	bne	1793c <__assert_fail@plt+0x641c>
   1771c:	b	18148 <__assert_fail@plt+0x6c28>
   17720:	mov	r0, #98	; 0x62
   17724:	b	1793c <__assert_fail@plt+0x641c>
   17728:	mov	r2, #114	; 0x72
   1772c:	ldr	r0, [sp, #60]	; 0x3c
   17730:	tst	r0, #1
   17734:	mov	r0, r2
   17738:	bne	1793c <__assert_fail@plt+0x641c>
   1773c:	b	18148 <__assert_fail@plt+0x6c28>
   17740:	ldr	r0, [sp, #80]	; 0x50
   17744:	tst	r0, #1
   17748:	beq	17a24 <__assert_fail@plt+0x6504>
   1774c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17750:	tst	r0, #1
   17754:	bne	18270 <__assert_fail@plt+0x6d50>
   17758:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1775c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17760:	cmp	r0, #2
   17764:	ldr	r0, [fp, #-80]	; 0xffffffb0
   17768:	movwne	r0, #1
   1776c:	orr	r0, r0, r2
   17770:	tst	r0, #1
   17774:	beq	17d1c <__assert_fail@plt+0x67fc>
   17778:	mov	r0, r9
   1777c:	b	17d50 <__assert_fail@plt+0x6830>
   17780:	ldr	r0, [fp, #-64]	; 0xffffffc0
   17784:	mov	r8, #0
   17788:	mov	r5, #63	; 0x3f
   1778c:	cmp	r0, #5
   17790:	beq	17bd8 <__assert_fail@plt+0x66b8>
   17794:	cmp	r0, #2
   17798:	bne	17c88 <__assert_fail@plt+0x6768>
   1779c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177a0:	tst	r0, #1
   177a4:	bne	18148 <__assert_fail@plt+0x6c28>
   177a8:	mov	r4, #0
   177ac:	ldr	r0, [fp, #-68]	; 0xffffffbc
   177b0:	cmp	r0, #0
   177b4:	bne	17678 <__assert_fail@plt+0x6158>
   177b8:	b	17950 <__assert_fail@plt+0x6430>
   177bc:	mov	r0, #118	; 0x76
   177c0:	b	1793c <__assert_fail@plt+0x641c>
   177c4:	mov	r0, #1
   177c8:	mov	r5, #39	; 0x27
   177cc:	str	r0, [sp, #52]	; 0x34
   177d0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   177d4:	cmp	r0, #2
   177d8:	bne	1784c <__assert_fail@plt+0x632c>
   177dc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   177e0:	tst	r0, #1
   177e4:	bne	18148 <__assert_fail@plt+0x6c28>
   177e8:	ldr	r2, [sp, #48]	; 0x30
   177ec:	clz	r1, sl
   177f0:	mov	r8, #0
   177f4:	lsr	r1, r1, #5
   177f8:	cmp	r2, #0
   177fc:	mov	r0, r2
   17800:	movwne	r0, #1
   17804:	orrs	r0, r0, r1
   17808:	moveq	r2, sl
   1780c:	moveq	sl, r0
   17810:	cmp	r9, sl
   17814:	str	r2, [sp, #48]	; 0x30
   17818:	movcc	r0, #39	; 0x27
   1781c:	strbcc	r0, [r6, r9]
   17820:	add	r0, r9, #1
   17824:	cmp	r0, sl
   17828:	movcc	r1, #92	; 0x5c
   1782c:	strbcc	r1, [r6, r0]
   17830:	add	r0, r9, #2
   17834:	add	r9, r9, #3
   17838:	cmp	r0, sl
   1783c:	movcc	r1, #39	; 0x27
   17840:	strbcc	r1, [r6, r0]
   17844:	mov	r0, #0
   17848:	str	r0, [fp, #-48]	; 0xffffffd0
   1784c:	mov	r4, #1
   17850:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17854:	cmp	r0, #0
   17858:	bne	17678 <__assert_fail@plt+0x6158>
   1785c:	b	17950 <__assert_fail@plt+0x6430>
   17860:	ldr	r0, [sp, #32]
   17864:	cmp	r0, #1
   17868:	bne	17a54 <__assert_fail@plt+0x6534>
   1786c:	str	lr, [sp, #84]	; 0x54
   17870:	bl	1137c <__ctype_b_loc@plt>
   17874:	ldr	r0, [r0]
   17878:	ldr	ip, [fp, #-84]	; 0xffffffac
   1787c:	mov	r1, #1
   17880:	add	r0, r0, r5, lsl #1
   17884:	ldrb	r0, [r0, #1]
   17888:	ubfx	r4, r0, #6, #1
   1788c:	b	17e4c <__assert_fail@plt+0x692c>
   17890:	cmp	r7, #0
   17894:	ldrbeq	r0, [ip, #1]
   17898:	cmpeq	r0, #0
   1789c:	beq	178b8 <__assert_fail@plt+0x6398>
   178a0:	mvn	lr, #0
   178a4:	mov	r8, #0
   178a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178ac:	cmp	r0, #0
   178b0:	bne	17678 <__assert_fail@plt+0x6158>
   178b4:	b	17950 <__assert_fail@plt+0x6430>
   178b8:	mov	r1, #1
   178bc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   178c0:	cmp	r0, #2
   178c4:	bne	178d4 <__assert_fail@plt+0x63b4>
   178c8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   178cc:	tst	r0, #1
   178d0:	bne	18148 <__assert_fail@plt+0x6c28>
   178d4:	mov	r4, r1
   178d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   178dc:	cmp	r0, #0
   178e0:	bne	17678 <__assert_fail@plt+0x6158>
   178e4:	b	17950 <__assert_fail@plt+0x6430>
   178e8:	ldr	r1, [sp, #40]	; 0x28
   178ec:	mov	r8, #0
   178f0:	mov	r0, #92	; 0x5c
   178f4:	cmp	r1, #0
   178f8:	beq	1793c <__assert_fail@plt+0x641c>
   178fc:	mov	r4, #0
   17900:	cmp	r8, #0
   17904:	bne	176f8 <__assert_fail@plt+0x61d8>
   17908:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1790c:	tst	r2, #1
   17910:	beq	179fc <__assert_fail@plt+0x64dc>
   17914:	cmp	r9, sl
   17918:	movcc	r1, #39	; 0x27
   1791c:	strbcc	r1, [r6, r9]
   17920:	add	r1, r9, #1
   17924:	add	r9, r9, #2
   17928:	cmp	r1, sl
   1792c:	movcc	r2, #39	; 0x27
   17930:	strbcc	r2, [r6, r1]
   17934:	mov	r2, #0
   17938:	b	179fc <__assert_fail@plt+0x64dc>
   1793c:	ldr	r1, [sp, #80]	; 0x50
   17940:	mov	r4, #0
   17944:	mov	r8, #0
   17948:	tst	r1, #1
   1794c:	bne	1798c <__assert_fail@plt+0x646c>
   17950:	ldr	r0, [fp, #-88]	; 0xffffffa8
   17954:	cmp	r0, #0
   17958:	mov	r0, r5
   1795c:	beq	17980 <__assert_fail@plt+0x6460>
   17960:	ldr	r1, [fp, #16]
   17964:	ubfx	r0, r5, #5, #3
   17968:	mov	r2, #1
   1796c:	ldr	r0, [r1, r0, lsl #2]
   17970:	and	r1, r5, #31
   17974:	tst	r0, r2, lsl r1
   17978:	mov	r0, r5
   1797c:	bne	1798c <__assert_fail@plt+0x646c>
   17980:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17984:	cmp	r1, #0
   17988:	beq	17de4 <__assert_fail@plt+0x68c4>
   1798c:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17990:	tst	r1, #1
   17994:	bne	18128 <__assert_fail@plt+0x6c08>
   17998:	ldr	r1, [fp, #-64]	; 0xffffffc0
   1799c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   179a0:	cmp	r1, #2
   179a4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   179a8:	movwne	r1, #1
   179ac:	orr	r1, r1, r2
   179b0:	tst	r1, #1
   179b4:	bne	179ec <__assert_fail@plt+0x64cc>
   179b8:	cmp	r9, sl
   179bc:	movcc	r1, #39	; 0x27
   179c0:	strbcc	r1, [r6, r9]
   179c4:	add	r1, r9, #1
   179c8:	cmp	r1, sl
   179cc:	movcc	r2, #36	; 0x24
   179d0:	strbcc	r2, [r6, r1]
   179d4:	add	r1, r9, #2
   179d8:	add	r9, r9, #3
   179dc:	cmp	r1, sl
   179e0:	movcc	r2, #39	; 0x27
   179e4:	strbcc	r2, [r6, r1]
   179e8:	mov	r2, #1
   179ec:	cmp	r9, sl
   179f0:	movcc	r1, #92	; 0x5c
   179f4:	strbcc	r1, [r6, r9]
   179f8:	add	r9, r9, #1
   179fc:	cmp	r9, sl
   17a00:	add	r7, r7, #1
   17a04:	strbcc	r0, [r6, r9]
   17a08:	ldr	r0, [fp, #-52]	; 0xffffffcc
   17a0c:	add	r9, r9, #1
   17a10:	and	r0, r0, r4
   17a14:	mov	r4, r0
   17a18:	cmn	lr, #1
   17a1c:	bne	17390 <__assert_fail@plt+0x5e70>
   17a20:	b	1739c <__assert_fail@plt+0x5e7c>
   17a24:	ldr	r0, [sp, #28]
   17a28:	mov	r4, #0
   17a2c:	mov	r8, #0
   17a30:	mov	r5, #0
   17a34:	cmp	r0, #0
   17a38:	beq	17950 <__assert_fail@plt+0x6430>
   17a3c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   17a40:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17a44:	add	r7, r7, #1
   17a48:	cmn	lr, #1
   17a4c:	bne	17390 <__assert_fail@plt+0x5e70>
   17a50:	b	1739c <__assert_fail@plt+0x5e7c>
   17a54:	mov	r0, #0
   17a58:	cmn	lr, #1
   17a5c:	str	r0, [fp, #-36]	; 0xffffffdc
   17a60:	str	r0, [fp, #-40]	; 0xffffffd8
   17a64:	bne	17a78 <__assert_fail@plt+0x6558>
   17a68:	mov	r0, ip
   17a6c:	bl	113a0 <strlen@plt>
   17a70:	ldr	ip, [fp, #-84]	; 0xffffffac
   17a74:	mov	lr, r0
   17a78:	ldr	r0, [sp, #36]	; 0x24
   17a7c:	str	sl, [sp, #56]	; 0x38
   17a80:	str	lr, [sp, #84]	; 0x54
   17a84:	cmp	r0, #0
   17a88:	beq	17ca0 <__assert_fail@plt+0x6780>
   17a8c:	add	r0, ip, r7
   17a90:	mov	r4, #1
   17a94:	mov	r6, #0
   17a98:	sub	sl, fp, #40	; 0x28
   17a9c:	str	r0, [sp, #20]
   17aa0:	str	r6, [sp, #64]	; 0x40
   17aa4:	add	r6, r6, r7
   17aa8:	sub	r0, fp, #44	; 0x2c
   17aac:	mov	r3, sl
   17ab0:	add	r1, ip, r6
   17ab4:	sub	r2, lr, r6
   17ab8:	bl	1acb8 <__assert_fail@plt+0x9798>
   17abc:	cmn	r0, #2
   17ac0:	beq	17dfc <__assert_fail@plt+0x68dc>
   17ac4:	ldr	sl, [sp, #56]	; 0x38
   17ac8:	cmn	r0, #1
   17acc:	beq	17df0 <__assert_fail@plt+0x68d0>
   17ad0:	cmp	r0, #0
   17ad4:	beq	17df4 <__assert_fail@plt+0x68d4>
   17ad8:	cmp	r0, #2
   17adc:	bcc	17b9c <__assert_fail@plt+0x667c>
   17ae0:	ldr	r1, [sp, #64]	; 0x40
   17ae4:	ldr	r2, [sp, #20]
   17ae8:	add	r1, r2, r1
   17aec:	mov	r2, #1
   17af0:	ldrb	r3, [r1, r2]
   17af4:	sub	r3, r3, #91	; 0x5b
   17af8:	cmp	r3, #33	; 0x21
   17afc:	bhi	17b90 <__assert_fail@plt+0x6670>
   17b00:	add	r6, pc, #0
   17b04:	ldr	pc, [r6, r3, lsl #2]
   17b08:	andeq	r8, r1, r4, asr r1
   17b0c:	andeq	r8, r1, r4, asr r1
   17b10:	muleq	r1, r0, fp
   17b14:	andeq	r8, r1, r4, asr r1
   17b18:	muleq	r1, r0, fp
   17b1c:	andeq	r8, r1, r4, asr r1
   17b20:	muleq	r1, r0, fp
   17b24:	muleq	r1, r0, fp
   17b28:	muleq	r1, r0, fp
   17b2c:	muleq	r1, r0, fp
   17b30:	muleq	r1, r0, fp
   17b34:	muleq	r1, r0, fp
   17b38:	muleq	r1, r0, fp
   17b3c:	muleq	r1, r0, fp
   17b40:	muleq	r1, r0, fp
   17b44:	muleq	r1, r0, fp
   17b48:	muleq	r1, r0, fp
   17b4c:	muleq	r1, r0, fp
   17b50:	muleq	r1, r0, fp
   17b54:	muleq	r1, r0, fp
   17b58:	muleq	r1, r0, fp
   17b5c:	muleq	r1, r0, fp
   17b60:	muleq	r1, r0, fp
   17b64:	muleq	r1, r0, fp
   17b68:	muleq	r1, r0, fp
   17b6c:	muleq	r1, r0, fp
   17b70:	muleq	r1, r0, fp
   17b74:	muleq	r1, r0, fp
   17b78:	muleq	r1, r0, fp
   17b7c:	muleq	r1, r0, fp
   17b80:	muleq	r1, r0, fp
   17b84:	muleq	r1, r0, fp
   17b88:	muleq	r1, r0, fp
   17b8c:	andeq	r8, r1, r4, asr r1
   17b90:	add	r2, r2, #1
   17b94:	cmp	r2, r0
   17b98:	bcc	17af0 <__assert_fail@plt+0x65d0>
   17b9c:	ldr	r6, [sp, #64]	; 0x40
   17ba0:	add	r6, r0, r6
   17ba4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17ba8:	bl	112d4 <iswprint@plt>
   17bac:	cmp	r0, #0
   17bb0:	sub	sl, fp, #40	; 0x28
   17bb4:	movwne	r0, #1
   17bb8:	and	r4, r4, r0
   17bbc:	mov	r0, sl
   17bc0:	bl	11280 <mbsinit@plt>
   17bc4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17bc8:	ldr	lr, [sp, #84]	; 0x54
   17bcc:	cmp	r0, #0
   17bd0:	beq	17aa0 <__assert_fail@plt+0x6580>
   17bd4:	b	17e40 <__assert_fail@plt+0x6920>
   17bd8:	ldr	r0, [sp, #24]
   17bdc:	cmp	r0, #0
   17be0:	beq	17c88 <__assert_fail@plt+0x6768>
   17be4:	add	r0, r7, #2
   17be8:	cmp	r0, lr
   17bec:	bcs	17c88 <__assert_fail@plt+0x6768>
   17bf0:	add	r1, ip, r7
   17bf4:	ldrb	r1, [r1, #1]
   17bf8:	cmp	r1, #63	; 0x3f
   17bfc:	bne	17c88 <__assert_fail@plt+0x6768>
   17c00:	ldrb	r5, [ip, r0]
   17c04:	sub	r1, r5, #33	; 0x21
   17c08:	cmp	r1, #29
   17c0c:	bhi	17c88 <__assert_fail@plt+0x6768>
   17c10:	movw	r3, #20929	; 0x51c1
   17c14:	mov	r2, #1
   17c18:	movt	r3, #14336	; 0x3800
   17c1c:	tst	r3, r2, lsl r1
   17c20:	beq	17c88 <__assert_fail@plt+0x6768>
   17c24:	ldr	r1, [fp, #-72]	; 0xffffffb8
   17c28:	tst	r1, #1
   17c2c:	bne	18278 <__assert_fail@plt+0x6d58>
   17c30:	cmp	r9, sl
   17c34:	mov	r7, r0
   17c38:	mov	r4, #0
   17c3c:	movcc	r1, #63	; 0x3f
   17c40:	strbcc	r1, [r6, r9]
   17c44:	add	r1, r9, #1
   17c48:	cmp	r1, sl
   17c4c:	movcc	r2, #34	; 0x22
   17c50:	strbcc	r2, [r6, r1]
   17c54:	add	r1, r9, #2
   17c58:	cmp	r1, sl
   17c5c:	movcc	r2, #34	; 0x22
   17c60:	strbcc	r2, [r6, r1]
   17c64:	add	r1, r9, #3
   17c68:	add	r9, r9, #4
   17c6c:	cmp	r1, sl
   17c70:	movcc	r2, #63	; 0x3f
   17c74:	strbcc	r2, [r6, r1]
   17c78:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c7c:	cmp	r0, #0
   17c80:	bne	17678 <__assert_fail@plt+0x6158>
   17c84:	b	17950 <__assert_fail@plt+0x6430>
   17c88:	mov	r5, #63	; 0x3f
   17c8c:	mov	r4, #0
   17c90:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17c94:	cmp	r0, #0
   17c98:	bne	17678 <__assert_fail@plt+0x6158>
   17c9c:	b	17950 <__assert_fail@plt+0x6430>
   17ca0:	mov	r4, #1
   17ca4:	mov	r6, #0
   17ca8:	sub	sl, fp, #40	; 0x28
   17cac:	str	r6, [sp, #64]	; 0x40
   17cb0:	add	r6, r6, r7
   17cb4:	sub	r0, fp, #44	; 0x2c
   17cb8:	mov	r3, sl
   17cbc:	add	r1, ip, r6
   17cc0:	sub	r2, lr, r6
   17cc4:	bl	1acb8 <__assert_fail@plt+0x9798>
   17cc8:	cmn	r0, #2
   17ccc:	beq	17dfc <__assert_fail@plt+0x68dc>
   17cd0:	cmn	r0, #1
   17cd4:	beq	17df0 <__assert_fail@plt+0x68d0>
   17cd8:	ldr	r6, [sp, #64]	; 0x40
   17cdc:	cmp	r0, #0
   17ce0:	beq	17e3c <__assert_fail@plt+0x691c>
   17ce4:	add	r6, r0, r6
   17ce8:	ldr	r0, [fp, #-44]	; 0xffffffd4
   17cec:	bl	112d4 <iswprint@plt>
   17cf0:	cmp	r0, #0
   17cf4:	sub	sl, fp, #40	; 0x28
   17cf8:	movwne	r0, #1
   17cfc:	and	r4, r4, r0
   17d00:	mov	r0, sl
   17d04:	bl	11280 <mbsinit@plt>
   17d08:	ldr	ip, [fp, #-84]	; 0xffffffac
   17d0c:	ldr	lr, [sp, #84]	; 0x54
   17d10:	cmp	r0, #0
   17d14:	beq	17cac <__assert_fail@plt+0x678c>
   17d18:	b	17e40 <__assert_fail@plt+0x6920>
   17d1c:	cmp	r9, sl
   17d20:	mov	r2, #1
   17d24:	movcc	r0, #39	; 0x27
   17d28:	strbcc	r0, [r6, r9]
   17d2c:	add	r0, r9, #1
   17d30:	cmp	r0, sl
   17d34:	movcc	r1, #36	; 0x24
   17d38:	strbcc	r1, [r6, r0]
   17d3c:	add	r0, r9, #2
   17d40:	cmp	r0, sl
   17d44:	movcc	r1, #39	; 0x27
   17d48:	strbcc	r1, [r6, r0]
   17d4c:	add	r0, r9, #3
   17d50:	cmp	r0, sl
   17d54:	add	r9, r0, #1
   17d58:	str	r2, [fp, #-48]	; 0xffffffd0
   17d5c:	movcc	r1, #92	; 0x5c
   17d60:	strbcc	r1, [r6, r0]
   17d64:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17d68:	cmp	r1, #2
   17d6c:	beq	17dcc <__assert_fail@plt+0x68ac>
   17d70:	add	r1, r7, #1
   17d74:	mov	r4, #0
   17d78:	mov	r8, #1
   17d7c:	mov	r5, #48	; 0x30
   17d80:	cmp	r1, lr
   17d84:	bcs	1766c <__assert_fail@plt+0x614c>
   17d88:	ldrb	r1, [ip, r1]
   17d8c:	sub	r1, r1, #48	; 0x30
   17d90:	uxtb	r1, r1
   17d94:	cmp	r1, #9
   17d98:	bhi	1766c <__assert_fail@plt+0x614c>
   17d9c:	cmp	r9, sl
   17da0:	movcc	r1, #48	; 0x30
   17da4:	strbcc	r1, [r6, r9]
   17da8:	add	r1, r0, #2
   17dac:	add	r9, r0, #3
   17db0:	cmp	r1, sl
   17db4:	movcc	r2, #48	; 0x30
   17db8:	strbcc	r2, [r6, r1]
   17dbc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17dc0:	cmp	r0, #0
   17dc4:	bne	17678 <__assert_fail@plt+0x6158>
   17dc8:	b	17950 <__assert_fail@plt+0x6430>
   17dcc:	mov	r0, #48	; 0x30
   17dd0:	mov	r8, #1
   17dd4:	mov	r4, #0
   17dd8:	ldr	r1, [fp, #-56]	; 0xffffffc8
   17ddc:	cmp	r1, #0
   17de0:	bne	1798c <__assert_fail@plt+0x646c>
   17de4:	cmp	r8, #0
   17de8:	beq	17908 <__assert_fail@plt+0x63e8>
   17dec:	b	176f8 <__assert_fail@plt+0x61d8>
   17df0:	mov	r4, #0
   17df4:	ldr	ip, [fp, #-84]	; 0xffffffac
   17df8:	b	17e34 <__assert_fail@plt+0x6914>
   17dfc:	ldr	r1, [sp, #84]	; 0x54
   17e00:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e04:	mov	r4, #0
   17e08:	cmp	r6, r1
   17e0c:	bcs	17e34 <__assert_fail@plt+0x6914>
   17e10:	ldrb	r0, [ip, r6]
   17e14:	cmp	r0, #0
   17e18:	beq	17e34 <__assert_fail@plt+0x6914>
   17e1c:	ldr	r0, [sp, #64]	; 0x40
   17e20:	add	r0, r0, #1
   17e24:	add	r6, r0, r7
   17e28:	str	r0, [sp, #64]	; 0x40
   17e2c:	cmp	r6, r1
   17e30:	bcc	17e10 <__assert_fail@plt+0x68f0>
   17e34:	ldr	r6, [sp, #64]	; 0x40
   17e38:	b	17e40 <__assert_fail@plt+0x6920>
   17e3c:	ldr	ip, [fp, #-84]	; 0xffffffac
   17e40:	mov	r1, r6
   17e44:	ldr	r6, [sp, #76]	; 0x4c
   17e48:	ldr	sl, [sp, #56]	; 0x38
   17e4c:	ldr	r0, [sp, #44]	; 0x2c
   17e50:	cmp	r1, #1
   17e54:	orr	r2, r4, r0
   17e58:	mov	r0, r1
   17e5c:	bhi	17e7c <__assert_fail@plt+0x695c>
   17e60:	tst	r2, #1
   17e64:	beq	17e7c <__assert_fail@plt+0x695c>
   17e68:	ldr	lr, [sp, #84]	; 0x54
   17e6c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   17e70:	cmp	r0, #0
   17e74:	bne	17678 <__assert_fail@plt+0x6158>
   17e78:	b	17950 <__assert_fail@plt+0x6430>
   17e7c:	str	r2, [sp, #64]	; 0x40
   17e80:	add	r0, r0, r7
   17e84:	add	r1, r7, #1
   17e88:	ldr	lr, [sp, #84]	; 0x54
   17e8c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17e90:	ldr	r2, [fp, #-48]	; 0xffffffd0
   17e94:	mov	r3, #0
   17e98:	str	r0, [sp, #56]	; 0x38
   17e9c:	ldr	r0, [sp, #64]	; 0x40
   17ea0:	tst	r0, #1
   17ea4:	bne	17f8c <__assert_fail@plt+0x6a6c>
   17ea8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   17eac:	tst	r0, #1
   17eb0:	bne	1812c <__assert_fail@plt+0x6c0c>
   17eb4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   17eb8:	cmp	r7, #2
   17ebc:	movwne	r3, #1
   17ec0:	orr	r3, r3, r2
   17ec4:	tst	r3, #1
   17ec8:	bne	17f00 <__assert_fail@plt+0x69e0>
   17ecc:	cmp	r9, sl
   17ed0:	add	r3, r9, #1
   17ed4:	movcc	r2, #39	; 0x27
   17ed8:	strbcc	r2, [r6, r9]
   17edc:	cmp	r3, sl
   17ee0:	movcc	r2, #36	; 0x24
   17ee4:	strbcc	r2, [r6, r3]
   17ee8:	add	r3, r9, #2
   17eec:	add	r9, r9, #3
   17ef0:	cmp	r3, sl
   17ef4:	movcc	r2, #39	; 0x27
   17ef8:	strbcc	r2, [r6, r3]
   17efc:	mov	r2, #1
   17f00:	cmp	r9, sl
   17f04:	mov	r0, r2
   17f08:	movcc	r3, #92	; 0x5c
   17f0c:	strbcc	r3, [r6, r9]
   17f10:	add	r3, r9, #1
   17f14:	cmp	r3, sl
   17f18:	andcc	r7, r5, #192	; 0xc0
   17f1c:	movcc	r2, #48	; 0x30
   17f20:	orrcc	r7, r2, r7, lsr #6
   17f24:	strbcc	r7, [r6, r3]
   17f28:	add	r3, r9, #2
   17f2c:	add	r9, r9, #3
   17f30:	cmp	r3, sl
   17f34:	lsrcc	r7, r5, #3
   17f38:	movcc	r2, #6
   17f3c:	bficc	r7, r2, #3, #29
   17f40:	mov	r2, #6
   17f44:	strbcc	r7, [r6, r3]
   17f48:	bfi	r5, r2, #3, #29
   17f4c:	mov	r3, #1
   17f50:	mov	r2, r0
   17f54:	ldr	r0, [sp, #56]	; 0x38
   17f58:	and	r8, r3, #1
   17f5c:	cmp	r0, r1
   17f60:	bhi	17fc0 <__assert_fail@plt+0x6aa0>
   17f64:	b	18000 <__assert_fail@plt+0x6ae0>
   17f68:	cmp	r9, sl
   17f6c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   17f70:	strbcc	r5, [r6, r9]
   17f74:	add	r9, r9, #1
   17f78:	ldrb	r5, [ip, r1]
   17f7c:	add	r1, r1, #1
   17f80:	ldr	r0, [sp, #64]	; 0x40
   17f84:	tst	r0, #1
   17f88:	beq	17ea8 <__assert_fail@plt+0x6988>
   17f8c:	ldr	r7, [fp, #-56]	; 0xffffffc8
   17f90:	tst	r7, #1
   17f94:	beq	17fa8 <__assert_fail@plt+0x6a88>
   17f98:	cmp	r9, sl
   17f9c:	movcc	r7, #92	; 0x5c
   17fa0:	strbcc	r7, [r6, r9]
   17fa4:	add	r9, r9, #1
   17fa8:	mov	r7, #0
   17fac:	str	r7, [fp, #-56]	; 0xffffffc8
   17fb0:	ldr	r0, [sp, #56]	; 0x38
   17fb4:	and	r8, r3, #1
   17fb8:	cmp	r0, r1
   17fbc:	bls	18000 <__assert_fail@plt+0x6ae0>
   17fc0:	cmp	r8, #0
   17fc4:	mvn	r7, r2
   17fc8:	movwne	r8, #1
   17fcc:	orr	r7, r7, r8
   17fd0:	tst	r7, #1
   17fd4:	bne	17f68 <__assert_fail@plt+0x6a48>
   17fd8:	cmp	r9, sl
   17fdc:	movcc	r7, #39	; 0x27
   17fe0:	strbcc	r7, [r6, r9]
   17fe4:	add	r7, r9, #1
   17fe8:	add	r9, r9, #2
   17fec:	cmp	r7, sl
   17ff0:	movcc	r2, #39	; 0x27
   17ff4:	strbcc	r2, [r6, r7]
   17ff8:	mov	r2, #0
   17ffc:	b	17f68 <__assert_fail@plt+0x6a48>
   18000:	cmp	r8, #0
   18004:	sub	r7, r1, #1
   18008:	mov	r0, r5
   1800c:	str	r2, [fp, #-48]	; 0xffffffd0
   18010:	movwne	r8, #1
   18014:	cmp	r8, #0
   18018:	beq	17908 <__assert_fail@plt+0x63e8>
   1801c:	b	176f8 <__assert_fail@plt+0x61d8>
   18020:	mov	lr, r7
   18024:	b	1802c <__assert_fail@plt+0x6b0c>
   18028:	mvn	lr, #0
   1802c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18030:	ldr	r1, [fp, #-72]	; 0xffffffb8
   18034:	eor	r0, r7, #2
   18038:	orr	r0, r0, r9
   1803c:	clz	r0, r0
   18040:	lsr	r0, r0, #5
   18044:	tst	r1, r0
   18048:	bne	18148 <__assert_fail@plt+0x6c28>
   1804c:	mov	r0, r1
   18050:	ldr	r1, [fp, #-80]	; 0xffffffb0
   18054:	cmp	r7, #2
   18058:	movwne	r1, #1
   1805c:	orr	r0, r0, r1
   18060:	tst	r0, #1
   18064:	ldreq	r0, [sp, #52]	; 0x34
   18068:	streq	lr, [sp, #84]	; 0x54
   1806c:	eoreq	r0, r0, #1
   18070:	tsteq	r0, #1
   18074:	bne	1820c <__assert_fail@plt+0x6cec>
   18078:	tst	r4, #1
   1807c:	bne	181c8 <__assert_fail@plt+0x6ca8>
   18080:	ldr	r6, [sp, #48]	; 0x30
   18084:	mov	r8, #0
   18088:	cmp	r6, #0
   1808c:	beq	18204 <__assert_fail@plt+0x6ce4>
   18090:	ldr	r0, [sp, #80]	; 0x50
   18094:	mov	r1, #0
   18098:	cmp	sl, #0
   1809c:	mov	r4, #0
   180a0:	str	r1, [fp, #-72]	; 0xffffffb8
   180a4:	beq	16f98 <__assert_fail@plt+0x5a78>
   180a8:	b	1820c <__assert_fail@plt+0x6cec>
   180ac:	ldrb	r1, [r0, #3]
   180b0:	cmp	r1, #56	; 0x38
   180b4:	ldrbeq	r1, [r0, #4]
   180b8:	cmpeq	r1, #48	; 0x30
   180bc:	bne	17190 <__assert_fail@plt+0x5c70>
   180c0:	ldrb	r1, [r0, #5]
   180c4:	cmp	r1, #51	; 0x33
   180c8:	ldrbeq	r1, [r0, #6]
   180cc:	cmpeq	r1, #48	; 0x30
   180d0:	bne	17190 <__assert_fail@plt+0x5c70>
   180d4:	ldrb	r0, [r0, #7]
   180d8:	cmp	r0, #0
   180dc:	movw	r0, #49794	; 0xc282
   180e0:	movt	r0, #1
   180e4:	str	r0, [sp, #68]	; 0x44
   180e8:	bne	17190 <__assert_fail@plt+0x5c70>
   180ec:	b	171ac <__assert_fail@plt+0x5c8c>
   180f0:	ldrb	r1, [r0, #4]
   180f4:	cmp	r1, #48	; 0x30
   180f8:	ldrbeq	r1, [r0, #5]
   180fc:	cmpeq	r1, #51	; 0x33
   18100:	bne	17274 <__assert_fail@plt+0x5d54>
   18104:	ldrb	r1, [r0, #6]
   18108:	cmp	r1, #48	; 0x30
   1810c:	ldrbeq	r0, [r0, #7]
   18110:	cmpeq	r0, #0
   18114:	bne	17274 <__assert_fail@plt+0x5d54>
   18118:	movw	r0, #49798	; 0xc286
   1811c:	movt	r0, #1
   18120:	str	r0, [sp, #72]	; 0x48
   18124:	b	17294 <__assert_fail@plt+0x5d74>
   18128:	ldr	r7, [fp, #-64]	; 0xffffffc0
   1812c:	ldr	r2, [sp, #80]	; 0x50
   18130:	b	18168 <__assert_fail@plt+0x6c48>
   18134:	ldr	ip, [fp, #-84]	; 0xffffffac
   18138:	mov	r2, #1
   1813c:	mov	lr, r4
   18140:	ldr	r7, [fp, #-64]	; 0xffffffc0
   18144:	b	18168 <__assert_fail@plt+0x6c48>
   18148:	ldr	r2, [sp, #80]	; 0x50
   1814c:	mov	r7, #2
   18150:	b	18168 <__assert_fail@plt+0x6c48>
   18154:	ldr	r6, [sp, #76]	; 0x4c
   18158:	ldr	ip, [fp, #-84]	; 0xffffffac
   1815c:	ldr	lr, [sp, #84]	; 0x54
   18160:	ldr	r2, [sp, #80]	; 0x50
   18164:	mov	r7, #2
   18168:	mov	r0, #0
   1816c:	ldr	r1, [fp, #12]
   18170:	tst	r2, #1
   18174:	mov	r2, r7
   18178:	mov	r3, lr
   1817c:	str	r0, [sp, #8]
   18180:	ldr	r0, [sp, #68]	; 0x44
   18184:	movwne	r2, #4
   18188:	cmp	r7, #2
   1818c:	movne	r2, r7
   18190:	str	r2, [sp]
   18194:	mov	r2, ip
   18198:	bic	r1, r1, #2
   1819c:	str	r0, [sp, #12]
   181a0:	ldr	r0, [sp, #72]	; 0x48
   181a4:	str	r1, [sp, #4]
   181a8:	mov	r1, sl
   181ac:	str	r0, [sp, #16]
   181b0:	mov	r0, r6
   181b4:	bl	16f1c <__assert_fail@plt+0x59fc>
   181b8:	mov	r9, r0
   181bc:	mov	r0, r9
   181c0:	sub	sp, fp, #28
   181c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181c8:	mov	r0, #5
   181cc:	ldr	r1, [sp, #48]	; 0x30
   181d0:	ldr	r2, [fp, #-84]	; 0xffffffac
   181d4:	ldr	r3, [sp, #84]	; 0x54
   181d8:	str	r0, [sp]
   181dc:	ldr	r0, [fp, #12]
   181e0:	str	r0, [sp, #4]
   181e4:	ldr	r0, [fp, #16]
   181e8:	str	r0, [sp, #8]
   181ec:	ldr	r0, [sp, #68]	; 0x44
   181f0:	str	r0, [sp, #12]
   181f4:	ldr	r0, [sp, #72]	; 0x48
   181f8:	str	r0, [sp, #16]
   181fc:	ldr	r0, [sp, #76]	; 0x4c
   18200:	b	181b4 <__assert_fail@plt+0x6c94>
   18204:	mov	r0, #0
   18208:	str	r0, [fp, #-72]	; 0xffffffb8
   1820c:	ldr	r1, [sp, #92]	; 0x5c
   18210:	cmp	r1, #0
   18214:	beq	18254 <__assert_fail@plt+0x6d34>
   18218:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1821c:	ldr	r2, [sp, #76]	; 0x4c
   18220:	tst	r0, #1
   18224:	bne	18258 <__assert_fail@plt+0x6d38>
   18228:	ldrb	r0, [r1]
   1822c:	cmp	r0, #0
   18230:	beq	18258 <__assert_fail@plt+0x6d38>
   18234:	add	r1, r1, #1
   18238:	cmp	r9, sl
   1823c:	strbcc	r0, [r2, r9]
   18240:	add	r9, r9, #1
   18244:	ldrb	r0, [r1], #1
   18248:	cmp	r0, #0
   1824c:	bne	18238 <__assert_fail@plt+0x6d18>
   18250:	b	18258 <__assert_fail@plt+0x6d38>
   18254:	ldr	r2, [sp, #76]	; 0x4c
   18258:	cmp	r9, sl
   1825c:	movcc	r0, #0
   18260:	strbcc	r0, [r2, r9]
   18264:	mov	r0, r9
   18268:	sub	sp, fp, #28
   1826c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18270:	mov	r2, #1
   18274:	b	18140 <__assert_fail@plt+0x6c20>
   18278:	ldr	r2, [sp, #80]	; 0x50
   1827c:	mov	r7, #5
   18280:	b	18168 <__assert_fail@plt+0x6c48>
   18284:	bl	114d8 <abort@plt>
   18288:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1828c:	add	fp, sp, #28
   18290:	sub	sp, sp, #28
   18294:	movw	r5, #53696	; 0xd1c0
   18298:	cmp	r2, #0
   1829c:	mov	r4, r1
   182a0:	mov	r7, r0
   182a4:	str	r0, [sp, #20]
   182a8:	movt	r5, #2
   182ac:	movne	r5, r2
   182b0:	bl	113d0 <__errno_location@plt>
   182b4:	mov	sl, r0
   182b8:	ldm	r5, {r0, r1}
   182bc:	ldr	r2, [r5, #40]	; 0x28
   182c0:	ldr	r3, [r5, #44]	; 0x2c
   182c4:	add	r9, r5, #8
   182c8:	ldr	r6, [sl]
   182cc:	orr	r8, r1, #1
   182d0:	mov	r1, #0
   182d4:	str	r6, [sp, #24]
   182d8:	stm	sp, {r0, r8, r9}
   182dc:	str	r2, [sp, #12]
   182e0:	str	r3, [sp, #16]
   182e4:	mov	r0, #0
   182e8:	mov	r2, r7
   182ec:	mov	r3, r4
   182f0:	mov	r6, r4
   182f4:	bl	16f1c <__assert_fail@plt+0x59fc>
   182f8:	add	r7, r0, #1
   182fc:	mov	r0, r7
   18300:	bl	197f4 <__assert_fail@plt+0x82d4>
   18304:	mov	r4, r0
   18308:	ldr	r0, [r5]
   1830c:	ldr	r2, [r5, #44]	; 0x2c
   18310:	ldr	r1, [r5, #40]	; 0x28
   18314:	mov	r3, r6
   18318:	stm	sp, {r0, r8, r9}
   1831c:	str	r2, [sp, #16]
   18320:	str	r1, [sp, #12]
   18324:	mov	r0, r4
   18328:	mov	r1, r7
   1832c:	ldr	r2, [sp, #20]
   18330:	bl	16f1c <__assert_fail@plt+0x59fc>
   18334:	ldr	r0, [sp, #24]
   18338:	str	r0, [sl]
   1833c:	mov	r0, r4
   18340:	sub	sp, fp, #28
   18344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18348:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1834c:	add	fp, sp, #28
   18350:	sub	sp, sp, #36	; 0x24
   18354:	movw	r8, #53696	; 0xd1c0
   18358:	cmp	r3, #0
   1835c:	mov	r4, r2
   18360:	str	r2, [sp, #24]
   18364:	mov	r5, r1
   18368:	mov	r6, r0
   1836c:	str	r0, [sp, #20]
   18370:	movt	r8, #2
   18374:	movne	r8, r3
   18378:	bl	113d0 <__errno_location@plt>
   1837c:	str	r0, [sp, #28]
   18380:	cmp	r4, #0
   18384:	add	sl, r8, #8
   18388:	ldm	r8, {r3, r9}
   1838c:	ldr	r7, [r0]
   18390:	ldr	r1, [r8, #40]	; 0x28
   18394:	ldr	r2, [r8, #44]	; 0x2c
   18398:	mov	r0, #0
   1839c:	orreq	r9, r9, #1
   183a0:	str	r7, [sp, #32]
   183a4:	mov	r7, r5
   183a8:	stm	sp, {r3, r9, sl}
   183ac:	str	r1, [sp, #12]
   183b0:	str	r2, [sp, #16]
   183b4:	mov	r1, #0
   183b8:	mov	r2, r6
   183bc:	mov	r3, r5
   183c0:	bl	16f1c <__assert_fail@plt+0x59fc>
   183c4:	add	r4, r0, #1
   183c8:	mov	r5, r0
   183cc:	mov	r0, r4
   183d0:	bl	197f4 <__assert_fail@plt+0x82d4>
   183d4:	mov	r6, r0
   183d8:	ldr	r0, [r8]
   183dc:	ldr	r2, [r8, #44]	; 0x2c
   183e0:	ldr	r1, [r8, #40]	; 0x28
   183e4:	mov	r3, r7
   183e8:	stm	sp, {r0, r9, sl}
   183ec:	str	r2, [sp, #16]
   183f0:	str	r1, [sp, #12]
   183f4:	mov	r0, r6
   183f8:	mov	r1, r4
   183fc:	ldr	r2, [sp, #20]
   18400:	bl	16f1c <__assert_fail@plt+0x59fc>
   18404:	ldr	r0, [sp, #24]
   18408:	ldr	r1, [sp, #32]
   1840c:	ldr	r2, [sp, #28]
   18410:	cmp	r0, #0
   18414:	str	r1, [r2]
   18418:	strne	r5, [r0]
   1841c:	mov	r0, r6
   18420:	sub	sp, fp, #28
   18424:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18428:	push	{r4, r5, r6, r7, fp, lr}
   1842c:	add	fp, sp, #16
   18430:	movw	r4, #53608	; 0xd168
   18434:	movt	r4, #2
   18438:	ldrd	r6, [r4]
   1843c:	cmp	r7, #2
   18440:	blt	1846c <__assert_fail@plt+0x6f4c>
   18444:	add	r5, r6, #12
   18448:	mov	r7, #0
   1844c:	ldr	r0, [r5, r7, lsl #3]
   18450:	bl	12f78 <__assert_fail@plt+0x1a58>
   18454:	ldr	r1, [r4, #4]
   18458:	add	r2, r7, #2
   1845c:	add	r0, r7, #1
   18460:	mov	r7, r0
   18464:	cmp	r2, r1
   18468:	blt	1844c <__assert_fail@plt+0x6f2c>
   1846c:	ldr	r0, [r6, #4]
   18470:	movw	r5, #53744	; 0xd1f0
   18474:	movt	r5, #2
   18478:	cmp	r0, r5
   1847c:	beq	18490 <__assert_fail@plt+0x6f70>
   18480:	bl	12f78 <__assert_fail@plt+0x1a58>
   18484:	mov	r0, #256	; 0x100
   18488:	str	r0, [r4, #8]
   1848c:	str	r5, [r4, #12]
   18490:	add	r5, r4, #8
   18494:	cmp	r6, r5
   18498:	beq	184a8 <__assert_fail@plt+0x6f88>
   1849c:	mov	r0, r6
   184a0:	bl	12f78 <__assert_fail@plt+0x1a58>
   184a4:	str	r5, [r4]
   184a8:	mov	r0, #1
   184ac:	str	r0, [r4, #4]
   184b0:	pop	{r4, r5, r6, r7, fp, pc}
   184b4:	movw	r3, #53696	; 0xd1c0
   184b8:	mvn	r2, #0
   184bc:	movt	r3, #2
   184c0:	b	184c4 <__assert_fail@plt+0x6fa4>
   184c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184c8:	add	fp, sp, #28
   184cc:	sub	sp, sp, #44	; 0x2c
   184d0:	mov	r7, r3
   184d4:	str	r2, [sp, #36]	; 0x24
   184d8:	str	r1, [sp, #32]
   184dc:	mov	r5, r0
   184e0:	bl	113d0 <__errno_location@plt>
   184e4:	cmp	r5, #0
   184e8:	blt	1864c <__assert_fail@plt+0x712c>
   184ec:	cmn	r5, #-2147483647	; 0x80000001
   184f0:	beq	1864c <__assert_fail@plt+0x712c>
   184f4:	movw	r8, #53608	; 0xd168
   184f8:	mov	r4, r0
   184fc:	movt	r8, #2
   18500:	ldr	r6, [r8]
   18504:	ldr	r1, [r8, #4]
   18508:	ldr	r0, [r0]
   1850c:	str	r4, [sp, #28]
   18510:	cmp	r1, r5
   18514:	str	r0, [sp, #24]
   18518:	ble	18524 <__assert_fail@plt+0x7004>
   1851c:	mov	sl, r6
   18520:	b	18588 <__assert_fail@plt+0x7068>
   18524:	mov	r0, #8
   18528:	add	r9, r8, #8
   1852c:	add	r2, r5, #1
   18530:	str	r1, [fp, #-32]	; 0xffffffe0
   18534:	mvn	r3, #-2147483648	; 0x80000000
   18538:	str	r0, [sp]
   1853c:	subs	r0, r6, r9
   18540:	sub	r2, r2, r1
   18544:	sub	r1, fp, #32
   18548:	movne	r0, r6
   1854c:	bl	199f4 <__assert_fail@plt+0x84d4>
   18550:	str	r0, [r8]
   18554:	cmp	r6, r9
   18558:	mov	sl, r0
   1855c:	ldrdeq	r0, [r8, #8]
   18560:	stmeq	sl, {r0, r1}
   18564:	ldr	r1, [r8, #4]
   18568:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1856c:	add	r0, sl, r1, lsl #3
   18570:	sub	r1, r2, r1
   18574:	lsl	r2, r1, #3
   18578:	mov	r1, #0
   1857c:	bl	113e8 <memset@plt>
   18580:	ldr	r0, [fp, #-32]	; 0xffffffe0
   18584:	str	r0, [r8, #4]
   18588:	mov	r9, sl
   1858c:	ldr	r6, [r9, r5, lsl #3]!
   18590:	ldr	r4, [r9, #4]!
   18594:	ldm	r7, {r0, r1}
   18598:	ldr	r2, [r7, #40]	; 0x28
   1859c:	ldr	r3, [r7, #44]	; 0x2c
   185a0:	orr	r8, r1, #1
   185a4:	add	r1, r7, #8
   185a8:	stm	sp, {r0, r8}
   185ac:	add	r0, sp, #8
   185b0:	str	r1, [sp, #20]
   185b4:	stm	r0, {r1, r2, r3}
   185b8:	mov	r0, r4
   185bc:	mov	r1, r6
   185c0:	ldr	r2, [sp, #32]
   185c4:	ldr	r3, [sp, #36]	; 0x24
   185c8:	bl	16f1c <__assert_fail@plt+0x59fc>
   185cc:	cmp	r6, r0
   185d0:	bhi	18634 <__assert_fail@plt+0x7114>
   185d4:	add	r6, r0, #1
   185d8:	movw	r0, #53744	; 0xd1f0
   185dc:	movt	r0, #2
   185e0:	str	r6, [sl, r5, lsl #3]
   185e4:	cmp	r4, r0
   185e8:	beq	185f4 <__assert_fail@plt+0x70d4>
   185ec:	mov	r0, r4
   185f0:	bl	12f78 <__assert_fail@plt+0x1a58>
   185f4:	mov	r0, r6
   185f8:	bl	197f4 <__assert_fail@plt+0x82d4>
   185fc:	str	r0, [r9]
   18600:	mov	r4, r0
   18604:	add	r3, sp, #8
   18608:	ldr	r0, [r7]
   1860c:	ldr	r1, [r7, #40]	; 0x28
   18610:	ldr	r2, [r7, #44]	; 0x2c
   18614:	stm	sp, {r0, r8}
   18618:	ldr	r0, [sp, #20]
   1861c:	stm	r3, {r0, r1, r2}
   18620:	mov	r0, r4
   18624:	mov	r1, r6
   18628:	ldr	r2, [sp, #32]
   1862c:	ldr	r3, [sp, #36]	; 0x24
   18630:	bl	16f1c <__assert_fail@plt+0x59fc>
   18634:	ldr	r1, [sp, #24]
   18638:	ldr	r0, [sp, #28]
   1863c:	str	r1, [r0]
   18640:	mov	r0, r4
   18644:	sub	sp, fp, #28
   18648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1864c:	bl	114d8 <abort@plt>
   18650:	movw	r3, #53696	; 0xd1c0
   18654:	movt	r3, #2
   18658:	b	184c4 <__assert_fail@plt+0x6fa4>
   1865c:	movw	r3, #53696	; 0xd1c0
   18660:	mov	r1, r0
   18664:	mov	r0, #0
   18668:	mvn	r2, #0
   1866c:	movt	r3, #2
   18670:	b	184c4 <__assert_fail@plt+0x6fa4>
   18674:	movw	r3, #53696	; 0xd1c0
   18678:	mov	r2, r1
   1867c:	mov	r1, r0
   18680:	mov	r0, #0
   18684:	movt	r3, #2
   18688:	b	184c4 <__assert_fail@plt+0x6fa4>
   1868c:	push	{fp, lr}
   18690:	mov	fp, sp
   18694:	sub	sp, sp, #48	; 0x30
   18698:	vmov.i32	q8, #0	; 0x00000000
   1869c:	mov	ip, #32
   186a0:	mov	r3, sp
   186a4:	mov	lr, r2
   186a8:	cmp	r1, #10
   186ac:	add	r2, r3, #16
   186b0:	vst1.64	{d16-d17}, [r3], ip
   186b4:	vst1.64	{d16-d17}, [r3]
   186b8:	vst1.64	{d16-d17}, [r2]
   186bc:	beq	186dc <__assert_fail@plt+0x71bc>
   186c0:	str	r1, [sp]
   186c4:	mov	r3, sp
   186c8:	mov	r1, lr
   186cc:	mvn	r2, #0
   186d0:	bl	184c4 <__assert_fail@plt+0x6fa4>
   186d4:	mov	sp, fp
   186d8:	pop	{fp, pc}
   186dc:	bl	114d8 <abort@plt>
   186e0:	push	{r4, sl, fp, lr}
   186e4:	add	fp, sp, #8
   186e8:	sub	sp, sp, #48	; 0x30
   186ec:	mov	ip, r3
   186f0:	mov	r3, sp
   186f4:	vmov.i32	q8, #0	; 0x00000000
   186f8:	mov	lr, #32
   186fc:	cmp	r1, #10
   18700:	add	r4, r3, #16
   18704:	vst1.64	{d16-d17}, [r3], lr
   18708:	vst1.64	{d16-d17}, [r3]
   1870c:	vst1.64	{d16-d17}, [r4]
   18710:	beq	18730 <__assert_fail@plt+0x7210>
   18714:	str	r1, [sp]
   18718:	mov	r1, r2
   1871c:	mov	r3, sp
   18720:	mov	r2, ip
   18724:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18728:	sub	sp, fp, #8
   1872c:	pop	{r4, sl, fp, pc}
   18730:	bl	114d8 <abort@plt>
   18734:	push	{fp, lr}
   18738:	mov	fp, sp
   1873c:	sub	sp, sp, #48	; 0x30
   18740:	mov	r3, sp
   18744:	vmov.i32	q8, #0	; 0x00000000
   18748:	mov	ip, #32
   1874c:	cmp	r0, #10
   18750:	add	r2, r3, #16
   18754:	vst1.64	{d16-d17}, [r3], ip
   18758:	vst1.64	{d16-d17}, [r3]
   1875c:	vst1.64	{d16-d17}, [r2]
   18760:	beq	18780 <__assert_fail@plt+0x7260>
   18764:	str	r0, [sp]
   18768:	mov	r3, sp
   1876c:	mov	r0, #0
   18770:	mvn	r2, #0
   18774:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18778:	mov	sp, fp
   1877c:	pop	{fp, pc}
   18780:	bl	114d8 <abort@plt>
   18784:	push	{fp, lr}
   18788:	mov	fp, sp
   1878c:	sub	sp, sp, #48	; 0x30
   18790:	mov	r3, sp
   18794:	vmov.i32	q8, #0	; 0x00000000
   18798:	mov	ip, #32
   1879c:	cmp	r0, #10
   187a0:	add	lr, r3, #16
   187a4:	vst1.64	{d16-d17}, [r3], ip
   187a8:	vst1.64	{d16-d17}, [r3]
   187ac:	vst1.64	{d16-d17}, [lr]
   187b0:	beq	187cc <__assert_fail@plt+0x72ac>
   187b4:	str	r0, [sp]
   187b8:	mov	r3, sp
   187bc:	mov	r0, #0
   187c0:	bl	184c4 <__assert_fail@plt+0x6fa4>
   187c4:	mov	sp, fp
   187c8:	pop	{fp, pc}
   187cc:	bl	114d8 <abort@plt>
   187d0:	push	{r4, sl, fp, lr}
   187d4:	add	fp, sp, #8
   187d8:	sub	sp, sp, #48	; 0x30
   187dc:	mov	lr, r0
   187e0:	movw	r0, #53696	; 0xd1c0
   187e4:	mov	r3, #32
   187e8:	mov	ip, r1
   187ec:	mov	r4, #1
   187f0:	movt	r0, #2
   187f4:	add	r1, r0, #16
   187f8:	vld1.64	{d16-d17}, [r0], r3
   187fc:	mov	r3, sp
   18800:	vld1.64	{d18-d19}, [r1]
   18804:	add	r1, r3, #16
   18808:	vld1.64	{d20-d21}, [r0]
   1880c:	add	r0, r3, #32
   18810:	vst1.64	{d18-d19}, [r1]
   18814:	mov	r1, r3
   18818:	vst1.64	{d20-d21}, [r0]
   1881c:	mov	r0, #28
   18820:	and	r0, r0, r2, lsr #3
   18824:	and	r2, r2, #31
   18828:	vst1.64	{d16-d17}, [r1], r0
   1882c:	ldr	r0, [r1, #8]
   18830:	bic	r4, r4, r0, lsr r2
   18834:	eor	r0, r0, r4, lsl r2
   18838:	mov	r2, ip
   1883c:	str	r0, [r1, #8]
   18840:	mov	r0, #0
   18844:	mov	r1, lr
   18848:	bl	184c4 <__assert_fail@plt+0x6fa4>
   1884c:	sub	sp, fp, #8
   18850:	pop	{r4, sl, fp, pc}
   18854:	push	{fp, lr}
   18858:	mov	fp, sp
   1885c:	sub	sp, sp, #48	; 0x30
   18860:	mov	ip, r0
   18864:	movw	r0, #53696	; 0xd1c0
   18868:	mov	r3, #32
   1886c:	movt	r0, #2
   18870:	add	r2, r0, #16
   18874:	vld1.64	{d16-d17}, [r0], r3
   18878:	mov	r3, sp
   1887c:	vld1.64	{d18-d19}, [r2]
   18880:	add	r2, r3, #16
   18884:	vld1.64	{d20-d21}, [r0]
   18888:	add	r0, r3, #32
   1888c:	vst1.64	{d18-d19}, [r2]
   18890:	mov	r2, r3
   18894:	vst1.64	{d20-d21}, [r0]
   18898:	mov	r0, #28
   1889c:	and	r0, r0, r1, lsr #3
   188a0:	and	r1, r1, #31
   188a4:	vst1.64	{d16-d17}, [r2], r0
   188a8:	mov	r0, #1
   188ac:	ldr	lr, [r2, #8]
   188b0:	bic	r0, r0, lr, lsr r1
   188b4:	eor	r0, lr, r0, lsl r1
   188b8:	mov	r1, ip
   188bc:	str	r0, [r2, #8]
   188c0:	mov	r0, #0
   188c4:	mvn	r2, #0
   188c8:	bl	184c4 <__assert_fail@plt+0x6fa4>
   188cc:	mov	sp, fp
   188d0:	pop	{fp, pc}
   188d4:	push	{fp, lr}
   188d8:	mov	fp, sp
   188dc:	sub	sp, sp, #48	; 0x30
   188e0:	movw	r2, #53696	; 0xd1c0
   188e4:	mov	r3, #32
   188e8:	mov	r1, r0
   188ec:	movt	r2, #2
   188f0:	add	r0, r2, #16
   188f4:	vld1.64	{d16-d17}, [r2], r3
   188f8:	mov	r3, sp
   188fc:	vld1.64	{d18-d19}, [r0]
   18900:	add	r0, r3, #16
   18904:	vld1.64	{d20-d21}, [r2]
   18908:	mov	r2, r3
   1890c:	vst1.64	{d18-d19}, [r0]
   18910:	add	r0, r3, #32
   18914:	vst1.64	{d20-d21}, [r0]
   18918:	mov	r0, #12
   1891c:	vst1.64	{d16-d17}, [r2], r0
   18920:	ldr	r0, [r2]
   18924:	orr	r0, r0, #67108864	; 0x4000000
   18928:	str	r0, [r2]
   1892c:	mov	r0, #0
   18930:	mvn	r2, #0
   18934:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18938:	mov	sp, fp
   1893c:	pop	{fp, pc}
   18940:	push	{fp, lr}
   18944:	mov	fp, sp
   18948:	sub	sp, sp, #48	; 0x30
   1894c:	mov	ip, r1
   18950:	mov	r1, r0
   18954:	movw	r0, #53696	; 0xd1c0
   18958:	mov	r3, #32
   1895c:	movt	r0, #2
   18960:	add	r2, r0, #16
   18964:	vld1.64	{d16-d17}, [r0], r3
   18968:	mov	r3, sp
   1896c:	vld1.64	{d18-d19}, [r2]
   18970:	add	r2, r3, #16
   18974:	vld1.64	{d20-d21}, [r0]
   18978:	add	r0, r3, #32
   1897c:	vst1.64	{d18-d19}, [r2]
   18980:	mov	r2, r3
   18984:	vst1.64	{d20-d21}, [r0]
   18988:	mov	r0, #12
   1898c:	vst1.64	{d16-d17}, [r2], r0
   18990:	ldr	r0, [r2]
   18994:	orr	r0, r0, #67108864	; 0x4000000
   18998:	str	r0, [r2]
   1899c:	mov	r0, #0
   189a0:	mov	r2, ip
   189a4:	bl	184c4 <__assert_fail@plt+0x6fa4>
   189a8:	mov	sp, fp
   189ac:	pop	{fp, pc}
   189b0:	push	{r4, sl, fp, lr}
   189b4:	add	fp, sp, #8
   189b8:	sub	sp, sp, #96	; 0x60
   189bc:	mov	ip, r2
   189c0:	mov	r2, sp
   189c4:	vmov.i32	q8, #0	; 0x00000000
   189c8:	mov	r4, #28
   189cc:	cmp	r1, #10
   189d0:	mov	r3, r2
   189d4:	add	lr, r2, #16
   189d8:	vst1.64	{d16-d17}, [r3], r4
   189dc:	vst1.64	{d16-d17}, [lr]
   189e0:	vst1.32	{d16-d17}, [r3]
   189e4:	beq	18a34 <__assert_fail@plt+0x7514>
   189e8:	vld1.64	{d16-d17}, [r2], r4
   189ec:	vld1.64	{d18-d19}, [lr]
   189f0:	add	r3, sp, #48	; 0x30
   189f4:	add	r4, r3, #4
   189f8:	vld1.32	{d20-d21}, [r2]
   189fc:	add	r2, r3, #20
   18a00:	vst1.32	{d16-d17}, [r4]
   18a04:	vst1.32	{d18-d19}, [r2]
   18a08:	add	r2, r3, #32
   18a0c:	vst1.32	{d20-d21}, [r2]
   18a10:	str	r1, [sp, #48]	; 0x30
   18a14:	mvn	r2, #0
   18a18:	ldr	r1, [sp, #60]	; 0x3c
   18a1c:	orr	r1, r1, #67108864	; 0x4000000
   18a20:	str	r1, [sp, #60]	; 0x3c
   18a24:	mov	r1, ip
   18a28:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18a2c:	sub	sp, fp, #8
   18a30:	pop	{r4, sl, fp, pc}
   18a34:	bl	114d8 <abort@plt>
   18a38:	push	{r4, r5, fp, lr}
   18a3c:	add	fp, sp, #8
   18a40:	sub	sp, sp, #48	; 0x30
   18a44:	mov	ip, r3
   18a48:	movw	r3, #53696	; 0xd1c0
   18a4c:	mov	lr, #32
   18a50:	cmp	r1, #0
   18a54:	mov	r5, sp
   18a58:	movt	r3, #2
   18a5c:	cmpne	r2, #0
   18a60:	add	r4, r3, #16
   18a64:	vld1.64	{d16-d17}, [r3], lr
   18a68:	vld1.64	{d18-d19}, [r4]
   18a6c:	add	r4, r5, #16
   18a70:	vld1.64	{d20-d21}, [r3]
   18a74:	vst1.64	{d16-d17}, [r5], lr
   18a78:	mov	r3, #10
   18a7c:	vst1.64	{d18-d19}, [r4]
   18a80:	vst1.64	{d20-d21}, [r5]
   18a84:	str	r3, [sp]
   18a88:	bne	18a90 <__assert_fail@plt+0x7570>
   18a8c:	bl	114d8 <abort@plt>
   18a90:	str	r2, [sp, #44]	; 0x2c
   18a94:	str	r1, [sp, #40]	; 0x28
   18a98:	mov	r3, sp
   18a9c:	mov	r1, ip
   18aa0:	mvn	r2, #0
   18aa4:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18aa8:	sub	sp, fp, #8
   18aac:	pop	{r4, r5, fp, pc}
   18ab0:	push	{r4, r5, fp, lr}
   18ab4:	add	fp, sp, #8
   18ab8:	sub	sp, sp, #48	; 0x30
   18abc:	mov	lr, r3
   18ac0:	movw	r3, #53696	; 0xd1c0
   18ac4:	mov	ip, #32
   18ac8:	cmp	r1, #0
   18acc:	mov	r5, sp
   18ad0:	movt	r3, #2
   18ad4:	cmpne	r2, #0
   18ad8:	add	r4, r3, #16
   18adc:	vld1.64	{d16-d17}, [r3], ip
   18ae0:	vld1.64	{d18-d19}, [r4]
   18ae4:	add	r4, r5, #16
   18ae8:	vld1.64	{d20-d21}, [r3]
   18aec:	vst1.64	{d16-d17}, [r5], ip
   18af0:	mov	r3, #10
   18af4:	vst1.64	{d18-d19}, [r4]
   18af8:	vst1.64	{d20-d21}, [r5]
   18afc:	str	r3, [sp]
   18b00:	bne	18b08 <__assert_fail@plt+0x75e8>
   18b04:	bl	114d8 <abort@plt>
   18b08:	ldr	ip, [fp, #8]
   18b0c:	str	r2, [sp, #44]	; 0x2c
   18b10:	str	r1, [sp, #40]	; 0x28
   18b14:	mov	r3, sp
   18b18:	mov	r1, lr
   18b1c:	mov	r2, ip
   18b20:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18b24:	sub	sp, fp, #8
   18b28:	pop	{r4, r5, fp, pc}
   18b2c:	push	{r4, sl, fp, lr}
   18b30:	add	fp, sp, #8
   18b34:	sub	sp, sp, #48	; 0x30
   18b38:	mov	ip, r2
   18b3c:	movw	r2, #53696	; 0xd1c0
   18b40:	mov	lr, #32
   18b44:	cmp	r0, #0
   18b48:	mov	r4, sp
   18b4c:	movt	r2, #2
   18b50:	cmpne	r1, #0
   18b54:	add	r3, r2, #16
   18b58:	vld1.64	{d16-d17}, [r2], lr
   18b5c:	vld1.64	{d18-d19}, [r3]
   18b60:	add	r3, r4, #16
   18b64:	vld1.64	{d20-d21}, [r2]
   18b68:	vst1.64	{d16-d17}, [r4], lr
   18b6c:	mov	r2, #10
   18b70:	vst1.64	{d18-d19}, [r3]
   18b74:	vst1.64	{d20-d21}, [r4]
   18b78:	str	r2, [sp]
   18b7c:	bne	18b84 <__assert_fail@plt+0x7664>
   18b80:	bl	114d8 <abort@plt>
   18b84:	str	r1, [sp, #44]	; 0x2c
   18b88:	str	r0, [sp, #40]	; 0x28
   18b8c:	mov	r3, sp
   18b90:	mov	r0, #0
   18b94:	mov	r1, ip
   18b98:	mvn	r2, #0
   18b9c:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18ba0:	sub	sp, fp, #8
   18ba4:	pop	{r4, sl, fp, pc}
   18ba8:	push	{r4, r5, fp, lr}
   18bac:	add	fp, sp, #8
   18bb0:	sub	sp, sp, #48	; 0x30
   18bb4:	mov	lr, r2
   18bb8:	movw	r2, #53696	; 0xd1c0
   18bbc:	mov	ip, r3
   18bc0:	mov	r3, #32
   18bc4:	cmp	r0, #0
   18bc8:	mov	r5, sp
   18bcc:	movt	r2, #2
   18bd0:	cmpne	r1, #0
   18bd4:	add	r4, r2, #16
   18bd8:	vld1.64	{d16-d17}, [r2], r3
   18bdc:	vld1.64	{d18-d19}, [r4]
   18be0:	add	r4, r5, #16
   18be4:	vld1.64	{d20-d21}, [r2]
   18be8:	vst1.64	{d16-d17}, [r5], r3
   18bec:	mov	r2, #10
   18bf0:	vst1.64	{d18-d19}, [r4]
   18bf4:	vst1.64	{d20-d21}, [r5]
   18bf8:	str	r2, [sp]
   18bfc:	bne	18c04 <__assert_fail@plt+0x76e4>
   18c00:	bl	114d8 <abort@plt>
   18c04:	str	r1, [sp, #44]	; 0x2c
   18c08:	str	r0, [sp, #40]	; 0x28
   18c0c:	mov	r3, sp
   18c10:	mov	r0, #0
   18c14:	mov	r1, lr
   18c18:	mov	r2, ip
   18c1c:	bl	184c4 <__assert_fail@plt+0x6fa4>
   18c20:	sub	sp, fp, #8
   18c24:	pop	{r4, r5, fp, pc}
   18c28:	movw	r3, #53560	; 0xd138
   18c2c:	movt	r3, #2
   18c30:	b	184c4 <__assert_fail@plt+0x6fa4>
   18c34:	movw	r3, #53560	; 0xd138
   18c38:	mov	r2, r1
   18c3c:	mov	r1, r0
   18c40:	mov	r0, #0
   18c44:	movt	r3, #2
   18c48:	b	184c4 <__assert_fail@plt+0x6fa4>
   18c4c:	movw	r3, #53560	; 0xd138
   18c50:	mvn	r2, #0
   18c54:	movt	r3, #2
   18c58:	b	184c4 <__assert_fail@plt+0x6fa4>
   18c5c:	movw	r3, #53560	; 0xd138
   18c60:	mov	r1, r0
   18c64:	mov	r0, #0
   18c68:	mvn	r2, #0
   18c6c:	movt	r3, #2
   18c70:	b	184c4 <__assert_fail@plt+0x6fa4>
   18c74:	push	{r4, sl, fp, lr}
   18c78:	add	fp, sp, #8
   18c7c:	sub	sp, sp, #104	; 0x68
   18c80:	movw	r1, #50663	; 0xc5e7
   18c84:	mov	r4, r0
   18c88:	mov	r2, sp
   18c8c:	mov	r0, #3
   18c90:	movt	r1, #1
   18c94:	bl	114f0 <__lxstat64@plt>
   18c98:	mov	r1, r0
   18c9c:	mov	r0, #0
   18ca0:	cmp	r1, #0
   18ca4:	beq	18cb0 <__assert_fail@plt+0x7790>
   18ca8:	sub	sp, fp, #8
   18cac:	pop	{r4, sl, fp, pc}
   18cb0:	ldr	r0, [sp, #96]	; 0x60
   18cb4:	ldr	r1, [sp, #100]	; 0x64
   18cb8:	ldm	sp, {r2, r3}
   18cbc:	stm	r4, {r0, r1, r2, r3}
   18cc0:	mov	r0, r4
   18cc4:	sub	sp, fp, #8
   18cc8:	pop	{r4, sl, fp, pc}
   18ccc:	push	{r4, r5, r6, r7, fp, lr}
   18cd0:	add	fp, sp, #16
   18cd4:	mov	r4, r0
   18cd8:	cmp	r0, #2
   18cdc:	movhi	r0, r4
   18ce0:	pophi	{r4, r5, r6, r7, fp, pc}
   18ce4:	mov	r0, r4
   18ce8:	bl	1ad54 <__assert_fail@plt+0x9834>
   18cec:	mov	r5, r0
   18cf0:	bl	113d0 <__errno_location@plt>
   18cf4:	ldr	r7, [r0]
   18cf8:	mov	r6, r0
   18cfc:	mov	r0, r4
   18d00:	bl	114e4 <close@plt>
   18d04:	mov	r0, r5
   18d08:	str	r7, [r6]
   18d0c:	pop	{r4, r5, r6, r7, fp, pc}
   18d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d14:	add	fp, sp, #28
   18d18:	sub	sp, sp, #12
   18d1c:	ldr	sl, [fp, #8]
   18d20:	mov	r9, r3
   18d24:	mov	r8, r1
   18d28:	mov	r5, r0
   18d2c:	cmp	r2, #0
   18d30:	beq	18dbc <__assert_fail@plt+0x789c>
   18d34:	mov	r0, r5
   18d38:	mov	r1, #58	; 0x3a
   18d3c:	mov	r6, r2
   18d40:	bl	113ac <strchr@plt>
   18d44:	mov	r7, r0
   18d48:	mov	r0, r5
   18d4c:	mov	r2, r8
   18d50:	mov	r3, r6
   18d54:	stm	sp, {r9, sl}
   18d58:	mov	r1, r7
   18d5c:	bl	18ddc <__assert_fail@plt+0x78bc>
   18d60:	mov	r4, r0
   18d64:	cmp	r0, #0
   18d68:	beq	18db0 <__assert_fail@plt+0x7890>
   18d6c:	cmp	r7, #0
   18d70:	bne	18db0 <__assert_fail@plt+0x7890>
   18d74:	mov	r0, r5
   18d78:	mov	r1, #46	; 0x2e
   18d7c:	bl	113ac <strchr@plt>
   18d80:	cmp	r0, #0
   18d84:	beq	18db0 <__assert_fail@plt+0x7890>
   18d88:	mov	r1, r0
   18d8c:	mov	r0, r5
   18d90:	mov	r2, r8
   18d94:	mov	r3, r6
   18d98:	stm	sp, {r9, sl}
   18d9c:	bl	18ddc <__assert_fail@plt+0x78bc>
   18da0:	cmp	r0, #0
   18da4:	movne	r0, r4
   18da8:	sub	sp, fp, #28
   18dac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18db0:	mov	r0, r4
   18db4:	sub	sp, fp, #28
   18db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dbc:	mov	r0, r5
   18dc0:	mov	r1, #0
   18dc4:	mov	r2, r8
   18dc8:	mov	r3, #0
   18dcc:	stm	sp, {r9, sl}
   18dd0:	bl	18ddc <__assert_fail@plt+0x78bc>
   18dd4:	sub	sp, fp, #28
   18dd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18de0:	add	fp, sp, #28
   18de4:	sub	sp, sp, #36	; 0x24
   18de8:	mov	sl, r3
   18dec:	ldr	r3, [r2]
   18df0:	mov	r9, r2
   18df4:	mov	r4, r1
   18df8:	ldr	r2, [fp, #8]
   18dfc:	ldr	r8, [fp, #12]
   18e00:	cmp	sl, #0
   18e04:	ldrne	r1, [sl]
   18e08:	str	r3, [sp, #4]
   18e0c:	mvneq	r1, #0
   18e10:	cmp	r2, #0
   18e14:	str	r1, [sp, #8]
   18e18:	movne	r1, #0
   18e1c:	strne	r1, [r2]
   18e20:	cmp	r8, #0
   18e24:	movne	r1, #0
   18e28:	strne	r1, [r8]
   18e2c:	cmp	r4, #0
   18e30:	beq	18eb8 <__assert_fail@plt+0x7998>
   18e34:	subs	r5, r4, r0
   18e38:	beq	18fa8 <__assert_fail@plt+0x7a88>
   18e3c:	add	r1, r5, #1
   18e40:	bl	19c60 <__assert_fail@plt+0x8740>
   18e44:	mov	r7, r0
   18e48:	mov	r0, #0
   18e4c:	mov	r6, r4
   18e50:	strb	r0, [r7, r5]
   18e54:	ldrb	r0, [r6, #1]!
   18e58:	cmp	r0, #0
   18e5c:	moveq	r6, r0
   18e60:	ldrb	r0, [r7]
   18e64:	cmp	r0, #43	; 0x2b
   18e68:	beq	18edc <__assert_fail@plt+0x79bc>
   18e6c:	mov	r0, r7
   18e70:	bl	11220 <getpwnam@plt>
   18e74:	cmp	r0, #0
   18e78:	beq	18edc <__assert_fail@plt+0x79bc>
   18e7c:	ldr	r1, [r0, #8]
   18e80:	mov	r5, #0
   18e84:	cmp	r4, #0
   18e88:	str	r1, [sp, #4]
   18e8c:	beq	190c4 <__assert_fail@plt+0x7ba4>
   18e90:	cmp	r6, #0
   18e94:	bne	190c4 <__assert_fail@plt+0x7ba4>
   18e98:	ldr	r4, [r0, #12]
   18e9c:	mov	r0, r4
   18ea0:	bl	11508 <getgrgid@plt>
   18ea4:	cmp	r0, #0
   18ea8:	str	r4, [sp, #8]
   18eac:	beq	190d8 <__assert_fail@plt+0x7bb8>
   18eb0:	ldr	r0, [r0]
   18eb4:	b	190e8 <__assert_fail@plt+0x7bc8>
   18eb8:	ldrb	r1, [r0]
   18ebc:	cmp	r1, #0
   18ec0:	beq	19044 <__assert_fail@plt+0x7b24>
   18ec4:	bl	19ce4 <__assert_fail@plt+0x87c4>
   18ec8:	mov	r7, r0
   18ecc:	mov	r6, #0
   18ed0:	ldrb	r0, [r7]
   18ed4:	cmp	r0, #43	; 0x2b
   18ed8:	bne	18e6c <__assert_fail@plt+0x794c>
   18edc:	cmp	r4, #0
   18ee0:	beq	18fdc <__assert_fail@plt+0x7abc>
   18ee4:	cmp	r6, #0
   18ee8:	bne	18fdc <__assert_fail@plt+0x7abc>
   18eec:	movw	r5, #49915	; 0xc2fb
   18ef0:	mov	r4, #0
   18ef4:	movt	r5, #1
   18ef8:	bl	11448 <endpwent@plt>
   18efc:	cmp	r6, #0
   18f00:	beq	18fcc <__assert_fail@plt+0x7aac>
   18f04:	cmp	r5, #0
   18f08:	bne	18fcc <__assert_fail@plt+0x7aac>
   18f0c:	ldrb	r0, [r6]
   18f10:	cmp	r0, #43	; 0x2b
   18f14:	beq	18f34 <__assert_fail@plt+0x7a14>
   18f18:	mov	r0, r6
   18f1c:	bl	11514 <getgrnam@plt>
   18f20:	cmp	r0, #0
   18f24:	beq	18f34 <__assert_fail@plt+0x7a14>
   18f28:	ldr	r0, [r0, #8]
   18f2c:	mov	r5, #0
   18f30:	b	18f84 <__assert_fail@plt+0x7a64>
   18f34:	movw	r0, #47112	; 0xb808
   18f38:	add	r3, sp, #12
   18f3c:	mov	r1, #0
   18f40:	mov	r2, #10
   18f44:	movt	r0, #1
   18f48:	str	r0, [sp]
   18f4c:	mov	r0, r6
   18f50:	bl	19de4 <__assert_fail@plt+0x88c4>
   18f54:	ldr	r1, [sp, #12]
   18f58:	clz	r0, r0
   18f5c:	movw	r5, #49901	; 0xc2ed
   18f60:	lsr	r0, r0, #5
   18f64:	movt	r5, #1
   18f68:	add	r2, r1, #1
   18f6c:	cmn	r1, #1
   18f70:	movwne	r2, #1
   18f74:	ands	r0, r0, r2
   18f78:	ldr	r0, [sp, #8]
   18f7c:	movwne	r5, #0
   18f80:	movne	r0, r1
   18f84:	str	r0, [sp, #8]
   18f88:	bl	111fc <endgrent@plt>
   18f8c:	mov	r0, r6
   18f90:	bl	19ce4 <__assert_fail@plt+0x87c4>
   18f94:	mov	r4, r0
   18f98:	mov	r6, #0
   18f9c:	cmp	r5, #0
   18fa0:	bne	19090 <__assert_fail@plt+0x7b70>
   18fa4:	b	1904c <__assert_fail@plt+0x7b2c>
   18fa8:	ldrb	r0, [r4, #1]!
   18fac:	mov	r7, #0
   18fb0:	mov	r5, #0
   18fb4:	cmp	r0, #0
   18fb8:	moveq	r4, r0
   18fbc:	mov	r6, r4
   18fc0:	mov	r4, #0
   18fc4:	cmp	r6, #0
   18fc8:	bne	18f04 <__assert_fail@plt+0x79e4>
   18fcc:	mov	r6, #0
   18fd0:	cmp	r5, #0
   18fd4:	bne	19090 <__assert_fail@plt+0x7b70>
   18fd8:	b	1904c <__assert_fail@plt+0x7b2c>
   18fdc:	movw	r0, #47112	; 0xb808
   18fe0:	add	r3, sp, #12
   18fe4:	mov	r1, #0
   18fe8:	mov	r2, #10
   18fec:	mov	r4, #0
   18ff0:	movt	r0, #1
   18ff4:	str	r0, [sp]
   18ff8:	mov	r0, r7
   18ffc:	bl	19de4 <__assert_fail@plt+0x88c4>
   19000:	ldr	r1, [sp, #12]
   19004:	clz	r0, r0
   19008:	movw	r5, #49888	; 0xc2e0
   1900c:	lsr	r0, r0, #5
   19010:	movt	r5, #1
   19014:	add	r2, r1, #1
   19018:	cmn	r1, #1
   1901c:	movwne	r2, #1
   19020:	ands	r0, r0, r2
   19024:	ldr	r0, [sp, #4]
   19028:	movwne	r5, #0
   1902c:	movne	r0, r1
   19030:	str	r0, [sp, #4]
   19034:	bl	11448 <endpwent@plt>
   19038:	cmp	r6, #0
   1903c:	bne	18f04 <__assert_fail@plt+0x79e4>
   19040:	b	18fcc <__assert_fail@plt+0x7aac>
   19044:	mov	r4, #0
   19048:	mov	r7, #0
   1904c:	ldr	r0, [sp, #4]
   19050:	cmp	sl, #0
   19054:	mov	r6, #1
   19058:	str	r0, [r9]
   1905c:	ldrne	r0, [sp, #8]
   19060:	strne	r0, [sl]
   19064:	ldr	r0, [fp, #8]
   19068:	cmp	r0, #0
   1906c:	strne	r7, [r0]
   19070:	movne	r7, #0
   19074:	cmp	r8, #0
   19078:	beq	1908c <__assert_fail@plt+0x7b6c>
   1907c:	str	r4, [r8]
   19080:	mov	r5, #0
   19084:	mov	r4, #0
   19088:	b	19090 <__assert_fail@plt+0x7b70>
   1908c:	mov	r5, #0
   19090:	mov	r0, r7
   19094:	bl	12f78 <__assert_fail@plt+0x1a58>
   19098:	mov	r0, r4
   1909c:	bl	12f78 <__assert_fail@plt+0x1a58>
   190a0:	mov	r0, #0
   190a4:	cmp	r6, #0
   190a8:	bne	190bc <__assert_fail@plt+0x7b9c>
   190ac:	mov	r0, #0
   190b0:	mov	r1, r5
   190b4:	mov	r2, #5
   190b8:	bl	112a4 <dcgettext@plt>
   190bc:	sub	sp, fp, #28
   190c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190c4:	mov	r4, #0
   190c8:	bl	11448 <endpwent@plt>
   190cc:	cmp	r6, #0
   190d0:	bne	18f04 <__assert_fail@plt+0x79e4>
   190d4:	b	18fcc <__assert_fail@plt+0x7aac>
   190d8:	add	r2, sp, #12
   190dc:	mov	r0, r4
   190e0:	mov	r1, #0
   190e4:	bl	16be4 <__assert_fail@plt+0x56c4>
   190e8:	bl	19ce4 <__assert_fail@plt+0x87c4>
   190ec:	mov	r4, r0
   190f0:	bl	111fc <endgrent@plt>
   190f4:	bl	11448 <endpwent@plt>
   190f8:	cmp	r6, #0
   190fc:	bne	18f04 <__assert_fail@plt+0x79e4>
   19100:	b	18fcc <__assert_fail@plt+0x7aac>
   19104:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   19108:	add	fp, sp, #24
   1910c:	sub	sp, sp, #32
   19110:	ldr	r6, [fp, #12]
   19114:	ldr	r7, [fp, #8]
   19118:	mov	r4, r2
   1911c:	mov	r8, r0
   19120:	cmp	r1, #0
   19124:	beq	1914c <__assert_fail@plt+0x7c2c>
   19128:	movw	r2, #49928	; 0xc308
   1912c:	mov	r5, r1
   19130:	str	r3, [sp, #4]
   19134:	str	r4, [sp]
   19138:	mov	r0, r8
   1913c:	mov	r1, #1
   19140:	movt	r2, #1
   19144:	mov	r3, r5
   19148:	b	19164 <__assert_fail@plt+0x7c44>
   1914c:	movw	r2, #49940	; 0xc314
   19150:	str	r3, [sp]
   19154:	mov	r0, r8
   19158:	mov	r1, #1
   1915c:	mov	r3, r4
   19160:	movt	r2, #1
   19164:	bl	1140c <__fprintf_chk@plt>
   19168:	movw	r1, #49947	; 0xc31b
   1916c:	mov	r0, #0
   19170:	mov	r2, #5
   19174:	movt	r1, #1
   19178:	bl	112a4 <dcgettext@plt>
   1917c:	movw	r2, #50665	; 0xc5e9
   19180:	mov	r3, r0
   19184:	movw	r0, #2022	; 0x7e6
   19188:	mov	r1, #1
   1918c:	str	r0, [sp]
   19190:	movt	r2, #1
   19194:	mov	r0, r8
   19198:	bl	1140c <__fprintf_chk@plt>
   1919c:	movw	r4, #47111	; 0xb807
   191a0:	mov	r1, r8
   191a4:	movt	r4, #1
   191a8:	mov	r0, r4
   191ac:	bl	11208 <fputs_unlocked@plt>
   191b0:	movw	r1, #49951	; 0xc31f
   191b4:	mov	r0, #0
   191b8:	mov	r2, #5
   191bc:	movt	r1, #1
   191c0:	bl	112a4 <dcgettext@plt>
   191c4:	movw	r3, #50122	; 0xc3ca
   191c8:	mov	r2, r0
   191cc:	mov	r0, r8
   191d0:	mov	r1, #1
   191d4:	movt	r3, #1
   191d8:	bl	1140c <__fprintf_chk@plt>
   191dc:	mov	r0, r4
   191e0:	mov	r1, r8
   191e4:	bl	11208 <fputs_unlocked@plt>
   191e8:	cmp	r6, #9
   191ec:	bhi	19228 <__assert_fail@plt+0x7d08>
   191f0:	add	r0, pc, #0
   191f4:	ldr	pc, [r0, r6, lsl #2]
   191f8:	andeq	r9, r1, r0, lsr #4
   191fc:	andeq	r9, r1, r4, lsr r2
   19200:	andeq	r9, r1, r4, ror #4
   19204:	andeq	r9, r1, ip, lsl #5
   19208:			; <UNDEFINED> instruction: 0x000192b4
   1920c:	ldrdeq	r9, [r1], -ip
   19210:	andeq	r9, r1, r4, lsl #6
   19214:	andeq	r9, r1, ip, lsr r3
   19218:	andeq	r9, r1, r4, ror #7
   1921c:	andeq	r9, r1, ip, lsl #7
   19220:	sub	sp, fp, #24
   19224:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19228:	movw	r1, #50475	; 0xc52b
   1922c:	movt	r1, #1
   19230:	b	19394 <__assert_fail@plt+0x7e74>
   19234:	movw	r1, #50156	; 0xc3ec
   19238:	mov	r0, #0
   1923c:	mov	r2, #5
   19240:	movt	r1, #1
   19244:	bl	112a4 <dcgettext@plt>
   19248:	ldr	r3, [r7]
   1924c:	mov	r2, r0
   19250:	mov	r0, r8
   19254:	mov	r1, #1
   19258:	sub	sp, fp, #24
   1925c:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   19260:	b	1140c <__fprintf_chk@plt>
   19264:	movw	r1, #50172	; 0xc3fc
   19268:	mov	r0, #0
   1926c:	mov	r2, #5
   19270:	movt	r1, #1
   19274:	bl	112a4 <dcgettext@plt>
   19278:	mov	r2, r0
   1927c:	ldr	r3, [r7]
   19280:	ldr	r0, [r7, #4]
   19284:	str	r0, [sp]
   19288:	b	19378 <__assert_fail@plt+0x7e58>
   1928c:	movw	r1, #50195	; 0xc413
   19290:	mov	r0, #0
   19294:	mov	r2, #5
   19298:	movt	r1, #1
   1929c:	bl	112a4 <dcgettext@plt>
   192a0:	ldr	r3, [r7]
   192a4:	mov	r2, r0
   192a8:	ldmib	r7, {r0, r1}
   192ac:	stm	sp, {r0, r1}
   192b0:	b	19378 <__assert_fail@plt+0x7e58>
   192b4:	movw	r1, #50223	; 0xc42f
   192b8:	mov	r0, #0
   192bc:	mov	r2, #5
   192c0:	movt	r1, #1
   192c4:	bl	112a4 <dcgettext@plt>
   192c8:	ldr	r3, [r7]
   192cc:	mov	r2, r0
   192d0:	ldmib	r7, {r0, r1, r7}
   192d4:	stm	sp, {r0, r1, r7}
   192d8:	b	19378 <__assert_fail@plt+0x7e58>
   192dc:	movw	r1, #50255	; 0xc44f
   192e0:	mov	r0, #0
   192e4:	mov	r2, #5
   192e8:	movt	r1, #1
   192ec:	bl	112a4 <dcgettext@plt>
   192f0:	ldr	r3, [r7]
   192f4:	mov	r2, r0
   192f8:	ldmib	r7, {r0, r1, r6, r7}
   192fc:	stm	sp, {r0, r1, r6, r7}
   19300:	b	19378 <__assert_fail@plt+0x7e58>
   19304:	movw	r1, #50291	; 0xc473
   19308:	mov	r0, #0
   1930c:	mov	r2, #5
   19310:	movt	r1, #1
   19314:	bl	112a4 <dcgettext@plt>
   19318:	ldr	r3, [r7]
   1931c:	mov	r2, r0
   19320:	ldmib	r7, {r0, r1, r6}
   19324:	ldr	r5, [r7, #16]
   19328:	ldr	r7, [r7, #20]
   1932c:	stm	sp, {r0, r1, r6}
   19330:	str	r5, [sp, #12]
   19334:	str	r7, [sp, #16]
   19338:	b	19378 <__assert_fail@plt+0x7e58>
   1933c:	movw	r1, #50331	; 0xc49b
   19340:	mov	r0, #0
   19344:	mov	r2, #5
   19348:	movt	r1, #1
   1934c:	bl	112a4 <dcgettext@plt>
   19350:	ldr	r3, [r7]
   19354:	mov	r2, r0
   19358:	ldmib	r7, {r0, r1, r6}
   1935c:	ldr	r5, [r7, #16]
   19360:	ldr	r4, [r7, #20]
   19364:	ldr	r7, [r7, #24]
   19368:	stm	sp, {r0, r1, r6}
   1936c:	str	r5, [sp, #12]
   19370:	str	r4, [sp, #16]
   19374:	str	r7, [sp, #20]
   19378:	mov	r0, r8
   1937c:	mov	r1, #1
   19380:	bl	1140c <__fprintf_chk@plt>
   19384:	sub	sp, fp, #24
   19388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1938c:	movw	r1, #50423	; 0xc4f7
   19390:	movt	r1, #1
   19394:	mov	r0, #0
   19398:	mov	r2, #5
   1939c:	bl	112a4 <dcgettext@plt>
   193a0:	mov	ip, r0
   193a4:	ldr	r3, [r7]
   193a8:	ldr	r0, [r7, #4]
   193ac:	ldr	r1, [r7, #8]
   193b0:	ldr	r6, [r7, #12]
   193b4:	ldr	r5, [r7, #16]
   193b8:	ldr	r4, [r7, #20]
   193bc:	ldr	r2, [r7, #24]
   193c0:	ldr	lr, [r7, #28]
   193c4:	ldr	r7, [r7, #32]
   193c8:	stm	sp, {r0, r1, r6}
   193cc:	str	r5, [sp, #12]
   193d0:	str	r4, [sp, #16]
   193d4:	str	r2, [sp, #20]
   193d8:	str	lr, [sp, #24]
   193dc:	str	r7, [sp, #28]
   193e0:	b	19428 <__assert_fail@plt+0x7f08>
   193e4:	movw	r1, #50375	; 0xc4c7
   193e8:	mov	r0, #0
   193ec:	mov	r2, #5
   193f0:	movt	r1, #1
   193f4:	bl	112a4 <dcgettext@plt>
   193f8:	mov	ip, r0
   193fc:	ldr	r3, [r7]
   19400:	ldmib	r7, {r0, r1, r6}
   19404:	ldr	r5, [r7, #16]
   19408:	ldr	r4, [r7, #20]
   1940c:	ldr	r2, [r7, #24]
   19410:	ldr	r7, [r7, #28]
   19414:	stm	sp, {r0, r1, r6}
   19418:	str	r5, [sp, #12]
   1941c:	str	r4, [sp, #16]
   19420:	str	r2, [sp, #20]
   19424:	str	r7, [sp, #24]
   19428:	mov	r0, r8
   1942c:	mov	r1, #1
   19430:	mov	r2, ip
   19434:	bl	1140c <__fprintf_chk@plt>
   19438:	sub	sp, fp, #24
   1943c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19440:	push	{r4, sl, fp, lr}
   19444:	add	fp, sp, #8
   19448:	sub	sp, sp, #8
   1944c:	ldr	ip, [fp, #8]
   19450:	mov	lr, #0
   19454:	ldr	r4, [ip, lr, lsl #2]
   19458:	add	lr, lr, #1
   1945c:	cmp	r4, #0
   19460:	bne	19454 <__assert_fail@plt+0x7f34>
   19464:	sub	r4, lr, #1
   19468:	str	ip, [sp]
   1946c:	str	r4, [sp, #4]
   19470:	bl	19104 <__assert_fail@plt+0x7be4>
   19474:	sub	sp, fp, #8
   19478:	pop	{r4, sl, fp, pc}
   1947c:	push	{fp, lr}
   19480:	mov	fp, sp
   19484:	sub	sp, sp, #48	; 0x30
   19488:	ldr	ip, [fp, #8]
   1948c:	ldr	lr, [ip]
   19490:	cmp	lr, #0
   19494:	str	lr, [sp, #8]
   19498:	beq	19534 <__assert_fail@plt+0x8014>
   1949c:	ldr	lr, [ip, #4]
   194a0:	cmp	lr, #0
   194a4:	str	lr, [sp, #12]
   194a8:	beq	1953c <__assert_fail@plt+0x801c>
   194ac:	ldr	lr, [ip, #8]
   194b0:	cmp	lr, #0
   194b4:	str	lr, [sp, #16]
   194b8:	beq	19544 <__assert_fail@plt+0x8024>
   194bc:	ldr	lr, [ip, #12]
   194c0:	cmp	lr, #0
   194c4:	str	lr, [sp, #20]
   194c8:	beq	1954c <__assert_fail@plt+0x802c>
   194cc:	ldr	lr, [ip, #16]
   194d0:	cmp	lr, #0
   194d4:	str	lr, [sp, #24]
   194d8:	beq	19554 <__assert_fail@plt+0x8034>
   194dc:	ldr	lr, [ip, #20]
   194e0:	cmp	lr, #0
   194e4:	str	lr, [sp, #28]
   194e8:	beq	1955c <__assert_fail@plt+0x803c>
   194ec:	ldr	lr, [ip, #24]
   194f0:	cmp	lr, #0
   194f4:	str	lr, [sp, #32]
   194f8:	beq	19564 <__assert_fail@plt+0x8044>
   194fc:	ldr	lr, [ip, #28]
   19500:	cmp	lr, #0
   19504:	str	lr, [sp, #36]	; 0x24
   19508:	beq	1956c <__assert_fail@plt+0x804c>
   1950c:	ldr	lr, [ip, #32]
   19510:	cmp	lr, #0
   19514:	str	lr, [sp, #40]	; 0x28
   19518:	beq	19574 <__assert_fail@plt+0x8054>
   1951c:	ldr	lr, [ip, #36]	; 0x24
   19520:	mov	ip, #10
   19524:	cmp	lr, #0
   19528:	str	lr, [sp, #44]	; 0x2c
   1952c:	movweq	ip, #9
   19530:	b	19578 <__assert_fail@plt+0x8058>
   19534:	mov	ip, #0
   19538:	b	19578 <__assert_fail@plt+0x8058>
   1953c:	mov	ip, #1
   19540:	b	19578 <__assert_fail@plt+0x8058>
   19544:	mov	ip, #2
   19548:	b	19578 <__assert_fail@plt+0x8058>
   1954c:	mov	ip, #3
   19550:	b	19578 <__assert_fail@plt+0x8058>
   19554:	mov	ip, #4
   19558:	b	19578 <__assert_fail@plt+0x8058>
   1955c:	mov	ip, #5
   19560:	b	19578 <__assert_fail@plt+0x8058>
   19564:	mov	ip, #6
   19568:	b	19578 <__assert_fail@plt+0x8058>
   1956c:	mov	ip, #7
   19570:	b	19578 <__assert_fail@plt+0x8058>
   19574:	mov	ip, #8
   19578:	add	lr, sp, #8
   1957c:	str	ip, [sp, #4]
   19580:	str	lr, [sp]
   19584:	bl	19104 <__assert_fail@plt+0x7be4>
   19588:	mov	sp, fp
   1958c:	pop	{fp, pc}
   19590:	push	{fp, lr}
   19594:	mov	fp, sp
   19598:	sub	sp, sp, #56	; 0x38
   1959c:	add	ip, fp, #8
   195a0:	str	ip, [sp, #12]
   195a4:	ldr	lr, [fp, #8]
   195a8:	cmp	lr, #0
   195ac:	str	lr, [sp, #16]
   195b0:	beq	1964c <__assert_fail@plt+0x812c>
   195b4:	ldr	lr, [ip, #4]
   195b8:	cmp	lr, #0
   195bc:	str	lr, [sp, #20]
   195c0:	beq	19654 <__assert_fail@plt+0x8134>
   195c4:	ldr	lr, [ip, #8]
   195c8:	cmp	lr, #0
   195cc:	str	lr, [sp, #24]
   195d0:	beq	1965c <__assert_fail@plt+0x813c>
   195d4:	ldr	lr, [ip, #12]
   195d8:	cmp	lr, #0
   195dc:	str	lr, [sp, #28]
   195e0:	beq	19664 <__assert_fail@plt+0x8144>
   195e4:	ldr	lr, [ip, #16]
   195e8:	cmp	lr, #0
   195ec:	str	lr, [sp, #32]
   195f0:	beq	1966c <__assert_fail@plt+0x814c>
   195f4:	ldr	lr, [ip, #20]
   195f8:	cmp	lr, #0
   195fc:	str	lr, [sp, #36]	; 0x24
   19600:	beq	19674 <__assert_fail@plt+0x8154>
   19604:	ldr	lr, [ip, #24]
   19608:	cmp	lr, #0
   1960c:	str	lr, [sp, #40]	; 0x28
   19610:	beq	1967c <__assert_fail@plt+0x815c>
   19614:	ldr	lr, [ip, #28]
   19618:	cmp	lr, #0
   1961c:	str	lr, [sp, #44]	; 0x2c
   19620:	beq	19684 <__assert_fail@plt+0x8164>
   19624:	ldr	lr, [ip, #32]
   19628:	cmp	lr, #0
   1962c:	str	lr, [sp, #48]	; 0x30
   19630:	beq	1968c <__assert_fail@plt+0x816c>
   19634:	ldr	lr, [ip, #36]	; 0x24
   19638:	mov	ip, #10
   1963c:	cmp	lr, #0
   19640:	str	lr, [sp, #52]	; 0x34
   19644:	movweq	ip, #9
   19648:	b	19690 <__assert_fail@plt+0x8170>
   1964c:	mov	ip, #0
   19650:	b	19690 <__assert_fail@plt+0x8170>
   19654:	mov	ip, #1
   19658:	b	19690 <__assert_fail@plt+0x8170>
   1965c:	mov	ip, #2
   19660:	b	19690 <__assert_fail@plt+0x8170>
   19664:	mov	ip, #3
   19668:	b	19690 <__assert_fail@plt+0x8170>
   1966c:	mov	ip, #4
   19670:	b	19690 <__assert_fail@plt+0x8170>
   19674:	mov	ip, #5
   19678:	b	19690 <__assert_fail@plt+0x8170>
   1967c:	mov	ip, #6
   19680:	b	19690 <__assert_fail@plt+0x8170>
   19684:	mov	ip, #7
   19688:	b	19690 <__assert_fail@plt+0x8170>
   1968c:	mov	ip, #8
   19690:	add	lr, sp, #16
   19694:	str	ip, [sp, #4]
   19698:	str	lr, [sp]
   1969c:	bl	19104 <__assert_fail@plt+0x7be4>
   196a0:	mov	sp, fp
   196a4:	pop	{fp, pc}
   196a8:	push	{fp, lr}
   196ac:	mov	fp, sp
   196b0:	movw	r0, #53644	; 0xd18c
   196b4:	movt	r0, #2
   196b8:	ldr	r1, [r0]
   196bc:	movw	r0, #47111	; 0xb807
   196c0:	movt	r0, #1
   196c4:	bl	11208 <fputs_unlocked@plt>
   196c8:	movw	r1, #50535	; 0xc567
   196cc:	mov	r0, #0
   196d0:	mov	r2, #5
   196d4:	movt	r1, #1
   196d8:	bl	112a4 <dcgettext@plt>
   196dc:	movw	r2, #50555	; 0xc57b
   196e0:	mov	r1, r0
   196e4:	mov	r0, #1
   196e8:	movt	r2, #1
   196ec:	bl	113f4 <__printf_chk@plt>
   196f0:	movw	r1, #50577	; 0xc591
   196f4:	mov	r0, #0
   196f8:	mov	r2, #5
   196fc:	movt	r1, #1
   19700:	bl	112a4 <dcgettext@plt>
   19704:	movw	r2, #47651	; 0xba23
   19708:	movw	r3, #47926	; 0xbb36
   1970c:	mov	r1, r0
   19710:	mov	r0, #1
   19714:	movt	r2, #1
   19718:	movt	r3, #1
   1971c:	bl	113f4 <__printf_chk@plt>
   19720:	movw	r1, #50597	; 0xc5a5
   19724:	mov	r0, #0
   19728:	mov	r2, #5
   1972c:	movt	r1, #1
   19730:	bl	112a4 <dcgettext@plt>
   19734:	movw	r2, #50636	; 0xc5cc
   19738:	mov	r1, r0
   1973c:	mov	r0, #1
   19740:	movt	r2, #1
   19744:	pop	{fp, lr}
   19748:	b	113f4 <__printf_chk@plt>
   1974c:	push	{r4, r5, r6, sl, fp, lr}
   19750:	add	fp, sp, #16
   19754:	mov	r4, r2
   19758:	mov	r5, r1
   1975c:	mov	r6, r0
   19760:	bl	1ad18 <__assert_fail@plt+0x97f8>
   19764:	cmp	r0, #0
   19768:	popne	{r4, r5, r6, sl, fp, pc}
   1976c:	cmp	r6, #0
   19770:	beq	19784 <__assert_fail@plt+0x8264>
   19774:	cmp	r5, #0
   19778:	cmpne	r4, #0
   1977c:	bne	19784 <__assert_fail@plt+0x8264>
   19780:	pop	{r4, r5, r6, sl, fp, pc}
   19784:	bl	19d24 <__assert_fail@plt+0x8804>
   19788:	push	{r4, r5, r6, sl, fp, lr}
   1978c:	add	fp, sp, #16
   19790:	mov	r4, r2
   19794:	mov	r5, r1
   19798:	mov	r6, r0
   1979c:	bl	1ad18 <__assert_fail@plt+0x97f8>
   197a0:	cmp	r0, #0
   197a4:	popne	{r4, r5, r6, sl, fp, pc}
   197a8:	cmp	r6, #0
   197ac:	beq	197c0 <__assert_fail@plt+0x82a0>
   197b0:	cmp	r5, #0
   197b4:	cmpne	r4, #0
   197b8:	bne	197c0 <__assert_fail@plt+0x82a0>
   197bc:	pop	{r4, r5, r6, sl, fp, pc}
   197c0:	bl	19d24 <__assert_fail@plt+0x8804>
   197c4:	push	{fp, lr}
   197c8:	mov	fp, sp
   197cc:	bl	1a6b4 <__assert_fail@plt+0x9194>
   197d0:	cmp	r0, #0
   197d4:	popne	{fp, pc}
   197d8:	bl	19d24 <__assert_fail@plt+0x8804>
   197dc:	push	{fp, lr}
   197e0:	mov	fp, sp
   197e4:	bl	1a6b4 <__assert_fail@plt+0x9194>
   197e8:	cmp	r0, #0
   197ec:	popne	{fp, pc}
   197f0:	bl	19d24 <__assert_fail@plt+0x8804>
   197f4:	push	{fp, lr}
   197f8:	mov	fp, sp
   197fc:	bl	1a6b4 <__assert_fail@plt+0x9194>
   19800:	cmp	r0, #0
   19804:	popne	{fp, pc}
   19808:	bl	19d24 <__assert_fail@plt+0x8804>
   1980c:	push	{r4, r5, fp, lr}
   19810:	add	fp, sp, #8
   19814:	mov	r4, r1
   19818:	mov	r5, r0
   1981c:	bl	1a6e4 <__assert_fail@plt+0x91c4>
   19820:	cmp	r0, #0
   19824:	popne	{r4, r5, fp, pc}
   19828:	cmp	r5, #0
   1982c:	beq	1983c <__assert_fail@plt+0x831c>
   19830:	cmp	r4, #0
   19834:	bne	1983c <__assert_fail@plt+0x831c>
   19838:	pop	{r4, r5, fp, pc}
   1983c:	bl	19d24 <__assert_fail@plt+0x8804>
   19840:	push	{fp, lr}
   19844:	mov	fp, sp
   19848:	cmp	r1, #0
   1984c:	orreq	r1, r1, #1
   19850:	bl	1a6e4 <__assert_fail@plt+0x91c4>
   19854:	cmp	r0, #0
   19858:	popne	{fp, pc}
   1985c:	bl	19d24 <__assert_fail@plt+0x8804>
   19860:	push	{fp, lr}
   19864:	mov	fp, sp
   19868:	clz	r3, r2
   1986c:	lsr	ip, r3, #5
   19870:	clz	r3, r1
   19874:	lsr	r3, r3, #5
   19878:	orrs	r3, r3, ip
   1987c:	movwne	r1, #1
   19880:	movwne	r2, #1
   19884:	bl	1ad18 <__assert_fail@plt+0x97f8>
   19888:	cmp	r0, #0
   1988c:	popne	{fp, pc}
   19890:	bl	19d24 <__assert_fail@plt+0x8804>
   19894:	push	{fp, lr}
   19898:	mov	fp, sp
   1989c:	mov	r2, r1
   198a0:	mov	r1, r0
   198a4:	mov	r0, #0
   198a8:	bl	1ad18 <__assert_fail@plt+0x97f8>
   198ac:	cmp	r0, #0
   198b0:	popne	{fp, pc}
   198b4:	bl	19d24 <__assert_fail@plt+0x8804>
   198b8:	push	{fp, lr}
   198bc:	mov	fp, sp
   198c0:	mov	r2, r1
   198c4:	mov	r1, r0
   198c8:	clz	r0, r2
   198cc:	clz	r3, r1
   198d0:	lsr	r0, r0, #5
   198d4:	lsr	r3, r3, #5
   198d8:	orrs	r0, r3, r0
   198dc:	movwne	r1, #1
   198e0:	movwne	r2, #1
   198e4:	mov	r0, #0
   198e8:	bl	1ad18 <__assert_fail@plt+0x97f8>
   198ec:	cmp	r0, #0
   198f0:	popne	{fp, pc}
   198f4:	bl	19d24 <__assert_fail@plt+0x8804>
   198f8:	push	{r4, r5, r6, sl, fp, lr}
   198fc:	add	fp, sp, #16
   19900:	ldr	r5, [r1]
   19904:	mov	r4, r1
   19908:	mov	r6, r0
   1990c:	cmp	r0, #0
   19910:	beq	19928 <__assert_fail@plt+0x8408>
   19914:	mov	r0, #1
   19918:	add	r0, r0, r5, lsr #1
   1991c:	adds	r5, r5, r0
   19920:	bcc	19930 <__assert_fail@plt+0x8410>
   19924:	b	1996c <__assert_fail@plt+0x844c>
   19928:	cmp	r5, #0
   1992c:	movweq	r5, #64	; 0x40
   19930:	mov	r0, r6
   19934:	mov	r1, r5
   19938:	mov	r2, #1
   1993c:	bl	1ad18 <__assert_fail@plt+0x97f8>
   19940:	cmp	r5, #0
   19944:	mov	r1, r5
   19948:	movwne	r1, #1
   1994c:	cmp	r0, #0
   19950:	bne	19964 <__assert_fail@plt+0x8444>
   19954:	clz	r2, r6
   19958:	lsr	r2, r2, #5
   1995c:	orrs	r1, r2, r1
   19960:	bne	1996c <__assert_fail@plt+0x844c>
   19964:	str	r5, [r4]
   19968:	pop	{r4, r5, r6, sl, fp, pc}
   1996c:	bl	19d24 <__assert_fail@plt+0x8804>
   19970:	push	{r4, r5, r6, r7, fp, lr}
   19974:	add	fp, sp, #16
   19978:	ldr	r5, [r1]
   1997c:	mov	r6, r2
   19980:	mov	r4, r1
   19984:	mov	r7, r0
   19988:	cmp	r0, #0
   1998c:	beq	199a4 <__assert_fail@plt+0x8484>
   19990:	mov	r0, #1
   19994:	add	r0, r0, r5, lsr #1
   19998:	adds	r5, r5, r0
   1999c:	bcc	199bc <__assert_fail@plt+0x849c>
   199a0:	b	199f0 <__assert_fail@plt+0x84d0>
   199a4:	cmp	r5, #0
   199a8:	bne	199bc <__assert_fail@plt+0x849c>
   199ac:	mov	r0, #64	; 0x40
   199b0:	cmp	r6, #64	; 0x40
   199b4:	udiv	r5, r0, r6
   199b8:	addhi	r5, r5, #1
   199bc:	mov	r0, r7
   199c0:	mov	r1, r5
   199c4:	mov	r2, r6
   199c8:	bl	1ad18 <__assert_fail@plt+0x97f8>
   199cc:	cmp	r0, #0
   199d0:	bne	199e8 <__assert_fail@plt+0x84c8>
   199d4:	cmp	r7, #0
   199d8:	beq	199f0 <__assert_fail@plt+0x84d0>
   199dc:	cmp	r6, #0
   199e0:	cmpne	r5, #0
   199e4:	bne	199f0 <__assert_fail@plt+0x84d0>
   199e8:	str	r5, [r4]
   199ec:	pop	{r4, r5, r6, r7, fp, pc}
   199f0:	bl	19d24 <__assert_fail@plt+0x8804>
   199f4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   199f8:	add	fp, sp, #24
   199fc:	mov	r8, r1
   19a00:	ldr	r1, [r1]
   19a04:	mov	r5, r0
   19a08:	add	r0, r1, r1, asr #1
   19a0c:	cmp	r0, r1
   19a10:	mvnvs	r0, #-2147483648	; 0x80000000
   19a14:	cmp	r0, r3
   19a18:	mov	r7, r0
   19a1c:	movgt	r7, r3
   19a20:	cmn	r3, #1
   19a24:	movle	r7, r0
   19a28:	ldr	r0, [fp, #8]
   19a2c:	cmn	r0, #1
   19a30:	ble	19a58 <__assert_fail@plt+0x8538>
   19a34:	cmp	r0, #0
   19a38:	beq	19aac <__assert_fail@plt+0x858c>
   19a3c:	cmn	r7, #1
   19a40:	ble	19a80 <__assert_fail@plt+0x8560>
   19a44:	mvn	r4, #-2147483648	; 0x80000000
   19a48:	udiv	r6, r4, r0
   19a4c:	cmp	r6, r7
   19a50:	bge	19aac <__assert_fail@plt+0x858c>
   19a54:	b	19abc <__assert_fail@plt+0x859c>
   19a58:	cmn	r7, #1
   19a5c:	ble	19a9c <__assert_fail@plt+0x857c>
   19a60:	cmn	r0, #1
   19a64:	beq	19aac <__assert_fail@plt+0x858c>
   19a68:	mov	r6, #-2147483648	; 0x80000000
   19a6c:	mvn	r4, #-2147483648	; 0x80000000
   19a70:	sdiv	r6, r6, r0
   19a74:	cmp	r6, r7
   19a78:	bge	19aac <__assert_fail@plt+0x858c>
   19a7c:	b	19abc <__assert_fail@plt+0x859c>
   19a80:	beq	19aac <__assert_fail@plt+0x858c>
   19a84:	mov	r6, #-2147483648	; 0x80000000
   19a88:	mvn	r4, #-2147483648	; 0x80000000
   19a8c:	sdiv	r6, r6, r7
   19a90:	cmp	r6, r0
   19a94:	bge	19aac <__assert_fail@plt+0x858c>
   19a98:	b	19abc <__assert_fail@plt+0x859c>
   19a9c:	mvn	r4, #-2147483648	; 0x80000000
   19aa0:	sdiv	r6, r4, r0
   19aa4:	cmp	r7, r6
   19aa8:	blt	19abc <__assert_fail@plt+0x859c>
   19aac:	mul	r6, r7, r0
   19ab0:	mov	r4, #64	; 0x40
   19ab4:	cmp	r6, #63	; 0x3f
   19ab8:	bgt	19ac4 <__assert_fail@plt+0x85a4>
   19abc:	sdiv	r7, r4, r0
   19ac0:	mul	r6, r7, r0
   19ac4:	cmp	r5, #0
   19ac8:	moveq	r4, #0
   19acc:	streq	r4, [r8]
   19ad0:	sub	r4, r7, r1
   19ad4:	cmp	r4, r2
   19ad8:	bge	19b84 <__assert_fail@plt+0x8664>
   19adc:	add	r7, r1, r2
   19ae0:	mov	r6, #0
   19ae4:	mov	r2, #0
   19ae8:	cmp	r7, r3
   19aec:	movwgt	r6, #1
   19af0:	cmn	r3, #1
   19af4:	movwgt	r2, #1
   19af8:	cmp	r7, r1
   19afc:	bvs	19bb8 <__assert_fail@plt+0x8698>
   19b00:	ands	r1, r2, r6
   19b04:	bne	19bb8 <__assert_fail@plt+0x8698>
   19b08:	cmn	r0, #1
   19b0c:	ble	19b34 <__assert_fail@plt+0x8614>
   19b10:	cmp	r0, #0
   19b14:	beq	19b80 <__assert_fail@plt+0x8660>
   19b18:	cmn	r7, #1
   19b1c:	ble	19b58 <__assert_fail@plt+0x8638>
   19b20:	mvn	r1, #-2147483648	; 0x80000000
   19b24:	udiv	r1, r1, r0
   19b28:	cmp	r1, r7
   19b2c:	bge	19b80 <__assert_fail@plt+0x8660>
   19b30:	b	19bb8 <__assert_fail@plt+0x8698>
   19b34:	cmn	r7, #1
   19b38:	ble	19b70 <__assert_fail@plt+0x8650>
   19b3c:	cmn	r0, #1
   19b40:	beq	19b80 <__assert_fail@plt+0x8660>
   19b44:	mov	r1, #-2147483648	; 0x80000000
   19b48:	sdiv	r1, r1, r0
   19b4c:	cmp	r1, r7
   19b50:	bge	19b80 <__assert_fail@plt+0x8660>
   19b54:	b	19bb8 <__assert_fail@plt+0x8698>
   19b58:	beq	19b80 <__assert_fail@plt+0x8660>
   19b5c:	mov	r1, #-2147483648	; 0x80000000
   19b60:	sdiv	r1, r1, r7
   19b64:	cmp	r1, r0
   19b68:	bge	19b80 <__assert_fail@plt+0x8660>
   19b6c:	b	19bb8 <__assert_fail@plt+0x8698>
   19b70:	mvn	r1, #-2147483648	; 0x80000000
   19b74:	sdiv	r1, r1, r0
   19b78:	cmp	r7, r1
   19b7c:	blt	19bb8 <__assert_fail@plt+0x8698>
   19b80:	mul	r6, r7, r0
   19b84:	mov	r0, r5
   19b88:	mov	r1, r6
   19b8c:	bl	1a6e4 <__assert_fail@plt+0x91c4>
   19b90:	cmp	r6, #0
   19b94:	movwne	r6, #1
   19b98:	cmp	r0, #0
   19b9c:	bne	19bb0 <__assert_fail@plt+0x8690>
   19ba0:	clz	r1, r5
   19ba4:	lsr	r1, r1, #5
   19ba8:	orrs	r1, r1, r6
   19bac:	bne	19bb8 <__assert_fail@plt+0x8698>
   19bb0:	str	r7, [r8]
   19bb4:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   19bb8:	bl	19d24 <__assert_fail@plt+0x8804>
   19bbc:	push	{fp, lr}
   19bc0:	mov	fp, sp
   19bc4:	mov	r1, #1
   19bc8:	bl	1a660 <__assert_fail@plt+0x9140>
   19bcc:	cmp	r0, #0
   19bd0:	popne	{fp, pc}
   19bd4:	bl	19d24 <__assert_fail@plt+0x8804>
   19bd8:	push	{fp, lr}
   19bdc:	mov	fp, sp
   19be0:	bl	1a660 <__assert_fail@plt+0x9140>
   19be4:	cmp	r0, #0
   19be8:	popne	{fp, pc}
   19bec:	bl	19d24 <__assert_fail@plt+0x8804>
   19bf0:	push	{fp, lr}
   19bf4:	mov	fp, sp
   19bf8:	mov	r1, #1
   19bfc:	bl	1a660 <__assert_fail@plt+0x9140>
   19c00:	cmp	r0, #0
   19c04:	popne	{fp, pc}
   19c08:	bl	19d24 <__assert_fail@plt+0x8804>
   19c0c:	push	{fp, lr}
   19c10:	mov	fp, sp
   19c14:	bl	1a660 <__assert_fail@plt+0x9140>
   19c18:	cmp	r0, #0
   19c1c:	popne	{fp, pc}
   19c20:	bl	19d24 <__assert_fail@plt+0x8804>
   19c24:	push	{r4, r5, r6, sl, fp, lr}
   19c28:	add	fp, sp, #16
   19c2c:	mov	r5, r0
   19c30:	mov	r0, r1
   19c34:	mov	r4, r1
   19c38:	bl	1a6b4 <__assert_fail@plt+0x9194>
   19c3c:	cmp	r0, #0
   19c40:	beq	19c5c <__assert_fail@plt+0x873c>
   19c44:	mov	r1, r5
   19c48:	mov	r2, r4
   19c4c:	mov	r6, r0
   19c50:	bl	11274 <memcpy@plt>
   19c54:	mov	r0, r6
   19c58:	pop	{r4, r5, r6, sl, fp, pc}
   19c5c:	bl	19d24 <__assert_fail@plt+0x8804>
   19c60:	push	{r4, r5, r6, sl, fp, lr}
   19c64:	add	fp, sp, #16
   19c68:	mov	r5, r0
   19c6c:	mov	r0, r1
   19c70:	mov	r4, r1
   19c74:	bl	1a6b4 <__assert_fail@plt+0x9194>
   19c78:	cmp	r0, #0
   19c7c:	beq	19c98 <__assert_fail@plt+0x8778>
   19c80:	mov	r1, r5
   19c84:	mov	r2, r4
   19c88:	mov	r6, r0
   19c8c:	bl	11274 <memcpy@plt>
   19c90:	mov	r0, r6
   19c94:	pop	{r4, r5, r6, sl, fp, pc}
   19c98:	bl	19d24 <__assert_fail@plt+0x8804>
   19c9c:	push	{r4, r5, r6, sl, fp, lr}
   19ca0:	add	fp, sp, #16
   19ca4:	mov	r5, r0
   19ca8:	add	r0, r1, #1
   19cac:	mov	r4, r1
   19cb0:	bl	1a6b4 <__assert_fail@plt+0x9194>
   19cb4:	cmp	r0, #0
   19cb8:	beq	19ce0 <__assert_fail@plt+0x87c0>
   19cbc:	mov	r6, r0
   19cc0:	mov	r0, #0
   19cc4:	mov	r1, r5
   19cc8:	mov	r2, r4
   19ccc:	strb	r0, [r6, r4]
   19cd0:	mov	r0, r6
   19cd4:	bl	11274 <memcpy@plt>
   19cd8:	mov	r0, r6
   19cdc:	pop	{r4, r5, r6, sl, fp, pc}
   19ce0:	bl	19d24 <__assert_fail@plt+0x8804>
   19ce4:	push	{r4, r5, r6, sl, fp, lr}
   19ce8:	add	fp, sp, #16
   19cec:	mov	r4, r0
   19cf0:	bl	113a0 <strlen@plt>
   19cf4:	add	r5, r0, #1
   19cf8:	mov	r0, r5
   19cfc:	bl	1a6b4 <__assert_fail@plt+0x9194>
   19d00:	cmp	r0, #0
   19d04:	beq	19d20 <__assert_fail@plt+0x8800>
   19d08:	mov	r1, r4
   19d0c:	mov	r2, r5
   19d10:	mov	r6, r0
   19d14:	bl	11274 <memcpy@plt>
   19d18:	mov	r0, r6
   19d1c:	pop	{r4, r5, r6, sl, fp, pc}
   19d20:	bl	19d24 <__assert_fail@plt+0x8804>
   19d24:	push	{fp, lr}
   19d28:	mov	fp, sp
   19d2c:	movw	r0, #53556	; 0xd134
   19d30:	movw	r1, #50712	; 0xc618
   19d34:	mov	r2, #5
   19d38:	movt	r0, #2
   19d3c:	movt	r1, #1
   19d40:	ldr	r4, [r0]
   19d44:	mov	r0, #0
   19d48:	bl	112a4 <dcgettext@plt>
   19d4c:	movw	r2, #47648	; 0xba20
   19d50:	mov	r3, r0
   19d54:	mov	r0, r4
   19d58:	mov	r1, #0
   19d5c:	movt	r2, #1
   19d60:	bl	11328 <error@plt>
   19d64:	bl	114d8 <abort@plt>
   19d68:	push	{fp, lr}
   19d6c:	mov	fp, sp
   19d70:	orr	r1, r1, #512	; 0x200
   19d74:	bl	12fa0 <__assert_fail@plt+0x1a80>
   19d78:	cmp	r0, #0
   19d7c:	popne	{fp, pc}
   19d80:	bl	113d0 <__errno_location@plt>
   19d84:	ldr	r0, [r0]
   19d88:	cmp	r0, #22
   19d8c:	bne	19db0 <__assert_fail@plt+0x8890>
   19d90:	movw	r0, #50729	; 0xc629
   19d94:	movw	r1, #50745	; 0xc639
   19d98:	movw	r3, #50756	; 0xc644
   19d9c:	mov	r2, #41	; 0x29
   19da0:	movt	r0, #1
   19da4:	movt	r1, #1
   19da8:	movt	r3, #1
   19dac:	bl	11520 <__assert_fail@plt>
   19db0:	bl	19d24 <__assert_fail@plt+0x8804>
   19db4:	ldr	r0, [r0, #48]	; 0x30
   19db8:	and	r0, r0, #17
   19dbc:	cmp	r0, #16
   19dc0:	moveq	r0, #1
   19dc4:	bxeq	lr
   19dc8:	cmp	r0, #17
   19dcc:	movne	r0, #0
   19dd0:	bxne	lr
   19dd4:	ldr	r0, [r1, #48]	; 0x30
   19dd8:	cmp	r0, #0
   19ddc:	movwne	r0, #1
   19de0:	bx	lr
   19de4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19de8:	add	fp, sp, #28
   19dec:	sub	sp, sp, #20
   19df0:	cmp	r2, #37	; 0x25
   19df4:	bcs	1a640 <__assert_fail@plt+0x9120>
   19df8:	ldr	r9, [fp, #8]
   19dfc:	mov	r5, r2
   19e00:	mov	r4, r1
   19e04:	mov	r7, r0
   19e08:	str	r3, [sp, #12]
   19e0c:	bl	113d0 <__errno_location@plt>
   19e10:	mov	r8, r0
   19e14:	mov	r0, #0
   19e18:	str	r0, [r8]
   19e1c:	bl	1137c <__ctype_b_loc@plt>
   19e20:	ldr	r1, [r0]
   19e24:	mov	r2, r7
   19e28:	ldrb	r0, [r2], #1
   19e2c:	add	r3, r1, r0, lsl #1
   19e30:	ldrb	r3, [r3, #1]
   19e34:	tst	r3, #32
   19e38:	bne	19e28 <__assert_fail@plt+0x8908>
   19e3c:	add	r6, sp, #16
   19e40:	cmp	r4, #0
   19e44:	mov	sl, #4
   19e48:	movne	r6, r4
   19e4c:	cmp	r0, #45	; 0x2d
   19e50:	beq	19fdc <__assert_fail@plt+0x8abc>
   19e54:	mov	r0, r7
   19e58:	mov	r1, r6
   19e5c:	mov	r2, r5
   19e60:	bl	11394 <strtoul@plt>
   19e64:	ldr	r5, [r6]
   19e68:	cmp	r5, r7
   19e6c:	beq	19fcc <__assert_fail@plt+0x8aac>
   19e70:	mov	r4, r0
   19e74:	ldr	r0, [r8]
   19e78:	cmp	r0, #0
   19e7c:	beq	19fe8 <__assert_fail@plt+0x8ac8>
   19e80:	cmp	r0, #34	; 0x22
   19e84:	bne	19fdc <__assert_fail@plt+0x8abc>
   19e88:	mov	sl, #1
   19e8c:	cmp	r9, #0
   19e90:	beq	1a62c <__assert_fail@plt+0x910c>
   19e94:	ldrb	r7, [r5]
   19e98:	cmp	r7, #0
   19e9c:	beq	1a62c <__assert_fail@plt+0x910c>
   19ea0:	mov	r0, r9
   19ea4:	mov	r1, r7
   19ea8:	bl	113ac <strchr@plt>
   19eac:	cmp	r0, #0
   19eb0:	beq	1a1ac <__assert_fail@plt+0x8c8c>
   19eb4:	sub	r0, r7, #69	; 0x45
   19eb8:	mov	lr, #1
   19ebc:	mov	r8, #1024	; 0x400
   19ec0:	cmp	r0, #47	; 0x2f
   19ec4:	bhi	1a060 <__assert_fail@plt+0x8b40>
   19ec8:	add	r1, pc, #0
   19ecc:	ldr	pc, [r1, r0, lsl #2]
   19ed0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19ed4:	andeq	sl, r1, r0, rrx
   19ed8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19edc:	andeq	sl, r1, r0, rrx
   19ee0:	andeq	sl, r1, r0, rrx
   19ee4:	andeq	sl, r1, r0, rrx
   19ee8:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19eec:	andeq	sl, r1, r0, rrx
   19ef0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19ef4:	andeq	sl, r1, r0, rrx
   19ef8:	andeq	sl, r1, r0, rrx
   19efc:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f00:	andeq	sl, r1, r0, rrx
   19f04:	andeq	sl, r1, r0, rrx
   19f08:	andeq	sl, r1, r0, rrx
   19f0c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f10:	andeq	sl, r1, r0, rrx
   19f14:	andeq	sl, r1, r0, rrx
   19f18:	andeq	sl, r1, r0, rrx
   19f1c:	andeq	sl, r1, r0, rrx
   19f20:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f24:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f28:	andeq	sl, r1, r0, rrx
   19f2c:	andeq	sl, r1, r0, rrx
   19f30:	andeq	sl, r1, r0, rrx
   19f34:	andeq	sl, r1, r0, rrx
   19f38:	andeq	sl, r1, r0, rrx
   19f3c:	andeq	sl, r1, r0, rrx
   19f40:	andeq	sl, r1, r0, rrx
   19f44:	andeq	sl, r1, r0, rrx
   19f48:	andeq	sl, r1, r0, rrx
   19f4c:	andeq	sl, r1, r0, rrx
   19f50:	andeq	sl, r1, r0, rrx
   19f54:	andeq	sl, r1, r0, rrx
   19f58:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f5c:	andeq	sl, r1, r0, rrx
   19f60:	andeq	sl, r1, r0, rrx
   19f64:	andeq	sl, r1, r0, rrx
   19f68:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f6c:	andeq	sl, r1, r0, rrx
   19f70:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f74:	andeq	sl, r1, r0, rrx
   19f78:	andeq	sl, r1, r0, rrx
   19f7c:	andeq	sl, r1, r0, rrx
   19f80:	andeq	sl, r1, r0, rrx
   19f84:	andeq	sl, r1, r0, rrx
   19f88:	andeq	sl, r1, r0, rrx
   19f8c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   19f90:	mov	r0, r9
   19f94:	mov	r1, #48	; 0x30
   19f98:	bl	113ac <strchr@plt>
   19f9c:	cmp	r0, #0
   19fa0:	beq	1a020 <__assert_fail@plt+0x8b00>
   19fa4:	ldrb	r0, [r5, #1]
   19fa8:	cmp	r0, #66	; 0x42
   19fac:	cmpne	r0, #68	; 0x44
   19fb0:	bne	1a034 <__assert_fail@plt+0x8b14>
   19fb4:	mov	lr, #2
   19fb8:	mov	r8, #1000	; 0x3e8
   19fbc:	sub	r1, r7, #66	; 0x42
   19fc0:	cmp	r1, #53	; 0x35
   19fc4:	bls	1a06c <__assert_fail@plt+0x8b4c>
   19fc8:	b	1a1ac <__assert_fail@plt+0x8c8c>
   19fcc:	cmp	r9, #0
   19fd0:	ldrbne	r1, [r7]
   19fd4:	cmpne	r1, #0
   19fd8:	bne	19ff8 <__assert_fail@plt+0x8ad8>
   19fdc:	mov	r0, sl
   19fe0:	sub	sp, fp, #28
   19fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fe8:	mov	sl, r0
   19fec:	cmp	r9, #0
   19ff0:	bne	19e94 <__assert_fail@plt+0x8974>
   19ff4:	b	1a62c <__assert_fail@plt+0x910c>
   19ff8:	mov	r0, r9
   19ffc:	bl	113ac <strchr@plt>
   1a000:	cmp	r0, #0
   1a004:	beq	19fdc <__assert_fail@plt+0x8abc>
   1a008:	mov	r4, #1
   1a00c:	mov	sl, #0
   1a010:	ldrb	r7, [r5]
   1a014:	cmp	r7, #0
   1a018:	bne	19ea0 <__assert_fail@plt+0x8980>
   1a01c:	b	1a62c <__assert_fail@plt+0x910c>
   1a020:	mov	lr, #1
   1a024:	sub	r1, r7, #66	; 0x42
   1a028:	cmp	r1, #53	; 0x35
   1a02c:	bls	1a06c <__assert_fail@plt+0x8b4c>
   1a030:	b	1a1ac <__assert_fail@plt+0x8c8c>
   1a034:	cmp	r0, #105	; 0x69
   1a038:	bne	1a05c <__assert_fail@plt+0x8b3c>
   1a03c:	ldrb	r0, [r5, #2]
   1a040:	mov	lr, #1
   1a044:	cmp	r0, #66	; 0x42
   1a048:	movweq	lr, #3
   1a04c:	sub	r1, r7, #66	; 0x42
   1a050:	cmp	r1, #53	; 0x35
   1a054:	bls	1a06c <__assert_fail@plt+0x8b4c>
   1a058:	b	1a1ac <__assert_fail@plt+0x8c8c>
   1a05c:	mov	lr, #1
   1a060:	sub	r1, r7, #66	; 0x42
   1a064:	cmp	r1, #53	; 0x35
   1a068:	bhi	1a1ac <__assert_fail@plt+0x8c8c>
   1a06c:	add	r2, pc, #4
   1a070:	mov	r0, #0
   1a074:	ldr	pc, [r2, r1, lsl #2]
   1a078:	andeq	sl, r1, r4, ror r3
   1a07c:	andeq	sl, r1, ip, lsr #3
   1a080:	andeq	sl, r1, ip, lsr #3
   1a084:	muleq	r1, r0, r3
   1a088:	andeq	sl, r1, ip, lsr #3
   1a08c:	andeq	sl, r1, r0, asr r1
   1a090:	andeq	sl, r1, ip, lsr #3
   1a094:	andeq	sl, r1, ip, lsr #3
   1a098:	andeq	sl, r1, ip, lsr #3
   1a09c:	andeq	sl, r1, r4, asr #3
   1a0a0:	andeq	sl, r1, ip, lsr #3
   1a0a4:	andeq	sl, r1, r4, ror #3
   1a0a8:	andeq	sl, r1, ip, lsr #3
   1a0ac:	andeq	sl, r1, ip, lsr #3
   1a0b0:	andeq	sl, r1, r8, asr #8
   1a0b4:	andeq	sl, r1, ip, lsr #3
   1a0b8:	andeq	sl, r1, ip, lsr #3
   1a0bc:	andeq	sl, r1, ip, lsr #3
   1a0c0:	andeq	sl, r1, r4, lsr #4
   1a0c4:	andeq	sl, r1, ip, lsr #3
   1a0c8:	andeq	sl, r1, ip, lsr #3
   1a0cc:	andeq	sl, r1, ip, lsr #3
   1a0d0:	andeq	sl, r1, ip, lsr #3
   1a0d4:	andeq	sl, r1, r4, ror #9
   1a0d8:	muleq	r1, ip, r2
   1a0dc:	andeq	sl, r1, ip, lsr #3
   1a0e0:	andeq	sl, r1, ip, lsr #3
   1a0e4:	andeq	sl, r1, ip, lsr #3
   1a0e8:	andeq	sl, r1, ip, lsr #3
   1a0ec:	andeq	sl, r1, ip, lsr #3
   1a0f0:	andeq	sl, r1, ip, lsr #3
   1a0f4:	andeq	sl, r1, ip, lsr #3
   1a0f8:	ldrdeq	sl, [r1], -ip
   1a0fc:	andeq	sl, r1, r4, lsl r6
   1a100:	andeq	sl, r1, ip, lsr #3
   1a104:	andeq	sl, r1, ip, lsr #3
   1a108:	andeq	sl, r1, ip, lsr #3
   1a10c:	andeq	sl, r1, r0, asr r1
   1a110:	andeq	sl, r1, ip, lsr #3
   1a114:	andeq	sl, r1, ip, lsr #3
   1a118:	andeq	sl, r1, ip, lsr #3
   1a11c:	andeq	sl, r1, r4, asr #3
   1a120:	andeq	sl, r1, ip, lsr #3
   1a124:	andeq	sl, r1, r4, ror #3
   1a128:	andeq	sl, r1, ip, lsr #3
   1a12c:	andeq	sl, r1, ip, lsr #3
   1a130:	andeq	sl, r1, ip, lsr #3
   1a134:	andeq	sl, r1, ip, lsr #3
   1a138:	andeq	sl, r1, ip, lsr #3
   1a13c:	andeq	sl, r1, ip, lsr #3
   1a140:	andeq	sl, r1, r4, lsr #4
   1a144:	andeq	sl, r1, ip, lsr #3
   1a148:	andeq	sl, r1, ip, lsr #3
   1a14c:	andeq	sl, r1, r0, lsl #12
   1a150:	mvn	r0, #0
   1a154:	mul	r1, r4, r8
   1a158:	mov	r7, #0
   1a15c:	udiv	r0, r0, r8
   1a160:	cmp	r0, r4
   1a164:	mvncc	r1, #0
   1a168:	mul	r2, r1, r8
   1a16c:	cmp	r0, r1
   1a170:	mvncc	r2, #0
   1a174:	cmp	r0, r2
   1a178:	mul	r3, r2, r8
   1a17c:	mov	r2, #0
   1a180:	mvncc	r3, #0
   1a184:	movwcc	r7, #1
   1a188:	cmp	r0, r1
   1a18c:	mov	r1, #0
   1a190:	movwcc	r1, #1
   1a194:	cmp	r0, r4
   1a198:	mov	r4, r3
   1a19c:	movwcc	r2, #1
   1a1a0:	orr	r0, r2, r1
   1a1a4:	orr	r0, r0, r7
   1a1a8:	b	1a614 <__assert_fail@plt+0x90f4>
   1a1ac:	ldr	r0, [sp, #12]
   1a1b0:	orr	sl, sl, #2
   1a1b4:	str	r4, [r0]
   1a1b8:	mov	r0, sl
   1a1bc:	sub	sp, fp, #28
   1a1c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a1c4:	mvn	r0, #0
   1a1c8:	mul	r1, r4, r8
   1a1cc:	udiv	r0, r0, r8
   1a1d0:	cmp	r0, r4
   1a1d4:	mov	r0, #0
   1a1d8:	mvncc	r1, #0
   1a1dc:	movwcc	r0, #1
   1a1e0:	b	1a610 <__assert_fail@plt+0x90f0>
   1a1e4:	mvn	r0, #0
   1a1e8:	mul	r1, r4, r8
   1a1ec:	mov	r3, #0
   1a1f0:	udiv	r0, r0, r8
   1a1f4:	cmp	r0, r4
   1a1f8:	mvncc	r1, #0
   1a1fc:	cmp	r0, r1
   1a200:	mul	r2, r1, r8
   1a204:	mov	r1, #0
   1a208:	mvncc	r2, #0
   1a20c:	movwcc	r3, #1
   1a210:	cmp	r0, r4
   1a214:	movwcc	r1, #1
   1a218:	mov	r4, r2
   1a21c:	orr	r0, r1, r3
   1a220:	b	1a614 <__assert_fail@plt+0x90f4>
   1a224:	mvn	r0, #0
   1a228:	mul	r1, r4, r8
   1a22c:	mov	r7, #0
   1a230:	udiv	r0, r0, r8
   1a234:	cmp	r0, r4
   1a238:	mvncc	r1, #0
   1a23c:	mul	r2, r1, r8
   1a240:	cmp	r0, r1
   1a244:	mvncc	r2, #0
   1a248:	mul	r3, r2, r8
   1a24c:	cmp	r0, r2
   1a250:	mvncc	r3, #0
   1a254:	cmp	r0, r3
   1a258:	mul	ip, r3, r8
   1a25c:	mov	r3, #0
   1a260:	mvncc	ip, #0
   1a264:	movwcc	r7, #1
   1a268:	cmp	r0, r2
   1a26c:	mov	r2, #0
   1a270:	movwcc	r2, #1
   1a274:	cmp	r0, r1
   1a278:	mov	r1, #0
   1a27c:	movwcc	r1, #1
   1a280:	cmp	r0, r4
   1a284:	mov	r4, ip
   1a288:	movwcc	r3, #1
   1a28c:	orr	r0, r3, r1
   1a290:	orr	r0, r0, r2
   1a294:	orr	r0, r0, r7
   1a298:	b	1a614 <__assert_fail@plt+0x90f4>
   1a29c:	mvn	r0, #0
   1a2a0:	str	lr, [sp, #8]
   1a2a4:	mul	lr, r4, r8
   1a2a8:	udiv	r0, r0, r8
   1a2ac:	cmp	r0, r4
   1a2b0:	mvncc	lr, #0
   1a2b4:	mul	r9, lr, r8
   1a2b8:	cmp	r0, lr
   1a2bc:	mvncc	r9, #0
   1a2c0:	mul	r7, r9, r8
   1a2c4:	cmp	r0, r9
   1a2c8:	mvncc	r7, #0
   1a2cc:	mul	r3, r7, r8
   1a2d0:	cmp	r0, r7
   1a2d4:	mvncc	r3, #0
   1a2d8:	mul	r1, r3, r8
   1a2dc:	cmp	r0, r3
   1a2e0:	mvncc	r1, #0
   1a2e4:	mul	r2, r1, r8
   1a2e8:	cmp	r0, r1
   1a2ec:	mvncc	r2, #0
   1a2f0:	mul	ip, r2, r8
   1a2f4:	cmp	r0, r2
   1a2f8:	mov	r8, #0
   1a2fc:	mov	r2, #0
   1a300:	mvncc	ip, #0
   1a304:	movwcc	r8, #1
   1a308:	cmp	r0, r1
   1a30c:	mov	r1, #0
   1a310:	movwcc	r1, #1
   1a314:	cmp	r0, r3
   1a318:	mov	r3, #0
   1a31c:	movwcc	r3, #1
   1a320:	cmp	r0, r7
   1a324:	mov	r7, #0
   1a328:	movwcc	r7, #1
   1a32c:	cmp	r0, r9
   1a330:	mov	r9, #0
   1a334:	movwcc	r9, #1
   1a338:	cmp	r0, lr
   1a33c:	mov	lr, #0
   1a340:	movwcc	lr, #1
   1a344:	cmp	r0, r4
   1a348:	mov	r4, ip
   1a34c:	movwcc	r2, #1
   1a350:	orr	r0, r2, lr
   1a354:	ldr	lr, [sp, #8]
   1a358:	orr	r0, r0, r9
   1a35c:	orr	r0, r0, r7
   1a360:	orr	r0, r0, r3
   1a364:	orr	r0, r0, r1
   1a368:	orr	r0, r0, r8
   1a36c:	and	r0, r0, #1
   1a370:	b	1a614 <__assert_fail@plt+0x90f4>
   1a374:	mov	r1, #0
   1a378:	lsr	r0, r4, #22
   1a37c:	cmp	r1, r4, lsr #22
   1a380:	lsl	r4, r4, #10
   1a384:	movwne	r0, #1
   1a388:	mvnne	r4, #0
   1a38c:	b	1a614 <__assert_fail@plt+0x90f4>
   1a390:	mvn	r0, #0
   1a394:	mul	ip, r4, r8
   1a398:	str	lr, [sp, #8]
   1a39c:	mov	r9, #0
   1a3a0:	udiv	r0, r0, r8
   1a3a4:	cmp	r0, r4
   1a3a8:	mvncc	ip, #0
   1a3ac:	mul	r2, ip, r8
   1a3b0:	cmp	r0, ip
   1a3b4:	mvncc	r2, #0
   1a3b8:	mul	r3, r2, r8
   1a3bc:	cmp	r0, r2
   1a3c0:	mvncc	r3, #0
   1a3c4:	mul	r7, r3, r8
   1a3c8:	cmp	r0, r3
   1a3cc:	mvncc	r7, #0
   1a3d0:	mul	r1, r7, r8
   1a3d4:	cmp	r0, r7
   1a3d8:	mvncc	r1, #0
   1a3dc:	mul	lr, r1, r8
   1a3e0:	cmp	r0, r1
   1a3e4:	mov	r8, #0
   1a3e8:	mov	r1, #0
   1a3ec:	mvncc	lr, #0
   1a3f0:	movwcc	r8, #1
   1a3f4:	cmp	r0, r7
   1a3f8:	mov	r7, #0
   1a3fc:	movwcc	r7, #1
   1a400:	cmp	r0, r3
   1a404:	mov	r3, #0
   1a408:	movwcc	r3, #1
   1a40c:	cmp	r0, r2
   1a410:	mov	r2, #0
   1a414:	movwcc	r2, #1
   1a418:	cmp	r0, ip
   1a41c:	movwcc	r1, #1
   1a420:	cmp	r0, r4
   1a424:	mov	r4, lr
   1a428:	ldr	lr, [sp, #8]
   1a42c:	movwcc	r9, #1
   1a430:	orr	r0, r9, r1
   1a434:	orr	r0, r0, r2
   1a438:	orr	r0, r0, r3
   1a43c:	orr	r0, r0, r7
   1a440:	orr	r0, r0, r8
   1a444:	b	1a614 <__assert_fail@plt+0x90f4>
   1a448:	mvn	r0, #0
   1a44c:	mul	r1, r4, r8
   1a450:	udiv	r0, r0, r8
   1a454:	cmp	r0, r4
   1a458:	mvncc	r1, #0
   1a45c:	mul	r2, r1, r8
   1a460:	cmp	r0, r1
   1a464:	mvncc	r2, #0
   1a468:	mul	r3, r2, r8
   1a46c:	cmp	r0, r2
   1a470:	mvncc	r3, #0
   1a474:	mul	r7, r3, r8
   1a478:	cmp	r0, r3
   1a47c:	mvncc	r7, #0
   1a480:	mul	ip, r7, r8
   1a484:	cmp	r0, r7
   1a488:	mov	r8, lr
   1a48c:	mov	lr, #0
   1a490:	mov	r7, #0
   1a494:	mvncc	ip, #0
   1a498:	movwcc	lr, #1
   1a49c:	cmp	r0, r3
   1a4a0:	mov	r3, #0
   1a4a4:	movwcc	r3, #1
   1a4a8:	cmp	r0, r2
   1a4ac:	mov	r2, #0
   1a4b0:	movwcc	r2, #1
   1a4b4:	cmp	r0, r1
   1a4b8:	mov	r1, #0
   1a4bc:	movwcc	r1, #1
   1a4c0:	cmp	r0, r4
   1a4c4:	mov	r4, ip
   1a4c8:	movwcc	r7, #1
   1a4cc:	orr	r0, r7, r1
   1a4d0:	orr	r0, r0, r2
   1a4d4:	orr	r0, r0, r3
   1a4d8:	orr	r0, r0, lr
   1a4dc:	mov	lr, r8
   1a4e0:	b	1a614 <__assert_fail@plt+0x90f4>
   1a4e4:	mvn	r0, #0
   1a4e8:	str	lr, [sp, #8]
   1a4ec:	mul	lr, r4, r8
   1a4f0:	udiv	r0, r0, r8
   1a4f4:	cmp	r0, r4
   1a4f8:	mvncc	lr, #0
   1a4fc:	mul	r9, lr, r8
   1a500:	cmp	r0, lr
   1a504:	mvncc	r9, #0
   1a508:	mul	r7, r9, r8
   1a50c:	cmp	r0, r9
   1a510:	mvncc	r7, #0
   1a514:	mul	r3, r7, r8
   1a518:	cmp	r0, r7
   1a51c:	mvncc	r3, #0
   1a520:	mul	r1, r3, r8
   1a524:	cmp	r0, r3
   1a528:	mvncc	r1, #0
   1a52c:	mul	r2, r1, r8
   1a530:	cmp	r0, r1
   1a534:	mvncc	r2, #0
   1a538:	mul	ip, r2, r8
   1a53c:	cmp	r0, r2
   1a540:	mvncc	ip, #0
   1a544:	mul	r8, ip, r8
   1a548:	cmp	r0, ip
   1a54c:	mov	ip, #0
   1a550:	mvncc	r8, #0
   1a554:	str	r8, [sp, #4]
   1a558:	mov	r8, #0
   1a55c:	movwcc	r8, #1
   1a560:	cmp	r0, r2
   1a564:	mov	r2, #0
   1a568:	movwcc	r2, #1
   1a56c:	cmp	r0, r1
   1a570:	mov	r1, #0
   1a574:	movwcc	r1, #1
   1a578:	cmp	r0, r3
   1a57c:	mov	r3, #0
   1a580:	movwcc	r3, #1
   1a584:	cmp	r0, r7
   1a588:	mov	r7, #0
   1a58c:	movwcc	r7, #1
   1a590:	cmp	r0, r9
   1a594:	mov	r9, #0
   1a598:	movwcc	r9, #1
   1a59c:	cmp	r0, lr
   1a5a0:	mov	lr, #0
   1a5a4:	movwcc	lr, #1
   1a5a8:	cmp	r0, r4
   1a5ac:	ldr	r4, [sp, #4]
   1a5b0:	movwcc	ip, #1
   1a5b4:	orr	r0, ip, lr
   1a5b8:	ldr	lr, [sp, #8]
   1a5bc:	orr	r0, r0, r9
   1a5c0:	orr	r0, r0, r7
   1a5c4:	orr	r0, r0, r3
   1a5c8:	orr	r0, r0, r1
   1a5cc:	orr	r0, r0, r2
   1a5d0:	orr	r0, r0, r8
   1a5d4:	and	r0, r0, #1
   1a5d8:	b	1a614 <__assert_fail@plt+0x90f4>
   1a5dc:	movw	r0, #65535	; 0xffff
   1a5e0:	movt	r0, #63	; 0x3f
   1a5e4:	add	r1, r0, #4194304	; 0x400000
   1a5e8:	mov	r0, #0
   1a5ec:	cmp	r4, r1
   1a5f0:	lsl	r4, r4, #9
   1a5f4:	movwhi	r0, #1
   1a5f8:	mvnhi	r4, #0
   1a5fc:	b	1a614 <__assert_fail@plt+0x90f4>
   1a600:	lsl	r1, r4, #1
   1a604:	cmp	r4, #0
   1a608:	lsr	r0, r4, #31
   1a60c:	mvnlt	r1, #0
   1a610:	mov	r4, r1
   1a614:	add	r1, r5, lr
   1a618:	orr	sl, r0, sl
   1a61c:	str	r1, [r6]
   1a620:	ldrb	r1, [r5, lr]
   1a624:	cmp	r1, #0
   1a628:	orrne	sl, sl, #2
   1a62c:	ldr	r0, [sp, #12]
   1a630:	str	r4, [r0]
   1a634:	mov	r0, sl
   1a638:	sub	sp, fp, #28
   1a63c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a640:	movw	r0, #50834	; 0xc692
   1a644:	movw	r1, #50872	; 0xc6b8
   1a648:	movw	r3, #50888	; 0xc6c8
   1a64c:	mov	r2, #85	; 0x55
   1a650:	movt	r0, #1
   1a654:	movt	r1, #1
   1a658:	movt	r3, #1
   1a65c:	bl	11520 <__assert_fail@plt>
   1a660:	clz	r2, r1
   1a664:	clz	r3, r0
   1a668:	lsr	r2, r2, #5
   1a66c:	lsr	r3, r3, #5
   1a670:	orrs	r2, r3, r2
   1a674:	movwne	r1, #1
   1a678:	movwne	r0, #1
   1a67c:	cmp	r1, #0
   1a680:	beq	1a6b0 <__assert_fail@plt+0x9190>
   1a684:	mvn	r2, #-2147483648	; 0x80000000
   1a688:	udiv	r2, r2, r1
   1a68c:	cmp	r2, r0
   1a690:	bcs	1a6b0 <__assert_fail@plt+0x9190>
   1a694:	push	{fp, lr}
   1a698:	mov	fp, sp
   1a69c:	bl	113d0 <__errno_location@plt>
   1a6a0:	mov	r1, #12
   1a6a4:	str	r1, [r0]
   1a6a8:	mov	r0, #0
   1a6ac:	pop	{fp, pc}
   1a6b0:	b	111f0 <calloc@plt>
   1a6b4:	cmp	r0, #0
   1a6b8:	movweq	r0, #1
   1a6bc:	cmn	r0, #1
   1a6c0:	ble	1a6c8 <__assert_fail@plt+0x91a8>
   1a6c4:	b	11340 <malloc@plt>
   1a6c8:	push	{fp, lr}
   1a6cc:	mov	fp, sp
   1a6d0:	bl	113d0 <__errno_location@plt>
   1a6d4:	mov	r1, #12
   1a6d8:	str	r1, [r0]
   1a6dc:	mov	r0, #0
   1a6e0:	pop	{fp, pc}
   1a6e4:	push	{fp, lr}
   1a6e8:	mov	fp, sp
   1a6ec:	cmp	r0, #0
   1a6f0:	beq	1a70c <__assert_fail@plt+0x91ec>
   1a6f4:	cmp	r1, #0
   1a6f8:	beq	1a718 <__assert_fail@plt+0x91f8>
   1a6fc:	cmn	r1, #1
   1a700:	ble	1a724 <__assert_fail@plt+0x9204>
   1a704:	pop	{fp, lr}
   1a708:	b	112b0 <realloc@plt>
   1a70c:	mov	r0, r1
   1a710:	pop	{fp, lr}
   1a714:	b	1a6b4 <__assert_fail@plt+0x9194>
   1a718:	bl	12f78 <__assert_fail@plt+0x1a58>
   1a71c:	mov	r0, #0
   1a720:	pop	{fp, pc}
   1a724:	bl	113d0 <__errno_location@plt>
   1a728:	mov	r1, #12
   1a72c:	str	r1, [r0]
   1a730:	mov	r0, #0
   1a734:	pop	{fp, pc}
   1a738:	push	{r4, r5, r6, sl, fp, lr}
   1a73c:	add	fp, sp, #16
   1a740:	mov	r4, r0
   1a744:	bl	11310 <__fpending@plt>
   1a748:	ldr	r6, [r4]
   1a74c:	mov	r5, r0
   1a750:	mov	r0, r4
   1a754:	bl	1a8b0 <__assert_fail@plt+0x9390>
   1a758:	tst	r6, #32
   1a75c:	bne	1a794 <__assert_fail@plt+0x9274>
   1a760:	cmp	r0, #0
   1a764:	mov	r4, r0
   1a768:	mvnne	r4, #0
   1a76c:	cmp	r5, #0
   1a770:	bne	1a7a0 <__assert_fail@plt+0x9280>
   1a774:	cmp	r0, #0
   1a778:	beq	1a7a0 <__assert_fail@plt+0x9280>
   1a77c:	bl	113d0 <__errno_location@plt>
   1a780:	ldr	r0, [r0]
   1a784:	subs	r4, r0, #9
   1a788:	mvnne	r4, #0
   1a78c:	mov	r0, r4
   1a790:	pop	{r4, r5, r6, sl, fp, pc}
   1a794:	mvn	r4, #0
   1a798:	cmp	r0, #0
   1a79c:	beq	1a7a8 <__assert_fail@plt+0x9288>
   1a7a0:	mov	r0, r4
   1a7a4:	pop	{r4, r5, r6, sl, fp, pc}
   1a7a8:	bl	113d0 <__errno_location@plt>
   1a7ac:	mov	r1, #0
   1a7b0:	str	r1, [r0]
   1a7b4:	mov	r0, r4
   1a7b8:	pop	{r4, r5, r6, sl, fp, pc}
   1a7bc:	movw	r2, #62998	; 0xf616
   1a7c0:	mov	r1, #0
   1a7c4:	movt	r2, #149	; 0x95
   1a7c8:	str	r1, [r0, #16]
   1a7cc:	str	r1, [r0, #20]
   1a7d0:	str	r2, [r0, #24]
   1a7d4:	bx	lr
   1a7d8:	push	{r4, r5, r6, r7, fp, lr}
   1a7dc:	add	fp, sp, #16
   1a7e0:	ldr	r2, [r0, #24]
   1a7e4:	movw	r3, #62998	; 0xf616
   1a7e8:	movt	r3, #149	; 0x95
   1a7ec:	cmp	r2, r3
   1a7f0:	bne	1a890 <__assert_fail@plt+0x9370>
   1a7f4:	mov	r3, r0
   1a7f8:	ldr	r2, [r3, #16]!
   1a7fc:	ldr	lr, [r3, #4]
   1a800:	orrs	r5, r2, lr
   1a804:	beq	1a83c <__assert_fail@plt+0x931c>
   1a808:	ldrd	r4, [r0]
   1a80c:	ldrd	r6, [r1, #96]	; 0x60
   1a810:	eor	r7, r7, r5
   1a814:	eor	r6, r6, r4
   1a818:	orrs	r7, r6, r7
   1a81c:	bne	1a83c <__assert_fail@plt+0x931c>
   1a820:	ldrd	r4, [r0, #8]
   1a824:	ldrd	r6, [r1]
   1a828:	mov	ip, #1
   1a82c:	eor	r7, r7, r5
   1a830:	eor	r6, r6, r4
   1a834:	orrs	r7, r6, r7
   1a838:	beq	1a85c <__assert_fail@plt+0x933c>
   1a83c:	adds	r4, r2, #1
   1a840:	mov	ip, #0
   1a844:	adc	r5, lr, #0
   1a848:	and	r2, r4, r2
   1a84c:	strd	r4, [r3]
   1a850:	and	r3, r5, lr
   1a854:	orrs	r2, r2, r3
   1a858:	beq	1a864 <__assert_fail@plt+0x9344>
   1a85c:	mov	r0, ip
   1a860:	pop	{r4, r5, r6, r7, fp, pc}
   1a864:	orrs	r2, r4, r5
   1a868:	moveq	ip, #1
   1a86c:	moveq	r0, ip
   1a870:	popeq	{r4, r5, r6, r7, fp, pc}
   1a874:	ldrd	r2, [r1]
   1a878:	str	r3, [r0, #12]
   1a87c:	str	r2, [r0, #8]
   1a880:	ldrd	r2, [r1, #96]	; 0x60
   1a884:	stm	r0, {r2, r3}
   1a888:	mov	r0, ip
   1a88c:	pop	{r4, r5, r6, r7, fp, pc}
   1a890:	movw	r0, #50969	; 0xc719
   1a894:	movw	r1, #50993	; 0xc731
   1a898:	movw	r3, #51011	; 0xc743
   1a89c:	mov	r2, #60	; 0x3c
   1a8a0:	movt	r0, #1
   1a8a4:	movt	r1, #1
   1a8a8:	movt	r3, #1
   1a8ac:	bl	11520 <__assert_fail@plt>
   1a8b0:	push	{r4, r5, r6, sl, fp, lr}
   1a8b4:	add	fp, sp, #16
   1a8b8:	sub	sp, sp, #8
   1a8bc:	mov	r4, r0
   1a8c0:	bl	11400 <fileno@plt>
   1a8c4:	cmn	r0, #1
   1a8c8:	ble	1a93c <__assert_fail@plt+0x941c>
   1a8cc:	mov	r0, r4
   1a8d0:	bl	11358 <__freading@plt>
   1a8d4:	cmp	r0, #0
   1a8d8:	beq	1a904 <__assert_fail@plt+0x93e4>
   1a8dc:	mov	r0, r4
   1a8e0:	bl	11400 <fileno@plt>
   1a8e4:	mov	r1, #1
   1a8e8:	mov	r2, #0
   1a8ec:	mov	r3, #0
   1a8f0:	str	r1, [sp]
   1a8f4:	bl	112f8 <lseek64@plt>
   1a8f8:	and	r0, r0, r1
   1a8fc:	cmn	r0, #1
   1a900:	beq	1a93c <__assert_fail@plt+0x941c>
   1a904:	mov	r0, r4
   1a908:	bl	1ab74 <__assert_fail@plt+0x9654>
   1a90c:	cmp	r0, #0
   1a910:	beq	1a93c <__assert_fail@plt+0x941c>
   1a914:	bl	113d0 <__errno_location@plt>
   1a918:	ldr	r6, [r0]
   1a91c:	mov	r5, r0
   1a920:	mov	r0, r4
   1a924:	bl	11418 <fclose@plt>
   1a928:	cmp	r6, #0
   1a92c:	strne	r6, [r5]
   1a930:	mvnne	r0, #0
   1a934:	sub	sp, fp, #16
   1a938:	pop	{r4, r5, r6, sl, fp, pc}
   1a93c:	mov	r0, r4
   1a940:	sub	sp, fp, #16
   1a944:	pop	{r4, r5, r6, sl, fp, lr}
   1a948:	b	11418 <fclose@plt>
   1a94c:	sub	sp, sp, #8
   1a950:	push	{r4, r5, r6, r7, fp, lr}
   1a954:	add	fp, sp, #16
   1a958:	sub	sp, sp, #8
   1a95c:	mov	r5, r0
   1a960:	add	r0, fp, #8
   1a964:	cmp	r1, #11
   1a968:	str	r3, [fp, #12]
   1a96c:	str	r2, [fp, #8]
   1a970:	str	r0, [sp, #4]
   1a974:	bhi	1a9b0 <__assert_fail@plt+0x9490>
   1a978:	mov	r0, #1
   1a97c:	movw	r2, #1300	; 0x514
   1a980:	tst	r2, r0, lsl r1
   1a984:	bne	1aa70 <__assert_fail@plt+0x9550>
   1a988:	movw	r2, #2570	; 0xa0a
   1a98c:	tst	r2, r0, lsl r1
   1a990:	bne	1a9d8 <__assert_fail@plt+0x94b8>
   1a994:	cmp	r1, #0
   1a998:	bne	1a9b0 <__assert_fail@plt+0x9490>
   1a99c:	ldr	r0, [sp, #4]
   1a9a0:	add	r1, r0, #4
   1a9a4:	str	r1, [sp, #4]
   1a9a8:	mov	r1, #0
   1a9ac:	b	1aa7c <__assert_fail@plt+0x955c>
   1a9b0:	sub	r0, r1, #1024	; 0x400
   1a9b4:	cmp	r0, #10
   1a9b8:	bhi	1aa70 <__assert_fail@plt+0x9550>
   1a9bc:	mov	r2, #1
   1a9c0:	movw	r3, #645	; 0x285
   1a9c4:	tst	r3, r2, lsl r0
   1a9c8:	bne	1aa70 <__assert_fail@plt+0x9550>
   1a9cc:	movw	r3, #1282	; 0x502
   1a9d0:	tst	r3, r2, lsl r0
   1a9d4:	beq	1a9e4 <__assert_fail@plt+0x94c4>
   1a9d8:	mov	r0, r5
   1a9dc:	bl	11430 <fcntl64@plt>
   1a9e0:	b	1aa88 <__assert_fail@plt+0x9568>
   1a9e4:	cmp	r0, #6
   1a9e8:	bne	1aa70 <__assert_fail@plt+0x9550>
   1a9ec:	ldr	r0, [sp, #4]
   1a9f0:	movw	r7, #54000	; 0xd2f0
   1a9f4:	movt	r7, #2
   1a9f8:	add	r1, r0, #4
   1a9fc:	str	r1, [sp, #4]
   1aa00:	ldr	r6, [r0]
   1aa04:	ldr	r0, [r7]
   1aa08:	cmp	r0, #0
   1aa0c:	blt	1aaac <__assert_fail@plt+0x958c>
   1aa10:	mov	r0, r5
   1aa14:	movw	r1, #1030	; 0x406
   1aa18:	mov	r2, r6
   1aa1c:	bl	11430 <fcntl64@plt>
   1aa20:	mov	r4, r0
   1aa24:	cmn	r0, #1
   1aa28:	bgt	1aaa0 <__assert_fail@plt+0x9580>
   1aa2c:	bl	113d0 <__errno_location@plt>
   1aa30:	ldr	r0, [r0]
   1aa34:	cmp	r0, #22
   1aa38:	bne	1aaa0 <__assert_fail@plt+0x9580>
   1aa3c:	mov	r0, r5
   1aa40:	mov	r1, #0
   1aa44:	mov	r2, r6
   1aa48:	bl	11430 <fcntl64@plt>
   1aa4c:	mov	r4, r0
   1aa50:	cmp	r0, #0
   1aa54:	blt	1aa8c <__assert_fail@plt+0x956c>
   1aa58:	mvn	r0, #0
   1aa5c:	str	r0, [r7]
   1aa60:	mov	r0, #1
   1aa64:	cmp	r0, #0
   1aa68:	bne	1aad8 <__assert_fail@plt+0x95b8>
   1aa6c:	b	1aa8c <__assert_fail@plt+0x956c>
   1aa70:	ldr	r0, [sp, #4]
   1aa74:	add	r2, r0, #4
   1aa78:	str	r2, [sp, #4]
   1aa7c:	ldr	r2, [r0]
   1aa80:	mov	r0, r5
   1aa84:	bl	11430 <fcntl64@plt>
   1aa88:	mov	r4, r0
   1aa8c:	mov	r0, r4
   1aa90:	sub	sp, fp, #16
   1aa94:	pop	{r4, r5, r6, r7, fp, lr}
   1aa98:	add	sp, sp, #8
   1aa9c:	bx	lr
   1aaa0:	mov	r0, #1
   1aaa4:	str	r0, [r7]
   1aaa8:	b	1aa8c <__assert_fail@plt+0x956c>
   1aaac:	mov	r0, r5
   1aab0:	mov	r1, #0
   1aab4:	mov	r2, r6
   1aab8:	bl	11430 <fcntl64@plt>
   1aabc:	mov	r4, r0
   1aac0:	ldr	r0, [r7]
   1aac4:	add	r0, r0, #1
   1aac8:	clz	r0, r0
   1aacc:	lsr	r0, r0, #5
   1aad0:	cmp	r0, #0
   1aad4:	beq	1aa8c <__assert_fail@plt+0x956c>
   1aad8:	cmp	r4, #0
   1aadc:	blt	1aa8c <__assert_fail@plt+0x956c>
   1aae0:	mov	r0, r4
   1aae4:	mov	r1, #1
   1aae8:	bl	11430 <fcntl64@plt>
   1aaec:	cmp	r0, #0
   1aaf0:	blt	1ab0c <__assert_fail@plt+0x95ec>
   1aaf4:	orr	r2, r0, #1
   1aaf8:	mov	r0, r4
   1aafc:	mov	r1, #2
   1ab00:	bl	11430 <fcntl64@plt>
   1ab04:	cmn	r0, #1
   1ab08:	bne	1aa8c <__assert_fail@plt+0x956c>
   1ab0c:	bl	113d0 <__errno_location@plt>
   1ab10:	ldr	r6, [r0]
   1ab14:	mov	r5, r0
   1ab18:	mov	r0, r4
   1ab1c:	bl	114e4 <close@plt>
   1ab20:	str	r6, [r5]
   1ab24:	mvn	r4, #0
   1ab28:	b	1aa8c <__assert_fail@plt+0x956c>
   1ab2c:	sub	sp, sp, #8
   1ab30:	push	{fp, lr}
   1ab34:	mov	fp, sp
   1ab38:	sub	sp, sp, #8
   1ab3c:	str	r2, [fp, #8]
   1ab40:	mov	r2, #0
   1ab44:	tst	r1, #64	; 0x40
   1ab48:	str	r3, [fp, #12]
   1ab4c:	addne	r2, fp, #8
   1ab50:	orrne	r2, r2, #4
   1ab54:	strne	r2, [sp, #4]
   1ab58:	ldrne	r2, [fp, #8]
   1ab5c:	bl	11334 <open64@plt>
   1ab60:	bl	18ccc <__assert_fail@plt+0x77ac>
   1ab64:	mov	sp, fp
   1ab68:	pop	{fp, lr}
   1ab6c:	add	sp, sp, #8
   1ab70:	bx	lr
   1ab74:	push	{r4, sl, fp, lr}
   1ab78:	add	fp, sp, #8
   1ab7c:	sub	sp, sp, #8
   1ab80:	mov	r4, r0
   1ab84:	cmp	r0, #0
   1ab88:	beq	1aba4 <__assert_fail@plt+0x9684>
   1ab8c:	mov	r0, r4
   1ab90:	bl	11358 <__freading@plt>
   1ab94:	cmp	r0, #0
   1ab98:	ldrbne	r0, [r4, #1]
   1ab9c:	tstne	r0, #1
   1aba0:	bne	1abb4 <__assert_fail@plt+0x9694>
   1aba4:	mov	r0, r4
   1aba8:	sub	sp, fp, #8
   1abac:	pop	{r4, sl, fp, lr}
   1abb0:	b	11244 <fflush@plt>
   1abb4:	mov	r0, #1
   1abb8:	mov	r2, #0
   1abbc:	mov	r3, #0
   1abc0:	str	r0, [sp]
   1abc4:	mov	r0, r4
   1abc8:	bl	1abdc <__assert_fail@plt+0x96bc>
   1abcc:	mov	r0, r4
   1abd0:	sub	sp, fp, #8
   1abd4:	pop	{r4, sl, fp, lr}
   1abd8:	b	11244 <fflush@plt>
   1abdc:	push	{r4, r5, r6, r7, fp, lr}
   1abe0:	add	fp, sp, #16
   1abe4:	sub	sp, sp, #8
   1abe8:	mov	r4, r0
   1abec:	ldr	r0, [r0, #4]
   1abf0:	mov	r5, r3
   1abf4:	mov	r6, r2
   1abf8:	ldr	r1, [r4, #8]
   1abfc:	cmp	r1, r0
   1ac00:	bne	1ac1c <__assert_fail@plt+0x96fc>
   1ac04:	ldrd	r0, [r4, #16]
   1ac08:	cmp	r1, r0
   1ac0c:	bne	1ac1c <__assert_fail@plt+0x96fc>
   1ac10:	ldr	r0, [r4, #36]	; 0x24
   1ac14:	cmp	r0, #0
   1ac18:	beq	1ac34 <__assert_fail@plt+0x9714>
   1ac1c:	mov	r0, r4
   1ac20:	mov	r2, r6
   1ac24:	mov	r3, r5
   1ac28:	sub	sp, fp, #16
   1ac2c:	pop	{r4, r5, r6, r7, fp, lr}
   1ac30:	b	11424 <fseeko64@plt>
   1ac34:	ldr	r7, [fp, #8]
   1ac38:	mov	r0, r4
   1ac3c:	bl	11400 <fileno@plt>
   1ac40:	mov	r2, r6
   1ac44:	mov	r3, r5
   1ac48:	str	r7, [sp]
   1ac4c:	bl	112f8 <lseek64@plt>
   1ac50:	and	r2, r0, r1
   1ac54:	cmn	r2, #1
   1ac58:	mvneq	r0, #0
   1ac5c:	subeq	sp, fp, #16
   1ac60:	popeq	{r4, r5, r6, r7, fp, pc}
   1ac64:	strd	r0, [r4, #80]	; 0x50
   1ac68:	ldr	r0, [r4]
   1ac6c:	bic	r0, r0, #16
   1ac70:	str	r0, [r4]
   1ac74:	mov	r0, #0
   1ac78:	sub	sp, fp, #16
   1ac7c:	pop	{r4, r5, r6, r7, fp, pc}
   1ac80:	push	{fp, lr}
   1ac84:	mov	fp, sp
   1ac88:	mov	r0, #14
   1ac8c:	bl	11460 <nl_langinfo@plt>
   1ac90:	movw	r1, #47112	; 0xb808
   1ac94:	cmp	r0, #0
   1ac98:	movt	r1, #1
   1ac9c:	movne	r1, r0
   1aca0:	movw	r0, #51078	; 0xc786
   1aca4:	ldrb	r2, [r1]
   1aca8:	movt	r0, #1
   1acac:	cmp	r2, #0
   1acb0:	movne	r0, r1
   1acb4:	pop	{fp, pc}
   1acb8:	push	{r4, r5, r6, r7, fp, lr}
   1acbc:	add	fp, sp, #16
   1acc0:	sub	sp, sp, #8
   1acc4:	add	r5, sp, #4
   1acc8:	cmp	r0, #0
   1accc:	mov	r7, r2
   1acd0:	mov	r4, r1
   1acd4:	movne	r5, r0
   1acd8:	mov	r0, r5
   1acdc:	bl	1131c <mbrtowc@plt>
   1ace0:	mov	r6, r0
   1ace4:	cmp	r7, #0
   1ace8:	beq	1ad0c <__assert_fail@plt+0x97ec>
   1acec:	cmn	r6, #2
   1acf0:	bcc	1ad0c <__assert_fail@plt+0x97ec>
   1acf4:	mov	r0, #0
   1acf8:	bl	1ad60 <__assert_fail@plt+0x9840>
   1acfc:	cmp	r0, #0
   1ad00:	ldrbeq	r0, [r4]
   1ad04:	moveq	r6, #1
   1ad08:	streq	r0, [r5]
   1ad0c:	mov	r0, r6
   1ad10:	sub	sp, fp, #16
   1ad14:	pop	{r4, r5, r6, r7, fp, pc}
   1ad18:	cmp	r2, #0
   1ad1c:	beq	1ad4c <__assert_fail@plt+0x982c>
   1ad20:	mvn	r3, #0
   1ad24:	udiv	r3, r3, r2
   1ad28:	cmp	r3, r1
   1ad2c:	bcs	1ad4c <__assert_fail@plt+0x982c>
   1ad30:	push	{fp, lr}
   1ad34:	mov	fp, sp
   1ad38:	bl	113d0 <__errno_location@plt>
   1ad3c:	mov	r1, #12
   1ad40:	str	r1, [r0]
   1ad44:	mov	r0, #0
   1ad48:	pop	{fp, pc}
   1ad4c:	mul	r1, r2, r1
   1ad50:	b	1a6e4 <__assert_fail@plt+0x91c4>
   1ad54:	mov	r1, #0
   1ad58:	mov	r2, #3
   1ad5c:	b	1a94c <__assert_fail@plt+0x942c>
   1ad60:	push	{r4, sl, fp, lr}
   1ad64:	add	fp, sp, #8
   1ad68:	sub	sp, sp, #264	; 0x108
   1ad6c:	add	r1, sp, #7
   1ad70:	movw	r2, #257	; 0x101
   1ad74:	bl	1adc4 <__assert_fail@plt+0x98a4>
   1ad78:	mov	r4, #0
   1ad7c:	cmp	r0, #0
   1ad80:	bne	1adb8 <__assert_fail@plt+0x9898>
   1ad84:	movw	r1, #51084	; 0xc78c
   1ad88:	add	r0, sp, #7
   1ad8c:	movt	r1, #1
   1ad90:	bl	1122c <strcmp@plt>
   1ad94:	cmp	r0, #0
   1ad98:	beq	1adb8 <__assert_fail@plt+0x9898>
   1ad9c:	movw	r1, #51086	; 0xc78e
   1ada0:	add	r0, sp, #7
   1ada4:	movt	r1, #1
   1ada8:	bl	1122c <strcmp@plt>
   1adac:	mov	r4, r0
   1adb0:	cmp	r0, #0
   1adb4:	movwne	r4, #1
   1adb8:	mov	r0, r4
   1adbc:	sub	sp, fp, #8
   1adc0:	pop	{r4, sl, fp, pc}
   1adc4:	push	{r4, r5, r6, r7, fp, lr}
   1adc8:	add	fp, sp, #16
   1adcc:	mov	r4, r1
   1add0:	mov	r1, #0
   1add4:	mov	r6, r2
   1add8:	bl	1143c <setlocale@plt>
   1addc:	cmp	r0, #0
   1ade0:	beq	1ae10 <__assert_fail@plt+0x98f0>
   1ade4:	mov	r7, r0
   1ade8:	bl	113a0 <strlen@plt>
   1adec:	cmp	r0, r6
   1adf0:	bcs	1ae30 <__assert_fail@plt+0x9910>
   1adf4:	add	r2, r0, #1
   1adf8:	mov	r0, r4
   1adfc:	mov	r1, r7
   1ae00:	bl	11274 <memcpy@plt>
   1ae04:	mov	r5, #0
   1ae08:	mov	r0, r5
   1ae0c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae10:	cmp	r6, #0
   1ae14:	mov	r5, #22
   1ae18:	movne	r0, #0
   1ae1c:	strbne	r0, [r4]
   1ae20:	movne	r0, r5
   1ae24:	popne	{r4, r5, r6, r7, fp, pc}
   1ae28:	mov	r0, r5
   1ae2c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae30:	mov	r5, #34	; 0x22
   1ae34:	cmp	r6, #0
   1ae38:	beq	1ae58 <__assert_fail@plt+0x9938>
   1ae3c:	sub	r6, r6, #1
   1ae40:	mov	r0, r4
   1ae44:	mov	r1, r7
   1ae48:	mov	r2, r6
   1ae4c:	bl	11274 <memcpy@plt>
   1ae50:	mov	r0, #0
   1ae54:	strb	r0, [r4, r6]
   1ae58:	mov	r0, r5
   1ae5c:	pop	{r4, r5, r6, r7, fp, pc}
   1ae60:	mov	r1, #0
   1ae64:	b	1143c <setlocale@plt>
   1ae68:	cmp	r3, #0
   1ae6c:	cmpeq	r2, #0
   1ae70:	bne	1ae88 <__assert_fail@plt+0x9968>
   1ae74:	cmp	r1, #0
   1ae78:	cmpeq	r0, #0
   1ae7c:	mvnne	r1, #0
   1ae80:	mvnne	r0, #0
   1ae84:	b	1aea4 <__assert_fail@plt+0x9984>
   1ae88:	sub	sp, sp, #8
   1ae8c:	push	{sp, lr}
   1ae90:	bl	1aeb4 <__assert_fail@plt+0x9994>
   1ae94:	ldr	lr, [sp, #4]
   1ae98:	add	sp, sp, #8
   1ae9c:	pop	{r2, r3}
   1aea0:	bx	lr
   1aea4:	push	{r1, lr}
   1aea8:	mov	r0, #8
   1aeac:	bl	11214 <raise@plt>
   1aeb0:	pop	{r1, pc}
   1aeb4:	cmp	r1, r3
   1aeb8:	cmpeq	r0, r2
   1aebc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aec0:	mov	r4, r0
   1aec4:	movcc	r0, #0
   1aec8:	mov	r5, r1
   1aecc:	ldr	lr, [sp, #36]	; 0x24
   1aed0:	movcc	r1, r0
   1aed4:	bcc	1afd0 <__assert_fail@plt+0x9ab0>
   1aed8:	cmp	r3, #0
   1aedc:	clzeq	ip, r2
   1aee0:	clzne	ip, r3
   1aee4:	addeq	ip, ip, #32
   1aee8:	cmp	r5, #0
   1aeec:	clzeq	r1, r4
   1aef0:	addeq	r1, r1, #32
   1aef4:	clzne	r1, r5
   1aef8:	sub	ip, ip, r1
   1aefc:	sub	sl, ip, #32
   1af00:	lsl	r9, r3, ip
   1af04:	rsb	fp, ip, #32
   1af08:	orr	r9, r9, r2, lsl sl
   1af0c:	orr	r9, r9, r2, lsr fp
   1af10:	lsl	r8, r2, ip
   1af14:	cmp	r5, r9
   1af18:	cmpeq	r4, r8
   1af1c:	movcc	r0, #0
   1af20:	movcc	r1, r0
   1af24:	bcc	1af40 <__assert_fail@plt+0x9a20>
   1af28:	mov	r0, #1
   1af2c:	subs	r4, r4, r8
   1af30:	lsl	r1, r0, sl
   1af34:	orr	r1, r1, r0, lsr fp
   1af38:	lsl	r0, r0, ip
   1af3c:	sbc	r5, r5, r9
   1af40:	cmp	ip, #0
   1af44:	beq	1afd0 <__assert_fail@plt+0x9ab0>
   1af48:	lsr	r6, r8, #1
   1af4c:	orr	r6, r6, r9, lsl #31
   1af50:	lsr	r7, r9, #1
   1af54:	mov	r2, ip
   1af58:	b	1af7c <__assert_fail@plt+0x9a5c>
   1af5c:	subs	r3, r4, r6
   1af60:	sbc	r8, r5, r7
   1af64:	adds	r3, r3, r3
   1af68:	adc	r8, r8, r8
   1af6c:	adds	r4, r3, #1
   1af70:	adc	r5, r8, #0
   1af74:	subs	r2, r2, #1
   1af78:	beq	1af98 <__assert_fail@plt+0x9a78>
   1af7c:	cmp	r5, r7
   1af80:	cmpeq	r4, r6
   1af84:	bcs	1af5c <__assert_fail@plt+0x9a3c>
   1af88:	adds	r4, r4, r4
   1af8c:	adc	r5, r5, r5
   1af90:	subs	r2, r2, #1
   1af94:	bne	1af7c <__assert_fail@plt+0x9a5c>
   1af98:	lsr	r3, r4, ip
   1af9c:	orr	r3, r3, r5, lsl fp
   1afa0:	lsr	r2, r5, ip
   1afa4:	orr	r3, r3, r5, lsr sl
   1afa8:	adds	r0, r0, r4
   1afac:	mov	r4, r3
   1afb0:	lsl	r3, r2, ip
   1afb4:	orr	r3, r3, r4, lsl sl
   1afb8:	lsl	ip, r4, ip
   1afbc:	orr	r3, r3, r4, lsr fp
   1afc0:	adc	r1, r1, r5
   1afc4:	subs	r0, r0, ip
   1afc8:	mov	r5, r2
   1afcc:	sbc	r1, r1, r3
   1afd0:	cmp	lr, #0
   1afd4:	strdne	r4, [lr]
   1afd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1afdc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1afe0:	mov	r7, r0
   1afe4:	ldr	r6, [pc, #72]	; 1b034 <__assert_fail@plt+0x9b14>
   1afe8:	ldr	r5, [pc, #72]	; 1b038 <__assert_fail@plt+0x9b18>
   1afec:	add	r6, pc, r6
   1aff0:	add	r5, pc, r5
   1aff4:	sub	r6, r6, r5
   1aff8:	mov	r8, r1
   1affc:	mov	r9, r2
   1b000:	bl	111c4 <fstatfs64@plt-0x20>
   1b004:	asrs	r6, r6, #2
   1b008:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b00c:	mov	r4, #0
   1b010:	add	r4, r4, #1
   1b014:	ldr	r3, [r5], #4
   1b018:	mov	r2, r9
   1b01c:	mov	r1, r8
   1b020:	mov	r0, r7
   1b024:	blx	r3
   1b028:	cmp	r6, r4
   1b02c:	bne	1b010 <__assert_fail@plt+0x9af0>
   1b030:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b034:	andeq	r1, r1, r8, lsl pc
   1b038:	andeq	r1, r1, r0, lsl pc
   1b03c:	bx	lr
   1b040:	ldr	r3, [pc, #12]	; 1b054 <__assert_fail@plt+0x9b34>
   1b044:	mov	r1, #0
   1b048:	add	r3, pc, r3
   1b04c:	ldr	r2, [r3]
   1b050:	b	113dc <__cxa_atexit@plt>
   1b054:	ldrdeq	r2, [r1], -ip

Disassembly of section .fini:

0001b058 <.fini>:
   1b058:	push	{r3, lr}
   1b05c:	pop	{r3, pc}
