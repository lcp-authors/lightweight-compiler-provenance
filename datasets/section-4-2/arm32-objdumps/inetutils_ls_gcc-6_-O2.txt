
../repos/inetutils/tests/ls:     file format elf32-littlearm


Disassembly of section .init:

00010b58 <.init>:
   10b58:	push	{r3, lr}
   10b5c:	bl	10e40 <__assert_fail@plt+0x4c>
   10b60:	pop	{r3, pc}

Disassembly of section .plt:

00010b64 <fstatfs64@plt-0x14>:
   10b64:	push	{lr}		; (str lr, [sp, #-4]!)
   10b68:	ldr	lr, [pc, #4]	; 10b74 <fstatfs64@plt-0x4>
   10b6c:	add	lr, pc, lr
   10b70:	ldr	pc, [lr, #8]!
   10b74:	andeq	r7, r1, ip, lsl #9

00010b78 <fstatfs64@plt>:
   10b78:	add	ip, pc, #0, 12
   10b7c:	add	ip, ip, #94208	; 0x17000
   10b80:	ldr	pc, [ip, #1164]!	; 0x48c

00010b84 <calloc@plt>:
   10b84:	add	ip, pc, #0, 12
   10b88:	add	ip, ip, #94208	; 0x17000
   10b8c:	ldr	pc, [ip, #1156]!	; 0x484

00010b90 <raise@plt>:
   10b90:	add	ip, pc, #0, 12
   10b94:	add	ip, ip, #94208	; 0x17000
   10b98:	ldr	pc, [ip, #1148]!	; 0x47c

00010b9c <strcmp@plt>:
   10b9c:	add	ip, pc, #0, 12
   10ba0:	add	ip, ip, #94208	; 0x17000
   10ba4:	ldr	pc, [ip, #1140]!	; 0x474

00010ba8 <strtol@plt>:
   10ba8:	add	ip, pc, #0, 12
   10bac:	add	ip, ip, #94208	; 0x17000
   10bb0:	ldr	pc, [ip, #1132]!	; 0x46c

00010bb4 <getpwuid@plt>:
   10bb4:	add	ip, pc, #0, 12
   10bb8:	add	ip, ip, #94208	; 0x17000
   10bbc:	ldr	pc, [ip, #1124]!	; 0x464

00010bc0 <printf@plt>:
   10bc0:	add	ip, pc, #0, 12
   10bc4:	add	ip, ip, #94208	; 0x17000
   10bc8:	ldr	pc, [ip, #1116]!	; 0x45c

00010bcc <getuid@plt>:
   10bcc:	add	ip, pc, #0, 12
   10bd0:	add	ip, ip, #94208	; 0x17000
   10bd4:	ldr	pc, [ip, #1108]!	; 0x454

00010bd8 <memmove@plt>:
   10bd8:	add	ip, pc, #0, 12
   10bdc:	add	ip, ip, #94208	; 0x17000
   10be0:	ldr	pc, [ip, #1100]!	; 0x44c

00010be4 <free@plt>:
   10be4:	add	ip, pc, #0, 12
   10be8:	add	ip, ip, #94208	; 0x17000
   10bec:	ldr	pc, [ip, #1092]!	; 0x444

00010bf0 <memcpy@plt>:
   10bf0:	add	ip, pc, #0, 12
   10bf4:	add	ip, ip, #94208	; 0x17000
   10bf8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bfc <time@plt>:
   10bfc:	add	ip, pc, #0, 12
   10c00:	add	ip, ip, #94208	; 0x17000
   10c04:	ldr	pc, [ip, #1076]!	; 0x434

00010c08 <ctime@plt>:
   10c08:	add	ip, pc, #0, 12
   10c0c:	add	ip, ip, #94208	; 0x17000
   10c10:	ldr	pc, [ip, #1068]!	; 0x42c

00010c14 <realloc@plt>:
   10c14:	add	ip, pc, #0, 12
   10c18:	add	ip, ip, #94208	; 0x17000
   10c1c:	ldr	pc, [ip, #1060]!	; 0x424

00010c20 <funlockfile@plt>:
   10c20:	add	ip, pc, #0, 12
   10c24:	add	ip, ip, #94208	; 0x17000
   10c28:	ldr	pc, [ip, #1052]!	; 0x41c

00010c2c <__fxstatat64@plt>:
   10c2c:	add	ip, pc, #0, 12
   10c30:	add	ip, ip, #94208	; 0x17000
   10c34:	ldr	pc, [ip, #1044]!	; 0x414

00010c38 <__fxstat64@plt>:
   10c38:	add	ip, pc, #0, 12
   10c3c:	add	ip, ip, #94208	; 0x17000
   10c40:	ldr	pc, [ip, #1036]!	; 0x40c

00010c44 <readlink@plt>:
   10c44:	add	ip, pc, #0, 12
   10c48:	add	ip, ip, #94208	; 0x17000
   10c4c:	ldr	pc, [ip, #1028]!	; 0x404

00010c50 <fwrite@plt>:
   10c50:	add	ip, pc, #0, 12
   10c54:	add	ip, ip, #94208	; 0x17000
   10c58:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c5c <ioctl@plt>:
   10c5c:	add	ip, pc, #0, 12
   10c60:	add	ip, ip, #94208	; 0x17000
   10c64:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c68 <strcpy@plt>:
   10c68:	add	ip, pc, #0, 12
   10c6c:	add	ip, ip, #94208	; 0x17000
   10c70:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c74 <open64@plt>:
   10c74:	add	ip, pc, #0, 12
   10c78:	add	ip, ip, #94208	; 0x17000
   10c7c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c80 <getenv@plt>:
   10c80:	add	ip, pc, #0, 12
   10c84:	add	ip, ip, #94208	; 0x17000
   10c88:	ldr	pc, [ip, #988]!	; 0x3dc

00010c8c <malloc@plt>:
   10c8c:	add	ip, pc, #0, 12
   10c90:	add	ip, ip, #94208	; 0x17000
   10c94:	ldr	pc, [ip, #980]!	; 0x3d4

00010c98 <__libc_start_main@plt>:
   10c98:	add	ip, pc, #0, 12
   10c9c:	add	ip, ip, #94208	; 0x17000
   10ca0:	ldr	pc, [ip, #972]!	; 0x3cc

00010ca4 <strerror@plt>:
   10ca4:	add	ip, pc, #0, 12
   10ca8:	add	ip, ip, #94208	; 0x17000
   10cac:	ldr	pc, [ip, #964]!	; 0x3c4

00010cb0 <__gmon_start__@plt>:
   10cb0:	add	ip, pc, #0, 12
   10cb4:	add	ip, ip, #94208	; 0x17000
   10cb8:	ldr	pc, [ip, #956]!	; 0x3bc

00010cbc <__ctype_b_loc@plt>:
   10cbc:	add	ip, pc, #0, 12
   10cc0:	add	ip, ip, #94208	; 0x17000
   10cc4:	ldr	pc, [ip, #948]!	; 0x3b4

00010cc8 <strlen@plt>:
   10cc8:	add	ip, pc, #0, 12
   10ccc:	add	ip, ip, #94208	; 0x17000
   10cd0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cd4 <strchr@plt>:
   10cd4:	add	ip, pc, #0, 12
   10cd8:	add	ip, ip, #94208	; 0x17000
   10cdc:	ldr	pc, [ip, #932]!	; 0x3a4

00010ce0 <openat64@plt>:
   10ce0:	add	ip, pc, #0, 12
   10ce4:	add	ip, ip, #94208	; 0x17000
   10ce8:	ldr	pc, [ip, #924]!	; 0x39c

00010cec <fprintf@plt>:
   10cec:	add	ip, pc, #0, 12
   10cf0:	add	ip, ip, #94208	; 0x17000
   10cf4:	ldr	pc, [ip, #916]!	; 0x394

00010cf8 <__errno_location@plt>:
   10cf8:	add	ip, pc, #0, 12
   10cfc:	add	ip, ip, #94208	; 0x17000
   10d00:	ldr	pc, [ip, #908]!	; 0x38c

00010d04 <snprintf@plt>:
   10d04:	add	ip, pc, #0, 12
   10d08:	add	ip, ip, #94208	; 0x17000
   10d0c:	ldr	pc, [ip, #900]!	; 0x384

00010d10 <memset@plt>:
   10d10:	add	ip, pc, #0, 12
   10d14:	add	ip, ip, #94208	; 0x17000
   10d18:	ldr	pc, [ip, #892]!	; 0x37c

00010d1c <fcntl64@plt>:
   10d1c:	add	ip, pc, #0, 12
   10d20:	add	ip, ip, #94208	; 0x17000
   10d24:	ldr	pc, [ip, #884]!	; 0x374

00010d28 <strrchr@plt>:
   10d28:	add	ip, pc, #0, 12
   10d2c:	add	ip, ip, #94208	; 0x17000
   10d30:	ldr	pc, [ip, #876]!	; 0x36c

00010d34 <fputc@plt>:
   10d34:	add	ip, pc, #0, 12
   10d38:	add	ip, ip, #94208	; 0x17000
   10d3c:	ldr	pc, [ip, #868]!	; 0x364

00010d40 <readdir64@plt>:
   10d40:	add	ip, pc, #0, 12
   10d44:	add	ip, ip, #94208	; 0x17000
   10d48:	ldr	pc, [ip, #860]!	; 0x35c

00010d4c <fdopendir@plt>:
   10d4c:	add	ip, pc, #0, 12
   10d50:	add	ip, ip, #94208	; 0x17000
   10d54:	ldr	pc, [ip, #852]!	; 0x354

00010d58 <putc@plt>:
   10d58:	add	ip, pc, #0, 12
   10d5c:	add	ip, ip, #94208	; 0x17000
   10d60:	ldr	pc, [ip, #844]!	; 0x34c

00010d64 <dirfd@plt>:
   10d64:	add	ip, pc, #0, 12
   10d68:	add	ip, ip, #94208	; 0x17000
   10d6c:	ldr	pc, [ip, #836]!	; 0x344

00010d70 <flockfile@plt>:
   10d70:	add	ip, pc, #0, 12
   10d74:	add	ip, ip, #94208	; 0x17000
   10d78:	ldr	pc, [ip, #828]!	; 0x33c

00010d7c <fchdir@plt>:
   10d7c:	add	ip, pc, #0, 12
   10d80:	add	ip, ip, #94208	; 0x17000
   10d84:	ldr	pc, [ip, #820]!	; 0x334

00010d88 <qsort@plt>:
   10d88:	add	ip, pc, #0, 12
   10d8c:	add	ip, ip, #94208	; 0x17000
   10d90:	ldr	pc, [ip, #812]!	; 0x32c

00010d94 <__xstat64@plt>:
   10d94:	add	ip, pc, #0, 12
   10d98:	add	ip, ip, #94208	; 0x17000
   10d9c:	ldr	pc, [ip, #804]!	; 0x324

00010da0 <isatty@plt>:
   10da0:	add	ip, pc, #0, 12
   10da4:	add	ip, ip, #94208	; 0x17000
   10da8:	ldr	pc, [ip, #796]!	; 0x31c

00010dac <strncmp@plt>:
   10dac:	add	ip, pc, #0, 12
   10db0:	add	ip, ip, #94208	; 0x17000
   10db4:	ldr	pc, [ip, #788]!	; 0x314

00010db8 <abort@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #94208	; 0x17000
   10dc0:	ldr	pc, [ip, #780]!	; 0x30c

00010dc4 <close@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #94208	; 0x17000
   10dcc:	ldr	pc, [ip, #772]!	; 0x304

00010dd0 <__lxstat64@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #94208	; 0x17000
   10dd8:	ldr	pc, [ip, #764]!	; 0x2fc

00010ddc <closedir@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #94208	; 0x17000
   10de4:	ldr	pc, [ip, #756]!	; 0x2f4

00010de8 <getgrgid@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #94208	; 0x17000
   10df0:	ldr	pc, [ip, #748]!	; 0x2ec

00010df4 <__assert_fail@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #94208	; 0x17000
   10dfc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010e00 <.text>:
   10e00:	b	11730 <__assert_fail@plt+0x93c>
   10e04:	mov	fp, #0
   10e08:	mov	lr, #0
   10e0c:	pop	{r1}		; (ldr r1, [sp], #4)
   10e10:	mov	r2, sp
   10e14:	push	{r2}		; (str r2, [sp, #-4]!)
   10e18:	push	{r0}		; (str r0, [sp, #-4]!)
   10e1c:	ldr	ip, [pc, #16]	; 10e34 <__assert_fail@plt+0x40>
   10e20:	push	{ip}		; (str ip, [sp, #-4]!)
   10e24:	ldr	r0, [pc, #12]	; 10e38 <__assert_fail@plt+0x44>
   10e28:	ldr	r3, [pc, #12]	; 10e3c <__assert_fail@plt+0x48>
   10e2c:	bl	10c98 <__libc_start_main@plt>
   10e30:	bl	10db8 <abort@plt>
   10e34:	andeq	r7, r1, r4, lsl r9
   10e38:	andeq	r0, r1, r0, lsl #28
   10e3c:			; <UNDEFINED> instruction: 0x000178b4
   10e40:	ldr	r3, [pc, #20]	; 10e5c <__assert_fail@plt+0x68>
   10e44:	ldr	r2, [pc, #20]	; 10e60 <__assert_fail@plt+0x6c>
   10e48:	add	r3, pc, r3
   10e4c:	ldr	r2, [r3, r2]
   10e50:	cmp	r2, #0
   10e54:	bxeq	lr
   10e58:	b	10cb0 <__gmon_start__@plt>
   10e5c:			; <UNDEFINED> instruction: 0x000171b0
   10e60:	andeq	r0, r0, r4, ror #1
   10e64:	ldr	r3, [pc, #28]	; 10e88 <__assert_fail@plt+0x94>
   10e68:	ldr	r0, [pc, #28]	; 10e8c <__assert_fail@plt+0x98>
   10e6c:	sub	r3, r3, r0
   10e70:	cmp	r3, #6
   10e74:	bxls	lr
   10e78:	ldr	r3, [pc, #16]	; 10e90 <__assert_fail@plt+0x9c>
   10e7c:	cmp	r3, #0
   10e80:	bxeq	lr
   10e84:	bx	r3
   10e88:	andeq	r8, r2, r3, lsl r1
   10e8c:	andeq	r8, r2, r0, lsl r1
   10e90:	andeq	r0, r0, r0
   10e94:	ldr	r1, [pc, #36]	; 10ec0 <__assert_fail@plt+0xcc>
   10e98:	ldr	r0, [pc, #36]	; 10ec4 <__assert_fail@plt+0xd0>
   10e9c:	sub	r1, r1, r0
   10ea0:	asr	r1, r1, #2
   10ea4:	add	r1, r1, r1, lsr #31
   10ea8:	asrs	r1, r1, #1
   10eac:	bxeq	lr
   10eb0:	ldr	r3, [pc, #16]	; 10ec8 <__assert_fail@plt+0xd4>
   10eb4:	cmp	r3, #0
   10eb8:	bxeq	lr
   10ebc:	bx	r3
   10ec0:	andeq	r8, r2, r0, lsl r1
   10ec4:	andeq	r8, r2, r0, lsl r1
   10ec8:	andeq	r0, r0, r0
   10ecc:	push	{r4, lr}
   10ed0:	ldr	r4, [pc, #24]	; 10ef0 <__assert_fail@plt+0xfc>
   10ed4:	ldrb	r3, [r4]
   10ed8:	cmp	r3, #0
   10edc:	popne	{r4, pc}
   10ee0:	bl	10e64 <__assert_fail@plt+0x70>
   10ee4:	mov	r3, #1
   10ee8:	strb	r3, [r4]
   10eec:	pop	{r4, pc}
   10ef0:	andeq	r8, r2, r8, lsl r1
   10ef4:	ldr	r0, [pc, #40]	; 10f24 <__assert_fail@plt+0x130>
   10ef8:	ldr	r3, [r0]
   10efc:	cmp	r3, #0
   10f00:	bne	10f08 <__assert_fail@plt+0x114>
   10f04:	b	10e94 <__assert_fail@plt+0xa0>
   10f08:	ldr	r3, [pc, #24]	; 10f28 <__assert_fail@plt+0x134>
   10f0c:	cmp	r3, #0
   10f10:	beq	10f04 <__assert_fail@plt+0x110>
   10f14:	push	{r4, lr}
   10f18:	blx	r3
   10f1c:	pop	{r4, lr}
   10f20:	b	10e94 <__assert_fail@plt+0xa0>
   10f24:	andeq	r7, r2, r4, lsl pc
   10f28:	andeq	r0, r0, r0
   10f2c:	ldr	r2, [r0]
   10f30:	ldrh	r0, [r2, #56]	; 0x38
   10f34:	cmp	r0, #7
   10f38:	beq	10fac <__assert_fail@plt+0x1b8>
   10f3c:	ldr	r1, [r1]
   10f40:	ldrh	r3, [r1, #56]	; 0x38
   10f44:	cmp	r3, #7
   10f48:	beq	10fac <__assert_fail@plt+0x1b8>
   10f4c:	cmp	r3, #10
   10f50:	cmpne	r0, #10
   10f54:	beq	10f9c <__assert_fail@plt+0x1a8>
   10f58:	cmp	r0, r3
   10f5c:	beq	10f8c <__assert_fail@plt+0x198>
   10f60:	ldr	ip, [r2, #48]	; 0x30
   10f64:	cmp	ip, #0
   10f68:	bne	10f8c <__assert_fail@plt+0x198>
   10f6c:	ldr	ip, [pc, #88]	; 10fcc <__assert_fail@plt+0x1d8>
   10f70:	ldr	ip, [ip]
   10f74:	cmp	ip, #0
   10f78:	bne	10f8c <__assert_fail@plt+0x198>
   10f7c:	cmp	r0, #1
   10f80:	bxeq	lr
   10f84:	cmp	r3, #1
   10f88:	beq	10fc4 <__assert_fail@plt+0x1d0>
   10f8c:	ldr	r3, [pc, #60]	; 10fd0 <__assert_fail@plt+0x1dc>
   10f90:	mov	r0, r2
   10f94:	ldr	r3, [r3]
   10f98:	bx	r3
   10f9c:	cmp	r3, #10
   10fa0:	beq	10fb4 <__assert_fail@plt+0x1c0>
   10fa4:	mov	r0, #1
   10fa8:	bx	lr
   10fac:	mov	r0, #0
   10fb0:	bx	lr
   10fb4:	cmp	r0, #10
   10fb8:	bne	10fc4 <__assert_fail@plt+0x1d0>
   10fbc:	mov	r0, r2
   10fc0:	b	12c18 <__assert_fail@plt+0x1e24>
   10fc4:	mvn	r0, #0
   10fc8:	bx	lr
   10fcc:	andeq	r8, r2, r0, lsr #3
   10fd0:	andeq	r8, r2, ip, lsl r1
   10fd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10fd8:	sub	sp, sp, #180	; 0xb4
   10fdc:	subs	r3, r1, #0
   10fe0:	str	r3, [sp, #52]	; 0x34
   10fe4:	str	r0, [sp]
   10fe8:	beq	11270 <__assert_fail@plt+0x47c>
   10fec:	ldr	r3, [pc, #1144]	; 1146c <__assert_fail@plt+0x678>
   10ff0:	ldr	r3, [r3]
   10ff4:	cmp	r3, #0
   10ff8:	beq	11350 <__assert_fail@plt+0x55c>
   10ffc:	mov	sl, #1
   11000:	mov	r3, #0
   11004:	ldr	r4, [sp, #52]	; 0x34
   11008:	str	r3, [sp, #20]
   1100c:	mov	r8, r3
   11010:	str	r3, [sp, #32]
   11014:	str	r3, [sp, #28]
   11018:	str	r3, [sp, #24]
   1101c:	str	r3, [sp, #36]	; 0x24
   11020:	str	r3, [sp, #16]
   11024:	mov	fp, r3
   11028:	mov	r5, r3
   1102c:	mov	r9, r3
   11030:	str	r3, [sp, #4]
   11034:	mov	r2, #0
   11038:	mov	r3, #0
   1103c:	strd	r2, [sp, #8]
   11040:	ldrh	r3, [r4, #56]	; 0x38
   11044:	cmp	r3, #10
   11048:	cmpne	r3, #7
   1104c:	beq	11278 <__assert_fail@plt+0x484>
   11050:	ldr	r2, [sp]
   11054:	cmp	r2, #0
   11058:	beq	112cc <__assert_fail@plt+0x4d8>
   1105c:	ldrb	r3, [r4, #168]	; 0xa8
   11060:	cmp	r3, #46	; 0x2e
   11064:	beq	112b0 <__assert_fail@plt+0x4bc>
   11068:	ldr	r3, [r4, #52]	; 0x34
   1106c:	cmp	r5, r3
   11070:	movcc	r5, r3
   11074:	cmp	sl, #0
   11078:	beq	11200 <__assert_fail@plt+0x40c>
   1107c:	ldr	lr, [sp, #16]
   11080:	ldrd	r2, [r4, #128]	; 0x80
   11084:	ldrd	r0, [r4, #160]	; 0xa0
   11088:	asr	r7, lr, #31
   1108c:	cmp	lr, r2
   11090:	sbcs	ip, r7, r3
   11094:	mov	r7, #0
   11098:	movlt	lr, r2
   1109c:	cmp	r1, r7
   110a0:	cmpeq	r0, r9
   110a4:	ldr	ip, [r4, #84]	; 0x54
   110a8:	ldrd	r6, [r4, #112]	; 0x70
   110ac:	movhi	r9, r0
   110b0:	ldrd	r0, [sp, #8]
   110b4:	cmp	fp, ip
   110b8:	movcc	fp, ip
   110bc:	cmp	r0, r6
   110c0:	sbcs	r1, r1, r7
   110c4:	str	lr, [sp, #16]
   110c8:	strdlt	r6, [sp, #8]
   110cc:	ldr	r1, [pc, #924]	; 11470 <__assert_fail@plt+0x67c>
   110d0:	ldr	r3, [r1]
   110d4:	ldr	r1, [sp, #4]
   110d8:	cmp	r3, #0
   110dc:	add	r2, r1, r2
   110e0:	str	r2, [sp, #4]
   110e4:	beq	11200 <__assert_fail@plt+0x40c>
   110e8:	ldr	r3, [pc, #900]	; 11474 <__assert_fail@plt+0x680>
   110ec:	ldr	r3, [r3]
   110f0:	cmp	r3, #0
   110f4:	beq	112e8 <__assert_fail@plt+0x4f4>
   110f8:	add	r2, sp, #80	; 0x50
   110fc:	ldr	r0, [r4, #88]	; 0x58
   11100:	mov	r1, #0
   11104:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   11108:	mov	r3, r0
   1110c:	add	r2, sp, #104	; 0x68
   11110:	ldr	r0, [r4, #92]	; 0x5c
   11114:	mov	r1, #0
   11118:	str	r3, [sp, #44]	; 0x2c
   1111c:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   11120:	ldr	r3, [sp, #44]	; 0x2c
   11124:	str	r0, [sp, #40]	; 0x28
   11128:	mov	r0, r3
   1112c:	str	r3, [sp, #44]	; 0x2c
   11130:	bl	10cc8 <strlen@plt>
   11134:	ldr	r3, [sp, #32]
   11138:	mov	r6, r0
   1113c:	cmp	r3, r0
   11140:	movlt	r3, r6
   11144:	ldr	r0, [sp, #40]	; 0x28
   11148:	str	r3, [sp, #32]
   1114c:	bl	10cc8 <strlen@plt>
   11150:	ldr	r3, [pc, #800]	; 11478 <__assert_fail@plt+0x684>
   11154:	ldr	r2, [r3]
   11158:	ldr	r3, [sp, #28]
   1115c:	cmp	r3, r0
   11160:	movlt	r3, r0
   11164:	str	r3, [sp, #28]
   11168:	cmp	r2, #0
   1116c:	add	r3, r6, r0
   11170:	movne	r2, #1
   11174:	moveq	r2, #0
   11178:	str	r3, [sp, #48]	; 0x30
   1117c:	add	r0, r3, #19
   11180:	ldr	r3, [sp, #24]
   11184:	add	r0, r0, r2
   11188:	movne	r3, sl
   1118c:	ldr	r2, [pc, #744]	; 1147c <__assert_fail@plt+0x688>
   11190:	str	r3, [sp, #24]
   11194:	ldr	r3, [sp, #20]
   11198:	movne	r3, r2
   1119c:	str	r3, [sp, #20]
   111a0:	bl	16e90 <__assert_fail@plt+0x609c>
   111a4:	ldr	r3, [sp, #44]	; 0x2c
   111a8:	subs	r7, r0, #0
   111ac:	beq	11374 <__assert_fail@plt+0x580>
   111b0:	add	r0, r7, #12
   111b4:	mov	r1, r3
   111b8:	str	r0, [r7]
   111bc:	bl	10c68 <strcpy@plt>
   111c0:	add	r0, r6, #13
   111c4:	add	r0, r7, r0
   111c8:	ldr	r1, [sp, #40]	; 0x28
   111cc:	str	r0, [r7, #4]
   111d0:	bl	10c68 <strcpy@plt>
   111d4:	ldr	r2, [pc, #668]	; 11478 <__assert_fail@plt+0x684>
   111d8:	ldr	r3, [r4, #80]	; 0x50
   111dc:	ldr	r1, [r2]
   111e0:	and	r3, r3, #45056	; 0xb000
   111e4:	ldr	r2, [sp, #36]	; 0x24
   111e8:	cmp	r3, #8192	; 0x2000
   111ec:	moveq	r2, sl
   111f0:	cmp	r1, #0
   111f4:	str	r2, [sp, #36]	; 0x24
   111f8:	bne	11334 <__assert_fail@plt+0x540>
   111fc:	str	r7, [r4, #20]
   11200:	add	r8, r8, #1
   11204:	ldr	r4, [r4, #8]
   11208:	cmp	r4, #0
   1120c:	bne	11040 <__assert_fail@plt+0x24c>
   11210:	cmp	r8, #0
   11214:	beq	11270 <__assert_fail@plt+0x47c>
   11218:	ldr	r3, [sp, #52]	; 0x34
   1121c:	cmp	sl, #0
   11220:	str	r3, [sp, #128]	; 0x80
   11224:	str	r8, [sp, #140]	; 0x8c
   11228:	str	r5, [sp, #144]	; 0x90
   1122c:	bne	113ac <__assert_fail@plt+0x5b8>
   11230:	ldr	r4, [pc, #584]	; 11480 <__assert_fail@plt+0x68c>
   11234:	add	r0, sp, #128	; 0x80
   11238:	ldr	r3, [r4, #4]
   1123c:	blx	r3
   11240:	ldr	r3, [pc, #552]	; 11470 <__assert_fail@plt+0x67c>
   11244:	mov	r2, #1
   11248:	str	r2, [r4, #8]
   1124c:	ldr	r3, [r3]
   11250:	cmp	r3, #0
   11254:	beq	11270 <__assert_fail@plt+0x47c>
   11258:	ldr	r4, [sp, #52]	; 0x34
   1125c:	ldr	r0, [r4, #20]
   11260:	bl	12f10 <__assert_fail@plt+0x211c>
   11264:	ldr	r4, [r4, #8]
   11268:	cmp	r4, #0
   1126c:	bne	1125c <__assert_fail@plt+0x468>
   11270:	add	sp, sp, #180	; 0xb4
   11274:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11278:	ldr	r3, [pc, #516]	; 11484 <__assert_fail@plt+0x690>
   1127c:	ldr	r0, [r4, #32]
   11280:	ldr	r6, [r3]
   11284:	bl	10ca4 <strerror@plt>
   11288:	add	r2, r4, #168	; 0xa8
   1128c:	ldr	r1, [pc, #500]	; 11488 <__assert_fail@plt+0x694>
   11290:	mov	r3, r0
   11294:	mov	r0, r6
   11298:	bl	10cec <fprintf@plt>
   1129c:	ldr	r2, [pc, #488]	; 1148c <__assert_fail@plt+0x698>
   112a0:	mov	r3, #1
   112a4:	str	r3, [r4, #16]
   112a8:	str	r3, [r2]
   112ac:	b	11204 <__assert_fail@plt+0x410>
   112b0:	ldr	r3, [pc, #472]	; 11490 <__assert_fail@plt+0x69c>
   112b4:	ldr	r3, [r3]
   112b8:	cmp	r3, #0
   112bc:	bne	11068 <__assert_fail@plt+0x274>
   112c0:	mov	r3, #1
   112c4:	str	r3, [r4, #16]
   112c8:	b	11204 <__assert_fail@plt+0x410>
   112cc:	cmp	r3, #1
   112d0:	bne	11068 <__assert_fail@plt+0x274>
   112d4:	ldr	r2, [pc, #440]	; 11494 <__assert_fail@plt+0x6a0>
   112d8:	ldr	r2, [r2]
   112dc:	cmp	r2, #0
   112e0:	bne	11068 <__assert_fail@plt+0x274>
   112e4:	b	112c4 <__assert_fail@plt+0x4d0>
   112e8:	ldr	r0, [r4, #88]	; 0x58
   112ec:	bl	10bb4 <getpwuid@plt>
   112f0:	subs	r3, r0, #0
   112f4:	ldr	r0, [r4, #92]	; 0x5c
   112f8:	beq	11434 <__assert_fail@plt+0x640>
   112fc:	ldr	r3, [r3]
   11300:	str	r3, [sp, #40]	; 0x28
   11304:	bl	10de8 <getgrgid@plt>
   11308:	ldr	r3, [sp, #40]	; 0x28
   1130c:	cmp	r0, #0
   11310:	beq	11460 <__assert_fail@plt+0x66c>
   11314:	ldr	r2, [r0]
   11318:	cmp	r3, #0
   1131c:	str	r2, [sp, #40]	; 0x28
   11320:	beq	11448 <__assert_fail@plt+0x654>
   11324:	ldr	r2, [sp, #40]	; 0x28
   11328:	cmp	r2, #0
   1132c:	bne	11128 <__assert_fail@plt+0x334>
   11330:	b	1110c <__assert_fail@plt+0x318>
   11334:	ldr	r3, [sp, #48]	; 0x30
   11338:	ldr	r1, [sp, #20]
   1133c:	add	r0, r3, #14
   11340:	add	r0, r7, r0
   11344:	str	r0, [r7, #8]
   11348:	bl	10c68 <strcpy@plt>
   1134c:	b	111fc <__assert_fail@plt+0x408>
   11350:	ldr	r3, [pc, #280]	; 11470 <__assert_fail@plt+0x67c>
   11354:	ldr	r3, [r3]
   11358:	cmp	r3, #0
   1135c:	bne	10ffc <__assert_fail@plt+0x208>
   11360:	ldr	r3, [pc, #304]	; 11498 <__assert_fail@plt+0x6a4>
   11364:	ldr	sl, [r3]
   11368:	adds	sl, sl, #0
   1136c:	movne	sl, #1
   11370:	b	11000 <__assert_fail@plt+0x20c>
   11374:	ldr	r3, [pc, #264]	; 11484 <__assert_fail@plt+0x690>
   11378:	ldr	r4, [r3]
   1137c:	bl	10cf8 <__errno_location@plt>
   11380:	ldr	r0, [r0]
   11384:	bl	10ca4 <strerror@plt>
   11388:	ldr	r1, [pc, #268]	; 1149c <__assert_fail@plt+0x6a8>
   1138c:	mov	r2, r0
   11390:	mov	r0, r4
   11394:	bl	10cec <fprintf@plt>
   11398:	ldr	r3, [pc, #236]	; 1148c <__assert_fail@plt+0x698>
   1139c:	mov	r2, #1
   113a0:	str	r2, [r3]
   113a4:	add	sp, sp, #180	; 0xb4
   113a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113ac:	ldr	r3, [sp, #36]	; 0x24
   113b0:	ldr	r0, [sp, #16]
   113b4:	str	r3, [sp, #136]	; 0x88
   113b8:	ldr	r3, [sp, #4]
   113bc:	add	r2, sp, #56	; 0x38
   113c0:	asr	r1, r0, #31
   113c4:	str	r3, [sp, #132]	; 0x84
   113c8:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   113cc:	bl	10cc8 <strlen@plt>
   113d0:	ldr	r3, [sp, #24]
   113d4:	add	r2, sp, #56	; 0x38
   113d8:	str	r3, [sp, #152]	; 0x98
   113dc:	ldr	r3, [sp, #28]
   113e0:	mov	r1, r4
   113e4:	str	r3, [sp, #156]	; 0x9c
   113e8:	str	r0, [sp, #148]	; 0x94
   113ec:	mov	r0, r9
   113f0:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   113f4:	bl	10cc8 <strlen@plt>
   113f8:	mov	r1, r4
   113fc:	add	r2, sp, #56	; 0x38
   11400:	str	r0, [sp, #160]	; 0xa0
   11404:	mov	r0, fp
   11408:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   1140c:	bl	10cc8 <strlen@plt>
   11410:	add	r2, sp, #56	; 0x38
   11414:	str	r0, [sp, #164]	; 0xa4
   11418:	ldrd	r0, [sp, #8]
   1141c:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   11420:	bl	10cc8 <strlen@plt>
   11424:	ldr	r3, [sp, #32]
   11428:	str	r3, [sp, #172]	; 0xac
   1142c:	str	r0, [sp, #168]	; 0xa8
   11430:	b	11230 <__assert_fail@plt+0x43c>
   11434:	bl	10de8 <getgrgid@plt>
   11438:	cmp	r0, #0
   1143c:	beq	110f8 <__assert_fail@plt+0x304>
   11440:	ldr	r3, [r0]
   11444:	str	r3, [sp, #40]	; 0x28
   11448:	add	r2, sp, #80	; 0x50
   1144c:	ldr	r0, [r4, #88]	; 0x58
   11450:	mov	r1, #0
   11454:	bl	16ce8 <__assert_fail@plt+0x5ef4>
   11458:	mov	r3, r0
   1145c:	b	11324 <__assert_fail@plt+0x530>
   11460:	cmp	r3, #0
   11464:	bne	1110c <__assert_fail@plt+0x318>
   11468:	b	110f8 <__assert_fail@plt+0x304>
   1146c:	andeq	r8, r2, r0, ror r1
   11470:	andeq	r8, r2, ip, lsl #3
   11474:	muleq	r2, r8, r1
   11478:	andeq	r8, r2, r8, ror #2
   1147c:	andeq	r7, r1, r4, lsr #18
   11480:	andeq	r8, r2, ip, lsl r1
   11484:	andeq	r8, r2, r0, lsl r1
   11488:	andeq	r7, r1, r8, lsr #18
   1148c:	andeq	r8, r2, r8, lsl #3
   11490:			; <UNDEFINED> instruction: 0x000281b0
   11494:	andeq	r8, r2, r0, lsr #3
   11498:	andeq	r8, r2, r8, asr r1
   1149c:	andeq	r7, r1, r0, lsr r9
   114a0:	ldr	ip, [pc, #592]	; 116f8 <__assert_fail@plt+0x904>
   114a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114a8:	mov	r5, r1
   114ac:	ldr	r1, [ip]
   114b0:	sub	sp, sp, #12
   114b4:	ldr	r3, [pc, #576]	; 116fc <__assert_fail@plt+0x908>
   114b8:	cmp	r1, #0
   114bc:	mov	r6, r2
   114c0:	str	r0, [sp, #4]
   114c4:	moveq	r2, r3
   114c8:	movne	r2, #0
   114cc:	mov	r1, r6
   114d0:	mov	r0, r5
   114d4:	bl	14344 <__assert_fail@plt+0x3550>
   114d8:	subs	r4, r0, #0
   114dc:	beq	116b8 <__assert_fail@plt+0x8c4>
   114e0:	mov	r1, #0
   114e4:	bl	14f28 <__assert_fail@plt+0x4134>
   114e8:	mov	r1, r0
   114ec:	mov	r0, #0
   114f0:	bl	10fd4 <__assert_fail@plt+0x1e0>
   114f4:	ldr	r3, [pc, #516]	; 11700 <__assert_fail@plt+0x90c>
   114f8:	ldr	r5, [r3]
   114fc:	cmp	r5, #0
   11500:	bne	115ac <__assert_fail@plt+0x7b8>
   11504:	ldr	r7, [pc, #504]	; 11704 <__assert_fail@plt+0x910>
   11508:	ldr	r3, [r7]
   1150c:	cmp	r3, #0
   11510:	beq	1164c <__assert_fail@plt+0x858>
   11514:	ldr	r6, [pc, #492]	; 11708 <__assert_fail@plt+0x914>
   11518:	ldr	fp, [pc, #492]	; 1170c <__assert_fail@plt+0x918>
   1151c:	ldr	r8, [pc, #492]	; 11710 <__assert_fail@plt+0x91c>
   11520:	mov	r0, r4
   11524:	bl	1483c <__assert_fail@plt+0x3a48>
   11528:	subs	r9, r0, #0
   1152c:	beq	1159c <__assert_fail@plt+0x7a8>
   11530:	ldrh	r3, [r9, #56]	; 0x38
   11534:	sub	r3, r3, #1
   11538:	cmp	r3, #6
   1153c:	ldrls	pc, [pc, r3, lsl #2]
   11540:	b	11520 <__assert_fail@plt+0x72c>
   11544:	andeq	r1, r1, r8, asr #11
   11548:			; <UNDEFINED> instruction: 0x000115b4
   1154c:	andeq	r1, r1, r0, lsr #10
   11550:	andeq	r1, r1, r0, ror #10
   11554:	andeq	r1, r1, r0, lsr #10
   11558:	andeq	r1, r1, r0, lsr #10
   1155c:	andeq	r1, r1, r0, ror #10
   11560:	ldr	r0, [r9, #32]
   11564:	ldr	sl, [r6]
   11568:	bl	10ca4 <strerror@plt>
   1156c:	add	r2, r9, #168	; 0xa8
   11570:	ldr	r1, [pc, #412]	; 11714 <__assert_fail@plt+0x920>
   11574:	mov	r3, r0
   11578:	mov	r0, sl
   1157c:	bl	10cec <fprintf@plt>
   11580:	ldr	r2, [pc, #400]	; 11718 <__assert_fail@plt+0x924>
   11584:	mov	r3, #1
   11588:	mov	r0, r4
   1158c:	str	r3, [r2]
   11590:	bl	1483c <__assert_fail@plt+0x3a48>
   11594:	subs	r9, r0, #0
   11598:	bne	11530 <__assert_fail@plt+0x73c>
   1159c:	bl	10cf8 <__errno_location@plt>
   115a0:	ldr	r0, [r0]
   115a4:	cmp	r0, #0
   115a8:	bne	11658 <__assert_fail@plt+0x864>
   115ac:	add	sp, sp, #12
   115b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115b4:	add	r2, r9, #168	; 0xa8
   115b8:	mov	r1, fp
   115bc:	ldr	r0, [r6]
   115c0:	bl	10cec <fprintf@plt>
   115c4:	b	11520 <__assert_fail@plt+0x72c>
   115c8:	ldrb	r3, [r9, #168]	; 0xa8
   115cc:	cmp	r3, #46	; 0x2e
   115d0:	beq	11688 <__assert_fail@plt+0x894>
   115d4:	ldr	r3, [r8, #8]
   115d8:	cmp	r3, #0
   115dc:	bne	116a8 <__assert_fail@plt+0x8b4>
   115e0:	ldr	r3, [sp, #4]
   115e4:	cmp	r3, #1
   115e8:	ble	11600 <__assert_fail@plt+0x80c>
   115ec:	ldr	r1, [r9, #28]
   115f0:	ldr	r0, [pc, #292]	; 1171c <__assert_fail@plt+0x928>
   115f4:	bl	10bc0 <printf@plt>
   115f8:	mov	r3, #1
   115fc:	str	r3, [r8, #8]
   11600:	mov	r1, r5
   11604:	mov	r0, r4
   11608:	bl	14f28 <__assert_fail@plt+0x4134>
   1160c:	mov	sl, r0
   11610:	mov	r1, r0
   11614:	mov	r0, r9
   11618:	bl	10fd4 <__assert_fail@plt+0x1e0>
   1161c:	cmp	sl, #0
   11620:	ldr	r3, [r7]
   11624:	clz	r3, r3
   11628:	lsr	r3, r3, #5
   1162c:	moveq	r3, #0
   11630:	cmp	r3, #0
   11634:	beq	11520 <__assert_fail@plt+0x72c>
   11638:	mov	r1, r9
   1163c:	mov	r2, #4
   11640:	mov	r0, r4
   11644:	bl	14ef4 <__assert_fail@plt+0x4100>
   11648:	b	11520 <__assert_fail@plt+0x72c>
   1164c:	ands	r5, r6, #8
   11650:	movne	r5, #4096	; 0x1000
   11654:	b	11514 <__assert_fail@plt+0x720>
   11658:	ldr	r3, [pc, #168]	; 11708 <__assert_fail@plt+0x914>
   1165c:	ldr	r4, [r3]
   11660:	bl	10ca4 <strerror@plt>
   11664:	ldr	r1, [pc, #180]	; 11720 <__assert_fail@plt+0x92c>
   11668:	mov	r2, r0
   1166c:	mov	r0, r4
   11670:	bl	10cec <fprintf@plt>
   11674:	ldr	r3, [pc, #156]	; 11718 <__assert_fail@plt+0x924>
   11678:	mov	r2, #1
   1167c:	str	r2, [r3]
   11680:	add	sp, sp, #12
   11684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11688:	ldr	r3, [r9, #48]	; 0x30
   1168c:	cmp	r3, #0
   11690:	beq	115d4 <__assert_fail@plt+0x7e0>
   11694:	ldr	r3, [pc, #136]	; 11724 <__assert_fail@plt+0x930>
   11698:	ldr	r3, [r3]
   1169c:	cmp	r3, #0
   116a0:	beq	11520 <__assert_fail@plt+0x72c>
   116a4:	b	115d4 <__assert_fail@plt+0x7e0>
   116a8:	ldr	r1, [r9, #28]
   116ac:	ldr	r0, [pc, #116]	; 11728 <__assert_fail@plt+0x934>
   116b0:	bl	10bc0 <printf@plt>
   116b4:	b	11600 <__assert_fail@plt+0x80c>
   116b8:	ldr	r3, [pc, #72]	; 11708 <__assert_fail@plt+0x914>
   116bc:	ldr	r5, [r5]
   116c0:	ldr	r4, [r3]
   116c4:	bl	10cf8 <__errno_location@plt>
   116c8:	ldr	r0, [r0]
   116cc:	bl	10ca4 <strerror@plt>
   116d0:	mov	r2, r5
   116d4:	ldr	r1, [pc, #80]	; 1172c <__assert_fail@plt+0x938>
   116d8:	mov	r3, r0
   116dc:	mov	r0, r4
   116e0:	bl	10cec <fprintf@plt>
   116e4:	ldr	r3, [pc, #44]	; 11718 <__assert_fail@plt+0x924>
   116e8:	mov	r2, #1
   116ec:	str	r2, [r3]
   116f0:	add	sp, sp, #12
   116f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   116f8:	andeq	r8, r2, ip, ror r1
   116fc:	andeq	r0, r1, ip, lsr #30
   11700:	andeq	r8, r2, r0, lsr #3
   11704:	andeq	r8, r2, ip, ror #2
   11708:	andeq	r8, r2, r0, lsl r1
   1170c:	andeq	r7, r1, r0, ror #18
   11710:	andeq	r8, r2, ip, lsl r1
   11714:	andeq	r7, r1, r8, lsr #18
   11718:	andeq	r8, r2, r8, lsl #3
   1171c:	andeq	r7, r1, r8, asr r9
   11720:	andeq	r7, r1, r0, lsl #19
   11724:			; <UNDEFINED> instruction: 0x000281b0
   11728:	andeq	r7, r1, r0, asr r9
   1172c:	andeq	r7, r1, ip, lsr r9
   11730:	ldr	r3, [pc, #1884]	; 11e94 <__assert_fail@plt+0x10a0>
   11734:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11738:	mov	r6, #0
   1173c:	str	r6, [r3]
   11740:	ldr	r3, [pc, #1872]	; 11e98 <__assert_fail@plt+0x10a4>
   11744:	ldr	r2, [pc, #1872]	; 11e9c <__assert_fail@plt+0x10a8>
   11748:	ldr	r9, [pc, #1872]	; 11ea0 <__assert_fail@plt+0x10ac>
   1174c:	str	r6, [r3]
   11750:	ldr	r3, [pc, #1868]	; 11ea4 <__assert_fail@plt+0x10b0>
   11754:	ldr	fp, [pc, #1868]	; 11ea8 <__assert_fail@plt+0x10b4>
   11758:	ldr	sl, [pc, #1868]	; 11eac <__assert_fail@plt+0x10b8>
   1175c:	str	r6, [r3]
   11760:	ldr	r3, [pc, #1864]	; 11eb0 <__assert_fail@plt+0x10bc>
   11764:	mov	r5, r1
   11768:	ldr	r1, [pc, #1860]	; 11eb4 <__assert_fail@plt+0x10c0>
   1176c:	str	r6, [r3]
   11770:	ldr	r3, [pc, #1856]	; 11eb8 <__assert_fail@plt+0x10c4>
   11774:	sub	sp, sp, #20
   11778:	mov	r4, r0
   1177c:	str	r6, [r3]
   11780:	ldr	r3, [pc, #1844]	; 11ebc <__assert_fail@plt+0x10c8>
   11784:	mov	r0, #1
   11788:	str	r6, [r1, #8]
   1178c:	str	r6, [r3]
   11790:	ldr	r3, [pc, #1832]	; 11ec0 <__assert_fail@plt+0x10cc>
   11794:	str	r6, [r2]
   11798:	str	r6, [fp]
   1179c:	str	r6, [r3]
   117a0:	ldr	r3, [pc, #1820]	; 11ec4 <__assert_fail@plt+0x10d0>
   117a4:	str	r6, [sl]
   117a8:	str	r6, [r9]
   117ac:	str	r6, [r3]
   117b0:	ldr	r3, [pc, #1808]	; 11ec8 <__assert_fail@plt+0x10d4>
   117b4:	str	r6, [r3]
   117b8:	ldr	r3, [pc, #1804]	; 11ecc <__assert_fail@plt+0x10d8>
   117bc:	str	r6, [r3]
   117c0:	ldr	r3, [pc, #1800]	; 11ed0 <__assert_fail@plt+0x10dc>
   117c4:	str	r6, [r3]
   117c8:	ldr	r3, [pc, #1796]	; 11ed4 <__assert_fail@plt+0x10e0>
   117cc:	str	r6, [r3]
   117d0:	ldr	r3, [pc, #1792]	; 11ed8 <__assert_fail@plt+0x10e4>
   117d4:	str	r6, [r3]
   117d8:	ldr	r3, [pc, #1788]	; 11edc <__assert_fail@plt+0x10e8>
   117dc:	str	r6, [r3]
   117e0:	ldr	r3, [pc, #1784]	; 11ee0 <__assert_fail@plt+0x10ec>
   117e4:	str	r6, [r3]
   117e8:	ldr	r3, [pc, #1780]	; 11ee4 <__assert_fail@plt+0x10f0>
   117ec:	str	r6, [r3]
   117f0:	ldr	r3, [pc, #1776]	; 11ee8 <__assert_fail@plt+0x10f4>
   117f4:	str	r6, [r3]
   117f8:	ldr	r3, [pc, #1772]	; 11eec <__assert_fail@plt+0x10f8>
   117fc:	str	r6, [r3]
   11800:	ldr	r3, [pc, #1768]	; 11ef0 <__assert_fail@plt+0x10fc>
   11804:	str	r6, [r3]
   11808:	bl	10da0 <isatty@plt>
   1180c:	cmp	r0, r6
   11810:	moveq	r3, #1
   11814:	streq	r3, [r9]
   11818:	bne	11c94 <__assert_fail@plt+0xea0>
   1181c:	bl	10bcc <getuid@plt>
   11820:	ldr	r6, [pc, #1740]	; 11ef4 <__assert_fail@plt+0x1100>
   11824:	mov	r7, #0
   11828:	cmp	r0, #0
   1182c:	moveq	r3, #1
   11830:	ldreq	r2, [pc, #1668]	; 11ebc <__assert_fail@plt+0x10c8>
   11834:	streq	r3, [r2]
   11838:	ldr	r2, [pc, #1720]	; 11ef8 <__assert_fail@plt+0x1104>
   1183c:	mov	r3, #1
   11840:	mov	r8, r3
   11844:	str	r3, [r2]
   11848:	mov	r3, #20
   1184c:	str	r3, [sp, #4]
   11850:	mov	r2, r6
   11854:	mov	r1, r5
   11858:	mov	r0, r4
   1185c:	bl	15c58 <__assert_fail@plt+0x4e64>
   11860:	cmn	r0, #1
   11864:	beq	119b0 <__assert_fail@plt+0xbbc>
   11868:	sub	r0, r0, #49	; 0x31
   1186c:	cmp	r0, #71	; 0x47
   11870:	ldrls	pc, [pc, r0, lsl #2]
   11874:	b	11c50 <__assert_fail@plt+0xe5c>
   11878:	andeq	r1, r1, r4, asr #23
   1187c:	andeq	r1, r1, r0, asr ip
   11880:	andeq	r1, r1, r0, asr ip
   11884:	andeq	r1, r1, r0, asr ip
   11888:	andeq	r1, r1, r0, asr ip
   1188c:	andeq	r1, r1, r0, asr ip
   11890:	andeq	r1, r1, r0, asr ip
   11894:	andeq	r1, r1, r0, asr ip
   11898:	andeq	r1, r1, r0, asr ip
   1189c:	andeq	r1, r1, r0, asr ip
   118a0:	andeq	r1, r1, r0, asr ip
   118a4:	andeq	r1, r1, r0, asr ip
   118a8:	andeq	r1, r1, r0, asr ip
   118ac:	andeq	r1, r1, r0, asr ip
   118b0:	andeq	r1, r1, r0, asr ip
   118b4:	andeq	r1, r1, r0, asr ip
   118b8:	andeq	r1, r1, r4, lsr #19
   118bc:	andeq	r1, r1, r0, asr ip
   118c0:	andeq	r1, r1, r4, lsr #23
   118c4:	andeq	r1, r1, r0, asr ip
   118c8:	andeq	r1, r1, r0, asr ip
   118cc:	muleq	r1, r8, fp
   118d0:	andeq	r1, r1, r0, asr ip
   118d4:	andeq	r1, r1, r0, asr ip
   118d8:	andeq	r1, r1, r0, asr ip
   118dc:	andeq	r1, r1, r0, asr ip
   118e0:	andeq	r1, r1, r0, asr ip
   118e4:	andeq	r1, r1, r4, lsl #23
   118e8:	andeq	r1, r1, r0, asr ip
   118ec:	andeq	r1, r1, r0, asr ip
   118f0:	andeq	r1, r1, r0, asr ip
   118f4:	andeq	r1, r1, r0, asr ip
   118f8:	andeq	r1, r1, r0, asr ip
   118fc:	andeq	r1, r1, r8, ror fp
   11900:	andeq	r1, r1, ip, ror #22
   11904:	andeq	r1, r1, r0, ror #22
   11908:	andeq	r1, r1, r0, asr ip
   1190c:	andeq	r1, r1, r0, asr ip
   11910:	andeq	r1, r1, r4, asr fp
   11914:	andeq	r1, r1, r0, asr ip
   11918:	andeq	r1, r1, r0, asr ip
   1191c:	andeq	r1, r1, r0, asr ip
   11920:	andeq	r1, r1, r0, asr ip
   11924:	andeq	r1, r1, r0, asr ip
   11928:	andeq	r1, r1, r0, asr ip
   1192c:	andeq	r1, r1, r0, asr ip
   11930:	andeq	r1, r1, r0, asr ip
   11934:	andeq	r1, r1, r0, asr ip
   11938:	muleq	r1, r8, r9
   1193c:	andeq	r1, r1, r0, asr ip
   11940:	andeq	r1, r1, r0, asr #22
   11944:	andeq	r1, r1, ip, lsr #22
   11948:	andeq	r1, r1, r0, asr ip
   1194c:	andeq	r1, r1, r0, lsr #22
   11950:	andeq	r1, r1, r0, asr r8
   11954:	andeq	r1, r1, r0, asr ip
   11958:	andeq	r1, r1, r4, lsl fp
   1195c:	andeq	r1, r1, r0, asr ip
   11960:	andeq	r1, r1, r4, lsl #22
   11964:	strdeq	r1, [r1], -r4
   11968:	ldrdeq	r1, [r1], -r4
   1196c:	andeq	r1, r1, ip, lsr #21
   11970:	andeq	r1, r1, r0, lsr #21
   11974:	muleq	r1, r4, sl
   11978:	andeq	r1, r1, r8, lsl #21
   1197c:	andeq	r1, r1, ip, ror sl
   11980:	andeq	r1, r1, r0, ror sl
   11984:	andeq	r1, r1, r0, ror #20
   11988:	andeq	r1, r1, ip, asr #20
   1198c:	andeq	r1, r1, r0, asr ip
   11990:	andeq	r1, r1, r0, asr ip
   11994:	andeq	r1, r1, ip, lsr #20
   11998:	ldr	r3, [sp, #4]
   1199c:	orr	r3, r3, #32
   119a0:	str	r3, [sp, #4]
   119a4:	ldr	r3, [pc, #1296]	; 11ebc <__assert_fail@plt+0x10c8>
   119a8:	str	r8, [r3]
   119ac:	b	11850 <__assert_fail@plt+0xa5c>
   119b0:	ldr	r3, [pc, #1344]	; 11ef8 <__assert_fail@plt+0x1104>
   119b4:	ldr	r2, [sl]
   119b8:	ldr	r1, [r3]
   119bc:	cmp	r2, #0
   119c0:	sub	r0, r4, r1
   119c4:	beq	11be4 <__assert_fail@plt+0xdf0>
   119c8:	ldr	r3, [pc, #1304]	; 11ee8 <__assert_fail@plt+0x10f4>
   119cc:	ldr	r3, [r3]
   119d0:	cmp	r3, #0
   119d4:	beq	11e88 <__assert_fail@plt+0x1094>
   119d8:	ldr	r3, [sp, #4]
   119dc:	orr	r3, r3, #128	; 0x80
   119e0:	str	r3, [sp, #4]
   119e4:	ldr	r3, [pc, #1224]	; 11eb4 <__assert_fail@plt+0x10c0>
   119e8:	ldr	r3, [r3, #12]
   119ec:	ldr	ip, [pc, #1288]	; 11efc <__assert_fail@plt+0x1108>
   119f0:	mov	lr, #2
   119f4:	str	lr, [ip]
   119f8:	ldr	ip, [pc, #1236]	; 11ed4 <__assert_fail@plt+0x10e0>
   119fc:	ldr	ip, [ip]
   11a00:	cmp	ip, #0
   11a04:	beq	11ccc <__assert_fail@plt+0xed8>
   11a08:	cmp	r3, #1
   11a0c:	beq	11ddc <__assert_fail@plt+0xfe8>
   11a10:	cmp	r3, #2
   11a14:	beq	11d78 <__assert_fail@plt+0xf84>
   11a18:	cmp	r3, #0
   11a1c:	ldreq	ip, [pc, #1168]	; 11eb4 <__assert_fail@plt+0x10c0>
   11a20:	ldreq	r3, [pc, #1240]	; 11f00 <__assert_fail@plt+0x110c>
   11a24:	streq	r3, [ip]
   11a28:	b	11cec <__assert_fail@plt+0xef8>
   11a2c:	ldr	r3, [pc, #1148]	; 11eb0 <__assert_fail@plt+0x10bc>
   11a30:	str	r7, [r9]
   11a34:	str	r7, [sl]
   11a38:	str	r8, [r3]
   11a3c:	ldr	r3, [pc, #1176]	; 11edc <__assert_fail@plt+0x10e8>
   11a40:	str	r7, [fp]
   11a44:	str	r7, [r3]
   11a48:	b	11850 <__assert_fail@plt+0xa5c>
   11a4c:	ldr	r3, [pc, #1124]	; 11eb8 <__assert_fail@plt+0x10c4>
   11a50:	str	r8, [r3]
   11a54:	ldr	r3, [pc, #1156]	; 11ee0 <__assert_fail@plt+0x10ec>
   11a58:	str	r7, [r3]
   11a5c:	b	11850 <__assert_fail@plt+0xa5c>
   11a60:	ldr	r3, [pc, #1100]	; 11eb4 <__assert_fail@plt+0x10c0>
   11a64:	mov	r2, #2
   11a68:	str	r2, [r3, #12]
   11a6c:	b	11850 <__assert_fail@plt+0xa5c>
   11a70:	ldr	r3, [pc, #1132]	; 11ee4 <__assert_fail@plt+0x10f0>
   11a74:	str	r8, [r3]
   11a78:	b	11850 <__assert_fail@plt+0xa5c>
   11a7c:	ldr	r3, [pc, #1104]	; 11ed4 <__assert_fail@plt+0x10e0>
   11a80:	str	r8, [r3]
   11a84:	b	11850 <__assert_fail@plt+0xa5c>
   11a88:	ldr	r3, [pc, #1084]	; 11ecc <__assert_fail@plt+0x10d8>
   11a8c:	str	r8, [r3]
   11a90:	b	11850 <__assert_fail@plt+0xa5c>
   11a94:	ldr	r3, [pc, #1104]	; 11eec <__assert_fail@plt+0x10f8>
   11a98:	str	r8, [r3]
   11a9c:	b	11850 <__assert_fail@plt+0xa5c>
   11aa0:	ldr	r3, [pc, #1020]	; 11ea4 <__assert_fail@plt+0x10b0>
   11aa4:	str	r8, [r3]
   11aa8:	b	11850 <__assert_fail@plt+0xa5c>
   11aac:	ldr	r3, [pc, #1040]	; 11ec4 <__assert_fail@plt+0x10d0>
   11ab0:	str	r8, [sl]
   11ab4:	str	r8, [r3]
   11ab8:	ldr	r3, [pc, #1052]	; 11edc <__assert_fail@plt+0x10e8>
   11abc:	str	r7, [r9]
   11ac0:	str	r7, [fp]
   11ac4:	str	r7, [r3]
   11ac8:	ldr	r3, [pc, #992]	; 11eb0 <__assert_fail@plt+0x10bc>
   11acc:	str	r7, [r3]
   11ad0:	b	11850 <__assert_fail@plt+0xa5c>
   11ad4:	ldr	r3, [pc, #1024]	; 11edc <__assert_fail@plt+0x10e8>
   11ad8:	str	r7, [r9]
   11adc:	str	r7, [sl]
   11ae0:	str	r8, [r3]
   11ae4:	ldr	r3, [pc, #964]	; 11eb0 <__assert_fail@plt+0x10bc>
   11ae8:	str	r7, [fp]
   11aec:	str	r7, [r3]
   11af0:	b	11850 <__assert_fail@plt+0xa5c>
   11af4:	ldr	r3, [pc, #968]	; 11ec4 <__assert_fail@plt+0x10d0>
   11af8:	str	r8, [sl]
   11afc:	str	r7, [r3]
   11b00:	b	11ab8 <__assert_fail@plt+0xcc4>
   11b04:	ldr	r3, [pc, #1008]	; 11efc <__assert_fail@plt+0x1108>
   11b08:	mov	r2, #1024	; 0x400
   11b0c:	str	r2, [r3]
   11b10:	b	11850 <__assert_fail@plt+0xa5c>
   11b14:	ldr	r3, [pc, #892]	; 11e98 <__assert_fail@plt+0x10a4>
   11b18:	str	r8, [r3]
   11b1c:	b	11850 <__assert_fail@plt+0xa5c>
   11b20:	ldr	r3, [pc, #928]	; 11ec8 <__assert_fail@plt+0x10d4>
   11b24:	str	r8, [r3]
   11b28:	b	11850 <__assert_fail@plt+0xa5c>
   11b2c:	ldr	r3, [pc, #908]	; 11ec0 <__assert_fail@plt+0x10cc>
   11b30:	str	r8, [r3]
   11b34:	ldr	r3, [pc, #924]	; 11ed8 <__assert_fail@plt+0x10e4>
   11b38:	str	r7, [r3]
   11b3c:	b	11850 <__assert_fail@plt+0xa5c>
   11b40:	ldr	r3, [pc, #920]	; 11ee0 <__assert_fail@plt+0x10ec>
   11b44:	str	r8, [r3]
   11b48:	ldr	r3, [pc, #872]	; 11eb8 <__assert_fail@plt+0x10c4>
   11b4c:	str	r7, [r3]
   11b50:	b	11850 <__assert_fail@plt+0xa5c>
   11b54:	ldr	r3, [pc, #908]	; 11ee8 <__assert_fail@plt+0x10f4>
   11b58:	str	r8, [r3]
   11b5c:	b	11850 <__assert_fail@plt+0xa5c>
   11b60:	ldr	r3, [pc, #872]	; 11ed0 <__assert_fail@plt+0x10dc>
   11b64:	str	r8, [r3]
   11b68:	b	11850 <__assert_fail@plt+0xa5c>
   11b6c:	ldr	r3, [pc, #832]	; 11eb4 <__assert_fail@plt+0x10c0>
   11b70:	str	r8, [r3, #12]
   11b74:	b	11850 <__assert_fail@plt+0xa5c>
   11b78:	ldr	r3, [pc, #856]	; 11ed8 <__assert_fail@plt+0x10e4>
   11b7c:	str	r8, [r3]
   11b80:	b	11850 <__assert_fail@plt+0xa5c>
   11b84:	ldr	r3, [sp, #4]
   11b88:	bic	r3, r3, #16
   11b8c:	orr	r3, r3, #2
   11b90:	str	r3, [sp, #4]
   11b94:	b	11850 <__assert_fail@plt+0xa5c>
   11b98:	ldr	r3, [pc, #848]	; 11ef0 <__assert_fail@plt+0x10fc>
   11b9c:	str	r8, [r3]
   11ba0:	b	11850 <__assert_fail@plt+0xa5c>
   11ba4:	ldr	r3, [pc, #816]	; 11edc <__assert_fail@plt+0x10e8>
   11ba8:	str	r8, [fp]
   11bac:	str	r7, [r9]
   11bb0:	str	r7, [r3]
   11bb4:	ldr	r3, [pc, #756]	; 11eb0 <__assert_fail@plt+0x10bc>
   11bb8:	str	r7, [sl]
   11bbc:	str	r7, [r3]
   11bc0:	b	11850 <__assert_fail@plt+0xa5c>
   11bc4:	ldr	r3, [pc, #784]	; 11edc <__assert_fail@plt+0x10e8>
   11bc8:	str	r8, [r9]
   11bcc:	str	r7, [sl]
   11bd0:	str	r7, [r3]
   11bd4:	ldr	r3, [pc, #724]	; 11eb0 <__assert_fail@plt+0x10bc>
   11bd8:	str	r7, [fp]
   11bdc:	str	r7, [r3]
   11be0:	b	11850 <__assert_fail@plt+0xa5c>
   11be4:	ldr	r3, [pc, #684]	; 11e98 <__assert_fail@plt+0x10a4>
   11be8:	ldr	r3, [r3]
   11bec:	cmp	r3, #0
   11bf0:	bne	11c5c <__assert_fail@plt+0xe68>
   11bf4:	ldr	r3, [pc, #744]	; 11ee4 <__assert_fail@plt+0x10f0>
   11bf8:	ldr	r3, [r3]
   11bfc:	cmp	r3, #0
   11c00:	bne	11c5c <__assert_fail@plt+0xe68>
   11c04:	ldr	r3, [pc, #740]	; 11ef0 <__assert_fail@plt+0x10fc>
   11c08:	ldr	r3, [r3]
   11c0c:	cmp	r3, #0
   11c10:	bne	11d2c <__assert_fail@plt+0xf38>
   11c14:	ldr	r3, [pc, #720]	; 11eec <__assert_fail@plt+0x10f8>
   11c18:	ldr	r3, [r3]
   11c1c:	cmp	r3, #0
   11c20:	ldr	r3, [pc, #652]	; 11eb4 <__assert_fail@plt+0x10c0>
   11c24:	ldr	r3, [r3, #12]
   11c28:	bne	11c3c <__assert_fail@plt+0xe48>
   11c2c:	cmp	r3, #0
   11c30:	ldreq	ip, [sp, #4]
   11c34:	orreq	ip, ip, #8
   11c38:	streq	ip, [sp, #4]
   11c3c:	ldr	ip, [pc, #636]	; 11ec0 <__assert_fail@plt+0x10cc>
   11c40:	ldr	ip, [ip]
   11c44:	cmp	ip, #0
   11c48:	bne	11d34 <__assert_fail@plt+0xf40>
   11c4c:	b	11c84 <__assert_fail@plt+0xe90>
   11c50:	bl	12bec <__assert_fail@plt+0x1df8>
   11c54:	add	sp, sp, #20
   11c58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c5c:	ldr	r3, [pc, #604]	; 11ec0 <__assert_fail@plt+0x10cc>
   11c60:	ldr	r3, [r3]
   11c64:	cmp	r3, #0
   11c68:	bne	11d2c <__assert_fail@plt+0xf38>
   11c6c:	ldr	r3, [pc, #636]	; 11ef0 <__assert_fail@plt+0x10fc>
   11c70:	ldr	r3, [r3]
   11c74:	cmp	r3, #0
   11c78:	bne	11d2c <__assert_fail@plt+0xf38>
   11c7c:	ldr	r3, [pc, #560]	; 11eb4 <__assert_fail@plt+0x10c0>
   11c80:	ldr	r3, [r3, #12]
   11c84:	ldr	ip, [sp, #4]
   11c88:	orr	ip, ip, #1
   11c8c:	str	ip, [sp, #4]
   11c90:	b	11d34 <__assert_fail@plt+0xf40>
   11c94:	ldr	r0, [pc, #616]	; 11f04 <__assert_fail@plt+0x1110>
   11c98:	bl	10c80 <getenv@plt>
   11c9c:	cmp	r0, r6
   11ca0:	beq	11e4c <__assert_fail@plt+0x1058>
   11ca4:	mov	r1, r6
   11ca8:	mov	r2, #10
   11cac:	bl	10ba8 <strtol@plt>
   11cb0:	ldr	r3, [pc, #592]	; 11f08 <__assert_fail@plt+0x1114>
   11cb4:	str	r0, [r3]
   11cb8:	ldr	r2, [pc, #524]	; 11ecc <__assert_fail@plt+0x10d8>
   11cbc:	mov	r3, #1
   11cc0:	str	r3, [fp]
   11cc4:	str	r3, [r2]
   11cc8:	b	1181c <__assert_fail@plt+0xa28>
   11ccc:	cmp	r3, #1
   11cd0:	beq	11dcc <__assert_fail@plt+0xfd8>
   11cd4:	cmp	r3, #2
   11cd8:	beq	11d58 <__assert_fail@plt+0xf64>
   11cdc:	cmp	r3, #0
   11ce0:	ldreq	ip, [pc, #460]	; 11eb4 <__assert_fail@plt+0x10c0>
   11ce4:	ldreq	r3, [pc, #544]	; 11f0c <__assert_fail@plt+0x1118>
   11ce8:	streq	r3, [ip]
   11cec:	ldr	r3, [r9]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11d98 <__assert_fail@plt+0xfa4>
   11cf8:	ldr	r2, [pc, #436]	; 11eb4 <__assert_fail@plt+0x10c0>
   11cfc:	ldr	r3, [pc, #524]	; 11f10 <__assert_fail@plt+0x111c>
   11d00:	str	r3, [r2, #4]
   11d04:	cmp	r0, #0
   11d08:	moveq	r0, #1
   11d0c:	ldr	r2, [sp, #4]
   11d10:	addne	r1, r5, r1, lsl #2
   11d14:	ldreq	r1, [pc, #504]	; 11f14 <__assert_fail@plt+0x1120>
   11d18:	bl	114a0 <__assert_fail@plt+0x6ac>
   11d1c:	ldr	r3, [pc, #500]	; 11f18 <__assert_fail@plt+0x1124>
   11d20:	ldr	r0, [r3]
   11d24:	add	sp, sp, #20
   11d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11d2c:	ldr	r3, [pc, #384]	; 11eb4 <__assert_fail@plt+0x10c0>
   11d30:	ldr	r3, [r3, #12]
   11d34:	ldr	ip, [pc, #428]	; 11ee8 <__assert_fail@plt+0x10f4>
   11d38:	ldr	ip, [ip]
   11d3c:	cmp	ip, #0
   11d40:	bne	11e78 <__assert_fail@plt+0x1084>
   11d44:	ldr	ip, [pc, #408]	; 11ee4 <__assert_fail@plt+0x10f0>
   11d48:	ldr	ip, [ip]
   11d4c:	cmp	ip, #0
   11d50:	beq	119f8 <__assert_fail@plt+0xc04>
   11d54:	b	119ec <__assert_fail@plt+0xbf8>
   11d58:	ldr	r3, [pc, #344]	; 11eb8 <__assert_fail@plt+0x10c4>
   11d5c:	ldr	r3, [r3]
   11d60:	cmp	r3, #0
   11d64:	beq	11e2c <__assert_fail@plt+0x1038>
   11d68:	ldr	ip, [pc, #324]	; 11eb4 <__assert_fail@plt+0x10c0>
   11d6c:	ldr	r3, [pc, #424]	; 11f1c <__assert_fail@plt+0x1128>
   11d70:	str	r3, [ip]
   11d74:	b	11cec <__assert_fail@plt+0xef8>
   11d78:	ldr	r3, [pc, #312]	; 11eb8 <__assert_fail@plt+0x10c4>
   11d7c:	ldr	r3, [r3]
   11d80:	cmp	r3, #0
   11d84:	beq	11e0c <__assert_fail@plt+0x1018>
   11d88:	ldr	ip, [pc, #292]	; 11eb4 <__assert_fail@plt+0x10c0>
   11d8c:	ldr	r3, [pc, #396]	; 11f20 <__assert_fail@plt+0x112c>
   11d90:	str	r3, [ip]
   11d94:	b	11cec <__assert_fail@plt+0xef8>
   11d98:	ldr	r3, [pc, #272]	; 11eb0 <__assert_fail@plt+0x10bc>
   11d9c:	ldr	r3, [r3]
   11da0:	cmp	r3, #0
   11da4:	ldrne	r2, [pc, #264]	; 11eb4 <__assert_fail@plt+0x10c0>
   11da8:	ldrne	r3, [pc, #372]	; 11f24 <__assert_fail@plt+0x1130>
   11dac:	strne	r3, [r2, #4]
   11db0:	bne	11d04 <__assert_fail@plt+0xf10>
   11db4:	cmp	r2, #0
   11db8:	beq	11dec <__assert_fail@plt+0xff8>
   11dbc:	ldr	r2, [pc, #240]	; 11eb4 <__assert_fail@plt+0x10c0>
   11dc0:	ldr	r3, [pc, #352]	; 11f28 <__assert_fail@plt+0x1134>
   11dc4:	str	r3, [r2, #4]
   11dc8:	b	11d04 <__assert_fail@plt+0xf10>
   11dcc:	ldr	ip, [pc, #224]	; 11eb4 <__assert_fail@plt+0x10c0>
   11dd0:	ldr	r3, [pc, #340]	; 11f2c <__assert_fail@plt+0x1138>
   11dd4:	str	r3, [ip]
   11dd8:	b	11cec <__assert_fail@plt+0xef8>
   11ddc:	ldr	ip, [pc, #208]	; 11eb4 <__assert_fail@plt+0x10c0>
   11de0:	ldr	r3, [pc, #328]	; 11f30 <__assert_fail@plt+0x113c>
   11de4:	str	r3, [ip]
   11de8:	b	11cec <__assert_fail@plt+0xef8>
   11dec:	ldr	r3, [pc, #232]	; 11edc <__assert_fail@plt+0x10e8>
   11df0:	ldr	r2, [pc, #188]	; 11eb4 <__assert_fail@plt+0x10c0>
   11df4:	ldr	r3, [r3]
   11df8:	cmp	r3, #0
   11dfc:	ldrne	r3, [pc, #304]	; 11f34 <__assert_fail@plt+0x1140>
   11e00:	ldreq	r3, [pc, #304]	; 11f38 <__assert_fail@plt+0x1144>
   11e04:	str	r3, [r2, #4]
   11e08:	b	11d04 <__assert_fail@plt+0xf10>
   11e0c:	ldr	r3, [pc, #204]	; 11ee0 <__assert_fail@plt+0x10ec>
   11e10:	ldr	ip, [pc, #156]	; 11eb4 <__assert_fail@plt+0x10c0>
   11e14:	ldr	r3, [r3]
   11e18:	cmp	r3, #0
   11e1c:	ldrne	r3, [pc, #280]	; 11f3c <__assert_fail@plt+0x1148>
   11e20:	ldreq	r3, [pc, #280]	; 11f40 <__assert_fail@plt+0x114c>
   11e24:	str	r3, [ip]
   11e28:	b	11cec <__assert_fail@plt+0xef8>
   11e2c:	ldr	r3, [pc, #172]	; 11ee0 <__assert_fail@plt+0x10ec>
   11e30:	ldr	ip, [pc, #124]	; 11eb4 <__assert_fail@plt+0x10c0>
   11e34:	ldr	r3, [r3]
   11e38:	cmp	r3, #0
   11e3c:	ldrne	r3, [pc, #256]	; 11f44 <__assert_fail@plt+0x1150>
   11e40:	ldreq	r3, [pc, #256]	; 11f48 <__assert_fail@plt+0x1154>
   11e44:	str	r3, [ip]
   11e48:	b	11cec <__assert_fail@plt+0xef8>
   11e4c:	add	r2, sp, #8
   11e50:	ldr	r1, [pc, #244]	; 11f4c <__assert_fail@plt+0x1158>
   11e54:	mov	r0, #1
   11e58:	bl	16d50 <__assert_fail@plt+0x5f5c>
   11e5c:	cmp	r0, #0
   11e60:	bne	11cb8 <__assert_fail@plt+0xec4>
   11e64:	ldrh	r3, [sp, #10]
   11e68:	cmp	r3, #0
   11e6c:	ldrne	r2, [pc, #148]	; 11f08 <__assert_fail@plt+0x1114>
   11e70:	strne	r3, [r2]
   11e74:	b	11cb8 <__assert_fail@plt+0xec4>
   11e78:	ldr	ip, [sp, #4]
   11e7c:	orr	ip, ip, #128	; 0x80
   11e80:	str	ip, [sp, #4]
   11e84:	b	11d44 <__assert_fail@plt+0xf50>
   11e88:	ldr	r3, [pc, #36]	; 11eb4 <__assert_fail@plt+0x10c0>
   11e8c:	ldr	r3, [r3, #12]
   11e90:	b	119ec <__assert_fail@plt+0xbf8>
   11e94:	andeq	r8, r2, ip, asr r1
   11e98:	andeq	r8, r2, r0, ror r1
   11e9c:	andeq	r8, r2, ip, lsr #3
   11ea0:	andeq	r8, r2, r0, ror #2
   11ea4:	andeq	r8, r2, r8, ror #2
   11ea8:	andeq	r8, r2, r4, ror #2
   11eac:	andeq	r8, r2, ip, lsl #3
   11eb0:	muleq	r2, ip, r1
   11eb4:	andeq	r8, r2, ip, lsl r1
   11eb8:	andeq	r8, r2, r8, ror r1
   11ebc:			; <UNDEFINED> instruction: 0x000281b0
   11ec0:	andeq	r8, r2, r0, lsr #3
   11ec4:	muleq	r2, r8, r1
   11ec8:	andeq	r8, r2, ip, ror r1
   11ecc:			; <UNDEFINED> instruction: 0x000281b4
   11ed0:	muleq	r2, r4, r1
   11ed4:	andeq	r8, r2, r4, ror r1
   11ed8:	andeq	r8, r2, ip, ror #2
   11edc:			; <UNDEFINED> instruction: 0x000281b8
   11ee0:	andeq	r8, r2, r4, lsr #3
   11ee4:	andeq	r8, r2, r8, asr r1
   11ee8:	andeq	r8, r2, r4, lsl #3
   11eec:	muleq	r2, r0, r1
   11ef0:	andeq	r8, r2, r0, lsl #3
   11ef4:	muleq	r1, r8, r9
   11ef8:	andeq	r8, r2, r4, lsl #2
   11efc:	andeq	r8, r2, r8, lsr #3
   11f00:	andeq	r2, r1, r4, lsr #24
   11f04:	muleq	r1, r0, r9
   11f08:	strdeq	r8, [r2], -r0
   11f0c:	andeq	r2, r1, r8, lsl ip
   11f10:	andeq	r2, r1, r8, asr #5
   11f14:	strdeq	r8, [r2], -r4
   11f18:	andeq	r8, r2, r8, lsl #3
   11f1c:	andeq	r2, r1, r8, lsl #25
   11f20:	andeq	r2, r1, ip, asr #25
   11f24:	andeq	r2, r1, r8, lsr #18
   11f28:	ldrdeq	r2, [r1], -r8
   11f2c:	andeq	r2, r1, r0, lsr sp
   11f30:	andeq	r2, r1, r8, ror sp
   11f34:	andeq	r2, r1, r4, ror #20
   11f38:	muleq	r1, r8, r6
   11f3c:	andeq	r2, r1, r0, lsr #26
   11f40:	andeq	r2, r1, r8, ror ip
   11f44:	ldrdeq	r2, [r1], -ip
   11f48:	andeq	r2, r1, r4, lsr ip
   11f4c:	andeq	r5, r0, r3, lsl r4
   11f50:	push	{r4, r5, r6, r7, lr}
   11f54:	sub	sp, sp, #12
   11f58:	add	r3, sp, #8
   11f5c:	ldr	r5, [pc, #196]	; 12028 <__assert_fail@plt+0x1234>
   11f60:	str	r0, [r3, #-4]!
   11f64:	mov	r0, r3
   11f68:	bl	10c08 <ctime@plt>
   11f6c:	mov	r6, r0
   11f70:	add	r4, r0, #3
   11f74:	add	r7, r0, #10
   11f78:	ldrb	r0, [r4, #1]!
   11f7c:	ldr	r1, [r5]
   11f80:	bl	10d58 <putc@plt>
   11f84:	cmp	r4, r7
   11f88:	bne	11f78 <__assert_fail@plt+0x1184>
   11f8c:	ldr	r3, [pc, #152]	; 1202c <__assert_fail@plt+0x1238>
   11f90:	ldr	r0, [r3]
   11f94:	cmp	r0, #0
   11f98:	beq	11fc8 <__assert_fail@plt+0x11d4>
   11f9c:	add	r6, r6, #23
   11fa0:	ldrb	r0, [r4, #1]!
   11fa4:	ldr	r1, [r5]
   11fa8:	bl	10d58 <putc@plt>
   11fac:	cmp	r6, r4
   11fb0:	bne	11fa0 <__assert_fail@plt+0x11ac>
   11fb4:	ldr	r1, [r5]
   11fb8:	mov	r0, #32
   11fbc:	bl	10d58 <putc@plt>
   11fc0:	add	sp, sp, #12
   11fc4:	pop	{r4, r5, r6, r7, pc}
   11fc8:	ldr	r3, [sp, #4]
   11fcc:	ldr	r7, [pc, #92]	; 12030 <__assert_fail@plt+0x123c>
   11fd0:	add	r7, r3, r7
   11fd4:	bl	10bfc <time@plt>
   11fd8:	cmp	r7, r0
   11fdc:	blt	11ffc <__assert_fail@plt+0x1208>
   11fe0:	add	r6, r6, #15
   11fe4:	ldrb	r0, [r4, #1]!
   11fe8:	ldr	r1, [r5]
   11fec:	bl	10d58 <putc@plt>
   11ff0:	cmp	r4, r6
   11ff4:	bne	11fe4 <__assert_fail@plt+0x11f0>
   11ff8:	b	11fb4 <__assert_fail@plt+0x11c0>
   11ffc:	ldr	r1, [r5]
   12000:	mov	r0, #32
   12004:	bl	10d58 <putc@plt>
   12008:	add	r4, r6, #19
   1200c:	add	r6, r6, #23
   12010:	ldrb	r0, [r4, #1]!
   12014:	ldr	r1, [r5]
   12018:	bl	10d58 <putc@plt>
   1201c:	cmp	r4, r6
   12020:	bne	12010 <__assert_fail@plt+0x121c>
   12024:	b	11fb4 <__assert_fail@plt+0x11c0>
   12028:	andeq	r8, r2, r4, lsl r1
   1202c:	muleq	r2, r4, r1
   12030:	strdeq	pc, [pc], #15	; <UNPREDICTABLE>
   12034:	ldr	r3, [r0, #48]	; 0x30
   12038:	push	{r4, r5, lr}
   1203c:	cmp	r3, #0
   12040:	sub	sp, sp, #8192	; 0x2000
   12044:	sub	sp, sp, #12
   12048:	bne	120b4 <__assert_fail@plt+0x12c0>
   1204c:	add	r4, sp, #8
   12050:	add	r3, r0, #168	; 0xa8
   12054:	ldr	r2, [pc, #180]	; 12110 <__assert_fail@plt+0x131c>
   12058:	mov	r0, r4
   1205c:	mov	r1, #4096	; 0x1000
   12060:	bl	10d04 <snprintf@plt>
   12064:	add	r1, sp, #4096	; 0x1000
   12068:	add	r1, r1, #8
   1206c:	ldr	r2, [pc, #160]	; 12114 <__assert_fail@plt+0x1320>
   12070:	mov	r0, r4
   12074:	bl	10c44 <readlink@plt>
   12078:	cmn	r0, #1
   1207c:	mov	r3, r0
   12080:	beq	120dc <__assert_fail@plt+0x12e8>
   12084:	add	r1, sp, #4096	; 0x1000
   12088:	add	r1, r1, #8
   1208c:	mov	r2, #0
   12090:	ldr	r0, [pc, #128]	; 12118 <__assert_fail@plt+0x1324>
   12094:	strb	r2, [r1, r3]
   12098:	bl	10bc0 <printf@plt>
   1209c:	add	r0, sp, #4096	; 0x1000
   120a0:	add	r0, r0, #8
   120a4:	bl	12b6c <__assert_fail@plt+0x1d78>
   120a8:	add	sp, sp, #8192	; 0x2000
   120ac:	add	sp, sp, #12
   120b0:	pop	{r4, r5, pc}
   120b4:	ldr	r3, [r0, #4]
   120b8:	add	r2, r0, #168	; 0xa8
   120bc:	add	r4, sp, #8
   120c0:	ldr	r3, [r3, #24]
   120c4:	mov	r0, r4
   120c8:	str	r2, [sp]
   120cc:	mov	r1, #4096	; 0x1000
   120d0:	ldr	r2, [pc, #68]	; 1211c <__assert_fail@plt+0x1328>
   120d4:	bl	10d04 <snprintf@plt>
   120d8:	b	12064 <__assert_fail@plt+0x1270>
   120dc:	ldr	r3, [pc, #60]	; 12120 <__assert_fail@plt+0x132c>
   120e0:	ldr	r5, [r3]
   120e4:	bl	10cf8 <__errno_location@plt>
   120e8:	ldr	r0, [r0]
   120ec:	bl	10ca4 <strerror@plt>
   120f0:	mov	r2, r4
   120f4:	ldr	r1, [pc, #40]	; 12124 <__assert_fail@plt+0x1330>
   120f8:	mov	r3, r0
   120fc:	mov	r0, r5
   12100:	bl	10cec <fprintf@plt>
   12104:	add	sp, sp, #8192	; 0x2000
   12108:	add	sp, sp, #12
   1210c:	pop	{r4, r5, pc}
   12110:	andeq	r7, r1, r8, lsr r9
   12114:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   12118:	andeq	r7, r1, ip, asr #19
   1211c:			; <UNDEFINED> instruction: 0x000179b4
   12120:	andeq	r8, r2, r0, lsl r1
   12124:			; <UNDEFINED> instruction: 0x000179bc
   12128:	and	r3, r0, #61440	; 0xf000
   1212c:	cmp	r3, #16384	; 0x4000
   12130:	push	{r4, lr}
   12134:	beq	121bc <__assert_fail@plt+0x13c8>
   12138:	bls	1217c <__assert_fail@plt+0x1388>
   1213c:	cmp	r3, #40960	; 0xa000
   12140:	beq	12164 <__assert_fail@plt+0x1370>
   12144:	cmp	r3, #49152	; 0xc000
   12148:	bne	1219c <__assert_fail@plt+0x13a8>
   1214c:	ldr	r3, [pc, #128]	; 121d4 <__assert_fail@plt+0x13e0>
   12150:	mov	r0, #61	; 0x3d
   12154:	ldr	r1, [r3]
   12158:	bl	10d58 <putc@plt>
   1215c:	mov	r0, #1
   12160:	pop	{r4, pc}
   12164:	ldr	r3, [pc, #104]	; 121d4 <__assert_fail@plt+0x13e0>
   12168:	mov	r0, #64	; 0x40
   1216c:	ldr	r1, [r3]
   12170:	bl	10d58 <putc@plt>
   12174:	mov	r0, #1
   12178:	pop	{r4, pc}
   1217c:	cmp	r3, #4096	; 0x1000
   12180:	bne	1219c <__assert_fail@plt+0x13a8>
   12184:	ldr	r3, [pc, #72]	; 121d4 <__assert_fail@plt+0x13e0>
   12188:	mov	r0, #124	; 0x7c
   1218c:	ldr	r1, [r3]
   12190:	bl	10d58 <putc@plt>
   12194:	mov	r0, #1
   12198:	pop	{r4, pc}
   1219c:	ands	r0, r0, #73	; 0x49
   121a0:	popeq	{r4, pc}
   121a4:	ldr	r3, [pc, #40]	; 121d4 <__assert_fail@plt+0x13e0>
   121a8:	mov	r0, #42	; 0x2a
   121ac:	ldr	r1, [r3]
   121b0:	bl	10d58 <putc@plt>
   121b4:	mov	r0, #1
   121b8:	pop	{r4, pc}
   121bc:	ldr	r3, [pc, #16]	; 121d4 <__assert_fail@plt+0x13e0>
   121c0:	mov	r0, #47	; 0x2f
   121c4:	ldr	r1, [r3]
   121c8:	bl	10d58 <putc@plt>
   121cc:	mov	r0, #1
   121d0:	pop	{r4, pc}
   121d4:	andeq	r8, r2, r4, lsl r1
   121d8:	ldr	r3, [pc, #204]	; 122ac <__assert_fail@plt+0x14b8>
   121dc:	push	{r4, r5, r6, lr}
   121e0:	mov	r5, r0
   121e4:	ldr	r4, [r3]
   121e8:	mov	r6, r2
   121ec:	cmp	r4, #0
   121f0:	bne	12298 <__assert_fail@plt+0x14a4>
   121f4:	ldr	r3, [pc, #180]	; 122b0 <__assert_fail@plt+0x14bc>
   121f8:	ldr	r3, [r3]
   121fc:	cmp	r3, #0
   12200:	bne	1225c <__assert_fail@plt+0x1468>
   12204:	add	r0, r5, #168	; 0xa8
   12208:	bl	12b6c <__assert_fail@plt+0x1d78>
   1220c:	ldr	r3, [pc, #160]	; 122b4 <__assert_fail@plt+0x14c0>
   12210:	ldr	r3, [r3]
   12214:	cmp	r3, #0
   12218:	add	r4, r4, r0
   1221c:	ldrne	r0, [r5, #80]	; 0x50
   12220:	bne	1224c <__assert_fail@plt+0x1458>
   12224:	ldr	r3, [pc, #140]	; 122b8 <__assert_fail@plt+0x14c4>
   12228:	ldr	r3, [r3]
   1222c:	cmp	r3, #0
   12230:	beq	12244 <__assert_fail@plt+0x1450>
   12234:	ldr	r0, [r5, #80]	; 0x50
   12238:	and	r3, r0, #61440	; 0xf000
   1223c:	cmp	r3, #16384	; 0x4000
   12240:	beq	1224c <__assert_fail@plt+0x1458>
   12244:	mov	r0, r4
   12248:	pop	{r4, r5, r6, pc}
   1224c:	bl	12128 <__assert_fail@plt+0x1334>
   12250:	add	r4, r4, r0
   12254:	mov	r0, r4
   12258:	pop	{r4, r5, r6, pc}
   1225c:	ldr	r3, [pc, #88]	; 122bc <__assert_fail@plt+0x14c8>
   12260:	ldrd	r0, [r5, #128]	; 0x80
   12264:	ldr	r2, [r3]
   12268:	sub	r3, r2, #1
   1226c:	adds	r0, r0, r3
   12270:	adc	r1, r1, r3, asr #31
   12274:	asr	r3, r2, #31
   12278:	bl	1766c <__assert_fail@plt+0x6878>
   1227c:	mov	r2, r0
   12280:	mov	r3, r1
   12284:	ldr	r0, [pc, #52]	; 122c0 <__assert_fail@plt+0x14cc>
   12288:	mov	r1, r6
   1228c:	bl	10bc0 <printf@plt>
   12290:	add	r4, r4, r0
   12294:	b	12204 <__assert_fail@plt+0x1410>
   12298:	ldr	r2, [r0, #160]	; 0xa0
   1229c:	ldr	r0, [pc, #32]	; 122c4 <__assert_fail@plt+0x14d0>
   122a0:	bl	10bc0 <printf@plt>
   122a4:	mov	r4, r0
   122a8:	b	121f4 <__assert_fail@plt+0x1400>
   122ac:	andeq	r8, r2, r0, ror r1
   122b0:	andeq	r8, r2, r8, asr r1
   122b4:	andeq	r8, r2, r0, lsl #3
   122b8:	muleq	r2, r0, r1
   122bc:	andeq	r8, r2, r8, lsr #3
   122c0:	ldrdeq	r7, [r1], -ip
   122c4:	ldrdeq	r7, [r1], -r4
   122c8:	push	{r4, r5, r6, r7, r8, lr}
   122cc:	ldr	r4, [r0]
   122d0:	cmp	r4, #0
   122d4:	popeq	{r4, r5, r6, r7, r8, pc}
   122d8:	ldr	r7, [pc, #60]	; 1231c <__assert_fail@plt+0x1528>
   122dc:	mov	r5, r0
   122e0:	mov	r6, #10
   122e4:	ldr	r3, [r4, #16]
   122e8:	mov	r0, r4
   122ec:	cmp	r3, #1
   122f0:	beq	1230c <__assert_fail@plt+0x1518>
   122f4:	ldr	r1, [r5, #32]
   122f8:	ldr	r2, [r5, #20]
   122fc:	bl	121d8 <__assert_fail@plt+0x13e4>
   12300:	ldr	r1, [r7]
   12304:	mov	r0, r6
   12308:	bl	10d58 <putc@plt>
   1230c:	ldr	r4, [r4, #8]
   12310:	cmp	r4, #0
   12314:	bne	122e4 <__assert_fail@plt+0x14f0>
   12318:	pop	{r4, r5, r6, r7, r8, pc}
   1231c:	andeq	r8, r2, r4, lsl r1
   12320:	ldr	r3, [pc, #156]	; 123c4 <__assert_fail@plt+0x15d0>
   12324:	push	{r4, r5, r6, lr}
   12328:	mov	r5, r1
   1232c:	ldr	r3, [r3]
   12330:	ldr	r1, [r0, #16]
   12334:	cmp	r3, #0
   12338:	ldrne	r3, [r0, #32]
   1233c:	addne	r3, r3, #1
   12340:	addne	r1, r1, r3
   12344:	ldr	r3, [pc, #124]	; 123c8 <__assert_fail@plt+0x15d4>
   12348:	ldr	r3, [r3]
   1234c:	cmp	r3, #0
   12350:	ldrne	r3, [r0, #20]
   12354:	addne	r3, r3, #1
   12358:	addne	r1, r1, r3
   1235c:	ldr	r3, [pc, #104]	; 123cc <__assert_fail@plt+0x15d8>
   12360:	ldr	r3, [r3]
   12364:	cmp	r3, #0
   12368:	bne	123b0 <__assert_fail@plt+0x15bc>
   1236c:	ldr	r3, [pc, #92]	; 123d0 <__assert_fail@plt+0x15dc>
   12370:	ldr	r3, [r3]
   12374:	cmp	r3, #0
   12378:	bne	123b0 <__assert_fail@plt+0x15bc>
   1237c:	ldr	r3, [pc, #80]	; 123d4 <__assert_fail@plt+0x15e0>
   12380:	add	r1, r1, #1
   12384:	ldr	r4, [r3]
   12388:	add	r4, r4, #1
   1238c:	cmp	r4, r1, lsl #1
   12390:	blt	123b8 <__assert_fail@plt+0x15c4>
   12394:	mov	r0, r4
   12398:	bl	1742c <__assert_fail@plt+0x6638>
   1239c:	mov	r1, r0
   123a0:	str	r0, [r5]
   123a4:	mov	r0, r4
   123a8:	bl	1742c <__assert_fail@plt+0x6638>
   123ac:	pop	{r4, r5, r6, pc}
   123b0:	add	r1, r1, #1
   123b4:	b	1237c <__assert_fail@plt+0x1588>
   123b8:	bl	122c8 <__assert_fail@plt+0x14d4>
   123bc:	mov	r0, #0
   123c0:	pop	{r4, r5, r6, pc}
   123c4:	andeq	r8, r2, r0, ror r1
   123c8:	andeq	r8, r2, r8, asr r1
   123cc:	andeq	r8, r2, r0, lsl #3
   123d0:	muleq	r2, r0, r1
   123d4:	strdeq	r8, [r2], -r0
   123d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   123dc:	mov	r5, r0
   123e0:	ldr	r4, [r0]
   123e4:	sub	sp, sp, #44	; 0x2c
   123e8:	ldr	r3, [r4, #48]	; 0x30
   123ec:	cmp	r3, #0
   123f0:	beq	12414 <__assert_fail@plt+0x1620>
   123f4:	ldr	r3, [pc, #596]	; 12650 <__assert_fail@plt+0x185c>
   123f8:	ldr	r3, [r3]
   123fc:	cmp	r3, #0
   12400:	bne	12618 <__assert_fail@plt+0x1824>
   12404:	ldr	r3, [pc, #584]	; 12654 <__assert_fail@plt+0x1860>
   12408:	ldr	r3, [r3]
   1240c:	cmp	r3, #0
   12410:	bne	12618 <__assert_fail@plt+0x1824>
   12414:	ldr	fp, [pc, #572]	; 12658 <__assert_fail@plt+0x1864>
   12418:	ldr	sl, [pc, #564]	; 12654 <__assert_fail@plt+0x1860>
   1241c:	ldr	r9, [pc, #568]	; 1265c <__assert_fail@plt+0x1868>
   12420:	ldr	r8, [pc, #568]	; 12660 <__assert_fail@plt+0x186c>
   12424:	ldr	r7, [pc, #568]	; 12664 <__assert_fail@plt+0x1870>
   12428:	b	124c8 <__assert_fail@plt+0x16d4>
   1242c:	ldrd	r0, [r4, #112]	; 0x70
   12430:	ldr	r3, [r5, #40]	; 0x28
   12434:	ldr	r2, [pc, #556]	; 12668 <__assert_fail@plt+0x1874>
   12438:	strd	r0, [sp]
   1243c:	rsb	r1, r3, #8
   12440:	ldr	r0, [pc, #548]	; 1266c <__assert_fail@plt+0x1878>
   12444:	bl	10bc0 <printf@plt>
   12448:	ldr	r3, [r8]
   1244c:	cmp	r3, #0
   12450:	bne	12570 <__assert_fail@plt+0x177c>
   12454:	ldr	r3, [pc, #532]	; 12670 <__assert_fail@plt+0x187c>
   12458:	ldr	r3, [r3]
   1245c:	cmp	r3, #0
   12460:	ldrne	r0, [r4, #152]	; 0x98
   12464:	ldreq	r0, [r4, #144]	; 0x90
   12468:	bl	11f50 <__assert_fail@plt+0x115c>
   1246c:	add	r0, r4, #168	; 0xa8
   12470:	bl	12b6c <__assert_fail@plt+0x1d78>
   12474:	ldr	r3, [r7]
   12478:	cmp	r3, #0
   1247c:	ldrne	r0, [r4, #80]	; 0x50
   12480:	bne	1257c <__assert_fail@plt+0x1788>
   12484:	ldr	r3, [pc, #488]	; 12674 <__assert_fail@plt+0x1880>
   12488:	ldr	r3, [r3]
   1248c:	cmp	r3, #0
   12490:	beq	12580 <__assert_fail@plt+0x178c>
   12494:	ldr	r0, [r4, #80]	; 0x50
   12498:	and	r3, r0, #61440	; 0xf000
   1249c:	cmp	r3, #16384	; 0x4000
   124a0:	beq	1257c <__assert_fail@plt+0x1788>
   124a4:	cmp	r3, #40960	; 0xa000
   124a8:	beq	12590 <__assert_fail@plt+0x179c>
   124ac:	ldr	r3, [pc, #452]	; 12678 <__assert_fail@plt+0x1884>
   124b0:	mov	r0, #10
   124b4:	ldr	r1, [r3]
   124b8:	bl	10d58 <putc@plt>
   124bc:	ldr	r4, [r4, #8]
   124c0:	cmp	r4, #0
   124c4:	beq	12648 <__assert_fail@plt+0x1854>
   124c8:	ldr	r3, [r4, #16]
   124cc:	cmp	r3, #1
   124d0:	beq	124bc <__assert_fail@plt+0x16c8>
   124d4:	ldr	r3, [fp]
   124d8:	cmp	r3, #0
   124dc:	bne	12604 <__assert_fail@plt+0x1810>
   124e0:	ldr	r3, [sl]
   124e4:	cmp	r3, #0
   124e8:	bne	125cc <__assert_fail@plt+0x17d8>
   124ec:	add	r1, sp, #20
   124f0:	ldr	r0, [r4, #80]	; 0x50
   124f4:	bl	12dc0 <__assert_fail@plt+0x1fcc>
   124f8:	ldr	r6, [r4, #20]
   124fc:	ldr	r1, [r5, #28]
   12500:	ldr	r3, [r4, #84]	; 0x54
   12504:	ldr	r2, [r6, #4]
   12508:	str	r1, [sp, #8]
   1250c:	str	r2, [sp, #12]
   12510:	ldr	r0, [r5, #44]	; 0x2c
   12514:	ldr	ip, [r6]
   12518:	ldr	r2, [r5, #36]	; 0x24
   1251c:	add	r1, sp, #20
   12520:	stm	sp, {r0, ip}
   12524:	ldr	r0, [pc, #336]	; 1267c <__assert_fail@plt+0x1888>
   12528:	bl	10bc0 <printf@plt>
   1252c:	ldr	r3, [r9]
   12530:	cmp	r3, #0
   12534:	bne	125b8 <__assert_fail@plt+0x17c4>
   12538:	ldr	r3, [r4, #80]	; 0x50
   1253c:	and	r3, r3, #45056	; 0xb000
   12540:	cmp	r3, #8192	; 0x2000
   12544:	beq	1259c <__assert_fail@plt+0x17a8>
   12548:	ldr	r3, [r5, #8]
   1254c:	cmp	r3, #0
   12550:	bne	1242c <__assert_fail@plt+0x1638>
   12554:	ldrd	r2, [r4, #112]	; 0x70
   12558:	ldr	r1, [r5, #40]	; 0x28
   1255c:	ldr	r0, [pc, #284]	; 12680 <__assert_fail@plt+0x188c>
   12560:	bl	10bc0 <printf@plt>
   12564:	ldr	r3, [r8]
   12568:	cmp	r3, #0
   1256c:	beq	12454 <__assert_fail@plt+0x1660>
   12570:	ldr	r0, [r4, #136]	; 0x88
   12574:	bl	11f50 <__assert_fail@plt+0x115c>
   12578:	b	1246c <__assert_fail@plt+0x1678>
   1257c:	bl	12128 <__assert_fail@plt+0x1334>
   12580:	ldr	r3, [r4, #80]	; 0x50
   12584:	and	r3, r3, #61440	; 0xf000
   12588:	cmp	r3, #40960	; 0xa000
   1258c:	bne	124ac <__assert_fail@plt+0x16b8>
   12590:	mov	r0, r4
   12594:	bl	12034 <__assert_fail@plt+0x1240>
   12598:	b	124ac <__assert_fail@plt+0x16b8>
   1259c:	ldr	r2, [r4, #96]	; 0x60
   125a0:	ldr	r0, [pc, #220]	; 12684 <__assert_fail@plt+0x1890>
   125a4:	lsr	r1, r2, #8
   125a8:	uxtb	r2, r2
   125ac:	uxtb	r1, r1
   125b0:	bl	10bc0 <printf@plt>
   125b4:	b	12448 <__assert_fail@plt+0x1654>
   125b8:	ldr	r2, [r6, #8]
   125bc:	ldr	r1, [r5, #24]
   125c0:	ldr	r0, [pc, #192]	; 12688 <__assert_fail@plt+0x1894>
   125c4:	bl	10bc0 <printf@plt>
   125c8:	b	12538 <__assert_fail@plt+0x1744>
   125cc:	ldr	r3, [pc, #184]	; 1268c <__assert_fail@plt+0x1898>
   125d0:	ldrd	r0, [r4, #128]	; 0x80
   125d4:	ldr	r2, [r3]
   125d8:	sub	r3, r2, #1
   125dc:	adds	r0, r0, r3
   125e0:	adc	r1, r1, r3, asr #31
   125e4:	asr	r3, r2, #31
   125e8:	bl	1766c <__assert_fail@plt+0x6878>
   125ec:	mov	r2, r0
   125f0:	mov	r3, r1
   125f4:	ldr	r0, [pc, #132]	; 12680 <__assert_fail@plt+0x188c>
   125f8:	ldr	r1, [r5, #20]
   125fc:	bl	10bc0 <printf@plt>
   12600:	b	124ec <__assert_fail@plt+0x16f8>
   12604:	ldr	r2, [r4, #160]	; 0xa0
   12608:	ldr	r1, [r5, #32]
   1260c:	ldr	r0, [pc, #124]	; 12690 <__assert_fail@plt+0x189c>
   12610:	bl	10bc0 <printf@plt>
   12614:	b	124e0 <__assert_fail@plt+0x16ec>
   12618:	ldr	r2, [pc, #108]	; 1268c <__assert_fail@plt+0x1898>
   1261c:	ldr	r3, [r5, #4]
   12620:	ldr	r1, [r2]
   12624:	sub	r0, r1, #1
   12628:	add	r0, r0, r3
   1262c:	bl	17220 <__assert_fail@plt+0x642c>
   12630:	mov	r1, r0
   12634:	ldr	r0, [pc, #88]	; 12694 <__assert_fail@plt+0x18a0>
   12638:	bl	10bc0 <printf@plt>
   1263c:	ldr	r4, [r5]
   12640:	cmp	r4, #0
   12644:	bne	12414 <__assert_fail@plt+0x1620>
   12648:	add	sp, sp, #44	; 0x2c
   1264c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12650:	andeq	r8, r2, ip, lsl #3
   12654:	andeq	r8, r2, r8, asr r1
   12658:	andeq	r8, r2, r0, ror r1
   1265c:	andeq	r8, r2, r8, ror #2
   12660:	andeq	r8, r2, r8, ror r1
   12664:	andeq	r8, r2, r0, lsl #3
   12668:	ldrdeq	r7, [r1], -r4
   1266c:	andeq	r7, r1, r8, lsl sl
   12670:	andeq	r8, r2, r4, lsr #3
   12674:	muleq	r2, r0, r1
   12678:	andeq	r8, r2, r4, lsl r1
   1267c:	strdeq	r7, [r1], -r0
   12680:	ldrdeq	r7, [r1], -ip
   12684:	andeq	r7, r1, ip, lsl #20
   12688:	andeq	r7, r1, r4, lsl #20
   1268c:	andeq	r8, r2, r8, lsr #3
   12690:	ldrdeq	r7, [r1], -r4
   12694:	andeq	r7, r1, r4, ror #19
   12698:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1269c:	sub	sp, sp, #36	; 0x24
   126a0:	add	r1, sp, #28
   126a4:	mov	sl, r0
   126a8:	bl	12320 <__assert_fail@plt+0x152c>
   126ac:	subs	r3, r0, #0
   126b0:	str	r3, [sp, #12]
   126b4:	beq	12850 <__assert_fail@plt+0x1a5c>
   126b8:	ldr	r4, [pc, #580]	; 12904 <__assert_fail@plt+0x1b10>
   126bc:	ldr	r1, [sl, #12]
   126c0:	ldr	r3, [r4]
   126c4:	cmp	r1, r3
   126c8:	bgt	12858 <__assert_fail@plt+0x1a64>
   126cc:	ldr	r3, [sl]
   126d0:	cmp	r3, #0
   126d4:	beq	128ec <__assert_fail@plt+0x1af8>
   126d8:	ldr	r2, [pc, #552]	; 12908 <__assert_fail@plt+0x1b14>
   126dc:	mov	r1, #0
   126e0:	mov	r0, r1
   126e4:	ldr	r1, [r2]
   126e8:	mov	r2, r0
   126ec:	ldr	r0, [r3, #16]
   126f0:	cmp	r0, #1
   126f4:	strne	r3, [r1, r2, lsl #2]
   126f8:	ldr	r3, [r3, #8]
   126fc:	addne	r2, r2, #1
   12700:	cmp	r3, #0
   12704:	bne	126ec <__assert_fail@plt+0x18f8>
   12708:	ldr	r4, [sp, #28]
   1270c:	mov	r0, r2
   12710:	mov	r1, r4
   12714:	mov	r5, r2
   12718:	str	r2, [sp, #8]
   1271c:	bl	1742c <__assert_fail@plt+0x6638>
   12720:	mov	r1, r4
   12724:	str	r0, [sp]
   12728:	mov	r0, r5
   1272c:	bl	1764c <__assert_fail@plt+0x6858>
   12730:	ldr	r3, [sl]
   12734:	ldr	r3, [r3, #48]	; 0x30
   12738:	cmp	r1, #0
   1273c:	ldrne	r2, [sp]
   12740:	addne	r2, r2, #1
   12744:	strne	r2, [sp]
   12748:	cmp	r3, #0
   1274c:	beq	12770 <__assert_fail@plt+0x197c>
   12750:	ldr	r3, [pc, #436]	; 1290c <__assert_fail@plt+0x1b18>
   12754:	ldr	r3, [r3]
   12758:	cmp	r3, #0
   1275c:	bne	12894 <__assert_fail@plt+0x1aa0>
   12760:	ldr	r3, [pc, #424]	; 12910 <__assert_fail@plt+0x1b1c>
   12764:	ldr	r3, [r3]
   12768:	cmp	r3, #0
   1276c:	bne	12894 <__assert_fail@plt+0x1aa0>
   12770:	ldr	r3, [sp]
   12774:	cmp	r3, #0
   12778:	ble	12850 <__assert_fail@plt+0x1a5c>
   1277c:	lsl	r3, r3, #2
   12780:	str	r3, [sp, #16]
   12784:	mov	r3, #0
   12788:	str	r3, [sp, #20]
   1278c:	ldr	r3, [sp, #12]
   12790:	ldr	r4, [pc, #380]	; 12914 <__assert_fail@plt+0x1b20>
   12794:	ldr	r2, [pc, #364]	; 12908 <__assert_fail@plt+0x1b14>
   12798:	add	r6, r3, #1
   1279c:	mov	r5, #32
   127a0:	str	r2, [sp, #4]
   127a4:	ldr	r3, [sp, #20]
   127a8:	mov	r8, #0
   127ac:	mov	r7, r3
   127b0:	lsl	r9, r3, #2
   127b4:	ldr	r3, [sp, #4]
   127b8:	ldr	r2, [sp]
   127bc:	ldr	r1, [sl, #32]
   127c0:	ldr	r3, [r3]
   127c4:	add	r7, r7, r2
   127c8:	ldr	r2, [sl, #20]
   127cc:	ldr	r0, [r3, r9]
   127d0:	bl	121d8 <__assert_fail@plt+0x13e4>
   127d4:	ldr	r3, [sp, #8]
   127d8:	cmp	r7, r3
   127dc:	bge	128bc <__assert_fail@plt+0x1ac8>
   127e0:	ldr	r3, [sp, #28]
   127e4:	add	r8, r8, #1
   127e8:	cmp	r8, r3
   127ec:	beq	128bc <__assert_fail@plt+0x1ac8>
   127f0:	ldr	r3, [sp, #12]
   127f4:	add	fp, r0, #1
   127f8:	cmp	r3, r0
   127fc:	ble	12818 <__assert_fail@plt+0x1a24>
   12800:	add	fp, fp, #1
   12804:	ldr	r1, [r4]
   12808:	mov	r0, r5
   1280c:	bl	10d58 <putc@plt>
   12810:	cmp	fp, r6
   12814:	bne	12800 <__assert_fail@plt+0x1a0c>
   12818:	ldr	r3, [sp, #16]
   1281c:	add	r9, r9, r3
   12820:	b	127b4 <__assert_fail@plt+0x19c0>
   12824:	ldr	r3, [pc, #236]	; 12918 <__assert_fail@plt+0x1b24>
   12828:	ldr	r4, [r3]
   1282c:	bl	10cf8 <__errno_location@plt>
   12830:	ldr	r0, [r0]
   12834:	bl	10ca4 <strerror@plt>
   12838:	ldr	r1, [pc, #220]	; 1291c <__assert_fail@plt+0x1b28>
   1283c:	mov	r2, r0
   12840:	mov	r0, r4
   12844:	bl	10cec <fprintf@plt>
   12848:	mov	r0, sl
   1284c:	bl	122c8 <__assert_fail@plt+0x14d4>
   12850:	add	sp, sp, #36	; 0x24
   12854:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12858:	ldr	r3, [pc, #168]	; 12908 <__assert_fail@plt+0x1b14>
   1285c:	lsl	r1, r1, #2
   12860:	str	r3, [sp, #4]
   12864:	ldr	r0, [r3]
   12868:	bl	16ebc <__assert_fail@plt+0x60c8>
   1286c:	cmp	r0, #0
   12870:	beq	12824 <__assert_fail@plt+0x1a30>
   12874:	ldr	r3, [sl, #12]
   12878:	ldr	r2, [sp, #4]
   1287c:	str	r3, [r4]
   12880:	ldr	r3, [sl]
   12884:	str	r0, [r2]
   12888:	cmp	r3, #0
   1288c:	bne	126d8 <__assert_fail@plt+0x18e4>
   12890:	b	128ec <__assert_fail@plt+0x1af8>
   12894:	ldr	r2, [pc, #132]	; 12920 <__assert_fail@plt+0x1b2c>
   12898:	ldr	r3, [sl, #4]
   1289c:	ldr	r1, [r2]
   128a0:	sub	r0, r1, #1
   128a4:	add	r0, r0, r3
   128a8:	bl	17220 <__assert_fail@plt+0x642c>
   128ac:	mov	r1, r0
   128b0:	ldr	r0, [pc, #108]	; 12924 <__assert_fail@plt+0x1b30>
   128b4:	bl	10bc0 <printf@plt>
   128b8:	b	12770 <__assert_fail@plt+0x197c>
   128bc:	ldr	r3, [sp, #20]
   128c0:	ldr	r1, [r4]
   128c4:	add	r3, r3, #1
   128c8:	mov	r0, #10
   128cc:	mov	r7, r3
   128d0:	str	r3, [sp, #20]
   128d4:	bl	10d58 <putc@plt>
   128d8:	ldr	r2, [sp]
   128dc:	cmp	r7, r2
   128e0:	bne	127a4 <__assert_fail@plt+0x19b0>
   128e4:	add	sp, sp, #36	; 0x24
   128e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128ec:	ldr	r2, [r3, #48]	; 0x30
   128f0:	cmp	r2, #0
   128f4:	beq	12850 <__assert_fail@plt+0x1a5c>
   128f8:	str	r3, [sp, #8]
   128fc:	str	r3, [sp]
   12900:	b	12750 <__assert_fail@plt+0x195c>
   12904:	andeq	r8, r2, r0, lsl #2
   12908:	andeq	r8, r2, ip, lsr #2
   1290c:	andeq	r8, r2, ip, lsl #3
   12910:	andeq	r8, r2, r8, asr r1
   12914:	andeq	r8, r2, r4, lsl r1
   12918:	andeq	r8, r2, r0, lsl r1
   1291c:	andeq	r7, r1, r4, lsr #20
   12920:	andeq	r8, r2, r8, lsr #3
   12924:	andeq	r7, r1, r4, ror #19
   12928:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1292c:	sub	sp, sp, #12
   12930:	add	r1, sp, #4
   12934:	mov	r9, r0
   12938:	bl	12320 <__assert_fail@plt+0x152c>
   1293c:	subs	sl, r0, #0
   12940:	beq	129d8 <__assert_fail@plt+0x1be4>
   12944:	ldr	r4, [r9]
   12948:	ldr	r3, [r4, #48]	; 0x30
   1294c:	cmp	r3, #0
   12950:	bne	129e0 <__assert_fail@plt+0x1bec>
   12954:	ldr	r5, [pc, #244]	; 12a50 <__assert_fail@plt+0x1c5c>
   12958:	mov	r8, #0
   1295c:	add	r7, sl, #1
   12960:	mov	r6, #32
   12964:	ldr	r3, [r4, #16]
   12968:	cmp	r3, #1
   1296c:	beq	129c0 <__assert_fail@plt+0x1bcc>
   12970:	ldr	r3, [sp, #4]
   12974:	cmp	r3, r8
   12978:	addgt	r8, r8, #1
   1297c:	ble	12a3c <__assert_fail@plt+0x1c48>
   12980:	ldr	r2, [r9, #20]
   12984:	ldr	r1, [r9, #32]
   12988:	mov	r0, r4
   1298c:	bl	121d8 <__assert_fail@plt+0x13e4>
   12990:	ldr	r3, [sp, #4]
   12994:	cmp	r8, r3
   12998:	bge	129c0 <__assert_fail@plt+0x1bcc>
   1299c:	cmp	sl, r0
   129a0:	add	fp, r0, #1
   129a4:	ble	129c0 <__assert_fail@plt+0x1bcc>
   129a8:	add	fp, fp, #1
   129ac:	ldr	r1, [r5]
   129b0:	mov	r0, r6
   129b4:	bl	10d58 <putc@plt>
   129b8:	cmp	fp, r7
   129bc:	bne	129a8 <__assert_fail@plt+0x1bb4>
   129c0:	ldr	r4, [r4, #8]
   129c4:	cmp	r4, #0
   129c8:	bne	12964 <__assert_fail@plt+0x1b70>
   129cc:	ldr	r1, [r5]
   129d0:	mov	r0, #10
   129d4:	bl	10d58 <putc@plt>
   129d8:	add	sp, sp, #12
   129dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129e0:	ldr	r3, [pc, #108]	; 12a54 <__assert_fail@plt+0x1c60>
   129e4:	ldr	r3, [r3]
   129e8:	cmp	r3, #0
   129ec:	bne	12a00 <__assert_fail@plt+0x1c0c>
   129f0:	ldr	r3, [pc, #96]	; 12a58 <__assert_fail@plt+0x1c64>
   129f4:	ldr	r3, [r3]
   129f8:	cmp	r3, #0
   129fc:	beq	12954 <__assert_fail@plt+0x1b60>
   12a00:	ldr	r2, [pc, #84]	; 12a5c <__assert_fail@plt+0x1c68>
   12a04:	ldr	r3, [r9, #4]
   12a08:	ldr	r1, [r2]
   12a0c:	sub	r0, r1, #1
   12a10:	add	r0, r0, r3
   12a14:	bl	17220 <__assert_fail@plt+0x642c>
   12a18:	mov	r3, #0
   12a1c:	mov	r2, r0
   12a20:	ldr	r0, [pc, #56]	; 12a60 <__assert_fail@plt+0x1c6c>
   12a24:	bl	10bc0 <printf@plt>
   12a28:	ldr	r4, [r9]
   12a2c:	cmp	r4, #0
   12a30:	bne	12954 <__assert_fail@plt+0x1b60>
   12a34:	ldr	r5, [pc, #20]	; 12a50 <__assert_fail@plt+0x1c5c>
   12a38:	b	129cc <__assert_fail@plt+0x1bd8>
   12a3c:	ldr	r1, [r5]
   12a40:	mov	r0, #10
   12a44:	bl	10d58 <putc@plt>
   12a48:	mov	r8, #1
   12a4c:	b	12980 <__assert_fail@plt+0x1b8c>
   12a50:	andeq	r8, r2, r4, lsl r1
   12a54:	andeq	r8, r2, ip, lsl #3
   12a58:	andeq	r8, r2, r8, asr r1
   12a5c:	andeq	r8, r2, r8, lsr #3
   12a60:	andeq	r7, r1, r4, lsr sl
   12a64:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a68:	ldr	r3, [pc, #232]	; 12b58 <__assert_fail@plt+0x1d64>
   12a6c:	ldr	r4, [r0]
   12a70:	ldr	r7, [r3]
   12a74:	ldr	r3, [pc, #224]	; 12b5c <__assert_fail@plt+0x1d68>
   12a78:	cmp	r7, #0
   12a7c:	ldr	r3, [r3]
   12a80:	ldrne	r7, [r0, #32]
   12a84:	addne	r7, r7, #1
   12a88:	cmp	r3, #0
   12a8c:	ldrne	r3, [r0, #20]
   12a90:	addne	r3, r3, #1
   12a94:	addne	r7, r7, r3
   12a98:	ldr	r3, [pc, #192]	; 12b60 <__assert_fail@plt+0x1d6c>
   12a9c:	ldr	r3, [r3]
   12aa0:	cmp	r3, #0
   12aa4:	addne	r7, r7, #1
   12aa8:	cmp	r4, #0
   12aac:	beq	12b44 <__assert_fail@plt+0x1d50>
   12ab0:	mov	r5, r0
   12ab4:	ldr	r6, [pc, #168]	; 12b64 <__assert_fail@plt+0x1d70>
   12ab8:	ldr	sl, [pc, #168]	; 12b68 <__assert_fail@plt+0x1d74>
   12abc:	mov	fp, #0
   12ac0:	mov	r8, #44	; 0x2c
   12ac4:	mov	r9, #32
   12ac8:	b	12af8 <__assert_fail@plt+0x1d04>
   12acc:	mov	r0, #10
   12ad0:	bl	10d58 <putc@plt>
   12ad4:	mov	fp, #0
   12ad8:	ldr	r2, [r5, #20]
   12adc:	ldr	r1, [r5, #32]
   12ae0:	mov	r0, r4
   12ae4:	bl	121d8 <__assert_fail@plt+0x13e4>
   12ae8:	add	fp, fp, r0
   12aec:	ldr	r4, [r4, #8]
   12af0:	cmp	r4, #0
   12af4:	beq	12b48 <__assert_fail@plt+0x1d54>
   12af8:	ldr	r2, [r4, #16]
   12afc:	cmp	r2, #1
   12b00:	beq	12aec <__assert_fail@plt+0x1cf8>
   12b04:	cmp	fp, #0
   12b08:	mov	r0, r8
   12b0c:	ble	12ad8 <__assert_fail@plt+0x1ce4>
   12b10:	ldr	r1, [r6]
   12b14:	bl	10d58 <putc@plt>
   12b18:	add	fp, fp, #2
   12b1c:	ldr	ip, [r4, #52]	; 0x34
   12b20:	ldr	r1, [sl]
   12b24:	add	r2, r7, fp
   12b28:	add	r2, r2, ip
   12b2c:	cmp	r2, r1
   12b30:	mov	r0, r9
   12b34:	ldr	r1, [r6]
   12b38:	bcs	12acc <__assert_fail@plt+0x1cd8>
   12b3c:	bl	10d58 <putc@plt>
   12b40:	b	12ad8 <__assert_fail@plt+0x1ce4>
   12b44:	ldr	r6, [pc, #24]	; 12b64 <__assert_fail@plt+0x1d70>
   12b48:	ldr	r1, [r6]
   12b4c:	mov	r0, #10
   12b50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b54:	b	10d58 <putc@plt>
   12b58:	andeq	r8, r2, r0, ror r1
   12b5c:	andeq	r8, r2, r8, asr r1
   12b60:	andeq	r8, r2, r0, lsl #3
   12b64:	andeq	r8, r2, r4, lsl r1
   12b68:	strdeq	r8, [r2], -r0
   12b6c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b70:	ldrb	r4, [r0]
   12b74:	cmp	r4, #0
   12b78:	beq	12bdc <__assert_fail@plt+0x1de8>
   12b7c:	mov	r5, r0
   12b80:	bl	10cbc <__ctype_b_loc@plt>
   12b84:	ldr	r7, [pc, #88]	; 12be4 <__assert_fail@plt+0x1df0>
   12b88:	ldr	r8, [pc, #88]	; 12be8 <__assert_fail@plt+0x1df4>
   12b8c:	mov	r6, #0
   12b90:	mov	r9, #63	; 0x3f
   12b94:	mov	sl, r0
   12b98:	ldr	r2, [sl]
   12b9c:	lsl	r3, r4, #1
   12ba0:	mov	r0, r4
   12ba4:	ldrh	r3, [r2, r3]
   12ba8:	tst	r3, #16384	; 0x4000
   12bac:	bne	12bbc <__assert_fail@plt+0x1dc8>
   12bb0:	ldr	r3, [r8]
   12bb4:	cmp	r3, #0
   12bb8:	movne	r0, r9
   12bbc:	ldr	r1, [r7]
   12bc0:	bl	10d58 <putc@plt>
   12bc4:	ldrb	r4, [r5, #1]!
   12bc8:	add	r6, r6, #1
   12bcc:	cmp	r4, #0
   12bd0:	bne	12b98 <__assert_fail@plt+0x1da4>
   12bd4:	mov	r0, r6
   12bd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bdc:	mov	r6, r4
   12be0:	b	12bd4 <__assert_fail@plt+0x1de0>
   12be4:	andeq	r8, r2, r4, lsl r1
   12be8:			; <UNDEFINED> instruction: 0x000281b4
   12bec:	ldr	r3, [pc, #28]	; 12c10 <__assert_fail@plt+0x1e1c>
   12bf0:	push	{r4, lr}
   12bf4:	mov	r2, #51	; 0x33
   12bf8:	mov	r1, #1
   12bfc:	ldr	r3, [r3]
   12c00:	ldr	r0, [pc, #12]	; 12c14 <__assert_fail@plt+0x1e20>
   12c04:	bl	10c50 <fwrite@plt>
   12c08:	mov	r0, #1
   12c0c:	pop	{r4, pc}
   12c10:	andeq	r8, r2, r0, lsl r1
   12c14:	andeq	r7, r1, r0, asr #20
   12c18:	add	r1, r1, #168	; 0xa8
   12c1c:	add	r0, r0, #168	; 0xa8
   12c20:	b	10b9c <strcmp@plt>
   12c24:	add	r3, r1, #168	; 0xa8
   12c28:	add	r1, r0, #168	; 0xa8
   12c2c:	mov	r0, r3
   12c30:	b	10b9c <strcmp@plt>
   12c34:	ldr	r3, [r0, #144]	; 0x90
   12c38:	ldr	r2, [r1, #144]	; 0x90
   12c3c:	cmp	r2, r3
   12c40:	bgt	12c68 <__assert_fail@plt+0x1e74>
   12c44:	beq	12c58 <__assert_fail@plt+0x1e64>
   12c48:	blt	12c70 <__assert_fail@plt+0x1e7c>
   12c4c:	add	r1, r1, #168	; 0xa8
   12c50:	add	r0, r0, #168	; 0xa8
   12c54:	b	10b9c <strcmp@plt>
   12c58:	ldr	r2, [r1, #148]	; 0x94
   12c5c:	ldr	r3, [r0, #148]	; 0x94
   12c60:	cmp	r2, r3
   12c64:	ble	12c48 <__assert_fail@plt+0x1e54>
   12c68:	mov	r0, #1
   12c6c:	bx	lr
   12c70:	mvn	r0, #0
   12c74:	bx	lr
   12c78:	push	{r4, lr}
   12c7c:	bl	12c34 <__assert_fail@plt+0x1e40>
   12c80:	rsb	r0, r0, #0
   12c84:	pop	{r4, pc}
   12c88:	ldr	r3, [r0, #136]	; 0x88
   12c8c:	ldr	r2, [r1, #136]	; 0x88
   12c90:	cmp	r2, r3
   12c94:	bgt	12cbc <__assert_fail@plt+0x1ec8>
   12c98:	beq	12cac <__assert_fail@plt+0x1eb8>
   12c9c:	blt	12cc4 <__assert_fail@plt+0x1ed0>
   12ca0:	add	r1, r1, #168	; 0xa8
   12ca4:	add	r0, r0, #168	; 0xa8
   12ca8:	b	10b9c <strcmp@plt>
   12cac:	ldr	r2, [r1, #140]	; 0x8c
   12cb0:	ldr	r3, [r0, #140]	; 0x8c
   12cb4:	cmp	r2, r3
   12cb8:	ble	12c9c <__assert_fail@plt+0x1ea8>
   12cbc:	mov	r0, #1
   12cc0:	bx	lr
   12cc4:	mvn	r0, #0
   12cc8:	bx	lr
   12ccc:	push	{r4, lr}
   12cd0:	bl	12c88 <__assert_fail@plt+0x1e94>
   12cd4:	rsb	r0, r0, #0
   12cd8:	pop	{r4, pc}
   12cdc:	ldr	r3, [r0, #152]	; 0x98
   12ce0:	ldr	r2, [r1, #152]	; 0x98
   12ce4:	cmp	r2, r3
   12ce8:	bgt	12d10 <__assert_fail@plt+0x1f1c>
   12cec:	beq	12d00 <__assert_fail@plt+0x1f0c>
   12cf0:	blt	12d18 <__assert_fail@plt+0x1f24>
   12cf4:	add	r1, r1, #168	; 0xa8
   12cf8:	add	r0, r0, #168	; 0xa8
   12cfc:	b	10b9c <strcmp@plt>
   12d00:	ldr	r2, [r1, #156]	; 0x9c
   12d04:	ldr	r3, [r0, #156]	; 0x9c
   12d08:	cmp	r2, r3
   12d0c:	ble	12cf0 <__assert_fail@plt+0x1efc>
   12d10:	mov	r0, #1
   12d14:	bx	lr
   12d18:	mvn	r0, #0
   12d1c:	bx	lr
   12d20:	push	{r4, lr}
   12d24:	bl	12cdc <__assert_fail@plt+0x1ee8>
   12d28:	rsb	r0, r0, #0
   12d2c:	pop	{r4, pc}
   12d30:	ldrd	r2, [r0, #112]	; 0x70
   12d34:	push	{r4, r5}
   12d38:	ldrd	r4, [r1, #112]	; 0x70
   12d3c:	cmp	r2, r4
   12d40:	sbcs	ip, r3, r5
   12d44:	blt	12d64 <__assert_fail@plt+0x1f70>
   12d48:	cmp	r4, r2
   12d4c:	sbcs	r3, r5, r3
   12d50:	blt	12d70 <__assert_fail@plt+0x1f7c>
   12d54:	add	r1, r1, #168	; 0xa8
   12d58:	add	r0, r0, #168	; 0xa8
   12d5c:	pop	{r4, r5}
   12d60:	b	10b9c <strcmp@plt>
   12d64:	mov	r0, #1
   12d68:	pop	{r4, r5}
   12d6c:	bx	lr
   12d70:	mvn	r0, #0
   12d74:	b	12d68 <__assert_fail@plt+0x1f74>
   12d78:	ldrd	r2, [r0, #112]	; 0x70
   12d7c:	push	{r4, r5, r6, lr}
   12d80:	ldrd	r4, [r1, #112]	; 0x70
   12d84:	cmp	r2, r4
   12d88:	sbcs	ip, r3, r5
   12d8c:	blt	12db8 <__assert_fail@plt+0x1fc4>
   12d90:	cmp	r4, r2
   12d94:	sbcs	r3, r5, r3
   12d98:	blt	12db0 <__assert_fail@plt+0x1fbc>
   12d9c:	add	r1, r1, #168	; 0xa8
   12da0:	add	r0, r0, #168	; 0xa8
   12da4:	bl	10b9c <strcmp@plt>
   12da8:	rsb	r0, r0, #0
   12dac:	pop	{r4, r5, r6, pc}
   12db0:	mov	r0, #1
   12db4:	pop	{r4, r5, r6, pc}
   12db8:	mvn	r0, #0
   12dbc:	pop	{r4, r5, r6, pc}
   12dc0:	and	r3, r0, #61440	; 0xf000
   12dc4:	cmp	r3, #32768	; 0x8000
   12dc8:	moveq	r3, #45	; 0x2d
   12dcc:	beq	12e18 <__assert_fail@plt+0x2024>
   12dd0:	cmp	r3, #16384	; 0x4000
   12dd4:	moveq	r3, #100	; 0x64
   12dd8:	beq	12e18 <__assert_fail@plt+0x2024>
   12ddc:	cmp	r3, #24576	; 0x6000
   12de0:	moveq	r3, #98	; 0x62
   12de4:	beq	12e18 <__assert_fail@plt+0x2024>
   12de8:	cmp	r3, #8192	; 0x2000
   12dec:	moveq	r3, #99	; 0x63
   12df0:	beq	12e18 <__assert_fail@plt+0x2024>
   12df4:	cmp	r3, #40960	; 0xa000
   12df8:	moveq	r3, #108	; 0x6c
   12dfc:	beq	12e18 <__assert_fail@plt+0x2024>
   12e00:	cmp	r3, #4096	; 0x1000
   12e04:	moveq	r3, #112	; 0x70
   12e08:	beq	12e18 <__assert_fail@plt+0x2024>
   12e0c:	cmp	r3, #49152	; 0xc000
   12e10:	moveq	r3, #115	; 0x73
   12e14:	movne	r3, #63	; 0x3f
   12e18:	tst	r0, #256	; 0x100
   12e1c:	movne	ip, #114	; 0x72
   12e20:	moveq	ip, #45	; 0x2d
   12e24:	tst	r0, #128	; 0x80
   12e28:	movne	r2, #119	; 0x77
   12e2c:	moveq	r2, #45	; 0x2d
   12e30:	tst	r0, #2048	; 0x800
   12e34:	strb	r3, [r1]
   12e38:	strb	ip, [r1, #1]
   12e3c:	strb	r2, [r1, #2]
   12e40:	beq	12ed8 <__assert_fail@plt+0x20e4>
   12e44:	tst	r0, #64	; 0x40
   12e48:	movne	ip, #115	; 0x73
   12e4c:	moveq	ip, #83	; 0x53
   12e50:	tst	r0, #32
   12e54:	movne	r2, #114	; 0x72
   12e58:	moveq	r2, #45	; 0x2d
   12e5c:	tst	r0, #16
   12e60:	movne	r3, #119	; 0x77
   12e64:	moveq	r3, #45	; 0x2d
   12e68:	tst	r0, #1024	; 0x400
   12e6c:	strb	ip, [r1, #3]
   12e70:	strb	r2, [r1, #4]
   12e74:	strb	r3, [r1, #5]
   12e78:	beq	12ef8 <__assert_fail@plt+0x2104>
   12e7c:	tst	r0, #8
   12e80:	movne	ip, #115	; 0x73
   12e84:	moveq	ip, #83	; 0x53
   12e88:	tst	r0, #4
   12e8c:	movne	r2, #114	; 0x72
   12e90:	moveq	r2, #45	; 0x2d
   12e94:	tst	r0, #2
   12e98:	movne	r3, #119	; 0x77
   12e9c:	moveq	r3, #45	; 0x2d
   12ea0:	tst	r0, #512	; 0x200
   12ea4:	strb	ip, [r1, #6]
   12ea8:	strb	r2, [r1, #7]
   12eac:	strb	r3, [r1, #8]
   12eb0:	beq	12ee8 <__assert_fail@plt+0x20f4>
   12eb4:	tst	r0, #1
   12eb8:	movne	r0, #116	; 0x74
   12ebc:	moveq	r0, #84	; 0x54
   12ec0:	mov	r2, #32
   12ec4:	mov	r3, #0
   12ec8:	strb	r0, [r1, #9]
   12ecc:	strb	r2, [r1, #10]
   12ed0:	strb	r3, [r1, #11]
   12ed4:	bx	lr
   12ed8:	tst	r0, #64	; 0x40
   12edc:	movne	ip, #120	; 0x78
   12ee0:	moveq	ip, #45	; 0x2d
   12ee4:	b	12e50 <__assert_fail@plt+0x205c>
   12ee8:	tst	r0, #1
   12eec:	movne	r0, #120	; 0x78
   12ef0:	moveq	r0, #45	; 0x2d
   12ef4:	b	12ec0 <__assert_fail@plt+0x20cc>
   12ef8:	tst	r0, #8
   12efc:	movne	ip, #120	; 0x78
   12f00:	moveq	ip, #45	; 0x2d
   12f04:	b	12e88 <__assert_fail@plt+0x2094>
   12f08:	ldr	r0, [r0, #16]
   12f0c:	b	12dc0 <__assert_fail@plt+0x1fcc>
   12f10:	push	{r4, r5, lr}
   12f14:	sub	sp, sp, #12
   12f18:	mov	r5, r0
   12f1c:	bl	10cf8 <__errno_location@plt>
   12f20:	mov	r2, #0
   12f24:	mov	r4, r0
   12f28:	ldr	r3, [r0]
   12f2c:	str	r2, [r4]
   12f30:	mov	r0, r5
   12f34:	str	r3, [sp]
   12f38:	str	r3, [sp, #4]
   12f3c:	bl	10be4 <free@plt>
   12f40:	ldr	r3, [r4]
   12f44:	add	r2, sp, #8
   12f48:	cmp	r3, #0
   12f4c:	moveq	r3, #4
   12f50:	movne	r3, #0
   12f54:	add	r3, r2, r3
   12f58:	ldr	r3, [r3, #-8]
   12f5c:	str	r3, [r4]
   12f60:	add	sp, sp, #12
   12f64:	pop	{r4, r5, pc}
   12f68:	ldrd	r2, [r1, #8]
   12f6c:	push	{r4, r5}
   12f70:	ldrd	r4, [r0, #8]
   12f74:	cmp	r5, r3
   12f78:	cmpeq	r4, r2
   12f7c:	movne	r0, #0
   12f80:	beq	12f8c <__assert_fail@plt+0x2198>
   12f84:	pop	{r4, r5}
   12f88:	bx	lr
   12f8c:	ldrd	r4, [r0]
   12f90:	ldrd	r2, [r1]
   12f94:	cmp	r5, r3
   12f98:	cmpeq	r4, r2
   12f9c:	moveq	r0, #1
   12fa0:	movne	r0, #0
   12fa4:	pop	{r4, r5}
   12fa8:	bx	lr
   12fac:	push	{r4, lr}
   12fb0:	mov	r2, r1
   12fb4:	mov	r3, #0
   12fb8:	ldrd	r0, [r0, #8]
   12fbc:	bl	17740 <__assert_fail@plt+0x694c>
   12fc0:	mov	r0, r2
   12fc4:	pop	{r4, pc}
   12fc8:	push	{r4, lr}
   12fcc:	mov	r2, r1
   12fd0:	mov	r3, #0
   12fd4:	ldrd	r0, [r0]
   12fd8:	bl	17740 <__assert_fail@plt+0x694c>
   12fdc:	mov	r0, r2
   12fe0:	pop	{r4, pc}
   12fe4:	push	{r4, r5}
   12fe8:	ldrd	r2, [r1]
   12fec:	ldrd	r4, [r0]
   12ff0:	cmp	r5, r3
   12ff4:	cmpeq	r4, r2
   12ff8:	moveq	r0, #1
   12ffc:	movne	r0, #0
   13000:	pop	{r4, r5}
   13004:	bx	lr
   13008:	ldr	r2, [r0]
   1300c:	ldr	r3, [r1]
   13010:	ldrd	r0, [r2, #160]	; 0xa0
   13014:	ldrd	r2, [r3, #160]	; 0xa0
   13018:	cmp	r1, r3
   1301c:	cmpeq	r0, r2
   13020:	movhi	r0, #1
   13024:	movls	r0, #0
   13028:	movcc	r3, #1
   1302c:	movcs	r3, #0
   13030:	sub	r0, r0, r3
   13034:	bx	lr
   13038:	ldr	r3, [r0, #40]	; 0x28
   1303c:	push	{r4, r5, r6, r7, r8, lr}
   13040:	cmp	r3, r2
   13044:	mov	r6, r0
   13048:	mov	r5, r2
   1304c:	mov	r4, r1
   13050:	ldr	r7, [r0, #44]	; 0x2c
   13054:	bcc	130cc <__assert_fail@plt+0x22d8>
   13058:	ldr	r0, [r0, #8]
   1305c:	cmp	r4, #0
   13060:	movne	r2, r0
   13064:	beq	13078 <__assert_fail@plt+0x2284>
   13068:	str	r4, [r2], #4
   1306c:	ldr	r4, [r4, #8]
   13070:	cmp	r4, #0
   13074:	bne	13068 <__assert_fail@plt+0x2274>
   13078:	mov	r3, r7
   1307c:	mov	r2, #4
   13080:	mov	r1, r5
   13084:	bl	10d88 <qsort@plt>
   13088:	ldr	lr, [r6, #8]
   1308c:	subs	r3, r5, #1
   13090:	ldr	r0, [lr]
   13094:	beq	13110 <__assert_fail@plt+0x231c>
   13098:	mov	r2, lr
   1309c:	mov	ip, r0
   130a0:	b	130a8 <__assert_fail@plt+0x22b4>
   130a4:	ldr	ip, [r2, #4]!
   130a8:	ldr	r1, [r2, #4]
   130ac:	subs	r3, r3, #1
   130b0:	str	r1, [ip, #8]
   130b4:	bne	130a4 <__assert_fail@plt+0x22b0>
   130b8:	add	r5, lr, r5, lsl #2
   130bc:	ldr	r2, [r5, #-4]
   130c0:	mov	r3, #0
   130c4:	str	r3, [r2, #8]
   130c8:	pop	{r4, r5, r6, r7, r8, pc}
   130cc:	add	r1, r2, #40	; 0x28
   130d0:	cmn	r1, #-1073741823	; 0xc0000001
   130d4:	str	r1, [r0, #40]	; 0x28
   130d8:	bhi	130f4 <__assert_fail@plt+0x2300>
   130dc:	lsl	r1, r1, #2
   130e0:	ldr	r0, [r0, #8]
   130e4:	bl	16ebc <__assert_fail@plt+0x60c8>
   130e8:	cmp	r0, #0
   130ec:	strne	r0, [r6, #8]
   130f0:	bne	1305c <__assert_fail@plt+0x2268>
   130f4:	ldr	r0, [r6, #8]
   130f8:	bl	12f10 <__assert_fail@plt+0x211c>
   130fc:	mov	r3, #0
   13100:	mov	r0, r4
   13104:	str	r3, [r6, #8]
   13108:	str	r3, [r6, #40]	; 0x28
   1310c:	pop	{r4, r5, r6, r7, r8, pc}
   13110:	mov	r2, r0
   13114:	b	130c0 <__assert_fail@plt+0x22cc>
   13118:	add	r3, r2, #176	; 0xb0
   1311c:	push	{r4, r5, r6, r7, r8, lr}
   13120:	mov	r6, r0
   13124:	bic	r0, r3, #7
   13128:	mov	r5, r2
   1312c:	mov	r7, r1
   13130:	bl	16e90 <__assert_fail@plt+0x609c>
   13134:	subs	r4, r0, #0
   13138:	beq	13184 <__assert_fail@plt+0x2390>
   1313c:	mov	r1, r7
   13140:	mov	r2, r5
   13144:	add	r0, r4, #168	; 0xa8
   13148:	bl	10bf0 <memcpy@plt>
   1314c:	add	r0, r4, r5
   13150:	ldr	r1, [r6, #24]
   13154:	mov	r3, #0
   13158:	mov	r2, #3
   1315c:	strb	r3, [r0, #168]	; 0xa8
   13160:	str	r3, [r4, #32]
   13164:	str	r3, [r4, #12]
   13168:	strh	r3, [r4, #58]	; 0x3a
   1316c:	str	r3, [r4, #16]
   13170:	str	r3, [r4, #20]
   13174:	str	r5, [r4, #52]	; 0x34
   13178:	str	r6, [r4, #44]	; 0x2c
   1317c:	str	r1, [r4, #28]
   13180:	strh	r2, [r4, #60]	; 0x3c
   13184:	mov	r0, r4
   13188:	pop	{r4, r5, r6, r7, r8, pc}
   1318c:	push	{r4, r5, r6, lr}
   13190:	subs	r4, r0, #0
   13194:	popeq	{r4, r5, r6, pc}
   13198:	ldr	r3, [r4, #12]
   1319c:	ldr	r5, [r4, #8]
   131a0:	subs	r0, r3, #0
   131a4:	beq	131ac <__assert_fail@plt+0x23b8>
   131a8:	bl	10ddc <closedir@plt>
   131ac:	mov	r0, r4
   131b0:	bl	12f10 <__assert_fail@plt+0x211c>
   131b4:	subs	r4, r5, #0
   131b8:	bne	13198 <__assert_fail@plt+0x23a4>
   131bc:	pop	{r4, r5, r6, pc}
   131c0:	push	{r4, lr}
   131c4:	mov	r4, r0
   131c8:	b	131d8 <__assert_fail@plt+0x23e4>
   131cc:	bl	16ca0 <__assert_fail@plt+0x5eac>
   131d0:	cmp	r0, #0
   131d4:	bge	131f0 <__assert_fail@plt+0x23fc>
   131d8:	mov	r0, r4
   131dc:	bl	16c54 <__assert_fail@plt+0x5e60>
   131e0:	cmp	r0, #0
   131e4:	mov	r0, r4
   131e8:	beq	131cc <__assert_fail@plt+0x23d8>
   131ec:	pop	{r4, pc}
   131f0:	bl	10dc4 <close@plt>
   131f4:	b	131d8 <__assert_fail@plt+0x23e4>
   131f8:	push	{r4, r5, r6, r7, lr}
   131fc:	sub	sp, sp, #100	; 0x64
   13200:	ldr	r4, [r0, #44]	; 0x2c
   13204:	ldr	r3, [r4, #48]	; 0x30
   13208:	tst	r3, #512	; 0x200
   1320c:	beq	13280 <__assert_fail@plt+0x248c>
   13210:	ldr	r6, [r4, #52]	; 0x34
   13214:	mov	r7, r1
   13218:	cmp	r6, #0
   1321c:	mov	r5, r0
   13220:	beq	1324c <__assert_fail@plt+0x2458>
   13224:	ldrd	r2, [r5, #64]	; 0x40
   13228:	add	r1, sp, #96	; 0x60
   1322c:	mov	r0, r6
   13230:	strd	r2, [r1, #-88]!	; 0xffffffa8
   13234:	bl	16250 <__assert_fail@plt+0x545c>
   13238:	cmp	r0, #0
   1323c:	beq	13278 <__assert_fail@plt+0x2484>
   13240:	ldr	r0, [r0, #8]
   13244:	add	sp, sp, #100	; 0x64
   13248:	pop	{r4, r5, r6, r7, pc}
   1324c:	ldr	r3, [pc, #168]	; 132fc <__assert_fail@plt+0x2508>
   13250:	mov	r1, r6
   13254:	str	r3, [sp]
   13258:	ldr	r2, [pc, #160]	; 13300 <__assert_fail@plt+0x250c>
   1325c:	ldr	r3, [pc, #160]	; 13304 <__assert_fail@plt+0x2510>
   13260:	mov	r0, #13
   13264:	bl	164f0 <__assert_fail@plt+0x56fc>
   13268:	cmp	r0, #0
   1326c:	mov	r6, r0
   13270:	str	r0, [r4, #52]	; 0x34
   13274:	bne	13224 <__assert_fail@plt+0x2430>
   13278:	cmp	r7, #0
   1327c:	bge	1328c <__assert_fail@plt+0x2498>
   13280:	mov	r0, #0
   13284:	add	sp, sp, #100	; 0x64
   13288:	pop	{r4, r5, r6, r7, pc}
   1328c:	mov	r0, r7
   13290:	add	r1, sp, #8
   13294:	bl	10b78 <fstatfs64@plt>
   13298:	cmp	r0, #0
   1329c:	bne	13280 <__assert_fail@plt+0x248c>
   132a0:	cmp	r6, #0
   132a4:	beq	132f0 <__assert_fail@plt+0x24fc>
   132a8:	mov	r0, #16
   132ac:	bl	16e90 <__assert_fail@plt+0x609c>
   132b0:	subs	r4, r0, #0
   132b4:	beq	132f0 <__assert_fail@plt+0x24fc>
   132b8:	ldrd	r2, [r5, #64]	; 0x40
   132bc:	ldr	r1, [sp, #8]
   132c0:	mov	r0, r6
   132c4:	str	r1, [r4, #8]
   132c8:	strd	r2, [r4]
   132cc:	mov	r1, r4
   132d0:	bl	16ae4 <__assert_fail@plt+0x5cf0>
   132d4:	cmp	r0, #0
   132d8:	beq	132e8 <__assert_fail@plt+0x24f4>
   132dc:	cmp	r4, r0
   132e0:	beq	132f0 <__assert_fail@plt+0x24fc>
   132e4:	bl	10db8 <abort@plt>
   132e8:	mov	r0, r4
   132ec:	bl	12f10 <__assert_fail@plt+0x211c>
   132f0:	ldr	r0, [sp, #8]
   132f4:	add	sp, sp, #100	; 0x64
   132f8:	pop	{r4, r5, r6, r7, pc}
   132fc:	andeq	r2, r1, r0, lsl pc
   13300:	andeq	r2, r1, r8, asr #31
   13304:	andeq	r2, r1, r4, ror #31
   13308:	push	{r4, r5, r6, lr}
   1330c:	mov	r5, r1
   13310:	ldr	r1, [r0, #32]
   13314:	cmn	r1, #100	; 0x64
   13318:	sub	r3, r1, r5
   1331c:	clz	r3, r3
   13320:	lsr	r3, r3, #5
   13324:	moveq	r3, #0
   13328:	cmp	r3, #0
   1332c:	bne	13384 <__assert_fail@plt+0x2590>
   13330:	cmp	r2, #0
   13334:	mov	r4, r0
   13338:	bne	1336c <__assert_fail@plt+0x2578>
   1333c:	ldr	r3, [r0, #48]	; 0x30
   13340:	lsr	r3, r3, #2
   13344:	eor	r3, r3, #1
   13348:	cmp	r1, #0
   1334c:	movlt	r3, #0
   13350:	andge	r3, r3, #1
   13354:	cmp	r3, #0
   13358:	beq	13364 <__assert_fail@plt+0x2570>
   1335c:	mov	r0, r1
   13360:	bl	10dc4 <close@plt>
   13364:	str	r5, [r4, #32]
   13368:	pop	{r4, r5, r6, pc}
   1336c:	add	r0, r0, #60	; 0x3c
   13370:	bl	16c5c <__assert_fail@plt+0x5e68>
   13374:	cmp	r0, #0
   13378:	bge	13360 <__assert_fail@plt+0x256c>
   1337c:	str	r5, [r4, #32]
   13380:	pop	{r4, r5, r6, pc}
   13384:	bl	10db8 <abort@plt>
   13388:	ldr	r3, [r0, #48]	; 0x30
   1338c:	push	{r4, r5, r6, lr}
   13390:	ands	r5, r3, #4
   13394:	mov	r4, r0
   13398:	movne	r5, #0
   1339c:	bne	133b8 <__assert_fail@plt+0x25c4>
   133a0:	tst	r3, #512	; 0x200
   133a4:	bne	133c8 <__assert_fail@plt+0x25d4>
   133a8:	ldr	r0, [r0, #28]
   133ac:	bl	10d7c <fchdir@plt>
   133b0:	adds	r5, r0, #0
   133b4:	movne	r5, #1
   133b8:	add	r0, r4, #60	; 0x3c
   133bc:	bl	131c0 <__assert_fail@plt+0x23cc>
   133c0:	mov	r0, r5
   133c4:	pop	{r4, r5, r6, pc}
   133c8:	mov	r2, #1
   133cc:	mvn	r1, #99	; 0x63
   133d0:	bl	13308 <__assert_fail@plt+0x2514>
   133d4:	b	133b8 <__assert_fail@plt+0x25c4>
   133d8:	push	{r4, r5, r6, lr}
   133dc:	mov	r5, r0
   133e0:	ldr	r0, [r1]
   133e4:	add	r3, r0, #256	; 0x100
   133e8:	add	r2, r3, r2
   133ec:	cmp	r0, r2
   133f0:	bhi	1341c <__assert_fail@plt+0x2628>
   133f4:	str	r2, [r1]
   133f8:	ldr	r0, [r5]
   133fc:	mov	r1, r2
   13400:	bl	16ebc <__assert_fail@plt+0x60c8>
   13404:	subs	r4, r0, #0
   13408:	movne	r3, #1
   1340c:	strne	r4, [r5]
   13410:	beq	13444 <__assert_fail@plt+0x2650>
   13414:	mov	r0, r3
   13418:	pop	{r4, r5, r6, pc}
   1341c:	ldr	r0, [r5]
   13420:	mov	r4, #0
   13424:	bl	12f10 <__assert_fail@plt+0x211c>
   13428:	str	r4, [r5]
   1342c:	bl	10cf8 <__errno_location@plt>
   13430:	mov	r2, #36	; 0x24
   13434:	mov	r3, r4
   13438:	str	r2, [r0]
   1343c:	mov	r0, r3
   13440:	pop	{r4, r5, r6, pc}
   13444:	ldr	r0, [r5]
   13448:	bl	12f10 <__assert_fail@plt+0x211c>
   1344c:	str	r4, [r5]
   13450:	mov	r3, r4
   13454:	b	13414 <__assert_fail@plt+0x2620>
   13458:	push	{r4, r5, r6, lr}
   1345c:	mov	r4, r2
   13460:	ldr	r2, [r2, #48]	; 0x30
   13464:	sub	sp, sp, #8
   13468:	cmp	r2, #0
   1346c:	add	r5, r4, #64	; 0x40
   13470:	bne	134c8 <__assert_fail@plt+0x26d4>
   13474:	tst	r1, #1
   13478:	beq	134c8 <__assert_fail@plt+0x26d4>
   1347c:	mov	r2, r5
   13480:	ldr	r1, [r4, #24]
   13484:	mov	r0, #3
   13488:	bl	10d94 <__xstat64@plt>
   1348c:	cmp	r0, #0
   13490:	beq	13504 <__assert_fail@plt+0x2710>
   13494:	bl	10cf8 <__errno_location@plt>
   13498:	ldr	r3, [r0]
   1349c:	mov	r6, r0
   134a0:	cmp	r3, #2
   134a4:	beq	1357c <__assert_fail@plt+0x2788>
   134a8:	str	r3, [r4, #32]
   134ac:	mov	r0, r5
   134b0:	mov	r2, #104	; 0x68
   134b4:	mov	r1, #0
   134b8:	bl	10d10 <memset@plt>
   134bc:	mov	r0, #10
   134c0:	add	sp, sp, #8
   134c4:	pop	{r4, r5, r6, pc}
   134c8:	lsl	r1, r1, #30
   134cc:	orrs	r3, r3, r1, lsr #31
   134d0:	bne	1347c <__assert_fail@plt+0x2688>
   134d4:	mov	r3, #256	; 0x100
   134d8:	ldr	r2, [r4, #24]
   134dc:	mov	r1, r0
   134e0:	str	r3, [sp]
   134e4:	mov	r0, #3
   134e8:	mov	r3, r5
   134ec:	bl	10c2c <__fxstatat64@plt>
   134f0:	cmp	r0, #0
   134f4:	beq	13504 <__assert_fail@plt+0x2710>
   134f8:	bl	10cf8 <__errno_location@plt>
   134fc:	ldr	r3, [r0]
   13500:	b	134a8 <__assert_fail@plt+0x26b4>
   13504:	ldr	r0, [r4, #80]	; 0x50
   13508:	and	r0, r0, #61440	; 0xf000
   1350c:	cmp	r0, #16384	; 0x4000
   13510:	beq	13534 <__assert_fail@plt+0x2740>
   13514:	cmp	r0, #40960	; 0xa000
   13518:	moveq	r0, #12
   1351c:	beq	134c0 <__assert_fail@plt+0x26cc>
   13520:	cmp	r0, #32768	; 0x8000
   13524:	movne	r0, #3
   13528:	moveq	r0, #8
   1352c:	add	sp, sp, #8
   13530:	pop	{r4, r5, r6, pc}
   13534:	ldrb	r3, [r4, #168]	; 0xa8
   13538:	cmp	r3, #46	; 0x2e
   1353c:	beq	13548 <__assert_fail@plt+0x2754>
   13540:	mov	r0, #1
   13544:	b	134c0 <__assert_fail@plt+0x26cc>
   13548:	ldrb	r3, [r4, #169]	; 0xa9
   1354c:	cmp	r3, #0
   13550:	beq	13568 <__assert_fail@plt+0x2774>
   13554:	ldr	r3, [r4, #168]	; 0xa8
   13558:	bic	r3, r3, #-16777216	; 0xff000000
   1355c:	bic	r3, r3, #255	; 0xff
   13560:	cmp	r3, #11776	; 0x2e00
   13564:	bne	13540 <__assert_fail@plt+0x274c>
   13568:	ldr	r0, [r4, #48]	; 0x30
   1356c:	cmp	r0, #0
   13570:	movne	r0, #5
   13574:	moveq	r0, #1
   13578:	b	134c0 <__assert_fail@plt+0x26cc>
   1357c:	mov	r2, r5
   13580:	ldr	r1, [r4, #24]
   13584:	mov	r0, #3
   13588:	bl	10dd0 <__lxstat64@plt>
   1358c:	cmp	r0, #0
   13590:	streq	r0, [r6]
   13594:	moveq	r0, #13
   13598:	beq	134c0 <__assert_fail@plt+0x26cc>
   1359c:	ldr	r3, [r6]
   135a0:	b	134a8 <__assert_fail@plt+0x26b4>
   135a4:	ldr	r3, [pc, #104]	; 13614 <__assert_fail@plt+0x2820>
   135a8:	push	{r4, lr}
   135ac:	and	r3, r3, r0
   135b0:	cmp	r3, #0
   135b4:	sub	sp, sp, #8
   135b8:	mov	r4, r1
   135bc:	beq	135f0 <__assert_fail@plt+0x27fc>
   135c0:	ldr	r2, [pc, #80]	; 13618 <__assert_fail@plt+0x2824>
   135c4:	ldr	r3, [pc, #80]	; 1361c <__assert_fail@plt+0x2828>
   135c8:	str	r2, [sp]
   135cc:	mov	r1, #0
   135d0:	ldr	r2, [pc, #72]	; 13620 <__assert_fail@plt+0x282c>
   135d4:	mov	r0, #31
   135d8:	bl	164f0 <__assert_fail@plt+0x56fc>
   135dc:	str	r0, [r4]
   135e0:	adds	r0, r0, #0
   135e4:	movne	r0, #1
   135e8:	add	sp, sp, #8
   135ec:	pop	{r4, pc}
   135f0:	mov	r0, #32
   135f4:	bl	16e90 <__assert_fail@plt+0x609c>
   135f8:	cmp	r0, #0
   135fc:	str	r0, [r4]
   13600:	beq	135e8 <__assert_fail@plt+0x27f4>
   13604:	bl	16f18 <__assert_fail@plt+0x6124>
   13608:	mov	r0, #1
   1360c:	add	sp, sp, #8
   13610:	pop	{r4, pc}
   13614:	andeq	r0, r0, r2, lsl #2
   13618:	andeq	r2, r1, r0, lsl pc
   1361c:	andeq	r2, r1, r8, ror #30
   13620:	andeq	r2, r1, ip, lsr #31
   13624:	ldr	ip, [pc, #44]	; 13658 <__assert_fail@plt+0x2864>
   13628:	tst	r1, #16
   1362c:	ldr	r3, [pc, #40]	; 1365c <__assert_fail@plt+0x2868>
   13630:	moveq	r3, ip
   13634:	tst	r1, #512	; 0x200
   13638:	mov	ip, r2
   1363c:	bne	1364c <__assert_fail@plt+0x2858>
   13640:	mov	r1, r3
   13644:	mov	r0, r2
   13648:	b	171dc <__assert_fail@plt+0x63e8>
   1364c:	mov	r2, r3
   13650:	mov	r1, ip
   13654:	b	16d80 <__assert_fail@plt+0x5f8c>
   13658:	andeq	r4, r8, r0, lsl #18
   1365c:	andeq	ip, r8, r0, lsl #18
   13660:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13664:	subs	sl, r3, #0
   13668:	sub	sp, sp, #104	; 0x68
   1366c:	mov	r5, r0
   13670:	mov	r6, r1
   13674:	mov	r4, r2
   13678:	ldr	r9, [r0, #48]	; 0x30
   1367c:	beq	136d0 <__assert_fail@plt+0x28dc>
   13680:	ldr	r1, [pc, #432]	; 13838 <__assert_fail@plt+0x2a44>
   13684:	mov	r0, sl
   13688:	bl	10b9c <strcmp@plt>
   1368c:	cmp	r0, #0
   13690:	bne	136d0 <__assert_fail@plt+0x28dc>
   13694:	tst	r9, #4
   13698:	bne	136d8 <__assert_fail@plt+0x28e4>
   1369c:	cmp	r4, #0
   136a0:	bge	13824 <__assert_fail@plt+0x2a30>
   136a4:	tst	r9, #512	; 0x200
   136a8:	bne	137c4 <__assert_fail@plt+0x29d0>
   136ac:	mov	r8, #1
   136b0:	mov	r1, r9
   136b4:	mov	r2, sl
   136b8:	ldr	r0, [r5, #32]
   136bc:	bl	13624 <__assert_fail@plt+0x2830>
   136c0:	subs	r7, r0, #0
   136c4:	blt	1381c <__assert_fail@plt+0x2a28>
   136c8:	ldr	r9, [r5, #48]	; 0x30
   136cc:	b	1370c <__assert_fail@plt+0x2918>
   136d0:	ands	r8, r9, #4
   136d4:	beq	13700 <__assert_fail@plt+0x290c>
   136d8:	mvn	r3, r4
   136dc:	lsr	r3, r3, #31
   136e0:	ands	r9, r3, r9, lsr #9
   136e4:	beq	136f4 <__assert_fail@plt+0x2900>
   136e8:	mov	r0, r4
   136ec:	bl	10dc4 <close@plt>
   136f0:	mov	r9, #0
   136f4:	mov	r0, r9
   136f8:	add	sp, sp, #104	; 0x68
   136fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13700:	cmp	r4, #0
   13704:	movge	r7, r4
   13708:	blt	136b0 <__assert_fail@plt+0x28bc>
   1370c:	tst	r9, #2
   13710:	bne	13730 <__assert_fail@plt+0x293c>
   13714:	cmp	sl, #0
   13718:	beq	13788 <__assert_fail@plt+0x2994>
   1371c:	mov	r0, sl
   13720:	ldr	r1, [pc, #272]	; 13838 <__assert_fail@plt+0x2a44>
   13724:	bl	10b9c <strcmp@plt>
   13728:	cmp	r0, #0
   1372c:	bne	13788 <__assert_fail@plt+0x2994>
   13730:	mov	r2, sp
   13734:	mov	r1, r7
   13738:	mov	r0, #3
   1373c:	bl	10c38 <__fxstat64@plt>
   13740:	cmp	r0, #0
   13744:	beq	137a0 <__assert_fail@plt+0x29ac>
   13748:	mvn	r9, #0
   1374c:	cmp	r4, #0
   13750:	bge	136f4 <__assert_fail@plt+0x2900>
   13754:	bl	10cf8 <__errno_location@plt>
   13758:	mov	r4, r0
   1375c:	mov	r0, r7
   13760:	ldr	r5, [r4]
   13764:	bl	10dc4 <close@plt>
   13768:	str	r5, [r4]
   1376c:	b	136f4 <__assert_fail@plt+0x2900>
   13770:	ldrd	r0, [r6, #160]	; 0xa0
   13774:	ldrd	r2, [sp, #96]	; 0x60
   13778:	cmp	r1, r3
   1377c:	cmpeq	r0, r2
   13780:	bne	137b4 <__assert_fail@plt+0x29c0>
   13784:	ldr	r9, [r5, #48]	; 0x30
   13788:	tst	r9, #512	; 0x200
   1378c:	bne	13800 <__assert_fail@plt+0x2a0c>
   13790:	mov	r0, r7
   13794:	bl	10d7c <fchdir@plt>
   13798:	mov	r9, r0
   1379c:	b	1374c <__assert_fail@plt+0x2958>
   137a0:	ldrd	r0, [r6, #64]	; 0x40
   137a4:	ldrd	r2, [sp]
   137a8:	cmp	r1, r3
   137ac:	cmpeq	r0, r2
   137b0:	beq	13770 <__assert_fail@plt+0x297c>
   137b4:	bl	10cf8 <__errno_location@plt>
   137b8:	mov	r3, #2
   137bc:	str	r3, [r0]
   137c0:	b	13748 <__assert_fail@plt+0x2954>
   137c4:	add	r7, r5, #60	; 0x3c
   137c8:	mov	r0, r7
   137cc:	bl	16c54 <__assert_fail@plt+0x5e60>
   137d0:	subs	r8, r0, #0
   137d4:	bne	136b0 <__assert_fail@plt+0x28bc>
   137d8:	mov	r0, r7
   137dc:	bl	16ca0 <__assert_fail@plt+0x5eac>
   137e0:	ldr	r9, [r5, #48]	; 0x30
   137e4:	subs	r7, r0, #0
   137e8:	blt	136ac <__assert_fail@plt+0x28b8>
   137ec:	tst	r9, #2
   137f0:	mov	r4, r7
   137f4:	mov	r8, #1
   137f8:	beq	13788 <__assert_fail@plt+0x2994>
   137fc:	b	13730 <__assert_fail@plt+0x293c>
   13800:	eor	r2, r8, #1
   13804:	mov	r1, r7
   13808:	uxtb	r2, r2
   1380c:	mov	r0, r5
   13810:	bl	13308 <__assert_fail@plt+0x2514>
   13814:	mov	r9, #0
   13818:	b	136f4 <__assert_fail@plt+0x2900>
   1381c:	mvn	r9, #0
   13820:	b	136f4 <__assert_fail@plt+0x2900>
   13824:	tst	r9, #2
   13828:	mov	r7, r4
   1382c:	mov	r8, #1
   13830:	beq	1371c <__assert_fail@plt+0x2928>
   13834:	b	13730 <__assert_fail@plt+0x293c>
   13838:	andeq	r7, r1, r4, lsr #21
   1383c:	ldr	r3, [pc, #164]	; 138e8 <__assert_fail@plt+0x2af4>
   13840:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13844:	and	r3, r3, r0
   13848:	cmp	r3, #0
   1384c:	mov	sl, r1
   13850:	mov	r8, r2
   13854:	beq	138bc <__assert_fail@plt+0x2ac8>
   13858:	mov	r0, #24
   1385c:	bl	16e90 <__assert_fail@plt+0x609c>
   13860:	subs	r9, r0, #0
   13864:	beq	138e0 <__assert_fail@plt+0x2aec>
   13868:	ldrd	r4, [r8, #160]	; 0xa0
   1386c:	ldrd	r6, [r8, #64]	; 0x40
   13870:	str	r8, [r9, #16]
   13874:	strd	r4, [r9, #8]
   13878:	ldr	r0, [sl]
   1387c:	strd	r6, [r9]
   13880:	mov	r1, r9
   13884:	bl	16ae4 <__assert_fail@plt+0x5cf0>
   13888:	cmp	r9, r0
   1388c:	mov	r4, r0
   13890:	beq	138b4 <__assert_fail@plt+0x2ac0>
   13894:	mov	r0, r9
   13898:	bl	12f10 <__assert_fail@plt+0x211c>
   1389c:	cmp	r4, #0
   138a0:	beq	138e0 <__assert_fail@plt+0x2aec>
   138a4:	ldr	r2, [r4, #16]
   138a8:	mov	r3, #2
   138ac:	str	r2, [r8]
   138b0:	strh	r3, [r8, #56]	; 0x38
   138b4:	mov	r0, #1
   138b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138bc:	ldr	r0, [r1]
   138c0:	add	r1, r2, #64	; 0x40
   138c4:	bl	16f3c <__assert_fail@plt+0x6148>
   138c8:	cmp	r0, #0
   138cc:	beq	138b4 <__assert_fail@plt+0x2ac0>
   138d0:	mov	r3, #2
   138d4:	str	r8, [r8]
   138d8:	strh	r3, [r8, #56]	; 0x38
   138dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138e0:	mov	r0, #0
   138e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   138e8:	andeq	r0, r0, r2, lsl #2
   138ec:	ldr	r3, [pc, #172]	; 139a0 <__assert_fail@plt+0x2bac>
   138f0:	push	{r4, r5, lr}
   138f4:	and	r3, r3, r0
   138f8:	cmp	r3, #0
   138fc:	sub	sp, sp, #28
   13900:	bne	13948 <__assert_fail@plt+0x2b54>
   13904:	ldr	r3, [r2, #4]
   13908:	cmp	r3, #0
   1390c:	beq	13940 <__assert_fail@plt+0x2b4c>
   13910:	ldr	r0, [r3, #48]	; 0x30
   13914:	cmp	r0, #0
   13918:	blt	13940 <__assert_fail@plt+0x2b4c>
   1391c:	ldr	ip, [r1]
   13920:	ldrd	r0, [ip, #16]
   13924:	orrs	r1, r0, r1
   13928:	beq	1399c <__assert_fail@plt+0x2ba8>
   1392c:	ldrd	r4, [ip]
   13930:	ldrd	r0, [r2, #160]	; 0xa0
   13934:	cmp	r5, r1
   13938:	cmpeq	r4, r0
   1393c:	beq	13978 <__assert_fail@plt+0x2b84>
   13940:	add	sp, sp, #28
   13944:	pop	{r4, r5, pc}
   13948:	ldrd	r4, [r2, #64]	; 0x40
   1394c:	ldrd	r2, [r2, #160]	; 0xa0
   13950:	ldr	r0, [r1]
   13954:	mov	r1, sp
   13958:	strd	r4, [sp]
   1395c:	strd	r2, [sp, #8]
   13960:	bl	16b1c <__assert_fail@plt+0x5d28>
   13964:	cmp	r0, #0
   13968:	beq	1399c <__assert_fail@plt+0x2ba8>
   1396c:	bl	12f10 <__assert_fail@plt+0x211c>
   13970:	add	sp, sp, #28
   13974:	pop	{r4, r5, pc}
   13978:	ldrd	r0, [ip, #8]
   1397c:	ldrd	r4, [r2, #64]	; 0x40
   13980:	cmp	r1, r5
   13984:	cmpeq	r0, r4
   13988:	ldrdeq	r0, [r3, #64]	; 0x40
   1398c:	ldrdeq	r2, [r3, #160]	; 0xa0
   13990:	strdeq	r0, [ip, #8]
   13994:	strdeq	r2, [ip]
   13998:	b	13940 <__assert_fail@plt+0x2b4c>
   1399c:	bl	10db8 <abort@plt>
   139a0:	andeq	r0, r0, r2, lsl #2
   139a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139a8:	sub	sp, sp, #68	; 0x44
   139ac:	ldr	sl, [r0]
   139b0:	mov	r5, r0
   139b4:	str	r1, [sp, #40]	; 0x28
   139b8:	ldr	r3, [sl, #12]
   139bc:	cmp	r3, #0
   139c0:	str	r3, [sp, #44]	; 0x2c
   139c4:	beq	13d88 <__assert_fail@plt+0x2f94>
   139c8:	mov	r0, r3
   139cc:	bl	10d64 <dirfd@plt>
   139d0:	cmp	r0, #0
   139d4:	str	r0, [sp, #60]	; 0x3c
   139d8:	blt	14164 <__assert_fail@plt+0x3370>
   139dc:	ldr	r3, [r5, #44]	; 0x2c
   139e0:	cmp	r3, #0
   139e4:	beq	14300 <__assert_fail@plt+0x350c>
   139e8:	mvn	r3, #0
   139ec:	str	r3, [sp, #20]
   139f0:	ldr	r0, [r5, #48]	; 0x30
   139f4:	mov	r3, #1
   139f8:	str	r3, [sp, #52]	; 0x34
   139fc:	ldr	r3, [sl, #40]	; 0x28
   13a00:	ldr	r2, [sl, #28]
   13a04:	mov	r1, r3
   13a08:	sub	r3, r3, #1
   13a0c:	str	sl, [sp, #12]
   13a10:	ldrb	r2, [r2, r3]
   13a14:	cmp	r2, #47	; 0x2f
   13a18:	moveq	r1, r3
   13a1c:	ands	r0, r0, #4
   13a20:	mov	r2, r1
   13a24:	ldrne	r3, [r5, #24]
   13a28:	movne	r0, r2
   13a2c:	str	r1, [sp, #32]
   13a30:	addne	r2, r3, r2
   13a34:	movne	r1, #47	; 0x2f
   13a38:	strbne	r1, [r3, r0]
   13a3c:	addne	r3, r2, #1
   13a40:	ldr	r2, [sp, #32]
   13a44:	strne	r3, [sp, #28]
   13a48:	add	r2, r2, #1
   13a4c:	ldr	r3, [sl, #48]	; 0x30
   13a50:	ldr	fp, [r5, #36]	; 0x24
   13a54:	mov	r1, r2
   13a58:	str	r2, [sp, #8]
   13a5c:	sub	r1, fp, r1
   13a60:	mov	r2, #0
   13a64:	add	r3, r3, #1
   13a68:	streq	r0, [sp, #28]
   13a6c:	str	r2, [sp, #48]	; 0x30
   13a70:	str	r1, [sp, #16]
   13a74:	str	r3, [sp, #24]
   13a78:	str	r2, [sp, #36]	; 0x24
   13a7c:	mov	r7, r2
   13a80:	str	r2, [sp, #4]
   13a84:	mov	r8, r2
   13a88:	mov	sl, r2
   13a8c:	b	13b0c <__assert_fail@plt+0x2d18>
   13a90:	tst	r3, #251	; 0xfb
   13a94:	beq	13be0 <__assert_fail@plt+0x2dec>
   13a98:	lsr	r2, r2, #4
   13a9c:	cmp	r3, #10
   13aa0:	orrne	r2, r2, #1
   13aa4:	tst	r2, #1
   13aa8:	beq	13eb0 <__assert_fail@plt+0x30bc>
   13aac:	sub	r3, r3, #1
   13ab0:	mov	r2, #11
   13ab4:	cmp	r3, #11
   13ab8:	strh	r2, [r4, #56]	; 0x38
   13abc:	bhi	142f0 <__assert_fail@plt+0x34fc>
   13ac0:	ldr	r2, [pc, #2128]	; 14318 <__assert_fail@plt+0x3524>
   13ac4:	ldr	r1, [r2, r3, lsl #2]
   13ac8:	mov	r2, #1
   13acc:	mov	r3, #0
   13ad0:	str	r1, [r4, #80]	; 0x50
   13ad4:	strd	r2, [r4, #112]	; 0x70
   13ad8:	ldr	r3, [sp, #4]
   13adc:	str	r8, [r4, #8]
   13ae0:	cmp	r3, #0
   13ae4:	ldr	r3, [pc, #2096]	; 1431c <__assert_fail@plt+0x3528>
   13ae8:	strne	r4, [sl, #8]
   13aec:	streq	r4, [sp, #4]
   13af0:	cmp	r7, r3
   13af4:	beq	13cf8 <__assert_fail@plt+0x2f04>
   13af8:	ldr	r3, [sp, #20]
   13afc:	add	r7, r7, #1
   13b00:	cmp	r7, r3
   13b04:	bcs	1412c <__assert_fail@plt+0x3338>
   13b08:	mov	sl, r4
   13b0c:	ldr	r3, [sp, #12]
   13b10:	ldr	r4, [r3, #12]
   13b14:	cmp	r4, #0
   13b18:	beq	13f80 <__assert_fail@plt+0x318c>
   13b1c:	bl	10cf8 <__errno_location@plt>
   13b20:	mov	r9, r0
   13b24:	mov	r0, r4
   13b28:	str	r8, [r9]
   13b2c:	bl	10d40 <readdir64@plt>
   13b30:	subs	fp, r0, #0
   13b34:	beq	14058 <__assert_fail@plt+0x3264>
   13b38:	ldr	r2, [r5, #48]	; 0x30
   13b3c:	tst	r2, #32
   13b40:	bne	13b50 <__assert_fail@plt+0x2d5c>
   13b44:	ldrb	r2, [fp, #19]
   13b48:	cmp	r2, #46	; 0x2e
   13b4c:	beq	13d60 <__assert_fail@plt+0x2f6c>
   13b50:	add	r4, fp, #19
   13b54:	mov	r0, r4
   13b58:	bl	10cc8 <strlen@plt>
   13b5c:	mov	r1, r4
   13b60:	mov	r2, r0
   13b64:	mov	r6, r0
   13b68:	mov	r0, r5
   13b6c:	bl	13118 <__assert_fail@plt+0x2324>
   13b70:	subs	r4, r0, #0
   13b74:	beq	13f30 <__assert_fail@plt+0x313c>
   13b78:	ldr	r3, [sp, #16]
   13b7c:	cmp	r3, r6
   13b80:	bls	13c18 <__assert_fail@plt+0x2e24>
   13b84:	ldr	r3, [sp, #8]
   13b88:	adds	r6, r3, r6
   13b8c:	bcs	13c84 <__assert_fail@plt+0x2e90>
   13b90:	ldrd	r0, [fp]
   13b94:	ldr	r2, [r5, #48]	; 0x30
   13b98:	ldr	ip, [r5]
   13b9c:	tst	r2, #4
   13ba0:	ldr	r3, [sp, #24]
   13ba4:	strd	r0, [r4, #160]	; 0xa0
   13ba8:	addeq	r1, r4, #168	; 0xa8
   13bac:	str	r3, [r4, #48]	; 0x30
   13bb0:	str	ip, [r4, #4]
   13bb4:	str	r6, [r4, #40]	; 0x28
   13bb8:	streq	r1, [r4, #24]
   13bbc:	bne	13cd4 <__assert_fail@plt+0x2ee0>
   13bc0:	ldr	r1, [r5, #44]	; 0x2c
   13bc4:	cmp	r1, #0
   13bc8:	beq	13bd4 <__assert_fail@plt+0x2de0>
   13bcc:	tst	r2, #1024	; 0x400
   13bd0:	beq	13d44 <__assert_fail@plt+0x2f50>
   13bd4:	tst	r2, #8
   13bd8:	ldrb	r3, [fp, #18]
   13bdc:	bne	13a90 <__assert_fail@plt+0x2c9c>
   13be0:	sub	r3, r3, #1
   13be4:	cmp	r3, #11
   13be8:	mov	r2, #11
   13bec:	strh	r2, [r4, #56]	; 0x38
   13bf0:	strhi	r8, [r4, #80]	; 0x50
   13bf4:	movhi	r2, #2
   13bf8:	movhi	r3, #0
   13bfc:	bhi	13ad4 <__assert_fail@plt+0x2ce0>
   13c00:	ldr	r2, [pc, #1808]	; 14318 <__assert_fail@plt+0x3524>
   13c04:	ldr	r1, [r2, r3, lsl #2]
   13c08:	mov	r2, #2
   13c0c:	mov	r3, #0
   13c10:	str	r1, [r4, #80]	; 0x50
   13c14:	b	13ad4 <__assert_fail@plt+0x2ce0>
   13c18:	ldr	r3, [sp, #32]
   13c1c:	add	r1, r5, #36	; 0x24
   13c20:	add	r2, r3, #2
   13c24:	ldr	r3, [r5, #24]
   13c28:	add	r2, r2, r6
   13c2c:	add	r0, r5, #24
   13c30:	str	r3, [sp, #16]
   13c34:	bl	133d8 <__assert_fail@plt+0x25e4>
   13c38:	cmp	r0, #0
   13c3c:	beq	13f30 <__assert_fail@plt+0x313c>
   13c40:	ldr	r2, [r5, #24]
   13c44:	ldr	r3, [sp, #16]
   13c48:	cmp	r3, r2
   13c4c:	beq	13d80 <__assert_fail@plt+0x2f8c>
   13c50:	ldr	r1, [r5, #48]	; 0x30
   13c54:	tst	r1, #4
   13c58:	ldrne	r3, [sp, #8]
   13c5c:	addne	r3, r2, r3
   13c60:	strne	r3, [sp, #28]
   13c64:	ldr	r3, [r5, #36]	; 0x24
   13c68:	ldr	r2, [sp, #8]
   13c6c:	str	r0, [sp, #36]	; 0x24
   13c70:	sub	r3, r3, r2
   13c74:	str	r3, [sp, #16]
   13c78:	ldr	r3, [sp, #8]
   13c7c:	adds	r6, r3, r6
   13c80:	bcc	13b90 <__assert_fail@plt+0x2d9c>
   13c84:	ldr	sl, [sp, #12]
   13c88:	mov	r0, r4
   13c8c:	bl	12f10 <__assert_fail@plt+0x211c>
   13c90:	ldr	r0, [sp, #4]
   13c94:	bl	1318c <__assert_fail@plt+0x2398>
   13c98:	ldr	r0, [sl, #12]
   13c9c:	bl	10ddc <closedir@plt>
   13ca0:	ldr	r3, [r5, #48]	; 0x30
   13ca4:	mov	r2, #0
   13ca8:	orr	r3, r3, #8192	; 0x2000
   13cac:	mov	r0, #7
   13cb0:	mov	r1, #36	; 0x24
   13cb4:	str	r2, [sp, #4]
   13cb8:	strh	r0, [sl, #56]	; 0x38
   13cbc:	str	r2, [sl, #12]
   13cc0:	ldr	r0, [sp, #4]
   13cc4:	str	r3, [r5, #48]	; 0x30
   13cc8:	str	r1, [r9]
   13ccc:	add	sp, sp, #68	; 0x44
   13cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cd4:	ldr	r1, [r4, #28]
   13cd8:	ldr	r2, [r4, #52]	; 0x34
   13cdc:	str	r1, [r4, #24]
   13ce0:	add	r2, r2, #1
   13ce4:	add	r1, r4, #168	; 0xa8
   13ce8:	ldr	r0, [sp, #28]
   13cec:	bl	10bd8 <memmove@plt>
   13cf0:	ldr	r2, [r5, #48]	; 0x30
   13cf4:	b	13bc0 <__assert_fail@plt+0x2dcc>
   13cf8:	ldr	r3, [r5, #44]	; 0x2c
   13cfc:	cmp	r3, #0
   13d00:	bne	13af8 <__assert_fail@plt+0x2d04>
   13d04:	ldr	r1, [sp, #60]	; 0x3c
   13d08:	ldr	r0, [sp, #12]
   13d0c:	bl	131f8 <__assert_fail@plt+0x2404>
   13d10:	ldr	r3, [pc, #1544]	; 14320 <__assert_fail@plt+0x352c>
   13d14:	cmp	r0, r3
   13d18:	beq	13d3c <__assert_fail@plt+0x2f48>
   13d1c:	ldr	r3, [pc, #1536]	; 14324 <__assert_fail@plt+0x3530>
   13d20:	cmp	r0, r3
   13d24:	beq	13d3c <__assert_fail@plt+0x2f48>
   13d28:	ldr	r3, [pc, #1528]	; 14328 <__assert_fail@plt+0x3534>
   13d2c:	cmp	r0, r3
   13d30:	movne	r3, #1
   13d34:	strne	r3, [sp, #48]	; 0x30
   13d38:	bne	13af8 <__assert_fail@plt+0x2d04>
   13d3c:	str	r8, [sp, #48]	; 0x30
   13d40:	b	13af8 <__assert_fail@plt+0x2d04>
   13d44:	mov	r1, r2
   13d48:	mov	r3, r8
   13d4c:	mov	r2, r4
   13d50:	ldr	r0, [r5, #32]
   13d54:	bl	13458 <__assert_fail@plt+0x2664>
   13d58:	strh	r0, [r4, #56]	; 0x38
   13d5c:	b	13ad8 <__assert_fail@plt+0x2ce4>
   13d60:	ldrb	r2, [fp, #20]
   13d64:	cmp	r2, #0
   13d68:	beq	13d78 <__assert_fail@plt+0x2f84>
   13d6c:	ldrh	r2, [fp, #20]
   13d70:	cmp	r2, #46	; 0x2e
   13d74:	bne	13b50 <__assert_fail@plt+0x2d5c>
   13d78:	mov	r4, sl
   13d7c:	b	13b08 <__assert_fail@plt+0x2d14>
   13d80:	ldr	r0, [sp, #36]	; 0x24
   13d84:	b	13c64 <__assert_fail@plt+0x2e70>
   13d88:	ldr	r3, [r0, #48]	; 0x30
   13d8c:	ldr	r1, [sl, #24]
   13d90:	and	r2, r3, #516	; 0x204
   13d94:	cmp	r2, #512	; 0x200
   13d98:	mvnne	r0, #99	; 0x63
   13d9c:	ldreq	r0, [r0, #32]
   13da0:	ands	r2, r3, #16
   13da4:	bne	13ec0 <__assert_fail@plt+0x30cc>
   13da8:	add	r3, sp, #60	; 0x3c
   13dac:	bl	16db8 <__assert_fail@plt+0x5fc4>
   13db0:	cmp	r0, #0
   13db4:	mov	r4, r0
   13db8:	str	r0, [sl, #12]
   13dbc:	beq	14218 <__assert_fail@plt+0x3424>
   13dc0:	ldrh	r3, [sl, #56]	; 0x38
   13dc4:	cmp	r3, #11
   13dc8:	beq	14240 <__assert_fail@plt+0x344c>
   13dcc:	ldr	r0, [r5, #48]	; 0x30
   13dd0:	tst	r0, #256	; 0x100
   13dd4:	bne	13ee0 <__assert_fail@plt+0x30ec>
   13dd8:	ldr	r2, [r5, #44]	; 0x2c
   13ddc:	ldr	r3, [pc, #1352]	; 1432c <__assert_fail@plt+0x3538>
   13de0:	cmp	r2, #0
   13de4:	mvnne	r3, #0
   13de8:	str	r3, [sp, #20]
   13dec:	ldr	r3, [sp, #40]	; 0x28
   13df0:	cmp	r3, #2
   13df4:	beq	141d4 <__assert_fail@plt+0x33e0>
   13df8:	ldr	r3, [r5, #48]	; 0x30
   13dfc:	and	r3, r3, #56	; 0x38
   13e00:	cmp	r3, #24
   13e04:	beq	1425c <__assert_fail@plt+0x3468>
   13e08:	ldr	r3, [sp, #40]	; 0x28
   13e0c:	mov	r4, #1
   13e10:	sub	r6, r3, #3
   13e14:	clz	r6, r6
   13e18:	lsr	r6, r6, #5
   13e1c:	ldr	r3, [r5, #48]	; 0x30
   13e20:	tst	r3, #512	; 0x200
   13e24:	bne	141fc <__assert_fail@plt+0x3408>
   13e28:	ldr	r2, [sp, #60]	; 0x3c
   13e2c:	cmp	r2, #0
   13e30:	blt	13e4c <__assert_fail@plt+0x3058>
   13e34:	mov	r3, #0
   13e38:	mov	r1, sl
   13e3c:	mov	r0, r5
   13e40:	bl	13660 <__assert_fail@plt+0x286c>
   13e44:	cmp	r0, #0
   13e48:	beq	139f0 <__assert_fail@plt+0x2bfc>
   13e4c:	tst	r4, r6
   13e50:	beq	13e60 <__assert_fail@plt+0x306c>
   13e54:	bl	10cf8 <__errno_location@plt>
   13e58:	ldr	r3, [r0]
   13e5c:	str	r3, [sl, #32]
   13e60:	ldrh	r3, [sl, #58]	; 0x3a
   13e64:	ldr	r0, [sl, #12]
   13e68:	orr	r3, r3, #1
   13e6c:	strh	r3, [sl, #58]	; 0x3a
   13e70:	bl	10ddc <closedir@plt>
   13e74:	ldr	r0, [r5, #48]	; 0x30
   13e78:	mov	r3, #0
   13e7c:	tst	r0, #512	; 0x200
   13e80:	str	r3, [sl, #12]
   13e84:	beq	13ea0 <__assert_fail@plt+0x30ac>
   13e88:	ldr	r3, [sp, #60]	; 0x3c
   13e8c:	cmp	r3, #0
   13e90:	blt	13ea0 <__assert_fail@plt+0x30ac>
   13e94:	mov	r0, r3
   13e98:	bl	10dc4 <close@plt>
   13e9c:	ldr	r0, [r5, #48]	; 0x30
   13ea0:	mov	r3, #0
   13ea4:	str	r3, [sl, #12]
   13ea8:	str	r3, [sp, #52]	; 0x34
   13eac:	b	139fc <__assert_fail@plt+0x2c08>
   13eb0:	mov	r3, #11
   13eb4:	strh	r3, [r4, #56]	; 0x38
   13eb8:	mov	r3, #9
   13ebc:	b	13c00 <__assert_fail@plt+0x2e0c>
   13ec0:	tst	r3, #1
   13ec4:	moveq	r2, #32768	; 0x8000
   13ec8:	beq	13da8 <__assert_fail@plt+0x2fb4>
   13ecc:	ldr	r2, [sl, #48]	; 0x30
   13ed0:	cmp	r2, #0
   13ed4:	movne	r2, #32768	; 0x8000
   13ed8:	moveq	r2, #0
   13edc:	b	13da8 <__assert_fail@plt+0x2fb4>
   13ee0:	add	r4, r5, #56	; 0x38
   13ee4:	mov	r1, r4
   13ee8:	mov	r2, sl
   13eec:	bl	138ec <__assert_fail@plt+0x2af8>
   13ef0:	mov	r3, #0
   13ef4:	mov	r2, sl
   13ef8:	ldr	r1, [r5, #48]	; 0x30
   13efc:	ldr	r0, [r5, #32]
   13f00:	bl	13458 <__assert_fail@plt+0x2664>
   13f04:	mov	r1, r4
   13f08:	mov	r2, sl
   13f0c:	ldr	r0, [r5, #48]	; 0x30
   13f10:	bl	1383c <__assert_fail@plt+0x2a48>
   13f14:	subs	r4, r0, #0
   13f18:	bne	13dd8 <__assert_fail@plt+0x2fe4>
   13f1c:	bl	10cf8 <__errno_location@plt>
   13f20:	mov	r3, #12
   13f24:	str	r4, [sp, #4]
   13f28:	str	r3, [r0]
   13f2c:	b	13f74 <__assert_fail@plt+0x3180>
   13f30:	ldr	sl, [sp, #12]
   13f34:	mov	r0, r4
   13f38:	ldr	r4, [r9]
   13f3c:	bl	12f10 <__assert_fail@plt+0x211c>
   13f40:	ldr	r0, [sp, #4]
   13f44:	bl	1318c <__assert_fail@plt+0x2398>
   13f48:	ldr	r0, [sl, #12]
   13f4c:	bl	10ddc <closedir@plt>
   13f50:	ldr	r3, [r5, #48]	; 0x30
   13f54:	mov	r2, #0
   13f58:	orr	r3, r3, #8192	; 0x2000
   13f5c:	mov	r1, #7
   13f60:	str	r2, [sl, #12]
   13f64:	strh	r1, [sl, #56]	; 0x38
   13f68:	str	r2, [sp, #4]
   13f6c:	str	r3, [r5, #48]	; 0x30
   13f70:	str	r4, [r9]
   13f74:	ldr	r0, [sp, #4]
   13f78:	add	sp, sp, #68	; 0x44
   13f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f80:	mov	sl, r3
   13f84:	ldr	r3, [sp, #36]	; 0x24
   13f88:	cmp	r3, #0
   13f8c:	bne	140a8 <__assert_fail@plt+0x32b4>
   13f90:	ldr	r3, [r5, #48]	; 0x30
   13f94:	tst	r3, #4
   13f98:	beq	13fc4 <__assert_fail@plt+0x31d0>
   13f9c:	ldr	r3, [r5, #36]	; 0x24
   13fa0:	ldr	r2, [sp, #8]
   13fa4:	cmp	r7, #0
   13fa8:	cmpne	r3, r2
   13fac:	ldreq	r3, [sp, #28]
   13fb0:	subeq	r3, r3, #1
   13fb4:	streq	r3, [sp, #28]
   13fb8:	ldr	r2, [sp, #28]
   13fbc:	mov	r3, #0
   13fc0:	strb	r3, [r2]
   13fc4:	ldr	r3, [sp, #52]	; 0x34
   13fc8:	ldr	r2, [sp, #44]	; 0x2c
   13fcc:	cmp	r2, #0
   13fd0:	movne	r3, #0
   13fd4:	andeq	r3, r3, #1
   13fd8:	cmp	r3, #0
   13fdc:	beq	14014 <__assert_fail@plt+0x3220>
   13fe0:	ldr	r3, [sp, #40]	; 0x28
   13fe4:	cmp	r7, #0
   13fe8:	cmpne	r3, #1
   13fec:	bne	1401c <__assert_fail@plt+0x3228>
   13ff0:	ldr	r3, [sl, #48]	; 0x30
   13ff4:	cmp	r3, #0
   13ff8:	bne	14194 <__assert_fail@plt+0x33a0>
   13ffc:	mov	r0, r5
   14000:	bl	13388 <__assert_fail@plt+0x2594>
   14004:	adds	r0, r0, #0
   14008:	movne	r0, #1
   1400c:	cmp	r0, #0
   14010:	bne	142b4 <__assert_fail@plt+0x34c0>
   14014:	cmp	r7, #0
   14018:	beq	141b4 <__assert_fail@plt+0x33c0>
   1401c:	ldr	r3, [sp, #48]	; 0x30
   14020:	cmp	r3, #0
   14024:	bne	14134 <__assert_fail@plt+0x3340>
   14028:	ldr	r3, [r5, #44]	; 0x2c
   1402c:	cmp	r3, #0
   14030:	cmpne	r7, #1
   14034:	bls	13f74 <__assert_fail@plt+0x3180>
   14038:	mov	r2, r7
   1403c:	ldr	r1, [sp, #4]
   14040:	mov	r0, r5
   14044:	bl	13038 <__assert_fail@plt+0x2244>
   14048:	str	r0, [sp, #4]
   1404c:	ldr	r0, [sp, #4]
   14050:	add	sp, sp, #68	; 0x44
   14054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14058:	ldr	r3, [r9]
   1405c:	ldr	sl, [sp, #12]
   14060:	cmp	r3, #0
   14064:	beq	14084 <__assert_fail@plt+0x3290>
   14068:	ldr	r2, [sp, #44]	; 0x2c
   1406c:	str	r3, [sl, #32]
   14070:	cmp	r7, #0
   14074:	cmpeq	r2, #0
   14078:	moveq	r2, #4
   1407c:	movne	r2, #7
   14080:	strh	r2, [sl, #56]	; 0x38
   14084:	ldr	r0, [sl, #12]
   14088:	cmp	r0, #0
   1408c:	beq	13f84 <__assert_fail@plt+0x3190>
   14090:	bl	10ddc <closedir@plt>
   14094:	mov	r3, #0
   14098:	str	r3, [sl, #12]
   1409c:	ldr	r3, [sp, #36]	; 0x24
   140a0:	cmp	r3, #0
   140a4:	beq	13f90 <__assert_fail@plt+0x319c>
   140a8:	ldr	r1, [r5, #4]
   140ac:	ldr	r0, [r5, #24]
   140b0:	cmp	r1, #0
   140b4:	beq	140e4 <__assert_fail@plt+0x32f0>
   140b8:	ldr	r3, [r1, #24]
   140bc:	add	r2, r1, #168	; 0xa8
   140c0:	cmp	r3, r2
   140c4:	ldrne	r2, [r1, #28]
   140c8:	str	r0, [r1, #28]
   140cc:	subne	r3, r3, r2
   140d0:	addne	r3, r0, r3
   140d4:	strne	r3, [r1, #24]
   140d8:	ldr	r1, [r1, #8]
   140dc:	cmp	r1, #0
   140e0:	bne	140b8 <__assert_fail@plt+0x32c4>
   140e4:	ldr	r3, [sp, #4]
   140e8:	b	14118 <__assert_fail@plt+0x3324>
   140ec:	ldr	r2, [r3, #24]
   140f0:	cmp	r2, r1
   140f4:	ldrne	r1, [r3, #28]
   140f8:	str	r0, [r3, #28]
   140fc:	subne	r2, r2, r1
   14100:	addne	r2, r0, r2
   14104:	strne	r2, [r3, #24]
   14108:	ldr	r2, [r3, #8]
   1410c:	cmp	r2, #0
   14110:	ldreq	r2, [r3, #4]
   14114:	mov	r3, r2
   14118:	ldr	r2, [r3, #48]	; 0x30
   1411c:	add	r1, r3, #168	; 0xa8
   14120:	cmp	r2, #0
   14124:	bge	140ec <__assert_fail@plt+0x32f8>
   14128:	b	13f90 <__assert_fail@plt+0x319c>
   1412c:	ldr	sl, [sp, #12]
   14130:	b	13f84 <__assert_fail@plt+0x3190>
   14134:	ldr	r3, [pc, #500]	; 14330 <__assert_fail@plt+0x353c>
   14138:	mov	r2, r7
   1413c:	str	r3, [r5, #44]	; 0x2c
   14140:	ldr	r1, [sp, #4]
   14144:	mov	r0, r5
   14148:	bl	13038 <__assert_fail@plt+0x2244>
   1414c:	mov	r3, #0
   14150:	str	r3, [r5, #44]	; 0x2c
   14154:	str	r0, [sp, #4]
   14158:	ldr	r0, [sp, #4]
   1415c:	add	sp, sp, #68	; 0x44
   14160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14164:	ldr	r0, [sl, #12]
   14168:	bl	10ddc <closedir@plt>
   1416c:	ldr	r3, [sp, #40]	; 0x28
   14170:	mov	r4, #0
   14174:	cmp	r3, #3
   14178:	str	r4, [sl, #12]
   1417c:	beq	14224 <__assert_fail@plt+0x3430>
   14180:	mov	r3, #0
   14184:	str	r3, [sp, #4]
   14188:	ldr	r0, [sp, #4]
   1418c:	add	sp, sp, #68	; 0x44
   14190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14194:	ldr	r3, [pc, #408]	; 14334 <__assert_fail@plt+0x3540>
   14198:	mvn	r2, #0
   1419c:	ldr	r1, [sl, #4]
   141a0:	mov	r0, r5
   141a4:	bl	13660 <__assert_fail@plt+0x286c>
   141a8:	adds	r0, r0, #0
   141ac:	movne	r0, #1
   141b0:	b	1400c <__assert_fail@plt+0x3218>
   141b4:	ldr	r3, [sp, #40]	; 0x28
   141b8:	cmp	r3, #3
   141bc:	beq	141e4 <__assert_fail@plt+0x33f0>
   141c0:	ldr	r0, [sp, #4]
   141c4:	bl	1318c <__assert_fail@plt+0x2398>
   141c8:	mov	r3, #0
   141cc:	str	r3, [sp, #4]
   141d0:	b	13f74 <__assert_fail@plt+0x3180>
   141d4:	mov	r3, #0
   141d8:	str	r3, [sp, #52]	; 0x34
   141dc:	ldr	r0, [r5, #48]	; 0x30
   141e0:	b	139fc <__assert_fail@plt+0x2c08>
   141e4:	ldrh	r3, [sl, #56]	; 0x38
   141e8:	cmp	r3, #4
   141ec:	cmpne	r3, #7
   141f0:	movne	r3, #6
   141f4:	strhne	r3, [sl, #56]	; 0x38
   141f8:	b	141c0 <__assert_fail@plt+0x33cc>
   141fc:	mov	r2, #3
   14200:	ldr	r1, [pc, #304]	; 14338 <__assert_fail@plt+0x3544>
   14204:	ldr	r0, [sp, #60]	; 0x3c
   14208:	bl	17008 <__assert_fail@plt+0x6214>
   1420c:	mov	r2, r0
   14210:	str	r0, [sp, #60]	; 0x3c
   14214:	b	13e2c <__assert_fail@plt+0x3038>
   14218:	ldr	r3, [sp, #40]	; 0x28
   1421c:	cmp	r3, #3
   14220:	bne	14180 <__assert_fail@plt+0x338c>
   14224:	mov	r3, #4
   14228:	strh	r3, [sl, #56]	; 0x38
   1422c:	bl	10cf8 <__errno_location@plt>
   14230:	str	r4, [sp, #4]
   14234:	ldr	r3, [r0]
   14238:	str	r3, [sl, #32]
   1423c:	b	13f74 <__assert_fail@plt+0x3180>
   14240:	mov	r3, #0
   14244:	mov	r2, sl
   14248:	ldr	r1, [r5, #48]	; 0x30
   1424c:	ldr	r0, [r5, #32]
   14250:	bl	13458 <__assert_fail@plt+0x2664>
   14254:	strh	r0, [sl, #56]	; 0x38
   14258:	b	13dd8 <__assert_fail@plt+0x2fe4>
   1425c:	ldr	r3, [sl, #84]	; 0x54
   14260:	cmp	r3, #2
   14264:	bne	13e08 <__assert_fail@plt+0x3014>
   14268:	ldr	r1, [sp, #60]	; 0x3c
   1426c:	mov	r0, sl
   14270:	bl	131f8 <__assert_fail@plt+0x2404>
   14274:	ldr	r3, [pc, #164]	; 14320 <__assert_fail@plt+0x352c>
   14278:	cmp	r0, r3
   1427c:	beq	13e08 <__assert_fail@plt+0x3014>
   14280:	bgt	142d4 <__assert_fail@plt+0x34e0>
   14284:	ldr	r3, [pc, #156]	; 14328 <__assert_fail@plt+0x3534>
   14288:	cmp	r0, r3
   1428c:	beq	13e08 <__assert_fail@plt+0x3014>
   14290:	cmp	r0, #0
   14294:	beq	13e08 <__assert_fail@plt+0x3014>
   14298:	ldr	r3, [sp, #40]	; 0x28
   1429c:	cmp	r3, #3
   142a0:	moveq	r6, #1
   142a4:	movne	r6, #0
   142a8:	bne	141d4 <__assert_fail@plt+0x33e0>
   142ac:	mov	r4, #0
   142b0:	b	13e1c <__assert_fail@plt+0x3028>
   142b4:	ldr	r3, [r5, #48]	; 0x30
   142b8:	mov	r2, #7
   142bc:	orr	r3, r3, #8192	; 0x2000
   142c0:	strh	r2, [sl, #56]	; 0x38
   142c4:	ldr	r0, [sp, #4]
   142c8:	str	r3, [r5, #48]	; 0x30
   142cc:	bl	1318c <__assert_fail@plt+0x2398>
   142d0:	b	14180 <__assert_fail@plt+0x338c>
   142d4:	ldr	r3, [pc, #96]	; 1433c <__assert_fail@plt+0x3548>
   142d8:	cmp	r0, r3
   142dc:	beq	13e08 <__assert_fail@plt+0x3014>
   142e0:	ldr	r3, [pc, #88]	; 14340 <__assert_fail@plt+0x354c>
   142e4:	cmp	r0, r3
   142e8:	bne	14298 <__assert_fail@plt+0x34a4>
   142ec:	b	13e08 <__assert_fail@plt+0x3014>
   142f0:	str	r8, [r4, #80]	; 0x50
   142f4:	mov	r2, #1
   142f8:	mov	r3, #0
   142fc:	b	13ad4 <__assert_fail@plt+0x2ce0>
   14300:	ldr	r3, [pc, #36]	; 1432c <__assert_fail@plt+0x3538>
   14304:	ldr	r0, [r5, #48]	; 0x30
   14308:	str	r3, [sp, #20]
   1430c:	mov	r3, #1
   14310:	str	r3, [sp, #52]	; 0x34
   14314:	b	139fc <__assert_fail@plt+0x2c08>
   14318:	andeq	r7, r1, r4, ror sl
   1431c:	andeq	r2, r0, r0, lsl r7
   14320:	andeq	r6, r0, r9, ror #18
   14324:			; <UNDEFINED> instruction: 0x01021994
   14328:			; <UNDEFINED> instruction: 0xff534d42
   1432c:	andeq	r8, r1, r0, lsr #13
   14330:	andeq	r3, r1, r8
   14334:	andeq	r7, r1, r4, lsr #21
   14338:	andeq	r0, r0, r6, lsl #8
   1433c:	andeq	r9, r0, r0, lsr #31
   14340:	movtpl	r4, #24911	; 0x614f
   14344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14348:	bic	r5, r1, #4080	; 0xff0
   1434c:	bic	r5, r5, #15
   14350:	cmp	r5, #0
   14354:	sub	sp, sp, #20
   14358:	bne	14690 <__assert_fail@plt+0x389c>
   1435c:	and	r3, r1, #516	; 0x204
   14360:	cmp	r3, #516	; 0x204
   14364:	mov	r6, r1
   14368:	beq	14630 <__assert_fail@plt+0x383c>
   1436c:	ands	r5, r1, #18
   14370:	beq	14630 <__assert_fail@plt+0x383c>
   14374:	mov	r7, r0
   14378:	mov	r1, #96	; 0x60
   1437c:	mov	r0, #1
   14380:	mov	r9, r2
   14384:	bl	16e48 <__assert_fail@plt+0x6054>
   14388:	subs	r5, r0, #0
   1438c:	beq	145d8 <__assert_fail@plt+0x37e4>
   14390:	tst	r6, #2
   14394:	bicne	r3, r6, #512	; 0x200
   14398:	orrne	r3, r3, #4
   1439c:	strne	r3, [r5, #48]	; 0x30
   143a0:	ldr	r3, [r7]
   143a4:	streq	r6, [r5, #48]	; 0x30
   143a8:	mvn	r2, #99	; 0x63
   143ac:	cmp	r3, #0
   143b0:	str	r9, [r5, #44]	; 0x2c
   143b4:	str	r2, [r5, #32]
   143b8:	beq	146c4 <__assert_fail@plt+0x38d0>
   143bc:	mov	r8, r7
   143c0:	mov	r4, #0
   143c4:	mov	r0, r3
   143c8:	bl	10cc8 <strlen@plt>
   143cc:	ldr	r3, [r8, #4]!
   143d0:	cmp	r4, r0
   143d4:	movcc	r4, r0
   143d8:	cmp	r3, #0
   143dc:	bne	143c4 <__assert_fail@plt+0x35d0>
   143e0:	add	r2, r4, #1
   143e4:	cmp	r2, #4096	; 0x1000
   143e8:	movcc	r2, #4096	; 0x1000
   143ec:	add	r1, r5, #36	; 0x24
   143f0:	add	r0, r5, #24
   143f4:	bl	133d8 <__assert_fail@plt+0x25e4>
   143f8:	subs	r3, r0, #0
   143fc:	str	r3, [sp, #4]
   14400:	beq	14618 <__assert_fail@plt+0x3824>
   14404:	ldr	r4, [r7]
   14408:	cmp	r4, #0
   1440c:	beq	14648 <__assert_fail@plt+0x3854>
   14410:	mov	r2, #0
   14414:	ldr	r1, [pc, #696]	; 146d4 <__assert_fail@plt+0x38e0>
   14418:	mov	r0, r5
   1441c:	bl	13118 <__assert_fail@plt+0x2324>
   14420:	subs	fp, r0, #0
   14424:	beq	14610 <__assert_fail@plt+0x381c>
   14428:	mvn	r3, #0
   1442c:	cmp	r9, #0
   14430:	str	r3, [fp, #48]	; 0x30
   14434:	ldr	r4, [r7]
   14438:	beq	1444c <__assert_fail@plt+0x3658>
   1443c:	ldr	r3, [r5, #48]	; 0x30
   14440:	lsr	r3, r3, #10
   14444:	and	r3, r3, #1
   14448:	str	r3, [sp, #4]
   1444c:	cmp	r4, #0
   14450:	beq	146cc <__assert_fail@plt+0x38d8>
   14454:	lsr	r6, r6, #11
   14458:	mov	r3, #0
   1445c:	eor	r6, r6, #1
   14460:	mov	sl, r3
   14464:	str	r3, [sp, #12]
   14468:	and	r3, r6, #1
   1446c:	str	r3, [sp, #8]
   14470:	mov	r8, sl
   14474:	mov	r6, sl
   14478:	b	144b0 <__assert_fail@plt+0x36bc>
   1447c:	mov	r3, #11
   14480:	strh	r3, [r4, #56]	; 0x38
   14484:	mov	r2, #2
   14488:	mov	r3, #0
   1448c:	cmp	r9, #0
   14490:	strd	r2, [r4, #112]	; 0x70
   14494:	beq	14544 <__assert_fail@plt+0x3750>
   14498:	str	r6, [r4, #8]
   1449c:	mov	r6, r4
   144a0:	ldr	r4, [r7, #4]!
   144a4:	add	r8, r8, #1
   144a8:	cmp	r4, #0
   144ac:	beq	14570 <__assert_fail@plt+0x377c>
   144b0:	mov	r0, r4
   144b4:	bl	10cc8 <strlen@plt>
   144b8:	ldr	r3, [sp, #8]
   144bc:	cmp	r0, #2
   144c0:	movls	r3, #0
   144c4:	andhi	r3, r3, #1
   144c8:	cmp	r3, #0
   144cc:	mov	r2, r0
   144d0:	beq	144e8 <__assert_fail@plt+0x36f4>
   144d4:	sub	r1, r0, #1
   144d8:	add	r3, r4, r1
   144dc:	ldrb	r1, [r4, r1]
   144e0:	cmp	r1, #47	; 0x2f
   144e4:	beq	145e4 <__assert_fail@plt+0x37f0>
   144e8:	mov	r1, r4
   144ec:	mov	r0, r5
   144f0:	bl	13118 <__assert_fail@plt+0x2324>
   144f4:	subs	r4, r0, #0
   144f8:	beq	14600 <__assert_fail@plt+0x380c>
   144fc:	ldr	r3, [sp, #4]
   14500:	str	sl, [r4, #48]	; 0x30
   14504:	cmp	r6, #0
   14508:	moveq	r3, #0
   1450c:	andne	r3, r3, #1
   14510:	cmp	r3, #0
   14514:	add	r3, r4, #168	; 0xa8
   14518:	str	fp, [r4, #4]
   1451c:	str	r3, [r4, #24]
   14520:	bne	1447c <__assert_fail@plt+0x3688>
   14524:	mov	r3, sl
   14528:	mov	r2, r4
   1452c:	ldr	r1, [r5, #48]	; 0x30
   14530:	ldr	r0, [r5, #32]
   14534:	bl	13458 <__assert_fail@plt+0x2664>
   14538:	cmp	r9, #0
   1453c:	strh	r0, [r4, #56]	; 0x38
   14540:	bne	14498 <__assert_fail@plt+0x36a4>
   14544:	cmp	r6, #0
   14548:	str	r9, [r4, #8]
   1454c:	ldrne	r3, [sp, #12]
   14550:	streq	r4, [sp, #12]
   14554:	strne	r4, [sp, #12]
   14558:	strne	r4, [r3, #8]
   1455c:	moveq	r6, r4
   14560:	ldr	r4, [r7, #4]!
   14564:	add	r8, r8, #1
   14568:	cmp	r4, #0
   1456c:	bne	144b0 <__assert_fail@plt+0x36bc>
   14570:	cmp	r9, #0
   14574:	cmpne	r8, #1
   14578:	bhi	146ac <__assert_fail@plt+0x38b8>
   1457c:	mov	r2, #0
   14580:	ldr	r1, [pc, #332]	; 146d4 <__assert_fail@plt+0x38e0>
   14584:	mov	r0, r5
   14588:	bl	13118 <__assert_fail@plt+0x2324>
   1458c:	cmp	r0, #0
   14590:	str	r0, [r5]
   14594:	beq	14600 <__assert_fail@plt+0x380c>
   14598:	mov	r2, #1
   1459c:	mov	r3, #9
   145a0:	str	r6, [r0, #8]
   145a4:	str	r2, [r0, #48]	; 0x30
   145a8:	strh	r3, [r0, #56]	; 0x38
   145ac:	add	r1, r5, #56	; 0x38
   145b0:	ldr	r0, [r5, #48]	; 0x30
   145b4:	bl	135a4 <__assert_fail@plt+0x27b0>
   145b8:	cmp	r0, #0
   145bc:	beq	14600 <__assert_fail@plt+0x380c>
   145c0:	ldr	r1, [r5, #48]	; 0x30
   145c4:	tst	r1, #516	; 0x204
   145c8:	beq	14660 <__assert_fail@plt+0x386c>
   145cc:	mvn	r1, #0
   145d0:	add	r0, r5, #60	; 0x3c
   145d4:	bl	16c28 <__assert_fail@plt+0x5e34>
   145d8:	mov	r0, r5
   145dc:	add	sp, sp, #20
   145e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145e4:	ldrb	r1, [r3, #-1]!
   145e8:	cmp	r1, #47	; 0x2f
   145ec:	bne	144e8 <__assert_fail@plt+0x36f4>
   145f0:	sub	r2, r2, #1
   145f4:	cmp	r2, #1
   145f8:	bne	145e4 <__assert_fail@plt+0x37f0>
   145fc:	b	144e8 <__assert_fail@plt+0x36f4>
   14600:	mov	r0, r6
   14604:	bl	1318c <__assert_fail@plt+0x2398>
   14608:	mov	r0, fp
   1460c:	bl	12f10 <__assert_fail@plt+0x211c>
   14610:	ldr	r0, [r5, #24]
   14614:	bl	12f10 <__assert_fail@plt+0x211c>
   14618:	mov	r0, r5
   1461c:	bl	12f10 <__assert_fail@plt+0x211c>
   14620:	mov	r5, #0
   14624:	mov	r0, r5
   14628:	add	sp, sp, #20
   1462c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14630:	bl	10cf8 <__errno_location@plt>
   14634:	mov	r3, #22
   14638:	str	r3, [r0]
   1463c:	mov	r0, r5
   14640:	add	sp, sp, #20
   14644:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14648:	cmp	r9, #0
   1464c:	movne	fp, r4
   14650:	bne	1443c <__assert_fail@plt+0x3648>
   14654:	mov	fp, r9
   14658:	mov	r6, r9
   1465c:	b	1457c <__assert_fail@plt+0x3788>
   14660:	ldr	r2, [pc, #112]	; 146d8 <__assert_fail@plt+0x38e4>
   14664:	ldr	r0, [r5, #32]
   14668:	bl	13624 <__assert_fail@plt+0x2830>
   1466c:	mvn	r1, #0
   14670:	cmp	r0, #0
   14674:	str	r0, [r5, #28]
   14678:	ldrlt	r3, [r5, #48]	; 0x30
   1467c:	add	r0, r5, #60	; 0x3c
   14680:	orrlt	r3, r3, #4
   14684:	strlt	r3, [r5, #48]	; 0x30
   14688:	bl	16c28 <__assert_fail@plt+0x5e34>
   1468c:	b	145d8 <__assert_fail@plt+0x37e4>
   14690:	bl	10cf8 <__errno_location@plt>
   14694:	mov	r5, #0
   14698:	mov	r3, #22
   1469c:	str	r3, [r0]
   146a0:	mov	r0, r5
   146a4:	add	sp, sp, #20
   146a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146ac:	mov	r1, r6
   146b0:	mov	r2, r8
   146b4:	mov	r0, r5
   146b8:	bl	13038 <__assert_fail@plt+0x2244>
   146bc:	mov	r6, r0
   146c0:	b	1457c <__assert_fail@plt+0x3788>
   146c4:	mov	r2, #4096	; 0x1000
   146c8:	b	143ec <__assert_fail@plt+0x35f8>
   146cc:	mov	r6, r4
   146d0:	b	1457c <__assert_fail@plt+0x3788>
   146d4:	ldrdeq	r7, [r1], -r4
   146d8:	andeq	r7, r1, r8, lsr #21
   146dc:	ldr	r3, [r0]
   146e0:	push	{r4, r5, r6, lr}
   146e4:	cmp	r3, #0
   146e8:	mov	r5, r0
   146ec:	beq	14728 <__assert_fail@plt+0x3934>
   146f0:	ldr	r2, [r3, #48]	; 0x30
   146f4:	cmp	r2, #0
   146f8:	blt	14818 <__assert_fail@plt+0x3a24>
   146fc:	ldr	r4, [r3, #8]
   14700:	mov	r0, r3
   14704:	cmp	r4, #0
   14708:	ldreq	r4, [r3, #4]
   1470c:	bl	12f10 <__assert_fail@plt+0x211c>
   14710:	mov	r3, r4
   14714:	ldr	r2, [r4, #48]	; 0x30
   14718:	cmp	r2, #0
   1471c:	bge	146fc <__assert_fail@plt+0x3908>
   14720:	mov	r0, r4
   14724:	bl	12f10 <__assert_fail@plt+0x211c>
   14728:	ldr	r0, [r5, #4]
   1472c:	cmp	r0, #0
   14730:	beq	14738 <__assert_fail@plt+0x3944>
   14734:	bl	1318c <__assert_fail@plt+0x2398>
   14738:	ldr	r0, [r5, #8]
   1473c:	bl	12f10 <__assert_fail@plt+0x211c>
   14740:	ldr	r0, [r5, #24]
   14744:	bl	12f10 <__assert_fail@plt+0x211c>
   14748:	ldr	r3, [r5, #48]	; 0x30
   1474c:	tst	r3, #512	; 0x200
   14750:	beq	147c4 <__assert_fail@plt+0x39d0>
   14754:	ldr	r0, [r5, #32]
   14758:	cmp	r0, #0
   1475c:	blt	1476c <__assert_fail@plt+0x3978>
   14760:	bl	10dc4 <close@plt>
   14764:	cmp	r0, #0
   14768:	bne	14804 <__assert_fail@plt+0x3a10>
   1476c:	mov	r4, #0
   14770:	add	r0, r5, #60	; 0x3c
   14774:	bl	131c0 <__assert_fail@plt+0x23cc>
   14778:	ldr	r0, [r5, #52]	; 0x34
   1477c:	cmp	r0, #0
   14780:	beq	14788 <__assert_fail@plt+0x3994>
   14784:	bl	166ec <__assert_fail@plt+0x58f8>
   14788:	ldr	r2, [r5, #48]	; 0x30
   1478c:	ldr	r3, [pc, #164]	; 14838 <__assert_fail@plt+0x3a44>
   14790:	ldr	r0, [r5, #56]	; 0x38
   14794:	and	r3, r3, r2
   14798:	cmp	r3, #0
   1479c:	beq	14810 <__assert_fail@plt+0x3a1c>
   147a0:	cmp	r0, #0
   147a4:	beq	147ac <__assert_fail@plt+0x39b8>
   147a8:	bl	166ec <__assert_fail@plt+0x58f8>
   147ac:	mov	r0, r5
   147b0:	bl	12f10 <__assert_fail@plt+0x211c>
   147b4:	cmp	r4, #0
   147b8:	bne	14828 <__assert_fail@plt+0x3a34>
   147bc:	mov	r0, r4
   147c0:	pop	{r4, r5, r6, pc}
   147c4:	tst	r3, #4
   147c8:	bne	1476c <__assert_fail@plt+0x3978>
   147cc:	ldr	r0, [r5, #28]
   147d0:	bl	10d7c <fchdir@plt>
   147d4:	cmp	r0, #0
   147d8:	beq	14820 <__assert_fail@plt+0x3a2c>
   147dc:	bl	10cf8 <__errno_location@plt>
   147e0:	ldr	r4, [r0]
   147e4:	ldr	r0, [r5, #28]
   147e8:	bl	10dc4 <close@plt>
   147ec:	clz	r3, r4
   147f0:	lsr	r3, r3, #5
   147f4:	cmp	r0, #0
   147f8:	moveq	r3, #0
   147fc:	cmp	r3, #0
   14800:	beq	14770 <__assert_fail@plt+0x397c>
   14804:	bl	10cf8 <__errno_location@plt>
   14808:	ldr	r4, [r0]
   1480c:	b	14770 <__assert_fail@plt+0x397c>
   14810:	bl	12f10 <__assert_fail@plt+0x211c>
   14814:	b	147ac <__assert_fail@plt+0x39b8>
   14818:	mov	r4, r3
   1481c:	b	14720 <__assert_fail@plt+0x392c>
   14820:	ldr	r0, [r5, #28]
   14824:	b	14760 <__assert_fail@plt+0x396c>
   14828:	bl	10cf8 <__errno_location@plt>
   1482c:	str	r4, [r0]
   14830:	mvn	r4, #0
   14834:	b	147bc <__assert_fail@plt+0x39c8>
   14838:	andeq	r0, r0, r2, lsl #2
   1483c:	push	{r4, r5, r6, r7, r8, lr}
   14840:	ldr	r5, [r0]
   14844:	cmp	r5, #0
   14848:	beq	1497c <__assert_fail@plt+0x3b88>
   1484c:	ldr	r1, [r0, #48]	; 0x30
   14850:	ands	r3, r1, #8192	; 0x2000
   14854:	bne	1497c <__assert_fail@plt+0x3b88>
   14858:	ldrh	r2, [r5, #60]	; 0x3c
   1485c:	mov	r8, r0
   14860:	mov	r0, #3
   14864:	cmp	r2, #1
   14868:	strh	r0, [r5, #60]	; 0x3c
   1486c:	beq	14be8 <__assert_fail@plt+0x3df4>
   14870:	cmp	r2, #2
   14874:	ldrh	r3, [r5, #56]	; 0x38
   14878:	beq	14988 <__assert_fail@plt+0x3b94>
   1487c:	cmp	r3, #1
   14880:	bne	148b8 <__assert_fail@plt+0x3ac4>
   14884:	cmp	r2, #4
   14888:	bne	1499c <__assert_fail@plt+0x3ba8>
   1488c:	b	149b8 <__assert_fail@plt+0x3bc4>
   14890:	mov	r0, r5
   14894:	str	r4, [r8]
   14898:	bl	12f10 <__assert_fail@plt+0x211c>
   1489c:	ldr	r5, [r4, #48]	; 0x30
   148a0:	cmp	r5, #0
   148a4:	beq	14a00 <__assert_fail@plt+0x3c0c>
   148a8:	ldrh	r3, [r4, #60]	; 0x3c
   148ac:	mov	r5, r4
   148b0:	cmp	r3, #4
   148b4:	bne	14afc <__assert_fail@plt+0x3d08>
   148b8:	ldr	r4, [r5, #8]
   148bc:	cmp	r4, #0
   148c0:	bne	14890 <__assert_fail@plt+0x3a9c>
   148c4:	ldr	r4, [r5, #4]
   148c8:	ldr	r3, [r4, #12]
   148cc:	cmp	r3, #0
   148d0:	bne	14d78 <__assert_fail@plt+0x3f84>
   148d4:	str	r4, [r8]
   148d8:	mov	r0, r5
   148dc:	bl	12f10 <__assert_fail@plt+0x211c>
   148e0:	ldr	r3, [r4, #48]	; 0x30
   148e4:	cmn	r3, #1
   148e8:	beq	14cb4 <__assert_fail@plt+0x3ec0>
   148ec:	ldrh	r3, [r4, #56]	; 0x38
   148f0:	cmp	r3, #11
   148f4:	beq	14b70 <__assert_fail@plt+0x3d7c>
   148f8:	ldr	r3, [r4, #40]	; 0x28
   148fc:	ldr	r2, [r8, #24]
   14900:	mov	r1, #0
   14904:	strb	r1, [r2, r3]
   14908:	ldr	r3, [r4, #48]	; 0x30
   1490c:	cmp	r3, r1
   14910:	beq	14c40 <__assert_fail@plt+0x3e4c>
   14914:	ldrh	r3, [r4, #58]	; 0x3a
   14918:	tst	r3, #2
   1491c:	beq	14c00 <__assert_fail@plt+0x3e0c>
   14920:	ldr	r3, [r8, #48]	; 0x30
   14924:	tst	r3, #4
   14928:	beq	14c64 <__assert_fail@plt+0x3e70>
   1492c:	ldr	r0, [r4, #36]	; 0x24
   14930:	bl	10dc4 <close@plt>
   14934:	ldr	r3, [r8, #48]	; 0x30
   14938:	ldrh	r2, [r4, #56]	; 0x38
   1493c:	cmp	r2, #2
   14940:	beq	14974 <__assert_fail@plt+0x3b80>
   14944:	ldr	r2, [r4, #32]
   14948:	cmp	r2, #0
   1494c:	movne	r2, #7
   14950:	strhne	r2, [r4, #56]	; 0x38
   14954:	bne	14974 <__assert_fail@plt+0x3b80>
   14958:	mov	r2, #6
   1495c:	mov	r0, r3
   14960:	strh	r2, [r4, #56]	; 0x38
   14964:	add	r1, r8, #56	; 0x38
   14968:	mov	r2, r4
   1496c:	bl	138ec <__assert_fail@plt+0x2af8>
   14970:	ldr	r3, [r8, #48]	; 0x30
   14974:	tst	r3, #8192	; 0x2000
   14978:	beq	149f8 <__assert_fail@plt+0x3c04>
   1497c:	mov	r4, #0
   14980:	mov	r0, r4
   14984:	pop	{r4, r5, r6, r7, r8, pc}
   14988:	sub	r2, r3, #12
   1498c:	cmp	r2, #1
   14990:	bls	14c80 <__assert_fail@plt+0x3e8c>
   14994:	cmp	r3, #1
   14998:	bne	148b8 <__assert_fail@plt+0x3ac4>
   1499c:	tst	r1, #64	; 0x40
   149a0:	beq	14b74 <__assert_fail@plt+0x3d80>
   149a4:	ldrd	r6, [r5, #64]	; 0x40
   149a8:	ldrd	r2, [r8, #16]
   149ac:	cmp	r7, r3
   149b0:	cmpeq	r6, r2
   149b4:	beq	14b74 <__assert_fail@plt+0x3d80>
   149b8:	ldrh	r3, [r5, #58]	; 0x3a
   149bc:	tst	r3, #2
   149c0:	bne	14d6c <__assert_fail@plt+0x3f78>
   149c4:	ldr	r0, [r8, #4]
   149c8:	cmp	r0, #0
   149cc:	beq	149dc <__assert_fail@plt+0x3be8>
   149d0:	bl	1318c <__assert_fail@plt+0x2398>
   149d4:	mov	r3, #0
   149d8:	str	r3, [r8, #4]
   149dc:	mov	r3, #6
   149e0:	strh	r3, [r5, #56]	; 0x38
   149e4:	mov	r2, r5
   149e8:	add	r1, r8, #56	; 0x38
   149ec:	ldr	r0, [r8, #48]	; 0x30
   149f0:	mov	r4, r5
   149f4:	bl	138ec <__assert_fail@plt+0x2af8>
   149f8:	mov	r0, r4
   149fc:	pop	{r4, r5, r6, r7, r8, pc}
   14a00:	mov	r0, r8
   14a04:	bl	13388 <__assert_fail@plt+0x2594>
   14a08:	cmp	r0, #0
   14a0c:	bne	14d58 <__assert_fail@plt+0x3f64>
   14a10:	ldr	r2, [r8, #48]	; 0x30
   14a14:	ldr	r3, [pc, #1228]	; 14ee8 <__assert_fail@plt+0x40f4>
   14a18:	ldr	r0, [r8, #56]	; 0x38
   14a1c:	and	r3, r3, r2
   14a20:	cmp	r3, #0
   14a24:	beq	14cd4 <__assert_fail@plt+0x3ee0>
   14a28:	cmp	r0, #0
   14a2c:	beq	14a34 <__assert_fail@plt+0x3c40>
   14a30:	bl	166ec <__assert_fail@plt+0x58f8>
   14a34:	ldr	r2, [r4, #52]	; 0x34
   14a38:	add	r6, r4, #168	; 0xa8
   14a3c:	str	r2, [r4, #40]	; 0x28
   14a40:	mov	r1, r6
   14a44:	add	r2, r2, #1
   14a48:	ldr	r0, [r8, #24]
   14a4c:	bl	10bd8 <memmove@plt>
   14a50:	mov	r0, r6
   14a54:	mov	r1, #47	; 0x2f
   14a58:	bl	10d28 <strrchr@plt>
   14a5c:	cmp	r0, #0
   14a60:	beq	14a90 <__assert_fail@plt+0x3c9c>
   14a64:	cmp	r6, r0
   14a68:	beq	14d48 <__assert_fail@plt+0x3f54>
   14a6c:	add	r5, r0, #1
   14a70:	mov	r0, r5
   14a74:	bl	10cc8 <strlen@plt>
   14a78:	mov	r1, r5
   14a7c:	mov	r7, r0
   14a80:	add	r2, r7, #1
   14a84:	mov	r0, r6
   14a88:	bl	10bd8 <memmove@plt>
   14a8c:	str	r7, [r4, #52]	; 0x34
   14a90:	ldr	r3, [r8, #24]
   14a94:	add	r1, r8, #56	; 0x38
   14a98:	str	r3, [r4, #28]
   14a9c:	str	r3, [r4, #24]
   14aa0:	ldr	r0, [r8, #48]	; 0x30
   14aa4:	bl	135a4 <__assert_fail@plt+0x27b0>
   14aa8:	ldrh	r3, [r4, #56]	; 0x38
   14aac:	cmp	r3, #11
   14ab0:	str	r4, [r8]
   14ab4:	beq	14b54 <__assert_fail@plt+0x3d60>
   14ab8:	cmp	r3, #1
   14abc:	bne	149f8 <__assert_fail@plt+0x3c04>
   14ac0:	ldr	r3, [r4, #48]	; 0x30
   14ac4:	cmp	r3, #0
   14ac8:	ldrdeq	r2, [r4, #64]	; 0x40
   14acc:	strdeq	r2, [r8, #16]
   14ad0:	mov	r2, r4
   14ad4:	add	r1, r8, #56	; 0x38
   14ad8:	ldr	r0, [r8, #48]	; 0x30
   14adc:	bl	1383c <__assert_fail@plt+0x2a48>
   14ae0:	subs	r5, r0, #0
   14ae4:	bne	149f8 <__assert_fail@plt+0x3c04>
   14ae8:	bl	10cf8 <__errno_location@plt>
   14aec:	mov	r3, #12
   14af0:	mov	r4, r5
   14af4:	str	r3, [r0]
   14af8:	b	149f8 <__assert_fail@plt+0x3c04>
   14afc:	cmp	r3, #2
   14b00:	beq	14dac <__assert_fail@plt+0x3fb8>
   14b04:	ldr	r3, [r4, #4]
   14b08:	mov	ip, #47	; 0x2f
   14b0c:	ldr	r2, [r8, #24]
   14b10:	ldr	r0, [r3, #40]	; 0x28
   14b14:	ldr	lr, [r3, #28]
   14b18:	sub	r3, r0, #1
   14b1c:	add	r1, r4, #168	; 0xa8
   14b20:	ldrb	lr, [lr, r3]
   14b24:	cmp	lr, ip
   14b28:	movne	r3, r0
   14b2c:	add	r0, r2, r3
   14b30:	strb	ip, [r2, r3]
   14b34:	ldr	r2, [r4, #52]	; 0x34
   14b38:	add	r0, r0, #1
   14b3c:	add	r2, r2, #1
   14b40:	bl	10bd8 <memmove@plt>
   14b44:	ldrh	r3, [r4, #56]	; 0x38
   14b48:	str	r4, [r8]
   14b4c:	cmp	r3, #11
   14b50:	bne	14ab8 <__assert_fail@plt+0x3cc4>
   14b54:	ldrd	r2, [r4, #112]	; 0x70
   14b58:	cmp	r3, #0
   14b5c:	cmpeq	r2, #2
   14b60:	beq	14dd8 <__assert_fail@plt+0x3fe4>
   14b64:	cmp	r3, #0
   14b68:	cmpeq	r2, #1
   14b6c:	beq	149f8 <__assert_fail@plt+0x3c04>
   14b70:	bl	10db8 <abort@plt>
   14b74:	ldr	r0, [r8, #4]
   14b78:	cmp	r0, #0
   14b7c:	beq	14cf0 <__assert_fail@plt+0x3efc>
   14b80:	tst	r1, #4096	; 0x1000
   14b84:	bne	14cdc <__assert_fail@plt+0x3ee8>
   14b88:	ldr	r3, [r5, #24]
   14b8c:	mvn	r2, #0
   14b90:	mov	r1, r5
   14b94:	mov	r0, r8
   14b98:	bl	13660 <__assert_fail@plt+0x286c>
   14b9c:	cmp	r0, #0
   14ba0:	beq	14c54 <__assert_fail@plt+0x3e60>
   14ba4:	bl	10cf8 <__errno_location@plt>
   14ba8:	ldrh	r3, [r5, #58]	; 0x3a
   14bac:	ldr	r4, [r8, #4]
   14bb0:	orr	r3, r3, #1
   14bb4:	cmp	r4, #0
   14bb8:	ldr	r2, [r0]
   14bbc:	strh	r3, [r5, #58]	; 0x3a
   14bc0:	str	r2, [r5, #32]
   14bc4:	beq	14c58 <__assert_fail@plt+0x3e64>
   14bc8:	mov	r3, r4
   14bcc:	ldr	r2, [r3, #4]
   14bd0:	ldr	r2, [r2, #24]
   14bd4:	str	r2, [r3, #24]
   14bd8:	ldr	r3, [r3, #8]
   14bdc:	cmp	r3, #0
   14be0:	bne	14bcc <__assert_fail@plt+0x3dd8>
   14be4:	b	14c58 <__assert_fail@plt+0x3e64>
   14be8:	ldr	r0, [r8, #32]
   14bec:	mov	r2, r5
   14bf0:	bl	13458 <__assert_fail@plt+0x2664>
   14bf4:	mov	r4, r5
   14bf8:	strh	r0, [r5, #56]	; 0x38
   14bfc:	b	149f8 <__assert_fail@plt+0x3c04>
   14c00:	tst	r3, #1
   14c04:	bne	14934 <__assert_fail@plt+0x3b40>
   14c08:	ldr	r3, [pc, #732]	; 14eec <__assert_fail@plt+0x40f8>
   14c0c:	mvn	r2, #0
   14c10:	ldr	r1, [r4, #4]
   14c14:	mov	r0, r8
   14c18:	bl	13660 <__assert_fail@plt+0x286c>
   14c1c:	cmp	r0, #0
   14c20:	beq	14934 <__assert_fail@plt+0x3b40>
   14c24:	bl	10cf8 <__errno_location@plt>
   14c28:	ldr	r3, [r8, #48]	; 0x30
   14c2c:	orr	r3, r3, #8192	; 0x2000
   14c30:	ldr	r2, [r0]
   14c34:	str	r2, [r4, #32]
   14c38:	str	r3, [r8, #48]	; 0x30
   14c3c:	b	14938 <__assert_fail@plt+0x3b44>
   14c40:	mov	r0, r8
   14c44:	bl	13388 <__assert_fail@plt+0x2594>
   14c48:	cmp	r0, #0
   14c4c:	bne	14c24 <__assert_fail@plt+0x3e30>
   14c50:	b	14934 <__assert_fail@plt+0x3b40>
   14c54:	ldr	r4, [r8, #4]
   14c58:	mov	r3, #0
   14c5c:	str	r3, [r8, #4]
   14c60:	b	14b04 <__assert_fail@plt+0x3d10>
   14c64:	tst	r3, #512	; 0x200
   14c68:	beq	14df8 <__assert_fail@plt+0x4004>
   14c6c:	mov	r2, #1
   14c70:	ldr	r1, [r4, #36]	; 0x24
   14c74:	mov	r0, r8
   14c78:	bl	13308 <__assert_fail@plt+0x2514>
   14c7c:	b	1492c <__assert_fail@plt+0x3b38>
   14c80:	mov	r3, #1
   14c84:	mov	r2, r5
   14c88:	ldr	r0, [r8, #32]
   14c8c:	bl	13458 <__assert_fail@plt+0x2664>
   14c90:	cmp	r0, #1
   14c94:	mov	r3, r0
   14c98:	strh	r0, [r5, #56]	; 0x38
   14c9c:	beq	14e38 <__assert_fail@plt+0x4044>
   14ca0:	cmp	r0, #11
   14ca4:	mov	r4, r5
   14ca8:	str	r5, [r8]
   14cac:	bne	149f8 <__assert_fail@plt+0x3c04>
   14cb0:	b	14b54 <__assert_fail@plt+0x3d60>
   14cb4:	mov	r0, r4
   14cb8:	bl	12f10 <__assert_fail@plt+0x211c>
   14cbc:	bl	10cf8 <__errno_location@plt>
   14cc0:	mov	r3, #0
   14cc4:	mov	r4, r3
   14cc8:	str	r3, [r0]
   14ccc:	str	r3, [r8]
   14cd0:	b	149f8 <__assert_fail@plt+0x3c04>
   14cd4:	bl	12f10 <__assert_fail@plt+0x211c>
   14cd8:	b	14a34 <__assert_fail@plt+0x3c40>
   14cdc:	bic	r1, r1, #4096	; 0x1000
   14ce0:	str	r1, [r8, #48]	; 0x30
   14ce4:	bl	1318c <__assert_fail@plt+0x2398>
   14ce8:	mov	r3, #0
   14cec:	str	r3, [r8, #4]
   14cf0:	mov	r1, #3
   14cf4:	mov	r0, r8
   14cf8:	bl	139a4 <__assert_fail@plt+0x2bb0>
   14cfc:	cmp	r0, #0
   14d00:	mov	r4, r0
   14d04:	str	r0, [r8, #4]
   14d08:	bne	14c58 <__assert_fail@plt+0x3e64>
   14d0c:	ldr	r0, [r8, #48]	; 0x30
   14d10:	tst	r0, #8192	; 0x2000
   14d14:	bne	1497c <__assert_fail@plt+0x3b88>
   14d18:	ldr	r3, [r5, #32]
   14d1c:	cmp	r3, #0
   14d20:	beq	14d34 <__assert_fail@plt+0x3f40>
   14d24:	ldrh	r3, [r5, #56]	; 0x38
   14d28:	cmp	r3, #4
   14d2c:	movne	r3, #7
   14d30:	strhne	r3, [r5, #56]	; 0x38
   14d34:	add	r1, r8, #56	; 0x38
   14d38:	mov	r2, r5
   14d3c:	bl	138ec <__assert_fail@plt+0x2af8>
   14d40:	mov	r4, r5
   14d44:	b	149f8 <__assert_fail@plt+0x3c04>
   14d48:	ldrb	r3, [r4, #169]	; 0xa9
   14d4c:	cmp	r3, #0
   14d50:	bne	14a6c <__assert_fail@plt+0x3c78>
   14d54:	b	14a90 <__assert_fail@plt+0x3c9c>
   14d58:	ldr	r3, [r8, #48]	; 0x30
   14d5c:	mov	r4, r5
   14d60:	orr	r3, r3, #8192	; 0x2000
   14d64:	str	r3, [r8, #48]	; 0x30
   14d68:	b	149f8 <__assert_fail@plt+0x3c04>
   14d6c:	ldr	r0, [r5, #36]	; 0x24
   14d70:	bl	10dc4 <close@plt>
   14d74:	b	149c4 <__assert_fail@plt+0x3bd0>
   14d78:	ldr	r3, [r4, #40]	; 0x28
   14d7c:	ldr	r2, [r8, #24]
   14d80:	mov	r0, #0
   14d84:	str	r4, [r8]
   14d88:	mov	r1, #3
   14d8c:	strb	r0, [r2, r3]
   14d90:	mov	r0, r8
   14d94:	bl	139a4 <__assert_fail@plt+0x2bb0>
   14d98:	subs	r4, r0, #0
   14d9c:	beq	14e24 <__assert_fail@plt+0x4030>
   14da0:	mov	r0, r5
   14da4:	bl	12f10 <__assert_fail@plt+0x211c>
   14da8:	b	14b04 <__assert_fail@plt+0x3d10>
   14dac:	mov	r3, #1
   14db0:	mov	r2, r4
   14db4:	ldr	r1, [r8, #48]	; 0x30
   14db8:	ldr	r0, [r8, #32]
   14dbc:	bl	13458 <__assert_fail@plt+0x2664>
   14dc0:	cmp	r0, #1
   14dc4:	strh	r0, [r4, #56]	; 0x38
   14dc8:	beq	14e50 <__assert_fail@plt+0x405c>
   14dcc:	mov	r3, #3
   14dd0:	strh	r3, [r4, #60]	; 0x3c
   14dd4:	b	14b04 <__assert_fail@plt+0x3d10>
   14dd8:	mov	r3, #0
   14ddc:	mov	r2, r4
   14de0:	ldr	r1, [r8, #48]	; 0x30
   14de4:	ldr	r0, [r8, #32]
   14de8:	bl	13458 <__assert_fail@plt+0x2664>
   14dec:	mov	r3, r0
   14df0:	strh	r0, [r4, #56]	; 0x38
   14df4:	b	14ab8 <__assert_fail@plt+0x3cc4>
   14df8:	ldr	r0, [r4, #36]	; 0x24
   14dfc:	bl	10d7c <fchdir@plt>
   14e00:	cmp	r0, #0
   14e04:	beq	1492c <__assert_fail@plt+0x3b38>
   14e08:	bl	10cf8 <__errno_location@plt>
   14e0c:	ldr	r3, [r8, #48]	; 0x30
   14e10:	orr	r3, r3, #8192	; 0x2000
   14e14:	ldr	r2, [r0]
   14e18:	str	r2, [r4, #32]
   14e1c:	str	r3, [r8, #48]	; 0x30
   14e20:	b	1492c <__assert_fail@plt+0x3b38>
   14e24:	ldr	r3, [r8, #48]	; 0x30
   14e28:	tst	r3, #8192	; 0x2000
   14e2c:	bne	1497c <__assert_fail@plt+0x3b88>
   14e30:	ldr	r4, [r5, #4]
   14e34:	b	148d4 <__assert_fail@plt+0x3ae0>
   14e38:	ldr	r1, [r8, #48]	; 0x30
   14e3c:	tst	r1, #4
   14e40:	beq	14e84 <__assert_fail@plt+0x4090>
   14e44:	str	r5, [r8]
   14e48:	mov	r4, r5
   14e4c:	b	14ab8 <__assert_fail@plt+0x3cc4>
   14e50:	ldr	r1, [r8, #48]	; 0x30
   14e54:	tst	r1, #4
   14e58:	bne	14dcc <__assert_fail@plt+0x3fd8>
   14e5c:	ldr	r2, [pc, #140]	; 14ef0 <__assert_fail@plt+0x40fc>
   14e60:	ldr	r0, [r8, #32]
   14e64:	bl	13624 <__assert_fail@plt+0x2830>
   14e68:	cmp	r0, #0
   14e6c:	str	r0, [r4, #36]	; 0x24
   14e70:	blt	14eb4 <__assert_fail@plt+0x40c0>
   14e74:	ldrh	r3, [r4, #58]	; 0x3a
   14e78:	orr	r3, r3, #2
   14e7c:	strh	r3, [r4, #58]	; 0x3a
   14e80:	b	14dcc <__assert_fail@plt+0x3fd8>
   14e84:	ldr	r2, [pc, #100]	; 14ef0 <__assert_fail@plt+0x40fc>
   14e88:	ldr	r0, [r8, #32]
   14e8c:	bl	13624 <__assert_fail@plt+0x2830>
   14e90:	cmp	r0, #0
   14e94:	str	r0, [r5, #36]	; 0x24
   14e98:	blt	14ecc <__assert_fail@plt+0x40d8>
   14e9c:	ldrh	r2, [r5, #58]	; 0x3a
   14ea0:	ldrh	r3, [r5, #56]	; 0x38
   14ea4:	mov	r4, r5
   14ea8:	orr	r2, r2, #2
   14eac:	strh	r2, [r5, #58]	; 0x3a
   14eb0:	b	14aac <__assert_fail@plt+0x3cb8>
   14eb4:	bl	10cf8 <__errno_location@plt>
   14eb8:	mov	r2, #7
   14ebc:	ldr	r3, [r0]
   14ec0:	strh	r2, [r4, #56]	; 0x38
   14ec4:	str	r3, [r4, #32]
   14ec8:	b	14dcc <__assert_fail@plt+0x3fd8>
   14ecc:	bl	10cf8 <__errno_location@plt>
   14ed0:	mov	r2, #7
   14ed4:	mov	r3, r2
   14ed8:	ldr	r1, [r0]
   14edc:	strh	r2, [r5, #56]	; 0x38
   14ee0:	str	r1, [r5, #32]
   14ee4:	b	14e44 <__assert_fail@plt+0x4050>
   14ee8:	andeq	r0, r0, r2, lsl #2
   14eec:	andeq	r7, r1, r4, lsr #21
   14ef0:	andeq	r7, r1, r8, lsr #21
   14ef4:	cmp	r2, #4
   14ef8:	bhi	14f0c <__assert_fail@plt+0x4118>
   14efc:	mov	r3, #0
   14f00:	strh	r2, [r1, #60]	; 0x3c
   14f04:	mov	r0, r3
   14f08:	bx	lr
   14f0c:	push	{r4, lr}
   14f10:	bl	10cf8 <__errno_location@plt>
   14f14:	mov	r2, #22
   14f18:	mov	r3, #1
   14f1c:	str	r2, [r0]
   14f20:	mov	r0, r3
   14f24:	pop	{r4, pc}
   14f28:	push	{r4, r5, r6, r7, r8, lr}
   14f2c:	bics	r8, r1, #4096	; 0x1000
   14f30:	bne	15030 <__assert_fail@plt+0x423c>
   14f34:	mov	r5, r0
   14f38:	mov	r4, r1
   14f3c:	bl	10cf8 <__errno_location@plt>
   14f40:	ldr	r6, [r5]
   14f44:	str	r8, [r0]
   14f48:	ldr	r3, [r5, #48]	; 0x30
   14f4c:	mov	r7, r0
   14f50:	ands	r3, r3, #8192	; 0x2000
   14f54:	bne	15048 <__assert_fail@plt+0x4254>
   14f58:	ldrh	r2, [r6, #56]	; 0x38
   14f5c:	cmp	r2, #9
   14f60:	ldreq	r3, [r6, #8]
   14f64:	beq	14fd4 <__assert_fail@plt+0x41e0>
   14f68:	cmp	r2, #1
   14f6c:	bne	14fd4 <__assert_fail@plt+0x41e0>
   14f70:	ldr	r0, [r5, #4]
   14f74:	cmp	r0, #0
   14f78:	beq	14f80 <__assert_fail@plt+0x418c>
   14f7c:	bl	1318c <__assert_fail@plt+0x2398>
   14f80:	cmp	r4, #4096	; 0x1000
   14f84:	moveq	r8, #2
   14f88:	ldreq	r3, [r5, #48]	; 0x30
   14f8c:	movne	r8, #1
   14f90:	orreq	r3, r3, #4096	; 0x1000
   14f94:	streq	r3, [r5, #48]	; 0x30
   14f98:	ldr	r3, [r6, #48]	; 0x30
   14f9c:	cmp	r3, #0
   14fa0:	bne	14fc0 <__assert_fail@plt+0x41cc>
   14fa4:	ldr	r3, [r6, #24]
   14fa8:	ldrb	r3, [r3]
   14fac:	cmp	r3, #47	; 0x2f
   14fb0:	beq	14fc0 <__assert_fail@plt+0x41cc>
   14fb4:	ldr	r1, [r5, #48]	; 0x30
   14fb8:	ands	r4, r1, #4
   14fbc:	beq	14fdc <__assert_fail@plt+0x41e8>
   14fc0:	mov	r1, r8
   14fc4:	mov	r0, r5
   14fc8:	bl	139a4 <__assert_fail@plt+0x2bb0>
   14fcc:	mov	r3, r0
   14fd0:	str	r0, [r5, #4]
   14fd4:	mov	r0, r3
   14fd8:	pop	{r4, r5, r6, r7, r8, pc}
   14fdc:	ldr	r2, [pc, #160]	; 15084 <__assert_fail@plt+0x4290>
   14fe0:	ldr	r0, [r5, #32]
   14fe4:	bl	13624 <__assert_fail@plt+0x2830>
   14fe8:	subs	r6, r0, #0
   14fec:	strlt	r4, [r5, #4]
   14ff0:	movlt	r3, r4
   14ff4:	blt	14fd4 <__assert_fail@plt+0x41e0>
   14ff8:	mov	r1, r8
   14ffc:	mov	r0, r5
   15000:	bl	139a4 <__assert_fail@plt+0x2bb0>
   15004:	ldr	r3, [r5, #48]	; 0x30
   15008:	ands	r4, r3, #512	; 0x200
   1500c:	str	r0, [r5, #4]
   15010:	beq	15050 <__assert_fail@plt+0x425c>
   15014:	mov	r1, r6
   15018:	mov	r2, #1
   1501c:	mov	r0, r5
   15020:	bl	13308 <__assert_fail@plt+0x2514>
   15024:	ldr	r3, [r5, #4]
   15028:	mov	r0, r3
   1502c:	pop	{r4, r5, r6, r7, r8, pc}
   15030:	bl	10cf8 <__errno_location@plt>
   15034:	mov	r2, #22
   15038:	mov	r3, #0
   1503c:	str	r2, [r0]
   15040:	mov	r0, r3
   15044:	pop	{r4, r5, r6, r7, r8, pc}
   15048:	mov	r3, r8
   1504c:	b	14fd4 <__assert_fail@plt+0x41e0>
   15050:	mov	r0, r6
   15054:	bl	10d7c <fchdir@plt>
   15058:	cmp	r0, #0
   1505c:	bne	1506c <__assert_fail@plt+0x4278>
   15060:	mov	r0, r6
   15064:	bl	10dc4 <close@plt>
   15068:	b	15024 <__assert_fail@plt+0x4230>
   1506c:	ldr	r5, [r7]
   15070:	mov	r0, r6
   15074:	bl	10dc4 <close@plt>
   15078:	str	r5, [r7]
   1507c:	mov	r3, r4
   15080:	b	14fd4 <__assert_fail@plt+0x41e0>
   15084:	andeq	r7, r1, r8, lsr #21
   15088:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1508c:	ldr	r4, [r1, #32]
   15090:	ldr	r8, [r1, #28]
   15094:	ldr	r7, [r1]
   15098:	add	r6, r0, r4, lsl #2
   1509c:	mov	r2, r8
   150a0:	mov	r5, r7
   150a4:	cmp	r5, r4
   150a8:	movle	r3, #0
   150ac:	movgt	r3, #1
   150b0:	cmp	r2, r4
   150b4:	movge	r3, #0
   150b8:	cmp	r3, #0
   150bc:	beq	15130 <__assert_fail@plt+0x433c>
   150c0:	sub	r3, r5, r4
   150c4:	sub	sl, r4, r2
   150c8:	cmp	r3, sl
   150cc:	ble	15100 <__assert_fail@plt+0x430c>
   150d0:	sub	r5, r5, sl
   150d4:	add	sl, sl, r2
   150d8:	add	ip, r0, r5, lsl #2
   150dc:	add	sl, r0, sl, lsl #2
   150e0:	add	r3, r0, r2, lsl #2
   150e4:	ldr	r9, [ip]
   150e8:	ldr	lr, [r3]
   150ec:	str	r9, [r3], #4
   150f0:	cmp	sl, r3
   150f4:	str	lr, [ip], #4
   150f8:	bne	150e4 <__assert_fail@plt+0x42f0>
   150fc:	b	150a4 <__assert_fail@plt+0x42b0>
   15100:	add	sl, r3, r2
   15104:	add	r3, r0, r2, lsl #2
   15108:	add	r9, r0, sl, lsl #2
   1510c:	mov	r2, r6
   15110:	ldr	lr, [r2]
   15114:	ldr	ip, [r3]
   15118:	str	lr, [r3], #4
   1511c:	cmp	r3, r9
   15120:	str	ip, [r2], #4
   15124:	bne	15110 <__assert_fail@plt+0x431c>
   15128:	mov	r2, sl
   1512c:	b	150a4 <__assert_fail@plt+0x42b0>
   15130:	sub	r4, r7, r4
   15134:	add	r8, r4, r8
   15138:	str	r8, [r1, #28]
   1513c:	str	r7, [r1, #32]
   15140:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15144:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15148:	sub	sp, sp, #44	; 0x2c
   1514c:	str	r1, [sp, #20]
   15150:	ldr	r1, [sp, #88]	; 0x58
   15154:	str	r0, [sp, #24]
   15158:	str	r2, [sp, #28]
   1515c:	ldr	r8, [r1, #20]
   15160:	str	r3, [sp, #12]
   15164:	mov	r7, r8
   15168:	ldrb	r5, [r8]
   1516c:	cmp	r5, #61	; 0x3d
   15170:	cmpne	r5, #0
   15174:	movne	r5, #1
   15178:	moveq	r5, #0
   1517c:	beq	15194 <__assert_fail@plt+0x43a0>
   15180:	ldrb	r3, [r7, #1]!
   15184:	cmp	r3, #0
   15188:	cmpne	r3, #61	; 0x3d
   1518c:	bne	15180 <__assert_fail@plt+0x438c>
   15190:	sub	r5, r7, r8
   15194:	ldr	r3, [sp, #12]
   15198:	ldr	sl, [r3]
   1519c:	cmp	sl, #0
   151a0:	beq	15454 <__assert_fail@plt+0x4660>
   151a4:	mov	fp, r3
   151a8:	mov	r4, sl
   151ac:	mov	r6, #0
   151b0:	mov	r2, r5
   151b4:	mov	r1, r8
   151b8:	mov	r0, r4
   151bc:	bl	10dac <strncmp@plt>
   151c0:	mov	r9, fp
   151c4:	cmp	r0, #0
   151c8:	mov	r0, r4
   151cc:	bne	151dc <__assert_fail@plt+0x43e8>
   151d0:	bl	10cc8 <strlen@plt>
   151d4:	cmp	r0, r5
   151d8:	beq	15268 <__assert_fail@plt+0x4474>
   151dc:	ldr	r4, [fp, #16]!
   151e0:	add	r6, r6, #1
   151e4:	cmp	r4, #0
   151e8:	bne	151b0 <__assert_fail@plt+0x43bc>
   151ec:	ldr	r3, [sp, #12]
   151f0:	ldr	fp, [sp, #88]	; 0x58
   151f4:	mov	r0, sl
   151f8:	mov	r1, r8
   151fc:	mov	r9, r4
   15200:	mov	sl, r4
   15204:	mov	r8, r3
   15208:	mvn	r2, #0
   1520c:	str	r4, [sp, #36]	; 0x24
   15210:	str	r4, [sp, #16]
   15214:	str	r2, [sp, #32]
   15218:	mov	r2, r5
   1521c:	bl	10dac <strncmp@plt>
   15220:	cmp	r0, #0
   15224:	bne	15244 <__assert_fail@plt+0x4450>
   15228:	cmp	r9, #0
   1522c:	beq	154c4 <__assert_fail@plt+0x46d0>
   15230:	ldr	r3, [sp, #84]	; 0x54
   15234:	cmp	r3, #0
   15238:	beq	1530c <__assert_fail@plt+0x4518>
   1523c:	cmp	r4, #0
   15240:	beq	15340 <__assert_fail@plt+0x454c>
   15244:	ldr	r0, [r8, #16]!
   15248:	add	sl, sl, #1
   1524c:	cmp	r0, #0
   15250:	beq	15374 <__assert_fail@plt+0x4580>
   15254:	ldr	r1, [fp, #20]
   15258:	b	15218 <__assert_fail@plt+0x4424>
   1525c:	cmp	r9, #0
   15260:	beq	15454 <__assert_fail@plt+0x4660>
   15264:	ldr	r6, [sp, #32]
   15268:	ldr	r3, [sp, #88]	; 0x58
   1526c:	ldr	r0, [sp, #88]	; 0x58
   15270:	mov	r1, #0
   15274:	ldr	r2, [r3]
   15278:	str	r1, [r0, #20]
   1527c:	add	r3, r2, #1
   15280:	str	r3, [r0]
   15284:	ldrb	r1, [r7]
   15288:	cmp	r1, #0
   1528c:	bne	152cc <__assert_fail@plt+0x44d8>
   15290:	ldr	r1, [r9, #4]
   15294:	cmp	r1, #1
   15298:	beq	154d0 <__assert_fail@plt+0x46dc>
   1529c:	ldr	r3, [sp, #80]	; 0x50
   152a0:	ldr	r2, [r9, #8]
   152a4:	cmp	r3, #0
   152a8:	strne	r6, [r3]
   152ac:	cmp	r2, #0
   152b0:	movne	r3, #0
   152b4:	ldreq	r3, [r9, #12]
   152b8:	ldrne	r1, [r9, #12]
   152bc:	strne	r1, [r2]
   152c0:	mov	r0, r3
   152c4:	add	sp, sp, #44	; 0x2c
   152c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152cc:	ldr	r3, [r9, #4]
   152d0:	cmp	r3, #0
   152d4:	movne	r3, r0
   152d8:	addne	r7, r7, #1
   152dc:	strne	r7, [r3, #12]
   152e0:	bne	1529c <__assert_fail@plt+0x44a8>
   152e4:	ldr	r3, [sp, #92]	; 0x5c
   152e8:	cmp	r3, #0
   152ec:	bne	1541c <__assert_fail@plt+0x4628>
   152f0:	ldr	r1, [sp, #88]	; 0x58
   152f4:	ldr	r2, [r9, #12]
   152f8:	mov	r3, #63	; 0x3f
   152fc:	str	r2, [r1, #8]
   15300:	mov	r0, r3
   15304:	add	sp, sp, #44	; 0x2c
   15308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1530c:	ldr	r2, [r9, #4]
   15310:	ldr	r3, [r8, #4]
   15314:	cmp	r2, r3
   15318:	bne	1523c <__assert_fail@plt+0x4448>
   1531c:	ldr	r2, [r9, #8]
   15320:	ldr	r3, [r8, #8]
   15324:	cmp	r2, r3
   15328:	bne	1523c <__assert_fail@plt+0x4448>
   1532c:	ldr	r2, [r9, #12]
   15330:	ldr	r3, [r8, #12]
   15334:	cmp	r2, r3
   15338:	bne	1523c <__assert_fail@plt+0x4448>
   1533c:	b	15244 <__assert_fail@plt+0x4450>
   15340:	ldr	r3, [sp, #92]	; 0x5c
   15344:	cmp	r3, #0
   15348:	ldr	r3, [sp, #16]
   1534c:	beq	1540c <__assert_fail@plt+0x4618>
   15350:	cmp	r3, #0
   15354:	beq	15628 <__assert_fail@plt+0x4834>
   15358:	ldr	r3, [sp, #16]
   1535c:	ldr	r0, [r8, #16]!
   15360:	mov	r2, #1
   15364:	cmp	r0, #0
   15368:	strb	r2, [r3, sl]
   1536c:	add	sl, sl, #1
   15370:	bne	15254 <__assert_fail@plt+0x4460>
   15374:	ldr	r3, [sp, #16]
   15378:	cmp	r3, #0
   1537c:	cmpeq	r4, #0
   15380:	beq	1525c <__assert_fail@plt+0x4468>
   15384:	ldr	r3, [sp, #92]	; 0x5c
   15388:	cmp	r3, #0
   1538c:	beq	1550c <__assert_fail@plt+0x4718>
   15390:	cmp	r4, #0
   15394:	bne	15594 <__assert_fail@plt+0x47a0>
   15398:	ldr	r5, [pc, #716]	; 1566c <__assert_fail@plt+0x4878>
   1539c:	ldr	r8, [sp, #16]
   153a0:	ldr	r7, [pc, #712]	; 15670 <__assert_fail@plt+0x487c>
   153a4:	ldr	r0, [r5]
   153a8:	bl	10d70 <flockfile@plt>
   153ac:	ldr	r3, [sp, #20]
   153b0:	ldr	r0, [r5]
   153b4:	ldr	r1, [pc, #696]	; 15674 <__assert_fail@plt+0x4880>
   153b8:	ldr	r2, [r3]
   153bc:	ldr	r3, [sp, #88]	; 0x58
   153c0:	add	r6, r8, r6
   153c4:	ldr	r3, [r3, #20]
   153c8:	str	r3, [sp]
   153cc:	ldr	r3, [sp, #96]	; 0x60
   153d0:	bl	10cec <fprintf@plt>
   153d4:	ldr	r9, [sp, #12]
   153d8:	b	153e8 <__assert_fail@plt+0x45f4>
   153dc:	cmp	r8, r6
   153e0:	add	r4, r4, #1
   153e4:	beq	154f8 <__assert_fail@plt+0x4704>
   153e8:	ldrb	r3, [r8], #1
   153ec:	cmp	r3, #0
   153f0:	beq	153dc <__assert_fail@plt+0x45e8>
   153f4:	ldr	r3, [r9, r4, lsl #4]
   153f8:	ldr	r2, [sp, #96]	; 0x60
   153fc:	mov	r1, r7
   15400:	ldr	r0, [r5]
   15404:	bl	10cec <fprintf@plt>
   15408:	b	153dc <__assert_fail@plt+0x45e8>
   1540c:	cmp	r3, #0
   15410:	mov	r4, #1
   15414:	bne	15358 <__assert_fail@plt+0x4564>
   15418:	b	15244 <__assert_fail@plt+0x4450>
   1541c:	ldr	r3, [sp, #20]
   15420:	ldr	r1, [pc, #580]	; 1566c <__assert_fail@plt+0x4878>
   15424:	ldr	r2, [r3]
   15428:	ldr	r3, [r9]
   1542c:	ldr	r0, [r1]
   15430:	str	r3, [sp]
   15434:	ldr	r1, [pc, #572]	; 15678 <__assert_fail@plt+0x4884>
   15438:	ldr	r3, [sp, #96]	; 0x60
   1543c:	bl	10cec <fprintf@plt>
   15440:	ldr	r1, [sp, #88]	; 0x58
   15444:	ldr	r2, [r9, #12]
   15448:	mov	r3, #63	; 0x3f
   1544c:	str	r2, [r1, #8]
   15450:	b	15300 <__assert_fail@plt+0x450c>
   15454:	ldr	r3, [sp, #84]	; 0x54
   15458:	cmp	r3, #0
   1545c:	bne	155e8 <__assert_fail@plt+0x47f4>
   15460:	ldr	r3, [sp, #92]	; 0x5c
   15464:	cmp	r3, #0
   15468:	beq	15494 <__assert_fail@plt+0x46a0>
   1546c:	ldr	r3, [sp, #20]
   15470:	ldr	r1, [pc, #500]	; 1566c <__assert_fail@plt+0x4878>
   15474:	ldr	r2, [r3]
   15478:	ldr	r3, [sp, #88]	; 0x58
   1547c:	ldr	r0, [r1]
   15480:	ldr	r1, [pc, #500]	; 1567c <__assert_fail@plt+0x4888>
   15484:	ldr	r3, [r3, #20]
   15488:	str	r3, [sp]
   1548c:	ldr	r3, [sp, #96]	; 0x60
   15490:	bl	10cec <fprintf@plt>
   15494:	ldr	r3, [sp, #88]	; 0x58
   15498:	ldr	r1, [sp, #88]	; 0x58
   1549c:	mov	r2, #0
   154a0:	ldr	r3, [r3]
   154a4:	str	r2, [r1, #20]
   154a8:	add	r3, r3, #1
   154ac:	str	r3, [r1]
   154b0:	mov	r3, #63	; 0x3f
   154b4:	mov	r0, r3
   154b8:	str	r2, [r1, #8]
   154bc:	add	sp, sp, #44	; 0x2c
   154c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   154c4:	str	sl, [sp, #32]
   154c8:	mov	r9, r8
   154cc:	b	15244 <__assert_fail@plt+0x4450>
   154d0:	ldr	r1, [sp, #24]
   154d4:	cmp	r3, r1
   154d8:	bge	15564 <__assert_fail@plt+0x4770>
   154dc:	ldr	r1, [sp, #20]
   154e0:	add	r2, r2, #2
   154e4:	ldr	r3, [r1, r3, lsl #2]
   154e8:	ldr	r1, [sp, #88]	; 0x58
   154ec:	str	r3, [r1, #12]
   154f0:	str	r2, [r1]
   154f4:	b	1529c <__assert_fail@plt+0x44a8>
   154f8:	ldr	r1, [r5]
   154fc:	mov	r0, #10
   15500:	bl	10d34 <fputc@plt>
   15504:	ldr	r0, [r5]
   15508:	bl	10c20 <funlockfile@plt>
   1550c:	ldr	r3, [sp, #36]	; 0x24
   15510:	cmp	r3, #0
   15514:	beq	15520 <__assert_fail@plt+0x472c>
   15518:	ldr	r0, [sp, #16]
   1551c:	bl	12f10 <__assert_fail@plt+0x211c>
   15520:	ldr	r3, [sp, #88]	; 0x58
   15524:	ldr	r4, [r3, #20]
   15528:	mov	r0, r4
   1552c:	bl	10cc8 <strlen@plt>
   15530:	ldr	r3, [sp, #88]	; 0x58
   15534:	ldr	r1, [sp, #88]	; 0x58
   15538:	mov	r2, #0
   1553c:	ldr	r3, [r3]
   15540:	str	r2, [r1, #8]
   15544:	add	r3, r3, #1
   15548:	str	r3, [r1]
   1554c:	mov	r3, #63	; 0x3f
   15550:	add	r0, r4, r0
   15554:	str	r0, [r1, #20]
   15558:	mov	r0, r3
   1555c:	add	sp, sp, #44	; 0x2c
   15560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15564:	ldr	r3, [sp, #92]	; 0x5c
   15568:	cmp	r3, #0
   1556c:	bne	155c0 <__assert_fail@plt+0x47cc>
   15570:	ldr	r2, [sp, #88]	; 0x58
   15574:	ldr	r3, [r9, #12]
   15578:	str	r3, [r2, #8]
   1557c:	ldr	r3, [sp, #28]
   15580:	ldrb	r3, [r3]
   15584:	cmp	r3, #58	; 0x3a
   15588:	movne	r3, #63	; 0x3f
   1558c:	moveq	r3, #58	; 0x3a
   15590:	b	152c0 <__assert_fail@plt+0x44cc>
   15594:	ldr	r3, [sp, #20]
   15598:	ldr	r1, [pc, #204]	; 1566c <__assert_fail@plt+0x4878>
   1559c:	ldr	r2, [r3]
   155a0:	ldr	r3, [sp, #88]	; 0x58
   155a4:	ldr	r0, [r1]
   155a8:	ldr	r1, [pc, #208]	; 15680 <__assert_fail@plt+0x488c>
   155ac:	ldr	r3, [r3, #20]
   155b0:	str	r3, [sp]
   155b4:	ldr	r3, [sp, #96]	; 0x60
   155b8:	bl	10cec <fprintf@plt>
   155bc:	b	1550c <__assert_fail@plt+0x4718>
   155c0:	ldr	r3, [sp, #20]
   155c4:	ldr	r1, [pc, #160]	; 1566c <__assert_fail@plt+0x4878>
   155c8:	ldr	r2, [r3]
   155cc:	ldr	r3, [r9]
   155d0:	ldr	r0, [r1]
   155d4:	str	r3, [sp]
   155d8:	ldr	r1, [pc, #164]	; 15684 <__assert_fail@plt+0x4890>
   155dc:	ldr	r3, [sp, #96]	; 0x60
   155e0:	bl	10cec <fprintf@plt>
   155e4:	b	15570 <__assert_fail@plt+0x477c>
   155e8:	ldr	r3, [sp, #88]	; 0x58
   155ec:	ldr	r2, [sp, #20]
   155f0:	ldr	r3, [r3]
   155f4:	ldr	r3, [r2, r3, lsl #2]
   155f8:	ldrb	r3, [r3, #1]
   155fc:	cmp	r3, #45	; 0x2d
   15600:	beq	15460 <__assert_fail@plt+0x466c>
   15604:	ldr	r3, [sp, #88]	; 0x58
   15608:	ldr	r0, [sp, #28]
   1560c:	ldr	r3, [r3, #20]
   15610:	ldrb	r1, [r3]
   15614:	bl	10cd4 <strchr@plt>
   15618:	cmp	r0, #0
   1561c:	beq	15460 <__assert_fail@plt+0x466c>
   15620:	mvn	r3, #0
   15624:	b	152c0 <__assert_fail@plt+0x44cc>
   15628:	mov	r0, r6
   1562c:	bl	16e90 <__assert_fail@plt+0x609c>
   15630:	subs	r3, r0, #0
   15634:	str	r3, [sp, #16]
   15638:	beq	15664 <__assert_fail@plt+0x4870>
   1563c:	mov	r2, r6
   15640:	mov	r1, #0
   15644:	bl	10d10 <memset@plt>
   15648:	mov	r3, #1
   1564c:	str	r3, [sp, #36]	; 0x24
   15650:	ldr	r2, [sp, #32]
   15654:	ldr	r3, [sp, #16]
   15658:	mov	r1, #1
   1565c:	strb	r1, [r3, r2]
   15660:	b	15358 <__assert_fail@plt+0x4564>
   15664:	mov	r4, #1
   15668:	b	15244 <__assert_fail@plt+0x4450>
   1566c:	andeq	r8, r2, r0, lsl r1
   15670:	strdeq	r7, [r1], -ip
   15674:	andeq	r7, r1, ip, asr #21
   15678:	andeq	r7, r1, r4, lsr #22
   1567c:	andeq	r7, r1, r4, lsl #22
   15680:	andeq	r7, r1, ip, lsr #21
   15684:	andeq	r7, r1, r4, asr fp
   15688:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1568c:	sub	sp, sp, #36	; 0x24
   15690:	subs	r6, r0, #0
   15694:	ldr	r4, [sp, #80]	; 0x50
   15698:	ldr	r8, [r4, #4]
   1569c:	ble	15878 <__assert_fail@plt+0x4a84>
   156a0:	mov	sl, r3
   156a4:	ldr	r3, [r4]
   156a8:	mov	r7, r2
   156ac:	mov	r2, #0
   156b0:	cmp	r3, r2
   156b4:	mov	r9, r1
   156b8:	str	r2, [r4, #12]
   156bc:	beq	15900 <__assert_fail@plt+0x4b0c>
   156c0:	ldr	r2, [r4, #16]
   156c4:	cmp	r2, #0
   156c8:	bne	15884 <__assert_fail@plt+0x4a90>
   156cc:	mov	r5, #0
   156d0:	str	r3, [r4, #32]
   156d4:	str	r3, [r4, #28]
   156d8:	str	r5, [r4, #20]
   156dc:	ldrb	r3, [r7]
   156e0:	cmp	r3, #45	; 0x2d
   156e4:	moveq	r3, #2
   156e8:	addeq	r7, r7, #1
   156ec:	streq	r3, [r4, #24]
   156f0:	beq	15718 <__assert_fail@plt+0x4924>
   156f4:	cmp	r3, #43	; 0x2b
   156f8:	streq	r5, [r4, #24]
   156fc:	addeq	r7, r7, #1
   15700:	beq	15718 <__assert_fail@plt+0x4924>
   15704:	ldr	r3, [sp, #84]	; 0x54
   15708:	cmp	r3, #0
   1570c:	beq	159a0 <__assert_fail@plt+0x4bac>
   15710:	mov	r3, #0
   15714:	str	r3, [r4, #24]
   15718:	mov	r3, #1
   1571c:	str	r3, [r4, #16]
   15720:	ldrb	r3, [r7]
   15724:	cmp	r3, #58	; 0x3a
   15728:	moveq	r8, #0
   1572c:	cmp	r5, #0
   15730:	beq	157e4 <__assert_fail@plt+0x49f0>
   15734:	ldrb	r3, [r5]
   15738:	cmp	r3, #0
   1573c:	beq	157e4 <__assert_fail@plt+0x49f0>
   15740:	add	r3, r5, #1
   15744:	str	r3, [r4, #20]
   15748:	ldrb	fp, [r5]
   1574c:	mov	r0, r7
   15750:	str	r3, [sp, #28]
   15754:	mov	r1, fp
   15758:	bl	10cd4 <strchr@plt>
   1575c:	ldrb	r1, [r5, #1]
   15760:	ldr	r3, [sp, #28]
   15764:	cmp	r1, #0
   15768:	ldreq	r1, [r4]
   1576c:	addeq	r1, r1, #1
   15770:	streq	r1, [r4]
   15774:	sub	r1, fp, #58	; 0x3a
   15778:	mov	r2, r0
   1577c:	cmp	r2, #0
   15780:	cmpne	r1, #1
   15784:	mov	r0, fp
   15788:	bls	158d0 <__assert_fail@plt+0x4adc>
   1578c:	ldrb	r1, [r2]
   15790:	cmp	r1, #87	; 0x57
   15794:	ldrb	r1, [r2, #1]
   15798:	beq	15a24 <__assert_fail@plt+0x4c30>
   1579c:	cmp	r1, #58	; 0x3a
   157a0:	bne	158c8 <__assert_fail@plt+0x4ad4>
   157a4:	ldrb	r2, [r2, #2]
   157a8:	cmp	r2, #58	; 0x3a
   157ac:	ldrb	r2, [r5, #1]
   157b0:	beq	15aac <__assert_fail@plt+0x4cb8>
   157b4:	cmp	r2, #0
   157b8:	bne	15ab8 <__assert_fail@plt+0x4cc4>
   157bc:	ldr	r3, [r4]
   157c0:	cmp	r6, r3
   157c4:	beq	15b58 <__assert_fail@plt+0x4d64>
   157c8:	ldr	r2, [r9, r3, lsl #2]
   157cc:	add	r3, r3, #1
   157d0:	str	r2, [r4, #12]
   157d4:	str	r3, [r4]
   157d8:	mov	r3, #0
   157dc:	str	r3, [r4, #20]
   157e0:	b	158c8 <__assert_fail@plt+0x4ad4>
   157e4:	ldr	fp, [r4]
   157e8:	ldr	r3, [r4, #32]
   157ec:	cmp	r3, fp
   157f0:	ldr	r3, [r4, #28]
   157f4:	strgt	fp, [r4, #32]
   157f8:	cmp	fp, r3
   157fc:	ldr	r3, [r4, #24]
   15800:	strlt	fp, [r4, #28]
   15804:	cmp	r3, #1
   15808:	beq	15910 <__assert_fail@plt+0x4b1c>
   1580c:	cmp	r6, fp
   15810:	beq	15988 <__assert_fail@plt+0x4b94>
   15814:	ldr	r3, [pc, #944]	; 15bcc <__assert_fail@plt+0x4dd8>
   15818:	ldr	r5, [r9, fp, lsl #2]
   1581c:	mov	r1, r3
   15820:	mov	r0, r5
   15824:	str	r3, [sp, #28]
   15828:	bl	10b9c <strcmp@plt>
   1582c:	ldr	r3, [sp, #28]
   15830:	cmp	r0, #0
   15834:	bne	158a0 <__assert_fail@plt+0x4aac>
   15838:	ldr	r3, [r4, #28]
   1583c:	ldr	r2, [r4, #32]
   15840:	add	fp, fp, #1
   15844:	cmp	r3, r2
   15848:	str	fp, [r4]
   1584c:	beq	15a18 <__assert_fail@plt+0x4c24>
   15850:	cmp	fp, r2
   15854:	beq	15868 <__assert_fail@plt+0x4a74>
   15858:	mov	r0, r9
   1585c:	mov	r1, r4
   15860:	bl	15088 <__assert_fail@plt+0x4294>
   15864:	ldr	r3, [r4, #28]
   15868:	cmp	r3, r6
   1586c:	str	r6, [r4]
   15870:	str	r6, [r4, #32]
   15874:	strne	r3, [r4]
   15878:	mvn	r0, #0
   1587c:	add	sp, sp, #36	; 0x24
   15880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15884:	ldrb	r3, [r7]
   15888:	ldr	r5, [r4, #20]
   1588c:	sub	r2, r3, #43	; 0x2b
   15890:	tst	r2, #253	; 0xfd
   15894:	ldrbeq	r3, [r7, #1]
   15898:	addeq	r7, r7, #1
   1589c:	b	15724 <__assert_fail@plt+0x4930>
   158a0:	ldrb	r2, [r5]
   158a4:	cmp	r2, #45	; 0x2d
   158a8:	beq	159cc <__assert_fail@plt+0x4bd8>
   158ac:	ldr	r3, [r4, #24]
   158b0:	cmp	r3, #0
   158b4:	beq	15878 <__assert_fail@plt+0x4a84>
   158b8:	mov	r0, #1
   158bc:	add	fp, fp, #1
   158c0:	str	fp, [r4]
   158c4:	str	r5, [r4, #12]
   158c8:	add	sp, sp, #36	; 0x24
   158cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158d0:	cmp	r8, #0
   158d4:	beq	158f0 <__assert_fail@plt+0x4afc>
   158d8:	ldr	r1, [pc, #752]	; 15bd0 <__assert_fail@plt+0x4ddc>
   158dc:	ldr	r2, [r9]
   158e0:	mov	r3, fp
   158e4:	ldr	r0, [r1]
   158e8:	ldr	r1, [pc, #740]	; 15bd4 <__assert_fail@plt+0x4de0>
   158ec:	bl	10cec <fprintf@plt>
   158f0:	mov	r0, #63	; 0x3f
   158f4:	str	fp, [r4, #8]
   158f8:	add	sp, sp, #36	; 0x24
   158fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15900:	mov	r2, #1
   15904:	mov	r3, r2
   15908:	str	r2, [r4]
   1590c:	b	156cc <__assert_fail@plt+0x48d8>
   15910:	ldr	r2, [r4, #28]
   15914:	ldr	r3, [r4, #32]
   15918:	cmp	r2, r3
   1591c:	beq	15a9c <__assert_fail@plt+0x4ca8>
   15920:	cmp	fp, r3
   15924:	beq	15938 <__assert_fail@plt+0x4b44>
   15928:	mov	r1, r4
   1592c:	mov	r0, r9
   15930:	bl	15088 <__assert_fail@plt+0x4294>
   15934:	ldr	r3, [r4]
   15938:	cmp	r6, r3
   1593c:	movle	fp, r3
   15940:	ble	1597c <__assert_fail@plt+0x4b88>
   15944:	add	r1, r9, r3, lsl #2
   15948:	b	1595c <__assert_fail@plt+0x4b68>
   1594c:	add	r3, r3, #1
   15950:	cmp	r6, r3
   15954:	str	r3, [r4]
   15958:	beq	159c0 <__assert_fail@plt+0x4bcc>
   1595c:	ldr	r2, [r1], #4
   15960:	ldrb	r0, [r2]
   15964:	cmp	r0, #45	; 0x2d
   15968:	bne	1594c <__assert_fail@plt+0x4b58>
   1596c:	ldrb	r2, [r2, #1]
   15970:	cmp	r2, #0
   15974:	beq	1594c <__assert_fail@plt+0x4b58>
   15978:	ldr	fp, [r4]
   1597c:	str	r3, [r4, #32]
   15980:	cmp	r6, fp
   15984:	bne	15814 <__assert_fail@plt+0x4a20>
   15988:	ldr	r3, [r4, #28]
   1598c:	ldr	r6, [r4, #32]
   15990:	mvn	r0, #0
   15994:	cmp	r3, r6
   15998:	strne	r3, [r4]
   1599c:	b	1587c <__assert_fail@plt+0x4a88>
   159a0:	ldr	r0, [pc, #560]	; 15bd8 <__assert_fail@plt+0x4de4>
   159a4:	bl	10c80 <getenv@plt>
   159a8:	ldr	r5, [r4, #20]
   159ac:	cmp	r0, #0
   159b0:	bne	15710 <__assert_fail@plt+0x491c>
   159b4:	mov	r3, #1
   159b8:	str	r3, [r4, #24]
   159bc:	b	15718 <__assert_fail@plt+0x4924>
   159c0:	mov	fp, r6
   159c4:	str	r3, [r4, #32]
   159c8:	b	15980 <__assert_fail@plt+0x4b8c>
   159cc:	ldrb	r1, [r5, #1]
   159d0:	cmp	r1, #0
   159d4:	beq	158ac <__assert_fail@plt+0x4ab8>
   159d8:	cmp	sl, #0
   159dc:	beq	15a10 <__assert_fail@plt+0x4c1c>
   159e0:	cmp	r1, #45	; 0x2d
   159e4:	beq	15b1c <__assert_fail@plt+0x4d28>
   159e8:	ldr	r3, [sp, #76]	; 0x4c
   159ec:	cmp	r3, #0
   159f0:	beq	15a10 <__assert_fail@plt+0x4c1c>
   159f4:	ldrb	r3, [r5, #2]
   159f8:	cmp	r3, #0
   159fc:	bne	15acc <__assert_fail@plt+0x4cd8>
   15a00:	mov	r0, r7
   15a04:	bl	10cd4 <strchr@plt>
   15a08:	cmp	r0, #0
   15a0c:	beq	15acc <__assert_fail@plt+0x4cd8>
   15a10:	add	r5, r5, #1
   15a14:	b	15740 <__assert_fail@plt+0x494c>
   15a18:	mov	r3, fp
   15a1c:	str	fp, [r4, #28]
   15a20:	b	15868 <__assert_fail@plt+0x4a74>
   15a24:	cmp	sl, #0
   15a28:	sub	ip, r1, #59	; 0x3b
   15a2c:	clz	ip, ip
   15a30:	lsr	ip, ip, #5
   15a34:	moveq	ip, #0
   15a38:	cmp	ip, #0
   15a3c:	beq	1579c <__assert_fail@plt+0x49a8>
   15a40:	ldrb	r2, [r5, #1]
   15a44:	cmp	r2, #0
   15a48:	bne	15a5c <__assert_fail@plt+0x4c68>
   15a4c:	ldr	r3, [r4]
   15a50:	cmp	r6, r3
   15a54:	ldrne	r3, [r9, r3, lsl #2]
   15a58:	beq	15b78 <__assert_fail@plt+0x4d84>
   15a5c:	str	r3, [r4, #20]
   15a60:	ldr	lr, [pc, #372]	; 15bdc <__assert_fail@plt+0x4de8>
   15a64:	ldr	r3, [sp, #72]	; 0x48
   15a68:	mov	ip, #0
   15a6c:	str	r3, [sp]
   15a70:	str	r8, [sp, #12]
   15a74:	str	r4, [sp, #8]
   15a78:	str	lr, [sp, #16]
   15a7c:	mov	r3, sl
   15a80:	str	ip, [r4, #12]
   15a84:	mov	r2, r7
   15a88:	mov	r1, r9
   15a8c:	mov	r0, r6
   15a90:	str	ip, [sp, #4]
   15a94:	bl	15144 <__assert_fail@plt+0x4350>
   15a98:	b	158c8 <__assert_fail@plt+0x4ad4>
   15a9c:	cmp	fp, r3
   15aa0:	movne	r3, fp
   15aa4:	strne	fp, [r4, #28]
   15aa8:	b	15938 <__assert_fail@plt+0x4b44>
   15aac:	cmp	r2, #0
   15ab0:	streq	r2, [r4, #12]
   15ab4:	beq	157d8 <__assert_fail@plt+0x49e4>
   15ab8:	ldr	r2, [r4]
   15abc:	str	r3, [r4, #12]
   15ac0:	add	r3, r2, #1
   15ac4:	str	r3, [r4]
   15ac8:	b	157d8 <__assert_fail@plt+0x49e4>
   15acc:	ldr	r2, [sp, #76]	; 0x4c
   15ad0:	add	r5, r5, #1
   15ad4:	str	r5, [r4, #20]
   15ad8:	ldr	r3, [pc, #256]	; 15be0 <__assert_fail@plt+0x4dec>
   15adc:	str	r2, [sp, #4]
   15ae0:	ldr	r2, [sp, #72]	; 0x48
   15ae4:	str	r3, [sp, #16]
   15ae8:	str	r2, [sp]
   15aec:	str	r8, [sp, #12]
   15af0:	str	r4, [sp, #8]
   15af4:	mov	r3, sl
   15af8:	mov	r2, r7
   15afc:	mov	r1, r9
   15b00:	mov	r0, r6
   15b04:	bl	15144 <__assert_fail@plt+0x4350>
   15b08:	cmn	r0, #1
   15b0c:	bne	158c8 <__assert_fail@plt+0x4ad4>
   15b10:	ldr	r3, [r4]
   15b14:	ldr	r5, [r9, r3, lsl #2]
   15b18:	b	15a10 <__assert_fail@plt+0x4c1c>
   15b1c:	add	r5, r5, #2
   15b20:	str	r5, [r4, #20]
   15b24:	str	r3, [sp, #16]
   15b28:	ldr	r3, [sp, #76]	; 0x4c
   15b2c:	str	r8, [sp, #12]
   15b30:	str	r3, [sp, #4]
   15b34:	ldr	r3, [sp, #72]	; 0x48
   15b38:	str	r4, [sp, #8]
   15b3c:	str	r3, [sp]
   15b40:	mov	r2, r7
   15b44:	mov	r3, sl
   15b48:	mov	r1, r9
   15b4c:	mov	r0, r6
   15b50:	bl	15144 <__assert_fail@plt+0x4350>
   15b54:	b	158c8 <__assert_fail@plt+0x4ad4>
   15b58:	cmp	r8, #0
   15b5c:	bne	15bb0 <__assert_fail@plt+0x4dbc>
   15b60:	str	fp, [r4, #8]
   15b64:	ldrb	r0, [r7]
   15b68:	cmp	r0, #58	; 0x3a
   15b6c:	movne	r0, #63	; 0x3f
   15b70:	moveq	r0, #58	; 0x3a
   15b74:	b	157d8 <__assert_fail@plt+0x49e4>
   15b78:	cmp	r8, #0
   15b7c:	beq	15b98 <__assert_fail@plt+0x4da4>
   15b80:	ldr	r1, [pc, #72]	; 15bd0 <__assert_fail@plt+0x4ddc>
   15b84:	ldr	r2, [r9]
   15b88:	mov	r3, fp
   15b8c:	ldr	r0, [r1]
   15b90:	ldr	r1, [pc, #76]	; 15be4 <__assert_fail@plt+0x4df0>
   15b94:	bl	10cec <fprintf@plt>
   15b98:	str	fp, [r4, #8]
   15b9c:	ldrb	r0, [r7]
   15ba0:	cmp	r0, #58	; 0x3a
   15ba4:	movne	r0, #63	; 0x3f
   15ba8:	moveq	r0, #58	; 0x3a
   15bac:	b	158c8 <__assert_fail@plt+0x4ad4>
   15bb0:	ldr	r1, [pc, #24]	; 15bd0 <__assert_fail@plt+0x4ddc>
   15bb4:	ldr	r2, [r9]
   15bb8:	mov	r3, fp
   15bbc:	ldr	r0, [r1]
   15bc0:	ldr	r1, [pc, #28]	; 15be4 <__assert_fail@plt+0x4df0>
   15bc4:	bl	10cec <fprintf@plt>
   15bc8:	b	15b60 <__assert_fail@plt+0x4d6c>
   15bcc:	andeq	r7, r1, ip, lsl #23
   15bd0:	andeq	r8, r2, r0, lsl r1
   15bd4:	muleq	r1, r0, fp
   15bd8:	andeq	r7, r1, ip, ror fp
   15bdc:	ldrdeq	r7, [r1], -r8
   15be0:	andeq	r7, r1, r4, lsr #18
   15be4:	andeq	r7, r1, ip, lsr #23
   15be8:	push	{r4, r5, r6, lr}
   15bec:	sub	sp, sp, #16
   15bf0:	ldr	r5, [pc, #84]	; 15c4c <__assert_fail@plt+0x4e58>
   15bf4:	ldr	ip, [sp, #32]
   15bf8:	ldr	r4, [pc, #80]	; 15c50 <__assert_fail@plt+0x4e5c>
   15bfc:	str	ip, [sp]
   15c00:	ldr	ip, [sp, #40]	; 0x28
   15c04:	ldr	r6, [sp, #36]	; 0x24
   15c08:	ldr	lr, [r5]
   15c0c:	str	ip, [sp, #12]
   15c10:	ldr	ip, [r5, #4]
   15c14:	str	r4, [sp, #8]
   15c18:	str	r6, [sp, #4]
   15c1c:	str	ip, [r4, #4]
   15c20:	str	lr, [r4]
   15c24:	bl	15688 <__assert_fail@plt+0x4894>
   15c28:	ldr	r3, [pc, #36]	; 15c54 <__assert_fail@plt+0x4e60>
   15c2c:	ldr	ip, [r4]
   15c30:	ldr	r1, [r4, #8]
   15c34:	ldr	r2, [r4, #12]
   15c38:	str	ip, [r5]
   15c3c:	str	r1, [r5, #8]
   15c40:	str	r2, [r3]
   15c44:	add	sp, sp, #16
   15c48:	pop	{r4, r5, r6, pc}
   15c4c:	andeq	r8, r2, r4, lsl #2
   15c50:	andeq	r8, r2, r0, lsr r1
   15c54:			; <UNDEFINED> instruction: 0x000281bc
   15c58:	push	{lr}		; (str lr, [sp, #-4]!)
   15c5c:	mov	r3, #0
   15c60:	sub	sp, sp, #20
   15c64:	mov	ip, #1
   15c68:	str	r3, [sp]
   15c6c:	stmib	sp, {r3, ip}
   15c70:	bl	15be8 <__assert_fail@plt+0x4df4>
   15c74:	add	sp, sp, #20
   15c78:	pop	{pc}		; (ldr pc, [sp], #4)
   15c7c:	andeq	r0, r0, r0
   15c80:	cmp	r0, #10
   15c84:	movcc	r0, #10
   15c88:	push	{r4, r5, r6, r7, r8, lr}
   15c8c:	orr	r7, r0, #1
   15c90:	cmn	r7, #1
   15c94:	ldrne	r8, [pc, #132]	; 15d20 <__assert_fail@plt+0x4f2c>
   15c98:	beq	15d10 <__assert_fail@plt+0x4f1c>
   15c9c:	cmp	r7, #9
   15ca0:	bls	15d18 <__assert_fail@plt+0x4f24>
   15ca4:	umull	r2, r3, r8, r7
   15ca8:	lsr	r3, r3, #1
   15cac:	add	r3, r3, r3, lsl #1
   15cb0:	cmp	r7, r3
   15cb4:	beq	15d04 <__assert_fail@plt+0x4f10>
   15cb8:	mov	r6, #16
   15cbc:	mov	r5, #9
   15cc0:	mov	r4, #3
   15cc4:	b	15cd8 <__assert_fail@plt+0x4ee4>
   15cc8:	bl	1740c <__assert_fail@plt+0x6618>
   15ccc:	add	r6, r6, #8
   15cd0:	cmp	r1, #0
   15cd4:	beq	15d04 <__assert_fail@plt+0x4f10>
   15cd8:	add	r5, r5, r6
   15cdc:	add	r4, r4, #2
   15ce0:	cmp	r5, r7
   15ce4:	mov	r0, r7
   15ce8:	mov	r1, r4
   15cec:	bcc	15cc8 <__assert_fail@plt+0x4ed4>
   15cf0:	mov	r1, r4
   15cf4:	mov	r0, r7
   15cf8:	bl	1740c <__assert_fail@plt+0x6618>
   15cfc:	cmp	r1, #0
   15d00:	bne	15d10 <__assert_fail@plt+0x4f1c>
   15d04:	add	r7, r7, #2
   15d08:	cmn	r7, #1
   15d0c:	bne	15c9c <__assert_fail@plt+0x4ea8>
   15d10:	mov	r0, r7
   15d14:	pop	{r4, r5, r6, r7, r8, pc}
   15d18:	mov	r4, #3
   15d1c:	b	15cf0 <__assert_fail@plt+0x4efc>
   15d20:	bge	feac07d4 <stdout@@GLIBC_2.4+0xfea986c0>
   15d24:	push	{r4, lr}
   15d28:	ror	r0, r0, #3
   15d2c:	bl	1740c <__assert_fail@plt+0x6618>
   15d30:	mov	r0, r1
   15d34:	pop	{r4, pc}
   15d38:	sub	r0, r1, r0
   15d3c:	clz	r0, r0
   15d40:	lsr	r0, r0, #5
   15d44:	bx	lr
   15d48:	push	{r4, lr}
   15d4c:	mov	r4, r0
   15d50:	mov	r0, r1
   15d54:	ldr	r3, [r4, #24]
   15d58:	ldr	r1, [r4, #8]
   15d5c:	blx	r3
   15d60:	ldr	r3, [r4, #8]
   15d64:	cmp	r0, r3
   15d68:	bcs	15d78 <__assert_fail@plt+0x4f84>
   15d6c:	ldr	r3, [r4]
   15d70:	add	r0, r3, r0, lsl #3
   15d74:	pop	{r4, pc}
   15d78:	bl	10db8 <abort@plt>
   15d7c:	push	{r4, r5, r6, r7, r8, lr}
   15d80:	mov	r7, r2
   15d84:	mov	r8, r3
   15d88:	mov	r6, r0
   15d8c:	mov	r5, r1
   15d90:	bl	15d48 <__assert_fail@plt+0x4f54>
   15d94:	str	r0, [r7]
   15d98:	ldr	r3, [r0]
   15d9c:	cmp	r3, #0
   15da0:	beq	15e38 <__assert_fail@plt+0x5044>
   15da4:	cmp	r5, r3
   15da8:	mov	r4, r0
   15dac:	beq	15dcc <__assert_fail@plt+0x4fd8>
   15db0:	mov	r1, r3
   15db4:	mov	r0, r5
   15db8:	ldr	r3, [r6, #28]
   15dbc:	blx	r3
   15dc0:	cmp	r0, #0
   15dc4:	beq	15e2c <__assert_fail@plt+0x5038>
   15dc8:	ldr	r3, [r4]
   15dcc:	cmp	r8, #0
   15dd0:	beq	15dfc <__assert_fail@plt+0x5008>
   15dd4:	ldr	r2, [r4, #4]
   15dd8:	cmp	r2, #0
   15ddc:	movne	ip, #0
   15de0:	ldmne	r2, {r0, r1}
   15de4:	streq	r2, [r4]
   15de8:	stmne	r4, {r0, r1}
   15dec:	strne	ip, [r2]
   15df0:	ldrne	r1, [r6, #36]	; 0x24
   15df4:	strne	r1, [r2, #4]
   15df8:	strne	r2, [r6, #36]	; 0x24
   15dfc:	mov	r0, r3
   15e00:	pop	{r4, r5, r6, r7, r8, pc}
   15e04:	ldr	r3, [r2]
   15e08:	cmp	r5, r3
   15e0c:	beq	15e4c <__assert_fail@plt+0x5058>
   15e10:	mov	r1, r3
   15e14:	mov	r0, r5
   15e18:	ldr	r3, [r6, #28]
   15e1c:	blx	r3
   15e20:	cmp	r0, #0
   15e24:	bne	15e44 <__assert_fail@plt+0x5050>
   15e28:	ldr	r4, [r4, #4]
   15e2c:	ldr	r2, [r4, #4]
   15e30:	cmp	r2, #0
   15e34:	bne	15e04 <__assert_fail@plt+0x5010>
   15e38:	mov	r3, #0
   15e3c:	mov	r0, r3
   15e40:	pop	{r4, r5, r6, r7, r8, pc}
   15e44:	ldr	r2, [r4, #4]
   15e48:	ldr	r3, [r2]
   15e4c:	cmp	r8, #0
   15e50:	beq	15dfc <__assert_fail@plt+0x5008>
   15e54:	ldr	r0, [r2, #4]
   15e58:	mov	r1, #0
   15e5c:	str	r0, [r4, #4]
   15e60:	str	r1, [r2]
   15e64:	ldr	r1, [r6, #36]	; 0x24
   15e68:	mov	r0, r3
   15e6c:	str	r1, [r2, #4]
   15e70:	str	r2, [r6, #36]	; 0x24
   15e74:	pop	{r4, r5, r6, r7, r8, pc}
   15e78:	ldr	r2, [pc, #164]	; 15f24 <__assert_fail@plt+0x5130>
   15e7c:	ldr	r3, [r0]
   15e80:	cmp	r3, r2
   15e84:	beq	15f0c <__assert_fail@plt+0x5118>
   15e88:	vldr	s15, [r3, #8]
   15e8c:	vldr	s14, [pc, #128]	; 15f14 <__assert_fail@plt+0x5120>
   15e90:	vcmpe.f32	s15, s14
   15e94:	vmrs	APSR_nzcv, fpscr
   15e98:	ble	15f00 <__assert_fail@plt+0x510c>
   15e9c:	vldr	s13, [pc, #116]	; 15f18 <__assert_fail@plt+0x5124>
   15ea0:	vcmpe.f32	s15, s13
   15ea4:	vmrs	APSR_nzcv, fpscr
   15ea8:	bpl	15f00 <__assert_fail@plt+0x510c>
   15eac:	vldr	s13, [pc, #104]	; 15f1c <__assert_fail@plt+0x5128>
   15eb0:	vldr	s12, [r3, #12]
   15eb4:	vcmpe.f32	s12, s13
   15eb8:	vmrs	APSR_nzcv, fpscr
   15ebc:	ble	15f00 <__assert_fail@plt+0x510c>
   15ec0:	vldr	s13, [r3]
   15ec4:	vcmpe.f32	s13, #0.0
   15ec8:	vmrs	APSR_nzcv, fpscr
   15ecc:	blt	15f00 <__assert_fail@plt+0x510c>
   15ed0:	vadd.f32	s14, s13, s14
   15ed4:	vldr	s13, [r3, #4]
   15ed8:	vcmpe.f32	s14, s13
   15edc:	vmrs	APSR_nzcv, fpscr
   15ee0:	bpl	15f00 <__assert_fail@plt+0x510c>
   15ee4:	vldr	s12, [pc, #52]	; 15f20 <__assert_fail@plt+0x512c>
   15ee8:	vcmpe.f32	s13, s12
   15eec:	vmrs	APSR_nzcv, fpscr
   15ef0:	bhi	15f00 <__assert_fail@plt+0x510c>
   15ef4:	vcmpe.f32	s15, s14
   15ef8:	vmrs	APSR_nzcv, fpscr
   15efc:	bgt	15f0c <__assert_fail@plt+0x5118>
   15f00:	str	r2, [r0]
   15f04:	mov	r0, #0
   15f08:	bx	lr
   15f0c:	mov	r0, #1
   15f10:	bx	lr
   15f14:	stclcc	12, cr12, [ip, #820]	; 0x334
   15f18:	svccc	0x00666666
   15f1c:	svccc	0x008ccccd
   15f20:	svccc	0x00800000
   15f24:	ldrdeq	r7, [r1], -ip
   15f28:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f2c:	ldm	r1, {r6, ip}
   15f30:	cmp	r6, ip
   15f34:	bcs	15ff0 <__assert_fail@plt+0x51fc>
   15f38:	mov	sl, r2
   15f3c:	mov	r5, r0
   15f40:	mov	r8, r1
   15f44:	add	r6, r6, #8
   15f48:	mov	r9, #0
   15f4c:	ldr	fp, [r6, #-8]
   15f50:	mov	r7, r6
   15f54:	cmp	fp, #0
   15f58:	beq	15fe4 <__assert_fail@plt+0x51f0>
   15f5c:	ldr	r4, [r6, #-4]
   15f60:	cmp	r4, #0
   15f64:	bne	15f84 <__assert_fail@plt+0x5190>
   15f68:	b	15fd4 <__assert_fail@plt+0x51e0>
   15f6c:	ldr	r3, [r0, #4]
   15f70:	cmp	r2, #0
   15f74:	str	r3, [r4, #4]
   15f78:	str	r4, [r0, #4]
   15f7c:	mov	r4, r2
   15f80:	beq	15fd0 <__assert_fail@plt+0x51dc>
   15f84:	ldr	fp, [r4]
   15f88:	mov	r0, r5
   15f8c:	mov	r1, fp
   15f90:	bl	15d48 <__assert_fail@plt+0x4f54>
   15f94:	ldr	r2, [r4, #4]
   15f98:	ldr	r1, [r0]
   15f9c:	cmp	r1, #0
   15fa0:	bne	15f6c <__assert_fail@plt+0x5178>
   15fa4:	ldr	ip, [r5, #12]
   15fa8:	str	fp, [r0]
   15fac:	add	r3, ip, #1
   15fb0:	str	r3, [r5, #12]
   15fb4:	str	r1, [r4]
   15fb8:	ldr	r3, [r5, #36]	; 0x24
   15fbc:	cmp	r2, #0
   15fc0:	str	r3, [r4, #4]
   15fc4:	str	r4, [r5, #36]	; 0x24
   15fc8:	mov	r4, r2
   15fcc:	bne	15f84 <__assert_fail@plt+0x5190>
   15fd0:	ldr	fp, [r6, #-8]
   15fd4:	cmp	sl, #0
   15fd8:	str	r9, [r6, #-4]
   15fdc:	beq	15ff8 <__assert_fail@plt+0x5204>
   15fe0:	ldr	ip, [r8, #4]
   15fe4:	cmp	ip, r7
   15fe8:	add	r6, r6, #8
   15fec:	bhi	15f4c <__assert_fail@plt+0x5158>
   15ff0:	mov	r0, #1
   15ff4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ff8:	mov	r1, fp
   15ffc:	mov	r0, r5
   16000:	bl	15d48 <__assert_fail@plt+0x4f54>
   16004:	ldr	r2, [r0]
   16008:	mov	r4, r0
   1600c:	cmp	r2, #0
   16010:	beq	1605c <__assert_fail@plt+0x5268>
   16014:	ldr	r0, [r5, #36]	; 0x24
   16018:	cmp	r0, #0
   1601c:	beq	16070 <__assert_fail@plt+0x527c>
   16020:	ldr	r2, [r0, #4]
   16024:	str	r2, [r5, #36]	; 0x24
   16028:	ldr	r2, [r4, #4]
   1602c:	str	fp, [r0]
   16030:	str	r2, [r0, #4]
   16034:	str	r0, [r4, #4]
   16038:	str	r9, [r6, #-8]
   1603c:	ldr	r3, [r8, #12]
   16040:	ldr	ip, [r8, #4]
   16044:	sub	r3, r3, #1
   16048:	cmp	ip, r7
   1604c:	str	r3, [r8, #12]
   16050:	add	r6, r6, #8
   16054:	bhi	15f4c <__assert_fail@plt+0x5158>
   16058:	b	15ff0 <__assert_fail@plt+0x51fc>
   1605c:	ldr	r2, [r5, #12]
   16060:	str	fp, [r0]
   16064:	add	r3, r2, #1
   16068:	str	r3, [r5, #12]
   1606c:	b	16038 <__assert_fail@plt+0x5244>
   16070:	mov	r0, #8
   16074:	bl	16e90 <__assert_fail@plt+0x609c>
   16078:	cmp	r0, #0
   1607c:	bne	16028 <__assert_fail@plt+0x5234>
   16080:	mov	r0, sl
   16084:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16088:	ldr	r0, [r0, #8]
   1608c:	bx	lr
   16090:	ldr	r0, [r0, #12]
   16094:	bx	lr
   16098:	ldr	r0, [r0, #16]
   1609c:	bx	lr
   160a0:	ldm	r0, {r1, ip}
   160a4:	mov	r0, #0
   160a8:	cmp	r1, ip
   160ac:	bcs	160f4 <__assert_fail@plt+0x5300>
   160b0:	ldr	r3, [r1]
   160b4:	cmp	r3, #0
   160b8:	beq	160e4 <__assert_fail@plt+0x52f0>
   160bc:	ldr	r3, [r1, #4]
   160c0:	mov	r2, #1
   160c4:	cmp	r3, #0
   160c8:	beq	160dc <__assert_fail@plt+0x52e8>
   160cc:	ldr	r3, [r3, #4]
   160d0:	add	r2, r2, #1
   160d4:	cmp	r3, #0
   160d8:	bne	160cc <__assert_fail@plt+0x52d8>
   160dc:	cmp	r0, r2
   160e0:	movcc	r0, r2
   160e4:	add	r1, r1, #8
   160e8:	cmp	r1, ip
   160ec:	bcc	160b0 <__assert_fail@plt+0x52bc>
   160f0:	bx	lr
   160f4:	bx	lr
   160f8:	push	{lr}		; (str lr, [sp, #-4]!)
   160fc:	mov	r2, #0
   16100:	ldm	r0, {r1, lr}
   16104:	mov	ip, r2
   16108:	cmp	r1, lr
   1610c:	bcs	1614c <__assert_fail@plt+0x5358>
   16110:	ldr	r3, [r1]
   16114:	cmp	r3, #0
   16118:	beq	16140 <__assert_fail@plt+0x534c>
   1611c:	ldr	r3, [r1, #4]
   16120:	add	ip, ip, #1
   16124:	cmp	r3, #0
   16128:	add	r2, r2, #1
   1612c:	beq	16140 <__assert_fail@plt+0x534c>
   16130:	ldr	r3, [r3, #4]
   16134:	add	r2, r2, #1
   16138:	cmp	r3, #0
   1613c:	bne	16130 <__assert_fail@plt+0x533c>
   16140:	add	r1, r1, #8
   16144:	cmp	r1, lr
   16148:	bcc	16110 <__assert_fail@plt+0x531c>
   1614c:	ldr	r3, [r0, #12]
   16150:	cmp	r3, ip
   16154:	ldreq	r0, [r0, #16]
   16158:	subeq	r0, r0, r2
   1615c:	clzeq	r0, r0
   16160:	lsreq	r0, r0, #5
   16164:	movne	r0, #0
   16168:	pop	{pc}		; (ldr pc, [sp], #4)
   1616c:	push	{r4, r5, r6, r7, lr}
   16170:	mov	r5, r1
   16174:	ldm	r0, {ip, lr}
   16178:	sub	sp, sp, #12
   1617c:	ldr	r2, [r0, #16]
   16180:	cmp	ip, lr
   16184:	mov	r4, #0
   16188:	ldr	r6, [r0, #8]
   1618c:	ldr	r7, [r0, #12]
   16190:	bcs	161d4 <__assert_fail@plt+0x53e0>
   16194:	ldr	r3, [ip]
   16198:	cmp	r3, #0
   1619c:	beq	161c8 <__assert_fail@plt+0x53d4>
   161a0:	ldr	r3, [ip, #4]
   161a4:	mov	r1, #1
   161a8:	cmp	r3, #0
   161ac:	beq	161c0 <__assert_fail@plt+0x53cc>
   161b0:	ldr	r3, [r3, #4]
   161b4:	add	r1, r1, #1
   161b8:	cmp	r3, #0
   161bc:	bne	161b0 <__assert_fail@plt+0x53bc>
   161c0:	cmp	r4, r1
   161c4:	movcc	r4, r1
   161c8:	add	ip, ip, #8
   161cc:	cmp	ip, lr
   161d0:	bcc	16194 <__assert_fail@plt+0x53a0>
   161d4:	ldr	r1, [pc, #100]	; 16240 <__assert_fail@plt+0x544c>
   161d8:	mov	r0, r5
   161dc:	bl	10cec <fprintf@plt>
   161e0:	mov	r2, r6
   161e4:	ldr	r1, [pc, #88]	; 16244 <__assert_fail@plt+0x5450>
   161e8:	mov	r0, r5
   161ec:	bl	10cec <fprintf@plt>
   161f0:	vmov	s15, r7
   161f4:	vldr	d5, [pc, #60]	; 16238 <__assert_fail@plt+0x5444>
   161f8:	mov	r2, r7
   161fc:	ldr	r1, [pc, #68]	; 16248 <__assert_fail@plt+0x5454>
   16200:	vcvt.f64.u32	d6, s15
   16204:	vmov	s15, r6
   16208:	mov	r0, r5
   1620c:	vcvt.f64.u32	d7, s15
   16210:	vmul.f64	d6, d6, d5
   16214:	vdiv.f64	d5, d6, d7
   16218:	vstr	d5, [sp]
   1621c:	bl	10cec <fprintf@plt>
   16220:	mov	r2, r4
   16224:	mov	r0, r5
   16228:	ldr	r1, [pc, #28]	; 1624c <__assert_fail@plt+0x5458>
   1622c:	add	sp, sp, #12
   16230:	pop	{r4, r5, r6, r7, lr}
   16234:	b	10cec <fprintf@plt>
   16238:	andeq	r0, r0, r0
   1623c:	subsmi	r0, r9, r0
   16240:	strdeq	r7, [r1], -r0
   16244:	andeq	r7, r1, r8, lsl #24
   16248:	andeq	r7, r1, r0, lsr #24
   1624c:	andeq	r7, r1, r4, asr #24
   16250:	push	{r4, r5, r6, lr}
   16254:	mov	r6, r0
   16258:	mov	r5, r1
   1625c:	bl	15d48 <__assert_fail@plt+0x4f54>
   16260:	ldr	r3, [r0]
   16264:	cmp	r3, #0
   16268:	movne	r4, r0
   1626c:	bne	16278 <__assert_fail@plt+0x5484>
   16270:	b	162a4 <__assert_fail@plt+0x54b0>
   16274:	ldr	r3, [r4]
   16278:	cmp	r5, r3
   1627c:	mov	r1, r3
   16280:	mov	r0, r5
   16284:	beq	162ac <__assert_fail@plt+0x54b8>
   16288:	ldr	r3, [r6, #28]
   1628c:	blx	r3
   16290:	cmp	r0, #0
   16294:	bne	162b4 <__assert_fail@plt+0x54c0>
   16298:	ldr	r4, [r4, #4]
   1629c:	cmp	r4, #0
   162a0:	bne	16274 <__assert_fail@plt+0x5480>
   162a4:	mov	r0, #0
   162a8:	pop	{r4, r5, r6, pc}
   162ac:	mov	r0, r5
   162b0:	pop	{r4, r5, r6, pc}
   162b4:	ldr	r0, [r4]
   162b8:	pop	{r4, r5, r6, pc}
   162bc:	ldr	r3, [r0, #16]
   162c0:	cmp	r3, #0
   162c4:	beq	162f8 <__assert_fail@plt+0x5504>
   162c8:	ldr	r3, [r0]
   162cc:	ldr	r2, [r0, #4]
   162d0:	cmp	r3, r2
   162d4:	bcc	162e8 <__assert_fail@plt+0x54f4>
   162d8:	b	16300 <__assert_fail@plt+0x550c>
   162dc:	add	r3, r3, #8
   162e0:	cmp	r3, r2
   162e4:	bcs	16300 <__assert_fail@plt+0x550c>
   162e8:	ldr	r0, [r3]
   162ec:	cmp	r0, #0
   162f0:	beq	162dc <__assert_fail@plt+0x54e8>
   162f4:	bx	lr
   162f8:	mov	r0, r3
   162fc:	bx	lr
   16300:	push	{r4, lr}
   16304:	bl	10db8 <abort@plt>
   16308:	push	{r4, r5, r6, lr}
   1630c:	mov	r5, r0
   16310:	mov	r4, r1
   16314:	bl	15d48 <__assert_fail@plt+0x4f54>
   16318:	mov	r2, r0
   1631c:	mov	r3, r0
   16320:	b	1632c <__assert_fail@plt+0x5538>
   16324:	cmp	r3, #0
   16328:	beq	16340 <__assert_fail@plt+0x554c>
   1632c:	ldm	r3, {r1, r3}
   16330:	cmp	r4, r1
   16334:	bne	16324 <__assert_fail@plt+0x5530>
   16338:	cmp	r3, #0
   1633c:	bne	16368 <__assert_fail@plt+0x5574>
   16340:	ldr	r3, [r5, #4]
   16344:	b	16354 <__assert_fail@plt+0x5560>
   16348:	ldr	r0, [r2]
   1634c:	cmp	r0, #0
   16350:	popne	{r4, r5, r6, pc}
   16354:	add	r2, r2, #8
   16358:	cmp	r2, r3
   1635c:	bcc	16348 <__assert_fail@plt+0x5554>
   16360:	mov	r0, #0
   16364:	pop	{r4, r5, r6, pc}
   16368:	ldr	r0, [r3]
   1636c:	pop	{r4, r5, r6, pc}
   16370:	push	{r4, r5, r6, lr}
   16374:	ldm	r0, {r5, lr}
   16378:	cmp	r5, lr
   1637c:	bcs	16400 <__assert_fail@plt+0x560c>
   16380:	add	r5, r5, #8
   16384:	mov	ip, #0
   16388:	ldr	r3, [r5, #-8]
   1638c:	mov	r6, r5
   16390:	cmp	r3, #0
   16394:	beq	163e0 <__assert_fail@plt+0x55ec>
   16398:	cmp	r2, ip
   1639c:	bls	163ec <__assert_fail@plt+0x55f8>
   163a0:	str	r3, [r1, ip, lsl #2]
   163a4:	ldr	r3, [r5, #-4]
   163a8:	add	r4, ip, #1
   163ac:	cmp	r3, #0
   163b0:	add	lr, r1, ip, lsl #2
   163b4:	beq	163f4 <__assert_fail@plt+0x5600>
   163b8:	mov	ip, r4
   163bc:	cmp	r2, ip
   163c0:	beq	163ec <__assert_fail@plt+0x55f8>
   163c4:	ldr	r4, [r3]
   163c8:	add	ip, ip, #1
   163cc:	str	r4, [lr, #4]!
   163d0:	ldr	r3, [r3, #4]
   163d4:	cmp	r3, #0
   163d8:	bne	163bc <__assert_fail@plt+0x55c8>
   163dc:	ldr	lr, [r0, #4]
   163e0:	cmp	lr, r6
   163e4:	add	r5, r5, #8
   163e8:	bhi	16388 <__assert_fail@plt+0x5594>
   163ec:	mov	r0, ip
   163f0:	pop	{r4, r5, r6, pc}
   163f4:	ldr	lr, [r0, #4]
   163f8:	mov	ip, r4
   163fc:	b	163e0 <__assert_fail@plt+0x55ec>
   16400:	mov	ip, #0
   16404:	b	163ec <__assert_fail@plt+0x55f8>
   16408:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1640c:	ldr	r3, [r0, #4]
   16410:	ldr	r8, [r0]
   16414:	cmp	r8, r3
   16418:	bcs	1647c <__assert_fail@plt+0x5688>
   1641c:	mov	r7, r2
   16420:	mov	r6, r1
   16424:	mov	r9, r0
   16428:	mov	r5, #0
   1642c:	ldr	r0, [r8]
   16430:	cmp	r0, #0
   16434:	beq	16468 <__assert_fail@plt+0x5674>
   16438:	mov	r4, r8
   1643c:	b	16444 <__assert_fail@plt+0x5650>
   16440:	ldr	r0, [r4]
   16444:	mov	r1, r7
   16448:	blx	r6
   1644c:	cmp	r0, #0
   16450:	beq	16474 <__assert_fail@plt+0x5680>
   16454:	ldr	r4, [r4, #4]
   16458:	add	r5, r5, #1
   1645c:	cmp	r4, #0
   16460:	bne	16440 <__assert_fail@plt+0x564c>
   16464:	ldr	r3, [r9, #4]
   16468:	add	r8, r8, #8
   1646c:	cmp	r3, r8
   16470:	bhi	1642c <__assert_fail@plt+0x5638>
   16474:	mov	r0, r5
   16478:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1647c:	mov	r5, #0
   16480:	b	16474 <__assert_fail@plt+0x5680>
   16484:	push	{r4, r5, r6, lr}
   16488:	mov	r4, r0
   1648c:	ldrb	r0, [r0]
   16490:	cmp	r0, #0
   16494:	beq	164c4 <__assert_fail@plt+0x56d0>
   16498:	mov	r5, r1
   1649c:	mov	r1, #0
   164a0:	rsb	r1, r1, r1, lsl #5
   164a4:	add	r0, r1, r0
   164a8:	mov	r1, r5
   164ac:	bl	1740c <__assert_fail@plt+0x6618>
   164b0:	ldrb	r0, [r4, #1]!
   164b4:	cmp	r0, #0
   164b8:	bne	164a0 <__assert_fail@plt+0x56ac>
   164bc:	mov	r0, r1
   164c0:	pop	{r4, r5, r6, pc}
   164c4:	mov	r1, r0
   164c8:	b	164bc <__assert_fail@plt+0x56c8>
   164cc:	push	{lr}		; (str lr, [sp, #-4]!)
   164d0:	mov	ip, r0
   164d4:	ldr	lr, [pc, #16]	; 164ec <__assert_fail@plt+0x56f8>
   164d8:	ldm	lr!, {r0, r1, r2, r3}
   164dc:	ldr	lr, [lr]
   164e0:	stmia	ip!, {r0, r1, r2, r3}
   164e4:	str	lr, [ip]
   164e8:	pop	{pc}		; (ldr pc, [sp], #4)
   164ec:	ldrdeq	r7, [r1], -ip
   164f0:	push	{r4, r5, r6, r7, lr}
   164f4:	sub	sp, sp, #12
   164f8:	cmp	r2, #0
   164fc:	str	r0, [sp, #4]
   16500:	ldr	r6, [pc, #304]	; 16638 <__assert_fail@plt+0x5844>
   16504:	mov	r0, #40	; 0x28
   16508:	movne	r6, r2
   1650c:	cmp	r3, #0
   16510:	ldr	r7, [pc, #292]	; 1663c <__assert_fail@plt+0x5848>
   16514:	mov	r5, r1
   16518:	movne	r7, r3
   1651c:	bl	16e90 <__assert_fail@plt+0x609c>
   16520:	subs	r4, r0, #0
   16524:	beq	165bc <__assert_fail@plt+0x57c8>
   16528:	cmp	r5, #0
   1652c:	beq	16610 <__assert_fail@plt+0x581c>
   16530:	mov	r0, r4
   16534:	str	r5, [r0, #20]!
   16538:	bl	15e78 <__assert_fail@plt+0x5084>
   1653c:	cmp	r0, #0
   16540:	beq	165f8 <__assert_fail@plt+0x5804>
   16544:	ldrb	r3, [r5, #16]
   16548:	cmp	r3, #0
   1654c:	beq	165c8 <__assert_fail@plt+0x57d4>
   16550:	ldr	r0, [sp, #4]
   16554:	bl	15c80 <__assert_fail@plt+0x4e8c>
   16558:	lsrs	r2, r0, #30
   1655c:	movne	r5, #1
   16560:	moveq	r5, #0
   16564:	tst	r0, #536870912	; 0x20000000
   16568:	bne	165f0 <__assert_fail@plt+0x57fc>
   1656c:	cmp	r5, #0
   16570:	bne	165f0 <__assert_fail@plt+0x57fc>
   16574:	cmp	r0, #0
   16578:	str	r0, [r4, #8]
   1657c:	beq	165f8 <__assert_fail@plt+0x5804>
   16580:	mov	r1, #8
   16584:	bl	16e48 <__assert_fail@plt+0x6054>
   16588:	cmp	r0, #0
   1658c:	str	r0, [r4]
   16590:	beq	165f8 <__assert_fail@plt+0x5804>
   16594:	ldr	r3, [r4, #8]
   16598:	str	r5, [r4, #12]
   1659c:	str	r5, [r4, #16]
   165a0:	add	r0, r0, r3, lsl #3
   165a4:	ldr	r3, [sp, #32]
   165a8:	str	r6, [r4, #24]
   165ac:	str	r7, [r4, #28]
   165b0:	str	r3, [r4, #32]
   165b4:	str	r5, [r4, #36]	; 0x24
   165b8:	str	r0, [r4, #4]
   165bc:	mov	r0, r4
   165c0:	add	sp, sp, #12
   165c4:	pop	{r4, r5, r6, r7, pc}
   165c8:	vldr	s12, [r5, #8]
   165cc:	vldr	s15, [sp, #4]
   165d0:	vldr	s14, [pc, #88]	; 16630 <__assert_fail@plt+0x583c>
   165d4:	vcvt.f32.u32	s13, s15
   165d8:	vdiv.f32	s15, s13, s12
   165dc:	vcmpe.f32	s15, s14
   165e0:	vmrs	APSR_nzcv, fpscr
   165e4:	vcvtlt.u32.f32	s15, s15
   165e8:	vstrlt	s15, [sp, #4]
   165ec:	blt	16550 <__assert_fail@plt+0x575c>
   165f0:	mov	r3, #0
   165f4:	str	r3, [r4, #8]
   165f8:	mov	r0, r4
   165fc:	bl	12f10 <__assert_fail@plt+0x211c>
   16600:	mov	r4, #0
   16604:	mov	r0, r4
   16608:	add	sp, sp, #12
   1660c:	pop	{r4, r5, r6, r7, pc}
   16610:	ldr	r3, [pc, #40]	; 16640 <__assert_fail@plt+0x584c>
   16614:	mov	r0, r4
   16618:	str	r3, [r0, #20]!
   1661c:	bl	15e78 <__assert_fail@plt+0x5084>
   16620:	cmp	r0, #0
   16624:	vldrne	s12, [pc, #8]	; 16634 <__assert_fail@plt+0x5840>
   16628:	bne	165cc <__assert_fail@plt+0x57d8>
   1662c:	b	165f8 <__assert_fail@plt+0x5804>
   16630:	svcmi	0x00800000
   16634:	svccc	0x004ccccd
   16638:	andeq	r5, r1, r4, lsr #26
   1663c:	andeq	r5, r1, r8, lsr sp
   16640:	ldrdeq	r7, [r1], -ip
   16644:	push	{r4, r5, r6, r7, r8, lr}
   16648:	mov	r5, r0
   1664c:	ldr	r7, [r0]
   16650:	ldr	r3, [r0, #4]
   16654:	cmp	r7, r3
   16658:	addcc	r7, r7, #8
   1665c:	movcc	r6, #0
   16660:	bcs	166dc <__assert_fail@plt+0x58e8>
   16664:	ldr	r2, [r7, #-8]
   16668:	mov	r8, r7
   1666c:	cmp	r2, #0
   16670:	beq	166d0 <__assert_fail@plt+0x58dc>
   16674:	ldr	r4, [r7, #-4]
   16678:	ldr	r2, [r5, #32]
   1667c:	cmp	r4, #0
   16680:	beq	166b4 <__assert_fail@plt+0x58c0>
   16684:	cmp	r2, #0
   16688:	beq	16698 <__assert_fail@plt+0x58a4>
   1668c:	ldr	r0, [r4]
   16690:	blx	r2
   16694:	ldr	r2, [r5, #32]
   16698:	ldr	r3, [r4, #4]
   1669c:	ldr	r1, [r5, #36]	; 0x24
   166a0:	str	r6, [r4]
   166a4:	str	r1, [r4, #4]
   166a8:	str	r4, [r5, #36]	; 0x24
   166ac:	subs	r4, r3, #0
   166b0:	bne	16684 <__assert_fail@plt+0x5890>
   166b4:	cmp	r2, #0
   166b8:	beq	166c4 <__assert_fail@plt+0x58d0>
   166bc:	ldr	r0, [r7, #-8]
   166c0:	blx	r2
   166c4:	str	r6, [r7, #-8]
   166c8:	str	r6, [r7, #-4]
   166cc:	ldr	r3, [r5, #4]
   166d0:	cmp	r3, r8
   166d4:	add	r7, r7, #8
   166d8:	bhi	16664 <__assert_fail@plt+0x5870>
   166dc:	mov	r3, #0
   166e0:	str	r3, [r5, #12]
   166e4:	str	r3, [r5, #16]
   166e8:	pop	{r4, r5, r6, r7, r8, pc}
   166ec:	ldr	r3, [r0, #32]
   166f0:	push	{r4, r5, r6, lr}
   166f4:	cmp	r3, #0
   166f8:	mov	r5, r0
   166fc:	beq	1675c <__assert_fail@plt+0x5968>
   16700:	ldr	r3, [r0, #16]
   16704:	cmp	r3, #0
   16708:	beq	1675c <__assert_fail@plt+0x5968>
   1670c:	ldr	r6, [r0]
   16710:	ldr	r3, [r0, #4]
   16714:	cmp	r6, r3
   16718:	bcs	16798 <__assert_fail@plt+0x59a4>
   1671c:	ldr	r0, [r6]
   16720:	cmp	r0, #0
   16724:	movne	r4, r6
   16728:	bne	16734 <__assert_fail@plt+0x5940>
   1672c:	b	1674c <__assert_fail@plt+0x5958>
   16730:	ldr	r0, [r4]
   16734:	ldr	r3, [r5, #32]
   16738:	blx	r3
   1673c:	ldr	r4, [r4, #4]
   16740:	cmp	r4, #0
   16744:	bne	16730 <__assert_fail@plt+0x593c>
   16748:	ldr	r3, [r5, #4]
   1674c:	add	r6, r6, #8
   16750:	cmp	r3, r6
   16754:	bhi	1671c <__assert_fail@plt+0x5928>
   16758:	b	16760 <__assert_fail@plt+0x596c>
   1675c:	ldr	r3, [r5, #4]
   16760:	ldr	r6, [r5]
   16764:	cmp	r3, r6
   16768:	bls	16798 <__assert_fail@plt+0x59a4>
   1676c:	ldr	r0, [r6, #4]
   16770:	cmp	r0, #0
   16774:	beq	1678c <__assert_fail@plt+0x5998>
   16778:	ldr	r4, [r0, #4]
   1677c:	bl	12f10 <__assert_fail@plt+0x211c>
   16780:	subs	r0, r4, #0
   16784:	bne	16778 <__assert_fail@plt+0x5984>
   16788:	ldr	r3, [r5, #4]
   1678c:	add	r6, r6, #8
   16790:	cmp	r3, r6
   16794:	bhi	1676c <__assert_fail@plt+0x5978>
   16798:	ldr	r0, [r5, #36]	; 0x24
   1679c:	cmp	r0, #0
   167a0:	beq	167b4 <__assert_fail@plt+0x59c0>
   167a4:	ldr	r4, [r0, #4]
   167a8:	bl	12f10 <__assert_fail@plt+0x211c>
   167ac:	subs	r0, r4, #0
   167b0:	bne	167a4 <__assert_fail@plt+0x59b0>
   167b4:	ldr	r0, [r5]
   167b8:	bl	12f10 <__assert_fail@plt+0x211c>
   167bc:	mov	r0, r5
   167c0:	pop	{r4, r5, r6, lr}
   167c4:	b	12f10 <__assert_fail@plt+0x211c>
   167c8:	ldr	r3, [r0, #20]
   167cc:	push	{r4, r5, r6, r7, lr}
   167d0:	sub	sp, sp, #52	; 0x34
   167d4:	ldrb	r2, [r3, #16]
   167d8:	mov	r5, r0
   167dc:	str	r1, [sp, #4]
   167e0:	cmp	r2, #0
   167e4:	bne	16810 <__assert_fail@plt+0x5a1c>
   167e8:	vmov	s15, r1
   167ec:	vldr	s13, [r3, #8]
   167f0:	vldr	s14, [pc, #352]	; 16958 <__assert_fail@plt+0x5b64>
   167f4:	vcvt.f32.u32	s12, s15
   167f8:	vdiv.f32	s15, s12, s13
   167fc:	vcmpe.f32	s15, s14
   16800:	vmrs	APSR_nzcv, fpscr
   16804:	bge	16914 <__assert_fail@plt+0x5b20>
   16808:	vcvt.u32.f32	s15, s15
   1680c:	vstr	s15, [sp, #4]
   16810:	ldr	r0, [sp, #4]
   16814:	bl	15c80 <__assert_fail@plt+0x4e8c>
   16818:	lsrs	r3, r0, #30
   1681c:	movne	r2, #1
   16820:	moveq	r2, #0
   16824:	tst	r0, #536870912	; 0x20000000
   16828:	movne	r2, #1
   1682c:	cmp	r0, #0
   16830:	movne	r4, r2
   16834:	orreq	r4, r2, #1
   16838:	cmp	r4, #0
   1683c:	mov	r6, r0
   16840:	bne	16914 <__assert_fail@plt+0x5b20>
   16844:	ldr	r3, [r5, #8]
   16848:	cmp	r3, r0
   1684c:	beq	16904 <__assert_fail@plt+0x5b10>
   16850:	mov	r1, #8
   16854:	bl	16e48 <__assert_fail@plt+0x6054>
   16858:	cmp	r0, #0
   1685c:	str	r0, [sp, #8]
   16860:	beq	16914 <__assert_fail@plt+0x5b20>
   16864:	ldr	r1, [r5, #24]
   16868:	ldr	r7, [r5, #20]
   1686c:	ldr	lr, [r5, #28]
   16870:	ldr	ip, [r5, #32]
   16874:	add	r0, r0, r6, lsl #3
   16878:	ldr	r3, [r5, #36]	; 0x24
   1687c:	str	r0, [sp, #12]
   16880:	mov	r2, r4
   16884:	str	r1, [sp, #32]
   16888:	add	r0, sp, #8
   1688c:	mov	r1, r5
   16890:	str	r4, [sp, #20]
   16894:	str	r4, [sp, #24]
   16898:	str	r6, [sp, #16]
   1689c:	str	r7, [sp, #28]
   168a0:	str	lr, [sp, #36]	; 0x24
   168a4:	str	ip, [sp, #40]	; 0x28
   168a8:	str	r3, [sp, #44]	; 0x2c
   168ac:	bl	15f28 <__assert_fail@plt+0x5134>
   168b0:	subs	r4, r0, #0
   168b4:	bne	16924 <__assert_fail@plt+0x5b30>
   168b8:	ldr	r3, [sp, #44]	; 0x2c
   168bc:	mov	r2, #1
   168c0:	str	r3, [r5, #36]	; 0x24
   168c4:	add	r1, sp, #8
   168c8:	mov	r0, r5
   168cc:	bl	15f28 <__assert_fail@plt+0x5134>
   168d0:	cmp	r0, #0
   168d4:	beq	16954 <__assert_fail@plt+0x5b60>
   168d8:	add	r1, sp, #8
   168dc:	mov	r0, r5
   168e0:	mov	r2, r4
   168e4:	bl	15f28 <__assert_fail@plt+0x5134>
   168e8:	cmp	r0, #0
   168ec:	beq	16954 <__assert_fail@plt+0x5b60>
   168f0:	ldr	r0, [sp, #8]
   168f4:	bl	12f10 <__assert_fail@plt+0x211c>
   168f8:	mov	r0, r4
   168fc:	add	sp, sp, #52	; 0x34
   16900:	pop	{r4, r5, r6, r7, pc}
   16904:	mov	r4, #1
   16908:	mov	r0, r4
   1690c:	add	sp, sp, #52	; 0x34
   16910:	pop	{r4, r5, r6, r7, pc}
   16914:	mov	r4, #0
   16918:	mov	r0, r4
   1691c:	add	sp, sp, #52	; 0x34
   16920:	pop	{r4, r5, r6, r7, pc}
   16924:	ldr	r0, [r5]
   16928:	bl	12f10 <__assert_fail@plt+0x211c>
   1692c:	add	r0, sp, #12
   16930:	ldr	ip, [sp, #8]
   16934:	ldm	r0, {r0, r1, r2}
   16938:	ldr	r3, [sp, #44]	; 0x2c
   1693c:	str	ip, [r5]
   16940:	stmib	r5, {r0, r1, r2}
   16944:	mov	r0, r4
   16948:	str	r3, [r5, #36]	; 0x24
   1694c:	add	sp, sp, #52	; 0x34
   16950:	pop	{r4, r5, r6, r7, pc}
   16954:	bl	10db8 <abort@plt>
   16958:	svcmi	0x00800000
   1695c:	push	{r4, r5, r6, lr}
   16960:	subs	r6, r1, #0
   16964:	sub	sp, sp, #8
   16968:	beq	16a9c <__assert_fail@plt+0x5ca8>
   1696c:	mov	r4, r2
   16970:	mov	r3, #0
   16974:	add	r2, sp, #4
   16978:	mov	r5, r0
   1697c:	bl	15d7c <__assert_fail@plt+0x4f88>
   16980:	cmp	r0, #0
   16984:	beq	169a0 <__assert_fail@plt+0x5bac>
   16988:	cmp	r4, #0
   1698c:	moveq	r0, r4
   16990:	strne	r0, [r4]
   16994:	movne	r0, #0
   16998:	add	sp, sp, #8
   1699c:	pop	{r4, r5, r6, pc}
   169a0:	vldr	s15, [r5, #8]
   169a4:	ldr	r3, [r5, #20]
   169a8:	vldr	s14, [r5, #12]
   169ac:	vcvt.f32.u32	s15, s15
   169b0:	vldr	s13, [r3, #8]
   169b4:	vcvt.f32.u32	s14, s14
   169b8:	vmul.f32	s15, s15, s13
   169bc:	vcmpe.f32	s14, s15
   169c0:	vmrs	APSR_nzcv, fpscr
   169c4:	bgt	16a14 <__assert_fail@plt+0x5c20>
   169c8:	ldr	r2, [sp, #4]
   169cc:	ldr	r3, [r2]
   169d0:	cmp	r3, #0
   169d4:	beq	16aa0 <__assert_fail@plt+0x5cac>
   169d8:	ldr	r3, [r5, #36]	; 0x24
   169dc:	cmp	r3, #0
   169e0:	beq	16ac4 <__assert_fail@plt+0x5cd0>
   169e4:	ldr	r1, [r3, #4]
   169e8:	str	r1, [r5, #36]	; 0x24
   169ec:	ldr	r1, [r5, #16]
   169f0:	ldr	r0, [r2, #4]
   169f4:	add	r1, r1, #1
   169f8:	str	r0, [r3, #4]
   169fc:	str	r6, [r3]
   16a00:	mov	r0, #1
   16a04:	str	r3, [r2, #4]
   16a08:	str	r1, [r5, #16]
   16a0c:	add	sp, sp, #8
   16a10:	pop	{r4, r5, r6, pc}
   16a14:	add	r0, r5, #20
   16a18:	bl	15e78 <__assert_fail@plt+0x5084>
   16a1c:	vldr	s15, [r5, #8]
   16a20:	ldr	r3, [r5, #20]
   16a24:	vldr	s14, [r5, #12]
   16a28:	vcvt.f32.u32	s15, s15
   16a2c:	vldr	s13, [r3, #8]
   16a30:	vcvt.f32.u32	s14, s14
   16a34:	vmul.f32	s12, s13, s15
   16a38:	vcmpe.f32	s14, s12
   16a3c:	vmrs	APSR_nzcv, fpscr
   16a40:	ble	169c8 <__assert_fail@plt+0x5bd4>
   16a44:	vldr	s14, [r3, #12]
   16a48:	ldrb	r2, [r3, #16]
   16a4c:	vmul.f32	s15, s15, s14
   16a50:	cmp	r2, #0
   16a54:	vldr	s14, [pc, #132]	; 16ae0 <__assert_fail@plt+0x5cec>
   16a58:	vmuleq.f32	s15, s15, s13
   16a5c:	vcmpe.f32	s15, s14
   16a60:	vmrs	APSR_nzcv, fpscr
   16a64:	bge	16ad8 <__assert_fail@plt+0x5ce4>
   16a68:	vcvt.u32.f32	s15, s15
   16a6c:	mov	r0, r5
   16a70:	vmov	r1, s15
   16a74:	bl	167c8 <__assert_fail@plt+0x59d4>
   16a78:	cmp	r0, #0
   16a7c:	beq	16ad8 <__assert_fail@plt+0x5ce4>
   16a80:	add	r2, sp, #4
   16a84:	mov	r3, #0
   16a88:	mov	r1, r6
   16a8c:	mov	r0, r5
   16a90:	bl	15d7c <__assert_fail@plt+0x4f88>
   16a94:	cmp	r0, #0
   16a98:	beq	169c8 <__assert_fail@plt+0x5bd4>
   16a9c:	bl	10db8 <abort@plt>
   16aa0:	ldr	r1, [r5, #16]
   16aa4:	ldr	r3, [r5, #12]
   16aa8:	add	r1, r1, #1
   16aac:	add	r3, r3, #1
   16ab0:	str	r6, [r2]
   16ab4:	mov	r0, #1
   16ab8:	str	r1, [r5, #16]
   16abc:	str	r3, [r5, #12]
   16ac0:	b	16998 <__assert_fail@plt+0x5ba4>
   16ac4:	mov	r0, #8
   16ac8:	bl	16e90 <__assert_fail@plt+0x609c>
   16acc:	subs	r3, r0, #0
   16ad0:	ldrne	r2, [sp, #4]
   16ad4:	bne	169ec <__assert_fail@plt+0x5bf8>
   16ad8:	mvn	r0, #0
   16adc:	b	16998 <__assert_fail@plt+0x5ba4>
   16ae0:	svcmi	0x00800000
   16ae4:	push	{r4, lr}
   16ae8:	sub	sp, sp, #8
   16aec:	add	r2, sp, #4
   16af0:	mov	r4, r1
   16af4:	bl	1695c <__assert_fail@plt+0x5b68>
   16af8:	cmn	r0, #1
   16afc:	beq	16b14 <__assert_fail@plt+0x5d20>
   16b00:	cmp	r0, #0
   16b04:	movne	r0, r4
   16b08:	ldreq	r0, [sp, #4]
   16b0c:	add	sp, sp, #8
   16b10:	pop	{r4, pc}
   16b14:	mov	r0, #0
   16b18:	b	16b0c <__assert_fail@plt+0x5d18>
   16b1c:	push	{r4, r5, r6, lr}
   16b20:	sub	sp, sp, #8
   16b24:	mov	r3, #1
   16b28:	add	r2, sp, #4
   16b2c:	mov	r4, r0
   16b30:	bl	15d7c <__assert_fail@plt+0x4f88>
   16b34:	subs	r5, r0, #0
   16b38:	beq	16b58 <__assert_fail@plt+0x5d64>
   16b3c:	ldr	r2, [sp, #4]
   16b40:	ldr	r3, [r4, #16]
   16b44:	ldr	r2, [r2]
   16b48:	sub	r3, r3, #1
   16b4c:	cmp	r2, #0
   16b50:	str	r3, [r4, #16]
   16b54:	beq	16b64 <__assert_fail@plt+0x5d70>
   16b58:	mov	r0, r5
   16b5c:	add	sp, sp, #8
   16b60:	pop	{r4, r5, r6, pc}
   16b64:	vldr	s15, [r4, #8]
   16b68:	ldr	r3, [r4, #12]
   16b6c:	ldr	r2, [r4, #20]
   16b70:	sub	r3, r3, #1
   16b74:	vcvt.f32.u32	s14, s15
   16b78:	vldr	s13, [r2]
   16b7c:	vmov	s15, r3
   16b80:	str	r3, [r4, #12]
   16b84:	vcvt.f32.u32	s15, s15
   16b88:	vmul.f32	s14, s14, s13
   16b8c:	vcmpe.f32	s15, s14
   16b90:	vmrs	APSR_nzcv, fpscr
   16b94:	bpl	16b58 <__assert_fail@plt+0x5d64>
   16b98:	add	r0, r4, #20
   16b9c:	bl	15e78 <__assert_fail@plt+0x5084>
   16ba0:	vldr	s15, [r4, #8]
   16ba4:	ldr	r3, [r4, #20]
   16ba8:	vldr	s13, [r4, #12]
   16bac:	vcvt.f32.u32	s15, s15
   16bb0:	vldr	s14, [r3]
   16bb4:	vcvt.f32.u32	s13, s13
   16bb8:	vmul.f32	s14, s15, s14
   16bbc:	vcmpe.f32	s13, s14
   16bc0:	vmrs	APSR_nzcv, fpscr
   16bc4:	bpl	16b58 <__assert_fail@plt+0x5d64>
   16bc8:	ldrb	r2, [r3, #16]
   16bcc:	mov	r0, r4
   16bd0:	cmp	r2, #0
   16bd4:	vldreq	s13, [r3, #4]
   16bd8:	vldrne	s14, [r3, #4]
   16bdc:	vldreq	s14, [r3, #8]
   16be0:	vmuleq.f32	s15, s15, s13
   16be4:	vmul.f32	s15, s15, s14
   16be8:	vcvt.u32.f32	s15, s15
   16bec:	vmov	r1, s15
   16bf0:	bl	167c8 <__assert_fail@plt+0x59d4>
   16bf4:	cmp	r0, #0
   16bf8:	bne	16b58 <__assert_fail@plt+0x5d64>
   16bfc:	ldr	r0, [r4, #36]	; 0x24
   16c00:	cmp	r0, #0
   16c04:	beq	16c18 <__assert_fail@plt+0x5e24>
   16c08:	ldr	r6, [r0, #4]
   16c0c:	bl	12f10 <__assert_fail@plt+0x211c>
   16c10:	subs	r0, r6, #0
   16c14:	bne	16c08 <__assert_fail@plt+0x5e14>
   16c18:	mov	r3, #0
   16c1c:	str	r3, [r4, #36]	; 0x24
   16c20:	b	16b58 <__assert_fail@plt+0x5d64>
   16c24:	b	16b1c <__assert_fail@plt+0x5d28>
   16c28:	mov	r3, #0
   16c2c:	mov	r2, #1
   16c30:	str	r1, [r0]
   16c34:	str	r1, [r0, #4]
   16c38:	str	r1, [r0, #8]
   16c3c:	str	r1, [r0, #12]
   16c40:	str	r1, [r0, #16]
   16c44:	strb	r2, [r0, #28]
   16c48:	str	r3, [r0, #20]
   16c4c:	str	r3, [r0, #24]
   16c50:	bx	lr
   16c54:	ldrb	r0, [r0, #28]
   16c58:	bx	lr
   16c5c:	ldrb	ip, [r0, #28]
   16c60:	ldr	r3, [r0, #20]
   16c64:	mov	r2, r0
   16c68:	eor	ip, ip, #1
   16c6c:	add	r3, ip, r3
   16c70:	and	r3, r3, #3
   16c74:	ldr	r0, [r0, r3, lsl #2]
   16c78:	str	r1, [r2, r3, lsl #2]
   16c7c:	ldr	r1, [r2, #24]
   16c80:	str	r3, [r2, #20]
   16c84:	cmp	r3, r1
   16c88:	addeq	r3, ip, r3
   16c8c:	andeq	r3, r3, #3
   16c90:	streq	r3, [r2, #24]
   16c94:	mov	r3, #0
   16c98:	strb	r3, [r2, #28]
   16c9c:	bx	lr
   16ca0:	ldrb	r3, [r0, #28]
   16ca4:	cmp	r3, #0
   16ca8:	bne	16ce0 <__assert_fail@plt+0x5eec>
   16cac:	ldr	r3, [r0, #20]
   16cb0:	ldr	r1, [r0, #16]
   16cb4:	ldr	r2, [r0, r3, lsl #2]
   16cb8:	str	r1, [r0, r3, lsl #2]
   16cbc:	ldr	r1, [r0, #24]
   16cc0:	cmp	r3, r1
   16cc4:	addne	r3, r3, #3
   16cc8:	moveq	r3, #1
   16ccc:	andne	r3, r3, #3
   16cd0:	strbeq	r3, [r0, #28]
   16cd4:	strne	r3, [r0, #20]
   16cd8:	mov	r0, r2
   16cdc:	bx	lr
   16ce0:	push	{r4, lr}
   16ce4:	bl	10db8 <abort@plt>
   16ce8:	push	{r4, r5, r6, r8, r9, lr}
   16cec:	mov	r4, r0
   16cf0:	mov	r5, r1
   16cf4:	add	r6, r2, #20
   16cf8:	mov	r8, #10
   16cfc:	mov	r9, #0
   16d00:	mov	r3, #0
   16d04:	strb	r3, [r2, #20]
   16d08:	mov	r0, r4
   16d0c:	mov	r1, r5
   16d10:	mov	r2, r8
   16d14:	mov	r3, r9
   16d18:	bl	17740 <__assert_fail@plt+0x694c>
   16d1c:	mov	r0, r4
   16d20:	mov	r1, r5
   16d24:	mov	r3, r9
   16d28:	add	r2, r2, #48	; 0x30
   16d2c:	strb	r2, [r6, #-1]!
   16d30:	mov	r2, r8
   16d34:	bl	17740 <__assert_fail@plt+0x694c>
   16d38:	mov	r4, r0
   16d3c:	mov	r5, r1
   16d40:	orrs	r3, r4, r5
   16d44:	bne	16d08 <__assert_fail@plt+0x5f14>
   16d48:	mov	r0, r6
   16d4c:	pop	{r4, r5, r6, r8, r9, pc}
   16d50:	push	{r1, r2, r3}
   16d54:	push	{lr}		; (str lr, [sp, #-4]!)
   16d58:	sub	sp, sp, #8
   16d5c:	add	r3, sp, #16
   16d60:	ldr	r2, [sp, #16]
   16d64:	ldr	r1, [sp, #12]
   16d68:	str	r3, [sp, #4]
   16d6c:	bl	10c5c <ioctl@plt>
   16d70:	add	sp, sp, #8
   16d74:	pop	{lr}		; (ldr lr, [sp], #4)
   16d78:	add	sp, sp, #12
   16d7c:	bx	lr
   16d80:	push	{r2, r3}
   16d84:	push	{lr}		; (str lr, [sp, #-4]!)
   16d88:	sub	sp, sp, #12
   16d8c:	ldr	r2, [sp, #16]
   16d90:	ands	r3, r2, #64	; 0x40
   16d94:	addne	r3, sp, #20
   16d98:	strne	r3, [sp, #4]
   16d9c:	ldrne	r3, [sp, #20]
   16da0:	bl	10ce0 <openat64@plt>
   16da4:	bl	16e0c <__assert_fail@plt+0x6018>
   16da8:	add	sp, sp, #12
   16dac:	pop	{lr}		; (ldr lr, [sp], #4)
   16db0:	add	sp, sp, #8
   16db4:	bx	lr
   16db8:	orr	r2, r2, #540672	; 0x84000
   16dbc:	push	{r4, r5, r6, lr}
   16dc0:	orr	r2, r2, #2304	; 0x900
   16dc4:	mov	r6, r3
   16dc8:	bl	16d80 <__assert_fail@plt+0x5f8c>
   16dcc:	subs	r5, r0, #0
   16dd0:	blt	16e04 <__assert_fail@plt+0x6010>
   16dd4:	bl	10d4c <fdopendir@plt>
   16dd8:	subs	r4, r0, #0
   16ddc:	beq	16dec <__assert_fail@plt+0x5ff8>
   16de0:	str	r5, [r6]
   16de4:	mov	r0, r4
   16de8:	pop	{r4, r5, r6, pc}
   16dec:	bl	10cf8 <__errno_location@plt>
   16df0:	mov	r6, r0
   16df4:	mov	r0, r5
   16df8:	ldr	r5, [r6]
   16dfc:	bl	10dc4 <close@plt>
   16e00:	b	16de0 <__assert_fail@plt+0x5fec>
   16e04:	mov	r4, #0
   16e08:	b	16de4 <__assert_fail@plt+0x5ff0>
   16e0c:	cmp	r0, #2
   16e10:	push	{r4, r5, r6, r7, r8, lr}
   16e14:	mov	r4, r0
   16e18:	bhi	16e40 <__assert_fail@plt+0x604c>
   16e1c:	bl	17214 <__assert_fail@plt+0x6420>
   16e20:	mov	r7, r0
   16e24:	bl	10cf8 <__errno_location@plt>
   16e28:	mov	r5, r0
   16e2c:	mov	r0, r4
   16e30:	ldr	r6, [r5]
   16e34:	mov	r4, r7
   16e38:	bl	10dc4 <close@plt>
   16e3c:	str	r6, [r5]
   16e40:	mov	r0, r4
   16e44:	pop	{r4, r5, r6, r7, r8, pc}
   16e48:	cmp	r1, #0
   16e4c:	cmpne	r0, #0
   16e50:	moveq	r1, #1
   16e54:	moveq	r0, r1
   16e58:	umull	r2, r3, r0, r1
   16e5c:	adds	r3, r3, #0
   16e60:	movne	r3, #1
   16e64:	cmp	r2, #0
   16e68:	blt	16e78 <__assert_fail@plt+0x6084>
   16e6c:	cmp	r3, #0
   16e70:	bne	16e78 <__assert_fail@plt+0x6084>
   16e74:	b	10b84 <calloc@plt>
   16e78:	push	{r4, lr}
   16e7c:	bl	10cf8 <__errno_location@plt>
   16e80:	mov	r3, #12
   16e84:	str	r3, [r0]
   16e88:	mov	r0, #0
   16e8c:	pop	{r4, pc}
   16e90:	cmp	r0, #0
   16e94:	moveq	r0, #1
   16e98:	cmp	r0, #0
   16e9c:	blt	16ea4 <__assert_fail@plt+0x60b0>
   16ea0:	b	10c8c <malloc@plt>
   16ea4:	push	{r4, lr}
   16ea8:	bl	10cf8 <__errno_location@plt>
   16eac:	mov	r3, #12
   16eb0:	str	r3, [r0]
   16eb4:	mov	r0, #0
   16eb8:	pop	{r4, pc}
   16ebc:	cmp	r0, #0
   16ec0:	beq	16ee4 <__assert_fail@plt+0x60f0>
   16ec4:	cmp	r1, #0
   16ec8:	push	{lr}		; (str lr, [sp, #-4]!)
   16ecc:	sub	sp, sp, #12
   16ed0:	beq	16eec <__assert_fail@plt+0x60f8>
   16ed4:	blt	16f04 <__assert_fail@plt+0x6110>
   16ed8:	add	sp, sp, #12
   16edc:	pop	{lr}		; (ldr lr, [sp], #4)
   16ee0:	b	10c14 <realloc@plt>
   16ee4:	mov	r0, r1
   16ee8:	b	16e90 <__assert_fail@plt+0x609c>
   16eec:	str	r1, [sp, #4]
   16ef0:	bl	12f10 <__assert_fail@plt+0x211c>
   16ef4:	ldr	r3, [sp, #4]
   16ef8:	mov	r0, r3
   16efc:	add	sp, sp, #12
   16f00:	pop	{pc}		; (ldr pc, [sp], #4)
   16f04:	bl	10cf8 <__errno_location@plt>
   16f08:	mov	r2, #12
   16f0c:	mov	r3, #0
   16f10:	str	r2, [r0]
   16f14:	b	16ef8 <__assert_fail@plt+0x6104>
   16f18:	push	{r4, r5}
   16f1c:	mov	r4, #0
   16f20:	mov	r5, #0
   16f24:	ldr	r3, [pc, #12]	; 16f38 <__assert_fail@plt+0x6144>
   16f28:	strd	r4, [r0, #16]
   16f2c:	str	r3, [r0, #24]
   16f30:	pop	{r4, r5}
   16f34:	bx	lr
   16f38:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   16f3c:	ldr	r3, [pc, #180]	; 16ff8 <__assert_fail@plt+0x6204>
   16f40:	ldr	r2, [r0, #24]
   16f44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16f48:	cmp	r2, r3
   16f4c:	bne	16fe4 <__assert_fail@plt+0x61f0>
   16f50:	ldrd	r6, [r0, #16]
   16f54:	orrs	r3, r6, r7
   16f58:	bne	16f84 <__assert_fail@plt+0x6190>
   16f5c:	mov	r2, #1
   16f60:	mov	r3, #0
   16f64:	ldrd	r8, [r1, #96]	; 0x60
   16f68:	strd	r2, [r0, #16]
   16f6c:	ldrd	r2, [r1]
   16f70:	mov	r1, #0
   16f74:	strd	r8, [r0]
   16f78:	strd	r2, [r0, #8]
   16f7c:	mov	r0, r1
   16f80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16f84:	ldrd	r8, [r1, #96]	; 0x60
   16f88:	ldrd	r2, [r0]
   16f8c:	cmp	r9, r3
   16f90:	cmpeq	r8, r2
   16f94:	beq	16fcc <__assert_fail@plt+0x61d8>
   16f98:	adds	r2, r6, #1
   16f9c:	adc	r3, r7, #0
   16fa0:	and	r6, r6, r2
   16fa4:	and	r7, r7, r3
   16fa8:	orrs	ip, r6, r7
   16fac:	strd	r2, [r0, #16]
   16fb0:	movne	r1, #0
   16fb4:	bne	16f7c <__assert_fail@plt+0x6188>
   16fb8:	orrs	r3, r2, r3
   16fbc:	bne	16f6c <__assert_fail@plt+0x6178>
   16fc0:	mov	r1, #1
   16fc4:	mov	r0, r1
   16fc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16fcc:	ldrd	r4, [r1]
   16fd0:	ldrd	r2, [r0, #8]
   16fd4:	cmp	r5, r3
   16fd8:	cmpeq	r4, r2
   16fdc:	bne	16f98 <__assert_fail@plt+0x61a4>
   16fe0:	b	16fc0 <__assert_fail@plt+0x61cc>
   16fe4:	ldr	r3, [pc, #16]	; 16ffc <__assert_fail@plt+0x6208>
   16fe8:	mov	r2, #60	; 0x3c
   16fec:	ldr	r1, [pc, #12]	; 17000 <__assert_fail@plt+0x620c>
   16ff0:	ldr	r0, [pc, #12]	; 17004 <__assert_fail@plt+0x6210>
   16ff4:	bl	10df4 <__assert_fail@plt>
   16ff8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   16ffc:	andeq	r7, r1, ip, asr ip
   17000:	andeq	r7, r1, r8, ror #24
   17004:	andeq	r7, r1, r8, ror ip
   17008:	push	{r1, r2, r3}
   1700c:	push	{r4, r5, r6, r7, lr}
   17010:	sub	sp, sp, #8
   17014:	add	r3, sp, #32
   17018:	ldr	r1, [sp, #28]
   1701c:	str	r3, [sp, #4]
   17020:	cmp	r1, #0
   17024:	beq	170bc <__assert_fail@plt+0x62c8>
   17028:	ldr	r2, [pc, #412]	; 171cc <__assert_fail@plt+0x63d8>
   1702c:	mov	r5, r0
   17030:	cmp	r1, r2
   17034:	bne	17080 <__assert_fail@plt+0x628c>
   17038:	ldr	r6, [pc, #400]	; 171d0 <__assert_fail@plt+0x63dc>
   1703c:	ldr	r7, [r3]
   17040:	add	r2, sp, #36	; 0x24
   17044:	ldr	r3, [r6]
   17048:	str	r2, [sp, #4]
   1704c:	cmp	r3, #0
   17050:	mov	r2, r7
   17054:	blt	17180 <__assert_fail@plt+0x638c>
   17058:	bl	10d1c <fcntl64@plt>
   1705c:	subs	r4, r0, #0
   17060:	blt	17104 <__assert_fail@plt+0x6310>
   17064:	mov	r3, #1
   17068:	str	r3, [r6]
   1706c:	mov	r0, r4
   17070:	add	sp, sp, #8
   17074:	pop	{r4, r5, r6, r7, lr}
   17078:	add	sp, sp, #12
   1707c:	bx	lr
   17080:	cmp	r1, #11
   17084:	beq	170ac <__assert_fail@plt+0x62b8>
   17088:	bgt	170cc <__assert_fail@plt+0x62d8>
   1708c:	cmp	r1, #3
   17090:	beq	170ac <__assert_fail@plt+0x62b8>
   17094:	ble	171c0 <__assert_fail@plt+0x63cc>
   17098:	cmp	r1, #8
   1709c:	beq	170ec <__assert_fail@plt+0x62f8>
   170a0:	ble	170ec <__assert_fail@plt+0x62f8>
   170a4:	cmp	r1, #9
   170a8:	bne	170ec <__assert_fail@plt+0x62f8>
   170ac:	mov	r0, r5
   170b0:	bl	10d1c <fcntl64@plt>
   170b4:	mov	r4, r0
   170b8:	b	1706c <__assert_fail@plt+0x6278>
   170bc:	ldr	r2, [sp, #32]
   170c0:	bl	10d1c <fcntl64@plt>
   170c4:	mov	r4, r0
   170c8:	b	1706c <__assert_fail@plt+0x6278>
   170cc:	ldr	r3, [pc, #256]	; 171d4 <__assert_fail@plt+0x63e0>
   170d0:	cmp	r1, r3
   170d4:	bgt	171a0 <__assert_fail@plt+0x63ac>
   170d8:	cmp	r1, r2
   170dc:	bge	170ec <__assert_fail@plt+0x62f8>
   170e0:	sub	r3, r3, #6
   170e4:	cmp	r1, r3
   170e8:	beq	170ac <__assert_fail@plt+0x62b8>
   170ec:	ldr	r3, [sp, #4]
   170f0:	mov	r0, r5
   170f4:	ldr	r2, [r3]
   170f8:	bl	10d1c <fcntl64@plt>
   170fc:	mov	r4, r0
   17100:	b	1706c <__assert_fail@plt+0x6278>
   17104:	bl	10cf8 <__errno_location@plt>
   17108:	ldr	r3, [r0]
   1710c:	cmp	r3, #22
   17110:	bne	17064 <__assert_fail@plt+0x6270>
   17114:	mov	r2, r7
   17118:	mov	r0, r5
   1711c:	mov	r1, #0
   17120:	bl	10d1c <fcntl64@plt>
   17124:	subs	r4, r0, #0
   17128:	blt	1706c <__assert_fail@plt+0x6278>
   1712c:	mvn	r3, #0
   17130:	str	r3, [r6]
   17134:	mov	r1, #1
   17138:	mov	r0, r4
   1713c:	bl	10d1c <fcntl64@plt>
   17140:	subs	r2, r0, #0
   17144:	blt	17160 <__assert_fail@plt+0x636c>
   17148:	orr	r2, r2, #1
   1714c:	mov	r1, #2
   17150:	mov	r0, r4
   17154:	bl	10d1c <fcntl64@plt>
   17158:	cmn	r0, #1
   1715c:	bne	1706c <__assert_fail@plt+0x6278>
   17160:	bl	10cf8 <__errno_location@plt>
   17164:	mov	r5, r0
   17168:	mov	r0, r4
   1716c:	ldr	r6, [r5]
   17170:	mvn	r4, #0
   17174:	bl	10dc4 <close@plt>
   17178:	str	r6, [r5]
   1717c:	b	1706c <__assert_fail@plt+0x6278>
   17180:	mov	r1, #0
   17184:	bl	10d1c <fcntl64@plt>
   17188:	subs	r4, r0, #0
   1718c:	blt	1706c <__assert_fail@plt+0x6278>
   17190:	ldr	r3, [r6]
   17194:	cmn	r3, #1
   17198:	beq	17134 <__assert_fail@plt+0x6340>
   1719c:	b	1706c <__assert_fail@plt+0x6278>
   171a0:	ldr	r3, [pc, #48]	; 171d8 <__assert_fail@plt+0x63e4>
   171a4:	cmp	r1, r3
   171a8:	beq	170ec <__assert_fail@plt+0x62f8>
   171ac:	blt	170ac <__assert_fail@plt+0x62b8>
   171b0:	add	r3, r3, #1
   171b4:	cmp	r1, r3
   171b8:	bne	170ec <__assert_fail@plt+0x62f8>
   171bc:	b	170ac <__assert_fail@plt+0x62b8>
   171c0:	cmp	r1, #1
   171c4:	bne	170ec <__assert_fail@plt+0x62f8>
   171c8:	b	170ac <__assert_fail@plt+0x62b8>
   171cc:	andeq	r0, r0, r6, lsl #8
   171d0:	andeq	r8, r2, r4, asr r1
   171d4:	andeq	r0, r0, r7, lsl #8
   171d8:	andeq	r0, r0, r9, lsl #8
   171dc:	push	{r1, r2, r3}
   171e0:	push	{lr}		; (str lr, [sp, #-4]!)
   171e4:	sub	sp, sp, #8
   171e8:	ldr	r1, [sp, #12]
   171ec:	ands	r2, r1, #64	; 0x40
   171f0:	addne	r3, sp, #16
   171f4:	ldrne	r2, [sp, #16]
   171f8:	strne	r3, [sp, #4]
   171fc:	bl	10c74 <open64@plt>
   17200:	bl	16e0c <__assert_fail@plt+0x6018>
   17204:	add	sp, sp, #8
   17208:	pop	{lr}		; (ldr lr, [sp], #4)
   1720c:	add	sp, sp, #12
   17210:	bx	lr
   17214:	mov	r2, #3
   17218:	mov	r1, #0
   1721c:	b	17008 <__assert_fail@plt+0x6214>
   17220:	subs	r2, r1, #1
   17224:	bxeq	lr
   17228:	bcc	17400 <__assert_fail@plt+0x660c>
   1722c:	cmp	r0, r1
   17230:	bls	173e4 <__assert_fail@plt+0x65f0>
   17234:	tst	r1, r2
   17238:	beq	173f0 <__assert_fail@plt+0x65fc>
   1723c:	clz	r3, r0
   17240:	clz	r2, r1
   17244:	sub	r3, r2, r3
   17248:	rsbs	r3, r3, #31
   1724c:	addne	r3, r3, r3, lsl #1
   17250:	mov	r2, #0
   17254:	addne	pc, pc, r3, lsl #2
   17258:	nop			; (mov r0, r0)
   1725c:	cmp	r0, r1, lsl #31
   17260:	adc	r2, r2, r2
   17264:	subcs	r0, r0, r1, lsl #31
   17268:	cmp	r0, r1, lsl #30
   1726c:	adc	r2, r2, r2
   17270:	subcs	r0, r0, r1, lsl #30
   17274:	cmp	r0, r1, lsl #29
   17278:	adc	r2, r2, r2
   1727c:	subcs	r0, r0, r1, lsl #29
   17280:	cmp	r0, r1, lsl #28
   17284:	adc	r2, r2, r2
   17288:	subcs	r0, r0, r1, lsl #28
   1728c:	cmp	r0, r1, lsl #27
   17290:	adc	r2, r2, r2
   17294:	subcs	r0, r0, r1, lsl #27
   17298:	cmp	r0, r1, lsl #26
   1729c:	adc	r2, r2, r2
   172a0:	subcs	r0, r0, r1, lsl #26
   172a4:	cmp	r0, r1, lsl #25
   172a8:	adc	r2, r2, r2
   172ac:	subcs	r0, r0, r1, lsl #25
   172b0:	cmp	r0, r1, lsl #24
   172b4:	adc	r2, r2, r2
   172b8:	subcs	r0, r0, r1, lsl #24
   172bc:	cmp	r0, r1, lsl #23
   172c0:	adc	r2, r2, r2
   172c4:	subcs	r0, r0, r1, lsl #23
   172c8:	cmp	r0, r1, lsl #22
   172cc:	adc	r2, r2, r2
   172d0:	subcs	r0, r0, r1, lsl #22
   172d4:	cmp	r0, r1, lsl #21
   172d8:	adc	r2, r2, r2
   172dc:	subcs	r0, r0, r1, lsl #21
   172e0:	cmp	r0, r1, lsl #20
   172e4:	adc	r2, r2, r2
   172e8:	subcs	r0, r0, r1, lsl #20
   172ec:	cmp	r0, r1, lsl #19
   172f0:	adc	r2, r2, r2
   172f4:	subcs	r0, r0, r1, lsl #19
   172f8:	cmp	r0, r1, lsl #18
   172fc:	adc	r2, r2, r2
   17300:	subcs	r0, r0, r1, lsl #18
   17304:	cmp	r0, r1, lsl #17
   17308:	adc	r2, r2, r2
   1730c:	subcs	r0, r0, r1, lsl #17
   17310:	cmp	r0, r1, lsl #16
   17314:	adc	r2, r2, r2
   17318:	subcs	r0, r0, r1, lsl #16
   1731c:	cmp	r0, r1, lsl #15
   17320:	adc	r2, r2, r2
   17324:	subcs	r0, r0, r1, lsl #15
   17328:	cmp	r0, r1, lsl #14
   1732c:	adc	r2, r2, r2
   17330:	subcs	r0, r0, r1, lsl #14
   17334:	cmp	r0, r1, lsl #13
   17338:	adc	r2, r2, r2
   1733c:	subcs	r0, r0, r1, lsl #13
   17340:	cmp	r0, r1, lsl #12
   17344:	adc	r2, r2, r2
   17348:	subcs	r0, r0, r1, lsl #12
   1734c:	cmp	r0, r1, lsl #11
   17350:	adc	r2, r2, r2
   17354:	subcs	r0, r0, r1, lsl #11
   17358:	cmp	r0, r1, lsl #10
   1735c:	adc	r2, r2, r2
   17360:	subcs	r0, r0, r1, lsl #10
   17364:	cmp	r0, r1, lsl #9
   17368:	adc	r2, r2, r2
   1736c:	subcs	r0, r0, r1, lsl #9
   17370:	cmp	r0, r1, lsl #8
   17374:	adc	r2, r2, r2
   17378:	subcs	r0, r0, r1, lsl #8
   1737c:	cmp	r0, r1, lsl #7
   17380:	adc	r2, r2, r2
   17384:	subcs	r0, r0, r1, lsl #7
   17388:	cmp	r0, r1, lsl #6
   1738c:	adc	r2, r2, r2
   17390:	subcs	r0, r0, r1, lsl #6
   17394:	cmp	r0, r1, lsl #5
   17398:	adc	r2, r2, r2
   1739c:	subcs	r0, r0, r1, lsl #5
   173a0:	cmp	r0, r1, lsl #4
   173a4:	adc	r2, r2, r2
   173a8:	subcs	r0, r0, r1, lsl #4
   173ac:	cmp	r0, r1, lsl #3
   173b0:	adc	r2, r2, r2
   173b4:	subcs	r0, r0, r1, lsl #3
   173b8:	cmp	r0, r1, lsl #2
   173bc:	adc	r2, r2, r2
   173c0:	subcs	r0, r0, r1, lsl #2
   173c4:	cmp	r0, r1, lsl #1
   173c8:	adc	r2, r2, r2
   173cc:	subcs	r0, r0, r1, lsl #1
   173d0:	cmp	r0, r1
   173d4:	adc	r2, r2, r2
   173d8:	subcs	r0, r0, r1
   173dc:	mov	r0, r2
   173e0:	bx	lr
   173e4:	moveq	r0, #1
   173e8:	movne	r0, #0
   173ec:	bx	lr
   173f0:	clz	r2, r1
   173f4:	rsb	r2, r2, #31
   173f8:	lsr	r0, r0, r2
   173fc:	bx	lr
   17400:	cmp	r0, #0
   17404:	mvnne	r0, #0
   17408:	b	1777c <__assert_fail@plt+0x6988>
   1740c:	cmp	r1, #0
   17410:	beq	17400 <__assert_fail@plt+0x660c>
   17414:	push	{r0, r1, lr}
   17418:	bl	17220 <__assert_fail@plt+0x642c>
   1741c:	pop	{r1, r2, lr}
   17420:	mul	r3, r2, r0
   17424:	sub	r1, r1, r3
   17428:	bx	lr
   1742c:	cmp	r1, #0
   17430:	beq	1763c <__assert_fail@plt+0x6848>
   17434:	eor	ip, r0, r1
   17438:	rsbmi	r1, r1, #0
   1743c:	subs	r2, r1, #1
   17440:	beq	17608 <__assert_fail@plt+0x6814>
   17444:	movs	r3, r0
   17448:	rsbmi	r3, r0, #0
   1744c:	cmp	r3, r1
   17450:	bls	17614 <__assert_fail@plt+0x6820>
   17454:	tst	r1, r2
   17458:	beq	17624 <__assert_fail@plt+0x6830>
   1745c:	clz	r2, r3
   17460:	clz	r0, r1
   17464:	sub	r2, r0, r2
   17468:	rsbs	r2, r2, #31
   1746c:	addne	r2, r2, r2, lsl #1
   17470:	mov	r0, #0
   17474:	addne	pc, pc, r2, lsl #2
   17478:	nop			; (mov r0, r0)
   1747c:	cmp	r3, r1, lsl #31
   17480:	adc	r0, r0, r0
   17484:	subcs	r3, r3, r1, lsl #31
   17488:	cmp	r3, r1, lsl #30
   1748c:	adc	r0, r0, r0
   17490:	subcs	r3, r3, r1, lsl #30
   17494:	cmp	r3, r1, lsl #29
   17498:	adc	r0, r0, r0
   1749c:	subcs	r3, r3, r1, lsl #29
   174a0:	cmp	r3, r1, lsl #28
   174a4:	adc	r0, r0, r0
   174a8:	subcs	r3, r3, r1, lsl #28
   174ac:	cmp	r3, r1, lsl #27
   174b0:	adc	r0, r0, r0
   174b4:	subcs	r3, r3, r1, lsl #27
   174b8:	cmp	r3, r1, lsl #26
   174bc:	adc	r0, r0, r0
   174c0:	subcs	r3, r3, r1, lsl #26
   174c4:	cmp	r3, r1, lsl #25
   174c8:	adc	r0, r0, r0
   174cc:	subcs	r3, r3, r1, lsl #25
   174d0:	cmp	r3, r1, lsl #24
   174d4:	adc	r0, r0, r0
   174d8:	subcs	r3, r3, r1, lsl #24
   174dc:	cmp	r3, r1, lsl #23
   174e0:	adc	r0, r0, r0
   174e4:	subcs	r3, r3, r1, lsl #23
   174e8:	cmp	r3, r1, lsl #22
   174ec:	adc	r0, r0, r0
   174f0:	subcs	r3, r3, r1, lsl #22
   174f4:	cmp	r3, r1, lsl #21
   174f8:	adc	r0, r0, r0
   174fc:	subcs	r3, r3, r1, lsl #21
   17500:	cmp	r3, r1, lsl #20
   17504:	adc	r0, r0, r0
   17508:	subcs	r3, r3, r1, lsl #20
   1750c:	cmp	r3, r1, lsl #19
   17510:	adc	r0, r0, r0
   17514:	subcs	r3, r3, r1, lsl #19
   17518:	cmp	r3, r1, lsl #18
   1751c:	adc	r0, r0, r0
   17520:	subcs	r3, r3, r1, lsl #18
   17524:	cmp	r3, r1, lsl #17
   17528:	adc	r0, r0, r0
   1752c:	subcs	r3, r3, r1, lsl #17
   17530:	cmp	r3, r1, lsl #16
   17534:	adc	r0, r0, r0
   17538:	subcs	r3, r3, r1, lsl #16
   1753c:	cmp	r3, r1, lsl #15
   17540:	adc	r0, r0, r0
   17544:	subcs	r3, r3, r1, lsl #15
   17548:	cmp	r3, r1, lsl #14
   1754c:	adc	r0, r0, r0
   17550:	subcs	r3, r3, r1, lsl #14
   17554:	cmp	r3, r1, lsl #13
   17558:	adc	r0, r0, r0
   1755c:	subcs	r3, r3, r1, lsl #13
   17560:	cmp	r3, r1, lsl #12
   17564:	adc	r0, r0, r0
   17568:	subcs	r3, r3, r1, lsl #12
   1756c:	cmp	r3, r1, lsl #11
   17570:	adc	r0, r0, r0
   17574:	subcs	r3, r3, r1, lsl #11
   17578:	cmp	r3, r1, lsl #10
   1757c:	adc	r0, r0, r0
   17580:	subcs	r3, r3, r1, lsl #10
   17584:	cmp	r3, r1, lsl #9
   17588:	adc	r0, r0, r0
   1758c:	subcs	r3, r3, r1, lsl #9
   17590:	cmp	r3, r1, lsl #8
   17594:	adc	r0, r0, r0
   17598:	subcs	r3, r3, r1, lsl #8
   1759c:	cmp	r3, r1, lsl #7
   175a0:	adc	r0, r0, r0
   175a4:	subcs	r3, r3, r1, lsl #7
   175a8:	cmp	r3, r1, lsl #6
   175ac:	adc	r0, r0, r0
   175b0:	subcs	r3, r3, r1, lsl #6
   175b4:	cmp	r3, r1, lsl #5
   175b8:	adc	r0, r0, r0
   175bc:	subcs	r3, r3, r1, lsl #5
   175c0:	cmp	r3, r1, lsl #4
   175c4:	adc	r0, r0, r0
   175c8:	subcs	r3, r3, r1, lsl #4
   175cc:	cmp	r3, r1, lsl #3
   175d0:	adc	r0, r0, r0
   175d4:	subcs	r3, r3, r1, lsl #3
   175d8:	cmp	r3, r1, lsl #2
   175dc:	adc	r0, r0, r0
   175e0:	subcs	r3, r3, r1, lsl #2
   175e4:	cmp	r3, r1, lsl #1
   175e8:	adc	r0, r0, r0
   175ec:	subcs	r3, r3, r1, lsl #1
   175f0:	cmp	r3, r1
   175f4:	adc	r0, r0, r0
   175f8:	subcs	r3, r3, r1
   175fc:	cmp	ip, #0
   17600:	rsbmi	r0, r0, #0
   17604:	bx	lr
   17608:	teq	ip, r0
   1760c:	rsbmi	r0, r0, #0
   17610:	bx	lr
   17614:	movcc	r0, #0
   17618:	asreq	r0, ip, #31
   1761c:	orreq	r0, r0, #1
   17620:	bx	lr
   17624:	clz	r2, r1
   17628:	rsb	r2, r2, #31
   1762c:	cmp	ip, #0
   17630:	lsr	r0, r3, r2
   17634:	rsbmi	r0, r0, #0
   17638:	bx	lr
   1763c:	cmp	r0, #0
   17640:	mvngt	r0, #-2147483648	; 0x80000000
   17644:	movlt	r0, #-2147483648	; 0x80000000
   17648:	b	1777c <__assert_fail@plt+0x6988>
   1764c:	cmp	r1, #0
   17650:	beq	1763c <__assert_fail@plt+0x6848>
   17654:	push	{r0, r1, lr}
   17658:	bl	17434 <__assert_fail@plt+0x6640>
   1765c:	pop	{r1, r2, lr}
   17660:	mul	r3, r2, r0
   17664:	sub	r1, r1, r3
   17668:	bx	lr
   1766c:	cmp	r3, #0
   17670:	cmpeq	r2, #0
   17674:	bne	17698 <__assert_fail@plt+0x68a4>
   17678:	cmp	r1, #0
   1767c:	movlt	r1, #-2147483648	; 0x80000000
   17680:	movlt	r0, #0
   17684:	blt	17694 <__assert_fail@plt+0x68a0>
   17688:	cmpeq	r0, #0
   1768c:	mvnne	r1, #-2147483648	; 0x80000000
   17690:	mvnne	r0, #0
   17694:	b	1777c <__assert_fail@plt+0x6988>
   17698:	sub	sp, sp, #8
   1769c:	push	{sp, lr}
   176a0:	cmp	r1, #0
   176a4:	blt	176c4 <__assert_fail@plt+0x68d0>
   176a8:	cmp	r3, #0
   176ac:	blt	176f8 <__assert_fail@plt+0x6904>
   176b0:	bl	1778c <__assert_fail@plt+0x6998>
   176b4:	ldr	lr, [sp, #4]
   176b8:	add	sp, sp, #8
   176bc:	pop	{r2, r3}
   176c0:	bx	lr
   176c4:	rsbs	r0, r0, #0
   176c8:	sbc	r1, r1, r1, lsl #1
   176cc:	cmp	r3, #0
   176d0:	blt	1771c <__assert_fail@plt+0x6928>
   176d4:	bl	1778c <__assert_fail@plt+0x6998>
   176d8:	ldr	lr, [sp, #4]
   176dc:	add	sp, sp, #8
   176e0:	pop	{r2, r3}
   176e4:	rsbs	r0, r0, #0
   176e8:	sbc	r1, r1, r1, lsl #1
   176ec:	rsbs	r2, r2, #0
   176f0:	sbc	r3, r3, r3, lsl #1
   176f4:	bx	lr
   176f8:	rsbs	r2, r2, #0
   176fc:	sbc	r3, r3, r3, lsl #1
   17700:	bl	1778c <__assert_fail@plt+0x6998>
   17704:	ldr	lr, [sp, #4]
   17708:	add	sp, sp, #8
   1770c:	pop	{r2, r3}
   17710:	rsbs	r0, r0, #0
   17714:	sbc	r1, r1, r1, lsl #1
   17718:	bx	lr
   1771c:	rsbs	r2, r2, #0
   17720:	sbc	r3, r3, r3, lsl #1
   17724:	bl	1778c <__assert_fail@plt+0x6998>
   17728:	ldr	lr, [sp, #4]
   1772c:	add	sp, sp, #8
   17730:	pop	{r2, r3}
   17734:	rsbs	r2, r2, #0
   17738:	sbc	r3, r3, r3, lsl #1
   1773c:	bx	lr
   17740:	cmp	r3, #0
   17744:	cmpeq	r2, #0
   17748:	bne	17760 <__assert_fail@plt+0x696c>
   1774c:	cmp	r1, #0
   17750:	cmpeq	r0, #0
   17754:	mvnne	r1, #0
   17758:	mvnne	r0, #0
   1775c:	b	1777c <__assert_fail@plt+0x6988>
   17760:	sub	sp, sp, #8
   17764:	push	{sp, lr}
   17768:	bl	1778c <__assert_fail@plt+0x6998>
   1776c:	ldr	lr, [sp, #4]
   17770:	add	sp, sp, #8
   17774:	pop	{r2, r3}
   17778:	bx	lr
   1777c:	push	{r1, lr}
   17780:	mov	r0, #8
   17784:	bl	10b90 <raise@plt>
   17788:	pop	{r1, pc}
   1778c:	cmp	r1, r3
   17790:	push	{r4, r5, r6, r7, r8, r9, lr}
   17794:	cmpeq	r0, r2
   17798:	mov	r4, r0
   1779c:	mov	r5, r1
   177a0:	ldr	r9, [sp, #28]
   177a4:	movcc	r0, #0
   177a8:	movcc	r1, #0
   177ac:	bcc	178a4 <__assert_fail@plt+0x6ab0>
   177b0:	cmp	r3, #0
   177b4:	clzeq	ip, r2
   177b8:	clzne	ip, r3
   177bc:	addeq	ip, ip, #32
   177c0:	cmp	r5, #0
   177c4:	clzeq	r1, r4
   177c8:	addeq	r1, r1, #32
   177cc:	clzne	r1, r5
   177d0:	sub	ip, ip, r1
   177d4:	sub	lr, ip, #32
   177d8:	lsl	r7, r3, ip
   177dc:	rsb	r8, ip, #32
   177e0:	orr	r7, r7, r2, lsl lr
   177e4:	orr	r7, r7, r2, lsr r8
   177e8:	lsl	r6, r2, ip
   177ec:	cmp	r5, r7
   177f0:	cmpeq	r4, r6
   177f4:	movcc	r0, #0
   177f8:	movcc	r1, #0
   177fc:	bcc	17818 <__assert_fail@plt+0x6a24>
   17800:	mov	r3, #1
   17804:	subs	r4, r4, r6
   17808:	lsl	r1, r3, lr
   1780c:	lsl	r0, r3, ip
   17810:	orr	r1, r1, r3, lsr r8
   17814:	sbc	r5, r5, r7
   17818:	cmp	ip, #0
   1781c:	beq	178a4 <__assert_fail@plt+0x6ab0>
   17820:	lsrs	r3, r7, #1
   17824:	rrx	r2, r6
   17828:	mov	r6, ip
   1782c:	b	17850 <__assert_fail@plt+0x6a5c>
   17830:	subs	r4, r4, r2
   17834:	sbc	r5, r5, r3
   17838:	adds	r4, r4, r4
   1783c:	adc	r5, r5, r5
   17840:	adds	r4, r4, #1
   17844:	adc	r5, r5, #0
   17848:	subs	r6, r6, #1
   1784c:	beq	1786c <__assert_fail@plt+0x6a78>
   17850:	cmp	r5, r3
   17854:	cmpeq	r4, r2
   17858:	bcs	17830 <__assert_fail@plt+0x6a3c>
   1785c:	adds	r4, r4, r4
   17860:	adc	r5, r5, r5
   17864:	subs	r6, r6, #1
   17868:	bne	17850 <__assert_fail@plt+0x6a5c>
   1786c:	lsr	r6, r4, ip
   17870:	lsr	r7, r5, ip
   17874:	orr	r6, r6, r5, lsl r8
   17878:	adds	r2, r0, r4
   1787c:	orr	r6, r6, r5, lsr lr
   17880:	adc	r3, r1, r5
   17884:	lsl	r1, r7, ip
   17888:	orr	r1, r1, r6, lsl lr
   1788c:	lsl	r0, r6, ip
   17890:	orr	r1, r1, r6, lsr r8
   17894:	subs	r0, r2, r0
   17898:	mov	r4, r6
   1789c:	mov	r5, r7
   178a0:	sbc	r1, r3, r1
   178a4:	cmp	r9, #0
   178a8:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   178ac:	strd	r4, [r9]
   178b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   178b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   178b8:	mov	r7, r0
   178bc:	ldr	r6, [pc, #72]	; 1790c <__assert_fail@plt+0x6b18>
   178c0:	ldr	r5, [pc, #72]	; 17910 <__assert_fail@plt+0x6b1c>
   178c4:	add	r6, pc, r6
   178c8:	add	r5, pc, r5
   178cc:	sub	r6, r6, r5
   178d0:	mov	r8, r1
   178d4:	mov	r9, r2
   178d8:	bl	10b58 <fstatfs64@plt-0x20>
   178dc:	asrs	r6, r6, #2
   178e0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   178e4:	mov	r4, #0
   178e8:	add	r4, r4, #1
   178ec:	ldr	r3, [r5], #4
   178f0:	mov	r2, r9
   178f4:	mov	r1, r8
   178f8:	mov	r0, r7
   178fc:	blx	r3
   17900:	cmp	r6, r4
   17904:	bne	178e8 <__assert_fail@plt+0x6af4>
   17908:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1790c:	andeq	r0, r1, r4, asr #12
   17910:	andeq	r0, r1, ip, lsr r6
   17914:	bx	lr

Disassembly of section .fini:

00017918 <.fini>:
   17918:	push	{r3, lr}
   1791c:	pop	{r3, pc}
