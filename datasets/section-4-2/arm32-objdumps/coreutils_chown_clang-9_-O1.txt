
../repos/coreutils/src/chown:     file format elf32-littlearm


Disassembly of section .init:

000111f4 <.init>:
   111f4:	push	{r3, lr}
   111f8:	bl	115a4 <__assert_fail@plt+0x48>
   111fc:	pop	{r3, pc}

Disassembly of section .plt:

00011200 <fstatfs64@plt-0x14>:
   11200:	push	{lr}		; (str lr, [sp, #-4]!)
   11204:	ldr	lr, [pc, #4]	; 11210 <fstatfs64@plt-0x4>
   11208:	add	lr, pc, lr
   1120c:	ldr	pc, [lr, #8]!
   11210:	strdeq	sl, [r1], -r0

00011214 <fstatfs64@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #106496	; 0x1a000
   1121c:	ldr	pc, [ip, #3568]!	; 0xdf0

00011220 <calloc@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #106496	; 0x1a000
   11228:	ldr	pc, [ip, #3560]!	; 0xde8

0001122c <endgrent@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #106496	; 0x1a000
   11234:	ldr	pc, [ip, #3552]!	; 0xde0

00011238 <fputs_unlocked@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #106496	; 0x1a000
   11240:	ldr	pc, [ip, #3544]!	; 0xdd8

00011244 <raise@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #106496	; 0x1a000
   1124c:	ldr	pc, [ip, #3536]!	; 0xdd0

00011250 <getpwnam@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #106496	; 0x1a000
   11258:	ldr	pc, [ip, #3528]!	; 0xdc8

0001125c <strcmp@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #106496	; 0x1a000
   11264:	ldr	pc, [ip, #3520]!	; 0xdc0

00011268 <getpwuid@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #106496	; 0x1a000
   11270:	ldr	pc, [ip, #3512]!	; 0xdb8

00011274 <fflush@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #106496	; 0x1a000
   1127c:	ldr	pc, [ip, #3504]!	; 0xdb0

00011280 <memmove@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #106496	; 0x1a000
   11288:	ldr	pc, [ip, #3496]!	; 0xda8

0001128c <free@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #106496	; 0x1a000
   11294:	ldr	pc, [ip, #3488]!	; 0xda0

00011298 <_exit@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #106496	; 0x1a000
   112a0:	ldr	pc, [ip, #3480]!	; 0xd98

000112a4 <memcpy@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #106496	; 0x1a000
   112ac:	ldr	pc, [ip, #3472]!	; 0xd90

000112b0 <mbsinit@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #106496	; 0x1a000
   112b8:	ldr	pc, [ip, #3464]!	; 0xd88

000112bc <stpcpy@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #106496	; 0x1a000
   112c4:	ldr	pc, [ip, #3456]!	; 0xd80

000112c8 <dcgettext@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #106496	; 0x1a000
   112d0:	ldr	pc, [ip, #3448]!	; 0xd78

000112d4 <realloc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #106496	; 0x1a000
   112dc:	ldr	pc, [ip, #3440]!	; 0xd70

000112e0 <textdomain@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #106496	; 0x1a000
   112e8:	ldr	pc, [ip, #3432]!	; 0xd68

000112ec <__fxstatat64@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #106496	; 0x1a000
   112f4:	ldr	pc, [ip, #3424]!	; 0xd60

000112f8 <iswprint@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #106496	; 0x1a000
   11300:	ldr	pc, [ip, #3416]!	; 0xd58

00011304 <__fxstat64@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #106496	; 0x1a000
   1130c:	ldr	pc, [ip, #3408]!	; 0xd50

00011310 <fwrite@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #106496	; 0x1a000
   11318:	ldr	pc, [ip, #3400]!	; 0xd48

0001131c <lseek64@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #106496	; 0x1a000
   11324:	ldr	pc, [ip, #3392]!	; 0xd40

00011328 <__ctype_get_mb_cur_max@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #106496	; 0x1a000
   11330:	ldr	pc, [ip, #3384]!	; 0xd38

00011334 <__fpending@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #106496	; 0x1a000
   1133c:	ldr	pc, [ip, #3376]!	; 0xd30

00011340 <ferror_unlocked@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #106496	; 0x1a000
   11348:	ldr	pc, [ip, #3368]!	; 0xd28

0001134c <mbrtowc@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #106496	; 0x1a000
   11354:	ldr	pc, [ip, #3360]!	; 0xd20

00011358 <error@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #106496	; 0x1a000
   11360:	ldr	pc, [ip, #3352]!	; 0xd18

00011364 <open64@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #106496	; 0x1a000
   1136c:	ldr	pc, [ip, #3344]!	; 0xd10

00011370 <malloc@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #106496	; 0x1a000
   11378:	ldr	pc, [ip, #3336]!	; 0xd08

0001137c <__libc_start_main@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #106496	; 0x1a000
   11384:	ldr	pc, [ip, #3328]!	; 0xd00

00011388 <__freading@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #106496	; 0x1a000
   11390:	ldr	pc, [ip, #3320]!	; 0xcf8

00011394 <__gmon_start__@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #106496	; 0x1a000
   1139c:	ldr	pc, [ip, #3312]!	; 0xcf0

000113a0 <getopt_long@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #106496	; 0x1a000
   113a8:	ldr	pc, [ip, #3304]!	; 0xce8

000113ac <__ctype_b_loc@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #106496	; 0x1a000
   113b4:	ldr	pc, [ip, #3296]!	; 0xce0

000113b8 <exit@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #106496	; 0x1a000
   113c0:	ldr	pc, [ip, #3288]!	; 0xcd8

000113c4 <bcmp@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #106496	; 0x1a000
   113cc:	ldr	pc, [ip, #3280]!	; 0xcd0

000113d0 <strtoul@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #106496	; 0x1a000
   113d8:	ldr	pc, [ip, #3272]!	; 0xcc8

000113dc <strlen@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #106496	; 0x1a000
   113e4:	ldr	pc, [ip, #3264]!	; 0xcc0

000113e8 <strchr@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #106496	; 0x1a000
   113f0:	ldr	pc, [ip, #3256]!	; 0xcb8

000113f4 <openat64@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #106496	; 0x1a000
   113fc:	ldr	pc, [ip, #3248]!	; 0xcb0

00011400 <fchown@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #106496	; 0x1a000
   11408:	ldr	pc, [ip, #3240]!	; 0xca8

0001140c <__errno_location@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #106496	; 0x1a000
   11414:	ldr	pc, [ip, #3232]!	; 0xca0

00011418 <__cxa_atexit@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #106496	; 0x1a000
   11420:	ldr	pc, [ip, #3224]!	; 0xc98

00011424 <memset@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #106496	; 0x1a000
   1142c:	ldr	pc, [ip, #3216]!	; 0xc90

00011430 <__printf_chk@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #106496	; 0x1a000
   11438:	ldr	pc, [ip, #3208]!	; 0xc88

0001143c <fileno@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #106496	; 0x1a000
   11444:	ldr	pc, [ip, #3200]!	; 0xc80

00011448 <__fprintf_chk@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #106496	; 0x1a000
   11450:	ldr	pc, [ip, #3192]!	; 0xc78

00011454 <fclose@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #106496	; 0x1a000
   1145c:	ldr	pc, [ip, #3184]!	; 0xc70

00011460 <fseeko64@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #106496	; 0x1a000
   11468:	ldr	pc, [ip, #3176]!	; 0xc68

0001146c <fcntl64@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #106496	; 0x1a000
   11474:	ldr	pc, [ip, #3168]!	; 0xc60

00011478 <setlocale@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #106496	; 0x1a000
   11480:	ldr	pc, [ip, #3160]!	; 0xc58

00011484 <endpwent@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #106496	; 0x1a000
   1148c:	ldr	pc, [ip, #3152]!	; 0xc50

00011490 <strrchr@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #106496	; 0x1a000
   11498:	ldr	pc, [ip, #3144]!	; 0xc48

0001149c <nl_langinfo@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #106496	; 0x1a000
   114a4:	ldr	pc, [ip, #3136]!	; 0xc40

000114a8 <readdir64@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #106496	; 0x1a000
   114b0:	ldr	pc, [ip, #3128]!	; 0xc38

000114b4 <fdopendir@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #106496	; 0x1a000
   114bc:	ldr	pc, [ip, #3120]!	; 0xc30

000114c0 <dirfd@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #106496	; 0x1a000
   114c8:	ldr	pc, [ip, #3112]!	; 0xc28

000114cc <fchdir@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #106496	; 0x1a000
   114d4:	ldr	pc, [ip, #3104]!	; 0xc20

000114d8 <qsort@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #106496	; 0x1a000
   114e0:	ldr	pc, [ip, #3096]!	; 0xc18

000114e4 <fchownat@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #106496	; 0x1a000
   114ec:	ldr	pc, [ip, #3088]!	; 0xc10

000114f0 <bindtextdomain@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #106496	; 0x1a000
   114f8:	ldr	pc, [ip, #3080]!	; 0xc08

000114fc <__xstat64@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #106496	; 0x1a000
   11504:	ldr	pc, [ip, #3072]!	; 0xc00

00011508 <strncmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #106496	; 0x1a000
   11510:	ldr	pc, [ip, #3064]!	; 0xbf8

00011514 <abort@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #106496	; 0x1a000
   1151c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011520 <close@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #106496	; 0x1a000
   11528:	ldr	pc, [ip, #3048]!	; 0xbe8

0001152c <__lxstat64@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #106496	; 0x1a000
   11534:	ldr	pc, [ip, #3040]!	; 0xbe0

00011538 <closedir@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #106496	; 0x1a000
   11540:	ldr	pc, [ip, #3032]!	; 0xbd8

00011544 <getgrgid@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #106496	; 0x1a000
   1154c:	ldr	pc, [ip, #3024]!	; 0xbd0

00011550 <getgrnam@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #106496	; 0x1a000
   11558:	ldr	pc, [ip, #3016]!	; 0xbc8

0001155c <__assert_fail@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #106496	; 0x1a000
   11564:	ldr	pc, [ip, #3008]!	; 0xbc0

Disassembly of section .text:

00011568 <.text>:
   11568:	mov	fp, #0
   1156c:	mov	lr, #0
   11570:	pop	{r1}		; (ldr r1, [sp], #4)
   11574:	mov	r2, sp
   11578:	push	{r2}		; (str r2, [sp, #-4]!)
   1157c:	push	{r0}		; (str r0, [sp, #-4]!)
   11580:	ldr	ip, [pc, #16]	; 11598 <__assert_fail@plt+0x3c>
   11584:	push	{ip}		; (str ip, [sp, #-4]!)
   11588:	ldr	r0, [pc, #12]	; 1159c <__assert_fail@plt+0x40>
   1158c:	ldr	r3, [pc, #12]	; 115a0 <__assert_fail@plt+0x44>
   11590:	bl	1137c <__libc_start_main@plt>
   11594:	bl	11514 <abort@plt>
   11598:	andeq	r9, r1, r0, asr #30
   1159c:	strdeq	r1, [r1], -ip
   115a0:	andeq	r9, r1, r0, ror #29
   115a4:	ldr	r3, [pc, #20]	; 115c0 <__assert_fail@plt+0x64>
   115a8:	ldr	r2, [pc, #20]	; 115c4 <__assert_fail@plt+0x68>
   115ac:	add	r3, pc, r3
   115b0:	ldr	r2, [r3, r2]
   115b4:	cmp	r2, #0
   115b8:	bxeq	lr
   115bc:	b	11394 <__gmon_start__@plt>
   115c0:	andeq	sl, r1, ip, asr #20
   115c4:	andeq	r0, r0, r8, lsr #2
   115c8:	ldr	r0, [pc, #24]	; 115e8 <__assert_fail@plt+0x8c>
   115cc:	ldr	r3, [pc, #24]	; 115ec <__assert_fail@plt+0x90>
   115d0:	cmp	r3, r0
   115d4:	bxeq	lr
   115d8:	ldr	r3, [pc, #16]	; 115f0 <__assert_fail@plt+0x94>
   115dc:	cmp	r3, #0
   115e0:	bxeq	lr
   115e4:	bx	r3
   115e8:	andeq	ip, r2, r0, lsl #3
   115ec:	andeq	ip, r2, r0, lsl #3
   115f0:	andeq	r0, r0, r0
   115f4:	ldr	r0, [pc, #36]	; 11620 <__assert_fail@plt+0xc4>
   115f8:	ldr	r1, [pc, #36]	; 11624 <__assert_fail@plt+0xc8>
   115fc:	sub	r1, r1, r0
   11600:	asr	r1, r1, #2
   11604:	add	r1, r1, r1, lsr #31
   11608:	asrs	r1, r1, #1
   1160c:	bxeq	lr
   11610:	ldr	r3, [pc, #16]	; 11628 <__assert_fail@plt+0xcc>
   11614:	cmp	r3, #0
   11618:	bxeq	lr
   1161c:	bx	r3
   11620:	andeq	ip, r2, r0, lsl #3
   11624:	andeq	ip, r2, r0, lsl #3
   11628:	andeq	r0, r0, r0
   1162c:	push	{r4, lr}
   11630:	ldr	r4, [pc, #24]	; 11650 <__assert_fail@plt+0xf4>
   11634:	ldrb	r3, [r4]
   11638:	cmp	r3, #0
   1163c:	popne	{r4, pc}
   11640:	bl	115c8 <__assert_fail@plt+0x6c>
   11644:	mov	r3, #1
   11648:	strb	r3, [r4]
   1164c:	pop	{r4, pc}
   11650:	muleq	r2, ip, r1
   11654:	b	115f4 <__assert_fail@plt+0x98>
   11658:	push	{fp, lr}
   1165c:	mov	fp, sp
   11660:	sub	sp, sp, #8
   11664:	mov	r4, r0
   11668:	cmp	r0, #0
   1166c:	bne	11830 <__assert_fail@plt+0x2d4>
   11670:	movw	r1, #40939	; 0x9feb
   11674:	movt	r1, #1
   11678:	mov	r0, #0
   1167c:	mov	r2, #5
   11680:	bl	112c8 <dcgettext@plt>
   11684:	mov	r1, r0
   11688:	movw	r5, #49600	; 0xc1c0
   1168c:	movt	r5, #2
   11690:	ldr	r2, [r5]
   11694:	mov	r0, #1
   11698:	mov	r3, r2
   1169c:	bl	11430 <__printf_chk@plt>
   116a0:	movw	r1, #41036	; 0xa04c
   116a4:	movt	r1, #1
   116a8:	mov	r0, #0
   116ac:	mov	r2, #5
   116b0:	bl	112c8 <dcgettext@plt>
   116b4:	movw	r6, #49556	; 0xc194
   116b8:	movt	r6, #2
   116bc:	ldr	r1, [r6]
   116c0:	bl	11238 <fputs_unlocked@plt>
   116c4:	movw	r1, #41181	; 0xa0dd
   116c8:	movt	r1, #1
   116cc:	mov	r0, #0
   116d0:	mov	r2, #5
   116d4:	bl	112c8 <dcgettext@plt>
   116d8:	ldr	r1, [r6]
   116dc:	bl	11238 <fputs_unlocked@plt>
   116e0:	movw	r1, #41382	; 0xa1a6
   116e4:	movt	r1, #1
   116e8:	mov	r0, #0
   116ec:	mov	r2, #5
   116f0:	bl	112c8 <dcgettext@plt>
   116f4:	ldr	r1, [r6]
   116f8:	bl	11238 <fputs_unlocked@plt>
   116fc:	movw	r1, #41613	; 0xa28d
   11700:	movt	r1, #1
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	bl	112c8 <dcgettext@plt>
   11710:	ldr	r1, [r6]
   11714:	bl	11238 <fputs_unlocked@plt>
   11718:	movw	r1, #41732	; 0xa304
   1171c:	movt	r1, #1
   11720:	mov	r0, #0
   11724:	mov	r2, #5
   11728:	bl	112c8 <dcgettext@plt>
   1172c:	ldr	r1, [r6]
   11730:	bl	11238 <fputs_unlocked@plt>
   11734:	movw	r1, #42072	; 0xa458
   11738:	movt	r1, #1
   1173c:	mov	r0, #0
   11740:	mov	r2, #5
   11744:	bl	112c8 <dcgettext@plt>
   11748:	ldr	r1, [r6]
   1174c:	bl	11238 <fputs_unlocked@plt>
   11750:	movw	r1, #42200	; 0xa4d8
   11754:	movt	r1, #1
   11758:	mov	r0, #0
   1175c:	mov	r2, #5
   11760:	bl	112c8 <dcgettext@plt>
   11764:	ldr	r1, [r6]
   11768:	bl	11238 <fputs_unlocked@plt>
   1176c:	movw	r1, #42321	; 0xa551
   11770:	movt	r1, #1
   11774:	mov	r0, #0
   11778:	mov	r2, #5
   1177c:	bl	112c8 <dcgettext@plt>
   11780:	ldr	r1, [r6]
   11784:	bl	11238 <fputs_unlocked@plt>
   11788:	movw	r1, #42392	; 0xa598
   1178c:	movt	r1, #1
   11790:	mov	r0, #0
   11794:	mov	r2, #5
   11798:	bl	112c8 <dcgettext@plt>
   1179c:	ldr	r1, [r6]
   117a0:	bl	11238 <fputs_unlocked@plt>
   117a4:	movw	r1, #42857	; 0xa769
   117a8:	movt	r1, #1
   117ac:	mov	r0, #0
   117b0:	mov	r2, #5
   117b4:	bl	112c8 <dcgettext@plt>
   117b8:	ldr	r1, [r6]
   117bc:	bl	11238 <fputs_unlocked@plt>
   117c0:	movw	r1, #42902	; 0xa796
   117c4:	movt	r1, #1
   117c8:	mov	r0, #0
   117cc:	mov	r2, #5
   117d0:	bl	112c8 <dcgettext@plt>
   117d4:	ldr	r1, [r6]
   117d8:	bl	11238 <fputs_unlocked@plt>
   117dc:	movw	r1, #42956	; 0xa7cc
   117e0:	movt	r1, #1
   117e4:	mov	r0, #0
   117e8:	mov	r2, #5
   117ec:	bl	112c8 <dcgettext@plt>
   117f0:	ldr	r1, [r6]
   117f4:	bl	11238 <fputs_unlocked@plt>
   117f8:	movw	r1, #43148	; 0xa88c
   117fc:	movt	r1, #1
   11800:	mov	r0, #0
   11804:	mov	r2, #5
   11808:	bl	112c8 <dcgettext@plt>
   1180c:	mov	r1, r0
   11810:	ldr	r2, [r5]
   11814:	str	r2, [sp]
   11818:	mov	r0, #1
   1181c:	mov	r3, r2
   11820:	bl	11430 <__printf_chk@plt>
   11824:	bl	11874 <__assert_fail@plt+0x318>
   11828:	mov	r0, r4
   1182c:	bl	113b8 <exit@plt>
   11830:	movw	r0, #49552	; 0xc190
   11834:	movt	r0, #2
   11838:	ldr	r5, [r0]
   1183c:	movw	r1, #40900	; 0x9fc4
   11840:	movt	r1, #1
   11844:	mov	r0, #0
   11848:	mov	r2, #5
   1184c:	bl	112c8 <dcgettext@plt>
   11850:	mov	r2, r0
   11854:	movw	r0, #49600	; 0xc1c0
   11858:	movt	r0, #2
   1185c:	ldr	r3, [r0]
   11860:	mov	r0, r5
   11864:	mov	r1, #1
   11868:	bl	11448 <__fprintf_chk@plt>
   1186c:	mov	r0, r4
   11870:	bl	113b8 <exit@plt>
   11874:	push	{r4, r5, r6, sl, fp, lr}
   11878:	add	fp, sp, #16
   1187c:	sub	sp, sp, #56	; 0x38
   11880:	movw	r0, #44176	; 0xac90
   11884:	movt	r0, #1
   11888:	add	r1, r0, #32
   1188c:	mov	r2, #48	; 0x30
   11890:	vld1.64	{d16-d17}, [r1]
   11894:	mov	r6, sp
   11898:	add	r1, r6, #32
   1189c:	add	r3, r0, #16
   118a0:	vld1.64	{d18-d19}, [r0], r2
   118a4:	vld1.64	{d20-d21}, [r3]
   118a8:	vldr	d22, [r0]
   118ac:	vst1.64	{d16-d17}, [r1]
   118b0:	add	r0, r6, #16
   118b4:	vst1.64	{d20-d21}, [r0]
   118b8:	mov	r0, r6
   118bc:	vst1.64	{d18-d19}, [r0], r2
   118c0:	vstr	d22, [r0]
   118c4:	ldr	r1, [sp]
   118c8:	cmp	r1, #0
   118cc:	movw	r4, #43349	; 0xa955
   118d0:	movt	r4, #1
   118d4:	beq	118fc <__assert_fail@plt+0x3a0>
   118d8:	mov	r6, sp
   118dc:	movw	r5, #43349	; 0xa955
   118e0:	movt	r5, #1
   118e4:	mov	r0, r5
   118e8:	bl	1125c <strcmp@plt>
   118ec:	cmp	r0, #0
   118f0:	ldrne	r1, [r6, #8]!
   118f4:	cmpne	r1, #0
   118f8:	bne	118e4 <__assert_fail@plt+0x388>
   118fc:	ldr	r5, [r6, #4]
   11900:	movw	r1, #43647	; 0xaa7f
   11904:	movt	r1, #1
   11908:	mov	r0, #0
   1190c:	mov	r2, #5
   11910:	bl	112c8 <dcgettext@plt>
   11914:	mov	r1, r0
   11918:	movw	r2, #43395	; 0xa983
   1191c:	movt	r2, #1
   11920:	movw	r3, #43670	; 0xaa96
   11924:	movt	r3, #1
   11928:	mov	r0, #1
   1192c:	bl	11430 <__printf_chk@plt>
   11930:	cmp	r5, #0
   11934:	moveq	r5, r4
   11938:	mov	r0, #5
   1193c:	mov	r1, #0
   11940:	bl	11478 <setlocale@plt>
   11944:	cmp	r0, #0
   11948:	beq	11988 <__assert_fail@plt+0x42c>
   1194c:	movw	r1, #43710	; 0xaabe
   11950:	movt	r1, #1
   11954:	mov	r2, #3
   11958:	bl	11508 <strncmp@plt>
   1195c:	cmp	r0, #0
   11960:	beq	11988 <__assert_fail@plt+0x42c>
   11964:	movw	r1, #43714	; 0xaac2
   11968:	movt	r1, #1
   1196c:	mov	r0, #0
   11970:	mov	r2, #5
   11974:	bl	112c8 <dcgettext@plt>
   11978:	movw	r1, #49556	; 0xc194
   1197c:	movt	r1, #2
   11980:	ldr	r1, [r1]
   11984:	bl	11238 <fputs_unlocked@plt>
   11988:	movw	r1, #43785	; 0xab09
   1198c:	movt	r1, #1
   11990:	mov	r0, #0
   11994:	mov	r2, #5
   11998:	bl	112c8 <dcgettext@plt>
   1199c:	mov	r1, r0
   119a0:	movw	r2, #43670	; 0xaa96
   119a4:	movt	r2, #1
   119a8:	mov	r0, #1
   119ac:	mov	r3, r4
   119b0:	bl	11430 <__printf_chk@plt>
   119b4:	movw	r0, #43580	; 0xaa3c
   119b8:	movt	r0, #1
   119bc:	movw	r6, #42856	; 0xa768
   119c0:	movt	r6, #1
   119c4:	cmp	r5, r4
   119c8:	moveq	r6, r0
   119cc:	movw	r1, #43812	; 0xab24
   119d0:	movt	r1, #1
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	bl	112c8 <dcgettext@plt>
   119e0:	mov	r1, r0
   119e4:	mov	r0, #1
   119e8:	mov	r2, r5
   119ec:	mov	r3, r6
   119f0:	sub	sp, fp, #16
   119f4:	pop	{r4, r5, r6, sl, fp, lr}
   119f8:	b	11430 <__printf_chk@plt>
   119fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a00:	add	fp, sp, #28
   11a04:	sub	sp, sp, #164	; 0xa4
   11a08:	mov	sl, r1
   11a0c:	mov	r6, r0
   11a10:	mvn	r9, #0
   11a14:	str	r9, [fp, #-32]	; 0xffffffe0
   11a18:	str	r9, [fp, #-36]	; 0xffffffdc
   11a1c:	str	r9, [fp, #-40]	; 0xffffffd8
   11a20:	str	r9, [fp, #-44]	; 0xffffffd4
   11a24:	ldr	r0, [r1]
   11a28:	bl	16210 <__assert_fail@plt+0x4cb4>
   11a2c:	movw	r1, #42856	; 0xa768
   11a30:	movt	r1, #1
   11a34:	mov	r0, #6
   11a38:	bl	11478 <setlocale@plt>
   11a3c:	movw	r5, #43399	; 0xa987
   11a40:	movt	r5, #1
   11a44:	movw	r1, #43355	; 0xa95b
   11a48:	movt	r1, #1
   11a4c:	mov	r0, r5
   11a50:	bl	114f0 <bindtextdomain@plt>
   11a54:	mov	r0, r5
   11a58:	bl	112e0 <textdomain@plt>
   11a5c:	movw	r0, #12020	; 0x2ef4
   11a60:	movt	r0, #1
   11a64:	bl	19f44 <__assert_fail@plt+0x89e8>
   11a68:	sub	r0, fp, #68	; 0x44
   11a6c:	bl	11fcc <__assert_fail@plt+0xa70>
   11a70:	mov	r8, #0
   11a74:	mov	r0, #16
   11a78:	movw	r7, #43379	; 0xa973
   11a7c:	movt	r7, #1
   11a80:	movw	r5, #43952	; 0xabb0
   11a84:	movt	r5, #1
   11a88:	mov	r1, #0
   11a8c:	str	r1, [sp, #12]
   11a90:	mov	r4, r0
   11a94:	str	r8, [sp]
   11a98:	mov	r0, r6
   11a9c:	mov	r1, sl
   11aa0:	mov	r2, r7
   11aa4:	mov	r3, r5
   11aa8:	bl	113a0 <getopt_long@plt>
   11aac:	cmp	r0, #71	; 0x47
   11ab0:	ble	11c80 <__assert_fail@plt+0x724>
   11ab4:	sub	r1, r0, #72	; 0x48
   11ab8:	cmp	r1, #46	; 0x2e
   11abc:	bhi	11b90 <__assert_fail@plt+0x634>
   11ac0:	mov	r0, #17
   11ac4:	add	r2, pc, #0
   11ac8:	ldr	pc, [r2, r1, lsl #2]
   11acc:	muleq	r1, r0, sl
   11ad0:	strdeq	r1, [r1], -r8
   11ad4:	strdeq	r1, [r1], -r8
   11ad8:	strdeq	r1, [r1], -r8
   11adc:	andeq	r1, r1, r8, lsl #23
   11ae0:	strdeq	r1, [r1], -r8
   11ae4:	strdeq	r1, [r1], -r8
   11ae8:	strdeq	r1, [r1], -r8
   11aec:	andeq	r1, r1, r4, lsl #24
   11af0:	strdeq	r1, [r1], -r8
   11af4:	ldrdeq	r1, [r1], -r4
   11af8:	strdeq	r1, [r1], -r8
   11afc:	strdeq	r1, [r1], -r8
   11b00:	strdeq	r1, [r1], -r8
   11b04:	strdeq	r1, [r1], -r8
   11b08:	strdeq	r1, [r1], -r8
   11b0c:	strdeq	r1, [r1], -r8
   11b10:	strdeq	r1, [r1], -r8
   11b14:	strdeq	r1, [r1], -r8
   11b18:	strdeq	r1, [r1], -r8
   11b1c:	strdeq	r1, [r1], -r8
   11b20:	strdeq	r1, [r1], -r8
   11b24:	strdeq	r1, [r1], -r8
   11b28:	strdeq	r1, [r1], -r8
   11b2c:	strdeq	r1, [r1], -r8
   11b30:	strdeq	r1, [r1], -r8
   11b34:	strdeq	r1, [r1], -r8
   11b38:	andeq	r1, r1, r4, asr #23
   11b3c:	strdeq	r1, [r1], -r8
   11b40:	strdeq	r1, [r1], -r8
   11b44:	andeq	r1, r1, ip, lsl #24
   11b48:	strdeq	r1, [r1], -r8
   11b4c:	andeq	r1, r1, ip, lsl ip
   11b50:	strdeq	r1, [r1], -r8
   11b54:	strdeq	r1, [r1], -r8
   11b58:	strdeq	r1, [r1], -r8
   11b5c:	strdeq	r1, [r1], -r8
   11b60:	strdeq	r1, [r1], -r8
   11b64:	strdeq	r1, [r1], -r8
   11b68:	strdeq	r1, [r1], -r8
   11b6c:	strdeq	r1, [r1], -r8
   11b70:	strdeq	r1, [r1], -r8
   11b74:	strdeq	r1, [r1], -r8
   11b78:	strdeq	r1, [r1], -r8
   11b7c:	strdeq	r1, [r1], -r8
   11b80:	strdeq	r1, [r1], -r8
   11b84:	andeq	r1, r1, r8, lsr #24
   11b88:	mov	r0, #2
   11b8c:	b	11a90 <__assert_fail@plt+0x534>
   11b90:	sub	r0, r0, #256	; 0x100
   11b94:	cmp	r0, #4
   11b98:	bhi	11ef8 <__assert_fail@plt+0x99c>
   11b9c:	add	r1, pc, #0
   11ba0:	ldr	pc, [r1, r0, lsl #2]
   11ba4:			; <UNDEFINED> instruction: 0x00011bb8
   11ba8:	andeq	r1, r1, r4, lsr ip
   11bac:	andeq	r1, r1, r8, ror ip
   11bb0:	andeq	r1, r1, r8, ror #24
   11bb4:	andeq	r1, r1, r4, ror #23
   11bb8:	mov	r9, #1
   11bbc:	mov	r0, r4
   11bc0:	b	11a90 <__assert_fail@plt+0x534>
   11bc4:	mov	r0, #1
   11bc8:	str	r0, [fp, #-68]	; 0xffffffbc
   11bcc:	mov	r0, r4
   11bd0:	b	11a90 <__assert_fail@plt+0x534>
   11bd4:	mov	r0, #1
   11bd8:	strb	r0, [fp, #-64]	; 0xffffffc0
   11bdc:	mov	r0, r4
   11be0:	b	11a90 <__assert_fail@plt+0x534>
   11be4:	movw	r0, #49560	; 0xc198
   11be8:	movt	r0, #2
   11bec:	ldr	r0, [r0]
   11bf0:	movw	r1, #49568	; 0xc1a0
   11bf4:	movt	r1, #2
   11bf8:	str	r0, [r1]
   11bfc:	mov	r0, r4
   11c00:	b	11a90 <__assert_fail@plt+0x534>
   11c04:	mov	r0, #16
   11c08:	b	11a90 <__assert_fail@plt+0x534>
   11c0c:	mov	r0, #1
   11c10:	strb	r0, [fp, #-55]	; 0xffffffc9
   11c14:	mov	r0, r4
   11c18:	b	11a90 <__assert_fail@plt+0x534>
   11c1c:	mov	r9, #0
   11c20:	mov	r0, r4
   11c24:	b	11a90 <__assert_fail@plt+0x534>
   11c28:	str	r8, [fp, #-68]	; 0xffffffbc
   11c2c:	mov	r0, r4
   11c30:	b	11a90 <__assert_fail@plt+0x534>
   11c34:	movw	r0, #49560	; 0xc198
   11c38:	movt	r0, #2
   11c3c:	ldr	r0, [r0]
   11c40:	str	r8, [sp]
   11c44:	sub	r1, fp, #40	; 0x28
   11c48:	sub	r2, fp, #44	; 0x2c
   11c4c:	mov	r3, #0
   11c50:	bl	17eb8 <__assert_fail@plt+0x695c>
   11c54:	mov	r1, r0
   11c58:	cmp	r0, #0
   11c5c:	mov	r0, r4
   11c60:	beq	11a90 <__assert_fail@plt+0x534>
   11c64:	b	11e88 <__assert_fail@plt+0x92c>
   11c68:	mov	r0, #1
   11c6c:	str	r0, [sp, #12]
   11c70:	mov	r0, r4
   11c74:	b	11a90 <__assert_fail@plt+0x534>
   11c78:	mov	r0, r4
   11c7c:	b	11a88 <__assert_fail@plt+0x52c>
   11c80:	cmn	r0, #1
   11c84:	bne	11e1c <__assert_fail@plt+0x8c0>
   11c88:	mov	r7, #16
   11c8c:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11c90:	cmp	r0, #0
   11c94:	beq	11cd0 <__assert_fail@plt+0x774>
   11c98:	cmp	r4, #16
   11c9c:	bne	11cd8 <__assert_fail@plt+0x77c>
   11ca0:	mov	r0, #0
   11ca4:	cmp	r9, #1
   11ca8:	bne	11ce0 <__assert_fail@plt+0x784>
   11cac:	movw	r1, #43438	; 0xa9ae
   11cb0:	movt	r1, #1
   11cb4:	mov	r0, #0
   11cb8:	mov	r2, #5
   11cbc:	bl	112c8 <dcgettext@plt>
   11cc0:	mov	r2, r0
   11cc4:	mov	r0, #1
   11cc8:	mov	r1, #0
   11ccc:	bl	11358 <error@plt>
   11cd0:	mov	r0, r9
   11cd4:	b	11ce0 <__assert_fail@plt+0x784>
   11cd8:	mov	r0, r9
   11cdc:	mov	r7, r4
   11ce0:	cmp	r0, #0
   11ce4:	movwne	r0, #1
   11ce8:	strb	r0, [fp, #-56]	; 0xffffffc8
   11cec:	movw	r0, #49568	; 0xc1a0
   11cf0:	movt	r0, #2
   11cf4:	ldr	r0, [r0]
   11cf8:	mov	r2, #2
   11cfc:	cmp	r0, #0
   11d00:	movwne	r2, #1
   11d04:	movw	r4, #49544	; 0xc188
   11d08:	movt	r4, #2
   11d0c:	ldr	r1, [r4]
   11d10:	sub	r3, r6, r1
   11d14:	cmp	r3, r2
   11d18:	sub	r8, fp, #68	; 0x44
   11d1c:	blt	11eb8 <__assert_fail@plt+0x95c>
   11d20:	cmp	r0, #0
   11d24:	beq	11d60 <__assert_fail@plt+0x804>
   11d28:	add	r1, sp, #16
   11d2c:	bl	19f5c <__assert_fail@plt+0x8a00>
   11d30:	cmp	r0, #0
   11d34:	bne	11f00 <__assert_fail@plt+0x9a4>
   11d38:	ldr	r0, [sp, #40]	; 0x28
   11d3c:	ldr	r1, [sp, #44]	; 0x2c
   11d40:	str	r0, [fp, #-32]	; 0xffffffe0
   11d44:	str	r1, [fp, #-36]	; 0xffffffdc
   11d48:	bl	12054 <__assert_fail@plt+0xaf8>
   11d4c:	str	r0, [fp, #-52]	; 0xffffffcc
   11d50:	ldr	r0, [sp, #44]	; 0x2c
   11d54:	bl	12014 <__assert_fail@plt+0xab8>
   11d58:	str	r0, [fp, #-48]	; 0xffffffd0
   11d5c:	b	11db8 <__assert_fail@plt+0x85c>
   11d60:	ldr	r0, [sl, r1, lsl #2]
   11d64:	add	r1, r8, #20
   11d68:	str	r1, [sp]
   11d6c:	add	r3, r8, #16
   11d70:	sub	r1, fp, #32
   11d74:	sub	r2, fp, #36	; 0x24
   11d78:	bl	17eb8 <__assert_fail@plt+0x695c>
   11d7c:	cmp	r0, #0
   11d80:	bne	11fa0 <__assert_fail@plt+0xa44>
   11d84:	ldr	r0, [fp, #-52]	; 0xffffffcc
   11d88:	cmp	r0, #0
   11d8c:	bne	11dac <__assert_fail@plt+0x850>
   11d90:	ldr	r0, [fp, #-48]	; 0xffffffd0
   11d94:	cmp	r0, #0
   11d98:	beq	11dac <__assert_fail@plt+0x850>
   11d9c:	movw	r0, #42856	; 0xa768
   11da0:	movt	r0, #1
   11da4:	bl	18a98 <__assert_fail@plt+0x753c>
   11da8:	str	r0, [fp, #-52]	; 0xffffffcc
   11dac:	ldr	r0, [r4]
   11db0:	add	r0, r0, #1
   11db4:	str	r0, [r4]
   11db8:	ldrb	r0, [fp, #-64]	; 0xffffffc0
   11dbc:	cmp	r0, #0
   11dc0:	beq	11dec <__assert_fail@plt+0x890>
   11dc4:	ldr	r0, [sp, #12]
   11dc8:	eor	r0, r0, #1
   11dcc:	tst	r0, #1
   11dd0:	bne	11dec <__assert_fail@plt+0x890>
   11dd4:	movw	r0, #49576	; 0xc1a8
   11dd8:	movt	r0, #2
   11ddc:	bl	17e1c <__assert_fail@plt+0x68c0>
   11de0:	str	r0, [fp, #-60]	; 0xffffffc4
   11de4:	cmp	r0, #0
   11de8:	beq	11f30 <__assert_fail@plt+0x9d4>
   11dec:	ldr	r0, [r4]
   11df0:	ldr	r3, [fp, #-36]	; 0xffffffdc
   11df4:	ldr	r2, [fp, #-32]	; 0xffffffe0
   11df8:	ldr	r1, [fp, #-40]	; 0xffffffd8
   11dfc:	ldr	r6, [fp, #-44]	; 0xffffffd4
   11e00:	stm	sp, {r1, r6, r8}
   11e04:	add	r0, sl, r0, lsl #2
   11e08:	orr	r1, r7, #1024	; 0x400
   11e0c:	bl	12094 <__assert_fail@plt+0xb38>
   11e10:	eor	r0, r0, #1
   11e14:	sub	sp, fp, #28
   11e18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e1c:	cmn	r0, #3
   11e20:	bne	11e78 <__assert_fail@plt+0x91c>
   11e24:	movw	r0, #49464	; 0xc138
   11e28:	movt	r0, #2
   11e2c:	ldr	r3, [r0]
   11e30:	movw	r0, #49556	; 0xc194
   11e34:	movt	r0, #2
   11e38:	ldr	r0, [r0]
   11e3c:	mov	r1, #0
   11e40:	movw	r2, #43425	; 0xa9a1
   11e44:	movt	r2, #1
   11e48:	movw	r7, #43409	; 0xa991
   11e4c:	movt	r7, #1
   11e50:	str	r7, [sp]
   11e54:	str	r2, [sp, #4]
   11e58:	str	r1, [sp, #8]
   11e5c:	movw	r1, #43349	; 0xa955
   11e60:	movt	r1, #1
   11e64:	movw	r2, #43395	; 0xa983
   11e68:	movt	r2, #1
   11e6c:	bl	18628 <__assert_fail@plt+0x70cc>
   11e70:	mov	r0, #0
   11e74:	bl	113b8 <exit@plt>
   11e78:	cmn	r0, #2
   11e7c:	bne	11ef8 <__assert_fail@plt+0x99c>
   11e80:	mov	r0, #0
   11e84:	bl	11658 <__assert_fail@plt+0xfc>
   11e88:	movw	r0, #49560	; 0xc198
   11e8c:	movt	r0, #2
   11e90:	ldr	r0, [r0]
   11e94:	mov	r4, r1
   11e98:	bl	17a04 <__assert_fail@plt+0x64a8>
   11e9c:	str	r0, [sp]
   11ea0:	movw	r2, #43388	; 0xa97c
   11ea4:	movt	r2, #1
   11ea8:	mov	r0, #1
   11eac:	mov	r1, #0
   11eb0:	mov	r3, r4
   11eb4:	bl	11358 <error@plt>
   11eb8:	cmp	r1, r6
   11ebc:	bge	11f74 <__assert_fail@plt+0xa18>
   11ec0:	movw	r1, #43496	; 0xa9e8
   11ec4:	movt	r1, #1
   11ec8:	mov	r0, #0
   11ecc:	mov	r2, #5
   11ed0:	bl	112c8 <dcgettext@plt>
   11ed4:	mov	r5, r0
   11ed8:	add	r0, sl, r6, lsl #2
   11edc:	ldr	r0, [r0, #-4]
   11ee0:	bl	17a04 <__assert_fail@plt+0x64a8>
   11ee4:	mov	r3, r0
   11ee8:	mov	r0, #0
   11eec:	mov	r1, #0
   11ef0:	mov	r2, r5
   11ef4:	bl	11358 <error@plt>
   11ef8:	mov	r0, #1
   11efc:	bl	11658 <__assert_fail@plt+0xfc>
   11f00:	bl	1140c <__errno_location@plt>
   11f04:	ldr	r4, [r0]
   11f08:	movw	r1, #43521	; 0xaa01
   11f0c:	movt	r1, #1
   11f10:	mov	r0, #0
   11f14:	mov	r2, #5
   11f18:	bl	112c8 <dcgettext@plt>
   11f1c:	mov	r5, r0
   11f20:	movw	r0, #49568	; 0xc1a0
   11f24:	movt	r0, #2
   11f28:	ldr	r1, [r0]
   11f2c:	b	11f58 <__assert_fail@plt+0x9fc>
   11f30:	bl	1140c <__errno_location@plt>
   11f34:	ldr	r4, [r0]
   11f38:	movw	r1, #43521	; 0xaa01
   11f3c:	movt	r1, #1
   11f40:	mov	r0, #0
   11f44:	mov	r2, #5
   11f48:	bl	112c8 <dcgettext@plt>
   11f4c:	mov	r5, r0
   11f50:	movw	r1, #46399	; 0xb53f
   11f54:	movt	r1, #1
   11f58:	mov	r0, #4
   11f5c:	bl	17810 <__assert_fail@plt+0x62b4>
   11f60:	mov	r3, r0
   11f64:	mov	r0, #1
   11f68:	mov	r1, r4
   11f6c:	mov	r2, r5
   11f70:	bl	11358 <error@plt>
   11f74:	movw	r1, #43480	; 0xa9d8
   11f78:	movt	r1, #1
   11f7c:	mov	r0, #0
   11f80:	mov	r2, #5
   11f84:	bl	112c8 <dcgettext@plt>
   11f88:	mov	r2, r0
   11f8c:	mov	r0, #0
   11f90:	mov	r1, #0
   11f94:	bl	11358 <error@plt>
   11f98:	mov	r0, #1
   11f9c:	bl	11658 <__assert_fail@plt+0xfc>
   11fa0:	mov	r5, r0
   11fa4:	ldr	r0, [r4]
   11fa8:	ldr	r0, [sl, r0, lsl #2]
   11fac:	bl	17a04 <__assert_fail@plt+0x64a8>
   11fb0:	str	r0, [sp]
   11fb4:	movw	r2, #43388	; 0xa97c
   11fb8:	movt	r2, #1
   11fbc:	mov	r0, #1
   11fc0:	mov	r1, #0
   11fc4:	mov	r3, r5
   11fc8:	bl	11358 <error@plt>
   11fcc:	mov	r1, #0
   11fd0:	str	r1, [r0, #8]
   11fd4:	mov	r2, #2
   11fd8:	str	r2, [r0]
   11fdc:	str	r1, [r0, #16]
   11fe0:	str	r1, [r0, #20]
   11fe4:	mov	r2, #1
   11fe8:	strh	r2, [r0, #12]
   11fec:	strb	r1, [r0, #4]
   11ff0:	bx	lr
   11ff4:	push	{r4, sl, fp, lr}
   11ff8:	add	fp, sp, #8
   11ffc:	mov	r4, r0
   12000:	ldr	r0, [r0, #16]
   12004:	bl	12fdc <__assert_fail@plt+0x1a80>
   12008:	ldr	r0, [r4, #20]
   1200c:	pop	{r4, sl, fp, lr}
   12010:	b	12fdc <__assert_fail@plt+0x1a80>
   12014:	push	{r4, sl, fp, lr}
   12018:	add	fp, sp, #8
   1201c:	sub	sp, sp, #24
   12020:	mov	r4, r0
   12024:	bl	11544 <getgrgid@plt>
   12028:	cmp	r0, #0
   1202c:	beq	12038 <__assert_fail@plt+0xadc>
   12030:	ldr	r0, [r0]
   12034:	b	12048 <__assert_fail@plt+0xaec>
   12038:	add	r2, sp, #3
   1203c:	mov	r0, r4
   12040:	mov	r1, #0
   12044:	bl	1611c <__assert_fail@plt+0x4bc0>
   12048:	bl	18a98 <__assert_fail@plt+0x753c>
   1204c:	sub	sp, fp, #8
   12050:	pop	{r4, sl, fp, pc}
   12054:	push	{r4, sl, fp, lr}
   12058:	add	fp, sp, #8
   1205c:	sub	sp, sp, #24
   12060:	mov	r4, r0
   12064:	bl	11268 <getpwuid@plt>
   12068:	cmp	r0, #0
   1206c:	beq	12078 <__assert_fail@plt+0xb1c>
   12070:	ldr	r0, [r0]
   12074:	b	12088 <__assert_fail@plt+0xb2c>
   12078:	add	r2, sp, #3
   1207c:	mov	r0, r4
   12080:	mov	r1, #0
   12084:	bl	1611c <__assert_fail@plt+0x4bc0>
   12088:	bl	18a98 <__assert_fail@plt+0x753c>
   1208c:	sub	sp, fp, #8
   12090:	pop	{r4, sl, fp, pc}
   12094:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12098:	add	fp, sp, #28
   1209c:	sub	sp, sp, #12
   120a0:	mov	r6, r3
   120a4:	mov	r7, r2
   120a8:	ldr	r9, [fp, #8]
   120ac:	ldr	sl, [fp, #12]
   120b0:	and	r3, sl, r9
   120b4:	mov	r2, #0
   120b8:	ldr	r8, [fp, #16]
   120bc:	cmn	r3, #1
   120c0:	bne	120e4 <__assert_fail@plt+0xb88>
   120c4:	ldrb	r3, [r8, #12]
   120c8:	cmp	r3, #0
   120cc:	bne	120e4 <__assert_fail@plt+0xb88>
   120d0:	ldr	r2, [r8]
   120d4:	sub	r2, r2, #2
   120d8:	clz	r2, r2
   120dc:	lsr	r2, r2, #5
   120e0:	lsl	r2, r2, #3
   120e4:	orr	r1, r2, r1
   120e8:	mov	r2, #0
   120ec:	bl	18afc <__assert_fail@plt+0x75a0>
   120f0:	mov	r5, r0
   120f4:	bl	13964 <__assert_fail@plt+0x2408>
   120f8:	cmp	r0, #0
   120fc:	beq	1213c <__assert_fail@plt+0xbe0>
   12100:	mov	r1, r0
   12104:	mov	r4, #1
   12108:	stm	sp, {r9, sl}
   1210c:	str	r8, [sp, #8]
   12110:	mov	r0, r5
   12114:	mov	r2, r7
   12118:	mov	r3, r6
   1211c:	bl	121d4 <__assert_fail@plt+0xc78>
   12120:	and	r4, r4, r0
   12124:	mov	r0, r5
   12128:	bl	13964 <__assert_fail@plt+0x2408>
   1212c:	mov	r1, r0
   12130:	cmp	r0, #0
   12134:	bne	12108 <__assert_fail@plt+0xbac>
   12138:	b	12140 <__assert_fail@plt+0xbe4>
   1213c:	mov	r4, #1
   12140:	bl	1140c <__errno_location@plt>
   12144:	ldr	r6, [r0]
   12148:	cmp	r6, #0
   1214c:	beq	12188 <__assert_fail@plt+0xc2c>
   12150:	ldrb	r0, [r8, #13]
   12154:	mov	r4, #0
   12158:	cmp	r0, #0
   1215c:	bne	12188 <__assert_fail@plt+0xc2c>
   12160:	mov	r4, #0
   12164:	movw	r1, #44232	; 0xacc8
   12168:	movt	r1, #1
   1216c:	mov	r0, #0
   12170:	mov	r2, #5
   12174:	bl	112c8 <dcgettext@plt>
   12178:	mov	r2, r0
   1217c:	mov	r0, #0
   12180:	mov	r1, r6
   12184:	bl	11358 <error@plt>
   12188:	mov	r0, r5
   1218c:	bl	137d0 <__assert_fail@plt+0x2274>
   12190:	cmp	r0, #0
   12194:	beq	121c8 <__assert_fail@plt+0xc6c>
   12198:	bl	1140c <__errno_location@plt>
   1219c:	ldr	r5, [r0]
   121a0:	mov	r4, #0
   121a4:	movw	r1, #44248	; 0xacd8
   121a8:	movt	r1, #1
   121ac:	mov	r0, #0
   121b0:	mov	r2, #5
   121b4:	bl	112c8 <dcgettext@plt>
   121b8:	mov	r2, r0
   121bc:	mov	r0, #0
   121c0:	mov	r1, r5
   121c4:	bl	11358 <error@plt>
   121c8:	mov	r0, r4
   121cc:	sub	sp, fp, #28
   121d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121d8:	add	fp, sp, #28
   121dc:	sub	sp, sp, #140	; 0x8c
   121e0:	mov	lr, r3
   121e4:	str	r2, [sp, #28]
   121e8:	mov	sl, r1
   121ec:	mov	r9, r0
   121f0:	ldr	ip, [r1, #24]
   121f4:	ldr	r4, [r1, #28]
   121f8:	add	r2, r1, #64	; 0x40
   121fc:	ldrh	r0, [r1, #56]	; 0x38
   12200:	sub	r0, r0, #1
   12204:	ldr	r5, [fp, #16]
   12208:	cmp	r0, #9
   1220c:	bhi	12434 <__assert_fail@plt+0xed8>
   12210:	add	r1, pc, #0
   12214:	ldr	pc, [r1, r0, lsl #2]
   12218:	andeq	r2, r1, r0, asr #4
   1221c:			; <UNDEFINED> instruction: 0x000123b8
   12220:	andeq	r2, r1, r4, lsr r4
   12224:	andeq	r2, r1, ip, lsl #6
   12228:	andeq	r2, r1, r4, lsr r4
   1222c:	andeq	r2, r1, r8, lsr #8
   12230:	andeq	r2, r1, r4, ror #10
   12234:	andeq	r2, r1, r4, lsr r4
   12238:	andeq	r2, r1, r4, lsr r4
   1223c:	andeq	r2, r1, r8, lsr r3
   12240:	ldrb	r0, [r5, #4]
   12244:	cmp	r0, #0
   12248:	beq	12434 <__assert_fail@plt+0xed8>
   1224c:	ldr	r0, [r5, #8]
   12250:	mov	r8, #1
   12254:	cmp	r0, #0
   12258:	beq	127b0 <__assert_fail@plt+0x1254>
   1225c:	mov	r7, r4
   12260:	add	r1, sl, #160	; 0xa0
   12264:	ldr	r5, [r0]
   12268:	ldr	r3, [r0, #4]
   1226c:	ldr	r4, [r1]
   12270:	ldr	r1, [r1, #4]
   12274:	eor	r1, r1, r3
   12278:	eor	r3, r4, r5
   1227c:	orrs	r1, r3, r1
   12280:	bne	127b0 <__assert_fail@plt+0x1254>
   12284:	ldrd	r0, [r0, #8]
   12288:	ldrd	r2, [r2]
   1228c:	eor	r1, r3, r1
   12290:	eor	r0, r2, r0
   12294:	orrs	r0, r0, r1
   12298:	bne	127b0 <__assert_fail@plt+0x1254>
   1229c:	movw	r1, #46399	; 0xb53f
   122a0:	movt	r1, #1
   122a4:	mov	r0, r7
   122a8:	bl	1125c <strcmp@plt>
   122ac:	cmp	r0, #0
   122b0:	beq	129e8 <__assert_fail@plt+0x148c>
   122b4:	movw	r1, #44310	; 0xad16
   122b8:	movt	r1, #1
   122bc:	mov	r0, #0
   122c0:	mov	r2, #5
   122c4:	bl	112c8 <dcgettext@plt>
   122c8:	mov	r4, r0
   122cc:	mov	r0, #0
   122d0:	mov	r1, #4
   122d4:	mov	r2, r7
   122d8:	bl	17760 <__assert_fail@plt+0x6204>
   122dc:	mov	r6, r0
   122e0:	movw	r2, #46399	; 0xb53f
   122e4:	movt	r2, #1
   122e8:	mov	r0, #1
   122ec:	mov	r1, #4
   122f0:	bl	17760 <__assert_fail@plt+0x6204>
   122f4:	str	r0, [sp]
   122f8:	mov	r0, #0
   122fc:	mov	r1, #0
   12300:	mov	r2, r4
   12304:	mov	r3, r6
   12308:	b	12a1c <__assert_fail@plt+0x14c0>
   1230c:	str	r9, [sp, #24]
   12310:	ldrb	r0, [r5, #13]
   12314:	mov	r2, #0
   12318:	mov	r6, #1
   1231c:	cmp	r0, #0
   12320:	str	r4, [sp, #20]
   12324:	bne	125b8 <__assert_fail@plt+0x105c>
   12328:	ldr	r8, [sl, #32]
   1232c:	movw	r1, #44434	; 0xad92
   12330:	movt	r1, #1
   12334:	b	12378 <__assert_fail@plt+0xe1c>
   12338:	ldr	r0, [sl, #48]	; 0x30
   1233c:	cmp	r0, #0
   12340:	bne	12350 <__assert_fail@plt+0xdf4>
   12344:	ldr	r0, [sl, #16]
   12348:	cmp	r0, #0
   1234c:	beq	125e8 <__assert_fail@plt+0x108c>
   12350:	str	r9, [sp, #24]
   12354:	ldrb	r0, [r5, #13]
   12358:	mov	r2, #0
   1235c:	mov	r6, #1
   12360:	cmp	r0, #0
   12364:	str	r4, [sp, #20]
   12368:	bne	125b8 <__assert_fail@plt+0x105c>
   1236c:	ldr	r8, [sl, #32]
   12370:	movw	r1, #44417	; 0xad81
   12374:	movt	r1, #1
   12378:	mov	r0, #0
   1237c:	mov	r2, #5
   12380:	mov	r9, lr
   12384:	bl	112c8 <dcgettext@plt>
   12388:	mov	r7, r0
   1238c:	mov	r0, #4
   12390:	mov	r1, r4
   12394:	bl	17810 <__assert_fail@plt+0x62b4>
   12398:	mov	r3, r0
   1239c:	mov	r0, #0
   123a0:	mov	r1, r8
   123a4:	mov	r2, r7
   123a8:	bl	11358 <error@plt>
   123ac:	mov	r2, #0
   123b0:	mov	lr, r9
   123b4:	b	125b8 <__assert_fail@plt+0x105c>
   123b8:	mov	r0, r9
   123bc:	mov	r1, sl
   123c0:	mov	r7, lr
   123c4:	mov	r8, r2
   123c8:	mov	r6, ip
   123cc:	bl	18b48 <__assert_fail@plt+0x75ec>
   123d0:	mov	ip, r6
   123d4:	mov	r2, r8
   123d8:	mov	lr, r7
   123dc:	cmp	r0, #0
   123e0:	beq	12434 <__assert_fail@plt+0xed8>
   123e4:	mov	r8, #0
   123e8:	movw	r1, #44459	; 0xadab
   123ec:	movt	r1, #1
   123f0:	mov	r0, #0
   123f4:	mov	r2, #5
   123f8:	bl	112c8 <dcgettext@plt>
   123fc:	mov	r2, r4
   12400:	mov	r4, r0
   12404:	mov	r0, #0
   12408:	mov	r1, #3
   1240c:	bl	178c4 <__assert_fail@plt+0x6368>
   12410:	mov	r3, r0
   12414:	mov	r0, #0
   12418:	mov	r1, #0
   1241c:	mov	r2, r4
   12420:	bl	11358 <error@plt>
   12424:	b	127b0 <__assert_fail@plt+0x1254>
   12428:	ldrb	r0, [r5, #4]
   1242c:	cmp	r0, #0
   12430:	beq	125e0 <__assert_fail@plt+0x1084>
   12434:	str	r4, [sp, #20]
   12438:	ldr	r7, [fp, #12]
   1243c:	ldr	r6, [fp, #8]
   12440:	and	r0, r7, r6
   12444:	cmn	r0, #1
   12448:	str	r9, [sp, #24]
   1244c:	bne	12474 <__assert_fail@plt+0xf18>
   12450:	ldr	r0, [r5]
   12454:	cmp	r0, #2
   12458:	bne	12474 <__assert_fail@plt+0xf18>
   1245c:	ldr	r0, [r5, #8]
   12460:	cmp	r0, #0
   12464:	bne	12474 <__assert_fail@plt+0xf18>
   12468:	ldrb	r0, [r5, #12]
   1246c:	cmp	r0, #0
   12470:	beq	12600 <__assert_fail@plt+0x10a4>
   12474:	ldrb	r0, [r5, #12]
   12478:	cmp	r0, #0
   1247c:	beq	12538 <__assert_fail@plt+0xfdc>
   12480:	ldr	r0, [sl, #80]	; 0x50
   12484:	and	r0, r0, #61440	; 0xf000
   12488:	cmp	r0, #40960	; 0xa000
   1248c:	bne	12538 <__assert_fail@plt+0xfdc>
   12490:	ldr	r0, [r9, #32]
   12494:	add	r5, sp, #32
   12498:	mov	r8, #0
   1249c:	mov	r1, ip
   124a0:	mov	r2, r5
   124a4:	mov	r3, #0
   124a8:	str	lr, [sp, #16]
   124ac:	mov	r4, ip
   124b0:	bl	19f8c <__assert_fail@plt+0x8a30>
   124b4:	mov	ip, r4
   124b8:	mov	r2, r5
   124bc:	ldr	r5, [fp, #16]
   124c0:	ldr	lr, [sp, #16]
   124c4:	cmp	r0, #0
   124c8:	beq	12538 <__assert_fail@plt+0xfdc>
   124cc:	ldrb	r0, [r5, #13]
   124d0:	mov	r6, #1
   124d4:	add	r2, sp, #32
   124d8:	cmp	r0, #0
   124dc:	bne	126b4 <__assert_fail@plt+0x1158>
   124e0:	mov	r4, r2
   124e4:	bl	1140c <__errno_location@plt>
   124e8:	ldr	r5, [r0]
   124ec:	mov	r8, #0
   124f0:	movw	r1, #44645	; 0xae65
   124f4:	movt	r1, #1
   124f8:	mov	r0, #0
   124fc:	mov	r2, #5
   12500:	bl	112c8 <dcgettext@plt>
   12504:	mov	r7, r0
   12508:	mov	r0, #4
   1250c:	ldr	r1, [sp, #20]
   12510:	bl	17810 <__assert_fail@plt+0x62b4>
   12514:	mov	r3, r0
   12518:	mov	r0, #0
   1251c:	mov	r1, r5
   12520:	mov	r2, r7
   12524:	bl	11358 <error@plt>
   12528:	mov	r2, r4
   1252c:	ldr	r5, [fp, #16]
   12530:	ldr	lr, [sp, #16]
   12534:	b	126b4 <__assert_fail@plt+0x1158>
   12538:	cmn	r6, #1
   1253c:	beq	125c4 <__assert_fail@plt+0x1068>
   12540:	ldr	r1, [r2, #24]
   12544:	sub	r0, r1, r6
   12548:	clz	r0, r0
   1254c:	lsr	r4, r0, #5
   12550:	cmn	r7, #1
   12554:	beq	12608 <__assert_fail@plt+0x10ac>
   12558:	cmp	r1, r6
   1255c:	beq	125cc <__assert_fail@plt+0x1070>
   12560:	b	12608 <__assert_fail@plt+0x10ac>
   12564:	str	r9, [sp, #24]
   12568:	ldrb	r0, [r5, #13]
   1256c:	mov	r2, #0
   12570:	mov	r6, #1
   12574:	cmp	r0, #0
   12578:	str	r4, [sp, #20]
   1257c:	bne	125b8 <__assert_fail@plt+0x105c>
   12580:	ldr	r8, [sl, #32]
   12584:	mov	r0, #0
   12588:	mov	r1, #3
   1258c:	mov	r2, r4
   12590:	mov	r7, lr
   12594:	bl	178c4 <__assert_fail@plt+0x6368>
   12598:	mov	r3, r0
   1259c:	movw	r2, #43392	; 0xa980
   125a0:	movt	r2, #1
   125a4:	mov	r0, #0
   125a8:	mov	r1, r8
   125ac:	bl	11358 <error@plt>
   125b0:	mov	r2, #0
   125b4:	mov	lr, r7
   125b8:	mov	r4, #1
   125bc:	mov	r8, #0
   125c0:	b	126b8 <__assert_fail@plt+0x115c>
   125c4:	cmn	r7, #1
   125c8:	beq	12604 <__assert_fail@plt+0x10a8>
   125cc:	ldr	r0, [r2, #28]
   125d0:	sub	r0, r0, r7
   125d4:	clz	r0, r0
   125d8:	lsr	r4, r0, #5
   125dc:	b	12608 <__assert_fail@plt+0x10ac>
   125e0:	mov	r8, #1
   125e4:	b	127b0 <__assert_fail@plt+0x1254>
   125e8:	mov	r8, #1
   125ec:	str	r8, [sl, #16]
   125f0:	mov	r0, r9
   125f4:	mov	r1, sl
   125f8:	mov	r2, #1
   125fc:	b	127ac <__assert_fail@plt+0x1250>
   12600:	add	r2, sl, #64	; 0x40
   12604:	mov	r4, #1
   12608:	ldrh	r1, [sl, #56]	; 0x38
   1260c:	cmp	r1, #6
   12610:	bhi	1262c <__assert_fail@plt+0x10d0>
   12614:	mov	r0, #1
   12618:	mov	r3, #86	; 0x56
   1261c:	tst	r3, r0, lsl r1
   12620:	ldrne	r6, [r5, #8]
   12624:	cmpne	r6, #0
   12628:	bne	127bc <__assert_fail@plt+0x1260>
   1262c:	mov	r8, #1
   12630:	cmp	r4, #0
   12634:	beq	126b0 <__assert_fail@plt+0x1154>
   12638:	ldr	r0, [sp, #24]
   1263c:	ldr	r0, [r0, #32]
   12640:	ldrb	r1, [r5, #12]
   12644:	cmp	r1, #0
   12648:	str	r2, [sp, #12]
   1264c:	beq	1286c <__assert_fail@plt+0x1310>
   12650:	str	lr, [sp, #16]
   12654:	str	lr, [sp]
   12658:	ldr	r1, [fp, #8]
   1265c:	stmib	sp, {r1, r7}
   12660:	mov	r9, ip
   12664:	mov	r1, ip
   12668:	ldr	r3, [sp, #28]
   1266c:	bl	12a68 <__assert_fail@plt+0x150c>
   12670:	sub	r0, r0, #2
   12674:	cmp	r0, #4
   12678:	bhi	12a64 <__assert_fail@plt+0x1508>
   1267c:	mov	r4, #0
   12680:	add	r1, pc, #16
   12684:	mov	r6, #1
   12688:	ldr	lr, [sp, #16]
   1268c:	ldr	r5, [fp, #16]
   12690:	ldr	r2, [sp, #12]
   12694:	ldr	pc, [r1, r0, lsl #2]
   12698:			; <UNDEFINED> instruction: 0x000126b8
   1269c:	andeq	r2, r1, ip, lsr #13
   126a0:	andeq	r2, r1, ip, lsr #13
   126a4:	andeq	r2, r1, r8, asr #17
   126a8:	strdeq	r2, [r1], -r4
   126ac:	mov	r8, #0
   126b0:	mov	r6, #1
   126b4:	mov	r4, #1
   126b8:	ldr	r0, [r5]
   126bc:	cmp	r0, #2
   126c0:	beq	12794 <__assert_fail@plt+0x1238>
   126c4:	eor	r1, r8, #1
   126c8:	orrs	r1, r4, r1
   126cc:	eorseq	r1, r6, #1
   126d0:	beq	12704 <__assert_fail@plt+0x11a8>
   126d4:	cmp	r0, #0
   126d8:	bne	12794 <__assert_fail@plt+0x1238>
   126dc:	mov	r4, #1
   126e0:	cmp	r6, #0
   126e4:	movwne	r4, #4
   126e8:	cmp	r8, #0
   126ec:	moveq	r4, #3
   126f0:	cmp	r2, #0
   126f4:	bne	12748 <__assert_fail@plt+0x11ec>
   126f8:	mov	r6, #0
   126fc:	mov	r7, #0
   12700:	b	12764 <__assert_fail@plt+0x1208>
   12704:	ldr	r1, [sp, #28]
   12708:	cmn	r1, #1
   1270c:	beq	12720 <__assert_fail@plt+0x11c4>
   12710:	ldr	r1, [r2, #24]
   12714:	ldr	r3, [sp, #28]
   12718:	cmp	r1, r3
   1271c:	bne	12734 <__assert_fail@plt+0x11d8>
   12720:	cmn	lr, #1
   12724:	beq	126d4 <__assert_fail@plt+0x1178>
   12728:	ldr	r1, [r2, #28]
   1272c:	cmp	r1, lr
   12730:	beq	126d4 <__assert_fail@plt+0x1178>
   12734:	mov	r4, #1
   12738:	cmp	r6, #0
   1273c:	movwne	r4, #2
   12740:	cmp	r8, #0
   12744:	moveq	r4, #3
   12748:	ldr	r0, [r2, #24]
   1274c:	mov	r7, r2
   12750:	bl	12054 <__assert_fail@plt+0xaf8>
   12754:	mov	r6, r0
   12758:	ldr	r0, [r7, #28]
   1275c:	bl	12014 <__assert_fail@plt+0xab8>
   12760:	mov	r7, r0
   12764:	ldr	r0, [r5, #16]
   12768:	ldr	r1, [r5, #20]
   1276c:	stm	sp, {r0, r1}
   12770:	ldr	r0, [sp, #20]
   12774:	mov	r1, r4
   12778:	mov	r2, r6
   1277c:	mov	r3, r7
   12780:	bl	12c18 <__assert_fail@plt+0x16bc>
   12784:	mov	r0, r6
   12788:	bl	12fdc <__assert_fail@plt+0x1a80>
   1278c:	mov	r0, r7
   12790:	bl	12fdc <__assert_fail@plt+0x1a80>
   12794:	ldrb	r0, [r5, #4]
   12798:	cmp	r0, #0
   1279c:	bne	127b0 <__assert_fail@plt+0x1254>
   127a0:	ldr	r0, [sp, #24]
   127a4:	mov	r1, sl
   127a8:	mov	r2, #4
   127ac:	bl	14c14 <__assert_fail@plt+0x36b8>
   127b0:	mov	r0, r8
   127b4:	sub	sp, fp, #28
   127b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127bc:	ldm	r6, {r0, r3}
   127c0:	ldr	r8, [r2, #96]	; 0x60
   127c4:	ldr	r1, [r2, #100]	; 0x64
   127c8:	eor	r1, r1, r3
   127cc:	eor	r0, r8, r0
   127d0:	orrs	r1, r0, r1
   127d4:	bne	1262c <__assert_fail@plt+0x10d0>
   127d8:	ldr	r0, [r6, #8]
   127dc:	ldr	r3, [r6, #12]
   127e0:	ldr	r6, [r2]
   127e4:	ldr	r1, [r2, #4]
   127e8:	eor	r1, r1, r3
   127ec:	eor	r0, r6, r0
   127f0:	orrs	r1, r0, r1
   127f4:	bne	1262c <__assert_fail@plt+0x10d0>
   127f8:	movw	r1, #46399	; 0xb53f
   127fc:	movt	r1, #1
   12800:	ldr	r5, [sp, #20]
   12804:	mov	r0, r5
   12808:	bl	1125c <strcmp@plt>
   1280c:	cmp	r0, #0
   12810:	beq	1297c <__assert_fail@plt+0x1420>
   12814:	movw	r1, #44310	; 0xad16
   12818:	movt	r1, #1
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	bl	112c8 <dcgettext@plt>
   12828:	mov	r4, r0
   1282c:	mov	r0, #0
   12830:	mov	r1, #4
   12834:	mov	r2, r5
   12838:	bl	17760 <__assert_fail@plt+0x6204>
   1283c:	mov	r5, r0
   12840:	movw	r2, #46399	; 0xb53f
   12844:	movt	r2, #1
   12848:	mov	r0, #1
   1284c:	mov	r1, #4
   12850:	bl	17760 <__assert_fail@plt+0x6204>
   12854:	str	r0, [sp]
   12858:	mov	r0, #0
   1285c:	mov	r1, #0
   12860:	mov	r2, r4
   12864:	mov	r3, r5
   12868:	b	129b0 <__assert_fail@plt+0x1454>
   1286c:	mov	r1, ip
   12870:	ldr	r2, [sp, #28]
   12874:	mov	r9, lr
   12878:	mov	r3, lr
   1287c:	bl	12eb4 <__assert_fail@plt+0x1958>
   12880:	cmp	r0, #0
   12884:	beq	128b0 <__assert_fail@plt+0x1354>
   12888:	bl	1140c <__errno_location@plt>
   1288c:	ldr	r0, [r0]
   12890:	mov	r6, #0
   12894:	cmp	r0, #95	; 0x5f
   12898:	mov	lr, r9
   1289c:	ldr	r5, [fp, #16]
   128a0:	ldr	r2, [sp, #12]
   128a4:	bne	128f4 <__assert_fail@plt+0x1398>
   128a8:	mov	r4, #0
   128ac:	b	126b8 <__assert_fail@plt+0x115c>
   128b0:	mov	r4, #0
   128b4:	mov	r6, #1
   128b8:	mov	lr, r9
   128bc:	ldr	r5, [fp, #16]
   128c0:	ldr	r2, [sp, #12]
   128c4:	b	126b8 <__assert_fail@plt+0x115c>
   128c8:	ldr	r0, [sp, #24]
   128cc:	ldr	r0, [r0, #32]
   128d0:	mov	r1, r9
   128d4:	ldr	r2, [sp, #28]
   128d8:	mov	r3, lr
   128dc:	bl	12e94 <__assert_fail@plt+0x1938>
   128e0:	ldr	r2, [sp, #12]
   128e4:	ldr	r5, [fp, #16]
   128e8:	ldr	lr, [sp, #16]
   128ec:	cmp	r0, #0
   128f0:	beq	129e0 <__assert_fail@plt+0x1484>
   128f4:	ldrb	r0, [r5, #13]
   128f8:	mov	r4, #0
   128fc:	cmp	r0, #0
   12900:	bne	12974 <__assert_fail@plt+0x1418>
   12904:	movw	r0, #44692	; 0xae94
   12908:	movt	r0, #1
   1290c:	movw	r6, #44667	; 0xae7b
   12910:	movt	r6, #1
   12914:	ldr	r1, [sp, #28]
   12918:	cmn	r1, #1
   1291c:	moveq	r6, r0
   12920:	mov	r8, lr
   12924:	mov	r5, r2
   12928:	bl	1140c <__errno_location@plt>
   1292c:	ldr	r7, [r0]
   12930:	mov	r4, #0
   12934:	mov	r0, #0
   12938:	mov	r1, r6
   1293c:	mov	r2, #5
   12940:	bl	112c8 <dcgettext@plt>
   12944:	mov	r6, r0
   12948:	mov	r0, #4
   1294c:	ldr	r1, [sp, #20]
   12950:	bl	17810 <__assert_fail@plt+0x62b4>
   12954:	mov	r3, r0
   12958:	mov	r0, #0
   1295c:	mov	r1, r7
   12960:	mov	r2, r6
   12964:	bl	11358 <error@plt>
   12968:	mov	r2, r5
   1296c:	ldr	r5, [fp, #16]
   12970:	mov	lr, r8
   12974:	mov	r6, #1
   12978:	b	125bc <__assert_fail@plt+0x1060>
   1297c:	movw	r1, #44265	; 0xace9
   12980:	movt	r1, #1
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	bl	112c8 <dcgettext@plt>
   12990:	mov	r4, r0
   12994:	mov	r0, #4
   12998:	mov	r1, r5
   1299c:	bl	17810 <__assert_fail@plt+0x62b4>
   129a0:	mov	r3, r0
   129a4:	mov	r0, #0
   129a8:	mov	r1, #0
   129ac:	mov	r2, r4
   129b0:	bl	11358 <error@plt>
   129b4:	mov	r8, #0
   129b8:	movw	r1, #44368	; 0xad50
   129bc:	movt	r1, #1
   129c0:	mov	r0, #0
   129c4:	mov	r2, #5
   129c8:	bl	112c8 <dcgettext@plt>
   129cc:	mov	r2, r0
   129d0:	mov	r0, #0
   129d4:	mov	r1, #0
   129d8:	bl	11358 <error@plt>
   129dc:	b	127b0 <__assert_fail@plt+0x1254>
   129e0:	mov	r6, #1
   129e4:	b	126b8 <__assert_fail@plt+0x115c>
   129e8:	movw	r1, #44265	; 0xace9
   129ec:	movt	r1, #1
   129f0:	mov	r0, #0
   129f4:	mov	r2, #5
   129f8:	bl	112c8 <dcgettext@plt>
   129fc:	mov	r4, r0
   12a00:	mov	r0, #4
   12a04:	mov	r1, r7
   12a08:	bl	17810 <__assert_fail@plt+0x62b4>
   12a0c:	mov	r3, r0
   12a10:	mov	r0, #0
   12a14:	mov	r1, #0
   12a18:	mov	r2, r4
   12a1c:	bl	11358 <error@plt>
   12a20:	mov	r8, #0
   12a24:	movw	r1, #44368	; 0xad50
   12a28:	movt	r1, #1
   12a2c:	mov	r0, #0
   12a30:	mov	r2, #5
   12a34:	bl	112c8 <dcgettext@plt>
   12a38:	mov	r2, r0
   12a3c:	mov	r0, #0
   12a40:	mov	r1, #0
   12a44:	bl	11358 <error@plt>
   12a48:	mov	r0, r9
   12a4c:	mov	r1, sl
   12a50:	mov	r2, #4
   12a54:	bl	14c14 <__assert_fail@plt+0x36b8>
   12a58:	mov	r0, r9
   12a5c:	bl	13964 <__assert_fail@plt+0x2408>
   12a60:	b	127b0 <__assert_fail@plt+0x1254>
   12a64:	bl	11514 <abort@plt>
   12a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12a6c:	add	fp, sp, #28
   12a70:	sub	sp, sp, #116	; 0x74
   12a74:	mov	r5, r0
   12a78:	ldr	r8, [fp, #12]
   12a7c:	ldr	r0, [fp, #16]
   12a80:	and	r0, r0, r8
   12a84:	mov	r7, #5
   12a88:	cmn	r0, #1
   12a8c:	beq	12bf4 <__assert_fail@plt+0x1698>
   12a90:	mov	r6, r2
   12a94:	mov	r4, r1
   12a98:	ldr	r0, [r2, #16]
   12a9c:	and	r0, r0, #61440	; 0xf000
   12aa0:	cmp	r0, #32768	; 0x8000
   12aa4:	beq	12abc <__assert_fail@plt+0x1560>
   12aa8:	cmp	r0, #16384	; 0x4000
   12aac:	bne	12bf4 <__assert_fail@plt+0x1698>
   12ab0:	str	r3, [sp, #4]
   12ab4:	mov	r7, #18688	; 0x4900
   12ab8:	b	12ac4 <__assert_fail@plt+0x1568>
   12abc:	str	r3, [sp, #4]
   12ac0:	mov	r7, #2304	; 0x900
   12ac4:	mov	r0, r5
   12ac8:	mov	r1, r4
   12acc:	mov	r2, r7
   12ad0:	bl	113f4 <openat64@plt>
   12ad4:	mov	r9, r0
   12ad8:	cmn	r0, #1
   12adc:	ble	12ba4 <__assert_fail@plt+0x1648>
   12ae0:	add	r1, sp, #8
   12ae4:	mov	r0, r9
   12ae8:	bl	19f6c <__assert_fail@plt+0x8a10>
   12aec:	mov	r7, #6
   12af0:	cmp	r0, #0
   12af4:	bne	12b88 <__assert_fail@plt+0x162c>
   12af8:	ldrd	r0, [r6, #96]	; 0x60
   12afc:	ldr	r2, [sp, #104]	; 0x68
   12b00:	ldr	r3, [sp, #108]	; 0x6c
   12b04:	eor	r1, r1, r3
   12b08:	eor	r0, r0, r2
   12b0c:	orrs	r0, r0, r1
   12b10:	mov	r7, #4
   12b14:	bne	12b88 <__assert_fail@plt+0x162c>
   12b18:	ldrd	r0, [r6]
   12b1c:	ldr	r2, [sp, #8]
   12b20:	ldr	r3, [sp, #12]
   12b24:	eor	r1, r1, r3
   12b28:	eor	r0, r0, r2
   12b2c:	orrs	r0, r0, r1
   12b30:	bne	12b88 <__assert_fail@plt+0x162c>
   12b34:	cmn	r8, #1
   12b38:	beq	12b4c <__assert_fail@plt+0x15f0>
   12b3c:	mov	r7, #2
   12b40:	ldr	r0, [sp, #32]
   12b44:	cmp	r0, r8
   12b48:	bne	12b88 <__assert_fail@plt+0x162c>
   12b4c:	ldr	r0, [fp, #16]
   12b50:	cmn	r0, #1
   12b54:	beq	12b6c <__assert_fail@plt+0x1610>
   12b58:	mov	r7, #2
   12b5c:	ldr	r0, [sp, #36]	; 0x24
   12b60:	ldr	r1, [fp, #16]
   12b64:	cmp	r0, r1
   12b68:	bne	12b88 <__assert_fail@plt+0x162c>
   12b6c:	ldr	r2, [fp, #8]
   12b70:	mov	r0, r9
   12b74:	ldr	r1, [sp, #4]
   12b78:	bl	11400 <fchown@plt>
   12b7c:	cmp	r0, #0
   12b80:	mov	r7, #6
   12b84:	beq	12c00 <__assert_fail@plt+0x16a4>
   12b88:	bl	1140c <__errno_location@plt>
   12b8c:	mov	r4, r0
   12b90:	ldr	r5, [r0]
   12b94:	mov	r0, r9
   12b98:	bl	11520 <close@plt>
   12b9c:	str	r5, [r4]
   12ba0:	b	12bf4 <__assert_fail@plt+0x1698>
   12ba4:	bl	1140c <__errno_location@plt>
   12ba8:	mov	sl, r0
   12bac:	ldr	r0, [r0]
   12bb0:	cmp	r0, #13
   12bb4:	bne	12be4 <__assert_fail@plt+0x1688>
   12bb8:	ldr	r0, [r6, #16]
   12bbc:	and	r0, r0, #61440	; 0xf000
   12bc0:	cmp	r0, #32768	; 0x8000
   12bc4:	bne	12be4 <__assert_fail@plt+0x1688>
   12bc8:	orr	r2, r7, #1
   12bcc:	mov	r0, r5
   12bd0:	mov	r1, r4
   12bd4:	bl	113f4 <openat64@plt>
   12bd8:	mov	r9, r0
   12bdc:	cmn	r0, #1
   12be0:	bgt	12ae0 <__assert_fail@plt+0x1584>
   12be4:	ldr	r0, [sl]
   12be8:	mov	r7, #6
   12bec:	cmp	r0, #13
   12bf0:	movweq	r7, #5
   12bf4:	mov	r0, r7
   12bf8:	sub	sp, fp, #28
   12bfc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c00:	mov	r0, r9
   12c04:	bl	11520 <close@plt>
   12c08:	mov	r7, #6
   12c0c:	cmp	r0, #0
   12c10:	movweq	r7, #2
   12c14:	b	12bf4 <__assert_fail@plt+0x1698>
   12c18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c1c:	add	fp, sp, #28
   12c20:	sub	sp, sp, #4
   12c24:	mov	r9, r0
   12c28:	cmp	r1, #1
   12c2c:	bne	12c6c <__assert_fail@plt+0x1710>
   12c30:	movw	r1, #44713	; 0xaea9
   12c34:	movt	r1, #1
   12c38:	mov	r0, #0
   12c3c:	mov	r2, #5
   12c40:	bl	112c8 <dcgettext@plt>
   12c44:	mov	r4, r0
   12c48:	mov	r0, #4
   12c4c:	mov	r1, r9
   12c50:	bl	17810 <__assert_fail@plt+0x62b4>
   12c54:	mov	r2, r0
   12c58:	mov	r0, #1
   12c5c:	mov	r1, r4
   12c60:	sub	sp, fp, #28
   12c64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c68:	b	11430 <__printf_chk@plt>
   12c6c:	mov	r6, r3
   12c70:	mov	r7, r2
   12c74:	mov	r4, r1
   12c78:	ldr	sl, [fp, #12]
   12c7c:	ldr	r5, [fp, #8]
   12c80:	mov	r0, r5
   12c84:	mov	r1, sl
   12c88:	bl	12e04 <__assert_fail@plt+0x18a8>
   12c8c:	mov	r8, r0
   12c90:	cmp	r5, #0
   12c94:	moveq	r7, r5
   12c98:	cmp	sl, #0
   12c9c:	moveq	r6, sl
   12ca0:	mov	r0, r7
   12ca4:	mov	r1, r6
   12ca8:	bl	12e04 <__assert_fail@plt+0x18a8>
   12cac:	mov	r6, r0
   12cb0:	cmp	r4, #4
   12cb4:	beq	12cf8 <__assert_fail@plt+0x179c>
   12cb8:	cmp	r4, #3
   12cbc:	beq	12cdc <__assert_fail@plt+0x1780>
   12cc0:	cmp	r4, #2
   12cc4:	bne	12e00 <__assert_fail@plt+0x18a4>
   12cc8:	cmp	r5, #0
   12ccc:	beq	12d0c <__assert_fail@plt+0x17b0>
   12cd0:	movw	r1, #44769	; 0xaee1
   12cd4:	movt	r1, #1
   12cd8:	b	12db4 <__assert_fail@plt+0x1858>
   12cdc:	cmp	r6, #0
   12ce0:	beq	12d20 <__assert_fail@plt+0x17c4>
   12ce4:	cmp	r5, #0
   12ce8:	beq	12d80 <__assert_fail@plt+0x1824>
   12cec:	movw	r1, #44873	; 0xaf49
   12cf0:	movt	r1, #1
   12cf4:	b	12db4 <__assert_fail@plt+0x1858>
   12cf8:	cmp	r5, #0
   12cfc:	beq	12d6c <__assert_fail@plt+0x1810>
   12d00:	movw	r1, #45075	; 0xb013
   12d04:	movt	r1, #1
   12d08:	b	12db4 <__assert_fail@plt+0x1858>
   12d0c:	cmp	sl, #0
   12d10:	beq	12d94 <__assert_fail@plt+0x1838>
   12d14:	movw	r1, #44808	; 0xaf08
   12d18:	movt	r1, #1
   12d1c:	b	12db4 <__assert_fail@plt+0x1858>
   12d20:	movw	r0, #45039	; 0xafef
   12d24:	movt	r0, #1
   12d28:	movw	r2, #44965	; 0xafa5
   12d2c:	movt	r2, #1
   12d30:	cmp	sl, #0
   12d34:	movne	r2, r0
   12d38:	movw	r1, #44999	; 0xafc7
   12d3c:	movt	r1, #1
   12d40:	cmp	r5, #0
   12d44:	moveq	r1, r2
   12d48:	mov	r0, #0
   12d4c:	mov	r2, #5
   12d50:	bl	112c8 <dcgettext@plt>
   12d54:	mov	r7, r0
   12d58:	mov	r0, #0
   12d5c:	bl	12fdc <__assert_fail@plt+0x1a80>
   12d60:	mov	r6, r8
   12d64:	mov	r8, #0
   12d68:	b	12dc4 <__assert_fail@plt+0x1868>
   12d6c:	cmp	sl, #0
   12d70:	beq	12da0 <__assert_fail@plt+0x1844>
   12d74:	movw	r1, #45107	; 0xb033
   12d78:	movt	r1, #1
   12d7c:	b	12db4 <__assert_fail@plt+0x1858>
   12d80:	cmp	sl, #0
   12d84:	beq	12dac <__assert_fail@plt+0x1850>
   12d88:	movw	r1, #44921	; 0xaf79
   12d8c:	movt	r1, #1
   12d90:	b	12db4 <__assert_fail@plt+0x1858>
   12d94:	movw	r1, #44843	; 0xaf2b
   12d98:	movt	r1, #1
   12d9c:	b	12db4 <__assert_fail@plt+0x1858>
   12da0:	movw	r1, #45135	; 0xb04f
   12da4:	movt	r1, #1
   12da8:	b	12db4 <__assert_fail@plt+0x1858>
   12dac:	movw	r1, #44965	; 0xafa5
   12db0:	movt	r1, #1
   12db4:	mov	r0, #0
   12db8:	mov	r2, #5
   12dbc:	bl	112c8 <dcgettext@plt>
   12dc0:	mov	r7, r0
   12dc4:	mov	r0, #4
   12dc8:	mov	r1, r9
   12dcc:	bl	17810 <__assert_fail@plt+0x62b4>
   12dd0:	mov	r2, r0
   12dd4:	str	r8, [sp]
   12dd8:	mov	r0, #1
   12ddc:	mov	r1, r7
   12de0:	mov	r3, r6
   12de4:	bl	11430 <__printf_chk@plt>
   12de8:	mov	r0, r6
   12dec:	bl	12fdc <__assert_fail@plt+0x1a80>
   12df0:	mov	r0, r8
   12df4:	sub	sp, fp, #28
   12df8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dfc:	b	12fdc <__assert_fail@plt+0x1a80>
   12e00:	bl	11514 <abort@plt>
   12e04:	push	{r4, r5, r6, sl, fp, lr}
   12e08:	add	fp, sp, #16
   12e0c:	mov	r4, r1
   12e10:	cmp	r0, #0
   12e14:	beq	12e68 <__assert_fail@plt+0x190c>
   12e18:	mov	r5, r0
   12e1c:	cmp	r4, #0
   12e20:	beq	12e7c <__assert_fail@plt+0x1920>
   12e24:	mov	r0, r5
   12e28:	bl	113dc <strlen@plt>
   12e2c:	mov	r6, r0
   12e30:	mov	r0, r4
   12e34:	bl	113dc <strlen@plt>
   12e38:	add	r0, r6, r0
   12e3c:	add	r0, r0, #2
   12e40:	bl	18730 <__assert_fail@plt+0x71d4>
   12e44:	mov	r6, r0
   12e48:	mov	r1, r5
   12e4c:	bl	112bc <stpcpy@plt>
   12e50:	mov	r1, #58	; 0x3a
   12e54:	strh	r1, [r0], #1
   12e58:	mov	r1, r4
   12e5c:	bl	112bc <stpcpy@plt>
   12e60:	mov	r0, r6
   12e64:	pop	{r4, r5, r6, sl, fp, pc}
   12e68:	cmp	r4, #0
   12e6c:	beq	12e88 <__assert_fail@plt+0x192c>
   12e70:	mov	r0, r4
   12e74:	pop	{r4, r5, r6, sl, fp, lr}
   12e78:	b	18a98 <__assert_fail@plt+0x753c>
   12e7c:	mov	r0, r5
   12e80:	pop	{r4, r5, r6, sl, fp, lr}
   12e84:	b	18a98 <__assert_fail@plt+0x753c>
   12e88:	mov	r6, #0
   12e8c:	mov	r0, r6
   12e90:	pop	{r4, r5, r6, sl, fp, pc}
   12e94:	push	{fp, lr}
   12e98:	mov	fp, sp
   12e9c:	sub	sp, sp, #8
   12ea0:	mov	ip, #0
   12ea4:	str	ip, [sp]
   12ea8:	bl	114e4 <fchownat@plt>
   12eac:	mov	sp, fp
   12eb0:	pop	{fp, pc}
   12eb4:	push	{fp, lr}
   12eb8:	mov	fp, sp
   12ebc:	sub	sp, sp, #8
   12ec0:	mov	ip, #256	; 0x100
   12ec4:	str	ip, [sp]
   12ec8:	bl	114e4 <fchownat@plt>
   12ecc:	mov	sp, fp
   12ed0:	pop	{fp, pc}
   12ed4:	movw	r1, #49592	; 0xc1b8
   12ed8:	movt	r1, #2
   12edc:	str	r0, [r1]
   12ee0:	bx	lr
   12ee4:	movw	r1, #49596	; 0xc1bc
   12ee8:	movt	r1, #2
   12eec:	strb	r0, [r1]
   12ef0:	bx	lr
   12ef4:	push	{r4, r5, r6, sl, fp, lr}
   12ef8:	add	fp, sp, #16
   12efc:	sub	sp, sp, #8
   12f00:	movw	r0, #49556	; 0xc194
   12f04:	movt	r0, #2
   12f08:	ldr	r0, [r0]
   12f0c:	bl	195c0 <__assert_fail@plt+0x8064>
   12f10:	cmp	r0, #0
   12f14:	beq	12f3c <__assert_fail@plt+0x19e0>
   12f18:	movw	r0, #49596	; 0xc1bc
   12f1c:	movt	r0, #2
   12f20:	ldrb	r0, [r0]
   12f24:	cmp	r0, #0
   12f28:	beq	12f5c <__assert_fail@plt+0x1a00>
   12f2c:	bl	1140c <__errno_location@plt>
   12f30:	ldr	r0, [r0]
   12f34:	cmp	r0, #32
   12f38:	bne	12f5c <__assert_fail@plt+0x1a00>
   12f3c:	movw	r0, #49552	; 0xc190
   12f40:	movt	r0, #2
   12f44:	ldr	r0, [r0]
   12f48:	bl	195c0 <__assert_fail@plt+0x8064>
   12f4c:	cmp	r0, #0
   12f50:	subeq	sp, fp, #16
   12f54:	popeq	{r4, r5, r6, sl, fp, pc}
   12f58:	b	12fcc <__assert_fail@plt+0x1a70>
   12f5c:	movw	r1, #45176	; 0xb078
   12f60:	movt	r1, #1
   12f64:	mov	r0, #0
   12f68:	mov	r2, #5
   12f6c:	bl	112c8 <dcgettext@plt>
   12f70:	mov	r4, r0
   12f74:	movw	r0, #49592	; 0xc1b8
   12f78:	movt	r0, #2
   12f7c:	ldr	r6, [r0]
   12f80:	bl	1140c <__errno_location@plt>
   12f84:	ldr	r5, [r0]
   12f88:	cmp	r6, #0
   12f8c:	bne	12fa8 <__assert_fail@plt+0x1a4c>
   12f90:	movw	r2, #43392	; 0xa980
   12f94:	movt	r2, #1
   12f98:	mov	r0, #0
   12f9c:	mov	r1, r5
   12fa0:	mov	r3, r4
   12fa4:	b	12fc8 <__assert_fail@plt+0x1a6c>
   12fa8:	mov	r0, r6
   12fac:	bl	178b4 <__assert_fail@plt+0x6358>
   12fb0:	mov	r3, r0
   12fb4:	str	r4, [sp]
   12fb8:	movw	r2, #43388	; 0xa97c
   12fbc:	movt	r2, #1
   12fc0:	mov	r0, #0
   12fc4:	mov	r1, r5
   12fc8:	bl	11358 <error@plt>
   12fcc:	movw	r0, #49468	; 0xc13c
   12fd0:	movt	r0, #2
   12fd4:	ldr	r0, [r0]
   12fd8:	bl	11298 <_exit@plt>
   12fdc:	push	{r4, r5, r6, sl, fp, lr}
   12fe0:	add	fp, sp, #16
   12fe4:	mov	r4, r0
   12fe8:	bl	1140c <__errno_location@plt>
   12fec:	mov	r5, r0
   12ff0:	ldr	r6, [r0]
   12ff4:	mov	r0, r4
   12ff8:	bl	1128c <free@plt>
   12ffc:	str	r6, [r5]
   13000:	pop	{r4, r5, r6, sl, fp, pc}
   13004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13008:	add	fp, sp, #28
   1300c:	sub	sp, sp, #12
   13010:	cmp	r1, #4096	; 0x1000
   13014:	bcs	13030 <__assert_fail@plt+0x1ad4>
   13018:	mov	r6, r1
   1301c:	mov	r7, r0
   13020:	and	r0, r1, #516	; 0x204
   13024:	cmp	r0, #516	; 0x204
   13028:	tstne	r6, #18
   1302c:	bne	1304c <__assert_fail@plt+0x1af0>
   13030:	bl	1140c <__errno_location@plt>
   13034:	mov	r1, #22
   13038:	str	r1, [r0]
   1303c:	mov	r4, #0
   13040:	mov	r0, r4
   13044:	sub	sp, fp, #28
   13048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1304c:	mov	sl, r2
   13050:	mov	r0, #1
   13054:	mov	r1, #96	; 0x60
   13058:	bl	1907c <__assert_fail@plt+0x7b20>
   1305c:	cmp	r0, #0
   13060:	beq	1303c <__assert_fail@plt+0x1ae0>
   13064:	mov	r4, r0
   13068:	mvn	r0, #99	; 0x63
   1306c:	str	r0, [r4, #32]
   13070:	bic	r0, r6, #516	; 0x204
   13074:	tst	r6, #2
   13078:	mov	r1, r6
   1307c:	orrne	r1, r0, #4
   13080:	str	sl, [r4, #44]	; 0x2c
   13084:	str	r1, [r4, #48]	; 0x30
   13088:	mov	r0, r7
   1308c:	bl	13310 <__assert_fail@plt+0x1db4>
   13090:	mov	r1, r0
   13094:	cmp	r0, #4096	; 0x1000
   13098:	movls	r1, #4096	; 0x1000
   1309c:	mov	r0, r4
   130a0:	bl	13358 <__assert_fail@plt+0x1dfc>
   130a4:	cmp	r0, #0
   130a8:	beq	13304 <__assert_fail@plt+0x1da8>
   130ac:	ldr	r0, [r7]
   130b0:	cmp	r0, #0
   130b4:	beq	130f4 <__assert_fail@plt+0x1b98>
   130b8:	movw	r1, #42856	; 0xa768
   130bc:	movt	r1, #1
   130c0:	mov	r0, r4
   130c4:	mov	r2, #0
   130c8:	bl	133d4 <__assert_fail@plt+0x1e78>
   130cc:	cmp	r0, #0
   130d0:	beq	132fc <__assert_fail@plt+0x1da0>
   130d4:	mov	r8, r0
   130d8:	mvn	r0, #0
   130dc:	str	r0, [r8, #48]	; 0x30
   130e0:	cmp	sl, #0
   130e4:	beq	13100 <__assert_fail@plt+0x1ba4>
   130e8:	ldrb	r0, [r4, #49]	; 0x31
   130ec:	ubfx	r0, r0, #2, #1
   130f0:	b	13104 <__assert_fail@plt+0x1ba8>
   130f4:	mov	r8, #0
   130f8:	cmp	sl, #0
   130fc:	bne	130e8 <__assert_fail@plt+0x1b8c>
   13100:	mov	r0, #1
   13104:	ldr	r5, [r7]
   13108:	cmp	r5, #0
   1310c:	beq	13238 <__assert_fail@plt+0x1cdc>
   13110:	and	r1, r6, #2048	; 0x800
   13114:	str	r1, [sp, #8]
   13118:	eor	r0, r0, #1
   1311c:	str	r0, [sp, #4]
   13120:	mov	r9, #0
   13124:	mov	r0, #0
   13128:	str	r0, [sp]
   1312c:	mov	r6, #0
   13130:	b	13168 <__assert_fail@plt+0x1c0c>
   13134:	mov	r0, r4
   13138:	mov	r1, r5
   1313c:	mov	r2, #0
   13140:	bl	13488 <__assert_fail@plt+0x1f2c>
   13144:	strh	r0, [r5, #56]	; 0x38
   13148:	cmp	sl, #0
   1314c:	beq	13210 <__assert_fail@plt+0x1cb4>
   13150:	str	r9, [r5, #8]
   13154:	mov	r9, r5
   13158:	add	r6, r6, #1
   1315c:	ldr	r5, [r7, #4]!
   13160:	cmp	r5, #0
   13164:	beq	13240 <__assert_fail@plt+0x1ce4>
   13168:	mov	r0, r5
   1316c:	bl	113dc <strlen@plt>
   13170:	mov	r2, r0
   13174:	ldr	r0, [sp, #8]
   13178:	cmp	r0, #0
   1317c:	bne	131b4 <__assert_fail@plt+0x1c58>
   13180:	cmp	r2, #3
   13184:	bcc	131b4 <__assert_fail@plt+0x1c58>
   13188:	add	r0, r2, r5
   1318c:	ldrb	r0, [r0, #-1]
   13190:	cmp	r0, #47	; 0x2f
   13194:	bne	131b4 <__assert_fail@plt+0x1c58>
   13198:	sub	r0, r5, #2
   1319c:	ldrb	r1, [r0, r2]
   131a0:	cmp	r1, #47	; 0x2f
   131a4:	bne	131b4 <__assert_fail@plt+0x1c58>
   131a8:	sub	r2, r2, #1
   131ac:	cmp	r2, #1
   131b0:	bhi	1319c <__assert_fail@plt+0x1c40>
   131b4:	mov	r0, r4
   131b8:	mov	r1, r5
   131bc:	bl	133d4 <__assert_fail@plt+0x1e78>
   131c0:	cmp	r0, #0
   131c4:	beq	132ec <__assert_fail@plt+0x1d90>
   131c8:	mov	r5, r0
   131cc:	str	r8, [r0, #4]
   131d0:	mov	r0, #0
   131d4:	str	r0, [r5, #48]	; 0x30
   131d8:	add	r0, r5, #168	; 0xa8
   131dc:	str	r0, [r5, #24]
   131e0:	clz	r0, r9
   131e4:	lsr	r0, r0, #5
   131e8:	ldr	r1, [sp, #4]
   131ec:	orrs	r0, r1, r0
   131f0:	bne	13134 <__assert_fail@plt+0x1bd8>
   131f4:	mov	r0, #11
   131f8:	strh	r0, [r5, #56]	; 0x38
   131fc:	mov	r0, r5
   13200:	mov	r1, #1
   13204:	bl	13458 <__assert_fail@plt+0x1efc>
   13208:	cmp	sl, #0
   1320c:	bne	13150 <__assert_fail@plt+0x1bf4>
   13210:	mov	r0, #0
   13214:	str	r0, [r5, #8]
   13218:	cmp	r9, #0
   1321c:	beq	13230 <__assert_fail@plt+0x1cd4>
   13220:	ldr	r0, [sp]
   13224:	str	r5, [r0, #8]
   13228:	str	r5, [sp]
   1322c:	b	13158 <__assert_fail@plt+0x1bfc>
   13230:	str	r5, [sp]
   13234:	b	13154 <__assert_fail@plt+0x1bf8>
   13238:	mov	r9, #0
   1323c:	b	13264 <__assert_fail@plt+0x1d08>
   13240:	cmp	sl, #0
   13244:	beq	13264 <__assert_fail@plt+0x1d08>
   13248:	cmp	r6, #2
   1324c:	bcc	13264 <__assert_fail@plt+0x1d08>
   13250:	mov	r0, r4
   13254:	mov	r1, r9
   13258:	mov	r2, r6
   1325c:	bl	135fc <__assert_fail@plt+0x20a0>
   13260:	mov	r9, r0
   13264:	movw	r1, #42856	; 0xa768
   13268:	movt	r1, #1
   1326c:	mov	r0, r4
   13270:	mov	r2, #0
   13274:	bl	133d4 <__assert_fail@plt+0x1e78>
   13278:	str	r0, [r4]
   1327c:	cmp	r0, #0
   13280:	beq	132ec <__assert_fail@plt+0x1d90>
   13284:	mov	r1, #9
   13288:	strh	r1, [r0, #56]	; 0x38
   1328c:	str	r9, [r0, #8]
   13290:	mov	r1, #1
   13294:	str	r1, [r0, #48]	; 0x30
   13298:	mov	r0, r4
   1329c:	bl	136cc <__assert_fail@plt+0x2170>
   132a0:	cmp	r0, #0
   132a4:	beq	132ec <__assert_fail@plt+0x1d90>
   132a8:	ldrh	r0, [r4, #48]	; 0x30
   132ac:	tst	r0, #516	; 0x204
   132b0:	bne	132dc <__assert_fail@plt+0x1d80>
   132b4:	movw	r1, #45189	; 0xb085
   132b8:	movt	r1, #1
   132bc:	mov	r0, r4
   132c0:	bl	13758 <__assert_fail@plt+0x21fc>
   132c4:	str	r0, [r4, #28]
   132c8:	cmn	r0, #1
   132cc:	bgt	132dc <__assert_fail@plt+0x1d80>
   132d0:	ldr	r0, [r4, #48]	; 0x30
   132d4:	orr	r0, r0, #4
   132d8:	str	r0, [r4, #48]	; 0x30
   132dc:	add	r0, r4, #60	; 0x3c
   132e0:	mvn	r1, #0
   132e4:	bl	16054 <__assert_fail@plt+0x4af8>
   132e8:	b	13040 <__assert_fail@plt+0x1ae4>
   132ec:	mov	r0, r9
   132f0:	bl	13788 <__assert_fail@plt+0x222c>
   132f4:	mov	r0, r8
   132f8:	bl	12fdc <__assert_fail@plt+0x1a80>
   132fc:	ldr	r0, [r4, #24]
   13300:	bl	12fdc <__assert_fail@plt+0x1a80>
   13304:	mov	r0, r4
   13308:	bl	12fdc <__assert_fail@plt+0x1a80>
   1330c:	b	1303c <__assert_fail@plt+0x1ae0>
   13310:	push	{r4, r5, fp, lr}
   13314:	add	fp, sp, #8
   13318:	mov	r1, r0
   1331c:	ldr	r0, [r0]
   13320:	cmp	r0, #0
   13324:	beq	13350 <__assert_fail@plt+0x1df4>
   13328:	add	r5, r1, #4
   1332c:	mov	r4, #0
   13330:	bl	113dc <strlen@plt>
   13334:	cmp	r0, r4
   13338:	movhi	r4, r0
   1333c:	ldr	r0, [r5], #4
   13340:	cmp	r0, #0
   13344:	bne	13330 <__assert_fail@plt+0x1dd4>
   13348:	add	r0, r4, #1
   1334c:	pop	{r4, r5, fp, pc}
   13350:	mov	r0, #1
   13354:	pop	{r4, r5, fp, pc}
   13358:	push	{r4, r5, fp, lr}
   1335c:	add	fp, sp, #8
   13360:	mov	r4, r0
   13364:	ldr	r0, [r0, #36]	; 0x24
   13368:	add	r1, r1, #256	; 0x100
   1336c:	adds	r1, r1, r0
   13370:	bcc	13398 <__assert_fail@plt+0x1e3c>
   13374:	ldr	r0, [r4, #24]
   13378:	bl	12fdc <__assert_fail@plt+0x1a80>
   1337c:	mov	r5, #0
   13380:	str	r5, [r4, #24]
   13384:	bl	1140c <__errno_location@plt>
   13388:	mov	r1, #36	; 0x24
   1338c:	str	r1, [r0]
   13390:	mov	r0, r5
   13394:	pop	{r4, r5, fp, pc}
   13398:	str	r1, [r4, #36]	; 0x24
   1339c:	ldr	r0, [r4, #24]
   133a0:	bl	19100 <__assert_fail@plt+0x7ba4>
   133a4:	cmp	r0, #0
   133a8:	beq	133bc <__assert_fail@plt+0x1e60>
   133ac:	str	r0, [r4, #24]
   133b0:	mov	r5, #1
   133b4:	mov	r0, r5
   133b8:	pop	{r4, r5, fp, pc}
   133bc:	ldr	r0, [r4, #24]
   133c0:	bl	12fdc <__assert_fail@plt+0x1a80>
   133c4:	mov	r5, #0
   133c8:	str	r5, [r4, #24]
   133cc:	mov	r0, r5
   133d0:	pop	{r4, r5, fp, pc}
   133d4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   133d8:	add	fp, sp, #24
   133dc:	mov	r6, r2
   133e0:	mov	r8, r1
   133e4:	mov	r5, r0
   133e8:	add	r0, r2, #176	; 0xb0
   133ec:	bic	r0, r0, #7
   133f0:	bl	190d0 <__assert_fail@plt+0x7b74>
   133f4:	cmp	r0, #0
   133f8:	beq	1344c <__assert_fail@plt+0x1ef0>
   133fc:	mov	r4, r0
   13400:	add	r7, r0, #168	; 0xa8
   13404:	mov	r0, r7
   13408:	mov	r1, r8
   1340c:	mov	r2, r6
   13410:	bl	112a4 <memcpy@plt>
   13414:	mov	r0, #0
   13418:	strb	r0, [r7, r6]
   1341c:	str	r6, [r4, #52]	; 0x34
   13420:	str	r5, [r4, #44]	; 0x2c
   13424:	ldr	r1, [r5, #24]
   13428:	str	r0, [r4, #12]
   1342c:	str	r0, [r4, #16]
   13430:	str	r0, [r4, #20]
   13434:	mov	r2, #196608	; 0x30000
   13438:	str	r2, [r4, #58]	; 0x3a
   1343c:	str	r1, [r4, #28]
   13440:	str	r0, [r4, #32]
   13444:	mov	r0, r4
   13448:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1344c:	mov	r4, #0
   13450:	mov	r0, r4
   13454:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   13458:	push	{fp, lr}
   1345c:	mov	fp, sp
   13460:	ldrh	r2, [r0, #56]	; 0x38
   13464:	cmp	r2, #11
   13468:	bne	13484 <__assert_fail@plt+0x1f28>
   1346c:	mov	r3, #0
   13470:	mov	r2, #1
   13474:	cmp	r1, #0
   13478:	movwne	r2, #2
   1347c:	strd	r2, [r0, #112]	; 0x70
   13480:	pop	{fp, pc}
   13484:	bl	11514 <abort@plt>
   13488:	push	{r4, r5, r6, sl, fp, lr}
   1348c:	add	fp, sp, #16
   13490:	mov	r4, r1
   13494:	ldr	r1, [r1, #48]	; 0x30
   13498:	cmp	r1, #0
   1349c:	bne	134ac <__assert_fail@plt+0x1f50>
   134a0:	ldrb	r1, [r0, #48]	; 0x30
   134a4:	and	r1, r1, #1
   134a8:	orr	r2, r1, r2
   134ac:	add	r5, r4, #64	; 0x40
   134b0:	cmp	r2, #0
   134b4:	ldreq	r1, [r0, #48]	; 0x30
   134b8:	andseq	r1, r1, #2
   134bc:	beq	1350c <__assert_fail@plt+0x1fb0>
   134c0:	ldr	r0, [r4, #24]
   134c4:	mov	r1, r5
   134c8:	bl	19f5c <__assert_fail@plt+0x8a00>
   134cc:	cmp	r0, #0
   134d0:	beq	13580 <__assert_fail@plt+0x2024>
   134d4:	bl	1140c <__errno_location@plt>
   134d8:	mov	r6, r0
   134dc:	ldr	r0, [r0]
   134e0:	cmp	r0, #2
   134e4:	bne	13530 <__assert_fail@plt+0x1fd4>
   134e8:	ldr	r0, [r4, #24]
   134ec:	mov	r1, r5
   134f0:	bl	19f7c <__assert_fail@plt+0x8a20>
   134f4:	cmp	r0, #0
   134f8:	bne	13530 <__assert_fail@plt+0x1fd4>
   134fc:	mov	r0, #0
   13500:	str	r0, [r6]
   13504:	mov	r0, #13
   13508:	pop	{r4, r5, r6, sl, fp, pc}
   1350c:	ldr	r1, [r4, #24]
   13510:	ldr	r0, [r0, #32]
   13514:	mov	r2, r5
   13518:	mov	r3, #256	; 0x100
   1351c:	bl	19f8c <__assert_fail@plt+0x8a30>
   13520:	cmp	r0, #0
   13524:	beq	13580 <__assert_fail@plt+0x2024>
   13528:	bl	1140c <__errno_location@plt>
   1352c:	mov	r6, r0
   13530:	ldr	r0, [r6]
   13534:	str	r0, [r4, #32]
   13538:	mov	r0, #0
   1353c:	vmov.i32	q8, #0	; 0x00000000
   13540:	str	r0, [r5, #96]	; 0x60
   13544:	add	r1, r5, #80	; 0x50
   13548:	vst1.64	{d16-d17}, [r1]
   1354c:	add	r1, r5, #64	; 0x40
   13550:	vst1.64	{d16-d17}, [r1]
   13554:	add	r1, r5, #48	; 0x30
   13558:	vst1.64	{d16-d17}, [r1]
   1355c:	add	r1, r5, #32
   13560:	vst1.64	{d16-d17}, [r1]
   13564:	add	r1, r5, #16
   13568:	vst1.64	{d16-d17}, [r1]
   1356c:	mov	r1, #100	; 0x64
   13570:	vst1.64	{d16-d17}, [r5], r1
   13574:	str	r0, [r5]
   13578:	mov	r0, #10
   1357c:	pop	{r4, r5, r6, sl, fp, pc}
   13580:	ldr	r0, [r4, #80]	; 0x50
   13584:	and	r0, r0, #61440	; 0xf000
   13588:	cmp	r0, #40960	; 0xa000
   1358c:	beq	135e4 <__assert_fail@plt+0x2088>
   13590:	cmp	r0, #32768	; 0x8000
   13594:	beq	135ec <__assert_fail@plt+0x2090>
   13598:	cmp	r0, #16384	; 0x4000
   1359c:	bne	135f4 <__assert_fail@plt+0x2098>
   135a0:	ldrb	r1, [r4, #168]	; 0xa8
   135a4:	mov	r0, #1
   135a8:	cmp	r1, #46	; 0x2e
   135ac:	bne	135f8 <__assert_fail@plt+0x209c>
   135b0:	ldrb	r1, [r4, #169]	; 0xa9
   135b4:	cmp	r1, #0
   135b8:	beq	135d0 <__assert_fail@plt+0x2074>
   135bc:	cmp	r1, #46	; 0x2e
   135c0:	bne	135f8 <__assert_fail@plt+0x209c>
   135c4:	ldrb	r1, [r4, #170]	; 0xaa
   135c8:	cmp	r1, #0
   135cc:	popne	{r4, r5, r6, sl, fp, pc}
   135d0:	ldr	r1, [r4, #48]	; 0x30
   135d4:	mov	r0, #5
   135d8:	cmp	r1, #0
   135dc:	movweq	r0, #1
   135e0:	pop	{r4, r5, r6, sl, fp, pc}
   135e4:	mov	r0, #12
   135e8:	pop	{r4, r5, r6, sl, fp, pc}
   135ec:	mov	r0, #8
   135f0:	pop	{r4, r5, r6, sl, fp, pc}
   135f4:	mov	r0, #3
   135f8:	pop	{r4, r5, r6, sl, fp, pc}
   135fc:	push	{r4, r5, r6, r7, fp, lr}
   13600:	add	fp, sp, #16
   13604:	mov	r6, r2
   13608:	mov	r4, r1
   1360c:	mov	r5, r0
   13610:	ldr	r7, [r0, #44]	; 0x2c
   13614:	ldr	r0, [r0, #40]	; 0x28
   13618:	cmp	r0, r2
   1361c:	bcs	13648 <__assert_fail@plt+0x20ec>
   13620:	add	r1, r6, #40	; 0x28
   13624:	str	r1, [r5, #40]	; 0x28
   13628:	cmn	r1, #-1073741823	; 0xc0000001
   1362c:	bhi	136b0 <__assert_fail@plt+0x2154>
   13630:	ldr	r0, [r5, #8]
   13634:	lsl	r1, r1, #2
   13638:	bl	19100 <__assert_fail@plt+0x7ba4>
   1363c:	cmp	r0, #0
   13640:	beq	136b0 <__assert_fail@plt+0x2154>
   13644:	str	r0, [r5, #8]
   13648:	cmp	r4, #0
   1364c:	beq	13664 <__assert_fail@plt+0x2108>
   13650:	ldr	r0, [r5, #8]
   13654:	str	r4, [r0], #4
   13658:	ldr	r4, [r4, #8]
   1365c:	cmp	r4, #0
   13660:	bne	13654 <__assert_fail@plt+0x20f8>
   13664:	ldr	r0, [r5, #8]
   13668:	mov	r1, r6
   1366c:	mov	r2, #4
   13670:	mov	r3, r7
   13674:	bl	114d8 <qsort@plt>
   13678:	subs	r1, r6, #1
   1367c:	ldr	r0, [r5, #8]
   13680:	ldr	r4, [r0]
   13684:	beq	1369c <__assert_fail@plt+0x2140>
   13688:	ldr	r2, [r0]
   1368c:	ldr	r3, [r0, #4]!
   13690:	str	r3, [r2, #8]
   13694:	subs	r1, r1, #1
   13698:	bne	13688 <__assert_fail@plt+0x212c>
   1369c:	ldr	r0, [r0]
   136a0:	mov	r1, #0
   136a4:	str	r1, [r0, #8]
   136a8:	mov	r0, r4
   136ac:	pop	{r4, r5, r6, r7, fp, pc}
   136b0:	ldr	r0, [r5, #8]
   136b4:	bl	12fdc <__assert_fail@plt+0x1a80>
   136b8:	mov	r0, #0
   136bc:	str	r0, [r5, #40]	; 0x28
   136c0:	str	r0, [r5, #8]
   136c4:	mov	r0, r4
   136c8:	pop	{r4, r5, r6, r7, fp, pc}
   136cc:	push	{r4, r5, fp, lr}
   136d0:	add	fp, sp, #8
   136d4:	sub	sp, sp, #8
   136d8:	mov	r4, r0
   136dc:	ldrh	r0, [r0, #48]	; 0x30
   136e0:	movw	r1, #258	; 0x102
   136e4:	tst	r0, r1
   136e8:	beq	13728 <__assert_fail@plt+0x21cc>
   136ec:	movw	r0, #12252	; 0x2fdc
   136f0:	movt	r0, #1
   136f4:	str	r0, [sp]
   136f8:	mov	r5, #0
   136fc:	movw	r2, #19884	; 0x4dac
   13700:	movt	r2, #1
   13704:	movw	r3, #19916	; 0x4dcc
   13708:	movt	r3, #1
   1370c:	mov	r0, #31
   13710:	mov	r1, #0
   13714:	bl	155ac <__assert_fail@plt+0x4050>
   13718:	str	r0, [r4, #56]	; 0x38
   1371c:	cmp	r0, #0
   13720:	movne	r5, #1
   13724:	b	1374c <__assert_fail@plt+0x21f0>
   13728:	mov	r0, #32
   1372c:	bl	190d0 <__assert_fail@plt+0x7b74>
   13730:	str	r0, [r4, #56]	; 0x38
   13734:	cmp	r0, #0
   13738:	beq	13748 <__assert_fail@plt+0x21ec>
   1373c:	bl	19644 <__assert_fail@plt+0x80e8>
   13740:	mov	r5, #1
   13744:	b	1374c <__assert_fail@plt+0x21f0>
   13748:	mov	r5, #0
   1374c:	mov	r0, r5
   13750:	sub	sp, fp, #8
   13754:	pop	{r4, r5, fp, pc}
   13758:	ldr	r3, [r0, #48]	; 0x30
   1375c:	mov	r2, #32768	; 0x8000
   13760:	and	r2, r2, r3, lsl #11
   13764:	orr	r2, r2, #18688	; 0x4900
   13768:	orr	r2, r2, #524288	; 0x80000
   1376c:	tst	r3, #512	; 0x200
   13770:	bne	13780 <__assert_fail@plt+0x2224>
   13774:	mov	r0, r1
   13778:	mov	r1, r2
   1377c:	b	199dc <__assert_fail@plt+0x8480>
   13780:	ldr	r0, [r0, #32]
   13784:	b	16178 <__assert_fail@plt+0x4c1c>
   13788:	push	{r4, r6, r7, sl, fp, lr}
   1378c:	add	fp, sp, #16
   13790:	cmp	r0, #0
   13794:	beq	137cc <__assert_fail@plt+0x2270>
   13798:	mov	r4, r0
   1379c:	b	137b4 <__assert_fail@plt+0x2258>
   137a0:	mov	r0, r4
   137a4:	bl	12fdc <__assert_fail@plt+0x1a80>
   137a8:	cmp	r6, #0
   137ac:	mov	r4, r6
   137b0:	beq	137cc <__assert_fail@plt+0x2270>
   137b4:	ldrd	r6, [r4, #8]
   137b8:	cmp	r7, #0
   137bc:	beq	137a0 <__assert_fail@plt+0x2244>
   137c0:	mov	r0, r7
   137c4:	bl	11538 <closedir@plt>
   137c8:	b	137a0 <__assert_fail@plt+0x2244>
   137cc:	pop	{r4, r6, r7, sl, fp, pc}
   137d0:	push	{r4, r5, fp, lr}
   137d4:	add	fp, sp, #8
   137d8:	mov	r4, r0
   137dc:	ldr	r0, [r0]
   137e0:	cmp	r0, #0
   137e4:	beq	13824 <__assert_fail@plt+0x22c8>
   137e8:	ldr	r1, [r0, #48]	; 0x30
   137ec:	cmp	r1, #0
   137f0:	bmi	13818 <__assert_fail@plt+0x22bc>
   137f4:	ldr	r5, [r0, #8]
   137f8:	cmp	r5, #0
   137fc:	ldreq	r5, [r0, #4]
   13800:	bl	12fdc <__assert_fail@plt+0x1a80>
   13804:	ldr	r0, [r5, #48]	; 0x30
   13808:	cmn	r0, #1
   1380c:	mov	r0, r5
   13810:	bgt	137f4 <__assert_fail@plt+0x2298>
   13814:	b	1381c <__assert_fail@plt+0x22c0>
   13818:	mov	r5, r0
   1381c:	mov	r0, r5
   13820:	bl	12fdc <__assert_fail@plt+0x1a80>
   13824:	ldr	r0, [r4, #4]
   13828:	cmp	r0, #0
   1382c:	blne	13788 <__assert_fail@plt+0x222c>
   13830:	ldr	r0, [r4, #8]
   13834:	bl	12fdc <__assert_fail@plt+0x1a80>
   13838:	ldr	r0, [r4, #24]
   1383c:	bl	12fdc <__assert_fail@plt+0x1a80>
   13840:	ldr	r0, [r4, #48]	; 0x30
   13844:	tst	r0, #512	; 0x200
   13848:	bne	13874 <__assert_fail@plt+0x2318>
   1384c:	mov	r5, #0
   13850:	tst	r0, #4
   13854:	bne	138b8 <__assert_fail@plt+0x235c>
   13858:	ldr	r0, [r4, #28]
   1385c:	bl	114cc <fchdir@plt>
   13860:	cmp	r0, #0
   13864:	beq	13894 <__assert_fail@plt+0x2338>
   13868:	bl	1140c <__errno_location@plt>
   1386c:	ldr	r5, [r0]
   13870:	b	13898 <__assert_fail@plt+0x233c>
   13874:	ldr	r0, [r4, #32]
   13878:	mov	r5, #0
   1387c:	cmp	r0, #0
   13880:	bmi	138b8 <__assert_fail@plt+0x235c>
   13884:	bl	11520 <close@plt>
   13888:	cmp	r0, #0
   1388c:	bne	138b0 <__assert_fail@plt+0x2354>
   13890:	b	138b8 <__assert_fail@plt+0x235c>
   13894:	mov	r5, #0
   13898:	ldr	r0, [r4, #28]
   1389c:	bl	11520 <close@plt>
   138a0:	cmp	r5, #0
   138a4:	bne	138b8 <__assert_fail@plt+0x235c>
   138a8:	cmp	r0, #0
   138ac:	beq	138b8 <__assert_fail@plt+0x235c>
   138b0:	bl	1140c <__errno_location@plt>
   138b4:	ldr	r5, [r0]
   138b8:	add	r0, r4, #60	; 0x3c
   138bc:	bl	13900 <__assert_fail@plt+0x23a4>
   138c0:	ldr	r0, [r4, #52]	; 0x34
   138c4:	cmp	r0, #0
   138c8:	beq	138d0 <__assert_fail@plt+0x2374>
   138cc:	bl	15888 <__assert_fail@plt+0x432c>
   138d0:	mov	r0, r4
   138d4:	bl	1393c <__assert_fail@plt+0x23e0>
   138d8:	mov	r0, r4
   138dc:	bl	12fdc <__assert_fail@plt+0x1a80>
   138e0:	cmp	r5, #0
   138e4:	beq	138f8 <__assert_fail@plt+0x239c>
   138e8:	bl	1140c <__errno_location@plt>
   138ec:	str	r5, [r0]
   138f0:	mvn	r0, #0
   138f4:	pop	{r4, r5, fp, pc}
   138f8:	mov	r0, #0
   138fc:	pop	{r4, r5, fp, pc}
   13900:	push	{r4, sl, fp, lr}
   13904:	add	fp, sp, #8
   13908:	mov	r4, r0
   1390c:	b	13914 <__assert_fail@plt+0x23b8>
   13910:	mov	r0, r4
   13914:	bl	16080 <__assert_fail@plt+0x4b24>
   13918:	cmp	r0, #0
   1391c:	bne	13938 <__assert_fail@plt+0x23dc>
   13920:	mov	r0, r4
   13924:	bl	160cc <__assert_fail@plt+0x4b70>
   13928:	cmp	r0, #0
   1392c:	bmi	13910 <__assert_fail@plt+0x23b4>
   13930:	bl	11520 <close@plt>
   13934:	b	13910 <__assert_fail@plt+0x23b4>
   13938:	pop	{r4, sl, fp, pc}
   1393c:	ldrh	r1, [r0, #48]	; 0x30
   13940:	movw	r2, #258	; 0x102
   13944:	tst	r1, r2
   13948:	beq	1395c <__assert_fail@plt+0x2400>
   1394c:	ldr	r0, [r0, #56]	; 0x38
   13950:	cmp	r0, #0
   13954:	bxeq	lr
   13958:	b	15888 <__assert_fail@plt+0x432c>
   1395c:	ldr	r0, [r0, #56]	; 0x38
   13960:	b	12fdc <__assert_fail@plt+0x1a80>
   13964:	push	{r4, r5, r6, r7, fp, lr}
   13968:	add	fp, sp, #16
   1396c:	ldr	r6, [r0]
   13970:	mov	r5, #0
   13974:	cmp	r6, #0
   13978:	beq	13f1c <__assert_fail@plt+0x29c0>
   1397c:	mov	r4, r0
   13980:	ldr	r1, [r0, #48]	; 0x30
   13984:	tst	r1, #8192	; 0x2000
   13988:	bne	13f1c <__assert_fail@plt+0x29c0>
   1398c:	ldrh	r0, [r6, #60]	; 0x3c
   13990:	mov	r2, #3
   13994:	strh	r2, [r6, #60]	; 0x3c
   13998:	cmp	r0, #2
   1399c:	beq	139c4 <__assert_fail@plt+0x2468>
   139a0:	cmp	r0, #1
   139a4:	bne	13a2c <__assert_fail@plt+0x24d0>
   139a8:	mov	r0, r4
   139ac:	mov	r1, r6
   139b0:	mov	r2, #0
   139b4:	bl	13488 <__assert_fail@plt+0x1f2c>
   139b8:	strh	r0, [r6, #56]	; 0x38
   139bc:	mov	r0, r6
   139c0:	pop	{r4, r5, r6, r7, fp, pc}
   139c4:	ldrh	r2, [r6, #56]	; 0x38
   139c8:	bic	r2, r2, #1
   139cc:	cmp	r2, #12
   139d0:	bne	13a2c <__assert_fail@plt+0x24d0>
   139d4:	mov	r0, r4
   139d8:	mov	r1, r6
   139dc:	mov	r2, #1
   139e0:	bl	13488 <__assert_fail@plt+0x1f2c>
   139e4:	strh	r0, [r6, #56]	; 0x38
   139e8:	cmp	r0, #1
   139ec:	bne	13b18 <__assert_fail@plt+0x25bc>
   139f0:	ldrb	r0, [r4, #48]	; 0x30
   139f4:	tst	r0, #4
   139f8:	bne	13b18 <__assert_fail@plt+0x25bc>
   139fc:	movw	r1, #45189	; 0xb085
   13a00:	movt	r1, #1
   13a04:	mov	r0, r4
   13a08:	bl	13758 <__assert_fail@plt+0x21fc>
   13a0c:	str	r0, [r6, #36]	; 0x24
   13a10:	cmn	r0, #1
   13a14:	ble	13d58 <__assert_fail@plt+0x27fc>
   13a18:	ldrh	r0, [r6, #58]	; 0x3a
   13a1c:	orr	r0, r0, #2
   13a20:	strh	r0, [r6, #58]	; 0x3a
   13a24:	mov	r5, r6
   13a28:	b	13e3c <__assert_fail@plt+0x28e0>
   13a2c:	ldrh	r2, [r6, #56]	; 0x38
   13a30:	cmp	r2, #1
   13a34:	bne	13a88 <__assert_fail@plt+0x252c>
   13a38:	cmp	r0, #4
   13a3c:	bne	13b20 <__assert_fail@plt+0x25c4>
   13a40:	ldrb	r0, [r6, #58]	; 0x3a
   13a44:	tst	r0, #2
   13a48:	beq	13a54 <__assert_fail@plt+0x24f8>
   13a4c:	ldr	r0, [r6, #36]	; 0x24
   13a50:	bl	11520 <close@plt>
   13a54:	ldr	r0, [r4, #4]
   13a58:	cmp	r0, #0
   13a5c:	beq	13a6c <__assert_fail@plt+0x2510>
   13a60:	bl	13788 <__assert_fail@plt+0x222c>
   13a64:	mov	r0, #0
   13a68:	str	r0, [r4, #4]
   13a6c:	mov	r0, #6
   13a70:	strh	r0, [r6, #56]	; 0x38
   13a74:	mov	r0, r4
   13a78:	mov	r1, r6
   13a7c:	bl	13f28 <__assert_fail@plt+0x29cc>
   13a80:	mov	r0, r6
   13a84:	pop	{r4, r5, r6, r7, fp, pc}
   13a88:	ldr	r5, [r6, #8]
   13a8c:	cmp	r5, #0
   13a90:	beq	13bb8 <__assert_fail@plt+0x265c>
   13a94:	str	r5, [r4]
   13a98:	mov	r0, r6
   13a9c:	bl	12fdc <__assert_fail@plt+0x1a80>
   13aa0:	ldr	r0, [r5, #48]	; 0x30
   13aa4:	cmp	r0, #0
   13aa8:	beq	13c04 <__assert_fail@plt+0x26a8>
   13aac:	ldrh	r0, [r5, #60]	; 0x3c
   13ab0:	cmp	r0, #4
   13ab4:	mov	r6, r5
   13ab8:	beq	13a88 <__assert_fail@plt+0x252c>
   13abc:	cmp	r0, #2
   13ac0:	bne	13e00 <__assert_fail@plt+0x28a4>
   13ac4:	mov	r0, r4
   13ac8:	mov	r1, r5
   13acc:	mov	r2, #1
   13ad0:	bl	13488 <__assert_fail@plt+0x1f2c>
   13ad4:	strh	r0, [r5, #56]	; 0x38
   13ad8:	cmp	r0, #1
   13adc:	bne	13df8 <__assert_fail@plt+0x289c>
   13ae0:	ldrb	r0, [r4, #48]	; 0x30
   13ae4:	tst	r0, #4
   13ae8:	bne	13df8 <__assert_fail@plt+0x289c>
   13aec:	movw	r1, #45189	; 0xb085
   13af0:	movt	r1, #1
   13af4:	mov	r0, r4
   13af8:	bl	13758 <__assert_fail@plt+0x21fc>
   13afc:	str	r0, [r5, #36]	; 0x24
   13b00:	cmn	r0, #1
   13b04:	ble	13de4 <__assert_fail@plt+0x2888>
   13b08:	ldrh	r0, [r5, #58]	; 0x3a
   13b0c:	orr	r0, r0, #2
   13b10:	strh	r0, [r5, #58]	; 0x3a
   13b14:	b	13df8 <__assert_fail@plt+0x289c>
   13b18:	mov	r5, r6
   13b1c:	b	13e3c <__assert_fail@plt+0x28e0>
   13b20:	tst	r1, #64	; 0x40
   13b24:	beq	13b48 <__assert_fail@plt+0x25ec>
   13b28:	ldr	r0, [r4, #16]
   13b2c:	ldr	r3, [r4, #20]
   13b30:	ldr	r2, [r6, #64]	; 0x40
   13b34:	ldr	r5, [r6, #68]	; 0x44
   13b38:	eor	r3, r5, r3
   13b3c:	eor	r0, r2, r0
   13b40:	orrs	r0, r0, r3
   13b44:	bne	13a40 <__assert_fail@plt+0x24e4>
   13b48:	ldr	r0, [r4, #4]
   13b4c:	cmp	r0, #0
   13b50:	beq	13c58 <__assert_fail@plt+0x26fc>
   13b54:	tst	r1, #4096	; 0x1000
   13b58:	bne	13c44 <__assert_fail@plt+0x26e8>
   13b5c:	ldr	r3, [r6, #24]
   13b60:	mov	r0, r4
   13b64:	mov	r1, r6
   13b68:	mvn	r2, #0
   13b6c:	bl	14004 <__assert_fail@plt+0x2aa8>
   13b70:	cmp	r0, #0
   13b74:	beq	13c70 <__assert_fail@plt+0x2714>
   13b78:	bl	1140c <__errno_location@plt>
   13b7c:	ldr	r0, [r0]
   13b80:	str	r0, [r6, #32]
   13b84:	ldrh	r0, [r6, #58]	; 0x3a
   13b88:	orr	r0, r0, #1
   13b8c:	strh	r0, [r6, #58]	; 0x3a
   13b90:	ldr	r0, [r4, #4]
   13b94:	cmp	r0, #0
   13b98:	beq	13c70 <__assert_fail@plt+0x2714>
   13b9c:	ldmib	r0, {r1, r2}
   13ba0:	ldr	r1, [r1, #24]
   13ba4:	str	r1, [r0, #24]
   13ba8:	cmp	r2, #0
   13bac:	mov	r0, r2
   13bb0:	bne	13b9c <__assert_fail@plt+0x2640>
   13bb4:	b	13c70 <__assert_fail@plt+0x2714>
   13bb8:	ldr	r0, [r6, #4]
   13bbc:	ldr	r1, [r0, #12]
   13bc0:	cmp	r1, #0
   13bc4:	beq	13cbc <__assert_fail@plt+0x2760>
   13bc8:	str	r0, [r4]
   13bcc:	ldr	r1, [r4, #24]
   13bd0:	ldr	r0, [r0, #40]	; 0x28
   13bd4:	mov	r5, #0
   13bd8:	strb	r5, [r1, r0]
   13bdc:	mov	r0, r4
   13be0:	mov	r1, #3
   13be4:	bl	141ec <__assert_fail@plt+0x2c90>
   13be8:	cmp	r0, #0
   13bec:	beq	13cb0 <__assert_fail@plt+0x2754>
   13bf0:	mov	r7, r0
   13bf4:	mov	r0, r6
   13bf8:	bl	12fdc <__assert_fail@plt+0x1a80>
   13bfc:	mov	r5, r7
   13c00:	b	13e00 <__assert_fail@plt+0x28a4>
   13c04:	mov	r0, r4
   13c08:	bl	14a08 <__assert_fail@plt+0x34ac>
   13c0c:	cmp	r0, #0
   13c10:	beq	13c24 <__assert_fail@plt+0x26c8>
   13c14:	ldr	r0, [r4, #48]	; 0x30
   13c18:	orr	r0, r0, #8192	; 0x2000
   13c1c:	str	r0, [r4, #48]	; 0x30
   13c20:	b	13ec0 <__assert_fail@plt+0x2964>
   13c24:	mov	r0, r4
   13c28:	bl	1393c <__assert_fail@plt+0x23e0>
   13c2c:	mov	r0, r4
   13c30:	mov	r1, r5
   13c34:	bl	14a64 <__assert_fail@plt+0x3508>
   13c38:	mov	r0, r4
   13c3c:	bl	136cc <__assert_fail@plt+0x2170>
   13c40:	b	13e3c <__assert_fail@plt+0x28e0>
   13c44:	bic	r1, r1, #4096	; 0x1000
   13c48:	str	r1, [r4, #48]	; 0x30
   13c4c:	bl	13788 <__assert_fail@plt+0x222c>
   13c50:	mov	r0, #0
   13c54:	str	r0, [r4, #4]
   13c58:	mov	r0, r4
   13c5c:	mov	r1, #3
   13c60:	bl	141ec <__assert_fail@plt+0x2c90>
   13c64:	str	r0, [r4, #4]
   13c68:	cmp	r0, #0
   13c6c:	beq	13c80 <__assert_fail@plt+0x2724>
   13c70:	ldr	r5, [r4, #4]
   13c74:	mov	r0, #0
   13c78:	str	r0, [r4, #4]
   13c7c:	b	13e00 <__assert_fail@plt+0x28a4>
   13c80:	ldrb	r0, [r4, #49]	; 0x31
   13c84:	tst	r0, #32
   13c88:	mov	r5, #0
   13c8c:	bne	13f1c <__assert_fail@plt+0x29c0>
   13c90:	ldr	r0, [r6, #32]
   13c94:	cmp	r0, #0
   13c98:	beq	13a74 <__assert_fail@plt+0x2518>
   13c9c:	ldrh	r0, [r6, #56]	; 0x38
   13ca0:	cmp	r0, #4
   13ca4:	beq	13a74 <__assert_fail@plt+0x2518>
   13ca8:	mov	r0, #7
   13cac:	b	13a70 <__assert_fail@plt+0x2514>
   13cb0:	ldrb	r0, [r4, #49]	; 0x31
   13cb4:	tst	r0, #32
   13cb8:	bne	13f1c <__assert_fail@plt+0x29c0>
   13cbc:	ldr	r5, [r6, #4]
   13cc0:	str	r5, [r4]
   13cc4:	mov	r0, r6
   13cc8:	bl	12fdc <__assert_fail@plt+0x1a80>
   13ccc:	ldr	r0, [r5, #48]	; 0x30
   13cd0:	cmn	r0, #1
   13cd4:	beq	13d38 <__assert_fail@plt+0x27dc>
   13cd8:	ldrh	r0, [r5, #56]	; 0x38
   13cdc:	cmp	r0, #11
   13ce0:	beq	13f24 <__assert_fail@plt+0x29c8>
   13ce4:	ldr	r0, [r5, #40]	; 0x28
   13ce8:	ldr	r1, [r4, #24]
   13cec:	mov	r2, #0
   13cf0:	strb	r2, [r1, r0]
   13cf4:	ldr	r0, [r5, #48]	; 0x30
   13cf8:	cmp	r0, #0
   13cfc:	beq	13d74 <__assert_fail@plt+0x2818>
   13d00:	ldrh	r0, [r5, #58]	; 0x3a
   13d04:	tst	r0, #2
   13d08:	bne	13da0 <__assert_fail@plt+0x2844>
   13d0c:	tst	r0, #1
   13d10:	bne	13ee0 <__assert_fail@plt+0x2984>
   13d14:	ldr	r1, [r5, #4]
   13d18:	movw	r3, #45188	; 0xb084
   13d1c:	movt	r3, #1
   13d20:	mov	r0, r4
   13d24:	mvn	r2, #0
   13d28:	bl	14004 <__assert_fail@plt+0x2aa8>
   13d2c:	cmp	r0, #0
   13d30:	bne	13d84 <__assert_fail@plt+0x2828>
   13d34:	b	13ee0 <__assert_fail@plt+0x2984>
   13d38:	mov	r0, r5
   13d3c:	bl	12fdc <__assert_fail@plt+0x1a80>
   13d40:	bl	1140c <__errno_location@plt>
   13d44:	mov	r5, #0
   13d48:	str	r5, [r0]
   13d4c:	str	r5, [r4]
   13d50:	mov	r0, r5
   13d54:	pop	{r4, r5, r6, r7, fp, pc}
   13d58:	bl	1140c <__errno_location@plt>
   13d5c:	ldr	r0, [r0]
   13d60:	mov	r1, #7
   13d64:	strh	r1, [r6, #56]	; 0x38
   13d68:	str	r0, [r6, #32]
   13d6c:	mov	r5, r6
   13d70:	b	13e3c <__assert_fail@plt+0x28e0>
   13d74:	mov	r0, r4
   13d78:	bl	14a08 <__assert_fail@plt+0x34ac>
   13d7c:	cmp	r0, #0
   13d80:	beq	13ee0 <__assert_fail@plt+0x2984>
   13d84:	bl	1140c <__errno_location@plt>
   13d88:	ldr	r0, [r0]
   13d8c:	str	r0, [r5, #32]
   13d90:	ldr	r0, [r4, #48]	; 0x30
   13d94:	orr	r0, r0, #8192	; 0x2000
   13d98:	str	r0, [r4, #48]	; 0x30
   13d9c:	b	13ee0 <__assert_fail@plt+0x2984>
   13da0:	ldr	r0, [r4, #48]	; 0x30
   13da4:	tst	r0, #4
   13da8:	bne	13ed8 <__assert_fail@plt+0x297c>
   13dac:	ldr	r1, [r5, #36]	; 0x24
   13db0:	tst	r0, #512	; 0x200
   13db4:	bne	13ecc <__assert_fail@plt+0x2970>
   13db8:	mov	r0, r1
   13dbc:	bl	114cc <fchdir@plt>
   13dc0:	cmp	r0, #0
   13dc4:	beq	13ed8 <__assert_fail@plt+0x297c>
   13dc8:	bl	1140c <__errno_location@plt>
   13dcc:	ldr	r0, [r0]
   13dd0:	str	r0, [r5, #32]
   13dd4:	ldr	r0, [r4, #48]	; 0x30
   13dd8:	orr	r0, r0, #8192	; 0x2000
   13ddc:	str	r0, [r4, #48]	; 0x30
   13de0:	b	13ed8 <__assert_fail@plt+0x297c>
   13de4:	bl	1140c <__errno_location@plt>
   13de8:	ldr	r0, [r0]
   13dec:	mov	r1, #7
   13df0:	strh	r1, [r5, #56]	; 0x38
   13df4:	str	r0, [r5, #32]
   13df8:	mov	r0, #3
   13dfc:	strh	r0, [r5, #60]	; 0x3c
   13e00:	ldr	r0, [r5, #4]
   13e04:	ldr	r1, [r0, #28]
   13e08:	ldr	r0, [r0, #40]	; 0x28
   13e0c:	sub	r2, r0, #1
   13e10:	ldrb	r1, [r1, r2]
   13e14:	cmp	r1, #47	; 0x2f
   13e18:	moveq	r0, r2
   13e1c:	ldr	r1, [r4, #24]
   13e20:	mov	r2, #47	; 0x2f
   13e24:	strb	r2, [r1, r0]!
   13e28:	add	r0, r1, #1
   13e2c:	add	r1, r5, #168	; 0xa8
   13e30:	ldr	r2, [r5, #52]	; 0x34
   13e34:	add	r2, r2, #1
   13e38:	bl	11280 <memmove@plt>
   13e3c:	str	r5, [r4]
   13e40:	ldrh	r0, [r5, #56]	; 0x38
   13e44:	cmp	r0, #11
   13e48:	bne	13e80 <__assert_fail@plt+0x2924>
   13e4c:	add	r0, r5, #112	; 0x70
   13e50:	ldrd	r0, [r0]
   13e54:	eor	r2, r0, #1
   13e58:	orrs	r2, r2, r1
   13e5c:	beq	13f1c <__assert_fail@plt+0x29c0>
   13e60:	eor	r0, r0, #2
   13e64:	orrs	r0, r0, r1
   13e68:	bne	13f24 <__assert_fail@plt+0x29c8>
   13e6c:	mov	r0, r4
   13e70:	mov	r1, r5
   13e74:	mov	r2, #0
   13e78:	bl	13488 <__assert_fail@plt+0x1f2c>
   13e7c:	strh	r0, [r5, #56]	; 0x38
   13e80:	cmp	r0, #1
   13e84:	bne	13f1c <__assert_fail@plt+0x29c0>
   13e88:	ldr	r0, [r5, #48]	; 0x30
   13e8c:	cmp	r0, #0
   13e90:	bne	13ea0 <__assert_fail@plt+0x2944>
   13e94:	add	r0, r5, #64	; 0x40
   13e98:	ldrd	r0, [r0]
   13e9c:	strd	r0, [r4, #16]
   13ea0:	mov	r0, r4
   13ea4:	mov	r1, r5
   13ea8:	bl	14aec <__assert_fail@plt+0x3590>
   13eac:	cmp	r0, #0
   13eb0:	bne	13f1c <__assert_fail@plt+0x29c0>
   13eb4:	bl	1140c <__errno_location@plt>
   13eb8:	mov	r1, #12
   13ebc:	str	r1, [r0]
   13ec0:	mov	r5, #0
   13ec4:	mov	r0, r5
   13ec8:	pop	{r4, r5, r6, r7, fp, pc}
   13ecc:	mov	r0, r4
   13ed0:	mov	r2, #1
   13ed4:	bl	14bac <__assert_fail@plt+0x3650>
   13ed8:	ldr	r0, [r5, #36]	; 0x24
   13edc:	bl	11520 <close@plt>
   13ee0:	ldrh	r0, [r5, #56]	; 0x38
   13ee4:	cmp	r0, #2
   13ee8:	beq	13f10 <__assert_fail@plt+0x29b4>
   13eec:	ldr	r0, [r5, #32]
   13ef0:	mov	r1, #7
   13ef4:	cmp	r0, #0
   13ef8:	movweq	r1, #6
   13efc:	strh	r1, [r5, #56]	; 0x38
   13f00:	bne	13f10 <__assert_fail@plt+0x29b4>
   13f04:	mov	r0, r4
   13f08:	mov	r1, r5
   13f0c:	bl	13f28 <__assert_fail@plt+0x29cc>
   13f10:	ldrb	r0, [r4, #49]	; 0x31
   13f14:	tst	r0, #32
   13f18:	movne	r5, #0
   13f1c:	mov	r0, r5
   13f20:	pop	{r4, r5, r6, r7, fp, pc}
   13f24:	bl	11514 <abort@plt>
   13f28:	push	{r4, r5, r7, sl, fp, lr}
   13f2c:	add	fp, sp, #16
   13f30:	sub	sp, sp, #24
   13f34:	add	lr, r1, #64	; 0x40
   13f38:	add	r4, r1, #160	; 0xa0
   13f3c:	ldrh	r2, [r0, #48]	; 0x30
   13f40:	movw	r3, #258	; 0x102
   13f44:	tst	r2, r3
   13f48:	beq	13f80 <__assert_fail@plt+0x2a24>
   13f4c:	ldrd	r2, [lr]
   13f50:	stm	sp, {r2, r3}
   13f54:	ldrd	r2, [r4]
   13f58:	str	r3, [sp, #12]
   13f5c:	str	r2, [sp, #8]
   13f60:	ldr	r0, [r0, #56]	; 0x38
   13f64:	mov	r1, sp
   13f68:	bl	15e88 <__assert_fail@plt+0x492c>
   13f6c:	cmp	r0, #0
   13f70:	beq	14000 <__assert_fail@plt+0x2aa4>
   13f74:	bl	12fdc <__assert_fail@plt+0x1a80>
   13f78:	sub	sp, fp, #16
   13f7c:	pop	{r4, r5, r7, sl, fp, pc}
   13f80:	ldr	r1, [r1, #4]
   13f84:	cmp	r1, #0
   13f88:	beq	13ff8 <__assert_fail@plt+0x2a9c>
   13f8c:	ldr	r2, [r1, #48]	; 0x30
   13f90:	cmp	r2, #0
   13f94:	bmi	13ff8 <__assert_fail@plt+0x2a9c>
   13f98:	ldr	ip, [r0, #56]	; 0x38
   13f9c:	ldrd	r2, [ip, #16]
   13fa0:	orrs	r2, r2, r3
   13fa4:	beq	14000 <__assert_fail@plt+0x2aa4>
   13fa8:	ldrd	r2, [r4]
   13fac:	ldrd	r4, [ip]
   13fb0:	eor	r3, r5, r3
   13fb4:	eor	r2, r4, r2
   13fb8:	orrs	r2, r2, r3
   13fbc:	bne	13ff8 <__assert_fail@plt+0x2a9c>
   13fc0:	add	r3, ip, #8
   13fc4:	ldm	lr, {r2, r5}
   13fc8:	ldm	r3, {r4, r7}
   13fcc:	eor	r7, r7, r5
   13fd0:	eor	r2, r4, r2
   13fd4:	orrs	r2, r2, r7
   13fd8:	bne	13ff8 <__assert_fail@plt+0x2a9c>
   13fdc:	add	r2, r1, #64	; 0x40
   13fe0:	add	r1, r1, #160	; 0xa0
   13fe4:	ldm	r2, {r2, r5}
   13fe8:	stm	r3, {r2, r5}
   13fec:	ldr	r0, [r0, #56]	; 0x38
   13ff0:	ldrd	r2, [r1]
   13ff4:	strd	r2, [r0]
   13ff8:	sub	sp, fp, #16
   13ffc:	pop	{r4, r5, r7, sl, fp, pc}
   14000:	bl	11514 <abort@plt>
   14004:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14008:	add	fp, sp, #24
   1400c:	sub	sp, sp, #104	; 0x68
   14010:	mov	r7, r3
   14014:	mov	r4, r2
   14018:	mov	r8, r1
   1401c:	mov	r5, r0
   14020:	cmp	r3, #0
   14024:	beq	14048 <__assert_fail@plt+0x2aec>
   14028:	movw	r1, #45188	; 0xb084
   1402c:	movt	r1, #1
   14030:	mov	r0, r7
   14034:	bl	1125c <strcmp@plt>
   14038:	mov	r6, r0
   1403c:	cmp	r0, #0
   14040:	movwne	r6, #1
   14044:	b	1404c <__assert_fail@plt+0x2af0>
   14048:	mov	r6, #1
   1404c:	ldr	r0, [r5, #48]	; 0x30
   14050:	tst	r0, #4
   14054:	bne	140ac <__assert_fail@plt+0x2b50>
   14058:	mov	r9, #0
   1405c:	cmn	r4, #1
   14060:	mov	r1, #0
   14064:	movwgt	r1, #1
   14068:	orrs	r1, r1, r6
   1406c:	bne	140cc <__assert_fail@plt+0x2b70>
   14070:	ands	r0, r0, #512	; 0x200
   14074:	beq	140cc <__assert_fail@plt+0x2b70>
   14078:	add	r4, r5, #60	; 0x3c
   1407c:	mov	r0, r4
   14080:	bl	16080 <__assert_fail@plt+0x4b24>
   14084:	cmp	r0, #0
   14088:	bne	140d4 <__assert_fail@plt+0x2b78>
   1408c:	mov	r0, r4
   14090:	bl	160cc <__assert_fail@plt+0x4b70>
   14094:	cmn	r0, #1
   14098:	ble	140d4 <__assert_fail@plt+0x2b78>
   1409c:	mov	r4, r0
   140a0:	mov	r9, #0
   140a4:	mov	r7, #0
   140a8:	b	140f0 <__assert_fail@plt+0x2b94>
   140ac:	mov	r5, #0
   140b0:	cmp	r4, #0
   140b4:	bmi	141e0 <__assert_fail@plt+0x2c84>
   140b8:	ands	r0, r0, #512	; 0x200
   140bc:	beq	141e0 <__assert_fail@plt+0x2c84>
   140c0:	mov	r0, r4
   140c4:	bl	11520 <close@plt>
   140c8:	b	141e0 <__assert_fail@plt+0x2c84>
   140cc:	cmn	r4, #1
   140d0:	bgt	140f0 <__assert_fail@plt+0x2b94>
   140d4:	mov	r0, r5
   140d8:	mov	r1, r7
   140dc:	bl	13758 <__assert_fail@plt+0x21fc>
   140e0:	cmp	r0, #0
   140e4:	bmi	14190 <__assert_fail@plt+0x2c34>
   140e8:	mov	r4, r0
   140ec:	mov	r9, #1
   140f0:	ldrb	r0, [r5, #48]	; 0x30
   140f4:	tst	r0, #2
   140f8:	bne	1411c <__assert_fail@plt+0x2bc0>
   140fc:	cmp	r7, #0
   14100:	beq	1416c <__assert_fail@plt+0x2c10>
   14104:	movw	r1, #45188	; 0xb084
   14108:	movt	r1, #1
   1410c:	mov	r0, r7
   14110:	bl	1125c <strcmp@plt>
   14114:	cmp	r0, #0
   14118:	bne	1416c <__assert_fail@plt+0x2c10>
   1411c:	mov	r1, sp
   14120:	mov	r0, r4
   14124:	bl	19f6c <__assert_fail@plt+0x8a10>
   14128:	cmp	r0, #0
   1412c:	bne	141bc <__assert_fail@plt+0x2c60>
   14130:	add	r0, r8, #64	; 0x40
   14134:	ldrd	r0, [r0]
   14138:	ldm	sp, {r2, r3}
   1413c:	eor	r1, r1, r3
   14140:	eor	r0, r0, r2
   14144:	orrs	r0, r0, r1
   14148:	bne	141b0 <__assert_fail@plt+0x2c54>
   1414c:	add	r0, r8, #160	; 0xa0
   14150:	ldrd	r0, [r0]
   14154:	ldr	r2, [sp, #96]	; 0x60
   14158:	ldr	r3, [sp, #100]	; 0x64
   1415c:	eor	r1, r1, r3
   14160:	eor	r0, r0, r2
   14164:	orrs	r0, r0, r1
   14168:	bne	141b0 <__assert_fail@plt+0x2c54>
   1416c:	ldrb	r0, [r5, #49]	; 0x31
   14170:	tst	r0, #2
   14174:	bne	14198 <__assert_fail@plt+0x2c3c>
   14178:	mov	r0, r4
   1417c:	bl	114cc <fchdir@plt>
   14180:	mov	r5, r0
   14184:	cmp	r9, #0
   14188:	bne	141c8 <__assert_fail@plt+0x2c6c>
   1418c:	b	141e0 <__assert_fail@plt+0x2c84>
   14190:	mvn	r5, #0
   14194:	b	141e0 <__assert_fail@plt+0x2c84>
   14198:	mov	r0, r5
   1419c:	mov	r1, r4
   141a0:	mov	r2, r6
   141a4:	bl	14bac <__assert_fail@plt+0x3650>
   141a8:	mov	r5, #0
   141ac:	b	141e0 <__assert_fail@plt+0x2c84>
   141b0:	bl	1140c <__errno_location@plt>
   141b4:	mov	r1, #2
   141b8:	str	r1, [r0]
   141bc:	mvn	r5, #0
   141c0:	cmp	r9, #0
   141c4:	beq	141e0 <__assert_fail@plt+0x2c84>
   141c8:	bl	1140c <__errno_location@plt>
   141cc:	mov	r6, r0
   141d0:	ldr	r7, [r0]
   141d4:	mov	r0, r4
   141d8:	bl	11520 <close@plt>
   141dc:	str	r7, [r6]
   141e0:	mov	r0, r5
   141e4:	sub	sp, fp, #24
   141e8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   141ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141f0:	add	fp, sp, #28
   141f4:	sub	sp, sp, #68	; 0x44
   141f8:	mov	r4, r1
   141fc:	mov	r6, r0
   14200:	ldr	sl, [r0]
   14204:	ldr	r7, [sl, #12]
   14208:	cmp	r7, #0
   1420c:	beq	14568 <__assert_fail@plt+0x300c>
   14210:	mov	r0, r7
   14214:	bl	114c0 <dirfd@plt>
   14218:	str	r0, [fp, #-32]	; 0xffffffe0
   1421c:	cmn	r0, #1
   14220:	ble	1459c <__assert_fail@plt+0x3040>
   14224:	mov	r1, r6
   14228:	ldr	r0, [r1, #44]!	; 0x2c
   1422c:	str	r1, [fp, #-40]	; 0xffffffd8
   14230:	mvn	r1, #0
   14234:	cmp	r0, #0
   14238:	movweq	r1, #34464	; 0x86a0
   1423c:	movteq	r1, #1
   14240:	str	r1, [sp, #28]
   14244:	mov	r0, #1
   14248:	str	r0, [sp, #4]
   1424c:	str	r4, [sp, #8]
   14250:	ldr	r1, [sl, #28]
   14254:	ldr	r0, [sl, #40]	; 0x28
   14258:	sub	r2, r0, #1
   1425c:	ldrb	r1, [r1, r2]
   14260:	cmp	r1, #47	; 0x2f
   14264:	moveq	r0, r2
   14268:	ldrb	r1, [r6, #48]	; 0x30
   1426c:	mov	r9, #0
   14270:	tst	r1, #4
   14274:	mov	r1, #0
   14278:	str	r1, [sp, #44]	; 0x2c
   1427c:	beq	14294 <__assert_fail@plt+0x2d38>
   14280:	ldr	r1, [r6, #24]
   14284:	mov	r2, #47	; 0x2f
   14288:	strb	r2, [r1, r0]!
   1428c:	add	r1, r1, #1
   14290:	str	r1, [sp, #44]	; 0x2c
   14294:	add	r1, r0, #1
   14298:	ldr	r4, [sl, #12]
   1429c:	cmp	r4, #0
   142a0:	str	r1, [fp, #-36]	; 0xffffffdc
   142a4:	str	r7, [sp, #12]
   142a8:	beq	145b8 <__assert_fail@plt+0x305c>
   142ac:	ldr	r0, [sl, #48]	; 0x30
   142b0:	add	r0, r0, #1
   142b4:	str	r0, [sp, #24]
   142b8:	str	r6, [sp, #36]	; 0x24
   142bc:	ldr	r0, [r6, #36]	; 0x24
   142c0:	sub	r0, r0, r1
   142c4:	str	r0, [sp, #48]	; 0x30
   142c8:	mov	r6, #0
   142cc:	bl	1140c <__errno_location@plt>
   142d0:	str	r0, [sp, #40]	; 0x28
   142d4:	mov	r9, #0
   142d8:	mov	r7, #0
   142dc:	mov	r0, #0
   142e0:	str	r0, [fp, #-44]	; 0xffffffd4
   142e4:	mov	r0, #0
   142e8:	str	r0, [sp, #20]
   142ec:	mov	r0, #0
   142f0:	str	r0, [sp, #16]
   142f4:	str	sl, [sp, #32]
   142f8:	ldr	r0, [sp, #40]	; 0x28
   142fc:	str	r6, [r0]
   14300:	mov	r0, r4
   14304:	bl	114a8 <readdir64@plt>
   14308:	cmp	r0, #0
   1430c:	beq	147e8 <__assert_fail@plt+0x328c>
   14310:	mov	r8, r0
   14314:	mov	r5, r9
   14318:	ldr	r6, [sp, #36]	; 0x24
   1431c:	ldrb	r0, [r6, #48]	; 0x30
   14320:	tst	r0, #32
   14324:	bne	14354 <__assert_fail@plt+0x2df8>
   14328:	ldrb	r0, [r8, #19]
   1432c:	cmp	r0, #46	; 0x2e
   14330:	bne	14354 <__assert_fail@plt+0x2df8>
   14334:	ldrb	r0, [r8, #20]
   14338:	cmp	r0, #0
   1433c:	beq	14558 <__assert_fail@plt+0x2ffc>
   14340:	cmp	r0, #46	; 0x2e
   14344:	bne	14354 <__assert_fail@plt+0x2df8>
   14348:	ldrb	r0, [r8, #21]
   1434c:	cmp	r0, #0
   14350:	beq	14558 <__assert_fail@plt+0x2ffc>
   14354:	add	r4, r8, #19
   14358:	mov	r0, r4
   1435c:	bl	113dc <strlen@plt>
   14360:	mov	sl, r0
   14364:	mov	r0, r6
   14368:	mov	r1, r4
   1436c:	mov	r2, sl
   14370:	bl	133d4 <__assert_fail@plt+0x1e78>
   14374:	mov	r9, r0
   14378:	cmp	r0, #0
   1437c:	beq	145cc <__assert_fail@plt+0x3070>
   14380:	ldr	r0, [sp, #48]	; 0x30
   14384:	cmp	sl, r0
   14388:	bcs	1439c <__assert_fail@plt+0x2e40>
   1438c:	ldr	r2, [fp, #-36]	; 0xffffffdc
   14390:	adds	r0, sl, r2
   14394:	bcc	14404 <__assert_fail@plt+0x2ea8>
   14398:	b	14844 <__assert_fail@plt+0x32e8>
   1439c:	ldr	r0, [fp, #-36]	; 0xffffffdc
   143a0:	add	r0, sl, r0
   143a4:	add	r1, r0, #1
   143a8:	ldr	r4, [r6, #24]
   143ac:	mov	r0, r6
   143b0:	bl	13358 <__assert_fail@plt+0x1dfc>
   143b4:	cmp	r0, #0
   143b8:	beq	145cc <__assert_fail@plt+0x3070>
   143bc:	ldr	r0, [r6, #24]
   143c0:	cmp	r4, r0
   143c4:	beq	143ec <__assert_fail@plt+0x2e90>
   143c8:	ldrb	r1, [r6, #48]	; 0x30
   143cc:	tst	r1, #4
   143d0:	ldr	r1, [sp, #44]	; 0x2c
   143d4:	ldr	r2, [fp, #-36]	; 0xffffffdc
   143d8:	addne	r1, r0, r2
   143dc:	str	r1, [sp, #44]	; 0x2c
   143e0:	mov	r0, #1
   143e4:	str	r0, [sp, #16]
   143e8:	b	143f0 <__assert_fail@plt+0x2e94>
   143ec:	ldr	r2, [fp, #-36]	; 0xffffffdc
   143f0:	ldr	r0, [r6, #36]	; 0x24
   143f4:	sub	r0, r0, r2
   143f8:	str	r0, [sp, #48]	; 0x30
   143fc:	adds	r0, sl, r2
   14400:	bcs	14844 <__assert_fail@plt+0x32e8>
   14404:	ldr	r1, [sp, #24]
   14408:	str	r1, [r9, #48]	; 0x30
   1440c:	ldr	r1, [r6]
   14410:	str	r0, [r9, #40]	; 0x28
   14414:	str	r1, [r9, #4]
   14418:	ldrd	r0, [r8]
   1441c:	strd	r0, [r9, #160]	; 0xa0
   14420:	ldrb	r0, [r6, #48]	; 0x30
   14424:	tst	r0, #4
   14428:	bne	14438 <__assert_fail@plt+0x2edc>
   1442c:	add	r0, r9, #168	; 0xa8
   14430:	str	r0, [r9, #24]
   14434:	b	14454 <__assert_fail@plt+0x2ef8>
   14438:	ldr	r0, [r9, #28]
   1443c:	ldr	r2, [r9, #52]	; 0x34
   14440:	str	r0, [r9, #24]
   14444:	add	r1, r9, #168	; 0xa8
   14448:	add	r2, r2, #1
   1444c:	ldr	r0, [sp, #44]	; 0x2c
   14450:	bl	11280 <memmove@plt>
   14454:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14458:	ldr	r0, [r0]
   1445c:	cmp	r0, #0
   14460:	beq	1448c <__assert_fail@plt+0x2f30>
   14464:	ldrb	r0, [r6, #49]	; 0x31
   14468:	tst	r0, #4
   1446c:	bne	1448c <__assert_fail@plt+0x2f30>
   14470:	mov	r0, r6
   14474:	mov	r1, r9
   14478:	mov	r2, #0
   1447c:	bl	13488 <__assert_fail@plt+0x1f2c>
   14480:	strh	r0, [r9, #56]	; 0x38
   14484:	ldr	sl, [sp, #32]
   14488:	b	144e8 <__assert_fail@plt+0x2f8c>
   1448c:	add	r0, r9, #64	; 0x40
   14490:	ldr	r1, [r6, #48]	; 0x30
   14494:	mov	r4, #0
   14498:	tst	r1, #8
   1449c:	bne	144a8 <__assert_fail@plt+0x2f4c>
   144a0:	ldr	sl, [sp, #32]
   144a4:	b	144cc <__assert_fail@plt+0x2f70>
   144a8:	ldrb	r2, [r8, #18]
   144ac:	orr	r3, r2, #4
   144b0:	cmp	r3, #4
   144b4:	ldr	sl, [sp, #32]
   144b8:	beq	144cc <__assert_fail@plt+0x2f70>
   144bc:	eor	r2, r2, #10
   144c0:	and	r1, r1, #16
   144c4:	orrs	r4, r1, r2
   144c8:	movwne	r4, #1
   144cc:	mov	r1, #11
   144d0:	strh	r1, [r9, #56]	; 0x38
   144d4:	ldrb	r1, [r8, #18]
   144d8:	bl	14e7c <__assert_fail@plt+0x3920>
   144dc:	eor	r1, r4, #1
   144e0:	mov	r0, r9
   144e4:	bl	13458 <__assert_fail@plt+0x1efc>
   144e8:	mov	r6, #0
   144ec:	str	r6, [r9, #8]
   144f0:	cmp	r5, #0
   144f4:	mov	r4, r9
   144f8:	ldrne	r0, [fp, #-44]	; 0xffffffd4
   144fc:	strne	r9, [r0, #8]
   14500:	movne	r4, r5
   14504:	movw	r0, #10000	; 0x2710
   14508:	cmp	r7, r0
   1450c:	bne	14530 <__assert_fail@plt+0x2fd4>
   14510:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14514:	ldr	r0, [r0]
   14518:	cmp	r0, #0
   1451c:	bne	14530 <__assert_fail@plt+0x2fd4>
   14520:	ldr	r1, [fp, #-32]	; 0xffffffe0
   14524:	mov	r0, sl
   14528:	bl	14ea0 <__assert_fail@plt+0x3944>
   1452c:	str	r0, [sp, #20]
   14530:	add	r7, r7, #1
   14534:	ldr	r0, [sp, #28]
   14538:	cmp	r0, r7
   1453c:	bls	1488c <__assert_fail@plt+0x3330>
   14540:	str	r9, [fp, #-44]	; 0xffffffd4
   14544:	mov	r9, r4
   14548:	ldr	r4, [sl, #12]
   1454c:	cmp	r4, #0
   14550:	bne	142f8 <__assert_fail@plt+0x2d9c>
   14554:	b	14838 <__assert_fail@plt+0x32dc>
   14558:	ldr	sl, [sp, #32]
   1455c:	mov	r9, r5
   14560:	mov	r6, #0
   14564:	b	14548 <__assert_fail@plt+0x2fec>
   14568:	ldr	r3, [r6, #48]	; 0x30
   1456c:	and	r1, r3, #516	; 0x204
   14570:	mvn	r0, #99	; 0x63
   14574:	cmp	r1, #512	; 0x200
   14578:	ldreq	r0, [r6, #32]
   1457c:	ldr	r1, [sl, #24]
   14580:	mov	r2, #0
   14584:	tst	r3, #16
   14588:	beq	14620 <__assert_fail@plt+0x30c4>
   1458c:	tst	r3, #1
   14590:	bne	14614 <__assert_fail@plt+0x30b8>
   14594:	mov	r2, #32768	; 0x8000
   14598:	b	14620 <__assert_fail@plt+0x30c4>
   1459c:	ldr	r0, [sl, #12]
   145a0:	bl	11538 <closedir@plt>
   145a4:	mov	r9, #0
   145a8:	str	r9, [sl, #12]
   145ac:	cmp	r4, #3
   145b0:	beq	14664 <__assert_fail@plt+0x3108>
   145b4:	b	149fc <__assert_fail@plt+0x34a0>
   145b8:	mov	r7, #0
   145bc:	mov	r0, #0
   145c0:	str	r0, [sp, #20]
   145c4:	ldr	r4, [sp, #8]
   145c8:	b	148ac <__assert_fail@plt+0x3350>
   145cc:	ldr	r7, [sp, #40]	; 0x28
   145d0:	ldr	r4, [r7]
   145d4:	mov	r0, r9
   145d8:	bl	12fdc <__assert_fail@plt+0x1a80>
   145dc:	mov	r0, r5
   145e0:	bl	13788 <__assert_fail@plt+0x222c>
   145e4:	ldr	r5, [sp, #32]
   145e8:	ldr	r0, [r5, #12]
   145ec:	bl	11538 <closedir@plt>
   145f0:	mov	r0, #7
   145f4:	strh	r0, [r5, #56]	; 0x38
   145f8:	mov	r9, #0
   145fc:	str	r9, [r5, #12]
   14600:	ldr	r0, [r6, #48]	; 0x30
   14604:	orr	r0, r0, #8192	; 0x2000
   14608:	str	r0, [r6, #48]	; 0x30
   1460c:	str	r4, [r7]
   14610:	b	149fc <__assert_fail@plt+0x34a0>
   14614:	ldr	r3, [sl, #48]	; 0x30
   14618:	cmp	r3, #0
   1461c:	movne	r2, #32768	; 0x8000
   14620:	sub	r3, fp, #32
   14624:	bl	161b0 <__assert_fail@plt+0x4c54>
   14628:	str	r0, [sl, #12]
   1462c:	cmp	r0, #0
   14630:	beq	14658 <__assert_fail@plt+0x30fc>
   14634:	ldrh	r0, [sl, #56]	; 0x38
   14638:	cmp	r0, #11
   1463c:	bne	1467c <__assert_fail@plt+0x3120>
   14640:	mov	r0, r6
   14644:	mov	r1, sl
   14648:	mov	r2, #0
   1464c:	bl	13488 <__assert_fail@plt+0x1f2c>
   14650:	strh	r0, [sl, #56]	; 0x38
   14654:	b	146bc <__assert_fail@plt+0x3160>
   14658:	mov	r9, #0
   1465c:	cmp	r4, #3
   14660:	bne	149fc <__assert_fail@plt+0x34a0>
   14664:	mov	r0, #4
   14668:	strh	r0, [sl, #56]	; 0x38
   1466c:	bl	1140c <__errno_location@plt>
   14670:	ldr	r0, [r0]
   14674:	str	r0, [sl, #32]
   14678:	b	149fc <__assert_fail@plt+0x34a0>
   1467c:	ldrb	r0, [r6, #49]	; 0x31
   14680:	tst	r0, #1
   14684:	beq	146bc <__assert_fail@plt+0x3160>
   14688:	mov	r0, r6
   1468c:	mov	r1, sl
   14690:	bl	13f28 <__assert_fail@plt+0x29cc>
   14694:	mov	r9, #0
   14698:	mov	r0, r6
   1469c:	mov	r1, sl
   146a0:	mov	r2, #0
   146a4:	bl	13488 <__assert_fail@plt+0x1f2c>
   146a8:	mov	r0, r6
   146ac:	mov	r1, sl
   146b0:	bl	14aec <__assert_fail@plt+0x3590>
   146b4:	cmp	r0, #0
   146b8:	beq	149bc <__assert_fail@plt+0x3460>
   146bc:	mov	r1, r6
   146c0:	ldr	r0, [r1, #44]!	; 0x2c
   146c4:	str	r1, [fp, #-40]	; 0xffffffd8
   146c8:	mvn	r1, #0
   146cc:	cmp	r0, #0
   146d0:	movweq	r1, #34464	; 0x86a0
   146d4:	movteq	r1, #1
   146d8:	str	r1, [sp, #28]
   146dc:	mov	r5, #0
   146e0:	cmp	r4, #2
   146e4:	beq	14720 <__assert_fail@plt+0x31c4>
   146e8:	ldr	r0, [r6, #48]	; 0x30
   146ec:	and	r1, r0, #56	; 0x38
   146f0:	mov	r0, #0
   146f4:	cmp	r1, #24
   146f8:	bne	1471c <__assert_fail@plt+0x31c0>
   146fc:	ldr	r1, [sl, #84]	; 0x54
   14700:	cmp	r1, #2
   14704:	bne	1471c <__assert_fail@plt+0x31c0>
   14708:	ldr	r1, [fp, #-32]	; 0xffffffe0
   1470c:	mov	r0, sl
   14710:	bl	14e14 <__assert_fail@plt+0x38b8>
   14714:	cmp	r0, #0
   14718:	movwne	r0, #1
   1471c:	eor	r5, r0, #1
   14720:	cmp	r4, #3
   14724:	beq	14738 <__assert_fail@plt+0x31dc>
   14728:	cmp	r5, #0
   1472c:	bne	14738 <__assert_fail@plt+0x31dc>
   14730:	str	r5, [sp, #4]
   14734:	b	1424c <__assert_fail@plt+0x2cf0>
   14738:	ldrb	r0, [r6, #49]	; 0x31
   1473c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   14740:	tst	r0, #2
   14744:	beq	14760 <__assert_fail@plt+0x3204>
   14748:	mov	r0, r2
   1474c:	movw	r1, #1030	; 0x406
   14750:	mov	r2, #3
   14754:	bl	197f8 <__assert_fail@plt+0x829c>
   14758:	mov	r2, r0
   1475c:	str	r0, [fp, #-32]	; 0xffffffe0
   14760:	cmp	r2, #0
   14764:	bmi	14780 <__assert_fail@plt+0x3224>
   14768:	mov	r0, r6
   1476c:	mov	r1, sl
   14770:	mov	r3, #0
   14774:	bl	14004 <__assert_fail@plt+0x2aa8>
   14778:	cmp	r0, #0
   1477c:	beq	14244 <__assert_fail@plt+0x2ce8>
   14780:	subs	r0, r4, #3
   14784:	movwne	r0, #1
   14788:	eor	r1, r5, #1
   1478c:	orrs	r0, r0, r1
   14790:	bne	147a0 <__assert_fail@plt+0x3244>
   14794:	bl	1140c <__errno_location@plt>
   14798:	ldr	r0, [r0]
   1479c:	str	r0, [sl, #32]
   147a0:	ldrh	r0, [sl, #58]	; 0x3a
   147a4:	orr	r0, r0, #1
   147a8:	strh	r0, [sl, #58]	; 0x3a
   147ac:	ldr	r0, [sl, #12]
   147b0:	bl	11538 <closedir@plt>
   147b4:	mov	r5, #0
   147b8:	str	r5, [sl, #12]
   147bc:	ldrb	r0, [r6, #49]	; 0x31
   147c0:	tst	r0, #2
   147c4:	beq	147d8 <__assert_fail@plt+0x327c>
   147c8:	ldr	r0, [fp, #-32]	; 0xffffffe0
   147cc:	cmp	r0, #0
   147d0:	bmi	147d8 <__assert_fail@plt+0x327c>
   147d4:	bl	11520 <close@plt>
   147d8:	mov	r0, #0
   147dc:	str	r0, [sp, #4]
   147e0:	str	r5, [sl, #12]
   147e4:	b	1424c <__assert_fail@plt+0x2cf0>
   147e8:	ldr	r0, [sp, #40]	; 0x28
   147ec:	ldr	r0, [r0]
   147f0:	cmp	r0, #0
   147f4:	beq	14810 <__assert_fail@plt+0x32b4>
   147f8:	str	r0, [sl, #32]
   147fc:	ldr	r0, [sp, #12]
   14800:	orrs	r0, r0, r7
   14804:	mov	r0, #4
   14808:	movwne	r0, #7
   1480c:	strh	r0, [sl, #56]	; 0x38
   14810:	ldr	r0, [sl, #12]
   14814:	cmp	r0, #0
   14818:	ldr	r4, [sp, #8]
   1481c:	beq	1482c <__assert_fail@plt+0x32d0>
   14820:	bl	11538 <closedir@plt>
   14824:	mov	r0, #0
   14828:	str	r0, [sl, #12]
   1482c:	ldr	r0, [sp, #16]
   14830:	tst	r0, #1
   14834:	b	1489c <__assert_fail@plt+0x3340>
   14838:	ldr	r0, [sp, #16]
   1483c:	tst	r0, #1
   14840:	b	14898 <__assert_fail@plt+0x333c>
   14844:	mov	r0, r9
   14848:	bl	12fdc <__assert_fail@plt+0x1a80>
   1484c:	mov	r0, r5
   14850:	bl	13788 <__assert_fail@plt+0x222c>
   14854:	ldr	r4, [sp, #32]
   14858:	ldr	r0, [r4, #12]
   1485c:	bl	11538 <closedir@plt>
   14860:	mov	r0, #7
   14864:	strh	r0, [r4, #56]	; 0x38
   14868:	mov	r9, #0
   1486c:	str	r9, [r4, #12]
   14870:	ldr	r0, [r6, #48]	; 0x30
   14874:	orr	r0, r0, #8192	; 0x2000
   14878:	str	r0, [r6, #48]	; 0x30
   1487c:	mov	r0, #36	; 0x24
   14880:	ldr	r1, [sp, #40]	; 0x28
   14884:	str	r0, [r1]
   14888:	b	149fc <__assert_fail@plt+0x34a0>
   1488c:	ldr	r0, [sp, #16]
   14890:	tst	r0, #1
   14894:	mov	r9, r4
   14898:	ldr	r4, [sp, #8]
   1489c:	ldr	r6, [sp, #36]	; 0x24
   148a0:	movne	r0, r6
   148a4:	movne	r1, r9
   148a8:	blne	14ee4 <__assert_fail@plt+0x3988>
   148ac:	ldrb	r0, [r6, #48]	; 0x30
   148b0:	tst	r0, #4
   148b4:	beq	148e0 <__assert_fail@plt+0x3384>
   148b8:	ldr	r0, [r6, #36]	; 0x24
   148bc:	ldr	r2, [sp, #44]	; 0x2c
   148c0:	sub	r1, r2, #1
   148c4:	ldr	r3, [fp, #-36]	; 0xffffffdc
   148c8:	cmp	r3, r0
   148cc:	moveq	r2, r1
   148d0:	cmp	r7, #0
   148d4:	moveq	r2, r1
   148d8:	mov	r0, #0
   148dc:	strb	r0, [r2]
   148e0:	ldr	r0, [sp, #12]
   148e4:	cmp	r0, #0
   148e8:	ldreq	r0, [sp, #4]
   148ec:	eorseq	r0, r0, #1
   148f0:	beq	1491c <__assert_fail@plt+0x33c0>
   148f4:	cmp	r7, #0
   148f8:	bne	14958 <__assert_fail@plt+0x33fc>
   148fc:	cmp	r4, #3
   14900:	bne	149f0 <__assert_fail@plt+0x3494>
   14904:	ldrh	r0, [sl, #56]	; 0x38
   14908:	cmp	r0, #4
   1490c:	cmpne	r0, #7
   14910:	movne	r0, #6
   14914:	strhne	r0, [sl, #56]	; 0x38
   14918:	b	149f0 <__assert_fail@plt+0x3494>
   1491c:	cmp	r4, #1
   14920:	cmpne	r7, #0
   14924:	bne	14958 <__assert_fail@plt+0x33fc>
   14928:	ldr	r0, [sl, #48]	; 0x30
   1492c:	cmp	r0, #0
   14930:	beq	149cc <__assert_fail@plt+0x3470>
   14934:	ldr	r1, [sl, #4]
   14938:	movw	r3, #45188	; 0xb084
   1493c:	movt	r3, #1
   14940:	mov	r0, r6
   14944:	mvn	r2, #0
   14948:	bl	14004 <__assert_fail@plt+0x2aa8>
   1494c:	cmp	r0, #0
   14950:	bne	149dc <__assert_fail@plt+0x3480>
   14954:	b	148f4 <__assert_fail@plt+0x3398>
   14958:	ldr	r0, [sp, #20]
   1495c:	tst	r0, #1
   14960:	beq	1498c <__assert_fail@plt+0x3430>
   14964:	movw	r0, #20356	; 0x4f84
   14968:	movt	r0, #1
   1496c:	str	r0, [r6, #44]	; 0x2c
   14970:	mov	r0, r6
   14974:	mov	r1, r9
   14978:	mov	r2, r7
   1497c:	bl	135fc <__assert_fail@plt+0x20a0>
   14980:	mov	r9, r0
   14984:	mov	r0, #0
   14988:	str	r0, [r6, #44]	; 0x2c
   1498c:	cmp	r7, #2
   14990:	bcc	149fc <__assert_fail@plt+0x34a0>
   14994:	ldr	r0, [fp, #-40]	; 0xffffffd8
   14998:	ldr	r0, [r0]
   1499c:	cmp	r0, #0
   149a0:	beq	149fc <__assert_fail@plt+0x34a0>
   149a4:	mov	r0, r6
   149a8:	mov	r1, r9
   149ac:	mov	r2, r7
   149b0:	bl	135fc <__assert_fail@plt+0x20a0>
   149b4:	mov	r9, r0
   149b8:	b	149fc <__assert_fail@plt+0x34a0>
   149bc:	bl	1140c <__errno_location@plt>
   149c0:	mov	r1, #12
   149c4:	str	r1, [r0]
   149c8:	b	149fc <__assert_fail@plt+0x34a0>
   149cc:	mov	r0, r6
   149d0:	bl	14a08 <__assert_fail@plt+0x34ac>
   149d4:	cmp	r0, #0
   149d8:	beq	148f4 <__assert_fail@plt+0x3398>
   149dc:	mov	r0, #7
   149e0:	strh	r0, [sl, #56]	; 0x38
   149e4:	ldr	r0, [r6, #48]	; 0x30
   149e8:	orr	r0, r0, #8192	; 0x2000
   149ec:	str	r0, [r6, #48]	; 0x30
   149f0:	mov	r0, r9
   149f4:	bl	13788 <__assert_fail@plt+0x222c>
   149f8:	mov	r9, #0
   149fc:	mov	r0, r9
   14a00:	sub	sp, fp, #28
   14a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a08:	push	{r4, r5, fp, lr}
   14a0c:	add	fp, sp, #8
   14a10:	mov	r4, r0
   14a14:	ldr	r0, [r0, #48]	; 0x30
   14a18:	mov	r5, #0
   14a1c:	tst	r0, #4
   14a20:	bne	14a54 <__assert_fail@plt+0x34f8>
   14a24:	tst	r0, #512	; 0x200
   14a28:	bne	14a44 <__assert_fail@plt+0x34e8>
   14a2c:	ldr	r0, [r4, #28]
   14a30:	bl	114cc <fchdir@plt>
   14a34:	mov	r5, r0
   14a38:	cmp	r0, #0
   14a3c:	movwne	r5, #1
   14a40:	b	14a54 <__assert_fail@plt+0x34f8>
   14a44:	mov	r0, r4
   14a48:	mvn	r1, #99	; 0x63
   14a4c:	mov	r2, #1
   14a50:	bl	14bac <__assert_fail@plt+0x3650>
   14a54:	add	r0, r4, #60	; 0x3c
   14a58:	bl	13900 <__assert_fail@plt+0x23a4>
   14a5c:	mov	r0, r5
   14a60:	pop	{r4, r5, fp, pc}
   14a64:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14a68:	add	fp, sp, #24
   14a6c:	mov	r4, r1
   14a70:	mov	r8, r0
   14a74:	ldr	r1, [r1, #52]	; 0x34
   14a78:	str	r1, [r4, #40]	; 0x28
   14a7c:	ldr	r0, [r0, #24]
   14a80:	add	r6, r4, #168	; 0xa8
   14a84:	add	r2, r1, #1
   14a88:	mov	r1, r6
   14a8c:	bl	11280 <memmove@plt>
   14a90:	mov	r0, r6
   14a94:	mov	r1, #47	; 0x2f
   14a98:	bl	11490 <strrchr@plt>
   14a9c:	cmp	r0, #0
   14aa0:	beq	14adc <__assert_fail@plt+0x3580>
   14aa4:	cmp	r0, r6
   14aa8:	bne	14ab8 <__assert_fail@plt+0x355c>
   14aac:	ldrb	r1, [r0, #1]
   14ab0:	cmp	r1, #0
   14ab4:	beq	14adc <__assert_fail@plt+0x3580>
   14ab8:	add	r7, r0, #1
   14abc:	mov	r0, r7
   14ac0:	bl	113dc <strlen@plt>
   14ac4:	mov	r5, r0
   14ac8:	add	r2, r0, #1
   14acc:	mov	r0, r6
   14ad0:	mov	r1, r7
   14ad4:	bl	11280 <memmove@plt>
   14ad8:	str	r5, [r4, #52]	; 0x34
   14adc:	ldr	r0, [r8, #24]
   14ae0:	str	r0, [r4, #24]
   14ae4:	str	r0, [r4, #28]
   14ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14aec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14af0:	add	fp, sp, #24
   14af4:	mov	r4, r1
   14af8:	mov	r6, r0
   14afc:	add	r5, r1, #64	; 0x40
   14b00:	ldrh	r0, [r0, #48]	; 0x30
   14b04:	movw	r1, #258	; 0x102
   14b08:	tst	r0, r1
   14b0c:	beq	14b84 <__assert_fail@plt+0x3628>
   14b10:	mov	r0, #24
   14b14:	bl	190d0 <__assert_fail@plt+0x7b74>
   14b18:	mov	r8, #0
   14b1c:	cmp	r0, #0
   14b20:	beq	14ba4 <__assert_fail@plt+0x3648>
   14b24:	mov	r7, r0
   14b28:	add	r0, r4, #160	; 0xa0
   14b2c:	ldrd	r2, [r5]
   14b30:	stm	r7, {r2, r3}
   14b34:	ldrd	r0, [r0]
   14b38:	add	r2, r7, #8
   14b3c:	stm	r2, {r0, r1, r4}
   14b40:	ldr	r0, [r6, #56]	; 0x38
   14b44:	mov	r1, r7
   14b48:	bl	15e48 <__assert_fail@plt+0x48ec>
   14b4c:	cmp	r0, r7
   14b50:	beq	14b78 <__assert_fail@plt+0x361c>
   14b54:	mov	r5, r0
   14b58:	mov	r0, r7
   14b5c:	bl	12fdc <__assert_fail@plt+0x1a80>
   14b60:	cmp	r5, #0
   14b64:	beq	14ba4 <__assert_fail@plt+0x3648>
   14b68:	ldr	r0, [r5, #16]
   14b6c:	mov	r1, #2
   14b70:	strh	r1, [r4, #56]	; 0x38
   14b74:	str	r0, [r4]
   14b78:	mov	r8, #1
   14b7c:	mov	r0, r8
   14b80:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14b84:	ldr	r0, [r6, #56]	; 0x38
   14b88:	mov	r1, r5
   14b8c:	bl	19660 <__assert_fail@plt+0x8104>
   14b90:	mov	r8, #1
   14b94:	cmp	r0, #0
   14b98:	movne	r0, #2
   14b9c:	strhne	r0, [r4, #56]	; 0x38
   14ba0:	strne	r4, [r4]
   14ba4:	mov	r0, r8
   14ba8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bac:	push	{r4, r5, fp, lr}
   14bb0:	add	fp, sp, #8
   14bb4:	mov	r4, r1
   14bb8:	mov	r5, r0
   14bbc:	ldr	r1, [r0, #32]
   14bc0:	cmp	r1, r4
   14bc4:	bne	14bd0 <__assert_fail@plt+0x3674>
   14bc8:	cmn	r1, #100	; 0x64
   14bcc:	bne	14c10 <__assert_fail@plt+0x36b4>
   14bd0:	cmp	r2, #0
   14bd4:	beq	14bec <__assert_fail@plt+0x3690>
   14bd8:	add	r0, r5, #60	; 0x3c
   14bdc:	bl	16088 <__assert_fail@plt+0x4b2c>
   14be0:	cmp	r0, #0
   14be4:	bpl	14c04 <__assert_fail@plt+0x36a8>
   14be8:	b	14c08 <__assert_fail@plt+0x36ac>
   14bec:	cmp	r1, #0
   14bf0:	bmi	14c08 <__assert_fail@plt+0x36ac>
   14bf4:	ldr	r0, [r5, #48]	; 0x30
   14bf8:	ands	r0, r0, #4
   14bfc:	bne	14c08 <__assert_fail@plt+0x36ac>
   14c00:	mov	r0, r1
   14c04:	bl	11520 <close@plt>
   14c08:	str	r4, [r5, #32]
   14c0c:	pop	{r4, r5, fp, pc}
   14c10:	bl	11514 <abort@plt>
   14c14:	push	{fp, lr}
   14c18:	mov	fp, sp
   14c1c:	cmp	r2, #5
   14c20:	bcc	14c38 <__assert_fail@plt+0x36dc>
   14c24:	bl	1140c <__errno_location@plt>
   14c28:	mov	r1, #22
   14c2c:	str	r1, [r0]
   14c30:	mov	r0, #1
   14c34:	pop	{fp, pc}
   14c38:	strh	r2, [r1, #60]	; 0x3c
   14c3c:	mov	r0, #0
   14c40:	pop	{fp, pc}
   14c44:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c48:	add	fp, sp, #28
   14c4c:	sub	sp, sp, #4
   14c50:	mov	r5, r0
   14c54:	mvn	r0, #4096	; 0x1000
   14c58:	tst	r1, r0
   14c5c:	beq	14c74 <__assert_fail@plt+0x3718>
   14c60:	bl	1140c <__errno_location@plt>
   14c64:	mov	r1, #22
   14c68:	str	r1, [r0]
   14c6c:	mov	r4, #0
   14c70:	b	14d70 <__assert_fail@plt+0x3814>
   14c74:	mov	r7, r1
   14c78:	ldr	r6, [r5]
   14c7c:	bl	1140c <__errno_location@plt>
   14c80:	mov	sl, r0
   14c84:	mov	r4, #0
   14c88:	str	r4, [r0]
   14c8c:	ldrb	r0, [r5, #49]	; 0x31
   14c90:	tst	r0, #32
   14c94:	bne	14d70 <__assert_fail@plt+0x3814>
   14c98:	ldrh	r0, [r6, #56]	; 0x38
   14c9c:	cmp	r0, #1
   14ca0:	beq	14cb0 <__assert_fail@plt+0x3754>
   14ca4:	cmp	r0, #9
   14ca8:	ldreq	r4, [r6, #8]
   14cac:	b	14d70 <__assert_fail@plt+0x3814>
   14cb0:	ldr	r0, [r5, #4]
   14cb4:	cmp	r0, #0
   14cb8:	blne	13788 <__assert_fail@plt+0x222c>
   14cbc:	mov	r9, #1
   14cc0:	cmp	r7, #4096	; 0x1000
   14cc4:	bne	14cd8 <__assert_fail@plt+0x377c>
   14cc8:	ldr	r0, [r5, #48]	; 0x30
   14ccc:	orr	r0, r0, #4096	; 0x1000
   14cd0:	str	r0, [r5, #48]	; 0x30
   14cd4:	mov	r9, #2
   14cd8:	ldr	r0, [r6, #48]	; 0x30
   14cdc:	cmp	r0, #0
   14ce0:	bne	14d5c <__assert_fail@plt+0x3800>
   14ce4:	ldr	r0, [r6, #24]
   14ce8:	ldrb	r0, [r0]
   14cec:	cmp	r0, #47	; 0x2f
   14cf0:	beq	14d5c <__assert_fail@plt+0x3800>
   14cf4:	ldrb	r0, [r5, #48]	; 0x30
   14cf8:	tst	r0, #4
   14cfc:	bne	14d5c <__assert_fail@plt+0x3800>
   14d00:	movw	r1, #45189	; 0xb085
   14d04:	movt	r1, #1
   14d08:	mov	r0, r5
   14d0c:	bl	13758 <__assert_fail@plt+0x21fc>
   14d10:	cmn	r0, #1
   14d14:	ble	14d7c <__assert_fail@plt+0x3820>
   14d18:	mov	r8, r0
   14d1c:	mov	r0, r5
   14d20:	mov	r1, r9
   14d24:	bl	141ec <__assert_fail@plt+0x2c90>
   14d28:	str	r0, [r5, #4]
   14d2c:	ldrb	r0, [r5, #49]	; 0x31
   14d30:	tst	r0, #2
   14d34:	bne	14d88 <__assert_fail@plt+0x382c>
   14d38:	mov	r0, r8
   14d3c:	bl	114cc <fchdir@plt>
   14d40:	cmp	r0, #0
   14d44:	beq	14d9c <__assert_fail@plt+0x3840>
   14d48:	ldr	r5, [sl]
   14d4c:	mov	r0, r8
   14d50:	bl	11520 <close@plt>
   14d54:	str	r5, [sl]
   14d58:	b	14d70 <__assert_fail@plt+0x3814>
   14d5c:	mov	r0, r5
   14d60:	mov	r1, r9
   14d64:	bl	141ec <__assert_fail@plt+0x2c90>
   14d68:	mov	r4, r0
   14d6c:	str	r0, [r5, #4]
   14d70:	mov	r0, r4
   14d74:	sub	sp, fp, #28
   14d78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d7c:	mov	r4, #0
   14d80:	str	r4, [r5, #4]
   14d84:	b	14d70 <__assert_fail@plt+0x3814>
   14d88:	mov	r0, r5
   14d8c:	mov	r1, r8
   14d90:	mov	r2, #1
   14d94:	bl	14bac <__assert_fail@plt+0x3650>
   14d98:	b	14da4 <__assert_fail@plt+0x3848>
   14d9c:	mov	r0, r8
   14da0:	bl	11520 <close@plt>
   14da4:	ldr	r4, [r5, #4]
   14da8:	b	14d70 <__assert_fail@plt+0x3814>
   14dac:	push	{fp, lr}
   14db0:	mov	fp, sp
   14db4:	mov	r2, r1
   14db8:	ldrd	r0, [r0, #8]
   14dbc:	mov	r3, #0
   14dc0:	bl	19d6c <__assert_fail@plt+0x8810>
   14dc4:	mov	r0, r2
   14dc8:	pop	{fp, pc}
   14dcc:	push	{r4, r5, fp, lr}
   14dd0:	add	fp, sp, #8
   14dd4:	ldrd	r2, [r1, #8]
   14dd8:	ldrd	r4, [r0, #8]
   14ddc:	eor	r3, r5, r3
   14de0:	eor	r2, r4, r2
   14de4:	orrs	r2, r2, r3
   14de8:	mov	r2, #0
   14dec:	bne	14e0c <__assert_fail@plt+0x38b0>
   14df0:	ldrd	r2, [r1]
   14df4:	ldrd	r0, [r0]
   14df8:	eor	r1, r1, r3
   14dfc:	eor	r0, r0, r2
   14e00:	orr	r0, r0, r1
   14e04:	clz	r0, r0
   14e08:	lsr	r2, r0, #5
   14e0c:	mov	r0, r2
   14e10:	pop	{r4, r5, fp, pc}
   14e14:	push	{fp, lr}
   14e18:	mov	fp, sp
   14e1c:	bl	14fbc <__assert_fail@plt+0x3a60>
   14e20:	mov	r1, r0
   14e24:	mov	r0, #0
   14e28:	movw	r2, #26984	; 0x6968
   14e2c:	cmp	r1, r2
   14e30:	ble	14e60 <__assert_fail@plt+0x3904>
   14e34:	movw	r2, #26985	; 0x6969
   14e38:	cmp	r1, r2
   14e3c:	movwne	r2, #40864	; 0x9fa0
   14e40:	cmpne	r1, r2
   14e44:	beq	14e78 <__assert_fail@plt+0x391c>
   14e48:	movw	r2, #16719	; 0x414f
   14e4c:	movt	r2, #21318	; 0x5346
   14e50:	cmp	r1, r2
   14e54:	popeq	{fp, pc}
   14e58:	mov	r0, #1
   14e5c:	pop	{fp, pc}
   14e60:	movw	r2, #19778	; 0x4d42
   14e64:	movt	r2, #65363	; 0xff53
   14e68:	cmp	r1, r2
   14e6c:	beq	14e78 <__assert_fail@plt+0x391c>
   14e70:	cmp	r1, #0
   14e74:	movne	r0, #1
   14e78:	pop	{fp, pc}
   14e7c:	sub	r2, r1, #1
   14e80:	mov	r1, #0
   14e84:	cmp	r2, #11
   14e88:	bhi	14e98 <__assert_fail@plt+0x393c>
   14e8c:	movw	r1, #45192	; 0xb088
   14e90:	movt	r1, #1
   14e94:	ldr	r1, [r1, r2, lsl #2]
   14e98:	str	r1, [r0, #16]
   14e9c:	bx	lr
   14ea0:	push	{fp, lr}
   14ea4:	mov	fp, sp
   14ea8:	bl	14fbc <__assert_fail@plt+0x3a60>
   14eac:	mov	r1, r0
   14eb0:	mov	r0, #0
   14eb4:	movw	r2, #19778	; 0x4d42
   14eb8:	movt	r2, #65363	; 0xff53
   14ebc:	cmp	r1, r2
   14ec0:	movwne	r2, #26985	; 0x6969
   14ec4:	cmpne	r1, r2
   14ec8:	bne	14ed0 <__assert_fail@plt+0x3974>
   14ecc:	pop	{fp, pc}
   14ed0:	movw	r2, #6548	; 0x1994
   14ed4:	movt	r2, #258	; 0x102
   14ed8:	cmp	r1, r2
   14edc:	movne	r0, #1
   14ee0:	pop	{fp, pc}
   14ee4:	ldr	r2, [r0, #4]
   14ee8:	ldr	ip, [r0, #24]
   14eec:	cmp	r2, #0
   14ef0:	bne	14f08 <__assert_fail@plt+0x39ac>
   14ef4:	b	14f2c <__assert_fail@plt+0x39d0>
   14ef8:	str	ip, [r2, #28]
   14efc:	ldr	r2, [r2, #8]
   14f00:	cmp	r2, #0
   14f04:	beq	14f2c <__assert_fail@plt+0x39d0>
   14f08:	ldr	r3, [r2, #24]
   14f0c:	add	r0, r2, #168	; 0xa8
   14f10:	cmp	r3, r0
   14f14:	beq	14ef8 <__assert_fail@plt+0x399c>
   14f18:	ldr	r0, [r2, #28]
   14f1c:	sub	r0, r3, r0
   14f20:	add	r0, ip, r0
   14f24:	str	r0, [r2, #24]
   14f28:	b	14ef8 <__assert_fail@plt+0x399c>
   14f2c:	ldr	r2, [r1, #48]	; 0x30
   14f30:	cmp	r2, #0
   14f34:	bxmi	lr
   14f38:	b	14f5c <__assert_fail@plt+0x3a00>
   14f3c:	str	ip, [r1, #28]
   14f40:	ldr	r2, [r1, #8]
   14f44:	cmp	r2, #0
   14f48:	ldreq	r2, [r1, #4]
   14f4c:	ldr	r0, [r2, #48]	; 0x30
   14f50:	cmn	r0, #1
   14f54:	mov	r1, r2
   14f58:	ble	14f80 <__assert_fail@plt+0x3a24>
   14f5c:	ldr	r2, [r1, #24]
   14f60:	add	r0, r1, #168	; 0xa8
   14f64:	cmp	r2, r0
   14f68:	beq	14f3c <__assert_fail@plt+0x39e0>
   14f6c:	ldr	r0, [r1, #28]
   14f70:	sub	r0, r2, r0
   14f74:	add	r0, ip, r0
   14f78:	str	r0, [r1, #24]
   14f7c:	b	14f3c <__assert_fail@plt+0x39e0>
   14f80:	bx	lr
   14f84:	push	{r4, r5, fp, lr}
   14f88:	add	fp, sp, #8
   14f8c:	ldr	r0, [r0]
   14f90:	ldrd	r2, [r0, #160]	; 0xa0
   14f94:	ldr	r0, [r1]
   14f98:	ldrd	r4, [r0, #160]	; 0xa0
   14f9c:	mov	r0, #0
   14fa0:	subs	r1, r4, r2
   14fa4:	sbcs	r1, r5, r3
   14fa8:	movwcc	r0, #1
   14fac:	subs	r1, r2, r4
   14fb0:	sbcs	r1, r3, r5
   14fb4:	subcc	r0, r0, #1
   14fb8:	pop	{r4, r5, fp, pc}
   14fbc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   14fc0:	add	fp, sp, #24
   14fc4:	sub	sp, sp, #96	; 0x60
   14fc8:	mov	r4, r0
   14fcc:	ldr	r7, [r0, #44]	; 0x2c
   14fd0:	ldrb	r0, [r7, #49]	; 0x31
   14fd4:	mov	r5, #0
   14fd8:	tst	r0, #2
   14fdc:	beq	150d8 <__assert_fail@plt+0x3b7c>
   14fe0:	mov	r9, r1
   14fe4:	ldr	r6, [r7, #52]	; 0x34
   14fe8:	cmp	r6, #0
   14fec:	bne	1502c <__assert_fail@plt+0x3ad0>
   14ff0:	movw	r0, #12252	; 0x2fdc
   14ff4:	movt	r0, #1
   14ff8:	str	r0, [sp]
   14ffc:	mov	r8, #0
   15000:	movw	r2, #20708	; 0x50e4
   15004:	movt	r2, #1
   15008:	movw	r3, #20740	; 0x5104
   1500c:	movt	r3, #1
   15010:	mov	r0, #13
   15014:	mov	r1, #0
   15018:	bl	155ac <__assert_fail@plt+0x4050>
   1501c:	mov	r6, r0
   15020:	str	r0, [r7, #52]	; 0x34
   15024:	cmp	r0, #0
   15028:	beq	15064 <__assert_fail@plt+0x3b08>
   1502c:	ldrd	r0, [r4, #64]	; 0x40
   15030:	str	r1, [sp, #12]
   15034:	str	r0, [sp, #8]
   15038:	add	r1, sp, #8
   1503c:	mov	r0, r6
   15040:	bl	15300 <__assert_fail@plt+0x3da4>
   15044:	cmp	r0, #0
   15048:	beq	15054 <__assert_fail@plt+0x3af8>
   1504c:	ldr	r5, [r0, #8]
   15050:	b	150d8 <__assert_fail@plt+0x3b7c>
   15054:	mov	r8, #1
   15058:	cmp	r9, #0
   1505c:	bpl	15070 <__assert_fail@plt+0x3b14>
   15060:	b	150d8 <__assert_fail@plt+0x3b7c>
   15064:	mov	r6, #0
   15068:	cmp	r9, #0
   1506c:	bmi	150d8 <__assert_fail@plt+0x3b7c>
   15070:	add	r1, sp, #8
   15074:	mov	r0, r9
   15078:	bl	11214 <fstatfs64@plt>
   1507c:	cmp	r0, #0
   15080:	bne	150d8 <__assert_fail@plt+0x3b7c>
   15084:	cmp	r8, #0
   15088:	beq	150d4 <__assert_fail@plt+0x3b78>
   1508c:	mov	r0, #16
   15090:	bl	190d0 <__assert_fail@plt+0x7b74>
   15094:	cmp	r0, #0
   15098:	beq	150d4 <__assert_fail@plt+0x3b78>
   1509c:	mov	r5, r0
   150a0:	ldrd	r0, [r4, #64]	; 0x40
   150a4:	ldr	r2, [sp, #8]
   150a8:	stm	r5, {r0, r1, r2}
   150ac:	mov	r0, r6
   150b0:	mov	r1, r5
   150b4:	bl	15e48 <__assert_fail@plt+0x48ec>
   150b8:	cmp	r0, #0
   150bc:	beq	150cc <__assert_fail@plt+0x3b70>
   150c0:	cmp	r0, r5
   150c4:	beq	150d4 <__assert_fail@plt+0x3b78>
   150c8:	bl	11514 <abort@plt>
   150cc:	mov	r0, r5
   150d0:	bl	12fdc <__assert_fail@plt+0x1a80>
   150d4:	ldr	r5, [sp, #8]
   150d8:	mov	r0, r5
   150dc:	sub	sp, fp, #24
   150e0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   150e4:	push	{fp, lr}
   150e8:	mov	fp, sp
   150ec:	mov	r2, r1
   150f0:	ldrd	r0, [r0]
   150f4:	mov	r3, #0
   150f8:	bl	19d6c <__assert_fail@plt+0x8810>
   150fc:	mov	r0, r2
   15100:	pop	{fp, pc}
   15104:	ldrd	r2, [r1]
   15108:	ldrd	r0, [r0]
   1510c:	eor	r1, r1, r3
   15110:	eor	r0, r0, r2
   15114:	orr	r0, r0, r1
   15118:	clz	r0, r0
   1511c:	lsr	r0, r0, #5
   15120:	bx	lr
   15124:	andeq	r0, r0, r0
   15128:	ldr	r0, [r0, #8]
   1512c:	bx	lr
   15130:	ldr	r0, [r0, #12]
   15134:	bx	lr
   15138:	ldr	r0, [r0, #16]
   1513c:	bx	lr
   15140:	mov	r2, r0
   15144:	ldm	r0, {r1, r3}
   15148:	mov	r0, #0
   1514c:	cmp	r1, r3
   15150:	bxcs	lr
   15154:	ldr	ip, [r2, #4]
   15158:	mov	r0, #0
   1515c:	b	1516c <__assert_fail@plt+0x3c10>
   15160:	add	r1, r1, #8
   15164:	cmp	r1, ip
   15168:	bcs	1519c <__assert_fail@plt+0x3c40>
   1516c:	ldr	r2, [r1]
   15170:	cmp	r2, #0
   15174:	beq	15160 <__assert_fail@plt+0x3c04>
   15178:	mov	r3, #0
   1517c:	mov	r2, r1
   15180:	add	r3, r3, #1
   15184:	ldr	r2, [r2, #4]
   15188:	cmp	r2, #0
   1518c:	bne	15180 <__assert_fail@plt+0x3c24>
   15190:	cmp	r3, r0
   15194:	movhi	r0, r3
   15198:	b	15160 <__assert_fail@plt+0x3c04>
   1519c:	bx	lr
   151a0:	push	{fp, lr}
   151a4:	mov	fp, sp
   151a8:	ldr	r3, [r0]
   151ac:	ldr	r1, [r0, #4]
   151b0:	mov	lr, #0
   151b4:	cmp	r3, r1
   151b8:	mov	r1, #0
   151bc:	bcs	15204 <__assert_fail@plt+0x3ca8>
   151c0:	ldr	ip, [r0, #4]
   151c4:	mov	r1, #0
   151c8:	mov	lr, #0
   151cc:	b	151dc <__assert_fail@plt+0x3c80>
   151d0:	add	r3, r3, #8
   151d4:	cmp	r3, ip
   151d8:	bcs	15204 <__assert_fail@plt+0x3ca8>
   151dc:	ldr	r2, [r3]
   151e0:	cmp	r2, #0
   151e4:	beq	151d0 <__assert_fail@plt+0x3c74>
   151e8:	mov	r2, r3
   151ec:	add	r1, r1, #1
   151f0:	ldr	r2, [r2, #4]
   151f4:	cmp	r2, #0
   151f8:	bne	151ec <__assert_fail@plt+0x3c90>
   151fc:	add	lr, lr, #1
   15200:	b	151d0 <__assert_fail@plt+0x3c74>
   15204:	ldr	r2, [r0, #12]
   15208:	cmp	lr, r2
   1520c:	bne	15224 <__assert_fail@plt+0x3cc8>
   15210:	ldr	r2, [r0, #16]
   15214:	mov	r0, #1
   15218:	cmp	r1, r2
   1521c:	movne	r0, #0
   15220:	pop	{fp, pc}
   15224:	mov	r0, #0
   15228:	pop	{fp, pc}
   1522c:	nop	{0}
   15230:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15234:	add	fp, sp, #24
   15238:	sub	sp, sp, #8
   1523c:	mov	r4, r1
   15240:	mov	r5, r0
   15244:	bl	15138 <__assert_fail@plt+0x3bdc>
   15248:	mov	r8, r0
   1524c:	mov	r0, r5
   15250:	bl	15128 <__assert_fail@plt+0x3bcc>
   15254:	mov	r7, r0
   15258:	mov	r0, r5
   1525c:	bl	15130 <__assert_fail@plt+0x3bd4>
   15260:	mov	r6, r0
   15264:	mov	r0, r5
   15268:	bl	15140 <__assert_fail@plt+0x3be4>
   1526c:	mov	r5, r0
   15270:	movw	r2, #45240	; 0xb0b8
   15274:	movt	r2, #1
   15278:	mov	r0, r4
   1527c:	mov	r1, #1
   15280:	mov	r3, r8
   15284:	bl	11448 <__fprintf_chk@plt>
   15288:	movw	r2, #45264	; 0xb0d0
   1528c:	movt	r2, #1
   15290:	mov	r0, r4
   15294:	mov	r1, #1
   15298:	mov	r3, r7
   1529c:	bl	11448 <__fprintf_chk@plt>
   152a0:	vldr	d16, [pc, #80]	; 152f8 <__assert_fail@plt+0x3d9c>
   152a4:	vmov	s0, r6
   152a8:	vmov	s2, r7
   152ac:	vcvt.f64.u32	d17, s0
   152b0:	vcvt.f64.u32	d18, s2
   152b4:	vmul.f64	d16, d17, d16
   152b8:	vdiv.f64	d16, d16, d18
   152bc:	vstr	d16, [sp]
   152c0:	movw	r2, #45288	; 0xb0e8
   152c4:	movt	r2, #1
   152c8:	mov	r0, r4
   152cc:	mov	r1, #1
   152d0:	mov	r3, r6
   152d4:	bl	11448 <__fprintf_chk@plt>
   152d8:	movw	r2, #45321	; 0xb109
   152dc:	movt	r2, #1
   152e0:	mov	r0, r4
   152e4:	mov	r1, #1
   152e8:	mov	r3, r5
   152ec:	sub	sp, fp, #24
   152f0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   152f4:	b	11448 <__fprintf_chk@plt>
   152f8:	andeq	r0, r0, r0
   152fc:	subsmi	r0, r9, r0
   15300:	push	{r4, r5, r6, r7, fp, lr}
   15304:	add	fp, sp, #16
   15308:	mov	r5, r1
   1530c:	mov	r6, r0
   15310:	bl	15370 <__assert_fail@plt+0x3e14>
   15314:	mov	r7, r0
   15318:	ldr	r0, [r0]
   1531c:	mov	r4, #0
   15320:	cmp	r0, #0
   15324:	beq	1535c <__assert_fail@plt+0x3e00>
   15328:	cmp	r7, #0
   1532c:	beq	1535c <__assert_fail@plt+0x3e00>
   15330:	ldr	r1, [r7]
   15334:	cmp	r1, r5
   15338:	beq	15364 <__assert_fail@plt+0x3e08>
   1533c:	ldr	r2, [r6, #28]
   15340:	mov	r0, r5
   15344:	blx	r2
   15348:	cmp	r0, #0
   1534c:	bne	15364 <__assert_fail@plt+0x3e08>
   15350:	ldr	r7, [r7, #4]
   15354:	cmp	r7, #0
   15358:	bne	15330 <__assert_fail@plt+0x3dd4>
   1535c:	mov	r0, r4
   15360:	pop	{r4, r5, r6, r7, fp, pc}
   15364:	ldr	r4, [r7]
   15368:	mov	r0, r4
   1536c:	pop	{r4, r5, r6, r7, fp, pc}
   15370:	push	{r4, sl, fp, lr}
   15374:	add	fp, sp, #8
   15378:	mov	r2, r1
   1537c:	mov	r4, r0
   15380:	ldr	r1, [r0, #8]
   15384:	ldr	r3, [r0, #24]
   15388:	mov	r0, r2
   1538c:	blx	r3
   15390:	ldr	r1, [r4, #8]
   15394:	cmp	r0, r1
   15398:	ldrcc	r1, [r4]
   1539c:	addcc	r0, r1, r0, lsl #3
   153a0:	popcc	{r4, sl, fp, pc}
   153a4:	bl	11514 <abort@plt>
   153a8:	push	{fp, lr}
   153ac:	mov	fp, sp
   153b0:	ldr	r1, [r0, #16]
   153b4:	cmp	r1, #0
   153b8:	beq	153e0 <__assert_fail@plt+0x3e84>
   153bc:	ldr	r2, [r0]
   153c0:	ldr	r1, [r0, #4]
   153c4:	cmp	r2, r1
   153c8:	bcs	153ec <__assert_fail@plt+0x3e90>
   153cc:	ldr	r1, [r2], #8
   153d0:	cmp	r1, #0
   153d4:	beq	153c0 <__assert_fail@plt+0x3e64>
   153d8:	mov	r0, r1
   153dc:	pop	{fp, pc}
   153e0:	mov	r1, #0
   153e4:	mov	r0, r1
   153e8:	pop	{fp, pc}
   153ec:	bl	11514 <abort@plt>
   153f0:	push	{r4, r5, fp, lr}
   153f4:	add	fp, sp, #8
   153f8:	mov	r5, r1
   153fc:	mov	r4, r0
   15400:	bl	15370 <__assert_fail@plt+0x3e14>
   15404:	mov	r1, r0
   15408:	b	15418 <__assert_fail@plt+0x3ebc>
   1540c:	ldr	r1, [r1, #4]
   15410:	cmp	r1, #0
   15414:	beq	15438 <__assert_fail@plt+0x3edc>
   15418:	ldr	r2, [r1]
   1541c:	cmp	r2, r5
   15420:	bne	1540c <__assert_fail@plt+0x3eb0>
   15424:	ldr	r2, [r1, #4]
   15428:	cmp	r2, #0
   1542c:	beq	1540c <__assert_fail@plt+0x3eb0>
   15430:	ldr	r0, [r2]
   15434:	pop	{r4, r5, fp, pc}
   15438:	add	r1, r0, #8
   1543c:	ldr	r2, [r4, #4]
   15440:	cmp	r1, r2
   15444:	bcs	15458 <__assert_fail@plt+0x3efc>
   15448:	ldr	r0, [r1], #8
   1544c:	cmp	r0, #0
   15450:	beq	15440 <__assert_fail@plt+0x3ee4>
   15454:	pop	{r4, r5, fp, pc}
   15458:	mov	r0, #0
   1545c:	pop	{r4, r5, fp, pc}
   15460:	push	{r4, sl, fp, lr}
   15464:	add	fp, sp, #8
   15468:	mov	ip, r0
   1546c:	ldr	lr, [r0]
   15470:	ldr	r3, [r0, #4]
   15474:	mov	r0, #0
   15478:	cmp	lr, r3
   1547c:	popcs	{r4, sl, fp, pc}
   15480:	mov	r0, #0
   15484:	b	15498 <__assert_fail@plt+0x3f3c>
   15488:	ldr	r3, [ip, #4]
   1548c:	add	lr, lr, #8
   15490:	cmp	lr, r3
   15494:	bcs	154d0 <__assert_fail@plt+0x3f74>
   15498:	ldr	r3, [lr]
   1549c:	cmp	r3, #0
   154a0:	cmpne	lr, #0
   154a4:	beq	15488 <__assert_fail@plt+0x3f2c>
   154a8:	mov	r3, lr
   154ac:	cmp	r0, r2
   154b0:	bcs	154d0 <__assert_fail@plt+0x3f74>
   154b4:	ldr	r4, [r3]
   154b8:	str	r4, [r1, r0, lsl #2]
   154bc:	add	r0, r0, #1
   154c0:	ldr	r3, [r3, #4]
   154c4:	cmp	r3, #0
   154c8:	bne	154ac <__assert_fail@plt+0x3f50>
   154cc:	b	15488 <__assert_fail@plt+0x3f2c>
   154d0:	pop	{r4, sl, fp, pc}
   154d4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   154d8:	add	fp, sp, #24
   154dc:	mov	r8, r0
   154e0:	ldr	r9, [r0]
   154e4:	ldr	r0, [r0, #4]
   154e8:	mov	r6, #0
   154ec:	cmp	r9, r0
   154f0:	bcs	15550 <__assert_fail@plt+0x3ff4>
   154f4:	mov	r4, r2
   154f8:	mov	r5, r1
   154fc:	mov	r6, #0
   15500:	b	15514 <__assert_fail@plt+0x3fb8>
   15504:	ldr	r0, [r8, #4]
   15508:	add	r9, r9, #8
   1550c:	cmp	r9, r0
   15510:	bcs	15550 <__assert_fail@plt+0x3ff4>
   15514:	ldr	r0, [r9]
   15518:	cmp	r0, #0
   1551c:	cmpne	r9, #0
   15520:	beq	15504 <__assert_fail@plt+0x3fa8>
   15524:	mov	r7, r9
   15528:	ldr	r0, [r7]
   1552c:	mov	r1, r4
   15530:	blx	r5
   15534:	cmp	r0, #0
   15538:	beq	15550 <__assert_fail@plt+0x3ff4>
   1553c:	add	r6, r6, #1
   15540:	ldr	r7, [r7, #4]
   15544:	cmp	r7, #0
   15548:	bne	15528 <__assert_fail@plt+0x3fcc>
   1554c:	b	15504 <__assert_fail@plt+0x3fa8>
   15550:	mov	r0, r6
   15554:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   15558:	ldrb	r2, [r0]
   1555c:	cmp	r2, #0
   15560:	moveq	r0, #0
   15564:	bxeq	lr
   15568:	add	r3, r0, #1
   1556c:	mov	r0, #0
   15570:	rsb	r0, r0, r0, lsl #5
   15574:	uxtab	r0, r0, r2
   15578:	udiv	r2, r0, r1
   1557c:	mls	r0, r2, r1, r0
   15580:	ldrb	r2, [r3], #1
   15584:	cmp	r2, #0
   15588:	bne	15570 <__assert_fail@plt+0x4014>
   1558c:	bx	lr
   15590:	movw	r1, #45352	; 0xb128
   15594:	movt	r1, #1
   15598:	vld1.32	{d16-d17}, [r1]!
   1559c:	vst1.32	{d16-d17}, [r0]!
   155a0:	ldr	r1, [r1]
   155a4:	str	r1, [r0]
   155a8:	bx	lr
   155ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155b0:	add	fp, sp, #28
   155b4:	sub	sp, sp, #4
   155b8:	mov	r7, r1
   155bc:	mov	r8, r0
   155c0:	movw	sl, #22188	; 0x56ac
   155c4:	movt	sl, #1
   155c8:	cmp	r3, #0
   155cc:	movne	sl, r3
   155d0:	movw	r5, #22156	; 0x568c
   155d4:	movt	r5, #1
   155d8:	cmp	r2, #0
   155dc:	movne	r5, r2
   155e0:	mov	r0, #40	; 0x28
   155e4:	bl	190d0 <__assert_fail@plt+0x7b74>
   155e8:	mov	r9, #0
   155ec:	cmp	r0, #0
   155f0:	beq	15680 <__assert_fail@plt+0x4124>
   155f4:	mov	r4, r0
   155f8:	movw	r6, #45352	; 0xb128
   155fc:	movt	r6, #1
   15600:	cmp	r7, #0
   15604:	movne	r6, r7
   15608:	str	r6, [r0, #20]
   1560c:	bl	156bc <__assert_fail@plt+0x4160>
   15610:	cmp	r0, #0
   15614:	beq	15678 <__assert_fail@plt+0x411c>
   15618:	mov	r0, r8
   1561c:	mov	r1, r6
   15620:	bl	15768 <__assert_fail@plt+0x420c>
   15624:	str	r0, [r4, #8]
   15628:	cmp	r0, #0
   1562c:	beq	15678 <__assert_fail@plt+0x411c>
   15630:	mov	r1, #8
   15634:	bl	1907c <__assert_fail@plt+0x7b20>
   15638:	str	r0, [r4]
   1563c:	cmp	r0, #0
   15640:	beq	15678 <__assert_fail@plt+0x411c>
   15644:	ldr	r1, [fp, #8]
   15648:	mov	r2, #0
   1564c:	str	r5, [r4, #24]
   15650:	str	sl, [r4, #28]
   15654:	str	r1, [r4, #32]
   15658:	str	r2, [r4, #36]	; 0x24
   1565c:	str	r2, [r4, #12]
   15660:	str	r2, [r4, #16]
   15664:	ldr	r1, [r4, #8]
   15668:	add	r0, r0, r1, lsl #3
   1566c:	str	r0, [r4, #4]
   15670:	mov	r9, r4
   15674:	b	15680 <__assert_fail@plt+0x4124>
   15678:	mov	r0, r4
   1567c:	bl	12fdc <__assert_fail@plt+0x1a80>
   15680:	mov	r0, r9
   15684:	sub	sp, fp, #28
   15688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1568c:	push	{r4, sl, fp, lr}
   15690:	add	fp, sp, #8
   15694:	mov	r4, r1
   15698:	mov	r1, #3
   1569c:	bl	19224 <__assert_fail@plt+0x7cc8>
   156a0:	udiv	r1, r0, r4
   156a4:	mls	r0, r1, r4, r0
   156a8:	pop	{r4, sl, fp, pc}
   156ac:	sub	r0, r0, r1
   156b0:	clz	r0, r0
   156b4:	lsr	r0, r0, #5
   156b8:	bx	lr
   156bc:	mov	r1, r0
   156c0:	ldr	r3, [r0, #20]
   156c4:	mov	r0, #1
   156c8:	movw	r2, #45352	; 0xb128
   156cc:	movt	r2, #1
   156d0:	cmp	r3, r2
   156d4:	beq	15758 <__assert_fail@plt+0x41fc>
   156d8:	vldr	s2, [pc, #124]	; 1575c <__assert_fail@plt+0x4200>
   156dc:	vldr	s0, [r3, #8]
   156e0:	vcmpe.f32	s0, s2
   156e4:	vmrs	APSR_nzcv, fpscr
   156e8:	ble	15750 <__assert_fail@plt+0x41f4>
   156ec:	vldr	s4, [pc, #108]	; 15760 <__assert_fail@plt+0x4204>
   156f0:	vcmpe.f32	s0, s4
   156f4:	vmrs	APSR_nzcv, fpscr
   156f8:	bpl	15750 <__assert_fail@plt+0x41f4>
   156fc:	vldr	s4, [pc, #96]	; 15764 <__assert_fail@plt+0x4208>
   15700:	vldr	s6, [r3, #12]
   15704:	vcmpe.f32	s6, s4
   15708:	vmrs	APSR_nzcv, fpscr
   1570c:	ble	15750 <__assert_fail@plt+0x41f4>
   15710:	vldr	s4, [r3]
   15714:	vcmpe.f32	s4, #0.0
   15718:	vmrs	APSR_nzcv, fpscr
   1571c:	blt	15750 <__assert_fail@plt+0x41f4>
   15720:	vadd.f32	s2, s4, s2
   15724:	vcmpe.f32	s2, s0
   15728:	vmrs	APSR_nzcv, fpscr
   1572c:	bpl	15750 <__assert_fail@plt+0x41f4>
   15730:	vldr	s0, [r3, #4]
   15734:	vmov.f32	s4, #112	; 0x3f800000  1.0
   15738:	vcmpe.f32	s0, s4
   1573c:	vmrs	APSR_nzcv, fpscr
   15740:	bhi	15750 <__assert_fail@plt+0x41f4>
   15744:	vcmpe.f32	s2, s0
   15748:	vmrs	APSR_nzcv, fpscr
   1574c:	bxmi	lr
   15750:	str	r2, [r1, #20]
   15754:	mov	r0, #0
   15758:	bx	lr
   1575c:	stclcc	12, cr12, [ip, #820]	; 0x334
   15760:	svccc	0x00666666
   15764:	svccc	0x008ccccd
   15768:	push	{fp, lr}
   1576c:	mov	fp, sp
   15770:	ldrb	r2, [r1, #16]
   15774:	cmp	r2, #0
   15778:	bne	157a8 <__assert_fail@plt+0x424c>
   1577c:	vldr	s0, [r1, #8]
   15780:	vmov	s2, r0
   15784:	vcvt.f32.u32	s2, s2
   15788:	vdiv.f32	s2, s2, s0
   1578c:	vcvt.u32.f32	s0, s2
   15790:	vldr	s4, [pc, #32]	; 157b8 <__assert_fail@plt+0x425c>
   15794:	mov	r0, #0
   15798:	vcmpe.f32	s2, s4
   1579c:	vmrs	APSR_nzcv, fpscr
   157a0:	popge	{fp, pc}
   157a4:	vmov	r0, s0
   157a8:	bl	15f9c <__assert_fail@plt+0x4a40>
   157ac:	cmn	r0, #-536870911	; 0xe0000001
   157b0:	movwhi	r0, #0
   157b4:	pop	{fp, pc}
   157b8:	svcmi	0x00800000
   157bc:	push	{r4, r5, r6, r7, fp, lr}
   157c0:	add	fp, sp, #16
   157c4:	mov	r4, r0
   157c8:	ldr	r5, [r0]
   157cc:	ldr	r0, [r0, #4]
   157d0:	cmp	r5, r0
   157d4:	bcs	15878 <__assert_fail@plt+0x431c>
   157d8:	mov	r6, #0
   157dc:	b	157f8 <__assert_fail@plt+0x429c>
   157e0:	str	r6, [r5]
   157e4:	str	r6, [r5, #4]
   157e8:	ldr	r0, [r4, #4]
   157ec:	add	r5, r5, #8
   157f0:	cmp	r5, r0
   157f4:	bcs	15878 <__assert_fail@plt+0x431c>
   157f8:	ldr	r0, [r5]
   157fc:	cmp	r0, #0
   15800:	beq	157e8 <__assert_fail@plt+0x428c>
   15804:	ldr	r7, [r5, #4]
   15808:	ldr	r1, [r4, #32]
   1580c:	cmp	r1, #0
   15810:	mov	r0, r1
   15814:	movwne	r0, #1
   15818:	cmp	r7, #0
   1581c:	bne	15864 <__assert_fail@plt+0x4308>
   15820:	cmp	r0, #0
   15824:	beq	157e0 <__assert_fail@plt+0x4284>
   15828:	ldr	r0, [r5]
   1582c:	blx	r1
   15830:	b	157e0 <__assert_fail@plt+0x4284>
   15834:	str	r6, [r7]
   15838:	ldr	r2, [r7, #4]
   1583c:	ldr	r0, [r4, #36]	; 0x24
   15840:	str	r0, [r7, #4]
   15844:	str	r7, [r4, #36]	; 0x24
   15848:	ldr	r1, [r4, #32]
   1584c:	cmp	r1, #0
   15850:	mov	r0, r1
   15854:	movwne	r0, #1
   15858:	cmp	r2, #0
   1585c:	mov	r7, r2
   15860:	beq	15820 <__assert_fail@plt+0x42c4>
   15864:	tst	r0, #1
   15868:	beq	15834 <__assert_fail@plt+0x42d8>
   1586c:	ldr	r0, [r7]
   15870:	blx	r1
   15874:	b	15834 <__assert_fail@plt+0x42d8>
   15878:	mov	r0, #0
   1587c:	str	r0, [r4, #12]
   15880:	str	r0, [r4, #16]
   15884:	pop	{r4, r5, r6, r7, fp, pc}
   15888:	push	{r4, r5, r6, sl, fp, lr}
   1588c:	add	fp, sp, #16
   15890:	mov	r4, r0
   15894:	ldr	r0, [r0, #32]
   15898:	cmp	r0, #0
   1589c:	beq	15900 <__assert_fail@plt+0x43a4>
   158a0:	ldr	r0, [r4, #16]
   158a4:	cmp	r0, #0
   158a8:	beq	15900 <__assert_fail@plt+0x43a4>
   158ac:	ldr	r5, [r4]
   158b0:	ldr	r0, [r4, #4]
   158b4:	cmp	r5, r0
   158b8:	bcc	158d0 <__assert_fail@plt+0x4374>
   158bc:	b	15900 <__assert_fail@plt+0x43a4>
   158c0:	ldr	r0, [r4, #4]
   158c4:	add	r5, r5, #8
   158c8:	cmp	r5, r0
   158cc:	bcs	15900 <__assert_fail@plt+0x43a4>
   158d0:	ldr	r0, [r5]
   158d4:	cmp	r0, #0
   158d8:	cmpne	r5, #0
   158dc:	beq	158c0 <__assert_fail@plt+0x4364>
   158e0:	mov	r6, r5
   158e4:	ldr	r0, [r6]
   158e8:	ldr	r1, [r4, #32]
   158ec:	blx	r1
   158f0:	ldr	r6, [r6, #4]
   158f4:	cmp	r6, #0
   158f8:	bne	158e4 <__assert_fail@plt+0x4388>
   158fc:	b	158c0 <__assert_fail@plt+0x4364>
   15900:	ldr	r5, [r4]
   15904:	ldr	r0, [r4, #4]
   15908:	cmp	r5, r0
   1590c:	bcc	15924 <__assert_fail@plt+0x43c8>
   15910:	b	15948 <__assert_fail@plt+0x43ec>
   15914:	ldr	r0, [r4, #4]
   15918:	add	r5, r5, #8
   1591c:	cmp	r5, r0
   15920:	bcs	15948 <__assert_fail@plt+0x43ec>
   15924:	ldr	r0, [r5, #4]
   15928:	cmp	r0, #0
   1592c:	beq	15914 <__assert_fail@plt+0x43b8>
   15930:	ldr	r6, [r0, #4]
   15934:	bl	12fdc <__assert_fail@plt+0x1a80>
   15938:	cmp	r6, #0
   1593c:	mov	r0, r6
   15940:	bne	15930 <__assert_fail@plt+0x43d4>
   15944:	b	15914 <__assert_fail@plt+0x43b8>
   15948:	ldr	r0, [r4, #36]	; 0x24
   1594c:	cmp	r0, #0
   15950:	beq	15968 <__assert_fail@plt+0x440c>
   15954:	ldr	r5, [r0, #4]
   15958:	bl	12fdc <__assert_fail@plt+0x1a80>
   1595c:	cmp	r5, #0
   15960:	mov	r0, r5
   15964:	bne	15954 <__assert_fail@plt+0x43f8>
   15968:	ldr	r0, [r4]
   1596c:	bl	12fdc <__assert_fail@plt+0x1a80>
   15970:	mov	r0, r4
   15974:	pop	{r4, r5, r6, sl, fp, lr}
   15978:	b	12fdc <__assert_fail@plt+0x1a80>
   1597c:	push	{r4, r5, r6, sl, fp, lr}
   15980:	add	fp, sp, #16
   15984:	sub	sp, sp, #40	; 0x28
   15988:	mov	r2, r1
   1598c:	mov	r4, r0
   15990:	ldr	r1, [r0, #20]
   15994:	mov	r0, r2
   15998:	bl	15768 <__assert_fail@plt+0x420c>
   1599c:	mov	r5, #0
   159a0:	cmp	r0, #0
   159a4:	beq	15a80 <__assert_fail@plt+0x4524>
   159a8:	mov	r6, r0
   159ac:	ldr	r0, [r4, #8]
   159b0:	cmp	r6, r0
   159b4:	bne	159c0 <__assert_fail@plt+0x4464>
   159b8:	mov	r5, #1
   159bc:	b	15a80 <__assert_fail@plt+0x4524>
   159c0:	mov	r0, r6
   159c4:	mov	r1, #8
   159c8:	bl	1907c <__assert_fail@plt+0x7b20>
   159cc:	str	r0, [sp]
   159d0:	cmp	r0, #0
   159d4:	beq	15a80 <__assert_fail@plt+0x4524>
   159d8:	mov	r0, #0
   159dc:	str	r0, [sp, #16]
   159e0:	str	r0, [sp, #12]
   159e4:	str	r6, [sp, #8]
   159e8:	ldr	r0, [sp]
   159ec:	add	r0, r0, r6, lsl #3
   159f0:	str	r0, [sp, #4]
   159f4:	add	r6, r4, #20
   159f8:	ldm	r6, {r0, r1, r2, r3, r6}
   159fc:	add	ip, sp, #20
   15a00:	stm	ip, {r0, r1, r2, r3, r6}
   15a04:	mov	r0, sp
   15a08:	mov	r1, r4
   15a0c:	mov	r2, #0
   15a10:	bl	15a90 <__assert_fail@plt+0x4534>
   15a14:	cmp	r0, #0
   15a18:	beq	15a3c <__assert_fail@plt+0x44e0>
   15a1c:	ldr	r0, [r4]
   15a20:	bl	12fdc <__assert_fail@plt+0x1a80>
   15a24:	ldm	sp, {r0, r1, r2, r3}
   15a28:	stm	r4, {r0, r1, r2, r3}
   15a2c:	ldr	r0, [sp, #36]	; 0x24
   15a30:	str	r0, [r4, #36]	; 0x24
   15a34:	mov	r5, #1
   15a38:	b	15a80 <__assert_fail@plt+0x4524>
   15a3c:	ldr	r0, [sp, #36]	; 0x24
   15a40:	str	r0, [r4, #36]	; 0x24
   15a44:	mov	r1, sp
   15a48:	mov	r0, r4
   15a4c:	mov	r2, #1
   15a50:	bl	15a90 <__assert_fail@plt+0x4534>
   15a54:	cmp	r0, #0
   15a58:	beq	15a8c <__assert_fail@plt+0x4530>
   15a5c:	mov	r1, sp
   15a60:	mov	r5, #0
   15a64:	mov	r0, r4
   15a68:	mov	r2, #0
   15a6c:	bl	15a90 <__assert_fail@plt+0x4534>
   15a70:	cmp	r0, #0
   15a74:	beq	15a8c <__assert_fail@plt+0x4530>
   15a78:	ldr	r0, [sp]
   15a7c:	bl	12fdc <__assert_fail@plt+0x1a80>
   15a80:	mov	r0, r5
   15a84:	sub	sp, fp, #16
   15a88:	pop	{r4, r5, r6, sl, fp, pc}
   15a8c:	bl	11514 <abort@plt>
   15a90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a94:	add	fp, sp, #28
   15a98:	sub	sp, sp, #4
   15a9c:	mov	r7, r0
   15aa0:	ldr	r6, [r1]
   15aa4:	ldr	r0, [r1, #4]
   15aa8:	cmp	r6, r0
   15aac:	bcs	15bb8 <__assert_fail@plt+0x465c>
   15ab0:	mov	r9, r2
   15ab4:	mov	sl, r1
   15ab8:	b	15af0 <__assert_fail@plt+0x4594>
   15abc:	str	r4, [r5]
   15ac0:	ldr	r0, [r7, #12]
   15ac4:	add	r0, r0, #1
   15ac8:	str	r0, [r7, #12]
   15acc:	mov	r0, #0
   15ad0:	str	r0, [r6]
   15ad4:	ldr	r0, [sl, #12]
   15ad8:	sub	r0, r0, #1
   15adc:	str	r0, [sl, #12]
   15ae0:	add	r6, r6, #8
   15ae4:	ldr	r0, [sl, #4]
   15ae8:	cmp	r6, r0
   15aec:	bcs	15bb8 <__assert_fail@plt+0x465c>
   15af0:	ldr	r0, [r6]
   15af4:	cmp	r0, #0
   15af8:	beq	15ae0 <__assert_fail@plt+0x4584>
   15afc:	ldr	r4, [r6, #4]
   15b00:	cmp	r4, #0
   15b04:	bne	15b34 <__assert_fail@plt+0x45d8>
   15b08:	b	15b64 <__assert_fail@plt+0x4608>
   15b0c:	str	r5, [r0]
   15b10:	ldr	r0, [r7, #12]
   15b14:	add	r0, r0, #1
   15b18:	str	r0, [r7, #12]
   15b1c:	mov	r0, r7
   15b20:	mov	r1, r4
   15b24:	bl	1603c <__assert_fail@plt+0x4ae0>
   15b28:	cmp	r8, #0
   15b2c:	mov	r4, r8
   15b30:	beq	15b64 <__assert_fail@plt+0x4608>
   15b34:	ldr	r5, [r4]
   15b38:	mov	r0, r7
   15b3c:	mov	r1, r5
   15b40:	bl	15370 <__assert_fail@plt+0x3e14>
   15b44:	ldr	r1, [r0]
   15b48:	ldr	r8, [r4, #4]
   15b4c:	cmp	r1, #0
   15b50:	beq	15b0c <__assert_fail@plt+0x45b0>
   15b54:	ldr	r1, [r0, #4]
   15b58:	str	r1, [r4, #4]
   15b5c:	str	r4, [r0, #4]
   15b60:	b	15b28 <__assert_fail@plt+0x45cc>
   15b64:	mov	r0, #0
   15b68:	str	r0, [r6, #4]
   15b6c:	cmp	r9, #0
   15b70:	bne	15ae0 <__assert_fail@plt+0x4584>
   15b74:	ldr	r4, [r6]
   15b78:	mov	r0, r7
   15b7c:	mov	r1, r4
   15b80:	bl	15370 <__assert_fail@plt+0x3e14>
   15b84:	mov	r5, r0
   15b88:	ldr	r0, [r0]
   15b8c:	cmp	r0, #0
   15b90:	beq	15abc <__assert_fail@plt+0x4560>
   15b94:	mov	r0, r7
   15b98:	bl	15e28 <__assert_fail@plt+0x48cc>
   15b9c:	cmp	r0, #0
   15ba0:	beq	15bc4 <__assert_fail@plt+0x4668>
   15ba4:	str	r4, [r0]
   15ba8:	ldr	r1, [r5, #4]
   15bac:	str	r1, [r0, #4]
   15bb0:	str	r0, [r5, #4]
   15bb4:	b	15acc <__assert_fail@plt+0x4570>
   15bb8:	mov	r0, #1
   15bbc:	sub	sp, fp, #28
   15bc0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bc4:	mov	r0, #0
   15bc8:	sub	sp, fp, #28
   15bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15bd0:	push	{r4, r5, r6, r7, fp, lr}
   15bd4:	add	fp, sp, #16
   15bd8:	sub	sp, sp, #8
   15bdc:	cmp	r1, #0
   15be0:	beq	15d40 <__assert_fail@plt+0x47e4>
   15be4:	mov	r7, r2
   15be8:	mov	r5, r1
   15bec:	mov	r4, r0
   15bf0:	add	r2, sp, #4
   15bf4:	mov	r6, #0
   15bf8:	mov	r3, #0
   15bfc:	bl	15d48 <__assert_fail@plt+0x47ec>
   15c00:	cmp	r0, #0
   15c04:	beq	15c14 <__assert_fail@plt+0x46b8>
   15c08:	cmp	r7, #0
   15c0c:	strne	r0, [r7]
   15c10:	b	15d34 <__assert_fail@plt+0x47d8>
   15c14:	vldr	s0, [r4, #8]
   15c18:	vldr	s2, [r4, #12]
   15c1c:	ldr	r0, [r4, #20]
   15c20:	vldr	s4, [r0, #8]
   15c24:	vcvt.f32.u32	s0, s0
   15c28:	vcvt.f32.u32	s2, s2
   15c2c:	vmul.f32	s0, s4, s0
   15c30:	vcmpe.f32	s0, s2
   15c34:	vmrs	APSR_nzcv, fpscr
   15c38:	bpl	15ccc <__assert_fail@plt+0x4770>
   15c3c:	mov	r0, r4
   15c40:	bl	156bc <__assert_fail@plt+0x4160>
   15c44:	vldr	s0, [r4, #8]
   15c48:	vldr	s4, [r4, #12]
   15c4c:	ldr	r0, [r4, #20]
   15c50:	vcvt.f32.u32	s2, s0
   15c54:	vldr	s0, [r0, #8]
   15c58:	vcvt.f32.u32	s4, s4
   15c5c:	vmul.f32	s6, s0, s2
   15c60:	vcmpe.f32	s6, s4
   15c64:	vmrs	APSR_nzcv, fpscr
   15c68:	bpl	15ccc <__assert_fail@plt+0x4770>
   15c6c:	vldr	s4, [r0, #12]
   15c70:	vmul.f32	s2, s4, s2
   15c74:	ldrb	r0, [r0, #16]
   15c78:	vmul.f32	s0, s0, s2
   15c7c:	mvn	r6, #0
   15c80:	vldr	s4, [pc, #188]	; 15d44 <__assert_fail@plt+0x47e8>
   15c84:	cmp	r0, #0
   15c88:	vseleq.f32	s0, s0, s2
   15c8c:	vcmpe.f32	s0, s4
   15c90:	vmrs	APSR_nzcv, fpscr
   15c94:	bge	15d34 <__assert_fail@plt+0x47d8>
   15c98:	vcvt.u32.f32	s0, s0
   15c9c:	vmov	r1, s0
   15ca0:	mov	r0, r4
   15ca4:	bl	1597c <__assert_fail@plt+0x4420>
   15ca8:	cmp	r0, #0
   15cac:	beq	15d34 <__assert_fail@plt+0x47d8>
   15cb0:	add	r2, sp, #4
   15cb4:	mov	r0, r4
   15cb8:	mov	r1, r5
   15cbc:	mov	r3, #0
   15cc0:	bl	15d48 <__assert_fail@plt+0x47ec>
   15cc4:	cmp	r0, #0
   15cc8:	bne	15d40 <__assert_fail@plt+0x47e4>
   15ccc:	ldr	r6, [sp, #4]
   15cd0:	ldr	r0, [r6]
   15cd4:	cmp	r0, #0
   15cd8:	beq	15d0c <__assert_fail@plt+0x47b0>
   15cdc:	mov	r0, r4
   15ce0:	bl	15e28 <__assert_fail@plt+0x48cc>
   15ce4:	cmp	r0, #0
   15ce8:	beq	15d30 <__assert_fail@plt+0x47d4>
   15cec:	str	r5, [r0]
   15cf0:	ldr	r1, [r6, #4]
   15cf4:	str	r1, [r0, #4]
   15cf8:	str	r0, [r6, #4]
   15cfc:	ldr	r0, [r4, #16]
   15d00:	add	r0, r0, #1
   15d04:	str	r0, [r4, #16]
   15d08:	b	15d28 <__assert_fail@plt+0x47cc>
   15d0c:	str	r5, [r6]
   15d10:	ldr	r0, [r4, #12]
   15d14:	ldr	r1, [r4, #16]
   15d18:	add	r1, r1, #1
   15d1c:	add	r0, r0, #1
   15d20:	str	r0, [r4, #12]
   15d24:	str	r1, [r4, #16]
   15d28:	mov	r6, #1
   15d2c:	b	15d34 <__assert_fail@plt+0x47d8>
   15d30:	mvn	r6, #0
   15d34:	mov	r0, r6
   15d38:	sub	sp, fp, #16
   15d3c:	pop	{r4, r5, r6, r7, fp, pc}
   15d40:	bl	11514 <abort@plt>
   15d44:	svcmi	0x00800000
   15d48:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   15d4c:	add	fp, sp, #24
   15d50:	mov	r8, r3
   15d54:	mov	r4, r2
   15d58:	mov	r7, r1
   15d5c:	mov	r5, r0
   15d60:	bl	15370 <__assert_fail@plt+0x3e14>
   15d64:	str	r0, [r4]
   15d68:	ldr	r1, [r0]
   15d6c:	mov	r4, #0
   15d70:	cmp	r1, #0
   15d74:	beq	15e20 <__assert_fail@plt+0x48c4>
   15d78:	mov	r6, r0
   15d7c:	cmp	r1, r7
   15d80:	beq	15d98 <__assert_fail@plt+0x483c>
   15d84:	ldr	r2, [r5, #28]
   15d88:	mov	r0, r7
   15d8c:	blx	r2
   15d90:	cmp	r0, #0
   15d94:	beq	15dbc <__assert_fail@plt+0x4860>
   15d98:	ldr	r4, [r6]
   15d9c:	cmp	r8, #0
   15da0:	beq	15e20 <__assert_fail@plt+0x48c4>
   15da4:	ldr	r1, [r6, #4]
   15da8:	cmp	r1, #0
   15dac:	beq	15e18 <__assert_fail@plt+0x48bc>
   15db0:	ldm	r1, {r0, r2}
   15db4:	stm	r6, {r0, r2}
   15db8:	b	15e08 <__assert_fail@plt+0x48ac>
   15dbc:	ldr	r0, [r6, #4]!
   15dc0:	cmp	r0, #0
   15dc4:	beq	15e20 <__assert_fail@plt+0x48c4>
   15dc8:	ldr	r1, [r0]
   15dcc:	cmp	r1, r7
   15dd0:	beq	15df0 <__assert_fail@plt+0x4894>
   15dd4:	ldr	r2, [r5, #28]
   15dd8:	mov	r0, r7
   15ddc:	blx	r2
   15de0:	cmp	r0, #0
   15de4:	bne	15df0 <__assert_fail@plt+0x4894>
   15de8:	ldr	r6, [r6]
   15dec:	b	15dbc <__assert_fail@plt+0x4860>
   15df0:	ldr	r1, [r6]
   15df4:	ldr	r4, [r1]
   15df8:	cmp	r8, #0
   15dfc:	beq	15e20 <__assert_fail@plt+0x48c4>
   15e00:	ldr	r0, [r1, #4]
   15e04:	str	r0, [r6]
   15e08:	mov	r0, r5
   15e0c:	bl	1603c <__assert_fail@plt+0x4ae0>
   15e10:	mov	r0, r4
   15e14:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e18:	mov	r0, #0
   15e1c:	str	r0, [r6]
   15e20:	mov	r0, r4
   15e24:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   15e28:	mov	r1, r0
   15e2c:	ldr	r0, [r0, #36]	; 0x24
   15e30:	cmp	r0, #0
   15e34:	ldrne	r2, [r0, #4]
   15e38:	strne	r2, [r1, #36]	; 0x24
   15e3c:	bxne	lr
   15e40:	mov	r0, #8
   15e44:	b	190d0 <__assert_fail@plt+0x7b74>
   15e48:	push	{r4, sl, fp, lr}
   15e4c:	add	fp, sp, #8
   15e50:	sub	sp, sp, #8
   15e54:	mov	r4, r1
   15e58:	add	r2, sp, #4
   15e5c:	bl	15bd0 <__assert_fail@plt+0x4674>
   15e60:	cmn	r0, #1
   15e64:	beq	15e78 <__assert_fail@plt+0x491c>
   15e68:	ldr	r1, [sp, #4]
   15e6c:	cmp	r0, #0
   15e70:	moveq	r4, r1
   15e74:	b	15e7c <__assert_fail@plt+0x4920>
   15e78:	mov	r4, #0
   15e7c:	mov	r0, r4
   15e80:	sub	sp, fp, #8
   15e84:	pop	{r4, sl, fp, pc}
   15e88:	push	{r4, r5, r6, sl, fp, lr}
   15e8c:	add	fp, sp, #16
   15e90:	sub	sp, sp, #8
   15e94:	mov	r4, r0
   15e98:	add	r2, sp, #4
   15e9c:	mov	r3, #1
   15ea0:	bl	15d48 <__assert_fail@plt+0x47ec>
   15ea4:	mov	r5, r0
   15ea8:	cmp	r0, #0
   15eac:	beq	15f8c <__assert_fail@plt+0x4a30>
   15eb0:	ldr	r0, [r4, #16]
   15eb4:	sub	r0, r0, #1
   15eb8:	str	r0, [r4, #16]
   15ebc:	ldr	r0, [sp, #4]
   15ec0:	ldr	r0, [r0]
   15ec4:	cmp	r0, #0
   15ec8:	bne	15f8c <__assert_fail@plt+0x4a30>
   15ecc:	ldr	r0, [r4, #12]
   15ed0:	sub	r0, r0, #1
   15ed4:	vldr	s0, [r4, #8]
   15ed8:	str	r0, [r4, #12]
   15edc:	ldr	r1, [r4, #20]
   15ee0:	vldr	s2, [r1]
   15ee4:	vcvt.f32.u32	s0, s0
   15ee8:	vmov	s4, r0
   15eec:	vcvt.f32.u32	s4, s4
   15ef0:	vmul.f32	s0, s2, s0
   15ef4:	vcmpe.f32	s0, s4
   15ef8:	vmrs	APSR_nzcv, fpscr
   15efc:	ble	15f8c <__assert_fail@plt+0x4a30>
   15f00:	mov	r0, r4
   15f04:	bl	156bc <__assert_fail@plt+0x4160>
   15f08:	vldr	s0, [r4, #8]
   15f0c:	vldr	s2, [r4, #12]
   15f10:	ldr	r0, [r4, #20]
   15f14:	vcvt.f32.u32	s0, s0
   15f18:	vldr	s4, [r0]
   15f1c:	vcvt.f32.u32	s2, s2
   15f20:	vmul.f32	s4, s4, s0
   15f24:	vcmpe.f32	s4, s2
   15f28:	vmrs	APSR_nzcv, fpscr
   15f2c:	ble	15f8c <__assert_fail@plt+0x4a30>
   15f30:	vldr	s2, [r0, #4]
   15f34:	ldrb	r1, [r0, #16]
   15f38:	vmul.f32	s0, s2, s0
   15f3c:	cmp	r1, #0
   15f40:	bne	15f4c <__assert_fail@plt+0x49f0>
   15f44:	vldr	s2, [r0, #8]
   15f48:	vmul.f32	s0, s0, s2
   15f4c:	vcvt.u32.f32	s0, s0
   15f50:	vmov	r1, s0
   15f54:	mov	r0, r4
   15f58:	bl	1597c <__assert_fail@plt+0x4420>
   15f5c:	cmp	r0, #0
   15f60:	bne	15f8c <__assert_fail@plt+0x4a30>
   15f64:	ldr	r0, [r4, #36]	; 0x24
   15f68:	cmp	r0, #0
   15f6c:	beq	15f84 <__assert_fail@plt+0x4a28>
   15f70:	ldr	r6, [r0, #4]
   15f74:	bl	12fdc <__assert_fail@plt+0x1a80>
   15f78:	cmp	r6, #0
   15f7c:	mov	r0, r6
   15f80:	bne	15f70 <__assert_fail@plt+0x4a14>
   15f84:	mov	r0, #0
   15f88:	str	r0, [r4, #36]	; 0x24
   15f8c:	mov	r0, r5
   15f90:	sub	sp, fp, #16
   15f94:	pop	{r4, r5, r6, sl, fp, pc}
   15f98:	b	15e88 <__assert_fail@plt+0x492c>
   15f9c:	push	{r4, r5, fp, lr}
   15fa0:	add	fp, sp, #8
   15fa4:	cmp	r0, #10
   15fa8:	movls	r0, #10
   15fac:	orr	r5, r0, #1
   15fb0:	mvn	r4, #0
   15fb4:	cmn	r5, #1
   15fb8:	beq	15fd8 <__assert_fail@plt+0x4a7c>
   15fbc:	mov	r0, r5
   15fc0:	bl	15fec <__assert_fail@plt+0x4a90>
   15fc4:	cmp	r0, #0
   15fc8:	bne	15fe0 <__assert_fail@plt+0x4a84>
   15fcc:	add	r5, r5, #2
   15fd0:	cmn	r5, #1
   15fd4:	bne	15fbc <__assert_fail@plt+0x4a60>
   15fd8:	mov	r0, r4
   15fdc:	pop	{r4, r5, fp, pc}
   15fe0:	mov	r4, r5
   15fe4:	mov	r0, r4
   15fe8:	pop	{r4, r5, fp, pc}
   15fec:	mov	ip, #3
   15ff0:	cmp	r0, #10
   15ff4:	bcc	16028 <__assert_fail@plt+0x4acc>
   15ff8:	mov	ip, #3
   15ffc:	mov	r2, #9
   16000:	mov	r3, #16
   16004:	udiv	r1, r0, ip
   16008:	mls	r1, r1, ip, r0
   1600c:	cmp	r1, #0
   16010:	beq	16028 <__assert_fail@plt+0x4acc>
   16014:	add	r2, r3, r2
   16018:	add	r3, r3, #8
   1601c:	add	ip, ip, #2
   16020:	cmp	r2, r0
   16024:	bcc	16004 <__assert_fail@plt+0x4aa8>
   16028:	udiv	r1, r0, ip
   1602c:	mls	r0, r1, ip, r0
   16030:	cmp	r0, #0
   16034:	movwne	r0, #1
   16038:	bx	lr
   1603c:	mov	r2, #0
   16040:	str	r2, [r1]
   16044:	ldr	r2, [r0, #36]	; 0x24
   16048:	str	r2, [r1, #4]
   1604c:	str	r1, [r0, #36]	; 0x24
   16050:	bx	lr
   16054:	mov	r2, #0
   16058:	str	r2, [r0, #20]
   1605c:	str	r2, [r0, #24]
   16060:	mov	r3, #1
   16064:	strb	r3, [r0, #28]
   16068:	str	r1, [r0, r2, lsl #2]
   1606c:	add	r2, r2, #1
   16070:	cmp	r2, #4
   16074:	bne	16068 <__assert_fail@plt+0x4b0c>
   16078:	str	r1, [r0, #16]
   1607c:	bx	lr
   16080:	ldrb	r0, [r0, #28]
   16084:	bx	lr
   16088:	ldr	r2, [r0, #20]
   1608c:	ldrb	r3, [r0, #28]
   16090:	eor	r3, r3, #1
   16094:	add	r2, r2, r3
   16098:	and	r2, r2, #3
   1609c:	ldr	ip, [r0, r2, lsl #2]
   160a0:	str	r1, [r0, r2, lsl #2]
   160a4:	str	r2, [r0, #20]
   160a8:	ldr	r1, [r0, #24]
   160ac:	cmp	r2, r1
   160b0:	addeq	r1, r1, r3
   160b4:	andeq	r1, r1, #3
   160b8:	streq	r1, [r0, #24]
   160bc:	mov	r1, #0
   160c0:	strb	r1, [r0, #28]
   160c4:	mov	r0, ip
   160c8:	bx	lr
   160cc:	push	{r4, sl, fp, lr}
   160d0:	add	fp, sp, #8
   160d4:	mov	r4, r0
   160d8:	bl	16080 <__assert_fail@plt+0x4b24>
   160dc:	cmp	r0, #0
   160e0:	bne	16118 <__assert_fail@plt+0x4bbc>
   160e4:	ldr	r1, [r4, #16]
   160e8:	ldr	r2, [r4, #20]
   160ec:	ldr	r0, [r4, r2, lsl #2]
   160f0:	str	r1, [r4, r2, lsl #2]
   160f4:	ldr	r1, [r4, #20]
   160f8:	ldr	r2, [r4, #24]
   160fc:	cmp	r1, r2
   16100:	moveq	r1, #1
   16104:	strbeq	r1, [r4, #28]
   16108:	subne	r1, r1, #1
   1610c:	andne	r1, r1, #3
   16110:	strne	r1, [r4, #20]
   16114:	pop	{r4, sl, fp, pc}
   16118:	bl	11514 <abort@plt>
   1611c:	push	{r4, r5, r6, sl, fp, lr}
   16120:	add	fp, sp, #16
   16124:	mov	r4, r1
   16128:	mov	r5, r0
   1612c:	mov	r0, #0
   16130:	strb	r0, [r2, #20]
   16134:	add	r6, r2, #19
   16138:	mov	r0, r5
   1613c:	mov	r1, r4
   16140:	mov	r2, #10
   16144:	mov	r3, #0
   16148:	bl	19d6c <__assert_fail@plt+0x8810>
   1614c:	add	r2, r0, r0, lsl #2
   16150:	sub	r2, r5, r2, lsl #1
   16154:	orr	r2, r2, #48	; 0x30
   16158:	strb	r2, [r6], #-1
   1615c:	rsbs	r2, r5, #9
   16160:	rscs	r2, r4, #0
   16164:	mov	r5, r0
   16168:	mov	r4, r1
   1616c:	bcc	16138 <__assert_fail@plt+0x4bdc>
   16170:	add	r0, r6, #1
   16174:	pop	{r4, r5, r6, sl, fp, pc}
   16178:	sub	sp, sp, #4
   1617c:	push	{fp, lr}
   16180:	mov	fp, sp
   16184:	sub	sp, sp, #4
   16188:	str	r3, [fp, #8]
   1618c:	mov	r3, #0
   16190:	tst	r2, #64	; 0x40
   16194:	ldrne	r3, [fp, #8]
   16198:	bl	113f4 <openat64@plt>
   1619c:	bl	17e70 <__assert_fail@plt+0x6914>
   161a0:	mov	sp, fp
   161a4:	pop	{fp, lr}
   161a8:	add	sp, sp, #4
   161ac:	bx	lr
   161b0:	push	{r4, r5, r6, sl, fp, lr}
   161b4:	add	fp, sp, #16
   161b8:	mov	r4, r3
   161bc:	orr	r2, r2, #18688	; 0x4900
   161c0:	orr	r2, r2, #524288	; 0x80000
   161c4:	bl	16178 <__assert_fail@plt+0x4c1c>
   161c8:	mov	r5, r0
   161cc:	mov	r0, #0
   161d0:	cmp	r5, #0
   161d4:	bmi	1620c <__assert_fail@plt+0x4cb0>
   161d8:	mov	r0, r5
   161dc:	bl	114b4 <fdopendir@plt>
   161e0:	cmp	r0, #0
   161e4:	beq	161f0 <__assert_fail@plt+0x4c94>
   161e8:	str	r5, [r4]
   161ec:	pop	{r4, r5, r6, sl, fp, pc}
   161f0:	bl	1140c <__errno_location@plt>
   161f4:	mov	r4, r0
   161f8:	ldr	r6, [r0]
   161fc:	mov	r0, r5
   16200:	bl	11520 <close@plt>
   16204:	str	r6, [r4]
   16208:	mov	r0, #0
   1620c:	pop	{r4, r5, r6, sl, fp, pc}
   16210:	push	{r4, r5, fp, lr}
   16214:	add	fp, sp, #8
   16218:	cmp	r0, #0
   1621c:	beq	162b0 <__assert_fail@plt+0x4d54>
   16220:	mov	r4, r0
   16224:	mov	r1, #47	; 0x2f
   16228:	bl	11490 <strrchr@plt>
   1622c:	cmp	r0, #0
   16230:	mov	r5, r4
   16234:	addne	r5, r0, #1
   16238:	sub	r0, r5, r4
   1623c:	cmp	r0, #7
   16240:	blt	16294 <__assert_fail@plt+0x4d38>
   16244:	sub	r0, r5, #7
   16248:	movw	r1, #45428	; 0xb174
   1624c:	movt	r1, #1
   16250:	mov	r2, #7
   16254:	bl	11508 <strncmp@plt>
   16258:	cmp	r0, #0
   1625c:	bne	16294 <__assert_fail@plt+0x4d38>
   16260:	movw	r1, #45436	; 0xb17c
   16264:	movt	r1, #1
   16268:	mov	r0, r5
   1626c:	mov	r2, #3
   16270:	bl	11508 <strncmp@plt>
   16274:	cmp	r0, #0
   16278:	beq	16284 <__assert_fail@plt+0x4d28>
   1627c:	mov	r4, r5
   16280:	b	16294 <__assert_fail@plt+0x4d38>
   16284:	add	r4, r5, #3
   16288:	movw	r0, #49536	; 0xc180
   1628c:	movt	r0, #2
   16290:	str	r4, [r0]
   16294:	movw	r0, #49540	; 0xc184
   16298:	movt	r0, #2
   1629c:	str	r4, [r0]
   162a0:	movw	r0, #49600	; 0xc1c0
   162a4:	movt	r0, #2
   162a8:	str	r4, [r0]
   162ac:	pop	{r4, r5, fp, pc}
   162b0:	movw	r0, #49552	; 0xc190
   162b4:	movt	r0, #2
   162b8:	ldr	r3, [r0]
   162bc:	movw	r0, #45372	; 0xb13c
   162c0:	movt	r0, #1
   162c4:	mov	r1, #55	; 0x37
   162c8:	mov	r2, #1
   162cc:	bl	11310 <fwrite@plt>
   162d0:	bl	11514 <abort@plt>
   162d4:	push	{r4, r5, r6, sl, fp, lr}
   162d8:	add	fp, sp, #16
   162dc:	mov	r4, r0
   162e0:	movw	r0, #49608	; 0xc1c8
   162e4:	movt	r0, #2
   162e8:	cmp	r4, #0
   162ec:	moveq	r4, r0
   162f0:	bl	1140c <__errno_location@plt>
   162f4:	mov	r5, r0
   162f8:	ldr	r6, [r0]
   162fc:	mov	r0, r4
   16300:	mov	r1, #48	; 0x30
   16304:	bl	18a18 <__assert_fail@plt+0x74bc>
   16308:	str	r6, [r5]
   1630c:	pop	{r4, r5, r6, sl, fp, pc}
   16310:	movw	r1, #49608	; 0xc1c8
   16314:	movt	r1, #2
   16318:	cmp	r0, #0
   1631c:	movne	r1, r0
   16320:	ldr	r0, [r1]
   16324:	bx	lr
   16328:	movw	r2, #49608	; 0xc1c8
   1632c:	movt	r2, #2
   16330:	cmp	r0, #0
   16334:	movne	r2, r0
   16338:	str	r1, [r2]
   1633c:	bx	lr
   16340:	movw	r3, #49608	; 0xc1c8
   16344:	movt	r3, #2
   16348:	cmp	r0, #0
   1634c:	movne	r3, r0
   16350:	ubfx	r0, r1, #5, #3
   16354:	add	ip, r3, r0, lsl #2
   16358:	ldr	r3, [ip, #8]
   1635c:	and	r1, r1, #31
   16360:	mov	r0, #1
   16364:	and	r0, r0, r3, lsr r1
   16368:	and	r2, r2, #1
   1636c:	eor	r2, r0, r2
   16370:	eor	r1, r3, r2, lsl r1
   16374:	str	r1, [ip, #8]
   16378:	bx	lr
   1637c:	movw	r2, #49608	; 0xc1c8
   16380:	movt	r2, #2
   16384:	cmp	r0, #0
   16388:	movne	r2, r0
   1638c:	ldr	r0, [r2, #4]
   16390:	str	r1, [r2, #4]
   16394:	bx	lr
   16398:	push	{fp, lr}
   1639c:	mov	fp, sp
   163a0:	movw	r3, #49608	; 0xc1c8
   163a4:	movt	r3, #2
   163a8:	cmp	r0, #0
   163ac:	movne	r3, r0
   163b0:	mov	r0, #10
   163b4:	str	r0, [r3]
   163b8:	cmp	r1, #0
   163bc:	cmpne	r2, #0
   163c0:	bne	163c8 <__assert_fail@plt+0x4e6c>
   163c4:	bl	11514 <abort@plt>
   163c8:	str	r1, [r3, #40]	; 0x28
   163cc:	str	r2, [r3, #44]	; 0x2c
   163d0:	pop	{fp, pc}
   163d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d8:	add	fp, sp, #28
   163dc:	sub	sp, sp, #20
   163e0:	mov	r8, r3
   163e4:	mov	r9, r2
   163e8:	mov	sl, r1
   163ec:	mov	r7, r0
   163f0:	ldr	r0, [fp, #8]
   163f4:	movw	r5, #49608	; 0xc1c8
   163f8:	movt	r5, #2
   163fc:	cmp	r0, #0
   16400:	movne	r5, r0
   16404:	bl	1140c <__errno_location@plt>
   16408:	mov	r4, r0
   1640c:	ldm	r5, {r0, r1}
   16410:	ldr	r2, [r5, #40]	; 0x28
   16414:	ldr	r3, [r5, #44]	; 0x2c
   16418:	ldr	r6, [r4]
   1641c:	add	r5, r5, #8
   16420:	stm	sp, {r0, r1, r5}
   16424:	str	r2, [sp, #12]
   16428:	str	r3, [sp, #16]
   1642c:	mov	r0, r7
   16430:	mov	r1, sl
   16434:	mov	r2, r9
   16438:	mov	r3, r8
   1643c:	bl	1644c <__assert_fail@plt+0x4ef0>
   16440:	str	r6, [r4]
   16444:	sub	sp, fp, #28
   16448:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1644c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16450:	add	fp, sp, #28
   16454:	sub	sp, sp, #156	; 0x9c
   16458:	mov	r9, r3
   1645c:	mov	r7, r1
   16460:	mov	r6, r0
   16464:	str	r2, [fp, #-80]	; 0xffffffb0
   16468:	add	r0, r2, #1
   1646c:	str	r0, [sp, #76]	; 0x4c
   16470:	ldr	r0, [fp, #12]
   16474:	and	r1, r0, #1
   16478:	str	r1, [sp, #40]	; 0x28
   1647c:	and	r1, r0, #4
   16480:	str	r1, [sp, #36]	; 0x24
   16484:	ubfx	r4, r0, #1, #1
   16488:	bl	11328 <__ctype_get_mb_cur_max@plt>
   1648c:	str	r0, [sp, #44]	; 0x2c
   16490:	ldr	r0, [fp, #24]
   16494:	str	r0, [sp, #88]	; 0x58
   16498:	ldr	r0, [fp, #20]
   1649c:	str	r0, [sp, #80]	; 0x50
   164a0:	ldr	r1, [fp, #8]
   164a4:	mov	r0, #0
   164a8:	str	r0, [sp, #84]	; 0x54
   164ac:	mov	r0, #0
   164b0:	str	r0, [fp, #-84]	; 0xffffffac
   164b4:	mov	r0, #0
   164b8:	str	r0, [fp, #-72]	; 0xffffffb8
   164bc:	mov	r0, #0
   164c0:	mov	r2, #0
   164c4:	str	r2, [fp, #-56]	; 0xffffffc8
   164c8:	mov	r2, #0
   164cc:	str	r2, [sp, #64]	; 0x40
   164d0:	mov	r2, #1
   164d4:	str	r2, [fp, #-48]	; 0xffffffd0
   164d8:	cmp	r1, #10
   164dc:	bhi	17408 <__assert_fail@plt+0x5eac>
   164e0:	mov	sl, r7
   164e4:	mov	r7, r1
   164e8:	add	r1, pc, #24
   164ec:	mov	r8, #0
   164f0:	mov	r2, #1
   164f4:	mov	r3, #0
   164f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   164fc:	mov	lr, r9
   16500:	mov	r5, r6
   16504:	ldr	pc, [r1, r7, lsl #2]
   16508:	ldrdeq	r6, [r1], -ip
   1650c:	andeq	r6, r1, ip, lsl r6
   16510:	andeq	r6, r1, ip, ror #11
   16514:	ldrdeq	r6, [r1], -r4
   16518:	andeq	r6, r1, r0, lsl r6
   1651c:	andeq	r6, r1, r0, ror r6
   16520:	strdeq	r6, [r1], -ip
   16524:	andeq	r6, r1, ip, asr #13
   16528:	andeq	r6, r1, r4, lsr r5
   1652c:	andeq	r6, r1, r4, lsr r5
   16530:	andeq	r6, r1, r0, ror #10
   16534:	movw	r0, #45518	; 0xb1ce
   16538:	movt	r0, #1
   1653c:	mov	r1, r7
   16540:	bl	17a10 <__assert_fail@plt+0x64b4>
   16544:	str	r0, [sp, #80]	; 0x50
   16548:	movw	r0, #45520	; 0xb1d0
   1654c:	movt	r0, #1
   16550:	mov	r1, r7
   16554:	bl	17a10 <__assert_fail@plt+0x64b4>
   16558:	mov	r5, r6
   1655c:	str	r0, [sp, #88]	; 0x58
   16560:	mov	r8, #0
   16564:	tst	r4, #1
   16568:	str	r7, [fp, #-64]	; 0xffffffc0
   1656c:	bne	165a4 <__assert_fail@plt+0x5048>
   16570:	ldr	r0, [sp, #80]	; 0x50
   16574:	ldrb	r0, [r0]
   16578:	cmp	r0, #0
   1657c:	beq	165a4 <__assert_fail@plt+0x5048>
   16580:	ldr	r1, [sp, #80]	; 0x50
   16584:	add	r1, r1, #1
   16588:	mov	r8, #0
   1658c:	cmp	r8, sl
   16590:	strbcc	r0, [r5, r8]
   16594:	ldrb	r0, [r1, r8]
   16598:	add	r8, r8, #1
   1659c:	cmp	r0, #0
   165a0:	bne	1658c <__assert_fail@plt+0x5030>
   165a4:	ldr	r7, [sp, #88]	; 0x58
   165a8:	mov	r0, r7
   165ac:	bl	113dc <strlen@plt>
   165b0:	mov	r5, r6
   165b4:	str	r0, [fp, #-72]	; 0xffffffb8
   165b8:	str	r7, [fp, #-84]	; 0xffffffac
   165bc:	mov	r2, #1
   165c0:	mov	r3, r4
   165c4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   165c8:	mov	lr, r9
   165cc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   165d0:	b	166cc <__assert_fail@plt+0x5170>
   165d4:	mov	r0, #1
   165d8:	b	1661c <__assert_fail@plt+0x50c0>
   165dc:	mov	r7, #0
   165e0:	mov	r8, #0
   165e4:	mov	r2, r0
   165e8:	b	166c8 <__assert_fail@plt+0x516c>
   165ec:	tst	r4, #1
   165f0:	bne	1661c <__assert_fail@plt+0x50c0>
   165f4:	mov	r2, r0
   165f8:	b	16644 <__assert_fail@plt+0x50e8>
   165fc:	mov	r0, #1
   16600:	str	r0, [fp, #-72]	; 0xffffffb8
   16604:	mov	r8, #0
   16608:	mov	r7, #5
   1660c:	b	16688 <__assert_fail@plt+0x512c>
   16610:	mov	r2, #1
   16614:	tst	r4, #1
   16618:	beq	16644 <__assert_fail@plt+0x50e8>
   1661c:	mov	r1, #1
   16620:	str	r1, [fp, #-72]	; 0xffffffb8
   16624:	mov	r8, #0
   16628:	mov	r7, #2
   1662c:	movw	r1, #45520	; 0xb1d0
   16630:	movt	r1, #1
   16634:	str	r1, [fp, #-84]	; 0xffffffac
   16638:	mov	r2, r0
   1663c:	mov	r3, #1
   16640:	b	166cc <__assert_fail@plt+0x5170>
   16644:	mov	r8, #1
   16648:	mov	r7, #2
   1664c:	cmp	sl, #0
   16650:	movne	r0, #39	; 0x27
   16654:	strbne	r0, [r5]
   16658:	movw	r0, #45520	; 0xb1d0
   1665c:	movt	r0, #1
   16660:	str	r0, [fp, #-84]	; 0xffffffac
   16664:	mov	r0, #1
   16668:	str	r0, [fp, #-72]	; 0xffffffb8
   1666c:	b	166c8 <__assert_fail@plt+0x516c>
   16670:	mov	r7, #5
   16674:	tst	r4, #1
   16678:	beq	166a0 <__assert_fail@plt+0x5144>
   1667c:	mov	r0, #1
   16680:	str	r0, [fp, #-72]	; 0xffffffb8
   16684:	mov	r8, #0
   16688:	movw	r0, #45516	; 0xb1cc
   1668c:	movt	r0, #1
   16690:	str	r0, [fp, #-84]	; 0xffffffac
   16694:	mov	r2, #1
   16698:	mov	r3, #1
   1669c:	b	166cc <__assert_fail@plt+0x5170>
   166a0:	cmp	sl, #0
   166a4:	movne	r0, #34	; 0x22
   166a8:	strbne	r0, [r5]
   166ac:	mov	r8, #1
   166b0:	movw	r0, #45516	; 0xb1cc
   166b4:	movt	r0, #1
   166b8:	str	r0, [fp, #-84]	; 0xffffffac
   166bc:	mov	r0, #1
   166c0:	str	r0, [fp, #-72]	; 0xffffffb8
   166c4:	mov	r2, #1
   166c8:	mov	r3, #0
   166cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   166d0:	cmp	r0, #0
   166d4:	movwne	r0, #1
   166d8:	and	r1, r0, r3
   166dc:	and	r1, r2, r1
   166e0:	str	r1, [sp, #56]	; 0x38
   166e4:	sub	r1, r7, #2
   166e8:	clz	r1, r1
   166ec:	lsr	r1, r1, #5
   166f0:	and	r1, r1, r3
   166f4:	str	r1, [sp, #68]	; 0x44
   166f8:	str	r7, [fp, #-64]	; 0xffffffc0
   166fc:	subs	r1, r7, #2
   16700:	movwne	r1, #1
   16704:	eor	r4, r3, #1
   16708:	str	r4, [fp, #-88]	; 0xffffffa8
   1670c:	orr	r4, r1, r4
   16710:	str	r4, [sp, #72]	; 0x48
   16714:	and	r1, r1, r2
   16718:	and	r0, r0, r1
   1671c:	str	r0, [fp, #-60]	; 0xffffffc4
   16720:	str	r3, [fp, #-76]	; 0xffffffb4
   16724:	orr	r0, r1, r3
   16728:	eor	r0, r0, #1
   1672c:	ldr	r1, [fp, #16]
   16730:	clz	r1, r1
   16734:	lsr	r1, r1, #5
   16738:	orr	r0, r1, r0
   1673c:	str	r0, [fp, #-68]	; 0xffffffbc
   16740:	str	r2, [sp, #92]	; 0x5c
   16744:	eor	r0, r2, #1
   16748:	str	r0, [sp, #60]	; 0x3c
   1674c:	mov	r7, #0
   16750:	cmn	lr, #1
   16754:	beq	16764 <__assert_fail@plt+0x5208>
   16758:	cmp	r7, lr
   1675c:	bne	16770 <__assert_fail@plt+0x5214>
   16760:	b	1727c <__assert_fail@plt+0x5d20>
   16764:	ldrb	r0, [ip, r7]
   16768:	cmp	r0, #0
   1676c:	beq	1727c <__assert_fail@plt+0x5d20>
   16770:	mov	r9, #0
   16774:	ldr	r0, [fp, #-60]	; 0xffffffc4
   16778:	cmp	r0, #0
   1677c:	beq	167b0 <__assert_fail@plt+0x5254>
   16780:	ldr	r0, [fp, #-72]	; 0xffffffb8
   16784:	add	r4, r7, r0
   16788:	cmp	r0, #2
   1678c:	bcc	167a8 <__assert_fail@plt+0x524c>
   16790:	cmn	lr, #1
   16794:	bne	167a8 <__assert_fail@plt+0x524c>
   16798:	mov	r0, ip
   1679c:	bl	113dc <strlen@plt>
   167a0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   167a4:	mov	lr, r0
   167a8:	cmp	r4, lr
   167ac:	bls	167bc <__assert_fail@plt+0x5260>
   167b0:	mov	r0, #0
   167b4:	str	r0, [fp, #-52]	; 0xffffffcc
   167b8:	b	16800 <__assert_fail@plt+0x52a4>
   167bc:	mov	r4, lr
   167c0:	add	r0, ip, r7
   167c4:	ldr	r1, [fp, #-84]	; 0xffffffac
   167c8:	ldr	r2, [fp, #-72]	; 0xffffffb8
   167cc:	bl	113c4 <bcmp@plt>
   167d0:	cmp	r0, #0
   167d4:	mov	r1, r0
   167d8:	movwne	r1, #1
   167dc:	ldr	r2, [fp, #-88]	; 0xffffffa8
   167e0:	orr	r1, r1, r2
   167e4:	tst	r1, #1
   167e8:	beq	17350 <__assert_fail@plt+0x5df4>
   167ec:	clz	r0, r0
   167f0:	lsr	r0, r0, #5
   167f4:	str	r0, [fp, #-52]	; 0xffffffcc
   167f8:	ldr	ip, [fp, #-80]	; 0xffffffb0
   167fc:	mov	lr, r4
   16800:	ldrb	r4, [ip, r7]
   16804:	cmp	r4, #126	; 0x7e
   16808:	bhi	16d38 <__assert_fail@plt+0x57dc>
   1680c:	mov	r6, #1
   16810:	mov	r2, #110	; 0x6e
   16814:	mov	r0, #97	; 0x61
   16818:	add	r3, pc, #4
   1681c:	mov	r1, #0
   16820:	ldr	pc, [r3, r4, lsl #2]
   16824:	muleq	r1, r8, fp
   16828:	andeq	r6, r1, r8, lsr sp
   1682c:	andeq	r6, r1, r8, lsr sp
   16830:	andeq	r6, r1, r8, lsr sp
   16834:	andeq	r6, r1, r8, lsr sp
   16838:	andeq	r6, r1, r8, lsr sp
   1683c:	andeq	r6, r1, r8, lsr sp
   16840:	andeq	r6, r1, ip, lsl #28
   16844:	andeq	r6, r1, r8, ror fp
   16848:	andeq	r6, r1, r0, ror fp
   1684c:	andeq	r6, r1, r4, lsl #23
   16850:	andeq	r6, r1, r0, lsr #25
   16854:	andeq	r6, r1, r8, ror #22
   16858:	andeq	r6, r1, r0, lsl #23
   1685c:	andeq	r6, r1, r8, lsr sp
   16860:	andeq	r6, r1, r8, lsr sp
   16864:	andeq	r6, r1, r8, lsr sp
   16868:	andeq	r6, r1, r8, lsr sp
   1686c:	andeq	r6, r1, r8, lsr sp
   16870:	andeq	r6, r1, r8, lsr sp
   16874:	andeq	r6, r1, r8, lsr sp
   16878:	andeq	r6, r1, r8, lsr sp
   1687c:	andeq	r6, r1, r8, lsr sp
   16880:	andeq	r6, r1, r8, lsr sp
   16884:	andeq	r6, r1, r8, lsr sp
   16888:	andeq	r6, r1, r8, lsr sp
   1688c:	andeq	r6, r1, r8, lsr sp
   16890:	andeq	r6, r1, r8, lsr sp
   16894:	andeq	r6, r1, r8, lsr sp
   16898:	andeq	r6, r1, r8, lsr sp
   1689c:	andeq	r6, r1, r8, lsr sp
   168a0:	andeq	r6, r1, r8, lsr sp
   168a4:	andeq	r6, r1, ip, lsl fp
   168a8:	andeq	r6, r1, r0, lsr #22
   168ac:	andeq	r6, r1, r0, lsr #22
   168b0:	andeq	r6, r1, r8, lsl #22
   168b4:	andeq	r6, r1, r0, lsr #22
   168b8:	andeq	r6, r1, r0, lsr #20
   168bc:	andeq	r6, r1, r0, lsr #22
   168c0:	andeq	r6, r1, r8, lsr #25
   168c4:	andeq	r6, r1, r0, lsr #22
   168c8:	andeq	r6, r1, r0, lsr #22
   168cc:	andeq	r6, r1, r0, lsr #22
   168d0:	andeq	r6, r1, r0, lsr #20
   168d4:	andeq	r6, r1, r0, lsr #20
   168d8:	andeq	r6, r1, r0, lsr #20
   168dc:	andeq	r6, r1, r0, lsr #20
   168e0:	andeq	r6, r1, r0, lsr #20
   168e4:	andeq	r6, r1, r0, lsr #20
   168e8:	andeq	r6, r1, r0, lsr #20
   168ec:	andeq	r6, r1, r0, lsr #20
   168f0:	andeq	r6, r1, r0, lsr #20
   168f4:	andeq	r6, r1, r0, lsr #20
   168f8:	andeq	r6, r1, r0, lsr #20
   168fc:	andeq	r6, r1, r0, lsr #20
   16900:	andeq	r6, r1, r0, lsr #20
   16904:	andeq	r6, r1, r0, lsr #20
   16908:	andeq	r6, r1, r0, lsr #20
   1690c:	andeq	r6, r1, r0, lsr #20
   16910:	andeq	r6, r1, r0, lsr #22
   16914:	andeq	r6, r1, r0, lsr #22
   16918:	andeq	r6, r1, r0, lsr #22
   1691c:	andeq	r6, r1, r0, lsr #22
   16920:	andeq	r6, r1, r0, ror ip
   16924:	andeq	r6, r1, r8, lsr sp
   16928:	andeq	r6, r1, r0, lsr #20
   1692c:	andeq	r6, r1, r0, lsr #20
   16930:	andeq	r6, r1, r0, lsr #20
   16934:	andeq	r6, r1, r0, lsr #20
   16938:	andeq	r6, r1, r0, lsr #20
   1693c:	andeq	r6, r1, r0, lsr #20
   16940:	andeq	r6, r1, r0, lsr #20
   16944:	andeq	r6, r1, r0, lsr #20
   16948:	andeq	r6, r1, r0, lsr #20
   1694c:	andeq	r6, r1, r0, lsr #20
   16950:	andeq	r6, r1, r0, lsr #20
   16954:	andeq	r6, r1, r0, lsr #20
   16958:	andeq	r6, r1, r0, lsr #20
   1695c:	andeq	r6, r1, r0, lsr #20
   16960:	andeq	r6, r1, r0, lsr #20
   16964:	andeq	r6, r1, r0, lsr #20
   16968:	andeq	r6, r1, r0, lsr #20
   1696c:	andeq	r6, r1, r0, lsr #20
   16970:	andeq	r6, r1, r0, lsr #20
   16974:	andeq	r6, r1, r0, lsr #20
   16978:	andeq	r6, r1, r0, lsr #20
   1697c:	andeq	r6, r1, r0, lsr #20
   16980:	andeq	r6, r1, r0, lsr #20
   16984:	andeq	r6, r1, r0, lsr #20
   16988:	andeq	r6, r1, r0, lsr #20
   1698c:	andeq	r6, r1, r0, lsr #20
   16990:	andeq	r6, r1, r0, lsr #22
   16994:	andeq	r6, r1, r8, asr #22
   16998:	andeq	r6, r1, r0, lsr #20
   1699c:	andeq	r6, r1, r0, lsr #22
   169a0:	andeq	r6, r1, r0, lsr #20
   169a4:	andeq	r6, r1, r0, lsr #22
   169a8:	andeq	r6, r1, r0, lsr #20
   169ac:	andeq	r6, r1, r0, lsr #20
   169b0:	andeq	r6, r1, r0, lsr #20
   169b4:	andeq	r6, r1, r0, lsr #20
   169b8:	andeq	r6, r1, r0, lsr #20
   169bc:	andeq	r6, r1, r0, lsr #20
   169c0:	andeq	r6, r1, r0, lsr #20
   169c4:	andeq	r6, r1, r0, lsr #20
   169c8:	andeq	r6, r1, r0, lsr #20
   169cc:	andeq	r6, r1, r0, lsr #20
   169d0:	andeq	r6, r1, r0, lsr #20
   169d4:	andeq	r6, r1, r0, lsr #20
   169d8:	andeq	r6, r1, r0, lsr #20
   169dc:	andeq	r6, r1, r0, lsr #20
   169e0:	andeq	r6, r1, r0, lsr #20
   169e4:	andeq	r6, r1, r0, lsr #20
   169e8:	andeq	r6, r1, r0, lsr #20
   169ec:	andeq	r6, r1, r0, lsr #20
   169f0:	andeq	r6, r1, r0, lsr #20
   169f4:	andeq	r6, r1, r0, lsr #20
   169f8:	andeq	r6, r1, r0, lsr #20
   169fc:	andeq	r6, r1, r0, lsr #20
   16a00:	andeq	r6, r1, r0, lsr #20
   16a04:	andeq	r6, r1, r0, lsr #20
   16a08:	andeq	r6, r1, r0, lsr #20
   16a0c:	andeq	r6, r1, r0, lsr #20
   16a10:	ldrdeq	r6, [r1], -ip
   16a14:	andeq	r6, r1, r0, lsr #22
   16a18:	ldrdeq	r6, [r1], -ip
   16a1c:	andeq	r6, r1, r8, lsl #22
   16a20:	ldr	r0, [fp, #-68]	; 0xffffffbc
   16a24:	tst	r0, #1
   16a28:	bne	16a54 <__assert_fail@plt+0x54f8>
   16a2c:	ubfx	r0, r4, #5, #3
   16a30:	ldr	r1, [fp, #16]
   16a34:	ldr	r0, [r1, r0, lsl #2]
   16a38:	and	r1, r4, #31
   16a3c:	mov	r2, #1
   16a40:	tst	r0, r2, lsl r1
   16a44:	beq	16a54 <__assert_fail@plt+0x54f8>
   16a48:	mov	r0, r4
   16a4c:	mov	r1, r6
   16a50:	b	16a68 <__assert_fail@plt+0x550c>
   16a54:	ldr	r0, [fp, #-52]	; 0xffffffcc
   16a58:	cmp	r0, #0
   16a5c:	mov	r0, r4
   16a60:	mov	r1, r6
   16a64:	beq	16da0 <__assert_fail@plt+0x5844>
   16a68:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16a6c:	tst	r2, #1
   16a70:	bne	17364 <__assert_fail@plt+0x5e08>
   16a74:	ldr	r2, [fp, #-64]	; 0xffffffc0
   16a78:	subs	r2, r2, #2
   16a7c:	movwne	r2, #1
   16a80:	ldr	r3, [fp, #-56]	; 0xffffffc8
   16a84:	orr	r2, r2, r3
   16a88:	tst	r2, #1
   16a8c:	bne	16ac8 <__assert_fail@plt+0x556c>
   16a90:	cmp	r8, sl
   16a94:	movcc	r2, #39	; 0x27
   16a98:	strbcc	r2, [r5, r8]
   16a9c:	add	r2, r8, #1
   16aa0:	cmp	r2, sl
   16aa4:	movcc	r3, #36	; 0x24
   16aa8:	strbcc	r3, [r5, r2]
   16aac:	add	r2, r8, #2
   16ab0:	cmp	r2, sl
   16ab4:	movcc	r3, #39	; 0x27
   16ab8:	strbcc	r3, [r5, r2]
   16abc:	add	r8, r8, #3
   16ac0:	mov	r2, #1
   16ac4:	str	r2, [fp, #-56]	; 0xffffffc8
   16ac8:	cmp	r8, sl
   16acc:	movcc	r2, #92	; 0x5c
   16ad0:	strbcc	r2, [r5, r8]
   16ad4:	add	r8, r8, #1
   16ad8:	b	16de4 <__assert_fail@plt+0x5888>
   16adc:	cmp	lr, #1
   16ae0:	beq	16b08 <__assert_fail@plt+0x55ac>
   16ae4:	mov	r6, #0
   16ae8:	cmn	lr, #1
   16aec:	bne	16b14 <__assert_fail@plt+0x55b8>
   16af0:	ldrb	r0, [ip, #1]
   16af4:	cmp	r0, #0
   16af8:	beq	16b08 <__assert_fail@plt+0x55ac>
   16afc:	mvn	lr, #0
   16b00:	mov	r9, #0
   16b04:	b	16a20 <__assert_fail@plt+0x54c4>
   16b08:	mov	r6, #0
   16b0c:	cmp	r7, #0
   16b10:	beq	16b1c <__assert_fail@plt+0x55c0>
   16b14:	mov	r9, #0
   16b18:	b	16a20 <__assert_fail@plt+0x54c4>
   16b1c:	mov	r1, #1
   16b20:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16b24:	cmp	r0, #2
   16b28:	bne	16b40 <__assert_fail@plt+0x55e4>
   16b2c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b30:	tst	r0, #1
   16b34:	mov	r6, r1
   16b38:	beq	16a20 <__assert_fail@plt+0x54c4>
   16b3c:	b	17364 <__assert_fail@plt+0x5e08>
   16b40:	mov	r6, r1
   16b44:	b	16a20 <__assert_fail@plt+0x54c4>
   16b48:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16b4c:	cmp	r0, #2
   16b50:	bne	16d84 <__assert_fail@plt+0x5828>
   16b54:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16b58:	tst	r0, #1
   16b5c:	bne	17364 <__assert_fail@plt+0x5e08>
   16b60:	mov	r9, #0
   16b64:	b	16d98 <__assert_fail@plt+0x583c>
   16b68:	mov	r0, #102	; 0x66
   16b6c:	b	16e0c <__assert_fail@plt+0x58b0>
   16b70:	mov	r2, #116	; 0x74
   16b74:	b	16b84 <__assert_fail@plt+0x5628>
   16b78:	mov	r0, #98	; 0x62
   16b7c:	b	16e0c <__assert_fail@plt+0x58b0>
   16b80:	mov	r2, #114	; 0x72
   16b84:	ldr	r0, [sp, #72]	; 0x48
   16b88:	tst	r0, #1
   16b8c:	mov	r0, r2
   16b90:	bne	16e0c <__assert_fail@plt+0x58b0>
   16b94:	b	17364 <__assert_fail@plt+0x5e08>
   16b98:	ldr	r0, [sp, #92]	; 0x5c
   16b9c:	tst	r0, #1
   16ba0:	beq	16e28 <__assert_fail@plt+0x58cc>
   16ba4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16ba8:	tst	r0, #1
   16bac:	bne	17364 <__assert_fail@plt+0x5e08>
   16bb0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16bb4:	subs	r0, r0, #2
   16bb8:	movwne	r0, #1
   16bbc:	ldr	r1, [fp, #-56]	; 0xffffffc8
   16bc0:	orr	r0, r0, r1
   16bc4:	tst	r0, #1
   16bc8:	bne	16c04 <__assert_fail@plt+0x56a8>
   16bcc:	cmp	r8, sl
   16bd0:	movcc	r0, #39	; 0x27
   16bd4:	strbcc	r0, [r5, r8]
   16bd8:	add	r0, r8, #1
   16bdc:	cmp	r0, sl
   16be0:	movcc	r1, #36	; 0x24
   16be4:	strbcc	r1, [r5, r0]
   16be8:	add	r0, r8, #2
   16bec:	cmp	r0, sl
   16bf0:	movcc	r1, #39	; 0x27
   16bf4:	strbcc	r1, [r5, r0]
   16bf8:	add	r8, r8, #3
   16bfc:	mov	r0, #1
   16c00:	str	r0, [fp, #-56]	; 0xffffffc8
   16c04:	cmp	r8, sl
   16c08:	movcc	r0, #92	; 0x5c
   16c0c:	strbcc	r0, [r5, r8]
   16c10:	add	r0, r8, #1
   16c14:	mov	r6, #0
   16c18:	mov	r9, #1
   16c1c:	mov	r4, #48	; 0x30
   16c20:	ldr	r1, [fp, #-64]	; 0xffffffc0
   16c24:	cmp	r1, #2
   16c28:	beq	16fec <__assert_fail@plt+0x5a90>
   16c2c:	add	r1, r7, #1
   16c30:	cmp	r1, lr
   16c34:	bcs	16fec <__assert_fail@plt+0x5a90>
   16c38:	ldrb	r1, [ip, r1]
   16c3c:	sub	r1, r1, #48	; 0x30
   16c40:	uxtb	r1, r1
   16c44:	cmp	r1, #9
   16c48:	bhi	16fec <__assert_fail@plt+0x5a90>
   16c4c:	cmp	r0, sl
   16c50:	movcc	r1, #48	; 0x30
   16c54:	strbcc	r1, [r5, r0]
   16c58:	add	r0, r8, #2
   16c5c:	cmp	r0, sl
   16c60:	movcc	r1, #48	; 0x30
   16c64:	strbcc	r1, [r5, r0]
   16c68:	add	r8, r8, #3
   16c6c:	b	16a20 <__assert_fail@plt+0x54c4>
   16c70:	mov	r9, #0
   16c74:	mov	r4, #63	; 0x3f
   16c78:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16c7c:	cmp	r0, #5
   16c80:	beq	16ff4 <__assert_fail@plt+0x5a98>
   16c84:	cmp	r0, #2
   16c88:	bne	1709c <__assert_fail@plt+0x5b40>
   16c8c:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16c90:	tst	r0, #1
   16c94:	mov	r6, #0
   16c98:	beq	16a20 <__assert_fail@plt+0x54c4>
   16c9c:	b	17364 <__assert_fail@plt+0x5e08>
   16ca0:	mov	r0, #118	; 0x76
   16ca4:	b	16e0c <__assert_fail@plt+0x58b0>
   16ca8:	mov	r4, #39	; 0x27
   16cac:	mov	r0, #1
   16cb0:	str	r0, [sp, #64]	; 0x40
   16cb4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   16cb8:	cmp	r0, #2
   16cbc:	bne	16e44 <__assert_fail@plt+0x58e8>
   16cc0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   16cc4:	tst	r0, #1
   16cc8:	bne	17364 <__assert_fail@plt+0x5e08>
   16ccc:	ldr	r2, [sp, #84]	; 0x54
   16cd0:	cmp	r2, #0
   16cd4:	mov	r0, r2
   16cd8:	movwne	r0, #1
   16cdc:	clz	r1, sl
   16ce0:	lsr	r1, r1, #5
   16ce4:	orrs	r0, r0, r1
   16ce8:	moveq	r2, sl
   16cec:	str	r2, [sp, #84]	; 0x54
   16cf0:	moveq	sl, r0
   16cf4:	cmp	r8, sl
   16cf8:	movcc	r0, #39	; 0x27
   16cfc:	strbcc	r0, [r5, r8]
   16d00:	add	r0, r8, #1
   16d04:	cmp	r0, sl
   16d08:	movcc	r1, #92	; 0x5c
   16d0c:	strbcc	r1, [r5, r0]
   16d10:	add	r0, r8, #2
   16d14:	cmp	r0, sl
   16d18:	movcc	r1, #39	; 0x27
   16d1c:	strbcc	r1, [r5, r0]
   16d20:	add	r8, r8, #3
   16d24:	mov	r0, #0
   16d28:	str	r0, [fp, #-56]	; 0xffffffc8
   16d2c:	mov	r9, #0
   16d30:	mov	r6, #1
   16d34:	b	16a20 <__assert_fail@plt+0x54c4>
   16d38:	ldr	r0, [sp, #44]	; 0x2c
   16d3c:	cmp	r0, #1
   16d40:	bne	16e4c <__assert_fail@plt+0x58f0>
   16d44:	str	lr, [sp, #32]
   16d48:	bl	113ac <__ctype_b_loc@plt>
   16d4c:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16d50:	ldr	r0, [r0]
   16d54:	add	r0, r0, r4, lsl #1
   16d58:	ldrb	r0, [r0, #1]
   16d5c:	ubfx	r6, r0, #6, #1
   16d60:	mov	r2, #1
   16d64:	ldr	r0, [sp, #60]	; 0x3c
   16d68:	orr	r1, r6, r0
   16d6c:	cmp	r2, #1
   16d70:	bhi	170a4 <__assert_fail@plt+0x5b48>
   16d74:	tst	r1, #1
   16d78:	beq	170a4 <__assert_fail@plt+0x5b48>
   16d7c:	ldr	lr, [sp, #32]
   16d80:	b	16a20 <__assert_fail@plt+0x54c4>
   16d84:	mov	r9, #0
   16d88:	mov	r0, #92	; 0x5c
   16d8c:	ldr	r1, [sp, #56]	; 0x38
   16d90:	cmp	r1, #0
   16d94:	beq	16e0c <__assert_fail@plt+0x58b0>
   16d98:	mov	r4, #92	; 0x5c
   16d9c:	mov	r6, #0
   16da0:	cmp	r9, #0
   16da4:	bne	16ddc <__assert_fail@plt+0x5880>
   16da8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   16dac:	tst	r0, #1
   16db0:	beq	16ddc <__assert_fail@plt+0x5880>
   16db4:	cmp	r8, sl
   16db8:	movcc	r0, #39	; 0x27
   16dbc:	strbcc	r0, [r5, r8]
   16dc0:	add	r0, r8, #1
   16dc4:	cmp	r0, sl
   16dc8:	movcc	r1, #39	; 0x27
   16dcc:	strbcc	r1, [r5, r0]
   16dd0:	add	r8, r8, #2
   16dd4:	mov	r0, #0
   16dd8:	str	r0, [fp, #-56]	; 0xffffffc8
   16ddc:	mov	r1, r6
   16de0:	mov	r0, r4
   16de4:	cmp	r8, sl
   16de8:	strbcc	r0, [r5, r8]
   16dec:	ldr	r0, [fp, #-48]	; 0xffffffd0
   16df0:	and	r0, r0, r1
   16df4:	str	r0, [fp, #-48]	; 0xffffffd0
   16df8:	add	r8, r8, #1
   16dfc:	add	r7, r7, #1
   16e00:	cmn	lr, #1
   16e04:	bne	16758 <__assert_fail@plt+0x51fc>
   16e08:	b	16764 <__assert_fail@plt+0x5208>
   16e0c:	mov	r9, #0
   16e10:	ldr	r1, [sp, #92]	; 0x5c
   16e14:	tst	r1, #1
   16e18:	mov	r6, #0
   16e1c:	mov	r1, #0
   16e20:	beq	16a20 <__assert_fail@plt+0x54c4>
   16e24:	b	16a68 <__assert_fail@plt+0x550c>
   16e28:	mov	r4, #0
   16e2c:	ldr	r0, [sp, #40]	; 0x28
   16e30:	cmp	r0, #0
   16e34:	mov	r9, #0
   16e38:	mov	r6, #0
   16e3c:	beq	16a20 <__assert_fail@plt+0x54c4>
   16e40:	b	16dfc <__assert_fail@plt+0x58a0>
   16e44:	mov	r6, #1
   16e48:	b	16a20 <__assert_fail@plt+0x54c4>
   16e4c:	mov	r0, #0
   16e50:	str	r0, [fp, #-36]	; 0xffffffdc
   16e54:	str	r0, [fp, #-40]	; 0xffffffd8
   16e58:	cmn	lr, #1
   16e5c:	bne	16e70 <__assert_fail@plt+0x5914>
   16e60:	mov	r0, ip
   16e64:	bl	113dc <strlen@plt>
   16e68:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16e6c:	mov	lr, r0
   16e70:	ldr	r0, [sp, #76]	; 0x4c
   16e74:	add	r0, r0, r7
   16e78:	str	r0, [sp, #24]
   16e7c:	mov	r6, #1
   16e80:	mov	r2, #0
   16e84:	sub	r0, fp, #40	; 0x28
   16e88:	mov	r3, r0
   16e8c:	str	r5, [sp, #28]
   16e90:	str	lr, [sp, #32]
   16e94:	b	16ed8 <__assert_fail@plt+0x597c>
   16e98:	ldr	r5, [sp, #52]	; 0x34
   16e9c:	add	r5, r0, r5
   16ea0:	ldr	r0, [fp, #-44]	; 0xffffffd4
   16ea4:	bl	112f8 <iswprint@plt>
   16ea8:	cmp	r0, #0
   16eac:	movwne	r0, #1
   16eb0:	and	r6, r6, r0
   16eb4:	sub	r0, fp, #40	; 0x28
   16eb8:	bl	112b0 <mbsinit@plt>
   16ebc:	sub	r3, fp, #40	; 0x28
   16ec0:	mov	r2, r5
   16ec4:	ldr	lr, [sp, #32]
   16ec8:	cmp	r0, #0
   16ecc:	ldr	r5, [sp, #28]
   16ed0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   16ed4:	bne	16d64 <__assert_fail@plt+0x5808>
   16ed8:	str	r2, [sp, #52]	; 0x34
   16edc:	add	r0, r2, r7
   16ee0:	add	r1, ip, r0
   16ee4:	str	r0, [sp, #48]	; 0x30
   16ee8:	sub	r2, lr, r0
   16eec:	sub	r0, fp, #44	; 0x2c
   16ef0:	bl	19bb0 <__assert_fail@plt+0x8654>
   16ef4:	cmp	r0, #0
   16ef8:	beq	17270 <__assert_fail@plt+0x5d14>
   16efc:	cmn	r0, #1
   16f00:	beq	1722c <__assert_fail@plt+0x5cd0>
   16f04:	cmn	r0, #2
   16f08:	ldr	lr, [sp, #32]
   16f0c:	beq	17234 <__assert_fail@plt+0x5cd8>
   16f10:	cmp	r0, #2
   16f14:	mov	r1, #0
   16f18:	movwcc	r1, #1
   16f1c:	ldr	r2, [sp, #68]	; 0x44
   16f20:	eor	r2, r2, #1
   16f24:	orrs	r1, r2, r1
   16f28:	bne	16e98 <__assert_fail@plt+0x593c>
   16f2c:	ldr	r1, [sp, #52]	; 0x34
   16f30:	ldr	r2, [sp, #24]
   16f34:	add	r1, r2, r1
   16f38:	sub	r2, r0, #1
   16f3c:	b	16f4c <__assert_fail@plt+0x59f0>
   16f40:	add	r1, r1, #1
   16f44:	subs	r2, r2, #1
   16f48:	beq	16e98 <__assert_fail@plt+0x593c>
   16f4c:	ldrb	r3, [r1]
   16f50:	sub	r3, r3, #91	; 0x5b
   16f54:	cmp	r3, #33	; 0x21
   16f58:	bhi	16f40 <__assert_fail@plt+0x59e4>
   16f5c:	add	r5, pc, #0
   16f60:	ldr	pc, [r5, r3, lsl #2]
   16f64:	andeq	r7, r1, ip, asr r3
   16f68:	andeq	r7, r1, ip, asr r3
   16f6c:	andeq	r6, r1, r0, asr #30
   16f70:	andeq	r7, r1, ip, asr r3
   16f74:	andeq	r6, r1, r0, asr #30
   16f78:	andeq	r7, r1, ip, asr r3
   16f7c:	andeq	r6, r1, r0, asr #30
   16f80:	andeq	r6, r1, r0, asr #30
   16f84:	andeq	r6, r1, r0, asr #30
   16f88:	andeq	r6, r1, r0, asr #30
   16f8c:	andeq	r6, r1, r0, asr #30
   16f90:	andeq	r6, r1, r0, asr #30
   16f94:	andeq	r6, r1, r0, asr #30
   16f98:	andeq	r6, r1, r0, asr #30
   16f9c:	andeq	r6, r1, r0, asr #30
   16fa0:	andeq	r6, r1, r0, asr #30
   16fa4:	andeq	r6, r1, r0, asr #30
   16fa8:	andeq	r6, r1, r0, asr #30
   16fac:	andeq	r6, r1, r0, asr #30
   16fb0:	andeq	r6, r1, r0, asr #30
   16fb4:	andeq	r6, r1, r0, asr #30
   16fb8:	andeq	r6, r1, r0, asr #30
   16fbc:	andeq	r6, r1, r0, asr #30
   16fc0:	andeq	r6, r1, r0, asr #30
   16fc4:	andeq	r6, r1, r0, asr #30
   16fc8:	andeq	r6, r1, r0, asr #30
   16fcc:	andeq	r6, r1, r0, asr #30
   16fd0:	andeq	r6, r1, r0, asr #30
   16fd4:	andeq	r6, r1, r0, asr #30
   16fd8:	andeq	r6, r1, r0, asr #30
   16fdc:	andeq	r6, r1, r0, asr #30
   16fe0:	andeq	r6, r1, r0, asr #30
   16fe4:	andeq	r6, r1, r0, asr #30
   16fe8:	andeq	r7, r1, ip, asr r3
   16fec:	mov	r8, r0
   16ff0:	b	16a20 <__assert_fail@plt+0x54c4>
   16ff4:	ldr	r0, [sp, #36]	; 0x24
   16ff8:	cmp	r0, #0
   16ffc:	beq	1709c <__assert_fail@plt+0x5b40>
   17000:	add	r0, r7, #2
   17004:	cmp	r0, lr
   17008:	bcs	1709c <__assert_fail@plt+0x5b40>
   1700c:	add	r1, r7, ip
   17010:	ldrb	r1, [r1, #1]
   17014:	cmp	r1, #63	; 0x3f
   17018:	bne	1709c <__assert_fail@plt+0x5b40>
   1701c:	ldrb	r1, [ip, r0]
   17020:	sub	r2, r1, #33	; 0x21
   17024:	cmp	r2, #29
   17028:	bhi	1709c <__assert_fail@plt+0x5b40>
   1702c:	mov	r3, #1
   17030:	movw	r6, #20929	; 0x51c1
   17034:	movt	r6, #14336	; 0x3800
   17038:	tst	r6, r3, lsl r2
   1703c:	beq	1709c <__assert_fail@plt+0x5b40>
   17040:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17044:	tst	r2, #1
   17048:	bne	17364 <__assert_fail@plt+0x5e08>
   1704c:	cmp	r8, sl
   17050:	movcc	r2, #63	; 0x3f
   17054:	strbcc	r2, [r5, r8]
   17058:	add	r2, r8, #1
   1705c:	cmp	r2, sl
   17060:	movcc	r3, #34	; 0x22
   17064:	strbcc	r3, [r5, r2]
   17068:	add	r2, r8, #2
   1706c:	cmp	r2, sl
   17070:	movcc	r3, #34	; 0x22
   17074:	strbcc	r3, [r5, r2]
   17078:	add	r2, r8, #3
   1707c:	cmp	r2, sl
   17080:	movcc	r3, #63	; 0x3f
   17084:	strbcc	r3, [r5, r2]
   17088:	add	r8, r8, #4
   1708c:	mov	r7, r0
   17090:	mov	r4, r1
   17094:	mov	r6, #0
   17098:	b	16a20 <__assert_fail@plt+0x54c4>
   1709c:	mov	r6, #0
   170a0:	b	16a20 <__assert_fail@plt+0x54c4>
   170a4:	add	r0, r2, r7
   170a8:	str	r0, [sp, #52]	; 0x34
   170ac:	mov	r2, #0
   170b0:	ldr	lr, [sp, #32]
   170b4:	ldr	r0, [fp, #-56]	; 0xffffffc8
   170b8:	str	r1, [sp, #48]	; 0x30
   170bc:	tst	r1, #1
   170c0:	bne	1719c <__assert_fail@plt+0x5c40>
   170c4:	ldr	r1, [fp, #-76]	; 0xffffffb4
   170c8:	tst	r1, #1
   170cc:	bne	17364 <__assert_fail@plt+0x5e08>
   170d0:	mov	r3, r0
   170d4:	ldr	r0, [fp, #-64]	; 0xffffffc0
   170d8:	subs	r1, r0, #2
   170dc:	movwne	r1, #1
   170e0:	orr	r1, r1, r3
   170e4:	tst	r1, #1
   170e8:	bne	17120 <__assert_fail@plt+0x5bc4>
   170ec:	cmp	r8, sl
   170f0:	movcc	r0, #39	; 0x27
   170f4:	strbcc	r0, [r5, r8]
   170f8:	add	r2, r8, #1
   170fc:	cmp	r2, sl
   17100:	movcc	r0, #36	; 0x24
   17104:	strbcc	r0, [r5, r2]
   17108:	add	r2, r8, #2
   1710c:	cmp	r2, sl
   17110:	movcc	r0, #39	; 0x27
   17114:	strbcc	r0, [r5, r2]
   17118:	add	r8, r8, #3
   1711c:	mov	r3, #1
   17120:	cmp	r8, sl
   17124:	movcc	r1, #92	; 0x5c
   17128:	strbcc	r1, [r5, r8]
   1712c:	add	r2, r8, #1
   17130:	cmp	r2, sl
   17134:	bcs	17148 <__assert_fail@plt+0x5bec>
   17138:	uxtb	r1, r4
   1713c:	mov	r0, #48	; 0x30
   17140:	orr	r1, r0, r1, lsr #6
   17144:	strb	r1, [r5, r2]
   17148:	add	r2, r8, #2
   1714c:	cmp	r2, sl
   17150:	lsrcc	r1, r4, #3
   17154:	movcc	r0, #6
   17158:	bficc	r1, r0, #3, #29
   1715c:	strbcc	r1, [r5, r2]
   17160:	mov	r0, #6
   17164:	bfi	r4, r0, #3, #29
   17168:	add	r8, r8, #3
   1716c:	mov	r2, #1
   17170:	mov	r0, r3
   17174:	b	171c0 <__assert_fail@plt+0x5c64>
   17178:	cmp	r8, sl
   1717c:	strbcc	r4, [r5, r8]
   17180:	ldr	r1, [sp, #76]	; 0x4c
   17184:	ldrb	r4, [r1, r7]
   17188:	add	r8, r8, #1
   1718c:	mov	r7, r3
   17190:	ldr	r1, [sp, #48]	; 0x30
   17194:	tst	r1, #1
   17198:	beq	170c4 <__assert_fail@plt+0x5b68>
   1719c:	ldr	r1, [fp, #-52]	; 0xffffffcc
   171a0:	tst	r1, #1
   171a4:	beq	171b8 <__assert_fail@plt+0x5c5c>
   171a8:	cmp	r8, sl
   171ac:	movcc	r1, #92	; 0x5c
   171b0:	strbcc	r1, [r5, r8]
   171b4:	add	r8, r8, #1
   171b8:	mov	r1, #0
   171bc:	str	r1, [fp, #-52]	; 0xffffffcc
   171c0:	and	r9, r2, #1
   171c4:	add	r3, r7, #1
   171c8:	ldr	r1, [sp, #52]	; 0x34
   171cc:	cmp	r1, r3
   171d0:	bls	17214 <__assert_fail@plt+0x5cb8>
   171d4:	cmp	r9, #0
   171d8:	movwne	r9, #1
   171dc:	mvn	r1, r0
   171e0:	orr	r1, r1, r9
   171e4:	tst	r1, #1
   171e8:	bne	17178 <__assert_fail@plt+0x5c1c>
   171ec:	cmp	r8, sl
   171f0:	movcc	r1, #39	; 0x27
   171f4:	strbcc	r1, [r5, r8]
   171f8:	add	r1, r8, #1
   171fc:	cmp	r1, sl
   17200:	movcc	r0, #39	; 0x27
   17204:	strbcc	r0, [r5, r1]
   17208:	add	r8, r8, #2
   1720c:	mov	r0, #0
   17210:	b	17178 <__assert_fail@plt+0x5c1c>
   17214:	str	r0, [fp, #-56]	; 0xffffffc8
   17218:	cmp	r9, #0
   1721c:	movwne	r9, #1
   17220:	cmp	r9, #0
   17224:	beq	16da8 <__assert_fail@plt+0x584c>
   17228:	b	16ddc <__assert_fail@plt+0x5880>
   1722c:	mov	r6, #0
   17230:	b	17270 <__assert_fail@plt+0x5d14>
   17234:	mov	r6, #0
   17238:	ldr	r0, [sp, #48]	; 0x30
   1723c:	cmp	r0, lr
   17240:	bcs	17270 <__assert_fail@plt+0x5d14>
   17244:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17248:	add	r0, ip, r7
   1724c:	ldr	r2, [sp, #52]	; 0x34
   17250:	ldrb	r1, [r0, r2]
   17254:	cmp	r1, #0
   17258:	beq	16d64 <__assert_fail@plt+0x5808>
   1725c:	add	r2, r2, #1
   17260:	add	r1, r7, r2
   17264:	cmp	r1, lr
   17268:	bcc	17250 <__assert_fail@plt+0x5cf4>
   1726c:	b	16d64 <__assert_fail@plt+0x5808>
   17270:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17274:	ldr	r2, [sp, #52]	; 0x34
   17278:	b	16d64 <__assert_fail@plt+0x5808>
   1727c:	ldr	r1, [fp, #-64]	; 0xffffffc0
   17280:	eor	r0, r1, #2
   17284:	orr	r0, r0, r8
   17288:	clz	r0, r0
   1728c:	lsr	r0, r0, #5
   17290:	ldr	r3, [fp, #-76]	; 0xffffffb4
   17294:	tst	r3, r0
   17298:	bne	17364 <__assert_fail@plt+0x5e08>
   1729c:	mov	r6, r5
   172a0:	subs	r0, r1, #2
   172a4:	movwne	r0, #1
   172a8:	orr	r0, r3, r0
   172ac:	tst	r0, #1
   172b0:	ldr	r2, [sp, #92]	; 0x5c
   172b4:	ldreq	r0, [sp, #64]	; 0x40
   172b8:	eoreq	r0, r0, #1
   172bc:	tsteq	r0, #1
   172c0:	bne	17300 <__assert_fail@plt+0x5da4>
   172c4:	mov	r9, lr
   172c8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   172cc:	tst	r0, #1
   172d0:	bne	173cc <__assert_fail@plt+0x5e70>
   172d4:	ldr	r0, [sp, #84]	; 0x54
   172d8:	cmp	r0, #0
   172dc:	beq	17300 <__assert_fail@plt+0x5da4>
   172e0:	mov	r0, #0
   172e4:	str	r0, [fp, #-48]	; 0xffffffd0
   172e8:	mov	r1, #2
   172ec:	cmp	sl, #0
   172f0:	mov	r0, r2
   172f4:	mov	r4, r3
   172f8:	ldr	r7, [sp, #84]	; 0x54
   172fc:	beq	164d8 <__assert_fail@plt+0x4f7c>
   17300:	ldr	r1, [fp, #-84]	; 0xffffffac
   17304:	clz	r0, r1
   17308:	lsr	r0, r0, #5
   1730c:	orr	r0, r0, r3
   17310:	tst	r0, #1
   17314:	bne	17340 <__assert_fail@plt+0x5de4>
   17318:	ldrb	r0, [r1]
   1731c:	cmp	r0, #0
   17320:	beq	17340 <__assert_fail@plt+0x5de4>
   17324:	add	r1, r1, #1
   17328:	cmp	r8, sl
   1732c:	strbcc	r0, [r6, r8]
   17330:	add	r8, r8, #1
   17334:	ldrb	r0, [r1], #1
   17338:	cmp	r0, #0
   1733c:	bne	17328 <__assert_fail@plt+0x5dcc>
   17340:	cmp	r8, sl
   17344:	movcc	r0, #0
   17348:	strbcc	r0, [r6, r8]
   1734c:	b	173c0 <__assert_fail@plt+0x5e64>
   17350:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17354:	mov	lr, r4
   17358:	b	17364 <__assert_fail@plt+0x5e08>
   1735c:	ldr	r5, [sp, #28]
   17360:	ldr	ip, [fp, #-80]	; 0xffffffb0
   17364:	mov	r0, #0
   17368:	ldr	r1, [fp, #12]
   1736c:	bic	r1, r1, #2
   17370:	mov	r2, #2
   17374:	ldr	r3, [sp, #92]	; 0x5c
   17378:	tst	r3, #1
   1737c:	movwne	r2, #4
   17380:	ldr	r3, [fp, #-64]	; 0xffffffc0
   17384:	cmp	r3, #2
   17388:	movne	r2, r3
   1738c:	str	r2, [sp]
   17390:	str	r1, [sp, #4]
   17394:	str	r0, [sp, #8]
   17398:	ldr	r0, [sp, #80]	; 0x50
   1739c:	str	r0, [sp, #12]
   173a0:	ldr	r0, [sp, #88]	; 0x58
   173a4:	str	r0, [sp, #16]
   173a8:	mov	r0, r5
   173ac:	mov	r1, sl
   173b0:	mov	r2, ip
   173b4:	mov	r3, lr
   173b8:	bl	1644c <__assert_fail@plt+0x4ef0>
   173bc:	mov	r8, r0
   173c0:	mov	r0, r8
   173c4:	sub	sp, fp, #28
   173c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   173cc:	mov	r0, #5
   173d0:	str	r0, [sp]
   173d4:	ldr	r0, [fp, #12]
   173d8:	str	r0, [sp, #4]
   173dc:	ldr	r0, [fp, #16]
   173e0:	str	r0, [sp, #8]
   173e4:	ldr	r0, [sp, #80]	; 0x50
   173e8:	str	r0, [sp, #12]
   173ec:	ldr	r0, [sp, #88]	; 0x58
   173f0:	str	r0, [sp, #16]
   173f4:	mov	r0, r6
   173f8:	ldr	r1, [sp, #84]	; 0x54
   173fc:	ldr	r2, [fp, #-80]	; 0xffffffb0
   17400:	mov	r3, r9
   17404:	b	173b8 <__assert_fail@plt+0x5e5c>
   17408:	bl	11514 <abort@plt>
   1740c:	mov	r3, r2
   17410:	mov	r2, #0
   17414:	b	17418 <__assert_fail@plt+0x5ebc>
   17418:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1741c:	add	fp, sp, #28
   17420:	sub	sp, sp, #36	; 0x24
   17424:	mov	r4, r2
   17428:	str	r2, [sp, #24]
   1742c:	mov	r5, r1
   17430:	mov	r6, r0
   17434:	str	r0, [sp, #20]
   17438:	movw	r8, #49608	; 0xc1c8
   1743c:	movt	r8, #2
   17440:	cmp	r3, #0
   17444:	movne	r8, r3
   17448:	bl	1140c <__errno_location@plt>
   1744c:	str	r0, [sp, #28]
   17450:	ldm	r8, {r3, r9}
   17454:	ldr	r1, [r8, #40]	; 0x28
   17458:	ldr	r2, [r8, #44]	; 0x2c
   1745c:	ldr	r7, [r0]
   17460:	str	r7, [sp, #32]
   17464:	add	sl, r8, #8
   17468:	cmp	r4, #0
   1746c:	orreq	r9, r9, #1
   17470:	stm	sp, {r3, r9, sl}
   17474:	str	r1, [sp, #12]
   17478:	str	r2, [sp, #16]
   1747c:	mov	r0, #0
   17480:	mov	r1, #0
   17484:	mov	r2, r6
   17488:	mov	r3, r5
   1748c:	mov	r7, r5
   17490:	bl	1644c <__assert_fail@plt+0x4ef0>
   17494:	mov	r5, r0
   17498:	add	r4, r0, #1
   1749c:	mov	r0, r4
   174a0:	bl	1876c <__assert_fail@plt+0x7210>
   174a4:	mov	r6, r0
   174a8:	ldr	r0, [r8]
   174ac:	ldr	r1, [r8, #40]	; 0x28
   174b0:	ldr	r2, [r8, #44]	; 0x2c
   174b4:	stm	sp, {r0, r9, sl}
   174b8:	str	r1, [sp, #12]
   174bc:	str	r2, [sp, #16]
   174c0:	mov	r0, r6
   174c4:	mov	r1, r4
   174c8:	ldr	r2, [sp, #20]
   174cc:	mov	r3, r7
   174d0:	bl	1644c <__assert_fail@plt+0x4ef0>
   174d4:	ldr	r0, [sp, #24]
   174d8:	ldr	r1, [sp, #32]
   174dc:	ldr	r2, [sp, #28]
   174e0:	str	r1, [r2]
   174e4:	cmp	r0, #0
   174e8:	strne	r5, [r0]
   174ec:	mov	r0, r6
   174f0:	sub	sp, fp, #28
   174f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   174f8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   174fc:	add	fp, sp, #24
   17500:	movw	r8, #49472	; 0xc140
   17504:	movt	r8, #2
   17508:	ldr	r4, [r8]
   1750c:	movw	r5, #49476	; 0xc144
   17510:	movt	r5, #2
   17514:	ldr	r0, [r5]
   17518:	cmp	r0, #2
   1751c:	blt	17548 <__assert_fail@plt+0x5fec>
   17520:	add	r7, r4, #12
   17524:	mov	r6, #0
   17528:	ldr	r0, [r7, r6, lsl #3]
   1752c:	bl	12fdc <__assert_fail@plt+0x1a80>
   17530:	add	r0, r6, #1
   17534:	ldr	r1, [r5]
   17538:	add	r2, r6, #2
   1753c:	cmp	r2, r1
   17540:	mov	r6, r0
   17544:	blt	17528 <__assert_fail@plt+0x5fcc>
   17548:	ldr	r0, [r4, #4]
   1754c:	movw	r9, #49656	; 0xc1f8
   17550:	movt	r9, #2
   17554:	cmp	r0, r9
   17558:	movw	r7, #49480	; 0xc148
   1755c:	movt	r7, #2
   17560:	beq	17570 <__assert_fail@plt+0x6014>
   17564:	bl	12fdc <__assert_fail@plt+0x1a80>
   17568:	mov	r0, #256	; 0x100
   1756c:	stm	r7, {r0, r9}
   17570:	cmp	r4, r7
   17574:	beq	17584 <__assert_fail@plt+0x6028>
   17578:	mov	r0, r4
   1757c:	bl	12fdc <__assert_fail@plt+0x1a80>
   17580:	str	r7, [r8]
   17584:	mov	r0, #1
   17588:	str	r0, [r5]
   1758c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17590:	movw	r3, #49608	; 0xc1c8
   17594:	movt	r3, #2
   17598:	mvn	r2, #0
   1759c:	b	175a0 <__assert_fail@plt+0x6044>
   175a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175a4:	add	fp, sp, #28
   175a8:	sub	sp, sp, #44	; 0x2c
   175ac:	mov	r7, r3
   175b0:	str	r2, [sp, #36]	; 0x24
   175b4:	str	r1, [sp, #32]
   175b8:	mov	r5, r0
   175bc:	bl	1140c <__errno_location@plt>
   175c0:	cmp	r5, #0
   175c4:	bmi	17734 <__assert_fail@plt+0x61d8>
   175c8:	cmn	r5, #-2147483647	; 0x80000001
   175cc:	beq	17734 <__assert_fail@plt+0x61d8>
   175d0:	movw	r4, #49472	; 0xc140
   175d4:	movt	r4, #2
   175d8:	ldr	r6, [r4]
   175dc:	str	r0, [sp, #28]
   175e0:	ldr	r0, [r0]
   175e4:	str	r0, [sp, #24]
   175e8:	movw	r8, #49476	; 0xc144
   175ec:	movt	r8, #2
   175f0:	ldr	r1, [r8]
   175f4:	cmp	r1, r5
   175f8:	ble	17604 <__assert_fail@plt+0x60a8>
   175fc:	mov	sl, r6
   17600:	b	17670 <__assert_fail@plt+0x6114>
   17604:	str	r1, [fp, #-32]	; 0xffffffe0
   17608:	mov	r0, #8
   1760c:	str	r0, [sp]
   17610:	movw	r9, #49480	; 0xc148
   17614:	movt	r9, #2
   17618:	subs	r0, r6, r9
   1761c:	movne	r0, r6
   17620:	sub	r1, r5, r1
   17624:	add	r2, r1, #1
   17628:	sub	r1, fp, #32
   1762c:	mvn	r3, #-2147483648	; 0x80000000
   17630:	bl	18848 <__assert_fail@plt+0x72ec>
   17634:	mov	sl, r0
   17638:	str	r0, [r4]
   1763c:	cmp	r6, r9
   17640:	bne	1764c <__assert_fail@plt+0x60f0>
   17644:	ldrd	r0, [r9]
   17648:	stm	sl, {r0, r1}
   1764c:	ldr	r1, [r8]
   17650:	add	r0, sl, r1, lsl #3
   17654:	ldr	r2, [fp, #-32]	; 0xffffffe0
   17658:	sub	r1, r2, r1
   1765c:	lsl	r2, r1, #3
   17660:	mov	r1, #0
   17664:	bl	11424 <memset@plt>
   17668:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1766c:	str	r0, [r8]
   17670:	mov	r9, sl
   17674:	ldr	r6, [r9, r5, lsl #3]!
   17678:	ldr	r4, [r9, #4]!
   1767c:	ldm	r7, {r0, r1}
   17680:	ldr	r2, [r7, #40]	; 0x28
   17684:	ldr	r3, [r7, #44]	; 0x2c
   17688:	orr	r8, r1, #1
   1768c:	add	r1, r7, #8
   17690:	stm	sp, {r0, r8}
   17694:	str	r1, [sp, #20]
   17698:	add	r0, sp, #8
   1769c:	stm	r0, {r1, r2, r3}
   176a0:	mov	r0, r4
   176a4:	mov	r1, r6
   176a8:	ldr	r2, [sp, #32]
   176ac:	ldr	r3, [sp, #36]	; 0x24
   176b0:	bl	1644c <__assert_fail@plt+0x4ef0>
   176b4:	cmp	r6, r0
   176b8:	bhi	1771c <__assert_fail@plt+0x61c0>
   176bc:	add	r6, r0, #1
   176c0:	str	r6, [sl, r5, lsl #3]
   176c4:	movw	r0, #49656	; 0xc1f8
   176c8:	movt	r0, #2
   176cc:	cmp	r4, r0
   176d0:	beq	176dc <__assert_fail@plt+0x6180>
   176d4:	mov	r0, r4
   176d8:	bl	12fdc <__assert_fail@plt+0x1a80>
   176dc:	mov	r0, r6
   176e0:	bl	1876c <__assert_fail@plt+0x7210>
   176e4:	mov	r4, r0
   176e8:	str	r0, [r9]
   176ec:	ldr	r0, [r7]
   176f0:	ldr	r1, [r7, #40]	; 0x28
   176f4:	ldr	r2, [r7, #44]	; 0x2c
   176f8:	stm	sp, {r0, r8}
   176fc:	ldr	r0, [sp, #20]
   17700:	add	r3, sp, #8
   17704:	stm	r3, {r0, r1, r2}
   17708:	mov	r0, r4
   1770c:	mov	r1, r6
   17710:	ldr	r2, [sp, #32]
   17714:	ldr	r3, [sp, #36]	; 0x24
   17718:	bl	1644c <__assert_fail@plt+0x4ef0>
   1771c:	ldr	r0, [sp, #28]
   17720:	ldr	r1, [sp, #24]
   17724:	str	r1, [r0]
   17728:	mov	r0, r4
   1772c:	sub	sp, fp, #28
   17730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17734:	bl	11514 <abort@plt>
   17738:	movw	r3, #49608	; 0xc1c8
   1773c:	movt	r3, #2
   17740:	b	175a0 <__assert_fail@plt+0x6044>
   17744:	mov	r1, r0
   17748:	mov	r0, #0
   1774c:	b	17590 <__assert_fail@plt+0x6034>
   17750:	mov	r2, r1
   17754:	mov	r1, r0
   17758:	mov	r0, #0
   1775c:	b	17738 <__assert_fail@plt+0x61dc>
   17760:	push	{r4, r5, r6, sl, fp, lr}
   17764:	add	fp, sp, #16
   17768:	sub	sp, sp, #48	; 0x30
   1776c:	mov	r4, r2
   17770:	mov	r5, r0
   17774:	mov	r6, sp
   17778:	mov	r0, r6
   1777c:	bl	1779c <__assert_fail@plt+0x6240>
   17780:	mov	r0, r5
   17784:	mov	r1, r4
   17788:	mvn	r2, #0
   1778c:	mov	r3, r6
   17790:	bl	175a0 <__assert_fail@plt+0x6044>
   17794:	sub	sp, fp, #16
   17798:	pop	{r4, r5, r6, sl, fp, pc}
   1779c:	push	{fp, lr}
   177a0:	mov	fp, sp
   177a4:	vmov.i32	q8, #0	; 0x00000000
   177a8:	mov	r2, #32
   177ac:	mov	r3, r0
   177b0:	vst1.32	{d16-d17}, [r3], r2
   177b4:	vst1.32	{d16-d17}, [r3]
   177b8:	add	r2, r0, #16
   177bc:	vst1.32	{d16-d17}, [r2]
   177c0:	cmp	r1, #10
   177c4:	strne	r1, [r0]
   177c8:	popne	{fp, pc}
   177cc:	bl	11514 <abort@plt>
   177d0:	push	{r4, r5, r6, r7, fp, lr}
   177d4:	add	fp, sp, #16
   177d8:	sub	sp, sp, #48	; 0x30
   177dc:	mov	r4, r3
   177e0:	mov	r5, r2
   177e4:	mov	r6, r0
   177e8:	mov	r7, sp
   177ec:	mov	r0, r7
   177f0:	bl	1779c <__assert_fail@plt+0x6240>
   177f4:	mov	r0, r6
   177f8:	mov	r1, r5
   177fc:	mov	r2, r4
   17800:	mov	r3, r7
   17804:	bl	175a0 <__assert_fail@plt+0x6044>
   17808:	sub	sp, fp, #16
   1780c:	pop	{r4, r5, r6, r7, fp, pc}
   17810:	mov	r2, r1
   17814:	mov	r1, r0
   17818:	mov	r0, #0
   1781c:	b	17760 <__assert_fail@plt+0x6204>
   17820:	mov	r3, r2
   17824:	mov	r2, r1
   17828:	mov	r1, r0
   1782c:	mov	r0, #0
   17830:	b	177d0 <__assert_fail@plt+0x6274>
   17834:	push	{r4, r5, r6, sl, fp, lr}
   17838:	add	fp, sp, #16
   1783c:	sub	sp, sp, #48	; 0x30
   17840:	mov	r4, r1
   17844:	mov	r5, r0
   17848:	movw	r0, #49608	; 0xc1c8
   1784c:	movt	r0, #2
   17850:	add	r1, r0, #16
   17854:	mov	r3, #32
   17858:	vld1.64	{d16-d17}, [r0], r3
   1785c:	vld1.64	{d18-d19}, [r1]
   17860:	mov	r6, sp
   17864:	add	r1, r6, #16
   17868:	vld1.64	{d20-d21}, [r0]
   1786c:	vst1.64	{d18-d19}, [r1]
   17870:	mov	r0, r6
   17874:	vst1.64	{d16-d17}, [r0], r3
   17878:	vst1.64	{d20-d21}, [r0]
   1787c:	mov	r0, r6
   17880:	mov	r1, r2
   17884:	mov	r2, #1
   17888:	bl	16340 <__assert_fail@plt+0x4de4>
   1788c:	mov	r0, #0
   17890:	mov	r1, r5
   17894:	mov	r2, r4
   17898:	mov	r3, r6
   1789c:	bl	175a0 <__assert_fail@plt+0x6044>
   178a0:	sub	sp, fp, #16
   178a4:	pop	{r4, r5, r6, sl, fp, pc}
   178a8:	mov	r2, r1
   178ac:	mvn	r1, #0
   178b0:	b	17834 <__assert_fail@plt+0x62d8>
   178b4:	mov	r1, #58	; 0x3a
   178b8:	b	178a8 <__assert_fail@plt+0x634c>
   178bc:	mov	r2, #58	; 0x3a
   178c0:	b	17834 <__assert_fail@plt+0x62d8>
   178c4:	push	{r4, r5, r6, sl, fp, lr}
   178c8:	add	fp, sp, #16
   178cc:	sub	sp, sp, #48	; 0x30
   178d0:	mov	r4, r2
   178d4:	mov	r5, r0
   178d8:	mov	r6, sp
   178dc:	mov	r0, r6
   178e0:	bl	1779c <__assert_fail@plt+0x6240>
   178e4:	mov	r0, r6
   178e8:	mov	r1, #58	; 0x3a
   178ec:	mov	r2, #1
   178f0:	bl	16340 <__assert_fail@plt+0x4de4>
   178f4:	mov	r0, r5
   178f8:	mov	r1, r4
   178fc:	mvn	r2, #0
   17900:	mov	r3, r6
   17904:	bl	175a0 <__assert_fail@plt+0x6044>
   17908:	sub	sp, fp, #16
   1790c:	pop	{r4, r5, r6, sl, fp, pc}
   17910:	push	{fp, lr}
   17914:	mov	fp, sp
   17918:	sub	sp, sp, #8
   1791c:	mvn	ip, #0
   17920:	str	ip, [sp]
   17924:	bl	17930 <__assert_fail@plt+0x63d4>
   17928:	mov	sp, fp
   1792c:	pop	{fp, pc}
   17930:	push	{r4, r5, r6, r7, fp, lr}
   17934:	add	fp, sp, #16
   17938:	sub	sp, sp, #48	; 0x30
   1793c:	mov	r7, r3
   17940:	mov	r5, r0
   17944:	movw	r0, #49608	; 0xc1c8
   17948:	movt	r0, #2
   1794c:	add	r3, r0, #16
   17950:	mov	r4, #32
   17954:	vld1.64	{d16-d17}, [r0], r4
   17958:	vld1.64	{d18-d19}, [r3]
   1795c:	mov	r6, sp
   17960:	add	r3, r6, #16
   17964:	vld1.64	{d20-d21}, [r0]
   17968:	vst1.64	{d18-d19}, [r3]
   1796c:	mov	r0, r6
   17970:	vst1.64	{d16-d17}, [r0], r4
   17974:	vst1.64	{d20-d21}, [r0]
   17978:	mov	r0, r6
   1797c:	bl	16398 <__assert_fail@plt+0x4e3c>
   17980:	ldr	r2, [fp, #8]
   17984:	mov	r0, r5
   17988:	mov	r1, r7
   1798c:	mov	r3, r6
   17990:	bl	175a0 <__assert_fail@plt+0x6044>
   17994:	sub	sp, fp, #16
   17998:	pop	{r4, r5, r6, r7, fp, pc}
   1799c:	mov	r3, r2
   179a0:	mov	r2, r1
   179a4:	mov	r1, r0
   179a8:	mov	r0, #0
   179ac:	b	17910 <__assert_fail@plt+0x63b4>
   179b0:	push	{fp, lr}
   179b4:	mov	fp, sp
   179b8:	sub	sp, sp, #8
   179bc:	mov	ip, r2
   179c0:	mov	r2, r1
   179c4:	mov	r1, r0
   179c8:	str	r3, [sp]
   179cc:	mov	r0, #0
   179d0:	mov	r3, ip
   179d4:	bl	17930 <__assert_fail@plt+0x63d4>
   179d8:	mov	sp, fp
   179dc:	pop	{fp, pc}
   179e0:	movw	r3, #49488	; 0xc150
   179e4:	movt	r3, #2
   179e8:	b	175a0 <__assert_fail@plt+0x6044>
   179ec:	mov	r2, r1
   179f0:	mov	r1, r0
   179f4:	mov	r0, #0
   179f8:	b	179e0 <__assert_fail@plt+0x6484>
   179fc:	mvn	r2, #0
   17a00:	b	179e0 <__assert_fail@plt+0x6484>
   17a04:	mov	r1, r0
   17a08:	mov	r0, #0
   17a0c:	b	179fc <__assert_fail@plt+0x64a0>
   17a10:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17a14:	add	fp, sp, #24
   17a18:	sub	sp, sp, #16
   17a1c:	mov	r4, r1
   17a20:	mov	r5, r0
   17a24:	mov	r7, #0
   17a28:	mov	r0, #0
   17a2c:	mov	r1, r5
   17a30:	mov	r2, #5
   17a34:	bl	112c8 <dcgettext@plt>
   17a38:	cmp	r0, r5
   17a3c:	beq	17a48 <__assert_fail@plt+0x64ec>
   17a40:	sub	sp, fp, #24
   17a44:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17a48:	bl	19b78 <__assert_fail@plt+0x861c>
   17a4c:	mov	r6, r0
   17a50:	mov	r8, #56	; 0x38
   17a54:	mov	r0, #45	; 0x2d
   17a58:	stm	sp, {r0, r8}
   17a5c:	str	r7, [sp, #8]
   17a60:	str	r7, [sp, #12]
   17a64:	mov	r0, r6
   17a68:	mov	r1, #85	; 0x55
   17a6c:	mov	r2, #84	; 0x54
   17a70:	mov	r3, #70	; 0x46
   17a74:	bl	17b0c <__assert_fail@plt+0x65b0>
   17a78:	cmp	r0, #0
   17a7c:	beq	17a98 <__assert_fail@plt+0x653c>
   17a80:	ldrb	r1, [r5]
   17a84:	movw	r2, #45522	; 0xb1d2
   17a88:	movt	r2, #1
   17a8c:	movw	r0, #45526	; 0xb1d6
   17a90:	movt	r0, #1
   17a94:	b	17adc <__assert_fail@plt+0x6580>
   17a98:	mov	r0, #48	; 0x30
   17a9c:	mov	r1, #51	; 0x33
   17aa0:	str	r8, [sp]
   17aa4:	stmib	sp, {r0, r1}
   17aa8:	str	r0, [sp, #12]
   17aac:	mov	r0, r6
   17ab0:	mov	r1, #71	; 0x47
   17ab4:	mov	r2, #66	; 0x42
   17ab8:	mov	r3, #49	; 0x31
   17abc:	bl	17b0c <__assert_fail@plt+0x65b0>
   17ac0:	cmp	r0, #0
   17ac4:	beq	17aec <__assert_fail@plt+0x6590>
   17ac8:	ldrb	r1, [r5]
   17acc:	movw	r2, #45530	; 0xb1da
   17ad0:	movt	r2, #1
   17ad4:	movw	r0, #45534	; 0xb1de
   17ad8:	movt	r0, #1
   17adc:	cmp	r1, #96	; 0x60
   17ae0:	moveq	r0, r2
   17ae4:	sub	sp, fp, #24
   17ae8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17aec:	movw	r1, #45516	; 0xb1cc
   17af0:	movt	r1, #1
   17af4:	movw	r0, #45520	; 0xb1d0
   17af8:	movt	r0, #1
   17afc:	cmp	r4, #9
   17b00:	moveq	r0, r1
   17b04:	sub	sp, fp, #24
   17b08:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17b0c:	push	{r4, r5, r6, r7, fp, lr}
   17b10:	add	fp, sp, #16
   17b14:	sub	sp, sp, #16
   17b18:	mov	r4, r3
   17b1c:	mov	r5, r2
   17b20:	mov	r7, r1
   17b24:	mov	r6, r0
   17b28:	mov	r0, r1
   17b2c:	bl	19550 <__assert_fail@plt+0x7ff4>
   17b30:	ldrb	r1, [r6]
   17b34:	cmp	r0, #0
   17b38:	andne	r1, r1, #223	; 0xdf
   17b3c:	mov	r0, #0
   17b40:	cmp	r1, r7
   17b44:	bne	17b7c <__assert_fail@plt+0x6620>
   17b48:	cmp	r7, #0
   17b4c:	beq	17b84 <__assert_fail@plt+0x6628>
   17b50:	ldr	r0, [fp, #20]
   17b54:	ldr	r1, [fp, #16]
   17b58:	ldr	r2, [fp, #12]
   17b5c:	ldr	r3, [fp, #8]
   17b60:	str	r2, [sp]
   17b64:	str	r1, [sp, #4]
   17b68:	str	r0, [sp, #8]
   17b6c:	mov	r0, r6
   17b70:	mov	r1, r5
   17b74:	mov	r2, r4
   17b78:	bl	17b90 <__assert_fail@plt+0x6634>
   17b7c:	sub	sp, fp, #16
   17b80:	pop	{r4, r5, r6, r7, fp, pc}
   17b84:	mov	r0, #1
   17b88:	sub	sp, fp, #16
   17b8c:	pop	{r4, r5, r6, r7, fp, pc}
   17b90:	push	{r4, r5, r6, r7, fp, lr}
   17b94:	add	fp, sp, #16
   17b98:	sub	sp, sp, #8
   17b9c:	mov	r4, r3
   17ba0:	mov	r5, r2
   17ba4:	mov	r7, r1
   17ba8:	mov	r6, r0
   17bac:	mov	r0, r1
   17bb0:	bl	19550 <__assert_fail@plt+0x7ff4>
   17bb4:	ldrb	r1, [r6, #1]
   17bb8:	cmp	r0, #0
   17bbc:	andne	r1, r1, #223	; 0xdf
   17bc0:	mov	r0, #0
   17bc4:	cmp	r1, r7
   17bc8:	bne	17bf8 <__assert_fail@plt+0x669c>
   17bcc:	cmp	r7, #0
   17bd0:	beq	17c00 <__assert_fail@plt+0x66a4>
   17bd4:	ldr	r0, [fp, #16]
   17bd8:	ldr	r1, [fp, #12]
   17bdc:	ldr	r3, [fp, #8]
   17be0:	str	r1, [sp]
   17be4:	str	r0, [sp, #4]
   17be8:	mov	r0, r6
   17bec:	mov	r1, r5
   17bf0:	mov	r2, r4
   17bf4:	bl	17c0c <__assert_fail@plt+0x66b0>
   17bf8:	sub	sp, fp, #16
   17bfc:	pop	{r4, r5, r6, r7, fp, pc}
   17c00:	mov	r0, #1
   17c04:	sub	sp, fp, #16
   17c08:	pop	{r4, r5, r6, r7, fp, pc}
   17c0c:	push	{r4, r5, r6, r7, fp, lr}
   17c10:	add	fp, sp, #16
   17c14:	sub	sp, sp, #8
   17c18:	mov	r4, r3
   17c1c:	mov	r5, r2
   17c20:	mov	r7, r1
   17c24:	mov	r6, r0
   17c28:	mov	r0, r1
   17c2c:	bl	19550 <__assert_fail@plt+0x7ff4>
   17c30:	ldrb	r1, [r6, #2]
   17c34:	cmp	r0, #0
   17c38:	andne	r1, r1, #223	; 0xdf
   17c3c:	mov	r0, #0
   17c40:	cmp	r1, r7
   17c44:	bne	17c6c <__assert_fail@plt+0x6710>
   17c48:	cmp	r7, #0
   17c4c:	beq	17c74 <__assert_fail@plt+0x6718>
   17c50:	ldr	r0, [fp, #12]
   17c54:	ldr	r3, [fp, #8]
   17c58:	str	r0, [sp]
   17c5c:	mov	r0, r6
   17c60:	mov	r1, r5
   17c64:	mov	r2, r4
   17c68:	bl	17c80 <__assert_fail@plt+0x6724>
   17c6c:	sub	sp, fp, #16
   17c70:	pop	{r4, r5, r6, r7, fp, pc}
   17c74:	mov	r0, #1
   17c78:	sub	sp, fp, #16
   17c7c:	pop	{r4, r5, r6, r7, fp, pc}
   17c80:	push	{r4, r5, r6, r7, fp, lr}
   17c84:	add	fp, sp, #16
   17c88:	mov	r4, r3
   17c8c:	mov	r5, r2
   17c90:	mov	r7, r1
   17c94:	mov	r6, r0
   17c98:	mov	r0, r1
   17c9c:	bl	19550 <__assert_fail@plt+0x7ff4>
   17ca0:	ldrb	r1, [r6, #3]
   17ca4:	ldr	r3, [fp, #8]
   17ca8:	cmp	r0, #0
   17cac:	andne	r1, r1, #223	; 0xdf
   17cb0:	mov	r0, #0
   17cb4:	cmp	r1, r7
   17cb8:	bne	17cdc <__assert_fail@plt+0x6780>
   17cbc:	cmp	r7, #0
   17cc0:	beq	17cd8 <__assert_fail@plt+0x677c>
   17cc4:	mov	r0, r6
   17cc8:	mov	r1, r5
   17ccc:	mov	r2, r4
   17cd0:	pop	{r4, r5, r6, r7, fp, lr}
   17cd4:	b	17ce0 <__assert_fail@plt+0x6784>
   17cd8:	mov	r0, #1
   17cdc:	pop	{r4, r5, r6, r7, fp, pc}
   17ce0:	push	{r4, r5, r6, r7, fp, lr}
   17ce4:	add	fp, sp, #16
   17ce8:	mov	r4, r3
   17cec:	mov	r5, r2
   17cf0:	mov	r7, r1
   17cf4:	mov	r6, r0
   17cf8:	mov	r0, r1
   17cfc:	bl	19550 <__assert_fail@plt+0x7ff4>
   17d00:	ldrb	r1, [r6, #4]
   17d04:	cmp	r0, #0
   17d08:	andne	r1, r1, #223	; 0xdf
   17d0c:	mov	r0, #0
   17d10:	cmp	r1, r7
   17d14:	bne	17d38 <__assert_fail@plt+0x67dc>
   17d18:	cmp	r7, #0
   17d1c:	beq	17d34 <__assert_fail@plt+0x67d8>
   17d20:	mov	r0, r6
   17d24:	mov	r1, r5
   17d28:	mov	r2, r4
   17d2c:	pop	{r4, r5, r6, r7, fp, lr}
   17d30:	b	17d3c <__assert_fail@plt+0x67e0>
   17d34:	mov	r0, #1
   17d38:	pop	{r4, r5, r6, r7, fp, pc}
   17d3c:	push	{r4, r5, r6, sl, fp, lr}
   17d40:	add	fp, sp, #16
   17d44:	mov	r4, r2
   17d48:	mov	r6, r1
   17d4c:	mov	r5, r0
   17d50:	mov	r0, r1
   17d54:	bl	19550 <__assert_fail@plt+0x7ff4>
   17d58:	ldrb	r1, [r5, #5]
   17d5c:	cmp	r0, #0
   17d60:	andne	r1, r1, #223	; 0xdf
   17d64:	mov	r0, #0
   17d68:	cmp	r1, r6
   17d6c:	bne	17d8c <__assert_fail@plt+0x6830>
   17d70:	cmp	r6, #0
   17d74:	beq	17d88 <__assert_fail@plt+0x682c>
   17d78:	mov	r0, r5
   17d7c:	mov	r1, r4
   17d80:	pop	{r4, r5, r6, sl, fp, lr}
   17d84:	b	17d90 <__assert_fail@plt+0x6834>
   17d88:	mov	r0, #1
   17d8c:	pop	{r4, r5, r6, sl, fp, pc}
   17d90:	push	{r4, r5, fp, lr}
   17d94:	add	fp, sp, #8
   17d98:	mov	r5, r1
   17d9c:	mov	r4, r0
   17da0:	mov	r0, r1
   17da4:	bl	19550 <__assert_fail@plt+0x7ff4>
   17da8:	ldrb	r1, [r4, #6]
   17dac:	cmp	r0, #0
   17db0:	andne	r1, r1, #223	; 0xdf
   17db4:	mov	r0, #0
   17db8:	cmp	r1, r5
   17dbc:	popne	{r4, r5, fp, pc}
   17dc0:	cmp	r5, #0
   17dc4:	beq	17dd4 <__assert_fail@plt+0x6878>
   17dc8:	mov	r0, r4
   17dcc:	pop	{r4, r5, fp, lr}
   17dd0:	b	17ddc <__assert_fail@plt+0x6880>
   17dd4:	mov	r0, #1
   17dd8:	pop	{r4, r5, fp, pc}
   17ddc:	push	{r4, sl, fp, lr}
   17de0:	add	fp, sp, #8
   17de4:	mov	r4, r0
   17de8:	mov	r0, #0
   17dec:	bl	19550 <__assert_fail@plt+0x7ff4>
   17df0:	ldrb	r1, [r4, #7]
   17df4:	cmp	r0, #0
   17df8:	beq	17e0c <__assert_fail@plt+0x68b0>
   17dfc:	tst	r1, #223	; 0xdf
   17e00:	bne	17e14 <__assert_fail@plt+0x68b8>
   17e04:	mov	r0, #1
   17e08:	pop	{r4, sl, fp, pc}
   17e0c:	cmp	r1, #0
   17e10:	beq	17e04 <__assert_fail@plt+0x68a8>
   17e14:	mov	r0, #0
   17e18:	pop	{r4, sl, fp, pc}
   17e1c:	push	{r4, sl, fp, lr}
   17e20:	add	fp, sp, #8
   17e24:	sub	sp, sp, #104	; 0x68
   17e28:	mov	r4, r0
   17e2c:	movw	r0, #46399	; 0xb53f
   17e30:	movt	r0, #1
   17e34:	mov	r1, sp
   17e38:	bl	19f7c <__assert_fail@plt+0x8a20>
   17e3c:	mov	r1, r0
   17e40:	mov	r0, #0
   17e44:	cmp	r1, #0
   17e48:	beq	17e54 <__assert_fail@plt+0x68f8>
   17e4c:	sub	sp, fp, #8
   17e50:	pop	{r4, sl, fp, pc}
   17e54:	ldr	r0, [sp, #96]	; 0x60
   17e58:	ldr	r1, [sp, #100]	; 0x64
   17e5c:	ldm	sp, {r2, r3}
   17e60:	stm	r4, {r0, r1, r2, r3}
   17e64:	mov	r0, r4
   17e68:	sub	sp, fp, #8
   17e6c:	pop	{r4, sl, fp, pc}
   17e70:	push	{r4, r5, r6, r7, fp, lr}
   17e74:	add	fp, sp, #16
   17e78:	mov	r4, r0
   17e7c:	cmp	r0, #2
   17e80:	bhi	17eb0 <__assert_fail@plt+0x6954>
   17e84:	mov	r0, r4
   17e88:	bl	19c50 <__assert_fail@plt+0x86f4>
   17e8c:	mov	r5, r0
   17e90:	bl	1140c <__errno_location@plt>
   17e94:	mov	r6, r0
   17e98:	ldr	r7, [r0]
   17e9c:	mov	r0, r4
   17ea0:	bl	11520 <close@plt>
   17ea4:	str	r7, [r6]
   17ea8:	mov	r0, r5
   17eac:	pop	{r4, r5, r6, r7, fp, pc}
   17eb0:	mov	r0, r4
   17eb4:	pop	{r4, r5, r6, r7, fp, pc}
   17eb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ebc:	add	fp, sp, #28
   17ec0:	sub	sp, sp, #12
   17ec4:	mov	r9, r3
   17ec8:	mov	r4, r2
   17ecc:	mov	r8, r1
   17ed0:	mov	r7, r0
   17ed4:	ldr	sl, [fp, #8]
   17ed8:	cmp	r2, #0
   17edc:	beq	17ef4 <__assert_fail@plt+0x6998>
   17ee0:	mov	r0, r7
   17ee4:	mov	r1, #58	; 0x3a
   17ee8:	bl	113e8 <strchr@plt>
   17eec:	mov	r6, r0
   17ef0:	b	17ef8 <__assert_fail@plt+0x699c>
   17ef4:	mov	r6, #0
   17ef8:	stm	sp, {r9, sl}
   17efc:	mov	r0, r7
   17f00:	mov	r1, r6
   17f04:	mov	r2, r8
   17f08:	mov	r3, r4
   17f0c:	bl	17f74 <__assert_fail@plt+0x6a18>
   17f10:	mov	r5, r0
   17f14:	cmp	r4, #0
   17f18:	beq	17f68 <__assert_fail@plt+0x6a0c>
   17f1c:	cmp	r6, #0
   17f20:	bne	17f68 <__assert_fail@plt+0x6a0c>
   17f24:	cmp	r5, #0
   17f28:	beq	17f68 <__assert_fail@plt+0x6a0c>
   17f2c:	mov	r0, r7
   17f30:	mov	r1, #46	; 0x2e
   17f34:	bl	113e8 <strchr@plt>
   17f38:	cmp	r0, #0
   17f3c:	beq	17f68 <__assert_fail@plt+0x6a0c>
   17f40:	mov	r1, r0
   17f44:	stm	sp, {r9, sl}
   17f48:	mov	r0, r7
   17f4c:	mov	r2, r8
   17f50:	mov	r3, r4
   17f54:	bl	17f74 <__assert_fail@plt+0x6a18>
   17f58:	cmp	r0, #0
   17f5c:	movne	r0, r5
   17f60:	sub	sp, fp, #28
   17f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f68:	mov	r0, r5
   17f6c:	sub	sp, fp, #28
   17f70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f78:	add	fp, sp, #28
   17f7c:	sub	sp, sp, #36	; 0x24
   17f80:	mov	sl, r3
   17f84:	mov	r9, r2
   17f88:	mov	r4, r1
   17f8c:	ldr	r3, [r2]
   17f90:	ldr	r2, [fp, #8]
   17f94:	cmp	sl, #0
   17f98:	beq	17fa4 <__assert_fail@plt+0x6a48>
   17f9c:	ldr	r1, [sl]
   17fa0:	b	17fa8 <__assert_fail@plt+0x6a4c>
   17fa4:	mvn	r1, #0
   17fa8:	str	r1, [sp, #8]
   17fac:	ldr	r8, [fp, #12]
   17fb0:	cmp	r2, #0
   17fb4:	movne	r1, #0
   17fb8:	strne	r1, [r2]
   17fbc:	cmp	r8, #0
   17fc0:	movne	r1, #0
   17fc4:	strne	r1, [r8]
   17fc8:	cmp	r4, #0
   17fcc:	str	r3, [sp, #4]
   17fd0:	beq	18004 <__assert_fail@plt+0x6aa8>
   17fd4:	subs	r5, r4, r0
   17fd8:	beq	18094 <__assert_fail@plt+0x6b38>
   17fdc:	add	r1, r5, #1
   17fe0:	bl	18a40 <__assert_fail@plt+0x74e4>
   17fe4:	mov	r7, r0
   17fe8:	mov	r0, #0
   17fec:	strb	r0, [r7, r5]
   17ff0:	mov	r6, r4
   17ff4:	ldrb	r0, [r6, #1]!
   17ff8:	cmp	r0, #0
   17ffc:	moveq	r6, r0
   18000:	b	1801c <__assert_fail@plt+0x6ac0>
   18004:	ldrb	r1, [r0]
   18008:	cmp	r1, #0
   1800c:	beq	181b0 <__assert_fail@plt+0x6c54>
   18010:	bl	18a98 <__assert_fail@plt+0x753c>
   18014:	mov	r7, r0
   18018:	mov	r6, #0
   1801c:	ldrb	r0, [r7]
   18020:	cmp	r0, #43	; 0x2b
   18024:	beq	18074 <__assert_fail@plt+0x6b18>
   18028:	mov	r0, r7
   1802c:	bl	11250 <getpwnam@plt>
   18030:	cmp	r0, #0
   18034:	beq	18074 <__assert_fail@plt+0x6b18>
   18038:	ldr	r1, [r0, #8]
   1803c:	str	r1, [sp, #4]
   18040:	mov	r5, #0
   18044:	cmp	r4, #0
   18048:	beq	181bc <__assert_fail@plt+0x6c60>
   1804c:	cmp	r6, #0
   18050:	bne	181bc <__assert_fail@plt+0x6c60>
   18054:	ldr	r4, [r0, #12]
   18058:	mov	r0, r4
   1805c:	bl	11544 <getgrgid@plt>
   18060:	cmp	r0, #0
   18064:	str	r4, [sp, #8]
   18068:	beq	181c4 <__assert_fail@plt+0x6c68>
   1806c:	ldr	r0, [r0]
   18070:	b	181d4 <__assert_fail@plt+0x6c78>
   18074:	cmp	r4, #0
   18078:	beq	18154 <__assert_fail@plt+0x6bf8>
   1807c:	cmp	r6, #0
   18080:	bne	18154 <__assert_fail@plt+0x6bf8>
   18084:	movw	r5, #45651	; 0xb253
   18088:	movt	r5, #1
   1808c:	mov	r4, #0
   18090:	b	181e0 <__assert_fail@plt+0x6c84>
   18094:	ldrb	r0, [r4, #1]!
   18098:	cmp	r0, #0
   1809c:	moveq	r4, r0
   180a0:	mov	r7, #0
   180a4:	mov	r6, r4
   180a8:	mov	r4, #0
   180ac:	mov	r5, #0
   180b0:	cmp	r6, #0
   180b4:	beq	181ec <__assert_fail@plt+0x6c90>
   180b8:	cmp	r5, #0
   180bc:	bne	181ec <__assert_fail@plt+0x6c90>
   180c0:	ldrb	r0, [r6]
   180c4:	cmp	r0, #43	; 0x2b
   180c8:	beq	180ec <__assert_fail@plt+0x6b90>
   180cc:	mov	r0, r6
   180d0:	bl	11550 <getgrnam@plt>
   180d4:	cmp	r0, #0
   180d8:	beq	180ec <__assert_fail@plt+0x6b90>
   180dc:	ldr	r0, [r0, #8]
   180e0:	str	r0, [sp, #8]
   180e4:	mov	r5, #0
   180e8:	b	18140 <__assert_fail@plt+0x6be4>
   180ec:	movw	r0, #42856	; 0xa768
   180f0:	movt	r0, #1
   180f4:	str	r0, [sp]
   180f8:	add	r3, sp, #12
   180fc:	mov	r0, r6
   18100:	mov	r1, #0
   18104:	mov	r2, #10
   18108:	bl	18b78 <__assert_fail@plt+0x761c>
   1810c:	clz	r0, r0
   18110:	lsr	r0, r0, #5
   18114:	ldr	r1, [sp, #12]
   18118:	mvn	r2, #0
   1811c:	subs	r2, r1, r2
   18120:	movwne	r2, #1
   18124:	ands	r0, r0, r2
   18128:	ldr	r0, [sp, #8]
   1812c:	movne	r0, r1
   18130:	str	r0, [sp, #8]
   18134:	movw	r5, #45637	; 0xb245
   18138:	movt	r5, #1
   1813c:	movwne	r5, #0
   18140:	bl	1122c <endgrent@plt>
   18144:	mov	r0, r6
   18148:	bl	18a98 <__assert_fail@plt+0x753c>
   1814c:	mov	r4, r0
   18150:	b	181ec <__assert_fail@plt+0x6c90>
   18154:	movw	r0, #42856	; 0xa768
   18158:	movt	r0, #1
   1815c:	str	r0, [sp]
   18160:	mov	r4, #0
   18164:	add	r3, sp, #12
   18168:	mov	r0, r7
   1816c:	mov	r1, #0
   18170:	mov	r2, #10
   18174:	bl	18b78 <__assert_fail@plt+0x761c>
   18178:	clz	r0, r0
   1817c:	lsr	r0, r0, #5
   18180:	ldr	r1, [sp, #12]
   18184:	mvn	r2, #0
   18188:	subs	r2, r1, r2
   1818c:	movwne	r2, #1
   18190:	ands	r0, r0, r2
   18194:	ldr	r0, [sp, #4]
   18198:	movne	r0, r1
   1819c:	str	r0, [sp, #4]
   181a0:	movw	r5, #45624	; 0xb238
   181a4:	movt	r5, #1
   181a8:	movwne	r5, #0
   181ac:	b	181e0 <__assert_fail@plt+0x6c84>
   181b0:	mov	r4, #0
   181b4:	mov	r7, #0
   181b8:	b	181f8 <__assert_fail@plt+0x6c9c>
   181bc:	mov	r4, #0
   181c0:	b	181e0 <__assert_fail@plt+0x6c84>
   181c4:	add	r2, sp, #12
   181c8:	mov	r0, r4
   181cc:	mov	r1, #0
   181d0:	bl	1611c <__assert_fail@plt+0x4bc0>
   181d4:	bl	18a98 <__assert_fail@plt+0x753c>
   181d8:	mov	r4, r0
   181dc:	bl	1122c <endgrent@plt>
   181e0:	bl	11484 <endpwent@plt>
   181e4:	cmp	r6, #0
   181e8:	bne	180b8 <__assert_fail@plt+0x6b5c>
   181ec:	mov	r6, #0
   181f0:	cmp	r5, #0
   181f4:	bne	18234 <__assert_fail@plt+0x6cd8>
   181f8:	ldr	r0, [sp, #4]
   181fc:	str	r0, [r9]
   18200:	cmp	sl, #0
   18204:	ldrne	r0, [sp, #8]
   18208:	strne	r0, [sl]
   1820c:	ldr	r0, [fp, #8]
   18210:	cmp	r0, #0
   18214:	strne	r7, [r0]
   18218:	movne	r7, #0
   1821c:	mov	r6, #1
   18220:	cmp	r8, #0
   18224:	moveq	r5, #0
   18228:	strne	r4, [r8]
   1822c:	movne	r5, #0
   18230:	movne	r4, #0
   18234:	mov	r0, r7
   18238:	bl	12fdc <__assert_fail@plt+0x1a80>
   1823c:	mov	r0, r4
   18240:	bl	12fdc <__assert_fail@plt+0x1a80>
   18244:	mov	r0, #0
   18248:	cmp	r6, #0
   1824c:	bne	18260 <__assert_fail@plt+0x6d04>
   18250:	mov	r0, #0
   18254:	mov	r1, r5
   18258:	mov	r2, #5
   1825c:	bl	112c8 <dcgettext@plt>
   18260:	sub	sp, fp, #28
   18264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18268:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1826c:	add	fp, sp, #24
   18270:	sub	sp, sp, #32
   18274:	mov	r4, r2
   18278:	mov	r8, r0
   1827c:	ldr	r6, [fp, #12]
   18280:	ldr	r7, [fp, #8]
   18284:	cmp	r1, #0
   18288:	beq	182b0 <__assert_fail@plt+0x6d54>
   1828c:	mov	r5, r1
   18290:	str	r4, [sp]
   18294:	str	r3, [sp, #4]
   18298:	movw	r2, #45664	; 0xb260
   1829c:	movt	r2, #1
   182a0:	mov	r0, r8
   182a4:	mov	r1, #1
   182a8:	mov	r3, r5
   182ac:	b	182c8 <__assert_fail@plt+0x6d6c>
   182b0:	str	r3, [sp]
   182b4:	movw	r2, #45676	; 0xb26c
   182b8:	movt	r2, #1
   182bc:	mov	r0, r8
   182c0:	mov	r1, #1
   182c4:	mov	r3, r4
   182c8:	bl	11448 <__fprintf_chk@plt>
   182cc:	movw	r1, #45683	; 0xb273
   182d0:	movt	r1, #1
   182d4:	mov	r0, #0
   182d8:	mov	r2, #5
   182dc:	bl	112c8 <dcgettext@plt>
   182e0:	mov	r3, r0
   182e4:	movw	r0, #2022	; 0x7e6
   182e8:	str	r0, [sp]
   182ec:	movw	r2, #46401	; 0xb541
   182f0:	movt	r2, #1
   182f4:	mov	r0, r8
   182f8:	mov	r1, #1
   182fc:	bl	11448 <__fprintf_chk@plt>
   18300:	movw	r4, #42855	; 0xa767
   18304:	movt	r4, #1
   18308:	mov	r0, r4
   1830c:	mov	r1, r8
   18310:	bl	11238 <fputs_unlocked@plt>
   18314:	movw	r1, #45687	; 0xb277
   18318:	movt	r1, #1
   1831c:	mov	r0, #0
   18320:	mov	r2, #5
   18324:	bl	112c8 <dcgettext@plt>
   18328:	mov	r2, r0
   1832c:	movw	r3, #45858	; 0xb322
   18330:	movt	r3, #1
   18334:	mov	r0, r8
   18338:	mov	r1, #1
   1833c:	bl	11448 <__fprintf_chk@plt>
   18340:	mov	r0, r4
   18344:	mov	r1, r8
   18348:	bl	11238 <fputs_unlocked@plt>
   1834c:	cmp	r6, #9
   18350:	bhi	1838c <__assert_fail@plt+0x6e30>
   18354:	add	r0, pc, #0
   18358:	ldr	pc, [r0, r6, lsl #2]
   1835c:	andeq	r8, r1, r4, lsl #7
   18360:	muleq	r1, r8, r3
   18364:	andeq	r8, r1, r8, asr #7
   18368:	strdeq	r8, [r1], -r0
   1836c:	andeq	r8, r1, r8, lsl r4
   18370:	andeq	r8, r1, r0, asr #8
   18374:	andeq	r8, r1, r8, ror #8
   18378:	andeq	r8, r1, r0, lsr #9
   1837c:	andeq	r8, r1, r0, asr #10
   18380:	andeq	r8, r1, r8, ror #9
   18384:	sub	sp, fp, #24
   18388:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1838c:	movw	r1, #46211	; 0xb483
   18390:	movt	r1, #1
   18394:	b	184f0 <__assert_fail@plt+0x6f94>
   18398:	movw	r1, #45892	; 0xb344
   1839c:	movt	r1, #1
   183a0:	mov	r0, #0
   183a4:	mov	r2, #5
   183a8:	bl	112c8 <dcgettext@plt>
   183ac:	mov	r2, r0
   183b0:	ldr	r3, [r7]
   183b4:	mov	r0, r8
   183b8:	mov	r1, #1
   183bc:	sub	sp, fp, #24
   183c0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   183c4:	b	11448 <__fprintf_chk@plt>
   183c8:	movw	r1, #45908	; 0xb354
   183cc:	movt	r1, #1
   183d0:	mov	r0, #0
   183d4:	mov	r2, #5
   183d8:	bl	112c8 <dcgettext@plt>
   183dc:	mov	r2, r0
   183e0:	ldr	r3, [r7]
   183e4:	ldr	r0, [r7, #4]
   183e8:	str	r0, [sp]
   183ec:	b	184dc <__assert_fail@plt+0x6f80>
   183f0:	movw	r1, #45931	; 0xb36b
   183f4:	movt	r1, #1
   183f8:	mov	r0, #0
   183fc:	mov	r2, #5
   18400:	bl	112c8 <dcgettext@plt>
   18404:	mov	r2, r0
   18408:	ldr	r3, [r7]
   1840c:	ldmib	r7, {r0, r1}
   18410:	stm	sp, {r0, r1}
   18414:	b	184dc <__assert_fail@plt+0x6f80>
   18418:	movw	r1, #45959	; 0xb387
   1841c:	movt	r1, #1
   18420:	mov	r0, #0
   18424:	mov	r2, #5
   18428:	bl	112c8 <dcgettext@plt>
   1842c:	mov	r2, r0
   18430:	ldr	r3, [r7]
   18434:	ldmib	r7, {r0, r1, r7}
   18438:	stm	sp, {r0, r1, r7}
   1843c:	b	184dc <__assert_fail@plt+0x6f80>
   18440:	movw	r1, #45991	; 0xb3a7
   18444:	movt	r1, #1
   18448:	mov	r0, #0
   1844c:	mov	r2, #5
   18450:	bl	112c8 <dcgettext@plt>
   18454:	mov	r2, r0
   18458:	ldr	r3, [r7]
   1845c:	ldmib	r7, {r0, r1, r6, r7}
   18460:	stm	sp, {r0, r1, r6, r7}
   18464:	b	184dc <__assert_fail@plt+0x6f80>
   18468:	movw	r1, #46027	; 0xb3cb
   1846c:	movt	r1, #1
   18470:	mov	r0, #0
   18474:	mov	r2, #5
   18478:	bl	112c8 <dcgettext@plt>
   1847c:	mov	r2, r0
   18480:	ldr	r3, [r7]
   18484:	ldmib	r7, {r0, r1, r6}
   18488:	ldr	r5, [r7, #16]
   1848c:	ldr	r7, [r7, #20]
   18490:	stm	sp, {r0, r1, r6}
   18494:	str	r5, [sp, #12]
   18498:	str	r7, [sp, #16]
   1849c:	b	184dc <__assert_fail@plt+0x6f80>
   184a0:	movw	r1, #46067	; 0xb3f3
   184a4:	movt	r1, #1
   184a8:	mov	r0, #0
   184ac:	mov	r2, #5
   184b0:	bl	112c8 <dcgettext@plt>
   184b4:	mov	r2, r0
   184b8:	ldr	r3, [r7]
   184bc:	ldmib	r7, {r0, r1, r6}
   184c0:	ldr	r5, [r7, #16]
   184c4:	ldr	r4, [r7, #20]
   184c8:	ldr	r7, [r7, #24]
   184cc:	stm	sp, {r0, r1, r6}
   184d0:	str	r5, [sp, #12]
   184d4:	str	r4, [sp, #16]
   184d8:	str	r7, [sp, #20]
   184dc:	mov	r0, r8
   184e0:	mov	r1, #1
   184e4:	b	18590 <__assert_fail@plt+0x7034>
   184e8:	movw	r1, #46159	; 0xb44f
   184ec:	movt	r1, #1
   184f0:	mov	r0, #0
   184f4:	mov	r2, #5
   184f8:	bl	112c8 <dcgettext@plt>
   184fc:	mov	ip, r0
   18500:	ldr	r3, [r7]
   18504:	ldr	r0, [r7, #4]
   18508:	ldr	r1, [r7, #8]
   1850c:	ldr	r6, [r7, #12]
   18510:	ldr	r5, [r7, #16]
   18514:	ldr	r4, [r7, #20]
   18518:	ldr	r2, [r7, #24]
   1851c:	ldr	lr, [r7, #28]
   18520:	ldr	r7, [r7, #32]
   18524:	stm	sp, {r0, r1, r6}
   18528:	str	r5, [sp, #12]
   1852c:	str	r4, [sp, #16]
   18530:	str	r2, [sp, #20]
   18534:	str	lr, [sp, #24]
   18538:	str	r7, [sp, #28]
   1853c:	b	18584 <__assert_fail@plt+0x7028>
   18540:	movw	r1, #46111	; 0xb41f
   18544:	movt	r1, #1
   18548:	mov	r0, #0
   1854c:	mov	r2, #5
   18550:	bl	112c8 <dcgettext@plt>
   18554:	mov	ip, r0
   18558:	ldr	r3, [r7]
   1855c:	ldmib	r7, {r0, r1, r6}
   18560:	ldr	r5, [r7, #16]
   18564:	ldr	r4, [r7, #20]
   18568:	ldr	r2, [r7, #24]
   1856c:	ldr	r7, [r7, #28]
   18570:	stm	sp, {r0, r1, r6}
   18574:	str	r5, [sp, #12]
   18578:	str	r4, [sp, #16]
   1857c:	str	r2, [sp, #20]
   18580:	str	r7, [sp, #24]
   18584:	mov	r0, r8
   18588:	mov	r1, #1
   1858c:	mov	r2, ip
   18590:	bl	11448 <__fprintf_chk@plt>
   18594:	sub	sp, fp, #24
   18598:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1859c:	push	{r4, sl, fp, lr}
   185a0:	add	fp, sp, #8
   185a4:	sub	sp, sp, #8
   185a8:	mov	lr, #0
   185ac:	ldr	ip, [fp, #8]
   185b0:	ldr	r4, [ip, lr, lsl #2]
   185b4:	add	lr, lr, #1
   185b8:	cmp	r4, #0
   185bc:	bne	185b0 <__assert_fail@plt+0x7054>
   185c0:	sub	r4, lr, #1
   185c4:	str	ip, [sp]
   185c8:	str	r4, [sp, #4]
   185cc:	bl	18268 <__assert_fail@plt+0x6d0c>
   185d0:	sub	sp, fp, #8
   185d4:	pop	{r4, sl, fp, pc}
   185d8:	push	{r4, r5, fp, lr}
   185dc:	add	fp, sp, #8
   185e0:	sub	sp, sp, #48	; 0x30
   185e4:	mov	ip, #0
   185e8:	ldr	r4, [fp, #8]
   185ec:	add	lr, sp, #8
   185f0:	ldr	r5, [r4]
   185f4:	str	r5, [lr, ip, lsl #2]
   185f8:	cmp	r5, #0
   185fc:	beq	18614 <__assert_fail@plt+0x70b8>
   18600:	add	ip, ip, #1
   18604:	add	r4, r4, #4
   18608:	cmp	ip, #10
   1860c:	bne	185f0 <__assert_fail@plt+0x7094>
   18610:	mov	ip, #10
   18614:	str	lr, [sp]
   18618:	str	ip, [sp, #4]
   1861c:	bl	18268 <__assert_fail@plt+0x6d0c>
   18620:	sub	sp, fp, #8
   18624:	pop	{r4, r5, fp, pc}
   18628:	push	{fp, lr}
   1862c:	mov	fp, sp
   18630:	sub	sp, sp, #8
   18634:	add	ip, fp, #8
   18638:	str	ip, [sp, #4]
   1863c:	str	ip, [sp]
   18640:	bl	185d8 <__assert_fail@plt+0x707c>
   18644:	mov	sp, fp
   18648:	pop	{fp, pc}
   1864c:	push	{fp, lr}
   18650:	mov	fp, sp
   18654:	movw	r0, #49556	; 0xc194
   18658:	movt	r0, #2
   1865c:	ldr	r1, [r0]
   18660:	movw	r0, #42855	; 0xa767
   18664:	movt	r0, #1
   18668:	bl	11238 <fputs_unlocked@plt>
   1866c:	movw	r1, #46271	; 0xb4bf
   18670:	movt	r1, #1
   18674:	mov	r0, #0
   18678:	mov	r2, #5
   1867c:	bl	112c8 <dcgettext@plt>
   18680:	mov	r1, r0
   18684:	movw	r2, #46291	; 0xb4d3
   18688:	movt	r2, #1
   1868c:	mov	r0, #1
   18690:	bl	11430 <__printf_chk@plt>
   18694:	movw	r1, #46313	; 0xb4e9
   18698:	movt	r1, #1
   1869c:	mov	r0, #0
   186a0:	mov	r2, #5
   186a4:	bl	112c8 <dcgettext@plt>
   186a8:	mov	r1, r0
   186ac:	movw	r2, #43395	; 0xa983
   186b0:	movt	r2, #1
   186b4:	movw	r3, #43670	; 0xaa96
   186b8:	movt	r3, #1
   186bc:	mov	r0, #1
   186c0:	bl	11430 <__printf_chk@plt>
   186c4:	movw	r1, #46333	; 0xb4fd
   186c8:	movt	r1, #1
   186cc:	mov	r0, #0
   186d0:	mov	r2, #5
   186d4:	bl	112c8 <dcgettext@plt>
   186d8:	mov	r1, r0
   186dc:	movw	r2, #46372	; 0xb524
   186e0:	movt	r2, #1
   186e4:	mov	r0, #1
   186e8:	pop	{fp, lr}
   186ec:	b	11430 <__printf_chk@plt>
   186f0:	b	186f4 <__assert_fail@plt+0x7198>
   186f4:	push	{r4, r5, r6, sl, fp, lr}
   186f8:	add	fp, sp, #16
   186fc:	mov	r4, r2
   18700:	mov	r5, r1
   18704:	mov	r6, r0
   18708:	bl	19c14 <__assert_fail@plt+0x86b8>
   1870c:	cmp	r0, #0
   18710:	popne	{r4, r5, r6, sl, fp, pc}
   18714:	cmp	r6, #0
   18718:	beq	1872c <__assert_fail@plt+0x71d0>
   1871c:	cmp	r5, #0
   18720:	cmpne	r4, #0
   18724:	bne	1872c <__assert_fail@plt+0x71d0>
   18728:	pop	{r4, r5, r6, sl, fp, pc}
   1872c:	bl	18ab8 <__assert_fail@plt+0x755c>
   18730:	push	{fp, lr}
   18734:	mov	fp, sp
   18738:	bl	190d0 <__assert_fail@plt+0x7b74>
   1873c:	pop	{fp, lr}
   18740:	b	18744 <__assert_fail@plt+0x71e8>
   18744:	cmp	r0, #0
   18748:	bxne	lr
   1874c:	push	{fp, lr}
   18750:	mov	fp, sp
   18754:	bl	18ab8 <__assert_fail@plt+0x755c>
   18758:	push	{fp, lr}
   1875c:	mov	fp, sp
   18760:	bl	19b44 <__assert_fail@plt+0x85e8>
   18764:	pop	{fp, lr}
   18768:	b	18744 <__assert_fail@plt+0x71e8>
   1876c:	b	18730 <__assert_fail@plt+0x71d4>
   18770:	push	{r4, r5, fp, lr}
   18774:	add	fp, sp, #8
   18778:	mov	r4, r1
   1877c:	mov	r5, r0
   18780:	bl	19100 <__assert_fail@plt+0x7ba4>
   18784:	cmp	r0, #0
   18788:	popne	{r4, r5, fp, pc}
   1878c:	cmp	r5, #0
   18790:	beq	187a0 <__assert_fail@plt+0x7244>
   18794:	cmp	r4, #0
   18798:	bne	187a0 <__assert_fail@plt+0x7244>
   1879c:	pop	{r4, r5, fp, pc}
   187a0:	bl	18ab8 <__assert_fail@plt+0x755c>
   187a4:	push	{fp, lr}
   187a8:	mov	fp, sp
   187ac:	bl	19b48 <__assert_fail@plt+0x85ec>
   187b0:	pop	{fp, lr}
   187b4:	b	18744 <__assert_fail@plt+0x71e8>
   187b8:	push	{fp, lr}
   187bc:	mov	fp, sp
   187c0:	bl	19b58 <__assert_fail@plt+0x85fc>
   187c4:	pop	{fp, lr}
   187c8:	b	18744 <__assert_fail@plt+0x71e8>
   187cc:	mov	r2, r1
   187d0:	mov	r1, r0
   187d4:	mov	r0, #0
   187d8:	b	186f4 <__assert_fail@plt+0x7198>
   187dc:	mov	r2, r1
   187e0:	mov	r1, r0
   187e4:	mov	r0, #0
   187e8:	b	187b8 <__assert_fail@plt+0x725c>
   187ec:	mov	r2, #1
   187f0:	b	187f4 <__assert_fail@plt+0x7298>
   187f4:	push	{r4, r5, fp, lr}
   187f8:	add	fp, sp, #8
   187fc:	mov	r4, r1
   18800:	ldr	r5, [r1]
   18804:	cmp	r0, #0
   18808:	beq	18820 <__assert_fail@plt+0x72c4>
   1880c:	mov	r1, #1
   18810:	add	r1, r1, r5, lsr #1
   18814:	adds	r5, r5, r1
   18818:	bcc	18838 <__assert_fail@plt+0x72dc>
   1881c:	bl	18ab8 <__assert_fail@plt+0x755c>
   18820:	cmp	r5, #0
   18824:	bne	18838 <__assert_fail@plt+0x72dc>
   18828:	mov	r1, #64	; 0x40
   1882c:	udiv	r5, r1, r2
   18830:	cmp	r2, #64	; 0x40
   18834:	addhi	r5, r5, #1
   18838:	mov	r1, r5
   1883c:	bl	186f4 <__assert_fail@plt+0x7198>
   18840:	str	r5, [r4]
   18844:	pop	{r4, r5, fp, pc}
   18848:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1884c:	add	fp, sp, #24
   18850:	mov	r8, r1
   18854:	ldr	r6, [r1]
   18858:	add	r1, r6, r6, asr #1
   1885c:	cmp	r1, r6
   18860:	mvnvs	r1, #-2147483648	; 0x80000000
   18864:	cmp	r1, r3
   18868:	mov	r5, r1
   1886c:	movgt	r5, r3
   18870:	cmn	r3, #1
   18874:	movle	r5, r1
   18878:	ldr	r4, [fp, #8]
   1887c:	cmn	r4, #1
   18880:	ble	188a8 <__assert_fail@plt+0x734c>
   18884:	cmp	r4, #0
   18888:	beq	188fc <__assert_fail@plt+0x73a0>
   1888c:	cmn	r5, #1
   18890:	ble	188d0 <__assert_fail@plt+0x7374>
   18894:	mvn	r7, #-2147483648	; 0x80000000
   18898:	udiv	r1, r7, r4
   1889c:	cmp	r1, r5
   188a0:	bge	188fc <__assert_fail@plt+0x73a0>
   188a4:	b	1890c <__assert_fail@plt+0x73b0>
   188a8:	cmn	r5, #1
   188ac:	ble	188ec <__assert_fail@plt+0x7390>
   188b0:	cmn	r4, #1
   188b4:	beq	188fc <__assert_fail@plt+0x73a0>
   188b8:	mov	r1, #-2147483648	; 0x80000000
   188bc:	sdiv	r1, r1, r4
   188c0:	mvn	r7, #-2147483648	; 0x80000000
   188c4:	cmp	r1, r5
   188c8:	bge	188fc <__assert_fail@plt+0x73a0>
   188cc:	b	1890c <__assert_fail@plt+0x73b0>
   188d0:	beq	188fc <__assert_fail@plt+0x73a0>
   188d4:	mov	r1, #-2147483648	; 0x80000000
   188d8:	sdiv	r1, r1, r5
   188dc:	mvn	r7, #-2147483648	; 0x80000000
   188e0:	cmp	r1, r4
   188e4:	bge	188fc <__assert_fail@plt+0x73a0>
   188e8:	b	1890c <__assert_fail@plt+0x73b0>
   188ec:	mvn	r7, #-2147483648	; 0x80000000
   188f0:	sdiv	r1, r7, r4
   188f4:	cmp	r5, r1
   188f8:	blt	1890c <__assert_fail@plt+0x73b0>
   188fc:	mul	r1, r5, r4
   18900:	mov	r7, #64	; 0x40
   18904:	cmp	r1, #63	; 0x3f
   18908:	bgt	18914 <__assert_fail@plt+0x73b8>
   1890c:	sdiv	r5, r7, r4
   18910:	mul	r1, r5, r4
   18914:	cmp	r0, #0
   18918:	moveq	r7, #0
   1891c:	streq	r7, [r8]
   18920:	sub	r7, r5, r6
   18924:	cmp	r7, r2
   18928:	bge	189d4 <__assert_fail@plt+0x7478>
   1892c:	add	r5, r6, r2
   18930:	mov	r1, #0
   18934:	cmp	r5, r3
   18938:	mov	r2, #0
   1893c:	movwgt	r2, #1
   18940:	cmn	r3, #1
   18944:	movwgt	r1, #1
   18948:	cmp	r5, r6
   1894c:	bvs	189bc <__assert_fail@plt+0x7460>
   18950:	ands	r1, r1, r2
   18954:	bne	189bc <__assert_fail@plt+0x7460>
   18958:	cmn	r4, #1
   1895c:	ble	18984 <__assert_fail@plt+0x7428>
   18960:	cmp	r4, #0
   18964:	beq	189d0 <__assert_fail@plt+0x7474>
   18968:	cmn	r5, #1
   1896c:	ble	189a8 <__assert_fail@plt+0x744c>
   18970:	mvn	r1, #-2147483648	; 0x80000000
   18974:	udiv	r1, r1, r4
   18978:	cmp	r1, r5
   1897c:	bge	189d0 <__assert_fail@plt+0x7474>
   18980:	b	189bc <__assert_fail@plt+0x7460>
   18984:	cmn	r5, #1
   18988:	ble	189c0 <__assert_fail@plt+0x7464>
   1898c:	cmn	r4, #1
   18990:	beq	189d0 <__assert_fail@plt+0x7474>
   18994:	mov	r1, #-2147483648	; 0x80000000
   18998:	sdiv	r1, r1, r4
   1899c:	cmp	r1, r5
   189a0:	bge	189d0 <__assert_fail@plt+0x7474>
   189a4:	b	189bc <__assert_fail@plt+0x7460>
   189a8:	beq	189d0 <__assert_fail@plt+0x7474>
   189ac:	mov	r1, #-2147483648	; 0x80000000
   189b0:	sdiv	r1, r1, r5
   189b4:	cmp	r1, r4
   189b8:	bge	189d0 <__assert_fail@plt+0x7474>
   189bc:	bl	18ab8 <__assert_fail@plt+0x755c>
   189c0:	mvn	r1, #-2147483648	; 0x80000000
   189c4:	sdiv	r1, r1, r4
   189c8:	cmp	r5, r1
   189cc:	blt	189bc <__assert_fail@plt+0x7460>
   189d0:	mul	r1, r5, r4
   189d4:	bl	18770 <__assert_fail@plt+0x7214>
   189d8:	str	r5, [r8]
   189dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   189e0:	mov	r1, #1
   189e4:	b	189e8 <__assert_fail@plt+0x748c>
   189e8:	push	{fp, lr}
   189ec:	mov	fp, sp
   189f0:	bl	1907c <__assert_fail@plt+0x7b20>
   189f4:	pop	{fp, lr}
   189f8:	b	18744 <__assert_fail@plt+0x71e8>
   189fc:	mov	r1, #1
   18a00:	b	18a04 <__assert_fail@plt+0x74a8>
   18a04:	push	{fp, lr}
   18a08:	mov	fp, sp
   18a0c:	bl	19b54 <__assert_fail@plt+0x85f8>
   18a10:	pop	{fp, lr}
   18a14:	b	18744 <__assert_fail@plt+0x71e8>
   18a18:	push	{r4, r5, fp, lr}
   18a1c:	add	fp, sp, #8
   18a20:	mov	r4, r1
   18a24:	mov	r5, r0
   18a28:	mov	r0, r1
   18a2c:	bl	18730 <__assert_fail@plt+0x71d4>
   18a30:	mov	r1, r5
   18a34:	mov	r2, r4
   18a38:	pop	{r4, r5, fp, lr}
   18a3c:	b	112a4 <memcpy@plt>
   18a40:	push	{r4, r5, fp, lr}
   18a44:	add	fp, sp, #8
   18a48:	mov	r4, r1
   18a4c:	mov	r5, r0
   18a50:	mov	r0, r1
   18a54:	bl	18758 <__assert_fail@plt+0x71fc>
   18a58:	mov	r1, r5
   18a5c:	mov	r2, r4
   18a60:	pop	{r4, r5, fp, lr}
   18a64:	b	112a4 <memcpy@plt>
   18a68:	push	{r4, r5, fp, lr}
   18a6c:	add	fp, sp, #8
   18a70:	mov	r4, r1
   18a74:	mov	r5, r0
   18a78:	add	r0, r1, #1
   18a7c:	bl	18758 <__assert_fail@plt+0x71fc>
   18a80:	mov	r1, #0
   18a84:	strb	r1, [r0, r4]
   18a88:	mov	r1, r5
   18a8c:	mov	r2, r4
   18a90:	pop	{r4, r5, fp, lr}
   18a94:	b	112a4 <memcpy@plt>
   18a98:	push	{r4, sl, fp, lr}
   18a9c:	add	fp, sp, #8
   18aa0:	mov	r4, r0
   18aa4:	bl	113dc <strlen@plt>
   18aa8:	add	r1, r0, #1
   18aac:	mov	r0, r4
   18ab0:	pop	{r4, sl, fp, lr}
   18ab4:	b	18a18 <__assert_fail@plt+0x74bc>
   18ab8:	push	{fp, lr}
   18abc:	mov	fp, sp
   18ac0:	movw	r0, #49468	; 0xc13c
   18ac4:	movt	r0, #2
   18ac8:	ldr	r4, [r0]
   18acc:	movw	r1, #46448	; 0xb570
   18ad0:	movt	r1, #1
   18ad4:	mov	r0, #0
   18ad8:	mov	r2, #5
   18adc:	bl	112c8 <dcgettext@plt>
   18ae0:	mov	r3, r0
   18ae4:	movw	r2, #43392	; 0xa980
   18ae8:	movt	r2, #1
   18aec:	mov	r0, r4
   18af0:	mov	r1, #0
   18af4:	bl	11358 <error@plt>
   18af8:	bl	11514 <abort@plt>
   18afc:	push	{fp, lr}
   18b00:	mov	fp, sp
   18b04:	orr	r1, r1, #512	; 0x200
   18b08:	bl	13004 <__assert_fail@plt+0x1aa8>
   18b0c:	cmp	r0, #0
   18b10:	popne	{fp, pc}
   18b14:	bl	1140c <__errno_location@plt>
   18b18:	ldr	r0, [r0]
   18b1c:	cmp	r0, #22
   18b20:	bne	18b44 <__assert_fail@plt+0x75e8>
   18b24:	movw	r0, #46465	; 0xb581
   18b28:	movt	r0, #1
   18b2c:	movw	r1, #46481	; 0xb591
   18b30:	movt	r1, #1
   18b34:	movw	r3, #46492	; 0xb59c
   18b38:	movt	r3, #1
   18b3c:	mov	r2, #41	; 0x29
   18b40:	bl	1155c <__assert_fail@plt>
   18b44:	bl	18ab8 <__assert_fail@plt+0x755c>
   18b48:	ldr	r0, [r0, #48]	; 0x30
   18b4c:	and	r2, r0, #17
   18b50:	mov	r0, #1
   18b54:	cmp	r2, #16
   18b58:	beq	18b74 <__assert_fail@plt+0x7618>
   18b5c:	mov	r0, #0
   18b60:	cmp	r2, #17
   18b64:	bxne	lr
   18b68:	ldr	r0, [r1, #48]	; 0x30
   18b6c:	cmp	r0, #0
   18b70:	movwne	r0, #1
   18b74:	bx	lr
   18b78:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18b7c:	add	fp, sp, #28
   18b80:	sub	sp, sp, #12
   18b84:	cmp	r2, #37	; 0x25
   18b88:	bcs	18fac <__assert_fail@plt+0x7a50>
   18b8c:	mov	r7, r2
   18b90:	mov	r6, r1
   18b94:	mov	r4, r0
   18b98:	str	r3, [sp]
   18b9c:	ldr	sl, [fp, #8]
   18ba0:	bl	1140c <__errno_location@plt>
   18ba4:	mov	r5, r0
   18ba8:	mov	r0, #0
   18bac:	str	r0, [r5]
   18bb0:	bl	113ac <__ctype_b_loc@plt>
   18bb4:	ldr	r1, [r0]
   18bb8:	mov	r2, r4
   18bbc:	ldrb	r0, [r2], #1
   18bc0:	add	r3, r1, r0, lsl #1
   18bc4:	ldrb	r3, [r3, #1]
   18bc8:	tst	r3, #32
   18bcc:	bne	18bbc <__assert_fail@plt+0x7660>
   18bd0:	add	r9, sp, #8
   18bd4:	cmp	r6, #0
   18bd8:	movne	r9, r6
   18bdc:	mov	r8, #4
   18be0:	cmp	r0, #45	; 0x2d
   18be4:	beq	18fa0 <__assert_fail@plt+0x7a44>
   18be8:	mov	r0, r4
   18bec:	mov	r1, r9
   18bf0:	mov	r2, r7
   18bf4:	bl	113d0 <strtoul@plt>
   18bf8:	str	r0, [sp, #4]
   18bfc:	ldr	r7, [r9]
   18c00:	cmp	r7, r4
   18c04:	beq	18c2c <__assert_fail@plt+0x76d0>
   18c08:	ldr	r0, [r5]
   18c0c:	cmp	r0, #0
   18c10:	beq	18c60 <__assert_fail@plt+0x7704>
   18c14:	cmp	r0, #34	; 0x22
   18c18:	bne	18fa0 <__assert_fail@plt+0x7a44>
   18c1c:	mov	r8, #1
   18c20:	cmp	sl, #0
   18c24:	bne	18c6c <__assert_fail@plt+0x7710>
   18c28:	b	18f94 <__assert_fail@plt+0x7a38>
   18c2c:	cmp	sl, #0
   18c30:	beq	18fa0 <__assert_fail@plt+0x7a44>
   18c34:	ldrb	r1, [r7]
   18c38:	cmp	r1, #0
   18c3c:	beq	18fa0 <__assert_fail@plt+0x7a44>
   18c40:	mov	r0, sl
   18c44:	bl	113e8 <strchr@plt>
   18c48:	cmp	r0, #0
   18c4c:	beq	18fa0 <__assert_fail@plt+0x7a44>
   18c50:	mov	r0, #1
   18c54:	str	r0, [sp, #4]
   18c58:	mov	r8, #0
   18c5c:	b	18c6c <__assert_fail@plt+0x7710>
   18c60:	mov	r8, r0
   18c64:	cmp	sl, #0
   18c68:	beq	18f94 <__assert_fail@plt+0x7a38>
   18c6c:	ldrb	r4, [r7]
   18c70:	cmp	r4, #0
   18c74:	beq	18f94 <__assert_fail@plt+0x7a38>
   18c78:	mov	r0, sl
   18c7c:	mov	r1, r4
   18c80:	bl	113e8 <strchr@plt>
   18c84:	cmp	r0, #0
   18c88:	beq	18eb4 <__assert_fail@plt+0x7958>
   18c8c:	sub	r0, r4, #69	; 0x45
   18c90:	mov	r6, #1
   18c94:	mov	r5, #1024	; 0x400
   18c98:	cmp	r0, #47	; 0x2f
   18c9c:	bhi	18db0 <__assert_fail@plt+0x7854>
   18ca0:	add	r1, pc, #0
   18ca4:	ldr	pc, [r1, r0, lsl #2]
   18ca8:	andeq	r8, r1, r8, ror #26
   18cac:			; <UNDEFINED> instruction: 0x00018db0
   18cb0:	andeq	r8, r1, r8, ror #26
   18cb4:			; <UNDEFINED> instruction: 0x00018db0
   18cb8:			; <UNDEFINED> instruction: 0x00018db0
   18cbc:			; <UNDEFINED> instruction: 0x00018db0
   18cc0:	andeq	r8, r1, r8, ror #26
   18cc4:			; <UNDEFINED> instruction: 0x00018db0
   18cc8:	andeq	r8, r1, r8, ror #26
   18ccc:			; <UNDEFINED> instruction: 0x00018db0
   18cd0:			; <UNDEFINED> instruction: 0x00018db0
   18cd4:	andeq	r8, r1, r8, ror #26
   18cd8:			; <UNDEFINED> instruction: 0x00018db0
   18cdc:			; <UNDEFINED> instruction: 0x00018db0
   18ce0:			; <UNDEFINED> instruction: 0x00018db0
   18ce4:	andeq	r8, r1, r8, ror #26
   18ce8:			; <UNDEFINED> instruction: 0x00018db0
   18cec:			; <UNDEFINED> instruction: 0x00018db0
   18cf0:			; <UNDEFINED> instruction: 0x00018db0
   18cf4:			; <UNDEFINED> instruction: 0x00018db0
   18cf8:	andeq	r8, r1, r8, ror #26
   18cfc:	andeq	r8, r1, r8, ror #26
   18d00:			; <UNDEFINED> instruction: 0x00018db0
   18d04:			; <UNDEFINED> instruction: 0x00018db0
   18d08:			; <UNDEFINED> instruction: 0x00018db0
   18d0c:			; <UNDEFINED> instruction: 0x00018db0
   18d10:			; <UNDEFINED> instruction: 0x00018db0
   18d14:			; <UNDEFINED> instruction: 0x00018db0
   18d18:			; <UNDEFINED> instruction: 0x00018db0
   18d1c:			; <UNDEFINED> instruction: 0x00018db0
   18d20:			; <UNDEFINED> instruction: 0x00018db0
   18d24:			; <UNDEFINED> instruction: 0x00018db0
   18d28:			; <UNDEFINED> instruction: 0x00018db0
   18d2c:			; <UNDEFINED> instruction: 0x00018db0
   18d30:	andeq	r8, r1, r8, ror #26
   18d34:			; <UNDEFINED> instruction: 0x00018db0
   18d38:			; <UNDEFINED> instruction: 0x00018db0
   18d3c:			; <UNDEFINED> instruction: 0x00018db0
   18d40:	andeq	r8, r1, r8, ror #26
   18d44:			; <UNDEFINED> instruction: 0x00018db0
   18d48:	andeq	r8, r1, r8, ror #26
   18d4c:			; <UNDEFINED> instruction: 0x00018db0
   18d50:			; <UNDEFINED> instruction: 0x00018db0
   18d54:			; <UNDEFINED> instruction: 0x00018db0
   18d58:			; <UNDEFINED> instruction: 0x00018db0
   18d5c:			; <UNDEFINED> instruction: 0x00018db0
   18d60:			; <UNDEFINED> instruction: 0x00018db0
   18d64:	andeq	r8, r1, r8, ror #26
   18d68:	mov	r0, sl
   18d6c:	mov	r1, #48	; 0x30
   18d70:	bl	113e8 <strchr@plt>
   18d74:	cmp	r0, #0
   18d78:	beq	18db0 <__assert_fail@plt+0x7854>
   18d7c:	ldrb	r0, [r7, #1]
   18d80:	cmp	r0, #66	; 0x42
   18d84:	cmpne	r0, #68	; 0x44
   18d88:	bne	18d98 <__assert_fail@plt+0x783c>
   18d8c:	mov	r6, #2
   18d90:	mov	r5, #1000	; 0x3e8
   18d94:	b	18db0 <__assert_fail@plt+0x7854>
   18d98:	cmp	r0, #105	; 0x69
   18d9c:	bne	18db0 <__assert_fail@plt+0x7854>
   18da0:	ldrb	r0, [r7, #2]
   18da4:	mov	r6, #1
   18da8:	cmp	r0, #66	; 0x42
   18dac:	movweq	r6, #3
   18db0:	sub	r1, r4, #66	; 0x42
   18db4:	cmp	r1, #53	; 0x35
   18db8:	bhi	18eb4 <__assert_fail@plt+0x7958>
   18dbc:	mov	r0, #0
   18dc0:	add	r2, pc, #0
   18dc4:	ldr	pc, [r2, r1, lsl #2]
   18dc8:	andeq	r8, r1, r8, lsl pc
   18dcc:			; <UNDEFINED> instruction: 0x00018eb4
   18dd0:			; <UNDEFINED> instruction: 0x00018eb4
   18dd4:	andeq	r8, r1, r4, lsr #30
   18dd8:			; <UNDEFINED> instruction: 0x00018eb4
   18ddc:	andeq	r8, r1, r0, lsr #29
   18de0:			; <UNDEFINED> instruction: 0x00018eb4
   18de4:			; <UNDEFINED> instruction: 0x00018eb4
   18de8:			; <UNDEFINED> instruction: 0x00018eb4
   18dec:	andeq	r8, r1, r8, asr #29
   18df0:			; <UNDEFINED> instruction: 0x00018eb4
   18df4:	ldrdeq	r8, [r1], -ip
   18df8:			; <UNDEFINED> instruction: 0x00018eb4
   18dfc:			; <UNDEFINED> instruction: 0x00018eb4
   18e00:	andeq	r8, r1, r8, lsr pc
   18e04:			; <UNDEFINED> instruction: 0x00018eb4
   18e08:			; <UNDEFINED> instruction: 0x00018eb4
   18e0c:			; <UNDEFINED> instruction: 0x00018eb4
   18e10:	strdeq	r8, [r1], -r0
   18e14:			; <UNDEFINED> instruction: 0x00018eb4
   18e18:			; <UNDEFINED> instruction: 0x00018eb4
   18e1c:			; <UNDEFINED> instruction: 0x00018eb4
   18e20:			; <UNDEFINED> instruction: 0x00018eb4
   18e24:	andeq	r8, r1, ip, asr #30
   18e28:	andeq	r8, r1, r4, lsl #30
   18e2c:			; <UNDEFINED> instruction: 0x00018eb4
   18e30:			; <UNDEFINED> instruction: 0x00018eb4
   18e34:			; <UNDEFINED> instruction: 0x00018eb4
   18e38:			; <UNDEFINED> instruction: 0x00018eb4
   18e3c:			; <UNDEFINED> instruction: 0x00018eb4
   18e40:			; <UNDEFINED> instruction: 0x00018eb4
   18e44:			; <UNDEFINED> instruction: 0x00018eb4
   18e48:	andeq	r8, r1, r0, ror #30
   18e4c:	andeq	r8, r1, r8, ror pc
   18e50:			; <UNDEFINED> instruction: 0x00018eb4
   18e54:			; <UNDEFINED> instruction: 0x00018eb4
   18e58:			; <UNDEFINED> instruction: 0x00018eb4
   18e5c:	andeq	r8, r1, r0, lsr #29
   18e60:			; <UNDEFINED> instruction: 0x00018eb4
   18e64:			; <UNDEFINED> instruction: 0x00018eb4
   18e68:			; <UNDEFINED> instruction: 0x00018eb4
   18e6c:	andeq	r8, r1, r8, asr #29
   18e70:			; <UNDEFINED> instruction: 0x00018eb4
   18e74:	ldrdeq	r8, [r1], -ip
   18e78:			; <UNDEFINED> instruction: 0x00018eb4
   18e7c:			; <UNDEFINED> instruction: 0x00018eb4
   18e80:			; <UNDEFINED> instruction: 0x00018eb4
   18e84:			; <UNDEFINED> instruction: 0x00018eb4
   18e88:			; <UNDEFINED> instruction: 0x00018eb4
   18e8c:			; <UNDEFINED> instruction: 0x00018eb4
   18e90:	strdeq	r8, [r1], -r0
   18e94:			; <UNDEFINED> instruction: 0x00018eb4
   18e98:			; <UNDEFINED> instruction: 0x00018eb4
   18e9c:	andeq	r8, r1, ip, ror #30
   18ea0:	add	r0, sp, #4
   18ea4:	mov	r1, r5
   18ea8:	mov	r2, #3
   18eac:	bl	19030 <__assert_fail@plt+0x7ad4>
   18eb0:	b	18f78 <__assert_fail@plt+0x7a1c>
   18eb4:	ldr	r0, [sp, #4]
   18eb8:	ldr	r1, [sp]
   18ebc:	str	r0, [r1]
   18ec0:	orr	r8, r8, #2
   18ec4:	b	18fa0 <__assert_fail@plt+0x7a44>
   18ec8:	add	r0, sp, #4
   18ecc:	mov	r1, r5
   18ed0:	mov	r2, #1
   18ed4:	bl	19030 <__assert_fail@plt+0x7ad4>
   18ed8:	b	18f78 <__assert_fail@plt+0x7a1c>
   18edc:	add	r0, sp, #4
   18ee0:	mov	r1, r5
   18ee4:	mov	r2, #2
   18ee8:	bl	19030 <__assert_fail@plt+0x7ad4>
   18eec:	b	18f78 <__assert_fail@plt+0x7a1c>
   18ef0:	add	r0, sp, #4
   18ef4:	mov	r1, r5
   18ef8:	mov	r2, #4
   18efc:	bl	19030 <__assert_fail@plt+0x7ad4>
   18f00:	b	18f78 <__assert_fail@plt+0x7a1c>
   18f04:	add	r0, sp, #4
   18f08:	mov	r1, r5
   18f0c:	mov	r2, #7
   18f10:	bl	19030 <__assert_fail@plt+0x7ad4>
   18f14:	b	18f78 <__assert_fail@plt+0x7a1c>
   18f18:	add	r0, sp, #4
   18f1c:	mov	r1, #1024	; 0x400
   18f20:	b	18f74 <__assert_fail@plt+0x7a18>
   18f24:	add	r0, sp, #4
   18f28:	mov	r1, r5
   18f2c:	mov	r2, #6
   18f30:	bl	19030 <__assert_fail@plt+0x7ad4>
   18f34:	b	18f78 <__assert_fail@plt+0x7a1c>
   18f38:	add	r0, sp, #4
   18f3c:	mov	r1, r5
   18f40:	mov	r2, #5
   18f44:	bl	19030 <__assert_fail@plt+0x7ad4>
   18f48:	b	18f78 <__assert_fail@plt+0x7a1c>
   18f4c:	add	r0, sp, #4
   18f50:	mov	r1, r5
   18f54:	mov	r2, #8
   18f58:	bl	19030 <__assert_fail@plt+0x7ad4>
   18f5c:	b	18f78 <__assert_fail@plt+0x7a1c>
   18f60:	add	r0, sp, #4
   18f64:	mov	r1, #512	; 0x200
   18f68:	b	18f74 <__assert_fail@plt+0x7a18>
   18f6c:	add	r0, sp, #4
   18f70:	mov	r1, #2
   18f74:	bl	18fcc <__assert_fail@plt+0x7a70>
   18f78:	ldr	r1, [r9]
   18f7c:	add	r2, r1, r6
   18f80:	str	r2, [r9]
   18f84:	ldrb	r1, [r1, r6]
   18f88:	orr	r8, r0, r8
   18f8c:	cmp	r1, #0
   18f90:	orrne	r8, r8, #2
   18f94:	ldr	r0, [sp, #4]
   18f98:	ldr	r1, [sp]
   18f9c:	str	r0, [r1]
   18fa0:	mov	r0, r8
   18fa4:	sub	sp, fp, #28
   18fa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18fac:	movw	r0, #46570	; 0xb5ea
   18fb0:	movt	r0, #1
   18fb4:	movw	r1, #46608	; 0xb610
   18fb8:	movt	r1, #1
   18fbc:	movw	r3, #46624	; 0xb620
   18fc0:	movt	r3, #1
   18fc4:	mov	r2, #85	; 0x55
   18fc8:	bl	1155c <__assert_fail@plt>
   18fcc:	push	{fp, lr}
   18fd0:	mov	fp, sp
   18fd4:	cmn	r1, #1
   18fd8:	ble	19000 <__assert_fail@plt+0x7aa4>
   18fdc:	cmp	r1, #0
   18fe0:	beq	19018 <__assert_fail@plt+0x7abc>
   18fe4:	mvn	r3, #0
   18fe8:	udiv	ip, r3, r1
   18fec:	ldr	lr, [r0]
   18ff0:	mov	r2, #1
   18ff4:	cmp	ip, lr
   18ff8:	bcs	19018 <__assert_fail@plt+0x7abc>
   18ffc:	b	19024 <__assert_fail@plt+0x7ac8>
   19000:	ldr	r2, [r0]
   19004:	cmp	r2, #0
   19008:	beq	19018 <__assert_fail@plt+0x7abc>
   1900c:	mov	r2, #1
   19010:	mvn	r3, #0
   19014:	b	19024 <__assert_fail@plt+0x7ac8>
   19018:	ldr	r2, [r0]
   1901c:	mul	r3, r2, r1
   19020:	mov	r2, #0
   19024:	str	r3, [r0]
   19028:	mov	r0, r2
   1902c:	pop	{fp, pc}
   19030:	push	{r4, r5, r6, r7, fp, lr}
   19034:	add	fp, sp, #16
   19038:	cmp	r2, #0
   1903c:	beq	19070 <__assert_fail@plt+0x7b14>
   19040:	mov	r4, r2
   19044:	mov	r5, r1
   19048:	mov	r7, r0
   1904c:	mov	r6, #0
   19050:	mov	r0, r7
   19054:	mov	r1, r5
   19058:	bl	18fcc <__assert_fail@plt+0x7a70>
   1905c:	orr	r6, r0, r6
   19060:	subs	r4, r4, #1
   19064:	bne	19050 <__assert_fail@plt+0x7af4>
   19068:	mov	r0, r6
   1906c:	pop	{r4, r5, r6, r7, fp, pc}
   19070:	mov	r6, #0
   19074:	mov	r0, r6
   19078:	pop	{r4, r5, r6, r7, fp, pc}
   1907c:	clz	r2, r1
   19080:	lsr	r2, r2, #5
   19084:	clz	r3, r0
   19088:	lsr	r3, r3, #5
   1908c:	orrs	r2, r3, r2
   19090:	movwne	r1, #1
   19094:	movwne	r0, #1
   19098:	cmp	r1, #0
   1909c:	beq	190cc <__assert_fail@plt+0x7b70>
   190a0:	mvn	r2, #-2147483648	; 0x80000000
   190a4:	udiv	r2, r2, r1
   190a8:	cmp	r2, r0
   190ac:	bcs	190cc <__assert_fail@plt+0x7b70>
   190b0:	push	{fp, lr}
   190b4:	mov	fp, sp
   190b8:	bl	1140c <__errno_location@plt>
   190bc:	mov	r1, #12
   190c0:	str	r1, [r0]
   190c4:	mov	r0, #0
   190c8:	pop	{fp, pc}
   190cc:	b	11220 <calloc@plt>
   190d0:	cmp	r0, #0
   190d4:	movweq	r0, #1
   190d8:	cmn	r0, #1
   190dc:	ble	190e4 <__assert_fail@plt+0x7b88>
   190e0:	b	11370 <malloc@plt>
   190e4:	push	{fp, lr}
   190e8:	mov	fp, sp
   190ec:	bl	1140c <__errno_location@plt>
   190f0:	mov	r1, #12
   190f4:	str	r1, [r0]
   190f8:	mov	r0, #0
   190fc:	pop	{fp, pc}
   19100:	push	{fp, lr}
   19104:	mov	fp, sp
   19108:	cmp	r0, #0
   1910c:	beq	19128 <__assert_fail@plt+0x7bcc>
   19110:	cmp	r1, #0
   19114:	beq	19134 <__assert_fail@plt+0x7bd8>
   19118:	cmn	r1, #1
   1911c:	ble	19140 <__assert_fail@plt+0x7be4>
   19120:	pop	{fp, lr}
   19124:	b	112d4 <realloc@plt>
   19128:	mov	r0, r1
   1912c:	pop	{fp, lr}
   19130:	b	190d0 <__assert_fail@plt+0x7b74>
   19134:	bl	12fdc <__assert_fail@plt+0x1a80>
   19138:	mov	r0, #0
   1913c:	pop	{fp, pc}
   19140:	bl	1140c <__errno_location@plt>
   19144:	mov	r1, #12
   19148:	str	r1, [r0]
   1914c:	mov	r0, #0
   19150:	pop	{fp, pc}
   19154:	push	{r4, r5, r6, sl, fp, lr}
   19158:	add	fp, sp, #16
   1915c:	rsb	lr, r2, #64	; 0x40
   19160:	lsr	ip, r0, lr
   19164:	rsb	r3, lr, #32
   19168:	orr	r3, ip, r1, lsl r3
   1916c:	rsbs	r5, r2, #32
   19170:	lsrpl	r3, r1, r5
   19174:	lsl	r4, r0, r2
   19178:	subs	r6, r2, #32
   1917c:	movwpl	r4, #0
   19180:	orr	ip, r3, r4
   19184:	lsr	r3, r0, r5
   19188:	orr	r2, r3, r1, lsl r2
   1918c:	lslpl	r2, r0, r6
   19190:	lsr	r0, r1, lr
   19194:	cmp	r5, #0
   19198:	movwpl	r0, #0
   1919c:	orr	r1, r0, r2
   191a0:	mov	r0, ip
   191a4:	pop	{r4, r5, r6, sl, fp, pc}
   191a8:	push	{r4, r5, fp, lr}
   191ac:	add	fp, sp, #8
   191b0:	lsr	ip, r0, r2
   191b4:	rsb	r3, r2, #32
   191b8:	orr	ip, ip, r1, lsl r3
   191bc:	subs	lr, r2, #32
   191c0:	lsrpl	ip, r1, lr
   191c4:	rsb	r4, r2, #64	; 0x40
   191c8:	lsl	r5, r0, r4
   191cc:	cmp	r3, #0
   191d0:	movwpl	r5, #0
   191d4:	orr	ip, r5, ip
   191d8:	rsb	r5, r4, #32
   191dc:	lsr	r5, r0, r5
   191e0:	orr	r4, r5, r1, lsl r4
   191e4:	cmp	r3, #0
   191e8:	lslpl	r4, r0, r3
   191ec:	lsr	r0, r1, r2
   191f0:	cmp	lr, #0
   191f4:	movwpl	r0, #0
   191f8:	orr	r1, r4, r0
   191fc:	mov	r0, ip
   19200:	pop	{r4, r5, fp, pc}
   19204:	rsb	r1, r1, #32
   19208:	ror	r0, r0, r1
   1920c:	bx	lr
   19210:	ror	r0, r0, r1
   19214:	bx	lr
   19218:	rsb	r1, r1, #32
   1921c:	ror	r0, r0, r1
   19220:	bx	lr
   19224:	ror	r0, r0, r1
   19228:	bx	lr
   1922c:	and	r2, r1, #15
   19230:	lsl	r2, r0, r2
   19234:	rsb	r1, r1, #0
   19238:	and	r1, r1, #15
   1923c:	orr	r0, r2, r0, lsr r1
   19240:	uxth	r0, r0
   19244:	bx	lr
   19248:	rsb	r2, r1, #0
   1924c:	and	r2, r2, #15
   19250:	lsl	r2, r0, r2
   19254:	and	r1, r1, #15
   19258:	orr	r0, r2, r0, lsr r1
   1925c:	uxth	r0, r0
   19260:	bx	lr
   19264:	and	r2, r1, #7
   19268:	lsl	r2, r0, r2
   1926c:	rsb	r1, r1, #0
   19270:	and	r1, r1, #7
   19274:	orr	r0, r2, r0, lsr r1
   19278:	uxtb	r0, r0
   1927c:	bx	lr
   19280:	rsb	r2, r1, #0
   19284:	and	r2, r2, #7
   19288:	lsl	r2, r0, r2
   1928c:	and	r1, r1, #7
   19290:	orr	r0, r2, r0, lsr r1
   19294:	uxtb	r0, r0
   19298:	bx	lr
   1929c:	mov	r1, r0
   192a0:	sub	r2, r0, #65	; 0x41
   192a4:	mov	r0, #1
   192a8:	cmp	r2, #26
   192ac:	subcs	r2, r1, #97	; 0x61
   192b0:	cmpcs	r2, #26
   192b4:	bcs	192bc <__assert_fail@plt+0x7d60>
   192b8:	bx	lr
   192bc:	sub	r1, r1, #48	; 0x30
   192c0:	cmp	r1, #10
   192c4:	movcs	r0, #0
   192c8:	bx	lr
   192cc:	mov	r1, r0
   192d0:	sub	r2, r0, #65	; 0x41
   192d4:	mov	r0, #1
   192d8:	cmp	r2, #26
   192dc:	subcs	r1, r1, #97	; 0x61
   192e0:	cmpcs	r1, #26
   192e4:	movcs	r0, #0
   192e8:	bx	lr
   192ec:	mov	r1, #0
   192f0:	cmp	r0, #128	; 0x80
   192f4:	movwcc	r1, #1
   192f8:	mov	r0, r1
   192fc:	bx	lr
   19300:	sub	r1, r0, #9
   19304:	clz	r1, r1
   19308:	lsr	r1, r1, #5
   1930c:	sub	r0, r0, #32
   19310:	clz	r0, r0
   19314:	lsr	r0, r0, #5
   19318:	orr	r0, r0, r1
   1931c:	bx	lr
   19320:	mov	r1, r0
   19324:	mov	r0, #1
   19328:	cmp	r1, #32
   1932c:	bxcc	lr
   19330:	cmp	r1, #127	; 0x7f
   19334:	movne	r0, #0
   19338:	bx	lr
   1933c:	sub	r1, r0, #48	; 0x30
   19340:	mov	r0, #0
   19344:	cmp	r1, #10
   19348:	movwcc	r0, #1
   1934c:	bx	lr
   19350:	sub	r1, r0, #33	; 0x21
   19354:	mov	r0, #0
   19358:	cmp	r1, #94	; 0x5e
   1935c:	movwcc	r0, #1
   19360:	bx	lr
   19364:	sub	r1, r0, #97	; 0x61
   19368:	mov	r0, #0
   1936c:	cmp	r1, #26
   19370:	movwcc	r0, #1
   19374:	bx	lr
   19378:	sub	r1, r0, #32
   1937c:	mov	r0, #0
   19380:	cmp	r1, #95	; 0x5f
   19384:	movwcc	r0, #1
   19388:	bx	lr
   1938c:	sub	r1, r0, #33	; 0x21
   19390:	cmp	r1, #93	; 0x5d
   19394:	bhi	19520 <__assert_fail@plt+0x7fc4>
   19398:	mov	r0, #1
   1939c:	add	r2, pc, #0
   193a0:	ldr	pc, [r2, r1, lsl #2]
   193a4:	andeq	r9, r1, ip, lsl r5
   193a8:	andeq	r9, r1, ip, lsl r5
   193ac:	andeq	r9, r1, ip, lsl r5
   193b0:	andeq	r9, r1, ip, lsl r5
   193b4:	andeq	r9, r1, ip, lsl r5
   193b8:	andeq	r9, r1, ip, lsl r5
   193bc:	andeq	r9, r1, ip, lsl r5
   193c0:	andeq	r9, r1, ip, lsl r5
   193c4:	andeq	r9, r1, ip, lsl r5
   193c8:	andeq	r9, r1, ip, lsl r5
   193cc:	andeq	r9, r1, ip, lsl r5
   193d0:	andeq	r9, r1, ip, lsl r5
   193d4:	andeq	r9, r1, ip, lsl r5
   193d8:	andeq	r9, r1, ip, lsl r5
   193dc:	andeq	r9, r1, ip, lsl r5
   193e0:	andeq	r9, r1, r0, lsr #10
   193e4:	andeq	r9, r1, r0, lsr #10
   193e8:	andeq	r9, r1, r0, lsr #10
   193ec:	andeq	r9, r1, r0, lsr #10
   193f0:	andeq	r9, r1, r0, lsr #10
   193f4:	andeq	r9, r1, r0, lsr #10
   193f8:	andeq	r9, r1, r0, lsr #10
   193fc:	andeq	r9, r1, r0, lsr #10
   19400:	andeq	r9, r1, r0, lsr #10
   19404:	andeq	r9, r1, r0, lsr #10
   19408:	andeq	r9, r1, ip, lsl r5
   1940c:	andeq	r9, r1, ip, lsl r5
   19410:	andeq	r9, r1, ip, lsl r5
   19414:	andeq	r9, r1, ip, lsl r5
   19418:	andeq	r9, r1, ip, lsl r5
   1941c:	andeq	r9, r1, ip, lsl r5
   19420:	andeq	r9, r1, ip, lsl r5
   19424:	andeq	r9, r1, r0, lsr #10
   19428:	andeq	r9, r1, r0, lsr #10
   1942c:	andeq	r9, r1, r0, lsr #10
   19430:	andeq	r9, r1, r0, lsr #10
   19434:	andeq	r9, r1, r0, lsr #10
   19438:	andeq	r9, r1, r0, lsr #10
   1943c:	andeq	r9, r1, r0, lsr #10
   19440:	andeq	r9, r1, r0, lsr #10
   19444:	andeq	r9, r1, r0, lsr #10
   19448:	andeq	r9, r1, r0, lsr #10
   1944c:	andeq	r9, r1, r0, lsr #10
   19450:	andeq	r9, r1, r0, lsr #10
   19454:	andeq	r9, r1, r0, lsr #10
   19458:	andeq	r9, r1, r0, lsr #10
   1945c:	andeq	r9, r1, r0, lsr #10
   19460:	andeq	r9, r1, r0, lsr #10
   19464:	andeq	r9, r1, r0, lsr #10
   19468:	andeq	r9, r1, r0, lsr #10
   1946c:	andeq	r9, r1, r0, lsr #10
   19470:	andeq	r9, r1, r0, lsr #10
   19474:	andeq	r9, r1, r0, lsr #10
   19478:	andeq	r9, r1, r0, lsr #10
   1947c:	andeq	r9, r1, r0, lsr #10
   19480:	andeq	r9, r1, r0, lsr #10
   19484:	andeq	r9, r1, r0, lsr #10
   19488:	andeq	r9, r1, r0, lsr #10
   1948c:	andeq	r9, r1, ip, lsl r5
   19490:	andeq	r9, r1, ip, lsl r5
   19494:	andeq	r9, r1, ip, lsl r5
   19498:	andeq	r9, r1, ip, lsl r5
   1949c:	andeq	r9, r1, ip, lsl r5
   194a0:	andeq	r9, r1, ip, lsl r5
   194a4:	andeq	r9, r1, r0, lsr #10
   194a8:	andeq	r9, r1, r0, lsr #10
   194ac:	andeq	r9, r1, r0, lsr #10
   194b0:	andeq	r9, r1, r0, lsr #10
   194b4:	andeq	r9, r1, r0, lsr #10
   194b8:	andeq	r9, r1, r0, lsr #10
   194bc:	andeq	r9, r1, r0, lsr #10
   194c0:	andeq	r9, r1, r0, lsr #10
   194c4:	andeq	r9, r1, r0, lsr #10
   194c8:	andeq	r9, r1, r0, lsr #10
   194cc:	andeq	r9, r1, r0, lsr #10
   194d0:	andeq	r9, r1, r0, lsr #10
   194d4:	andeq	r9, r1, r0, lsr #10
   194d8:	andeq	r9, r1, r0, lsr #10
   194dc:	andeq	r9, r1, r0, lsr #10
   194e0:	andeq	r9, r1, r0, lsr #10
   194e4:	andeq	r9, r1, r0, lsr #10
   194e8:	andeq	r9, r1, r0, lsr #10
   194ec:	andeq	r9, r1, r0, lsr #10
   194f0:	andeq	r9, r1, r0, lsr #10
   194f4:	andeq	r9, r1, r0, lsr #10
   194f8:	andeq	r9, r1, r0, lsr #10
   194fc:	andeq	r9, r1, r0, lsr #10
   19500:	andeq	r9, r1, r0, lsr #10
   19504:	andeq	r9, r1, r0, lsr #10
   19508:	andeq	r9, r1, r0, lsr #10
   1950c:	andeq	r9, r1, ip, lsl r5
   19510:	andeq	r9, r1, ip, lsl r5
   19514:	andeq	r9, r1, ip, lsl r5
   19518:	andeq	r9, r1, ip, lsl r5
   1951c:	bx	lr
   19520:	mov	r0, #0
   19524:	bx	lr
   19528:	sub	r0, r0, #9
   1952c:	cmp	r0, #23
   19530:	movhi	r0, #0
   19534:	bxhi	lr
   19538:	bic	r0, r0, #-16777216	; 0xff000000
   1953c:	movw	r1, #31
   19540:	movt	r1, #128	; 0x80
   19544:	mov	r2, #1
   19548:	and	r0, r2, r1, lsr r0
   1954c:	bx	lr
   19550:	sub	r1, r0, #65	; 0x41
   19554:	mov	r0, #0
   19558:	cmp	r1, #26
   1955c:	movwcc	r0, #1
   19560:	bx	lr
   19564:	mov	r1, r0
   19568:	sub	r2, r0, #48	; 0x30
   1956c:	mov	r0, #1
   19570:	cmp	r2, #22
   19574:	bhi	1958c <__assert_fail@plt+0x8030>
   19578:	mov	ip, #1
   1957c:	movw	r3, #1023	; 0x3ff
   19580:	movt	r3, #126	; 0x7e
   19584:	tst	r3, ip, lsl r2
   19588:	bxne	lr
   1958c:	sub	r1, r1, #97	; 0x61
   19590:	cmp	r1, #6
   19594:	movcs	r0, #0
   19598:	bxcs	lr
   1959c:	bx	lr
   195a0:	sub	r1, r0, #65	; 0x41
   195a4:	cmp	r1, #26
   195a8:	addcc	r0, r0, #32
   195ac:	bx	lr
   195b0:	sub	r1, r0, #97	; 0x61
   195b4:	cmp	r1, #26
   195b8:	subcc	r0, r0, #32
   195bc:	bx	lr
   195c0:	push	{r4, r5, r6, sl, fp, lr}
   195c4:	add	fp, sp, #16
   195c8:	mov	r4, r0
   195cc:	bl	11334 <__fpending@plt>
   195d0:	mov	r5, r0
   195d4:	mov	r0, r4
   195d8:	bl	11340 <ferror_unlocked@plt>
   195dc:	mov	r6, r0
   195e0:	mov	r0, r4
   195e4:	bl	19758 <__assert_fail@plt+0x81fc>
   195e8:	cmp	r6, #0
   195ec:	beq	19610 <__assert_fail@plt+0x80b4>
   195f0:	mvn	r4, #0
   195f4:	cmp	r0, #0
   195f8:	bne	1963c <__assert_fail@plt+0x80e0>
   195fc:	bl	1140c <__errno_location@plt>
   19600:	mov	r1, #0
   19604:	str	r1, [r0]
   19608:	mov	r0, r4
   1960c:	pop	{r4, r5, r6, sl, fp, pc}
   19610:	cmp	r0, #0
   19614:	mov	r4, r0
   19618:	mvnne	r4, #0
   1961c:	cmp	r5, #0
   19620:	bne	1963c <__assert_fail@plt+0x80e0>
   19624:	cmp	r0, #0
   19628:	beq	1963c <__assert_fail@plt+0x80e0>
   1962c:	bl	1140c <__errno_location@plt>
   19630:	ldr	r0, [r0]
   19634:	subs	r4, r0, #9
   19638:	mvnne	r4, #0
   1963c:	mov	r0, r4
   19640:	pop	{r4, r5, r6, sl, fp, pc}
   19644:	mov	r1, #0
   19648:	movw	r2, #62998	; 0xf616
   1964c:	movt	r2, #149	; 0x95
   19650:	str	r1, [r0, #16]
   19654:	str	r1, [r0, #20]
   19658:	str	r2, [r0, #24]
   1965c:	bx	lr
   19660:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19664:	add	fp, sp, #24
   19668:	mov	r5, r1
   1966c:	mov	r4, r0
   19670:	ldr	r0, [r0, #24]
   19674:	movw	r1, #62998	; 0xf616
   19678:	movt	r1, #149	; 0x95
   1967c:	cmp	r0, r1
   19680:	bne	19718 <__assert_fail@plt+0x81bc>
   19684:	add	r6, r4, #8
   19688:	add	r1, r4, #16
   1968c:	ldrd	r2, [r1]
   19690:	orrs	r0, r2, r3
   19694:	beq	196cc <__assert_fail@plt+0x8170>
   19698:	ldm	r4, {r0, r7}
   1969c:	ldrd	r8, [r5, #96]	; 0x60
   196a0:	eor	r7, r9, r7
   196a4:	eor	r0, r8, r0
   196a8:	orrs	r0, r0, r7
   196ac:	bne	196cc <__assert_fail@plt+0x8170>
   196b0:	ldm	r6, {r0, r7}
   196b4:	ldrd	r8, [r5]
   196b8:	eor	r7, r9, r7
   196bc:	eor	r0, r8, r0
   196c0:	orrs	r0, r0, r7
   196c4:	mov	r0, #1
   196c8:	beq	1970c <__assert_fail@plt+0x81b0>
   196cc:	adds	r8, r2, #1
   196d0:	adc	r9, r3, #0
   196d4:	strd	r8, [r1]
   196d8:	mov	r0, r8
   196dc:	mov	r1, r9
   196e0:	bl	19738 <__assert_fail@plt+0x81dc>
   196e4:	mov	r1, r0
   196e8:	mov	r0, #0
   196ec:	cmp	r1, #0
   196f0:	beq	1970c <__assert_fail@plt+0x81b0>
   196f4:	orrs	r1, r8, r9
   196f8:	beq	19710 <__assert_fail@plt+0x81b4>
   196fc:	ldrd	r2, [r5]
   19700:	strd	r2, [r6]
   19704:	ldrd	r2, [r5, #96]	; 0x60
   19708:	strd	r2, [r4]
   1970c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19710:	mov	r0, #1
   19714:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19718:	movw	r0, #46705	; 0xb671
   1971c:	movt	r0, #1
   19720:	movw	r1, #46729	; 0xb689
   19724:	movt	r1, #1
   19728:	movw	r3, #46747	; 0xb69b
   1972c:	movt	r3, #1
   19730:	mov	r2, #60	; 0x3c
   19734:	bl	1155c <__assert_fail@plt>
   19738:	subs	r2, r0, #1
   1973c:	and	r0, r0, r2
   19740:	sbc	r2, r1, #0
   19744:	and	r1, r1, r2
   19748:	orr	r0, r0, r1
   1974c:	clz	r0, r0
   19750:	lsr	r0, r0, #5
   19754:	bx	lr
   19758:	push	{r4, r5, fp, lr}
   1975c:	add	fp, sp, #8
   19760:	sub	sp, sp, #8
   19764:	mov	r4, r0
   19768:	bl	1143c <fileno@plt>
   1976c:	cmn	r0, #1
   19770:	ble	197e8 <__assert_fail@plt+0x828c>
   19774:	mov	r0, r4
   19778:	bl	11388 <__freading@plt>
   1977c:	cmp	r0, #0
   19780:	beq	197ac <__assert_fail@plt+0x8250>
   19784:	mov	r0, r4
   19788:	bl	1143c <fileno@plt>
   1978c:	mov	r1, #1
   19790:	str	r1, [sp]
   19794:	mov	r2, #0
   19798:	mov	r3, #0
   1979c:	bl	1131c <lseek64@plt>
   197a0:	and	r0, r0, r1
   197a4:	cmn	r0, #1
   197a8:	beq	197e8 <__assert_fail@plt+0x828c>
   197ac:	mov	r0, r4
   197b0:	bl	19a18 <__assert_fail@plt+0x84bc>
   197b4:	cmp	r0, #0
   197b8:	beq	197e8 <__assert_fail@plt+0x828c>
   197bc:	bl	1140c <__errno_location@plt>
   197c0:	ldr	r5, [r0]
   197c4:	mov	r0, r4
   197c8:	bl	11454 <fclose@plt>
   197cc:	cmp	r5, #0
   197d0:	beq	197e0 <__assert_fail@plt+0x8284>
   197d4:	bl	1140c <__errno_location@plt>
   197d8:	str	r5, [r0]
   197dc:	mvn	r0, #0
   197e0:	sub	sp, fp, #8
   197e4:	pop	{r4, r5, fp, pc}
   197e8:	mov	r0, r4
   197ec:	sub	sp, fp, #8
   197f0:	pop	{r4, r5, fp, lr}
   197f4:	b	11454 <fclose@plt>
   197f8:	sub	sp, sp, #8
   197fc:	push	{fp, lr}
   19800:	mov	fp, sp
   19804:	sub	sp, sp, #8
   19808:	str	r2, [fp, #8]
   1980c:	str	r3, [fp, #12]
   19810:	add	r2, fp, #8
   19814:	str	r2, [sp, #4]
   19818:	cmp	r1, #11
   1981c:	bhi	1985c <__assert_fail@plt+0x8300>
   19820:	mov	r2, #1
   19824:	movw	r3, #1300	; 0x514
   19828:	tst	r3, r2, lsl r1
   1982c:	bne	198ac <__assert_fail@plt+0x8350>
   19830:	movw	r3, #2570	; 0xa0a
   19834:	tst	r3, r2, lsl r1
   19838:	bne	19884 <__assert_fail@plt+0x8328>
   1983c:	cmp	r1, #0
   19840:	bne	1985c <__assert_fail@plt+0x8300>
   19844:	ldr	r1, [sp, #4]
   19848:	add	r2, r1, #4
   1984c:	str	r2, [sp, #4]
   19850:	ldr	r1, [r1]
   19854:	bl	198d0 <__assert_fail@plt+0x8374>
   19858:	b	198c0 <__assert_fail@plt+0x8364>
   1985c:	sub	r2, r1, #1024	; 0x400
   19860:	cmp	r2, #10
   19864:	bhi	198ac <__assert_fail@plt+0x8350>
   19868:	mov	ip, #1
   1986c:	movw	r3, #645	; 0x285
   19870:	tst	r3, ip, lsl r2
   19874:	bne	198ac <__assert_fail@plt+0x8350>
   19878:	movw	r3, #1282	; 0x502
   1987c:	tst	r3, ip, lsl r2
   19880:	beq	1988c <__assert_fail@plt+0x8330>
   19884:	bl	1146c <fcntl64@plt>
   19888:	b	198c0 <__assert_fail@plt+0x8364>
   1988c:	cmp	r2, #6
   19890:	bne	198ac <__assert_fail@plt+0x8350>
   19894:	ldr	r1, [sp, #4]
   19898:	add	r2, r1, #4
   1989c:	str	r2, [sp, #4]
   198a0:	ldr	r1, [r1]
   198a4:	bl	198dc <__assert_fail@plt+0x8380>
   198a8:	b	198c0 <__assert_fail@plt+0x8364>
   198ac:	ldr	r2, [sp, #4]
   198b0:	add	r3, r2, #4
   198b4:	str	r3, [sp, #4]
   198b8:	ldr	r2, [r2]
   198bc:	bl	1146c <fcntl64@plt>
   198c0:	mov	sp, fp
   198c4:	pop	{fp, lr}
   198c8:	add	sp, sp, #8
   198cc:	bx	lr
   198d0:	mov	r2, r1
   198d4:	mov	r1, #0
   198d8:	b	1146c <fcntl64@plt>
   198dc:	push	{r4, r5, r6, r7, fp, lr}
   198e0:	add	fp, sp, #16
   198e4:	mov	r5, r1
   198e8:	mov	r6, r0
   198ec:	movw	r7, #49912	; 0xc2f8
   198f0:	movt	r7, #2
   198f4:	ldr	r0, [r7]
   198f8:	cmp	r0, #0
   198fc:	bmi	19960 <__assert_fail@plt+0x8404>
   19900:	mov	r0, r6
   19904:	movw	r1, #1030	; 0x406
   19908:	mov	r2, r5
   1990c:	bl	1146c <fcntl64@plt>
   19910:	mov	r4, r0
   19914:	cmn	r0, #1
   19918:	bgt	1994c <__assert_fail@plt+0x83f0>
   1991c:	bl	1140c <__errno_location@plt>
   19920:	ldr	r0, [r0]
   19924:	cmp	r0, #22
   19928:	bne	1994c <__assert_fail@plt+0x83f0>
   1992c:	mov	r0, r6
   19930:	mov	r1, r5
   19934:	bl	198d0 <__assert_fail@plt+0x8374>
   19938:	mov	r4, r0
   1993c:	cmp	r0, #0
   19940:	bmi	199b0 <__assert_fail@plt+0x8454>
   19944:	mvn	r0, #0
   19948:	b	19950 <__assert_fail@plt+0x83f4>
   1994c:	mov	r0, #1
   19950:	str	r0, [r7]
   19954:	cmp	r4, #0
   19958:	bpl	19978 <__assert_fail@plt+0x841c>
   1995c:	b	199b0 <__assert_fail@plt+0x8454>
   19960:	mov	r0, r6
   19964:	mov	r1, r5
   19968:	bl	198d0 <__assert_fail@plt+0x8374>
   1996c:	mov	r4, r0
   19970:	cmp	r4, #0
   19974:	bmi	199b0 <__assert_fail@plt+0x8454>
   19978:	ldr	r0, [r7]
   1997c:	cmn	r0, #1
   19980:	bne	199b0 <__assert_fail@plt+0x8454>
   19984:	mov	r0, r4
   19988:	mov	r1, #1
   1998c:	bl	1146c <fcntl64@plt>
   19990:	cmp	r0, #0
   19994:	bmi	199b8 <__assert_fail@plt+0x845c>
   19998:	orr	r2, r0, #1
   1999c:	mov	r0, r4
   199a0:	mov	r1, #2
   199a4:	bl	1146c <fcntl64@plt>
   199a8:	cmn	r0, #1
   199ac:	beq	199b8 <__assert_fail@plt+0x845c>
   199b0:	mov	r0, r4
   199b4:	pop	{r4, r5, r6, r7, fp, pc}
   199b8:	bl	1140c <__errno_location@plt>
   199bc:	mov	r5, r0
   199c0:	ldr	r6, [r0]
   199c4:	mov	r0, r4
   199c8:	bl	11520 <close@plt>
   199cc:	str	r6, [r5]
   199d0:	mvn	r4, #0
   199d4:	mov	r0, r4
   199d8:	pop	{r4, r5, r6, r7, fp, pc}
   199dc:	sub	sp, sp, #8
   199e0:	push	{fp, lr}
   199e4:	mov	fp, sp
   199e8:	sub	sp, sp, #8
   199ec:	str	r2, [fp, #8]
   199f0:	str	r3, [fp, #12]
   199f4:	mov	r2, #0
   199f8:	tst	r1, #64	; 0x40
   199fc:	ldrne	r2, [fp, #8]
   19a00:	bl	11364 <open64@plt>
   19a04:	bl	17e70 <__assert_fail@plt+0x6914>
   19a08:	mov	sp, fp
   19a0c:	pop	{fp, lr}
   19a10:	add	sp, sp, #8
   19a14:	bx	lr
   19a18:	push	{r4, sl, fp, lr}
   19a1c:	add	fp, sp, #8
   19a20:	mov	r4, r0
   19a24:	cmp	r0, #0
   19a28:	beq	19a40 <__assert_fail@plt+0x84e4>
   19a2c:	mov	r0, r4
   19a30:	bl	11388 <__freading@plt>
   19a34:	cmp	r0, #0
   19a38:	movne	r0, r4
   19a3c:	blne	19a4c <__assert_fail@plt+0x84f0>
   19a40:	mov	r0, r4
   19a44:	pop	{r4, sl, fp, lr}
   19a48:	b	11274 <fflush@plt>
   19a4c:	push	{fp, lr}
   19a50:	mov	fp, sp
   19a54:	sub	sp, sp, #8
   19a58:	ldrb	r1, [r0, #1]
   19a5c:	tst	r1, #1
   19a60:	beq	19a78 <__assert_fail@plt+0x851c>
   19a64:	mov	r1, #1
   19a68:	str	r1, [sp]
   19a6c:	mov	r2, #0
   19a70:	mov	r3, #0
   19a74:	bl	19a80 <__assert_fail@plt+0x8524>
   19a78:	mov	sp, fp
   19a7c:	pop	{fp, pc}
   19a80:	push	{r4, r5, r6, r7, fp, lr}
   19a84:	add	fp, sp, #16
   19a88:	sub	sp, sp, #8
   19a8c:	mov	r5, r3
   19a90:	mov	r6, r2
   19a94:	mov	r4, r0
   19a98:	ldr	r0, [r0, #4]
   19a9c:	ldr	r1, [r4, #8]
   19aa0:	cmp	r1, r0
   19aa4:	bne	19ac0 <__assert_fail@plt+0x8564>
   19aa8:	ldrd	r0, [r4, #16]
   19aac:	cmp	r1, r0
   19ab0:	bne	19ac0 <__assert_fail@plt+0x8564>
   19ab4:	ldr	r0, [r4, #36]	; 0x24
   19ab8:	cmp	r0, #0
   19abc:	beq	19ad8 <__assert_fail@plt+0x857c>
   19ac0:	mov	r0, r4
   19ac4:	mov	r2, r6
   19ac8:	mov	r3, r5
   19acc:	sub	sp, fp, #16
   19ad0:	pop	{r4, r5, r6, r7, fp, lr}
   19ad4:	b	11460 <fseeko64@plt>
   19ad8:	ldr	r7, [fp, #8]
   19adc:	mov	r0, r4
   19ae0:	bl	1143c <fileno@plt>
   19ae4:	str	r7, [sp]
   19ae8:	mov	r2, r6
   19aec:	mov	r3, r5
   19af0:	bl	1131c <lseek64@plt>
   19af4:	and	r2, r0, r1
   19af8:	cmn	r2, #1
   19afc:	beq	19b1c <__assert_fail@plt+0x85c0>
   19b00:	strd	r0, [r4, #80]	; 0x50
   19b04:	ldr	r0, [r4]
   19b08:	bic	r0, r0, #16
   19b0c:	str	r0, [r4]
   19b10:	mov	r0, #0
   19b14:	sub	sp, fp, #16
   19b18:	pop	{r4, r5, r6, r7, fp, pc}
   19b1c:	mvn	r0, #0
   19b20:	sub	sp, fp, #16
   19b24:	pop	{r4, r5, r6, r7, fp, pc}
   19b28:	push	{fp, lr}
   19b2c:	mov	fp, sp
   19b30:	bl	1140c <__errno_location@plt>
   19b34:	mov	r1, #12
   19b38:	str	r1, [r0]
   19b3c:	mov	r0, #0
   19b40:	pop	{fp, pc}
   19b44:	b	190d0 <__assert_fail@plt+0x7b74>
   19b48:	cmp	r1, #0
   19b4c:	orreq	r1, r1, #1
   19b50:	b	19100 <__assert_fail@plt+0x7ba4>
   19b54:	b	1907c <__assert_fail@plt+0x7b20>
   19b58:	clz	r3, r2
   19b5c:	lsr	ip, r3, #5
   19b60:	clz	r3, r1
   19b64:	lsr	r3, r3, #5
   19b68:	orrs	r3, r3, ip
   19b6c:	movwne	r1, #1
   19b70:	movwne	r2, #1
   19b74:	b	19c14 <__assert_fail@plt+0x86b8>
   19b78:	push	{fp, lr}
   19b7c:	mov	fp, sp
   19b80:	mov	r0, #14
   19b84:	bl	1149c <nl_langinfo@plt>
   19b88:	movw	r1, #42856	; 0xa768
   19b8c:	movt	r1, #1
   19b90:	cmp	r0, #0
   19b94:	movne	r1, r0
   19b98:	ldrb	r2, [r1]
   19b9c:	movw	r0, #46814	; 0xb6de
   19ba0:	movt	r0, #1
   19ba4:	cmp	r2, #0
   19ba8:	movne	r0, r1
   19bac:	pop	{fp, pc}
   19bb0:	push	{r4, r5, r6, r7, fp, lr}
   19bb4:	add	fp, sp, #16
   19bb8:	sub	sp, sp, #8
   19bbc:	mov	r7, r2
   19bc0:	mov	r4, r1
   19bc4:	add	r5, sp, #4
   19bc8:	cmp	r0, #0
   19bcc:	movne	r5, r0
   19bd0:	mov	r0, r5
   19bd4:	bl	1134c <mbrtowc@plt>
   19bd8:	mov	r6, r0
   19bdc:	cmp	r7, #0
   19be0:	beq	19c08 <__assert_fail@plt+0x86ac>
   19be4:	cmn	r6, #2
   19be8:	bcc	19c08 <__assert_fail@plt+0x86ac>
   19bec:	mov	r0, #0
   19bf0:	bl	19c5c <__assert_fail@plt+0x8700>
   19bf4:	cmp	r0, #0
   19bf8:	bne	19c08 <__assert_fail@plt+0x86ac>
   19bfc:	ldrb	r0, [r4]
   19c00:	str	r0, [r5]
   19c04:	mov	r6, #1
   19c08:	mov	r0, r6
   19c0c:	sub	sp, fp, #16
   19c10:	pop	{r4, r5, r6, r7, fp, pc}
   19c14:	cmp	r2, #0
   19c18:	beq	19c48 <__assert_fail@plt+0x86ec>
   19c1c:	mvn	r3, #0
   19c20:	udiv	r3, r3, r2
   19c24:	cmp	r3, r1
   19c28:	bcs	19c48 <__assert_fail@plt+0x86ec>
   19c2c:	push	{fp, lr}
   19c30:	mov	fp, sp
   19c34:	bl	1140c <__errno_location@plt>
   19c38:	mov	r1, #12
   19c3c:	str	r1, [r0]
   19c40:	mov	r0, #0
   19c44:	pop	{fp, pc}
   19c48:	mul	r1, r2, r1
   19c4c:	b	19100 <__assert_fail@plt+0x7ba4>
   19c50:	mov	r1, #0
   19c54:	mov	r2, #3
   19c58:	b	197f8 <__assert_fail@plt+0x829c>
   19c5c:	push	{r4, sl, fp, lr}
   19c60:	add	fp, sp, #8
   19c64:	sub	sp, sp, #264	; 0x108
   19c68:	add	r1, sp, #7
   19c6c:	movw	r2, #257	; 0x101
   19c70:	bl	19cc8 <__assert_fail@plt+0x876c>
   19c74:	mov	r4, #0
   19c78:	cmp	r0, #0
   19c7c:	bne	19cbc <__assert_fail@plt+0x8760>
   19c80:	add	r0, sp, #7
   19c84:	movw	r1, #46820	; 0xb6e4
   19c88:	movt	r1, #1
   19c8c:	mov	r2, #2
   19c90:	bl	113c4 <bcmp@plt>
   19c94:	cmp	r0, #0
   19c98:	beq	19cbc <__assert_fail@plt+0x8760>
   19c9c:	add	r0, sp, #7
   19ca0:	movw	r1, #46822	; 0xb6e6
   19ca4:	movt	r1, #1
   19ca8:	mov	r2, #6
   19cac:	bl	113c4 <bcmp@plt>
   19cb0:	mov	r4, r0
   19cb4:	cmp	r0, #0
   19cb8:	movwne	r4, #1
   19cbc:	mov	r0, r4
   19cc0:	sub	sp, fp, #8
   19cc4:	pop	{r4, sl, fp, pc}
   19cc8:	b	19ccc <__assert_fail@plt+0x8770>
   19ccc:	push	{r4, r5, r6, r7, fp, lr}
   19cd0:	add	fp, sp, #16
   19cd4:	mov	r6, r2
   19cd8:	mov	r4, r1
   19cdc:	bl	19d64 <__assert_fail@plt+0x8808>
   19ce0:	cmp	r0, #0
   19ce4:	beq	19d14 <__assert_fail@plt+0x87b8>
   19ce8:	mov	r7, r0
   19cec:	bl	113dc <strlen@plt>
   19cf0:	cmp	r0, r6
   19cf4:	bcs	19d30 <__assert_fail@plt+0x87d4>
   19cf8:	add	r2, r0, #1
   19cfc:	mov	r0, r4
   19d00:	mov	r1, r7
   19d04:	bl	112a4 <memcpy@plt>
   19d08:	mov	r5, #0
   19d0c:	mov	r0, r5
   19d10:	pop	{r4, r5, r6, r7, fp, pc}
   19d14:	mov	r5, #22
   19d18:	cmp	r6, #0
   19d1c:	beq	19d58 <__assert_fail@plt+0x87fc>
   19d20:	mov	r0, #0
   19d24:	strb	r0, [r4]
   19d28:	mov	r0, r5
   19d2c:	pop	{r4, r5, r6, r7, fp, pc}
   19d30:	mov	r5, #34	; 0x22
   19d34:	cmp	r6, #0
   19d38:	beq	19d58 <__assert_fail@plt+0x87fc>
   19d3c:	sub	r6, r6, #1
   19d40:	mov	r0, r4
   19d44:	mov	r1, r7
   19d48:	mov	r2, r6
   19d4c:	bl	112a4 <memcpy@plt>
   19d50:	mov	r0, #0
   19d54:	strb	r0, [r4, r6]
   19d58:	mov	r0, r5
   19d5c:	pop	{r4, r5, r6, r7, fp, pc}
   19d60:	b	19d64 <__assert_fail@plt+0x8808>
   19d64:	mov	r1, #0
   19d68:	b	11478 <setlocale@plt>
   19d6c:	cmp	r3, #0
   19d70:	cmpeq	r2, #0
   19d74:	bne	19d8c <__assert_fail@plt+0x8830>
   19d78:	cmp	r1, #0
   19d7c:	cmpeq	r0, #0
   19d80:	mvnne	r1, #0
   19d84:	mvnne	r0, #0
   19d88:	b	19da8 <__assert_fail@plt+0x884c>
   19d8c:	sub	sp, sp, #8
   19d90:	push	{sp, lr}
   19d94:	bl	19db8 <__assert_fail@plt+0x885c>
   19d98:	ldr	lr, [sp, #4]
   19d9c:	add	sp, sp, #8
   19da0:	pop	{r2, r3}
   19da4:	bx	lr
   19da8:	push	{r1, lr}
   19dac:	mov	r0, #8
   19db0:	bl	11244 <raise@plt>
   19db4:	pop	{r1, pc}
   19db8:	cmp	r1, r3
   19dbc:	cmpeq	r0, r2
   19dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19dc4:	mov	r4, r0
   19dc8:	movcc	r0, #0
   19dcc:	mov	r5, r1
   19dd0:	ldr	lr, [sp, #36]	; 0x24
   19dd4:	movcc	r1, r0
   19dd8:	bcc	19ed4 <__assert_fail@plt+0x8978>
   19ddc:	cmp	r3, #0
   19de0:	clzeq	ip, r2
   19de4:	clzne	ip, r3
   19de8:	addeq	ip, ip, #32
   19dec:	cmp	r5, #0
   19df0:	clzeq	r1, r4
   19df4:	addeq	r1, r1, #32
   19df8:	clzne	r1, r5
   19dfc:	sub	ip, ip, r1
   19e00:	sub	sl, ip, #32
   19e04:	lsl	r9, r3, ip
   19e08:	rsb	fp, ip, #32
   19e0c:	orr	r9, r9, r2, lsl sl
   19e10:	orr	r9, r9, r2, lsr fp
   19e14:	lsl	r8, r2, ip
   19e18:	cmp	r5, r9
   19e1c:	cmpeq	r4, r8
   19e20:	movcc	r0, #0
   19e24:	movcc	r1, r0
   19e28:	bcc	19e44 <__assert_fail@plt+0x88e8>
   19e2c:	mov	r0, #1
   19e30:	subs	r4, r4, r8
   19e34:	lsl	r1, r0, sl
   19e38:	orr	r1, r1, r0, lsr fp
   19e3c:	lsl	r0, r0, ip
   19e40:	sbc	r5, r5, r9
   19e44:	cmp	ip, #0
   19e48:	beq	19ed4 <__assert_fail@plt+0x8978>
   19e4c:	lsr	r6, r8, #1
   19e50:	orr	r6, r6, r9, lsl #31
   19e54:	lsr	r7, r9, #1
   19e58:	mov	r2, ip
   19e5c:	b	19e80 <__assert_fail@plt+0x8924>
   19e60:	subs	r3, r4, r6
   19e64:	sbc	r8, r5, r7
   19e68:	adds	r3, r3, r3
   19e6c:	adc	r8, r8, r8
   19e70:	adds	r4, r3, #1
   19e74:	adc	r5, r8, #0
   19e78:	subs	r2, r2, #1
   19e7c:	beq	19e9c <__assert_fail@plt+0x8940>
   19e80:	cmp	r5, r7
   19e84:	cmpeq	r4, r6
   19e88:	bcs	19e60 <__assert_fail@plt+0x8904>
   19e8c:	adds	r4, r4, r4
   19e90:	adc	r5, r5, r5
   19e94:	subs	r2, r2, #1
   19e98:	bne	19e80 <__assert_fail@plt+0x8924>
   19e9c:	lsr	r3, r4, ip
   19ea0:	orr	r3, r3, r5, lsl fp
   19ea4:	lsr	r2, r5, ip
   19ea8:	orr	r3, r3, r5, lsr sl
   19eac:	adds	r0, r0, r4
   19eb0:	mov	r4, r3
   19eb4:	lsl	r3, r2, ip
   19eb8:	orr	r3, r3, r4, lsl sl
   19ebc:	lsl	ip, r4, ip
   19ec0:	orr	r3, r3, r4, lsr fp
   19ec4:	adc	r1, r1, r5
   19ec8:	subs	r0, r0, ip
   19ecc:	mov	r5, r2
   19ed0:	sbc	r1, r1, r3
   19ed4:	cmp	lr, #0
   19ed8:	strdne	r4, [lr]
   19edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ee0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ee4:	mov	r7, r0
   19ee8:	ldr	r6, [pc, #72]	; 19f38 <__assert_fail@plt+0x89dc>
   19eec:	ldr	r5, [pc, #72]	; 19f3c <__assert_fail@plt+0x89e0>
   19ef0:	add	r6, pc, r6
   19ef4:	add	r5, pc, r5
   19ef8:	sub	r6, r6, r5
   19efc:	mov	r8, r1
   19f00:	mov	r9, r2
   19f04:	bl	111f4 <fstatfs64@plt-0x20>
   19f08:	asrs	r6, r6, #2
   19f0c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f10:	mov	r4, #0
   19f14:	add	r4, r4, #1
   19f18:	ldr	r3, [r5], #4
   19f1c:	mov	r2, r9
   19f20:	mov	r1, r8
   19f24:	mov	r0, r7
   19f28:	blx	r3
   19f2c:	cmp	r6, r4
   19f30:	bne	19f14 <__assert_fail@plt+0x89b8>
   19f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f38:	andeq	r2, r1, r4, lsl r0
   19f3c:	andeq	r2, r1, ip
   19f40:	bx	lr
   19f44:	ldr	r3, [pc, #12]	; 19f58 <__assert_fail@plt+0x89fc>
   19f48:	mov	r1, #0
   19f4c:	add	r3, pc, r3
   19f50:	ldr	r2, [r3]
   19f54:	b	11418 <__cxa_atexit@plt>
   19f58:	andeq	r2, r1, r0, ror #3
   19f5c:	mov	r2, r1
   19f60:	mov	r1, r0
   19f64:	mov	r0, #3
   19f68:	b	114fc <__xstat64@plt>
   19f6c:	mov	r2, r1
   19f70:	mov	r1, r0
   19f74:	mov	r0, #3
   19f78:	b	11304 <__fxstat64@plt>
   19f7c:	mov	r2, r1
   19f80:	mov	r1, r0
   19f84:	mov	r0, #3
   19f88:	b	1152c <__lxstat64@plt>
   19f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   19f90:	sub	sp, sp, #12
   19f94:	str	r3, [sp]
   19f98:	mov	r3, r2
   19f9c:	mov	r2, r1
   19fa0:	mov	r1, r0
   19fa4:	mov	r0, #3
   19fa8:	bl	112ec <__fxstatat64@plt>
   19fac:	add	sp, sp, #12
   19fb0:	pop	{pc}		; (ldr pc, [sp], #4)

Disassembly of section .fini:

00019fb4 <.fini>:
   19fb4:	push	{r3, lr}
   19fb8:	pop	{r3, pc}
