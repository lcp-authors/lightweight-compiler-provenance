
../repos/prog2/3.e.3:     file format elf32-littlearm


Disassembly of section .init:

00010694 <.init>:
   10694:	push	{r3, lr}
   10698:	bl	107a8 <_start@@Base+0x3c>
   1069c:	pop	{r3, pc}

Disassembly of section .plt:

000106a0 <__isoc99_fscanf@plt-0x14>:
   106a0:	push	{lr}		; (str lr, [sp, #-4]!)
   106a4:	ldr	lr, [pc, #4]	; 106b0 <__isoc99_fscanf@plt-0x4>
   106a8:	add	lr, pc, lr
   106ac:	ldr	pc, [lr, #8]!
   106b0:	andeq	r0, r1, r0, asr r9

000106b4 <__isoc99_fscanf@plt>:
   106b4:	add	ip, pc, #0, 12
   106b8:	add	ip, ip, #16, 20	; 0x10000
   106bc:	ldr	pc, [ip, #2384]!	; 0x950

000106c0 <fopen@plt>:
   106c0:	add	ip, pc, #0, 12
   106c4:	add	ip, ip, #16, 20	; 0x10000
   106c8:	ldr	pc, [ip, #2376]!	; 0x948

000106cc <realloc@plt>:
   106cc:	add	ip, pc, #0, 12
   106d0:	add	ip, ip, #16, 20	; 0x10000
   106d4:	ldr	pc, [ip, #2368]!	; 0x940

000106d8 <fwrite@plt>:
   106d8:	add	ip, pc, #0, 12
   106dc:	add	ip, ip, #16, 20	; 0x10000
   106e0:	ldr	pc, [ip, #2360]!	; 0x938

000106e4 <malloc@plt>:
   106e4:	add	ip, pc, #0, 12
   106e8:	add	ip, ip, #16, 20	; 0x10000
   106ec:	ldr	pc, [ip, #2352]!	; 0x930

000106f0 <__libc_start_main@plt>:
   106f0:	add	ip, pc, #0, 12
   106f4:	add	ip, ip, #16, 20	; 0x10000
   106f8:	ldr	pc, [ip, #2344]!	; 0x928

000106fc <__gmon_start__@plt>:
   106fc:	add	ip, pc, #0, 12
   10700:	add	ip, ip, #16, 20	; 0x10000
   10704:	ldr	pc, [ip, #2336]!	; 0x920

00010708 <fprintf@plt>:
   10708:	add	ip, pc, #0, 12
   1070c:	add	ip, ip, #16, 20	; 0x10000
   10710:	ldr	pc, [ip, #2328]!	; 0x918

00010714 <fclose@plt>:
   10714:	add	ip, pc, #0, 12
   10718:	add	ip, ip, #16, 20	; 0x10000
   1071c:	ldr	pc, [ip, #2320]!	; 0x910

00010720 <abort@plt>:
   10720:	add	ip, pc, #0, 12
   10724:	add	ip, ip, #16, 20	; 0x10000
   10728:	ldr	pc, [ip, #2312]!	; 0x908

Disassembly of section .text:

0001072c <main@@Base>:
   1072c:	push	{r4, lr}
   10730:	sub	sp, sp, #8
   10734:	add	r1, sp, #8
   10738:	mov	r4, #0
   1073c:	str	r4, [r1, #-4]!
   10740:	mov	r0, r4
   10744:	bl	10894 <analisarFicheiro@@Base>
   10748:	ldr	r2, [sp, #4]
   1074c:	mov	r1, r0
   10750:	ldr	r0, [pc, #16]	; 10768 <main@@Base+0x3c>
   10754:	add	r0, pc, r0
   10758:	bl	10938 <gerarRelatorio@@Base>
   1075c:	mov	r0, r4
   10760:	add	sp, sp, #8
   10764:	pop	{r4, pc}
   10768:	andeq	r0, r0, r0, asr r3

0001076c <_start@@Base>:
   1076c:	mov	fp, #0
   10770:	mov	lr, #0
   10774:	pop	{r1}		; (ldr r1, [sp], #4)
   10778:	mov	r2, sp
   1077c:	push	{r2}		; (str r2, [sp, #-4]!)
   10780:	push	{r0}		; (str r0, [sp, #-4]!)
   10784:	ldr	ip, [pc, #16]	; 1079c <_start@@Base+0x30>
   10788:	push	{ip}		; (str ip, [sp, #-4]!)
   1078c:	ldr	r0, [pc, #12]	; 107a0 <_start@@Base+0x34>
   10790:	ldr	r3, [pc, #12]	; 107a4 <_start@@Base+0x38>
   10794:	bl	106f0 <__libc_start_main@plt>
   10798:	bl	10720 <abort@plt>
   1079c:	andeq	r0, r1, r8, asr sl
   107a0:	andeq	r0, r1, ip, lsr #14
   107a4:	strdeq	r0, [r1], -r8
   107a8:	ldr	r3, [pc, #20]	; 107c4 <_start@@Base+0x58>
   107ac:	ldr	r2, [pc, #20]	; 107c8 <_start@@Base+0x5c>
   107b0:	add	r3, pc, r3
   107b4:	ldr	r2, [r3, r2]
   107b8:	cmp	r2, #0
   107bc:	bxeq	lr
   107c0:	b	106fc <__gmon_start__@plt>
   107c4:	andeq	r0, r1, r8, asr #16
   107c8:	andeq	r0, r0, r4, lsr r0
   107cc:	ldr	r3, [pc, #28]	; 107f0 <_start@@Base+0x84>
   107d0:	ldr	r0, [pc, #28]	; 107f4 <_start@@Base+0x88>
   107d4:	sub	r3, r3, r0
   107d8:	cmp	r3, #6
   107dc:	bxls	lr
   107e0:	ldr	r3, [pc, #16]	; 107f8 <_start@@Base+0x8c>
   107e4:	cmp	r3, #0
   107e8:	bxeq	lr
   107ec:	bx	r3
   107f0:	andeq	r1, r2, r3, asr #32
   107f4:	andeq	r1, r2, r0, asr #32
   107f8:	andeq	r0, r0, r0
   107fc:	ldr	r1, [pc, #36]	; 10828 <_start@@Base+0xbc>
   10800:	ldr	r0, [pc, #36]	; 1082c <_start@@Base+0xc0>
   10804:	sub	r1, r1, r0
   10808:	asr	r1, r1, #2
   1080c:	add	r1, r1, r1, lsr #31
   10810:	asrs	r1, r1, #1
   10814:	bxeq	lr
   10818:	ldr	r3, [pc, #16]	; 10830 <_start@@Base+0xc4>
   1081c:	cmp	r3, #0
   10820:	bxeq	lr
   10824:	bx	r3
   10828:	andeq	r1, r2, r0, asr #32
   1082c:	andeq	r1, r2, r0, asr #32
   10830:	andeq	r0, r0, r0
   10834:	push	{r4, lr}
   10838:	ldr	r4, [pc, #24]	; 10858 <_start@@Base+0xec>
   1083c:	ldrb	r3, [r4]
   10840:	cmp	r3, #0
   10844:	popne	{r4, pc}
   10848:	bl	107cc <_start@@Base+0x60>
   1084c:	mov	r3, #1
   10850:	strb	r3, [r4]
   10854:	pop	{r4, pc}
   10858:	andeq	r1, r2, r0, asr #32
   1085c:	ldr	r0, [pc, #40]	; 1088c <_start@@Base+0x120>
   10860:	ldr	r3, [r0]
   10864:	cmp	r3, #0
   10868:	bne	10870 <_start@@Base+0x104>
   1086c:	b	107fc <_start@@Base+0x90>
   10870:	ldr	r3, [pc, #24]	; 10890 <_start@@Base+0x124>
   10874:	cmp	r3, #0
   10878:	beq	1086c <_start@@Base+0x100>
   1087c:	push	{r4, lr}
   10880:	blx	r3
   10884:	pop	{r4, lr}
   10888:	b	107fc <_start@@Base+0x90>
   1088c:	andeq	r0, r2, r4, lsl pc
   10890:	andeq	r0, r0, r0

00010894 <analisarFicheiro@@Base>:
   10894:	push	{r4, r5, r6, r7, r8, r9, lr}
   10898:	mov	r9, r1
   1089c:	ldr	r0, [pc, #136]	; 1092c <analisarFicheiro@@Base+0x98>
   108a0:	ldr	r1, [pc, #136]	; 10930 <analisarFicheiro@@Base+0x9c>
   108a4:	sub	sp, sp, #12
   108a8:	add	r1, pc, r1
   108ac:	add	r0, pc, r0
   108b0:	bl	106c0 <fopen@plt>
   108b4:	ldr	r8, [pc, #120]	; 10934 <analisarFicheiro@@Base+0xa0>
   108b8:	mov	r4, #0
   108bc:	mov	r6, r4
   108c0:	add	r8, pc, r8
   108c4:	mov	r7, r0
   108c8:	mov	r0, #104	; 0x68
   108cc:	bl	106e4 <malloc@plt>
   108d0:	mov	r5, r0
   108d4:	b	108e4 <analisarFicheiro@@Base+0x50>
   108d8:	bl	106cc <realloc@plt>
   108dc:	add	r6, r6, #1
   108e0:	mov	r5, r0
   108e4:	add	r2, r5, r4
   108e8:	add	r3, r2, #100	; 0x64
   108ec:	str	r3, [sp]
   108f0:	mov	r1, r8
   108f4:	add	r3, r2, #50	; 0x32
   108f8:	mov	r0, r7
   108fc:	bl	106b4 <__isoc99_fscanf@plt>
   10900:	add	r4, r4, #104	; 0x68
   10904:	mov	r1, r4
   10908:	cmp	r0, #3
   1090c:	mov	r0, r5
   10910:	beq	108d8 <analisarFicheiro@@Base+0x44>
   10914:	str	r6, [r9]
   10918:	mov	r0, r7
   1091c:	bl	10714 <fclose@plt>
   10920:	mov	r0, r5
   10924:	add	sp, sp, #12
   10928:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1092c:			; <UNDEFINED> instruction: 0x000001b8
   10930:			; <UNDEFINED> instruction: 0x000001b8
   10934:			; <UNDEFINED> instruction: 0x000001b4

00010938 <gerarRelatorio@@Base>:
   10938:	ldr	r1, [pc, #172]	; 109ec <gerarRelatorio@@Base+0xb4>
   1093c:	push	{r4, r5, r6, r7, r8, r9, lr}
   10940:	add	r1, pc, r1
   10944:	sub	sp, sp, #12
   10948:	mov	r8, r2
   1094c:	bl	106c0 <fopen@plt>
   10950:	mov	r2, #10
   10954:	mov	r1, #1
   10958:	mov	r3, r0
   1095c:	mov	r7, r0
   10960:	ldr	r0, [pc, #136]	; 109f0 <gerarRelatorio@@Base+0xb8>
   10964:	add	r0, pc, r0
   10968:	bl	106d8 <fwrite@plt>
   1096c:	mov	r0, #104	; 0x68
   10970:	bl	106e4 <malloc@plt>
   10974:	cmp	r8, #0
   10978:	ble	109dc <gerarRelatorio@@Base+0xa4>
   1097c:	ldr	r9, [pc, #112]	; 109f4 <gerarRelatorio@@Base+0xbc>
   10980:	mov	r6, r0
   10984:	add	r9, pc, r9
   10988:	mov	r5, #104	; 0x68
   1098c:	mov	r4, #0
   10990:	mov	r1, r5
   10994:	mov	r0, r6
   10998:	bl	106cc <realloc@plt>
   1099c:	sub	r2, r5, #104	; 0x68
   109a0:	add	r5, r5, #104	; 0x68
   109a4:	add	r2, r0, r2
   109a8:	mov	r6, r0
   109ac:	ldr	r1, [r2, #100]	; 0x64
   109b0:	add	r0, r4, #1
   109b4:	add	r3, r2, #50	; 0x32
   109b8:	str	r1, [sp, #4]
   109bc:	str	r2, [sp]
   109c0:	mov	r1, r9
   109c4:	mov	r2, r4
   109c8:	mov	r4, r0
   109cc:	mov	r0, r7
   109d0:	bl	10708 <fprintf@plt>
   109d4:	cmp	r8, r4
   109d8:	bne	10990 <gerarRelatorio@@Base+0x58>
   109dc:	mov	r0, r7
   109e0:	add	sp, sp, #12
   109e4:	pop	{r4, r5, r6, r7, r8, r9, lr}
   109e8:	b	10714 <fclose@plt>
   109ec:	andeq	r0, r0, r0, asr #2
   109f0:	andeq	r0, r0, r0, lsr #2
   109f4:	andeq	r0, r0, ip, lsl #2

000109f8 <__libc_csu_init@@Base>:
   109f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   109fc:	mov	r7, r0
   10a00:	ldr	r6, [pc, #72]	; 10a50 <__libc_csu_init@@Base+0x58>
   10a04:	ldr	r5, [pc, #72]	; 10a54 <__libc_csu_init@@Base+0x5c>
   10a08:	add	r6, pc, r6
   10a0c:	add	r5, pc, r5
   10a10:	sub	r6, r6, r5
   10a14:	mov	r8, r1
   10a18:	mov	r9, r2
   10a1c:	bl	10694 <__isoc99_fscanf@plt-0x20>
   10a20:	asrs	r6, r6, #2
   10a24:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a28:	mov	r4, #0
   10a2c:	add	r4, r4, #1
   10a30:	ldr	r3, [r5], #4
   10a34:	mov	r2, r9
   10a38:	mov	r1, r8
   10a3c:	mov	r0, r7
   10a40:	blx	r3
   10a44:	cmp	r6, r4
   10a48:	bne	10a2c <__libc_csu_init@@Base+0x34>
   10a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10a50:	andeq	r0, r1, r0, lsl #10
   10a54:	strdeq	r0, [r1], -r8

00010a58 <__libc_csu_fini@@Base>:
   10a58:	bx	lr

Disassembly of section .fini:

00010a5c <.fini>:
   10a5c:	push	{r3, lr}
   10a60:	pop	{r3, pc}
