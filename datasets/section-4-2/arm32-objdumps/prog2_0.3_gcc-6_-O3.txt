
../repos/prog2/0.3:     file format elf32-littlearm


Disassembly of section .init:

000105f0 <.init>:
   105f0:	push	{r3, lr}
   105f4:	bl	108f0 <_start@@Base+0x3c>
   105f8:	pop	{r3, pc}

Disassembly of section .plt:

000105fc <printf@plt-0x14>:
   105fc:	push	{lr}		; (str lr, [sp, #-4]!)
   10600:	ldr	lr, [pc, #4]	; 1060c <printf@plt-0x4>
   10604:	add	lr, pc, lr
   10608:	ldr	pc, [lr, #8]!
   1060c:	strdeq	r0, [r1], -r4

00010610 <printf@plt>:
   10610:	add	ip, pc, #0, 12
   10614:	add	ip, ip, #16, 20	; 0x10000
   10618:	ldr	pc, [ip, #2548]!	; 0x9f4

0001061c <__libc_start_main@plt>:
   1061c:	add	ip, pc, #0, 12
   10620:	add	ip, ip, #16, 20	; 0x10000
   10624:	ldr	pc, [ip, #2540]!	; 0x9ec

00010628 <__gmon_start__@plt>:
   10628:	add	ip, pc, #0, 12
   1062c:	add	ip, ip, #16, 20	; 0x10000
   10630:	ldr	pc, [ip, #2532]!	; 0x9e4

00010634 <putchar@plt>:
   10634:	add	ip, pc, #0, 12
   10638:	add	ip, ip, #16, 20	; 0x10000
   1063c:	ldr	pc, [ip, #2524]!	; 0x9dc

00010640 <__isoc99_scanf@plt>:
   10640:	add	ip, pc, #0, 12
   10644:	add	ip, ip, #16, 20	; 0x10000
   10648:	ldr	pc, [ip, #2516]!	; 0x9d4

0001064c <abort@plt>:
   1064c:	add	ip, pc, #0, 12
   10650:	add	ip, ip, #16, 20	; 0x10000
   10654:	ldr	pc, [ip, #2508]!	; 0x9cc

Disassembly of section .text:

00010658 <main@@Base>:
   10658:	push	{r4, r5, r6, r7, r8, lr}
   1065c:	sub	sp, sp, #40	; 0x28
   10660:	ldr	r8, [pc, #560]	; 10898 <main@@Base+0x240>
   10664:	ldr	r7, [pc, #560]	; 1089c <main@@Base+0x244>
   10668:	mov	r5, sp
   1066c:	mov	r6, sp
   10670:	mov	r4, #0
   10674:	add	r4, r4, #1
   10678:	mov	r1, r4
   1067c:	mov	r0, r8
   10680:	bl	10610 <printf@plt>
   10684:	mov	r1, r6
   10688:	mov	r0, r7
   1068c:	bl	10640 <__isoc99_scanf@plt>
   10690:	cmp	r4, #10
   10694:	add	r6, r6, #4
   10698:	bne	10674 <main@@Base+0x1c>
   1069c:	vldr	s15, [pc, #492]	; 10890 <main@@Base+0x238>
   106a0:	vldr	s14, [sp]
   106a4:	vldr	s13, [sp, #4]
   106a8:	vldr	s6, [sp, #8]
   106ac:	vldr	s7, [sp, #12]
   106b0:	vadd.f32	s14, s14, s15
   106b4:	vldr	s15, [sp, #16]
   106b8:	vldr	s8, [sp, #20]
   106bc:	vldr	s9, [sp, #24]
   106c0:	vldr	s10, [sp, #28]
   106c4:	vldr	s11, [sp, #32]
   106c8:	vldr	s12, [sp, #36]	; 0x24
   106cc:	ldr	r0, [pc, #460]	; 108a0 <main@@Base+0x248>
   106d0:	vadd.f32	s14, s14, s13
   106d4:	vldr	s13, [pc, #440]	; 10894 <main@@Base+0x23c>
   106d8:	ldr	r6, [pc, #452]	; 108a4 <main@@Base+0x24c>
   106dc:	add	r4, sp, #40	; 0x28
   106e0:	vadd.f32	s14, s14, s6
   106e4:	vadd.f32	s14, s14, s7
   106e8:	vadd.f32	s15, s14, s15
   106ec:	vadd.f32	s15, s15, s8
   106f0:	vadd.f32	s15, s15, s9
   106f4:	vadd.f32	s15, s15, s10
   106f8:	vadd.f32	s15, s15, s11
   106fc:	vadd.f32	s15, s15, s12
   10700:	vdiv.f32	s14, s15, s13
   10704:	vcvt.f64.f32	d7, s14
   10708:	vmov	r2, r3, d7
   1070c:	bl	10610 <printf@plt>
   10710:	vldr	s6, [sp]
   10714:	vldr	s8, [sp, #4]
   10718:	vldr	s9, [sp, #8]
   1071c:	vldr	s10, [sp, #12]
   10720:	vldr	s11, [sp, #16]
   10724:	vcmpe.f32	s6, s8
   10728:	vldr	s12, [sp, #20]
   1072c:	vldr	s13, [sp, #24]
   10730:	vldr	s14, [sp, #28]
   10734:	vmrs	APSR_nzcv, fpscr
   10738:	ldr	r0, [pc, #360]	; 108a8 <main@@Base+0x250>
   1073c:	vmovpl.f32	s8, s6
   10740:	vldr	s15, [sp, #32]
   10744:	vldr	s7, [sp, #36]	; 0x24
   10748:	vcmpe.f32	s8, s9
   1074c:	vmrs	APSR_nzcv, fpscr
   10750:	vmovpl.f32	s9, s8
   10754:	vcmpe.f32	s9, s10
   10758:	vmrs	APSR_nzcv, fpscr
   1075c:	vmovpl.f32	s10, s9
   10760:	vcmpe.f32	s10, s11
   10764:	vmrs	APSR_nzcv, fpscr
   10768:	vmovpl.f32	s11, s10
   1076c:	vcmpe.f32	s11, s12
   10770:	vmrs	APSR_nzcv, fpscr
   10774:	vmovpl.f32	s12, s11
   10778:	vcmpe.f32	s12, s13
   1077c:	vmrs	APSR_nzcv, fpscr
   10780:	vmovpl.f32	s13, s12
   10784:	vcmpe.f32	s13, s14
   10788:	vmrs	APSR_nzcv, fpscr
   1078c:	vmovpl.f32	s14, s13
   10790:	vcmpe.f32	s14, s15
   10794:	vmrs	APSR_nzcv, fpscr
   10798:	vmovpl.f32	s15, s14
   1079c:	vcmpe.f32	s7, s15
   107a0:	vmrs	APSR_nzcv, fpscr
   107a4:	vmovgt.f32	s15, s7
   107a8:	vcvt.f64.f32	d7, s15
   107ac:	vmov	r2, r3, d7
   107b0:	bl	10610 <printf@plt>
   107b4:	vldr	s6, [sp]
   107b8:	vldr	s8, [sp, #4]
   107bc:	vldr	s9, [sp, #8]
   107c0:	vldr	s10, [sp, #12]
   107c4:	vldr	s11, [sp, #16]
   107c8:	vcmpe.f32	s6, s8
   107cc:	vldr	s12, [sp, #20]
   107d0:	vldr	s13, [sp, #24]
   107d4:	vldr	s14, [sp, #28]
   107d8:	vmrs	APSR_nzcv, fpscr
   107dc:	ldr	r0, [pc, #200]	; 108ac <main@@Base+0x254>
   107e0:	vmovle.f32	s8, s6
   107e4:	vldr	s15, [sp, #32]
   107e8:	vldr	s7, [sp, #36]	; 0x24
   107ec:	vcmpe.f32	s8, s9
   107f0:	vmrs	APSR_nzcv, fpscr
   107f4:	vmovle.f32	s9, s8
   107f8:	vcmpe.f32	s10, s9
   107fc:	vmrs	APSR_nzcv, fpscr
   10800:	vmovpl.f32	s10, s9
   10804:	vcmpe.f32	s10, s11
   10808:	vmrs	APSR_nzcv, fpscr
   1080c:	vmovle.f32	s11, s10
   10810:	vcmpe.f32	s11, s12
   10814:	vmrs	APSR_nzcv, fpscr
   10818:	vmovle.f32	s12, s11
   1081c:	vcmpe.f32	s12, s13
   10820:	vmrs	APSR_nzcv, fpscr
   10824:	vmovle.f32	s13, s12
   10828:	vcmpe.f32	s13, s14
   1082c:	vmrs	APSR_nzcv, fpscr
   10830:	vmovle.f32	s14, s13
   10834:	vcmpe.f32	s14, s15
   10838:	vmrs	APSR_nzcv, fpscr
   1083c:	vmovle.f32	s15, s14
   10840:	vcmpe.f32	s7, s15
   10844:	vmrs	APSR_nzcv, fpscr
   10848:	vmovmi.f32	s15, s7
   1084c:	vcvt.f64.f32	d7, s15
   10850:	vmov	r2, r3, d7
   10854:	bl	10610 <printf@plt>
   10858:	ldr	r0, [pc, #80]	; 108b0 <main@@Base+0x258>
   1085c:	bl	10610 <printf@plt>
   10860:	vldmia	r5!, {s15}
   10864:	mov	r0, r6
   10868:	vcvt.f64.f32	d7, s15
   1086c:	vmov	r2, r3, d7
   10870:	bl	10610 <printf@plt>
   10874:	cmp	r5, r4
   10878:	bne	10860 <main@@Base+0x208>
   1087c:	mov	r0, #10
   10880:	bl	10634 <putchar@plt>
   10884:	mov	r0, #0
   10888:	add	sp, sp, #40	; 0x28
   1088c:	pop	{r4, r5, r6, r7, r8, pc}
   10890:	andeq	r0, r0, r0
   10894:			; <UNDEFINED> instruction: 0x41200000
   10898:	andeq	r0, r1, r4, ror #23
   1089c:	strdeq	r0, [r1], -ip
   108a0:	andeq	r0, r1, r0, lsl #24
   108a4:	andeq	r0, r1, r8, lsr ip
   108a8:	andeq	r0, r1, r0, lsl ip
   108ac:	andeq	r0, r1, r0, lsr #24
   108b0:	andeq	r0, r1, r0, lsr ip

000108b4 <_start@@Base>:
   108b4:	mov	fp, #0
   108b8:	mov	lr, #0
   108bc:	pop	{r1}		; (ldr r1, [sp], #4)
   108c0:	mov	r2, sp
   108c4:	push	{r2}		; (str r2, [sp, #-4]!)
   108c8:	push	{r0}		; (str r0, [sp, #-4]!)
   108cc:	ldr	ip, [pc, #16]	; 108e4 <_start@@Base+0x30>
   108d0:	push	{ip}		; (str ip, [sp, #-4]!)
   108d4:	ldr	r0, [pc, #12]	; 108e8 <_start@@Base+0x34>
   108d8:	ldr	r3, [pc, #12]	; 108ec <_start@@Base+0x38>
   108dc:	bl	1061c <__libc_start_main@plt>
   108e0:	bl	1064c <abort@plt>
   108e4:	ldrdeq	r0, [r1], -r4
   108e8:	andeq	r0, r1, r8, asr r6
   108ec:	andeq	r0, r1, r4, ror fp
   108f0:	ldr	r3, [pc, #20]	; 1090c <_start@@Base+0x58>
   108f4:	ldr	r2, [pc, #20]	; 10910 <_start@@Base+0x5c>
   108f8:	add	r3, pc, r3
   108fc:	ldr	r2, [r3, r2]
   10900:	cmp	r2, #0
   10904:	bxeq	lr
   10908:	b	10628 <__gmon_start__@plt>
   1090c:	andeq	r0, r1, r0, lsl #14
   10910:	andeq	r0, r0, r4, lsr #32
   10914:	ldr	r3, [pc, #28]	; 10938 <_start@@Base+0x84>
   10918:	ldr	r0, [pc, #28]	; 1093c <_start@@Base+0x88>
   1091c:	sub	r3, r3, r0
   10920:	cmp	r3, #6
   10924:	bxls	lr
   10928:	ldr	r3, [pc, #16]	; 10940 <_start@@Base+0x8c>
   1092c:	cmp	r3, #0
   10930:	bxeq	lr
   10934:	bx	r3
   10938:	andeq	r1, r2, r3, lsr r0
   1093c:	andeq	r1, r2, r0, lsr r0
   10940:	andeq	r0, r0, r0
   10944:	ldr	r1, [pc, #36]	; 10970 <_start@@Base+0xbc>
   10948:	ldr	r0, [pc, #36]	; 10974 <_start@@Base+0xc0>
   1094c:	sub	r1, r1, r0
   10950:	asr	r1, r1, #2
   10954:	add	r1, r1, r1, lsr #31
   10958:	asrs	r1, r1, #1
   1095c:	bxeq	lr
   10960:	ldr	r3, [pc, #16]	; 10978 <_start@@Base+0xc4>
   10964:	cmp	r3, #0
   10968:	bxeq	lr
   1096c:	bx	r3
   10970:	andeq	r1, r2, r0, lsr r0
   10974:	andeq	r1, r2, r0, lsr r0
   10978:	andeq	r0, r0, r0
   1097c:	push	{r4, lr}
   10980:	ldr	r4, [pc, #24]	; 109a0 <_start@@Base+0xec>
   10984:	ldrb	r3, [r4]
   10988:	cmp	r3, #0
   1098c:	popne	{r4, pc}
   10990:	bl	10914 <_start@@Base+0x60>
   10994:	mov	r3, #1
   10998:	strb	r3, [r4]
   1099c:	pop	{r4, pc}
   109a0:	andeq	r1, r2, r0, lsr r0
   109a4:	ldr	r0, [pc, #40]	; 109d4 <_start@@Base+0x120>
   109a8:	ldr	r3, [r0]
   109ac:	cmp	r3, #0
   109b0:	bne	109b8 <_start@@Base+0x104>
   109b4:	b	10944 <_start@@Base+0x90>
   109b8:	ldr	r3, [pc, #24]	; 109d8 <_start@@Base+0x124>
   109bc:	cmp	r3, #0
   109c0:	beq	109b4 <_start@@Base+0x100>
   109c4:	push	{r4, lr}
   109c8:	blx	r3
   109cc:	pop	{r4, lr}
   109d0:	b	10944 <_start@@Base+0x90>
   109d4:	andeq	r0, r2, r4, lsl pc
   109d8:	andeq	r0, r0, r0

000109dc <avg@@Base>:
   109dc:	vldr	s15, [pc, #88]	; 10a3c <avg@@Base+0x60>
   109e0:	vldr	s14, [r0]
   109e4:	vldr	s6, [r0, #4]
   109e8:	vldr	s7, [r0, #8]
   109ec:	vldr	s8, [r0, #12]
   109f0:	vadd.f32	s14, s14, s15
   109f4:	vldr	s15, [r0, #16]
   109f8:	vldr	s9, [r0, #20]
   109fc:	vldr	s10, [r0, #24]
   10a00:	vldr	s11, [r0, #28]
   10a04:	vldr	s12, [r0, #32]
   10a08:	vldr	s13, [r0, #36]	; 0x24
   10a0c:	vldr	s0, [pc, #44]	; 10a40 <avg@@Base+0x64>
   10a10:	vadd.f32	s14, s14, s6
   10a14:	vadd.f32	s14, s14, s7
   10a18:	vadd.f32	s14, s14, s8
   10a1c:	vadd.f32	s15, s14, s15
   10a20:	vadd.f32	s15, s15, s9
   10a24:	vadd.f32	s15, s15, s10
   10a28:	vadd.f32	s15, s15, s11
   10a2c:	vadd.f32	s15, s15, s12
   10a30:	vadd.f32	s15, s15, s13
   10a34:	vdiv.f32	s0, s15, s0
   10a38:	bx	lr
   10a3c:	andeq	r0, r0, r0
   10a40:			; <UNDEFINED> instruction: 0x41200000

00010a44 <max@@Base>:
   10a44:	vldr	s15, [r0]
   10a48:	vldr	s8, [r0, #4]
   10a4c:	vldr	s9, [r0, #8]
   10a50:	vldr	s10, [r0, #12]
   10a54:	vldr	s11, [r0, #16]
   10a58:	vcmpe.f32	s15, s8
   10a5c:	vldr	s12, [r0, #20]
   10a60:	vldr	s13, [r0, #24]
   10a64:	vldr	s14, [r0, #28]
   10a68:	vmrs	APSR_nzcv, fpscr
   10a6c:	vmovpl.f32	s8, s15
   10a70:	vldr	s15, [r0, #32]
   10a74:	vldr	s0, [r0, #36]	; 0x24
   10a78:	vcmpe.f32	s8, s9
   10a7c:	vmrs	APSR_nzcv, fpscr
   10a80:	vmovpl.f32	s9, s8
   10a84:	vcmpe.f32	s9, s10
   10a88:	vmrs	APSR_nzcv, fpscr
   10a8c:	vmovpl.f32	s10, s9
   10a90:	vcmpe.f32	s10, s11
   10a94:	vmrs	APSR_nzcv, fpscr
   10a98:	vmovpl.f32	s11, s10
   10a9c:	vcmpe.f32	s11, s12
   10aa0:	vmrs	APSR_nzcv, fpscr
   10aa4:	vmovpl.f32	s12, s11
   10aa8:	vcmpe.f32	s12, s13
   10aac:	vmrs	APSR_nzcv, fpscr
   10ab0:	vmovpl.f32	s13, s12
   10ab4:	vcmpe.f32	s13, s14
   10ab8:	vmrs	APSR_nzcv, fpscr
   10abc:	vmovpl.f32	s14, s13
   10ac0:	vcmpe.f32	s14, s15
   10ac4:	vmrs	APSR_nzcv, fpscr
   10ac8:	vmovpl.f32	s15, s14
   10acc:	vcmpe.f32	s0, s15
   10ad0:	vmrs	APSR_nzcv, fpscr
   10ad4:	vmovle.f32	s0, s15
   10ad8:	bx	lr

00010adc <min@@Base>:
   10adc:	vldr	s15, [r0]
   10ae0:	vldr	s8, [r0, #4]
   10ae4:	vldr	s9, [r0, #8]
   10ae8:	vldr	s10, [r0, #12]
   10aec:	vldr	s11, [r0, #16]
   10af0:	vcmpe.f32	s15, s8
   10af4:	vldr	s12, [r0, #20]
   10af8:	vldr	s13, [r0, #24]
   10afc:	vldr	s14, [r0, #28]
   10b00:	vmrs	APSR_nzcv, fpscr
   10b04:	vmovle.f32	s8, s15
   10b08:	vldr	s15, [r0, #32]
   10b0c:	vldr	s0, [r0, #36]	; 0x24
   10b10:	vcmpe.f32	s8, s9
   10b14:	vmrs	APSR_nzcv, fpscr
   10b18:	vmovle.f32	s9, s8
   10b1c:	vcmpe.f32	s9, s10
   10b20:	vmrs	APSR_nzcv, fpscr
   10b24:	vmovle.f32	s10, s9
   10b28:	vcmpe.f32	s10, s11
   10b2c:	vmrs	APSR_nzcv, fpscr
   10b30:	vmovle.f32	s11, s10
   10b34:	vcmpe.f32	s11, s12
   10b38:	vmrs	APSR_nzcv, fpscr
   10b3c:	vmovle.f32	s12, s11
   10b40:	vcmpe.f32	s12, s13
   10b44:	vmrs	APSR_nzcv, fpscr
   10b48:	vmovle.f32	s13, s12
   10b4c:	vcmpe.f32	s13, s14
   10b50:	vmrs	APSR_nzcv, fpscr
   10b54:	vmovle.f32	s14, s13
   10b58:	vcmpe.f32	s14, s15
   10b5c:	vmrs	APSR_nzcv, fpscr
   10b60:	vmovle.f32	s15, s14
   10b64:	vcmpe.f32	s0, s15
   10b68:	vmrs	APSR_nzcv, fpscr
   10b6c:	vmovpl.f32	s0, s15
   10b70:	bx	lr

00010b74 <__libc_csu_init@@Base>:
   10b74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10b78:	mov	r7, r0
   10b7c:	ldr	r6, [pc, #72]	; 10bcc <__libc_csu_init@@Base+0x58>
   10b80:	ldr	r5, [pc, #72]	; 10bd0 <__libc_csu_init@@Base+0x5c>
   10b84:	add	r6, pc, r6
   10b88:	add	r5, pc, r5
   10b8c:	sub	r6, r6, r5
   10b90:	mov	r8, r1
   10b94:	mov	r9, r2
   10b98:	bl	105f0 <printf@plt-0x20>
   10b9c:	asrs	r6, r6, #2
   10ba0:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10ba4:	mov	r4, #0
   10ba8:	add	r4, r4, #1
   10bac:	ldr	r3, [r5], #4
   10bb0:	mov	r2, r9
   10bb4:	mov	r1, r8
   10bb8:	mov	r0, r7
   10bbc:	blx	r3
   10bc0:	cmp	r6, r4
   10bc4:	bne	10ba8 <__libc_csu_init@@Base+0x34>
   10bc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10bcc:	andeq	r0, r1, r4, lsl #7
   10bd0:	andeq	r0, r1, ip, ror r3

00010bd4 <__libc_csu_fini@@Base>:
   10bd4:	bx	lr

Disassembly of section .fini:

00010bd8 <.fini>:
   10bd8:	push	{r3, lr}
   10bdc:	pop	{r3, pc}
