
../repos/coreutils/src/who:     file format elf32-littlearm


Disassembly of section .init:

00010e78 <.init>:
   10e78:	push	{r3, lr}
   10e7c:	bl	111d4 <__assert_fail@plt+0x48>
   10e80:	pop	{r3, pc}

Disassembly of section .plt:

00010e84 <calloc@plt-0x14>:
   10e84:	push	{lr}		; (str lr, [sp, #-4]!)
   10e88:	ldr	lr, [pc, #4]	; 10e94 <calloc@plt-0x4>
   10e8c:	add	lr, pc, lr
   10e90:	ldr	pc, [lr, #8]!
   10e94:	andeq	r6, r1, ip, ror #2

00010e98 <calloc@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #364]!	; 0x16c

00010ea4 <fputs_unlocked@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #356]!	; 0x164

00010eb0 <raise@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #348]!	; 0x15c

00010ebc <strcmp@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #340]!	; 0x154

00010ec8 <fflush@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #332]!	; 0x14c

00010ed4 <utmpxname@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #324]!	; 0x144

00010ee0 <free@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #316]!	; 0x13c

00010eec <gai_strerror@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #308]!	; 0x134

00010ef8 <_exit@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #300]!	; 0x12c

00010f04 <memcpy@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #292]!	; 0x124

00010f10 <mbsinit@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #284]!	; 0x11c

00010f1c <time@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #276]!	; 0x114

00010f28 <memcmp@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #268]!	; 0x10c

00010f34 <stpcpy@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #260]!	; 0x104

00010f40 <fputc_unlocked@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #252]!	; 0xfc

00010f4c <dcgettext@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #244]!	; 0xf4

00010f58 <strdup@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #236]!	; 0xec

00010f64 <setutxent@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #228]!	; 0xe4

00010f70 <realloc@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #220]!	; 0xdc

00010f7c <textdomain@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #212]!	; 0xd4

00010f88 <iswprint@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #204]!	; 0xcc

00010f94 <fwrite@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #196]!	; 0xc4

00010fa0 <lseek64@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #188]!	; 0xbc

00010fac <__ctype_get_mb_cur_max@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #180]!	; 0xb4

00010fb8 <__fpending@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #172]!	; 0xac

00010fc4 <mbrtowc@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #164]!	; 0xa4

00010fd0 <error@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #156]!	; 0x9c

00010fdc <__asprintf_chk@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #148]!	; 0x94

00010fe8 <puts@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #140]!	; 0x8c

00010ff4 <malloc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #132]!	; 0x84

00011000 <__libc_start_main@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #124]!	; 0x7c

0001100c <strftime@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #116]!	; 0x74

00011018 <__freading@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #108]!	; 0x6c

00011024 <localtime@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #100]!	; 0x64

00011030 <__gmon_start__@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #92]!	; 0x5c

0001103c <getopt_long@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #84]!	; 0x54

00011048 <kill@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #76]!	; 0x4c

00011054 <__ctype_b_loc@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #68]!	; 0x44

00011060 <exit@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #60]!	; 0x3c

0001106c <ttyname@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #52]!	; 0x34

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #44]!	; 0x2c

00011084 <strchr@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #36]!	; 0x24

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #28]!

0001109c <__sprintf_chk@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #20]!

000110a8 <__cxa_atexit@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #12]!

000110b4 <memset@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #4]!

000110c0 <strncpy@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #4092]!	; 0xffc

000110cc <__printf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #4084]!	; 0xff4

000110d8 <fileno@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4076]!	; 0xfec

000110e4 <__fprintf_chk@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4068]!	; 0xfe4

000110f0 <fclose@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #4060]!	; 0xfdc

000110fc <fseeko64@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #4052]!	; 0xfd4

00011108 <endutxent@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #4044]!	; 0xfcc

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #4036]!	; 0xfc4

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #4028]!	; 0xfbc

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #4020]!	; 0xfb4

00011138 <freeaddrinfo@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #4012]!	; 0xfac

00011144 <getaddrinfo@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #4004]!	; 0xfa4

00011150 <bindtextdomain@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #86016	; 0x15000
   11158:	ldr	pc, [ip, #3996]!	; 0xf9c

0001115c <__xstat64@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #86016	; 0x15000
   11164:	ldr	pc, [ip, #3988]!	; 0xf94

00011168 <strncmp@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #86016	; 0x15000
   11170:	ldr	pc, [ip, #3980]!	; 0xf8c

00011174 <abort@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #86016	; 0x15000
   1117c:	ldr	pc, [ip, #3972]!	; 0xf84

00011180 <getutxent@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #86016	; 0x15000
   11188:	ldr	pc, [ip, #3964]!	; 0xf7c

0001118c <__assert_fail@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #86016	; 0x15000
   11194:	ldr	pc, [ip, #3956]!	; 0xf74

Disassembly of section .text:

00011198 <.text>:
   11198:	mov	fp, #0
   1119c:	mov	lr, #0
   111a0:	pop	{r1}		; (ldr r1, [sp], #4)
   111a4:	mov	r2, sp
   111a8:	push	{r2}		; (str r2, [sp, #-4]!)
   111ac:	push	{r0}		; (str r0, [sp, #-4]!)
   111b0:	ldr	ip, [pc, #16]	; 111c8 <__assert_fail@plt+0x3c>
   111b4:	push	{ip}		; (str ip, [sp, #-4]!)
   111b8:	ldr	r0, [pc, #12]	; 111cc <__assert_fail@plt+0x40>
   111bc:	ldr	r3, [pc, #12]	; 111d0 <__assert_fail@plt+0x44>
   111c0:	bl	11000 <__libc_start_main@plt>
   111c4:	bl	11174 <abort@plt>
   111c8:	andeq	r6, r1, r8, asr #32
   111cc:	andeq	r2, r1, r0, lsl #12
   111d0:	andeq	r5, r1, r8, ror #31
   111d4:	ldr	r3, [pc, #20]	; 111f0 <__assert_fail@plt+0x64>
   111d8:	ldr	r2, [pc, #20]	; 111f4 <__assert_fail@plt+0x68>
   111dc:	add	r3, pc, r3
   111e0:	ldr	r2, [r3, r2]
   111e4:	cmp	r2, #0
   111e8:	bxeq	lr
   111ec:	b	11030 <__gmon_start__@plt>
   111f0:	andeq	r5, r1, ip, lsl lr
   111f4:	andeq	r0, r0, ip, lsl #2
   111f8:	ldr	r3, [pc, #28]	; 1121c <__assert_fail@plt+0x90>
   111fc:	ldr	r0, [pc, #28]	; 11220 <__assert_fail@plt+0x94>
   11200:	sub	r3, r3, r0
   11204:	cmp	r3, #6
   11208:	bxls	lr
   1120c:	ldr	r3, [pc, #16]	; 11224 <__assert_fail@plt+0x98>
   11210:	cmp	r3, #0
   11214:	bxeq	lr
   11218:	bx	r3
   1121c:	andeq	r7, r2, fp, ror #2
   11220:	andeq	r7, r2, r8, ror #2
   11224:	andeq	r0, r0, r0
   11228:	ldr	r1, [pc, #36]	; 11254 <__assert_fail@plt+0xc8>
   1122c:	ldr	r0, [pc, #36]	; 11258 <__assert_fail@plt+0xcc>
   11230:	sub	r1, r1, r0
   11234:	asr	r1, r1, #2
   11238:	add	r1, r1, r1, lsr #31
   1123c:	asrs	r1, r1, #1
   11240:	bxeq	lr
   11244:	ldr	r3, [pc, #16]	; 1125c <__assert_fail@plt+0xd0>
   11248:	cmp	r3, #0
   1124c:	bxeq	lr
   11250:	bx	r3
   11254:	andeq	r7, r2, r8, ror #2
   11258:	andeq	r7, r2, r8, ror #2
   1125c:	andeq	r0, r0, r0
   11260:	push	{r4, lr}
   11264:	ldr	r4, [pc, #24]	; 11284 <__assert_fail@plt+0xf8>
   11268:	ldrb	r3, [r4]
   1126c:	cmp	r3, #0
   11270:	popne	{r4, pc}
   11274:	bl	111f8 <__assert_fail@plt+0x6c>
   11278:	mov	r3, #1
   1127c:	strb	r3, [r4]
   11280:	pop	{r4, pc}
   11284:	andeq	r7, r2, r0, lsl #3
   11288:	ldr	r0, [pc, #40]	; 112b8 <__assert_fail@plt+0x12c>
   1128c:	ldr	r3, [r0]
   11290:	cmp	r3, #0
   11294:	bne	1129c <__assert_fail@plt+0x110>
   11298:	b	11228 <__assert_fail@plt+0x9c>
   1129c:	ldr	r3, [pc, #24]	; 112bc <__assert_fail@plt+0x130>
   112a0:	cmp	r3, #0
   112a4:	beq	11298 <__assert_fail@plt+0x10c>
   112a8:	push	{r4, lr}
   112ac:	blx	r3
   112b0:	pop	{r4, lr}
   112b4:	b	11228 <__assert_fail@plt+0x9c>
   112b8:	andeq	r6, r2, r4, lsl pc
   112bc:	andeq	r0, r0, r0
   112c0:	push	{r4, r5, r6, r7, lr}
   112c4:	sub	sp, sp, #76	; 0x4c
   112c8:	mov	r6, r0
   112cc:	mov	r4, r1
   112d0:	mov	r7, r3
   112d4:	ldr	r3, [pc, #476]	; 114b8 <__assert_fail@plt+0x32c>
   112d8:	strb	r2, [r3, #1]
   112dc:	ldr	r3, [pc, #472]	; 114bc <__assert_fail@plt+0x330>
   112e0:	ldrb	r3, [r3]
   112e4:	cmp	r3, #0
   112e8:	beq	1130c <__assert_fail@plt+0x180>
   112ec:	ldr	r3, [pc, #456]	; 114bc <__assert_fail@plt+0x330>
   112f0:	ldrb	r3, [r3, #1]
   112f4:	cmp	r3, #0
   112f8:	bne	1130c <__assert_fail@plt+0x180>
   112fc:	ldr	r0, [sp, #104]	; 0x68
   11300:	bl	11078 <strlen@plt>
   11304:	cmp	r0, #6
   11308:	bls	1141c <__assert_fail@plt+0x290>
   1130c:	mov	r3, #0
   11310:	strb	r3, [sp, #60]	; 0x3c
   11314:	ldr	r3, [pc, #416]	; 114bc <__assert_fail@plt+0x330>
   11318:	ldrb	r3, [r3, #1]
   1131c:	cmp	r3, #0
   11320:	bne	11334 <__assert_fail@plt+0x1a8>
   11324:	ldr	r0, [sp, #108]	; 0x6c
   11328:	bl	11078 <strlen@plt>
   1132c:	cmp	r0, #11
   11330:	bls	1143c <__assert_fail@plt+0x2b0>
   11334:	mov	r3, #0
   11338:	strb	r3, [sp, #44]	; 0x2c
   1133c:	ldr	r3, [pc, #376]	; 114bc <__assert_fail@plt+0x330>
   11340:	ldrb	r3, [r3, #2]
   11344:	cmp	r3, #0
   11348:	moveq	r0, #1
   1134c:	beq	11364 <__assert_fail@plt+0x1d8>
   11350:	ldr	r0, [sp, #116]	; 0x74
   11354:	bl	11078 <strlen@plt>
   11358:	cmp	r0, #11
   1135c:	addhi	r0, r0, #2
   11360:	movls	r0, #14
   11364:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   11368:	mov	r5, r0
   1136c:	ldr	r3, [pc, #328]	; 114bc <__assert_fail@plt+0x330>
   11370:	ldrb	r3, [r3, #2]
   11374:	cmp	r3, #0
   11378:	moveq	r3, #0
   1137c:	strbeq	r3, [r0]
   11380:	bne	1145c <__assert_fail@plt+0x2d0>
   11384:	ldr	r3, [pc, #308]	; 114c0 <__assert_fail@plt+0x334>
   11388:	cmp	r4, #0
   1138c:	moveq	r4, r3
   11390:	ldr	r3, [pc, #292]	; 114bc <__assert_fail@plt+0x330>
   11394:	ldrb	r1, [r3, #3]
   11398:	ldr	r2, [pc, #292]	; 114c4 <__assert_fail@plt+0x338>
   1139c:	ldr	r3, [pc, #276]	; 114b8 <__assert_fail@plt+0x32c>
   113a0:	cmp	r1, #0
   113a4:	moveq	r3, r2
   113a8:	str	r5, [sp, #36]	; 0x24
   113ac:	ldr	r2, [sp, #112]	; 0x70
   113b0:	str	r2, [sp, #32]
   113b4:	add	r2, sp, #44	; 0x2c
   113b8:	str	r2, [sp, #28]
   113bc:	add	r2, sp, #60	; 0x3c
   113c0:	str	r2, [sp, #24]
   113c4:	ldr	r2, [sp, #100]	; 0x64
   113c8:	str	r2, [sp, #20]
   113cc:	ldr	r2, [pc, #232]	; 114bc <__assert_fail@plt+0x330>
   113d0:	ldr	r2, [r2, #4]
   113d4:	str	r2, [sp, #16]
   113d8:	ldr	r2, [sp, #96]	; 0x60
   113dc:	str	r2, [sp, #12]
   113e0:	str	r7, [sp, #8]
   113e4:	str	r3, [sp, #4]
   113e8:	str	r4, [sp]
   113ec:	mov	r3, r6
   113f0:	ldr	r2, [pc, #208]	; 114c8 <__assert_fail@plt+0x33c>
   113f4:	mov	r1, #1
   113f8:	add	r0, sp, #68	; 0x44
   113fc:	bl	10fdc <__asprintf_chk@plt>
   11400:	cmn	r0, #1
   11404:	beq	11478 <__assert_fail@plt+0x2ec>
   11408:	ldr	r4, [sp, #68]	; 0x44
   1140c:	mov	r0, r4
   11410:	bl	11078 <strlen@plt>
   11414:	add	r0, r4, r0
   11418:	b	11480 <__assert_fail@plt+0x2f4>
   1141c:	ldr	r3, [sp, #104]	; 0x68
   11420:	str	r3, [sp]
   11424:	ldr	r3, [pc, #160]	; 114cc <__assert_fail@plt+0x340>
   11428:	mov	r2, #8
   1142c:	mov	r1, #1
   11430:	add	r0, sp, #60	; 0x3c
   11434:	bl	1109c <__sprintf_chk@plt>
   11438:	b	11314 <__assert_fail@plt+0x188>
   1143c:	ldr	r3, [sp, #108]	; 0x6c
   11440:	str	r3, [sp]
   11444:	ldr	r3, [pc, #132]	; 114d0 <__assert_fail@plt+0x344>
   11448:	mov	r2, #13
   1144c:	mov	r1, #1
   11450:	add	r0, sp, #44	; 0x2c
   11454:	bl	1109c <__sprintf_chk@plt>
   11458:	b	1133c <__assert_fail@plt+0x1b0>
   1145c:	ldr	r3, [sp, #116]	; 0x74
   11460:	str	r3, [sp]
   11464:	ldr	r3, [pc, #104]	; 114d4 <__assert_fail@plt+0x348>
   11468:	mvn	r2, #0
   1146c:	mov	r1, #1
   11470:	bl	1109c <__sprintf_chk@plt>
   11474:	b	11384 <__assert_fail@plt+0x1f8>
   11478:	bl	1557c <__assert_fail@plt+0x43f0>
   1147c:	mov	r0, r2
   11480:	sub	r2, r0, #1
   11484:	ldrb	r3, [r0, #-1]
   11488:	cmp	r3, #32
   1148c:	beq	1147c <__assert_fail@plt+0x2f0>
   11490:	mov	r3, #0
   11494:	strb	r3, [r0]
   11498:	ldr	r0, [sp, #68]	; 0x44
   1149c:	bl	10fe8 <puts@plt>
   114a0:	ldr	r0, [sp, #68]	; 0x44
   114a4:	bl	12b40 <__assert_fail@plt+0x19b4>
   114a8:	mov	r0, r5
   114ac:	bl	12b40 <__assert_fail@plt+0x19b4>
   114b0:	add	sp, sp, #76	; 0x4c
   114b4:	pop	{r4, r5, r6, r7, pc}
   114b8:	andeq	r7, r2, r8, lsl r1
   114bc:	andeq	r7, r2, r4, lsl #3
   114c0:	ldrdeq	r6, [r1], -r4
   114c4:	andeq	r6, r1, r8, ror #15
   114c8:	strdeq	r6, [r1], -r4
   114cc:	ldrdeq	r6, [r1], -ip
   114d0:	andeq	r6, r1, r4, ror #3
   114d4:	andeq	r6, r1, ip, ror #3
   114d8:	push	{r4, r5, r6, lr}
   114dc:	mov	r4, r0
   114e0:	ldr	r6, [pc, #128]	; 11568 <__assert_fail@plt+0x3dc>
   114e4:	mov	r2, #5
   114e8:	mov	r1, r6
   114ec:	mov	r0, #0
   114f0:	bl	10f4c <dcgettext@plt>
   114f4:	bl	11078 <strlen@plt>
   114f8:	add	r0, r0, #5
   114fc:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   11500:	mov	r5, r0
   11504:	mov	r2, #5
   11508:	mov	r1, r6
   1150c:	mov	r0, #0
   11510:	bl	10f4c <dcgettext@plt>
   11514:	mov	r1, r0
   11518:	mov	r0, r5
   1151c:	bl	10f34 <stpcpy@plt>
   11520:	add	r3, r4, #40	; 0x28
   11524:	add	r2, r4, #44	; 0x2c
   11528:	cmp	r3, r2
   1152c:	bcs	11558 <__assert_fail@plt+0x3cc>
   11530:	ldrb	r2, [r4, #40]	; 0x28
   11534:	cmp	r2, #0
   11538:	beq	11558 <__assert_fail@plt+0x3cc>
   1153c:	add	r1, r4, #43	; 0x2b
   11540:	strb	r2, [r0], #1
   11544:	cmp	r3, r1
   11548:	beq	11558 <__assert_fail@plt+0x3cc>
   1154c:	ldrb	r2, [r3, #1]!
   11550:	cmp	r2, #0
   11554:	bne	11540 <__assert_fail@plt+0x3b4>
   11558:	mov	r3, #0
   1155c:	strb	r3, [r0]
   11560:	mov	r0, r5
   11564:	pop	{r4, r5, r6, pc}
   11568:	andeq	r6, r1, r8, lsl r2
   1156c:	push	{r4, lr}
   11570:	sub	sp, sp, #8
   11574:	ldr	r3, [r0, #340]	; 0x154
   11578:	add	r0, sp, #8
   1157c:	str	r3, [r0, #-4]!
   11580:	bl	11024 <localtime@plt>
   11584:	subs	r3, r0, #0
   11588:	beq	115b0 <__assert_fail@plt+0x424>
   1158c:	ldr	r2, [pc, #48]	; 115c4 <__assert_fail@plt+0x438>
   11590:	add	r4, r2, #8
   11594:	ldr	r2, [r2, #44]	; 0x2c
   11598:	mov	r1, #33	; 0x21
   1159c:	mov	r0, r4
   115a0:	bl	1100c <strftime@plt>
   115a4:	mov	r0, r4
   115a8:	add	sp, sp, #8
   115ac:	pop	{r4, pc}
   115b0:	ldr	r2, [pc, #16]	; 115c8 <__assert_fail@plt+0x43c>
   115b4:	ldr	r0, [sp, #4]
   115b8:	asr	r1, r0, #31
   115bc:	bl	12bf8 <__assert_fail@plt+0x1a6c>
   115c0:	b	115a8 <__assert_fail@plt+0x41c>
   115c4:	andeq	r7, r2, r4, lsl #3
   115c8:	andeq	r7, r2, ip, lsl #3
   115cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   115d0:	sub	sp, sp, #452	; 0x1c4
   115d4:	mov	r4, r0
   115d8:	mov	r6, r1
   115dc:	ldr	r3, [r0, #4]
   115e0:	str	r3, [sp]
   115e4:	ldr	r3, [pc, #1068]	; 11a18 <__assert_fail@plt+0x88c>
   115e8:	mov	r2, #12
   115ec:	mov	r1, #1
   115f0:	add	r0, sp, #284	; 0x11c
   115f4:	bl	1109c <__sprintf_chk@plt>
   115f8:	ldrb	r3, [r4, #8]
   115fc:	cmp	r3, #47	; 0x2f
   11600:	ldrne	r3, [pc, #1044]	; 11a1c <__assert_fail@plt+0x890>
   11604:	ldmne	r3, {r0, r1}
   11608:	strne	r0, [sp, #296]	; 0x128
   1160c:	addne	r3, sp, #300	; 0x12c
   11610:	strhne	r1, [r3]
   11614:	addne	r1, sp, #300	; 0x12c
   11618:	addne	r1, r1, #1
   1161c:	addeq	r1, sp, #296	; 0x128
   11620:	add	r5, r4, #8
   11624:	add	r3, r4, #40	; 0x28
   11628:	cmp	r5, r3
   1162c:	bcs	1165c <__assert_fail@plt+0x4d0>
   11630:	ldrb	r3, [r4, #8]
   11634:	cmp	r3, #0
   11638:	beq	1165c <__assert_fail@plt+0x4d0>
   1163c:	mov	r2, r5
   11640:	add	r0, r4, #39	; 0x27
   11644:	strb	r3, [r1], #1
   11648:	cmp	r2, r0
   1164c:	beq	1165c <__assert_fail@plt+0x4d0>
   11650:	ldrb	r3, [r2, #1]!
   11654:	cmp	r3, #0
   11658:	bne	11644 <__assert_fail@plt+0x4b8>
   1165c:	mov	r3, #0
   11660:	strb	r3, [r1]
   11664:	add	r2, sp, #344	; 0x158
   11668:	add	r1, sp, #296	; 0x128
   1166c:	mov	r0, #3
   11670:	bl	1115c <__xstat64@plt>
   11674:	cmp	r0, #0
   11678:	bne	118b0 <__assert_fail@plt+0x724>
   1167c:	ldr	r7, [sp, #360]	; 0x168
   11680:	and	r7, r7, #16
   11684:	cmp	r7, #0
   11688:	movne	r7, #43	; 0x2b
   1168c:	moveq	r7, #45	; 0x2d
   11690:	ldr	r8, [sp, #416]	; 0x1a0
   11694:	cmp	r8, #0
   11698:	beq	118b4 <__assert_fail@plt+0x728>
   1169c:	ldr	r3, [pc, #892]	; 11a20 <__assert_fail@plt+0x894>
   116a0:	ldr	r3, [r3, #4]
   116a4:	cmp	r3, #-2147483648	; 0x80000000
   116a8:	beq	11754 <__assert_fail@plt+0x5c8>
   116ac:	cmp	r8, r6
   116b0:	ble	11774 <__assert_fail@plt+0x5e8>
   116b4:	ldr	r3, [pc, #868]	; 11a20 <__assert_fail@plt+0x894>
   116b8:	ldr	r2, [r3, #4]
   116bc:	sub	r3, r2, #86016	; 0x15000
   116c0:	sub	r3, r3, #384	; 0x180
   116c4:	cmp	r8, r3
   116c8:	movle	r3, #0
   116cc:	movgt	r3, #1
   116d0:	cmp	r8, r2
   116d4:	movgt	r3, #0
   116d8:	cmp	r3, #0
   116dc:	beq	11774 <__assert_fail@plt+0x5e8>
   116e0:	sub	r2, r2, r8
   116e4:	cmp	r2, #59	; 0x3b
   116e8:	ble	118a8 <__assert_fail@plt+0x71c>
   116ec:	ldr	r3, [pc, #816]	; 11a24 <__assert_fail@plt+0x898>
   116f0:	cmp	r2, r3
   116f4:	bgt	11760 <__assert_fail@plt+0x5d4>
   116f8:	ldr	r6, [pc, #808]	; 11a28 <__assert_fail@plt+0x89c>
   116fc:	ldr	r3, [pc, #808]	; 11a2c <__assert_fail@plt+0x8a0>
   11700:	smull	r1, r3, r3, r2
   11704:	add	r3, r3, r2
   11708:	asr	r1, r2, #31
   1170c:	rsb	r1, r1, r3, asr #11
   11710:	mov	r3, #3600	; 0xe10
   11714:	mul	r3, r3, r1
   11718:	sub	r2, r2, r3
   1171c:	ldr	r3, [pc, #780]	; 11a30 <__assert_fail@plt+0x8a4>
   11720:	smull	r0, r3, r3, r2
   11724:	add	r3, r3, r2
   11728:	asr	r2, r2, #31
   1172c:	rsb	r3, r2, r3, asr #5
   11730:	str	r3, [sp, #4]
   11734:	str	r1, [sp]
   11738:	ldr	r3, [pc, #756]	; 11a34 <__assert_fail@plt+0x8a8>
   1173c:	mov	r2, #6
   11740:	mov	r1, #1
   11744:	mov	r0, r6
   11748:	bl	1109c <__sprintf_chk@plt>
   1174c:	mov	r0, r6
   11750:	b	11784 <__assert_fail@plt+0x5f8>
   11754:	ldr	r0, [pc, #732]	; 11a38 <__assert_fail@plt+0x8ac>
   11758:	bl	10f1c <time@plt>
   1175c:	b	116ac <__assert_fail@plt+0x520>
   11760:	ldr	r3, [pc, #724]	; 11a3c <__assert_fail@plt+0x8b0>
   11764:	mov	r2, #205	; 0xcd
   11768:	ldr	r1, [pc, #720]	; 11a40 <__assert_fail@plt+0x8b4>
   1176c:	ldr	r0, [pc, #720]	; 11a44 <__assert_fail@plt+0x8b8>
   11770:	bl	1118c <__assert_fail@plt>
   11774:	mov	r2, #5
   11778:	ldr	r1, [pc, #712]	; 11a48 <__assert_fail@plt+0x8bc>
   1177c:	mov	r0, #0
   11780:	bl	10f4c <dcgettext@plt>
   11784:	str	r0, [sp, #4]
   11788:	mov	r3, #6
   1178c:	str	r3, [sp]
   11790:	ldr	r3, [pc, #692]	; 11a4c <__assert_fail@plt+0x8c0>
   11794:	mov	r2, #7
   11798:	mov	r1, #1
   1179c:	add	r0, sp, #336	; 0x150
   117a0:	bl	1109c <__sprintf_chk@plt>
   117a4:	ldrb	r3, [r4, #76]	; 0x4c
   117a8:	cmp	r3, #0
   117ac:	beq	11960 <__assert_fail@plt+0x7d4>
   117b0:	add	r3, r4, #76	; 0x4c
   117b4:	add	r2, r4, #332	; 0x14c
   117b8:	cmp	r3, r2
   117bc:	bcs	118c0 <__assert_fail@plt+0x734>
   117c0:	ldrb	r2, [r4, #76]	; 0x4c
   117c4:	cmp	r2, #0
   117c8:	beq	118c8 <__assert_fail@plt+0x73c>
   117cc:	add	r0, r4, #328	; 0x148
   117d0:	add	r0, r0, #3
   117d4:	add	r1, sp, #24
   117d8:	strb	r2, [r1], #1
   117dc:	cmp	r3, r0
   117e0:	beq	117f0 <__assert_fail@plt+0x664>
   117e4:	ldrb	r2, [r3, #1]!
   117e8:	cmp	r2, #0
   117ec:	bne	117d8 <__assert_fail@plt+0x64c>
   117f0:	mov	r3, #0
   117f4:	strb	r3, [r1]
   117f8:	mov	r1, #58	; 0x3a
   117fc:	add	r0, sp, #24
   11800:	bl	11084 <strchr@plt>
   11804:	cmp	r0, #0
   11808:	beq	11a00 <__assert_fail@plt+0x874>
   1180c:	add	r9, r0, #1
   11810:	mov	r3, #0
   11814:	strb	r3, [r0]
   11818:	ldrb	r3, [sp, #24]
   1181c:	cmp	r3, #0
   11820:	addeq	r8, sp, #24
   11824:	beq	1183c <__assert_fail@plt+0x6b0>
   11828:	ldr	r3, [pc, #544]	; 11a50 <__assert_fail@plt+0x8c4>
   1182c:	ldrb	r3, [r3, #54]	; 0x36
   11830:	cmp	r3, #0
   11834:	addeq	r8, sp, #24
   11838:	bne	118d0 <__assert_fail@plt+0x744>
   1183c:	cmp	r9, #0
   11840:	beq	11904 <__assert_fail@plt+0x778>
   11844:	mov	r0, r8
   11848:	bl	11078 <strlen@plt>
   1184c:	mov	r6, r0
   11850:	mov	r0, r9
   11854:	bl	11078 <strlen@plt>
   11858:	add	r0, r6, r0
   1185c:	add	r0, r0, #4
   11860:	ldr	r3, [pc, #488]	; 11a50 <__assert_fail@plt+0x8c4>
   11864:	ldr	r3, [r3, #56]	; 0x38
   11868:	cmp	r0, r3
   1186c:	bhi	118e4 <__assert_fail@plt+0x758>
   11870:	ldr	r3, [pc, #472]	; 11a50 <__assert_fail@plt+0x8c4>
   11874:	ldr	r0, [r3, #60]	; 0x3c
   11878:	str	r9, [sp, #4]
   1187c:	str	r8, [sp]
   11880:	ldr	r3, [pc, #460]	; 11a54 <__assert_fail@plt+0x8c8>
   11884:	mvn	r2, #0
   11888:	mov	r1, #1
   1188c:	bl	1109c <__sprintf_chk@plt>
   11890:	add	r3, sp, #24
   11894:	cmp	r8, r3
   11898:	beq	11980 <__assert_fail@plt+0x7f4>
   1189c:	mov	r0, r8
   118a0:	bl	12b40 <__assert_fail@plt+0x19b4>
   118a4:	b	11980 <__assert_fail@plt+0x7f4>
   118a8:	ldr	r0, [pc, #424]	; 11a58 <__assert_fail@plt+0x8cc>
   118ac:	b	11784 <__assert_fail@plt+0x5f8>
   118b0:	mov	r7, #63	; 0x3f
   118b4:	ldr	r3, [pc, #416]	; 11a5c <__assert_fail@plt+0x8d0>
   118b8:	str	r3, [sp, #336]	; 0x150
   118bc:	b	117a4 <__assert_fail@plt+0x618>
   118c0:	add	r1, sp, #24
   118c4:	b	117f0 <__assert_fail@plt+0x664>
   118c8:	add	r1, sp, #24
   118cc:	b	117f0 <__assert_fail@plt+0x664>
   118d0:	add	r0, sp, #24
   118d4:	bl	12a00 <__assert_fail@plt+0x1874>
   118d8:	subs	r8, r0, #0
   118dc:	addeq	r8, sp, #24
   118e0:	b	1183c <__assert_fail@plt+0x6b0>
   118e4:	ldr	r6, [pc, #356]	; 11a50 <__assert_fail@plt+0x8c4>
   118e8:	str	r0, [r6, #56]	; 0x38
   118ec:	ldr	r0, [r6, #60]	; 0x3c
   118f0:	bl	12b40 <__assert_fail@plt+0x19b4>
   118f4:	ldr	r0, [r6, #56]	; 0x38
   118f8:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   118fc:	str	r0, [r6, #60]	; 0x3c
   11900:	b	11870 <__assert_fail@plt+0x6e4>
   11904:	mov	r0, r8
   11908:	bl	11078 <strlen@plt>
   1190c:	add	r0, r0, #3
   11910:	ldr	r3, [pc, #312]	; 11a50 <__assert_fail@plt+0x8c4>
   11914:	ldr	r3, [r3, #56]	; 0x38
   11918:	cmp	r0, r3
   1191c:	bhi	11940 <__assert_fail@plt+0x7b4>
   11920:	ldr	r3, [pc, #296]	; 11a50 <__assert_fail@plt+0x8c4>
   11924:	ldr	r0, [r3, #60]	; 0x3c
   11928:	str	r8, [sp]
   1192c:	ldr	r3, [pc, #300]	; 11a60 <__assert_fail@plt+0x8d4>
   11930:	mvn	r2, #0
   11934:	mov	r1, #1
   11938:	bl	1109c <__sprintf_chk@plt>
   1193c:	b	11890 <__assert_fail@plt+0x704>
   11940:	ldr	r6, [pc, #264]	; 11a50 <__assert_fail@plt+0x8c4>
   11944:	str	r0, [r6, #56]	; 0x38
   11948:	ldr	r0, [r6, #60]	; 0x3c
   1194c:	bl	12b40 <__assert_fail@plt+0x19b4>
   11950:	ldr	r0, [r6, #56]	; 0x38
   11954:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   11958:	str	r0, [r6, #60]	; 0x3c
   1195c:	b	11920 <__assert_fail@plt+0x794>
   11960:	ldr	r3, [pc, #232]	; 11a50 <__assert_fail@plt+0x8c4>
   11964:	ldr	r3, [r3, #56]	; 0x38
   11968:	cmp	r3, #0
   1196c:	beq	119dc <__assert_fail@plt+0x850>
   11970:	ldr	r3, [pc, #216]	; 11a50 <__assert_fail@plt+0x8c4>
   11974:	ldr	r3, [r3, #60]	; 0x3c
   11978:	mov	r2, #0
   1197c:	strb	r2, [r3]
   11980:	add	r6, r4, #44	; 0x2c
   11984:	mov	r0, r4
   11988:	bl	1156c <__assert_fail@plt+0x3e0>
   1198c:	ldr	r3, [pc, #188]	; 11a50 <__assert_fail@plt+0x8c4>
   11990:	ldr	r3, [r3, #60]	; 0x3c
   11994:	ldr	r2, [pc, #200]	; 11a64 <__assert_fail@plt+0x8d8>
   11998:	cmp	r3, #0
   1199c:	moveq	r3, r2
   119a0:	str	r2, [sp, #20]
   119a4:	str	r3, [sp, #16]
   119a8:	add	r3, sp, #284	; 0x11c
   119ac:	str	r3, [sp, #12]
   119b0:	add	r3, sp, #336	; 0x150
   119b4:	str	r3, [sp, #8]
   119b8:	str	r0, [sp, #4]
   119bc:	str	r5, [sp]
   119c0:	mov	r3, #32
   119c4:	mov	r2, r7
   119c8:	mov	r1, r6
   119cc:	mov	r0, r3
   119d0:	bl	112c0 <__assert_fail@plt+0x134>
   119d4:	add	sp, sp, #452	; 0x1c4
   119d8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   119dc:	ldr	r6, [pc, #108]	; 11a50 <__assert_fail@plt+0x8c4>
   119e0:	mov	r3, #1
   119e4:	str	r3, [r6, #56]	; 0x38
   119e8:	ldr	r0, [r6, #60]	; 0x3c
   119ec:	bl	12b40 <__assert_fail@plt+0x19b4>
   119f0:	ldr	r0, [r6, #56]	; 0x38
   119f4:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   119f8:	str	r0, [r6, #60]	; 0x3c
   119fc:	b	11970 <__assert_fail@plt+0x7e4>
   11a00:	ldrb	r3, [sp, #24]
   11a04:	cmp	r3, #0
   11a08:	addeq	r8, sp, #24
   11a0c:	beq	11904 <__assert_fail@plt+0x778>
   11a10:	mov	r9, r0
   11a14:	b	11828 <__assert_fail@plt+0x69c>
   11a18:	andeq	r6, r1, r4, lsr #4
   11a1c:	andeq	r6, r1, r8, lsr #4
   11a20:	andeq	r7, r2, r8, lsl r1
   11a24:	andeq	r5, r1, pc, ror r1
   11a28:			; <UNDEFINED> instruction: 0x000271b4
   11a2c:			; <UNDEFINED> instruction: 0x91a2b3c5
   11a30:	stmhi	r8, {r0, r3, r7, fp, pc}
   11a34:	andeq	r6, r1, ip, asr r2
   11a38:	andeq	r7, r2, ip, lsl r1
   11a3c:	andeq	r6, r1, r0, ror r0
   11a40:	andeq	r6, r1, r0, lsr r2
   11a44:	andeq	r6, r1, ip, lsr r2
   11a48:	andeq	r6, r1, r8, ror #4
   11a4c:	andeq	r6, r1, r0, ror r2
   11a50:	andeq	r7, r2, r4, lsl #3
   11a54:	andeq	r6, r1, r8, ror r2
   11a58:	andeq	r6, r1, ip, lsl r2
   11a5c:	eorseq	r2, pc, r0, lsr #32
   11a60:	andeq	r6, r1, r0, lsl #5
   11a64:	andeq	r6, r1, r8, ror #15
   11a68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a6c:	sub	sp, sp, #68	; 0x44
   11a70:	mov	r4, r0
   11a74:	mov	r3, r1
   11a78:	add	r2, sp, #56	; 0x38
   11a7c:	add	r1, sp, #60	; 0x3c
   11a80:	bl	148a8 <__assert_fail@plt+0x371c>
   11a84:	cmp	r0, #0
   11a88:	bne	11aec <__assert_fail@plt+0x960>
   11a8c:	ldr	r3, [pc, #1856]	; 121d4 <__assert_fail@plt+0x1048>
   11a90:	ldrb	r3, [r3, #64]	; 0x40
   11a94:	cmp	r3, #0
   11a98:	bne	11b18 <__assert_fail@plt+0x98c>
   11a9c:	ldr	r5, [sp, #60]	; 0x3c
   11aa0:	ldr	r4, [sp, #56]	; 0x38
   11aa4:	ldr	r3, [pc, #1832]	; 121d4 <__assert_fail@plt+0x1048>
   11aa8:	ldrb	r3, [r3, #65]	; 0x41
   11aac:	cmp	r3, #0
   11ab0:	bne	11bd4 <__assert_fail@plt+0xa48>
   11ab4:	ldr	r3, [pc, #1816]	; 121d4 <__assert_fail@plt+0x1048>
   11ab8:	ldrb	r3, [r3, #66]	; 0x42
   11abc:	cmp	r3, #0
   11ac0:	moveq	r3, #0
   11ac4:	streq	r3, [sp, #24]
   11ac8:	bne	11c8c <__assert_fail@plt+0xb00>
   11acc:	sub	r9, r5, #1
   11ad0:	cmp	r5, #0
   11ad4:	beq	11bc4 <__assert_fail@plt+0xa38>
   11ad8:	add	sl, r4, #384	; 0x180
   11adc:	add	r4, r4, #8
   11ae0:	mov	fp, #-2147483648	; 0x80000000
   11ae4:	ldr	r5, [pc, #1768]	; 121d4 <__assert_fail@plt+0x1048>
   11ae8:	b	11d7c <__assert_fail@plt+0xbf0>
   11aec:	bl	11090 <__errno_location@plt>
   11af0:	ldr	r5, [r0]
   11af4:	mov	r2, r4
   11af8:	mov	r1, #3
   11afc:	mov	r0, #0
   11b00:	bl	146b4 <__assert_fail@plt+0x3528>
   11b04:	mov	r3, r0
   11b08:	ldr	r2, [pc, #1736]	; 121d8 <__assert_fail@plt+0x104c>
   11b0c:	mov	r1, r5
   11b10:	mov	r0, #1
   11b14:	bl	10fd0 <error@plt>
   11b18:	ldr	r3, [sp, #60]	; 0x3c
   11b1c:	ldr	r4, [sp, #56]	; 0x38
   11b20:	sub	r5, r3, #1
   11b24:	cmp	r3, #0
   11b28:	beq	11ba0 <__assert_fail@plt+0xa14>
   11b2c:	mov	r6, #0
   11b30:	ldr	r7, [pc, #1700]	; 121dc <__assert_fail@plt+0x1050>
   11b34:	ldr	sl, [pc, #1700]	; 121e0 <__assert_fail@plt+0x1054>
   11b38:	mov	r9, #1
   11b3c:	ldr	r8, [pc, #1696]	; 121e4 <__assert_fail@plt+0x1058>
   11b40:	b	11b54 <__assert_fail@plt+0x9c8>
   11b44:	add	r4, r4, #384	; 0x180
   11b48:	sub	r5, r5, #1
   11b4c:	cmn	r5, #1
   11b50:	beq	11ba4 <__assert_fail@plt+0xa18>
   11b54:	ldrb	r3, [r4, #44]	; 0x2c
   11b58:	cmp	r3, #0
   11b5c:	beq	11b44 <__assert_fail@plt+0x9b8>
   11b60:	ldrsh	r3, [r4]
   11b64:	cmp	r3, #7
   11b68:	bne	11b44 <__assert_fail@plt+0x9b8>
   11b6c:	mov	r0, r4
   11b70:	bl	14830 <__assert_fail@plt+0x36a4>
   11b74:	mov	fp, r0
   11b78:	mov	r3, r0
   11b7c:	mov	r2, r7
   11b80:	mov	r1, sl
   11b84:	mov	r0, r9
   11b88:	bl	110cc <__printf_chk@plt>
   11b8c:	mov	r0, fp
   11b90:	bl	12b40 <__assert_fail@plt+0x19b4>
   11b94:	add	r6, r6, #1
   11b98:	mov	r7, r8
   11b9c:	b	11b44 <__assert_fail@plt+0x9b8>
   11ba0:	mov	r6, #0
   11ba4:	mov	r2, #5
   11ba8:	ldr	r1, [pc, #1592]	; 121e8 <__assert_fail@plt+0x105c>
   11bac:	mov	r0, #0
   11bb0:	bl	10f4c <dcgettext@plt>
   11bb4:	mov	r2, r6
   11bb8:	mov	r1, r0
   11bbc:	mov	r0, #1
   11bc0:	bl	110cc <__printf_chk@plt>
   11bc4:	ldr	r0, [sp, #56]	; 0x38
   11bc8:	bl	12b40 <__assert_fail@plt+0x19b4>
   11bcc:	add	sp, sp, #68	; 0x44
   11bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bd4:	mov	r2, #5
   11bd8:	ldr	r1, [pc, #1548]	; 121ec <__assert_fail@plt+0x1060>
   11bdc:	mov	r0, #0
   11be0:	bl	10f4c <dcgettext@plt>
   11be4:	mov	r6, r0
   11be8:	mov	r2, #5
   11bec:	ldr	r1, [pc, #1532]	; 121f0 <__assert_fail@plt+0x1064>
   11bf0:	mov	r0, #0
   11bf4:	bl	10f4c <dcgettext@plt>
   11bf8:	mov	r7, r0
   11bfc:	mov	r2, #5
   11c00:	ldr	r1, [pc, #1516]	; 121f4 <__assert_fail@plt+0x1068>
   11c04:	mov	r0, #0
   11c08:	bl	10f4c <dcgettext@plt>
   11c0c:	mov	r8, r0
   11c10:	mov	r2, #5
   11c14:	ldr	r1, [pc, #1500]	; 121f8 <__assert_fail@plt+0x106c>
   11c18:	mov	r0, #0
   11c1c:	bl	10f4c <dcgettext@plt>
   11c20:	mov	r9, r0
   11c24:	mov	r2, #5
   11c28:	ldr	r1, [pc, #1484]	; 121fc <__assert_fail@plt+0x1070>
   11c2c:	mov	r0, #0
   11c30:	bl	10f4c <dcgettext@plt>
   11c34:	mov	sl, r0
   11c38:	mov	r2, #5
   11c3c:	ldr	r1, [pc, #1468]	; 12200 <__assert_fail@plt+0x1074>
   11c40:	mov	r0, #0
   11c44:	bl	10f4c <dcgettext@plt>
   11c48:	mov	fp, r0
   11c4c:	mov	r2, #5
   11c50:	ldr	r1, [pc, #1452]	; 12204 <__assert_fail@plt+0x1078>
   11c54:	mov	r0, #0
   11c58:	bl	10f4c <dcgettext@plt>
   11c5c:	str	r0, [sp, #20]
   11c60:	str	fp, [sp, #16]
   11c64:	str	sl, [sp, #12]
   11c68:	str	r9, [sp, #8]
   11c6c:	str	r8, [sp, #4]
   11c70:	str	r7, [sp]
   11c74:	mvn	r3, #0
   11c78:	mov	r2, #32
   11c7c:	mov	r1, r6
   11c80:	mov	r0, r3
   11c84:	bl	112c0 <__assert_fail@plt+0x134>
   11c88:	b	11ab4 <__assert_fail@plt+0x928>
   11c8c:	mov	r0, #0
   11c90:	bl	1106c <ttyname@plt>
   11c94:	subs	r3, r0, #0
   11c98:	mov	r6, r3
   11c9c:	str	r3, [sp, #24]
   11ca0:	beq	11bc4 <__assert_fail@plt+0xa38>
   11ca4:	mov	r2, #5
   11ca8:	ldr	r1, [pc, #1368]	; 12208 <__assert_fail@plt+0x107c>
   11cac:	mov	r0, r3
   11cb0:	bl	11168 <strncmp@plt>
   11cb4:	cmp	r0, #0
   11cb8:	moveq	r3, r6
   11cbc:	addeq	r3, r3, #5
   11cc0:	streq	r3, [sp, #24]
   11cc4:	b	11acc <__assert_fail@plt+0x940>
   11cc8:	ldrb	r3, [r5, #68]	; 0x44
   11ccc:	cmp	r3, #0
   11cd0:	beq	11ce0 <__assert_fail@plt+0xb54>
   11cd4:	ldrsh	r3, [r4, #-8]
   11cd8:	cmp	r3, #1
   11cdc:	beq	11dd8 <__assert_fail@plt+0xc4c>
   11ce0:	ldrb	r3, [r5, #80]	; 0x50
   11ce4:	cmp	r3, #0
   11ce8:	beq	11cf8 <__assert_fail@plt+0xb6c>
   11cec:	ldrsh	r3, [r4, #-8]
   11cf0:	cmp	r3, #2
   11cf4:	beq	11f28 <__assert_fail@plt+0xd9c>
   11cf8:	ldrb	r3, [r5, #81]	; 0x51
   11cfc:	cmp	r3, #0
   11d00:	beq	11d10 <__assert_fail@plt+0xb84>
   11d04:	ldrsh	r3, [r4, #-8]
   11d08:	cmp	r3, #3
   11d0c:	beq	11f74 <__assert_fail@plt+0xde8>
   11d10:	ldrb	r3, [r5, #82]	; 0x52
   11d14:	cmp	r3, #0
   11d18:	beq	11d28 <__assert_fail@plt+0xb9c>
   11d1c:	ldrsh	r3, [r4, #-8]
   11d20:	cmp	r3, #5
   11d24:	beq	11fc0 <__assert_fail@plt+0xe34>
   11d28:	ldrb	r3, [r5, #83]	; 0x53
   11d2c:	cmp	r3, #0
   11d30:	beq	11d40 <__assert_fail@plt+0xbb4>
   11d34:	ldrsh	r3, [r4, #-8]
   11d38:	cmp	r3, #6
   11d3c:	beq	1202c <__assert_fail@plt+0xea0>
   11d40:	ldrb	r3, [r5, #84]	; 0x54
   11d44:	cmp	r3, #0
   11d48:	beq	11d5c <__assert_fail@plt+0xbd0>
   11d4c:	mov	r7, r4
   11d50:	ldrsh	r3, [r4, #-8]
   11d54:	cmp	r3, #8
   11d58:	beq	120b0 <__assert_fail@plt+0xf24>
   11d5c:	ldrsh	r3, [r4, #-8]
   11d60:	cmp	r3, #2
   11d64:	ldreq	fp, [sl, #-44]	; 0xffffffd4
   11d68:	sub	r9, r9, #1
   11d6c:	add	sl, sl, #384	; 0x180
   11d70:	add	r4, r4, #384	; 0x180
   11d74:	cmn	r9, #1
   11d78:	beq	11bc4 <__assert_fail@plt+0xa38>
   11d7c:	sub	r6, r4, #8
   11d80:	ldrb	r3, [r5, #66]	; 0x42
   11d84:	cmp	r3, #0
   11d88:	beq	11da4 <__assert_fail@plt+0xc18>
   11d8c:	mov	r2, #32
   11d90:	mov	r1, r4
   11d94:	ldr	r0, [sp, #24]
   11d98:	bl	11168 <strncmp@plt>
   11d9c:	cmp	r0, #0
   11da0:	bne	11d5c <__assert_fail@plt+0xbd0>
   11da4:	ldrb	r3, [r5, #67]	; 0x43
   11da8:	cmp	r3, #0
   11dac:	beq	11cc8 <__assert_fail@plt+0xb3c>
   11db0:	ldrb	r3, [r4, #36]	; 0x24
   11db4:	cmp	r3, #0
   11db8:	beq	11cc8 <__assert_fail@plt+0xb3c>
   11dbc:	ldrsh	r3, [r4, #-8]
   11dc0:	cmp	r3, #7
   11dc4:	bne	11cc8 <__assert_fail@plt+0xb3c>
   11dc8:	mov	r1, fp
   11dcc:	mov	r0, r6
   11dd0:	bl	115cc <__assert_fail@plt+0x440>
   11dd4:	b	11d5c <__assert_fail@plt+0xbd0>
   11dd8:	ldr	r7, [r4, #-4]
   11ddc:	add	r3, r7, #255	; 0xff
   11de0:	cmp	r7, #0
   11de4:	movge	r3, r7
   11de8:	asr	r3, r3, #8
   11dec:	str	r3, [sp, #28]
   11df0:	uxtb	r8, r3
   11df4:	rsbs	r3, r7, #0
   11df8:	uxtb	r7, r7
   11dfc:	uxtb	r3, r3
   11e00:	rsbpl	r7, r3, #0
   11e04:	ldr	r3, [r5, #72]	; 0x48
   11e08:	cmp	r3, #0
   11e0c:	beq	11ee0 <__assert_fail@plt+0xd54>
   11e10:	ldr	r3, [r5, #72]	; 0x48
   11e14:	str	r3, [sp, #32]
   11e18:	mov	r2, #5
   11e1c:	ldr	r1, [pc, #1000]	; 1220c <__assert_fail@plt+0x1080>
   11e20:	mov	r0, #0
   11e24:	bl	10f4c <dcgettext@plt>
   11e28:	uxtb	r7, r7
   11e2c:	str	r7, [sp, #4]
   11e30:	str	r0, [sp]
   11e34:	ldr	r3, [pc, #980]	; 12210 <__assert_fail@plt+0x1084>
   11e38:	mvn	r2, #0
   11e3c:	mov	r1, #1
   11e40:	ldr	r0, [sp, #32]
   11e44:	bl	1109c <__sprintf_chk@plt>
   11e48:	ldr	r3, [r5, #76]	; 0x4c
   11e4c:	cmp	r3, #0
   11e50:	beq	11f04 <__assert_fail@plt+0xd78>
   11e54:	ldr	r7, [r5, #76]	; 0x4c
   11e58:	mov	r2, #5
   11e5c:	ldr	r1, [pc, #944]	; 12214 <__assert_fail@plt+0x1088>
   11e60:	mov	r0, #0
   11e64:	bl	10f4c <dcgettext@plt>
   11e68:	cmp	r8, #78	; 0x4e
   11e6c:	ldrbne	r3, [sp, #28]
   11e70:	beq	121cc <__assert_fail@plt+0x1040>
   11e74:	str	r3, [sp, #4]
   11e78:	str	r0, [sp]
   11e7c:	ldr	r3, [pc, #916]	; 12218 <__assert_fail@plt+0x108c>
   11e80:	mvn	r2, #0
   11e84:	mov	r1, #1
   11e88:	mov	r0, r7
   11e8c:	bl	1109c <__sprintf_chk@plt>
   11e90:	ldr	r7, [r5, #72]	; 0x48
   11e94:	mov	r0, r6
   11e98:	bl	1156c <__assert_fail@plt+0x3e0>
   11e9c:	ldrb	r3, [sp, #28]
   11ea0:	sub	r3, r3, #32
   11ea4:	cmp	r3, #94	; 0x5e
   11ea8:	ldrhi	r3, [pc, #812]	; 121dc <__assert_fail@plt+0x1050>
   11eac:	ldrls	r3, [r5, #76]	; 0x4c
   11eb0:	ldr	r1, [pc, #804]	; 121dc <__assert_fail@plt+0x1050>
   11eb4:	str	r1, [sp, #20]
   11eb8:	str	r3, [sp, #16]
   11ebc:	str	r1, [sp, #12]
   11ec0:	str	r1, [sp, #8]
   11ec4:	str	r0, [sp, #4]
   11ec8:	str	r7, [sp]
   11ecc:	mvn	r3, #0
   11ed0:	mov	r2, #32
   11ed4:	mov	r0, r3
   11ed8:	bl	112c0 <__assert_fail@plt+0x134>
   11edc:	b	11d5c <__assert_fail@plt+0xbd0>
   11ee0:	mov	r2, #5
   11ee4:	ldr	r1, [pc, #800]	; 1220c <__assert_fail@plt+0x1080>
   11ee8:	mov	r0, #0
   11eec:	bl	10f4c <dcgettext@plt>
   11ef0:	bl	11078 <strlen@plt>
   11ef4:	add	r0, r0, #3
   11ef8:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   11efc:	str	r0, [r5, #72]	; 0x48
   11f00:	b	11e10 <__assert_fail@plt+0xc84>
   11f04:	mov	r2, #5
   11f08:	ldr	r1, [pc, #772]	; 12214 <__assert_fail@plt+0x1088>
   11f0c:	mov	r0, #0
   11f10:	bl	10f4c <dcgettext@plt>
   11f14:	bl	11078 <strlen@plt>
   11f18:	add	r0, r0, #2
   11f1c:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   11f20:	str	r0, [r5, #76]	; 0x4c
   11f24:	b	11e54 <__assert_fail@plt+0xcc8>
   11f28:	mov	r2, #5
   11f2c:	ldr	r1, [pc, #744]	; 1221c <__assert_fail@plt+0x1090>
   11f30:	mov	r0, #0
   11f34:	bl	10f4c <dcgettext@plt>
   11f38:	mov	r7, r0
   11f3c:	mov	r0, r6
   11f40:	bl	1156c <__assert_fail@plt+0x3e0>
   11f44:	ldr	r1, [pc, #656]	; 121dc <__assert_fail@plt+0x1050>
   11f48:	str	r1, [sp, #20]
   11f4c:	str	r1, [sp, #16]
   11f50:	str	r1, [sp, #12]
   11f54:	str	r1, [sp, #8]
   11f58:	str	r0, [sp, #4]
   11f5c:	str	r7, [sp]
   11f60:	mvn	r3, #0
   11f64:	mov	r2, #32
   11f68:	mov	r0, r3
   11f6c:	bl	112c0 <__assert_fail@plt+0x134>
   11f70:	b	11d5c <__assert_fail@plt+0xbd0>
   11f74:	mov	r2, #5
   11f78:	ldr	r1, [pc, #672]	; 12220 <__assert_fail@plt+0x1094>
   11f7c:	mov	r0, #0
   11f80:	bl	10f4c <dcgettext@plt>
   11f84:	mov	r7, r0
   11f88:	mov	r0, r6
   11f8c:	bl	1156c <__assert_fail@plt+0x3e0>
   11f90:	ldr	r1, [pc, #580]	; 121dc <__assert_fail@plt+0x1050>
   11f94:	str	r1, [sp, #20]
   11f98:	str	r1, [sp, #16]
   11f9c:	str	r1, [sp, #12]
   11fa0:	str	r1, [sp, #8]
   11fa4:	str	r0, [sp, #4]
   11fa8:	str	r7, [sp]
   11fac:	mvn	r3, #0
   11fb0:	mov	r2, #32
   11fb4:	mov	r0, r3
   11fb8:	bl	112c0 <__assert_fail@plt+0x134>
   11fbc:	b	11d5c <__assert_fail@plt+0xbd0>
   11fc0:	mov	r0, r6
   11fc4:	bl	114d8 <__assert_fail@plt+0x34c>
   11fc8:	mov	r7, r0
   11fcc:	ldr	r3, [r4, #-4]
   11fd0:	str	r3, [sp]
   11fd4:	ldr	r3, [pc, #584]	; 12224 <__assert_fail@plt+0x1098>
   11fd8:	mov	r2, #12
   11fdc:	mov	r1, #1
   11fe0:	add	r0, sp, #44	; 0x2c
   11fe4:	bl	1109c <__sprintf_chk@plt>
   11fe8:	mov	r0, r6
   11fec:	bl	1156c <__assert_fail@plt+0x3e0>
   11ff0:	ldr	r1, [pc, #484]	; 121dc <__assert_fail@plt+0x1050>
   11ff4:	str	r1, [sp, #20]
   11ff8:	str	r7, [sp, #16]
   11ffc:	add	r3, sp, #44	; 0x2c
   12000:	str	r3, [sp, #12]
   12004:	str	r1, [sp, #8]
   12008:	str	r0, [sp, #4]
   1200c:	str	r4, [sp]
   12010:	mov	r3, #32
   12014:	mov	r2, r3
   12018:	mvn	r0, #0
   1201c:	bl	112c0 <__assert_fail@plt+0x134>
   12020:	mov	r0, r7
   12024:	bl	12b40 <__assert_fail@plt+0x19b4>
   12028:	b	11d5c <__assert_fail@plt+0xbd0>
   1202c:	mov	r0, r6
   12030:	bl	114d8 <__assert_fail@plt+0x34c>
   12034:	mov	r7, r0
   12038:	ldr	r3, [r4, #-4]
   1203c:	str	r3, [sp]
   12040:	ldr	r3, [pc, #476]	; 12224 <__assert_fail@plt+0x1098>
   12044:	mov	r2, #12
   12048:	mov	r1, #1
   1204c:	add	r0, sp, #44	; 0x2c
   12050:	bl	1109c <__sprintf_chk@plt>
   12054:	mov	r2, #5
   12058:	ldr	r1, [pc, #456]	; 12228 <__assert_fail@plt+0x109c>
   1205c:	mov	r0, #0
   12060:	bl	10f4c <dcgettext@plt>
   12064:	mov	r8, r0
   12068:	mov	r0, r6
   1206c:	bl	1156c <__assert_fail@plt+0x3e0>
   12070:	ldr	r3, [pc, #356]	; 121dc <__assert_fail@plt+0x1050>
   12074:	str	r3, [sp, #20]
   12078:	str	r7, [sp, #16]
   1207c:	add	r2, sp, #44	; 0x2c
   12080:	str	r2, [sp, #12]
   12084:	str	r3, [sp, #8]
   12088:	str	r0, [sp, #4]
   1208c:	str	r4, [sp]
   12090:	mov	r3, #32
   12094:	mov	r2, r3
   12098:	mov	r1, r8
   1209c:	mvn	r0, #0
   120a0:	bl	112c0 <__assert_fail@plt+0x134>
   120a4:	mov	r0, r7
   120a8:	bl	12b40 <__assert_fail@plt+0x19b4>
   120ac:	b	11d5c <__assert_fail@plt+0xbd0>
   120b0:	mov	r0, r6
   120b4:	bl	114d8 <__assert_fail@plt+0x34c>
   120b8:	str	r0, [sp, #28]
   120bc:	ldr	r3, [r4, #-4]
   120c0:	str	r3, [sp]
   120c4:	ldr	r3, [pc, #344]	; 12224 <__assert_fail@plt+0x1098>
   120c8:	mov	r2, #12
   120cc:	mov	r1, #1
   120d0:	add	r0, sp, #44	; 0x2c
   120d4:	bl	1109c <__sprintf_chk@plt>
   120d8:	ldr	r3, [r5, #88]	; 0x58
   120dc:	cmp	r3, #0
   120e0:	beq	1218c <__assert_fail@plt+0x1000>
   120e4:	ldr	r3, [r5, #88]	; 0x58
   120e8:	str	r3, [sp, #32]
   120ec:	mov	r2, #5
   120f0:	ldr	r1, [pc, #308]	; 1222c <__assert_fail@plt+0x10a0>
   120f4:	mov	r0, #0
   120f8:	bl	10f4c <dcgettext@plt>
   120fc:	str	r0, [sp, #36]	; 0x24
   12100:	ldrsh	r8, [sl, #-52]	; 0xffffffcc
   12104:	mov	r2, #5
   12108:	ldr	r1, [pc, #288]	; 12230 <__assert_fail@plt+0x10a4>
   1210c:	mov	r0, #0
   12110:	bl	10f4c <dcgettext@plt>
   12114:	ldrsh	r3, [sl, #-50]	; 0xffffffce
   12118:	str	r3, [sp, #12]
   1211c:	str	r0, [sp, #8]
   12120:	str	r8, [sp, #4]
   12124:	ldr	r2, [sp, #36]	; 0x24
   12128:	str	r2, [sp]
   1212c:	ldr	r3, [pc, #256]	; 12234 <__assert_fail@plt+0x10a8>
   12130:	mvn	r2, #0
   12134:	mov	r1, #1
   12138:	ldr	r0, [sp, #32]
   1213c:	bl	1109c <__sprintf_chk@plt>
   12140:	mov	r0, r6
   12144:	bl	1156c <__assert_fail@plt+0x3e0>
   12148:	ldr	r1, [pc, #140]	; 121dc <__assert_fail@plt+0x1050>
   1214c:	ldr	r3, [r5, #88]	; 0x58
   12150:	str	r3, [sp, #20]
   12154:	ldr	r6, [sp, #28]
   12158:	str	r6, [sp, #16]
   1215c:	add	r3, sp, #44	; 0x2c
   12160:	str	r3, [sp, #12]
   12164:	str	r1, [sp, #8]
   12168:	str	r0, [sp, #4]
   1216c:	str	r7, [sp]
   12170:	mov	r3, #32
   12174:	mov	r2, r3
   12178:	mvn	r0, #0
   1217c:	bl	112c0 <__assert_fail@plt+0x134>
   12180:	mov	r0, r6
   12184:	bl	12b40 <__assert_fail@plt+0x19b4>
   12188:	b	11d5c <__assert_fail@plt+0xbd0>
   1218c:	mov	r2, #5
   12190:	ldr	r1, [pc, #148]	; 1222c <__assert_fail@plt+0x10a0>
   12194:	mov	r0, #0
   12198:	bl	10f4c <dcgettext@plt>
   1219c:	bl	11078 <strlen@plt>
   121a0:	mov	r8, r0
   121a4:	mov	r2, #5
   121a8:	ldr	r1, [pc, #128]	; 12230 <__assert_fail@plt+0x10a4>
   121ac:	mov	r0, #0
   121b0:	bl	10f4c <dcgettext@plt>
   121b4:	bl	11078 <strlen@plt>
   121b8:	add	r0, r8, r0
   121bc:	add	r0, r0, #14
   121c0:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   121c4:	str	r0, [r5, #88]	; 0x58
   121c8:	b	120e4 <__assert_fail@plt+0xf58>
   121cc:	mov	r3, #83	; 0x53
   121d0:	b	11e74 <__assert_fail@plt+0xce8>
   121d4:	andeq	r7, r2, r4, lsl #3
   121d8:	muleq	r1, ip, sl
   121dc:	andeq	r6, r1, r8, ror #15
   121e0:	andeq	r6, r1, r8, lsl #5
   121e4:	andeq	r6, r1, r0, lsr #4
   121e8:	muleq	r1, r0, r2
   121ec:	andeq	r6, r1, r0, lsr #5
   121f0:	andeq	r6, r1, r8, lsr #5
   121f4:			; <UNDEFINED> instruction: 0x000162b0
   121f8:			; <UNDEFINED> instruction: 0x000162b8
   121fc:	andeq	r6, r1, r0, asr #5
   12200:	andeq	r6, r1, r4, asr #5
   12204:	andeq	r6, r1, ip, asr #5
   12208:	andeq	r6, r1, r8, lsr #4
   1220c:	ldrdeq	r6, [r1], -r4
   12210:	andeq	r6, r1, r0, ror #5
   12214:	andeq	r6, r1, r8, ror #5
   12218:	andeq	r6, r1, r0, lsr r3
   1221c:	strdeq	r6, [r1], -r0
   12220:	strdeq	r6, [r1], -ip
   12224:	andeq	r6, r1, r4, lsr #4
   12228:	andeq	r6, r1, ip, lsl #6
   1222c:	andeq	r6, r1, r4, lsl r3
   12230:	andeq	r6, r1, ip, lsl r3
   12234:	andeq	r6, r1, r4, lsr #6
   12238:	push	{lr}		; (str lr, [sp, #-4]!)
   1223c:	sub	sp, sp, #60	; 0x3c
   12240:	subs	r6, r0, #0
   12244:	beq	12280 <__assert_fail@plt+0x10f4>
   12248:	ldr	r3, [pc, #836]	; 12594 <__assert_fail@plt+0x1408>
   1224c:	ldr	r4, [r3]
   12250:	mov	r2, #5
   12254:	ldr	r1, [pc, #828]	; 12598 <__assert_fail@plt+0x140c>
   12258:	mov	r0, #0
   1225c:	bl	10f4c <dcgettext@plt>
   12260:	ldr	r3, [pc, #820]	; 1259c <__assert_fail@plt+0x1410>
   12264:	ldr	r3, [r3]
   12268:	mov	r2, r0
   1226c:	mov	r1, #1
   12270:	mov	r0, r4
   12274:	bl	110e4 <__fprintf_chk@plt>
   12278:	mov	r0, r6
   1227c:	bl	11060 <exit@plt>
   12280:	mov	r2, #5
   12284:	ldr	r1, [pc, #788]	; 125a0 <__assert_fail@plt+0x1414>
   12288:	mov	r0, #0
   1228c:	bl	10f4c <dcgettext@plt>
   12290:	ldr	r3, [pc, #772]	; 1259c <__assert_fail@plt+0x1410>
   12294:	ldr	r2, [r3]
   12298:	mov	r1, r0
   1229c:	mov	r0, #1
   122a0:	bl	110cc <__printf_chk@plt>
   122a4:	mov	r2, #5
   122a8:	ldr	r1, [pc, #756]	; 125a4 <__assert_fail@plt+0x1418>
   122ac:	mov	r0, #0
   122b0:	bl	10f4c <dcgettext@plt>
   122b4:	ldr	r4, [pc, #748]	; 125a8 <__assert_fail@plt+0x141c>
   122b8:	ldr	r1, [r4]
   122bc:	bl	10ea4 <fputs_unlocked@plt>
   122c0:	mov	r2, #5
   122c4:	ldr	r1, [pc, #736]	; 125ac <__assert_fail@plt+0x1420>
   122c8:	mov	r0, #0
   122cc:	bl	10f4c <dcgettext@plt>
   122d0:	ldr	r1, [r4]
   122d4:	bl	10ea4 <fputs_unlocked@plt>
   122d8:	mov	r2, #5
   122dc:	ldr	r1, [pc, #716]	; 125b0 <__assert_fail@plt+0x1424>
   122e0:	mov	r0, #0
   122e4:	bl	10f4c <dcgettext@plt>
   122e8:	ldr	r1, [r4]
   122ec:	bl	10ea4 <fputs_unlocked@plt>
   122f0:	mov	r2, #5
   122f4:	ldr	r1, [pc, #696]	; 125b4 <__assert_fail@plt+0x1428>
   122f8:	mov	r0, #0
   122fc:	bl	10f4c <dcgettext@plt>
   12300:	ldr	r1, [r4]
   12304:	bl	10ea4 <fputs_unlocked@plt>
   12308:	mov	r2, #5
   1230c:	ldr	r1, [pc, #676]	; 125b8 <__assert_fail@plt+0x142c>
   12310:	mov	r0, #0
   12314:	bl	10f4c <dcgettext@plt>
   12318:	ldr	r1, [r4]
   1231c:	bl	10ea4 <fputs_unlocked@plt>
   12320:	mov	r2, #5
   12324:	ldr	r1, [pc, #656]	; 125bc <__assert_fail@plt+0x1430>
   12328:	mov	r0, #0
   1232c:	bl	10f4c <dcgettext@plt>
   12330:	ldr	r1, [r4]
   12334:	bl	10ea4 <fputs_unlocked@plt>
   12338:	mov	r2, #5
   1233c:	ldr	r1, [pc, #636]	; 125c0 <__assert_fail@plt+0x1434>
   12340:	mov	r0, #0
   12344:	bl	10f4c <dcgettext@plt>
   12348:	ldr	r1, [r4]
   1234c:	bl	10ea4 <fputs_unlocked@plt>
   12350:	mov	r2, #5
   12354:	ldr	r1, [pc, #616]	; 125c4 <__assert_fail@plt+0x1438>
   12358:	mov	r0, #0
   1235c:	bl	10f4c <dcgettext@plt>
   12360:	ldr	r1, [r4]
   12364:	bl	10ea4 <fputs_unlocked@plt>
   12368:	mov	r2, #5
   1236c:	ldr	r1, [pc, #596]	; 125c8 <__assert_fail@plt+0x143c>
   12370:	mov	r0, #0
   12374:	bl	10f4c <dcgettext@plt>
   12378:	ldr	r3, [pc, #588]	; 125cc <__assert_fail@plt+0x1440>
   1237c:	ldr	r2, [pc, #588]	; 125d0 <__assert_fail@plt+0x1444>
   12380:	mov	r1, r0
   12384:	mov	r0, #1
   12388:	bl	110cc <__printf_chk@plt>
   1238c:	mov	ip, sp
   12390:	ldr	lr, [pc, #572]	; 125d4 <__assert_fail@plt+0x1448>
   12394:	ldm	lr!, {r0, r1, r2, r3}
   12398:	stmia	ip!, {r0, r1, r2, r3}
   1239c:	ldm	lr!, {r0, r1, r2, r3}
   123a0:	stmia	ip!, {r0, r1, r2, r3}
   123a4:	ldm	lr!, {r0, r1, r2, r3}
   123a8:	stmia	ip!, {r0, r1, r2, r3}
   123ac:	ldm	lr, {r0, r1}
   123b0:	stm	ip, {r0, r1}
   123b4:	ldr	r1, [sp]
   123b8:	cmp	r1, #0
   123bc:	moveq	r4, sp
   123c0:	beq	123e8 <__assert_fail@plt+0x125c>
   123c4:	mov	r4, sp
   123c8:	ldr	r5, [pc, #520]	; 125d8 <__assert_fail@plt+0x144c>
   123cc:	mov	r0, r5
   123d0:	bl	10ebc <strcmp@plt>
   123d4:	cmp	r0, #0
   123d8:	beq	123e8 <__assert_fail@plt+0x125c>
   123dc:	ldr	r1, [r4, #8]!
   123e0:	cmp	r1, #0
   123e4:	bne	123cc <__assert_fail@plt+0x1240>
   123e8:	ldr	r4, [r4, #4]
   123ec:	cmp	r4, #0
   123f0:	beq	12504 <__assert_fail@plt+0x1378>
   123f4:	mov	r2, #5
   123f8:	ldr	r1, [pc, #476]	; 125dc <__assert_fail@plt+0x1450>
   123fc:	mov	r0, #0
   12400:	bl	10f4c <dcgettext@plt>
   12404:	ldr	r3, [pc, #468]	; 125e0 <__assert_fail@plt+0x1454>
   12408:	ldr	r2, [pc, #468]	; 125e4 <__assert_fail@plt+0x1458>
   1240c:	mov	r1, r0
   12410:	mov	r0, #1
   12414:	bl	110cc <__printf_chk@plt>
   12418:	mov	r1, #0
   1241c:	mov	r0, #5
   12420:	bl	11114 <setlocale@plt>
   12424:	cmp	r0, #0
   12428:	beq	12440 <__assert_fail@plt+0x12b4>
   1242c:	mov	r2, #3
   12430:	ldr	r1, [pc, #432]	; 125e8 <__assert_fail@plt+0x145c>
   12434:	bl	11168 <strncmp@plt>
   12438:	cmp	r0, #0
   1243c:	bne	124a0 <__assert_fail@plt+0x1314>
   12440:	mov	r2, #5
   12444:	ldr	r1, [pc, #416]	; 125ec <__assert_fail@plt+0x1460>
   12448:	mov	r0, #0
   1244c:	bl	10f4c <dcgettext@plt>
   12450:	ldr	r5, [pc, #384]	; 125d8 <__assert_fail@plt+0x144c>
   12454:	mov	r3, r5
   12458:	ldr	r2, [pc, #384]	; 125e0 <__assert_fail@plt+0x1454>
   1245c:	mov	r1, r0
   12460:	mov	r0, #1
   12464:	bl	110cc <__printf_chk@plt>
   12468:	mov	r2, #5
   1246c:	ldr	r1, [pc, #380]	; 125f0 <__assert_fail@plt+0x1464>
   12470:	mov	r0, #0
   12474:	bl	10f4c <dcgettext@plt>
   12478:	mov	r1, r0
   1247c:	ldr	r2, [pc, #368]	; 125f4 <__assert_fail@plt+0x1468>
   12480:	ldr	r3, [pc, #368]	; 125f8 <__assert_fail@plt+0x146c>
   12484:	cmp	r4, r5
   12488:	movne	r3, r2
   1248c:	mov	r2, r4
   12490:	mov	r0, #1
   12494:	bl	110cc <__printf_chk@plt>
   12498:	b	12278 <__assert_fail@plt+0x10ec>
   1249c:	ldr	r4, [pc, #308]	; 125d8 <__assert_fail@plt+0x144c>
   124a0:	mov	r2, #5
   124a4:	ldr	r1, [pc, #336]	; 125fc <__assert_fail@plt+0x1470>
   124a8:	mov	r0, #0
   124ac:	bl	10f4c <dcgettext@plt>
   124b0:	ldr	r3, [pc, #240]	; 125a8 <__assert_fail@plt+0x141c>
   124b4:	ldr	r1, [r3]
   124b8:	bl	10ea4 <fputs_unlocked@plt>
   124bc:	b	12440 <__assert_fail@plt+0x12b4>
   124c0:	mov	r2, #5
   124c4:	ldr	r1, [pc, #288]	; 125ec <__assert_fail@plt+0x1460>
   124c8:	mov	r0, #0
   124cc:	bl	10f4c <dcgettext@plt>
   124d0:	ldr	r4, [pc, #256]	; 125d8 <__assert_fail@plt+0x144c>
   124d4:	mov	r3, r4
   124d8:	ldr	r2, [pc, #256]	; 125e0 <__assert_fail@plt+0x1454>
   124dc:	mov	r1, r0
   124e0:	mov	r0, #1
   124e4:	bl	110cc <__printf_chk@plt>
   124e8:	mov	r2, #5
   124ec:	ldr	r1, [pc, #252]	; 125f0 <__assert_fail@plt+0x1464>
   124f0:	mov	r0, #0
   124f4:	bl	10f4c <dcgettext@plt>
   124f8:	mov	r1, r0
   124fc:	ldr	r3, [pc, #244]	; 125f8 <__assert_fail@plt+0x146c>
   12500:	b	1248c <__assert_fail@plt+0x1300>
   12504:	mov	r2, #5
   12508:	ldr	r1, [pc, #204]	; 125dc <__assert_fail@plt+0x1450>
   1250c:	mov	r0, #0
   12510:	bl	10f4c <dcgettext@plt>
   12514:	ldr	r3, [pc, #196]	; 125e0 <__assert_fail@plt+0x1454>
   12518:	ldr	r2, [pc, #196]	; 125e4 <__assert_fail@plt+0x1458>
   1251c:	mov	r1, r0
   12520:	mov	r0, #1
   12524:	bl	110cc <__printf_chk@plt>
   12528:	mov	r1, #0
   1252c:	mov	r0, #5
   12530:	bl	11114 <setlocale@plt>
   12534:	cmp	r0, #0
   12538:	beq	124c0 <__assert_fail@plt+0x1334>
   1253c:	mov	r2, #3
   12540:	ldr	r1, [pc, #160]	; 125e8 <__assert_fail@plt+0x145c>
   12544:	bl	11168 <strncmp@plt>
   12548:	cmp	r0, #0
   1254c:	bne	1249c <__assert_fail@plt+0x1310>
   12550:	mov	r2, #5
   12554:	ldr	r1, [pc, #144]	; 125ec <__assert_fail@plt+0x1460>
   12558:	mov	r0, #0
   1255c:	bl	10f4c <dcgettext@plt>
   12560:	ldr	r4, [pc, #112]	; 125d8 <__assert_fail@plt+0x144c>
   12564:	mov	r3, r4
   12568:	ldr	r2, [pc, #112]	; 125e0 <__assert_fail@plt+0x1454>
   1256c:	mov	r1, r0
   12570:	mov	r0, #1
   12574:	bl	110cc <__printf_chk@plt>
   12578:	mov	r2, #5
   1257c:	ldr	r1, [pc, #108]	; 125f0 <__assert_fail@plt+0x1464>
   12580:	mov	r0, #0
   12584:	bl	10f4c <dcgettext@plt>
   12588:	mov	r1, r0
   1258c:	ldr	r3, [pc, #100]	; 125f8 <__assert_fail@plt+0x146c>
   12590:	b	1248c <__assert_fail@plt+0x1300>
   12594:	andeq	r7, r2, r8, ror r1
   12598:	andeq	r6, r1, ip, lsr r3
   1259c:	andeq	r7, r2, ip, lsl #4
   125a0:	andeq	r6, r1, r4, ror #6
   125a4:	muleq	r1, r0, r3
   125a8:	andeq	r7, r2, ip, ror r1
   125ac:	andeq	r6, r1, ip, asr #7
   125b0:	muleq	r1, r0, r4
   125b4:	andeq	r6, r1, r4, asr #9
   125b8:	andeq	r6, r1, r0, lsl #11
   125bc:	andeq	r6, r1, r0, ror #12
   125c0:	andeq	r6, r1, r4, lsl #14
   125c4:	andeq	r6, r1, r4, lsr r7
   125c8:	andeq	r6, r1, ip, ror #14
   125cc:	andeq	r6, r1, ip, ror #15
   125d0:	strdeq	r6, [r1], -ip
   125d4:	andeq	r6, r1, ip, ror r0
   125d8:	andeq	r6, r1, r8, lsr r3
   125dc:	andeq	r6, r1, ip, lsl #16
   125e0:	andeq	r6, r1, r4, lsr #16
   125e4:	andeq	r6, r1, ip, asr #16
   125e8:	andeq	r6, r1, ip, asr r8
   125ec:	andeq	r6, r1, r8, lsr #17
   125f0:	andeq	r6, r1, r4, asr #17
   125f4:	andeq	r6, r1, r8, ror #15
   125f8:	andeq	r6, r1, ip, lsl #19
   125fc:	andeq	r6, r1, r0, ror #16
   12600:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12604:	sub	sp, sp, #20
   12608:	mov	r8, r0
   1260c:	mov	r7, r1
   12610:	ldr	r0, [r1]
   12614:	bl	12ccc <__assert_fail@plt+0x1b40>
   12618:	ldr	r1, [pc, #772]	; 12924 <__assert_fail@plt+0x1798>
   1261c:	mov	r0, #6
   12620:	bl	11114 <setlocale@plt>
   12624:	ldr	r4, [pc, #764]	; 12928 <__assert_fail@plt+0x179c>
   12628:	ldr	r1, [pc, #764]	; 1292c <__assert_fail@plt+0x17a0>
   1262c:	mov	r0, r4
   12630:	bl	11150 <bindtextdomain@plt>
   12634:	mov	r0, r4
   12638:	bl	10f7c <textdomain@plt>
   1263c:	ldr	r0, [pc, #748]	; 12930 <__assert_fail@plt+0x17a4>
   12640:	bl	1604c <__assert_fail@plt+0x4ec0>
   12644:	mov	fp, #1
   12648:	ldr	sl, [pc, #740]	; 12934 <__assert_fail@plt+0x17a8>
   1264c:	ldr	r9, [pc, #740]	; 12938 <__assert_fail@plt+0x17ac>
   12650:	mov	r6, #0
   12654:	ldr	r5, [pc, #736]	; 1293c <__assert_fail@plt+0x17b0>
   12658:	mov	r4, fp
   1265c:	str	r6, [sp]
   12660:	mov	r3, sl
   12664:	mov	r2, r9
   12668:	mov	r1, r7
   1266c:	mov	r0, r8
   12670:	bl	1103c <getopt_long@plt>
   12674:	cmn	r0, #1
   12678:	beq	12828 <__assert_fail@plt+0x169c>
   1267c:	cmp	r0, #109	; 0x6d
   12680:	beq	12790 <__assert_fail@plt+0x1604>
   12684:	bgt	12718 <__assert_fail@plt+0x158c>
   12688:	cmp	r0, #84	; 0x54
   1268c:	beq	127c4 <__assert_fail@plt+0x1638>
   12690:	ble	126c0 <__assert_fail@plt+0x1534>
   12694:	cmp	r0, #98	; 0x62
   12698:	beq	12768 <__assert_fail@plt+0x15dc>
   1269c:	ble	126e0 <__assert_fail@plt+0x1554>
   126a0:	cmp	r0, #100	; 0x64
   126a4:	beq	12774 <__assert_fail@plt+0x15e8>
   126a8:	cmp	r0, #108	; 0x6c
   126ac:	bne	126d8 <__assert_fail@plt+0x154c>
   126b0:	strb	r4, [r5, #83]	; 0x53
   126b4:	strb	r4, [r5]
   126b8:	mov	fp, r6
   126bc:	b	1265c <__assert_fail@plt+0x14d0>
   126c0:	cmn	r0, #2
   126c4:	beq	127dc <__assert_fail@plt+0x1650>
   126c8:	cmp	r0, #72	; 0x48
   126cc:	beq	12788 <__assert_fail@plt+0x15fc>
   126d0:	cmn	r0, #3
   126d4:	beq	127e4 <__assert_fail@plt+0x1658>
   126d8:	mov	r0, #1
   126dc:	bl	12238 <__assert_fail@plt+0x10ac>
   126e0:	cmp	r0, #97	; 0x61
   126e4:	bne	126d8 <__assert_fail@plt+0x154c>
   126e8:	strb	r4, [r5, #80]	; 0x50
   126ec:	strb	r4, [r5, #84]	; 0x54
   126f0:	strb	r4, [r5, #83]	; 0x53
   126f4:	strb	r4, [r5, #82]	; 0x52
   126f8:	strb	r4, [r5, #68]	; 0x44
   126fc:	strb	r4, [r5, #81]	; 0x51
   12700:	strb	r4, [r5, #67]	; 0x43
   12704:	strb	r4, [r5, #3]
   12708:	strb	r4, [r5]
   1270c:	strb	r4, [r5, #2]
   12710:	mov	fp, r6
   12714:	b	1265c <__assert_fail@plt+0x14d0>
   12718:	cmp	r0, #115	; 0x73
   1271c:	beq	127b0 <__assert_fail@plt+0x1624>
   12720:	ble	12748 <__assert_fail@plt+0x15bc>
   12724:	cmp	r0, #117	; 0x75
   12728:	beq	127cc <__assert_fail@plt+0x1640>
   1272c:	blt	127b8 <__assert_fail@plt+0x162c>
   12730:	cmp	r0, #119	; 0x77
   12734:	beq	127c4 <__assert_fail@plt+0x1638>
   12738:	cmp	r0, #256	; 0x100
   1273c:	bne	126d8 <__assert_fail@plt+0x154c>
   12740:	strb	r4, [r5, #54]	; 0x36
   12744:	b	1265c <__assert_fail@plt+0x14d0>
   12748:	cmp	r0, #113	; 0x71
   1274c:	beq	12798 <__assert_fail@plt+0x160c>
   12750:	bgt	127a0 <__assert_fail@plt+0x1614>
   12754:	cmp	r0, #112	; 0x70
   12758:	bne	126d8 <__assert_fail@plt+0x154c>
   1275c:	strb	r4, [r5, #82]	; 0x52
   12760:	mov	fp, r6
   12764:	b	1265c <__assert_fail@plt+0x14d0>
   12768:	strb	r4, [r5, #80]	; 0x50
   1276c:	mov	fp, r6
   12770:	b	1265c <__assert_fail@plt+0x14d0>
   12774:	strb	r4, [r5, #84]	; 0x54
   12778:	strb	r4, [r5]
   1277c:	strb	r4, [r5, #2]
   12780:	mov	fp, r6
   12784:	b	1265c <__assert_fail@plt+0x14d0>
   12788:	strb	r4, [r5, #65]	; 0x41
   1278c:	b	1265c <__assert_fail@plt+0x14d0>
   12790:	strb	r4, [r5, #66]	; 0x42
   12794:	b	1265c <__assert_fail@plt+0x14d0>
   12798:	strb	r4, [r5, #64]	; 0x40
   1279c:	b	1265c <__assert_fail@plt+0x14d0>
   127a0:	strb	r4, [r5, #68]	; 0x44
   127a4:	strb	r4, [r5]
   127a8:	mov	fp, r6
   127ac:	b	1265c <__assert_fail@plt+0x14d0>
   127b0:	strb	r4, [r5, #1]
   127b4:	b	1265c <__assert_fail@plt+0x14d0>
   127b8:	strb	r4, [r5, #81]	; 0x51
   127bc:	mov	fp, r6
   127c0:	b	1265c <__assert_fail@plt+0x14d0>
   127c4:	strb	r4, [r5, #3]
   127c8:	b	1265c <__assert_fail@plt+0x14d0>
   127cc:	strb	r4, [r5, #67]	; 0x43
   127d0:	strb	r4, [r5]
   127d4:	mov	fp, r6
   127d8:	b	1265c <__assert_fail@plt+0x14d0>
   127dc:	mov	r0, #0
   127e0:	bl	12238 <__assert_fail@plt+0x10ac>
   127e4:	mov	r4, #0
   127e8:	str	r4, [sp, #12]
   127ec:	ldr	r3, [pc, #332]	; 12940 <__assert_fail@plt+0x17b4>
   127f0:	str	r3, [sp, #8]
   127f4:	ldr	r3, [pc, #328]	; 12944 <__assert_fail@plt+0x17b8>
   127f8:	str	r3, [sp, #4]
   127fc:	ldr	r3, [pc, #324]	; 12948 <__assert_fail@plt+0x17bc>
   12800:	str	r3, [sp]
   12804:	ldr	r3, [pc, #320]	; 1294c <__assert_fail@plt+0x17c0>
   12808:	ldr	r3, [r3]
   1280c:	ldr	r2, [pc, #316]	; 12950 <__assert_fail@plt+0x17c4>
   12810:	ldr	r1, [pc, #316]	; 12954 <__assert_fail@plt+0x17c8>
   12814:	ldr	r0, [pc, #316]	; 12958 <__assert_fail@plt+0x17cc>
   12818:	ldr	r0, [r0]
   1281c:	bl	14f0c <__assert_fail@plt+0x3d80>
   12820:	mov	r0, r4
   12824:	bl	11060 <exit@plt>
   12828:	cmp	fp, #0
   1282c:	ldrne	r3, [pc, #264]	; 1293c <__assert_fail@plt+0x17b0>
   12830:	movne	r2, #1
   12834:	strbne	r2, [r3, #67]	; 0x43
   12838:	strbne	r2, [r3, #1]
   1283c:	ldr	r3, [pc, #248]	; 1293c <__assert_fail@plt+0x17b0>
   12840:	ldrb	r3, [r3, #2]
   12844:	cmp	r3, #0
   12848:	movne	r2, #0
   1284c:	ldrne	r3, [pc, #232]	; 1293c <__assert_fail@plt+0x17b0>
   12850:	strbne	r2, [r3, #1]
   12854:	mov	r0, #2
   12858:	bl	12b98 <__assert_fail@plt+0x1a0c>
   1285c:	cmp	r0, #0
   12860:	ldr	r3, [pc, #212]	; 1293c <__assert_fail@plt+0x17b0>
   12864:	ldrne	r2, [pc, #240]	; 1295c <__assert_fail@plt+0x17d0>
   12868:	strne	r2, [r3, #44]	; 0x2c
   1286c:	movne	r2, #16
   12870:	ldreq	r2, [pc, #232]	; 12960 <__assert_fail@plt+0x17d4>
   12874:	streq	r2, [r3, #44]	; 0x2c
   12878:	moveq	r2, #12
   1287c:	str	r2, [r3, #4]
   12880:	ldr	r3, [pc, #220]	; 12964 <__assert_fail@plt+0x17d8>
   12884:	ldr	r3, [r3]
   12888:	sub	r8, r8, r3
   1288c:	add	r8, r8, #1
   12890:	cmp	r8, #3
   12894:	ldrls	pc, [pc, r8, lsl #2]
   12898:	b	128e0 <__assert_fail@plt+0x1754>
   1289c:			; <UNDEFINED> instruction: 0x000128b8
   128a0:			; <UNDEFINED> instruction: 0x000128b8
   128a4:	ldrdeq	r2, [r1], -r0
   128a8:	andeq	r2, r1, ip, lsr #17
   128ac:	mov	r2, #1
   128b0:	ldr	r3, [pc, #132]	; 1293c <__assert_fail@plt+0x17b0>
   128b4:	strb	r2, [r3, #66]	; 0x42
   128b8:	mov	r1, #1
   128bc:	ldr	r0, [pc, #164]	; 12968 <__assert_fail@plt+0x17dc>
   128c0:	bl	11a68 <__assert_fail@plt+0x8dc>
   128c4:	mov	r0, #0
   128c8:	add	sp, sp, #20
   128cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128d0:	mov	r1, #0
   128d4:	ldr	r0, [r7, r3, lsl #2]
   128d8:	bl	11a68 <__assert_fail@plt+0x8dc>
   128dc:	b	128c4 <__assert_fail@plt+0x1738>
   128e0:	mov	r2, #5
   128e4:	ldr	r1, [pc, #128]	; 1296c <__assert_fail@plt+0x17e0>
   128e8:	mov	r0, #0
   128ec:	bl	10f4c <dcgettext@plt>
   128f0:	mov	r4, r0
   128f4:	ldr	r3, [pc, #104]	; 12964 <__assert_fail@plt+0x17d8>
   128f8:	ldr	r3, [r3]
   128fc:	add	r3, r3, #2
   12900:	ldr	r0, [r7, r3, lsl #2]
   12904:	bl	1481c <__assert_fail@plt+0x3690>
   12908:	mov	r3, r0
   1290c:	mov	r2, r4
   12910:	mov	r1, #0
   12914:	mov	r0, r1
   12918:	bl	10fd0 <error@plt>
   1291c:	mov	r0, #1
   12920:	bl	12238 <__assert_fail@plt+0x10ac>
   12924:	andeq	r6, r1, r8, ror #15
   12928:	andeq	r6, r1, r0, asr r8
   1292c:	strdeq	r6, [r1], -r8
   12930:	andeq	r2, r1, ip, asr #20
   12934:	strheq	r6, [r1], -r4
   12938:	andeq	r6, r1, r4, asr #18
   1293c:	andeq	r7, r2, r4, lsl #3
   12940:	andeq	r6, r1, r0, lsl r9
   12944:	andeq	r6, r1, r0, lsr #18
   12948:	andeq	r6, r1, r0, lsr r9
   1294c:	andeq	r7, r2, r0, lsr #2
   12950:	andeq	r6, r1, ip, asr #16
   12954:	andeq	r6, r1, r8, lsr r3
   12958:	andeq	r7, r2, ip, ror r1
   1295c:	andeq	r6, r1, r4, asr r9
   12960:	andeq	r6, r1, r4, ror #18
   12964:	andeq	r7, r2, r0, ror r1
   12968:	strdeq	r6, [r1], -ip
   1296c:	andeq	r6, r1, r0, ror r9
   12970:	push	{r4, r5, r6, lr}
   12974:	sub	sp, sp, #8
   12978:	mov	r5, r0
   1297c:	mov	r4, r1
   12980:	mov	r1, #0
   12984:	add	r3, sp, #8
   12988:	str	r1, [r3, #-4]!
   1298c:	ldr	r2, [pc, #104]	; 129fc <__assert_fail@plt+0x1870>
   12990:	mov	ip, #2
   12994:	str	ip, [r2]
   12998:	bl	11144 <getaddrinfo@plt>
   1299c:	cmp	r0, #0
   129a0:	bne	129ec <__assert_fail@plt+0x1860>
   129a4:	ldr	r6, [sp, #4]
   129a8:	ldr	r0, [r6, #24]
   129ac:	cmp	r0, #0
   129b0:	moveq	r0, r5
   129b4:	bl	10f58 <strdup@plt>
   129b8:	mov	r5, r0
   129bc:	clz	r0, r0
   129c0:	lsr	r0, r0, #5
   129c4:	cmp	r4, #0
   129c8:	moveq	r0, #0
   129cc:	cmp	r0, #0
   129d0:	mvnne	r3, #9
   129d4:	strne	r3, [r4]
   129d8:	mov	r0, r6
   129dc:	bl	11138 <freeaddrinfo@plt>
   129e0:	mov	r0, r5
   129e4:	add	sp, sp, #8
   129e8:	pop	{r4, r5, r6, pc}
   129ec:	cmp	r4, #0
   129f0:	strne	r0, [r4]
   129f4:	mov	r5, #0
   129f8:	b	129e0 <__assert_fail@plt+0x1854>
   129fc:	andeq	r7, r2, r0, ror #3
   12a00:	push	{r4, lr}
   12a04:	ldr	r1, [pc, #4]	; 12a10 <__assert_fail@plt+0x1884>
   12a08:	bl	12970 <__assert_fail@plt+0x17e4>
   12a0c:	pop	{r4, pc}
   12a10:	andeq	r7, r2, r0, lsl #4
   12a14:	push	{r4, lr}
   12a18:	ldr	r3, [pc, #8]	; 12a28 <__assert_fail@plt+0x189c>
   12a1c:	ldr	r0, [r3, #32]
   12a20:	bl	10eec <gai_strerror@plt>
   12a24:	pop	{r4, pc}
   12a28:	andeq	r7, r2, r0, ror #3
   12a2c:	ldr	r3, [pc, #4]	; 12a38 <__assert_fail@plt+0x18ac>
   12a30:	str	r0, [r3]
   12a34:	bx	lr
   12a38:	andeq	r7, r2, r4, lsl #4
   12a3c:	ldr	r3, [pc, #4]	; 12a48 <__assert_fail@plt+0x18bc>
   12a40:	strb	r0, [r3, #4]
   12a44:	bx	lr
   12a48:	andeq	r7, r2, r4, lsl #4
   12a4c:	push	{r4, r5, r6, lr}
   12a50:	sub	sp, sp, #8
   12a54:	ldr	r3, [pc, #200]	; 12b24 <__assert_fail@plt+0x1998>
   12a58:	ldr	r0, [r3]
   12a5c:	bl	1568c <__assert_fail@plt+0x4500>
   12a60:	cmp	r0, #0
   12a64:	beq	12a88 <__assert_fail@plt+0x18fc>
   12a68:	ldr	r3, [pc, #184]	; 12b28 <__assert_fail@plt+0x199c>
   12a6c:	ldrb	r3, [r3, #4]
   12a70:	cmp	r3, #0
   12a74:	beq	12aa4 <__assert_fail@plt+0x1918>
   12a78:	bl	11090 <__errno_location@plt>
   12a7c:	ldr	r3, [r0]
   12a80:	cmp	r3, #32
   12a84:	bne	12aa4 <__assert_fail@plt+0x1918>
   12a88:	ldr	r3, [pc, #156]	; 12b2c <__assert_fail@plt+0x19a0>
   12a8c:	ldr	r0, [r3]
   12a90:	bl	1568c <__assert_fail@plt+0x4500>
   12a94:	cmp	r0, #0
   12a98:	bne	12b18 <__assert_fail@plt+0x198c>
   12a9c:	add	sp, sp, #8
   12aa0:	pop	{r4, r5, r6, pc}
   12aa4:	mov	r2, #5
   12aa8:	ldr	r1, [pc, #128]	; 12b30 <__assert_fail@plt+0x19a4>
   12aac:	mov	r0, #0
   12ab0:	bl	10f4c <dcgettext@plt>
   12ab4:	mov	r4, r0
   12ab8:	ldr	r3, [pc, #104]	; 12b28 <__assert_fail@plt+0x199c>
   12abc:	ldr	r5, [r3]
   12ac0:	cmp	r5, #0
   12ac4:	beq	12afc <__assert_fail@plt+0x1970>
   12ac8:	bl	11090 <__errno_location@plt>
   12acc:	ldr	r6, [r0]
   12ad0:	mov	r0, r5
   12ad4:	bl	14694 <__assert_fail@plt+0x3508>
   12ad8:	str	r4, [sp]
   12adc:	mov	r3, r0
   12ae0:	ldr	r2, [pc, #76]	; 12b34 <__assert_fail@plt+0x19a8>
   12ae4:	mov	r1, r6
   12ae8:	mov	r0, #0
   12aec:	bl	10fd0 <error@plt>
   12af0:	ldr	r3, [pc, #64]	; 12b38 <__assert_fail@plt+0x19ac>
   12af4:	ldr	r0, [r3]
   12af8:	bl	10ef8 <_exit@plt>
   12afc:	bl	11090 <__errno_location@plt>
   12b00:	mov	r3, r4
   12b04:	ldr	r2, [pc, #48]	; 12b3c <__assert_fail@plt+0x19b0>
   12b08:	ldr	r1, [r0]
   12b0c:	mov	r0, #0
   12b10:	bl	10fd0 <error@plt>
   12b14:	b	12af0 <__assert_fail@plt+0x1964>
   12b18:	ldr	r3, [pc, #24]	; 12b38 <__assert_fail@plt+0x19ac>
   12b1c:	ldr	r0, [r3]
   12b20:	bl	10ef8 <_exit@plt>
   12b24:	andeq	r7, r2, ip, ror r1
   12b28:	andeq	r7, r2, r4, lsl #4
   12b2c:	andeq	r7, r2, r8, ror r1
   12b30:	andeq	r6, r1, ip, lsl #21
   12b34:	muleq	r1, r8, sl
   12b38:	andeq	r7, r2, r4, lsr #2
   12b3c:	muleq	r1, ip, sl
   12b40:	push	{r4, r5, lr}
   12b44:	sub	sp, sp, #12
   12b48:	mov	r5, r0
   12b4c:	bl	11090 <__errno_location@plt>
   12b50:	mov	r4, r0
   12b54:	ldr	r3, [r0]
   12b58:	str	r3, [sp]
   12b5c:	str	r3, [sp, #4]
   12b60:	mov	r3, #0
   12b64:	str	r3, [r0]
   12b68:	mov	r0, r5
   12b6c:	bl	10ee0 <free@plt>
   12b70:	ldr	r3, [r4]
   12b74:	cmp	r3, #0
   12b78:	moveq	r3, #4
   12b7c:	movne	r3, #0
   12b80:	add	r2, sp, #8
   12b84:	add	r3, r2, r3
   12b88:	ldr	r3, [r3, #-8]
   12b8c:	str	r3, [r4]
   12b90:	add	sp, sp, #12
   12b94:	pop	{r4, r5, pc}
   12b98:	push	{lr}		; (str lr, [sp, #-4]!)
   12b9c:	sub	sp, sp, #268	; 0x10c
   12ba0:	ldr	r2, [pc, #68]	; 12bec <__assert_fail@plt+0x1a60>
   12ba4:	add	r1, sp, #4
   12ba8:	bl	149ac <__assert_fail@plt+0x3820>
   12bac:	cmp	r0, #0
   12bb0:	movne	r0, #0
   12bb4:	bne	12be4 <__assert_fail@plt+0x1a58>
   12bb8:	ldr	r1, [pc, #48]	; 12bf0 <__assert_fail@plt+0x1a64>
   12bbc:	add	r0, sp, #4
   12bc0:	bl	10ebc <strcmp@plt>
   12bc4:	cmp	r0, #0
   12bc8:	moveq	r0, #0
   12bcc:	beq	12be4 <__assert_fail@plt+0x1a58>
   12bd0:	ldr	r1, [pc, #28]	; 12bf4 <__assert_fail@plt+0x1a68>
   12bd4:	add	r0, sp, #4
   12bd8:	bl	10ebc <strcmp@plt>
   12bdc:	adds	r0, r0, #0
   12be0:	movne	r0, #1
   12be4:	add	sp, sp, #268	; 0x10c
   12be8:	pop	{pc}		; (ldr pc, [sp], #4)
   12bec:	andeq	r0, r0, r1, lsl #2
   12bf0:	andeq	r6, r1, r0, lsr #21
   12bf4:	andeq	r6, r1, r4, lsr #21
   12bf8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12bfc:	mov	r4, r0
   12c00:	mov	r5, r1
   12c04:	add	r6, r2, #20
   12c08:	mov	r3, #0
   12c0c:	strb	r3, [r2, #20]
   12c10:	cmp	r0, #0
   12c14:	sbcs	r3, r1, #0
   12c18:	movlt	r8, #10
   12c1c:	movlt	r9, #0
   12c20:	blt	12c78 <__assert_fail@plt+0x1aec>
   12c24:	mov	r8, #10
   12c28:	mov	r9, #0
   12c2c:	mov	r2, r8
   12c30:	mov	r3, r9
   12c34:	mov	r0, r4
   12c38:	mov	r1, r5
   12c3c:	bl	15ddc <__assert_fail@plt+0x4c50>
   12c40:	add	r2, r2, #48	; 0x30
   12c44:	strb	r2, [r6, #-1]!
   12c48:	mov	r2, r8
   12c4c:	mov	r3, r9
   12c50:	mov	r0, r4
   12c54:	mov	r1, r5
   12c58:	bl	15ddc <__assert_fail@plt+0x4c50>
   12c5c:	mov	r4, r0
   12c60:	mov	r5, r1
   12c64:	orrs	r3, r4, r5
   12c68:	bne	12c2c <__assert_fail@plt+0x1aa0>
   12c6c:	mov	r0, r6
   12c70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c74:	mov	r6, r7
   12c78:	sub	r7, r6, #1
   12c7c:	mov	r2, r8
   12c80:	mov	r3, r9
   12c84:	mov	r0, r4
   12c88:	mov	r1, r5
   12c8c:	bl	15ddc <__assert_fail@plt+0x4c50>
   12c90:	rsb	r2, r2, #48	; 0x30
   12c94:	strb	r2, [r6, #-1]
   12c98:	mov	r2, r8
   12c9c:	mov	r3, r9
   12ca0:	mov	r0, r4
   12ca4:	mov	r1, r5
   12ca8:	bl	15ddc <__assert_fail@plt+0x4c50>
   12cac:	mov	r4, r0
   12cb0:	mov	r5, r1
   12cb4:	orrs	r3, r4, r5
   12cb8:	bne	12c74 <__assert_fail@plt+0x1ae8>
   12cbc:	sub	r6, r6, #2
   12cc0:	mov	r3, #45	; 0x2d
   12cc4:	strb	r3, [r7, #-1]
   12cc8:	b	12c6c <__assert_fail@plt+0x1ae0>
   12ccc:	push	{r4, r5, r6, lr}
   12cd0:	subs	r4, r0, #0
   12cd4:	beq	12d4c <__assert_fail@plt+0x1bc0>
   12cd8:	mov	r1, #47	; 0x2f
   12cdc:	mov	r0, r4
   12ce0:	bl	11120 <strrchr@plt>
   12ce4:	cmp	r0, #0
   12ce8:	addne	r5, r0, #1
   12cec:	moveq	r5, r4
   12cf0:	sub	r3, r5, r4
   12cf4:	cmp	r3, #6
   12cf8:	ble	12d38 <__assert_fail@plt+0x1bac>
   12cfc:	mov	r2, #7
   12d00:	ldr	r1, [pc, #96]	; 12d68 <__assert_fail@plt+0x1bdc>
   12d04:	sub	r0, r5, #7
   12d08:	bl	11168 <strncmp@plt>
   12d0c:	cmp	r0, #0
   12d10:	bne	12d38 <__assert_fail@plt+0x1bac>
   12d14:	mov	r2, #3
   12d18:	ldr	r1, [pc, #76]	; 12d6c <__assert_fail@plt+0x1be0>
   12d1c:	mov	r0, r5
   12d20:	bl	11168 <strncmp@plt>
   12d24:	cmp	r0, #0
   12d28:	addeq	r4, r5, #3
   12d2c:	ldreq	r3, [pc, #60]	; 12d70 <__assert_fail@plt+0x1be4>
   12d30:	streq	r4, [r3]
   12d34:	movne	r4, r5
   12d38:	ldr	r3, [pc, #52]	; 12d74 <__assert_fail@plt+0x1be8>
   12d3c:	str	r4, [r3]
   12d40:	ldr	r3, [pc, #48]	; 12d78 <__assert_fail@plt+0x1bec>
   12d44:	str	r4, [r3]
   12d48:	pop	{r4, r5, r6, pc}
   12d4c:	ldr	r3, [pc, #40]	; 12d7c <__assert_fail@plt+0x1bf0>
   12d50:	ldr	r3, [r3]
   12d54:	mov	r2, #55	; 0x37
   12d58:	mov	r1, #1
   12d5c:	ldr	r0, [pc, #28]	; 12d80 <__assert_fail@plt+0x1bf4>
   12d60:	bl	10f94 <fwrite@plt>
   12d64:	bl	11174 <abort@plt>
   12d68:	andeq	r6, r1, r4, ror #21
   12d6c:	andeq	r6, r1, ip, ror #21
   12d70:	andeq	r7, r2, r8, ror #2
   12d74:	andeq	r7, r2, ip, lsl #4
   12d78:	andeq	r7, r2, ip, ror #2
   12d7c:	andeq	r7, r2, r8, ror r1
   12d80:	andeq	r6, r1, ip, lsr #21
   12d84:	push	{r4, r5, r6, lr}
   12d88:	mov	r5, r0
   12d8c:	mov	r4, r1
   12d90:	mov	r2, #48	; 0x30
   12d94:	mov	r1, #0
   12d98:	bl	110b4 <memset@plt>
   12d9c:	cmp	r4, #10
   12da0:	beq	12db0 <__assert_fail@plt+0x1c24>
   12da4:	str	r4, [r5]
   12da8:	mov	r0, r5
   12dac:	pop	{r4, r5, r6, pc}
   12db0:	bl	11174 <abort@plt>
   12db4:	push	{r4, r5, r6, lr}
   12db8:	mov	r4, r0
   12dbc:	mov	r5, r1
   12dc0:	mov	r2, #5
   12dc4:	mov	r1, r0
   12dc8:	mov	r0, #0
   12dcc:	bl	10f4c <dcgettext@plt>
   12dd0:	cmp	r4, r0
   12dd4:	popne	{r4, r5, r6, pc}
   12dd8:	bl	158b8 <__assert_fail@plt+0x472c>
   12ddc:	ldrb	r3, [r0]
   12de0:	bic	r3, r3, #32
   12de4:	cmp	r3, #85	; 0x55
   12de8:	beq	12e64 <__assert_fail@plt+0x1cd8>
   12dec:	cmp	r3, #71	; 0x47
   12df0:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12df4:	ldrb	r3, [r0, #1]
   12df8:	bic	r3, r3, #32
   12dfc:	cmp	r3, #66	; 0x42
   12e00:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e04:	ldrb	r3, [r0, #2]
   12e08:	cmp	r3, #49	; 0x31
   12e0c:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e10:	ldrb	r3, [r0, #3]
   12e14:	cmp	r3, #56	; 0x38
   12e18:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e1c:	ldrb	r3, [r0, #4]
   12e20:	cmp	r3, #48	; 0x30
   12e24:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e28:	ldrb	r3, [r0, #5]
   12e2c:	cmp	r3, #51	; 0x33
   12e30:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e34:	ldrb	r3, [r0, #6]
   12e38:	cmp	r3, #48	; 0x30
   12e3c:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e40:	ldrb	r3, [r0, #7]
   12e44:	cmp	r3, #0
   12e48:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e4c:	ldrb	r2, [r4]
   12e50:	ldr	r3, [pc, #124]	; 12ed4 <__assert_fail@plt+0x1d48>
   12e54:	ldr	r0, [pc, #124]	; 12ed8 <__assert_fail@plt+0x1d4c>
   12e58:	cmp	r2, #96	; 0x60
   12e5c:	movne	r0, r3
   12e60:	pop	{r4, r5, r6, pc}
   12e64:	ldrb	r3, [r0, #1]
   12e68:	bic	r3, r3, #32
   12e6c:	cmp	r3, #84	; 0x54
   12e70:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e74:	ldrb	r3, [r0, #2]
   12e78:	bic	r3, r3, #32
   12e7c:	cmp	r3, #70	; 0x46
   12e80:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e84:	ldrb	r3, [r0, #3]
   12e88:	cmp	r3, #45	; 0x2d
   12e8c:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e90:	ldrb	r3, [r0, #4]
   12e94:	cmp	r3, #56	; 0x38
   12e98:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12e9c:	ldrb	r3, [r0, #5]
   12ea0:	cmp	r3, #0
   12ea4:	bne	12ec0 <__assert_fail@plt+0x1d34>
   12ea8:	ldrb	r2, [r4]
   12eac:	ldr	r3, [pc, #40]	; 12edc <__assert_fail@plt+0x1d50>
   12eb0:	ldr	r0, [pc, #40]	; 12ee0 <__assert_fail@plt+0x1d54>
   12eb4:	cmp	r2, #96	; 0x60
   12eb8:	movne	r0, r3
   12ebc:	pop	{r4, r5, r6, pc}
   12ec0:	ldr	r3, [pc, #28]	; 12ee4 <__assert_fail@plt+0x1d58>
   12ec4:	ldr	r0, [pc, #28]	; 12ee8 <__assert_fail@plt+0x1d5c>
   12ec8:	cmp	r5, #9
   12ecc:	movne	r0, r3
   12ed0:	pop	{r4, r5, r6, pc}
   12ed4:	andeq	r6, r1, r8, asr #22
   12ed8:	andeq	r6, r1, r4, asr fp
   12edc:	andeq	r6, r1, r4, asr #22
   12ee0:	andeq	r6, r1, r8, asr fp
   12ee4:	andeq	r6, r1, ip, asr #22
   12ee8:	andeq	r6, r1, r0, asr fp
   12eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ef0:	sub	sp, sp, #116	; 0x74
   12ef4:	str	r0, [sp, #36]	; 0x24
   12ef8:	mov	sl, r1
   12efc:	str	r2, [sp, #52]	; 0x34
   12f00:	str	r3, [sp, #28]
   12f04:	ldr	r8, [sp, #152]	; 0x98
   12f08:	bl	10fac <__ctype_get_mb_cur_max@plt>
   12f0c:	str	r0, [sp, #84]	; 0x54
   12f10:	ldr	r3, [sp, #156]	; 0x9c
   12f14:	lsr	r3, r3, #1
   12f18:	and	r3, r3, #1
   12f1c:	str	r3, [sp, #32]
   12f20:	mov	r3, #1
   12f24:	str	r3, [sp, #40]	; 0x28
   12f28:	mov	r3, #0
   12f2c:	str	r3, [sp, #80]	; 0x50
   12f30:	str	r3, [sp, #44]	; 0x2c
   12f34:	str	r3, [sp, #48]	; 0x30
   12f38:	str	r3, [sp, #60]	; 0x3c
   12f3c:	str	r3, [sp, #72]	; 0x48
   12f40:	str	r3, [sp, #76]	; 0x4c
   12f44:	mov	r7, sl
   12f48:	mov	sl, r8
   12f4c:	cmp	sl, #10
   12f50:	ldrls	pc, [pc, sl, lsl #2]
   12f54:	b	1310c <__assert_fail@plt+0x1f80>
   12f58:			; <UNDEFINED> instruction: 0x00012fbc
   12f5c:	andeq	r2, r1, ip, lsl #31
   12f60:	andeq	r3, r1, r8, ror #1
   12f64:	andeq	r2, r1, r4, lsl #31
   12f68:	muleq	r1, ip, r0
   12f6c:	andeq	r2, r1, ip, asr #31
   12f70:	andeq	r4, r1, r8, lsr r0
   12f74:	andeq	r3, r1, r0, lsl r1
   12f78:	andeq	r3, r1, r8
   12f7c:	andeq	r3, r1, r8
   12f80:	andeq	r3, r1, r8
   12f84:	mov	r3, #1
   12f88:	str	r3, [sp, #48]	; 0x30
   12f8c:	mov	r3, #1
   12f90:	str	r3, [sp, #32]
   12f94:	str	r3, [sp, #60]	; 0x3c
   12f98:	ldr	r3, [pc, #4068]	; 13f84 <__assert_fail@plt+0x2df8>
   12f9c:	str	r3, [sp, #72]	; 0x48
   12fa0:	mov	fp, #0
   12fa4:	mov	sl, #2
   12fa8:	mov	r6, #0
   12fac:	ldr	r3, [sp, #48]	; 0x30
   12fb0:	eor	r3, r3, #1
   12fb4:	str	r3, [sp, #68]	; 0x44
   12fb8:	b	138a0 <__assert_fail@plt+0x2714>
   12fbc:	mov	r3, #0
   12fc0:	str	r3, [sp, #32]
   12fc4:	mov	fp, r3
   12fc8:	b	12fa8 <__assert_fail@plt+0x1e1c>
   12fcc:	ldr	r3, [sp, #32]
   12fd0:	cmp	r3, #0
   12fd4:	bne	13128 <__assert_fail@plt+0x1f9c>
   12fd8:	cmp	r7, #0
   12fdc:	beq	13148 <__assert_fail@plt+0x1fbc>
   12fe0:	ldr	r3, [sp, #36]	; 0x24
   12fe4:	mov	r2, #34	; 0x22
   12fe8:	strb	r2, [r3]
   12fec:	mov	r3, #1
   12ff0:	str	r3, [sp, #48]	; 0x30
   12ff4:	str	r3, [sp, #60]	; 0x3c
   12ff8:	ldr	r3, [pc, #3980]	; 13f8c <__assert_fail@plt+0x2e00>
   12ffc:	str	r3, [sp, #72]	; 0x48
   13000:	mov	fp, #1
   13004:	b	12fa8 <__assert_fail@plt+0x1e1c>
   13008:	cmp	sl, #10
   1300c:	beq	13030 <__assert_fail@plt+0x1ea4>
   13010:	mov	r1, sl
   13014:	ldr	r0, [pc, #3948]	; 13f88 <__assert_fail@plt+0x2dfc>
   13018:	bl	12db4 <__assert_fail@plt+0x1c28>
   1301c:	str	r0, [sp, #164]	; 0xa4
   13020:	mov	r1, sl
   13024:	ldr	r0, [pc, #3928]	; 13f84 <__assert_fail@plt+0x2df8>
   13028:	bl	12db4 <__assert_fail@plt+0x1c28>
   1302c:	str	r0, [sp, #168]	; 0xa8
   13030:	ldr	r3, [sp, #32]
   13034:	cmp	r3, #0
   13038:	movne	fp, #0
   1303c:	bne	13074 <__assert_fail@plt+0x1ee8>
   13040:	ldr	r3, [sp, #164]	; 0xa4
   13044:	ldrb	r3, [r3]
   13048:	cmp	r3, #0
   1304c:	beq	13094 <__assert_fail@plt+0x1f08>
   13050:	ldr	r2, [sp, #164]	; 0xa4
   13054:	mov	fp, #0
   13058:	ldr	r1, [sp, #36]	; 0x24
   1305c:	cmp	r7, fp
   13060:	strbhi	r3, [r1, fp]
   13064:	add	fp, fp, #1
   13068:	ldrb	r3, [r2, #1]!
   1306c:	cmp	r3, #0
   13070:	bne	1305c <__assert_fail@plt+0x1ed0>
   13074:	ldr	r0, [sp, #168]	; 0xa8
   13078:	bl	11078 <strlen@plt>
   1307c:	str	r0, [sp, #60]	; 0x3c
   13080:	ldr	r3, [sp, #168]	; 0xa8
   13084:	str	r3, [sp, #72]	; 0x48
   13088:	mov	r3, #1
   1308c:	str	r3, [sp, #48]	; 0x30
   13090:	b	12fa8 <__assert_fail@plt+0x1e1c>
   13094:	mov	fp, #0
   13098:	b	13074 <__assert_fail@plt+0x1ee8>
   1309c:	ldr	r3, [sp, #32]
   130a0:	cmp	r3, #0
   130a4:	bne	13164 <__assert_fail@plt+0x1fd8>
   130a8:	mov	r3, #1
   130ac:	str	r3, [sp, #48]	; 0x30
   130b0:	cmp	r7, #0
   130b4:	beq	13180 <__assert_fail@plt+0x1ff4>
   130b8:	ldr	r3, [sp, #36]	; 0x24
   130bc:	mov	r2, #39	; 0x27
   130c0:	strb	r2, [r3]
   130c4:	mov	r3, #0
   130c8:	str	r3, [sp, #32]
   130cc:	mov	r3, #1
   130d0:	str	r3, [sp, #60]	; 0x3c
   130d4:	ldr	r3, [pc, #3752]	; 13f84 <__assert_fail@plt+0x2df8>
   130d8:	str	r3, [sp, #72]	; 0x48
   130dc:	mov	fp, #1
   130e0:	mov	sl, #2
   130e4:	b	12fa8 <__assert_fail@plt+0x1e1c>
   130e8:	ldr	r3, [sp, #32]
   130ec:	cmp	r3, #0
   130f0:	beq	130b0 <__assert_fail@plt+0x1f24>
   130f4:	mov	r3, #1
   130f8:	str	r3, [sp, #60]	; 0x3c
   130fc:	ldr	r3, [pc, #3712]	; 13f84 <__assert_fail@plt+0x2df8>
   13100:	str	r3, [sp, #72]	; 0x48
   13104:	mov	fp, #0
   13108:	b	12fa8 <__assert_fail@plt+0x1e1c>
   1310c:	bl	11174 <abort@plt>
   13110:	mov	r3, #0
   13114:	str	r3, [sp, #32]
   13118:	mov	r3, #1
   1311c:	str	r3, [sp, #48]	; 0x30
   13120:	mov	fp, #0
   13124:	b	12fa8 <__assert_fail@plt+0x1e1c>
   13128:	ldr	r3, [sp, #32]
   1312c:	str	r3, [sp, #48]	; 0x30
   13130:	mov	r3, #1
   13134:	str	r3, [sp, #60]	; 0x3c
   13138:	ldr	r3, [pc, #3660]	; 13f8c <__assert_fail@plt+0x2e00>
   1313c:	str	r3, [sp, #72]	; 0x48
   13140:	mov	fp, #0
   13144:	b	12fa8 <__assert_fail@plt+0x1e1c>
   13148:	mov	r3, #1
   1314c:	str	r3, [sp, #48]	; 0x30
   13150:	str	r3, [sp, #60]	; 0x3c
   13154:	ldr	r3, [pc, #3632]	; 13f8c <__assert_fail@plt+0x2e00>
   13158:	str	r3, [sp, #72]	; 0x48
   1315c:	mov	fp, #1
   13160:	b	12fa8 <__assert_fail@plt+0x1e1c>
   13164:	mov	r3, #1
   13168:	str	r3, [sp, #60]	; 0x3c
   1316c:	ldr	r3, [pc, #3600]	; 13f84 <__assert_fail@plt+0x2df8>
   13170:	str	r3, [sp, #72]	; 0x48
   13174:	mov	fp, #0
   13178:	mov	sl, #2
   1317c:	b	12fa8 <__assert_fail@plt+0x1e1c>
   13180:	mov	r3, #0
   13184:	str	r3, [sp, #32]
   13188:	mov	r3, #1
   1318c:	str	r3, [sp, #60]	; 0x3c
   13190:	ldr	r3, [pc, #3564]	; 13f84 <__assert_fail@plt+0x2df8>
   13194:	str	r3, [sp, #72]	; 0x48
   13198:	mov	fp, #1
   1319c:	mov	sl, #2
   131a0:	b	12fa8 <__assert_fail@plt+0x1e1c>
   131a4:	mov	r3, #0
   131a8:	str	r3, [sp, #56]	; 0x38
   131ac:	ldr	r3, [sp, #52]	; 0x34
   131b0:	add	r2, r3, r6
   131b4:	str	r2, [sp, #64]	; 0x40
   131b8:	ldrb	r4, [r3, r6]
   131bc:	cmp	r4, #126	; 0x7e
   131c0:	ldrls	pc, [pc, r4, lsl #2]
   131c4:	b	13a00 <__assert_fail@plt+0x2874>
   131c8:	andeq	r3, r1, r0, ror #7
   131cc:	andeq	r3, r1, r0, lsl #20
   131d0:	andeq	r3, r1, r0, lsl #20
   131d4:	andeq	r3, r1, r0, lsl #20
   131d8:	andeq	r3, r1, r0, lsl #20
   131dc:	andeq	r3, r1, r0, lsl #20
   131e0:	andeq	r3, r1, r0, lsl #20
   131e4:	andeq	r3, r1, ip, lsr r7
   131e8:	ldrdeq	r3, [r1], -r8
   131ec:	strdeq	r3, [r1], -r4
   131f0:	andeq	r3, r1, ip, ror #13
   131f4:	andeq	r3, r1, ip, asr r6
   131f8:	andeq	r3, r1, r4, asr r6
   131fc:	ldrdeq	r3, [r1], -r0
   13200:	andeq	r3, r1, r0, lsl #20
   13204:	andeq	r3, r1, r0, lsl #20
   13208:	andeq	r3, r1, r0, lsl #20
   1320c:	andeq	r3, r1, r0, lsl #20
   13210:	andeq	r3, r1, r0, lsl #20
   13214:	andeq	r3, r1, r0, lsl #20
   13218:	andeq	r3, r1, r0, lsl #20
   1321c:	andeq	r3, r1, r0, lsl #20
   13220:	andeq	r3, r1, r0, lsl #20
   13224:	andeq	r3, r1, r0, lsl #20
   13228:	andeq	r3, r1, r0, lsl #20
   1322c:	andeq	r3, r1, r0, lsl #20
   13230:	andeq	r3, r1, r0, lsl #20
   13234:	andeq	r3, r1, r0, lsl #20
   13238:	andeq	r3, r1, r0, lsl #20
   1323c:	andeq	r3, r1, r0, lsl #20
   13240:	andeq	r3, r1, r0, lsl #20
   13244:	andeq	r3, r1, r0, lsl #20
   13248:	muleq	r1, r0, r7
   1324c:	andeq	r3, r1, ip, lsl #15
   13250:	andeq	r3, r1, ip, lsl #15
   13254:	andeq	r3, r1, r4, ror #14
   13258:	andeq	r3, r1, ip, lsl #15
   1325c:	ldrdeq	r3, [r1], -r4
   13260:	andeq	r3, r1, ip, lsl #15
   13264:	andeq	r3, r1, r4, ror #18
   13268:	andeq	r3, r1, ip, lsl #15
   1326c:	andeq	r3, r1, ip, lsl #15
   13270:	andeq	r3, r1, ip, lsl #15
   13274:	ldrdeq	r3, [r1], -r4
   13278:	ldrdeq	r3, [r1], -r4
   1327c:	ldrdeq	r3, [r1], -r4
   13280:	ldrdeq	r3, [r1], -r4
   13284:	ldrdeq	r3, [r1], -r4
   13288:	ldrdeq	r3, [r1], -r4
   1328c:	ldrdeq	r3, [r1], -r4
   13290:	ldrdeq	r3, [r1], -r4
   13294:	ldrdeq	r3, [r1], -r4
   13298:	ldrdeq	r3, [r1], -r4
   1329c:	ldrdeq	r3, [r1], -r4
   132a0:	ldrdeq	r3, [r1], -r4
   132a4:	ldrdeq	r3, [r1], -r4
   132a8:	ldrdeq	r3, [r1], -r4
   132ac:	ldrdeq	r3, [r1], -r4
   132b0:	ldrdeq	r3, [r1], -r4
   132b4:	andeq	r3, r1, ip, lsl #15
   132b8:	andeq	r3, r1, ip, lsl #15
   132bc:	andeq	r3, r1, ip, lsl #15
   132c0:	andeq	r3, r1, ip, lsl #15
   132c4:	andeq	r3, r1, r8, ror #9
   132c8:	andeq	r3, r1, r0, lsl #20
   132cc:	ldrdeq	r3, [r1], -r4
   132d0:	ldrdeq	r3, [r1], -r4
   132d4:	ldrdeq	r3, [r1], -r4
   132d8:	ldrdeq	r3, [r1], -r4
   132dc:	ldrdeq	r3, [r1], -r4
   132e0:	ldrdeq	r3, [r1], -r4
   132e4:	ldrdeq	r3, [r1], -r4
   132e8:	ldrdeq	r3, [r1], -r4
   132ec:	ldrdeq	r3, [r1], -r4
   132f0:	ldrdeq	r3, [r1], -r4
   132f4:	ldrdeq	r3, [r1], -r4
   132f8:	ldrdeq	r3, [r1], -r4
   132fc:	ldrdeq	r3, [r1], -r4
   13300:	ldrdeq	r3, [r1], -r4
   13304:	ldrdeq	r3, [r1], -r4
   13308:	ldrdeq	r3, [r1], -r4
   1330c:	ldrdeq	r3, [r1], -r4
   13310:	ldrdeq	r3, [r1], -r4
   13314:	ldrdeq	r3, [r1], -r4
   13318:	ldrdeq	r3, [r1], -r4
   1331c:	ldrdeq	r3, [r1], -r4
   13320:	ldrdeq	r3, [r1], -r4
   13324:	ldrdeq	r3, [r1], -r4
   13328:	ldrdeq	r3, [r1], -r4
   1332c:	ldrdeq	r3, [r1], -r4
   13330:	ldrdeq	r3, [r1], -r4
   13334:	andeq	r3, r1, ip, lsl #15
   13338:	andeq	r3, r1, r4, ror #12
   1333c:	ldrdeq	r3, [r1], -r4
   13340:	andeq	r3, r1, ip, lsl #15
   13344:	ldrdeq	r3, [r1], -r4
   13348:	andeq	r3, r1, ip, lsl #15
   1334c:	ldrdeq	r3, [r1], -r4
   13350:	ldrdeq	r3, [r1], -r4
   13354:	ldrdeq	r3, [r1], -r4
   13358:	ldrdeq	r3, [r1], -r4
   1335c:	ldrdeq	r3, [r1], -r4
   13360:	ldrdeq	r3, [r1], -r4
   13364:	ldrdeq	r3, [r1], -r4
   13368:	ldrdeq	r3, [r1], -r4
   1336c:	ldrdeq	r3, [r1], -r4
   13370:	ldrdeq	r3, [r1], -r4
   13374:	ldrdeq	r3, [r1], -r4
   13378:	ldrdeq	r3, [r1], -r4
   1337c:	ldrdeq	r3, [r1], -r4
   13380:	ldrdeq	r3, [r1], -r4
   13384:	ldrdeq	r3, [r1], -r4
   13388:	ldrdeq	r3, [r1], -r4
   1338c:	ldrdeq	r3, [r1], -r4
   13390:	ldrdeq	r3, [r1], -r4
   13394:	ldrdeq	r3, [r1], -r4
   13398:	ldrdeq	r3, [r1], -r4
   1339c:	ldrdeq	r3, [r1], -r4
   133a0:	ldrdeq	r3, [r1], -r4
   133a4:	ldrdeq	r3, [r1], -r4
   133a8:	ldrdeq	r3, [r1], -r4
   133ac:	ldrdeq	r3, [r1], -r4
   133b0:	ldrdeq	r3, [r1], -r4
   133b4:	andeq	r3, r1, r4, asr #14
   133b8:	andeq	r3, r1, ip, lsl #15
   133bc:	andeq	r3, r1, r4, asr #14
   133c0:	andeq	r3, r1, r4, ror #14
   133c4:	mov	r3, #0
   133c8:	str	r3, [sp, #56]	; 0x38
   133cc:	b	131ac <__assert_fail@plt+0x2020>
   133d0:	mov	r3, #114	; 0x72
   133d4:	b	136f8 <__assert_fail@plt+0x256c>
   133d8:	mov	r3, #98	; 0x62
   133dc:	b	13710 <__assert_fail@plt+0x2584>
   133e0:	ldr	r3, [sp, #48]	; 0x30
   133e4:	cmp	r3, #0
   133e8:	beq	134d0 <__assert_fail@plt+0x2344>
   133ec:	ldr	r3, [sp, #32]
   133f0:	cmp	r3, #0
   133f4:	bne	13f58 <__assert_fail@plt+0x2dcc>
   133f8:	ldr	r3, [sp, #44]	; 0x2c
   133fc:	eor	r3, r3, #1
   13400:	cmp	sl, #2
   13404:	movne	r3, #0
   13408:	andeq	r3, r3, #1
   1340c:	cmp	r3, #0
   13410:	moveq	r2, fp
   13414:	beq	13458 <__assert_fail@plt+0x22cc>
   13418:	cmp	r7, fp
   1341c:	ldrhi	r2, [sp, #36]	; 0x24
   13420:	movhi	r1, #39	; 0x27
   13424:	strbhi	r1, [r2, fp]
   13428:	add	r2, fp, #1
   1342c:	cmp	r7, r2
   13430:	ldrhi	r1, [sp, #36]	; 0x24
   13434:	movhi	r0, #36	; 0x24
   13438:	strbhi	r0, [r1, r2]
   1343c:	add	r2, fp, #2
   13440:	cmp	r7, r2
   13444:	ldrhi	r1, [sp, #36]	; 0x24
   13448:	movhi	r0, #39	; 0x27
   1344c:	strbhi	r0, [r1, r2]
   13450:	add	r2, fp, #3
   13454:	str	r3, [sp, #44]	; 0x2c
   13458:	cmp	r7, r2
   1345c:	ldrhi	r3, [sp, #36]	; 0x24
   13460:	movhi	r1, #92	; 0x5c
   13464:	strbhi	r1, [r3, r2]
   13468:	add	fp, r2, #1
   1346c:	cmp	r5, #0
   13470:	beq	13ddc <__assert_fail@plt+0x2c50>
   13474:	add	r3, r6, #1
   13478:	ldr	r1, [sp, #28]
   1347c:	cmp	r1, r3
   13480:	bls	13dec <__assert_fail@plt+0x2c60>
   13484:	ldr	r1, [sp, #52]	; 0x34
   13488:	ldrb	r3, [r1, r3]
   1348c:	sub	r3, r3, #48	; 0x30
   13490:	uxtb	r3, r3
   13494:	cmp	r3, #9
   13498:	bhi	13df8 <__assert_fail@plt+0x2c6c>
   1349c:	cmp	r7, fp
   134a0:	movhi	r3, #48	; 0x30
   134a4:	ldrhi	r1, [sp, #36]	; 0x24
   134a8:	strbhi	r3, [r1, fp]
   134ac:	add	r3, r2, #2
   134b0:	cmp	r7, r3
   134b4:	movhi	r1, #48	; 0x30
   134b8:	ldrhi	r0, [sp, #36]	; 0x24
   134bc:	strbhi	r1, [r0, r3]
   134c0:	add	fp, r2, #3
   134c4:	ldr	r8, [sp, #32]
   134c8:	mov	r4, #48	; 0x30
   134cc:	b	137a8 <__assert_fail@plt+0x261c>
   134d0:	ldr	r3, [sp, #156]	; 0x9c
   134d4:	tst	r3, #1
   134d8:	bne	1389c <__assert_fail@plt+0x2710>
   134dc:	ldr	r5, [sp, #48]	; 0x30
   134e0:	mov	r8, r5
   134e4:	b	137a8 <__assert_fail@plt+0x261c>
   134e8:	cmp	sl, #2
   134ec:	beq	13504 <__assert_fail@plt+0x2378>
   134f0:	cmp	sl, #5
   134f4:	beq	1351c <__assert_fail@plt+0x2390>
   134f8:	mov	r8, #0
   134fc:	mov	r5, r8
   13500:	b	137a8 <__assert_fail@plt+0x261c>
   13504:	ldr	r3, [sp, #32]
   13508:	cmp	r3, #0
   1350c:	bne	13f6c <__assert_fail@plt+0x2de0>
   13510:	mov	r8, r3
   13514:	mov	r5, r3
   13518:	b	137a8 <__assert_fail@plt+0x261c>
   1351c:	ldr	r3, [sp, #156]	; 0x9c
   13520:	tst	r3, #4
   13524:	beq	13e04 <__assert_fail@plt+0x2c78>
   13528:	add	r3, r6, #2
   1352c:	ldr	r2, [sp, #28]
   13530:	cmp	r2, r3
   13534:	bls	13e10 <__assert_fail@plt+0x2c84>
   13538:	ldr	r2, [sp, #52]	; 0x34
   1353c:	add	r2, r2, r6
   13540:	ldrb	r2, [r2, #1]
   13544:	cmp	r2, #63	; 0x3f
   13548:	movne	r8, #0
   1354c:	movne	r5, r8
   13550:	bne	137a8 <__assert_fail@plt+0x261c>
   13554:	ldr	r2, [sp, #52]	; 0x34
   13558:	ldrb	r2, [r2, r3]
   1355c:	sub	r1, r2, #33	; 0x21
   13560:	cmp	r1, #29
   13564:	ldrls	pc, [pc, r1, lsl #2]
   13568:	b	13e1c <__assert_fail@plt+0x2c90>
   1356c:	andeq	r3, r1, r4, ror #11
   13570:	andeq	r3, r1, ip, lsl lr
   13574:	andeq	r3, r1, ip, lsl lr
   13578:	andeq	r3, r1, ip, lsl lr
   1357c:	andeq	r3, r1, ip, lsl lr
   13580:	andeq	r3, r1, ip, lsl lr
   13584:	andeq	r3, r1, r4, ror #11
   13588:	andeq	r3, r1, r4, ror #11
   1358c:	andeq	r3, r1, r4, ror #11
   13590:	andeq	r3, r1, ip, lsl lr
   13594:	andeq	r3, r1, ip, lsl lr
   13598:	andeq	r3, r1, ip, lsl lr
   1359c:	andeq	r3, r1, r4, ror #11
   135a0:	andeq	r3, r1, ip, lsl lr
   135a4:	andeq	r3, r1, r4, ror #11
   135a8:	andeq	r3, r1, ip, lsl lr
   135ac:	andeq	r3, r1, ip, lsl lr
   135b0:	andeq	r3, r1, ip, lsl lr
   135b4:	andeq	r3, r1, ip, lsl lr
   135b8:	andeq	r3, r1, ip, lsl lr
   135bc:	andeq	r3, r1, ip, lsl lr
   135c0:	andeq	r3, r1, ip, lsl lr
   135c4:	andeq	r3, r1, ip, lsl lr
   135c8:	andeq	r3, r1, ip, lsl lr
   135cc:	andeq	r3, r1, ip, lsl lr
   135d0:	andeq	r3, r1, ip, lsl lr
   135d4:	andeq	r3, r1, ip, lsl lr
   135d8:	andeq	r3, r1, r4, ror #11
   135dc:	andeq	r3, r1, r4, ror #11
   135e0:	andeq	r3, r1, r4, ror #11
   135e4:	ldr	r1, [sp, #32]
   135e8:	cmp	r1, #0
   135ec:	bne	1402c <__assert_fail@plt+0x2ea0>
   135f0:	cmp	r7, fp
   135f4:	movhi	r1, #63	; 0x3f
   135f8:	ldrhi	r0, [sp, #36]	; 0x24
   135fc:	strbhi	r1, [r0, fp]
   13600:	add	r1, fp, #1
   13604:	cmp	r7, r1
   13608:	ldrhi	r0, [sp, #36]	; 0x24
   1360c:	movhi	ip, #34	; 0x22
   13610:	strbhi	ip, [r0, r1]
   13614:	add	r1, fp, #2
   13618:	cmp	r7, r1
   1361c:	ldrhi	r0, [sp, #36]	; 0x24
   13620:	movhi	ip, #34	; 0x22
   13624:	strbhi	ip, [r0, r1]
   13628:	add	r1, fp, #3
   1362c:	cmp	r7, r1
   13630:	movhi	r0, #63	; 0x3f
   13634:	ldrhi	ip, [sp, #36]	; 0x24
   13638:	strbhi	r0, [ip, r1]
   1363c:	add	fp, fp, #4
   13640:	ldr	r5, [sp, #32]
   13644:	mov	r8, r5
   13648:	mov	r4, r2
   1364c:	mov	r6, r3
   13650:	b	137a8 <__assert_fail@plt+0x261c>
   13654:	mov	r3, #102	; 0x66
   13658:	b	13710 <__assert_fail@plt+0x2584>
   1365c:	mov	r3, #118	; 0x76
   13660:	b	13710 <__assert_fail@plt+0x2584>
   13664:	cmp	sl, #2
   13668:	beq	136d4 <__assert_fail@plt+0x2548>
   1366c:	ldr	r3, [sp, #48]	; 0x30
   13670:	ldr	r2, [sp, #32]
   13674:	and	r3, r3, r2
   13678:	tst	r9, r3
   1367c:	moveq	r3, r4
   13680:	beq	13710 <__assert_fail@plt+0x2584>
   13684:	mov	r8, #0
   13688:	mov	r5, r8
   1368c:	eor	r5, r5, #1
   13690:	ldr	r3, [sp, #44]	; 0x2c
   13694:	and	r5, r5, r3
   13698:	tst	r5, #255	; 0xff
   1369c:	beq	1387c <__assert_fail@plt+0x26f0>
   136a0:	cmp	r7, fp
   136a4:	ldrhi	r3, [sp, #36]	; 0x24
   136a8:	movhi	r2, #39	; 0x27
   136ac:	strbhi	r2, [r3, fp]
   136b0:	add	r3, fp, #1
   136b4:	cmp	r7, r3
   136b8:	ldrhi	r2, [sp, #36]	; 0x24
   136bc:	movhi	r1, #39	; 0x27
   136c0:	strbhi	r1, [r2, r3]
   136c4:	add	fp, fp, #2
   136c8:	mov	r3, #0
   136cc:	str	r3, [sp, #44]	; 0x2c
   136d0:	b	1387c <__assert_fail@plt+0x26f0>
   136d4:	ldr	r3, [sp, #32]
   136d8:	cmp	r3, #0
   136dc:	bne	13f78 <__assert_fail@plt+0x2dec>
   136e0:	mov	r8, r3
   136e4:	mov	r5, r3
   136e8:	b	1368c <__assert_fail@plt+0x2500>
   136ec:	mov	r3, #110	; 0x6e
   136f0:	b	136f8 <__assert_fail@plt+0x256c>
   136f4:	mov	r3, #116	; 0x74
   136f8:	ldr	r2, [sp, #32]
   136fc:	cmp	sl, #2
   13700:	movne	r2, #0
   13704:	andeq	r2, r2, #1
   13708:	cmp	r2, #0
   1370c:	bne	13730 <__assert_fail@plt+0x25a4>
   13710:	ldr	r2, [sp, #48]	; 0x30
   13714:	cmp	r2, #0
   13718:	moveq	r8, r2
   1371c:	moveq	r5, r2
   13720:	beq	137a8 <__assert_fail@plt+0x261c>
   13724:	mov	r4, r3
   13728:	mov	r8, #0
   1372c:	b	13800 <__assert_fail@plt+0x2674>
   13730:	mov	r8, sl
   13734:	mov	sl, r7
   13738:	b	13fa4 <__assert_fail@plt+0x2e18>
   1373c:	mov	r3, #97	; 0x61
   13740:	b	13710 <__assert_fail@plt+0x2584>
   13744:	ldr	r3, [sp, #28]
   13748:	cmn	r3, #1
   1374c:	beq	13778 <__assert_fail@plt+0x25ec>
   13750:	ldr	r3, [sp, #28]
   13754:	subs	r3, r3, #1
   13758:	movne	r3, #1
   1375c:	cmp	r3, #0
   13760:	bne	13e28 <__assert_fail@plt+0x2c9c>
   13764:	cmp	r6, #0
   13768:	beq	13790 <__assert_fail@plt+0x2604>
   1376c:	mov	r8, #0
   13770:	mov	r5, r8
   13774:	b	137a8 <__assert_fail@plt+0x261c>
   13778:	ldr	r3, [sp, #52]	; 0x34
   1377c:	ldrb	r3, [r3, #1]
   13780:	adds	r3, r3, #0
   13784:	movne	r3, #1
   13788:	b	1375c <__assert_fail@plt+0x25d0>
   1378c:	mov	r8, #0
   13790:	ldr	r5, [sp, #32]
   13794:	cmp	sl, #2
   13798:	movne	r5, #0
   1379c:	andeq	r5, r5, #1
   137a0:	cmp	r5, #0
   137a4:	bne	13958 <__assert_fail@plt+0x27cc>
   137a8:	ldr	r3, [sp, #68]	; 0x44
   137ac:	cmp	sl, #2
   137b0:	orreq	r3, r3, #1
   137b4:	eor	r3, r3, #1
   137b8:	ldr	r2, [sp, #32]
   137bc:	orr	r3, r2, r3
   137c0:	tst	r3, #255	; 0xff
   137c4:	beq	137f4 <__assert_fail@plt+0x2668>
   137c8:	ldr	r3, [sp, #160]	; 0xa0
   137cc:	cmp	r3, #0
   137d0:	beq	137f4 <__assert_fail@plt+0x2668>
   137d4:	lsr	r2, r4, #5
   137d8:	uxtb	r2, r2
   137dc:	and	r3, r4, #31
   137e0:	ldr	r1, [sp, #160]	; 0xa0
   137e4:	ldr	r2, [r1, r2, lsl #2]
   137e8:	lsr	r3, r2, r3
   137ec:	tst	r3, #1
   137f0:	bne	13800 <__assert_fail@plt+0x2674>
   137f4:	ldr	r3, [sp, #56]	; 0x38
   137f8:	cmp	r3, #0
   137fc:	beq	1368c <__assert_fail@plt+0x2500>
   13800:	ldr	r3, [sp, #32]
   13804:	cmp	r3, #0
   13808:	bne	14014 <__assert_fail@plt+0x2e88>
   1380c:	ldr	r3, [sp, #44]	; 0x2c
   13810:	eor	r3, r3, #1
   13814:	cmp	sl, #2
   13818:	movne	r3, #0
   1381c:	andeq	r3, r3, #1
   13820:	cmp	r3, #0
   13824:	beq	13868 <__assert_fail@plt+0x26dc>
   13828:	cmp	r7, fp
   1382c:	ldrhi	r2, [sp, #36]	; 0x24
   13830:	movhi	r1, #39	; 0x27
   13834:	strbhi	r1, [r2, fp]
   13838:	add	r2, fp, #1
   1383c:	cmp	r7, r2
   13840:	ldrhi	r1, [sp, #36]	; 0x24
   13844:	movhi	r0, #36	; 0x24
   13848:	strbhi	r0, [r1, r2]
   1384c:	add	r2, fp, #2
   13850:	cmp	r7, r2
   13854:	ldrhi	r1, [sp, #36]	; 0x24
   13858:	movhi	r0, #39	; 0x27
   1385c:	strbhi	r0, [r1, r2]
   13860:	add	fp, fp, #3
   13864:	str	r3, [sp, #44]	; 0x2c
   13868:	cmp	r7, fp
   1386c:	ldrhi	r3, [sp, #36]	; 0x24
   13870:	movhi	r2, #92	; 0x5c
   13874:	strbhi	r2, [r3, fp]
   13878:	add	fp, fp, #1
   1387c:	cmp	fp, r7
   13880:	ldrcc	r3, [sp, #36]	; 0x24
   13884:	strbcc	r4, [r3, fp]
   13888:	add	fp, fp, #1
   1388c:	ldr	r3, [sp, #40]	; 0x28
   13890:	cmp	r8, #0
   13894:	moveq	r3, #0
   13898:	str	r3, [sp, #40]	; 0x28
   1389c:	add	r6, r6, #1
   138a0:	ldr	r3, [sp, #28]
   138a4:	cmn	r3, #1
   138a8:	beq	13e34 <__assert_fail@plt+0x2ca8>
   138ac:	ldr	r3, [sp, #28]
   138b0:	subs	r8, r3, r6
   138b4:	movne	r8, #1
   138b8:	cmp	r8, #0
   138bc:	beq	13e48 <__assert_fail@plt+0x2cbc>
   138c0:	ldr	r5, [sp, #48]	; 0x30
   138c4:	cmp	sl, #2
   138c8:	moveq	r5, #0
   138cc:	andne	r5, r5, #1
   138d0:	ldr	r3, [sp, #60]	; 0x3c
   138d4:	adds	r9, r3, #0
   138d8:	movne	r9, #1
   138dc:	ands	r2, r5, r9
   138e0:	str	r2, [sp, #56]	; 0x38
   138e4:	beq	131ac <__assert_fail@plt+0x2020>
   138e8:	add	r4, r6, r3
   138ec:	ldr	r2, [sp, #28]
   138f0:	cmp	r3, #1
   138f4:	movls	r3, #0
   138f8:	movhi	r3, #1
   138fc:	cmn	r2, #1
   13900:	movne	r3, #0
   13904:	cmp	r3, #0
   13908:	beq	13918 <__assert_fail@plt+0x278c>
   1390c:	ldr	r0, [sp, #52]	; 0x34
   13910:	bl	11078 <strlen@plt>
   13914:	str	r0, [sp, #28]
   13918:	ldr	r3, [sp, #28]
   1391c:	cmp	r3, r4
   13920:	bcc	131a4 <__assert_fail@plt+0x2018>
   13924:	ldr	r2, [sp, #60]	; 0x3c
   13928:	ldr	r1, [sp, #72]	; 0x48
   1392c:	ldr	r3, [sp, #52]	; 0x34
   13930:	add	r0, r3, r6
   13934:	bl	10f28 <memcmp@plt>
   13938:	cmp	r0, #0
   1393c:	bne	133c4 <__assert_fail@plt+0x2238>
   13940:	ldr	r3, [sp, #32]
   13944:	cmp	r3, #0
   13948:	beq	131ac <__assert_fail@plt+0x2020>
   1394c:	mov	r8, sl
   13950:	mov	sl, r7
   13954:	b	13fa4 <__assert_fail@plt+0x2e18>
   13958:	mov	r8, sl
   1395c:	mov	sl, r7
   13960:	b	13fa4 <__assert_fail@plt+0x2e18>
   13964:	cmp	sl, #2
   13968:	strne	r8, [sp, #80]	; 0x50
   1396c:	movne	r5, #0
   13970:	bne	137a8 <__assert_fail@plt+0x261c>
   13974:	ldr	r3, [sp, #32]
   13978:	cmp	r3, #0
   1397c:	bne	13f90 <__assert_fail@plt+0x2e04>
   13980:	ldr	r2, [sp, #76]	; 0x4c
   13984:	adds	r3, r7, #0
   13988:	movne	r3, #1
   1398c:	cmp	r2, #0
   13990:	movne	r3, #0
   13994:	cmp	r3, #0
   13998:	movne	r3, #0
   1399c:	bne	139cc <__assert_fail@plt+0x2840>
   139a0:	cmp	r7, fp
   139a4:	ldrhi	r3, [sp, #36]	; 0x24
   139a8:	movhi	r2, #39	; 0x27
   139ac:	strbhi	r2, [r3, fp]
   139b0:	add	r3, fp, #1
   139b4:	cmp	r7, r3
   139b8:	ldrhi	r2, [sp, #36]	; 0x24
   139bc:	movhi	r1, #92	; 0x5c
   139c0:	strbhi	r1, [r2, r3]
   139c4:	mov	r3, r7
   139c8:	ldr	r7, [sp, #76]	; 0x4c
   139cc:	add	r2, fp, #2
   139d0:	cmp	r2, r3
   139d4:	ldrcc	r1, [sp, #36]	; 0x24
   139d8:	movcc	r0, #39	; 0x27
   139dc:	strbcc	r0, [r1, r2]
   139e0:	add	fp, fp, #3
   139e4:	ldr	r2, [sp, #32]
   139e8:	mov	r5, r2
   139ec:	str	r8, [sp, #80]	; 0x50
   139f0:	str	r2, [sp, #44]	; 0x2c
   139f4:	str	r7, [sp, #76]	; 0x4c
   139f8:	mov	r7, r3
   139fc:	b	137a8 <__assert_fail@plt+0x261c>
   13a00:	ldr	r5, [sp, #84]	; 0x54
   13a04:	cmp	r5, #1
   13a08:	beq	13a38 <__assert_fail@plt+0x28ac>
   13a0c:	mov	r3, #0
   13a10:	str	r3, [sp, #104]	; 0x68
   13a14:	str	r3, [sp, #108]	; 0x6c
   13a18:	ldr	r3, [sp, #28]
   13a1c:	cmn	r3, #1
   13a20:	beq	13a6c <__assert_fail@plt+0x28e0>
   13a24:	mov	r3, #0
   13a28:	str	r4, [sp, #88]	; 0x58
   13a2c:	str	fp, [sp, #92]	; 0x5c
   13a30:	mov	fp, r3
   13a34:	b	13b94 <__assert_fail@plt+0x2a08>
   13a38:	bl	11054 <__ctype_b_loc@plt>
   13a3c:	ldr	r2, [r0]
   13a40:	lsl	r3, r4, #1
   13a44:	ldrh	r8, [r2, r3]
   13a48:	lsr	r8, r8, #14
   13a4c:	and	r8, r8, #1
   13a50:	mov	r2, r5
   13a54:	eor	r5, r8, #1
   13a58:	ldr	r3, [sp, #48]	; 0x30
   13a5c:	and	r5, r5, r3
   13a60:	ands	r5, r5, #255	; 0xff
   13a64:	beq	137a8 <__assert_fail@plt+0x261c>
   13a68:	b	13c2c <__assert_fail@plt+0x2aa0>
   13a6c:	ldr	r0, [sp, #52]	; 0x34
   13a70:	bl	11078 <strlen@plt>
   13a74:	str	r0, [sp, #28]
   13a78:	b	13a24 <__assert_fail@plt+0x2898>
   13a7c:	mov	r2, fp
   13a80:	mov	r1, r4
   13a84:	ldr	r4, [sp, #88]	; 0x58
   13a88:	ldr	fp, [sp, #92]	; 0x5c
   13a8c:	ldr	r0, [sp, #28]
   13a90:	cmp	r0, r5
   13a94:	bls	13c60 <__assert_fail@plt+0x2ad4>
   13a98:	ldrb	r3, [r1]
   13a9c:	cmp	r3, #0
   13aa0:	beq	13c68 <__assert_fail@plt+0x2adc>
   13aa4:	mov	r3, r1
   13aa8:	add	r2, r2, #1
   13aac:	add	r1, r6, r2
   13ab0:	cmp	r0, r1
   13ab4:	bls	13c70 <__assert_fail@plt+0x2ae4>
   13ab8:	ldrb	r1, [r3, #1]!
   13abc:	cmp	r1, #0
   13ac0:	bne	13aa8 <__assert_fail@plt+0x291c>
   13ac4:	mov	r8, #0
   13ac8:	b	13c24 <__assert_fail@plt+0x2a98>
   13acc:	cmp	r4, r5
   13ad0:	beq	13b70 <__assert_fail@plt+0x29e4>
   13ad4:	ldrb	r3, [r4, #1]!
   13ad8:	sub	r3, r3, #91	; 0x5b
   13adc:	cmp	r3, #33	; 0x21
   13ae0:	ldrls	pc, [pc, r3, lsl #2]
   13ae4:	b	13acc <__assert_fail@plt+0x2940>
   13ae8:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13aec:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13af0:	andeq	r3, r1, ip, asr #21
   13af4:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13af8:	andeq	r3, r1, ip, asr #21
   13afc:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13b00:	andeq	r3, r1, ip, asr #21
   13b04:	andeq	r3, r1, ip, asr #21
   13b08:	andeq	r3, r1, ip, asr #21
   13b0c:	andeq	r3, r1, ip, asr #21
   13b10:	andeq	r3, r1, ip, asr #21
   13b14:	andeq	r3, r1, ip, asr #21
   13b18:	andeq	r3, r1, ip, asr #21
   13b1c:	andeq	r3, r1, ip, asr #21
   13b20:	andeq	r3, r1, ip, asr #21
   13b24:	andeq	r3, r1, ip, asr #21
   13b28:	andeq	r3, r1, ip, asr #21
   13b2c:	andeq	r3, r1, ip, asr #21
   13b30:	andeq	r3, r1, ip, asr #21
   13b34:	andeq	r3, r1, ip, asr #21
   13b38:	andeq	r3, r1, ip, asr #21
   13b3c:	andeq	r3, r1, ip, asr #21
   13b40:	andeq	r3, r1, ip, asr #21
   13b44:	andeq	r3, r1, ip, asr #21
   13b48:	andeq	r3, r1, ip, asr #21
   13b4c:	andeq	r3, r1, ip, asr #21
   13b50:	andeq	r3, r1, ip, asr #21
   13b54:	andeq	r3, r1, ip, asr #21
   13b58:	andeq	r3, r1, ip, asr #21
   13b5c:	andeq	r3, r1, ip, asr #21
   13b60:	andeq	r3, r1, ip, asr #21
   13b64:	andeq	r3, r1, ip, asr #21
   13b68:	andeq	r3, r1, ip, asr #21
   13b6c:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   13b70:	ldr	r0, [sp, #100]	; 0x64
   13b74:	bl	10f88 <iswprint@plt>
   13b78:	cmp	r0, #0
   13b7c:	moveq	r8, #0
   13b80:	add	fp, fp, r9
   13b84:	add	r0, sp, #104	; 0x68
   13b88:	bl	10f10 <mbsinit@plt>
   13b8c:	cmp	r0, #0
   13b90:	bne	13c04 <__assert_fail@plt+0x2a78>
   13b94:	add	r5, r6, fp
   13b98:	ldr	r3, [sp, #52]	; 0x34
   13b9c:	add	r4, r3, r5
   13ba0:	add	r3, sp, #104	; 0x68
   13ba4:	ldr	r2, [sp, #28]
   13ba8:	sub	r2, r2, r5
   13bac:	mov	r1, r4
   13bb0:	add	r0, sp, #100	; 0x64
   13bb4:	bl	158ec <__assert_fail@plt+0x4760>
   13bb8:	subs	r9, r0, #0
   13bbc:	beq	13c78 <__assert_fail@plt+0x2aec>
   13bc0:	cmn	r9, #1
   13bc4:	beq	13c14 <__assert_fail@plt+0x2a88>
   13bc8:	cmn	r9, #2
   13bcc:	beq	13a7c <__assert_fail@plt+0x28f0>
   13bd0:	ldr	r3, [sp, #32]
   13bd4:	cmp	sl, #2
   13bd8:	movne	r3, #0
   13bdc:	andeq	r3, r3, #1
   13be0:	cmp	r3, #0
   13be4:	beq	13b70 <__assert_fail@plt+0x29e4>
   13be8:	cmp	r9, #1
   13bec:	bls	13b70 <__assert_fail@plt+0x29e4>
   13bf0:	sub	r3, r9, #1
   13bf4:	add	r5, r3, r5
   13bf8:	ldr	r3, [sp, #52]	; 0x34
   13bfc:	add	r5, r3, r5
   13c00:	b	13ad4 <__assert_fail@plt+0x2948>
   13c04:	ldr	r4, [sp, #88]	; 0x58
   13c08:	mov	r2, fp
   13c0c:	ldr	fp, [sp, #92]	; 0x5c
   13c10:	b	13c24 <__assert_fail@plt+0x2a98>
   13c14:	ldr	r4, [sp, #88]	; 0x58
   13c18:	mov	r2, fp
   13c1c:	ldr	fp, [sp, #92]	; 0x5c
   13c20:	mov	r8, #0
   13c24:	cmp	r2, #1
   13c28:	bls	13a54 <__assert_fail@plt+0x28c8>
   13c2c:	add	r1, r6, r2
   13c30:	ldr	ip, [sp, #64]	; 0x40
   13c34:	mov	r5, #0
   13c38:	eor	r3, r8, #1
   13c3c:	ldr	r2, [sp, #48]	; 0x30
   13c40:	and	r3, r3, r2
   13c44:	uxtb	r3, r3
   13c48:	ldr	r9, [sp, #32]
   13c4c:	ldr	lr, [sp, #44]	; 0x2c
   13c50:	ldr	r2, [sp, #56]	; 0x38
   13c54:	str	r8, [sp, #56]	; 0x38
   13c58:	ldr	r0, [sp, #36]	; 0x24
   13c5c:	b	13cf8 <__assert_fail@plt+0x2b6c>
   13c60:	mov	r8, #0
   13c64:	b	13c24 <__assert_fail@plt+0x2a98>
   13c68:	mov	r8, #0
   13c6c:	b	13c24 <__assert_fail@plt+0x2a98>
   13c70:	mov	r8, #0
   13c74:	b	13c24 <__assert_fail@plt+0x2a98>
   13c78:	ldr	r4, [sp, #88]	; 0x58
   13c7c:	mov	r2, fp
   13c80:	ldr	fp, [sp, #92]	; 0x5c
   13c84:	b	13c24 <__assert_fail@plt+0x2a98>
   13c88:	cmp	r2, #0
   13c8c:	beq	13ca0 <__assert_fail@plt+0x2b14>
   13c90:	cmp	r7, fp
   13c94:	movhi	r2, #92	; 0x5c
   13c98:	strbhi	r2, [r0, fp]
   13c9c:	add	fp, fp, #1
   13ca0:	add	r8, r6, #1
   13ca4:	cmp	r1, r8
   13ca8:	bls	13db0 <__assert_fail@plt+0x2c24>
   13cac:	eor	r2, r5, #1
   13cb0:	and	r2, r2, lr
   13cb4:	ands	r2, r2, #255	; 0xff
   13cb8:	beq	13dcc <__assert_fail@plt+0x2c40>
   13cbc:	cmp	r7, fp
   13cc0:	movhi	r2, #39	; 0x27
   13cc4:	strbhi	r2, [r0, fp]
   13cc8:	add	r2, fp, #1
   13ccc:	cmp	r7, r2
   13cd0:	movhi	lr, #39	; 0x27
   13cd4:	strbhi	lr, [r0, r2]
   13cd8:	add	fp, fp, #2
   13cdc:	mov	r6, r8
   13ce0:	mov	r2, r3
   13ce4:	mov	lr, r3
   13ce8:	cmp	r7, fp
   13cec:	strbhi	r4, [r0, fp]
   13cf0:	add	fp, fp, #1
   13cf4:	ldrb	r4, [ip, #1]!
   13cf8:	cmp	r3, #0
   13cfc:	beq	13c88 <__assert_fail@plt+0x2afc>
   13d00:	cmp	r9, #0
   13d04:	bne	14008 <__assert_fail@plt+0x2e7c>
   13d08:	eor	r5, lr, #1
   13d0c:	cmp	sl, #2
   13d10:	movne	r5, #0
   13d14:	andeq	r5, r5, #1
   13d18:	cmp	r5, #0
   13d1c:	beq	13d54 <__assert_fail@plt+0x2bc8>
   13d20:	cmp	r7, fp
   13d24:	movhi	lr, #39	; 0x27
   13d28:	strbhi	lr, [r0, fp]
   13d2c:	add	lr, fp, #1
   13d30:	cmp	r7, lr
   13d34:	movhi	r8, #36	; 0x24
   13d38:	strbhi	r8, [r0, lr]
   13d3c:	add	lr, fp, #2
   13d40:	cmp	r7, lr
   13d44:	movhi	r8, #39	; 0x27
   13d48:	strbhi	r8, [r0, lr]
   13d4c:	add	fp, fp, #3
   13d50:	mov	lr, r5
   13d54:	cmp	r7, fp
   13d58:	movhi	r5, #92	; 0x5c
   13d5c:	strbhi	r5, [r0, fp]
   13d60:	add	r5, fp, #1
   13d64:	cmp	r7, r5
   13d68:	lsrhi	r8, r4, #6
   13d6c:	addhi	r8, r8, #48	; 0x30
   13d70:	strbhi	r8, [r0, r5]
   13d74:	add	r8, fp, #2
   13d78:	cmp	r7, r8
   13d7c:	lsrhi	r5, r4, #3
   13d80:	andhi	r5, r5, #7
   13d84:	addhi	r5, r5, #48	; 0x30
   13d88:	strbhi	r5, [r0, r8]
   13d8c:	add	fp, fp, #3
   13d90:	and	r4, r4, #7
   13d94:	add	r4, r4, #48	; 0x30
   13d98:	add	r5, r6, #1
   13d9c:	cmp	r1, r5
   13da0:	bls	13dbc <__assert_fail@plt+0x2c30>
   13da4:	mov	r6, r5
   13da8:	mov	r5, r3
   13dac:	b	13ce8 <__assert_fail@plt+0x2b5c>
   13db0:	str	lr, [sp, #44]	; 0x2c
   13db4:	ldr	r8, [sp, #56]	; 0x38
   13db8:	b	1368c <__assert_fail@plt+0x2500>
   13dbc:	str	lr, [sp, #44]	; 0x2c
   13dc0:	ldr	r8, [sp, #56]	; 0x38
   13dc4:	mov	r5, r3
   13dc8:	b	1368c <__assert_fail@plt+0x2500>
   13dcc:	mov	r6, r8
   13dd0:	b	13ce8 <__assert_fail@plt+0x2b5c>
   13dd4:	mov	r5, #0
   13dd8:	b	137a8 <__assert_fail@plt+0x261c>
   13ddc:	mov	r8, r5
   13de0:	ldr	r5, [sp, #48]	; 0x30
   13de4:	mov	r4, #48	; 0x30
   13de8:	b	137a8 <__assert_fail@plt+0x261c>
   13dec:	ldr	r8, [sp, #32]
   13df0:	mov	r4, #48	; 0x30
   13df4:	b	137a8 <__assert_fail@plt+0x261c>
   13df8:	ldr	r8, [sp, #32]
   13dfc:	mov	r4, #48	; 0x30
   13e00:	b	137a8 <__assert_fail@plt+0x261c>
   13e04:	mov	r8, #0
   13e08:	mov	r5, r8
   13e0c:	b	137a8 <__assert_fail@plt+0x261c>
   13e10:	mov	r8, #0
   13e14:	mov	r5, r8
   13e18:	b	137a8 <__assert_fail@plt+0x261c>
   13e1c:	mov	r8, #0
   13e20:	mov	r5, r8
   13e24:	b	137a8 <__assert_fail@plt+0x261c>
   13e28:	mov	r8, #0
   13e2c:	mov	r5, r8
   13e30:	b	137a8 <__assert_fail@plt+0x261c>
   13e34:	ldr	r3, [sp, #52]	; 0x34
   13e38:	ldrb	r8, [r3, r6]
   13e3c:	adds	r8, r8, #0
   13e40:	movne	r8, #1
   13e44:	b	138b8 <__assert_fail@plt+0x272c>
   13e48:	cmp	sl, #2
   13e4c:	movne	r3, #0
   13e50:	moveq	r3, #1
   13e54:	ldr	r1, [sp, #32]
   13e58:	mov	r2, r1
   13e5c:	and	r2, r2, r3
   13e60:	cmp	fp, #0
   13e64:	movne	r2, #0
   13e68:	andeq	r2, r2, #1
   13e6c:	cmp	r2, #0
   13e70:	bne	14020 <__assert_fail@plt+0x2e94>
   13e74:	eor	r2, r1, #1
   13e78:	and	r3, r3, r2
   13e7c:	ldr	r1, [sp, #80]	; 0x50
   13e80:	tst	r1, r3
   13e84:	beq	13efc <__assert_fail@plt+0x2d70>
   13e88:	ldr	r3, [sp, #40]	; 0x28
   13e8c:	cmp	r3, #0
   13e90:	bne	13eb8 <__assert_fail@plt+0x2d2c>
   13e94:	ldr	r1, [sp, #76]	; 0x4c
   13e98:	clz	r3, r7
   13e9c:	lsr	r3, r3, #5
   13ea0:	cmp	r1, #0
   13ea4:	moveq	r3, #0
   13ea8:	cmp	r3, #0
   13eac:	beq	13efc <__assert_fail@plt+0x2d70>
   13eb0:	ldr	r7, [sp, #76]	; 0x4c
   13eb4:	b	12f4c <__assert_fail@plt+0x1dc0>
   13eb8:	ldr	r3, [sp, #168]	; 0xa8
   13ebc:	str	r3, [sp, #16]
   13ec0:	ldr	r3, [sp, #164]	; 0xa4
   13ec4:	str	r3, [sp, #12]
   13ec8:	ldr	r3, [sp, #160]	; 0xa0
   13ecc:	str	r3, [sp, #8]
   13ed0:	ldr	r3, [sp, #156]	; 0x9c
   13ed4:	str	r3, [sp, #4]
   13ed8:	mov	r3, #5
   13edc:	str	r3, [sp]
   13ee0:	ldr	r3, [sp, #28]
   13ee4:	ldr	r2, [sp, #52]	; 0x34
   13ee8:	ldr	r1, [sp, #76]	; 0x4c
   13eec:	ldr	r0, [sp, #36]	; 0x24
   13ef0:	bl	12eec <__assert_fail@plt+0x1d60>
   13ef4:	mov	fp, r0
   13ef8:	b	13ffc <__assert_fail@plt+0x2e70>
   13efc:	mov	sl, r7
   13f00:	ldr	r3, [sp, #72]	; 0x48
   13f04:	cmp	r3, #0
   13f08:	moveq	r2, #0
   13f0c:	andne	r2, r2, #1
   13f10:	cmp	r2, #0
   13f14:	beq	13f44 <__assert_fail@plt+0x2db8>
   13f18:	mov	r2, r3
   13f1c:	ldrb	r3, [r3]
   13f20:	cmp	r3, #0
   13f24:	beq	13f44 <__assert_fail@plt+0x2db8>
   13f28:	ldr	r1, [sp, #36]	; 0x24
   13f2c:	cmp	sl, fp
   13f30:	strbhi	r3, [r1, fp]
   13f34:	add	fp, fp, #1
   13f38:	ldrb	r3, [r2, #1]!
   13f3c:	cmp	r3, #0
   13f40:	bne	13f2c <__assert_fail@plt+0x2da0>
   13f44:	cmp	sl, fp
   13f48:	movhi	r3, #0
   13f4c:	ldrhi	r2, [sp, #36]	; 0x24
   13f50:	strbhi	r3, [r2, fp]
   13f54:	b	13ffc <__assert_fail@plt+0x2e70>
   13f58:	mov	r8, sl
   13f5c:	mov	sl, r7
   13f60:	ldr	r3, [sp, #32]
   13f64:	str	r3, [sp, #48]	; 0x30
   13f68:	b	13fa4 <__assert_fail@plt+0x2e18>
   13f6c:	mov	r8, sl
   13f70:	mov	sl, r7
   13f74:	b	13fa4 <__assert_fail@plt+0x2e18>
   13f78:	mov	r8, sl
   13f7c:	mov	sl, r7
   13f80:	b	13fa4 <__assert_fail@plt+0x2e18>
   13f84:	andeq	r6, r1, ip, asr #22
   13f88:	andeq	r6, r1, ip, asr fp
   13f8c:	andeq	r6, r1, r0, asr fp
   13f90:	mov	r8, sl
   13f94:	mov	sl, r7
   13f98:	b	13fa4 <__assert_fail@plt+0x2e18>
   13f9c:	mov	r8, sl
   13fa0:	mov	sl, r7
   13fa4:	ldr	r3, [sp, #48]	; 0x30
   13fa8:	cmp	r8, #2
   13fac:	movne	r3, #0
   13fb0:	andeq	r3, r3, #1
   13fb4:	cmp	r3, #0
   13fb8:	movne	r8, #4
   13fbc:	ldr	r3, [sp, #168]	; 0xa8
   13fc0:	str	r3, [sp, #16]
   13fc4:	ldr	r3, [sp, #164]	; 0xa4
   13fc8:	str	r3, [sp, #12]
   13fcc:	mov	r3, #0
   13fd0:	str	r3, [sp, #8]
   13fd4:	ldr	r3, [sp, #156]	; 0x9c
   13fd8:	bic	r3, r3, #2
   13fdc:	str	r3, [sp, #4]
   13fe0:	str	r8, [sp]
   13fe4:	ldr	r3, [sp, #28]
   13fe8:	ldr	r2, [sp, #52]	; 0x34
   13fec:	mov	r1, sl
   13ff0:	ldr	r0, [sp, #36]	; 0x24
   13ff4:	bl	12eec <__assert_fail@plt+0x1d60>
   13ff8:	mov	fp, r0
   13ffc:	mov	r0, fp
   14000:	add	sp, sp, #116	; 0x74
   14004:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14008:	mov	r8, sl
   1400c:	mov	sl, r7
   14010:	b	13fa4 <__assert_fail@plt+0x2e18>
   14014:	mov	r8, sl
   14018:	mov	sl, r7
   1401c:	b	13fa4 <__assert_fail@plt+0x2e18>
   14020:	mov	r8, sl
   14024:	mov	sl, r7
   14028:	b	13fa4 <__assert_fail@plt+0x2e18>
   1402c:	mov	r8, sl
   14030:	mov	sl, r7
   14034:	b	13fbc <__assert_fail@plt+0x2e30>
   14038:	mov	r3, #1
   1403c:	str	r3, [sp, #32]
   14040:	str	r3, [sp, #48]	; 0x30
   14044:	str	r3, [sp, #60]	; 0x3c
   14048:	ldr	r3, [pc, #-196]	; 13f8c <__assert_fail@plt+0x2e00>
   1404c:	str	r3, [sp, #72]	; 0x48
   14050:	mov	fp, #0
   14054:	mov	sl, #5
   14058:	b	12fa8 <__assert_fail@plt+0x1e1c>
   1405c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14060:	sub	sp, sp, #52	; 0x34
   14064:	mov	r5, r0
   14068:	str	r1, [sp, #24]
   1406c:	str	r2, [sp, #28]
   14070:	mov	r4, r3
   14074:	bl	11090 <__errno_location@plt>
   14078:	str	r0, [sp, #32]
   1407c:	ldr	r3, [r0]
   14080:	str	r3, [sp, #36]	; 0x24
   14084:	ldr	r3, [pc, #396]	; 14218 <__assert_fail@plt+0x308c>
   14088:	ldr	r6, [r3]
   1408c:	cmn	r5, #-2147483647	; 0x80000001
   14090:	movne	r3, #0
   14094:	moveq	r3, #1
   14098:	orrs	r3, r3, r5, lsr #31
   1409c:	bne	141dc <__assert_fail@plt+0x3050>
   140a0:	ldr	r3, [pc, #368]	; 14218 <__assert_fail@plt+0x308c>
   140a4:	ldr	r2, [r3, #4]
   140a8:	cmp	r5, r2
   140ac:	blt	14114 <__assert_fail@plt+0x2f88>
   140b0:	str	r2, [sp, #44]	; 0x2c
   140b4:	add	r3, r3, #8
   140b8:	cmp	r6, r3
   140bc:	beq	141e0 <__assert_fail@plt+0x3054>
   140c0:	sub	r2, r5, r2
   140c4:	mov	r3, #8
   140c8:	str	r3, [sp]
   140cc:	mvn	r3, #-2147483648	; 0x80000000
   140d0:	add	r2, r2, #1
   140d4:	add	r1, sp, #44	; 0x2c
   140d8:	mov	r0, r6
   140dc:	bl	15184 <__assert_fail@plt+0x3ff8>
   140e0:	mov	r6, r0
   140e4:	ldr	r3, [pc, #300]	; 14218 <__assert_fail@plt+0x308c>
   140e8:	str	r0, [r3]
   140ec:	ldr	r7, [pc, #292]	; 14218 <__assert_fail@plt+0x308c>
   140f0:	ldr	r0, [r7, #4]
   140f4:	ldr	r2, [sp, #44]	; 0x2c
   140f8:	sub	r2, r2, r0
   140fc:	lsl	r2, r2, #3
   14100:	mov	r1, #0
   14104:	add	r0, r6, r0, lsl #3
   14108:	bl	110b4 <memset@plt>
   1410c:	ldr	r3, [sp, #44]	; 0x2c
   14110:	str	r3, [r7, #4]
   14114:	add	fp, r6, r5, lsl #3
   14118:	ldr	r8, [r6, r5, lsl #3]
   1411c:	ldr	r7, [fp, #4]
   14120:	ldr	r9, [r4, #4]
   14124:	orr	r9, r9, #1
   14128:	add	sl, r4, #8
   1412c:	ldr	r3, [r4, #44]	; 0x2c
   14130:	str	r3, [sp, #16]
   14134:	ldr	r3, [r4, #40]	; 0x28
   14138:	str	r3, [sp, #12]
   1413c:	str	sl, [sp, #8]
   14140:	str	r9, [sp, #4]
   14144:	ldr	r3, [r4]
   14148:	str	r3, [sp]
   1414c:	ldr	r3, [sp, #28]
   14150:	ldr	r2, [sp, #24]
   14154:	mov	r1, r8
   14158:	mov	r0, r7
   1415c:	bl	12eec <__assert_fail@plt+0x1d60>
   14160:	cmp	r8, r0
   14164:	bhi	141c4 <__assert_fail@plt+0x3038>
   14168:	add	r8, r0, #1
   1416c:	str	r8, [r6, r5, lsl #3]
   14170:	ldr	r3, [pc, #164]	; 1421c <__assert_fail@plt+0x3090>
   14174:	cmp	r7, r3
   14178:	beq	14184 <__assert_fail@plt+0x2ff8>
   1417c:	mov	r0, r7
   14180:	bl	12b40 <__assert_fail@plt+0x19b4>
   14184:	mov	r0, r8
   14188:	bl	15000 <__assert_fail@plt+0x3e74>
   1418c:	mov	r7, r0
   14190:	str	r0, [fp, #4]
   14194:	ldr	r3, [r4, #44]	; 0x2c
   14198:	str	r3, [sp, #16]
   1419c:	ldr	r3, [r4, #40]	; 0x28
   141a0:	str	r3, [sp, #12]
   141a4:	str	sl, [sp, #8]
   141a8:	str	r9, [sp, #4]
   141ac:	ldr	r3, [r4]
   141b0:	str	r3, [sp]
   141b4:	ldr	r3, [sp, #28]
   141b8:	ldr	r2, [sp, #24]
   141bc:	mov	r1, r8
   141c0:	bl	12eec <__assert_fail@plt+0x1d60>
   141c4:	ldr	r3, [sp, #32]
   141c8:	ldr	r2, [sp, #36]	; 0x24
   141cc:	str	r2, [r3]
   141d0:	mov	r0, r7
   141d4:	add	sp, sp, #52	; 0x34
   141d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141dc:	bl	11174 <abort@plt>
   141e0:	sub	r2, r5, r2
   141e4:	mov	r3, #8
   141e8:	str	r3, [sp]
   141ec:	mvn	r3, #-2147483648	; 0x80000000
   141f0:	add	r2, r2, #1
   141f4:	add	r1, sp, #44	; 0x2c
   141f8:	mov	r0, #0
   141fc:	bl	15184 <__assert_fail@plt+0x3ff8>
   14200:	mov	r6, r0
   14204:	ldr	r3, [pc, #12]	; 14218 <__assert_fail@plt+0x308c>
   14208:	str	r0, [r3], #8
   1420c:	ldm	r3, {r0, r1}
   14210:	stm	r6, {r0, r1}
   14214:	b	140ec <__assert_fail@plt+0x2f60>
   14218:	andeq	r7, r2, r8, lsr #2
   1421c:	andeq	r7, r2, r0, lsl r2
   14220:	push	{r4, r5, r6, lr}
   14224:	mov	r4, r0
   14228:	bl	11090 <__errno_location@plt>
   1422c:	mov	r5, r0
   14230:	ldr	r6, [r0]
   14234:	cmp	r4, #0
   14238:	ldr	r3, [pc, #20]	; 14254 <__assert_fail@plt+0x30c8>
   1423c:	moveq	r4, r3
   14240:	mov	r1, #48	; 0x30
   14244:	mov	r0, r4
   14248:	bl	154ec <__assert_fail@plt+0x4360>
   1424c:	str	r6, [r5]
   14250:	pop	{r4, r5, r6, pc}
   14254:	andeq	r7, r2, r0, lsl r3
   14258:	subs	r3, r0, #0
   1425c:	ldr	r2, [pc, #8]	; 1426c <__assert_fail@plt+0x30e0>
   14260:	moveq	r3, r2
   14264:	ldr	r0, [r3]
   14268:	bx	lr
   1426c:	andeq	r7, r2, r0, lsl r3
   14270:	subs	r3, r0, #0
   14274:	ldr	r2, [pc, #8]	; 14284 <__assert_fail@plt+0x30f8>
   14278:	moveq	r3, r2
   1427c:	str	r1, [r3]
   14280:	bx	lr
   14284:	andeq	r7, r2, r0, lsl r3
   14288:	push	{lr}		; (str lr, [sp, #-4]!)
   1428c:	subs	r3, r0, #0
   14290:	ldr	r0, [pc, #44]	; 142c4 <__assert_fail@plt+0x3138>
   14294:	moveq	r3, r0
   14298:	add	r3, r3, #8
   1429c:	lsr	lr, r1, #5
   142a0:	and	r1, r1, #31
   142a4:	ldr	ip, [r3, lr, lsl #2]
   142a8:	lsr	r0, ip, r1
   142ac:	eor	r2, r2, r0
   142b0:	and	r2, r2, #1
   142b4:	eor	r1, ip, r2, lsl r1
   142b8:	str	r1, [r3, lr, lsl #2]
   142bc:	and	r0, r0, #1
   142c0:	pop	{pc}		; (ldr pc, [sp], #4)
   142c4:	andeq	r7, r2, r0, lsl r3
   142c8:	subs	r3, r0, #0
   142cc:	ldr	r2, [pc, #12]	; 142e0 <__assert_fail@plt+0x3154>
   142d0:	moveq	r3, r2
   142d4:	ldr	r0, [r3, #4]
   142d8:	str	r1, [r3, #4]
   142dc:	bx	lr
   142e0:	andeq	r7, r2, r0, lsl r3
   142e4:	subs	r3, r0, #0
   142e8:	ldr	r0, [pc, #40]	; 14318 <__assert_fail@plt+0x318c>
   142ec:	moveq	r3, r0
   142f0:	mov	r0, #10
   142f4:	str	r0, [r3]
   142f8:	cmp	r2, #0
   142fc:	cmpne	r1, #0
   14300:	beq	14310 <__assert_fail@plt+0x3184>
   14304:	str	r1, [r3, #40]	; 0x28
   14308:	str	r2, [r3, #44]	; 0x2c
   1430c:	bx	lr
   14310:	push	{r4, lr}
   14314:	bl	11174 <abort@plt>
   14318:	andeq	r7, r2, r0, lsl r3
   1431c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14320:	sub	sp, sp, #24
   14324:	mov	r7, r0
   14328:	mov	r8, r1
   1432c:	mov	r9, r2
   14330:	mov	sl, r3
   14334:	ldr	r4, [sp, #56]	; 0x38
   14338:	cmp	r4, #0
   1433c:	ldr	r3, [pc, #84]	; 14398 <__assert_fail@plt+0x320c>
   14340:	moveq	r4, r3
   14344:	bl	11090 <__errno_location@plt>
   14348:	mov	r5, r0
   1434c:	ldr	r6, [r0]
   14350:	ldr	r3, [r4, #44]	; 0x2c
   14354:	str	r3, [sp, #16]
   14358:	ldr	r3, [r4, #40]	; 0x28
   1435c:	str	r3, [sp, #12]
   14360:	add	r3, r4, #8
   14364:	str	r3, [sp, #8]
   14368:	ldr	r3, [r4, #4]
   1436c:	str	r3, [sp, #4]
   14370:	ldr	r3, [r4]
   14374:	str	r3, [sp]
   14378:	mov	r3, sl
   1437c:	mov	r2, r9
   14380:	mov	r1, r8
   14384:	mov	r0, r7
   14388:	bl	12eec <__assert_fail@plt+0x1d60>
   1438c:	str	r6, [r5]
   14390:	add	sp, sp, #24
   14394:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14398:	andeq	r7, r2, r0, lsl r3
   1439c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143a0:	sub	sp, sp, #44	; 0x2c
   143a4:	str	r0, [sp, #28]
   143a8:	str	r1, [sp, #32]
   143ac:	mov	r6, r2
   143b0:	subs	r4, r3, #0
   143b4:	ldr	r3, [pc, #172]	; 14468 <__assert_fail@plt+0x32dc>
   143b8:	moveq	r4, r3
   143bc:	bl	11090 <__errno_location@plt>
   143c0:	mov	r7, r0
   143c4:	ldr	fp, [r0]
   143c8:	ldr	r5, [r4, #4]
   143cc:	cmp	r6, #0
   143d0:	orreq	r5, r5, #1
   143d4:	add	r9, r4, #8
   143d8:	ldr	r3, [r4, #44]	; 0x2c
   143dc:	str	r3, [sp, #16]
   143e0:	ldr	r3, [r4, #40]	; 0x28
   143e4:	str	r3, [sp, #12]
   143e8:	str	r9, [sp, #8]
   143ec:	str	r5, [sp, #4]
   143f0:	ldr	r3, [r4]
   143f4:	str	r3, [sp]
   143f8:	ldr	r3, [sp, #32]
   143fc:	ldr	r2, [sp, #28]
   14400:	mov	r1, #0
   14404:	mov	r0, r1
   14408:	bl	12eec <__assert_fail@plt+0x1d60>
   1440c:	mov	sl, r0
   14410:	add	r8, r0, #1
   14414:	mov	r0, r8
   14418:	bl	15000 <__assert_fail@plt+0x3e74>
   1441c:	str	r0, [sp, #36]	; 0x24
   14420:	ldr	r3, [r4, #44]	; 0x2c
   14424:	str	r3, [sp, #16]
   14428:	ldr	r3, [r4, #40]	; 0x28
   1442c:	str	r3, [sp, #12]
   14430:	str	r9, [sp, #8]
   14434:	str	r5, [sp, #4]
   14438:	ldr	r3, [r4]
   1443c:	str	r3, [sp]
   14440:	ldr	r3, [sp, #32]
   14444:	ldr	r2, [sp, #28]
   14448:	mov	r1, r8
   1444c:	bl	12eec <__assert_fail@plt+0x1d60>
   14450:	str	fp, [r7]
   14454:	cmp	r6, #0
   14458:	strne	sl, [r6]
   1445c:	ldr	r0, [sp, #36]	; 0x24
   14460:	add	sp, sp, #44	; 0x2c
   14464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14468:	andeq	r7, r2, r0, lsl r3
   1446c:	push	{r4, lr}
   14470:	mov	r3, r2
   14474:	mov	r2, #0
   14478:	bl	1439c <__assert_fail@plt+0x3210>
   1447c:	pop	{r4, pc}
   14480:	push	{r4, r5, r6, r7, r8, lr}
   14484:	ldr	r3, [pc, #140]	; 14518 <__assert_fail@plt+0x338c>
   14488:	ldr	r7, [r3]
   1448c:	ldr	r3, [r3, #4]
   14490:	cmp	r3, #1
   14494:	ble	144c0 <__assert_fail@plt+0x3334>
   14498:	mov	r5, r7
   1449c:	mov	r4, #1
   144a0:	ldr	r6, [pc, #112]	; 14518 <__assert_fail@plt+0x338c>
   144a4:	ldr	r0, [r5, #12]
   144a8:	bl	12b40 <__assert_fail@plt+0x19b4>
   144ac:	add	r4, r4, #1
   144b0:	add	r5, r5, #8
   144b4:	ldr	r3, [r6, #4]
   144b8:	cmp	r3, r4
   144bc:	bgt	144a4 <__assert_fail@plt+0x3318>
   144c0:	ldr	r0, [r7, #4]
   144c4:	ldr	r3, [pc, #80]	; 1451c <__assert_fail@plt+0x3390>
   144c8:	cmp	r0, r3
   144cc:	beq	144e8 <__assert_fail@plt+0x335c>
   144d0:	bl	12b40 <__assert_fail@plt+0x19b4>
   144d4:	ldr	r3, [pc, #60]	; 14518 <__assert_fail@plt+0x338c>
   144d8:	mov	r2, #256	; 0x100
   144dc:	str	r2, [r3, #8]
   144e0:	ldr	r2, [pc, #52]	; 1451c <__assert_fail@plt+0x3390>
   144e4:	str	r2, [r3, #12]
   144e8:	ldr	r3, [pc, #48]	; 14520 <__assert_fail@plt+0x3394>
   144ec:	cmp	r7, r3
   144f0:	beq	14508 <__assert_fail@plt+0x337c>
   144f4:	mov	r0, r7
   144f8:	bl	12b40 <__assert_fail@plt+0x19b4>
   144fc:	ldr	r3, [pc, #20]	; 14518 <__assert_fail@plt+0x338c>
   14500:	add	r2, r3, #8
   14504:	str	r2, [r3]
   14508:	mov	r2, #1
   1450c:	ldr	r3, [pc, #4]	; 14518 <__assert_fail@plt+0x338c>
   14510:	str	r2, [r3, #4]
   14514:	pop	{r4, r5, r6, r7, r8, pc}
   14518:	andeq	r7, r2, r8, lsr #2
   1451c:	andeq	r7, r2, r0, lsl r2
   14520:	andeq	r7, r2, r0, lsr r1
   14524:	push	{r4, lr}
   14528:	ldr	r3, [pc, #8]	; 14538 <__assert_fail@plt+0x33ac>
   1452c:	mvn	r2, #0
   14530:	bl	1405c <__assert_fail@plt+0x2ed0>
   14534:	pop	{r4, pc}
   14538:	andeq	r7, r2, r0, lsl r3
   1453c:	push	{r4, lr}
   14540:	ldr	r3, [pc, #4]	; 1454c <__assert_fail@plt+0x33c0>
   14544:	bl	1405c <__assert_fail@plt+0x2ed0>
   14548:	pop	{r4, pc}
   1454c:	andeq	r7, r2, r0, lsl r3
   14550:	push	{r4, lr}
   14554:	mov	r1, r0
   14558:	mov	r0, #0
   1455c:	bl	14524 <__assert_fail@plt+0x3398>
   14560:	pop	{r4, pc}
   14564:	push	{r4, lr}
   14568:	mov	r2, r1
   1456c:	mov	r1, r0
   14570:	mov	r0, #0
   14574:	bl	1453c <__assert_fail@plt+0x33b0>
   14578:	pop	{r4, pc}
   1457c:	push	{r4, r5, lr}
   14580:	sub	sp, sp, #52	; 0x34
   14584:	mov	r4, r0
   14588:	mov	r5, r2
   1458c:	mov	r0, sp
   14590:	bl	12d84 <__assert_fail@plt+0x1bf8>
   14594:	mov	r3, sp
   14598:	mvn	r2, #0
   1459c:	mov	r1, r5
   145a0:	mov	r0, r4
   145a4:	bl	1405c <__assert_fail@plt+0x2ed0>
   145a8:	add	sp, sp, #52	; 0x34
   145ac:	pop	{r4, r5, pc}
   145b0:	push	{r4, r5, r6, lr}
   145b4:	sub	sp, sp, #48	; 0x30
   145b8:	mov	r4, r0
   145bc:	mov	r5, r2
   145c0:	mov	r6, r3
   145c4:	mov	r0, sp
   145c8:	bl	12d84 <__assert_fail@plt+0x1bf8>
   145cc:	mov	r3, sp
   145d0:	mov	r2, r6
   145d4:	mov	r1, r5
   145d8:	mov	r0, r4
   145dc:	bl	1405c <__assert_fail@plt+0x2ed0>
   145e0:	add	sp, sp, #48	; 0x30
   145e4:	pop	{r4, r5, r6, pc}
   145e8:	push	{r4, lr}
   145ec:	mov	r2, r1
   145f0:	mov	r1, r0
   145f4:	mov	r0, #0
   145f8:	bl	1457c <__assert_fail@plt+0x33f0>
   145fc:	pop	{r4, pc}
   14600:	push	{r4, lr}
   14604:	mov	r3, r2
   14608:	mov	r2, r1
   1460c:	mov	r1, r0
   14610:	mov	r0, #0
   14614:	bl	145b0 <__assert_fail@plt+0x3424>
   14618:	pop	{r4, pc}
   1461c:	push	{r4, r5, r6, lr}
   14620:	sub	sp, sp, #48	; 0x30
   14624:	mov	r4, r0
   14628:	mov	r5, r1
   1462c:	mov	r6, r2
   14630:	mov	ip, sp
   14634:	ldr	lr, [pc, #64]	; 1467c <__assert_fail@plt+0x34f0>
   14638:	ldm	lr!, {r0, r1, r2, r3}
   1463c:	stmia	ip!, {r0, r1, r2, r3}
   14640:	ldm	lr!, {r0, r1, r2, r3}
   14644:	stmia	ip!, {r0, r1, r2, r3}
   14648:	ldm	lr, {r0, r1, r2, r3}
   1464c:	stm	ip, {r0, r1, r2, r3}
   14650:	mov	r2, #1
   14654:	mov	r1, r6
   14658:	mov	r0, sp
   1465c:	bl	14288 <__assert_fail@plt+0x30fc>
   14660:	mov	r3, sp
   14664:	mov	r2, r5
   14668:	mov	r1, r4
   1466c:	mov	r0, #0
   14670:	bl	1405c <__assert_fail@plt+0x2ed0>
   14674:	add	sp, sp, #48	; 0x30
   14678:	pop	{r4, r5, r6, pc}
   1467c:	andeq	r7, r2, r0, lsl r3
   14680:	push	{r4, lr}
   14684:	mov	r2, r1
   14688:	mvn	r1, #0
   1468c:	bl	1461c <__assert_fail@plt+0x3490>
   14690:	pop	{r4, pc}
   14694:	push	{r4, lr}
   14698:	mov	r1, #58	; 0x3a
   1469c:	bl	14680 <__assert_fail@plt+0x34f4>
   146a0:	pop	{r4, pc}
   146a4:	push	{r4, lr}
   146a8:	mov	r2, #58	; 0x3a
   146ac:	bl	1461c <__assert_fail@plt+0x3490>
   146b0:	pop	{r4, pc}
   146b4:	push	{r4, r5, lr}
   146b8:	sub	sp, sp, #100	; 0x64
   146bc:	mov	r4, r0
   146c0:	mov	r5, r2
   146c4:	mov	r0, sp
   146c8:	bl	12d84 <__assert_fail@plt+0x1bf8>
   146cc:	add	lr, sp, #48	; 0x30
   146d0:	mov	ip, sp
   146d4:	ldm	ip!, {r0, r1, r2, r3}
   146d8:	stmia	lr!, {r0, r1, r2, r3}
   146dc:	ldm	ip!, {r0, r1, r2, r3}
   146e0:	stmia	lr!, {r0, r1, r2, r3}
   146e4:	ldm	ip, {r0, r1, r2, r3}
   146e8:	stm	lr, {r0, r1, r2, r3}
   146ec:	mov	r2, #1
   146f0:	mov	r1, #58	; 0x3a
   146f4:	add	r0, sp, #48	; 0x30
   146f8:	bl	14288 <__assert_fail@plt+0x30fc>
   146fc:	add	r3, sp, #48	; 0x30
   14700:	mvn	r2, #0
   14704:	mov	r1, r5
   14708:	mov	r0, r4
   1470c:	bl	1405c <__assert_fail@plt+0x2ed0>
   14710:	add	sp, sp, #100	; 0x64
   14714:	pop	{r4, r5, pc}
   14718:	push	{r4, r5, r6, r7, lr}
   1471c:	sub	sp, sp, #52	; 0x34
   14720:	mov	r4, r0
   14724:	mov	r6, r1
   14728:	mov	r7, r2
   1472c:	mov	r5, r3
   14730:	mov	ip, sp
   14734:	ldr	lr, [pc, #64]	; 1477c <__assert_fail@plt+0x35f0>
   14738:	ldm	lr!, {r0, r1, r2, r3}
   1473c:	stmia	ip!, {r0, r1, r2, r3}
   14740:	ldm	lr!, {r0, r1, r2, r3}
   14744:	stmia	ip!, {r0, r1, r2, r3}
   14748:	ldm	lr, {r0, r1, r2, r3}
   1474c:	stm	ip, {r0, r1, r2, r3}
   14750:	mov	r2, r7
   14754:	mov	r1, r6
   14758:	mov	r0, sp
   1475c:	bl	142e4 <__assert_fail@plt+0x3158>
   14760:	mov	r3, sp
   14764:	ldr	r2, [sp, #72]	; 0x48
   14768:	mov	r1, r5
   1476c:	mov	r0, r4
   14770:	bl	1405c <__assert_fail@plt+0x2ed0>
   14774:	add	sp, sp, #52	; 0x34
   14778:	pop	{r4, r5, r6, r7, pc}
   1477c:	andeq	r7, r2, r0, lsl r3
   14780:	push	{lr}		; (str lr, [sp, #-4]!)
   14784:	sub	sp, sp, #12
   14788:	mvn	ip, #0
   1478c:	str	ip, [sp]
   14790:	bl	14718 <__assert_fail@plt+0x358c>
   14794:	add	sp, sp, #12
   14798:	pop	{pc}		; (ldr pc, [sp], #4)
   1479c:	push	{r4, lr}
   147a0:	mov	r3, r2
   147a4:	mov	r2, r1
   147a8:	mov	r1, r0
   147ac:	mov	r0, #0
   147b0:	bl	14780 <__assert_fail@plt+0x35f4>
   147b4:	pop	{r4, pc}
   147b8:	push	{lr}		; (str lr, [sp, #-4]!)
   147bc:	sub	sp, sp, #12
   147c0:	str	r3, [sp]
   147c4:	mov	r3, r2
   147c8:	mov	r2, r1
   147cc:	mov	r1, r0
   147d0:	mov	r0, #0
   147d4:	bl	14718 <__assert_fail@plt+0x358c>
   147d8:	add	sp, sp, #12
   147dc:	pop	{pc}		; (ldr pc, [sp], #4)
   147e0:	push	{r4, lr}
   147e4:	ldr	r3, [pc, #4]	; 147f0 <__assert_fail@plt+0x3664>
   147e8:	bl	1405c <__assert_fail@plt+0x2ed0>
   147ec:	pop	{r4, pc}
   147f0:	andeq	r7, r2, r8, lsr r1
   147f4:	push	{r4, lr}
   147f8:	mov	r2, r1
   147fc:	mov	r1, r0
   14800:	mov	r0, #0
   14804:	bl	147e0 <__assert_fail@plt+0x3654>
   14808:	pop	{r4, pc}
   1480c:	push	{r4, lr}
   14810:	mvn	r2, #0
   14814:	bl	147e0 <__assert_fail@plt+0x3654>
   14818:	pop	{r4, pc}
   1481c:	push	{r4, lr}
   14820:	mov	r1, r0
   14824:	mov	r0, #0
   14828:	bl	1480c <__assert_fail@plt+0x3680>
   1482c:	pop	{r4, pc}
   14830:	push	{r4, r5, r6, lr}
   14834:	mov	r5, r0
   14838:	mov	r0, #33	; 0x21
   1483c:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   14840:	mov	r4, r0
   14844:	mov	r2, #32
   14848:	add	r1, r5, #44	; 0x2c
   1484c:	bl	110c0 <strncpy@plt>
   14850:	mov	r3, #0
   14854:	strb	r3, [r4, #32]
   14858:	mov	r0, r4
   1485c:	bl	11078 <strlen@plt>
   14860:	add	r0, r4, r0
   14864:	cmp	r4, r0
   14868:	bcs	14878 <__assert_fail@plt+0x36ec>
   1486c:	ldrb	r3, [r0, #-1]
   14870:	cmp	r3, #32
   14874:	beq	14880 <__assert_fail@plt+0x36f4>
   14878:	mov	r0, r4
   1487c:	pop	{r4, r5, r6, pc}
   14880:	sub	r0, r0, #1
   14884:	mov	r1, r4
   14888:	mov	r2, #0
   1488c:	strb	r2, [r0]
   14890:	cmp	r0, r1
   14894:	beq	14878 <__assert_fail@plt+0x36ec>
   14898:	ldrb	r3, [r0, #-1]!
   1489c:	cmp	r3, #32
   148a0:	bne	14878 <__assert_fail@plt+0x36ec>
   148a4:	b	1488c <__assert_fail@plt+0x3700>
   148a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148ac:	sub	sp, sp, #28
   148b0:	mov	fp, r1
   148b4:	str	r2, [sp, #12]
   148b8:	mov	r6, r3
   148bc:	mov	r7, #0
   148c0:	add	sl, sp, #24
   148c4:	str	r7, [sl, #-4]!
   148c8:	bl	10ed4 <utmpxname@plt>
   148cc:	bl	10f64 <setutxent@plt>
   148d0:	mov	r8, r7
   148d4:	mov	r9, r7
   148d8:	and	r5, r6, #2
   148dc:	and	r6, r6, #1
   148e0:	b	14918 <__assert_fail@plt+0x378c>
   148e4:	cmp	r6, #0
   148e8:	beq	14944 <__assert_fail@plt+0x37b8>
   148ec:	ldr	r0, [r4, #4]
   148f0:	cmp	r0, #0
   148f4:	ble	14944 <__assert_fail@plt+0x37b8>
   148f8:	mov	r1, #0
   148fc:	bl	11048 <kill@plt>
   14900:	cmp	r0, #0
   14904:	bge	14944 <__assert_fail@plt+0x37b8>
   14908:	bl	11090 <__errno_location@plt>
   1490c:	ldr	r3, [r0]
   14910:	cmp	r3, #3
   14914:	bne	14944 <__assert_fail@plt+0x37b8>
   14918:	bl	11180 <getutxent@plt>
   1491c:	subs	r4, r0, #0
   14920:	beq	14990 <__assert_fail@plt+0x3804>
   14924:	ldrb	r3, [r4, #44]	; 0x2c
   14928:	cmp	r3, #0
   1492c:	beq	1493c <__assert_fail@plt+0x37b0>
   14930:	ldrsh	r3, [r4]
   14934:	cmp	r3, #7
   14938:	beq	148e4 <__assert_fail@plt+0x3758>
   1493c:	cmp	r5, #0
   14940:	bne	14918 <__assert_fail@plt+0x378c>
   14944:	ldr	r3, [sp, #20]
   14948:	cmp	r7, r3
   1494c:	beq	1496c <__assert_fail@plt+0x37e0>
   14950:	add	r7, r7, #1
   14954:	mov	r2, #384	; 0x180
   14958:	mov	r1, r4
   1495c:	add	r0, r9, r8
   14960:	bl	10f04 <memcpy@plt>
   14964:	add	r8, r8, #384	; 0x180
   14968:	b	14918 <__assert_fail@plt+0x378c>
   1496c:	mov	r3, #384	; 0x180
   14970:	str	r3, [sp]
   14974:	mvn	r3, #0
   14978:	mov	r2, #1
   1497c:	mov	r1, sl
   14980:	mov	r0, r9
   14984:	bl	15184 <__assert_fail@plt+0x3ff8>
   14988:	mov	r9, r0
   1498c:	b	14950 <__assert_fail@plt+0x37c4>
   14990:	bl	11108 <endutxent@plt>
   14994:	str	r7, [fp]
   14998:	ldr	r3, [sp, #12]
   1499c:	str	r9, [r3]
   149a0:	mov	r0, #0
   149a4:	add	sp, sp, #28
   149a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149ac:	push	{r4, r5, r6, lr}
   149b0:	mov	r6, r1
   149b4:	mov	r4, r2
   149b8:	mov	r1, #0
   149bc:	bl	11114 <setlocale@plt>
   149c0:	subs	r5, r0, #0
   149c4:	beq	149e8 <__assert_fail@plt+0x385c>
   149c8:	mov	r0, r5
   149cc:	bl	11078 <strlen@plt>
   149d0:	cmp	r4, r0
   149d4:	bhi	14a00 <__assert_fail@plt+0x3874>
   149d8:	cmp	r4, #0
   149dc:	bne	14a18 <__assert_fail@plt+0x388c>
   149e0:	mov	r0, #34	; 0x22
   149e4:	pop	{r4, r5, r6, pc}
   149e8:	cmp	r4, #0
   149ec:	beq	14a3c <__assert_fail@plt+0x38b0>
   149f0:	mov	r3, #0
   149f4:	strb	r3, [r6]
   149f8:	mov	r0, #22
   149fc:	pop	{r4, r5, r6, pc}
   14a00:	add	r2, r0, #1
   14a04:	mov	r1, r5
   14a08:	mov	r0, r6
   14a0c:	bl	10f04 <memcpy@plt>
   14a10:	mov	r0, #0
   14a14:	pop	{r4, r5, r6, pc}
   14a18:	sub	r4, r4, #1
   14a1c:	mov	r2, r4
   14a20:	mov	r1, r5
   14a24:	mov	r0, r6
   14a28:	bl	10f04 <memcpy@plt>
   14a2c:	mov	r3, #0
   14a30:	strb	r3, [r6, r4]
   14a34:	mov	r0, #34	; 0x22
   14a38:	pop	{r4, r5, r6, pc}
   14a3c:	mov	r0, #22
   14a40:	pop	{r4, r5, r6, pc}
   14a44:	push	{r4, lr}
   14a48:	mov	r1, #0
   14a4c:	bl	11114 <setlocale@plt>
   14a50:	pop	{r4, pc}
   14a54:	push	{r4, r5, r6, lr}
   14a58:	sub	sp, sp, #32
   14a5c:	mov	r4, r0
   14a60:	ldr	r5, [sp, #48]	; 0x30
   14a64:	ldr	r6, [sp, #52]	; 0x34
   14a68:	cmp	r1, #0
   14a6c:	beq	14b24 <__assert_fail@plt+0x3998>
   14a70:	str	r3, [sp, #4]
   14a74:	str	r2, [sp]
   14a78:	mov	r3, r1
   14a7c:	ldr	r2, [pc, #940]	; 14e30 <__assert_fail@plt+0x3ca4>
   14a80:	mov	r1, #1
   14a84:	bl	110e4 <__fprintf_chk@plt>
   14a88:	mov	r2, #5
   14a8c:	ldr	r1, [pc, #928]	; 14e34 <__assert_fail@plt+0x3ca8>
   14a90:	mov	r0, #0
   14a94:	bl	10f4c <dcgettext@plt>
   14a98:	ldr	r3, [pc, #920]	; 14e38 <__assert_fail@plt+0x3cac>
   14a9c:	str	r3, [sp]
   14aa0:	mov	r3, r0
   14aa4:	ldr	r2, [pc, #912]	; 14e3c <__assert_fail@plt+0x3cb0>
   14aa8:	mov	r1, #1
   14aac:	mov	r0, r4
   14ab0:	bl	110e4 <__fprintf_chk@plt>
   14ab4:	mov	r1, r4
   14ab8:	mov	r0, #10
   14abc:	bl	10f40 <fputc_unlocked@plt>
   14ac0:	mov	r2, #5
   14ac4:	ldr	r1, [pc, #884]	; 14e40 <__assert_fail@plt+0x3cb4>
   14ac8:	mov	r0, #0
   14acc:	bl	10f4c <dcgettext@plt>
   14ad0:	ldr	r3, [pc, #876]	; 14e44 <__assert_fail@plt+0x3cb8>
   14ad4:	mov	r2, r0
   14ad8:	mov	r1, #1
   14adc:	mov	r0, r4
   14ae0:	bl	110e4 <__fprintf_chk@plt>
   14ae4:	mov	r1, r4
   14ae8:	mov	r0, #10
   14aec:	bl	10f40 <fputc_unlocked@plt>
   14af0:	cmp	r6, #9
   14af4:	ldrls	pc, [pc, r6, lsl #2]
   14af8:	b	14dc8 <__assert_fail@plt+0x3c3c>
   14afc:	andeq	r4, r1, r0, ror #22
   14b00:	andeq	r4, r1, ip, lsr fp
   14b04:	andeq	r4, r1, r8, ror #22
   14b08:	muleq	r1, r8, fp
   14b0c:	ldrdeq	r4, [r1], -r0
   14b10:	andeq	r4, r1, r0, lsl ip
   14b14:	andeq	r4, r1, r8, asr ip
   14b18:	andeq	r4, r1, r8, lsr #25
   14b1c:	andeq	r4, r1, r0, lsl #26
   14b20:	andeq	r4, r1, r0, ror #26
   14b24:	str	r3, [sp]
   14b28:	mov	r3, r2
   14b2c:	ldr	r2, [pc, #788]	; 14e48 <__assert_fail@plt+0x3cbc>
   14b30:	mov	r1, #1
   14b34:	bl	110e4 <__fprintf_chk@plt>
   14b38:	b	14a88 <__assert_fail@plt+0x38fc>
   14b3c:	mov	r2, #5
   14b40:	ldr	r1, [pc, #772]	; 14e4c <__assert_fail@plt+0x3cc0>
   14b44:	mov	r0, #0
   14b48:	bl	10f4c <dcgettext@plt>
   14b4c:	ldr	r3, [r5]
   14b50:	mov	r2, r0
   14b54:	mov	r1, #1
   14b58:	mov	r0, r4
   14b5c:	bl	110e4 <__fprintf_chk@plt>
   14b60:	add	sp, sp, #32
   14b64:	pop	{r4, r5, r6, pc}
   14b68:	mov	r2, #5
   14b6c:	ldr	r1, [pc, #732]	; 14e50 <__assert_fail@plt+0x3cc4>
   14b70:	mov	r0, #0
   14b74:	bl	10f4c <dcgettext@plt>
   14b78:	ldr	r3, [r5]
   14b7c:	ldr	r2, [r5, #4]
   14b80:	str	r2, [sp]
   14b84:	mov	r2, r0
   14b88:	mov	r1, #1
   14b8c:	mov	r0, r4
   14b90:	bl	110e4 <__fprintf_chk@plt>
   14b94:	b	14b60 <__assert_fail@plt+0x39d4>
   14b98:	mov	r2, #5
   14b9c:	ldr	r1, [pc, #688]	; 14e54 <__assert_fail@plt+0x3cc8>
   14ba0:	mov	r0, #0
   14ba4:	bl	10f4c <dcgettext@plt>
   14ba8:	ldr	r3, [r5]
   14bac:	ldr	r2, [r5, #8]
   14bb0:	str	r2, [sp, #4]
   14bb4:	ldr	r2, [r5, #4]
   14bb8:	str	r2, [sp]
   14bbc:	mov	r2, r0
   14bc0:	mov	r1, #1
   14bc4:	mov	r0, r4
   14bc8:	bl	110e4 <__fprintf_chk@plt>
   14bcc:	b	14b60 <__assert_fail@plt+0x39d4>
   14bd0:	mov	r2, #5
   14bd4:	ldr	r1, [pc, #636]	; 14e58 <__assert_fail@plt+0x3ccc>
   14bd8:	mov	r0, #0
   14bdc:	bl	10f4c <dcgettext@plt>
   14be0:	ldr	r3, [r5]
   14be4:	ldr	r2, [r5, #12]
   14be8:	str	r2, [sp, #8]
   14bec:	ldr	r2, [r5, #8]
   14bf0:	str	r2, [sp, #4]
   14bf4:	ldr	r2, [r5, #4]
   14bf8:	str	r2, [sp]
   14bfc:	mov	r2, r0
   14c00:	mov	r1, #1
   14c04:	mov	r0, r4
   14c08:	bl	110e4 <__fprintf_chk@plt>
   14c0c:	b	14b60 <__assert_fail@plt+0x39d4>
   14c10:	mov	r2, #5
   14c14:	ldr	r1, [pc, #576]	; 14e5c <__assert_fail@plt+0x3cd0>
   14c18:	mov	r0, #0
   14c1c:	bl	10f4c <dcgettext@plt>
   14c20:	ldr	r3, [r5]
   14c24:	ldr	r2, [r5, #16]
   14c28:	str	r2, [sp, #12]
   14c2c:	ldr	r2, [r5, #12]
   14c30:	str	r2, [sp, #8]
   14c34:	ldr	r2, [r5, #8]
   14c38:	str	r2, [sp, #4]
   14c3c:	ldr	r2, [r5, #4]
   14c40:	str	r2, [sp]
   14c44:	mov	r2, r0
   14c48:	mov	r1, #1
   14c4c:	mov	r0, r4
   14c50:	bl	110e4 <__fprintf_chk@plt>
   14c54:	b	14b60 <__assert_fail@plt+0x39d4>
   14c58:	mov	r2, #5
   14c5c:	ldr	r1, [pc, #508]	; 14e60 <__assert_fail@plt+0x3cd4>
   14c60:	mov	r0, #0
   14c64:	bl	10f4c <dcgettext@plt>
   14c68:	ldr	r3, [r5]
   14c6c:	ldr	r2, [r5, #20]
   14c70:	str	r2, [sp, #16]
   14c74:	ldr	r2, [r5, #16]
   14c78:	str	r2, [sp, #12]
   14c7c:	ldr	r2, [r5, #12]
   14c80:	str	r2, [sp, #8]
   14c84:	ldr	r2, [r5, #8]
   14c88:	str	r2, [sp, #4]
   14c8c:	ldr	r2, [r5, #4]
   14c90:	str	r2, [sp]
   14c94:	mov	r2, r0
   14c98:	mov	r1, #1
   14c9c:	mov	r0, r4
   14ca0:	bl	110e4 <__fprintf_chk@plt>
   14ca4:	b	14b60 <__assert_fail@plt+0x39d4>
   14ca8:	mov	r2, #5
   14cac:	ldr	r1, [pc, #432]	; 14e64 <__assert_fail@plt+0x3cd8>
   14cb0:	mov	r0, #0
   14cb4:	bl	10f4c <dcgettext@plt>
   14cb8:	ldr	r3, [r5]
   14cbc:	ldr	r2, [r5, #24]
   14cc0:	str	r2, [sp, #20]
   14cc4:	ldr	r2, [r5, #20]
   14cc8:	str	r2, [sp, #16]
   14ccc:	ldr	r2, [r5, #16]
   14cd0:	str	r2, [sp, #12]
   14cd4:	ldr	r2, [r5, #12]
   14cd8:	str	r2, [sp, #8]
   14cdc:	ldr	r2, [r5, #8]
   14ce0:	str	r2, [sp, #4]
   14ce4:	ldr	r2, [r5, #4]
   14ce8:	str	r2, [sp]
   14cec:	mov	r2, r0
   14cf0:	mov	r1, #1
   14cf4:	mov	r0, r4
   14cf8:	bl	110e4 <__fprintf_chk@plt>
   14cfc:	b	14b60 <__assert_fail@plt+0x39d4>
   14d00:	mov	r2, #5
   14d04:	ldr	r1, [pc, #348]	; 14e68 <__assert_fail@plt+0x3cdc>
   14d08:	mov	r0, #0
   14d0c:	bl	10f4c <dcgettext@plt>
   14d10:	ldr	r3, [r5]
   14d14:	ldr	r2, [r5, #28]
   14d18:	str	r2, [sp, #24]
   14d1c:	ldr	r2, [r5, #24]
   14d20:	str	r2, [sp, #20]
   14d24:	ldr	r2, [r5, #20]
   14d28:	str	r2, [sp, #16]
   14d2c:	ldr	r2, [r5, #16]
   14d30:	str	r2, [sp, #12]
   14d34:	ldr	r2, [r5, #12]
   14d38:	str	r2, [sp, #8]
   14d3c:	ldr	r2, [r5, #8]
   14d40:	str	r2, [sp, #4]
   14d44:	ldr	r2, [r5, #4]
   14d48:	str	r2, [sp]
   14d4c:	mov	r2, r0
   14d50:	mov	r1, #1
   14d54:	mov	r0, r4
   14d58:	bl	110e4 <__fprintf_chk@plt>
   14d5c:	b	14b60 <__assert_fail@plt+0x39d4>
   14d60:	mov	r2, #5
   14d64:	ldr	r1, [pc, #256]	; 14e6c <__assert_fail@plt+0x3ce0>
   14d68:	mov	r0, #0
   14d6c:	bl	10f4c <dcgettext@plt>
   14d70:	ldr	r3, [r5]
   14d74:	ldr	r2, [r5, #32]
   14d78:	str	r2, [sp, #28]
   14d7c:	ldr	r2, [r5, #28]
   14d80:	str	r2, [sp, #24]
   14d84:	ldr	r2, [r5, #24]
   14d88:	str	r2, [sp, #20]
   14d8c:	ldr	r2, [r5, #20]
   14d90:	str	r2, [sp, #16]
   14d94:	ldr	r2, [r5, #16]
   14d98:	str	r2, [sp, #12]
   14d9c:	ldr	r2, [r5, #12]
   14da0:	str	r2, [sp, #8]
   14da4:	ldr	r2, [r5, #8]
   14da8:	str	r2, [sp, #4]
   14dac:	ldr	r2, [r5, #4]
   14db0:	str	r2, [sp]
   14db4:	mov	r2, r0
   14db8:	mov	r1, #1
   14dbc:	mov	r0, r4
   14dc0:	bl	110e4 <__fprintf_chk@plt>
   14dc4:	b	14b60 <__assert_fail@plt+0x39d4>
   14dc8:	mov	r2, #5
   14dcc:	ldr	r1, [pc, #156]	; 14e70 <__assert_fail@plt+0x3ce4>
   14dd0:	mov	r0, #0
   14dd4:	bl	10f4c <dcgettext@plt>
   14dd8:	ldr	r3, [r5]
   14ddc:	ldr	r2, [r5, #32]
   14de0:	str	r2, [sp, #28]
   14de4:	ldr	r2, [r5, #28]
   14de8:	str	r2, [sp, #24]
   14dec:	ldr	r2, [r5, #24]
   14df0:	str	r2, [sp, #20]
   14df4:	ldr	r2, [r5, #20]
   14df8:	str	r2, [sp, #16]
   14dfc:	ldr	r2, [r5, #16]
   14e00:	str	r2, [sp, #12]
   14e04:	ldr	r2, [r5, #12]
   14e08:	str	r2, [sp, #8]
   14e0c:	ldr	r2, [r5, #8]
   14e10:	str	r2, [sp, #4]
   14e14:	ldr	r2, [r5, #4]
   14e18:	str	r2, [sp]
   14e1c:	mov	r2, r0
   14e20:	mov	r1, #1
   14e24:	mov	r0, r4
   14e28:	bl	110e4 <__fprintf_chk@plt>
   14e2c:	b	14b60 <__assert_fail@plt+0x39d4>
   14e30:	andeq	r6, r1, r4, asr #23
   14e34:	ldrdeq	r6, [r1], -r8
   14e38:	andeq	r0, r0, r6, ror #15
   14e3c:			; <UNDEFINED> instruction: 0x00016eb0
   14e40:	ldrdeq	r6, [r1], -ip
   14e44:	andeq	r6, r1, r8, lsl #25
   14e48:	ldrdeq	r6, [r1], -r0
   14e4c:	andeq	r6, r1, ip, lsr #25
   14e50:			; <UNDEFINED> instruction: 0x00016cbc
   14e54:	ldrdeq	r6, [r1], -r4
   14e58:	strdeq	r6, [r1], -r0
   14e5c:	andeq	r6, r1, r0, lsl sp
   14e60:	andeq	r6, r1, r4, lsr sp
   14e64:	andeq	r6, r1, ip, asr sp
   14e68:	andeq	r6, r1, r8, lsl #27
   14e6c:			; <UNDEFINED> instruction: 0x00016db8
   14e70:	andeq	r6, r1, ip, ror #27
   14e74:	push	{r4, r5, lr}
   14e78:	sub	sp, sp, #12
   14e7c:	ldr	r5, [sp, #24]
   14e80:	ldr	ip, [r5]
   14e84:	cmp	ip, #0
   14e88:	beq	14eb8 <__assert_fail@plt+0x3d2c>
   14e8c:	mov	lr, r5
   14e90:	mov	ip, #0
   14e94:	add	ip, ip, #1
   14e98:	ldr	r4, [lr, #4]!
   14e9c:	cmp	r4, #0
   14ea0:	bne	14e94 <__assert_fail@plt+0x3d08>
   14ea4:	str	ip, [sp, #4]
   14ea8:	str	r5, [sp]
   14eac:	bl	14a54 <__assert_fail@plt+0x38c8>
   14eb0:	add	sp, sp, #12
   14eb4:	pop	{r4, r5, pc}
   14eb8:	mov	ip, #0
   14ebc:	b	14ea4 <__assert_fail@plt+0x3d18>
   14ec0:	push	{r4, r5, lr}
   14ec4:	sub	sp, sp, #52	; 0x34
   14ec8:	ldr	r4, [sp, #64]	; 0x40
   14ecc:	sub	r4, r4, #4
   14ed0:	add	r5, sp, #4
   14ed4:	mov	ip, #0
   14ed8:	ldr	lr, [r4, #4]!
   14edc:	str	lr, [r5, #4]!
   14ee0:	cmp	lr, #0
   14ee4:	beq	14ef4 <__assert_fail@plt+0x3d68>
   14ee8:	add	ip, ip, #1
   14eec:	cmp	ip, #10
   14ef0:	bne	14ed8 <__assert_fail@plt+0x3d4c>
   14ef4:	str	ip, [sp, #4]
   14ef8:	add	ip, sp, #8
   14efc:	str	ip, [sp]
   14f00:	bl	14a54 <__assert_fail@plt+0x38c8>
   14f04:	add	sp, sp, #52	; 0x34
   14f08:	pop	{r4, r5, pc}
   14f0c:	push	{r3}		; (str r3, [sp, #-4]!)
   14f10:	push	{lr}		; (str lr, [sp, #-4]!)
   14f14:	sub	sp, sp, #16
   14f18:	add	r3, sp, #24
   14f1c:	str	r3, [sp, #12]
   14f20:	str	r3, [sp]
   14f24:	ldr	r3, [sp, #20]
   14f28:	bl	14ec0 <__assert_fail@plt+0x3d34>
   14f2c:	add	sp, sp, #16
   14f30:	pop	{lr}		; (ldr lr, [sp], #4)
   14f34:	add	sp, sp, #4
   14f38:	bx	lr
   14f3c:	push	{r4, lr}
   14f40:	ldr	r3, [pc, #112]	; 14fb8 <__assert_fail@plt+0x3e2c>
   14f44:	ldr	r1, [r3]
   14f48:	mov	r0, #10
   14f4c:	bl	10f40 <fputc_unlocked@plt>
   14f50:	mov	r2, #5
   14f54:	ldr	r1, [pc, #96]	; 14fbc <__assert_fail@plt+0x3e30>
   14f58:	mov	r0, #0
   14f5c:	bl	10f4c <dcgettext@plt>
   14f60:	ldr	r2, [pc, #88]	; 14fc0 <__assert_fail@plt+0x3e34>
   14f64:	mov	r1, r0
   14f68:	mov	r0, #1
   14f6c:	bl	110cc <__printf_chk@plt>
   14f70:	mov	r2, #5
   14f74:	ldr	r1, [pc, #72]	; 14fc4 <__assert_fail@plt+0x3e38>
   14f78:	mov	r0, #0
   14f7c:	bl	10f4c <dcgettext@plt>
   14f80:	ldr	r3, [pc, #64]	; 14fc8 <__assert_fail@plt+0x3e3c>
   14f84:	ldr	r2, [pc, #64]	; 14fcc <__assert_fail@plt+0x3e40>
   14f88:	mov	r1, r0
   14f8c:	mov	r0, #1
   14f90:	bl	110cc <__printf_chk@plt>
   14f94:	mov	r2, #5
   14f98:	ldr	r1, [pc, #48]	; 14fd0 <__assert_fail@plt+0x3e44>
   14f9c:	mov	r0, #0
   14fa0:	bl	10f4c <dcgettext@plt>
   14fa4:	ldr	r2, [pc, #40]	; 14fd4 <__assert_fail@plt+0x3e48>
   14fa8:	mov	r1, r0
   14fac:	mov	r0, #1
   14fb0:	bl	110cc <__printf_chk@plt>
   14fb4:	pop	{r4, pc}
   14fb8:	andeq	r7, r2, ip, ror r1
   14fbc:	andeq	r6, r1, r8, lsr #28
   14fc0:	andeq	r6, r1, ip, lsr lr
   14fc4:	andeq	r6, r1, r4, asr lr
   14fc8:	andeq	r6, r1, r4, lsr #16
   14fcc:	andeq	r6, r1, ip, asr #16
   14fd0:	andeq	r6, r1, r8, ror #28
   14fd4:	muleq	r1, r0, lr
   14fd8:	push	{r4, lr}
   14fdc:	bl	1560c <__assert_fail@plt+0x4480>
   14fe0:	cmp	r0, #0
   14fe4:	popne	{r4, pc}
   14fe8:	bl	1557c <__assert_fail@plt+0x43f0>
   14fec:	push	{r4, lr}
   14ff0:	bl	1560c <__assert_fail@plt+0x4480>
   14ff4:	cmp	r0, #0
   14ff8:	popne	{r4, pc}
   14ffc:	bl	1557c <__assert_fail@plt+0x43f0>
   15000:	push	{r4, lr}
   15004:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   15008:	pop	{r4, pc}
   1500c:	push	{r4, r5, r6, lr}
   15010:	mov	r5, r0
   15014:	mov	r4, r1
   15018:	bl	1563c <__assert_fail@plt+0x44b0>
   1501c:	cmp	r0, #0
   15020:	popne	{r4, r5, r6, pc}
   15024:	adds	r4, r4, #0
   15028:	movne	r4, #1
   1502c:	cmp	r5, #0
   15030:	orreq	r4, r4, #1
   15034:	cmp	r4, #0
   15038:	popeq	{r4, r5, r6, pc}
   1503c:	bl	1557c <__assert_fail@plt+0x43f0>
   15040:	push	{r4, lr}
   15044:	cmp	r1, #0
   15048:	orreq	r1, r1, #1
   1504c:	bl	1563c <__assert_fail@plt+0x44b0>
   15050:	cmp	r0, #0
   15054:	popne	{r4, pc}
   15058:	bl	1557c <__assert_fail@plt+0x43f0>
   1505c:	push	{r4, r5, r6, lr}
   15060:	mov	r6, r0
   15064:	mov	r5, r1
   15068:	mov	r4, r2
   1506c:	bl	15944 <__assert_fail@plt+0x47b8>
   15070:	cmp	r0, #0
   15074:	popne	{r4, r5, r6, pc}
   15078:	cmp	r6, #0
   1507c:	beq	1508c <__assert_fail@plt+0x3f00>
   15080:	cmp	r5, #0
   15084:	cmpne	r4, #0
   15088:	popeq	{r4, r5, r6, pc}
   1508c:	bl	1557c <__assert_fail@plt+0x43f0>
   15090:	push	{r4, lr}
   15094:	bl	1505c <__assert_fail@plt+0x3ed0>
   15098:	pop	{r4, pc}
   1509c:	push	{r4, lr}
   150a0:	mov	ip, r1
   150a4:	mov	r3, r2
   150a8:	cmp	r2, #0
   150ac:	cmpne	r1, #0
   150b0:	moveq	r3, #1
   150b4:	moveq	ip, r3
   150b8:	mov	r2, r3
   150bc:	mov	r1, ip
   150c0:	bl	15944 <__assert_fail@plt+0x47b8>
   150c4:	cmp	r0, #0
   150c8:	popne	{r4, pc}
   150cc:	bl	1557c <__assert_fail@plt+0x43f0>
   150d0:	push	{r4, lr}
   150d4:	mov	r2, r1
   150d8:	mov	r1, r0
   150dc:	mov	r0, #0
   150e0:	bl	1505c <__assert_fail@plt+0x3ed0>
   150e4:	pop	{r4, pc}
   150e8:	push	{r4, lr}
   150ec:	mov	r2, r1
   150f0:	mov	r1, r0
   150f4:	mov	r0, #0
   150f8:	bl	1509c <__assert_fail@plt+0x3f10>
   150fc:	pop	{r4, pc}
   15100:	push	{r4, r5, r6, r7, r8, lr}
   15104:	mov	r5, r1
   15108:	mov	r6, r2
   1510c:	ldr	r4, [r1]
   15110:	subs	r7, r0, #0
   15114:	beq	15130 <__assert_fail@plt+0x3fa4>
   15118:	lsr	r2, r4, #1
   1511c:	add	r3, r2, #1
   15120:	mvn	r3, r3
   15124:	cmp	r4, r3
   15128:	bls	15154 <__assert_fail@plt+0x3fc8>
   1512c:	bl	1557c <__assert_fail@plt+0x43f0>
   15130:	cmp	r4, #0
   15134:	bne	1515c <__assert_fail@plt+0x3fd0>
   15138:	mov	r1, r2
   1513c:	mov	r0, #64	; 0x40
   15140:	bl	15990 <__assert_fail@plt+0x4804>
   15144:	cmp	r0, #0
   15148:	movne	r4, r0
   1514c:	addeq	r4, r0, #1
   15150:	b	1515c <__assert_fail@plt+0x3fd0>
   15154:	add	r4, r4, #1
   15158:	add	r4, r4, r2
   1515c:	mov	r2, r6
   15160:	mov	r1, r4
   15164:	mov	r0, r7
   15168:	bl	1505c <__assert_fail@plt+0x3ed0>
   1516c:	str	r4, [r5]
   15170:	pop	{r4, r5, r6, r7, r8, pc}
   15174:	push	{r4, lr}
   15178:	mov	r2, #1
   1517c:	bl	15100 <__assert_fail@plt+0x3f74>
   15180:	pop	{r4, pc}
   15184:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15188:	sub	sp, sp, #12
   1518c:	mov	fp, r0
   15190:	mov	sl, r1
   15194:	mov	r9, r2
   15198:	mov	r7, r3
   1519c:	ldr	r6, [sp, #48]	; 0x30
   151a0:	ldr	r5, [r1]
   151a4:	asrs	r4, r5, #1
   151a8:	bmi	15304 <__assert_fail@plt+0x4178>
   151ac:	cmp	r5, #0
   151b0:	blt	15318 <__assert_fail@plt+0x418c>
   151b4:	mvn	r3, #-2147483648	; 0x80000000
   151b8:	sub	r3, r3, r4
   151bc:	cmp	r5, r3
   151c0:	movle	r3, #0
   151c4:	movgt	r3, #1
   151c8:	cmp	r3, #0
   151cc:	addeq	r4, r4, r5
   151d0:	mvnne	r4, #-2147483648	; 0x80000000
   151d4:	mvn	r8, r7
   151d8:	lsr	r8, r8, #31
   151dc:	cmp	r7, r4
   151e0:	movge	r3, #0
   151e4:	andlt	r3, r8, #1
   151e8:	cmp	r3, #0
   151ec:	movne	r4, r7
   151f0:	cmp	r6, #0
   151f4:	blt	1532c <__assert_fail@plt+0x41a0>
   151f8:	cmp	r6, #0
   151fc:	beq	153d8 <__assert_fail@plt+0x424c>
   15200:	cmp	r4, #0
   15204:	blt	15388 <__assert_fail@plt+0x41fc>
   15208:	mov	r1, r6
   1520c:	mvn	r0, #-2147483648	; 0x80000000
   15210:	bl	15b9c <__assert_fail@plt+0x4a10>
   15214:	cmp	r0, r4
   15218:	movge	r0, #0
   1521c:	movlt	r0, #1
   15220:	cmp	r0, #0
   15224:	mvnne	r3, #-2147483648	; 0x80000000
   15228:	strne	r3, [sp, #4]
   1522c:	beq	153c0 <__assert_fail@plt+0x4234>
   15230:	mov	r1, r6
   15234:	ldr	r0, [sp, #4]
   15238:	bl	15b9c <__assert_fail@plt+0x4a10>
   1523c:	mov	r4, r0
   15240:	mov	r1, r6
   15244:	ldr	r0, [sp, #4]
   15248:	bl	15dbc <__assert_fail@plt+0x4c30>
   1524c:	ldr	r3, [sp, #4]
   15250:	sub	r1, r3, r1
   15254:	cmp	fp, #0
   15258:	moveq	r3, #0
   1525c:	streq	r3, [sl]
   15260:	sub	r3, r4, r5
   15264:	cmp	r3, r9
   15268:	bge	152f0 <__assert_fail@plt+0x4164>
   1526c:	cmp	r9, #0
   15270:	blt	153e4 <__assert_fail@plt+0x4258>
   15274:	cmp	r5, #0
   15278:	blt	153f8 <__assert_fail@plt+0x426c>
   1527c:	mvn	r3, #-2147483648	; 0x80000000
   15280:	sub	r3, r3, r9
   15284:	cmp	r5, r3
   15288:	movle	r3, #0
   1528c:	movgt	r3, #1
   15290:	cmp	r3, #0
   15294:	bne	154a0 <__assert_fail@plt+0x4314>
   15298:	add	r5, r5, r9
   1529c:	mov	r4, r5
   152a0:	cmp	r7, r5
   152a4:	movge	r7, #0
   152a8:	andlt	r7, r8, #1
   152ac:	cmp	r7, #0
   152b0:	bne	154a0 <__assert_fail@plt+0x4314>
   152b4:	cmp	r6, #0
   152b8:	blt	1540c <__assert_fail@plt+0x4280>
   152bc:	cmp	r6, #0
   152c0:	beq	152ec <__assert_fail@plt+0x4160>
   152c4:	cmp	r5, #0
   152c8:	blt	15468 <__assert_fail@plt+0x42dc>
   152cc:	mov	r1, r6
   152d0:	mvn	r0, #-2147483648	; 0x80000000
   152d4:	bl	15b9c <__assert_fail@plt+0x4a10>
   152d8:	cmp	r5, r0
   152dc:	movle	r0, #0
   152e0:	movgt	r0, #1
   152e4:	cmp	r0, #0
   152e8:	bne	154a0 <__assert_fail@plt+0x4314>
   152ec:	mul	r1, r5, r6
   152f0:	mov	r0, fp
   152f4:	bl	1500c <__assert_fail@plt+0x3e80>
   152f8:	str	r4, [sl]
   152fc:	add	sp, sp, #12
   15300:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15304:	rsb	r3, r4, #-2147483648	; 0x80000000
   15308:	cmp	r5, r3
   1530c:	movge	r3, #0
   15310:	movlt	r3, #1
   15314:	b	151c8 <__assert_fail@plt+0x403c>
   15318:	rsb	r3, r5, #-2147483648	; 0x80000000
   1531c:	cmp	r4, r3
   15320:	movge	r3, #0
   15324:	movlt	r3, #1
   15328:	b	151c8 <__assert_fail@plt+0x403c>
   1532c:	cmp	r4, #0
   15330:	blt	15358 <__assert_fail@plt+0x41cc>
   15334:	cmn	r6, #1
   15338:	beq	15374 <__assert_fail@plt+0x41e8>
   1533c:	mov	r1, r6
   15340:	mov	r0, #-2147483648	; 0x80000000
   15344:	bl	15b9c <__assert_fail@plt+0x4a10>
   15348:	cmp	r0, r4
   1534c:	movge	r0, #0
   15350:	movlt	r0, #1
   15354:	b	15220 <__assert_fail@plt+0x4094>
   15358:	mov	r1, r6
   1535c:	mvn	r0, #-2147483648	; 0x80000000
   15360:	bl	15b9c <__assert_fail@plt+0x4a10>
   15364:	cmp	r0, r4
   15368:	movle	r0, #0
   1536c:	movgt	r0, #1
   15370:	b	15220 <__assert_fail@plt+0x4094>
   15374:	add	r0, r4, #-2147483648	; 0x80000000
   15378:	cmp	r0, #0
   1537c:	movle	r0, #0
   15380:	movgt	r0, #1
   15384:	b	15220 <__assert_fail@plt+0x4094>
   15388:	cmn	r4, #1
   1538c:	beq	153ac <__assert_fail@plt+0x4220>
   15390:	mov	r1, r4
   15394:	mov	r0, #-2147483648	; 0x80000000
   15398:	bl	15b9c <__assert_fail@plt+0x4a10>
   1539c:	cmp	r6, r0
   153a0:	movle	r0, #0
   153a4:	movgt	r0, #1
   153a8:	b	15220 <__assert_fail@plt+0x4094>
   153ac:	add	r0, r6, #-2147483648	; 0x80000000
   153b0:	cmp	r0, #0
   153b4:	movle	r0, #0
   153b8:	movgt	r0, #1
   153bc:	b	15220 <__assert_fail@plt+0x4094>
   153c0:	mul	r1, r6, r4
   153c4:	cmp	r1, #63	; 0x3f
   153c8:	movle	r3, #64	; 0x40
   153cc:	strle	r3, [sp, #4]
   153d0:	bgt	15254 <__assert_fail@plt+0x40c8>
   153d4:	b	15230 <__assert_fail@plt+0x40a4>
   153d8:	mov	r3, #64	; 0x40
   153dc:	str	r3, [sp, #4]
   153e0:	b	15230 <__assert_fail@plt+0x40a4>
   153e4:	rsb	r3, r9, #-2147483648	; 0x80000000
   153e8:	cmp	r5, r3
   153ec:	movge	r3, #0
   153f0:	movlt	r3, #1
   153f4:	b	15290 <__assert_fail@plt+0x4104>
   153f8:	rsb	r3, r5, #-2147483648	; 0x80000000
   153fc:	cmp	r9, r3
   15400:	movge	r3, #0
   15404:	movlt	r3, #1
   15408:	b	15290 <__assert_fail@plt+0x4104>
   1540c:	cmp	r5, #0
   15410:	blt	15438 <__assert_fail@plt+0x42ac>
   15414:	cmn	r6, #1
   15418:	beq	15454 <__assert_fail@plt+0x42c8>
   1541c:	mov	r1, r6
   15420:	mov	r0, #-2147483648	; 0x80000000
   15424:	bl	15b9c <__assert_fail@plt+0x4a10>
   15428:	cmp	r5, r0
   1542c:	movle	r0, #0
   15430:	movgt	r0, #1
   15434:	b	152e4 <__assert_fail@plt+0x4158>
   15438:	mov	r1, r6
   1543c:	mvn	r0, #-2147483648	; 0x80000000
   15440:	bl	15b9c <__assert_fail@plt+0x4a10>
   15444:	cmp	r5, r0
   15448:	movge	r0, #0
   1544c:	movlt	r0, #1
   15450:	b	152e4 <__assert_fail@plt+0x4158>
   15454:	add	r0, r5, #-2147483648	; 0x80000000
   15458:	cmp	r0, #0
   1545c:	movle	r0, #0
   15460:	movgt	r0, #1
   15464:	b	152e4 <__assert_fail@plt+0x4158>
   15468:	cmn	r5, #1
   1546c:	beq	1548c <__assert_fail@plt+0x4300>
   15470:	mov	r1, r5
   15474:	mov	r0, #-2147483648	; 0x80000000
   15478:	bl	15b9c <__assert_fail@plt+0x4a10>
   1547c:	cmp	r6, r0
   15480:	movle	r0, #0
   15484:	movgt	r0, #1
   15488:	b	152e4 <__assert_fail@plt+0x4158>
   1548c:	add	r0, r6, #-2147483648	; 0x80000000
   15490:	cmp	r0, #0
   15494:	movle	r0, #0
   15498:	movgt	r0, #1
   1549c:	b	152e4 <__assert_fail@plt+0x4158>
   154a0:	bl	1557c <__assert_fail@plt+0x43f0>
   154a4:	push	{r4, lr}
   154a8:	bl	155bc <__assert_fail@plt+0x4430>
   154ac:	cmp	r0, #0
   154b0:	popne	{r4, pc}
   154b4:	bl	1557c <__assert_fail@plt+0x43f0>
   154b8:	push	{r4, lr}
   154bc:	mov	r1, #1
   154c0:	bl	154a4 <__assert_fail@plt+0x4318>
   154c4:	pop	{r4, pc}
   154c8:	push	{r4, lr}
   154cc:	bl	155bc <__assert_fail@plt+0x4430>
   154d0:	cmp	r0, #0
   154d4:	popne	{r4, pc}
   154d8:	bl	1557c <__assert_fail@plt+0x43f0>
   154dc:	push	{r4, lr}
   154e0:	mov	r1, #1
   154e4:	bl	154c8 <__assert_fail@plt+0x433c>
   154e8:	pop	{r4, pc}
   154ec:	push	{r4, r5, r6, lr}
   154f0:	mov	r5, r0
   154f4:	mov	r4, r1
   154f8:	mov	r0, r1
   154fc:	bl	14fd8 <__assert_fail@plt+0x3e4c>
   15500:	mov	r2, r4
   15504:	mov	r1, r5
   15508:	bl	10f04 <memcpy@plt>
   1550c:	pop	{r4, r5, r6, pc}
   15510:	push	{r4, r5, r6, lr}
   15514:	mov	r5, r0
   15518:	mov	r4, r1
   1551c:	mov	r0, r1
   15520:	bl	14fec <__assert_fail@plt+0x3e60>
   15524:	mov	r2, r4
   15528:	mov	r1, r5
   1552c:	bl	10f04 <memcpy@plt>
   15530:	pop	{r4, r5, r6, pc}
   15534:	push	{r4, r5, r6, lr}
   15538:	mov	r5, r0
   1553c:	mov	r4, r1
   15540:	add	r0, r1, #1
   15544:	bl	14fec <__assert_fail@plt+0x3e60>
   15548:	mov	r2, #0
   1554c:	strb	r2, [r0, r4]
   15550:	mov	r2, r4
   15554:	mov	r1, r5
   15558:	bl	10f04 <memcpy@plt>
   1555c:	pop	{r4, r5, r6, pc}
   15560:	push	{r4, lr}
   15564:	mov	r4, r0
   15568:	bl	11078 <strlen@plt>
   1556c:	add	r1, r0, #1
   15570:	mov	r0, r4
   15574:	bl	154ec <__assert_fail@plt+0x4360>
   15578:	pop	{r4, pc}
   1557c:	push	{r4, lr}
   15580:	ldr	r3, [pc, #40]	; 155b0 <__assert_fail@plt+0x4424>
   15584:	ldr	r4, [r3]
   15588:	mov	r2, #5
   1558c:	ldr	r1, [pc, #32]	; 155b4 <__assert_fail@plt+0x4428>
   15590:	mov	r0, #0
   15594:	bl	10f4c <dcgettext@plt>
   15598:	mov	r3, r0
   1559c:	ldr	r2, [pc, #20]	; 155b8 <__assert_fail@plt+0x442c>
   155a0:	mov	r1, #0
   155a4:	mov	r0, r4
   155a8:	bl	10fd0 <error@plt>
   155ac:	bl	11174 <abort@plt>
   155b0:	andeq	r7, r2, r4, lsr #2
   155b4:	andeq	r6, r1, r0, ror #29
   155b8:	muleq	r1, ip, sl
   155bc:	push	{r4, lr}
   155c0:	mov	r2, r0
   155c4:	mov	r3, r1
   155c8:	cmp	r1, #0
   155cc:	cmpne	r0, #0
   155d0:	moveq	r3, #1
   155d4:	moveq	r2, r3
   155d8:	umull	r0, r1, r2, r3
   155dc:	cmp	r0, #0
   155e0:	cmpge	r1, #0
   155e4:	bne	155f8 <__assert_fail@plt+0x446c>
   155e8:	mov	r1, r3
   155ec:	mov	r0, r2
   155f0:	bl	10e98 <calloc@plt>
   155f4:	pop	{r4, pc}
   155f8:	bl	11090 <__errno_location@plt>
   155fc:	mov	r3, #12
   15600:	str	r3, [r0]
   15604:	mov	r0, #0
   15608:	pop	{r4, pc}
   1560c:	push	{r4, lr}
   15610:	cmp	r0, #0
   15614:	moveq	r0, #1
   15618:	cmp	r0, #0
   1561c:	blt	15628 <__assert_fail@plt+0x449c>
   15620:	bl	10ff4 <malloc@plt>
   15624:	pop	{r4, pc}
   15628:	bl	11090 <__errno_location@plt>
   1562c:	mov	r3, #12
   15630:	str	r3, [r0]
   15634:	mov	r0, #0
   15638:	pop	{r4, pc}
   1563c:	push	{r4, lr}
   15640:	cmp	r0, #0
   15644:	beq	15660 <__assert_fail@plt+0x44d4>
   15648:	cmp	r1, #0
   1564c:	beq	1566c <__assert_fail@plt+0x44e0>
   15650:	cmp	r1, #0
   15654:	blt	15678 <__assert_fail@plt+0x44ec>
   15658:	bl	10f70 <realloc@plt>
   1565c:	pop	{r4, pc}
   15660:	mov	r0, r1
   15664:	bl	1560c <__assert_fail@plt+0x4480>
   15668:	pop	{r4, pc}
   1566c:	bl	12b40 <__assert_fail@plt+0x19b4>
   15670:	mov	r0, #0
   15674:	pop	{r4, pc}
   15678:	bl	11090 <__errno_location@plt>
   1567c:	mov	r3, #12
   15680:	str	r3, [r0]
   15684:	mov	r0, #0
   15688:	pop	{r4, pc}
   1568c:	push	{r4, r5, r6, lr}
   15690:	mov	r5, r0
   15694:	bl	10fb8 <__fpending@plt>
   15698:	mov	r6, r0
   1569c:	ldr	r4, [r5]
   156a0:	and	r4, r4, #32
   156a4:	mov	r0, r5
   156a8:	bl	15704 <__assert_fail@plt+0x4578>
   156ac:	cmp	r4, #0
   156b0:	bne	156d8 <__assert_fail@plt+0x454c>
   156b4:	cmp	r0, #0
   156b8:	popeq	{r4, r5, r6, pc}
   156bc:	cmp	r6, #0
   156c0:	bne	156f4 <__assert_fail@plt+0x4568>
   156c4:	bl	11090 <__errno_location@plt>
   156c8:	ldr	r0, [r0]
   156cc:	subs	r0, r0, #9
   156d0:	mvnne	r0, #0
   156d4:	pop	{r4, r5, r6, pc}
   156d8:	cmp	r0, #0
   156dc:	bne	156fc <__assert_fail@plt+0x4570>
   156e0:	bl	11090 <__errno_location@plt>
   156e4:	mov	r3, #0
   156e8:	str	r3, [r0]
   156ec:	mvn	r0, #0
   156f0:	pop	{r4, r5, r6, pc}
   156f4:	mvn	r0, #0
   156f8:	pop	{r4, r5, r6, pc}
   156fc:	mvn	r0, #0
   15700:	pop	{r4, r5, r6, pc}
   15704:	push	{r4, r5, r6, lr}
   15708:	sub	sp, sp, #8
   1570c:	mov	r4, r0
   15710:	bl	110d8 <fileno@plt>
   15714:	cmp	r0, #0
   15718:	blt	15790 <__assert_fail@plt+0x4604>
   1571c:	mov	r0, r4
   15720:	bl	11018 <__freading@plt>
   15724:	cmp	r0, #0
   15728:	beq	1575c <__assert_fail@plt+0x45d0>
   1572c:	mov	r0, r4
   15730:	bl	110d8 <fileno@plt>
   15734:	mov	r3, #1
   15738:	str	r3, [sp]
   1573c:	mov	r2, #0
   15740:	mov	r3, #0
   15744:	bl	10fa0 <lseek64@plt>
   15748:	mvn	r2, #0
   1574c:	mvn	r3, #0
   15750:	cmp	r1, r3
   15754:	cmpeq	r0, r2
   15758:	beq	1579c <__assert_fail@plt+0x4610>
   1575c:	mov	r0, r4
   15760:	bl	157ac <__assert_fail@plt+0x4620>
   15764:	cmp	r0, #0
   15768:	beq	1579c <__assert_fail@plt+0x4610>
   1576c:	bl	11090 <__errno_location@plt>
   15770:	mov	r5, r0
   15774:	ldr	r6, [r0]
   15778:	mov	r0, r4
   1577c:	bl	110f0 <fclose@plt>
   15780:	cmp	r6, #0
   15784:	strne	r6, [r5]
   15788:	mvnne	r0, #0
   1578c:	b	157a4 <__assert_fail@plt+0x4618>
   15790:	mov	r0, r4
   15794:	bl	110f0 <fclose@plt>
   15798:	b	157a4 <__assert_fail@plt+0x4618>
   1579c:	mov	r0, r4
   157a0:	bl	110f0 <fclose@plt>
   157a4:	add	sp, sp, #8
   157a8:	pop	{r4, r5, r6, pc}
   157ac:	push	{r4, lr}
   157b0:	sub	sp, sp, #8
   157b4:	subs	r4, r0, #0
   157b8:	beq	157cc <__assert_fail@plt+0x4640>
   157bc:	mov	r0, r4
   157c0:	bl	11018 <__freading@plt>
   157c4:	cmp	r0, #0
   157c8:	bne	157dc <__assert_fail@plt+0x4650>
   157cc:	mov	r0, r4
   157d0:	bl	10ec8 <fflush@plt>
   157d4:	add	sp, sp, #8
   157d8:	pop	{r4, pc}
   157dc:	ldr	r3, [r4]
   157e0:	tst	r3, #256	; 0x100
   157e4:	bne	157f4 <__assert_fail@plt+0x4668>
   157e8:	mov	r0, r4
   157ec:	bl	10ec8 <fflush@plt>
   157f0:	b	157d4 <__assert_fail@plt+0x4648>
   157f4:	mov	r3, #1
   157f8:	str	r3, [sp]
   157fc:	mov	r2, #0
   15800:	mov	r3, #0
   15804:	mov	r0, r4
   15808:	bl	15810 <__assert_fail@plt+0x4684>
   1580c:	b	157e8 <__assert_fail@plt+0x465c>
   15810:	push	{r4, r5, r6, r7, lr}
   15814:	sub	sp, sp, #12
   15818:	mov	r4, r0
   1581c:	mov	r6, r2
   15820:	mov	r7, r3
   15824:	ldr	r5, [sp, #32]
   15828:	ldr	r2, [r0, #8]
   1582c:	ldr	r3, [r0, #4]
   15830:	cmp	r2, r3
   15834:	beq	15854 <__assert_fail@plt+0x46c8>
   15838:	str	r5, [sp]
   1583c:	mov	r2, r6
   15840:	mov	r3, r7
   15844:	mov	r0, r4
   15848:	bl	110fc <fseeko64@plt>
   1584c:	add	sp, sp, #12
   15850:	pop	{r4, r5, r6, r7, pc}
   15854:	ldr	r2, [r0, #20]
   15858:	ldr	r3, [r0, #16]
   1585c:	cmp	r2, r3
   15860:	bne	15838 <__assert_fail@plt+0x46ac>
   15864:	ldr	r3, [r0, #36]	; 0x24
   15868:	cmp	r3, #0
   1586c:	bne	15838 <__assert_fail@plt+0x46ac>
   15870:	bl	110d8 <fileno@plt>
   15874:	str	r5, [sp]
   15878:	mov	r2, r6
   1587c:	mov	r3, r7
   15880:	bl	10fa0 <lseek64@plt>
   15884:	mvn	r2, #0
   15888:	mvn	r3, #0
   1588c:	cmp	r1, r3
   15890:	cmpeq	r0, r2
   15894:	beq	158b0 <__assert_fail@plt+0x4724>
   15898:	ldr	r3, [r4]
   1589c:	bic	r3, r3, #16
   158a0:	str	r3, [r4]
   158a4:	strd	r0, [r4, #80]	; 0x50
   158a8:	mov	r0, #0
   158ac:	b	1584c <__assert_fail@plt+0x46c0>
   158b0:	mvn	r0, #0
   158b4:	b	1584c <__assert_fail@plt+0x46c0>
   158b8:	push	{r4, lr}
   158bc:	mov	r0, #14
   158c0:	bl	1112c <nl_langinfo@plt>
   158c4:	cmp	r0, #0
   158c8:	beq	158e0 <__assert_fail@plt+0x4754>
   158cc:	ldrb	r2, [r0]
   158d0:	ldr	r3, [pc, #16]	; 158e8 <__assert_fail@plt+0x475c>
   158d4:	cmp	r2, #0
   158d8:	moveq	r0, r3
   158dc:	pop	{r4, pc}
   158e0:	ldr	r0, [pc]	; 158e8 <__assert_fail@plt+0x475c>
   158e4:	pop	{r4, pc}
   158e8:	strdeq	r6, [r1], -r4
   158ec:	push	{r4, r5, r6, r7, lr}
   158f0:	sub	sp, sp, #12
   158f4:	mov	r7, r1
   158f8:	mov	r5, r2
   158fc:	subs	r6, r0, #0
   15900:	addeq	r6, sp, #4
   15904:	mov	r0, r6
   15908:	bl	10fc4 <mbrtowc@plt>
   1590c:	mov	r4, r0
   15910:	cmp	r5, #0
   15914:	cmnne	r0, #3
   15918:	bhi	15928 <__assert_fail@plt+0x479c>
   1591c:	mov	r0, r4
   15920:	add	sp, sp, #12
   15924:	pop	{r4, r5, r6, r7, pc}
   15928:	mov	r0, #0
   1592c:	bl	12b98 <__assert_fail@plt+0x1a0c>
   15930:	cmp	r0, #0
   15934:	ldrbeq	r3, [r7]
   15938:	streq	r3, [r6]
   1593c:	moveq	r4, #1
   15940:	b	1591c <__assert_fail@plt+0x4790>
   15944:	push	{r4, r5, r6, lr}
   15948:	mov	r6, r0
   1594c:	mov	r5, r1
   15950:	subs	r4, r2, #0
   15954:	beq	15980 <__assert_fail@plt+0x47f4>
   15958:	mov	r1, r4
   1595c:	mvn	r0, #0
   15960:	bl	15990 <__assert_fail@plt+0x4804>
   15964:	cmp	r0, r5
   15968:	bcs	15980 <__assert_fail@plt+0x47f4>
   1596c:	bl	11090 <__errno_location@plt>
   15970:	mov	r3, #12
   15974:	str	r3, [r0]
   15978:	mov	r0, #0
   1597c:	pop	{r4, r5, r6, pc}
   15980:	mul	r1, r5, r4
   15984:	mov	r0, r6
   15988:	bl	1563c <__assert_fail@plt+0x44b0>
   1598c:	pop	{r4, r5, r6, pc}
   15990:	subs	r2, r1, #1
   15994:	bxeq	lr
   15998:	bcc	15b70 <__assert_fail@plt+0x49e4>
   1599c:	cmp	r0, r1
   159a0:	bls	15b54 <__assert_fail@plt+0x49c8>
   159a4:	tst	r1, r2
   159a8:	beq	15b60 <__assert_fail@plt+0x49d4>
   159ac:	clz	r3, r0
   159b0:	clz	r2, r1
   159b4:	sub	r3, r2, r3
   159b8:	rsbs	r3, r3, #31
   159bc:	addne	r3, r3, r3, lsl #1
   159c0:	mov	r2, #0
   159c4:	addne	pc, pc, r3, lsl #2
   159c8:	nop			; (mov r0, r0)
   159cc:	cmp	r0, r1, lsl #31
   159d0:	adc	r2, r2, r2
   159d4:	subcs	r0, r0, r1, lsl #31
   159d8:	cmp	r0, r1, lsl #30
   159dc:	adc	r2, r2, r2
   159e0:	subcs	r0, r0, r1, lsl #30
   159e4:	cmp	r0, r1, lsl #29
   159e8:	adc	r2, r2, r2
   159ec:	subcs	r0, r0, r1, lsl #29
   159f0:	cmp	r0, r1, lsl #28
   159f4:	adc	r2, r2, r2
   159f8:	subcs	r0, r0, r1, lsl #28
   159fc:	cmp	r0, r1, lsl #27
   15a00:	adc	r2, r2, r2
   15a04:	subcs	r0, r0, r1, lsl #27
   15a08:	cmp	r0, r1, lsl #26
   15a0c:	adc	r2, r2, r2
   15a10:	subcs	r0, r0, r1, lsl #26
   15a14:	cmp	r0, r1, lsl #25
   15a18:	adc	r2, r2, r2
   15a1c:	subcs	r0, r0, r1, lsl #25
   15a20:	cmp	r0, r1, lsl #24
   15a24:	adc	r2, r2, r2
   15a28:	subcs	r0, r0, r1, lsl #24
   15a2c:	cmp	r0, r1, lsl #23
   15a30:	adc	r2, r2, r2
   15a34:	subcs	r0, r0, r1, lsl #23
   15a38:	cmp	r0, r1, lsl #22
   15a3c:	adc	r2, r2, r2
   15a40:	subcs	r0, r0, r1, lsl #22
   15a44:	cmp	r0, r1, lsl #21
   15a48:	adc	r2, r2, r2
   15a4c:	subcs	r0, r0, r1, lsl #21
   15a50:	cmp	r0, r1, lsl #20
   15a54:	adc	r2, r2, r2
   15a58:	subcs	r0, r0, r1, lsl #20
   15a5c:	cmp	r0, r1, lsl #19
   15a60:	adc	r2, r2, r2
   15a64:	subcs	r0, r0, r1, lsl #19
   15a68:	cmp	r0, r1, lsl #18
   15a6c:	adc	r2, r2, r2
   15a70:	subcs	r0, r0, r1, lsl #18
   15a74:	cmp	r0, r1, lsl #17
   15a78:	adc	r2, r2, r2
   15a7c:	subcs	r0, r0, r1, lsl #17
   15a80:	cmp	r0, r1, lsl #16
   15a84:	adc	r2, r2, r2
   15a88:	subcs	r0, r0, r1, lsl #16
   15a8c:	cmp	r0, r1, lsl #15
   15a90:	adc	r2, r2, r2
   15a94:	subcs	r0, r0, r1, lsl #15
   15a98:	cmp	r0, r1, lsl #14
   15a9c:	adc	r2, r2, r2
   15aa0:	subcs	r0, r0, r1, lsl #14
   15aa4:	cmp	r0, r1, lsl #13
   15aa8:	adc	r2, r2, r2
   15aac:	subcs	r0, r0, r1, lsl #13
   15ab0:	cmp	r0, r1, lsl #12
   15ab4:	adc	r2, r2, r2
   15ab8:	subcs	r0, r0, r1, lsl #12
   15abc:	cmp	r0, r1, lsl #11
   15ac0:	adc	r2, r2, r2
   15ac4:	subcs	r0, r0, r1, lsl #11
   15ac8:	cmp	r0, r1, lsl #10
   15acc:	adc	r2, r2, r2
   15ad0:	subcs	r0, r0, r1, lsl #10
   15ad4:	cmp	r0, r1, lsl #9
   15ad8:	adc	r2, r2, r2
   15adc:	subcs	r0, r0, r1, lsl #9
   15ae0:	cmp	r0, r1, lsl #8
   15ae4:	adc	r2, r2, r2
   15ae8:	subcs	r0, r0, r1, lsl #8
   15aec:	cmp	r0, r1, lsl #7
   15af0:	adc	r2, r2, r2
   15af4:	subcs	r0, r0, r1, lsl #7
   15af8:	cmp	r0, r1, lsl #6
   15afc:	adc	r2, r2, r2
   15b00:	subcs	r0, r0, r1, lsl #6
   15b04:	cmp	r0, r1, lsl #5
   15b08:	adc	r2, r2, r2
   15b0c:	subcs	r0, r0, r1, lsl #5
   15b10:	cmp	r0, r1, lsl #4
   15b14:	adc	r2, r2, r2
   15b18:	subcs	r0, r0, r1, lsl #4
   15b1c:	cmp	r0, r1, lsl #3
   15b20:	adc	r2, r2, r2
   15b24:	subcs	r0, r0, r1, lsl #3
   15b28:	cmp	r0, r1, lsl #2
   15b2c:	adc	r2, r2, r2
   15b30:	subcs	r0, r0, r1, lsl #2
   15b34:	cmp	r0, r1, lsl #1
   15b38:	adc	r2, r2, r2
   15b3c:	subcs	r0, r0, r1, lsl #1
   15b40:	cmp	r0, r1
   15b44:	adc	r2, r2, r2
   15b48:	subcs	r0, r0, r1
   15b4c:	mov	r0, r2
   15b50:	bx	lr
   15b54:	moveq	r0, #1
   15b58:	movne	r0, #0
   15b5c:	bx	lr
   15b60:	clz	r2, r1
   15b64:	rsb	r2, r2, #31
   15b68:	lsr	r0, r0, r2
   15b6c:	bx	lr
   15b70:	cmp	r0, #0
   15b74:	mvnne	r0, #0
   15b78:	b	15eb0 <__assert_fail@plt+0x4d24>
   15b7c:	cmp	r1, #0
   15b80:	beq	15b70 <__assert_fail@plt+0x49e4>
   15b84:	push	{r0, r1, lr}
   15b88:	bl	15990 <__assert_fail@plt+0x4804>
   15b8c:	pop	{r1, r2, lr}
   15b90:	mul	r3, r2, r0
   15b94:	sub	r1, r1, r3
   15b98:	bx	lr
   15b9c:	cmp	r1, #0
   15ba0:	beq	15dac <__assert_fail@plt+0x4c20>
   15ba4:	eor	ip, r0, r1
   15ba8:	rsbmi	r1, r1, #0
   15bac:	subs	r2, r1, #1
   15bb0:	beq	15d78 <__assert_fail@plt+0x4bec>
   15bb4:	movs	r3, r0
   15bb8:	rsbmi	r3, r0, #0
   15bbc:	cmp	r3, r1
   15bc0:	bls	15d84 <__assert_fail@plt+0x4bf8>
   15bc4:	tst	r1, r2
   15bc8:	beq	15d94 <__assert_fail@plt+0x4c08>
   15bcc:	clz	r2, r3
   15bd0:	clz	r0, r1
   15bd4:	sub	r2, r0, r2
   15bd8:	rsbs	r2, r2, #31
   15bdc:	addne	r2, r2, r2, lsl #1
   15be0:	mov	r0, #0
   15be4:	addne	pc, pc, r2, lsl #2
   15be8:	nop			; (mov r0, r0)
   15bec:	cmp	r3, r1, lsl #31
   15bf0:	adc	r0, r0, r0
   15bf4:	subcs	r3, r3, r1, lsl #31
   15bf8:	cmp	r3, r1, lsl #30
   15bfc:	adc	r0, r0, r0
   15c00:	subcs	r3, r3, r1, lsl #30
   15c04:	cmp	r3, r1, lsl #29
   15c08:	adc	r0, r0, r0
   15c0c:	subcs	r3, r3, r1, lsl #29
   15c10:	cmp	r3, r1, lsl #28
   15c14:	adc	r0, r0, r0
   15c18:	subcs	r3, r3, r1, lsl #28
   15c1c:	cmp	r3, r1, lsl #27
   15c20:	adc	r0, r0, r0
   15c24:	subcs	r3, r3, r1, lsl #27
   15c28:	cmp	r3, r1, lsl #26
   15c2c:	adc	r0, r0, r0
   15c30:	subcs	r3, r3, r1, lsl #26
   15c34:	cmp	r3, r1, lsl #25
   15c38:	adc	r0, r0, r0
   15c3c:	subcs	r3, r3, r1, lsl #25
   15c40:	cmp	r3, r1, lsl #24
   15c44:	adc	r0, r0, r0
   15c48:	subcs	r3, r3, r1, lsl #24
   15c4c:	cmp	r3, r1, lsl #23
   15c50:	adc	r0, r0, r0
   15c54:	subcs	r3, r3, r1, lsl #23
   15c58:	cmp	r3, r1, lsl #22
   15c5c:	adc	r0, r0, r0
   15c60:	subcs	r3, r3, r1, lsl #22
   15c64:	cmp	r3, r1, lsl #21
   15c68:	adc	r0, r0, r0
   15c6c:	subcs	r3, r3, r1, lsl #21
   15c70:	cmp	r3, r1, lsl #20
   15c74:	adc	r0, r0, r0
   15c78:	subcs	r3, r3, r1, lsl #20
   15c7c:	cmp	r3, r1, lsl #19
   15c80:	adc	r0, r0, r0
   15c84:	subcs	r3, r3, r1, lsl #19
   15c88:	cmp	r3, r1, lsl #18
   15c8c:	adc	r0, r0, r0
   15c90:	subcs	r3, r3, r1, lsl #18
   15c94:	cmp	r3, r1, lsl #17
   15c98:	adc	r0, r0, r0
   15c9c:	subcs	r3, r3, r1, lsl #17
   15ca0:	cmp	r3, r1, lsl #16
   15ca4:	adc	r0, r0, r0
   15ca8:	subcs	r3, r3, r1, lsl #16
   15cac:	cmp	r3, r1, lsl #15
   15cb0:	adc	r0, r0, r0
   15cb4:	subcs	r3, r3, r1, lsl #15
   15cb8:	cmp	r3, r1, lsl #14
   15cbc:	adc	r0, r0, r0
   15cc0:	subcs	r3, r3, r1, lsl #14
   15cc4:	cmp	r3, r1, lsl #13
   15cc8:	adc	r0, r0, r0
   15ccc:	subcs	r3, r3, r1, lsl #13
   15cd0:	cmp	r3, r1, lsl #12
   15cd4:	adc	r0, r0, r0
   15cd8:	subcs	r3, r3, r1, lsl #12
   15cdc:	cmp	r3, r1, lsl #11
   15ce0:	adc	r0, r0, r0
   15ce4:	subcs	r3, r3, r1, lsl #11
   15ce8:	cmp	r3, r1, lsl #10
   15cec:	adc	r0, r0, r0
   15cf0:	subcs	r3, r3, r1, lsl #10
   15cf4:	cmp	r3, r1, lsl #9
   15cf8:	adc	r0, r0, r0
   15cfc:	subcs	r3, r3, r1, lsl #9
   15d00:	cmp	r3, r1, lsl #8
   15d04:	adc	r0, r0, r0
   15d08:	subcs	r3, r3, r1, lsl #8
   15d0c:	cmp	r3, r1, lsl #7
   15d10:	adc	r0, r0, r0
   15d14:	subcs	r3, r3, r1, lsl #7
   15d18:	cmp	r3, r1, lsl #6
   15d1c:	adc	r0, r0, r0
   15d20:	subcs	r3, r3, r1, lsl #6
   15d24:	cmp	r3, r1, lsl #5
   15d28:	adc	r0, r0, r0
   15d2c:	subcs	r3, r3, r1, lsl #5
   15d30:	cmp	r3, r1, lsl #4
   15d34:	adc	r0, r0, r0
   15d38:	subcs	r3, r3, r1, lsl #4
   15d3c:	cmp	r3, r1, lsl #3
   15d40:	adc	r0, r0, r0
   15d44:	subcs	r3, r3, r1, lsl #3
   15d48:	cmp	r3, r1, lsl #2
   15d4c:	adc	r0, r0, r0
   15d50:	subcs	r3, r3, r1, lsl #2
   15d54:	cmp	r3, r1, lsl #1
   15d58:	adc	r0, r0, r0
   15d5c:	subcs	r3, r3, r1, lsl #1
   15d60:	cmp	r3, r1
   15d64:	adc	r0, r0, r0
   15d68:	subcs	r3, r3, r1
   15d6c:	cmp	ip, #0
   15d70:	rsbmi	r0, r0, #0
   15d74:	bx	lr
   15d78:	teq	ip, r0
   15d7c:	rsbmi	r0, r0, #0
   15d80:	bx	lr
   15d84:	movcc	r0, #0
   15d88:	asreq	r0, ip, #31
   15d8c:	orreq	r0, r0, #1
   15d90:	bx	lr
   15d94:	clz	r2, r1
   15d98:	rsb	r2, r2, #31
   15d9c:	cmp	ip, #0
   15da0:	lsr	r0, r3, r2
   15da4:	rsbmi	r0, r0, #0
   15da8:	bx	lr
   15dac:	cmp	r0, #0
   15db0:	mvngt	r0, #-2147483648	; 0x80000000
   15db4:	movlt	r0, #-2147483648	; 0x80000000
   15db8:	b	15eb0 <__assert_fail@plt+0x4d24>
   15dbc:	cmp	r1, #0
   15dc0:	beq	15dac <__assert_fail@plt+0x4c20>
   15dc4:	push	{r0, r1, lr}
   15dc8:	bl	15ba4 <__assert_fail@plt+0x4a18>
   15dcc:	pop	{r1, r2, lr}
   15dd0:	mul	r3, r2, r0
   15dd4:	sub	r1, r1, r3
   15dd8:	bx	lr
   15ddc:	cmp	r3, #0
   15de0:	cmpeq	r2, #0
   15de4:	bne	15e08 <__assert_fail@plt+0x4c7c>
   15de8:	cmp	r1, #0
   15dec:	movlt	r1, #-2147483648	; 0x80000000
   15df0:	movlt	r0, #0
   15df4:	blt	15e04 <__assert_fail@plt+0x4c78>
   15df8:	cmpeq	r0, #0
   15dfc:	mvnne	r1, #-2147483648	; 0x80000000
   15e00:	mvnne	r0, #0
   15e04:	b	15eb0 <__assert_fail@plt+0x4d24>
   15e08:	sub	sp, sp, #8
   15e0c:	push	{sp, lr}
   15e10:	cmp	r1, #0
   15e14:	blt	15e34 <__assert_fail@plt+0x4ca8>
   15e18:	cmp	r3, #0
   15e1c:	blt	15e68 <__assert_fail@plt+0x4cdc>
   15e20:	bl	15ec0 <__assert_fail@plt+0x4d34>
   15e24:	ldr	lr, [sp, #4]
   15e28:	add	sp, sp, #8
   15e2c:	pop	{r2, r3}
   15e30:	bx	lr
   15e34:	rsbs	r0, r0, #0
   15e38:	sbc	r1, r1, r1, lsl #1
   15e3c:	cmp	r3, #0
   15e40:	blt	15e8c <__assert_fail@plt+0x4d00>
   15e44:	bl	15ec0 <__assert_fail@plt+0x4d34>
   15e48:	ldr	lr, [sp, #4]
   15e4c:	add	sp, sp, #8
   15e50:	pop	{r2, r3}
   15e54:	rsbs	r0, r0, #0
   15e58:	sbc	r1, r1, r1, lsl #1
   15e5c:	rsbs	r2, r2, #0
   15e60:	sbc	r3, r3, r3, lsl #1
   15e64:	bx	lr
   15e68:	rsbs	r2, r2, #0
   15e6c:	sbc	r3, r3, r3, lsl #1
   15e70:	bl	15ec0 <__assert_fail@plt+0x4d34>
   15e74:	ldr	lr, [sp, #4]
   15e78:	add	sp, sp, #8
   15e7c:	pop	{r2, r3}
   15e80:	rsbs	r0, r0, #0
   15e84:	sbc	r1, r1, r1, lsl #1
   15e88:	bx	lr
   15e8c:	rsbs	r2, r2, #0
   15e90:	sbc	r3, r3, r3, lsl #1
   15e94:	bl	15ec0 <__assert_fail@plt+0x4d34>
   15e98:	ldr	lr, [sp, #4]
   15e9c:	add	sp, sp, #8
   15ea0:	pop	{r2, r3}
   15ea4:	rsbs	r2, r2, #0
   15ea8:	sbc	r3, r3, r3, lsl #1
   15eac:	bx	lr
   15eb0:	push	{r1, lr}
   15eb4:	mov	r0, #8
   15eb8:	bl	10eb0 <raise@plt>
   15ebc:	pop	{r1, pc}
   15ec0:	cmp	r1, r3
   15ec4:	push	{r4, r5, r6, r7, r8, r9, lr}
   15ec8:	cmpeq	r0, r2
   15ecc:	mov	r4, r0
   15ed0:	mov	r5, r1
   15ed4:	ldr	r9, [sp, #28]
   15ed8:	movcc	r0, #0
   15edc:	movcc	r1, #0
   15ee0:	bcc	15fd8 <__assert_fail@plt+0x4e4c>
   15ee4:	cmp	r3, #0
   15ee8:	clzeq	ip, r2
   15eec:	clzne	ip, r3
   15ef0:	addeq	ip, ip, #32
   15ef4:	cmp	r5, #0
   15ef8:	clzeq	r1, r4
   15efc:	addeq	r1, r1, #32
   15f00:	clzne	r1, r5
   15f04:	sub	ip, ip, r1
   15f08:	sub	lr, ip, #32
   15f0c:	lsl	r7, r3, ip
   15f10:	rsb	r8, ip, #32
   15f14:	orr	r7, r7, r2, lsl lr
   15f18:	orr	r7, r7, r2, lsr r8
   15f1c:	lsl	r6, r2, ip
   15f20:	cmp	r5, r7
   15f24:	cmpeq	r4, r6
   15f28:	movcc	r0, #0
   15f2c:	movcc	r1, #0
   15f30:	bcc	15f4c <__assert_fail@plt+0x4dc0>
   15f34:	mov	r3, #1
   15f38:	subs	r4, r4, r6
   15f3c:	lsl	r1, r3, lr
   15f40:	lsl	r0, r3, ip
   15f44:	orr	r1, r1, r3, lsr r8
   15f48:	sbc	r5, r5, r7
   15f4c:	cmp	ip, #0
   15f50:	beq	15fd8 <__assert_fail@plt+0x4e4c>
   15f54:	lsrs	r3, r7, #1
   15f58:	rrx	r2, r6
   15f5c:	mov	r6, ip
   15f60:	b	15f84 <__assert_fail@plt+0x4df8>
   15f64:	subs	r4, r4, r2
   15f68:	sbc	r5, r5, r3
   15f6c:	adds	r4, r4, r4
   15f70:	adc	r5, r5, r5
   15f74:	adds	r4, r4, #1
   15f78:	adc	r5, r5, #0
   15f7c:	subs	r6, r6, #1
   15f80:	beq	15fa0 <__assert_fail@plt+0x4e14>
   15f84:	cmp	r5, r3
   15f88:	cmpeq	r4, r2
   15f8c:	bcs	15f64 <__assert_fail@plt+0x4dd8>
   15f90:	adds	r4, r4, r4
   15f94:	adc	r5, r5, r5
   15f98:	subs	r6, r6, #1
   15f9c:	bne	15f84 <__assert_fail@plt+0x4df8>
   15fa0:	lsr	r6, r4, ip
   15fa4:	lsr	r7, r5, ip
   15fa8:	orr	r6, r6, r5, lsl r8
   15fac:	adds	r2, r0, r4
   15fb0:	orr	r6, r6, r5, lsr lr
   15fb4:	adc	r3, r1, r5
   15fb8:	lsl	r1, r7, ip
   15fbc:	orr	r1, r1, r6, lsl lr
   15fc0:	lsl	r0, r6, ip
   15fc4:	orr	r1, r1, r6, lsr r8
   15fc8:	subs	r0, r2, r0
   15fcc:	mov	r4, r6
   15fd0:	mov	r5, r7
   15fd4:	sbc	r1, r3, r1
   15fd8:	cmp	r9, #0
   15fdc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   15fe0:	strd	r4, [r9]
   15fe4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15fe8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15fec:	mov	r7, r0
   15ff0:	ldr	r6, [pc, #72]	; 16040 <__assert_fail@plt+0x4eb4>
   15ff4:	ldr	r5, [pc, #72]	; 16044 <__assert_fail@plt+0x4eb8>
   15ff8:	add	r6, pc, r6
   15ffc:	add	r5, pc, r5
   16000:	sub	r6, r6, r5
   16004:	mov	r8, r1
   16008:	mov	r9, r2
   1600c:	bl	10e78 <calloc@plt-0x20>
   16010:	asrs	r6, r6, #2
   16014:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16018:	mov	r4, #0
   1601c:	add	r4, r4, #1
   16020:	ldr	r3, [r5], #4
   16024:	mov	r2, r9
   16028:	mov	r1, r8
   1602c:	mov	r0, r7
   16030:	blx	r3
   16034:	cmp	r6, r4
   16038:	bne	1601c <__assert_fail@plt+0x4e90>
   1603c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16040:	andeq	r0, r1, r0, lsl pc
   16044:	andeq	r0, r1, r8, lsl #30
   16048:	bx	lr
   1604c:	ldr	r3, [pc, #12]	; 16060 <__assert_fail@plt+0x4ed4>
   16050:	mov	r1, #0
   16054:	add	r3, pc, r3
   16058:	ldr	r2, [r3]
   1605c:	b	110a8 <__cxa_atexit@plt>
   16060:	strheq	r1, [r1], -r8

Disassembly of section .fini:

00016064 <.fini>:
   16064:	push	{r3, lr}
   16068:	pop	{r3, pc}
