
../repos/coreutils/src/tail:     file format elf32-littlearm


Disassembly of section .init:

00011268 <.init>:
   11268:	push	{r3, lr}
   1126c:	bl	11634 <__assert_fail@plt+0x4c>
   11270:	pop	{r3, pc}

Disassembly of section .plt:

00011274 <fstatfs64@plt-0x14>:
   11274:	push	{lr}		; (str lr, [sp, #-4]!)
   11278:	ldr	lr, [pc, #4]	; 11284 <fstatfs64@plt-0x4>
   1127c:	add	lr, pc, lr
   11280:	ldr	pc, [lr, #8]!
   11284:	andeq	sp, r1, ip, ror sp

00011288 <fstatfs64@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #118784	; 0x1d000
   11290:	ldr	pc, [ip, #3452]!	; 0xd7c

00011294 <calloc@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #118784	; 0x1d000
   1129c:	ldr	pc, [ip, #3444]!	; 0xd74

000112a0 <fputs_unlocked@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #118784	; 0x1d000
   112a8:	ldr	pc, [ip, #3436]!	; 0xd6c

000112ac <raise@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #118784	; 0x1d000
   112b4:	ldr	pc, [ip, #3428]!	; 0xd64

000112b8 <strcmp@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #118784	; 0x1d000
   112c0:	ldr	pc, [ip, #3420]!	; 0xd5c

000112c4 <strtol@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #118784	; 0x1d000
   112cc:	ldr	pc, [ip, #3412]!	; 0xd54

000112d0 <pause@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #118784	; 0x1d000
   112d8:	ldr	pc, [ip, #3404]!	; 0xd4c

000112dc <read@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #118784	; 0x1d000
   112e4:	ldr	pc, [ip, #3396]!	; 0xd44

000112e8 <fflush@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #118784	; 0x1d000
   112f0:	ldr	pc, [ip, #3388]!	; 0xd3c

000112f4 <free@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #118784	; 0x1d000
   112fc:	ldr	pc, [ip, #3380]!	; 0xd34

00011300 <nanosleep@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #118784	; 0x1d000
   11308:	ldr	pc, [ip, #3372]!	; 0xd2c

0001130c <_exit@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #118784	; 0x1d000
   11314:	ldr	pc, [ip, #3364]!	; 0xd24

00011318 <memcpy@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #118784	; 0x1d000
   11320:	ldr	pc, [ip, #3356]!	; 0xd1c

00011324 <__strtoull_internal@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #118784	; 0x1d000
   1132c:	ldr	pc, [ip, #3348]!	; 0xd14

00011330 <mbsinit@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #118784	; 0x1d000
   11338:	ldr	pc, [ip, #3340]!	; 0xd0c

0001133c <fwrite_unlocked@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #118784	; 0x1d000
   11344:	ldr	pc, [ip, #3332]!	; 0xd04

00011348 <memcmp@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #118784	; 0x1d000
   11350:	ldr	pc, [ip, #3324]!	; 0xcfc

00011354 <dcgettext@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #118784	; 0x1d000
   1135c:	ldr	pc, [ip, #3316]!	; 0xcf4

00011360 <realloc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #118784	; 0x1d000
   11368:	ldr	pc, [ip, #3308]!	; 0xcec

0001136c <textdomain@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #118784	; 0x1d000
   11374:	ldr	pc, [ip, #3300]!	; 0xce4

00011378 <rawmemchr@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #118784	; 0x1d000
   11380:	ldr	pc, [ip, #3292]!	; 0xcdc

00011384 <fflush_unlocked@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #118784	; 0x1d000
   1138c:	ldr	pc, [ip, #3284]!	; 0xcd4

00011390 <iswprint@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #118784	; 0x1d000
   11398:	ldr	pc, [ip, #3276]!	; 0xccc

0001139c <poll@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #118784	; 0x1d000
   113a4:	ldr	pc, [ip, #3268]!	; 0xcc4

000113a8 <__fxstat64@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #118784	; 0x1d000
   113b0:	ldr	pc, [ip, #3260]!	; 0xcbc

000113b4 <fwrite@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #118784	; 0x1d000
   113bc:	ldr	pc, [ip, #3252]!	; 0xcb4

000113c0 <lseek64@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #118784	; 0x1d000
   113c8:	ldr	pc, [ip, #3244]!	; 0xcac

000113cc <__ctype_get_mb_cur_max@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #118784	; 0x1d000
   113d4:	ldr	pc, [ip, #3236]!	; 0xca4

000113d8 <__fpending@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #118784	; 0x1d000
   113e0:	ldr	pc, [ip, #3228]!	; 0xc9c

000113e4 <mbrtowc@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #118784	; 0x1d000
   113ec:	ldr	pc, [ip, #3220]!	; 0xc94

000113f0 <error@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #118784	; 0x1d000
   113f8:	ldr	pc, [ip, #3212]!	; 0xc8c

000113fc <open64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #118784	; 0x1d000
   11404:	ldr	pc, [ip, #3204]!	; 0xc84

00011408 <getenv@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #118784	; 0x1d000
   11410:	ldr	pc, [ip, #3196]!	; 0xc7c

00011414 <malloc@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #118784	; 0x1d000
   1141c:	ldr	pc, [ip, #3188]!	; 0xc74

00011420 <__libc_start_main@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #118784	; 0x1d000
   11428:	ldr	pc, [ip, #3180]!	; 0xc6c

0001142c <__freading@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #118784	; 0x1d000
   11434:	ldr	pc, [ip, #3172]!	; 0xc64

00011438 <__gmon_start__@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #118784	; 0x1d000
   11440:	ldr	pc, [ip, #3164]!	; 0xc5c

00011444 <getopt_long@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #118784	; 0x1d000
   1144c:	ldr	pc, [ip, #3156]!	; 0xc54

00011450 <kill@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #118784	; 0x1d000
   11458:	ldr	pc, [ip, #3148]!	; 0xc4c

0001145c <__ctype_b_loc@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #118784	; 0x1d000
   11464:	ldr	pc, [ip, #3140]!	; 0xc44

00011468 <exit@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #118784	; 0x1d000
   11470:	ldr	pc, [ip, #3132]!	; 0xc3c

00011474 <strlen@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #118784	; 0x1d000
   1147c:	ldr	pc, [ip, #3124]!	; 0xc34

00011480 <inotify_init@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #118784	; 0x1d000
   11488:	ldr	pc, [ip, #3116]!	; 0xc2c

0001148c <strchr@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #118784	; 0x1d000
   11494:	ldr	pc, [ip, #3108]!	; 0xc24

00011498 <memrchr@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #118784	; 0x1d000
   114a0:	ldr	pc, [ip, #3100]!	; 0xc1c

000114a4 <inotify_add_watch@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #118784	; 0x1d000
   114ac:	ldr	pc, [ip, #3092]!	; 0xc14

000114b0 <__errno_location@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #118784	; 0x1d000
   114b8:	ldr	pc, [ip, #3084]!	; 0xc0c

000114bc <__cxa_atexit@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #118784	; 0x1d000
   114c4:	ldr	pc, [ip, #3076]!	; 0xc04

000114c8 <memset@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #118784	; 0x1d000
   114d0:	ldr	pc, [ip, #3068]!	; 0xbfc

000114d4 <__printf_chk@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #118784	; 0x1d000
   114dc:	ldr	pc, [ip, #3060]!	; 0xbf4

000114e0 <strtod@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #118784	; 0x1d000
   114e8:	ldr	pc, [ip, #3052]!	; 0xbec

000114ec <fileno@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #118784	; 0x1d000
   114f4:	ldr	pc, [ip, #3044]!	; 0xbe4

000114f8 <__fprintf_chk@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #118784	; 0x1d000
   11500:	ldr	pc, [ip, #3036]!	; 0xbdc

00011504 <memchr@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #118784	; 0x1d000
   1150c:	ldr	pc, [ip, #3028]!	; 0xbd4

00011510 <fclose@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #118784	; 0x1d000
   11518:	ldr	pc, [ip, #3020]!	; 0xbcc

0001151c <fseeko64@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #118784	; 0x1d000
   11524:	ldr	pc, [ip, #3012]!	; 0xbc4

00011528 <strtod_l@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #118784	; 0x1d000
   11530:	ldr	pc, [ip, #3004]!	; 0xbbc

00011534 <fcntl64@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #118784	; 0x1d000
   1153c:	ldr	pc, [ip, #2996]!	; 0xbb4

00011540 <__overflow@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #118784	; 0x1d000
   11548:	ldr	pc, [ip, #2988]!	; 0xbac

0001154c <setlocale@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #118784	; 0x1d000
   11554:	ldr	pc, [ip, #2980]!	; 0xba4

00011558 <strrchr@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #118784	; 0x1d000
   11560:	ldr	pc, [ip, #2972]!	; 0xb9c

00011564 <nl_langinfo@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #118784	; 0x1d000
   1156c:	ldr	pc, [ip, #2964]!	; 0xb94

00011570 <newlocale@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #118784	; 0x1d000
   11578:	ldr	pc, [ip, #2956]!	; 0xb8c

0001157c <clearerr_unlocked@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #118784	; 0x1d000
   11584:	ldr	pc, [ip, #2948]!	; 0xb84

00011588 <bindtextdomain@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #118784	; 0x1d000
   11590:	ldr	pc, [ip, #2940]!	; 0xb7c

00011594 <__xstat64@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #118784	; 0x1d000
   1159c:	ldr	pc, [ip, #2932]!	; 0xb74

000115a0 <isatty@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #118784	; 0x1d000
   115a8:	ldr	pc, [ip, #2924]!	; 0xb6c

000115ac <inotify_rm_watch@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #118784	; 0x1d000
   115b4:	ldr	pc, [ip, #2916]!	; 0xb64

000115b8 <strncmp@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #118784	; 0x1d000
   115c0:	ldr	pc, [ip, #2908]!	; 0xb5c

000115c4 <abort@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #118784	; 0x1d000
   115cc:	ldr	pc, [ip, #2900]!	; 0xb54

000115d0 <close@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #118784	; 0x1d000
   115d8:	ldr	pc, [ip, #2892]!	; 0xb4c

000115dc <__lxstat64@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #118784	; 0x1d000
   115e4:	ldr	pc, [ip, #2884]!	; 0xb44

000115e8 <__assert_fail@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #118784	; 0x1d000
   115f0:	ldr	pc, [ip, #2876]!	; 0xb3c

Disassembly of section .text:

000115f8 <.text>:
   115f8:	mov	fp, #0
   115fc:	mov	lr, #0
   11600:	pop	{r1}		; (ldr r1, [sp], #4)
   11604:	mov	r2, sp
   11608:	push	{r2}		; (str r2, [sp, #-4]!)
   1160c:	push	{r0}		; (str r0, [sp, #-4]!)
   11610:	ldr	ip, [pc, #16]	; 11628 <__assert_fail@plt+0x40>
   11614:	push	{ip}		; (str ip, [sp, #-4]!)
   11618:	ldr	r0, [pc, #12]	; 1162c <__assert_fail@plt+0x44>
   1161c:	ldr	r3, [pc, #12]	; 11630 <__assert_fail@plt+0x48>
   11620:	bl	11420 <__libc_start_main@plt>
   11624:	bl	115c4 <abort@plt>
   11628:			; <UNDEFINED> instruction: 0x0001ceb0
   1162c:	andeq	r1, r1, r8, asr sl
   11630:	andeq	ip, r1, r0, asr lr
   11634:	ldr	r3, [pc, #20]	; 11650 <__assert_fail@plt+0x68>
   11638:	ldr	r2, [pc, #20]	; 11654 <__assert_fail@plt+0x6c>
   1163c:	add	r3, pc, r3
   11640:	ldr	r2, [r3, r2]
   11644:	cmp	r2, #0
   11648:	bxeq	lr
   1164c:	b	11438 <__gmon_start__@plt>
   11650:			; <UNDEFINED> instruction: 0x0001d9bc
   11654:	andeq	r0, r0, r0, lsr r1
   11658:	ldr	r0, [pc, #24]	; 11678 <__assert_fail@plt+0x90>
   1165c:	ldr	r3, [pc, #24]	; 1167c <__assert_fail@plt+0x94>
   11660:	cmp	r3, r0
   11664:	bxeq	lr
   11668:	ldr	r3, [pc, #16]	; 11680 <__assert_fail@plt+0x98>
   1166c:	cmp	r3, #0
   11670:	bxeq	lr
   11674:	bx	r3
   11678:	andeq	pc, r2, r0, lsr #3
   1167c:	andeq	pc, r2, r0, lsr #3
   11680:	andeq	r0, r0, r0
   11684:	ldr	r0, [pc, #36]	; 116b0 <__assert_fail@plt+0xc8>
   11688:	ldr	r1, [pc, #36]	; 116b4 <__assert_fail@plt+0xcc>
   1168c:	sub	r1, r1, r0
   11690:	asr	r1, r1, #2
   11694:	add	r1, r1, r1, lsr #31
   11698:	asrs	r1, r1, #1
   1169c:	bxeq	lr
   116a0:	ldr	r3, [pc, #16]	; 116b8 <__assert_fail@plt+0xd0>
   116a4:	cmp	r3, #0
   116a8:	bxeq	lr
   116ac:	bx	r3
   116b0:	andeq	pc, r2, r0, lsr #3
   116b4:	andeq	pc, r2, r0, lsr #3
   116b8:	andeq	r0, r0, r0
   116bc:	push	{r4, lr}
   116c0:	ldr	r4, [pc, #24]	; 116e0 <__assert_fail@plt+0xf8>
   116c4:	ldrb	r3, [r4]
   116c8:	cmp	r3, #0
   116cc:	popne	{r4, pc}
   116d0:	bl	11658 <__assert_fail@plt+0x70>
   116d4:	mov	r3, #1
   116d8:	strb	r3, [r4]
   116dc:	pop	{r4, pc}
   116e0:			; <UNDEFINED> instruction: 0x0002f1bc
   116e4:	b	11684 <__assert_fail@plt+0x9c>
   116e8:	push	{fp, lr}
   116ec:	mov	fp, sp
   116f0:	sub	sp, sp, #56	; 0x38
   116f4:	mov	r4, r0
   116f8:	cmp	r0, #0
   116fc:	bne	11a14 <__assert_fail@plt+0x42c>
   11700:	movw	r1, #52995	; 0xcf03
   11704:	mov	r0, #0
   11708:	mov	r2, #5
   1170c:	movt	r1, #1
   11710:	bl	11354 <dcgettext@plt>
   11714:	mov	r1, r0
   11718:	movw	r0, #61916	; 0xf1dc
   1171c:	movt	r0, #2
   11720:	ldr	r2, [r0]
   11724:	mov	r0, #1
   11728:	bl	114d4 <__printf_chk@plt>
   1172c:	movw	r1, #53028	; 0xcf24
   11730:	mov	r0, #0
   11734:	mov	r2, #5
   11738:	movt	r1, #1
   1173c:	bl	11354 <dcgettext@plt>
   11740:	mov	r1, r0
   11744:	mov	r0, #1
   11748:	mov	r2, #10
   1174c:	bl	114d4 <__printf_chk@plt>
   11750:	movw	r1, #55641	; 0xd959
   11754:	mov	r0, #0
   11758:	mov	r2, #5
   1175c:	movt	r1, #1
   11760:	bl	11354 <dcgettext@plt>
   11764:	movw	r7, #61876	; 0xf1b4
   11768:	movt	r7, #2
   1176c:	ldr	r1, [r7]
   11770:	bl	112a0 <fputs_unlocked@plt>
   11774:	movw	r1, #55697	; 0xd991
   11778:	mov	r0, #0
   1177c:	mov	r2, #5
   11780:	movt	r1, #1
   11784:	bl	11354 <dcgettext@plt>
   11788:	ldr	r1, [r7]
   1178c:	bl	112a0 <fputs_unlocked@plt>
   11790:	movw	r1, #53160	; 0xcfa8
   11794:	mov	r0, #0
   11798:	mov	r2, #5
   1179c:	movt	r1, #1
   117a0:	bl	11354 <dcgettext@plt>
   117a4:	ldr	r1, [r7]
   117a8:	bl	112a0 <fputs_unlocked@plt>
   117ac:	movw	r1, #53305	; 0xd039
   117b0:	mov	r0, #0
   117b4:	mov	r2, #5
   117b8:	movt	r1, #1
   117bc:	bl	11354 <dcgettext@plt>
   117c0:	ldr	r1, [r7]
   117c4:	bl	112a0 <fputs_unlocked@plt>
   117c8:	movw	r1, #53539	; 0xd123
   117cc:	mov	r0, #0
   117d0:	mov	r2, #5
   117d4:	movt	r1, #1
   117d8:	bl	11354 <dcgettext@plt>
   117dc:	mov	r1, r0
   117e0:	mov	r0, #1
   117e4:	mov	r2, #10
   117e8:	mov	r3, #5
   117ec:	bl	114d4 <__printf_chk@plt>
   117f0:	movw	r1, #54093	; 0xd34d
   117f4:	mov	r0, #0
   117f8:	mov	r2, #5
   117fc:	movt	r1, #1
   11800:	bl	11354 <dcgettext@plt>
   11804:	ldr	r1, [r7]
   11808:	bl	112a0 <fputs_unlocked@plt>
   1180c:	movw	r1, #54309	; 0xd425
   11810:	mov	r0, #0
   11814:	mov	r2, #5
   11818:	movt	r1, #1
   1181c:	bl	11354 <dcgettext@plt>
   11820:	ldr	r1, [r7]
   11824:	bl	112a0 <fputs_unlocked@plt>
   11828:	movw	r1, #54640	; 0xd570
   1182c:	mov	r0, #0
   11830:	mov	r2, #5
   11834:	movt	r1, #1
   11838:	bl	11354 <dcgettext@plt>
   1183c:	ldr	r1, [r7]
   11840:	bl	112a0 <fputs_unlocked@plt>
   11844:	movw	r1, #54703	; 0xd5af
   11848:	mov	r0, #0
   1184c:	mov	r2, #5
   11850:	movt	r1, #1
   11854:	bl	11354 <dcgettext@plt>
   11858:	ldr	r1, [r7]
   1185c:	bl	112a0 <fputs_unlocked@plt>
   11860:	movw	r1, #54748	; 0xd5dc
   11864:	mov	r0, #0
   11868:	mov	r2, #5
   1186c:	movt	r1, #1
   11870:	bl	11354 <dcgettext@plt>
   11874:	ldr	r1, [r7]
   11878:	bl	112a0 <fputs_unlocked@plt>
   1187c:	movw	r1, #54802	; 0xd612
   11880:	mov	r0, #0
   11884:	mov	r2, #5
   11888:	movt	r1, #1
   1188c:	bl	11354 <dcgettext@plt>
   11890:	ldr	r1, [r7]
   11894:	bl	112a0 <fputs_unlocked@plt>
   11898:	movw	r1, #55015	; 0xd6e7
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	movt	r1, #1
   118a8:	bl	11354 <dcgettext@plt>
   118ac:	ldr	r1, [r7]
   118b0:	bl	112a0 <fputs_unlocked@plt>
   118b4:	movw	r0, #57832	; 0xe1e8
   118b8:	mov	r2, #48	; 0x30
   118bc:	mov	r6, sp
   118c0:	movw	r5, #55452	; 0xd89c
   118c4:	movt	r0, #1
   118c8:	movt	r5, #1
   118cc:	add	r1, r0, #32
   118d0:	add	r3, r0, #16
   118d4:	vld1.64	{d18-d19}, [r0], r2
   118d8:	vld1.64	{d16-d17}, [r1]
   118dc:	vld1.64	{d20-d21}, [r3]
   118e0:	add	r1, r6, #32
   118e4:	vldr	d22, [r0]
   118e8:	add	r0, r6, #16
   118ec:	vst1.64	{d16-d17}, [r1]
   118f0:	movw	r1, #55772	; 0xd9dc
   118f4:	vst1.64	{d20-d21}, [r0]
   118f8:	mov	r0, r6
   118fc:	vst1.64	{d18-d19}, [r0], r2
   11900:	movt	r1, #1
   11904:	vstr	d22, [r0]
   11908:	mov	r0, r5
   1190c:	bl	112b8 <strcmp@plt>
   11910:	cmp	r0, #0
   11914:	ldrne	r1, [r6, #8]!
   11918:	cmpne	r1, #0
   1191c:	bne	11908 <__assert_fail@plt+0x320>
   11920:	ldr	r6, [r6, #4]
   11924:	movw	r1, #55867	; 0xda3b
   11928:	mov	r0, #0
   1192c:	mov	r2, #5
   11930:	movt	r1, #1
   11934:	bl	11354 <dcgettext@plt>
   11938:	movw	r2, #55890	; 0xda52
   1193c:	movw	r3, #55904	; 0xda60
   11940:	mov	r1, r0
   11944:	mov	r0, #1
   11948:	movt	r2, #1
   1194c:	movt	r3, #1
   11950:	bl	114d4 <__printf_chk@plt>
   11954:	cmp	r6, #0
   11958:	mov	r0, #5
   1195c:	mov	r1, #0
   11960:	moveq	r6, r5
   11964:	bl	1154c <setlocale@plt>
   11968:	cmp	r0, #0
   1196c:	beq	119a4 <__assert_fail@plt+0x3bc>
   11970:	movw	r1, #55944	; 0xda88
   11974:	mov	r2, #3
   11978:	movt	r1, #1
   1197c:	bl	115b8 <strncmp@plt>
   11980:	cmp	r0, #0
   11984:	beq	119a4 <__assert_fail@plt+0x3bc>
   11988:	movw	r1, #55948	; 0xda8c
   1198c:	mov	r0, #0
   11990:	mov	r2, #5
   11994:	movt	r1, #1
   11998:	bl	11354 <dcgettext@plt>
   1199c:	ldr	r1, [r7]
   119a0:	bl	112a0 <fputs_unlocked@plt>
   119a4:	movw	r1, #56019	; 0xdad3
   119a8:	mov	r0, #0
   119ac:	mov	r2, #5
   119b0:	movt	r1, #1
   119b4:	bl	11354 <dcgettext@plt>
   119b8:	movw	r2, #55904	; 0xda60
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	mov	r3, r5
   119c8:	movt	r2, #1
   119cc:	bl	114d4 <__printf_chk@plt>
   119d0:	movw	r1, #56046	; 0xdaee
   119d4:	mov	r0, #0
   119d8:	mov	r2, #5
   119dc:	movt	r1, #1
   119e0:	bl	11354 <dcgettext@plt>
   119e4:	movw	r3, #55014	; 0xd6e6
   119e8:	mov	r1, r0
   119ec:	movw	r0, #55800	; 0xd9f8
   119f0:	cmp	r6, r5
   119f4:	mov	r2, r6
   119f8:	movt	r0, #1
   119fc:	movt	r3, #1
   11a00:	moveq	r3, r0
   11a04:	mov	r0, #1
   11a08:	bl	114d4 <__printf_chk@plt>
   11a0c:	mov	r0, r4
   11a10:	bl	11468 <exit@plt>
   11a14:	movw	r0, #61872	; 0xf1b0
   11a18:	movw	r1, #52956	; 0xcedc
   11a1c:	mov	r2, #5
   11a20:	movt	r0, #2
   11a24:	movt	r1, #1
   11a28:	ldr	r5, [r0]
   11a2c:	mov	r0, #0
   11a30:	bl	11354 <dcgettext@plt>
   11a34:	mov	r2, r0
   11a38:	movw	r0, #61916	; 0xf1dc
   11a3c:	mov	r1, #1
   11a40:	movt	r0, #2
   11a44:	ldr	r3, [r0]
   11a48:	mov	r0, r5
   11a4c:	bl	114f8 <__fprintf_chk@plt>
   11a50:	mov	r0, r4
   11a54:	bl	11468 <exit@plt>
   11a58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a5c:	add	fp, sp, #28
   11a60:	sub	sp, sp, #4
   11a64:	vpush	{d8-d11}
   11a68:	sub	sp, sp, #312	; 0x138
   11a6c:	mov	r6, r0
   11a70:	mov	r7, #0
   11a74:	mov	r0, #10
   11a78:	mov	r4, r1
   11a7c:	str	r7, [sp, #188]	; 0xbc
   11a80:	str	r0, [sp, #184]	; 0xb8
   11a84:	ldr	r0, [r1]
   11a88:	bl	18a10 <__assert_fail@plt+0x7428>
   11a8c:	movw	r1, #55014	; 0xd6e6
   11a90:	mov	r0, #6
   11a94:	movt	r1, #1
   11a98:	bl	1154c <setlocale@plt>
   11a9c:	movw	r5, #55894	; 0xda56
   11aa0:	movw	r1, #55457	; 0xd8a1
   11aa4:	movt	r5, #1
   11aa8:	movt	r1, #1
   11aac:	mov	r0, r5
   11ab0:	bl	11588 <bindtextdomain@plt>
   11ab4:	mov	r0, r5
   11ab8:	bl	1136c <textdomain@plt>
   11abc:	movw	r0, #28928	; 0x7100
   11ac0:	movt	r0, #1
   11ac4:	bl	1ceb4 <__assert_fail@plt+0xb8cc>
   11ac8:	movw	r1, #61888	; 0xf1c0
   11acc:	mov	r0, #256	; 0x100
   11ad0:	cmp	r6, #2
   11ad4:	movt	r1, #2
   11ad8:	strh	r0, [r1]
   11adc:	mov	r0, #1
   11ae0:	strb	r7, [r1, #2]
   11ae4:	strh	r7, [r1, #3]
   11ae8:	strb	r0, [r1, #5]
   11aec:	beq	11b44 <__assert_fail@plt+0x55c>
   11af0:	cmp	r6, #3
   11af4:	bne	11b18 <__assert_fail@plt+0x530>
   11af8:	ldr	r0, [r4, #8]
   11afc:	ldrb	r1, [r0]
   11b00:	cmp	r1, #45	; 0x2d
   11b04:	bne	11b44 <__assert_fail@plt+0x55c>
   11b08:	ldrb	r1, [r0, #1]
   11b0c:	cmp	r1, #0
   11b10:	bne	11b2c <__assert_fail@plt+0x544>
   11b14:	b	11b44 <__assert_fail@plt+0x55c>
   11b18:	sub	r0, r6, #3
   11b1c:	mov	r3, #0
   11b20:	cmp	r0, #1
   11b24:	bhi	11cdc <__assert_fail@plt+0x6f4>
   11b28:	ldr	r0, [r4, #8]
   11b2c:	movw	r1, #56097	; 0xdb21
   11b30:	movt	r1, #1
   11b34:	bl	112b8 <strcmp@plt>
   11b38:	mov	r3, #0
   11b3c:	cmp	r0, #0
   11b40:	bne	11cdc <__assert_fail@plt+0x6f4>
   11b44:	bl	189ac <__assert_fail@plt+0x73c4>
   11b48:	ldr	r2, [r4, #4]
   11b4c:	mov	r1, r0
   11b50:	mov	r0, r2
   11b54:	ldrb	r3, [r0], #1
   11b58:	cmp	r3, #45	; 0x2d
   11b5c:	beq	11b84 <__assert_fail@plt+0x59c>
   11b60:	cmp	r3, #43	; 0x2b
   11b64:	bne	11c08 <__assert_fail@plt+0x620>
   11b68:	sub	r1, r1, #3504	; 0xdb0
   11b6c:	mov	r8, #1
   11b70:	mov	r3, #0
   11b74:	sub	r1, r1, #196608	; 0x30000
   11b78:	cmp	r1, #696	; 0x2b8
   11b7c:	bhi	11bbc <__assert_fail@plt+0x5d4>
   11b80:	b	11cdc <__assert_fail@plt+0x6f4>
   11b84:	movw	r3, #3504	; 0xdb0
   11b88:	mov	r8, #0
   11b8c:	movt	r3, #3
   11b90:	cmp	r1, r3
   11b94:	blt	11bbc <__assert_fail@plt+0x5d4>
   11b98:	mov	r1, r0
   11b9c:	ldrb	r3, [r1], #1
   11ba0:	cmp	r3, #99	; 0x63
   11ba4:	mov	r3, #0
   11ba8:	movne	r1, r0
   11bac:	ldrb	r1, [r1]
   11bb0:	cmp	r1, #0
   11bb4:	beq	11cdc <__assert_fail@plt+0x6f4>
   11bb8:	mov	r8, #0
   11bbc:	mov	r1, #0
   11bc0:	sub	r3, r2, r1
   11bc4:	sub	r1, r1, #1
   11bc8:	ldrb	r7, [r3, #1]
   11bcc:	sub	r3, r7, #48	; 0x30
   11bd0:	cmp	r3, #10
   11bd4:	bcc	11bc0 <__assert_fail@plt+0x5d8>
   11bd8:	cmp	r7, #98	; 0x62
   11bdc:	beq	11c10 <__assert_fail@plt+0x628>
   11be0:	mov	ip, #10
   11be4:	cmp	r7, #99	; 0x63
   11be8:	beq	11c14 <__assert_fail@plt+0x62c>
   11bec:	mov	r5, #1
   11bf0:	cmp	r7, #108	; 0x6c
   11bf4:	beq	11c18 <__assert_fail@plt+0x630>
   11bf8:	sub	r2, r2, r1
   11bfc:	mov	ip, #10
   11c00:	mov	r5, #1
   11c04:	b	11c20 <__assert_fail@plt+0x638>
   11c08:	mov	r3, #0
   11c0c:	b	11cdc <__assert_fail@plt+0x6f4>
   11c10:	mov	ip, #5120	; 0x1400
   11c14:	mov	r5, #0
   11c18:	sub	r2, r2, r1
   11c1c:	ldrb	r7, [r2, #1]!
   11c20:	cmp	r7, #102	; 0x66
   11c24:	mov	r3, #0
   11c28:	addeq	r2, r2, #1
   11c2c:	ldrb	r2, [r2]
   11c30:	cmp	r2, #0
   11c34:	bne	11cdc <__assert_fail@plt+0x6f4>
   11c38:	cmn	r1, #1
   11c3c:	beq	11cac <__assert_fail@plt+0x6c4>
   11c40:	movw	r1, #56100	; 0xdb24
   11c44:	add	r3, sp, #184	; 0xb8
   11c48:	mov	r2, #10
   11c4c:	movt	r1, #1
   11c50:	str	r1, [sp]
   11c54:	mov	r1, #0
   11c58:	bl	1b91c <__assert_fail@plt+0xa334>
   11c5c:	mvn	r1, #2
   11c60:	tst	r0, r1
   11c64:	beq	11cb8 <__assert_fail@plt+0x6d0>
   11c68:	bl	114b0 <__errno_location@plt>
   11c6c:	ldr	r5, [r0]
   11c70:	movw	r1, #56109	; 0xdb2d
   11c74:	mov	r0, #0
   11c78:	mov	r2, #5
   11c7c:	movt	r1, #1
   11c80:	bl	11354 <dcgettext@plt>
   11c84:	mov	r6, r0
   11c88:	ldr	r0, [r4, #4]
   11c8c:	bl	1a98c <__assert_fail@plt+0x93a4>
   11c90:	movw	r2, #56102	; 0xdb26
   11c94:	str	r0, [sp]
   11c98:	mov	r0, #1
   11c9c:	mov	r1, r5
   11ca0:	mov	r3, r6
   11ca4:	movt	r2, #1
   11ca8:	bl	113f0 <error@plt>
   11cac:	mov	r0, #0
   11cb0:	str	ip, [sp, #184]	; 0xb8
   11cb4:	str	r0, [sp, #188]	; 0xbc
   11cb8:	sub	r0, r7, #102	; 0x66
   11cbc:	movw	r1, #61888	; 0xf1c0
   11cc0:	mov	r3, #1
   11cc4:	clz	r0, r0
   11cc8:	movt	r1, #2
   11ccc:	lsr	r0, r0, #5
   11cd0:	strb	r5, [r1, #1]
   11cd4:	strb	r8, [r1, #3]
   11cd8:	strb	r0, [r1, #4]
   11cdc:	sub	sl, r6, r3
   11ce0:	movw	r5, #61880	; 0xf1b8
   11ce4:	movw	r6, #61888	; 0xf1c0
   11ce8:	vmov.f64	d8, #112	; 0x3f800000  1.0
   11cec:	add	r4, r4, r3, lsl #2
   11cf0:	mov	r7, #0
   11cf4:	mov	r0, #0
   11cf8:	movt	r5, #2
   11cfc:	movt	r6, #2
   11d00:	str	sl, [sp, #76]	; 0x4c
   11d04:	b	11d84 <__assert_fail@plt+0x79c>
   11d08:	movw	r1, #56183	; 0xdb77
   11d0c:	movw	r0, #56159	; 0xdb5f
   11d10:	cmp	r8, #110	; 0x6e
   11d14:	mov	r2, #5
   11d18:	movt	r1, #1
   11d1c:	movt	r0, #1
   11d20:	moveq	r1, r0
   11d24:	mov	r0, #0
   11d28:	bl	11354 <dcgettext@plt>
   11d2c:	mvn	r1, #0
   11d30:	str	r0, [sp, #12]
   11d34:	mov	r0, #0
   11d38:	mov	r2, #0
   11d3c:	mov	r3, #0
   11d40:	mov	r7, #0
   11d44:	str	r1, [sp]
   11d48:	str	r1, [sp, #4]
   11d4c:	movw	r1, #56146	; 0xdb52
   11d50:	str	r0, [sp, #16]
   11d54:	mov	r0, sl
   11d58:	movt	r1, #1
   11d5c:	str	r1, [sp, #8]
   11d60:	bl	1b7a4 <__assert_fail@plt+0xa1bc>
   11d64:	ldr	sl, [sp, #76]	; 0x4c
   11d68:	str	r0, [sp, #184]	; 0xb8
   11d6c:	str	r1, [sp, #188]	; 0xbc
   11d70:	mov	r0, r9
   11d74:	b	11d84 <__assert_fail@plt+0x79c>
   11d78:	add	sl, sl, #1
   11d7c:	str	sl, [r5]
   11d80:	b	11d08 <__assert_fail@plt+0x720>
   11d84:	movw	r2, #56124	; 0xdb3c
   11d88:	movw	r3, #57888	; 0xe220
   11d8c:	mov	r9, r0
   11d90:	mov	r0, sl
   11d94:	mov	r1, r4
   11d98:	str	r7, [sp]
   11d9c:	movt	r2, #1
   11da0:	movt	r3, #1
   11da4:	bl	11444 <getopt_long@plt>
   11da8:	add	r1, r0, #3
   11dac:	cmp	r1, #264	; 0x108
   11db0:	bhi	14188 <__assert_fail@plt+0x2ba0>
   11db4:	add	r2, pc, #8
   11db8:	mov	r8, r0
   11dbc:	mov	r0, #2
   11dc0:	ldr	pc, [r2, r1, lsl #2]
   11dc4:	muleq	r1, r0, r1
   11dc8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   11dcc:	andeq	r2, r1, r8, lsl #8
   11dd0:	andeq	r4, r1, r8, lsl #3
   11dd4:	andeq	r4, r1, r8, lsl #3
   11dd8:	andeq	r4, r1, r8, lsl #3
   11ddc:	andeq	r4, r1, r8, lsl #3
   11de0:	andeq	r4, r1, r8, lsl #3
   11de4:	andeq	r4, r1, r8, lsl #3
   11de8:	andeq	r4, r1, r8, lsl #3
   11dec:	andeq	r4, r1, r8, lsl #3
   11df0:	andeq	r4, r1, r8, lsl #3
   11df4:	andeq	r4, r1, r8, lsl #3
   11df8:	andeq	r4, r1, r8, lsl #3
   11dfc:	andeq	r4, r1, r8, lsl #3
   11e00:	andeq	r4, r1, r8, lsl #3
   11e04:	andeq	r4, r1, r8, lsl #3
   11e08:	andeq	r4, r1, r8, lsl #3
   11e0c:	andeq	r4, r1, r8, lsl #3
   11e10:	andeq	r4, r1, r8, lsl #3
   11e14:	andeq	r4, r1, r8, lsl #3
   11e18:	andeq	r4, r1, r8, lsl #3
   11e1c:	andeq	r4, r1, r8, lsl #3
   11e20:	andeq	r4, r1, r8, lsl #3
   11e24:	andeq	r4, r1, r8, lsl #3
   11e28:	andeq	r4, r1, r8, lsl #3
   11e2c:	andeq	r4, r1, r8, lsl #3
   11e30:	andeq	r4, r1, r8, lsl #3
   11e34:	andeq	r4, r1, r8, lsl #3
   11e38:	andeq	r4, r1, r8, lsl #3
   11e3c:	andeq	r4, r1, r8, lsl #3
   11e40:	andeq	r4, r1, r8, lsl #3
   11e44:	andeq	r4, r1, r8, lsl #3
   11e48:	andeq	r4, r1, r8, lsl #3
   11e4c:	andeq	r4, r1, r8, lsl #3
   11e50:	andeq	r4, r1, r8, lsl #3
   11e54:	andeq	r4, r1, r8, lsl #3
   11e58:	andeq	r4, r1, r8, lsl #3
   11e5c:	andeq	r4, r1, r8, lsl #3
   11e60:	andeq	r4, r1, r8, lsl #3
   11e64:	andeq	r4, r1, r8, lsl #3
   11e68:	andeq	r4, r1, r8, lsl #3
   11e6c:	andeq	r4, r1, r8, lsl #3
   11e70:	andeq	r4, r1, r8, lsl #3
   11e74:	andeq	r4, r1, r8, lsl #3
   11e78:	andeq	r4, r1, r8, lsl #3
   11e7c:	andeq	r4, r1, r8, lsl #3
   11e80:	andeq	r4, r1, r8, lsl #3
   11e84:	andeq	r4, r1, r8, lsl #3
   11e88:	andeq	r4, r1, r8, lsl #3
   11e8c:	andeq	r4, r1, r8, lsl #3
   11e90:	andeq	r4, r1, r0, ror #2
   11e94:	andeq	r4, r1, r0, ror #2
   11e98:	andeq	r4, r1, r0, ror #2
   11e9c:	andeq	r4, r1, r0, ror #2
   11ea0:	andeq	r4, r1, r0, ror #2
   11ea4:	andeq	r4, r1, r0, ror #2
   11ea8:	andeq	r4, r1, r0, ror #2
   11eac:	andeq	r4, r1, r0, ror #2
   11eb0:	andeq	r4, r1, r0, ror #2
   11eb4:	andeq	r4, r1, r0, ror #2
   11eb8:	andeq	r4, r1, r8, lsl #3
   11ebc:	andeq	r4, r1, r8, lsl #3
   11ec0:	andeq	r4, r1, r8, lsl #3
   11ec4:	andeq	r4, r1, r8, lsl #3
   11ec8:	andeq	r4, r1, r8, lsl #3
   11ecc:	andeq	r4, r1, r8, lsl #3
   11ed0:	andeq	r4, r1, r8, lsl #3
   11ed4:	andeq	r4, r1, r8, lsl #3
   11ed8:	andeq	r4, r1, r8, lsl #3
   11edc:	andeq	r4, r1, r8, lsl #3
   11ee0:	andeq	r4, r1, r8, lsl #3
   11ee4:	andeq	r4, r1, r8, lsl #3
   11ee8:	muleq	r1, ip, r3
   11eec:	andeq	r4, r1, r8, lsl #3
   11ef0:	andeq	r4, r1, r8, lsl #3
   11ef4:	andeq	r4, r1, r8, lsl #3
   11ef8:	andeq	r4, r1, r8, lsl #3
   11efc:	andeq	r4, r1, r8, lsl #3
   11f00:	andeq	r4, r1, r8, lsl #3
   11f04:	andeq	r4, r1, r8, lsl #3
   11f08:	andeq	r4, r1, r8, lsl #3
   11f0c:	andeq	r4, r1, r8, lsl #3
   11f10:	andeq	r4, r1, r8, lsl #3
   11f14:	andeq	r4, r1, r8, lsl #3
   11f18:	andeq	r4, r1, r8, lsl #3
   11f1c:	andeq	r4, r1, r8, lsl #3
   11f20:	andeq	r4, r1, r8, lsl #3
   11f24:	andeq	r4, r1, r8, lsl #3
   11f28:	andeq	r4, r1, r8, lsl #3
   11f2c:	andeq	r4, r1, r8, lsl #3
   11f30:	andeq	r4, r1, r8, lsl #3
   11f34:	andeq	r4, r1, r8, lsl #3
   11f38:	andeq	r4, r1, r8, lsl #3
   11f3c:	andeq	r4, r1, r8, lsl #3
   11f40:	andeq	r4, r1, r8, lsl #3
   11f44:	andeq	r4, r1, r8, lsl #3
   11f48:	andeq	r4, r1, r8, lsl #3
   11f4c:	andeq	r4, r1, r8, lsl #3
   11f50:	andeq	r4, r1, r8, lsl #3
   11f54:	andeq	r4, r1, r8, lsl #3
   11f58:	andeq	r4, r1, r8, lsl #3
   11f5c:	andeq	r2, r1, r8, ror #3
   11f60:	andeq	r4, r1, r8, lsl #3
   11f64:	andeq	r4, r1, r8, lsl #3
   11f68:	andeq	r2, r1, ip, lsl r2
   11f6c:	andeq	r4, r1, r8, lsl #3
   11f70:	andeq	r4, r1, r8, lsl #3
   11f74:	andeq	r4, r1, r8, lsl #3
   11f78:	andeq	r4, r1, r8, lsl #3
   11f7c:	andeq	r4, r1, r8, lsl #3
   11f80:	andeq	r4, r1, r8, lsl #3
   11f84:	andeq	r4, r1, r8, lsl #3
   11f88:	andeq	r2, r1, r8, ror #3
   11f8c:	andeq	r4, r1, r8, lsl #3
   11f90:	andeq	r4, r1, r8, lsl #3
   11f94:	andeq	r1, r1, r4, lsl #27
   11f98:	andeq	r4, r1, r8, lsl #3
   11f9c:	andeq	r2, r1, r4, ror #6
   11fa0:	andeq	r4, r1, r8, lsl #3
   11fa4:	andeq	r4, r1, r8, lsl #3
   11fa8:	ldrdeq	r2, [r1], -r8
   11fac:	andeq	r4, r1, r8, lsl #3
   11fb0:	andeq	r4, r1, r8, lsl #3
   11fb4:	andeq	r4, r1, r8, lsl #3
   11fb8:			; <UNDEFINED> instruction: 0x000123bc
   11fbc:	andeq	r4, r1, r8, lsl #3
   11fc0:	andeq	r4, r1, r8, lsl #3
   11fc4:	andeq	r4, r1, r8, lsl #3
   11fc8:	andeq	r4, r1, r8, lsl #3
   11fcc:	andeq	r4, r1, r8, lsl #3
   11fd0:	andeq	r4, r1, r8, lsl #3
   11fd4:	andeq	r4, r1, r8, lsl #3
   11fd8:	andeq	r4, r1, r8, lsl #3
   11fdc:	andeq	r4, r1, r8, lsl #3
   11fe0:	andeq	r4, r1, r8, lsl #3
   11fe4:	andeq	r4, r1, r8, lsl #3
   11fe8:	andeq	r4, r1, r8, lsl #3
   11fec:	andeq	r4, r1, r8, lsl #3
   11ff0:	andeq	r4, r1, r8, lsl #3
   11ff4:	andeq	r4, r1, r8, lsl #3
   11ff8:	andeq	r4, r1, r8, lsl #3
   11ffc:	andeq	r4, r1, r8, lsl #3
   12000:	andeq	r4, r1, r8, lsl #3
   12004:	andeq	r4, r1, r8, lsl #3
   12008:	andeq	r4, r1, r8, lsl #3
   1200c:	andeq	r4, r1, r8, lsl #3
   12010:	andeq	r4, r1, r8, lsl #3
   12014:	andeq	r4, r1, r8, lsl #3
   12018:	andeq	r4, r1, r8, lsl #3
   1201c:	andeq	r4, r1, r8, lsl #3
   12020:	andeq	r4, r1, r8, lsl #3
   12024:	andeq	r4, r1, r8, lsl #3
   12028:	andeq	r4, r1, r8, lsl #3
   1202c:	andeq	r4, r1, r8, lsl #3
   12030:	andeq	r4, r1, r8, lsl #3
   12034:	andeq	r4, r1, r8, lsl #3
   12038:	andeq	r4, r1, r8, lsl #3
   1203c:	andeq	r4, r1, r8, lsl #3
   12040:	andeq	r4, r1, r8, lsl #3
   12044:	andeq	r4, r1, r8, lsl #3
   12048:	andeq	r4, r1, r8, lsl #3
   1204c:	andeq	r4, r1, r8, lsl #3
   12050:	andeq	r4, r1, r8, lsl #3
   12054:	andeq	r4, r1, r8, lsl #3
   12058:	andeq	r4, r1, r8, lsl #3
   1205c:	andeq	r4, r1, r8, lsl #3
   12060:	andeq	r4, r1, r8, lsl #3
   12064:	andeq	r4, r1, r8, lsl #3
   12068:	andeq	r4, r1, r8, lsl #3
   1206c:	andeq	r4, r1, r8, lsl #3
   12070:	andeq	r4, r1, r8, lsl #3
   12074:	andeq	r4, r1, r8, lsl #3
   12078:	andeq	r4, r1, r8, lsl #3
   1207c:	andeq	r4, r1, r8, lsl #3
   12080:	andeq	r4, r1, r8, lsl #3
   12084:	andeq	r4, r1, r8, lsl #3
   12088:	andeq	r4, r1, r8, lsl #3
   1208c:	andeq	r4, r1, r8, lsl #3
   12090:	andeq	r4, r1, r8, lsl #3
   12094:	andeq	r4, r1, r8, lsl #3
   12098:	andeq	r4, r1, r8, lsl #3
   1209c:	andeq	r4, r1, r8, lsl #3
   120a0:	andeq	r4, r1, r8, lsl #3
   120a4:	andeq	r4, r1, r8, lsl #3
   120a8:	andeq	r4, r1, r8, lsl #3
   120ac:	andeq	r4, r1, r8, lsl #3
   120b0:	andeq	r4, r1, r8, lsl #3
   120b4:	andeq	r4, r1, r8, lsl #3
   120b8:	andeq	r4, r1, r8, lsl #3
   120bc:	andeq	r4, r1, r8, lsl #3
   120c0:	andeq	r4, r1, r8, lsl #3
   120c4:	andeq	r4, r1, r8, lsl #3
   120c8:	andeq	r4, r1, r8, lsl #3
   120cc:	andeq	r4, r1, r8, lsl #3
   120d0:	andeq	r4, r1, r8, lsl #3
   120d4:	andeq	r4, r1, r8, lsl #3
   120d8:	andeq	r4, r1, r8, lsl #3
   120dc:	andeq	r4, r1, r8, lsl #3
   120e0:	andeq	r4, r1, r8, lsl #3
   120e4:	andeq	r4, r1, r8, lsl #3
   120e8:	andeq	r4, r1, r8, lsl #3
   120ec:	andeq	r4, r1, r8, lsl #3
   120f0:	andeq	r4, r1, r8, lsl #3
   120f4:	andeq	r4, r1, r8, lsl #3
   120f8:	andeq	r4, r1, r8, lsl #3
   120fc:	andeq	r4, r1, r8, lsl #3
   12100:	andeq	r4, r1, r8, lsl #3
   12104:	andeq	r4, r1, r8, lsl #3
   12108:	andeq	r4, r1, r8, lsl #3
   1210c:	andeq	r4, r1, r8, lsl #3
   12110:	andeq	r4, r1, r8, lsl #3
   12114:	andeq	r4, r1, r8, lsl #3
   12118:	andeq	r4, r1, r8, lsl #3
   1211c:	andeq	r4, r1, r8, lsl #3
   12120:	andeq	r4, r1, r8, lsl #3
   12124:	andeq	r4, r1, r8, lsl #3
   12128:	andeq	r4, r1, r8, lsl #3
   1212c:	andeq	r4, r1, r8, lsl #3
   12130:	andeq	r4, r1, r8, lsl #3
   12134:	andeq	r4, r1, r8, lsl #3
   12138:	andeq	r4, r1, r8, lsl #3
   1213c:	andeq	r4, r1, r8, lsl #3
   12140:	andeq	r4, r1, r8, lsl #3
   12144:	andeq	r4, r1, r8, lsl #3
   12148:	andeq	r4, r1, r8, lsl #3
   1214c:	andeq	r4, r1, r8, lsl #3
   12150:	andeq	r4, r1, r8, lsl #3
   12154:	andeq	r4, r1, r8, lsl #3
   12158:	andeq	r4, r1, r8, lsl #3
   1215c:	andeq	r4, r1, r8, lsl #3
   12160:	andeq	r4, r1, r8, lsl #3
   12164:	andeq	r4, r1, r8, lsl #3
   12168:	andeq	r4, r1, r8, lsl #3
   1216c:	andeq	r4, r1, r8, lsl #3
   12170:	andeq	r4, r1, r8, lsl #3
   12174:	andeq	r4, r1, r8, lsl #3
   12178:	andeq	r4, r1, r8, lsl #3
   1217c:	andeq	r4, r1, r8, lsl #3
   12180:	andeq	r4, r1, r8, lsl #3
   12184:	andeq	r4, r1, r8, lsl #3
   12188:	andeq	r4, r1, r8, lsl #3
   1218c:	andeq	r4, r1, r8, lsl #3
   12190:	andeq	r4, r1, r8, lsl #3
   12194:	andeq	r4, r1, r8, lsl #3
   12198:	andeq	r4, r1, r8, lsl #3
   1219c:	andeq	r4, r1, r8, lsl #3
   121a0:	andeq	r4, r1, r8, lsl #3
   121a4:	andeq	r4, r1, r8, lsl #3
   121a8:	andeq	r4, r1, r8, lsl #3
   121ac:	andeq	r4, r1, r8, lsl #3
   121b0:	andeq	r4, r1, r8, lsl #3
   121b4:	andeq	r4, r1, r8, lsl #3
   121b8:	andeq	r4, r1, r8, lsl #3
   121bc:	andeq	r4, r1, r8, lsl #3
   121c0:	andeq	r4, r1, r8, lsl #3
   121c4:	andeq	r4, r1, r8, lsl #3
   121c8:	andeq	r4, r1, r8, lsl #3
   121cc:	andeq	r4, r1, r8, lsl #3
   121d0:	andeq	r2, r1, r8, asr #7
   121d4:	andeq	r2, r1, r0, lsl #6
   121d8:	muleq	r1, r8, r2
   121dc:	strdeq	r2, [r1], -r0
   121e0:	andeq	r2, r1, ip, lsl r2
   121e4:	andeq	r2, r1, r0, ror #7
   121e8:	sub	r0, r8, #110	; 0x6e
   121ec:	ldr	sl, [r5]
   121f0:	mov	r7, r5
   121f4:	clz	r0, r0
   121f8:	lsr	r0, r0, #5
   121fc:	strb	r0, [r6, #1]
   12200:	ldrb	r0, [sl]
   12204:	cmp	r0, #45	; 0x2d
   12208:	beq	11d78 <__assert_fail@plt+0x790>
   1220c:	cmp	r0, #43	; 0x2b
   12210:	moveq	r0, #1
   12214:	strbeq	r0, [r6, #3]
   12218:	b	11d08 <__assert_fail@plt+0x720>
   1221c:	ldr	r1, [r5]
   12220:	mov	r2, #1
   12224:	strb	r2, [r6, #4]
   12228:	cmp	r1, #0
   1222c:	beq	123f0 <__assert_fail@plt+0xe08>
   12230:	movw	r0, #61780	; 0xf154
   12234:	mov	r3, #4
   12238:	mov	r8, r6
   1223c:	mov	r6, r4
   12240:	mov	r4, r5
   12244:	movw	r5, #58144	; 0xe320
   12248:	movt	r0, #2
   1224c:	str	r3, [sp]
   12250:	movt	r5, #1
   12254:	ldr	r0, [r0]
   12258:	mov	r3, r5
   1225c:	stmib	sp, {r0, r2}
   12260:	movw	r0, #56207	; 0xdb8f
   12264:	movw	r2, #58152	; 0xe328
   12268:	movt	r0, #1
   1226c:	movt	r2, #1
   12270:	bl	16e10 <__assert_fail@plt+0x5828>
   12274:	ldr	r0, [r5, r0, lsl #2]
   12278:	movw	r1, #61760	; 0xf140
   1227c:	mov	r5, r4
   12280:	mov	r4, r6
   12284:	mov	r6, r8
   12288:	movt	r1, #2
   1228c:	str	r0, [r1]
   12290:	mov	r0, r9
   12294:	b	11d84 <__assert_fail@plt+0x79c>
   12298:	ldr	r6, [r5]
   1229c:	movw	r1, #56272	; 0xdbd0
   122a0:	mov	r0, #0
   122a4:	mov	r2, #5
   122a8:	movt	r1, #1
   122ac:	bl	11354 <dcgettext@plt>
   122b0:	mvn	r1, #-2147483648	; 0x80000000
   122b4:	mov	r2, #0
   122b8:	mov	r3, #0
   122bc:	stm	sp, {r1, r7}
   122c0:	movw	r1, #55014	; 0xd6e6
   122c4:	str	r0, [sp, #12]
   122c8:	mov	r0, r6
   122cc:	movw	r6, #61888	; 0xf1c0
   122d0:	str	r7, [sp, #16]
   122d4:	movt	r1, #1
   122d8:	movt	r6, #2
   122dc:	str	r1, [sp, #8]
   122e0:	bl	1b7a4 <__assert_fail@plt+0xa1bc>
   122e4:	str	r0, [r6, #12]
   122e8:	mov	r0, r9
   122ec:	b	11d84 <__assert_fail@plt+0x79c>
   122f0:	mov	r0, #1
   122f4:	strb	r0, [r6, #9]
   122f8:	mov	r0, r9
   122fc:	b	11d84 <__assert_fail@plt+0x79c>
   12300:	ldr	r6, [r5]
   12304:	movw	r1, #56216	; 0xdb98
   12308:	mov	r0, #0
   1230c:	mov	r2, #5
   12310:	movt	r1, #1
   12314:	bl	11354 <dcgettext@plt>
   12318:	mvn	r1, #0
   1231c:	str	r0, [sp, #12]
   12320:	mov	r0, r6
   12324:	movw	r6, #61888	; 0xf1c0
   12328:	mov	r2, #0
   1232c:	mov	r3, #0
   12330:	str	r7, [sp, #16]
   12334:	str	r1, [sp]
   12338:	str	r1, [sp, #4]
   1233c:	movw	r1, #55014	; 0xd6e6
   12340:	movt	r6, #2
   12344:	movt	r1, #1
   12348:	str	r1, [sp, #8]
   1234c:	bl	1b7a4 <__assert_fail@plt+0xa1bc>
   12350:	movw	r2, #61760	; 0xf140
   12354:	movt	r2, #2
   12358:	strd	r0, [r2, #8]
   1235c:	mov	r0, r9
   12360:	b	11d84 <__assert_fail@plt+0x79c>
   12364:	ldr	r0, [r5]
   12368:	movw	r3, #28764	; 0x705c
   1236c:	mov	r1, #0
   12370:	sub	r2, fp, #176	; 0xb0
   12374:	movt	r3, #1
   12378:	bl	1b878 <__assert_fail@plt+0xa290>
   1237c:	cmp	r0, #0
   12380:	beq	141fc <__assert_fail@plt+0x2c14>
   12384:	vldr	d8, [fp, #-176]	; 0xffffff50
   12388:	vcmpe.f64	d8, #0.0
   1238c:	vmrs	APSR_nzcv, fpscr
   12390:	blt	141fc <__assert_fail@plt+0x2c14>
   12394:	mov	r0, r9
   12398:	b	11d84 <__assert_fail@plt+0x79c>
   1239c:	movw	r0, #61760	; 0xf140
   123a0:	mov	r1, #1
   123a4:	movt	r0, #2
   123a8:	strb	r1, [r6, #4]
   123ac:	strb	r1, [r6, #8]
   123b0:	str	r1, [r0]
   123b4:	mov	r0, r9
   123b8:	b	11d84 <__assert_fail@plt+0x79c>
   123bc:	strb	r7, [r6, #5]
   123c0:	mov	r0, r9
   123c4:	b	11d84 <__assert_fail@plt+0x79c>
   123c8:	mov	r0, #1
   123cc:	strb	r0, [r6, #8]
   123d0:	mov	r0, r9
   123d4:	b	11d84 <__assert_fail@plt+0x79c>
   123d8:	mov	r0, #1
   123dc:	b	11d84 <__assert_fail@plt+0x79c>
   123e0:	mov	r0, #1
   123e4:	strb	r0, [r6, #7]
   123e8:	mov	r0, r9
   123ec:	b	11d84 <__assert_fail@plt+0x79c>
   123f0:	movw	r0, #61760	; 0xf140
   123f4:	mov	r1, #2
   123f8:	movt	r0, #2
   123fc:	str	r1, [r0]
   12400:	mov	r0, r9
   12404:	b	11d84 <__assert_fail@plt+0x79c>
   12408:	ldrb	r0, [r6, #8]
   1240c:	cmp	r0, #1
   12410:	bne	1246c <__assert_fail@plt+0xe84>
   12414:	ldrb	r0, [r6, #4]
   12418:	cmp	r0, #0
   1241c:	beq	12440 <__assert_fail@plt+0xe58>
   12420:	movw	r0, #61760	; 0xf140
   12424:	movt	r0, #2
   12428:	ldr	r0, [r0]
   1242c:	cmp	r0, #2
   12430:	bne	1246c <__assert_fail@plt+0xe84>
   12434:	movw	r1, #56472	; 0xdc98
   12438:	movt	r1, #1
   1243c:	b	12450 <__assert_fail@plt+0xe68>
   12440:	movw	r1, #56408	; 0xdc58
   12444:	mov	r0, #0
   12448:	strb	r0, [r6, #8]
   1244c:	movt	r1, #1
   12450:	mov	r0, #0
   12454:	mov	r2, #5
   12458:	bl	11354 <dcgettext@plt>
   1245c:	mov	r2, r0
   12460:	mov	r0, #0
   12464:	mov	r1, #0
   12468:	bl	113f0 <error@plt>
   1246c:	ldr	r0, [r6, #12]
   12470:	cmp	r0, #0
   12474:	beq	124ac <__assert_fail@plt+0xec4>
   12478:	ldrb	r1, [r6, #4]
   1247c:	cmp	r1, #0
   12480:	bne	124ac <__assert_fail@plt+0xec4>
   12484:	movw	r1, #56525	; 0xdccd
   12488:	mov	r0, #0
   1248c:	mov	r2, #5
   12490:	movt	r1, #1
   12494:	bl	11354 <dcgettext@plt>
   12498:	mov	r2, r0
   1249c:	mov	r0, #0
   124a0:	mov	r1, #0
   124a4:	bl	113f0 <error@plt>
   124a8:	b	12510 <__assert_fail@plt+0xf28>
   124ac:	cmp	r0, #0
   124b0:	beq	12510 <__assert_fail@plt+0xf28>
   124b4:	mov	r1, #0
   124b8:	bl	11450 <kill@plt>
   124bc:	cmp	r0, #0
   124c0:	beq	12510 <__assert_fail@plt+0xf28>
   124c4:	bl	114b0 <__errno_location@plt>
   124c8:	ldr	r0, [r0]
   124cc:	cmp	r0, #38	; 0x26
   124d0:	bne	12510 <__assert_fail@plt+0xf28>
   124d4:	movw	r1, #56587	; 0xdd0b
   124d8:	mov	r0, #0
   124dc:	mov	r2, #5
   124e0:	mov	r6, #0
   124e4:	movt	r1, #1
   124e8:	bl	11354 <dcgettext@plt>
   124ec:	mov	r2, r0
   124f0:	mov	r0, #0
   124f4:	mov	r1, #0
   124f8:	bl	113f0 <error@plt>
   124fc:	movw	r0, #61888	; 0xf1c0
   12500:	movt	r0, #2
   12504:	str	r6, [r0, #12]
   12508:	movw	r6, #61888	; 0xf1c0
   1250c:	movt	r6, #2
   12510:	ldrb	r2, [r6, #3]
   12514:	ldr	r5, [sp, #184]	; 0xb8
   12518:	ldr	r7, [sp, #188]	; 0xbc
   1251c:	cmp	r2, #0
   12520:	orrsne	r0, r5, r7
   12524:	beq	12538 <__assert_fail@plt+0xf50>
   12528:	subs	r5, r5, #1
   1252c:	sbc	r7, r7, #0
   12530:	str	r5, [sp, #184]	; 0xb8
   12534:	str	r7, [sp, #188]	; 0xbc
   12538:	movw	r0, #61864	; 0xf1a8
   1253c:	movw	r6, #57824	; 0xe1e0
   12540:	mov	r3, #1
   12544:	movt	r0, #2
   12548:	movt	r6, #1
   1254c:	ldr	r0, [r0]
   12550:	cmp	sl, r0
   12554:	subgt	r3, sl, r0
   12558:	addgt	r6, r4, r0, lsl #2
   1255c:	cmp	r3, #0
   12560:	str	r3, [sp, #76]	; 0x4c
   12564:	beq	12688 <__assert_fail@plt+0x10a0>
   12568:	movw	r4, #56098	; 0xdb22
   1256c:	str	r5, [sp, #72]	; 0x48
   12570:	mov	sl, r2
   12574:	mov	r5, #0
   12578:	mov	r8, #0
   1257c:	movt	r4, #1
   12580:	ldr	r0, [r6, r8, lsl #2]
   12584:	mov	r1, r4
   12588:	bl	112b8 <strcmp@plt>
   1258c:	ldr	r3, [sp, #76]	; 0x4c
   12590:	clz	r0, r0
   12594:	add	r8, r8, #1
   12598:	lsr	r0, r0, #5
   1259c:	orr	r5, r5, r0
   125a0:	cmp	r3, r8
   125a4:	bne	12580 <__assert_fail@plt+0xf98>
   125a8:	movw	r0, #61760	; 0xf140
   125ac:	mvn	r2, r5
   125b0:	movt	r0, #2
   125b4:	ldr	r1, [r0]
   125b8:	subs	r0, r1, #1
   125bc:	movwne	r0, #1
   125c0:	orr	r0, r2, r0
   125c4:	tst	r0, #1
   125c8:	beq	1425c <__assert_fail@plt+0x2c74>
   125cc:	movw	r0, #61888	; 0xf1c0
   125d0:	movt	r0, #2
   125d4:	ldrb	r0, [r0, #4]
   125d8:	cmp	r0, #0
   125dc:	beq	126a0 <__assert_fail@plt+0x10b8>
   125e0:	eor	r2, r5, #1
   125e4:	ldr	r5, [sp, #72]	; 0x48
   125e8:	tst	r2, #1
   125ec:	mov	r2, sl
   125f0:	bne	12664 <__assert_fail@plt+0x107c>
   125f4:	cmp	r3, #1
   125f8:	bne	12614 <__assert_fail@plt+0x102c>
   125fc:	cmp	r1, #2
   12600:	movweq	r0, #61888	; 0xf1c0
   12604:	movteq	r0, #2
   12608:	ldreq	r0, [r0, #12]
   1260c:	cmpeq	r0, #0
   12610:	beq	134d8 <__assert_fail@plt+0x1ef0>
   12614:	mov	r0, #0
   12618:	bl	115a0 <isatty@plt>
   1261c:	cmp	r0, #0
   12620:	beq	12648 <__assert_fail@plt+0x1060>
   12624:	movw	r1, #55506	; 0xd8d2
   12628:	mov	r0, #0
   1262c:	mov	r2, #5
   12630:	movt	r1, #1
   12634:	bl	11354 <dcgettext@plt>
   12638:	mov	r2, r0
   1263c:	mov	r0, #0
   12640:	mov	r1, #0
   12644:	bl	113f0 <error@plt>
   12648:	movw	r0, #61888	; 0xf1c0
   1264c:	ldr	r5, [sp, #184]	; 0xb8
   12650:	ldr	r7, [sp, #188]	; 0xbc
   12654:	ldr	r3, [sp, #76]	; 0x4c
   12658:	movt	r0, #2
   1265c:	ldrb	r2, [r0, #3]
   12660:	ldrb	r0, [r0, #4]
   12664:	orrs	r1, r5, r7
   12668:	bne	126b0 <__assert_fail@plt+0x10c8>
   1266c:	orrs	r0, r2, r0
   12670:	mov	r0, #0
   12674:	bne	126b0 <__assert_fail@plt+0x10c8>
   12678:	sub	sp, fp, #64	; 0x40
   1267c:	vpop	{d8-d11}
   12680:	add	sp, sp, #4
   12684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12688:	movw	r0, #61888	; 0xf1c0
   1268c:	movt	r0, #2
   12690:	ldrb	r0, [r0, #4]
   12694:	orrs	r1, r5, r7
   12698:	beq	1266c <__assert_fail@plt+0x1084>
   1269c:	b	126b0 <__assert_fail@plt+0x10c8>
   126a0:	ldr	r5, [sp, #72]	; 0x48
   126a4:	mov	r2, sl
   126a8:	orrs	r1, r5, r7
   126ac:	beq	1266c <__assert_fail@plt+0x1084>
   126b0:	mov	r0, r3
   126b4:	mov	r1, #80	; 0x50
   126b8:	bl	1b1dc <__assert_fail@plt+0x9bf4>
   126bc:	ldr	r3, [sp, #76]	; 0x4c
   126c0:	cmp	r3, #0
   126c4:	beq	126e0 <__assert_fail@plt+0x10f8>
   126c8:	mov	r7, r3
   126cc:	mov	r1, r0
   126d0:	ldr	r2, [r6], #4
   126d4:	subs	r7, r7, #1
   126d8:	str	r2, [r1], #80	; 0x50
   126dc:	bne	126d0 <__assert_fail@plt+0x10e8>
   126e0:	movw	r6, #61888	; 0xf1c0
   126e4:	cmp	r9, #1
   126e8:	movt	r6, #2
   126ec:	beq	12700 <__assert_fail@plt+0x1118>
   126f0:	cmp	r9, #0
   126f4:	bne	12708 <__assert_fail@plt+0x1120>
   126f8:	cmp	r3, #2
   126fc:	bcc	12708 <__assert_fail@plt+0x1120>
   12700:	mov	r1, #1
   12704:	strb	r1, [r6, #2]
   12708:	cmp	r3, #0
   1270c:	str	r0, [sp, #52]	; 0x34
   12710:	beq	12cf4 <__assert_fail@plt+0x170c>
   12714:	add	r7, r0, #40	; 0x28
   12718:	sub	r0, fp, #176	; 0xb0
   1271c:	vmov.i32	q5, #0	; 0x00000000
   12720:	mov	r5, r3
   12724:	mov	r4, #1
   12728:	add	r1, r0, #96	; 0x60
   1272c:	add	r0, r0, #80	; 0x50
   12730:	str	r1, [sp, #60]	; 0x3c
   12734:	str	r0, [sp, #56]	; 0x38
   12738:	str	r5, [sp, #68]	; 0x44
   1273c:	ldr	r5, [r7, #-40]	; 0xffffffd8
   12740:	ldr	r8, [sp, #184]	; 0xb8
   12744:	ldr	r9, [sp, #188]	; 0xbc
   12748:	movw	r1, #56098	; 0xdb22
   1274c:	str	r4, [sp, #72]	; 0x48
   12750:	movt	r1, #1
   12754:	mov	r0, r5
   12758:	bl	112b8 <strcmp@plt>
   1275c:	mov	r4, r0
   12760:	cmp	r0, #0
   12764:	beq	1277c <__assert_fail@plt+0x1194>
   12768:	mov	r0, r5
   1276c:	mov	r1, #0
   12770:	bl	174a8 <__assert_fail@plt+0x5ec0>
   12774:	mov	sl, r0
   12778:	b	12788 <__assert_fail@plt+0x11a0>
   1277c:	mov	r0, #1
   12780:	mov	sl, #0
   12784:	strb	r0, [r6]
   12788:	ldrb	r5, [r6, #8]
   1278c:	add	r2, sl, #1
   12790:	cmn	sl, #1
   12794:	mov	r0, r2
   12798:	movwne	r0, #1
   1279c:	cmn	sl, #1
   127a0:	mvn	r1, r5
   127a4:	orr	r0, r1, r0
   127a8:	and	r0, r0, #1
   127ac:	strb	r0, [r7, #6]
   127b0:	beq	127e4 <__assert_fail@plt+0x11fc>
   127b4:	ldrb	r5, [r6, #2]
   127b8:	ldr	r6, [r7, #-40]	; 0xffffffd8
   127bc:	movw	r1, #56098	; 0xdb22
   127c0:	str	r2, [sp, #64]	; 0x40
   127c4:	movt	r1, #1
   127c8:	mov	r0, r6
   127cc:	bl	112b8 <strcmp@plt>
   127d0:	cmp	r0, #0
   127d4:	beq	12818 <__assert_fail@plt+0x1230>
   127d8:	cmp	r5, #0
   127dc:	bne	12838 <__assert_fail@plt+0x1250>
   127e0:	b	128b0 <__assert_fail@plt+0x12c8>
   127e4:	ldrb	r0, [r6, #4]
   127e8:	cmp	r0, #0
   127ec:	beq	12aa4 <__assert_fail@plt+0x14bc>
   127f0:	mvn	r0, #0
   127f4:	str	r0, [r7, #8]
   127f8:	bl	114b0 <__errno_location@plt>
   127fc:	ldr	r1, [r0]
   12800:	eor	r2, r5, #1
   12804:	strb	r2, [r7, #4]
   12808:	sub	r2, r7, #16
   1280c:	vst1.64	{d10-d11}, [r2]
   12810:	str	r1, [r7, #12]
   12814:	b	12aa8 <__assert_fail@plt+0x14c0>
   12818:	movw	r1, #56895	; 0xde3f
   1281c:	mov	r0, #0
   12820:	mov	r2, #5
   12824:	movt	r1, #1
   12828:	bl	11354 <dcgettext@plt>
   1282c:	mov	r6, r0
   12830:	cmp	r5, #0
   12834:	beq	128b0 <__assert_fail@plt+0x12c8>
   12838:	movw	r0, #61888	; 0xf1c0
   1283c:	movw	r2, #55014	; 0xd6e6
   12840:	movw	r1, #56910	; 0xde4e
   12844:	mov	r3, r6
   12848:	movt	r0, #2
   1284c:	movt	r2, #1
   12850:	movt	r1, #1
   12854:	mov	r5, r0
   12858:	ldrb	r0, [r0, #10]
   1285c:	cmp	r0, #0
   12860:	movw	r0, #55013	; 0xd6e5
   12864:	movt	r0, #1
   12868:	movne	r2, r0
   1286c:	mov	r0, #1
   12870:	bl	114d4 <__printf_chk@plt>
   12874:	ldr	r6, [r7, #-40]	; 0xffffffd8
   12878:	movw	r1, #56098	; 0xdb22
   1287c:	mov	r0, #1
   12880:	strb	r0, [r5, #10]
   12884:	movt	r1, #1
   12888:	mov	r0, r6
   1288c:	bl	112b8 <strcmp@plt>
   12890:	cmp	r0, #0
   12894:	bne	128b0 <__assert_fail@plt+0x12c8>
   12898:	movw	r1, #56895	; 0xde3f
   1289c:	mov	r0, #0
   128a0:	mov	r2, #5
   128a4:	movt	r1, #1
   128a8:	bl	11354 <dcgettext@plt>
   128ac:	mov	r6, r0
   128b0:	add	r0, sp, #80	; 0x50
   128b4:	mov	r1, sl
   128b8:	mov	r2, r8
   128bc:	mov	r3, r9
   128c0:	str	r0, [sp]
   128c4:	mov	r0, r6
   128c8:	bl	14368 <__assert_fail@plt+0x2d80>
   128cc:	mov	r6, r0
   128d0:	movw	r0, #61888	; 0xf1c0
   128d4:	movt	r0, #2
   128d8:	ldrb	r0, [r0, #4]
   128dc:	cmp	r0, #0
   128e0:	beq	129ec <__assert_fail@plt+0x1404>
   128e4:	eor	r0, r6, #1
   128e8:	mov	r1, sl
   128ec:	sub	r2, fp, #176	; 0xb0
   128f0:	rsb	r0, r0, #0
   128f4:	str	r0, [r7, #12]
   128f8:	mov	r0, #3
   128fc:	bl	113a8 <__fxstat64@plt>
   12900:	cmn	r0, #1
   12904:	ble	12a24 <__assert_fail@plt+0x143c>
   12908:	ldr	r0, [fp, #-160]	; 0xffffff60
   1290c:	and	r1, r0, #61440	; 0xf000
   12910:	cmp	r1, #32768	; 0x8000
   12914:	bge	12b28 <__assert_fail@plt+0x1540>
   12918:	cmp	r1, #4096	; 0x1000
   1291c:	cmpne	r1, #8192	; 0x2000
   12920:	beq	12b30 <__assert_fail@plt+0x1548>
   12924:	mov	r0, #0
   12928:	mov	r1, #1
   1292c:	mov	r2, #5
   12930:	strb	r0, [r7, #6]
   12934:	mvn	r0, #0
   12938:	str	r0, [r7, #12]
   1293c:	movw	r0, #61888	; 0xf1c0
   12940:	movt	r0, #2
   12944:	ldrb	r0, [r0, #8]
   12948:	bic	r0, r1, r0
   1294c:	movw	r1, #56825	; 0xddf9
   12950:	strb	r0, [r7, #4]
   12954:	mov	r0, #0
   12958:	movt	r1, #1
   1295c:	bl	11354 <dcgettext@plt>
   12960:	ldr	r6, [r7, #-40]	; 0xffffffd8
   12964:	movw	r1, #56098	; 0xdb22
   12968:	mov	r4, r0
   1296c:	movt	r1, #1
   12970:	mov	r0, r6
   12974:	bl	112b8 <strcmp@plt>
   12978:	cmp	r0, #0
   1297c:	bne	12998 <__assert_fail@plt+0x13b0>
   12980:	movw	r1, #56895	; 0xde3f
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	movt	r1, #1
   12990:	bl	11354 <dcgettext@plt>
   12994:	mov	r6, r0
   12998:	mov	r0, #0
   1299c:	mov	r1, #3
   129a0:	mov	r2, r6
   129a4:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   129a8:	mov	r6, r0
   129ac:	ldrb	r0, [r7, #4]
   129b0:	cmp	r0, #0
   129b4:	movw	r0, #55014	; 0xd6e6
   129b8:	movt	r0, #1
   129bc:	beq	129d4 <__assert_fail@plt+0x13ec>
   129c0:	movw	r1, #56870	; 0xde26
   129c4:	mov	r0, #0
   129c8:	mov	r2, #5
   129cc:	movt	r1, #1
   129d0:	bl	11354 <dcgettext@plt>
   129d4:	str	r0, [sp]
   129d8:	mov	r0, #0
   129dc:	mov	r1, #0
   129e0:	mov	r2, r4
   129e4:	mov	r3, r6
   129e8:	b	12a9c <__assert_fail@plt+0x14b4>
   129ec:	cmp	r4, #0
   129f0:	beq	12cb0 <__assert_fail@plt+0x16c8>
   129f4:	mov	r0, sl
   129f8:	bl	115d0 <close@plt>
   129fc:	ldr	r4, [sp, #72]	; 0x48
   12a00:	ldr	r5, [sp, #68]	; 0x44
   12a04:	cmp	r0, #0
   12a08:	beq	12cb8 <__assert_fail@plt+0x16d0>
   12a0c:	bl	114b0 <__errno_location@plt>
   12a10:	ldr	r8, [r0]
   12a14:	movw	r1, #56808	; 0xdde8
   12a18:	mov	r0, #0
   12a1c:	movt	r1, #1
   12a20:	b	12ac0 <__assert_fail@plt+0x14d8>
   12a24:	bl	114b0 <__errno_location@plt>
   12a28:	ldr	r1, [r0]
   12a2c:	mov	r2, #5
   12a30:	str	r1, [r7, #12]
   12a34:	movw	r1, #56808	; 0xdde8
   12a38:	ldr	r8, [r0]
   12a3c:	mov	r0, #0
   12a40:	movt	r1, #1
   12a44:	bl	11354 <dcgettext@plt>
   12a48:	ldr	r6, [r7, #-40]	; 0xffffffd8
   12a4c:	movw	r1, #56098	; 0xdb22
   12a50:	mov	r4, r0
   12a54:	movt	r1, #1
   12a58:	mov	r0, r6
   12a5c:	bl	112b8 <strcmp@plt>
   12a60:	cmp	r0, #0
   12a64:	bne	12a80 <__assert_fail@plt+0x1498>
   12a68:	movw	r1, #56895	; 0xde3f
   12a6c:	mov	r0, #0
   12a70:	mov	r2, #5
   12a74:	movt	r1, #1
   12a78:	bl	11354 <dcgettext@plt>
   12a7c:	mov	r6, r0
   12a80:	mov	r0, #4
   12a84:	mov	r1, r6
   12a88:	bl	1a464 <__assert_fail@plt+0x8e7c>
   12a8c:	mov	r3, r0
   12a90:	mov	r0, #0
   12a94:	mov	r1, r8
   12a98:	mov	r2, r4
   12a9c:	bl	113f0 <error@plt>
   12aa0:	b	12be8 <__assert_fail@plt+0x1600>
   12aa4:	bl	114b0 <__errno_location@plt>
   12aa8:	ldr	r8, [r0]
   12aac:	ldr	r4, [sp, #72]	; 0x48
   12ab0:	ldr	r5, [sp, #68]	; 0x44
   12ab4:	movw	r1, #56781	; 0xddcd
   12ab8:	mov	r0, #0
   12abc:	movt	r1, #1
   12ac0:	mov	r2, #5
   12ac4:	bl	11354 <dcgettext@plt>
   12ac8:	ldr	r6, [r7, #-40]	; 0xffffffd8
   12acc:	movw	r1, #56098	; 0xdb22
   12ad0:	mov	r9, r0
   12ad4:	movt	r1, #1
   12ad8:	mov	r0, r6
   12adc:	bl	112b8 <strcmp@plt>
   12ae0:	cmp	r0, #0
   12ae4:	bne	12b00 <__assert_fail@plt+0x1518>
   12ae8:	movw	r1, #56895	; 0xde3f
   12aec:	mov	r0, #0
   12af0:	mov	r2, #5
   12af4:	movt	r1, #1
   12af8:	bl	11354 <dcgettext@plt>
   12afc:	mov	r6, r0
   12b00:	mov	r0, #4
   12b04:	mov	r1, r6
   12b08:	bl	1a464 <__assert_fail@plt+0x8e7c>
   12b0c:	mov	r3, r0
   12b10:	mov	r0, #0
   12b14:	mov	r1, r8
   12b18:	mov	r2, r9
   12b1c:	mov	r6, #0
   12b20:	bl	113f0 <error@plt>
   12b24:	b	12cb8 <__assert_fail@plt+0x16d0>
   12b28:	cmpne	r1, #49152	; 0xc000
   12b2c:	bne	12924 <__assert_fail@plt+0x133c>
   12b30:	cmp	r6, #0
   12b34:	beq	12be8 <__assert_fail@plt+0x1600>
   12b38:	ldr	r1, [sp, #80]	; 0x50
   12b3c:	str	sl, [r7, #8]
   12b40:	ldr	r2, [sp, #84]	; 0x54
   12b44:	cmp	r4, #0
   12b48:	str	r1, [r7, #-32]	; 0xffffffe0
   12b4c:	ldr	r1, [sp, #56]	; 0x38
   12b50:	str	r2, [r7, #-28]	; 0xffffffe4
   12b54:	ldrd	r2, [r1]
   12b58:	ldr	r1, [fp, #-176]	; 0xffffff50
   12b5c:	str	r2, [r7, #-24]	; 0xffffffe8
   12b60:	str	r3, [r7, #-20]	; 0xffffffec
   12b64:	ldr	r2, [fp, #-172]	; 0xffffff54
   12b68:	str	r1, [r7, #-16]
   12b6c:	ldr	r1, [sp, #60]	; 0x3c
   12b70:	str	r2, [r7, #-12]
   12b74:	ldrd	r2, [r1]
   12b78:	mov	r1, #0
   12b7c:	str	r1, [r7, #32]
   12b80:	str	r1, [r7, #36]	; 0x24
   12b84:	str	r0, [r7]
   12b88:	mov	r0, #1
   12b8c:	mvneq	r0, #0
   12b90:	str	r0, [r7, #16]
   12b94:	strb	r1, [r7, #4]
   12b98:	movw	r1, #56098	; 0xdb22
   12b9c:	stmdb	r7, {r2, r3}
   12ba0:	movt	r1, #1
   12ba4:	ldr	r4, [r7, #-40]	; 0xffffffd8
   12ba8:	mov	r0, r4
   12bac:	bl	112b8 <strcmp@plt>
   12bb0:	cmp	r0, #0
   12bb4:	bne	12bd0 <__assert_fail@plt+0x15e8>
   12bb8:	movw	r1, #56895	; 0xde3f
   12bbc:	mov	r0, #0
   12bc0:	mov	r2, #5
   12bc4:	movt	r1, #1
   12bc8:	bl	11354 <dcgettext@plt>
   12bcc:	mov	r4, r0
   12bd0:	mov	r0, sl
   12bd4:	mov	r1, r4
   12bd8:	bl	15260 <__assert_fail@plt+0x3c78>
   12bdc:	strb	r0, [r7, #5]
   12be0:	mov	r6, #1
   12be4:	b	12cb0 <__assert_fail@plt+0x16c8>
   12be8:	movw	r0, #61888	; 0xf1c0
   12bec:	mov	r1, #1
   12bf0:	movt	r0, #2
   12bf4:	ldrb	r0, [r0, #8]
   12bf8:	bic	r0, r1, r0
   12bfc:	movw	r1, #56098	; 0xdb22
   12c00:	strb	r0, [r7, #4]
   12c04:	movt	r1, #1
   12c08:	ldr	r4, [r7, #-40]	; 0xffffffd8
   12c0c:	mov	r0, r4
   12c10:	bl	112b8 <strcmp@plt>
   12c14:	cmp	r0, #0
   12c18:	beq	12c80 <__assert_fail@plt+0x1698>
   12c1c:	ldr	r0, [sp, #64]	; 0x40
   12c20:	cmp	r0, #2
   12c24:	bcc	12ca4 <__assert_fail@plt+0x16bc>
   12c28:	mov	r0, sl
   12c2c:	bl	115d0 <close@plt>
   12c30:	cmp	r0, #0
   12c34:	beq	12ca4 <__assert_fail@plt+0x16bc>
   12c38:	bl	114b0 <__errno_location@plt>
   12c3c:	ldr	r5, [r0]
   12c40:	movw	r1, #57066	; 0xdeea
   12c44:	mov	r0, #0
   12c48:	mov	r2, #5
   12c4c:	movt	r1, #1
   12c50:	bl	11354 <dcgettext@plt>
   12c54:	mov	r6, r0
   12c58:	mov	r0, #4
   12c5c:	mov	r1, r4
   12c60:	bl	1a464 <__assert_fail@plt+0x8e7c>
   12c64:	mov	r3, r0
   12c68:	mov	r0, #0
   12c6c:	mov	r1, r5
   12c70:	mov	r2, r6
   12c74:	str	sl, [sp]
   12c78:	bl	113f0 <error@plt>
   12c7c:	b	12ca4 <__assert_fail@plt+0x16bc>
   12c80:	movw	r1, #56895	; 0xde3f
   12c84:	mov	r0, #0
   12c88:	mov	r2, #5
   12c8c:	movt	r1, #1
   12c90:	bl	11354 <dcgettext@plt>
   12c94:	mov	r4, r0
   12c98:	ldr	r0, [sp, #64]	; 0x40
   12c9c:	cmp	r0, #2
   12ca0:	bcs	12c28 <__assert_fail@plt+0x1640>
   12ca4:	mvn	r0, #0
   12ca8:	mov	r6, #0
   12cac:	str	r0, [r7, #8]
   12cb0:	ldr	r4, [sp, #72]	; 0x48
   12cb4:	ldr	r5, [sp, #68]	; 0x44
   12cb8:	and	r4, r4, r6
   12cbc:	movw	r6, #61888	; 0xf1c0
   12cc0:	add	r7, r7, #80	; 0x50
   12cc4:	subs	r5, r5, #1
   12cc8:	movt	r6, #2
   12ccc:	bne	12738 <__assert_fail@plt+0x1150>
   12cd0:	eor	r0, r4, #1
   12cd4:	ldr	r3, [sp, #76]	; 0x4c
   12cd8:	str	r0, [sp, #40]	; 0x28
   12cdc:	ldr	r0, [sp, #52]	; 0x34
   12ce0:	ldrb	r1, [r6, #4]
   12ce4:	cmp	r1, #0
   12ce8:	cmpne	r3, #0
   12cec:	beq	13528 <__assert_fail@plt+0x1f40>
   12cf0:	b	12d0c <__assert_fail@plt+0x1724>
   12cf4:	mov	r1, #0
   12cf8:	str	r1, [sp, #40]	; 0x28
   12cfc:	ldrb	r1, [r6, #4]
   12d00:	cmp	r1, #0
   12d04:	cmpne	r3, #0
   12d08:	beq	13528 <__assert_fail@plt+0x1f40>
   12d0c:	movw	r4, #56098	; 0xdb22
   12d10:	add	r6, r0, #48	; 0x30
   12d14:	mov	r5, #0
   12d18:	mov	r8, #1
   12d1c:	mvn	r9, #0
   12d20:	mov	r7, r3
   12d24:	movt	r4, #1
   12d28:	ldr	r0, [r6, #-48]	; 0xffffffd0
   12d2c:	mov	r1, r4
   12d30:	bl	112b8 <strcmp@plt>
   12d34:	cmp	r0, #0
   12d38:	bne	12d48 <__assert_fail@plt+0x1760>
   12d3c:	ldrb	r0, [r6, #-4]
   12d40:	cmp	r0, #0
   12d44:	beq	12d5c <__assert_fail@plt+0x1774>
   12d48:	add	r5, r5, #1
   12d4c:	subs	r7, r7, #1
   12d50:	add	r6, r6, #80	; 0x50
   12d54:	bne	12d28 <__assert_fail@plt+0x1740>
   12d58:	b	12d8c <__assert_fail@plt+0x17a4>
   12d5c:	ldr	r0, [r6]
   12d60:	cmp	r0, #0
   12d64:	blt	12d48 <__assert_fail@plt+0x1760>
   12d68:	ldr	r0, [r6, #-8]
   12d6c:	and	r0, r0, #61440	; 0xf000
   12d70:	cmp	r0, #4096	; 0x1000
   12d74:	bne	12d48 <__assert_fail@plt+0x1760>
   12d78:	strb	r8, [r6, #-4]
   12d7c:	str	r9, [r6]
   12d80:	subs	r7, r7, #1
   12d84:	add	r6, r6, #80	; 0x50
   12d88:	bne	12d28 <__assert_fail@plt+0x1740>
   12d8c:	movw	r6, #61888	; 0xf1c0
   12d90:	cmp	r5, #0
   12d94:	movt	r6, #2
   12d98:	beq	13528 <__assert_fail@plt+0x1f40>
   12d9c:	add	r2, sp, #80	; 0x50
   12da0:	mov	r0, #3
   12da4:	mov	r1, #1
   12da8:	bl	113a8 <__fxstat64@plt>
   12dac:	cmn	r0, #1
   12db0:	ble	142dc <__assert_fail@plt+0x2cf4>
   12db4:	ldr	r0, [sp, #96]	; 0x60
   12db8:	ldr	r3, [sp, #76]	; 0x4c
   12dbc:	and	r0, r0, #61440	; 0xf000
   12dc0:	sub	r0, r0, #4096	; 0x1000
   12dc4:	clz	r0, r0
   12dc8:	lsr	r0, r0, #5
   12dcc:	strb	r0, [r6, #6]
   12dd0:	ldrb	r0, [r6, #7]
   12dd4:	cmp	r0, #0
   12dd8:	bne	12e9c <__assert_fail@plt+0x18b4>
   12ddc:	ldr	r0, [sp, #52]	; 0x34
   12de0:	movw	r4, #56098	; 0xdb22
   12de4:	mov	r6, #0
   12de8:	movt	r4, #1
   12dec:	add	r5, r0, #44	; 0x2c
   12df0:	ldrb	r0, [r5]
   12df4:	cmp	r0, #0
   12df8:	bne	12e14 <__assert_fail@plt+0x182c>
   12dfc:	ldr	r0, [r5, #-44]	; 0xffffffd4
   12e00:	mov	r1, r4
   12e04:	bl	112b8 <strcmp@plt>
   12e08:	ldr	r3, [sp, #76]	; 0x4c
   12e0c:	cmp	r0, #0
   12e10:	beq	12e8c <__assert_fail@plt+0x18a4>
   12e14:	add	r6, r6, #1
   12e18:	add	r5, r5, #80	; 0x50
   12e1c:	cmp	r6, r3
   12e20:	bcc	12df0 <__assert_fail@plt+0x1808>
   12e24:	ldr	r0, [sp, #52]	; 0x34
   12e28:	mov	r1, #0
   12e2c:	add	r0, r0, #45	; 0x2d
   12e30:	ldr	r2, [r0, #3]
   12e34:	cmp	r2, #0
   12e38:	blt	12e48 <__assert_fail@plt+0x1860>
   12e3c:	ldrb	r2, [r0]
   12e40:	cmp	r2, #0
   12e44:	bne	12e8c <__assert_fail@plt+0x18a4>
   12e48:	add	r1, r1, #1
   12e4c:	add	r0, r0, #80	; 0x50
   12e50:	cmp	r1, r3
   12e54:	bcc	12e30 <__assert_fail@plt+0x1848>
   12e58:	ldr	r0, [sp, #52]	; 0x34
   12e5c:	mov	r1, #0
   12e60:	add	r0, r0, #45	; 0x2d
   12e64:	ldr	r2, [r0, #3]
   12e68:	cmp	r2, #0
   12e6c:	blt	12e7c <__assert_fail@plt+0x1894>
   12e70:	ldrb	r2, [r0]
   12e74:	cmp	r2, #0
   12e78:	beq	13590 <__assert_fail@plt+0x1fa8>
   12e7c:	add	r1, r1, #1
   12e80:	add	r0, r0, #80	; 0x50
   12e84:	cmp	r1, r3
   12e88:	bcc	12e64 <__assert_fail@plt+0x187c>
   12e8c:	movw	r6, #61888	; 0xf1c0
   12e90:	mov	r0, #1
   12e94:	movt	r6, #2
   12e98:	strb	r0, [r6, #7]
   12e9c:	ldr	r1, [sp, #52]	; 0x34
   12ea0:	mov	r0, #1
   12ea4:	cmp	r3, #1
   12ea8:	strb	r0, [r6, #7]
   12eac:	bne	12ecc <__assert_fail@plt+0x18e4>
   12eb0:	ldr	r0, [r6, #12]
   12eb4:	cmp	r0, #0
   12eb8:	movweq	r0, #61760	; 0xf140
   12ebc:	movteq	r0, #2
   12ec0:	ldreq	r0, [r0]
   12ec4:	cmpeq	r0, #2
   12ec8:	beq	13558 <__assert_fail@plt+0x1f70>
   12ecc:	sub	r0, r3, #1
   12ed0:	mov	r4, #0
   12ed4:	str	r0, [sp, #56]	; 0x38
   12ed8:	mov	r0, #2048	; 0x800
   12edc:	str	r0, [sp, #60]	; 0x3c
   12ee0:	add	r0, r1, #44	; 0x2c
   12ee4:	str	r4, [sp, #64]	; 0x40
   12ee8:	str	r0, [sp, #32]
   12eec:	add	r0, r1, #48	; 0x30
   12ef0:	str	r0, [sp, #28]
   12ef4:	add	r0, r1, #72	; 0x48
   12ef8:	str	r0, [sp, #36]	; 0x24
   12efc:	sub	r0, fp, #176	; 0xb0
   12f00:	add	r1, r0, #48	; 0x30
   12f04:	add	r0, r0, #80	; 0x50
   12f08:	str	r0, [sp, #44]	; 0x2c
   12f0c:	mov	r0, #0
   12f10:	str	r1, [sp, #52]	; 0x34
   12f14:	str	r0, [sp, #48]	; 0x30
   12f18:	ldr	r6, [sp, #36]	; 0x24
   12f1c:	mov	r7, #0
   12f20:	mov	r5, #0
   12f24:	ldrb	r0, [r6, #-28]	; 0xffffffe4
   12f28:	cmp	r0, #0
   12f2c:	beq	12f44 <__assert_fail@plt+0x195c>
   12f30:	add	r7, r7, #1
   12f34:	add	r6, r6, #80	; 0x50
   12f38:	cmp	r7, r3
   12f3c:	bcc	12f24 <__assert_fail@plt+0x193c>
   12f40:	b	13368 <__assert_fail@plt+0x1d80>
   12f44:	ldr	sl, [r6, #-24]	; 0xffffffe8
   12f48:	sub	r0, r6, #72	; 0x48
   12f4c:	cmn	sl, #1
   12f50:	ble	13070 <__assert_fail@plt+0x1a88>
   12f54:	ldr	r8, [r6, #-72]	; 0xffffffb8
   12f58:	movw	r1, #56098	; 0xdb22
   12f5c:	str	r0, [sp, #72]	; 0x48
   12f60:	movt	r1, #1
   12f64:	mov	r0, r8
   12f68:	bl	112b8 <strcmp@plt>
   12f6c:	cmp	r0, #0
   12f70:	bne	12f8c <__assert_fail@plt+0x19a4>
   12f74:	movw	r1, #56895	; 0xde3f
   12f78:	mov	r0, #0
   12f7c:	mov	r2, #5
   12f80:	movt	r1, #1
   12f84:	bl	11354 <dcgettext@plt>
   12f88:	mov	r8, r0
   12f8c:	ldr	r0, [r6, #-16]
   12f90:	ldr	r9, [r6, #-32]	; 0xffffffe0
   12f94:	cmp	r0, r4
   12f98:	mov	r0, r4
   12f9c:	beq	12fe0 <__assert_fail@plt+0x19f8>
   12fa0:	mov	r0, sl
   12fa4:	mov	r1, #3
   12fa8:	bl	172c8 <__assert_fail@plt+0x5ce0>
   12fac:	cmp	r0, #0
   12fb0:	blt	13090 <__assert_fail@plt+0x1aa8>
   12fb4:	ldr	r1, [sp, #60]	; 0x3c
   12fb8:	orr	r2, r0, r1
   12fbc:	cmp	r2, r0
   12fc0:	beq	12fd8 <__assert_fail@plt+0x19f0>
   12fc4:	mov	r0, sl
   12fc8:	mov	r1, #4
   12fcc:	bl	172c8 <__assert_fail@plt+0x5ce0>
   12fd0:	cmn	r0, #1
   12fd4:	beq	13090 <__assert_fail@plt+0x1aa8>
   12fd8:	str	r4, [r6, #-16]
   12fdc:	mov	r0, r4
   12fe0:	cmp	r0, #0
   12fe4:	beq	130d0 <__assert_fail@plt+0x1ae8>
   12fe8:	ldr	r2, [r6, #-16]
   12fec:	mvn	r1, #0
   12ff0:	subs	r0, r1, #1
   12ff4:	sbc	r1, r1, #0
   12ff8:	cmp	r2, #0
   12ffc:	bne	1303c <__assert_fail@plt+0x1a54>
   13000:	and	r0, r9, #61440	; 0xf000
   13004:	mvn	r1, #0
   13008:	cmp	r0, #32768	; 0x8000
   1300c:	mvn	r0, #0
   13010:	bne	1303c <__assert_fail@plt+0x1a54>
   13014:	ldrb	r0, [r6, #-27]	; 0xffffffe5
   13018:	mvn	r1, #0
   1301c:	cmp	r0, #0
   13020:	mvn	r0, #0
   13024:	beq	1303c <__assert_fail@plt+0x1a54>
   13028:	ldr	r2, [sp, #52]	; 0x34
   1302c:	ldrd	r0, [r6, #-64]	; 0xffffffc0
   13030:	ldrd	r2, [r2]
   13034:	subs	r0, r2, r0
   13038:	sbc	r1, r3, r1
   1303c:	stm	sp, {r0, r1}
   13040:	mov	r0, #0
   13044:	mov	r1, r8
   13048:	mov	r2, sl
   1304c:	bl	15b00 <__assert_fail@plt+0x4518>
   13050:	ldrd	r2, [r6, #-64]	; 0xffffffc0
   13054:	adds	r2, r2, r0
   13058:	adc	r3, r3, r1
   1305c:	orrs	r0, r0, r1
   13060:	movwne	r0, #1
   13064:	strd	r2, [r6, #-64]	; 0xffffffc0
   13068:	orr	r5, r5, r0
   1306c:	b	13078 <__assert_fail@plt+0x1a90>
   13070:	mov	r1, r4
   13074:	bl	15f1c <__assert_fail@plt+0x4934>
   13078:	ldr	r3, [sp, #76]	; 0x4c
   1307c:	add	r7, r7, #1
   13080:	add	r6, r6, #80	; 0x50
   13084:	cmp	r7, r3
   13088:	bcc	12f24 <__assert_fail@plt+0x193c>
   1308c:	b	13368 <__assert_fail@plt+0x1d80>
   13090:	ldr	r0, [r6, #-32]	; 0xffffffe0
   13094:	mov	r4, r8
   13098:	str	r0, [sp, #68]	; 0x44
   1309c:	bl	114b0 <__errno_location@plt>
   130a0:	ldr	r8, [r0]
   130a4:	ldr	r0, [sp, #68]	; 0x44
   130a8:	and	r0, r0, #61440	; 0xf000
   130ac:	cmp	r0, #32768	; 0x8000
   130b0:	cmpeq	r8, #1
   130b4:	bne	14220 <__assert_fail@plt+0x2c38>
   130b8:	ldr	r1, [sp, #64]	; 0x40
   130bc:	ldr	r0, [r6, #-16]
   130c0:	mov	r8, r4
   130c4:	mov	r4, r1
   130c8:	cmp	r0, #0
   130cc:	bne	12fe8 <__assert_fail@plt+0x1a00>
   130d0:	mov	r0, #3
   130d4:	mov	r1, sl
   130d8:	sub	r2, fp, #176	; 0xb0
   130dc:	str	r5, [sp, #68]	; 0x44
   130e0:	bl	113a8 <__fxstat64@plt>
   130e4:	cmp	r0, #0
   130e8:	beq	13150 <__assert_fail@plt+0x1b68>
   130ec:	mvn	r0, #0
   130f0:	str	r0, [r6, #-24]	; 0xffffffe8
   130f4:	bl	114b0 <__errno_location@plt>
   130f8:	ldr	r1, [r0]
   130fc:	mov	r2, r8
   13100:	str	r1, [r6, #-20]	; 0xffffffec
   13104:	mov	r1, #3
   13108:	ldr	r5, [r0]
   1310c:	mov	r0, #0
   13110:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   13114:	movw	r2, #58266	; 0xe39a
   13118:	mov	r3, r0
   1311c:	mov	r0, #0
   13120:	mov	r1, r5
   13124:	movt	r2, #1
   13128:	bl	113f0 <error@plt>
   1312c:	mov	r0, sl
   13130:	bl	115d0 <close@plt>
   13134:	ldr	r3, [sp, #76]	; 0x4c
   13138:	ldr	r5, [sp, #68]	; 0x44
   1313c:	add	r7, r7, #1
   13140:	add	r6, r6, #80	; 0x50
   13144:	cmp	r7, r3
   13148:	bcc	12f24 <__assert_fail@plt+0x193c>
   1314c:	b	13368 <__assert_fail@plt+0x1d80>
   13150:	ldr	r1, [r6, #-32]	; 0xffffffe0
   13154:	ldr	r0, [fp, #-160]	; 0xffffff60
   13158:	cmp	r1, r0
   1315c:	bne	13224 <__assert_fail@plt+0x1c3c>
   13160:	and	r1, r1, #61440	; 0xf000
   13164:	cmp	r1, #32768	; 0x8000
   13168:	bne	1318c <__assert_fail@plt+0x1ba4>
   1316c:	ldr	r1, [sp, #52]	; 0x34
   13170:	ldrd	r4, [r6, #-64]	; 0xffffffc0
   13174:	ldrd	r2, [r1]
   13178:	eor	r2, r4, r2
   1317c:	ldr	r4, [sp, #64]	; 0x40
   13180:	eor	r1, r5, r3
   13184:	orrs	r1, r2, r1
   13188:	bne	13224 <__assert_fail@plt+0x1c3c>
   1318c:	ldr	r1, [sp, #44]	; 0x2c
   13190:	ldrd	r4, [r6, #-56]	; 0xffffffc8
   13194:	ldrd	r2, [r1]
   13198:	mov	r1, #0
   1319c:	cmp	r4, r2
   131a0:	ldr	r4, [sp, #64]	; 0x40
   131a4:	mov	r2, #0
   131a8:	movwgt	r1, #1
   131ac:	sublt	r1, r1, #1
   131b0:	cmp	r5, r3
   131b4:	movwgt	r2, #1
   131b8:	sublt	r2, r2, #1
   131bc:	cmn	r2, r1, lsl #1
   131c0:	bne	13224 <__assert_fail@plt+0x1c3c>
   131c4:	movw	ip, #61760	; 0xf140
   131c8:	ldrd	r2, [r6]
   131cc:	movt	ip, #2
   131d0:	ldrd	r0, [ip, #8]
   131d4:	adds	r4, r2, #1
   131d8:	adc	r5, r3, #0
   131dc:	subs	r0, r2, r0
   131e0:	strd	r4, [r6]
   131e4:	sbcs	r0, r3, r1
   131e8:	bcc	1334c <__assert_fail@plt+0x1d64>
   131ec:	ldr	r0, [ip]
   131f0:	ldr	r4, [sp, #64]	; 0x40
   131f4:	ldr	r5, [sp, #68]	; 0x44
   131f8:	cmp	r0, #1
   131fc:	bne	13078 <__assert_fail@plt+0x1a90>
   13200:	ldr	r1, [r6, #-16]
   13204:	ldr	r0, [sp, #72]	; 0x48
   13208:	cmp	r1, #0
   1320c:	movwne	r1, #1
   13210:	bl	15f1c <__assert_fail@plt+0x4934>
   13214:	mov	r0, #0
   13218:	str	r0, [r6]
   1321c:	str	r0, [r6, #4]
   13220:	b	13078 <__assert_fail@plt+0x1a90>
   13224:	ldr	r1, [sp, #44]	; 0x2c
   13228:	ldrd	r2, [r1]
   1322c:	mov	r1, #0
   13230:	str	r1, [r6]
   13234:	str	r1, [r6, #4]
   13238:	str	r0, [r6, #-32]	; 0xffffffe0
   1323c:	and	r0, r9, #61440	; 0xf000
   13240:	cmp	r0, #32768	; 0x8000
   13244:	strd	r2, [r6, #-56]	; 0xffffffc8
   13248:	bne	132d4 <__assert_fail@plt+0x1cec>
   1324c:	mov	r5, r6
   13250:	ldr	r2, [sp, #52]	; 0x34
   13254:	ldr	r0, [r5, #-64]!	; 0xffffffc0
   13258:	ldrd	r2, [r2]
   1325c:	ldr	r1, [r5, #4]
   13260:	subs	r0, r2, r0
   13264:	sbcs	r0, r3, r1
   13268:	bge	132d4 <__assert_fail@plt+0x1cec>
   1326c:	movw	r1, #57741	; 0xe18d
   13270:	mov	r0, #0
   13274:	mov	r2, #5
   13278:	movt	r1, #1
   1327c:	bl	11354 <dcgettext@plt>
   13280:	str	r9, [sp, #72]	; 0x48
   13284:	mov	r9, r0
   13288:	mov	r0, #0
   1328c:	mov	r1, #3
   13290:	mov	r2, r8
   13294:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   13298:	mov	r3, r0
   1329c:	mov	r0, #0
   132a0:	mov	r1, #0
   132a4:	mov	r2, r9
   132a8:	bl	113f0 <error@plt>
   132ac:	mov	r9, #0
   132b0:	mov	r0, sl
   132b4:	mov	r2, #0
   132b8:	mov	r3, #0
   132bc:	str	r8, [sp, #4]
   132c0:	str	r9, [sp]
   132c4:	bl	15e1c <__assert_fail@plt+0x4834>
   132c8:	str	r9, [r5]
   132cc:	str	r9, [r5, #4]
   132d0:	ldr	r9, [sp, #72]	; 0x48
   132d4:	ldr	r0, [sp, #56]	; 0x38
   132d8:	ldr	r5, [sp, #68]	; 0x44
   132dc:	cmp	r7, r0
   132e0:	beq	12fe8 <__assert_fail@plt+0x1a00>
   132e4:	movw	r0, #61888	; 0xf1c0
   132e8:	str	r7, [sp, #56]	; 0x38
   132ec:	movt	r0, #2
   132f0:	ldrb	r0, [r0, #2]
   132f4:	cmp	r0, #1
   132f8:	bne	12fe8 <__assert_fail@plt+0x1a00>
   132fc:	movw	r0, #61888	; 0xf1c0
   13300:	movw	r2, #55014	; 0xd6e6
   13304:	movw	r1, #56910	; 0xde4e
   13308:	mov	r3, r8
   1330c:	movt	r0, #2
   13310:	movt	r2, #1
   13314:	movt	r1, #1
   13318:	mov	r4, r0
   1331c:	ldrb	r0, [r0, #10]
   13320:	cmp	r0, #0
   13324:	movw	r0, #55013	; 0xd6e5
   13328:	movt	r0, #1
   1332c:	movne	r2, r0
   13330:	mov	r0, #1
   13334:	bl	114d4 <__printf_chk@plt>
   13338:	mov	r0, #1
   1333c:	str	r7, [sp, #56]	; 0x38
   13340:	strb	r0, [r4, #10]
   13344:	ldr	r4, [sp, #64]	; 0x40
   13348:	b	12fe8 <__assert_fail@plt+0x1a00>
   1334c:	ldr	r3, [sp, #76]	; 0x4c
   13350:	ldr	r4, [sp, #64]	; 0x40
   13354:	ldr	r5, [sp, #68]	; 0x44
   13358:	add	r7, r7, #1
   1335c:	add	r6, r6, #80	; 0x50
   13360:	cmp	r7, r3
   13364:	bcc	12f24 <__assert_fail@plt+0x193c>
   13368:	movw	r6, #61888	; 0xf1c0
   1336c:	movt	r6, #2
   13370:	ldrb	r0, [r6, #8]
   13374:	cmp	r0, #1
   13378:	movweq	r1, #61760	; 0xf140
   1337c:	movteq	r1, #2
   13380:	ldreq	r1, [r1]
   13384:	cmpeq	r1, #1
   13388:	beq	133f0 <__assert_fail@plt+0x1e08>
   1338c:	cmp	r0, #0
   13390:	beq	133c8 <__assert_fail@plt+0x1de0>
   13394:	ldr	r1, [sp, #32]
   13398:	mov	r0, #0
   1339c:	ldr	r2, [r1, #4]
   133a0:	cmn	r2, #1
   133a4:	bgt	133f0 <__assert_fail@plt+0x1e08>
   133a8:	ldrb	r2, [r1]
   133ac:	cmp	r2, #0
   133b0:	beq	133f0 <__assert_fail@plt+0x1e08>
   133b4:	add	r0, r0, #1
   133b8:	add	r1, r1, #80	; 0x50
   133bc:	cmp	r0, r3
   133c0:	bcc	1339c <__assert_fail@plt+0x1db4>
   133c4:	b	13504 <__assert_fail@plt+0x1f1c>
   133c8:	ldr	r1, [sp, #28]
   133cc:	mov	r0, #0
   133d0:	ldr	r2, [r1]
   133d4:	cmn	r2, #1
   133d8:	bgt	133f0 <__assert_fail@plt+0x1e08>
   133dc:	add	r0, r0, #1
   133e0:	add	r1, r1, #80	; 0x50
   133e4:	cmp	r0, r3
   133e8:	bcc	133d0 <__assert_fail@plt+0x1de8>
   133ec:	b	13504 <__assert_fail@plt+0x1f1c>
   133f0:	mvn	r0, r5
   133f4:	orr	r0, r4, r0
   133f8:	tst	r0, #1
   133fc:	beq	1341c <__assert_fail@plt+0x1e34>
   13400:	movw	r0, #61876	; 0xf1b4
   13404:	movt	r0, #2
   13408:	ldr	r0, [r0]
   1340c:	bl	11384 <fflush_unlocked@plt>
   13410:	ldr	r3, [sp, #76]	; 0x4c
   13414:	cmp	r0, #0
   13418:	bne	142b0 <__assert_fail@plt+0x2cc8>
   1341c:	ldrb	r0, [r6, #6]
   13420:	cmp	r0, #0
   13424:	beq	13460 <__assert_fail@plt+0x1e78>
   13428:	mov	r0, #8
   1342c:	mov	r1, #1
   13430:	mov	r2, #0
   13434:	strh	r0, [fp, #-172]	; 0xffffff54
   13438:	mov	r0, #1
   1343c:	str	r0, [fp, #-176]	; 0xffffff50
   13440:	sub	r0, fp, #176	; 0xb0
   13444:	bl	1139c <poll@plt>
   13448:	cmp	r0, #0
   1344c:	blt	1345c <__assert_fail@plt+0x1e74>
   13450:	ldrb	r0, [fp, #-170]	; 0xffffff56
   13454:	tst	r0, #8
   13458:	bne	142c4 <__assert_fail@plt+0x2cdc>
   1345c:	ldr	r3, [sp, #76]	; 0x4c
   13460:	ldr	r0, [sp, #48]	; 0x30
   13464:	orr	r0, r0, r5
   13468:	tst	r0, #1
   1346c:	bne	134cc <__assert_fail@plt+0x1ee4>
   13470:	ldr	r0, [r6, #12]
   13474:	cmp	r0, #0
   13478:	beq	134ac <__assert_fail@plt+0x1ec4>
   1347c:	mov	r1, #0
   13480:	bl	11450 <kill@plt>
   13484:	cmp	r0, #0
   13488:	beq	134ac <__assert_fail@plt+0x1ec4>
   1348c:	bl	114b0 <__errno_location@plt>
   13490:	ldr	r0, [r0]
   13494:	ldr	r3, [sp, #76]	; 0x4c
   13498:	mov	r5, #1
   1349c:	cmp	r0, #1
   134a0:	mov	r0, #1
   134a4:	str	r0, [sp, #48]	; 0x30
   134a8:	bne	134cc <__assert_fail@plt+0x1ee4>
   134ac:	vmov.f64	d0, d8
   134b0:	bl	1b7b0 <__assert_fail@plt+0xa1c8>
   134b4:	cmp	r0, #0
   134b8:	bne	142c8 <__assert_fail@plt+0x2ce0>
   134bc:	ldr	r3, [sp, #76]	; 0x4c
   134c0:	mov	r0, #0
   134c4:	mov	r5, #1
   134c8:	str	r0, [sp, #48]	; 0x30
   134cc:	tst	r5, #1
   134d0:	bne	12f18 <__assert_fail@plt+0x1930>
   134d4:	b	13528 <__assert_fail@plt+0x1f40>
   134d8:	sub	r2, fp, #176	; 0xb0
   134dc:	mov	r0, #3
   134e0:	mov	r1, #0
   134e4:	bl	113a8 <__fxstat64@plt>
   134e8:	cmp	r0, #0
   134ec:	bne	12614 <__assert_fail@plt+0x102c>
   134f0:	ldr	r0, [fp, #-160]	; 0xffffff60
   134f4:	and	r0, r0, #61440	; 0xf000
   134f8:	cmp	r0, #32768	; 0x8000
   134fc:	beq	12614 <__assert_fail@plt+0x102c>
   13500:	b	12648 <__assert_fail@plt+0x1060>
   13504:	movw	r1, #57248	; 0xdfa0
   13508:	mov	r0, #0
   1350c:	mov	r2, #5
   13510:	movt	r1, #1
   13514:	bl	11354 <dcgettext@plt>
   13518:	mov	r2, r0
   1351c:	mov	r0, #0
   13520:	mov	r1, #0
   13524:	bl	113f0 <error@plt>
   13528:	ldrb	r0, [r6]
   1352c:	cmp	r0, #1
   13530:	bne	13544 <__assert_fail@plt+0x1f5c>
   13534:	mov	r0, #0
   13538:	bl	115d0 <close@plt>
   1353c:	cmn	r0, #1
   13540:	ble	14298 <__assert_fail@plt+0x2cb0>
   13544:	ldr	r0, [sp, #40]	; 0x28
   13548:	sub	sp, fp, #64	; 0x40
   1354c:	vpop	{d8-d11}
   13550:	add	sp, sp, #4
   13554:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13558:	ldr	r0, [r1, #48]	; 0x30
   1355c:	cmn	r0, #1
   13560:	beq	12ecc <__assert_fail@plt+0x18e4>
   13564:	ldr	r0, [r1, #40]	; 0x28
   13568:	mov	r2, #2048	; 0x800
   1356c:	and	r0, r0, #61440	; 0xf000
   13570:	cmp	r0, #32768	; 0x8000
   13574:	sub	r4, r0, #32768	; 0x8000
   13578:	mov	r0, #0
   1357c:	movwne	r2, #0
   13580:	movwne	r4, #1
   13584:	str	r0, [sp, #56]	; 0x38
   13588:	str	r2, [sp, #60]	; 0x3c
   1358c:	b	12ee0 <__assert_fail@plt+0x18f8>
   13590:	ldr	r5, [sp, #52]	; 0x34
   13594:	mov	r4, #0
   13598:	sub	r7, fp, #176	; 0xb0
   1359c:	ldr	r1, [r5]
   135a0:	mov	r0, #3
   135a4:	mov	r2, r7
   135a8:	bl	115dc <__lxstat64@plt>
   135ac:	cmp	r0, #0
   135b0:	bne	135c4 <__assert_fail@plt+0x1fdc>
   135b4:	ldr	r0, [fp, #-160]	; 0xffffff60
   135b8:	and	r0, r0, #61440	; 0xf000
   135bc:	cmp	r0, #40960	; 0xa000
   135c0:	beq	139a4 <__assert_fail@plt+0x23bc>
   135c4:	ldr	r3, [sp, #76]	; 0x4c
   135c8:	add	r4, r4, #1
   135cc:	add	r5, r5, #80	; 0x50
   135d0:	cmp	r4, r3
   135d4:	bcc	1359c <__assert_fail@plt+0x1fb4>
   135d8:	ldr	r0, [sp, #52]	; 0x34
   135dc:	mov	r1, #0
   135e0:	add	r0, r0, #40	; 0x28
   135e4:	ldr	r2, [r0, #8]
   135e8:	cmp	r2, #0
   135ec:	blt	13604 <__assert_fail@plt+0x201c>
   135f0:	ldr	r2, [r0]
   135f4:	and	r2, r2, #61440	; 0xf000
   135f8:	cmp	r2, #32768	; 0x8000
   135fc:	cmpne	r2, #4096	; 0x1000
   13600:	bne	12e8c <__assert_fail@plt+0x18a4>
   13604:	add	r1, r1, #1
   13608:	add	r0, r0, #80	; 0x50
   1360c:	cmp	r1, r3
   13610:	bcc	135e4 <__assert_fail@plt+0x1ffc>
   13614:	movw	r0, #61760	; 0xf140
   13618:	ldr	r1, [sp, #40]	; 0x28
   1361c:	movt	r0, #2
   13620:	ldr	r0, [r0]
   13624:	eor	r1, r1, #1
   13628:	subs	r0, r0, #2
   1362c:	movwne	r0, #1
   13630:	orrs	r0, r0, r1
   13634:	beq	12e8c <__assert_fail@plt+0x18a4>
   13638:	movw	r6, #61888	; 0xf1c0
   1363c:	movt	r6, #2
   13640:	ldrb	r0, [r6, #7]
   13644:	cmp	r0, #0
   13648:	bne	12e9c <__assert_fail@plt+0x18b4>
   1364c:	bl	11480 <inotify_init@plt>
   13650:	cmn	r0, #1
   13654:	ble	139ac <__assert_fail@plt+0x23c4>
   13658:	mov	r8, r0
   1365c:	movw	r0, #61876	; 0xf1b4
   13660:	movt	r0, #2
   13664:	ldr	r0, [r0]
   13668:	bl	11384 <fflush_unlocked@plt>
   1366c:	cmp	r0, #0
   13670:	bne	142b0 <__assert_fail@plt+0x2cc8>
   13674:	mov	r0, #0
   13678:	movw	r2, #24308	; 0x5ef4
   1367c:	movw	r3, #24324	; 0x5f04
   13680:	mov	r1, #0
   13684:	str	r0, [sp]
   13688:	ldr	r0, [sp, #76]	; 0x4c
   1368c:	movt	r2, #1
   13690:	movt	r3, #1
   13694:	bl	179b8 <__assert_fail@plt+0x63d0>
   13698:	str	r0, [sp, #64]	; 0x40
   1369c:	cmp	r0, #0
   136a0:	movw	r0, #61760	; 0xf140
   136a4:	movt	r0, #2
   136a8:	beq	14310 <__assert_fail@plt+0x2d28>
   136ac:	ldr	r0, [r0]
   136b0:	mov	r1, #2
   136b4:	mov	r6, #0
   136b8:	mov	sl, #0
   136bc:	str	r8, [sp, #72]	; 0x48
   136c0:	cmp	r0, #1
   136c4:	ldr	r0, [sp, #52]	; 0x34
   136c8:	movweq	r1, #3078	; 0xc06
   136cc:	str	r1, [sp, #68]	; 0x44
   136d0:	ldr	r1, [sp, #76]	; 0x4c
   136d4:	add	r9, r0, #68	; 0x44
   136d8:	mov	r0, #0
   136dc:	str	r0, [sp, #56]	; 0x38
   136e0:	mov	r0, #0
   136e4:	str	r0, [sp, #60]	; 0x3c
   136e8:	ldrb	r0, [r9, #-24]	; 0xffffffe8
   136ec:	cmp	r0, #0
   136f0:	bne	13840 <__assert_fail@plt+0x2258>
   136f4:	ldr	r4, [r9, #-68]	; 0xffffffbc
   136f8:	mov	r0, r4
   136fc:	bl	11474 <strlen@plt>
   13700:	cmp	r6, r0
   13704:	mvn	r1, #0
   13708:	movcc	r6, r0
   1370c:	movw	r0, #61760	; 0xf140
   13710:	str	r1, [r9, #-8]
   13714:	movt	r0, #2
   13718:	ldr	r0, [r0]
   1371c:	cmp	r0, #1
   13720:	bne	13788 <__assert_fail@plt+0x21a0>
   13724:	mov	r0, r4
   13728:	bl	171ec <__assert_fail@plt+0x5c04>
   1372c:	ldrb	r8, [r4, r0]
   13730:	mov	r5, r0
   13734:	mov	r0, r4
   13738:	bl	16fc4 <__assert_fail@plt+0x59dc>
   1373c:	sub	r0, r0, r4
   13740:	movw	r1, #57150	; 0xdf3e
   13744:	cmp	r5, #0
   13748:	movw	r2, #1924	; 0x784
   1374c:	str	r0, [r9]
   13750:	mov	r0, #0
   13754:	movt	r1, #1
   13758:	strb	r0, [r4, r5]
   1375c:	ldr	r0, [sp, #72]	; 0x48
   13760:	ldrne	r1, [r9, #-68]	; 0xffffffbc
   13764:	bl	114a4 <inotify_add_watch@plt>
   13768:	str	r0, [r9, #-4]
   1376c:	ldr	r0, [r9, #-68]	; 0xffffffbc
   13770:	strb	r8, [r0, r5]
   13774:	ldr	r0, [r9, #-4]
   13778:	cmp	r0, #0
   1377c:	blt	139b4 <__assert_fail@plt+0x23cc>
   13780:	ldr	r4, [r9, #-68]	; 0xffffffbc
   13784:	ldr	r8, [sp, #72]	; 0x48
   13788:	ldr	r2, [sp, #68]	; 0x44
   1378c:	mov	r0, r8
   13790:	mov	r1, r4
   13794:	bl	114a4 <inotify_add_watch@plt>
   13798:	cmn	r0, #1
   1379c:	str	r0, [r9, #-8]
   137a0:	ble	137c8 <__assert_fail@plt+0x21e0>
   137a4:	ldr	r0, [sp, #64]	; 0x40
   137a8:	sub	r1, r9, #68	; 0x44
   137ac:	bl	185f0 <__assert_fail@plt+0x7008>
   137b0:	mov	r1, #1
   137b4:	cmp	r0, #0
   137b8:	str	r1, [sp, #56]	; 0x38
   137bc:	ldr	r1, [sp, #76]	; 0x4c
   137c0:	bne	13840 <__assert_fail@plt+0x2258>
   137c4:	b	14310 <__assert_fail@plt+0x2d28>
   137c8:	ldr	r0, [r9, #-20]	; 0xffffffec
   137cc:	add	r5, r0, #1
   137d0:	cmn	r0, #1
   137d4:	movwne	r5, #1
   137d8:	bl	114b0 <__errno_location@plt>
   137dc:	ldr	r4, [r0]
   137e0:	orr	r0, r4, #16
   137e4:	cmp	r0, #28
   137e8:	beq	139ec <__assert_fail@plt+0x2404>
   137ec:	ldr	r0, [sp, #60]	; 0x3c
   137f0:	orr	r0, r0, r5
   137f4:	str	r0, [sp, #60]	; 0x3c
   137f8:	ldr	r0, [r9, #-16]
   137fc:	cmp	r4, r0
   13800:	beq	1383c <__assert_fail@plt+0x2254>
   13804:	movw	r1, #57216	; 0xdf80
   13808:	mov	r0, #0
   1380c:	mov	r2, #5
   13810:	movt	r1, #1
   13814:	bl	11354 <dcgettext@plt>
   13818:	ldr	r1, [r9, #-68]	; 0xffffffbc
   1381c:	mov	r5, r0
   13820:	mov	r0, #4
   13824:	bl	1a464 <__assert_fail@plt+0x8e7c>
   13828:	mov	r3, r0
   1382c:	mov	r0, #0
   13830:	mov	r1, r4
   13834:	mov	r2, r5
   13838:	bl	113f0 <error@plt>
   1383c:	ldr	r1, [sp, #76]	; 0x4c
   13840:	add	sl, sl, #1
   13844:	add	r9, r9, #80	; 0x50
   13848:	cmp	sl, r1
   1384c:	bcc	136e8 <__assert_fail@plt+0x2100>
   13850:	movw	r0, #61760	; 0xf140
   13854:	movt	r0, #2
   13858:	ldr	r0, [r0]
   1385c:	cmp	r0, #2
   13860:	ldreq	r1, [sp, #60]	; 0x3c
   13864:	eoreq	r1, r1, #1
   13868:	tsteq	r1, #1
   1386c:	beq	1410c <__assert_fail@plt+0x2b24>
   13870:	ldr	r1, [sp, #56]	; 0x38
   13874:	subs	r0, r0, #2
   13878:	movwne	r0, #1
   1387c:	orr	r0, r1, r0
   13880:	tst	r0, #1
   13884:	beq	1434c <__assert_fail@plt+0x2d64>
   13888:	ldr	r1, [sp, #76]	; 0x4c
   1388c:	ldr	r4, [sp, #52]	; 0x34
   13890:	add	r8, r7, #96	; 0x60
   13894:	mov	r5, #0
   13898:	sub	r9, fp, #180	; 0xb4
   1389c:	add	r0, r1, r1, lsl #2
   138a0:	add	r0, r4, r0, lsl #4
   138a4:	sub	r0, r0, #80	; 0x50
   138a8:	str	r0, [fp, #-180]	; 0xffffff4c
   138ac:	ldrb	r0, [r4, #44]	; 0x2c
   138b0:	cmp	r0, #0
   138b4:	bne	13940 <__assert_fail@plt+0x2358>
   138b8:	movw	r0, #61760	; 0xf140
   138bc:	movt	r0, #2
   138c0:	ldr	r0, [r0]
   138c4:	cmp	r0, #1
   138c8:	bne	138dc <__assert_fail@plt+0x22f4>
   138cc:	mov	r0, r4
   138d0:	mov	r1, #0
   138d4:	bl	15f1c <__assert_fail@plt+0x4934>
   138d8:	b	13930 <__assert_fail@plt+0x2348>
   138dc:	ldr	r0, [r4, #48]	; 0x30
   138e0:	cmn	r0, #1
   138e4:	beq	13930 <__assert_fail@plt+0x2348>
   138e8:	ldr	r1, [r4]
   138ec:	mov	r0, #3
   138f0:	mov	r2, r7
   138f4:	bl	11594 <__xstat64@plt>
   138f8:	cmp	r0, #0
   138fc:	bne	13930 <__assert_fail@plt+0x2348>
   13900:	ldrd	r0, [r4, #24]
   13904:	ldr	r2, [fp, #-176]	; 0xffffff50
   13908:	ldr	r3, [fp, #-172]	; 0xffffff54
   1390c:	eor	r1, r1, r3
   13910:	eor	r0, r0, r2
   13914:	orrs	r0, r0, r1
   13918:	ldrdeq	r0, [r8]
   1391c:	ldrdeq	r2, [r4, #32]
   13920:	eoreq	r1, r3, r1
   13924:	eoreq	r0, r2, r0
   13928:	orrseq	r0, r0, r1
   1392c:	bne	13a30 <__assert_fail@plt+0x2448>
   13930:	mov	r0, r4
   13934:	mov	r1, r9
   13938:	bl	16834 <__assert_fail@plt+0x524c>
   1393c:	ldr	r1, [sp, #76]	; 0x4c
   13940:	add	r5, r5, #1
   13944:	add	r4, r4, #80	; 0x50
   13948:	cmp	r5, r1
   1394c:	bcc	138ac <__assert_fail@plt+0x22c4>
   13950:	vldr	d16, [pc, #848]	; 13ca8 <__assert_fail@plt+0x26c0>
   13954:	add	r0, r6, #17
   13958:	vmul.f64	d16, d8, d16
   1395c:	vcvt.s32.f64	s0, d16
   13960:	vcvt.f64.s32	d17, s0
   13964:	vmov	r9, s0
   13968:	str	r0, [sp, #24]
   1396c:	vcmpe.f64	d16, d17
   13970:	vmrs	APSR_nzcv, fpscr
   13974:	addgt	r9, r9, #1
   13978:	bl	1b10c <__assert_fail@plt+0x9b24>
   1397c:	str	r0, [sp, #36]	; 0x24
   13980:	ldr	r0, [sp, #52]	; 0x34
   13984:	vldr	d9, [pc, #804]	; 13cb0 <__assert_fail@plt+0x26c8>
   13988:	mov	r7, #0
   1398c:	str	r9, [sp, #28]
   13990:	add	r0, r0, #64	; 0x40
   13994:	str	r0, [sp, #32]
   13998:	mov	r0, #3
   1399c:	str	r0, [sp, #20]
   139a0:	b	13ad4 <__assert_fail@plt+0x24ec>
   139a4:	ldr	r3, [sp, #76]	; 0x4c
   139a8:	b	12e8c <__assert_fail@plt+0x18a4>
   139ac:	bl	114b0 <__errno_location@plt>
   139b0:	b	14130 <__assert_fail@plt+0x2b48>
   139b4:	bl	114b0 <__errno_location@plt>
   139b8:	ldr	r4, [r0]
   139bc:	cmp	r4, #28
   139c0:	bne	139f8 <__assert_fail@plt+0x2410>
   139c4:	movw	r1, #57188	; 0xdf64
   139c8:	mov	r0, #0
   139cc:	mov	r2, #5
   139d0:	movt	r1, #1
   139d4:	bl	11354 <dcgettext@plt>
   139d8:	mov	r2, r0
   139dc:	mov	r0, #0
   139e0:	mov	r1, #0
   139e4:	bl	113f0 <error@plt>
   139e8:	b	13aa4 <__assert_fail@plt+0x24bc>
   139ec:	movw	r1, #57188	; 0xdf64
   139f0:	movt	r1, #1
   139f4:	b	140f0 <__assert_fail@plt+0x2b08>
   139f8:	movw	r1, #57152	; 0xdf40
   139fc:	mov	r0, #0
   13a00:	mov	r2, #5
   13a04:	movt	r1, #1
   13a08:	bl	11354 <dcgettext@plt>
   13a0c:	ldr	r1, [r9, #-68]	; 0xffffffbc
   13a10:	mov	r5, r0
   13a14:	mov	r0, #4
   13a18:	bl	1a464 <__assert_fail@plt+0x8e7c>
   13a1c:	mov	r3, r0
   13a20:	mov	r0, #0
   13a24:	mov	r1, r4
   13a28:	mov	r2, r5
   13a2c:	b	13aa0 <__assert_fail@plt+0x24b8>
   13a30:	bl	114b0 <__errno_location@plt>
   13a34:	ldr	r8, [r0]
   13a38:	movw	r1, #57232	; 0xdf90
   13a3c:	mov	r0, #0
   13a40:	mov	r2, #5
   13a44:	movt	r1, #1
   13a48:	bl	11354 <dcgettext@plt>
   13a4c:	ldr	r4, [r4]
   13a50:	movw	r1, #56098	; 0xdb22
   13a54:	mov	r7, r0
   13a58:	movt	r1, #1
   13a5c:	mov	r0, r4
   13a60:	bl	112b8 <strcmp@plt>
   13a64:	cmp	r0, #0
   13a68:	bne	13a84 <__assert_fail@plt+0x249c>
   13a6c:	movw	r1, #56895	; 0xde3f
   13a70:	mov	r0, #0
   13a74:	mov	r2, #5
   13a78:	movt	r1, #1
   13a7c:	bl	11354 <dcgettext@plt>
   13a80:	mov	r4, r0
   13a84:	mov	r0, #4
   13a88:	mov	r1, r4
   13a8c:	bl	1a464 <__assert_fail@plt+0x8e7c>
   13a90:	mov	r3, r0
   13a94:	mov	r0, #0
   13a98:	mov	r1, r8
   13a9c:	mov	r2, r7
   13aa0:	bl	113f0 <error@plt>
   13aa4:	ldr	r8, [sp, #72]	; 0x48
   13aa8:	b	1410c <__assert_fail@plt+0x2b24>
   13aac:	ldr	r1, [sp, #24]
   13ab0:	ldr	r0, [sp, #36]	; 0x24
   13ab4:	lsl	r1, r1, #1
   13ab8:	str	r1, [sp, #24]
   13abc:	bl	1b154 <__assert_fail@plt+0x9b6c>
   13ac0:	str	r0, [sp, #36]	; 0x24
   13ac4:	ldr	r0, [sp, #20]
   13ac8:	ldr	r9, [sp, #28]
   13acc:	sub	r0, r0, #1
   13ad0:	str	r0, [sp, #20]
   13ad4:	ldr	r5, [sp, #76]	; 0x4c
   13ad8:	ldr	r8, [sp, #72]	; 0x48
   13adc:	mov	r4, #0
   13ae0:	mov	r0, #0
   13ae4:	str	r0, [sp, #60]	; 0x3c
   13ae8:	b	13afc <__assert_fail@plt+0x2514>
   13aec:	mov	r0, sl
   13af0:	mov	r1, #0
   13af4:	bl	15f1c <__assert_fail@plt+0x4934>
   13af8:	ldr	r5, [sp, #76]	; 0x4c
   13afc:	movw	r0, #61760	; 0xf140
   13b00:	movw	r6, #61888	; 0xf1c0
   13b04:	movt	r0, #2
   13b08:	movt	r6, #2
   13b0c:	ldr	r0, [r0]
   13b10:	cmp	r0, #1
   13b14:	ldrbeq	r0, [r6, #8]
   13b18:	cmpeq	r0, #0
   13b1c:	beq	13fc8 <__assert_fail@plt+0x29e0>
   13b20:	ldr	r0, [sp, #60]	; 0x3c
   13b24:	cmp	r4, r0
   13b28:	bls	13b3c <__assert_fail@plt+0x2554>
   13b2c:	ldr	r1, [sp, #60]	; 0x3c
   13b30:	str	r4, [sp, #48]	; 0x30
   13b34:	sub	sl, fp, #176	; 0xb0
   13b38:	b	13d30 <__assert_fail@plt+0x2748>
   13b3c:	vcmpe.f64	d8, #0.0
   13b40:	sub	sl, fp, #176	; 0xb0
   13b44:	vmrs	APSR_nzcv, fpscr
   13b48:	bls	13c5c <__assert_fail@plt+0x2674>
   13b4c:	vcmpe.f64	d8, d9
   13b50:	mov	r4, #0
   13b54:	vmrs	APSR_nzcv, fpscr
   13b58:	bpl	13be0 <__assert_fail@plt+0x25f8>
   13b5c:	ldr	r0, [r6, #12]
   13b60:	cmp	r0, #0
   13b64:	beq	13ba8 <__assert_fail@plt+0x25c0>
   13b68:	tst	r7, #1
   13b6c:	bne	14308 <__assert_fail@plt+0x2d20>
   13b70:	mov	r1, #0
   13b74:	mov	r7, #0
   13b78:	bl	11450 <kill@plt>
   13b7c:	cmp	r0, #0
   13b80:	mov	r2, r9
   13b84:	beq	13bac <__assert_fail@plt+0x25c4>
   13b88:	bl	114b0 <__errno_location@plt>
   13b8c:	ldr	r0, [r0]
   13b90:	mov	r2, r9
   13b94:	cmp	r0, #1
   13b98:	sub	r7, r0, #1
   13b9c:	movwne	r2, #0
   13ba0:	movwne	r7, #1
   13ba4:	b	13bac <__assert_fail@plt+0x25c4>
   13ba8:	mvn	r2, #0
   13bac:	mov	r0, #1
   13bb0:	strh	r0, [fp, #-172]	; 0xffffff54
   13bb4:	str	r8, [fp, #-176]	; 0xffffff50
   13bb8:	str	r0, [fp, #-168]	; 0xffffff58
   13bbc:	ldrb	r0, [r6, #6]
   13bc0:	str	r4, [fp, #-164]	; 0xffffff5c
   13bc4:	add	r0, r0, #1
   13bc8:	uxtb	r1, r0
   13bcc:	mov	r0, sl
   13bd0:	bl	1139c <poll@plt>
   13bd4:	cmp	r0, #0
   13bd8:	beq	13b5c <__assert_fail@plt+0x2574>
   13bdc:	b	13cf0 <__assert_fail@plt+0x2708>
   13be0:	ldr	r0, [r6, #12]
   13be4:	cmp	r0, #0
   13be8:	beq	13c24 <__assert_fail@plt+0x263c>
   13bec:	tst	r7, #1
   13bf0:	bne	14308 <__assert_fail@plt+0x2d20>
   13bf4:	mov	r1, #0
   13bf8:	mov	r7, #0
   13bfc:	bl	11450 <kill@plt>
   13c00:	cmp	r0, #0
   13c04:	beq	13c18 <__assert_fail@plt+0x2630>
   13c08:	bl	114b0 <__errno_location@plt>
   13c0c:	ldr	r0, [r0]
   13c10:	subs	r7, r0, #1
   13c14:	movwne	r7, #1
   13c18:	eor	r0, r7, #1
   13c1c:	rsb	r2, r0, #0
   13c20:	b	13c28 <__assert_fail@plt+0x2640>
   13c24:	mvn	r2, #0
   13c28:	mov	r0, #1
   13c2c:	strh	r0, [fp, #-172]	; 0xffffff54
   13c30:	str	r8, [fp, #-176]	; 0xffffff50
   13c34:	str	r0, [fp, #-168]	; 0xffffff58
   13c38:	ldrb	r0, [r6, #6]
   13c3c:	str	r4, [fp, #-164]	; 0xffffff5c
   13c40:	add	r0, r0, #1
   13c44:	uxtb	r1, r0
   13c48:	mov	r0, sl
   13c4c:	bl	1139c <poll@plt>
   13c50:	cmp	r0, #0
   13c54:	beq	13be0 <__assert_fail@plt+0x25f8>
   13c58:	b	13cf0 <__assert_fail@plt+0x2708>
   13c5c:	mov	r5, #0
   13c60:	ldr	r0, [r6, #12]
   13c64:	cmp	r0, #0
   13c68:	beq	13c9c <__assert_fail@plt+0x26b4>
   13c6c:	tst	r7, #1
   13c70:	bne	14308 <__assert_fail@plt+0x2d20>
   13c74:	mov	r1, #0
   13c78:	mov	r4, #0
   13c7c:	bl	11450 <kill@plt>
   13c80:	cmp	r0, #0
   13c84:	beq	13cb8 <__assert_fail@plt+0x26d0>
   13c88:	bl	114b0 <__errno_location@plt>
   13c8c:	ldr	r0, [r0]
   13c90:	subs	r7, r0, #1
   13c94:	movwne	r7, #1
   13c98:	b	13cbc <__assert_fail@plt+0x26d4>
   13c9c:	mvn	r4, #0
   13ca0:	b	13cbc <__assert_fail@plt+0x26d4>
   13ca4:	nop	{0}
   13ca8:	andeq	r0, r0, r0
   13cac:	addmi	r4, pc, r0
   13cb0:	andeq	r0, r0, r0
   13cb4:	cmpmi	r0, sp, asr #4
   13cb8:	mov	r7, #0
   13cbc:	mov	r0, #1
   13cc0:	mov	r2, r4
   13cc4:	strh	r0, [fp, #-172]	; 0xffffff54
   13cc8:	str	r8, [fp, #-176]	; 0xffffff50
   13ccc:	str	r0, [fp, #-168]	; 0xffffff58
   13cd0:	ldrb	r0, [r6, #6]
   13cd4:	str	r5, [fp, #-164]	; 0xffffff5c
   13cd8:	add	r0, r0, #1
   13cdc:	uxtb	r1, r0
   13ce0:	mov	r0, sl
   13ce4:	bl	1139c <poll@plt>
   13ce8:	cmp	r0, #0
   13cec:	beq	13c60 <__assert_fail@plt+0x2678>
   13cf0:	cmn	r0, #1
   13cf4:	ble	14314 <__assert_fail@plt+0x2d2c>
   13cf8:	ldrh	r0, [fp, #-162]	; 0xffffff5e
   13cfc:	cmp	r0, #0
   13d00:	bne	142c4 <__assert_fail@plt+0x2cdc>
   13d04:	ldr	r1, [sp, #36]	; 0x24
   13d08:	ldr	r2, [sp, #24]
   13d0c:	mov	r0, r8
   13d10:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   13d14:	cmp	r0, #0
   13d18:	beq	140b8 <__assert_fail@plt+0x2ad0>
   13d1c:	ldr	r5, [sp, #76]	; 0x4c
   13d20:	cmn	r0, #1
   13d24:	beq	140c8 <__assert_fail@plt+0x2ae0>
   13d28:	mov	r1, #0
   13d2c:	str	r0, [sp, #48]	; 0x30
   13d30:	ldr	r0, [sp, #36]	; 0x24
   13d34:	mov	r6, r1
   13d38:	add	r0, r0, r1
   13d3c:	ldr	r1, [r0, #4]
   13d40:	str	r0, [sp, #56]	; 0x38
   13d44:	ldr	r0, [r0, #12]
   13d48:	cmp	r0, #0
   13d4c:	str	r1, [sp, #44]	; 0x2c
   13d50:	bne	13d8c <__assert_fail@plt+0x27a4>
   13d54:	ldr	r1, [sp, #44]	; 0x2c
   13d58:	ands	r1, r1, #1024	; 0x400
   13d5c:	beq	13d8c <__assert_fail@plt+0x27a4>
   13d60:	ldr	r1, [sp, #56]	; 0x38
   13d64:	ldr	r3, [sp, #32]
   13d68:	mov	r2, #0
   13d6c:	ldr	r1, [r1]
   13d70:	ldr	r4, [r3]
   13d74:	cmp	r1, r4
   13d78:	beq	140e8 <__assert_fail@plt+0x2b00>
   13d7c:	add	r2, r2, #1
   13d80:	add	r3, r3, #80	; 0x50
   13d84:	cmp	r2, r5
   13d88:	bcc	13d70 <__assert_fail@plt+0x2788>
   13d8c:	add	r1, r6, r0
   13d90:	cmp	r0, #0
   13d94:	add	r1, r1, #16
   13d98:	str	r1, [sp, #60]	; 0x3c
   13d9c:	beq	13f64 <__assert_fail@plt+0x297c>
   13da0:	ldr	r4, [sp, #56]	; 0x38
   13da4:	ldr	r8, [sp, #32]
   13da8:	mov	sl, #0
   13dac:	ldr	r9, [r4], #16
   13db0:	ldr	r0, [r8]
   13db4:	cmp	r0, r9
   13db8:	bne	13ddc <__assert_fail@plt+0x27f4>
   13dbc:	ldr	r0, [r8, #-64]	; 0xffffffc0
   13dc0:	ldr	r1, [r8, #4]
   13dc4:	add	r1, r0, r1
   13dc8:	mov	r0, r4
   13dcc:	bl	112b8 <strcmp@plt>
   13dd0:	ldr	r5, [sp, #76]	; 0x4c
   13dd4:	cmp	r0, #0
   13dd8:	beq	13dec <__assert_fail@plt+0x2804>
   13ddc:	add	sl, sl, #1
   13de0:	add	r8, r8, #80	; 0x50
   13de4:	cmp	sl, r5
   13de8:	bcc	13db0 <__assert_fail@plt+0x27c8>
   13dec:	ldr	r8, [sp, #72]	; 0x48
   13df0:	ldr	r9, [sp, #28]
   13df4:	ldr	r4, [sp, #48]	; 0x30
   13df8:	cmp	sl, r5
   13dfc:	beq	13afc <__assert_fail@plt+0x2514>
   13e00:	ldr	r0, [sp, #52]	; 0x34
   13e04:	add	r4, sl, sl, lsl #2
   13e08:	movw	r6, #61760	; 0xf140
   13e0c:	movt	r6, #2
   13e10:	add	sl, r0, r4, lsl #4
   13e14:	ldr	r0, [sp, #44]	; 0x2c
   13e18:	tst	r0, #512	; 0x200
   13e1c:	bne	13f38 <__assert_fail@plt+0x2950>
   13e20:	ldr	r1, [sl]
   13e24:	ldr	r2, [sp, #68]	; 0x44
   13e28:	mov	r0, r8
   13e2c:	bl	114a4 <inotify_add_watch@plt>
   13e30:	mov	r2, r0
   13e34:	cmn	r0, #1
   13e38:	bgt	13ea0 <__assert_fail@plt+0x28b8>
   13e3c:	mov	r5, r2
   13e40:	bl	114b0 <__errno_location@plt>
   13e44:	ldr	r6, [r0]
   13e48:	orr	r0, r6, #16
   13e4c:	cmp	r0, #28
   13e50:	beq	139c4 <__assert_fail@plt+0x23dc>
   13e54:	movw	r1, #57216	; 0xdf80
   13e58:	mov	r0, #0
   13e5c:	mov	r2, #5
   13e60:	movt	r1, #1
   13e64:	bl	11354 <dcgettext@plt>
   13e68:	ldr	r1, [sl]
   13e6c:	mov	r8, r0
   13e70:	mov	r0, #4
   13e74:	bl	1a464 <__assert_fail@plt+0x8e7c>
   13e78:	mov	r3, r0
   13e7c:	mov	r0, #0
   13e80:	mov	r1, r6
   13e84:	mov	r2, r8
   13e88:	bl	113f0 <error@plt>
   13e8c:	ldr	r8, [sp, #72]	; 0x48
   13e90:	ldr	r9, [sp, #28]
   13e94:	movw	r6, #61760	; 0xf140
   13e98:	mov	r2, r5
   13e9c:	movt	r6, #2
   13ea0:	ldr	r0, [sp, #52]	; 0x34
   13ea4:	ldr	r5, [sp, #76]	; 0x4c
   13ea8:	add	r4, r0, r4, lsl #4
   13eac:	ldr	r1, [r4, #60]!	; 0x3c
   13eb0:	cmp	r1, #0
   13eb4:	blt	13ec0 <__assert_fail@plt+0x28d8>
   13eb8:	cmp	r2, r1
   13ebc:	beq	13f38 <__assert_fail@plt+0x2950>
   13ec0:	mov	r5, r2
   13ec4:	cmp	r1, #0
   13ec8:	blt	13ee0 <__assert_fail@plt+0x28f8>
   13ecc:	mov	r0, r8
   13ed0:	bl	115ac <inotify_rm_watch@plt>
   13ed4:	ldr	r0, [sp, #64]	; 0x40
   13ed8:	mov	r1, sl
   13edc:	bl	18638 <__assert_fail@plt+0x7050>
   13ee0:	str	r5, [r4]
   13ee4:	cmn	r5, #1
   13ee8:	ldr	r5, [sp, #76]	; 0x4c
   13eec:	ldr	r4, [sp, #48]	; 0x30
   13ef0:	beq	13afc <__assert_fail@plt+0x2514>
   13ef4:	ldr	r0, [sp, #64]	; 0x40
   13ef8:	mov	r1, sl
   13efc:	bl	18638 <__assert_fail@plt+0x7050>
   13f00:	cmp	r0, #0
   13f04:	movne	r4, r0
   13f08:	cmpne	sl, r0
   13f0c:	bne	13ff4 <__assert_fail@plt+0x2a0c>
   13f10:	ldr	r0, [sp, #64]	; 0x40
   13f14:	mov	r1, sl
   13f18:	bl	185f0 <__assert_fail@plt+0x7008>
   13f1c:	ldr	r5, [sp, #76]	; 0x4c
   13f20:	ldr	r8, [sp, #72]	; 0x48
   13f24:	ldr	r9, [sp, #28]
   13f28:	movw	r6, #61760	; 0xf140
   13f2c:	cmp	r0, #0
   13f30:	movt	r6, #2
   13f34:	beq	14310 <__assert_fail@plt+0x2d28>
   13f38:	ldr	r0, [r6]
   13f3c:	cmp	r0, #1
   13f40:	bne	13f84 <__assert_fail@plt+0x299c>
   13f44:	mov	r0, sl
   13f48:	mov	r1, #0
   13f4c:	bl	15f1c <__assert_fail@plt+0x4934>
   13f50:	ldr	r5, [sp, #76]	; 0x4c
   13f54:	ldr	r4, [sp, #48]	; 0x30
   13f58:	cmp	sl, #0
   13f5c:	beq	13afc <__assert_fail@plt+0x2514>
   13f60:	b	13f90 <__assert_fail@plt+0x29a8>
   13f64:	ldr	r0, [sp, #56]	; 0x38
   13f68:	mov	r1, sl
   13f6c:	ldr	r0, [r0]
   13f70:	str	r0, [fp, #-116]	; 0xffffff8c
   13f74:	ldr	r0, [sp, #64]	; 0x40
   13f78:	bl	176f0 <__assert_fail@plt+0x6108>
   13f7c:	ldr	r5, [sp, #76]	; 0x4c
   13f80:	mov	sl, r0
   13f84:	ldr	r4, [sp, #48]	; 0x30
   13f88:	cmp	sl, #0
   13f8c:	beq	13afc <__assert_fail@plt+0x2514>
   13f90:	ldr	r0, [sp, #56]	; 0x38
   13f94:	movw	r1, #3588	; 0xe04
   13f98:	ldr	r0, [r0, #4]
   13f9c:	tst	r0, r1
   13fa0:	beq	13fe0 <__assert_fail@plt+0x29f8>
   13fa4:	tst	r0, #1024	; 0x400
   13fa8:	beq	13aec <__assert_fail@plt+0x2504>
   13fac:	ldr	r1, [sl, #60]	; 0x3c
   13fb0:	mov	r0, r8
   13fb4:	bl	115ac <inotify_rm_watch@plt>
   13fb8:	ldr	r0, [sp, #64]	; 0x40
   13fbc:	mov	r1, sl
   13fc0:	bl	18638 <__assert_fail@plt+0x7050>
   13fc4:	b	13aec <__assert_fail@plt+0x2504>
   13fc8:	ldr	r0, [sp, #64]	; 0x40
   13fcc:	bl	17528 <__assert_fail@plt+0x5f40>
   13fd0:	ldr	r5, [sp, #76]	; 0x4c
   13fd4:	cmp	r0, #0
   13fd8:	bne	13b20 <__assert_fail@plt+0x2538>
   13fdc:	b	14328 <__assert_fail@plt+0x2d40>
   13fe0:	mov	r0, sl
   13fe4:	sub	r1, fp, #180	; 0xb4
   13fe8:	bl	16834 <__assert_fail@plt+0x524c>
   13fec:	ldr	r5, [sp, #76]	; 0x4c
   13ff0:	b	13afc <__assert_fail@plt+0x2514>
   13ff4:	movw	r0, #61760	; 0xf140
   13ff8:	movt	r0, #2
   13ffc:	ldr	r0, [r0]
   14000:	cmp	r0, #1
   14004:	bne	14014 <__assert_fail@plt+0x2a2c>
   14008:	mov	r0, r4
   1400c:	mov	r1, #0
   14010:	bl	15f1c <__assert_fail@plt+0x4934>
   14014:	mvn	r0, #0
   14018:	movw	r1, #56098	; 0xdb22
   1401c:	str	r0, [r4, #60]	; 0x3c
   14020:	movt	r1, #1
   14024:	ldr	r5, [r4]
   14028:	ldr	r4, [r4, #48]	; 0x30
   1402c:	mov	r0, r5
   14030:	bl	112b8 <strcmp@plt>
   14034:	cmp	r0, #0
   14038:	bne	14054 <__assert_fail@plt+0x2a6c>
   1403c:	movw	r1, #56895	; 0xde3f
   14040:	mov	r0, #0
   14044:	mov	r2, #5
   14048:	movt	r1, #1
   1404c:	bl	11354 <dcgettext@plt>
   14050:	mov	r5, r0
   14054:	add	r0, r4, #1
   14058:	cmp	r0, #2
   1405c:	bcc	13f10 <__assert_fail@plt+0x2928>
   14060:	mov	r0, r4
   14064:	bl	115d0 <close@plt>
   14068:	cmp	r0, #0
   1406c:	beq	13f10 <__assert_fail@plt+0x2928>
   14070:	bl	114b0 <__errno_location@plt>
   14074:	ldr	r8, [r0]
   14078:	movw	r1, #57066	; 0xdeea
   1407c:	mov	r0, #0
   14080:	mov	r2, #5
   14084:	movt	r1, #1
   14088:	bl	11354 <dcgettext@plt>
   1408c:	mov	r6, r0
   14090:	mov	r0, #4
   14094:	mov	r1, r5
   14098:	bl	1a464 <__assert_fail@plt+0x8e7c>
   1409c:	mov	r3, r0
   140a0:	mov	r0, #0
   140a4:	mov	r1, r8
   140a8:	mov	r2, r6
   140ac:	str	r4, [sp]
   140b0:	bl	113f0 <error@plt>
   140b4:	b	13f10 <__assert_fail@plt+0x2928>
   140b8:	ldr	r0, [sp, #20]
   140bc:	cmp	r0, #0
   140c0:	bne	13aac <__assert_fail@plt+0x24c4>
   140c4:	b	14354 <__assert_fail@plt+0x2d6c>
   140c8:	bl	114b0 <__errno_location@plt>
   140cc:	ldr	r4, [r0]
   140d0:	ldr	r0, [sp, #20]
   140d4:	cmp	r0, #0
   140d8:	beq	1435c <__assert_fail@plt+0x2d74>
   140dc:	cmp	r4, #22
   140e0:	beq	13aac <__assert_fail@plt+0x24c4>
   140e4:	b	1435c <__assert_fail@plt+0x2d74>
   140e8:	movw	r1, #57339	; 0xdffb
   140ec:	movt	r1, #1
   140f0:	mov	r0, #0
   140f4:	mov	r2, #5
   140f8:	bl	11354 <dcgettext@plt>
   140fc:	mov	r2, r0
   14100:	mov	r0, #0
   14104:	mov	r1, #0
   14108:	bl	113f0 <error@plt>
   1410c:	ldr	r0, [sp, #64]	; 0x40
   14110:	bl	17cd4 <__assert_fail@plt+0x66ec>
   14114:	mov	r0, r8
   14118:	bl	115d0 <close@plt>
   1411c:	bl	114b0 <__errno_location@plt>
   14120:	movw	r6, #61888	; 0xf1c0
   14124:	mov	r1, #0
   14128:	str	r1, [r0]
   1412c:	movt	r6, #2
   14130:	ldr	r4, [r0]
   14134:	movw	r1, #55596	; 0xd92c
   14138:	mov	r0, #0
   1413c:	mov	r2, #5
   14140:	movt	r1, #1
   14144:	bl	11354 <dcgettext@plt>
   14148:	mov	r2, r0
   1414c:	mov	r0, #0
   14150:	mov	r1, r4
   14154:	bl	113f0 <error@plt>
   14158:	ldr	r3, [sp, #76]	; 0x4c
   1415c:	b	12e9c <__assert_fail@plt+0x18b4>
   14160:	movw	r1, #56371	; 0xdc33
   14164:	mov	r0, #0
   14168:	mov	r2, #5
   1416c:	movt	r1, #1
   14170:	bl	11354 <dcgettext@plt>
   14174:	mov	r2, r0
   14178:	mov	r0, #1
   1417c:	mov	r1, #0
   14180:	mov	r3, r8
   14184:	bl	113f0 <error@plt>
   14188:	mov	r0, #1
   1418c:	bl	116e8 <__assert_fail@plt+0x100>
   14190:	movw	r0, #61776	; 0xf150
   14194:	movw	r2, #56358	; 0xdc26
   14198:	movw	r7, #56341	; 0xdc15
   1419c:	movw	r6, #56325	; 0xdc05
   141a0:	movw	r5, #56314	; 0xdbfa
   141a4:	mov	r1, #0
   141a8:	movt	r0, #2
   141ac:	movt	r2, #1
   141b0:	movt	r7, #1
   141b4:	movt	r6, #1
   141b8:	movt	r5, #1
   141bc:	ldr	r3, [r0]
   141c0:	movw	r0, #61876	; 0xf1b4
   141c4:	movt	r0, #2
   141c8:	ldr	r0, [r0]
   141cc:	stm	sp, {r5, r6, r7}
   141d0:	str	r2, [sp, #12]
   141d4:	movw	r2, #55890	; 0xda52
   141d8:	str	r1, [sp, #16]
   141dc:	movw	r1, #55452	; 0xd89c
   141e0:	movt	r1, #1
   141e4:	movt	r2, #1
   141e8:	bl	1aed8 <__assert_fail@plt+0x98f0>
   141ec:	mov	r0, #0
   141f0:	bl	11468 <exit@plt>
   141f4:	mov	r0, #0
   141f8:	bl	116e8 <__assert_fail@plt+0x100>
   141fc:	movw	r1, #56284	; 0xdbdc
   14200:	mov	r0, #0
   14204:	mov	r2, #5
   14208:	movt	r1, #1
   1420c:	bl	11354 <dcgettext@plt>
   14210:	mov	r4, r0
   14214:	ldr	r0, [r5]
   14218:	bl	1a98c <__assert_fail@plt+0x93a4>
   1421c:	b	14284 <__assert_fail@plt+0x2c9c>
   14220:	movw	r1, #57760	; 0xe1a0
   14224:	mov	r0, #0
   14228:	mov	r2, #5
   1422c:	movt	r1, #1
   14230:	bl	11354 <dcgettext@plt>
   14234:	mov	r5, r0
   14238:	mov	r0, #0
   1423c:	mov	r1, #3
   14240:	mov	r2, r4
   14244:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   14248:	mov	r3, r0
   1424c:	mov	r0, #1
   14250:	mov	r1, r8
   14254:	mov	r2, r5
   14258:	bl	113f0 <error@plt>
   1425c:	movw	r1, #55481	; 0xd8b9
   14260:	mov	r0, #0
   14264:	mov	r2, #5
   14268:	movt	r1, #1
   1426c:	bl	11354 <dcgettext@plt>
   14270:	movw	r1, #56098	; 0xdb22
   14274:	mov	r4, r0
   14278:	mov	r0, #4
   1427c:	movt	r1, #1
   14280:	bl	1a464 <__assert_fail@plt+0x8e7c>
   14284:	mov	r3, r0
   14288:	mov	r0, #1
   1428c:	mov	r1, #0
   14290:	mov	r2, r4
   14294:	bl	113f0 <error@plt>
   14298:	bl	114b0 <__errno_location@plt>
   1429c:	ldr	r1, [r0]
   142a0:	movw	r2, #56098	; 0xdb22
   142a4:	mov	r0, #1
   142a8:	movt	r2, #1
   142ac:	bl	113f0 <error@plt>
   142b0:	bl	114b0 <__errno_location@plt>
   142b4:	ldr	r4, [r0]
   142b8:	movw	r1, #55584	; 0xd920
   142bc:	movt	r1, #1
   142c0:	b	142ec <__assert_fail@plt+0x2d04>
   142c4:	bl	16aa0 <__assert_fail@plt+0x54b8>
   142c8:	bl	114b0 <__errno_location@plt>
   142cc:	ldr	r4, [r0]
   142d0:	movw	r1, #57795	; 0xe1c3
   142d4:	movt	r1, #1
   142d8:	b	142ec <__assert_fail@plt+0x2d04>
   142dc:	bl	114b0 <__errno_location@plt>
   142e0:	ldr	r4, [r0]
   142e4:	movw	r1, #55568	; 0xd910
   142e8:	movt	r1, #1
   142ec:	mov	r0, #0
   142f0:	mov	r2, #5
   142f4:	bl	11354 <dcgettext@plt>
   142f8:	mov	r2, r0
   142fc:	mov	r0, #1
   14300:	mov	r1, r4
   14304:	bl	113f0 <error@plt>
   14308:	mov	r0, #0
   1430c:	bl	11468 <exit@plt>
   14310:	bl	1b66c <__assert_fail@plt+0xa084>
   14314:	bl	114b0 <__errno_location@plt>
   14318:	ldr	r4, [r0]
   1431c:	movw	r1, #57267	; 0xdfb3
   14320:	movt	r1, #1
   14324:	b	142ec <__assert_fail@plt+0x2d04>
   14328:	movw	r1, #57248	; 0xdfa0
   1432c:	mov	r0, #0
   14330:	mov	r2, #5
   14334:	movt	r1, #1
   14338:	bl	11354 <dcgettext@plt>
   1433c:	mov	r2, r0
   14340:	mov	r0, #1
   14344:	mov	r1, #0
   14348:	bl	113f0 <error@plt>
   1434c:	mov	r0, #1
   14350:	bl	11468 <exit@plt>
   14354:	bl	114b0 <__errno_location@plt>
   14358:	ldr	r4, [r0]
   1435c:	movw	r1, #57311	; 0xdfdf
   14360:	movt	r1, #1
   14364:	b	142ec <__assert_fail@plt+0x2d04>
   14368:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1436c:	add	fp, sp, #28
   14370:	sub	sp, sp, #156	; 0x9c
   14374:	sub	sp, sp, #8192	; 0x2000
   14378:	ldr	r8, [fp, #8]
   1437c:	movw	r9, #61888	; 0xf1c0
   14380:	mov	r5, r0
   14384:	mov	r0, #0
   14388:	mov	r7, r2
   1438c:	mov	r4, r3
   14390:	mov	sl, r1
   14394:	sub	r2, fp, #136	; 0x88
   14398:	str	r3, [sp, #36]	; 0x24
   1439c:	str	r1, [sp, #44]	; 0x2c
   143a0:	movt	r9, #2
   143a4:	str	r0, [r8]
   143a8:	str	r0, [r8, #4]
   143ac:	ldrb	r0, [r9, #1]
   143b0:	cmp	r0, #0
   143b4:	mov	r0, #3
   143b8:	beq	144a4 <__assert_fail@plt+0x2ebc>
   143bc:	bl	113a8 <__fxstat64@plt>
   143c0:	cmp	r0, #0
   143c4:	bne	144b0 <__assert_fail@plt+0x2ec8>
   143c8:	ldrb	r0, [r9, #3]
   143cc:	cmp	r0, #0
   143d0:	beq	145f8 <__assert_fail@plt+0x3010>
   143d4:	orrs	r0, r7, r4
   143d8:	beq	1448c <__assert_fail@plt+0x2ea4>
   143dc:	add	r9, sp, #48	; 0x30
   143e0:	str	r5, [sp, #16]
   143e4:	mov	r0, sl
   143e8:	mov	r1, r9
   143ec:	mov	r2, #8192	; 0x2000
   143f0:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   143f4:	cmp	r0, #0
   143f8:	beq	14cdc <__assert_fail@plt+0x36f4>
   143fc:	cmn	r0, #1
   14400:	beq	148c8 <__assert_fail@plt+0x32e0>
   14404:	ldrd	r2, [r8]
   14408:	add	r6, r9, r0
   1440c:	adds	r2, r2, r0
   14410:	movw	r0, #61888	; 0xf1c0
   14414:	adc	r3, r3, #0
   14418:	movt	r0, #2
   1441c:	strd	r2, [r8]
   14420:	ldrb	r5, [r0, #5]
   14424:	mov	r0, r9
   14428:	cmp	r5, #0
   1442c:	movwne	r5, #10
   14430:	sub	r2, r6, r0
   14434:	mov	r1, r5
   14438:	bl	11504 <memchr@plt>
   1443c:	cmp	r0, #0
   14440:	beq	143e4 <__assert_fail@plt+0x2dfc>
   14444:	subs	r7, r7, #1
   14448:	add	r0, r0, #1
   1444c:	sbc	r4, r4, #0
   14450:	orrs	r1, r7, r4
   14454:	bne	14430 <__assert_fail@plt+0x2e48>
   14458:	cmp	r0, r6
   1445c:	bcs	14488 <__assert_fail@plt+0x2ea0>
   14460:	subs	r6, r6, r0
   14464:	beq	14488 <__assert_fail@plt+0x2ea0>
   14468:	movw	r5, #61876	; 0xf1b4
   1446c:	mov	r1, #1
   14470:	mov	r2, r6
   14474:	movt	r5, #2
   14478:	ldr	r3, [r5]
   1447c:	bl	1133c <fwrite_unlocked@plt>
   14480:	cmp	r0, r6
   14484:	bcc	15248 <__assert_fail@plt+0x3c60>
   14488:	ldr	r5, [sp, #16]
   1448c:	mvn	r0, #0
   14490:	mov	r1, r5
   14494:	str	r0, [sp]
   14498:	str	r0, [sp, #4]
   1449c:	mov	r0, #0
   144a0:	b	14cc4 <__assert_fail@plt+0x36dc>
   144a4:	bl	113a8 <__fxstat64@plt>
   144a8:	cmp	r0, #0
   144ac:	beq	14500 <__assert_fail@plt+0x2f18>
   144b0:	bl	114b0 <__errno_location@plt>
   144b4:	ldr	r4, [r0]
   144b8:	movw	r1, #56924	; 0xde5c
   144bc:	mov	r8, #0
   144c0:	movt	r1, #1
   144c4:	mov	r0, #0
   144c8:	mov	r2, #5
   144cc:	bl	11354 <dcgettext@plt>
   144d0:	mov	r6, r0
   144d4:	mov	r0, #4
   144d8:	mov	r1, r5
   144dc:	bl	1a464 <__assert_fail@plt+0x8e7c>
   144e0:	mov	r3, r0
   144e4:	mov	r0, #0
   144e8:	mov	r1, r4
   144ec:	mov	r2, r6
   144f0:	bl	113f0 <error@plt>
   144f4:	mov	r0, r8
   144f8:	sub	sp, fp, #28
   144fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14500:	ldrb	r2, [r9, #9]
   14504:	ldrb	r1, [r9, #3]
   14508:	mov	r0, #0
   1450c:	cmn	r4, #1
   14510:	str	r5, [sp, #16]
   14514:	mvn	r5, #0
   14518:	mvn	r9, #0
   1451c:	movwgt	r0, #1
   14520:	eor	r2, r2, #1
   14524:	cmp	r1, #0
   14528:	and	r0, r0, r2
   1452c:	beq	14844 <__assert_fail@plt+0x325c>
   14530:	cmp	r0, #0
   14534:	beq	1459c <__assert_fail@plt+0x2fb4>
   14538:	ldr	r0, [fp, #-120]	; 0xffffff88
   1453c:	and	r0, r0, #61440	; 0xf000
   14540:	cmp	r0, #32768	; 0x8000
   14544:	bne	14574 <__assert_fail@plt+0x2f8c>
   14548:	mov	r0, #1
   1454c:	mov	r2, r7
   14550:	mov	r3, r4
   14554:	str	r0, [sp]
   14558:	ldr	r0, [sp, #16]
   1455c:	str	r0, [sp, #4]
   14560:	mov	r0, sl
   14564:	bl	15e1c <__assert_fail@plt+0x4834>
   14568:	subs	r0, r5, r0
   1456c:	sbcs	r0, r5, r1
   14570:	blt	14874 <__assert_fail@plt+0x328c>
   14574:	mov	r0, #1
   14578:	mov	r2, r7
   1457c:	mov	r3, r4
   14580:	str	r0, [sp]
   14584:	mov	r0, sl
   14588:	bl	113c0 <lseek64@plt>
   1458c:	eor	r1, r1, r5
   14590:	eor	r0, r0, r5
   14594:	orrs	r0, r0, r1
   14598:	bne	14874 <__assert_fail@plt+0x328c>
   1459c:	orrs	r0, r7, r4
   145a0:	beq	14cb0 <__assert_fail@plt+0x36c8>
   145a4:	add	r6, sp, #48	; 0x30
   145a8:	ldr	r0, [sp, #44]	; 0x2c
   145ac:	mov	r1, r6
   145b0:	mov	r2, #8192	; 0x2000
   145b4:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   145b8:	cmp	r0, #0
   145bc:	beq	14cdc <__assert_fail@plt+0x36f4>
   145c0:	cmn	r0, #1
   145c4:	beq	148c8 <__assert_fail@plt+0x32e0>
   145c8:	ldrd	r2, [r8]
   145cc:	adds	r2, r2, r0
   145d0:	adc	r3, r3, #0
   145d4:	subs	r1, r7, r0
   145d8:	sbcs	r1, r4, #0
   145dc:	strd	r2, [r8]
   145e0:	bcc	14898 <__assert_fail@plt+0x32b0>
   145e4:	subs	r7, r7, r0
   145e8:	sbc	r4, r4, #0
   145ec:	orrs	r0, r7, r4
   145f0:	bne	145a8 <__assert_fail@plt+0x2fc0>
   145f4:	b	14cb0 <__assert_fail@plt+0x36c8>
   145f8:	ldrb	r0, [r9, #9]
   145fc:	str	r5, [sp, #16]
   14600:	cmp	r0, #0
   14604:	bne	14cfc <__assert_fail@plt+0x3714>
   14608:	ldr	r0, [fp, #-120]	; 0xffffff88
   1460c:	and	r0, r0, #61440	; 0xf000
   14610:	cmp	r0, #32768	; 0x8000
   14614:	bne	14cfc <__assert_fail@plt+0x3714>
   14618:	mov	r0, #1
   1461c:	mov	r2, #0
   14620:	mov	r3, #0
   14624:	str	r0, [sp]
   14628:	mov	r0, sl
   1462c:	bl	113c0 <lseek64@plt>
   14630:	mov	r2, r0
   14634:	and	r0, r0, r1
   14638:	cmn	r0, #1
   1463c:	beq	14cfc <__assert_fail@plt+0x3714>
   14640:	mov	r0, #2
   14644:	str	r2, [sp, #32]
   14648:	mov	r2, #0
   1464c:	mov	r3, #0
   14650:	str	r1, [sp, #40]	; 0x28
   14654:	str	r0, [sp]
   14658:	mov	r0, sl
   1465c:	bl	113c0 <lseek64@plt>
   14660:	ldr	r2, [sp, #32]
   14664:	ldr	r3, [sp, #40]	; 0x28
   14668:	subs	r6, r2, r0
   1466c:	sbcs	r6, r3, r1
   14670:	bge	14cec <__assert_fail@plt+0x3704>
   14674:	orrs	r2, r0, r1
   14678:	strd	r0, [r8]
   1467c:	mov	r8, #1
   14680:	strne	r0, [sp, #12]
   14684:	strne	r1, [sp, #24]
   14688:	orrsne	r0, r7, r4
   1468c:	beq	14ce0 <__assert_fail@plt+0x36f8>
   14690:	mov	r0, #0
   14694:	mov	sl, r7
   14698:	stm	sp, {r0, r5}
   1469c:	ldr	r0, [sp, #32]
   146a0:	ldr	r3, [sp, #12]
   146a4:	ldr	r1, [sp, #40]	; 0x28
   146a8:	ldr	r7, [sp, #24]
   146ac:	ldr	r4, [sp, #44]	; 0x2c
   146b0:	subs	r0, r3, r0
   146b4:	sbc	r1, r7, r1
   146b8:	asr	r1, r1, #31
   146bc:	add	r1, r0, r1, lsr #19
   146c0:	bfc	r1, #0, #13
   146c4:	subs	r6, r0, r1
   146c8:	mov	r0, r4
   146cc:	movweq	r6, #8192	; 0x2000
   146d0:	subs	r2, r3, r6
   146d4:	sbc	r7, r7, #0
   146d8:	str	r2, [sp, #8]
   146dc:	mov	r3, r7
   146e0:	bl	15e1c <__assert_fail@plt+0x4834>
   146e4:	add	r1, sp, #48	; 0x30
   146e8:	mov	r0, r4
   146ec:	mov	r2, r6
   146f0:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   146f4:	cmn	r0, #1
   146f8:	beq	15180 <__assert_fail@plt+0x3b98>
   146fc:	ldr	r3, [sp, #8]
   14700:	ldr	r2, [fp, #8]
   14704:	str	r7, [sp, #28]
   14708:	adds	r4, r3, r0
   1470c:	adc	r1, r7, #0
   14710:	str	r4, [r2]
   14714:	cmp	r0, #0
   14718:	mov	r4, r3
   1471c:	str	r1, [r2, #4]
   14720:	beq	14758 <__assert_fail@plt+0x3170>
   14724:	add	r2, sp, #48	; 0x30
   14728:	ldr	r7, [sp, #36]	; 0x24
   1472c:	ldrb	r3, [r9, #5]
   14730:	subs	r6, sl, #1
   14734:	add	r2, r2, r0
   14738:	ldrb	r2, [r2, #-1]
   1473c:	sbc	r1, r7, #0
   14740:	cmp	r3, #0
   14744:	movwne	r3, #10
   14748:	cmp	r3, r2
   1474c:	movne	r7, r1
   14750:	movne	sl, r6
   14754:	str	r7, [sp, #36]	; 0x24
   14758:	ldrb	r9, [r9, #5]
   1475c:	mov	r5, r0
   14760:	mov	r2, r0
   14764:	add	r7, sp, #48	; 0x30
   14768:	cmp	r9, #0
   1476c:	movwne	r9, #10
   14770:	cmp	r2, #0
   14774:	beq	147b0 <__assert_fail@plt+0x31c8>
   14778:	mov	r0, r7
   1477c:	mov	r1, r9
   14780:	bl	11498 <memrchr@plt>
   14784:	cmp	r0, #0
   14788:	beq	147b0 <__assert_fail@plt+0x31c8>
   1478c:	ldr	r6, [sp, #36]	; 0x24
   14790:	subs	r1, sl, #1
   14794:	sub	r2, r0, r7
   14798:	sbc	r3, r6, #0
   1479c:	orrs	r6, sl, r6
   147a0:	mov	sl, r1
   147a4:	str	r3, [sp, #36]	; 0x24
   147a8:	bne	14770 <__assert_fail@plt+0x3188>
   147ac:	b	150f0 <__assert_fail@plt+0x3b08>
   147b0:	ldr	r2, [sp, #32]
   147b4:	ldr	r1, [sp, #40]	; 0x28
   147b8:	ldr	r7, [sp, #28]
   147bc:	eor	r0, r4, r2
   147c0:	eor	r1, r7, r1
   147c4:	orrs	r0, r0, r1
   147c8:	beq	15198 <__assert_fail@plt+0x3bb0>
   147cc:	subs	r4, r4, #8192	; 0x2000
   147d0:	ldr	r5, [sp, #16]
   147d4:	mov	r0, #0
   147d8:	mov	r6, r4
   147dc:	ldr	r4, [sp, #44]	; 0x2c
   147e0:	sbc	r7, r7, #0
   147e4:	str	r0, [sp]
   147e8:	mov	r2, r6
   147ec:	mov	r3, r7
   147f0:	str	r5, [sp, #4]
   147f4:	mov	r0, r4
   147f8:	bl	15e1c <__assert_fail@plt+0x4834>
   147fc:	mov	r0, r4
   14800:	add	r1, sp, #48	; 0x30
   14804:	mov	r2, #8192	; 0x2000
   14808:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   1480c:	movw	r9, #61888	; 0xf1c0
   14810:	cmn	r0, #1
   14814:	movt	r9, #2
   14818:	beq	15180 <__assert_fail@plt+0x3b98>
   1481c:	ldr	r2, [fp, #8]
   14820:	adds	r4, r6, r0
   14824:	str	r7, [sp, #28]
   14828:	adc	r1, r7, #0
   1482c:	cmp	r0, #0
   14830:	str	r4, [r2]
   14834:	mov	r4, r6
   14838:	str	r1, [r2, #4]
   1483c:	bne	14758 <__assert_fail@plt+0x3170>
   14840:	b	14ce0 <__assert_fail@plt+0x36f8>
   14844:	cmp	r0, #0
   14848:	str	r7, [sp, #20]
   1484c:	beq	14888 <__assert_fail@plt+0x32a0>
   14850:	ldr	r0, [fp, #-120]	; 0xffffff88
   14854:	and	r0, r0, #53248	; 0xd000
   14858:	orr	r0, r0, #8192	; 0x2000
   1485c:	cmp	r0, #40960	; 0xa000
   14860:	bne	148f8 <__assert_fail@plt+0x3310>
   14864:	ldr	r4, [fp, #-88]	; 0xffffffa8
   14868:	ldr	sl, [fp, #-84]	; 0xffffffac
   1486c:	mvn	r6, #0
   14870:	b	14938 <__assert_fail@plt+0x3350>
   14874:	ldrd	r0, [r8]
   14878:	adds	r0, r0, r7
   1487c:	adc	r1, r1, r4
   14880:	strd	r0, [r8]
   14884:	b	14cb4 <__assert_fail@plt+0x36cc>
   14888:	mvn	r4, #0
   1488c:	mvn	sl, #0
   14890:	mvn	r6, #0
   14894:	b	14938 <__assert_fail@plt+0x3350>
   14898:	subs	sl, r0, r7
   1489c:	beq	14cb0 <__assert_fail@plt+0x36c8>
   148a0:	add	r0, r6, r7
   148a4:	movw	r6, #61876	; 0xf1b4
   148a8:	mov	r1, #1
   148ac:	mov	r2, sl
   148b0:	movt	r6, #2
   148b4:	ldr	r3, [r6]
   148b8:	bl	1133c <fwrite_unlocked@plt>
   148bc:	cmp	r0, sl
   148c0:	bcs	14cb0 <__assert_fail@plt+0x36c8>
   148c4:	b	15250 <__assert_fail@plt+0x3c68>
   148c8:	bl	114b0 <__errno_location@plt>
   148cc:	ldr	r4, [r0]
   148d0:	movw	r1, #56808	; 0xdde8
   148d4:	mov	r0, #0
   148d8:	mov	r2, #5
   148dc:	mov	r8, #0
   148e0:	movt	r1, #1
   148e4:	bl	11354 <dcgettext@plt>
   148e8:	ldr	r1, [sp, #16]
   148ec:	mov	r6, r0
   148f0:	mov	r0, #4
   148f4:	b	144dc <__assert_fail@plt+0x2ef4>
   148f8:	mov	r0, #2
   148fc:	rsbs	r2, r7, #0
   14900:	str	r0, [sp]
   14904:	rsc	r3, r4, #0
   14908:	mov	r0, sl
   1490c:	bl	113c0 <lseek64@plt>
   14910:	mov	r9, r0
   14914:	adds	r0, r0, r7
   14918:	mov	r6, r1
   1491c:	adc	sl, r1, r4
   14920:	mov	r4, r0
   14924:	eor	r0, r1, r5
   14928:	eor	r1, r9, r5
   1492c:	orrs	r0, r1, r0
   14930:	moveq	sl, r5
   14934:	moveq	r4, r5
   14938:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1493c:	mov	r8, #0
   14940:	subs	r1, r0, #536870913	; 0x20000001
   14944:	rscs	r1, r8, r0, asr #31
   14948:	mov	r1, #0
   1494c:	movwcc	r1, #1
   14950:	rsbs	r2, r0, #0
   14954:	sbcs	r2, r8, r0, asr #31
   14958:	mov	r2, #0
   1495c:	movwlt	r2, #1
   14960:	ands	r1, r2, r1
   14964:	asrne	r1, r0, #31
   14968:	moveq	r0, #512	; 0x200
   1496c:	subs	r0, r0, r4
   14970:	sbcs	r0, r1, sl
   14974:	bge	14a04 <__assert_fail@plt+0x341c>
   14978:	eor	r0, r9, r5
   1497c:	eor	r1, r6, r5
   14980:	orrs	r0, r0, r1
   14984:	bne	149b0 <__assert_fail@plt+0x33c8>
   14988:	mov	r0, #1
   1498c:	mov	r2, #0
   14990:	mov	r3, #0
   14994:	str	r0, [sp]
   14998:	ldr	r0, [sp, #16]
   1499c:	str	r0, [sp, #4]
   149a0:	ldr	r0, [sp, #44]	; 0x2c
   149a4:	bl	15e1c <__assert_fail@plt+0x4834>
   149a8:	mov	r9, r0
   149ac:	mov	r6, r1
   149b0:	ldr	r5, [sp, #20]
   149b4:	subs	r0, r4, r9
   149b8:	sbc	r1, sl, r6
   149bc:	subs	r2, r9, r4
   149c0:	sbcs	r2, r6, sl
   149c4:	bge	14c94 <__assert_fail@plt+0x36ac>
   149c8:	ldr	r7, [sp, #36]	; 0x24
   149cc:	subs	r0, r5, r0
   149d0:	sbcs	r0, r7, r1
   149d4:	bcs	14c98 <__assert_fail@plt+0x36b0>
   149d8:	mov	r0, #0
   149dc:	subs	r9, r4, r5
   149e0:	str	r0, [sp]
   149e4:	ldr	r0, [sp, #16]
   149e8:	sbc	r6, sl, r7
   149ec:	mov	r2, r9
   149f0:	mov	r3, r6
   149f4:	str	r0, [sp, #4]
   149f8:	ldr	r0, [sp, #44]	; 0x2c
   149fc:	bl	15e1c <__assert_fail@plt+0x4834>
   14a00:	b	14c98 <__assert_fail@plt+0x36b0>
   14a04:	movw	r0, #8200	; 0x2008
   14a08:	bl	1b10c <__assert_fail@plt+0x9b24>
   14a0c:	mov	r9, r0
   14a10:	mov	r0, #8192	; 0x2000
   14a14:	str	r8, [r9, r0]
   14a18:	movw	r0, #8196	; 0x2004
   14a1c:	str	r8, [r9, r0]
   14a20:	movw	r0, #8200	; 0x2008
   14a24:	bl	1b10c <__assert_fail@plt+0x9b24>
   14a28:	mov	r7, r0
   14a2c:	ldr	r0, [sp, #44]	; 0x2c
   14a30:	mov	r2, #8192	; 0x2000
   14a34:	mov	r1, r7
   14a38:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   14a3c:	mov	r5, r0
   14a40:	add	r0, r0, #1
   14a44:	cmp	r0, #2
   14a48:	bcc	14b2c <__assert_fail@plt+0x3544>
   14a4c:	mov	r8, #0
   14a50:	mov	sl, r9
   14a54:	ldr	r0, [fp, #8]
   14a58:	mov	r6, r7
   14a5c:	mov	r3, #0
   14a60:	mov	r4, sl
   14a64:	add	r8, r8, r5
   14a68:	mov	r2, r0
   14a6c:	ldrd	r0, [r0]
   14a70:	adds	r0, r0, r5
   14a74:	adc	r1, r1, #0
   14a78:	strd	r0, [r2]
   14a7c:	mov	r2, #8192	; 0x2000
   14a80:	str	r5, [r6, r2]!
   14a84:	str	r3, [r6, #4]
   14a88:	ldr	r0, [r4, r2]!
   14a8c:	add	r1, r0, r5
   14a90:	cmp	r3, r1, lsr #13
   14a94:	bne	14abc <__assert_fail@plt+0x34d4>
   14a98:	add	r0, sl, r0
   14a9c:	mov	r1, r7
   14aa0:	mov	r2, r5
   14aa4:	bl	11318 <memcpy@plt>
   14aa8:	ldr	r0, [r6]
   14aac:	ldr	r1, [r4]
   14ab0:	add	r0, r1, r0
   14ab4:	str	r0, [r4]
   14ab8:	b	14b0c <__assert_fail@plt+0x3524>
   14abc:	movw	r0, #8196	; 0x2004
   14ac0:	ldr	r1, [sp, #20]
   14ac4:	movw	r3, #8196	; 0x2004
   14ac8:	str	r7, [sl, r0]
   14acc:	ldr	r0, [r9, r2]
   14ad0:	sub	r0, r8, r0
   14ad4:	subs	r1, r1, r0
   14ad8:	ldr	r1, [sp, #36]	; 0x24
   14adc:	sbcs	r1, r1, #0
   14ae0:	bcs	14afc <__assert_fail@plt+0x3514>
   14ae4:	ldr	r1, [r9, r3]
   14ae8:	mov	sl, r7
   14aec:	mov	r7, r9
   14af0:	mov	r8, r0
   14af4:	mov	r9, r1
   14af8:	b	14b0c <__assert_fail@plt+0x3524>
   14afc:	movw	r0, #8200	; 0x2008
   14b00:	bl	1b10c <__assert_fail@plt+0x9b24>
   14b04:	mov	sl, r7
   14b08:	mov	r7, r0
   14b0c:	ldr	r0, [sp, #44]	; 0x2c
   14b10:	mov	r1, r7
   14b14:	mov	r2, #8192	; 0x2000
   14b18:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   14b1c:	mov	r5, r0
   14b20:	add	r0, r0, #1
   14b24:	cmp	r0, #1
   14b28:	bhi	14a54 <__assert_fail@plt+0x346c>
   14b2c:	mov	r0, r7
   14b30:	bl	174f0 <__assert_fail@plt+0x5f08>
   14b34:	cmn	r5, #1
   14b38:	beq	14c28 <__assert_fail@plt+0x3640>
   14b3c:	mov	r1, #8192	; 0x2000
   14b40:	ldr	r5, [sp, #20]
   14b44:	ldr	r4, [sp, #36]	; 0x24
   14b48:	mov	r7, r9
   14b4c:	ldr	r0, [r9, r1]
   14b50:	sub	r2, r8, r0
   14b54:	subs	r3, r5, r2
   14b58:	sbcs	r3, r4, #0
   14b5c:	bcs	14b84 <__assert_fail@plt+0x359c>
   14b60:	movw	r3, #8196	; 0x2004
   14b64:	mov	r7, r9
   14b68:	ldr	r7, [r7, r3]
   14b6c:	mov	r8, r2
   14b70:	ldr	r0, [r7, r1]
   14b74:	sub	r2, r2, r0
   14b78:	subs	r6, r5, r2
   14b7c:	sbcs	r6, r4, #0
   14b80:	bcc	14b68 <__assert_fail@plt+0x3580>
   14b84:	subs	r2, r5, r8
   14b88:	mov	r1, #0
   14b8c:	sbcs	r2, r4, #0
   14b90:	movwcc	r1, #1
   14b94:	cmp	r1, #0
   14b98:	subne	r1, r8, r5
   14b9c:	subs	r5, r0, r1
   14ba0:	beq	14bc8 <__assert_fail@plt+0x35e0>
   14ba4:	movw	r4, #61876	; 0xf1b4
   14ba8:	add	r0, r7, r1
   14bac:	mov	r1, #1
   14bb0:	mov	r2, r5
   14bb4:	movt	r4, #2
   14bb8:	ldr	r3, [r4]
   14bbc:	bl	1133c <fwrite_unlocked@plt>
   14bc0:	cmp	r0, r5
   14bc4:	bcc	15258 <__assert_fail@plt+0x3c70>
   14bc8:	movw	r4, #8196	; 0x2004
   14bcc:	ldr	r5, [r7, r4]
   14bd0:	cmp	r5, #0
   14bd4:	beq	14c18 <__assert_fail@plt+0x3630>
   14bd8:	movw	r8, #61876	; 0xf1b4
   14bdc:	mov	r7, #8192	; 0x2000
   14be0:	movt	r8, #2
   14be4:	ldr	r6, [r5, r7]
   14be8:	cmp	r6, #0
   14bec:	beq	14c0c <__assert_fail@plt+0x3624>
   14bf0:	ldr	r3, [r8]
   14bf4:	mov	r0, r5
   14bf8:	mov	r1, #1
   14bfc:	mov	r2, r6
   14c00:	bl	1133c <fwrite_unlocked@plt>
   14c04:	cmp	r0, r6
   14c08:	bcc	151fc <__assert_fail@plt+0x3c14>
   14c0c:	ldr	r5, [r5, r4]
   14c10:	cmp	r5, #0
   14c14:	bne	14be4 <__assert_fail@plt+0x35fc>
   14c18:	mov	r8, #1
   14c1c:	cmp	r9, #0
   14c20:	bne	14c74 <__assert_fail@plt+0x368c>
   14c24:	b	14ce0 <__assert_fail@plt+0x36f8>
   14c28:	bl	114b0 <__errno_location@plt>
   14c2c:	ldr	r6, [r0]
   14c30:	movw	r1, #56808	; 0xdde8
   14c34:	mov	r0, #0
   14c38:	mov	r2, #5
   14c3c:	mov	r8, #0
   14c40:	movt	r1, #1
   14c44:	bl	11354 <dcgettext@plt>
   14c48:	ldr	r1, [sp, #16]
   14c4c:	mov	r7, r0
   14c50:	mov	r0, #4
   14c54:	bl	1a464 <__assert_fail@plt+0x8e7c>
   14c58:	mov	r3, r0
   14c5c:	mov	r0, #0
   14c60:	mov	r1, r6
   14c64:	mov	r2, r7
   14c68:	bl	113f0 <error@plt>
   14c6c:	cmp	r9, #0
   14c70:	beq	14ce0 <__assert_fail@plt+0x36f8>
   14c74:	movw	r4, #8196	; 0x2004
   14c78:	ldr	r6, [r9, r4]
   14c7c:	mov	r0, r9
   14c80:	bl	174f0 <__assert_fail@plt+0x5f08>
   14c84:	cmp	r6, #0
   14c88:	mov	r9, r6
   14c8c:	bne	14c78 <__assert_fail@plt+0x3690>
   14c90:	b	14ce0 <__assert_fail@plt+0x36f8>
   14c94:	ldr	r7, [sp, #36]	; 0x24
   14c98:	ldr	r4, [fp, #8]
   14c9c:	mov	r8, r4
   14ca0:	str	r9, [r8]
   14ca4:	mov	r9, r5
   14ca8:	mov	r5, r7
   14cac:	str	r6, [r8, #4]
   14cb0:	ldr	sl, [sp, #44]	; 0x2c
   14cb4:	ldr	r1, [sp, #16]
   14cb8:	mov	r0, #0
   14cbc:	str	r9, [sp]
   14cc0:	str	r5, [sp, #4]
   14cc4:	mov	r2, sl
   14cc8:	bl	15b00 <__assert_fail@plt+0x4518>
   14ccc:	ldrd	r2, [r8]
   14cd0:	adds	r0, r2, r0
   14cd4:	adc	r1, r3, r1
   14cd8:	strd	r0, [r8]
   14cdc:	mov	r8, #1
   14ce0:	mov	r0, r8
   14ce4:	sub	sp, fp, #28
   14ce8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14cec:	mov	r0, #0
   14cf0:	stm	sp, {r0, r5}
   14cf4:	mov	r0, sl
   14cf8:	bl	15e1c <__assert_fail@plt+0x4834>
   14cfc:	movw	r0, #8204	; 0x200c
   14d00:	str	r7, [sp, #20]
   14d04:	bl	1b10c <__assert_fail@plt+0x9b24>
   14d08:	movw	r7, #8196	; 0x2004
   14d0c:	mov	r1, #0
   14d10:	mov	r6, r0
   14d14:	movw	r2, #8200	; 0x2008
   14d18:	str	r1, [r0, r7]
   14d1c:	mov	r0, #8192	; 0x2000
   14d20:	str	r1, [r6, r0]
   14d24:	mov	r0, #0
   14d28:	str	r1, [r6, r2]
   14d2c:	str	r0, [sp, #40]	; 0x28
   14d30:	movw	r0, #8204	; 0x200c
   14d34:	bl	1b10c <__assert_fail@plt+0x9b24>
   14d38:	mov	r8, r0
   14d3c:	mov	r0, sl
   14d40:	mov	r2, #8192	; 0x2000
   14d44:	mov	r1, r8
   14d48:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   14d4c:	mov	r5, r0
   14d50:	add	r0, r0, #1
   14d54:	str	r6, [sp, #24]
   14d58:	cmp	r0, #2
   14d5c:	bcs	14dbc <__assert_fail@plt+0x37d4>
   14d60:	str	r6, [sp, #32]
   14d64:	mov	r0, r8
   14d68:	bl	174f0 <__assert_fail@plt+0x5f08>
   14d6c:	cmn	r5, #1
   14d70:	bne	14f60 <__assert_fail@plt+0x3978>
   14d74:	bl	114b0 <__errno_location@plt>
   14d78:	ldr	r4, [r0]
   14d7c:	movw	r1, #56808	; 0xdde8
   14d80:	mov	r0, #0
   14d84:	mov	r2, #5
   14d88:	mov	r8, #0
   14d8c:	movt	r1, #1
   14d90:	bl	11354 <dcgettext@plt>
   14d94:	ldr	r1, [sp, #16]
   14d98:	mov	r6, r0
   14d9c:	mov	r0, #4
   14da0:	bl	1a464 <__assert_fail@plt+0x8e7c>
   14da4:	mov	r3, r0
   14da8:	mov	r0, #0
   14dac:	mov	r1, r4
   14db0:	mov	r2, r6
   14db4:	bl	113f0 <error@plt>
   14db8:	b	150c8 <__assert_fail@plt+0x3ae0>
   14dbc:	str	r6, [sp, #32]
   14dc0:	mov	r0, #0
   14dc4:	movw	r6, #8200	; 0x2008
   14dc8:	str	r0, [sp, #40]	; 0x28
   14dcc:	mov	sl, r8
   14dd0:	mov	r0, #8192	; 0x2000
   14dd4:	mov	r4, r8
   14dd8:	str	r5, [sl, r0]!
   14ddc:	ldr	r0, [fp, #8]
   14de0:	mov	r2, r0
   14de4:	ldrd	r0, [r0]
   14de8:	adds	r0, r0, r5
   14dec:	adc	r1, r1, #0
   14df0:	strd	r0, [r2]
   14df4:	mov	r0, #0
   14df8:	str	r0, [r8, r6]
   14dfc:	str	r0, [r4, r7]!
   14e00:	add	r6, r8, r5
   14e04:	mov	r0, r8
   14e08:	str	r8, [sp, #28]
   14e0c:	ldrb	r7, [r9, #5]
   14e10:	sub	r2, r6, r8
   14e14:	cmp	r7, #0
   14e18:	movwne	r7, #10
   14e1c:	mov	r1, r7
   14e20:	bl	11504 <memchr@plt>
   14e24:	cmp	r0, #0
   14e28:	mov	r9, #0
   14e2c:	beq	14e54 <__assert_fail@plt+0x386c>
   14e30:	mov	r9, #0
   14e34:	add	r0, r0, #1
   14e38:	add	r9, r9, #1
   14e3c:	mov	r1, r7
   14e40:	sub	r2, r6, r0
   14e44:	str	r9, [r4]
   14e48:	bl	11504 <memchr@plt>
   14e4c:	cmp	r0, #0
   14e50:	bne	14e34 <__assert_fail@plt+0x384c>
   14e54:	ldr	r7, [sp, #32]
   14e58:	mov	r0, #8192	; 0x2000
   14e5c:	ldr	r3, [sp, #40]	; 0x28
   14e60:	mov	r2, #0
   14e64:	mov	r6, r7
   14e68:	add	r3, r9, r3
   14e6c:	ldr	r0, [r6, r0]!
   14e70:	add	r1, r0, r5
   14e74:	cmp	r2, r1, lsr #13
   14e78:	bne	14ed0 <__assert_fail@plt+0x38e8>
   14e7c:	ldr	r8, [sp, #28]
   14e80:	add	r0, r7, r0
   14e84:	mov	r2, r5
   14e88:	str	r3, [sp, #40]	; 0x28
   14e8c:	mov	r1, r8
   14e90:	bl	11318 <memcpy@plt>
   14e94:	ldr	r0, [sl]
   14e98:	ldr	r1, [r6]
   14e9c:	movw	r9, #61888	; 0xf1c0
   14ea0:	movt	r9, #2
   14ea4:	add	r0, r1, r0
   14ea8:	str	r0, [r6]
   14eac:	mov	r0, r7
   14eb0:	movw	r7, #8196	; 0x2004
   14eb4:	movw	r6, #8200	; 0x2008
   14eb8:	ldr	r2, [r4]
   14ebc:	ldr	r1, [r0, r7]!
   14ec0:	ldr	r4, [sp, #36]	; 0x24
   14ec4:	add	r1, r1, r2
   14ec8:	str	r1, [r0]
   14ecc:	b	14f30 <__assert_fail@plt+0x3948>
   14ed0:	ldr	r2, [sp, #24]
   14ed4:	movw	r6, #8200	; 0x2008
   14ed8:	ldr	r1, [sp, #20]
   14edc:	ldr	r4, [sp, #36]	; 0x24
   14ee0:	movw	r9, #61888	; 0xf1c0
   14ee4:	str	r8, [r7, r6]
   14ee8:	movw	r7, #8196	; 0x2004
   14eec:	movt	r9, #2
   14ef0:	ldr	r0, [r2, r7]
   14ef4:	sub	r0, r3, r0
   14ef8:	subs	r1, r1, r0
   14efc:	sbcs	r1, r4, #0
   14f00:	bcs	14f1c <__assert_fail@plt+0x3934>
   14f04:	ldr	r1, [r2, r6]
   14f08:	str	r8, [sp, #32]
   14f0c:	str	r0, [sp, #40]	; 0x28
   14f10:	mov	r8, r2
   14f14:	str	r1, [sp, #24]
   14f18:	b	14f30 <__assert_fail@plt+0x3948>
   14f1c:	movw	r0, #8204	; 0x200c
   14f20:	str	r3, [sp, #40]	; 0x28
   14f24:	bl	1b10c <__assert_fail@plt+0x9b24>
   14f28:	str	r8, [sp, #32]
   14f2c:	mov	r8, r0
   14f30:	ldr	r0, [sp, #44]	; 0x2c
   14f34:	mov	r1, r8
   14f38:	mov	r2, #8192	; 0x2000
   14f3c:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   14f40:	mov	r5, r0
   14f44:	add	r0, r0, #1
   14f48:	cmp	r0, #1
   14f4c:	bhi	14dcc <__assert_fail@plt+0x37e4>
   14f50:	mov	r0, r8
   14f54:	bl	174f0 <__assert_fail@plt+0x5f08>
   14f58:	cmn	r5, #1
   14f5c:	beq	14d74 <__assert_fail@plt+0x378c>
   14f60:	ldr	r6, [sp, #20]
   14f64:	mov	r8, #1
   14f68:	orrs	r0, r6, r4
   14f6c:	ldrne	r2, [sp, #32]
   14f70:	movne	r1, #8192	; 0x2000
   14f74:	ldr	r0, [sp, #24]
   14f78:	ldrne	r1, [r2, r1]
   14f7c:	cmpne	r1, #0
   14f80:	beq	150cc <__assert_fail@plt+0x3ae4>
   14f84:	ldrb	sl, [r9, #5]
   14f88:	add	r0, r2, r1
   14f8c:	ldrb	r0, [r0, #-1]
   14f90:	cmp	sl, #0
   14f94:	movwne	sl, #10
   14f98:	cmp	sl, r0
   14f9c:	bne	14fa8 <__assert_fail@plt+0x39c0>
   14fa0:	ldr	r5, [sp, #40]	; 0x28
   14fa4:	b	14fc0 <__assert_fail@plt+0x39d8>
   14fa8:	movw	r0, #8196	; 0x2004
   14fac:	ldr	r5, [sp, #40]	; 0x28
   14fb0:	ldr	r0, [r2, r0]!
   14fb4:	add	r5, r5, #1
   14fb8:	add	r0, r0, #1
   14fbc:	str	r0, [r2]
   14fc0:	ldr	r7, [sp, #24]
   14fc4:	movw	r0, #8196	; 0x2004
   14fc8:	ldr	r1, [r7, r0]
   14fcc:	sub	r1, r5, r1
   14fd0:	subs	r2, r6, r1
   14fd4:	sbcs	r2, r4, #0
   14fd8:	bcs	15000 <__assert_fail@plt+0x3a18>
   14fdc:	ldr	r7, [sp, #24]
   14fe0:	movw	r2, #8200	; 0x2008
   14fe4:	ldr	r7, [r7, r2]
   14fe8:	mov	r5, r1
   14fec:	ldr	r1, [r7, r0]
   14ff0:	sub	r1, r5, r1
   14ff4:	subs	r3, r6, r1
   14ff8:	sbcs	r3, r4, #0
   14ffc:	bcc	14fe4 <__assert_fail@plt+0x39fc>
   15000:	mov	r0, #8192	; 0x2000
   15004:	ldr	r0, [r7, r0]
   15008:	add	r9, r7, r0
   1500c:	subs	r0, r6, r5
   15010:	sbcs	r0, r4, #0
   15014:	mov	r0, r7
   15018:	bcs	15048 <__assert_fail@plt+0x3a60>
   1501c:	subs	r0, r5, r6
   15020:	beq	15044 <__assert_fail@plt+0x3a5c>
   15024:	sub	r6, r6, r5
   15028:	mov	r0, r7
   1502c:	mov	r1, sl
   15030:	bl	11378 <rawmemchr@plt>
   15034:	add	r0, r0, #1
   15038:	adds	r6, r6, #1
   1503c:	bne	1502c <__assert_fail@plt+0x3a44>
   15040:	b	15048 <__assert_fail@plt+0x3a60>
   15044:	mov	r0, r7
   15048:	subs	r4, r9, r0
   1504c:	beq	15070 <__assert_fail@plt+0x3a88>
   15050:	movw	r6, #61876	; 0xf1b4
   15054:	mov	r1, #1
   15058:	mov	r2, r4
   1505c:	movt	r6, #2
   15060:	ldr	r3, [r6]
   15064:	bl	1133c <fwrite_unlocked@plt>
   15068:	cmp	r0, r4
   1506c:	bcc	15250 <__assert_fail@plt+0x3c68>
   15070:	movw	r6, #8200	; 0x2008
   15074:	ldr	r0, [sp, #24]
   15078:	ldr	r4, [r7, r6]
   1507c:	cmp	r4, #0
   15080:	beq	150cc <__assert_fail@plt+0x3ae4>
   15084:	movw	r8, #61876	; 0xf1b4
   15088:	mov	r7, #8192	; 0x2000
   1508c:	movt	r8, #2
   15090:	ldr	r5, [r4, r7]
   15094:	cmp	r5, #0
   15098:	beq	150b8 <__assert_fail@plt+0x3ad0>
   1509c:	ldr	r3, [r8]
   150a0:	mov	r0, r4
   150a4:	mov	r1, #1
   150a8:	mov	r2, r5
   150ac:	bl	1133c <fwrite_unlocked@plt>
   150b0:	cmp	r0, r5
   150b4:	bcc	151fc <__assert_fail@plt+0x3c14>
   150b8:	ldr	r4, [r4, r6]
   150bc:	cmp	r4, #0
   150c0:	bne	15090 <__assert_fail@plt+0x3aa8>
   150c4:	mov	r8, #1
   150c8:	ldr	r0, [sp, #24]
   150cc:	cmp	r0, #0
   150d0:	beq	14ce0 <__assert_fail@plt+0x36f8>
   150d4:	movw	r4, #8200	; 0x2008
   150d8:	ldr	r6, [r0, r4]
   150dc:	bl	174f0 <__assert_fail@plt+0x5f08>
   150e0:	cmp	r6, #0
   150e4:	mov	r0, r6
   150e8:	bne	150d8 <__assert_fail@plt+0x3af0>
   150ec:	b	14ce0 <__assert_fail@plt+0x36f8>
   150f0:	mvn	r1, r2
   150f4:	mov	r7, r4
   150f8:	mov	r2, r5
   150fc:	adds	r4, r5, r1
   15100:	beq	1512c <__assert_fail@plt+0x3b44>
   15104:	movw	r6, #61876	; 0xf1b4
   15108:	add	r0, r0, #1
   1510c:	mov	r1, #1
   15110:	mov	r2, r4
   15114:	movt	r6, #2
   15118:	ldr	r3, [r6]
   1511c:	bl	1133c <fwrite_unlocked@plt>
   15120:	mov	r2, r5
   15124:	cmp	r0, r4
   15128:	bcc	15250 <__assert_fail@plt+0x3c68>
   1512c:	ldr	r0, [sp, #12]
   15130:	ldr	r1, [sp, #24]
   15134:	subs	r0, r0, r2
   15138:	ldr	r2, [sp, #28]
   1513c:	sbc	r1, r1, #0
   15140:	subs	r0, r0, r7
   15144:	sbc	r1, r1, r2
   15148:	stm	sp, {r0, r1}
   1514c:	mov	r0, #0
   15150:	ldr	r1, [sp, #16]
   15154:	ldr	r2, [sp, #44]	; 0x2c
   15158:	bl	15b00 <__assert_fail@plt+0x4518>
   1515c:	ldr	r2, [fp, #8]
   15160:	mov	r7, r2
   15164:	ldrd	r2, [r2]
   15168:	adds	r0, r2, r0
   1516c:	adc	r1, r3, r1
   15170:	strd	r0, [r7]
   15174:	mov	r0, r8
   15178:	sub	sp, fp, #28
   1517c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15180:	bl	114b0 <__errno_location@plt>
   15184:	ldr	r4, [r0]
   15188:	movw	r1, #56808	; 0xdde8
   1518c:	mov	r8, #0
   15190:	movt	r1, #1
   15194:	b	144c4 <__assert_fail@plt+0x2edc>
   15198:	ldr	r6, [sp, #40]	; 0x28
   1519c:	ldr	r4, [sp, #44]	; 0x2c
   151a0:	ldr	r5, [sp, #16]
   151a4:	mov	r0, #0
   151a8:	mov	r7, r2
   151ac:	str	r0, [sp]
   151b0:	mov	r0, r4
   151b4:	mov	r3, r6
   151b8:	str	r5, [sp, #4]
   151bc:	bl	15e1c <__assert_fail@plt+0x4834>
   151c0:	ldr	r0, [sp, #12]
   151c4:	mov	r1, r5
   151c8:	mov	r2, r4
   151cc:	str	r0, [sp]
   151d0:	ldr	r0, [sp, #24]
   151d4:	str	r0, [sp, #4]
   151d8:	mov	r0, #0
   151dc:	bl	15b00 <__assert_fail@plt+0x4518>
   151e0:	ldr	r2, [fp, #8]
   151e4:	adds	r0, r0, r7
   151e8:	adc	r1, r1, r6
   151ec:	strd	r0, [r2]
   151f0:	mov	r0, r8
   151f4:	sub	sp, fp, #28
   151f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151fc:	ldr	r0, [r8]
   15200:	bl	1157c <clearerr_unlocked@plt>
   15204:	bl	114b0 <__errno_location@plt>
   15208:	ldr	r4, [r0]
   1520c:	movw	r1, #56940	; 0xde6c
   15210:	mov	r0, #0
   15214:	mov	r2, #5
   15218:	movt	r1, #1
   1521c:	bl	11354 <dcgettext@plt>
   15220:	movw	r1, #55568	; 0xd910
   15224:	mov	r5, r0
   15228:	mov	r0, #4
   1522c:	movt	r1, #1
   15230:	bl	1a464 <__assert_fail@plt+0x8e7c>
   15234:	mov	r3, r0
   15238:	mov	r0, #1
   1523c:	mov	r1, r4
   15240:	mov	r2, r5
   15244:	bl	113f0 <error@plt>
   15248:	ldr	r0, [r5]
   1524c:	b	15200 <__assert_fail@plt+0x3c18>
   15250:	ldr	r0, [r6]
   15254:	b	15200 <__assert_fail@plt+0x3c18>
   15258:	ldr	r0, [r4]
   1525c:	b	15200 <__assert_fail@plt+0x3c18>
   15260:	push	{r4, r5, r6, r7, fp, lr}
   15264:	add	fp, sp, #16
   15268:	sub	sp, sp, #88	; 0x58
   1526c:	mov	r5, r1
   15270:	mov	r1, sp
   15274:	bl	11288 <fstatfs64@plt>
   15278:	cmp	r0, #0
   1527c:	beq	152d8 <__assert_fail@plt+0x3cf0>
   15280:	bl	114b0 <__errno_location@plt>
   15284:	ldr	r6, [r0]
   15288:	mov	r4, #1
   1528c:	cmp	r6, #38	; 0x26
   15290:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15294:	movw	r1, #57085	; 0xdefd
   15298:	mov	r0, #0
   1529c:	mov	r2, #5
   152a0:	movt	r1, #1
   152a4:	bl	11354 <dcgettext@plt>
   152a8:	mov	r7, r0
   152ac:	mov	r0, #4
   152b0:	mov	r1, r5
   152b4:	bl	1a464 <__assert_fail@plt+0x8e7c>
   152b8:	mov	r3, r0
   152bc:	mov	r0, #0
   152c0:	mov	r1, r6
   152c4:	mov	r2, r7
   152c8:	bl	113f0 <error@plt>
   152cc:	mov	r0, r4
   152d0:	sub	sp, fp, #16
   152d4:	pop	{r4, r5, r6, r7, fp, pc}
   152d8:	ldr	r0, [sp]
   152dc:	movw	r1, #63411	; 0xf7b3
   152e0:	mov	r4, #0
   152e4:	movt	r1, #303	; 0x12f
   152e8:	cmp	r0, r1
   152ec:	ble	15350 <__assert_fail@plt+0x3d68>
   152f0:	movw	r1, #12620	; 0x314c
   152f4:	movt	r1, #21318	; 0x5346
   152f8:	cmp	r0, r1
   152fc:	bgt	153bc <__assert_fail@plt+0x3dd4>
   15300:	movw	r1, #15684	; 0x3d44
   15304:	movt	r1, #10445	; 0x28cd
   15308:	cmp	r0, r1
   1530c:	bgt	15468 <__assert_fail@plt+0x3e80>
   15310:	movw	r1, #30803	; 0x7853
   15314:	movt	r1, #4400	; 0x1130
   15318:	cmp	r0, r1
   1531c:	bgt	1559c <__assert_fail@plt+0x3fb4>
   15320:	movw	r1, #22560	; 0x5820
   15324:	movt	r1, #1893	; 0x765
   15328:	cmp	r0, r1
   1532c:	bgt	15778 <__assert_fail@plt+0x4190>
   15330:	movw	r1, #2124	; 0x84c
   15334:	movt	r1, #65232	; 0xfed0
   15338:	add	r0, r0, r1
   1533c:	cmp	r0, #4
   15340:	movcs	r4, #1
   15344:	mov	r0, r4
   15348:	sub	sp, fp, #16
   1534c:	pop	{r4, r5, r6, r7, fp, pc}
   15350:	movw	r1, #16963	; 0x4243
   15354:	cmp	r0, r1
   15358:	bgt	15420 <__assert_fail@plt+0x3e38>
   1535c:	movw	r1, #390	; 0x186
   15360:	cmp	r0, r1
   15364:	bgt	154bc <__assert_fail@plt+0x3ed4>
   15368:	movw	r1, #33251	; 0x81e3
   1536c:	movt	r1, #56926	; 0xde5e
   15370:	cmp	r0, r1
   15374:	bgt	155e0 <__assert_fail@plt+0x3ff8>
   15378:	movw	r1, #6515	; 0x1973
   1537c:	movt	r1, #43962	; 0xabba
   15380:	cmp	r0, r1
   15384:	ble	157a8 <__assert_fail@plt+0x41c0>
   15388:	movw	r1, #33127	; 0x8167
   1538c:	movt	r1, #51582	; 0xc97e
   15390:	cmp	r0, r1
   15394:	bgt	15a20 <__assert_fail@plt+0x4438>
   15398:	movw	r1, #6516	; 0x1974
   1539c:	movt	r1, #43962	; 0xabba
   153a0:	cmp	r0, r1
   153a4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   153a8:	movw	r1, #5520	; 0x1590
   153ac:	movt	r1, #51031	; 0xc757
   153b0:	cmp	r0, r1
   153b4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   153b8:	b	15af0 <__assert_fail@plt+0x4508>
   153bc:	movw	r1, #25967	; 0x656f
   153c0:	movt	r1, #25189	; 0x6265
   153c4:	cmp	r0, r1
   153c8:	bgt	15508 <__assert_fail@plt+0x3f20>
   153cc:	movw	r1, #22568	; 0x5828
   153d0:	movt	r1, #22569	; 0x5829
   153d4:	cmp	r0, r1
   153d8:	ble	1561c <__assert_fail@plt+0x4034>
   153dc:	movw	r1, #18002	; 0x4652
   153e0:	movt	r1, #23119	; 0x5a4f
   153e4:	cmp	r0, r1
   153e8:	ble	157d8 <__assert_fail@plt+0x41f0>
   153ec:	movw	r1, #26475	; 0x676b
   153f0:	movt	r1, #24933	; 0x6165
   153f4:	cmp	r0, r1
   153f8:	bgt	15a44 <__assert_fail@plt+0x445c>
   153fc:	movw	r1, #18003	; 0x4653
   15400:	movt	r1, #23119	; 0x5a4f
   15404:	cmp	r0, r1
   15408:	beq	15ae4 <__assert_fail@plt+0x44fc>
   1540c:	movw	r1, #11765	; 0x2df5
   15410:	movt	r1, #24010	; 0x5dca
   15414:	cmp	r0, r1
   15418:	beq	15ae4 <__assert_fail@plt+0x44fc>
   1541c:	b	15af0 <__assert_fail@plt+0x4508>
   15420:	movw	r1, #44532	; 0xadf4
   15424:	cmp	r0, r1
   15428:	bgt	1555c <__assert_fail@plt+0x3f74>
   1542c:	movw	r1, #29300	; 0x7274
   15430:	cmp	r0, r1
   15434:	bgt	1565c <__assert_fail@plt+0x4074>
   15438:	movw	r1, #19779	; 0x4d43
   1543c:	cmp	r0, r1
   15440:	bgt	15808 <__assert_fail@plt+0x4220>
   15444:	movw	r1, #16964	; 0x4244
   15448:	cmp	r0, r1
   1544c:	movwne	r1, #18475	; 0x482b
   15450:	cmpne	r0, r1
   15454:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15458:	movw	r1, #18520	; 0x4858
   1545c:	cmp	r0, r1
   15460:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15464:	b	15af0 <__assert_fail@plt+0x4508>
   15468:	movw	r1, #23890	; 0x5d52
   1546c:	movt	r1, #17217	; 0x4341
   15470:	cmp	r0, r1
   15474:	ble	1568c <__assert_fail@plt+0x40a4>
   15478:	movw	r1, #17484	; 0x444c
   1547c:	movt	r1, #17741	; 0x454d
   15480:	cmp	r0, r1
   15484:	ble	1582c <__assert_fail@plt+0x4244>
   15488:	movw	r1, #18802	; 0x4972
   1548c:	movt	r1, #21093	; 0x5265
   15490:	cmp	r0, r1
   15494:	bgt	15a68 <__assert_fail@plt+0x4480>
   15498:	movw	r1, #17485	; 0x444d
   1549c:	movt	r1, #17741	; 0x454d
   154a0:	cmp	r0, r1
   154a4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   154a8:	movw	r1, #18003	; 0x4653
   154ac:	movt	r1, #17752	; 0x4558
   154b0:	cmp	r0, r1
   154b4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   154b8:	b	15af0 <__assert_fail@plt+0x4508>
   154bc:	movw	r1, #9319	; 0x2467
   154c0:	cmp	r0, r1
   154c4:	bgt	156cc <__assert_fail@plt+0x40e4>
   154c8:	movw	r1, #4978	; 0x1372
   154cc:	cmp	r0, r1
   154d0:	ble	15a08 <__assert_fail@plt+0x4420>
   154d4:	movw	r1, #4979	; 0x1373
   154d8:	sub	r1, r0, r1
   154dc:	cmp	r1, #28
   154e0:	bhi	154f8 <__assert_fail@plt+0x3f10>
   154e4:	movw	r3, #5121	; 0x1401
   154e8:	mov	r2, #1
   154ec:	movt	r3, #4096	; 0x1000
   154f0:	tst	r3, r2, lsl r1
   154f4:	bne	15ae4 <__assert_fail@plt+0x44fc>
   154f8:	movw	r1, #7377	; 0x1cd1
   154fc:	cmp	r0, r1
   15500:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15504:	b	15af0 <__assert_fail@plt+0x4508>
   15508:	movw	r1, #4385	; 0x1121
   1550c:	movt	r1, #26649	; 0x6819
   15510:	cmp	r0, r1
   15514:	ble	156f8 <__assert_fail@plt+0x4110>
   15518:	movw	r1, #26226	; 0x6672
   1551c:	movt	r1, #29539	; 0x7363
   15520:	cmp	r0, r1
   15524:	ble	1585c <__assert_fail@plt+0x4274>
   15528:	movw	r1, #29304	; 0x7278
   1552c:	movt	r1, #29554	; 0x7372
   15530:	cmp	r0, r1
   15534:	bgt	15a8c <__assert_fail@plt+0x44a4>
   15538:	movw	r1, #26227	; 0x6673
   1553c:	movt	r1, #29539	; 0x7363
   15540:	cmp	r0, r1
   15544:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15548:	movw	r1, #29544	; 0x7368
   1554c:	movt	r1, #29553	; 0x7371
   15550:	cmp	r0, r1
   15554:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15558:	b	15af0 <__assert_fail@plt+0x4508>
   1555c:	movw	r1, #57578	; 0xe0ea
   15560:	movt	r1, #39	; 0x27
   15564:	cmp	r0, r1
   15568:	bgt	15738 <__assert_fail@plt+0x4150>
   1556c:	movw	r1, #61266	; 0xef52
   15570:	cmp	r0, r1
   15574:	bgt	1588c <__assert_fail@plt+0x42a4>
   15578:	movw	r1, #44533	; 0xadf5
   1557c:	cmp	r0, r1
   15580:	movwne	r1, #44543	; 0xadff
   15584:	cmpne	r0, r1
   15588:	beq	15ae4 <__assert_fail@plt+0x44fc>
   1558c:	movw	r1, #61265	; 0xef51
   15590:	cmp	r0, r1
   15594:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15598:	b	15af0 <__assert_fail@plt+0x4508>
   1559c:	movw	r1, #513	; 0x201
   155a0:	movt	r1, #6528	; 0x1980
   155a4:	cmp	r0, r1
   155a8:	ble	158b4 <__assert_fail@plt+0x42cc>
   155ac:	movw	r1, #47791	; 0xbaaf
   155b0:	movt	r1, #8209	; 0x2011
   155b4:	cmp	r0, r1
   155b8:	bgt	15ab0 <__assert_fail@plt+0x44c8>
   155bc:	movw	r1, #514	; 0x202
   155c0:	movt	r1, #6528	; 0x1980
   155c4:	cmp	r0, r1
   155c8:	beq	15ae4 <__assert_fail@plt+0x44fc>
   155cc:	movw	r1, #64206	; 0xface
   155d0:	movt	r1, #7085	; 0x1bad
   155d4:	cmp	r0, r1
   155d8:	beq	15ae4 <__assert_fail@plt+0x44fc>
   155dc:	b	15af0 <__assert_fail@plt+0x4508>
   155e0:	movw	r1, #65419	; 0xff8b
   155e4:	movt	r1, #63868	; 0xf97c
   155e8:	cmp	r0, r1
   155ec:	ble	158e4 <__assert_fail@plt+0x42fc>
   155f0:	cmp	r0, #46	; 0x2e
   155f4:	bgt	15ad4 <__assert_fail@plt+0x44ec>
   155f8:	movw	r1, #65420	; 0xff8c
   155fc:	movt	r1, #63868	; 0xf97c
   15600:	cmp	r0, r1
   15604:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15608:	movw	r1, #59465	; 0xe849
   1560c:	movt	r1, #63893	; 0xf995
   15610:	cmp	r0, r1
   15614:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15618:	b	15af0 <__assert_fail@plt+0x4508>
   1561c:	movw	r1, #17226	; 0x434a
   15620:	movt	r1, #21327	; 0x534f
   15624:	cmp	r0, r1
   15628:	bgt	15914 <__assert_fail@plt+0x432c>
   1562c:	movw	r1, #12621	; 0x314d
   15630:	movt	r1, #21318	; 0x5346
   15634:	cmp	r0, r1
   15638:	movwne	r1, #18502	; 0x4846
   1563c:	movtne	r1, #21318	; 0x5346
   15640:	cmpne	r0, r1
   15644:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15648:	movw	r1, #21582	; 0x544e
   1564c:	movt	r1, #21318	; 0x5346
   15650:	cmp	r0, r1
   15654:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15658:	b	15af0 <__assert_fail@plt+0x4508>
   1565c:	movw	r1, #40863	; 0x9f9f
   15660:	cmp	r0, r1
   15664:	bgt	15944 <__assert_fail@plt+0x435c>
   15668:	movw	r1, #29301	; 0x7275
   1566c:	cmp	r0, r1
   15670:	movwne	r1, #29366	; 0x72b6
   15674:	cmpne	r0, r1
   15678:	beq	15ae4 <__assert_fail@plt+0x44fc>
   1567c:	movw	r1, #38496	; 0x9660
   15680:	cmp	r0, r1
   15684:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15688:	b	15af0 <__assert_fail@plt+0x4508>
   1568c:	movw	r1, #17993	; 0x4649
   15690:	movt	r1, #12627	; 0x3153
   15694:	cmp	r0, r1
   15698:	bgt	15958 <__assert_fail@plt+0x4370>
   1569c:	movw	r1, #15685	; 0x3d45
   156a0:	movt	r1, #10445	; 0x28cd
   156a4:	cmp	r0, r1
   156a8:	movwne	r1, #7658	; 0x1dea
   156ac:	movtne	r1, #11181	; 0x2bad
   156b0:	cmpne	r0, r1
   156b4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   156b8:	movw	r1, #12225	; 0x2fc1
   156bc:	movt	r1, #12225	; 0x2fc1
   156c0:	cmp	r0, r1
   156c4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   156c8:	b	15af0 <__assert_fail@plt+0x4508>
   156cc:	cmp	r0, #16384	; 0x4000
   156d0:	bge	15988 <__assert_fail@plt+0x43a0>
   156d4:	movw	r1, #9320	; 0x2468
   156d8:	cmp	r0, r1
   156dc:	movwne	r1, #9336	; 0x2478
   156e0:	cmpne	r0, r1
   156e4:	beq	15ae4 <__assert_fail@plt+0x44fc>
   156e8:	movw	r1, #13364	; 0x3434
   156ec:	cmp	r0, r1
   156f0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   156f4:	b	15af0 <__assert_fail@plt+0x4508>
   156f8:	movw	r1, #26399	; 0x671f
   156fc:	movt	r1, #25698	; 0x6462
   15700:	cmp	r0, r1
   15704:	bgt	159a8 <__assert_fail@plt+0x43c0>
   15708:	movw	r1, #25968	; 0x6570
   1570c:	movt	r1, #25189	; 0x6265
   15710:	cmp	r0, r1
   15714:	movwne	r1, #25970	; 0x6572
   15718:	movtne	r1, #25189	; 0x6265
   1571c:	cmpne	r0, r1
   15720:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15724:	movw	r1, #29296	; 0x7270
   15728:	movt	r1, #25447	; 0x6367
   1572c:	cmp	r0, r1
   15730:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15734:	b	15af0 <__assert_fail@plt+0x4508>
   15738:	movw	r1, #6547	; 0x1993
   1573c:	movt	r1, #258	; 0x102
   15740:	cmp	r0, r1
   15744:	bgt	159d8 <__assert_fail@plt+0x43f0>
   15748:	movw	r1, #57579	; 0xe0eb
   1574c:	movt	r1, #39	; 0x27
   15750:	cmp	r0, r1
   15754:	movwne	r1, #19027	; 0x4a53
   15758:	movtne	r1, #65	; 0x41
   1575c:	cmpne	r0, r1
   15760:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15764:	movw	r1, #65518	; 0xffee
   15768:	movt	r1, #192	; 0xc0
   1576c:	cmp	r0, r1
   15770:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15774:	b	15af0 <__assert_fail@plt+0x4508>
   15778:	movw	r1, #22561	; 0x5821
   1577c:	movt	r1, #1893	; 0x765
   15780:	cmp	r0, r1
   15784:	movwne	r1, #6452	; 0x1934
   15788:	movtne	r1, #2308	; 0x904
   1578c:	cmpne	r0, r1
   15790:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15794:	movw	r1, #7658	; 0x1dea
   15798:	movt	r1, #2989	; 0xbad
   1579c:	cmp	r0, r1
   157a0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   157a4:	b	15af0 <__assert_fail@plt+0x4508>
   157a8:	movw	r1, #22774	; 0x58f6
   157ac:	movt	r1, #34180	; 0x8584
   157b0:	cmp	r0, r1
   157b4:	movwne	r1, #26686	; 0x683e
   157b8:	movtne	r1, #37155	; 0x9123
   157bc:	cmpne	r0, r1
   157c0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   157c4:	movw	r1, #22774	; 0x58f6
   157c8:	movt	r1, #38276	; 0x9584
   157cc:	cmp	r0, r1
   157d0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   157d4:	b	15af0 <__assert_fail@plt+0x4508>
   157d8:	movw	r1, #22569	; 0x5829
   157dc:	movt	r1, #22569	; 0x5829
   157e0:	cmp	r0, r1
   157e4:	movwne	r1, #21314	; 0x5342
   157e8:	movtne	r1, #22598	; 0x5846
   157ec:	cmpne	r0, r1
   157f0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   157f4:	movw	r1, #27120	; 0x69f0
   157f8:	movt	r1, #23100	; 0x5a3c
   157fc:	cmp	r0, r1
   15800:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15804:	b	15af0 <__assert_fail@plt+0x4508>
   15808:	movw	r1, #19780	; 0x4d44
   1580c:	cmp	r0, r1
   15810:	movwne	r1, #19802	; 0x4d5a
   15814:	cmpne	r0, r1
   15818:	beq	15ae4 <__assert_fail@plt+0x44fc>
   1581c:	movw	r1, #24053	; 0x5df5
   15820:	cmp	r0, r1
   15824:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15828:	b	15af0 <__assert_fail@plt+0x4508>
   1582c:	movw	r1, #23891	; 0x5d53
   15830:	movt	r1, #17217	; 0x4341
   15834:	cmp	r0, r1
   15838:	movwne	r1, #16706	; 0x4142
   1583c:	movtne	r1, #17485	; 0x444d
   15840:	cmpne	r0, r1
   15844:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15848:	movw	r1, #52520	; 0xcd28
   1584c:	movt	r1, #17725	; 0x453d
   15850:	cmp	r0, r1
   15854:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15858:	b	15af0 <__assert_fail@plt+0x4508>
   1585c:	movw	r1, #4386	; 0x1122
   15860:	movt	r1, #26649	; 0x6819
   15864:	cmp	r0, r1
   15868:	movwne	r1, #28528	; 0x6f70
   1586c:	movtne	r1, #27759	; 0x6c6f
   15870:	cmpne	r0, r1
   15874:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15878:	movw	r1, #26227	; 0x6673
   1587c:	movt	r1, #28275	; 0x6e73
   15880:	cmp	r0, r1
   15884:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15888:	b	15af0 <__assert_fail@plt+0x4508>
   1588c:	movw	r1, #61267	; 0xef53
   15890:	cmp	r0, r1
   15894:	movwne	r1, #61791	; 0xf15f
   15898:	cmpne	r0, r1
   1589c:	beq	15ae4 <__assert_fail@plt+0x44fc>
   158a0:	movw	r1, #6484	; 0x1954
   158a4:	movt	r1, #1
   158a8:	cmp	r0, r1
   158ac:	beq	15ae4 <__assert_fail@plt+0x44fc>
   158b0:	b	15af0 <__assert_fail@plt+0x4508>
   158b4:	movw	r1, #30804	; 0x7854
   158b8:	movt	r1, #4400	; 0x1130
   158bc:	cmp	r0, r1
   158c0:	movwne	r1, #4966	; 0x1366
   158c4:	movtne	r1, #4966	; 0x1366
   158c8:	cmpne	r0, r1
   158cc:	beq	15ae4 <__assert_fail@plt+0x44fc>
   158d0:	movw	r1, #13126	; 0x3346
   158d4:	movt	r1, #5377	; 0x1501
   158d8:	cmp	r0, r1
   158dc:	beq	15ae4 <__assert_fail@plt+0x44fc>
   158e0:	b	15af0 <__assert_fail@plt+0x4508>
   158e4:	movw	r1, #33252	; 0x81e4
   158e8:	movt	r1, #56926	; 0xde5e
   158ec:	cmp	r0, r1
   158f0:	movwne	r1, #57826	; 0xe1e2
   158f4:	movtne	r1, #57589	; 0xe0f5
   158f8:	cmpne	r0, r1
   158fc:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15900:	movw	r1, #8208	; 0x2010
   15904:	movt	r1, #62197	; 0xf2f5
   15908:	cmp	r0, r1
   1590c:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15910:	b	15af0 <__assert_fail@plt+0x4508>
   15914:	movw	r1, #17227	; 0x434b
   15918:	movt	r1, #21327	; 0x534f
   1591c:	cmp	r0, r1
   15920:	movwne	r1, #256	; 0x100
   15924:	movtne	r1, #21529	; 0x5419
   15928:	cmpne	r0, r1
   1592c:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15930:	movw	r1, #18003	; 0x4653
   15934:	movt	r1, #22106	; 0x565a
   15938:	cmp	r0, r1
   1593c:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15940:	b	15af0 <__assert_fail@plt+0x4508>
   15944:	movw	r1, #40864	; 0x9fa0
   15948:	sub	r0, r0, r1
   1594c:	cmp	r0, #3
   15950:	bcc	15ae4 <__assert_fail@plt+0x44fc>
   15954:	b	15af0 <__assert_fail@plt+0x4508>
   15958:	movw	r1, #17994	; 0x464a
   1595c:	movt	r1, #12627	; 0x3153
   15960:	cmp	r0, r1
   15964:	movwne	r1, #21297	; 0x5331
   15968:	movtne	r1, #16966	; 0x4246
   1596c:	cmpne	r0, r1
   15970:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15974:	movw	r1, #20045	; 0x4e4d
   15978:	movt	r1, #16969	; 0x4249
   1597c:	cmp	r0, r1
   15980:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15984:	b	15af0 <__assert_fail@plt+0x4508>
   15988:	sub	r0, r0, #16384	; 0x4000
   1598c:	cmp	r0, #6
   15990:	bhi	15af0 <__assert_fail@plt+0x4508>
   15994:	mov	r1, #1
   15998:	mov	r2, #81	; 0x51
   1599c:	tst	r2, r1, lsl r0
   159a0:	bne	15ae4 <__assert_fail@plt+0x44fc>
   159a4:	b	15af0 <__assert_fail@plt+0x4508>
   159a8:	movw	r1, #26400	; 0x6720
   159ac:	movt	r1, #25698	; 0x6462
   159b0:	cmp	r0, r1
   159b4:	movwne	r1, #24952	; 0x6178
   159b8:	movtne	r1, #25700	; 0x6464
   159bc:	cmpne	r0, r1
   159c0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   159c4:	movw	r1, #26985	; 0x6969
   159c8:	movt	r1, #26457	; 0x6759
   159cc:	cmp	r0, r1
   159d0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   159d4:	b	15af0 <__assert_fail@plt+0x4508>
   159d8:	movw	r1, #6548	; 0x1994
   159dc:	movt	r1, #258	; 0x102
   159e0:	cmp	r0, r1
   159e4:	movwne	r1, #6551	; 0x1997
   159e8:	movtne	r1, #258	; 0x102
   159ec:	cmpne	r0, r1
   159f0:	beq	15ae4 <__assert_fail@plt+0x44fc>
   159f4:	movw	r1, #53613	; 0xd16d
   159f8:	movt	r1, #303	; 0x12f
   159fc:	cmp	r0, r1
   15a00:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a04:	b	15af0 <__assert_fail@plt+0x4508>
   15a08:	movw	r1, #391	; 0x187
   15a0c:	cmp	r0, r1
   15a10:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a14:	cmp	r0, #1984	; 0x7c0
   15a18:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a1c:	b	15af0 <__assert_fail@plt+0x4508>
   15a20:	movw	r1, #33128	; 0x8168
   15a24:	movt	r1, #51582	; 0xc97e
   15a28:	cmp	r0, r1
   15a2c:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a30:	movw	r1, #18961	; 0x4a11
   15a34:	movt	r1, #51966	; 0xcafe
   15a38:	cmp	r0, r1
   15a3c:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a40:	b	15af0 <__assert_fail@plt+0x4508>
   15a44:	movw	r1, #26476	; 0x676c
   15a48:	movt	r1, #24933	; 0x6165
   15a4c:	cmp	r0, r1
   15a50:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a54:	movw	r1, #25974	; 0x6576
   15a58:	movt	r1, #25188	; 0x6264
   15a5c:	cmp	r0, r1
   15a60:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a64:	b	15af0 <__assert_fail@plt+0x4508>
   15a68:	movw	r1, #18803	; 0x4973
   15a6c:	movt	r1, #21093	; 0x5265
   15a70:	cmp	r0, r1
   15a74:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a78:	movw	r1, #17229	; 0x434d
   15a7c:	movt	r1, #21317	; 0x5345
   15a80:	cmp	r0, r1
   15a84:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a88:	b	15af0 <__assert_fail@plt+0x4508>
   15a8c:	movw	r1, #29305	; 0x7279
   15a90:	movt	r1, #29554	; 0x7372
   15a94:	cmp	r0, r1
   15a98:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15a9c:	movw	r1, #24931	; 0x6163
   15aa0:	movt	r1, #29810	; 0x7472
   15aa4:	cmp	r0, r1
   15aa8:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15aac:	b	15af0 <__assert_fail@plt+0x4508>
   15ab0:	movw	r1, #47792	; 0xbab0
   15ab4:	movt	r1, #8209	; 0x2011
   15ab8:	cmp	r0, r1
   15abc:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15ac0:	movw	r1, #6405	; 0x1905
   15ac4:	movt	r1, #9221	; 0x2405
   15ac8:	cmp	r0, r1
   15acc:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15ad0:	b	15af0 <__assert_fail@plt+0x4508>
   15ad4:	cmp	r0, #47	; 0x2f
   15ad8:	beq	15ae4 <__assert_fail@plt+0x44fc>
   15adc:	cmp	r0, #51	; 0x33
   15ae0:	bne	15af0 <__assert_fail@plt+0x4508>
   15ae4:	mov	r0, r4
   15ae8:	sub	sp, fp, #16
   15aec:	pop	{r4, r5, r6, r7, fp, pc}
   15af0:	mov	r4, #1
   15af4:	mov	r0, r4
   15af8:	sub	sp, fp, #16
   15afc:	pop	{r4, r5, r6, r7, fp, pc}
   15b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b04:	add	fp, sp, #28
   15b08:	sub	sp, sp, #12
   15b0c:	sub	sp, sp, #8192	; 0x2000
   15b10:	ldr	r8, [fp, #8]
   15b14:	ldr	r9, [fp, #12]
   15b18:	mov	r5, r0
   15b1c:	mvn	r0, #1
   15b20:	str	r1, [sp, #4]
   15b24:	mov	sl, r2
   15b28:	eor	r0, r8, r0
   15b2c:	mvn	r1, r9
   15b30:	orrs	r0, r0, r1
   15b34:	beq	15bf8 <__assert_fail@plt+0x4610>
   15b38:	and	r0, r8, r9
   15b3c:	mov	r4, #0
   15b40:	cmn	r0, #1
   15b44:	bne	15c34 <__assert_fail@plt+0x464c>
   15b48:	movw	r8, #61876	; 0xf1b4
   15b4c:	add	r7, sp, #8
   15b50:	mov	r6, #0
   15b54:	movt	r8, #2
   15b58:	b	15b68 <__assert_fail@plt+0x4580>
   15b5c:	adds	r4, r4, r9
   15b60:	mov	r5, #0
   15b64:	adc	r6, r6, #0
   15b68:	mov	r0, sl
   15b6c:	mov	r1, r7
   15b70:	mov	r2, #8192	; 0x2000
   15b74:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   15b78:	cmn	r0, #1
   15b7c:	beq	15d04 <__assert_fail@plt+0x471c>
   15b80:	mov	r9, r0
   15b84:	cmp	r0, #0
   15b88:	beq	15db8 <__assert_fail@plt+0x47d0>
   15b8c:	tst	r5, #1
   15b90:	beq	15bd8 <__assert_fail@plt+0x45f0>
   15b94:	movw	r0, #61888	; 0xf1c0
   15b98:	ldr	r3, [sp, #4]
   15b9c:	movw	r2, #55014	; 0xd6e6
   15ba0:	movw	r1, #56910	; 0xde4e
   15ba4:	movt	r0, #2
   15ba8:	movt	r2, #1
   15bac:	movt	r1, #1
   15bb0:	mov	r5, r0
   15bb4:	ldrb	r0, [r0, #10]
   15bb8:	cmp	r0, #0
   15bbc:	movw	r0, #55013	; 0xd6e5
   15bc0:	movt	r0, #1
   15bc4:	movne	r2, r0
   15bc8:	mov	r0, #1
   15bcc:	bl	114d4 <__printf_chk@plt>
   15bd0:	mov	r0, #1
   15bd4:	strb	r0, [r5, #10]
   15bd8:	ldr	r3, [r8]
   15bdc:	mov	r0, r7
   15be0:	mov	r1, #1
   15be4:	mov	r2, r9
   15be8:	bl	1133c <fwrite_unlocked@plt>
   15bec:	cmp	r0, r9
   15bf0:	bcs	15b5c <__assert_fail@plt+0x4574>
   15bf4:	b	15dc8 <__assert_fail@plt+0x47e0>
   15bf8:	add	r1, sp, #8
   15bfc:	mov	r0, sl
   15c00:	mov	r2, #8192	; 0x2000
   15c04:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   15c08:	mov	r6, #0
   15c0c:	cmn	r0, #1
   15c10:	beq	15d00 <__assert_fail@plt+0x4718>
   15c14:	mov	r4, r0
   15c18:	cmp	r0, #0
   15c1c:	bne	15d4c <__assert_fail@plt+0x4764>
   15c20:	mov	r4, #0
   15c24:	mov	r0, r4
   15c28:	mov	r1, r6
   15c2c:	sub	sp, fp, #28
   15c30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15c34:	mov	r6, #0
   15c38:	b	15c40 <__assert_fail@plt+0x4658>
   15c3c:	mov	r5, #0
   15c40:	subs	r0, r8, #8192	; 0x2000
   15c44:	mov	r2, r8
   15c48:	add	r1, sp, #8
   15c4c:	sbcs	r0, r9, #0
   15c50:	movcs	r2, #8192	; 0x2000
   15c54:	mov	r0, sl
   15c58:	bl	1a9a4 <__assert_fail@plt+0x93bc>
   15c5c:	cmp	r0, #0
   15c60:	beq	15db8 <__assert_fail@plt+0x47d0>
   15c64:	mov	r7, r0
   15c68:	cmn	r0, #1
   15c6c:	beq	15d04 <__assert_fail@plt+0x471c>
   15c70:	tst	r5, #1
   15c74:	beq	15cbc <__assert_fail@plt+0x46d4>
   15c78:	movw	r0, #61888	; 0xf1c0
   15c7c:	ldr	r3, [sp, #4]
   15c80:	movw	r2, #55014	; 0xd6e6
   15c84:	movw	r1, #56910	; 0xde4e
   15c88:	movt	r0, #2
   15c8c:	movt	r2, #1
   15c90:	movt	r1, #1
   15c94:	mov	r5, r0
   15c98:	ldrb	r0, [r0, #10]
   15c9c:	cmp	r0, #0
   15ca0:	movw	r0, #55013	; 0xd6e5
   15ca4:	movt	r0, #1
   15ca8:	movne	r2, r0
   15cac:	mov	r0, #1
   15cb0:	bl	114d4 <__printf_chk@plt>
   15cb4:	mov	r0, #1
   15cb8:	strb	r0, [r5, #10]
   15cbc:	movw	r0, #61876	; 0xf1b4
   15cc0:	mov	r1, #1
   15cc4:	mov	r2, r7
   15cc8:	movt	r0, #2
   15ccc:	ldr	r3, [r0]
   15cd0:	add	r0, sp, #8
   15cd4:	bl	1133c <fwrite_unlocked@plt>
   15cd8:	cmp	r0, r7
   15cdc:	bcc	15dc8 <__assert_fail@plt+0x47e0>
   15ce0:	subs	r8, r8, r7
   15ce4:	sbc	r9, r9, #0
   15ce8:	adds	r4, r4, r7
   15cec:	orr	r0, r8, r9
   15cf0:	adc	r6, r6, #0
   15cf4:	cmp	r0, #0
   15cf8:	bne	15c3c <__assert_fail@plt+0x4654>
   15cfc:	b	15db8 <__assert_fail@plt+0x47d0>
   15d00:	mov	r4, #0
   15d04:	bl	114b0 <__errno_location@plt>
   15d08:	ldr	r5, [r0]
   15d0c:	cmp	r5, #11
   15d10:	beq	15db8 <__assert_fail@plt+0x47d0>
   15d14:	movw	r1, #56808	; 0xdde8
   15d18:	mov	r0, #0
   15d1c:	mov	r2, #5
   15d20:	movt	r1, #1
   15d24:	bl	11354 <dcgettext@plt>
   15d28:	ldr	r1, [sp, #4]
   15d2c:	mov	r4, r0
   15d30:	mov	r0, #4
   15d34:	bl	1a464 <__assert_fail@plt+0x8e7c>
   15d38:	mov	r3, r0
   15d3c:	mov	r0, #1
   15d40:	mov	r1, r5
   15d44:	mov	r2, r4
   15d48:	bl	113f0 <error@plt>
   15d4c:	cmp	r5, #0
   15d50:	beq	15d94 <__assert_fail@plt+0x47ac>
   15d54:	movw	r5, #61888	; 0xf1c0
   15d58:	movw	r1, #55013	; 0xd6e5
   15d5c:	movw	r2, #55014	; 0xd6e6
   15d60:	ldr	r3, [sp, #4]
   15d64:	mov	r7, #1
   15d68:	movt	r5, #2
   15d6c:	movt	r1, #1
   15d70:	movt	r2, #1
   15d74:	ldrb	r0, [r5, #10]
   15d78:	cmp	r0, #0
   15d7c:	mov	r0, #1
   15d80:	movne	r2, r1
   15d84:	movw	r1, #56910	; 0xde4e
   15d88:	movt	r1, #1
   15d8c:	bl	114d4 <__printf_chk@plt>
   15d90:	strb	r7, [r5, #10]
   15d94:	movw	r0, #61876	; 0xf1b4
   15d98:	mov	r1, #1
   15d9c:	mov	r2, r4
   15da0:	movt	r0, #2
   15da4:	ldr	r3, [r0]
   15da8:	add	r0, sp, #8
   15dac:	bl	1133c <fwrite_unlocked@plt>
   15db0:	cmp	r0, r4
   15db4:	bcc	15dc8 <__assert_fail@plt+0x47e0>
   15db8:	mov	r0, r4
   15dbc:	mov	r1, r6
   15dc0:	sub	sp, fp, #28
   15dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dc8:	movw	r0, #61876	; 0xf1b4
   15dcc:	movt	r0, #2
   15dd0:	ldr	r0, [r0]
   15dd4:	bl	1157c <clearerr_unlocked@plt>
   15dd8:	bl	114b0 <__errno_location@plt>
   15ddc:	ldr	r4, [r0]
   15de0:	movw	r1, #56940	; 0xde6c
   15de4:	mov	r0, #0
   15de8:	mov	r2, #5
   15dec:	movt	r1, #1
   15df0:	bl	11354 <dcgettext@plt>
   15df4:	movw	r1, #55568	; 0xd910
   15df8:	mov	r5, r0
   15dfc:	mov	r0, #4
   15e00:	movt	r1, #1
   15e04:	bl	1a464 <__assert_fail@plt+0x8e7c>
   15e08:	mov	r3, r0
   15e0c:	mov	r0, #1
   15e10:	mov	r1, r4
   15e14:	mov	r2, r5
   15e18:	bl	113f0 <error@plt>
   15e1c:	push	{r4, r5, r6, r7, fp, lr}
   15e20:	add	fp, sp, #16
   15e24:	sub	sp, sp, #32
   15e28:	ldr	r7, [fp, #8]
   15e2c:	mov	r4, r3
   15e30:	mov	r6, r2
   15e34:	str	r7, [sp]
   15e38:	bl	113c0 <lseek64@plt>
   15e3c:	cmp	r1, #0
   15e40:	subge	sp, fp, #16
   15e44:	popge	{r4, r5, r6, r7, fp, pc}
   15e48:	ldr	r5, [fp, #12]
   15e4c:	add	r2, sp, #11
   15e50:	mov	r0, r6
   15e54:	mov	r1, r4
   15e58:	bl	188ec <__assert_fail@plt+0x7304>
   15e5c:	mov	r4, r0
   15e60:	cmp	r7, #2
   15e64:	beq	15e8c <__assert_fail@plt+0x48a4>
   15e68:	cmp	r7, #1
   15e6c:	beq	15ea0 <__assert_fail@plt+0x48b8>
   15e70:	cmp	r7, #0
   15e74:	bne	15ef0 <__assert_fail@plt+0x4908>
   15e78:	bl	114b0 <__errno_location@plt>
   15e7c:	ldr	r6, [r0]
   15e80:	movw	r1, #56957	; 0xde7d
   15e84:	movt	r1, #1
   15e88:	b	15eb0 <__assert_fail@plt+0x48c8>
   15e8c:	bl	114b0 <__errno_location@plt>
   15e90:	ldr	r6, [r0]
   15e94:	movw	r1, #57024	; 0xdec0
   15e98:	movt	r1, #1
   15e9c:	b	15eb0 <__assert_fail@plt+0x48c8>
   15ea0:	bl	114b0 <__errno_location@plt>
   15ea4:	ldr	r6, [r0]
   15ea8:	movw	r1, #56986	; 0xde9a
   15eac:	movt	r1, #1
   15eb0:	mov	r0, #0
   15eb4:	mov	r2, #5
   15eb8:	bl	11354 <dcgettext@plt>
   15ebc:	mov	r7, r0
   15ec0:	mov	r0, #0
   15ec4:	mov	r1, #3
   15ec8:	mov	r2, r5
   15ecc:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   15ed0:	mov	r3, r0
   15ed4:	mov	r0, #0
   15ed8:	mov	r1, r6
   15edc:	mov	r2, r7
   15ee0:	str	r4, [sp]
   15ee4:	bl	113f0 <error@plt>
   15ee8:	mov	r0, #1
   15eec:	bl	11468 <exit@plt>
   15ef0:	bl	115c4 <abort@plt>
   15ef4:	ldr	r0, [r0, #60]	; 0x3c
   15ef8:	udiv	r2, r0, r1
   15efc:	mls	r0, r2, r1, r0
   15f00:	bx	lr
   15f04:	ldr	r1, [r1, #60]	; 0x3c
   15f08:	ldr	r0, [r0, #60]	; 0x3c
   15f0c:	sub	r0, r0, r1
   15f10:	clz	r0, r0
   15f14:	lsr	r0, r0, #5
   15f18:	bx	lr
   15f1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f20:	add	fp, sp, #28
   15f24:	sub	sp, sp, #124	; 0x7c
   15f28:	ldr	r5, [r0]
   15f2c:	mov	r6, r1
   15f30:	movw	r1, #56098	; 0xdb22
   15f34:	mov	r4, r0
   15f38:	movt	r1, #1
   15f3c:	mov	r0, r5
   15f40:	bl	112b8 <strcmp@plt>
   15f44:	ldr	r7, [r4, #52]	; 0x34
   15f48:	ldrb	sl, [r4, #46]	; 0x2e
   15f4c:	cmp	r0, #0
   15f50:	str	r0, [sp, #12]
   15f54:	beq	15f78 <__assert_fail@plt+0x4990>
   15f58:	mov	r1, #2048	; 0x800
   15f5c:	cmp	r6, #0
   15f60:	mov	r0, r5
   15f64:	movwne	r1, #0
   15f68:	bl	174a8 <__assert_fail@plt+0x5ec0>
   15f6c:	mov	r9, r0
   15f70:	ldr	r0, [r4, #52]	; 0x34
   15f74:	b	15f80 <__assert_fail@plt+0x4998>
   15f78:	mov	r9, #0
   15f7c:	mov	r0, r7
   15f80:	ldr	r1, [r4, #48]	; 0x30
   15f84:	clz	r0, r0
   15f88:	lsr	r0, r0, #5
   15f8c:	add	r1, r1, #1
   15f90:	clz	r1, r1
   15f94:	lsr	r1, r1, #5
   15f98:	teq	r1, r0
   15f9c:	beq	167f4 <__assert_fail@plt+0x520c>
   15fa0:	movw	r8, #61888	; 0xf1c0
   15fa4:	add	r5, r9, #1
   15fa8:	cmn	r9, #1
   15fac:	movt	r8, #2
   15fb0:	mov	r0, r5
   15fb4:	ldrb	r1, [r8, #8]
   15fb8:	movwne	r0, #1
   15fbc:	mvn	r1, r1
   15fc0:	orr	r0, r0, r1
   15fc4:	and	r0, r0, #1
   15fc8:	strb	r0, [r4, #46]	; 0x2e
   15fcc:	ldrb	r0, [r8, #7]
   15fd0:	cmp	r0, #0
   15fd4:	bne	1607c <__assert_fail@plt+0x4a94>
   15fd8:	ldr	r1, [r4]
   15fdc:	add	r2, sp, #16
   15fe0:	mov	r0, #3
   15fe4:	bl	115dc <__lxstat64@plt>
   15fe8:	cmp	r0, #0
   15fec:	bne	1607c <__assert_fail@plt+0x4a94>
   15ff0:	ldr	r0, [sp, #32]
   15ff4:	and	r0, r0, #61440	; 0xf000
   15ff8:	cmp	r0, #40960	; 0xa000
   15ffc:	bne	1607c <__assert_fail@plt+0x4a94>
   16000:	mov	r0, #1
   16004:	movw	r1, #57445	; 0xe065
   16008:	mov	r2, #5
   1600c:	strb	r0, [r4, #44]	; 0x2c
   16010:	mvn	r0, #0
   16014:	movt	r1, #1
   16018:	str	r0, [r4, #52]	; 0x34
   1601c:	mov	r0, #0
   16020:	bl	11354 <dcgettext@plt>
   16024:	ldr	r7, [r4]
   16028:	movw	r1, #56098	; 0xdb22
   1602c:	mov	r6, r0
   16030:	movt	r1, #1
   16034:	mov	r0, r7
   16038:	bl	112b8 <strcmp@plt>
   1603c:	cmp	r0, #0
   16040:	bne	1605c <__assert_fail@plt+0x4a74>
   16044:	movw	r1, #56895	; 0xde3f
   16048:	mov	r0, #0
   1604c:	mov	r2, #5
   16050:	movt	r1, #1
   16054:	bl	11354 <dcgettext@plt>
   16058:	mov	r7, r0
   1605c:	mov	r0, #4
   16060:	mov	r1, r7
   16064:	bl	1a464 <__assert_fail@plt+0x8e7c>
   16068:	mov	r3, r0
   1606c:	mov	r0, #0
   16070:	mov	r1, #0
   16074:	mov	r2, r6
   16078:	b	16690 <__assert_fail@plt+0x50a8>
   1607c:	cmn	r9, #1
   16080:	beq	1617c <__assert_fail@plt+0x4b94>
   16084:	add	r2, sp, #16
   16088:	mov	r0, #3
   1608c:	mov	r1, r9
   16090:	bl	113a8 <__fxstat64@plt>
   16094:	cmn	r0, #1
   16098:	ble	1617c <__assert_fail@plt+0x4b94>
   1609c:	ldr	r0, [sp, #32]
   160a0:	and	r0, r0, #61440	; 0xf000
   160a4:	cmp	r0, #32768	; 0x8000
   160a8:	bge	16270 <__assert_fail@plt+0x4c88>
   160ac:	cmp	r0, #4096	; 0x1000
   160b0:	cmpne	r0, #8192	; 0x2000
   160b4:	beq	16278 <__assert_fail@plt+0x4c90>
   160b8:	mov	r0, #0
   160bc:	strb	r0, [r4, #46]	; 0x2e
   160c0:	mvn	r0, #0
   160c4:	str	r0, [r4, #52]	; 0x34
   160c8:	movw	r0, #61760	; 0xf140
   160cc:	movt	r0, #2
   160d0:	ldrb	r1, [r8, #8]
   160d4:	ldr	r0, [r0]
   160d8:	mvn	r1, r1
   160dc:	subs	r0, r0, #1
   160e0:	movwne	r0, #1
   160e4:	cmn	r7, #1
   160e8:	orr	r0, r1, r0
   160ec:	cmpeq	sl, #0
   160f0:	and	r0, r0, #1
   160f4:	strb	r0, [r4, #44]	; 0x2c
   160f8:	beq	16694 <__assert_fail@plt+0x50ac>
   160fc:	movw	r1, #57526	; 0xe0b6
   16100:	mov	r0, #0
   16104:	mov	r2, #5
   16108:	movt	r1, #1
   1610c:	bl	11354 <dcgettext@plt>
   16110:	ldr	r7, [r4]
   16114:	movw	r1, #56098	; 0xdb22
   16118:	mov	r6, r0
   1611c:	movt	r1, #1
   16120:	mov	r0, r7
   16124:	bl	112b8 <strcmp@plt>
   16128:	cmp	r0, #0
   1612c:	bne	16148 <__assert_fail@plt+0x4b60>
   16130:	movw	r1, #56895	; 0xde3f
   16134:	mov	r0, #0
   16138:	mov	r2, #5
   1613c:	movt	r1, #1
   16140:	bl	11354 <dcgettext@plt>
   16144:	mov	r7, r0
   16148:	mov	r0, #4
   1614c:	mov	r1, r7
   16150:	bl	1a464 <__assert_fail@plt+0x8e7c>
   16154:	mov	r7, r0
   16158:	ldrb	r0, [r4, #44]	; 0x2c
   1615c:	cmp	r0, #0
   16160:	beq	16674 <__assert_fail@plt+0x508c>
   16164:	movw	r1, #56870	; 0xde26
   16168:	mov	r0, #0
   1616c:	mov	r2, #5
   16170:	movt	r1, #1
   16174:	bl	11354 <dcgettext@plt>
   16178:	b	1667c <__assert_fail@plt+0x5094>
   1617c:	bl	114b0 <__errno_location@plt>
   16180:	ldr	r6, [r0]
   16184:	str	r6, [r4, #52]	; 0x34
   16188:	ldrb	r1, [r4, #46]	; 0x2e
   1618c:	cmp	r1, #0
   16190:	beq	161fc <__assert_fail@plt+0x4c14>
   16194:	ldr	r6, [r0]
   16198:	cmp	r7, r6
   1619c:	beq	16694 <__assert_fail@plt+0x50ac>
   161a0:	ldr	r7, [r4]
   161a4:	movw	r1, #56098	; 0xdb22
   161a8:	movt	r1, #1
   161ac:	mov	r0, r7
   161b0:	bl	112b8 <strcmp@plt>
   161b4:	cmp	r0, #0
   161b8:	bne	161d4 <__assert_fail@plt+0x4bec>
   161bc:	movw	r1, #56895	; 0xde3f
   161c0:	mov	r0, #0
   161c4:	mov	r2, #5
   161c8:	movt	r1, #1
   161cc:	bl	11354 <dcgettext@plt>
   161d0:	mov	r7, r0
   161d4:	mov	r0, #0
   161d8:	mov	r1, #3
   161dc:	mov	r2, r7
   161e0:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   161e4:	movw	r2, #58266	; 0xe39a
   161e8:	mov	r3, r0
   161ec:	mov	r0, #0
   161f0:	mov	r1, r6
   161f4:	movt	r2, #1
   161f8:	b	16690 <__assert_fail@plt+0x50a8>
   161fc:	cmp	sl, #0
   16200:	beq	16694 <__assert_fail@plt+0x50ac>
   16204:	movw	r1, #57499	; 0xe09b
   16208:	mov	r0, #0
   1620c:	mov	r2, #5
   16210:	movt	r1, #1
   16214:	bl	11354 <dcgettext@plt>
   16218:	ldr	r7, [r4]
   1621c:	movw	r1, #56098	; 0xdb22
   16220:	mov	r8, r0
   16224:	movt	r1, #1
   16228:	mov	r0, r7
   1622c:	bl	112b8 <strcmp@plt>
   16230:	cmp	r0, #0
   16234:	bne	16250 <__assert_fail@plt+0x4c68>
   16238:	movw	r1, #56895	; 0xde3f
   1623c:	mov	r0, #0
   16240:	mov	r2, #5
   16244:	movt	r1, #1
   16248:	bl	11354 <dcgettext@plt>
   1624c:	mov	r7, r0
   16250:	mov	r0, #4
   16254:	mov	r1, r7
   16258:	bl	1a464 <__assert_fail@plt+0x8e7c>
   1625c:	mov	r3, r0
   16260:	mov	r0, #0
   16264:	mov	r1, r6
   16268:	mov	r2, r8
   1626c:	b	16690 <__assert_fail@plt+0x50a8>
   16270:	cmpne	r0, #49152	; 0xc000
   16274:	bne	160b8 <__assert_fail@plt+0x4ad0>
   16278:	mov	sl, r6
   1627c:	ldr	r6, [r4]
   16280:	movw	r1, #56098	; 0xdb22
   16284:	movt	r1, #1
   16288:	mov	r0, r6
   1628c:	bl	112b8 <strcmp@plt>
   16290:	cmp	r0, #0
   16294:	bne	162b0 <__assert_fail@plt+0x4cc8>
   16298:	movw	r1, #56895	; 0xde3f
   1629c:	mov	r0, #0
   162a0:	mov	r2, #5
   162a4:	movt	r1, #1
   162a8:	bl	11354 <dcgettext@plt>
   162ac:	mov	r6, r0
   162b0:	mov	r0, r9
   162b4:	mov	r1, r6
   162b8:	bl	15260 <__assert_fail@plt+0x3c78>
   162bc:	cmp	r0, #0
   162c0:	strb	r0, [r4, #45]	; 0x2d
   162c4:	beq	162d4 <__assert_fail@plt+0x4cec>
   162c8:	ldrb	r0, [r8, #7]
   162cc:	cmp	r0, #0
   162d0:	beq	163d8 <__assert_fail@plt+0x4df0>
   162d4:	mov	r0, #0
   162d8:	orr	r1, r7, #2
   162dc:	str	r0, [r4, #52]	; 0x34
   162e0:	cmp	r1, #2
   162e4:	ldr	r0, [r4, #48]	; 0x30
   162e8:	bne	163c4 <__assert_fail@plt+0x4ddc>
   162ec:	cmn	r0, #1
   162f0:	beq	1655c <__assert_fail@plt+0x4f74>
   162f4:	ldrd	r0, [r4, #32]
   162f8:	ldr	r2, [sp, #112]	; 0x70
   162fc:	ldr	r3, [sp, #116]	; 0x74
   16300:	eor	r1, r1, r3
   16304:	eor	r0, r0, r2
   16308:	orrs	r0, r0, r1
   1630c:	bne	16458 <__assert_fail@plt+0x4e70>
   16310:	ldrd	r0, [r4, #24]
   16314:	ldr	r2, [sp, #16]
   16318:	ldr	r3, [sp, #20]
   1631c:	eor	r1, r1, r3
   16320:	eor	r0, r0, r2
   16324:	orrs	r0, r0, r1
   16328:	bne	16458 <__assert_fail@plt+0x4e70>
   1632c:	ldr	r4, [r4]
   16330:	movw	r1, #56098	; 0xdb22
   16334:	movt	r1, #1
   16338:	mov	r0, r4
   1633c:	bl	112b8 <strcmp@plt>
   16340:	cmp	r0, #0
   16344:	bne	16360 <__assert_fail@plt+0x4d78>
   16348:	movw	r1, #56895	; 0xde3f
   1634c:	mov	r0, #0
   16350:	mov	r2, #5
   16354:	movt	r1, #1
   16358:	bl	11354 <dcgettext@plt>
   1635c:	mov	r4, r0
   16360:	cmp	r5, #2
   16364:	bcc	163bc <__assert_fail@plt+0x4dd4>
   16368:	mov	r0, r9
   1636c:	bl	115d0 <close@plt>
   16370:	cmp	r0, #0
   16374:	beq	163bc <__assert_fail@plt+0x4dd4>
   16378:	bl	114b0 <__errno_location@plt>
   1637c:	ldr	r5, [r0]
   16380:	movw	r1, #57066	; 0xdeea
   16384:	mov	r0, #0
   16388:	mov	r2, #5
   1638c:	movt	r1, #1
   16390:	bl	11354 <dcgettext@plt>
   16394:	mov	r6, r0
   16398:	mov	r0, #4
   1639c:	mov	r1, r4
   163a0:	bl	1a464 <__assert_fail@plt+0x8e7c>
   163a4:	mov	r3, r0
   163a8:	mov	r0, #0
   163ac:	mov	r1, r5
   163b0:	mov	r2, r6
   163b4:	str	r9, [sp]
   163b8:	bl	113f0 <error@plt>
   163bc:	sub	sp, fp, #28
   163c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c4:	cmn	r0, #1
   163c8:	bne	16814 <__assert_fail@plt+0x522c>
   163cc:	movw	r1, #57637	; 0xe125
   163d0:	movt	r1, #1
   163d4:	b	16564 <__assert_fail@plt+0x4f7c>
   163d8:	movw	r1, #57573	; 0xe0e5
   163dc:	mvn	r0, #0
   163e0:	mov	r2, #5
   163e4:	str	r0, [r4, #52]	; 0x34
   163e8:	movt	r1, #1
   163ec:	mov	r0, #0
   163f0:	bl	11354 <dcgettext@plt>
   163f4:	ldr	r7, [r4]
   163f8:	movw	r1, #56098	; 0xdb22
   163fc:	mov	r6, r0
   16400:	movt	r1, #1
   16404:	mov	r0, r7
   16408:	bl	112b8 <strcmp@plt>
   1640c:	cmp	r0, #0
   16410:	bne	1642c <__assert_fail@plt+0x4e44>
   16414:	movw	r1, #56895	; 0xde3f
   16418:	mov	r0, #0
   1641c:	mov	r2, #5
   16420:	movt	r1, #1
   16424:	bl	11354 <dcgettext@plt>
   16428:	mov	r7, r0
   1642c:	mov	r0, #4
   16430:	mov	r1, r7
   16434:	bl	1a464 <__assert_fail@plt+0x8e7c>
   16438:	mov	r3, r0
   1643c:	mov	r0, #0
   16440:	mov	r1, #0
   16444:	mov	r2, r6
   16448:	bl	113f0 <error@plt>
   1644c:	movw	r0, #257	; 0x101
   16450:	strh	r0, [r4, #44]	; 0x2c
   16454:	b	16694 <__assert_fail@plt+0x50ac>
   16458:	movw	r1, #57699	; 0xe163
   1645c:	mov	r0, #0
   16460:	mov	r2, #5
   16464:	movt	r1, #1
   16468:	bl	11354 <dcgettext@plt>
   1646c:	ldr	r6, [r4]
   16470:	movw	r1, #56098	; 0xdb22
   16474:	mov	r5, r0
   16478:	movt	r1, #1
   1647c:	mov	r0, r6
   16480:	bl	112b8 <strcmp@plt>
   16484:	cmp	r0, #0
   16488:	bne	164a4 <__assert_fail@plt+0x4ebc>
   1648c:	movw	r1, #56895	; 0xde3f
   16490:	mov	r0, #0
   16494:	mov	r2, #5
   16498:	movt	r1, #1
   1649c:	bl	11354 <dcgettext@plt>
   164a0:	mov	r6, r0
   164a4:	mov	r0, #4
   164a8:	mov	r1, r6
   164ac:	bl	1a464 <__assert_fail@plt+0x8e7c>
   164b0:	mov	r3, r0
   164b4:	mov	r0, #0
   164b8:	mov	r1, #0
   164bc:	mov	r2, r5
   164c0:	bl	113f0 <error@plt>
   164c4:	ldr	r5, [r4]
   164c8:	ldr	r7, [r4, #48]	; 0x30
   164cc:	movw	r1, #56098	; 0xdb22
   164d0:	movt	r1, #1
   164d4:	mov	r0, r5
   164d8:	bl	112b8 <strcmp@plt>
   164dc:	cmp	r0, #0
   164e0:	bne	164fc <__assert_fail@plt+0x4f14>
   164e4:	movw	r1, #56895	; 0xde3f
   164e8:	mov	r0, #0
   164ec:	mov	r2, #5
   164f0:	movt	r1, #1
   164f4:	bl	11354 <dcgettext@plt>
   164f8:	mov	r5, r0
   164fc:	add	r0, r7, #1
   16500:	cmp	r0, #2
   16504:	bcc	165c8 <__assert_fail@plt+0x4fe0>
   16508:	mov	r0, r7
   1650c:	bl	115d0 <close@plt>
   16510:	cmp	r0, #0
   16514:	beq	165c8 <__assert_fail@plt+0x4fe0>
   16518:	bl	114b0 <__errno_location@plt>
   1651c:	ldr	r8, [r0]
   16520:	movw	r1, #57066	; 0xdeea
   16524:	mov	r0, #0
   16528:	mov	r2, #5
   1652c:	movt	r1, #1
   16530:	bl	11354 <dcgettext@plt>
   16534:	mov	r6, r0
   16538:	mov	r0, #4
   1653c:	mov	r1, r5
   16540:	bl	1a464 <__assert_fail@plt+0x8e7c>
   16544:	mov	r3, r0
   16548:	str	r7, [sp]
   1654c:	mov	r0, #0
   16550:	mov	r1, r8
   16554:	mov	r2, r6
   16558:	b	165c4 <__assert_fail@plt+0x4fdc>
   1655c:	movw	r1, #57662	; 0xe13e
   16560:	movt	r1, #1
   16564:	mov	r0, #0
   16568:	mov	r2, #5
   1656c:	bl	11354 <dcgettext@plt>
   16570:	ldr	r6, [r4]
   16574:	movw	r1, #56098	; 0xdb22
   16578:	mov	r5, r0
   1657c:	movt	r1, #1
   16580:	mov	r0, r6
   16584:	bl	112b8 <strcmp@plt>
   16588:	cmp	r0, #0
   1658c:	bne	165a8 <__assert_fail@plt+0x4fc0>
   16590:	movw	r1, #56895	; 0xde3f
   16594:	mov	r0, #0
   16598:	mov	r2, #5
   1659c:	movt	r1, #1
   165a0:	bl	11354 <dcgettext@plt>
   165a4:	mov	r6, r0
   165a8:	mov	r0, #4
   165ac:	mov	r1, r6
   165b0:	bl	1a464 <__assert_fail@plt+0x8e7c>
   165b4:	mov	r3, r0
   165b8:	mov	r0, #0
   165bc:	mov	r1, #0
   165c0:	mov	r2, r5
   165c4:	bl	113f0 <error@plt>
   165c8:	str	r9, [r4, #48]	; 0x30
   165cc:	mov	r5, #0
   165d0:	add	ip, r4, #16
   165d4:	ldr	r0, [sp, #96]	; 0x60
   165d8:	ldr	r1, [sp, #100]	; 0x64
   165dc:	ldr	r2, [sp, #16]
   165e0:	ldr	r3, [sp, #20]
   165e4:	ldr	r7, [sp, #112]	; 0x70
   165e8:	ldr	r6, [sp, #116]	; 0x74
   165ec:	str	r5, [r4, #8]
   165f0:	str	r5, [r4, #12]
   165f4:	stm	ip, {r0, r1, r2, r3, r7}
   165f8:	str	r6, [r4, #36]	; 0x24
   165fc:	ldr	r1, [sp, #12]
   16600:	ldr	r0, [sp, #32]
   16604:	str	r5, [r4, #72]	; 0x48
   16608:	str	r5, [r4, #76]	; 0x4c
   1660c:	cmp	r1, #0
   16610:	movw	r1, #56098	; 0xdb22
   16614:	mvneq	sl, #0
   16618:	movt	r1, #1
   1661c:	str	sl, [r4, #56]	; 0x38
   16620:	strb	r5, [r4, #44]	; 0x2c
   16624:	str	r0, [r4, #40]	; 0x28
   16628:	ldr	r4, [r4]
   1662c:	mov	r0, r4
   16630:	bl	112b8 <strcmp@plt>
   16634:	cmp	r0, #0
   16638:	bne	16654 <__assert_fail@plt+0x506c>
   1663c:	movw	r1, #56895	; 0xde3f
   16640:	mov	r0, #0
   16644:	mov	r2, #5
   16648:	movt	r1, #1
   1664c:	bl	11354 <dcgettext@plt>
   16650:	mov	r4, r0
   16654:	mov	r0, r9
   16658:	mov	r2, #0
   1665c:	mov	r3, #0
   16660:	str	r5, [sp]
   16664:	str	r4, [sp, #4]
   16668:	bl	15e1c <__assert_fail@plt+0x4834>
   1666c:	sub	sp, fp, #28
   16670:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16674:	movw	r0, #55014	; 0xd6e6
   16678:	movt	r0, #1
   1667c:	str	r0, [sp]
   16680:	mov	r0, #0
   16684:	mov	r1, #0
   16688:	mov	r2, r6
   1668c:	mov	r3, r7
   16690:	bl	113f0 <error@plt>
   16694:	ldr	r6, [r4]
   16698:	movw	r1, #56098	; 0xdb22
   1669c:	movt	r1, #1
   166a0:	mov	r0, r6
   166a4:	bl	112b8 <strcmp@plt>
   166a8:	cmp	r0, #0
   166ac:	beq	16710 <__assert_fail@plt+0x5128>
   166b0:	cmp	r5, #2
   166b4:	bcc	16730 <__assert_fail@plt+0x5148>
   166b8:	mov	r0, r9
   166bc:	bl	115d0 <close@plt>
   166c0:	cmp	r0, #0
   166c4:	beq	16730 <__assert_fail@plt+0x5148>
   166c8:	bl	114b0 <__errno_location@plt>
   166cc:	ldr	r7, [r0]
   166d0:	movw	r1, #57066	; 0xdeea
   166d4:	mov	r0, #0
   166d8:	mov	r2, #5
   166dc:	movt	r1, #1
   166e0:	bl	11354 <dcgettext@plt>
   166e4:	mov	r5, r0
   166e8:	mov	r0, #4
   166ec:	mov	r1, r6
   166f0:	bl	1a464 <__assert_fail@plt+0x8e7c>
   166f4:	mov	r3, r0
   166f8:	mov	r0, #0
   166fc:	mov	r1, r7
   16700:	mov	r2, r5
   16704:	str	r9, [sp]
   16708:	bl	113f0 <error@plt>
   1670c:	b	16730 <__assert_fail@plt+0x5148>
   16710:	movw	r1, #56895	; 0xde3f
   16714:	mov	r0, #0
   16718:	mov	r2, #5
   1671c:	movt	r1, #1
   16720:	bl	11354 <dcgettext@plt>
   16724:	mov	r6, r0
   16728:	cmp	r5, #2
   1672c:	bcs	166b8 <__assert_fail@plt+0x50d0>
   16730:	ldr	r6, [r4]
   16734:	ldr	r5, [r4, #48]	; 0x30
   16738:	movw	r1, #56098	; 0xdb22
   1673c:	movt	r1, #1
   16740:	mov	r0, r6
   16744:	bl	112b8 <strcmp@plt>
   16748:	cmp	r0, #0
   1674c:	beq	167c0 <__assert_fail@plt+0x51d8>
   16750:	add	r0, r5, #1
   16754:	cmp	r0, #2
   16758:	bcc	167e4 <__assert_fail@plt+0x51fc>
   1675c:	mov	r0, r5
   16760:	bl	115d0 <close@plt>
   16764:	cmp	r0, #0
   16768:	beq	167e4 <__assert_fail@plt+0x51fc>
   1676c:	bl	114b0 <__errno_location@plt>
   16770:	ldr	r8, [r0]
   16774:	movw	r1, #57066	; 0xdeea
   16778:	mov	r0, #0
   1677c:	mov	r2, #5
   16780:	movt	r1, #1
   16784:	bl	11354 <dcgettext@plt>
   16788:	mov	r7, r0
   1678c:	mov	r0, #4
   16790:	mov	r1, r6
   16794:	bl	1a464 <__assert_fail@plt+0x8e7c>
   16798:	mov	r3, r0
   1679c:	mov	r0, #0
   167a0:	mov	r1, r8
   167a4:	mov	r2, r7
   167a8:	str	r5, [sp]
   167ac:	bl	113f0 <error@plt>
   167b0:	mvn	r0, #0
   167b4:	str	r0, [r4, #48]	; 0x30
   167b8:	sub	sp, fp, #28
   167bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167c0:	movw	r1, #56895	; 0xde3f
   167c4:	mov	r0, #0
   167c8:	mov	r2, #5
   167cc:	movt	r1, #1
   167d0:	bl	11354 <dcgettext@plt>
   167d4:	mov	r6, r0
   167d8:	add	r0, r5, #1
   167dc:	cmp	r0, #2
   167e0:	bcs	1675c <__assert_fail@plt+0x5174>
   167e4:	mvn	r0, #0
   167e8:	str	r0, [r4, #48]	; 0x30
   167ec:	sub	sp, fp, #28
   167f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   167f4:	movw	r0, #57385	; 0xe029
   167f8:	movw	r1, #57139	; 0xdf33
   167fc:	movw	r3, #57405	; 0xe03d
   16800:	movw	r2, #994	; 0x3e2
   16804:	movt	r0, #1
   16808:	movt	r1, #1
   1680c:	movt	r3, #1
   16810:	bl	115e8 <__assert_fail@plt>
   16814:	movw	r0, #57625	; 0xe119
   16818:	movw	r1, #57139	; 0xdf33
   1681c:	movw	r3, #57405	; 0xe03d
   16820:	movw	r2, #1071	; 0x42f
   16824:	movt	r0, #1
   16828:	movt	r1, #1
   1682c:	movt	r3, #1
   16830:	bl	115e8 <__assert_fail@plt>
   16834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16838:	add	fp, sp, #28
   1683c:	sub	sp, sp, #116	; 0x74
   16840:	ldr	r7, [r0, #48]	; 0x30
   16844:	cmn	r7, #1
   16848:	beq	16a6c <__assert_fail@plt+0x5484>
   1684c:	ldr	r5, [r0]
   16850:	mov	sl, r1
   16854:	movw	r1, #56098	; 0xdb22
   16858:	mov	r4, r0
   1685c:	movt	r1, #1
   16860:	mov	r0, r5
   16864:	bl	112b8 <strcmp@plt>
   16868:	cmp	r0, #0
   1686c:	bne	1688c <__assert_fail@plt+0x52a4>
   16870:	movw	r1, #56895	; 0xde3f
   16874:	mov	r0, #0
   16878:	mov	r2, #5
   1687c:	movt	r1, #1
   16880:	bl	11354 <dcgettext@plt>
   16884:	ldr	r7, [r4, #48]	; 0x30
   16888:	mov	r5, r0
   1688c:	add	r2, sp, #8
   16890:	mov	r0, #3
   16894:	mov	r1, r7
   16898:	bl	113a8 <__fxstat64@plt>
   1689c:	cmp	r0, #0
   168a0:	beq	16924 <__assert_fail@plt+0x533c>
   168a4:	bl	114b0 <__errno_location@plt>
   168a8:	mov	r7, r0
   168ac:	ldr	r0, [r0]
   168b0:	str	r0, [r4, #52]	; 0x34
   168b4:	ldr	r6, [r4, #48]	; 0x30
   168b8:	add	r0, r6, #1
   168bc:	cmp	r0, #2
   168c0:	bcc	16914 <__assert_fail@plt+0x532c>
   168c4:	mov	r0, r6
   168c8:	bl	115d0 <close@plt>
   168cc:	cmp	r0, #0
   168d0:	beq	16914 <__assert_fail@plt+0x532c>
   168d4:	ldr	r8, [r7]
   168d8:	movw	r1, #57066	; 0xdeea
   168dc:	mov	r0, #0
   168e0:	mov	r2, #5
   168e4:	movt	r1, #1
   168e8:	bl	11354 <dcgettext@plt>
   168ec:	mov	r7, r0
   168f0:	mov	r0, #4
   168f4:	mov	r1, r5
   168f8:	bl	1a464 <__assert_fail@plt+0x8e7c>
   168fc:	mov	r3, r0
   16900:	mov	r0, #0
   16904:	mov	r1, r8
   16908:	mov	r2, r7
   1690c:	str	r6, [sp]
   16910:	bl	113f0 <error@plt>
   16914:	mvn	r0, #0
   16918:	str	r0, [r4, #48]	; 0x30
   1691c:	sub	sp, fp, #28
   16920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16924:	ldr	r0, [r4, #40]	; 0x28
   16928:	and	r0, r0, #61440	; 0xf000
   1692c:	cmp	r0, #32768	; 0x8000
   16930:	bne	169fc <__assert_fail@plt+0x5414>
   16934:	mov	r7, r4
   16938:	ldr	r2, [sp, #56]	; 0x38
   1693c:	ldr	r3, [sp, #60]	; 0x3c
   16940:	ldr	r0, [r7, #8]!
   16944:	ldr	r1, [r7, #4]
   16948:	subs	r6, r2, r0
   1694c:	sbcs	r6, r3, r1
   16950:	bge	169b8 <__assert_fail@plt+0x53d0>
   16954:	movw	r1, #57741	; 0xe18d
   16958:	mov	r0, #0
   1695c:	mov	r2, #5
   16960:	mov	r9, #0
   16964:	movt	r1, #1
   16968:	bl	11354 <dcgettext@plt>
   1696c:	mov	r8, r0
   16970:	mov	r0, #0
   16974:	mov	r1, #3
   16978:	mov	r2, r5
   1697c:	bl	1a6e0 <__assert_fail@plt+0x90f8>
   16980:	mov	r3, r0
   16984:	mov	r0, #0
   16988:	mov	r1, #0
   1698c:	mov	r2, r8
   16990:	bl	113f0 <error@plt>
   16994:	ldr	r0, [r4, #48]	; 0x30
   16998:	mov	r2, #0
   1699c:	mov	r3, #0
   169a0:	str	r9, [sp]
   169a4:	str	r5, [sp, #4]
   169a8:	bl	15e1c <__assert_fail@plt+0x4834>
   169ac:	str	r9, [r7]
   169b0:	str	r9, [r7, #4]
   169b4:	b	169fc <__assert_fail@plt+0x5414>
   169b8:	eor	r0, r2, r0
   169bc:	eor	r1, r3, r1
   169c0:	orrs	r0, r0, r1
   169c4:	bne	169fc <__assert_fail@plt+0x5414>
   169c8:	ldrd	r0, [r4, #16]
   169cc:	ldr	r2, [sp, #88]	; 0x58
   169d0:	ldr	r3, [sp, #92]	; 0x5c
   169d4:	mov	r7, #0
   169d8:	cmp	r0, r2
   169dc:	mov	r0, #0
   169e0:	movwgt	r0, #1
   169e4:	sublt	r0, r0, #1
   169e8:	cmp	r1, r3
   169ec:	movwgt	r7, #1
   169f0:	sublt	r7, r7, #1
   169f4:	cmn	r7, r0, lsl #1
   169f8:	beq	16a6c <__assert_fail@plt+0x5484>
   169fc:	movw	r0, #61888	; 0xf1c0
   16a00:	movt	r0, #2
   16a04:	ldrb	r1, [r0, #2]
   16a08:	mov	r0, #0
   16a0c:	cmp	r1, #1
   16a10:	bne	16a20 <__assert_fail@plt+0x5438>
   16a14:	ldr	r0, [sl]
   16a18:	subs	r0, r0, r4
   16a1c:	movwne	r0, #1
   16a20:	ldr	r2, [r4, #48]	; 0x30
   16a24:	mvn	r1, #0
   16a28:	str	r1, [sp]
   16a2c:	str	r1, [sp, #4]
   16a30:	mov	r1, r5
   16a34:	bl	15b00 <__assert_fail@plt+0x4518>
   16a38:	ldrd	r2, [r4, #8]
   16a3c:	adds	r2, r2, r0
   16a40:	adc	r3, r3, r1
   16a44:	orrs	r0, r0, r1
   16a48:	strd	r2, [r4, #8]
   16a4c:	beq	16a6c <__assert_fail@plt+0x5484>
   16a50:	movw	r0, #61876	; 0xf1b4
   16a54:	str	r4, [sl]
   16a58:	movt	r0, #2
   16a5c:	ldr	r0, [r0]
   16a60:	bl	11384 <fflush_unlocked@plt>
   16a64:	cmp	r0, #0
   16a68:	bne	16a74 <__assert_fail@plt+0x548c>
   16a6c:	sub	sp, fp, #28
   16a70:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a74:	bl	114b0 <__errno_location@plt>
   16a78:	ldr	r4, [r0]
   16a7c:	movw	r1, #55584	; 0xd920
   16a80:	mov	r0, #0
   16a84:	mov	r2, #5
   16a88:	movt	r1, #1
   16a8c:	bl	11354 <dcgettext@plt>
   16a90:	mov	r2, r0
   16a94:	mov	r0, #1
   16a98:	mov	r1, r4
   16a9c:	bl	113f0 <error@plt>
   16aa0:	push	{fp, lr}
   16aa4:	mov	fp, sp
   16aa8:	mov	r0, #13
   16aac:	bl	112ac <raise@plt>
   16ab0:	mov	r0, #1
   16ab4:	bl	11468 <exit@plt>
   16ab8:	mov	r0, #1
   16abc:	b	116e8 <__assert_fail@plt+0x100>
   16ac0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ac4:	add	fp, sp, #28
   16ac8:	sub	sp, sp, #12
   16acc:	mov	r4, r3
   16ad0:	mov	r9, r2
   16ad4:	mov	r7, r1
   16ad8:	mov	r8, r0
   16adc:	bl	11474 <strlen@plt>
   16ae0:	ldr	r6, [r7]
   16ae4:	cmp	r6, #0
   16ae8:	beq	16b94 <__assert_fail@plt+0x55ac>
   16aec:	mov	r5, r0
   16af0:	cmp	r9, #0
   16af4:	beq	16ba4 <__assert_fail@plt+0x55bc>
   16af8:	add	r0, r7, #4
   16afc:	mvn	sl, #0
   16b00:	mov	r7, #0
   16b04:	str	r9, [sp]
   16b08:	str	r0, [sp, #8]
   16b0c:	mov	r0, #0
   16b10:	str	r0, [sp, #4]
   16b14:	mov	r0, r9
   16b18:	mov	r0, r6
   16b1c:	mov	r1, r8
   16b20:	mov	r2, r5
   16b24:	bl	115b8 <strncmp@plt>
   16b28:	cmp	r0, #0
   16b2c:	bne	16b78 <__assert_fail@plt+0x5590>
   16b30:	mov	r0, r6
   16b34:	bl	11474 <strlen@plt>
   16b38:	cmp	r0, r5
   16b3c:	beq	16b98 <__assert_fail@plt+0x55b0>
   16b40:	cmn	sl, #1
   16b44:	beq	16b74 <__assert_fail@plt+0x558c>
   16b48:	ldr	r0, [sp]
   16b4c:	mov	r1, r9
   16b50:	mov	r2, r4
   16b54:	mla	r0, sl, r4, r0
   16b58:	bl	11348 <memcmp@plt>
   16b5c:	ldr	r1, [sp, #4]
   16b60:	cmp	r0, #0
   16b64:	movwne	r0, #1
   16b68:	orr	r1, r1, r0
   16b6c:	str	r1, [sp, #4]
   16b70:	b	16b78 <__assert_fail@plt+0x5590>
   16b74:	mov	sl, r7
   16b78:	ldr	r0, [sp, #8]
   16b7c:	add	r9, r9, r4
   16b80:	ldr	r6, [r0, r7, lsl #2]
   16b84:	add	r7, r7, #1
   16b88:	cmp	r6, #0
   16b8c:	bne	16b18 <__assert_fail@plt+0x5530>
   16b90:	b	16c0c <__assert_fail@plt+0x5624>
   16b94:	mvn	r7, #0
   16b98:	mov	r0, r7
   16b9c:	sub	sp, fp, #28
   16ba0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16ba4:	add	r4, r7, #4
   16ba8:	mov	r0, #0
   16bac:	mvn	sl, #0
   16bb0:	mov	r7, #0
   16bb4:	str	r0, [sp, #4]
   16bb8:	mov	r0, r6
   16bbc:	mov	r1, r8
   16bc0:	mov	r2, r5
   16bc4:	bl	115b8 <strncmp@plt>
   16bc8:	cmp	r0, #0
   16bcc:	bne	16bfc <__assert_fail@plt+0x5614>
   16bd0:	mov	r0, r6
   16bd4:	bl	11474 <strlen@plt>
   16bd8:	cmp	r0, r5
   16bdc:	beq	16b98 <__assert_fail@plt+0x55b0>
   16be0:	ldr	r1, [sp, #4]
   16be4:	cmn	sl, #1
   16be8:	add	r0, sl, #1
   16bec:	movwne	r0, #1
   16bf0:	moveq	sl, r7
   16bf4:	orr	r1, r1, r0
   16bf8:	str	r1, [sp, #4]
   16bfc:	ldr	r6, [r4, r7, lsl #2]
   16c00:	add	r7, r7, #1
   16c04:	cmp	r6, #0
   16c08:	bne	16bb8 <__assert_fail@plt+0x55d0>
   16c0c:	ldr	r0, [sp, #4]
   16c10:	tst	r0, #1
   16c14:	mvnne	sl, #1
   16c18:	mov	r0, sl
   16c1c:	sub	sp, fp, #28
   16c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c24:	push	{r4, r5, r6, r7, fp, lr}
   16c28:	add	fp, sp, #16
   16c2c:	mov	r5, r0
   16c30:	ldr	r0, [r1]
   16c34:	mvn	r4, #0
   16c38:	cmp	r0, #0
   16c3c:	beq	16c6c <__assert_fail@plt+0x5684>
   16c40:	add	r7, r1, #4
   16c44:	mov	r6, #0
   16c48:	mov	r1, r5
   16c4c:	bl	112b8 <strcmp@plt>
   16c50:	cmp	r0, #0
   16c54:	moveq	r0, r6
   16c58:	popeq	{r4, r5, r6, r7, fp, pc}
   16c5c:	ldr	r0, [r7, r6, lsl #2]
   16c60:	add	r6, r6, #1
   16c64:	cmp	r0, #0
   16c68:	bne	16c48 <__assert_fail@plt+0x5660>
   16c6c:	mov	r0, r4
   16c70:	pop	{r4, r5, r6, r7, fp, pc}
   16c74:	push	{r4, r5, r6, sl, fp, lr}
   16c78:	add	fp, sp, #16
   16c7c:	sub	sp, sp, #8
   16c80:	mov	r4, r1
   16c84:	movw	r1, #58206	; 0xe35e
   16c88:	mov	r5, r0
   16c8c:	movw	r0, #58179	; 0xe343
   16c90:	cmn	r2, #1
   16c94:	mov	r2, #5
   16c98:	movt	r0, #1
   16c9c:	movt	r1, #1
   16ca0:	moveq	r1, r0
   16ca4:	mov	r0, #0
   16ca8:	bl	11354 <dcgettext@plt>
   16cac:	mov	r6, r0
   16cb0:	mov	r0, #0
   16cb4:	mov	r1, #8
   16cb8:	mov	r2, r4
   16cbc:	bl	1a3bc <__assert_fail@plt+0x8dd4>
   16cc0:	mov	r4, r0
   16cc4:	mov	r0, #1
   16cc8:	mov	r1, r5
   16ccc:	bl	1a97c <__assert_fail@plt+0x9394>
   16cd0:	str	r0, [sp]
   16cd4:	mov	r0, #0
   16cd8:	mov	r1, #0
   16cdc:	mov	r2, r6
   16ce0:	mov	r3, r4
   16ce4:	bl	113f0 <error@plt>
   16ce8:	sub	sp, fp, #16
   16cec:	pop	{r4, r5, r6, sl, fp, pc}
   16cf0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16cf4:	add	fp, sp, #28
   16cf8:	sub	sp, sp, #4
   16cfc:	mov	r5, r1
   16d00:	movw	r1, #58235	; 0xe37b
   16d04:	mov	sl, r2
   16d08:	mov	r7, r0
   16d0c:	mov	r0, #0
   16d10:	mov	r2, #5
   16d14:	mov	r8, #0
   16d18:	movt	r1, #1
   16d1c:	bl	11354 <dcgettext@plt>
   16d20:	movw	r4, #61872	; 0xf1b0
   16d24:	movt	r4, #2
   16d28:	ldr	r1, [r4]
   16d2c:	bl	112a0 <fputs_unlocked@plt>
   16d30:	ldr	r6, [r7]
   16d34:	cmp	r6, #0
   16d38:	beq	16dd8 <__assert_fail@plt+0x57f0>
   16d3c:	add	r9, r7, #4
   16d40:	mov	r7, #0
   16d44:	str	sl, [sp]
   16d48:	cmp	r8, #0
   16d4c:	beq	16d68 <__assert_fail@plt+0x5780>
   16d50:	mov	r0, r7
   16d54:	mov	r1, r5
   16d58:	mov	r2, sl
   16d5c:	bl	11348 <memcmp@plt>
   16d60:	cmp	r0, #0
   16d64:	beq	16d94 <__assert_fail@plt+0x57ac>
   16d68:	ldr	r7, [r4]
   16d6c:	mov	r0, r6
   16d70:	bl	1a98c <__assert_fail@plt+0x93a4>
   16d74:	movw	r2, #58256	; 0xe390
   16d78:	mov	r3, r0
   16d7c:	mov	r0, r7
   16d80:	mov	r1, #1
   16d84:	movt	r2, #1
   16d88:	bl	114f8 <__fprintf_chk@plt>
   16d8c:	mov	r7, r5
   16d90:	b	16dc4 <__assert_fail@plt+0x57dc>
   16d94:	mov	sl, r9
   16d98:	ldr	r9, [r4]
   16d9c:	mov	r0, r6
   16da0:	bl	1a98c <__assert_fail@plt+0x93a4>
   16da4:	mov	r3, r0
   16da8:	mov	r0, r9
   16dac:	mov	r9, sl
   16db0:	ldr	sl, [sp]
   16db4:	movw	r2, #58264	; 0xe398
   16db8:	mov	r1, #1
   16dbc:	movt	r2, #1
   16dc0:	bl	114f8 <__fprintf_chk@plt>
   16dc4:	ldr	r6, [r9, -r8, lsl #2]
   16dc8:	add	r5, r5, sl
   16dcc:	sub	r8, r8, #1
   16dd0:	cmp	r6, #0
   16dd4:	bne	16d48 <__assert_fail@plt+0x5760>
   16dd8:	ldr	r0, [r4]
   16ddc:	ldr	r1, [r0, #20]
   16de0:	ldr	r2, [r0, #24]
   16de4:	cmp	r1, r2
   16de8:	addcc	r2, r1, #1
   16dec:	strcc	r2, [r0, #20]
   16df0:	movcc	r0, #10
   16df4:	strbcc	r0, [r1]
   16df8:	subcc	sp, fp, #28
   16dfc:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e00:	mov	r1, #10
   16e04:	sub	sp, fp, #28
   16e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e0c:	b	11540 <__overflow@plt>
   16e10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e14:	add	fp, sp, #28
   16e18:	sub	sp, sp, #12
   16e1c:	mov	sl, r0
   16e20:	ldr	r0, [fp, #16]
   16e24:	ldr	r9, [fp, #8]
   16e28:	mov	r5, r3
   16e2c:	mov	r8, r2
   16e30:	mov	r6, r1
   16e34:	cmp	r0, #0
   16e38:	beq	16e68 <__assert_fail@plt+0x5880>
   16e3c:	mov	r0, r6
   16e40:	mov	r1, r8
   16e44:	mov	r2, r5
   16e48:	mov	r3, r9
   16e4c:	bl	16ac0 <__assert_fail@plt+0x54d8>
   16e50:	mov	r4, r0
   16e54:	cmn	r4, #1
   16e58:	ble	16eb8 <__assert_fail@plt+0x58d0>
   16e5c:	mov	r0, r4
   16e60:	sub	sp, fp, #28
   16e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e68:	ldr	r0, [r8]
   16e6c:	movw	r7, #58179	; 0xe343
   16e70:	str	r5, [sp, #8]
   16e74:	movt	r7, #1
   16e78:	cmp	r0, #0
   16e7c:	beq	16ed0 <__assert_fail@plt+0x58e8>
   16e80:	add	r5, r8, #4
   16e84:	mov	r4, #0
   16e88:	mov	r1, r6
   16e8c:	bl	112b8 <strcmp@plt>
   16e90:	cmp	r0, #0
   16e94:	beq	16eac <__assert_fail@plt+0x58c4>
   16e98:	ldr	r0, [r5, r4, lsl #2]
   16e9c:	add	r4, r4, #1
   16ea0:	cmp	r0, #0
   16ea4:	bne	16e88 <__assert_fail@plt+0x58a0>
   16ea8:	b	16ed0 <__assert_fail@plt+0x58e8>
   16eac:	ldr	r5, [sp, #8]
   16eb0:	cmn	r4, #1
   16eb4:	bgt	16e5c <__assert_fail@plt+0x5874>
   16eb8:	movw	r0, #58179	; 0xe343
   16ebc:	movw	r7, #58206	; 0xe35e
   16ec0:	str	r5, [sp, #8]
   16ec4:	movt	r0, #1
   16ec8:	movt	r7, #1
   16ecc:	moveq	r7, r0
   16ed0:	ldr	r5, [fp, #12]
   16ed4:	mov	r0, #0
   16ed8:	mov	r1, r7
   16edc:	mov	r2, #5
   16ee0:	bl	11354 <dcgettext@plt>
   16ee4:	mov	r4, r0
   16ee8:	mov	r0, #0
   16eec:	mov	r1, #8
   16ef0:	mov	r2, r6
   16ef4:	bl	1a3bc <__assert_fail@plt+0x8dd4>
   16ef8:	mov	r6, r0
   16efc:	mov	r0, #1
   16f00:	mov	r1, sl
   16f04:	bl	1a97c <__assert_fail@plt+0x9394>
   16f08:	str	r0, [sp]
   16f0c:	mov	r0, #0
   16f10:	mov	r1, #0
   16f14:	mov	r2, r4
   16f18:	mov	r3, r6
   16f1c:	bl	113f0 <error@plt>
   16f20:	ldr	r1, [sp, #8]
   16f24:	mov	r0, r8
   16f28:	mov	r2, r9
   16f2c:	bl	16cf0 <__assert_fail@plt+0x5708>
   16f30:	blx	r5
   16f34:	mvn	r4, #0
   16f38:	mov	r0, r4
   16f3c:	sub	sp, fp, #28
   16f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f44:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16f48:	add	fp, sp, #24
   16f4c:	ldr	r6, [r1]
   16f50:	cmp	r6, #0
   16f54:	beq	16fb8 <__assert_fail@plt+0x59d0>
   16f58:	mov	r8, r1
   16f5c:	mov	r7, r2
   16f60:	mov	r1, r2
   16f64:	mov	r2, r3
   16f68:	mov	r4, r3
   16f6c:	mov	r9, r0
   16f70:	bl	11348 <memcmp@plt>
   16f74:	cmp	r0, #0
   16f78:	beq	16fb0 <__assert_fail@plt+0x59c8>
   16f7c:	add	r7, r7, r4
   16f80:	add	r5, r8, #4
   16f84:	ldr	r6, [r5]
   16f88:	cmp	r6, #0
   16f8c:	beq	16fb8 <__assert_fail@plt+0x59d0>
   16f90:	mov	r0, r9
   16f94:	mov	r1, r7
   16f98:	mov	r2, r4
   16f9c:	bl	11348 <memcmp@plt>
   16fa0:	add	r7, r7, r4
   16fa4:	add	r5, r5, #4
   16fa8:	cmp	r0, #0
   16fac:	bne	16f84 <__assert_fail@plt+0x599c>
   16fb0:	mov	r0, r6
   16fb4:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fb8:	mov	r6, #0
   16fbc:	mov	r0, r6
   16fc0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16fc4:	sub	r0, r0, #1
   16fc8:	ldrb	r3, [r0, #1]!
   16fcc:	cmp	r3, #47	; 0x2f
   16fd0:	beq	16fc8 <__assert_fail@plt+0x59e0>
   16fd4:	mov	r2, #0
   16fd8:	mov	r1, r0
   16fdc:	uxtb	r3, r3
   16fe0:	cmp	r3, #47	; 0x2f
   16fe4:	beq	1700c <__assert_fail@plt+0x5a24>
   16fe8:	cmp	r3, #0
   16fec:	bxeq	lr
   16ff0:	tst	r2, #1
   16ff4:	mov	r2, #0
   16ff8:	movne	r0, r1
   16ffc:	ldrb	r3, [r1, #1]!
   17000:	uxtb	r3, r3
   17004:	cmp	r3, #47	; 0x2f
   17008:	bne	16fe8 <__assert_fail@plt+0x5a00>
   1700c:	ldrb	r3, [r1, #1]!
   17010:	mov	r2, #1
   17014:	uxtb	r3, r3
   17018:	cmp	r3, #47	; 0x2f
   1701c:	bne	16fe8 <__assert_fail@plt+0x5a00>
   17020:	b	1700c <__assert_fail@plt+0x5a24>
   17024:	push	{r4, sl, fp, lr}
   17028:	add	fp, sp, #8
   1702c:	mov	r4, r0
   17030:	bl	11474 <strlen@plt>
   17034:	mov	r1, r0
   17038:	sub	r2, r4, #1
   1703c:	mov	r0, r1
   17040:	cmp	r1, #2
   17044:	popcc	{r4, sl, fp, pc}
   17048:	ldrb	r3, [r2, r0]
   1704c:	sub	r1, r0, #1
   17050:	cmp	r3, #47	; 0x2f
   17054:	beq	1703c <__assert_fail@plt+0x5a54>
   17058:	pop	{r4, sl, fp, pc}
   1705c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17060:	add	fp, sp, #24
   17064:	vpush	{d8}
   17068:	sub	sp, sp, #8
   1706c:	mov	r4, r1
   17070:	add	r1, sp, #4
   17074:	mov	r5, r0
   17078:	bl	114e0 <strtod@plt>
   1707c:	ldr	r7, [sp, #4]
   17080:	vmov.f64	d8, d0
   17084:	ldrb	r0, [r7]
   17088:	cmp	r0, #0
   1708c:	beq	170c8 <__assert_fail@plt+0x5ae0>
   17090:	bl	114b0 <__errno_location@plt>
   17094:	ldr	r8, [r0]
   17098:	mov	r6, r0
   1709c:	mov	r1, sp
   170a0:	mov	r0, r5
   170a4:	bl	1c6a8 <__assert_fail@plt+0xb0c0>
   170a8:	ldr	r0, [sp]
   170ac:	cmp	r7, r0
   170b0:	bcs	170c4 <__assert_fail@plt+0x5adc>
   170b4:	str	r0, [sp, #4]
   170b8:	mov	r7, r0
   170bc:	vmov.f64	d8, d0
   170c0:	b	170c8 <__assert_fail@plt+0x5ae0>
   170c4:	str	r8, [r6]
   170c8:	cmp	r4, #0
   170cc:	vmov.f64	d0, d8
   170d0:	strne	r7, [r4]
   170d4:	sub	sp, fp, #32
   170d8:	vpop	{d8}
   170dc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   170e0:	movw	r1, #61904	; 0xf1d0
   170e4:	movt	r1, #2
   170e8:	str	r0, [r1, #4]
   170ec:	bx	lr
   170f0:	movw	r1, #61904	; 0xf1d0
   170f4:	movt	r1, #2
   170f8:	strb	r0, [r1]
   170fc:	bx	lr
   17100:	push	{r4, r5, r6, sl, fp, lr}
   17104:	add	fp, sp, #16
   17108:	sub	sp, sp, #8
   1710c:	movw	r0, #61876	; 0xf1b4
   17110:	movt	r0, #2
   17114:	ldr	r0, [r0]
   17118:	bl	1c71c <__assert_fail@plt+0xb134>
   1711c:	cmp	r0, #0
   17120:	beq	17148 <__assert_fail@plt+0x5b60>
   17124:	movw	r5, #61904	; 0xf1d0
   17128:	movt	r5, #2
   1712c:	ldrb	r0, [r5]
   17130:	cmp	r0, #0
   17134:	beq	17174 <__assert_fail@plt+0x5b8c>
   17138:	bl	114b0 <__errno_location@plt>
   1713c:	ldr	r0, [r0]
   17140:	cmp	r0, #32
   17144:	bne	17174 <__assert_fail@plt+0x5b8c>
   17148:	movw	r0, #61872	; 0xf1b0
   1714c:	movt	r0, #2
   17150:	ldr	r0, [r0]
   17154:	bl	1c71c <__assert_fail@plt+0xb134>
   17158:	cmp	r0, #0
   1715c:	subeq	sp, fp, #16
   17160:	popeq	{r4, r5, r6, sl, fp, pc}
   17164:	movw	r0, #61784	; 0xf158
   17168:	movt	r0, #2
   1716c:	ldr	r0, [r0]
   17170:	bl	1130c <_exit@plt>
   17174:	movw	r1, #55584	; 0xd920
   17178:	mov	r0, #0
   1717c:	mov	r2, #5
   17180:	movt	r1, #1
   17184:	bl	11354 <dcgettext@plt>
   17188:	ldr	r6, [r5, #4]
   1718c:	mov	r4, r0
   17190:	bl	114b0 <__errno_location@plt>
   17194:	ldr	r5, [r0]
   17198:	cmp	r6, #0
   1719c:	bne	171b8 <__assert_fail@plt+0x5bd0>
   171a0:	movw	r2, #58266	; 0xe39a
   171a4:	mov	r0, #0
   171a8:	mov	r1, r5
   171ac:	mov	r3, r4
   171b0:	movt	r2, #1
   171b4:	b	171d8 <__assert_fail@plt+0x5bf0>
   171b8:	mov	r0, r6
   171bc:	bl	1a604 <__assert_fail@plt+0x901c>
   171c0:	movw	r2, #56102	; 0xdb26
   171c4:	mov	r3, r0
   171c8:	str	r4, [sp]
   171cc:	mov	r0, #0
   171d0:	mov	r1, r5
   171d4:	movt	r2, #1
   171d8:	bl	113f0 <error@plt>
   171dc:	movw	r0, #61784	; 0xf158
   171e0:	movt	r0, #2
   171e4:	ldr	r0, [r0]
   171e8:	bl	1130c <_exit@plt>
   171ec:	push	{r4, r5, r6, sl, fp, lr}
   171f0:	add	fp, sp, #16
   171f4:	mov	r5, r0
   171f8:	mov	r4, r0
   171fc:	ldrb	r6, [r5], #-1
   17200:	bl	16fc4 <__assert_fail@plt+0x59dc>
   17204:	sub	r2, r0, r4
   17208:	sub	r0, r6, #47	; 0x2f
   1720c:	clz	r0, r0
   17210:	lsr	r1, r0, #5
   17214:	mov	r0, r2
   17218:	cmp	r2, r1
   1721c:	popls	{r4, r5, r6, sl, fp, pc}
   17220:	ldrb	r3, [r5, r0]
   17224:	sub	r2, r0, #1
   17228:	cmp	r3, #47	; 0x2f
   1722c:	beq	17214 <__assert_fail@plt+0x5c2c>
   17230:	pop	{r4, r5, r6, sl, fp, pc}
   17234:	push	{r4, r5, r6, sl, fp, lr}
   17238:	add	fp, sp, #16
   1723c:	mov	r6, r0
   17240:	mov	r4, r0
   17244:	ldrb	r5, [r6], #-1
   17248:	bl	16fc4 <__assert_fail@plt+0x59dc>
   1724c:	sub	r1, r0, r4
   17250:	sub	r0, r5, #47	; 0x2f
   17254:	clz	r0, r0
   17258:	lsr	r0, r0, #5
   1725c:	mov	r5, r1
   17260:	cmp	r1, r0
   17264:	bls	17278 <__assert_fail@plt+0x5c90>
   17268:	ldrb	r2, [r6, r5]
   1726c:	sub	r1, r5, #1
   17270:	cmp	r2, #47	; 0x2f
   17274:	beq	1725c <__assert_fail@plt+0x5c74>
   17278:	cmp	r5, #0
   1727c:	mov	r0, r5
   17280:	addeq	r0, r0, #1
   17284:	add	r0, r0, #1
   17288:	bl	1c624 <__assert_fail@plt+0xb03c>
   1728c:	mov	r6, r0
   17290:	cmp	r0, #0
   17294:	beq	172c0 <__assert_fail@plt+0x5cd8>
   17298:	mov	r0, r6
   1729c:	mov	r1, r4
   172a0:	mov	r2, r5
   172a4:	bl	11318 <memcpy@plt>
   172a8:	cmp	r5, #0
   172ac:	moveq	r0, #46	; 0x2e
   172b0:	moveq	r5, #1
   172b4:	strbeq	r0, [r6]
   172b8:	mov	r0, #0
   172bc:	strb	r0, [r6, r5]
   172c0:	mov	r0, r6
   172c4:	pop	{r4, r5, r6, sl, fp, pc}
   172c8:	sub	sp, sp, #8
   172cc:	push	{r4, r5, r6, r7, fp, lr}
   172d0:	add	fp, sp, #16
   172d4:	sub	sp, sp, #8
   172d8:	mov	r5, r0
   172dc:	add	r0, fp, #8
   172e0:	cmp	r1, #11
   172e4:	str	r3, [fp, #12]
   172e8:	str	r2, [fp, #8]
   172ec:	str	r0, [sp, #4]
   172f0:	bhi	1732c <__assert_fail@plt+0x5d44>
   172f4:	mov	r0, #1
   172f8:	movw	r2, #1300	; 0x514
   172fc:	tst	r2, r0, lsl r1
   17300:	bne	173ec <__assert_fail@plt+0x5e04>
   17304:	movw	r2, #2570	; 0xa0a
   17308:	tst	r2, r0, lsl r1
   1730c:	bne	17354 <__assert_fail@plt+0x5d6c>
   17310:	cmp	r1, #0
   17314:	bne	1732c <__assert_fail@plt+0x5d44>
   17318:	ldr	r0, [sp, #4]
   1731c:	add	r1, r0, #4
   17320:	str	r1, [sp, #4]
   17324:	mov	r1, #0
   17328:	b	173f8 <__assert_fail@plt+0x5e10>
   1732c:	sub	r0, r1, #1024	; 0x400
   17330:	cmp	r0, #10
   17334:	bhi	173ec <__assert_fail@plt+0x5e04>
   17338:	mov	r2, #1
   1733c:	movw	r3, #645	; 0x285
   17340:	tst	r3, r2, lsl r0
   17344:	bne	173ec <__assert_fail@plt+0x5e04>
   17348:	movw	r3, #1282	; 0x502
   1734c:	tst	r3, r2, lsl r0
   17350:	beq	17360 <__assert_fail@plt+0x5d78>
   17354:	mov	r0, r5
   17358:	bl	11534 <fcntl64@plt>
   1735c:	b	17404 <__assert_fail@plt+0x5e1c>
   17360:	cmp	r0, #6
   17364:	bne	173ec <__assert_fail@plt+0x5e04>
   17368:	ldr	r0, [sp, #4]
   1736c:	movw	r7, #61912	; 0xf1d8
   17370:	movt	r7, #2
   17374:	add	r1, r0, #4
   17378:	str	r1, [sp, #4]
   1737c:	ldr	r6, [r0]
   17380:	ldr	r0, [r7]
   17384:	cmp	r0, #0
   17388:	blt	17428 <__assert_fail@plt+0x5e40>
   1738c:	mov	r0, r5
   17390:	movw	r1, #1030	; 0x406
   17394:	mov	r2, r6
   17398:	bl	11534 <fcntl64@plt>
   1739c:	mov	r4, r0
   173a0:	cmn	r0, #1
   173a4:	bgt	1741c <__assert_fail@plt+0x5e34>
   173a8:	bl	114b0 <__errno_location@plt>
   173ac:	ldr	r0, [r0]
   173b0:	cmp	r0, #22
   173b4:	bne	1741c <__assert_fail@plt+0x5e34>
   173b8:	mov	r0, r5
   173bc:	mov	r1, #0
   173c0:	mov	r2, r6
   173c4:	bl	11534 <fcntl64@plt>
   173c8:	mov	r4, r0
   173cc:	cmp	r0, #0
   173d0:	blt	17408 <__assert_fail@plt+0x5e20>
   173d4:	mvn	r0, #0
   173d8:	str	r0, [r7]
   173dc:	mov	r0, #1
   173e0:	cmp	r0, #0
   173e4:	bne	17454 <__assert_fail@plt+0x5e6c>
   173e8:	b	17408 <__assert_fail@plt+0x5e20>
   173ec:	ldr	r0, [sp, #4]
   173f0:	add	r2, r0, #4
   173f4:	str	r2, [sp, #4]
   173f8:	ldr	r2, [r0]
   173fc:	mov	r0, r5
   17400:	bl	11534 <fcntl64@plt>
   17404:	mov	r4, r0
   17408:	mov	r0, r4
   1740c:	sub	sp, fp, #16
   17410:	pop	{r4, r5, r6, r7, fp, lr}
   17414:	add	sp, sp, #8
   17418:	bx	lr
   1741c:	mov	r0, #1
   17420:	str	r0, [r7]
   17424:	b	17408 <__assert_fail@plt+0x5e20>
   17428:	mov	r0, r5
   1742c:	mov	r1, #0
   17430:	mov	r2, r6
   17434:	bl	11534 <fcntl64@plt>
   17438:	mov	r4, r0
   1743c:	ldr	r0, [r7]
   17440:	add	r0, r0, #1
   17444:	clz	r0, r0
   17448:	lsr	r0, r0, #5
   1744c:	cmp	r0, #0
   17450:	beq	17408 <__assert_fail@plt+0x5e20>
   17454:	cmp	r4, #0
   17458:	blt	17408 <__assert_fail@plt+0x5e20>
   1745c:	mov	r0, r4
   17460:	mov	r1, #1
   17464:	bl	11534 <fcntl64@plt>
   17468:	cmp	r0, #0
   1746c:	blt	17488 <__assert_fail@plt+0x5ea0>
   17470:	orr	r2, r0, #1
   17474:	mov	r0, r4
   17478:	mov	r1, #2
   1747c:	bl	11534 <fcntl64@plt>
   17480:	cmn	r0, #1
   17484:	bne	17408 <__assert_fail@plt+0x5e20>
   17488:	bl	114b0 <__errno_location@plt>
   1748c:	ldr	r6, [r0]
   17490:	mov	r5, r0
   17494:	mov	r0, r4
   17498:	bl	115d0 <close@plt>
   1749c:	str	r6, [r5]
   174a0:	mvn	r4, #0
   174a4:	b	17408 <__assert_fail@plt+0x5e20>
   174a8:	sub	sp, sp, #8
   174ac:	push	{fp, lr}
   174b0:	mov	fp, sp
   174b4:	sub	sp, sp, #8
   174b8:	str	r2, [fp, #8]
   174bc:	mov	r2, #0
   174c0:	tst	r1, #64	; 0x40
   174c4:	str	r3, [fp, #12]
   174c8:	addne	r2, fp, #8
   174cc:	orrne	r2, r2, #4
   174d0:	strne	r2, [sp, #4]
   174d4:	ldrne	r2, [fp, #8]
   174d8:	bl	113fc <open64@plt>
   174dc:	bl	1aa08 <__assert_fail@plt+0x9420>
   174e0:	mov	sp, fp
   174e4:	pop	{fp, lr}
   174e8:	add	sp, sp, #8
   174ec:	bx	lr
   174f0:	push	{r4, r5, r6, sl, fp, lr}
   174f4:	add	fp, sp, #16
   174f8:	mov	r4, r0
   174fc:	bl	114b0 <__errno_location@plt>
   17500:	ldr	r6, [r0]
   17504:	mov	r5, r0
   17508:	mov	r0, r4
   1750c:	bl	112f4 <free@plt>
   17510:	str	r6, [r5]
   17514:	pop	{r4, r5, r6, sl, fp, pc}
   17518:	ldr	r0, [r0, #8]
   1751c:	bx	lr
   17520:	ldr	r0, [r0, #12]
   17524:	bx	lr
   17528:	ldr	r0, [r0, #16]
   1752c:	bx	lr
   17530:	ldm	r0, {r2, ip}
   17534:	mov	r0, #0
   17538:	cmp	r2, ip
   1753c:	bxcs	lr
   17540:	mov	r0, #0
   17544:	ldr	r1, [r2]
   17548:	cmp	r1, #0
   1754c:	beq	17570 <__assert_fail@plt+0x5f88>
   17550:	mov	r3, #0
   17554:	mov	r1, r2
   17558:	ldr	r1, [r1, #4]
   1755c:	add	r3, r3, #1
   17560:	cmp	r1, #0
   17564:	bne	17558 <__assert_fail@plt+0x5f70>
   17568:	cmp	r3, r0
   1756c:	movhi	r0, r3
   17570:	add	r2, r2, #8
   17574:	cmp	r2, ip
   17578:	bcc	17544 <__assert_fail@plt+0x5f5c>
   1757c:	bx	lr
   17580:	push	{fp, lr}
   17584:	mov	fp, sp
   17588:	ldm	r0, {r3, ip}
   1758c:	mov	lr, #0
   17590:	mov	r1, #0
   17594:	cmp	r3, ip
   17598:	bcs	175d4 <__assert_fail@plt+0x5fec>
   1759c:	mov	r1, #0
   175a0:	mov	lr, #0
   175a4:	ldr	r2, [r3]
   175a8:	cmp	r2, #0
   175ac:	beq	175c8 <__assert_fail@plt+0x5fe0>
   175b0:	mov	r2, r3
   175b4:	ldr	r2, [r2, #4]
   175b8:	add	r1, r1, #1
   175bc:	cmp	r2, #0
   175c0:	bne	175b4 <__assert_fail@plt+0x5fcc>
   175c4:	add	lr, lr, #1
   175c8:	add	r3, r3, #8
   175cc:	cmp	r3, ip
   175d0:	bcc	175a4 <__assert_fail@plt+0x5fbc>
   175d4:	ldr	r2, [r0, #12]
   175d8:	cmp	lr, r2
   175dc:	bne	175f4 <__assert_fail@plt+0x600c>
   175e0:	ldr	r2, [r0, #16]
   175e4:	mov	r0, #1
   175e8:	cmp	r1, r2
   175ec:	movne	r0, #0
   175f0:	pop	{fp, pc}
   175f4:	mov	r0, #0
   175f8:	pop	{fp, pc}
   175fc:	nop	{0}
   17600:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   17604:	add	fp, sp, #24
   17608:	sub	sp, sp, #8
   1760c:	ldr	r6, [r0]
   17610:	ldmib	r0, {r2, r7, r8}
   17614:	ldr	r3, [r0, #16]
   17618:	mov	r4, r1
   1761c:	mov	r5, #0
   17620:	cmp	r6, r2
   17624:	bcs	17664 <__assert_fail@plt+0x607c>
   17628:	mov	r5, #0
   1762c:	ldr	r0, [r6]
   17630:	cmp	r0, #0
   17634:	beq	17658 <__assert_fail@plt+0x6070>
   17638:	mov	r0, #0
   1763c:	mov	r1, r6
   17640:	ldr	r1, [r1, #4]
   17644:	add	r0, r0, #1
   17648:	cmp	r1, #0
   1764c:	bne	17640 <__assert_fail@plt+0x6058>
   17650:	cmp	r0, r5
   17654:	movhi	r5, r0
   17658:	add	r6, r6, #8
   1765c:	cmp	r6, r2
   17660:	bcc	1762c <__assert_fail@plt+0x6044>
   17664:	movw	r2, #58269	; 0xe39d
   17668:	mov	r0, r4
   1766c:	mov	r1, #1
   17670:	movt	r2, #1
   17674:	bl	114f8 <__fprintf_chk@plt>
   17678:	movw	r2, #58293	; 0xe3b5
   1767c:	mov	r0, r4
   17680:	mov	r1, #1
   17684:	mov	r3, r7
   17688:	movt	r2, #1
   1768c:	bl	114f8 <__fprintf_chk@plt>
   17690:	vldr	d16, [pc, #80]	; 176e8 <__assert_fail@plt+0x6100>
   17694:	vmov	s0, r8
   17698:	movw	r2, #58317	; 0xe3cd
   1769c:	mov	r0, r4
   176a0:	mov	r1, #1
   176a4:	mov	r3, r8
   176a8:	vcvt.f64.u32	d17, s0
   176ac:	vmov	s0, r7
   176b0:	movt	r2, #1
   176b4:	vcvt.f64.u32	d18, s0
   176b8:	vmul.f64	d16, d17, d16
   176bc:	vdiv.f64	d16, d16, d18
   176c0:	vstr	d16, [sp]
   176c4:	bl	114f8 <__fprintf_chk@plt>
   176c8:	movw	r2, #58350	; 0xe3ee
   176cc:	mov	r0, r4
   176d0:	mov	r1, #1
   176d4:	mov	r3, r5
   176d8:	movt	r2, #1
   176dc:	sub	sp, fp, #24
   176e0:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   176e4:	b	114f8 <__fprintf_chk@plt>
   176e8:	andeq	r0, r0, r0
   176ec:	subsmi	r0, r9, r0
   176f0:	push	{r4, r5, r6, r7, fp, lr}
   176f4:	add	fp, sp, #16
   176f8:	mov	r4, r1
   176fc:	ldr	r1, [r0, #8]
   17700:	ldr	r2, [r0, #24]
   17704:	mov	r5, r0
   17708:	mov	r0, r4
   1770c:	blx	r2
   17710:	ldr	r1, [r5, #8]
   17714:	cmp	r0, r1
   17718:	bcs	17784 <__assert_fail@plt+0x619c>
   1771c:	ldr	r7, [r5]
   17720:	mov	r6, #0
   17724:	ldr	r1, [r7, r0, lsl #3]!
   17728:	cmp	r1, #0
   1772c:	cmpne	r7, #0
   17730:	bne	17740 <__assert_fail@plt+0x6158>
   17734:	mov	r0, r6
   17738:	pop	{r4, r5, r6, r7, fp, pc}
   1773c:	ldr	r1, [r7]
   17740:	cmp	r1, r4
   17744:	beq	1776c <__assert_fail@plt+0x6184>
   17748:	ldr	r2, [r5, #28]
   1774c:	mov	r0, r4
   17750:	blx	r2
   17754:	cmp	r0, #0
   17758:	bne	17778 <__assert_fail@plt+0x6190>
   1775c:	ldr	r7, [r7, #4]
   17760:	cmp	r7, #0
   17764:	bne	1773c <__assert_fail@plt+0x6154>
   17768:	b	17734 <__assert_fail@plt+0x614c>
   1776c:	mov	r6, r4
   17770:	mov	r0, r6
   17774:	pop	{r4, r5, r6, r7, fp, pc}
   17778:	ldr	r6, [r7]
   1777c:	mov	r0, r6
   17780:	pop	{r4, r5, r6, r7, fp, pc}
   17784:	bl	115c4 <abort@plt>
   17788:	ldr	r1, [r0, #16]
   1778c:	cmp	r1, #0
   17790:	moveq	r0, #0
   17794:	bxeq	lr
   17798:	ldm	r0, {r1, r2}
   1779c:	cmp	r1, r2
   177a0:	bcs	177b8 <__assert_fail@plt+0x61d0>
   177a4:	ldr	r0, [r1], #8
   177a8:	cmp	r0, #0
   177ac:	bxne	lr
   177b0:	cmp	r1, r2
   177b4:	bcc	177a4 <__assert_fail@plt+0x61bc>
   177b8:	push	{fp, lr}
   177bc:	mov	fp, sp
   177c0:	bl	115c4 <abort@plt>
   177c4:	push	{r4, r5, fp, lr}
   177c8:	add	fp, sp, #8
   177cc:	mov	r5, r1
   177d0:	ldr	r1, [r0, #8]
   177d4:	ldr	r2, [r0, #24]
   177d8:	mov	r4, r0
   177dc:	mov	r0, r5
   177e0:	blx	r2
   177e4:	ldr	r1, [r4, #8]
   177e8:	cmp	r0, r1
   177ec:	bcs	17848 <__assert_fail@plt+0x6260>
   177f0:	ldr	r1, [r4]
   177f4:	add	r2, r1, r0, lsl #3
   177f8:	ldr	r3, [r2]
   177fc:	ldr	r2, [r2, #4]
   17800:	cmp	r3, r5
   17804:	beq	17814 <__assert_fail@plt+0x622c>
   17808:	cmp	r2, #0
   1780c:	bne	177f8 <__assert_fail@plt+0x6210>
   17810:	b	17820 <__assert_fail@plt+0x6238>
   17814:	cmp	r2, #0
   17818:	ldrne	r0, [r2]
   1781c:	popne	{r4, r5, fp, pc}
   17820:	ldr	r2, [r4, #4]
   17824:	add	r0, r1, r0, lsl #3
   17828:	add	r1, r0, #8
   1782c:	cmp	r1, r2
   17830:	movcs	r0, #0
   17834:	popcs	{r4, r5, fp, pc}
   17838:	ldr	r0, [r1], #8
   1783c:	cmp	r0, #0
   17840:	popne	{r4, r5, fp, pc}
   17844:	b	1782c <__assert_fail@plt+0x6244>
   17848:	bl	115c4 <abort@plt>
   1784c:	push	{r4, r5, fp, lr}
   17850:	add	fp, sp, #8
   17854:	ldm	r0, {r5, lr}
   17858:	mov	ip, r0
   1785c:	mov	r0, #0
   17860:	cmp	r5, lr
   17864:	bcs	178c0 <__assert_fail@plt+0x62d8>
   17868:	mov	r0, #0
   1786c:	ldr	r3, [r5]
   17870:	cmp	r3, #0
   17874:	cmpne	r5, #0
   17878:	bne	1788c <__assert_fail@plt+0x62a4>
   1787c:	add	r5, r5, #8
   17880:	cmp	r5, lr
   17884:	bcc	1786c <__assert_fail@plt+0x6284>
   17888:	b	178c0 <__assert_fail@plt+0x62d8>
   1788c:	mov	r3, r5
   17890:	cmp	r0, r2
   17894:	popcs	{r4, r5, fp, pc}
   17898:	ldr	r4, [r3]
   1789c:	str	r4, [r1, r0, lsl #2]
   178a0:	add	r0, r0, #1
   178a4:	ldr	r3, [r3, #4]
   178a8:	cmp	r3, #0
   178ac:	bne	17890 <__assert_fail@plt+0x62a8>
   178b0:	ldr	lr, [ip, #4]
   178b4:	add	r5, r5, #8
   178b8:	cmp	r5, lr
   178bc:	bcc	1786c <__assert_fail@plt+0x6284>
   178c0:	pop	{r4, r5, fp, pc}
   178c4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   178c8:	add	fp, sp, #24
   178cc:	mov	r5, r1
   178d0:	ldr	r4, [r0]
   178d4:	ldr	r1, [r0, #4]
   178d8:	mov	r6, #0
   178dc:	cmp	r4, r1
   178e0:	bcs	1795c <__assert_fail@plt+0x6374>
   178e4:	mov	r9, r2
   178e8:	mov	r8, r0
   178ec:	mov	r6, #0
   178f0:	ldr	r0, [r4]
   178f4:	cmp	r0, #0
   178f8:	cmpne	r4, #0
   178fc:	bne	17910 <__assert_fail@plt+0x6328>
   17900:	add	r4, r4, #8
   17904:	cmp	r4, r1
   17908:	bcc	178f0 <__assert_fail@plt+0x6308>
   1790c:	b	1795c <__assert_fail@plt+0x6374>
   17910:	mov	r1, r9
   17914:	blx	r5
   17918:	cmp	r0, #0
   1791c:	beq	1795c <__assert_fail@plt+0x6374>
   17920:	mov	r7, r4
   17924:	ldr	r7, [r7, #4]
   17928:	add	r6, r6, #1
   1792c:	cmp	r7, #0
   17930:	beq	1794c <__assert_fail@plt+0x6364>
   17934:	ldr	r0, [r7]
   17938:	mov	r1, r9
   1793c:	blx	r5
   17940:	cmp	r0, #0
   17944:	bne	17924 <__assert_fail@plt+0x633c>
   17948:	b	1795c <__assert_fail@plt+0x6374>
   1794c:	ldr	r1, [r8, #4]
   17950:	add	r4, r4, #8
   17954:	cmp	r4, r1
   17958:	bcc	178f0 <__assert_fail@plt+0x6308>
   1795c:	mov	r0, r6
   17960:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17964:	ldrb	r2, [r0]
   17968:	cmp	r2, #0
   1796c:	moveq	r0, #0
   17970:	bxeq	lr
   17974:	add	r3, r0, #1
   17978:	mov	r0, #0
   1797c:	rsb	r0, r0, r0, lsl #5
   17980:	uxtab	r0, r0, r2
   17984:	udiv	r2, r0, r1
   17988:	mls	r0, r2, r1, r0
   1798c:	ldrb	r2, [r3], #1
   17990:	cmp	r2, #0
   17994:	bne	1797c <__assert_fail@plt+0x6394>
   17998:	bx	lr
   1799c:	movw	r1, #58376	; 0xe408
   179a0:	movt	r1, #1
   179a4:	vld1.32	{d16-d17}, [r1]!
   179a8:	ldr	r1, [r1]
   179ac:	vst1.32	{d16-d17}, [r0]!
   179b0:	str	r1, [r0]
   179b4:	bx	lr
   179b8:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   179bc:	add	fp, sp, #24
   179c0:	movw	r9, #31748	; 0x7c04
   179c4:	movw	r5, #31728	; 0x7bf0
   179c8:	cmp	r3, #0
   179cc:	mov	r6, r0
   179d0:	mov	r0, #40	; 0x28
   179d4:	mov	r7, r1
   179d8:	movt	r9, #1
   179dc:	movt	r5, #1
   179e0:	movne	r9, r3
   179e4:	cmp	r2, #0
   179e8:	movne	r5, r2
   179ec:	bl	1c624 <__assert_fail@plt+0xb03c>
   179f0:	mov	r8, #0
   179f4:	cmp	r0, #0
   179f8:	beq	17bd8 <__assert_fail@plt+0x65f0>
   179fc:	mov	r4, r0
   17a00:	cmp	r7, #0
   17a04:	beq	17ab4 <__assert_fail@plt+0x64cc>
   17a08:	movw	r0, #58376	; 0xe408
   17a0c:	str	r7, [r4, #20]
   17a10:	movt	r0, #1
   17a14:	cmp	r7, r0
   17a18:	beq	17ac0 <__assert_fail@plt+0x64d8>
   17a1c:	vldr	s2, [pc, #444]	; 17be0 <__assert_fail@plt+0x65f8>
   17a20:	vldr	s0, [r7, #8]
   17a24:	vcmpe.f32	s0, s2
   17a28:	vmrs	APSR_nzcv, fpscr
   17a2c:	ble	17a98 <__assert_fail@plt+0x64b0>
   17a30:	vldr	s4, [pc, #428]	; 17be4 <__assert_fail@plt+0x65fc>
   17a34:	vcmpe.f32	s0, s4
   17a38:	vmrs	APSR_nzcv, fpscr
   17a3c:	bpl	17a98 <__assert_fail@plt+0x64b0>
   17a40:	vldr	s4, [pc, #416]	; 17be8 <__assert_fail@plt+0x6600>
   17a44:	vldr	s6, [r7, #12]
   17a48:	vcmpe.f32	s6, s4
   17a4c:	vmrs	APSR_nzcv, fpscr
   17a50:	ble	17a98 <__assert_fail@plt+0x64b0>
   17a54:	vldr	s4, [r7]
   17a58:	vcmpe.f32	s4, #0.0
   17a5c:	vmrs	APSR_nzcv, fpscr
   17a60:	blt	17a98 <__assert_fail@plt+0x64b0>
   17a64:	vadd.f32	s2, s4, s2
   17a68:	vcmpe.f32	s2, s0
   17a6c:	vmrs	APSR_nzcv, fpscr
   17a70:	bpl	17a98 <__assert_fail@plt+0x64b0>
   17a74:	vldr	s0, [r7, #4]
   17a78:	vmov.f32	s4, #112	; 0x3f800000  1.0
   17a7c:	vcmpe.f32	s0, s4
   17a80:	vmrs	APSR_nzcv, fpscr
   17a84:	bhi	17a98 <__assert_fail@plt+0x64b0>
   17a88:	vcmpe.f32	s2, s0
   17a8c:	mov	r0, r7
   17a90:	vmrs	APSR_nzcv, fpscr
   17a94:	bmi	17ac0 <__assert_fail@plt+0x64d8>
   17a98:	movw	r0, #58376	; 0xe408
   17a9c:	movt	r0, #1
   17aa0:	str	r0, [r4, #20]
   17aa4:	mov	r0, r4
   17aa8:	bl	174f0 <__assert_fail@plt+0x5f08>
   17aac:	mov	r0, r8
   17ab0:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17ab4:	movw	r0, #58376	; 0xe408
   17ab8:	movt	r0, #1
   17abc:	str	r0, [r4, #20]
   17ac0:	ldrb	r1, [r0, #16]
   17ac4:	cmp	r1, #0
   17ac8:	bne	17af4 <__assert_fail@plt+0x650c>
   17acc:	vldr	s0, [r0, #8]
   17ad0:	vldr	s4, [pc, #276]	; 17bec <__assert_fail@plt+0x6604>
   17ad4:	vmov	s2, r6
   17ad8:	vcvt.f32.u32	s2, s2
   17adc:	vdiv.f32	s2, s2, s0
   17ae0:	vcmpe.f32	s2, s4
   17ae4:	vcvt.u32.f32	s0, s2
   17ae8:	vmrs	APSR_nzcv, fpscr
   17aec:	bge	17b74 <__assert_fail@plt+0x658c>
   17af0:	vmov	r6, s0
   17af4:	cmp	r6, #10
   17af8:	movls	r6, #10
   17afc:	orr	r0, r6, #1
   17b00:	cmn	r0, #1
   17b04:	beq	17b74 <__assert_fail@plt+0x658c>
   17b08:	ldr	r6, [fp, #8]
   17b0c:	mov	r1, #3
   17b10:	cmp	r0, #10
   17b14:	bcc	17b4c <__assert_fail@plt+0x6564>
   17b18:	mov	r1, #3
   17b1c:	mov	r3, #9
   17b20:	mov	r2, #12
   17b24:	udiv	r7, r0, r1
   17b28:	mls	r7, r7, r1, r0
   17b2c:	cmp	r7, #0
   17b30:	beq	17b4c <__assert_fail@plt+0x6564>
   17b34:	add	r3, r3, r2
   17b38:	add	r2, r2, #8
   17b3c:	add	r1, r1, #2
   17b40:	add	r3, r3, #4
   17b44:	cmp	r3, r0
   17b48:	bcc	17b24 <__assert_fail@plt+0x653c>
   17b4c:	udiv	r2, r0, r1
   17b50:	mls	r1, r2, r1, r0
   17b54:	cmp	r1, #0
   17b58:	bne	17b6c <__assert_fail@plt+0x6584>
   17b5c:	add	r0, r0, #2
   17b60:	cmn	r0, #1
   17b64:	bne	17b0c <__assert_fail@plt+0x6524>
   17b68:	b	17b74 <__assert_fail@plt+0x658c>
   17b6c:	cmp	r0, #536870912	; 0x20000000
   17b70:	bcc	17b8c <__assert_fail@plt+0x65a4>
   17b74:	mov	r0, #0
   17b78:	str	r0, [r4, #8]
   17b7c:	mov	r0, r4
   17b80:	bl	174f0 <__assert_fail@plt+0x5f08>
   17b84:	mov	r0, r8
   17b88:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17b8c:	cmp	r0, #0
   17b90:	str	r0, [r4, #8]
   17b94:	beq	17b7c <__assert_fail@plt+0x6594>
   17b98:	mov	r1, #8
   17b9c:	bl	1c5d0 <__assert_fail@plt+0xafe8>
   17ba0:	cmp	r0, #0
   17ba4:	str	r0, [r4]
   17ba8:	beq	17b7c <__assert_fail@plt+0x6594>
   17bac:	mov	r1, #0
   17bb0:	mov	r8, r4
   17bb4:	str	r1, [r4, #12]
   17bb8:	str	r1, [r4, #16]
   17bbc:	str	r5, [r4, #24]
   17bc0:	str	r9, [r4, #28]
   17bc4:	str	r6, [r4, #32]
   17bc8:	str	r1, [r4, #36]	; 0x24
   17bcc:	ldr	r1, [r4, #8]
   17bd0:	add	r0, r0, r1, lsl #3
   17bd4:	str	r0, [r4, #4]
   17bd8:	mov	r0, r8
   17bdc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   17be0:	stclcc	12, cr12, [ip, #820]	; 0x334
   17be4:	svccc	0x00666666
   17be8:	svccc	0x008ccccd
   17bec:	svcmi	0x00800000
   17bf0:	ror	r2, r0, #3
   17bf4:	udiv	r2, r2, r1
   17bf8:	mul	r1, r2, r1
   17bfc:	rsb	r0, r1, r0, ror #3
   17c00:	bx	lr
   17c04:	sub	r0, r0, r1
   17c08:	clz	r0, r0
   17c0c:	lsr	r0, r0, #5
   17c10:	bx	lr
   17c14:	push	{r4, r5, r6, r7, fp, lr}
   17c18:	add	fp, sp, #16
   17c1c:	mov	r4, r0
   17c20:	ldr	r5, [r0]
   17c24:	ldr	r0, [r0, #4]
   17c28:	cmp	r5, r0
   17c2c:	bcs	17cc4 <__assert_fail@plt+0x66dc>
   17c30:	mov	r6, #0
   17c34:	ldr	r1, [r5]
   17c38:	cmp	r1, #0
   17c3c:	beq	17cb8 <__assert_fail@plt+0x66d0>
   17c40:	ldr	r1, [r4, #32]
   17c44:	ldr	r7, [r5, #4]
   17c48:	cmp	r1, #0
   17c4c:	mov	r0, r1
   17c50:	movwne	r0, #1
   17c54:	cmp	r7, #0
   17c58:	beq	17c9c <__assert_fail@plt+0x66b4>
   17c5c:	tst	r0, #1
   17c60:	beq	17c70 <__assert_fail@plt+0x6688>
   17c64:	ldr	r0, [r7]
   17c68:	blx	r1
   17c6c:	ldr	r1, [r4, #32]
   17c70:	str	r6, [r7]
   17c74:	cmp	r1, #0
   17c78:	ldr	r0, [r4, #36]	; 0x24
   17c7c:	ldr	r2, [r7, #4]
   17c80:	str	r0, [r7, #4]
   17c84:	mov	r0, r1
   17c88:	str	r7, [r4, #36]	; 0x24
   17c8c:	mov	r7, r2
   17c90:	movwne	r0, #1
   17c94:	cmp	r2, #0
   17c98:	bne	17c5c <__assert_fail@plt+0x6674>
   17c9c:	cmp	r0, #0
   17ca0:	beq	17cac <__assert_fail@plt+0x66c4>
   17ca4:	ldr	r0, [r5]
   17ca8:	blx	r1
   17cac:	str	r6, [r5]
   17cb0:	str	r6, [r5, #4]
   17cb4:	ldr	r0, [r4, #4]
   17cb8:	add	r5, r5, #8
   17cbc:	cmp	r5, r0
   17cc0:	bcc	17c34 <__assert_fail@plt+0x664c>
   17cc4:	mov	r0, #0
   17cc8:	str	r0, [r4, #12]
   17ccc:	str	r0, [r4, #16]
   17cd0:	pop	{r4, r5, r6, r7, fp, pc}
   17cd4:	push	{r4, r5, r6, sl, fp, lr}
   17cd8:	add	fp, sp, #16
   17cdc:	mov	r4, r0
   17ce0:	ldr	r0, [r0, #32]
   17ce4:	cmp	r0, #0
   17ce8:	ldrne	r0, [r4, #16]
   17cec:	cmpne	r0, #0
   17cf0:	beq	17d58 <__assert_fail@plt+0x6770>
   17cf4:	ldr	r5, [r4]
   17cf8:	ldr	r1, [r4, #4]
   17cfc:	cmp	r5, r1
   17d00:	bcc	17d14 <__assert_fail@plt+0x672c>
   17d04:	b	17d58 <__assert_fail@plt+0x6770>
   17d08:	add	r5, r5, #8
   17d0c:	cmp	r5, r1
   17d10:	bcs	17d58 <__assert_fail@plt+0x6770>
   17d14:	ldr	r0, [r5]
   17d18:	cmp	r0, #0
   17d1c:	cmpne	r5, #0
   17d20:	beq	17d08 <__assert_fail@plt+0x6720>
   17d24:	ldr	r1, [r4, #32]
   17d28:	blx	r1
   17d2c:	ldr	r6, [r5, #4]
   17d30:	cmp	r6, #0
   17d34:	beq	17d50 <__assert_fail@plt+0x6768>
   17d38:	ldr	r1, [r4, #32]
   17d3c:	ldr	r0, [r6]
   17d40:	blx	r1
   17d44:	ldr	r6, [r6, #4]
   17d48:	cmp	r6, #0
   17d4c:	bne	17d38 <__assert_fail@plt+0x6750>
   17d50:	ldr	r1, [r4, #4]
   17d54:	b	17d08 <__assert_fail@plt+0x6720>
   17d58:	ldr	r5, [r4]
   17d5c:	ldr	r1, [r4, #4]
   17d60:	cmp	r5, r1
   17d64:	bcc	17d78 <__assert_fail@plt+0x6790>
   17d68:	b	17da0 <__assert_fail@plt+0x67b8>
   17d6c:	add	r5, r5, #8
   17d70:	cmp	r5, r1
   17d74:	bcs	17da0 <__assert_fail@plt+0x67b8>
   17d78:	ldr	r0, [r5, #4]
   17d7c:	cmp	r0, #0
   17d80:	beq	17d6c <__assert_fail@plt+0x6784>
   17d84:	ldr	r6, [r0, #4]
   17d88:	bl	174f0 <__assert_fail@plt+0x5f08>
   17d8c:	cmp	r6, #0
   17d90:	mov	r0, r6
   17d94:	bne	17d84 <__assert_fail@plt+0x679c>
   17d98:	ldr	r1, [r4, #4]
   17d9c:	b	17d6c <__assert_fail@plt+0x6784>
   17da0:	ldr	r0, [r4, #36]	; 0x24
   17da4:	cmp	r0, #0
   17da8:	beq	17dc0 <__assert_fail@plt+0x67d8>
   17dac:	ldr	r5, [r0, #4]
   17db0:	bl	174f0 <__assert_fail@plt+0x5f08>
   17db4:	cmp	r5, #0
   17db8:	mov	r0, r5
   17dbc:	bne	17dac <__assert_fail@plt+0x67c4>
   17dc0:	ldr	r0, [r4]
   17dc4:	bl	174f0 <__assert_fail@plt+0x5f08>
   17dc8:	mov	r0, r4
   17dcc:	pop	{r4, r5, r6, sl, fp, lr}
   17dd0:	b	174f0 <__assert_fail@plt+0x5f08>
   17dd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17dd8:	add	fp, sp, #28
   17ddc:	sub	sp, sp, #44	; 0x2c
   17de0:	mov	r7, r0
   17de4:	mov	r4, r0
   17de8:	ldr	r0, [r7, #20]!
   17dec:	ldrb	r2, [r0, #16]
   17df0:	cmp	r2, #0
   17df4:	bne	17e24 <__assert_fail@plt+0x683c>
   17df8:	vldr	s0, [r0, #8]
   17dfc:	vldr	s4, [pc, #576]	; 18044 <__assert_fail@plt+0x6a5c>
   17e00:	vmov	s2, r1
   17e04:	mov	r5, #0
   17e08:	vcvt.f32.u32	s2, s2
   17e0c:	vdiv.f32	s2, s2, s0
   17e10:	vcmpe.f32	s2, s4
   17e14:	vcvt.u32.f32	s0, s2
   17e18:	vmrs	APSR_nzcv, fpscr
   17e1c:	bge	17f48 <__assert_fail@plt+0x6960>
   17e20:	vmov	r1, s0
   17e24:	cmp	r1, #10
   17e28:	mov	r5, #0
   17e2c:	movls	r1, #10
   17e30:	orr	r6, r1, #1
   17e34:	cmn	r6, #1
   17e38:	bne	17e4c <__assert_fail@plt+0x6864>
   17e3c:	b	17f48 <__assert_fail@plt+0x6960>
   17e40:	add	r6, r6, #2
   17e44:	cmn	r6, #1
   17e48:	beq	17f48 <__assert_fail@plt+0x6960>
   17e4c:	mov	r0, #3
   17e50:	cmp	r6, #10
   17e54:	bcc	17e8c <__assert_fail@plt+0x68a4>
   17e58:	mov	r0, #3
   17e5c:	mov	r2, #9
   17e60:	mov	r1, #12
   17e64:	udiv	r3, r6, r0
   17e68:	mls	r3, r3, r0, r6
   17e6c:	cmp	r3, #0
   17e70:	beq	17e8c <__assert_fail@plt+0x68a4>
   17e74:	add	r2, r2, r1
   17e78:	add	r1, r1, #8
   17e7c:	add	r0, r0, #2
   17e80:	add	r2, r2, #4
   17e84:	cmp	r2, r6
   17e88:	bcc	17e64 <__assert_fail@plt+0x687c>
   17e8c:	udiv	r1, r6, r0
   17e90:	mls	r0, r1, r0, r6
   17e94:	cmp	r0, #0
   17e98:	beq	17e40 <__assert_fail@plt+0x6858>
   17e9c:	sub	r0, r6, #1
   17ea0:	cmn	r0, #-536870910	; 0xe0000002
   17ea4:	bhi	17f48 <__assert_fail@plt+0x6960>
   17ea8:	ldr	r0, [r4, #8]
   17eac:	cmp	r6, r0
   17eb0:	bne	17ec4 <__assert_fail@plt+0x68dc>
   17eb4:	mov	r5, #1
   17eb8:	mov	r0, r5
   17ebc:	sub	sp, fp, #28
   17ec0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ec4:	mov	r0, r6
   17ec8:	mov	r1, #8
   17ecc:	bl	1c5d0 <__assert_fail@plt+0xafe8>
   17ed0:	cmp	r0, #0
   17ed4:	str	r0, [sp, #4]
   17ed8:	beq	17f48 <__assert_fail@plt+0x6960>
   17edc:	mov	r1, #0
   17ee0:	add	r0, r0, r6, lsl #3
   17ee4:	str	r6, [sp, #12]
   17ee8:	add	r5, sp, #4
   17eec:	mov	sl, r4
   17ef0:	mov	r2, #0
   17ef4:	str	r1, [sp, #16]
   17ef8:	str	r1, [sp, #20]
   17efc:	str	r0, [sp, #8]
   17f00:	add	r0, r5, #20
   17f04:	mov	r1, r4
   17f08:	vld1.32	{d16-d17}, [r7]
   17f0c:	vst1.32	{d16-d17}, [r0]
   17f10:	ldr	r0, [sl, #36]!	; 0x24
   17f14:	str	r0, [sp, #40]	; 0x28
   17f18:	mov	r0, r5
   17f1c:	bl	18048 <__assert_fail@plt+0x6a60>
   17f20:	cmp	r0, #0
   17f24:	beq	17f54 <__assert_fail@plt+0x696c>
   17f28:	ldr	r0, [r4]
   17f2c:	bl	174f0 <__assert_fail@plt+0x5f08>
   17f30:	mov	r0, #36	; 0x24
   17f34:	vld1.32	{d16-d17}, [r5], r0
   17f38:	vst1.32	{d16-d17}, [r4], r0
   17f3c:	ldr	r0, [r5]
   17f40:	mov	r5, #1
   17f44:	str	r0, [r4]
   17f48:	mov	r0, r5
   17f4c:	sub	sp, fp, #28
   17f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17f54:	ldr	r0, [sp, #40]	; 0x28
   17f58:	str	r0, [sl]
   17f5c:	ldr	r0, [sp, #8]
   17f60:	ldr	r8, [sp, #4]
   17f64:	cmp	r8, r0
   17f68:	str	r0, [sp]
   17f6c:	bcs	18010 <__assert_fail@plt+0x6a28>
   17f70:	mov	r9, #0
   17f74:	ldr	r0, [r8]
   17f78:	cmp	r0, #0
   17f7c:	beq	18000 <__assert_fail@plt+0x6a18>
   17f80:	ldr	r6, [r8, #4]
   17f84:	cmp	r6, #0
   17f88:	beq	17ffc <__assert_fail@plt+0x6a14>
   17f8c:	ldr	r1, [r4, #8]
   17f90:	ldr	r5, [r6]
   17f94:	ldr	r2, [r4, #24]
   17f98:	mov	r0, r5
   17f9c:	blx	r2
   17fa0:	ldr	r1, [r4, #8]
   17fa4:	cmp	r0, r1
   17fa8:	bcs	18040 <__assert_fail@plt+0x6a58>
   17fac:	ldr	r3, [r4]
   17fb0:	ldr	r2, [r6, #4]
   17fb4:	ldr	r7, [r3, r0, lsl #3]
   17fb8:	cmp	r7, #0
   17fbc:	beq	17fcc <__assert_fail@plt+0x69e4>
   17fc0:	add	r0, r3, r0, lsl #3
   17fc4:	add	r0, r0, #4
   17fc8:	b	17fe4 <__assert_fail@plt+0x69fc>
   17fcc:	str	r5, [r3, r0, lsl #3]
   17fd0:	ldr	r0, [r4, #12]
   17fd4:	add	r0, r0, #1
   17fd8:	str	r0, [r4, #12]
   17fdc:	mov	r0, sl
   17fe0:	str	r9, [r6]
   17fe4:	ldr	r3, [r0]
   17fe8:	cmp	r2, #0
   17fec:	str	r3, [r6, #4]
   17ff0:	str	r6, [r0]
   17ff4:	mov	r6, r2
   17ff8:	bne	17f90 <__assert_fail@plt+0x69a8>
   17ffc:	str	r9, [r8, #4]
   18000:	ldr	r0, [sp]
   18004:	add	r8, r8, #8
   18008:	cmp	r8, r0
   1800c:	bcc	17f74 <__assert_fail@plt+0x698c>
   18010:	add	r1, sp, #4
   18014:	mov	r0, r4
   18018:	mov	r2, #0
   1801c:	mov	r5, #0
   18020:	bl	18048 <__assert_fail@plt+0x6a60>
   18024:	cmp	r0, #0
   18028:	beq	18040 <__assert_fail@plt+0x6a58>
   1802c:	ldr	r0, [sp, #4]
   18030:	bl	174f0 <__assert_fail@plt+0x5f08>
   18034:	mov	r0, r5
   18038:	sub	sp, fp, #28
   1803c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18040:	bl	115c4 <abort@plt>
   18044:	svcmi	0x00800000
   18048:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1804c:	add	fp, sp, #28
   18050:	sub	sp, sp, #4
   18054:	ldr	r8, [r1]
   18058:	ldr	r3, [r1, #4]
   1805c:	mov	r6, r0
   18060:	mov	r0, #1
   18064:	str	r1, [sp]
   18068:	cmp	r8, r3
   1806c:	bcs	1826c <__assert_fail@plt+0x6c84>
   18070:	add	r9, r6, #36	; 0x24
   18074:	cmp	r2, #0
   18078:	beq	18124 <__assert_fail@plt+0x6b3c>
   1807c:	mov	sl, #0
   18080:	ldr	r1, [r8]
   18084:	cmp	r1, #0
   18088:	beq	18114 <__assert_fail@plt+0x6b2c>
   1808c:	ldr	r7, [r8, #4]
   18090:	cmp	r7, #0
   18094:	beq	18110 <__assert_fail@plt+0x6b28>
   18098:	ldr	r1, [r6, #8]
   1809c:	ldr	r4, [r7]
   180a0:	ldr	r2, [r6, #24]
   180a4:	mov	r0, r4
   180a8:	blx	r2
   180ac:	ldr	r1, [r6, #8]
   180b0:	cmp	r0, r1
   180b4:	bcs	18280 <__assert_fail@plt+0x6c98>
   180b8:	ldr	r3, [r6]
   180bc:	ldr	r2, [r7, #4]
   180c0:	ldr	r5, [r3, r0, lsl #3]
   180c4:	cmp	r5, #0
   180c8:	beq	180d8 <__assert_fail@plt+0x6af0>
   180cc:	add	r0, r3, r0, lsl #3
   180d0:	add	r0, r0, #4
   180d4:	b	180f0 <__assert_fail@plt+0x6b08>
   180d8:	str	r4, [r3, r0, lsl #3]
   180dc:	ldr	r0, [r6, #12]
   180e0:	add	r0, r0, #1
   180e4:	str	r0, [r6, #12]
   180e8:	mov	r0, r9
   180ec:	str	sl, [r7]
   180f0:	ldr	r3, [r0]
   180f4:	cmp	r2, #0
   180f8:	str	r3, [r7, #4]
   180fc:	str	r7, [r0]
   18100:	mov	r7, r2
   18104:	bne	1809c <__assert_fail@plt+0x6ab4>
   18108:	ldr	r0, [sp]
   1810c:	ldr	r3, [r0, #4]
   18110:	str	sl, [r8, #4]
   18114:	add	r8, r8, #8
   18118:	cmp	r8, r3
   1811c:	bcc	18080 <__assert_fail@plt+0x6a98>
   18120:	b	18268 <__assert_fail@plt+0x6c80>
   18124:	mov	r5, #0
   18128:	ldr	sl, [r8]
   1812c:	cmp	sl, #0
   18130:	beq	1825c <__assert_fail@plt+0x6c74>
   18134:	ldr	r7, [r8, #4]
   18138:	ldr	r1, [r6, #8]
   1813c:	cmp	r7, #0
   18140:	beq	181bc <__assert_fail@plt+0x6bd4>
   18144:	mov	sl, #0
   18148:	ldr	r4, [r7]
   1814c:	ldr	r2, [r6, #24]
   18150:	mov	r0, r4
   18154:	blx	r2
   18158:	ldr	r1, [r6, #8]
   1815c:	cmp	r0, r1
   18160:	bcs	18280 <__assert_fail@plt+0x6c98>
   18164:	ldr	r3, [r6]
   18168:	ldr	r2, [r7, #4]
   1816c:	ldr	r5, [r3, r0, lsl #3]
   18170:	cmp	r5, #0
   18174:	beq	18184 <__assert_fail@plt+0x6b9c>
   18178:	add	r0, r3, r0, lsl #3
   1817c:	add	r0, r0, #4
   18180:	b	1819c <__assert_fail@plt+0x6bb4>
   18184:	str	r4, [r3, r0, lsl #3]
   18188:	ldr	r0, [r6, #12]
   1818c:	add	r0, r0, #1
   18190:	str	r0, [r6, #12]
   18194:	mov	r0, r9
   18198:	str	sl, [r7]
   1819c:	ldr	r3, [r0]
   181a0:	cmp	r2, #0
   181a4:	str	r3, [r7, #4]
   181a8:	str	r7, [r0]
   181ac:	mov	r7, r2
   181b0:	bne	18148 <__assert_fail@plt+0x6b60>
   181b4:	ldr	sl, [r8]
   181b8:	mov	r5, #0
   181bc:	str	r5, [r8, #4]
   181c0:	mov	r0, sl
   181c4:	ldr	r2, [r6, #24]
   181c8:	blx	r2
   181cc:	mov	r4, r0
   181d0:	ldr	r0, [r6, #8]
   181d4:	cmp	r4, r0
   181d8:	bcs	18280 <__assert_fail@plt+0x6c98>
   181dc:	ldr	r7, [r6]
   181e0:	ldr	r0, [r7, r4, lsl #3]
   181e4:	cmp	r0, #0
   181e8:	beq	18208 <__assert_fail@plt+0x6c20>
   181ec:	ldr	r0, [r9]
   181f0:	cmp	r0, #0
   181f4:	beq	1821c <__assert_fail@plt+0x6c34>
   181f8:	mov	r1, r0
   181fc:	ldr	r2, [r1, #4]!
   18200:	str	r2, [r9]
   18204:	b	18230 <__assert_fail@plt+0x6c48>
   18208:	str	sl, [r7, r4, lsl #3]
   1820c:	ldr	r0, [r6, #12]
   18210:	add	r0, r0, #1
   18214:	str	r0, [r6, #12]
   18218:	b	18244 <__assert_fail@plt+0x6c5c>
   1821c:	mov	r0, #8
   18220:	bl	1c624 <__assert_fail@plt+0xb03c>
   18224:	cmp	r0, #0
   18228:	beq	18274 <__assert_fail@plt+0x6c8c>
   1822c:	add	r1, r0, #4
   18230:	str	sl, [r0]
   18234:	add	r2, r7, r4, lsl #3
   18238:	ldr	r3, [r2, #4]
   1823c:	str	r3, [r1]
   18240:	str	r0, [r2, #4]
   18244:	ldr	r0, [sp]
   18248:	str	r5, [r8]
   1824c:	ldr	r1, [r0, #12]
   18250:	ldr	r3, [r0, #4]
   18254:	sub	r1, r1, #1
   18258:	str	r1, [r0, #12]
   1825c:	add	r8, r8, #8
   18260:	cmp	r8, r3
   18264:	bcc	18128 <__assert_fail@plt+0x6b40>
   18268:	mov	r0, #1
   1826c:	sub	sp, fp, #28
   18270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18274:	mov	r0, #0
   18278:	sub	sp, fp, #28
   1827c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18280:	bl	115c4 <abort@plt>
   18284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18288:	add	fp, sp, #28
   1828c:	sub	sp, sp, #4
   18290:	cmp	r1, #0
   18294:	beq	185d8 <__assert_fail@plt+0x6ff0>
   18298:	mov	r8, r2
   1829c:	mov	sl, r1
   182a0:	ldr	r1, [r0, #8]
   182a4:	ldr	r2, [r0, #24]
   182a8:	mov	r4, r0
   182ac:	mov	r0, sl
   182b0:	blx	r2
   182b4:	mov	r7, r0
   182b8:	ldr	r0, [r4, #8]
   182bc:	cmp	r7, r0
   182c0:	bcs	185d8 <__assert_fail@plt+0x6ff0>
   182c4:	ldr	r5, [r4]
   182c8:	mov	r9, r5
   182cc:	ldr	r1, [r9, r7, lsl #3]!
   182d0:	cmp	r1, #0
   182d4:	beq	18368 <__assert_fail@plt+0x6d80>
   182d8:	cmp	r1, sl
   182dc:	beq	18308 <__assert_fail@plt+0x6d20>
   182e0:	ldr	r2, [r4, #28]
   182e4:	mov	r0, sl
   182e8:	blx	r2
   182ec:	cmp	r0, #0
   182f0:	mov	r6, r9
   182f4:	beq	18324 <__assert_fail@plt+0x6d3c>
   182f8:	ldr	r0, [r6]
   182fc:	cmp	r0, #0
   18300:	bne	1830c <__assert_fail@plt+0x6d24>
   18304:	b	18368 <__assert_fail@plt+0x6d80>
   18308:	mov	r0, sl
   1830c:	cmp	r8, #0
   18310:	mov	r7, #0
   18314:	strne	r0, [r8]
   18318:	mov	r0, r7
   1831c:	sub	sp, fp, #28
   18320:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18324:	add	r6, r5, r7, lsl #3
   18328:	ldr	r0, [r6, #4]!
   1832c:	cmp	r0, #0
   18330:	beq	18368 <__assert_fail@plt+0x6d80>
   18334:	ldr	r1, [r0]
   18338:	cmp	r1, sl
   1833c:	beq	1835c <__assert_fail@plt+0x6d74>
   18340:	ldr	r2, [r4, #28]
   18344:	mov	r0, sl
   18348:	blx	r2
   1834c:	ldr	r6, [r6]
   18350:	cmp	r0, #0
   18354:	beq	18328 <__assert_fail@plt+0x6d40>
   18358:	b	182f8 <__assert_fail@plt+0x6d10>
   1835c:	mov	r0, sl
   18360:	cmp	r0, #0
   18364:	bne	1830c <__assert_fail@plt+0x6d24>
   18368:	vldr	s0, [r4, #8]
   1836c:	vldr	s2, [r4, #12]
   18370:	ldr	r0, [r4, #20]
   18374:	vcvt.f32.u32	s0, s0
   18378:	vcvt.f32.u32	s4, s2
   1837c:	vldr	s2, [r0, #8]
   18380:	vmul.f32	s6, s2, s0
   18384:	vcmpe.f32	s6, s4
   18388:	vmrs	APSR_nzcv, fpscr
   1838c:	bpl	184f0 <__assert_fail@plt+0x6f08>
   18390:	movw	r1, #58376	; 0xe408
   18394:	movt	r1, #1
   18398:	cmp	r0, r1
   1839c:	beq	18438 <__assert_fail@plt+0x6e50>
   183a0:	vldr	s6, [pc, #564]	; 185dc <__assert_fail@plt+0x6ff4>
   183a4:	vcmpe.f32	s2, s6
   183a8:	vmrs	APSR_nzcv, fpscr
   183ac:	ble	18414 <__assert_fail@plt+0x6e2c>
   183b0:	vldr	s8, [pc, #552]	; 185e0 <__assert_fail@plt+0x6ff8>
   183b4:	vcmpe.f32	s2, s8
   183b8:	vmrs	APSR_nzcv, fpscr
   183bc:	bpl	18414 <__assert_fail@plt+0x6e2c>
   183c0:	vldr	s8, [pc, #540]	; 185e4 <__assert_fail@plt+0x6ffc>
   183c4:	vldr	s10, [r0, #12]
   183c8:	vcmpe.f32	s10, s8
   183cc:	vmrs	APSR_nzcv, fpscr
   183d0:	ble	18414 <__assert_fail@plt+0x6e2c>
   183d4:	vldr	s8, [r0]
   183d8:	vcmpe.f32	s8, #0.0
   183dc:	vmrs	APSR_nzcv, fpscr
   183e0:	blt	18414 <__assert_fail@plt+0x6e2c>
   183e4:	vadd.f32	s6, s8, s6
   183e8:	vcmpe.f32	s6, s2
   183ec:	vmrs	APSR_nzcv, fpscr
   183f0:	bpl	18414 <__assert_fail@plt+0x6e2c>
   183f4:	vldr	s8, [r0, #4]
   183f8:	vmov.f32	s10, #112	; 0x3f800000  1.0
   183fc:	vcmpe.f32	s8, s10
   18400:	vmrs	APSR_nzcv, fpscr
   18404:	bhi	18414 <__assert_fail@plt+0x6e2c>
   18408:	vcmpe.f32	s6, s8
   1840c:	vmrs	APSR_nzcv, fpscr
   18410:	bmi	18424 <__assert_fail@plt+0x6e3c>
   18414:	vldr	s2, [pc, #460]	; 185e8 <__assert_fail@plt+0x7000>
   18418:	movw	r0, #58376	; 0xe408
   1841c:	movt	r0, #1
   18420:	str	r0, [r4, #20]
   18424:	vmul.f32	s6, s2, s0
   18428:	vcmpe.f32	s6, s4
   1842c:	vmrs	APSR_nzcv, fpscr
   18430:	bmi	1844c <__assert_fail@plt+0x6e64>
   18434:	b	184f0 <__assert_fail@plt+0x6f08>
   18438:	mov	r0, r1
   1843c:	vmul.f32	s6, s2, s0
   18440:	vcmpe.f32	s6, s4
   18444:	vmrs	APSR_nzcv, fpscr
   18448:	bpl	184f0 <__assert_fail@plt+0x6f08>
   1844c:	vldr	s4, [r0, #12]
   18450:	ldrb	r0, [r0, #16]
   18454:	mvn	r7, #0
   18458:	vmul.f32	s0, s4, s0
   1845c:	vldr	s4, [pc, #392]	; 185ec <__assert_fail@plt+0x7004>
   18460:	cmp	r0, #0
   18464:	vmul.f32	s2, s2, s0
   18468:	vseleq.f32	s0, s2, s0
   1846c:	vcmpe.f32	s0, s4
   18470:	vmrs	APSR_nzcv, fpscr
   18474:	bge	1856c <__assert_fail@plt+0x6f84>
   18478:	vcvt.u32.f32	s0, s0
   1847c:	mov	r0, r4
   18480:	vmov	r1, s0
   18484:	bl	17dd4 <__assert_fail@plt+0x67ec>
   18488:	cmp	r0, #0
   1848c:	beq	1856c <__assert_fail@plt+0x6f84>
   18490:	ldr	r1, [r4, #8]
   18494:	ldr	r2, [r4, #24]
   18498:	mov	r0, sl
   1849c:	blx	r2
   184a0:	mov	r7, r0
   184a4:	ldr	r0, [r4, #8]
   184a8:	cmp	r7, r0
   184ac:	bcs	185d8 <__assert_fail@plt+0x6ff0>
   184b0:	ldr	r5, [r4]
   184b4:	mov	r9, r5
   184b8:	ldr	r1, [r9, r7, lsl #3]!
   184bc:	cmp	r1, #0
   184c0:	beq	18518 <__assert_fail@plt+0x6f30>
   184c4:	cmp	r1, sl
   184c8:	mov	r0, sl
   184cc:	beq	184e8 <__assert_fail@plt+0x6f00>
   184d0:	ldr	r2, [r4, #28]
   184d4:	mov	r0, sl
   184d8:	blx	r2
   184dc:	cmp	r0, #0
   184e0:	beq	18588 <__assert_fail@plt+0x6fa0>
   184e4:	ldr	r0, [r9]
   184e8:	cmp	r0, #0
   184ec:	bne	185d8 <__assert_fail@plt+0x6ff0>
   184f0:	ldr	r0, [r9]
   184f4:	cmp	r0, #0
   184f8:	beq	18518 <__assert_fail@plt+0x6f30>
   184fc:	ldr	r0, [r4, #36]	; 0x24
   18500:	cmp	r0, #0
   18504:	beq	18538 <__assert_fail@plt+0x6f50>
   18508:	mov	r1, r0
   1850c:	ldr	r2, [r1, #4]!
   18510:	str	r2, [r4, #36]	; 0x24
   18514:	b	1854c <__assert_fail@plt+0x6f64>
   18518:	str	sl, [r9]
   1851c:	ldr	r0, [r4, #12]
   18520:	ldr	r1, [r4, #16]
   18524:	add	r0, r0, #1
   18528:	add	r1, r1, #1
   1852c:	str	r0, [r4, #12]
   18530:	str	r1, [r4, #16]
   18534:	b	18568 <__assert_fail@plt+0x6f80>
   18538:	mov	r0, #8
   1853c:	bl	1c624 <__assert_fail@plt+0xb03c>
   18540:	cmp	r0, #0
   18544:	beq	18578 <__assert_fail@plt+0x6f90>
   18548:	add	r1, r0, #4
   1854c:	str	sl, [r0]
   18550:	ldr	r2, [r9, #4]
   18554:	str	r2, [r1]
   18558:	str	r0, [r9, #4]
   1855c:	ldr	r0, [r4, #16]
   18560:	add	r0, r0, #1
   18564:	str	r0, [r4, #16]
   18568:	mov	r7, #1
   1856c:	mov	r0, r7
   18570:	sub	sp, fp, #28
   18574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18578:	mvn	r7, #0
   1857c:	mov	r0, r7
   18580:	sub	sp, fp, #28
   18584:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18588:	add	r6, r5, r7, lsl #3
   1858c:	ldr	r0, [r6, #4]!
   18590:	cmp	r0, #0
   18594:	beq	184f0 <__assert_fail@plt+0x6f08>
   18598:	ldr	r1, [r0]
   1859c:	cmp	r1, sl
   185a0:	beq	185cc <__assert_fail@plt+0x6fe4>
   185a4:	ldr	r2, [r4, #28]
   185a8:	mov	r0, sl
   185ac:	blx	r2
   185b0:	ldr	r6, [r6]
   185b4:	cmp	r0, #0
   185b8:	beq	1858c <__assert_fail@plt+0x6fa4>
   185bc:	ldr	r0, [r6]
   185c0:	cmp	r0, #0
   185c4:	beq	184f0 <__assert_fail@plt+0x6f08>
   185c8:	b	185d8 <__assert_fail@plt+0x6ff0>
   185cc:	mov	r0, sl
   185d0:	cmp	r0, #0
   185d4:	beq	184f0 <__assert_fail@plt+0x6f08>
   185d8:	bl	115c4 <abort@plt>
   185dc:	stclcc	12, cr12, [ip, #820]	; 0x334
   185e0:	svccc	0x00666666
   185e4:	svccc	0x008ccccd
   185e8:	svccc	0x004ccccd
   185ec:	svcmi	0x00800000
   185f0:	push	{r4, sl, fp, lr}
   185f4:	add	fp, sp, #8
   185f8:	sub	sp, sp, #8
   185fc:	add	r2, sp, #4
   18600:	mov	r4, r1
   18604:	bl	18284 <__assert_fail@plt+0x6c9c>
   18608:	cmn	r0, #1
   1860c:	beq	18628 <__assert_fail@plt+0x7040>
   18610:	ldr	r1, [sp, #4]
   18614:	cmp	r0, #0
   18618:	moveq	r4, r1
   1861c:	mov	r0, r4
   18620:	sub	sp, fp, #8
   18624:	pop	{r4, sl, fp, pc}
   18628:	mov	r4, #0
   1862c:	mov	r0, r4
   18630:	sub	sp, fp, #8
   18634:	pop	{r4, sl, fp, pc}
   18638:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1863c:	add	fp, sp, #24
   18640:	mov	r9, r1
   18644:	ldr	r1, [r0, #8]
   18648:	ldr	r2, [r0, #24]
   1864c:	mov	r5, r0
   18650:	mov	r0, r9
   18654:	blx	r2
   18658:	mov	r7, r0
   1865c:	ldr	r0, [r5, #8]
   18660:	cmp	r7, r0
   18664:	bcs	188d4 <__assert_fail@plt+0x72ec>
   18668:	ldr	r6, [r5]
   1866c:	mov	r8, #0
   18670:	mov	r4, r6
   18674:	ldr	r1, [r4, r7, lsl #3]!
   18678:	cmp	r1, #0
   1867c:	beq	18730 <__assert_fail@plt+0x7148>
   18680:	cmp	r1, r9
   18684:	beq	186a0 <__assert_fail@plt+0x70b8>
   18688:	ldr	r2, [r5, #28]
   1868c:	mov	r0, r9
   18690:	blx	r2
   18694:	cmp	r0, #0
   18698:	beq	186d8 <__assert_fail@plt+0x70f0>
   1869c:	ldr	r9, [r4]
   186a0:	add	r0, r6, r7, lsl #3
   186a4:	ldr	r0, [r0, #4]
   186a8:	cmp	r0, #0
   186ac:	beq	18720 <__assert_fail@plt+0x7138>
   186b0:	ldm	r0, {r1, r2}
   186b4:	stm	r4, {r1, r2}
   186b8:	mov	r1, #0
   186bc:	str	r1, [r0]
   186c0:	ldr	r1, [r5, #36]	; 0x24
   186c4:	str	r1, [r0, #4]
   186c8:	str	r0, [r5, #36]	; 0x24
   186cc:	cmp	r9, #0
   186d0:	bne	18768 <__assert_fail@plt+0x7180>
   186d4:	b	18730 <__assert_fail@plt+0x7148>
   186d8:	add	r7, r6, r7, lsl #3
   186dc:	ldr	r0, [r7, #4]!
   186e0:	cmp	r0, #0
   186e4:	beq	18730 <__assert_fail@plt+0x7148>
   186e8:	ldr	r1, [r0]
   186ec:	cmp	r1, r9
   186f0:	beq	18738 <__assert_fail@plt+0x7150>
   186f4:	ldr	r2, [r5, #28]
   186f8:	mov	r0, r9
   186fc:	blx	r2
   18700:	ldr	r1, [r7]
   18704:	cmp	r0, #0
   18708:	bne	18740 <__assert_fail@plt+0x7158>
   1870c:	ldr	r0, [r1, #4]!
   18710:	cmp	r0, #0
   18714:	mov	r7, r1
   18718:	bne	186e8 <__assert_fail@plt+0x7100>
   1871c:	b	18730 <__assert_fail@plt+0x7148>
   18720:	mov	r0, #0
   18724:	str	r0, [r4]
   18728:	cmp	r9, #0
   1872c:	bne	18768 <__assert_fail@plt+0x7180>
   18730:	mov	r0, r8
   18734:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   18738:	mov	r1, r0
   1873c:	b	18744 <__assert_fail@plt+0x715c>
   18740:	ldr	r9, [r1]
   18744:	ldr	r0, [r1, #4]
   18748:	str	r0, [r7]
   1874c:	mov	r0, #0
   18750:	str	r0, [r1]
   18754:	ldr	r0, [r5, #36]	; 0x24
   18758:	str	r0, [r1, #4]
   1875c:	str	r1, [r5, #36]	; 0x24
   18760:	cmp	r9, #0
   18764:	beq	18730 <__assert_fail@plt+0x7148>
   18768:	ldr	r0, [r5, #16]
   1876c:	sub	r0, r0, #1
   18770:	str	r0, [r5, #16]
   18774:	ldr	r0, [r4]
   18778:	cmp	r0, #0
   1877c:	bne	18894 <__assert_fail@plt+0x72ac>
   18780:	ldr	r0, [r5, #12]
   18784:	vldr	s0, [r5, #8]
   18788:	sub	r1, r0, #1
   1878c:	str	r1, [r5, #12]
   18790:	vmov	s2, r1
   18794:	ldr	r0, [r5, #20]
   18798:	vcvt.f32.u32	s0, s0
   1879c:	vcvt.f32.u32	s2, s2
   187a0:	vldr	s4, [r0]
   187a4:	vmul.f32	s6, s4, s0
   187a8:	vcmpe.f32	s6, s2
   187ac:	vmrs	APSR_nzcv, fpscr
   187b0:	ble	18894 <__assert_fail@plt+0x72ac>
   187b4:	movw	r1, #58376	; 0xe408
   187b8:	movt	r1, #1
   187bc:	cmp	r0, r1
   187c0:	beq	18828 <__assert_fail@plt+0x7240>
   187c4:	vldr	s8, [pc, #268]	; 188d8 <__assert_fail@plt+0x72f0>
   187c8:	vldr	s6, [r0, #8]
   187cc:	vcmpe.f32	s6, s8
   187d0:	vmrs	APSR_nzcv, fpscr
   187d4:	ble	18804 <__assert_fail@plt+0x721c>
   187d8:	vldr	s10, [pc, #252]	; 188dc <__assert_fail@plt+0x72f4>
   187dc:	vcmpe.f32	s6, s10
   187e0:	vmrs	APSR_nzcv, fpscr
   187e4:	bpl	18804 <__assert_fail@plt+0x721c>
   187e8:	vcmpe.f32	s4, #0.0
   187ec:	vmrs	APSR_nzcv, fpscr
   187f0:	vldrge	s10, [r0, #12]
   187f4:	vldrge	s12, [pc, #228]	; 188e0 <__assert_fail@plt+0x72f8>
   187f8:	vcmpege.f32	s10, s12
   187fc:	vmrsge	APSR_nzcv, fpscr
   18800:	bgt	188a0 <__assert_fail@plt+0x72b8>
   18804:	vldr	s4, [pc, #216]	; 188e4 <__assert_fail@plt+0x72fc>
   18808:	movw	r0, #58376	; 0xe408
   1880c:	movt	r0, #1
   18810:	str	r0, [r5, #20]
   18814:	vmul.f32	s4, s4, s0
   18818:	vcmpe.f32	s4, s2
   1881c:	vmrs	APSR_nzcv, fpscr
   18820:	bgt	1883c <__assert_fail@plt+0x7254>
   18824:	b	18894 <__assert_fail@plt+0x72ac>
   18828:	mov	r0, r1
   1882c:	vmul.f32	s4, s4, s0
   18830:	vcmpe.f32	s4, s2
   18834:	vmrs	APSR_nzcv, fpscr
   18838:	ble	18894 <__assert_fail@plt+0x72ac>
   1883c:	ldrb	r1, [r0, #16]
   18840:	vldr	s2, [r0, #4]
   18844:	cmp	r1, #0
   18848:	vmul.f32	s0, s2, s0
   1884c:	vldreq	s2, [r0, #8]
   18850:	mov	r0, r5
   18854:	vmuleq.f32	s0, s0, s2
   18858:	vcvt.u32.f32	s0, s0
   1885c:	vmov	r1, s0
   18860:	bl	17dd4 <__assert_fail@plt+0x67ec>
   18864:	cmp	r0, #0
   18868:	bne	18894 <__assert_fail@plt+0x72ac>
   1886c:	ldr	r0, [r5, #36]	; 0x24
   18870:	cmp	r0, #0
   18874:	beq	1888c <__assert_fail@plt+0x72a4>
   18878:	ldr	r4, [r0, #4]
   1887c:	bl	174f0 <__assert_fail@plt+0x5f08>
   18880:	cmp	r4, #0
   18884:	mov	r0, r4
   18888:	bne	18878 <__assert_fail@plt+0x7290>
   1888c:	mov	r0, #0
   18890:	str	r0, [r5, #36]	; 0x24
   18894:	mov	r8, r9
   18898:	mov	r0, r8
   1889c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   188a0:	vadd.f32	s8, s4, s8
   188a4:	vcmpe.f32	s8, s6
   188a8:	vmrs	APSR_nzcv, fpscr
   188ac:	bpl	18804 <__assert_fail@plt+0x721c>
   188b0:	vldr	s6, [r0, #4]
   188b4:	vmov.f32	s10, #112	; 0x3f800000  1.0
   188b8:	vcmpe.f32	s6, s10
   188bc:	vmrs	APSR_nzcv, fpscr
   188c0:	bhi	18804 <__assert_fail@plt+0x721c>
   188c4:	vcmpe.f32	s8, s6
   188c8:	vmrs	APSR_nzcv, fpscr
   188cc:	bmi	1882c <__assert_fail@plt+0x7244>
   188d0:	b	18804 <__assert_fail@plt+0x721c>
   188d4:	bl	115c4 <abort@plt>
   188d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   188dc:	svccc	0x00666666
   188e0:	svccc	0x008ccccd
   188e4:	andeq	r0, r0, r0
   188e8:	b	18638 <__assert_fail@plt+0x7050>
   188ec:	push	{r4, r5, r6, sl, fp, lr}
   188f0:	add	fp, sp, #16
   188f4:	mov	r5, r0
   188f8:	mov	r0, #0
   188fc:	mov	r4, r1
   18900:	add	r6, r2, #19
   18904:	cmp	r1, #0
   18908:	strb	r0, [r2, #20]
   1890c:	blt	1895c <__assert_fail@plt+0x7374>
   18910:	mov	r0, r5
   18914:	mov	r1, r4
   18918:	mov	r2, #10
   1891c:	mov	r3, #0
   18920:	bl	1cc08 <__assert_fail@plt+0xb620>
   18924:	add	r2, r0, r0, lsl #2
   18928:	sub	r2, r5, r2, lsl #1
   1892c:	add	r2, r2, #48	; 0x30
   18930:	strb	r2, [r6], #-1
   18934:	adds	r2, r5, #9
   18938:	mov	r5, r0
   1893c:	adc	r3, r4, #0
   18940:	rsbs	r2, r2, #18
   18944:	mov	r4, r1
   18948:	rscs	r2, r3, #0
   1894c:	bcc	18910 <__assert_fail@plt+0x7328>
   18950:	add	r6, r6, #1
   18954:	mov	r0, r6
   18958:	pop	{r4, r5, r6, sl, fp, pc}
   1895c:	mov	r0, r5
   18960:	mov	r1, r4
   18964:	mov	r2, #10
   18968:	mov	r3, #0
   1896c:	bl	1cc08 <__assert_fail@plt+0xb620>
   18970:	add	r2, r0, r0, lsl #2
   18974:	rsb	r2, r5, r2, lsl #1
   18978:	add	r2, r2, #48	; 0x30
   1897c:	strb	r2, [r6], #-1
   18980:	adds	r2, r5, #9
   18984:	mov	r5, r0
   18988:	adc	r3, r4, #0
   1898c:	rsbs	r2, r2, #18
   18990:	mov	r4, r1
   18994:	rscs	r2, r3, #0
   18998:	bcc	1895c <__assert_fail@plt+0x7374>
   1899c:	mov	r0, #45	; 0x2d
   189a0:	strb	r0, [r6]
   189a4:	mov	r0, r6
   189a8:	pop	{r4, r5, r6, sl, fp, pc}
   189ac:	push	{r4, sl, fp, lr}
   189b0:	add	fp, sp, #8
   189b4:	sub	sp, sp, #8
   189b8:	movw	r0, #58396	; 0xe41c
   189bc:	movt	r0, #1
   189c0:	bl	11408 <getenv@plt>
   189c4:	cmp	r0, #0
   189c8:	movw	r4, #4201	; 0x1069
   189cc:	ldrbne	r1, [r0]
   189d0:	movt	r4, #3
   189d4:	cmpne	r1, #0
   189d8:	bne	189e8 <__assert_fail@plt+0x7400>
   189dc:	mov	r0, r4
   189e0:	sub	sp, fp, #8
   189e4:	pop	{r4, sl, fp, pc}
   189e8:	add	r1, sp, #4
   189ec:	mov	r2, #10
   189f0:	bl	112c4 <strtol@plt>
   189f4:	ldr	r1, [sp, #4]
   189f8:	ldrb	r1, [r1]
   189fc:	cmp	r1, #0
   18a00:	moveq	r4, r0
   18a04:	mov	r0, r4
   18a08:	sub	sp, fp, #8
   18a0c:	pop	{r4, sl, fp, pc}
   18a10:	push	{r4, r5, fp, lr}
   18a14:	add	fp, sp, #8
   18a18:	cmp	r0, #0
   18a1c:	beq	18ab0 <__assert_fail@plt+0x74c8>
   18a20:	mov	r1, #47	; 0x2f
   18a24:	mov	r4, r0
   18a28:	bl	11558 <strrchr@plt>
   18a2c:	cmp	r0, #0
   18a30:	mov	r5, r4
   18a34:	addne	r5, r0, #1
   18a38:	sub	r0, r5, r4
   18a3c:	cmp	r0, #7
   18a40:	blt	18a94 <__assert_fail@plt+0x74ac>
   18a44:	movw	r1, #58468	; 0xe464
   18a48:	sub	r0, r5, #7
   18a4c:	mov	r2, #7
   18a50:	movt	r1, #1
   18a54:	bl	115b8 <strncmp@plt>
   18a58:	cmp	r0, #0
   18a5c:	bne	18a94 <__assert_fail@plt+0x74ac>
   18a60:	movw	r1, #58476	; 0xe46c
   18a64:	mov	r0, r5
   18a68:	mov	r2, #3
   18a6c:	movt	r1, #1
   18a70:	bl	115b8 <strncmp@plt>
   18a74:	cmp	r0, #0
   18a78:	beq	18a84 <__assert_fail@plt+0x749c>
   18a7c:	mov	r4, r5
   18a80:	b	18a94 <__assert_fail@plt+0x74ac>
   18a84:	movw	r0, #61856	; 0xf1a0
   18a88:	add	r4, r5, #3
   18a8c:	movt	r0, #2
   18a90:	str	r4, [r0]
   18a94:	movw	r0, #61860	; 0xf1a4
   18a98:	movt	r0, #2
   18a9c:	str	r4, [r0]
   18aa0:	movw	r0, #61916	; 0xf1dc
   18aa4:	movt	r0, #2
   18aa8:	str	r4, [r0]
   18aac:	pop	{r4, r5, fp, pc}
   18ab0:	movw	r0, #61872	; 0xf1b0
   18ab4:	mov	r1, #55	; 0x37
   18ab8:	mov	r2, #1
   18abc:	movt	r0, #2
   18ac0:	ldr	r3, [r0]
   18ac4:	movw	r0, #58412	; 0xe42c
   18ac8:	movt	r0, #1
   18acc:	bl	113b4 <fwrite@plt>
   18ad0:	bl	115c4 <abort@plt>
   18ad4:	push	{r4, r5, r6, sl, fp, lr}
   18ad8:	add	fp, sp, #16
   18adc:	mov	r4, r0
   18ae0:	movw	r0, #61920	; 0xf1e0
   18ae4:	movt	r0, #2
   18ae8:	cmp	r4, #0
   18aec:	moveq	r4, r0
   18af0:	bl	114b0 <__errno_location@plt>
   18af4:	ldr	r6, [r0]
   18af8:	mov	r5, r0
   18afc:	mov	r0, r4
   18b00:	mov	r1, #48	; 0x30
   18b04:	bl	1b56c <__assert_fail@plt+0x9f84>
   18b08:	str	r6, [r5]
   18b0c:	pop	{r4, r5, r6, sl, fp, pc}
   18b10:	movw	r1, #61920	; 0xf1e0
   18b14:	cmp	r0, #0
   18b18:	movt	r1, #2
   18b1c:	movne	r1, r0
   18b20:	ldr	r0, [r1]
   18b24:	bx	lr
   18b28:	movw	r2, #61920	; 0xf1e0
   18b2c:	cmp	r0, #0
   18b30:	movt	r2, #2
   18b34:	movne	r2, r0
   18b38:	str	r1, [r2]
   18b3c:	bx	lr
   18b40:	movw	r3, #61920	; 0xf1e0
   18b44:	cmp	r0, #0
   18b48:	movt	r3, #2
   18b4c:	movne	r3, r0
   18b50:	ubfx	r0, r1, #5, #3
   18b54:	and	r1, r1, #31
   18b58:	add	r0, r3, r0, lsl #2
   18b5c:	ldr	r3, [r0, #8]
   18b60:	eor	r2, r2, r3, lsr r1
   18b64:	and	r2, r2, #1
   18b68:	eor	r2, r3, r2, lsl r1
   18b6c:	str	r2, [r0, #8]
   18b70:	mov	r0, #1
   18b74:	and	r0, r0, r3, lsr r1
   18b78:	bx	lr
   18b7c:	movw	r2, #61920	; 0xf1e0
   18b80:	cmp	r0, #0
   18b84:	movt	r2, #2
   18b88:	movne	r2, r0
   18b8c:	ldr	r0, [r2, #4]
   18b90:	str	r1, [r2, #4]
   18b94:	bx	lr
   18b98:	movw	r3, #61920	; 0xf1e0
   18b9c:	cmp	r0, #0
   18ba0:	movt	r3, #2
   18ba4:	movne	r3, r0
   18ba8:	cmp	r1, #0
   18bac:	mov	r0, #10
   18bb0:	cmpne	r2, #0
   18bb4:	str	r0, [r3]
   18bb8:	bne	18bc8 <__assert_fail@plt+0x75e0>
   18bbc:	push	{fp, lr}
   18bc0:	mov	fp, sp
   18bc4:	bl	115c4 <abort@plt>
   18bc8:	str	r1, [r3, #40]	; 0x28
   18bcc:	str	r2, [r3, #44]	; 0x2c
   18bd0:	bx	lr
   18bd4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18bd8:	add	fp, sp, #28
   18bdc:	sub	sp, sp, #20
   18be0:	mov	r7, r0
   18be4:	ldr	r0, [fp, #8]
   18be8:	movw	r5, #61920	; 0xf1e0
   18bec:	mov	r8, r3
   18bf0:	mov	r9, r2
   18bf4:	mov	sl, r1
   18bf8:	movt	r5, #2
   18bfc:	cmp	r0, #0
   18c00:	movne	r5, r0
   18c04:	bl	114b0 <__errno_location@plt>
   18c08:	mov	r4, r0
   18c0c:	ldm	r5, {r0, r1}
   18c10:	ldr	r2, [r5, #40]	; 0x28
   18c14:	ldr	r3, [r5, #44]	; 0x2c
   18c18:	add	r5, r5, #8
   18c1c:	ldr	r6, [r4]
   18c20:	stm	sp, {r0, r1, r5}
   18c24:	str	r2, [sp, #12]
   18c28:	str	r3, [sp, #16]
   18c2c:	mov	r0, r7
   18c30:	mov	r1, sl
   18c34:	mov	r2, r9
   18c38:	mov	r3, r8
   18c3c:	bl	18c4c <__assert_fail@plt+0x7664>
   18c40:	str	r6, [r4]
   18c44:	sub	sp, fp, #28
   18c48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c50:	add	fp, sp, #28
   18c54:	sub	sp, sp, #156	; 0x9c
   18c58:	str	r0, [sp, #76]	; 0x4c
   18c5c:	ldr	r0, [fp, #12]
   18c60:	mov	r6, r1
   18c64:	str	r3, [sp, #84]	; 0x54
   18c68:	str	r2, [fp, #-84]	; 0xffffffac
   18c6c:	and	r1, r0, #4
   18c70:	str	r1, [sp, #24]
   18c74:	and	r1, r0, #1
   18c78:	str	r1, [sp, #28]
   18c7c:	ubfx	r8, r0, #1, #1
   18c80:	bl	113cc <__ctype_get_mb_cur_max@plt>
   18c84:	str	r0, [sp, #32]
   18c88:	ldr	r0, [fp, #24]
   18c8c:	ldr	r7, [fp, #8]
   18c90:	mov	r1, #0
   18c94:	mov	r2, #0
   18c98:	mov	r4, #1
   18c9c:	str	r1, [sp, #52]	; 0x34
   18ca0:	str	r0, [sp, #72]	; 0x48
   18ca4:	ldr	r0, [fp, #20]
   18ca8:	str	r0, [sp, #68]	; 0x44
   18cac:	mov	r0, #0
   18cb0:	str	r0, [sp, #48]	; 0x30
   18cb4:	mov	r0, #0
   18cb8:	str	r0, [sp, #92]	; 0x5c
   18cbc:	mov	r0, #0
   18cc0:	str	r0, [fp, #-76]	; 0xffffffb4
   18cc4:	mov	r0, #0
   18cc8:	cmp	r7, #10
   18ccc:	bhi	19fb4 <__assert_fail@plt+0x89cc>
   18cd0:	add	r1, pc, #28
   18cd4:	mov	sl, r6
   18cd8:	ldr	r6, [sp, #76]	; 0x4c
   18cdc:	ldr	ip, [fp, #-84]	; 0xffffffac
   18ce0:	ldr	lr, [sp, #84]	; 0x54
   18ce4:	mov	r9, #0
   18ce8:	mov	r3, #1
   18cec:	mov	r5, #0
   18cf0:	ldr	pc, [r1, r7, lsl #2]
   18cf4:	andeq	r8, r1, r4, asr #27
   18cf8:	andeq	r8, r1, r0, lsl #28
   18cfc:	ldrdeq	r8, [r1], -r4
   18d00:			; <UNDEFINED> instruction: 0x00018dbc
   18d04:	strdeq	r8, [r1], -r4
   18d08:	andeq	r8, r1, r8, lsr #28
   18d0c:	andeq	r8, r1, r4, ror #27
   18d10:	andeq	r9, r1, r4, lsr r0
   18d14:	andeq	r8, r1, r0, lsr #26
   18d18:	andeq	r8, r1, r0, lsr #26
   18d1c:	andeq	r8, r1, r8, asr #31
   18d20:	mov	r9, r4
   18d24:	movw	r4, #58558	; 0xe4be
   18d28:	mov	r5, r8
   18d2c:	mov	r8, r2
   18d30:	mov	r0, #0
   18d34:	mov	r2, #5
   18d38:	movt	r4, #1
   18d3c:	mov	r1, r4
   18d40:	bl	11354 <dcgettext@plt>
   18d44:	cmp	r0, r4
   18d48:	str	r0, [sp, #68]	; 0x44
   18d4c:	bne	18edc <__assert_fail@plt+0x78f4>
   18d50:	bl	1ca20 <__assert_fail@plt+0xb438>
   18d54:	ldrb	r1, [r0]
   18d58:	and	r1, r1, #223	; 0xdf
   18d5c:	cmp	r1, #71	; 0x47
   18d60:	beq	18ea8 <__assert_fail@plt+0x78c0>
   18d64:	cmp	r1, #85	; 0x55
   18d68:	bne	18ec0 <__assert_fail@plt+0x78d8>
   18d6c:	ldrb	r1, [r0, #1]
   18d70:	and	r1, r1, #223	; 0xdf
   18d74:	cmp	r1, #84	; 0x54
   18d78:	bne	18ec0 <__assert_fail@plt+0x78d8>
   18d7c:	ldrb	r1, [r0, #2]
   18d80:	and	r1, r1, #223	; 0xdf
   18d84:	cmp	r1, #70	; 0x46
   18d88:	bne	18ec0 <__assert_fail@plt+0x78d8>
   18d8c:	ldrb	r1, [r0, #3]
   18d90:	cmp	r1, #45	; 0x2d
   18d94:	ldrbeq	r1, [r0, #4]
   18d98:	cmpeq	r1, #56	; 0x38
   18d9c:	bne	18ec0 <__assert_fail@plt+0x78d8>
   18da0:	ldrb	r0, [r0, #5]
   18da4:	cmp	r0, #0
   18da8:	movw	r0, #58562	; 0xe4c2
   18dac:	movt	r0, #1
   18db0:	str	r0, [sp, #68]	; 0x44
   18db4:	bne	18ec0 <__assert_fail@plt+0x78d8>
   18db8:	b	18edc <__assert_fail@plt+0x78f4>
   18dbc:	mov	r0, #1
   18dc0:	b	18e00 <__assert_fail@plt+0x7818>
   18dc4:	mov	r7, #0
   18dc8:	mov	r9, #0
   18dcc:	mov	r3, r0
   18dd0:	b	18ea0 <__assert_fail@plt+0x78b8>
   18dd4:	tst	r8, #1
   18dd8:	bne	18e00 <__assert_fail@plt+0x7818>
   18ddc:	mov	r3, r0
   18de0:	b	18e58 <__assert_fail@plt+0x7870>
   18de4:	mov	r0, #1
   18de8:	mov	r9, #0
   18dec:	mov	r7, #5
   18df0:	b	18e3c <__assert_fail@plt+0x7854>
   18df4:	mov	r3, #1
   18df8:	tst	r8, #1
   18dfc:	beq	18e58 <__assert_fail@plt+0x7870>
   18e00:	mov	r1, #1
   18e04:	mov	r9, #0
   18e08:	mov	r7, #2
   18e0c:	mov	r3, r0
   18e10:	mov	r5, #1
   18e14:	str	r1, [fp, #-76]	; 0xffffffb4
   18e18:	movw	r1, #58560	; 0xe4c0
   18e1c:	movt	r1, #1
   18e20:	str	r1, [sp, #92]	; 0x5c
   18e24:	b	19034 <__assert_fail@plt+0x7a4c>
   18e28:	mov	r7, #5
   18e2c:	tst	r8, #1
   18e30:	beq	18e78 <__assert_fail@plt+0x7890>
   18e34:	mov	r0, #1
   18e38:	mov	r9, #0
   18e3c:	str	r0, [fp, #-76]	; 0xffffffb4
   18e40:	movw	r0, #58556	; 0xe4bc
   18e44:	mov	r3, #1
   18e48:	mov	r5, #1
   18e4c:	movt	r0, #1
   18e50:	str	r0, [sp, #92]	; 0x5c
   18e54:	b	19034 <__assert_fail@plt+0x7a4c>
   18e58:	cmp	sl, #0
   18e5c:	mov	r9, #1
   18e60:	mov	r7, #2
   18e64:	movne	r0, #39	; 0x27
   18e68:	strbne	r0, [r6]
   18e6c:	movw	r0, #58560	; 0xe4c0
   18e70:	movt	r0, #1
   18e74:	b	18e94 <__assert_fail@plt+0x78ac>
   18e78:	cmp	sl, #0
   18e7c:	mov	r9, #1
   18e80:	mov	r3, #1
   18e84:	movne	r0, #34	; 0x22
   18e88:	strbne	r0, [r6]
   18e8c:	movw	r0, #58556	; 0xe4bc
   18e90:	movt	r0, #1
   18e94:	str	r0, [sp, #92]	; 0x5c
   18e98:	mov	r0, #1
   18e9c:	str	r0, [fp, #-76]	; 0xffffffb4
   18ea0:	mov	r5, #0
   18ea4:	b	19034 <__assert_fail@plt+0x7a4c>
   18ea8:	ldrb	r1, [r0, #1]
   18eac:	and	r1, r1, #223	; 0xdf
   18eb0:	cmp	r1, #66	; 0x42
   18eb4:	ldrbeq	r1, [r0, #2]
   18eb8:	cmpeq	r1, #49	; 0x31
   18ebc:	beq	19ddc <__assert_fail@plt+0x87f4>
   18ec0:	movw	r0, #58560	; 0xe4c0
   18ec4:	movw	r1, #58556	; 0xe4bc
   18ec8:	cmp	r7, #9
   18ecc:	movt	r0, #1
   18ed0:	movt	r1, #1
   18ed4:	moveq	r0, r1
   18ed8:	str	r0, [sp, #68]	; 0x44
   18edc:	movw	r4, #58560	; 0xe4c0
   18ee0:	mov	r0, #0
   18ee4:	mov	r2, #5
   18ee8:	movt	r4, #1
   18eec:	mov	r1, r4
   18ef0:	bl	11354 <dcgettext@plt>
   18ef4:	cmp	r0, r4
   18ef8:	str	r0, [sp, #72]	; 0x48
   18efc:	beq	18f0c <__assert_fail@plt+0x7924>
   18f00:	mov	r4, r9
   18f04:	mov	r2, r8
   18f08:	b	18fc4 <__assert_fail@plt+0x79dc>
   18f0c:	bl	1ca20 <__assert_fail@plt+0xb438>
   18f10:	ldrb	r1, [r0]
   18f14:	mov	r4, r9
   18f18:	and	r1, r1, #223	; 0xdf
   18f1c:	cmp	r1, #71	; 0x47
   18f20:	beq	18f7c <__assert_fail@plt+0x7994>
   18f24:	cmp	r1, #85	; 0x55
   18f28:	mov	r2, r8
   18f2c:	bne	18fa4 <__assert_fail@plt+0x79bc>
   18f30:	ldrb	r1, [r0, #1]
   18f34:	and	r1, r1, #223	; 0xdf
   18f38:	cmp	r1, #84	; 0x54
   18f3c:	bne	18fa4 <__assert_fail@plt+0x79bc>
   18f40:	ldrb	r1, [r0, #2]
   18f44:	and	r1, r1, #223	; 0xdf
   18f48:	cmp	r1, #70	; 0x46
   18f4c:	ldrbeq	r1, [r0, #3]
   18f50:	cmpeq	r1, #45	; 0x2d
   18f54:	bne	18fa4 <__assert_fail@plt+0x79bc>
   18f58:	ldrb	r1, [r0, #4]
   18f5c:	cmp	r1, #56	; 0x38
   18f60:	ldrbeq	r0, [r0, #5]
   18f64:	cmpeq	r0, #0
   18f68:	bne	18fa4 <__assert_fail@plt+0x79bc>
   18f6c:	movw	r0, #58566	; 0xe4c6
   18f70:	movt	r0, #1
   18f74:	str	r0, [sp, #72]	; 0x48
   18f78:	b	18fc4 <__assert_fail@plt+0x79dc>
   18f7c:	ldrb	r1, [r0, #1]
   18f80:	mov	r2, r8
   18f84:	and	r1, r1, #223	; 0xdf
   18f88:	cmp	r1, #66	; 0x42
   18f8c:	bne	18fa4 <__assert_fail@plt+0x79bc>
   18f90:	ldrb	r1, [r0, #2]
   18f94:	cmp	r1, #49	; 0x31
   18f98:	ldrbeq	r1, [r0, #3]
   18f9c:	cmpeq	r1, #56	; 0x38
   18fa0:	beq	19e20 <__assert_fail@plt+0x8838>
   18fa4:	movw	r0, #58560	; 0xe4c0
   18fa8:	cmp	r7, #9
   18fac:	movt	r0, #1
   18fb0:	mov	r1, r0
   18fb4:	movw	r0, #58556	; 0xe4bc
   18fb8:	movt	r0, #1
   18fbc:	moveq	r1, r0
   18fc0:	str	r1, [sp, #72]	; 0x48
   18fc4:	mov	r8, r5
   18fc8:	mov	r9, #0
   18fcc:	tst	r8, #1
   18fd0:	mov	r5, r8
   18fd4:	str	r2, [fp, #-48]	; 0xffffffd0
   18fd8:	bne	19010 <__assert_fail@plt+0x7a28>
   18fdc:	ldr	r0, [sp, #68]	; 0x44
   18fe0:	ldrb	r0, [r0]
   18fe4:	cmp	r0, #0
   18fe8:	beq	19010 <__assert_fail@plt+0x7a28>
   18fec:	ldr	r1, [sp, #68]	; 0x44
   18ff0:	mov	r9, #0
   18ff4:	add	r1, r1, #1
   18ff8:	cmp	r9, sl
   18ffc:	strbcc	r0, [r6, r9]
   19000:	ldrb	r0, [r1, r9]
   19004:	add	r9, r9, #1
   19008:	cmp	r0, #0
   1900c:	bne	18ff8 <__assert_fail@plt+0x7a10>
   19010:	ldr	r8, [sp, #72]	; 0x48
   19014:	mov	r0, r8
   19018:	bl	11474 <strlen@plt>
   1901c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19020:	ldr	lr, [sp, #84]	; 0x54
   19024:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19028:	str	r0, [fp, #-76]	; 0xffffffb4
   1902c:	str	r8, [sp, #92]	; 0x5c
   19030:	mov	r3, #1
   19034:	ldr	r0, [fp, #16]
   19038:	str	r7, [fp, #-64]	; 0xffffffc0
   1903c:	str	r5, [fp, #-72]	; 0xffffffb8
   19040:	str	r3, [sp, #80]	; 0x50
   19044:	cmp	r0, #0
   19048:	movwne	r0, #1
   1904c:	and	r0, r0, r5
   19050:	str	r0, [fp, #-88]	; 0xffffffa8
   19054:	ldr	r0, [fp, #-76]	; 0xffffffb4
   19058:	cmp	r0, #0
   1905c:	movwne	r0, #1
   19060:	subs	r7, r7, #2
   19064:	and	r1, r0, r5
   19068:	str	r7, [fp, #-80]	; 0xffffffb0
   1906c:	and	r1, r3, r1
   19070:	str	r1, [sp, #40]	; 0x28
   19074:	clz	r1, r7
   19078:	lsr	r1, r1, #5
   1907c:	and	r1, r1, r5
   19080:	eor	r5, r5, #1
   19084:	str	r1, [sp, #36]	; 0x24
   19088:	mov	r1, r7
   1908c:	str	r5, [sp, #88]	; 0x58
   19090:	mov	r7, #0
   19094:	movwne	r1, #1
   19098:	orr	r5, r1, r5
   1909c:	and	r1, r1, r3
   190a0:	and	r0, r0, r1
   190a4:	str	r5, [sp, #60]	; 0x3c
   190a8:	str	r1, [fp, #-68]	; 0xffffffbc
   190ac:	str	r0, [fp, #-60]	; 0xffffffc4
   190b0:	eor	r0, r3, #1
   190b4:	str	r0, [sp, #44]	; 0x2c
   190b8:	cmn	lr, #1
   190bc:	beq	190cc <__assert_fail@plt+0x7ae4>
   190c0:	cmp	r7, lr
   190c4:	bne	190d8 <__assert_fail@plt+0x7af0>
   190c8:	b	19d50 <__assert_fail@plt+0x8768>
   190cc:	ldrb	r0, [ip, r7]
   190d0:	cmp	r0, #0
   190d4:	beq	19d58 <__assert_fail@plt+0x8770>
   190d8:	ldr	r0, [fp, #-60]	; 0xffffffc4
   190dc:	mov	r8, #0
   190e0:	str	r4, [fp, #-52]	; 0xffffffcc
   190e4:	str	r2, [fp, #-48]	; 0xffffffd0
   190e8:	cmp	r0, #0
   190ec:	beq	19120 <__assert_fail@plt+0x7b38>
   190f0:	ldr	r0, [fp, #-76]	; 0xffffffb4
   190f4:	add	r4, r7, r0
   190f8:	cmp	r0, #2
   190fc:	bcc	19118 <__assert_fail@plt+0x7b30>
   19100:	cmn	lr, #1
   19104:	bne	19118 <__assert_fail@plt+0x7b30>
   19108:	mov	r0, ip
   1910c:	bl	11474 <strlen@plt>
   19110:	ldr	ip, [fp, #-84]	; 0xffffffac
   19114:	mov	lr, r0
   19118:	cmp	r4, lr
   1911c:	bls	19138 <__assert_fail@plt+0x7b50>
   19120:	mov	r0, #0
   19124:	str	r0, [fp, #-56]	; 0xffffffc8
   19128:	ldrb	r5, [ip, r7]
   1912c:	cmp	r5, #126	; 0x7e
   19130:	bls	19188 <__assert_fail@plt+0x7ba0>
   19134:	b	19590 <__assert_fail@plt+0x7fa8>
   19138:	ldr	r1, [sp, #92]	; 0x5c
   1913c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   19140:	add	r0, ip, r7
   19144:	mov	r4, lr
   19148:	bl	11348 <memcmp@plt>
   1914c:	ldr	r2, [sp, #88]	; 0x58
   19150:	cmp	r0, #0
   19154:	mov	r1, r0
   19158:	movwne	r1, #1
   1915c:	orr	r1, r1, r2
   19160:	tst	r1, #1
   19164:	beq	19e64 <__assert_fail@plt+0x887c>
   19168:	ldr	ip, [fp, #-84]	; 0xffffffac
   1916c:	clz	r0, r0
   19170:	mov	lr, r4
   19174:	lsr	r0, r0, #5
   19178:	str	r0, [fp, #-56]	; 0xffffffc8
   1917c:	ldrb	r5, [ip, r7]
   19180:	cmp	r5, #126	; 0x7e
   19184:	bhi	19590 <__assert_fail@plt+0x7fa8>
   19188:	add	r3, pc, #16
   1918c:	mov	r4, #1
   19190:	mov	r2, #110	; 0x6e
   19194:	mov	r0, #97	; 0x61
   19198:	mov	r1, #0
   1919c:	ldr	pc, [r3, r5, lsl #2]
   191a0:	andeq	r9, r1, r0, ror r4
   191a4:	muleq	r1, r0, r5
   191a8:	muleq	r1, r0, r5
   191ac:	muleq	r1, r0, r5
   191b0:	muleq	r1, r0, r5
   191b4:	muleq	r1, r0, r5
   191b8:	muleq	r1, r0, r5
   191bc:	andeq	r9, r1, ip, ror #12
   191c0:	andeq	r9, r1, r0, asr r4
   191c4:	andeq	r9, r1, r8, lsr r4
   191c8:	andeq	r9, r1, ip, asr r4
   191cc:	andeq	r9, r1, ip, ror #9
   191d0:	andeq	r9, r1, r0, lsr r4
   191d4:	andeq	r9, r1, r8, asr r4
   191d8:	muleq	r1, r0, r5
   191dc:	muleq	r1, r0, r5
   191e0:	muleq	r1, r0, r5
   191e4:	muleq	r1, r0, r5
   191e8:	muleq	r1, r0, r5
   191ec:	muleq	r1, r0, r5
   191f0:	muleq	r1, r0, r5
   191f4:	muleq	r1, r0, r5
   191f8:	muleq	r1, r0, r5
   191fc:	muleq	r1, r0, r5
   19200:	muleq	r1, r0, r5
   19204:	muleq	r1, r0, r5
   19208:	muleq	r1, r0, r5
   1920c:	muleq	r1, r0, r5
   19210:	muleq	r1, r0, r5
   19214:	muleq	r1, r0, r5
   19218:	muleq	r1, r0, r5
   1921c:	muleq	r1, r0, r5
   19220:	andeq	r9, r1, r8, ror #11
   19224:	andeq	r9, r1, ip, ror #11
   19228:	andeq	r9, r1, ip, ror #11
   1922c:			; <UNDEFINED> instruction: 0x000193bc
   19230:	andeq	r9, r1, ip, ror #11
   19234:	muleq	r1, ip, r3
   19238:	andeq	r9, r1, ip, ror #11
   1923c:	strdeq	r9, [r1], -r4
   19240:	andeq	r9, r1, ip, ror #11
   19244:	andeq	r9, r1, ip, ror #11
   19248:	andeq	r9, r1, ip, ror #11
   1924c:	muleq	r1, ip, r3
   19250:	muleq	r1, ip, r3
   19254:	muleq	r1, ip, r3
   19258:	muleq	r1, ip, r3
   1925c:	muleq	r1, ip, r3
   19260:	muleq	r1, ip, r3
   19264:	muleq	r1, ip, r3
   19268:	muleq	r1, ip, r3
   1926c:	muleq	r1, ip, r3
   19270:	muleq	r1, ip, r3
   19274:	muleq	r1, ip, r3
   19278:	muleq	r1, ip, r3
   1927c:	muleq	r1, ip, r3
   19280:	muleq	r1, ip, r3
   19284:	muleq	r1, ip, r3
   19288:	muleq	r1, ip, r3
   1928c:	andeq	r9, r1, ip, ror #11
   19290:	andeq	r9, r1, ip, ror #11
   19294:	andeq	r9, r1, ip, ror #11
   19298:	andeq	r9, r1, ip, ror #11
   1929c:			; <UNDEFINED> instruction: 0x000194b0
   192a0:	muleq	r1, r0, r5
   192a4:	muleq	r1, ip, r3
   192a8:	muleq	r1, ip, r3
   192ac:	muleq	r1, ip, r3
   192b0:	muleq	r1, ip, r3
   192b4:	muleq	r1, ip, r3
   192b8:	muleq	r1, ip, r3
   192bc:	muleq	r1, ip, r3
   192c0:	muleq	r1, ip, r3
   192c4:	muleq	r1, ip, r3
   192c8:	muleq	r1, ip, r3
   192cc:	muleq	r1, ip, r3
   192d0:	muleq	r1, ip, r3
   192d4:	muleq	r1, ip, r3
   192d8:	muleq	r1, ip, r3
   192dc:	muleq	r1, ip, r3
   192e0:	muleq	r1, ip, r3
   192e4:	muleq	r1, ip, r3
   192e8:	muleq	r1, ip, r3
   192ec:	muleq	r1, ip, r3
   192f0:	muleq	r1, ip, r3
   192f4:	muleq	r1, ip, r3
   192f8:	muleq	r1, ip, r3
   192fc:	muleq	r1, ip, r3
   19300:	muleq	r1, ip, r3
   19304:	muleq	r1, ip, r3
   19308:	muleq	r1, ip, r3
   1930c:	andeq	r9, r1, ip, ror #11
   19310:	strdeq	r9, [r1], -ip
   19314:	muleq	r1, ip, r3
   19318:	andeq	r9, r1, ip, ror #11
   1931c:	muleq	r1, ip, r3
   19320:	andeq	r9, r1, ip, ror #11
   19324:	muleq	r1, ip, r3
   19328:	muleq	r1, ip, r3
   1932c:	muleq	r1, ip, r3
   19330:	muleq	r1, ip, r3
   19334:	muleq	r1, ip, r3
   19338:	muleq	r1, ip, r3
   1933c:	muleq	r1, ip, r3
   19340:	muleq	r1, ip, r3
   19344:	muleq	r1, ip, r3
   19348:	muleq	r1, ip, r3
   1934c:	muleq	r1, ip, r3
   19350:	muleq	r1, ip, r3
   19354:	muleq	r1, ip, r3
   19358:	muleq	r1, ip, r3
   1935c:	muleq	r1, ip, r3
   19360:	muleq	r1, ip, r3
   19364:	muleq	r1, ip, r3
   19368:	muleq	r1, ip, r3
   1936c:	muleq	r1, ip, r3
   19370:	muleq	r1, ip, r3
   19374:	muleq	r1, ip, r3
   19378:	muleq	r1, ip, r3
   1937c:	muleq	r1, ip, r3
   19380:	muleq	r1, ip, r3
   19384:	muleq	r1, ip, r3
   19388:	muleq	r1, ip, r3
   1938c:	ldrdeq	r9, [r1], -ip
   19390:	andeq	r9, r1, ip, ror #11
   19394:	ldrdeq	r9, [r1], -ip
   19398:			; <UNDEFINED> instruction: 0x000193bc
   1939c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   193a0:	cmp	r0, #0
   193a4:	beq	19680 <__assert_fail@plt+0x8098>
   193a8:	ldr	r0, [fp, #16]
   193ac:	cmp	r0, #0
   193b0:	mov	r0, r5
   193b4:	bne	19690 <__assert_fail@plt+0x80a8>
   193b8:	b	196b0 <__assert_fail@plt+0x80c8>
   193bc:	mov	r4, #0
   193c0:	cmp	r7, #0
   193c4:	beq	195e8 <__assert_fail@plt+0x8000>
   193c8:	mov	r8, #0
   193cc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   193d0:	cmp	r0, #0
   193d4:	bne	193a8 <__assert_fail@plt+0x7dc0>
   193d8:	b	19680 <__assert_fail@plt+0x8098>
   193dc:	mov	r4, #0
   193e0:	cmn	lr, #1
   193e4:	beq	195c0 <__assert_fail@plt+0x7fd8>
   193e8:	cmp	r7, #0
   193ec:	bne	193c8 <__assert_fail@plt+0x7de0>
   193f0:	cmp	lr, #1
   193f4:	beq	195e8 <__assert_fail@plt+0x8000>
   193f8:	b	193c8 <__assert_fail@plt+0x7de0>
   193fc:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19400:	cmp	r0, #2
   19404:	bne	19618 <__assert_fail@plt+0x8030>
   19408:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1940c:	tst	r0, #1
   19410:	bne	19e78 <__assert_fail@plt+0x8890>
   19414:	mov	r8, #0
   19418:	mov	r0, #92	; 0x5c
   1941c:	mov	r4, #0
   19420:	cmp	r8, #0
   19424:	beq	19638 <__assert_fail@plt+0x8050>
   19428:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1942c:	b	1972c <__assert_fail@plt+0x8144>
   19430:	mov	r0, #102	; 0x66
   19434:	b	1966c <__assert_fail@plt+0x8084>
   19438:	mov	r2, #116	; 0x74
   1943c:	ldr	r0, [sp, #60]	; 0x3c
   19440:	tst	r0, #1
   19444:	mov	r0, r2
   19448:	bne	1966c <__assert_fail@plt+0x8084>
   1944c:	b	19e78 <__assert_fail@plt+0x8890>
   19450:	mov	r0, #98	; 0x62
   19454:	b	1966c <__assert_fail@plt+0x8084>
   19458:	mov	r2, #114	; 0x72
   1945c:	ldr	r0, [sp, #60]	; 0x3c
   19460:	tst	r0, #1
   19464:	mov	r0, r2
   19468:	bne	1966c <__assert_fail@plt+0x8084>
   1946c:	b	19e78 <__assert_fail@plt+0x8890>
   19470:	ldr	r0, [sp, #80]	; 0x50
   19474:	tst	r0, #1
   19478:	beq	19754 <__assert_fail@plt+0x816c>
   1947c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19480:	tst	r0, #1
   19484:	bne	19fa0 <__assert_fail@plt+0x89b8>
   19488:	ldr	r0, [fp, #-64]	; 0xffffffc0
   1948c:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19490:	cmp	r0, #2
   19494:	ldr	r0, [fp, #-80]	; 0xffffffb0
   19498:	movwne	r0, #1
   1949c:	orr	r0, r0, r2
   194a0:	tst	r0, #1
   194a4:	beq	19a4c <__assert_fail@plt+0x8464>
   194a8:	mov	r0, r9
   194ac:	b	19a80 <__assert_fail@plt+0x8498>
   194b0:	ldr	r0, [fp, #-64]	; 0xffffffc0
   194b4:	mov	r8, #0
   194b8:	mov	r5, #63	; 0x3f
   194bc:	cmp	r0, #5
   194c0:	beq	19908 <__assert_fail@plt+0x8320>
   194c4:	cmp	r0, #2
   194c8:	bne	199b8 <__assert_fail@plt+0x83d0>
   194cc:	ldr	r0, [fp, #-72]	; 0xffffffb8
   194d0:	tst	r0, #1
   194d4:	bne	19e78 <__assert_fail@plt+0x8890>
   194d8:	mov	r4, #0
   194dc:	ldr	r0, [fp, #-68]	; 0xffffffbc
   194e0:	cmp	r0, #0
   194e4:	bne	193a8 <__assert_fail@plt+0x7dc0>
   194e8:	b	19680 <__assert_fail@plt+0x8098>
   194ec:	mov	r0, #118	; 0x76
   194f0:	b	1966c <__assert_fail@plt+0x8084>
   194f4:	mov	r0, #1
   194f8:	mov	r5, #39	; 0x27
   194fc:	str	r0, [sp, #52]	; 0x34
   19500:	ldr	r0, [fp, #-64]	; 0xffffffc0
   19504:	cmp	r0, #2
   19508:	bne	1957c <__assert_fail@plt+0x7f94>
   1950c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19510:	tst	r0, #1
   19514:	bne	19e78 <__assert_fail@plt+0x8890>
   19518:	ldr	r2, [sp, #48]	; 0x30
   1951c:	clz	r1, sl
   19520:	mov	r8, #0
   19524:	lsr	r1, r1, #5
   19528:	cmp	r2, #0
   1952c:	mov	r0, r2
   19530:	movwne	r0, #1
   19534:	orrs	r0, r0, r1
   19538:	moveq	r2, sl
   1953c:	moveq	sl, r0
   19540:	cmp	r9, sl
   19544:	str	r2, [sp, #48]	; 0x30
   19548:	movcc	r0, #39	; 0x27
   1954c:	strbcc	r0, [r6, r9]
   19550:	add	r0, r9, #1
   19554:	cmp	r0, sl
   19558:	movcc	r1, #92	; 0x5c
   1955c:	strbcc	r1, [r6, r0]
   19560:	add	r0, r9, #2
   19564:	add	r9, r9, #3
   19568:	cmp	r0, sl
   1956c:	movcc	r1, #39	; 0x27
   19570:	strbcc	r1, [r6, r0]
   19574:	mov	r0, #0
   19578:	str	r0, [fp, #-48]	; 0xffffffd0
   1957c:	mov	r4, #1
   19580:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19584:	cmp	r0, #0
   19588:	bne	193a8 <__assert_fail@plt+0x7dc0>
   1958c:	b	19680 <__assert_fail@plt+0x8098>
   19590:	ldr	r0, [sp, #32]
   19594:	cmp	r0, #1
   19598:	bne	19784 <__assert_fail@plt+0x819c>
   1959c:	str	lr, [sp, #84]	; 0x54
   195a0:	bl	1145c <__ctype_b_loc@plt>
   195a4:	ldr	r0, [r0]
   195a8:	ldr	ip, [fp, #-84]	; 0xffffffac
   195ac:	mov	r1, #1
   195b0:	add	r0, r0, r5, lsl #1
   195b4:	ldrb	r0, [r0, #1]
   195b8:	ubfx	r4, r0, #6, #1
   195bc:	b	19b7c <__assert_fail@plt+0x8594>
   195c0:	cmp	r7, #0
   195c4:	ldrbeq	r0, [ip, #1]
   195c8:	cmpeq	r0, #0
   195cc:	beq	195e8 <__assert_fail@plt+0x8000>
   195d0:	mvn	lr, #0
   195d4:	mov	r8, #0
   195d8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   195dc:	cmp	r0, #0
   195e0:	bne	193a8 <__assert_fail@plt+0x7dc0>
   195e4:	b	19680 <__assert_fail@plt+0x8098>
   195e8:	mov	r1, #1
   195ec:	ldr	r0, [fp, #-64]	; 0xffffffc0
   195f0:	cmp	r0, #2
   195f4:	bne	19604 <__assert_fail@plt+0x801c>
   195f8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   195fc:	tst	r0, #1
   19600:	bne	19e78 <__assert_fail@plt+0x8890>
   19604:	mov	r4, r1
   19608:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1960c:	cmp	r0, #0
   19610:	bne	193a8 <__assert_fail@plt+0x7dc0>
   19614:	b	19680 <__assert_fail@plt+0x8098>
   19618:	ldr	r1, [sp, #40]	; 0x28
   1961c:	mov	r8, #0
   19620:	mov	r0, #92	; 0x5c
   19624:	cmp	r1, #0
   19628:	beq	1966c <__assert_fail@plt+0x8084>
   1962c:	mov	r4, #0
   19630:	cmp	r8, #0
   19634:	bne	19428 <__assert_fail@plt+0x7e40>
   19638:	ldr	r2, [fp, #-48]	; 0xffffffd0
   1963c:	tst	r2, #1
   19640:	beq	1972c <__assert_fail@plt+0x8144>
   19644:	cmp	r9, sl
   19648:	movcc	r1, #39	; 0x27
   1964c:	strbcc	r1, [r6, r9]
   19650:	add	r1, r9, #1
   19654:	add	r9, r9, #2
   19658:	cmp	r1, sl
   1965c:	movcc	r2, #39	; 0x27
   19660:	strbcc	r2, [r6, r1]
   19664:	mov	r2, #0
   19668:	b	1972c <__assert_fail@plt+0x8144>
   1966c:	ldr	r1, [sp, #80]	; 0x50
   19670:	mov	r4, #0
   19674:	mov	r8, #0
   19678:	tst	r1, #1
   1967c:	bne	196bc <__assert_fail@plt+0x80d4>
   19680:	ldr	r0, [fp, #-88]	; 0xffffffa8
   19684:	cmp	r0, #0
   19688:	mov	r0, r5
   1968c:	beq	196b0 <__assert_fail@plt+0x80c8>
   19690:	ldr	r1, [fp, #16]
   19694:	ubfx	r0, r5, #5, #3
   19698:	mov	r2, #1
   1969c:	ldr	r0, [r1, r0, lsl #2]
   196a0:	and	r1, r5, #31
   196a4:	tst	r0, r2, lsl r1
   196a8:	mov	r0, r5
   196ac:	bne	196bc <__assert_fail@plt+0x80d4>
   196b0:	ldr	r1, [fp, #-56]	; 0xffffffc8
   196b4:	cmp	r1, #0
   196b8:	beq	19b14 <__assert_fail@plt+0x852c>
   196bc:	ldr	r1, [fp, #-72]	; 0xffffffb8
   196c0:	tst	r1, #1
   196c4:	bne	19e58 <__assert_fail@plt+0x8870>
   196c8:	ldr	r1, [fp, #-64]	; 0xffffffc0
   196cc:	ldr	r2, [fp, #-48]	; 0xffffffd0
   196d0:	cmp	r1, #2
   196d4:	ldr	r1, [fp, #-80]	; 0xffffffb0
   196d8:	movwne	r1, #1
   196dc:	orr	r1, r1, r2
   196e0:	tst	r1, #1
   196e4:	bne	1971c <__assert_fail@plt+0x8134>
   196e8:	cmp	r9, sl
   196ec:	movcc	r1, #39	; 0x27
   196f0:	strbcc	r1, [r6, r9]
   196f4:	add	r1, r9, #1
   196f8:	cmp	r1, sl
   196fc:	movcc	r2, #36	; 0x24
   19700:	strbcc	r2, [r6, r1]
   19704:	add	r1, r9, #2
   19708:	add	r9, r9, #3
   1970c:	cmp	r1, sl
   19710:	movcc	r2, #39	; 0x27
   19714:	strbcc	r2, [r6, r1]
   19718:	mov	r2, #1
   1971c:	cmp	r9, sl
   19720:	movcc	r1, #92	; 0x5c
   19724:	strbcc	r1, [r6, r9]
   19728:	add	r9, r9, #1
   1972c:	cmp	r9, sl
   19730:	add	r7, r7, #1
   19734:	strbcc	r0, [r6, r9]
   19738:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1973c:	add	r9, r9, #1
   19740:	and	r0, r0, r4
   19744:	mov	r4, r0
   19748:	cmn	lr, #1
   1974c:	bne	190c0 <__assert_fail@plt+0x7ad8>
   19750:	b	190cc <__assert_fail@plt+0x7ae4>
   19754:	ldr	r0, [sp, #28]
   19758:	mov	r4, #0
   1975c:	mov	r8, #0
   19760:	mov	r5, #0
   19764:	cmp	r0, #0
   19768:	beq	19680 <__assert_fail@plt+0x8098>
   1976c:	ldr	r4, [fp, #-52]	; 0xffffffcc
   19770:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19774:	add	r7, r7, #1
   19778:	cmn	lr, #1
   1977c:	bne	190c0 <__assert_fail@plt+0x7ad8>
   19780:	b	190cc <__assert_fail@plt+0x7ae4>
   19784:	mov	r0, #0
   19788:	cmn	lr, #1
   1978c:	str	r0, [fp, #-36]	; 0xffffffdc
   19790:	str	r0, [fp, #-40]	; 0xffffffd8
   19794:	bne	197a8 <__assert_fail@plt+0x81c0>
   19798:	mov	r0, ip
   1979c:	bl	11474 <strlen@plt>
   197a0:	ldr	ip, [fp, #-84]	; 0xffffffac
   197a4:	mov	lr, r0
   197a8:	ldr	r0, [sp, #36]	; 0x24
   197ac:	str	sl, [sp, #56]	; 0x38
   197b0:	str	lr, [sp, #84]	; 0x54
   197b4:	cmp	r0, #0
   197b8:	beq	199d0 <__assert_fail@plt+0x83e8>
   197bc:	add	r0, ip, r7
   197c0:	mov	r4, #1
   197c4:	mov	r6, #0
   197c8:	sub	sl, fp, #40	; 0x28
   197cc:	str	r0, [sp, #20]
   197d0:	str	r6, [sp, #64]	; 0x40
   197d4:	add	r6, r6, r7
   197d8:	sub	r0, fp, #44	; 0x2c
   197dc:	mov	r3, sl
   197e0:	add	r1, ip, r6
   197e4:	sub	r2, lr, r6
   197e8:	bl	1ca58 <__assert_fail@plt+0xb470>
   197ec:	cmn	r0, #2
   197f0:	beq	19b2c <__assert_fail@plt+0x8544>
   197f4:	ldr	sl, [sp, #56]	; 0x38
   197f8:	cmn	r0, #1
   197fc:	beq	19b20 <__assert_fail@plt+0x8538>
   19800:	cmp	r0, #0
   19804:	beq	19b24 <__assert_fail@plt+0x853c>
   19808:	cmp	r0, #2
   1980c:	bcc	198cc <__assert_fail@plt+0x82e4>
   19810:	ldr	r1, [sp, #64]	; 0x40
   19814:	ldr	r2, [sp, #20]
   19818:	add	r1, r2, r1
   1981c:	mov	r2, #1
   19820:	ldrb	r3, [r1, r2]
   19824:	sub	r3, r3, #91	; 0x5b
   19828:	cmp	r3, #33	; 0x21
   1982c:	bhi	198c0 <__assert_fail@plt+0x82d8>
   19830:	add	r6, pc, #0
   19834:	ldr	pc, [r6, r3, lsl #2]
   19838:	andeq	r9, r1, r4, lsl #29
   1983c:	andeq	r9, r1, r4, lsl #29
   19840:	andeq	r9, r1, r0, asr #17
   19844:	andeq	r9, r1, r4, lsl #29
   19848:	andeq	r9, r1, r0, asr #17
   1984c:	andeq	r9, r1, r4, lsl #29
   19850:	andeq	r9, r1, r0, asr #17
   19854:	andeq	r9, r1, r0, asr #17
   19858:	andeq	r9, r1, r0, asr #17
   1985c:	andeq	r9, r1, r0, asr #17
   19860:	andeq	r9, r1, r0, asr #17
   19864:	andeq	r9, r1, r0, asr #17
   19868:	andeq	r9, r1, r0, asr #17
   1986c:	andeq	r9, r1, r0, asr #17
   19870:	andeq	r9, r1, r0, asr #17
   19874:	andeq	r9, r1, r0, asr #17
   19878:	andeq	r9, r1, r0, asr #17
   1987c:	andeq	r9, r1, r0, asr #17
   19880:	andeq	r9, r1, r0, asr #17
   19884:	andeq	r9, r1, r0, asr #17
   19888:	andeq	r9, r1, r0, asr #17
   1988c:	andeq	r9, r1, r0, asr #17
   19890:	andeq	r9, r1, r0, asr #17
   19894:	andeq	r9, r1, r0, asr #17
   19898:	andeq	r9, r1, r0, asr #17
   1989c:	andeq	r9, r1, r0, asr #17
   198a0:	andeq	r9, r1, r0, asr #17
   198a4:	andeq	r9, r1, r0, asr #17
   198a8:	andeq	r9, r1, r0, asr #17
   198ac:	andeq	r9, r1, r0, asr #17
   198b0:	andeq	r9, r1, r0, asr #17
   198b4:	andeq	r9, r1, r0, asr #17
   198b8:	andeq	r9, r1, r0, asr #17
   198bc:	andeq	r9, r1, r4, lsl #29
   198c0:	add	r2, r2, #1
   198c4:	cmp	r2, r0
   198c8:	bcc	19820 <__assert_fail@plt+0x8238>
   198cc:	ldr	r6, [sp, #64]	; 0x40
   198d0:	add	r6, r0, r6
   198d4:	ldr	r0, [fp, #-44]	; 0xffffffd4
   198d8:	bl	11390 <iswprint@plt>
   198dc:	cmp	r0, #0
   198e0:	sub	sl, fp, #40	; 0x28
   198e4:	movwne	r0, #1
   198e8:	and	r4, r4, r0
   198ec:	mov	r0, sl
   198f0:	bl	11330 <mbsinit@plt>
   198f4:	ldr	ip, [fp, #-84]	; 0xffffffac
   198f8:	ldr	lr, [sp, #84]	; 0x54
   198fc:	cmp	r0, #0
   19900:	beq	197d0 <__assert_fail@plt+0x81e8>
   19904:	b	19b70 <__assert_fail@plt+0x8588>
   19908:	ldr	r0, [sp, #24]
   1990c:	cmp	r0, #0
   19910:	beq	199b8 <__assert_fail@plt+0x83d0>
   19914:	add	r0, r7, #2
   19918:	cmp	r0, lr
   1991c:	bcs	199b8 <__assert_fail@plt+0x83d0>
   19920:	add	r1, ip, r7
   19924:	ldrb	r1, [r1, #1]
   19928:	cmp	r1, #63	; 0x3f
   1992c:	bne	199b8 <__assert_fail@plt+0x83d0>
   19930:	ldrb	r5, [ip, r0]
   19934:	sub	r1, r5, #33	; 0x21
   19938:	cmp	r1, #29
   1993c:	bhi	199b8 <__assert_fail@plt+0x83d0>
   19940:	movw	r3, #20929	; 0x51c1
   19944:	mov	r2, #1
   19948:	movt	r3, #14336	; 0x3800
   1994c:	tst	r3, r2, lsl r1
   19950:	beq	199b8 <__assert_fail@plt+0x83d0>
   19954:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19958:	tst	r1, #1
   1995c:	bne	19fa8 <__assert_fail@plt+0x89c0>
   19960:	cmp	r9, sl
   19964:	mov	r7, r0
   19968:	mov	r4, #0
   1996c:	movcc	r1, #63	; 0x3f
   19970:	strbcc	r1, [r6, r9]
   19974:	add	r1, r9, #1
   19978:	cmp	r1, sl
   1997c:	movcc	r2, #34	; 0x22
   19980:	strbcc	r2, [r6, r1]
   19984:	add	r1, r9, #2
   19988:	cmp	r1, sl
   1998c:	movcc	r2, #34	; 0x22
   19990:	strbcc	r2, [r6, r1]
   19994:	add	r1, r9, #3
   19998:	add	r9, r9, #4
   1999c:	cmp	r1, sl
   199a0:	movcc	r2, #63	; 0x3f
   199a4:	strbcc	r2, [r6, r1]
   199a8:	ldr	r0, [fp, #-68]	; 0xffffffbc
   199ac:	cmp	r0, #0
   199b0:	bne	193a8 <__assert_fail@plt+0x7dc0>
   199b4:	b	19680 <__assert_fail@plt+0x8098>
   199b8:	mov	r5, #63	; 0x3f
   199bc:	mov	r4, #0
   199c0:	ldr	r0, [fp, #-68]	; 0xffffffbc
   199c4:	cmp	r0, #0
   199c8:	bne	193a8 <__assert_fail@plt+0x7dc0>
   199cc:	b	19680 <__assert_fail@plt+0x8098>
   199d0:	mov	r4, #1
   199d4:	mov	r6, #0
   199d8:	sub	sl, fp, #40	; 0x28
   199dc:	str	r6, [sp, #64]	; 0x40
   199e0:	add	r6, r6, r7
   199e4:	sub	r0, fp, #44	; 0x2c
   199e8:	mov	r3, sl
   199ec:	add	r1, ip, r6
   199f0:	sub	r2, lr, r6
   199f4:	bl	1ca58 <__assert_fail@plt+0xb470>
   199f8:	cmn	r0, #2
   199fc:	beq	19b2c <__assert_fail@plt+0x8544>
   19a00:	cmn	r0, #1
   19a04:	beq	19b20 <__assert_fail@plt+0x8538>
   19a08:	ldr	r6, [sp, #64]	; 0x40
   19a0c:	cmp	r0, #0
   19a10:	beq	19b6c <__assert_fail@plt+0x8584>
   19a14:	add	r6, r0, r6
   19a18:	ldr	r0, [fp, #-44]	; 0xffffffd4
   19a1c:	bl	11390 <iswprint@plt>
   19a20:	cmp	r0, #0
   19a24:	sub	sl, fp, #40	; 0x28
   19a28:	movwne	r0, #1
   19a2c:	and	r4, r4, r0
   19a30:	mov	r0, sl
   19a34:	bl	11330 <mbsinit@plt>
   19a38:	ldr	ip, [fp, #-84]	; 0xffffffac
   19a3c:	ldr	lr, [sp, #84]	; 0x54
   19a40:	cmp	r0, #0
   19a44:	beq	199dc <__assert_fail@plt+0x83f4>
   19a48:	b	19b70 <__assert_fail@plt+0x8588>
   19a4c:	cmp	r9, sl
   19a50:	mov	r2, #1
   19a54:	movcc	r0, #39	; 0x27
   19a58:	strbcc	r0, [r6, r9]
   19a5c:	add	r0, r9, #1
   19a60:	cmp	r0, sl
   19a64:	movcc	r1, #36	; 0x24
   19a68:	strbcc	r1, [r6, r0]
   19a6c:	add	r0, r9, #2
   19a70:	cmp	r0, sl
   19a74:	movcc	r1, #39	; 0x27
   19a78:	strbcc	r1, [r6, r0]
   19a7c:	add	r0, r9, #3
   19a80:	cmp	r0, sl
   19a84:	add	r9, r0, #1
   19a88:	str	r2, [fp, #-48]	; 0xffffffd0
   19a8c:	movcc	r1, #92	; 0x5c
   19a90:	strbcc	r1, [r6, r0]
   19a94:	ldr	r1, [fp, #-64]	; 0xffffffc0
   19a98:	cmp	r1, #2
   19a9c:	beq	19afc <__assert_fail@plt+0x8514>
   19aa0:	add	r1, r7, #1
   19aa4:	mov	r4, #0
   19aa8:	mov	r8, #1
   19aac:	mov	r5, #48	; 0x30
   19ab0:	cmp	r1, lr
   19ab4:	bcs	1939c <__assert_fail@plt+0x7db4>
   19ab8:	ldrb	r1, [ip, r1]
   19abc:	sub	r1, r1, #48	; 0x30
   19ac0:	uxtb	r1, r1
   19ac4:	cmp	r1, #9
   19ac8:	bhi	1939c <__assert_fail@plt+0x7db4>
   19acc:	cmp	r9, sl
   19ad0:	movcc	r1, #48	; 0x30
   19ad4:	strbcc	r1, [r6, r9]
   19ad8:	add	r1, r0, #2
   19adc:	add	r9, r0, #3
   19ae0:	cmp	r1, sl
   19ae4:	movcc	r2, #48	; 0x30
   19ae8:	strbcc	r2, [r6, r1]
   19aec:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19af0:	cmp	r0, #0
   19af4:	bne	193a8 <__assert_fail@plt+0x7dc0>
   19af8:	b	19680 <__assert_fail@plt+0x8098>
   19afc:	mov	r0, #48	; 0x30
   19b00:	mov	r8, #1
   19b04:	mov	r4, #0
   19b08:	ldr	r1, [fp, #-56]	; 0xffffffc8
   19b0c:	cmp	r1, #0
   19b10:	bne	196bc <__assert_fail@plt+0x80d4>
   19b14:	cmp	r8, #0
   19b18:	beq	19638 <__assert_fail@plt+0x8050>
   19b1c:	b	19428 <__assert_fail@plt+0x7e40>
   19b20:	mov	r4, #0
   19b24:	ldr	ip, [fp, #-84]	; 0xffffffac
   19b28:	b	19b64 <__assert_fail@plt+0x857c>
   19b2c:	ldr	r1, [sp, #84]	; 0x54
   19b30:	ldr	ip, [fp, #-84]	; 0xffffffac
   19b34:	mov	r4, #0
   19b38:	cmp	r6, r1
   19b3c:	bcs	19b64 <__assert_fail@plt+0x857c>
   19b40:	ldrb	r0, [ip, r6]
   19b44:	cmp	r0, #0
   19b48:	beq	19b64 <__assert_fail@plt+0x857c>
   19b4c:	ldr	r0, [sp, #64]	; 0x40
   19b50:	add	r0, r0, #1
   19b54:	add	r6, r0, r7
   19b58:	str	r0, [sp, #64]	; 0x40
   19b5c:	cmp	r6, r1
   19b60:	bcc	19b40 <__assert_fail@plt+0x8558>
   19b64:	ldr	r6, [sp, #64]	; 0x40
   19b68:	b	19b70 <__assert_fail@plt+0x8588>
   19b6c:	ldr	ip, [fp, #-84]	; 0xffffffac
   19b70:	mov	r1, r6
   19b74:	ldr	r6, [sp, #76]	; 0x4c
   19b78:	ldr	sl, [sp, #56]	; 0x38
   19b7c:	ldr	r0, [sp, #44]	; 0x2c
   19b80:	cmp	r1, #1
   19b84:	orr	r2, r4, r0
   19b88:	mov	r0, r1
   19b8c:	bhi	19bac <__assert_fail@plt+0x85c4>
   19b90:	tst	r2, #1
   19b94:	beq	19bac <__assert_fail@plt+0x85c4>
   19b98:	ldr	lr, [sp, #84]	; 0x54
   19b9c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   19ba0:	cmp	r0, #0
   19ba4:	bne	193a8 <__assert_fail@plt+0x7dc0>
   19ba8:	b	19680 <__assert_fail@plt+0x8098>
   19bac:	str	r2, [sp, #64]	; 0x40
   19bb0:	add	r0, r0, r7
   19bb4:	add	r1, r7, #1
   19bb8:	ldr	lr, [sp, #84]	; 0x54
   19bbc:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19bc0:	ldr	r2, [fp, #-48]	; 0xffffffd0
   19bc4:	mov	r3, #0
   19bc8:	str	r0, [sp, #56]	; 0x38
   19bcc:	ldr	r0, [sp, #64]	; 0x40
   19bd0:	tst	r0, #1
   19bd4:	bne	19cbc <__assert_fail@plt+0x86d4>
   19bd8:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19bdc:	tst	r0, #1
   19be0:	bne	19e5c <__assert_fail@plt+0x8874>
   19be4:	ldr	r3, [fp, #-80]	; 0xffffffb0
   19be8:	cmp	r7, #2
   19bec:	movwne	r3, #1
   19bf0:	orr	r3, r3, r2
   19bf4:	tst	r3, #1
   19bf8:	bne	19c30 <__assert_fail@plt+0x8648>
   19bfc:	cmp	r9, sl
   19c00:	add	r3, r9, #1
   19c04:	movcc	r2, #39	; 0x27
   19c08:	strbcc	r2, [r6, r9]
   19c0c:	cmp	r3, sl
   19c10:	movcc	r2, #36	; 0x24
   19c14:	strbcc	r2, [r6, r3]
   19c18:	add	r3, r9, #2
   19c1c:	add	r9, r9, #3
   19c20:	cmp	r3, sl
   19c24:	movcc	r2, #39	; 0x27
   19c28:	strbcc	r2, [r6, r3]
   19c2c:	mov	r2, #1
   19c30:	cmp	r9, sl
   19c34:	mov	r0, r2
   19c38:	movcc	r3, #92	; 0x5c
   19c3c:	strbcc	r3, [r6, r9]
   19c40:	add	r3, r9, #1
   19c44:	cmp	r3, sl
   19c48:	andcc	r7, r5, #192	; 0xc0
   19c4c:	movcc	r2, #48	; 0x30
   19c50:	orrcc	r7, r2, r7, lsr #6
   19c54:	strbcc	r7, [r6, r3]
   19c58:	add	r3, r9, #2
   19c5c:	add	r9, r9, #3
   19c60:	cmp	r3, sl
   19c64:	lsrcc	r7, r5, #3
   19c68:	movcc	r2, #6
   19c6c:	bficc	r7, r2, #3, #29
   19c70:	mov	r2, #6
   19c74:	strbcc	r7, [r6, r3]
   19c78:	bfi	r5, r2, #3, #29
   19c7c:	mov	r3, #1
   19c80:	mov	r2, r0
   19c84:	ldr	r0, [sp, #56]	; 0x38
   19c88:	and	r8, r3, #1
   19c8c:	cmp	r0, r1
   19c90:	bhi	19cf0 <__assert_fail@plt+0x8708>
   19c94:	b	19d30 <__assert_fail@plt+0x8748>
   19c98:	cmp	r9, sl
   19c9c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19ca0:	strbcc	r5, [r6, r9]
   19ca4:	add	r9, r9, #1
   19ca8:	ldrb	r5, [ip, r1]
   19cac:	add	r1, r1, #1
   19cb0:	ldr	r0, [sp, #64]	; 0x40
   19cb4:	tst	r0, #1
   19cb8:	beq	19bd8 <__assert_fail@plt+0x85f0>
   19cbc:	ldr	r7, [fp, #-56]	; 0xffffffc8
   19cc0:	tst	r7, #1
   19cc4:	beq	19cd8 <__assert_fail@plt+0x86f0>
   19cc8:	cmp	r9, sl
   19ccc:	movcc	r7, #92	; 0x5c
   19cd0:	strbcc	r7, [r6, r9]
   19cd4:	add	r9, r9, #1
   19cd8:	mov	r7, #0
   19cdc:	str	r7, [fp, #-56]	; 0xffffffc8
   19ce0:	ldr	r0, [sp, #56]	; 0x38
   19ce4:	and	r8, r3, #1
   19ce8:	cmp	r0, r1
   19cec:	bls	19d30 <__assert_fail@plt+0x8748>
   19cf0:	cmp	r8, #0
   19cf4:	mvn	r7, r2
   19cf8:	movwne	r8, #1
   19cfc:	orr	r7, r7, r8
   19d00:	tst	r7, #1
   19d04:	bne	19c98 <__assert_fail@plt+0x86b0>
   19d08:	cmp	r9, sl
   19d0c:	movcc	r7, #39	; 0x27
   19d10:	strbcc	r7, [r6, r9]
   19d14:	add	r7, r9, #1
   19d18:	add	r9, r9, #2
   19d1c:	cmp	r7, sl
   19d20:	movcc	r2, #39	; 0x27
   19d24:	strbcc	r2, [r6, r7]
   19d28:	mov	r2, #0
   19d2c:	b	19c98 <__assert_fail@plt+0x86b0>
   19d30:	cmp	r8, #0
   19d34:	sub	r7, r1, #1
   19d38:	mov	r0, r5
   19d3c:	str	r2, [fp, #-48]	; 0xffffffd0
   19d40:	movwne	r8, #1
   19d44:	cmp	r8, #0
   19d48:	beq	19638 <__assert_fail@plt+0x8050>
   19d4c:	b	19428 <__assert_fail@plt+0x7e40>
   19d50:	mov	lr, r7
   19d54:	b	19d5c <__assert_fail@plt+0x8774>
   19d58:	mvn	lr, #0
   19d5c:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19d60:	ldr	r1, [fp, #-72]	; 0xffffffb8
   19d64:	eor	r0, r7, #2
   19d68:	orr	r0, r0, r9
   19d6c:	clz	r0, r0
   19d70:	lsr	r0, r0, #5
   19d74:	tst	r1, r0
   19d78:	bne	19e78 <__assert_fail@plt+0x8890>
   19d7c:	mov	r0, r1
   19d80:	ldr	r1, [fp, #-80]	; 0xffffffb0
   19d84:	cmp	r7, #2
   19d88:	movwne	r1, #1
   19d8c:	orr	r0, r0, r1
   19d90:	tst	r0, #1
   19d94:	ldreq	r0, [sp, #52]	; 0x34
   19d98:	streq	lr, [sp, #84]	; 0x54
   19d9c:	eoreq	r0, r0, #1
   19da0:	tsteq	r0, #1
   19da4:	bne	19f3c <__assert_fail@plt+0x8954>
   19da8:	tst	r4, #1
   19dac:	bne	19ef8 <__assert_fail@plt+0x8910>
   19db0:	ldr	r6, [sp, #48]	; 0x30
   19db4:	mov	r8, #0
   19db8:	cmp	r6, #0
   19dbc:	beq	19f34 <__assert_fail@plt+0x894c>
   19dc0:	ldr	r0, [sp, #80]	; 0x50
   19dc4:	mov	r1, #0
   19dc8:	cmp	sl, #0
   19dcc:	mov	r4, #0
   19dd0:	str	r1, [fp, #-72]	; 0xffffffb8
   19dd4:	beq	18cc8 <__assert_fail@plt+0x76e0>
   19dd8:	b	19f3c <__assert_fail@plt+0x8954>
   19ddc:	ldrb	r1, [r0, #3]
   19de0:	cmp	r1, #56	; 0x38
   19de4:	ldrbeq	r1, [r0, #4]
   19de8:	cmpeq	r1, #48	; 0x30
   19dec:	bne	18ec0 <__assert_fail@plt+0x78d8>
   19df0:	ldrb	r1, [r0, #5]
   19df4:	cmp	r1, #51	; 0x33
   19df8:	ldrbeq	r1, [r0, #6]
   19dfc:	cmpeq	r1, #48	; 0x30
   19e00:	bne	18ec0 <__assert_fail@plt+0x78d8>
   19e04:	ldrb	r0, [r0, #7]
   19e08:	cmp	r0, #0
   19e0c:	movw	r0, #58570	; 0xe4ca
   19e10:	movt	r0, #1
   19e14:	str	r0, [sp, #68]	; 0x44
   19e18:	bne	18ec0 <__assert_fail@plt+0x78d8>
   19e1c:	b	18edc <__assert_fail@plt+0x78f4>
   19e20:	ldrb	r1, [r0, #4]
   19e24:	cmp	r1, #48	; 0x30
   19e28:	ldrbeq	r1, [r0, #5]
   19e2c:	cmpeq	r1, #51	; 0x33
   19e30:	bne	18fa4 <__assert_fail@plt+0x79bc>
   19e34:	ldrb	r1, [r0, #6]
   19e38:	cmp	r1, #48	; 0x30
   19e3c:	ldrbeq	r0, [r0, #7]
   19e40:	cmpeq	r0, #0
   19e44:	bne	18fa4 <__assert_fail@plt+0x79bc>
   19e48:	movw	r0, #58574	; 0xe4ce
   19e4c:	movt	r0, #1
   19e50:	str	r0, [sp, #72]	; 0x48
   19e54:	b	18fc4 <__assert_fail@plt+0x79dc>
   19e58:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19e5c:	ldr	r2, [sp, #80]	; 0x50
   19e60:	b	19e98 <__assert_fail@plt+0x88b0>
   19e64:	ldr	ip, [fp, #-84]	; 0xffffffac
   19e68:	mov	r2, #1
   19e6c:	mov	lr, r4
   19e70:	ldr	r7, [fp, #-64]	; 0xffffffc0
   19e74:	b	19e98 <__assert_fail@plt+0x88b0>
   19e78:	ldr	r2, [sp, #80]	; 0x50
   19e7c:	mov	r7, #2
   19e80:	b	19e98 <__assert_fail@plt+0x88b0>
   19e84:	ldr	r6, [sp, #76]	; 0x4c
   19e88:	ldr	ip, [fp, #-84]	; 0xffffffac
   19e8c:	ldr	lr, [sp, #84]	; 0x54
   19e90:	ldr	r2, [sp, #80]	; 0x50
   19e94:	mov	r7, #2
   19e98:	mov	r0, #0
   19e9c:	ldr	r1, [fp, #12]
   19ea0:	tst	r2, #1
   19ea4:	mov	r2, r7
   19ea8:	mov	r3, lr
   19eac:	str	r0, [sp, #8]
   19eb0:	ldr	r0, [sp, #68]	; 0x44
   19eb4:	movwne	r2, #4
   19eb8:	cmp	r7, #2
   19ebc:	movne	r2, r7
   19ec0:	str	r2, [sp]
   19ec4:	mov	r2, ip
   19ec8:	bic	r1, r1, #2
   19ecc:	str	r0, [sp, #12]
   19ed0:	ldr	r0, [sp, #72]	; 0x48
   19ed4:	str	r1, [sp, #4]
   19ed8:	mov	r1, sl
   19edc:	str	r0, [sp, #16]
   19ee0:	mov	r0, r6
   19ee4:	bl	18c4c <__assert_fail@plt+0x7664>
   19ee8:	mov	r9, r0
   19eec:	mov	r0, r9
   19ef0:	sub	sp, fp, #28
   19ef4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19ef8:	mov	r0, #5
   19efc:	ldr	r1, [sp, #48]	; 0x30
   19f00:	ldr	r2, [fp, #-84]	; 0xffffffac
   19f04:	ldr	r3, [sp, #84]	; 0x54
   19f08:	str	r0, [sp]
   19f0c:	ldr	r0, [fp, #12]
   19f10:	str	r0, [sp, #4]
   19f14:	ldr	r0, [fp, #16]
   19f18:	str	r0, [sp, #8]
   19f1c:	ldr	r0, [sp, #68]	; 0x44
   19f20:	str	r0, [sp, #12]
   19f24:	ldr	r0, [sp, #72]	; 0x48
   19f28:	str	r0, [sp, #16]
   19f2c:	ldr	r0, [sp, #76]	; 0x4c
   19f30:	b	19ee4 <__assert_fail@plt+0x88fc>
   19f34:	mov	r0, #0
   19f38:	str	r0, [fp, #-72]	; 0xffffffb8
   19f3c:	ldr	r1, [sp, #92]	; 0x5c
   19f40:	cmp	r1, #0
   19f44:	beq	19f84 <__assert_fail@plt+0x899c>
   19f48:	ldr	r0, [fp, #-72]	; 0xffffffb8
   19f4c:	ldr	r2, [sp, #76]	; 0x4c
   19f50:	tst	r0, #1
   19f54:	bne	19f88 <__assert_fail@plt+0x89a0>
   19f58:	ldrb	r0, [r1]
   19f5c:	cmp	r0, #0
   19f60:	beq	19f88 <__assert_fail@plt+0x89a0>
   19f64:	add	r1, r1, #1
   19f68:	cmp	r9, sl
   19f6c:	strbcc	r0, [r2, r9]
   19f70:	add	r9, r9, #1
   19f74:	ldrb	r0, [r1], #1
   19f78:	cmp	r0, #0
   19f7c:	bne	19f68 <__assert_fail@plt+0x8980>
   19f80:	b	19f88 <__assert_fail@plt+0x89a0>
   19f84:	ldr	r2, [sp, #76]	; 0x4c
   19f88:	cmp	r9, sl
   19f8c:	movcc	r0, #0
   19f90:	strbcc	r0, [r2, r9]
   19f94:	mov	r0, r9
   19f98:	sub	sp, fp, #28
   19f9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19fa0:	mov	r2, #1
   19fa4:	b	19e70 <__assert_fail@plt+0x8888>
   19fa8:	ldr	r2, [sp, #80]	; 0x50
   19fac:	mov	r7, #5
   19fb0:	b	19e98 <__assert_fail@plt+0x88b0>
   19fb4:	bl	115c4 <abort@plt>
   19fb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19fbc:	add	fp, sp, #28
   19fc0:	sub	sp, sp, #28
   19fc4:	movw	r5, #61920	; 0xf1e0
   19fc8:	cmp	r2, #0
   19fcc:	mov	r4, r1
   19fd0:	mov	r7, r0
   19fd4:	str	r0, [sp, #20]
   19fd8:	movt	r5, #2
   19fdc:	movne	r5, r2
   19fe0:	bl	114b0 <__errno_location@plt>
   19fe4:	mov	sl, r0
   19fe8:	ldm	r5, {r0, r1}
   19fec:	ldr	r2, [r5, #40]	; 0x28
   19ff0:	ldr	r3, [r5, #44]	; 0x2c
   19ff4:	add	r9, r5, #8
   19ff8:	ldr	r6, [sl]
   19ffc:	orr	r8, r1, #1
   1a000:	mov	r1, #0
   1a004:	str	r6, [sp, #24]
   1a008:	stm	sp, {r0, r8, r9}
   1a00c:	str	r2, [sp, #12]
   1a010:	str	r3, [sp, #16]
   1a014:	mov	r0, #0
   1a018:	mov	r2, r7
   1a01c:	mov	r3, r4
   1a020:	mov	r6, r4
   1a024:	bl	18c4c <__assert_fail@plt+0x7664>
   1a028:	add	r7, r0, #1
   1a02c:	mov	r0, r7
   1a030:	bl	1b13c <__assert_fail@plt+0x9b54>
   1a034:	mov	r4, r0
   1a038:	ldr	r0, [r5]
   1a03c:	ldr	r2, [r5, #44]	; 0x2c
   1a040:	ldr	r1, [r5, #40]	; 0x28
   1a044:	mov	r3, r6
   1a048:	stm	sp, {r0, r8, r9}
   1a04c:	str	r2, [sp, #16]
   1a050:	str	r1, [sp, #12]
   1a054:	mov	r0, r4
   1a058:	mov	r1, r7
   1a05c:	ldr	r2, [sp, #20]
   1a060:	bl	18c4c <__assert_fail@plt+0x7664>
   1a064:	ldr	r0, [sp, #24]
   1a068:	str	r0, [sl]
   1a06c:	mov	r0, r4
   1a070:	sub	sp, fp, #28
   1a074:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a078:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a07c:	add	fp, sp, #28
   1a080:	sub	sp, sp, #36	; 0x24
   1a084:	movw	r8, #61920	; 0xf1e0
   1a088:	cmp	r3, #0
   1a08c:	mov	r4, r2
   1a090:	str	r2, [sp, #24]
   1a094:	mov	r5, r1
   1a098:	mov	r6, r0
   1a09c:	str	r0, [sp, #20]
   1a0a0:	movt	r8, #2
   1a0a4:	movne	r8, r3
   1a0a8:	bl	114b0 <__errno_location@plt>
   1a0ac:	str	r0, [sp, #28]
   1a0b0:	cmp	r4, #0
   1a0b4:	add	sl, r8, #8
   1a0b8:	ldm	r8, {r3, r9}
   1a0bc:	ldr	r7, [r0]
   1a0c0:	ldr	r1, [r8, #40]	; 0x28
   1a0c4:	ldr	r2, [r8, #44]	; 0x2c
   1a0c8:	mov	r0, #0
   1a0cc:	orreq	r9, r9, #1
   1a0d0:	str	r7, [sp, #32]
   1a0d4:	mov	r7, r5
   1a0d8:	stm	sp, {r3, r9, sl}
   1a0dc:	str	r1, [sp, #12]
   1a0e0:	str	r2, [sp, #16]
   1a0e4:	mov	r1, #0
   1a0e8:	mov	r2, r6
   1a0ec:	mov	r3, r5
   1a0f0:	bl	18c4c <__assert_fail@plt+0x7664>
   1a0f4:	add	r4, r0, #1
   1a0f8:	mov	r5, r0
   1a0fc:	mov	r0, r4
   1a100:	bl	1b13c <__assert_fail@plt+0x9b54>
   1a104:	mov	r6, r0
   1a108:	ldr	r0, [r8]
   1a10c:	ldr	r2, [r8, #44]	; 0x2c
   1a110:	ldr	r1, [r8, #40]	; 0x28
   1a114:	mov	r3, r7
   1a118:	stm	sp, {r0, r9, sl}
   1a11c:	str	r2, [sp, #16]
   1a120:	str	r1, [sp, #12]
   1a124:	mov	r0, r6
   1a128:	mov	r1, r4
   1a12c:	ldr	r2, [sp, #20]
   1a130:	bl	18c4c <__assert_fail@plt+0x7664>
   1a134:	ldr	r0, [sp, #24]
   1a138:	ldr	r1, [sp, #32]
   1a13c:	ldr	r2, [sp, #28]
   1a140:	cmp	r0, #0
   1a144:	str	r1, [r2]
   1a148:	strne	r5, [r0]
   1a14c:	mov	r0, r6
   1a150:	sub	sp, fp, #28
   1a154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a158:	push	{r4, r5, r6, r7, fp, lr}
   1a15c:	add	fp, sp, #16
   1a160:	movw	r4, #61840	; 0xf190
   1a164:	movt	r4, #2
   1a168:	ldrd	r6, [r4]
   1a16c:	cmp	r7, #2
   1a170:	blt	1a19c <__assert_fail@plt+0x8bb4>
   1a174:	add	r5, r6, #12
   1a178:	mov	r7, #0
   1a17c:	ldr	r0, [r5, r7, lsl #3]
   1a180:	bl	174f0 <__assert_fail@plt+0x5f08>
   1a184:	ldr	r1, [r4, #4]
   1a188:	add	r2, r7, #2
   1a18c:	add	r0, r7, #1
   1a190:	mov	r7, r0
   1a194:	cmp	r2, r1
   1a198:	blt	1a17c <__assert_fail@plt+0x8b94>
   1a19c:	ldr	r0, [r6, #4]
   1a1a0:	movw	r5, #61968	; 0xf210
   1a1a4:	movt	r5, #2
   1a1a8:	cmp	r0, r5
   1a1ac:	beq	1a1c0 <__assert_fail@plt+0x8bd8>
   1a1b0:	bl	174f0 <__assert_fail@plt+0x5f08>
   1a1b4:	mov	r0, #256	; 0x100
   1a1b8:	str	r0, [r4, #8]
   1a1bc:	str	r5, [r4, #12]
   1a1c0:	add	r5, r4, #8
   1a1c4:	cmp	r6, r5
   1a1c8:	beq	1a1d8 <__assert_fail@plt+0x8bf0>
   1a1cc:	mov	r0, r6
   1a1d0:	bl	174f0 <__assert_fail@plt+0x5f08>
   1a1d4:	str	r5, [r4]
   1a1d8:	mov	r0, #1
   1a1dc:	str	r0, [r4, #4]
   1a1e0:	pop	{r4, r5, r6, r7, fp, pc}
   1a1e4:	movw	r3, #61920	; 0xf1e0
   1a1e8:	mvn	r2, #0
   1a1ec:	movt	r3, #2
   1a1f0:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a1f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1f8:	add	fp, sp, #28
   1a1fc:	sub	sp, sp, #44	; 0x2c
   1a200:	mov	r7, r3
   1a204:	str	r2, [sp, #36]	; 0x24
   1a208:	str	r1, [sp, #32]
   1a20c:	mov	r5, r0
   1a210:	bl	114b0 <__errno_location@plt>
   1a214:	cmp	r5, #0
   1a218:	blt	1a37c <__assert_fail@plt+0x8d94>
   1a21c:	cmn	r5, #-2147483647	; 0x80000001
   1a220:	beq	1a37c <__assert_fail@plt+0x8d94>
   1a224:	movw	r8, #61840	; 0xf190
   1a228:	mov	r4, r0
   1a22c:	movt	r8, #2
   1a230:	ldr	r6, [r8]
   1a234:	ldr	r1, [r8, #4]
   1a238:	ldr	r0, [r0]
   1a23c:	str	r4, [sp, #28]
   1a240:	cmp	r1, r5
   1a244:	str	r0, [sp, #24]
   1a248:	ble	1a254 <__assert_fail@plt+0x8c6c>
   1a24c:	mov	sl, r6
   1a250:	b	1a2b8 <__assert_fail@plt+0x8cd0>
   1a254:	mov	r0, #8
   1a258:	add	r9, r8, #8
   1a25c:	add	r2, r5, #1
   1a260:	str	r1, [fp, #-32]	; 0xffffffe0
   1a264:	mvn	r3, #-2147483648	; 0x80000000
   1a268:	str	r0, [sp]
   1a26c:	subs	r0, r6, r9
   1a270:	sub	r2, r2, r1
   1a274:	sub	r1, fp, #32
   1a278:	movne	r0, r6
   1a27c:	bl	1b33c <__assert_fail@plt+0x9d54>
   1a280:	str	r0, [r8]
   1a284:	cmp	r6, r9
   1a288:	mov	sl, r0
   1a28c:	ldrdeq	r0, [r8, #8]
   1a290:	stmeq	sl, {r0, r1}
   1a294:	ldr	r1, [r8, #4]
   1a298:	ldr	r2, [fp, #-32]	; 0xffffffe0
   1a29c:	add	r0, sl, r1, lsl #3
   1a2a0:	sub	r1, r2, r1
   1a2a4:	lsl	r2, r1, #3
   1a2a8:	mov	r1, #0
   1a2ac:	bl	114c8 <memset@plt>
   1a2b0:	ldr	r0, [fp, #-32]	; 0xffffffe0
   1a2b4:	str	r0, [r8, #4]
   1a2b8:	mov	r9, sl
   1a2bc:	ldr	r6, [r9, r5, lsl #3]!
   1a2c0:	ldr	r4, [r9, #4]!
   1a2c4:	ldm	r7, {r0, r1}
   1a2c8:	ldr	r2, [r7, #40]	; 0x28
   1a2cc:	ldr	r3, [r7, #44]	; 0x2c
   1a2d0:	orr	r8, r1, #1
   1a2d4:	add	r1, r7, #8
   1a2d8:	stm	sp, {r0, r8}
   1a2dc:	add	r0, sp, #8
   1a2e0:	str	r1, [sp, #20]
   1a2e4:	stm	r0, {r1, r2, r3}
   1a2e8:	mov	r0, r4
   1a2ec:	mov	r1, r6
   1a2f0:	ldr	r2, [sp, #32]
   1a2f4:	ldr	r3, [sp, #36]	; 0x24
   1a2f8:	bl	18c4c <__assert_fail@plt+0x7664>
   1a2fc:	cmp	r6, r0
   1a300:	bhi	1a364 <__assert_fail@plt+0x8d7c>
   1a304:	add	r6, r0, #1
   1a308:	movw	r0, #61968	; 0xf210
   1a30c:	movt	r0, #2
   1a310:	str	r6, [sl, r5, lsl #3]
   1a314:	cmp	r4, r0
   1a318:	beq	1a324 <__assert_fail@plt+0x8d3c>
   1a31c:	mov	r0, r4
   1a320:	bl	174f0 <__assert_fail@plt+0x5f08>
   1a324:	mov	r0, r6
   1a328:	bl	1b13c <__assert_fail@plt+0x9b54>
   1a32c:	str	r0, [r9]
   1a330:	mov	r4, r0
   1a334:	add	r3, sp, #8
   1a338:	ldr	r0, [r7]
   1a33c:	ldr	r1, [r7, #40]	; 0x28
   1a340:	ldr	r2, [r7, #44]	; 0x2c
   1a344:	stm	sp, {r0, r8}
   1a348:	ldr	r0, [sp, #20]
   1a34c:	stm	r3, {r0, r1, r2}
   1a350:	mov	r0, r4
   1a354:	mov	r1, r6
   1a358:	ldr	r2, [sp, #32]
   1a35c:	ldr	r3, [sp, #36]	; 0x24
   1a360:	bl	18c4c <__assert_fail@plt+0x7664>
   1a364:	ldr	r1, [sp, #24]
   1a368:	ldr	r0, [sp, #28]
   1a36c:	str	r1, [r0]
   1a370:	mov	r0, r4
   1a374:	sub	sp, fp, #28
   1a378:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a37c:	bl	115c4 <abort@plt>
   1a380:	movw	r3, #61920	; 0xf1e0
   1a384:	movt	r3, #2
   1a388:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a38c:	movw	r3, #61920	; 0xf1e0
   1a390:	mov	r1, r0
   1a394:	mov	r0, #0
   1a398:	mvn	r2, #0
   1a39c:	movt	r3, #2
   1a3a0:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a3a4:	movw	r3, #61920	; 0xf1e0
   1a3a8:	mov	r2, r1
   1a3ac:	mov	r1, r0
   1a3b0:	mov	r0, #0
   1a3b4:	movt	r3, #2
   1a3b8:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a3bc:	push	{fp, lr}
   1a3c0:	mov	fp, sp
   1a3c4:	sub	sp, sp, #48	; 0x30
   1a3c8:	vmov.i32	q8, #0	; 0x00000000
   1a3cc:	mov	ip, #32
   1a3d0:	mov	r3, sp
   1a3d4:	mov	lr, r2
   1a3d8:	cmp	r1, #10
   1a3dc:	add	r2, r3, #16
   1a3e0:	vst1.64	{d16-d17}, [r3], ip
   1a3e4:	vst1.64	{d16-d17}, [r3]
   1a3e8:	vst1.64	{d16-d17}, [r2]
   1a3ec:	beq	1a40c <__assert_fail@plt+0x8e24>
   1a3f0:	str	r1, [sp]
   1a3f4:	mov	r3, sp
   1a3f8:	mov	r1, lr
   1a3fc:	mvn	r2, #0
   1a400:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a404:	mov	sp, fp
   1a408:	pop	{fp, pc}
   1a40c:	bl	115c4 <abort@plt>
   1a410:	push	{r4, sl, fp, lr}
   1a414:	add	fp, sp, #8
   1a418:	sub	sp, sp, #48	; 0x30
   1a41c:	mov	ip, r3
   1a420:	mov	r3, sp
   1a424:	vmov.i32	q8, #0	; 0x00000000
   1a428:	mov	lr, #32
   1a42c:	cmp	r1, #10
   1a430:	add	r4, r3, #16
   1a434:	vst1.64	{d16-d17}, [r3], lr
   1a438:	vst1.64	{d16-d17}, [r3]
   1a43c:	vst1.64	{d16-d17}, [r4]
   1a440:	beq	1a460 <__assert_fail@plt+0x8e78>
   1a444:	str	r1, [sp]
   1a448:	mov	r1, r2
   1a44c:	mov	r3, sp
   1a450:	mov	r2, ip
   1a454:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a458:	sub	sp, fp, #8
   1a45c:	pop	{r4, sl, fp, pc}
   1a460:	bl	115c4 <abort@plt>
   1a464:	push	{fp, lr}
   1a468:	mov	fp, sp
   1a46c:	sub	sp, sp, #48	; 0x30
   1a470:	mov	r3, sp
   1a474:	vmov.i32	q8, #0	; 0x00000000
   1a478:	mov	ip, #32
   1a47c:	cmp	r0, #10
   1a480:	add	r2, r3, #16
   1a484:	vst1.64	{d16-d17}, [r3], ip
   1a488:	vst1.64	{d16-d17}, [r3]
   1a48c:	vst1.64	{d16-d17}, [r2]
   1a490:	beq	1a4b0 <__assert_fail@plt+0x8ec8>
   1a494:	str	r0, [sp]
   1a498:	mov	r3, sp
   1a49c:	mov	r0, #0
   1a4a0:	mvn	r2, #0
   1a4a4:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a4a8:	mov	sp, fp
   1a4ac:	pop	{fp, pc}
   1a4b0:	bl	115c4 <abort@plt>
   1a4b4:	push	{fp, lr}
   1a4b8:	mov	fp, sp
   1a4bc:	sub	sp, sp, #48	; 0x30
   1a4c0:	mov	r3, sp
   1a4c4:	vmov.i32	q8, #0	; 0x00000000
   1a4c8:	mov	ip, #32
   1a4cc:	cmp	r0, #10
   1a4d0:	add	lr, r3, #16
   1a4d4:	vst1.64	{d16-d17}, [r3], ip
   1a4d8:	vst1.64	{d16-d17}, [r3]
   1a4dc:	vst1.64	{d16-d17}, [lr]
   1a4e0:	beq	1a4fc <__assert_fail@plt+0x8f14>
   1a4e4:	str	r0, [sp]
   1a4e8:	mov	r3, sp
   1a4ec:	mov	r0, #0
   1a4f0:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a4f4:	mov	sp, fp
   1a4f8:	pop	{fp, pc}
   1a4fc:	bl	115c4 <abort@plt>
   1a500:	push	{r4, sl, fp, lr}
   1a504:	add	fp, sp, #8
   1a508:	sub	sp, sp, #48	; 0x30
   1a50c:	mov	lr, r0
   1a510:	movw	r0, #61920	; 0xf1e0
   1a514:	mov	r3, #32
   1a518:	mov	ip, r1
   1a51c:	mov	r4, #1
   1a520:	movt	r0, #2
   1a524:	add	r1, r0, #16
   1a528:	vld1.64	{d16-d17}, [r0], r3
   1a52c:	mov	r3, sp
   1a530:	vld1.64	{d18-d19}, [r1]
   1a534:	add	r1, r3, #16
   1a538:	vld1.64	{d20-d21}, [r0]
   1a53c:	add	r0, r3, #32
   1a540:	vst1.64	{d18-d19}, [r1]
   1a544:	mov	r1, r3
   1a548:	vst1.64	{d20-d21}, [r0]
   1a54c:	mov	r0, #28
   1a550:	and	r0, r0, r2, lsr #3
   1a554:	and	r2, r2, #31
   1a558:	vst1.64	{d16-d17}, [r1], r0
   1a55c:	ldr	r0, [r1, #8]
   1a560:	bic	r4, r4, r0, lsr r2
   1a564:	eor	r0, r0, r4, lsl r2
   1a568:	mov	r2, ip
   1a56c:	str	r0, [r1, #8]
   1a570:	mov	r0, #0
   1a574:	mov	r1, lr
   1a578:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a57c:	sub	sp, fp, #8
   1a580:	pop	{r4, sl, fp, pc}
   1a584:	push	{fp, lr}
   1a588:	mov	fp, sp
   1a58c:	sub	sp, sp, #48	; 0x30
   1a590:	mov	ip, r0
   1a594:	movw	r0, #61920	; 0xf1e0
   1a598:	mov	r3, #32
   1a59c:	movt	r0, #2
   1a5a0:	add	r2, r0, #16
   1a5a4:	vld1.64	{d16-d17}, [r0], r3
   1a5a8:	mov	r3, sp
   1a5ac:	vld1.64	{d18-d19}, [r2]
   1a5b0:	add	r2, r3, #16
   1a5b4:	vld1.64	{d20-d21}, [r0]
   1a5b8:	add	r0, r3, #32
   1a5bc:	vst1.64	{d18-d19}, [r2]
   1a5c0:	mov	r2, r3
   1a5c4:	vst1.64	{d20-d21}, [r0]
   1a5c8:	mov	r0, #28
   1a5cc:	and	r0, r0, r1, lsr #3
   1a5d0:	and	r1, r1, #31
   1a5d4:	vst1.64	{d16-d17}, [r2], r0
   1a5d8:	mov	r0, #1
   1a5dc:	ldr	lr, [r2, #8]
   1a5e0:	bic	r0, r0, lr, lsr r1
   1a5e4:	eor	r0, lr, r0, lsl r1
   1a5e8:	mov	r1, ip
   1a5ec:	str	r0, [r2, #8]
   1a5f0:	mov	r0, #0
   1a5f4:	mvn	r2, #0
   1a5f8:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a5fc:	mov	sp, fp
   1a600:	pop	{fp, pc}
   1a604:	push	{fp, lr}
   1a608:	mov	fp, sp
   1a60c:	sub	sp, sp, #48	; 0x30
   1a610:	movw	r2, #61920	; 0xf1e0
   1a614:	mov	r3, #32
   1a618:	mov	r1, r0
   1a61c:	movt	r2, #2
   1a620:	add	r0, r2, #16
   1a624:	vld1.64	{d16-d17}, [r2], r3
   1a628:	mov	r3, sp
   1a62c:	vld1.64	{d18-d19}, [r0]
   1a630:	add	r0, r3, #16
   1a634:	vld1.64	{d20-d21}, [r2]
   1a638:	mov	r2, r3
   1a63c:	vst1.64	{d18-d19}, [r0]
   1a640:	add	r0, r3, #32
   1a644:	vst1.64	{d20-d21}, [r0]
   1a648:	mov	r0, #12
   1a64c:	vst1.64	{d16-d17}, [r2], r0
   1a650:	ldr	r0, [r2]
   1a654:	orr	r0, r0, #67108864	; 0x4000000
   1a658:	str	r0, [r2]
   1a65c:	mov	r0, #0
   1a660:	mvn	r2, #0
   1a664:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a668:	mov	sp, fp
   1a66c:	pop	{fp, pc}
   1a670:	push	{fp, lr}
   1a674:	mov	fp, sp
   1a678:	sub	sp, sp, #48	; 0x30
   1a67c:	mov	ip, r1
   1a680:	mov	r1, r0
   1a684:	movw	r0, #61920	; 0xf1e0
   1a688:	mov	r3, #32
   1a68c:	movt	r0, #2
   1a690:	add	r2, r0, #16
   1a694:	vld1.64	{d16-d17}, [r0], r3
   1a698:	mov	r3, sp
   1a69c:	vld1.64	{d18-d19}, [r2]
   1a6a0:	add	r2, r3, #16
   1a6a4:	vld1.64	{d20-d21}, [r0]
   1a6a8:	add	r0, r3, #32
   1a6ac:	vst1.64	{d18-d19}, [r2]
   1a6b0:	mov	r2, r3
   1a6b4:	vst1.64	{d20-d21}, [r0]
   1a6b8:	mov	r0, #12
   1a6bc:	vst1.64	{d16-d17}, [r2], r0
   1a6c0:	ldr	r0, [r2]
   1a6c4:	orr	r0, r0, #67108864	; 0x4000000
   1a6c8:	str	r0, [r2]
   1a6cc:	mov	r0, #0
   1a6d0:	mov	r2, ip
   1a6d4:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a6d8:	mov	sp, fp
   1a6dc:	pop	{fp, pc}
   1a6e0:	push	{r4, sl, fp, lr}
   1a6e4:	add	fp, sp, #8
   1a6e8:	sub	sp, sp, #96	; 0x60
   1a6ec:	mov	ip, r2
   1a6f0:	mov	r2, sp
   1a6f4:	vmov.i32	q8, #0	; 0x00000000
   1a6f8:	mov	r4, #28
   1a6fc:	cmp	r1, #10
   1a700:	mov	r3, r2
   1a704:	add	lr, r2, #16
   1a708:	vst1.64	{d16-d17}, [r3], r4
   1a70c:	vst1.64	{d16-d17}, [lr]
   1a710:	vst1.32	{d16-d17}, [r3]
   1a714:	beq	1a764 <__assert_fail@plt+0x917c>
   1a718:	vld1.64	{d16-d17}, [r2], r4
   1a71c:	vld1.64	{d18-d19}, [lr]
   1a720:	add	r3, sp, #48	; 0x30
   1a724:	add	r4, r3, #4
   1a728:	vld1.32	{d20-d21}, [r2]
   1a72c:	add	r2, r3, #20
   1a730:	vst1.32	{d16-d17}, [r4]
   1a734:	vst1.32	{d18-d19}, [r2]
   1a738:	add	r2, r3, #32
   1a73c:	vst1.32	{d20-d21}, [r2]
   1a740:	str	r1, [sp, #48]	; 0x30
   1a744:	mvn	r2, #0
   1a748:	ldr	r1, [sp, #60]	; 0x3c
   1a74c:	orr	r1, r1, #67108864	; 0x4000000
   1a750:	str	r1, [sp, #60]	; 0x3c
   1a754:	mov	r1, ip
   1a758:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a75c:	sub	sp, fp, #8
   1a760:	pop	{r4, sl, fp, pc}
   1a764:	bl	115c4 <abort@plt>
   1a768:	push	{r4, r5, fp, lr}
   1a76c:	add	fp, sp, #8
   1a770:	sub	sp, sp, #48	; 0x30
   1a774:	mov	ip, r3
   1a778:	movw	r3, #61920	; 0xf1e0
   1a77c:	mov	lr, #32
   1a780:	cmp	r1, #0
   1a784:	mov	r5, sp
   1a788:	movt	r3, #2
   1a78c:	cmpne	r2, #0
   1a790:	add	r4, r3, #16
   1a794:	vld1.64	{d16-d17}, [r3], lr
   1a798:	vld1.64	{d18-d19}, [r4]
   1a79c:	add	r4, r5, #16
   1a7a0:	vld1.64	{d20-d21}, [r3]
   1a7a4:	vst1.64	{d16-d17}, [r5], lr
   1a7a8:	mov	r3, #10
   1a7ac:	vst1.64	{d18-d19}, [r4]
   1a7b0:	vst1.64	{d20-d21}, [r5]
   1a7b4:	str	r3, [sp]
   1a7b8:	bne	1a7c0 <__assert_fail@plt+0x91d8>
   1a7bc:	bl	115c4 <abort@plt>
   1a7c0:	str	r2, [sp, #44]	; 0x2c
   1a7c4:	str	r1, [sp, #40]	; 0x28
   1a7c8:	mov	r3, sp
   1a7cc:	mov	r1, ip
   1a7d0:	mvn	r2, #0
   1a7d4:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a7d8:	sub	sp, fp, #8
   1a7dc:	pop	{r4, r5, fp, pc}
   1a7e0:	push	{r4, r5, fp, lr}
   1a7e4:	add	fp, sp, #8
   1a7e8:	sub	sp, sp, #48	; 0x30
   1a7ec:	mov	lr, r3
   1a7f0:	movw	r3, #61920	; 0xf1e0
   1a7f4:	mov	ip, #32
   1a7f8:	cmp	r1, #0
   1a7fc:	mov	r5, sp
   1a800:	movt	r3, #2
   1a804:	cmpne	r2, #0
   1a808:	add	r4, r3, #16
   1a80c:	vld1.64	{d16-d17}, [r3], ip
   1a810:	vld1.64	{d18-d19}, [r4]
   1a814:	add	r4, r5, #16
   1a818:	vld1.64	{d20-d21}, [r3]
   1a81c:	vst1.64	{d16-d17}, [r5], ip
   1a820:	mov	r3, #10
   1a824:	vst1.64	{d18-d19}, [r4]
   1a828:	vst1.64	{d20-d21}, [r5]
   1a82c:	str	r3, [sp]
   1a830:	bne	1a838 <__assert_fail@plt+0x9250>
   1a834:	bl	115c4 <abort@plt>
   1a838:	ldr	ip, [fp, #8]
   1a83c:	str	r2, [sp, #44]	; 0x2c
   1a840:	str	r1, [sp, #40]	; 0x28
   1a844:	mov	r3, sp
   1a848:	mov	r1, lr
   1a84c:	mov	r2, ip
   1a850:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a854:	sub	sp, fp, #8
   1a858:	pop	{r4, r5, fp, pc}
   1a85c:	push	{r4, sl, fp, lr}
   1a860:	add	fp, sp, #8
   1a864:	sub	sp, sp, #48	; 0x30
   1a868:	mov	ip, r2
   1a86c:	movw	r2, #61920	; 0xf1e0
   1a870:	mov	lr, #32
   1a874:	cmp	r0, #0
   1a878:	mov	r4, sp
   1a87c:	movt	r2, #2
   1a880:	cmpne	r1, #0
   1a884:	add	r3, r2, #16
   1a888:	vld1.64	{d16-d17}, [r2], lr
   1a88c:	vld1.64	{d18-d19}, [r3]
   1a890:	add	r3, r4, #16
   1a894:	vld1.64	{d20-d21}, [r2]
   1a898:	vst1.64	{d16-d17}, [r4], lr
   1a89c:	mov	r2, #10
   1a8a0:	vst1.64	{d18-d19}, [r3]
   1a8a4:	vst1.64	{d20-d21}, [r4]
   1a8a8:	str	r2, [sp]
   1a8ac:	bne	1a8b4 <__assert_fail@plt+0x92cc>
   1a8b0:	bl	115c4 <abort@plt>
   1a8b4:	str	r1, [sp, #44]	; 0x2c
   1a8b8:	str	r0, [sp, #40]	; 0x28
   1a8bc:	mov	r3, sp
   1a8c0:	mov	r0, #0
   1a8c4:	mov	r1, ip
   1a8c8:	mvn	r2, #0
   1a8cc:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a8d0:	sub	sp, fp, #8
   1a8d4:	pop	{r4, sl, fp, pc}
   1a8d8:	push	{r4, r5, fp, lr}
   1a8dc:	add	fp, sp, #8
   1a8e0:	sub	sp, sp, #48	; 0x30
   1a8e4:	mov	lr, r2
   1a8e8:	movw	r2, #61920	; 0xf1e0
   1a8ec:	mov	ip, r3
   1a8f0:	mov	r3, #32
   1a8f4:	cmp	r0, #0
   1a8f8:	mov	r5, sp
   1a8fc:	movt	r2, #2
   1a900:	cmpne	r1, #0
   1a904:	add	r4, r2, #16
   1a908:	vld1.64	{d16-d17}, [r2], r3
   1a90c:	vld1.64	{d18-d19}, [r4]
   1a910:	add	r4, r5, #16
   1a914:	vld1.64	{d20-d21}, [r2]
   1a918:	vst1.64	{d16-d17}, [r5], r3
   1a91c:	mov	r2, #10
   1a920:	vst1.64	{d18-d19}, [r4]
   1a924:	vst1.64	{d20-d21}, [r5]
   1a928:	str	r2, [sp]
   1a92c:	bne	1a934 <__assert_fail@plt+0x934c>
   1a930:	bl	115c4 <abort@plt>
   1a934:	str	r1, [sp, #44]	; 0x2c
   1a938:	str	r0, [sp, #40]	; 0x28
   1a93c:	mov	r3, sp
   1a940:	mov	r0, #0
   1a944:	mov	r1, lr
   1a948:	mov	r2, ip
   1a94c:	bl	1a1f4 <__assert_fail@plt+0x8c0c>
   1a950:	sub	sp, fp, #8
   1a954:	pop	{r4, r5, fp, pc}
   1a958:	movw	r3, #61792	; 0xf160
   1a95c:	movt	r3, #2
   1a960:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a964:	movw	r3, #61792	; 0xf160
   1a968:	mov	r2, r1
   1a96c:	mov	r1, r0
   1a970:	mov	r0, #0
   1a974:	movt	r3, #2
   1a978:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a97c:	movw	r3, #61792	; 0xf160
   1a980:	mvn	r2, #0
   1a984:	movt	r3, #2
   1a988:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a98c:	movw	r3, #61792	; 0xf160
   1a990:	mov	r1, r0
   1a994:	mov	r0, #0
   1a998:	mvn	r2, #0
   1a99c:	movt	r3, #2
   1a9a0:	b	1a1f4 <__assert_fail@plt+0x8c0c>
   1a9a4:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1a9a8:	add	fp, sp, #24
   1a9ac:	movw	r8, #0
   1a9b0:	mov	r6, r2
   1a9b4:	mov	r4, r1
   1a9b8:	mov	r5, r0
   1a9bc:	movt	r8, #32752	; 0x7ff0
   1a9c0:	mov	r0, r5
   1a9c4:	mov	r1, r4
   1a9c8:	mov	r2, r6
   1a9cc:	bl	112dc <read@plt>
   1a9d0:	mov	r7, r0
   1a9d4:	cmn	r0, #1
   1a9d8:	bgt	1aa00 <__assert_fail@plt+0x9418>
   1a9dc:	bl	114b0 <__errno_location@plt>
   1a9e0:	ldr	r0, [r0]
   1a9e4:	cmp	r0, #4
   1a9e8:	beq	1a9c0 <__assert_fail@plt+0x93d8>
   1a9ec:	cmp	r6, r8
   1a9f0:	bls	1aa00 <__assert_fail@plt+0x9418>
   1a9f4:	cmp	r0, #22
   1a9f8:	mov	r6, r8
   1a9fc:	beq	1a9c0 <__assert_fail@plt+0x93d8>
   1aa00:	mov	r0, r7
   1aa04:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1aa08:	push	{r4, r5, r6, r7, fp, lr}
   1aa0c:	add	fp, sp, #16
   1aa10:	mov	r4, r0
   1aa14:	cmp	r0, #2
   1aa18:	movhi	r0, r4
   1aa1c:	pophi	{r4, r5, r6, r7, fp, pc}
   1aa20:	mov	r0, r4
   1aa24:	bl	1caf4 <__assert_fail@plt+0xb50c>
   1aa28:	mov	r5, r0
   1aa2c:	bl	114b0 <__errno_location@plt>
   1aa30:	ldr	r7, [r0]
   1aa34:	mov	r6, r0
   1aa38:	mov	r0, r4
   1aa3c:	bl	115d0 <close@plt>
   1aa40:	mov	r0, r5
   1aa44:	str	r7, [r6]
   1aa48:	pop	{r4, r5, r6, r7, fp, pc}
   1aa4c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aa50:	add	fp, sp, #24
   1aa54:	sub	sp, sp, #32
   1aa58:	ldr	r6, [fp, #12]
   1aa5c:	ldr	r7, [fp, #8]
   1aa60:	mov	r4, r2
   1aa64:	mov	r8, r0
   1aa68:	cmp	r1, #0
   1aa6c:	beq	1aa94 <__assert_fail@plt+0x94ac>
   1aa70:	movw	r2, #58664	; 0xe528
   1aa74:	mov	r5, r1
   1aa78:	str	r3, [sp, #4]
   1aa7c:	str	r4, [sp]
   1aa80:	mov	r0, r8
   1aa84:	mov	r1, #1
   1aa88:	movt	r2, #1
   1aa8c:	mov	r3, r5
   1aa90:	b	1aaac <__assert_fail@plt+0x94c4>
   1aa94:	movw	r2, #58676	; 0xe534
   1aa98:	str	r3, [sp]
   1aa9c:	mov	r0, r8
   1aaa0:	mov	r1, #1
   1aaa4:	mov	r3, r4
   1aaa8:	movt	r2, #1
   1aaac:	bl	114f8 <__fprintf_chk@plt>
   1aab0:	movw	r1, #58683	; 0xe53b
   1aab4:	mov	r0, #0
   1aab8:	mov	r2, #5
   1aabc:	movt	r1, #1
   1aac0:	bl	11354 <dcgettext@plt>
   1aac4:	movw	r2, #59401	; 0xe809
   1aac8:	mov	r3, r0
   1aacc:	movw	r0, #2022	; 0x7e6
   1aad0:	mov	r1, #1
   1aad4:	str	r0, [sp]
   1aad8:	movt	r2, #1
   1aadc:	mov	r0, r8
   1aae0:	bl	114f8 <__fprintf_chk@plt>
   1aae4:	movw	r4, #55013	; 0xd6e5
   1aae8:	mov	r1, r8
   1aaec:	movt	r4, #1
   1aaf0:	mov	r0, r4
   1aaf4:	bl	112a0 <fputs_unlocked@plt>
   1aaf8:	movw	r1, #58687	; 0xe53f
   1aafc:	mov	r0, #0
   1ab00:	mov	r2, #5
   1ab04:	movt	r1, #1
   1ab08:	bl	11354 <dcgettext@plt>
   1ab0c:	movw	r3, #58858	; 0xe5ea
   1ab10:	mov	r2, r0
   1ab14:	mov	r0, r8
   1ab18:	mov	r1, #1
   1ab1c:	movt	r3, #1
   1ab20:	bl	114f8 <__fprintf_chk@plt>
   1ab24:	mov	r0, r4
   1ab28:	mov	r1, r8
   1ab2c:	bl	112a0 <fputs_unlocked@plt>
   1ab30:	cmp	r6, #9
   1ab34:	bhi	1ab70 <__assert_fail@plt+0x9588>
   1ab38:	add	r0, pc, #0
   1ab3c:	ldr	pc, [r0, r6, lsl #2]
   1ab40:	andeq	sl, r1, r8, ror #22
   1ab44:	andeq	sl, r1, ip, ror fp
   1ab48:	andeq	sl, r1, ip, lsr #23
   1ab4c:	ldrdeq	sl, [r1], -r4
   1ab50:	strdeq	sl, [r1], -ip
   1ab54:	andeq	sl, r1, r4, lsr #24
   1ab58:	andeq	sl, r1, ip, asr #24
   1ab5c:	andeq	sl, r1, r4, lsl #25
   1ab60:	andeq	sl, r1, ip, lsr #26
   1ab64:	ldrdeq	sl, [r1], -r4
   1ab68:	sub	sp, fp, #24
   1ab6c:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ab70:	movw	r1, #59211	; 0xe74b
   1ab74:	movt	r1, #1
   1ab78:	b	1acdc <__assert_fail@plt+0x96f4>
   1ab7c:	movw	r1, #58892	; 0xe60c
   1ab80:	mov	r0, #0
   1ab84:	mov	r2, #5
   1ab88:	movt	r1, #1
   1ab8c:	bl	11354 <dcgettext@plt>
   1ab90:	ldr	r3, [r7]
   1ab94:	mov	r2, r0
   1ab98:	mov	r0, r8
   1ab9c:	mov	r1, #1
   1aba0:	sub	sp, fp, #24
   1aba4:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   1aba8:	b	114f8 <__fprintf_chk@plt>
   1abac:	movw	r1, #58908	; 0xe61c
   1abb0:	mov	r0, #0
   1abb4:	mov	r2, #5
   1abb8:	movt	r1, #1
   1abbc:	bl	11354 <dcgettext@plt>
   1abc0:	mov	r2, r0
   1abc4:	ldr	r3, [r7]
   1abc8:	ldr	r0, [r7, #4]
   1abcc:	str	r0, [sp]
   1abd0:	b	1acc0 <__assert_fail@plt+0x96d8>
   1abd4:	movw	r1, #58931	; 0xe633
   1abd8:	mov	r0, #0
   1abdc:	mov	r2, #5
   1abe0:	movt	r1, #1
   1abe4:	bl	11354 <dcgettext@plt>
   1abe8:	ldr	r3, [r7]
   1abec:	mov	r2, r0
   1abf0:	ldmib	r7, {r0, r1}
   1abf4:	stm	sp, {r0, r1}
   1abf8:	b	1acc0 <__assert_fail@plt+0x96d8>
   1abfc:	movw	r1, #58959	; 0xe64f
   1ac00:	mov	r0, #0
   1ac04:	mov	r2, #5
   1ac08:	movt	r1, #1
   1ac0c:	bl	11354 <dcgettext@plt>
   1ac10:	ldr	r3, [r7]
   1ac14:	mov	r2, r0
   1ac18:	ldmib	r7, {r0, r1, r7}
   1ac1c:	stm	sp, {r0, r1, r7}
   1ac20:	b	1acc0 <__assert_fail@plt+0x96d8>
   1ac24:	movw	r1, #58991	; 0xe66f
   1ac28:	mov	r0, #0
   1ac2c:	mov	r2, #5
   1ac30:	movt	r1, #1
   1ac34:	bl	11354 <dcgettext@plt>
   1ac38:	ldr	r3, [r7]
   1ac3c:	mov	r2, r0
   1ac40:	ldmib	r7, {r0, r1, r6, r7}
   1ac44:	stm	sp, {r0, r1, r6, r7}
   1ac48:	b	1acc0 <__assert_fail@plt+0x96d8>
   1ac4c:	movw	r1, #59027	; 0xe693
   1ac50:	mov	r0, #0
   1ac54:	mov	r2, #5
   1ac58:	movt	r1, #1
   1ac5c:	bl	11354 <dcgettext@plt>
   1ac60:	ldr	r3, [r7]
   1ac64:	mov	r2, r0
   1ac68:	ldmib	r7, {r0, r1, r6}
   1ac6c:	ldr	r5, [r7, #16]
   1ac70:	ldr	r7, [r7, #20]
   1ac74:	stm	sp, {r0, r1, r6}
   1ac78:	str	r5, [sp, #12]
   1ac7c:	str	r7, [sp, #16]
   1ac80:	b	1acc0 <__assert_fail@plt+0x96d8>
   1ac84:	movw	r1, #59067	; 0xe6bb
   1ac88:	mov	r0, #0
   1ac8c:	mov	r2, #5
   1ac90:	movt	r1, #1
   1ac94:	bl	11354 <dcgettext@plt>
   1ac98:	ldr	r3, [r7]
   1ac9c:	mov	r2, r0
   1aca0:	ldmib	r7, {r0, r1, r6}
   1aca4:	ldr	r5, [r7, #16]
   1aca8:	ldr	r4, [r7, #20]
   1acac:	ldr	r7, [r7, #24]
   1acb0:	stm	sp, {r0, r1, r6}
   1acb4:	str	r5, [sp, #12]
   1acb8:	str	r4, [sp, #16]
   1acbc:	str	r7, [sp, #20]
   1acc0:	mov	r0, r8
   1acc4:	mov	r1, #1
   1acc8:	bl	114f8 <__fprintf_chk@plt>
   1accc:	sub	sp, fp, #24
   1acd0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1acd4:	movw	r1, #59159	; 0xe717
   1acd8:	movt	r1, #1
   1acdc:	mov	r0, #0
   1ace0:	mov	r2, #5
   1ace4:	bl	11354 <dcgettext@plt>
   1ace8:	mov	ip, r0
   1acec:	ldr	r3, [r7]
   1acf0:	ldr	r0, [r7, #4]
   1acf4:	ldr	r1, [r7, #8]
   1acf8:	ldr	r6, [r7, #12]
   1acfc:	ldr	r5, [r7, #16]
   1ad00:	ldr	r4, [r7, #20]
   1ad04:	ldr	r2, [r7, #24]
   1ad08:	ldr	lr, [r7, #28]
   1ad0c:	ldr	r7, [r7, #32]
   1ad10:	stm	sp, {r0, r1, r6}
   1ad14:	str	r5, [sp, #12]
   1ad18:	str	r4, [sp, #16]
   1ad1c:	str	r2, [sp, #20]
   1ad20:	str	lr, [sp, #24]
   1ad24:	str	r7, [sp, #28]
   1ad28:	b	1ad70 <__assert_fail@plt+0x9788>
   1ad2c:	movw	r1, #59111	; 0xe6e7
   1ad30:	mov	r0, #0
   1ad34:	mov	r2, #5
   1ad38:	movt	r1, #1
   1ad3c:	bl	11354 <dcgettext@plt>
   1ad40:	mov	ip, r0
   1ad44:	ldr	r3, [r7]
   1ad48:	ldmib	r7, {r0, r1, r6}
   1ad4c:	ldr	r5, [r7, #16]
   1ad50:	ldr	r4, [r7, #20]
   1ad54:	ldr	r2, [r7, #24]
   1ad58:	ldr	r7, [r7, #28]
   1ad5c:	stm	sp, {r0, r1, r6}
   1ad60:	str	r5, [sp, #12]
   1ad64:	str	r4, [sp, #16]
   1ad68:	str	r2, [sp, #20]
   1ad6c:	str	r7, [sp, #24]
   1ad70:	mov	r0, r8
   1ad74:	mov	r1, #1
   1ad78:	mov	r2, ip
   1ad7c:	bl	114f8 <__fprintf_chk@plt>
   1ad80:	sub	sp, fp, #24
   1ad84:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad88:	push	{r4, sl, fp, lr}
   1ad8c:	add	fp, sp, #8
   1ad90:	sub	sp, sp, #8
   1ad94:	ldr	ip, [fp, #8]
   1ad98:	mov	lr, #0
   1ad9c:	ldr	r4, [ip, lr, lsl #2]
   1ada0:	add	lr, lr, #1
   1ada4:	cmp	r4, #0
   1ada8:	bne	1ad9c <__assert_fail@plt+0x97b4>
   1adac:	sub	r4, lr, #1
   1adb0:	str	ip, [sp]
   1adb4:	str	r4, [sp, #4]
   1adb8:	bl	1aa4c <__assert_fail@plt+0x9464>
   1adbc:	sub	sp, fp, #8
   1adc0:	pop	{r4, sl, fp, pc}
   1adc4:	push	{fp, lr}
   1adc8:	mov	fp, sp
   1adcc:	sub	sp, sp, #48	; 0x30
   1add0:	ldr	ip, [fp, #8]
   1add4:	ldr	lr, [ip]
   1add8:	cmp	lr, #0
   1addc:	str	lr, [sp, #8]
   1ade0:	beq	1ae7c <__assert_fail@plt+0x9894>
   1ade4:	ldr	lr, [ip, #4]
   1ade8:	cmp	lr, #0
   1adec:	str	lr, [sp, #12]
   1adf0:	beq	1ae84 <__assert_fail@plt+0x989c>
   1adf4:	ldr	lr, [ip, #8]
   1adf8:	cmp	lr, #0
   1adfc:	str	lr, [sp, #16]
   1ae00:	beq	1ae8c <__assert_fail@plt+0x98a4>
   1ae04:	ldr	lr, [ip, #12]
   1ae08:	cmp	lr, #0
   1ae0c:	str	lr, [sp, #20]
   1ae10:	beq	1ae94 <__assert_fail@plt+0x98ac>
   1ae14:	ldr	lr, [ip, #16]
   1ae18:	cmp	lr, #0
   1ae1c:	str	lr, [sp, #24]
   1ae20:	beq	1ae9c <__assert_fail@plt+0x98b4>
   1ae24:	ldr	lr, [ip, #20]
   1ae28:	cmp	lr, #0
   1ae2c:	str	lr, [sp, #28]
   1ae30:	beq	1aea4 <__assert_fail@plt+0x98bc>
   1ae34:	ldr	lr, [ip, #24]
   1ae38:	cmp	lr, #0
   1ae3c:	str	lr, [sp, #32]
   1ae40:	beq	1aeac <__assert_fail@plt+0x98c4>
   1ae44:	ldr	lr, [ip, #28]
   1ae48:	cmp	lr, #0
   1ae4c:	str	lr, [sp, #36]	; 0x24
   1ae50:	beq	1aeb4 <__assert_fail@plt+0x98cc>
   1ae54:	ldr	lr, [ip, #32]
   1ae58:	cmp	lr, #0
   1ae5c:	str	lr, [sp, #40]	; 0x28
   1ae60:	beq	1aebc <__assert_fail@plt+0x98d4>
   1ae64:	ldr	lr, [ip, #36]	; 0x24
   1ae68:	mov	ip, #10
   1ae6c:	cmp	lr, #0
   1ae70:	str	lr, [sp, #44]	; 0x2c
   1ae74:	movweq	ip, #9
   1ae78:	b	1aec0 <__assert_fail@plt+0x98d8>
   1ae7c:	mov	ip, #0
   1ae80:	b	1aec0 <__assert_fail@plt+0x98d8>
   1ae84:	mov	ip, #1
   1ae88:	b	1aec0 <__assert_fail@plt+0x98d8>
   1ae8c:	mov	ip, #2
   1ae90:	b	1aec0 <__assert_fail@plt+0x98d8>
   1ae94:	mov	ip, #3
   1ae98:	b	1aec0 <__assert_fail@plt+0x98d8>
   1ae9c:	mov	ip, #4
   1aea0:	b	1aec0 <__assert_fail@plt+0x98d8>
   1aea4:	mov	ip, #5
   1aea8:	b	1aec0 <__assert_fail@plt+0x98d8>
   1aeac:	mov	ip, #6
   1aeb0:	b	1aec0 <__assert_fail@plt+0x98d8>
   1aeb4:	mov	ip, #7
   1aeb8:	b	1aec0 <__assert_fail@plt+0x98d8>
   1aebc:	mov	ip, #8
   1aec0:	add	lr, sp, #8
   1aec4:	str	ip, [sp, #4]
   1aec8:	str	lr, [sp]
   1aecc:	bl	1aa4c <__assert_fail@plt+0x9464>
   1aed0:	mov	sp, fp
   1aed4:	pop	{fp, pc}
   1aed8:	push	{fp, lr}
   1aedc:	mov	fp, sp
   1aee0:	sub	sp, sp, #56	; 0x38
   1aee4:	add	ip, fp, #8
   1aee8:	str	ip, [sp, #12]
   1aeec:	ldr	lr, [fp, #8]
   1aef0:	cmp	lr, #0
   1aef4:	str	lr, [sp, #16]
   1aef8:	beq	1af94 <__assert_fail@plt+0x99ac>
   1aefc:	ldr	lr, [ip, #4]
   1af00:	cmp	lr, #0
   1af04:	str	lr, [sp, #20]
   1af08:	beq	1af9c <__assert_fail@plt+0x99b4>
   1af0c:	ldr	lr, [ip, #8]
   1af10:	cmp	lr, #0
   1af14:	str	lr, [sp, #24]
   1af18:	beq	1afa4 <__assert_fail@plt+0x99bc>
   1af1c:	ldr	lr, [ip, #12]
   1af20:	cmp	lr, #0
   1af24:	str	lr, [sp, #28]
   1af28:	beq	1afac <__assert_fail@plt+0x99c4>
   1af2c:	ldr	lr, [ip, #16]
   1af30:	cmp	lr, #0
   1af34:	str	lr, [sp, #32]
   1af38:	beq	1afb4 <__assert_fail@plt+0x99cc>
   1af3c:	ldr	lr, [ip, #20]
   1af40:	cmp	lr, #0
   1af44:	str	lr, [sp, #36]	; 0x24
   1af48:	beq	1afbc <__assert_fail@plt+0x99d4>
   1af4c:	ldr	lr, [ip, #24]
   1af50:	cmp	lr, #0
   1af54:	str	lr, [sp, #40]	; 0x28
   1af58:	beq	1afc4 <__assert_fail@plt+0x99dc>
   1af5c:	ldr	lr, [ip, #28]
   1af60:	cmp	lr, #0
   1af64:	str	lr, [sp, #44]	; 0x2c
   1af68:	beq	1afcc <__assert_fail@plt+0x99e4>
   1af6c:	ldr	lr, [ip, #32]
   1af70:	cmp	lr, #0
   1af74:	str	lr, [sp, #48]	; 0x30
   1af78:	beq	1afd4 <__assert_fail@plt+0x99ec>
   1af7c:	ldr	lr, [ip, #36]	; 0x24
   1af80:	mov	ip, #10
   1af84:	cmp	lr, #0
   1af88:	str	lr, [sp, #52]	; 0x34
   1af8c:	movweq	ip, #9
   1af90:	b	1afd8 <__assert_fail@plt+0x99f0>
   1af94:	mov	ip, #0
   1af98:	b	1afd8 <__assert_fail@plt+0x99f0>
   1af9c:	mov	ip, #1
   1afa0:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afa4:	mov	ip, #2
   1afa8:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afac:	mov	ip, #3
   1afb0:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afb4:	mov	ip, #4
   1afb8:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afbc:	mov	ip, #5
   1afc0:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afc4:	mov	ip, #6
   1afc8:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afcc:	mov	ip, #7
   1afd0:	b	1afd8 <__assert_fail@plt+0x99f0>
   1afd4:	mov	ip, #8
   1afd8:	add	lr, sp, #16
   1afdc:	str	ip, [sp, #4]
   1afe0:	str	lr, [sp]
   1afe4:	bl	1aa4c <__assert_fail@plt+0x9464>
   1afe8:	mov	sp, fp
   1afec:	pop	{fp, pc}
   1aff0:	push	{fp, lr}
   1aff4:	mov	fp, sp
   1aff8:	movw	r0, #61876	; 0xf1b4
   1affc:	movt	r0, #2
   1b000:	ldr	r1, [r0]
   1b004:	movw	r0, #55013	; 0xd6e5
   1b008:	movt	r0, #1
   1b00c:	bl	112a0 <fputs_unlocked@plt>
   1b010:	movw	r1, #59271	; 0xe787
   1b014:	mov	r0, #0
   1b018:	mov	r2, #5
   1b01c:	movt	r1, #1
   1b020:	bl	11354 <dcgettext@plt>
   1b024:	movw	r2, #59291	; 0xe79b
   1b028:	mov	r1, r0
   1b02c:	mov	r0, #1
   1b030:	movt	r2, #1
   1b034:	bl	114d4 <__printf_chk@plt>
   1b038:	movw	r1, #59313	; 0xe7b1
   1b03c:	mov	r0, #0
   1b040:	mov	r2, #5
   1b044:	movt	r1, #1
   1b048:	bl	11354 <dcgettext@plt>
   1b04c:	movw	r2, #55890	; 0xda52
   1b050:	movw	r3, #55904	; 0xda60
   1b054:	mov	r1, r0
   1b058:	mov	r0, #1
   1b05c:	movt	r2, #1
   1b060:	movt	r3, #1
   1b064:	bl	114d4 <__printf_chk@plt>
   1b068:	movw	r1, #59333	; 0xe7c5
   1b06c:	mov	r0, #0
   1b070:	mov	r2, #5
   1b074:	movt	r1, #1
   1b078:	bl	11354 <dcgettext@plt>
   1b07c:	movw	r2, #59372	; 0xe7ec
   1b080:	mov	r1, r0
   1b084:	mov	r0, #1
   1b088:	movt	r2, #1
   1b08c:	pop	{fp, lr}
   1b090:	b	114d4 <__printf_chk@plt>
   1b094:	push	{r4, r5, r6, sl, fp, lr}
   1b098:	add	fp, sp, #16
   1b09c:	mov	r4, r2
   1b0a0:	mov	r5, r1
   1b0a4:	mov	r6, r0
   1b0a8:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b0ac:	cmp	r0, #0
   1b0b0:	popne	{r4, r5, r6, sl, fp, pc}
   1b0b4:	cmp	r6, #0
   1b0b8:	beq	1b0cc <__assert_fail@plt+0x9ae4>
   1b0bc:	cmp	r5, #0
   1b0c0:	cmpne	r4, #0
   1b0c4:	bne	1b0cc <__assert_fail@plt+0x9ae4>
   1b0c8:	pop	{r4, r5, r6, sl, fp, pc}
   1b0cc:	bl	1b66c <__assert_fail@plt+0xa084>
   1b0d0:	push	{r4, r5, r6, sl, fp, lr}
   1b0d4:	add	fp, sp, #16
   1b0d8:	mov	r4, r2
   1b0dc:	mov	r5, r1
   1b0e0:	mov	r6, r0
   1b0e4:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b0e8:	cmp	r0, #0
   1b0ec:	popne	{r4, r5, r6, sl, fp, pc}
   1b0f0:	cmp	r6, #0
   1b0f4:	beq	1b108 <__assert_fail@plt+0x9b20>
   1b0f8:	cmp	r5, #0
   1b0fc:	cmpne	r4, #0
   1b100:	bne	1b108 <__assert_fail@plt+0x9b20>
   1b104:	pop	{r4, r5, r6, sl, fp, pc}
   1b108:	bl	1b66c <__assert_fail@plt+0xa084>
   1b10c:	push	{fp, lr}
   1b110:	mov	fp, sp
   1b114:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b118:	cmp	r0, #0
   1b11c:	popne	{fp, pc}
   1b120:	bl	1b66c <__assert_fail@plt+0xa084>
   1b124:	push	{fp, lr}
   1b128:	mov	fp, sp
   1b12c:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b130:	cmp	r0, #0
   1b134:	popne	{fp, pc}
   1b138:	bl	1b66c <__assert_fail@plt+0xa084>
   1b13c:	push	{fp, lr}
   1b140:	mov	fp, sp
   1b144:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b148:	cmp	r0, #0
   1b14c:	popne	{fp, pc}
   1b150:	bl	1b66c <__assert_fail@plt+0xa084>
   1b154:	push	{r4, r5, fp, lr}
   1b158:	add	fp, sp, #8
   1b15c:	mov	r4, r1
   1b160:	mov	r5, r0
   1b164:	bl	1c654 <__assert_fail@plt+0xb06c>
   1b168:	cmp	r0, #0
   1b16c:	popne	{r4, r5, fp, pc}
   1b170:	cmp	r5, #0
   1b174:	beq	1b184 <__assert_fail@plt+0x9b9c>
   1b178:	cmp	r4, #0
   1b17c:	bne	1b184 <__assert_fail@plt+0x9b9c>
   1b180:	pop	{r4, r5, fp, pc}
   1b184:	bl	1b66c <__assert_fail@plt+0xa084>
   1b188:	push	{fp, lr}
   1b18c:	mov	fp, sp
   1b190:	cmp	r1, #0
   1b194:	orreq	r1, r1, #1
   1b198:	bl	1c654 <__assert_fail@plt+0xb06c>
   1b19c:	cmp	r0, #0
   1b1a0:	popne	{fp, pc}
   1b1a4:	bl	1b66c <__assert_fail@plt+0xa084>
   1b1a8:	push	{fp, lr}
   1b1ac:	mov	fp, sp
   1b1b0:	clz	r3, r2
   1b1b4:	lsr	ip, r3, #5
   1b1b8:	clz	r3, r1
   1b1bc:	lsr	r3, r3, #5
   1b1c0:	orrs	r3, r3, ip
   1b1c4:	movwne	r1, #1
   1b1c8:	movwne	r2, #1
   1b1cc:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b1d0:	cmp	r0, #0
   1b1d4:	popne	{fp, pc}
   1b1d8:	bl	1b66c <__assert_fail@plt+0xa084>
   1b1dc:	push	{fp, lr}
   1b1e0:	mov	fp, sp
   1b1e4:	mov	r2, r1
   1b1e8:	mov	r1, r0
   1b1ec:	mov	r0, #0
   1b1f0:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b1f4:	cmp	r0, #0
   1b1f8:	popne	{fp, pc}
   1b1fc:	bl	1b66c <__assert_fail@plt+0xa084>
   1b200:	push	{fp, lr}
   1b204:	mov	fp, sp
   1b208:	mov	r2, r1
   1b20c:	mov	r1, r0
   1b210:	clz	r0, r2
   1b214:	clz	r3, r1
   1b218:	lsr	r0, r0, #5
   1b21c:	lsr	r3, r3, #5
   1b220:	orrs	r0, r3, r0
   1b224:	movwne	r1, #1
   1b228:	movwne	r2, #1
   1b22c:	mov	r0, #0
   1b230:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b234:	cmp	r0, #0
   1b238:	popne	{fp, pc}
   1b23c:	bl	1b66c <__assert_fail@plt+0xa084>
   1b240:	push	{r4, r5, r6, sl, fp, lr}
   1b244:	add	fp, sp, #16
   1b248:	ldr	r5, [r1]
   1b24c:	mov	r4, r1
   1b250:	mov	r6, r0
   1b254:	cmp	r0, #0
   1b258:	beq	1b270 <__assert_fail@plt+0x9c88>
   1b25c:	mov	r0, #1
   1b260:	add	r0, r0, r5, lsr #1
   1b264:	adds	r5, r5, r0
   1b268:	bcc	1b278 <__assert_fail@plt+0x9c90>
   1b26c:	b	1b2b4 <__assert_fail@plt+0x9ccc>
   1b270:	cmp	r5, #0
   1b274:	movweq	r5, #64	; 0x40
   1b278:	mov	r0, r6
   1b27c:	mov	r1, r5
   1b280:	mov	r2, #1
   1b284:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b288:	cmp	r5, #0
   1b28c:	mov	r1, r5
   1b290:	movwne	r1, #1
   1b294:	cmp	r0, #0
   1b298:	bne	1b2ac <__assert_fail@plt+0x9cc4>
   1b29c:	clz	r2, r6
   1b2a0:	lsr	r2, r2, #5
   1b2a4:	orrs	r1, r2, r1
   1b2a8:	bne	1b2b4 <__assert_fail@plt+0x9ccc>
   1b2ac:	str	r5, [r4]
   1b2b0:	pop	{r4, r5, r6, sl, fp, pc}
   1b2b4:	bl	1b66c <__assert_fail@plt+0xa084>
   1b2b8:	push	{r4, r5, r6, r7, fp, lr}
   1b2bc:	add	fp, sp, #16
   1b2c0:	ldr	r5, [r1]
   1b2c4:	mov	r6, r2
   1b2c8:	mov	r4, r1
   1b2cc:	mov	r7, r0
   1b2d0:	cmp	r0, #0
   1b2d4:	beq	1b2ec <__assert_fail@plt+0x9d04>
   1b2d8:	mov	r0, #1
   1b2dc:	add	r0, r0, r5, lsr #1
   1b2e0:	adds	r5, r5, r0
   1b2e4:	bcc	1b304 <__assert_fail@plt+0x9d1c>
   1b2e8:	b	1b338 <__assert_fail@plt+0x9d50>
   1b2ec:	cmp	r5, #0
   1b2f0:	bne	1b304 <__assert_fail@plt+0x9d1c>
   1b2f4:	mov	r0, #64	; 0x40
   1b2f8:	cmp	r6, #64	; 0x40
   1b2fc:	udiv	r5, r0, r6
   1b300:	addhi	r5, r5, #1
   1b304:	mov	r0, r7
   1b308:	mov	r1, r5
   1b30c:	mov	r2, r6
   1b310:	bl	1cab8 <__assert_fail@plt+0xb4d0>
   1b314:	cmp	r0, #0
   1b318:	bne	1b330 <__assert_fail@plt+0x9d48>
   1b31c:	cmp	r7, #0
   1b320:	beq	1b338 <__assert_fail@plt+0x9d50>
   1b324:	cmp	r6, #0
   1b328:	cmpne	r5, #0
   1b32c:	bne	1b338 <__assert_fail@plt+0x9d50>
   1b330:	str	r5, [r4]
   1b334:	pop	{r4, r5, r6, r7, fp, pc}
   1b338:	bl	1b66c <__assert_fail@plt+0xa084>
   1b33c:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b340:	add	fp, sp, #24
   1b344:	mov	r8, r1
   1b348:	ldr	r1, [r1]
   1b34c:	mov	r5, r0
   1b350:	add	r0, r1, r1, asr #1
   1b354:	cmp	r0, r1
   1b358:	mvnvs	r0, #-2147483648	; 0x80000000
   1b35c:	cmp	r0, r3
   1b360:	mov	r7, r0
   1b364:	movgt	r7, r3
   1b368:	cmn	r3, #1
   1b36c:	movle	r7, r0
   1b370:	ldr	r0, [fp, #8]
   1b374:	cmn	r0, #1
   1b378:	ble	1b3a0 <__assert_fail@plt+0x9db8>
   1b37c:	cmp	r0, #0
   1b380:	beq	1b3f4 <__assert_fail@plt+0x9e0c>
   1b384:	cmn	r7, #1
   1b388:	ble	1b3c8 <__assert_fail@plt+0x9de0>
   1b38c:	mvn	r4, #-2147483648	; 0x80000000
   1b390:	udiv	r6, r4, r0
   1b394:	cmp	r6, r7
   1b398:	bge	1b3f4 <__assert_fail@plt+0x9e0c>
   1b39c:	b	1b404 <__assert_fail@plt+0x9e1c>
   1b3a0:	cmn	r7, #1
   1b3a4:	ble	1b3e4 <__assert_fail@plt+0x9dfc>
   1b3a8:	cmn	r0, #1
   1b3ac:	beq	1b3f4 <__assert_fail@plt+0x9e0c>
   1b3b0:	mov	r6, #-2147483648	; 0x80000000
   1b3b4:	mvn	r4, #-2147483648	; 0x80000000
   1b3b8:	sdiv	r6, r6, r0
   1b3bc:	cmp	r6, r7
   1b3c0:	bge	1b3f4 <__assert_fail@plt+0x9e0c>
   1b3c4:	b	1b404 <__assert_fail@plt+0x9e1c>
   1b3c8:	beq	1b3f4 <__assert_fail@plt+0x9e0c>
   1b3cc:	mov	r6, #-2147483648	; 0x80000000
   1b3d0:	mvn	r4, #-2147483648	; 0x80000000
   1b3d4:	sdiv	r6, r6, r7
   1b3d8:	cmp	r6, r0
   1b3dc:	bge	1b3f4 <__assert_fail@plt+0x9e0c>
   1b3e0:	b	1b404 <__assert_fail@plt+0x9e1c>
   1b3e4:	mvn	r4, #-2147483648	; 0x80000000
   1b3e8:	sdiv	r6, r4, r0
   1b3ec:	cmp	r7, r6
   1b3f0:	blt	1b404 <__assert_fail@plt+0x9e1c>
   1b3f4:	mul	r6, r7, r0
   1b3f8:	mov	r4, #64	; 0x40
   1b3fc:	cmp	r6, #63	; 0x3f
   1b400:	bgt	1b40c <__assert_fail@plt+0x9e24>
   1b404:	sdiv	r7, r4, r0
   1b408:	mul	r6, r7, r0
   1b40c:	cmp	r5, #0
   1b410:	moveq	r4, #0
   1b414:	streq	r4, [r8]
   1b418:	sub	r4, r7, r1
   1b41c:	cmp	r4, r2
   1b420:	bge	1b4cc <__assert_fail@plt+0x9ee4>
   1b424:	add	r7, r1, r2
   1b428:	mov	r6, #0
   1b42c:	mov	r2, #0
   1b430:	cmp	r7, r3
   1b434:	movwgt	r6, #1
   1b438:	cmn	r3, #1
   1b43c:	movwgt	r2, #1
   1b440:	cmp	r7, r1
   1b444:	bvs	1b500 <__assert_fail@plt+0x9f18>
   1b448:	ands	r1, r2, r6
   1b44c:	bne	1b500 <__assert_fail@plt+0x9f18>
   1b450:	cmn	r0, #1
   1b454:	ble	1b47c <__assert_fail@plt+0x9e94>
   1b458:	cmp	r0, #0
   1b45c:	beq	1b4c8 <__assert_fail@plt+0x9ee0>
   1b460:	cmn	r7, #1
   1b464:	ble	1b4a0 <__assert_fail@plt+0x9eb8>
   1b468:	mvn	r1, #-2147483648	; 0x80000000
   1b46c:	udiv	r1, r1, r0
   1b470:	cmp	r1, r7
   1b474:	bge	1b4c8 <__assert_fail@plt+0x9ee0>
   1b478:	b	1b500 <__assert_fail@plt+0x9f18>
   1b47c:	cmn	r7, #1
   1b480:	ble	1b4b8 <__assert_fail@plt+0x9ed0>
   1b484:	cmn	r0, #1
   1b488:	beq	1b4c8 <__assert_fail@plt+0x9ee0>
   1b48c:	mov	r1, #-2147483648	; 0x80000000
   1b490:	sdiv	r1, r1, r0
   1b494:	cmp	r1, r7
   1b498:	bge	1b4c8 <__assert_fail@plt+0x9ee0>
   1b49c:	b	1b500 <__assert_fail@plt+0x9f18>
   1b4a0:	beq	1b4c8 <__assert_fail@plt+0x9ee0>
   1b4a4:	mov	r1, #-2147483648	; 0x80000000
   1b4a8:	sdiv	r1, r1, r7
   1b4ac:	cmp	r1, r0
   1b4b0:	bge	1b4c8 <__assert_fail@plt+0x9ee0>
   1b4b4:	b	1b500 <__assert_fail@plt+0x9f18>
   1b4b8:	mvn	r1, #-2147483648	; 0x80000000
   1b4bc:	sdiv	r1, r1, r0
   1b4c0:	cmp	r7, r1
   1b4c4:	blt	1b500 <__assert_fail@plt+0x9f18>
   1b4c8:	mul	r6, r7, r0
   1b4cc:	mov	r0, r5
   1b4d0:	mov	r1, r6
   1b4d4:	bl	1c654 <__assert_fail@plt+0xb06c>
   1b4d8:	cmp	r6, #0
   1b4dc:	movwne	r6, #1
   1b4e0:	cmp	r0, #0
   1b4e4:	bne	1b4f8 <__assert_fail@plt+0x9f10>
   1b4e8:	clz	r1, r5
   1b4ec:	lsr	r1, r1, #5
   1b4f0:	orrs	r1, r1, r6
   1b4f4:	bne	1b500 <__assert_fail@plt+0x9f18>
   1b4f8:	str	r7, [r8]
   1b4fc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b500:	bl	1b66c <__assert_fail@plt+0xa084>
   1b504:	push	{fp, lr}
   1b508:	mov	fp, sp
   1b50c:	mov	r1, #1
   1b510:	bl	1c5d0 <__assert_fail@plt+0xafe8>
   1b514:	cmp	r0, #0
   1b518:	popne	{fp, pc}
   1b51c:	bl	1b66c <__assert_fail@plt+0xa084>
   1b520:	push	{fp, lr}
   1b524:	mov	fp, sp
   1b528:	bl	1c5d0 <__assert_fail@plt+0xafe8>
   1b52c:	cmp	r0, #0
   1b530:	popne	{fp, pc}
   1b534:	bl	1b66c <__assert_fail@plt+0xa084>
   1b538:	push	{fp, lr}
   1b53c:	mov	fp, sp
   1b540:	mov	r1, #1
   1b544:	bl	1c5d0 <__assert_fail@plt+0xafe8>
   1b548:	cmp	r0, #0
   1b54c:	popne	{fp, pc}
   1b550:	bl	1b66c <__assert_fail@plt+0xa084>
   1b554:	push	{fp, lr}
   1b558:	mov	fp, sp
   1b55c:	bl	1c5d0 <__assert_fail@plt+0xafe8>
   1b560:	cmp	r0, #0
   1b564:	popne	{fp, pc}
   1b568:	bl	1b66c <__assert_fail@plt+0xa084>
   1b56c:	push	{r4, r5, r6, sl, fp, lr}
   1b570:	add	fp, sp, #16
   1b574:	mov	r5, r0
   1b578:	mov	r0, r1
   1b57c:	mov	r4, r1
   1b580:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b584:	cmp	r0, #0
   1b588:	beq	1b5a4 <__assert_fail@plt+0x9fbc>
   1b58c:	mov	r1, r5
   1b590:	mov	r2, r4
   1b594:	mov	r6, r0
   1b598:	bl	11318 <memcpy@plt>
   1b59c:	mov	r0, r6
   1b5a0:	pop	{r4, r5, r6, sl, fp, pc}
   1b5a4:	bl	1b66c <__assert_fail@plt+0xa084>
   1b5a8:	push	{r4, r5, r6, sl, fp, lr}
   1b5ac:	add	fp, sp, #16
   1b5b0:	mov	r5, r0
   1b5b4:	mov	r0, r1
   1b5b8:	mov	r4, r1
   1b5bc:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b5c0:	cmp	r0, #0
   1b5c4:	beq	1b5e0 <__assert_fail@plt+0x9ff8>
   1b5c8:	mov	r1, r5
   1b5cc:	mov	r2, r4
   1b5d0:	mov	r6, r0
   1b5d4:	bl	11318 <memcpy@plt>
   1b5d8:	mov	r0, r6
   1b5dc:	pop	{r4, r5, r6, sl, fp, pc}
   1b5e0:	bl	1b66c <__assert_fail@plt+0xa084>
   1b5e4:	push	{r4, r5, r6, sl, fp, lr}
   1b5e8:	add	fp, sp, #16
   1b5ec:	mov	r5, r0
   1b5f0:	add	r0, r1, #1
   1b5f4:	mov	r4, r1
   1b5f8:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b5fc:	cmp	r0, #0
   1b600:	beq	1b628 <__assert_fail@plt+0xa040>
   1b604:	mov	r6, r0
   1b608:	mov	r0, #0
   1b60c:	mov	r1, r5
   1b610:	mov	r2, r4
   1b614:	strb	r0, [r6, r4]
   1b618:	mov	r0, r6
   1b61c:	bl	11318 <memcpy@plt>
   1b620:	mov	r0, r6
   1b624:	pop	{r4, r5, r6, sl, fp, pc}
   1b628:	bl	1b66c <__assert_fail@plt+0xa084>
   1b62c:	push	{r4, r5, r6, sl, fp, lr}
   1b630:	add	fp, sp, #16
   1b634:	mov	r4, r0
   1b638:	bl	11474 <strlen@plt>
   1b63c:	add	r5, r0, #1
   1b640:	mov	r0, r5
   1b644:	bl	1c624 <__assert_fail@plt+0xb03c>
   1b648:	cmp	r0, #0
   1b64c:	beq	1b668 <__assert_fail@plt+0xa080>
   1b650:	mov	r1, r4
   1b654:	mov	r2, r5
   1b658:	mov	r6, r0
   1b65c:	bl	11318 <memcpy@plt>
   1b660:	mov	r0, r6
   1b664:	pop	{r4, r5, r6, sl, fp, pc}
   1b668:	bl	1b66c <__assert_fail@plt+0xa084>
   1b66c:	push	{fp, lr}
   1b670:	mov	fp, sp
   1b674:	movw	r0, #61784	; 0xf158
   1b678:	movw	r1, #59448	; 0xe838
   1b67c:	mov	r2, #5
   1b680:	movt	r0, #2
   1b684:	movt	r1, #1
   1b688:	ldr	r4, [r0]
   1b68c:	mov	r0, #0
   1b690:	bl	11354 <dcgettext@plt>
   1b694:	movw	r2, #58266	; 0xe39a
   1b698:	mov	r3, r0
   1b69c:	mov	r0, r4
   1b6a0:	mov	r1, #0
   1b6a4:	movt	r2, #1
   1b6a8:	bl	113f0 <error@plt>
   1b6ac:	bl	115c4 <abort@plt>
   1b6b0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1b6b4:	add	fp, sp, #24
   1b6b8:	sub	sp, sp, #16
   1b6bc:	mov	r8, r0
   1b6c0:	ldr	r0, [fp, #16]
   1b6c4:	mov	r5, r3
   1b6c8:	mov	r6, r2
   1b6cc:	mov	r2, r1
   1b6d0:	add	r3, sp, #8
   1b6d4:	mov	r1, #0
   1b6d8:	str	r0, [sp]
   1b6dc:	mov	r0, r8
   1b6e0:	bl	1b91c <__assert_fail@plt+0xa334>
   1b6e4:	cmp	r0, #0
   1b6e8:	bne	1b774 <__assert_fail@plt+0xa18c>
   1b6ec:	ldr	r4, [sp, #8]
   1b6f0:	ldr	r7, [sp, #12]
   1b6f4:	subs	r0, r4, r6
   1b6f8:	sbcs	r0, r7, r5
   1b6fc:	bcc	1b720 <__assert_fail@plt+0xa138>
   1b700:	ldr	r1, [fp, #8]
   1b704:	ldr	r0, [fp, #12]
   1b708:	subs	r1, r1, r4
   1b70c:	sbcs	r0, r0, r7
   1b710:	movcs	r0, r4
   1b714:	movcs	r1, r7
   1b718:	subcs	sp, fp, #24
   1b71c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   1b720:	bl	114b0 <__errno_location@plt>
   1b724:	subs	r1, r4, #1073741824	; 0x40000000
   1b728:	sbcs	r1, r7, #0
   1b72c:	movcc	r1, #34	; 0x22
   1b730:	movcs	r1, #75	; 0x4b
   1b734:	str	r1, [r0]
   1b738:	ldr	r6, [r0]
   1b73c:	ldr	r4, [fp, #24]
   1b740:	ldr	r5, [fp, #20]
   1b744:	mov	r0, r8
   1b748:	bl	1a98c <__assert_fail@plt+0x93a4>
   1b74c:	subs	r1, r6, #22
   1b750:	movw	r2, #56102	; 0xdb26
   1b754:	str	r0, [sp]
   1b758:	mov	r3, r5
   1b75c:	movne	r1, r6
   1b760:	cmp	r4, #0
   1b764:	movt	r2, #1
   1b768:	movweq	r4, #1
   1b76c:	mov	r0, r4
   1b770:	bl	113f0 <error@plt>
   1b774:	cmp	r0, #1
   1b778:	beq	1b790 <__assert_fail@plt+0xa1a8>
   1b77c:	cmp	r0, #3
   1b780:	bne	1b79c <__assert_fail@plt+0xa1b4>
   1b784:	bl	114b0 <__errno_location@plt>
   1b788:	mov	r1, #0
   1b78c:	b	1b734 <__assert_fail@plt+0xa14c>
   1b790:	bl	114b0 <__errno_location@plt>
   1b794:	mov	r1, #75	; 0x4b
   1b798:	b	1b734 <__assert_fail@plt+0xa14c>
   1b79c:	bl	114b0 <__errno_location@plt>
   1b7a0:	b	1b738 <__assert_fail@plt+0xa150>
   1b7a4:	mov	r1, #10
   1b7a8:	b	1b6b0 <__assert_fail@plt+0xa0c8>
   1b7ac:	andeq	r0, r0, r0
   1b7b0:	push	{r4, r5, r6, sl, fp, lr}
   1b7b4:	add	fp, sp, #16
   1b7b8:	vpush	{d8}
   1b7bc:	sub	sp, sp, #8
   1b7c0:	vldr	d16, [pc, #168]	; 1b870 <__assert_fail@plt+0xa288>
   1b7c4:	vmov.f64	d8, d0
   1b7c8:	vcmpe.f64	d0, d16
   1b7cc:	vmrs	APSR_nzcv, fpscr
   1b7d0:	blt	1b7e8 <__assert_fail@plt+0xa200>
   1b7d4:	bl	112d0 <pause@plt>
   1b7d8:	bl	114b0 <__errno_location@plt>
   1b7dc:	ldr	r0, [r0]
   1b7e0:	cmp	r0, #4
   1b7e4:	beq	1b7d4 <__assert_fail@plt+0xa1ec>
   1b7e8:	mov	r6, sp
   1b7ec:	vmov.f64	d0, d8
   1b7f0:	mov	r0, r6
   1b7f4:	bl	1c7a0 <__assert_fail@plt+0xb1b8>
   1b7f8:	bl	114b0 <__errno_location@plt>
   1b7fc:	mov	r5, #0
   1b800:	mov	r4, r0
   1b804:	mov	r1, r6
   1b808:	str	r5, [r0]
   1b80c:	mov	r0, r6
   1b810:	bl	11300 <nanosleep@plt>
   1b814:	cmp	r0, #0
   1b818:	beq	1b84c <__assert_fail@plt+0xa264>
   1b81c:	mov	r6, sp
   1b820:	mov	r5, #0
   1b824:	ldr	r0, [r4]
   1b828:	orr	r0, r0, #4
   1b82c:	cmp	r0, #4
   1b830:	bne	1b85c <__assert_fail@plt+0xa274>
   1b834:	mov	r0, r6
   1b838:	mov	r1, r6
   1b83c:	str	r5, [r4]
   1b840:	bl	11300 <nanosleep@plt>
   1b844:	cmp	r0, #0
   1b848:	bne	1b824 <__assert_fail@plt+0xa23c>
   1b84c:	mov	r0, r5
   1b850:	sub	sp, fp, #24
   1b854:	vpop	{d8}
   1b858:	pop	{r4, r5, r6, sl, fp, pc}
   1b85c:	mvn	r5, #0
   1b860:	mov	r0, r5
   1b864:	sub	sp, fp, #24
   1b868:	vpop	{d8}
   1b86c:	pop	{r4, r5, r6, sl, fp, pc}
   1b870:	andeq	r0, r0, r0
   1b874:	mvnmi	r0, r0
   1b878:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   1b87c:	add	fp, sp, #24
   1b880:	sub	sp, sp, #8
   1b884:	mov	r4, r3
   1b888:	mov	r8, r2
   1b88c:	mov	r9, r1
   1b890:	mov	r5, r0
   1b894:	bl	114b0 <__errno_location@plt>
   1b898:	mov	r6, #0
   1b89c:	mov	r7, r0
   1b8a0:	add	r1, sp, #4
   1b8a4:	str	r6, [r0]
   1b8a8:	mov	r0, r5
   1b8ac:	blx	r4
   1b8b0:	ldr	r0, [sp, #4]
   1b8b4:	cmp	r0, r5
   1b8b8:	beq	1b904 <__assert_fail@plt+0xa31c>
   1b8bc:	cmp	r9, #0
   1b8c0:	beq	1b8e0 <__assert_fail@plt+0xa2f8>
   1b8c4:	vcmp.f64	d0, #0.0
   1b8c8:	vmrs	APSR_nzcv, fpscr
   1b8cc:	beq	1b900 <__assert_fail@plt+0xa318>
   1b8d0:	ldr	r1, [r7]
   1b8d4:	subs	r6, r1, #34	; 0x22
   1b8d8:	movwne	r6, #1
   1b8dc:	b	1b904 <__assert_fail@plt+0xa31c>
   1b8e0:	ldrb	r1, [r0]
   1b8e4:	mov	r6, #0
   1b8e8:	cmp	r1, #0
   1b8ec:	beq	1b8c4 <__assert_fail@plt+0xa2dc>
   1b8f0:	vstr	d0, [r8]
   1b8f4:	mov	r0, r6
   1b8f8:	sub	sp, fp, #24
   1b8fc:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b900:	mov	r6, #1
   1b904:	cmp	r9, #0
   1b908:	strne	r0, [r9]
   1b90c:	vstr	d0, [r8]
   1b910:	mov	r0, r6
   1b914:	sub	sp, fp, #24
   1b918:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1b91c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b920:	add	fp, sp, #28
   1b924:	sub	sp, sp, #44	; 0x2c
   1b928:	cmp	r2, #37	; 0x25
   1b92c:	bcs	1c5b0 <__assert_fail@plt+0xafc8>
   1b930:	ldr	sl, [fp, #8]
   1b934:	mov	r6, r2
   1b938:	mov	r7, r1
   1b93c:	mov	r4, r0
   1b940:	str	r3, [sp, #36]	; 0x24
   1b944:	bl	114b0 <__errno_location@plt>
   1b948:	mov	r5, r0
   1b94c:	mov	r0, #0
   1b950:	str	r0, [r5]
   1b954:	bl	1145c <__ctype_b_loc@plt>
   1b958:	ldr	r1, [r0]
   1b95c:	mov	r2, r4
   1b960:	ldrb	r0, [r2], #1
   1b964:	add	r3, r1, r0, lsl #1
   1b968:	ldrb	r3, [r3, #1]
   1b96c:	tst	r3, #32
   1b970:	bne	1b960 <__assert_fail@plt+0xa378>
   1b974:	sub	r9, fp, #32
   1b978:	cmp	r7, #0
   1b97c:	mov	r8, #4
   1b980:	movne	r9, r7
   1b984:	cmp	r0, #45	; 0x2d
   1b988:	beq	1bd48 <__assert_fail@plt+0xa760>
   1b98c:	mov	r0, r4
   1b990:	mov	r1, r9
   1b994:	mov	r2, r6
   1b998:	mov	r3, #0
   1b99c:	bl	11324 <__strtoull_internal@plt>
   1b9a0:	mov	r7, r1
   1b9a4:	ldr	r1, [r9]
   1b9a8:	cmp	r1, r4
   1b9ac:	beq	1b9e4 <__assert_fail@plt+0xa3fc>
   1b9b0:	mov	r6, r0
   1b9b4:	ldr	r0, [r5]
   1b9b8:	cmp	r0, #0
   1b9bc:	beq	1bd00 <__assert_fail@plt+0xa718>
   1b9c0:	cmp	r0, #34	; 0x22
   1b9c4:	bne	1bd48 <__assert_fail@plt+0xa760>
   1b9c8:	mov	r8, #1
   1b9cc:	cmp	sl, #0
   1b9d0:	beq	1c59c <__assert_fail@plt+0xafb4>
   1b9d4:	ldrb	r4, [r1]
   1b9d8:	cmp	r4, #0
   1b9dc:	bne	1ba28 <__assert_fail@plt+0xa440>
   1b9e0:	b	1c59c <__assert_fail@plt+0xafb4>
   1b9e4:	cmp	sl, #0
   1b9e8:	beq	1bd48 <__assert_fail@plt+0xa760>
   1b9ec:	mov	r5, r1
   1b9f0:	ldrb	r1, [r4]
   1b9f4:	cmp	r1, #0
   1b9f8:	beq	1bd48 <__assert_fail@plt+0xa760>
   1b9fc:	mov	r0, sl
   1ba00:	bl	1148c <strchr@plt>
   1ba04:	cmp	r0, #0
   1ba08:	beq	1bd48 <__assert_fail@plt+0xa760>
   1ba0c:	mov	r1, r5
   1ba10:	mov	r8, #0
   1ba14:	mov	r6, #1
   1ba18:	mov	r7, #0
   1ba1c:	ldrb	r4, [r1]
   1ba20:	cmp	r4, #0
   1ba24:	beq	1c59c <__assert_fail@plt+0xafb4>
   1ba28:	str	r1, [sp, #32]
   1ba2c:	mov	r0, sl
   1ba30:	mov	r1, r4
   1ba34:	bl	1148c <strchr@plt>
   1ba38:	cmp	r0, #0
   1ba3c:	beq	1bd3c <__assert_fail@plt+0xa754>
   1ba40:	sub	r0, r4, #69	; 0x45
   1ba44:	mov	r1, #1
   1ba48:	mov	r3, #0
   1ba4c:	mov	r5, #1024	; 0x400
   1ba50:	cmp	r0, #47	; 0x2f
   1ba54:	str	r1, [sp, #28]
   1ba58:	bhi	1bb5c <__assert_fail@plt+0xa574>
   1ba5c:	add	r1, pc, #0
   1ba60:	ldr	pc, [r1, r0, lsl #2]
   1ba64:	andeq	fp, r1, r4, lsr #22
   1ba68:	andeq	fp, r1, ip, asr fp
   1ba6c:	andeq	fp, r1, r4, lsr #22
   1ba70:	andeq	fp, r1, ip, asr fp
   1ba74:	andeq	fp, r1, ip, asr fp
   1ba78:	andeq	fp, r1, ip, asr fp
   1ba7c:	andeq	fp, r1, r4, lsr #22
   1ba80:	andeq	fp, r1, ip, asr fp
   1ba84:	andeq	fp, r1, r4, lsr #22
   1ba88:	andeq	fp, r1, ip, asr fp
   1ba8c:	andeq	fp, r1, ip, asr fp
   1ba90:	andeq	fp, r1, r4, lsr #22
   1ba94:	andeq	fp, r1, ip, asr fp
   1ba98:	andeq	fp, r1, ip, asr fp
   1ba9c:	andeq	fp, r1, ip, asr fp
   1baa0:	andeq	fp, r1, r4, lsr #22
   1baa4:	andeq	fp, r1, ip, asr fp
   1baa8:	andeq	fp, r1, ip, asr fp
   1baac:	andeq	fp, r1, ip, asr fp
   1bab0:	andeq	fp, r1, ip, asr fp
   1bab4:	andeq	fp, r1, r4, lsr #22
   1bab8:	andeq	fp, r1, r4, lsr #22
   1babc:	andeq	fp, r1, ip, asr fp
   1bac0:	andeq	fp, r1, ip, asr fp
   1bac4:	andeq	fp, r1, ip, asr fp
   1bac8:	andeq	fp, r1, ip, asr fp
   1bacc:	andeq	fp, r1, ip, asr fp
   1bad0:	andeq	fp, r1, ip, asr fp
   1bad4:	andeq	fp, r1, ip, asr fp
   1bad8:	andeq	fp, r1, ip, asr fp
   1badc:	andeq	fp, r1, ip, asr fp
   1bae0:	andeq	fp, r1, ip, asr fp
   1bae4:	andeq	fp, r1, ip, asr fp
   1bae8:	andeq	fp, r1, ip, asr fp
   1baec:	andeq	fp, r1, r4, lsr #22
   1baf0:	andeq	fp, r1, ip, asr fp
   1baf4:	andeq	fp, r1, ip, asr fp
   1baf8:	andeq	fp, r1, ip, asr fp
   1bafc:	andeq	fp, r1, r4, lsr #22
   1bb00:	andeq	fp, r1, ip, asr fp
   1bb04:	andeq	fp, r1, r4, lsr #22
   1bb08:	andeq	fp, r1, ip, asr fp
   1bb0c:	andeq	fp, r1, ip, asr fp
   1bb10:	andeq	fp, r1, ip, asr fp
   1bb14:	andeq	fp, r1, ip, asr fp
   1bb18:	andeq	fp, r1, ip, asr fp
   1bb1c:	andeq	fp, r1, ip, asr fp
   1bb20:	andeq	fp, r1, r4, lsr #22
   1bb24:	mov	r0, sl
   1bb28:	mov	r1, #48	; 0x30
   1bb2c:	bl	1148c <strchr@plt>
   1bb30:	cmp	r0, #0
   1bb34:	beq	1bb58 <__assert_fail@plt+0xa570>
   1bb38:	ldr	r1, [sp, #32]
   1bb3c:	ldrb	r0, [r1, #1]
   1bb40:	cmp	r0, #66	; 0x42
   1bb44:	cmpne	r0, #68	; 0x44
   1bb48:	bne	1bd10 <__assert_fail@plt+0xa728>
   1bb4c:	mov	r5, #1000	; 0x3e8
   1bb50:	mov	r0, #2
   1bb54:	str	r0, [sp, #28]
   1bb58:	mov	r3, #0
   1bb5c:	sub	r0, r4, #66	; 0x42
   1bb60:	cmp	r0, #53	; 0x35
   1bb64:	bhi	1bd3c <__assert_fail@plt+0xa754>
   1bb68:	add	r1, pc, #0
   1bb6c:	ldr	pc, [r1, r0, lsl #2]
   1bb70:	andeq	ip, r1, ip, lsr #1
   1bb74:	andeq	fp, r1, ip, lsr sp
   1bb78:	andeq	fp, r1, ip, lsr sp
   1bb7c:	ldrdeq	ip, [r1], -r4
   1bb80:	andeq	fp, r1, ip, lsr sp
   1bb84:	andeq	fp, r1, r8, asr #24
   1bb88:	andeq	fp, r1, ip, lsr sp
   1bb8c:	andeq	fp, r1, ip, lsr sp
   1bb90:	andeq	fp, r1, ip, lsr sp
   1bb94:	andeq	fp, r1, r4, asr sp
   1bb98:	andeq	fp, r1, ip, lsr sp
   1bb9c:	muleq	r1, ip, sp
   1bba0:	andeq	fp, r1, ip, lsr sp
   1bba4:	andeq	fp, r1, ip, lsr sp
   1bba8:	andeq	ip, r1, r8, lsr #4
   1bbac:	andeq	fp, r1, ip, lsr sp
   1bbb0:	andeq	fp, r1, ip, lsr sp
   1bbb4:	andeq	fp, r1, ip, lsr sp
   1bbb8:	andeq	fp, r1, r8, lsr #28
   1bbbc:	andeq	fp, r1, ip, lsr sp
   1bbc0:	andeq	fp, r1, ip, lsr sp
   1bbc4:	andeq	fp, r1, ip, lsr sp
   1bbc8:	andeq	fp, r1, ip, lsr sp
   1bbcc:	andeq	ip, r1, r0, asr r3
   1bbd0:	andeq	fp, r1, r0, lsl pc
   1bbd4:	andeq	fp, r1, ip, lsr sp
   1bbd8:	andeq	fp, r1, ip, lsr sp
   1bbdc:	andeq	fp, r1, ip, lsr sp
   1bbe0:	andeq	fp, r1, ip, lsr sp
   1bbe4:	andeq	fp, r1, ip, lsr sp
   1bbe8:	andeq	fp, r1, ip, lsr sp
   1bbec:	andeq	fp, r1, ip, lsr sp
   1bbf0:	andeq	ip, r1, r4, lsr #10
   1bbf4:	andeq	ip, r1, ip, ror r5
   1bbf8:	andeq	fp, r1, ip, lsr sp
   1bbfc:	andeq	fp, r1, ip, lsr sp
   1bc00:	andeq	fp, r1, ip, lsr sp
   1bc04:	andeq	fp, r1, r8, asr #24
   1bc08:	andeq	fp, r1, ip, lsr sp
   1bc0c:	andeq	fp, r1, ip, lsr sp
   1bc10:	andeq	fp, r1, ip, lsr sp
   1bc14:	andeq	fp, r1, r4, asr sp
   1bc18:	andeq	fp, r1, ip, lsr sp
   1bc1c:	muleq	r1, ip, sp
   1bc20:	andeq	fp, r1, ip, lsr sp
   1bc24:	andeq	fp, r1, ip, lsr sp
   1bc28:	andeq	fp, r1, ip, lsr sp
   1bc2c:	andeq	fp, r1, ip, lsr sp
   1bc30:	andeq	fp, r1, ip, lsr sp
   1bc34:	andeq	fp, r1, ip, lsr sp
   1bc38:	andeq	fp, r1, r8, lsr #28
   1bc3c:	andeq	fp, r1, ip, lsr sp
   1bc40:	andeq	fp, r1, ip, lsr sp
   1bc44:	andeq	ip, r1, r8, asr r5
   1bc48:	mvn	r0, #0
   1bc4c:	mvn	r1, #0
   1bc50:	mov	r2, r5
   1bc54:	mov	sl, r3
   1bc58:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1bc5c:	subs	r3, r0, r6
   1bc60:	mov	lr, #0
   1bc64:	umull	r4, r2, r6, r5
   1bc68:	str	r1, [sp, #20]
   1bc6c:	sbcs	r3, r1, r7
   1bc70:	mla	ip, r6, sl, r2
   1bc74:	mov	r2, r1
   1bc78:	movwcc	lr, #1
   1bc7c:	mla	r7, r7, r5, ip
   1bc80:	mov	r2, #0
   1bc84:	cmp	lr, #0
   1bc88:	mvnne	r4, #0
   1bc8c:	mvnne	r7, #0
   1bc90:	subs	r6, r0, r4
   1bc94:	sbcs	r6, r1, r7
   1bc98:	movwcc	r2, #1
   1bc9c:	umull	r3, r6, r4, r5
   1bca0:	cmp	r2, #0
   1bca4:	str	r6, [sp, #16]
   1bca8:	mvnne	r3, #0
   1bcac:	cmp	r2, #0
   1bcb0:	umull	r6, ip, r3, r5
   1bcb4:	mla	r1, r3, sl, ip
   1bcb8:	ldr	ip, [sp, #16]
   1bcbc:	str	r1, [sp, #12]
   1bcc0:	mla	r4, r4, sl, ip
   1bcc4:	mla	r4, r7, r5, r4
   1bcc8:	ldr	r7, [sp, #12]
   1bccc:	mvnne	r4, #0
   1bcd0:	subs	r0, r0, r3
   1bcd4:	ldr	r0, [sp, #20]
   1bcd8:	mla	r7, r4, r5, r7
   1bcdc:	sbcs	r0, r0, r4
   1bce0:	mov	r0, #0
   1bce4:	movwcc	r0, #1
   1bce8:	cmp	r0, #0
   1bcec:	mov	r1, r0
   1bcf0:	orr	r0, lr, r2
   1bcf4:	mvnne	r7, #0
   1bcf8:	mvnne	r6, #0
   1bcfc:	b	1c348 <__assert_fail@plt+0xad60>
   1bd00:	mov	r8, r0
   1bd04:	cmp	sl, #0
   1bd08:	bne	1b9d4 <__assert_fail@plt+0xa3ec>
   1bd0c:	b	1c59c <__assert_fail@plt+0xafb4>
   1bd10:	cmp	r0, #105	; 0x69
   1bd14:	mov	r3, #0
   1bd18:	bne	1bb5c <__assert_fail@plt+0xa574>
   1bd1c:	ldrb	r0, [r1, #2]
   1bd20:	mov	r1, #1
   1bd24:	cmp	r0, #66	; 0x42
   1bd28:	movweq	r1, #3
   1bd2c:	str	r1, [sp, #28]
   1bd30:	sub	r0, r4, #66	; 0x42
   1bd34:	cmp	r0, #53	; 0x35
   1bd38:	bls	1bb68 <__assert_fail@plt+0xa580>
   1bd3c:	ldr	r0, [sp, #36]	; 0x24
   1bd40:	orr	r8, r8, #2
   1bd44:	strd	r6, [r0]
   1bd48:	mov	r0, r8
   1bd4c:	sub	sp, fp, #28
   1bd50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bd54:	mvn	r0, #0
   1bd58:	mvn	r1, #0
   1bd5c:	mov	r2, r5
   1bd60:	mov	r4, r3
   1bd64:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1bd68:	subs	r0, r0, r6
   1bd6c:	mov	r2, #0
   1bd70:	sbcs	r0, r1, r7
   1bd74:	movwcc	r2, #1
   1bd78:	umull	r0, r1, r6, r5
   1bd7c:	mla	r1, r6, r4, r1
   1bd80:	cmp	r2, #0
   1bd84:	mov	r3, r2
   1bd88:	mla	r7, r7, r5, r1
   1bd8c:	mvnne	r0, #0
   1bd90:	mvnne	r7, #0
   1bd94:	mov	r6, r0
   1bd98:	b	1c57c <__assert_fail@plt+0xaf94>
   1bd9c:	mvn	r0, #0
   1bda0:	mvn	r1, #0
   1bda4:	mov	r2, r5
   1bda8:	str	r3, [sp, #24]
   1bdac:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1bdb0:	subs	r3, r0, r6
   1bdb4:	mov	ip, r0
   1bdb8:	umull	r4, r0, r6, r5
   1bdbc:	mov	sl, #0
   1bdc0:	sbcs	r3, r1, r7
   1bdc4:	str	r0, [sp, #20]
   1bdc8:	ldr	r0, [sp, #24]
   1bdcc:	mov	r3, #0
   1bdd0:	movwcc	r3, #1
   1bdd4:	cmp	r3, #0
   1bdd8:	mvnne	r4, #0
   1bddc:	cmp	r3, #0
   1bde0:	umull	lr, r2, r4, r5
   1bde4:	mla	r2, r4, r0, r2
   1bde8:	str	r2, [sp, #16]
   1bdec:	ldr	r2, [sp, #20]
   1bdf0:	mla	r6, r6, r0, r2
   1bdf4:	ldr	r0, [sp, #16]
   1bdf8:	mla	r6, r7, r5, r6
   1bdfc:	mvnne	r6, #0
   1be00:	mla	r7, r6, r5, r0
   1be04:	subs	r0, ip, r4
   1be08:	sbcs	r0, r1, r6
   1be0c:	movwcc	sl, #1
   1be10:	cmp	sl, #0
   1be14:	orr	r3, r3, sl
   1be18:	mvnne	lr, #0
   1be1c:	mvnne	r7, #0
   1be20:	mov	r6, lr
   1be24:	b	1c57c <__assert_fail@plt+0xaf94>
   1be28:	mvn	r0, #0
   1be2c:	mvn	r1, #0
   1be30:	mov	r2, r5
   1be34:	mov	sl, r3
   1be38:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1be3c:	subs	r3, r0, r6
   1be40:	mov	ip, r1
   1be44:	umull	r2, lr, r6, r5
   1be48:	str	r0, [sp, #20]
   1be4c:	sbcs	r3, r1, r7
   1be50:	mov	r1, #0
   1be54:	mla	r6, r6, sl, lr
   1be58:	mov	lr, #0
   1be5c:	str	ip, [sp, #16]
   1be60:	movwcc	r1, #1
   1be64:	mla	r7, r7, r5, r6
   1be68:	cmp	r1, #0
   1be6c:	mvnne	r2, #0
   1be70:	cmp	r1, #0
   1be74:	umull	r3, r4, r2, r5
   1be78:	mvnne	r7, #0
   1be7c:	mla	r4, r2, sl, r4
   1be80:	subs	r2, r0, r2
   1be84:	sbcs	r2, ip, r7
   1be88:	mla	r4, r7, r5, r4
   1be8c:	movwcc	lr, #1
   1be90:	mov	r2, #0
   1be94:	cmp	lr, #0
   1be98:	mvnne	r3, #0
   1be9c:	mvnne	r4, #0
   1bea0:	subs	r7, r0, r3
   1bea4:	mov	r0, r5
   1bea8:	sbcs	r7, ip, r4
   1beac:	movwcc	r2, #1
   1beb0:	umull	r5, r7, r3, r5
   1beb4:	cmp	r2, #0
   1beb8:	mla	r3, r3, sl, r7
   1bebc:	mvnne	r5, #0
   1bec0:	mla	r3, r4, r0, r3
   1bec4:	cmp	r2, #0
   1bec8:	umull	r6, ip, r5, r0
   1becc:	mvnne	r3, #0
   1bed0:	mla	ip, r5, sl, ip
   1bed4:	mla	r7, r3, r0, ip
   1bed8:	ldr	r0, [sp, #20]
   1bedc:	subs	r0, r0, r5
   1bee0:	ldr	r0, [sp, #16]
   1bee4:	sbcs	r0, r0, r3
   1bee8:	mov	r0, #0
   1beec:	movwcc	r0, #1
   1bef0:	cmp	r0, #0
   1bef4:	mov	r3, r0
   1bef8:	orr	r0, r1, lr
   1befc:	orr	r0, r0, r2
   1bf00:	mvnne	r7, #0
   1bf04:	mvnne	r6, #0
   1bf08:	orr	r3, r0, r3
   1bf0c:	b	1c57c <__assert_fail@plt+0xaf94>
   1bf10:	mvn	r0, #0
   1bf14:	mvn	r1, #0
   1bf18:	mov	r2, r5
   1bf1c:	mov	r4, r3
   1bf20:	str	r3, [sp, #24]
   1bf24:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1bf28:	umull	r3, r2, r6, r5
   1bf2c:	mla	r2, r6, r4, r2
   1bf30:	subs	r6, r0, r6
   1bf34:	sbcs	r6, r1, r7
   1bf38:	mla	r2, r7, r5, r2
   1bf3c:	mov	r7, #0
   1bf40:	mov	r6, #0
   1bf44:	movwcc	r6, #1
   1bf48:	cmp	r6, #0
   1bf4c:	str	r6, [sp, #20]
   1bf50:	mvnne	r3, #0
   1bf54:	mvnne	r2, #0
   1bf58:	subs	r4, r0, r3
   1bf5c:	umull	r6, ip, r3, r5
   1bf60:	sbcs	r4, r1, r2
   1bf64:	ldr	r4, [sp, #24]
   1bf68:	movwcc	r7, #1
   1bf6c:	cmp	r7, #0
   1bf70:	mov	lr, r7
   1bf74:	str	r7, [sp, #16]
   1bf78:	mvnne	r6, #0
   1bf7c:	cmp	lr, #0
   1bf80:	mov	lr, #0
   1bf84:	umull	sl, r7, r6, r5
   1bf88:	mla	r3, r3, r4, ip
   1bf8c:	mla	r7, r6, r4, r7
   1bf90:	mov	r4, r0
   1bf94:	mla	r2, r2, r5, r3
   1bf98:	mvnne	r2, #0
   1bf9c:	subs	r3, r0, r6
   1bfa0:	mov	r0, #0
   1bfa4:	mla	r7, r2, r5, r7
   1bfa8:	sbcs	r2, r1, r2
   1bfac:	mov	r3, r4
   1bfb0:	movwcc	r0, #1
   1bfb4:	str	r3, [sp, #4]
   1bfb8:	cmp	r0, #0
   1bfbc:	str	r0, [sp, #12]
   1bfc0:	mov	r0, r1
   1bfc4:	mvnne	sl, #0
   1bfc8:	mvnne	r7, #0
   1bfcc:	str	r0, [sp, #8]
   1bfd0:	subs	r2, r4, sl
   1bfd4:	ldr	r4, [sp, #24]
   1bfd8:	sbcs	r2, r1, r7
   1bfdc:	movwcc	lr, #1
   1bfe0:	umull	r6, r2, sl, r5
   1bfe4:	cmp	lr, #0
   1bfe8:	mvnne	r6, #0
   1bfec:	mla	r2, sl, r4, r2
   1bff0:	cmp	lr, #0
   1bff4:	umull	r1, ip, r6, r5
   1bff8:	mla	r2, r7, r5, r2
   1bffc:	mla	ip, r6, r4, ip
   1c000:	mvnne	r2, #0
   1c004:	subs	r6, r3, r6
   1c008:	mla	r7, r2, r5, ip
   1c00c:	sbcs	r2, r0, r2
   1c010:	mov	ip, #0
   1c014:	movwcc	ip, #1
   1c018:	mov	r2, #0
   1c01c:	cmp	ip, #0
   1c020:	mvnne	r1, #0
   1c024:	mvnne	r7, #0
   1c028:	subs	r6, r3, r1
   1c02c:	ldr	r3, [sp, #24]
   1c030:	sbcs	r6, r0, r7
   1c034:	umull	r0, sl, r1, r5
   1c038:	movwcc	r2, #1
   1c03c:	cmp	r2, #0
   1c040:	mvnne	r0, #0
   1c044:	mla	r1, r1, r3, sl
   1c048:	cmp	r2, #0
   1c04c:	umull	r6, r4, r0, r5
   1c050:	mla	r1, r7, r5, r1
   1c054:	mla	r4, r0, r3, r4
   1c058:	ldr	r3, [sp, #4]
   1c05c:	mvnne	r1, #0
   1c060:	mla	r7, r1, r5, r4
   1c064:	ldr	r5, [sp, #16]
   1c068:	subs	r0, r3, r0
   1c06c:	ldr	r0, [sp, #8]
   1c070:	sbcs	r0, r0, r1
   1c074:	mov	r0, #0
   1c078:	movwcc	r0, #1
   1c07c:	cmp	r0, #0
   1c080:	mov	r1, r0
   1c084:	ldr	r0, [sp, #20]
   1c088:	mvnne	r7, #0
   1c08c:	mvnne	r6, #0
   1c090:	orr	r0, r0, r5
   1c094:	ldr	r5, [sp, #12]
   1c098:	orr	r0, r0, r5
   1c09c:	orr	r0, r0, lr
   1c0a0:	orr	r0, r0, ip
   1c0a4:	orr	r0, r0, r2
   1c0a8:	b	1c518 <__assert_fail@plt+0xaf30>
   1c0ac:	mov	r1, #0
   1c0b0:	lsl	r2, r7, #10
   1c0b4:	lsl	r0, r6, #10
   1c0b8:	lsr	r3, r7, #22
   1c0bc:	cmp	r1, r7, lsr #22
   1c0c0:	orr	r2, r2, r6, lsr #22
   1c0c4:	mvnne	r0, #0
   1c0c8:	movwne	r3, #1
   1c0cc:	cmp	r1, r7, lsr #22
   1c0d0:	b	1c548 <__assert_fail@plt+0xaf60>
   1c0d4:	mvn	r0, #0
   1c0d8:	mvn	r1, #0
   1c0dc:	mov	r2, r5
   1c0e0:	mov	sl, r3
   1c0e4:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1c0e8:	subs	r2, r0, r6
   1c0ec:	mov	ip, r0
   1c0f0:	mov	r0, #0
   1c0f4:	sbcs	r2, r1, r7
   1c0f8:	movwcc	r0, #1
   1c0fc:	umull	r4, r2, r6, r5
   1c100:	cmp	r0, #0
   1c104:	mla	r2, r6, sl, r2
   1c108:	str	r0, [sp, #20]
   1c10c:	mvnne	r4, #0
   1c110:	cmp	r0, #0
   1c114:	mla	r2, r7, r5, r2
   1c118:	mov	r0, #0
   1c11c:	umull	lr, r3, r4, r5
   1c120:	mvnne	r2, #0
   1c124:	mla	r3, r4, sl, r3
   1c128:	mla	r6, r2, r5, r3
   1c12c:	subs	r3, ip, r4
   1c130:	sbcs	r2, r1, r2
   1c134:	mov	r3, r1
   1c138:	movwcc	r0, #1
   1c13c:	str	r3, [sp, #8]
   1c140:	cmp	r0, #0
   1c144:	str	r0, [sp, #16]
   1c148:	mov	r0, ip
   1c14c:	mvnne	lr, #0
   1c150:	mvnne	r6, #0
   1c154:	str	r0, [sp, #12]
   1c158:	subs	r2, ip, lr
   1c15c:	umull	r7, r4, lr, r5
   1c160:	sbcs	r2, r1, r6
   1c164:	mla	r4, lr, sl, r4
   1c168:	mov	r2, #0
   1c16c:	mla	r6, r6, r5, r4
   1c170:	mov	r4, #0
   1c174:	movwcc	r2, #1
   1c178:	cmp	r2, #0
   1c17c:	mvnne	r7, #0
   1c180:	cmp	r2, #0
   1c184:	umull	r1, ip, r7, r5
   1c188:	mvnne	r6, #0
   1c18c:	mla	ip, r7, sl, ip
   1c190:	subs	r7, r0, r7
   1c194:	mla	lr, r6, r5, ip
   1c198:	sbcs	r7, r3, r6
   1c19c:	mov	ip, #0
   1c1a0:	movwcc	ip, #1
   1c1a4:	cmp	ip, #0
   1c1a8:	mvnne	r1, #0
   1c1ac:	mvnne	lr, #0
   1c1b0:	subs	r7, r0, r1
   1c1b4:	sbcs	r7, r3, lr
   1c1b8:	movwcc	r4, #1
   1c1bc:	umull	r0, r7, r1, r5
   1c1c0:	cmp	r4, #0
   1c1c4:	mla	r1, r1, sl, r7
   1c1c8:	mvnne	r0, #0
   1c1cc:	mla	r1, lr, r5, r1
   1c1d0:	cmp	r4, #0
   1c1d4:	umull	r6, r3, r0, r5
   1c1d8:	mvnne	r1, #0
   1c1dc:	mla	r3, r0, sl, r3
   1c1e0:	mla	r7, r1, r5, r3
   1c1e4:	ldr	r3, [sp, #12]
   1c1e8:	subs	r0, r3, r0
   1c1ec:	ldr	r3, [sp, #16]
   1c1f0:	ldr	r0, [sp, #8]
   1c1f4:	sbcs	r0, r0, r1
   1c1f8:	mov	r0, #0
   1c1fc:	movwcc	r0, #1
   1c200:	cmp	r0, #0
   1c204:	mov	r1, r0
   1c208:	ldr	r0, [sp, #20]
   1c20c:	mvnne	r7, #0
   1c210:	mvnne	r6, #0
   1c214:	orr	r0, r0, r3
   1c218:	orr	r0, r0, r2
   1c21c:	orr	r0, r0, ip
   1c220:	orr	r0, r0, r4
   1c224:	b	1c348 <__assert_fail@plt+0xad60>
   1c228:	mvn	r0, #0
   1c22c:	mvn	r1, #0
   1c230:	mov	r2, r5
   1c234:	mov	sl, r3
   1c238:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1c23c:	umull	r3, r2, r6, r5
   1c240:	mov	lr, r1
   1c244:	mov	r1, r0
   1c248:	mla	r2, r6, sl, r2
   1c24c:	subs	r6, r0, r6
   1c250:	mov	r0, #0
   1c254:	sbcs	r6, lr, r7
   1c258:	mla	r2, r7, r5, r2
   1c25c:	movwcc	r0, #1
   1c260:	cmp	r0, #0
   1c264:	str	r0, [sp, #20]
   1c268:	mov	r0, r1
   1c26c:	mvnne	r3, #0
   1c270:	mvnne	r2, #0
   1c274:	str	r0, [sp, #16]
   1c278:	subs	r4, r1, r3
   1c27c:	umull	r7, ip, r3, r5
   1c280:	sbcs	r4, lr, r2
   1c284:	mla	r3, r3, sl, ip
   1c288:	mov	ip, #0
   1c28c:	mov	r4, #0
   1c290:	mla	r2, r2, r5, r3
   1c294:	movwcc	r4, #1
   1c298:	cmp	r4, #0
   1c29c:	mvnne	r7, #0
   1c2a0:	cmp	r4, #0
   1c2a4:	umull	r1, r6, r7, r5
   1c2a8:	mvnne	r2, #0
   1c2ac:	mla	r6, r7, sl, r6
   1c2b0:	mla	r3, r2, r5, r6
   1c2b4:	subs	r6, r0, r7
   1c2b8:	sbcs	r2, lr, r2
   1c2bc:	movwcc	ip, #1
   1c2c0:	mov	r2, #0
   1c2c4:	cmp	ip, #0
   1c2c8:	mvnne	r1, #0
   1c2cc:	mvnne	r3, #0
   1c2d0:	subs	r6, r0, r1
   1c2d4:	sbcs	r6, lr, r3
   1c2d8:	movwcc	r2, #1
   1c2dc:	umull	r0, r6, r1, r5
   1c2e0:	cmp	r2, #0
   1c2e4:	str	r6, [sp, #12]
   1c2e8:	mvnne	r0, #0
   1c2ec:	cmp	r2, #0
   1c2f0:	umull	r6, r7, r0, r5
   1c2f4:	mla	r7, r0, sl, r7
   1c2f8:	str	r7, [sp, #8]
   1c2fc:	ldr	r7, [sp, #12]
   1c300:	mla	r1, r1, sl, r7
   1c304:	mla	r1, r3, r5, r1
   1c308:	ldr	r3, [sp, #8]
   1c30c:	mvnne	r1, #0
   1c310:	mla	r7, r1, r5, r3
   1c314:	ldr	r3, [sp, #16]
   1c318:	subs	r0, r3, r0
   1c31c:	sbcs	r0, lr, r1
   1c320:	mov	r0, #0
   1c324:	movwcc	r0, #1
   1c328:	cmp	r0, #0
   1c32c:	mov	r1, r0
   1c330:	ldr	r0, [sp, #20]
   1c334:	mvnne	r7, #0
   1c338:	mvnne	r6, #0
   1c33c:	orr	r0, r0, r4
   1c340:	orr	r0, r0, ip
   1c344:	orr	r0, r0, r2
   1c348:	orr	r3, r0, r1
   1c34c:	b	1c57c <__assert_fail@plt+0xaf94>
   1c350:	mvn	r0, #0
   1c354:	mvn	r1, #0
   1c358:	mov	r2, r5
   1c35c:	mov	sl, r3
   1c360:	bl	1ccdc <__assert_fail@plt+0xb6f4>
   1c364:	mov	ip, r1
   1c368:	subs	r1, r0, r6
   1c36c:	umull	r3, lr, r6, r5
   1c370:	mov	r2, r5
   1c374:	sbcs	r1, ip, r7
   1c378:	mla	r6, r6, sl, lr
   1c37c:	str	ip, [sp, #4]
   1c380:	mov	r1, #0
   1c384:	mla	r7, r7, r2, r6
   1c388:	movwcc	r1, #1
   1c38c:	cmp	r1, #0
   1c390:	str	r1, [sp, #20]
   1c394:	mvnne	r3, #0
   1c398:	cmp	r1, #0
   1c39c:	mov	r1, r0
   1c3a0:	umull	r4, r5, r3, r5
   1c3a4:	mvnne	r7, #0
   1c3a8:	mov	lr, r1
   1c3ac:	mla	r5, r3, sl, r5
   1c3b0:	subs	r3, r0, r3
   1c3b4:	sbcs	r0, ip, r7
   1c3b8:	mla	r5, r7, r2, r5
   1c3bc:	mov	r0, #0
   1c3c0:	movwcc	r0, #1
   1c3c4:	cmp	r0, #0
   1c3c8:	str	r0, [sp, #16]
   1c3cc:	mvnne	r4, #0
   1c3d0:	mvnne	r5, #0
   1c3d4:	subs	r0, r1, r4
   1c3d8:	mov	r1, #0
   1c3dc:	sbcs	r0, ip, r5
   1c3e0:	movwcc	r1, #1
   1c3e4:	umull	r3, r0, r4, r2
   1c3e8:	cmp	r1, #0
   1c3ec:	mla	r0, r4, sl, r0
   1c3f0:	mov	r4, lr
   1c3f4:	str	r1, [sp, #12]
   1c3f8:	mvnne	r3, #0
   1c3fc:	mla	r0, r5, r2, r0
   1c400:	cmp	r1, #0
   1c404:	str	r4, [sp]
   1c408:	umull	r7, r6, r3, r2
   1c40c:	mvnne	r0, #0
   1c410:	mla	r6, r3, sl, r6
   1c414:	subs	r3, lr, r3
   1c418:	mla	r5, r0, r2, r6
   1c41c:	sbcs	r0, ip, r0
   1c420:	mov	r3, #0
   1c424:	mov	r0, #0
   1c428:	movwcc	r0, #1
   1c42c:	cmp	r0, #0
   1c430:	str	r0, [sp, #8]
   1c434:	mvnne	r7, #0
   1c438:	mvnne	r5, #0
   1c43c:	subs	r0, lr, r7
   1c440:	sbcs	r0, ip, r5
   1c444:	movwcc	r3, #1
   1c448:	umull	r6, r0, r7, r2
   1c44c:	cmp	r3, #0
   1c450:	mla	r7, r7, sl, r0
   1c454:	mov	r0, ip
   1c458:	mvnne	r6, #0
   1c45c:	mla	r7, r5, r2, r7
   1c460:	cmp	r3, #0
   1c464:	mov	r5, #0
   1c468:	umull	r1, lr, r6, r2
   1c46c:	mvnne	r7, #0
   1c470:	mla	lr, r6, sl, lr
   1c474:	subs	r6, r4, r6
   1c478:	mla	lr, r7, r2, lr
   1c47c:	sbcs	r7, ip, r7
   1c480:	mov	ip, #0
   1c484:	movwcc	ip, #1
   1c488:	cmp	ip, #0
   1c48c:	mvnne	r1, #0
   1c490:	mvnne	lr, #0
   1c494:	subs	r7, r4, r1
   1c498:	sbcs	r7, r0, lr
   1c49c:	movwcc	r5, #1
   1c4a0:	umull	r0, r7, r1, r2
   1c4a4:	cmp	r5, #0
   1c4a8:	mla	r1, r1, sl, r7
   1c4ac:	mvnne	r0, #0
   1c4b0:	mla	r1, lr, r2, r1
   1c4b4:	cmp	r5, #0
   1c4b8:	umull	r6, r4, r0, r2
   1c4bc:	mvnne	r1, #0
   1c4c0:	mla	r4, r0, sl, r4
   1c4c4:	mla	r7, r1, r2, r4
   1c4c8:	ldr	r2, [sp]
   1c4cc:	subs	r0, r2, r0
   1c4d0:	ldr	r2, [sp, #16]
   1c4d4:	ldr	r0, [sp, #4]
   1c4d8:	sbcs	r0, r0, r1
   1c4dc:	mov	r0, #0
   1c4e0:	movwcc	r0, #1
   1c4e4:	cmp	r0, #0
   1c4e8:	mov	r1, r0
   1c4ec:	ldr	r0, [sp, #20]
   1c4f0:	mvnne	r7, #0
   1c4f4:	mvnne	r6, #0
   1c4f8:	orr	r0, r0, r2
   1c4fc:	ldr	r2, [sp, #12]
   1c500:	orr	r0, r0, r2
   1c504:	ldr	r2, [sp, #8]
   1c508:	orr	r0, r0, r2
   1c50c:	orr	r0, r0, r3
   1c510:	orr	r0, r0, ip
   1c514:	orr	r0, r0, r5
   1c518:	orr	r0, r0, r1
   1c51c:	and	r3, r0, #1
   1c520:	b	1c57c <__assert_fail@plt+0xaf94>
   1c524:	mov	r1, #0
   1c528:	lsl	r2, r7, #9
   1c52c:	lsl	r0, r6, #9
   1c530:	lsr	r3, r7, #23
   1c534:	cmp	r1, r7, lsr #23
   1c538:	orr	r2, r2, r6, lsr #23
   1c53c:	mvnne	r0, #0
   1c540:	movwne	r3, #1
   1c544:	cmp	r1, r7, lsr #23
   1c548:	mvnne	r2, #0
   1c54c:	mov	r6, r0
   1c550:	mov	r7, r2
   1c554:	b	1c57c <__assert_fail@plt+0xaf94>
   1c558:	lsl	r1, r7, #1
   1c55c:	lsl	r0, r6, #1
   1c560:	cmp	r7, #0
   1c564:	lsr	r3, r7, #31
   1c568:	orr	r1, r1, r6, lsr #31
   1c56c:	mvnlt	r0, #0
   1c570:	mvnlt	r1, #0
   1c574:	mov	r6, r0
   1c578:	mov	r7, r1
   1c57c:	ldr	r1, [sp, #32]
   1c580:	ldr	r2, [sp, #28]
   1c584:	orr	r8, r3, r8
   1c588:	add	r0, r1, r2
   1c58c:	str	r0, [r9]
   1c590:	ldrb	r0, [r1, r2]
   1c594:	cmp	r0, #0
   1c598:	orrne	r8, r8, #2
   1c59c:	ldr	r0, [sp, #36]	; 0x24
   1c5a0:	strd	r6, [r0]
   1c5a4:	mov	r0, r8
   1c5a8:	sub	sp, fp, #28
   1c5ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c5b0:	movw	r0, #59465	; 0xe849
   1c5b4:	movw	r1, #59503	; 0xe86f
   1c5b8:	movw	r3, #59519	; 0xe87f
   1c5bc:	mov	r2, #85	; 0x55
   1c5c0:	movt	r0, #1
   1c5c4:	movt	r1, #1
   1c5c8:	movt	r3, #1
   1c5cc:	bl	115e8 <__assert_fail@plt>
   1c5d0:	clz	r2, r1
   1c5d4:	clz	r3, r0
   1c5d8:	lsr	r2, r2, #5
   1c5dc:	lsr	r3, r3, #5
   1c5e0:	orrs	r2, r3, r2
   1c5e4:	movwne	r1, #1
   1c5e8:	movwne	r0, #1
   1c5ec:	cmp	r1, #0
   1c5f0:	beq	1c620 <__assert_fail@plt+0xb038>
   1c5f4:	mvn	r2, #-2147483648	; 0x80000000
   1c5f8:	udiv	r2, r2, r1
   1c5fc:	cmp	r2, r0
   1c600:	bcs	1c620 <__assert_fail@plt+0xb038>
   1c604:	push	{fp, lr}
   1c608:	mov	fp, sp
   1c60c:	bl	114b0 <__errno_location@plt>
   1c610:	mov	r1, #12
   1c614:	str	r1, [r0]
   1c618:	mov	r0, #0
   1c61c:	pop	{fp, pc}
   1c620:	b	11294 <calloc@plt>
   1c624:	cmp	r0, #0
   1c628:	movweq	r0, #1
   1c62c:	cmn	r0, #1
   1c630:	ble	1c638 <__assert_fail@plt+0xb050>
   1c634:	b	11414 <malloc@plt>
   1c638:	push	{fp, lr}
   1c63c:	mov	fp, sp
   1c640:	bl	114b0 <__errno_location@plt>
   1c644:	mov	r1, #12
   1c648:	str	r1, [r0]
   1c64c:	mov	r0, #0
   1c650:	pop	{fp, pc}
   1c654:	push	{fp, lr}
   1c658:	mov	fp, sp
   1c65c:	cmp	r0, #0
   1c660:	beq	1c67c <__assert_fail@plt+0xb094>
   1c664:	cmp	r1, #0
   1c668:	beq	1c688 <__assert_fail@plt+0xb0a0>
   1c66c:	cmn	r1, #1
   1c670:	ble	1c694 <__assert_fail@plt+0xb0ac>
   1c674:	pop	{fp, lr}
   1c678:	b	11360 <realloc@plt>
   1c67c:	mov	r0, r1
   1c680:	pop	{fp, lr}
   1c684:	b	1c624 <__assert_fail@plt+0xb03c>
   1c688:	bl	174f0 <__assert_fail@plt+0x5f08>
   1c68c:	mov	r0, #0
   1c690:	pop	{fp, pc}
   1c694:	bl	114b0 <__errno_location@plt>
   1c698:	mov	r1, #12
   1c69c:	str	r1, [r0]
   1c6a0:	mov	r0, #0
   1c6a4:	pop	{fp, pc}
   1c6a8:	push	{r4, r5, r6, sl, fp, lr}
   1c6ac:	add	fp, sp, #16
   1c6b0:	movw	r6, #62224	; 0xf310
   1c6b4:	mov	r5, r0
   1c6b8:	mov	r4, r1
   1c6bc:	movt	r6, #2
   1c6c0:	ldr	r0, [r6]
   1c6c4:	cmp	r0, #0
   1c6c8:	beq	1c6e8 <__assert_fail@plt+0xb100>
   1c6cc:	ldr	r2, [r6]
   1c6d0:	cmp	r2, #0
   1c6d4:	beq	1c70c <__assert_fail@plt+0xb124>
   1c6d8:	mov	r0, r5
   1c6dc:	mov	r1, r4
   1c6e0:	pop	{r4, r5, r6, sl, fp, lr}
   1c6e4:	b	11528 <strtod_l@plt>
   1c6e8:	movw	r1, #59598	; 0xe8ce
   1c6ec:	movw	r0, #8127	; 0x1fbf
   1c6f0:	mov	r2, #0
   1c6f4:	movt	r1, #1
   1c6f8:	bl	11570 <newlocale@plt>
   1c6fc:	str	r0, [r6]
   1c700:	ldr	r2, [r6]
   1c704:	cmp	r2, #0
   1c708:	bne	1c6d8 <__assert_fail@plt+0xb0f0>
   1c70c:	cmp	r4, #0
   1c710:	vmov.i32	d0, #0	; 0x00000000
   1c714:	strne	r5, [r4]
   1c718:	pop	{r4, r5, r6, sl, fp, pc}
   1c71c:	push	{r4, r5, r6, sl, fp, lr}
   1c720:	add	fp, sp, #16
   1c724:	mov	r4, r0
   1c728:	bl	113d8 <__fpending@plt>
   1c72c:	ldr	r6, [r4]
   1c730:	mov	r5, r0
   1c734:	mov	r0, r4
   1c738:	bl	1c878 <__assert_fail@plt+0xb290>
   1c73c:	tst	r6, #32
   1c740:	bne	1c778 <__assert_fail@plt+0xb190>
   1c744:	cmp	r0, #0
   1c748:	mov	r4, r0
   1c74c:	mvnne	r4, #0
   1c750:	cmp	r5, #0
   1c754:	bne	1c784 <__assert_fail@plt+0xb19c>
   1c758:	cmp	r0, #0
   1c75c:	beq	1c784 <__assert_fail@plt+0xb19c>
   1c760:	bl	114b0 <__errno_location@plt>
   1c764:	ldr	r0, [r0]
   1c768:	subs	r4, r0, #9
   1c76c:	mvnne	r4, #0
   1c770:	mov	r0, r4
   1c774:	pop	{r4, r5, r6, sl, fp, pc}
   1c778:	mvn	r4, #0
   1c77c:	cmp	r0, #0
   1c780:	beq	1c78c <__assert_fail@plt+0xb1a4>
   1c784:	mov	r0, r4
   1c788:	pop	{r4, r5, r6, sl, fp, pc}
   1c78c:	bl	114b0 <__errno_location@plt>
   1c790:	mov	r1, #0
   1c794:	str	r1, [r0]
   1c798:	mov	r0, r4
   1c79c:	pop	{r4, r5, r6, sl, fp, pc}
   1c7a0:	vldr	d16, [pc, #184]	; 1c860 <__assert_fail@plt+0xb278>
   1c7a4:	vcmpe.f64	d0, d16
   1c7a8:	vmrs	APSR_nzcv, fpscr
   1c7ac:	ble	1c838 <__assert_fail@plt+0xb250>
   1c7b0:	vldr	d16, [pc, #176]	; 1c868 <__assert_fail@plt+0xb280>
   1c7b4:	movw	ip, #51712	; 0xca00
   1c7b8:	movt	ip, #15258	; 0x3b9a
   1c7bc:	vcmpe.f64	d0, d16
   1c7c0:	vmrs	APSR_nzcv, fpscr
   1c7c4:	bpl	1c84c <__assert_fail@plt+0xb264>
   1c7c8:	push	{fp, lr}
   1c7cc:	mov	fp, sp
   1c7d0:	vldr	d16, [pc, #152]	; 1c870 <__assert_fail@plt+0xb288>
   1c7d4:	vcvt.s32.f64	s2, d0
   1c7d8:	movw	r1, #12193	; 0x2fa1
   1c7dc:	vcvt.f64.s32	d17, s2
   1c7e0:	movt	r1, #17592	; 0x44b8
   1c7e4:	vmov	lr, s2
   1c7e8:	vsub.f64	d17, d0, d17
   1c7ec:	vmul.f64	d16, d17, d16
   1c7f0:	vcvt.s32.f64	s0, d16
   1c7f4:	vcvt.f64.s32	d17, s0
   1c7f8:	vmov	r2, s0
   1c7fc:	vcmpe.f64	d16, d17
   1c800:	vmrs	APSR_nzcv, fpscr
   1c804:	addgt	r2, r2, #1
   1c808:	smmul	r1, r2, r1
   1c80c:	asr	r3, r1, #28
   1c810:	add	r1, r3, r1, lsr #31
   1c814:	mls	r2, r1, ip, r2
   1c818:	add	r1, r1, lr
   1c81c:	cmp	r2, #0
   1c820:	add	r3, r1, r2, asr #31
   1c824:	addlt	r2, r2, ip
   1c828:	pop	{fp, lr}
   1c82c:	str	r3, [r0]
   1c830:	str	r2, [r0, #4]
   1c834:	bx	lr
   1c838:	mov	r2, #0
   1c83c:	mov	r3, #-2147483648	; 0x80000000
   1c840:	str	r3, [r0]
   1c844:	str	r2, [r0, #4]
   1c848:	bx	lr
   1c84c:	sub	r2, ip, #1
   1c850:	mvn	r3, #-2147483648	; 0x80000000
   1c854:	str	r3, [r0]
   1c858:	str	r2, [r0, #4]
   1c85c:	bx	lr
   1c860:	andeq	r0, r0, r0
   1c864:	mvngt	r0, r0
   1c868:	andeq	r0, r0, r0
   1c86c:	mvnmi	r0, r0
   1c870:	andeq	r0, r0, r0
   1c874:	bicmi	ip, sp, r5, ror #26
   1c878:	push	{r4, r5, r6, sl, fp, lr}
   1c87c:	add	fp, sp, #16
   1c880:	sub	sp, sp, #8
   1c884:	mov	r4, r0
   1c888:	bl	114ec <fileno@plt>
   1c88c:	cmn	r0, #1
   1c890:	ble	1c904 <__assert_fail@plt+0xb31c>
   1c894:	mov	r0, r4
   1c898:	bl	1142c <__freading@plt>
   1c89c:	cmp	r0, #0
   1c8a0:	beq	1c8cc <__assert_fail@plt+0xb2e4>
   1c8a4:	mov	r0, r4
   1c8a8:	bl	114ec <fileno@plt>
   1c8ac:	mov	r1, #1
   1c8b0:	mov	r2, #0
   1c8b4:	mov	r3, #0
   1c8b8:	str	r1, [sp]
   1c8bc:	bl	113c0 <lseek64@plt>
   1c8c0:	and	r0, r0, r1
   1c8c4:	cmn	r0, #1
   1c8c8:	beq	1c904 <__assert_fail@plt+0xb31c>
   1c8cc:	mov	r0, r4
   1c8d0:	bl	1c914 <__assert_fail@plt+0xb32c>
   1c8d4:	cmp	r0, #0
   1c8d8:	beq	1c904 <__assert_fail@plt+0xb31c>
   1c8dc:	bl	114b0 <__errno_location@plt>
   1c8e0:	ldr	r6, [r0]
   1c8e4:	mov	r5, r0
   1c8e8:	mov	r0, r4
   1c8ec:	bl	11510 <fclose@plt>
   1c8f0:	cmp	r6, #0
   1c8f4:	strne	r6, [r5]
   1c8f8:	mvnne	r0, #0
   1c8fc:	sub	sp, fp, #16
   1c900:	pop	{r4, r5, r6, sl, fp, pc}
   1c904:	mov	r0, r4
   1c908:	sub	sp, fp, #16
   1c90c:	pop	{r4, r5, r6, sl, fp, lr}
   1c910:	b	11510 <fclose@plt>
   1c914:	push	{r4, sl, fp, lr}
   1c918:	add	fp, sp, #8
   1c91c:	sub	sp, sp, #8
   1c920:	mov	r4, r0
   1c924:	cmp	r0, #0
   1c928:	beq	1c944 <__assert_fail@plt+0xb35c>
   1c92c:	mov	r0, r4
   1c930:	bl	1142c <__freading@plt>
   1c934:	cmp	r0, #0
   1c938:	ldrbne	r0, [r4, #1]
   1c93c:	tstne	r0, #1
   1c940:	bne	1c954 <__assert_fail@plt+0xb36c>
   1c944:	mov	r0, r4
   1c948:	sub	sp, fp, #8
   1c94c:	pop	{r4, sl, fp, lr}
   1c950:	b	112e8 <fflush@plt>
   1c954:	mov	r0, #1
   1c958:	mov	r2, #0
   1c95c:	mov	r3, #0
   1c960:	str	r0, [sp]
   1c964:	mov	r0, r4
   1c968:	bl	1c97c <__assert_fail@plt+0xb394>
   1c96c:	mov	r0, r4
   1c970:	sub	sp, fp, #8
   1c974:	pop	{r4, sl, fp, lr}
   1c978:	b	112e8 <fflush@plt>
   1c97c:	push	{r4, r5, r6, r7, fp, lr}
   1c980:	add	fp, sp, #16
   1c984:	sub	sp, sp, #8
   1c988:	mov	r4, r0
   1c98c:	ldr	r0, [r0, #4]
   1c990:	mov	r5, r3
   1c994:	mov	r6, r2
   1c998:	ldr	r1, [r4, #8]
   1c99c:	cmp	r1, r0
   1c9a0:	bne	1c9bc <__assert_fail@plt+0xb3d4>
   1c9a4:	ldrd	r0, [r4, #16]
   1c9a8:	cmp	r1, r0
   1c9ac:	bne	1c9bc <__assert_fail@plt+0xb3d4>
   1c9b0:	ldr	r0, [r4, #36]	; 0x24
   1c9b4:	cmp	r0, #0
   1c9b8:	beq	1c9d4 <__assert_fail@plt+0xb3ec>
   1c9bc:	mov	r0, r4
   1c9c0:	mov	r2, r6
   1c9c4:	mov	r3, r5
   1c9c8:	sub	sp, fp, #16
   1c9cc:	pop	{r4, r5, r6, r7, fp, lr}
   1c9d0:	b	1151c <fseeko64@plt>
   1c9d4:	ldr	r7, [fp, #8]
   1c9d8:	mov	r0, r4
   1c9dc:	bl	114ec <fileno@plt>
   1c9e0:	mov	r2, r6
   1c9e4:	mov	r3, r5
   1c9e8:	str	r7, [sp]
   1c9ec:	bl	113c0 <lseek64@plt>
   1c9f0:	and	r2, r0, r1
   1c9f4:	cmn	r2, #1
   1c9f8:	mvneq	r0, #0
   1c9fc:	subeq	sp, fp, #16
   1ca00:	popeq	{r4, r5, r6, r7, fp, pc}
   1ca04:	strd	r0, [r4, #80]	; 0x50
   1ca08:	ldr	r0, [r4]
   1ca0c:	bic	r0, r0, #16
   1ca10:	str	r0, [r4]
   1ca14:	mov	r0, #0
   1ca18:	sub	sp, fp, #16
   1ca1c:	pop	{r4, r5, r6, r7, fp, pc}
   1ca20:	push	{fp, lr}
   1ca24:	mov	fp, sp
   1ca28:	mov	r0, #14
   1ca2c:	bl	11564 <nl_langinfo@plt>
   1ca30:	movw	r1, #55014	; 0xd6e6
   1ca34:	cmp	r0, #0
   1ca38:	movt	r1, #1
   1ca3c:	movne	r1, r0
   1ca40:	movw	r0, #59600	; 0xe8d0
   1ca44:	ldrb	r2, [r1]
   1ca48:	movt	r0, #1
   1ca4c:	cmp	r2, #0
   1ca50:	movne	r0, r1
   1ca54:	pop	{fp, pc}
   1ca58:	push	{r4, r5, r6, r7, fp, lr}
   1ca5c:	add	fp, sp, #16
   1ca60:	sub	sp, sp, #8
   1ca64:	add	r5, sp, #4
   1ca68:	cmp	r0, #0
   1ca6c:	mov	r7, r2
   1ca70:	mov	r4, r1
   1ca74:	movne	r5, r0
   1ca78:	mov	r0, r5
   1ca7c:	bl	113e4 <mbrtowc@plt>
   1ca80:	mov	r6, r0
   1ca84:	cmp	r7, #0
   1ca88:	beq	1caac <__assert_fail@plt+0xb4c4>
   1ca8c:	cmn	r6, #2
   1ca90:	bcc	1caac <__assert_fail@plt+0xb4c4>
   1ca94:	mov	r0, #0
   1ca98:	bl	1cb00 <__assert_fail@plt+0xb518>
   1ca9c:	cmp	r0, #0
   1caa0:	ldrbeq	r0, [r4]
   1caa4:	moveq	r6, #1
   1caa8:	streq	r0, [r5]
   1caac:	mov	r0, r6
   1cab0:	sub	sp, fp, #16
   1cab4:	pop	{r4, r5, r6, r7, fp, pc}
   1cab8:	cmp	r2, #0
   1cabc:	beq	1caec <__assert_fail@plt+0xb504>
   1cac0:	mvn	r3, #0
   1cac4:	udiv	r3, r3, r2
   1cac8:	cmp	r3, r1
   1cacc:	bcs	1caec <__assert_fail@plt+0xb504>
   1cad0:	push	{fp, lr}
   1cad4:	mov	fp, sp
   1cad8:	bl	114b0 <__errno_location@plt>
   1cadc:	mov	r1, #12
   1cae0:	str	r1, [r0]
   1cae4:	mov	r0, #0
   1cae8:	pop	{fp, pc}
   1caec:	mul	r1, r2, r1
   1caf0:	b	1c654 <__assert_fail@plt+0xb06c>
   1caf4:	mov	r1, #0
   1caf8:	mov	r2, #3
   1cafc:	b	172c8 <__assert_fail@plt+0x5ce0>
   1cb00:	push	{r4, sl, fp, lr}
   1cb04:	add	fp, sp, #8
   1cb08:	sub	sp, sp, #264	; 0x108
   1cb0c:	add	r1, sp, #7
   1cb10:	movw	r2, #257	; 0x101
   1cb14:	bl	1cb64 <__assert_fail@plt+0xb57c>
   1cb18:	mov	r4, #0
   1cb1c:	cmp	r0, #0
   1cb20:	bne	1cb58 <__assert_fail@plt+0xb570>
   1cb24:	movw	r1, #59598	; 0xe8ce
   1cb28:	add	r0, sp, #7
   1cb2c:	movt	r1, #1
   1cb30:	bl	112b8 <strcmp@plt>
   1cb34:	cmp	r0, #0
   1cb38:	beq	1cb58 <__assert_fail@plt+0xb570>
   1cb3c:	movw	r1, #59606	; 0xe8d6
   1cb40:	add	r0, sp, #7
   1cb44:	movt	r1, #1
   1cb48:	bl	112b8 <strcmp@plt>
   1cb4c:	mov	r4, r0
   1cb50:	cmp	r0, #0
   1cb54:	movwne	r4, #1
   1cb58:	mov	r0, r4
   1cb5c:	sub	sp, fp, #8
   1cb60:	pop	{r4, sl, fp, pc}
   1cb64:	push	{r4, r5, r6, r7, fp, lr}
   1cb68:	add	fp, sp, #16
   1cb6c:	mov	r4, r1
   1cb70:	mov	r1, #0
   1cb74:	mov	r6, r2
   1cb78:	bl	1154c <setlocale@plt>
   1cb7c:	cmp	r0, #0
   1cb80:	beq	1cbb0 <__assert_fail@plt+0xb5c8>
   1cb84:	mov	r7, r0
   1cb88:	bl	11474 <strlen@plt>
   1cb8c:	cmp	r0, r6
   1cb90:	bcs	1cbd0 <__assert_fail@plt+0xb5e8>
   1cb94:	add	r2, r0, #1
   1cb98:	mov	r0, r4
   1cb9c:	mov	r1, r7
   1cba0:	bl	11318 <memcpy@plt>
   1cba4:	mov	r5, #0
   1cba8:	mov	r0, r5
   1cbac:	pop	{r4, r5, r6, r7, fp, pc}
   1cbb0:	cmp	r6, #0
   1cbb4:	mov	r5, #22
   1cbb8:	movne	r0, #0
   1cbbc:	strbne	r0, [r4]
   1cbc0:	movne	r0, r5
   1cbc4:	popne	{r4, r5, r6, r7, fp, pc}
   1cbc8:	mov	r0, r5
   1cbcc:	pop	{r4, r5, r6, r7, fp, pc}
   1cbd0:	mov	r5, #34	; 0x22
   1cbd4:	cmp	r6, #0
   1cbd8:	beq	1cbf8 <__assert_fail@plt+0xb610>
   1cbdc:	sub	r6, r6, #1
   1cbe0:	mov	r0, r4
   1cbe4:	mov	r1, r7
   1cbe8:	mov	r2, r6
   1cbec:	bl	11318 <memcpy@plt>
   1cbf0:	mov	r0, #0
   1cbf4:	strb	r0, [r4, r6]
   1cbf8:	mov	r0, r5
   1cbfc:	pop	{r4, r5, r6, r7, fp, pc}
   1cc00:	mov	r1, #0
   1cc04:	b	1154c <setlocale@plt>
   1cc08:	cmp	r3, #0
   1cc0c:	cmpeq	r2, #0
   1cc10:	bne	1cc34 <__assert_fail@plt+0xb64c>
   1cc14:	cmp	r1, #0
   1cc18:	movlt	r1, #-2147483648	; 0x80000000
   1cc1c:	movlt	r0, #0
   1cc20:	blt	1cc30 <__assert_fail@plt+0xb648>
   1cc24:	cmpeq	r0, #0
   1cc28:	mvnne	r1, #-2147483648	; 0x80000000
   1cc2c:	mvnne	r0, #0
   1cc30:	b	1cd18 <__assert_fail@plt+0xb730>
   1cc34:	sub	sp, sp, #8
   1cc38:	push	{sp, lr}
   1cc3c:	cmp	r1, #0
   1cc40:	blt	1cc60 <__assert_fail@plt+0xb678>
   1cc44:	cmp	r3, #0
   1cc48:	blt	1cc94 <__assert_fail@plt+0xb6ac>
   1cc4c:	bl	1cd28 <__assert_fail@plt+0xb740>
   1cc50:	ldr	lr, [sp, #4]
   1cc54:	add	sp, sp, #8
   1cc58:	pop	{r2, r3}
   1cc5c:	bx	lr
   1cc60:	rsbs	r0, r0, #0
   1cc64:	sbc	r1, r1, r1, lsl #1
   1cc68:	cmp	r3, #0
   1cc6c:	blt	1ccb8 <__assert_fail@plt+0xb6d0>
   1cc70:	bl	1cd28 <__assert_fail@plt+0xb740>
   1cc74:	ldr	lr, [sp, #4]
   1cc78:	add	sp, sp, #8
   1cc7c:	pop	{r2, r3}
   1cc80:	rsbs	r0, r0, #0
   1cc84:	sbc	r1, r1, r1, lsl #1
   1cc88:	rsbs	r2, r2, #0
   1cc8c:	sbc	r3, r3, r3, lsl #1
   1cc90:	bx	lr
   1cc94:	rsbs	r2, r2, #0
   1cc98:	sbc	r3, r3, r3, lsl #1
   1cc9c:	bl	1cd28 <__assert_fail@plt+0xb740>
   1cca0:	ldr	lr, [sp, #4]
   1cca4:	add	sp, sp, #8
   1cca8:	pop	{r2, r3}
   1ccac:	rsbs	r0, r0, #0
   1ccb0:	sbc	r1, r1, r1, lsl #1
   1ccb4:	bx	lr
   1ccb8:	rsbs	r2, r2, #0
   1ccbc:	sbc	r3, r3, r3, lsl #1
   1ccc0:	bl	1cd28 <__assert_fail@plt+0xb740>
   1ccc4:	ldr	lr, [sp, #4]
   1ccc8:	add	sp, sp, #8
   1cccc:	pop	{r2, r3}
   1ccd0:	rsbs	r2, r2, #0
   1ccd4:	sbc	r3, r3, r3, lsl #1
   1ccd8:	bx	lr
   1ccdc:	cmp	r3, #0
   1cce0:	cmpeq	r2, #0
   1cce4:	bne	1ccfc <__assert_fail@plt+0xb714>
   1cce8:	cmp	r1, #0
   1ccec:	cmpeq	r0, #0
   1ccf0:	mvnne	r1, #0
   1ccf4:	mvnne	r0, #0
   1ccf8:	b	1cd18 <__assert_fail@plt+0xb730>
   1ccfc:	sub	sp, sp, #8
   1cd00:	push	{sp, lr}
   1cd04:	bl	1cd28 <__assert_fail@plt+0xb740>
   1cd08:	ldr	lr, [sp, #4]
   1cd0c:	add	sp, sp, #8
   1cd10:	pop	{r2, r3}
   1cd14:	bx	lr
   1cd18:	push	{r1, lr}
   1cd1c:	mov	r0, #8
   1cd20:	bl	112ac <raise@plt>
   1cd24:	pop	{r1, pc}
   1cd28:	cmp	r1, r3
   1cd2c:	cmpeq	r0, r2
   1cd30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd34:	mov	r4, r0
   1cd38:	movcc	r0, #0
   1cd3c:	mov	r5, r1
   1cd40:	ldr	lr, [sp, #36]	; 0x24
   1cd44:	movcc	r1, r0
   1cd48:	bcc	1ce44 <__assert_fail@plt+0xb85c>
   1cd4c:	cmp	r3, #0
   1cd50:	clzeq	ip, r2
   1cd54:	clzne	ip, r3
   1cd58:	addeq	ip, ip, #32
   1cd5c:	cmp	r5, #0
   1cd60:	clzeq	r1, r4
   1cd64:	addeq	r1, r1, #32
   1cd68:	clzne	r1, r5
   1cd6c:	sub	ip, ip, r1
   1cd70:	sub	sl, ip, #32
   1cd74:	lsl	r9, r3, ip
   1cd78:	rsb	fp, ip, #32
   1cd7c:	orr	r9, r9, r2, lsl sl
   1cd80:	orr	r9, r9, r2, lsr fp
   1cd84:	lsl	r8, r2, ip
   1cd88:	cmp	r5, r9
   1cd8c:	cmpeq	r4, r8
   1cd90:	movcc	r0, #0
   1cd94:	movcc	r1, r0
   1cd98:	bcc	1cdb4 <__assert_fail@plt+0xb7cc>
   1cd9c:	mov	r0, #1
   1cda0:	subs	r4, r4, r8
   1cda4:	lsl	r1, r0, sl
   1cda8:	orr	r1, r1, r0, lsr fp
   1cdac:	lsl	r0, r0, ip
   1cdb0:	sbc	r5, r5, r9
   1cdb4:	cmp	ip, #0
   1cdb8:	beq	1ce44 <__assert_fail@plt+0xb85c>
   1cdbc:	lsr	r6, r8, #1
   1cdc0:	orr	r6, r6, r9, lsl #31
   1cdc4:	lsr	r7, r9, #1
   1cdc8:	mov	r2, ip
   1cdcc:	b	1cdf0 <__assert_fail@plt+0xb808>
   1cdd0:	subs	r3, r4, r6
   1cdd4:	sbc	r8, r5, r7
   1cdd8:	adds	r3, r3, r3
   1cddc:	adc	r8, r8, r8
   1cde0:	adds	r4, r3, #1
   1cde4:	adc	r5, r8, #0
   1cde8:	subs	r2, r2, #1
   1cdec:	beq	1ce0c <__assert_fail@plt+0xb824>
   1cdf0:	cmp	r5, r7
   1cdf4:	cmpeq	r4, r6
   1cdf8:	bcs	1cdd0 <__assert_fail@plt+0xb7e8>
   1cdfc:	adds	r4, r4, r4
   1ce00:	adc	r5, r5, r5
   1ce04:	subs	r2, r2, #1
   1ce08:	bne	1cdf0 <__assert_fail@plt+0xb808>
   1ce0c:	lsr	r3, r4, ip
   1ce10:	orr	r3, r3, r5, lsl fp
   1ce14:	lsr	r2, r5, ip
   1ce18:	orr	r3, r3, r5, lsr sl
   1ce1c:	adds	r0, r0, r4
   1ce20:	mov	r4, r3
   1ce24:	lsl	r3, r2, ip
   1ce28:	orr	r3, r3, r4, lsl sl
   1ce2c:	lsl	ip, r4, ip
   1ce30:	orr	r3, r3, r4, lsr fp
   1ce34:	adc	r1, r1, r5
   1ce38:	subs	r0, r0, ip
   1ce3c:	mov	r5, r2
   1ce40:	sbc	r1, r1, r3
   1ce44:	cmp	lr, #0
   1ce48:	strdne	r4, [lr]
   1ce4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ce54:	mov	r7, r0
   1ce58:	ldr	r6, [pc, #72]	; 1cea8 <__assert_fail@plt+0xb8c0>
   1ce5c:	ldr	r5, [pc, #72]	; 1ceac <__assert_fail@plt+0xb8c4>
   1ce60:	add	r6, pc, r6
   1ce64:	add	r5, pc, r5
   1ce68:	sub	r6, r6, r5
   1ce6c:	mov	r8, r1
   1ce70:	mov	r9, r2
   1ce74:	bl	11268 <fstatfs64@plt-0x20>
   1ce78:	asrs	r6, r6, #2
   1ce7c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ce80:	mov	r4, #0
   1ce84:	add	r4, r4, #1
   1ce88:	ldr	r3, [r5], #4
   1ce8c:	mov	r2, r9
   1ce90:	mov	r1, r8
   1ce94:	mov	r0, r7
   1ce98:	blx	r3
   1ce9c:	cmp	r6, r4
   1cea0:	bne	1ce84 <__assert_fail@plt+0xb89c>
   1cea4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1cea8:	andeq	r2, r1, r4, lsr #1
   1ceac:	muleq	r1, ip, r0
   1ceb0:	bx	lr
   1ceb4:	ldr	r3, [pc, #12]	; 1cec8 <__assert_fail@plt+0xb8e0>
   1ceb8:	mov	r1, #0
   1cebc:	add	r3, pc, r3
   1cec0:	ldr	r2, [r3]
   1cec4:	b	114bc <__cxa_atexit@plt>
   1cec8:	andeq	r2, r1, r8, ror r2

Disassembly of section .fini:

0001cecc <.fini>:
   1cecc:	push	{r3, lr}
   1ced0:	pop	{r3, pc}
