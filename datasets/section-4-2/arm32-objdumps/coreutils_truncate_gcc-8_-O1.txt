
../repos/coreutils/src/truncate:     file format elf32-littlearm


Disassembly of section .init:

00010c14 <.init>:
   10c14:	push	{r3, lr}
   10c18:	bl	10ed4 <__assert_fail@plt+0x48>
   10c1c:	pop	{r3, pc}

Disassembly of section .plt:

00010c20 <calloc@plt-0x14>:
   10c20:	push	{lr}		; (str lr, [sp, #-4]!)
   10c24:	ldr	lr, [pc, #4]	; 10c30 <calloc@plt-0x4>
   10c28:	add	lr, pc, lr
   10c2c:	ldr	pc, [lr, #8]!
   10c30:	ldrdeq	r6, [r1], -r0

00010c34 <calloc@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #90112	; 0x16000
   10c3c:	ldr	pc, [ip, #976]!	; 0x3d0

00010c40 <fputs_unlocked@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #90112	; 0x16000
   10c48:	ldr	pc, [ip, #968]!	; 0x3c8

00010c4c <raise@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #90112	; 0x16000
   10c54:	ldr	pc, [ip, #960]!	; 0x3c0

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #90112	; 0x16000
   10c60:	ldr	pc, [ip, #952]!	; 0x3b8

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #90112	; 0x16000
   10c6c:	ldr	pc, [ip, #944]!	; 0x3b0

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #90112	; 0x16000
   10c78:	ldr	pc, [ip, #936]!	; 0x3a8

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #90112	; 0x16000
   10c84:	ldr	pc, [ip, #928]!	; 0x3a0

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #90112	; 0x16000
   10c90:	ldr	pc, [ip, #920]!	; 0x398

00010c94 <mbsinit@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #90112	; 0x16000
   10c9c:	ldr	pc, [ip, #912]!	; 0x390

00010ca0 <ftruncate64@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #90112	; 0x16000
   10ca8:	ldr	pc, [ip, #904]!	; 0x388

00010cac <memcmp@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #90112	; 0x16000
   10cb4:	ldr	pc, [ip, #896]!	; 0x380

00010cb8 <fputc_unlocked@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #90112	; 0x16000
   10cc0:	ldr	pc, [ip, #888]!	; 0x378

00010cc4 <dcgettext@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #90112	; 0x16000
   10ccc:	ldr	pc, [ip, #880]!	; 0x370

00010cd0 <realloc@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #90112	; 0x16000
   10cd8:	ldr	pc, [ip, #872]!	; 0x368

00010cdc <textdomain@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #90112	; 0x16000
   10ce4:	ldr	pc, [ip, #864]!	; 0x360

00010ce8 <iswprint@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #90112	; 0x16000
   10cf0:	ldr	pc, [ip, #856]!	; 0x358

00010cf4 <__fxstat64@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #90112	; 0x16000
   10cfc:	ldr	pc, [ip, #848]!	; 0x350

00010d00 <fwrite@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #90112	; 0x16000
   10d08:	ldr	pc, [ip, #840]!	; 0x348

00010d0c <lseek64@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #90112	; 0x16000
   10d14:	ldr	pc, [ip, #832]!	; 0x340

00010d18 <__ctype_get_mb_cur_max@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #90112	; 0x16000
   10d20:	ldr	pc, [ip, #824]!	; 0x338

00010d24 <__fpending@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #90112	; 0x16000
   10d2c:	ldr	pc, [ip, #816]!	; 0x330

00010d30 <mbrtowc@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #90112	; 0x16000
   10d38:	ldr	pc, [ip, #808]!	; 0x328

00010d3c <error@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #90112	; 0x16000
   10d44:	ldr	pc, [ip, #800]!	; 0x320

00010d48 <open64@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #90112	; 0x16000
   10d50:	ldr	pc, [ip, #792]!	; 0x318

00010d54 <malloc@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #90112	; 0x16000
   10d5c:	ldr	pc, [ip, #784]!	; 0x310

00010d60 <__libc_start_main@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #90112	; 0x16000
   10d68:	ldr	pc, [ip, #776]!	; 0x308

00010d6c <__freading@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #90112	; 0x16000
   10d74:	ldr	pc, [ip, #768]!	; 0x300

00010d78 <__gmon_start__@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #90112	; 0x16000
   10d80:	ldr	pc, [ip, #760]!	; 0x2f8

00010d84 <getopt_long@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #90112	; 0x16000
   10d8c:	ldr	pc, [ip, #752]!	; 0x2f0

00010d90 <__ctype_b_loc@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #90112	; 0x16000
   10d98:	ldr	pc, [ip, #744]!	; 0x2e8

00010d9c <exit@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #90112	; 0x16000
   10da4:	ldr	pc, [ip, #736]!	; 0x2e0

00010da8 <strlen@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #90112	; 0x16000
   10db0:	ldr	pc, [ip, #728]!	; 0x2d8

00010db4 <strchr@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #90112	; 0x16000
   10dbc:	ldr	pc, [ip, #720]!	; 0x2d0

00010dc0 <__errno_location@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #90112	; 0x16000
   10dc8:	ldr	pc, [ip, #712]!	; 0x2c8

00010dcc <__cxa_atexit@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #90112	; 0x16000
   10dd4:	ldr	pc, [ip, #704]!	; 0x2c0

00010dd8 <memset@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #90112	; 0x16000
   10de0:	ldr	pc, [ip, #696]!	; 0x2b8

00010de4 <__printf_chk@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #90112	; 0x16000
   10dec:	ldr	pc, [ip, #688]!	; 0x2b0

00010df0 <fileno@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #90112	; 0x16000
   10df8:	ldr	pc, [ip, #680]!	; 0x2a8

00010dfc <__fprintf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #90112	; 0x16000
   10e04:	ldr	pc, [ip, #672]!	; 0x2a0

00010e08 <fclose@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #90112	; 0x16000
   10e10:	ldr	pc, [ip, #664]!	; 0x298

00010e14 <fseeko64@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #90112	; 0x16000
   10e1c:	ldr	pc, [ip, #656]!	; 0x290

00010e20 <setlocale@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #90112	; 0x16000
   10e28:	ldr	pc, [ip, #648]!	; 0x288

00010e2c <strrchr@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #90112	; 0x16000
   10e34:	ldr	pc, [ip, #640]!	; 0x280

00010e38 <nl_langinfo@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #90112	; 0x16000
   10e40:	ldr	pc, [ip, #632]!	; 0x278

00010e44 <__strtoll_internal@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #90112	; 0x16000
   10e4c:	ldr	pc, [ip, #624]!	; 0x270

00010e50 <bindtextdomain@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #90112	; 0x16000
   10e58:	ldr	pc, [ip, #616]!	; 0x268

00010e5c <__xstat64@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #90112	; 0x16000
   10e64:	ldr	pc, [ip, #608]!	; 0x260

00010e68 <strncmp@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #90112	; 0x16000
   10e70:	ldr	pc, [ip, #600]!	; 0x258

00010e74 <abort@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #592]!	; 0x250

00010e80 <close@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #584]!	; 0x248

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #576]!	; 0x240

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d60 <__libc_start_main@plt>
   10ec4:	bl	10e74 <abort@plt>
   10ec8:	andeq	r6, r1, ip, lsr #1
   10ecc:	andeq	r1, r1, r0, lsr #7
   10ed0:	andeq	r6, r1, ip, asr #32
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d78 <__gmon_start__@plt>
   10ef0:	andeq	r6, r1, ip, lsl r1
   10ef4:	ldrdeq	r0, [r0], -r8
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x8c>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x90>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x94>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r7, r2, ip, lsr #2
   10f1c:	andeq	r7, r2, ip, lsr #2
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc4>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xcc>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r7, r2, ip, lsr #2
   10f54:	andeq	r7, r2, ip, lsr #2
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf4>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r7, r2, ip, asr #2
   10f84:	b	10f24 <__assert_fail@plt+0x98>
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	sub	sp, sp, #60	; 0x3c
   10f90:	subs	r5, r0, #0
   10f94:	beq	10fdc <__assert_fail@plt+0x150>
   10f98:	movw	r3, #28992	; 0x7140
   10f9c:	movt	r3, #2
   10fa0:	ldr	r4, [r3]
   10fa4:	mov	r2, #5
   10fa8:	movw	r1, #24968	; 0x6188
   10fac:	movt	r1, #1
   10fb0:	mov	r0, #0
   10fb4:	bl	10cc4 <dcgettext@plt>
   10fb8:	movw	r3, #29024	; 0x7160
   10fbc:	movt	r3, #2
   10fc0:	ldr	r3, [r3]
   10fc4:	mov	r2, r0
   10fc8:	mov	r1, #1
   10fcc:	mov	r0, r4
   10fd0:	bl	10dfc <__fprintf_chk@plt>
   10fd4:	mov	r0, r5
   10fd8:	bl	10d9c <exit@plt>
   10fdc:	mov	r2, #5
   10fe0:	movw	r1, #25008	; 0x61b0
   10fe4:	movt	r1, #1
   10fe8:	mov	r0, #0
   10fec:	bl	10cc4 <dcgettext@plt>
   10ff0:	movw	r3, #29024	; 0x7160
   10ff4:	movt	r3, #2
   10ff8:	ldr	r2, [r3]
   10ffc:	mov	r1, r0
   11000:	mov	r0, #1
   11004:	bl	10de4 <__printf_chk@plt>
   11008:	mov	r2, #5
   1100c:	movw	r1, #25040	; 0x61d0
   11010:	movt	r1, #1
   11014:	mov	r0, #0
   11018:	bl	10cc4 <dcgettext@plt>
   1101c:	movw	r4, #28996	; 0x7144
   11020:	movt	r4, #2
   11024:	ldr	r1, [r4]
   11028:	bl	10c40 <fputs_unlocked@plt>
   1102c:	mov	r2, #5
   11030:	movw	r1, #25316	; 0x62e4
   11034:	movt	r1, #1
   11038:	mov	r0, #0
   1103c:	bl	10cc4 <dcgettext@plt>
   11040:	ldr	r1, [r4]
   11044:	bl	10c40 <fputs_unlocked@plt>
   11048:	mov	r2, #5
   1104c:	movw	r1, #25392	; 0x6330
   11050:	movt	r1, #1
   11054:	mov	r0, #0
   11058:	bl	10cc4 <dcgettext@plt>
   1105c:	ldr	r1, [r4]
   11060:	bl	10c40 <fputs_unlocked@plt>
   11064:	mov	r2, #5
   11068:	movw	r1, #25444	; 0x6364
   1106c:	movt	r1, #1
   11070:	mov	r0, #0
   11074:	bl	10cc4 <dcgettext@plt>
   11078:	ldr	r1, [r4]
   1107c:	bl	10c40 <fputs_unlocked@plt>
   11080:	mov	r2, #5
   11084:	movw	r1, #25524	; 0x63b4
   11088:	movt	r1, #1
   1108c:	mov	r0, #0
   11090:	bl	10cc4 <dcgettext@plt>
   11094:	ldr	r1, [r4]
   11098:	bl	10c40 <fputs_unlocked@plt>
   1109c:	mov	r2, #5
   110a0:	movw	r1, #25636	; 0x6424
   110a4:	movt	r1, #1
   110a8:	mov	r0, #0
   110ac:	bl	10cc4 <dcgettext@plt>
   110b0:	ldr	r1, [r4]
   110b4:	bl	10c40 <fputs_unlocked@plt>
   110b8:	mov	r2, #5
   110bc:	movw	r1, #25684	; 0x6454
   110c0:	movt	r1, #1
   110c4:	mov	r0, #0
   110c8:	bl	10cc4 <dcgettext@plt>
   110cc:	ldr	r1, [r4]
   110d0:	bl	10c40 <fputs_unlocked@plt>
   110d4:	mov	r2, #5
   110d8:	movw	r1, #25740	; 0x648c
   110dc:	movt	r1, #1
   110e0:	mov	r0, #0
   110e4:	bl	10cc4 <dcgettext@plt>
   110e8:	ldr	r1, [r4]
   110ec:	bl	10c40 <fputs_unlocked@plt>
   110f0:	mov	r2, #5
   110f4:	movw	r1, #25952	; 0x6560
   110f8:	movt	r1, #1
   110fc:	mov	r0, #0
   11100:	bl	10cc4 <dcgettext@plt>
   11104:	ldr	r1, [r4]
   11108:	bl	10c40 <fputs_unlocked@plt>
   1110c:	movw	r0, #24788	; 0x60d4
   11110:	movt	r0, #1
   11114:	ldr	r1, [r0]
   11118:	ldr	r3, [r0, #4]
   1111c:	str	r1, [sp]
   11120:	str	r3, [sp, #4]
   11124:	ldrd	r2, [r0, #8]
   11128:	strd	r2, [sp, #8]
   1112c:	ldrd	r2, [r0, #16]
   11130:	strd	r2, [sp, #16]
   11134:	ldrd	r2, [r0, #24]
   11138:	strd	r2, [sp, #24]
   1113c:	ldrd	r2, [r0, #32]
   11140:	strd	r2, [sp, #32]
   11144:	ldrd	r2, [r0, #40]	; 0x28
   11148:	strd	r2, [sp, #40]	; 0x28
   1114c:	ldrd	r2, [r0, #48]	; 0x30
   11150:	strd	r2, [sp, #48]	; 0x30
   11154:	cmp	r1, #0
   11158:	moveq	r4, sp
   1115c:	beq	11188 <__assert_fail@plt+0x2fc>
   11160:	mov	r4, sp
   11164:	movw	r6, #24956	; 0x617c
   11168:	movt	r6, #1
   1116c:	mov	r0, r6
   11170:	bl	10c58 <strcmp@plt>
   11174:	cmp	r0, #0
   11178:	beq	11188 <__assert_fail@plt+0x2fc>
   1117c:	ldr	r1, [r4, #8]!
   11180:	cmp	r1, #0
   11184:	bne	1116c <__assert_fail@plt+0x2e0>
   11188:	ldr	r4, [r4, #4]
   1118c:	cmp	r4, #0
   11190:	beq	112ec <__assert_fail@plt+0x460>
   11194:	mov	r2, #5
   11198:	movw	r1, #26144	; 0x6620
   1119c:	movt	r1, #1
   111a0:	mov	r0, #0
   111a4:	bl	10cc4 <dcgettext@plt>
   111a8:	movw	r3, #26168	; 0x6638
   111ac:	movt	r3, #1
   111b0:	movw	r2, #26208	; 0x6660
   111b4:	movt	r2, #1
   111b8:	mov	r1, r0
   111bc:	mov	r0, #1
   111c0:	bl	10de4 <__printf_chk@plt>
   111c4:	mov	r1, #0
   111c8:	mov	r0, #5
   111cc:	bl	10e20 <setlocale@plt>
   111d0:	cmp	r0, #0
   111d4:	beq	111f0 <__assert_fail@plt+0x364>
   111d8:	mov	r2, #3
   111dc:	movw	r1, #26224	; 0x6670
   111e0:	movt	r1, #1
   111e4:	bl	10e68 <strncmp@plt>
   111e8:	cmp	r0, #0
   111ec:	bne	1126c <__assert_fail@plt+0x3e0>
   111f0:	mov	r2, #5
   111f4:	movw	r1, #26300	; 0x66bc
   111f8:	movt	r1, #1
   111fc:	mov	r0, #0
   11200:	bl	10cc4 <dcgettext@plt>
   11204:	movw	r6, #24956	; 0x617c
   11208:	movt	r6, #1
   1120c:	mov	r3, r6
   11210:	movw	r2, #26168	; 0x6638
   11214:	movt	r2, #1
   11218:	mov	r1, r0
   1121c:	mov	r0, #1
   11220:	bl	10de4 <__printf_chk@plt>
   11224:	mov	r2, #5
   11228:	movw	r1, #26328	; 0x66d8
   1122c:	movt	r1, #1
   11230:	mov	r0, #0
   11234:	bl	10cc4 <dcgettext@plt>
   11238:	mov	r1, r0
   1123c:	movw	r2, #26964	; 0x6954
   11240:	movt	r2, #1
   11244:	movw	r3, #25036	; 0x61cc
   11248:	movt	r3, #1
   1124c:	cmp	r4, r6
   11250:	moveq	r3, r2
   11254:	mov	r2, r4
   11258:	mov	r0, #1
   1125c:	bl	10de4 <__printf_chk@plt>
   11260:	b	10fd4 <__assert_fail@plt+0x148>
   11264:	movw	r4, #24956	; 0x617c
   11268:	movt	r4, #1
   1126c:	mov	r2, #5
   11270:	movw	r1, #26228	; 0x6674
   11274:	movt	r1, #1
   11278:	mov	r0, #0
   1127c:	bl	10cc4 <dcgettext@plt>
   11280:	movw	r3, #28996	; 0x7144
   11284:	movt	r3, #2
   11288:	ldr	r1, [r3]
   1128c:	bl	10c40 <fputs_unlocked@plt>
   11290:	b	111f0 <__assert_fail@plt+0x364>
   11294:	mov	r2, #5
   11298:	movw	r1, #26300	; 0x66bc
   1129c:	movt	r1, #1
   112a0:	mov	r0, #0
   112a4:	bl	10cc4 <dcgettext@plt>
   112a8:	movw	r4, #24956	; 0x617c
   112ac:	movt	r4, #1
   112b0:	mov	r3, r4
   112b4:	movw	r2, #26168	; 0x6638
   112b8:	movt	r2, #1
   112bc:	mov	r1, r0
   112c0:	mov	r0, #1
   112c4:	bl	10de4 <__printf_chk@plt>
   112c8:	mov	r2, #5
   112cc:	movw	r1, #26328	; 0x66d8
   112d0:	movt	r1, #1
   112d4:	mov	r0, #0
   112d8:	bl	10cc4 <dcgettext@plt>
   112dc:	mov	r1, r0
   112e0:	movw	r3, #26964	; 0x6954
   112e4:	movt	r3, #1
   112e8:	b	11254 <__assert_fail@plt+0x3c8>
   112ec:	mov	r2, #5
   112f0:	movw	r1, #26144	; 0x6620
   112f4:	movt	r1, #1
   112f8:	mov	r0, #0
   112fc:	bl	10cc4 <dcgettext@plt>
   11300:	movw	r3, #26168	; 0x6638
   11304:	movt	r3, #1
   11308:	movw	r2, #26208	; 0x6660
   1130c:	movt	r2, #1
   11310:	mov	r1, r0
   11314:	mov	r0, #1
   11318:	bl	10de4 <__printf_chk@plt>
   1131c:	mov	r1, #0
   11320:	mov	r0, #5
   11324:	bl	10e20 <setlocale@plt>
   11328:	cmp	r0, #0
   1132c:	beq	11294 <__assert_fail@plt+0x408>
   11330:	mov	r2, #3
   11334:	movw	r1, #26224	; 0x6670
   11338:	movt	r1, #1
   1133c:	bl	10e68 <strncmp@plt>
   11340:	cmp	r0, #0
   11344:	bne	11264 <__assert_fail@plt+0x3d8>
   11348:	mov	r2, #5
   1134c:	movw	r1, #26300	; 0x66bc
   11350:	movt	r1, #1
   11354:	mov	r0, #0
   11358:	bl	10cc4 <dcgettext@plt>
   1135c:	movw	r4, #24956	; 0x617c
   11360:	movt	r4, #1
   11364:	mov	r3, r4
   11368:	movw	r2, #26168	; 0x6638
   1136c:	movt	r2, #1
   11370:	mov	r1, r0
   11374:	mov	r0, #1
   11378:	bl	10de4 <__printf_chk@plt>
   1137c:	mov	r2, #5
   11380:	movw	r1, #26328	; 0x66d8
   11384:	movt	r1, #1
   11388:	mov	r0, #0
   1138c:	bl	10cc4 <dcgettext@plt>
   11390:	mov	r1, r0
   11394:	movw	r3, #26964	; 0x6954
   11398:	movt	r3, #1
   1139c:	b	11254 <__assert_fail@plt+0x3c8>
   113a0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   113a4:	strd	r6, [sp, #8]
   113a8:	strd	r8, [sp, #16]
   113ac:	strd	sl, [sp, #24]
   113b0:	str	lr, [sp, #32]
   113b4:	sub	sp, sp, #188	; 0xbc
   113b8:	mov	r7, r0
   113bc:	mov	r4, r1
   113c0:	ldr	r0, [r1]
   113c4:	bl	12190 <__assert_fail@plt+0x1304>
   113c8:	movw	r1, #25036	; 0x61cc
   113cc:	movt	r1, #1
   113d0:	mov	r0, #6
   113d4:	bl	10e20 <setlocale@plt>
   113d8:	movw	r5, #26212	; 0x6664
   113dc:	movt	r5, #1
   113e0:	movw	r1, #26380	; 0x670c
   113e4:	movt	r1, #1
   113e8:	mov	r0, r5
   113ec:	bl	10e50 <bindtextdomain@plt>
   113f0:	mov	r0, r5
   113f4:	bl	10cdc <textdomain@plt>
   113f8:	movw	r0, #8320	; 0x2080
   113fc:	movt	r0, #1
   11400:	bl	160b0 <__assert_fail@plt+0x5224>
   11404:	mov	sl, #0
   11408:	mov	fp, sl
   1140c:	str	sl, [sp, #32]
   11410:	mov	r5, sl
   11414:	ldr	r8, [pc, #3136]	; 1205c <__assert_fail@plt+0x11d0>
   11418:	movw	r6, #29000	; 0x7148
   1141c:	movt	r6, #2
   11420:	mov	r3, #0
   11424:	str	r3, [sp]
   11428:	mov	r3, r8
   1142c:	movw	r2, #26512	; 0x6790
   11430:	movt	r2, #1
   11434:	mov	r1, r4
   11438:	mov	r0, r7
   1143c:	bl	10d84 <getopt_long@plt>
   11440:	cmn	r0, #1
   11444:	beq	11758 <__assert_fail@plt+0x8cc>
   11448:	cmp	r0, #99	; 0x63
   1144c:	beq	11500 <__assert_fail@plt+0x674>
   11450:	ble	11474 <__assert_fail@plt+0x5e8>
   11454:	cmp	r0, #114	; 0x72
   11458:	beq	11528 <__assert_fail@plt+0x69c>
   1145c:	cmp	r0, #115	; 0x73
   11460:	beq	114d4 <__assert_fail@plt+0x648>
   11464:	cmp	r0, #111	; 0x6f
   11468:	beq	11514 <__assert_fail@plt+0x688>
   1146c:	mov	r0, #1
   11470:	bl	10f88 <__assert_fail@plt+0xfc>
   11474:	cmn	r0, #3
   11478:	bne	114c4 <__assert_fail@plt+0x638>
   1147c:	movw	r3, #28900	; 0x70e4
   11480:	movt	r3, #2
   11484:	movw	r0, #28996	; 0x7144
   11488:	movt	r0, #2
   1148c:	mov	r4, #0
   11490:	str	r4, [sp, #4]
   11494:	movw	r2, #26496	; 0x6780
   11498:	movt	r2, #1
   1149c:	str	r2, [sp]
   114a0:	ldr	r3, [r3]
   114a4:	movw	r2, #26208	; 0x6660
   114a8:	movt	r2, #1
   114ac:	movw	r1, #24956	; 0x617c
   114b0:	movt	r1, #1
   114b4:	ldr	r0, [r0]
   114b8:	bl	14988 <__assert_fail@plt+0x3afc>
   114bc:	mov	r0, r4
   114c0:	bl	10d9c <exit@plt>
   114c4:	cmn	r0, #2
   114c8:	bne	1146c <__assert_fail@plt+0x5e0>
   114cc:	mov	r0, #0
   114d0:	bl	10f88 <__assert_fail@plt+0xfc>
   114d4:	bl	10d90 <__ctype_b_loc@plt>
   114d8:	ldr	r3, [r6]
   114dc:	ldrb	r2, [r3]
   114e0:	ldr	ip, [r0]
   114e4:	lsl	r1, r2, #1
   114e8:	ldrh	r1, [ip, r1]
   114ec:	tst	r1, #8192	; 0x2000
   114f0:	beq	1153c <__assert_fail@plt+0x6b0>
   114f4:	add	r3, r3, #1
   114f8:	str	r3, [r6]
   114fc:	b	114d8 <__assert_fail@plt+0x64c>
   11500:	movw	r3, #29008	; 0x7150
   11504:	movt	r3, #2
   11508:	mov	r2, #1
   1150c:	strb	r2, [r3]
   11510:	b	11420 <__assert_fail@plt+0x594>
   11514:	movw	r3, #29008	; 0x7150
   11518:	movt	r3, #2
   1151c:	mov	r2, #1
   11520:	strb	r2, [r3, #1]
   11524:	b	11420 <__assert_fail@plt+0x594>
   11528:	movw	r3, #29008	; 0x7150
   1152c:	movt	r3, #2
   11530:	ldr	r2, [r6]
   11534:	str	r2, [r3, #4]
   11538:	b	11420 <__assert_fail@plt+0x594>
   1153c:	sub	r2, r2, #37	; 0x25
   11540:	cmp	r2, #25
   11544:	ldrls	pc, [pc, r2, lsl #2]
   11548:	b	115c0 <__assert_fail@plt+0x734>
   1154c:	andeq	r1, r1, ip, lsl #13
   11550:	andeq	r1, r1, r0, asr #11
   11554:	andeq	r1, r1, r0, asr #11
   11558:	andeq	r1, r1, r0, asr #11
   1155c:	andeq	r1, r1, r0, asr #11
   11560:	andeq	r1, r1, r0, asr #11
   11564:	andeq	r1, r1, r0, asr #11
   11568:	andeq	r1, r1, r0, asr #11
   1156c:	andeq	r1, r1, r0, asr #11
   11570:	andeq	r1, r1, r0, asr #11
   11574:	andeq	r1, r1, ip, ror r6
   11578:	andeq	r1, r1, r0, asr #11
   1157c:	andeq	r1, r1, r0, asr #11
   11580:	andeq	r1, r1, r0, asr #11
   11584:	andeq	r1, r1, r0, asr #11
   11588:	andeq	r1, r1, r0, asr #11
   1158c:	andeq	r1, r1, r0, asr #11
   11590:	andeq	r1, r1, r0, asr #11
   11594:	andeq	r1, r1, r0, asr #11
   11598:	andeq	r1, r1, r0, asr #11
   1159c:	andeq	r1, r1, r0, asr #11
   115a0:	andeq	r1, r1, r0, asr #11
   115a4:	andeq	r1, r1, r0, asr #11
   115a8:			; <UNDEFINED> instruction: 0x000115b4
   115ac:	andeq	r1, r1, r0, asr #11
   115b0:	andeq	r1, r1, ip, ror #12
   115b4:	add	r3, r3, #1
   115b8:	str	r3, [r6]
   115bc:	mov	sl, #3
   115c0:	ldr	r5, [r6]
   115c4:	ldrb	r3, [r5]
   115c8:	ldr	r1, [r0]
   115cc:	lsl	r2, r3, #1
   115d0:	ldrh	r2, [r1, r2]
   115d4:	tst	r2, #8192	; 0x2000
   115d8:	beq	115fc <__assert_fail@plt+0x770>
   115dc:	add	r5, r5, #1
   115e0:	str	r5, [r6]
   115e4:	ldrb	r3, [r5]
   115e8:	ldr	r1, [r0]
   115ec:	lsl	r2, r3, #1
   115f0:	ldrh	r2, [r1, r2]
   115f4:	tst	r2, #8192	; 0x2000
   115f8:	bne	115dc <__assert_fail@plt+0x750>
   115fc:	sub	r3, r3, #43	; 0x2b
   11600:	tst	r3, #253	; 0xfd
   11604:	bne	116c8 <__assert_fail@plt+0x83c>
   11608:	cmp	sl, #0
   1160c:	bne	1169c <__assert_fail@plt+0x810>
   11610:	mov	r2, #5
   11614:	movw	r1, #26444	; 0x674c
   11618:	movt	r1, #1
   1161c:	mov	r0, #0
   11620:	bl	10cc4 <dcgettext@plt>
   11624:	mov	r3, #0
   11628:	str	r3, [sp, #16]
   1162c:	str	r0, [sp, #12]
   11630:	movw	r3, #26460	; 0x675c
   11634:	movt	r3, #1
   11638:	str	r3, [sp, #8]
   1163c:	mvn	r2, #0
   11640:	mvn	r3, #-2147483648	; 0x80000000
   11644:	strd	r2, [sp]
   11648:	mov	r2, #0
   1164c:	mov	r3, #-2147483648	; 0x80000000
   11650:	mov	r0, r5
   11654:	bl	15078 <__assert_fail@plt+0x41ec>
   11658:	mov	fp, r0
   1165c:	str	r1, [sp, #32]
   11660:	mov	sl, #1
   11664:	mov	r5, sl
   11668:	b	11420 <__assert_fail@plt+0x594>
   1166c:	add	r3, r3, #1
   11670:	str	r3, [r6]
   11674:	mov	sl, #2
   11678:	b	115c0 <__assert_fail@plt+0x734>
   1167c:	add	r3, r3, #1
   11680:	str	r3, [r6]
   11684:	mov	sl, #4
   11688:	b	115c0 <__assert_fail@plt+0x734>
   1168c:	add	r3, r3, #1
   11690:	str	r3, [r6]
   11694:	mov	sl, #5
   11698:	b	115c0 <__assert_fail@plt+0x734>
   1169c:	mov	r2, #5
   116a0:	movw	r1, #26404	; 0x6724
   116a4:	movt	r1, #1
   116a8:	mov	r0, #0
   116ac:	bl	10cc4 <dcgettext@plt>
   116b0:	mov	r2, r0
   116b4:	mov	r1, #0
   116b8:	mov	r0, r1
   116bc:	bl	10d3c <error@plt>
   116c0:	mov	r0, #1
   116c4:	bl	10f88 <__assert_fail@plt+0xfc>
   116c8:	mov	r2, #5
   116cc:	movw	r1, #26444	; 0x674c
   116d0:	movt	r1, #1
   116d4:	mov	r0, #0
   116d8:	bl	10cc4 <dcgettext@plt>
   116dc:	mov	r3, #0
   116e0:	str	r3, [sp, #16]
   116e4:	str	r0, [sp, #12]
   116e8:	movw	r3, #26460	; 0x675c
   116ec:	movt	r3, #1
   116f0:	str	r3, [sp, #8]
   116f4:	mvn	r2, #0
   116f8:	mvn	r3, #-2147483648	; 0x80000000
   116fc:	strd	r2, [sp]
   11700:	mov	r2, #0
   11704:	mov	r3, #-2147483648	; 0x80000000
   11708:	mov	r0, r5
   1170c:	bl	15078 <__assert_fail@plt+0x41ec>
   11710:	mov	fp, r0
   11714:	str	r1, [sp, #32]
   11718:	sub	r3, sl, #4
   1171c:	orr	r2, r0, r1
   11720:	cmp	r3, #1
   11724:	cmpls	r2, #0
   11728:	beq	11734 <__assert_fail@plt+0x8a8>
   1172c:	mov	r5, #1
   11730:	b	11420 <__assert_fail@plt+0x594>
   11734:	mov	r2, #5
   11738:	movw	r1, #26476	; 0x676c
   1173c:	movt	r1, #1
   11740:	mov	r0, #0
   11744:	bl	10cc4 <dcgettext@plt>
   11748:	mov	r2, r0
   1174c:	mov	r1, #0
   11750:	mov	r0, #1
   11754:	bl	10d3c <error@plt>
   11758:	movw	r3, #28984	; 0x7138
   1175c:	movt	r3, #2
   11760:	ldr	r6, [r3]
   11764:	add	r9, r4, r6, lsl #2
   11768:	sub	r3, r7, r6
   1176c:	movw	r2, #29008	; 0x7150
   11770:	movt	r2, #2
   11774:	ldr	r7, [r2, #4]
   11778:	cmp	r7, #0
   1177c:	moveq	r2, r5
   11780:	movne	r2, #1
   11784:	str	r2, [sp, #48]	; 0x30
   11788:	cmp	r2, #0
   1178c:	beq	11890 <__assert_fail@plt+0xa04>
   11790:	cmp	r7, #0
   11794:	beq	12044 <__assert_fail@plt+0x11b8>
   11798:	cmp	sl, #0
   1179c:	moveq	r2, r5
   117a0:	movne	r2, #0
   117a4:	cmp	r2, #0
   117a8:	bne	118ec <__assert_fail@plt+0xa60>
   117ac:	movw	r2, #29008	; 0x7150
   117b0:	movt	r2, #2
   117b4:	ldrb	r2, [r2, #1]
   117b8:	eor	r2, r2, #1
   117bc:	orrs	r2, r5, r2
   117c0:	beq	11948 <__assert_fail@plt+0xabc>
   117c4:	cmp	r3, #0
   117c8:	ble	119a4 <__assert_fail@plt+0xb18>
   117cc:	add	r2, sp, #80	; 0x50
   117d0:	mov	r1, r7
   117d4:	mov	r0, #3
   117d8:	bl	10e5c <__xstat64@plt>
   117dc:	cmp	r0, #0
   117e0:	bne	119d0 <__assert_fail@plt+0xb44>
   117e4:	ldr	r3, [sp, #96]	; 0x60
   117e8:	and	r3, r3, #53248	; 0xd000
   117ec:	cmp	r3, #32768	; 0x8000
   117f0:	bne	11a10 <__assert_fail@plt+0xb84>
   117f4:	ldrd	r2, [sp, #128]	; 0x80
   117f8:	strd	r2, [sp, #24]
   117fc:	cmp	r2, #0
   11800:	sbcs	r3, r3, #0
   11804:	blt	11a70 <__assert_fail@plt+0xbe4>
   11808:	cmp	r5, #0
   1180c:	beq	11ab8 <__assert_fail@plt+0xc2c>
   11810:	ldrd	r2, [sp, #24]
   11814:	strd	r2, [sp, #56]	; 0x38
   11818:	str	fp, [sp, #24]
   1181c:	ldr	r3, [sp, #32]
   11820:	str	r3, [sp, #28]
   11824:	ldrd	r2, [sp, #24]
   11828:	mov	fp, r2
   1182c:	str	r3, [sp, #32]
   11830:	movw	r3, #29008	; 0x7150
   11834:	movt	r3, #2
   11838:	ldrb	r1, [r3]
   1183c:	movw	r2, #2049	; 0x801
   11840:	movw	r3, #2113	; 0x841
   11844:	cmp	r1, #0
   11848:	moveq	r2, r3
   1184c:	str	r2, [sp, #36]	; 0x24
   11850:	ldr	r5, [r4, r6, lsl #2]
   11854:	cmp	r5, #0
   11858:	beq	11e90 <__assert_fail@plt+0x1004>
   1185c:	mov	r3, #0
   11860:	str	r3, [sp, #24]
   11864:	movw	r8, #29008	; 0x7150
   11868:	movt	r8, #2
   1186c:	movw	r3, #26772	; 0x6894
   11870:	movt	r3, #1
   11874:	str	r3, [sp, #68]	; 0x44
   11878:	movw	r3, #26936	; 0x6938
   1187c:	movt	r3, #1
   11880:	str	r3, [sp, #64]	; 0x40
   11884:	mov	r7, sl
   11888:	str	fp, [sp, #52]	; 0x34
   1188c:	b	11b1c <__assert_fail@plt+0xc90>
   11890:	mov	r2, #5
   11894:	movw	r1, #26520	; 0x6798
   11898:	movt	r1, #1
   1189c:	mov	r0, #0
   118a0:	bl	10cc4 <dcgettext@plt>
   118a4:	mov	r4, r0
   118a8:	movw	r1, #26556	; 0x67bc
   118ac:	movt	r1, #1
   118b0:	mov	r0, #0
   118b4:	bl	14470 <__assert_fail@plt+0x35e4>
   118b8:	mov	r5, r0
   118bc:	movw	r1, #26564	; 0x67c4
   118c0:	movt	r1, #1
   118c4:	mov	r0, #1
   118c8:	bl	14470 <__assert_fail@plt+0x35e4>
   118cc:	str	r0, [sp]
   118d0:	mov	r3, r5
   118d4:	mov	r2, r4
   118d8:	mov	r1, #0
   118dc:	mov	r0, r1
   118e0:	bl	10d3c <error@plt>
   118e4:	mov	r0, #1
   118e8:	bl	10f88 <__assert_fail@plt+0xfc>
   118ec:	mov	r2, #5
   118f0:	movw	r1, #26576	; 0x67d0
   118f4:	movt	r1, #1
   118f8:	mov	r0, #0
   118fc:	bl	10cc4 <dcgettext@plt>
   11900:	mov	r4, r0
   11904:	movw	r1, #26556	; 0x67bc
   11908:	movt	r1, #1
   1190c:	mov	r0, #0
   11910:	bl	14470 <__assert_fail@plt+0x35e4>
   11914:	mov	r5, r0
   11918:	movw	r1, #26564	; 0x67c4
   1191c:	movt	r1, #1
   11920:	mov	r0, #1
   11924:	bl	14470 <__assert_fail@plt+0x35e4>
   11928:	str	r0, [sp]
   1192c:	mov	r3, r5
   11930:	mov	r2, r4
   11934:	mov	r1, #0
   11938:	mov	r0, r1
   1193c:	bl	10d3c <error@plt>
   11940:	mov	r0, #1
   11944:	bl	10f88 <__assert_fail@plt+0xfc>
   11948:	mov	r2, #5
   1194c:	movw	r1, #26616	; 0x67f8
   11950:	movt	r1, #1
   11954:	mov	r0, #0
   11958:	bl	10cc4 <dcgettext@plt>
   1195c:	mov	r4, r0
   11960:	movw	r1, #26648	; 0x6818
   11964:	movt	r1, #1
   11968:	mov	r0, #0
   1196c:	bl	14470 <__assert_fail@plt+0x35e4>
   11970:	mov	r5, r0
   11974:	movw	r1, #26556	; 0x67bc
   11978:	movt	r1, #1
   1197c:	mov	r0, #1
   11980:	bl	14470 <__assert_fail@plt+0x35e4>
   11984:	str	r0, [sp]
   11988:	mov	r3, r5
   1198c:	mov	r2, r4
   11990:	mov	r1, #0
   11994:	mov	r0, r1
   11998:	bl	10d3c <error@plt>
   1199c:	mov	r0, #1
   119a0:	bl	10f88 <__assert_fail@plt+0xfc>
   119a4:	mov	r2, #5
   119a8:	movw	r1, #26660	; 0x6824
   119ac:	movt	r1, #1
   119b0:	mov	r0, #0
   119b4:	bl	10cc4 <dcgettext@plt>
   119b8:	mov	r2, r0
   119bc:	mov	r1, #0
   119c0:	mov	r0, r1
   119c4:	bl	10d3c <error@plt>
   119c8:	mov	r0, #1
   119cc:	bl	10f88 <__assert_fail@plt+0xfc>
   119d0:	bl	10dc0 <__errno_location@plt>
   119d4:	ldr	r4, [r0]
   119d8:	mov	r2, #5
   119dc:	movw	r1, #26684	; 0x683c
   119e0:	movt	r1, #1
   119e4:	mov	r0, #0
   119e8:	bl	10cc4 <dcgettext@plt>
   119ec:	mov	r5, r0
   119f0:	mov	r1, r7
   119f4:	mov	r0, #4
   119f8:	bl	1419c <__assert_fail@plt+0x3310>
   119fc:	mov	r3, r0
   11a00:	mov	r2, r5
   11a04:	mov	r1, r4
   11a08:	mov	r0, #1
   11a0c:	bl	10d3c <error@plt>
   11a10:	mov	r1, #0
   11a14:	mov	r0, r7
   11a18:	bl	10d48 <open64@plt>
   11a1c:	subs	r3, r0, #0
   11a20:	mov	r1, r3
   11a24:	blt	11a70 <__assert_fail@plt+0xbe4>
   11a28:	mov	r3, #2
   11a2c:	str	r3, [sp]
   11a30:	mov	r2, #0
   11a34:	mov	r3, #0
   11a38:	str	r1, [sp, #36]	; 0x24
   11a3c:	mov	r0, r1
   11a40:	bl	10d0c <lseek64@plt>
   11a44:	strd	r0, [sp, #24]
   11a48:	bl	10dc0 <__errno_location@plt>
   11a4c:	mov	r8, r0
   11a50:	ldr	r7, [r0]
   11a54:	ldr	r0, [sp, #36]	; 0x24
   11a58:	bl	10e80 <close@plt>
   11a5c:	ldrd	r2, [sp, #24]
   11a60:	cmp	r2, #0
   11a64:	sbcs	r3, r3, #0
   11a68:	bge	11808 <__assert_fail@plt+0x97c>
   11a6c:	str	r7, [r8]
   11a70:	bl	10dc0 <__errno_location@plt>
   11a74:	ldr	r4, [r0]
   11a78:	mov	r2, #5
   11a7c:	movw	r1, #26700	; 0x684c
   11a80:	movt	r1, #1
   11a84:	mov	r0, #0
   11a88:	bl	10cc4 <dcgettext@plt>
   11a8c:	mov	r5, r0
   11a90:	movw	r3, #29008	; 0x7150
   11a94:	movt	r3, #2
   11a98:	ldr	r1, [r3, #4]
   11a9c:	mov	r0, #4
   11aa0:	bl	1419c <__assert_fail@plt+0x3310>
   11aa4:	mov	r3, r0
   11aa8:	mov	r2, r5
   11aac:	mov	r1, r4
   11ab0:	mov	r0, #1
   11ab4:	bl	10d3c <error@plt>
   11ab8:	mvn	r2, #0
   11abc:	mvn	r3, #0
   11ac0:	strd	r2, [sp, #56]	; 0x38
   11ac4:	b	11824 <__assert_fail@plt+0x998>
   11ac8:	bl	10dc0 <__errno_location@plt>
   11acc:	ldr	r4, [r0]
   11ad0:	mov	r2, #5
   11ad4:	movw	r1, #26728	; 0x6868
   11ad8:	movt	r1, #1
   11adc:	mov	r0, #0
   11ae0:	bl	10cc4 <dcgettext@plt>
   11ae4:	mov	r6, r0
   11ae8:	mov	r1, r5
   11aec:	mov	r0, #4
   11af0:	bl	1419c <__assert_fail@plt+0x3310>
   11af4:	mov	r3, r0
   11af8:	mov	r2, r6
   11afc:	mov	r1, r4
   11b00:	mov	r0, #0
   11b04:	bl	10d3c <error@plt>
   11b08:	ldr	r3, [sp, #48]	; 0x30
   11b0c:	str	r3, [sp, #24]
   11b10:	ldr	r5, [r9, #4]!
   11b14:	cmp	r5, #0
   11b18:	beq	11e98 <__assert_fail@plt+0x100c>
   11b1c:	movw	r2, #438	; 0x1b6
   11b20:	ldr	r1, [sp, #36]	; 0x24
   11b24:	mov	r0, r5
   11b28:	bl	10d48 <open64@plt>
   11b2c:	subs	r4, r0, #0
   11b30:	bge	11b54 <__assert_fail@plt+0xcc8>
   11b34:	ldrb	r3, [r8]
   11b38:	cmp	r3, #0
   11b3c:	beq	11ac8 <__assert_fail@plt+0xc3c>
   11b40:	bl	10dc0 <__errno_location@plt>
   11b44:	ldr	r3, [r0]
   11b48:	cmp	r3, #2
   11b4c:	bne	11ac8 <__assert_fail@plt+0xc3c>
   11b50:	b	11b10 <__assert_fail@plt+0xc84>
   11b54:	ldrb	r3, [r8, #1]
   11b58:	cmp	r3, #0
   11b5c:	bne	11eb8 <__assert_fail@plt+0x102c>
   11b60:	ldr	r3, [sp, #60]	; 0x3c
   11b64:	cmp	r7, #0
   11b68:	lsrne	r3, r3, #31
   11b6c:	moveq	r3, #0
   11b70:	cmp	r3, #0
   11b74:	bne	11f78 <__assert_fail@plt+0x10ec>
   11b78:	ldr	sl, [sp, #52]	; 0x34
   11b7c:	ldr	fp, [sp, #32]
   11b80:	b	11f1c <__assert_fail@plt+0x1090>
   11b84:	ldr	lr, [sp, #52]	; 0x34
   11b88:	str	lr, [sp, #72]	; 0x48
   11b8c:	ldr	ip, [sp, #32]
   11b90:	str	ip, [sp, #76]	; 0x4c
   11b94:	mov	r2, r6
   11b98:	umull	sl, fp, lr, r6
   11b9c:	strd	sl, [sp, #40]	; 0x28
   11ba0:	umull	sl, fp, r6, ip
   11ba4:	cmp	ip, #0
   11ba8:	bge	11bb8 <__assert_fail@plt+0xd2c>
   11bac:	mov	ip, #0
   11bb0:	subs	sl, sl, ip
   11bb4:	sbc	fp, fp, r6
   11bb8:	cmp	r2, #0
   11bbc:	bge	11bd0 <__assert_fail@plt+0xd44>
   11bc0:	ldr	r2, [sp, #72]	; 0x48
   11bc4:	subs	sl, sl, r2
   11bc8:	ldr	r2, [sp, #76]	; 0x4c
   11bcc:	sbc	fp, fp, r2
   11bd0:	ldr	r2, [sp, #44]	; 0x2c
   11bd4:	mov	ip, #0
   11bd8:	adds	r2, sl, r2
   11bdc:	adc	ip, fp, ip
   11be0:	cmp	ip, r2, asr #31
   11be4:	bne	11bf0 <__assert_fail@plt+0xd64>
   11be8:	ldr	r0, [sp, #40]	; 0x28
   11bec:	b	11f0c <__assert_fail@plt+0x1080>
   11bf0:	ldr	r3, [sp, #52]	; 0x34
   11bf4:	mul	r2, r3, r1
   11bf8:	ldr	ip, [sp, #32]
   11bfc:	mla	r2, ip, r0, r2
   11c00:	umull	r0, r1, r3, r0
   11c04:	add	r2, r2, r1
   11c08:	mov	r3, #1
   11c0c:	b	11f0c <__assert_fail@plt+0x1080>
   11c10:	mov	r2, #5
   11c14:	ldr	r1, [sp, #68]	; 0x44
   11c18:	mov	r0, #0
   11c1c:	bl	10cc4 <dcgettext@plt>
   11c20:	mov	sl, r0
   11c24:	mov	r1, r5
   11c28:	mov	r0, #4
   11c2c:	bl	1419c <__assert_fail@plt+0x3310>
   11c30:	str	r0, [sp, #12]
   11c34:	str	r6, [sp, #8]
   11c38:	ldr	r3, [sp, #52]	; 0x34
   11c3c:	str	r3, [sp]
   11c40:	ldr	r3, [sp, #32]
   11c44:	str	r3, [sp, #4]
   11c48:	mov	r2, sl
   11c4c:	mov	r1, #0
   11c50:	mov	r0, r1
   11c54:	bl	10d3c <error@plt>
   11c58:	mov	r6, #0
   11c5c:	b	11f54 <__assert_fail@plt+0x10c8>
   11c60:	ldrd	r2, [sp, #56]	; 0x38
   11c64:	cmp	r2, #0
   11c68:	sbcs	r3, r3, #0
   11c6c:	ldrdge	r2, [sp, #56]	; 0x38
   11c70:	strdge	r2, [sp, #40]	; 0x28
   11c74:	blt	11fe0 <__assert_fail@plt+0x1154>
   11c78:	cmp	r7, #2
   11c7c:	beq	11d68 <__assert_fail@plt+0xedc>
   11c80:	cmp	r7, #3
   11c84:	beq	11d80 <__assert_fail@plt+0xef4>
   11c88:	cmp	r7, #4
   11c8c:	beq	11d98 <__assert_fail@plt+0xf0c>
   11c90:	cmp	r7, #5
   11c94:	beq	11db8 <__assert_fail@plt+0xf2c>
   11c98:	ldrd	r0, [sp, #40]	; 0x28
   11c9c:	adds	r2, r0, sl
   11ca0:	adcs	r3, r1, fp
   11ca4:	mov	sl, r2
   11ca8:	mov	fp, r3
   11cac:	bvc	11f24 <__assert_fail@plt+0x1098>
   11cb0:	mov	r2, #5
   11cb4:	movw	r1, #26864	; 0x68f0
   11cb8:	movt	r1, #1
   11cbc:	mov	r0, #0
   11cc0:	bl	10cc4 <dcgettext@plt>
   11cc4:	mov	r6, r0
   11cc8:	mov	r1, r5
   11ccc:	mov	r0, #4
   11cd0:	bl	1419c <__assert_fail@plt+0x3310>
   11cd4:	mov	r3, r0
   11cd8:	mov	r2, r6
   11cdc:	mov	r1, #0
   11ce0:	mov	r0, r1
   11ce4:	bl	10d3c <error@plt>
   11ce8:	mov	r6, #0
   11cec:	b	11f54 <__assert_fail@plt+0x10c8>
   11cf0:	mov	r3, #2
   11cf4:	str	r3, [sp]
   11cf8:	mov	r2, #0
   11cfc:	mov	r3, #0
   11d00:	mov	r0, r4
   11d04:	bl	10d0c <lseek64@plt>
   11d08:	mov	r2, r0
   11d0c:	mov	r3, r1
   11d10:	strd	r2, [sp, #40]	; 0x28
   11d14:	cmp	r0, #0
   11d18:	sbcs	r3, r3, #0
   11d1c:	bge	11c78 <__assert_fail@plt+0xdec>
   11d20:	bl	10dc0 <__errno_location@plt>
   11d24:	ldr	r6, [r0]
   11d28:	mov	r2, #5
   11d2c:	movw	r1, #26700	; 0x684c
   11d30:	movt	r1, #1
   11d34:	mov	r0, #0
   11d38:	bl	10cc4 <dcgettext@plt>
   11d3c:	mov	sl, r0
   11d40:	mov	r1, r5
   11d44:	mov	r0, #4
   11d48:	bl	1419c <__assert_fail@plt+0x3310>
   11d4c:	mov	r3, r0
   11d50:	mov	r2, sl
   11d54:	mov	r1, r6
   11d58:	mov	r0, #0
   11d5c:	bl	10d3c <error@plt>
   11d60:	mov	r6, #0
   11d64:	b	11f54 <__assert_fail@plt+0x10c8>
   11d68:	ldrd	r2, [sp, #40]	; 0x28
   11d6c:	cmp	sl, r2
   11d70:	sbcs	r1, fp, r3
   11d74:	movlt	sl, r2
   11d78:	movlt	fp, r3
   11d7c:	b	11f24 <__assert_fail@plt+0x1098>
   11d80:	ldrd	r2, [sp, #40]	; 0x28
   11d84:	cmp	r2, sl
   11d88:	sbcs	r1, r3, fp
   11d8c:	movlt	sl, r2
   11d90:	movlt	fp, r3
   11d94:	b	11f24 <__assert_fail@plt+0x1098>
   11d98:	mov	r2, sl
   11d9c:	mov	r3, fp
   11da0:	ldrd	r0, [sp, #40]	; 0x28
   11da4:	bl	15e40 <__assert_fail@plt+0x4fb4>
   11da8:	ldrd	r0, [sp, #40]	; 0x28
   11dac:	subs	sl, r0, r2
   11db0:	sbc	fp, r1, r3
   11db4:	b	11f24 <__assert_fail@plt+0x1098>
   11db8:	mov	r2, sl
   11dbc:	mov	r3, fp
   11dc0:	ldrd	r0, [sp, #40]	; 0x28
   11dc4:	bl	15e40 <__assert_fail@plt+0x4fb4>
   11dc8:	orrs	r1, r2, r3
   11dcc:	beq	11ddc <__assert_fail@plt+0xf50>
   11dd0:	subs	sl, sl, r2
   11dd4:	sbc	fp, fp, r3
   11dd8:	b	11c98 <__assert_fail@plt+0xe0c>
   11ddc:	ldrd	sl, [sp, #40]	; 0x28
   11de0:	b	11f24 <__assert_fail@plt+0x1098>
   11de4:	mov	r3, #0
   11de8:	str	r3, [sp, #40]	; 0x28
   11dec:	mov	r6, r3
   11df0:	b	11f38 <__assert_fail@plt+0x10ac>
   11df4:	bl	10dc0 <__errno_location@plt>
   11df8:	ldr	sl, [r0]
   11dfc:	mov	r2, #5
   11e00:	movw	r1, #26900	; 0x6914
   11e04:	movt	r1, #1
   11e08:	mov	r0, #0
   11e0c:	bl	10cc4 <dcgettext@plt>
   11e10:	mov	fp, r0
   11e14:	mov	r1, r5
   11e18:	mov	r0, #4
   11e1c:	bl	1419c <__assert_fail@plt+0x3310>
   11e20:	ldr	r3, [sp, #40]	; 0x28
   11e24:	str	r3, [sp]
   11e28:	str	r6, [sp, #4]
   11e2c:	mov	r3, r0
   11e30:	mov	r2, fp
   11e34:	mov	r1, sl
   11e38:	mov	r0, #0
   11e3c:	bl	10d3c <error@plt>
   11e40:	mov	r6, #0
   11e44:	b	11f54 <__assert_fail@plt+0x10c8>
   11e48:	bl	10dc0 <__errno_location@plt>
   11e4c:	ldr	r4, [r0]
   11e50:	mov	r2, #5
   11e54:	ldr	r1, [sp, #64]	; 0x40
   11e58:	mov	r0, #0
   11e5c:	bl	10cc4 <dcgettext@plt>
   11e60:	mov	r6, r0
   11e64:	mov	r1, r5
   11e68:	mov	r0, #4
   11e6c:	bl	1419c <__assert_fail@plt+0x3310>
   11e70:	mov	r3, r0
   11e74:	mov	r2, r6
   11e78:	mov	r1, r4
   11e7c:	mov	r0, #0
   11e80:	bl	10d3c <error@plt>
   11e84:	ldr	r3, [sp, #48]	; 0x30
   11e88:	str	r3, [sp, #24]
   11e8c:	b	11b10 <__assert_fail@plt+0xc84>
   11e90:	mov	r3, #0
   11e94:	str	r3, [sp, #24]
   11e98:	ldr	r0, [sp, #24]
   11e9c:	add	sp, sp, #188	; 0xbc
   11ea0:	ldrd	r4, [sp]
   11ea4:	ldrd	r6, [sp, #8]
   11ea8:	ldrd	r8, [sp, #16]
   11eac:	ldrd	sl, [sp, #24]
   11eb0:	add	sp, sp, #32
   11eb4:	pop	{pc}		; (ldr pc, [sp], #4)
   11eb8:	add	r2, sp, #80	; 0x50
   11ebc:	mov	r1, r4
   11ec0:	mov	r0, #3
   11ec4:	bl	10cf4 <__fxstat64@plt>
   11ec8:	cmp	r0, #0
   11ecc:	bne	11f90 <__assert_fail@plt+0x1104>
   11ed0:	ldr	r6, [sp, #136]	; 0x88
   11ed4:	sub	r3, r6, #1
   11ed8:	cmp	r3, #536870912	; 0x20000000
   11edc:	movcs	r6, #512	; 0x200
   11ee0:	mov	r0, r6
   11ee4:	asr	r1, r6, #31
   11ee8:	mov	r3, #0
   11eec:	ldr	r2, [sp, #32]
   11ef0:	ldr	ip, [sp, #52]	; 0x34
   11ef4:	cmp	r2, ip, asr #31
   11ef8:	bne	11b84 <__assert_fail@plt+0xcf8>
   11efc:	ldr	r2, [sp, #52]	; 0x34
   11f00:	smull	sl, fp, r2, r6
   11f04:	mov	r0, sl
   11f08:	mov	r2, fp
   11f0c:	mov	sl, r0
   11f10:	mov	fp, r2
   11f14:	cmp	r3, #0
   11f18:	bne	11c10 <__assert_fail@plt+0xd84>
   11f1c:	cmp	r7, #0
   11f20:	bne	11c60 <__assert_fail@plt+0xdd4>
   11f24:	str	sl, [sp, #40]	; 0x28
   11f28:	mov	r6, fp
   11f2c:	cmp	sl, #0
   11f30:	sbcs	r3, fp, #0
   11f34:	blt	11de4 <__assert_fail@plt+0xf58>
   11f38:	ldr	r2, [sp, #40]	; 0x28
   11f3c:	mov	r3, r6
   11f40:	mov	r0, r4
   11f44:	bl	10ca0 <ftruncate64@plt>
   11f48:	cmp	r0, #0
   11f4c:	ldreq	r6, [sp, #48]	; 0x30
   11f50:	bne	11df4 <__assert_fail@plt+0xf68>
   11f54:	mov	r0, r4
   11f58:	bl	10e80 <close@plt>
   11f5c:	cmp	r0, #0
   11f60:	bne	11e48 <__assert_fail@plt+0xfbc>
   11f64:	eor	r6, r6, #1
   11f68:	ldr	r3, [sp, #24]
   11f6c:	orr	r3, r3, r6
   11f70:	str	r3, [sp, #24]
   11f74:	b	11b10 <__assert_fail@plt+0xc84>
   11f78:	add	r2, sp, #80	; 0x50
   11f7c:	mov	r1, r4
   11f80:	mov	r0, #3
   11f84:	bl	10cf4 <__fxstat64@plt>
   11f88:	cmp	r0, #0
   11f8c:	beq	11fd8 <__assert_fail@plt+0x114c>
   11f90:	bl	10dc0 <__errno_location@plt>
   11f94:	ldr	r6, [r0]
   11f98:	mov	r2, #5
   11f9c:	movw	r1, #26756	; 0x6884
   11fa0:	movt	r1, #1
   11fa4:	mov	r0, #0
   11fa8:	bl	10cc4 <dcgettext@plt>
   11fac:	mov	sl, r0
   11fb0:	mov	r1, r5
   11fb4:	mov	r0, #4
   11fb8:	bl	1419c <__assert_fail@plt+0x3310>
   11fbc:	mov	r3, r0
   11fc0:	mov	r2, sl
   11fc4:	mov	r1, r6
   11fc8:	mov	r0, #0
   11fcc:	bl	10d3c <error@plt>
   11fd0:	mov	r6, #0
   11fd4:	b	11f54 <__assert_fail@plt+0x10c8>
   11fd8:	ldr	sl, [sp, #52]	; 0x34
   11fdc:	ldr	fp, [sp, #32]
   11fe0:	ldr	r3, [sp, #96]	; 0x60
   11fe4:	and	r3, r3, #53248	; 0xd000
   11fe8:	cmp	r3, #32768	; 0x8000
   11fec:	bne	11cf0 <__assert_fail@plt+0xe64>
   11ff0:	ldrd	r2, [sp, #128]	; 0x80
   11ff4:	strd	r2, [sp, #40]	; 0x28
   11ff8:	cmp	r2, #0
   11ffc:	sbcs	r3, r3, #0
   12000:	bge	11c78 <__assert_fail@plt+0xdec>
   12004:	mov	r2, #5
   12008:	movw	r1, #26820	; 0x68c4
   1200c:	movt	r1, #1
   12010:	mov	r0, #0
   12014:	bl	10cc4 <dcgettext@plt>
   12018:	mov	r6, r0
   1201c:	mov	r1, r5
   12020:	mov	r0, #4
   12024:	bl	1419c <__assert_fail@plt+0x3310>
   12028:	mov	r3, r0
   1202c:	mov	r2, r6
   12030:	mov	r1, #0
   12034:	mov	r0, r1
   12038:	bl	10d3c <error@plt>
   1203c:	mov	r6, #0
   12040:	b	11f54 <__assert_fail@plt+0x10c8>
   12044:	cmp	r3, #0
   12048:	ble	119a4 <__assert_fail@plt+0xb18>
   1204c:	mvn	r2, #0
   12050:	mvn	r3, #0
   12054:	strd	r2, [sp, #56]	; 0x38
   12058:	b	11830 <__assert_fail@plt+0x9a4>
   1205c:	andeq	r6, r1, ip, lsl #2
   12060:	movw	r3, #29016	; 0x7158
   12064:	movt	r3, #2
   12068:	str	r0, [r3]
   1206c:	bx	lr
   12070:	movw	r3, #29016	; 0x7158
   12074:	movt	r3, #2
   12078:	strb	r0, [r3, #4]
   1207c:	bx	lr
   12080:	strd	r4, [sp, #-16]!
   12084:	str	r6, [sp, #8]
   12088:	str	lr, [sp, #12]
   1208c:	sub	sp, sp, #8
   12090:	movw	r3, #28996	; 0x7144
   12094:	movt	r3, #2
   12098:	ldr	r0, [r3]
   1209c:	bl	1595c <__assert_fail@plt+0x4ad0>
   120a0:	cmp	r0, #0
   120a4:	beq	120cc <__assert_fail@plt+0x1240>
   120a8:	movw	r3, #29016	; 0x7158
   120ac:	movt	r3, #2
   120b0:	ldrb	r3, [r3, #4]
   120b4:	cmp	r3, #0
   120b8:	beq	120f8 <__assert_fail@plt+0x126c>
   120bc:	bl	10dc0 <__errno_location@plt>
   120c0:	ldr	r3, [r0]
   120c4:	cmp	r3, #32
   120c8:	bne	120f8 <__assert_fail@plt+0x126c>
   120cc:	movw	r3, #28992	; 0x7140
   120d0:	movt	r3, #2
   120d4:	ldr	r0, [r3]
   120d8:	bl	1595c <__assert_fail@plt+0x4ad0>
   120dc:	cmp	r0, #0
   120e0:	bne	12180 <__assert_fail@plt+0x12f4>
   120e4:	add	sp, sp, #8
   120e8:	ldrd	r4, [sp]
   120ec:	ldr	r6, [sp, #8]
   120f0:	add	sp, sp, #12
   120f4:	pop	{pc}		; (ldr pc, [sp], #4)
   120f8:	mov	r2, #5
   120fc:	movw	r1, #27140	; 0x6a04
   12100:	movt	r1, #1
   12104:	mov	r0, #0
   12108:	bl	10cc4 <dcgettext@plt>
   1210c:	mov	r4, r0
   12110:	movw	r3, #29016	; 0x7158
   12114:	movt	r3, #2
   12118:	ldr	r5, [r3]
   1211c:	cmp	r5, #0
   12120:	beq	12160 <__assert_fail@plt+0x12d4>
   12124:	bl	10dc0 <__errno_location@plt>
   12128:	ldr	r6, [r0]
   1212c:	mov	r0, r5
   12130:	bl	14288 <__assert_fail@plt+0x33fc>
   12134:	str	r4, [sp]
   12138:	mov	r3, r0
   1213c:	movw	r2, #27152	; 0x6a10
   12140:	movt	r2, #1
   12144:	mov	r1, r6
   12148:	mov	r0, #0
   1214c:	bl	10d3c <error@plt>
   12150:	movw	r3, #28904	; 0x70e8
   12154:	movt	r3, #2
   12158:	ldr	r0, [r3]
   1215c:	bl	10c7c <_exit@plt>
   12160:	bl	10dc0 <__errno_location@plt>
   12164:	mov	r3, r4
   12168:	movw	r2, #27156	; 0x6a14
   1216c:	movt	r2, #1
   12170:	ldr	r1, [r0]
   12174:	mov	r0, #0
   12178:	bl	10d3c <error@plt>
   1217c:	b	12150 <__assert_fail@plt+0x12c4>
   12180:	movw	r3, #28904	; 0x70e8
   12184:	movt	r3, #2
   12188:	ldr	r0, [r3]
   1218c:	bl	10c7c <_exit@plt>
   12190:	strd	r4, [sp, #-16]!
   12194:	str	r6, [sp, #8]
   12198:	str	lr, [sp, #12]
   1219c:	subs	r4, r0, #0
   121a0:	beq	1223c <__assert_fail@plt+0x13b0>
   121a4:	mov	r1, #47	; 0x2f
   121a8:	mov	r0, r4
   121ac:	bl	10e2c <strrchr@plt>
   121b0:	subs	r5, r0, #0
   121b4:	beq	12214 <__assert_fail@plt+0x1388>
   121b8:	add	r6, r5, #1
   121bc:	sub	r3, r6, r4
   121c0:	cmp	r3, #6
   121c4:	ble	12214 <__assert_fail@plt+0x1388>
   121c8:	mov	r2, #7
   121cc:	movw	r1, #27216	; 0x6a50
   121d0:	movt	r1, #1
   121d4:	sub	r0, r5, #6
   121d8:	bl	10e68 <strncmp@plt>
   121dc:	cmp	r0, #0
   121e0:	bne	12214 <__assert_fail@plt+0x1388>
   121e4:	mov	r2, #3
   121e8:	movw	r1, #27224	; 0x6a58
   121ec:	movt	r1, #1
   121f0:	mov	r0, r6
   121f4:	bl	10e68 <strncmp@plt>
   121f8:	cmp	r0, #0
   121fc:	movne	r4, r6
   12200:	bne	12214 <__assert_fail@plt+0x1388>
   12204:	add	r4, r5, #4
   12208:	movw	r3, #28976	; 0x7130
   1220c:	movt	r3, #2
   12210:	str	r4, [r3]
   12214:	movw	r3, #29024	; 0x7160
   12218:	movt	r3, #2
   1221c:	str	r4, [r3]
   12220:	movw	r3, #28980	; 0x7134
   12224:	movt	r3, #2
   12228:	str	r4, [r3]
   1222c:	ldrd	r4, [sp]
   12230:	ldr	r6, [sp, #8]
   12234:	add	sp, sp, #12
   12238:	pop	{pc}		; (ldr pc, [sp], #4)
   1223c:	movw	r3, #28992	; 0x7140
   12240:	movt	r3, #2
   12244:	ldr	r3, [r3]
   12248:	mov	r2, #55	; 0x37
   1224c:	mov	r1, #1
   12250:	movw	r0, #27160	; 0x6a18
   12254:	movt	r0, #1
   12258:	bl	10d00 <fwrite@plt>
   1225c:	bl	10e74 <abort@plt>
   12260:	mov	r2, #0
   12264:	mov	r3, #0
   12268:	strd	r2, [r0]
   1226c:	strd	r2, [r0, #8]
   12270:	strd	r2, [r0, #16]
   12274:	strd	r2, [r0, #24]
   12278:	strd	r2, [r0, #32]
   1227c:	strd	r2, [r0, #40]	; 0x28
   12280:	cmp	r1, #10
   12284:	beq	12290 <__assert_fail@plt+0x1404>
   12288:	str	r1, [r0]
   1228c:	bx	lr
   12290:	str	r4, [sp, #-8]!
   12294:	str	lr, [sp, #4]
   12298:	bl	10e74 <abort@plt>
   1229c:	strd	r4, [sp, #-16]!
   122a0:	str	r6, [sp, #8]
   122a4:	str	lr, [sp, #12]
   122a8:	mov	r5, r0
   122ac:	mov	r6, r1
   122b0:	mov	r2, #5
   122b4:	mov	r1, r0
   122b8:	mov	r0, #0
   122bc:	bl	10cc4 <dcgettext@plt>
   122c0:	mov	r4, r0
   122c4:	cmp	r5, r0
   122c8:	beq	122e0 <__assert_fail@plt+0x1454>
   122cc:	mov	r0, r4
   122d0:	ldrd	r4, [sp]
   122d4:	ldr	r6, [sp, #8]
   122d8:	add	sp, sp, #12
   122dc:	pop	{pc}		; (ldr pc, [sp], #4)
   122e0:	bl	15c34 <__assert_fail@plt+0x4da8>
   122e4:	ldrb	r3, [r0]
   122e8:	bic	r3, r3, #32
   122ec:	cmp	r3, #85	; 0x55
   122f0:	bne	12374 <__assert_fail@plt+0x14e8>
   122f4:	ldrb	r3, [r0, #1]
   122f8:	bic	r3, r3, #32
   122fc:	cmp	r3, #84	; 0x54
   12300:	bne	12338 <__assert_fail@plt+0x14ac>
   12304:	ldrb	r3, [r0, #2]
   12308:	bic	r3, r3, #32
   1230c:	cmp	r3, #70	; 0x46
   12310:	bne	12338 <__assert_fail@plt+0x14ac>
   12314:	ldrb	r3, [r0, #3]
   12318:	cmp	r3, #45	; 0x2d
   1231c:	bne	12338 <__assert_fail@plt+0x14ac>
   12320:	ldrb	r3, [r0, #4]
   12324:	cmp	r3, #56	; 0x38
   12328:	bne	12338 <__assert_fail@plt+0x14ac>
   1232c:	ldrb	r3, [r0, #5]
   12330:	cmp	r3, #0
   12334:	beq	12354 <__assert_fail@plt+0x14c8>
   12338:	movw	r4, #27312	; 0x6ab0
   1233c:	movt	r4, #1
   12340:	movw	r3, #27332	; 0x6ac4
   12344:	movt	r3, #1
   12348:	cmp	r6, #9
   1234c:	movne	r4, r3
   12350:	b	122cc <__assert_fail@plt+0x1440>
   12354:	ldrb	r2, [r4]
   12358:	movw	r4, #27328	; 0x6ac0
   1235c:	movt	r4, #1
   12360:	movw	r3, #27316	; 0x6ab4
   12364:	movt	r3, #1
   12368:	cmp	r2, #96	; 0x60
   1236c:	movne	r4, r3
   12370:	b	122cc <__assert_fail@plt+0x1440>
   12374:	cmp	r3, #71	; 0x47
   12378:	bne	12338 <__assert_fail@plt+0x14ac>
   1237c:	ldrb	r3, [r0, #1]
   12380:	bic	r3, r3, #32
   12384:	cmp	r3, #66	; 0x42
   12388:	bne	12338 <__assert_fail@plt+0x14ac>
   1238c:	ldrb	r3, [r0, #2]
   12390:	cmp	r3, #49	; 0x31
   12394:	bne	12338 <__assert_fail@plt+0x14ac>
   12398:	ldrb	r3, [r0, #3]
   1239c:	cmp	r3, #56	; 0x38
   123a0:	bne	12338 <__assert_fail@plt+0x14ac>
   123a4:	ldrb	r3, [r0, #4]
   123a8:	cmp	r3, #48	; 0x30
   123ac:	bne	12338 <__assert_fail@plt+0x14ac>
   123b0:	ldrb	r3, [r0, #5]
   123b4:	cmp	r3, #51	; 0x33
   123b8:	bne	12338 <__assert_fail@plt+0x14ac>
   123bc:	ldrb	r3, [r0, #6]
   123c0:	cmp	r3, #48	; 0x30
   123c4:	bne	12338 <__assert_fail@plt+0x14ac>
   123c8:	ldrb	r3, [r0, #7]
   123cc:	cmp	r3, #0
   123d0:	bne	12338 <__assert_fail@plt+0x14ac>
   123d4:	ldrb	r2, [r4]
   123d8:	movw	r4, #27324	; 0x6abc
   123dc:	movt	r4, #1
   123e0:	movw	r3, #27320	; 0x6ab8
   123e4:	movt	r3, #1
   123e8:	cmp	r2, #96	; 0x60
   123ec:	movne	r4, r3
   123f0:	b	122cc <__assert_fail@plt+0x1440>
   123f4:	strd	r4, [sp, #-36]!	; 0xffffffdc
   123f8:	strd	r6, [sp, #8]
   123fc:	strd	r8, [sp, #16]
   12400:	strd	sl, [sp, #24]
   12404:	str	lr, [sp, #32]
   12408:	sub	sp, sp, #116	; 0x74
   1240c:	str	r0, [sp, #64]	; 0x40
   12410:	mov	r8, r1
   12414:	str	r2, [sp, #48]	; 0x30
   12418:	str	r3, [sp, #24]
   1241c:	ldr	r7, [sp, #152]	; 0x98
   12420:	bl	10d18 <__ctype_get_mb_cur_max@plt>
   12424:	str	r0, [sp, #76]	; 0x4c
   12428:	ldr	r3, [sp, #156]	; 0x9c
   1242c:	ubfx	r3, r3, #1, #1
   12430:	str	r3, [sp, #32]
   12434:	mov	r3, #1
   12438:	str	r3, [sp, #40]	; 0x28
   1243c:	mov	r3, #0
   12440:	str	r3, [sp, #68]	; 0x44
   12444:	str	r3, [sp, #36]	; 0x24
   12448:	str	r3, [sp, #28]
   1244c:	str	r3, [sp, #52]	; 0x34
   12450:	str	r3, [sp, #60]	; 0x3c
   12454:	str	r3, [sp, #72]	; 0x48
   12458:	movw	r3, #27336	; 0x6ac8
   1245c:	movt	r3, #1
   12460:	str	r3, [sp, #80]	; 0x50
   12464:	mov	r9, r8
   12468:	mov	sl, r7
   1246c:	cmp	sl, #10
   12470:	ldrls	pc, [pc, sl, lsl #2]
   12474:	b	12638 <__assert_fail@plt+0x17ac>
   12478:	ldrdeq	r2, [r1], -r8
   1247c:	andeq	r2, r1, ip, lsr #9
   12480:	andeq	r2, r1, r0, lsl r6
   12484:	andeq	r2, r1, r4, lsr #9
   12488:	andeq	r2, r1, r4, asr #11
   1248c:	andeq	r2, r1, r8, ror #9
   12490:			; <UNDEFINED> instruction: 0x000138b4
   12494:	andeq	r2, r1, ip, lsr r6
   12498:	andeq	r2, r1, r4, lsr #10
   1249c:	andeq	r2, r1, r4, lsr #10
   124a0:	andeq	r2, r1, r4, lsr #10
   124a4:	mov	r3, #1
   124a8:	str	r3, [sp, #28]
   124ac:	mov	r3, #1
   124b0:	str	r3, [sp, #32]
   124b4:	str	r3, [sp, #52]	; 0x34
   124b8:	movw	r3, #27332	; 0x6ac4
   124bc:	movt	r3, #1
   124c0:	str	r3, [sp, #60]	; 0x3c
   124c4:	mov	fp, #0
   124c8:	mov	sl, #2
   124cc:	mov	r6, #0
   124d0:	ldr	r8, [sp, #64]	; 0x40
   124d4:	b	12d4c <__assert_fail@plt+0x1ec0>
   124d8:	mov	fp, sl
   124dc:	mov	r3, #0
   124e0:	str	r3, [sp, #32]
   124e4:	b	124cc <__assert_fail@plt+0x1640>
   124e8:	ldr	r3, [sp, #32]
   124ec:	cmp	r3, #0
   124f0:	bne	12650 <__assert_fail@plt+0x17c4>
   124f4:	cmp	r9, #0
   124f8:	beq	12674 <__assert_fail@plt+0x17e8>
   124fc:	mov	r3, #34	; 0x22
   12500:	ldr	r2, [sp, #64]	; 0x40
   12504:	strb	r3, [r2]
   12508:	mov	fp, #1
   1250c:	str	fp, [sp, #28]
   12510:	str	fp, [sp, #52]	; 0x34
   12514:	movw	r3, #27312	; 0x6ab0
   12518:	movt	r3, #1
   1251c:	str	r3, [sp, #60]	; 0x3c
   12520:	b	124cc <__assert_fail@plt+0x1640>
   12524:	cmp	sl, #10
   12528:	bne	1255c <__assert_fail@plt+0x16d0>
   1252c:	ldr	r3, [sp, #32]
   12530:	cmp	r3, #0
   12534:	movne	fp, #0
   12538:	beq	12584 <__assert_fail@plt+0x16f8>
   1253c:	ldr	r0, [sp, #168]	; 0xa8
   12540:	bl	10da8 <strlen@plt>
   12544:	str	r0, [sp, #52]	; 0x34
   12548:	ldr	r3, [sp, #168]	; 0xa8
   1254c:	str	r3, [sp, #60]	; 0x3c
   12550:	mov	r3, #1
   12554:	str	r3, [sp, #28]
   12558:	b	124cc <__assert_fail@plt+0x1640>
   1255c:	mov	r1, sl
   12560:	ldr	r0, [sp, #80]	; 0x50
   12564:	bl	1229c <__assert_fail@plt+0x1410>
   12568:	str	r0, [sp, #164]	; 0xa4
   1256c:	mov	r1, sl
   12570:	movw	r0, #27332	; 0x6ac4
   12574:	movt	r0, #1
   12578:	bl	1229c <__assert_fail@plt+0x1410>
   1257c:	str	r0, [sp, #168]	; 0xa8
   12580:	b	1252c <__assert_fail@plt+0x16a0>
   12584:	ldr	r3, [sp, #164]	; 0xa4
   12588:	ldrb	r3, [r3]
   1258c:	cmp	r3, #0
   12590:	beq	125bc <__assert_fail@plt+0x1730>
   12594:	ldr	r2, [sp, #164]	; 0xa4
   12598:	mov	fp, #0
   1259c:	ldr	r1, [sp, #64]	; 0x40
   125a0:	cmp	r9, fp
   125a4:	strbhi	r3, [r1, fp]
   125a8:	add	fp, fp, #1
   125ac:	ldrb	r3, [r2, #1]!
   125b0:	cmp	r3, #0
   125b4:	bne	125a0 <__assert_fail@plt+0x1714>
   125b8:	b	1253c <__assert_fail@plt+0x16b0>
   125bc:	mov	fp, #0
   125c0:	b	1253c <__assert_fail@plt+0x16b0>
   125c4:	ldr	r3, [sp, #32]
   125c8:	cmp	r3, #0
   125cc:	bne	124ac <__assert_fail@plt+0x1620>
   125d0:	mov	r3, #1
   125d4:	str	r3, [sp, #28]
   125d8:	cmp	r9, #0
   125dc:	beq	12690 <__assert_fail@plt+0x1804>
   125e0:	mov	r3, #39	; 0x27
   125e4:	ldr	r2, [sp, #64]	; 0x40
   125e8:	strb	r3, [r2]
   125ec:	mov	r3, #0
   125f0:	str	r3, [sp, #32]
   125f4:	mov	fp, #1
   125f8:	str	fp, [sp, #52]	; 0x34
   125fc:	movw	r3, #27332	; 0x6ac4
   12600:	movt	r3, #1
   12604:	str	r3, [sp, #60]	; 0x3c
   12608:	mov	sl, #2
   1260c:	b	124cc <__assert_fail@plt+0x1640>
   12610:	ldr	r3, [sp, #32]
   12614:	cmp	r3, #0
   12618:	beq	125d8 <__assert_fail@plt+0x174c>
   1261c:	mov	r3, #1
   12620:	str	r3, [sp, #52]	; 0x34
   12624:	movw	r3, #27332	; 0x6ac4
   12628:	movt	r3, #1
   1262c:	str	r3, [sp, #60]	; 0x3c
   12630:	mov	fp, #0
   12634:	b	124cc <__assert_fail@plt+0x1640>
   12638:	bl	10e74 <abort@plt>
   1263c:	mov	fp, #0
   12640:	str	fp, [sp, #32]
   12644:	mov	r3, #1
   12648:	str	r3, [sp, #28]
   1264c:	b	124cc <__assert_fail@plt+0x1640>
   12650:	ldr	r3, [sp, #32]
   12654:	str	r3, [sp, #28]
   12658:	mov	r3, #1
   1265c:	str	r3, [sp, #52]	; 0x34
   12660:	movw	r3, #27312	; 0x6ab0
   12664:	movt	r3, #1
   12668:	str	r3, [sp, #60]	; 0x3c
   1266c:	mov	fp, #0
   12670:	b	124cc <__assert_fail@plt+0x1640>
   12674:	mov	fp, #1
   12678:	str	fp, [sp, #28]
   1267c:	str	fp, [sp, #52]	; 0x34
   12680:	movw	r3, #27312	; 0x6ab0
   12684:	movt	r3, #1
   12688:	str	r3, [sp, #60]	; 0x3c
   1268c:	b	124cc <__assert_fail@plt+0x1640>
   12690:	mov	r3, #0
   12694:	str	r3, [sp, #32]
   12698:	mov	fp, #1
   1269c:	str	fp, [sp, #52]	; 0x34
   126a0:	movw	r3, #27332	; 0x6ac4
   126a4:	movt	r3, #1
   126a8:	str	r3, [sp, #60]	; 0x3c
   126ac:	mov	sl, #2
   126b0:	b	124cc <__assert_fail@plt+0x1640>
   126b4:	mov	r3, r2
   126b8:	add	r4, r6, r2
   126bc:	ldr	r2, [sp, #24]
   126c0:	cmp	r3, #1
   126c4:	movls	r3, #0
   126c8:	movhi	r3, #1
   126cc:	cmn	r2, #1
   126d0:	movne	r3, #0
   126d4:	cmp	r3, #0
   126d8:	beq	126e8 <__assert_fail@plt+0x185c>
   126dc:	ldr	r0, [sp, #48]	; 0x30
   126e0:	bl	10da8 <strlen@plt>
   126e4:	str	r0, [sp, #24]
   126e8:	ldr	r3, [sp, #24]
   126ec:	cmp	r4, r3
   126f0:	bhi	138dc <__assert_fail@plt+0x2a50>
   126f4:	ldr	r3, [sp, #48]	; 0x30
   126f8:	add	r4, r3, r6
   126fc:	ldr	r2, [sp, #52]	; 0x34
   12700:	ldr	r1, [sp, #60]	; 0x3c
   12704:	mov	r0, r4
   12708:	bl	10cac <memcmp@plt>
   1270c:	cmp	r0, #0
   12710:	bne	138dc <__assert_fail@plt+0x2a50>
   12714:	ldr	r3, [sp, #32]
   12718:	cmp	r3, #0
   1271c:	bne	1292c <__assert_fail@plt+0x1aa0>
   12720:	ldrb	r4, [r4]
   12724:	cmp	r4, #126	; 0x7e
   12728:	ldrls	pc, [pc, r4, lsl #2]
   1272c:	b	131e0 <__assert_fail@plt+0x2354>
   12730:	andeq	r2, r1, r0, ror r9
   12734:	andeq	r3, r1, r0, ror #3
   12738:	andeq	r3, r1, r0, ror #3
   1273c:	andeq	r3, r1, r0, ror #3
   12740:	andeq	r3, r1, r0, ror #3
   12744:	andeq	r3, r1, r0, ror #3
   12748:	andeq	r3, r1, r0, ror #3
   1274c:	andeq	r3, r1, r8, lsl #1
   12750:	andeq	r2, r1, ip, lsl #24
   12754:			; <UNDEFINED> instruction: 0x00012fb0
   12758:	andeq	r3, r1, ip, asr r0
   1275c:	andeq	r2, r1, r4, asr #31
   12760:	andeq	r2, r1, r0, lsr #24
   12764:	andeq	r2, r1, r4, lsr ip
   12768:	andeq	r3, r1, r0, ror #3
   1276c:	andeq	r3, r1, r0, ror #3
   12770:	andeq	r3, r1, r0, ror #3
   12774:	andeq	r3, r1, r0, ror #3
   12778:	andeq	r3, r1, r0, ror #3
   1277c:	andeq	r3, r1, r0, ror #3
   12780:	andeq	r3, r1, r0, ror #3
   12784:	andeq	r3, r1, r0, ror #3
   12788:	andeq	r3, r1, r0, ror #3
   1278c:	andeq	r3, r1, r0, ror #3
   12790:	andeq	r3, r1, r0, ror #3
   12794:	andeq	r3, r1, r0, ror #3
   12798:	andeq	r3, r1, r0, ror #3
   1279c:	andeq	r3, r1, r0, ror #3
   127a0:	andeq	r3, r1, r0, ror #3
   127a4:	andeq	r3, r1, r0, ror #3
   127a8:	andeq	r3, r1, r0, ror #3
   127ac:	andeq	r3, r1, r0, ror #3
   127b0:	strdeq	r3, [r1], -ip
   127b4:	andeq	r3, r1, r0, lsr #2
   127b8:	andeq	r3, r1, r0, lsr #2
   127bc:	strheq	r3, [r1], -r8
   127c0:	andeq	r3, r1, r0, lsr #2
   127c4:	andeq	r3, r1, r0, asr #12
   127c8:	andeq	r3, r1, r0, lsr #2
   127cc:	andeq	r3, r1, r0, asr #2
   127d0:	andeq	r3, r1, r0, lsr #2
   127d4:	andeq	r3, r1, r0, lsr #2
   127d8:	andeq	r3, r1, r0, lsr #2
   127dc:	andeq	r3, r1, r0, asr #12
   127e0:	andeq	r3, r1, r0, asr #12
   127e4:	andeq	r3, r1, r0, asr #12
   127e8:	andeq	r3, r1, r0, asr #12
   127ec:	andeq	r3, r1, r0, asr #12
   127f0:	andeq	r3, r1, r0, asr #12
   127f4:	andeq	r3, r1, r0, asr #12
   127f8:	andeq	r3, r1, r0, asr #12
   127fc:	andeq	r3, r1, r0, asr #12
   12800:	andeq	r3, r1, r0, asr #12
   12804:	andeq	r3, r1, r0, asr #12
   12808:	andeq	r3, r1, r0, asr #12
   1280c:	andeq	r3, r1, r0, asr #12
   12810:	andeq	r3, r1, r0, asr #12
   12814:	andeq	r3, r1, r0, asr #12
   12818:	andeq	r3, r1, r0, asr #12
   1281c:	andeq	r3, r1, r0, lsr #2
   12820:	andeq	r3, r1, r0, lsr #2
   12824:	andeq	r3, r1, r0, lsr #2
   12828:	andeq	r3, r1, r0, lsr #2
   1282c:	andeq	r2, r1, r0, lsr #21
   12830:	andeq	r3, r1, r0, ror #3
   12834:	andeq	r3, r1, r0, asr #12
   12838:	andeq	r3, r1, r0, asr #12
   1283c:	andeq	r3, r1, r0, asr #12
   12840:	andeq	r3, r1, r0, asr #12
   12844:	andeq	r3, r1, r0, asr #12
   12848:	andeq	r3, r1, r0, asr #12
   1284c:	andeq	r3, r1, r0, asr #12
   12850:	andeq	r3, r1, r0, asr #12
   12854:	andeq	r3, r1, r0, asr #12
   12858:	andeq	r3, r1, r0, asr #12
   1285c:	andeq	r3, r1, r0, asr #12
   12860:	andeq	r3, r1, r0, asr #12
   12864:	andeq	r3, r1, r0, asr #12
   12868:	andeq	r3, r1, r0, asr #12
   1286c:	andeq	r3, r1, r0, asr #12
   12870:	andeq	r3, r1, r0, asr #12
   12874:	andeq	r3, r1, r0, asr #12
   12878:	andeq	r3, r1, r0, asr #12
   1287c:	andeq	r3, r1, r0, asr #12
   12880:	andeq	r3, r1, r0, asr #12
   12884:	andeq	r3, r1, r0, asr #12
   12888:	andeq	r3, r1, r0, asr #12
   1288c:	andeq	r3, r1, r0, asr #12
   12890:	andeq	r3, r1, r0, asr #12
   12894:	andeq	r3, r1, r0, asr #12
   12898:	andeq	r3, r1, r0, asr #12
   1289c:	andeq	r3, r1, r0, lsr #2
   128a0:	ldrdeq	r2, [r1], -r8
   128a4:	andeq	r3, r1, r0, asr #12
   128a8:	andeq	r3, r1, r0, lsr #2
   128ac:	andeq	r3, r1, r0, asr #12
   128b0:	andeq	r3, r1, r0, lsr #2
   128b4:	andeq	r3, r1, r0, asr #12
   128b8:	andeq	r3, r1, r0, asr #12
   128bc:	andeq	r3, r1, r0, asr #12
   128c0:	andeq	r3, r1, r0, asr #12
   128c4:	andeq	r3, r1, r0, asr #12
   128c8:	andeq	r3, r1, r0, asr #12
   128cc:	andeq	r3, r1, r0, asr #12
   128d0:	andeq	r3, r1, r0, asr #12
   128d4:	andeq	r3, r1, r0, asr #12
   128d8:	andeq	r3, r1, r0, asr #12
   128dc:	andeq	r3, r1, r0, asr #12
   128e0:	andeq	r3, r1, r0, asr #12
   128e4:	andeq	r3, r1, r0, asr #12
   128e8:	andeq	r3, r1, r0, asr #12
   128ec:	andeq	r3, r1, r0, asr #12
   128f0:	andeq	r3, r1, r0, asr #12
   128f4:	andeq	r3, r1, r0, asr #12
   128f8:	andeq	r3, r1, r0, asr #12
   128fc:	andeq	r3, r1, r0, asr #12
   12900:	andeq	r3, r1, r0, asr #12
   12904:	andeq	r3, r1, r0, asr #12
   12908:	andeq	r3, r1, r0, asr #12
   1290c:	andeq	r3, r1, r0, asr #12
   12910:	andeq	r3, r1, r0, asr #12
   12914:	andeq	r3, r1, r0, asr #12
   12918:	andeq	r3, r1, r0, asr #12
   1291c:	muleq	r1, r8, r0
   12920:	andeq	r3, r1, r0, lsr #2
   12924:	muleq	r1, r8, r0
   12928:	strheq	r3, [r1], -r8
   1292c:	mov	r8, r9
   12930:	mov	r7, sl
   12934:	b	13834 <__assert_fail@plt+0x29a8>
   12938:	ldr	r3, [sp, #28]
   1293c:	cmp	r3, #0
   12940:	bne	12960 <__assert_fail@plt+0x1ad4>
   12944:	ldr	r3, [sp, #156]	; 0x9c
   12948:	tst	r3, #1
   1294c:	bne	12d48 <__assert_fail@plt+0x1ebc>
   12950:	ldr	r3, [sp, #28]
   12954:	str	r3, [sp, #44]	; 0x2c
   12958:	mov	r5, r3
   1295c:	b	12c68 <__assert_fail@plt+0x1ddc>
   12960:	ldr	r3, [sp, #32]
   12964:	cmp	r3, #0
   12968:	bne	137e4 <__assert_fail@plt+0x2958>
   1296c:	str	r3, [sp, #44]	; 0x2c
   12970:	ldr	r3, [sp, #36]	; 0x24
   12974:	eor	r3, r3, #1
   12978:	cmp	sl, #2
   1297c:	movne	r3, #0
   12980:	andeq	r3, r3, #1
   12984:	cmp	r3, #0
   12988:	beq	129e0 <__assert_fail@plt+0x1b54>
   1298c:	cmp	r9, fp
   12990:	movhi	r2, #39	; 0x27
   12994:	strbhi	r2, [r8, fp]
   12998:	add	r2, fp, #1
   1299c:	cmp	r9, r2
   129a0:	movhi	r1, #36	; 0x24
   129a4:	strbhi	r1, [r8, r2]
   129a8:	add	r2, fp, #2
   129ac:	cmp	r9, r2
   129b0:	movhi	r1, #39	; 0x27
   129b4:	strbhi	r1, [r8, r2]
   129b8:	add	r2, fp, #3
   129bc:	cmp	r9, r2
   129c0:	bls	138a0 <__assert_fail@plt+0x2a14>
   129c4:	mov	r1, #92	; 0x5c
   129c8:	strb	r1, [r8, r2]
   129cc:	add	fp, fp, #4
   129d0:	str	r3, [sp, #36]	; 0x24
   129d4:	mov	r5, #0
   129d8:	mov	r4, #48	; 0x30
   129dc:	b	12cb4 <__assert_fail@plt+0x1e28>
   129e0:	cmp	r9, fp
   129e4:	bhi	12a0c <__assert_fail@plt+0x1b80>
   129e8:	add	r1, fp, #1
   129ec:	ldr	r2, [sp, #56]	; 0x38
   129f0:	cmp	r2, #0
   129f4:	bne	12a34 <__assert_fail@plt+0x1ba8>
   129f8:	mov	r3, r5
   129fc:	ldr	r5, [sp, #56]	; 0x38
   12a00:	mov	fp, r1
   12a04:	mov	r4, #48	; 0x30
   12a08:	b	12c68 <__assert_fail@plt+0x1ddc>
   12a0c:	mov	r2, #92	; 0x5c
   12a10:	strb	r2, [r8, fp]
   12a14:	add	r1, fp, #1
   12a18:	ldr	r2, [sp, #56]	; 0x38
   12a1c:	cmp	r2, #0
   12a20:	moveq	r3, r5
   12a24:	moveq	r5, r2
   12a28:	moveq	fp, r1
   12a2c:	moveq	r4, #48	; 0x30
   12a30:	beq	12cb4 <__assert_fail@plt+0x1e28>
   12a34:	add	r2, r6, #1
   12a38:	ldr	r0, [sp, #24]
   12a3c:	cmp	r2, r0
   12a40:	bcs	12a5c <__assert_fail@plt+0x1bd0>
   12a44:	ldr	r0, [sp, #48]	; 0x30
   12a48:	ldrb	r2, [r0, r2]
   12a4c:	sub	r2, r2, #48	; 0x30
   12a50:	uxtb	r2, r2
   12a54:	cmp	r2, #9
   12a58:	bls	12a74 <__assert_fail@plt+0x1be8>
   12a5c:	mov	r2, r3
   12a60:	mov	r3, r5
   12a64:	mov	r5, r2
   12a68:	mov	fp, r1
   12a6c:	mov	r4, #48	; 0x30
   12a70:	b	12c8c <__assert_fail@plt+0x1e00>
   12a74:	cmp	r9, r1
   12a78:	movhi	r2, #48	; 0x30
   12a7c:	strbhi	r2, [r8, r1]
   12a80:	add	r2, fp, #2
   12a84:	cmp	r9, r2
   12a88:	movhi	r1, #48	; 0x30
   12a8c:	strbhi	r1, [r8, r2]
   12a90:	add	r1, fp, #3
   12a94:	b	12a5c <__assert_fail@plt+0x1bd0>
   12a98:	mov	r3, #0
   12a9c:	str	r3, [sp, #44]	; 0x2c
   12aa0:	cmp	sl, #2
   12aa4:	beq	12ac0 <__assert_fail@plt+0x1c34>
   12aa8:	cmp	sl, #5
   12aac:	beq	12ad8 <__assert_fail@plt+0x1c4c>
   12ab0:	mov	r5, #0
   12ab4:	mov	r3, r5
   12ab8:	mov	r4, #63	; 0x3f
   12abc:	b	12c68 <__assert_fail@plt+0x1ddc>
   12ac0:	ldr	r3, [sp, #32]
   12ac4:	cmp	r3, #0
   12ac8:	bne	137f0 <__assert_fail@plt+0x2964>
   12acc:	mov	r5, r3
   12ad0:	mov	r4, #63	; 0x3f
   12ad4:	b	131d0 <__assert_fail@plt+0x2344>
   12ad8:	ldr	r3, [sp, #156]	; 0x9c
   12adc:	tst	r3, #4
   12ae0:	beq	13608 <__assert_fail@plt+0x277c>
   12ae4:	add	r2, r6, #2
   12ae8:	ldr	r3, [sp, #24]
   12aec:	cmp	r2, r3
   12af0:	bcs	13618 <__assert_fail@plt+0x278c>
   12af4:	ldr	r3, [sp, #48]	; 0x30
   12af8:	add	r3, r3, r6
   12afc:	ldrb	r4, [r3, #1]
   12b00:	cmp	r4, #63	; 0x3f
   12b04:	movne	r5, #0
   12b08:	movne	r3, r5
   12b0c:	movne	r4, #63	; 0x3f
   12b10:	bne	12c68 <__assert_fail@plt+0x1ddc>
   12b14:	ldr	r3, [sp, #48]	; 0x30
   12b18:	ldrb	r1, [r3, r2]
   12b1c:	sub	r3, r1, #33	; 0x21
   12b20:	cmp	r3, #29
   12b24:	ldrls	pc, [pc, r3, lsl #2]
   12b28:	b	13628 <__assert_fail@plt+0x279c>
   12b2c:	andeq	r2, r1, r4, lsr #23
   12b30:	andeq	r3, r1, r8, lsr #12
   12b34:	andeq	r3, r1, r8, lsr #12
   12b38:	andeq	r3, r1, r8, lsr #12
   12b3c:	andeq	r3, r1, r8, lsr #12
   12b40:	andeq	r3, r1, r8, lsr #12
   12b44:	andeq	r2, r1, r4, lsr #23
   12b48:	andeq	r2, r1, r4, lsr #23
   12b4c:	andeq	r2, r1, r4, lsr #23
   12b50:	andeq	r3, r1, r8, lsr #12
   12b54:	andeq	r3, r1, r8, lsr #12
   12b58:	andeq	r3, r1, r8, lsr #12
   12b5c:	andeq	r2, r1, r4, lsr #23
   12b60:	andeq	r3, r1, r8, lsr #12
   12b64:	andeq	r2, r1, r4, lsr #23
   12b68:	andeq	r3, r1, r8, lsr #12
   12b6c:	andeq	r3, r1, r8, lsr #12
   12b70:	andeq	r3, r1, r8, lsr #12
   12b74:	andeq	r3, r1, r8, lsr #12
   12b78:	andeq	r3, r1, r8, lsr #12
   12b7c:	andeq	r3, r1, r8, lsr #12
   12b80:	andeq	r3, r1, r8, lsr #12
   12b84:	andeq	r3, r1, r8, lsr #12
   12b88:	andeq	r3, r1, r8, lsr #12
   12b8c:	andeq	r3, r1, r8, lsr #12
   12b90:	andeq	r3, r1, r8, lsr #12
   12b94:	andeq	r3, r1, r8, lsr #12
   12b98:	andeq	r2, r1, r4, lsr #23
   12b9c:	andeq	r2, r1, r4, lsr #23
   12ba0:	andeq	r2, r1, r4, lsr #23
   12ba4:	ldr	r3, [sp, #32]
   12ba8:	cmp	r3, #0
   12bac:	bne	13894 <__assert_fail@plt+0x2a08>
   12bb0:	cmp	r9, fp
   12bb4:	movhi	r3, #63	; 0x3f
   12bb8:	strbhi	r3, [r8, fp]
   12bbc:	add	r3, fp, #1
   12bc0:	cmp	r9, r3
   12bc4:	movhi	r0, #34	; 0x22
   12bc8:	strbhi	r0, [r8, r3]
   12bcc:	add	r3, fp, #2
   12bd0:	cmp	r9, r3
   12bd4:	movhi	r0, #34	; 0x22
   12bd8:	strbhi	r0, [r8, r3]
   12bdc:	add	r3, fp, #3
   12be0:	cmp	r9, r3
   12be4:	movhi	r0, #63	; 0x3f
   12be8:	strbhi	r0, [r8, r3]
   12bec:	add	fp, fp, #4
   12bf0:	ldr	r3, [sp, #32]
   12bf4:	mov	r5, r3
   12bf8:	mov	r4, r1
   12bfc:	mov	r6, r2
   12c00:	b	12c68 <__assert_fail@plt+0x1ddc>
   12c04:	mov	r3, #0
   12c08:	str	r3, [sp, #44]	; 0x2c
   12c0c:	mov	r4, #8
   12c10:	mov	r3, #98	; 0x62
   12c14:	b	12c54 <__assert_fail@plt+0x1dc8>
   12c18:	mov	r3, #0
   12c1c:	str	r3, [sp, #44]	; 0x2c
   12c20:	mov	r4, #12
   12c24:	mov	r3, #102	; 0x66
   12c28:	b	12c54 <__assert_fail@plt+0x1dc8>
   12c2c:	mov	r3, #0
   12c30:	str	r3, [sp, #44]	; 0x2c
   12c34:	mov	r4, #13
   12c38:	mov	r3, #114	; 0x72
   12c3c:	ldr	r2, [sp, #32]
   12c40:	cmp	sl, #2
   12c44:	movne	r2, #0
   12c48:	andeq	r2, r2, #1
   12c4c:	cmp	r2, #0
   12c50:	bne	13074 <__assert_fail@plt+0x21e8>
   12c54:	ldr	r2, [sp, #28]
   12c58:	cmp	r2, #0
   12c5c:	bne	1365c <__assert_fail@plt+0x27d0>
   12c60:	mov	r5, r2
   12c64:	mov	r3, r2
   12c68:	ldr	r2, [sp, #28]
   12c6c:	eor	r2, r2, #1
   12c70:	cmp	sl, #2
   12c74:	orreq	r2, r2, #1
   12c78:	eor	r2, r2, #1
   12c7c:	ldr	r1, [sp, #32]
   12c80:	orr	r2, r1, r2
   12c84:	tst	r2, #255	; 0xff
   12c88:	beq	12cb4 <__assert_fail@plt+0x1e28>
   12c8c:	ldr	r2, [sp, #160]	; 0xa0
   12c90:	cmp	r2, #0
   12c94:	beq	12cb4 <__assert_fail@plt+0x1e28>
   12c98:	ubfx	r1, r4, #5, #8
   12c9c:	and	r2, r4, #31
   12ca0:	ldr	r0, [sp, #160]	; 0xa0
   12ca4:	ldr	r1, [r0, r1, lsl #2]
   12ca8:	lsr	r2, r1, r2
   12cac:	tst	r2, #1
   12cb0:	bne	12cc0 <__assert_fail@plt+0x1e34>
   12cb4:	ldr	r2, [sp, #44]	; 0x2c
   12cb8:	cmp	r2, #0
   12cbc:	beq	13014 <__assert_fail@plt+0x2188>
   12cc0:	ldr	r3, [sp, #32]
   12cc4:	cmp	r3, #0
   12cc8:	bne	13814 <__assert_fail@plt+0x2988>
   12ccc:	ldr	r3, [sp, #36]	; 0x24
   12cd0:	eor	r3, r3, #1
   12cd4:	cmp	sl, #2
   12cd8:	movne	r3, #0
   12cdc:	andeq	r3, r3, #1
   12ce0:	cmp	r3, #0
   12ce4:	beq	12d1c <__assert_fail@plt+0x1e90>
   12ce8:	cmp	r9, fp
   12cec:	movhi	r2, #39	; 0x27
   12cf0:	strbhi	r2, [r8, fp]
   12cf4:	add	r2, fp, #1
   12cf8:	cmp	r9, r2
   12cfc:	movhi	r1, #36	; 0x24
   12d00:	strbhi	r1, [r8, r2]
   12d04:	add	r2, fp, #2
   12d08:	cmp	r9, r2
   12d0c:	movhi	r1, #39	; 0x27
   12d10:	strbhi	r1, [r8, r2]
   12d14:	add	fp, fp, #3
   12d18:	str	r3, [sp, #36]	; 0x24
   12d1c:	cmp	r9, fp
   12d20:	movhi	r3, #92	; 0x5c
   12d24:	strbhi	r3, [r8, fp]
   12d28:	add	fp, fp, #1
   12d2c:	cmp	fp, r9
   12d30:	strbcc	r4, [r8, fp]
   12d34:	add	fp, fp, #1
   12d38:	cmp	r5, #0
   12d3c:	ldr	r3, [sp, #40]	; 0x28
   12d40:	moveq	r3, r5
   12d44:	str	r3, [sp, #40]	; 0x28
   12d48:	add	r6, r6, #1
   12d4c:	ldr	r3, [sp, #24]
   12d50:	cmn	r3, #1
   12d54:	beq	13684 <__assert_fail@plt+0x27f8>
   12d58:	ldr	r3, [sp, #24]
   12d5c:	subs	r5, r3, r6
   12d60:	movne	r5, #1
   12d64:	cmp	r5, #0
   12d68:	beq	13698 <__assert_fail@plt+0x280c>
   12d6c:	ldr	r3, [sp, #28]
   12d70:	cmp	sl, #2
   12d74:	moveq	r3, #0
   12d78:	andne	r3, r3, #1
   12d7c:	str	r3, [sp, #56]	; 0x38
   12d80:	ldr	r2, [sp, #52]	; 0x34
   12d84:	adds	r7, r2, #0
   12d88:	movne	r7, #1
   12d8c:	ands	r3, r3, r7
   12d90:	str	r3, [sp, #44]	; 0x2c
   12d94:	bne	126b4 <__assert_fail@plt+0x1828>
   12d98:	ldr	r3, [sp, #48]	; 0x30
   12d9c:	ldrb	r4, [r3, r6]
   12da0:	cmp	r4, #126	; 0x7e
   12da4:	ldrls	pc, [pc, r4, lsl #2]
   12da8:	b	131e0 <__assert_fail@plt+0x2354>
   12dac:	andeq	r2, r1, r8, lsr r9
   12db0:	andeq	r3, r1, r0, ror #3
   12db4:	andeq	r3, r1, r0, ror #3
   12db8:	andeq	r3, r1, r0, ror #3
   12dbc:	andeq	r3, r1, r0, ror #3
   12dc0:	andeq	r3, r1, r0, ror #3
   12dc4:	andeq	r3, r1, r0, ror #3
   12dc8:	andeq	r3, r1, r0, lsl #1
   12dcc:	andeq	r2, r1, ip, lsl #24
   12dd0:			; <UNDEFINED> instruction: 0x00012fb0
   12dd4:	andeq	r3, r1, r4, asr r0
   12dd8:	andeq	r2, r1, r4, asr #31
   12ddc:	andeq	r2, r1, r0, lsr #24
   12de0:	andeq	r2, r1, r4, lsr ip
   12de4:	andeq	r3, r1, r0, ror #3
   12de8:	andeq	r3, r1, r0, ror #3
   12dec:	andeq	r3, r1, r0, ror #3
   12df0:	andeq	r3, r1, r0, ror #3
   12df4:	andeq	r3, r1, r0, ror #3
   12df8:	andeq	r3, r1, r0, ror #3
   12dfc:	andeq	r3, r1, r0, ror #3
   12e00:	andeq	r3, r1, r0, ror #3
   12e04:	andeq	r3, r1, r0, ror #3
   12e08:	andeq	r3, r1, r0, ror #3
   12e0c:	andeq	r3, r1, r0, ror #3
   12e10:	andeq	r3, r1, r0, ror #3
   12e14:	andeq	r3, r1, r0, ror #3
   12e18:	andeq	r3, r1, r0, ror #3
   12e1c:	andeq	r3, r1, r0, ror #3
   12e20:	andeq	r3, r1, r0, ror #3
   12e24:	andeq	r3, r1, r0, ror #3
   12e28:	andeq	r3, r1, r0, ror #3
   12e2c:	strdeq	r3, [r1], -ip
   12e30:	strdeq	r3, [r1], -r8
   12e34:	strdeq	r3, [r1], -r8
   12e38:	strheq	r3, [r1], -r8
   12e3c:	strdeq	r3, [r1], -r8
   12e40:	andeq	r3, r1, r0, lsl #12
   12e44:	strdeq	r3, [r1], -r8
   12e48:	andeq	r3, r1, r0, asr #2
   12e4c:	strdeq	r3, [r1], -r8
   12e50:	strdeq	r3, [r1], -r8
   12e54:	strdeq	r3, [r1], -r8
   12e58:	andeq	r3, r1, r0, lsl #12
   12e5c:	andeq	r3, r1, r0, lsl #12
   12e60:	andeq	r3, r1, r0, lsl #12
   12e64:	andeq	r3, r1, r0, lsl #12
   12e68:	andeq	r3, r1, r0, lsl #12
   12e6c:	andeq	r3, r1, r0, lsl #12
   12e70:	andeq	r3, r1, r0, lsl #12
   12e74:	andeq	r3, r1, r0, lsl #12
   12e78:	andeq	r3, r1, r0, lsl #12
   12e7c:	andeq	r3, r1, r0, lsl #12
   12e80:	andeq	r3, r1, r0, lsl #12
   12e84:	andeq	r3, r1, r0, lsl #12
   12e88:	andeq	r3, r1, r0, lsl #12
   12e8c:	andeq	r3, r1, r0, lsl #12
   12e90:	andeq	r3, r1, r0, lsl #12
   12e94:	andeq	r3, r1, r0, lsl #12
   12e98:	strdeq	r3, [r1], -r8
   12e9c:	strdeq	r3, [r1], -r8
   12ea0:	strdeq	r3, [r1], -r8
   12ea4:	strdeq	r3, [r1], -r8
   12ea8:	andeq	r2, r1, r0, lsr #21
   12eac:	andeq	r3, r1, r0, ror #3
   12eb0:	andeq	r3, r1, r0, lsl #12
   12eb4:	andeq	r3, r1, r0, lsl #12
   12eb8:	andeq	r3, r1, r0, lsl #12
   12ebc:	andeq	r3, r1, r0, lsl #12
   12ec0:	andeq	r3, r1, r0, lsl #12
   12ec4:	andeq	r3, r1, r0, lsl #12
   12ec8:	andeq	r3, r1, r0, lsl #12
   12ecc:	andeq	r3, r1, r0, lsl #12
   12ed0:	andeq	r3, r1, r0, lsl #12
   12ed4:	andeq	r3, r1, r0, lsl #12
   12ed8:	andeq	r3, r1, r0, lsl #12
   12edc:	andeq	r3, r1, r0, lsl #12
   12ee0:	andeq	r3, r1, r0, lsl #12
   12ee4:	andeq	r3, r1, r0, lsl #12
   12ee8:	andeq	r3, r1, r0, lsl #12
   12eec:	andeq	r3, r1, r0, lsl #12
   12ef0:	andeq	r3, r1, r0, lsl #12
   12ef4:	andeq	r3, r1, r0, lsl #12
   12ef8:	andeq	r3, r1, r0, lsl #12
   12efc:	andeq	r3, r1, r0, lsl #12
   12f00:	andeq	r3, r1, r0, lsl #12
   12f04:	andeq	r3, r1, r0, lsl #12
   12f08:	andeq	r3, r1, r0, lsl #12
   12f0c:	andeq	r3, r1, r0, lsl #12
   12f10:	andeq	r3, r1, r0, lsl #12
   12f14:	andeq	r3, r1, r0, lsl #12
   12f18:	strdeq	r3, [r1], -r8
   12f1c:	ldrdeq	r2, [r1], -r8
   12f20:	andeq	r3, r1, r0, lsl #12
   12f24:	strdeq	r3, [r1], -r8
   12f28:	andeq	r3, r1, r0, lsl #12
   12f2c:	strdeq	r3, [r1], -r8
   12f30:	andeq	r3, r1, r0, lsl #12
   12f34:	andeq	r3, r1, r0, lsl #12
   12f38:	andeq	r3, r1, r0, lsl #12
   12f3c:	andeq	r3, r1, r0, lsl #12
   12f40:	andeq	r3, r1, r0, lsl #12
   12f44:	andeq	r3, r1, r0, lsl #12
   12f48:	andeq	r3, r1, r0, lsl #12
   12f4c:	andeq	r3, r1, r0, lsl #12
   12f50:	andeq	r3, r1, r0, lsl #12
   12f54:	andeq	r3, r1, r0, lsl #12
   12f58:	andeq	r3, r1, r0, lsl #12
   12f5c:	andeq	r3, r1, r0, lsl #12
   12f60:	andeq	r3, r1, r0, lsl #12
   12f64:	andeq	r3, r1, r0, lsl #12
   12f68:	andeq	r3, r1, r0, lsl #12
   12f6c:	andeq	r3, r1, r0, lsl #12
   12f70:	andeq	r3, r1, r0, lsl #12
   12f74:	andeq	r3, r1, r0, lsl #12
   12f78:	andeq	r3, r1, r0, lsl #12
   12f7c:	andeq	r3, r1, r0, lsl #12
   12f80:	andeq	r3, r1, r0, lsl #12
   12f84:	andeq	r3, r1, r0, lsl #12
   12f88:	andeq	r3, r1, r0, lsl #12
   12f8c:	andeq	r3, r1, r0, lsl #12
   12f90:	andeq	r3, r1, r0, lsl #12
   12f94:	andeq	r3, r1, r0, lsl #12
   12f98:	muleq	r1, r8, r0
   12f9c:	strdeq	r3, [r1], -r8
   12fa0:	muleq	r1, r8, r0
   12fa4:	strheq	r3, [r1], -r8
   12fa8:	mov	r3, #0
   12fac:	str	r3, [sp, #44]	; 0x2c
   12fb0:	mov	r4, #9
   12fb4:	mov	r3, #116	; 0x74
   12fb8:	b	12c3c <__assert_fail@plt+0x1db0>
   12fbc:	mov	r3, #0
   12fc0:	str	r3, [sp, #44]	; 0x2c
   12fc4:	mov	r4, #11
   12fc8:	mov	r3, #118	; 0x76
   12fcc:	b	12c54 <__assert_fail@plt+0x1dc8>
   12fd0:	mov	r3, #0
   12fd4:	str	r3, [sp, #44]	; 0x2c
   12fd8:	cmp	sl, #2
   12fdc:	beq	13000 <__assert_fail@plt+0x2174>
   12fe0:	ldr	r3, [sp, #28]
   12fe4:	ldr	r2, [sp, #32]
   12fe8:	and	r3, r3, r2
   12fec:	tst	r7, r3
   12ff0:	bne	13674 <__assert_fail@plt+0x27e8>
   12ff4:	mov	r4, #92	; 0x5c
   12ff8:	mov	r3, r4
   12ffc:	b	12c54 <__assert_fail@plt+0x1dc8>
   13000:	ldr	r3, [sp, #32]
   13004:	cmp	r3, #0
   13008:	bne	137fc <__assert_fail@plt+0x2970>
   1300c:	mov	r5, r3
   13010:	mov	r4, #92	; 0x5c
   13014:	eor	r3, r3, #1
   13018:	ldr	r2, [sp, #36]	; 0x24
   1301c:	and	r3, r3, r2
   13020:	tst	r3, #255	; 0xff
   13024:	beq	12d2c <__assert_fail@plt+0x1ea0>
   13028:	cmp	r9, fp
   1302c:	movhi	r3, #39	; 0x27
   13030:	strbhi	r3, [r8, fp]
   13034:	add	r3, fp, #1
   13038:	cmp	r9, r3
   1303c:	movhi	r2, #39	; 0x27
   13040:	strbhi	r2, [r8, r3]
   13044:	add	fp, fp, #2
   13048:	mov	r3, #0
   1304c:	str	r3, [sp, #36]	; 0x24
   13050:	b	12d2c <__assert_fail@plt+0x1ea0>
   13054:	mov	r3, #110	; 0x6e
   13058:	b	12c3c <__assert_fail@plt+0x1db0>
   1305c:	mov	r3, #110	; 0x6e
   13060:	b	12c3c <__assert_fail@plt+0x1db0>
   13064:	mov	r3, #0
   13068:	str	r3, [sp, #44]	; 0x2c
   1306c:	mov	r3, #110	; 0x6e
   13070:	b	12c3c <__assert_fail@plt+0x1db0>
   13074:	mov	r8, r9
   13078:	mov	r7, #2
   1307c:	b	1381c <__assert_fail@plt+0x2990>
   13080:	mov	r3, #97	; 0x61
   13084:	b	12c54 <__assert_fail@plt+0x1dc8>
   13088:	mov	r3, #97	; 0x61
   1308c:	b	12c54 <__assert_fail@plt+0x1dc8>
   13090:	mov	r3, #0
   13094:	str	r3, [sp, #44]	; 0x2c
   13098:	ldr	r3, [sp, #24]
   1309c:	cmn	r3, #1
   130a0:	beq	130cc <__assert_fail@plt+0x2240>
   130a4:	ldr	r3, [sp, #24]
   130a8:	subs	r3, r3, #1
   130ac:	movne	r3, #1
   130b0:	cmp	r3, #0
   130b4:	bne	13634 <__assert_fail@plt+0x27a8>
   130b8:	cmp	r6, #0
   130bc:	beq	130fc <__assert_fail@plt+0x2270>
   130c0:	mov	r5, #0
   130c4:	mov	r3, r5
   130c8:	b	12c68 <__assert_fail@plt+0x1ddc>
   130cc:	ldr	r3, [sp, #48]	; 0x30
   130d0:	ldrb	r3, [r3, #1]
   130d4:	adds	r3, r3, #0
   130d8:	movne	r3, #1
   130dc:	b	130b0 <__assert_fail@plt+0x2224>
   130e0:	mov	r3, #0
   130e4:	str	r3, [sp, #44]	; 0x2c
   130e8:	b	130b8 <__assert_fail@plt+0x222c>
   130ec:	mov	r3, #0
   130f0:	str	r3, [sp, #44]	; 0x2c
   130f4:	b	130fc <__assert_fail@plt+0x2270>
   130f8:	ldr	r5, [sp, #44]	; 0x2c
   130fc:	ldr	r3, [sp, #32]
   13100:	cmp	sl, #2
   13104:	movne	r3, #0
   13108:	andeq	r3, r3, #1
   1310c:	cmp	r3, #0
   13110:	beq	12c68 <__assert_fail@plt+0x1ddc>
   13114:	mov	r8, r9
   13118:	mov	r7, #2
   1311c:	b	1381c <__assert_fail@plt+0x2990>
   13120:	ldr	r5, [sp, #32]
   13124:	b	130fc <__assert_fail@plt+0x2270>
   13128:	mov	r3, #0
   1312c:	str	r3, [sp, #44]	; 0x2c
   13130:	mov	r5, r3
   13134:	b	130fc <__assert_fail@plt+0x2270>
   13138:	mov	r3, #0
   1313c:	str	r3, [sp, #44]	; 0x2c
   13140:	cmp	sl, #2
   13144:	strne	r5, [sp, #68]	; 0x44
   13148:	movne	r3, #0
   1314c:	movne	r4, #39	; 0x27
   13150:	bne	12c68 <__assert_fail@plt+0x1ddc>
   13154:	ldr	r3, [sp, #32]
   13158:	cmp	r3, #0
   1315c:	bne	13808 <__assert_fail@plt+0x297c>
   13160:	ldr	r3, [sp, #72]	; 0x48
   13164:	clz	r3, r3
   13168:	lsr	r3, r3, #5
   1316c:	cmp	r9, #0
   13170:	moveq	r3, #0
   13174:	cmp	r3, #0
   13178:	movne	r3, #0
   1317c:	bne	131a4 <__assert_fail@plt+0x2318>
   13180:	cmp	r9, fp
   13184:	movhi	r3, #39	; 0x27
   13188:	strbhi	r3, [r8, fp]
   1318c:	add	r3, fp, #1
   13190:	cmp	r9, r3
   13194:	movhi	r2, #92	; 0x5c
   13198:	strbhi	r2, [r8, r3]
   1319c:	mov	r3, r9
   131a0:	ldr	r9, [sp, #72]	; 0x48
   131a4:	add	r2, fp, #2
   131a8:	cmp	r2, r3
   131ac:	movcc	r1, #39	; 0x27
   131b0:	strbcc	r1, [r8, r2]
   131b4:	add	fp, fp, #3
   131b8:	str	r5, [sp, #68]	; 0x44
   131bc:	ldr	r2, [sp, #32]
   131c0:	str	r2, [sp, #36]	; 0x24
   131c4:	str	r9, [sp, #72]	; 0x48
   131c8:	mov	r9, r3
   131cc:	mov	r4, #39	; 0x27
   131d0:	mov	r3, #0
   131d4:	b	12cb4 <__assert_fail@plt+0x1e28>
   131d8:	mov	r3, #0
   131dc:	str	r3, [sp, #44]	; 0x2c
   131e0:	ldr	r7, [sp, #76]	; 0x4c
   131e4:	cmp	r7, #1
   131e8:	bne	13220 <__assert_fail@plt+0x2394>
   131ec:	bl	10d90 <__ctype_b_loc@plt>
   131f0:	ldr	r2, [r0]
   131f4:	lsl	r3, r4, #1
   131f8:	ldrh	r5, [r2, r3]
   131fc:	ubfx	r5, r5, #14, #1
   13200:	mov	ip, r7
   13204:	eor	r3, r5, #1
   13208:	ldr	r2, [sp, #28]
   1320c:	and	r3, r3, r2
   13210:	ands	r3, r3, #255	; 0xff
   13214:	beq	12c68 <__assert_fail@plt+0x1ddc>
   13218:	mov	r5, #0
   1321c:	b	1347c <__assert_fail@plt+0x25f0>
   13220:	mov	r2, #0
   13224:	mov	r3, #0
   13228:	strd	r2, [sp, #104]	; 0x68
   1322c:	ldr	r3, [sp, #24]
   13230:	cmn	r3, #1
   13234:	beq	13258 <__assert_fail@plt+0x23cc>
   13238:	mov	r3, #0
   1323c:	str	r4, [sp, #88]	; 0x58
   13240:	str	fp, [sp, #92]	; 0x5c
   13244:	str	r8, [sp, #56]	; 0x38
   13248:	mov	r8, r3
   1324c:	str	r9, [sp, #84]	; 0x54
   13250:	ldr	r9, [sp, #48]	; 0x30
   13254:	b	133a4 <__assert_fail@plt+0x2518>
   13258:	ldr	r0, [sp, #48]	; 0x30
   1325c:	bl	10da8 <strlen@plt>
   13260:	str	r0, [sp, #24]
   13264:	b	13238 <__assert_fail@plt+0x23ac>
   13268:	mov	r1, fp
   1326c:	ldr	r4, [sp, #88]	; 0x58
   13270:	mov	r2, r8
   13274:	mov	ip, r8
   13278:	ldr	fp, [sp, #92]	; 0x5c
   1327c:	ldr	r8, [sp, #56]	; 0x38
   13280:	ldr	r9, [sp, #84]	; 0x54
   13284:	ldr	r0, [sp, #24]
   13288:	cmp	r7, r0
   1328c:	bcs	13444 <__assert_fail@plt+0x25b8>
   13290:	ldrb	r3, [r1]
   13294:	cmp	r3, #0
   13298:	beq	1344c <__assert_fail@plt+0x25c0>
   1329c:	mov	r3, r1
   132a0:	add	r2, r2, #1
   132a4:	add	r1, r6, r2
   132a8:	cmp	r0, r1
   132ac:	bls	13454 <__assert_fail@plt+0x25c8>
   132b0:	ldrb	r1, [r3, #1]!
   132b4:	cmp	r1, #0
   132b8:	bne	132a0 <__assert_fail@plt+0x2414>
   132bc:	mov	ip, r2
   132c0:	mov	r5, #0
   132c4:	b	13474 <__assert_fail@plt+0x25e8>
   132c8:	ldr	r3, [sp, #56]	; 0x38
   132cc:	str	r3, [sp, #64]	; 0x40
   132d0:	ldr	r8, [sp, #84]	; 0x54
   132d4:	mov	r7, #2
   132d8:	b	1381c <__assert_fail@plt+0x2990>
   132dc:	cmp	r2, r7
   132e0:	beq	13380 <__assert_fail@plt+0x24f4>
   132e4:	ldrb	r3, [r2], #1
   132e8:	sub	r3, r3, #91	; 0x5b
   132ec:	cmp	r3, #33	; 0x21
   132f0:	ldrls	pc, [pc, r3, lsl #2]
   132f4:	b	132dc <__assert_fail@plt+0x2450>
   132f8:	andeq	r3, r1, r8, asr #5
   132fc:	andeq	r3, r1, r8, asr #5
   13300:	ldrdeq	r3, [r1], -ip
   13304:	andeq	r3, r1, r8, asr #5
   13308:	ldrdeq	r3, [r1], -ip
   1330c:	andeq	r3, r1, r8, asr #5
   13310:	ldrdeq	r3, [r1], -ip
   13314:	ldrdeq	r3, [r1], -ip
   13318:	ldrdeq	r3, [r1], -ip
   1331c:	ldrdeq	r3, [r1], -ip
   13320:	ldrdeq	r3, [r1], -ip
   13324:	ldrdeq	r3, [r1], -ip
   13328:	ldrdeq	r3, [r1], -ip
   1332c:	ldrdeq	r3, [r1], -ip
   13330:	ldrdeq	r3, [r1], -ip
   13334:	ldrdeq	r3, [r1], -ip
   13338:	ldrdeq	r3, [r1], -ip
   1333c:	ldrdeq	r3, [r1], -ip
   13340:	ldrdeq	r3, [r1], -ip
   13344:	ldrdeq	r3, [r1], -ip
   13348:	ldrdeq	r3, [r1], -ip
   1334c:	ldrdeq	r3, [r1], -ip
   13350:	ldrdeq	r3, [r1], -ip
   13354:	ldrdeq	r3, [r1], -ip
   13358:	ldrdeq	r3, [r1], -ip
   1335c:	ldrdeq	r3, [r1], -ip
   13360:	ldrdeq	r3, [r1], -ip
   13364:	ldrdeq	r3, [r1], -ip
   13368:	ldrdeq	r3, [r1], -ip
   1336c:	ldrdeq	r3, [r1], -ip
   13370:	ldrdeq	r3, [r1], -ip
   13374:	ldrdeq	r3, [r1], -ip
   13378:	ldrdeq	r3, [r1], -ip
   1337c:	andeq	r3, r1, r8, asr #5
   13380:	ldr	r0, [sp, #100]	; 0x64
   13384:	bl	10ce8 <iswprint@plt>
   13388:	cmp	r0, #0
   1338c:	moveq	r5, #0
   13390:	add	r8, r8, r4
   13394:	add	r0, sp, #104	; 0x68
   13398:	bl	10c94 <mbsinit@plt>
   1339c:	cmp	r0, #0
   133a0:	bne	13410 <__assert_fail@plt+0x2584>
   133a4:	add	r7, r6, r8
   133a8:	add	fp, r9, r7
   133ac:	add	r3, sp, #104	; 0x68
   133b0:	ldr	r2, [sp, #24]
   133b4:	sub	r2, r2, r7
   133b8:	mov	r1, fp
   133bc:	add	r0, sp, #100	; 0x64
   133c0:	bl	15c78 <__assert_fail@plt+0x4dec>
   133c4:	subs	r4, r0, #0
   133c8:	beq	13460 <__assert_fail@plt+0x25d4>
   133cc:	cmn	r4, #1
   133d0:	beq	13428 <__assert_fail@plt+0x259c>
   133d4:	cmn	r4, #2
   133d8:	beq	13268 <__assert_fail@plt+0x23dc>
   133dc:	ldr	r3, [sp, #32]
   133e0:	cmp	sl, #2
   133e4:	movne	r3, #0
   133e8:	andeq	r3, r3, #1
   133ec:	cmp	r3, #0
   133f0:	beq	13380 <__assert_fail@plt+0x24f4>
   133f4:	cmp	r4, #1
   133f8:	bls	13380 <__assert_fail@plt+0x24f4>
   133fc:	add	r2, r7, #1
   13400:	add	r2, r9, r2
   13404:	add	r3, r9, r4
   13408:	add	r7, r3, r7
   1340c:	b	132e4 <__assert_fail@plt+0x2458>
   13410:	ldr	r4, [sp, #88]	; 0x58
   13414:	mov	ip, r8
   13418:	ldr	fp, [sp, #92]	; 0x5c
   1341c:	ldr	r8, [sp, #56]	; 0x38
   13420:	ldr	r9, [sp, #84]	; 0x54
   13424:	b	13474 <__assert_fail@plt+0x25e8>
   13428:	ldr	r4, [sp, #88]	; 0x58
   1342c:	mov	ip, r8
   13430:	ldr	fp, [sp, #92]	; 0x5c
   13434:	ldr	r8, [sp, #56]	; 0x38
   13438:	ldr	r9, [sp, #84]	; 0x54
   1343c:	mov	r5, #0
   13440:	b	13474 <__assert_fail@plt+0x25e8>
   13444:	mov	r5, #0
   13448:	b	13474 <__assert_fail@plt+0x25e8>
   1344c:	mov	r5, #0
   13450:	b	13474 <__assert_fail@plt+0x25e8>
   13454:	mov	ip, r2
   13458:	mov	r5, #0
   1345c:	b	13474 <__assert_fail@plt+0x25e8>
   13460:	ldr	r4, [sp, #88]	; 0x58
   13464:	mov	ip, r8
   13468:	ldr	fp, [sp, #92]	; 0x5c
   1346c:	ldr	r8, [sp, #56]	; 0x38
   13470:	ldr	r9, [sp, #84]	; 0x54
   13474:	cmp	ip, #1
   13478:	bls	13204 <__assert_fail@plt+0x2378>
   1347c:	add	lr, r6, ip
   13480:	ldr	r3, [sp, #48]	; 0x30
   13484:	add	r1, r3, r6
   13488:	mov	r3, #0
   1348c:	eor	r0, r5, #1
   13490:	ldr	r2, [sp, #28]
   13494:	and	r0, r0, r2
   13498:	uxtb	r0, r0
   1349c:	str	r0, [sp, #56]	; 0x38
   134a0:	mov	r7, #92	; 0x5c
   134a4:	ldr	ip, [sp, #36]	; 0x24
   134a8:	str	r5, [sp, #84]	; 0x54
   134ac:	ldr	r2, [sp, #44]	; 0x2c
   134b0:	b	13520 <__assert_fail@plt+0x2694>
   134b4:	cmp	r2, #0
   134b8:	beq	134c8 <__assert_fail@plt+0x263c>
   134bc:	cmp	r9, fp
   134c0:	strbhi	r7, [r8, fp]
   134c4:	add	fp, fp, #1
   134c8:	add	r5, r6, #1
   134cc:	cmp	r5, lr
   134d0:	bcs	135dc <__assert_fail@plt+0x2750>
   134d4:	eor	r2, r3, #1
   134d8:	and	r2, r2, ip
   134dc:	ands	r2, r2, #255	; 0xff
   134e0:	beq	135f8 <__assert_fail@plt+0x276c>
   134e4:	cmp	r9, fp
   134e8:	movhi	r2, #39	; 0x27
   134ec:	strbhi	r2, [r8, fp]
   134f0:	add	r2, fp, #1
   134f4:	cmp	r9, r2
   134f8:	movhi	ip, #39	; 0x27
   134fc:	strbhi	ip, [r8, r2]
   13500:	add	fp, fp, #2
   13504:	ldr	ip, [sp, #56]	; 0x38
   13508:	mov	r2, ip
   1350c:	mov	r6, r5
   13510:	cmp	r9, fp
   13514:	strbhi	r4, [r8, fp]
   13518:	add	fp, fp, #1
   1351c:	ldrb	r4, [r1, #1]!
   13520:	cmp	r0, #0
   13524:	beq	134b4 <__assert_fail@plt+0x2628>
   13528:	ldr	r3, [sp, #32]
   1352c:	cmp	r3, #0
   13530:	bne	137c4 <__assert_fail@plt+0x2938>
   13534:	eor	r3, ip, #1
   13538:	cmp	sl, #2
   1353c:	movne	r3, #0
   13540:	andeq	r3, r3, #1
   13544:	cmp	r3, #0
   13548:	beq	13580 <__assert_fail@plt+0x26f4>
   1354c:	cmp	r9, fp
   13550:	movhi	ip, #39	; 0x27
   13554:	strbhi	ip, [r8, fp]
   13558:	add	ip, fp, #1
   1355c:	cmp	r9, ip
   13560:	movhi	r5, #36	; 0x24
   13564:	strbhi	r5, [r8, ip]
   13568:	add	ip, fp, #2
   1356c:	cmp	r9, ip
   13570:	movhi	r5, #39	; 0x27
   13574:	strbhi	r5, [r8, ip]
   13578:	add	fp, fp, #3
   1357c:	mov	ip, r3
   13580:	cmp	r9, fp
   13584:	strbhi	r7, [r8, fp]
   13588:	add	r3, fp, #1
   1358c:	cmp	r9, r3
   13590:	bls	135a0 <__assert_fail@plt+0x2714>
   13594:	lsr	r5, r4, #6
   13598:	add	r5, r5, #48	; 0x30
   1359c:	strb	r5, [r8, r3]
   135a0:	add	r3, fp, #2
   135a4:	cmp	r9, r3
   135a8:	bls	135b8 <__assert_fail@plt+0x272c>
   135ac:	ubfx	r5, r4, #3, #3
   135b0:	add	r5, r5, #48	; 0x30
   135b4:	strb	r5, [r8, r3]
   135b8:	add	fp, fp, #3
   135bc:	and	r4, r4, #7
   135c0:	add	r4, r4, #48	; 0x30
   135c4:	add	r5, r6, #1
   135c8:	cmp	r5, lr
   135cc:	bcs	135e8 <__assert_fail@plt+0x275c>
   135d0:	ldr	r3, [sp, #56]	; 0x38
   135d4:	mov	r6, r5
   135d8:	b	13510 <__assert_fail@plt+0x2684>
   135dc:	str	ip, [sp, #36]	; 0x24
   135e0:	ldr	r5, [sp, #84]	; 0x54
   135e4:	b	13014 <__assert_fail@plt+0x2188>
   135e8:	str	ip, [sp, #36]	; 0x24
   135ec:	ldr	r5, [sp, #84]	; 0x54
   135f0:	mov	r3, r0
   135f4:	b	13014 <__assert_fail@plt+0x2188>
   135f8:	mov	r6, r5
   135fc:	b	13510 <__assert_fail@plt+0x2684>
   13600:	ldr	r3, [sp, #44]	; 0x2c
   13604:	b	12c68 <__assert_fail@plt+0x1ddc>
   13608:	mov	r5, #0
   1360c:	mov	r3, r5
   13610:	mov	r4, #63	; 0x3f
   13614:	b	12c68 <__assert_fail@plt+0x1ddc>
   13618:	mov	r5, #0
   1361c:	mov	r3, r5
   13620:	mov	r4, #63	; 0x3f
   13624:	b	12c68 <__assert_fail@plt+0x1ddc>
   13628:	mov	r5, #0
   1362c:	mov	r3, r5
   13630:	b	12c68 <__assert_fail@plt+0x1ddc>
   13634:	mov	r5, #0
   13638:	mov	r3, r5
   1363c:	b	12c68 <__assert_fail@plt+0x1ddc>
   13640:	ldr	r5, [sp, #44]	; 0x2c
   13644:	ldr	r3, [sp, #32]
   13648:	b	12c68 <__assert_fail@plt+0x1ddc>
   1364c:	ldr	r5, [sp, #44]	; 0x2c
   13650:	mov	r3, #0
   13654:	str	r3, [sp, #44]	; 0x2c
   13658:	b	12c68 <__assert_fail@plt+0x1ddc>
   1365c:	mov	r4, r3
   13660:	mov	r5, #0
   13664:	b	12cc0 <__assert_fail@plt+0x1e34>
   13668:	mov	r5, #0
   1366c:	mov	r4, #97	; 0x61
   13670:	b	12cc0 <__assert_fail@plt+0x1e34>
   13674:	mov	r5, #0
   13678:	mov	r3, r5
   1367c:	mov	r4, #92	; 0x5c
   13680:	b	13014 <__assert_fail@plt+0x2188>
   13684:	ldr	r3, [sp, #48]	; 0x30
   13688:	ldrb	r5, [r3, r6]
   1368c:	adds	r5, r5, #0
   13690:	movne	r5, #1
   13694:	b	12d64 <__assert_fail@plt+0x1ed8>
   13698:	cmp	sl, #2
   1369c:	movne	r3, #0
   136a0:	moveq	r3, #1
   136a4:	ldr	r1, [sp, #32]
   136a8:	cmp	fp, #0
   136ac:	andeq	r2, r3, r1
   136b0:	movne	r2, #0
   136b4:	cmp	r2, #0
   136b8:	bne	137d8 <__assert_fail@plt+0x294c>
   136bc:	eor	r2, r1, #1
   136c0:	uxtb	r2, r2
   136c4:	and	r3, r3, r2
   136c8:	ldr	r1, [sp, #68]	; 0x44
   136cc:	ands	r3, r1, r3
   136d0:	beq	13764 <__assert_fail@plt+0x28d8>
   136d4:	ldr	r2, [sp, #40]	; 0x28
   136d8:	cmp	r2, #0
   136dc:	bne	13714 <__assert_fail@plt+0x2888>
   136e0:	ldr	r2, [sp, #72]	; 0x48
   136e4:	adds	r2, r2, #0
   136e8:	movne	r2, #1
   136ec:	cmp	r9, #0
   136f0:	movne	r2, #0
   136f4:	str	r2, [sp, #68]	; 0x44
   136f8:	mov	sl, #2
   136fc:	ldr	r1, [sp, #40]	; 0x28
   13700:	str	r1, [sp, #32]
   13704:	cmp	r2, #0
   13708:	beq	13758 <__assert_fail@plt+0x28cc>
   1370c:	ldr	r9, [sp, #72]	; 0x48
   13710:	b	1246c <__assert_fail@plt+0x15e0>
   13714:	ldr	r3, [sp, #168]	; 0xa8
   13718:	str	r3, [sp, #16]
   1371c:	ldr	r3, [sp, #164]	; 0xa4
   13720:	str	r3, [sp, #12]
   13724:	ldr	r3, [sp, #160]	; 0xa0
   13728:	str	r3, [sp, #8]
   1372c:	ldr	r3, [sp, #156]	; 0x9c
   13730:	str	r3, [sp, #4]
   13734:	mov	r3, #5
   13738:	str	r3, [sp]
   1373c:	ldr	r3, [sp, #24]
   13740:	ldr	r2, [sp, #48]	; 0x30
   13744:	ldr	r1, [sp, #72]	; 0x48
   13748:	ldr	r0, [sp, #64]	; 0x40
   1374c:	bl	123f4 <__assert_fail@plt+0x1568>
   13750:	mov	fp, r0
   13754:	b	13874 <__assert_fail@plt+0x29e8>
   13758:	mov	r8, r9
   1375c:	mov	r2, r3
   13760:	b	13768 <__assert_fail@plt+0x28dc>
   13764:	mov	r8, r9
   13768:	ldr	r3, [sp, #60]	; 0x3c
   1376c:	cmp	r3, #0
   13770:	moveq	r2, #0
   13774:	andne	r2, r2, #1
   13778:	cmp	r2, #0
   1377c:	beq	137ac <__assert_fail@plt+0x2920>
   13780:	mov	r2, r3
   13784:	ldrb	r3, [r3]
   13788:	cmp	r3, #0
   1378c:	beq	137ac <__assert_fail@plt+0x2920>
   13790:	ldr	r1, [sp, #64]	; 0x40
   13794:	cmp	r8, fp
   13798:	strbhi	r3, [r1, fp]
   1379c:	add	fp, fp, #1
   137a0:	ldrb	r3, [r2, #1]!
   137a4:	cmp	r3, #0
   137a8:	bne	13794 <__assert_fail@plt+0x2908>
   137ac:	cmp	r8, fp
   137b0:	bls	13874 <__assert_fail@plt+0x29e8>
   137b4:	mov	r3, #0
   137b8:	ldr	r2, [sp, #64]	; 0x40
   137bc:	strb	r3, [r2, fp]
   137c0:	b	13874 <__assert_fail@plt+0x29e8>
   137c4:	mov	r8, r9
   137c8:	mov	r7, sl
   137cc:	ldr	r3, [sp, #32]
   137d0:	str	r3, [sp, #28]
   137d4:	b	1381c <__assert_fail@plt+0x2990>
   137d8:	mov	r8, r9
   137dc:	mov	r7, #2
   137e0:	b	1381c <__assert_fail@plt+0x2990>
   137e4:	mov	r8, r9
   137e8:	mov	r7, sl
   137ec:	b	1381c <__assert_fail@plt+0x2990>
   137f0:	mov	r8, r9
   137f4:	mov	r7, sl
   137f8:	b	1381c <__assert_fail@plt+0x2990>
   137fc:	mov	r8, r9
   13800:	mov	r7, sl
   13804:	b	1381c <__assert_fail@plt+0x2990>
   13808:	mov	r8, r9
   1380c:	mov	r7, sl
   13810:	b	1381c <__assert_fail@plt+0x2990>
   13814:	mov	r8, r9
   13818:	mov	r7, sl
   1381c:	ldr	r3, [sp, #28]
   13820:	cmp	r7, #2
   13824:	movne	r3, #0
   13828:	andeq	r3, r3, #1
   1382c:	cmp	r3, #0
   13830:	movne	r7, #4
   13834:	ldr	r3, [sp, #168]	; 0xa8
   13838:	str	r3, [sp, #16]
   1383c:	ldr	r3, [sp, #164]	; 0xa4
   13840:	str	r3, [sp, #12]
   13844:	mov	r3, #0
   13848:	str	r3, [sp, #8]
   1384c:	ldr	r3, [sp, #156]	; 0x9c
   13850:	bic	r3, r3, #2
   13854:	str	r3, [sp, #4]
   13858:	str	r7, [sp]
   1385c:	ldr	r3, [sp, #24]
   13860:	ldr	r2, [sp, #48]	; 0x30
   13864:	mov	r1, r8
   13868:	ldr	r0, [sp, #64]	; 0x40
   1386c:	bl	123f4 <__assert_fail@plt+0x1568>
   13870:	mov	fp, r0
   13874:	mov	r0, fp
   13878:	add	sp, sp, #116	; 0x74
   1387c:	ldrd	r4, [sp]
   13880:	ldrd	r6, [sp, #8]
   13884:	ldrd	r8, [sp, #16]
   13888:	ldrd	sl, [sp, #24]
   1388c:	add	sp, sp, #32
   13890:	pop	{pc}		; (ldr pc, [sp], #4)
   13894:	mov	r8, r9
   13898:	mov	r7, sl
   1389c:	b	13834 <__assert_fail@plt+0x29a8>
   138a0:	add	fp, fp, #4
   138a4:	str	r3, [sp, #36]	; 0x24
   138a8:	mov	r5, #0
   138ac:	mov	r4, #48	; 0x30
   138b0:	b	12c68 <__assert_fail@plt+0x1ddc>
   138b4:	mov	r3, #1
   138b8:	str	r3, [sp, #32]
   138bc:	str	r3, [sp, #28]
   138c0:	str	r3, [sp, #52]	; 0x34
   138c4:	movw	r3, #27312	; 0x6ab0
   138c8:	movt	r3, #1
   138cc:	str	r3, [sp, #60]	; 0x3c
   138d0:	mov	fp, #0
   138d4:	mov	sl, #5
   138d8:	b	124cc <__assert_fail@plt+0x1640>
   138dc:	ldr	r3, [sp, #48]	; 0x30
   138e0:	ldrb	r4, [r3, r6]
   138e4:	cmp	r4, #126	; 0x7e
   138e8:	ldrls	pc, [pc, r4, lsl #2]
   138ec:	b	131d8 <__assert_fail@plt+0x234c>
   138f0:	andeq	r2, r1, r0, ror #18
   138f4:	ldrdeq	r3, [r1], -r8
   138f8:	ldrdeq	r3, [r1], -r8
   138fc:	ldrdeq	r3, [r1], -r8
   13900:	ldrdeq	r3, [r1], -r8
   13904:	ldrdeq	r3, [r1], -r8
   13908:	ldrdeq	r3, [r1], -r8
   1390c:	andeq	r3, r1, r8, ror #12
   13910:	andeq	r2, r1, r4, lsl #24
   13914:	andeq	r2, r1, r8, lsr #31
   13918:	andeq	r3, r1, r4, rrx
   1391c:			; <UNDEFINED> instruction: 0x00012fbc
   13920:	andeq	r2, r1, r8, lsl ip
   13924:	andeq	r2, r1, ip, lsr #24
   13928:	ldrdeq	r3, [r1], -r8
   1392c:	ldrdeq	r3, [r1], -r8
   13930:	ldrdeq	r3, [r1], -r8
   13934:	ldrdeq	r3, [r1], -r8
   13938:	ldrdeq	r3, [r1], -r8
   1393c:	ldrdeq	r3, [r1], -r8
   13940:	ldrdeq	r3, [r1], -r8
   13944:	ldrdeq	r3, [r1], -r8
   13948:	ldrdeq	r3, [r1], -r8
   1394c:	ldrdeq	r3, [r1], -r8
   13950:	ldrdeq	r3, [r1], -r8
   13954:	ldrdeq	r3, [r1], -r8
   13958:	ldrdeq	r3, [r1], -r8
   1395c:	ldrdeq	r3, [r1], -r8
   13960:	ldrdeq	r3, [r1], -r8
   13964:	ldrdeq	r3, [r1], -r8
   13968:	ldrdeq	r3, [r1], -r8
   1396c:	ldrdeq	r3, [r1], -r8
   13970:	andeq	r3, r1, ip, ror #1
   13974:	andeq	r3, r1, r8, lsr #2
   13978:	andeq	r3, r1, r8, lsr #2
   1397c:	andeq	r3, r1, r0, ror #1
   13980:	andeq	r3, r1, r8, lsr #2
   13984:	andeq	r3, r1, ip, asr #12
   13988:	andeq	r3, r1, r8, lsr #2
   1398c:	andeq	r3, r1, r8, lsr r1
   13990:	andeq	r3, r1, r8, lsr #2
   13994:	andeq	r3, r1, r8, lsr #2
   13998:	andeq	r3, r1, r8, lsr #2
   1399c:	andeq	r3, r1, ip, asr #12
   139a0:	andeq	r3, r1, ip, asr #12
   139a4:	andeq	r3, r1, ip, asr #12
   139a8:	andeq	r3, r1, ip, asr #12
   139ac:	andeq	r3, r1, ip, asr #12
   139b0:	andeq	r3, r1, ip, asr #12
   139b4:	andeq	r3, r1, ip, asr #12
   139b8:	andeq	r3, r1, ip, asr #12
   139bc:	andeq	r3, r1, ip, asr #12
   139c0:	andeq	r3, r1, ip, asr #12
   139c4:	andeq	r3, r1, ip, asr #12
   139c8:	andeq	r3, r1, ip, asr #12
   139cc:	andeq	r3, r1, ip, asr #12
   139d0:	andeq	r3, r1, ip, asr #12
   139d4:	andeq	r3, r1, ip, asr #12
   139d8:	andeq	r3, r1, ip, asr #12
   139dc:	andeq	r3, r1, r8, lsr #2
   139e0:	andeq	r3, r1, r8, lsr #2
   139e4:	andeq	r3, r1, r8, lsr #2
   139e8:	andeq	r3, r1, r8, lsr #2
   139ec:	muleq	r1, r8, sl
   139f0:	ldrdeq	r3, [r1], -r8
   139f4:	andeq	r3, r1, ip, asr #12
   139f8:	andeq	r3, r1, ip, asr #12
   139fc:	andeq	r3, r1, ip, asr #12
   13a00:	andeq	r3, r1, ip, asr #12
   13a04:	andeq	r3, r1, ip, asr #12
   13a08:	andeq	r3, r1, ip, asr #12
   13a0c:	andeq	r3, r1, ip, asr #12
   13a10:	andeq	r3, r1, ip, asr #12
   13a14:	andeq	r3, r1, ip, asr #12
   13a18:	andeq	r3, r1, ip, asr #12
   13a1c:	andeq	r3, r1, ip, asr #12
   13a20:	andeq	r3, r1, ip, asr #12
   13a24:	andeq	r3, r1, ip, asr #12
   13a28:	andeq	r3, r1, ip, asr #12
   13a2c:	andeq	r3, r1, ip, asr #12
   13a30:	andeq	r3, r1, ip, asr #12
   13a34:	andeq	r3, r1, ip, asr #12
   13a38:	andeq	r3, r1, ip, asr #12
   13a3c:	andeq	r3, r1, ip, asr #12
   13a40:	andeq	r3, r1, ip, asr #12
   13a44:	andeq	r3, r1, ip, asr #12
   13a48:	andeq	r3, r1, ip, asr #12
   13a4c:	andeq	r3, r1, ip, asr #12
   13a50:	andeq	r3, r1, ip, asr #12
   13a54:	andeq	r3, r1, ip, asr #12
   13a58:	andeq	r3, r1, ip, asr #12
   13a5c:	andeq	r3, r1, r8, lsr #2
   13a60:	ldrdeq	r2, [r1], -r0
   13a64:	andeq	r3, r1, ip, asr #12
   13a68:	andeq	r3, r1, r8, lsr #2
   13a6c:	andeq	r3, r1, ip, asr #12
   13a70:	andeq	r3, r1, r8, lsr #2
   13a74:	andeq	r3, r1, ip, asr #12
   13a78:	andeq	r3, r1, ip, asr #12
   13a7c:	andeq	r3, r1, ip, asr #12
   13a80:	andeq	r3, r1, ip, asr #12
   13a84:	andeq	r3, r1, ip, asr #12
   13a88:	andeq	r3, r1, ip, asr #12
   13a8c:	andeq	r3, r1, ip, asr #12
   13a90:	andeq	r3, r1, ip, asr #12
   13a94:	andeq	r3, r1, ip, asr #12
   13a98:	andeq	r3, r1, ip, asr #12
   13a9c:	andeq	r3, r1, ip, asr #12
   13aa0:	andeq	r3, r1, ip, asr #12
   13aa4:	andeq	r3, r1, ip, asr #12
   13aa8:	andeq	r3, r1, ip, asr #12
   13aac:	andeq	r3, r1, ip, asr #12
   13ab0:	andeq	r3, r1, ip, asr #12
   13ab4:	andeq	r3, r1, ip, asr #12
   13ab8:	andeq	r3, r1, ip, asr #12
   13abc:	andeq	r3, r1, ip, asr #12
   13ac0:	andeq	r3, r1, ip, asr #12
   13ac4:	andeq	r3, r1, ip, asr #12
   13ac8:	andeq	r3, r1, ip, asr #12
   13acc:	andeq	r3, r1, ip, asr #12
   13ad0:	andeq	r3, r1, ip, asr #12
   13ad4:	andeq	r3, r1, ip, asr #12
   13ad8:	andeq	r3, r1, ip, asr #12
   13adc:	muleq	r1, r0, r0
   13ae0:	andeq	r3, r1, r8, lsr #2
   13ae4:	muleq	r1, r0, r0
   13ae8:	andeq	r3, r1, r0, ror #1
   13aec:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13af0:	strd	r6, [sp, #8]
   13af4:	strd	r8, [sp, #16]
   13af8:	strd	sl, [sp, #24]
   13afc:	str	lr, [sp, #32]
   13b00:	sub	sp, sp, #52	; 0x34
   13b04:	mov	r5, r0
   13b08:	str	r1, [sp, #24]
   13b0c:	str	r2, [sp, #28]
   13b10:	mov	r4, r3
   13b14:	bl	10dc0 <__errno_location@plt>
   13b18:	str	r0, [sp, #32]
   13b1c:	ldr	r3, [r0]
   13b20:	str	r3, [sp, #36]	; 0x24
   13b24:	movw	r3, #28908	; 0x70ec
   13b28:	movt	r3, #2
   13b2c:	ldr	r6, [r3]
   13b30:	cmn	r5, #-2147483647	; 0x80000001
   13b34:	movne	r3, #0
   13b38:	moveq	r3, #1
   13b3c:	orrs	r3, r3, r5, lsr #31
   13b40:	bne	13ca4 <__assert_fail@plt+0x2e18>
   13b44:	movw	r3, #28908	; 0x70ec
   13b48:	movt	r3, #2
   13b4c:	ldr	r2, [r3, #4]
   13b50:	cmp	r2, r5
   13b54:	bgt	13bc4 <__assert_fail@plt+0x2d38>
   13b58:	str	r2, [sp, #44]	; 0x2c
   13b5c:	add	r3, r3, #8
   13b60:	cmp	r6, r3
   13b64:	beq	13ca8 <__assert_fail@plt+0x2e1c>
   13b68:	sub	r2, r5, r2
   13b6c:	mov	r3, #8
   13b70:	str	r3, [sp]
   13b74:	mvn	r3, #-2147483648	; 0x80000000
   13b78:	add	r2, r2, #1
   13b7c:	add	r1, sp, #44	; 0x2c
   13b80:	mov	r0, r6
   13b84:	bl	14cac <__assert_fail@plt+0x3e20>
   13b88:	mov	r6, r0
   13b8c:	movw	r3, #28908	; 0x70ec
   13b90:	movt	r3, #2
   13b94:	str	r0, [r3]
   13b98:	movw	r7, #28908	; 0x70ec
   13b9c:	movt	r7, #2
   13ba0:	ldr	r0, [r7, #4]
   13ba4:	ldr	r2, [sp, #44]	; 0x2c
   13ba8:	sub	r2, r2, r0
   13bac:	lsl	r2, r2, #3
   13bb0:	mov	r1, #0
   13bb4:	add	r0, r6, r0, lsl #3
   13bb8:	bl	10dd8 <memset@plt>
   13bbc:	ldr	r3, [sp, #44]	; 0x2c
   13bc0:	str	r3, [r7, #4]
   13bc4:	add	fp, r6, r5, lsl #3
   13bc8:	ldr	r8, [r6, r5, lsl #3]
   13bcc:	ldr	r7, [fp, #4]
   13bd0:	ldr	r3, [r4, #4]
   13bd4:	orr	r9, r3, #1
   13bd8:	add	sl, r4, #8
   13bdc:	ldr	r3, [r4, #44]	; 0x2c
   13be0:	str	r3, [sp, #16]
   13be4:	ldr	r3, [r4, #40]	; 0x28
   13be8:	str	r3, [sp, #12]
   13bec:	str	sl, [sp, #8]
   13bf0:	str	r9, [sp, #4]
   13bf4:	ldr	r3, [r4]
   13bf8:	str	r3, [sp]
   13bfc:	ldr	r3, [sp, #28]
   13c00:	ldr	r2, [sp, #24]
   13c04:	mov	r1, r8
   13c08:	mov	r0, r7
   13c0c:	bl	123f4 <__assert_fail@plt+0x1568>
   13c10:	cmp	r8, r0
   13c14:	bhi	13c78 <__assert_fail@plt+0x2dec>
   13c18:	add	r8, r0, #1
   13c1c:	str	r8, [r6, r5, lsl #3]
   13c20:	movw	r3, #29028	; 0x7164
   13c24:	movt	r3, #2
   13c28:	cmp	r7, r3
   13c2c:	beq	13c38 <__assert_fail@plt+0x2dac>
   13c30:	mov	r0, r7
   13c34:	bl	15b14 <__assert_fail@plt+0x4c88>
   13c38:	mov	r0, r8
   13c3c:	bl	14aa8 <__assert_fail@plt+0x3c1c>
   13c40:	mov	r7, r0
   13c44:	str	r0, [fp, #4]
   13c48:	ldr	r3, [r4, #44]	; 0x2c
   13c4c:	str	r3, [sp, #16]
   13c50:	ldr	r3, [r4, #40]	; 0x28
   13c54:	str	r3, [sp, #12]
   13c58:	str	sl, [sp, #8]
   13c5c:	str	r9, [sp, #4]
   13c60:	ldr	r3, [r4]
   13c64:	str	r3, [sp]
   13c68:	ldr	r3, [sp, #28]
   13c6c:	ldr	r2, [sp, #24]
   13c70:	mov	r1, r8
   13c74:	bl	123f4 <__assert_fail@plt+0x1568>
   13c78:	ldr	r3, [sp, #32]
   13c7c:	ldr	r2, [sp, #36]	; 0x24
   13c80:	str	r2, [r3]
   13c84:	mov	r0, r7
   13c88:	add	sp, sp, #52	; 0x34
   13c8c:	ldrd	r4, [sp]
   13c90:	ldrd	r6, [sp, #8]
   13c94:	ldrd	r8, [sp, #16]
   13c98:	ldrd	sl, [sp, #24]
   13c9c:	add	sp, sp, #32
   13ca0:	pop	{pc}		; (ldr pc, [sp], #4)
   13ca4:	bl	10e74 <abort@plt>
   13ca8:	sub	r2, r5, r2
   13cac:	mov	r3, #8
   13cb0:	str	r3, [sp]
   13cb4:	mvn	r3, #-2147483648	; 0x80000000
   13cb8:	add	r2, r2, #1
   13cbc:	add	r1, sp, #44	; 0x2c
   13cc0:	mov	r0, #0
   13cc4:	bl	14cac <__assert_fail@plt+0x3e20>
   13cc8:	mov	r6, r0
   13ccc:	movw	r3, #28908	; 0x70ec
   13cd0:	movt	r3, #2
   13cd4:	str	r0, [r3]
   13cd8:	ldrd	r2, [r3, #8]
   13cdc:	strd	r2, [r0]
   13ce0:	b	13b98 <__assert_fail@plt+0x2d0c>
   13ce4:	strd	r4, [sp, #-16]!
   13ce8:	str	r6, [sp, #8]
   13cec:	str	lr, [sp, #12]
   13cf0:	mov	r4, r0
   13cf4:	bl	10dc0 <__errno_location@plt>
   13cf8:	mov	r5, r0
   13cfc:	ldr	r6, [r0]
   13d00:	cmp	r4, #0
   13d04:	ldr	r3, [pc, #32]	; 13d2c <__assert_fail@plt+0x2ea0>
   13d08:	moveq	r4, r3
   13d0c:	mov	r1, #48	; 0x30
   13d10:	mov	r0, r4
   13d14:	bl	14e1c <__assert_fail@plt+0x3f90>
   13d18:	str	r6, [r5]
   13d1c:	ldrd	r4, [sp]
   13d20:	ldr	r6, [sp, #8]
   13d24:	add	sp, sp, #12
   13d28:	pop	{pc}		; (ldr pc, [sp], #4)
   13d2c:	andeq	r7, r2, r4, ror #4
   13d30:	subs	r3, r0, #0
   13d34:	ldr	r2, [pc, #8]	; 13d44 <__assert_fail@plt+0x2eb8>
   13d38:	moveq	r3, r2
   13d3c:	ldr	r0, [r3]
   13d40:	bx	lr
   13d44:	andeq	r7, r2, r4, ror #4
   13d48:	subs	r3, r0, #0
   13d4c:	ldr	r2, [pc, #8]	; 13d5c <__assert_fail@plt+0x2ed0>
   13d50:	moveq	r3, r2
   13d54:	str	r1, [r3]
   13d58:	bx	lr
   13d5c:	andeq	r7, r2, r4, ror #4
   13d60:	push	{lr}		; (str lr, [sp, #-4]!)
   13d64:	subs	r3, r0, #0
   13d68:	ldr	r0, [pc, #44]	; 13d9c <__assert_fail@plt+0x2f10>
   13d6c:	moveq	r3, r0
   13d70:	add	r3, r3, #8
   13d74:	lsr	lr, r1, #5
   13d78:	and	r1, r1, #31
   13d7c:	ldr	ip, [r3, lr, lsl #2]
   13d80:	lsr	r0, ip, r1
   13d84:	eor	r2, r2, r0
   13d88:	and	r2, r2, #1
   13d8c:	eor	r1, ip, r2, lsl r1
   13d90:	str	r1, [r3, lr, lsl #2]
   13d94:	and	r0, r0, #1
   13d98:	pop	{pc}		; (ldr pc, [sp], #4)
   13d9c:	andeq	r7, r2, r4, ror #4
   13da0:	subs	r3, r0, #0
   13da4:	ldr	r2, [pc, #12]	; 13db8 <__assert_fail@plt+0x2f2c>
   13da8:	moveq	r3, r2
   13dac:	ldr	r0, [r3, #4]
   13db0:	str	r1, [r3, #4]
   13db4:	bx	lr
   13db8:	andeq	r7, r2, r4, ror #4
   13dbc:	subs	r3, r0, #0
   13dc0:	ldr	r0, [pc, #44]	; 13df4 <__assert_fail@plt+0x2f68>
   13dc4:	moveq	r3, r0
   13dc8:	mov	r0, #10
   13dcc:	str	r0, [r3]
   13dd0:	cmp	r2, #0
   13dd4:	cmpne	r1, #0
   13dd8:	beq	13de8 <__assert_fail@plt+0x2f5c>
   13ddc:	str	r1, [r3, #40]	; 0x28
   13de0:	str	r2, [r3, #44]	; 0x2c
   13de4:	bx	lr
   13de8:	str	r4, [sp, #-8]!
   13dec:	str	lr, [sp, #4]
   13df0:	bl	10e74 <abort@plt>
   13df4:	andeq	r7, r2, r4, ror #4
   13df8:	strd	r4, [sp, #-32]!	; 0xffffffe0
   13dfc:	strd	r6, [sp, #8]
   13e00:	strd	r8, [sp, #16]
   13e04:	str	sl, [sp, #24]
   13e08:	str	lr, [sp, #28]
   13e0c:	sub	sp, sp, #24
   13e10:	mov	r7, r0
   13e14:	mov	r8, r1
   13e18:	mov	r9, r2
   13e1c:	mov	sl, r3
   13e20:	ldr	r4, [sp, #56]	; 0x38
   13e24:	cmp	r4, #0
   13e28:	ldr	r3, [pc, #104]	; 13e98 <__assert_fail@plt+0x300c>
   13e2c:	moveq	r4, r3
   13e30:	bl	10dc0 <__errno_location@plt>
   13e34:	mov	r5, r0
   13e38:	ldr	r6, [r0]
   13e3c:	ldr	r3, [r4, #44]	; 0x2c
   13e40:	str	r3, [sp, #16]
   13e44:	ldr	r3, [r4, #40]	; 0x28
   13e48:	str	r3, [sp, #12]
   13e4c:	add	r3, r4, #8
   13e50:	str	r3, [sp, #8]
   13e54:	ldr	r3, [r4, #4]
   13e58:	str	r3, [sp, #4]
   13e5c:	ldr	r3, [r4]
   13e60:	str	r3, [sp]
   13e64:	mov	r3, sl
   13e68:	mov	r2, r9
   13e6c:	mov	r1, r8
   13e70:	mov	r0, r7
   13e74:	bl	123f4 <__assert_fail@plt+0x1568>
   13e78:	str	r6, [r5]
   13e7c:	add	sp, sp, #24
   13e80:	ldrd	r4, [sp]
   13e84:	ldrd	r6, [sp, #8]
   13e88:	ldrd	r8, [sp, #16]
   13e8c:	ldr	sl, [sp, #24]
   13e90:	add	sp, sp, #28
   13e94:	pop	{pc}		; (ldr pc, [sp], #4)
   13e98:	andeq	r7, r2, r4, ror #4
   13e9c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   13ea0:	strd	r6, [sp, #8]
   13ea4:	strd	r8, [sp, #16]
   13ea8:	strd	sl, [sp, #24]
   13eac:	str	lr, [sp, #32]
   13eb0:	sub	sp, sp, #44	; 0x2c
   13eb4:	mov	r8, r0
   13eb8:	mov	sl, r1
   13ebc:	mov	r6, r2
   13ec0:	subs	r4, r3, #0
   13ec4:	ldr	r3, [pc, #200]	; 13f94 <__assert_fail@plt+0x3108>
   13ec8:	moveq	r4, r3
   13ecc:	bl	10dc0 <__errno_location@plt>
   13ed0:	mov	r7, r0
   13ed4:	ldr	fp, [r0]
   13ed8:	ldr	r5, [r4, #4]
   13edc:	cmp	r6, #0
   13ee0:	orreq	r5, r5, #1
   13ee4:	add	r9, r4, #8
   13ee8:	ldr	r3, [r4, #44]	; 0x2c
   13eec:	str	r3, [sp, #16]
   13ef0:	ldr	r3, [r4, #40]	; 0x28
   13ef4:	str	r3, [sp, #12]
   13ef8:	str	r9, [sp, #8]
   13efc:	str	r5, [sp, #4]
   13f00:	ldr	r3, [r4]
   13f04:	str	r3, [sp]
   13f08:	str	sl, [sp, #36]	; 0x24
   13f0c:	mov	r3, sl
   13f10:	str	r8, [sp, #32]
   13f14:	mov	r2, r8
   13f18:	mov	r1, #0
   13f1c:	mov	r0, r1
   13f20:	bl	123f4 <__assert_fail@plt+0x1568>
   13f24:	mov	sl, r0
   13f28:	add	r8, r0, #1
   13f2c:	mov	r0, r8
   13f30:	bl	14aa8 <__assert_fail@plt+0x3c1c>
   13f34:	str	r0, [sp, #28]
   13f38:	ldr	r3, [r4, #44]	; 0x2c
   13f3c:	str	r3, [sp, #16]
   13f40:	ldr	r3, [r4, #40]	; 0x28
   13f44:	str	r3, [sp, #12]
   13f48:	str	r9, [sp, #8]
   13f4c:	str	r5, [sp, #4]
   13f50:	ldr	r3, [r4]
   13f54:	str	r3, [sp]
   13f58:	ldr	r3, [sp, #36]	; 0x24
   13f5c:	ldr	r2, [sp, #32]
   13f60:	mov	r1, r8
   13f64:	bl	123f4 <__assert_fail@plt+0x1568>
   13f68:	str	fp, [r7]
   13f6c:	cmp	r6, #0
   13f70:	strne	sl, [r6]
   13f74:	ldr	r0, [sp, #28]
   13f78:	add	sp, sp, #44	; 0x2c
   13f7c:	ldrd	r4, [sp]
   13f80:	ldrd	r6, [sp, #8]
   13f84:	ldrd	r8, [sp, #16]
   13f88:	ldrd	sl, [sp, #24]
   13f8c:	add	sp, sp, #32
   13f90:	pop	{pc}		; (ldr pc, [sp], #4)
   13f94:	andeq	r7, r2, r4, ror #4
   13f98:	str	r4, [sp, #-8]!
   13f9c:	str	lr, [sp, #4]
   13fa0:	mov	r3, r2
   13fa4:	mov	r2, #0
   13fa8:	bl	13e9c <__assert_fail@plt+0x3010>
   13fac:	ldr	r4, [sp]
   13fb0:	add	sp, sp, #4
   13fb4:	pop	{pc}		; (ldr pc, [sp], #4)
   13fb8:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13fbc:	strd	r6, [sp, #8]
   13fc0:	str	r8, [sp, #16]
   13fc4:	str	lr, [sp, #20]
   13fc8:	movw	r3, #28908	; 0x70ec
   13fcc:	movt	r3, #2
   13fd0:	ldr	r7, [r3]
   13fd4:	ldr	r3, [r3, #4]
   13fd8:	cmp	r3, #1
   13fdc:	ble	14008 <__assert_fail@plt+0x317c>
   13fe0:	mov	r4, #1
   13fe4:	add	r6, r7, #4
   13fe8:	movw	r5, #28908	; 0x70ec
   13fec:	movt	r5, #2
   13ff0:	ldr	r0, [r6, r4, lsl #3]
   13ff4:	bl	15b14 <__assert_fail@plt+0x4c88>
   13ff8:	add	r4, r4, #1
   13ffc:	ldr	r3, [r5, #4]
   14000:	cmp	r3, r4
   14004:	bgt	13ff0 <__assert_fail@plt+0x3164>
   14008:	ldr	r0, [r7, #4]
   1400c:	movw	r3, #29028	; 0x7164
   14010:	movt	r3, #2
   14014:	cmp	r0, r3
   14018:	beq	1403c <__assert_fail@plt+0x31b0>
   1401c:	bl	15b14 <__assert_fail@plt+0x4c88>
   14020:	movw	r3, #28908	; 0x70ec
   14024:	movt	r3, #2
   14028:	mov	r2, #256	; 0x100
   1402c:	str	r2, [r3, #8]
   14030:	movw	r2, #29028	; 0x7164
   14034:	movt	r2, #2
   14038:	str	r2, [r3, #12]
   1403c:	ldr	r3, [pc, #64]	; 14084 <__assert_fail@plt+0x31f8>
   14040:	cmp	r7, r3
   14044:	beq	14060 <__assert_fail@plt+0x31d4>
   14048:	mov	r0, r7
   1404c:	bl	15b14 <__assert_fail@plt+0x4c88>
   14050:	movw	r3, #28908	; 0x70ec
   14054:	movt	r3, #2
   14058:	add	r2, r3, #8
   1405c:	str	r2, [r3]
   14060:	movw	r3, #28908	; 0x70ec
   14064:	movt	r3, #2
   14068:	mov	r2, #1
   1406c:	str	r2, [r3, #4]
   14070:	ldrd	r4, [sp]
   14074:	ldrd	r6, [sp, #8]
   14078:	ldr	r8, [sp, #16]
   1407c:	add	sp, sp, #20
   14080:	pop	{pc}		; (ldr pc, [sp], #4)
   14084:	strdeq	r7, [r2], -r4
   14088:	str	r4, [sp, #-8]!
   1408c:	str	lr, [sp, #4]
   14090:	ldr	r3, [pc, #16]	; 140a8 <__assert_fail@plt+0x321c>
   14094:	mvn	r2, #0
   14098:	bl	13aec <__assert_fail@plt+0x2c60>
   1409c:	ldr	r4, [sp]
   140a0:	add	sp, sp, #4
   140a4:	pop	{pc}		; (ldr pc, [sp], #4)
   140a8:	andeq	r7, r2, r4, ror #4
   140ac:	str	r4, [sp, #-8]!
   140b0:	str	lr, [sp, #4]
   140b4:	ldr	r3, [pc, #12]	; 140c8 <__assert_fail@plt+0x323c>
   140b8:	bl	13aec <__assert_fail@plt+0x2c60>
   140bc:	ldr	r4, [sp]
   140c0:	add	sp, sp, #4
   140c4:	pop	{pc}		; (ldr pc, [sp], #4)
   140c8:	andeq	r7, r2, r4, ror #4
   140cc:	str	r4, [sp, #-8]!
   140d0:	str	lr, [sp, #4]
   140d4:	mov	r1, r0
   140d8:	mov	r0, #0
   140dc:	bl	14088 <__assert_fail@plt+0x31fc>
   140e0:	ldr	r4, [sp]
   140e4:	add	sp, sp, #4
   140e8:	pop	{pc}		; (ldr pc, [sp], #4)
   140ec:	str	r4, [sp, #-8]!
   140f0:	str	lr, [sp, #4]
   140f4:	mov	r2, r1
   140f8:	mov	r1, r0
   140fc:	mov	r0, #0
   14100:	bl	140ac <__assert_fail@plt+0x3220>
   14104:	ldr	r4, [sp]
   14108:	add	sp, sp, #4
   1410c:	pop	{pc}		; (ldr pc, [sp], #4)
   14110:	strd	r4, [sp, #-12]!
   14114:	str	lr, [sp, #8]
   14118:	sub	sp, sp, #52	; 0x34
   1411c:	mov	r4, r0
   14120:	mov	r5, r2
   14124:	mov	r0, sp
   14128:	bl	12260 <__assert_fail@plt+0x13d4>
   1412c:	mov	r3, sp
   14130:	mvn	r2, #0
   14134:	mov	r1, r5
   14138:	mov	r0, r4
   1413c:	bl	13aec <__assert_fail@plt+0x2c60>
   14140:	add	sp, sp, #52	; 0x34
   14144:	ldrd	r4, [sp]
   14148:	add	sp, sp, #8
   1414c:	pop	{pc}		; (ldr pc, [sp], #4)
   14150:	strd	r4, [sp, #-16]!
   14154:	str	r6, [sp, #8]
   14158:	str	lr, [sp, #12]
   1415c:	sub	sp, sp, #48	; 0x30
   14160:	mov	r4, r0
   14164:	mov	r5, r2
   14168:	mov	r6, r3
   1416c:	mov	r0, sp
   14170:	bl	12260 <__assert_fail@plt+0x13d4>
   14174:	mov	r3, sp
   14178:	mov	r2, r6
   1417c:	mov	r1, r5
   14180:	mov	r0, r4
   14184:	bl	13aec <__assert_fail@plt+0x2c60>
   14188:	add	sp, sp, #48	; 0x30
   1418c:	ldrd	r4, [sp]
   14190:	ldr	r6, [sp, #8]
   14194:	add	sp, sp, #12
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	str	r4, [sp, #-8]!
   141a0:	str	lr, [sp, #4]
   141a4:	mov	r2, r1
   141a8:	mov	r1, r0
   141ac:	mov	r0, #0
   141b0:	bl	14110 <__assert_fail@plt+0x3284>
   141b4:	ldr	r4, [sp]
   141b8:	add	sp, sp, #4
   141bc:	pop	{pc}		; (ldr pc, [sp], #4)
   141c0:	str	r4, [sp, #-8]!
   141c4:	str	lr, [sp, #4]
   141c8:	mov	r3, r2
   141cc:	mov	r2, r1
   141d0:	mov	r1, r0
   141d4:	mov	r0, #0
   141d8:	bl	14150 <__assert_fail@plt+0x32c4>
   141dc:	ldr	r4, [sp]
   141e0:	add	sp, sp, #4
   141e4:	pop	{pc}		; (ldr pc, [sp], #4)
   141e8:	strd	r4, [sp, #-12]!
   141ec:	str	lr, [sp, #8]
   141f0:	sub	sp, sp, #52	; 0x34
   141f4:	mov	r4, r0
   141f8:	mov	r5, r1
   141fc:	mov	r1, r2
   14200:	ldr	r0, [pc, #92]	; 14264 <__assert_fail@plt+0x33d8>
   14204:	ldrd	r2, [r0]
   14208:	strd	r2, [sp]
   1420c:	ldrd	r2, [r0, #8]
   14210:	strd	r2, [sp, #8]
   14214:	ldrd	r2, [r0, #16]
   14218:	strd	r2, [sp, #16]
   1421c:	ldrd	r2, [r0, #24]
   14220:	strd	r2, [sp, #24]
   14224:	ldrd	r2, [r0, #32]
   14228:	strd	r2, [sp, #32]
   1422c:	ldrd	r2, [r0, #40]	; 0x28
   14230:	strd	r2, [sp, #40]	; 0x28
   14234:	mov	r2, #1
   14238:	mov	r0, sp
   1423c:	bl	13d60 <__assert_fail@plt+0x2ed4>
   14240:	mov	r3, sp
   14244:	mov	r2, r5
   14248:	mov	r1, r4
   1424c:	mov	r0, #0
   14250:	bl	13aec <__assert_fail@plt+0x2c60>
   14254:	add	sp, sp, #52	; 0x34
   14258:	ldrd	r4, [sp]
   1425c:	add	sp, sp, #8
   14260:	pop	{pc}		; (ldr pc, [sp], #4)
   14264:	andeq	r7, r2, r4, ror #4
   14268:	str	r4, [sp, #-8]!
   1426c:	str	lr, [sp, #4]
   14270:	mov	r2, r1
   14274:	mvn	r1, #0
   14278:	bl	141e8 <__assert_fail@plt+0x335c>
   1427c:	ldr	r4, [sp]
   14280:	add	sp, sp, #4
   14284:	pop	{pc}		; (ldr pc, [sp], #4)
   14288:	str	r4, [sp, #-8]!
   1428c:	str	lr, [sp, #4]
   14290:	mov	r1, #58	; 0x3a
   14294:	bl	14268 <__assert_fail@plt+0x33dc>
   14298:	ldr	r4, [sp]
   1429c:	add	sp, sp, #4
   142a0:	pop	{pc}		; (ldr pc, [sp], #4)
   142a4:	str	r4, [sp, #-8]!
   142a8:	str	lr, [sp, #4]
   142ac:	mov	r2, #58	; 0x3a
   142b0:	bl	141e8 <__assert_fail@plt+0x335c>
   142b4:	ldr	r4, [sp]
   142b8:	add	sp, sp, #4
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:	strd	r4, [sp, #-12]!
   142c4:	str	lr, [sp, #8]
   142c8:	sub	sp, sp, #100	; 0x64
   142cc:	mov	r4, r0
   142d0:	mov	r5, r2
   142d4:	mov	r0, sp
   142d8:	bl	12260 <__assert_fail@plt+0x13d4>
   142dc:	ldrd	r2, [sp]
   142e0:	strd	r2, [sp, #48]	; 0x30
   142e4:	ldrd	r2, [sp, #8]
   142e8:	strd	r2, [sp, #56]	; 0x38
   142ec:	ldrd	r2, [sp, #16]
   142f0:	strd	r2, [sp, #64]	; 0x40
   142f4:	ldrd	r2, [sp, #24]
   142f8:	strd	r2, [sp, #72]	; 0x48
   142fc:	ldrd	r2, [sp, #32]
   14300:	strd	r2, [sp, #80]	; 0x50
   14304:	ldrd	r2, [sp, #40]	; 0x28
   14308:	strd	r2, [sp, #88]	; 0x58
   1430c:	mov	r2, #1
   14310:	mov	r1, #58	; 0x3a
   14314:	add	r0, sp, #48	; 0x30
   14318:	bl	13d60 <__assert_fail@plt+0x2ed4>
   1431c:	add	r3, sp, #48	; 0x30
   14320:	mvn	r2, #0
   14324:	mov	r1, r5
   14328:	mov	r0, r4
   1432c:	bl	13aec <__assert_fail@plt+0x2c60>
   14330:	add	sp, sp, #100	; 0x64
   14334:	ldrd	r4, [sp]
   14338:	add	sp, sp, #8
   1433c:	pop	{pc}		; (ldr pc, [sp], #4)
   14340:	strd	r4, [sp, #-20]!	; 0xffffffec
   14344:	strd	r6, [sp, #8]
   14348:	str	lr, [sp, #16]
   1434c:	sub	sp, sp, #52	; 0x34
   14350:	mov	r4, r0
   14354:	mov	r5, r3
   14358:	ldr	r3, [pc, #92]	; 143bc <__assert_fail@plt+0x3530>
   1435c:	ldrd	r6, [r3]
   14360:	strd	r6, [sp]
   14364:	ldrd	r6, [r3, #8]
   14368:	strd	r6, [sp, #8]
   1436c:	ldrd	r6, [r3, #16]
   14370:	strd	r6, [sp, #16]
   14374:	ldrd	r6, [r3, #24]
   14378:	strd	r6, [sp, #24]
   1437c:	ldrd	r6, [r3, #32]
   14380:	strd	r6, [sp, #32]
   14384:	ldrd	r6, [r3, #40]	; 0x28
   14388:	strd	r6, [sp, #40]	; 0x28
   1438c:	mov	r0, sp
   14390:	bl	13dbc <__assert_fail@plt+0x2f30>
   14394:	mov	r3, sp
   14398:	ldr	r2, [sp, #72]	; 0x48
   1439c:	mov	r1, r5
   143a0:	mov	r0, r4
   143a4:	bl	13aec <__assert_fail@plt+0x2c60>
   143a8:	add	sp, sp, #52	; 0x34
   143ac:	ldrd	r4, [sp]
   143b0:	ldrd	r6, [sp, #8]
   143b4:	add	sp, sp, #16
   143b8:	pop	{pc}		; (ldr pc, [sp], #4)
   143bc:	andeq	r7, r2, r4, ror #4
   143c0:	push	{lr}		; (str lr, [sp, #-4]!)
   143c4:	sub	sp, sp, #12
   143c8:	mvn	ip, #0
   143cc:	str	ip, [sp]
   143d0:	bl	14340 <__assert_fail@plt+0x34b4>
   143d4:	add	sp, sp, #12
   143d8:	pop	{pc}		; (ldr pc, [sp], #4)
   143dc:	str	r4, [sp, #-8]!
   143e0:	str	lr, [sp, #4]
   143e4:	mov	r3, r2
   143e8:	mov	r2, r1
   143ec:	mov	r1, r0
   143f0:	mov	r0, #0
   143f4:	bl	143c0 <__assert_fail@plt+0x3534>
   143f8:	ldr	r4, [sp]
   143fc:	add	sp, sp, #4
   14400:	pop	{pc}		; (ldr pc, [sp], #4)
   14404:	push	{lr}		; (str lr, [sp, #-4]!)
   14408:	sub	sp, sp, #12
   1440c:	str	r3, [sp]
   14410:	mov	r3, r2
   14414:	mov	r2, r1
   14418:	mov	r1, r0
   1441c:	mov	r0, #0
   14420:	bl	14340 <__assert_fail@plt+0x34b4>
   14424:	add	sp, sp, #12
   14428:	pop	{pc}		; (ldr pc, [sp], #4)
   1442c:	str	r4, [sp, #-8]!
   14430:	str	lr, [sp, #4]
   14434:	ldr	r3, [pc, #12]	; 14448 <__assert_fail@plt+0x35bc>
   14438:	bl	13aec <__assert_fail@plt+0x2c60>
   1443c:	ldr	r4, [sp]
   14440:	add	sp, sp, #4
   14444:	pop	{pc}		; (ldr pc, [sp], #4)
   14448:	strdeq	r7, [r2], -ip
   1444c:	str	r4, [sp, #-8]!
   14450:	str	lr, [sp, #4]
   14454:	mov	r2, r1
   14458:	mov	r1, r0
   1445c:	mov	r0, #0
   14460:	bl	1442c <__assert_fail@plt+0x35a0>
   14464:	ldr	r4, [sp]
   14468:	add	sp, sp, #4
   1446c:	pop	{pc}		; (ldr pc, [sp], #4)
   14470:	str	r4, [sp, #-8]!
   14474:	str	lr, [sp, #4]
   14478:	mvn	r2, #0
   1447c:	bl	1442c <__assert_fail@plt+0x35a0>
   14480:	ldr	r4, [sp]
   14484:	add	sp, sp, #4
   14488:	pop	{pc}		; (ldr pc, [sp], #4)
   1448c:	str	r4, [sp, #-8]!
   14490:	str	lr, [sp, #4]
   14494:	mov	r1, r0
   14498:	mov	r0, #0
   1449c:	bl	14470 <__assert_fail@plt+0x35e4>
   144a0:	ldr	r4, [sp]
   144a4:	add	sp, sp, #4
   144a8:	pop	{pc}		; (ldr pc, [sp], #4)
   144ac:	strd	r4, [sp, #-16]!
   144b0:	str	r6, [sp, #8]
   144b4:	str	lr, [sp, #12]
   144b8:	sub	sp, sp, #32
   144bc:	mov	r4, r0
   144c0:	ldr	r5, [sp, #48]	; 0x30
   144c4:	ldr	r6, [sp, #52]	; 0x34
   144c8:	cmp	r1, #0
   144cc:	beq	14598 <__assert_fail@plt+0x370c>
   144d0:	str	r3, [sp, #4]
   144d4:	str	r2, [sp]
   144d8:	mov	r3, r1
   144dc:	movw	r2, #27440	; 0x6b30
   144e0:	movt	r2, #1
   144e4:	mov	r1, #1
   144e8:	bl	10dfc <__fprintf_chk@plt>
   144ec:	mov	r2, #5
   144f0:	movw	r1, #27460	; 0x6b44
   144f4:	movt	r1, #1
   144f8:	mov	r0, #0
   144fc:	bl	10cc4 <dcgettext@plt>
   14500:	movw	r3, #2022	; 0x7e6
   14504:	str	r3, [sp]
   14508:	mov	r3, r0
   1450c:	movw	r2, #28188	; 0x6e1c
   14510:	movt	r2, #1
   14514:	mov	r1, #1
   14518:	mov	r0, r4
   1451c:	bl	10dfc <__fprintf_chk@plt>
   14520:	mov	r1, r4
   14524:	mov	r0, #10
   14528:	bl	10cb8 <fputc_unlocked@plt>
   1452c:	mov	r2, #5
   14530:	movw	r1, #27464	; 0x6b48
   14534:	movt	r1, #1
   14538:	mov	r0, #0
   1453c:	bl	10cc4 <dcgettext@plt>
   14540:	movw	r3, #27636	; 0x6bf4
   14544:	movt	r3, #1
   14548:	mov	r2, r0
   1454c:	mov	r1, #1
   14550:	mov	r0, r4
   14554:	bl	10dfc <__fprintf_chk@plt>
   14558:	mov	r1, r4
   1455c:	mov	r0, #10
   14560:	bl	10cb8 <fputc_unlocked@plt>
   14564:	cmp	r6, #9
   14568:	ldrls	pc, [pc, r6, lsl #2]
   1456c:	b	14870 <__assert_fail@plt+0x39e4>
   14570:	ldrdeq	r4, [r1], -ip
   14574:			; <UNDEFINED> instruction: 0x000145b4
   14578:	strdeq	r4, [r1], -r0
   1457c:	andeq	r4, r1, r4, lsr #12
   14580:	andeq	r4, r1, r0, ror #12
   14584:	andeq	r4, r1, r4, lsr #13
   14588:	strdeq	r4, [r1], -r0
   1458c:	andeq	r4, r1, r4, asr #14
   14590:	andeq	r4, r1, r0, lsr #15
   14594:	andeq	r4, r1, r4, lsl #16
   14598:	str	r3, [sp]
   1459c:	mov	r3, r2
   145a0:	movw	r2, #27452	; 0x6b3c
   145a4:	movt	r2, #1
   145a8:	mov	r1, #1
   145ac:	bl	10dfc <__fprintf_chk@plt>
   145b0:	b	144ec <__assert_fail@plt+0x3660>
   145b4:	mov	r2, #5
   145b8:	movw	r1, #27672	; 0x6c18
   145bc:	movt	r1, #1
   145c0:	mov	r0, #0
   145c4:	bl	10cc4 <dcgettext@plt>
   145c8:	ldr	r3, [r5]
   145cc:	mov	r2, r0
   145d0:	mov	r1, #1
   145d4:	mov	r0, r4
   145d8:	bl	10dfc <__fprintf_chk@plt>
   145dc:	add	sp, sp, #32
   145e0:	ldrd	r4, [sp]
   145e4:	ldr	r6, [sp, #8]
   145e8:	add	sp, sp, #12
   145ec:	pop	{pc}		; (ldr pc, [sp], #4)
   145f0:	mov	r2, #5
   145f4:	movw	r1, #27688	; 0x6c28
   145f8:	movt	r1, #1
   145fc:	mov	r0, #0
   14600:	bl	10cc4 <dcgettext@plt>
   14604:	ldr	r3, [r5, #4]
   14608:	str	r3, [sp]
   1460c:	ldr	r3, [r5]
   14610:	mov	r2, r0
   14614:	mov	r1, #1
   14618:	mov	r0, r4
   1461c:	bl	10dfc <__fprintf_chk@plt>
   14620:	b	145dc <__assert_fail@plt+0x3750>
   14624:	mov	r2, #5
   14628:	movw	r1, #27712	; 0x6c40
   1462c:	movt	r1, #1
   14630:	mov	r0, #0
   14634:	bl	10cc4 <dcgettext@plt>
   14638:	ldr	r3, [r5, #8]
   1463c:	str	r3, [sp, #4]
   14640:	ldr	r3, [r5, #4]
   14644:	str	r3, [sp]
   14648:	ldr	r3, [r5]
   1464c:	mov	r2, r0
   14650:	mov	r1, #1
   14654:	mov	r0, r4
   14658:	bl	10dfc <__fprintf_chk@plt>
   1465c:	b	145dc <__assert_fail@plt+0x3750>
   14660:	mov	r2, #5
   14664:	movw	r1, #27740	; 0x6c5c
   14668:	movt	r1, #1
   1466c:	mov	r0, #0
   14670:	bl	10cc4 <dcgettext@plt>
   14674:	ldr	r3, [r5, #12]
   14678:	str	r3, [sp, #8]
   1467c:	ldr	r3, [r5, #8]
   14680:	str	r3, [sp, #4]
   14684:	ldr	r3, [r5, #4]
   14688:	str	r3, [sp]
   1468c:	ldr	r3, [r5]
   14690:	mov	r2, r0
   14694:	mov	r1, #1
   14698:	mov	r0, r4
   1469c:	bl	10dfc <__fprintf_chk@plt>
   146a0:	b	145dc <__assert_fail@plt+0x3750>
   146a4:	mov	r2, #5
   146a8:	movw	r1, #27772	; 0x6c7c
   146ac:	movt	r1, #1
   146b0:	mov	r0, #0
   146b4:	bl	10cc4 <dcgettext@plt>
   146b8:	ldr	r3, [r5, #16]
   146bc:	str	r3, [sp, #12]
   146c0:	ldr	r3, [r5, #12]
   146c4:	str	r3, [sp, #8]
   146c8:	ldr	r3, [r5, #8]
   146cc:	str	r3, [sp, #4]
   146d0:	ldr	r3, [r5, #4]
   146d4:	str	r3, [sp]
   146d8:	ldr	r3, [r5]
   146dc:	mov	r2, r0
   146e0:	mov	r1, #1
   146e4:	mov	r0, r4
   146e8:	bl	10dfc <__fprintf_chk@plt>
   146ec:	b	145dc <__assert_fail@plt+0x3750>
   146f0:	mov	r2, #5
   146f4:	movw	r1, #27808	; 0x6ca0
   146f8:	movt	r1, #1
   146fc:	mov	r0, #0
   14700:	bl	10cc4 <dcgettext@plt>
   14704:	ldr	r3, [r5, #20]
   14708:	str	r3, [sp, #16]
   1470c:	ldr	r3, [r5, #16]
   14710:	str	r3, [sp, #12]
   14714:	ldr	r3, [r5, #12]
   14718:	str	r3, [sp, #8]
   1471c:	ldr	r3, [r5, #8]
   14720:	str	r3, [sp, #4]
   14724:	ldr	r3, [r5, #4]
   14728:	str	r3, [sp]
   1472c:	ldr	r3, [r5]
   14730:	mov	r2, r0
   14734:	mov	r1, #1
   14738:	mov	r0, r4
   1473c:	bl	10dfc <__fprintf_chk@plt>
   14740:	b	145dc <__assert_fail@plt+0x3750>
   14744:	mov	r2, #5
   14748:	movw	r1, #27848	; 0x6cc8
   1474c:	movt	r1, #1
   14750:	mov	r0, #0
   14754:	bl	10cc4 <dcgettext@plt>
   14758:	ldr	r3, [r5, #24]
   1475c:	str	r3, [sp, #20]
   14760:	ldr	r3, [r5, #20]
   14764:	str	r3, [sp, #16]
   14768:	ldr	r3, [r5, #16]
   1476c:	str	r3, [sp, #12]
   14770:	ldr	r3, [r5, #12]
   14774:	str	r3, [sp, #8]
   14778:	ldr	r3, [r5, #8]
   1477c:	str	r3, [sp, #4]
   14780:	ldr	r3, [r5, #4]
   14784:	str	r3, [sp]
   14788:	ldr	r3, [r5]
   1478c:	mov	r2, r0
   14790:	mov	r1, #1
   14794:	mov	r0, r4
   14798:	bl	10dfc <__fprintf_chk@plt>
   1479c:	b	145dc <__assert_fail@plt+0x3750>
   147a0:	mov	r2, #5
   147a4:	movw	r1, #27892	; 0x6cf4
   147a8:	movt	r1, #1
   147ac:	mov	r0, #0
   147b0:	bl	10cc4 <dcgettext@plt>
   147b4:	ldr	r3, [r5, #28]
   147b8:	str	r3, [sp, #24]
   147bc:	ldr	r3, [r5, #24]
   147c0:	str	r3, [sp, #20]
   147c4:	ldr	r3, [r5, #20]
   147c8:	str	r3, [sp, #16]
   147cc:	ldr	r3, [r5, #16]
   147d0:	str	r3, [sp, #12]
   147d4:	ldr	r3, [r5, #12]
   147d8:	str	r3, [sp, #8]
   147dc:	ldr	r3, [r5, #8]
   147e0:	str	r3, [sp, #4]
   147e4:	ldr	r3, [r5, #4]
   147e8:	str	r3, [sp]
   147ec:	ldr	r3, [r5]
   147f0:	mov	r2, r0
   147f4:	mov	r1, #1
   147f8:	mov	r0, r4
   147fc:	bl	10dfc <__fprintf_chk@plt>
   14800:	b	145dc <__assert_fail@plt+0x3750>
   14804:	mov	r2, #5
   14808:	movw	r1, #27940	; 0x6d24
   1480c:	movt	r1, #1
   14810:	mov	r0, #0
   14814:	bl	10cc4 <dcgettext@plt>
   14818:	ldr	r3, [r5, #32]
   1481c:	str	r3, [sp, #28]
   14820:	ldr	r3, [r5, #28]
   14824:	str	r3, [sp, #24]
   14828:	ldr	r3, [r5, #24]
   1482c:	str	r3, [sp, #20]
   14830:	ldr	r3, [r5, #20]
   14834:	str	r3, [sp, #16]
   14838:	ldr	r3, [r5, #16]
   1483c:	str	r3, [sp, #12]
   14840:	ldr	r3, [r5, #12]
   14844:	str	r3, [sp, #8]
   14848:	ldr	r3, [r5, #8]
   1484c:	str	r3, [sp, #4]
   14850:	ldr	r3, [r5, #4]
   14854:	str	r3, [sp]
   14858:	ldr	r3, [r5]
   1485c:	mov	r2, r0
   14860:	mov	r1, #1
   14864:	mov	r0, r4
   14868:	bl	10dfc <__fprintf_chk@plt>
   1486c:	b	145dc <__assert_fail@plt+0x3750>
   14870:	mov	r2, #5
   14874:	movw	r1, #27992	; 0x6d58
   14878:	movt	r1, #1
   1487c:	mov	r0, #0
   14880:	bl	10cc4 <dcgettext@plt>
   14884:	ldr	r3, [r5, #32]
   14888:	str	r3, [sp, #28]
   1488c:	ldr	r3, [r5, #28]
   14890:	str	r3, [sp, #24]
   14894:	ldr	r3, [r5, #24]
   14898:	str	r3, [sp, #20]
   1489c:	ldr	r3, [r5, #20]
   148a0:	str	r3, [sp, #16]
   148a4:	ldr	r3, [r5, #16]
   148a8:	str	r3, [sp, #12]
   148ac:	ldr	r3, [r5, #12]
   148b0:	str	r3, [sp, #8]
   148b4:	ldr	r3, [r5, #8]
   148b8:	str	r3, [sp, #4]
   148bc:	ldr	r3, [r5, #4]
   148c0:	str	r3, [sp]
   148c4:	ldr	r3, [r5]
   148c8:	mov	r2, r0
   148cc:	mov	r1, #1
   148d0:	mov	r0, r4
   148d4:	bl	10dfc <__fprintf_chk@plt>
   148d8:	b	145dc <__assert_fail@plt+0x3750>
   148dc:	strd	r4, [sp, #-12]!
   148e0:	str	lr, [sp, #8]
   148e4:	sub	sp, sp, #12
   148e8:	ldr	r5, [sp, #24]
   148ec:	ldr	ip, [r5]
   148f0:	cmp	ip, #0
   148f4:	beq	1492c <__assert_fail@plt+0x3aa0>
   148f8:	mov	lr, r5
   148fc:	mov	ip, #0
   14900:	add	ip, ip, #1
   14904:	ldr	r4, [lr, #4]!
   14908:	cmp	r4, #0
   1490c:	bne	14900 <__assert_fail@plt+0x3a74>
   14910:	str	ip, [sp, #4]
   14914:	str	r5, [sp]
   14918:	bl	144ac <__assert_fail@plt+0x3620>
   1491c:	add	sp, sp, #12
   14920:	ldrd	r4, [sp]
   14924:	add	sp, sp, #8
   14928:	pop	{pc}		; (ldr pc, [sp], #4)
   1492c:	mov	ip, #0
   14930:	b	14910 <__assert_fail@plt+0x3a84>
   14934:	strd	r4, [sp, #-12]!
   14938:	str	lr, [sp, #8]
   1493c:	sub	sp, sp, #52	; 0x34
   14940:	ldr	r5, [sp, #64]	; 0x40
   14944:	add	r4, sp, #8
   14948:	mov	ip, #0
   1494c:	ldr	lr, [r5], #4
   14950:	str	lr, [r4], #4
   14954:	cmp	lr, #0
   14958:	beq	14968 <__assert_fail@plt+0x3adc>
   1495c:	add	ip, ip, #1
   14960:	cmp	ip, #10
   14964:	bne	1494c <__assert_fail@plt+0x3ac0>
   14968:	str	ip, [sp, #4]
   1496c:	add	ip, sp, #8
   14970:	str	ip, [sp]
   14974:	bl	144ac <__assert_fail@plt+0x3620>
   14978:	add	sp, sp, #52	; 0x34
   1497c:	ldrd	r4, [sp]
   14980:	add	sp, sp, #8
   14984:	pop	{pc}		; (ldr pc, [sp], #4)
   14988:	push	{r3}		; (str r3, [sp, #-4]!)
   1498c:	push	{lr}		; (str lr, [sp, #-4]!)
   14990:	sub	sp, sp, #16
   14994:	add	r3, sp, #24
   14998:	str	r3, [sp, #12]
   1499c:	str	r3, [sp]
   149a0:	ldr	r3, [sp, #20]
   149a4:	bl	14934 <__assert_fail@plt+0x3aa8>
   149a8:	add	sp, sp, #16
   149ac:	pop	{lr}		; (ldr lr, [sp], #4)
   149b0:	add	sp, sp, #4
   149b4:	bx	lr
   149b8:	str	r4, [sp, #-8]!
   149bc:	str	lr, [sp, #4]
   149c0:	movw	r3, #28996	; 0x7144
   149c4:	movt	r3, #2
   149c8:	ldr	r1, [r3]
   149cc:	mov	r0, #10
   149d0:	bl	10cb8 <fputc_unlocked@plt>
   149d4:	mov	r2, #5
   149d8:	movw	r1, #28052	; 0x6d94
   149dc:	movt	r1, #1
   149e0:	mov	r0, #0
   149e4:	bl	10cc4 <dcgettext@plt>
   149e8:	movw	r2, #28072	; 0x6da8
   149ec:	movt	r2, #1
   149f0:	mov	r1, r0
   149f4:	mov	r0, #1
   149f8:	bl	10de4 <__printf_chk@plt>
   149fc:	mov	r2, #5
   14a00:	movw	r1, #28096	; 0x6dc0
   14a04:	movt	r1, #1
   14a08:	mov	r0, #0
   14a0c:	bl	10cc4 <dcgettext@plt>
   14a10:	movw	r3, #26168	; 0x6638
   14a14:	movt	r3, #1
   14a18:	movw	r2, #26208	; 0x6660
   14a1c:	movt	r2, #1
   14a20:	mov	r1, r0
   14a24:	mov	r0, #1
   14a28:	bl	10de4 <__printf_chk@plt>
   14a2c:	mov	r2, #5
   14a30:	movw	r1, #28116	; 0x6dd4
   14a34:	movt	r1, #1
   14a38:	mov	r0, #0
   14a3c:	bl	10cc4 <dcgettext@plt>
   14a40:	movw	r2, #28156	; 0x6dfc
   14a44:	movt	r2, #1
   14a48:	mov	r1, r0
   14a4c:	mov	r0, #1
   14a50:	bl	10de4 <__printf_chk@plt>
   14a54:	ldr	r4, [sp]
   14a58:	add	sp, sp, #4
   14a5c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a60:	str	r4, [sp, #-8]!
   14a64:	str	lr, [sp, #4]
   14a68:	bl	158c4 <__assert_fail@plt+0x4a38>
   14a6c:	cmp	r0, #0
   14a70:	beq	14a80 <__assert_fail@plt+0x3bf4>
   14a74:	ldr	r4, [sp]
   14a78:	add	sp, sp, #4
   14a7c:	pop	{pc}		; (ldr pc, [sp], #4)
   14a80:	bl	14ef4 <__assert_fail@plt+0x4068>
   14a84:	str	r4, [sp, #-8]!
   14a88:	str	lr, [sp, #4]
   14a8c:	bl	158c4 <__assert_fail@plt+0x4a38>
   14a90:	cmp	r0, #0
   14a94:	beq	14aa4 <__assert_fail@plt+0x3c18>
   14a98:	ldr	r4, [sp]
   14a9c:	add	sp, sp, #4
   14aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   14aa4:	bl	14ef4 <__assert_fail@plt+0x4068>
   14aa8:	str	r4, [sp, #-8]!
   14aac:	str	lr, [sp, #4]
   14ab0:	bl	14a60 <__assert_fail@plt+0x3bd4>
   14ab4:	ldr	r4, [sp]
   14ab8:	add	sp, sp, #4
   14abc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ac0:	strd	r4, [sp, #-16]!
   14ac4:	str	r6, [sp, #8]
   14ac8:	str	lr, [sp, #12]
   14acc:	mov	r5, r0
   14ad0:	mov	r4, r1
   14ad4:	bl	15900 <__assert_fail@plt+0x4a74>
   14ad8:	cmp	r0, #0
   14adc:	beq	14af0 <__assert_fail@plt+0x3c64>
   14ae0:	ldrd	r4, [sp]
   14ae4:	ldr	r6, [sp, #8]
   14ae8:	add	sp, sp, #12
   14aec:	pop	{pc}		; (ldr pc, [sp], #4)
   14af0:	adds	r4, r4, #0
   14af4:	movne	r4, #1
   14af8:	cmp	r5, #0
   14afc:	moveq	r4, #1
   14b00:	cmp	r4, #0
   14b04:	beq	14ae0 <__assert_fail@plt+0x3c54>
   14b08:	bl	14ef4 <__assert_fail@plt+0x4068>
   14b0c:	str	r4, [sp, #-8]!
   14b10:	str	lr, [sp, #4]
   14b14:	cmp	r1, #0
   14b18:	orreq	r1, r1, #1
   14b1c:	bl	15900 <__assert_fail@plt+0x4a74>
   14b20:	cmp	r0, #0
   14b24:	beq	14b34 <__assert_fail@plt+0x3ca8>
   14b28:	ldr	r4, [sp]
   14b2c:	add	sp, sp, #4
   14b30:	pop	{pc}		; (ldr pc, [sp], #4)
   14b34:	bl	14ef4 <__assert_fail@plt+0x4068>
   14b38:	strd	r4, [sp, #-16]!
   14b3c:	str	r6, [sp, #8]
   14b40:	str	lr, [sp, #12]
   14b44:	mov	r4, r0
   14b48:	mov	r6, r1
   14b4c:	mov	r5, r2
   14b50:	bl	15ce8 <__assert_fail@plt+0x4e5c>
   14b54:	cmp	r0, #0
   14b58:	beq	14b6c <__assert_fail@plt+0x3ce0>
   14b5c:	ldrd	r4, [sp]
   14b60:	ldr	r6, [sp, #8]
   14b64:	add	sp, sp, #12
   14b68:	pop	{pc}		; (ldr pc, [sp], #4)
   14b6c:	cmp	r4, #0
   14b70:	beq	14b80 <__assert_fail@plt+0x3cf4>
   14b74:	cmp	r6, #0
   14b78:	cmpne	r5, #0
   14b7c:	beq	14b5c <__assert_fail@plt+0x3cd0>
   14b80:	bl	14ef4 <__assert_fail@plt+0x4068>
   14b84:	str	r4, [sp, #-8]!
   14b88:	str	lr, [sp, #4]
   14b8c:	bl	14b38 <__assert_fail@plt+0x3cac>
   14b90:	ldr	r4, [sp]
   14b94:	add	sp, sp, #4
   14b98:	pop	{pc}		; (ldr pc, [sp], #4)
   14b9c:	str	r4, [sp, #-8]!
   14ba0:	str	lr, [sp, #4]
   14ba4:	mov	ip, r1
   14ba8:	mov	r3, r2
   14bac:	cmp	r2, #0
   14bb0:	cmpne	r1, #0
   14bb4:	moveq	r3, #1
   14bb8:	moveq	ip, r3
   14bbc:	mov	r2, r3
   14bc0:	mov	r1, ip
   14bc4:	bl	15ce8 <__assert_fail@plt+0x4e5c>
   14bc8:	cmp	r0, #0
   14bcc:	beq	14bdc <__assert_fail@plt+0x3d50>
   14bd0:	ldr	r4, [sp]
   14bd4:	add	sp, sp, #4
   14bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bdc:	bl	14ef4 <__assert_fail@plt+0x4068>
   14be0:	str	r4, [sp, #-8]!
   14be4:	str	lr, [sp, #4]
   14be8:	mov	r2, r1
   14bec:	mov	r1, r0
   14bf0:	mov	r0, #0
   14bf4:	bl	14b38 <__assert_fail@plt+0x3cac>
   14bf8:	ldr	r4, [sp]
   14bfc:	add	sp, sp, #4
   14c00:	pop	{pc}		; (ldr pc, [sp], #4)
   14c04:	str	r4, [sp, #-8]!
   14c08:	str	lr, [sp, #4]
   14c0c:	mov	r2, r1
   14c10:	mov	r1, r0
   14c14:	mov	r0, #0
   14c18:	bl	14b9c <__assert_fail@plt+0x3d10>
   14c1c:	ldr	r4, [sp]
   14c20:	add	sp, sp, #4
   14c24:	pop	{pc}		; (ldr pc, [sp], #4)
   14c28:	strd	r4, [sp, #-16]!
   14c2c:	str	r6, [sp, #8]
   14c30:	str	lr, [sp, #12]
   14c34:	mov	r5, r1
   14c38:	ldr	r4, [r1]
   14c3c:	cmp	r0, #0
   14c40:	beq	14c70 <__assert_fail@plt+0x3de4>
   14c44:	lsr	r3, r4, #1
   14c48:	add	r3, r3, #1
   14c4c:	adds	r4, r4, r3
   14c50:	bcs	14c8c <__assert_fail@plt+0x3e00>
   14c54:	mov	r1, r4
   14c58:	bl	14b38 <__assert_fail@plt+0x3cac>
   14c5c:	str	r4, [r5]
   14c60:	ldrd	r4, [sp]
   14c64:	ldr	r6, [sp, #8]
   14c68:	add	sp, sp, #12
   14c6c:	pop	{pc}		; (ldr pc, [sp], #4)
   14c70:	cmp	r4, #0
   14c74:	bne	14c54 <__assert_fail@plt+0x3dc8>
   14c78:	mov	r4, #64	; 0x40
   14c7c:	udiv	r4, r4, r2
   14c80:	cmp	r2, #64	; 0x40
   14c84:	addhi	r4, r4, #1
   14c88:	b	14c54 <__assert_fail@plt+0x3dc8>
   14c8c:	bl	14ef4 <__assert_fail@plt+0x4068>
   14c90:	str	r4, [sp, #-8]!
   14c94:	str	lr, [sp, #4]
   14c98:	mov	r2, #1
   14c9c:	bl	14c28 <__assert_fail@plt+0x3d9c>
   14ca0:	ldr	r4, [sp]
   14ca4:	add	sp, sp, #4
   14ca8:	pop	{pc}		; (ldr pc, [sp], #4)
   14cac:	strd	r4, [sp, #-24]!	; 0xffffffe8
   14cb0:	strd	r6, [sp, #8]
   14cb4:	str	r8, [sp, #16]
   14cb8:	str	lr, [sp, #20]
   14cbc:	mov	r5, r1
   14cc0:	ldr	lr, [sp, #24]
   14cc4:	ldr	ip, [r1]
   14cc8:	asr	r4, ip, #1
   14ccc:	adds	r4, ip, r4
   14cd0:	movvs	r1, #1
   14cd4:	movvc	r1, #0
   14cd8:	cmp	r1, #0
   14cdc:	mvnne	r4, #-2147483648	; 0x80000000
   14ce0:	mvn	r8, r3
   14ce4:	lsr	r8, r8, #31
   14ce8:	cmp	r3, r4
   14cec:	movge	r1, #0
   14cf0:	andlt	r1, r8, #1
   14cf4:	cmp	r1, #0
   14cf8:	movne	r4, r3
   14cfc:	smull	r6, r7, r4, lr
   14d00:	asr	r1, r6, #31
   14d04:	cmp	r1, r7
   14d08:	bne	14d20 <__assert_fail@plt+0x3e94>
   14d0c:	mov	r1, r6
   14d10:	cmp	r6, #63	; 0x3f
   14d14:	movle	r1, #64	; 0x40
   14d18:	ble	14d24 <__assert_fail@plt+0x3e98>
   14d1c:	b	14d30 <__assert_fail@plt+0x3ea4>
   14d20:	mvn	r1, #-2147483648	; 0x80000000
   14d24:	sdiv	r4, r1, lr
   14d28:	mls	r6, lr, r4, r1
   14d2c:	sub	r1, r1, r6
   14d30:	cmp	r0, #0
   14d34:	moveq	r6, #0
   14d38:	streq	r6, [r5]
   14d3c:	sub	r6, r4, ip
   14d40:	cmp	r6, r2
   14d44:	bge	14d7c <__assert_fail@plt+0x3ef0>
   14d48:	adds	r2, ip, r2
   14d4c:	mov	r4, r2
   14d50:	bvs	14d98 <__assert_fail@plt+0x3f0c>
   14d54:	cmp	r2, r3
   14d58:	movle	r3, #0
   14d5c:	andgt	r3, r8, #1
   14d60:	cmp	r3, #0
   14d64:	bne	14d98 <__assert_fail@plt+0x3f0c>
   14d68:	smull	r2, r3, r2, lr
   14d6c:	asr	ip, r2, #31
   14d70:	mov	r1, r2
   14d74:	cmp	ip, r3
   14d78:	bne	14d98 <__assert_fail@plt+0x3f0c>
   14d7c:	bl	14ac0 <__assert_fail@plt+0x3c34>
   14d80:	str	r4, [r5]
   14d84:	ldrd	r4, [sp]
   14d88:	ldrd	r6, [sp, #8]
   14d8c:	ldr	r8, [sp, #16]
   14d90:	add	sp, sp, #20
   14d94:	pop	{pc}		; (ldr pc, [sp], #4)
   14d98:	bl	14ef4 <__assert_fail@plt+0x4068>
   14d9c:	str	r4, [sp, #-8]!
   14da0:	str	lr, [sp, #4]
   14da4:	bl	15850 <__assert_fail@plt+0x49c4>
   14da8:	cmp	r0, #0
   14dac:	beq	14dbc <__assert_fail@plt+0x3f30>
   14db0:	ldr	r4, [sp]
   14db4:	add	sp, sp, #4
   14db8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dbc:	bl	14ef4 <__assert_fail@plt+0x4068>
   14dc0:	str	r4, [sp, #-8]!
   14dc4:	str	lr, [sp, #4]
   14dc8:	mov	r1, #1
   14dcc:	bl	14d9c <__assert_fail@plt+0x3f10>
   14dd0:	ldr	r4, [sp]
   14dd4:	add	sp, sp, #4
   14dd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ddc:	str	r4, [sp, #-8]!
   14de0:	str	lr, [sp, #4]
   14de4:	bl	15850 <__assert_fail@plt+0x49c4>
   14de8:	cmp	r0, #0
   14dec:	beq	14dfc <__assert_fail@plt+0x3f70>
   14df0:	ldr	r4, [sp]
   14df4:	add	sp, sp, #4
   14df8:	pop	{pc}		; (ldr pc, [sp], #4)
   14dfc:	bl	14ef4 <__assert_fail@plt+0x4068>
   14e00:	str	r4, [sp, #-8]!
   14e04:	str	lr, [sp, #4]
   14e08:	mov	r1, #1
   14e0c:	bl	14ddc <__assert_fail@plt+0x3f50>
   14e10:	ldr	r4, [sp]
   14e14:	add	sp, sp, #4
   14e18:	pop	{pc}		; (ldr pc, [sp], #4)
   14e1c:	strd	r4, [sp, #-16]!
   14e20:	str	r6, [sp, #8]
   14e24:	str	lr, [sp, #12]
   14e28:	mov	r5, r0
   14e2c:	mov	r4, r1
   14e30:	mov	r0, r1
   14e34:	bl	14a60 <__assert_fail@plt+0x3bd4>
   14e38:	mov	r2, r4
   14e3c:	mov	r1, r5
   14e40:	bl	10c88 <memcpy@plt>
   14e44:	ldrd	r4, [sp]
   14e48:	ldr	r6, [sp, #8]
   14e4c:	add	sp, sp, #12
   14e50:	pop	{pc}		; (ldr pc, [sp], #4)
   14e54:	strd	r4, [sp, #-16]!
   14e58:	str	r6, [sp, #8]
   14e5c:	str	lr, [sp, #12]
   14e60:	mov	r5, r0
   14e64:	mov	r4, r1
   14e68:	mov	r0, r1
   14e6c:	bl	14a84 <__assert_fail@plt+0x3bf8>
   14e70:	mov	r2, r4
   14e74:	mov	r1, r5
   14e78:	bl	10c88 <memcpy@plt>
   14e7c:	ldrd	r4, [sp]
   14e80:	ldr	r6, [sp, #8]
   14e84:	add	sp, sp, #12
   14e88:	pop	{pc}		; (ldr pc, [sp], #4)
   14e8c:	strd	r4, [sp, #-16]!
   14e90:	str	r6, [sp, #8]
   14e94:	str	lr, [sp, #12]
   14e98:	mov	r5, r0
   14e9c:	mov	r4, r1
   14ea0:	add	r0, r1, #1
   14ea4:	bl	14a84 <__assert_fail@plt+0x3bf8>
   14ea8:	mov	r2, #0
   14eac:	strb	r2, [r0, r4]
   14eb0:	mov	r2, r4
   14eb4:	mov	r1, r5
   14eb8:	bl	10c88 <memcpy@plt>
   14ebc:	ldrd	r4, [sp]
   14ec0:	ldr	r6, [sp, #8]
   14ec4:	add	sp, sp, #12
   14ec8:	pop	{pc}		; (ldr pc, [sp], #4)
   14ecc:	str	r4, [sp, #-8]!
   14ed0:	str	lr, [sp, #4]
   14ed4:	mov	r4, r0
   14ed8:	bl	10da8 <strlen@plt>
   14edc:	add	r1, r0, #1
   14ee0:	mov	r0, r4
   14ee4:	bl	14e1c <__assert_fail@plt+0x3f90>
   14ee8:	ldr	r4, [sp]
   14eec:	add	sp, sp, #4
   14ef0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ef4:	str	r4, [sp, #-8]!
   14ef8:	str	lr, [sp, #4]
   14efc:	movw	r3, #28904	; 0x70e8
   14f00:	movt	r3, #2
   14f04:	ldr	r4, [r3]
   14f08:	mov	r2, #5
   14f0c:	movw	r1, #28236	; 0x6e4c
   14f10:	movt	r1, #1
   14f14:	mov	r0, #0
   14f18:	bl	10cc4 <dcgettext@plt>
   14f1c:	mov	r3, r0
   14f20:	movw	r2, #27156	; 0x6a14
   14f24:	movt	r2, #1
   14f28:	mov	r1, #0
   14f2c:	mov	r0, r4
   14f30:	bl	10d3c <error@plt>
   14f34:	bl	10e74 <abort@plt>
   14f38:	strd	r4, [sp, #-16]!
   14f3c:	str	r6, [sp, #8]
   14f40:	str	lr, [sp, #12]
   14f44:	sub	sp, sp, #16
   14f48:	mov	r6, r0
   14f4c:	mov	r4, r2
   14f50:	mov	r5, r3
   14f54:	ldr	r3, [sp, #40]	; 0x28
   14f58:	str	r3, [sp]
   14f5c:	add	r3, sp, #8
   14f60:	mov	r2, r1
   14f64:	mov	r1, #0
   14f68:	bl	15214 <__assert_fail@plt+0x4388>
   14f6c:	cmp	r0, #0
   14f70:	bne	15004 <__assert_fail@plt+0x4178>
   14f74:	ldrd	r0, [sp, #8]
   14f78:	ldrd	r2, [sp, #32]
   14f7c:	cmp	r2, r0
   14f80:	sbcs	r3, r3, r1
   14f84:	movlt	r3, #1
   14f88:	movge	r3, #0
   14f8c:	cmp	r0, r4
   14f90:	sbcs	r2, r1, r5
   14f94:	orrlt	r3, r3, #1
   14f98:	cmp	r3, #0
   14f9c:	bne	14fb4 <__assert_fail@plt+0x4128>
   14fa0:	add	sp, sp, #16
   14fa4:	ldrd	r4, [sp]
   14fa8:	ldr	r6, [sp, #8]
   14fac:	add	sp, sp, #12
   14fb0:	pop	{pc}		; (ldr pc, [sp], #4)
   14fb4:	cmp	r0, #1073741824	; 0x40000000
   14fb8:	sbcs	r3, r1, #0
   14fbc:	blt	14fd0 <__assert_fail@plt+0x4144>
   14fc0:	bl	10dc0 <__errno_location@plt>
   14fc4:	mov	r3, #75	; 0x4b
   14fc8:	str	r3, [r0]
   14fcc:	b	15014 <__assert_fail@plt+0x4188>
   14fd0:	mov	r2, #-1073741824	; 0xc0000000
   14fd4:	mvn	r3, #0
   14fd8:	cmp	r0, r2
   14fdc:	sbcs	r3, r1, r3
   14fe0:	bge	14ff4 <__assert_fail@plt+0x4168>
   14fe4:	bl	10dc0 <__errno_location@plt>
   14fe8:	mov	r3, #75	; 0x4b
   14fec:	str	r3, [r0]
   14ff0:	b	15014 <__assert_fail@plt+0x4188>
   14ff4:	bl	10dc0 <__errno_location@plt>
   14ff8:	mov	r3, #34	; 0x22
   14ffc:	str	r3, [r0]
   15000:	b	15014 <__assert_fail@plt+0x4188>
   15004:	cmp	r0, #1
   15008:	beq	15058 <__assert_fail@plt+0x41cc>
   1500c:	cmp	r0, #3
   15010:	beq	15068 <__assert_fail@plt+0x41dc>
   15014:	ldr	r3, [sp, #48]	; 0x30
   15018:	cmp	r3, #0
   1501c:	moveq	r3, #1
   15020:	str	r3, [sp, #48]	; 0x30
   15024:	bl	10dc0 <__errno_location@plt>
   15028:	ldr	r4, [r0]
   1502c:	cmp	r4, #22
   15030:	moveq	r4, #0
   15034:	mov	r0, r6
   15038:	bl	1448c <__assert_fail@plt+0x3600>
   1503c:	str	r0, [sp]
   15040:	ldr	r3, [sp, #44]	; 0x2c
   15044:	movw	r2, #27152	; 0x6a10
   15048:	movt	r2, #1
   1504c:	mov	r1, r4
   15050:	ldr	r0, [sp, #48]	; 0x30
   15054:	bl	10d3c <error@plt>
   15058:	bl	10dc0 <__errno_location@plt>
   1505c:	mov	r3, #75	; 0x4b
   15060:	str	r3, [r0]
   15064:	b	15014 <__assert_fail@plt+0x4188>
   15068:	bl	10dc0 <__errno_location@plt>
   1506c:	mov	r3, #0
   15070:	str	r3, [r0]
   15074:	b	15014 <__assert_fail@plt+0x4188>
   15078:	strd	r4, [sp, #-12]!
   1507c:	str	lr, [sp, #8]
   15080:	sub	sp, sp, #28
   15084:	ldr	r1, [sp, #56]	; 0x38
   15088:	str	r1, [sp, #16]
   1508c:	ldr	r1, [sp, #52]	; 0x34
   15090:	str	r1, [sp, #12]
   15094:	ldr	r1, [sp, #48]	; 0x30
   15098:	str	r1, [sp, #8]
   1509c:	ldrd	r4, [sp, #40]	; 0x28
   150a0:	strd	r4, [sp]
   150a4:	mov	r1, #10
   150a8:	bl	14f38 <__assert_fail@plt+0x40ac>
   150ac:	add	sp, sp, #28
   150b0:	ldrd	r4, [sp]
   150b4:	add	sp, sp, #8
   150b8:	pop	{pc}		; (ldr pc, [sp], #4)
   150bc:	strd	r4, [sp, #-36]!	; 0xffffffdc
   150c0:	strd	r6, [sp, #8]
   150c4:	strd	r8, [sp, #16]
   150c8:	strd	sl, [sp, #24]
   150cc:	str	lr, [sp, #32]
   150d0:	sub	sp, sp, #20
   150d4:	cmp	r2, #0
   150d8:	beq	151f0 <__assert_fail@plt+0x4364>
   150dc:	sub	ip, r2, #1
   150e0:	mov	lr, #0
   150e4:	mov	r2, r1
   150e8:	asr	r3, r1, #31
   150ec:	strd	r2, [sp, #8]
   150f0:	mov	r8, lr
   150f4:	b	15198 <__assert_fail@plt+0x430c>
   150f8:	umull	r4, r5, r2, r1
   150fc:	umull	r6, r7, r1, r3
   15100:	strd	r6, [sp]
   15104:	cmp	r3, #0
   15108:	bge	15124 <__assert_fail@plt+0x4298>
   1510c:	mov	sl, #0
   15110:	subs	r6, r6, sl
   15114:	str	r6, [sp]
   15118:	ldr	r6, [sp, #4]
   1511c:	sbc	r6, r6, r1
   15120:	str	r6, [sp, #4]
   15124:	cmp	r1, #0
   15128:	bge	15144 <__assert_fail@plt+0x42b8>
   1512c:	ldr	r6, [sp]
   15130:	subs	r6, r6, r2
   15134:	str	r6, [sp]
   15138:	ldr	r6, [sp, #4]
   1513c:	sbc	r6, r6, r3
   15140:	str	r6, [sp, #4]
   15144:	mov	sl, #0
   15148:	ldr	r6, [sp]
   1514c:	adds	r6, r6, r5
   15150:	ldr	r7, [sp, #4]
   15154:	adc	sl, r7, sl
   15158:	cmp	sl, r6, asr #31
   1515c:	bne	15168 <__assert_fail@plt+0x42dc>
   15160:	mov	r5, r6
   15164:	b	151b4 <__assert_fail@plt+0x4328>
   15168:	ldr	r4, [sp, #12]
   1516c:	mul	r5, r2, r4
   15170:	mla	r6, r1, r3, r5
   15174:	umull	sl, fp, r2, r1
   15178:	add	r5, r6, fp
   1517c:	mov	r4, sl
   15180:	mov	r9, #1
   15184:	b	151b4 <__assert_fail@plt+0x4328>
   15188:	orr	lr, lr, r3
   1518c:	sub	ip, ip, #1
   15190:	cmn	ip, #1
   15194:	beq	151f4 <__assert_fail@plt+0x4368>
   15198:	ldrd	r2, [r0]
   1519c:	mov	r9, r8
   151a0:	cmp	r3, r2, asr #31
   151a4:	bne	150f8 <__assert_fail@plt+0x426c>
   151a8:	smull	r6, r7, r2, r1
   151ac:	mov	r4, r6
   151b0:	mov	r5, r7
   151b4:	cmp	r9, #0
   151b8:	streq	r4, [r0]
   151bc:	streq	r5, [r0, #4]
   151c0:	moveq	r3, r8
   151c4:	beq	15188 <__assert_fail@plt+0x42fc>
   151c8:	cmp	r2, #0
   151cc:	sbcs	r3, r3, #0
   151d0:	mvnge	r2, #0
   151d4:	mvnge	r3, #-2147483648	; 0x80000000
   151d8:	movlt	r2, #0
   151dc:	movlt	r3, #-2147483648	; 0x80000000
   151e0:	str	r2, [r0]
   151e4:	str	r3, [r0, #4]
   151e8:	mov	r3, #1
   151ec:	b	15188 <__assert_fail@plt+0x42fc>
   151f0:	mov	lr, #0
   151f4:	mov	r0, lr
   151f8:	add	sp, sp, #20
   151fc:	ldrd	r4, [sp]
   15200:	ldrd	r6, [sp, #8]
   15204:	ldrd	r8, [sp, #16]
   15208:	ldrd	sl, [sp, #24]
   1520c:	add	sp, sp, #32
   15210:	pop	{pc}		; (ldr pc, [sp], #4)
   15214:	strd	r4, [sp, #-36]!	; 0xffffffdc
   15218:	strd	r6, [sp, #8]
   1521c:	strd	r8, [sp, #16]
   15220:	strd	sl, [sp, #24]
   15224:	str	lr, [sp, #32]
   15228:	sub	sp, sp, #20
   1522c:	cmp	r2, #36	; 0x24
   15230:	bhi	1529c <__assert_fail@plt+0x4410>
   15234:	mov	r5, r0
   15238:	mov	r4, r1
   1523c:	mov	r6, r2
   15240:	mov	r8, r3
   15244:	cmp	r1, #0
   15248:	addeq	r4, sp, #12
   1524c:	bl	10dc0 <__errno_location@plt>
   15250:	mov	r7, r0
   15254:	mov	r3, #0
   15258:	str	r3, [r0]
   1525c:	mov	r2, r6
   15260:	mov	r1, r4
   15264:	mov	r0, r5
   15268:	bl	10e44 <__strtoll_internal@plt>
   1526c:	strd	r0, [sp]
   15270:	ldr	r6, [r4]
   15274:	cmp	r6, r5
   15278:	beq	152bc <__assert_fail@plt+0x4430>
   1527c:	ldr	r3, [r7]
   15280:	cmp	r3, #0
   15284:	beq	153e0 <__assert_fail@plt+0x4554>
   15288:	cmp	r3, #34	; 0x22
   1528c:	moveq	r5, #1
   15290:	beq	153e4 <__assert_fail@plt+0x4558>
   15294:	mov	r5, #4
   15298:	b	15408 <__assert_fail@plt+0x457c>
   1529c:	movw	r3, #28256	; 0x6e60
   152a0:	movt	r3, #1
   152a4:	mov	r2, #85	; 0x55
   152a8:	movw	r1, #28268	; 0x6e6c
   152ac:	movt	r1, #1
   152b0:	movw	r0, #28284	; 0x6e7c
   152b4:	movt	r0, #1
   152b8:	bl	10e8c <__assert_fail@plt>
   152bc:	ldr	r3, [sp, #56]	; 0x38
   152c0:	cmp	r3, #0
   152c4:	beq	15840 <__assert_fail@plt+0x49b4>
   152c8:	ldrb	r1, [r5]
   152cc:	cmp	r1, #0
   152d0:	moveq	r5, #4
   152d4:	beq	15408 <__assert_fail@plt+0x457c>
   152d8:	mov	r0, r3
   152dc:	bl	10db4 <strchr@plt>
   152e0:	cmp	r0, #0
   152e4:	beq	15848 <__assert_fail@plt+0x49bc>
   152e8:	mov	r2, #1
   152ec:	mov	r3, #0
   152f0:	strd	r2, [sp]
   152f4:	ldrb	r7, [r6]
   152f8:	mov	r5, #0
   152fc:	mov	r1, r7
   15300:	ldr	r0, [sp, #56]	; 0x38
   15304:	bl	10db4 <strchr@plt>
   15308:	cmp	r0, #0
   1530c:	beq	15428 <__assert_fail@plt+0x459c>
   15310:	sub	r3, r7, #69	; 0x45
   15314:	cmp	r3, #47	; 0x2f
   15318:	ldrls	pc, [pc, r3, lsl #2]
   1531c:	b	15574 <__assert_fail@plt+0x46e8>
   15320:	andeq	r5, r1, r8, lsr r4
   15324:	andeq	r5, r1, r4, ror r5
   15328:	andeq	r5, r1, r8, lsr r4
   1532c:	andeq	r5, r1, r4, ror r5
   15330:	andeq	r5, r1, r4, ror r5
   15334:	andeq	r5, r1, r4, ror r5
   15338:	andeq	r5, r1, r8, lsr r4
   1533c:	andeq	r5, r1, r4, ror r5
   15340:	andeq	r5, r1, r8, lsr r4
   15344:	andeq	r5, r1, r4, ror r5
   15348:	andeq	r5, r1, r4, ror r5
   1534c:	andeq	r5, r1, r8, lsr r4
   15350:	andeq	r5, r1, r4, ror r5
   15354:	andeq	r5, r1, r4, ror r5
   15358:	andeq	r5, r1, r4, ror r5
   1535c:	andeq	r5, r1, r8, lsr r4
   15360:	andeq	r5, r1, r4, ror r5
   15364:	andeq	r5, r1, r4, ror r5
   15368:	andeq	r5, r1, r4, ror r5
   1536c:	andeq	r5, r1, r4, ror r5
   15370:	andeq	r5, r1, r8, lsr r4
   15374:	andeq	r5, r1, r8, lsr r4
   15378:	andeq	r5, r1, r4, ror r5
   1537c:	andeq	r5, r1, r4, ror r5
   15380:	andeq	r5, r1, r4, ror r5
   15384:	andeq	r5, r1, r4, ror r5
   15388:	andeq	r5, r1, r4, ror r5
   1538c:	andeq	r5, r1, r4, ror r5
   15390:	andeq	r5, r1, r4, ror r5
   15394:	andeq	r5, r1, r4, ror r5
   15398:	andeq	r5, r1, r4, ror r5
   1539c:	andeq	r5, r1, r4, ror r5
   153a0:	andeq	r5, r1, r4, ror r5
   153a4:	andeq	r5, r1, r4, ror r5
   153a8:	andeq	r5, r1, r8, lsr r4
   153ac:	andeq	r5, r1, r4, ror r5
   153b0:	andeq	r5, r1, r4, ror r5
   153b4:	andeq	r5, r1, r4, ror r5
   153b8:	andeq	r5, r1, r8, lsr r4
   153bc:	andeq	r5, r1, r4, ror r5
   153c0:	andeq	r5, r1, r8, lsr r4
   153c4:	andeq	r5, r1, r4, ror r5
   153c8:	andeq	r5, r1, r4, ror r5
   153cc:	andeq	r5, r1, r4, ror r5
   153d0:	andeq	r5, r1, r4, ror r5
   153d4:	andeq	r5, r1, r4, ror r5
   153d8:	andeq	r5, r1, r4, ror r5
   153dc:	andeq	r5, r1, r8, lsr r4
   153e0:	mov	r5, #0
   153e4:	ldr	r3, [sp, #56]	; 0x38
   153e8:	cmp	r3, #0
   153ec:	strdeq	r0, [r8]
   153f0:	beq	15408 <__assert_fail@plt+0x457c>
   153f4:	ldrb	r7, [r6]
   153f8:	cmp	r7, #0
   153fc:	bne	152fc <__assert_fail@plt+0x4470>
   15400:	ldrd	r2, [sp]
   15404:	strd	r2, [r8]
   15408:	mov	r0, r5
   1540c:	add	sp, sp, #20
   15410:	ldrd	r4, [sp]
   15414:	ldrd	r6, [sp, #8]
   15418:	ldrd	r8, [sp, #16]
   1541c:	ldrd	sl, [sp, #24]
   15420:	add	sp, sp, #32
   15424:	pop	{pc}		; (ldr pc, [sp], #4)
   15428:	ldrd	r2, [sp]
   1542c:	strd	r2, [r8]
   15430:	orr	r5, r5, #2
   15434:	b	15408 <__assert_fail@plt+0x457c>
   15438:	mov	r1, #48	; 0x30
   1543c:	ldr	r0, [sp, #56]	; 0x38
   15440:	bl	10db4 <strchr@plt>
   15444:	cmp	r0, #0
   15448:	beq	15580 <__assert_fail@plt+0x46f4>
   1544c:	ldrb	r3, [r6, #1]
   15450:	cmp	r3, #68	; 0x44
   15454:	beq	1558c <__assert_fail@plt+0x4700>
   15458:	cmp	r3, #105	; 0x69
   1545c:	beq	1555c <__assert_fail@plt+0x46d0>
   15460:	cmp	r3, #66	; 0x42
   15464:	moveq	r6, #2
   15468:	movne	r6, #1
   1546c:	moveq	r1, #1000	; 0x3e8
   15470:	movne	r1, #1024	; 0x400
   15474:	sub	r7, r7, #66	; 0x42
   15478:	cmp	r7, #53	; 0x35
   1547c:	ldrls	pc, [pc, r7, lsl #2]
   15480:	b	1580c <__assert_fail@plt+0x4980>
   15484:	andeq	r5, r1, ip, lsr r6
   15488:	andeq	r5, r1, ip, lsl #16
   1548c:	andeq	r5, r1, ip, lsl #16
   15490:	andeq	r5, r1, r0, ror #13
   15494:	andeq	r5, r1, ip, lsl #16
   15498:	strdeq	r5, [r1], -r0
   1549c:	andeq	r5, r1, ip, lsl #16
   154a0:	andeq	r5, r1, ip, lsl #16
   154a4:	andeq	r5, r1, ip, lsl #16
   154a8:	andeq	r5, r1, r0, lsl #14
   154ac:	andeq	r5, r1, ip, lsl #16
   154b0:	andeq	r5, r1, r0, lsl r7
   154b4:	andeq	r5, r1, ip, lsl #16
   154b8:	andeq	r5, r1, ip, lsl #16
   154bc:	andeq	r5, r1, r0, lsr #14
   154c0:	andeq	r5, r1, ip, lsl #16
   154c4:	andeq	r5, r1, ip, lsl #16
   154c8:	andeq	r5, r1, ip, lsl #16
   154cc:	andeq	r5, r1, r0, lsr r7
   154d0:	andeq	r5, r1, ip, lsl #16
   154d4:	andeq	r5, r1, ip, lsl #16
   154d8:	andeq	r5, r1, ip, lsl #16
   154dc:	andeq	r5, r1, ip, lsl #16
   154e0:	andeq	r5, r1, ip, ror #15
   154e4:	strdeq	r5, [r1], -ip
   154e8:	andeq	r5, r1, ip, lsl #16
   154ec:	andeq	r5, r1, ip, lsl #16
   154f0:	andeq	r5, r1, ip, lsl #16
   154f4:	andeq	r5, r1, ip, lsl #16
   154f8:	andeq	r5, r1, ip, lsl #16
   154fc:	andeq	r5, r1, ip, lsl #16
   15500:	andeq	r5, r1, ip, lsl #16
   15504:	muleq	r1, r8, r5
   15508:	andeq	r5, r1, ip, lsl r8
   1550c:	andeq	r5, r1, ip, lsl #16
   15510:	andeq	r5, r1, ip, lsl #16
   15514:	andeq	r5, r1, ip, lsl #16
   15518:	strdeq	r5, [r1], -r0
   1551c:	andeq	r5, r1, ip, lsl #16
   15520:	andeq	r5, r1, ip, lsl #16
   15524:	andeq	r5, r1, ip, lsl #16
   15528:	andeq	r5, r1, r0, lsl #14
   1552c:	andeq	r5, r1, ip, lsl #16
   15530:	andeq	r5, r1, r0, lsl r7
   15534:	andeq	r5, r1, ip, lsl #16
   15538:	andeq	r5, r1, ip, lsl #16
   1553c:	andeq	r5, r1, ip, lsl #16
   15540:	andeq	r5, r1, ip, lsl #16
   15544:	andeq	r5, r1, ip, lsl #16
   15548:	andeq	r5, r1, ip, lsl #16
   1554c:	andeq	r5, r1, r0, lsr r7
   15550:	andeq	r5, r1, ip, lsl #16
   15554:	andeq	r5, r1, ip, lsl #16
   15558:	andeq	r5, r1, r0, asr #14
   1555c:	ldrb	r3, [r6, #2]
   15560:	cmp	r3, #66	; 0x42
   15564:	movne	r6, #1
   15568:	moveq	r6, #3
   1556c:	mov	r1, #1024	; 0x400
   15570:	b	15474 <__assert_fail@plt+0x45e8>
   15574:	mov	r6, #1
   15578:	mov	r1, #1024	; 0x400
   1557c:	b	15474 <__assert_fail@plt+0x45e8>
   15580:	mov	r6, #1
   15584:	mov	r1, #1024	; 0x400
   15588:	b	15474 <__assert_fail@plt+0x45e8>
   1558c:	mov	r6, #2
   15590:	mov	r1, #1000	; 0x3e8
   15594:	b	15474 <__assert_fail@plt+0x45e8>
   15598:	ldrd	r2, [sp]
   1559c:	mov	ip, #0
   155a0:	cmp	r3, r2, asr #31
   155a4:	bne	155ec <__assert_fail@plt+0x4760>
   155a8:	lsl	r1, r3, #9
   155ac:	lsl	r0, r2, #9
   155b0:	orr	r1, r1, r2, lsr #23
   155b4:	cmp	ip, #0
   155b8:	streq	r0, [sp]
   155bc:	streq	r1, [sp, #4]
   155c0:	moveq	r0, #0
   155c4:	beq	15820 <__assert_fail@plt+0x4994>
   155c8:	cmp	r2, #0
   155cc:	sbcs	r3, r3, #0
   155d0:	mvnge	r2, #0
   155d4:	mvnge	r3, #-2147483648	; 0x80000000
   155d8:	movlt	r2, #0
   155dc:	movlt	r3, #-2147483648	; 0x80000000
   155e0:	strd	r2, [sp]
   155e4:	mov	r0, #1
   155e8:	b	15820 <__assert_fail@plt+0x4994>
   155ec:	mov	lr, #512	; 0x200
   155f0:	lsr	r7, r2, #23
   155f4:	lsl	r0, r2, #9
   155f8:	umull	sl, fp, lr, r3
   155fc:	cmp	r3, #0
   15600:	bge	15610 <__assert_fail@plt+0x4784>
   15604:	mov	r1, #0
   15608:	subs	sl, sl, r1
   1560c:	sbc	fp, fp, lr
   15610:	mov	r1, #0
   15614:	mov	lr, r1
   15618:	adds	r1, sl, r7
   1561c:	adc	lr, fp, lr
   15620:	cmp	lr, r1, asr #31
   15624:	beq	155b4 <__assert_fail@plt+0x4728>
   15628:	lsl	r1, r3, #9
   1562c:	lsl	r0, r2, #9
   15630:	orr	r1, r1, r2, lsr #23
   15634:	mov	ip, #1
   15638:	b	155b4 <__assert_fail@plt+0x4728>
   1563c:	ldrd	r2, [sp]
   15640:	mov	ip, #0
   15644:	cmp	r3, r2, asr #31
   15648:	bne	15690 <__assert_fail@plt+0x4804>
   1564c:	lsl	r1, r3, #10
   15650:	lsl	r0, r2, #10
   15654:	orr	r1, r1, r2, lsr #22
   15658:	cmp	ip, #0
   1565c:	streq	r0, [sp]
   15660:	streq	r1, [sp, #4]
   15664:	moveq	r0, #0
   15668:	beq	15820 <__assert_fail@plt+0x4994>
   1566c:	cmp	r2, #0
   15670:	sbcs	r3, r3, #0
   15674:	mvnge	r2, #0
   15678:	mvnge	r3, #-2147483648	; 0x80000000
   1567c:	movlt	r2, #0
   15680:	movlt	r3, #-2147483648	; 0x80000000
   15684:	strd	r2, [sp]
   15688:	mov	r0, #1
   1568c:	b	15820 <__assert_fail@plt+0x4994>
   15690:	mov	lr, #1024	; 0x400
   15694:	lsr	r7, r2, #22
   15698:	lsl	r0, r2, #10
   1569c:	umull	sl, fp, lr, r3
   156a0:	cmp	r3, #0
   156a4:	bge	156b4 <__assert_fail@plt+0x4828>
   156a8:	mov	r1, #0
   156ac:	subs	sl, sl, r1
   156b0:	sbc	fp, fp, lr
   156b4:	mov	r1, #0
   156b8:	mov	lr, r1
   156bc:	adds	r1, sl, r7
   156c0:	adc	lr, fp, lr
   156c4:	cmp	lr, r1, asr #31
   156c8:	beq	15658 <__assert_fail@plt+0x47cc>
   156cc:	lsl	r1, r3, #10
   156d0:	lsl	r0, r2, #10
   156d4:	orr	r1, r1, r2, lsr #22
   156d8:	mov	ip, #1
   156dc:	b	15658 <__assert_fail@plt+0x47cc>
   156e0:	mov	r2, #6
   156e4:	mov	r0, sp
   156e8:	bl	150bc <__assert_fail@plt+0x4230>
   156ec:	b	15820 <__assert_fail@plt+0x4994>
   156f0:	mov	r2, #3
   156f4:	mov	r0, sp
   156f8:	bl	150bc <__assert_fail@plt+0x4230>
   156fc:	b	15820 <__assert_fail@plt+0x4994>
   15700:	mov	r2, #1
   15704:	mov	r0, sp
   15708:	bl	150bc <__assert_fail@plt+0x4230>
   1570c:	b	15820 <__assert_fail@plt+0x4994>
   15710:	mov	r2, #2
   15714:	mov	r0, sp
   15718:	bl	150bc <__assert_fail@plt+0x4230>
   1571c:	b	15820 <__assert_fail@plt+0x4994>
   15720:	mov	r2, #5
   15724:	mov	r0, sp
   15728:	bl	150bc <__assert_fail@plt+0x4230>
   1572c:	b	15820 <__assert_fail@plt+0x4994>
   15730:	mov	r2, #4
   15734:	mov	r0, sp
   15738:	bl	150bc <__assert_fail@plt+0x4230>
   1573c:	b	15820 <__assert_fail@plt+0x4994>
   15740:	ldrd	r2, [sp]
   15744:	mov	lr, #0
   15748:	cmp	r3, r2, asr #31
   1574c:	bne	15790 <__assert_fail@plt+0x4904>
   15750:	adds	r0, r2, r2
   15754:	adc	r1, r3, r3
   15758:	cmp	lr, #0
   1575c:	streq	r0, [sp]
   15760:	streq	r1, [sp, #4]
   15764:	moveq	r0, #0
   15768:	beq	15820 <__assert_fail@plt+0x4994>
   1576c:	cmp	r2, #0
   15770:	sbcs	r3, r3, #0
   15774:	mvnge	r2, #0
   15778:	mvnge	r3, #-2147483648	; 0x80000000
   1577c:	movlt	r2, #0
   15780:	movlt	r3, #-2147483648	; 0x80000000
   15784:	strd	r2, [sp]
   15788:	mov	r0, #1
   1578c:	b	15820 <__assert_fail@plt+0x4994>
   15790:	mov	ip, #2
   15794:	mov	r1, #0
   15798:	adds	r7, r2, r2
   1579c:	adc	sl, r1, r1
   157a0:	umull	r0, r1, ip, r3
   157a4:	cmp	r3, #0
   157a8:	bge	157b8 <__assert_fail@plt+0x492c>
   157ac:	mov	r9, #0
   157b0:	subs	r0, r0, r9
   157b4:	sbc	r1, r1, ip
   157b8:	mov	ip, #0
   157bc:	mov	r9, ip
   157c0:	adds	ip, r0, sl
   157c4:	adc	r9, r1, r9
   157c8:	cmp	r9, ip, asr #31
   157cc:	bne	157dc <__assert_fail@plt+0x4950>
   157d0:	mov	r0, r7
   157d4:	mov	r1, ip
   157d8:	b	15758 <__assert_fail@plt+0x48cc>
   157dc:	adds	r0, r2, r2
   157e0:	adc	r1, r3, r3
   157e4:	mov	lr, #1
   157e8:	b	15758 <__assert_fail@plt+0x48cc>
   157ec:	mov	r2, #8
   157f0:	mov	r0, sp
   157f4:	bl	150bc <__assert_fail@plt+0x4230>
   157f8:	b	15820 <__assert_fail@plt+0x4994>
   157fc:	mov	r2, #7
   15800:	mov	r0, sp
   15804:	bl	150bc <__assert_fail@plt+0x4230>
   15808:	b	15820 <__assert_fail@plt+0x4994>
   1580c:	ldrd	r2, [sp]
   15810:	strd	r2, [r8]
   15814:	orr	r5, r5, #2
   15818:	b	15408 <__assert_fail@plt+0x457c>
   1581c:	mov	r0, #0
   15820:	orr	r5, r5, r0
   15824:	ldr	r3, [r4]
   15828:	add	r2, r3, r6
   1582c:	str	r2, [r4]
   15830:	ldrb	r3, [r3, r6]
   15834:	cmp	r3, #0
   15838:	orrne	r5, r5, #2
   1583c:	b	15400 <__assert_fail@plt+0x4574>
   15840:	mov	r5, #4
   15844:	b	15408 <__assert_fail@plt+0x457c>
   15848:	mov	r5, #4
   1584c:	b	15408 <__assert_fail@plt+0x457c>
   15850:	strd	r4, [sp, #-16]!
   15854:	str	r6, [sp, #8]
   15858:	str	lr, [sp, #12]
   1585c:	cmp	r1, #0
   15860:	cmpne	r0, #0
   15864:	beq	158a0 <__assert_fail@plt+0x4a14>
   15868:	mov	r2, r0
   1586c:	mov	r3, r1
   15870:	umull	r4, r5, r0, r1
   15874:	adds	r1, r5, #0
   15878:	movne	r1, #1
   1587c:	cmp	r4, #0
   15880:	movlt	r1, #1
   15884:	cmp	r1, #0
   15888:	beq	158a8 <__assert_fail@plt+0x4a1c>
   1588c:	bl	10dc0 <__errno_location@plt>
   15890:	mov	r3, #12
   15894:	str	r3, [r0]
   15898:	mov	r0, #0
   1589c:	b	158b4 <__assert_fail@plt+0x4a28>
   158a0:	mov	r3, #1
   158a4:	mov	r2, r3
   158a8:	mov	r1, r3
   158ac:	mov	r0, r2
   158b0:	bl	10c34 <calloc@plt>
   158b4:	ldrd	r4, [sp]
   158b8:	ldr	r6, [sp, #8]
   158bc:	add	sp, sp, #12
   158c0:	pop	{pc}		; (ldr pc, [sp], #4)
   158c4:	str	r4, [sp, #-8]!
   158c8:	str	lr, [sp, #4]
   158cc:	cmp	r0, #0
   158d0:	beq	158ec <__assert_fail@plt+0x4a60>
   158d4:	bge	158f0 <__assert_fail@plt+0x4a64>
   158d8:	bl	10dc0 <__errno_location@plt>
   158dc:	mov	r3, #12
   158e0:	str	r3, [r0]
   158e4:	mov	r0, #0
   158e8:	b	158f4 <__assert_fail@plt+0x4a68>
   158ec:	mov	r0, #1
   158f0:	bl	10d54 <malloc@plt>
   158f4:	ldr	r4, [sp]
   158f8:	add	sp, sp, #4
   158fc:	pop	{pc}		; (ldr pc, [sp], #4)
   15900:	str	r4, [sp, #-8]!
   15904:	str	lr, [sp, #4]
   15908:	cmp	r0, #0
   1590c:	beq	15930 <__assert_fail@plt+0x4aa4>
   15910:	cmp	r1, #0
   15914:	beq	1593c <__assert_fail@plt+0x4ab0>
   15918:	cmp	r1, #0
   1591c:	blt	15948 <__assert_fail@plt+0x4abc>
   15920:	bl	10cd0 <realloc@plt>
   15924:	ldr	r4, [sp]
   15928:	add	sp, sp, #4
   1592c:	pop	{pc}		; (ldr pc, [sp], #4)
   15930:	mov	r0, r1
   15934:	bl	158c4 <__assert_fail@plt+0x4a38>
   15938:	b	15924 <__assert_fail@plt+0x4a98>
   1593c:	bl	15b14 <__assert_fail@plt+0x4c88>
   15940:	mov	r0, #0
   15944:	b	15924 <__assert_fail@plt+0x4a98>
   15948:	bl	10dc0 <__errno_location@plt>
   1594c:	mov	r3, #12
   15950:	str	r3, [r0]
   15954:	mov	r0, #0
   15958:	b	15924 <__assert_fail@plt+0x4a98>
   1595c:	strd	r4, [sp, #-16]!
   15960:	str	r6, [sp, #8]
   15964:	str	lr, [sp, #12]
   15968:	mov	r5, r0
   1596c:	bl	10d24 <__fpending@plt>
   15970:	mov	r6, r0
   15974:	ldr	r4, [r5]
   15978:	and	r4, r4, #32
   1597c:	mov	r0, r5
   15980:	bl	159e8 <__assert_fail@plt+0x4b5c>
   15984:	cmp	r4, #0
   15988:	bne	159bc <__assert_fail@plt+0x4b30>
   1598c:	cmp	r0, #0
   15990:	beq	159ac <__assert_fail@plt+0x4b20>
   15994:	cmp	r6, #0
   15998:	bne	159d8 <__assert_fail@plt+0x4b4c>
   1599c:	bl	10dc0 <__errno_location@plt>
   159a0:	ldr	r0, [r0]
   159a4:	subs	r0, r0, #9
   159a8:	mvnne	r0, #0
   159ac:	ldrd	r4, [sp]
   159b0:	ldr	r6, [sp, #8]
   159b4:	add	sp, sp, #12
   159b8:	pop	{pc}		; (ldr pc, [sp], #4)
   159bc:	cmp	r0, #0
   159c0:	bne	159e0 <__assert_fail@plt+0x4b54>
   159c4:	bl	10dc0 <__errno_location@plt>
   159c8:	mov	r3, #0
   159cc:	str	r3, [r0]
   159d0:	mvn	r0, #0
   159d4:	b	159ac <__assert_fail@plt+0x4b20>
   159d8:	mvn	r0, #0
   159dc:	b	159ac <__assert_fail@plt+0x4b20>
   159e0:	mvn	r0, #0
   159e4:	b	159ac <__assert_fail@plt+0x4b20>
   159e8:	strd	r4, [sp, #-16]!
   159ec:	str	r6, [sp, #8]
   159f0:	str	lr, [sp, #12]
   159f4:	sub	sp, sp, #8
   159f8:	mov	r4, r0
   159fc:	bl	10df0 <fileno@plt>
   15a00:	cmp	r0, #0
   15a04:	blt	15a7c <__assert_fail@plt+0x4bf0>
   15a08:	mov	r0, r4
   15a0c:	bl	10d6c <__freading@plt>
   15a10:	cmp	r0, #0
   15a14:	beq	15a48 <__assert_fail@plt+0x4bbc>
   15a18:	mov	r0, r4
   15a1c:	bl	10df0 <fileno@plt>
   15a20:	mov	r3, #1
   15a24:	str	r3, [sp]
   15a28:	mov	r2, #0
   15a2c:	mov	r3, #0
   15a30:	bl	10d0c <lseek64@plt>
   15a34:	mvn	r2, #0
   15a38:	mvn	r3, #0
   15a3c:	cmp	r1, r3
   15a40:	cmpeq	r0, r2
   15a44:	beq	15a88 <__assert_fail@plt+0x4bfc>
   15a48:	mov	r0, r4
   15a4c:	bl	15aa4 <__assert_fail@plt+0x4c18>
   15a50:	cmp	r0, #0
   15a54:	beq	15a88 <__assert_fail@plt+0x4bfc>
   15a58:	bl	10dc0 <__errno_location@plt>
   15a5c:	mov	r5, r0
   15a60:	ldr	r6, [r0]
   15a64:	mov	r0, r4
   15a68:	bl	10e08 <fclose@plt>
   15a6c:	cmp	r6, #0
   15a70:	strne	r6, [r5]
   15a74:	mvnne	r0, #0
   15a78:	b	15a90 <__assert_fail@plt+0x4c04>
   15a7c:	mov	r0, r4
   15a80:	bl	10e08 <fclose@plt>
   15a84:	b	15a90 <__assert_fail@plt+0x4c04>
   15a88:	mov	r0, r4
   15a8c:	bl	10e08 <fclose@plt>
   15a90:	add	sp, sp, #8
   15a94:	ldrd	r4, [sp]
   15a98:	ldr	r6, [sp, #8]
   15a9c:	add	sp, sp, #12
   15aa0:	pop	{pc}		; (ldr pc, [sp], #4)
   15aa4:	str	r4, [sp, #-8]!
   15aa8:	str	lr, [sp, #4]
   15aac:	sub	sp, sp, #8
   15ab0:	subs	r4, r0, #0
   15ab4:	beq	15ac8 <__assert_fail@plt+0x4c3c>
   15ab8:	mov	r0, r4
   15abc:	bl	10d6c <__freading@plt>
   15ac0:	cmp	r0, #0
   15ac4:	bne	15ae0 <__assert_fail@plt+0x4c54>
   15ac8:	mov	r0, r4
   15acc:	bl	10c64 <fflush@plt>
   15ad0:	add	sp, sp, #8
   15ad4:	ldr	r4, [sp]
   15ad8:	add	sp, sp, #4
   15adc:	pop	{pc}		; (ldr pc, [sp], #4)
   15ae0:	ldr	r3, [r4]
   15ae4:	tst	r3, #256	; 0x100
   15ae8:	bne	15af8 <__assert_fail@plt+0x4c6c>
   15aec:	mov	r0, r4
   15af0:	bl	10c64 <fflush@plt>
   15af4:	b	15ad0 <__assert_fail@plt+0x4c44>
   15af8:	mov	r3, #1
   15afc:	str	r3, [sp]
   15b00:	mov	r2, #0
   15b04:	mov	r3, #0
   15b08:	mov	r0, r4
   15b0c:	bl	15b74 <__assert_fail@plt+0x4ce8>
   15b10:	b	15aec <__assert_fail@plt+0x4c60>
   15b14:	strd	r4, [sp, #-12]!
   15b18:	str	lr, [sp, #8]
   15b1c:	sub	sp, sp, #12
   15b20:	mov	r5, r0
   15b24:	bl	10dc0 <__errno_location@plt>
   15b28:	mov	r4, r0
   15b2c:	ldr	r3, [r0]
   15b30:	str	r3, [sp]
   15b34:	str	r3, [sp, #4]
   15b38:	mov	r3, #0
   15b3c:	str	r3, [r0]
   15b40:	mov	r0, r5
   15b44:	bl	10c70 <free@plt>
   15b48:	ldr	r3, [r4]
   15b4c:	clz	r3, r3
   15b50:	lsr	r3, r3, #5
   15b54:	add	r2, sp, #8
   15b58:	add	r3, r2, r3, lsl #2
   15b5c:	ldr	r3, [r3, #-8]
   15b60:	str	r3, [r4]
   15b64:	add	sp, sp, #12
   15b68:	ldrd	r4, [sp]
   15b6c:	add	sp, sp, #8
   15b70:	pop	{pc}		; (ldr pc, [sp], #4)
   15b74:	str	r4, [sp, #-16]!
   15b78:	strd	r6, [sp, #4]
   15b7c:	str	lr, [sp, #12]
   15b80:	sub	sp, sp, #8
   15b84:	mov	r4, r0
   15b88:	mov	r6, r2
   15b8c:	mov	r7, r3
   15b90:	ldr	r2, [r0, #8]
   15b94:	ldr	r3, [r0, #4]
   15b98:	cmp	r2, r3
   15b9c:	beq	15bcc <__assert_fail@plt+0x4d40>
   15ba0:	ldr	r3, [sp, #24]
   15ba4:	str	r3, [sp]
   15ba8:	mov	r2, r6
   15bac:	mov	r3, r7
   15bb0:	mov	r0, r4
   15bb4:	bl	10e14 <fseeko64@plt>
   15bb8:	add	sp, sp, #8
   15bbc:	ldr	r4, [sp]
   15bc0:	ldrd	r6, [sp, #4]
   15bc4:	add	sp, sp, #12
   15bc8:	pop	{pc}		; (ldr pc, [sp], #4)
   15bcc:	ldr	r2, [r0, #20]
   15bd0:	ldr	r3, [r0, #16]
   15bd4:	cmp	r2, r3
   15bd8:	bne	15ba0 <__assert_fail@plt+0x4d14>
   15bdc:	ldr	r3, [r0, #36]	; 0x24
   15be0:	cmp	r3, #0
   15be4:	bne	15ba0 <__assert_fail@plt+0x4d14>
   15be8:	bl	10df0 <fileno@plt>
   15bec:	ldr	r3, [sp, #24]
   15bf0:	str	r3, [sp]
   15bf4:	mov	r2, r6
   15bf8:	mov	r3, r7
   15bfc:	bl	10d0c <lseek64@plt>
   15c00:	mvn	r2, #0
   15c04:	mvn	r3, #0
   15c08:	cmp	r1, r3
   15c0c:	cmpeq	r0, r2
   15c10:	beq	15c2c <__assert_fail@plt+0x4da0>
   15c14:	ldr	r3, [r4]
   15c18:	bic	r3, r3, #16
   15c1c:	str	r3, [r4]
   15c20:	strd	r0, [r4, #80]	; 0x50
   15c24:	mov	r0, #0
   15c28:	b	15bb8 <__assert_fail@plt+0x4d2c>
   15c2c:	mvn	r0, #0
   15c30:	b	15bb8 <__assert_fail@plt+0x4d2c>
   15c34:	str	r4, [sp, #-8]!
   15c38:	str	lr, [sp, #4]
   15c3c:	mov	r0, #14
   15c40:	bl	10e38 <nl_langinfo@plt>
   15c44:	cmp	r0, #0
   15c48:	beq	15c6c <__assert_fail@plt+0x4de0>
   15c4c:	ldrb	r2, [r0]
   15c50:	movw	r3, #28324	; 0x6ea4
   15c54:	movt	r3, #1
   15c58:	cmp	r2, #0
   15c5c:	moveq	r0, r3
   15c60:	ldr	r4, [sp]
   15c64:	add	sp, sp, #4
   15c68:	pop	{pc}		; (ldr pc, [sp], #4)
   15c6c:	movw	r0, #28324	; 0x6ea4
   15c70:	movt	r0, #1
   15c74:	b	15c60 <__assert_fail@plt+0x4dd4>
   15c78:	strd	r4, [sp, #-20]!	; 0xffffffec
   15c7c:	strd	r6, [sp, #8]
   15c80:	str	lr, [sp, #16]
   15c84:	sub	sp, sp, #12
   15c88:	mov	r7, r1
   15c8c:	mov	r5, r2
   15c90:	subs	r6, r0, #0
   15c94:	addeq	r6, sp, #4
   15c98:	mov	r0, r6
   15c9c:	bl	10d30 <mbrtowc@plt>
   15ca0:	mov	r4, r0
   15ca4:	cmp	r5, #0
   15ca8:	cmnne	r0, #3
   15cac:	bhi	15cc8 <__assert_fail@plt+0x4e3c>
   15cb0:	mov	r0, r4
   15cb4:	add	sp, sp, #12
   15cb8:	ldrd	r4, [sp]
   15cbc:	ldrd	r6, [sp, #8]
   15cc0:	add	sp, sp, #16
   15cc4:	pop	{pc}		; (ldr pc, [sp], #4)
   15cc8:	mov	r0, #0
   15ccc:	bl	15d24 <__assert_fail@plt+0x4e98>
   15cd0:	cmp	r0, #0
   15cd4:	bne	15cb0 <__assert_fail@plt+0x4e24>
   15cd8:	ldrb	r3, [r7]
   15cdc:	str	r3, [r6]
   15ce0:	mov	r4, #1
   15ce4:	b	15cb0 <__assert_fail@plt+0x4e24>
   15ce8:	str	r4, [sp, #-8]!
   15cec:	str	lr, [sp, #4]
   15cf0:	umull	r2, r3, r1, r2
   15cf4:	cmp	r3, #0
   15cf8:	bne	15d10 <__assert_fail@plt+0x4e84>
   15cfc:	mov	r1, r2
   15d00:	bl	15900 <__assert_fail@plt+0x4a74>
   15d04:	ldr	r4, [sp]
   15d08:	add	sp, sp, #4
   15d0c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d10:	bl	10dc0 <__errno_location@plt>
   15d14:	mov	r3, #12
   15d18:	str	r3, [r0]
   15d1c:	mov	r0, #0
   15d20:	b	15d04 <__assert_fail@plt+0x4e78>
   15d24:	push	{lr}		; (str lr, [sp, #-4]!)
   15d28:	sub	sp, sp, #268	; 0x10c
   15d2c:	movw	r2, #257	; 0x101
   15d30:	add	r1, sp, #4
   15d34:	bl	15d80 <__assert_fail@plt+0x4ef4>
   15d38:	cmp	r0, #0
   15d3c:	movne	r0, #0
   15d40:	bne	15d78 <__assert_fail@plt+0x4eec>
   15d44:	movw	r1, #28332	; 0x6eac
   15d48:	movt	r1, #1
   15d4c:	add	r0, sp, #4
   15d50:	bl	10c58 <strcmp@plt>
   15d54:	cmp	r0, #0
   15d58:	beq	15d74 <__assert_fail@plt+0x4ee8>
   15d5c:	movw	r1, #28336	; 0x6eb0
   15d60:	movt	r1, #1
   15d64:	add	r0, sp, #4
   15d68:	bl	10c58 <strcmp@plt>
   15d6c:	adds	r0, r0, #0
   15d70:	movne	r0, #1
   15d74:	and	r0, r0, #1
   15d78:	add	sp, sp, #268	; 0x10c
   15d7c:	pop	{pc}		; (ldr pc, [sp], #4)
   15d80:	strd	r4, [sp, #-16]!
   15d84:	str	r6, [sp, #8]
   15d88:	str	lr, [sp, #12]
   15d8c:	mov	r6, r1
   15d90:	mov	r4, r2
   15d94:	mov	r1, #0
   15d98:	bl	10e20 <setlocale@plt>
   15d9c:	subs	r5, r0, #0
   15da0:	beq	15de4 <__assert_fail@plt+0x4f58>
   15da4:	mov	r0, r5
   15da8:	bl	10da8 <strlen@plt>
   15dac:	cmp	r4, r0
   15db0:	bhi	15e00 <__assert_fail@plt+0x4f74>
   15db4:	cmp	r4, #0
   15db8:	moveq	r0, #34	; 0x22
   15dbc:	beq	15e14 <__assert_fail@plt+0x4f88>
   15dc0:	sub	r4, r4, #1
   15dc4:	mov	r2, r4
   15dc8:	mov	r1, r5
   15dcc:	mov	r0, r6
   15dd0:	bl	10c88 <memcpy@plt>
   15dd4:	mov	r3, #0
   15dd8:	strb	r3, [r6, r4]
   15ddc:	mov	r0, #34	; 0x22
   15de0:	b	15e14 <__assert_fail@plt+0x4f88>
   15de4:	cmp	r4, #0
   15de8:	moveq	r0, #22
   15dec:	beq	15e14 <__assert_fail@plt+0x4f88>
   15df0:	mov	r3, #0
   15df4:	strb	r3, [r6]
   15df8:	mov	r0, #22
   15dfc:	b	15e14 <__assert_fail@plt+0x4f88>
   15e00:	add	r2, r0, #1
   15e04:	mov	r1, r5
   15e08:	mov	r0, r6
   15e0c:	bl	10c88 <memcpy@plt>
   15e10:	mov	r0, #0
   15e14:	ldrd	r4, [sp]
   15e18:	ldr	r6, [sp, #8]
   15e1c:	add	sp, sp, #12
   15e20:	pop	{pc}		; (ldr pc, [sp], #4)
   15e24:	str	r4, [sp, #-8]!
   15e28:	str	lr, [sp, #4]
   15e2c:	mov	r1, #0
   15e30:	bl	10e20 <setlocale@plt>
   15e34:	ldr	r4, [sp]
   15e38:	add	sp, sp, #4
   15e3c:	pop	{pc}		; (ldr pc, [sp], #4)
   15e40:	cmp	r3, #0
   15e44:	cmpeq	r2, #0
   15e48:	bne	15e6c <__assert_fail@plt+0x4fe0>
   15e4c:	cmp	r1, #0
   15e50:	movlt	r1, #-2147483648	; 0x80000000
   15e54:	movlt	r0, #0
   15e58:	blt	15e68 <__assert_fail@plt+0x4fdc>
   15e5c:	cmpeq	r0, #0
   15e60:	mvnne	r1, #-2147483648	; 0x80000000
   15e64:	mvnne	r0, #0
   15e68:	b	15f14 <__assert_fail@plt+0x5088>
   15e6c:	sub	sp, sp, #8
   15e70:	push	{sp, lr}
   15e74:	cmp	r1, #0
   15e78:	blt	15e98 <__assert_fail@plt+0x500c>
   15e7c:	cmp	r3, #0
   15e80:	blt	15ecc <__assert_fail@plt+0x5040>
   15e84:	bl	15f24 <__assert_fail@plt+0x5098>
   15e88:	ldr	lr, [sp, #4]
   15e8c:	add	sp, sp, #8
   15e90:	pop	{r2, r3}
   15e94:	bx	lr
   15e98:	rsbs	r0, r0, #0
   15e9c:	sbc	r1, r1, r1, lsl #1
   15ea0:	cmp	r3, #0
   15ea4:	blt	15ef0 <__assert_fail@plt+0x5064>
   15ea8:	bl	15f24 <__assert_fail@plt+0x5098>
   15eac:	ldr	lr, [sp, #4]
   15eb0:	add	sp, sp, #8
   15eb4:	pop	{r2, r3}
   15eb8:	rsbs	r0, r0, #0
   15ebc:	sbc	r1, r1, r1, lsl #1
   15ec0:	rsbs	r2, r2, #0
   15ec4:	sbc	r3, r3, r3, lsl #1
   15ec8:	bx	lr
   15ecc:	rsbs	r2, r2, #0
   15ed0:	sbc	r3, r3, r3, lsl #1
   15ed4:	bl	15f24 <__assert_fail@plt+0x5098>
   15ed8:	ldr	lr, [sp, #4]
   15edc:	add	sp, sp, #8
   15ee0:	pop	{r2, r3}
   15ee4:	rsbs	r0, r0, #0
   15ee8:	sbc	r1, r1, r1, lsl #1
   15eec:	bx	lr
   15ef0:	rsbs	r2, r2, #0
   15ef4:	sbc	r3, r3, r3, lsl #1
   15ef8:	bl	15f24 <__assert_fail@plt+0x5098>
   15efc:	ldr	lr, [sp, #4]
   15f00:	add	sp, sp, #8
   15f04:	pop	{r2, r3}
   15f08:	rsbs	r2, r2, #0
   15f0c:	sbc	r3, r3, r3, lsl #1
   15f10:	bx	lr
   15f14:	push	{r1, lr}
   15f18:	mov	r0, #8
   15f1c:	bl	10c4c <raise@plt>
   15f20:	pop	{r1, pc}
   15f24:	cmp	r1, r3
   15f28:	cmpeq	r0, r2
   15f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f30:	mov	r4, r0
   15f34:	movcc	r0, #0
   15f38:	mov	r5, r1
   15f3c:	ldr	lr, [sp, #36]	; 0x24
   15f40:	movcc	r1, r0
   15f44:	bcc	16040 <__assert_fail@plt+0x51b4>
   15f48:	cmp	r3, #0
   15f4c:	clzeq	ip, r2
   15f50:	clzne	ip, r3
   15f54:	addeq	ip, ip, #32
   15f58:	cmp	r5, #0
   15f5c:	clzeq	r1, r4
   15f60:	addeq	r1, r1, #32
   15f64:	clzne	r1, r5
   15f68:	sub	ip, ip, r1
   15f6c:	sub	sl, ip, #32
   15f70:	lsl	r9, r3, ip
   15f74:	rsb	fp, ip, #32
   15f78:	orr	r9, r9, r2, lsl sl
   15f7c:	orr	r9, r9, r2, lsr fp
   15f80:	lsl	r8, r2, ip
   15f84:	cmp	r5, r9
   15f88:	cmpeq	r4, r8
   15f8c:	movcc	r0, #0
   15f90:	movcc	r1, r0
   15f94:	bcc	15fb0 <__assert_fail@plt+0x5124>
   15f98:	mov	r0, #1
   15f9c:	subs	r4, r4, r8
   15fa0:	lsl	r1, r0, sl
   15fa4:	orr	r1, r1, r0, lsr fp
   15fa8:	lsl	r0, r0, ip
   15fac:	sbc	r5, r5, r9
   15fb0:	cmp	ip, #0
   15fb4:	beq	16040 <__assert_fail@plt+0x51b4>
   15fb8:	lsr	r6, r8, #1
   15fbc:	orr	r6, r6, r9, lsl #31
   15fc0:	lsr	r7, r9, #1
   15fc4:	mov	r2, ip
   15fc8:	b	15fec <__assert_fail@plt+0x5160>
   15fcc:	subs	r3, r4, r6
   15fd0:	sbc	r8, r5, r7
   15fd4:	adds	r3, r3, r3
   15fd8:	adc	r8, r8, r8
   15fdc:	adds	r4, r3, #1
   15fe0:	adc	r5, r8, #0
   15fe4:	subs	r2, r2, #1
   15fe8:	beq	16008 <__assert_fail@plt+0x517c>
   15fec:	cmp	r5, r7
   15ff0:	cmpeq	r4, r6
   15ff4:	bcs	15fcc <__assert_fail@plt+0x5140>
   15ff8:	adds	r4, r4, r4
   15ffc:	adc	r5, r5, r5
   16000:	subs	r2, r2, #1
   16004:	bne	15fec <__assert_fail@plt+0x5160>
   16008:	lsr	r3, r4, ip
   1600c:	orr	r3, r3, r5, lsl fp
   16010:	lsr	r2, r5, ip
   16014:	orr	r3, r3, r5, lsr sl
   16018:	adds	r0, r0, r4
   1601c:	mov	r4, r3
   16020:	lsl	r3, r2, ip
   16024:	orr	r3, r3, r4, lsl sl
   16028:	lsl	ip, r4, ip
   1602c:	orr	r3, r3, r4, lsr fp
   16030:	adc	r1, r1, r5
   16034:	subs	r0, r0, ip
   16038:	mov	r5, r2
   1603c:	sbc	r1, r1, r3
   16040:	cmp	lr, #0
   16044:	strdne	r4, [lr]
   16048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1604c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16050:	mov	r7, r0
   16054:	ldr	r6, [pc, #72]	; 160a4 <__assert_fail@plt+0x5218>
   16058:	ldr	r5, [pc, #72]	; 160a8 <__assert_fail@plt+0x521c>
   1605c:	add	r6, pc, r6
   16060:	add	r5, pc, r5
   16064:	sub	r6, r6, r5
   16068:	mov	r8, r1
   1606c:	mov	r9, r2
   16070:	bl	10c14 <calloc@plt-0x20>
   16074:	asrs	r6, r6, #2
   16078:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1607c:	mov	r4, #0
   16080:	add	r4, r4, #1
   16084:	ldr	r3, [r5], #4
   16088:	mov	r2, r9
   1608c:	mov	r1, r8
   16090:	mov	r0, r7
   16094:	blx	r3
   16098:	cmp	r6, r4
   1609c:	bne	16080 <__assert_fail@plt+0x51f4>
   160a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   160a4:			; <UNDEFINED> instruction: 0x00010eb0
   160a8:	andeq	r0, r1, r8, lsr #29
   160ac:	bx	lr
   160b0:	ldr	r3, [pc, #12]	; 160c4 <__assert_fail@plt+0x5238>
   160b4:	mov	r1, #0
   160b8:	add	r3, pc, r3
   160bc:	ldr	r2, [r3]
   160c0:	b	10dcc <__cxa_atexit@plt>
   160c4:	andeq	r1, r1, r0, lsr #32

Disassembly of section .fini:

000160c8 <.fini>:
   160c8:	push	{r3, lr}
   160cc:	pop	{r3, pc}
