
../repos/coreutils/src/shred:     file format elf32-littlearm


Disassembly of section .init:

00011334 <.init>:
   11334:	push	{r3, lr}
   11338:	bl	1172c <__assert_fail@plt+0x48>
   1133c:	pop	{r3, pc}

Disassembly of section .plt:

00011340 <fdopen@plt-0x14>:
   11340:	push	{lr}		; (str lr, [sp, #-4]!)
   11344:	ldr	lr, [pc, #4]	; 11350 <fdopen@plt-0x4>
   11348:	add	lr, pc, lr
   1134c:	ldr	pc, [lr, #8]!
   11350:			; <UNDEFINED> instruction: 0x0001acb0

00011354 <fdopen@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #106496	; 0x1a000
   1135c:	ldr	pc, [ip, #3248]!	; 0xcb0

00011360 <calloc@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #106496	; 0x1a000
   11368:	ldr	pc, [ip, #3240]!	; 0xca8

0001136c <fputs_unlocked@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #106496	; 0x1a000
   11374:	ldr	pc, [ip, #3232]!	; 0xca0

00011378 <raise@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #106496	; 0x1a000
   11380:	ldr	pc, [ip, #3224]!	; 0xc98

00011384 <fsync@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #106496	; 0x1a000
   1138c:	ldr	pc, [ip, #3216]!	; 0xc90

00011390 <strcmp@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #106496	; 0x1a000
   11398:	ldr	pc, [ip, #3208]!	; 0xc88

0001139c <fflush@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #106496	; 0x1a000
   113a4:	ldr	pc, [ip, #3200]!	; 0xc80

000113a8 <memmove@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #106496	; 0x1a000
   113b0:	ldr	pc, [ip, #3192]!	; 0xc78

000113b4 <free@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #106496	; 0x1a000
   113bc:	ldr	pc, [ip, #3184]!	; 0xc70

000113c0 <_exit@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #106496	; 0x1a000
   113c8:	ldr	pc, [ip, #3176]!	; 0xc68

000113cc <memcpy@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #106496	; 0x1a000
   113d4:	ldr	pc, [ip, #3168]!	; 0xc60

000113d8 <__strtoull_internal@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #106496	; 0x1a000
   113e0:	ldr	pc, [ip, #3160]!	; 0xc58

000113e4 <mbsinit@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #106496	; 0x1a000
   113ec:	ldr	pc, [ip, #3152]!	; 0xc50

000113f0 <time@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #106496	; 0x1a000
   113f8:	ldr	pc, [ip, #3144]!	; 0xc48

000113fc <ftruncate64@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #106496	; 0x1a000
   11404:	ldr	pc, [ip, #3136]!	; 0xc40

00011408 <dcgettext@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #106496	; 0x1a000
   11410:	ldr	pc, [ip, #3128]!	; 0xc38

00011414 <unlink@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #106496	; 0x1a000
   1141c:	ldr	pc, [ip, #3120]!	; 0xc30

00011420 <realloc@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #106496	; 0x1a000
   11428:	ldr	pc, [ip, #3112]!	; 0xc28

0001142c <textdomain@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #106496	; 0x1a000
   11434:	ldr	pc, [ip, #3104]!	; 0xc20

00011438 <__fxstatat64@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #106496	; 0x1a000
   11440:	ldr	pc, [ip, #3096]!	; 0xc18

00011444 <iswprint@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #106496	; 0x1a000
   1144c:	ldr	pc, [ip, #3088]!	; 0xc10

00011450 <__fxstat64@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #106496	; 0x1a000
   11458:	ldr	pc, [ip, #3080]!	; 0xc08

0001145c <fwrite@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #106496	; 0x1a000
   11464:	ldr	pc, [ip, #3072]!	; 0xc00

00011468 <ioctl@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #106496	; 0x1a000
   11470:	ldr	pc, [ip, #3064]!	; 0xbf8

00011474 <lseek64@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #106496	; 0x1a000
   1147c:	ldr	pc, [ip, #3056]!	; 0xbf0

00011480 <__ctype_get_mb_cur_max@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #106496	; 0x1a000
   11488:	ldr	pc, [ip, #3048]!	; 0xbe8

0001148c <__strcpy_chk@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #106496	; 0x1a000
   11494:	ldr	pc, [ip, #3040]!	; 0xbe0

00011498 <__fpending@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #106496	; 0x1a000
   114a0:	ldr	pc, [ip, #3032]!	; 0xbd8

000114a4 <mbrtowc@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #106496	; 0x1a000
   114ac:	ldr	pc, [ip, #3024]!	; 0xbd0

000114b0 <error@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #106496	; 0x1a000
   114b8:	ldr	pc, [ip, #3016]!	; 0xbc8

000114bc <open64@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #106496	; 0x1a000
   114c4:	ldr	pc, [ip, #3008]!	; 0xbc0

000114c8 <getenv@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #106496	; 0x1a000
   114d0:	ldr	pc, [ip, #3000]!	; 0xbb8

000114d4 <malloc@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #106496	; 0x1a000
   114dc:	ldr	pc, [ip, #2992]!	; 0xbb0

000114e0 <__libc_start_main@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #106496	; 0x1a000
   114e8:	ldr	pc, [ip, #2984]!	; 0xba8

000114ec <__freading@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #106496	; 0x1a000
   114f4:	ldr	pc, [ip, #2976]!	; 0xba0

000114f8 <__gmon_start__@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #106496	; 0x1a000
   11500:	ldr	pc, [ip, #2968]!	; 0xb98

00011504 <getopt_long@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #106496	; 0x1a000
   1150c:	ldr	pc, [ip, #2960]!	; 0xb90

00011510 <__ctype_b_loc@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #106496	; 0x1a000
   11518:	ldr	pc, [ip, #2952]!	; 0xb88

0001151c <exit@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #106496	; 0x1a000
   11524:	ldr	pc, [ip, #2944]!	; 0xb80

00011528 <bcmp@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #106496	; 0x1a000
   11530:	ldr	pc, [ip, #2936]!	; 0xb78

00011534 <strlen@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #106496	; 0x1a000
   1153c:	ldr	pc, [ip, #2928]!	; 0xb70

00011540 <strchr@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #106496	; 0x1a000
   11548:	ldr	pc, [ip, #2920]!	; 0xb68

0001154c <getpagesize@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #106496	; 0x1a000
   11554:	ldr	pc, [ip, #2912]!	; 0xb60

00011558 <__errno_location@plt>:
   11558:	add	ip, pc, #0, 12
   1155c:	add	ip, ip, #106496	; 0x1a000
   11560:	ldr	pc, [ip, #2904]!	; 0xb58

00011564 <__sprintf_chk@plt>:
   11564:	add	ip, pc, #0, 12
   11568:	add	ip, ip, #106496	; 0x1a000
   1156c:	ldr	pc, [ip, #2896]!	; 0xb50

00011570 <__cxa_atexit@plt>:
   11570:	add	ip, pc, #0, 12
   11574:	add	ip, ip, #106496	; 0x1a000
   11578:	ldr	pc, [ip, #2888]!	; 0xb48

0001157c <setvbuf@plt>:
   1157c:	add	ip, pc, #0, 12
   11580:	add	ip, ip, #106496	; 0x1a000
   11584:	ldr	pc, [ip, #2880]!	; 0xb40

00011588 <memset@plt>:
   11588:	add	ip, pc, #0, 12
   1158c:	add	ip, ip, #106496	; 0x1a000
   11590:	ldr	pc, [ip, #2872]!	; 0xb38

00011594 <renameat2@plt>:
   11594:	add	ip, pc, #0, 12
   11598:	add	ip, ip, #106496	; 0x1a000
   1159c:	ldr	pc, [ip, #2864]!	; 0xb30

000115a0 <__printf_chk@plt>:
   115a0:	add	ip, pc, #0, 12
   115a4:	add	ip, ip, #106496	; 0x1a000
   115a8:	ldr	pc, [ip, #2856]!	; 0xb28

000115ac <write@plt>:
   115ac:	add	ip, pc, #0, 12
   115b0:	add	ip, ip, #106496	; 0x1a000
   115b4:	ldr	pc, [ip, #2848]!	; 0xb20

000115b8 <fileno@plt>:
   115b8:	add	ip, pc, #0, 12
   115bc:	add	ip, ip, #106496	; 0x1a000
   115c0:	ldr	pc, [ip, #2840]!	; 0xb18

000115c4 <__fprintf_chk@plt>:
   115c4:	add	ip, pc, #0, 12
   115c8:	add	ip, ip, #106496	; 0x1a000
   115cc:	ldr	pc, [ip, #2832]!	; 0xb10

000115d0 <memchr@plt>:
   115d0:	add	ip, pc, #0, 12
   115d4:	add	ip, ip, #106496	; 0x1a000
   115d8:	ldr	pc, [ip, #2824]!	; 0xb08

000115dc <fclose@plt>:
   115dc:	add	ip, pc, #0, 12
   115e0:	add	ip, ip, #106496	; 0x1a000
   115e4:	ldr	pc, [ip, #2816]!	; 0xb00

000115e8 <fseeko64@plt>:
   115e8:	add	ip, pc, #0, 12
   115ec:	add	ip, ip, #106496	; 0x1a000
   115f0:	ldr	pc, [ip, #2808]!	; 0xaf8

000115f4 <fcntl64@plt>:
   115f4:	add	ip, pc, #0, 12
   115f8:	add	ip, ip, #106496	; 0x1a000
   115fc:	ldr	pc, [ip, #2800]!	; 0xaf0

00011600 <__overflow@plt>:
   11600:	add	ip, pc, #0, 12
   11604:	add	ip, ip, #106496	; 0x1a000
   11608:	ldr	pc, [ip, #2792]!	; 0xae8

0001160c <setlocale@plt>:
   1160c:	add	ip, pc, #0, 12
   11610:	add	ip, ip, #106496	; 0x1a000
   11614:	ldr	pc, [ip, #2784]!	; 0xae0

00011618 <__explicit_bzero_chk@plt>:
   11618:	add	ip, pc, #0, 12
   1161c:	add	ip, ip, #106496	; 0x1a000
   11620:	ldr	pc, [ip, #2776]!	; 0xad8

00011624 <strrchr@plt>:
   11624:	add	ip, pc, #0, 12
   11628:	add	ip, ip, #106496	; 0x1a000
   1162c:	ldr	pc, [ip, #2768]!	; 0xad0

00011630 <nl_langinfo@plt>:
   11630:	add	ip, pc, #0, 12
   11634:	add	ip, ip, #106496	; 0x1a000
   11638:	ldr	pc, [ip, #2760]!	; 0xac8

0001163c <localeconv@plt>:
   1163c:	add	ip, pc, #0, 12
   11640:	add	ip, ip, #106496	; 0x1a000
   11644:	ldr	pc, [ip, #2752]!	; 0xac0

00011648 <fopen64@plt>:
   11648:	add	ip, pc, #0, 12
   1164c:	add	ip, ip, #106496	; 0x1a000
   11650:	ldr	pc, [ip, #2744]!	; 0xab8

00011654 <renameat@plt>:
   11654:	add	ip, pc, #0, 12
   11658:	add	ip, ip, #106496	; 0x1a000
   1165c:	ldr	pc, [ip, #2736]!	; 0xab0

00011660 <bindtextdomain@plt>:
   11660:	add	ip, pc, #0, 12
   11664:	add	ip, ip, #106496	; 0x1a000
   11668:	ldr	pc, [ip, #2728]!	; 0xaa8

0001166c <fread_unlocked@plt>:
   1166c:	add	ip, pc, #0, 12
   11670:	add	ip, ip, #106496	; 0x1a000
   11674:	ldr	pc, [ip, #2720]!	; 0xaa0

00011678 <getrandom@plt>:
   11678:	add	ip, pc, #0, 12
   1167c:	add	ip, ip, #106496	; 0x1a000
   11680:	ldr	pc, [ip, #2712]!	; 0xa98

00011684 <aligned_alloc@plt>:
   11684:	add	ip, pc, #0, 12
   11688:	add	ip, ip, #106496	; 0x1a000
   1168c:	ldr	pc, [ip, #2704]!	; 0xa90

00011690 <sync@plt>:
   11690:	add	ip, pc, #0, 12
   11694:	add	ip, ip, #106496	; 0x1a000
   11698:	ldr	pc, [ip, #2696]!	; 0xa88

0001169c <chmod@plt>:
   1169c:	add	ip, pc, #0, 12
   116a0:	add	ip, ip, #106496	; 0x1a000
   116a4:	ldr	pc, [ip, #2688]!	; 0xa80

000116a8 <isatty@plt>:
   116a8:	add	ip, pc, #0, 12
   116ac:	add	ip, ip, #106496	; 0x1a000
   116b0:	ldr	pc, [ip, #2680]!	; 0xa78

000116b4 <strncmp@plt>:
   116b4:	add	ip, pc, #0, 12
   116b8:	add	ip, ip, #106496	; 0x1a000
   116bc:	ldr	pc, [ip, #2672]!	; 0xa70

000116c0 <fdatasync@plt>:
   116c0:	add	ip, pc, #0, 12
   116c4:	add	ip, ip, #106496	; 0x1a000
   116c8:	ldr	pc, [ip, #2664]!	; 0xa68

000116cc <abort@plt>:
   116cc:	add	ip, pc, #0, 12
   116d0:	add	ip, ip, #106496	; 0x1a000
   116d4:	ldr	pc, [ip, #2656]!	; 0xa60

000116d8 <close@plt>:
   116d8:	add	ip, pc, #0, 12
   116dc:	add	ip, ip, #106496	; 0x1a000
   116e0:	ldr	pc, [ip, #2648]!	; 0xa58

000116e4 <__assert_fail@plt>:
   116e4:	add	ip, pc, #0, 12
   116e8:	add	ip, ip, #106496	; 0x1a000
   116ec:	ldr	pc, [ip, #2640]!	; 0xa50

Disassembly of section .text:

000116f0 <.text>:
   116f0:	mov	fp, #0
   116f4:	mov	lr, #0
   116f8:	pop	{r1}		; (ldr r1, [sp], #4)
   116fc:	mov	r2, sp
   11700:	push	{r2}		; (str r2, [sp, #-4]!)
   11704:	push	{r0}		; (str r0, [sp, #-4]!)
   11708:	ldr	ip, [pc, #16]	; 11720 <__assert_fail@plt+0x3c>
   1170c:	push	{ip}		; (str ip, [sp, #-4]!)
   11710:	ldr	r0, [pc, #12]	; 11724 <__assert_fail@plt+0x40>
   11714:	ldr	r3, [pc, #12]	; 11728 <__assert_fail@plt+0x44>
   11718:	bl	114e0 <__libc_start_main@plt>
   1171c:	bl	116cc <abort@plt>
   11720:	ldrdeq	r9, [r1], -r0
   11724:	ldrdeq	r1, [r1], -r4
   11728:	andeq	r9, r1, r0, ror sp
   1172c:	ldr	r3, [pc, #20]	; 11748 <__assert_fail@plt+0x64>
   11730:	ldr	r2, [pc, #20]	; 1174c <__assert_fail@plt+0x68>
   11734:	add	r3, pc, r3
   11738:	ldr	r2, [r3, r2]
   1173c:	cmp	r2, #0
   11740:	bxeq	lr
   11744:	b	114f8 <__gmon_start__@plt>
   11748:	andeq	sl, r1, r4, asr #17
   1174c:	andeq	r0, r0, r0, asr #2
   11750:	ldr	r0, [pc, #24]	; 11770 <__assert_fail@plt+0x8c>
   11754:	ldr	r3, [pc, #24]	; 11774 <__assert_fail@plt+0x90>
   11758:	cmp	r3, r0
   1175c:	bxeq	lr
   11760:	ldr	r3, [pc, #16]	; 11778 <__assert_fail@plt+0x94>
   11764:	cmp	r3, #0
   11768:	bxeq	lr
   1176c:	bx	r3
   11770:	andeq	ip, r2, r0, lsr #3
   11774:	andeq	ip, r2, r0, lsr #3
   11778:	andeq	r0, r0, r0
   1177c:	ldr	r0, [pc, #36]	; 117a8 <__assert_fail@plt+0xc4>
   11780:	ldr	r1, [pc, #36]	; 117ac <__assert_fail@plt+0xc8>
   11784:	sub	r1, r1, r0
   11788:	asr	r1, r1, #2
   1178c:	add	r1, r1, r1, lsr #31
   11790:	asrs	r1, r1, #1
   11794:	bxeq	lr
   11798:	ldr	r3, [pc, #16]	; 117b0 <__assert_fail@plt+0xcc>
   1179c:	cmp	r3, #0
   117a0:	bxeq	lr
   117a4:	bx	r3
   117a8:	andeq	ip, r2, r0, lsr #3
   117ac:	andeq	ip, r2, r0, lsr #3
   117b0:	andeq	r0, r0, r0
   117b4:	push	{r4, lr}
   117b8:	ldr	r4, [pc, #24]	; 117d8 <__assert_fail@plt+0xf4>
   117bc:	ldrb	r3, [r4]
   117c0:	cmp	r3, #0
   117c4:	popne	{r4, pc}
   117c8:	bl	11750 <__assert_fail@plt+0x6c>
   117cc:	mov	r3, #1
   117d0:	strb	r3, [r4]
   117d4:	pop	{r4, pc}
   117d8:			; <UNDEFINED> instruction: 0x0002c1bc
   117dc:	b	1177c <__assert_fail@plt+0x98>
   117e0:	push	{fp, lr}
   117e4:	mov	fp, sp
   117e8:	sub	sp, sp, #56	; 0x38
   117ec:	mov	r4, r0
   117f0:	cmp	r0, #0
   117f4:	bne	11a90 <__assert_fail@plt+0x3ac>
   117f8:	movw	r1, #40483	; 0x9e23
   117fc:	mov	r0, #0
   11800:	mov	r2, #5
   11804:	movt	r1, #1
   11808:	bl	11408 <dcgettext@plt>
   1180c:	mov	r1, r0
   11810:	movw	r0, #49616	; 0xc1d0
   11814:	movt	r0, #2
   11818:	ldr	r2, [r0]
   1181c:	mov	r0, #1
   11820:	bl	115a0 <__printf_chk@plt>
   11824:	movw	r1, #40514	; 0x9e42
   11828:	mov	r0, #0
   1182c:	mov	r2, #5
   11830:	movt	r1, #1
   11834:	bl	11408 <dcgettext@plt>
   11838:	movw	r7, #49588	; 0xc1b4
   1183c:	movt	r7, #2
   11840:	ldr	r1, [r7]
   11844:	bl	1136c <fputs_unlocked@plt>
   11848:	movw	r1, #40648	; 0x9ec8
   1184c:	mov	r0, #0
   11850:	mov	r2, #5
   11854:	movt	r1, #1
   11858:	bl	11408 <dcgettext@plt>
   1185c:	ldr	r1, [r7]
   11860:	bl	1136c <fputs_unlocked@plt>
   11864:	movw	r1, #42381	; 0xa58d
   11868:	mov	r0, #0
   1186c:	mov	r2, #5
   11870:	movt	r1, #1
   11874:	bl	11408 <dcgettext@plt>
   11878:	ldr	r1, [r7]
   1187c:	bl	1136c <fputs_unlocked@plt>
   11880:	movw	r1, #40687	; 0x9eef
   11884:	mov	r0, #0
   11888:	mov	r2, #5
   1188c:	movt	r1, #1
   11890:	bl	11408 <dcgettext@plt>
   11894:	mov	r1, r0
   11898:	mov	r0, #1
   1189c:	mov	r2, #3
   118a0:	bl	115a0 <__printf_chk@plt>
   118a4:	movw	r1, #40949	; 0x9ff5
   118a8:	mov	r0, #0
   118ac:	mov	r2, #5
   118b0:	movt	r1, #1
   118b4:	bl	11408 <dcgettext@plt>
   118b8:	ldr	r1, [r7]
   118bc:	bl	1136c <fputs_unlocked@plt>
   118c0:	movw	r1, #41316	; 0xa164
   118c4:	mov	r0, #0
   118c8:	mov	r2, #5
   118cc:	movt	r1, #1
   118d0:	bl	11408 <dcgettext@plt>
   118d4:	ldr	r1, [r7]
   118d8:	bl	1136c <fputs_unlocked@plt>
   118dc:	movw	r1, #41361	; 0xa191
   118e0:	mov	r0, #0
   118e4:	mov	r2, #5
   118e8:	movt	r1, #1
   118ec:	bl	11408 <dcgettext@plt>
   118f0:	ldr	r1, [r7]
   118f4:	bl	1136c <fputs_unlocked@plt>
   118f8:	movw	r1, #41415	; 0xa1c7
   118fc:	mov	r0, #0
   11900:	mov	r2, #5
   11904:	movt	r1, #1
   11908:	bl	11408 <dcgettext@plt>
   1190c:	ldr	r1, [r7]
   11910:	bl	1136c <fputs_unlocked@plt>
   11914:	movw	r1, #41896	; 0xa3a8
   11918:	mov	r0, #0
   1191c:	mov	r2, #5
   11920:	movt	r1, #1
   11924:	bl	11408 <dcgettext@plt>
   11928:	ldr	r1, [r7]
   1192c:	bl	1136c <fputs_unlocked@plt>
   11930:	movw	r0, #43592	; 0xaa48
   11934:	mov	r2, #48	; 0x30
   11938:	mov	r6, sp
   1193c:	movw	r5, #42184	; 0xa4c8
   11940:	movt	r0, #1
   11944:	movt	r5, #1
   11948:	add	r1, r0, #32
   1194c:	add	r3, r0, #16
   11950:	vld1.64	{d18-d19}, [r0], r2
   11954:	vld1.64	{d16-d17}, [r1]
   11958:	vld1.64	{d20-d21}, [r3]
   1195c:	vldr	d22, [r0]
   11960:	add	r1, r6, #32
   11964:	add	r0, r6, #16
   11968:	vst1.64	{d16-d17}, [r1]
   1196c:	movw	r1, #42456	; 0xa5d8
   11970:	vst1.64	{d20-d21}, [r0]
   11974:	mov	r0, r6
   11978:	movt	r1, #1
   1197c:	vst1.64	{d18-d19}, [r0], r2
   11980:	vstr	d22, [r0]
   11984:	mov	r0, r5
   11988:	bl	11390 <strcmp@plt>
   1198c:	cmp	r0, #0
   11990:	ldrne	r1, [r6, #8]!
   11994:	cmpne	r1, #0
   11998:	bne	11984 <__assert_fail@plt+0x2a0>
   1199c:	movw	r1, #42551	; 0xa637
   119a0:	ldr	r6, [r6, #4]
   119a4:	mov	r0, #0
   119a8:	mov	r2, #5
   119ac:	movt	r1, #1
   119b0:	bl	11408 <dcgettext@plt>
   119b4:	movw	r2, #42324	; 0xa554
   119b8:	movw	r3, #42574	; 0xa64e
   119bc:	mov	r1, r0
   119c0:	mov	r0, #1
   119c4:	movt	r2, #1
   119c8:	movt	r3, #1
   119cc:	bl	115a0 <__printf_chk@plt>
   119d0:	cmp	r6, #0
   119d4:	mov	r0, #5
   119d8:	mov	r1, #0
   119dc:	moveq	r6, r5
   119e0:	bl	1160c <setlocale@plt>
   119e4:	cmp	r0, #0
   119e8:	beq	11a20 <__assert_fail@plt+0x33c>
   119ec:	movw	r1, #42614	; 0xa676
   119f0:	mov	r2, #3
   119f4:	movt	r1, #1
   119f8:	bl	116b4 <strncmp@plt>
   119fc:	cmp	r0, #0
   11a00:	beq	11a20 <__assert_fail@plt+0x33c>
   11a04:	movw	r1, #42618	; 0xa67a
   11a08:	mov	r0, #0
   11a0c:	mov	r2, #5
   11a10:	movt	r1, #1
   11a14:	bl	11408 <dcgettext@plt>
   11a18:	ldr	r1, [r7]
   11a1c:	bl	1136c <fputs_unlocked@plt>
   11a20:	movw	r1, #42689	; 0xa6c1
   11a24:	mov	r0, #0
   11a28:	mov	r2, #5
   11a2c:	movt	r1, #1
   11a30:	bl	11408 <dcgettext@plt>
   11a34:	movw	r2, #42574	; 0xa64e
   11a38:	mov	r1, r0
   11a3c:	mov	r0, #1
   11a40:	mov	r3, r5
   11a44:	movt	r2, #1
   11a48:	bl	115a0 <__printf_chk@plt>
   11a4c:	movw	r1, #42716	; 0xa6dc
   11a50:	mov	r0, #0
   11a54:	mov	r2, #5
   11a58:	movt	r1, #1
   11a5c:	bl	11408 <dcgettext@plt>
   11a60:	mov	r1, r0
   11a64:	movw	r0, #42484	; 0xa5f4
   11a68:	movw	r3, #41895	; 0xa3a7
   11a6c:	cmp	r6, r5
   11a70:	mov	r2, r6
   11a74:	movt	r0, #1
   11a78:	movt	r3, #1
   11a7c:	moveq	r3, r0
   11a80:	mov	r0, #1
   11a84:	bl	115a0 <__printf_chk@plt>
   11a88:	mov	r0, r4
   11a8c:	bl	1151c <exit@plt>
   11a90:	movw	r0, #49584	; 0xc1b0
   11a94:	movw	r1, #40444	; 0x9dfc
   11a98:	mov	r2, #5
   11a9c:	movt	r0, #2
   11aa0:	movt	r1, #1
   11aa4:	ldr	r5, [r0]
   11aa8:	mov	r0, #0
   11aac:	bl	11408 <dcgettext@plt>
   11ab0:	mov	r2, r0
   11ab4:	movw	r0, #49616	; 0xc1d0
   11ab8:	mov	r1, #1
   11abc:	movt	r0, #2
   11ac0:	ldr	r3, [r0]
   11ac4:	mov	r0, r5
   11ac8:	bl	115c4 <__fprintf_chk@plt>
   11acc:	mov	r0, r4
   11ad0:	bl	1151c <exit@plt>
   11ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ad8:	add	fp, sp, #28
   11adc:	sub	sp, sp, #108	; 0x6c
   11ae0:	vmov.i32	q8, #0	; 0x00000000
   11ae4:	sub	r7, fp, #56	; 0x38
   11ae8:	mov	r5, r1
   11aec:	mov	r9, r0
   11af0:	mov	r0, #20
   11af4:	mov	r4, #0
   11af8:	mov	r1, r7
   11afc:	str	r4, [fp, #-40]	; 0xffffffd8
   11b00:	vst1.64	{d16-d17}, [r1], r0
   11b04:	str	r4, [r1]
   11b08:	ldr	r0, [r5]
   11b0c:	bl	14cec <__assert_fail@plt+0x3608>
   11b10:	movw	r1, #41895	; 0xa3a7
   11b14:	mov	r0, #6
   11b18:	movt	r1, #1
   11b1c:	bl	1160c <setlocale@plt>
   11b20:	movw	r6, #42328	; 0xa558
   11b24:	movw	r1, #42190	; 0xa4ce
   11b28:	movt	r6, #1
   11b2c:	movt	r1, #1
   11b30:	mov	r0, r6
   11b34:	bl	11660 <bindtextdomain@plt>
   11b38:	mov	r0, r6
   11b3c:	bl	1142c <textdomain@plt>
   11b40:	movw	r0, #15288	; 0x3bb8
   11b44:	movt	r0, #1
   11b48:	bl	19dd4 <__assert_fail@plt+0x86f0>
   11b4c:	mvn	r0, #0
   11b50:	mov	r1, #3
   11b54:	movw	r6, #42214	; 0xa4e6
   11b58:	mov	sl, #0
   11b5c:	str	r0, [fp, #-44]	; 0xffffffd4
   11b60:	str	r0, [fp, #-48]	; 0xffffffd0
   11b64:	str	r1, [fp, #-52]	; 0xffffffcc
   11b68:	mov	r1, #0
   11b6c:	mov	r0, #3
   11b70:	movt	r6, #1
   11b74:	str	r1, [sp, #40]	; 0x28
   11b78:	mvn	r1, #0
   11b7c:	str	r0, [fp, #-60]	; 0xffffffc4
   11b80:	add	r0, r7, #8
   11b84:	str	r1, [sp, #64]	; 0x40
   11b88:	mvn	r1, #0
   11b8c:	str	r0, [sp, #56]	; 0x38
   11b90:	mov	r0, #0
   11b94:	str	r1, [sp, #60]	; 0x3c
   11b98:	mov	r1, #0
   11b9c:	str	r1, [sp, #52]	; 0x34
   11ba0:	mov	r1, #0
   11ba4:	str	r1, [fp, #-64]	; 0xffffffc0
   11ba8:	mov	r1, #0
   11bac:	str	r1, [sp, #68]	; 0x44
   11bb0:	b	11bc4 <__assert_fail@plt+0x4e0>
   11bb4:	mov	r0, #1
   11bb8:	str	r0, [sp, #52]	; 0x34
   11bbc:	mov	r0, r7
   11bc0:	mov	sl, r8
   11bc4:	movw	r3, #43384	; 0xa978
   11bc8:	mov	r7, r0
   11bcc:	mov	r0, r9
   11bd0:	mov	r1, r5
   11bd4:	mov	r2, r6
   11bd8:	mov	r8, sl
   11bdc:	str	r4, [sp]
   11be0:	movt	r3, #1
   11be4:	bl	11504 <getopt_long@plt>
   11be8:	cmp	r0, #101	; 0x65
   11bec:	ble	11e0c <__assert_fail@plt+0x728>
   11bf0:	sub	r1, r0, #102	; 0x66
   11bf4:	cmp	r1, #20
   11bf8:	bhi	11cc8 <__assert_fail@plt+0x5e4>
   11bfc:	add	r2, pc, #8
   11c00:	mov	r0, #1
   11c04:	mov	sl, r8
   11c08:	ldr	pc, [r2, r1, lsl #2]
   11c0c:	andeq	r1, r1, r4, asr #23
   11c10:	ldrdeq	r2, [r1], -r0
   11c14:	ldrdeq	r2, [r1], -r0
   11c18:	ldrdeq	r2, [r1], -r0
   11c1c:	ldrdeq	r2, [r1], -r0
   11c20:	ldrdeq	r2, [r1], -r0
   11c24:	ldrdeq	r2, [r1], -r0
   11c28:	ldrdeq	r2, [r1], -r0
   11c2c:	andeq	r1, r1, r0, ror #24
   11c30:	ldrdeq	r2, [r1], -r0
   11c34:	ldrdeq	r2, [r1], -r0
   11c38:	ldrdeq	r2, [r1], -r0
   11c3c:	ldrdeq	r2, [r1], -r0
   11c40:	andeq	r1, r1, r4, ror sp
   11c44:	ldrdeq	r2, [r1], -r0
   11c48:	andeq	r1, r1, r4, lsl #26
   11c4c:			; <UNDEFINED> instruction: 0x00011bb4
   11c50:	ldrdeq	r2, [r1], -r0
   11c54:	andeq	r1, r1, r0, lsl #28
   11c58:	ldrdeq	r2, [r1], -r0
   11c5c:	strdeq	r1, [r1], -r4
   11c60:	movw	r0, #49592	; 0xc1b8
   11c64:	movw	r1, #42224	; 0xa4f0
   11c68:	mov	sl, r6
   11c6c:	mov	r6, r7
   11c70:	mov	r2, #5
   11c74:	mov	r4, #0
   11c78:	movt	r0, #2
   11c7c:	movt	r1, #1
   11c80:	ldr	r7, [r0]
   11c84:	mov	r0, #0
   11c88:	bl	11408 <dcgettext@plt>
   11c8c:	mvn	r1, #-1073741824	; 0xc0000000
   11c90:	mov	r2, #0
   11c94:	mov	r3, #0
   11c98:	stm	sp, {r1, r4}
   11c9c:	movw	r1, #41895	; 0xa3a7
   11ca0:	str	r0, [sp, #12]
   11ca4:	mov	r0, r7
   11ca8:	str	r4, [sp, #16]
   11cac:	movt	r1, #1
   11cb0:	str	r1, [sp, #8]
   11cb4:	bl	184e4 <__assert_fail@plt+0x6e00>
   11cb8:	str	r0, [fp, #-60]	; 0xffffffc4
   11cbc:	mov	r0, r6
   11cc0:	mov	r6, sl
   11cc4:	b	11de8 <__assert_fail@plt+0x704>
   11cc8:	cmp	r0, #256	; 0x100
   11ccc:	bne	124d0 <__assert_fail@plt+0xdec>
   11cd0:	movw	r0, #49592	; 0xc1b8
   11cd4:	cmp	r8, #0
   11cd8:	movt	r0, #2
   11cdc:	ldr	sl, [r0]
   11ce0:	mov	r0, r7
   11ce4:	beq	11bc4 <__assert_fail@plt+0x4e0>
   11ce8:	mov	r0, r8
   11cec:	mov	r1, sl
   11cf0:	bl	11390 <strcmp@plt>
   11cf4:	cmp	r0, #0
   11cf8:	mov	r0, r7
   11cfc:	beq	11bc4 <__assert_fail@plt+0x4e0>
   11d00:	b	124d8 <__assert_fail@plt+0xdf4>
   11d04:	movw	r0, #49592	; 0xc1b8
   11d08:	mov	sl, r8
   11d0c:	movt	r0, #2
   11d10:	ldr	r1, [r0]
   11d14:	mov	r0, #3
   11d18:	str	r0, [sp, #40]	; 0x28
   11d1c:	mov	r0, r7
   11d20:	cmp	r1, #0
   11d24:	beq	11bc4 <__assert_fail@plt+0x4e0>
   11d28:	movw	r0, #49492	; 0xc154
   11d2c:	movw	sl, #43560	; 0xaa28
   11d30:	mov	r2, #4
   11d34:	movt	r0, #2
   11d38:	str	r2, [sp]
   11d3c:	movw	r2, #43572	; 0xaa34
   11d40:	movt	sl, #1
   11d44:	movt	r2, #1
   11d48:	ldr	r0, [r0]
   11d4c:	mov	r3, sl
   11d50:	str	r0, [sp, #4]
   11d54:	mov	r0, #1
   11d58:	str	r0, [sp, #8]
   11d5c:	movw	r0, #42283	; 0xa52b
   11d60:	movt	r0, #1
   11d64:	bl	138a0 <__assert_fail@plt+0x21bc>
   11d68:	ldr	r0, [sl, r0, lsl #2]
   11d6c:	str	r0, [sp, #40]	; 0x28
   11d70:	b	11bbc <__assert_fail@plt+0x4d8>
   11d74:	movw	r0, #49592	; 0xc1b8
   11d78:	movw	r1, #42306	; 0xa542
   11d7c:	mov	r4, r6
   11d80:	mov	r6, r7
   11d84:	mov	r2, #5
   11d88:	mov	sl, #0
   11d8c:	movt	r0, #2
   11d90:	movt	r1, #1
   11d94:	ldr	r7, [r0]
   11d98:	mov	r0, #0
   11d9c:	bl	11408 <dcgettext@plt>
   11da0:	mvn	r1, #0
   11da4:	str	r0, [sp, #12]
   11da8:	mov	r0, r7
   11dac:	mov	r2, #0
   11db0:	mov	r3, #0
   11db4:	str	sl, [sp, #16]
   11db8:	str	r1, [sp]
   11dbc:	mvn	r1, #-2147483648	; 0x80000000
   11dc0:	str	r1, [sp, #4]
   11dc4:	movw	r1, #42292	; 0xa534
   11dc8:	movt	r1, #1
   11dcc:	str	r1, [sp, #8]
   11dd0:	mov	r1, #0
   11dd4:	bl	183f0 <__assert_fail@plt+0x6d0c>
   11dd8:	str	r0, [sp, #64]	; 0x40
   11ddc:	mov	r0, r6
   11de0:	str	r1, [sp, #60]	; 0x3c
   11de4:	mov	r6, r4
   11de8:	mov	r4, #0
   11dec:	mov	sl, r8
   11df0:	b	11bc4 <__assert_fail@plt+0x4e0>
   11df4:	mov	r0, #1
   11df8:	str	r0, [sp, #68]	; 0x44
   11dfc:	b	11bbc <__assert_fail@plt+0x4d8>
   11e00:	mov	r0, #1
   11e04:	str	r0, [fp, #-64]	; 0xffffffc0
   11e08:	b	11bbc <__assert_fail@plt+0x4d8>
   11e0c:	ldr	r1, [sp, #40]	; 0x28
   11e10:	cmn	r0, #1
   11e14:	bne	12470 <__assert_fail@plt+0xd8c>
   11e18:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11e1c:	ldr	r2, [sp, #64]	; 0x40
   11e20:	ldr	r3, [sp, #60]	; 0x3c
   11e24:	str	r1, [sp, #40]	; 0x28
   11e28:	strb	r0, [fp, #-35]	; 0xffffffdd
   11e2c:	ldr	r0, [sp, #68]	; 0x44
   11e30:	strb	r0, [fp, #-34]	; 0xffffffde
   11e34:	ldr	r0, [sp, #52]	; 0x34
   11e38:	strb	r0, [fp, #-36]	; 0xffffffdc
   11e3c:	ldr	r0, [sp, #56]	; 0x38
   11e40:	strd	r2, [r0]
   11e44:	ldr	r0, [fp, #-60]	; 0xffffffc4
   11e48:	str	r0, [fp, #-52]	; 0xffffffcc
   11e4c:	movw	r0, #49576	; 0xc1a8
   11e50:	str	r1, [fp, #-40]	; 0xffffffd8
   11e54:	strb	r7, [fp, #-56]	; 0xffffffc8
   11e58:	movt	r0, #2
   11e5c:	ldr	r6, [r0]
   11e60:	subs	r0, r9, r6
   11e64:	str	r0, [sp, #64]	; 0x40
   11e68:	beq	124fc <__assert_fail@plt+0xe18>
   11e6c:	mov	r0, r8
   11e70:	mvn	r1, #0
   11e74:	bl	16ab4 <__assert_fail@plt+0x53d0>
   11e78:	movw	r1, #49600	; 0xc1c0
   11e7c:	cmp	r0, #0
   11e80:	movt	r1, #2
   11e84:	str	r0, [r1]
   11e88:	beq	12528 <__assert_fail@plt+0xe44>
   11e8c:	movw	r0, #9576	; 0x2568
   11e90:	movt	r0, #1
   11e94:	bl	19dd4 <__assert_fail@plt+0x86f0>
   11e98:	ldr	r0, [sp, #64]	; 0x40
   11e9c:	cmp	r0, #1
   11ea0:	blt	12444 <__assert_fail@plt+0xd60>
   11ea4:	movw	r8, #43868	; 0xab5c
   11ea8:	add	r0, r5, r6, lsl #2
   11eac:	mov	r9, #0
   11eb0:	mov	r6, #1
   11eb4:	str	r7, [sp, #24]
   11eb8:	movt	r8, #1
   11ebc:	str	r0, [sp, #60]	; 0x3c
   11ec0:	b	11f20 <__assert_fail@plt+0x83c>
   11ec4:	bl	11558 <__errno_location@plt>
   11ec8:	movw	r1, #43254	; 0xa8f6
   11ecc:	ldr	r4, [r0]
   11ed0:	mov	r0, #0
   11ed4:	mov	r2, #5
   11ed8:	mov	r6, #0
   11edc:	movt	r1, #1
   11ee0:	bl	11408 <dcgettext@plt>
   11ee4:	mov	r2, r0
   11ee8:	mov	r0, #0
   11eec:	mov	r1, r4
   11ef0:	mov	r3, sl
   11ef4:	bl	114b0 <error@plt>
   11ef8:	mov	r7, sl
   11efc:	mov	r0, r7
   11f00:	bl	13fb0 <__assert_fail@plt+0x28cc>
   11f04:	ldr	r0, [fp, #-64]	; 0xffffffc0
   11f08:	add	r9, r9, #1
   11f0c:	and	r0, r0, r6
   11f10:	mov	r6, r0
   11f14:	ldr	r0, [sp, #64]	; 0x40
   11f18:	cmp	r9, r0
   11f1c:	beq	12438 <__assert_fail@plt+0xd54>
   11f20:	ldr	r4, [sp, #60]	; 0x3c
   11f24:	mov	r0, #0
   11f28:	mov	r1, #3
   11f2c:	ldr	r2, [r4, r9, lsl #2]
   11f30:	bl	16694 <__assert_fail@plt+0x4fb0>
   11f34:	bl	18374 <__assert_fail@plt+0x6c90>
   11f38:	ldr	r5, [r4, r9, lsl #2]
   11f3c:	movw	r1, #44242	; 0xacd2
   11f40:	mov	r7, r0
   11f44:	movt	r1, #1
   11f48:	mov	r0, r5
   11f4c:	bl	11390 <strcmp@plt>
   11f50:	movw	r1, #49600	; 0xc1c0
   11f54:	cmp	r0, #0
   11f58:	str	r6, [fp, #-64]	; 0xffffffc0
   11f5c:	movt	r1, #2
   11f60:	ldr	r4, [r1]
   11f64:	beq	1221c <__assert_fail@plt+0xb38>
   11f68:	mov	r0, r5
   11f6c:	movw	r1, #257	; 0x101
   11f70:	str	r7, [fp, #-60]	; 0xffffffc4
   11f74:	bl	13f74 <__assert_fail@plt+0x2890>
   11f78:	mov	r7, r0
   11f7c:	cmn	r0, #1
   11f80:	ble	12254 <__assert_fail@plt+0xb70>
   11f84:	ldr	sl, [fp, #-60]	; 0xffffffc4
   11f88:	mov	r0, r7
   11f8c:	mov	r2, r4
   11f90:	sub	r3, fp, #56	; 0x38
   11f94:	mov	r1, sl
   11f98:	bl	12578 <__assert_fail@plt+0xe94>
   11f9c:	mov	r6, r0
   11fa0:	mov	r0, r7
   11fa4:	bl	116d8 <close@plt>
   11fa8:	cmp	r0, #0
   11fac:	bne	11ec4 <__assert_fail@plt+0x7e0>
   11fb0:	ldr	r0, [sp, #40]	; 0x28
   11fb4:	cmp	r0, #0
   11fb8:	beq	12328 <__assert_fail@plt+0xc44>
   11fbc:	ldr	r7, [fp, #-60]	; 0xffffffc4
   11fc0:	eors	r0, r6, #1
   11fc4:	bne	11efc <__assert_fail@plt+0x818>
   11fc8:	mov	r0, r5
   11fcc:	bl	18374 <__assert_fail@plt+0x6c90>
   11fd0:	mov	r4, r0
   11fd4:	bl	13b14 <__assert_fail@plt+0x2430>
   11fd8:	mov	r6, r0
   11fdc:	mov	r0, r4
   11fe0:	str	r4, [sp, #68]	; 0x44
   11fe4:	bl	13ca0 <__assert_fail@plt+0x25bc>
   11fe8:	mov	sl, r0
   11fec:	mov	r0, #0
   11ff0:	mov	r1, #3
   11ff4:	mov	r2, sl
   11ff8:	bl	16694 <__assert_fail@plt+0x4fb0>
   11ffc:	bl	18374 <__assert_fail@plt+0x6c90>
   12000:	ldr	r4, [sp, #40]	; 0x28
   12004:	str	r0, [sp, #32]
   12008:	mvn	r0, #0
   1200c:	cmp	r4, #3
   12010:	bne	12020 <__assert_fail@plt+0x93c>
   12014:	mov	r0, sl
   12018:	mov	r1, #18688	; 0x4900
   1201c:	bl	13f74 <__assert_fail@plt+0x2890>
   12020:	str	r0, [sp, #48]	; 0x30
   12024:	ldr	r0, [sp, #52]	; 0x34
   12028:	str	r6, [sp, #56]	; 0x38
   1202c:	tst	r0, #255	; 0xff
   12030:	beq	1205c <__assert_fail@plt+0x978>
   12034:	movw	r1, #43274	; 0xa90a
   12038:	mov	r0, #0
   1203c:	mov	r2, #5
   12040:	movt	r1, #1
   12044:	bl	11408 <dcgettext@plt>
   12048:	mov	r2, r0
   1204c:	mov	r0, #0
   12050:	mov	r1, #0
   12054:	mov	r3, r7
   12058:	bl	114b0 <error@plt>
   1205c:	mov	r6, #1
   12060:	cmp	r4, #1
   12064:	str	sl, [sp, #20]
   12068:	beq	12340 <__assert_fail@plt+0xc5c>
   1206c:	ldr	r6, [sp, #56]	; 0x38
   12070:	mov	r0, r6
   12074:	bl	13b60 <__assert_fail@plt+0x247c>
   12078:	cmp	r0, #0
   1207c:	beq	12330 <__assert_fail@plt+0xc4c>
   12080:	mov	sl, r0
   12084:	ldr	r0, [sp, #68]	; 0x44
   12088:	sub	r4, r6, #1
   1208c:	sub	r0, r6, r0
   12090:	add	r0, r5, r0
   12094:	str	r0, [sp, #28]
   12098:	mov	r0, #1
   1209c:	str	r0, [sp, #36]	; 0x24
   120a0:	mov	r0, #1
   120a4:	str	r0, [sp, #44]	; 0x2c
   120a8:	b	120bc <__assert_fail@plt+0x9d8>
   120ac:	ldr	r7, [fp, #-60]	; 0xffffffc4
   120b0:	ldr	r6, [sp, #56]	; 0x38
   120b4:	subs	sl, sl, #1
   120b8:	beq	12338 <__assert_fail@plt+0xc54>
   120bc:	mov	r0, r6
   120c0:	mov	r1, #48	; 0x30
   120c4:	mov	r2, sl
   120c8:	bl	11588 <memset@plt>
   120cc:	ldr	r3, [sp, #68]	; 0x44
   120d0:	mov	r0, #0
   120d4:	mov	r1, r5
   120d8:	mvn	r2, #99	; 0x63
   120dc:	strb	r0, [r6, sl]
   120e0:	mov	r0, #1
   120e4:	str	r0, [sp]
   120e8:	mvn	r0, #99	; 0x63
   120ec:	bl	1756c <__assert_fail@plt+0x5e88>
   120f0:	cmp	r0, #0
   120f4:	beq	12174 <__assert_fail@plt+0xa90>
   120f8:	bl	11558 <__errno_location@plt>
   120fc:	mov	r7, r0
   12100:	ldr	r0, [r7]
   12104:	cmp	r0, #17
   12108:	bne	1220c <__assert_fail@plt+0xb28>
   1210c:	mov	r6, sl
   12110:	cmp	r6, #0
   12114:	beq	120ac <__assert_fail@plt+0x9c8>
   12118:	ldrb	r1, [r4, r6]
   1211c:	mov	r0, r8
   12120:	mov	r2, #65	; 0x41
   12124:	bl	115d0 <memchr@plt>
   12128:	cmp	r0, #0
   1212c:	beq	12450 <__assert_fail@plt+0xd6c>
   12130:	ldrb	r0, [r0, #1]
   12134:	sub	r1, r6, #1
   12138:	cmp	r0, #0
   1213c:	movweq	r0, #48	; 0x30
   12140:	strb	r0, [r4, r6]
   12144:	mov	r6, r1
   12148:	beq	12110 <__assert_fail@plt+0xa2c>
   1214c:	ldr	r3, [sp, #68]	; 0x44
   12150:	mov	r0, #1
   12154:	mov	r1, r5
   12158:	mvn	r2, #99	; 0x63
   1215c:	str	r0, [sp]
   12160:	mvn	r0, #99	; 0x63
   12164:	bl	1756c <__assert_fail@plt+0x5e88>
   12168:	ldr	r6, [sp, #56]	; 0x38
   1216c:	cmp	r0, #0
   12170:	bne	12100 <__assert_fail@plt+0xa1c>
   12174:	ldr	r0, [sp, #48]	; 0x30
   12178:	ldr	r7, [fp, #-60]	; 0xffffffc4
   1217c:	cmp	r0, #0
   12180:	bmi	121a0 <__assert_fail@plt+0xabc>
   12184:	ldr	r1, [sp, #32]
   12188:	bl	134cc <__assert_fail@plt+0x1de8>
   1218c:	cmp	r0, #0
   12190:	mov	r0, #0
   12194:	ldr	r1, [sp, #44]	; 0x2c
   12198:	movne	r1, r0
   1219c:	str	r1, [sp, #44]	; 0x2c
   121a0:	ldr	r0, [sp, #52]	; 0x34
   121a4:	tst	r0, #255	; 0xff
   121a8:	beq	121f0 <__assert_fail@plt+0xb0c>
   121ac:	movw	r1, #43287	; 0xa917
   121b0:	mov	r0, #0
   121b4:	mov	r2, #5
   121b8:	movt	r1, #1
   121bc:	bl	11408 <dcgettext@plt>
   121c0:	mov	r2, r0
   121c4:	ldr	r0, [sp, #68]	; 0x44
   121c8:	mov	r3, r5
   121cc:	mov	r1, #0
   121d0:	str	r0, [sp]
   121d4:	ldr	r0, [sp, #36]	; 0x24
   121d8:	tst	r0, #1
   121dc:	mov	r0, #0
   121e0:	movne	r3, r7
   121e4:	bl	114b0 <error@plt>
   121e8:	mov	r0, #0
   121ec:	str	r0, [sp, #36]	; 0x24
   121f0:	ldr	r0, [sp, #28]
   121f4:	add	r2, sl, #1
   121f8:	mov	r1, r6
   121fc:	bl	113cc <memcpy@plt>
   12200:	subs	sl, sl, #1
   12204:	bne	120bc <__assert_fail@plt+0x9d8>
   12208:	b	12338 <__assert_fail@plt+0xc54>
   1220c:	ldr	r7, [fp, #-60]	; 0xffffffc4
   12210:	subs	sl, sl, #1
   12214:	bne	120bc <__assert_fail@plt+0x9d8>
   12218:	b	12338 <__assert_fail@plt+0xc54>
   1221c:	mov	r0, #1
   12220:	mov	r1, #3
   12224:	bl	13d94 <__assert_fail@plt+0x26b0>
   12228:	cmn	r0, #1
   1222c:	ble	122ac <__assert_fail@plt+0xbc8>
   12230:	tst	r0, #1024	; 0x400
   12234:	bne	122dc <__assert_fail@plt+0xbf8>
   12238:	mov	r0, #1
   1223c:	mov	r1, r7
   12240:	mov	r2, r4
   12244:	sub	r3, fp, #56	; 0x38
   12248:	bl	12578 <__assert_fail@plt+0xe94>
   1224c:	mov	r6, r0
   12250:	b	11efc <__assert_fail@plt+0x818>
   12254:	bl	11558 <__errno_location@plt>
   12258:	mov	r6, r0
   1225c:	ldr	r0, [r0]
   12260:	cmp	r0, #13
   12264:	bne	12288 <__assert_fail@plt+0xba4>
   12268:	ldr	r0, [sp, #24]
   1226c:	tst	r0, #255	; 0xff
   12270:	beq	12288 <__assert_fail@plt+0xba4>
   12274:	mov	r0, r5
   12278:	mov	r1, #128	; 0x80
   1227c:	bl	1169c <chmod@plt>
   12280:	cmp	r0, #0
   12284:	beq	1230c <__assert_fail@plt+0xc28>
   12288:	movw	r1, #43223	; 0xa8d7
   1228c:	ldr	r4, [r6]
   12290:	mov	r0, #0
   12294:	mov	r2, #5
   12298:	mov	r6, #0
   1229c:	movt	r1, #1
   122a0:	bl	11408 <dcgettext@plt>
   122a4:	ldr	r7, [fp, #-60]	; 0xffffffc4
   122a8:	b	122cc <__assert_fail@plt+0xbe8>
   122ac:	bl	11558 <__errno_location@plt>
   122b0:	movw	r1, #42851	; 0xa763
   122b4:	ldr	r4, [r0]
   122b8:	mov	r0, #0
   122bc:	mov	r2, #5
   122c0:	mov	r6, #0
   122c4:	movt	r1, #1
   122c8:	bl	11408 <dcgettext@plt>
   122cc:	mov	r2, r0
   122d0:	mov	r0, #0
   122d4:	mov	r1, r4
   122d8:	b	12300 <__assert_fail@plt+0xc1c>
   122dc:	movw	r1, #42868	; 0xa774
   122e0:	mov	r0, #0
   122e4:	mov	r2, #5
   122e8:	mov	r6, #0
   122ec:	movt	r1, #1
   122f0:	bl	11408 <dcgettext@plt>
   122f4:	mov	r2, r0
   122f8:	mov	r0, #0
   122fc:	mov	r1, #0
   12300:	mov	r3, r7
   12304:	bl	114b0 <error@plt>
   12308:	b	11efc <__assert_fail@plt+0x818>
   1230c:	mov	r0, r5
   12310:	movw	r1, #257	; 0x101
   12314:	bl	13f74 <__assert_fail@plt+0x2890>
   12318:	mov	r7, r0
   1231c:	cmn	r0, #1
   12320:	bgt	11f84 <__assert_fail@plt+0x8a0>
   12324:	b	12288 <__assert_fail@plt+0xba4>
   12328:	ldr	r7, [fp, #-60]	; 0xffffffc4
   1232c:	b	11efc <__assert_fail@plt+0x818>
   12330:	mov	r0, #1
   12334:	str	r0, [sp, #44]	; 0x2c
   12338:	ldr	r0, [sp, #44]	; 0x2c
   1233c:	and	r6, r0, #1
   12340:	mov	r0, r5
   12344:	bl	11414 <unlink@plt>
   12348:	cmp	r0, #0
   1234c:	beq	1236c <__assert_fail@plt+0xc88>
   12350:	bl	11558 <__errno_location@plt>
   12354:	ldr	r4, [r0]
   12358:	ldr	r5, [sp, #32]
   1235c:	movw	r1, #43305	; 0xa929
   12360:	mov	r6, #0
   12364:	movt	r1, #1
   12368:	b	12388 <__assert_fail@plt+0xca4>
   1236c:	ldr	r0, [sp, #52]	; 0x34
   12370:	ldr	r5, [sp, #32]
   12374:	movw	r1, #43326	; 0xa93e
   12378:	mov	r4, #0
   1237c:	movt	r1, #1
   12380:	tst	r0, #255	; 0xff
   12384:	beq	123a8 <__assert_fail@plt+0xcc4>
   12388:	mov	r0, #0
   1238c:	mov	r2, #5
   12390:	bl	11408 <dcgettext@plt>
   12394:	mov	r2, r0
   12398:	mov	r0, #0
   1239c:	mov	r1, r4
   123a0:	mov	r3, r7
   123a4:	bl	114b0 <error@plt>
   123a8:	ldr	sl, [sp, #48]	; 0x30
   123ac:	cmp	sl, #0
   123b0:	bmi	12418 <__assert_fail@plt+0xd34>
   123b4:	mov	r0, sl
   123b8:	mov	r1, r5
   123bc:	bl	134cc <__assert_fail@plt+0x1de8>
   123c0:	mov	r4, r0
   123c4:	mov	r0, sl
   123c8:	bl	116d8 <close@plt>
   123cc:	cmp	r0, #0
   123d0:	beq	1240c <__assert_fail@plt+0xd28>
   123d4:	bl	11558 <__errno_location@plt>
   123d8:	movw	r1, #43254	; 0xa8f6
   123dc:	ldr	r4, [r0]
   123e0:	mov	r0, #0
   123e4:	mov	r2, #5
   123e8:	mov	r6, #0
   123ec:	movt	r1, #1
   123f0:	bl	11408 <dcgettext@plt>
   123f4:	mov	r2, r0
   123f8:	mov	r0, #0
   123fc:	mov	r1, r4
   12400:	mov	r3, r5
   12404:	bl	114b0 <error@plt>
   12408:	b	12418 <__assert_fail@plt+0xd34>
   1240c:	clz	r0, r4
   12410:	lsr	r0, r0, #5
   12414:	and	r6, r6, r0
   12418:	ldr	r0, [sp, #68]	; 0x44
   1241c:	ldr	r4, [sp, #20]
   12420:	bl	13fb0 <__assert_fail@plt+0x28cc>
   12424:	mov	r0, r4
   12428:	bl	13fb0 <__assert_fail@plt+0x28cc>
   1242c:	mov	r0, r5
   12430:	bl	13fb0 <__assert_fail@plt+0x28cc>
   12434:	b	11efc <__assert_fail@plt+0x818>
   12438:	eor	r0, r6, #1
   1243c:	sub	sp, fp, #28
   12440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12444:	mov	r0, #0
   12448:	sub	sp, fp, #28
   1244c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12450:	movw	r0, #42820	; 0xa744
   12454:	movw	r1, #43338	; 0xa94a
   12458:	movw	r3, #43350	; 0xa956
   1245c:	mov	r2, #1000	; 0x3e8
   12460:	movt	r0, #1
   12464:	movt	r1, #1
   12468:	movt	r3, #1
   1246c:	bl	116e4 <__assert_fail@plt>
   12470:	cmn	r0, #3
   12474:	bne	124c0 <__assert_fail@plt+0xddc>
   12478:	movw	r0, #49488	; 0xc150
   1247c:	movw	r2, #42338	; 0xa562
   12480:	mov	r1, #0
   12484:	movt	r0, #2
   12488:	movt	r2, #1
   1248c:	str	r1, [sp, #4]
   12490:	movw	r1, #42184	; 0xa4c8
   12494:	movt	r1, #1
   12498:	ldr	r3, [r0]
   1249c:	movw	r0, #49588	; 0xc1b4
   124a0:	str	r2, [sp]
   124a4:	movw	r2, #42324	; 0xa554
   124a8:	movt	r0, #2
   124ac:	movt	r2, #1
   124b0:	ldr	r0, [r0]
   124b4:	bl	17c24 <__assert_fail@plt+0x6540>
   124b8:	mov	r0, #0
   124bc:	bl	1151c <exit@plt>
   124c0:	cmn	r0, #2
   124c4:	bne	124d0 <__assert_fail@plt+0xdec>
   124c8:	mov	r0, #0
   124cc:	bl	117e0 <__assert_fail@plt+0xfc>
   124d0:	mov	r0, #1
   124d4:	bl	117e0 <__assert_fail@plt+0xfc>
   124d8:	movw	r1, #42249	; 0xa509
   124dc:	mov	r0, #0
   124e0:	mov	r2, #5
   124e4:	movt	r1, #1
   124e8:	bl	11408 <dcgettext@plt>
   124ec:	mov	r2, r0
   124f0:	mov	r0, #1
   124f4:	mov	r1, #0
   124f8:	bl	114b0 <error@plt>
   124fc:	movw	r1, #42350	; 0xa56e
   12500:	mov	r0, #0
   12504:	mov	r2, #5
   12508:	movt	r1, #1
   1250c:	bl	11408 <dcgettext@plt>
   12510:	mov	r2, r0
   12514:	mov	r0, #0
   12518:	mov	r1, #0
   1251c:	bl	114b0 <error@plt>
   12520:	mov	r0, #1
   12524:	bl	117e0 <__assert_fail@plt+0xfc>
   12528:	movw	r4, #42371	; 0xa583
   1252c:	cmp	r8, #0
   12530:	movt	r4, #1
   12534:	movne	r4, r8
   12538:	bl	11558 <__errno_location@plt>
   1253c:	ldr	r5, [r0]
   12540:	mov	r0, #0
   12544:	mov	r1, #3
   12548:	mov	r2, r4
   1254c:	bl	16694 <__assert_fail@plt+0x4fb0>
   12550:	movw	r2, #44035	; 0xac03
   12554:	mov	r3, r0
   12558:	mov	r0, #1
   1255c:	mov	r1, r5
   12560:	movt	r2, #1
   12564:	bl	114b0 <error@plt>
   12568:	movw	r0, #49600	; 0xc1c0
   1256c:	movt	r0, #2
   12570:	ldr	r0, [r0]
   12574:	b	16cd8 <__assert_fail@plt+0x55f4>
   12578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1257c:	add	fp, sp, #28
   12580:	sub	sp, sp, #148	; 0x94
   12584:	sub	sp, sp, #2048	; 0x800
   12588:	str	r0, [sp, #116]	; 0x74
   1258c:	ldrb	r0, [r3, #20]
   12590:	mov	r7, r3
   12594:	mov	r5, r1
   12598:	str	r2, [sp, #112]	; 0x70
   1259c:	cmp	r0, #0
   125a0:	beq	125b4 <__assert_fail@plt+0xed0>
   125a4:	ldrb	r0, [r7, #22]
   125a8:	ldr	r1, [r7, #4]
   125ac:	add	r6, r1, r0
   125b0:	b	125b8 <__assert_fail@plt+0xed4>
   125b4:	mov	r6, #0
   125b8:	ldr	r1, [sp, #116]	; 0x74
   125bc:	add	r2, sp, #120	; 0x78
   125c0:	mov	r0, #3
   125c4:	bl	11450 <__fxstat64@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	12600 <__assert_fail@plt+0xf1c>
   125d0:	bl	11558 <__errno_location@plt>
   125d4:	movw	r1, #42913	; 0xa7a1
   125d8:	ldr	r4, [r0]
   125dc:	mov	r0, #0
   125e0:	mov	r2, #5
   125e4:	mov	r6, #0
   125e8:	movt	r1, #1
   125ec:	bl	11408 <dcgettext@plt>
   125f0:	mov	r2, r0
   125f4:	mov	r0, #0
   125f8:	mov	r1, r4
   125fc:	b	12664 <__assert_fail@plt+0xf80>
   12600:	ldr	r0, [sp, #136]	; 0x88
   12604:	and	r1, r0, #61440	; 0xf000
   12608:	cmp	r1, #8192	; 0x2000
   1260c:	bne	12624 <__assert_fail@plt+0xf40>
   12610:	ldr	r0, [sp, #116]	; 0x74
   12614:	bl	116a8 <isatty@plt>
   12618:	cmp	r0, #0
   1261c:	bne	12640 <__assert_fail@plt+0xf5c>
   12620:	ldr	r0, [sp, #136]	; 0x88
   12624:	and	r0, r0, #61440	; 0xf000
   12628:	cmp	r0, #49152	; 0xc000
   1262c:	beq	12640 <__assert_fail@plt+0xf5c>
   12630:	cmp	r0, #32768	; 0x8000
   12634:	beq	12678 <__assert_fail@plt+0xf94>
   12638:	cmp	r0, #4096	; 0x1000
   1263c:	bne	12684 <__assert_fail@plt+0xfa0>
   12640:	movw	r1, #42930	; 0xa7b2
   12644:	mov	r6, #0
   12648:	movt	r1, #1
   1264c:	mov	r0, #0
   12650:	mov	r2, #5
   12654:	bl	11408 <dcgettext@plt>
   12658:	mov	r2, r0
   1265c:	mov	r0, #0
   12660:	mov	r1, #0
   12664:	mov	r3, r5
   12668:	bl	114b0 <error@plt>
   1266c:	and	r0, r6, #1
   12670:	sub	sp, fp, #28
   12674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12678:	ldr	r0, [sp, #172]	; 0xac
   1267c:	cmn	r0, #1
   12680:	ble	12770 <__assert_fail@plt+0x108c>
   12684:	ldr	r0, [r7, #4]
   12688:	mov	r1, #4
   1268c:	bl	17f40 <__assert_fail@plt+0x685c>
   12690:	str	r0, [sp, #108]	; 0x6c
   12694:	ldr	r0, [sp, #136]	; 0x88
   12698:	ldr	ip, [r7, #8]
   1269c:	ldr	lr, [r7, #12]
   126a0:	str	r5, [sp, #88]	; 0x58
   126a4:	str	r6, [sp, #52]	; 0x34
   126a8:	and	r0, r0, #61440	; 0xf000
   126ac:	and	r1, ip, lr
   126b0:	cmn	r1, #1
   126b4:	beq	12740 <__assert_fail@plt+0x105c>
   126b8:	mov	r4, #0
   126bc:	cmp	r0, #32768	; 0x8000
   126c0:	str	ip, [sp, #60]	; 0x3c
   126c4:	str	lr, [sp, #64]	; 0x40
   126c8:	bne	12768 <__assert_fail@plt+0x1084>
   126cc:	ldr	r1, [sp, #176]	; 0xb0
   126d0:	mov	r4, #0
   126d4:	ldr	r0, [sp, #168]	; 0xa8
   126d8:	ldr	r5, [sp, #172]	; 0xac
   126dc:	subs	r2, r1, #536870913	; 0x20000001
   126e0:	rscs	r2, r4, r1, asr #31
   126e4:	mov	r2, #0
   126e8:	movwcc	r2, #1
   126ec:	rsbs	r3, r1, #0
   126f0:	sbcs	r3, r4, r1, asr #31
   126f4:	mov	r3, #0
   126f8:	movwlt	r3, #1
   126fc:	ands	r2, r3, r2
   12700:	asrne	r2, r1, #31
   12704:	moveq	r1, #512	; 0x200
   12708:	subs	r3, r1, ip
   1270c:	sbcs	r3, r2, lr
   12710:	mov	r3, #0
   12714:	movwlt	r3, #1
   12718:	cmp	r3, #0
   1271c:	moveq	r1, ip
   12720:	moveq	r2, lr
   12724:	subs	r1, r0, r1
   12728:	sbcs	r1, r5, r2
   1272c:	movwlt	r4, #1
   12730:	cmp	r4, #0
   12734:	moveq	r5, r4
   12738:	movne	r4, r0
   1273c:	b	127c8 <__assert_fail@plt+0x10e4>
   12740:	cmp	r0, #32768	; 0x8000
   12744:	bne	12780 <__assert_fail@plt+0x109c>
   12748:	ldrb	r0, [r7, #21]
   1274c:	ldr	sl, [sp, #168]	; 0xa8
   12750:	ldr	r8, [sp, #172]	; 0xac
   12754:	mov	r4, #0
   12758:	cmp	r0, #0
   1275c:	beq	12858 <__assert_fail@plt+0x1174>
   12760:	str	r8, [sp, #64]	; 0x40
   12764:	str	sl, [sp, #60]	; 0x3c
   12768:	mov	r5, #0
   1276c:	b	127c8 <__assert_fail@plt+0x10e4>
   12770:	movw	r1, #42952	; 0xa7c8
   12774:	mov	r6, #0
   12778:	movt	r1, #1
   1277c:	b	1264c <__assert_fail@plt+0xf68>
   12780:	mov	r0, #2
   12784:	mov	r2, #0
   12788:	mov	r3, #0
   1278c:	mov	r4, #0
   12790:	str	r0, [sp]
   12794:	ldr	r0, [sp, #116]	; 0x74
   12798:	bl	11474 <lseek64@plt>
   1279c:	subs	r2, r0, #1
   127a0:	mov	r5, #0
   127a4:	sbcs	r2, r1, #0
   127a8:	mov	r2, #0
   127ac:	movwlt	r2, #1
   127b0:	cmp	r2, #0
   127b4:	mvn	r2, #0
   127b8:	movne	r1, r2
   127bc:	movne	r0, r2
   127c0:	str	r1, [sp, #64]	; 0x40
   127c4:	str	r0, [sp, #60]	; 0x3c
   127c8:	ldr	r2, [r7, #4]
   127cc:	str	r7, [sp, #56]	; 0x38
   127d0:	cmp	r2, #0
   127d4:	beq	129d0 <__assert_fail@plt+0x12ec>
   127d8:	movw	r8, #43648	; 0xaa80
   127dc:	ldr	r1, [sp, #108]	; 0x6c
   127e0:	mov	r7, #0
   127e4:	mov	sl, r2
   127e8:	str	r2, [sp, #104]	; 0x68
   127ec:	movt	r8, #1
   127f0:	mov	r6, r8
   127f4:	ldr	r9, [r6], #4
   127f8:	cmp	r9, #0
   127fc:	mvneq	r9, #1
   12800:	addeq	r6, r8, #4
   12804:	cmn	r9, #1
   12808:	bgt	12824 <__assert_fail@plt+0x1140>
   1280c:	rsb	r0, r9, #0
   12810:	cmp	sl, r0
   12814:	bls	12944 <__assert_fail@plt+0x1260>
   12818:	add	sl, r9, sl
   1281c:	sub	r7, r7, r9
   12820:	b	127f4 <__assert_fail@plt+0x1110>
   12824:	cmp	sl, r9
   12828:	bcc	12934 <__assert_fail@plt+0x1250>
   1282c:	lsl	r2, r9, #2
   12830:	mov	r0, r1
   12834:	str	r1, [sp, #100]	; 0x64
   12838:	mov	r1, r6
   1283c:	bl	113cc <memcpy@plt>
   12840:	ldr	r1, [sp, #100]	; 0x64
   12844:	ldr	r2, [sp, #104]	; 0x68
   12848:	sub	sl, sl, r9
   1284c:	add	r6, r6, r9, lsl #2
   12850:	add	r1, r1, r9, lsl #2
   12854:	b	127f4 <__assert_fail@plt+0x1110>
   12858:	ldr	r0, [sp, #176]	; 0xb0
   1285c:	mov	r4, #0
   12860:	subs	r1, r0, #536870913	; 0x20000001
   12864:	mov	r9, r0
   12868:	rscs	r1, r4, r0, asr #31
   1286c:	mov	r1, #0
   12870:	movwcc	r1, #1
   12874:	rsbs	r2, r0, #0
   12878:	sbcs	r2, r4, r0, asr #31
   1287c:	mov	r2, #0
   12880:	movwlt	r2, #1
   12884:	ands	r3, r2, r1
   12888:	mov	r1, r8
   1288c:	moveq	r9, #512	; 0x200
   12890:	asrne	r3, r0, #31
   12894:	mov	r0, sl
   12898:	mov	r2, r9
   1289c:	str	r3, [sp, #104]	; 0x68
   128a0:	bl	19ae8 <__assert_fail@plt+0x8404>
   128a4:	orrs	r0, sl, r8
   128a8:	beq	1291c <__assert_fail@plt+0x1238>
   128ac:	ldr	r6, [sp, #104]	; 0x68
   128b0:	subs	r1, sl, r9
   128b4:	mov	r4, #0
   128b8:	mov	r0, #0
   128bc:	sbcs	r1, r8, r6
   128c0:	movwlt	r4, #1
   128c4:	cmp	r4, #0
   128c8:	mov	r5, r4
   128cc:	movne	r5, r8
   128d0:	movne	r4, sl
   128d4:	orrs	r1, r2, r3
   128d8:	beq	1347c <__assert_fail@plt+0x1d98>
   128dc:	subs	ip, r9, r2
   128e0:	mvn	r1, sl
   128e4:	sbc	r2, r6, r3
   128e8:	mvn	r3, #-2147483648	; 0x80000000
   128ec:	subs	r6, ip, r1
   128f0:	sub	r3, r3, r8
   128f4:	sbcs	r6, r2, r3
   128f8:	movwlt	r0, #1
   128fc:	cmp	r0, #0
   12900:	movne	r1, ip
   12904:	movne	r3, r2
   12908:	adds	sl, r1, sl
   1290c:	adc	r8, r3, r8
   12910:	str	sl, [sp, #60]	; 0x3c
   12914:	str	r8, [sp, #64]	; 0x40
   12918:	b	127c8 <__assert_fail@plt+0x10e4>
   1291c:	mov	r0, #0
   12920:	mov	r5, #0
   12924:	str	r0, [sp, #60]	; 0x3c
   12928:	mov	r0, #0
   1292c:	str	r0, [sp, #64]	; 0x40
   12930:	b	127c8 <__assert_fail@plt+0x10e4>
   12934:	cmp	sl, #2
   12938:	addcs	r0, sl, sl, lsl #1
   1293c:	cmpcs	r0, r9
   12940:	bcs	133d0 <__assert_fail@plt+0x1cec>
   12944:	add	r7, r7, sl
   12948:	sub	r9, r7, #1
   1294c:	sub	r6, r2, r7
   12950:	sub	r8, r2, #1
   12954:	mov	sl, #0
   12958:	mov	r7, r9
   1295c:	cmp	r7, r9
   12960:	bls	129b0 <__assert_fail@plt+0x12cc>
   12964:	sub	r0, r6, sl
   12968:	subs	r2, r0, #1
   1296c:	mov	r0, #0
   12970:	sbc	r3, r0, #0
   12974:	ldr	r0, [sp, #112]	; 0x70
   12978:	bl	16af8 <__assert_fail@plt+0x5414>
   1297c:	ldr	r3, [sp, #108]	; 0x6c
   12980:	add	r0, sl, r0
   12984:	ldr	r1, [r3, r0, lsl #2]
   12988:	ldr	r2, [r3, sl, lsl #2]
   1298c:	str	r1, [r3, sl, lsl #2]
   12990:	str	r2, [r3, r0, lsl #2]
   12994:	ldr	r2, [sp, #104]	; 0x68
   12998:	add	sl, sl, #1
   1299c:	sub	r7, r7, r9
   129a0:	cmp	sl, r2
   129a4:	beq	129d0 <__assert_fail@plt+0x12ec>
   129a8:	cmp	r7, r9
   129ac:	bhi	12964 <__assert_fail@plt+0x1280>
   129b0:	ldr	r1, [sp, #108]	; 0x6c
   129b4:	add	r7, r8, r7
   129b8:	ldr	r0, [r1, sl, lsl #2]
   129bc:	str	r0, [r1, r6, lsl #2]
   129c0:	mvn	r0, #0
   129c4:	add	r6, r6, #1
   129c8:	str	r0, [r1, sl, lsl #2]
   129cc:	b	12998 <__assert_fail@plt+0x12b4>
   129d0:	ldr	r0, [sp, #112]	; 0x70
   129d4:	bl	16af0 <__assert_fail@plt+0x540c>
   129d8:	add	r7, sp, #56	; 0x38
   129dc:	ldr	r9, [sp, #52]	; 0x34
   129e0:	str	r0, [sp, #48]	; 0x30
   129e4:	mov	r0, #1
   129e8:	ldm	r7, {r2, r6, r7}
   129ec:	str	r0, [sp, #44]	; 0x2c
   129f0:	b	12a14 <__assert_fail@plt+0x1330>
   129f4:	mov	sl, r4
   129f8:	str	r5, [sp, #104]	; 0x68
   129fc:	ldr	r0, [r2, #4]
   12a00:	ldrb	r1, [r2, #22]
   12a04:	mov	r4, #0
   12a08:	mov	r5, #0
   12a0c:	cmn	r0, r1
   12a10:	bne	12a40 <__assert_fail@plt+0x135c>
   12a14:	orrs	r0, r4, r5
   12a18:	mov	r8, #0
   12a1c:	bne	129f4 <__assert_fail@plt+0x1310>
   12a20:	orrs	r0, r6, r7
   12a24:	mov	sl, r6
   12a28:	str	r7, [sp, #104]	; 0x68
   12a2c:	mov	r6, #0
   12a30:	mov	r7, #0
   12a34:	mov	r8, r9
   12a38:	bne	129fc <__assert_fail@plt+0x1318>
   12a3c:	b	13344 <__assert_fail@plt+0x1c60>
   12a40:	ldr	r5, [sp, #116]	; 0x74
   12a44:	mov	r1, #0
   12a48:	add	r2, sp, #60	; 0x3c
   12a4c:	stm	r2, {r6, r7, r8}
   12a50:	cmp	r1, r0
   12a54:	bcs	12aa8 <__assert_fail@plt+0x13c4>
   12a58:	ldr	r0, [sp, #108]	; 0x6c
   12a5c:	ldr	r4, [r0, r1, lsl #2]
   12a60:	add	r1, r1, #1
   12a64:	str	r1, [sp, #40]	; 0x28
   12a68:	bl	1154c <getpagesize@plt>
   12a6c:	cmp	r4, #1
   12a70:	str	r4, [sp, #72]	; 0x48
   12a74:	blt	12ac4 <__assert_fail@plt+0x13e0>
   12a78:	mov	r3, r4
   12a7c:	uxtb	r1, r4
   12a80:	ubfx	r2, r4, #4, #8
   12a84:	mov	r7, #65536	; 0x10000
   12a88:	bfc	r3, #12, #20
   12a8c:	eor	r1, r2, r1
   12a90:	orr	r3, r3, r3, lsl #12
   12a94:	ubfx	r3, r3, #8, #8
   12a98:	eor	r2, r2, r3
   12a9c:	orrs	r1, r1, r2
   12aa0:	movwne	r7, #61440	; 0xf000
   12aa4:	b	12ac8 <__assert_fail@plt+0x13e4>
   12aa8:	add	r1, r1, #1
   12aac:	mov	r0, #0
   12ab0:	mov	r7, #65536	; 0x10000
   12ab4:	str	r1, [sp, #40]	; 0x28
   12ab8:	str	r0, [sp, #72]	; 0x48
   12abc:	bl	1154c <getpagesize@plt>
   12ac0:	b	12ac8 <__assert_fail@plt+0x13e4>
   12ac4:	mov	r7, #65536	; 0x10000
   12ac8:	ldr	r3, [sp, #104]	; 0x68
   12acc:	subs	r1, sl, r7
   12ad0:	str	r7, [sp, #76]	; 0x4c
   12ad4:	sbcs	r1, r3, #0
   12ad8:	mov	r1, #0
   12adc:	movwlt	r1, #1
   12ae0:	rsbs	r2, sl, #0
   12ae4:	rscs	r2, r3, #0
   12ae8:	mov	r2, #0
   12aec:	movwlt	r2, #1
   12af0:	and	r4, r2, r1
   12af4:	movw	r2, #43691	; 0xaaab
   12af8:	orr	r1, r7, #2
   12afc:	movt	r2, #43690	; 0xaaaa
   12b00:	umull	r1, r2, r1, r2
   12b04:	lsr	r1, r2, #1
   12b08:	add	r1, r1, r1, lsl #1
   12b0c:	str	r1, [sp, #112]	; 0x70
   12b10:	bl	17de0 <__assert_fail@plt+0x66fc>
   12b14:	mov	r7, r0
   12b18:	cmp	r4, #0
   12b1c:	str	r4, [sp, #92]	; 0x5c
   12b20:	bne	12b50 <__assert_fail@plt+0x146c>
   12b24:	mov	r0, r5
   12b28:	mov	r1, #3
   12b2c:	bl	13d94 <__assert_fail@plt+0x26b0>
   12b30:	cmp	r0, #1
   12b34:	blt	12b50 <__assert_fail@plt+0x146c>
   12b38:	orr	r2, r0, #65536	; 0x10000
   12b3c:	cmp	r2, r0
   12b40:	beq	12b50 <__assert_fail@plt+0x146c>
   12b44:	mov	r0, r5
   12b48:	mov	r1, #4
   12b4c:	bl	13d94 <__assert_fail@plt+0x26b0>
   12b50:	ldr	r0, [sp, #136]	; 0x88
   12b54:	ldr	r4, [sp, #112]	; 0x70
   12b58:	and	r0, r0, #61440	; 0xf000
   12b5c:	cmp	r0, #8192	; 0x2000
   12b60:	bne	12b94 <__assert_fail@plt+0x14b0>
   12b64:	movw	r1, #27905	; 0x6d01
   12b68:	mov	r0, #1
   12b6c:	add	lr, sp, #768	; 0x300
   12b70:	add	r2, sp, #880	; 0x370
   12b74:	str	r0, [sp, #884]	; 0x374
   12b78:	mov	r0, #6
   12b7c:	movt	r1, #16392	; 0x4008
   12b80:	strh	r0, [lr, #112]	; 0x70
   12b84:	mov	r0, r5
   12b88:	bl	11468 <ioctl@plt>
   12b8c:	cmp	r0, #0
   12b90:	beq	12bc0 <__assert_fail@plt+0x14dc>
   12b94:	mov	r0, #0
   12b98:	mov	r2, #0
   12b9c:	mov	r3, #0
   12ba0:	str	r0, [sp]
   12ba4:	mov	r0, r5
   12ba8:	bl	11474 <lseek64@plt>
   12bac:	subs	r2, r0, #1
   12bb0:	sbcs	r2, r1, #0
   12bb4:	bge	13488 <__assert_fail@plt+0x1da4>
   12bb8:	orrs	r0, r0, r1
   12bbc:	bne	13498 <__assert_fail@plt+0x1db4>
   12bc0:	ldr	r6, [sp, #72]	; 0x48
   12bc4:	cmp	r6, #0
   12bc8:	bmi	13258 <__assert_fail@plt+0x1b74>
   12bcc:	mov	r0, r6
   12bd0:	lsr	r9, r6, #4
   12bd4:	strb	r6, [r7, #2]
   12bd8:	mov	r1, #3
   12bdc:	bfc	r0, #12, #20
   12be0:	strb	r9, [r7]
   12be4:	orr	r0, r0, r0, lsl #12
   12be8:	lsr	r0, r0, #8
   12bec:	strb	r0, [r7, #1]
   12bf0:	subs	r0, sl, r4
   12bf4:	ldr	r0, [sp, #104]	; 0x68
   12bf8:	sbcs	r0, r0, #0
   12bfc:	movcc	r4, sl
   12c00:	cmp	r4, #6
   12c04:	bcc	12c30 <__assert_fail@plt+0x154c>
   12c08:	lsr	r6, r4, #1
   12c0c:	mov	r5, #3
   12c10:	add	r0, r7, r5
   12c14:	mov	r1, r7
   12c18:	mov	r2, r5
   12c1c:	bl	113cc <memcpy@plt>
   12c20:	lsl	r1, r5, #1
   12c24:	cmp	r6, r5, lsl #1
   12c28:	mov	r5, r1
   12c2c:	bcs	12c10 <__assert_fail@plt+0x152c>
   12c30:	cmp	r4, r1
   12c34:	bls	12c48 <__assert_fail@plt+0x1564>
   12c38:	add	r0, r7, r1
   12c3c:	sub	r2, r4, r1
   12c40:	mov	r1, r7
   12c44:	bl	113cc <memcpy@plt>
   12c48:	ldr	r6, [sp, #72]	; 0x48
   12c4c:	tst	r6, #4096	; 0x1000
   12c50:	beq	12c6c <__assert_fail@plt+0x1588>
   12c54:	cmp	r4, #0
   12c58:	mvnne	r0, #127	; 0x7f
   12c5c:	eorne	r9, r9, r0
   12c60:	strbne	r9, [r7]
   12c64:	cmpne	r4, #512	; 0x200
   12c68:	bhi	1327c <__assert_fail@plt+0x1b98>
   12c6c:	ldrb	r0, [r7, #1]
   12c70:	movw	r3, #43172	; 0xa8a4
   12c74:	uxtb	r2, r9
   12c78:	ldrb	r1, [r7, #2]
   12c7c:	movt	r3, #1
   12c80:	str	r2, [sp]
   12c84:	mov	r2, #7
   12c88:	stmib	sp, {r0, r1}
   12c8c:	sub	r0, fp, #40	; 0x28
   12c90:	mov	r1, #1
   12c94:	bl	11564 <__sprintf_chk@plt>
   12c98:	cmp	r8, #0
   12c9c:	beq	12ce8 <__assert_fail@plt+0x1604>
   12ca0:	movw	r1, #43018	; 0xa80a
   12ca4:	mov	r0, #0
   12ca8:	mov	r2, #5
   12cac:	movt	r1, #1
   12cb0:	bl	11408 <dcgettext@plt>
   12cb4:	mov	r2, r0
   12cb8:	ldr	r0, [sp, #40]	; 0x28
   12cbc:	ldr	r3, [sp, #88]	; 0x58
   12cc0:	mov	r1, #0
   12cc4:	stm	sp, {r0, r8}
   12cc8:	sub	r0, fp, #40	; 0x28
   12ccc:	str	r0, [sp, #8]
   12cd0:	mov	r0, #0
   12cd4:	bl	114b0 <error@plt>
   12cd8:	mov	r0, #0
   12cdc:	bl	113f0 <time@plt>
   12ce0:	add	r0, r0, #5
   12ce4:	str	r0, [sp, #28]
   12ce8:	movw	r0, #41895	; 0xa3a7
   12cec:	ldr	r1, [sp, #104]	; 0x68
   12cf0:	str	r7, [sp, #112]	; 0x70
   12cf4:	mov	r9, #0
   12cf8:	mov	r7, #0
   12cfc:	mov	r8, #0
   12d00:	mov	r2, sl
   12d04:	movt	r0, #1
   12d08:	str	r0, [sp, #32]
   12d0c:	mov	r0, #0
   12d10:	str	r0, [sp, #36]	; 0x24
   12d14:	str	r1, [sp, #96]	; 0x60
   12d18:	ldr	r5, [sp, #116]	; 0x74
   12d1c:	mvn	r1, #0
   12d20:	mov	r0, r2
   12d24:	ldr	r4, [sp, #76]	; 0x4c
   12d28:	str	r2, [sp, #100]	; 0x64
   12d2c:	subs	r0, r1, r2
   12d30:	ldr	r0, [sp, #96]	; 0x60
   12d34:	sbcs	r0, r1, r0
   12d38:	bge	12d7c <__assert_fail@plt+0x1698>
   12d3c:	ldr	r0, [sp, #100]	; 0x64
   12d40:	ldr	r1, [sp, #96]	; 0x60
   12d44:	ldr	r4, [sp, #76]	; 0x4c
   12d48:	subs	r0, r0, r7
   12d4c:	sbc	r1, r1, r8
   12d50:	subs	r2, r0, r4
   12d54:	sbcs	r1, r1, #0
   12d58:	bge	12d7c <__assert_fail@plt+0x1698>
   12d5c:	ldr	r1, [sp, #100]	; 0x64
   12d60:	subs	r1, r1, r7
   12d64:	ldr	r1, [sp, #96]	; 0x60
   12d68:	sbcs	r1, r1, r8
   12d6c:	blt	132a0 <__assert_fail@plt+0x1bbc>
   12d70:	cmp	r0, #0
   12d74:	mov	r4, r0
   12d78:	beq	132a0 <__assert_fail@plt+0x1bbc>
   12d7c:	cmn	r6, #1
   12d80:	bgt	12d94 <__assert_fail@plt+0x16b0>
   12d84:	ldr	r0, [sp, #48]	; 0x30
   12d88:	ldr	r1, [sp, #112]	; 0x70
   12d8c:	mov	r2, r4
   12d90:	bl	16e90 <__assert_fail@plt+0x57ac>
   12d94:	str	sl, [sp, #80]	; 0x50
   12d98:	mov	sl, #0
   12d9c:	cmp	r4, #0
   12da0:	beq	12f9c <__assert_fail@plt+0x18b8>
   12da4:	ldr	r0, [sp, #100]	; 0x64
   12da8:	mvn	r1, #0
   12dac:	subs	r0, r1, r0
   12db0:	ldr	r0, [sp, #96]	; 0x60
   12db4:	sbcs	r0, r1, r0
   12db8:	mov	r0, #0
   12dbc:	movwge	r0, #1
   12dc0:	str	r0, [sp, #84]	; 0x54
   12dc4:	b	12de0 <__assert_fail@plt+0x16fc>
   12dc8:	sub	r6, r5, sl
   12dcc:	ldr	r5, [sp, #116]	; 0x74
   12dd0:	mov	r9, #1
   12dd4:	add	sl, r6, sl
   12dd8:	cmp	r4, sl
   12ddc:	bls	12f98 <__assert_fail@plt+0x18b4>
   12de0:	ldr	r0, [sp, #112]	; 0x70
   12de4:	sub	r2, r4, sl
   12de8:	add	r1, r0, sl
   12dec:	mov	r0, r5
   12df0:	bl	115ac <write@plt>
   12df4:	mov	r6, r0
   12df8:	cmp	r0, #1
   12dfc:	bge	12dd4 <__assert_fail@plt+0x16f0>
   12e00:	ldr	r0, [sp, #100]	; 0x64
   12e04:	mvn	r1, #0
   12e08:	subs	r0, r1, r0
   12e0c:	ldr	r0, [sp, #96]	; 0x60
   12e10:	sbcs	r0, r1, r0
   12e14:	bge	12e30 <__assert_fail@plt+0x174c>
   12e18:	bl	11558 <__errno_location@plt>
   12e1c:	ldr	r5, [r0]
   12e20:	mov	r6, r0
   12e24:	cmp	r5, #22
   12e28:	beq	12e54 <__assert_fail@plt+0x1770>
   12e2c:	b	12ea4 <__assert_fail@plt+0x17c0>
   12e30:	cmp	r6, #0
   12e34:	beq	12f3c <__assert_fail@plt+0x1858>
   12e38:	bl	11558 <__errno_location@plt>
   12e3c:	ldr	r5, [r0]
   12e40:	mov	r6, r0
   12e44:	cmp	r5, #28
   12e48:	beq	12f3c <__assert_fail@plt+0x1858>
   12e4c:	cmp	r5, #22
   12e50:	bne	12ea4 <__assert_fail@plt+0x17c0>
   12e54:	ldr	r0, [sp, #92]	; 0x5c
   12e58:	eor	r0, r0, #1
   12e5c:	tst	r0, #1
   12e60:	beq	12ea4 <__assert_fail@plt+0x17c0>
   12e64:	ldr	r5, [sp, #116]	; 0x74
   12e68:	mov	r1, #3
   12e6c:	mov	r0, r5
   12e70:	bl	13d94 <__assert_fail@plt+0x26b0>
   12e74:	mov	r1, #1
   12e78:	mov	r6, #0
   12e7c:	cmp	r0, #1
   12e80:	str	r1, [sp, #92]	; 0x5c
   12e84:	blt	12dd4 <__assert_fail@plt+0x16f0>
   12e88:	bic	r2, r0, #65536	; 0x10000
   12e8c:	cmp	r2, r0
   12e90:	beq	12dd4 <__assert_fail@plt+0x16f0>
   12e94:	mov	r0, r5
   12e98:	mov	r1, #4
   12e9c:	bl	13d94 <__assert_fail@plt+0x26b0>
   12ea0:	b	12dd4 <__assert_fail@plt+0x16f0>
   12ea4:	movw	r1, #43043	; 0xa823
   12ea8:	mov	r0, #0
   12eac:	mov	r2, #5
   12eb0:	movt	r1, #1
   12eb4:	bl	11408 <dcgettext@plt>
   12eb8:	mov	r9, r0
   12ebc:	adds	r0, r7, sl
   12ec0:	add	r2, sp, #880	; 0x370
   12ec4:	adc	r1, r8, #0
   12ec8:	bl	14c90 <__assert_fail@plt+0x35ac>
   12ecc:	ldr	r3, [sp, #88]	; 0x58
   12ed0:	str	r0, [sp]
   12ed4:	mov	r0, #0
   12ed8:	mov	r1, r5
   12edc:	mov	r2, r9
   12ee0:	bl	114b0 <error@plt>
   12ee4:	ldr	r1, [sp, #84]	; 0x54
   12ee8:	subs	r0, r5, #5
   12eec:	movwne	r0, #1
   12ef0:	orrs	r0, r0, r1
   12ef4:	bne	13460 <__assert_fail@plt+0x1d7c>
   12ef8:	movw	r0, #511	; 0x1ff
   12efc:	orr	r0, sl, r0
   12f00:	cmp	r0, r4
   12f04:	bcs	13460 <__assert_fail@plt+0x1d7c>
   12f08:	add	r5, r0, #1
   12f0c:	ldr	r0, [sp, #116]	; 0x74
   12f10:	mov	r1, #0
   12f14:	adds	r2, r7, r5
   12f18:	str	r1, [sp]
   12f1c:	adc	r3, r8, #0
   12f20:	bl	11474 <lseek64@plt>
   12f24:	mvn	r2, #0
   12f28:	eor	r1, r1, r2
   12f2c:	eor	r0, r0, r2
   12f30:	orrs	r0, r0, r1
   12f34:	bne	12dc8 <__assert_fail@plt+0x16e4>
   12f38:	b	13408 <__assert_fail@plt+0x1d24>
   12f3c:	mvn	r0, #-2147483648	; 0x80000000
   12f40:	mvn	r1, r7
   12f44:	ldr	r5, [sp, #116]	; 0x74
   12f48:	eor	r0, r8, r0
   12f4c:	subs	r1, r1, sl
   12f50:	sbcs	r0, r0, #0
   12f54:	mov	r0, #0
   12f58:	movwcc	r0, #1
   12f5c:	adds	r1, r7, sl
   12f60:	adc	r2, r8, #0
   12f64:	cmp	r0, #0
   12f68:	ldr	r0, [sp, #96]	; 0x60
   12f6c:	moveq	r0, r2
   12f70:	str	r0, [sp, #96]	; 0x60
   12f74:	ldr	r0, [sp, #100]	; 0x64
   12f78:	moveq	r0, r1
   12f7c:	str	r0, [sp, #100]	; 0x64
   12f80:	ldr	r0, [sp, #104]	; 0x68
   12f84:	moveq	r0, r2
   12f88:	str	r0, [sp, #104]	; 0x68
   12f8c:	ldr	r0, [sp, #80]	; 0x50
   12f90:	moveq	r0, r1
   12f94:	str	r0, [sp, #80]	; 0x50
   12f98:	ldr	r6, [sp, #72]	; 0x48
   12f9c:	mvn	r0, #-2147483648	; 0x80000000
   12fa0:	mvn	r1, r7
   12fa4:	eor	r0, r8, r0
   12fa8:	subs	r1, r1, sl
   12fac:	sbcs	r0, r0, #0
   12fb0:	bcc	13438 <__assert_fail@plt+0x1d54>
   12fb4:	ldr	r0, [sp, #68]	; 0x44
   12fb8:	adds	r7, r7, sl
   12fbc:	ldr	sl, [sp, #80]	; 0x50
   12fc0:	ldr	r2, [sp, #100]	; 0x64
   12fc4:	adc	r8, r8, #0
   12fc8:	cmp	r0, #0
   12fcc:	beq	12d1c <__assert_fail@plt+0x1638>
   12fd0:	ldr	r0, [sp, #100]	; 0x64
   12fd4:	ldr	r1, [sp, #96]	; 0x60
   12fd8:	eor	r0, r7, r0
   12fdc:	eor	r1, r8, r1
   12fe0:	orrs	r5, r0, r1
   12fe4:	bne	12ff8 <__assert_fail@plt+0x1914>
   12fe8:	ldr	r0, [sp, #32]
   12fec:	ldrb	r0, [r0]
   12ff0:	cmp	r0, #0
   12ff4:	bne	13014 <__assert_fail@plt+0x1930>
   12ff8:	mov	r0, #0
   12ffc:	bl	113f0 <time@plt>
   13000:	ldr	r1, [sp, #28]
   13004:	ldr	r2, [sp, #100]	; 0x64
   13008:	str	r0, [sp, #36]	; 0x24
   1300c:	cmp	r1, r0
   13010:	bgt	12d18 <__assert_fail@plt+0x1634>
   13014:	mov	r0, #1
   13018:	mov	r1, #0
   1301c:	add	r2, sp, #880	; 0x370
   13020:	movw	r3, #434	; 0x1b2
   13024:	str	r7, [sp, #84]	; 0x54
   13028:	str	r8, [sp, #24]
   1302c:	str	r0, [sp]
   13030:	str	r0, [sp, #8]
   13034:	str	r1, [sp, #4]
   13038:	str	r1, [sp, #12]
   1303c:	mov	r0, r7
   13040:	mov	r1, r8
   13044:	bl	13fd8 <__assert_fail@plt+0x28f4>
   13048:	mov	r4, r0
   1304c:	cmp	r5, #0
   13050:	beq	13068 <__assert_fail@plt+0x1984>
   13054:	ldr	r0, [sp, #32]
   13058:	mov	r1, r4
   1305c:	bl	11390 <strcmp@plt>
   13060:	cmp	r0, #0
   13064:	beq	13118 <__assert_fail@plt+0x1a34>
   13068:	ldr	r2, [sp, #100]	; 0x64
   1306c:	ldr	r3, [sp, #96]	; 0x60
   13070:	mvn	r1, #0
   13074:	subs	r0, r1, r2
   13078:	sbcs	r0, r1, r3
   1307c:	bge	130cc <__assert_fail@plt+0x19e8>
   13080:	orrs	r0, r2, r3
   13084:	beq	13120 <__assert_fail@plt+0x1a3c>
   13088:	ldr	r6, [sp, #84]	; 0x54
   1308c:	movw	r0, #36700	; 0x8f5c
   13090:	ldr	r7, [sp, #24]
   13094:	movt	r0, #62914	; 0xf5c2
   13098:	subs	r0, r0, r6
   1309c:	movw	r0, #23592	; 0x5c28
   130a0:	movt	r0, #655	; 0x28f
   130a4:	sbcs	r0, r0, r7
   130a8:	bcc	13130 <__assert_fail@plt+0x1a4c>
   130ac:	mov	r2, #100	; 0x64
   130b0:	ldr	r8, [sp, #100]	; 0x64
   130b4:	umull	r0, r1, r6, r2
   130b8:	ldr	r6, [sp, #96]	; 0x60
   130bc:	mla	r1, r7, r2, r1
   130c0:	mov	r2, r8
   130c4:	mov	r3, r6
   130c8:	b	13160 <__assert_fail@plt+0x1a7c>
   130cc:	movw	r1, #43110	; 0xa866
   130d0:	mov	r0, #0
   130d4:	mov	r2, #5
   130d8:	movt	r1, #1
   130dc:	bl	11408 <dcgettext@plt>
   130e0:	mov	r2, r0
   130e4:	ldr	r0, [sp, #40]	; 0x28
   130e8:	ldr	r5, [sp, #88]	; 0x58
   130ec:	mov	r1, #0
   130f0:	str	r4, [sp, #12]
   130f4:	str	r0, [sp]
   130f8:	ldr	r0, [sp, #68]	; 0x44
   130fc:	mov	r3, r5
   13100:	str	r0, [sp, #4]
   13104:	sub	r0, fp, #40	; 0x28
   13108:	str	r0, [sp, #8]
   1310c:	mov	r0, #0
   13110:	bl	114b0 <error@plt>
   13114:	b	131ec <__assert_fail@plt+0x1b08>
   13118:	ldr	r7, [sp, #84]	; 0x54
   1311c:	b	13248 <__assert_fail@plt+0x1b64>
   13120:	ldr	r8, [sp, #100]	; 0x64
   13124:	ldr	r6, [sp, #96]	; 0x60
   13128:	mov	sl, #100	; 0x64
   1312c:	b	13168 <__assert_fail@plt+0x1a84>
   13130:	ldr	r8, [sp, #100]	; 0x64
   13134:	ldr	sl, [sp, #96]	; 0x60
   13138:	mov	r2, #100	; 0x64
   1313c:	mov	r3, #0
   13140:	mov	r0, r8
   13144:	mov	r1, sl
   13148:	bl	19bbc <__assert_fail@plt+0x84d8>
   1314c:	mov	r2, r0
   13150:	mov	r3, r1
   13154:	mov	r0, r6
   13158:	mov	r6, sl
   1315c:	mov	r1, r7
   13160:	bl	19bbc <__assert_fail@plt+0x84d8>
   13164:	mov	sl, r0
   13168:	mov	r0, #1
   1316c:	mov	r1, #0
   13170:	add	r2, sp, #228	; 0xe4
   13174:	mov	r3, #432	; 0x1b0
   13178:	str	r0, [sp]
   1317c:	str	r0, [sp, #8]
   13180:	str	r1, [sp, #4]
   13184:	str	r1, [sp, #12]
   13188:	mov	r0, r8
   1318c:	mov	r1, r6
   13190:	bl	13fd8 <__assert_fail@plt+0x28f4>
   13194:	movw	r1, #43137	; 0xa881
   13198:	mov	r6, r0
   1319c:	mov	r0, #0
   131a0:	mov	r2, #5
   131a4:	movt	r1, #1
   131a8:	bl	11408 <dcgettext@plt>
   131ac:	mov	r2, r0
   131b0:	ldr	r0, [sp, #40]	; 0x28
   131b4:	cmp	r5, #0
   131b8:	ldr	r5, [sp, #88]	; 0x58
   131bc:	add	r1, sp, #8
   131c0:	moveq	r4, r6
   131c4:	str	r0, [sp]
   131c8:	ldr	r0, [sp, #68]	; 0x44
   131cc:	mov	r3, r5
   131d0:	str	r0, [sp, #4]
   131d4:	sub	r0, fp, #40	; 0x28
   131d8:	stm	r1, {r0, r4, r6, sl}
   131dc:	mov	r0, #0
   131e0:	mov	r1, #0
   131e4:	bl	114b0 <error@plt>
   131e8:	ldr	sl, [sp, #80]	; 0x50
   131ec:	sub	r6, fp, #692	; 0x2b4
   131f0:	mov	r1, r4
   131f4:	mov	r2, #652	; 0x28c
   131f8:	mov	r0, r6
   131fc:	bl	1148c <__strcpy_chk@plt>
   13200:	ldr	r0, [sp, #116]	; 0x74
   13204:	mov	r1, r5
   13208:	bl	134cc <__assert_fail@plt+0x1de8>
   1320c:	ldr	r1, [sp, #36]	; 0x24
   13210:	cmp	r0, #0
   13214:	add	r1, r1, #5
   13218:	str	r1, [sp, #28]
   1321c:	beq	13240 <__assert_fail@plt+0x1b5c>
   13220:	bl	11558 <__errno_location@plt>
   13224:	ldr	r0, [r0]
   13228:	ldr	r7, [sp, #84]	; 0x54
   1322c:	mov	r9, #1
   13230:	str	r6, [sp, #32]
   13234:	cmp	r0, #5
   13238:	beq	13248 <__assert_fail@plt+0x1b64>
   1323c:	b	13460 <__assert_fail@plt+0x1d7c>
   13240:	ldr	r7, [sp, #84]	; 0x54
   13244:	str	r6, [sp, #32]
   13248:	ldr	r6, [sp, #72]	; 0x48
   1324c:	ldr	r8, [sp, #24]
   13250:	ldr	r2, [sp, #100]	; 0x64
   13254:	b	12d18 <__assert_fail@plt+0x1634>
   13258:	movw	r0, #28516	; 0x6f64
   1325c:	movt	r0, #109	; 0x6d
   13260:	str	r0, [fp, #-37]	; 0xffffffdb
   13264:	movw	r0, #24946	; 0x6172
   13268:	movt	r0, #25710	; 0x646e
   1326c:	str	r0, [fp, #-40]	; 0xffffffd8
   13270:	cmp	r8, #0
   13274:	bne	12ca0 <__assert_fail@plt+0x15bc>
   13278:	b	12ce8 <__assert_fail@plt+0x1604>
   1327c:	mov	r0, #512	; 0x200
   13280:	ldrb	r1, [r7, r0]
   13284:	eor	r1, r1, #128	; 0x80
   13288:	strb	r1, [r7, r0]
   1328c:	add	r0, r0, #512	; 0x200
   13290:	cmp	r0, r4
   13294:	bcc	13280 <__assert_fail@plt+0x1b9c>
   13298:	ldrb	r9, [r7]
   1329c:	b	12c6c <__assert_fail@plt+0x1588>
   132a0:	ldr	r1, [sp, #88]	; 0x58
   132a4:	mov	r0, r5
   132a8:	bl	134cc <__assert_fail@plt+0x1de8>
   132ac:	cmp	r0, #0
   132b0:	beq	132ec <__assert_fail@plt+0x1c08>
   132b4:	bl	11558 <__errno_location@plt>
   132b8:	ldr	r0, [r0]
   132bc:	ldr	r7, [sp, #112]	; 0x70
   132c0:	ldr	r8, [sp, #68]	; 0x44
   132c4:	cmp	r0, #5
   132c8:	bne	13464 <__assert_fail@plt+0x1d80>
   132cc:	mov	r0, r7
   132d0:	bl	13fb0 <__assert_fail@plt+0x28cc>
   132d4:	ldr	r2, [sp, #56]	; 0x38
   132d8:	ldr	r9, [sp, #52]	; 0x34
   132dc:	ldr	r6, [sp, #60]	; 0x3c
   132e0:	mov	r0, #0
   132e4:	str	r0, [sp, #44]	; 0x2c
   132e8:	b	13318 <__assert_fail@plt+0x1c34>
   132ec:	ldr	r0, [sp, #112]	; 0x70
   132f0:	bl	13fb0 <__assert_fail@plt+0x28cc>
   132f4:	ldr	r1, [sp, #44]	; 0x2c
   132f8:	mov	r0, #1
   132fc:	ldr	r2, [sp, #56]	; 0x38
   13300:	ldr	r6, [sp, #60]	; 0x3c
   13304:	ldr	r8, [sp, #68]	; 0x44
   13308:	bic	r0, r0, r9
   1330c:	ldr	r9, [sp, #52]	; 0x34
   13310:	and	r1, r1, r0
   13314:	str	r1, [sp, #44]	; 0x2c
   13318:	ldrb	r1, [r2, #22]
   1331c:	ldr	r0, [r2, #4]
   13320:	ldr	r3, [sp, #40]	; 0x28
   13324:	ldr	r7, [sp, #64]	; 0x40
   13328:	mov	r4, #0
   1332c:	add	r1, r0, r1
   13330:	cmp	r3, r1
   13334:	mov	r1, r3
   13338:	bcc	12a50 <__assert_fail@plt+0x136c>
   1333c:	mov	r5, #0
   13340:	b	12a14 <__assert_fail@plt+0x1330>
   13344:	ldr	r0, [r2, #16]
   13348:	cmp	r0, #0
   1334c:	beq	13430 <__assert_fail@plt+0x1d4c>
   13350:	ldr	r0, [sp, #116]	; 0x74
   13354:	mov	r2, #0
   13358:	mov	r3, #0
   1335c:	bl	113fc <ftruncate64@plt>
   13360:	ldr	r6, [sp, #44]	; 0x2c
   13364:	cmp	r0, #0
   13368:	beq	13470 <__assert_fail@plt+0x1d8c>
   1336c:	ldr	r0, [sp, #136]	; 0x88
   13370:	and	r0, r0, #61440	; 0xf000
   13374:	cmp	r0, #32768	; 0x8000
   13378:	bne	13470 <__assert_fail@plt+0x1d8c>
   1337c:	bl	11558 <__errno_location@plt>
   13380:	movw	r1, #42979	; 0xa7e3
   13384:	ldr	r4, [r0]
   13388:	mov	r0, #0
   1338c:	mov	r2, #5
   13390:	mov	r6, #0
   13394:	movt	r1, #1
   13398:	bl	11408 <dcgettext@plt>
   1339c:	ldr	r3, [sp, #88]	; 0x58
   133a0:	mov	r2, r0
   133a4:	mov	r0, #0
   133a8:	mov	r1, r4
   133ac:	bl	114b0 <error@plt>
   133b0:	b	13470 <__assert_fail@plt+0x1d8c>
   133b4:	ldr	r0, [r6]
   133b8:	sub	sl, sl, #1
   133bc:	str	r0, [r1], #4
   133c0:	sub	r9, r9, #1
   133c4:	add	r6, r6, #4
   133c8:	cmp	sl, #0
   133cc:	beq	12948 <__assert_fail@plt+0x1264>
   133d0:	cmp	r9, sl
   133d4:	beq	133b4 <__assert_fail@plt+0x1cd0>
   133d8:	asr	r0, r9, #31
   133dc:	subs	r2, r9, #1
   133e0:	mov	r8, r1
   133e4:	sbc	r3, r0, #0
   133e8:	ldr	r0, [sp, #112]	; 0x70
   133ec:	bl	16af8 <__assert_fail@plt+0x5414>
   133f0:	ldr	r2, [sp, #104]	; 0x68
   133f4:	subs	r0, r0, sl
   133f8:	sbcs	r0, r1, #0
   133fc:	mov	r1, r8
   13400:	bcc	133b4 <__assert_fail@plt+0x1cd0>
   13404:	b	133c0 <__assert_fail@plt+0x1cdc>
   13408:	movw	r1, #43074	; 0xa842
   1340c:	ldr	r4, [r6]
   13410:	mov	r0, #0
   13414:	mov	r2, #5
   13418:	movt	r1, #1
   1341c:	bl	11408 <dcgettext@plt>
   13420:	mov	r2, r0
   13424:	mov	r0, #0
   13428:	mov	r1, r4
   1342c:	b	13458 <__assert_fail@plt+0x1d74>
   13430:	ldr	r6, [sp, #44]	; 0x2c
   13434:	b	13470 <__assert_fail@plt+0x1d8c>
   13438:	movw	r1, #43091	; 0xa853
   1343c:	mov	r0, #0
   13440:	mov	r2, #5
   13444:	movt	r1, #1
   13448:	bl	11408 <dcgettext@plt>
   1344c:	mov	r2, r0
   13450:	mov	r0, #0
   13454:	mov	r1, #0
   13458:	ldr	r3, [sp, #88]	; 0x58
   1345c:	bl	114b0 <error@plt>
   13460:	ldr	r7, [sp, #112]	; 0x70
   13464:	mov	r0, r7
   13468:	bl	13fb0 <__assert_fail@plt+0x28cc>
   1346c:	mov	r6, #0
   13470:	ldr	r0, [sp, #108]	; 0x6c
   13474:	bl	13fb0 <__assert_fail@plt+0x28cc>
   13478:	b	1266c <__assert_fail@plt+0xf88>
   1347c:	str	r8, [sp, #64]	; 0x40
   13480:	str	sl, [sp, #60]	; 0x3c
   13484:	b	127c8 <__assert_fail@plt+0x10e4>
   13488:	bl	11558 <__errno_location@plt>
   1348c:	mov	r4, #22
   13490:	str	r4, [r0]
   13494:	b	134a0 <__assert_fail@plt+0x1dbc>
   13498:	bl	11558 <__errno_location@plt>
   1349c:	ldr	r4, [r0]
   134a0:	movw	r1, #43000	; 0xa7f8
   134a4:	mov	r0, #0
   134a8:	mov	r2, #5
   134ac:	movt	r1, #1
   134b0:	bl	11408 <dcgettext@plt>
   134b4:	ldr	r3, [sp, #88]	; 0x58
   134b8:	mov	r2, r0
   134bc:	mov	r0, #0
   134c0:	mov	r1, r4
   134c4:	bl	114b0 <error@plt>
   134c8:	b	13464 <__assert_fail@plt+0x1d80>
   134cc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   134d0:	add	fp, sp, #24
   134d4:	mov	r8, r1
   134d8:	mov	r4, r0
   134dc:	bl	116c0 <fdatasync@plt>
   134e0:	mov	r6, #0
   134e4:	cmp	r0, #0
   134e8:	beq	13540 <__assert_fail@plt+0x1e5c>
   134ec:	bl	11558 <__errno_location@plt>
   134f0:	ldr	r7, [r0]
   134f4:	mov	r5, r0
   134f8:	cmp	r7, #22
   134fc:	bhi	13548 <__assert_fail@plt+0x1e64>
   13500:	movw	r9, #512	; 0x200
   13504:	mov	r0, #1
   13508:	movt	r9, #96	; 0x60
   1350c:	tst	r9, r0, lsl r7
   13510:	beq	13548 <__assert_fail@plt+0x1e64>
   13514:	mov	r0, r4
   13518:	bl	11384 <fsync@plt>
   1351c:	cmp	r0, #0
   13520:	beq	13540 <__assert_fail@plt+0x1e5c>
   13524:	ldr	r7, [r5]
   13528:	cmp	r7, #22
   1352c:	bhi	13554 <__assert_fail@plt+0x1e70>
   13530:	mov	r0, #1
   13534:	tst	r9, r0, lsl r7
   13538:	beq	13554 <__assert_fail@plt+0x1e70>
   1353c:	bl	11690 <sync@plt>
   13540:	mov	r0, r6
   13544:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13548:	movw	r1, #43185	; 0xa8b1
   1354c:	movt	r1, #1
   13550:	b	1355c <__assert_fail@plt+0x1e78>
   13554:	movw	r1, #43206	; 0xa8c6
   13558:	movt	r1, #1
   1355c:	mov	r0, #0
   13560:	mov	r2, #5
   13564:	bl	11408 <dcgettext@plt>
   13568:	mov	r2, r0
   1356c:	mov	r0, #0
   13570:	mov	r1, r7
   13574:	mov	r3, r8
   13578:	bl	114b0 <error@plt>
   1357c:	mvn	r6, #0
   13580:	str	r7, [r5]
   13584:	mov	r0, r6
   13588:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1358c:	mov	r0, #1
   13590:	b	117e0 <__assert_fail@plt+0xfc>
   13594:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13598:	add	fp, sp, #28
   1359c:	sub	sp, sp, #12
   135a0:	mov	r4, r3
   135a4:	mov	r6, r2
   135a8:	mov	r5, r1
   135ac:	mov	sl, r0
   135b0:	bl	11534 <strlen@plt>
   135b4:	ldr	r8, [r5]
   135b8:	cmp	r8, #0
   135bc:	beq	1367c <__assert_fail@plt+0x1f98>
   135c0:	mov	r7, r0
   135c4:	mov	r0, #0
   135c8:	add	r9, r5, #4
   135cc:	mov	r5, #0
   135d0:	str	r6, [sp, #4]
   135d4:	str	r0, [sp]
   135d8:	mvn	r0, #0
   135dc:	str	r0, [sp, #8]
   135e0:	b	135fc <__assert_fail@plt+0x1f18>
   135e4:	str	r5, [sp, #8]
   135e8:	ldr	r8, [r9, r5, lsl #2]
   135ec:	add	r6, r6, r4
   135f0:	add	r5, r5, #1
   135f4:	cmp	r8, #0
   135f8:	beq	13664 <__assert_fail@plt+0x1f80>
   135fc:	mov	r0, r8
   13600:	mov	r1, sl
   13604:	mov	r2, r7
   13608:	bl	116b4 <strncmp@plt>
   1360c:	cmp	r0, #0
   13610:	bne	135e8 <__assert_fail@plt+0x1f04>
   13614:	mov	r0, r8
   13618:	bl	11534 <strlen@plt>
   1361c:	cmp	r0, r7
   13620:	beq	13680 <__assert_fail@plt+0x1f9c>
   13624:	ldr	r0, [sp, #8]
   13628:	cmn	r0, #1
   1362c:	beq	135e4 <__assert_fail@plt+0x1f00>
   13630:	ldr	r0, [sp, #4]
   13634:	cmp	r0, #0
   13638:	beq	13658 <__assert_fail@plt+0x1f74>
   1363c:	ldr	r1, [sp, #8]
   13640:	mov	r2, r4
   13644:	mla	r0, r1, r4, r0
   13648:	mov	r1, r6
   1364c:	bl	11528 <bcmp@plt>
   13650:	cmp	r0, #0
   13654:	beq	135e8 <__assert_fail@plt+0x1f04>
   13658:	mov	r0, #1
   1365c:	str	r0, [sp]
   13660:	b	135e8 <__assert_fail@plt+0x1f04>
   13664:	ldr	r0, [sp]
   13668:	tst	r0, #1
   1366c:	ldr	r0, [sp, #8]
   13670:	mvnne	r0, #1
   13674:	sub	sp, fp, #28
   13678:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1367c:	mvn	r5, #0
   13680:	mov	r0, r5
   13684:	sub	sp, fp, #28
   13688:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1368c:	push	{r4, r5, r6, r7, fp, lr}
   13690:	add	fp, sp, #16
   13694:	mov	r5, r0
   13698:	ldr	r0, [r1]
   1369c:	mvn	r4, #0
   136a0:	cmp	r0, #0
   136a4:	beq	136d0 <__assert_fail@plt+0x1fec>
   136a8:	add	r7, r1, #4
   136ac:	mov	r6, #0
   136b0:	mov	r1, r5
   136b4:	bl	11390 <strcmp@plt>
   136b8:	cmp	r0, #0
   136bc:	beq	136d8 <__assert_fail@plt+0x1ff4>
   136c0:	ldr	r0, [r7, r6, lsl #2]
   136c4:	add	r6, r6, #1
   136c8:	cmp	r0, #0
   136cc:	bne	136b0 <__assert_fail@plt+0x1fcc>
   136d0:	mov	r0, r4
   136d4:	pop	{r4, r5, r6, r7, fp, pc}
   136d8:	mov	r0, r6
   136dc:	pop	{r4, r5, r6, r7, fp, pc}
   136e0:	push	{r4, r5, r6, sl, fp, lr}
   136e4:	add	fp, sp, #16
   136e8:	sub	sp, sp, #8
   136ec:	mov	r5, r0
   136f0:	movw	r0, #43948	; 0xabac
   136f4:	mov	r4, r1
   136f8:	movw	r1, #43975	; 0xabc7
   136fc:	cmn	r2, #1
   13700:	mov	r2, #5
   13704:	movt	r0, #1
   13708:	movt	r1, #1
   1370c:	moveq	r1, r0
   13710:	mov	r0, #0
   13714:	bl	11408 <dcgettext@plt>
   13718:	mov	r6, r0
   1371c:	mov	r0, #0
   13720:	mov	r1, #8
   13724:	mov	r2, r4
   13728:	bl	16370 <__assert_fail@plt+0x4c8c>
   1372c:	mov	r4, r0
   13730:	mov	r0, #1
   13734:	mov	r1, r5
   13738:	bl	16930 <__assert_fail@plt+0x524c>
   1373c:	str	r0, [sp]
   13740:	mov	r0, #0
   13744:	mov	r1, #0
   13748:	mov	r2, r6
   1374c:	mov	r3, r4
   13750:	bl	114b0 <error@plt>
   13754:	sub	sp, fp, #16
   13758:	pop	{r4, r5, r6, sl, fp, pc}
   1375c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13760:	add	fp, sp, #28
   13764:	sub	sp, sp, #4
   13768:	mov	sl, r1
   1376c:	movw	r1, #44004	; 0xabe4
   13770:	mov	r4, r2
   13774:	mov	r6, r0
   13778:	mov	r0, #0
   1377c:	mov	r2, #5
   13780:	mov	r8, #0
   13784:	movt	r1, #1
   13788:	bl	11408 <dcgettext@plt>
   1378c:	movw	r1, #49584	; 0xc1b0
   13790:	movt	r1, #2
   13794:	ldr	r1, [r1]
   13798:	bl	1136c <fputs_unlocked@plt>
   1379c:	ldr	r7, [r6]
   137a0:	cmp	r7, #0
   137a4:	beq	13860 <__assert_fail@plt+0x217c>
   137a8:	add	r0, r6, #4
   137ac:	mov	r9, #0
   137b0:	mov	r6, #0
   137b4:	str	r0, [sp]
   137b8:	cmp	r9, #0
   137bc:	bne	13814 <__assert_fail@plt+0x2130>
   137c0:	mov	r5, #0
   137c4:	movw	r0, #49584	; 0xc1b0
   137c8:	movt	r0, #2
   137cc:	ldr	r6, [r0]
   137d0:	mov	r0, r7
   137d4:	bl	16940 <__assert_fail@plt+0x525c>
   137d8:	movw	r2, #44025	; 0xabf9
   137dc:	mov	r3, r0
   137e0:	mov	r0, r6
   137e4:	mov	r1, #1
   137e8:	movt	r2, #1
   137ec:	bl	115c4 <__fprintf_chk@plt>
   137f0:	add	r6, sl, r5
   137f4:	ldr	r0, [sp]
   137f8:	add	r8, r8, r4
   137fc:	ldr	r7, [r0, -r9, lsl #2]
   13800:	sub	r9, r9, #1
   13804:	cmp	r7, #0
   13808:	beq	13860 <__assert_fail@plt+0x217c>
   1380c:	cmp	r9, #0
   13810:	beq	137c0 <__assert_fail@plt+0x20dc>
   13814:	add	r1, sl, r8
   13818:	mov	r0, r6
   1381c:	mov	r2, r4
   13820:	bl	11528 <bcmp@plt>
   13824:	cmp	r0, #0
   13828:	mov	r5, r8
   1382c:	bne	137c4 <__assert_fail@plt+0x20e0>
   13830:	movw	r0, #49584	; 0xc1b0
   13834:	movt	r0, #2
   13838:	ldr	r5, [r0]
   1383c:	mov	r0, r7
   13840:	bl	16940 <__assert_fail@plt+0x525c>
   13844:	movw	r2, #44033	; 0xac01
   13848:	mov	r3, r0
   1384c:	mov	r0, r5
   13850:	mov	r1, #1
   13854:	movt	r2, #1
   13858:	bl	115c4 <__fprintf_chk@plt>
   1385c:	b	137f4 <__assert_fail@plt+0x2110>
   13860:	movw	r0, #49584	; 0xc1b0
   13864:	movt	r0, #2
   13868:	ldr	r0, [r0]
   1386c:	ldr	r1, [r0, #20]
   13870:	ldr	r2, [r0, #24]
   13874:	cmp	r1, r2
   13878:	addcc	r2, r1, #1
   1387c:	strcc	r2, [r0, #20]
   13880:	movcc	r0, #10
   13884:	strbcc	r0, [r1]
   13888:	subcc	sp, fp, #28
   1388c:	popcc	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13890:	mov	r1, #10
   13894:	sub	sp, fp, #28
   13898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1389c:	b	11600 <__overflow@plt>
   138a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a4:	add	fp, sp, #28
   138a8:	sub	sp, sp, #20
   138ac:	mov	r9, r0
   138b0:	ldr	r0, [fp, #16]
   138b4:	mov	r8, r3
   138b8:	mov	sl, r2
   138bc:	mov	r7, r1
   138c0:	cmp	r0, #0
   138c4:	beq	13984 <__assert_fail@plt+0x22a0>
   138c8:	mov	r0, r7
   138cc:	str	r9, [sp, #8]
   138d0:	str	r8, [sp, #16]
   138d4:	bl	11534 <strlen@plt>
   138d8:	ldr	r9, [sl]
   138dc:	cmp	r9, #0
   138e0:	beq	139f4 <__assert_fail@plt+0x2310>
   138e4:	str	sl, [sp, #4]
   138e8:	add	r8, sl, #4
   138ec:	ldr	sl, [sp, #16]
   138f0:	mov	r4, r0
   138f4:	mov	r0, #0
   138f8:	mvn	r6, #0
   138fc:	mov	r5, #0
   13900:	str	r0, [sp, #12]
   13904:	b	13924 <__assert_fail@plt+0x2240>
   13908:	mov	r6, r5
   1390c:	ldr	r9, [r8, r5, lsl #2]
   13910:	ldr	r0, [fp, #8]
   13914:	add	r5, r5, #1
   13918:	add	sl, sl, r0
   1391c:	cmp	r9, #0
   13920:	beq	139c4 <__assert_fail@plt+0x22e0>
   13924:	mov	r0, r9
   13928:	mov	r1, r7
   1392c:	mov	r2, r4
   13930:	bl	116b4 <strncmp@plt>
   13934:	cmp	r0, #0
   13938:	bne	1390c <__assert_fail@plt+0x2228>
   1393c:	mov	r0, r9
   13940:	bl	11534 <strlen@plt>
   13944:	cmp	r0, r4
   13948:	beq	13a78 <__assert_fail@plt+0x2394>
   1394c:	cmn	r6, #1
   13950:	beq	13908 <__assert_fail@plt+0x2224>
   13954:	ldr	r0, [sp, #16]
   13958:	cmp	r0, #0
   1395c:	beq	13978 <__assert_fail@plt+0x2294>
   13960:	ldr	r2, [fp, #8]
   13964:	mov	r1, sl
   13968:	mla	r0, r6, r2, r0
   1396c:	bl	11528 <bcmp@plt>
   13970:	cmp	r0, #0
   13974:	beq	1390c <__assert_fail@plt+0x2228>
   13978:	mov	r0, #1
   1397c:	str	r0, [sp, #12]
   13980:	b	1390c <__assert_fail@plt+0x2228>
   13984:	ldr	r0, [sl]
   13988:	movw	r4, #43948	; 0xabac
   1398c:	movt	r4, #1
   13990:	cmp	r0, #0
   13994:	beq	13a04 <__assert_fail@plt+0x2320>
   13998:	add	r5, sl, #4
   1399c:	mov	r6, #0
   139a0:	mov	r1, r7
   139a4:	bl	11390 <strcmp@plt>
   139a8:	cmp	r0, #0
   139ac:	beq	139dc <__assert_fail@plt+0x22f8>
   139b0:	ldr	r0, [r5, r6, lsl #2]
   139b4:	add	r6, r6, #1
   139b8:	cmp	r0, #0
   139bc:	bne	139a0 <__assert_fail@plt+0x22bc>
   139c0:	b	13a04 <__assert_fail@plt+0x2320>
   139c4:	ldr	r0, [sp, #12]
   139c8:	ldr	r8, [sp, #16]
   139cc:	ldr	sl, [sp, #4]
   139d0:	ldr	r9, [sp, #8]
   139d4:	tst	r0, #1
   139d8:	bne	139e8 <__assert_fail@plt+0x2304>
   139dc:	cmn	r6, #1
   139e0:	bgt	13a6c <__assert_fail@plt+0x2388>
   139e4:	beq	139fc <__assert_fail@plt+0x2318>
   139e8:	movw	r4, #43975	; 0xabc7
   139ec:	movt	r4, #1
   139f0:	b	13a04 <__assert_fail@plt+0x2320>
   139f4:	ldr	r8, [sp, #16]
   139f8:	ldr	r9, [sp, #8]
   139fc:	movw	r4, #43948	; 0xabac
   13a00:	movt	r4, #1
   13a04:	ldr	r6, [fp, #12]
   13a08:	mov	r0, #0
   13a0c:	mov	r1, r4
   13a10:	mov	r2, #5
   13a14:	bl	11408 <dcgettext@plt>
   13a18:	mov	r4, r0
   13a1c:	mov	r0, #0
   13a20:	mov	r1, #8
   13a24:	mov	r2, r7
   13a28:	bl	16370 <__assert_fail@plt+0x4c8c>
   13a2c:	mov	r5, r0
   13a30:	mov	r0, #1
   13a34:	mov	r1, r9
   13a38:	bl	16930 <__assert_fail@plt+0x524c>
   13a3c:	str	r0, [sp]
   13a40:	mov	r0, #0
   13a44:	mov	r1, #0
   13a48:	mov	r2, r4
   13a4c:	mov	r3, r5
   13a50:	bl	114b0 <error@plt>
   13a54:	ldr	r2, [fp, #8]
   13a58:	mov	r0, sl
   13a5c:	mov	r1, r8
   13a60:	bl	1375c <__assert_fail@plt+0x2078>
   13a64:	blx	r6
   13a68:	mvn	r6, #0
   13a6c:	mov	r0, r6
   13a70:	sub	sp, fp, #28
   13a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13a78:	ldr	r8, [sp, #16]
   13a7c:	ldr	sl, [sp, #4]
   13a80:	ldr	r9, [sp, #8]
   13a84:	mov	r6, r5
   13a88:	cmn	r6, #1
   13a8c:	bgt	13a6c <__assert_fail@plt+0x2388>
   13a90:	b	139e4 <__assert_fail@plt+0x2300>
   13a94:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   13a98:	add	fp, sp, #24
   13a9c:	ldr	r6, [r1]
   13aa0:	cmp	r6, #0
   13aa4:	beq	13b08 <__assert_fail@plt+0x2424>
   13aa8:	mov	r8, r1
   13aac:	mov	r7, r2
   13ab0:	mov	r1, r2
   13ab4:	mov	r2, r3
   13ab8:	mov	r4, r3
   13abc:	mov	r9, r0
   13ac0:	bl	11528 <bcmp@plt>
   13ac4:	cmp	r0, #0
   13ac8:	beq	13b00 <__assert_fail@plt+0x241c>
   13acc:	add	r7, r7, r4
   13ad0:	add	r5, r8, #4
   13ad4:	ldr	r6, [r5]
   13ad8:	cmp	r6, #0
   13adc:	beq	13b08 <__assert_fail@plt+0x2424>
   13ae0:	mov	r0, r9
   13ae4:	mov	r1, r7
   13ae8:	mov	r2, r4
   13aec:	bl	11528 <bcmp@plt>
   13af0:	add	r7, r7, r4
   13af4:	add	r5, r5, #4
   13af8:	cmp	r0, #0
   13afc:	bne	13ad4 <__assert_fail@plt+0x23f0>
   13b00:	mov	r0, r6
   13b04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b08:	mov	r6, #0
   13b0c:	mov	r0, r6
   13b10:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   13b14:	sub	r0, r0, #1
   13b18:	ldrb	r3, [r0, #1]!
   13b1c:	cmp	r3, #47	; 0x2f
   13b20:	beq	13b18 <__assert_fail@plt+0x2434>
   13b24:	mov	r2, #0
   13b28:	mov	r1, r0
   13b2c:	b	13b38 <__assert_fail@plt+0x2454>
   13b30:	ldrb	r3, [r1, #1]!
   13b34:	mov	r2, #1
   13b38:	uxtb	r3, r3
   13b3c:	cmp	r3, #47	; 0x2f
   13b40:	beq	13b30 <__assert_fail@plt+0x244c>
   13b44:	cmp	r3, #0
   13b48:	bxeq	lr
   13b4c:	tst	r2, #1
   13b50:	mov	r2, #0
   13b54:	movne	r0, r1
   13b58:	ldrb	r3, [r1, #1]!
   13b5c:	b	13b38 <__assert_fail@plt+0x2454>
   13b60:	push	{r4, sl, fp, lr}
   13b64:	add	fp, sp, #8
   13b68:	mov	r4, r0
   13b6c:	bl	11534 <strlen@plt>
   13b70:	mov	r1, r0
   13b74:	sub	r2, r4, #1
   13b78:	mov	r0, r1
   13b7c:	cmp	r1, #2
   13b80:	bcc	13b94 <__assert_fail@plt+0x24b0>
   13b84:	ldrb	r3, [r2, r0]
   13b88:	sub	r1, r0, #1
   13b8c:	cmp	r3, #47	; 0x2f
   13b90:	beq	13b78 <__assert_fail@plt+0x2494>
   13b94:	pop	{r4, sl, fp, pc}
   13b98:	movw	r1, #49604	; 0xc1c4
   13b9c:	movt	r1, #2
   13ba0:	str	r0, [r1]
   13ba4:	bx	lr
   13ba8:	movw	r1, #49608	; 0xc1c8
   13bac:	movt	r1, #2
   13bb0:	strb	r0, [r1]
   13bb4:	bx	lr
   13bb8:	push	{r4, r5, r6, sl, fp, lr}
   13bbc:	add	fp, sp, #16
   13bc0:	sub	sp, sp, #8
   13bc4:	movw	r0, #49588	; 0xc1b4
   13bc8:	movt	r0, #2
   13bcc:	ldr	r0, [r0]
   13bd0:	bl	19264 <__assert_fail@plt+0x7b80>
   13bd4:	cmp	r0, #0
   13bd8:	beq	13c00 <__assert_fail@plt+0x251c>
   13bdc:	movw	r0, #49608	; 0xc1c8
   13be0:	movt	r0, #2
   13be4:	ldrb	r0, [r0]
   13be8:	cmp	r0, #0
   13bec:	beq	13c20 <__assert_fail@plt+0x253c>
   13bf0:	bl	11558 <__errno_location@plt>
   13bf4:	ldr	r0, [r0]
   13bf8:	cmp	r0, #32
   13bfc:	bne	13c20 <__assert_fail@plt+0x253c>
   13c00:	movw	r0, #49584	; 0xc1b0
   13c04:	movt	r0, #2
   13c08:	ldr	r0, [r0]
   13c0c:	bl	19264 <__assert_fail@plt+0x7b80>
   13c10:	cmp	r0, #0
   13c14:	subeq	sp, fp, #16
   13c18:	popeq	{r4, r5, r6, sl, fp, pc}
   13c1c:	b	13c90 <__assert_fail@plt+0x25ac>
   13c20:	movw	r1, #44038	; 0xac06
   13c24:	mov	r0, #0
   13c28:	mov	r2, #5
   13c2c:	movt	r1, #1
   13c30:	bl	11408 <dcgettext@plt>
   13c34:	mov	r4, r0
   13c38:	movw	r0, #49604	; 0xc1c4
   13c3c:	movt	r0, #2
   13c40:	ldr	r6, [r0]
   13c44:	bl	11558 <__errno_location@plt>
   13c48:	ldr	r5, [r0]
   13c4c:	cmp	r6, #0
   13c50:	bne	13c6c <__assert_fail@plt+0x2588>
   13c54:	movw	r2, #44035	; 0xac03
   13c58:	mov	r0, #0
   13c5c:	mov	r1, r5
   13c60:	mov	r3, r4
   13c64:	movt	r2, #1
   13c68:	b	13c8c <__assert_fail@plt+0x25a8>
   13c6c:	mov	r0, r6
   13c70:	bl	165b8 <__assert_fail@plt+0x4ed4>
   13c74:	movw	r2, #44050	; 0xac12
   13c78:	mov	r3, r0
   13c7c:	str	r4, [sp]
   13c80:	mov	r0, #0
   13c84:	mov	r1, r5
   13c88:	movt	r2, #1
   13c8c:	bl	114b0 <error@plt>
   13c90:	movw	r0, #49496	; 0xc158
   13c94:	movt	r0, #2
   13c98:	ldr	r0, [r0]
   13c9c:	bl	113c0 <_exit@plt>
   13ca0:	push	{fp, lr}
   13ca4:	mov	fp, sp
   13ca8:	bl	13d00 <__assert_fail@plt+0x261c>
   13cac:	cmp	r0, #0
   13cb0:	popne	{fp, pc}
   13cb4:	bl	183ac <__assert_fail@plt+0x6cc8>
   13cb8:	push	{r4, r5, r6, sl, fp, lr}
   13cbc:	add	fp, sp, #16
   13cc0:	mov	r5, r0
   13cc4:	mov	r4, r0
   13cc8:	ldrb	r6, [r5], #-1
   13ccc:	bl	13b14 <__assert_fail@plt+0x2430>
   13cd0:	sub	r2, r0, r4
   13cd4:	sub	r0, r6, #47	; 0x2f
   13cd8:	clz	r0, r0
   13cdc:	lsr	r1, r0, #5
   13ce0:	mov	r0, r2
   13ce4:	cmp	r2, r1
   13ce8:	bls	13cfc <__assert_fail@plt+0x2618>
   13cec:	ldrb	r3, [r5, r0]
   13cf0:	sub	r2, r0, #1
   13cf4:	cmp	r3, #47	; 0x2f
   13cf8:	beq	13ce0 <__assert_fail@plt+0x25fc>
   13cfc:	pop	{r4, r5, r6, sl, fp, pc}
   13d00:	push	{r4, r5, r6, sl, fp, lr}
   13d04:	add	fp, sp, #16
   13d08:	mov	r6, r0
   13d0c:	mov	r4, r0
   13d10:	ldrb	r5, [r6], #-1
   13d14:	bl	13b14 <__assert_fail@plt+0x2430>
   13d18:	sub	r1, r0, r4
   13d1c:	sub	r0, r5, #47	; 0x2f
   13d20:	clz	r0, r0
   13d24:	lsr	r0, r0, #5
   13d28:	mov	r5, r1
   13d2c:	cmp	r1, r0
   13d30:	bls	13d44 <__assert_fail@plt+0x2660>
   13d34:	ldrb	r2, [r6, r5]
   13d38:	sub	r1, r5, #1
   13d3c:	cmp	r2, #47	; 0x2f
   13d40:	beq	13d28 <__assert_fail@plt+0x2644>
   13d44:	cmp	r5, #0
   13d48:	mov	r0, r5
   13d4c:	addeq	r0, r0, #1
   13d50:	add	r0, r0, #1
   13d54:	bl	191e0 <__assert_fail@plt+0x7afc>
   13d58:	mov	r6, r0
   13d5c:	cmp	r0, #0
   13d60:	beq	13d8c <__assert_fail@plt+0x26a8>
   13d64:	mov	r0, r6
   13d68:	mov	r1, r4
   13d6c:	mov	r2, r5
   13d70:	bl	113cc <memcpy@plt>
   13d74:	cmp	r5, #0
   13d78:	moveq	r0, #46	; 0x2e
   13d7c:	moveq	r5, #1
   13d80:	strbeq	r0, [r6]
   13d84:	mov	r0, #0
   13d88:	strb	r0, [r6, r5]
   13d8c:	mov	r0, r6
   13d90:	pop	{r4, r5, r6, sl, fp, pc}
   13d94:	sub	sp, sp, #8
   13d98:	push	{r4, r5, r6, r7, fp, lr}
   13d9c:	add	fp, sp, #16
   13da0:	sub	sp, sp, #8
   13da4:	mov	r5, r0
   13da8:	add	r0, fp, #8
   13dac:	cmp	r1, #11
   13db0:	str	r2, [fp, #8]
   13db4:	str	r3, [fp, #12]
   13db8:	str	r0, [sp, #4]
   13dbc:	bhi	13df8 <__assert_fail@plt+0x2714>
   13dc0:	mov	r0, #1
   13dc4:	movw	r2, #1300	; 0x514
   13dc8:	tst	r2, r0, lsl r1
   13dcc:	bne	13eb8 <__assert_fail@plt+0x27d4>
   13dd0:	movw	r2, #2570	; 0xa0a
   13dd4:	tst	r2, r0, lsl r1
   13dd8:	bne	13e20 <__assert_fail@plt+0x273c>
   13ddc:	cmp	r1, #0
   13de0:	bne	13df8 <__assert_fail@plt+0x2714>
   13de4:	ldr	r0, [sp, #4]
   13de8:	add	r1, r0, #4
   13dec:	str	r1, [sp, #4]
   13df0:	mov	r1, #0
   13df4:	b	13ec4 <__assert_fail@plt+0x27e0>
   13df8:	sub	r0, r1, #1024	; 0x400
   13dfc:	cmp	r0, #10
   13e00:	bhi	13eb8 <__assert_fail@plt+0x27d4>
   13e04:	mov	r2, #1
   13e08:	movw	r3, #645	; 0x285
   13e0c:	tst	r3, r2, lsl r0
   13e10:	bne	13eb8 <__assert_fail@plt+0x27d4>
   13e14:	movw	r3, #1282	; 0x502
   13e18:	tst	r3, r2, lsl r0
   13e1c:	beq	13e2c <__assert_fail@plt+0x2748>
   13e20:	mov	r0, r5
   13e24:	bl	115f4 <fcntl64@plt>
   13e28:	b	13ed0 <__assert_fail@plt+0x27ec>
   13e2c:	cmp	r0, #6
   13e30:	bne	13eb8 <__assert_fail@plt+0x27d4>
   13e34:	ldr	r0, [sp, #4]
   13e38:	movw	r7, #49612	; 0xc1cc
   13e3c:	movt	r7, #2
   13e40:	add	r1, r0, #4
   13e44:	str	r1, [sp, #4]
   13e48:	ldr	r6, [r0]
   13e4c:	ldr	r0, [r7]
   13e50:	cmp	r0, #0
   13e54:	bmi	13ef4 <__assert_fail@plt+0x2810>
   13e58:	mov	r0, r5
   13e5c:	movw	r1, #1030	; 0x406
   13e60:	mov	r2, r6
   13e64:	bl	115f4 <fcntl64@plt>
   13e68:	mov	r4, r0
   13e6c:	cmn	r0, #1
   13e70:	bgt	13ee8 <__assert_fail@plt+0x2804>
   13e74:	bl	11558 <__errno_location@plt>
   13e78:	ldr	r0, [r0]
   13e7c:	cmp	r0, #22
   13e80:	bne	13ee8 <__assert_fail@plt+0x2804>
   13e84:	mov	r0, r5
   13e88:	mov	r1, #0
   13e8c:	mov	r2, r6
   13e90:	bl	115f4 <fcntl64@plt>
   13e94:	mov	r4, r0
   13e98:	cmp	r0, #0
   13e9c:	bmi	13ed4 <__assert_fail@plt+0x27f0>
   13ea0:	mvn	r0, #0
   13ea4:	str	r0, [r7]
   13ea8:	mov	r0, #1
   13eac:	cmp	r0, #0
   13eb0:	bne	13f20 <__assert_fail@plt+0x283c>
   13eb4:	b	13ed4 <__assert_fail@plt+0x27f0>
   13eb8:	ldr	r0, [sp, #4]
   13ebc:	add	r2, r0, #4
   13ec0:	str	r2, [sp, #4]
   13ec4:	ldr	r2, [r0]
   13ec8:	mov	r0, r5
   13ecc:	bl	115f4 <fcntl64@plt>
   13ed0:	mov	r4, r0
   13ed4:	mov	r0, r4
   13ed8:	sub	sp, fp, #16
   13edc:	pop	{r4, r5, r6, r7, fp, lr}
   13ee0:	add	sp, sp, #8
   13ee4:	bx	lr
   13ee8:	mov	r0, #1
   13eec:	str	r0, [r7]
   13ef0:	b	13ed4 <__assert_fail@plt+0x27f0>
   13ef4:	mov	r0, r5
   13ef8:	mov	r1, #0
   13efc:	mov	r2, r6
   13f00:	bl	115f4 <fcntl64@plt>
   13f04:	mov	r4, r0
   13f08:	ldr	r0, [r7]
   13f0c:	add	r0, r0, #1
   13f10:	clz	r0, r0
   13f14:	lsr	r0, r0, #5
   13f18:	cmp	r0, #0
   13f1c:	beq	13ed4 <__assert_fail@plt+0x27f0>
   13f20:	cmp	r4, #0
   13f24:	bmi	13ed4 <__assert_fail@plt+0x27f0>
   13f28:	mov	r0, r4
   13f2c:	mov	r1, #1
   13f30:	bl	115f4 <fcntl64@plt>
   13f34:	cmp	r0, #0
   13f38:	bmi	13f54 <__assert_fail@plt+0x2870>
   13f3c:	orr	r2, r0, #1
   13f40:	mov	r0, r4
   13f44:	mov	r1, #2
   13f48:	bl	115f4 <fcntl64@plt>
   13f4c:	cmn	r0, #1
   13f50:	bne	13ed4 <__assert_fail@plt+0x27f0>
   13f54:	bl	11558 <__errno_location@plt>
   13f58:	ldr	r6, [r0]
   13f5c:	mov	r5, r0
   13f60:	mov	r0, r4
   13f64:	bl	116d8 <close@plt>
   13f68:	str	r6, [r5]
   13f6c:	mvn	r4, #0
   13f70:	b	13ed4 <__assert_fail@plt+0x27f0>
   13f74:	sub	sp, sp, #8
   13f78:	push	{fp, lr}
   13f7c:	mov	fp, sp
   13f80:	sub	sp, sp, #8
   13f84:	str	r2, [fp, #8]
   13f88:	str	r3, [fp, #12]
   13f8c:	tst	r1, #64	; 0x40
   13f90:	mov	r2, #0
   13f94:	ldrne	r2, [fp, #8]
   13f98:	bl	114bc <open64@plt>
   13f9c:	bl	17758 <__assert_fail@plt+0x6074>
   13fa0:	mov	sp, fp
   13fa4:	pop	{fp, lr}
   13fa8:	add	sp, sp, #8
   13fac:	bx	lr
   13fb0:	push	{r4, r5, r6, sl, fp, lr}
   13fb4:	add	fp, sp, #16
   13fb8:	mov	r4, r0
   13fbc:	bl	11558 <__errno_location@plt>
   13fc0:	ldr	r6, [r0]
   13fc4:	mov	r5, r0
   13fc8:	mov	r0, r4
   13fcc:	bl	113b4 <free@plt>
   13fd0:	str	r6, [r5]
   13fd4:	pop	{r4, r5, r6, sl, fp, pc}
   13fd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fdc:	add	fp, sp, #28
   13fe0:	sub	sp, sp, #4
   13fe4:	vpush	{d8-d9}
   13fe8:	sub	sp, sp, #104	; 0x68
   13fec:	mov	r7, r3
   13ff0:	mov	r5, r2
   13ff4:	mov	r8, r1
   13ff8:	mov	sl, r0
   13ffc:	bl	1163c <localeconv@plt>
   14000:	ldr	r6, [r0]
   14004:	mov	r4, r0
   14008:	mov	r0, r6
   1400c:	bl	11534 <strlen@plt>
   14010:	sub	r1, r0, #1
   14014:	movw	r2, #43041	; 0xa821
   14018:	cmp	r1, #16
   1401c:	movt	r2, #1
   14020:	movcs	r0, #1
   14024:	movcc	r2, r6
   14028:	ldr	r6, [r4, #4]
   1402c:	str	r0, [sp, #48]	; 0x30
   14030:	ldr	r0, [r4, #8]
   14034:	str	r2, [sp, #16]
   14038:	str	r0, [sp, #24]
   1403c:	mov	r0, r6
   14040:	bl	11534 <strlen@plt>
   14044:	cmp	r0, #17
   14048:	movw	r0, #647	; 0x287
   1404c:	movw	r1, #41895	; 0xa3a7
   14050:	str	r5, [sp, #36]	; 0x24
   14054:	str	r7, [sp, #40]	; 0x28
   14058:	ldr	r4, [fp, #20]
   1405c:	add	r0, r5, r0
   14060:	movt	r1, #1
   14064:	movcc	r1, r6
   14068:	ldr	r5, [fp, #16]
   1406c:	ldr	r6, [fp, #8]
   14070:	str	r0, [sp, #32]
   14074:	ands	r0, r7, #32
   14078:	str	r1, [sp, #20]
   1407c:	str	r0, [sp, #28]
   14080:	mov	r0, #1000	; 0x3e8
   14084:	movwne	r0, #1024	; 0x400
   14088:	str	r0, [sp, #44]	; 0x2c
   1408c:	and	r0, r7, #3
   14090:	ldr	r7, [fp, #12]
   14094:	str	r0, [sp, #52]	; 0x34
   14098:	subs	r0, r6, r5
   1409c:	sbcs	r0, r7, r4
   140a0:	bcs	14190 <__assert_fail@plt+0x2aac>
   140a4:	orrs	r0, r6, r7
   140a8:	beq	142e4 <__assert_fail@plt+0x2c00>
   140ac:	ldr	r9, [fp, #16]
   140b0:	ldr	r5, [fp, #20]
   140b4:	mov	r2, r6
   140b8:	mov	r3, r7
   140bc:	mov	r0, r9
   140c0:	mov	r1, r5
   140c4:	bl	19bbc <__assert_fail@plt+0x84d8>
   140c8:	mov	r4, r0
   140cc:	mov	r3, r1
   140d0:	umull	r0, r1, r0, r6
   140d4:	mla	r1, r4, r7, r1
   140d8:	mla	r1, r3, r6, r1
   140dc:	subs	r0, r9, r0
   140e0:	sbc	r1, r5, r1
   140e4:	orrs	r0, r0, r1
   140e8:	bne	142e4 <__assert_fail@plt+0x2c00>
   140ec:	mov	r0, sl
   140f0:	mov	r1, r8
   140f4:	mov	r2, r4
   140f8:	mov	r6, r8
   140fc:	mov	r8, r3
   14100:	bl	19bbc <__assert_fail@plt+0x84d8>
   14104:	mov	r5, r0
   14108:	mov	r9, r1
   1410c:	umull	r0, r1, r0, r4
   14110:	mov	r2, #10
   14114:	mov	r3, r8
   14118:	mla	r1, r5, r8, r1
   1411c:	mla	r1, r9, r4, r1
   14120:	subs	r0, sl, r0
   14124:	umull	sl, r0, r0, r2
   14128:	mov	r2, r4
   1412c:	sbc	r1, r6, r1
   14130:	add	r1, r1, r1, lsl #2
   14134:	add	r7, r0, r1, lsl #1
   14138:	mov	r0, sl
   1413c:	mov	r1, r7
   14140:	bl	19bbc <__assert_fail@plt+0x84d8>
   14144:	mov	r6, r0
   14148:	umull	r0, r2, r0, r4
   1414c:	mla	r2, r6, r8, r2
   14150:	mla	r1, r1, r4, r2
   14154:	mov	r2, #2
   14158:	subs	r0, sl, r0
   1415c:	sbc	r1, r7, r1
   14160:	subs	r3, r4, r0, lsl #1
   14164:	lsl	r1, r1, #1
   14168:	orr	r1, r1, r0, lsr #31
   1416c:	orr	r7, r1, r0, lsl #1
   14170:	sbcs	r3, r8, r1
   14174:	movwcc	r2, #3
   14178:	cmp	r7, #0
   1417c:	movwne	r7, #1
   14180:	rsbs	r0, r4, r0, lsl #1
   14184:	sbcs	r0, r1, r8
   14188:	movcs	r7, r2
   1418c:	b	141fc <__assert_fail@plt+0x2b18>
   14190:	mov	r0, r6
   14194:	mov	r1, r7
   14198:	mov	r2, r5
   1419c:	mov	r3, r4
   141a0:	bl	19bbc <__assert_fail@plt+0x84d8>
   141a4:	mov	r2, r0
   141a8:	mov	r3, r1
   141ac:	umull	r0, r1, r0, r5
   141b0:	mla	r1, r2, r4, r1
   141b4:	mla	r1, r3, r5, r1
   141b8:	subs	r0, r6, r0
   141bc:	sbc	r1, r7, r1
   141c0:	orrs	r0, r0, r1
   141c4:	bne	142e4 <__assert_fail@plt+0x2c00>
   141c8:	umull	r5, r0, r2, sl
   141cc:	mov	r4, r8
   141d0:	mla	r0, r2, r8, r0
   141d4:	mla	r9, r3, sl, r0
   141d8:	mov	r0, r5
   141dc:	mov	r1, r9
   141e0:	bl	19bbc <__assert_fail@plt+0x84d8>
   141e4:	eor	r1, r1, r8
   141e8:	eor	r0, r0, sl
   141ec:	orrs	r0, r0, r1
   141f0:	bne	142e4 <__assert_fail@plt+0x2c00>
   141f4:	mov	r7, #0
   141f8:	mov	r6, #0
   141fc:	ldr	r0, [sp, #40]	; 0x28
   14200:	ldr	r1, [sp, #32]
   14204:	ldr	r2, [sp, #44]	; 0x2c
   14208:	ands	r4, r0, #16
   1420c:	beq	14558 <__assert_fail@plt+0x2e74>
   14210:	subs	r0, r5, r2
   14214:	mov	r8, #0
   14218:	sbcs	r0, r9, #0
   1421c:	bcs	14230 <__assert_fail@plt+0x2b4c>
   14220:	ldr	r0, [sp, #32]
   14224:	mov	sl, r5
   14228:	str	r0, [sp, #12]
   1422c:	b	14878 <__assert_fail@plt+0x3194>
   14230:	ldr	r2, [sp, #44]	; 0x2c
   14234:	mov	r0, r5
   14238:	mov	r1, r9
   1423c:	mov	r3, #0
   14240:	bl	19bbc <__assert_fail@plt+0x84d8>
   14244:	ldr	r2, [sp, #44]	; 0x2c
   14248:	mov	sl, r0
   1424c:	mov	r9, r1
   14250:	mls	r0, r0, r2, r5
   14254:	add	r0, r0, r0, lsl #2
   14258:	add	r0, r6, r0, lsl #1
   1425c:	udiv	r6, r0, r2
   14260:	mls	r0, r6, r2, r0
   14264:	lsl	r0, r0, #1
   14268:	add	r0, r0, r7, lsr #1
   1426c:	cmp	r0, r2
   14270:	bcs	14284 <__assert_fail@plt+0x2ba0>
   14274:	rsb	r1, r7, #0
   14278:	subs	r7, r0, r1
   1427c:	movwne	r7, #1
   14280:	b	14294 <__assert_fail@plt+0x2bb0>
   14284:	add	r0, r0, r7
   14288:	mov	r7, #2
   1428c:	cmp	r2, r0
   14290:	movwcc	r7, #3
   14294:	mov	r0, r8
   14298:	add	r0, r8, #1
   1429c:	mov	r8, r0
   142a0:	cmp	r0, #7
   142a4:	bhi	142b8 <__assert_fail@plt+0x2bd4>
   142a8:	subs	r0, sl, r2
   142ac:	mov	r5, sl
   142b0:	sbcs	r0, r9, #0
   142b4:	bcs	14230 <__assert_fail@plt+0x2b4c>
   142b8:	rsbs	r0, sl, #9
   142bc:	rscs	r0, r9, #0
   142c0:	bcc	147d8 <__assert_fail@plt+0x30f4>
   142c4:	ldr	r0, [sp, #52]	; 0x34
   142c8:	cmp	r0, #1
   142cc:	bne	147e4 <__assert_fail@plt+0x3100>
   142d0:	and	r0, r6, #1
   142d4:	add	r0, r7, r0
   142d8:	cmp	r0, #2
   142dc:	bhi	147f4 <__assert_fail@plt+0x3110>
   142e0:	b	1482c <__assert_fail@plt+0x3148>
   142e4:	ldr	r9, [fp, #20]
   142e8:	ldr	r0, [fp, #16]
   142ec:	mov	r1, r9
   142f0:	bl	19a74 <__assert_fail@plt+0x8390>
   142f4:	vmov	d8, r0, r1
   142f8:	mov	r0, sl
   142fc:	mov	r1, r8
   14300:	bl	19a74 <__assert_fail@plt+0x8390>
   14304:	mov	r4, r0
   14308:	mov	r5, r1
   1430c:	mov	r0, r6
   14310:	mov	r1, r7
   14314:	bl	19a74 <__assert_fail@plt+0x8390>
   14318:	vmov	d16, r0, r1
   1431c:	vmov	d17, r4, r5
   14320:	ldr	r7, [sp, #40]	; 0x28
   14324:	tst	r7, #16
   14328:	vdiv.f64	d16, d16, d8
   1432c:	vmul.f64	d8, d16, d17
   14330:	bne	143b0 <__assert_fail@plt+0x2ccc>
   14334:	ldr	r6, [sp, #52]	; 0x34
   14338:	cmp	r6, #1
   1433c:	beq	1456c <__assert_fail@plt+0x2e88>
   14340:	vldr	d16, [pc, #568]	; 14580 <__assert_fail@plt+0x2e9c>
   14344:	ldr	sl, [sp, #36]	; 0x24
   14348:	ldr	r8, [sp, #32]
   1434c:	vcmpe.f64	d8, d16
   14350:	vmrs	APSR_nzcv, fpscr
   14354:	bpl	14574 <__assert_fail@plt+0x2e90>
   14358:	vmov	r0, r1, d8
   1435c:	bl	19c08 <__assert_fail@plt+0x8524>
   14360:	mov	r4, r0
   14364:	mov	r5, r1
   14368:	mov	r0, #0
   1436c:	cmp	r6, #0
   14370:	mov	r2, #0
   14374:	bne	1439c <__assert_fail@plt+0x2cb8>
   14378:	mov	r0, r4
   1437c:	mov	r1, r5
   14380:	bl	19a74 <__assert_fail@plt+0x8390>
   14384:	vmov	d16, r0, r1
   14388:	mov	r2, #0
   1438c:	mov	r0, #0
   14390:	vcmp.f64	d8, d16
   14394:	vmrs	APSR_nzcv, fpscr
   14398:	movwne	r0, #1
   1439c:	adds	r0, r0, r4
   143a0:	adc	r1, r2, r5
   143a4:	bl	19a74 <__assert_fail@plt+0x8390>
   143a8:	vmov	d8, r0, r1
   143ac:	b	14574 <__assert_fail@plt+0x2e90>
   143b0:	ldr	r0, [sp, #44]	; 0x2c
   143b4:	mov	r6, #1
   143b8:	vmov	s0, r0
   143bc:	vcvt.f64.u32	d16, s0
   143c0:	vmul.f64	d17, d16, d16
   143c4:	vcmpe.f64	d17, d8
   143c8:	vmrs	APSR_nzcv, fpscr
   143cc:	bls	143e0 <__assert_fail@plt+0x2cfc>
   143d0:	ldr	sl, [sp, #48]	; 0x30
   143d4:	ldr	r8, [sp, #32]
   143d8:	vmov.f64	d17, d16
   143dc:	b	14478 <__assert_fail@plt+0x2d94>
   143e0:	vmul.f64	d18, d17, d16
   143e4:	ldr	sl, [sp, #48]	; 0x30
   143e8:	ldr	r8, [sp, #32]
   143ec:	mov	r6, #2
   143f0:	vcmpe.f64	d18, d8
   143f4:	vmrs	APSR_nzcv, fpscr
   143f8:	bhi	14478 <__assert_fail@plt+0x2d94>
   143fc:	vmul.f64	d19, d18, d16
   14400:	vmov.f64	d17, d18
   14404:	mov	r6, #3
   14408:	vcmpe.f64	d19, d8
   1440c:	vmrs	APSR_nzcv, fpscr
   14410:	bhi	14478 <__assert_fail@plt+0x2d94>
   14414:	vmul.f64	d18, d19, d16
   14418:	vmov.f64	d17, d19
   1441c:	mov	r6, #4
   14420:	vcmpe.f64	d18, d8
   14424:	vmrs	APSR_nzcv, fpscr
   14428:	bhi	14478 <__assert_fail@plt+0x2d94>
   1442c:	vmul.f64	d19, d18, d16
   14430:	vmov.f64	d17, d18
   14434:	mov	r6, #5
   14438:	vcmpe.f64	d19, d8
   1443c:	vmrs	APSR_nzcv, fpscr
   14440:	bhi	14478 <__assert_fail@plt+0x2d94>
   14444:	vmul.f64	d18, d19, d16
   14448:	vmov.f64	d17, d19
   1444c:	mov	r6, #6
   14450:	vcmpe.f64	d18, d8
   14454:	vmrs	APSR_nzcv, fpscr
   14458:	bhi	14478 <__assert_fail@plt+0x2d94>
   1445c:	vmul.f64	d16, d18, d16
   14460:	mov	r6, #7
   14464:	vmov.f64	d17, d18
   14468:	vcmpe.f64	d16, d8
   1446c:	vmrs	APSR_nzcv, fpscr
   14470:	movls	r6, #8
   14474:	vmovls.f64	d17, d16
   14478:	vdiv.f64	d8, d8, d17
   1447c:	ldr	r0, [sp, #52]	; 0x34
   14480:	cmp	r0, #1
   14484:	vmov.f64	d16, d8
   14488:	beq	144f8 <__assert_fail@plt+0x2e14>
   1448c:	vldr	d16, [pc, #236]	; 14580 <__assert_fail@plt+0x2e9c>
   14490:	vcmpe.f64	d8, d16
   14494:	vmov.f64	d16, d8
   14498:	vmrs	APSR_nzcv, fpscr
   1449c:	bpl	144f8 <__assert_fail@plt+0x2e14>
   144a0:	vmov	r0, r1, d8
   144a4:	bl	19c08 <__assert_fail@plt+0x8524>
   144a8:	mov	r5, r1
   144ac:	ldr	r1, [sp, #52]	; 0x34
   144b0:	mov	r4, r0
   144b4:	mov	r0, #0
   144b8:	mov	r2, #0
   144bc:	cmp	r1, #0
   144c0:	bne	144e8 <__assert_fail@plt+0x2e04>
   144c4:	mov	r0, r4
   144c8:	mov	r1, r5
   144cc:	bl	19a74 <__assert_fail@plt+0x8390>
   144d0:	vmov	d16, r0, r1
   144d4:	mov	r2, #0
   144d8:	mov	r0, #0
   144dc:	vcmp.f64	d8, d16
   144e0:	vmrs	APSR_nzcv, fpscr
   144e4:	movwne	r0, #1
   144e8:	adds	r0, r0, r4
   144ec:	adc	r1, r2, r5
   144f0:	bl	19a74 <__assert_fail@plt+0x8390>
   144f4:	vmov	d16, r0, r1
   144f8:	ldr	r5, [sp, #36]	; 0x24
   144fc:	movw	r3, #44063	; 0xac1f
   14500:	mov	r1, #1
   14504:	mvn	r2, #0
   14508:	vstr	d16, [sp]
   1450c:	movt	r3, #1
   14510:	mov	r0, r5
   14514:	bl	11564 <__sprintf_chk@plt>
   14518:	ldr	r1, [sp, #28]
   1451c:	mov	r0, #3
   14520:	cmp	r1, #0
   14524:	movwne	r0, #2
   14528:	add	r4, r0, sl
   1452c:	mov	r0, r5
   14530:	bl	11534 <strlen@plt>
   14534:	cmp	r4, r0
   14538:	bcc	1459c <__assert_fail@plt+0x2eb8>
   1453c:	ldr	r7, [sp, #40]	; 0x28
   14540:	mov	r2, r0
   14544:	add	r5, sl, #1
   14548:	tst	r7, #8
   1454c:	bne	14588 <__assert_fail@plt+0x2ea4>
   14550:	ldr	sl, [sp, #36]	; 0x24
   14554:	b	1464c <__assert_fail@plt+0x2f68>
   14558:	mov	r0, r1
   1455c:	mvn	r8, #0
   14560:	str	r1, [sp, #12]
   14564:	mov	sl, r5
   14568:	b	14878 <__assert_fail@plt+0x3194>
   1456c:	ldr	sl, [sp, #36]	; 0x24
   14570:	ldr	r8, [sp, #32]
   14574:	vstr	d8, [sp]
   14578:	mvn	r6, #0
   1457c:	b	14624 <__assert_fail@plt+0x2f40>
   14580:	andeq	r0, r0, r0
   14584:	mvnsmi	r0, #0
   14588:	ldr	r0, [sp, #36]	; 0x24
   1458c:	add	r0, r2, r0
   14590:	ldrb	r0, [r0, #-1]
   14594:	cmp	r0, #48	; 0x30
   14598:	bne	147cc <__assert_fail@plt+0x30e8>
   1459c:	vmov.f64	d9, #36	; 0x41200000  10.0
   145a0:	ldr	r4, [sp, #52]	; 0x34
   145a4:	vmul.f64	d8, d8, d9
   145a8:	cmp	r4, #1
   145ac:	beq	14614 <__assert_fail@plt+0x2f30>
   145b0:	vldr	d16, [pc, #-56]	; 14580 <__assert_fail@plt+0x2e9c>
   145b4:	vcmpe.f64	d8, d16
   145b8:	vmrs	APSR_nzcv, fpscr
   145bc:	bpl	14614 <__assert_fail@plt+0x2f30>
   145c0:	vmov	r0, r1, d8
   145c4:	bl	19c08 <__assert_fail@plt+0x8524>
   145c8:	mov	sl, r0
   145cc:	mov	r5, r1
   145d0:	mov	r0, #0
   145d4:	cmp	r4, #0
   145d8:	mov	r2, #0
   145dc:	bne	14604 <__assert_fail@plt+0x2f20>
   145e0:	mov	r0, sl
   145e4:	mov	r1, r5
   145e8:	bl	19a74 <__assert_fail@plt+0x8390>
   145ec:	vmov	d16, r0, r1
   145f0:	mov	r2, #0
   145f4:	mov	r0, #0
   145f8:	vcmp.f64	d8, d16
   145fc:	vmrs	APSR_nzcv, fpscr
   14600:	movwne	r0, #1
   14604:	adds	r0, r0, sl
   14608:	adc	r1, r2, r5
   1460c:	bl	19a74 <__assert_fail@plt+0x8390>
   14610:	vmov	d8, r0, r1
   14614:	vdiv.f64	d16, d8, d9
   14618:	ldr	sl, [sp, #36]	; 0x24
   1461c:	ldr	r7, [sp, #40]	; 0x28
   14620:	vstr	d16, [sp]
   14624:	movw	r3, #44057	; 0xac19
   14628:	mov	r0, sl
   1462c:	mov	r1, #1
   14630:	mvn	r2, #0
   14634:	movt	r3, #1
   14638:	bl	11564 <__sprintf_chk@plt>
   1463c:	mov	r0, sl
   14640:	bl	11534 <strlen@plt>
   14644:	mov	r2, r0
   14648:	mov	r5, #0
   1464c:	sub	r4, r8, r2
   14650:	mov	r1, sl
   14654:	mov	r0, r4
   14658:	bl	113a8 <memmove@plt>
   1465c:	sub	r5, r8, r5
   14660:	tst	r7, #4
   14664:	bne	14984 <__assert_fail@plt+0x32a0>
   14668:	tst	r7, #128	; 0x80
   1466c:	beq	14a9c <__assert_fail@plt+0x33b8>
   14670:	cmn	r6, #1
   14674:	bgt	14760 <__assert_fail@plt+0x307c>
   14678:	ldr	r0, [fp, #16]
   1467c:	mov	r6, #0
   14680:	subs	r0, r0, #2
   14684:	sbcs	r0, r9, #0
   14688:	bcc	14760 <__assert_fail@plt+0x307c>
   1468c:	ldr	r0, [sp, #44]	; 0x2c
   14690:	ldr	r1, [fp, #16]
   14694:	mov	r6, #1
   14698:	subs	r0, r0, r1
   1469c:	rscs	r0, r9, #0
   146a0:	bcs	14760 <__assert_fail@plt+0x307c>
   146a4:	ldr	r0, [sp, #44]	; 0x2c
   146a8:	ldr	r2, [fp, #16]
   146ac:	mov	r6, #2
   146b0:	umull	r1, r0, r0, r0
   146b4:	subs	r2, r1, r2
   146b8:	sbcs	r2, r0, r9
   146bc:	bcs	14760 <__assert_fail@plt+0x307c>
   146c0:	ldr	r3, [sp, #44]	; 0x2c
   146c4:	mov	r6, #3
   146c8:	umull	r1, r2, r1, r3
   146cc:	mla	r2, r0, r3, r2
   146d0:	ldr	r0, [fp, #16]
   146d4:	subs	r0, r1, r0
   146d8:	sbcs	r0, r2, r9
   146dc:	bcs	14760 <__assert_fail@plt+0x307c>
   146e0:	ldr	r3, [sp, #44]	; 0x2c
   146e4:	mov	r6, #4
   146e8:	umull	r0, r1, r1, r3
   146ec:	mla	r1, r2, r3, r1
   146f0:	ldr	r2, [fp, #16]
   146f4:	subs	r2, r0, r2
   146f8:	sbcs	r2, r1, r9
   146fc:	bcs	14760 <__assert_fail@plt+0x307c>
   14700:	ldr	r3, [sp, #44]	; 0x2c
   14704:	mov	r6, #5
   14708:	umull	r0, r2, r0, r3
   1470c:	mla	r1, r1, r3, r2
   14710:	ldr	r2, [fp, #16]
   14714:	subs	r2, r0, r2
   14718:	sbcs	r2, r1, r9
   1471c:	bcs	14760 <__assert_fail@plt+0x307c>
   14720:	ldr	r3, [sp, #44]	; 0x2c
   14724:	mov	r6, #6
   14728:	umull	r0, r2, r0, r3
   1472c:	mla	r1, r1, r3, r2
   14730:	ldr	r2, [fp, #16]
   14734:	subs	r2, r0, r2
   14738:	sbcs	r2, r1, r9
   1473c:	bcs	14760 <__assert_fail@plt+0x307c>
   14740:	ldr	r3, [sp, #44]	; 0x2c
   14744:	mov	r6, #7
   14748:	umull	r0, r2, r0, r3
   1474c:	mla	r1, r1, r3, r2
   14750:	ldr	r2, [fp, #16]
   14754:	subs	r0, r0, r2
   14758:	sbcs	r0, r1, r9
   1475c:	movwcc	r6, #8
   14760:	and	r0, r7, #256	; 0x100
   14764:	tst	r7, #64	; 0x40
   14768:	orrsne	r1, r6, r0
   1476c:	movne	r1, #32
   14770:	addne	r8, sl, #648	; 0x288
   14774:	strbne	r1, [sl, #647]	; 0x287
   14778:	cmp	r6, #0
   1477c:	beq	147a4 <__assert_fail@plt+0x30c0>
   14780:	ldr	r1, [sp, #28]
   14784:	cmp	r1, #0
   14788:	moveq	r1, #107	; 0x6b
   1478c:	cmpeq	r6, #1
   14790:	beq	147a0 <__assert_fail@plt+0x30bc>
   14794:	movw	r1, #44144	; 0xac70
   14798:	movt	r1, #1
   1479c:	ldrb	r1, [r1, r6]
   147a0:	strb	r1, [r8], #1
   147a4:	cmp	r0, #0
   147a8:	beq	14a9c <__assert_fail@plt+0x33b8>
   147ac:	ldr	r0, [sp, #28]
   147b0:	cmp	r0, #0
   147b4:	cmpne	r6, #0
   147b8:	movne	r0, #105	; 0x69
   147bc:	strbne	r0, [r8], #1
   147c0:	mov	r0, #66	; 0x42
   147c4:	strb	r0, [r8], #1
   147c8:	b	14a9c <__assert_fail@plt+0x33b8>
   147cc:	ldr	sl, [sp, #36]	; 0x24
   147d0:	ldr	r7, [sp, #40]	; 0x28
   147d4:	b	1464c <__assert_fail@plt+0x2f68>
   147d8:	ldr	r0, [sp, #32]
   147dc:	str	r0, [sp, #12]
   147e0:	b	14878 <__assert_fail@plt+0x3194>
   147e4:	cmp	r0, #0
   147e8:	bne	1482c <__assert_fail@plt+0x3148>
   147ec:	cmp	r7, #0
   147f0:	beq	1482c <__assert_fail@plt+0x3148>
   147f4:	adds	r0, sl, #1
   147f8:	add	r6, r6, #1
   147fc:	mov	r7, #0
   14800:	adc	r1, r9, #0
   14804:	cmp	r6, #10
   14808:	bne	1482c <__assert_fail@plt+0x3148>
   1480c:	rsbs	r2, r0, #9
   14810:	mov	r6, #0
   14814:	mov	sl, r0
   14818:	mov	r9, r1
   1481c:	mov	r7, #0
   14820:	rscs	r2, r1, #0
   14824:	ldr	r2, [sp, #44]	; 0x2c
   14828:	bcc	14ab8 <__assert_fail@plt+0x33d4>
   1482c:	ldr	r0, [sp, #40]	; 0x28
   14830:	tst	r0, #8
   14834:	beq	1484c <__assert_fail@plt+0x3168>
   14838:	cmp	r6, #0
   1483c:	bne	1484c <__assert_fail@plt+0x3168>
   14840:	ldr	r0, [sp, #32]
   14844:	str	r0, [sp, #12]
   14848:	b	14874 <__assert_fail@plt+0x3190>
   1484c:	ldr	r1, [sp, #36]	; 0x24
   14850:	ldr	r2, [sp, #48]	; 0x30
   14854:	add	r0, r6, #48	; 0x30
   14858:	strb	r0, [r1, #646]!	; 0x286
   1485c:	sub	r0, r1, r2
   14860:	ldr	r1, [sp, #16]
   14864:	str	r0, [sp, #12]
   14868:	bl	113cc <memcpy@plt>
   1486c:	ldr	r2, [sp, #44]	; 0x2c
   14870:	mov	r7, #0
   14874:	mov	r6, #0
   14878:	ldr	r0, [sp, #52]	; 0x34
   1487c:	cmp	r0, #0
   14880:	beq	148c0 <__assert_fail@plt+0x31dc>
   14884:	cmp	r0, #1
   14888:	bne	148b4 <__assert_fail@plt+0x31d0>
   1488c:	mov	r0, #0
   14890:	rsbs	r1, r7, #0
   14894:	and	r2, sl, #1
   14898:	eor	r1, r2, r1
   1489c:	sbc	r0, r0, #0
   148a0:	ldr	r2, [sp, #44]	; 0x2c
   148a4:	orrs	r0, r1, r0
   148a8:	addne	r6, r6, #1
   148ac:	cmp	r6, #5
   148b0:	bgt	148cc <__assert_fail@plt+0x31e8>
   148b4:	ldr	r7, [sp, #36]	; 0x24
   148b8:	ldr	r5, [sp, #40]	; 0x28
   148bc:	b	14928 <__assert_fail@plt+0x3244>
   148c0:	add	r0, r6, r7
   148c4:	cmp	r0, #1
   148c8:	blt	148b4 <__assert_fail@plt+0x31d0>
   148cc:	ldr	r7, [sp, #36]	; 0x24
   148d0:	ldr	r5, [sp, #40]	; 0x28
   148d4:	adds	sl, sl, #1
   148d8:	adc	r9, r9, #0
   148dc:	cmp	r8, #7
   148e0:	bgt	14928 <__assert_fail@plt+0x3244>
   148e4:	cmp	r4, #0
   148e8:	beq	14928 <__assert_fail@plt+0x3244>
   148ec:	eor	r0, sl, r2
   148f0:	orrs	r0, r0, r9
   148f4:	addeq	r8, r8, #1
   148f8:	moveq	r9, #0
   148fc:	moveq	sl, #1
   14900:	tsteq	r5, #8
   14904:	bne	14928 <__assert_fail@plt+0x3244>
   14908:	ldr	r0, [sp, #12]
   1490c:	mov	r1, #48	; 0x30
   14910:	ldr	r2, [sp, #48]	; 0x30
   14914:	strb	r1, [r0, #-1]!
   14918:	ldr	r1, [sp, #16]
   1491c:	sub	r0, r0, r2
   14920:	str	r0, [sp, #12]
   14924:	bl	113cc <memcpy@plt>
   14928:	ldr	r4, [sp, #12]
   1492c:	mov	r0, sl
   14930:	mov	r1, r9
   14934:	mov	r2, #10
   14938:	mov	r3, #0
   1493c:	bl	19bbc <__assert_fail@plt+0x84d8>
   14940:	add	r2, r0, r0, lsl #2
   14944:	sub	r2, sl, r2, lsl #1
   14948:	orr	r2, r2, #48	; 0x30
   1494c:	strb	r2, [r4, #-1]!
   14950:	rsbs	r2, sl, #9
   14954:	mov	sl, r0
   14958:	rscs	r2, r9, #0
   1495c:	mov	r9, r1
   14960:	bcc	1492c <__assert_fail@plt+0x3248>
   14964:	mov	r6, r8
   14968:	mov	sl, r7
   1496c:	mov	r7, r5
   14970:	ldr	r9, [fp, #20]
   14974:	ldr	r8, [sp, #32]
   14978:	ldr	r5, [sp, #12]
   1497c:	tst	r7, #4
   14980:	beq	14668 <__assert_fail@plt+0x2f84>
   14984:	ldr	r9, [sp, #20]
   14988:	str	r6, [sp, #16]
   1498c:	sub	r7, r5, r4
   14990:	mov	r0, r9
   14994:	bl	11534 <strlen@plt>
   14998:	str	r0, [sp, #52]	; 0x34
   1499c:	add	r0, sp, #56	; 0x38
   149a0:	mov	r1, r4
   149a4:	mov	r2, r7
   149a8:	bl	113cc <memcpy@plt>
   149ac:	ldr	r6, [sp, #24]
   149b0:	add	r0, sp, #56	; 0x38
   149b4:	ldrb	r8, [r6]
   149b8:	cmp	r8, #255	; 0xff
   149bc:	mov	sl, r8
   149c0:	moveq	sl, r7
   149c4:	cmp	r8, #0
   149c8:	mvneq	sl, #0
   149cc:	cmp	sl, r7
   149d0:	movhi	sl, r7
   149d4:	sub	r4, r5, sl
   149d8:	sub	r5, r7, sl
   149dc:	mov	r2, sl
   149e0:	add	r1, r0, r5
   149e4:	mov	r0, r4
   149e8:	bl	113cc <memcpy@plt>
   149ec:	cmp	r5, #0
   149f0:	beq	14a80 <__assert_fail@plt+0x339c>
   149f4:	clz	r0, r8
   149f8:	lsr	r8, r0, #5
   149fc:	ldr	r0, [sp, #52]	; 0x34
   14a00:	rsb	r0, r0, #0
   14a04:	str	r0, [sp, #48]	; 0x30
   14a08:	ldr	r0, [sp, #48]	; 0x30
   14a0c:	ldr	r2, [sp, #52]	; 0x34
   14a10:	mov	r1, r9
   14a14:	add	r4, r4, r0
   14a18:	mov	r0, r4
   14a1c:	bl	113cc <memcpy@plt>
   14a20:	tst	r8, #1
   14a24:	add	r0, sp, #56	; 0x38
   14a28:	addeq	r6, r6, #1
   14a2c:	mov	r8, r6
   14a30:	ldrb	r6, [r6]
   14a34:	cmp	r6, #255	; 0xff
   14a38:	mov	r7, r6
   14a3c:	moveq	r7, r5
   14a40:	cmp	r6, #0
   14a44:	moveq	r7, sl
   14a48:	cmp	r5, r7
   14a4c:	movcc	r7, r5
   14a50:	sub	r5, r5, r7
   14a54:	sub	r4, r4, r7
   14a58:	mov	r2, r7
   14a5c:	add	r1, r0, r5
   14a60:	mov	r0, r4
   14a64:	bl	113cc <memcpy@plt>
   14a68:	clz	r0, r6
   14a6c:	mov	r6, r8
   14a70:	cmp	r5, #0
   14a74:	mov	sl, r7
   14a78:	lsr	r8, r0, #5
   14a7c:	bne	14a08 <__assert_fail@plt+0x3324>
   14a80:	ldr	r8, [sp, #32]
   14a84:	ldr	sl, [sp, #36]	; 0x24
   14a88:	ldr	r7, [sp, #40]	; 0x28
   14a8c:	ldr	r9, [fp, #20]
   14a90:	ldr	r6, [sp, #16]
   14a94:	tst	r7, #128	; 0x80
   14a98:	bne	14670 <__assert_fail@plt+0x2f8c>
   14a9c:	mov	r0, #0
   14aa0:	strb	r0, [r8]
   14aa4:	mov	r0, r4
   14aa8:	sub	sp, fp, #48	; 0x30
   14aac:	vpop	{d8-d9}
   14ab0:	add	sp, sp, #4
   14ab4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ab8:	ldr	r0, [sp, #32]
   14abc:	mov	r7, #0
   14ac0:	mov	sl, #10
   14ac4:	mov	r9, #0
   14ac8:	str	r0, [sp, #12]
   14acc:	b	14878 <__assert_fail@plt+0x3194>
   14ad0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   14ad4:	add	fp, sp, #24
   14ad8:	sub	sp, sp, #8
   14adc:	mov	r4, r2
   14ae0:	mov	r8, r1
   14ae4:	cmp	r0, #0
   14ae8:	bne	14b14 <__assert_fail@plt+0x3430>
   14aec:	movw	r0, #44069	; 0xac25
   14af0:	movt	r0, #1
   14af4:	bl	114c8 <getenv@plt>
   14af8:	cmp	r0, #0
   14afc:	bne	14b14 <__assert_fail@plt+0x3430>
   14b00:	movw	r0, #44080	; 0xac30
   14b04:	movt	r0, #1
   14b08:	bl	114c8 <getenv@plt>
   14b0c:	cmp	r0, #0
   14b10:	beq	14c38 <__assert_fail@plt+0x3554>
   14b14:	mov	r6, r0
   14b18:	movw	r7, #44168	; 0xac88
   14b1c:	movw	r1, #44156	; 0xac7c
   14b20:	mov	r3, #4
   14b24:	ldrb	r5, [r6], #1
   14b28:	movt	r7, #1
   14b2c:	movt	r1, #1
   14b30:	mov	r2, r7
   14b34:	cmp	r5, #39	; 0x27
   14b38:	movne	r6, r0
   14b3c:	mov	r0, r6
   14b40:	bl	13594 <__assert_fail@plt+0x1eb0>
   14b44:	sub	r1, r5, #39	; 0x27
   14b48:	cmp	r0, #0
   14b4c:	clz	r1, r1
   14b50:	lsr	r1, r1, #5
   14b54:	lsl	r5, r1, #2
   14b58:	bmi	14b80 <__assert_fail@plt+0x349c>
   14b5c:	ldr	r0, [r7, r0, lsl #2]
   14b60:	mov	r2, #1
   14b64:	mov	r1, #0
   14b68:	str	r2, [r4]
   14b6c:	str	r1, [r4, #4]
   14b70:	orr	r1, r0, r5
   14b74:	mov	r0, #0
   14b78:	str	r1, [r8]
   14b7c:	b	14bb0 <__assert_fail@plt+0x34cc>
   14b80:	movw	r0, #44090	; 0xac3a
   14b84:	add	r1, sp, #4
   14b88:	mov	r2, #0
   14b8c:	mov	r3, r4
   14b90:	mov	r7, #0
   14b94:	movt	r0, #1
   14b98:	str	r0, [sp]
   14b9c:	mov	r0, r6
   14ba0:	bl	184ec <__assert_fail@plt+0x6e08>
   14ba4:	cmp	r0, #0
   14ba8:	beq	14bf4 <__assert_fail@plt+0x3510>
   14bac:	str	r7, [r8]
   14bb0:	ldrd	r2, [r4]
   14bb4:	orrs	r1, r2, r3
   14bb8:	beq	14bc4 <__assert_fail@plt+0x34e0>
   14bbc:	sub	sp, fp, #24
   14bc0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bc4:	movw	r0, #44126	; 0xac5e
   14bc8:	movt	r0, #1
   14bcc:	bl	114c8 <getenv@plt>
   14bd0:	cmp	r0, #0
   14bd4:	mov	r2, #512	; 0x200
   14bd8:	mov	r0, #4
   14bdc:	mov	r1, #0
   14be0:	movweq	r2, #1024	; 0x400
   14be4:	str	r2, [r4]
   14be8:	str	r1, [r4, #4]
   14bec:	sub	sp, fp, #24
   14bf0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   14bf4:	ldrb	r0, [r6]
   14bf8:	sub	r0, r0, #48	; 0x30
   14bfc:	uxtb	r0, r0
   14c00:	cmp	r0, #10
   14c04:	bcc	14c30 <__assert_fail@plt+0x354c>
   14c08:	ldr	r0, [sp, #4]
   14c0c:	cmp	r0, r6
   14c10:	beq	14c60 <__assert_fail@plt+0x357c>
   14c14:	ldrb	r2, [r6, #1]
   14c18:	add	r1, r6, #1
   14c1c:	mov	r6, r1
   14c20:	sub	r2, r2, #48	; 0x30
   14c24:	uxtb	r2, r2
   14c28:	cmp	r2, #10
   14c2c:	bcs	14c0c <__assert_fail@plt+0x3528>
   14c30:	mov	r1, r5
   14c34:	b	14b74 <__assert_fail@plt+0x3490>
   14c38:	movw	r0, #44126	; 0xac5e
   14c3c:	movt	r0, #1
   14c40:	bl	114c8 <getenv@plt>
   14c44:	cmp	r0, #0
   14c48:	mov	r2, #512	; 0x200
   14c4c:	mov	r1, #0
   14c50:	movweq	r2, #1024	; 0x400
   14c54:	str	r2, [r4]
   14c58:	str	r1, [r4, #4]
   14c5c:	b	14b74 <__assert_fail@plt+0x3490>
   14c60:	ldrb	r2, [r0, #-1]
   14c64:	orr	r1, r5, #384	; 0x180
   14c68:	cmp	r2, #66	; 0x42
   14c6c:	mov	r2, r1
   14c70:	orrne	r2, r5, #128	; 0x80
   14c74:	bne	14c88 <__assert_fail@plt+0x35a4>
   14c78:	ldrb	r0, [r0, #-2]
   14c7c:	cmp	r0, #105	; 0x69
   14c80:	orreq	r1, r2, #32
   14c84:	b	14b74 <__assert_fail@plt+0x3490>
   14c88:	orr	r1, r2, #32
   14c8c:	b	14b74 <__assert_fail@plt+0x3490>
   14c90:	push	{r4, r5, r6, sl, fp, lr}
   14c94:	add	fp, sp, #16
   14c98:	mov	r5, r0
   14c9c:	mov	r0, #0
   14ca0:	mov	r4, r1
   14ca4:	add	r6, r2, #19
   14ca8:	strb	r0, [r2, #20]
   14cac:	mov	r0, r5
   14cb0:	mov	r1, r4
   14cb4:	mov	r2, #10
   14cb8:	mov	r3, #0
   14cbc:	bl	19bbc <__assert_fail@plt+0x84d8>
   14cc0:	add	r2, r0, r0, lsl #2
   14cc4:	sub	r2, r5, r2, lsl #1
   14cc8:	orr	r2, r2, #48	; 0x30
   14ccc:	strb	r2, [r6], #-1
   14cd0:	rsbs	r2, r5, #9
   14cd4:	mov	r5, r0
   14cd8:	rscs	r2, r4, #0
   14cdc:	mov	r4, r1
   14ce0:	bcc	14cac <__assert_fail@plt+0x35c8>
   14ce4:	add	r0, r6, #1
   14ce8:	pop	{r4, r5, r6, sl, fp, pc}
   14cec:	push	{r4, r5, fp, lr}
   14cf0:	add	fp, sp, #8
   14cf4:	cmp	r0, #0
   14cf8:	beq	14d8c <__assert_fail@plt+0x36a8>
   14cfc:	mov	r1, #47	; 0x2f
   14d00:	mov	r4, r0
   14d04:	bl	11624 <strrchr@plt>
   14d08:	cmp	r0, #0
   14d0c:	mov	r5, r4
   14d10:	addne	r5, r0, #1
   14d14:	sub	r0, r5, r4
   14d18:	cmp	r0, #7
   14d1c:	blt	14d70 <__assert_fail@plt+0x368c>
   14d20:	movw	r1, #44232	; 0xacc8
   14d24:	sub	r0, r5, #7
   14d28:	mov	r2, #7
   14d2c:	movt	r1, #1
   14d30:	bl	116b4 <strncmp@plt>
   14d34:	cmp	r0, #0
   14d38:	bne	14d70 <__assert_fail@plt+0x368c>
   14d3c:	movw	r1, #44240	; 0xacd0
   14d40:	mov	r0, r5
   14d44:	mov	r2, #3
   14d48:	movt	r1, #1
   14d4c:	bl	116b4 <strncmp@plt>
   14d50:	cmp	r0, #0
   14d54:	beq	14d60 <__assert_fail@plt+0x367c>
   14d58:	mov	r4, r5
   14d5c:	b	14d70 <__assert_fail@plt+0x368c>
   14d60:	movw	r0, #49568	; 0xc1a0
   14d64:	add	r4, r5, #3
   14d68:	movt	r0, #2
   14d6c:	str	r4, [r0]
   14d70:	movw	r0, #49572	; 0xc1a4
   14d74:	movt	r0, #2
   14d78:	str	r4, [r0]
   14d7c:	movw	r0, #49616	; 0xc1d0
   14d80:	movt	r0, #2
   14d84:	str	r4, [r0]
   14d88:	pop	{r4, r5, fp, pc}
   14d8c:	movw	r0, #49584	; 0xc1b0
   14d90:	mov	r1, #55	; 0x37
   14d94:	mov	r2, #1
   14d98:	movt	r0, #2
   14d9c:	ldr	r3, [r0]
   14da0:	movw	r0, #44176	; 0xac90
   14da4:	movt	r0, #1
   14da8:	bl	1145c <fwrite@plt>
   14dac:	bl	116cc <abort@plt>
   14db0:	push	{r4, r5, r6, sl, fp, lr}
   14db4:	add	fp, sp, #16
   14db8:	mov	r4, r0
   14dbc:	movw	r0, #49624	; 0xc1d8
   14dc0:	movt	r0, #2
   14dc4:	cmp	r4, #0
   14dc8:	moveq	r4, r0
   14dcc:	bl	11558 <__errno_location@plt>
   14dd0:	ldr	r6, [r0]
   14dd4:	mov	r5, r0
   14dd8:	mov	r0, r4
   14ddc:	mov	r1, #48	; 0x30
   14de0:	bl	182d0 <__assert_fail@plt+0x6bec>
   14de4:	str	r6, [r5]
   14de8:	pop	{r4, r5, r6, sl, fp, pc}
   14dec:	movw	r1, #49624	; 0xc1d8
   14df0:	cmp	r0, #0
   14df4:	movt	r1, #2
   14df8:	movne	r1, r0
   14dfc:	ldr	r0, [r1]
   14e00:	bx	lr
   14e04:	movw	r2, #49624	; 0xc1d8
   14e08:	cmp	r0, #0
   14e0c:	movt	r2, #2
   14e10:	movne	r2, r0
   14e14:	str	r1, [r2]
   14e18:	bx	lr
   14e1c:	movw	r3, #49624	; 0xc1d8
   14e20:	cmp	r0, #0
   14e24:	and	r2, r2, #1
   14e28:	movt	r3, #2
   14e2c:	movne	r3, r0
   14e30:	ubfx	r0, r1, #5, #3
   14e34:	and	r1, r1, #31
   14e38:	add	ip, r3, r0, lsl #2
   14e3c:	mov	r0, #1
   14e40:	ldr	r3, [ip, #8]
   14e44:	and	r0, r0, r3, lsr r1
   14e48:	eor	r2, r0, r2
   14e4c:	eor	r1, r3, r2, lsl r1
   14e50:	str	r1, [ip, #8]
   14e54:	bx	lr
   14e58:	movw	r2, #49624	; 0xc1d8
   14e5c:	cmp	r0, #0
   14e60:	movt	r2, #2
   14e64:	movne	r2, r0
   14e68:	ldr	r0, [r2, #4]
   14e6c:	str	r1, [r2, #4]
   14e70:	bx	lr
   14e74:	push	{fp, lr}
   14e78:	mov	fp, sp
   14e7c:	movw	r3, #49624	; 0xc1d8
   14e80:	cmp	r0, #0
   14e84:	movt	r3, #2
   14e88:	movne	r3, r0
   14e8c:	cmp	r1, #0
   14e90:	mov	r0, #10
   14e94:	cmpne	r2, #0
   14e98:	str	r0, [r3]
   14e9c:	bne	14ea4 <__assert_fail@plt+0x37c0>
   14ea0:	bl	116cc <abort@plt>
   14ea4:	str	r1, [r3, #40]	; 0x28
   14ea8:	str	r2, [r3, #44]	; 0x2c
   14eac:	pop	{fp, pc}
   14eb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14eb4:	add	fp, sp, #28
   14eb8:	sub	sp, sp, #20
   14ebc:	mov	r7, r0
   14ec0:	ldr	r0, [fp, #8]
   14ec4:	movw	r5, #49624	; 0xc1d8
   14ec8:	mov	r8, r3
   14ecc:	mov	r9, r2
   14ed0:	mov	sl, r1
   14ed4:	movt	r5, #2
   14ed8:	cmp	r0, #0
   14edc:	movne	r5, r0
   14ee0:	bl	11558 <__errno_location@plt>
   14ee4:	ldr	r2, [r5, #40]	; 0x28
   14ee8:	ldr	r3, [r5, #44]	; 0x2c
   14eec:	mov	r4, r0
   14ef0:	ldm	r5, {r0, r1}
   14ef4:	add	r5, r5, #8
   14ef8:	ldr	r6, [r4]
   14efc:	stm	sp, {r0, r1, r5}
   14f00:	mov	r0, r7
   14f04:	mov	r1, sl
   14f08:	str	r2, [sp, #12]
   14f0c:	str	r3, [sp, #16]
   14f10:	mov	r2, r9
   14f14:	mov	r3, r8
   14f18:	bl	14f28 <__assert_fail@plt+0x3844>
   14f1c:	str	r6, [r4]
   14f20:	sub	sp, fp, #28
   14f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f2c:	add	fp, sp, #28
   14f30:	sub	sp, sp, #156	; 0x9c
   14f34:	mov	r5, r0
   14f38:	add	r0, r2, #1
   14f3c:	mov	r6, r1
   14f40:	mov	sl, r3
   14f44:	str	r2, [fp, #-80]	; 0xffffffb0
   14f48:	str	r0, [sp, #72]	; 0x48
   14f4c:	ldr	r0, [fp, #12]
   14f50:	and	r1, r0, #1
   14f54:	str	r1, [sp, #36]	; 0x24
   14f58:	and	r1, r0, #4
   14f5c:	str	r1, [sp, #32]
   14f60:	ubfx	r9, r0, #1, #1
   14f64:	bl	11480 <__ctype_get_mb_cur_max@plt>
   14f68:	str	r0, [sp, #40]	; 0x28
   14f6c:	ldr	r0, [fp, #24]
   14f70:	ldr	r7, [fp, #8]
   14f74:	mov	r1, #0
   14f78:	str	r5, [fp, #-84]	; 0xffffffac
   14f7c:	str	r1, [fp, #-56]	; 0xffffffc8
   14f80:	mov	r1, #0
   14f84:	str	r1, [sp, #60]	; 0x3c
   14f88:	mov	r1, #1
   14f8c:	str	r1, [fp, #-48]	; 0xffffffd0
   14f90:	str	r0, [sp, #80]	; 0x50
   14f94:	ldr	r0, [fp, #20]
   14f98:	str	r0, [sp, #76]	; 0x4c
   14f9c:	mov	r0, #0
   14fa0:	str	r0, [sp, #56]	; 0x38
   14fa4:	mov	r0, #0
   14fa8:	str	r0, [fp, #-88]	; 0xffffffa8
   14fac:	mov	r0, #0
   14fb0:	str	r0, [fp, #-72]	; 0xffffffb8
   14fb4:	mov	r0, #0
   14fb8:	cmp	r7, #10
   14fbc:	bhi	15f50 <__assert_fail@plt+0x486c>
   14fc0:	add	r1, pc, #24
   14fc4:	ldr	ip, [fp, #-80]	; 0xffffffb0
   14fc8:	mov	r4, r6
   14fcc:	mov	r8, #0
   14fd0:	mov	r2, #1
   14fd4:	mov	r3, #0
   14fd8:	mov	lr, sl
   14fdc:	ldr	pc, [r1, r7, lsl #2]
   14fe0:	andeq	r5, r1, r4, lsr #1
   14fe4:	strdeq	r5, [r1], -r8
   14fe8:	strheq	r5, [r1], -r8
   14fec:	muleq	r1, ip, r0
   14ff0:	andeq	r5, r1, ip, ror #1
   14ff4:	andeq	r5, r1, r0, lsr #2
   14ff8:	andeq	r5, r1, r8, asr #1
   14ffc:	andeq	r5, r1, r4, lsr #3
   15000:	andeq	r5, r1, ip
   15004:	andeq	r5, r1, ip
   15008:	andeq	r5, r1, r4, lsr r0
   1500c:	movw	r0, #44322	; 0xad22
   15010:	mov	r1, r7
   15014:	movt	r0, #1
   15018:	bl	16958 <__assert_fail@plt+0x5274>
   1501c:	str	r0, [sp, #76]	; 0x4c
   15020:	movw	r0, #44324	; 0xad24
   15024:	mov	r1, r7
   15028:	movt	r0, #1
   1502c:	bl	16958 <__assert_fail@plt+0x5274>
   15030:	str	r0, [sp, #80]	; 0x50
   15034:	mov	r8, #0
   15038:	tst	r9, #1
   1503c:	bne	15074 <__assert_fail@plt+0x3990>
   15040:	ldr	r0, [sp, #76]	; 0x4c
   15044:	ldrb	r0, [r0]
   15048:	cmp	r0, #0
   1504c:	beq	15074 <__assert_fail@plt+0x3990>
   15050:	ldr	r1, [sp, #76]	; 0x4c
   15054:	mov	r8, #0
   15058:	add	r1, r1, #1
   1505c:	cmp	r8, r4
   15060:	strbcc	r0, [r5, r8]
   15064:	ldrb	r0, [r1, r8]
   15068:	add	r8, r8, #1
   1506c:	cmp	r0, #0
   15070:	bne	1505c <__assert_fail@plt+0x3978>
   15074:	ldr	r6, [sp, #80]	; 0x50
   15078:	mov	r0, r6
   1507c:	bl	11534 <strlen@plt>
   15080:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15084:	str	r0, [fp, #-72]	; 0xffffffb8
   15088:	str	r6, [fp, #-88]	; 0xffffffa8
   1508c:	mov	r2, #1
   15090:	mov	r3, r9
   15094:	mov	lr, sl
   15098:	b	151a4 <__assert_fail@plt+0x3ac0>
   1509c:	mov	r0, #1
   150a0:	b	150f8 <__assert_fail@plt+0x3a14>
   150a4:	mov	r7, #0
   150a8:	mov	r8, #0
   150ac:	mov	r2, r0
   150b0:	mov	r3, #0
   150b4:	b	151a4 <__assert_fail@plt+0x3ac0>
   150b8:	tst	r9, #1
   150bc:	bne	150f8 <__assert_fail@plt+0x3a14>
   150c0:	mov	r2, r0
   150c4:	b	15150 <__assert_fail@plt+0x3a6c>
   150c8:	mov	r0, #1
   150cc:	mov	r8, #0
   150d0:	mov	r7, #5
   150d4:	mov	r2, #1
   150d8:	str	r0, [fp, #-72]	; 0xffffffb8
   150dc:	movw	r0, #44320	; 0xad20
   150e0:	movt	r0, #1
   150e4:	str	r0, [fp, #-88]	; 0xffffffa8
   150e8:	b	15118 <__assert_fail@plt+0x3a34>
   150ec:	mov	r2, #1
   150f0:	tst	r9, #1
   150f4:	beq	15150 <__assert_fail@plt+0x3a6c>
   150f8:	mov	r1, #1
   150fc:	mov	r8, #0
   15100:	mov	r7, #2
   15104:	mov	r2, r0
   15108:	str	r1, [fp, #-72]	; 0xffffffb8
   1510c:	movw	r1, #44324	; 0xad24
   15110:	movt	r1, #1
   15114:	str	r1, [fp, #-88]	; 0xffffffa8
   15118:	mov	r3, #1
   1511c:	b	151a4 <__assert_fail@plt+0x3ac0>
   15120:	tst	r9, #1
   15124:	beq	15174 <__assert_fail@plt+0x3a90>
   15128:	mov	r0, #1
   1512c:	mov	r8, #0
   15130:	mov	r2, #1
   15134:	mov	r3, #1
   15138:	mov	r7, #5
   1513c:	str	r0, [fp, #-72]	; 0xffffffb8
   15140:	movw	r0, #44320	; 0xad20
   15144:	movt	r0, #1
   15148:	str	r0, [fp, #-88]	; 0xffffffa8
   1514c:	b	151a4 <__assert_fail@plt+0x3ac0>
   15150:	cmp	r4, #0
   15154:	mov	r8, #1
   15158:	mov	r3, #0
   1515c:	mov	r7, #2
   15160:	movne	r0, #39	; 0x27
   15164:	strbne	r0, [r5]
   15168:	movw	r0, #44324	; 0xad24
   1516c:	movt	r0, #1
   15170:	b	15198 <__assert_fail@plt+0x3ab4>
   15174:	cmp	r4, #0
   15178:	mov	r8, #1
   1517c:	mov	r2, #1
   15180:	mov	r7, #5
   15184:	mov	r3, #0
   15188:	movne	r0, #34	; 0x22
   1518c:	strbne	r0, [r5]
   15190:	movw	r0, #44320	; 0xad20
   15194:	movt	r0, #1
   15198:	str	r0, [fp, #-88]	; 0xffffffa8
   1519c:	mov	r0, #1
   151a0:	str	r0, [fp, #-72]	; 0xffffffb8
   151a4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   151a8:	eor	r6, r3, #1
   151ac:	str	r7, [fp, #-68]	; 0xffffffbc
   151b0:	str	r3, [fp, #-76]	; 0xffffffb4
   151b4:	str	r2, [sp, #84]	; 0x54
   151b8:	str	r6, [sp, #92]	; 0x5c
   151bc:	cmp	r0, #0
   151c0:	movwne	r0, #1
   151c4:	and	r1, r0, r3
   151c8:	and	r1, r2, r1
   151cc:	str	r1, [sp, #48]	; 0x30
   151d0:	sub	r1, r7, #2
   151d4:	clz	r1, r1
   151d8:	lsr	r1, r1, #5
   151dc:	and	r1, r1, r3
   151e0:	str	r1, [sp, #64]	; 0x40
   151e4:	subs	r1, r7, #2
   151e8:	mov	r7, #0
   151ec:	movwne	r1, #1
   151f0:	orr	r6, r1, r6
   151f4:	and	r1, r1, r2
   151f8:	and	r0, r0, r1
   151fc:	str	r6, [sp, #68]	; 0x44
   15200:	str	r0, [fp, #-60]	; 0xffffffc4
   15204:	orr	r0, r1, r3
   15208:	ldr	r1, [fp, #16]
   1520c:	eor	r0, r0, #1
   15210:	clz	r1, r1
   15214:	lsr	r1, r1, #5
   15218:	orr	r0, r1, r0
   1521c:	str	r0, [fp, #-64]	; 0xffffffc0
   15220:	eor	r0, r2, #1
   15224:	str	r0, [sp, #52]	; 0x34
   15228:	cmn	lr, #1
   1522c:	beq	1523c <__assert_fail@plt+0x3b58>
   15230:	cmp	r7, lr
   15234:	bne	15248 <__assert_fail@plt+0x3b64>
   15238:	b	15d90 <__assert_fail@plt+0x46ac>
   1523c:	ldrb	r0, [ip, r7]
   15240:	cmp	r0, #0
   15244:	beq	15d98 <__assert_fail@plt+0x46b4>
   15248:	ldr	r0, [fp, #-60]	; 0xffffffc4
   1524c:	mov	sl, #0
   15250:	cmp	r0, #0
   15254:	beq	1528c <__assert_fail@plt+0x3ba8>
   15258:	ldr	r0, [fp, #-72]	; 0xffffffb8
   1525c:	add	r5, r7, r0
   15260:	cmp	r0, #2
   15264:	bcc	15280 <__assert_fail@plt+0x3b9c>
   15268:	cmn	lr, #1
   1526c:	bne	15280 <__assert_fail@plt+0x3b9c>
   15270:	mov	r0, ip
   15274:	bl	11534 <strlen@plt>
   15278:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1527c:	mov	lr, r0
   15280:	cmp	r5, lr
   15284:	bls	15294 <__assert_fail@plt+0x3bb0>
   15288:	ldr	r5, [fp, #-84]	; 0xffffffac
   1528c:	mov	r0, #0
   15290:	b	152e0 <__assert_fail@plt+0x3bfc>
   15294:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15298:	ldr	r2, [fp, #-72]	; 0xffffffb8
   1529c:	add	r0, ip, r7
   152a0:	mov	r6, r4
   152a4:	mov	r4, lr
   152a8:	bl	11528 <bcmp@plt>
   152ac:	ldr	r2, [sp, #92]	; 0x5c
   152b0:	cmp	r0, #0
   152b4:	ldr	r5, [fp, #-84]	; 0xffffffac
   152b8:	mov	r1, r0
   152bc:	movwne	r1, #1
   152c0:	orr	r1, r1, r2
   152c4:	tst	r1, #1
   152c8:	beq	15e20 <__assert_fail@plt+0x473c>
   152cc:	ldr	ip, [fp, #-80]	; 0xffffffb0
   152d0:	clz	r0, r0
   152d4:	mov	lr, r4
   152d8:	mov	r4, r6
   152dc:	lsr	r0, r0, #5
   152e0:	str	r0, [fp, #-52]	; 0xffffffcc
   152e4:	ldrb	r6, [ip, r7]
   152e8:	cmp	r6, #126	; 0x7e
   152ec:	bhi	1581c <__assert_fail@plt+0x4138>
   152f0:	add	r3, pc, #16
   152f4:	mov	r9, #1
   152f8:	mov	r2, #110	; 0x6e
   152fc:	mov	r0, #97	; 0x61
   15300:	mov	r1, #0
   15304:	ldr	pc, [r3, r6, lsl #2]
   15308:	andeq	r5, r1, ip, ror r6
   1530c:	andeq	r5, r1, ip, lsl r8
   15310:	andeq	r5, r1, ip, lsl r8
   15314:	andeq	r5, r1, ip, lsl r8
   15318:	andeq	r5, r1, ip, lsl r8
   1531c:	andeq	r5, r1, ip, lsl r8
   15320:	andeq	r5, r1, ip, lsl r8
   15324:	strdeq	r5, [r1], -r8
   15328:	andeq	r5, r1, ip, asr r6
   1532c:	andeq	r5, r1, r4, asr r6
   15330:	andeq	r5, r1, r8, ror #12
   15334:	andeq	r5, r1, r4, lsl #15
   15338:	andeq	r5, r1, ip, asr #12
   1533c:	andeq	r5, r1, r4, ror #12
   15340:	andeq	r5, r1, ip, lsl r8
   15344:	andeq	r5, r1, ip, lsl r8
   15348:	andeq	r5, r1, ip, lsl r8
   1534c:	andeq	r5, r1, ip, lsl r8
   15350:	andeq	r5, r1, ip, lsl r8
   15354:	andeq	r5, r1, ip, lsl r8
   15358:	andeq	r5, r1, ip, lsl r8
   1535c:	andeq	r5, r1, ip, lsl r8
   15360:	andeq	r5, r1, ip, lsl r8
   15364:	andeq	r5, r1, ip, lsl r8
   15368:	andeq	r5, r1, ip, lsl r8
   1536c:	andeq	r5, r1, ip, lsl r8
   15370:	andeq	r5, r1, ip, lsl r8
   15374:	andeq	r5, r1, ip, lsl r8
   15378:	andeq	r5, r1, ip, lsl r8
   1537c:	andeq	r5, r1, ip, lsl r8
   15380:	andeq	r5, r1, ip, lsl r8
   15384:	andeq	r5, r1, ip, lsl r8
   15388:	andeq	r5, r1, r0, lsl #12
   1538c:	andeq	r5, r1, r4, lsl #12
   15390:	andeq	r5, r1, r4, lsl #12
   15394:	andeq	r5, r1, ip, ror #11
   15398:	andeq	r5, r1, r4, lsl #12
   1539c:	andeq	r5, r1, r4, lsl #10
   153a0:	andeq	r5, r1, r4, lsl #12
   153a4:	andeq	r5, r1, ip, lsl #15
   153a8:	andeq	r5, r1, r4, lsl #12
   153ac:	andeq	r5, r1, r4, lsl #12
   153b0:	andeq	r5, r1, r4, lsl #12
   153b4:	andeq	r5, r1, r4, lsl #10
   153b8:	andeq	r5, r1, r4, lsl #10
   153bc:	andeq	r5, r1, r4, lsl #10
   153c0:	andeq	r5, r1, r4, lsl #10
   153c4:	andeq	r5, r1, r4, lsl #10
   153c8:	andeq	r5, r1, r4, lsl #10
   153cc:	andeq	r5, r1, r4, lsl #10
   153d0:	andeq	r5, r1, r4, lsl #10
   153d4:	andeq	r5, r1, r4, lsl #10
   153d8:	andeq	r5, r1, r4, lsl #10
   153dc:	andeq	r5, r1, r4, lsl #10
   153e0:	andeq	r5, r1, r4, lsl #10
   153e4:	andeq	r5, r1, r4, lsl #10
   153e8:	andeq	r5, r1, r4, lsl #10
   153ec:	andeq	r5, r1, r4, lsl #10
   153f0:	andeq	r5, r1, r4, lsl #10
   153f4:	andeq	r5, r1, r4, lsl #12
   153f8:	andeq	r5, r1, r4, lsl #12
   153fc:	andeq	r5, r1, r4, lsl #12
   15400:	andeq	r5, r1, r4, lsl #12
   15404:	andeq	r5, r1, r4, asr r7
   15408:	andeq	r5, r1, ip, lsl r8
   1540c:	andeq	r5, r1, r4, lsl #10
   15410:	andeq	r5, r1, r4, lsl #10
   15414:	andeq	r5, r1, r4, lsl #10
   15418:	andeq	r5, r1, r4, lsl #10
   1541c:	andeq	r5, r1, r4, lsl #10
   15420:	andeq	r5, r1, r4, lsl #10
   15424:	andeq	r5, r1, r4, lsl #10
   15428:	andeq	r5, r1, r4, lsl #10
   1542c:	andeq	r5, r1, r4, lsl #10
   15430:	andeq	r5, r1, r4, lsl #10
   15434:	andeq	r5, r1, r4, lsl #10
   15438:	andeq	r5, r1, r4, lsl #10
   1543c:	andeq	r5, r1, r4, lsl #10
   15440:	andeq	r5, r1, r4, lsl #10
   15444:	andeq	r5, r1, r4, lsl #10
   15448:	andeq	r5, r1, r4, lsl #10
   1544c:	andeq	r5, r1, r4, lsl #10
   15450:	andeq	r5, r1, r4, lsl #10
   15454:	andeq	r5, r1, r4, lsl #10
   15458:	andeq	r5, r1, r4, lsl #10
   1545c:	andeq	r5, r1, r4, lsl #10
   15460:	andeq	r5, r1, r4, lsl #10
   15464:	andeq	r5, r1, r4, lsl #10
   15468:	andeq	r5, r1, r4, lsl #10
   1546c:	andeq	r5, r1, r4, lsl #10
   15470:	andeq	r5, r1, r4, lsl #10
   15474:	andeq	r5, r1, r4, lsl #12
   15478:	andeq	r5, r1, ip, lsr #12
   1547c:	andeq	r5, r1, r4, lsl #10
   15480:	andeq	r5, r1, r4, lsl #12
   15484:	andeq	r5, r1, r4, lsl #10
   15488:	andeq	r5, r1, r4, lsl #12
   1548c:	andeq	r5, r1, r4, lsl #10
   15490:	andeq	r5, r1, r4, lsl #10
   15494:	andeq	r5, r1, r4, lsl #10
   15498:	andeq	r5, r1, r4, lsl #10
   1549c:	andeq	r5, r1, r4, lsl #10
   154a0:	andeq	r5, r1, r4, lsl #10
   154a4:	andeq	r5, r1, r4, lsl #10
   154a8:	andeq	r5, r1, r4, lsl #10
   154ac:	andeq	r5, r1, r4, lsl #10
   154b0:	andeq	r5, r1, r4, lsl #10
   154b4:	andeq	r5, r1, r4, lsl #10
   154b8:	andeq	r5, r1, r4, lsl #10
   154bc:	andeq	r5, r1, r4, lsl #10
   154c0:	andeq	r5, r1, r4, lsl #10
   154c4:	andeq	r5, r1, r4, lsl #10
   154c8:	andeq	r5, r1, r4, lsl #10
   154cc:	andeq	r5, r1, r4, lsl #10
   154d0:	andeq	r5, r1, r4, lsl #10
   154d4:	andeq	r5, r1, r4, lsl #10
   154d8:	andeq	r5, r1, r4, lsl #10
   154dc:	andeq	r5, r1, r4, lsl #10
   154e0:	andeq	r5, r1, r4, lsl #10
   154e4:	andeq	r5, r1, r4, lsl #10
   154e8:	andeq	r5, r1, r4, lsl #10
   154ec:	andeq	r5, r1, r4, lsl #10
   154f0:	andeq	r5, r1, r4, lsl #10
   154f4:	andeq	r5, r1, r0, asr #11
   154f8:	andeq	r5, r1, r4, lsl #12
   154fc:	andeq	r5, r1, r0, asr #11
   15500:	andeq	r5, r1, ip, ror #11
   15504:	ldr	r0, [fp, #-64]	; 0xffffffc0
   15508:	tst	r0, #1
   1550c:	bne	15538 <__assert_fail@plt+0x3e54>
   15510:	ldr	r1, [fp, #16]
   15514:	ubfx	r0, r6, #5, #3
   15518:	mov	r2, #1
   1551c:	ldr	r0, [r1, r0, lsl #2]
   15520:	and	r1, r6, #31
   15524:	tst	r0, r2, lsl r1
   15528:	beq	15538 <__assert_fail@plt+0x3e54>
   1552c:	mov	r0, r6
   15530:	mov	r1, r9
   15534:	b	1554c <__assert_fail@plt+0x3e68>
   15538:	ldr	r0, [fp, #-52]	; 0xffffffcc
   1553c:	mov	r1, r9
   15540:	cmp	r0, #0
   15544:	mov	r0, r6
   15548:	beq	1588c <__assert_fail@plt+0x41a8>
   1554c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15550:	tst	r2, #1
   15554:	bne	15e5c <__assert_fail@plt+0x4778>
   15558:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1555c:	ldr	r3, [fp, #-56]	; 0xffffffc8
   15560:	subs	r2, r2, #2
   15564:	movwne	r2, #1
   15568:	orr	r2, r2, r3
   1556c:	tst	r2, #1
   15570:	bne	155ac <__assert_fail@plt+0x3ec8>
   15574:	cmp	r8, r4
   15578:	movcc	r2, #39	; 0x27
   1557c:	strbcc	r2, [r5, r8]
   15580:	add	r2, r8, #1
   15584:	cmp	r2, r4
   15588:	movcc	r3, #36	; 0x24
   1558c:	strbcc	r3, [r5, r2]
   15590:	add	r2, r8, #2
   15594:	add	r8, r8, #3
   15598:	cmp	r2, r4
   1559c:	movcc	r3, #39	; 0x27
   155a0:	strbcc	r3, [r5, r2]
   155a4:	mov	r2, #1
   155a8:	str	r2, [fp, #-56]	; 0xffffffc8
   155ac:	cmp	r8, r4
   155b0:	movcc	r2, #92	; 0x5c
   155b4:	strbcc	r2, [r5, r8]
   155b8:	add	r8, r8, #1
   155bc:	b	158d0 <__assert_fail@plt+0x41ec>
   155c0:	cmp	lr, #1
   155c4:	beq	155ec <__assert_fail@plt+0x3f08>
   155c8:	mov	r9, #0
   155cc:	cmn	lr, #1
   155d0:	bne	155f8 <__assert_fail@plt+0x3f14>
   155d4:	ldrb	r0, [ip, #1]
   155d8:	cmp	r0, #0
   155dc:	beq	155ec <__assert_fail@plt+0x3f08>
   155e0:	mvn	lr, #0
   155e4:	mov	sl, #0
   155e8:	b	15504 <__assert_fail@plt+0x3e20>
   155ec:	mov	r9, #0
   155f0:	cmp	r7, #0
   155f4:	beq	15600 <__assert_fail@plt+0x3f1c>
   155f8:	mov	sl, #0
   155fc:	b	15504 <__assert_fail@plt+0x3e20>
   15600:	mov	r1, #1
   15604:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15608:	cmp	r0, #2
   1560c:	bne	15624 <__assert_fail@plt+0x3f40>
   15610:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15614:	mov	r9, r1
   15618:	tst	r0, #1
   1561c:	beq	15504 <__assert_fail@plt+0x3e20>
   15620:	b	15e5c <__assert_fail@plt+0x4778>
   15624:	mov	r9, r1
   15628:	b	15504 <__assert_fail@plt+0x3e20>
   1562c:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15630:	cmp	r0, #2
   15634:	bne	15870 <__assert_fail@plt+0x418c>
   15638:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1563c:	tst	r0, #1
   15640:	bne	15e5c <__assert_fail@plt+0x4778>
   15644:	mov	sl, #0
   15648:	b	15884 <__assert_fail@plt+0x41a0>
   1564c:	mov	r0, #102	; 0x66
   15650:	b	158f8 <__assert_fail@plt+0x4214>
   15654:	mov	r2, #116	; 0x74
   15658:	b	15668 <__assert_fail@plt+0x3f84>
   1565c:	mov	r0, #98	; 0x62
   15660:	b	158f8 <__assert_fail@plt+0x4214>
   15664:	mov	r2, #114	; 0x72
   15668:	ldr	r0, [sp, #68]	; 0x44
   1566c:	tst	r0, #1
   15670:	mov	r0, r2
   15674:	bne	158f8 <__assert_fail@plt+0x4214>
   15678:	b	15e5c <__assert_fail@plt+0x4778>
   1567c:	ldr	r0, [sp, #84]	; 0x54
   15680:	tst	r0, #1
   15684:	beq	15914 <__assert_fail@plt+0x4230>
   15688:	ldr	r0, [fp, #-76]	; 0xffffffb4
   1568c:	tst	r0, #1
   15690:	bne	15f48 <__assert_fail@plt+0x4864>
   15694:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15698:	ldr	r1, [fp, #-56]	; 0xffffffc8
   1569c:	subs	r0, r0, #2
   156a0:	movwne	r0, #1
   156a4:	orr	r0, r0, r1
   156a8:	tst	r0, #1
   156ac:	bne	156e8 <__assert_fail@plt+0x4004>
   156b0:	cmp	r8, r4
   156b4:	movcc	r0, #39	; 0x27
   156b8:	strbcc	r0, [r5, r8]
   156bc:	add	r0, r8, #1
   156c0:	cmp	r0, r4
   156c4:	movcc	r1, #36	; 0x24
   156c8:	strbcc	r1, [r5, r0]
   156cc:	add	r0, r8, #2
   156d0:	add	r8, r8, #3
   156d4:	cmp	r0, r4
   156d8:	movcc	r1, #39	; 0x27
   156dc:	strbcc	r1, [r5, r0]
   156e0:	mov	r0, #1
   156e4:	str	r0, [fp, #-56]	; 0xffffffc8
   156e8:	ldr	r1, [fp, #-68]	; 0xffffffbc
   156ec:	cmp	r8, r4
   156f0:	mov	r9, #0
   156f4:	mov	sl, #1
   156f8:	mov	r6, #48	; 0x30
   156fc:	movcc	r0, #92	; 0x5c
   15700:	strbcc	r0, [r5, r8]
   15704:	add	r0, r8, #1
   15708:	cmp	r1, #2
   1570c:	beq	15adc <__assert_fail@plt+0x43f8>
   15710:	add	r1, r7, #1
   15714:	cmp	r1, lr
   15718:	bcs	15adc <__assert_fail@plt+0x43f8>
   1571c:	ldrb	r1, [ip, r1]
   15720:	sub	r1, r1, #48	; 0x30
   15724:	uxtb	r1, r1
   15728:	cmp	r1, #9
   1572c:	bhi	15adc <__assert_fail@plt+0x43f8>
   15730:	cmp	r0, r4
   15734:	movcc	r1, #48	; 0x30
   15738:	strbcc	r1, [r5, r0]
   1573c:	add	r0, r8, #2
   15740:	add	r8, r8, #3
   15744:	cmp	r0, r4
   15748:	movcc	r1, #48	; 0x30
   1574c:	strbcc	r1, [r5, r0]
   15750:	b	15504 <__assert_fail@plt+0x3e20>
   15754:	ldr	r0, [fp, #-68]	; 0xffffffbc
   15758:	mov	sl, #0
   1575c:	mov	r6, #63	; 0x3f
   15760:	cmp	r0, #5
   15764:	beq	15ae4 <__assert_fail@plt+0x4400>
   15768:	cmp	r0, #2
   1576c:	bne	15b8c <__assert_fail@plt+0x44a8>
   15770:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15774:	mov	r9, #0
   15778:	tst	r0, #1
   1577c:	beq	15504 <__assert_fail@plt+0x3e20>
   15780:	b	15e5c <__assert_fail@plt+0x4778>
   15784:	mov	r0, #118	; 0x76
   15788:	b	158f8 <__assert_fail@plt+0x4214>
   1578c:	mov	r0, #1
   15790:	mov	r6, #39	; 0x27
   15794:	str	r0, [sp, #60]	; 0x3c
   15798:	ldr	r0, [fp, #-68]	; 0xffffffbc
   1579c:	cmp	r0, #2
   157a0:	bne	15930 <__assert_fail@plt+0x424c>
   157a4:	ldr	r0, [fp, #-76]	; 0xffffffb4
   157a8:	tst	r0, #1
   157ac:	bne	15e5c <__assert_fail@plt+0x4778>
   157b0:	ldr	r2, [sp, #56]	; 0x38
   157b4:	clz	r1, r4
   157b8:	mov	sl, #0
   157bc:	mov	r9, #1
   157c0:	lsr	r1, r1, #5
   157c4:	cmp	r2, #0
   157c8:	mov	r0, r2
   157cc:	movwne	r0, #1
   157d0:	orrs	r0, r0, r1
   157d4:	moveq	r2, r4
   157d8:	moveq	r4, r0
   157dc:	cmp	r8, r4
   157e0:	str	r2, [sp, #56]	; 0x38
   157e4:	movcc	r0, #39	; 0x27
   157e8:	strbcc	r0, [r5, r8]
   157ec:	add	r0, r8, #1
   157f0:	cmp	r0, r4
   157f4:	movcc	r1, #92	; 0x5c
   157f8:	strbcc	r1, [r5, r0]
   157fc:	add	r0, r8, #2
   15800:	add	r8, r8, #3
   15804:	cmp	r0, r4
   15808:	movcc	r1, #39	; 0x27
   1580c:	strbcc	r1, [r5, r0]
   15810:	mov	r0, #0
   15814:	str	r0, [fp, #-56]	; 0xffffffc8
   15818:	b	15504 <__assert_fail@plt+0x3e20>
   1581c:	ldr	r0, [sp, #40]	; 0x28
   15820:	str	r4, [sp, #88]	; 0x58
   15824:	cmp	r0, #1
   15828:	bne	15938 <__assert_fail@plt+0x4254>
   1582c:	str	lr, [sp, #28]
   15830:	bl	11510 <__ctype_b_loc@plt>
   15834:	ldr	r0, [r0]
   15838:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1583c:	mov	r2, #1
   15840:	add	r0, r0, r6, lsl #1
   15844:	ldrb	r0, [r0, #1]
   15848:	ubfx	r9, r0, #6, #1
   1584c:	ldr	r0, [sp, #52]	; 0x34
   15850:	cmp	r2, #1
   15854:	orr	r0, r9, r0
   15858:	bhi	15b94 <__assert_fail@plt+0x44b0>
   1585c:	tst	r0, #1
   15860:	beq	15b94 <__assert_fail@plt+0x44b0>
   15864:	ldr	lr, [sp, #28]
   15868:	ldr	r4, [sp, #88]	; 0x58
   1586c:	b	15504 <__assert_fail@plt+0x3e20>
   15870:	ldr	r1, [sp, #48]	; 0x30
   15874:	mov	sl, #0
   15878:	mov	r0, #92	; 0x5c
   1587c:	cmp	r1, #0
   15880:	beq	158f8 <__assert_fail@plt+0x4214>
   15884:	mov	r6, #92	; 0x5c
   15888:	mov	r9, #0
   1588c:	cmp	sl, #0
   15890:	bne	158c8 <__assert_fail@plt+0x41e4>
   15894:	ldr	r0, [fp, #-56]	; 0xffffffc8
   15898:	tst	r0, #1
   1589c:	beq	158c8 <__assert_fail@plt+0x41e4>
   158a0:	cmp	r8, r4
   158a4:	movcc	r0, #39	; 0x27
   158a8:	strbcc	r0, [r5, r8]
   158ac:	add	r0, r8, #1
   158b0:	add	r8, r8, #2
   158b4:	cmp	r0, r4
   158b8:	movcc	r1, #39	; 0x27
   158bc:	strbcc	r1, [r5, r0]
   158c0:	mov	r0, #0
   158c4:	str	r0, [fp, #-56]	; 0xffffffc8
   158c8:	mov	r1, r9
   158cc:	mov	r0, r6
   158d0:	cmp	r8, r4
   158d4:	strbcc	r0, [r5, r8]
   158d8:	ldr	r0, [fp, #-48]	; 0xffffffd0
   158dc:	add	r8, r8, #1
   158e0:	and	r0, r0, r1
   158e4:	str	r0, [fp, #-48]	; 0xffffffd0
   158e8:	add	r7, r7, #1
   158ec:	cmn	lr, #1
   158f0:	bne	15230 <__assert_fail@plt+0x3b4c>
   158f4:	b	1523c <__assert_fail@plt+0x3b58>
   158f8:	ldr	r1, [sp, #84]	; 0x54
   158fc:	mov	sl, #0
   15900:	mov	r9, #0
   15904:	tst	r1, #1
   15908:	mov	r1, #0
   1590c:	beq	15504 <__assert_fail@plt+0x3e20>
   15910:	b	1554c <__assert_fail@plt+0x3e68>
   15914:	ldr	r0, [sp, #36]	; 0x24
   15918:	mov	r6, #0
   1591c:	mov	sl, #0
   15920:	mov	r9, #0
   15924:	cmp	r0, #0
   15928:	beq	15504 <__assert_fail@plt+0x3e20>
   1592c:	b	158e8 <__assert_fail@plt+0x4204>
   15930:	mov	r9, #1
   15934:	b	15504 <__assert_fail@plt+0x3e20>
   15938:	mov	r0, #0
   1593c:	cmn	lr, #1
   15940:	sub	r4, fp, #40	; 0x28
   15944:	str	r0, [fp, #-36]	; 0xffffffdc
   15948:	str	r0, [fp, #-40]	; 0xffffffd8
   1594c:	bne	15960 <__assert_fail@plt+0x427c>
   15950:	mov	r0, ip
   15954:	bl	11534 <strlen@plt>
   15958:	ldr	ip, [fp, #-80]	; 0xffffffb0
   1595c:	mov	lr, r0
   15960:	ldr	r0, [sp, #72]	; 0x48
   15964:	mov	r9, #1
   15968:	mov	r2, #0
   1596c:	str	lr, [sp, #28]
   15970:	add	r0, r0, r7
   15974:	str	r0, [sp, #20]
   15978:	b	159bc <__assert_fail@plt+0x42d8>
   1597c:	ldr	r5, [sp, #44]	; 0x2c
   15980:	add	r5, r0, r5
   15984:	ldr	r0, [fp, #-44]	; 0xffffffd4
   15988:	bl	11444 <iswprint@plt>
   1598c:	cmp	r0, #0
   15990:	sub	r4, fp, #40	; 0x28
   15994:	movwne	r0, #1
   15998:	and	r9, r9, r0
   1599c:	mov	r0, r4
   159a0:	bl	113e4 <mbsinit@plt>
   159a4:	mov	r2, r5
   159a8:	ldr	lr, [sp, #28]
   159ac:	ldr	r5, [fp, #-84]	; 0xffffffac
   159b0:	ldr	ip, [fp, #-80]	; 0xffffffb0
   159b4:	cmp	r0, #0
   159b8:	bne	1584c <__assert_fail@plt+0x4168>
   159bc:	add	r0, r2, r7
   159c0:	str	r2, [sp, #44]	; 0x2c
   159c4:	mov	r3, r4
   159c8:	add	r1, ip, r0
   159cc:	str	r0, [sp, #24]
   159d0:	sub	r2, lr, r0
   159d4:	sub	r0, fp, #44	; 0x2c
   159d8:	bl	19570 <__assert_fail@plt+0x7e8c>
   159dc:	cmp	r0, #0
   159e0:	beq	15d84 <__assert_fail@plt+0x46a0>
   159e4:	cmn	r0, #1
   159e8:	beq	15d40 <__assert_fail@plt+0x465c>
   159ec:	ldr	lr, [sp, #28]
   159f0:	cmn	r0, #2
   159f4:	beq	15d48 <__assert_fail@plt+0x4664>
   159f8:	ldr	r2, [sp, #64]	; 0x40
   159fc:	ldr	r4, [sp, #88]	; 0x58
   15a00:	ldr	ip, [sp, #84]	; 0x54
   15a04:	cmp	r0, #2
   15a08:	mov	r1, #0
   15a0c:	movwcc	r1, #1
   15a10:	eor	r2, r2, #1
   15a14:	orrs	r1, r2, r1
   15a18:	bne	1597c <__assert_fail@plt+0x4298>
   15a1c:	ldr	r1, [sp, #44]	; 0x2c
   15a20:	ldr	r2, [sp, #20]
   15a24:	add	r1, r2, r1
   15a28:	sub	r2, r0, #1
   15a2c:	b	15a3c <__assert_fail@plt+0x4358>
   15a30:	add	r1, r1, #1
   15a34:	subs	r2, r2, #1
   15a38:	beq	1597c <__assert_fail@plt+0x4298>
   15a3c:	ldrb	r3, [r1]
   15a40:	sub	r3, r3, #91	; 0x5b
   15a44:	cmp	r3, #33	; 0x21
   15a48:	bhi	15a30 <__assert_fail@plt+0x434c>
   15a4c:	add	r5, pc, #0
   15a50:	ldr	pc, [r5, r3, lsl #2]
   15a54:	andeq	r5, r1, r8, lsr lr
   15a58:	andeq	r5, r1, r8, lsr lr
   15a5c:	andeq	r5, r1, r0, lsr sl
   15a60:	andeq	r5, r1, r8, lsr lr
   15a64:	andeq	r5, r1, r0, lsr sl
   15a68:	andeq	r5, r1, r8, lsr lr
   15a6c:	andeq	r5, r1, r0, lsr sl
   15a70:	andeq	r5, r1, r0, lsr sl
   15a74:	andeq	r5, r1, r0, lsr sl
   15a78:	andeq	r5, r1, r0, lsr sl
   15a7c:	andeq	r5, r1, r0, lsr sl
   15a80:	andeq	r5, r1, r0, lsr sl
   15a84:	andeq	r5, r1, r0, lsr sl
   15a88:	andeq	r5, r1, r0, lsr sl
   15a8c:	andeq	r5, r1, r0, lsr sl
   15a90:	andeq	r5, r1, r0, lsr sl
   15a94:	andeq	r5, r1, r0, lsr sl
   15a98:	andeq	r5, r1, r0, lsr sl
   15a9c:	andeq	r5, r1, r0, lsr sl
   15aa0:	andeq	r5, r1, r0, lsr sl
   15aa4:	andeq	r5, r1, r0, lsr sl
   15aa8:	andeq	r5, r1, r0, lsr sl
   15aac:	andeq	r5, r1, r0, lsr sl
   15ab0:	andeq	r5, r1, r0, lsr sl
   15ab4:	andeq	r5, r1, r0, lsr sl
   15ab8:	andeq	r5, r1, r0, lsr sl
   15abc:	andeq	r5, r1, r0, lsr sl
   15ac0:	andeq	r5, r1, r0, lsr sl
   15ac4:	andeq	r5, r1, r0, lsr sl
   15ac8:	andeq	r5, r1, r0, lsr sl
   15acc:	andeq	r5, r1, r0, lsr sl
   15ad0:	andeq	r5, r1, r0, lsr sl
   15ad4:	andeq	r5, r1, r0, lsr sl
   15ad8:	andeq	r5, r1, r8, lsr lr
   15adc:	mov	r8, r0
   15ae0:	b	15504 <__assert_fail@plt+0x3e20>
   15ae4:	ldr	r0, [sp, #32]
   15ae8:	cmp	r0, #0
   15aec:	beq	15b8c <__assert_fail@plt+0x44a8>
   15af0:	add	r0, r7, #2
   15af4:	cmp	r0, lr
   15af8:	bcs	15b8c <__assert_fail@plt+0x44a8>
   15afc:	add	r1, r7, ip
   15b00:	ldrb	r1, [r1, #1]
   15b04:	cmp	r1, #63	; 0x3f
   15b08:	bne	15b8c <__assert_fail@plt+0x44a8>
   15b0c:	ldrb	r9, [ip, r0]
   15b10:	sub	r2, r9, #33	; 0x21
   15b14:	cmp	r2, #29
   15b18:	bhi	15b8c <__assert_fail@plt+0x44a8>
   15b1c:	movw	r1, #20929	; 0x51c1
   15b20:	mov	r3, #1
   15b24:	movt	r1, #14336	; 0x3800
   15b28:	tst	r1, r3, lsl r2
   15b2c:	beq	15b8c <__assert_fail@plt+0x44a8>
   15b30:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15b34:	tst	r1, #1
   15b38:	bne	15e5c <__assert_fail@plt+0x4778>
   15b3c:	cmp	r8, r4
   15b40:	add	r2, r8, #1
   15b44:	mov	r6, r9
   15b48:	mov	r7, r0
   15b4c:	mov	r9, #0
   15b50:	movcc	r1, #63	; 0x3f
   15b54:	strbcc	r1, [r5, r8]
   15b58:	cmp	r2, r4
   15b5c:	movcc	r1, #34	; 0x22
   15b60:	strbcc	r1, [r5, r2]
   15b64:	add	r2, r8, #2
   15b68:	cmp	r2, r4
   15b6c:	movcc	r1, #34	; 0x22
   15b70:	strbcc	r1, [r5, r2]
   15b74:	add	r2, r8, #3
   15b78:	add	r8, r8, #4
   15b7c:	cmp	r2, r4
   15b80:	movcc	r1, #63	; 0x3f
   15b84:	strbcc	r1, [r5, r2]
   15b88:	b	15504 <__assert_fail@plt+0x3e20>
   15b8c:	mov	r9, #0
   15b90:	b	15504 <__assert_fail@plt+0x3e20>
   15b94:	ldr	lr, [sp, #28]
   15b98:	ldr	r4, [fp, #-56]	; 0xffffffc8
   15b9c:	add	r1, r2, r7
   15ba0:	mov	r2, #0
   15ba4:	str	r1, [sp, #44]	; 0x2c
   15ba8:	tst	r0, #1
   15bac:	bne	15cc8 <__assert_fail@plt+0x45e4>
   15bb0:	ldr	r1, [fp, #-76]	; 0xffffffb4
   15bb4:	tst	r1, #1
   15bb8:	bne	15e58 <__assert_fail@plt+0x4774>
   15bbc:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15bc0:	subs	r2, r1, #2
   15bc4:	movwne	r2, #1
   15bc8:	orr	r2, r2, r4
   15bcc:	tst	r2, #1
   15bd0:	bne	15c14 <__assert_fail@plt+0x4530>
   15bd4:	ldr	r1, [sp, #88]	; 0x58
   15bd8:	add	r2, r8, #1
   15bdc:	mov	r4, #1
   15be0:	cmp	r8, r1
   15be4:	movcc	r1, #39	; 0x27
   15be8:	strbcc	r1, [r5, r8]
   15bec:	ldr	r1, [sp, #88]	; 0x58
   15bf0:	cmp	r2, r1
   15bf4:	movcc	r1, #36	; 0x24
   15bf8:	strbcc	r1, [r5, r2]
   15bfc:	ldr	r1, [sp, #88]	; 0x58
   15c00:	add	r2, r8, #2
   15c04:	add	r8, r8, #3
   15c08:	cmp	r2, r1
   15c0c:	movcc	r1, #39	; 0x27
   15c10:	strbcc	r1, [r5, r2]
   15c14:	ldr	r1, [sp, #88]	; 0x58
   15c18:	add	r2, r8, #1
   15c1c:	cmp	r8, r1
   15c20:	movcc	r1, #92	; 0x5c
   15c24:	strbcc	r1, [r5, r8]
   15c28:	ldr	r1, [sp, #88]	; 0x58
   15c2c:	cmp	r2, r1
   15c30:	bcs	15c44 <__assert_fail@plt+0x4560>
   15c34:	uxtb	r3, r6
   15c38:	mov	r1, #48	; 0x30
   15c3c:	orr	r3, r1, r3, lsr #6
   15c40:	strb	r3, [r5, r2]
   15c44:	ldr	r1, [sp, #88]	; 0x58
   15c48:	add	r2, r8, #2
   15c4c:	add	r8, r8, #3
   15c50:	cmp	r2, r1
   15c54:	lsrcc	r3, r6, #3
   15c58:	movcc	r1, #6
   15c5c:	bficc	r3, r1, #3, #29
   15c60:	mov	r1, #6
   15c64:	bfi	r6, r1, #3, #29
   15c68:	strbcc	r3, [r5, r2]
   15c6c:	mov	r2, #1
   15c70:	b	15cf0 <__assert_fail@plt+0x460c>
   15c74:	ldr	r1, [sp, #88]	; 0x58
   15c78:	ldr	r5, [fp, #-84]	; 0xffffffac
   15c7c:	ldr	r4, [sp, #88]	; 0x58
   15c80:	cmp	r8, r1
   15c84:	movcc	r1, #39	; 0x27
   15c88:	strbcc	r1, [r5, r8]
   15c8c:	add	r1, r8, #1
   15c90:	add	r8, r8, #2
   15c94:	cmp	r1, r4
   15c98:	movcc	r4, #39	; 0x27
   15c9c:	strbcc	r4, [r5, r1]
   15ca0:	mov	r4, #0
   15ca4:	ldr	r1, [sp, #88]	; 0x58
   15ca8:	cmp	r8, r1
   15cac:	ldr	r1, [sp, #72]	; 0x48
   15cb0:	strbcc	r6, [r5, r8]
   15cb4:	add	r8, r8, #1
   15cb8:	ldrb	r6, [r1, r7]
   15cbc:	mov	r7, r3
   15cc0:	tst	r0, #1
   15cc4:	beq	15bb0 <__assert_fail@plt+0x44cc>
   15cc8:	ldr	r1, [fp, #-52]	; 0xffffffcc
   15ccc:	tst	r1, #1
   15cd0:	beq	15ce8 <__assert_fail@plt+0x4604>
   15cd4:	ldr	r1, [sp, #88]	; 0x58
   15cd8:	cmp	r8, r1
   15cdc:	movcc	r1, #92	; 0x5c
   15ce0:	strbcc	r1, [r5, r8]
   15ce4:	add	r8, r8, #1
   15ce8:	mov	r1, #0
   15cec:	str	r1, [fp, #-52]	; 0xffffffcc
   15cf0:	ldr	r1, [sp, #44]	; 0x2c
   15cf4:	add	r3, r7, #1
   15cf8:	and	sl, r2, #1
   15cfc:	cmp	r1, r3
   15d00:	bls	15d24 <__assert_fail@plt+0x4640>
   15d04:	cmp	sl, #0
   15d08:	mvn	r5, r4
   15d0c:	movwne	sl, #1
   15d10:	orr	r5, r5, sl
   15d14:	tst	r5, #1
   15d18:	beq	15c74 <__assert_fail@plt+0x4590>
   15d1c:	ldr	r5, [fp, #-84]	; 0xffffffac
   15d20:	b	15ca4 <__assert_fail@plt+0x45c0>
   15d24:	str	r4, [fp, #-56]	; 0xffffffc8
   15d28:	ldr	r4, [sp, #88]	; 0x58
   15d2c:	cmp	sl, #0
   15d30:	movwne	sl, #1
   15d34:	cmp	sl, #0
   15d38:	beq	15894 <__assert_fail@plt+0x41b0>
   15d3c:	b	158c8 <__assert_fail@plt+0x41e4>
   15d40:	mov	r9, #0
   15d44:	b	15d84 <__assert_fail@plt+0x46a0>
   15d48:	ldr	r0, [sp, #24]
   15d4c:	mov	r9, #0
   15d50:	cmp	lr, r0
   15d54:	bls	15d84 <__assert_fail@plt+0x46a0>
   15d58:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15d5c:	ldr	r2, [sp, #44]	; 0x2c
   15d60:	add	r0, ip, r7
   15d64:	ldrb	r1, [r0, r2]
   15d68:	cmp	r1, #0
   15d6c:	beq	1584c <__assert_fail@plt+0x4168>
   15d70:	add	r2, r2, #1
   15d74:	add	r1, r7, r2
   15d78:	cmp	r1, lr
   15d7c:	bcc	15d64 <__assert_fail@plt+0x4680>
   15d80:	b	1584c <__assert_fail@plt+0x4168>
   15d84:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15d88:	ldr	r2, [sp, #44]	; 0x2c
   15d8c:	b	1584c <__assert_fail@plt+0x4168>
   15d90:	mov	lr, r7
   15d94:	b	15d9c <__assert_fail@plt+0x46b8>
   15d98:	mvn	lr, #0
   15d9c:	ldr	r1, [fp, #-68]	; 0xffffffbc
   15da0:	ldr	r2, [fp, #-76]	; 0xffffffb4
   15da4:	eor	r0, r1, #2
   15da8:	orr	r0, r0, r8
   15dac:	clz	r0, r0
   15db0:	lsr	r0, r0, #5
   15db4:	tst	r2, r0
   15db8:	bne	15e5c <__assert_fail@plt+0x4778>
   15dbc:	subs	r0, r1, #2
   15dc0:	movwne	r0, #1
   15dc4:	orr	r0, r2, r0
   15dc8:	tst	r0, #1
   15dcc:	ldreq	r0, [sp, #60]	; 0x3c
   15dd0:	eoreq	r0, r0, #1
   15dd4:	tsteq	r0, #1
   15dd8:	bne	15ef0 <__assert_fail@plt+0x480c>
   15ddc:	ldr	r0, [fp, #-48]	; 0xffffffd0
   15de0:	mov	sl, lr
   15de4:	tst	r0, #1
   15de8:	bne	15ebc <__assert_fail@plt+0x47d8>
   15dec:	ldr	r6, [sp, #56]	; 0x38
   15df0:	mov	r9, #0
   15df4:	cmp	r6, #0
   15df8:	beq	15ee8 <__assert_fail@plt+0x4804>
   15dfc:	ldr	r0, [sp, #84]	; 0x54
   15e00:	mov	r1, #0
   15e04:	mov	r7, #2
   15e08:	cmp	r4, #0
   15e0c:	str	r1, [fp, #-48]	; 0xffffffd0
   15e10:	mov	r1, #0
   15e14:	str	r1, [fp, #-76]	; 0xffffffb4
   15e18:	beq	14fb8 <__assert_fail@plt+0x38d4>
   15e1c:	b	15ef0 <__assert_fail@plt+0x480c>
   15e20:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15e24:	ldr	r1, [fp, #12]
   15e28:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15e2c:	mov	lr, r4
   15e30:	mov	r4, r6
   15e34:	b	15e7c <__assert_fail@plt+0x4798>
   15e38:	tst	ip, #1
   15e3c:	ldr	r5, [fp, #-84]	; 0xffffffac
   15e40:	ldr	ip, [fp, #-80]	; 0xffffffb0
   15e44:	ldr	r1, [fp, #12]
   15e48:	mov	r0, #2
   15e4c:	movwne	r0, #4
   15e50:	mov	r2, r0
   15e54:	b	15e7c <__assert_fail@plt+0x4798>
   15e58:	ldr	r4, [sp, #88]	; 0x58
   15e5c:	ldr	r1, [sp, #84]	; 0x54
   15e60:	mov	r0, #2
   15e64:	tst	r1, #1
   15e68:	movwne	r0, #4
   15e6c:	ldr	r2, [fp, #-68]	; 0xffffffbc
   15e70:	ldr	r1, [fp, #12]
   15e74:	cmp	r2, #2
   15e78:	moveq	r2, r0
   15e7c:	mov	r0, #0
   15e80:	bic	r1, r1, #2
   15e84:	str	r2, [sp]
   15e88:	mov	r2, ip
   15e8c:	mov	r3, lr
   15e90:	str	r0, [sp, #8]
   15e94:	ldr	r0, [sp, #76]	; 0x4c
   15e98:	str	r1, [sp, #4]
   15e9c:	mov	r1, r4
   15ea0:	str	r0, [sp, #12]
   15ea4:	ldr	r0, [sp, #80]	; 0x50
   15ea8:	str	r0, [sp, #16]
   15eac:	mov	r0, r5
   15eb0:	bl	14f28 <__assert_fail@plt+0x3844>
   15eb4:	mov	r8, r0
   15eb8:	b	15f3c <__assert_fail@plt+0x4858>
   15ebc:	mov	r0, #5
   15ec0:	ldr	r1, [sp, #56]	; 0x38
   15ec4:	ldr	r2, [fp, #-80]	; 0xffffffb0
   15ec8:	mov	r3, sl
   15ecc:	str	r0, [sp]
   15ed0:	ldr	r0, [fp, #12]
   15ed4:	str	r0, [sp, #4]
   15ed8:	ldr	r0, [fp, #16]
   15edc:	str	r0, [sp, #8]
   15ee0:	ldr	r0, [sp, #76]	; 0x4c
   15ee4:	b	15ea0 <__assert_fail@plt+0x47bc>
   15ee8:	mov	r0, #0
   15eec:	str	r0, [fp, #-76]	; 0xffffffb4
   15ef0:	ldr	r1, [fp, #-88]	; 0xffffffa8
   15ef4:	cmp	r1, #0
   15ef8:	beq	15f30 <__assert_fail@plt+0x484c>
   15efc:	ldr	r0, [fp, #-76]	; 0xffffffb4
   15f00:	tst	r0, #1
   15f04:	bne	15f30 <__assert_fail@plt+0x484c>
   15f08:	ldrb	r0, [r1]
   15f0c:	cmp	r0, #0
   15f10:	beq	15f30 <__assert_fail@plt+0x484c>
   15f14:	add	r1, r1, #1
   15f18:	cmp	r8, r4
   15f1c:	strbcc	r0, [r5, r8]
   15f20:	add	r8, r8, #1
   15f24:	ldrb	r0, [r1], #1
   15f28:	cmp	r0, #0
   15f2c:	bne	15f18 <__assert_fail@plt+0x4834>
   15f30:	cmp	r8, r4
   15f34:	movcc	r0, #0
   15f38:	strbcc	r0, [r5, r8]
   15f3c:	mov	r0, r8
   15f40:	sub	sp, fp, #28
   15f44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f48:	mov	r0, #4
   15f4c:	b	15e6c <__assert_fail@plt+0x4788>
   15f50:	bl	116cc <abort@plt>
   15f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f58:	add	fp, sp, #28
   15f5c:	sub	sp, sp, #28
   15f60:	movw	r5, #49624	; 0xc1d8
   15f64:	cmp	r2, #0
   15f68:	mov	r4, r1
   15f6c:	mov	r7, r0
   15f70:	str	r0, [sp, #20]
   15f74:	movt	r5, #2
   15f78:	movne	r5, r2
   15f7c:	bl	11558 <__errno_location@plt>
   15f80:	mov	sl, r0
   15f84:	ldr	r2, [r5, #40]	; 0x28
   15f88:	ldr	r3, [r5, #44]	; 0x2c
   15f8c:	ldm	r5, {r0, r1}
   15f90:	orr	r8, r1, #1
   15f94:	add	r9, r5, #8
   15f98:	mov	r1, #0
   15f9c:	ldr	r6, [sl]
   15fa0:	stm	sp, {r0, r8, r9}
   15fa4:	mov	r0, #0
   15fa8:	str	r2, [sp, #12]
   15fac:	str	r3, [sp, #16]
   15fb0:	mov	r2, r7
   15fb4:	mov	r3, r4
   15fb8:	str	r6, [sp, #24]
   15fbc:	mov	r6, r4
   15fc0:	bl	14f28 <__assert_fail@plt+0x3844>
   15fc4:	add	r7, r0, #1
   15fc8:	mov	r0, r7
   15fcc:	bl	17ea0 <__assert_fail@plt+0x67bc>
   15fd0:	mov	r4, r0
   15fd4:	ldr	r0, [r5]
   15fd8:	ldr	r2, [r5, #44]	; 0x2c
   15fdc:	ldr	r1, [r5, #40]	; 0x28
   15fe0:	mov	r3, r6
   15fe4:	stm	sp, {r0, r8, r9}
   15fe8:	str	r2, [sp, #16]
   15fec:	ldr	r2, [sp, #20]
   15ff0:	str	r1, [sp, #12]
   15ff4:	mov	r0, r4
   15ff8:	mov	r1, r7
   15ffc:	bl	14f28 <__assert_fail@plt+0x3844>
   16000:	ldr	r0, [sp, #24]
   16004:	str	r0, [sl]
   16008:	mov	r0, r4
   1600c:	sub	sp, fp, #28
   16010:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16014:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16018:	add	fp, sp, #28
   1601c:	sub	sp, sp, #36	; 0x24
   16020:	movw	r8, #49624	; 0xc1d8
   16024:	cmp	r3, #0
   16028:	mov	r4, r2
   1602c:	str	r2, [sp, #24]
   16030:	mov	r5, r1
   16034:	mov	r6, r0
   16038:	str	r0, [sp, #20]
   1603c:	movt	r8, #2
   16040:	movne	r8, r3
   16044:	bl	11558 <__errno_location@plt>
   16048:	str	r0, [sp, #28]
   1604c:	ldr	r1, [r8, #40]	; 0x28
   16050:	ldr	r2, [r8, #44]	; 0x2c
   16054:	ldr	r7, [r0]
   16058:	cmp	r4, #0
   1605c:	add	sl, r8, #8
   16060:	mov	r0, #0
   16064:	ldm	r8, {r3, r9}
   16068:	orreq	r9, r9, #1
   1606c:	stm	sp, {r3, r9, sl}
   16070:	str	r1, [sp, #12]
   16074:	str	r2, [sp, #16]
   16078:	mov	r1, #0
   1607c:	mov	r2, r6
   16080:	mov	r3, r5
   16084:	str	r7, [sp, #32]
   16088:	mov	r7, r5
   1608c:	bl	14f28 <__assert_fail@plt+0x3844>
   16090:	add	r4, r0, #1
   16094:	mov	r5, r0
   16098:	mov	r0, r4
   1609c:	bl	17ea0 <__assert_fail@plt+0x67bc>
   160a0:	mov	r6, r0
   160a4:	ldr	r0, [r8]
   160a8:	ldr	r2, [r8, #44]	; 0x2c
   160ac:	ldr	r1, [r8, #40]	; 0x28
   160b0:	mov	r3, r7
   160b4:	stm	sp, {r0, r9, sl}
   160b8:	str	r2, [sp, #16]
   160bc:	ldr	r2, [sp, #20]
   160c0:	str	r1, [sp, #12]
   160c4:	mov	r0, r6
   160c8:	mov	r1, r4
   160cc:	bl	14f28 <__assert_fail@plt+0x3844>
   160d0:	ldr	r0, [sp, #24]
   160d4:	ldr	r1, [sp, #32]
   160d8:	ldr	r2, [sp, #28]
   160dc:	cmp	r0, #0
   160e0:	str	r1, [r2]
   160e4:	strne	r5, [r0]
   160e8:	mov	r0, r6
   160ec:	sub	sp, fp, #28
   160f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160f4:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   160f8:	add	fp, sp, #24
   160fc:	movw	r5, #49508	; 0xc164
   16100:	movw	r8, #49504	; 0xc160
   16104:	movt	r5, #2
   16108:	movt	r8, #2
   1610c:	ldr	r0, [r5]
   16110:	ldr	r4, [r8]
   16114:	cmp	r0, #2
   16118:	blt	16144 <__assert_fail@plt+0x4a60>
   1611c:	add	r7, r4, #12
   16120:	mov	r6, #0
   16124:	ldr	r0, [r7, r6, lsl #3]
   16128:	bl	13fb0 <__assert_fail@plt+0x28cc>
   1612c:	ldr	r1, [r5]
   16130:	add	r2, r6, #2
   16134:	add	r0, r6, #1
   16138:	mov	r6, r0
   1613c:	cmp	r2, r1
   16140:	blt	16124 <__assert_fail@plt+0x4a40>
   16144:	ldr	r0, [r4, #4]
   16148:	movw	r9, #49672	; 0xc208
   1614c:	movw	r7, #49512	; 0xc168
   16150:	movt	r9, #2
   16154:	movt	r7, #2
   16158:	cmp	r0, r9
   1615c:	beq	1616c <__assert_fail@plt+0x4a88>
   16160:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16164:	mov	r0, #256	; 0x100
   16168:	stm	r7, {r0, r9}
   1616c:	cmp	r4, r7
   16170:	beq	16180 <__assert_fail@plt+0x4a9c>
   16174:	mov	r0, r4
   16178:	bl	13fb0 <__assert_fail@plt+0x28cc>
   1617c:	str	r7, [r8]
   16180:	mov	r0, #1
   16184:	str	r0, [r5]
   16188:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   1618c:	movw	r3, #49624	; 0xc1d8
   16190:	mvn	r2, #0
   16194:	movt	r3, #2
   16198:	b	1619c <__assert_fail@plt+0x4ab8>
   1619c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161a0:	add	fp, sp, #28
   161a4:	sub	sp, sp, #44	; 0x2c
   161a8:	mov	r7, r3
   161ac:	str	r2, [sp, #36]	; 0x24
   161b0:	str	r1, [sp, #32]
   161b4:	mov	r5, r0
   161b8:	bl	11558 <__errno_location@plt>
   161bc:	cmp	r5, #0
   161c0:	bmi	16330 <__assert_fail@plt+0x4c4c>
   161c4:	cmn	r5, #-2147483647	; 0x80000001
   161c8:	beq	16330 <__assert_fail@plt+0x4c4c>
   161cc:	movw	r8, #49508	; 0xc164
   161d0:	movw	r4, #49504	; 0xc160
   161d4:	str	r0, [sp, #28]
   161d8:	ldr	r0, [r0]
   161dc:	movt	r8, #2
   161e0:	movt	r4, #2
   161e4:	ldr	r1, [r8]
   161e8:	ldr	r6, [r4]
   161ec:	str	r0, [sp, #24]
   161f0:	cmp	r1, r5
   161f4:	ble	16200 <__assert_fail@plt+0x4b1c>
   161f8:	mov	sl, r6
   161fc:	b	1626c <__assert_fail@plt+0x4b88>
   16200:	movw	r9, #49512	; 0xc168
   16204:	mov	r0, #8
   16208:	str	r1, [fp, #-32]	; 0xffffffe0
   1620c:	sub	r1, r5, r1
   16210:	mvn	r3, #-2147483648	; 0x80000000
   16214:	movt	r9, #2
   16218:	str	r0, [sp]
   1621c:	add	r2, r1, #1
   16220:	sub	r1, fp, #32
   16224:	subs	r0, r6, r9
   16228:	movne	r0, r6
   1622c:	bl	180a0 <__assert_fail@plt+0x69bc>
   16230:	mov	sl, r0
   16234:	cmp	r6, r9
   16238:	str	r0, [r4]
   1623c:	bne	16248 <__assert_fail@plt+0x4b64>
   16240:	ldrd	r0, [r9]
   16244:	stm	sl, {r0, r1}
   16248:	ldr	r1, [r8]
   1624c:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16250:	add	r0, sl, r1, lsl #3
   16254:	sub	r1, r2, r1
   16258:	lsl	r2, r1, #3
   1625c:	mov	r1, #0
   16260:	bl	11588 <memset@plt>
   16264:	ldr	r0, [fp, #-32]	; 0xffffffe0
   16268:	str	r0, [r8]
   1626c:	mov	r9, sl
   16270:	ldm	r7, {r0, r1}
   16274:	orr	r8, r1, #1
   16278:	add	r1, r7, #8
   1627c:	ldr	r2, [r7, #40]	; 0x28
   16280:	ldr	r3, [r7, #44]	; 0x2c
   16284:	ldr	r6, [r9, r5, lsl #3]!
   16288:	str	r1, [sp, #20]
   1628c:	ldr	r4, [r9, #4]!
   16290:	stm	sp, {r0, r8}
   16294:	add	r0, sp, #8
   16298:	stm	r0, {r1, r2, r3}
   1629c:	ldr	r2, [sp, #32]
   162a0:	ldr	r3, [sp, #36]	; 0x24
   162a4:	mov	r1, r6
   162a8:	mov	r0, r4
   162ac:	bl	14f28 <__assert_fail@plt+0x3844>
   162b0:	cmp	r6, r0
   162b4:	bhi	16318 <__assert_fail@plt+0x4c34>
   162b8:	add	r6, r0, #1
   162bc:	movw	r0, #49672	; 0xc208
   162c0:	movt	r0, #2
   162c4:	str	r6, [sl, r5, lsl #3]
   162c8:	cmp	r4, r0
   162cc:	beq	162d8 <__assert_fail@plt+0x4bf4>
   162d0:	mov	r0, r4
   162d4:	bl	13fb0 <__assert_fail@plt+0x28cc>
   162d8:	mov	r0, r6
   162dc:	bl	17ea0 <__assert_fail@plt+0x67bc>
   162e0:	str	r0, [r9]
   162e4:	mov	r4, r0
   162e8:	add	r3, sp, #8
   162ec:	ldr	r0, [r7]
   162f0:	ldr	r1, [r7, #40]	; 0x28
   162f4:	ldr	r2, [r7, #44]	; 0x2c
   162f8:	stm	sp, {r0, r8}
   162fc:	ldr	r0, [sp, #20]
   16300:	stm	r3, {r0, r1, r2}
   16304:	ldr	r2, [sp, #32]
   16308:	ldr	r3, [sp, #36]	; 0x24
   1630c:	mov	r0, r4
   16310:	mov	r1, r6
   16314:	bl	14f28 <__assert_fail@plt+0x3844>
   16318:	ldr	r0, [sp, #28]
   1631c:	ldr	r1, [sp, #24]
   16320:	str	r1, [r0]
   16324:	mov	r0, r4
   16328:	sub	sp, fp, #28
   1632c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16330:	bl	116cc <abort@plt>
   16334:	movw	r3, #49624	; 0xc1d8
   16338:	movt	r3, #2
   1633c:	b	1619c <__assert_fail@plt+0x4ab8>
   16340:	movw	r3, #49624	; 0xc1d8
   16344:	mov	r1, r0
   16348:	mov	r0, #0
   1634c:	mvn	r2, #0
   16350:	movt	r3, #2
   16354:	b	1619c <__assert_fail@plt+0x4ab8>
   16358:	movw	r3, #49624	; 0xc1d8
   1635c:	mov	r2, r1
   16360:	mov	r1, r0
   16364:	mov	r0, #0
   16368:	movt	r3, #2
   1636c:	b	1619c <__assert_fail@plt+0x4ab8>
   16370:	push	{fp, lr}
   16374:	mov	fp, sp
   16378:	sub	sp, sp, #48	; 0x30
   1637c:	vmov.i32	q8, #0	; 0x00000000
   16380:	mov	ip, #32
   16384:	mov	r3, sp
   16388:	mov	lr, r2
   1638c:	cmp	r1, #10
   16390:	add	r2, r3, #16
   16394:	vst1.64	{d16-d17}, [r3], ip
   16398:	vst1.64	{d16-d17}, [r2]
   1639c:	vst1.64	{d16-d17}, [r3]
   163a0:	beq	163c0 <__assert_fail@plt+0x4cdc>
   163a4:	str	r1, [sp]
   163a8:	mov	r3, sp
   163ac:	mov	r1, lr
   163b0:	mvn	r2, #0
   163b4:	bl	1619c <__assert_fail@plt+0x4ab8>
   163b8:	mov	sp, fp
   163bc:	pop	{fp, pc}
   163c0:	bl	116cc <abort@plt>
   163c4:	push	{r4, sl, fp, lr}
   163c8:	add	fp, sp, #8
   163cc:	sub	sp, sp, #48	; 0x30
   163d0:	vmov.i32	q8, #0	; 0x00000000
   163d4:	mov	ip, r3
   163d8:	mov	r3, sp
   163dc:	mov	lr, #32
   163e0:	cmp	r1, #10
   163e4:	add	r4, r3, #16
   163e8:	vst1.64	{d16-d17}, [r3], lr
   163ec:	vst1.64	{d16-d17}, [r4]
   163f0:	vst1.64	{d16-d17}, [r3]
   163f4:	beq	16414 <__assert_fail@plt+0x4d30>
   163f8:	str	r1, [sp]
   163fc:	mov	r1, r2
   16400:	mov	r3, sp
   16404:	mov	r2, ip
   16408:	bl	1619c <__assert_fail@plt+0x4ab8>
   1640c:	sub	sp, fp, #8
   16410:	pop	{r4, sl, fp, pc}
   16414:	bl	116cc <abort@plt>
   16418:	push	{fp, lr}
   1641c:	mov	fp, sp
   16420:	sub	sp, sp, #48	; 0x30
   16424:	vmov.i32	q8, #0	; 0x00000000
   16428:	mov	r3, sp
   1642c:	mov	ip, #32
   16430:	cmp	r0, #10
   16434:	add	r2, r3, #16
   16438:	vst1.64	{d16-d17}, [r3], ip
   1643c:	vst1.64	{d16-d17}, [r2]
   16440:	vst1.64	{d16-d17}, [r3]
   16444:	beq	16464 <__assert_fail@plt+0x4d80>
   16448:	str	r0, [sp]
   1644c:	mov	r3, sp
   16450:	mov	r0, #0
   16454:	mvn	r2, #0
   16458:	bl	1619c <__assert_fail@plt+0x4ab8>
   1645c:	mov	sp, fp
   16460:	pop	{fp, pc}
   16464:	bl	116cc <abort@plt>
   16468:	push	{fp, lr}
   1646c:	mov	fp, sp
   16470:	sub	sp, sp, #48	; 0x30
   16474:	vmov.i32	q8, #0	; 0x00000000
   16478:	mov	r3, sp
   1647c:	mov	ip, #32
   16480:	cmp	r0, #10
   16484:	add	lr, r3, #16
   16488:	vst1.64	{d16-d17}, [r3], ip
   1648c:	vst1.64	{d16-d17}, [lr]
   16490:	vst1.64	{d16-d17}, [r3]
   16494:	beq	164b0 <__assert_fail@plt+0x4dcc>
   16498:	str	r0, [sp]
   1649c:	mov	r3, sp
   164a0:	mov	r0, #0
   164a4:	bl	1619c <__assert_fail@plt+0x4ab8>
   164a8:	mov	sp, fp
   164ac:	pop	{fp, pc}
   164b0:	bl	116cc <abort@plt>
   164b4:	push	{r4, sl, fp, lr}
   164b8:	add	fp, sp, #8
   164bc:	sub	sp, sp, #48	; 0x30
   164c0:	mov	lr, r0
   164c4:	movw	r0, #49624	; 0xc1d8
   164c8:	mov	ip, r1
   164cc:	mov	r1, #32
   164d0:	mov	r4, #1
   164d4:	movt	r0, #2
   164d8:	add	r3, r0, #16
   164dc:	vld1.64	{d16-d17}, [r0], r1
   164e0:	vld1.64	{d20-d21}, [r0]
   164e4:	vld1.64	{d18-d19}, [r3]
   164e8:	mov	r3, sp
   164ec:	add	r0, r3, #32
   164f0:	add	r1, r3, #16
   164f4:	vst1.64	{d20-d21}, [r0]
   164f8:	mov	r0, #28
   164fc:	vst1.64	{d18-d19}, [r1]
   16500:	mov	r1, r3
   16504:	and	r0, r0, r2, lsr #3
   16508:	and	r2, r2, #31
   1650c:	vst1.64	{d16-d17}, [r1], r0
   16510:	ldr	r0, [r1, #8]
   16514:	bic	r4, r4, r0, lsr r2
   16518:	eor	r0, r0, r4, lsl r2
   1651c:	mov	r2, ip
   16520:	str	r0, [r1, #8]
   16524:	mov	r0, #0
   16528:	mov	r1, lr
   1652c:	bl	1619c <__assert_fail@plt+0x4ab8>
   16530:	sub	sp, fp, #8
   16534:	pop	{r4, sl, fp, pc}
   16538:	push	{fp, lr}
   1653c:	mov	fp, sp
   16540:	sub	sp, sp, #48	; 0x30
   16544:	mov	ip, r0
   16548:	movw	r0, #49624	; 0xc1d8
   1654c:	mov	r2, #32
   16550:	movt	r0, #2
   16554:	add	r3, r0, #16
   16558:	vld1.64	{d16-d17}, [r0], r2
   1655c:	vld1.64	{d20-d21}, [r0]
   16560:	vld1.64	{d18-d19}, [r3]
   16564:	mov	r3, sp
   16568:	add	r0, r3, #32
   1656c:	add	r2, r3, #16
   16570:	vst1.64	{d20-d21}, [r0]
   16574:	mov	r0, #28
   16578:	vst1.64	{d18-d19}, [r2]
   1657c:	mov	r2, r3
   16580:	and	r0, r0, r1, lsr #3
   16584:	and	r1, r1, #31
   16588:	vst1.64	{d16-d17}, [r2], r0
   1658c:	mov	r0, #1
   16590:	ldr	lr, [r2, #8]
   16594:	bic	r0, r0, lr, lsr r1
   16598:	eor	r0, lr, r0, lsl r1
   1659c:	mov	r1, ip
   165a0:	str	r0, [r2, #8]
   165a4:	mov	r0, #0
   165a8:	mvn	r2, #0
   165ac:	bl	1619c <__assert_fail@plt+0x4ab8>
   165b0:	mov	sp, fp
   165b4:	pop	{fp, pc}
   165b8:	push	{fp, lr}
   165bc:	mov	fp, sp
   165c0:	sub	sp, sp, #48	; 0x30
   165c4:	mov	r1, r0
   165c8:	movw	r0, #49624	; 0xc1d8
   165cc:	mov	r3, #32
   165d0:	movt	r0, #2
   165d4:	add	r2, r0, #16
   165d8:	vld1.64	{d16-d17}, [r0], r3
   165dc:	mov	r3, sp
   165e0:	vld1.64	{d18-d19}, [r2]
   165e4:	vld1.64	{d20-d21}, [r0]
   165e8:	add	r2, r3, #16
   165ec:	add	r0, r3, #32
   165f0:	vst1.64	{d18-d19}, [r2]
   165f4:	vst1.64	{d20-d21}, [r0]
   165f8:	mov	r0, #12
   165fc:	mov	r2, r3
   16600:	vst1.64	{d16-d17}, [r2], r0
   16604:	ldr	r0, [r2]
   16608:	orr	r0, r0, #67108864	; 0x4000000
   1660c:	str	r0, [r2]
   16610:	mov	r0, #0
   16614:	mvn	r2, #0
   16618:	bl	1619c <__assert_fail@plt+0x4ab8>
   1661c:	mov	sp, fp
   16620:	pop	{fp, pc}
   16624:	push	{fp, lr}
   16628:	mov	fp, sp
   1662c:	sub	sp, sp, #48	; 0x30
   16630:	mov	ip, r1
   16634:	mov	r1, r0
   16638:	movw	r0, #49624	; 0xc1d8
   1663c:	mov	r2, #32
   16640:	movt	r0, #2
   16644:	add	r3, r0, #16
   16648:	vld1.64	{d16-d17}, [r0], r2
   1664c:	vld1.64	{d18-d19}, [r3]
   16650:	vld1.64	{d20-d21}, [r0]
   16654:	mov	r3, sp
   16658:	add	r2, r3, #16
   1665c:	add	r0, r3, #32
   16660:	vst1.64	{d18-d19}, [r2]
   16664:	vst1.64	{d20-d21}, [r0]
   16668:	mov	r0, #12
   1666c:	mov	r2, r3
   16670:	vst1.64	{d16-d17}, [r2], r0
   16674:	ldr	r0, [r2]
   16678:	orr	r0, r0, #67108864	; 0x4000000
   1667c:	str	r0, [r2]
   16680:	mov	r0, #0
   16684:	mov	r2, ip
   16688:	bl	1619c <__assert_fail@plt+0x4ab8>
   1668c:	mov	sp, fp
   16690:	pop	{fp, pc}
   16694:	push	{r4, sl, fp, lr}
   16698:	add	fp, sp, #8
   1669c:	sub	sp, sp, #96	; 0x60
   166a0:	vmov.i32	q8, #0	; 0x00000000
   166a4:	mov	ip, r2
   166a8:	mov	r2, sp
   166ac:	mov	r4, #28
   166b0:	cmp	r1, #10
   166b4:	mov	r3, r2
   166b8:	add	lr, r2, #16
   166bc:	vst1.64	{d16-d17}, [r3], r4
   166c0:	vst1.64	{d16-d17}, [lr]
   166c4:	vst1.32	{d16-d17}, [r3]
   166c8:	beq	16718 <__assert_fail@plt+0x5034>
   166cc:	vld1.64	{d16-d17}, [r2], r4
   166d0:	vld1.64	{d18-d19}, [lr]
   166d4:	add	r3, sp, #48	; 0x30
   166d8:	vld1.32	{d20-d21}, [r2]
   166dc:	add	r2, r3, #20
   166e0:	add	r4, r3, #4
   166e4:	vst1.32	{d18-d19}, [r2]
   166e8:	add	r2, r3, #32
   166ec:	vst1.32	{d16-d17}, [r4]
   166f0:	vst1.32	{d20-d21}, [r2]
   166f4:	str	r1, [sp, #48]	; 0x30
   166f8:	mvn	r2, #0
   166fc:	ldr	r1, [sp, #60]	; 0x3c
   16700:	orr	r1, r1, #67108864	; 0x4000000
   16704:	str	r1, [sp, #60]	; 0x3c
   16708:	mov	r1, ip
   1670c:	bl	1619c <__assert_fail@plt+0x4ab8>
   16710:	sub	sp, fp, #8
   16714:	pop	{r4, sl, fp, pc}
   16718:	bl	116cc <abort@plt>
   1671c:	push	{r4, r5, r6, sl, fp, lr}
   16720:	add	fp, sp, #16
   16724:	sub	sp, sp, #48	; 0x30
   16728:	mov	ip, r3
   1672c:	movw	r3, #49624	; 0xc1d8
   16730:	mov	r6, #32
   16734:	cmp	r1, #0
   16738:	mov	r4, sp
   1673c:	movt	r3, #2
   16740:	cmpne	r2, #0
   16744:	add	r5, r4, #16
   16748:	add	lr, r3, #16
   1674c:	vld1.64	{d16-d17}, [r3], r6
   16750:	vld1.64	{d18-d19}, [lr]
   16754:	vld1.64	{d20-d21}, [r3]
   16758:	mov	r3, #10
   1675c:	vst1.64	{d16-d17}, [r4], r6
   16760:	vst1.64	{d18-d19}, [r5]
   16764:	vst1.64	{d20-d21}, [r4]
   16768:	str	r3, [sp]
   1676c:	bne	16774 <__assert_fail@plt+0x5090>
   16770:	bl	116cc <abort@plt>
   16774:	str	r2, [sp, #44]	; 0x2c
   16778:	str	r1, [sp, #40]	; 0x28
   1677c:	mov	r3, sp
   16780:	mov	r1, ip
   16784:	mvn	r2, #0
   16788:	bl	1619c <__assert_fail@plt+0x4ab8>
   1678c:	sub	sp, fp, #16
   16790:	pop	{r4, r5, r6, sl, fp, pc}
   16794:	push	{r4, r5, r6, sl, fp, lr}
   16798:	add	fp, sp, #16
   1679c:	sub	sp, sp, #48	; 0x30
   167a0:	mov	lr, r3
   167a4:	movw	r3, #49624	; 0xc1d8
   167a8:	mov	r6, #32
   167ac:	cmp	r1, #0
   167b0:	mov	r4, sp
   167b4:	movt	r3, #2
   167b8:	cmpne	r2, #0
   167bc:	add	r5, r4, #16
   167c0:	add	ip, r3, #16
   167c4:	vld1.64	{d16-d17}, [r3], r6
   167c8:	vld1.64	{d18-d19}, [ip]
   167cc:	vld1.64	{d20-d21}, [r3]
   167d0:	mov	r3, #10
   167d4:	vst1.64	{d16-d17}, [r4], r6
   167d8:	vst1.64	{d18-d19}, [r5]
   167dc:	vst1.64	{d20-d21}, [r4]
   167e0:	str	r3, [sp]
   167e4:	bne	167ec <__assert_fail@plt+0x5108>
   167e8:	bl	116cc <abort@plt>
   167ec:	ldr	ip, [fp, #8]
   167f0:	str	r2, [sp, #44]	; 0x2c
   167f4:	str	r1, [sp, #40]	; 0x28
   167f8:	mov	r3, sp
   167fc:	mov	r1, lr
   16800:	mov	r2, ip
   16804:	bl	1619c <__assert_fail@plt+0x4ab8>
   16808:	sub	sp, fp, #16
   1680c:	pop	{r4, r5, r6, sl, fp, pc}
   16810:	push	{r4, sl, fp, lr}
   16814:	add	fp, sp, #8
   16818:	sub	sp, sp, #48	; 0x30
   1681c:	movw	r3, #49624	; 0xc1d8
   16820:	mov	lr, #32
   16824:	mov	ip, r2
   16828:	cmp	r0, #0
   1682c:	movt	r3, #2
   16830:	cmpne	r1, #0
   16834:	add	r2, r3, #16
   16838:	vld1.64	{d16-d17}, [r3], lr
   1683c:	vld1.64	{d20-d21}, [r3]
   16840:	vld1.64	{d18-d19}, [r2]
   16844:	mov	r2, sp
   16848:	add	r4, r2, #16
   1684c:	vst1.64	{d16-d17}, [r2], lr
   16850:	vst1.64	{d20-d21}, [r2]
   16854:	mov	r2, #10
   16858:	vst1.64	{d18-d19}, [r4]
   1685c:	str	r2, [sp]
   16860:	bne	16868 <__assert_fail@plt+0x5184>
   16864:	bl	116cc <abort@plt>
   16868:	str	r1, [sp, #44]	; 0x2c
   1686c:	str	r0, [sp, #40]	; 0x28
   16870:	mov	r3, sp
   16874:	mov	r0, #0
   16878:	mov	r1, ip
   1687c:	mvn	r2, #0
   16880:	bl	1619c <__assert_fail@plt+0x4ab8>
   16884:	sub	sp, fp, #8
   16888:	pop	{r4, sl, fp, pc}
   1688c:	push	{r4, r5, fp, lr}
   16890:	add	fp, sp, #8
   16894:	sub	sp, sp, #48	; 0x30
   16898:	mov	ip, r3
   1689c:	movw	r3, #49624	; 0xc1d8
   168a0:	mov	r4, #32
   168a4:	mov	lr, r2
   168a8:	cmp	r0, #0
   168ac:	movt	r3, #2
   168b0:	cmpne	r1, #0
   168b4:	add	r2, r3, #16
   168b8:	vld1.64	{d16-d17}, [r3], r4
   168bc:	vld1.64	{d20-d21}, [r3]
   168c0:	vld1.64	{d18-d19}, [r2]
   168c4:	mov	r2, sp
   168c8:	add	r5, r2, #16
   168cc:	vst1.64	{d16-d17}, [r2], r4
   168d0:	vst1.64	{d20-d21}, [r2]
   168d4:	mov	r2, #10
   168d8:	vst1.64	{d18-d19}, [r5]
   168dc:	str	r2, [sp]
   168e0:	bne	168e8 <__assert_fail@plt+0x5204>
   168e4:	bl	116cc <abort@plt>
   168e8:	str	r1, [sp, #44]	; 0x2c
   168ec:	str	r0, [sp, #40]	; 0x28
   168f0:	mov	r3, sp
   168f4:	mov	r0, #0
   168f8:	mov	r1, lr
   168fc:	mov	r2, ip
   16900:	bl	1619c <__assert_fail@plt+0x4ab8>
   16904:	sub	sp, fp, #8
   16908:	pop	{r4, r5, fp, pc}
   1690c:	movw	r3, #49520	; 0xc170
   16910:	movt	r3, #2
   16914:	b	1619c <__assert_fail@plt+0x4ab8>
   16918:	movw	r3, #49520	; 0xc170
   1691c:	mov	r2, r1
   16920:	mov	r1, r0
   16924:	mov	r0, #0
   16928:	movt	r3, #2
   1692c:	b	1619c <__assert_fail@plt+0x4ab8>
   16930:	movw	r3, #49520	; 0xc170
   16934:	mvn	r2, #0
   16938:	movt	r3, #2
   1693c:	b	1619c <__assert_fail@plt+0x4ab8>
   16940:	movw	r3, #49520	; 0xc170
   16944:	mov	r1, r0
   16948:	mov	r0, #0
   1694c:	mvn	r2, #0
   16950:	movt	r3, #2
   16954:	b	1619c <__assert_fail@plt+0x4ab8>
   16958:	push	{r4, r5, fp, lr}
   1695c:	add	fp, sp, #8
   16960:	mov	r5, r0
   16964:	mov	r4, r1
   16968:	mov	r0, #0
   1696c:	mov	r2, #5
   16970:	mov	r1, r5
   16974:	bl	11408 <dcgettext@plt>
   16978:	cmp	r0, r5
   1697c:	popne	{r4, r5, fp, pc}
   16980:	bl	19538 <__assert_fail@plt+0x7e54>
   16984:	ldrb	r1, [r0]
   16988:	and	r1, r1, #223	; 0xdf
   1698c:	cmp	r1, #71	; 0x47
   16990:	beq	169f8 <__assert_fail@plt+0x5314>
   16994:	cmp	r1, #85	; 0x55
   16998:	bne	16a50 <__assert_fail@plt+0x536c>
   1699c:	ldrb	r1, [r0, #1]
   169a0:	and	r1, r1, #223	; 0xdf
   169a4:	cmp	r1, #84	; 0x54
   169a8:	bne	16a50 <__assert_fail@plt+0x536c>
   169ac:	ldrb	r1, [r0, #2]
   169b0:	and	r1, r1, #223	; 0xdf
   169b4:	cmp	r1, #70	; 0x46
   169b8:	bne	16a50 <__assert_fail@plt+0x536c>
   169bc:	ldrb	r1, [r0, #3]
   169c0:	cmp	r1, #45	; 0x2d
   169c4:	bne	16a50 <__assert_fail@plt+0x536c>
   169c8:	ldrb	r1, [r0, #4]
   169cc:	cmp	r1, #56	; 0x38
   169d0:	bne	16a50 <__assert_fail@plt+0x536c>
   169d4:	ldrb	r0, [r0, #5]
   169d8:	cmp	r0, #0
   169dc:	bne	16a50 <__assert_fail@plt+0x536c>
   169e0:	ldrb	r1, [r5]
   169e4:	movw	r2, #44326	; 0xad26
   169e8:	movw	r0, #44330	; 0xad2a
   169ec:	movt	r2, #1
   169f0:	movt	r0, #1
   169f4:	b	16a80 <__assert_fail@plt+0x539c>
   169f8:	ldrb	r1, [r0, #1]
   169fc:	and	r1, r1, #223	; 0xdf
   16a00:	cmp	r1, #66	; 0x42
   16a04:	bne	16a50 <__assert_fail@plt+0x536c>
   16a08:	ldrb	r1, [r0, #2]
   16a0c:	cmp	r1, #49	; 0x31
   16a10:	bne	16a50 <__assert_fail@plt+0x536c>
   16a14:	ldrb	r1, [r0, #3]
   16a18:	cmp	r1, #56	; 0x38
   16a1c:	bne	16a50 <__assert_fail@plt+0x536c>
   16a20:	ldrb	r1, [r0, #4]
   16a24:	cmp	r1, #48	; 0x30
   16a28:	bne	16a50 <__assert_fail@plt+0x536c>
   16a2c:	ldrb	r1, [r0, #5]
   16a30:	cmp	r1, #51	; 0x33
   16a34:	bne	16a50 <__assert_fail@plt+0x536c>
   16a38:	ldrb	r1, [r0, #6]
   16a3c:	cmp	r1, #48	; 0x30
   16a40:	bne	16a50 <__assert_fail@plt+0x536c>
   16a44:	ldrb	r0, [r0, #7]
   16a48:	cmp	r0, #0
   16a4c:	beq	16a6c <__assert_fail@plt+0x5388>
   16a50:	movw	r1, #44320	; 0xad20
   16a54:	movw	r0, #44324	; 0xad24
   16a58:	cmp	r4, #9
   16a5c:	movt	r1, #1
   16a60:	movt	r0, #1
   16a64:	moveq	r0, r1
   16a68:	pop	{r4, r5, fp, pc}
   16a6c:	ldrb	r1, [r5]
   16a70:	movw	r2, #44334	; 0xad2e
   16a74:	movw	r0, #44338	; 0xad32
   16a78:	movt	r2, #1
   16a7c:	movt	r0, #1
   16a80:	cmp	r1, #96	; 0x60
   16a84:	moveq	r0, r2
   16a88:	pop	{r4, r5, fp, pc}
   16a8c:	push	{r4, sl, fp, lr}
   16a90:	add	fp, sp, #8
   16a94:	mov	r4, r0
   16a98:	mov	r0, #24
   16a9c:	bl	17e70 <__assert_fail@plt+0x678c>
   16aa0:	vmov.i32	q8, #0	; 0x00000000
   16aa4:	mov	r1, r0
   16aa8:	str	r4, [r1], #8
   16aac:	vst1.64	{d16-d17}, [r1]
   16ab0:	pop	{r4, sl, fp, pc}
   16ab4:	push	{r4, sl, fp, lr}
   16ab8:	add	fp, sp, #8
   16abc:	bl	16d20 <__assert_fail@plt+0x563c>
   16ac0:	cmp	r0, #0
   16ac4:	beq	16ae8 <__assert_fail@plt+0x5404>
   16ac8:	mov	r4, r0
   16acc:	mov	r0, #24
   16ad0:	bl	17e70 <__assert_fail@plt+0x678c>
   16ad4:	vmov.i32	q8, #0	; 0x00000000
   16ad8:	mov	r1, r0
   16adc:	str	r4, [r1], #8
   16ae0:	vst1.64	{d16-d17}, [r1]
   16ae4:	pop	{r4, sl, fp, pc}
   16ae8:	mov	r0, #0
   16aec:	pop	{r4, sl, fp, pc}
   16af0:	ldr	r0, [r0]
   16af4:	bx	lr
   16af8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16afc:	add	fp, sp, #28
   16b00:	sub	sp, sp, #60	; 0x3c
   16b04:	ldr	r1, [r0]
   16b08:	ldr	r9, [r0, #12]
   16b0c:	ldr	r7, [r0, #20]
   16b10:	mov	r5, r3
   16b14:	mov	r6, r2
   16b18:	mov	sl, #255	; 0xff
   16b1c:	str	r1, [sp, #8]
   16b20:	mov	r1, r0
   16b24:	ldr	r8, [r0, #8]!
   16b28:	ldr	r4, [r1, #16]!
   16b2c:	str	r0, [sp, #4]
   16b30:	adds	r0, r2, #1
   16b34:	str	r0, [sp, #24]
   16b38:	adc	r0, r3, #0
   16b3c:	str	r1, [sp]
   16b40:	str	r0, [sp, #20]
   16b44:	subs	r0, r4, r6
   16b48:	sbcs	r0, r7, r5
   16b4c:	bcs	16bb0 <__assert_fail@plt+0x54cc>
   16b50:	mov	r2, #0
   16b54:	mov	r0, r4
   16b58:	mov	r1, r7
   16b5c:	lsl	r1, r1, #8
   16b60:	add	r2, r2, #1
   16b64:	orr	r1, r1, r0, lsr #24
   16b68:	orr	r0, sl, r0, lsl #8
   16b6c:	subs	r3, r0, r6
   16b70:	sbcs	r3, r1, r5
   16b74:	bcc	16b5c <__assert_fail@plt+0x5478>
   16b78:	ldr	r0, [sp, #8]
   16b7c:	sub	r1, fp, #36	; 0x24
   16b80:	bl	16e90 <__assert_fail@plt+0x57ac>
   16b84:	sub	r0, fp, #36	; 0x24
   16b88:	lsl	r1, r9, #8
   16b8c:	orr	r9, r1, r8, lsr #24
   16b90:	ldrb	r1, [r0], #1
   16b94:	orr	r8, r1, r8, lsl #8
   16b98:	lsl	r1, r7, #8
   16b9c:	orr	r7, r1, r4, lsr #24
   16ba0:	orr	r4, sl, r4, lsl #8
   16ba4:	subs	r1, r4, r6
   16ba8:	sbcs	r1, r7, r5
   16bac:	bcc	16b88 <__assert_fail@plt+0x54a4>
   16bb0:	eor	r0, r4, r6
   16bb4:	eor	r1, r7, r5
   16bb8:	orrs	r0, r0, r1
   16bbc:	beq	16c98 <__assert_fail@plt+0x55b4>
   16bc0:	str	r4, [fp, #-40]	; 0xffffffd8
   16bc4:	ldr	r4, [sp, #24]
   16bc8:	str	r7, [sp, #44]	; 0x2c
   16bcc:	ldr	r7, [sp, #20]
   16bd0:	mov	r0, r8
   16bd4:	mov	r1, r9
   16bd8:	mov	r2, r4
   16bdc:	mov	r3, r7
   16be0:	bl	19bbc <__assert_fail@plt+0x84d8>
   16be4:	umull	r2, r3, r0, r4
   16be8:	str	r0, [sp, #16]
   16bec:	str	r1, [sp, #12]
   16bf0:	str	r8, [sp, #40]	; 0x28
   16bf4:	str	r9, [sp, #36]	; 0x24
   16bf8:	mla	r0, r0, r7, r3
   16bfc:	mov	r3, r7
   16c00:	mla	r1, r1, r4, r0
   16c04:	ldr	r0, [fp, #-40]	; 0xffffffd8
   16c08:	subs	r8, r8, r2
   16c0c:	sbc	r9, r9, r1
   16c10:	subs	r2, r0, r6
   16c14:	ldr	r0, [sp, #44]	; 0x2c
   16c18:	str	r2, [sp, #32]
   16c1c:	sbc	r1, r0, r5
   16c20:	mov	r0, r2
   16c24:	mov	r2, r4
   16c28:	str	r1, [sp, #28]
   16c2c:	bl	19bbc <__assert_fail@plt+0x84d8>
   16c30:	umull	r2, r3, r0, r4
   16c34:	mov	ip, r1
   16c38:	mla	r3, r0, r7, r3
   16c3c:	mla	r3, r1, r4, r3
   16c40:	ldr	r1, [sp, #32]
   16c44:	subs	r2, r1, r2
   16c48:	ldr	r1, [sp, #28]
   16c4c:	sbc	r3, r1, r3
   16c50:	ldr	r1, [fp, #-40]	; 0xffffffd8
   16c54:	subs	r4, r2, #1
   16c58:	sbc	r7, r3, #0
   16c5c:	subs	r2, r1, r2
   16c60:	ldr	r1, [sp, #44]	; 0x2c
   16c64:	sbc	r3, r1, r3
   16c68:	ldr	r1, [sp, #40]	; 0x28
   16c6c:	subs	r2, r2, r1
   16c70:	ldr	r1, [sp, #36]	; 0x24
   16c74:	sbcs	r2, r3, r1
   16c78:	bcc	16b44 <__assert_fail@plt+0x5460>
   16c7c:	ldr	r2, [sp, #4]
   16c80:	ldr	r3, [sp, #16]
   16c84:	ldr	r7, [sp, #12]
   16c88:	stm	r2, {r3, r7}
   16c8c:	ldr	r2, [sp]
   16c90:	stm	r2, {r0, ip}
   16c94:	b	16ca4 <__assert_fail@plt+0x55c0>
   16c98:	ldr	r0, [sp, #4]
   16c9c:	vmov.i32	q8, #0	; 0x00000000
   16ca0:	vst1.64	{d16-d17}, [r0]
   16ca4:	mov	r0, r8
   16ca8:	mov	r1, r9
   16cac:	sub	sp, fp, #28
   16cb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cb4:	push	{r4, sl, fp, lr}
   16cb8:	add	fp, sp, #8
   16cbc:	mov	r1, #24
   16cc0:	mvn	r2, #0
   16cc4:	mov	r4, r0
   16cc8:	bl	11618 <__explicit_bzero_chk@plt>
   16ccc:	mov	r0, r4
   16cd0:	pop	{r4, sl, fp, lr}
   16cd4:	b	13fb0 <__assert_fail@plt+0x28cc>
   16cd8:	push	{r4, r5, r6, r7, fp, lr}
   16cdc:	add	fp, sp, #16
   16ce0:	mov	r4, r0
   16ce4:	ldr	r0, [r0]
   16ce8:	bl	16fe8 <__assert_fail@plt+0x5904>
   16cec:	mov	r5, r0
   16cf0:	bl	11558 <__errno_location@plt>
   16cf4:	ldr	r7, [r0]
   16cf8:	mov	r6, r0
   16cfc:	mov	r0, r4
   16d00:	mov	r1, #24
   16d04:	mvn	r2, #0
   16d08:	bl	11618 <__explicit_bzero_chk@plt>
   16d0c:	mov	r0, r4
   16d10:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16d14:	mov	r0, r5
   16d18:	str	r7, [r6]
   16d1c:	pop	{r4, r5, r6, r7, fp, pc}
   16d20:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   16d24:	add	fp, sp, #24
   16d28:	cmp	r1, #0
   16d2c:	beq	16d68 <__assert_fail@plt+0x5684>
   16d30:	mov	r5, r1
   16d34:	mov	r6, r0
   16d38:	cmp	r0, #0
   16d3c:	beq	16d90 <__assert_fail@plt+0x56ac>
   16d40:	movw	r1, #44428	; 0xad8c
   16d44:	mov	r0, r6
   16d48:	movt	r1, #1
   16d4c:	bl	193e0 <__assert_fail@plt+0x7cfc>
   16d50:	mov	r7, r0
   16d54:	cmp	r0, #0
   16d58:	bne	16d94 <__assert_fail@plt+0x56b0>
   16d5c:	mov	r9, #0
   16d60:	mov	r0, r9
   16d64:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d68:	movw	r0, #2076	; 0x81c
   16d6c:	bl	17e70 <__assert_fail@plt+0x678c>
   16d70:	movw	r1, #28712	; 0x7028
   16d74:	mov	r9, r0
   16d78:	mov	r0, #0
   16d7c:	movt	r1, #1
   16d80:	stm	r9, {r0, r1}
   16d84:	str	r0, [r9, #8]
   16d88:	mov	r0, r9
   16d8c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16d90:	mov	r7, #0
   16d94:	movw	r0, #2076	; 0x81c
   16d98:	bl	17e70 <__assert_fail@plt+0x678c>
   16d9c:	mov	r9, r0
   16da0:	movw	r0, #28712	; 0x7028
   16da4:	cmp	r7, #0
   16da8:	movt	r0, #1
   16dac:	str	r7, [r9]
   16db0:	stmib	r9, {r0, r6}
   16db4:	beq	16ddc <__assert_fail@plt+0x56f8>
   16db8:	cmp	r5, #2048	; 0x800
   16dbc:	add	r1, r9, #12
   16dc0:	mov	r0, r7
   16dc4:	mov	r2, #0
   16dc8:	movcs	r5, #2048	; 0x800
   16dcc:	mov	r3, r5
   16dd0:	bl	1157c <setvbuf@plt>
   16dd4:	mov	r0, r9
   16dd8:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16ddc:	cmp	r5, #1024	; 0x400
   16de0:	mov	r0, #0
   16de4:	add	r8, r9, #16
   16de8:	movcs	r5, #1024	; 0x400
   16dec:	str	r0, [r9, #12]
   16df0:	cmp	r5, #1
   16df4:	blt	16e70 <__assert_fail@plt+0x578c>
   16df8:	add	r6, r8, r5
   16dfc:	mov	r5, r8
   16e00:	b	16e10 <__assert_fail@plt+0x572c>
   16e04:	add	r5, r5, r0
   16e08:	cmp	r5, r6
   16e0c:	bcs	16e70 <__assert_fail@plt+0x578c>
   16e10:	sub	r1, r6, r5
   16e14:	mov	r0, r5
   16e18:	mov	r2, #0
   16e1c:	bl	11678 <getrandom@plt>
   16e20:	cmp	r0, #0
   16e24:	bpl	16e04 <__assert_fail@plt+0x5720>
   16e28:	bl	11558 <__errno_location@plt>
   16e2c:	ldr	r4, [r0]
   16e30:	cmp	r4, #4
   16e34:	beq	16e08 <__assert_fail@plt+0x5724>
   16e38:	ldr	r5, [r9]
   16e3c:	mov	r7, r0
   16e40:	mov	r0, r9
   16e44:	movw	r1, #2076	; 0x81c
   16e48:	movw	r2, #2076	; 0x81c
   16e4c:	bl	11618 <__explicit_bzero_chk@plt>
   16e50:	mov	r0, r9
   16e54:	bl	13fb0 <__assert_fail@plt+0x28cc>
   16e58:	cmp	r5, #0
   16e5c:	beq	16e68 <__assert_fail@plt+0x5784>
   16e60:	mov	r0, r5
   16e64:	bl	192e8 <__assert_fail@plt+0x7c04>
   16e68:	str	r4, [r7]
   16e6c:	b	16d5c <__assert_fail@plt+0x5678>
   16e70:	mov	r0, r8
   16e74:	bl	172dc <__assert_fail@plt+0x5bf8>
   16e78:	mov	r0, r9
   16e7c:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16e80:	str	r1, [r0, #4]
   16e84:	bx	lr
   16e88:	str	r1, [r0, #8]
   16e8c:	bx	lr
   16e90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e94:	add	fp, sp, #28
   16e98:	sub	sp, sp, #4
   16e9c:	ldr	r3, [r0]
   16ea0:	mov	r6, r2
   16ea4:	mov	r5, r1
   16ea8:	mov	sl, r0
   16eac:	cmp	r3, #0
   16eb0:	beq	16f2c <__assert_fail@plt+0x5848>
   16eb4:	mov	r0, r5
   16eb8:	mov	r1, #1
   16ebc:	mov	r2, r6
   16ec0:	bl	1166c <fread_unlocked@plt>
   16ec4:	mov	r4, r0
   16ec8:	sub	r6, r6, r0
   16ecc:	bl	11558 <__errno_location@plt>
   16ed0:	cmp	r6, #0
   16ed4:	beq	16f24 <__assert_fail@plt+0x5840>
   16ed8:	mov	r7, r0
   16edc:	ldr	r1, [sl]
   16ee0:	ldr	r0, [r7]
   16ee4:	ldr	r1, [r1]
   16ee8:	lsl	r1, r1, #26
   16eec:	and	r0, r0, r1, asr #31
   16ef0:	str	r0, [r7]
   16ef4:	ldr	r1, [sl, #4]
   16ef8:	ldr	r0, [sl, #8]
   16efc:	blx	r1
   16f00:	ldr	r3, [sl]
   16f04:	add	r5, r5, r4
   16f08:	mov	r1, #1
   16f0c:	mov	r2, r6
   16f10:	mov	r0, r5
   16f14:	bl	1166c <fread_unlocked@plt>
   16f18:	mov	r4, r0
   16f1c:	subs	r6, r6, r0
   16f20:	bne	16edc <__assert_fail@plt+0x57f8>
   16f24:	sub	sp, fp, #28
   16f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f2c:	ldr	r7, [sl, #12]
   16f30:	movw	r0, #1052	; 0x41c
   16f34:	add	r9, sl, r0
   16f38:	sub	r0, r9, r7
   16f3c:	cmp	r7, r6
   16f40:	add	r1, r0, #1024	; 0x400
   16f44:	bcs	16fbc <__assert_fail@plt+0x58d8>
   16f48:	add	r8, sl, #16
   16f4c:	mov	r0, r5
   16f50:	mov	r2, r7
   16f54:	bl	113cc <memcpy@plt>
   16f58:	add	r5, r5, r7
   16f5c:	sub	r6, r6, r7
   16f60:	tst	r5, #3
   16f64:	beq	16fa0 <__assert_fail@plt+0x58bc>
   16f68:	mov	r0, r8
   16f6c:	mov	r1, r9
   16f70:	bl	17098 <__assert_fail@plt+0x59b4>
   16f74:	mov	r7, #1024	; 0x400
   16f78:	cmp	r6, #1024	; 0x400
   16f7c:	mov	r1, r9
   16f80:	bhi	16f4c <__assert_fail@plt+0x5868>
   16f84:	b	16fc0 <__assert_fail@plt+0x58dc>
   16f88:	mov	r0, r8
   16f8c:	mov	r1, r5
   16f90:	bl	17098 <__assert_fail@plt+0x59b4>
   16f94:	subs	r6, r6, #1024	; 0x400
   16f98:	add	r5, r5, #1024	; 0x400
   16f9c:	beq	16fe0 <__assert_fail@plt+0x58fc>
   16fa0:	cmp	r6, #1024	; 0x400
   16fa4:	bcs	16f88 <__assert_fail@plt+0x58a4>
   16fa8:	mov	r0, r8
   16fac:	mov	r1, r9
   16fb0:	bl	17098 <__assert_fail@plt+0x59b4>
   16fb4:	mov	r7, #1024	; 0x400
   16fb8:	b	16fc0 <__assert_fail@plt+0x58dc>
   16fbc:	mov	r9, r1
   16fc0:	mov	r0, r5
   16fc4:	mov	r1, r9
   16fc8:	mov	r2, r6
   16fcc:	bl	113cc <memcpy@plt>
   16fd0:	sub	r0, r7, r6
   16fd4:	str	r0, [sl, #12]
   16fd8:	sub	sp, fp, #28
   16fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16fe0:	mov	r0, #0
   16fe4:	b	16fd4 <__assert_fail@plt+0x58f0>
   16fe8:	push	{r4, r5, fp, lr}
   16fec:	add	fp, sp, #8
   16ff0:	ldr	r4, [r0]
   16ff4:	movw	r1, #2076	; 0x81c
   16ff8:	mvn	r2, #0
   16ffc:	mov	r5, r0
   17000:	bl	11618 <__explicit_bzero_chk@plt>
   17004:	mov	r0, r5
   17008:	bl	13fb0 <__assert_fail@plt+0x28cc>
   1700c:	cmp	r4, #0
   17010:	beq	17020 <__assert_fail@plt+0x593c>
   17014:	mov	r0, r4
   17018:	pop	{r4, r5, fp, lr}
   1701c:	b	192e8 <__assert_fail@plt+0x7c04>
   17020:	mov	r0, #0
   17024:	pop	{r4, r5, fp, pc}
   17028:	push	{fp, lr}
   1702c:	mov	fp, sp
   17030:	cmp	r0, #0
   17034:	beq	17094 <__assert_fail@plt+0x59b0>
   17038:	mov	r4, r0
   1703c:	movw	r0, #49496	; 0xc158
   17040:	movt	r0, #2
   17044:	ldr	r5, [r0]
   17048:	bl	11558 <__errno_location@plt>
   1704c:	ldr	r6, [r0]
   17050:	movw	r0, #44431	; 0xad8f
   17054:	movw	r1, #44447	; 0xad9f
   17058:	mov	r2, #5
   1705c:	movt	r0, #1
   17060:	movt	r1, #1
   17064:	cmp	r6, #0
   17068:	moveq	r1, r0
   1706c:	mov	r0, #0
   17070:	bl	11408 <dcgettext@plt>
   17074:	mov	r7, r0
   17078:	mov	r0, r4
   1707c:	bl	16940 <__assert_fail@plt+0x525c>
   17080:	mov	r3, r0
   17084:	mov	r0, r5
   17088:	mov	r1, r6
   1708c:	mov	r2, r7
   17090:	bl	114b0 <error@plt>
   17094:	bl	116cc <abort@plt>
   17098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1709c:	add	fp, sp, #28
   170a0:	sub	sp, sp, #8
   170a4:	ldr	r7, [r0, #1032]	; 0x408
   170a8:	ldr	r2, [r0, #1028]	; 0x404
   170ac:	ldr	r3, [r0, #1024]	; 0x400
   170b0:	add	ip, r0, #512	; 0x200
   170b4:	mov	r8, #0
   170b8:	add	r7, r7, #1
   170bc:	add	r6, r7, r2
   170c0:	str	r7, [r0, #1032]	; 0x408
   170c4:	mov	r7, r0
   170c8:	eor	r3, r3, r3, lsl #13
   170cc:	ldr	r4, [r7, r8]!
   170d0:	ldr	r2, [r7, #512]	; 0x200
   170d4:	and	r5, r4, #1020	; 0x3fc
   170d8:	ldr	r5, [r0, r5]
   170dc:	add	r2, r3, r2
   170e0:	add	r3, r2, r6
   170e4:	eor	r2, r2, r2, lsr #6
   170e8:	add	r3, r3, r5
   170ec:	str	r3, [r7]
   170f0:	ubfx	r3, r3, #10, #8
   170f4:	ldr	r3, [r0, r3, lsl #2]
   170f8:	add	r3, r3, r4
   170fc:	mov	r4, r1
   17100:	str	r3, [r4, r8]!
   17104:	add	r8, r8, #16
   17108:	ldr	r5, [r7, #516]	; 0x204
   1710c:	ldr	r6, [r7, #4]
   17110:	add	lr, r0, r8
   17114:	cmp	lr, ip
   17118:	add	r2, r5, r2
   1711c:	and	r5, r6, #1020	; 0x3fc
   17120:	ldr	r5, [r0, r5]
   17124:	add	r3, r2, r3
   17128:	eor	r2, r2, r2, lsl #2
   1712c:	add	r3, r3, r5
   17130:	str	r3, [r7, #4]
   17134:	ubfx	r3, r3, #10, #8
   17138:	ldr	r3, [r0, r3, lsl #2]
   1713c:	add	r3, r3, r6
   17140:	str	r3, [r4, #4]
   17144:	ldr	r5, [r7, #520]	; 0x208
   17148:	ldr	r6, [r7, #8]
   1714c:	add	r2, r5, r2
   17150:	and	r5, r6, #1020	; 0x3fc
   17154:	ldr	r5, [r0, r5]
   17158:	add	r3, r2, r3
   1715c:	eor	r2, r2, r2, lsr #16
   17160:	add	r3, r3, r5
   17164:	str	r3, [r7, #8]
   17168:	ubfx	r3, r3, #10, #8
   1716c:	ldr	r3, [r0, r3, lsl #2]
   17170:	add	r6, r3, r6
   17174:	str	r6, [r4, #8]
   17178:	ldr	r3, [r7, #524]	; 0x20c
   1717c:	ldr	r5, [r7, #12]
   17180:	add	r3, r3, r2
   17184:	add	r2, r3, r6
   17188:	and	r6, r5, #1020	; 0x3fc
   1718c:	ldr	r6, [r0, r6]
   17190:	add	r2, r2, r6
   17194:	str	r2, [r7, #12]
   17198:	ubfx	r2, r2, #10, #8
   1719c:	ldr	r2, [r0, r2, lsl #2]
   171a0:	add	r6, r2, r5
   171a4:	str	r6, [r4, #12]
   171a8:	bcc	170c4 <__assert_fail@plt+0x59e0>
   171ac:	add	r2, r1, r8
   171b0:	mov	r5, #0
   171b4:	str	r2, [sp, #4]
   171b8:	add	r2, r0, #1024	; 0x400
   171bc:	str	r2, [sp]
   171c0:	ldr	r2, [lr, r5]
   171c4:	eor	r3, r3, r3, lsl #13
   171c8:	and	r7, r2, #1020	; 0x3fc
   171cc:	ldr	sl, [r0, r7]
   171d0:	add	r7, lr, r5
   171d4:	ldr	r4, [r7, #-512]	; 0xfffffe00
   171d8:	add	r3, r3, r4
   171dc:	add	r4, r3, r6
   171e0:	eor	r3, r3, r3, lsr #6
   171e4:	add	r4, r4, sl
   171e8:	str	r4, [lr, r5]
   171ec:	ubfx	r4, r4, #10, #8
   171f0:	ldr	r6, [sp, #4]
   171f4:	ldr	r4, [r0, r4, lsl #2]
   171f8:	add	r2, r4, r2
   171fc:	str	r2, [r6, r5]
   17200:	ldr	r4, [r7, #-508]	; 0xfffffe04
   17204:	add	r3, r4, r3
   17208:	add	r4, r0, r5
   1720c:	add	r6, r4, r8
   17210:	add	sl, r3, r2
   17214:	ldr	r4, [r6, #4]
   17218:	and	r2, r4, #1020	; 0x3fc
   1721c:	ldr	r2, [r0, r2]
   17220:	add	r2, sl, r2
   17224:	eor	sl, r3, r3, lsl #2
   17228:	str	r2, [r6, #4]
   1722c:	ubfx	r2, r2, #10, #8
   17230:	ldr	r2, [r0, r2, lsl #2]
   17234:	add	r2, r2, r4
   17238:	add	r4, r1, r5
   1723c:	add	ip, r4, r8
   17240:	str	r2, [ip, #4]
   17244:	ldr	r3, [r7, #-504]	; 0xfffffe08
   17248:	add	r3, r3, sl
   1724c:	add	sl, r3, r2
   17250:	ldr	r2, [r7, #8]
   17254:	eor	r3, r3, r3, lsr #16
   17258:	and	r9, r2, #1020	; 0x3fc
   1725c:	ldr	r4, [r0, r9]
   17260:	add	r4, sl, r4
   17264:	str	r4, [r7, #8]
   17268:	ubfx	r4, r4, #10, #8
   1726c:	ldr	r4, [r0, r4, lsl #2]
   17270:	add	r2, r4, r2
   17274:	str	r2, [ip, #8]
   17278:	mov	ip, r1
   1727c:	ldr	r4, [r7, #-500]	; 0xfffffe0c
   17280:	add	r3, r4, r3
   17284:	ldr	r4, [r6, #12]
   17288:	add	r2, r3, r2
   1728c:	and	r1, r4, #1020	; 0x3fc
   17290:	ldr	r1, [r0, r1]
   17294:	add	r1, r2, r1
   17298:	str	r1, [r6, #12]
   1729c:	ubfx	r1, r1, #10, #8
   172a0:	ldr	r2, [sp]
   172a4:	ldr	r1, [r0, r1, lsl #2]
   172a8:	add	r6, r1, r4
   172ac:	ldr	r1, [sp, #4]
   172b0:	add	r1, r1, r5
   172b4:	add	r5, r5, #16
   172b8:	str	r6, [r1, #12]
   172bc:	add	r1, r7, #16
   172c0:	cmp	r1, r2
   172c4:	mov	r1, ip
   172c8:	bcc	171c0 <__assert_fail@plt+0x5adc>
   172cc:	str	r3, [r0, #1024]	; 0x400
   172d0:	str	r6, [r0, #1028]	; 0x404
   172d4:	sub	sp, fp, #28
   172d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   172dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   172e0:	add	fp, sp, #28
   172e4:	sub	sp, sp, #28
   172e8:	str	r0, [sp, #20]
   172ec:	add	r7, r0, #28
   172f0:	movw	r0, #19064	; 0x4a78
   172f4:	movw	r6, #57178	; 0xdf5a
   172f8:	movw	r5, #89	; 0x59
   172fc:	movw	r1, #15947	; 0x3e4b
   17300:	movw	sl, #6872	; 0x1ad8
   17304:	movw	r8, #15433	; 0x3c49
   17308:	movw	lr, #37145	; 0x9119
   1730c:	mov	r9, #0
   17310:	movt	r0, #55594	; 0xd92a
   17314:	movt	r6, #4967	; 0x1367
   17318:	movt	r5, #38361	; 0x95d9
   1731c:	movt	r1, #49942	; 0xc316
   17320:	movt	sl, #3906	; 0xf42
   17324:	movt	r8, #42266	; 0xa51a
   17328:	movt	lr, #12384	; 0x3060
   1732c:	str	r0, [sp, #16]
   17330:	movw	r0, #59931	; 0xea1b
   17334:	movt	r0, #50415	; 0xc4ef
   17338:	ldr	r3, [r7, #-28]	; 0xffffffe4
   1733c:	str	r0, [sp, #24]
   17340:	ldr	r0, [r7]
   17344:	str	lr, [sp, #4]
   17348:	add	r6, r3, r6
   1734c:	ldr	r3, [sp, #20]
   17350:	str	r0, [sp, #12]
   17354:	add	r3, r3, r9, lsl #2
   17358:	add	r9, r9, #8
   1735c:	cmp	r9, #256	; 0x100
   17360:	ldmib	r3, {r2, lr}
   17364:	ldr	r0, [r3, #12]
   17368:	add	r4, lr, r1
   1736c:	ldr	ip, [r3, #16]
   17370:	add	r5, r2, r5
   17374:	eor	r6, r6, r5, lsl #11
   17378:	add	r2, r0, sl
   1737c:	add	r5, r4, r5
   17380:	add	r2, r2, r6
   17384:	str	r6, [sp, #8]
   17388:	add	r6, r2, r4
   1738c:	eor	r4, r5, r4, lsr #2
   17390:	eor	r0, r6, r2, lsl #8
   17394:	ldr	r6, [r3, #20]
   17398:	str	r4, [sp]
   1739c:	add	r1, r6, r8
   173a0:	ldr	r6, [sp, #16]
   173a4:	add	r1, r1, r0
   173a8:	add	r5, ip, r6
   173ac:	add	r5, r5, r4
   173b0:	ldr	r4, [sp, #4]
   173b4:	add	r2, r5, r2
   173b8:	add	r6, r1, r5
   173bc:	eor	sl, r2, r5, lsr #16
   173c0:	ldr	r5, [r3, #24]
   173c4:	ldr	r2, [sp, #24]
   173c8:	eor	ip, r6, r1, lsl #10
   173cc:	ldr	r6, [sp, #12]
   173d0:	str	ip, [sp, #16]
   173d4:	add	r5, r5, r2
   173d8:	add	r6, r6, r4
   173dc:	ldr	r2, [sp]
   173e0:	add	r5, r5, sl
   173e4:	add	r6, r6, ip
   173e8:	add	r1, r5, r1
   173ec:	eor	r8, r1, r5, lsr #4
   173f0:	ldr	r1, [sp, #8]
   173f4:	add	r5, r6, r5
   173f8:	add	r4, r8, r1
   173fc:	add	r1, r4, r6
   17400:	eor	lr, r1, r4, lsr #9
   17404:	add	r1, lr, r0
   17408:	eor	r0, r5, r6, lsl #8
   1740c:	add	r5, r0, r2
   17410:	add	r6, r5, r4
   17414:	str	r6, [r7, #-28]	; 0xffffffe4
   17418:	str	r5, [r3, #4]
   1741c:	str	r1, [r3, #8]
   17420:	str	sl, [r3, #12]
   17424:	str	ip, [r3, #16]
   17428:	str	r8, [r3, #20]
   1742c:	str	r0, [r3, #24]
   17430:	str	lr, [r7]
   17434:	add	r7, r7, #32
   17438:	bcc	17338 <__assert_fail@plt+0x5c54>
   1743c:	ldr	r3, [sp, #20]
   17440:	ldr	r9, [sp, #16]
   17444:	mov	r4, #0
   17448:	add	r7, r3, #28
   1744c:	str	r0, [sp, #24]
   17450:	ldr	r0, [r7]
   17454:	ldr	r3, [r7, #-28]	; 0xffffffe4
   17458:	str	r0, [sp, #16]
   1745c:	add	r0, r3, r6
   17460:	str	r0, [sp, #12]
   17464:	ldr	r0, [sp, #20]
   17468:	add	r3, r0, r4, lsl #2
   1746c:	add	r4, r4, #8
   17470:	cmp	r4, #256	; 0x100
   17474:	ldr	r2, [r3, #16]
   17478:	ldmib	r3, {r6, ip}
   1747c:	ldr	r0, [r3, #12]
   17480:	add	r1, ip, r1
   17484:	add	r5, r6, r5
   17488:	str	r2, [sp, #8]
   1748c:	ldr	r2, [sp, #12]
   17490:	add	r0, r0, sl
   17494:	eor	r2, r2, r5, lsl #11
   17498:	add	r0, r0, r2
   1749c:	str	r2, [sp, #12]
   174a0:	add	r2, r0, r1
   174a4:	eor	ip, r2, r0, lsl #8
   174a8:	ldr	r2, [r3, #20]
   174ac:	add	r2, r2, r8
   174b0:	add	r6, r2, ip
   174b4:	add	r2, r1, r5
   174b8:	eor	r5, r2, r1, lsr #2
   174bc:	ldr	r1, [sp, #8]
   174c0:	add	r1, r1, r9
   174c4:	add	r1, r1, r5
   174c8:	add	r0, r1, r0
   174cc:	add	r2, r6, r1
   174d0:	eor	sl, r0, r1, lsr #16
   174d4:	ldr	r0, [r3, #24]
   174d8:	ldr	r1, [sp, #24]
   174dc:	eor	r9, r2, r6, lsl #10
   174e0:	ldr	r2, [sp, #16]
   174e4:	add	r0, r0, r1
   174e8:	add	r2, r2, lr
   174ec:	add	r0, r0, sl
   174f0:	add	lr, r2, r9
   174f4:	add	r1, r0, r6
   174f8:	eor	r8, r1, r0, lsr #4
   174fc:	ldr	r1, [sp, #12]
   17500:	add	r0, lr, r0
   17504:	eor	r0, r0, lr, lsl #8
   17508:	add	r5, r0, r5
   1750c:	add	r6, r8, r1
   17510:	add	r1, r6, lr
   17514:	eor	r1, r1, r6, lsr #9
   17518:	add	r6, r5, r6
   1751c:	str	r6, [r7, #-28]	; 0xffffffe4
   17520:	str	r5, [r3, #4]
   17524:	add	r2, r1, ip
   17528:	mov	lr, r1
   1752c:	str	r2, [r3, #8]
   17530:	str	sl, [r3, #12]
   17534:	str	r9, [r3, #16]
   17538:	str	r8, [r3, #20]
   1753c:	str	r0, [r3, #24]
   17540:	str	lr, [r7]
   17544:	mov	r1, r2
   17548:	add	r7, r7, #32
   1754c:	bcc	1744c <__assert_fail@plt+0x5d68>
   17550:	ldr	r0, [sp, #20]
   17554:	mov	r1, #0
   17558:	str	r1, [r0, #1024]	; 0x400
   1755c:	str	r1, [r0, #1028]	; 0x404
   17560:	str	r1, [r0, #1032]	; 0x408
   17564:	sub	sp, fp, #28
   17568:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1756c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17570:	add	fp, sp, #28
   17574:	sub	sp, sp, #220	; 0xdc
   17578:	ldr	r7, [fp, #8]
   1757c:	mov	r4, r3
   17580:	mov	r9, r2
   17584:	mov	r6, r1
   17588:	mov	sl, r0
   1758c:	str	r7, [sp]
   17590:	bl	11594 <renameat2@plt>
   17594:	mov	r5, r0
   17598:	bl	11558 <__errno_location@plt>
   1759c:	cmn	r5, #1
   175a0:	bgt	17664 <__assert_fail@plt+0x5f80>
   175a4:	mov	r8, r0
   175a8:	ldr	r0, [r0]
   175ac:	cmp	r0, #22
   175b0:	cmpne	r0, #95	; 0x5f
   175b4:	bne	1760c <__assert_fail@plt+0x5f28>
   175b8:	cmp	r7, #0
   175bc:	beq	17618 <__assert_fail@plt+0x5f34>
   175c0:	cmp	r7, #1
   175c4:	bne	17658 <__assert_fail@plt+0x5f74>
   175c8:	mov	r0, #256	; 0x100
   175cc:	add	r3, sp, #8
   175d0:	mov	r1, r9
   175d4:	mov	r2, r4
   175d8:	str	r0, [sp]
   175dc:	mov	r0, #3
   175e0:	bl	11438 <__fxstatat64@plt>
   175e4:	cmp	r0, #0
   175e8:	beq	17604 <__assert_fail@plt+0x5f20>
   175ec:	ldr	r0, [r8]
   175f0:	cmp	r0, #2
   175f4:	beq	176d8 <__assert_fail@plt+0x5ff4>
   175f8:	mvn	r5, #0
   175fc:	cmp	r0, #75	; 0x4b
   17600:	bne	17664 <__assert_fail@plt+0x5f80>
   17604:	mov	r0, #17
   17608:	b	1765c <__assert_fail@plt+0x5f78>
   1760c:	cmp	r0, #38	; 0x26
   17610:	beq	175b8 <__assert_fail@plt+0x5ed4>
   17614:	b	17664 <__assert_fail@plt+0x5f80>
   17618:	mov	r7, #0
   1761c:	mov	r0, r6
   17620:	bl	11534 <strlen@plt>
   17624:	mov	r5, r0
   17628:	mov	r0, r4
   1762c:	bl	11534 <strlen@plt>
   17630:	cmp	r5, #0
   17634:	cmpne	r0, #0
   17638:	bne	17670 <__assert_fail@plt+0x5f8c>
   1763c:	mov	r0, sl
   17640:	mov	r1, r6
   17644:	mov	r2, r9
   17648:	mov	r3, r4
   1764c:	bl	11654 <renameat@plt>
   17650:	mov	r5, r0
   17654:	b	17664 <__assert_fail@plt+0x5f80>
   17658:	mov	r0, #95	; 0x5f
   1765c:	str	r0, [r8]
   17660:	mvn	r5, #0
   17664:	mov	r0, r5
   17668:	sub	sp, fp, #28
   1766c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17670:	add	r1, r5, r6
   17674:	ldrb	r1, [r1, #-1]
   17678:	cmp	r1, #47	; 0x2f
   1767c:	beq	17690 <__assert_fail@plt+0x5fac>
   17680:	add	r0, r0, r4
   17684:	ldrb	r0, [r0, #-1]
   17688:	cmp	r0, #47	; 0x2f
   1768c:	bne	1763c <__assert_fail@plt+0x5f58>
   17690:	mov	r0, #256	; 0x100
   17694:	add	r3, sp, #112	; 0x70
   17698:	mov	r1, sl
   1769c:	mov	r2, r6
   176a0:	str	r0, [sp]
   176a4:	mov	r0, #3
   176a8:	bl	11438 <__fxstatat64@plt>
   176ac:	mvn	r5, #0
   176b0:	cmp	r0, #0
   176b4:	bne	17664 <__assert_fail@plt+0x5f80>
   176b8:	cmp	r7, #0
   176bc:	beq	176e0 <__assert_fail@plt+0x5ffc>
   176c0:	ldr	r0, [sp, #128]	; 0x80
   176c4:	and	r0, r0, #61440	; 0xf000
   176c8:	cmp	r0, #16384	; 0x4000
   176cc:	beq	1763c <__assert_fail@plt+0x5f58>
   176d0:	mov	r0, #2
   176d4:	b	17750 <__assert_fail@plt+0x606c>
   176d8:	mov	r7, #1
   176dc:	b	1761c <__assert_fail@plt+0x5f38>
   176e0:	mov	r0, #256	; 0x100
   176e4:	add	r3, sp, #8
   176e8:	mov	r1, r9
   176ec:	mov	r2, r4
   176f0:	str	r0, [sp]
   176f4:	mov	r0, #3
   176f8:	bl	11438 <__fxstatat64@plt>
   176fc:	cmp	r0, #0
   17700:	beq	17724 <__assert_fail@plt+0x6040>
   17704:	ldr	r0, [r8]
   17708:	cmp	r0, #2
   1770c:	bne	17664 <__assert_fail@plt+0x5f80>
   17710:	ldr	r0, [sp, #128]	; 0x80
   17714:	and	r0, r0, #61440	; 0xf000
   17718:	cmp	r0, #16384	; 0x4000
   1771c:	beq	1763c <__assert_fail@plt+0x5f58>
   17720:	b	17664 <__assert_fail@plt+0x5f80>
   17724:	ldr	r0, [sp, #24]
   17728:	and	r0, r0, #61440	; 0xf000
   1772c:	cmp	r0, #16384	; 0x4000
   17730:	bne	1774c <__assert_fail@plt+0x6068>
   17734:	ldr	r0, [sp, #128]	; 0x80
   17738:	and	r0, r0, #61440	; 0xf000
   1773c:	cmp	r0, #16384	; 0x4000
   17740:	beq	1763c <__assert_fail@plt+0x5f58>
   17744:	mov	r0, #21
   17748:	b	17750 <__assert_fail@plt+0x606c>
   1774c:	mov	r0, #20
   17750:	str	r0, [r8]
   17754:	b	17664 <__assert_fail@plt+0x5f80>
   17758:	push	{r4, r5, r6, r7, fp, lr}
   1775c:	add	fp, sp, #16
   17760:	mov	r4, r0
   17764:	cmp	r0, #2
   17768:	bhi	17798 <__assert_fail@plt+0x60b4>
   1776c:	mov	r0, r4
   17770:	bl	19610 <__assert_fail@plt+0x7f2c>
   17774:	mov	r5, r0
   17778:	bl	11558 <__errno_location@plt>
   1777c:	ldr	r7, [r0]
   17780:	mov	r6, r0
   17784:	mov	r0, r4
   17788:	bl	116d8 <close@plt>
   1778c:	mov	r0, r5
   17790:	str	r7, [r6]
   17794:	pop	{r4, r5, r6, r7, fp, pc}
   17798:	mov	r0, r4
   1779c:	pop	{r4, r5, r6, r7, fp, pc}
   177a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   177a4:	add	fp, sp, #24
   177a8:	sub	sp, sp, #32
   177ac:	ldr	r6, [fp, #12]
   177b0:	ldr	r7, [fp, #8]
   177b4:	mov	r4, r2
   177b8:	mov	r8, r0
   177bc:	cmp	r1, #0
   177c0:	beq	177e8 <__assert_fail@plt+0x6104>
   177c4:	movw	r2, #44462	; 0xadae
   177c8:	mov	r5, r1
   177cc:	str	r3, [sp, #4]
   177d0:	str	r4, [sp]
   177d4:	mov	r0, r8
   177d8:	mov	r1, #1
   177dc:	movt	r2, #1
   177e0:	mov	r3, r5
   177e4:	b	17800 <__assert_fail@plt+0x611c>
   177e8:	movw	r2, #44474	; 0xadba
   177ec:	str	r3, [sp]
   177f0:	mov	r0, r8
   177f4:	mov	r1, #1
   177f8:	mov	r3, r4
   177fc:	movt	r2, #1
   17800:	bl	115c4 <__fprintf_chk@plt>
   17804:	movw	r1, #44481	; 0xadc1
   17808:	mov	r0, #0
   1780c:	mov	r2, #5
   17810:	movt	r1, #1
   17814:	bl	11408 <dcgettext@plt>
   17818:	movw	r2, #45199	; 0xb08f
   1781c:	mov	r3, r0
   17820:	movw	r0, #2022	; 0x7e6
   17824:	mov	r1, #1
   17828:	movt	r2, #1
   1782c:	str	r0, [sp]
   17830:	mov	r0, r8
   17834:	bl	115c4 <__fprintf_chk@plt>
   17838:	movw	r4, #41894	; 0xa3a6
   1783c:	mov	r1, r8
   17840:	movt	r4, #1
   17844:	mov	r0, r4
   17848:	bl	1136c <fputs_unlocked@plt>
   1784c:	movw	r1, #44485	; 0xadc5
   17850:	mov	r0, #0
   17854:	mov	r2, #5
   17858:	movt	r1, #1
   1785c:	bl	11408 <dcgettext@plt>
   17860:	movw	r3, #44656	; 0xae70
   17864:	mov	r2, r0
   17868:	mov	r0, r8
   1786c:	mov	r1, #1
   17870:	movt	r3, #1
   17874:	bl	115c4 <__fprintf_chk@plt>
   17878:	mov	r0, r4
   1787c:	mov	r1, r8
   17880:	bl	1136c <fputs_unlocked@plt>
   17884:	cmp	r6, #9
   17888:	bhi	178c4 <__assert_fail@plt+0x61e0>
   1788c:	add	r0, pc, #0
   17890:	ldr	pc, [r0, r6, lsl #2]
   17894:			; <UNDEFINED> instruction: 0x000178bc
   17898:	ldrdeq	r7, [r1], -r0
   1789c:	andeq	r7, r1, r0, lsl #18
   178a0:	andeq	r7, r1, r8, lsr #18
   178a4:	andeq	r7, r1, r0, asr r9
   178a8:	andeq	r7, r1, r8, ror r9
   178ac:	andeq	r7, r1, r0, lsr #19
   178b0:	ldrdeq	r7, [r1], -r8
   178b4:	andeq	r7, r1, r8, ror sl
   178b8:	andeq	r7, r1, r0, lsr #20
   178bc:	sub	sp, fp, #24
   178c0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   178c4:	movw	r1, #45009	; 0xafd1
   178c8:	movt	r1, #1
   178cc:	b	17a28 <__assert_fail@plt+0x6344>
   178d0:	movw	r1, #44690	; 0xae92
   178d4:	mov	r0, #0
   178d8:	mov	r2, #5
   178dc:	movt	r1, #1
   178e0:	bl	11408 <dcgettext@plt>
   178e4:	ldr	r3, [r7]
   178e8:	mov	r2, r0
   178ec:	mov	r0, r8
   178f0:	mov	r1, #1
   178f4:	sub	sp, fp, #24
   178f8:	pop	{r4, r5, r6, r7, r8, sl, fp, lr}
   178fc:	b	115c4 <__fprintf_chk@plt>
   17900:	movw	r1, #44706	; 0xaea2
   17904:	mov	r0, #0
   17908:	mov	r2, #5
   1790c:	movt	r1, #1
   17910:	bl	11408 <dcgettext@plt>
   17914:	mov	r2, r0
   17918:	ldr	r3, [r7]
   1791c:	ldr	r0, [r7, #4]
   17920:	str	r0, [sp]
   17924:	b	17a14 <__assert_fail@plt+0x6330>
   17928:	movw	r1, #44729	; 0xaeb9
   1792c:	mov	r0, #0
   17930:	mov	r2, #5
   17934:	movt	r1, #1
   17938:	bl	11408 <dcgettext@plt>
   1793c:	mov	r2, r0
   17940:	ldr	r3, [r7]
   17944:	ldmib	r7, {r0, r1}
   17948:	stm	sp, {r0, r1}
   1794c:	b	17a14 <__assert_fail@plt+0x6330>
   17950:	movw	r1, #44757	; 0xaed5
   17954:	mov	r0, #0
   17958:	mov	r2, #5
   1795c:	movt	r1, #1
   17960:	bl	11408 <dcgettext@plt>
   17964:	ldr	r3, [r7]
   17968:	mov	r2, r0
   1796c:	ldmib	r7, {r0, r1, r7}
   17970:	stm	sp, {r0, r1, r7}
   17974:	b	17a14 <__assert_fail@plt+0x6330>
   17978:	movw	r1, #44789	; 0xaef5
   1797c:	mov	r0, #0
   17980:	mov	r2, #5
   17984:	movt	r1, #1
   17988:	bl	11408 <dcgettext@plt>
   1798c:	ldr	r3, [r7]
   17990:	mov	r2, r0
   17994:	ldmib	r7, {r0, r1, r6, r7}
   17998:	stm	sp, {r0, r1, r6, r7}
   1799c:	b	17a14 <__assert_fail@plt+0x6330>
   179a0:	movw	r1, #44825	; 0xaf19
   179a4:	mov	r0, #0
   179a8:	mov	r2, #5
   179ac:	movt	r1, #1
   179b0:	bl	11408 <dcgettext@plt>
   179b4:	mov	r2, r0
   179b8:	ldr	r3, [r7]
   179bc:	ldmib	r7, {r0, r1, r6}
   179c0:	ldr	r5, [r7, #16]
   179c4:	ldr	r7, [r7, #20]
   179c8:	stm	sp, {r0, r1, r6}
   179cc:	str	r5, [sp, #12]
   179d0:	str	r7, [sp, #16]
   179d4:	b	17a14 <__assert_fail@plt+0x6330>
   179d8:	movw	r1, #44865	; 0xaf41
   179dc:	mov	r0, #0
   179e0:	mov	r2, #5
   179e4:	movt	r1, #1
   179e8:	bl	11408 <dcgettext@plt>
   179ec:	mov	r2, r0
   179f0:	ldr	r3, [r7]
   179f4:	ldmib	r7, {r0, r1, r6}
   179f8:	ldr	r5, [r7, #16]
   179fc:	ldr	r4, [r7, #20]
   17a00:	ldr	r7, [r7, #24]
   17a04:	stm	sp, {r0, r1, r6}
   17a08:	str	r5, [sp, #12]
   17a0c:	str	r4, [sp, #16]
   17a10:	str	r7, [sp, #20]
   17a14:	mov	r0, r8
   17a18:	mov	r1, #1
   17a1c:	b	17ac8 <__assert_fail@plt+0x63e4>
   17a20:	movw	r1, #44957	; 0xaf9d
   17a24:	movt	r1, #1
   17a28:	mov	r0, #0
   17a2c:	mov	r2, #5
   17a30:	bl	11408 <dcgettext@plt>
   17a34:	mov	ip, r0
   17a38:	ldr	r3, [r7]
   17a3c:	ldr	r0, [r7, #4]
   17a40:	ldr	r1, [r7, #8]
   17a44:	ldr	r6, [r7, #12]
   17a48:	ldr	r5, [r7, #16]
   17a4c:	ldr	r4, [r7, #20]
   17a50:	ldr	r2, [r7, #24]
   17a54:	ldr	lr, [r7, #28]
   17a58:	ldr	r7, [r7, #32]
   17a5c:	stm	sp, {r0, r1, r6}
   17a60:	str	r5, [sp, #12]
   17a64:	str	r4, [sp, #16]
   17a68:	str	r2, [sp, #20]
   17a6c:	str	lr, [sp, #24]
   17a70:	str	r7, [sp, #28]
   17a74:	b	17abc <__assert_fail@plt+0x63d8>
   17a78:	movw	r1, #44909	; 0xaf6d
   17a7c:	mov	r0, #0
   17a80:	mov	r2, #5
   17a84:	movt	r1, #1
   17a88:	bl	11408 <dcgettext@plt>
   17a8c:	mov	ip, r0
   17a90:	ldr	r3, [r7]
   17a94:	ldmib	r7, {r0, r1, r6}
   17a98:	ldr	r5, [r7, #16]
   17a9c:	ldr	r4, [r7, #20]
   17aa0:	ldr	r2, [r7, #24]
   17aa4:	ldr	r7, [r7, #28]
   17aa8:	stm	sp, {r0, r1, r6}
   17aac:	str	r5, [sp, #12]
   17ab0:	str	r4, [sp, #16]
   17ab4:	str	r2, [sp, #20]
   17ab8:	str	r7, [sp, #24]
   17abc:	mov	r0, r8
   17ac0:	mov	r1, #1
   17ac4:	mov	r2, ip
   17ac8:	bl	115c4 <__fprintf_chk@plt>
   17acc:	sub	sp, fp, #24
   17ad0:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   17ad4:	push	{r4, sl, fp, lr}
   17ad8:	add	fp, sp, #8
   17adc:	sub	sp, sp, #8
   17ae0:	ldr	ip, [fp, #8]
   17ae4:	mov	lr, #0
   17ae8:	ldr	r4, [ip, lr, lsl #2]
   17aec:	add	lr, lr, #1
   17af0:	cmp	r4, #0
   17af4:	bne	17ae8 <__assert_fail@plt+0x6404>
   17af8:	sub	r4, lr, #1
   17afc:	str	ip, [sp]
   17b00:	str	r4, [sp, #4]
   17b04:	bl	177a0 <__assert_fail@plt+0x60bc>
   17b08:	sub	sp, fp, #8
   17b0c:	pop	{r4, sl, fp, pc}
   17b10:	push	{fp, lr}
   17b14:	mov	fp, sp
   17b18:	sub	sp, sp, #48	; 0x30
   17b1c:	ldr	ip, [fp, #8]
   17b20:	ldr	lr, [ip]
   17b24:	cmp	lr, #0
   17b28:	str	lr, [sp, #8]
   17b2c:	beq	17bc8 <__assert_fail@plt+0x64e4>
   17b30:	ldr	lr, [ip, #4]
   17b34:	cmp	lr, #0
   17b38:	str	lr, [sp, #12]
   17b3c:	beq	17bd0 <__assert_fail@plt+0x64ec>
   17b40:	ldr	lr, [ip, #8]
   17b44:	cmp	lr, #0
   17b48:	str	lr, [sp, #16]
   17b4c:	beq	17bd8 <__assert_fail@plt+0x64f4>
   17b50:	ldr	lr, [ip, #12]
   17b54:	cmp	lr, #0
   17b58:	str	lr, [sp, #20]
   17b5c:	beq	17be0 <__assert_fail@plt+0x64fc>
   17b60:	ldr	lr, [ip, #16]
   17b64:	cmp	lr, #0
   17b68:	str	lr, [sp, #24]
   17b6c:	beq	17be8 <__assert_fail@plt+0x6504>
   17b70:	ldr	lr, [ip, #20]
   17b74:	cmp	lr, #0
   17b78:	str	lr, [sp, #28]
   17b7c:	beq	17bf0 <__assert_fail@plt+0x650c>
   17b80:	ldr	lr, [ip, #24]
   17b84:	cmp	lr, #0
   17b88:	str	lr, [sp, #32]
   17b8c:	beq	17bf8 <__assert_fail@plt+0x6514>
   17b90:	ldr	lr, [ip, #28]
   17b94:	cmp	lr, #0
   17b98:	str	lr, [sp, #36]	; 0x24
   17b9c:	beq	17c00 <__assert_fail@plt+0x651c>
   17ba0:	ldr	lr, [ip, #32]
   17ba4:	cmp	lr, #0
   17ba8:	str	lr, [sp, #40]	; 0x28
   17bac:	beq	17c08 <__assert_fail@plt+0x6524>
   17bb0:	ldr	lr, [ip, #36]	; 0x24
   17bb4:	mov	ip, #10
   17bb8:	cmp	lr, #0
   17bbc:	str	lr, [sp, #44]	; 0x2c
   17bc0:	movweq	ip, #9
   17bc4:	b	17c0c <__assert_fail@plt+0x6528>
   17bc8:	mov	ip, #0
   17bcc:	b	17c0c <__assert_fail@plt+0x6528>
   17bd0:	mov	ip, #1
   17bd4:	b	17c0c <__assert_fail@plt+0x6528>
   17bd8:	mov	ip, #2
   17bdc:	b	17c0c <__assert_fail@plt+0x6528>
   17be0:	mov	ip, #3
   17be4:	b	17c0c <__assert_fail@plt+0x6528>
   17be8:	mov	ip, #4
   17bec:	b	17c0c <__assert_fail@plt+0x6528>
   17bf0:	mov	ip, #5
   17bf4:	b	17c0c <__assert_fail@plt+0x6528>
   17bf8:	mov	ip, #6
   17bfc:	b	17c0c <__assert_fail@plt+0x6528>
   17c00:	mov	ip, #7
   17c04:	b	17c0c <__assert_fail@plt+0x6528>
   17c08:	mov	ip, #8
   17c0c:	add	lr, sp, #8
   17c10:	str	ip, [sp, #4]
   17c14:	str	lr, [sp]
   17c18:	bl	177a0 <__assert_fail@plt+0x60bc>
   17c1c:	mov	sp, fp
   17c20:	pop	{fp, pc}
   17c24:	push	{fp, lr}
   17c28:	mov	fp, sp
   17c2c:	sub	sp, sp, #56	; 0x38
   17c30:	add	ip, fp, #8
   17c34:	str	ip, [sp, #12]
   17c38:	ldr	lr, [fp, #8]
   17c3c:	cmp	lr, #0
   17c40:	str	lr, [sp, #16]
   17c44:	beq	17ce0 <__assert_fail@plt+0x65fc>
   17c48:	ldr	lr, [ip, #4]
   17c4c:	cmp	lr, #0
   17c50:	str	lr, [sp, #20]
   17c54:	beq	17ce8 <__assert_fail@plt+0x6604>
   17c58:	ldr	lr, [ip, #8]
   17c5c:	cmp	lr, #0
   17c60:	str	lr, [sp, #24]
   17c64:	beq	17cf0 <__assert_fail@plt+0x660c>
   17c68:	ldr	lr, [ip, #12]
   17c6c:	cmp	lr, #0
   17c70:	str	lr, [sp, #28]
   17c74:	beq	17cf8 <__assert_fail@plt+0x6614>
   17c78:	ldr	lr, [ip, #16]
   17c7c:	cmp	lr, #0
   17c80:	str	lr, [sp, #32]
   17c84:	beq	17d00 <__assert_fail@plt+0x661c>
   17c88:	ldr	lr, [ip, #20]
   17c8c:	cmp	lr, #0
   17c90:	str	lr, [sp, #36]	; 0x24
   17c94:	beq	17d08 <__assert_fail@plt+0x6624>
   17c98:	ldr	lr, [ip, #24]
   17c9c:	cmp	lr, #0
   17ca0:	str	lr, [sp, #40]	; 0x28
   17ca4:	beq	17d10 <__assert_fail@plt+0x662c>
   17ca8:	ldr	lr, [ip, #28]
   17cac:	cmp	lr, #0
   17cb0:	str	lr, [sp, #44]	; 0x2c
   17cb4:	beq	17d18 <__assert_fail@plt+0x6634>
   17cb8:	ldr	lr, [ip, #32]
   17cbc:	cmp	lr, #0
   17cc0:	str	lr, [sp, #48]	; 0x30
   17cc4:	beq	17d20 <__assert_fail@plt+0x663c>
   17cc8:	ldr	lr, [ip, #36]	; 0x24
   17ccc:	mov	ip, #10
   17cd0:	cmp	lr, #0
   17cd4:	str	lr, [sp, #52]	; 0x34
   17cd8:	movweq	ip, #9
   17cdc:	b	17d24 <__assert_fail@plt+0x6640>
   17ce0:	mov	ip, #0
   17ce4:	b	17d24 <__assert_fail@plt+0x6640>
   17ce8:	mov	ip, #1
   17cec:	b	17d24 <__assert_fail@plt+0x6640>
   17cf0:	mov	ip, #2
   17cf4:	b	17d24 <__assert_fail@plt+0x6640>
   17cf8:	mov	ip, #3
   17cfc:	b	17d24 <__assert_fail@plt+0x6640>
   17d00:	mov	ip, #4
   17d04:	b	17d24 <__assert_fail@plt+0x6640>
   17d08:	mov	ip, #5
   17d0c:	b	17d24 <__assert_fail@plt+0x6640>
   17d10:	mov	ip, #6
   17d14:	b	17d24 <__assert_fail@plt+0x6640>
   17d18:	mov	ip, #7
   17d1c:	b	17d24 <__assert_fail@plt+0x6640>
   17d20:	mov	ip, #8
   17d24:	add	lr, sp, #16
   17d28:	str	ip, [sp, #4]
   17d2c:	str	lr, [sp]
   17d30:	bl	177a0 <__assert_fail@plt+0x60bc>
   17d34:	mov	sp, fp
   17d38:	pop	{fp, pc}
   17d3c:	push	{fp, lr}
   17d40:	mov	fp, sp
   17d44:	movw	r0, #49588	; 0xc1b4
   17d48:	movt	r0, #2
   17d4c:	ldr	r1, [r0]
   17d50:	movw	r0, #41894	; 0xa3a6
   17d54:	movt	r0, #1
   17d58:	bl	1136c <fputs_unlocked@plt>
   17d5c:	movw	r1, #45069	; 0xb00d
   17d60:	mov	r0, #0
   17d64:	mov	r2, #5
   17d68:	movt	r1, #1
   17d6c:	bl	11408 <dcgettext@plt>
   17d70:	movw	r2, #45089	; 0xb021
   17d74:	mov	r1, r0
   17d78:	mov	r0, #1
   17d7c:	movt	r2, #1
   17d80:	bl	115a0 <__printf_chk@plt>
   17d84:	movw	r1, #45111	; 0xb037
   17d88:	mov	r0, #0
   17d8c:	mov	r2, #5
   17d90:	movt	r1, #1
   17d94:	bl	11408 <dcgettext@plt>
   17d98:	movw	r2, #42324	; 0xa554
   17d9c:	movw	r3, #42574	; 0xa64e
   17da0:	mov	r1, r0
   17da4:	mov	r0, #1
   17da8:	movt	r2, #1
   17dac:	movt	r3, #1
   17db0:	bl	115a0 <__printf_chk@plt>
   17db4:	movw	r1, #45131	; 0xb04b
   17db8:	mov	r0, #0
   17dbc:	mov	r2, #5
   17dc0:	movt	r1, #1
   17dc4:	bl	11408 <dcgettext@plt>
   17dc8:	movw	r2, #45170	; 0xb072
   17dcc:	mov	r1, r0
   17dd0:	mov	r0, #1
   17dd4:	movt	r2, #1
   17dd8:	pop	{fp, lr}
   17ddc:	b	115a0 <__printf_chk@plt>
   17de0:	push	{fp, lr}
   17de4:	mov	fp, sp
   17de8:	bl	11684 <aligned_alloc@plt>
   17dec:	cmp	r0, #0
   17df0:	popne	{fp, pc}
   17df4:	bl	183ac <__assert_fail@plt+0x6cc8>
   17df8:	push	{r4, r5, r6, sl, fp, lr}
   17dfc:	add	fp, sp, #16
   17e00:	mov	r4, r2
   17e04:	mov	r5, r1
   17e08:	mov	r6, r0
   17e0c:	bl	195d4 <__assert_fail@plt+0x7ef0>
   17e10:	cmp	r0, #0
   17e14:	popne	{r4, r5, r6, sl, fp, pc}
   17e18:	cmp	r6, #0
   17e1c:	beq	17e30 <__assert_fail@plt+0x674c>
   17e20:	cmp	r5, #0
   17e24:	cmpne	r4, #0
   17e28:	bne	17e30 <__assert_fail@plt+0x674c>
   17e2c:	pop	{r4, r5, r6, sl, fp, pc}
   17e30:	bl	183ac <__assert_fail@plt+0x6cc8>
   17e34:	push	{r4, r5, r6, sl, fp, lr}
   17e38:	add	fp, sp, #16
   17e3c:	mov	r4, r2
   17e40:	mov	r5, r1
   17e44:	mov	r6, r0
   17e48:	bl	195d4 <__assert_fail@plt+0x7ef0>
   17e4c:	cmp	r0, #0
   17e50:	popne	{r4, r5, r6, sl, fp, pc}
   17e54:	cmp	r6, #0
   17e58:	beq	17e6c <__assert_fail@plt+0x6788>
   17e5c:	cmp	r5, #0
   17e60:	cmpne	r4, #0
   17e64:	bne	17e6c <__assert_fail@plt+0x6788>
   17e68:	pop	{r4, r5, r6, sl, fp, pc}
   17e6c:	bl	183ac <__assert_fail@plt+0x6cc8>
   17e70:	push	{fp, lr}
   17e74:	mov	fp, sp
   17e78:	bl	191e0 <__assert_fail@plt+0x7afc>
   17e7c:	cmp	r0, #0
   17e80:	popne	{fp, pc}
   17e84:	bl	183ac <__assert_fail@plt+0x6cc8>
   17e88:	push	{fp, lr}
   17e8c:	mov	fp, sp
   17e90:	bl	191e0 <__assert_fail@plt+0x7afc>
   17e94:	cmp	r0, #0
   17e98:	popne	{fp, pc}
   17e9c:	bl	183ac <__assert_fail@plt+0x6cc8>
   17ea0:	push	{fp, lr}
   17ea4:	mov	fp, sp
   17ea8:	bl	191e0 <__assert_fail@plt+0x7afc>
   17eac:	cmp	r0, #0
   17eb0:	popne	{fp, pc}
   17eb4:	bl	183ac <__assert_fail@plt+0x6cc8>
   17eb8:	push	{r4, r5, fp, lr}
   17ebc:	add	fp, sp, #8
   17ec0:	mov	r4, r1
   17ec4:	mov	r5, r0
   17ec8:	bl	19210 <__assert_fail@plt+0x7b2c>
   17ecc:	cmp	r0, #0
   17ed0:	popne	{r4, r5, fp, pc}
   17ed4:	cmp	r5, #0
   17ed8:	beq	17ee8 <__assert_fail@plt+0x6804>
   17edc:	cmp	r4, #0
   17ee0:	bne	17ee8 <__assert_fail@plt+0x6804>
   17ee4:	pop	{r4, r5, fp, pc}
   17ee8:	bl	183ac <__assert_fail@plt+0x6cc8>
   17eec:	push	{fp, lr}
   17ef0:	mov	fp, sp
   17ef4:	cmp	r1, #0
   17ef8:	orreq	r1, r1, #1
   17efc:	bl	19210 <__assert_fail@plt+0x7b2c>
   17f00:	cmp	r0, #0
   17f04:	popne	{fp, pc}
   17f08:	bl	183ac <__assert_fail@plt+0x6cc8>
   17f0c:	push	{fp, lr}
   17f10:	mov	fp, sp
   17f14:	clz	r3, r2
   17f18:	lsr	ip, r3, #5
   17f1c:	clz	r3, r1
   17f20:	lsr	r3, r3, #5
   17f24:	orrs	r3, r3, ip
   17f28:	movwne	r1, #1
   17f2c:	movwne	r2, #1
   17f30:	bl	195d4 <__assert_fail@plt+0x7ef0>
   17f34:	cmp	r0, #0
   17f38:	popne	{fp, pc}
   17f3c:	bl	183ac <__assert_fail@plt+0x6cc8>
   17f40:	push	{fp, lr}
   17f44:	mov	fp, sp
   17f48:	mov	r2, r1
   17f4c:	mov	r1, r0
   17f50:	mov	r0, #0
   17f54:	bl	195d4 <__assert_fail@plt+0x7ef0>
   17f58:	cmp	r0, #0
   17f5c:	popne	{fp, pc}
   17f60:	bl	183ac <__assert_fail@plt+0x6cc8>
   17f64:	push	{fp, lr}
   17f68:	mov	fp, sp
   17f6c:	mov	r2, r1
   17f70:	mov	r1, r0
   17f74:	clz	r0, r2
   17f78:	clz	r3, r1
   17f7c:	lsr	r0, r0, #5
   17f80:	lsr	r3, r3, #5
   17f84:	orrs	r0, r3, r0
   17f88:	mov	r0, #0
   17f8c:	movwne	r1, #1
   17f90:	movwne	r2, #1
   17f94:	bl	195d4 <__assert_fail@plt+0x7ef0>
   17f98:	cmp	r0, #0
   17f9c:	popne	{fp, pc}
   17fa0:	bl	183ac <__assert_fail@plt+0x6cc8>
   17fa4:	push	{r4, r5, r6, sl, fp, lr}
   17fa8:	add	fp, sp, #16
   17fac:	ldr	r5, [r1]
   17fb0:	mov	r4, r1
   17fb4:	mov	r6, r0
   17fb8:	cmp	r0, #0
   17fbc:	beq	17fd4 <__assert_fail@plt+0x68f0>
   17fc0:	mov	r0, #1
   17fc4:	add	r0, r0, r5, lsr #1
   17fc8:	adds	r5, r5, r0
   17fcc:	bcc	17fdc <__assert_fail@plt+0x68f8>
   17fd0:	b	18018 <__assert_fail@plt+0x6934>
   17fd4:	cmp	r5, #0
   17fd8:	movweq	r5, #64	; 0x40
   17fdc:	mov	r0, r6
   17fe0:	mov	r1, r5
   17fe4:	mov	r2, #1
   17fe8:	bl	195d4 <__assert_fail@plt+0x7ef0>
   17fec:	cmp	r5, #0
   17ff0:	mov	r1, r5
   17ff4:	movwne	r1, #1
   17ff8:	cmp	r0, #0
   17ffc:	bne	18010 <__assert_fail@plt+0x692c>
   18000:	clz	r2, r6
   18004:	lsr	r2, r2, #5
   18008:	orrs	r1, r2, r1
   1800c:	bne	18018 <__assert_fail@plt+0x6934>
   18010:	str	r5, [r4]
   18014:	pop	{r4, r5, r6, sl, fp, pc}
   18018:	bl	183ac <__assert_fail@plt+0x6cc8>
   1801c:	push	{r4, r5, r6, r7, fp, lr}
   18020:	add	fp, sp, #16
   18024:	ldr	r5, [r1]
   18028:	mov	r6, r2
   1802c:	mov	r4, r1
   18030:	mov	r7, r0
   18034:	cmp	r0, #0
   18038:	beq	18050 <__assert_fail@plt+0x696c>
   1803c:	mov	r0, #1
   18040:	add	r0, r0, r5, lsr #1
   18044:	adds	r5, r5, r0
   18048:	bcc	18068 <__assert_fail@plt+0x6984>
   1804c:	b	1809c <__assert_fail@plt+0x69b8>
   18050:	cmp	r5, #0
   18054:	bne	18068 <__assert_fail@plt+0x6984>
   18058:	mov	r0, #64	; 0x40
   1805c:	cmp	r6, #64	; 0x40
   18060:	udiv	r5, r0, r6
   18064:	addhi	r5, r5, #1
   18068:	mov	r0, r7
   1806c:	mov	r1, r5
   18070:	mov	r2, r6
   18074:	bl	195d4 <__assert_fail@plt+0x7ef0>
   18078:	cmp	r0, #0
   1807c:	bne	18094 <__assert_fail@plt+0x69b0>
   18080:	cmp	r7, #0
   18084:	beq	1809c <__assert_fail@plt+0x69b8>
   18088:	cmp	r6, #0
   1808c:	cmpne	r5, #0
   18090:	bne	1809c <__assert_fail@plt+0x69b8>
   18094:	str	r5, [r4]
   18098:	pop	{r4, r5, r6, r7, fp, pc}
   1809c:	bl	183ac <__assert_fail@plt+0x6cc8>
   180a0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   180a4:	add	fp, sp, #24
   180a8:	mov	r8, r1
   180ac:	ldr	r1, [r1]
   180b0:	mov	r5, r0
   180b4:	add	r0, r1, r1, asr #1
   180b8:	cmp	r0, r1
   180bc:	mvnvs	r0, #-2147483648	; 0x80000000
   180c0:	cmp	r0, r3
   180c4:	mov	r7, r0
   180c8:	movgt	r7, r3
   180cc:	cmn	r3, #1
   180d0:	movle	r7, r0
   180d4:	ldr	r0, [fp, #8]
   180d8:	cmn	r0, #1
   180dc:	ble	18104 <__assert_fail@plt+0x6a20>
   180e0:	cmp	r0, #0
   180e4:	beq	18158 <__assert_fail@plt+0x6a74>
   180e8:	cmn	r7, #1
   180ec:	ble	1812c <__assert_fail@plt+0x6a48>
   180f0:	mvn	r4, #-2147483648	; 0x80000000
   180f4:	udiv	r6, r4, r0
   180f8:	cmp	r6, r7
   180fc:	bge	18158 <__assert_fail@plt+0x6a74>
   18100:	b	18168 <__assert_fail@plt+0x6a84>
   18104:	cmn	r7, #1
   18108:	ble	18148 <__assert_fail@plt+0x6a64>
   1810c:	cmn	r0, #1
   18110:	beq	18158 <__assert_fail@plt+0x6a74>
   18114:	mov	r6, #-2147483648	; 0x80000000
   18118:	mvn	r4, #-2147483648	; 0x80000000
   1811c:	sdiv	r6, r6, r0
   18120:	cmp	r6, r7
   18124:	bge	18158 <__assert_fail@plt+0x6a74>
   18128:	b	18168 <__assert_fail@plt+0x6a84>
   1812c:	beq	18158 <__assert_fail@plt+0x6a74>
   18130:	mov	r6, #-2147483648	; 0x80000000
   18134:	mvn	r4, #-2147483648	; 0x80000000
   18138:	sdiv	r6, r6, r7
   1813c:	cmp	r6, r0
   18140:	bge	18158 <__assert_fail@plt+0x6a74>
   18144:	b	18168 <__assert_fail@plt+0x6a84>
   18148:	mvn	r4, #-2147483648	; 0x80000000
   1814c:	sdiv	r6, r4, r0
   18150:	cmp	r7, r6
   18154:	blt	18168 <__assert_fail@plt+0x6a84>
   18158:	mul	r6, r7, r0
   1815c:	mov	r4, #64	; 0x40
   18160:	cmp	r6, #63	; 0x3f
   18164:	bgt	18170 <__assert_fail@plt+0x6a8c>
   18168:	sdiv	r7, r4, r0
   1816c:	mul	r6, r7, r0
   18170:	cmp	r5, #0
   18174:	moveq	r4, #0
   18178:	streq	r4, [r8]
   1817c:	sub	r4, r7, r1
   18180:	cmp	r4, r2
   18184:	bge	18230 <__assert_fail@plt+0x6b4c>
   18188:	add	r7, r1, r2
   1818c:	mov	r6, #0
   18190:	mov	r2, #0
   18194:	cmp	r7, r3
   18198:	movwgt	r6, #1
   1819c:	cmn	r3, #1
   181a0:	movwgt	r2, #1
   181a4:	cmp	r7, r1
   181a8:	bvs	18264 <__assert_fail@plt+0x6b80>
   181ac:	ands	r1, r2, r6
   181b0:	bne	18264 <__assert_fail@plt+0x6b80>
   181b4:	cmn	r0, #1
   181b8:	ble	181e0 <__assert_fail@plt+0x6afc>
   181bc:	cmp	r0, #0
   181c0:	beq	1822c <__assert_fail@plt+0x6b48>
   181c4:	cmn	r7, #1
   181c8:	ble	18204 <__assert_fail@plt+0x6b20>
   181cc:	mvn	r1, #-2147483648	; 0x80000000
   181d0:	udiv	r1, r1, r0
   181d4:	cmp	r1, r7
   181d8:	bge	1822c <__assert_fail@plt+0x6b48>
   181dc:	b	18264 <__assert_fail@plt+0x6b80>
   181e0:	cmn	r7, #1
   181e4:	ble	1821c <__assert_fail@plt+0x6b38>
   181e8:	cmn	r0, #1
   181ec:	beq	1822c <__assert_fail@plt+0x6b48>
   181f0:	mov	r1, #-2147483648	; 0x80000000
   181f4:	sdiv	r1, r1, r0
   181f8:	cmp	r1, r7
   181fc:	bge	1822c <__assert_fail@plt+0x6b48>
   18200:	b	18264 <__assert_fail@plt+0x6b80>
   18204:	beq	1822c <__assert_fail@plt+0x6b48>
   18208:	mov	r1, #-2147483648	; 0x80000000
   1820c:	sdiv	r1, r1, r7
   18210:	cmp	r1, r0
   18214:	bge	1822c <__assert_fail@plt+0x6b48>
   18218:	b	18264 <__assert_fail@plt+0x6b80>
   1821c:	mvn	r1, #-2147483648	; 0x80000000
   18220:	sdiv	r1, r1, r0
   18224:	cmp	r7, r1
   18228:	blt	18264 <__assert_fail@plt+0x6b80>
   1822c:	mul	r6, r7, r0
   18230:	mov	r0, r5
   18234:	mov	r1, r6
   18238:	bl	19210 <__assert_fail@plt+0x7b2c>
   1823c:	cmp	r6, #0
   18240:	movwne	r6, #1
   18244:	cmp	r0, #0
   18248:	bne	1825c <__assert_fail@plt+0x6b78>
   1824c:	clz	r1, r5
   18250:	lsr	r1, r1, #5
   18254:	orrs	r1, r1, r6
   18258:	bne	18264 <__assert_fail@plt+0x6b80>
   1825c:	str	r7, [r8]
   18260:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   18264:	bl	183ac <__assert_fail@plt+0x6cc8>
   18268:	push	{fp, lr}
   1826c:	mov	fp, sp
   18270:	mov	r1, #1
   18274:	bl	1918c <__assert_fail@plt+0x7aa8>
   18278:	cmp	r0, #0
   1827c:	popne	{fp, pc}
   18280:	bl	183ac <__assert_fail@plt+0x6cc8>
   18284:	push	{fp, lr}
   18288:	mov	fp, sp
   1828c:	bl	1918c <__assert_fail@plt+0x7aa8>
   18290:	cmp	r0, #0
   18294:	popne	{fp, pc}
   18298:	bl	183ac <__assert_fail@plt+0x6cc8>
   1829c:	push	{fp, lr}
   182a0:	mov	fp, sp
   182a4:	mov	r1, #1
   182a8:	bl	1918c <__assert_fail@plt+0x7aa8>
   182ac:	cmp	r0, #0
   182b0:	popne	{fp, pc}
   182b4:	bl	183ac <__assert_fail@plt+0x6cc8>
   182b8:	push	{fp, lr}
   182bc:	mov	fp, sp
   182c0:	bl	1918c <__assert_fail@plt+0x7aa8>
   182c4:	cmp	r0, #0
   182c8:	popne	{fp, pc}
   182cc:	bl	183ac <__assert_fail@plt+0x6cc8>
   182d0:	push	{r4, r5, fp, lr}
   182d4:	add	fp, sp, #8
   182d8:	mov	r5, r0
   182dc:	mov	r0, r1
   182e0:	mov	r4, r1
   182e4:	bl	191e0 <__assert_fail@plt+0x7afc>
   182e8:	cmp	r0, #0
   182ec:	beq	18300 <__assert_fail@plt+0x6c1c>
   182f0:	mov	r1, r5
   182f4:	mov	r2, r4
   182f8:	pop	{r4, r5, fp, lr}
   182fc:	b	113cc <memcpy@plt>
   18300:	bl	183ac <__assert_fail@plt+0x6cc8>
   18304:	push	{r4, r5, fp, lr}
   18308:	add	fp, sp, #8
   1830c:	mov	r5, r0
   18310:	mov	r0, r1
   18314:	mov	r4, r1
   18318:	bl	191e0 <__assert_fail@plt+0x7afc>
   1831c:	cmp	r0, #0
   18320:	beq	18334 <__assert_fail@plt+0x6c50>
   18324:	mov	r1, r5
   18328:	mov	r2, r4
   1832c:	pop	{r4, r5, fp, lr}
   18330:	b	113cc <memcpy@plt>
   18334:	bl	183ac <__assert_fail@plt+0x6cc8>
   18338:	push	{r4, r5, fp, lr}
   1833c:	add	fp, sp, #8
   18340:	mov	r5, r0
   18344:	add	r0, r1, #1
   18348:	mov	r4, r1
   1834c:	bl	191e0 <__assert_fail@plt+0x7afc>
   18350:	cmp	r0, #0
   18354:	beq	18370 <__assert_fail@plt+0x6c8c>
   18358:	mov	r1, #0
   1835c:	mov	r2, r4
   18360:	strb	r1, [r0, r4]
   18364:	mov	r1, r5
   18368:	pop	{r4, r5, fp, lr}
   1836c:	b	113cc <memcpy@plt>
   18370:	bl	183ac <__assert_fail@plt+0x6cc8>
   18374:	push	{r4, r5, fp, lr}
   18378:	add	fp, sp, #8
   1837c:	mov	r4, r0
   18380:	bl	11534 <strlen@plt>
   18384:	add	r5, r0, #1
   18388:	mov	r0, r5
   1838c:	bl	191e0 <__assert_fail@plt+0x7afc>
   18390:	cmp	r0, #0
   18394:	beq	183a8 <__assert_fail@plt+0x6cc4>
   18398:	mov	r1, r4
   1839c:	mov	r2, r5
   183a0:	pop	{r4, r5, fp, lr}
   183a4:	b	113cc <memcpy@plt>
   183a8:	bl	183ac <__assert_fail@plt+0x6cc8>
   183ac:	push	{fp, lr}
   183b0:	mov	fp, sp
   183b4:	movw	r0, #49496	; 0xc158
   183b8:	movw	r1, #45246	; 0xb0be
   183bc:	mov	r2, #5
   183c0:	movt	r0, #2
   183c4:	movt	r1, #1
   183c8:	ldr	r4, [r0]
   183cc:	mov	r0, #0
   183d0:	bl	11408 <dcgettext@plt>
   183d4:	movw	r2, #44035	; 0xac03
   183d8:	mov	r3, r0
   183dc:	mov	r0, r4
   183e0:	mov	r1, #0
   183e4:	movt	r2, #1
   183e8:	bl	114b0 <error@plt>
   183ec:	bl	116cc <abort@plt>
   183f0:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   183f4:	add	fp, sp, #24
   183f8:	sub	sp, sp, #16
   183fc:	mov	r8, r0
   18400:	ldr	r0, [fp, #16]
   18404:	mov	r5, r3
   18408:	mov	r6, r2
   1840c:	mov	r2, r1
   18410:	add	r3, sp, #8
   18414:	mov	r1, #0
   18418:	str	r0, [sp]
   1841c:	mov	r0, r8
   18420:	bl	184ec <__assert_fail@plt+0x6e08>
   18424:	cmp	r0, #0
   18428:	bne	184b4 <__assert_fail@plt+0x6dd0>
   1842c:	ldr	r4, [sp, #8]
   18430:	ldr	r7, [sp, #12]
   18434:	subs	r0, r4, r6
   18438:	sbcs	r0, r7, r5
   1843c:	bcc	18460 <__assert_fail@plt+0x6d7c>
   18440:	ldr	r1, [fp, #8]
   18444:	ldr	r0, [fp, #12]
   18448:	subs	r1, r1, r4
   1844c:	sbcs	r0, r0, r7
   18450:	movcs	r0, r4
   18454:	movcs	r1, r7
   18458:	subcs	sp, fp, #24
   1845c:	popcs	{r4, r5, r6, r7, r8, sl, fp, pc}
   18460:	bl	11558 <__errno_location@plt>
   18464:	subs	r1, r4, #1073741824	; 0x40000000
   18468:	sbcs	r1, r7, #0
   1846c:	movcc	r1, #34	; 0x22
   18470:	movcs	r1, #75	; 0x4b
   18474:	str	r1, [r0]
   18478:	ldr	r6, [r0]
   1847c:	ldr	r4, [fp, #24]
   18480:	ldr	r5, [fp, #20]
   18484:	mov	r0, r8
   18488:	bl	16940 <__assert_fail@plt+0x525c>
   1848c:	subs	r1, r6, #22
   18490:	movw	r2, #44050	; 0xac12
   18494:	str	r0, [sp]
   18498:	mov	r3, r5
   1849c:	movne	r1, r6
   184a0:	cmp	r4, #0
   184a4:	movt	r2, #1
   184a8:	movweq	r4, #1
   184ac:	mov	r0, r4
   184b0:	bl	114b0 <error@plt>
   184b4:	cmp	r0, #1
   184b8:	beq	184d0 <__assert_fail@plt+0x6dec>
   184bc:	cmp	r0, #3
   184c0:	bne	184dc <__assert_fail@plt+0x6df8>
   184c4:	bl	11558 <__errno_location@plt>
   184c8:	mov	r1, #0
   184cc:	b	18474 <__assert_fail@plt+0x6d90>
   184d0:	bl	11558 <__errno_location@plt>
   184d4:	mov	r1, #75	; 0x4b
   184d8:	b	18474 <__assert_fail@plt+0x6d90>
   184dc:	bl	11558 <__errno_location@plt>
   184e0:	b	18478 <__assert_fail@plt+0x6d94>
   184e4:	mov	r1, #10
   184e8:	b	183f0 <__assert_fail@plt+0x6d0c>
   184ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184f0:	add	fp, sp, #28
   184f4:	sub	sp, sp, #44	; 0x2c
   184f8:	cmp	r2, #37	; 0x25
   184fc:	bcs	1916c <__assert_fail@plt+0x7a88>
   18500:	ldr	sl, [fp, #8]
   18504:	mov	r6, r2
   18508:	mov	r7, r1
   1850c:	mov	r4, r0
   18510:	str	r3, [sp, #36]	; 0x24
   18514:	bl	11558 <__errno_location@plt>
   18518:	mov	r5, r0
   1851c:	mov	r0, #0
   18520:	str	r0, [r5]
   18524:	bl	11510 <__ctype_b_loc@plt>
   18528:	ldr	r1, [r0]
   1852c:	mov	r2, r4
   18530:	ldrb	r0, [r2], #1
   18534:	add	r3, r1, r0, lsl #1
   18538:	ldrb	r3, [r3, #1]
   1853c:	tst	r3, #32
   18540:	bne	18530 <__assert_fail@plt+0x6e4c>
   18544:	cmp	r7, #0
   18548:	sub	r9, fp, #32
   1854c:	mov	r8, #4
   18550:	movne	r9, r7
   18554:	cmp	r0, #45	; 0x2d
   18558:	beq	19160 <__assert_fail@plt+0x7a7c>
   1855c:	mov	r0, r4
   18560:	mov	r1, r9
   18564:	mov	r2, r6
   18568:	mov	r3, #0
   1856c:	bl	113d8 <__strtoull_internal@plt>
   18570:	mov	r7, r1
   18574:	ldr	r1, [r9]
   18578:	cmp	r1, r4
   1857c:	beq	185a8 <__assert_fail@plt+0x6ec4>
   18580:	mov	r6, r0
   18584:	ldr	r0, [r5]
   18588:	cmp	r0, #0
   1858c:	beq	185e4 <__assert_fail@plt+0x6f00>
   18590:	cmp	r0, #34	; 0x22
   18594:	bne	19160 <__assert_fail@plt+0x7a7c>
   18598:	mov	r8, #1
   1859c:	cmp	sl, #0
   185a0:	bne	185f0 <__assert_fail@plt+0x6f0c>
   185a4:	b	19158 <__assert_fail@plt+0x7a74>
   185a8:	cmp	sl, #0
   185ac:	beq	19160 <__assert_fail@plt+0x7a7c>
   185b0:	mov	r5, r1
   185b4:	ldrb	r1, [r4]
   185b8:	cmp	r1, #0
   185bc:	beq	19160 <__assert_fail@plt+0x7a7c>
   185c0:	mov	r0, sl
   185c4:	bl	11540 <strchr@plt>
   185c8:	cmp	r0, #0
   185cc:	beq	19160 <__assert_fail@plt+0x7a7c>
   185d0:	mov	r1, r5
   185d4:	mov	r8, #0
   185d8:	mov	r6, #1
   185dc:	mov	r7, #0
   185e0:	b	185f0 <__assert_fail@plt+0x6f0c>
   185e4:	mov	r8, r0
   185e8:	cmp	sl, #0
   185ec:	beq	19158 <__assert_fail@plt+0x7a74>
   185f0:	ldrb	r4, [r1]
   185f4:	cmp	r4, #0
   185f8:	beq	19158 <__assert_fail@plt+0x7a74>
   185fc:	str	r1, [sp, #32]
   18600:	mov	r0, sl
   18604:	mov	r1, r4
   18608:	bl	11540 <strchr@plt>
   1860c:	cmp	r0, #0
   18610:	beq	188d8 <__assert_fail@plt+0x71f4>
   18614:	sub	r0, r4, #69	; 0x45
   18618:	mov	r1, #1
   1861c:	mov	r3, #0
   18620:	mov	r5, #1024	; 0x400
   18624:	cmp	r0, #47	; 0x2f
   18628:	str	r1, [sp, #28]
   1862c:	bhi	18730 <__assert_fail@plt+0x704c>
   18630:	add	r1, pc, #0
   18634:	ldr	pc, [r1, r0, lsl #2]
   18638:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1863c:	andeq	r8, r1, r0, lsr r7
   18640:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18644:	andeq	r8, r1, r0, lsr r7
   18648:	andeq	r8, r1, r0, lsr r7
   1864c:	andeq	r8, r1, r0, lsr r7
   18650:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18654:	andeq	r8, r1, r0, lsr r7
   18658:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1865c:	andeq	r8, r1, r0, lsr r7
   18660:	andeq	r8, r1, r0, lsr r7
   18664:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18668:	andeq	r8, r1, r0, lsr r7
   1866c:	andeq	r8, r1, r0, lsr r7
   18670:	andeq	r8, r1, r0, lsr r7
   18674:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18678:	andeq	r8, r1, r0, lsr r7
   1867c:	andeq	r8, r1, r0, lsr r7
   18680:	andeq	r8, r1, r0, lsr r7
   18684:	andeq	r8, r1, r0, lsr r7
   18688:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1868c:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18690:	andeq	r8, r1, r0, lsr r7
   18694:	andeq	r8, r1, r0, lsr r7
   18698:	andeq	r8, r1, r0, lsr r7
   1869c:	andeq	r8, r1, r0, lsr r7
   186a0:	andeq	r8, r1, r0, lsr r7
   186a4:	andeq	r8, r1, r0, lsr r7
   186a8:	andeq	r8, r1, r0, lsr r7
   186ac:	andeq	r8, r1, r0, lsr r7
   186b0:	andeq	r8, r1, r0, lsr r7
   186b4:	andeq	r8, r1, r0, lsr r7
   186b8:	andeq	r8, r1, r0, lsr r7
   186bc:	andeq	r8, r1, r0, lsr r7
   186c0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186c4:	andeq	r8, r1, r0, lsr r7
   186c8:	andeq	r8, r1, r0, lsr r7
   186cc:	andeq	r8, r1, r0, lsr r7
   186d0:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186d4:	andeq	r8, r1, r0, lsr r7
   186d8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186dc:	andeq	r8, r1, r0, lsr r7
   186e0:	andeq	r8, r1, r0, lsr r7
   186e4:	andeq	r8, r1, r0, lsr r7
   186e8:	andeq	r8, r1, r0, lsr r7
   186ec:	andeq	r8, r1, r0, lsr r7
   186f0:	andeq	r8, r1, r0, lsr r7
   186f4:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   186f8:	mov	r0, sl
   186fc:	mov	r1, #48	; 0x30
   18700:	bl	11540 <strchr@plt>
   18704:	cmp	r0, #0
   18708:	beq	1872c <__assert_fail@plt+0x7048>
   1870c:	ldr	r1, [sp, #32]
   18710:	ldrb	r0, [r1, #1]
   18714:	cmp	r0, #66	; 0x42
   18718:	cmpne	r0, #68	; 0x44
   1871c:	bne	188e4 <__assert_fail@plt+0x7200>
   18720:	mov	r5, #1000	; 0x3e8
   18724:	mov	r0, #2
   18728:	str	r0, [sp, #28]
   1872c:	mov	r3, #0
   18730:	sub	r0, r4, #66	; 0x42
   18734:	cmp	r0, #53	; 0x35
   18738:	bhi	188d8 <__assert_fail@plt+0x71f4>
   1873c:	add	r1, pc, #0
   18740:	ldr	pc, [r1, r0, lsl #2]
   18744:	andeq	r8, r1, r0, ror #24
   18748:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1874c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18750:	andeq	r8, r1, r8, lsl #25
   18754:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18758:	andeq	r8, r1, ip, lsl r8
   1875c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18760:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18764:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18768:	andeq	r8, r1, r8, lsl #18
   1876c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18770:	andeq	r8, r1, r0, asr r9
   18774:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18778:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1877c:	andeq	r8, r1, r0, ror #27
   18780:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18784:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18788:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1878c:	ldrdeq	r8, [r1], -ip
   18790:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18794:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18798:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1879c:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187a0:	andeq	r8, r1, r8, lsl #30
   187a4:	andeq	r8, r1, r4, asr #21
   187a8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187ac:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187b0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187b4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187b8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187bc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187c0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187c4:	andeq	r9, r1, r0, ror #1
   187c8:	andeq	r9, r1, r8, lsr r1
   187cc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187d8:	andeq	r8, r1, ip, lsl r8
   187dc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187e0:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187e4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187e8:	andeq	r8, r1, r8, lsl #18
   187ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187f0:	andeq	r8, r1, r0, asr r9
   187f4:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187f8:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   187fc:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18800:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18804:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18808:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1880c:	ldrdeq	r8, [r1], -ip
   18810:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18814:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18818:	andeq	r9, r1, r4, lsl r1
   1881c:	mvn	r0, #0
   18820:	mvn	r1, #0
   18824:	mov	r2, r5
   18828:	mov	sl, r3
   1882c:	bl	19bbc <__assert_fail@plt+0x84d8>
   18830:	subs	r3, r0, r6
   18834:	umull	r4, r2, r6, r5
   18838:	mov	lr, #0
   1883c:	str	r1, [sp, #20]
   18840:	sbcs	r3, r1, r7
   18844:	movwcc	lr, #1
   18848:	mla	ip, r6, sl, r2
   1884c:	mov	r2, r1
   18850:	mov	r2, #0
   18854:	cmp	lr, #0
   18858:	mla	r7, r7, r5, ip
   1885c:	mvnne	r4, #0
   18860:	mvnne	r7, #0
   18864:	subs	r6, r0, r4
   18868:	sbcs	r6, r1, r7
   1886c:	umull	r3, r6, r4, r5
   18870:	movwcc	r2, #1
   18874:	cmp	r2, #0
   18878:	mvnne	r3, #0
   1887c:	cmp	r2, #0
   18880:	str	r6, [sp, #16]
   18884:	umull	r6, ip, r3, r5
   18888:	mla	r1, r3, sl, ip
   1888c:	ldr	ip, [sp, #16]
   18890:	str	r1, [sp, #12]
   18894:	mla	r4, r4, sl, ip
   18898:	mla	r4, r7, r5, r4
   1889c:	mvnne	r4, #0
   188a0:	subs	r0, r0, r3
   188a4:	ldr	r0, [sp, #20]
   188a8:	ldr	r7, [sp, #12]
   188ac:	sbcs	r0, r0, r4
   188b0:	mov	r0, #0
   188b4:	mla	r7, r4, r5, r7
   188b8:	movwcc	r0, #1
   188bc:	cmp	r0, #0
   188c0:	mov	r1, r0
   188c4:	orr	r0, lr, r2
   188c8:	mvnne	r7, #0
   188cc:	mvnne	r6, #0
   188d0:	orr	r3, r0, r1
   188d4:	b	19138 <__assert_fail@plt+0x7a54>
   188d8:	ldr	r0, [sp, #36]	; 0x24
   188dc:	orr	r8, r8, #2
   188e0:	b	1915c <__assert_fail@plt+0x7a78>
   188e4:	cmp	r0, #105	; 0x69
   188e8:	mov	r3, #0
   188ec:	bne	18730 <__assert_fail@plt+0x704c>
   188f0:	ldrb	r0, [r1, #2]
   188f4:	mov	r1, #1
   188f8:	cmp	r0, #66	; 0x42
   188fc:	movweq	r1, #3
   18900:	str	r1, [sp, #28]
   18904:	b	18730 <__assert_fail@plt+0x704c>
   18908:	mvn	r0, #0
   1890c:	mvn	r1, #0
   18910:	mov	r2, r5
   18914:	mov	r4, r3
   18918:	bl	19bbc <__assert_fail@plt+0x84d8>
   1891c:	subs	r0, r0, r6
   18920:	mov	r2, #0
   18924:	sbcs	r0, r1, r7
   18928:	umull	r0, r1, r6, r5
   1892c:	movwcc	r2, #1
   18930:	cmp	r2, #0
   18934:	mla	r1, r6, r4, r1
   18938:	mov	r3, r2
   1893c:	mvnne	r0, #0
   18940:	mla	r7, r7, r5, r1
   18944:	mvnne	r7, #0
   18948:	mov	r6, r0
   1894c:	b	19138 <__assert_fail@plt+0x7a54>
   18950:	mvn	r0, #0
   18954:	mvn	r1, #0
   18958:	mov	r2, r5
   1895c:	str	r3, [sp, #24]
   18960:	bl	19bbc <__assert_fail@plt+0x84d8>
   18964:	subs	r3, r0, r6
   18968:	mov	ip, r0
   1896c:	umull	r4, r0, r6, r5
   18970:	mov	sl, #0
   18974:	sbcs	r3, r1, r7
   18978:	mov	r3, #0
   1897c:	movwcc	r3, #1
   18980:	cmp	r3, #0
   18984:	str	r0, [sp, #20]
   18988:	ldr	r0, [sp, #24]
   1898c:	mvnne	r4, #0
   18990:	cmp	r3, #0
   18994:	umull	lr, r2, r4, r5
   18998:	mla	r2, r4, r0, r2
   1899c:	str	r2, [sp, #16]
   189a0:	ldr	r2, [sp, #20]
   189a4:	mla	r6, r6, r0, r2
   189a8:	ldr	r0, [sp, #16]
   189ac:	mla	r6, r7, r5, r6
   189b0:	mvnne	r6, #0
   189b4:	mla	r7, r6, r5, r0
   189b8:	subs	r0, ip, r4
   189bc:	sbcs	r0, r1, r6
   189c0:	movwcc	sl, #1
   189c4:	cmp	sl, #0
   189c8:	orr	r3, r3, sl
   189cc:	mvnne	lr, #0
   189d0:	mvnne	r7, #0
   189d4:	mov	r6, lr
   189d8:	b	19138 <__assert_fail@plt+0x7a54>
   189dc:	mvn	r0, #0
   189e0:	mvn	r1, #0
   189e4:	mov	r2, r5
   189e8:	mov	sl, r3
   189ec:	bl	19bbc <__assert_fail@plt+0x84d8>
   189f0:	subs	r3, r0, r6
   189f4:	mov	ip, r1
   189f8:	umull	r2, lr, r6, r5
   189fc:	str	r0, [sp, #20]
   18a00:	sbcs	r3, r1, r7
   18a04:	mov	r1, #0
   18a08:	str	ip, [sp, #16]
   18a0c:	movwcc	r1, #1
   18a10:	mla	r6, r6, sl, lr
   18a14:	mov	lr, #0
   18a18:	cmp	r1, #0
   18a1c:	mla	r7, r7, r5, r6
   18a20:	mvnne	r2, #0
   18a24:	cmp	r1, #0
   18a28:	umull	r3, r4, r2, r5
   18a2c:	mvnne	r7, #0
   18a30:	mla	r4, r2, sl, r4
   18a34:	subs	r2, r0, r2
   18a38:	sbcs	r2, ip, r7
   18a3c:	mla	r4, r7, r5, r4
   18a40:	mov	r2, #0
   18a44:	movwcc	lr, #1
   18a48:	cmp	lr, #0
   18a4c:	mvnne	r3, #0
   18a50:	mvnne	r4, #0
   18a54:	subs	r7, r0, r3
   18a58:	mov	r0, r5
   18a5c:	sbcs	r7, ip, r4
   18a60:	umull	r5, r7, r3, r5
   18a64:	movwcc	r2, #1
   18a68:	cmp	r2, #0
   18a6c:	mla	r3, r3, sl, r7
   18a70:	mvnne	r5, #0
   18a74:	cmp	r2, #0
   18a78:	mla	r3, r4, r0, r3
   18a7c:	umull	r6, ip, r5, r0
   18a80:	mvnne	r3, #0
   18a84:	mla	ip, r5, sl, ip
   18a88:	mla	r7, r3, r0, ip
   18a8c:	ldr	r0, [sp, #20]
   18a90:	subs	r0, r0, r5
   18a94:	ldr	r0, [sp, #16]
   18a98:	sbcs	r0, r0, r3
   18a9c:	mov	r0, #0
   18aa0:	movwcc	r0, #1
   18aa4:	cmp	r0, #0
   18aa8:	mov	r3, r0
   18aac:	orr	r0, r1, lr
   18ab0:	orr	r0, r0, r2
   18ab4:	mvnne	r7, #0
   18ab8:	mvnne	r6, #0
   18abc:	orr	r3, r0, r3
   18ac0:	b	19138 <__assert_fail@plt+0x7a54>
   18ac4:	mvn	r0, #0
   18ac8:	mvn	r1, #0
   18acc:	mov	r2, r5
   18ad0:	mov	r4, r3
   18ad4:	str	r3, [sp, #24]
   18ad8:	bl	19bbc <__assert_fail@plt+0x84d8>
   18adc:	umull	r3, r2, r6, r5
   18ae0:	mla	r2, r6, r4, r2
   18ae4:	subs	r6, r0, r6
   18ae8:	sbcs	r6, r1, r7
   18aec:	mov	r6, #0
   18af0:	mla	ip, r7, r5, r2
   18af4:	ldr	r2, [sp, #24]
   18af8:	movwcc	r6, #1
   18afc:	cmp	r6, #0
   18b00:	str	r6, [sp, #20]
   18b04:	mov	r6, #0
   18b08:	mvnne	r3, #0
   18b0c:	mvnne	ip, #0
   18b10:	subs	r4, r0, r3
   18b14:	umull	r7, lr, r3, r5
   18b18:	sbcs	r4, r1, ip
   18b1c:	movwcc	r6, #1
   18b20:	mla	r3, r3, r2, lr
   18b24:	cmp	r6, #0
   18b28:	str	r6, [sp, #16]
   18b2c:	mvnne	r7, #0
   18b30:	cmp	r6, #0
   18b34:	umull	sl, r4, r7, r5
   18b38:	mla	r4, r7, r2, r4
   18b3c:	mla	r2, ip, r5, r3
   18b40:	mvnne	r2, #0
   18b44:	subs	r3, r0, r7
   18b48:	mov	ip, #0
   18b4c:	mla	r6, r2, r5, r4
   18b50:	sbcs	r2, r1, r2
   18b54:	mov	r4, r0
   18b58:	mov	r0, #0
   18b5c:	movwcc	r0, #1
   18b60:	mov	r3, r4
   18b64:	cmp	r0, #0
   18b68:	str	r0, [sp, #12]
   18b6c:	mov	r0, r1
   18b70:	str	r3, [sp, #4]
   18b74:	mvnne	sl, #0
   18b78:	mvnne	r6, #0
   18b7c:	str	r0, [sp, #8]
   18b80:	subs	r2, r4, sl
   18b84:	ldr	r4, [sp, #24]
   18b88:	sbcs	r2, r1, r6
   18b8c:	umull	r7, r2, sl, r5
   18b90:	movwcc	ip, #1
   18b94:	cmp	ip, #0
   18b98:	mvnne	r7, #0
   18b9c:	mla	r2, sl, r4, r2
   18ba0:	cmp	ip, #0
   18ba4:	mov	sl, #0
   18ba8:	umull	r1, lr, r7, r5
   18bac:	mla	r2, r6, r5, r2
   18bb0:	mvnne	r2, #0
   18bb4:	subs	r6, r3, r7
   18bb8:	mla	lr, r7, r4, lr
   18bbc:	mla	lr, r2, r5, lr
   18bc0:	sbcs	r2, r0, r2
   18bc4:	mov	r2, #0
   18bc8:	movwcc	sl, #1
   18bcc:	cmp	sl, #0
   18bd0:	mvnne	r1, #0
   18bd4:	mvnne	lr, #0
   18bd8:	subs	r6, r3, r1
   18bdc:	ldr	r3, [sp, #24]
   18be0:	sbcs	r6, r0, lr
   18be4:	umull	r0, r7, r1, r5
   18be8:	movwcc	r2, #1
   18bec:	cmp	r2, #0
   18bf0:	mvnne	r0, #0
   18bf4:	mla	r1, r1, r3, r7
   18bf8:	cmp	r2, #0
   18bfc:	umull	r6, r4, r0, r5
   18c00:	mla	r1, lr, r5, r1
   18c04:	mvnne	r1, #0
   18c08:	mla	r4, r0, r3, r4
   18c0c:	ldr	r3, [sp, #4]
   18c10:	mla	r7, r1, r5, r4
   18c14:	ldr	r5, [sp, #16]
   18c18:	subs	r0, r3, r0
   18c1c:	ldr	r0, [sp, #8]
   18c20:	sbcs	r0, r0, r1
   18c24:	mov	r0, #0
   18c28:	movwcc	r0, #1
   18c2c:	cmp	r0, #0
   18c30:	mov	r1, r0
   18c34:	ldr	r0, [sp, #20]
   18c38:	mvnne	r7, #0
   18c3c:	mvnne	r6, #0
   18c40:	orr	r0, r0, r5
   18c44:	ldr	r5, [sp, #12]
   18c48:	orr	r0, r0, r5
   18c4c:	orr	r0, r0, ip
   18c50:	orr	r0, r0, sl
   18c54:	orr	r0, r0, r2
   18c58:	orr	r0, r0, r1
   18c5c:	b	190d8 <__assert_fail@plt+0x79f4>
   18c60:	mov	r1, #0
   18c64:	lsl	r2, r7, #10
   18c68:	lsl	r0, r6, #10
   18c6c:	lsr	r3, r7, #22
   18c70:	cmp	r1, r7, lsr #22
   18c74:	orr	r2, r2, r6, lsr #22
   18c78:	mvnne	r0, #0
   18c7c:	movwne	r3, #1
   18c80:	cmp	r1, r7, lsr #22
   18c84:	b	19104 <__assert_fail@plt+0x7a20>
   18c88:	mvn	r0, #0
   18c8c:	mvn	r1, #0
   18c90:	mov	r2, r5
   18c94:	mov	sl, r3
   18c98:	bl	19bbc <__assert_fail@plt+0x84d8>
   18c9c:	subs	r2, r0, r6
   18ca0:	mov	ip, r0
   18ca4:	mov	r0, #0
   18ca8:	sbcs	r2, r1, r7
   18cac:	umull	r4, r2, r6, r5
   18cb0:	movwcc	r0, #1
   18cb4:	cmp	r0, #0
   18cb8:	mla	r2, r6, sl, r2
   18cbc:	str	r0, [sp, #20]
   18cc0:	mvnne	r4, #0
   18cc4:	cmp	r0, #0
   18cc8:	mla	r2, r7, r5, r2
   18ccc:	mov	r0, #0
   18cd0:	umull	lr, r3, r4, r5
   18cd4:	mvnne	r2, #0
   18cd8:	mla	r3, r4, sl, r3
   18cdc:	mla	r6, r2, r5, r3
   18ce0:	subs	r3, ip, r4
   18ce4:	mov	r3, r1
   18ce8:	sbcs	r2, r1, r2
   18cec:	str	r3, [sp, #8]
   18cf0:	movwcc	r0, #1
   18cf4:	cmp	r0, #0
   18cf8:	str	r0, [sp, #16]
   18cfc:	mov	r0, ip
   18d00:	mvnne	lr, #0
   18d04:	mvnne	r6, #0
   18d08:	str	r0, [sp, #12]
   18d0c:	subs	r2, ip, lr
   18d10:	umull	r7, r4, lr, r5
   18d14:	sbcs	r2, r1, r6
   18d18:	mov	r2, #0
   18d1c:	movwcc	r2, #1
   18d20:	mla	r4, lr, sl, r4
   18d24:	cmp	r2, #0
   18d28:	mla	r6, r6, r5, r4
   18d2c:	mov	r4, #0
   18d30:	mvnne	r7, #0
   18d34:	cmp	r2, #0
   18d38:	umull	r1, ip, r7, r5
   18d3c:	mvnne	r6, #0
   18d40:	mla	ip, r7, sl, ip
   18d44:	subs	r7, r0, r7
   18d48:	sbcs	r7, r3, r6
   18d4c:	mla	lr, r6, r5, ip
   18d50:	mov	ip, #0
   18d54:	movwcc	ip, #1
   18d58:	cmp	ip, #0
   18d5c:	mvnne	r1, #0
   18d60:	mvnne	lr, #0
   18d64:	subs	r7, r0, r1
   18d68:	sbcs	r7, r3, lr
   18d6c:	umull	r0, r7, r1, r5
   18d70:	movwcc	r4, #1
   18d74:	cmp	r4, #0
   18d78:	mla	r1, r1, sl, r7
   18d7c:	mvnne	r0, #0
   18d80:	cmp	r4, #0
   18d84:	mla	r1, lr, r5, r1
   18d88:	umull	r6, r3, r0, r5
   18d8c:	mvnne	r1, #0
   18d90:	mla	r3, r0, sl, r3
   18d94:	mla	r7, r1, r5, r3
   18d98:	ldr	r3, [sp, #12]
   18d9c:	subs	r0, r3, r0
   18da0:	ldr	r0, [sp, #8]
   18da4:	ldr	r3, [sp, #16]
   18da8:	sbcs	r0, r0, r1
   18dac:	mov	r0, #0
   18db0:	movwcc	r0, #1
   18db4:	cmp	r0, #0
   18db8:	mov	r1, r0
   18dbc:	ldr	r0, [sp, #20]
   18dc0:	mvnne	r7, #0
   18dc4:	mvnne	r6, #0
   18dc8:	orr	r0, r0, r3
   18dcc:	orr	r0, r0, r2
   18dd0:	orr	r0, r0, ip
   18dd4:	orr	r0, r0, r4
   18dd8:	orr	r3, r0, r1
   18ddc:	b	19138 <__assert_fail@plt+0x7a54>
   18de0:	mvn	r0, #0
   18de4:	mvn	r1, #0
   18de8:	mov	r2, r5
   18dec:	mov	sl, r3
   18df0:	bl	19bbc <__assert_fail@plt+0x84d8>
   18df4:	umull	r3, r2, r6, r5
   18df8:	mov	lr, r1
   18dfc:	mov	r1, r0
   18e00:	mla	r2, r6, sl, r2
   18e04:	subs	r6, r0, r6
   18e08:	mov	r0, #0
   18e0c:	sbcs	r6, lr, r7
   18e10:	mla	r2, r7, r5, r2
   18e14:	movwcc	r0, #1
   18e18:	cmp	r0, #0
   18e1c:	str	r0, [sp, #20]
   18e20:	mov	r0, r1
   18e24:	mvnne	r3, #0
   18e28:	mvnne	r2, #0
   18e2c:	str	r0, [sp, #16]
   18e30:	subs	r4, r1, r3
   18e34:	umull	r7, ip, r3, r5
   18e38:	sbcs	r4, lr, r2
   18e3c:	mov	r4, #0
   18e40:	movwcc	r4, #1
   18e44:	mla	r3, r3, sl, ip
   18e48:	mov	ip, #0
   18e4c:	cmp	r4, #0
   18e50:	mla	r2, r2, r5, r3
   18e54:	mvnne	r7, #0
   18e58:	cmp	r4, #0
   18e5c:	umull	r1, r6, r7, r5
   18e60:	mvnne	r2, #0
   18e64:	mla	r6, r7, sl, r6
   18e68:	mla	r3, r2, r5, r6
   18e6c:	subs	r6, r0, r7
   18e70:	sbcs	r2, lr, r2
   18e74:	mov	r2, #0
   18e78:	movwcc	ip, #1
   18e7c:	cmp	ip, #0
   18e80:	mvnne	r1, #0
   18e84:	mvnne	r3, #0
   18e88:	subs	r6, r0, r1
   18e8c:	sbcs	r6, lr, r3
   18e90:	umull	r0, r6, r1, r5
   18e94:	movwcc	r2, #1
   18e98:	cmp	r2, #0
   18e9c:	mvnne	r0, #0
   18ea0:	cmp	r2, #0
   18ea4:	str	r6, [sp, #12]
   18ea8:	umull	r6, r7, r0, r5
   18eac:	mla	r7, r0, sl, r7
   18eb0:	str	r7, [sp, #8]
   18eb4:	ldr	r7, [sp, #12]
   18eb8:	mla	r1, r1, sl, r7
   18ebc:	mla	r1, r3, r5, r1
   18ec0:	ldr	r3, [sp, #8]
   18ec4:	mvnne	r1, #0
   18ec8:	mla	r7, r1, r5, r3
   18ecc:	ldr	r3, [sp, #16]
   18ed0:	subs	r0, r3, r0
   18ed4:	sbcs	r0, lr, r1
   18ed8:	mov	r0, #0
   18edc:	movwcc	r0, #1
   18ee0:	cmp	r0, #0
   18ee4:	mov	r1, r0
   18ee8:	ldr	r0, [sp, #20]
   18eec:	mvnne	r7, #0
   18ef0:	mvnne	r6, #0
   18ef4:	orr	r0, r0, r4
   18ef8:	orr	r0, r0, ip
   18efc:	orr	r0, r0, r2
   18f00:	orr	r3, r0, r1
   18f04:	b	19138 <__assert_fail@plt+0x7a54>
   18f08:	mvn	r0, #0
   18f0c:	mvn	r1, #0
   18f10:	mov	r2, r5
   18f14:	mov	sl, r3
   18f18:	bl	19bbc <__assert_fail@plt+0x84d8>
   18f1c:	mov	lr, r0
   18f20:	subs	r0, r0, r6
   18f24:	mov	r2, #0
   18f28:	mov	ip, r1
   18f2c:	str	sl, [sp, #24]
   18f30:	sbcs	r0, r1, r7
   18f34:	umull	r3, r1, r6, r5
   18f38:	str	lr, [sp, #4]
   18f3c:	movwcc	r2, #1
   18f40:	cmp	r2, #0
   18f44:	mla	r6, r6, sl, r1
   18f48:	mov	r1, #0
   18f4c:	str	r2, [sp, #20]
   18f50:	mvnne	r3, #0
   18f54:	cmp	r2, #0
   18f58:	mla	r7, r7, r5, r6
   18f5c:	mov	r2, #0
   18f60:	umull	r0, r4, r3, r5
   18f64:	mvnne	r7, #0
   18f68:	mla	r4, r3, sl, r4
   18f6c:	subs	r3, lr, r3
   18f70:	sbcs	r3, ip, r7
   18f74:	mla	r4, r7, r5, r4
   18f78:	movwcc	r1, #1
   18f7c:	cmp	r1, #0
   18f80:	str	r1, [sp, #16]
   18f84:	mvnne	r0, #0
   18f88:	mvnne	r4, #0
   18f8c:	subs	r3, lr, r0
   18f90:	sbcs	r3, ip, r4
   18f94:	umull	r6, r3, r0, r5
   18f98:	movwcc	r2, #1
   18f9c:	cmp	r2, #0
   18fa0:	mla	r0, r0, sl, r3
   18fa4:	str	r2, [sp, #12]
   18fa8:	mvnne	r6, #0
   18fac:	cmp	r2, #0
   18fb0:	mla	r0, r4, r5, r0
   18fb4:	ldr	r4, [sp, #24]
   18fb8:	umull	r1, r7, r6, r5
   18fbc:	mvnne	r0, #0
   18fc0:	subs	r3, lr, r6
   18fc4:	mov	r3, ip
   18fc8:	str	r3, [sp]
   18fcc:	mla	r7, r6, sl, r7
   18fd0:	mla	r7, r0, r5, r7
   18fd4:	sbcs	r0, ip, r0
   18fd8:	mov	r0, #0
   18fdc:	movwcc	r0, #1
   18fe0:	cmp	r0, #0
   18fe4:	str	r0, [sp, #8]
   18fe8:	mvnne	r1, #0
   18fec:	mvnne	r7, #0
   18ff0:	subs	r0, lr, r1
   18ff4:	sbcs	r0, ip, r7
   18ff8:	mov	ip, #0
   18ffc:	umull	r6, r0, r1, r5
   19000:	movwcc	ip, #1
   19004:	cmp	ip, #0
   19008:	mla	r1, r1, r4, r0
   1900c:	mov	r0, lr
   19010:	mvnne	r6, #0
   19014:	cmp	ip, #0
   19018:	mla	r1, r7, r5, r1
   1901c:	umull	r2, sl, r6, r5
   19020:	mvnne	r1, #0
   19024:	mla	sl, r6, r4, sl
   19028:	subs	r6, lr, r6
   1902c:	mov	lr, #0
   19030:	mla	r7, r1, r5, sl
   19034:	sbcs	r1, r3, r1
   19038:	ldr	r1, [sp, #24]
   1903c:	movwcc	lr, #1
   19040:	cmp	lr, #0
   19044:	mvnne	r2, #0
   19048:	mvnne	r7, #0
   1904c:	subs	r6, r0, r2
   19050:	umull	r0, sl, r2, r5
   19054:	sbcs	r6, r3, r7
   19058:	mov	r3, #0
   1905c:	movwcc	r3, #1
   19060:	mla	r2, r2, r1, sl
   19064:	cmp	r3, #0
   19068:	mla	r2, r7, r5, r2
   1906c:	mvnne	r0, #0
   19070:	cmp	r3, #0
   19074:	umull	r6, r4, r0, r5
   19078:	mvnne	r2, #0
   1907c:	mla	r4, r0, r1, r4
   19080:	ldr	r1, [sp, #4]
   19084:	mla	r7, r2, r5, r4
   19088:	ldr	r5, [sp, #16]
   1908c:	subs	r0, r1, r0
   19090:	ldr	r0, [sp]
   19094:	sbcs	r0, r0, r2
   19098:	mov	r0, #0
   1909c:	movwcc	r0, #1
   190a0:	cmp	r0, #0
   190a4:	mov	r2, r0
   190a8:	ldr	r0, [sp, #20]
   190ac:	mvnne	r7, #0
   190b0:	mvnne	r6, #0
   190b4:	orr	r0, r0, r5
   190b8:	ldr	r5, [sp, #12]
   190bc:	orr	r0, r0, r5
   190c0:	ldr	r5, [sp, #8]
   190c4:	orr	r0, r0, r5
   190c8:	orr	r0, r0, ip
   190cc:	orr	r0, r0, lr
   190d0:	orr	r0, r0, r3
   190d4:	orr	r0, r0, r2
   190d8:	and	r3, r0, #1
   190dc:	b	19138 <__assert_fail@plt+0x7a54>
   190e0:	mov	r1, #0
   190e4:	lsl	r2, r7, #9
   190e8:	lsl	r0, r6, #9
   190ec:	lsr	r3, r7, #23
   190f0:	cmp	r1, r7, lsr #23
   190f4:	orr	r2, r2, r6, lsr #23
   190f8:	mvnne	r0, #0
   190fc:	movwne	r3, #1
   19100:	cmp	r1, r7, lsr #23
   19104:	mvnne	r2, #0
   19108:	mov	r6, r0
   1910c:	mov	r7, r2
   19110:	b	19138 <__assert_fail@plt+0x7a54>
   19114:	lsl	r1, r7, #1
   19118:	cmp	r7, #0
   1911c:	lsl	r0, r6, #1
   19120:	lsr	r3, r7, #31
   19124:	orr	r1, r1, r6, lsr #31
   19128:	mvnmi	r0, #0
   1912c:	mvnmi	r1, #0
   19130:	mov	r6, r0
   19134:	mov	r7, r1
   19138:	ldr	r1, [sp, #32]
   1913c:	ldr	r2, [sp, #28]
   19140:	orr	r8, r3, r8
   19144:	add	r0, r1, r2
   19148:	str	r0, [r9]
   1914c:	ldrb	r0, [r1, r2]
   19150:	cmp	r0, #0
   19154:	orrne	r8, r8, #2
   19158:	ldr	r0, [sp, #36]	; 0x24
   1915c:	strd	r6, [r0]
   19160:	mov	r0, r8
   19164:	sub	sp, fp, #28
   19168:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1916c:	movw	r0, #45263	; 0xb0cf
   19170:	movw	r1, #45301	; 0xb0f5
   19174:	movw	r3, #45317	; 0xb105
   19178:	mov	r2, #85	; 0x55
   1917c:	movt	r0, #1
   19180:	movt	r1, #1
   19184:	movt	r3, #1
   19188:	bl	116e4 <__assert_fail@plt>
   1918c:	clz	r2, r1
   19190:	clz	r3, r0
   19194:	lsr	r2, r2, #5
   19198:	lsr	r3, r3, #5
   1919c:	orrs	r2, r3, r2
   191a0:	movwne	r1, #1
   191a4:	movwne	r0, #1
   191a8:	cmp	r1, #0
   191ac:	beq	191dc <__assert_fail@plt+0x7af8>
   191b0:	mvn	r2, #-2147483648	; 0x80000000
   191b4:	udiv	r2, r2, r1
   191b8:	cmp	r2, r0
   191bc:	bcs	191dc <__assert_fail@plt+0x7af8>
   191c0:	push	{fp, lr}
   191c4:	mov	fp, sp
   191c8:	bl	11558 <__errno_location@plt>
   191cc:	mov	r1, #12
   191d0:	str	r1, [r0]
   191d4:	mov	r0, #0
   191d8:	pop	{fp, pc}
   191dc:	b	11360 <calloc@plt>
   191e0:	cmp	r0, #0
   191e4:	movweq	r0, #1
   191e8:	cmn	r0, #1
   191ec:	ble	191f4 <__assert_fail@plt+0x7b10>
   191f0:	b	114d4 <malloc@plt>
   191f4:	push	{fp, lr}
   191f8:	mov	fp, sp
   191fc:	bl	11558 <__errno_location@plt>
   19200:	mov	r1, #12
   19204:	str	r1, [r0]
   19208:	mov	r0, #0
   1920c:	pop	{fp, pc}
   19210:	push	{fp, lr}
   19214:	mov	fp, sp
   19218:	cmp	r0, #0
   1921c:	beq	19238 <__assert_fail@plt+0x7b54>
   19220:	cmp	r1, #0
   19224:	beq	19244 <__assert_fail@plt+0x7b60>
   19228:	cmn	r1, #1
   1922c:	ble	19250 <__assert_fail@plt+0x7b6c>
   19230:	pop	{fp, lr}
   19234:	b	11420 <realloc@plt>
   19238:	mov	r0, r1
   1923c:	pop	{fp, lr}
   19240:	b	191e0 <__assert_fail@plt+0x7afc>
   19244:	bl	13fb0 <__assert_fail@plt+0x28cc>
   19248:	mov	r0, #0
   1924c:	pop	{fp, pc}
   19250:	bl	11558 <__errno_location@plt>
   19254:	mov	r1, #12
   19258:	str	r1, [r0]
   1925c:	mov	r0, #0
   19260:	pop	{fp, pc}
   19264:	push	{r4, r5, r6, sl, fp, lr}
   19268:	add	fp, sp, #16
   1926c:	mov	r4, r0
   19270:	bl	11498 <__fpending@plt>
   19274:	ldr	r6, [r4]
   19278:	mov	r5, r0
   1927c:	mov	r0, r4
   19280:	bl	192e8 <__assert_fail@plt+0x7c04>
   19284:	tst	r6, #32
   19288:	bne	192c0 <__assert_fail@plt+0x7bdc>
   1928c:	cmp	r0, #0
   19290:	mov	r4, r0
   19294:	mvnne	r4, #0
   19298:	cmp	r5, #0
   1929c:	bne	192cc <__assert_fail@plt+0x7be8>
   192a0:	cmp	r0, #0
   192a4:	beq	192cc <__assert_fail@plt+0x7be8>
   192a8:	bl	11558 <__errno_location@plt>
   192ac:	ldr	r0, [r0]
   192b0:	subs	r4, r0, #9
   192b4:	mvnne	r4, #0
   192b8:	mov	r0, r4
   192bc:	pop	{r4, r5, r6, sl, fp, pc}
   192c0:	mvn	r4, #0
   192c4:	cmp	r0, #0
   192c8:	beq	192d4 <__assert_fail@plt+0x7bf0>
   192cc:	mov	r0, r4
   192d0:	pop	{r4, r5, r6, sl, fp, pc}
   192d4:	bl	11558 <__errno_location@plt>
   192d8:	mov	r1, #0
   192dc:	str	r1, [r0]
   192e0:	mov	r0, r4
   192e4:	pop	{r4, r5, r6, sl, fp, pc}
   192e8:	push	{r4, r5, r6, sl, fp, lr}
   192ec:	add	fp, sp, #16
   192f0:	sub	sp, sp, #8
   192f4:	mov	r4, r0
   192f8:	bl	115b8 <fileno@plt>
   192fc:	cmn	r0, #1
   19300:	ble	19374 <__assert_fail@plt+0x7c90>
   19304:	mov	r0, r4
   19308:	bl	114ec <__freading@plt>
   1930c:	cmp	r0, #0
   19310:	beq	1933c <__assert_fail@plt+0x7c58>
   19314:	mov	r0, r4
   19318:	bl	115b8 <fileno@plt>
   1931c:	mov	r1, #1
   19320:	mov	r2, #0
   19324:	mov	r3, #0
   19328:	str	r1, [sp]
   1932c:	bl	11474 <lseek64@plt>
   19330:	and	r0, r0, r1
   19334:	cmn	r0, #1
   19338:	beq	19374 <__assert_fail@plt+0x7c90>
   1933c:	mov	r0, r4
   19340:	bl	19384 <__assert_fail@plt+0x7ca0>
   19344:	cmp	r0, #0
   19348:	beq	19374 <__assert_fail@plt+0x7c90>
   1934c:	bl	11558 <__errno_location@plt>
   19350:	ldr	r6, [r0]
   19354:	mov	r5, r0
   19358:	mov	r0, r4
   1935c:	bl	115dc <fclose@plt>
   19360:	cmp	r6, #0
   19364:	strne	r6, [r5]
   19368:	mvnne	r0, #0
   1936c:	sub	sp, fp, #16
   19370:	pop	{r4, r5, r6, sl, fp, pc}
   19374:	mov	r0, r4
   19378:	sub	sp, fp, #16
   1937c:	pop	{r4, r5, r6, sl, fp, lr}
   19380:	b	115dc <fclose@plt>
   19384:	push	{r4, sl, fp, lr}
   19388:	add	fp, sp, #8
   1938c:	sub	sp, sp, #8
   19390:	mov	r4, r0
   19394:	cmp	r0, #0
   19398:	beq	193d0 <__assert_fail@plt+0x7cec>
   1939c:	mov	r0, r4
   193a0:	bl	114ec <__freading@plt>
   193a4:	cmp	r0, #0
   193a8:	beq	193d0 <__assert_fail@plt+0x7cec>
   193ac:	ldrb	r0, [r4, #1]
   193b0:	tst	r0, #1
   193b4:	beq	193d0 <__assert_fail@plt+0x7cec>
   193b8:	mov	r0, #1
   193bc:	mov	r2, #0
   193c0:	mov	r3, #0
   193c4:	str	r0, [sp]
   193c8:	mov	r0, r4
   193cc:	bl	19490 <__assert_fail@plt+0x7dac>
   193d0:	mov	r0, r4
   193d4:	sub	sp, fp, #8
   193d8:	pop	{r4, sl, fp, lr}
   193dc:	b	1139c <fflush@plt>
   193e0:	push	{r4, r5, r6, r7, fp, lr}
   193e4:	add	fp, sp, #16
   193e8:	mov	r5, r1
   193ec:	bl	11648 <fopen64@plt>
   193f0:	mov	r4, #0
   193f4:	cmp	r0, #0
   193f8:	beq	19460 <__assert_fail@plt+0x7d7c>
   193fc:	mov	r6, r0
   19400:	bl	115b8 <fileno@plt>
   19404:	cmp	r0, #2
   19408:	bhi	19468 <__assert_fail@plt+0x7d84>
   1940c:	bl	19610 <__assert_fail@plt+0x7f2c>
   19410:	cmn	r0, #1
   19414:	ble	19470 <__assert_fail@plt+0x7d8c>
   19418:	mov	r7, r0
   1941c:	mov	r0, r6
   19420:	bl	192e8 <__assert_fail@plt+0x7c04>
   19424:	cmp	r0, #0
   19428:	bne	19444 <__assert_fail@plt+0x7d60>
   1942c:	mov	r0, r7
   19430:	mov	r1, r5
   19434:	bl	11354 <fdopen@plt>
   19438:	mov	r4, r0
   1943c:	cmp	r0, #0
   19440:	bne	19460 <__assert_fail@plt+0x7d7c>
   19444:	bl	11558 <__errno_location@plt>
   19448:	ldr	r5, [r0]
   1944c:	mov	r4, r0
   19450:	mov	r0, r7
   19454:	bl	116d8 <close@plt>
   19458:	str	r5, [r4]
   1945c:	mov	r4, #0
   19460:	mov	r0, r4
   19464:	pop	{r4, r5, r6, r7, fp, pc}
   19468:	mov	r0, r6
   1946c:	pop	{r4, r5, r6, r7, fp, pc}
   19470:	bl	11558 <__errno_location@plt>
   19474:	ldr	r7, [r0]
   19478:	mov	r5, r0
   1947c:	mov	r0, r6
   19480:	bl	192e8 <__assert_fail@plt+0x7c04>
   19484:	mov	r0, r4
   19488:	str	r7, [r5]
   1948c:	pop	{r4, r5, r6, r7, fp, pc}
   19490:	push	{r4, r5, r6, r7, fp, lr}
   19494:	add	fp, sp, #16
   19498:	sub	sp, sp, #8
   1949c:	mov	r4, r0
   194a0:	ldr	r0, [r0, #4]
   194a4:	mov	r5, r3
   194a8:	mov	r6, r2
   194ac:	ldr	r1, [r4, #8]
   194b0:	cmp	r1, r0
   194b4:	bne	194d0 <__assert_fail@plt+0x7dec>
   194b8:	ldrd	r0, [r4, #16]
   194bc:	cmp	r1, r0
   194c0:	bne	194d0 <__assert_fail@plt+0x7dec>
   194c4:	ldr	r0, [r4, #36]	; 0x24
   194c8:	cmp	r0, #0
   194cc:	beq	194e8 <__assert_fail@plt+0x7e04>
   194d0:	mov	r0, r4
   194d4:	mov	r2, r6
   194d8:	mov	r3, r5
   194dc:	sub	sp, fp, #16
   194e0:	pop	{r4, r5, r6, r7, fp, lr}
   194e4:	b	115e8 <fseeko64@plt>
   194e8:	ldr	r7, [fp, #8]
   194ec:	mov	r0, r4
   194f0:	bl	115b8 <fileno@plt>
   194f4:	mov	r2, r6
   194f8:	mov	r3, r5
   194fc:	str	r7, [sp]
   19500:	bl	11474 <lseek64@plt>
   19504:	and	r2, r0, r1
   19508:	cmn	r2, #1
   1950c:	beq	1952c <__assert_fail@plt+0x7e48>
   19510:	strd	r0, [r4, #80]	; 0x50
   19514:	ldr	r0, [r4]
   19518:	bic	r0, r0, #16
   1951c:	str	r0, [r4]
   19520:	mov	r0, #0
   19524:	sub	sp, fp, #16
   19528:	pop	{r4, r5, r6, r7, fp, pc}
   1952c:	mvn	r0, #0
   19530:	sub	sp, fp, #16
   19534:	pop	{r4, r5, r6, r7, fp, pc}
   19538:	push	{fp, lr}
   1953c:	mov	fp, sp
   19540:	mov	r0, #14
   19544:	bl	11630 <nl_langinfo@plt>
   19548:	movw	r1, #41895	; 0xa3a7
   1954c:	cmp	r0, #0
   19550:	movt	r1, #1
   19554:	movne	r1, r0
   19558:	movw	r0, #45396	; 0xb154
   1955c:	ldrb	r2, [r1]
   19560:	movt	r0, #1
   19564:	cmp	r2, #0
   19568:	movne	r0, r1
   1956c:	pop	{fp, pc}
   19570:	push	{r4, r5, r6, r7, fp, lr}
   19574:	add	fp, sp, #16
   19578:	sub	sp, sp, #8
   1957c:	cmp	r0, #0
   19580:	add	r5, sp, #4
   19584:	mov	r7, r2
   19588:	mov	r4, r1
   1958c:	movne	r5, r0
   19590:	mov	r0, r5
   19594:	bl	114a4 <mbrtowc@plt>
   19598:	mov	r6, r0
   1959c:	cmp	r7, #0
   195a0:	beq	195c8 <__assert_fail@plt+0x7ee4>
   195a4:	cmn	r6, #2
   195a8:	bcc	195c8 <__assert_fail@plt+0x7ee4>
   195ac:	mov	r0, #0
   195b0:	bl	1961c <__assert_fail@plt+0x7f38>
   195b4:	cmp	r0, #0
   195b8:	bne	195c8 <__assert_fail@plt+0x7ee4>
   195bc:	ldrb	r0, [r4]
   195c0:	mov	r6, #1
   195c4:	str	r0, [r5]
   195c8:	mov	r0, r6
   195cc:	sub	sp, fp, #16
   195d0:	pop	{r4, r5, r6, r7, fp, pc}
   195d4:	cmp	r2, #0
   195d8:	beq	19608 <__assert_fail@plt+0x7f24>
   195dc:	mvn	r3, #0
   195e0:	udiv	r3, r3, r2
   195e4:	cmp	r3, r1
   195e8:	bcs	19608 <__assert_fail@plt+0x7f24>
   195ec:	push	{fp, lr}
   195f0:	mov	fp, sp
   195f4:	bl	11558 <__errno_location@plt>
   195f8:	mov	r1, #12
   195fc:	str	r1, [r0]
   19600:	mov	r0, #0
   19604:	pop	{fp, pc}
   19608:	mul	r1, r2, r1
   1960c:	b	19210 <__assert_fail@plt+0x7b2c>
   19610:	mov	r1, #0
   19614:	mov	r2, #3
   19618:	b	13d94 <__assert_fail@plt+0x26b0>
   1961c:	push	{r4, sl, fp, lr}
   19620:	add	fp, sp, #8
   19624:	sub	sp, sp, #264	; 0x108
   19628:	add	r1, sp, #7
   1962c:	movw	r2, #257	; 0x101
   19630:	bl	19688 <__assert_fail@plt+0x7fa4>
   19634:	mov	r4, #0
   19638:	cmp	r0, #0
   1963c:	bne	1967c <__assert_fail@plt+0x7f98>
   19640:	movw	r1, #45402	; 0xb15a
   19644:	add	r0, sp, #7
   19648:	mov	r2, #2
   1964c:	movt	r1, #1
   19650:	bl	11528 <bcmp@plt>
   19654:	cmp	r0, #0
   19658:	beq	1967c <__assert_fail@plt+0x7f98>
   1965c:	movw	r1, #45404	; 0xb15c
   19660:	add	r0, sp, #7
   19664:	mov	r2, #6
   19668:	movt	r1, #1
   1966c:	bl	11528 <bcmp@plt>
   19670:	cmp	r0, #0
   19674:	mov	r4, r0
   19678:	movwne	r4, #1
   1967c:	mov	r0, r4
   19680:	sub	sp, fp, #8
   19684:	pop	{r4, sl, fp, pc}
   19688:	push	{r4, r5, r6, r7, fp, lr}
   1968c:	add	fp, sp, #16
   19690:	mov	r4, r1
   19694:	mov	r1, #0
   19698:	mov	r6, r2
   1969c:	bl	1160c <setlocale@plt>
   196a0:	cmp	r0, #0
   196a4:	beq	196d4 <__assert_fail@plt+0x7ff0>
   196a8:	mov	r7, r0
   196ac:	bl	11534 <strlen@plt>
   196b0:	cmp	r0, r6
   196b4:	bcs	196f0 <__assert_fail@plt+0x800c>
   196b8:	add	r2, r0, #1
   196bc:	mov	r0, r4
   196c0:	mov	r1, r7
   196c4:	bl	113cc <memcpy@plt>
   196c8:	mov	r5, #0
   196cc:	mov	r0, r5
   196d0:	pop	{r4, r5, r6, r7, fp, pc}
   196d4:	mov	r5, #22
   196d8:	cmp	r6, #0
   196dc:	beq	19718 <__assert_fail@plt+0x8034>
   196e0:	mov	r0, #0
   196e4:	strb	r0, [r4]
   196e8:	mov	r0, r5
   196ec:	pop	{r4, r5, r6, r7, fp, pc}
   196f0:	mov	r5, #34	; 0x22
   196f4:	cmp	r6, #0
   196f8:	beq	19718 <__assert_fail@plt+0x8034>
   196fc:	sub	r6, r6, #1
   19700:	mov	r0, r4
   19704:	mov	r1, r7
   19708:	mov	r2, r6
   1970c:	bl	113cc <memcpy@plt>
   19710:	mov	r0, #0
   19714:	strb	r0, [r4, r6]
   19718:	mov	r0, r5
   1971c:	pop	{r4, r5, r6, r7, fp, pc}
   19720:	mov	r1, #0
   19724:	b	1160c <setlocale@plt>
   19728:	eor	r1, r1, #-2147483648	; 0x80000000
   1972c:	b	19734 <__assert_fail@plt+0x8050>
   19730:	eor	r3, r3, #-2147483648	; 0x80000000
   19734:	push	{r4, r5, lr}
   19738:	lsl	r4, r1, #1
   1973c:	lsl	r5, r3, #1
   19740:	teq	r4, r5
   19744:	teqeq	r0, r2
   19748:	orrsne	ip, r4, r0
   1974c:	orrsne	ip, r5, r2
   19750:	mvnsne	ip, r4, asr #21
   19754:	mvnsne	ip, r5, asr #21
   19758:	beq	19944 <__assert_fail@plt+0x8260>
   1975c:	lsr	r4, r4, #21
   19760:	rsbs	r5, r4, r5, lsr #21
   19764:	rsblt	r5, r5, #0
   19768:	ble	19788 <__assert_fail@plt+0x80a4>
   1976c:	add	r4, r4, r5
   19770:	eor	r2, r0, r2
   19774:	eor	r3, r1, r3
   19778:	eor	r0, r2, r0
   1977c:	eor	r1, r3, r1
   19780:	eor	r2, r0, r2
   19784:	eor	r3, r1, r3
   19788:	cmp	r5, #54	; 0x36
   1978c:	pophi	{r4, r5, pc}
   19790:	tst	r1, #-2147483648	; 0x80000000
   19794:	lsl	r1, r1, #12
   19798:	mov	ip, #1048576	; 0x100000
   1979c:	orr	r1, ip, r1, lsr #12
   197a0:	beq	197ac <__assert_fail@plt+0x80c8>
   197a4:	rsbs	r0, r0, #0
   197a8:	rsc	r1, r1, #0
   197ac:	tst	r3, #-2147483648	; 0x80000000
   197b0:	lsl	r3, r3, #12
   197b4:	orr	r3, ip, r3, lsr #12
   197b8:	beq	197c4 <__assert_fail@plt+0x80e0>
   197bc:	rsbs	r2, r2, #0
   197c0:	rsc	r3, r3, #0
   197c4:	teq	r4, r5
   197c8:	beq	1992c <__assert_fail@plt+0x8248>
   197cc:	sub	r4, r4, #1
   197d0:	rsbs	lr, r5, #32
   197d4:	blt	197f0 <__assert_fail@plt+0x810c>
   197d8:	lsl	ip, r2, lr
   197dc:	adds	r0, r0, r2, lsr r5
   197e0:	adc	r1, r1, #0
   197e4:	adds	r0, r0, r3, lsl lr
   197e8:	adcs	r1, r1, r3, asr r5
   197ec:	b	1980c <__assert_fail@plt+0x8128>
   197f0:	sub	r5, r5, #32
   197f4:	add	lr, lr, #32
   197f8:	cmp	r2, #1
   197fc:	lsl	ip, r3, lr
   19800:	orrcs	ip, ip, #2
   19804:	adds	r0, r0, r3, asr r5
   19808:	adcs	r1, r1, r3, asr #31
   1980c:	and	r5, r1, #-2147483648	; 0x80000000
   19810:	bpl	19820 <__assert_fail@plt+0x813c>
   19814:	rsbs	ip, ip, #0
   19818:	rscs	r0, r0, #0
   1981c:	rsc	r1, r1, #0
   19820:	cmp	r1, #1048576	; 0x100000
   19824:	bcc	19864 <__assert_fail@plt+0x8180>
   19828:	cmp	r1, #2097152	; 0x200000
   1982c:	bcc	1984c <__assert_fail@plt+0x8168>
   19830:	lsrs	r1, r1, #1
   19834:	rrxs	r0, r0
   19838:	rrx	ip, ip
   1983c:	add	r4, r4, #1
   19840:	lsl	r2, r4, #21
   19844:	cmn	r2, #4194304	; 0x400000
   19848:	bcs	199a4 <__assert_fail@plt+0x82c0>
   1984c:	cmp	ip, #-2147483648	; 0x80000000
   19850:	lsrseq	ip, r0, #1
   19854:	adcs	r0, r0, #0
   19858:	adc	r1, r1, r4, lsl #20
   1985c:	orr	r1, r1, r5
   19860:	pop	{r4, r5, pc}
   19864:	lsls	ip, ip, #1
   19868:	adcs	r0, r0, r0
   1986c:	adc	r1, r1, r1
   19870:	tst	r1, #1048576	; 0x100000
   19874:	sub	r4, r4, #1
   19878:	bne	1984c <__assert_fail@plt+0x8168>
   1987c:	teq	r1, #0
   19880:	moveq	r1, r0
   19884:	moveq	r0, #0
   19888:	clz	r3, r1
   1988c:	addeq	r3, r3, #32
   19890:	sub	r3, r3, #11
   19894:	subs	r2, r3, #32
   19898:	bge	198bc <__assert_fail@plt+0x81d8>
   1989c:	adds	r2, r2, #12
   198a0:	ble	198b8 <__assert_fail@plt+0x81d4>
   198a4:	add	ip, r2, #20
   198a8:	rsb	r2, r2, #12
   198ac:	lsl	r0, r1, ip
   198b0:	lsr	r1, r1, r2
   198b4:	b	198cc <__assert_fail@plt+0x81e8>
   198b8:	add	r2, r2, #20
   198bc:	rsble	ip, r2, #32
   198c0:	lsl	r1, r1, r2
   198c4:	orrle	r1, r1, r0, lsr ip
   198c8:	lslle	r0, r0, r2
   198cc:	subs	r4, r4, r3
   198d0:	addge	r1, r1, r4, lsl #20
   198d4:	orrge	r1, r1, r5
   198d8:	popge	{r4, r5, pc}
   198dc:	mvn	r4, r4
   198e0:	subs	r4, r4, #31
   198e4:	bge	19920 <__assert_fail@plt+0x823c>
   198e8:	adds	r4, r4, #12
   198ec:	bgt	19908 <__assert_fail@plt+0x8224>
   198f0:	add	r4, r4, #20
   198f4:	rsb	r2, r4, #32
   198f8:	lsr	r0, r0, r4
   198fc:	orr	r0, r0, r1, lsl r2
   19900:	orr	r1, r5, r1, lsr r4
   19904:	pop	{r4, r5, pc}
   19908:	rsb	r4, r4, #12
   1990c:	rsb	r2, r4, #32
   19910:	lsr	r0, r0, r2
   19914:	orr	r0, r0, r1, lsl r4
   19918:	mov	r1, r5
   1991c:	pop	{r4, r5, pc}
   19920:	lsr	r0, r1, r4
   19924:	mov	r1, r5
   19928:	pop	{r4, r5, pc}
   1992c:	teq	r4, #0
   19930:	eor	r3, r3, #1048576	; 0x100000
   19934:	eoreq	r1, r1, #1048576	; 0x100000
   19938:	addeq	r4, r4, #1
   1993c:	subne	r5, r5, #1
   19940:	b	197cc <__assert_fail@plt+0x80e8>
   19944:	mvns	ip, r4, asr #21
   19948:	mvnsne	ip, r5, asr #21
   1994c:	beq	199b4 <__assert_fail@plt+0x82d0>
   19950:	teq	r4, r5
   19954:	teqeq	r0, r2
   19958:	beq	1996c <__assert_fail@plt+0x8288>
   1995c:	orrs	ip, r4, r0
   19960:	moveq	r1, r3
   19964:	moveq	r0, r2
   19968:	pop	{r4, r5, pc}
   1996c:	teq	r1, r3
   19970:	movne	r1, #0
   19974:	movne	r0, #0
   19978:	popne	{r4, r5, pc}
   1997c:	lsrs	ip, r4, #21
   19980:	bne	19994 <__assert_fail@plt+0x82b0>
   19984:	lsls	r0, r0, #1
   19988:	adcs	r1, r1, r1
   1998c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   19990:	pop	{r4, r5, pc}
   19994:	adds	r4, r4, #4194304	; 0x400000
   19998:	addcc	r1, r1, #1048576	; 0x100000
   1999c:	popcc	{r4, r5, pc}
   199a0:	and	r5, r1, #-2147483648	; 0x80000000
   199a4:	orr	r1, r5, #2130706432	; 0x7f000000
   199a8:	orr	r1, r1, #15728640	; 0xf00000
   199ac:	mov	r0, #0
   199b0:	pop	{r4, r5, pc}
   199b4:	mvns	ip, r4, asr #21
   199b8:	movne	r1, r3
   199bc:	movne	r0, r2
   199c0:	mvnseq	ip, r5, asr #21
   199c4:	movne	r3, r1
   199c8:	movne	r2, r0
   199cc:	orrs	r4, r0, r1, lsl #12
   199d0:	orrseq	r5, r2, r3, lsl #12
   199d4:	teqeq	r1, r3
   199d8:	orrne	r1, r1, #524288	; 0x80000
   199dc:	pop	{r4, r5, pc}
   199e0:	teq	r0, #0
   199e4:	moveq	r1, #0
   199e8:	bxeq	lr
   199ec:	push	{r4, r5, lr}
   199f0:	mov	r4, #1024	; 0x400
   199f4:	add	r4, r4, #50	; 0x32
   199f8:	mov	r5, #0
   199fc:	mov	r1, #0
   19a00:	b	1987c <__assert_fail@plt+0x8198>
   19a04:	teq	r0, #0
   19a08:	moveq	r1, #0
   19a0c:	bxeq	lr
   19a10:	push	{r4, r5, lr}
   19a14:	mov	r4, #1024	; 0x400
   19a18:	add	r4, r4, #50	; 0x32
   19a1c:	ands	r5, r0, #-2147483648	; 0x80000000
   19a20:	rsbmi	r0, r0, #0
   19a24:	mov	r1, #0
   19a28:	b	1987c <__assert_fail@plt+0x8198>
   19a2c:	lsls	r2, r0, #1
   19a30:	asr	r1, r2, #3
   19a34:	rrx	r1, r1
   19a38:	lsl	r0, r2, #28
   19a3c:	andsne	r3, r2, #-16777216	; 0xff000000
   19a40:	teqne	r3, #-16777216	; 0xff000000
   19a44:	eorne	r1, r1, #939524096	; 0x38000000
   19a48:	bxne	lr
   19a4c:	bics	r2, r2, #-16777216	; 0xff000000
   19a50:	bxeq	lr
   19a54:	teq	r3, #-16777216	; 0xff000000
   19a58:	orreq	r1, r1, #524288	; 0x80000
   19a5c:	bxeq	lr
   19a60:	push	{r4, r5, lr}
   19a64:	mov	r4, #896	; 0x380
   19a68:	and	r5, r1, #-2147483648	; 0x80000000
   19a6c:	bic	r1, r1, #-2147483648	; 0x80000000
   19a70:	b	1987c <__assert_fail@plt+0x8198>
   19a74:	orrs	r2, r0, r1
   19a78:	bxeq	lr
   19a7c:	push	{r4, r5, lr}
   19a80:	mov	r5, #0
   19a84:	b	19aa4 <__assert_fail@plt+0x83c0>
   19a88:	orrs	r2, r0, r1
   19a8c:	bxeq	lr
   19a90:	push	{r4, r5, lr}
   19a94:	ands	r5, r1, #-2147483648	; 0x80000000
   19a98:	bpl	19aa4 <__assert_fail@plt+0x83c0>
   19a9c:	rsbs	r0, r0, #0
   19aa0:	rsc	r1, r1, #0
   19aa4:	mov	r4, #1024	; 0x400
   19aa8:	add	r4, r4, #50	; 0x32
   19aac:	lsrs	ip, r1, #22
   19ab0:	beq	19820 <__assert_fail@plt+0x813c>
   19ab4:	mov	r2, #3
   19ab8:	lsrs	ip, ip, #3
   19abc:	addne	r2, r2, #3
   19ac0:	lsrs	ip, ip, #3
   19ac4:	addne	r2, r2, #3
   19ac8:	add	r2, r2, ip, lsr #3
   19acc:	rsb	r3, r2, #32
   19ad0:	lsl	ip, r0, r3
   19ad4:	lsr	r0, r0, r2
   19ad8:	orr	r0, r0, r1, lsl r3
   19adc:	lsr	r1, r1, r2
   19ae0:	add	r4, r4, r2
   19ae4:	b	19820 <__assert_fail@plt+0x813c>
   19ae8:	cmp	r3, #0
   19aec:	cmpeq	r2, #0
   19af0:	bne	19b14 <__assert_fail@plt+0x8430>
   19af4:	cmp	r1, #0
   19af8:	movlt	r1, #-2147483648	; 0x80000000
   19afc:	movlt	r0, #0
   19b00:	blt	19b10 <__assert_fail@plt+0x842c>
   19b04:	cmpeq	r0, #0
   19b08:	mvnne	r1, #-2147483648	; 0x80000000
   19b0c:	mvnne	r0, #0
   19b10:	b	19bf8 <__assert_fail@plt+0x8514>
   19b14:	sub	sp, sp, #8
   19b18:	push	{sp, lr}
   19b1c:	cmp	r1, #0
   19b20:	blt	19b40 <__assert_fail@plt+0x845c>
   19b24:	cmp	r3, #0
   19b28:	blt	19b74 <__assert_fail@plt+0x8490>
   19b2c:	bl	19c48 <__assert_fail@plt+0x8564>
   19b30:	ldr	lr, [sp, #4]
   19b34:	add	sp, sp, #8
   19b38:	pop	{r2, r3}
   19b3c:	bx	lr
   19b40:	rsbs	r0, r0, #0
   19b44:	sbc	r1, r1, r1, lsl #1
   19b48:	cmp	r3, #0
   19b4c:	blt	19b98 <__assert_fail@plt+0x84b4>
   19b50:	bl	19c48 <__assert_fail@plt+0x8564>
   19b54:	ldr	lr, [sp, #4]
   19b58:	add	sp, sp, #8
   19b5c:	pop	{r2, r3}
   19b60:	rsbs	r0, r0, #0
   19b64:	sbc	r1, r1, r1, lsl #1
   19b68:	rsbs	r2, r2, #0
   19b6c:	sbc	r3, r3, r3, lsl #1
   19b70:	bx	lr
   19b74:	rsbs	r2, r2, #0
   19b78:	sbc	r3, r3, r3, lsl #1
   19b7c:	bl	19c48 <__assert_fail@plt+0x8564>
   19b80:	ldr	lr, [sp, #4]
   19b84:	add	sp, sp, #8
   19b88:	pop	{r2, r3}
   19b8c:	rsbs	r0, r0, #0
   19b90:	sbc	r1, r1, r1, lsl #1
   19b94:	bx	lr
   19b98:	rsbs	r2, r2, #0
   19b9c:	sbc	r3, r3, r3, lsl #1
   19ba0:	bl	19c48 <__assert_fail@plt+0x8564>
   19ba4:	ldr	lr, [sp, #4]
   19ba8:	add	sp, sp, #8
   19bac:	pop	{r2, r3}
   19bb0:	rsbs	r2, r2, #0
   19bb4:	sbc	r3, r3, r3, lsl #1
   19bb8:	bx	lr
   19bbc:	cmp	r3, #0
   19bc0:	cmpeq	r2, #0
   19bc4:	bne	19bdc <__assert_fail@plt+0x84f8>
   19bc8:	cmp	r1, #0
   19bcc:	cmpeq	r0, #0
   19bd0:	mvnne	r1, #0
   19bd4:	mvnne	r0, #0
   19bd8:	b	19bf8 <__assert_fail@plt+0x8514>
   19bdc:	sub	sp, sp, #8
   19be0:	push	{sp, lr}
   19be4:	bl	19c48 <__assert_fail@plt+0x8564>
   19be8:	ldr	lr, [sp, #4]
   19bec:	add	sp, sp, #8
   19bf0:	pop	{r2, r3}
   19bf4:	bx	lr
   19bf8:	push	{r1, lr}
   19bfc:	mov	r0, #8
   19c00:	bl	11378 <raise@plt>
   19c04:	pop	{r1, pc}
   19c08:	vmov	d6, r0, r1
   19c0c:	vldr	d7, [pc, #36]	; 19c38 <__assert_fail@plt+0x8554>
   19c10:	vldr	d5, [pc, #40]	; 19c40 <__assert_fail@plt+0x855c>
   19c14:	vmul.f64	d7, d6, d7
   19c18:	vcvt.u32.f64	s14, d7
   19c1c:	vcvt.f64.u32	d4, s14
   19c20:	vmov	r1, s14
   19c24:	vmls.f64	d6, d4, d5
   19c28:	vcvt.u32.f64	s15, d6
   19c2c:	vmov	r0, s15
   19c30:	bx	lr
   19c34:	nop			; (mov r0, r0)
   19c38:	andeq	r0, r0, r0
   19c3c:	ldclcc	0, cr0, [r0]
   19c40:	andeq	r0, r0, r0
   19c44:	mvnsmi	r0, r0
   19c48:	cmp	r1, r3
   19c4c:	cmpeq	r0, r2
   19c50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c54:	mov	r4, r0
   19c58:	movcc	r0, #0
   19c5c:	mov	r5, r1
   19c60:	ldr	lr, [sp, #36]	; 0x24
   19c64:	movcc	r1, r0
   19c68:	bcc	19d64 <__assert_fail@plt+0x8680>
   19c6c:	cmp	r3, #0
   19c70:	clzeq	ip, r2
   19c74:	clzne	ip, r3
   19c78:	addeq	ip, ip, #32
   19c7c:	cmp	r5, #0
   19c80:	clzeq	r1, r4
   19c84:	addeq	r1, r1, #32
   19c88:	clzne	r1, r5
   19c8c:	sub	ip, ip, r1
   19c90:	sub	sl, ip, #32
   19c94:	lsl	r9, r3, ip
   19c98:	rsb	fp, ip, #32
   19c9c:	orr	r9, r9, r2, lsl sl
   19ca0:	orr	r9, r9, r2, lsr fp
   19ca4:	lsl	r8, r2, ip
   19ca8:	cmp	r5, r9
   19cac:	cmpeq	r4, r8
   19cb0:	movcc	r0, #0
   19cb4:	movcc	r1, r0
   19cb8:	bcc	19cd4 <__assert_fail@plt+0x85f0>
   19cbc:	mov	r0, #1
   19cc0:	subs	r4, r4, r8
   19cc4:	lsl	r1, r0, sl
   19cc8:	orr	r1, r1, r0, lsr fp
   19ccc:	lsl	r0, r0, ip
   19cd0:	sbc	r5, r5, r9
   19cd4:	cmp	ip, #0
   19cd8:	beq	19d64 <__assert_fail@plt+0x8680>
   19cdc:	lsr	r6, r8, #1
   19ce0:	orr	r6, r6, r9, lsl #31
   19ce4:	lsr	r7, r9, #1
   19ce8:	mov	r2, ip
   19cec:	b	19d10 <__assert_fail@plt+0x862c>
   19cf0:	subs	r3, r4, r6
   19cf4:	sbc	r8, r5, r7
   19cf8:	adds	r3, r3, r3
   19cfc:	adc	r8, r8, r8
   19d00:	adds	r4, r3, #1
   19d04:	adc	r5, r8, #0
   19d08:	subs	r2, r2, #1
   19d0c:	beq	19d2c <__assert_fail@plt+0x8648>
   19d10:	cmp	r5, r7
   19d14:	cmpeq	r4, r6
   19d18:	bcs	19cf0 <__assert_fail@plt+0x860c>
   19d1c:	adds	r4, r4, r4
   19d20:	adc	r5, r5, r5
   19d24:	subs	r2, r2, #1
   19d28:	bne	19d10 <__assert_fail@plt+0x862c>
   19d2c:	lsr	r3, r4, ip
   19d30:	orr	r3, r3, r5, lsl fp
   19d34:	lsr	r2, r5, ip
   19d38:	orr	r3, r3, r5, lsr sl
   19d3c:	adds	r0, r0, r4
   19d40:	mov	r4, r3
   19d44:	lsl	r3, r2, ip
   19d48:	orr	r3, r3, r4, lsl sl
   19d4c:	lsl	ip, r4, ip
   19d50:	orr	r3, r3, r4, lsr fp
   19d54:	adc	r1, r1, r5
   19d58:	subs	r0, r0, ip
   19d5c:	mov	r5, r2
   19d60:	sbc	r1, r1, r3
   19d64:	cmp	lr, #0
   19d68:	strdne	r4, [lr]
   19d6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19d70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19d74:	mov	r7, r0
   19d78:	ldr	r6, [pc, #72]	; 19dc8 <__assert_fail@plt+0x86e4>
   19d7c:	ldr	r5, [pc, #72]	; 19dcc <__assert_fail@plt+0x86e8>
   19d80:	add	r6, pc, r6
   19d84:	add	r5, pc, r5
   19d88:	sub	r6, r6, r5
   19d8c:	mov	r8, r1
   19d90:	mov	r9, r2
   19d94:	bl	11334 <fdopen@plt-0x20>
   19d98:	asrs	r6, r6, #2
   19d9c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   19da0:	mov	r4, #0
   19da4:	add	r4, r4, #1
   19da8:	ldr	r3, [r5], #4
   19dac:	mov	r2, r9
   19db0:	mov	r1, r8
   19db4:	mov	r0, r7
   19db8:	blx	r3
   19dbc:	cmp	r6, r4
   19dc0:	bne	19da4 <__assert_fail@plt+0x86c0>
   19dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19dc8:	andeq	r2, r1, r4, lsl #3
   19dcc:	andeq	r2, r1, ip, ror r1
   19dd0:	bx	lr
   19dd4:	ldr	r3, [pc, #12]	; 19de8 <__assert_fail@plt+0x8704>
   19dd8:	mov	r1, #0
   19ddc:	add	r3, pc, r3
   19de0:	ldr	r2, [r3]
   19de4:	b	11570 <__cxa_atexit@plt>
   19de8:	andeq	r2, r1, r8, ror #6

Disassembly of section .fini:

00019dec <.fini>:
   19dec:	push	{r3, lr}
   19df0:	pop	{r3, pc}
