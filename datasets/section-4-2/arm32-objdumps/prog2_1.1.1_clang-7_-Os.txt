
../repos/prog2/1.1.1:     file format elf32-littlearm


Disassembly of section .init:

000106d4 <.init>:
   106d4:	push	{r3, lr}
   106d8:	bl	107a8 <_start@@Base+0x3c>
   106dc:	pop	{r3, pc}

Disassembly of section .plt:

000106e0 <printf@plt-0x14>:
   106e0:	push	{lr}		; (str lr, [sp, #-4]!)
   106e4:	ldr	lr, [pc, #4]	; 106f0 <printf@plt-0x4>
   106e8:	add	lr, pc, lr
   106ec:	ldr	pc, [lr, #8]!
   106f0:	andeq	r0, r1, r0, lsl r9

000106f4 <printf@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #16, 20	; 0x10000
   106fc:	ldr	pc, [ip, #2320]!	; 0x910

00010700 <fopen@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #16, 20	; 0x10000
   10708:	ldr	pc, [ip, #2312]!	; 0x908

0001070c <tolower@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #16, 20	; 0x10000
   10714:	ldr	pc, [ip, #2304]!	; 0x900

00010718 <puts@plt>:
   10718:	add	ip, pc, #0, 12
   1071c:	add	ip, ip, #16, 20	; 0x10000
   10720:	ldr	pc, [ip, #2296]!	; 0x8f8

00010724 <__libc_start_main@plt>:
   10724:	add	ip, pc, #0, 12
   10728:	add	ip, ip, #16, 20	; 0x10000
   1072c:	ldr	pc, [ip, #2288]!	; 0x8f0

00010730 <__gmon_start__@plt>:
   10730:	add	ip, pc, #0, 12
   10734:	add	ip, ip, #16, 20	; 0x10000
   10738:	ldr	pc, [ip, #2280]!	; 0x8e8

0001073c <memset@plt>:
   1073c:	add	ip, pc, #0, 12
   10740:	add	ip, ip, #16, 20	; 0x10000
   10744:	ldr	pc, [ip, #2272]!	; 0x8e0

00010748 <fclose@plt>:
   10748:	add	ip, pc, #0, 12
   1074c:	add	ip, ip, #16, 20	; 0x10000
   10750:	ldr	pc, [ip, #2264]!	; 0x8d8

00010754 <abort@plt>:
   10754:	add	ip, pc, #0, 12
   10758:	add	ip, ip, #16, 20	; 0x10000
   1075c:	ldr	pc, [ip, #2256]!	; 0x8d0

00010760 <getc@plt>:
   10760:	add	ip, pc, #0, 12
   10764:	add	ip, ip, #16, 20	; 0x10000
   10768:	ldr	pc, [ip, #2248]!	; 0x8c8

Disassembly of section .text:

0001076c <_start@@Base>:
   1076c:	mov	fp, #0
   10770:	mov	lr, #0
   10774:	pop	{r1}		; (ldr r1, [sp], #4)
   10778:	mov	r2, sp
   1077c:	push	{r2}		; (str r2, [sp, #-4]!)
   10780:	push	{r0}		; (str r0, [sp, #-4]!)
   10784:	ldr	ip, [pc, #16]	; 1079c <_start@@Base+0x30>
   10788:	push	{ip}		; (str ip, [sp, #-4]!)
   1078c:	ldr	r0, [pc, #12]	; 107a0 <_start@@Base+0x34>
   10790:	ldr	r3, [pc, #12]	; 107a4 <_start@@Base+0x38>
   10794:	bl	10724 <__libc_start_main@plt>
   10798:	bl	10754 <abort@plt>
   1079c:	andeq	r0, r1, r8, asr #22
   107a0:	muleq	r1, r8, r8
   107a4:	andeq	r0, r1, r8, ror #21
   107a8:	ldr	r3, [pc, #20]	; 107c4 <_start@@Base+0x58>
   107ac:	ldr	r2, [pc, #20]	; 107c8 <_start@@Base+0x5c>
   107b0:	add	r3, pc, r3
   107b4:	ldr	r2, [r3, r2]
   107b8:	cmp	r2, #0
   107bc:	bxeq	lr
   107c0:	b	10730 <__gmon_start__@plt>
   107c4:	andeq	r0, r1, r8, asr #16
   107c8:	andeq	r0, r0, r4, lsr r0
   107cc:	ldr	r0, [pc, #24]	; 107ec <_start@@Base+0x80>
   107d0:	ldr	r3, [pc, #24]	; 107f0 <_start@@Base+0x84>
   107d4:	cmp	r3, r0
   107d8:	bxeq	lr
   107dc:	ldr	r3, [pc, #16]	; 107f4 <_start@@Base+0x88>
   107e0:	cmp	r3, #0
   107e4:	bxeq	lr
   107e8:	bx	r3
   107ec:	andeq	r1, r2, r0, asr #32
   107f0:	andeq	r1, r2, r0, asr #32
   107f4:	andeq	r0, r0, r0
   107f8:	ldr	r0, [pc, #36]	; 10824 <_start@@Base+0xb8>
   107fc:	ldr	r1, [pc, #36]	; 10828 <_start@@Base+0xbc>
   10800:	sub	r1, r1, r0
   10804:	asr	r1, r1, #2
   10808:	add	r1, r1, r1, lsr #31
   1080c:	asrs	r1, r1, #1
   10810:	bxeq	lr
   10814:	ldr	r3, [pc, #16]	; 1082c <_start@@Base+0xc0>
   10818:	cmp	r3, #0
   1081c:	bxeq	lr
   10820:	bx	r3
   10824:	andeq	r1, r2, r0, asr #32
   10828:	andeq	r1, r2, r0, asr #32
   1082c:	andeq	r0, r0, r0
   10830:	push	{r4, lr}
   10834:	ldr	r4, [pc, #24]	; 10854 <_start@@Base+0xe8>
   10838:	ldrb	r3, [r4]
   1083c:	cmp	r3, #0
   10840:	popne	{r4, pc}
   10844:	bl	107cc <_start@@Base+0x60>
   10848:	mov	r3, #1
   1084c:	strb	r3, [r4]
   10850:	pop	{r4, pc}
   10854:	andeq	r1, r2, r0, asr #32
   10858:	b	107f8 <_start@@Base+0x8c>

0001085c <in_array@@Base>:
   1085c:	push	{fp, lr}
   10860:	mov	fp, sp
   10864:	cmp	r2, #0
   10868:	blt	10890 <in_array@@Base+0x34>
   1086c:	mov	lr, #0
   10870:	ldr	r3, [r1, lr, lsl #2]
   10874:	cmp	r3, r0
   10878:	moveq	r0, #1
   1087c:	popeq	{fp, pc}
   10880:	add	ip, lr, #1
   10884:	cmp	lr, r2
   10888:	mov	lr, ip
   1088c:	blt	10870 <in_array@@Base+0x14>
   10890:	mov	r0, #0
   10894:	pop	{fp, pc}

00010898 <main@@Base>:
   10898:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1089c:	add	fp, sp, #28
   108a0:	sub	sp, sp, #4
   108a4:	vpush	{d8-d9}
   108a8:	sub	sp, sp, #128	; 0x80
   108ac:	mov	r0, #237	; 0xed
   108b0:	movw	r1, #2999	; 0xbb7
   108b4:	str	r0, [fp, #-52]	; 0xffffffcc
   108b8:	mov	r0, #205	; 0xcd
   108bc:	movt	r1, #1
   108c0:	str	r0, [fp, #-56]	; 0xffffffc8
   108c4:	mov	r0, #250	; 0xfa
   108c8:	str	r0, [fp, #-60]	; 0xffffffc4
   108cc:	mov	r0, #218	; 0xda
   108d0:	str	r0, [fp, #-64]	; 0xffffffc0
   108d4:	mov	r0, #231	; 0xe7
   108d8:	str	r0, [fp, #-68]	; 0xffffffbc
   108dc:	mov	r0, #199	; 0xc7
   108e0:	str	r0, [fp, #-72]	; 0xffffffb8
   108e4:	movw	r0, #2976	; 0xba0
   108e8:	movt	r0, #1
   108ec:	bl	10700 <fopen@plt>
   108f0:	mov	r8, sp
   108f4:	mov	r9, r0
   108f8:	mov	r1, #0
   108fc:	mov	r2, #104	; 0x68
   10900:	mov	r7, #0
   10904:	mov	r0, r8
   10908:	bl	1073c <memset@plt>
   1090c:	mov	r0, r9
   10910:	bl	10760 <getc@plt>
   10914:	cmn	r0, #1
   10918:	mov	sl, #0
   1091c:	beq	10a64 <main@@Base+0x1cc>
   10920:	movw	r4, #2904	; 0xb58
   10924:	movw	r5, #2936	; 0xb78
   10928:	mov	sl, #0
   1092c:	sub	r6, fp, #56	; 0x38
   10930:	movt	r4, #1
   10934:	movt	r5, #1
   10938:	mov	r1, #0
   1093c:	ldr	r2, [r4, r1, lsl #2]
   10940:	cmp	r2, r0
   10944:	beq	10a0c <main@@Base+0x174>
   10948:	add	r2, r1, #1
   1094c:	cmp	r1, #8
   10950:	mov	r1, r2
   10954:	bcc	1093c <main@@Base+0xa4>
   10958:	mov	r1, #0
   1095c:	ldr	r2, [r5, r1, lsl #2]
   10960:	cmp	r2, r0
   10964:	beq	10a14 <main@@Base+0x17c>
   10968:	add	r2, r1, #1
   1096c:	cmp	r1, #4
   10970:	mov	r1, r2
   10974:	bcc	1095c <main@@Base+0xc4>
   10978:	mov	r1, #0
   1097c:	ldr	r2, [r6, r1, lsl #2]
   10980:	cmp	r2, r0
   10984:	beq	10a1c <main@@Base+0x184>
   10988:	add	r2, r1, #1
   1098c:	cmp	r1, #2
   10990:	mov	r1, r2
   10994:	bcc	1097c <main@@Base+0xe4>
   10998:	mov	r1, #0
   1099c:	movw	r2, #2952	; 0xb88
   109a0:	movt	r2, #1
   109a4:	ldr	r2, [r2, r1, lsl #2]
   109a8:	cmp	r2, r0
   109ac:	beq	10a24 <main@@Base+0x18c>
   109b0:	add	r2, r1, #1
   109b4:	cmp	r1, #6
   109b8:	mov	r1, r2
   109bc:	bcc	1099c <main@@Base+0x104>
   109c0:	mov	r1, #0
   109c4:	sub	r2, fp, #64	; 0x40
   109c8:	ldr	r2, [r2, r1, lsl #2]
   109cc:	cmp	r2, r0
   109d0:	beq	10a2c <main@@Base+0x194>
   109d4:	add	r2, r1, #1
   109d8:	cmp	r1, #2
   109dc:	mov	r1, r2
   109e0:	bcc	109c4 <main@@Base+0x12c>
   109e4:	mov	r1, #0
   109e8:	sub	r2, fp, #72	; 0x48
   109ec:	ldr	r2, [r2, r1, lsl #2]
   109f0:	cmp	r2, r0
   109f4:	beq	10a34 <main@@Base+0x19c>
   109f8:	add	r2, r1, #1
   109fc:	cmp	r1, #1
   10a00:	mov	r1, r2
   10a04:	bls	109e8 <main@@Base+0x150>
   10a08:	b	10a38 <main@@Base+0x1a0>
   10a0c:	mov	r0, #97	; 0x61
   10a10:	b	10a38 <main@@Base+0x1a0>
   10a14:	mov	r0, #101	; 0x65
   10a18:	b	10a38 <main@@Base+0x1a0>
   10a1c:	mov	r0, #105	; 0x69
   10a20:	b	10a38 <main@@Base+0x1a0>
   10a24:	mov	r0, #111	; 0x6f
   10a28:	b	10a38 <main@@Base+0x1a0>
   10a2c:	mov	r0, #117	; 0x75
   10a30:	b	10a38 <main@@Base+0x1a0>
   10a34:	mov	r0, #99	; 0x63
   10a38:	bl	1070c <tolower@plt>
   10a3c:	sub	r0, r0, #97	; 0x61
   10a40:	cmp	r0, #25
   10a44:	ldrls	r1, [r8, r0, lsl #2]
   10a48:	addls	sl, sl, #1
   10a4c:	addls	r1, r1, #1
   10a50:	strls	r1, [r8, r0, lsl #2]
   10a54:	mov	r0, r9
   10a58:	bl	10760 <getc@plt>
   10a5c:	cmn	r0, #1
   10a60:	bne	10938 <main@@Base+0xa0>
   10a64:	mov	r0, r9
   10a68:	bl	10748 <fclose@plt>
   10a6c:	movw	r0, #3053	; 0xbed
   10a70:	movt	r0, #1
   10a74:	bl	10718 <puts@plt>
   10a78:	movw	r0, #3001	; 0xbb9
   10a7c:	mov	r1, sl
   10a80:	movt	r0, #1
   10a84:	bl	106f4 <printf@plt>
   10a88:	vldr	s18, [pc, #84]	; 10ae4 <main@@Base+0x24c>
   10a8c:	movw	r5, #3033	; 0xbd9
   10a90:	vmov	s0, sl
   10a94:	vcvt.f32.s32	s16, s0
   10a98:	movt	r5, #1
   10a9c:	add	r0, r8, r7, lsl #2
   10aa0:	add	r1, r7, #97	; 0x61
   10aa4:	vldr	s0, [r0]
   10aa8:	mov	r0, r5
   10aac:	vcvt.f32.s32	s0, s0
   10ab0:	vdiv.f32	s0, s0, s16
   10ab4:	vmul.f32	s0, s0, s18
   10ab8:	vcvt.f64.f32	d16, s0
   10abc:	vmov	r2, r3, d16
   10ac0:	bl	106f4 <printf@plt>
   10ac4:	add	r7, r7, #1
   10ac8:	cmp	r7, #26
   10acc:	bne	10a9c <main@@Base+0x204>
   10ad0:	mov	r0, #0
   10ad4:	sub	sp, fp, #48	; 0x30
   10ad8:	vpop	{d8-d9}
   10adc:	add	sp, sp, #4
   10ae0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ae4:	sbcmi	r0, r8, #0

00010ae8 <__libc_csu_init@@Base>:
   10ae8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   10aec:	mov	r7, r0
   10af0:	ldr	r6, [pc, #72]	; 10b40 <__libc_csu_init@@Base+0x58>
   10af4:	ldr	r5, [pc, #72]	; 10b44 <__libc_csu_init@@Base+0x5c>
   10af8:	add	r6, pc, r6
   10afc:	add	r5, pc, r5
   10b00:	sub	r6, r6, r5
   10b04:	mov	r8, r1
   10b08:	mov	r9, r2
   10b0c:	bl	106d4 <printf@plt-0x20>
   10b10:	asrs	r6, r6, #2
   10b14:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b18:	mov	r4, #0
   10b1c:	add	r4, r4, #1
   10b20:	ldr	r3, [r5], #4
   10b24:	mov	r2, r9
   10b28:	mov	r1, r8
   10b2c:	mov	r0, r7
   10b30:	blx	r3
   10b34:	cmp	r6, r4
   10b38:	bne	10b1c <__libc_csu_init@@Base+0x34>
   10b3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   10b40:	andeq	r0, r1, ip, lsl #8
   10b44:	andeq	r0, r1, r4, lsl #8

00010b48 <__libc_csu_fini@@Base>:
   10b48:	bx	lr

Disassembly of section .fini:

00010b4c <.fini>:
   10b4c:	push	{r3, lr}
   10b50:	pop	{r3, pc}
