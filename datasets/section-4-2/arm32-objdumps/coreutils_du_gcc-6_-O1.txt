
../repos/coreutils/src/du:     file format elf32-littlearm


Disassembly of section .init:

00011674 <.init>:
   11674:	push	{r3, lr}
   11678:	bl	11bec <__assert_fail@plt+0x48>
   1167c:	pop	{r3, pc}

Disassembly of section .plt:

00011680 <pthread_mutex_unlock@plt-0x14>:
   11680:	push	{lr}		; (str lr, [sp, #-4]!)
   11684:	ldr	lr, [pc, #4]	; 11690 <pthread_mutex_unlock@plt-0x4>
   11688:	add	lr, pc, lr
   1168c:	ldr	pc, [lr, #8]!
   11690:	andeq	r0, r3, r0, ror r9

00011694 <pthread_mutex_unlock@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #48, 20	; 0x30000
   1169c:	ldr	pc, [ip, #2416]!	; 0x970

000116a0 <fstatfs64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #48, 20	; 0x30000
   116a8:	ldr	pc, [ip, #2408]!	; 0x968

000116ac <calloc@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #48, 20	; 0x30000
   116b4:	ldr	pc, [ip, #2400]!	; 0x960

000116b8 <fputs_unlocked@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #48, 20	; 0x30000
   116c0:	ldr	pc, [ip, #2392]!	; 0x958

000116c4 <wctype@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #48, 20	; 0x30000
   116cc:	ldr	pc, [ip, #2384]!	; 0x950

000116d0 <raise@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #48, 20	; 0x30000
   116d8:	ldr	pc, [ip, #2376]!	; 0x948

000116dc <wcrtomb@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #48, 20	; 0x30000
   116e4:	ldr	pc, [ip, #2368]!	; 0x940

000116e8 <gmtime_r@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #48, 20	; 0x30000
   116f0:	ldr	pc, [ip, #2360]!	; 0x938

000116f4 <__getdelim@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #48, 20	; 0x30000
   116fc:	ldr	pc, [ip, #2352]!	; 0x930

00011700 <iswctype@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #48, 20	; 0x30000
   11708:	ldr	pc, [ip, #2344]!	; 0x928

0001170c <strcmp@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #48, 20	; 0x30000
   11714:	ldr	pc, [ip, #2336]!	; 0x920

00011718 <pthread_mutex_destroy@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #48, 20	; 0x30000
   11720:	ldr	pc, [ip, #2328]!	; 0x918

00011724 <mktime@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #48, 20	; 0x30000
   1172c:	ldr	pc, [ip, #2320]!	; 0x910

00011730 <fflush@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #48, 20	; 0x30000
   11738:	ldr	pc, [ip, #2312]!	; 0x908

0001173c <wcwidth@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #48, 20	; 0x30000
   11744:	ldr	pc, [ip, #2304]!	; 0x900

00011748 <memmove@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #48, 20	; 0x30000
   11750:	ldr	pc, [ip, #2296]!	; 0x8f8

00011754 <free@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #48, 20	; 0x30000
   1175c:	ldr	pc, [ip, #2288]!	; 0x8f0

00011760 <pthread_mutex_lock@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #48, 20	; 0x30000
   11768:	ldr	pc, [ip, #2280]!	; 0x8e8

0001176c <ferror@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #48, 20	; 0x30000
   11774:	ldr	pc, [ip, #2272]!	; 0x8e0

00011778 <_exit@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #48, 20	; 0x30000
   11780:	ldr	pc, [ip, #2264]!	; 0x8d8

00011784 <memcpy@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #48, 20	; 0x30000
   1178c:	ldr	pc, [ip, #2256]!	; 0x8d0

00011790 <pthread_mutex_init@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #48, 20	; 0x30000
   11798:	ldr	pc, [ip, #2248]!	; 0x8c8

0001179c <__strtoull_internal@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #48, 20	; 0x30000
   117a4:	ldr	pc, [ip, #2240]!	; 0x8c0

000117a8 <towlower@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #48, 20	; 0x30000
   117b0:	ldr	pc, [ip, #2232]!	; 0x8b8

000117b4 <mbsinit@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #48, 20	; 0x30000
   117bc:	ldr	pc, [ip, #2224]!	; 0x8b0

000117c0 <memcmp@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #48, 20	; 0x30000
   117c8:	ldr	pc, [ip, #2216]!	; 0x8a8

000117cc <fputc_unlocked@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #48, 20	; 0x30000
   117d4:	ldr	pc, [ip, #2208]!	; 0x8a0

000117d8 <dcgettext@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #48, 20	; 0x30000
   117e0:	ldr	pc, [ip, #2200]!	; 0x898

000117e4 <dup2@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #48, 20	; 0x30000
   117ec:	ldr	pc, [ip, #2192]!	; 0x890

000117f0 <realloc@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #48, 20	; 0x30000
   117f8:	ldr	pc, [ip, #2184]!	; 0x888

000117fc <localtime_r@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #48, 20	; 0x30000
   11804:	ldr	pc, [ip, #2176]!	; 0x880

00011808 <textdomain@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #48, 20	; 0x30000
   11810:	ldr	pc, [ip, #2168]!	; 0x878

00011814 <iswcntrl@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #48, 20	; 0x30000
   1181c:	ldr	pc, [ip, #2160]!	; 0x870

00011820 <__fxstatat64@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #48, 20	; 0x30000
   11828:	ldr	pc, [ip, #2152]!	; 0x868

0001182c <fflush_unlocked@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #48, 20	; 0x30000
   11834:	ldr	pc, [ip, #2144]!	; 0x860

00011838 <iswprint@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #48, 20	; 0x30000
   11840:	ldr	pc, [ip, #2136]!	; 0x858

00011844 <tzset@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #48, 20	; 0x30000
   1184c:	ldr	pc, [ip, #2128]!	; 0x850

00011850 <__fxstat64@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #48, 20	; 0x30000
   11858:	ldr	pc, [ip, #2120]!	; 0x848

0001185c <__memcpy_chk@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #48, 20	; 0x30000
   11864:	ldr	pc, [ip, #2112]!	; 0x840

00011868 <fwrite@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #48, 20	; 0x30000
   11870:	ldr	pc, [ip, #2104]!	; 0x838

00011874 <lseek64@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #48, 20	; 0x30000
   1187c:	ldr	pc, [ip, #2096]!	; 0x830

00011880 <__ctype_get_mb_cur_max@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #48, 20	; 0x30000
   11888:	ldr	pc, [ip, #2088]!	; 0x828

0001188c <hasmntopt@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #48, 20	; 0x30000
   11894:	ldr	pc, [ip, #2080]!	; 0x820

00011898 <strcpy@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #48, 20	; 0x30000
   118a0:	ldr	pc, [ip, #2072]!	; 0x818

000118a4 <__fpending@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #48, 20	; 0x30000
   118ac:	ldr	pc, [ip, #2064]!	; 0x810

000118b0 <mbrtowc@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #48, 20	; 0x30000
   118b8:	ldr	pc, [ip, #2056]!	; 0x808

000118bc <error@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #48, 20	; 0x30000
   118c4:	ldr	pc, [ip, #2048]!	; 0x800

000118c8 <getmntent@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #48, 20	; 0x30000
   118d0:	ldr	pc, [ip, #2040]!	; 0x7f8

000118d4 <fnmatch@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #48, 20	; 0x30000
   118dc:	ldr	pc, [ip, #2032]!	; 0x7f0

000118e0 <open64@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #48, 20	; 0x30000
   118e8:	ldr	pc, [ip, #2024]!	; 0x7e8

000118ec <getenv@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #48, 20	; 0x30000
   118f4:	ldr	pc, [ip, #2016]!	; 0x7e0

000118f8 <malloc@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #48, 20	; 0x30000
   11900:	ldr	pc, [ip, #2008]!	; 0x7d8

00011904 <__libc_start_main@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #48, 20	; 0x30000
   1190c:	ldr	pc, [ip, #2000]!	; 0x7d0

00011910 <strftime@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #48, 20	; 0x30000
   11918:	ldr	pc, [ip, #1992]!	; 0x7c8

0001191c <__freading@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #48, 20	; 0x30000
   11924:	ldr	pc, [ip, #1984]!	; 0x7c0

00011928 <__ctype_tolower_loc@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #48, 20	; 0x30000
   11930:	ldr	pc, [ip, #1976]!	; 0x7b8

00011934 <__ctype_toupper_loc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #48, 20	; 0x30000
   1193c:	ldr	pc, [ip, #1968]!	; 0x7b0

00011940 <__gmon_start__@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #48, 20	; 0x30000
   11948:	ldr	pc, [ip, #1960]!	; 0x7a8

0001194c <freopen64@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #48, 20	; 0x30000
   11954:	ldr	pc, [ip, #1952]!	; 0x7a0

00011958 <getopt_long@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #48, 20	; 0x30000
   11960:	ldr	pc, [ip, #1944]!	; 0x798

00011964 <__ctype_b_loc@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #48, 20	; 0x30000
   1196c:	ldr	pc, [ip, #1936]!	; 0x790

00011970 <exit@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #48, 20	; 0x30000
   11978:	ldr	pc, [ip, #1928]!	; 0x788

0001197c <feof@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #48, 20	; 0x30000
   11984:	ldr	pc, [ip, #1920]!	; 0x780

00011988 <strlen@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #48, 20	; 0x30000
   11990:	ldr	pc, [ip, #1912]!	; 0x778

00011994 <strchr@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #48, 20	; 0x30000
   1199c:	ldr	pc, [ip, #1904]!	; 0x770

000119a0 <setenv@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #48, 20	; 0x30000
   119a8:	ldr	pc, [ip, #1896]!	; 0x768

000119ac <openat64@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #48, 20	; 0x30000
   119b4:	ldr	pc, [ip, #1888]!	; 0x760

000119b8 <__errno_location@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #48, 20	; 0x30000
   119c0:	ldr	pc, [ip, #1880]!	; 0x758

000119c4 <iswalnum@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #48, 20	; 0x30000
   119cc:	ldr	pc, [ip, #1872]!	; 0x750

000119d0 <__sprintf_chk@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #48, 20	; 0x30000
   119d8:	ldr	pc, [ip, #1864]!	; 0x748

000119dc <__cxa_atexit@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #48, 20	; 0x30000
   119e4:	ldr	pc, [ip, #1856]!	; 0x740

000119e8 <memset@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #48, 20	; 0x30000
   119f0:	ldr	pc, [ip, #1848]!	; 0x738

000119f4 <btowc@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #48, 20	; 0x30000
   119fc:	ldr	pc, [ip, #1840]!	; 0x730

00011a00 <__printf_chk@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #48, 20	; 0x30000
   11a08:	ldr	pc, [ip, #1832]!	; 0x728

00011a0c <fileno@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #48, 20	; 0x30000
   11a14:	ldr	pc, [ip, #1824]!	; 0x720

00011a18 <__fprintf_chk@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #48, 20	; 0x30000
   11a20:	ldr	pc, [ip, #1816]!	; 0x718

00011a24 <memchr@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #48, 20	; 0x30000
   11a2c:	ldr	pc, [ip, #1808]!	; 0x710

00011a30 <fclose@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #48, 20	; 0x30000
   11a38:	ldr	pc, [ip, #1800]!	; 0x708

00011a3c <fseeko64@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #48, 20	; 0x30000
   11a44:	ldr	pc, [ip, #1792]!	; 0x700

00011a48 <endmntent@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #48, 20	; 0x30000
   11a50:	ldr	pc, [ip, #1784]!	; 0x6f8

00011a54 <fcntl64@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #48, 20	; 0x30000
   11a5c:	ldr	pc, [ip, #1776]!	; 0x6f0

00011a60 <__overflow@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #48, 20	; 0x30000
   11a68:	ldr	pc, [ip, #1768]!	; 0x6e8

00011a6c <setlocale@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #48, 20	; 0x30000
   11a74:	ldr	pc, [ip, #1760]!	; 0x6e0

00011a78 <strrchr@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #48, 20	; 0x30000
   11a80:	ldr	pc, [ip, #1752]!	; 0x6d8

00011a84 <nl_langinfo@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #48, 20	; 0x30000
   11a8c:	ldr	pc, [ip, #1744]!	; 0x6d0

00011a90 <fputc@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #48, 20	; 0x30000
   11a98:	ldr	pc, [ip, #1736]!	; 0x6c8

00011a9c <sscanf@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #48, 20	; 0x30000
   11aa4:	ldr	pc, [ip, #1728]!	; 0x6c0

00011aa8 <localeconv@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #48, 20	; 0x30000
   11ab0:	ldr	pc, [ip, #1720]!	; 0x6b8

00011ab4 <readdir64@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #48, 20	; 0x30000
   11abc:	ldr	pc, [ip, #1712]!	; 0x6b0

00011ac0 <fdopendir@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #48, 20	; 0x30000
   11ac8:	ldr	pc, [ip, #1704]!	; 0x6a8

00011acc <timegm@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #48, 20	; 0x30000
   11ad4:	ldr	pc, [ip, #1696]!	; 0x6a0

00011ad8 <dirfd@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #48, 20	; 0x30000
   11ae0:	ldr	pc, [ip, #1688]!	; 0x698

00011ae4 <fchdir@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #48, 20	; 0x30000
   11aec:	ldr	pc, [ip, #1680]!	; 0x690

00011af0 <__strtoll_internal@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #48, 20	; 0x30000
   11af8:	ldr	pc, [ip, #1672]!	; 0x688

00011afc <fopen64@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #48, 20	; 0x30000
   11b04:	ldr	pc, [ip, #1664]!	; 0x680

00011b08 <qsort@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #48, 20	; 0x30000
   11b10:	ldr	pc, [ip, #1656]!	; 0x678

00011b14 <setmntent@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #48, 20	; 0x30000
   11b1c:	ldr	pc, [ip, #1648]!	; 0x670

00011b20 <bindtextdomain@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #48, 20	; 0x30000
   11b28:	ldr	pc, [ip, #1640]!	; 0x668

00011b2c <getdelim@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #48, 20	; 0x30000
   11b34:	ldr	pc, [ip, #1632]!	; 0x660

00011b38 <__xstat64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #48, 20	; 0x30000
   11b40:	ldr	pc, [ip, #1624]!	; 0x658

00011b44 <unsetenv@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #48, 20	; 0x30000
   11b4c:	ldr	pc, [ip, #1616]!	; 0x650

00011b50 <towupper@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #48, 20	; 0x30000
   11b58:	ldr	pc, [ip, #1608]!	; 0x648

00011b5c <strncmp@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #48, 20	; 0x30000
   11b64:	ldr	pc, [ip, #1600]!	; 0x640

00011b68 <abort@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #48, 20	; 0x30000
   11b70:	ldr	pc, [ip, #1592]!	; 0x638

00011b74 <getc@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #48, 20	; 0x30000
   11b7c:	ldr	pc, [ip, #1584]!	; 0x630

00011b80 <close@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #48, 20	; 0x30000
   11b88:	ldr	pc, [ip, #1576]!	; 0x628

00011b8c <__lxstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #48, 20	; 0x30000
   11b94:	ldr	pc, [ip, #1568]!	; 0x620

00011b98 <closedir@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #48, 20	; 0x30000
   11ba0:	ldr	pc, [ip, #1560]!	; 0x618

00011ba4 <__assert_fail@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #48, 20	; 0x30000
   11bac:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00011bb0 <.text>:
   11bb0:	mov	fp, #0
   11bb4:	mov	lr, #0
   11bb8:	pop	{r1}		; (ldr r1, [sp], #4)
   11bbc:	mov	r2, sp
   11bc0:	push	{r2}		; (str r2, [sp, #-4]!)
   11bc4:	push	{r0}		; (str r0, [sp, #-4]!)
   11bc8:	ldr	ip, [pc, #16]	; 11be0 <__assert_fail@plt+0x3c>
   11bcc:	push	{ip}		; (str ip, [sp, #-4]!)
   11bd0:	ldr	r0, [pc, #12]	; 11be4 <__assert_fail@plt+0x40>
   11bd4:	ldr	r3, [pc, #12]	; 11be8 <__assert_fail@plt+0x44>
   11bd8:	bl	11904 <__libc_start_main@plt>
   11bdc:	bl	11b68 <abort@plt>
   11be0:	strdeq	lr, [r2], -r0
   11be4:	andeq	r2, r1, r8, ror #5
   11be8:	muleq	r2, r0, sp
   11bec:	ldr	r3, [pc, #20]	; 11c08 <__assert_fail@plt+0x64>
   11bf0:	ldr	r2, [pc, #20]	; 11c0c <__assert_fail@plt+0x68>
   11bf4:	add	r3, pc, r3
   11bf8:	ldr	r2, [r3, r2]
   11bfc:	cmp	r2, #0
   11c00:	bxeq	lr
   11c04:	b	11940 <__gmon_start__@plt>
   11c08:	andeq	r0, r3, r4, lsl #8
   11c0c:	andeq	r0, r0, r0, asr #3
   11c10:	ldr	r3, [pc, #28]	; 11c34 <__assert_fail@plt+0x90>
   11c14:	ldr	r0, [pc, #28]	; 11c38 <__assert_fail@plt+0x94>
   11c18:	sub	r3, r3, r0
   11c1c:	cmp	r3, #6
   11c20:	bxls	lr
   11c24:	ldr	r3, [pc, #16]	; 11c3c <__assert_fail@plt+0x98>
   11c28:	cmp	r3, #0
   11c2c:	bxeq	lr
   11c30:	bx	r3
   11c34:	andeq	r2, r4, pc, lsl r2
   11c38:	andeq	r2, r4, ip, lsl r2
   11c3c:	andeq	r0, r0, r0
   11c40:	ldr	r1, [pc, #36]	; 11c6c <__assert_fail@plt+0xc8>
   11c44:	ldr	r0, [pc, #36]	; 11c70 <__assert_fail@plt+0xcc>
   11c48:	sub	r1, r1, r0
   11c4c:	asr	r1, r1, #2
   11c50:	add	r1, r1, r1, lsr #31
   11c54:	asrs	r1, r1, #1
   11c58:	bxeq	lr
   11c5c:	ldr	r3, [pc, #16]	; 11c74 <__assert_fail@plt+0xd0>
   11c60:	cmp	r3, #0
   11c64:	bxeq	lr
   11c68:	bx	r3
   11c6c:	andeq	r2, r4, ip, lsl r2
   11c70:	andeq	r2, r4, ip, lsl r2
   11c74:	andeq	r0, r0, r0
   11c78:	push	{r4, lr}
   11c7c:	ldr	r4, [pc, #24]	; 11c9c <__assert_fail@plt+0xf8>
   11c80:	ldrb	r3, [r4]
   11c84:	cmp	r3, #0
   11c88:	popne	{r4, pc}
   11c8c:	bl	11c10 <__assert_fail@plt+0x6c>
   11c90:	mov	r3, #1
   11c94:	strb	r3, [r4]
   11c98:	pop	{r4, pc}
   11c9c:	andeq	r2, r4, r4, asr #4
   11ca0:	ldr	r0, [pc, #40]	; 11cd0 <__assert_fail@plt+0x12c>
   11ca4:	ldr	r3, [r0]
   11ca8:	cmp	r3, #0
   11cac:	bne	11cb4 <__assert_fail@plt+0x110>
   11cb0:	b	11c40 <__assert_fail@plt+0x9c>
   11cb4:	ldr	r3, [pc, #24]	; 11cd4 <__assert_fail@plt+0x130>
   11cb8:	cmp	r3, #0
   11cbc:	beq	11cb0 <__assert_fail@plt+0x10c>
   11cc0:	push	{r4, lr}
   11cc4:	blx	r3
   11cc8:	pop	{r4, lr}
   11ccc:	b	11c40 <__assert_fail@plt+0x9c>
   11cd0:	andeq	r1, r4, r4, lsl pc
   11cd4:	andeq	r0, r0, r0
   11cd8:	push	{r4, r5, lr}
   11cdc:	sub	sp, sp, #676	; 0x2a4
   11ce0:	mvn	r2, #0
   11ce4:	mvn	r3, #0
   11ce8:	cmp	r1, r3
   11cec:	cmpeq	r0, r2
   11cf0:	beq	11d2c <__assert_fail@plt+0x188>
   11cf4:	ldr	r2, [pc, #68]	; 11d40 <__assert_fail@plt+0x19c>
   11cf8:	ldr	r3, [r2]
   11cfc:	ldrd	r4, [r2, #8]
   11d00:	strd	r4, [sp, #8]
   11d04:	mov	r4, #1
   11d08:	mov	r5, #0
   11d0c:	strd	r4, [sp]
   11d10:	add	r2, sp, #20
   11d14:	bl	1a6d0 <__assert_fail@plt+0x8b2c>
   11d18:	ldr	r3, [pc, #36]	; 11d44 <__assert_fail@plt+0x1a0>
   11d1c:	ldr	r1, [r3]
   11d20:	bl	116b8 <fputs_unlocked@plt>
   11d24:	add	sp, sp, #676	; 0x2a4
   11d28:	pop	{r4, r5, pc}
   11d2c:	mov	r2, #5
   11d30:	ldr	r1, [pc, #16]	; 11d48 <__assert_fail@plt+0x1a4>
   11d34:	mov	r0, #0
   11d38:	bl	117d8 <dcgettext@plt>
   11d3c:	b	11d18 <__assert_fail@plt+0x174>
   11d40:	andeq	r2, r4, r8, asr #4
   11d44:	andeq	r2, r4, ip, lsr r2
   11d48:	andeq	pc, r2, r8, asr r0	; <UNPREDICTABLE>
   11d4c:	push	{r4, r5, r6, r7, lr}
   11d50:	sub	sp, sp, #92	; 0x5c
   11d54:	mov	r4, r0
   11d58:	mov	r5, r1
   11d5c:	ldr	r3, [pc, #320]	; 11ea4 <__assert_fail@plt+0x300>
   11d60:	ldrb	r3, [r3, #16]
   11d64:	cmp	r3, #0
   11d68:	beq	11e38 <__assert_fail@plt+0x294>
   11d6c:	ldrd	r0, [r0, #8]
   11d70:	bl	11cd8 <__assert_fail@plt+0x134>
   11d74:	ldr	r3, [pc, #296]	; 11ea4 <__assert_fail@plt+0x300>
   11d78:	ldrb	r3, [r3, #17]
   11d7c:	cmp	r3, #0
   11d80:	beq	11e00 <__assert_fail@plt+0x25c>
   11d84:	ldr	r3, [pc, #284]	; 11ea8 <__assert_fail@plt+0x304>
   11d88:	ldr	r0, [r3]
   11d8c:	ldr	r3, [r0, #20]
   11d90:	ldr	r2, [r0, #24]
   11d94:	cmp	r3, r2
   11d98:	addcc	r2, r3, #1
   11d9c:	strcc	r2, [r0, #20]
   11da0:	movcc	r2, #9
   11da4:	strbcc	r2, [r3]
   11da8:	bcs	11e40 <__assert_fail@plt+0x29c>
   11dac:	ldr	r3, [pc, #240]	; 11ea4 <__assert_fail@plt+0x300>
   11db0:	ldr	r7, [r3, #20]
   11db4:	ldr	r6, [r3, #24]
   11db8:	add	r3, sp, #12
   11dbc:	add	r4, r4, #16
   11dc0:	ldm	r4, {r0, r1}
   11dc4:	stm	r3, {r0, r1}
   11dc8:	add	r2, sp, #44	; 0x2c
   11dcc:	mov	r1, r3
   11dd0:	mov	r0, r6
   11dd4:	bl	2b9e0 <__assert_fail@plt+0x19e3c>
   11dd8:	cmp	r0, #0
   11ddc:	beq	11e4c <__assert_fail@plt+0x2a8>
   11de0:	ldr	r3, [pc, #192]	; 11ea8 <__assert_fail@plt+0x304>
   11de4:	ldr	r0, [r3]
   11de8:	ldr	r3, [sp, #16]
   11dec:	str	r3, [sp]
   11df0:	mov	r3, r6
   11df4:	add	r2, sp, #44	; 0x2c
   11df8:	mov	r1, r7
   11dfc:	bl	171c4 <__assert_fail@plt+0x5620>
   11e00:	ldr	r3, [pc, #156]	; 11ea4 <__assert_fail@plt+0x300>
   11e04:	ldrb	r3, [r3, #28]
   11e08:	cmp	r3, #0
   11e0c:	moveq	r3, #10
   11e10:	movne	r3, #0
   11e14:	mov	r2, r5
   11e18:	ldr	r1, [pc, #140]	; 11eac <__assert_fail@plt+0x308>
   11e1c:	mov	r0, #1
   11e20:	bl	11a00 <__printf_chk@plt>
   11e24:	ldr	r3, [pc, #124]	; 11ea8 <__assert_fail@plt+0x304>
   11e28:	ldr	r0, [r3]
   11e2c:	bl	1182c <fflush_unlocked@plt>
   11e30:	add	sp, sp, #92	; 0x5c
   11e34:	pop	{r4, r5, r6, r7, pc}
   11e38:	ldrd	r0, [r0]
   11e3c:	b	11d70 <__assert_fail@plt+0x1cc>
   11e40:	mov	r1, #9
   11e44:	bl	11a60 <__overflow@plt>
   11e48:	b	11dac <__assert_fail@plt+0x208>
   11e4c:	add	r2, sp, #20
   11e50:	ldr	r0, [sp, #12]
   11e54:	asr	r1, r0, #31
   11e58:	bl	1b328 <__assert_fail@plt+0x9784>
   11e5c:	mov	r4, r0
   11e60:	mov	r2, #5
   11e64:	ldr	r1, [pc, #68]	; 11eb0 <__assert_fail@plt+0x30c>
   11e68:	mov	r0, #0
   11e6c:	bl	117d8 <dcgettext@plt>
   11e70:	mov	r6, r0
   11e74:	mov	r0, r4
   11e78:	bl	1e300 <__assert_fail@plt+0xc75c>
   11e7c:	mov	r3, r0
   11e80:	mov	r2, r6
   11e84:	mov	r1, #0
   11e88:	mov	r0, r1
   11e8c:	bl	118bc <error@plt>
   11e90:	ldr	r3, [pc, #16]	; 11ea8 <__assert_fail@plt+0x304>
   11e94:	ldr	r1, [r3]
   11e98:	mov	r0, r4
   11e9c:	bl	116b8 <fputs_unlocked@plt>
   11ea0:	b	11e00 <__assert_fail@plt+0x25c>
   11ea4:	andeq	r2, r4, r8, asr #4
   11ea8:	andeq	r2, r4, ip, lsr r2
   11eac:	andeq	pc, r2, ip, ror r0	; <UNPREDICTABLE>
   11eb0:	andeq	pc, r2, r4, rrx
   11eb4:	push	{lr}		; (str lr, [sp, #-4]!)
   11eb8:	sub	sp, sp, #60	; 0x3c
   11ebc:	subs	r6, r0, #0
   11ec0:	beq	11efc <__assert_fail@plt+0x358>
   11ec4:	ldr	r3, [pc, #932]	; 12270 <__assert_fail@plt+0x6cc>
   11ec8:	ldr	r4, [r3]
   11ecc:	mov	r2, #5
   11ed0:	ldr	r1, [pc, #924]	; 12274 <__assert_fail@plt+0x6d0>
   11ed4:	mov	r0, #0
   11ed8:	bl	117d8 <dcgettext@plt>
   11edc:	ldr	r3, [pc, #916]	; 12278 <__assert_fail@plt+0x6d4>
   11ee0:	ldr	r3, [r3]
   11ee4:	mov	r2, r0
   11ee8:	mov	r1, #1
   11eec:	mov	r0, r4
   11ef0:	bl	11a18 <__fprintf_chk@plt>
   11ef4:	mov	r0, r6
   11ef8:	bl	11970 <exit@plt>
   11efc:	mov	r2, #5
   11f00:	ldr	r1, [pc, #884]	; 1227c <__assert_fail@plt+0x6d8>
   11f04:	mov	r0, #0
   11f08:	bl	117d8 <dcgettext@plt>
   11f0c:	ldr	r3, [pc, #868]	; 12278 <__assert_fail@plt+0x6d4>
   11f10:	ldr	r2, [r3]
   11f14:	mov	r3, r2
   11f18:	mov	r1, r0
   11f1c:	mov	r0, #1
   11f20:	bl	11a00 <__printf_chk@plt>
   11f24:	mov	r2, #5
   11f28:	ldr	r1, [pc, #848]	; 12280 <__assert_fail@plt+0x6dc>
   11f2c:	mov	r0, #0
   11f30:	bl	117d8 <dcgettext@plt>
   11f34:	ldr	r4, [pc, #840]	; 12284 <__assert_fail@plt+0x6e0>
   11f38:	ldr	r1, [r4]
   11f3c:	bl	116b8 <fputs_unlocked@plt>
   11f40:	mov	r2, #5
   11f44:	ldr	r1, [pc, #828]	; 12288 <__assert_fail@plt+0x6e4>
   11f48:	mov	r0, #0
   11f4c:	bl	117d8 <dcgettext@plt>
   11f50:	ldr	r1, [r4]
   11f54:	bl	116b8 <fputs_unlocked@plt>
   11f58:	mov	r2, #5
   11f5c:	ldr	r1, [pc, #808]	; 1228c <__assert_fail@plt+0x6e8>
   11f60:	mov	r0, #0
   11f64:	bl	117d8 <dcgettext@plt>
   11f68:	ldr	r1, [r4]
   11f6c:	bl	116b8 <fputs_unlocked@plt>
   11f70:	mov	r2, #5
   11f74:	ldr	r1, [pc, #788]	; 12290 <__assert_fail@plt+0x6ec>
   11f78:	mov	r0, #0
   11f7c:	bl	117d8 <dcgettext@plt>
   11f80:	ldr	r1, [r4]
   11f84:	bl	116b8 <fputs_unlocked@plt>
   11f88:	mov	r2, #5
   11f8c:	ldr	r1, [pc, #768]	; 12294 <__assert_fail@plt+0x6f0>
   11f90:	mov	r0, #0
   11f94:	bl	117d8 <dcgettext@plt>
   11f98:	ldr	r1, [r4]
   11f9c:	bl	116b8 <fputs_unlocked@plt>
   11fa0:	mov	r2, #5
   11fa4:	ldr	r1, [pc, #748]	; 12298 <__assert_fail@plt+0x6f4>
   11fa8:	mov	r0, #0
   11fac:	bl	117d8 <dcgettext@plt>
   11fb0:	ldr	r1, [r4]
   11fb4:	bl	116b8 <fputs_unlocked@plt>
   11fb8:	mov	r2, #5
   11fbc:	ldr	r1, [pc, #728]	; 1229c <__assert_fail@plt+0x6f8>
   11fc0:	mov	r0, #0
   11fc4:	bl	117d8 <dcgettext@plt>
   11fc8:	ldr	r1, [r4]
   11fcc:	bl	116b8 <fputs_unlocked@plt>
   11fd0:	mov	r2, #5
   11fd4:	ldr	r1, [pc, #708]	; 122a0 <__assert_fail@plt+0x6fc>
   11fd8:	mov	r0, #0
   11fdc:	bl	117d8 <dcgettext@plt>
   11fe0:	ldr	r1, [r4]
   11fe4:	bl	116b8 <fputs_unlocked@plt>
   11fe8:	mov	r2, #5
   11fec:	ldr	r1, [pc, #688]	; 122a4 <__assert_fail@plt+0x700>
   11ff0:	mov	r0, #0
   11ff4:	bl	117d8 <dcgettext@plt>
   11ff8:	ldr	r1, [r4]
   11ffc:	bl	116b8 <fputs_unlocked@plt>
   12000:	mov	r2, #5
   12004:	ldr	r1, [pc, #668]	; 122a8 <__assert_fail@plt+0x704>
   12008:	mov	r0, #0
   1200c:	bl	117d8 <dcgettext@plt>
   12010:	ldr	r1, [r4]
   12014:	bl	116b8 <fputs_unlocked@plt>
   12018:	mov	r2, #5
   1201c:	ldr	r1, [pc, #648]	; 122ac <__assert_fail@plt+0x708>
   12020:	mov	r0, #0
   12024:	bl	117d8 <dcgettext@plt>
   12028:	ldr	r1, [r4]
   1202c:	bl	116b8 <fputs_unlocked@plt>
   12030:	mov	r2, #5
   12034:	ldr	r1, [pc, #628]	; 122b0 <__assert_fail@plt+0x70c>
   12038:	mov	r0, #0
   1203c:	bl	117d8 <dcgettext@plt>
   12040:	ldr	r2, [pc, #620]	; 122b4 <__assert_fail@plt+0x710>
   12044:	mov	r1, r0
   12048:	mov	r0, #1
   1204c:	bl	11a00 <__printf_chk@plt>
   12050:	mov	r2, #5
   12054:	ldr	r1, [pc, #604]	; 122b8 <__assert_fail@plt+0x714>
   12058:	mov	r0, #0
   1205c:	bl	117d8 <dcgettext@plt>
   12060:	ldr	r1, [r4]
   12064:	bl	116b8 <fputs_unlocked@plt>
   12068:	mov	ip, sp
   1206c:	ldr	lr, [pc, #584]	; 122bc <__assert_fail@plt+0x718>
   12070:	ldm	lr!, {r0, r1, r2, r3}
   12074:	stmia	ip!, {r0, r1, r2, r3}
   12078:	ldm	lr!, {r0, r1, r2, r3}
   1207c:	stmia	ip!, {r0, r1, r2, r3}
   12080:	ldm	lr!, {r0, r1, r2, r3}
   12084:	stmia	ip!, {r0, r1, r2, r3}
   12088:	ldm	lr, {r0, r1}
   1208c:	stm	ip, {r0, r1}
   12090:	ldr	r1, [sp]
   12094:	cmp	r1, #0
   12098:	moveq	r4, sp
   1209c:	beq	120c4 <__assert_fail@plt+0x520>
   120a0:	mov	r4, sp
   120a4:	ldr	r5, [pc, #532]	; 122c0 <__assert_fail@plt+0x71c>
   120a8:	mov	r0, r5
   120ac:	bl	1170c <strcmp@plt>
   120b0:	cmp	r0, #0
   120b4:	beq	120c4 <__assert_fail@plt+0x520>
   120b8:	ldr	r1, [r4, #8]!
   120bc:	cmp	r1, #0
   120c0:	bne	120a8 <__assert_fail@plt+0x504>
   120c4:	ldr	r4, [r4, #4]
   120c8:	cmp	r4, #0
   120cc:	beq	121e0 <__assert_fail@plt+0x63c>
   120d0:	mov	r2, #5
   120d4:	ldr	r1, [pc, #488]	; 122c4 <__assert_fail@plt+0x720>
   120d8:	mov	r0, #0
   120dc:	bl	117d8 <dcgettext@plt>
   120e0:	ldr	r3, [pc, #480]	; 122c8 <__assert_fail@plt+0x724>
   120e4:	ldr	r2, [pc, #480]	; 122cc <__assert_fail@plt+0x728>
   120e8:	mov	r1, r0
   120ec:	mov	r0, #1
   120f0:	bl	11a00 <__printf_chk@plt>
   120f4:	mov	r1, #0
   120f8:	mov	r0, #5
   120fc:	bl	11a6c <setlocale@plt>
   12100:	cmp	r0, #0
   12104:	beq	1211c <__assert_fail@plt+0x578>
   12108:	mov	r2, #3
   1210c:	ldr	r1, [pc, #444]	; 122d0 <__assert_fail@plt+0x72c>
   12110:	bl	11b5c <strncmp@plt>
   12114:	cmp	r0, #0
   12118:	bne	1217c <__assert_fail@plt+0x5d8>
   1211c:	mov	r2, #5
   12120:	ldr	r1, [pc, #428]	; 122d4 <__assert_fail@plt+0x730>
   12124:	mov	r0, #0
   12128:	bl	117d8 <dcgettext@plt>
   1212c:	ldr	r5, [pc, #396]	; 122c0 <__assert_fail@plt+0x71c>
   12130:	mov	r3, r5
   12134:	ldr	r2, [pc, #396]	; 122c8 <__assert_fail@plt+0x724>
   12138:	mov	r1, r0
   1213c:	mov	r0, #1
   12140:	bl	11a00 <__printf_chk@plt>
   12144:	mov	r2, #5
   12148:	ldr	r1, [pc, #392]	; 122d8 <__assert_fail@plt+0x734>
   1214c:	mov	r0, #0
   12150:	bl	117d8 <dcgettext@plt>
   12154:	mov	r1, r0
   12158:	ldr	r2, [pc, #380]	; 122dc <__assert_fail@plt+0x738>
   1215c:	ldr	r3, [pc, #380]	; 122e0 <__assert_fail@plt+0x73c>
   12160:	cmp	r4, r5
   12164:	movne	r3, r2
   12168:	mov	r2, r4
   1216c:	mov	r0, #1
   12170:	bl	11a00 <__printf_chk@plt>
   12174:	b	11ef4 <__assert_fail@plt+0x350>
   12178:	ldr	r4, [pc, #320]	; 122c0 <__assert_fail@plt+0x71c>
   1217c:	mov	r2, #5
   12180:	ldr	r1, [pc, #348]	; 122e4 <__assert_fail@plt+0x740>
   12184:	mov	r0, #0
   12188:	bl	117d8 <dcgettext@plt>
   1218c:	ldr	r3, [pc, #240]	; 12284 <__assert_fail@plt+0x6e0>
   12190:	ldr	r1, [r3]
   12194:	bl	116b8 <fputs_unlocked@plt>
   12198:	b	1211c <__assert_fail@plt+0x578>
   1219c:	mov	r2, #5
   121a0:	ldr	r1, [pc, #300]	; 122d4 <__assert_fail@plt+0x730>
   121a4:	mov	r0, #0
   121a8:	bl	117d8 <dcgettext@plt>
   121ac:	ldr	r4, [pc, #268]	; 122c0 <__assert_fail@plt+0x71c>
   121b0:	mov	r3, r4
   121b4:	ldr	r2, [pc, #268]	; 122c8 <__assert_fail@plt+0x724>
   121b8:	mov	r1, r0
   121bc:	mov	r0, #1
   121c0:	bl	11a00 <__printf_chk@plt>
   121c4:	mov	r2, #5
   121c8:	ldr	r1, [pc, #264]	; 122d8 <__assert_fail@plt+0x734>
   121cc:	mov	r0, #0
   121d0:	bl	117d8 <dcgettext@plt>
   121d4:	mov	r1, r0
   121d8:	ldr	r3, [pc, #256]	; 122e0 <__assert_fail@plt+0x73c>
   121dc:	b	12168 <__assert_fail@plt+0x5c4>
   121e0:	mov	r2, #5
   121e4:	ldr	r1, [pc, #216]	; 122c4 <__assert_fail@plt+0x720>
   121e8:	mov	r0, #0
   121ec:	bl	117d8 <dcgettext@plt>
   121f0:	ldr	r3, [pc, #208]	; 122c8 <__assert_fail@plt+0x724>
   121f4:	ldr	r2, [pc, #208]	; 122cc <__assert_fail@plt+0x728>
   121f8:	mov	r1, r0
   121fc:	mov	r0, #1
   12200:	bl	11a00 <__printf_chk@plt>
   12204:	mov	r1, #0
   12208:	mov	r0, #5
   1220c:	bl	11a6c <setlocale@plt>
   12210:	cmp	r0, #0
   12214:	beq	1219c <__assert_fail@plt+0x5f8>
   12218:	mov	r2, #3
   1221c:	ldr	r1, [pc, #172]	; 122d0 <__assert_fail@plt+0x72c>
   12220:	bl	11b5c <strncmp@plt>
   12224:	cmp	r0, #0
   12228:	bne	12178 <__assert_fail@plt+0x5d4>
   1222c:	mov	r2, #5
   12230:	ldr	r1, [pc, #156]	; 122d4 <__assert_fail@plt+0x730>
   12234:	mov	r0, #0
   12238:	bl	117d8 <dcgettext@plt>
   1223c:	ldr	r4, [pc, #124]	; 122c0 <__assert_fail@plt+0x71c>
   12240:	mov	r3, r4
   12244:	ldr	r2, [pc, #124]	; 122c8 <__assert_fail@plt+0x724>
   12248:	mov	r1, r0
   1224c:	mov	r0, #1
   12250:	bl	11a00 <__printf_chk@plt>
   12254:	mov	r2, #5
   12258:	ldr	r1, [pc, #120]	; 122d8 <__assert_fail@plt+0x734>
   1225c:	mov	r0, #0
   12260:	bl	117d8 <dcgettext@plt>
   12264:	mov	r1, r0
   12268:	ldr	r3, [pc, #112]	; 122e0 <__assert_fail@plt+0x73c>
   1226c:	b	12168 <__assert_fail@plt+0x5c4>
   12270:	andeq	r2, r4, r0, lsr r2
   12274:	andeq	pc, r2, r8, lsl #1
   12278:	andeq	r2, r4, r8, asr #5
   1227c:	strheq	pc, [r2], -r0	; <UNPREDICTABLE>
   12280:	strdeq	pc, [r2], -r8
   12284:	andeq	r2, r4, ip, lsr r2
   12288:	andeq	pc, r2, r4, asr #2
   1228c:	muleq	r2, r0, r1
   12290:	andeq	pc, r2, ip, asr #6
   12294:	andeq	pc, r2, r0, lsl #12
   12298:	andeq	pc, r2, r4, lsr #15
   1229c:	andeq	pc, r2, r4, ror r8	; <UNPREDICTABLE>
   122a0:	muleq	r2, r4, r9
   122a4:	strdeq	pc, [r2], -r8
   122a8:	andeq	pc, r2, r4, asr #25
   122ac:	strdeq	pc, [r2], -r4
   122b0:	andeq	pc, r2, ip, lsr #26
   122b4:	andeq	pc, r2, ip, lsl #28
   122b8:	andeq	pc, r2, r0, lsl lr	; <UNPREDICTABLE>
   122bc:	andeq	lr, r2, r8, lsl lr
   122c0:	andeq	pc, r2, r4, lsl #1
   122c4:	andeq	pc, r2, r4, ror #29
   122c8:	strdeq	pc, [r2], -ip
   122cc:	andeq	pc, r2, r4, lsr #30
   122d0:	andeq	pc, r2, r4, lsr pc	; <UNPREDICTABLE>
   122d4:	andeq	pc, r2, r0, lsl #31
   122d8:	muleq	r2, ip, pc	; <UNPREDICTABLE>
   122dc:	andeq	r0, r3, ip, lsl #15
   122e0:	andeq	r0, r3, r0, ror #8
   122e4:	andeq	pc, r2, r8, lsr pc	; <UNPREDICTABLE>
   122e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   122ec:	sub	sp, sp, #220	; 0xdc
   122f0:	mov	r7, r0
   122f4:	mov	r5, r1
   122f8:	ldr	r3, [pc, #3988]	; 13294 <__assert_fail@plt+0x16f0>
   122fc:	str	r3, [sp, #208]	; 0xd0
   12300:	mov	r4, #0
   12304:	str	r4, [sp, #212]	; 0xd4
   12308:	ldr	r0, [r1]
   1230c:	bl	1c7b0 <__assert_fail@plt+0xac0c>
   12310:	ldr	r1, [pc, #3968]	; 13298 <__assert_fail@plt+0x16f4>
   12314:	mov	r0, #6
   12318:	bl	11a6c <setlocale@plt>
   1231c:	ldr	r6, [pc, #3960]	; 1329c <__assert_fail@plt+0x16f8>
   12320:	ldr	r1, [pc, #3960]	; 132a0 <__assert_fail@plt+0x16fc>
   12324:	mov	r0, r6
   12328:	bl	11b20 <bindtextdomain@plt>
   1232c:	mov	r0, r6
   12330:	bl	11808 <textdomain@plt>
   12334:	ldr	r0, [pc, #3944]	; 132a4 <__assert_fail@plt+0x1700>
   12338:	bl	2edf4 <__assert_fail@plt+0x1d250>
   1233c:	bl	14c64 <__assert_fail@plt+0x30c0>
   12340:	ldr	r6, [pc, #3936]	; 132a8 <__assert_fail@plt+0x1704>
   12344:	str	r0, [r6, #32]
   12348:	ldr	r0, [pc, #3932]	; 132ac <__assert_fail@plt+0x1708>
   1234c:	bl	118ec <getenv@plt>
   12350:	add	r2, r6, #8
   12354:	mov	r1, r6
   12358:	bl	1af58 <__assert_fail@plt+0x93b4>
   1235c:	str	r4, [sp, #32]
   12360:	mov	fp, #16
   12364:	mov	sl, #8
   12368:	str	r4, [sp, #52]	; 0x34
   1236c:	mov	r3, #1
   12370:	str	r3, [sp, #48]	; 0x30
   12374:	str	r4, [sp, #40]	; 0x28
   12378:	ldr	r4, [pc, #3888]	; 132b0 <__assert_fail@plt+0x170c>
   1237c:	ldr	r8, [pc, #3888]	; 132b4 <__assert_fail@plt+0x1710>
   12380:	ldr	r9, [pc, #3888]	; 132b8 <__assert_fail@plt+0x1714>
   12384:	add	r3, r4, #472	; 0x1d8
   12388:	str	r3, [sp, #44]	; 0x2c
   1238c:	add	r3, r6, sl
   12390:	str	r3, [sp, #36]	; 0x24
   12394:	add	r3, sp, #216	; 0xd8
   12398:	mvn	r2, #0
   1239c:	str	r2, [r3, #-116]!	; 0xffffff8c
   123a0:	str	r3, [sp]
   123a4:	add	r3, r4, #56	; 0x38
   123a8:	mov	r2, r8
   123ac:	mov	r1, r5
   123b0:	mov	r0, r7
   123b4:	bl	11958 <getopt_long@plt>
   123b8:	cmn	r0, #1
   123bc:	beq	12b90 <__assert_fail@plt+0xfec>
   123c0:	add	r0, r0, #3
   123c4:	ldr	r3, [pc, #3824]	; 132bc <__assert_fail@plt+0x1718>
   123c8:	cmp	r0, r3
   123cc:	ldrls	pc, [pc, r0, lsl #2]
   123d0:	b	12b78 <__assert_fail@plt+0xfd4>
   123d4:	andeq	r2, r1, ip, lsr #22
   123d8:	andeq	r2, r1, r4, lsr #22
   123dc:	andeq	r2, r1, r8, ror fp
   123e0:	andeq	r2, r1, r8, ror fp
   123e4:	andeq	r2, r1, r8, ror fp
   123e8:	andeq	r2, r1, r8, ror fp
   123ec:	andeq	r2, r1, r8, ror fp
   123f0:	andeq	r2, r1, r8, ror fp
   123f4:	andeq	r2, r1, r8, ror fp
   123f8:	andeq	r2, r1, r8, ror fp
   123fc:	andeq	r2, r1, r8, ror fp
   12400:	andeq	r2, r1, r8, ror fp
   12404:	andeq	r2, r1, r8, ror fp
   12408:	andeq	r2, r1, r8, ror fp
   1240c:	andeq	r2, r1, r8, ror fp
   12410:	andeq	r2, r1, r8, ror fp
   12414:	andeq	r2, r1, r8, ror fp
   12418:	andeq	r2, r1, r8, ror fp
   1241c:	andeq	r2, r1, r8, ror fp
   12420:	andeq	r2, r1, r8, ror fp
   12424:	andeq	r2, r1, r8, ror fp
   12428:	andeq	r2, r1, r8, ror fp
   1242c:	andeq	r2, r1, r8, ror fp
   12430:	andeq	r2, r1, r8, ror fp
   12434:	andeq	r2, r1, r8, ror fp
   12438:	andeq	r2, r1, r8, ror fp
   1243c:	andeq	r2, r1, r8, ror fp
   12440:	andeq	r2, r1, r8, ror fp
   12444:	andeq	r2, r1, r8, ror fp
   12448:	andeq	r2, r1, r8, ror fp
   1244c:	andeq	r2, r1, r8, ror fp
   12450:	andeq	r2, r1, r8, ror fp
   12454:	andeq	r2, r1, r8, ror fp
   12458:	andeq	r2, r1, r8, ror fp
   1245c:	andeq	r2, r1, r8, ror fp
   12460:	andeq	r2, r1, r8, ror fp
   12464:	andeq	r2, r1, r8, ror fp
   12468:	andeq	r2, r1, r8, ror fp
   1246c:	andeq	r2, r1, r8, ror fp
   12470:	andeq	r2, r1, r8, ror fp
   12474:	andeq	r2, r1, r8, ror fp
   12478:	andeq	r2, r1, r8, ror fp
   1247c:	andeq	r2, r1, r8, ror fp
   12480:	andeq	r2, r1, r8, ror fp
   12484:	andeq	r2, r1, r8, ror fp
   12488:	andeq	r2, r1, r8, ror fp
   1248c:	andeq	r2, r1, r8, ror fp
   12490:	andeq	r2, r1, r8, ror fp
   12494:	andeq	r2, r1, r8, ror fp
   12498:	andeq	r2, r1, r8, ror fp
   1249c:	andeq	r2, r1, r8, ror fp
   124a0:	andeq	r2, r1, r8, lsl #16
   124a4:	andeq	r2, r1, r8, ror fp
   124a8:	andeq	r2, r1, r8, ror fp
   124ac:	andeq	r2, r1, r8, ror fp
   124b0:	andeq	r2, r1, r8, ror fp
   124b4:	andeq	r2, r1, r8, ror fp
   124b8:	andeq	r2, r1, r8, ror fp
   124bc:	andeq	r2, r1, r8, ror fp
   124c0:	andeq	r2, r1, r8, ror fp
   124c4:	andeq	r2, r1, r8, ror fp
   124c8:	andeq	r2, r1, r8, ror fp
   124cc:	andeq	r2, r1, r8, ror fp
   124d0:	andeq	r2, r1, r8, ror fp
   124d4:	andeq	r2, r1, r8, ror fp
   124d8:	andeq	r2, r1, r8, ror fp
   124dc:	andeq	r2, r1, r8, ror fp
   124e0:	andeq	r2, r1, r8, ror fp
   124e4:	andeq	r2, r1, r8, ror fp
   124e8:	ldrdeq	r2, [r1], -r4
   124ec:	andeq	r2, r1, r8, ror fp
   124f0:	andeq	r2, r1, r8, lsl #20
   124f4:	andeq	r2, r1, r8, ror fp
   124f8:	andeq	r2, r1, r8, ror fp
   124fc:	andeq	r2, r1, r8, ror fp
   12500:	andeq	r2, r1, r8, lsl #20
   12504:	andeq	r2, r1, r8, ror fp
   12508:	andeq	r2, r1, r8, ror fp
   1250c:	andeq	r2, r1, r8, ror fp
   12510:	andeq	r2, r1, r0, lsl sl
   12514:	andeq	r2, r1, r8, ror fp
   12518:	andeq	r2, r1, r8, ror fp
   1251c:	andeq	r2, r1, r8, ror fp
   12520:	andeq	r2, r1, r8, lsl sl
   12524:	andeq	r2, r1, r8, ror fp
   12528:	andeq	r2, r1, r8, ror fp
   1252c:	andeq	r2, r1, r0, lsr #20
   12530:	andeq	r2, r1, r8, ror fp
   12534:	andeq	r2, r1, r8, ror fp
   12538:	andeq	r2, r1, r8, ror fp
   1253c:	andeq	r2, r1, r8, ror fp
   12540:	andeq	r2, r1, ip, lsr #20
   12544:	andeq	r2, r1, r8, ror fp
   12548:	andeq	r2, r1, r8, ror fp
   1254c:	andeq	r2, r1, r8, ror fp
   12550:	andeq	r2, r1, r8, ror fp
   12554:	andeq	r2, r1, r8, ror fp
   12558:	andeq	r2, r1, r8, ror fp
   1255c:	andeq	r2, r1, r8, ror fp
   12560:	andeq	r2, r1, r8, ror fp
   12564:	andeq	r2, r1, r4, lsl r8
   12568:	andeq	r2, r1, ip, lsr #16
   1256c:	andeq	r2, r1, ip, asr #16
   12570:	andeq	r2, r1, r0, lsr #17
   12574:	andeq	r2, r1, r8, ror fp
   12578:	andeq	r2, r1, r8, ror fp
   1257c:	andeq	r2, r1, r8, ror fp
   12580:	andeq	r2, r1, r8, asr r8
   12584:	andeq	r2, r1, r8, ror fp
   12588:	andeq	r2, r1, r8, ror fp
   1258c:	andeq	r2, r1, r8, lsl #17
   12590:	andeq	r2, r1, ip, asr #18
   12594:	andeq	r2, r1, r4, lsr r9
   12598:	andeq	r2, r1, r8, ror fp
   1259c:	andeq	r2, r1, r8, ror fp
   125a0:	andeq	r2, r1, r8, ror fp
   125a4:	andeq	r2, r1, r8, ror fp
   125a8:	andeq	r2, r1, r8, ror fp
   125ac:	andeq	r2, r1, r4, lsl #23
   125b0:	andeq	r2, r1, r8, asr r9
   125b4:	andeq	r2, r1, r8, ror fp
   125b8:	andeq	r2, r1, r8, ror fp
   125bc:	andeq	r2, r1, r8, ror fp
   125c0:	andeq	r2, r1, r0, lsl #16
   125c4:	andeq	r2, r1, r8, ror fp
   125c8:	andeq	r2, r1, r8, ror fp
   125cc:	andeq	r2, r1, r8, ror fp
   125d0:	andeq	r2, r1, r8, ror fp
   125d4:	andeq	r2, r1, r8, ror fp
   125d8:	andeq	r2, r1, r8, ror fp
   125dc:	andeq	r2, r1, r8, ror fp
   125e0:	andeq	r2, r1, r8, ror fp
   125e4:	andeq	r2, r1, r8, ror fp
   125e8:	andeq	r2, r1, r8, ror fp
   125ec:	andeq	r2, r1, r8, ror fp
   125f0:	andeq	r2, r1, r8, ror fp
   125f4:	andeq	r2, r1, r8, ror fp
   125f8:	andeq	r2, r1, r8, ror fp
   125fc:	andeq	r2, r1, r8, ror fp
   12600:	andeq	r2, r1, r8, ror fp
   12604:	andeq	r2, r1, r8, ror fp
   12608:	andeq	r2, r1, r8, ror fp
   1260c:	andeq	r2, r1, r8, ror fp
   12610:	andeq	r2, r1, r8, ror fp
   12614:	andeq	r2, r1, r8, ror fp
   12618:	andeq	r2, r1, r8, ror fp
   1261c:	andeq	r2, r1, r8, ror fp
   12620:	andeq	r2, r1, r8, ror fp
   12624:	andeq	r2, r1, r8, ror fp
   12628:	andeq	r2, r1, r8, ror fp
   1262c:	andeq	r2, r1, r8, ror fp
   12630:	andeq	r2, r1, r8, ror fp
   12634:	andeq	r2, r1, r8, ror fp
   12638:	andeq	r2, r1, r8, ror fp
   1263c:	andeq	r2, r1, r8, ror fp
   12640:	andeq	r2, r1, r8, ror fp
   12644:	andeq	r2, r1, r8, ror fp
   12648:	andeq	r2, r1, r8, ror fp
   1264c:	andeq	r2, r1, r8, ror fp
   12650:	andeq	r2, r1, r8, ror fp
   12654:	andeq	r2, r1, r8, ror fp
   12658:	andeq	r2, r1, r8, ror fp
   1265c:	andeq	r2, r1, r8, ror fp
   12660:	andeq	r2, r1, r8, ror fp
   12664:	andeq	r2, r1, r8, ror fp
   12668:	andeq	r2, r1, r8, ror fp
   1266c:	andeq	r2, r1, r8, ror fp
   12670:	andeq	r2, r1, r8, ror fp
   12674:	andeq	r2, r1, r8, ror fp
   12678:	andeq	r2, r1, r8, ror fp
   1267c:	andeq	r2, r1, r8, ror fp
   12680:	andeq	r2, r1, r8, ror fp
   12684:	andeq	r2, r1, r8, ror fp
   12688:	andeq	r2, r1, r8, ror fp
   1268c:	andeq	r2, r1, r8, ror fp
   12690:	andeq	r2, r1, r8, ror fp
   12694:	andeq	r2, r1, r8, ror fp
   12698:	andeq	r2, r1, r8, ror fp
   1269c:	andeq	r2, r1, r8, ror fp
   126a0:	andeq	r2, r1, r8, ror fp
   126a4:	andeq	r2, r1, r8, ror fp
   126a8:	andeq	r2, r1, r8, ror fp
   126ac:	andeq	r2, r1, r8, ror fp
   126b0:	andeq	r2, r1, r8, ror fp
   126b4:	andeq	r2, r1, r8, ror fp
   126b8:	andeq	r2, r1, r8, ror fp
   126bc:	andeq	r2, r1, r8, ror fp
   126c0:	andeq	r2, r1, r8, ror fp
   126c4:	andeq	r2, r1, r8, ror fp
   126c8:	andeq	r2, r1, r8, ror fp
   126cc:	andeq	r2, r1, r8, ror fp
   126d0:	andeq	r2, r1, r8, ror fp
   126d4:	andeq	r2, r1, r8, ror fp
   126d8:	andeq	r2, r1, r8, ror fp
   126dc:	andeq	r2, r1, r8, ror fp
   126e0:	andeq	r2, r1, r8, ror fp
   126e4:	andeq	r2, r1, r8, ror fp
   126e8:	andeq	r2, r1, r8, ror fp
   126ec:	andeq	r2, r1, r8, ror fp
   126f0:	andeq	r2, r1, r8, ror fp
   126f4:	andeq	r2, r1, r8, ror fp
   126f8:	andeq	r2, r1, r8, ror fp
   126fc:	andeq	r2, r1, r8, ror fp
   12700:	andeq	r2, r1, r8, ror fp
   12704:	andeq	r2, r1, r8, ror fp
   12708:	andeq	r2, r1, r8, ror fp
   1270c:	andeq	r2, r1, r8, ror fp
   12710:	andeq	r2, r1, r8, ror fp
   12714:	andeq	r2, r1, r8, ror fp
   12718:	andeq	r2, r1, r8, ror fp
   1271c:	andeq	r2, r1, r8, ror fp
   12720:	andeq	r2, r1, r8, ror fp
   12724:	andeq	r2, r1, r8, ror fp
   12728:	andeq	r2, r1, r8, ror fp
   1272c:	andeq	r2, r1, r8, ror fp
   12730:	andeq	r2, r1, r8, ror fp
   12734:	andeq	r2, r1, r8, ror fp
   12738:	andeq	r2, r1, r8, ror fp
   1273c:	andeq	r2, r1, r8, ror fp
   12740:	andeq	r2, r1, r8, ror fp
   12744:	andeq	r2, r1, r8, ror fp
   12748:	andeq	r2, r1, r8, ror fp
   1274c:	andeq	r2, r1, r8, ror fp
   12750:	andeq	r2, r1, r8, ror fp
   12754:	andeq	r2, r1, r8, ror fp
   12758:	andeq	r2, r1, r8, ror fp
   1275c:	andeq	r2, r1, r8, ror fp
   12760:	andeq	r2, r1, r8, ror fp
   12764:	andeq	r2, r1, r8, ror fp
   12768:	andeq	r2, r1, r8, ror fp
   1276c:	andeq	r2, r1, r8, ror fp
   12770:	andeq	r2, r1, r8, ror fp
   12774:	andeq	r2, r1, r8, ror fp
   12778:	andeq	r2, r1, r8, ror fp
   1277c:	andeq	r2, r1, r8, ror fp
   12780:	andeq	r2, r1, r8, ror fp
   12784:	andeq	r2, r1, r8, ror fp
   12788:	andeq	r2, r1, r8, ror fp
   1278c:	andeq	r2, r1, r8, ror fp
   12790:	andeq	r2, r1, r8, ror fp
   12794:	andeq	r2, r1, r8, ror fp
   12798:	andeq	r2, r1, r8, ror fp
   1279c:	andeq	r2, r1, r8, ror fp
   127a0:	andeq	r2, r1, r8, ror fp
   127a4:	andeq	r2, r1, r8, ror fp
   127a8:	andeq	r2, r1, r8, ror fp
   127ac:	andeq	r2, r1, r8, ror fp
   127b0:	andeq	r2, r1, r8, ror fp
   127b4:	andeq	r2, r1, r8, ror fp
   127b8:	andeq	r2, r1, r8, ror fp
   127bc:	andeq	r2, r1, r8, ror fp
   127c0:	andeq	r2, r1, r8, ror fp
   127c4:	andeq	r2, r1, r8, ror fp
   127c8:	andeq	r2, r1, r8, ror fp
   127cc:	andeq	r2, r1, r8, ror fp
   127d0:	andeq	r2, r1, r8, ror fp
   127d4:	andeq	r2, r1, r8, ror fp
   127d8:	andeq	r2, r1, r8, ror fp
   127dc:	andeq	r2, r1, r8, ror fp
   127e0:	andeq	r2, r1, r0, lsr #16
   127e4:	muleq	r1, r8, sl
   127e8:	andeq	r2, r1, ip, lsl #21
   127ec:	andeq	r2, r1, r0, ror r8
   127f0:	andeq	r2, r1, r8, ror fp
   127f4:			; <UNDEFINED> instruction: 0x00012ab8
   127f8:	andeq	r2, r1, r8, lsl fp
   127fc:	andeq	r2, r1, ip, lsr #21
   12800:	mov	sl, #72	; 0x48
   12804:	b	12394 <__assert_fail@plt+0x7f0>
   12808:	mov	r3, #1
   1280c:	strb	r3, [r6, #28]
   12810:	b	12394 <__assert_fail@plt+0x7f0>
   12814:	mov	r3, #1
   12818:	strb	r3, [r6, #36]	; 0x24
   1281c:	b	12394 <__assert_fail@plt+0x7f0>
   12820:	mov	r3, #1
   12824:	strb	r3, [r6, #37]	; 0x25
   12828:	b	12394 <__assert_fail@plt+0x7f0>
   1282c:	mov	r3, #1
   12830:	strb	r3, [r6, #37]	; 0x25
   12834:	mov	r3, #0
   12838:	str	r3, [r6]
   1283c:	mov	r2, #1
   12840:	mov	r3, #0
   12844:	strd	r2, [r6, #8]
   12848:	b	12394 <__assert_fail@plt+0x7f0>
   1284c:	mov	r3, #1
   12850:	strb	r3, [r6, #38]	; 0x26
   12854:	b	12394 <__assert_fail@plt+0x7f0>
   12858:	mov	r3, #176	; 0xb0
   1285c:	str	r3, [r6]
   12860:	mov	r2, #1
   12864:	mov	r3, #0
   12868:	strd	r2, [r6, #8]
   1286c:	b	12394 <__assert_fail@plt+0x7f0>
   12870:	mov	r3, #144	; 0x90
   12874:	str	r3, [r6]
   12878:	mov	r2, #1
   1287c:	mov	r3, #0
   12880:	strd	r2, [r6, #8]
   12884:	b	12394 <__assert_fail@plt+0x7f0>
   12888:	mov	r3, #0
   1288c:	str	r3, [r6]
   12890:	mov	r2, #1024	; 0x400
   12894:	mov	r3, #0
   12898:	strd	r2, [r6, #8]
   1289c:	b	12394 <__assert_fail@plt+0x7f0>
   128a0:	ldr	r3, [pc, #2544]	; 13298 <__assert_fail@plt+0x16f4>
   128a4:	str	r3, [sp]
   128a8:	add	r3, sp, #104	; 0x68
   128ac:	mov	r2, #0
   128b0:	mov	r1, r2
   128b4:	ldr	r0, [r9]
   128b8:	bl	2cf34 <__assert_fail@plt+0x1b390>
   128bc:	cmp	r0, #0
   128c0:	bne	128f8 <__assert_fail@plt+0xd54>
   128c4:	ldrd	r2, [sp, #104]	; 0x68
   128c8:	mvn	r0, #0
   128cc:	mov	r1, #0
   128d0:	strd	r2, [sp, #56]	; 0x38
   128d4:	cmp	r3, r1
   128d8:	cmpeq	r2, r0
   128dc:	bhi	128f8 <__assert_fail@plt+0xd54>
   128e0:	ldr	r3, [pc, #2708]	; 1337c <__assert_fail@plt+0x17d8>
   128e4:	ldr	r2, [sp, #56]	; 0x38
   128e8:	str	r2, [r3]
   128ec:	mov	r3, #1
   128f0:	str	r3, [sp, #40]	; 0x28
   128f4:	b	12394 <__assert_fail@plt+0x7f0>
   128f8:	mov	r2, #5
   128fc:	ldr	r1, [pc, #2492]	; 132c0 <__assert_fail@plt+0x171c>
   12900:	mov	r0, #0
   12904:	bl	117d8 <dcgettext@plt>
   12908:	str	r0, [sp, #48]	; 0x30
   1290c:	ldr	r0, [r9]
   12910:	bl	1e300 <__assert_fail@plt+0xc75c>
   12914:	mov	r3, r0
   12918:	ldr	r2, [sp, #48]	; 0x30
   1291c:	mov	r1, #0
   12920:	mov	r0, r1
   12924:	bl	118bc <error@plt>
   12928:	mov	r3, #0
   1292c:	str	r3, [sp, #48]	; 0x30
   12930:	b	12394 <__assert_fail@plt+0x7f0>
   12934:	mov	r3, #0
   12938:	str	r3, [r6]
   1293c:	mov	r2, #1048576	; 0x100000
   12940:	mov	r3, #0
   12944:	strd	r2, [r6, #8]
   12948:	b	12394 <__assert_fail@plt+0x7f0>
   1294c:	mov	r3, #1
   12950:	strb	r3, [r6, #39]	; 0x27
   12954:	b	12394 <__assert_fail@plt+0x7f0>
   12958:	ldr	r3, [pc, #2404]	; 132c4 <__assert_fail@plt+0x1720>
   1295c:	str	r3, [sp]
   12960:	add	r3, r6, #40	; 0x28
   12964:	mov	r2, #0
   12968:	mov	r1, r2
   1296c:	ldr	r0, [r9]
   12970:	bl	2c954 <__assert_fail@plt+0x1adb0>
   12974:	cmp	r0, #0
   12978:	bne	129b8 <__assert_fail@plt+0xe14>
   1297c:	ldrd	r2, [r6, #40]	; 0x28
   12980:	orrs	r3, r2, r3
   12984:	bne	12394 <__assert_fail@plt+0x7f0>
   12988:	ldr	r3, [r9]
   1298c:	ldrb	r3, [r3]
   12990:	cmp	r3, #45	; 0x2d
   12994:	bne	12394 <__assert_fail@plt+0x7f0>
   12998:	mov	r2, #5
   1299c:	ldr	r1, [pc, #2340]	; 132c8 <__assert_fail@plt+0x1724>
   129a0:	mov	r0, #0
   129a4:	bl	117d8 <dcgettext@plt>
   129a8:	mov	r2, r0
   129ac:	mov	r1, #0
   129b0:	mov	r0, #1
   129b4:	bl	118bc <error@plt>
   129b8:	ldr	r3, [pc, #2296]	; 132b8 <__assert_fail@plt+0x1714>
   129bc:	ldr	r3, [r3]
   129c0:	str	r3, [sp]
   129c4:	ldr	r3, [pc, #2304]	; 132cc <__assert_fail@plt+0x1728>
   129c8:	mov	r2, #116	; 0x74
   129cc:	ldr	r1, [sp, #100]	; 0x64
   129d0:	bl	2cd98 <__assert_fail@plt+0x1b1f4>
   129d4:	ldr	r2, [sp, #36]	; 0x24
   129d8:	mov	r1, r6
   129dc:	ldr	r0, [r9]
   129e0:	bl	1af58 <__assert_fail@plt+0x93b4>
   129e4:	cmp	r0, #0
   129e8:	beq	12394 <__assert_fail@plt+0x7f0>
   129ec:	ldr	r3, [pc, #2244]	; 132b8 <__assert_fail@plt+0x1714>
   129f0:	ldr	r3, [r3]
   129f4:	str	r3, [sp]
   129f8:	ldr	r3, [pc, #2252]	; 132cc <__assert_fail@plt+0x1728>
   129fc:	mov	r2, #66	; 0x42
   12a00:	ldr	r1, [sp, #100]	; 0x64
   12a04:	bl	2cd98 <__assert_fail@plt+0x1b1f4>
   12a08:	mov	fp, #17
   12a0c:	b	12394 <__assert_fail@plt+0x7f0>
   12a10:	mov	fp, #2
   12a14:	b	12394 <__assert_fail@plt+0x7f0>
   12a18:	mov	fp, #16
   12a1c:	b	12394 <__assert_fail@plt+0x7f0>
   12a20:	mov	r3, #1
   12a24:	strb	r3, [r6, #48]	; 0x30
   12a28:	b	12394 <__assert_fail@plt+0x7f0>
   12a2c:	mov	r3, #10
   12a30:	str	r3, [sp]
   12a34:	mov	r3, #268435456	; 0x10000000
   12a38:	ldr	r2, [r9]
   12a3c:	ldr	r1, [r6, #32]
   12a40:	ldr	r0, [pc, #2184]	; 132d0 <__assert_fail@plt+0x172c>
   12a44:	bl	15474 <__assert_fail@plt+0x38d0>
   12a48:	cmp	r0, #0
   12a4c:	beq	12394 <__assert_fail@plt+0x7f0>
   12a50:	bl	119b8 <__errno_location@plt>
   12a54:	ldr	r3, [r0]
   12a58:	str	r3, [sp, #48]	; 0x30
   12a5c:	ldr	r2, [r9]
   12a60:	mov	r1, #3
   12a64:	mov	r0, #0
   12a68:	bl	1e198 <__assert_fail@plt+0xc5f4>
   12a6c:	mov	r3, r0
   12a70:	ldr	r2, [pc, #2300]	; 13374 <__assert_fail@plt+0x17d0>
   12a74:	ldr	r1, [sp, #48]	; 0x30
   12a78:	mov	r0, #0
   12a7c:	bl	118bc <error@plt>
   12a80:	mov	r3, #0
   12a84:	str	r3, [sp, #48]	; 0x30
   12a88:	b	12394 <__assert_fail@plt+0x7f0>
   12a8c:	ldr	r3, [r9]
   12a90:	str	r3, [sp, #52]	; 0x34
   12a94:	b	12394 <__assert_fail@plt+0x7f0>
   12a98:	mov	r2, #268435456	; 0x10000000
   12a9c:	ldr	r1, [r9]
   12aa0:	ldr	r0, [r6, #32]
   12aa4:	bl	14f94 <__assert_fail@plt+0x33f0>
   12aa8:	b	12394 <__assert_fail@plt+0x7f0>
   12aac:	mov	r3, #1
   12ab0:	strb	r3, [r6, #16]
   12ab4:	b	12394 <__assert_fail@plt+0x7f0>
   12ab8:	mov	r3, #1
   12abc:	strb	r3, [r6, #17]
   12ac0:	ldr	r1, [r9]
   12ac4:	cmp	r1, #0
   12ac8:	moveq	r3, #0
   12acc:	beq	12b00 <__assert_fail@plt+0xf5c>
   12ad0:	str	r3, [sp, #8]
   12ad4:	ldr	r3, [pc, #2040]	; 132d4 <__assert_fail@plt+0x1730>
   12ad8:	ldr	r3, [r3]
   12adc:	str	r3, [sp, #4]
   12ae0:	mov	r3, #4
   12ae4:	str	r3, [sp]
   12ae8:	ldr	r3, [sp, #44]	; 0x2c
   12aec:	add	r2, r4, #492	; 0x1ec
   12af0:	ldr	r0, [pc, #2016]	; 132d8 <__assert_fail@plt+0x1734>
   12af4:	bl	1409c <__assert_fail@plt+0x24f8>
   12af8:	add	r0, r4, r0, lsl #2
   12afc:	ldr	r3, [r0, #472]	; 0x1d8
   12b00:	str	r3, [r6, #52]	; 0x34
   12b04:	ldr	r0, [pc, #2000]	; 132dc <__assert_fail@plt+0x1738>
   12b08:	bl	118ec <getenv@plt>
   12b0c:	bl	2b6c0 <__assert_fail@plt+0x19b1c>
   12b10:	str	r0, [r6, #24]
   12b14:	b	12394 <__assert_fail@plt+0x7f0>
   12b18:	ldr	r3, [r9]
   12b1c:	str	r3, [r6, #56]	; 0x38
   12b20:	b	12394 <__assert_fail@plt+0x7f0>
   12b24:	mov	r0, #0
   12b28:	bl	11eb4 <__assert_fail@plt+0x310>
   12b2c:	mov	r4, #0
   12b30:	str	r4, [sp, #16]
   12b34:	ldr	r3, [pc, #1956]	; 132e0 <__assert_fail@plt+0x173c>
   12b38:	str	r3, [sp, #12]
   12b3c:	ldr	r3, [pc, #1952]	; 132e4 <__assert_fail@plt+0x1740>
   12b40:	str	r3, [sp, #8]
   12b44:	ldr	r3, [pc, #1948]	; 132e8 <__assert_fail@plt+0x1744>
   12b48:	str	r3, [sp, #4]
   12b4c:	ldr	r3, [pc, #1944]	; 132ec <__assert_fail@plt+0x1748>
   12b50:	str	r3, [sp]
   12b54:	ldr	r3, [pc, #1940]	; 132f0 <__assert_fail@plt+0x174c>
   12b58:	ldr	r3, [r3]
   12b5c:	ldr	r2, [pc, #1936]	; 132f4 <__assert_fail@plt+0x1750>
   12b60:	ldr	r1, [pc, #1936]	; 132f8 <__assert_fail@plt+0x1754>
   12b64:	ldr	r0, [pc, #1936]	; 132fc <__assert_fail@plt+0x1758>
   12b68:	ldr	r0, [r0]
   12b6c:	bl	2c060 <__assert_fail@plt+0x1a4bc>
   12b70:	mov	r0, r4
   12b74:	bl	11970 <exit@plt>
   12b78:	mov	r3, #0
   12b7c:	str	r3, [sp, #48]	; 0x30
   12b80:	b	12394 <__assert_fail@plt+0x7f0>
   12b84:	mov	r3, #1
   12b88:	str	r3, [sp, #32]
   12b8c:	b	12394 <__assert_fail@plt+0x7f0>
   12b90:	ldr	r3, [sp, #48]	; 0x30
   12b94:	cmp	r3, #0
   12b98:	beq	12c08 <__assert_fail@plt+0x1064>
   12b9c:	ldr	r3, [pc, #1796]	; 132a8 <__assert_fail@plt+0x1704>
   12ba0:	ldrb	r3, [r3, #36]	; 0x24
   12ba4:	ldr	r2, [sp, #32]
   12ba8:	ands	r3, r2, r3
   12bac:	str	r3, [sp, #76]	; 0x4c
   12bb0:	bne	12c10 <__assert_fail@plt+0x106c>
   12bb4:	ldr	r3, [sp, #40]	; 0x28
   12bb8:	ldr	r2, [sp, #32]
   12bbc:	tst	r3, r2
   12bc0:	beq	12c68 <__assert_fail@plt+0x10c4>
   12bc4:	ldr	r3, [pc, #1968]	; 1337c <__assert_fail@plt+0x17d8>
   12bc8:	ldr	r3, [r3]
   12bcc:	cmp	r3, #0
   12bd0:	ldrne	r3, [pc, #1956]	; 1337c <__assert_fail@plt+0x17d8>
   12bd4:	ldrne	r4, [r3]
   12bd8:	beq	12c38 <__assert_fail@plt+0x1094>
   12bdc:	mov	r2, #5
   12be0:	ldr	r1, [pc, #1816]	; 13300 <__assert_fail@plt+0x175c>
   12be4:	mov	r0, #0
   12be8:	bl	117d8 <dcgettext@plt>
   12bec:	mov	r3, r4
   12bf0:	mov	r2, r0
   12bf4:	mov	r1, #0
   12bf8:	mov	r0, r1
   12bfc:	bl	118bc <error@plt>
   12c00:	mov	r0, #1
   12c04:	bl	11eb4 <__assert_fail@plt+0x310>
   12c08:	mov	r0, #1
   12c0c:	bl	11eb4 <__assert_fail@plt+0x310>
   12c10:	mov	r2, #5
   12c14:	ldr	r1, [pc, #1768]	; 13304 <__assert_fail@plt+0x1760>
   12c18:	mov	r0, #0
   12c1c:	bl	117d8 <dcgettext@plt>
   12c20:	mov	r2, r0
   12c24:	mov	r1, #0
   12c28:	mov	r0, r1
   12c2c:	bl	118bc <error@plt>
   12c30:	mov	r0, #1
   12c34:	bl	11eb4 <__assert_fail@plt+0x310>
   12c38:	mov	r2, #5
   12c3c:	ldr	r1, [pc, #1732]	; 13308 <__assert_fail@plt+0x1764>
   12c40:	mov	r0, #0
   12c44:	bl	117d8 <dcgettext@plt>
   12c48:	mov	r2, r0
   12c4c:	mov	r1, #0
   12c50:	mov	r0, r1
   12c54:	bl	118bc <error@plt>
   12c58:	ldr	r3, [pc, #1820]	; 1337c <__assert_fail@plt+0x17d8>
   12c5c:	ldr	r4, [r3]
   12c60:	cmp	r4, #0
   12c64:	bne	12bdc <__assert_fail@plt+0x1038>
   12c68:	ldr	r3, [sp, #32]
   12c6c:	cmp	r3, #0
   12c70:	movne	r2, #0
   12c74:	ldrne	r3, [pc, #1792]	; 1337c <__assert_fail@plt+0x17d8>
   12c78:	strne	r2, [r3]
   12c7c:	ldr	r3, [pc, #1572]	; 132a8 <__assert_fail@plt+0x1704>
   12c80:	ldrb	r3, [r3, #16]
   12c84:	cmp	r3, #0
   12c88:	beq	12cac <__assert_fail@plt+0x1108>
   12c8c:	ldr	r3, [pc, #1556]	; 132a8 <__assert_fail@plt+0x1704>
   12c90:	ldrb	r3, [r3, #37]	; 0x25
   12c94:	cmp	r3, #0
   12c98:	bne	12dbc <__assert_fail@plt+0x1218>
   12c9c:	mov	r0, #1
   12ca0:	mov	r1, #0
   12ca4:	ldr	r3, [pc, #1532]	; 132a8 <__assert_fail@plt+0x1704>
   12ca8:	strd	r0, [r3, #8]
   12cac:	ldr	r3, [pc, #1524]	; 132a8 <__assert_fail@plt+0x1704>
   12cb0:	ldrb	r3, [r3, #17]
   12cb4:	cmp	r3, #0
   12cb8:	beq	12cec <__assert_fail@plt+0x1148>
   12cbc:	ldr	r3, [pc, #1508]	; 132a8 <__assert_fail@plt+0x1704>
   12cc0:	ldr	r3, [r3, #56]	; 0x38
   12cc4:	cmp	r3, #0
   12cc8:	beq	12de0 <__assert_fail@plt+0x123c>
   12ccc:	ldr	r3, [pc, #1492]	; 132a8 <__assert_fail@plt+0x1704>
   12cd0:	ldr	r1, [r3, #56]	; 0x38
   12cd4:	ldrb	r3, [r1]
   12cd8:	cmp	r3, #43	; 0x2b
   12cdc:	bne	12e18 <__assert_fail@plt+0x1274>
   12ce0:	add	r1, r1, #1
   12ce4:	ldr	r3, [pc, #1468]	; 132a8 <__assert_fail@plt+0x1704>
   12ce8:	str	r1, [r3, #20]
   12cec:	ldr	r3, [sp, #52]	; 0x34
   12cf0:	cmp	r3, #0
   12cf4:	beq	12fa0 <__assert_fail@plt+0x13fc>
   12cf8:	ldr	r3, [pc, #1548]	; 1330c <__assert_fail@plt+0x1768>
   12cfc:	ldr	r3, [r3]
   12d00:	cmp	r7, r3
   12d04:	bgt	12ef8 <__assert_fail@plt+0x1354>
   12d08:	ldr	r1, [pc, #1688]	; 133a8 <__assert_fail@plt+0x1804>
   12d0c:	ldr	r4, [sp, #52]	; 0x34
   12d10:	mov	r0, r4
   12d14:	bl	1170c <strcmp@plt>
   12d18:	cmp	r0, #0
   12d1c:	beq	12d3c <__assert_fail@plt+0x1198>
   12d20:	ldr	r3, [pc, #1512]	; 13310 <__assert_fail@plt+0x176c>
   12d24:	ldr	r2, [r3]
   12d28:	ldr	r1, [pc, #1508]	; 13314 <__assert_fail@plt+0x1770>
   12d2c:	mov	r0, r4
   12d30:	bl	172ac <__assert_fail@plt+0x5708>
   12d34:	cmp	r0, #0
   12d38:	beq	12f64 <__assert_fail@plt+0x13c0>
   12d3c:	ldr	r3, [pc, #1484]	; 13310 <__assert_fail@plt+0x176c>
   12d40:	ldr	r0, [r3]
   12d44:	bl	14198 <__assert_fail@plt+0x25f4>
   12d48:	str	r0, [sp, #56]	; 0x38
   12d4c:	mov	r2, #1
   12d50:	ldr	r3, [pc, #1360]	; 132a8 <__assert_fail@plt+0x1704>
   12d54:	strb	r2, [r3, #60]	; 0x3c
   12d58:	ldr	r3, [sp, #56]	; 0x38
   12d5c:	cmp	r3, #0
   12d60:	beq	12fec <__assert_fail@plt+0x1448>
   12d64:	bl	1455c <__assert_fail@plt+0x29b8>
   12d68:	ldr	r3, [pc, #1336]	; 132a8 <__assert_fail@plt+0x1704>
   12d6c:	str	r0, [r3, #64]	; 0x40
   12d70:	cmp	r0, #0
   12d74:	beq	12ff0 <__assert_fail@plt+0x144c>
   12d78:	ldr	r3, [pc, #1320]	; 132a8 <__assert_fail@plt+0x1704>
   12d7c:	ldrb	r3, [r3, #39]	; 0x27
   12d80:	cmp	r3, #0
   12d84:	bne	12d98 <__assert_fail@plt+0x11f4>
   12d88:	ldr	r3, [pc, #1304]	; 132a8 <__assert_fail@plt+0x1704>
   12d8c:	ldrb	r3, [r3, #60]	; 0x3c
   12d90:	cmp	r3, #0
   12d94:	bne	12d9c <__assert_fail@plt+0x11f8>
   12d98:	orr	sl, sl, #256	; 0x100
   12d9c:	orr	r3, sl, fp
   12da0:	str	r3, [sp, #88]	; 0x58
   12da4:	ldr	r3, [sp, #48]	; 0x30
   12da8:	str	r3, [sp, #72]	; 0x48
   12dac:	ldr	sl, [pc, #1268]	; 132a8 <__assert_fail@plt+0x1704>
   12db0:	add	r3, sl, #68	; 0x44
   12db4:	str	r3, [sp, #92]	; 0x5c
   12db8:	b	13d50 <__assert_fail@plt+0x21ac>
   12dbc:	mov	r2, #5
   12dc0:	ldr	r1, [pc, #1360]	; 13318 <__assert_fail@plt+0x1774>
   12dc4:	mov	r0, #0
   12dc8:	bl	117d8 <dcgettext@plt>
   12dcc:	mov	r2, r0
   12dd0:	mov	r1, #0
   12dd4:	mov	r0, r1
   12dd8:	bl	118bc <error@plt>
   12ddc:	b	12c9c <__assert_fail@plt+0x10f8>
   12de0:	ldr	r0, [pc, #1332]	; 1331c <__assert_fail@plt+0x1778>
   12de4:	bl	118ec <getenv@plt>
   12de8:	mov	r4, r0
   12dec:	ldr	r3, [pc, #1204]	; 132a8 <__assert_fail@plt+0x1704>
   12df0:	str	r0, [r3, #56]	; 0x38
   12df4:	cmp	r0, #0
   12df8:	beq	12e0c <__assert_fail@plt+0x1268>
   12dfc:	ldr	r1, [pc, #1308]	; 13320 <__assert_fail@plt+0x177c>
   12e00:	bl	1170c <strcmp@plt>
   12e04:	cmp	r0, #0
   12e08:	bne	12e70 <__assert_fail@plt+0x12cc>
   12e0c:	ldr	r1, [pc, #1296]	; 13324 <__assert_fail@plt+0x1780>
   12e10:	ldr	r3, [pc, #1168]	; 132a8 <__assert_fail@plt+0x1704>
   12e14:	str	r1, [r3, #56]	; 0x38
   12e18:	ldr	r6, [pc, #1168]	; 132b0 <__assert_fail@plt+0x170c>
   12e1c:	mov	r3, #1
   12e20:	str	r3, [sp, #8]
   12e24:	ldr	r3, [pc, #1192]	; 132d4 <__assert_fail@plt+0x1730>
   12e28:	ldr	r3, [r3]
   12e2c:	str	r3, [sp, #4]
   12e30:	mov	r3, #4
   12e34:	str	r3, [sp]
   12e38:	add	r3, r6, #524	; 0x20c
   12e3c:	add	r2, r6, #536	; 0x218
   12e40:	ldr	r0, [pc, #1248]	; 13328 <__assert_fail@plt+0x1784>
   12e44:	bl	1409c <__assert_fail@plt+0x24f8>
   12e48:	add	r0, r6, r0, lsl #2
   12e4c:	ldr	r3, [r0, #524]	; 0x20c
   12e50:	cmp	r3, #1
   12e54:	beq	12ee8 <__assert_fail@plt+0x1344>
   12e58:	bcc	12ed8 <__assert_fail@plt+0x1334>
   12e5c:	cmp	r3, #2
   12e60:	ldreq	r2, [pc, #1220]	; 1332c <__assert_fail@plt+0x1788>
   12e64:	ldreq	r3, [pc, #1084]	; 132a8 <__assert_fail@plt+0x1704>
   12e68:	streq	r2, [r3, #20]
   12e6c:	b	12cec <__assert_fail@plt+0x1148>
   12e70:	ldrb	r3, [r4]
   12e74:	cmp	r3, #43	; 0x2b
   12e78:	ldrne	r6, [pc, #1064]	; 132a8 <__assert_fail@plt+0x1704>
   12e7c:	ldrne	r8, [pc, #1196]	; 13330 <__assert_fail@plt+0x178c>
   12e80:	movne	r9, #6
   12e84:	bne	12eb0 <__assert_fail@plt+0x130c>
   12e88:	mov	r1, #10
   12e8c:	mov	r0, r4
   12e90:	bl	11994 <strchr@plt>
   12e94:	cmp	r0, #0
   12e98:	beq	12ed0 <__assert_fail@plt+0x132c>
   12e9c:	mov	r3, #0
   12ea0:	strb	r3, [r0]
   12ea4:	b	12ccc <__assert_fail@plt+0x1128>
   12ea8:	add	r4, r4, #6
   12eac:	str	r4, [r6, #56]	; 0x38
   12eb0:	ldr	r4, [r6, #56]	; 0x38
   12eb4:	mov	r2, r9
   12eb8:	mov	r1, r8
   12ebc:	mov	r0, r4
   12ec0:	bl	11b5c <strncmp@plt>
   12ec4:	cmp	r0, #0
   12ec8:	beq	12ea8 <__assert_fail@plt+0x1304>
   12ecc:	b	12ccc <__assert_fail@plt+0x1128>
   12ed0:	mov	r1, r4
   12ed4:	b	12ce0 <__assert_fail@plt+0x113c>
   12ed8:	ldr	r2, [pc, #1108]	; 13334 <__assert_fail@plt+0x1790>
   12edc:	ldr	r3, [pc, #964]	; 132a8 <__assert_fail@plt+0x1704>
   12ee0:	str	r2, [r3, #20]
   12ee4:	b	12cec <__assert_fail@plt+0x1148>
   12ee8:	ldr	r2, [pc, #1096]	; 13338 <__assert_fail@plt+0x1794>
   12eec:	ldr	r3, [pc, #948]	; 132a8 <__assert_fail@plt+0x1704>
   12ef0:	str	r2, [r3, #20]
   12ef4:	b	12cec <__assert_fail@plt+0x1148>
   12ef8:	mov	r2, #5
   12efc:	ldr	r1, [pc, #1080]	; 1333c <__assert_fail@plt+0x1798>
   12f00:	mov	r0, #0
   12f04:	bl	117d8 <dcgettext@plt>
   12f08:	mov	r4, r0
   12f0c:	ldr	r3, [pc, #1016]	; 1330c <__assert_fail@plt+0x1768>
   12f10:	ldr	r3, [r3]
   12f14:	ldr	r0, [r5, r3, lsl #2]
   12f18:	bl	1e300 <__assert_fail@plt+0xc75c>
   12f1c:	mov	r3, r0
   12f20:	mov	r2, r4
   12f24:	mov	r1, #0
   12f28:	mov	r0, r1
   12f2c:	bl	118bc <error@plt>
   12f30:	ldr	r3, [pc, #1032]	; 13340 <__assert_fail@plt+0x179c>
   12f34:	ldr	r4, [r3]
   12f38:	mov	r2, #5
   12f3c:	ldr	r1, [pc, #1024]	; 13344 <__assert_fail@plt+0x17a0>
   12f40:	mov	r0, #0
   12f44:	bl	117d8 <dcgettext@plt>
   12f48:	mov	r3, r0
   12f4c:	ldr	r2, [pc, #1012]	; 13348 <__assert_fail@plt+0x17a4>
   12f50:	mov	r1, #1
   12f54:	mov	r0, r4
   12f58:	bl	11a18 <__fprintf_chk@plt>
   12f5c:	mov	r0, #1
   12f60:	bl	11eb4 <__assert_fail@plt+0x310>
   12f64:	bl	119b8 <__errno_location@plt>
   12f68:	ldr	r4, [r0]
   12f6c:	mov	r2, #5
   12f70:	ldr	r1, [pc, #980]	; 1334c <__assert_fail@plt+0x17a8>
   12f74:	mov	r0, #0
   12f78:	bl	117d8 <dcgettext@plt>
   12f7c:	mov	r5, r0
   12f80:	ldr	r1, [sp, #52]	; 0x34
   12f84:	mov	r0, #4
   12f88:	bl	1e0cc <__assert_fail@plt+0xc528>
   12f8c:	mov	r3, r0
   12f90:	mov	r2, r5
   12f94:	mov	r1, r4
   12f98:	mov	r0, #1
   12f9c:	bl	118bc <error@plt>
   12fa0:	ldr	r3, [pc, #868]	; 1330c <__assert_fail@plt+0x1768>
   12fa4:	ldr	r0, [r3]
   12fa8:	cmp	r7, r0
   12fac:	addgt	r0, r5, r0, lsl #2
   12fb0:	addle	r0, sp, #208	; 0xd0
   12fb4:	bl	14170 <__assert_fail@plt+0x25cc>
   12fb8:	str	r0, [sp, #56]	; 0x38
   12fbc:	ldr	r3, [pc, #840]	; 1330c <__assert_fail@plt+0x1768>
   12fc0:	ldr	r2, [r3]
   12fc4:	add	r2, r2, #1
   12fc8:	cmp	fp, #2
   12fcc:	movne	r3, #0
   12fd0:	moveq	r3, #1
   12fd4:	cmp	r7, r2
   12fd8:	movle	r7, r3
   12fdc:	orrgt	r7, r3, #1
   12fe0:	ldr	r3, [pc, #704]	; 132a8 <__assert_fail@plt+0x1704>
   12fe4:	strb	r7, [r3, #60]	; 0x3c
   12fe8:	b	12d58 <__assert_fail@plt+0x11b4>
   12fec:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   12ff0:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   12ff4:	ldr	r3, [sp, #100]	; 0x64
   12ff8:	cmp	r3, #3
   12ffc:	beq	130e0 <__assert_fail@plt+0x153c>
   13000:	cmp	r3, #4
   13004:	beq	13024 <__assert_fail@plt+0x1480>
   13008:	cmp	r3, #2
   1300c:	beq	1306c <__assert_fail@plt+0x14c8>
   13010:	ldr	r3, [pc, #824]	; 13350 <__assert_fail@plt+0x17ac>
   13014:	ldr	r2, [pc, #824]	; 13354 <__assert_fail@plt+0x17b0>
   13018:	ldr	r1, [pc, #876]	; 1338c <__assert_fail@plt+0x17e8>
   1301c:	ldr	r0, [pc, #820]	; 13358 <__assert_fail@plt+0x17b4>
   13020:	bl	11ba4 <__assert_fail@plt>
   13024:	bl	119b8 <__errno_location@plt>
   13028:	ldr	r4, [r0]
   1302c:	mov	r2, #5
   13030:	ldr	r1, [pc, #804]	; 1335c <__assert_fail@plt+0x17b8>
   13034:	mov	r0, #0
   13038:	bl	117d8 <dcgettext@plt>
   1303c:	mov	r5, r0
   13040:	ldr	r2, [sp, #52]	; 0x34
   13044:	mov	r1, #3
   13048:	mov	r0, #0
   1304c:	bl	1e198 <__assert_fail@plt+0xc5f4>
   13050:	mov	r3, r0
   13054:	mov	r2, r5
   13058:	mov	r1, r4
   1305c:	mov	r0, #0
   13060:	bl	118bc <error@plt>
   13064:	ldr	r3, [sp, #76]	; 0x4c
   13068:	str	r3, [sp, #72]	; 0x48
   1306c:	ldr	r0, [sp, #56]	; 0x38
   13070:	bl	14288 <__assert_fail@plt+0x26e4>
   13074:	ldr	r4, [pc, #556]	; 132a8 <__assert_fail@plt+0x1704>
   13078:	ldr	r0, [r4, #64]	; 0x40
   1307c:	bl	145d0 <__assert_fail@plt+0x2a2c>
   13080:	ldr	r0, [r4, #80]	; 0x50
   13084:	cmp	r0, #0
   13088:	beq	13090 <__assert_fail@plt+0x14ec>
   1308c:	bl	145d0 <__assert_fail@plt+0x2a2c>
   13090:	ldr	r3, [sp, #52]	; 0x34
   13094:	cmp	r3, #0
   13098:	beq	130bc <__assert_fail@plt+0x1518>
   1309c:	ldr	r3, [pc, #620]	; 13310 <__assert_fail@plt+0x176c>
   130a0:	ldr	r0, [r3]
   130a4:	ldr	r3, [r0]
   130a8:	tst	r3, #32
   130ac:	beq	13bd8 <__assert_fail@plt+0x2034>
   130b0:	ldr	r3, [sp, #72]	; 0x48
   130b4:	cmp	r3, #0
   130b8:	bne	13be8 <__assert_fail@plt+0x2044>
   130bc:	ldr	r3, [pc, #484]	; 132a8 <__assert_fail@plt+0x1704>
   130c0:	ldrb	r3, [r3, #38]	; 0x26
   130c4:	cmp	r3, #0
   130c8:	bne	13c1c <__assert_fail@plt+0x2078>
   130cc:	ldr	r3, [sp, #72]	; 0x48
   130d0:	eor	r0, r3, #1
   130d4:	uxtb	r0, r0
   130d8:	add	sp, sp, #220	; 0xdc
   130dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   130e0:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   130e4:	mov	r2, #5
   130e8:	ldr	r1, [pc, #688]	; 133a0 <__assert_fail@plt+0x17fc>
   130ec:	mov	r0, #0
   130f0:	bl	117d8 <dcgettext@plt>
   130f4:	mov	r3, r0
   130f8:	ldr	r2, [pc, #628]	; 13374 <__assert_fail@plt+0x17d0>
   130fc:	mov	r1, #0
   13100:	mov	r0, r1
   13104:	bl	118bc <error@plt>
   13108:	b	13d48 <__assert_fail@plt+0x21a4>
   1310c:	mov	r9, fp
   13110:	bl	119b8 <__errno_location@plt>
   13114:	mov	r4, r0
   13118:	ldr	r5, [r0]
   1311c:	cmp	r5, #0
   13120:	bne	13150 <__assert_fail@plt+0x15ac>
   13124:	mov	r3, #0
   13128:	str	r3, [sl, #76]	; 0x4c
   1312c:	ldr	r0, [sp, #44]	; 0x2c
   13130:	bl	18d50 <__assert_fail@plt+0x71ac>
   13134:	cmp	r0, #0
   13138:	bne	13bac <__assert_fail@plt+0x2008>
   1313c:	ldr	r8, [sp, #72]	; 0x48
   13140:	and	r8, r8, r9
   13144:	uxtb	r3, r8
   13148:	str	r3, [sp, #72]	; 0x48
   1314c:	b	13d50 <__assert_fail@plt+0x21ac>
   13150:	mov	r2, #5
   13154:	ldr	r1, [pc, #516]	; 13360 <__assert_fail@plt+0x17bc>
   13158:	mov	r0, #0
   1315c:	bl	117d8 <dcgettext@plt>
   13160:	mov	r6, r0
   13164:	ldr	r3, [sp, #44]	; 0x2c
   13168:	ldr	r2, [r3, #24]
   1316c:	mov	r1, #3
   13170:	mov	r0, #0
   13174:	bl	1e198 <__assert_fail@plt+0xc5f4>
   13178:	mov	r3, r0
   1317c:	mov	r2, r6
   13180:	mov	r1, r5
   13184:	mov	r0, #0
   13188:	bl	118bc <error@plt>
   1318c:	ldr	r9, [sp, #76]	; 0x4c
   13190:	b	13124 <__assert_fail@plt+0x1580>
   13194:	ldr	r5, [r4, #32]
   13198:	mov	r2, #5
   1319c:	ldr	r1, [pc, #448]	; 13364 <__assert_fail@plt+0x17c0>
   131a0:	mov	r0, #0
   131a4:	bl	117d8 <dcgettext@plt>
   131a8:	mov	r7, r0
   131ac:	ldr	r1, [sp, #40]	; 0x28
   131b0:	mov	r0, #4
   131b4:	bl	1e0cc <__assert_fail@plt+0xc528>
   131b8:	mov	r3, r0
   131bc:	mov	r2, r7
   131c0:	mov	r1, r5
   131c4:	mov	r0, #0
   131c8:	bl	118bc <error@plt>
   131cc:	ldr	r3, [sp, #76]	; 0x4c
   131d0:	str	r3, [sp, #36]	; 0x24
   131d4:	b	13510 <__assert_fail@plt+0x196c>
   131d8:	mov	r2, #1
   131dc:	mov	r1, r4
   131e0:	ldr	r5, [sp, #44]	; 0x2c
   131e4:	mov	r0, r5
   131e8:	bl	19524 <__assert_fail@plt+0x7980>
   131ec:	mov	r0, r5
   131f0:	bl	18eb4 <__assert_fail@plt+0x7310>
   131f4:	cmp	r4, r0
   131f8:	ldrheq	r6, [r4, #56]	; 0x38
   131fc:	beq	1383c <__assert_fail@plt+0x1c98>
   13200:	ldr	r3, [pc, #376]	; 13380 <__assert_fail@plt+0x17dc>
   13204:	ldr	r2, [pc, #348]	; 13368 <__assert_fail@plt+0x17c4>
   13208:	ldr	r1, [pc, #380]	; 1338c <__assert_fail@plt+0x17e8>
   1320c:	ldr	r0, [pc, #344]	; 1336c <__assert_fail@plt+0x17c8>
   13210:	bl	11ba4 <__assert_fail@plt>
   13214:	ldr	r4, [r4, #32]
   13218:	mov	r2, #5
   1321c:	ldr	r1, [pc, #332]	; 13370 <__assert_fail@plt+0x17cc>
   13220:	mov	r0, #0
   13224:	bl	117d8 <dcgettext@plt>
   13228:	mov	r5, r0
   1322c:	ldr	r1, [sp, #40]	; 0x28
   13230:	mov	r0, #4
   13234:	bl	1e0cc <__assert_fail@plt+0xc528>
   13238:	mov	r3, r0
   1323c:	mov	r2, r5
   13240:	mov	r1, r4
   13244:	mov	r0, #0
   13248:	bl	118bc <error@plt>
   1324c:	b	137e4 <__assert_fail@plt+0x1c40>
   13250:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   13254:	mov	r2, #4
   13258:	mov	r1, r4
   1325c:	ldr	r5, [sp, #44]	; 0x2c
   13260:	mov	r0, r5
   13264:	bl	19524 <__assert_fail@plt+0x7980>
   13268:	mov	r0, r5
   1326c:	bl	18eb4 <__assert_fail@plt+0x7310>
   13270:	cmp	r4, r0
   13274:	ldreq	r3, [sp, #48]	; 0x30
   13278:	streq	r3, [sp, #36]	; 0x24
   1327c:	beq	137e4 <__assert_fail@plt+0x1c40>
   13280:	ldr	r3, [pc, #248]	; 13380 <__assert_fail@plt+0x17dc>
   13284:	mov	r2, #560	; 0x230
   13288:	ldr	r1, [pc, #252]	; 1338c <__assert_fail@plt+0x17e8>
   1328c:	ldr	r0, [pc, #216]	; 1336c <__assert_fail@plt+0x17c8>
   13290:	bl	11ba4 <__assert_fail@plt>
   13294:	ldrdeq	pc, [r2], -ip
   13298:	andeq	r0, r3, ip, lsl #15
   1329c:	andeq	pc, r2, r8, lsr #30
   132a0:	andeq	pc, r2, r0, ror #31
   132a4:	ldrdeq	r4, [r1], -r0
   132a8:	andeq	r2, r4, r8, asr #4
   132ac:	strdeq	pc, [r2], -r8
   132b0:	andeq	lr, r2, r8, lsl lr
   132b4:	andeq	r0, r3, r8
   132b8:	andeq	r2, r4, r0, asr #4
   132bc:	andeq	r0, r0, sl, lsl #2
   132c0:	andeq	r0, r3, r0, lsr #32
   132c4:	andeq	r0, r3, ip, lsr r0
   132c8:	andeq	r0, r3, r8, asr #32
   132cc:	andeq	lr, r2, r0, asr lr
   132d0:	muleq	r1, r4, pc	; <UNPREDICTABLE>
   132d4:	ldrdeq	r2, [r4], -r4
   132d8:	andeq	r0, r3, ip, rrx
   132dc:	andeq	r0, r3, r4, ror r0
   132e0:	andeq	r0, r3, r8, ror r0
   132e4:	andeq	r0, r3, r8, lsl #1
   132e8:	muleq	r3, r4, r0
   132ec:	andeq	r0, r3, r4, lsr #1
   132f0:	ldrdeq	r2, [r4], -r0
   132f4:	andeq	pc, r2, r4, lsr #30
   132f8:	andeq	pc, r2, r4, lsl #1
   132fc:	andeq	r2, r4, ip, lsr r2
   13300:	andeq	r0, r3, ip, lsl r1
   13304:	strheq	r0, [r3], -r8
   13308:	andeq	r0, r3, r4, ror #1
   1330c:	andeq	r2, r4, r8, lsr #4
   13310:	andeq	r2, r4, r8, lsr r2
   13314:	andeq	r0, r3, r8, ror #24
   13318:	andeq	r0, r3, r0, asr r1
   1331c:	muleq	r3, r8, r1
   13320:	andeq	r0, r3, r4, lsr #3
   13324:	ldrdeq	pc, [r2], -r0
   13328:	andeq	r0, r3, ip, lsr #3
   1332c:	andeq	r0, r3, r0, ror #3
   13330:	andeq	pc, r2, ip, lsl r0	; <UNPREDICTABLE>
   13334:			; <UNDEFINED> instruction: 0x000301b8
   13338:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1333c:	andeq	r0, r3, ip, ror #3
   13340:	andeq	r2, r4, r0, lsr r2
   13344:	andeq	r0, r3, r0, lsl #4
   13348:	andeq	r0, r3, ip, asr #25
   1334c:	andeq	r0, r3, r8, lsr r2
   13350:	andeq	pc, r2, r0, asr #32
   13354:	andeq	r0, r0, r9, lsr r4
   13358:	andeq	r0, r3, r0, ror r2
   1335c:	andeq	r0, r3, r4, asr r2
   13360:	andeq	r0, r3, r4, lsl #6
   13364:	andeq	r0, r3, r8, lsl r3
   13368:	andeq	r0, r0, pc, lsl #4
   1336c:	andeq	r0, r3, r4, lsr r3
   13370:	andeq	r0, r3, r0, asr #6
   13374:	andeq	r0, r3, r4, lsl #13
   13378:	muleq	r3, ip, r3
   1337c:	andeq	r2, r4, ip, asr #3
   13380:	andeq	pc, r2, r8, asr #32
   13384:	andeq	r0, r0, lr, ror r2
   13388:	andeq	r0, r3, r4, asr r3
   1338c:	andeq	r0, r3, r4, ror #4
   13390:	andeq	r0, r3, ip, ror #6
   13394:	andeq	r0, r3, r0, lsl #7
   13398:	muleq	r3, r4, r3
   1339c:	andeq	r2, r4, r8, lsr #5
   133a0:	ldrdeq	r0, [r3], -r8
   133a4:	strdeq	r0, [r3], -r8
   133a8:	andeq	r0, r3, r4, lsr r2
   133ac:	muleq	r3, r8, r2
   133b0:	ldr	r5, [r4, #32]
   133b4:	ldr	r2, [sp, #40]	; 0x28
   133b8:	mov	r1, #3
   133bc:	mov	r0, #0
   133c0:	bl	1e198 <__assert_fail@plt+0xc5f4>
   133c4:	mov	r3, r0
   133c8:	ldr	r2, [pc, #-92]	; 13374 <__assert_fail@plt+0x17d0>
   133cc:	mov	r1, r5
   133d0:	mov	r0, #0
   133d4:	bl	118bc <error@plt>
   133d8:	str	r7, [sp, #36]	; 0x24
   133dc:	b	13510 <__assert_fail@plt+0x196c>
   133e0:	mov	r1, r4
   133e4:	ldr	r0, [sp, #44]	; 0x2c
   133e8:	bl	2c758 <__assert_fail@plt+0x1abb4>
   133ec:	subs	r3, r0, #0
   133f0:	str	r3, [sp, #36]	; 0x24
   133f4:	ldreq	r3, [sp, #48]	; 0x30
   133f8:	streq	r3, [sp, #36]	; 0x24
   133fc:	beq	137e4 <__assert_fail@plt+0x1c40>
   13400:	ldr	r5, [r4]
   13404:	ldr	r3, [sl, #80]	; 0x50
   13408:	cmp	r3, #0
   1340c:	beq	13484 <__assert_fail@plt+0x18e0>
   13410:	cmp	r4, r5
   13414:	beq	13444 <__assert_fail@plt+0x18a0>
   13418:	ldrd	r2, [r4, #64]	; 0x40
   1341c:	ldrd	r0, [r4, #160]	; 0xa0
   13420:	strd	r0, [sp]
   13424:	ldr	r0, [sl, #80]	; 0x50
   13428:	bl	14650 <__assert_fail@plt+0x2aac>
   1342c:	cmp	r0, #0
   13430:	bgt	137e4 <__assert_fail@plt+0x1c40>
   13434:	ldr	r4, [r4, #4]
   13438:	cmp	r4, #0
   1343c:	cmpne	r5, r4
   13440:	bne	13418 <__assert_fail@plt+0x1874>
   13444:	mov	r2, #5
   13448:	ldr	r1, [pc, #-216]	; 13378 <__assert_fail@plt+0x17d4>
   1344c:	mov	r0, #0
   13450:	bl	117d8 <dcgettext@plt>
   13454:	mov	r4, r0
   13458:	ldr	r2, [sp, #40]	; 0x28
   1345c:	mov	r1, #3
   13460:	mov	r0, #0
   13464:	bl	1e198 <__assert_fail@plt+0xc5f4>
   13468:	mov	r3, r0
   1346c:	mov	r2, r4
   13470:	mov	r1, #0
   13474:	mov	r0, r1
   13478:	bl	118bc <error@plt>
   1347c:	str	r7, [sp, #36]	; 0x24
   13480:	b	137e4 <__assert_fail@plt+0x1c40>
   13484:	bl	1455c <__assert_fail@plt+0x29b8>
   13488:	str	r0, [sl, #80]	; 0x50
   1348c:	cmp	r0, #0
   13490:	beq	134a8 <__assert_fail@plt+0x1904>
   13494:	mov	r0, #0
   13498:	bl	1bd30 <__assert_fail@plt+0xa18c>
   1349c:	mov	r8, r0
   134a0:	mov	r9, #3
   134a4:	b	134bc <__assert_fail@plt+0x1918>
   134a8:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   134ac:	ldr	r6, [r8, #28]
   134b0:	mov	r0, r8
   134b4:	bl	1bcec <__assert_fail@plt+0xa148>
   134b8:	mov	r8, r6
   134bc:	cmp	r8, #0
   134c0:	beq	13410 <__assert_fail@plt+0x186c>
   134c4:	ldrb	r3, [r8, #24]
   134c8:	tst	r3, #3
   134cc:	bne	134ac <__assert_fail@plt+0x1908>
   134d0:	add	r2, sp, #104	; 0x68
   134d4:	ldr	r1, [r8, #4]
   134d8:	mov	r0, r9
   134dc:	bl	11b38 <__xstat64@plt>
   134e0:	cmp	r0, #0
   134e4:	bne	134ac <__assert_fail@plt+0x1908>
   134e8:	ldrd	r2, [sp, #200]	; 0xc8
   134ec:	strd	r2, [sp]
   134f0:	ldrd	r2, [sp, #104]	; 0x68
   134f4:	ldr	r0, [sl, #80]	; 0x50
   134f8:	bl	14604 <__assert_fail@plt+0x2a60>
   134fc:	cmp	r0, #0
   13500:	bge	134ac <__assert_fail@plt+0x1908>
   13504:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   13508:	ldr	r3, [sp, #48]	; 0x30
   1350c:	str	r3, [sp, #36]	; 0x24
   13510:	ldrb	r3, [sl, #37]	; 0x25
   13514:	cmp	r3, #0
   13518:	beq	1353c <__assert_fail@plt+0x1998>
   1351c:	ldrd	r2, [r4, #112]	; 0x70
   13520:	strd	r2, [sp, #24]
   13524:	cmp	r2, #0
   13528:	sbcs	r3, r3, #0
   1352c:	movlt	r2, #0
   13530:	movlt	r3, #0
   13534:	strdlt	r2, [sp, #24]
   13538:	b	13558 <__assert_fail@plt+0x19b4>
   1353c:	ldr	r3, [r4, #128]	; 0x80
   13540:	ldr	r2, [r4, #132]	; 0x84
   13544:	lsl	r2, r2, #9
   13548:	orr	r2, r2, r3, lsr #23
   1354c:	str	r2, [sp, #28]
   13550:	lsl	r3, r3, #9
   13554:	str	r3, [sp, #24]
   13558:	ldr	r3, [sl, #52]	; 0x34
   1355c:	cmp	r3, #0
   13560:	bne	13620 <__assert_fail@plt+0x1a7c>
   13564:	ldr	r8, [r4, #144]	; 0x90
   13568:	ldr	r9, [r4, #148]	; 0x94
   1356c:	ldr	r3, [r4, #48]	; 0x30
   13570:	str	r3, [sp, #32]
   13574:	ldrd	r2, [sp, #24]
   13578:	strd	r2, [sp, #104]	; 0x68
   1357c:	mov	r2, #1
   13580:	mov	r3, #0
   13584:	strd	r2, [sp, #112]	; 0x70
   13588:	str	r8, [sp, #120]	; 0x78
   1358c:	str	r9, [sp, #124]	; 0x7c
   13590:	ldr	r3, [sl, #84]	; 0x54
   13594:	cmp	r3, #0
   13598:	beq	13638 <__assert_fail@plt+0x1a94>
   1359c:	ldr	r7, [sl, #76]	; 0x4c
   135a0:	ldr	r2, [sp, #32]
   135a4:	cmp	r2, r7
   135a8:	beq	13650 <__assert_fail@plt+0x1aac>
   135ac:	bls	138b8 <__assert_fail@plt+0x1d14>
   135b0:	cmp	r2, r3
   135b4:	bcs	13894 <__assert_fail@plt+0x1cf0>
   135b8:	ldr	r3, [sl, #76]	; 0x4c
   135bc:	add	r2, r3, #1
   135c0:	ldr	r4, [sp, #32]
   135c4:	cmp	r4, r2
   135c8:	bcc	13650 <__assert_fail@plt+0x1aac>
   135cc:	add	r1, r3, r3, lsl #1
   135d0:	ldr	r3, [sl, #88]	; 0x58
   135d4:	add	r3, r3, r1, lsl #4
   135d8:	mov	r0, #0
   135dc:	mov	r1, #0
   135e0:	mov	lr, #-2147483648	; 0x80000000
   135e4:	mvn	ip, #0
   135e8:	strd	r0, [r3, #48]	; 0x30
   135ec:	strd	r0, [r3, #56]	; 0x38
   135f0:	str	lr, [r3, #64]	; 0x40
   135f4:	str	ip, [r3, #68]	; 0x44
   135f8:	strd	r0, [r3, #72]	; 0x48
   135fc:	strd	r0, [r3, #80]	; 0x50
   13600:	str	lr, [r3, #88]	; 0x58
   13604:	str	ip, [r3, #92]	; 0x5c
   13608:	add	r2, r2, #1
   1360c:	add	r3, r3, #48	; 0x30
   13610:	cmp	r4, r2
   13614:	bcs	135e8 <__assert_fail@plt+0x1a44>
   13618:	str	r4, [sp, #32]
   1361c:	b	13650 <__assert_fail@plt+0x1aac>
   13620:	cmp	r3, #2
   13624:	ldreq	r8, [r4, #136]	; 0x88
   13628:	ldreq	r9, [r4, #140]	; 0x8c
   1362c:	ldrne	r8, [r4, #152]	; 0x98
   13630:	ldrne	r9, [r4, #156]	; 0x9c
   13634:	b	1356c <__assert_fail@plt+0x19c8>
   13638:	ldr	r3, [sp, #32]
   1363c:	add	r0, r3, #10
   13640:	str	r0, [sl, #84]	; 0x54
   13644:	mov	r1, #48	; 0x30
   13648:	bl	2c5f8 <__assert_fail@plt+0x1aa54>
   1364c:	str	r0, [sl, #88]	; 0x58
   13650:	ldr	r3, [sp, #32]
   13654:	str	r3, [sl, #76]	; 0x4c
   13658:	ldrb	r3, [sl, #48]	; 0x30
   1365c:	cmp	r3, #0
   13660:	beq	13670 <__assert_fail@plt+0x1acc>
   13664:	bic	r3, r6, #2
   13668:	cmp	r3, #4
   1366c:	beq	136fc <__assert_fail@plt+0x1b58>
   13670:	ldr	r3, [sp, #32]
   13674:	add	lr, r3, r3, lsl #1
   13678:	lsl	lr, lr, #4
   1367c:	ldr	r5, [sl, #88]	; 0x58
   13680:	add	ip, r5, lr
   13684:	ldrd	r0, [r5, lr]
   13688:	ldrd	r2, [sp, #24]
   1368c:	adds	r2, r2, r0
   13690:	adc	r3, r3, r1
   13694:	cmp	r1, r3
   13698:	cmpeq	r0, r2
   1369c:	mvnhi	r2, #0
   136a0:	mvnhi	r3, #0
   136a4:	strd	r2, [r5, lr]
   136a8:	ldrd	r2, [ip, #8]
   136ac:	adds	r0, r2, #1
   136b0:	adc	r1, r3, #0
   136b4:	strd	r0, [ip, #8]
   136b8:	ldr	r2, [ip, #16]
   136bc:	ldr	r3, [ip, #20]
   136c0:	cmp	r8, r2
   136c4:	movlt	r2, #1
   136c8:	movge	r2, #0
   136cc:	movgt	r1, #1
   136d0:	movle	r1, #0
   136d4:	sub	r2, r2, r1
   136d8:	cmp	r9, r3
   136dc:	movlt	r3, #1
   136e0:	movge	r3, #0
   136e4:	movgt	r1, #1
   136e8:	movle	r1, #0
   136ec:	sub	r3, r3, r1
   136f0:	adds	r3, r3, r2, lsl #1
   136f4:	strmi	r8, [ip, #16]
   136f8:	strmi	r9, [ip, #20]
   136fc:	ldrd	r0, [sl, #96]	; 0x60
   13700:	ldrd	r2, [sp, #24]
   13704:	adds	r2, r2, r0
   13708:	adc	r3, r3, r1
   1370c:	cmp	r1, r3
   13710:	cmpeq	r0, r2
   13714:	mvnhi	r2, #0
   13718:	mvnhi	r3, #0
   1371c:	strd	r2, [sl, #96]	; 0x60
   13720:	ldrd	r2, [sl, #104]	; 0x68
   13724:	adds	r0, r2, #1
   13728:	adc	r1, r3, #0
   1372c:	strd	r0, [sl, #104]	; 0x68
   13730:	ldr	r2, [sl, #112]	; 0x70
   13734:	ldr	r3, [sl, #116]	; 0x74
   13738:	cmp	r8, r2
   1373c:	movlt	r2, #1
   13740:	movge	r2, #0
   13744:	movgt	r1, #1
   13748:	movle	r1, #0
   1374c:	sub	r2, r2, r1
   13750:	cmp	r9, r3
   13754:	movlt	r3, #1
   13758:	movge	r3, #0
   1375c:	movgt	r1, #1
   13760:	movle	r1, #0
   13764:	sub	r3, r3, r1
   13768:	adds	r3, r3, r2, lsl #1
   1376c:	strmi	r8, [sl, #112]	; 0x70
   13770:	strmi	r9, [sl, #116]	; 0x74
   13774:	bic	r6, r6, #2
   13778:	cmp	r6, #4
   1377c:	beq	1378c <__assert_fail@plt+0x1be8>
   13780:	ldrb	r3, [sl, #36]	; 0x24
   13784:	cmp	r3, #0
   13788:	beq	137a0 <__assert_fail@plt+0x1bfc>
   1378c:	ldr	r3, [pc, #-1048]	; 1337c <__assert_fail@plt+0x17d8>
   13790:	ldr	r3, [r3]
   13794:	ldr	r2, [sp, #32]
   13798:	cmp	r2, r3
   1379c:	bls	137ac <__assert_fail@plt+0x1c08>
   137a0:	ldr	r3, [sp, #32]
   137a4:	cmp	r3, #0
   137a8:	bne	137e4 <__assert_fail@plt+0x1c40>
   137ac:	ldrb	r3, [sl, #16]
   137b0:	cmp	r3, #0
   137b4:	beq	13b78 <__assert_fail@plt+0x1fd4>
   137b8:	ldrd	r0, [sp, #112]	; 0x70
   137bc:	ldrd	r4, [sl, #40]	; 0x28
   137c0:	cmp	r4, #0
   137c4:	sbcs	r3, r5, #0
   137c8:	blt	13b80 <__assert_fail@plt+0x1fdc>
   137cc:	cmp	r1, r5
   137d0:	cmpeq	r0, r4
   137d4:	movcs	r3, #1
   137d8:	movcc	r3, #0
   137dc:	cmp	r3, #0
   137e0:	bne	13b9c <__assert_fail@plt+0x1ff8>
   137e4:	ldr	r3, [sp, #36]	; 0x24
   137e8:	and	fp, fp, r3
   137ec:	uxtb	fp, fp
   137f0:	ldr	r0, [sp, #44]	; 0x2c
   137f4:	bl	18eb4 <__assert_fail@plt+0x7310>
   137f8:	subs	r4, r0, #0
   137fc:	beq	1310c <__assert_fail@plt+0x1568>
   13800:	ldr	r3, [r4, #28]
   13804:	str	r3, [sp, #40]	; 0x28
   13808:	ldrh	r6, [r4, #56]	; 0x38
   1380c:	cmp	r6, #4
   13810:	beq	13194 <__assert_fail@plt+0x15f0>
   13814:	cmp	r6, #6
   13818:	beq	13508 <__assert_fail@plt+0x1964>
   1381c:	ldr	r1, [sp, #40]	; 0x28
   13820:	ldr	r0, [sl, #32]
   13824:	bl	14dfc <__assert_fail@plt+0x3258>
   13828:	subs	r3, r0, #0
   1382c:	str	r3, [sp, #36]	; 0x24
   13830:	bne	13880 <__assert_fail@plt+0x1cdc>
   13834:	cmp	r6, #11
   13838:	beq	131d8 <__assert_fail@plt+0x1634>
   1383c:	cmp	r6, #13
   13840:	cmpne	r6, #10
   13844:	moveq	r7, #1
   13848:	movne	r7, #0
   1384c:	beq	13214 <__assert_fail@plt+0x1670>
   13850:	ldr	r2, [sp, #44]	; 0x2c
   13854:	ldr	r3, [r2, #48]	; 0x30
   13858:	tst	r3, #64	; 0x40
   1385c:	beq	13c6c <__assert_fail@plt+0x20c8>
   13860:	ldr	r3, [r4, #48]	; 0x30
   13864:	cmp	r3, #0
   13868:	ble	13c6c <__assert_fail@plt+0x20c8>
   1386c:	ldrd	r0, [r2, #16]
   13870:	ldrd	r2, [r4, #64]	; 0x40
   13874:	cmp	r1, r3
   13878:	cmpeq	r0, r2
   1387c:	beq	13c6c <__assert_fail@plt+0x20c8>
   13880:	cmp	r6, #1
   13884:	beq	13254 <__assert_fail@plt+0x16b0>
   13888:	ldr	r3, [sp, #48]	; 0x30
   1388c:	str	r3, [sp, #36]	; 0x24
   13890:	b	137e4 <__assert_fail@plt+0x1c40>
   13894:	mov	r2, #96	; 0x60
   13898:	ldr	r4, [sp, #32]
   1389c:	mov	r1, r4
   138a0:	ldr	r0, [sl, #88]	; 0x58
   138a4:	bl	2c1b0 <__assert_fail@plt+0x1a60c>
   138a8:	str	r0, [sl, #88]	; 0x58
   138ac:	lsl	r3, r4, #1
   138b0:	str	r3, [sl, #84]	; 0x54
   138b4:	b	135b8 <__assert_fail@plt+0x1a14>
   138b8:	sub	r3, r7, #1
   138bc:	ldr	r2, [sp, #32]
   138c0:	cmp	r2, r3
   138c4:	bne	13ac0 <__assert_fail@plt+0x1f1c>
   138c8:	ldr	r5, [sl, #88]	; 0x58
   138cc:	add	r7, r7, r7, lsl #1
   138d0:	lsl	r7, r7, #4
   138d4:	add	lr, r5, r7
   138d8:	ldrd	r2, [r5, r7]
   138dc:	ldrd	r0, [sp, #24]
   138e0:	adds	r0, r0, r2
   138e4:	adc	r1, r1, r3
   138e8:	strd	r0, [sp, #64]	; 0x40
   138ec:	ldrd	r2, [sp, #24]
   138f0:	cmp	r3, r1
   138f4:	cmpeq	r2, r0
   138f8:	mvnhi	r2, #0
   138fc:	mvnhi	r3, #0
   13900:	strdhi	r2, [sp, #64]	; 0x40
   13904:	ldrd	r2, [sp, #64]	; 0x40
   13908:	strd	r2, [sp, #104]	; 0x68
   1390c:	ldrd	r2, [lr, #8]
   13910:	adds	r0, r2, #1
   13914:	adc	r1, r3, #0
   13918:	strd	r0, [sp, #80]	; 0x50
   1391c:	strd	r0, [sp, #112]	; 0x70
   13920:	ldr	r3, [lr, #16]
   13924:	ldr	r1, [lr, #20]
   13928:	cmp	r8, r3
   1392c:	movgt	r2, #1
   13930:	movle	r2, #0
   13934:	movlt	r3, #1
   13938:	movge	r3, #0
   1393c:	sub	r2, r2, r3
   13940:	cmp	r9, r1
   13944:	movgt	r3, #1
   13948:	movle	r3, #0
   1394c:	movlt	r1, #1
   13950:	movge	r1, #0
   13954:	sub	r3, r3, r1
   13958:	adds	r3, r3, r2, lsl #1
   1395c:	addmi	r3, lr, #16
   13960:	ldmmi	r3, {r0, r1}
   13964:	addmi	r3, sp, #120	; 0x78
   13968:	stmmi	r3, {r0, r1}
   1396c:	ldrb	r3, [sl, #48]	; 0x30
   13970:	cmp	r3, #0
   13974:	beq	13ad4 <__assert_fail@plt+0x1f30>
   13978:	ldr	r3, [sp, #32]
   1397c:	add	ip, r3, r3, lsl #1
   13980:	add	ip, r5, ip, lsl #4
   13984:	ldrd	r0, [ip, #24]
   13988:	ldrd	r2, [r5, r7]
   1398c:	adds	r4, r0, r2
   13990:	adc	r5, r1, r3
   13994:	strd	r4, [sp, #64]	; 0x40
   13998:	cmp	r1, r5
   1399c:	cmpeq	r0, r4
   139a0:	mvnhi	r2, #0
   139a4:	mvnhi	r3, #0
   139a8:	strdhi	r2, [sp, #64]	; 0x40
   139ac:	ldrd	r2, [sp, #64]	; 0x40
   139b0:	strd	r2, [ip, #24]
   139b4:	ldrd	r0, [ip, #32]
   139b8:	ldrd	r2, [lr, #8]
   139bc:	adds	r4, r0, r2
   139c0:	adc	r5, r1, r3
   139c4:	strd	r4, [sp, #80]	; 0x50
   139c8:	strd	r4, [ip, #32]
   139cc:	ldr	r2, [ip, #40]	; 0x28
   139d0:	ldr	r1, [ip, #44]	; 0x2c
   139d4:	ldr	r3, [lr, #16]
   139d8:	ldr	r0, [lr, #20]
   139dc:	cmp	r2, r3
   139e0:	movgt	r2, #1
   139e4:	movle	r2, #0
   139e8:	movlt	r3, #1
   139ec:	movge	r3, #0
   139f0:	sub	r2, r2, r3
   139f4:	cmp	r1, r0
   139f8:	movgt	r1, #1
   139fc:	movle	r1, #0
   13a00:	movlt	r3, #1
   13a04:	movge	r3, #0
   13a08:	sub	r3, r1, r3
   13a0c:	adds	r3, r3, r2, lsl #1
   13a10:	addmi	r3, ip, #40	; 0x28
   13a14:	addmi	r2, lr, #16
   13a18:	ldmmi	r2, {r0, r1}
   13a1c:	stmmi	r3, {r0, r1}
   13a20:	ldrd	r2, [lr, #24]
   13a24:	ldrd	r4, [sp, #64]	; 0x40
   13a28:	adds	r0, r4, r2
   13a2c:	adc	r1, r5, r3
   13a30:	mov	r2, r0
   13a34:	mov	r3, r1
   13a38:	cmp	r3, r5
   13a3c:	cmpeq	r2, r4
   13a40:	mvncc	r2, #0
   13a44:	mvncc	r3, #0
   13a48:	strd	r2, [ip, #24]
   13a4c:	ldrd	r2, [lr, #32]
   13a50:	ldrd	r0, [sp, #80]	; 0x50
   13a54:	adds	r0, r0, r2
   13a58:	adc	r1, r1, r3
   13a5c:	mov	r2, r0
   13a60:	mov	r3, r1
   13a64:	strd	r2, [ip, #32]
   13a68:	ldr	r0, [ip, #40]	; 0x28
   13a6c:	ldr	r1, [ip, #44]	; 0x2c
   13a70:	ldr	r2, [lr, #40]	; 0x28
   13a74:	ldr	r3, [lr, #44]	; 0x2c
   13a78:	cmp	r0, r2
   13a7c:	movgt	r0, #1
   13a80:	movle	r0, #0
   13a84:	movlt	r2, #1
   13a88:	movge	r2, #0
   13a8c:	sub	r2, r0, r2
   13a90:	cmp	r1, r3
   13a94:	movgt	r3, #1
   13a98:	movle	r3, #0
   13a9c:	movlt	r1, #1
   13aa0:	movge	r1, #0
   13aa4:	sub	r3, r3, r1
   13aa8:	adds	r3, r3, r2, lsl #1
   13aac:	addmi	ip, ip, #40	; 0x28
   13ab0:	addmi	lr, lr, #40	; 0x28
   13ab4:	ldmmi	lr, {r0, r1}
   13ab8:	stmmi	ip, {r0, r1}
   13abc:	b	13650 <__assert_fail@plt+0x1aac>
   13ac0:	ldr	r3, [pc, #-1864]	; 13380 <__assert_fail@plt+0x17dc>
   13ac4:	ldr	r2, [pc, #-1864]	; 13384 <__assert_fail@plt+0x17e0>
   13ac8:	ldr	r1, [pc, #-1860]	; 1338c <__assert_fail@plt+0x17e8>
   13acc:	ldr	r0, [pc, #-1868]	; 13388 <__assert_fail@plt+0x17e4>
   13ad0:	bl	11ba4 <__assert_fail@plt>
   13ad4:	ldrd	r2, [lr, #24]
   13ad8:	ldrd	r0, [sp, #64]	; 0x40
   13adc:	adds	r0, r0, r2
   13ae0:	adc	r1, r1, r3
   13ae4:	mov	r2, r0
   13ae8:	mov	r3, r1
   13aec:	ldrd	r0, [sp, #64]	; 0x40
   13af0:	cmp	r1, r3
   13af4:	cmpeq	r0, r2
   13af8:	mvnhi	r2, #0
   13afc:	mvnhi	r3, #0
   13b00:	strd	r2, [sp, #104]	; 0x68
   13b04:	ldrd	r2, [lr, #32]
   13b08:	ldrd	r0, [sp, #80]	; 0x50
   13b0c:	adds	r0, r0, r2
   13b10:	adc	r1, r1, r3
   13b14:	mov	r2, r0
   13b18:	mov	r3, r1
   13b1c:	strd	r2, [sp, #112]	; 0x70
   13b20:	ldr	r2, [lr, #40]	; 0x28
   13b24:	ldr	r3, [lr, #44]	; 0x2c
   13b28:	ldr	r1, [sp, #120]	; 0x78
   13b2c:	cmp	r1, r2
   13b30:	movgt	r1, #1
   13b34:	movle	r1, #0
   13b38:	movlt	r2, #1
   13b3c:	movge	r2, #0
   13b40:	sub	r2, r1, r2
   13b44:	ldr	r1, [sp, #124]	; 0x7c
   13b48:	cmp	r1, r3
   13b4c:	movgt	r3, #1
   13b50:	movle	r3, #0
   13b54:	movlt	r1, #1
   13b58:	movge	r1, #0
   13b5c:	sub	r3, r3, r1
   13b60:	adds	r3, r3, r2, lsl #1
   13b64:	addmi	r3, lr, #40	; 0x28
   13b68:	ldmmi	r3, {r0, r1}
   13b6c:	addmi	r3, sp, #120	; 0x78
   13b70:	stmmi	r3, {r0, r1}
   13b74:	b	13978 <__assert_fail@plt+0x1dd4>
   13b78:	ldrd	r0, [sp, #104]	; 0x68
   13b7c:	b	137bc <__assert_fail@plt+0x1c18>
   13b80:	rsbs	r2, r4, #0
   13b84:	rsc	r3, r5, #0
   13b88:	cmp	r3, r1
   13b8c:	cmpeq	r2, r0
   13b90:	movcs	r3, #1
   13b94:	movcc	r3, #0
   13b98:	b	137dc <__assert_fail@plt+0x1c38>
   13b9c:	ldr	r1, [sp, #40]	; 0x28
   13ba0:	add	r0, sp, #104	; 0x68
   13ba4:	bl	11d4c <__assert_fail@plt+0x1a8>
   13ba8:	b	137e4 <__assert_fail@plt+0x1c40>
   13bac:	ldr	r4, [r4]
   13bb0:	mov	r2, #5
   13bb4:	ldr	r1, [pc, #-2092]	; 13390 <__assert_fail@plt+0x17ec>
   13bb8:	mov	r0, #0
   13bbc:	bl	117d8 <dcgettext@plt>
   13bc0:	mov	r2, r0
   13bc4:	mov	r1, r4
   13bc8:	mov	r0, #0
   13bcc:	bl	118bc <error@plt>
   13bd0:	ldr	r9, [sp, #76]	; 0x4c
   13bd4:	b	1313c <__assert_fail@plt+0x1598>
   13bd8:	bl	15554 <__assert_fail@plt+0x39b0>
   13bdc:	cmp	r0, #0
   13be0:	beq	130bc <__assert_fail@plt+0x1518>
   13be4:	b	130b0 <__assert_fail@plt+0x150c>
   13be8:	mov	r2, #5
   13bec:	ldr	r1, [pc, #-2144]	; 13394 <__assert_fail@plt+0x17f0>
   13bf0:	mov	r0, #0
   13bf4:	bl	117d8 <dcgettext@plt>
   13bf8:	mov	r4, r0
   13bfc:	ldr	r1, [sp, #52]	; 0x34
   13c00:	mov	r0, #4
   13c04:	bl	1e0cc <__assert_fail@plt+0xc528>
   13c08:	mov	r3, r0
   13c0c:	mov	r2, r4
   13c10:	mov	r1, #0
   13c14:	mov	r0, #1
   13c18:	bl	118bc <error@plt>
   13c1c:	mov	r2, #5
   13c20:	ldr	r1, [pc, #-2192]	; 13398 <__assert_fail@plt+0x17f4>
   13c24:	mov	r0, #0
   13c28:	bl	117d8 <dcgettext@plt>
   13c2c:	mov	r1, r0
   13c30:	ldr	r0, [pc, #-2204]	; 1339c <__assert_fail@plt+0x17f8>
   13c34:	bl	11d4c <__assert_fail@plt+0x1a8>
   13c38:	b	130cc <__assert_fail@plt+0x1528>
   13c3c:	ldrb	r3, [r4]
   13c40:	cmp	r3, #0
   13c44:	beq	130e4 <__assert_fail@plt+0x1540>
   13c48:	str	r4, [sl, #68]	; 0x44
   13c4c:	mov	r2, #0
   13c50:	ldr	r1, [sp, #88]	; 0x58
   13c54:	ldr	r0, [sp, #92]	; 0x5c
   13c58:	bl	2c710 <__assert_fail@plt+0x1ab6c>
   13c5c:	str	r0, [sp, #44]	; 0x2c
   13c60:	ldr	r9, [sp, #48]	; 0x30
   13c64:	mov	fp, r9
   13c68:	b	137f0 <__assert_fail@plt+0x1c4c>
   13c6c:	ldrb	r3, [sl, #39]	; 0x27
   13c70:	cmp	r3, #0
   13c74:	bne	13cc4 <__assert_fail@plt+0x2120>
   13c78:	ldrb	r3, [sl, #60]	; 0x3c
   13c7c:	cmp	r3, #0
   13c80:	bne	13ca0 <__assert_fail@plt+0x20fc>
   13c84:	ldr	r3, [r4, #80]	; 0x50
   13c88:	and	r3, r3, #61440	; 0xf000
   13c8c:	cmp	r3, #16384	; 0x4000
   13c90:	beq	13cc4 <__assert_fail@plt+0x2120>
   13c94:	ldr	r3, [r4, #84]	; 0x54
   13c98:	cmp	r3, #1
   13c9c:	bls	13cc4 <__assert_fail@plt+0x2120>
   13ca0:	ldrd	r2, [r4, #64]	; 0x40
   13ca4:	ldrd	r0, [r4, #160]	; 0xa0
   13ca8:	strd	r0, [sp]
   13cac:	ldr	r0, [sl, #64]	; 0x40
   13cb0:	bl	14604 <__assert_fail@plt+0x2a60>
   13cb4:	cmp	r0, #0
   13cb8:	blt	13250 <__assert_fail@plt+0x16ac>
   13cbc:	cmp	r0, #0
   13cc0:	beq	13880 <__assert_fail@plt+0x1cdc>
   13cc4:	cmp	r6, #2
   13cc8:	beq	133e0 <__assert_fail@plt+0x183c>
   13ccc:	cmp	r6, #7
   13cd0:	beq	133b0 <__assert_fail@plt+0x180c>
   13cd4:	cmp	r6, #1
   13cd8:	ldrne	r3, [sp, #48]	; 0x30
   13cdc:	strne	r3, [sp, #36]	; 0x24
   13ce0:	bne	13510 <__assert_fail@plt+0x196c>
   13ce4:	ldr	r3, [sp, #48]	; 0x30
   13ce8:	str	r3, [sp, #36]	; 0x24
   13cec:	b	137e4 <__assert_fail@plt+0x1c40>
   13cf0:	ldrb	r3, [r4]
   13cf4:	cmp	r3, #0
   13cf8:	bne	13c48 <__assert_fail@plt+0x20a4>
   13cfc:	ldr	r0, [sp, #56]	; 0x38
   13d00:	bl	14268 <__assert_fail@plt+0x26c4>
   13d04:	mov	r5, r0
   13d08:	ldr	r2, [sp, #52]	; 0x34
   13d0c:	mov	r1, #3
   13d10:	mov	r0, #0
   13d14:	bl	1e198 <__assert_fail@plt+0xc5f4>
   13d18:	mov	r4, r0
   13d1c:	mov	r2, #5
   13d20:	ldr	r1, [pc, #-2440]	; 133a0 <__assert_fail@plt+0x17fc>
   13d24:	mov	r0, #0
   13d28:	bl	117d8 <dcgettext@plt>
   13d2c:	str	r0, [sp, #4]
   13d30:	str	r5, [sp]
   13d34:	mov	r3, r4
   13d38:	ldr	r2, [pc, #-2460]	; 133a4 <__assert_fail@plt+0x1800>
   13d3c:	mov	r1, #0
   13d40:	mov	r0, r1
   13d44:	bl	118bc <error@plt>
   13d48:	ldr	r3, [sp, #76]	; 0x4c
   13d4c:	str	r3, [sp, #72]	; 0x48
   13d50:	add	r1, sp, #100	; 0x64
   13d54:	ldr	r0, [sp, #56]	; 0x38
   13d58:	bl	141cc <__assert_fail@plt+0x2628>
   13d5c:	subs	r4, r0, #0
   13d60:	beq	12ff4 <__assert_fail@plt+0x1450>
   13d64:	ldr	r3, [sp, #52]	; 0x34
   13d68:	cmp	r3, #0
   13d6c:	beq	13c3c <__assert_fail@plt+0x2098>
   13d70:	ldr	r1, [pc, #-2512]	; 133a8 <__assert_fail@plt+0x1804>
   13d74:	mov	r0, r3
   13d78:	bl	1170c <strcmp@plt>
   13d7c:	cmp	r0, #0
   13d80:	bne	13cf0 <__assert_fail@plt+0x214c>
   13d84:	ldr	r1, [pc, #-2532]	; 133a8 <__assert_fail@plt+0x1804>
   13d88:	mov	r0, r4
   13d8c:	bl	1170c <strcmp@plt>
   13d90:	cmp	r0, #0
   13d94:	bne	13cf0 <__assert_fail@plt+0x214c>
   13d98:	mov	r2, #5
   13d9c:	ldr	r1, [pc, #-2552]	; 133ac <__assert_fail@plt+0x1808>
   13da0:	bl	117d8 <dcgettext@plt>
   13da4:	mov	r5, r0
   13da8:	mov	r1, r4
   13dac:	mov	r0, #4
   13db0:	bl	1e0cc <__assert_fail@plt+0xc528>
   13db4:	mov	r3, r0
   13db8:	mov	r2, r5
   13dbc:	mov	r1, #0
   13dc0:	mov	r0, r1
   13dc4:	bl	118bc <error@plt>
   13dc8:	ldrb	r3, [r4]
   13dcc:	cmp	r3, #0
   13dd0:	beq	13cfc <__assert_fail@plt+0x2158>
   13dd4:	ldr	r3, [sp, #76]	; 0x4c
   13dd8:	str	r3, [sp, #72]	; 0x48
   13ddc:	b	13d50 <__assert_fail@plt+0x21ac>
   13de0:	push	{r4, lr}
   13de4:	mov	r0, #1
   13de8:	bl	11eb4 <__assert_fail@plt+0x310>
   13dec:	pop	{r4, pc}
   13df0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13df4:	sub	sp, sp, #12
   13df8:	str	r0, [sp, #4]
   13dfc:	mov	r6, r1
   13e00:	mov	fp, r2
   13e04:	mov	r8, r3
   13e08:	bl	11988 <strlen@plt>
   13e0c:	str	r0, [sp]
   13e10:	ldr	r4, [r6]
   13e14:	cmp	r4, #0
   13e18:	beq	13ec0 <__assert_fail@plt+0x231c>
   13e1c:	mov	r5, fp
   13e20:	mov	sl, #0
   13e24:	mvn	r9, #0
   13e28:	mov	r7, sl
   13e2c:	b	13e4c <__assert_fail@plt+0x22a8>
   13e30:	mov	r9, r7
   13e34:	b	13eb4 <__assert_fail@plt+0x2310>
   13e38:	add	r7, r7, #1
   13e3c:	ldr	r4, [r6, #4]!
   13e40:	add	r5, r5, r8
   13e44:	cmp	r4, #0
   13e48:	beq	13eac <__assert_fail@plt+0x2308>
   13e4c:	ldr	r2, [sp]
   13e50:	ldr	r1, [sp, #4]
   13e54:	mov	r0, r4
   13e58:	bl	11b5c <strncmp@plt>
   13e5c:	cmp	r0, #0
   13e60:	bne	13e38 <__assert_fail@plt+0x2294>
   13e64:	mov	r0, r4
   13e68:	bl	11988 <strlen@plt>
   13e6c:	ldr	r3, [sp]
   13e70:	cmp	r3, r0
   13e74:	beq	13e30 <__assert_fail@plt+0x228c>
   13e78:	cmn	r9, #1
   13e7c:	moveq	r9, r7
   13e80:	beq	13e38 <__assert_fail@plt+0x2294>
   13e84:	cmp	fp, #0
   13e88:	moveq	sl, #1
   13e8c:	beq	13e38 <__assert_fail@plt+0x2294>
   13e90:	mov	r2, r8
   13e94:	mov	r1, r5
   13e98:	mla	r0, r8, r9, fp
   13e9c:	bl	117c0 <memcmp@plt>
   13ea0:	cmp	r0, #0
   13ea4:	movne	sl, #1
   13ea8:	b	13e38 <__assert_fail@plt+0x2294>
   13eac:	cmp	sl, #0
   13eb0:	mvnne	r9, #1
   13eb4:	mov	r0, r9
   13eb8:	add	sp, sp, #12
   13ebc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ec0:	mvn	r9, #0
   13ec4:	b	13eb4 <__assert_fail@plt+0x2310>
   13ec8:	push	{r4, r5, r6, lr}
   13ecc:	mov	r6, r0
   13ed0:	ldr	r0, [r1]
   13ed4:	cmp	r0, #0
   13ed8:	beq	13f14 <__assert_fail@plt+0x2370>
   13edc:	mov	r4, r1
   13ee0:	mov	r5, #0
   13ee4:	mov	r1, r6
   13ee8:	bl	1170c <strcmp@plt>
   13eec:	cmp	r0, #0
   13ef0:	beq	13f0c <__assert_fail@plt+0x2368>
   13ef4:	add	r5, r5, #1
   13ef8:	ldr	r0, [r4, #4]!
   13efc:	cmp	r0, #0
   13f00:	bne	13ee4 <__assert_fail@plt+0x2340>
   13f04:	mvn	r0, #0
   13f08:	pop	{r4, r5, r6, pc}
   13f0c:	mov	r0, r5
   13f10:	pop	{r4, r5, r6, pc}
   13f14:	mvn	r0, #0
   13f18:	pop	{r4, r5, r6, pc}
   13f1c:	push	{r4, r5, r6, lr}
   13f20:	sub	sp, sp, #8
   13f24:	mov	r5, r0
   13f28:	mov	r4, r1
   13f2c:	cmn	r2, #1
   13f30:	mov	r2, #5
   13f34:	ldreq	r1, [pc, #76]	; 13f88 <__assert_fail@plt+0x23e4>
   13f38:	ldrne	r1, [pc, #76]	; 13f8c <__assert_fail@plt+0x23e8>
   13f3c:	mov	r0, #0
   13f40:	bl	117d8 <dcgettext@plt>
   13f44:	mov	r6, r0
   13f48:	mov	r2, r4
   13f4c:	mov	r1, #8
   13f50:	mov	r0, #0
   13f54:	bl	1e060 <__assert_fail@plt+0xc4bc>
   13f58:	mov	r4, r0
   13f5c:	mov	r1, r5
   13f60:	mov	r0, #1
   13f64:	bl	1e2f0 <__assert_fail@plt+0xc74c>
   13f68:	str	r0, [sp]
   13f6c:	mov	r3, r4
   13f70:	mov	r2, r6
   13f74:	mov	r1, #0
   13f78:	mov	r0, r1
   13f7c:	bl	118bc <error@plt>
   13f80:	add	sp, sp, #8
   13f84:	pop	{r4, r5, r6, pc}
   13f88:	andeq	r0, r3, r0, lsl r6
   13f8c:	andeq	r0, r3, ip, lsr #12
   13f90:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f94:	mov	r7, r0
   13f98:	mov	r4, r1
   13f9c:	mov	r8, r2
   13fa0:	mov	r2, #5
   13fa4:	ldr	r1, [pc, #224]	; 1408c <__assert_fail@plt+0x24e8>
   13fa8:	mov	r0, #0
   13fac:	bl	117d8 <dcgettext@plt>
   13fb0:	ldr	r3, [pc, #216]	; 14090 <__assert_fail@plt+0x24ec>
   13fb4:	ldr	r1, [r3]
   13fb8:	bl	116b8 <fputs_unlocked@plt>
   13fbc:	ldr	r5, [r7]
   13fc0:	cmp	r5, #0
   13fc4:	beq	14054 <__assert_fail@plt+0x24b0>
   13fc8:	mov	r9, #0
   13fcc:	mov	r6, r9
   13fd0:	ldr	sl, [pc, #184]	; 14090 <__assert_fail@plt+0x24ec>
   13fd4:	b	14010 <__assert_fail@plt+0x246c>
   13fd8:	ldr	r9, [sl]
   13fdc:	mov	r0, r5
   13fe0:	bl	1e300 <__assert_fail@plt+0xc75c>
   13fe4:	mov	r3, r0
   13fe8:	ldr	r2, [pc, #164]	; 14094 <__assert_fail@plt+0x24f0>
   13fec:	mov	r1, #1
   13ff0:	mov	r0, r9
   13ff4:	bl	11a18 <__fprintf_chk@plt>
   13ff8:	mov	r9, r4
   13ffc:	add	r6, r6, #1
   14000:	ldr	r5, [r7, #4]!
   14004:	add	r4, r4, r8
   14008:	cmp	r5, #0
   1400c:	beq	14054 <__assert_fail@plt+0x24b0>
   14010:	cmp	r6, #0
   14014:	beq	13fd8 <__assert_fail@plt+0x2434>
   14018:	mov	r2, r8
   1401c:	mov	r1, r4
   14020:	mov	r0, r9
   14024:	bl	117c0 <memcmp@plt>
   14028:	cmp	r0, #0
   1402c:	bne	13fd8 <__assert_fail@plt+0x2434>
   14030:	ldr	fp, [sl]
   14034:	mov	r0, r5
   14038:	bl	1e300 <__assert_fail@plt+0xc75c>
   1403c:	mov	r3, r0
   14040:	ldr	r2, [pc, #80]	; 14098 <__assert_fail@plt+0x24f4>
   14044:	mov	r1, #1
   14048:	mov	r0, fp
   1404c:	bl	11a18 <__fprintf_chk@plt>
   14050:	b	13ffc <__assert_fail@plt+0x2458>
   14054:	ldr	r3, [pc, #52]	; 14090 <__assert_fail@plt+0x24ec>
   14058:	ldr	r0, [r3]
   1405c:	ldr	r3, [r0, #20]
   14060:	ldr	r2, [r0, #24]
   14064:	cmp	r3, r2
   14068:	bcs	14080 <__assert_fail@plt+0x24dc>
   1406c:	add	r2, r3, #1
   14070:	str	r2, [r0, #20]
   14074:	mov	r2, #10
   14078:	strb	r2, [r3]
   1407c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14080:	mov	r1, #10
   14084:	bl	11a60 <__overflow@plt>
   14088:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1408c:	andeq	r0, r3, ip, asr #12
   14090:	andeq	r2, r4, r0, lsr r2
   14094:	andeq	r0, r3, r4, ror #12
   14098:	andeq	r0, r3, ip, ror #12
   1409c:	push	{r4, r5, r6, r7, r8, lr}
   140a0:	mov	r7, r0
   140a4:	mov	r5, r1
   140a8:	mov	r4, r2
   140ac:	mov	r6, r3
   140b0:	ldrb	r3, [sp, #32]
   140b4:	cmp	r3, #0
   140b8:	beq	14108 <__assert_fail@plt+0x2564>
   140bc:	ldr	r3, [sp, #24]
   140c0:	mov	r2, r6
   140c4:	mov	r1, r4
   140c8:	mov	r0, r5
   140cc:	bl	13df0 <__assert_fail@plt+0x224c>
   140d0:	cmp	r0, #0
   140d4:	popge	{r4, r5, r6, r7, r8, pc}
   140d8:	mov	r2, r0
   140dc:	mov	r1, r5
   140e0:	mov	r0, r7
   140e4:	bl	13f1c <__assert_fail@plt+0x2378>
   140e8:	ldr	r2, [sp, #24]
   140ec:	mov	r1, r6
   140f0:	mov	r0, r4
   140f4:	bl	13f90 <__assert_fail@plt+0x23ec>
   140f8:	ldr	r3, [sp, #28]
   140fc:	blx	r3
   14100:	mvn	r0, #0
   14104:	pop	{r4, r5, r6, r7, r8, pc}
   14108:	mov	r1, r2
   1410c:	mov	r0, r5
   14110:	bl	13ec8 <__assert_fail@plt+0x2324>
   14114:	b	140d0 <__assert_fail@plt+0x252c>
   14118:	push	{r4, r5, r6, r7, r8, lr}
   1411c:	ldr	r6, [r1]
   14120:	cmp	r6, #0
   14124:	beq	14168 <__assert_fail@plt+0x25c4>
   14128:	mov	r7, r3
   1412c:	mov	r8, r0
   14130:	mov	r4, r2
   14134:	mov	r5, r1
   14138:	mov	r2, r7
   1413c:	mov	r1, r4
   14140:	mov	r0, r8
   14144:	bl	117c0 <memcmp@plt>
   14148:	cmp	r0, #0
   1414c:	beq	14160 <__assert_fail@plt+0x25bc>
   14150:	ldr	r6, [r5, #4]!
   14154:	add	r4, r4, r7
   14158:	cmp	r6, #0
   1415c:	bne	14138 <__assert_fail@plt+0x2594>
   14160:	mov	r0, r6
   14164:	pop	{r4, r5, r6, r7, r8, pc}
   14168:	mov	r6, #0
   1416c:	b	14160 <__assert_fail@plt+0x25bc>
   14170:	push	{r4, lr}
   14174:	mov	r4, r0
   14178:	mov	r0, #24
   1417c:	bl	2d404 <__assert_fail@plt+0x1b860>
   14180:	cmp	r0, #0
   14184:	movne	r3, #0
   14188:	strne	r3, [r0]
   1418c:	strne	r4, [r0, #16]
   14190:	strne	r4, [r0, #20]
   14194:	pop	{r4, pc}
   14198:	push	{r4, lr}
   1419c:	mov	r4, r0
   141a0:	mov	r0, #24
   141a4:	bl	2d404 <__assert_fail@plt+0x1b860>
   141a8:	cmp	r0, #0
   141ac:	popeq	{r4, pc}
   141b0:	str	r4, [r0]
   141b4:	mov	r3, #0
   141b8:	str	r3, [r0, #8]
   141bc:	str	r3, [r0, #12]
   141c0:	str	r3, [r0, #4]
   141c4:	str	r3, [r0, #16]
   141c8:	pop	{r4, pc}
   141cc:	push	{r4, r5, r6, lr}
   141d0:	mov	r4, r0
   141d4:	ldr	r3, [r0]
   141d8:	cmp	r3, #0
   141dc:	beq	14238 <__assert_fail@plt+0x2694>
   141e0:	mov	r5, r1
   141e4:	mov	r2, #0
   141e8:	add	r1, r0, #12
   141ec:	add	r0, r0, #8
   141f0:	bl	11b2c <getdelim@plt>
   141f4:	cmp	r0, #0
   141f8:	blt	14218 <__assert_fail@plt+0x2674>
   141fc:	mov	r3, #1
   14200:	str	r3, [r5]
   14204:	ldr	r3, [r4, #4]
   14208:	add	r3, r3, #1
   1420c:	str	r3, [r4, #4]
   14210:	ldr	r0, [r4, #8]
   14214:	pop	{r4, r5, r6, pc}
   14218:	ldr	r0, [r4]
   1421c:	bl	1197c <feof@plt>
   14220:	cmp	r0, #0
   14224:	movne	r3, #2
   14228:	moveq	r3, #4
   1422c:	str	r3, [r5]
   14230:	mov	r0, #0
   14234:	pop	{r4, r5, r6, pc}
   14238:	ldr	r3, [r0, #20]
   1423c:	ldr	r0, [r3]
   14240:	cmp	r0, #0
   14244:	moveq	r3, #2
   14248:	streq	r3, [r1]
   1424c:	movne	r3, #1
   14250:	strne	r3, [r1]
   14254:	ldrne	r3, [r4, #20]
   14258:	addne	r2, r3, #4
   1425c:	strne	r2, [r4, #20]
   14260:	ldrne	r0, [r3]
   14264:	pop	{r4, r5, r6, pc}
   14268:	ldr	r3, [r0]
   1426c:	cmp	r3, #0
   14270:	ldrne	r0, [r0, #4]
   14274:	ldreq	r3, [r0, #20]
   14278:	ldreq	r0, [r0, #16]
   1427c:	subeq	r0, r3, r0
   14280:	asreq	r0, r0, #2
   14284:	bx	lr
   14288:	push	{r4, lr}
   1428c:	mov	r4, r0
   14290:	ldr	r3, [r0]
   14294:	cmp	r3, #0
   14298:	beq	142a4 <__assert_fail@plt+0x2700>
   1429c:	ldr	r0, [r0, #8]
   142a0:	bl	17204 <__assert_fail@plt+0x5660>
   142a4:	mov	r0, r4
   142a8:	bl	17204 <__assert_fail@plt+0x5660>
   142ac:	pop	{r4, pc}
   142b0:	ldr	r3, [pc, #4]	; 142bc <__assert_fail@plt+0x2718>
   142b4:	str	r0, [r3]
   142b8:	bx	lr
   142bc:	andeq	r2, r4, r0, asr #5
   142c0:	ldr	r3, [pc, #4]	; 142cc <__assert_fail@plt+0x2728>
   142c4:	strb	r0, [r3, #4]
   142c8:	bx	lr
   142cc:	andeq	r2, r4, r0, asr #5
   142d0:	push	{r4, r5, r6, lr}
   142d4:	sub	sp, sp, #8
   142d8:	ldr	r3, [pc, #200]	; 143a8 <__assert_fail@plt+0x2804>
   142dc:	ldr	r0, [r3]
   142e0:	bl	2dc9c <__assert_fail@plt+0x1c0f8>
   142e4:	cmp	r0, #0
   142e8:	beq	1430c <__assert_fail@plt+0x2768>
   142ec:	ldr	r3, [pc, #184]	; 143ac <__assert_fail@plt+0x2808>
   142f0:	ldrb	r3, [r3, #4]
   142f4:	cmp	r3, #0
   142f8:	beq	14328 <__assert_fail@plt+0x2784>
   142fc:	bl	119b8 <__errno_location@plt>
   14300:	ldr	r3, [r0]
   14304:	cmp	r3, #32
   14308:	bne	14328 <__assert_fail@plt+0x2784>
   1430c:	ldr	r3, [pc, #156]	; 143b0 <__assert_fail@plt+0x280c>
   14310:	ldr	r0, [r3]
   14314:	bl	2dc9c <__assert_fail@plt+0x1c0f8>
   14318:	cmp	r0, #0
   1431c:	bne	1439c <__assert_fail@plt+0x27f8>
   14320:	add	sp, sp, #8
   14324:	pop	{r4, r5, r6, pc}
   14328:	mov	r2, #5
   1432c:	ldr	r1, [pc, #128]	; 143b4 <__assert_fail@plt+0x2810>
   14330:	mov	r0, #0
   14334:	bl	117d8 <dcgettext@plt>
   14338:	mov	r4, r0
   1433c:	ldr	r3, [pc, #104]	; 143ac <__assert_fail@plt+0x2808>
   14340:	ldr	r5, [r3]
   14344:	cmp	r5, #0
   14348:	beq	14380 <__assert_fail@plt+0x27dc>
   1434c:	bl	119b8 <__errno_location@plt>
   14350:	ldr	r6, [r0]
   14354:	mov	r0, r5
   14358:	bl	1e178 <__assert_fail@plt+0xc5d4>
   1435c:	str	r4, [sp]
   14360:	mov	r3, r0
   14364:	ldr	r2, [pc, #76]	; 143b8 <__assert_fail@plt+0x2814>
   14368:	mov	r1, r6
   1436c:	mov	r0, #0
   14370:	bl	118bc <error@plt>
   14374:	ldr	r3, [pc, #64]	; 143bc <__assert_fail@plt+0x2818>
   14378:	ldr	r0, [r3]
   1437c:	bl	11778 <_exit@plt>
   14380:	bl	119b8 <__errno_location@plt>
   14384:	mov	r3, r4
   14388:	ldr	r2, [pc, #48]	; 143c0 <__assert_fail@plt+0x281c>
   1438c:	ldr	r1, [r0]
   14390:	mov	r0, #0
   14394:	bl	118bc <error@plt>
   14398:	b	14374 <__assert_fail@plt+0x27d0>
   1439c:	ldr	r3, [pc, #24]	; 143bc <__assert_fail@plt+0x2818>
   143a0:	ldr	r0, [r3]
   143a4:	bl	11778 <_exit@plt>
   143a8:	andeq	r2, r4, ip, lsr r2
   143ac:	andeq	r2, r4, r0, asr #5
   143b0:	andeq	r2, r4, r0, lsr r2
   143b4:	andeq	r0, r3, r4, ror r6
   143b8:	andeq	r0, r3, r0, lsl #13
   143bc:	ldrdeq	r2, [r4], -r8
   143c0:	andeq	r0, r3, r4, lsl #13
   143c4:	push	{r4, lr}
   143c8:	ldr	r2, [r0]
   143cc:	ldr	r0, [r0, #4]
   143d0:	eor	r0, r0, r2
   143d4:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   143d8:	mov	r0, r1
   143dc:	pop	{r4, pc}
   143e0:	push	{r4, r5}
   143e4:	ldrd	r4, [r0]
   143e8:	ldrd	r2, [r1]
   143ec:	cmp	r5, r3
   143f0:	cmpeq	r4, r2
   143f4:	moveq	r0, #1
   143f8:	movne	r0, #0
   143fc:	pop	{r4, r5}
   14400:	bx	lr
   14404:	push	{r4, lr}
   14408:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   1440c:	mov	r0, r1
   14410:	pop	{r4, pc}
   14414:	push	{r4, lr}
   14418:	mov	r4, r0
   1441c:	ldr	r0, [r0, #8]
   14420:	bl	1a138 <__assert_fail@plt+0x8594>
   14424:	mov	r0, r4
   14428:	bl	17204 <__assert_fail@plt+0x5660>
   1442c:	pop	{r4, pc}
   14430:	push	{r4, r5, r6, r7, lr}
   14434:	sub	sp, sp, #12
   14438:	mov	r5, r0
   1443c:	mov	r6, r2
   14440:	mov	r7, r3
   14444:	ldr	r4, [r0, #8]
   14448:	cmp	r4, #0
   1444c:	beq	14498 <__assert_fail@plt+0x28f4>
   14450:	ldrd	r2, [r4]
   14454:	cmp	r3, r7
   14458:	cmpeq	r2, r6
   1445c:	ldreq	r0, [r4, #8]
   14460:	beq	14490 <__assert_fail@plt+0x28ec>
   14464:	strd	r6, [r4]
   14468:	mov	r1, r4
   1446c:	ldr	r0, [r5]
   14470:	bl	1a4f4 <__assert_fail@plt+0x8950>
   14474:	cmp	r0, #0
   14478:	beq	144dc <__assert_fail@plt+0x2938>
   1447c:	cmp	r4, r0
   14480:	beq	144b8 <__assert_fail@plt+0x2914>
   14484:	ldr	r3, [r0, #8]
   14488:	str	r3, [r4, #8]
   1448c:	ldr	r0, [r4, #8]
   14490:	add	sp, sp, #12
   14494:	pop	{r4, r5, r6, r7, pc}
   14498:	mov	r0, #16
   1449c:	bl	2d404 <__assert_fail@plt+0x1b860>
   144a0:	mov	r4, r0
   144a4:	str	r0, [r5, #8]
   144a8:	cmp	r0, #0
   144ac:	bne	14464 <__assert_fail@plt+0x28c0>
   144b0:	mov	r0, #0
   144b4:	b	14490 <__assert_fail@plt+0x28ec>
   144b8:	mov	r1, #0
   144bc:	str	r1, [r5, #8]
   144c0:	str	r1, [sp]
   144c4:	mov	r3, r1
   144c8:	ldr	r2, [pc, #20]	; 144e4 <__assert_fail@plt+0x2940>
   144cc:	ldr	r0, [pc, #20]	; 144e8 <__assert_fail@plt+0x2944>
   144d0:	bl	19fa8 <__assert_fail@plt+0x8404>
   144d4:	str	r0, [r4, #8]
   144d8:	b	1448c <__assert_fail@plt+0x28e8>
   144dc:	mov	r0, #0
   144e0:	b	14490 <__assert_fail@plt+0x28ec>
   144e4:	andeq	r4, r1, r4, lsl #8
   144e8:	strdeq	r0, [r0], -sp
   144ec:	push	{r4, r5, r6, r7, r8, lr}
   144f0:	subs	r6, r2, #1
   144f4:	sbc	r7, r3, #0
   144f8:	mvn	r4, #-2147483646	; 0x80000002
   144fc:	mov	r5, #0
   14500:	cmp	r7, r5
   14504:	cmpeq	r6, r4
   14508:	bls	14538 <__assert_fail@plt+0x2994>
   1450c:	mov	r4, r2
   14510:	mov	r5, r3
   14514:	mov	r6, r0
   14518:	ldr	r3, [r0, #4]
   1451c:	cmp	r3, #0
   14520:	beq	14540 <__assert_fail@plt+0x299c>
   14524:	mov	r2, r4
   14528:	mov	r3, r5
   1452c:	ldr	r0, [r6, #4]
   14530:	bl	1b28c <__assert_fail@plt+0x96e8>
   14534:	pop	{r4, r5, r6, r7, r8, pc}
   14538:	mov	r0, r2
   1453c:	pop	{r4, r5, r6, r7, r8, pc}
   14540:	mvn	r0, #-2147483648	; 0x80000000
   14544:	bl	1b1ec <__assert_fail@plt+0x9648>
   14548:	str	r0, [r6, #4]
   1454c:	cmp	r0, #0
   14550:	bne	14524 <__assert_fail@plt+0x2980>
   14554:	mvn	r0, #0
   14558:	pop	{r4, r5, r6, r7, r8, pc}
   1455c:	push	{r4, lr}
   14560:	sub	sp, sp, #8
   14564:	mov	r0, #12
   14568:	bl	2d404 <__assert_fail@plt+0x1b860>
   1456c:	subs	r4, r0, #0
   14570:	beq	145a8 <__assert_fail@plt+0x2a04>
   14574:	ldr	r3, [pc, #72]	; 145c4 <__assert_fail@plt+0x2a20>
   14578:	str	r3, [sp]
   1457c:	ldr	r3, [pc, #68]	; 145c8 <__assert_fail@plt+0x2a24>
   14580:	ldr	r2, [pc, #68]	; 145cc <__assert_fail@plt+0x2a28>
   14584:	mov	r1, #0
   14588:	mov	r0, #11
   1458c:	bl	19fa8 <__assert_fail@plt+0x8404>
   14590:	str	r0, [r4]
   14594:	cmp	r0, #0
   14598:	movne	r3, #0
   1459c:	strne	r3, [r4, #4]
   145a0:	strne	r3, [r4, #8]
   145a4:	beq	145b4 <__assert_fail@plt+0x2a10>
   145a8:	mov	r0, r4
   145ac:	add	sp, sp, #8
   145b0:	pop	{r4, pc}
   145b4:	mov	r0, r4
   145b8:	bl	17204 <__assert_fail@plt+0x5660>
   145bc:	mov	r4, #0
   145c0:	b	145a8 <__assert_fail@plt+0x2a04>
   145c4:	andeq	r4, r1, r4, lsl r4
   145c8:	andeq	r4, r1, r0, ror #7
   145cc:	andeq	r4, r1, r4, asr #7
   145d0:	push	{r4, lr}
   145d4:	mov	r4, r0
   145d8:	ldr	r0, [r0]
   145dc:	bl	1a138 <__assert_fail@plt+0x8594>
   145e0:	ldr	r0, [r4, #4]
   145e4:	cmp	r0, #0
   145e8:	beq	145f0 <__assert_fail@plt+0x2a4c>
   145ec:	bl	1b268 <__assert_fail@plt+0x96c4>
   145f0:	ldr	r0, [r4, #8]
   145f4:	bl	17204 <__assert_fail@plt+0x5660>
   145f8:	mov	r0, r4
   145fc:	bl	17204 <__assert_fail@plt+0x5660>
   14600:	pop	{r4, pc}
   14604:	push	{r4, r5, r6, lr}
   14608:	mov	r4, r0
   1460c:	bl	14430 <__assert_fail@plt+0x288c>
   14610:	subs	r5, r0, #0
   14614:	beq	14640 <__assert_fail@plt+0x2a9c>
   14618:	ldrd	r2, [sp, #16]
   1461c:	mov	r0, r4
   14620:	bl	144ec <__assert_fail@plt+0x2948>
   14624:	cmn	r0, #1
   14628:	beq	14648 <__assert_fail@plt+0x2aa4>
   1462c:	mov	r2, #0
   14630:	mov	r1, r0
   14634:	mov	r0, r5
   14638:	bl	1a358 <__assert_fail@plt+0x87b4>
   1463c:	pop	{r4, r5, r6, pc}
   14640:	mvn	r0, #0
   14644:	pop	{r4, r5, r6, pc}
   14648:	mvn	r0, #0
   1464c:	pop	{r4, r5, r6, pc}
   14650:	push	{r4, r5, r6, lr}
   14654:	mov	r4, r0
   14658:	bl	14430 <__assert_fail@plt+0x288c>
   1465c:	subs	r5, r0, #0
   14660:	beq	14690 <__assert_fail@plt+0x2aec>
   14664:	ldrd	r2, [sp, #16]
   14668:	mov	r0, r4
   1466c:	bl	144ec <__assert_fail@plt+0x2948>
   14670:	cmn	r0, #1
   14674:	beq	14698 <__assert_fail@plt+0x2af4>
   14678:	mov	r1, r0
   1467c:	mov	r0, r5
   14680:	bl	19cf0 <__assert_fail@plt+0x814c>
   14684:	adds	r0, r0, #0
   14688:	movne	r0, #1
   1468c:	pop	{r4, r5, r6, pc}
   14690:	mvn	r0, #0
   14694:	pop	{r4, r5, r6, pc}
   14698:	mvn	r0, #0
   1469c:	pop	{r4, r5, r6, pc}
   146a0:	push	{r4, lr}
   146a4:	ldr	r3, [r3]
   146a8:	blx	r3
   146ac:	pop	{r4, pc}
   146b0:	push	{r4, lr}
   146b4:	bl	17204 <__assert_fail@plt+0x5660>
   146b8:	pop	{r4, pc}
   146bc:	push	{r4, lr}
   146c0:	bl	1b4f4 <__assert_fail@plt+0x9950>
   146c4:	clz	r0, r0
   146c8:	lsr	r0, r0, #5
   146cc:	pop	{r4, pc}
   146d0:	push	{r4, lr}
   146d4:	bl	1170c <strcmp@plt>
   146d8:	clz	r0, r0
   146dc:	lsr	r0, r0, #5
   146e0:	pop	{r4, pc}
   146e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146e8:	mov	r6, r0
   146ec:	mov	r4, r1
   146f0:	tst	r2, #8
   146f4:	bne	1471c <__assert_fail@plt+0x2b78>
   146f8:	tst	r2, #16
   146fc:	beq	14710 <__assert_fail@plt+0x2b6c>
   14700:	bl	1b4f4 <__assert_fail@plt+0x9950>
   14704:	mov	r5, r0
   14708:	mov	r0, r5
   1470c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14710:	bl	1170c <strcmp@plt>
   14714:	mov	r5, r0
   14718:	b	14708 <__assert_fail@plt+0x2b64>
   1471c:	tst	r2, #16
   14720:	bne	14754 <__assert_fail@plt+0x2bb0>
   14724:	bl	11988 <strlen@plt>
   14728:	mov	r7, r0
   1472c:	mov	r2, r0
   14730:	mov	r1, r4
   14734:	mov	r0, r6
   14738:	bl	11b5c <strncmp@plt>
   1473c:	subs	r5, r0, #0
   14740:	bne	14708 <__assert_fail@plt+0x2b64>
   14744:	ldrb	r3, [r4, r7]
   14748:	cmp	r3, #47	; 0x2f
   1474c:	movne	r5, r3
   14750:	b	14708 <__assert_fail@plt+0x2b64>
   14754:	mov	r0, r1
   14758:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1475c:	mov	r8, r0
   14760:	mov	r7, #47	; 0x2f
   14764:	mov	r9, #0
   14768:	b	14774 <__assert_fail@plt+0x2bd0>
   1476c:	add	r0, r4, #1
   14770:	strb	r7, [r4]
   14774:	mov	r1, r7
   14778:	bl	11994 <strchr@plt>
   1477c:	subs	r4, r0, #0
   14780:	beq	147a0 <__assert_fail@plt+0x2bfc>
   14784:	strb	r9, [r4]
   14788:	mov	r1, r8
   1478c:	mov	r0, r6
   14790:	bl	1b4f4 <__assert_fail@plt+0x9950>
   14794:	subs	r5, r0, #0
   14798:	bgt	1476c <__assert_fail@plt+0x2bc8>
   1479c:	b	147b0 <__assert_fail@plt+0x2c0c>
   147a0:	mov	r1, r8
   147a4:	mov	r0, r6
   147a8:	bl	1b4f4 <__assert_fail@plt+0x9950>
   147ac:	mov	r5, r0
   147b0:	mov	r0, r8
   147b4:	bl	17204 <__assert_fail@plt+0x5660>
   147b8:	b	14708 <__assert_fail@plt+0x2b64>
   147bc:	push	{r4, lr}
   147c0:	bl	19f38 <__assert_fail@plt+0x8394>
   147c4:	pop	{r4, pc}
   147c8:	push	{r4, r5, r6, r7, r8, r9, lr}
   147cc:	sub	sp, sp, #60	; 0x3c
   147d0:	mov	r9, r1
   147d4:	str	r0, [sp, #16]
   147d8:	mov	r4, #0
   147dc:	strb	r4, [sp]
   147e0:	str	r4, [sp, #4]
   147e4:	str	r4, [sp, #8]
   147e8:	strb	r4, [sp, #12]
   147ec:	mov	r6, #1
   147f0:	mov	r7, r4
   147f4:	ldr	r8, [pc, #412]	; 14998 <__assert_fail@plt+0x2df4>
   147f8:	b	148d8 <__assert_fail@plt+0x2d34>
   147fc:	ldrb	r0, [r5]
   14800:	b	148c0 <__assert_fail@plt+0x2d1c>
   14804:	add	r0, sp, #4
   14808:	bl	117b4 <mbsinit@plt>
   1480c:	cmp	r0, #0
   14810:	beq	14924 <__assert_fail@plt+0x2d80>
   14814:	strb	r6, [sp]
   14818:	ldr	r5, [sp, #16]
   1481c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   14820:	mov	r1, r0
   14824:	mov	r0, r5
   14828:	bl	2b668 <__assert_fail@plt+0x19ac4>
   1482c:	add	r3, sp, #4
   14830:	mov	r2, r0
   14834:	mov	r1, r5
   14838:	add	r0, sp, #28
   1483c:	bl	1b49c <__assert_fail@plt+0x98f8>
   14840:	str	r0, [sp, #20]
   14844:	cmn	r0, #1
   14848:	streq	r6, [sp, #20]
   1484c:	strbeq	r7, [sp, #24]
   14850:	beq	14898 <__assert_fail@plt+0x2cf4>
   14854:	cmn	r0, #2
   14858:	beq	14938 <__assert_fail@plt+0x2d94>
   1485c:	cmp	r0, #0
   14860:	bne	14884 <__assert_fail@plt+0x2ce0>
   14864:	str	r6, [sp, #20]
   14868:	ldr	r3, [sp, #16]
   1486c:	ldrb	r3, [r3]
   14870:	cmp	r3, #0
   14874:	bne	1494c <__assert_fail@plt+0x2da8>
   14878:	ldr	r3, [sp, #28]
   1487c:	cmp	r3, #0
   14880:	bne	14960 <__assert_fail@plt+0x2dbc>
   14884:	strb	r6, [sp, #24]
   14888:	add	r0, sp, #4
   1488c:	bl	117b4 <mbsinit@plt>
   14890:	cmp	r0, #0
   14894:	strbne	r7, [sp]
   14898:	strb	r6, [sp, #12]
   1489c:	ldrb	r3, [sp, #24]
   148a0:	cmp	r3, #0
   148a4:	bne	14974 <__assert_fail@plt+0x2dd0>
   148a8:	ldr	r5, [sp, #16]
   148ac:	ldrb	r3, [sp, #24]
   148b0:	cmp	r3, #0
   148b4:	beq	147fc <__assert_fail@plt+0x2c58>
   148b8:	ldr	r0, [sp, #28]
   148bc:	bl	117a8 <towlower@plt>
   148c0:	rsb	r4, r4, r4, lsl #5
   148c4:	add	r4, r0, r4
   148c8:	ldr	r3, [sp, #20]
   148cc:	add	r5, r5, r3
   148d0:	str	r5, [sp, #16]
   148d4:	strb	r7, [sp, #12]
   148d8:	ldrb	r3, [sp, #12]
   148dc:	cmp	r3, #0
   148e0:	bne	1489c <__assert_fail@plt+0x2cf8>
   148e4:	ldrb	r3, [sp]
   148e8:	cmp	r3, #0
   148ec:	bne	14818 <__assert_fail@plt+0x2c74>
   148f0:	ldr	r1, [sp, #16]
   148f4:	ldrb	r3, [r1]
   148f8:	lsr	r2, r3, #5
   148fc:	and	r3, r3, #31
   14900:	ldr	r2, [r8, r2, lsl #2]
   14904:	lsr	r3, r2, r3
   14908:	tst	r3, #1
   1490c:	beq	14804 <__assert_fail@plt+0x2c60>
   14910:	str	r6, [sp, #20]
   14914:	ldrb	r3, [r1]
   14918:	str	r3, [sp, #28]
   1491c:	strb	r6, [sp, #24]
   14920:	b	14898 <__assert_fail@plt+0x2cf4>
   14924:	ldr	r3, [pc, #112]	; 1499c <__assert_fail@plt+0x2df8>
   14928:	mov	r2, #143	; 0x8f
   1492c:	ldr	r1, [pc, #108]	; 149a0 <__assert_fail@plt+0x2dfc>
   14930:	ldr	r0, [pc, #108]	; 149a4 <__assert_fail@plt+0x2e00>
   14934:	bl	11ba4 <__assert_fail@plt>
   14938:	ldr	r0, [sp, #16]
   1493c:	bl	11988 <strlen@plt>
   14940:	str	r0, [sp, #20]
   14944:	strb	r7, [sp, #24]
   14948:	b	14898 <__assert_fail@plt+0x2cf4>
   1494c:	ldr	r3, [pc, #72]	; 1499c <__assert_fail@plt+0x2df8>
   14950:	mov	r2, #171	; 0xab
   14954:	ldr	r1, [pc, #68]	; 149a0 <__assert_fail@plt+0x2dfc>
   14958:	ldr	r0, [pc, #72]	; 149a8 <__assert_fail@plt+0x2e04>
   1495c:	bl	11ba4 <__assert_fail@plt>
   14960:	ldr	r3, [pc, #52]	; 1499c <__assert_fail@plt+0x2df8>
   14964:	mov	r2, #172	; 0xac
   14968:	ldr	r1, [pc, #48]	; 149a0 <__assert_fail@plt+0x2dfc>
   1496c:	ldr	r0, [pc, #56]	; 149ac <__assert_fail@plt+0x2e08>
   14970:	bl	11ba4 <__assert_fail@plt>
   14974:	ldr	r3, [sp, #28]
   14978:	cmp	r3, #0
   1497c:	bne	148a8 <__assert_fail@plt+0x2d04>
   14980:	mov	r1, r9
   14984:	mov	r0, r4
   14988:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   1498c:	mov	r0, r1
   14990:	add	sp, sp, #60	; 0x3c
   14994:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14998:	andeq	r0, r3, r4, lsl r8
   1499c:	andeq	r0, r3, r8, lsl #13
   149a0:	muleq	r3, ip, r6
   149a4:	andeq	r0, r3, ip, lsr #13
   149a8:	andeq	r0, r3, r4, asr #13
   149ac:	ldrdeq	r0, [r3], -ip
   149b0:	push	{r4, r5, r6, lr}
   149b4:	mov	r4, r0
   149b8:	mov	r5, r1
   149bc:	mov	r0, #8
   149c0:	bl	2c12c <__assert_fail@plt+0x1a588>
   149c4:	str	r5, [r0, #4]
   149c8:	ldr	r3, [r4, #4]
   149cc:	str	r3, [r0]
   149d0:	str	r0, [r4, #4]
   149d4:	pop	{r4, r5, r6, pc}
   149d8:	push	{r4, lr}
   149dc:	and	lr, r1, #32
   149e0:	and	ip, r1, #134217728	; 0x8000000
   149e4:	and	r1, r1, #2
   149e8:	mov	r4, #0
   149ec:	b	14a04 <__assert_fail@plt+0x2e60>
   149f0:	mov	r0, #0
   149f4:	pop	{r4, pc}
   149f8:	cmp	ip, #0
   149fc:	bne	14c5c <__assert_fail@plt+0x30b8>
   14a00:	mov	r0, r2
   14a04:	add	r2, r0, #1
   14a08:	ldrb	r3, [r0]
   14a0c:	cmp	r3, #125	; 0x7d
   14a10:	ldrls	pc, [pc, r3, lsl #2]
   14a14:	b	14a00 <__assert_fail@plt+0x2e5c>
   14a18:	strdeq	r4, [r1], -r0
   14a1c:	andeq	r4, r1, r0, lsl #20
   14a20:	andeq	r4, r1, r0, lsl #20
   14a24:	andeq	r4, r1, r0, lsl #20
   14a28:	andeq	r4, r1, r0, lsl #20
   14a2c:	andeq	r4, r1, r0, lsl #20
   14a30:	andeq	r4, r1, r0, lsl #20
   14a34:	andeq	r4, r1, r0, lsl #20
   14a38:	andeq	r4, r1, r0, lsl #20
   14a3c:	andeq	r4, r1, r0, lsl #20
   14a40:	andeq	r4, r1, r0, lsl #20
   14a44:	andeq	r4, r1, r0, lsl #20
   14a48:	andeq	r4, r1, r0, lsl #20
   14a4c:	andeq	r4, r1, r0, lsl #20
   14a50:	andeq	r4, r1, r0, lsl #20
   14a54:	andeq	r4, r1, r0, lsl #20
   14a58:	andeq	r4, r1, r0, lsl #20
   14a5c:	andeq	r4, r1, r0, lsl #20
   14a60:	andeq	r4, r1, r0, lsl #20
   14a64:	andeq	r4, r1, r0, lsl #20
   14a68:	andeq	r4, r1, r0, lsl #20
   14a6c:	andeq	r4, r1, r0, lsl #20
   14a70:	andeq	r4, r1, r0, lsl #20
   14a74:	andeq	r4, r1, r0, lsl #20
   14a78:	andeq	r4, r1, r0, lsl #20
   14a7c:	andeq	r4, r1, r0, lsl #20
   14a80:	andeq	r4, r1, r0, lsl #20
   14a84:	andeq	r4, r1, r0, lsl #20
   14a88:	andeq	r4, r1, r0, lsl #20
   14a8c:	andeq	r4, r1, r0, lsl #20
   14a90:	andeq	r4, r1, r0, lsl #20
   14a94:	andeq	r4, r1, r0, lsl #20
   14a98:	andeq	r4, r1, r0, lsl #20
   14a9c:	andeq	r4, r1, r8, lsr ip
   14aa0:	andeq	r4, r1, r0, lsl #20
   14aa4:	andeq	r4, r1, r0, lsl #20
   14aa8:	andeq	r4, r1, r0, lsl #20
   14aac:	andeq	r4, r1, r0, lsl #20
   14ab0:	andeq	r4, r1, r0, lsl #20
   14ab4:	andeq	r4, r1, r0, lsl #20
   14ab8:	strdeq	r4, [r1], -r8
   14abc:	strdeq	r4, [r1], -r8
   14ac0:	andeq	r4, r1, r4, asr ip
   14ac4:	andeq	r4, r1, r8, lsr ip
   14ac8:	andeq	r4, r1, r0, lsl #20
   14acc:	andeq	r4, r1, r0, lsl #20
   14ad0:	strdeq	r4, [r1], -r8
   14ad4:	andeq	r4, r1, r0, lsl #20
   14ad8:	andeq	r4, r1, r0, lsl #20
   14adc:	andeq	r4, r1, r0, lsl #20
   14ae0:	andeq	r4, r1, r0, lsl #20
   14ae4:	andeq	r4, r1, r0, lsl #20
   14ae8:	andeq	r4, r1, r0, lsl #20
   14aec:	andeq	r4, r1, r0, lsl #20
   14af0:	andeq	r4, r1, r0, lsl #20
   14af4:	andeq	r4, r1, r0, lsl #20
   14af8:	andeq	r4, r1, r0, lsl #20
   14afc:	andeq	r4, r1, r0, lsl #20
   14b00:	andeq	r4, r1, r0, lsl #20
   14b04:	andeq	r4, r1, r0, lsl #20
   14b08:	andeq	r4, r1, r0, lsl #20
   14b0c:	andeq	r4, r1, r0, lsl #20
   14b10:	andeq	r4, r1, r0, lsl #20
   14b14:	andeq	r4, r1, r4, asr ip
   14b18:	andeq	r4, r1, r8, lsr ip
   14b1c:	andeq	r4, r1, r0, lsl #20
   14b20:	andeq	r4, r1, r0, lsl #20
   14b24:	andeq	r4, r1, r0, lsl #20
   14b28:	andeq	r4, r1, r0, lsl #20
   14b2c:	andeq	r4, r1, r0, lsl #20
   14b30:	andeq	r4, r1, r0, lsl #20
   14b34:	andeq	r4, r1, r0, lsl #20
   14b38:	andeq	r4, r1, r0, lsl #20
   14b3c:	andeq	r4, r1, r0, lsl #20
   14b40:	andeq	r4, r1, r0, lsl #20
   14b44:	andeq	r4, r1, r0, lsl #20
   14b48:	andeq	r4, r1, r0, lsl #20
   14b4c:	andeq	r4, r1, r0, lsl #20
   14b50:	andeq	r4, r1, r0, lsl #20
   14b54:	andeq	r4, r1, r0, lsl #20
   14b58:	andeq	r4, r1, r0, lsl #20
   14b5c:	andeq	r4, r1, r0, lsl #20
   14b60:	andeq	r4, r1, r0, lsl #20
   14b64:	andeq	r4, r1, r0, lsl #20
   14b68:	andeq	r4, r1, r0, lsl #20
   14b6c:	andeq	r4, r1, r0, lsl #20
   14b70:	andeq	r4, r1, r0, lsl #20
   14b74:	andeq	r4, r1, r0, lsl #20
   14b78:	andeq	r4, r1, r0, lsl #20
   14b7c:	andeq	r4, r1, r0, lsl #20
   14b80:	andeq	r4, r1, r0, lsl #20
   14b84:	andeq	r4, r1, r4, asr ip
   14b88:	andeq	r4, r1, r0, lsl ip
   14b8c:	andeq	r4, r1, r0, lsl #20
   14b90:	andeq	r4, r1, r0, lsl #20
   14b94:	andeq	r4, r1, r0, lsl #20
   14b98:	andeq	r4, r1, r0, lsl #20
   14b9c:	andeq	r4, r1, r0, lsl #20
   14ba0:	andeq	r4, r1, r0, lsl #20
   14ba4:	andeq	r4, r1, r0, lsl #20
   14ba8:	andeq	r4, r1, r0, lsl #20
   14bac:	andeq	r4, r1, r0, lsl #20
   14bb0:	andeq	r4, r1, r0, lsl #20
   14bb4:	andeq	r4, r1, r0, lsl #20
   14bb8:	andeq	r4, r1, r0, lsl #20
   14bbc:	andeq	r4, r1, r0, lsl #20
   14bc0:	andeq	r4, r1, r0, lsl #20
   14bc4:	andeq	r4, r1, r0, lsl #20
   14bc8:	andeq	r4, r1, r0, lsl #20
   14bcc:	andeq	r4, r1, r0, lsl #20
   14bd0:	andeq	r4, r1, r0, lsl #20
   14bd4:	andeq	r4, r1, r0, lsl #20
   14bd8:	andeq	r4, r1, r0, lsl #20
   14bdc:	andeq	r4, r1, r0, lsl #20
   14be0:	andeq	r4, r1, r0, lsl #20
   14be4:	andeq	r4, r1, r0, lsl #20
   14be8:	andeq	r4, r1, r0, lsl #20
   14bec:	andeq	r4, r1, r0, lsl #20
   14bf0:	andeq	r4, r1, r0, lsl #20
   14bf4:	andeq	r4, r1, r0, lsl #20
   14bf8:	andeq	r4, r1, r0, lsl #20
   14bfc:	andeq	r4, r1, r0, lsl #20
   14c00:	andeq	r4, r1, r0, lsl #20
   14c04:	strdeq	r4, [r1], -r8
   14c08:	andeq	r4, r1, r0, lsl #20
   14c0c:	strdeq	r4, [r1], -r8
   14c10:	cmp	ip, #0
   14c14:	bne	14a00 <__assert_fail@plt+0x2e5c>
   14c18:	cmp	r1, #0
   14c1c:	movne	r3, r4
   14c20:	bne	14c30 <__assert_fail@plt+0x308c>
   14c24:	ldrb	r3, [r0, #1]
   14c28:	adds	r3, r3, #0
   14c2c:	movne	r3, #1
   14c30:	add	r2, r2, r3
   14c34:	b	14a00 <__assert_fail@plt+0x2e5c>
   14c38:	cmp	lr, #0
   14c3c:	beq	14a00 <__assert_fail@plt+0x2e5c>
   14c40:	ldrb	r3, [r0, #1]
   14c44:	cmp	r3, #40	; 0x28
   14c48:	bne	14a00 <__assert_fail@plt+0x2e5c>
   14c4c:	mov	r0, #1
   14c50:	pop	{r4, pc}
   14c54:	mov	r0, #1
   14c58:	pop	{r4, pc}
   14c5c:	mov	r0, #1
   14c60:	pop	{r4, pc}
   14c64:	push	{r4, lr}
   14c68:	mov	r0, #8
   14c6c:	bl	2c60c <__assert_fail@plt+0x1aa68>
   14c70:	pop	{r4, pc}
   14c74:	push	{r4, r5, r6, r7, r8, lr}
   14c78:	mov	r8, r0
   14c7c:	ldr	r5, [r0]
   14c80:	cmp	r5, #0
   14c84:	bne	14d10 <__assert_fail@plt+0x316c>
   14c88:	ldr	r4, [r8, #4]
   14c8c:	cmp	r4, #0
   14c90:	beq	14cb4 <__assert_fail@plt+0x3110>
   14c94:	ldr	r5, [r4]
   14c98:	ldr	r0, [r4, #4]
   14c9c:	bl	17204 <__assert_fail@plt+0x5660>
   14ca0:	mov	r0, r4
   14ca4:	bl	17204 <__assert_fail@plt+0x5660>
   14ca8:	mov	r4, r5
   14cac:	cmp	r5, #0
   14cb0:	bne	14c94 <__assert_fail@plt+0x30f0>
   14cb4:	mov	r0, r8
   14cb8:	bl	17204 <__assert_fail@plt+0x5660>
   14cbc:	pop	{r4, r5, r6, r7, r8, pc}
   14cc0:	add	r6, r6, #1
   14cc4:	add	r4, r4, #36	; 0x24
   14cc8:	ldr	r3, [r5, #20]
   14ccc:	cmp	r6, r3
   14cd0:	bge	14cf4 <__assert_fail@plt+0x3150>
   14cd4:	ldr	r3, [r5, #12]
   14cd8:	add	r0, r3, r4
   14cdc:	ldr	r3, [r3, r4]
   14ce0:	tst	r3, #134217728	; 0x8000000
   14ce4:	beq	14cc0 <__assert_fail@plt+0x311c>
   14ce8:	add	r0, r0, #4
   14cec:	bl	2b3c8 <__assert_fail@plt+0x19824>
   14cf0:	b	14cc0 <__assert_fail@plt+0x311c>
   14cf4:	ldr	r0, [r5, #12]
   14cf8:	bl	17204 <__assert_fail@plt+0x5660>
   14cfc:	mov	r0, r5
   14d00:	bl	17204 <__assert_fail@plt+0x5660>
   14d04:	mov	r5, r7
   14d08:	cmp	r7, #0
   14d0c:	beq	14c88 <__assert_fail@plt+0x30e4>
   14d10:	ldr	r7, [r5]
   14d14:	ldr	r3, [r5, #4]
   14d18:	cmp	r3, #0
   14d1c:	beq	14d40 <__assert_fail@plt+0x319c>
   14d20:	cmp	r3, #1
   14d24:	bne	14cfc <__assert_fail@plt+0x3158>
   14d28:	ldr	r3, [r5, #20]
   14d2c:	cmp	r3, #0
   14d30:	ble	14cf4 <__assert_fail@plt+0x3150>
   14d34:	mov	r4, #0
   14d38:	mov	r6, r4
   14d3c:	b	14cd4 <__assert_fail@plt+0x3130>
   14d40:	ldr	r0, [r5, #12]
   14d44:	bl	1a138 <__assert_fail@plt+0x8594>
   14d48:	b	14cfc <__assert_fail@plt+0x3158>
   14d4c:	push	{r4, r5, r6, r7, r8, lr}
   14d50:	mov	r7, r0
   14d54:	mov	r4, r1
   14d58:	mov	r6, r2
   14d5c:	and	r2, r2, #268435456	; 0x10000000
   14d60:	ldr	r3, [pc, #140]	; 14df4 <__assert_fail@plt+0x3250>
   14d64:	ldr	r5, [pc, #140]	; 14df8 <__assert_fail@plt+0x3254>
   14d68:	cmp	r2, #0
   14d6c:	moveq	r5, r3
   14d70:	mov	r2, r6
   14d74:	blx	r5
   14d78:	clz	r0, r0
   14d7c:	lsr	r0, r0, #5
   14d80:	tst	r6, #1073741824	; 0x40000000
   14d84:	popne	{r4, r5, r6, r7, r8, pc}
   14d88:	ldrb	r3, [r4]
   14d8c:	cmp	r3, #0
   14d90:	movne	r2, r0
   14d94:	orreq	r2, r0, #1
   14d98:	cmp	r2, #0
   14d9c:	popne	{r4, r5, r6, r7, r8, pc}
   14da0:	add	r4, r4, #1
   14da4:	b	14dc0 <__assert_fail@plt+0x321c>
   14da8:	ldrb	r3, [r4], #1
   14dac:	cmp	r3, #0
   14db0:	movne	r2, r0
   14db4:	orreq	r2, r0, #1
   14db8:	cmp	r2, #0
   14dbc:	bne	14df0 <__assert_fail@plt+0x324c>
   14dc0:	cmp	r3, #47	; 0x2f
   14dc4:	bne	14da8 <__assert_fail@plt+0x3204>
   14dc8:	ldrb	r3, [r4]
   14dcc:	cmp	r3, #47	; 0x2f
   14dd0:	beq	14da8 <__assert_fail@plt+0x3204>
   14dd4:	mov	r2, r6
   14dd8:	mov	r1, r4
   14ddc:	mov	r0, r7
   14de0:	blx	r5
   14de4:	clz	r0, r0
   14de8:	lsr	r0, r0, #5
   14dec:	b	14da8 <__assert_fail@plt+0x3204>
   14df0:	pop	{r4, r5, r6, r7, r8, pc}
   14df4:	andeq	r4, r1, r4, ror #13
   14df8:	ldrdeq	r1, [r1], -r4
   14dfc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e00:	sub	sp, sp, #20
   14e04:	ldr	fp, [r0]
   14e08:	cmp	fp, #0
   14e0c:	beq	14f8c <__assert_fail@plt+0x33e8>
   14e10:	str	r1, [sp, #12]
   14e14:	mov	r4, #0
   14e18:	mov	r8, r4
   14e1c:	mov	r5, #47	; 0x2f
   14e20:	b	14f24 <__assert_fail@plt+0x3380>
   14e24:	ldr	r0, [sp, #12]
   14e28:	bl	11988 <strlen@plt>
   14e2c:	add	r0, r0, #1
   14e30:	bl	2c12c <__assert_fail@plt+0x1a588>
   14e34:	mov	r4, r0
   14e38:	b	14f38 <__assert_fail@plt+0x3394>
   14e3c:	cmp	sl, #0
   14e40:	bne	14f14 <__assert_fail@plt+0x3370>
   14e44:	mov	r1, r5
   14e48:	mov	r0, r9
   14e4c:	bl	11994 <strchr@plt>
   14e50:	cmp	r0, #0
   14e54:	beq	14f14 <__assert_fail@plt+0x3370>
   14e58:	adds	r9, r0, #1
   14e5c:	beq	14f14 <__assert_fail@plt+0x3370>
   14e60:	mov	r1, r9
   14e64:	mov	r0, r4
   14e68:	bl	11898 <strcpy@plt>
   14e6c:	mov	r1, r4
   14e70:	mov	r0, r6
   14e74:	bl	19cf0 <__assert_fail@plt+0x814c>
   14e78:	cmp	r0, #0
   14e7c:	bne	14f58 <__assert_fail@plt+0x33b4>
   14e80:	cmp	r7, #0
   14e84:	beq	14e3c <__assert_fail@plt+0x3298>
   14e88:	mov	r1, r5
   14e8c:	mov	r0, r4
   14e90:	bl	11a78 <strrchr@plt>
   14e94:	cmp	r0, #0
   14e98:	beq	14e3c <__assert_fail@plt+0x3298>
   14e9c:	strb	r8, [r0]
   14ea0:	b	14e6c <__assert_fail@plt+0x32c8>
   14ea4:	ldr	r9, [fp, #20]
   14ea8:	ldr	r6, [fp, #12]
   14eac:	cmp	r9, #0
   14eb0:	ble	14f14 <__assert_fail@plt+0x3370>
   14eb4:	add	r6, r6, #4
   14eb8:	mov	r7, #0
   14ebc:	b	14ee4 <__assert_fail@plt+0x3340>
   14ec0:	ldr	r1, [sp, #12]
   14ec4:	ldr	r0, [r6]
   14ec8:	bl	14d4c <__assert_fail@plt+0x31a8>
   14ecc:	cmp	r0, #0
   14ed0:	bne	14f84 <__assert_fail@plt+0x33e0>
   14ed4:	add	r7, r7, #1
   14ed8:	add	r6, r6, #36	; 0x24
   14edc:	cmp	r9, r7
   14ee0:	beq	14f14 <__assert_fail@plt+0x3370>
   14ee4:	ldr	r2, [r6, #-4]
   14ee8:	tst	r2, #134217728	; 0x8000000
   14eec:	beq	14ec0 <__assert_fail@plt+0x331c>
   14ef0:	str	r8, [sp]
   14ef4:	mov	r3, r8
   14ef8:	mov	r2, r8
   14efc:	ldr	r1, [sp, #12]
   14f00:	mov	r0, r6
   14f04:	bl	2b448 <__assert_fail@plt+0x198a4>
   14f08:	clz	r0, r0
   14f0c:	lsr	r0, r0, #5
   14f10:	b	14ecc <__assert_fail@plt+0x3328>
   14f14:	ldr	r3, [fp]
   14f18:	cmp	r3, #0
   14f1c:	beq	14f50 <__assert_fail@plt+0x33ac>
   14f20:	mov	fp, r3
   14f24:	ldr	r3, [fp, #4]
   14f28:	cmp	r3, #0
   14f2c:	bne	14ea4 <__assert_fail@plt+0x3300>
   14f30:	cmp	r4, #0
   14f34:	beq	14e24 <__assert_fail@plt+0x3280>
   14f38:	ldr	sl, [fp, #8]
   14f3c:	ldr	r6, [fp, #12]
   14f40:	ldr	r9, [sp, #12]
   14f44:	and	r7, sl, #8
   14f48:	and	sl, sl, #1073741824	; 0x40000000
   14f4c:	b	14e60 <__assert_fail@plt+0x32bc>
   14f50:	mov	r5, #1
   14f54:	b	14f5c <__assert_fail@plt+0x33b8>
   14f58:	mov	r5, #0
   14f5c:	mov	r0, r4
   14f60:	bl	17204 <__assert_fail@plt+0x5660>
   14f64:	ldr	r0, [fp, #8]
   14f68:	lsr	r0, r0, #29
   14f6c:	eor	r0, r0, #1
   14f70:	and	r0, r0, #1
   14f74:	subs	r0, r0, r5
   14f78:	movne	r0, #1
   14f7c:	add	sp, sp, #20
   14f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14f84:	mov	r5, #0
   14f88:	b	14f5c <__assert_fail@plt+0x33b8>
   14f8c:	mov	r0, #0
   14f90:	b	14f7c <__assert_fail@plt+0x33d8>
   14f94:	push	{r4, r5, r6, r7, r8, r9, lr}
   14f98:	sub	sp, sp, #12
   14f9c:	mov	r5, r0
   14fa0:	mov	r7, r1
   14fa4:	mov	r4, r2
   14fa8:	tst	r2, #402653184	; 0x18000000
   14fac:	beq	15180 <__assert_fail@plt+0x35dc>
   14fb0:	mov	r1, r2
   14fb4:	mov	r0, r7
   14fb8:	bl	149d8 <__assert_fail@plt+0x2e34>
   14fbc:	cmp	r0, #0
   14fc0:	beq	15180 <__assert_fail@plt+0x35dc>
   14fc4:	ldr	r3, [r5]
   14fc8:	cmp	r3, #0
   14fcc:	beq	14fdc <__assert_fail@plt+0x3438>
   14fd0:	ldr	r2, [r3, #4]
   14fd4:	cmp	r2, #1
   14fd8:	beq	150e4 <__assert_fail@plt+0x3540>
   14fdc:	mov	r0, #24
   14fe0:	bl	2c60c <__assert_fail@plt+0x1aa68>
   14fe4:	mov	r3, #1
   14fe8:	str	r3, [r0, #4]
   14fec:	str	r4, [r0, #8]
   14ff0:	ldr	r3, [r5]
   14ff4:	str	r3, [r0]
   14ff8:	str	r0, [r5]
   14ffc:	ldr	r6, [r5]
   15000:	ldr	r2, [r6, #20]
   15004:	ldr	r3, [r6, #16]
   15008:	cmp	r2, r3
   1500c:	beq	150f8 <__assert_fail@plt+0x3554>
   15010:	ldr	r2, [r6, #12]
   15014:	ldr	r3, [r6, #20]
   15018:	add	r1, r3, #1
   1501c:	str	r1, [r6, #20]
   15020:	add	r3, r3, r3, lsl #3
   15024:	lsl	r3, r3, #2
   15028:	add	r8, r2, r3
   1502c:	str	r4, [r2, r3]
   15030:	tst	r4, #134217728	; 0x8000000
   15034:	beq	15154 <__assert_fail@plt+0x35b0>
   15038:	and	r5, r4, #16
   1503c:	cmp	r5, #0
   15040:	movne	r5, #11
   15044:	moveq	r5, #9
   15048:	tst	r4, #8
   1504c:	beq	15128 <__assert_fail@plt+0x3584>
   15050:	mov	r0, r7
   15054:	bl	11988 <strlen@plt>
   15058:	mov	r4, r0
   1505c:	cmp	r0, #0
   15060:	ble	1511c <__assert_fail@plt+0x3578>
   15064:	sub	r0, r0, #1
   15068:	add	r3, r7, r0
   1506c:	ldrb	r2, [r7, r0]
   15070:	cmp	r2, #47	; 0x2f
   15074:	bne	1508c <__assert_fail@plt+0x34e8>
   15078:	subs	r4, r4, #1
   1507c:	beq	15144 <__assert_fail@plt+0x35a0>
   15080:	ldrb	r2, [r3, #-1]!
   15084:	cmp	r2, #47	; 0x2f
   15088:	beq	15078 <__assert_fail@plt+0x34d4>
   1508c:	add	r0, r4, #7
   15090:	bl	2c140 <__assert_fail@plt+0x1a59c>
   15094:	mov	r9, r0
   15098:	mov	r2, r4
   1509c:	mov	r1, r7
   150a0:	bl	11784 <memcpy@plt>
   150a4:	add	r2, r9, r4
   150a8:	ldr	r3, [pc, #508]	; 152ac <__assert_fail@plt+0x3708>
   150ac:	ldr	r0, [r3]
   150b0:	str	r0, [r9, r4]
   150b4:	ldrh	r1, [r3, #4]
   150b8:	ldrb	r3, [r3, #6]
   150bc:	strh	r1, [r2, #4]
   150c0:	strb	r3, [r2, #6]
   150c4:	mov	r2, r5
   150c8:	mov	r1, r9
   150cc:	add	r0, r8, #4
   150d0:	bl	2b248 <__assert_fail@plt+0x196a4>
   150d4:	mov	r4, r0
   150d8:	mov	r0, r9
   150dc:	bl	17204 <__assert_fail@plt+0x5660>
   150e0:	b	1513c <__assert_fail@plt+0x3598>
   150e4:	ldr	r3, [r3, #8]
   150e8:	eor	r3, r3, r4
   150ec:	tst	r3, #536870912	; 0x20000000
   150f0:	beq	14ffc <__assert_fail@plt+0x3458>
   150f4:	b	14fdc <__assert_fail@plt+0x3438>
   150f8:	ldr	r0, [r6, #12]
   150fc:	mov	r3, #36	; 0x24
   15100:	str	r3, [sp]
   15104:	mvn	r3, #0
   15108:	mov	r2, #1
   1510c:	add	r1, r6, #16
   15110:	bl	2c2d8 <__assert_fail@plt+0x1a734>
   15114:	str	r0, [r6, #12]
   15118:	b	15010 <__assert_fail@plt+0x346c>
   1511c:	cmp	r0, #0
   15120:	beq	15144 <__assert_fail@plt+0x35a0>
   15124:	b	1508c <__assert_fail@plt+0x34e8>
   15128:	mov	r2, r5
   1512c:	mov	r1, r7
   15130:	add	r0, r8, #4
   15134:	bl	2b248 <__assert_fail@plt+0x196a4>
   15138:	mov	r4, r0
   1513c:	cmp	r4, #0
   15140:	beq	15248 <__assert_fail@plt+0x36a4>
   15144:	ldr	r3, [r6, #20]
   15148:	sub	r3, r3, #1
   1514c:	str	r3, [r6, #20]
   15150:	b	15248 <__assert_fail@plt+0x36a4>
   15154:	tst	r4, #67108864	; 0x4000000
   15158:	bne	15164 <__assert_fail@plt+0x35c0>
   1515c:	str	r7, [r8, #4]
   15160:	b	15248 <__assert_fail@plt+0x36a4>
   15164:	mov	r0, r7
   15168:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1516c:	mov	r7, r0
   15170:	mov	r1, r0
   15174:	mov	r0, r5
   15178:	bl	149b0 <__assert_fail@plt+0x2e0c>
   1517c:	b	1515c <__assert_fail@plt+0x35b8>
   15180:	ldr	r3, [r5]
   15184:	cmp	r3, #0
   15188:	beq	151b0 <__assert_fail@plt+0x360c>
   1518c:	ldr	r2, [r3, #4]
   15190:	cmp	r2, #0
   15194:	bne	151b0 <__assert_fail@plt+0x360c>
   15198:	ldr	r2, [r3, #8]
   1519c:	eor	r2, r2, r4
   151a0:	ldr	r3, [pc, #264]	; 152b0 <__assert_fail@plt+0x370c>
   151a4:	and	r3, r3, r2
   151a8:	cmp	r3, #0
   151ac:	beq	15210 <__assert_fail@plt+0x366c>
   151b0:	mov	r0, #24
   151b4:	bl	2c60c <__assert_fail@plt+0x1aa68>
   151b8:	mov	r6, r0
   151bc:	mov	r3, #0
   151c0:	str	r3, [r0, #4]
   151c4:	str	r4, [r0, #8]
   151c8:	and	r1, r4, #16
   151cc:	ldr	r3, [pc, #224]	; 152b4 <__assert_fail@plt+0x3710>
   151d0:	str	r3, [sp]
   151d4:	ldr	r3, [pc, #220]	; 152b8 <__assert_fail@plt+0x3714>
   151d8:	ldr	r2, [pc, #220]	; 152bc <__assert_fail@plt+0x3718>
   151dc:	cmp	r1, #0
   151e0:	moveq	r3, r2
   151e4:	ldr	r2, [pc, #212]	; 152c0 <__assert_fail@plt+0x371c>
   151e8:	ldr	r0, [pc, #212]	; 152c4 <__assert_fail@plt+0x3720>
   151ec:	cmp	r1, #0
   151f0:	moveq	r2, r0
   151f4:	mov	r1, #0
   151f8:	mov	r0, r1
   151fc:	bl	19fa8 <__assert_fail@plt+0x8404>
   15200:	str	r0, [r6, #12]
   15204:	ldr	r3, [r5]
   15208:	str	r3, [r6]
   1520c:	str	r6, [r5]
   15210:	ldr	r6, [r5]
   15214:	mov	r0, r7
   15218:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1521c:	mov	r5, r0
   15220:	and	r4, r4, #268435458	; 0x10000002
   15224:	cmp	r4, #268435456	; 0x10000000
   15228:	beq	15250 <__assert_fail@plt+0x36ac>
   1522c:	mov	r1, r5
   15230:	ldr	r0, [r6, #12]
   15234:	bl	1a4f4 <__assert_fail@plt+0x8950>
   15238:	cmp	r5, r0
   1523c:	beq	15248 <__assert_fail@plt+0x36a4>
   15240:	mov	r0, r5
   15244:	bl	17204 <__assert_fail@plt+0x5660>
   15248:	add	sp, sp, #12
   1524c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15250:	mov	r2, r0
   15254:	mov	r1, r0
   15258:	mov	ip, #1
   1525c:	mov	r0, #0
   15260:	b	1527c <__assert_fail@plt+0x36d8>
   15264:	add	r3, r2, r3
   15268:	add	r2, r3, #1
   1526c:	ldrb	r3, [r3]
   15270:	strb	r3, [r1], #1
   15274:	cmp	r3, #0
   15278:	beq	1522c <__assert_fail@plt+0x3688>
   1527c:	ldrb	r3, [r2]
   15280:	cmp	r3, #92	; 0x5c
   15284:	movne	r3, r0
   15288:	bne	15264 <__assert_fail@plt+0x36c0>
   1528c:	ldrb	r3, [r2, #1]
   15290:	cmp	r3, #0
   15294:	movne	r3, ip
   15298:	bne	15264 <__assert_fail@plt+0x36c0>
   1529c:	ldrb	r3, [r2]
   152a0:	strb	r3, [r1], #1
   152a4:	add	r2, r2, #1
   152a8:	b	1527c <__assert_fail@plt+0x36d8>
   152ac:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   152b0:	andvs	r0, r0, r8, lsl r0
   152b4:			; <UNDEFINED> instruction: 0x000146b0
   152b8:			; <UNDEFINED> instruction: 0x000146bc
   152bc:	ldrdeq	r4, [r1], -r0
   152c0:	andeq	r4, r1, r8, asr #15
   152c4:			; <UNDEFINED> instruction: 0x000147bc
   152c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   152cc:	sub	sp, sp, #36	; 0x24
   152d0:	str	r0, [sp, #16]
   152d4:	str	r1, [sp, #12]
   152d8:	mov	r9, r2
   152dc:	str	r3, [sp, #20]
   152e0:	ldrb	r7, [sp, #72]	; 0x48
   152e4:	mov	r6, #0
   152e8:	add	sl, sp, #32
   152ec:	str	r6, [sl, #-4]!
   152f0:	mov	r4, r6
   152f4:	mov	fp, #1
   152f8:	b	15304 <__assert_fail@plt+0x3760>
   152fc:	strb	r5, [r6, r4]
   15300:	add	r4, r4, #1
   15304:	mov	r8, r4
   15308:	mov	r0, r9
   1530c:	bl	11b74 <getc@plt>
   15310:	mov	r5, r0
   15314:	cmn	r0, #1
   15318:	beq	15348 <__assert_fail@plt+0x37a4>
   1531c:	ldr	r3, [sp, #28]
   15320:	cmp	r4, r3
   15324:	bne	152fc <__assert_fail@plt+0x3758>
   15328:	str	fp, [sp]
   1532c:	mvn	r3, #0
   15330:	mov	r2, fp
   15334:	mov	r1, sl
   15338:	mov	r0, r6
   1533c:	bl	2c2d8 <__assert_fail@plt+0x1a734>
   15340:	mov	r6, r0
   15344:	b	152fc <__assert_fail@plt+0x3758>
   15348:	mov	r0, r9
   1534c:	bl	1176c <ferror@plt>
   15350:	subs	r9, r0, #0
   15354:	beq	15360 <__assert_fail@plt+0x37bc>
   15358:	bl	119b8 <__errno_location@plt>
   1535c:	ldr	r9, [r0]
   15360:	add	r1, r8, #1
   15364:	mov	r0, r6
   15368:	bl	2c194 <__assert_fail@plt+0x1a5f0>
   1536c:	mov	sl, r0
   15370:	strb	r7, [r0, r4]
   15374:	cmp	r8, #0
   15378:	beq	15450 <__assert_fail@plt+0x38ac>
   1537c:	add	r3, r0, r4
   15380:	ldrb	r3, [r3, #-1]
   15384:	cmp	r3, r7
   15388:	addne	r4, r4, #1
   1538c:	add	r4, r0, r4
   15390:	mov	r1, r0
   15394:	ldr	r0, [sp, #12]
   15398:	bl	149b0 <__assert_fail@plt+0x2e0c>
   1539c:	cmp	sl, r4
   153a0:	bcs	1545c <__assert_fail@plt+0x38b8>
   153a4:	lsl	fp, r7, #1
   153a8:	mov	r5, sl
   153ac:	b	153e0 <__assert_fail@plt+0x383c>
   153b0:	mov	r3, #0
   153b4:	strb	r3, [r8]
   153b8:	ldr	r3, [sp, #76]	; 0x4c
   153bc:	ldr	r2, [sp, #20]
   153c0:	mov	r1, sl
   153c4:	ldr	r0, [sp, #12]
   153c8:	ldr	ip, [sp, #16]
   153cc:	blx	ip
   153d0:	mov	sl, r6
   153d4:	mov	r5, r6
   153d8:	cmp	r6, r4
   153dc:	beq	1545c <__assert_fail@plt+0x38b8>
   153e0:	mov	r8, r5
   153e4:	add	r6, r5, #1
   153e8:	ldrb	r3, [r5]
   153ec:	cmp	r3, r7
   153f0:	bne	153d4 <__assert_fail@plt+0x3830>
   153f4:	bl	11964 <__ctype_b_loc@plt>
   153f8:	ldr	r2, [r0]
   153fc:	ldrh	r3, [r2, fp]
   15400:	tst	r3, #8192	; 0x2000
   15404:	beq	153b0 <__assert_fail@plt+0x380c>
   15408:	cmp	r5, sl
   1540c:	beq	153d0 <__assert_fail@plt+0x382c>
   15410:	ldrb	r3, [r6, #-2]
   15414:	lsl	r3, r3, #1
   15418:	ldrh	r3, [r2, r3]
   1541c:	tst	r3, #8192	; 0x2000
   15420:	beq	153b0 <__assert_fail@plt+0x380c>
   15424:	sub	r5, r5, #1
   15428:	mov	r1, sl
   1542c:	mov	r8, r5
   15430:	cmp	r5, r1
   15434:	beq	153d0 <__assert_fail@plt+0x382c>
   15438:	ldrb	r3, [r5, #-1]!
   1543c:	lsl	r3, r3, #1
   15440:	ldrh	r3, [r2, r3]
   15444:	tst	r3, #8192	; 0x2000
   15448:	bne	1542c <__assert_fail@plt+0x3888>
   1544c:	b	153b0 <__assert_fail@plt+0x380c>
   15450:	mov	r1, r0
   15454:	ldr	r0, [sp, #12]
   15458:	bl	149b0 <__assert_fail@plt+0x2e0c>
   1545c:	bl	119b8 <__errno_location@plt>
   15460:	str	r9, [r0]
   15464:	adds	r0, r9, #0
   15468:	mvnne	r0, #0
   1546c:	add	sp, sp, #36	; 0x24
   15470:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15474:	push	{r4, r5, r6, r7, r8, lr}
   15478:	sub	sp, sp, #16
   1547c:	str	r0, [sp, #12]
   15480:	mov	r5, r1
   15484:	mov	r4, r2
   15488:	mov	r6, r3
   1548c:	ldrb	r7, [sp, #40]	; 0x28
   15490:	ldr	r1, [pc, #172]	; 15544 <__assert_fail@plt+0x39a0>
   15494:	mov	r0, r2
   15498:	bl	1170c <strcmp@plt>
   1549c:	cmp	r0, #0
   154a0:	beq	15508 <__assert_fail@plt+0x3964>
   154a4:	ldr	r1, [pc, #156]	; 15548 <__assert_fail@plt+0x39a4>
   154a8:	mov	r0, r4
   154ac:	bl	11afc <fopen64@plt>
   154b0:	subs	r8, r0, #0
   154b4:	beq	15534 <__assert_fail@plt+0x3990>
   154b8:	add	r3, sp, #12
   154bc:	str	r3, [sp, #4]
   154c0:	str	r7, [sp]
   154c4:	mov	r3, r6
   154c8:	mov	r2, r8
   154cc:	mov	r1, r5
   154d0:	ldr	r0, [pc, #116]	; 1554c <__assert_fail@plt+0x39a8>
   154d4:	bl	152c8 <__assert_fail@plt+0x3724>
   154d8:	mov	r4, r0
   154dc:	bl	119b8 <__errno_location@plt>
   154e0:	mov	r5, r0
   154e4:	ldr	r6, [r0]
   154e8:	mov	r0, r8
   154ec:	bl	15554 <__assert_fail@plt+0x39b0>
   154f0:	cmp	r0, #0
   154f4:	bne	1553c <__assert_fail@plt+0x3998>
   154f8:	str	r6, [r5]
   154fc:	mov	r0, r4
   15500:	add	sp, sp, #16
   15504:	pop	{r4, r5, r6, r7, r8, pc}
   15508:	ldr	r3, [pc, #64]	; 15550 <__assert_fail@plt+0x39ac>
   1550c:	ldr	r2, [r3]
   15510:	add	r3, sp, #12
   15514:	str	r3, [sp, #4]
   15518:	str	r7, [sp]
   1551c:	mov	r3, r6
   15520:	mov	r1, r5
   15524:	ldr	r0, [pc, #32]	; 1554c <__assert_fail@plt+0x39a8>
   15528:	bl	152c8 <__assert_fail@plt+0x3724>
   1552c:	mov	r4, r0
   15530:	b	154fc <__assert_fail@plt+0x3958>
   15534:	mvn	r4, #0
   15538:	b	154fc <__assert_fail@plt+0x3958>
   1553c:	mvn	r4, #0
   15540:	b	154fc <__assert_fail@plt+0x3958>
   15544:	andeq	r0, r3, r4, lsr r2
   15548:	andeq	r0, r3, r4, ror #17
   1554c:	andeq	r4, r1, r0, lsr #13
   15550:	andeq	r2, r4, r8, lsr r2
   15554:	push	{r4, r5, r6, lr}
   15558:	sub	sp, sp, #8
   1555c:	mov	r4, r0
   15560:	bl	11a0c <fileno@plt>
   15564:	cmp	r0, #0
   15568:	blt	155e0 <__assert_fail@plt+0x3a3c>
   1556c:	mov	r0, r4
   15570:	bl	1191c <__freading@plt>
   15574:	cmp	r0, #0
   15578:	beq	155ac <__assert_fail@plt+0x3a08>
   1557c:	mov	r0, r4
   15580:	bl	11a0c <fileno@plt>
   15584:	mov	r3, #1
   15588:	str	r3, [sp]
   1558c:	mov	r2, #0
   15590:	mov	r3, #0
   15594:	bl	11874 <lseek64@plt>
   15598:	mvn	r2, #0
   1559c:	mvn	r3, #0
   155a0:	cmp	r1, r3
   155a4:	cmpeq	r0, r2
   155a8:	beq	155ec <__assert_fail@plt+0x3a48>
   155ac:	mov	r0, r4
   155b0:	bl	155fc <__assert_fail@plt+0x3a58>
   155b4:	cmp	r0, #0
   155b8:	beq	155ec <__assert_fail@plt+0x3a48>
   155bc:	bl	119b8 <__errno_location@plt>
   155c0:	mov	r5, r0
   155c4:	ldr	r6, [r0]
   155c8:	mov	r0, r4
   155cc:	bl	11a30 <fclose@plt>
   155d0:	cmp	r6, #0
   155d4:	strne	r6, [r5]
   155d8:	mvnne	r0, #0
   155dc:	b	155f4 <__assert_fail@plt+0x3a50>
   155e0:	mov	r0, r4
   155e4:	bl	11a30 <fclose@plt>
   155e8:	b	155f4 <__assert_fail@plt+0x3a50>
   155ec:	mov	r0, r4
   155f0:	bl	11a30 <fclose@plt>
   155f4:	add	sp, sp, #8
   155f8:	pop	{r4, r5, r6, pc}
   155fc:	push	{r4, lr}
   15600:	sub	sp, sp, #8
   15604:	subs	r4, r0, #0
   15608:	beq	1561c <__assert_fail@plt+0x3a78>
   1560c:	mov	r0, r4
   15610:	bl	1191c <__freading@plt>
   15614:	cmp	r0, #0
   15618:	bne	1562c <__assert_fail@plt+0x3a88>
   1561c:	mov	r0, r4
   15620:	bl	11730 <fflush@plt>
   15624:	add	sp, sp, #8
   15628:	pop	{r4, pc}
   1562c:	ldr	r3, [r4]
   15630:	tst	r3, #256	; 0x100
   15634:	bne	15644 <__assert_fail@plt+0x3aa0>
   15638:	mov	r0, r4
   1563c:	bl	11730 <fflush@plt>
   15640:	b	15624 <__assert_fail@plt+0x3a80>
   15644:	mov	r3, #1
   15648:	str	r3, [sp]
   1564c:	mov	r2, #0
   15650:	mov	r3, #0
   15654:	mov	r0, r4
   15658:	bl	17428 <__assert_fail@plt+0x5884>
   1565c:	b	15638 <__assert_fail@plt+0x3a94>
   15660:	push	{r4, r5, r6, r7, r8, lr}
   15664:	subs	r5, r2, #0
   15668:	popeq	{r4, r5, r6, r7, r8, pc}
   1566c:	mov	r6, r0
   15670:	mov	r4, r1
   15674:	bl	11928 <__ctype_tolower_loc@plt>
   15678:	mov	r7, r0
   1567c:	add	r5, r4, r5
   15680:	ldrb	r2, [r4], #1
   15684:	ldr	r3, [r7]
   15688:	mov	r1, r6
   1568c:	ldr	r0, [r3, r2, lsl #2]
   15690:	bl	11a90 <fputc@plt>
   15694:	cmp	r5, r4
   15698:	bne	15680 <__assert_fail@plt+0x3adc>
   1569c:	pop	{r4, r5, r6, r7, r8, pc}
   156a0:	push	{r4, r5, r6, r7, r8, lr}
   156a4:	subs	r5, r2, #0
   156a8:	popeq	{r4, r5, r6, r7, r8, pc}
   156ac:	mov	r6, r0
   156b0:	mov	r4, r1
   156b4:	bl	11934 <__ctype_toupper_loc@plt>
   156b8:	mov	r7, r0
   156bc:	add	r5, r4, r5
   156c0:	ldrb	r2, [r4], #1
   156c4:	ldr	r3, [r7]
   156c8:	mov	r1, r6
   156cc:	ldr	r0, [r3, r2, lsl #2]
   156d0:	bl	11a90 <fputc@plt>
   156d4:	cmp	r5, r4
   156d8:	bne	156c0 <__assert_fail@plt+0x3b1c>
   156dc:	pop	{r4, r5, r6, r7, r8, pc}
   156e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   156e4:	sub	sp, sp, #1104	; 0x450
   156e8:	sub	sp, sp, #12
   156ec:	str	r0, [sp, #24]
   156f0:	mov	r9, r1
   156f4:	mov	r4, r2
   156f8:	str	r2, [sp, #28]
   156fc:	str	r3, [sp, #48]	; 0x30
   15700:	ldr	r7, [sp, #1156]	; 0x484
   15704:	bl	119b8 <__errno_location@plt>
   15708:	str	r0, [sp, #36]	; 0x24
   1570c:	ldr	r3, [r0]
   15710:	str	r3, [sp, #56]	; 0x38
   15714:	ldr	r2, [r4, #8]
   15718:	mov	r0, r2
   1571c:	str	r2, [sp, #40]	; 0x28
   15720:	ldr	r3, [r4, #40]	; 0x28
   15724:	mov	r1, r3
   15728:	ldr	r3, [pc, #3964]	; 166ac <__assert_fail@plt+0x4b08>
   1572c:	mov	r2, r1
   15730:	cmp	r1, #0
   15734:	moveq	r2, r3
   15738:	str	r2, [sp, #52]	; 0x34
   1573c:	cmp	r0, #12
   15740:	ble	15764 <__assert_fail@plt+0x3bc0>
   15744:	sub	r3, r0, #12
   15748:	str	r3, [sp, #40]	; 0x28
   1574c:	ldrb	r3, [r9]
   15750:	cmp	r3, #0
   15754:	beq	17084 <__assert_fail@plt+0x54e0>
   15758:	mov	fp, #0
   1575c:	ldr	sl, [pc, #3916]	; 166b0 <__assert_fail@plt+0x4b0c>
   15760:	b	157dc <__assert_fail@plt+0x3c38>
   15764:	ldr	r2, [sp, #40]	; 0x28
   15768:	mov	r3, r2
   1576c:	cmp	r2, #0
   15770:	moveq	r3, #12
   15774:	str	r3, [sp, #40]	; 0x28
   15778:	b	1574c <__assert_fail@plt+0x3ba8>
   1577c:	ldr	r3, [sp, #24]
   15780:	cmp	r3, #0
   15784:	beq	157c0 <__assert_fail@plt+0x3c1c>
   15788:	cmp	r5, #1
   1578c:	bls	157b4 <__assert_fail@plt+0x3c10>
   15790:	sub	r5, r5, #1
   15794:	mov	r4, #0
   15798:	mov	r6, #32
   1579c:	ldr	r1, [sp, #24]
   157a0:	mov	r0, r6
   157a4:	bl	11a90 <fputc@plt>
   157a8:	add	r4, r4, #1
   157ac:	cmp	r5, r4
   157b0:	bne	1579c <__assert_fail@plt+0x3bf8>
   157b4:	ldr	r1, [sp, #24]
   157b8:	ldrb	r0, [r9]
   157bc:	bl	11a90 <fputc@plt>
   157c0:	add	fp, fp, r8
   157c4:	mov	r4, r9
   157c8:	add	r9, r4, #1
   157cc:	ldrb	r3, [r4, #1]
   157d0:	mvn	r7, #0
   157d4:	cmp	r3, #0
   157d8:	beq	17088 <__assert_fail@plt+0x54e4>
   157dc:	cmp	r3, #37	; 0x25
   157e0:	beq	15934 <__assert_fail@plt+0x3d90>
   157e4:	bic	r5, r7, r7, asr #31
   157e8:	cmp	r5, #1
   157ec:	movcs	r8, r5
   157f0:	movcc	r8, #1
   157f4:	mvn	r3, fp
   157f8:	cmp	r8, r3
   157fc:	bcc	1577c <__assert_fail@plt+0x3bd8>
   15800:	mov	r3, #34	; 0x22
   15804:	ldr	r2, [sp, #36]	; 0x24
   15808:	str	r3, [r2]
   1580c:	mov	fp, #0
   15810:	mov	r0, fp
   15814:	add	sp, sp, #1104	; 0x450
   15818:	add	sp, sp, #12
   1581c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15820:	mov	r5, r3
   15824:	b	1582c <__assert_fail@plt+0x3c88>
   15828:	mov	r6, r1
   1582c:	ldrb	r3, [r4, #1]!
   15830:	sub	r2, r3, #35	; 0x23
   15834:	cmp	r2, #60	; 0x3c
   15838:	ldrls	pc, [pc, r2, lsl #2]
   1583c:	b	1595c <__assert_fail@plt+0x3db8>
   15840:	andeq	r5, r1, r8, lsr #16
   15844:	andeq	r5, r1, ip, asr r9
   15848:	andeq	r5, r1, ip, asr r9
   1584c:	andeq	r5, r1, ip, asr r9
   15850:	andeq	r5, r1, ip, asr r9
   15854:	andeq	r5, r1, ip, asr r9
   15858:	andeq	r5, r1, ip, asr r9
   1585c:	andeq	r5, r1, ip, asr r9
   15860:	andeq	r5, r1, r0, lsr #16
   15864:	andeq	r5, r1, ip, asr r9
   15868:	andeq	r5, r1, r0, lsr #16
   1586c:	andeq	r5, r1, ip, asr r9
   15870:	andeq	r5, r1, ip, asr r9
   15874:	andeq	r5, r1, r0, lsr #16
   15878:	andeq	r5, r1, ip, asr r9
   1587c:	andeq	r5, r1, ip, asr r9
   15880:	andeq	r5, r1, ip, asr r9
   15884:	andeq	r5, r1, ip, asr r9
   15888:	andeq	r5, r1, ip, asr r9
   1588c:	andeq	r5, r1, ip, asr r9
   15890:	andeq	r5, r1, ip, asr r9
   15894:	andeq	r5, r1, ip, asr r9
   15898:	andeq	r5, r1, ip, asr r9
   1589c:	andeq	r5, r1, ip, asr r9
   158a0:	andeq	r5, r1, ip, asr r9
   158a4:	andeq	r5, r1, ip, asr r9
   158a8:	andeq	r5, r1, ip, asr r9
   158ac:	andeq	r5, r1, ip, asr r9
   158b0:	andeq	r5, r1, ip, asr r9
   158b4:	andeq	r5, r1, ip, asr r9
   158b8:	andeq	r5, r1, ip, asr r9
   158bc:	andeq	r5, r1, ip, asr r9
   158c0:	andeq	r5, r1, ip, asr r9
   158c4:	andeq	r5, r1, ip, asr r9
   158c8:	andeq	r5, r1, ip, asr r9
   158cc:	andeq	r5, r1, ip, asr r9
   158d0:	andeq	r5, r1, ip, asr r9
   158d4:	andeq	r5, r1, ip, asr r9
   158d8:	andeq	r5, r1, ip, asr r9
   158dc:	andeq	r5, r1, ip, asr r9
   158e0:	andeq	r5, r1, ip, asr r9
   158e4:	andeq	r5, r1, ip, asr r9
   158e8:	andeq	r5, r1, ip, asr r9
   158ec:	andeq	r5, r1, ip, asr r9
   158f0:	andeq	r5, r1, ip, asr r9
   158f4:	andeq	r5, r1, ip, asr r9
   158f8:	andeq	r5, r1, ip, asr r9
   158fc:	andeq	r5, r1, ip, asr r9
   15900:	andeq	r5, r1, ip, asr r9
   15904:	andeq	r5, r1, ip, asr r9
   15908:	andeq	r5, r1, ip, asr r9
   1590c:	andeq	r5, r1, ip, asr r9
   15910:	andeq	r5, r1, ip, asr r9
   15914:	andeq	r5, r1, ip, asr r9
   15918:	andeq	r5, r1, ip, asr r9
   1591c:	andeq	r5, r1, ip, asr r9
   15920:	andeq	r5, r1, ip, asr r9
   15924:	andeq	r5, r1, ip, asr r9
   15928:	andeq	r5, r1, ip, asr r9
   1592c:	andeq	r5, r1, r0, asr r9
   15930:	andeq	r5, r1, r0, lsr #16
   15934:	ldr	r3, [sp, #48]	; 0x30
   15938:	str	r3, [sp, #32]
   1593c:	mov	r4, r9
   15940:	mov	r6, #0
   15944:	mov	r5, r6
   15948:	mov	r1, #1
   1594c:	b	1582c <__assert_fail@plt+0x3c88>
   15950:	mov	r3, #1
   15954:	str	r3, [sp, #32]
   15958:	b	1582c <__assert_fail@plt+0x3c88>
   1595c:	sub	r3, r3, #48	; 0x30
   15960:	cmp	r3, #9
   15964:	bhi	15a3c <__assert_fail@plt+0x3e98>
   15968:	mov	r7, #0
   1596c:	ldr	r8, [pc, #3392]	; 166b4 <__assert_fail@plt+0x4b10>
   15970:	b	159cc <__assert_fail@plt+0x3e28>
   15974:	cmn	r7, #1
   15978:	moveq	r0, #0
   1597c:	beq	159e0 <__assert_fail@plt+0x3e3c>
   15980:	mov	r1, r7
   15984:	mov	r0, #-2147483648	; 0x80000000
   15988:	bl	2e504 <__assert_fail@plt+0x1c960>
   1598c:	cmp	r0, #9
   15990:	movgt	r0, #0
   15994:	movle	r0, #1
   15998:	b	159e0 <__assert_fail@plt+0x3e3c>
   1599c:	rsb	r3, r2, #-2147483600	; 0x80000030
   159a0:	cmp	r7, r3
   159a4:	movge	r3, #0
   159a8:	movlt	r3, #1
   159ac:	cmp	r3, #0
   159b0:	addeq	r7, r2, r7
   159b4:	subeq	r7, r7, #48	; 0x30
   159b8:	mvnne	r7, #-2147483648	; 0x80000000
   159bc:	ldrb	r3, [r4, #1]!
   159c0:	sub	r3, r3, #48	; 0x30
   159c4:	cmp	r3, #9
   159c8:	bhi	15a3c <__assert_fail@plt+0x3e98>
   159cc:	cmp	r7, #0
   159d0:	blt	15974 <__assert_fail@plt+0x3dd0>
   159d4:	cmp	r7, r8
   159d8:	movle	r0, #0
   159dc:	movgt	r0, #1
   159e0:	cmp	r0, #0
   159e4:	mvnne	r7, #-2147483648	; 0x80000000
   159e8:	bne	159bc <__assert_fail@plt+0x3e18>
   159ec:	add	r7, r7, r7, lsl #2
   159f0:	lsl	r7, r7, #1
   159f4:	ldrb	r2, [r4]
   159f8:	subs	r3, r2, #48	; 0x30
   159fc:	bmi	1599c <__assert_fail@plt+0x3df8>
   15a00:	cmp	r7, #0
   15a04:	blt	15a28 <__assert_fail@plt+0x3e84>
   15a08:	rsb	r3, r3, #2130706432	; 0x7f000000
   15a0c:	add	r3, r3, #16711680	; 0xff0000
   15a10:	add	r3, r3, #65280	; 0xff00
   15a14:	add	r3, r3, #255	; 0xff
   15a18:	cmp	r7, r3
   15a1c:	movle	r3, #0
   15a20:	movgt	r3, #1
   15a24:	b	159ac <__assert_fail@plt+0x3e08>
   15a28:	rsb	r1, r7, #-2147483648	; 0x80000000
   15a2c:	cmp	r3, r1
   15a30:	movge	r3, #0
   15a34:	movlt	r3, #1
   15a38:	b	159ac <__assert_fail@plt+0x3e08>
   15a3c:	ldrb	r2, [r4]
   15a40:	cmp	r2, #69	; 0x45
   15a44:	beq	15c54 <__assert_fail@plt+0x40b0>
   15a48:	cmp	r2, #79	; 0x4f
   15a4c:	movne	r2, #0
   15a50:	beq	15c54 <__assert_fail@plt+0x40b0>
   15a54:	ldrb	r1, [r4]
   15a58:	mov	r8, r1
   15a5c:	cmp	r1, #122	; 0x7a
   15a60:	ldrls	pc, [pc, r1, lsl #2]
   15a64:	b	15d4c <__assert_fail@plt+0x41a8>
   15a68:	andeq	r5, r1, r8, asr #26
   15a6c:	andeq	r5, r1, ip, asr #26
   15a70:	andeq	r5, r1, ip, asr #26
   15a74:	andeq	r5, r1, ip, asr #26
   15a78:	andeq	r5, r1, ip, asr #26
   15a7c:	andeq	r5, r1, ip, asr #26
   15a80:	andeq	r5, r1, ip, asr #26
   15a84:	andeq	r5, r1, ip, asr #26
   15a88:	andeq	r5, r1, ip, asr #26
   15a8c:	andeq	r5, r1, ip, asr #26
   15a90:	andeq	r5, r1, ip, asr #26
   15a94:	andeq	r5, r1, ip, asr #26
   15a98:	andeq	r5, r1, ip, asr #26
   15a9c:	andeq	r5, r1, ip, asr #26
   15aa0:	andeq	r5, r1, ip, asr #26
   15aa4:	andeq	r5, r1, ip, asr #26
   15aa8:	andeq	r5, r1, ip, asr #26
   15aac:	andeq	r5, r1, ip, asr #26
   15ab0:	andeq	r5, r1, ip, asr #26
   15ab4:	andeq	r5, r1, ip, asr #26
   15ab8:	andeq	r5, r1, ip, asr #26
   15abc:	andeq	r5, r1, ip, asr #26
   15ac0:	andeq	r5, r1, ip, asr #26
   15ac4:	andeq	r5, r1, ip, asr #26
   15ac8:	andeq	r5, r1, ip, asr #26
   15acc:	andeq	r5, r1, ip, asr #26
   15ad0:	andeq	r5, r1, ip, asr #26
   15ad4:	andeq	r5, r1, ip, asr #26
   15ad8:	andeq	r5, r1, ip, asr #26
   15adc:	andeq	r5, r1, ip, asr #26
   15ae0:	andeq	r5, r1, ip, asr #26
   15ae4:	andeq	r5, r1, ip, asr #26
   15ae8:	andeq	r5, r1, ip, asr #26
   15aec:	andeq	r5, r1, ip, asr #26
   15af0:	andeq	r5, r1, ip, asr #26
   15af4:	andeq	r5, r1, ip, asr #26
   15af8:	andeq	r5, r1, ip, asr #26
   15afc:	andeq	r5, r1, ip, lsr sp
   15b00:	andeq	r5, r1, ip, asr #26
   15b04:	andeq	r5, r1, ip, asr #26
   15b08:	andeq	r5, r1, ip, asr #26
   15b0c:	andeq	r5, r1, ip, asr #26
   15b10:	andeq	r5, r1, ip, asr #26
   15b14:	andeq	r5, r1, ip, asr #26
   15b18:	andeq	r5, r1, ip, asr #26
   15b1c:	andeq	r5, r1, ip, asr #26
   15b20:	andeq	r5, r1, ip, asr #26
   15b24:	andeq	r5, r1, ip, asr #26
   15b28:	andeq	r5, r1, ip, asr #26
   15b2c:	andeq	r5, r1, ip, asr #26
   15b30:	andeq	r5, r1, ip, asr #26
   15b34:	andeq	r5, r1, ip, asr #26
   15b38:	andeq	r5, r1, ip, asr #26
   15b3c:	andeq	r5, r1, ip, asr #26
   15b40:	andeq	r5, r1, ip, asr #26
   15b44:	andeq	r5, r1, ip, asr #26
   15b48:	andeq	r5, r1, ip, asr #26
   15b4c:	andeq	r5, r1, ip, asr #26
   15b50:	andeq	r5, r1, r8, lsl sp
   15b54:	andeq	r5, r1, ip, asr #26
   15b58:	andeq	r5, r1, ip, asr #26
   15b5c:	andeq	r5, r1, ip, asr #26
   15b60:	andeq	r5, r1, ip, asr #26
   15b64:	andeq	r5, r1, ip, asr #26
   15b68:	andeq	r5, r1, ip, asr #26
   15b6c:	ldrdeq	r5, [r1], -r4
   15b70:	andeq	r5, r1, r4, lsl pc
   15b74:	andeq	r6, r1, r8, asr #2
   15b78:	ldrdeq	r6, [r1], -ip
   15b7c:	andeq	r5, r1, ip, asr #26
   15b80:	strdeq	r6, [r1], -r0
   15b84:	andeq	r6, r1, r0, asr #20
   15b88:	andeq	r6, r1, r4, lsr #8
   15b8c:	andeq	r6, r1, ip, lsr r4
   15b90:	andeq	r5, r1, ip, asr #26
   15b94:	andeq	r5, r1, ip, asr #26
   15b98:	andeq	r5, r1, ip, asr #26
   15b9c:	andeq	r6, r1, r8, lsr #9
   15ba0:	strdeq	r6, [r1], -r4
   15ba4:	andeq	r5, r1, ip, asr #26
   15ba8:			; <UNDEFINED> instruction: 0x000167b8
   15bac:	andeq	r5, r1, ip, asr #26
   15bb0:	andeq	r5, r1, r8, asr #30
   15bb4:	andeq	r6, r1, r0, lsr r8
   15bb8:	andeq	r5, r1, ip, asr ip
   15bbc:	andeq	r6, r1, r8, lsl #20
   15bc0:	andeq	r6, r1, r0, asr #20
   15bc4:			; <UNDEFINED> instruction: 0x00016cb0
   15bc8:	strdeq	r6, [r1], -r4
   15bcc:	andeq	r6, r1, r0, lsr #26
   15bd0:			; <UNDEFINED> instruction: 0x00016db0
   15bd4:	andeq	r5, r1, ip, asr #26
   15bd8:	andeq	r5, r1, ip, asr #26
   15bdc:	andeq	r5, r1, ip, asr #26
   15be0:	andeq	r5, r1, ip, asr #26
   15be4:	andeq	r5, r1, ip, asr #26
   15be8:	andeq	r5, r1, ip, asr #26
   15bec:	muleq	r1, ip, lr
   15bf0:	strdeq	r5, [r1], -r4
   15bf4:	andeq	r5, r1, r4, lsr pc
   15bf8:	strdeq	r6, [r1], -r4
   15bfc:	andeq	r6, r1, ip, lsl #4
   15c00:	andeq	r5, r1, ip, asr #26
   15c04:	andeq	r6, r1, r0, asr #20
   15c08:	strdeq	r5, [r1], -r4
   15c0c:	andeq	r5, r1, ip, asr #26
   15c10:	andeq	r6, r1, r4, ror r4
   15c14:	andeq	r6, r1, r0, asr r4
   15c18:	andeq	r6, r1, r4, ror #8
   15c1c:	andeq	r6, r1, r0, asr #9
   15c20:	andeq	r6, r1, ip, ror #13
   15c24:	andeq	r5, r1, ip, asr #26
   15c28:	ldrdeq	r6, [r1], -r8
   15c2c:	andeq	r6, r1, r0, ror #15
   15c30:	ldrdeq	r5, [r1], -ip
   15c34:	andeq	r6, r1, r8, asr #16
   15c38:	andeq	r6, r1, r8, lsl #18
   15c3c:	ldrdeq	r6, [r1], -r4
   15c40:	andeq	r5, r1, ip, asr #26
   15c44:	andeq	r6, r1, r8, lsl #26
   15c48:	andeq	r6, r1, r8, asr #3
   15c4c:	andeq	r6, r1, ip, asr sp
   15c50:	strdeq	r6, [r1], -r4
   15c54:	add	r4, r4, #1
   15c58:	b	15a54 <__assert_fail@plt+0x3eb0>
   15c5c:	mvn	r8, #0
   15c60:	ldr	r3, [pc, #2640]	; 166b8 <__assert_fail@plt+0x4b14>
   15c64:	str	r3, [sp, #44]	; 0x2c
   15c68:	ldr	r3, [sp, #1168]	; 0x490
   15c6c:	str	r3, [sp, #16]
   15c70:	ldr	r3, [sp, #1164]	; 0x48c
   15c74:	str	r3, [sp, #12]
   15c78:	ldr	r3, [sp, #1160]	; 0x488
   15c7c:	str	r3, [sp, #8]
   15c80:	str	r8, [sp, #4]
   15c84:	str	r5, [sp]
   15c88:	ldr	r3, [sp, #32]
   15c8c:	ldr	r2, [sp, #28]
   15c90:	ldr	r1, [sp, #44]	; 0x2c
   15c94:	mov	r0, #0
   15c98:	bl	156e0 <__assert_fail@plt+0x3b3c>
   15c9c:	mvn	r3, r7
   15ca0:	lsr	r3, r3, #31
   15ca4:	cmp	r5, #45	; 0x2d
   15ca8:	moveq	r3, #0
   15cac:	cmp	r3, #0
   15cb0:	moveq	r7, #0
   15cb4:	cmp	r7, r0
   15cb8:	movcs	r9, r7
   15cbc:	movcc	r9, r0
   15cc0:	mvn	r2, fp
   15cc4:	cmp	r9, r2
   15cc8:	bcs	15f6c <__assert_fail@plt+0x43c8>
   15ccc:	ldr	r2, [sp, #24]
   15cd0:	cmp	r2, #0
   15cd4:	beq	15fd4 <__assert_fail@plt+0x4430>
   15cd8:	cmp	r7, r0
   15cdc:	bls	15fa0 <__assert_fail@plt+0x43fc>
   15ce0:	sub	r7, r7, r0
   15ce4:	cmp	r5, #43	; 0x2b
   15ce8:	cmpne	r5, #48	; 0x30
   15cec:	beq	15f7c <__assert_fail@plt+0x43d8>
   15cf0:	cmp	r7, #0
   15cf4:	movne	r6, #0
   15cf8:	beq	15fa0 <__assert_fail@plt+0x43fc>
   15cfc:	ldr	r1, [sp, #24]
   15d00:	mov	r0, #32
   15d04:	bl	11a90 <fputc@plt>
   15d08:	add	r6, r6, #1
   15d0c:	cmp	r7, r6
   15d10:	bne	15cfc <__assert_fail@plt+0x4158>
   15d14:	b	15fa0 <__assert_fail@plt+0x43fc>
   15d18:	add	r0, r4, #1
   15d1c:	ldrb	r3, [r4, #1]
   15d20:	cmp	r3, #58	; 0x3a
   15d24:	movne	lr, #1
   15d28:	beq	16ed4 <__assert_fail@plt+0x5330>
   15d2c:	cmp	r3, #122	; 0x7a
   15d30:	moveq	r4, r0
   15d34:	bne	15d4c <__assert_fail@plt+0x41a8>
   15d38:	b	16ef8 <__assert_fail@plt+0x5354>
   15d3c:	sub	r3, r4, #1
   15d40:	cmp	r9, r3
   15d44:	beq	15dd0 <__assert_fail@plt+0x422c>
   15d48:	sub	r4, r4, #1
   15d4c:	sub	r8, r4, r9
   15d50:	add	r8, r8, #1
   15d54:	subs	r3, r5, #45	; 0x2d
   15d58:	movne	r3, #1
   15d5c:	cmp	r7, #0
   15d60:	movlt	r3, #0
   15d64:	cmp	r3, #0
   15d68:	moveq	r7, #0
   15d6c:	mov	r6, r7
   15d70:	cmp	r7, r8
   15d74:	movcc	r7, r8
   15d78:	mvn	r3, fp
   15d7c:	cmp	r7, r3
   15d80:	bcs	17014 <__assert_fail@plt+0x5470>
   15d84:	ldr	r3, [sp, #24]
   15d88:	cmp	r3, #0
   15d8c:	beq	17064 <__assert_fail@plt+0x54c0>
   15d90:	cmp	r6, r8
   15d94:	bls	17048 <__assert_fail@plt+0x54a4>
   15d98:	sub	r6, r6, r8
   15d9c:	cmp	r5, #43	; 0x2b
   15da0:	cmpne	r5, #48	; 0x30
   15da4:	beq	17024 <__assert_fail@plt+0x5480>
   15da8:	cmp	r6, #0
   15dac:	movne	r5, #0
   15db0:	beq	17048 <__assert_fail@plt+0x54a4>
   15db4:	ldr	r1, [sp, #24]
   15db8:	mov	r0, #32
   15dbc:	bl	11a90 <fputc@plt>
   15dc0:	add	r5, r5, #1
   15dc4:	cmp	r6, r5
   15dc8:	bne	15db4 <__assert_fail@plt+0x4210>
   15dcc:	b	17048 <__assert_fail@plt+0x54a4>
   15dd0:	subs	r3, r5, #45	; 0x2d
   15dd4:	movne	r3, #1
   15dd8:	cmp	r7, #0
   15ddc:	movlt	r3, #0
   15de0:	cmp	r3, #0
   15de4:	moveq	r7, #0
   15de8:	mov	r6, r7
   15dec:	cmp	r7, #1
   15df0:	movcc	r7, #1
   15df4:	mvn	r3, fp
   15df8:	cmp	r7, r3
   15dfc:	movcs	r3, #34	; 0x22
   15e00:	ldrcs	r2, [sp, #36]	; 0x24
   15e04:	strcs	r3, [r2]
   15e08:	bcs	1580c <__assert_fail@plt+0x3c68>
   15e0c:	ldr	r3, [sp, #24]
   15e10:	cmp	r3, #0
   15e14:	beq	15e4c <__assert_fail@plt+0x42a8>
   15e18:	cmp	r6, #1
   15e1c:	bls	15e40 <__assert_fail@plt+0x429c>
   15e20:	sub	r6, r6, #1
   15e24:	cmp	r5, #43	; 0x2b
   15e28:	cmpne	r5, #48	; 0x30
   15e2c:	beq	15e54 <__assert_fail@plt+0x42b0>
   15e30:	cmp	r6, #0
   15e34:	movne	r5, #0
   15e38:	movne	r8, #32
   15e3c:	bne	15e80 <__assert_fail@plt+0x42dc>
   15e40:	ldr	r1, [sp, #24]
   15e44:	ldrb	r0, [r4]
   15e48:	bl	11a90 <fputc@plt>
   15e4c:	add	fp, fp, r7
   15e50:	b	157c8 <__assert_fail@plt+0x3c24>
   15e54:	cmp	r6, #0
   15e58:	beq	15e40 <__assert_fail@plt+0x429c>
   15e5c:	mov	r5, #0
   15e60:	mov	r8, #48	; 0x30
   15e64:	ldr	r1, [sp, #24]
   15e68:	mov	r0, r8
   15e6c:	bl	11a90 <fputc@plt>
   15e70:	add	r5, r5, #1
   15e74:	cmp	r6, r5
   15e78:	bne	15e64 <__assert_fail@plt+0x42c0>
   15e7c:	b	15e40 <__assert_fail@plt+0x429c>
   15e80:	ldr	r1, [sp, #24]
   15e84:	mov	r0, r8
   15e88:	bl	11a90 <fputc@plt>
   15e8c:	add	r5, r5, #1
   15e90:	cmp	r6, r5
   15e94:	bne	15e80 <__assert_fail@plt+0x42dc>
   15e98:	b	15e40 <__assert_fail@plt+0x429c>
   15e9c:	cmp	r2, #0
   15ea0:	bne	15d4c <__assert_fail@plt+0x41a8>
   15ea4:	ldr	r3, [sp, #32]
   15ea8:	cmp	r6, #0
   15eac:	movne	r3, r6
   15eb0:	str	r3, [sp, #32]
   15eb4:	mov	r8, #97	; 0x61
   15eb8:	mov	r3, #32
   15ebc:	strb	r3, [sp, #72]	; 0x48
   15ec0:	mov	r3, #37	; 0x25
   15ec4:	strb	r3, [sp, #73]	; 0x49
   15ec8:	mov	r6, #0
   15ecc:	add	r3, sp, #74	; 0x4a
   15ed0:	b	16010 <__assert_fail@plt+0x446c>
   15ed4:	cmp	r2, #0
   15ed8:	bne	15d4c <__assert_fail@plt+0x41a8>
   15edc:	ldr	r3, [sp, #32]
   15ee0:	cmp	r6, #0
   15ee4:	movne	r3, r6
   15ee8:	str	r3, [sp, #32]
   15eec:	mov	r8, #65	; 0x41
   15ef0:	b	15eb8 <__assert_fail@plt+0x4314>
   15ef4:	ldr	r3, [sp, #32]
   15ef8:	cmp	r6, #0
   15efc:	movne	r3, r6
   15f00:	str	r3, [sp, #32]
   15f04:	cmp	r2, #69	; 0x45
   15f08:	movne	r6, #0
   15f0c:	bne	15fe8 <__assert_fail@plt+0x4444>
   15f10:	b	15d4c <__assert_fail@plt+0x41a8>
   15f14:	cmp	r2, #69	; 0x45
   15f18:	beq	15d4c <__assert_fail@plt+0x41a8>
   15f1c:	cmp	r6, #0
   15f20:	moveq	r8, #66	; 0x42
   15f24:	strne	r6, [sp, #32]
   15f28:	movne	r8, #66	; 0x42
   15f2c:	movne	r6, #0
   15f30:	b	15fe8 <__assert_fail@plt+0x4444>
   15f34:	cmp	r2, #79	; 0x4f
   15f38:	beq	15d4c <__assert_fail@plt+0x41a8>
   15f3c:	mov	r8, #99	; 0x63
   15f40:	mov	r6, #0
   15f44:	b	15fe8 <__assert_fail@plt+0x4444>
   15f48:	mvn	r8, #0
   15f4c:	ldr	r3, [pc, #1896]	; 166bc <__assert_fail@plt+0x4b18>
   15f50:	str	r3, [sp, #44]	; 0x2c
   15f54:	b	15c68 <__assert_fail@plt+0x40c4>
   15f58:	mov	r8, #4
   15f5c:	ldr	r3, [pc, #1884]	; 166c0 <__assert_fail@plt+0x4b1c>
   15f60:	str	r3, [sp, #44]	; 0x2c
   15f64:	mov	r5, #43	; 0x2b
   15f68:	b	15c68 <__assert_fail@plt+0x40c4>
   15f6c:	mov	r3, #34	; 0x22
   15f70:	ldr	r2, [sp, #36]	; 0x24
   15f74:	str	r3, [r2]
   15f78:	b	1580c <__assert_fail@plt+0x3c68>
   15f7c:	cmp	r7, #0
   15f80:	beq	15fa0 <__assert_fail@plt+0x43fc>
   15f84:	mov	r6, #0
   15f88:	ldr	r1, [sp, #24]
   15f8c:	mov	r0, #48	; 0x30
   15f90:	bl	11a90 <fputc@plt>
   15f94:	add	r6, r6, #1
   15f98:	cmp	r7, r6
   15f9c:	bne	15f88 <__assert_fail@plt+0x43e4>
   15fa0:	ldr	r3, [sp, #1168]	; 0x490
   15fa4:	str	r3, [sp, #16]
   15fa8:	ldr	r3, [sp, #1164]	; 0x48c
   15fac:	str	r3, [sp, #12]
   15fb0:	ldr	r3, [sp, #1160]	; 0x488
   15fb4:	str	r3, [sp, #8]
   15fb8:	str	r8, [sp, #4]
   15fbc:	str	r5, [sp]
   15fc0:	ldr	r3, [sp, #32]
   15fc4:	ldr	r2, [sp, #28]
   15fc8:	ldr	r1, [sp, #44]	; 0x2c
   15fcc:	ldr	r0, [sp, #24]
   15fd0:	bl	156e0 <__assert_fail@plt+0x3b3c>
   15fd4:	add	fp, fp, r9
   15fd8:	b	157c8 <__assert_fail@plt+0x3c24>
   15fdc:	mov	r6, #0
   15fe0:	b	15fe8 <__assert_fail@plt+0x4444>
   15fe4:	mov	r6, #0
   15fe8:	mov	r3, #32
   15fec:	strb	r3, [sp, #72]	; 0x48
   15ff0:	mov	r3, #37	; 0x25
   15ff4:	strb	r3, [sp, #73]	; 0x49
   15ff8:	cmp	r2, #0
   15ffc:	addeq	r3, sp, #72	; 0x48
   16000:	addeq	r3, sp, #74	; 0x4a
   16004:	beq	16010 <__assert_fail@plt+0x446c>
   16008:	strb	r2, [sp, #74]	; 0x4a
   1600c:	add	r3, sp, #75	; 0x4b
   16010:	strb	r8, [r3]
   16014:	mov	r2, #0
   16018:	strb	r2, [r3, #1]
   1601c:	ldr	r3, [sp, #28]
   16020:	add	r2, sp, #72	; 0x48
   16024:	mov	r1, #1024	; 0x400
   16028:	add	r0, sp, #88	; 0x58
   1602c:	bl	11910 <strftime@plt>
   16030:	cmp	r0, #0
   16034:	beq	157c8 <__assert_fail@plt+0x3c24>
   16038:	sub	r8, r0, #1
   1603c:	mvn	r3, r7
   16040:	lsr	r3, r3, #31
   16044:	cmp	r5, #45	; 0x2d
   16048:	moveq	r3, #0
   1604c:	cmp	r3, #0
   16050:	moveq	r7, #0
   16054:	cmp	r7, r8
   16058:	movcs	r9, r7
   1605c:	movcc	r9, r8
   16060:	mvn	r2, fp
   16064:	cmp	r9, r2
   16068:	bcs	160b8 <__assert_fail@plt+0x4514>
   1606c:	ldr	r2, [sp, #24]
   16070:	cmp	r2, #0
   16074:	beq	16124 <__assert_fail@plt+0x4580>
   16078:	cmp	r7, r8
   1607c:	bls	160ec <__assert_fail@plt+0x4548>
   16080:	sub	r7, r7, r8
   16084:	cmp	r5, #43	; 0x2b
   16088:	cmpne	r5, #48	; 0x30
   1608c:	beq	160c8 <__assert_fail@plt+0x4524>
   16090:	cmp	r7, #0
   16094:	movne	r5, #0
   16098:	beq	160ec <__assert_fail@plt+0x4548>
   1609c:	ldr	r1, [sp, #24]
   160a0:	mov	r0, #32
   160a4:	bl	11a90 <fputc@plt>
   160a8:	add	r5, r5, #1
   160ac:	cmp	r7, r5
   160b0:	bne	1609c <__assert_fail@plt+0x44f8>
   160b4:	b	160ec <__assert_fail@plt+0x4548>
   160b8:	mov	r3, #34	; 0x22
   160bc:	ldr	r2, [sp, #36]	; 0x24
   160c0:	str	r3, [r2]
   160c4:	b	1580c <__assert_fail@plt+0x3c68>
   160c8:	cmp	r7, #0
   160cc:	beq	160ec <__assert_fail@plt+0x4548>
   160d0:	mov	r5, #0
   160d4:	ldr	r1, [sp, #24]
   160d8:	mov	r0, #48	; 0x30
   160dc:	bl	11a90 <fputc@plt>
   160e0:	add	r5, r5, #1
   160e4:	cmp	r7, r5
   160e8:	bne	160d4 <__assert_fail@plt+0x4530>
   160ec:	cmp	r6, #0
   160f0:	bne	16114 <__assert_fail@plt+0x4570>
   160f4:	ldr	r3, [sp, #32]
   160f8:	cmp	r3, #0
   160fc:	beq	1612c <__assert_fail@plt+0x4588>
   16100:	mov	r2, r8
   16104:	add	r1, sp, #89	; 0x59
   16108:	ldr	r0, [sp, #24]
   1610c:	bl	156a0 <__assert_fail@plt+0x3afc>
   16110:	b	16124 <__assert_fail@plt+0x4580>
   16114:	mov	r2, r8
   16118:	add	r1, sp, #89	; 0x59
   1611c:	ldr	r0, [sp, #24]
   16120:	bl	15660 <__assert_fail@plt+0x3abc>
   16124:	add	fp, fp, r9
   16128:	b	157c8 <__assert_fail@plt+0x3c24>
   1612c:	ldr	r3, [sp, #24]
   16130:	mov	r2, #1
   16134:	mov	r1, r8
   16138:	add	r0, sp, #88	; 0x58
   1613c:	add	r0, r0, r2
   16140:	bl	11868 <fwrite@plt>
   16144:	b	16124 <__assert_fail@plt+0x4580>
   16148:	cmp	r2, #69	; 0x45
   1614c:	beq	17098 <__assert_fail@plt+0x54f4>
   16150:	ldr	r3, [sp, #28]
   16154:	ldr	r1, [r3, #20]
   16158:	ldr	r3, [pc, #1400]	; 166d8 <__assert_fail@plt+0x4b34>
   1615c:	cmp	r1, r3
   16160:	movge	r3, #0
   16164:	movlt	r3, #1
   16168:	str	r3, [sp, #44]	; 0x2c
   1616c:	add	r3, r1, #1888	; 0x760
   16170:	add	r3, r3, #12
   16174:	ldr	r0, [pc, #1352]	; 166c4 <__assert_fail@plt+0x4b20>
   16178:	cmp	r3, r0
   1617c:	movhi	r3, #0
   16180:	movls	r3, #1
   16184:	mvn	r0, #98	; 0x62
   16188:	mla	r3, r0, r3, r1
   1618c:	ldr	r1, [pc, #1352]	; 166dc <__assert_fail@plt+0x4b38>
   16190:	smull	r0, r1, r1, r3
   16194:	asr	r3, r3, #31
   16198:	rsb	r3, r3, r1, asr #5
   1619c:	add	r3, r3, #19
   161a0:	mov	lr, #2
   161a4:	ldr	r1, [sp, #1152]	; 0x480
   161a8:	cmp	r5, #0
   161ac:	moveq	r5, r1
   161b0:	cmp	r5, #43	; 0x2b
   161b4:	movne	r1, #0
   161b8:	beq	162fc <__assert_fail@plt+0x4758>
   161bc:	mov	r9, r1
   161c0:	mov	r0, #0
   161c4:	b	16238 <__assert_fail@plt+0x4694>
   161c8:	cmp	r2, #79	; 0x4f
   161cc:	beq	15d4c <__assert_fail@plt+0x41a8>
   161d0:	mov	r8, #120	; 0x78
   161d4:	mov	r6, #0
   161d8:	b	15fe8 <__assert_fail@plt+0x4444>
   161dc:	cmp	r2, #0
   161e0:	bne	15d4c <__assert_fail@plt+0x41a8>
   161e4:	mvn	r8, #0
   161e8:	ldr	r3, [pc, #1240]	; 166c8 <__assert_fail@plt+0x4b24>
   161ec:	str	r3, [sp, #44]	; 0x2c
   161f0:	b	15c68 <__assert_fail@plt+0x40c4>
   161f4:	cmp	r2, #69	; 0x45
   161f8:	beq	15d4c <__assert_fail@plt+0x41a8>
   161fc:	ldr	r3, [sp, #28]
   16200:	ldr	r3, [r3, #12]
   16204:	mov	lr, #2
   16208:	b	16228 <__assert_fail@plt+0x4684>
   1620c:	cmp	r2, #69	; 0x45
   16210:	beq	15d4c <__assert_fail@plt+0x41a8>
   16214:	ldr	r3, [sp, #28]
   16218:	ldr	r3, [r3, #12]
   1621c:	cmp	r5, #0
   16220:	mov	lr, #2
   16224:	moveq	r5, #95	; 0x5f
   16228:	lsr	r1, r3, #31
   1622c:	str	r1, [sp, #44]	; 0x2c
   16230:	mov	r0, #0
   16234:	mov	r9, r0
   16238:	ldr	ip, [sp, #44]	; 0x2c
   1623c:	eor	r1, ip, #1
   16240:	cmp	r2, #79	; 0x4f
   16244:	movne	r1, #0
   16248:	andeq	r1, r1, #1
   1624c:	cmp	r1, #0
   16250:	bne	15fe4 <__assert_fail@plt+0x4440>
   16254:	mov	r1, ip
   16258:	cmp	ip, #0
   1625c:	rsbne	r3, r3, #0
   16260:	add	r6, sp, #86	; 0x56
   16264:	mov	r8, #58	; 0x3a
   16268:	mov	ip, r3
   1626c:	tst	r0, #1
   16270:	subne	r1, r6, #1
   16274:	strbne	r8, [r6, #-1]
   16278:	moveq	r1, r6
   1627c:	sub	r6, r1, #1
   16280:	ldr	r3, [pc, #1092]	; 166cc <__assert_fail@plt+0x4b28>
   16284:	umull	r3, r2, r3, ip
   16288:	lsr	r2, r2, #3
   1628c:	add	r3, r2, r2, lsl #2
   16290:	sub	r3, ip, r3, lsl #1
   16294:	add	r3, r3, #48	; 0x30
   16298:	strb	r3, [r1, #-1]
   1629c:	mov	ip, r2
   162a0:	asrs	r0, r0, #1
   162a4:	movne	r3, #1
   162a8:	moveq	r3, #0
   162ac:	cmp	r2, #0
   162b0:	moveq	r2, r3
   162b4:	orrne	r2, r3, #1
   162b8:	cmp	r2, #0
   162bc:	bne	1626c <__assert_fail@plt+0x46c8>
   162c0:	cmp	r5, #0
   162c4:	moveq	r5, #48	; 0x30
   162c8:	cmp	r7, #0
   162cc:	movlt	r7, lr
   162d0:	ldr	r3, [sp, #44]	; 0x2c
   162d4:	cmp	r3, #0
   162d8:	bne	170c4 <__assert_fail@plt+0x5520>
   162dc:	cmp	r9, #0
   162e0:	bne	171a8 <__assert_fail@plt+0x5604>
   162e4:	add	r8, sp, #86	; 0x56
   162e8:	sub	r3, r8, r6
   162ec:	str	r3, [sp, #44]	; 0x2c
   162f0:	subs	r9, r5, #45	; 0x2d
   162f4:	movne	r9, #1
   162f8:	b	1712c <__assert_fail@plt+0x5588>
   162fc:	ldr	r0, [pc, #972]	; 166d0 <__assert_fail@plt+0x4b2c>
   16300:	cmp	lr, #2
   16304:	moveq	r0, #99	; 0x63
   16308:	cmp	lr, r7
   1630c:	movge	r1, #0
   16310:	movlt	r1, #1
   16314:	cmp	r3, r0
   16318:	orrhi	r1, r1, #1
   1631c:	b	161bc <__assert_fail@plt+0x4618>
   16320:	ldr	r3, [sp, #24]
   16324:	cmp	r3, #0
   16328:	beq	16364 <__assert_fail@plt+0x47c0>
   1632c:	str	r8, [sp, #68]	; 0x44
   16330:	cmp	r8, #0
   16334:	beq	16364 <__assert_fail@plt+0x47c0>
   16338:	mov	r3, #0
   1633c:	str	r3, [sp, #60]	; 0x3c
   16340:	ldr	r1, [sp, #24]
   16344:	mov	r0, #32
   16348:	bl	11a90 <fputc@plt>
   1634c:	ldr	r3, [sp, #60]	; 0x3c
   16350:	add	r3, r3, #1
   16354:	str	r3, [sp, #60]	; 0x3c
   16358:	ldr	r2, [sp, #68]	; 0x44
   1635c:	cmp	r3, r2
   16360:	bne	16340 <__assert_fail@plt+0x479c>
   16364:	add	fp, fp, r8
   16368:	sub	r7, r7, r8
   1636c:	b	17104 <__assert_fail@plt+0x5560>
   16370:	mov	r3, #34	; 0x22
   16374:	ldr	r2, [sp, #36]	; 0x24
   16378:	str	r3, [r2]
   1637c:	b	1580c <__assert_fail@plt+0x3c68>
   16380:	mov	r3, #34	; 0x22
   16384:	ldr	r2, [sp, #36]	; 0x24
   16388:	str	r3, [r2]
   1638c:	b	1580c <__assert_fail@plt+0x3c68>
   16390:	cmp	r7, #0
   16394:	beq	163b4 <__assert_fail@plt+0x4810>
   16398:	mov	r5, #0
   1639c:	ldr	r1, [sp, #24]
   163a0:	mov	r0, #48	; 0x30
   163a4:	bl	11a90 <fputc@plt>
   163a8:	add	r5, r5, #1
   163ac:	cmp	r7, r5
   163b0:	bne	1639c <__assert_fail@plt+0x47f8>
   163b4:	ldr	r3, [sp, #32]
   163b8:	cmp	r3, #0
   163bc:	beq	163d8 <__assert_fail@plt+0x4834>
   163c0:	mov	r2, r8
   163c4:	mov	r1, r6
   163c8:	ldr	r0, [sp, #24]
   163cc:	bl	156a0 <__assert_fail@plt+0x3afc>
   163d0:	add	fp, fp, r9
   163d4:	b	157c8 <__assert_fail@plt+0x3c24>
   163d8:	ldr	r3, [sp, #24]
   163dc:	mov	r2, #1
   163e0:	mov	r1, r8
   163e4:	mov	r0, r6
   163e8:	bl	11868 <fwrite@plt>
   163ec:	b	163d0 <__assert_fail@plt+0x482c>
   163f0:	cmp	r2, #0
   163f4:	bne	15d4c <__assert_fail@plt+0x41a8>
   163f8:	lsr	r3, r7, #31
   163fc:	cmp	r5, #0
   16400:	movne	r3, #0
   16404:	andeq	r3, r3, #1
   16408:	cmp	r3, #0
   1640c:	bne	15f58 <__assert_fail@plt+0x43b4>
   16410:	sub	r8, r7, #6
   16414:	bic	r8, r8, r8, asr #31
   16418:	ldr	r3, [pc, #672]	; 166c0 <__assert_fail@plt+0x4b1c>
   1641c:	str	r3, [sp, #44]	; 0x2c
   16420:	b	15c68 <__assert_fail@plt+0x40c4>
   16424:	cmp	r2, #69	; 0x45
   16428:	beq	15d4c <__assert_fail@plt+0x41a8>
   1642c:	ldr	r3, [sp, #28]
   16430:	ldr	r3, [r3, #8]
   16434:	mov	lr, #2
   16438:	b	16228 <__assert_fail@plt+0x4684>
   1643c:	cmp	r2, #69	; 0x45
   16440:	beq	15d4c <__assert_fail@plt+0x41a8>
   16444:	ldr	r3, [sp, #40]	; 0x28
   16448:	mov	lr, #2
   1644c:	b	16228 <__assert_fail@plt+0x4684>
   16450:	cmp	r2, #69	; 0x45
   16454:	beq	15d4c <__assert_fail@plt+0x41a8>
   16458:	ldr	r3, [sp, #28]
   1645c:	ldr	r3, [r3, #8]
   16460:	b	1621c <__assert_fail@plt+0x4678>
   16464:	cmp	r2, #69	; 0x45
   16468:	beq	15d4c <__assert_fail@plt+0x41a8>
   1646c:	ldr	r3, [sp, #40]	; 0x28
   16470:	b	1621c <__assert_fail@plt+0x4678>
   16474:	cmp	r2, #69	; 0x45
   16478:	beq	15d4c <__assert_fail@plt+0x41a8>
   1647c:	ldr	r3, [sp, #28]
   16480:	ldr	r3, [r3, #28]
   16484:	cmn	r3, #1
   16488:	movge	r1, #0
   1648c:	movlt	r1, #1
   16490:	str	r1, [sp, #44]	; 0x2c
   16494:	add	r3, r3, #1
   16498:	mov	r0, #0
   1649c:	mov	r9, r0
   164a0:	mov	lr, #3
   164a4:	b	16238 <__assert_fail@plt+0x4694>
   164a8:	cmp	r2, #69	; 0x45
   164ac:	beq	15d4c <__assert_fail@plt+0x41a8>
   164b0:	ldr	r3, [sp, #28]
   164b4:	ldr	r3, [r3, #4]
   164b8:	mov	lr, #2
   164bc:	b	16228 <__assert_fail@plt+0x4684>
   164c0:	cmp	r2, #69	; 0x45
   164c4:	beq	15d4c <__assert_fail@plt+0x41a8>
   164c8:	ldr	r3, [sp, #28]
   164cc:	ldr	r3, [r3, #16]
   164d0:	cmn	r3, #1
   164d4:	movge	r1, #0
   164d8:	movlt	r1, #1
   164dc:	str	r1, [sp, #44]	; 0x2c
   164e0:	add	r3, r3, #1
   164e4:	mov	r0, #0
   164e8:	mov	r9, r0
   164ec:	mov	lr, #2
   164f0:	b	16238 <__assert_fail@plt+0x4694>
   164f4:	cmp	r2, #69	; 0x45
   164f8:	beq	15d4c <__assert_fail@plt+0x41a8>
   164fc:	cmp	r7, #0
   16500:	movle	r7, #9
   16504:	ldr	r3, [sp, #1168]	; 0x490
   16508:	mov	r6, #9
   1650c:	b	16520 <__assert_fail@plt+0x497c>
   16510:	sub	r6, r6, #1
   16514:	smull	r1, r2, sl, r3
   16518:	asr	r3, r3, #31
   1651c:	rsb	r3, r3, r2, asr #2
   16520:	cmp	r6, r7
   16524:	bgt	16510 <__assert_fail@plt+0x496c>
   16528:	cmp	r6, #1
   1652c:	ble	16548 <__assert_fail@plt+0x49a4>
   16530:	smull	r2, r1, sl, r3
   16534:	asr	r2, r3, #31
   16538:	rsb	r2, r2, r1, asr #2
   1653c:	add	r2, r2, r2, lsl #2
   16540:	cmp	r3, r2, lsl #1
   16544:	beq	16510 <__assert_fail@plt+0x496c>
   16548:	cmp	r6, #0
   1654c:	ble	16580 <__assert_fail@plt+0x49dc>
   16550:	add	r1, sp, #72	; 0x48
   16554:	add	r0, r1, r6
   16558:	smull	r2, ip, sl, r3
   1655c:	asr	r2, r3, #31
   16560:	rsb	r2, r2, ip, asr #2
   16564:	add	ip, r2, r2, lsl #2
   16568:	sub	r3, r3, ip, lsl #1
   1656c:	add	r3, r3, #48	; 0x30
   16570:	strb	r3, [r0, #-1]!
   16574:	mov	r3, r2
   16578:	cmp	r0, r1
   1657c:	bne	16558 <__assert_fail@plt+0x49b4>
   16580:	cmp	r5, #0
   16584:	moveq	r5, #48	; 0x30
   16588:	mov	r1, r6
   1658c:	cmp	r6, #0
   16590:	movcs	r8, r6
   16594:	movcc	r8, #0
   16598:	mvn	r3, fp
   1659c:	cmp	r8, r3
   165a0:	bcs	16630 <__assert_fail@plt+0x4a8c>
   165a4:	ldr	r3, [sp, #24]
   165a8:	cmp	r3, #0
   165ac:	beq	165cc <__assert_fail@plt+0x4a28>
   165b0:	ldr	r2, [sp, #32]
   165b4:	cmp	r2, #0
   165b8:	beq	16640 <__assert_fail@plt+0x4a9c>
   165bc:	mov	r2, r6
   165c0:	add	r1, sp, #72	; 0x48
   165c4:	mov	r0, r3
   165c8:	bl	156a0 <__assert_fail@plt+0x3afc>
   165cc:	add	r8, r8, fp
   165d0:	cmp	r5, #45	; 0x2d
   165d4:	beq	171b4 <__assert_fail@plt+0x5610>
   165d8:	subs	r6, r7, r6
   165dc:	bmi	171b4 <__assert_fail@plt+0x5610>
   165e0:	mov	r7, r6
   165e4:	cmp	r6, #0
   165e8:	movcs	fp, r6
   165ec:	movcc	fp, #0
   165f0:	mvn	r3, r8
   165f4:	cmp	fp, r3
   165f8:	bcs	16654 <__assert_fail@plt+0x4ab0>
   165fc:	ldr	r3, [sp, #24]
   16600:	cmp	r6, #0
   16604:	cmpne	r3, #0
   16608:	beq	16628 <__assert_fail@plt+0x4a84>
   1660c:	cmp	r5, #43	; 0x2b
   16610:	cmpne	r5, #48	; 0x30
   16614:	beq	16664 <__assert_fail@plt+0x4ac0>
   16618:	cmp	r6, #0
   1661c:	movne	r5, #0
   16620:	movne	r6, #32
   16624:	bne	16690 <__assert_fail@plt+0x4aec>
   16628:	add	fp, r8, fp
   1662c:	b	157c8 <__assert_fail@plt+0x3c24>
   16630:	mov	r3, #34	; 0x22
   16634:	ldr	r2, [sp, #36]	; 0x24
   16638:	str	r3, [r2]
   1663c:	b	1580c <__assert_fail@plt+0x3c68>
   16640:	ldr	r3, [sp, #24]
   16644:	mov	r2, #1
   16648:	add	r0, sp, #72	; 0x48
   1664c:	bl	11868 <fwrite@plt>
   16650:	b	165cc <__assert_fail@plt+0x4a28>
   16654:	mov	r3, #34	; 0x22
   16658:	ldr	r2, [sp, #36]	; 0x24
   1665c:	str	r3, [r2]
   16660:	b	1580c <__assert_fail@plt+0x3c68>
   16664:	cmp	r6, #0
   16668:	beq	16628 <__assert_fail@plt+0x4a84>
   1666c:	mov	r5, #0
   16670:	mov	r6, #48	; 0x30
   16674:	ldr	r1, [sp, #24]
   16678:	mov	r0, r6
   1667c:	bl	11a90 <fputc@plt>
   16680:	add	r5, r5, #1
   16684:	cmp	r7, r5
   16688:	bne	16674 <__assert_fail@plt+0x4ad0>
   1668c:	b	16628 <__assert_fail@plt+0x4a84>
   16690:	ldr	r1, [sp, #24]
   16694:	mov	r0, r6
   16698:	bl	11a90 <fputc@plt>
   1669c:	add	r5, r5, #1
   166a0:	cmp	r7, r5
   166a4:	bne	16690 <__assert_fail@plt+0x4aec>
   166a8:	b	16628 <__assert_fail@plt+0x4a84>
   166ac:	andeq	r0, r3, ip, lsl #15
   166b0:	strbtvs	r6, [r6], -r7, ror #12
   166b4:	stcleq	12, cr12, [ip], {204}	; 0xcc
   166b8:	andeq	r0, r3, r0, lsl #14
   166bc:	strdeq	r0, [r3], -r8
   166c0:	andeq	r0, r3, r0, ror #3
   166c4:	andeq	r0, r0, fp, ror #14
   166c8:	andeq	r0, r3, ip, lsl #14
   166cc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   166d0:	andeq	r2, r0, pc, lsl #14
   166d4:	subls	r2, r9, #-1828716544	; 0x93000000
   166d8:			; <UNDEFINED> instruction: 0xfffff894
   166dc:	mvnpl	r8, pc, lsl r5
   166e0:			; <UNDEFINED> instruction: 0x91a2b3c5
   166e4:	stmhi	r8, {r0, r3, r7, fp, pc}
   166e8:	andeq	r2, r0, r0, lsl r7
   166ec:	mvn	r3, r7
   166f0:	lsr	r3, r3, #31
   166f4:	cmp	r5, #45	; 0x2d
   166f8:	moveq	r3, #0
   166fc:	cmp	r3, #0
   16700:	moveq	r7, #0
   16704:	mov	r6, r7
   16708:	cmp	r7, #1
   1670c:	movcc	r7, #1
   16710:	mvn	r3, fp
   16714:	cmp	r7, r3
   16718:	bcs	1676c <__assert_fail@plt+0x4bc8>
   1671c:	ldr	r3, [sp, #24]
   16720:	cmp	r3, #0
   16724:	beq	167b0 <__assert_fail@plt+0x4c0c>
   16728:	cmp	r6, #1
   1672c:	bls	167a4 <__assert_fail@plt+0x4c00>
   16730:	sub	r6, r6, #1
   16734:	cmp	r5, #43	; 0x2b
   16738:	cmpne	r5, #48	; 0x30
   1673c:	beq	1677c <__assert_fail@plt+0x4bd8>
   16740:	cmp	r6, #0
   16744:	movne	r5, #0
   16748:	movne	r8, #32
   1674c:	beq	167a4 <__assert_fail@plt+0x4c00>
   16750:	ldr	r1, [sp, #24]
   16754:	mov	r0, r8
   16758:	bl	11a90 <fputc@plt>
   1675c:	add	r5, r5, #1
   16760:	cmp	r6, r5
   16764:	bne	16750 <__assert_fail@plt+0x4bac>
   16768:	b	167a4 <__assert_fail@plt+0x4c00>
   1676c:	mov	r3, #34	; 0x22
   16770:	ldr	r2, [sp, #36]	; 0x24
   16774:	str	r3, [r2]
   16778:	b	1580c <__assert_fail@plt+0x3c68>
   1677c:	cmp	r6, #0
   16780:	beq	167a4 <__assert_fail@plt+0x4c00>
   16784:	mov	r5, #0
   16788:	mov	r8, #48	; 0x30
   1678c:	ldr	r1, [sp, #24]
   16790:	mov	r0, r8
   16794:	bl	11a90 <fputc@plt>
   16798:	add	r5, r5, #1
   1679c:	cmp	r6, r5
   167a0:	bne	1678c <__assert_fail@plt+0x4be8>
   167a4:	ldr	r1, [sp, #24]
   167a8:	mov	r0, #10
   167ac:	bl	11a90 <fputc@plt>
   167b0:	add	fp, fp, r7
   167b4:	b	157c8 <__assert_fail@plt+0x3c24>
   167b8:	mov	r3, #1
   167bc:	cmp	r6, #0
   167c0:	moveq	r6, r3
   167c4:	moveq	r8, #112	; 0x70
   167c8:	movne	r8, #112	; 0x70
   167cc:	movne	r3, #0
   167d0:	strne	r3, [sp, #32]
   167d4:	b	15fe8 <__assert_fail@plt+0x4444>
   167d8:	mov	r3, #0
   167dc:	b	167bc <__assert_fail@plt+0x4c18>
   167e0:	ldr	r3, [sp, #28]
   167e4:	ldr	r3, [r3, #16]
   167e8:	cmp	r2, #79	; 0x4f
   167ec:	bne	1680c <__assert_fail@plt+0x4c68>
   167f0:	mov	r3, #32
   167f4:	strb	r3, [sp, #72]	; 0x48
   167f8:	mov	r3, #37	; 0x25
   167fc:	strb	r3, [sp, #73]	; 0x49
   16800:	mov	r8, #113	; 0x71
   16804:	mov	r6, #0
   16808:	b	16008 <__assert_fail@plt+0x4464>
   1680c:	add	r2, r3, r3, lsl #2
   16810:	add	r3, r3, r2, lsl #1
   16814:	asr	r3, r3, #5
   16818:	add	r3, r3, #1
   1681c:	mov	r0, #0
   16820:	mov	r9, r0
   16824:	str	r0, [sp, #44]	; 0x2c
   16828:	mov	lr, #1
   1682c:	b	16260 <__assert_fail@plt+0x46bc>
   16830:	cmp	r2, #69	; 0x45
   16834:	beq	15d4c <__assert_fail@plt+0x41a8>
   16838:	ldr	r3, [sp, #28]
   1683c:	ldr	r3, [r3]
   16840:	mov	lr, #2
   16844:	b	16228 <__assert_fail@plt+0x4684>
   16848:	add	ip, sp, #88	; 0x58
   1684c:	ldr	lr, [sp, #28]
   16850:	ldm	lr!, {r0, r1, r2, r3}
   16854:	stmia	ip!, {r0, r1, r2, r3}
   16858:	ldm	lr!, {r0, r1, r2, r3}
   1685c:	stmia	ip!, {r0, r1, r2, r3}
   16860:	ldm	lr, {r0, r1, r2}
   16864:	stm	ip, {r0, r1, r2}
   16868:	mvn	r3, #0
   1686c:	str	r3, [sp, #116]	; 0x74
   16870:	add	r1, sp, #88	; 0x58
   16874:	ldr	r0, [sp, #1164]	; 0x48c
   16878:	bl	2ba74 <__assert_fail@plt+0x19ed0>
   1687c:	ldr	r3, [sp, #116]	; 0x74
   16880:	cmp	r3, #0
   16884:	blt	168e4 <__assert_fail@plt+0x4d40>
   16888:	lsr	r3, r0, #31
   1688c:	str	r3, [sp, #44]	; 0x2c
   16890:	add	r2, sp, #85	; 0x55
   16894:	mov	r1, r0
   16898:	smull	r3, ip, sl, r1
   1689c:	asr	r3, r1, #31
   168a0:	rsb	r3, r3, ip, asr #2
   168a4:	mov	ip, r3
   168a8:	add	r3, r3, r3, lsl #2
   168ac:	sub	r3, r1, r3, lsl #1
   168b0:	mov	r1, ip
   168b4:	mov	r6, r2
   168b8:	cmp	r0, #0
   168bc:	rsblt	r3, r3, #48	; 0x30
   168c0:	addge	r3, r3, #48	; 0x30
   168c4:	uxtb	r3, r3
   168c8:	strb	r3, [r2]
   168cc:	sub	r2, r2, #1
   168d0:	cmp	ip, #0
   168d4:	bne	16898 <__assert_fail@plt+0x4cf4>
   168d8:	mov	r9, #0
   168dc:	mov	lr, #1
   168e0:	b	162c0 <__assert_fail@plt+0x471c>
   168e4:	mov	r3, #75	; 0x4b
   168e8:	ldr	r2, [sp, #36]	; 0x24
   168ec:	str	r3, [r2]
   168f0:	b	1580c <__assert_fail@plt+0x3c68>
   168f4:	cmp	r2, #79	; 0x4f
   168f8:	beq	15d4c <__assert_fail@plt+0x41a8>
   168fc:	mov	r8, #88	; 0x58
   16900:	mov	r6, #0
   16904:	b	15fe8 <__assert_fail@plt+0x4444>
   16908:	subs	r3, r5, #45	; 0x2d
   1690c:	movne	r3, #1
   16910:	cmp	r7, #0
   16914:	movlt	r3, #0
   16918:	cmp	r3, #0
   1691c:	moveq	r7, #0
   16920:	mov	r6, r7
   16924:	cmp	r7, #1
   16928:	movcc	r7, #1
   1692c:	mvn	r3, fp
   16930:	cmp	r7, r3
   16934:	bcs	16988 <__assert_fail@plt+0x4de4>
   16938:	ldr	r3, [sp, #24]
   1693c:	cmp	r3, #0
   16940:	beq	169cc <__assert_fail@plt+0x4e28>
   16944:	cmp	r6, #1
   16948:	bls	169c0 <__assert_fail@plt+0x4e1c>
   1694c:	sub	r6, r6, #1
   16950:	cmp	r5, #43	; 0x2b
   16954:	cmpne	r5, #48	; 0x30
   16958:	beq	16998 <__assert_fail@plt+0x4df4>
   1695c:	cmp	r6, #0
   16960:	movne	r5, #0
   16964:	movne	r8, #32
   16968:	beq	169c0 <__assert_fail@plt+0x4e1c>
   1696c:	ldr	r1, [sp, #24]
   16970:	mov	r0, r8
   16974:	bl	11a90 <fputc@plt>
   16978:	add	r5, r5, #1
   1697c:	cmp	r6, r5
   16980:	bne	1696c <__assert_fail@plt+0x4dc8>
   16984:	b	169c0 <__assert_fail@plt+0x4e1c>
   16988:	mov	r3, #34	; 0x22
   1698c:	ldr	r2, [sp, #36]	; 0x24
   16990:	str	r3, [r2]
   16994:	b	1580c <__assert_fail@plt+0x3c68>
   16998:	cmp	r6, #0
   1699c:	beq	169c0 <__assert_fail@plt+0x4e1c>
   169a0:	mov	r5, #0
   169a4:	mov	r8, #48	; 0x30
   169a8:	ldr	r1, [sp, #24]
   169ac:	mov	r0, r8
   169b0:	bl	11a90 <fputc@plt>
   169b4:	add	r5, r5, #1
   169b8:	cmp	r6, r5
   169bc:	bne	169a8 <__assert_fail@plt+0x4e04>
   169c0:	ldr	r1, [sp, #24]
   169c4:	mov	r0, #9
   169c8:	bl	11a90 <fputc@plt>
   169cc:	add	fp, fp, r7
   169d0:	b	157c8 <__assert_fail@plt+0x3c24>
   169d4:	ldr	r3, [sp, #28]
   169d8:	ldr	r3, [r3, #24]
   169dc:	add	r3, r3, #6
   169e0:	ldr	r1, [pc, #-788]	; 166d4 <__assert_fail@plt+0x4b30>
   169e4:	smull	r0, r1, r1, r3
   169e8:	add	r0, r1, r3
   169ec:	asr	r1, r3, #31
   169f0:	rsb	r1, r1, r0, asr #2
   169f4:	rsb	r1, r1, r1, lsl #3
   169f8:	sub	r3, r3, r1
   169fc:	add	r3, r3, #1
   16a00:	mov	lr, #1
   16a04:	b	16228 <__assert_fail@plt+0x4684>
   16a08:	cmp	r2, #69	; 0x45
   16a0c:	beq	15d4c <__assert_fail@plt+0x41a8>
   16a10:	ldr	r1, [sp, #28]
   16a14:	ldr	r3, [r1, #28]
   16a18:	ldr	r1, [r1, #24]
   16a1c:	sub	r3, r3, r1
   16a20:	add	r3, r3, #7
   16a24:	ldr	r1, [pc, #-856]	; 166d4 <__assert_fail@plt+0x4b30>
   16a28:	smull	r0, r1, r1, r3
   16a2c:	add	r1, r1, r3
   16a30:	asr	r3, r3, #31
   16a34:	rsb	r3, r3, r1, asr #2
   16a38:	mov	lr, #2
   16a3c:	b	16228 <__assert_fail@plt+0x4684>
   16a40:	cmp	r2, #69	; 0x45
   16a44:	beq	15d4c <__assert_fail@plt+0x41a8>
   16a48:	ldr	r0, [sp, #28]
   16a4c:	mov	r3, r0
   16a50:	ldr	r6, [r0, #20]
   16a54:	cmp	r6, #0
   16a58:	movlt	r3, #300	; 0x12c
   16a5c:	mvnge	r3, #99	; 0x63
   16a60:	add	r3, r3, r6
   16a64:	ldr	lr, [r0, #28]
   16a68:	ldr	r0, [r0, #24]
   16a6c:	str	r0, [sp, #44]	; 0x2c
   16a70:	sub	r0, lr, r0
   16a74:	add	r0, r0, #380	; 0x17c
   16a78:	add	r0, r0, #2
   16a7c:	ldr	ip, [pc, #-944]	; 166d4 <__assert_fail@plt+0x4b30>
   16a80:	smull	r9, ip, ip, r0
   16a84:	add	r9, ip, r0
   16a88:	asr	ip, r0, #31
   16a8c:	rsb	ip, ip, r9, asr #2
   16a90:	rsb	ip, ip, ip, lsl #3
   16a94:	sub	ip, r0, ip
   16a98:	sub	r9, lr, ip
   16a9c:	adds	r9, r9, #3
   16aa0:	bmi	16bc4 <__assert_fail@plt+0x5020>
   16aa4:	tst	r3, #3
   16aa8:	movne	r0, #0
   16aac:	bne	16af8 <__assert_fail@plt+0x4f54>
   16ab0:	ldr	r0, [pc, #-988]	; 166dc <__assert_fail@plt+0x4b38>
   16ab4:	smull	ip, r0, r0, r3
   16ab8:	asr	ip, r3, #31
   16abc:	rsb	r0, ip, r0, asr #5
   16ac0:	mov	ip, #100	; 0x64
   16ac4:	mul	r0, ip, r0
   16ac8:	cmp	r3, r0
   16acc:	movne	r0, #1
   16ad0:	bne	16af8 <__assert_fail@plt+0x4f54>
   16ad4:	ldr	r0, [pc, #-1024]	; 166dc <__assert_fail@plt+0x4b38>
   16ad8:	smull	ip, r0, r0, r3
   16adc:	asr	ip, r3, #31
   16ae0:	rsb	ip, ip, r0, asr #7
   16ae4:	mov	r0, #400	; 0x190
   16ae8:	mul	r0, r0, ip
   16aec:	cmp	r3, r0
   16af0:	movne	r0, #0
   16af4:	moveq	r0, #1
   16af8:	add	r3, r0, #364	; 0x16c
   16afc:	add	r3, r3, #1
   16b00:	sub	r3, lr, r3
   16b04:	ldr	r0, [sp, #44]	; 0x2c
   16b08:	sub	r0, r3, r0
   16b0c:	add	r0, r0, #380	; 0x17c
   16b10:	add	r0, r0, #2
   16b14:	ldr	ip, [pc, #-1096]	; 166d4 <__assert_fail@plt+0x4b30>
   16b18:	smull	ip, lr, ip, r0
   16b1c:	add	lr, lr, r0
   16b20:	asr	ip, r0, #31
   16b24:	rsb	ip, ip, lr, asr #2
   16b28:	rsb	ip, ip, ip, lsl #3
   16b2c:	sub	ip, r0, ip
   16b30:	sub	r3, r3, ip
   16b34:	add	r3, r3, #3
   16b38:	cmp	r3, #0
   16b3c:	movge	r9, r3
   16b40:	mvn	lr, r3
   16b44:	lsr	lr, lr, #31
   16b48:	cmp	r1, #71	; 0x47
   16b4c:	beq	16c64 <__assert_fail@plt+0x50c0>
   16b50:	cmp	r1, #103	; 0x67
   16b54:	bne	16c90 <__assert_fail@plt+0x50ec>
   16b58:	ldr	r3, [pc, #-1156]	; 166dc <__assert_fail@plt+0x4b38>
   16b5c:	smull	r1, r3, r3, r6
   16b60:	asr	r1, r6, #31
   16b64:	rsb	r1, r1, r3, asr #5
   16b68:	mov	r0, #100	; 0x64
   16b6c:	mul	r1, r0, r1
   16b70:	sub	r1, r6, r1
   16b74:	add	r1, r1, lr
   16b78:	ldr	r3, [pc, #-1188]	; 166dc <__assert_fail@plt+0x4b38>
   16b7c:	smull	r3, ip, r3, r1
   16b80:	asr	r3, r1, #31
   16b84:	rsb	r3, r3, ip, asr #5
   16b88:	mul	r3, r0, r3
   16b8c:	subs	r3, r1, r3
   16b90:	movpl	r1, #0
   16b94:	strpl	r1, [sp, #44]	; 0x2c
   16b98:	movpl	lr, #2
   16b9c:	bpl	161a4 <__assert_fail@plt+0x4600>
   16ba0:	ldr	r1, [pc, #-1232]	; 166d8 <__assert_fail@plt+0x4b34>
   16ba4:	sub	r1, r1, lr
   16ba8:	cmp	r6, r1
   16bac:	rsblt	r3, r3, #0
   16bb0:	addge	r3, r3, #100	; 0x64
   16bb4:	mov	r1, #0
   16bb8:	str	r1, [sp, #44]	; 0x2c
   16bbc:	mov	lr, #2
   16bc0:	b	161a4 <__assert_fail@plt+0x4600>
   16bc4:	sub	r3, r3, #1
   16bc8:	tst	r3, #3
   16bcc:	movne	r3, #0
   16bd0:	bne	16c1c <__assert_fail@plt+0x5078>
   16bd4:	ldr	r0, [pc, #-1280]	; 166dc <__assert_fail@plt+0x4b38>
   16bd8:	smull	ip, r0, r0, r3
   16bdc:	asr	ip, r3, #31
   16be0:	rsb	r0, ip, r0, asr #5
   16be4:	mov	ip, #100	; 0x64
   16be8:	mul	r0, ip, r0
   16bec:	cmp	r3, r0
   16bf0:	movne	r3, #1
   16bf4:	bne	16c1c <__assert_fail@plt+0x5078>
   16bf8:	ldr	r0, [pc, #-1316]	; 166dc <__assert_fail@plt+0x4b38>
   16bfc:	smull	ip, r0, r0, r3
   16c00:	asr	ip, r3, #31
   16c04:	rsb	ip, ip, r0, asr #7
   16c08:	mov	r0, #400	; 0x190
   16c0c:	mul	r0, r0, ip
   16c10:	cmp	r3, r0
   16c14:	movne	r3, #0
   16c18:	moveq	r3, #1
   16c1c:	add	r3, r3, #364	; 0x16c
   16c20:	add	r3, r3, #1
   16c24:	add	r3, r3, lr
   16c28:	ldr	r0, [sp, #44]	; 0x2c
   16c2c:	sub	r0, r3, r0
   16c30:	add	r0, r0, #380	; 0x17c
   16c34:	add	r0, r0, #2
   16c38:	ldr	ip, [pc, #-1388]	; 166d4 <__assert_fail@plt+0x4b30>
   16c3c:	smull	ip, lr, ip, r0
   16c40:	add	lr, lr, r0
   16c44:	asr	ip, r0, #31
   16c48:	rsb	ip, ip, lr, asr #2
   16c4c:	rsb	ip, ip, ip, lsl #3
   16c50:	sub	ip, r0, ip
   16c54:	sub	ip, r3, ip
   16c58:	add	r9, ip, #3
   16c5c:	mvn	lr, #0
   16c60:	b	16b48 <__assert_fail@plt+0x4fa4>
   16c64:	ldr	r3, [pc, #-1428]	; 166d8 <__assert_fail@plt+0x4b34>
   16c68:	sub	r3, r3, lr
   16c6c:	cmp	r6, r3
   16c70:	movge	r3, #0
   16c74:	movlt	r3, #1
   16c78:	str	r3, [sp, #44]	; 0x2c
   16c7c:	add	r3, r6, #1888	; 0x760
   16c80:	add	r3, r3, #12
   16c84:	add	r3, r3, lr
   16c88:	mov	lr, #4
   16c8c:	b	161a4 <__assert_fail@plt+0x4600>
   16c90:	ldr	r3, [pc, #-1476]	; 166d4 <__assert_fail@plt+0x4b30>
   16c94:	smull	r1, r3, r3, r9
   16c98:	add	r1, r3, r9
   16c9c:	asr	r3, r9, #31
   16ca0:	rsb	r3, r3, r1, asr #2
   16ca4:	add	r3, r3, #1
   16ca8:	mov	lr, #2
   16cac:	b	16228 <__assert_fail@plt+0x4684>
   16cb0:	cmp	r2, #69	; 0x45
   16cb4:	beq	15d4c <__assert_fail@plt+0x41a8>
   16cb8:	ldr	ip, [sp, #28]
   16cbc:	ldr	r3, [ip, #24]
   16cc0:	add	r3, r3, #6
   16cc4:	ldr	r1, [pc, #-1528]	; 166d4 <__assert_fail@plt+0x4b30>
   16cc8:	smull	r0, r1, r1, r3
   16ccc:	add	r0, r1, r3
   16cd0:	asr	r1, r3, #31
   16cd4:	rsb	r1, r1, r0, asr #2
   16cd8:	rsb	r1, r1, r1, lsl #3
   16cdc:	sub	r1, r3, r1
   16ce0:	ldr	r3, [ip, #28]
   16ce4:	sub	r3, r3, r1
   16ce8:	add	r3, r3, #7
   16cec:	ldr	r1, [pc, #-1568]	; 166d4 <__assert_fail@plt+0x4b30>
   16cf0:	smull	r0, r1, r1, r3
   16cf4:	add	r1, r1, r3
   16cf8:	asr	r3, r3, #31
   16cfc:	rsb	r3, r3, r1, asr #2
   16d00:	mov	lr, #2
   16d04:	b	16228 <__assert_fail@plt+0x4684>
   16d08:	cmp	r2, #69	; 0x45
   16d0c:	beq	15d4c <__assert_fail@plt+0x41a8>
   16d10:	ldr	r3, [sp, #28]
   16d14:	ldr	r3, [r3, #24]
   16d18:	mov	lr, #1
   16d1c:	b	16228 <__assert_fail@plt+0x4684>
   16d20:	cmp	r2, #69	; 0x45
   16d24:	beq	170b4 <__assert_fail@plt+0x5510>
   16d28:	cmp	r2, #79	; 0x4f
   16d2c:	beq	15d4c <__assert_fail@plt+0x41a8>
   16d30:	ldr	r3, [sp, #28]
   16d34:	ldr	r3, [r3, #20]
   16d38:	ldr	r1, [pc, #-1640]	; 166d8 <__assert_fail@plt+0x4b34>
   16d3c:	cmp	r3, r1
   16d40:	movge	r1, #0
   16d44:	movlt	r1, #1
   16d48:	str	r1, [sp, #44]	; 0x2c
   16d4c:	add	r3, r3, #1888	; 0x760
   16d50:	add	r3, r3, #12
   16d54:	mov	lr, #4
   16d58:	b	161a4 <__assert_fail@plt+0x4600>
   16d5c:	cmp	r2, #69	; 0x45
   16d60:	beq	170bc <__assert_fail@plt+0x5518>
   16d64:	ldr	r3, [sp, #28]
   16d68:	ldr	r1, [r3, #20]
   16d6c:	ldr	r3, [pc, #-1688]	; 166dc <__assert_fail@plt+0x4b38>
   16d70:	smull	r3, r0, r3, r1
   16d74:	asr	r3, r1, #31
   16d78:	rsb	r3, r3, r0, asr #5
   16d7c:	mov	r0, #100	; 0x64
   16d80:	mul	r3, r0, r3
   16d84:	subs	r3, r1, r3
   16d88:	bmi	16d9c <__assert_fail@plt+0x51f8>
   16d8c:	mov	r1, #0
   16d90:	str	r1, [sp, #44]	; 0x2c
   16d94:	mov	lr, #2
   16d98:	b	161a4 <__assert_fail@plt+0x4600>
   16d9c:	sub	r0, r0, #2000	; 0x7d0
   16da0:	cmp	r1, r0
   16da4:	rsblt	r3, r3, #0
   16da8:	addge	r3, r3, #100	; 0x64
   16dac:	b	16d8c <__assert_fail@plt+0x51e8>
   16db0:	ldr	r3, [sp, #32]
   16db4:	cmp	r6, #0
   16db8:	movne	r3, #0
   16dbc:	str	r3, [sp, #32]
   16dc0:	ldr	r0, [sp, #52]	; 0x34
   16dc4:	bl	11988 <strlen@plt>
   16dc8:	mov	r8, r0
   16dcc:	subs	r3, r5, #45	; 0x2d
   16dd0:	movne	r3, #1
   16dd4:	cmp	r7, #0
   16dd8:	movlt	r3, #0
   16ddc:	cmp	r3, #0
   16de0:	moveq	r7, #0
   16de4:	cmp	r7, r0
   16de8:	movcs	r9, r7
   16dec:	movcc	r9, r0
   16df0:	mvn	r2, fp
   16df4:	cmp	r9, r2
   16df8:	bcs	16e48 <__assert_fail@plt+0x52a4>
   16dfc:	ldr	r2, [sp, #24]
   16e00:	cmp	r2, #0
   16e04:	beq	16eb4 <__assert_fail@plt+0x5310>
   16e08:	cmp	r7, r0
   16e0c:	bls	16e7c <__assert_fail@plt+0x52d8>
   16e10:	sub	r7, r7, r0
   16e14:	cmp	r5, #43	; 0x2b
   16e18:	cmpne	r5, #48	; 0x30
   16e1c:	beq	16e58 <__assert_fail@plt+0x52b4>
   16e20:	cmp	r7, #0
   16e24:	movne	r5, #0
   16e28:	beq	16e7c <__assert_fail@plt+0x52d8>
   16e2c:	ldr	r1, [sp, #24]
   16e30:	mov	r0, #32
   16e34:	bl	11a90 <fputc@plt>
   16e38:	add	r5, r5, #1
   16e3c:	cmp	r7, r5
   16e40:	bne	16e2c <__assert_fail@plt+0x5288>
   16e44:	b	16e7c <__assert_fail@plt+0x52d8>
   16e48:	mov	r3, #34	; 0x22
   16e4c:	ldr	r2, [sp, #36]	; 0x24
   16e50:	str	r3, [r2]
   16e54:	b	1580c <__assert_fail@plt+0x3c68>
   16e58:	cmp	r7, #0
   16e5c:	beq	16e7c <__assert_fail@plt+0x52d8>
   16e60:	mov	r5, #0
   16e64:	ldr	r1, [sp, #24]
   16e68:	mov	r0, #48	; 0x30
   16e6c:	bl	11a90 <fputc@plt>
   16e70:	add	r5, r5, #1
   16e74:	cmp	r7, r5
   16e78:	bne	16e64 <__assert_fail@plt+0x52c0>
   16e7c:	cmp	r6, #0
   16e80:	bne	16ea4 <__assert_fail@plt+0x5300>
   16e84:	ldr	r3, [sp, #32]
   16e88:	cmp	r3, #0
   16e8c:	beq	16ebc <__assert_fail@plt+0x5318>
   16e90:	mov	r2, r8
   16e94:	ldr	r1, [sp, #52]	; 0x34
   16e98:	ldr	r0, [sp, #24]
   16e9c:	bl	156a0 <__assert_fail@plt+0x3afc>
   16ea0:	b	16eb4 <__assert_fail@plt+0x5310>
   16ea4:	mov	r2, r8
   16ea8:	ldr	r1, [sp, #52]	; 0x34
   16eac:	ldr	r0, [sp, #24]
   16eb0:	bl	15660 <__assert_fail@plt+0x3abc>
   16eb4:	add	fp, fp, r9
   16eb8:	b	157c8 <__assert_fail@plt+0x3c24>
   16ebc:	ldr	r3, [sp, #24]
   16ec0:	mov	r2, #1
   16ec4:	mov	r1, r8
   16ec8:	ldr	r0, [sp, #52]	; 0x34
   16ecc:	bl	11868 <fwrite@plt>
   16ed0:	b	16eb4 <__assert_fail@plt+0x5310>
   16ed4:	add	r1, r4, #2
   16ed8:	mov	lr, #1
   16edc:	add	lr, lr, #1
   16ee0:	mov	r0, r1
   16ee4:	ldrb	r3, [r1], #1
   16ee8:	cmp	r3, #58	; 0x3a
   16eec:	bne	15d2c <__assert_fail@plt+0x4188>
   16ef0:	b	16edc <__assert_fail@plt+0x5338>
   16ef4:	mov	lr, #0
   16ef8:	ldr	r1, [sp, #28]
   16efc:	ldr	r3, [r1, #32]
   16f00:	cmp	r3, #0
   16f04:	blt	157c8 <__assert_fail@plt+0x3c24>
   16f08:	mov	r3, r1
   16f0c:	ldr	r1, [r1, #36]	; 0x24
   16f10:	cmp	r1, #0
   16f14:	movlt	r3, #1
   16f18:	blt	16f38 <__assert_fail@plt+0x5394>
   16f1c:	movne	r3, #0
   16f20:	bne	16f38 <__assert_fail@plt+0x5394>
   16f24:	ldr	r3, [sp, #52]	; 0x34
   16f28:	ldrb	r3, [r3]
   16f2c:	cmp	r3, #45	; 0x2d
   16f30:	movne	r3, #0
   16f34:	moveq	r3, #1
   16f38:	str	r3, [sp, #44]	; 0x2c
   16f3c:	ldr	r3, [pc, #-2148]	; 166e0 <__assert_fail@plt+0x4b3c>
   16f40:	smull	r0, r3, r3, r1
   16f44:	add	r3, r3, r1
   16f48:	asr	r0, r1, #31
   16f4c:	rsb	r6, r0, r3, asr #11
   16f50:	ldr	r3, [pc, #-2164]	; 166e4 <__assert_fail@plt+0x4b40>
   16f54:	smull	ip, r3, r3, r1
   16f58:	add	r3, r3, r1
   16f5c:	rsb	r3, r0, r3, asr #5
   16f60:	ldr	r0, [pc, #-2180]	; 166e4 <__assert_fail@plt+0x4b40>
   16f64:	smull	ip, r0, r0, r3
   16f68:	add	r0, r0, r3
   16f6c:	asr	ip, r3, #31
   16f70:	rsb	r0, ip, r0, asr #5
   16f74:	rsb	r0, r0, r0, lsl #4
   16f78:	sub	r0, r3, r0, lsl #2
   16f7c:	rsb	r3, r3, r3, lsl #4
   16f80:	sub	r3, r1, r3, lsl #2
   16f84:	cmp	lr, #3
   16f88:	ldrls	pc, [pc, lr, lsl #2]
   16f8c:	b	15d4c <__assert_fail@plt+0x41a8>
   16f90:	andeq	r6, r1, r0, lsr #31
   16f94:			; <UNDEFINED> instruction: 0x00016fb8
   16f98:	ldrdeq	r6, [r1], -r0
   16f9c:	strdeq	r6, [r1], -r4
   16fa0:	mov	r3, #100	; 0x64
   16fa4:	mla	r3, r3, r6, r0
   16fa8:	mov	r0, #0
   16fac:	mov	r9, #1
   16fb0:	mov	lr, #5
   16fb4:	b	16238 <__assert_fail@plt+0x4694>
   16fb8:	mov	r3, #100	; 0x64
   16fbc:	mla	r3, r3, r6, r0
   16fc0:	mov	r0, #4
   16fc4:	mov	r9, #1
   16fc8:	mov	lr, #6
   16fcc:	b	16238 <__assert_fail@plt+0x4694>
   16fd0:	mov	r1, #100	; 0x64
   16fd4:	mul	r0, r1, r0
   16fd8:	ldr	r1, [pc, #-2296]	; 166e8 <__assert_fail@plt+0x4b44>
   16fdc:	mla	r0, r1, r6, r0
   16fe0:	add	r3, r0, r3
   16fe4:	mov	r0, #20
   16fe8:	mov	r9, #1
   16fec:	mov	lr, #9
   16ff0:	b	16238 <__assert_fail@plt+0x4694>
   16ff4:	cmp	r3, #0
   16ff8:	bne	16fd0 <__assert_fail@plt+0x542c>
   16ffc:	cmp	r0, #0
   17000:	bne	16fb8 <__assert_fail@plt+0x5414>
   17004:	mov	r3, r6
   17008:	mov	r9, #1
   1700c:	mov	lr, #3
   17010:	b	16238 <__assert_fail@plt+0x4694>
   17014:	mov	r3, #34	; 0x22
   17018:	ldr	r2, [sp, #36]	; 0x24
   1701c:	str	r3, [r2]
   17020:	b	1580c <__assert_fail@plt+0x3c68>
   17024:	cmp	r6, #0
   17028:	beq	17048 <__assert_fail@plt+0x54a4>
   1702c:	mov	r5, #0
   17030:	ldr	r1, [sp, #24]
   17034:	mov	r0, #48	; 0x30
   17038:	bl	11a90 <fputc@plt>
   1703c:	add	r5, r5, #1
   17040:	cmp	r6, r5
   17044:	bne	17030 <__assert_fail@plt+0x548c>
   17048:	ldr	r3, [sp, #32]
   1704c:	cmp	r3, #0
   17050:	beq	1706c <__assert_fail@plt+0x54c8>
   17054:	mov	r2, r8
   17058:	mov	r1, r9
   1705c:	ldr	r0, [sp, #24]
   17060:	bl	156a0 <__assert_fail@plt+0x3afc>
   17064:	add	fp, fp, r7
   17068:	b	157c8 <__assert_fail@plt+0x3c24>
   1706c:	ldr	r3, [sp, #24]
   17070:	mov	r2, #1
   17074:	mov	r1, r8
   17078:	mov	r0, r9
   1707c:	bl	11868 <fwrite@plt>
   17080:	b	17064 <__assert_fail@plt+0x54c0>
   17084:	mov	fp, #0
   17088:	ldr	r3, [sp, #36]	; 0x24
   1708c:	ldr	r2, [sp, #56]	; 0x38
   17090:	str	r2, [r3]
   17094:	b	15810 <__assert_fail@plt+0x3c6c>
   17098:	mov	r8, #67	; 0x43
   1709c:	mov	r3, #32
   170a0:	strb	r3, [sp, #72]	; 0x48
   170a4:	mov	r3, #37	; 0x25
   170a8:	strb	r3, [sp, #73]	; 0x49
   170ac:	mov	r6, #0
   170b0:	b	16008 <__assert_fail@plt+0x4464>
   170b4:	mov	r8, #89	; 0x59
   170b8:	b	1709c <__assert_fail@plt+0x54f8>
   170bc:	mov	r8, #121	; 0x79
   170c0:	b	1709c <__assert_fail@plt+0x54f8>
   170c4:	mov	r3, #45	; 0x2d
   170c8:	str	r3, [sp, #64]	; 0x40
   170cc:	add	r8, sp, #86	; 0x56
   170d0:	sub	r3, r8, r6
   170d4:	str	r3, [sp, #44]	; 0x2c
   170d8:	sub	r8, r7, #1
   170dc:	sub	r8, r8, r3
   170e0:	subs	r9, r5, #45	; 0x2d
   170e4:	movne	r9, #1
   170e8:	cmp	r8, #0
   170ec:	movle	r3, #0
   170f0:	andgt	r3, r9, #1
   170f4:	cmp	r3, #0
   170f8:	moveq	r8, #0
   170fc:	cmp	r5, #95	; 0x5f
   17100:	beq	16320 <__assert_fail@plt+0x477c>
   17104:	cmn	fp, #3
   17108:	bhi	16370 <__assert_fail@plt+0x47cc>
   1710c:	ldr	r3, [sp, #24]
   17110:	cmp	r3, #0
   17114:	beq	17124 <__assert_fail@plt+0x5580>
   17118:	mov	r1, r3
   1711c:	ldr	r0, [sp, #64]	; 0x40
   17120:	bl	11a90 <fputc@plt>
   17124:	add	fp, fp, #1
   17128:	sub	r7, r7, #1
   1712c:	ldr	r8, [sp, #44]	; 0x2c
   17130:	cmp	r7, #0
   17134:	movlt	r3, #0
   17138:	andge	r3, r9, #1
   1713c:	cmp	r3, #0
   17140:	moveq	r7, #0
   17144:	cmp	r7, r8
   17148:	movcs	r9, r7
   1714c:	movcc	r9, r8
   17150:	mvn	r2, fp
   17154:	cmp	r9, r2
   17158:	bcs	16380 <__assert_fail@plt+0x47dc>
   1715c:	ldr	r2, [sp, #24]
   17160:	cmp	r2, #0
   17164:	beq	163d0 <__assert_fail@plt+0x482c>
   17168:	cmp	r7, r8
   1716c:	bls	163b4 <__assert_fail@plt+0x4810>
   17170:	sub	r7, r7, r8
   17174:	cmp	r5, #43	; 0x2b
   17178:	cmpne	r5, #48	; 0x30
   1717c:	beq	16390 <__assert_fail@plt+0x47ec>
   17180:	cmp	r7, #0
   17184:	movne	r5, #0
   17188:	beq	163b4 <__assert_fail@plt+0x4810>
   1718c:	ldr	r1, [sp, #24]
   17190:	mov	r0, #32
   17194:	bl	11a90 <fputc@plt>
   17198:	add	r5, r5, #1
   1719c:	cmp	r7, r5
   171a0:	bne	1718c <__assert_fail@plt+0x55e8>
   171a4:	b	163b4 <__assert_fail@plt+0x4810>
   171a8:	mov	r3, #43	; 0x2b
   171ac:	str	r3, [sp, #64]	; 0x40
   171b0:	b	170cc <__assert_fail@plt+0x5528>
   171b4:	cmn	r8, #1
   171b8:	beq	16654 <__assert_fail@plt+0x4ab0>
   171bc:	mov	fp, #0
   171c0:	b	16628 <__assert_fail@plt+0x4a84>
   171c4:	push	{r4, lr}
   171c8:	sub	sp, sp, #32
   171cc:	mov	ip, #0
   171d0:	add	lr, sp, #32
   171d4:	strb	ip, [lr, #-1]!
   171d8:	ldr	r4, [sp, #40]	; 0x28
   171dc:	str	r4, [sp, #16]
   171e0:	str	r3, [sp, #12]
   171e4:	str	lr, [sp, #8]
   171e8:	mvn	r3, #0
   171ec:	str	r3, [sp, #4]
   171f0:	str	ip, [sp]
   171f4:	mov	r3, ip
   171f8:	bl	156e0 <__assert_fail@plt+0x3b3c>
   171fc:	add	sp, sp, #32
   17200:	pop	{r4, pc}
   17204:	push	{r4, r5, lr}
   17208:	sub	sp, sp, #12
   1720c:	mov	r5, r0
   17210:	bl	119b8 <__errno_location@plt>
   17214:	mov	r4, r0
   17218:	ldr	r3, [r0]
   1721c:	str	r3, [sp]
   17220:	str	r3, [sp, #4]
   17224:	mov	r3, #0
   17228:	str	r3, [r0]
   1722c:	mov	r0, r5
   17230:	bl	11754 <free@plt>
   17234:	ldr	r3, [r4]
   17238:	cmp	r3, #0
   1723c:	moveq	r3, #4
   17240:	movne	r3, #0
   17244:	add	r2, sp, #8
   17248:	add	r3, r2, r3
   1724c:	ldr	r3, [r3, #-8]
   17250:	str	r3, [r4]
   17254:	add	sp, sp, #12
   17258:	pop	{r4, r5, pc}
   1725c:	push	{r4, lr}
   17260:	mov	r4, r0
   17264:	mov	r1, #0
   17268:	ldr	r0, [pc, #56]	; 172a8 <__assert_fail@plt+0x5704>
   1726c:	bl	118e0 <open64@plt>
   17270:	cmp	r4, r0
   17274:	beq	17298 <__assert_fail@plt+0x56f4>
   17278:	cmp	r0, #0
   1727c:	blt	172a0 <__assert_fail@plt+0x56fc>
   17280:	bl	11b80 <close@plt>
   17284:	bl	119b8 <__errno_location@plt>
   17288:	mov	r3, #9
   1728c:	str	r3, [r0]
   17290:	mov	r0, #0
   17294:	pop	{r4, pc}
   17298:	mov	r0, #1
   1729c:	pop	{r4, pc}
   172a0:	mov	r0, #0
   172a4:	pop	{r4, pc}
   172a8:	andeq	r0, r3, r8, lsl r7
   172ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172b0:	mov	r8, r0
   172b4:	mov	r9, r1
   172b8:	mov	r6, r2
   172bc:	mov	r0, r2
   172c0:	bl	11a0c <fileno@plt>
   172c4:	cmp	r0, #1
   172c8:	beq	17390 <__assert_fail@plt+0x57ec>
   172cc:	cmp	r0, #2
   172d0:	beq	17388 <__assert_fail@plt+0x57e4>
   172d4:	cmp	r0, #0
   172d8:	beq	1739c <__assert_fail@plt+0x57f8>
   172dc:	mov	r1, #2
   172e0:	mov	r0, r1
   172e4:	bl	117e4 <dup2@plt>
   172e8:	subs	r4, r0, #2
   172ec:	movne	r4, #1
   172f0:	mov	r1, #1
   172f4:	mov	r0, r1
   172f8:	bl	117e4 <dup2@plt>
   172fc:	subs	r7, r0, #1
   17300:	movne	r7, #1
   17304:	mov	r1, #0
   17308:	mov	r0, r1
   1730c:	bl	117e4 <dup2@plt>
   17310:	adds	r5, r0, #0
   17314:	movne	r5, #1
   17318:	cmp	r5, #0
   1731c:	bne	173ac <__assert_fail@plt+0x5808>
   17320:	cmp	r7, #0
   17324:	bne	173c4 <__assert_fail@plt+0x5820>
   17328:	cmp	r4, #0
   1732c:	beq	17340 <__assert_fail@plt+0x579c>
   17330:	mov	r0, #2
   17334:	bl	1725c <__assert_fail@plt+0x56b8>
   17338:	cmp	r0, #0
   1733c:	beq	1740c <__assert_fail@plt+0x5868>
   17340:	mov	r2, r6
   17344:	mov	r1, r9
   17348:	mov	r0, r8
   1734c:	bl	1194c <freopen64@plt>
   17350:	mov	r6, r0
   17354:	bl	119b8 <__errno_location@plt>
   17358:	mov	r8, r0
   1735c:	ldr	r9, [r0]
   17360:	cmp	r4, #0
   17364:	bne	1741c <__assert_fail@plt+0x5878>
   17368:	cmp	r7, #0
   1736c:	bne	173ec <__assert_fail@plt+0x5848>
   17370:	cmp	r5, #0
   17374:	bne	17400 <__assert_fail@plt+0x585c>
   17378:	cmp	r6, #0
   1737c:	streq	r9, [r8]
   17380:	mov	r0, r6
   17384:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17388:	mov	r4, #0
   1738c:	b	172f0 <__assert_fail@plt+0x574c>
   17390:	mov	r4, #0
   17394:	mov	r7, r4
   17398:	b	17304 <__assert_fail@plt+0x5760>
   1739c:	mov	r4, #0
   173a0:	mov	r7, r4
   173a4:	mov	r5, r4
   173a8:	b	17318 <__assert_fail@plt+0x5774>
   173ac:	mov	r0, #0
   173b0:	bl	1725c <__assert_fail@plt+0x56b8>
   173b4:	cmp	r0, #0
   173b8:	bne	17320 <__assert_fail@plt+0x577c>
   173bc:	mov	r6, #0
   173c0:	b	17354 <__assert_fail@plt+0x57b0>
   173c4:	mov	r0, #1
   173c8:	bl	1725c <__assert_fail@plt+0x56b8>
   173cc:	cmp	r0, #0
   173d0:	bne	17328 <__assert_fail@plt+0x5784>
   173d4:	bl	119b8 <__errno_location@plt>
   173d8:	mov	r8, r0
   173dc:	ldr	r9, [r0]
   173e0:	cmp	r4, #0
   173e4:	moveq	r6, #0
   173e8:	bne	173f8 <__assert_fail@plt+0x5854>
   173ec:	mov	r0, #1
   173f0:	bl	11b80 <close@plt>
   173f4:	b	17370 <__assert_fail@plt+0x57cc>
   173f8:	mov	r6, #0
   173fc:	b	1741c <__assert_fail@plt+0x5878>
   17400:	mov	r0, #0
   17404:	bl	11b80 <close@plt>
   17408:	b	17378 <__assert_fail@plt+0x57d4>
   1740c:	bl	119b8 <__errno_location@plt>
   17410:	mov	r8, r0
   17414:	ldr	r9, [r0]
   17418:	mov	r6, #0
   1741c:	mov	r0, #2
   17420:	bl	11b80 <close@plt>
   17424:	b	17368 <__assert_fail@plt+0x57c4>
   17428:	push	{r4, r5, r6, r7, lr}
   1742c:	sub	sp, sp, #12
   17430:	mov	r4, r0
   17434:	mov	r6, r2
   17438:	mov	r7, r3
   1743c:	ldr	r5, [sp, #32]
   17440:	ldr	r2, [r0, #8]
   17444:	ldr	r3, [r0, #4]
   17448:	cmp	r2, r3
   1744c:	beq	1746c <__assert_fail@plt+0x58c8>
   17450:	str	r5, [sp]
   17454:	mov	r2, r6
   17458:	mov	r3, r7
   1745c:	mov	r0, r4
   17460:	bl	11a3c <fseeko64@plt>
   17464:	add	sp, sp, #12
   17468:	pop	{r4, r5, r6, r7, pc}
   1746c:	ldr	r2, [r0, #20]
   17470:	ldr	r3, [r0, #16]
   17474:	cmp	r2, r3
   17478:	bne	17450 <__assert_fail@plt+0x58ac>
   1747c:	ldr	r3, [r0, #36]	; 0x24
   17480:	cmp	r3, #0
   17484:	bne	17450 <__assert_fail@plt+0x58ac>
   17488:	bl	11a0c <fileno@plt>
   1748c:	str	r5, [sp]
   17490:	mov	r2, r6
   17494:	mov	r3, r7
   17498:	bl	11874 <lseek64@plt>
   1749c:	mvn	r2, #0
   174a0:	mvn	r3, #0
   174a4:	cmp	r1, r3
   174a8:	cmpeq	r0, r2
   174ac:	beq	174c8 <__assert_fail@plt+0x5924>
   174b0:	ldr	r3, [r4]
   174b4:	bic	r3, r3, #16
   174b8:	str	r3, [r4]
   174bc:	strd	r0, [r4, #80]	; 0x50
   174c0:	mov	r0, #0
   174c4:	b	17464 <__assert_fail@plt+0x58c0>
   174c8:	mvn	r0, #0
   174cc:	b	17464 <__assert_fail@plt+0x58c0>
   174d0:	push	{r4, r5}
   174d4:	ldrd	r4, [r0, #8]
   174d8:	ldrd	r2, [r1, #8]
   174dc:	cmp	r5, r3
   174e0:	cmpeq	r4, r2
   174e4:	movne	r0, #0
   174e8:	beq	174f4 <__assert_fail@plt+0x5950>
   174ec:	pop	{r4, r5}
   174f0:	bx	lr
   174f4:	ldrd	r4, [r0]
   174f8:	ldrd	r2, [r1]
   174fc:	cmp	r5, r3
   17500:	cmpeq	r4, r2
   17504:	moveq	r0, #1
   17508:	movne	r0, #0
   1750c:	b	174ec <__assert_fail@plt+0x5948>
   17510:	push	{r4, lr}
   17514:	mov	r2, r1
   17518:	mov	r3, #0
   1751c:	ldrd	r0, [r0, #8]
   17520:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   17524:	mov	r0, r2
   17528:	pop	{r4, pc}
   1752c:	push	{r4, lr}
   17530:	mov	r2, r1
   17534:	mov	r3, #0
   17538:	ldrd	r0, [r0]
   1753c:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   17540:	mov	r0, r2
   17544:	pop	{r4, pc}
   17548:	push	{r4, r5}
   1754c:	ldrd	r4, [r0]
   17550:	ldrd	r2, [r1]
   17554:	cmp	r5, r3
   17558:	cmpeq	r4, r2
   1755c:	moveq	r0, #1
   17560:	movne	r0, #0
   17564:	pop	{r4, r5}
   17568:	bx	lr
   1756c:	push	{r4, r5}
   17570:	ldr	r3, [r0]
   17574:	ldrd	r4, [r3, #160]	; 0xa0
   17578:	ldr	r3, [r1]
   1757c:	ldrd	r2, [r3, #160]	; 0xa0
   17580:	cmp	r5, r3
   17584:	cmpeq	r4, r2
   17588:	movhi	r0, #1
   1758c:	movls	r0, #0
   17590:	movcc	r3, #1
   17594:	movcs	r3, #0
   17598:	sub	r0, r0, r3
   1759c:	pop	{r4, r5}
   175a0:	bx	lr
   175a4:	push	{r4, r5, r6, lr}
   175a8:	mov	r4, r0
   175ac:	ldr	r3, [r0, #36]	; 0x24
   175b0:	add	r1, r1, #256	; 0x100
   175b4:	adds	r1, r1, r3
   175b8:	bcs	175dc <__assert_fail@plt+0x5a38>
   175bc:	str	r1, [r0, #36]	; 0x24
   175c0:	ldr	r0, [r0, #24]
   175c4:	bl	2d434 <__assert_fail@plt+0x1b890>
   175c8:	cmp	r0, #0
   175cc:	beq	17600 <__assert_fail@plt+0x5a5c>
   175d0:	str	r0, [r4, #24]
   175d4:	mov	r0, #1
   175d8:	pop	{r4, r5, r6, pc}
   175dc:	ldr	r0, [r0, #24]
   175e0:	bl	17204 <__assert_fail@plt+0x5660>
   175e4:	mov	r5, #0
   175e8:	str	r5, [r4, #24]
   175ec:	bl	119b8 <__errno_location@plt>
   175f0:	mov	r3, #36	; 0x24
   175f4:	str	r3, [r0]
   175f8:	mov	r0, r5
   175fc:	pop	{r4, r5, r6, pc}
   17600:	ldr	r0, [r4, #24]
   17604:	bl	17204 <__assert_fail@plt+0x5660>
   17608:	mov	r0, #0
   1760c:	str	r0, [r4, #24]
   17610:	pop	{r4, r5, r6, pc}
   17614:	push	{r4, r5, r6, lr}
   17618:	sub	sp, sp, #8
   1761c:	mov	r4, r1
   17620:	add	r5, r1, #64	; 0x40
   17624:	ldr	r3, [r1, #48]	; 0x30
   17628:	cmp	r3, #0
   1762c:	bne	1763c <__assert_fail@plt+0x5a98>
   17630:	ldr	r3, [r0, #48]	; 0x30
   17634:	tst	r3, #1
   17638:	bne	1764c <__assert_fail@plt+0x5aa8>
   1763c:	ldr	r3, [r0, #48]	; 0x30
   17640:	lsl	r3, r3, #30
   17644:	orrs	r3, r2, r3, lsr #31
   17648:	beq	176c4 <__assert_fail@plt+0x5b20>
   1764c:	mov	r2, r5
   17650:	ldr	r1, [r4, #24]
   17654:	mov	r0, #3
   17658:	bl	11b38 <__xstat64@plt>
   1765c:	cmp	r0, #0
   17660:	beq	176f8 <__assert_fail@plt+0x5b54>
   17664:	bl	119b8 <__errno_location@plt>
   17668:	mov	r6, r0
   1766c:	ldr	r3, [r0]
   17670:	cmp	r3, #2
   17674:	beq	1769c <__assert_fail@plt+0x5af8>
   17678:	ldr	r3, [r6]
   1767c:	str	r3, [r4, #32]
   17680:	mov	r2, #104	; 0x68
   17684:	mov	r1, #0
   17688:	mov	r0, r5
   1768c:	bl	119e8 <memset@plt>
   17690:	mov	r0, #10
   17694:	add	sp, sp, #8
   17698:	pop	{r4, r5, r6, pc}
   1769c:	mov	r2, r5
   176a0:	ldr	r1, [r4, #24]
   176a4:	mov	r0, #3
   176a8:	bl	11b8c <__lxstat64@plt>
   176ac:	cmp	r0, #0
   176b0:	bne	17678 <__assert_fail@plt+0x5ad4>
   176b4:	mov	r3, #0
   176b8:	str	r3, [r6]
   176bc:	mov	r0, #13
   176c0:	b	17694 <__assert_fail@plt+0x5af0>
   176c4:	ldr	r1, [r0, #32]
   176c8:	mov	r3, #256	; 0x100
   176cc:	str	r3, [sp]
   176d0:	mov	r3, r5
   176d4:	ldr	r2, [r4, #24]
   176d8:	mov	r0, #3
   176dc:	bl	11820 <__fxstatat64@plt>
   176e0:	cmp	r0, #0
   176e4:	beq	176f8 <__assert_fail@plt+0x5b54>
   176e8:	bl	119b8 <__errno_location@plt>
   176ec:	ldr	r3, [r0]
   176f0:	str	r3, [r4, #32]
   176f4:	b	17680 <__assert_fail@plt+0x5adc>
   176f8:	ldr	r0, [r4, #80]	; 0x50
   176fc:	and	r0, r0, #61440	; 0xf000
   17700:	cmp	r0, #16384	; 0x4000
   17704:	beq	17724 <__assert_fail@plt+0x5b80>
   17708:	cmp	r0, #40960	; 0xa000
   1770c:	moveq	r0, #12
   17710:	beq	17694 <__assert_fail@plt+0x5af0>
   17714:	cmp	r0, #32768	; 0x8000
   17718:	moveq	r0, #8
   1771c:	movne	r0, #3
   17720:	b	17694 <__assert_fail@plt+0x5af0>
   17724:	ldrb	r3, [r4, #168]	; 0xa8
   17728:	cmp	r3, #46	; 0x2e
   1772c:	movne	r0, #1
   17730:	bne	17694 <__assert_fail@plt+0x5af0>
   17734:	ldrb	r3, [r4, #169]	; 0xa9
   17738:	cmp	r3, #0
   1773c:	beq	17758 <__assert_fail@plt+0x5bb4>
   17740:	ldr	r3, [r4, #168]	; 0xa8
   17744:	bic	r3, r3, #-16777216	; 0xff000000
   17748:	bic	r3, r3, #255	; 0xff
   1774c:	cmp	r3, #11776	; 0x2e00
   17750:	movne	r0, #1
   17754:	bne	17694 <__assert_fail@plt+0x5af0>
   17758:	ldr	r0, [r4, #48]	; 0x30
   1775c:	cmp	r0, #0
   17760:	moveq	r0, #1
   17764:	movne	r0, #5
   17768:	b	17694 <__assert_fail@plt+0x5af0>
   1776c:	push	{r4, r5, r6, r7, r8, lr}
   17770:	mov	r6, r0
   17774:	mov	r4, r1
   17778:	mov	r5, r2
   1777c:	ldr	r7, [r0, #44]	; 0x2c
   17780:	ldr	r3, [r0, #40]	; 0x28
   17784:	cmp	r3, r2
   17788:	bcs	177b4 <__assert_fail@plt+0x5c10>
   1778c:	add	r1, r2, #40	; 0x28
   17790:	str	r1, [r0, #40]	; 0x28
   17794:	cmn	r1, #-1073741823	; 0xc0000001
   17798:	bhi	17824 <__assert_fail@plt+0x5c80>
   1779c:	lsl	r1, r1, #2
   177a0:	ldr	r0, [r0, #8]
   177a4:	bl	2d434 <__assert_fail@plt+0x1b890>
   177a8:	cmp	r0, #0
   177ac:	strne	r0, [r6, #8]
   177b0:	beq	17824 <__assert_fail@plt+0x5c80>
   177b4:	ldr	r3, [r6, #8]
   177b8:	cmp	r4, #0
   177bc:	beq	177d0 <__assert_fail@plt+0x5c2c>
   177c0:	str	r4, [r3], #4
   177c4:	ldr	r4, [r4, #8]
   177c8:	cmp	r4, #0
   177cc:	bne	177c0 <__assert_fail@plt+0x5c1c>
   177d0:	mov	r3, r7
   177d4:	mov	r2, #4
   177d8:	mov	r1, r5
   177dc:	ldr	r0, [r6, #8]
   177e0:	bl	11b08 <qsort@plt>
   177e4:	ldr	lr, [r6, #8]
   177e8:	ldr	r0, [lr]
   177ec:	subs	r3, r5, #1
   177f0:	beq	17814 <__assert_fail@plt+0x5c70>
   177f4:	mov	r2, lr
   177f8:	ldr	r1, [r2]
   177fc:	ldr	ip, [r2, #4]!
   17800:	str	ip, [r1, #8]
   17804:	subs	r3, r3, #1
   17808:	bne	177f8 <__assert_fail@plt+0x5c54>
   1780c:	sub	r5, r5, #-1073741823	; 0xc0000001
   17810:	add	lr, lr, r5, lsl #2
   17814:	ldr	r3, [lr]
   17818:	mov	r2, #0
   1781c:	str	r2, [r3, #8]
   17820:	pop	{r4, r5, r6, r7, r8, pc}
   17824:	ldr	r0, [r6, #8]
   17828:	bl	17204 <__assert_fail@plt+0x5660>
   1782c:	mov	r3, #0
   17830:	str	r3, [r6, #8]
   17834:	str	r3, [r6, #40]	; 0x28
   17838:	mov	r0, r4
   1783c:	pop	{r4, r5, r6, r7, r8, pc}
   17840:	push	{r4, r5, r6, r7, r8, lr}
   17844:	mov	r6, r0
   17848:	mov	r7, r1
   1784c:	mov	r5, r2
   17850:	add	r0, r2, #176	; 0xb0
   17854:	bic	r0, r0, #7
   17858:	bl	2d404 <__assert_fail@plt+0x1b860>
   1785c:	subs	r4, r0, #0
   17860:	beq	178ac <__assert_fail@plt+0x5d08>
   17864:	mov	r2, r5
   17868:	mov	r1, r7
   1786c:	add	r0, r4, #168	; 0xa8
   17870:	bl	11784 <memcpy@plt>
   17874:	add	r2, r4, r5
   17878:	mov	r3, #0
   1787c:	strb	r3, [r2, #168]	; 0xa8
   17880:	str	r5, [r4, #52]	; 0x34
   17884:	str	r6, [r4, #44]	; 0x2c
   17888:	ldr	r2, [r6, #24]
   1788c:	str	r2, [r4, #28]
   17890:	str	r3, [r4, #32]
   17894:	str	r3, [r4, #12]
   17898:	strh	r3, [r4, #58]	; 0x3a
   1789c:	mov	r2, #3
   178a0:	strh	r2, [r4, #60]	; 0x3c
   178a4:	str	r3, [r4, #16]
   178a8:	str	r3, [r4, #20]
   178ac:	mov	r0, r4
   178b0:	pop	{r4, r5, r6, r7, r8, pc}
   178b4:	push	{r4, lr}
   178b8:	sub	sp, sp, #8
   178bc:	mov	r4, r0
   178c0:	ldr	r2, [r0, #48]	; 0x30
   178c4:	ldr	r3, [pc, #92]	; 17928 <__assert_fail@plt+0x5d84>
   178c8:	and	r3, r3, r2
   178cc:	cmp	r3, #0
   178d0:	beq	17904 <__assert_fail@plt+0x5d60>
   178d4:	ldr	r3, [pc, #80]	; 1792c <__assert_fail@plt+0x5d88>
   178d8:	str	r3, [sp]
   178dc:	ldr	r3, [pc, #76]	; 17930 <__assert_fail@plt+0x5d8c>
   178e0:	ldr	r2, [pc, #76]	; 17934 <__assert_fail@plt+0x5d90>
   178e4:	mov	r1, #0
   178e8:	mov	r0, #31
   178ec:	bl	19fa8 <__assert_fail@plt+0x8404>
   178f0:	str	r0, [r4, #56]	; 0x38
   178f4:	adds	r0, r0, #0
   178f8:	movne	r0, #1
   178fc:	add	sp, sp, #8
   17900:	pop	{r4, pc}
   17904:	mov	r0, #32
   17908:	bl	2d404 <__assert_fail@plt+0x1b860>
   1790c:	str	r0, [r4, #56]	; 0x38
   17910:	cmp	r0, #0
   17914:	moveq	r0, #0
   17918:	beq	178fc <__assert_fail@plt+0x5d58>
   1791c:	bl	2dd14 <__assert_fail@plt+0x1c170>
   17920:	mov	r0, #1
   17924:	b	178fc <__assert_fail@plt+0x5d58>
   17928:	andeq	r0, r0, r2, lsl #2
   1792c:	andeq	r7, r1, r4, lsl #4
   17930:	ldrdeq	r7, [r1], -r0
   17934:	andeq	r7, r1, r0, lsl r5
   17938:	push	{r4, lr}
   1793c:	mov	ip, r1
   17940:	ldr	r3, [r0, #48]	; 0x30
   17944:	and	lr, r3, #16
   17948:	ldr	r2, [pc, #48]	; 17980 <__assert_fail@plt+0x5ddc>
   1794c:	ldr	r1, [pc, #48]	; 17984 <__assert_fail@plt+0x5de0>
   17950:	cmp	lr, #0
   17954:	moveq	r1, r2
   17958:	tst	r3, #512	; 0x200
   1795c:	bne	1796c <__assert_fail@plt+0x5dc8>
   17960:	mov	r0, ip
   17964:	bl	2e120 <__assert_fail@plt+0x1c57c>
   17968:	pop	{r4, pc}
   1796c:	mov	r2, r1
   17970:	mov	r1, ip
   17974:	ldr	r0, [r0, #32]
   17978:	bl	1c718 <__assert_fail@plt+0xab74>
   1797c:	pop	{r4, pc}
   17980:	andeq	r4, r8, r0, lsl #18
   17984:	andeq	ip, r8, r0, lsl #18
   17988:	push	{r4, r5, r6, lr}
   1798c:	subs	r4, r0, #0
   17990:	bne	179ac <__assert_fail@plt+0x5e08>
   17994:	pop	{r4, r5, r6, pc}
   17998:	mov	r0, r4
   1799c:	bl	17204 <__assert_fail@plt+0x5660>
   179a0:	mov	r4, r5
   179a4:	cmp	r5, #0
   179a8:	beq	179c4 <__assert_fail@plt+0x5e20>
   179ac:	ldr	r5, [r4, #8]
   179b0:	ldr	r0, [r4, #12]
   179b4:	cmp	r0, #0
   179b8:	beq	17998 <__assert_fail@plt+0x5df4>
   179bc:	bl	11b98 <closedir@plt>
   179c0:	b	17998 <__assert_fail@plt+0x5df4>
   179c4:	pop	{r4, r5, r6, pc}
   179c8:	push	{r4, lr}
   179cc:	ldr	r2, [r0, #48]	; 0x30
   179d0:	ldr	r3, [pc, #40]	; 17a00 <__assert_fail@plt+0x5e5c>
   179d4:	and	r3, r3, r2
   179d8:	cmp	r3, #0
   179dc:	beq	179f4 <__assert_fail@plt+0x5e50>
   179e0:	ldr	r0, [r0, #56]	; 0x38
   179e4:	cmp	r0, #0
   179e8:	popeq	{r4, pc}
   179ec:	bl	1a138 <__assert_fail@plt+0x8594>
   179f0:	pop	{r4, pc}
   179f4:	ldr	r0, [r0, #56]	; 0x38
   179f8:	bl	17204 <__assert_fail@plt+0x5660>
   179fc:	pop	{r4, pc}
   17a00:	andeq	r0, r0, r2, lsl #2
   17a04:	push	{r4, lr}
   17a08:	mov	r4, r0
   17a0c:	mov	r0, r4
   17a10:	bl	1b118 <__assert_fail@plt+0x9574>
   17a14:	cmp	r0, #0
   17a18:	bne	17a34 <__assert_fail@plt+0x5e90>
   17a1c:	mov	r0, r4
   17a20:	bl	1b164 <__assert_fail@plt+0x95c0>
   17a24:	cmp	r0, #0
   17a28:	blt	17a0c <__assert_fail@plt+0x5e68>
   17a2c:	bl	11b80 <close@plt>
   17a30:	b	17a0c <__assert_fail@plt+0x5e68>
   17a34:	pop	{r4, pc}
   17a38:	push	{r4, r5, r6, r7, lr}
   17a3c:	sub	sp, sp, #116	; 0x74
   17a40:	ldr	r4, [r0, #44]	; 0x2c
   17a44:	ldr	r3, [r4, #48]	; 0x30
   17a48:	tst	r3, #512	; 0x200
   17a4c:	beq	17b2c <__assert_fail@plt+0x5f88>
   17a50:	mov	r7, r1
   17a54:	mov	r5, r0
   17a58:	ldr	r6, [r4, #52]	; 0x34
   17a5c:	cmp	r6, #0
   17a60:	beq	17a88 <__assert_fail@plt+0x5ee4>
   17a64:	ldrd	r2, [r5, #64]	; 0x40
   17a68:	add	r1, sp, #112	; 0x70
   17a6c:	strd	r2, [r1, #-104]!	; 0xffffff98
   17a70:	mov	r0, r6
   17a74:	bl	19cf0 <__assert_fail@plt+0x814c>
   17a78:	cmp	r0, #0
   17a7c:	beq	17ab4 <__assert_fail@plt+0x5f10>
   17a80:	ldr	r0, [r0, #8]
   17a84:	b	17b30 <__assert_fail@plt+0x5f8c>
   17a88:	ldr	r3, [pc, #184]	; 17b48 <__assert_fail@plt+0x5fa4>
   17a8c:	str	r3, [sp]
   17a90:	ldr	r3, [pc, #180]	; 17b4c <__assert_fail@plt+0x5fa8>
   17a94:	ldr	r2, [pc, #180]	; 17b50 <__assert_fail@plt+0x5fac>
   17a98:	mov	r1, #0
   17a9c:	mov	r0, #13
   17aa0:	bl	19fa8 <__assert_fail@plt+0x8404>
   17aa4:	mov	r6, r0
   17aa8:	str	r0, [r4, #52]	; 0x34
   17aac:	cmp	r0, #0
   17ab0:	bne	17a64 <__assert_fail@plt+0x5ec0>
   17ab4:	cmp	r7, #0
   17ab8:	blt	17b38 <__assert_fail@plt+0x5f94>
   17abc:	add	r1, sp, #24
   17ac0:	mov	r0, r7
   17ac4:	bl	116a0 <fstatfs64@plt>
   17ac8:	cmp	r0, #0
   17acc:	bne	17b40 <__assert_fail@plt+0x5f9c>
   17ad0:	cmp	r6, #0
   17ad4:	beq	17b14 <__assert_fail@plt+0x5f70>
   17ad8:	mov	r0, #16
   17adc:	bl	2d404 <__assert_fail@plt+0x1b860>
   17ae0:	subs	r4, r0, #0
   17ae4:	beq	17b14 <__assert_fail@plt+0x5f70>
   17ae8:	ldrd	r2, [r5, #64]	; 0x40
   17aec:	strd	r2, [r4]
   17af0:	ldr	r3, [sp, #24]
   17af4:	str	r3, [r4, #8]
   17af8:	mov	r1, r4
   17afc:	mov	r0, r6
   17b00:	bl	1a4f4 <__assert_fail@plt+0x8950>
   17b04:	cmp	r0, #0
   17b08:	beq	17b20 <__assert_fail@plt+0x5f7c>
   17b0c:	cmp	r4, r0
   17b10:	bne	17b1c <__assert_fail@plt+0x5f78>
   17b14:	ldr	r0, [sp, #24]
   17b18:	b	17b30 <__assert_fail@plt+0x5f8c>
   17b1c:	bl	11b68 <abort@plt>
   17b20:	mov	r0, r4
   17b24:	bl	17204 <__assert_fail@plt+0x5660>
   17b28:	b	17b14 <__assert_fail@plt+0x5f70>
   17b2c:	mov	r0, #0
   17b30:	add	sp, sp, #116	; 0x74
   17b34:	pop	{r4, r5, r6, r7, pc}
   17b38:	mov	r0, #0
   17b3c:	b	17b30 <__assert_fail@plt+0x5f8c>
   17b40:	mov	r0, #0
   17b44:	b	17b30 <__assert_fail@plt+0x5f8c>
   17b48:	andeq	r7, r1, r4, lsl #4
   17b4c:	andeq	r7, r1, r8, asr #10
   17b50:	andeq	r7, r1, ip, lsr #10
   17b54:	push	{r4, r5, r6, lr}
   17b58:	mov	r5, r0
   17b5c:	mov	r4, r1
   17b60:	ldr	r2, [r0, #48]	; 0x30
   17b64:	ldr	r3, [pc, #176]	; 17c1c <__assert_fail@plt+0x6078>
   17b68:	and	r3, r3, r2
   17b6c:	cmp	r3, #0
   17b70:	beq	17bd8 <__assert_fail@plt+0x6034>
   17b74:	mov	r0, #24
   17b78:	bl	2d404 <__assert_fail@plt+0x1b860>
   17b7c:	subs	r6, r0, #0
   17b80:	beq	17bfc <__assert_fail@plt+0x6058>
   17b84:	ldrd	r2, [r4, #64]	; 0x40
   17b88:	strd	r2, [r6]
   17b8c:	ldrd	r2, [r4, #160]	; 0xa0
   17b90:	strd	r2, [r6, #8]
   17b94:	str	r4, [r6, #16]
   17b98:	mov	r1, r6
   17b9c:	ldr	r0, [r5, #56]	; 0x38
   17ba0:	bl	1a4f4 <__assert_fail@plt+0x8950>
   17ba4:	mov	r5, r0
   17ba8:	cmp	r6, r0
   17bac:	beq	17c04 <__assert_fail@plt+0x6060>
   17bb0:	mov	r0, r6
   17bb4:	bl	17204 <__assert_fail@plt+0x5660>
   17bb8:	cmp	r5, #0
   17bbc:	beq	17c0c <__assert_fail@plt+0x6068>
   17bc0:	ldr	r3, [r5, #16]
   17bc4:	str	r3, [r4]
   17bc8:	mov	r3, #2
   17bcc:	strh	r3, [r4, #56]	; 0x38
   17bd0:	mov	r0, #1
   17bd4:	pop	{r4, r5, r6, pc}
   17bd8:	add	r1, r1, #64	; 0x40
   17bdc:	ldr	r0, [r0, #56]	; 0x38
   17be0:	bl	2dd30 <__assert_fail@plt+0x1c18c>
   17be4:	cmp	r0, #0
   17be8:	beq	17c14 <__assert_fail@plt+0x6070>
   17bec:	str	r4, [r4]
   17bf0:	mov	r3, #2
   17bf4:	strh	r3, [r4, #56]	; 0x38
   17bf8:	pop	{r4, r5, r6, pc}
   17bfc:	mov	r0, #0
   17c00:	pop	{r4, r5, r6, pc}
   17c04:	mov	r0, #1
   17c08:	pop	{r4, r5, r6, pc}
   17c0c:	mov	r0, #0
   17c10:	pop	{r4, r5, r6, pc}
   17c14:	mov	r0, #1
   17c18:	pop	{r4, r5, r6, pc}
   17c1c:	andeq	r0, r0, r2, lsl #2
   17c20:	push	{r4, r5, r6, lr}
   17c24:	mov	r5, r1
   17c28:	ldr	r1, [r0, #32]
   17c2c:	cmp	r1, r5
   17c30:	movne	r3, #0
   17c34:	moveq	r3, #1
   17c38:	cmn	r1, #100	; 0x64
   17c3c:	moveq	r3, #0
   17c40:	cmp	r3, #0
   17c44:	bne	17c84 <__assert_fail@plt+0x60e0>
   17c48:	mov	r4, r0
   17c4c:	cmp	r2, #0
   17c50:	bne	17c88 <__assert_fail@plt+0x60e4>
   17c54:	ldr	r3, [r0, #48]	; 0x30
   17c58:	lsr	r3, r3, #2
   17c5c:	eor	r3, r3, #1
   17c60:	cmp	r1, #0
   17c64:	movlt	r3, #0
   17c68:	andge	r3, r3, #1
   17c6c:	cmp	r3, #0
   17c70:	beq	17c7c <__assert_fail@plt+0x60d8>
   17c74:	mov	r0, r1
   17c78:	bl	11b80 <close@plt>
   17c7c:	str	r5, [r4, #32]
   17c80:	pop	{r4, r5, r6, pc}
   17c84:	bl	11b68 <abort@plt>
   17c88:	add	r0, r0, #60	; 0x3c
   17c8c:	bl	1b120 <__assert_fail@plt+0x957c>
   17c90:	cmp	r0, #0
   17c94:	blt	17c7c <__assert_fail@plt+0x60d8>
   17c98:	bl	11b80 <close@plt>
   17c9c:	b	17c7c <__assert_fail@plt+0x60d8>
   17ca0:	push	{r4, r5, r6, lr}
   17ca4:	mov	r4, r0
   17ca8:	ldr	r3, [r0, #48]	; 0x30
   17cac:	ands	r5, r3, #4
   17cb0:	movne	r5, #0
   17cb4:	bne	17cd0 <__assert_fail@plt+0x612c>
   17cb8:	tst	r3, #512	; 0x200
   17cbc:	bne	17ce0 <__assert_fail@plt+0x613c>
   17cc0:	ldr	r0, [r0, #28]
   17cc4:	bl	11ae4 <fchdir@plt>
   17cc8:	adds	r5, r0, #0
   17ccc:	movne	r5, #1
   17cd0:	add	r0, r4, #60	; 0x3c
   17cd4:	bl	17a04 <__assert_fail@plt+0x5e60>
   17cd8:	mov	r0, r5
   17cdc:	pop	{r4, r5, r6, pc}
   17ce0:	mov	r2, #1
   17ce4:	mvn	r1, #99	; 0x63
   17ce8:	bl	17c20 <__assert_fail@plt+0x607c>
   17cec:	b	17cd0 <__assert_fail@plt+0x612c>
   17cf0:	push	{r4, r5, r6, r7, r8, r9, lr}
   17cf4:	sub	sp, sp, #108	; 0x6c
   17cf8:	mov	r4, r0
   17cfc:	mov	r6, r1
   17d00:	mov	r5, r2
   17d04:	subs	r9, r3, #0
   17d08:	beq	17ea4 <__assert_fail@plt+0x6300>
   17d0c:	ldr	r1, [pc, #448]	; 17ed4 <__assert_fail@plt+0x6330>
   17d10:	mov	r0, r9
   17d14:	bl	1170c <strcmp@plt>
   17d18:	cmp	r0, #0
   17d1c:	bne	17ea4 <__assert_fail@plt+0x6300>
   17d20:	ldr	r3, [r4, #48]	; 0x30
   17d24:	tst	r3, #4
   17d28:	bne	17eb0 <__assert_fail@plt+0x630c>
   17d2c:	cmp	r5, #0
   17d30:	bge	17e40 <__assert_fail@plt+0x629c>
   17d34:	tst	r3, #512	; 0x200
   17d38:	beq	17d50 <__assert_fail@plt+0x61ac>
   17d3c:	add	r7, r4, #60	; 0x3c
   17d40:	mov	r0, r7
   17d44:	bl	1b118 <__assert_fail@plt+0x9574>
   17d48:	cmp	r0, #0
   17d4c:	beq	17d70 <__assert_fail@plt+0x61cc>
   17d50:	mov	r7, #1
   17d54:	mov	r1, r9
   17d58:	mov	r0, r4
   17d5c:	bl	17938 <__assert_fail@plt+0x5d94>
   17d60:	subs	r8, r0, #0
   17d64:	bge	17dc0 <__assert_fail@plt+0x621c>
   17d68:	mvn	r4, #0
   17d6c:	b	17e2c <__assert_fail@plt+0x6288>
   17d70:	mov	r0, r7
   17d74:	bl	1b164 <__assert_fail@plt+0x95c0>
   17d78:	subs	r8, r0, #0
   17d7c:	blt	17d50 <__assert_fail@plt+0x61ac>
   17d80:	ldr	r3, [r4, #48]	; 0x30
   17d84:	tst	r3, #2
   17d88:	bne	17e4c <__assert_fail@plt+0x62a8>
   17d8c:	mov	r5, r8
   17d90:	mov	r7, #1
   17d94:	ldr	r3, [r4, #48]	; 0x30
   17d98:	tst	r3, #512	; 0x200
   17d9c:	bne	17e70 <__assert_fail@plt+0x62cc>
   17da0:	mov	r0, r8
   17da4:	bl	11ae4 <fchdir@plt>
   17da8:	mov	r4, r0
   17dac:	b	17e24 <__assert_fail@plt+0x6280>
   17db0:	cmp	r5, #0
   17db4:	movge	r8, r5
   17db8:	movge	r7, #0
   17dbc:	blt	17e38 <__assert_fail@plt+0x6294>
   17dc0:	ldr	r3, [r4, #48]	; 0x30
   17dc4:	tst	r3, #2
   17dc8:	bne	17de8 <__assert_fail@plt+0x6244>
   17dcc:	cmp	r9, #0
   17dd0:	beq	17d94 <__assert_fail@plt+0x61f0>
   17dd4:	ldr	r1, [pc, #248]	; 17ed4 <__assert_fail@plt+0x6330>
   17dd8:	mov	r0, r9
   17ddc:	bl	1170c <strcmp@plt>
   17de0:	cmp	r0, #0
   17de4:	bne	17d94 <__assert_fail@plt+0x61f0>
   17de8:	mov	r2, sp
   17dec:	mov	r1, r8
   17df0:	mov	r0, #3
   17df4:	bl	11850 <__fxstat64@plt>
   17df8:	cmp	r0, #0
   17dfc:	bne	17e20 <__assert_fail@plt+0x627c>
   17e00:	ldrd	r0, [r6, #64]	; 0x40
   17e04:	ldrd	r2, [sp]
   17e08:	cmp	r1, r3
   17e0c:	cmpeq	r0, r2
   17e10:	beq	17e58 <__assert_fail@plt+0x62b4>
   17e14:	bl	119b8 <__errno_location@plt>
   17e18:	mov	r3, #2
   17e1c:	str	r3, [r0]
   17e20:	mvn	r4, #0
   17e24:	cmp	r5, #0
   17e28:	blt	17e88 <__assert_fail@plt+0x62e4>
   17e2c:	mov	r0, r4
   17e30:	add	sp, sp, #108	; 0x6c
   17e34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   17e38:	mov	r7, #0
   17e3c:	b	17d54 <__assert_fail@plt+0x61b0>
   17e40:	mov	r8, r5
   17e44:	mov	r7, #1
   17e48:	b	17dc0 <__assert_fail@plt+0x621c>
   17e4c:	mov	r5, r8
   17e50:	mov	r7, #1
   17e54:	b	17de8 <__assert_fail@plt+0x6244>
   17e58:	ldrd	r0, [r6, #160]	; 0xa0
   17e5c:	ldrd	r2, [sp, #96]	; 0x60
   17e60:	cmp	r1, r3
   17e64:	cmpeq	r0, r2
   17e68:	bne	17e14 <__assert_fail@plt+0x6270>
   17e6c:	b	17d94 <__assert_fail@plt+0x61f0>
   17e70:	eor	r2, r7, #1
   17e74:	mov	r1, r8
   17e78:	mov	r0, r4
   17e7c:	bl	17c20 <__assert_fail@plt+0x607c>
   17e80:	mov	r4, #0
   17e84:	b	17e2c <__assert_fail@plt+0x6288>
   17e88:	bl	119b8 <__errno_location@plt>
   17e8c:	mov	r5, r0
   17e90:	ldr	r6, [r0]
   17e94:	mov	r0, r8
   17e98:	bl	11b80 <close@plt>
   17e9c:	str	r6, [r5]
   17ea0:	b	17e2c <__assert_fail@plt+0x6288>
   17ea4:	ldr	r3, [r4, #48]	; 0x30
   17ea8:	tst	r3, #4
   17eac:	beq	17db0 <__assert_fail@plt+0x620c>
   17eb0:	mvn	r2, r5
   17eb4:	lsr	r2, r2, #31
   17eb8:	ands	r3, r2, r3, lsr #9
   17ebc:	moveq	r4, #0
   17ec0:	beq	17e2c <__assert_fail@plt+0x6288>
   17ec4:	mov	r0, r5
   17ec8:	bl	11b80 <close@plt>
   17ecc:	mov	r4, #0
   17ed0:	b	17e2c <__assert_fail@plt+0x6288>
   17ed4:	andeq	r0, r3, r4, lsr #14
   17ed8:	push	{r4, r5, lr}
   17edc:	sub	sp, sp, #28
   17ee0:	ldr	r2, [r0, #48]	; 0x30
   17ee4:	ldr	r3, [pc, #172]	; 17f98 <__assert_fail@plt+0x63f4>
   17ee8:	and	r3, r3, r2
   17eec:	cmp	r3, #0
   17ef0:	bne	17f38 <__assert_fail@plt+0x6394>
   17ef4:	ldr	ip, [r1, #4]
   17ef8:	cmp	ip, #0
   17efc:	beq	17f30 <__assert_fail@plt+0x638c>
   17f00:	ldr	r3, [ip, #48]	; 0x30
   17f04:	cmp	r3, #0
   17f08:	blt	17f30 <__assert_fail@plt+0x638c>
   17f0c:	ldr	lr, [r0, #56]	; 0x38
   17f10:	ldrd	r2, [lr, #16]
   17f14:	orrs	r3, r2, r3
   17f18:	beq	17f68 <__assert_fail@plt+0x63c4>
   17f1c:	ldrd	r4, [lr]
   17f20:	ldrd	r2, [r1, #160]	; 0xa0
   17f24:	cmp	r5, r3
   17f28:	cmpeq	r4, r2
   17f2c:	beq	17f6c <__assert_fail@plt+0x63c8>
   17f30:	add	sp, sp, #28
   17f34:	pop	{r4, r5, pc}
   17f38:	ldrd	r2, [r1, #64]	; 0x40
   17f3c:	strd	r2, [sp]
   17f40:	ldrd	r2, [r1, #160]	; 0xa0
   17f44:	strd	r2, [sp, #8]
   17f48:	mov	r1, sp
   17f4c:	ldr	r0, [r0, #56]	; 0x38
   17f50:	bl	1a52c <__assert_fail@plt+0x8988>
   17f54:	cmp	r0, #0
   17f58:	beq	17f64 <__assert_fail@plt+0x63c0>
   17f5c:	bl	17204 <__assert_fail@plt+0x5660>
   17f60:	b	17f30 <__assert_fail@plt+0x638c>
   17f64:	bl	11b68 <abort@plt>
   17f68:	bl	11b68 <abort@plt>
   17f6c:	ldrd	r2, [lr, #8]
   17f70:	ldrd	r4, [r1, #64]	; 0x40
   17f74:	cmp	r3, r5
   17f78:	cmpeq	r2, r4
   17f7c:	bne	17f30 <__assert_fail@plt+0x638c>
   17f80:	ldrd	r2, [ip, #64]	; 0x40
   17f84:	strd	r2, [lr, #8]
   17f88:	ldr	r3, [r0, #56]	; 0x38
   17f8c:	ldrd	r0, [ip, #160]	; 0xa0
   17f90:	strd	r0, [r3]
   17f94:	b	17f30 <__assert_fail@plt+0x638c>
   17f98:	andeq	r0, r0, r2, lsl #2
   17f9c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17fa0:	sub	sp, sp, #68	; 0x44
   17fa4:	mov	r5, r0
   17fa8:	str	r1, [sp, #40]	; 0x28
   17fac:	ldr	r9, [r0]
   17fb0:	ldr	r3, [r9, #12]
   17fb4:	str	r3, [sp, #44]	; 0x2c
   17fb8:	cmp	r3, #0
   17fbc:	beq	180bc <__assert_fail@plt+0x6518>
   17fc0:	mov	r0, r3
   17fc4:	bl	11ad8 <dirfd@plt>
   17fc8:	str	r0, [sp, #60]	; 0x3c
   17fcc:	cmp	r0, #0
   17fd0:	blt	18078 <__assert_fail@plt+0x64d4>
   17fd4:	ldr	r3, [r5, #44]	; 0x2c
   17fd8:	cmp	r3, #0
   17fdc:	ldr	r3, [pc, #2472]	; 1898c <__assert_fail@plt+0x6de8>
   17fe0:	mvnne	r3, #0
   17fe4:	str	r3, [sp, #24]
   17fe8:	mov	r3, #1
   17fec:	str	r3, [sp, #52]	; 0x34
   17ff0:	ldr	r3, [r9, #40]	; 0x28
   17ff4:	mov	r1, r3
   17ff8:	sub	r3, r3, #1
   17ffc:	ldr	r2, [r9, #28]
   18000:	ldrb	r2, [r2, r3]
   18004:	cmp	r2, #47	; 0x2f
   18008:	moveq	r1, r3
   1800c:	str	r1, [sp, #32]
   18010:	ldr	r3, [r5, #48]	; 0x30
   18014:	tst	r3, #4
   18018:	ldrne	r3, [r5, #24]
   1801c:	addne	r2, r3, r1
   18020:	addne	r2, r2, #1
   18024:	strne	r2, [sp, #28]
   18028:	movne	r2, #47	; 0x2f
   1802c:	strbne	r2, [r3, r1]
   18030:	moveq	r3, #0
   18034:	streq	r3, [sp, #28]
   18038:	ldr	r3, [sp, #32]
   1803c:	add	r3, r3, #1
   18040:	str	r3, [sp, #12]
   18044:	ldr	fp, [r5, #36]	; 0x24
   18048:	sub	fp, fp, r3
   1804c:	ldr	r3, [r9, #48]	; 0x30
   18050:	add	r3, r3, #1
   18054:	str	r3, [sp, #20]
   18058:	mov	r3, #0
   1805c:	str	r3, [sp, #48]	; 0x30
   18060:	str	r3, [sp, #36]	; 0x24
   18064:	str	r3, [sp, #4]
   18068:	mov	r8, r3
   1806c:	str	r3, [sp, #8]
   18070:	mov	sl, r3
   18074:	b	185ec <__assert_fail@plt+0x6a48>
   18078:	ldr	r0, [r9, #12]
   1807c:	bl	11b98 <closedir@plt>
   18080:	mov	r3, #0
   18084:	str	r3, [r9, #12]
   18088:	ldr	r3, [sp, #40]	; 0x28
   1808c:	cmp	r3, #3
   18090:	movne	r3, #0
   18094:	strne	r3, [sp, #8]
   18098:	bne	1845c <__assert_fail@plt+0x68b8>
   1809c:	mov	r3, #4
   180a0:	strh	r3, [r9, #56]	; 0x38
   180a4:	bl	119b8 <__errno_location@plt>
   180a8:	ldr	r3, [r0]
   180ac:	str	r3, [r9, #32]
   180b0:	mov	r3, #0
   180b4:	str	r3, [sp, #8]
   180b8:	b	1845c <__assert_fail@plt+0x68b8>
   180bc:	ldr	r3, [r0, #48]	; 0x30
   180c0:	and	r2, r3, #516	; 0x204
   180c4:	cmp	r2, #512	; 0x200
   180c8:	ldreq	r0, [r0, #32]
   180cc:	mvnne	r0, #99	; 0x63
   180d0:	ldr	r1, [r9, #24]
   180d4:	ands	r2, r3, #16
   180d8:	beq	180f8 <__assert_fail@plt+0x6554>
   180dc:	tst	r3, #1
   180e0:	moveq	r2, #32768	; 0x8000
   180e4:	beq	180f8 <__assert_fail@plt+0x6554>
   180e8:	ldr	r2, [r9, #48]	; 0x30
   180ec:	cmp	r2, #0
   180f0:	movne	r2, #32768	; 0x8000
   180f4:	moveq	r2, #0
   180f8:	add	r3, sp, #60	; 0x3c
   180fc:	bl	1c754 <__assert_fail@plt+0xabb0>
   18100:	str	r0, [r9, #12]
   18104:	cmp	r0, #0
   18108:	beq	181fc <__assert_fail@plt+0x6658>
   1810c:	ldrh	r3, [r9, #56]	; 0x38
   18110:	cmp	r3, #11
   18114:	beq	18230 <__assert_fail@plt+0x668c>
   18118:	ldr	r3, [r5, #48]	; 0x30
   1811c:	tst	r3, #256	; 0x100
   18120:	bne	18248 <__assert_fail@plt+0x66a4>
   18124:	ldr	r3, [r5, #44]	; 0x2c
   18128:	cmp	r3, #0
   1812c:	ldr	r3, [pc, #2136]	; 1898c <__assert_fail@plt+0x6de8>
   18130:	mvnne	r3, #0
   18134:	str	r3, [sp, #24]
   18138:	ldr	r3, [sp, #40]	; 0x28
   1813c:	cmp	r3, #2
   18140:	beq	18338 <__assert_fail@plt+0x6794>
   18144:	ldr	r3, [r5, #48]	; 0x30
   18148:	and	r3, r3, #56	; 0x38
   1814c:	cmp	r3, #24
   18150:	beq	18290 <__assert_fail@plt+0x66ec>
   18154:	ldr	r3, [sp, #40]	; 0x28
   18158:	cmp	r3, #3
   1815c:	movne	r6, #0
   18160:	moveq	r6, #1
   18164:	mov	r4, #1
   18168:	ldr	r3, [r5, #48]	; 0x30
   1816c:	tst	r3, #512	; 0x200
   18170:	bne	18320 <__assert_fail@plt+0x677c>
   18174:	ldr	r2, [sp, #60]	; 0x3c
   18178:	cmp	r2, #0
   1817c:	blt	181a0 <__assert_fail@plt+0x65fc>
   18180:	mov	r3, #0
   18184:	mov	r1, r9
   18188:	mov	r0, r5
   1818c:	bl	17cf0 <__assert_fail@plt+0x614c>
   18190:	cmp	r0, #0
   18194:	moveq	r3, #1
   18198:	streq	r3, [sp, #52]	; 0x34
   1819c:	beq	17ff0 <__assert_fail@plt+0x644c>
   181a0:	tst	r4, r6
   181a4:	beq	181b4 <__assert_fail@plt+0x6610>
   181a8:	bl	119b8 <__errno_location@plt>
   181ac:	ldr	r3, [r0]
   181b0:	str	r3, [r9, #32]
   181b4:	ldrh	r3, [r9, #58]	; 0x3a
   181b8:	orr	r3, r3, #1
   181bc:	strh	r3, [r9, #58]	; 0x3a
   181c0:	ldr	r0, [r9, #12]
   181c4:	bl	11b98 <closedir@plt>
   181c8:	mov	r3, #0
   181cc:	str	r3, [r9, #12]
   181d0:	ldr	r3, [r5, #48]	; 0x30
   181d4:	tst	r3, #512	; 0x200
   181d8:	beq	181ec <__assert_fail@plt+0x6648>
   181dc:	ldr	r0, [sp, #60]	; 0x3c
   181e0:	cmp	r0, #0
   181e4:	blt	181ec <__assert_fail@plt+0x6648>
   181e8:	bl	11b80 <close@plt>
   181ec:	mov	r3, #0
   181f0:	str	r3, [r9, #12]
   181f4:	str	r3, [sp, #52]	; 0x34
   181f8:	b	17ff0 <__assert_fail@plt+0x644c>
   181fc:	ldr	r3, [sp, #40]	; 0x28
   18200:	cmp	r3, #3
   18204:	movne	r3, #0
   18208:	strne	r3, [sp, #8]
   1820c:	bne	1845c <__assert_fail@plt+0x68b8>
   18210:	mov	r3, #4
   18214:	strh	r3, [r9, #56]	; 0x38
   18218:	bl	119b8 <__errno_location@plt>
   1821c:	ldr	r3, [r0]
   18220:	str	r3, [r9, #32]
   18224:	mov	r3, #0
   18228:	str	r3, [sp, #8]
   1822c:	b	1845c <__assert_fail@plt+0x68b8>
   18230:	mov	r2, #0
   18234:	mov	r1, r9
   18238:	mov	r0, r5
   1823c:	bl	17614 <__assert_fail@plt+0x5a70>
   18240:	strh	r0, [r9, #56]	; 0x38
   18244:	b	18124 <__assert_fail@plt+0x6580>
   18248:	mov	r1, r9
   1824c:	mov	r0, r5
   18250:	bl	17ed8 <__assert_fail@plt+0x6334>
   18254:	mov	r2, #0
   18258:	mov	r1, r9
   1825c:	mov	r0, r5
   18260:	bl	17614 <__assert_fail@plt+0x5a70>
   18264:	mov	r1, r9
   18268:	mov	r0, r5
   1826c:	bl	17b54 <__assert_fail@plt+0x5fb0>
   18270:	cmp	r0, #0
   18274:	bne	18124 <__assert_fail@plt+0x6580>
   18278:	bl	119b8 <__errno_location@plt>
   1827c:	mov	r3, #12
   18280:	str	r3, [r0]
   18284:	mov	r3, #0
   18288:	str	r3, [sp, #8]
   1828c:	b	1845c <__assert_fail@plt+0x68b8>
   18290:	ldr	r3, [r9, #84]	; 0x54
   18294:	cmp	r3, #2
   18298:	bne	18154 <__assert_fail@plt+0x65b0>
   1829c:	ldr	r1, [sp, #60]	; 0x3c
   182a0:	mov	r0, r9
   182a4:	bl	17a38 <__assert_fail@plt+0x5e94>
   182a8:	ldr	r3, [pc, #1760]	; 18990 <__assert_fail@plt+0x6dec>
   182ac:	cmp	r0, r3
   182b0:	beq	18308 <__assert_fail@plt+0x6764>
   182b4:	bgt	182f0 <__assert_fail@plt+0x674c>
   182b8:	ldr	r3, [pc, #1748]	; 18994 <__assert_fail@plt+0x6df0>
   182bc:	cmp	r0, r3
   182c0:	beq	18308 <__assert_fail@plt+0x6764>
   182c4:	cmp	r0, #0
   182c8:	beq	18308 <__assert_fail@plt+0x6764>
   182cc:	ldr	r3, [sp, #40]	; 0x28
   182d0:	cmp	r3, #3
   182d4:	moveq	r6, #1
   182d8:	movne	r6, #0
   182dc:	movne	r3, #0
   182e0:	strne	r3, [sp, #52]	; 0x34
   182e4:	bne	17ff0 <__assert_fail@plt+0x644c>
   182e8:	mov	r4, #0
   182ec:	b	18168 <__assert_fail@plt+0x65c4>
   182f0:	ldr	r3, [pc, #1696]	; 18998 <__assert_fail@plt+0x6df4>
   182f4:	cmp	r0, r3
   182f8:	beq	18308 <__assert_fail@plt+0x6764>
   182fc:	ldr	r3, [pc, #1688]	; 1899c <__assert_fail@plt+0x6df8>
   18300:	cmp	r0, r3
   18304:	bne	182cc <__assert_fail@plt+0x6728>
   18308:	ldr	r3, [sp, #40]	; 0x28
   1830c:	cmp	r3, #3
   18310:	movne	r6, #0
   18314:	moveq	r6, #1
   18318:	mov	r4, #1
   1831c:	b	18168 <__assert_fail@plt+0x65c4>
   18320:	mov	r2, #3
   18324:	ldr	r1, [pc, #1652]	; 189a0 <__assert_fail@plt+0x6dfc>
   18328:	ldr	r0, [sp, #60]	; 0x3c
   1832c:	bl	2dec8 <__assert_fail@plt+0x1c324>
   18330:	str	r0, [sp, #60]	; 0x3c
   18334:	b	18174 <__assert_fail@plt+0x65d0>
   18338:	mov	r3, #0
   1833c:	str	r3, [sp, #52]	; 0x34
   18340:	b	17ff0 <__assert_fail@plt+0x644c>
   18344:	ldr	r3, [sp, #16]
   18348:	ldr	r3, [r3]
   1834c:	cmp	r3, #0
   18350:	beq	1837c <__assert_fail@plt+0x67d8>
   18354:	str	r3, [r9, #32]
   18358:	ldr	r3, [sp, #44]	; 0x2c
   1835c:	cmp	r8, #0
   18360:	cmpeq	r3, #0
   18364:	movne	r3, #1
   18368:	moveq	r3, #0
   1836c:	cmp	r3, #0
   18370:	movne	r3, #7
   18374:	moveq	r3, #4
   18378:	strh	r3, [r9, #56]	; 0x38
   1837c:	ldr	r0, [r9, #12]
   18380:	cmp	r0, #0
   18384:	beq	18394 <__assert_fail@plt+0x67f0>
   18388:	bl	11b98 <closedir@plt>
   1838c:	mov	r3, #0
   18390:	str	r3, [r9, #12]
   18394:	ldr	r3, [sp, #36]	; 0x24
   18398:	cmp	r3, #0
   1839c:	bne	187dc <__assert_fail@plt+0x6c38>
   183a0:	ldr	r3, [r5, #48]	; 0x30
   183a4:	tst	r3, #4
   183a8:	beq	183d4 <__assert_fail@plt+0x6830>
   183ac:	ldr	r3, [r5, #36]	; 0x24
   183b0:	ldr	r2, [sp, #12]
   183b4:	cmp	r8, #0
   183b8:	cmpne	r3, r2
   183bc:	ldreq	r3, [sp, #28]
   183c0:	subeq	r3, r3, #1
   183c4:	streq	r3, [sp, #28]
   183c8:	mov	r3, #0
   183cc:	ldr	r2, [sp, #28]
   183d0:	strb	r3, [r2]
   183d4:	ldr	r3, [sp, #52]	; 0x34
   183d8:	ldr	r2, [sp, #44]	; 0x2c
   183dc:	cmp	r2, #0
   183e0:	movne	r3, #0
   183e4:	andeq	r3, r3, #1
   183e8:	cmp	r3, #0
   183ec:	beq	18424 <__assert_fail@plt+0x6880>
   183f0:	ldr	r3, [sp, #40]	; 0x28
   183f4:	cmp	r8, #0
   183f8:	cmpne	r3, #1
   183fc:	bne	18424 <__assert_fail@plt+0x6880>
   18400:	ldr	r3, [r9, #48]	; 0x30
   18404:	cmp	r3, #0
   18408:	bne	1885c <__assert_fail@plt+0x6cb8>
   1840c:	mov	r0, r5
   18410:	bl	17ca0 <__assert_fail@plt+0x60fc>
   18414:	adds	r0, r0, #0
   18418:	movne	r0, #1
   1841c:	cmp	r0, #0
   18420:	bne	1887c <__assert_fail@plt+0x6cd8>
   18424:	cmp	r8, #0
   18428:	beq	188a4 <__assert_fail@plt+0x6d00>
   1842c:	ldr	r3, [sp, #48]	; 0x30
   18430:	cmp	r3, #0
   18434:	bne	188dc <__assert_fail@plt+0x6d38>
   18438:	ldr	r3, [r5, #44]	; 0x2c
   1843c:	cmp	r3, #0
   18440:	cmpne	r8, #1
   18444:	bls	1845c <__assert_fail@plt+0x68b8>
   18448:	mov	r2, r8
   1844c:	ldr	r1, [sp, #8]
   18450:	mov	r0, r5
   18454:	bl	1776c <__assert_fail@plt+0x5bc8>
   18458:	str	r0, [sp, #8]
   1845c:	ldr	r0, [sp, #8]
   18460:	add	sp, sp, #68	; 0x44
   18464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18468:	ldrb	r3, [r7, #20]
   1846c:	cmp	r3, #0
   18470:	beq	187d4 <__assert_fail@plt+0x6c30>
   18474:	ldrh	r3, [r7, #20]
   18478:	cmp	r3, #46	; 0x2e
   1847c:	bne	1862c <__assert_fail@plt+0x6a88>
   18480:	ldr	r4, [sp, #4]
   18484:	b	185e8 <__assert_fail@plt+0x6a44>
   18488:	ldr	fp, [r5, #24]
   1848c:	ldr	r3, [sp, #32]
   18490:	add	r1, r3, #2
   18494:	add	r1, r1, r6
   18498:	mov	r0, r5
   1849c:	bl	175a4 <__assert_fail@plt+0x5a00>
   184a0:	cmp	r0, #0
   184a4:	beq	184dc <__assert_fail@plt+0x6938>
   184a8:	ldr	r3, [r5, #24]
   184ac:	cmp	fp, r3
   184b0:	beq	18524 <__assert_fail@plt+0x6980>
   184b4:	ldr	r2, [r5, #48]	; 0x30
   184b8:	tst	r2, #4
   184bc:	ldrne	r2, [sp, #12]
   184c0:	addne	r3, r3, r2
   184c4:	strne	r3, [sp, #28]
   184c8:	ldr	fp, [r5, #36]	; 0x24
   184cc:	ldr	r3, [sp, #12]
   184d0:	sub	fp, fp, r3
   184d4:	str	r0, [sp, #36]	; 0x24
   184d8:	b	1865c <__assert_fail@plt+0x6ab8>
   184dc:	ldr	r7, [sp, #16]
   184e0:	ldr	r6, [r7]
   184e4:	mov	r0, r4
   184e8:	bl	17204 <__assert_fail@plt+0x5660>
   184ec:	ldr	r0, [sp, #8]
   184f0:	bl	17988 <__assert_fail@plt+0x5de4>
   184f4:	ldr	r0, [r9, #12]
   184f8:	bl	11b98 <closedir@plt>
   184fc:	mov	r2, #0
   18500:	str	r2, [r9, #12]
   18504:	mov	r3, #7
   18508:	strh	r3, [r9, #56]	; 0x38
   1850c:	ldr	r3, [r5, #48]	; 0x30
   18510:	orr	r3, r3, #8192	; 0x2000
   18514:	str	r3, [r5, #48]	; 0x30
   18518:	str	r6, [r7]
   1851c:	str	r2, [sp, #8]
   18520:	b	1845c <__assert_fail@plt+0x68b8>
   18524:	ldr	r0, [sp, #36]	; 0x24
   18528:	b	184c8 <__assert_fail@plt+0x6924>
   1852c:	mov	r0, r4
   18530:	bl	17204 <__assert_fail@plt+0x5660>
   18534:	ldr	r0, [sp, #8]
   18538:	bl	17988 <__assert_fail@plt+0x5de4>
   1853c:	ldr	r0, [r9, #12]
   18540:	bl	11b98 <closedir@plt>
   18544:	mov	r2, #0
   18548:	str	r2, [r9, #12]
   1854c:	mov	r3, #7
   18550:	strh	r3, [r9, #56]	; 0x38
   18554:	ldr	r3, [r5, #48]	; 0x30
   18558:	orr	r3, r3, #8192	; 0x2000
   1855c:	str	r3, [r5, #48]	; 0x30
   18560:	mov	r3, #36	; 0x24
   18564:	ldr	r1, [sp, #16]
   18568:	str	r3, [r1]
   1856c:	str	r2, [sp, #8]
   18570:	b	1845c <__assert_fail@plt+0x68b8>
   18574:	ldr	r3, [r4, #28]
   18578:	str	r3, [r4, #24]
   1857c:	ldr	r2, [r4, #52]	; 0x34
   18580:	add	r2, r2, #1
   18584:	add	r1, r4, #168	; 0xa8
   18588:	ldr	r0, [sp, #28]
   1858c:	bl	11748 <memmove@plt>
   18590:	b	18698 <__assert_fail@plt+0x6af4>
   18594:	mov	r3, sl
   18598:	mov	r2, #16384	; 0x4000
   1859c:	str	r2, [r4, #80]	; 0x50
   185a0:	cmp	r3, #0
   185a4:	movne	r2, #1
   185a8:	moveq	r2, #2
   185ac:	mov	r3, #0
   185b0:	strd	r2, [r4, #112]	; 0x70
   185b4:	str	sl, [r4, #8]
   185b8:	ldr	r3, [sp, #8]
   185bc:	cmp	r3, #0
   185c0:	ldrne	r3, [sp, #4]
   185c4:	strne	r4, [r3, #8]
   185c8:	streq	r4, [sp, #8]
   185cc:	ldr	r3, [pc, #976]	; 189a4 <__assert_fail@plt+0x6e00>
   185d0:	cmp	r8, r3
   185d4:	beq	18788 <__assert_fail@plt+0x6be4>
   185d8:	add	r8, r8, #1
   185dc:	ldr	r3, [sp, #24]
   185e0:	cmp	r8, r3
   185e4:	bcs	18394 <__assert_fail@plt+0x67f0>
   185e8:	str	r4, [sp, #4]
   185ec:	ldr	r3, [r9, #12]
   185f0:	cmp	r3, #0
   185f4:	beq	18394 <__assert_fail@plt+0x67f0>
   185f8:	bl	119b8 <__errno_location@plt>
   185fc:	str	r0, [sp, #16]
   18600:	str	sl, [r0]
   18604:	ldr	r0, [r9, #12]
   18608:	bl	11ab4 <readdir64@plt>
   1860c:	subs	r7, r0, #0
   18610:	beq	18344 <__assert_fail@plt+0x67a0>
   18614:	ldr	r3, [r5, #48]	; 0x30
   18618:	tst	r3, #32
   1861c:	bne	1862c <__assert_fail@plt+0x6a88>
   18620:	ldrb	r3, [r7, #19]
   18624:	cmp	r3, #46	; 0x2e
   18628:	beq	18468 <__assert_fail@plt+0x68c4>
   1862c:	add	r4, r7, #19
   18630:	mov	r0, r4
   18634:	bl	11988 <strlen@plt>
   18638:	mov	r6, r0
   1863c:	mov	r2, r0
   18640:	mov	r1, r4
   18644:	mov	r0, r5
   18648:	bl	17840 <__assert_fail@plt+0x5c9c>
   1864c:	subs	r4, r0, #0
   18650:	beq	184dc <__assert_fail@plt+0x6938>
   18654:	cmp	fp, r6
   18658:	bls	18488 <__assert_fail@plt+0x68e4>
   1865c:	ldr	r3, [sp, #12]
   18660:	adds	r6, r3, r6
   18664:	bcs	1852c <__assert_fail@plt+0x6988>
   18668:	ldr	r3, [sp, #20]
   1866c:	str	r3, [r4, #48]	; 0x30
   18670:	ldr	r3, [r5]
   18674:	str	r3, [r4, #4]
   18678:	str	r6, [r4, #40]	; 0x28
   1867c:	ldrd	r2, [r7]
   18680:	strd	r2, [r4, #160]	; 0xa0
   18684:	ldr	r3, [r5, #48]	; 0x30
   18688:	tst	r3, #4
   1868c:	addeq	r3, r4, #168	; 0xa8
   18690:	streq	r3, [r4, #24]
   18694:	bne	18574 <__assert_fail@plt+0x69d0>
   18698:	ldr	r3, [r5, #44]	; 0x2c
   1869c:	cmp	r3, #0
   186a0:	beq	186b0 <__assert_fail@plt+0x6b0c>
   186a4:	ldr	r3, [r5, #48]	; 0x30
   186a8:	tst	r3, #1024	; 0x400
   186ac:	beq	18770 <__assert_fail@plt+0x6bcc>
   186b0:	ldr	r3, [r5, #48]	; 0x30
   186b4:	tst	r3, #8
   186b8:	beq	18940 <__assert_fail@plt+0x6d9c>
   186bc:	ldrb	r2, [r7, #18]
   186c0:	tst	r2, #251	; 0xfb
   186c4:	beq	18940 <__assert_fail@plt+0x6d9c>
   186c8:	lsr	r3, r3, #4
   186cc:	and	r3, r3, #1
   186d0:	cmp	r2, #10
   186d4:	orrne	r3, r3, #1
   186d8:	cmp	r3, #0
   186dc:	beq	18940 <__assert_fail@plt+0x6d9c>
   186e0:	mov	r2, #11
   186e4:	strh	r2, [r4, #56]	; 0x38
   186e8:	ldrb	r2, [r7, #18]
   186ec:	sub	r2, r2, #1
   186f0:	cmp	r2, #11
   186f4:	ldrls	pc, [pc, r2, lsl #2]
   186f8:	b	18760 <__assert_fail@plt+0x6bbc>
   186fc:	andeq	r8, r1, r0, lsr r7
   18700:	andeq	r8, r1, r8, ror #14
   18704:	andeq	r8, r1, r0, ror #14
   18708:	muleq	r1, r8, r5
   1870c:	andeq	r8, r1, r0, ror #14
   18710:	andeq	r8, r1, r4, lsl #18
   18714:	andeq	r8, r1, r0, ror #14
   18718:	andeq	r8, r1, r8, asr #14
   1871c:	andeq	r8, r1, r0, ror #14
   18720:	andeq	r8, r1, ip, lsr r7
   18724:	andeq	r8, r1, r0, ror #14
   18728:	andeq	r8, r1, r4, asr r7
   1872c:	mov	r3, sl
   18730:	mov	r2, #4096	; 0x1000
   18734:	b	1859c <__assert_fail@plt+0x69f8>
   18738:	mov	r3, sl
   1873c:	mov	r2, #40960	; 0xa000
   18740:	b	1859c <__assert_fail@plt+0x69f8>
   18744:	mov	r3, sl
   18748:	mov	r2, #32768	; 0x8000
   1874c:	b	1859c <__assert_fail@plt+0x69f8>
   18750:	mov	r3, sl
   18754:	mov	r2, #49152	; 0xc000
   18758:	b	1859c <__assert_fail@plt+0x69f8>
   1875c:	mov	r3, sl
   18760:	mov	r2, sl
   18764:	b	1859c <__assert_fail@plt+0x69f8>
   18768:	mov	r2, #8192	; 0x2000
   1876c:	b	1859c <__assert_fail@plt+0x69f8>
   18770:	mov	r2, sl
   18774:	mov	r1, r4
   18778:	mov	r0, r5
   1877c:	bl	17614 <__assert_fail@plt+0x5a70>
   18780:	strh	r0, [r4, #56]	; 0x38
   18784:	b	185b4 <__assert_fail@plt+0x6a10>
   18788:	ldr	r3, [r5, #44]	; 0x2c
   1878c:	cmp	r3, #0
   18790:	bne	185d8 <__assert_fail@plt+0x6a34>
   18794:	ldr	r1, [sp, #60]	; 0x3c
   18798:	mov	r0, r9
   1879c:	bl	17a38 <__assert_fail@plt+0x5e94>
   187a0:	ldr	r3, [pc, #488]	; 18990 <__assert_fail@plt+0x6dec>
   187a4:	cmp	r0, r3
   187a8:	beq	187cc <__assert_fail@plt+0x6c28>
   187ac:	ldr	r3, [pc, #500]	; 189a8 <__assert_fail@plt+0x6e04>
   187b0:	cmp	r0, r3
   187b4:	beq	187cc <__assert_fail@plt+0x6c28>
   187b8:	ldr	r3, [pc, #468]	; 18994 <__assert_fail@plt+0x6df0>
   187bc:	cmp	r0, r3
   187c0:	movne	r3, #1
   187c4:	strne	r3, [sp, #48]	; 0x30
   187c8:	bne	185d8 <__assert_fail@plt+0x6a34>
   187cc:	str	sl, [sp, #48]	; 0x30
   187d0:	b	185d8 <__assert_fail@plt+0x6a34>
   187d4:	ldr	r4, [sp, #4]
   187d8:	b	185e8 <__assert_fail@plt+0x6a44>
   187dc:	ldr	r0, [r5, #24]
   187e0:	ldr	r1, [r5, #4]
   187e4:	cmp	r1, #0
   187e8:	beq	18818 <__assert_fail@plt+0x6c74>
   187ec:	ldr	r3, [r1, #24]
   187f0:	add	r2, r1, #168	; 0xa8
   187f4:	cmp	r3, r2
   187f8:	ldrne	r2, [r1, #28]
   187fc:	subne	r3, r3, r2
   18800:	addne	r3, r0, r3
   18804:	strne	r3, [r1, #24]
   18808:	str	r0, [r1, #28]
   1880c:	ldr	r1, [r1, #8]
   18810:	cmp	r1, #0
   18814:	bne	187ec <__assert_fail@plt+0x6c48>
   18818:	ldr	r3, [sp, #8]
   1881c:	ldr	r2, [r3, #48]	; 0x30
   18820:	cmp	r2, #0
   18824:	blt	183a0 <__assert_fail@plt+0x67fc>
   18828:	ldr	r2, [r3, #24]
   1882c:	add	r1, r3, #168	; 0xa8
   18830:	cmp	r2, r1
   18834:	ldrne	r1, [r3, #28]
   18838:	subne	r2, r2, r1
   1883c:	addne	r2, r0, r2
   18840:	strne	r2, [r3, #24]
   18844:	str	r0, [r3, #28]
   18848:	ldr	r2, [r3, #8]
   1884c:	cmp	r2, #0
   18850:	ldreq	r2, [r3, #4]
   18854:	mov	r3, r2
   18858:	b	1881c <__assert_fail@plt+0x6c78>
   1885c:	ldr	r3, [pc, #328]	; 189ac <__assert_fail@plt+0x6e08>
   18860:	mvn	r2, #0
   18864:	ldr	r1, [r9, #4]
   18868:	mov	r0, r5
   1886c:	bl	17cf0 <__assert_fail@plt+0x614c>
   18870:	adds	r0, r0, #0
   18874:	movne	r0, #1
   18878:	b	1841c <__assert_fail@plt+0x6878>
   1887c:	mov	r3, #7
   18880:	strh	r3, [r9, #56]	; 0x38
   18884:	ldr	r3, [r5, #48]	; 0x30
   18888:	orr	r3, r3, #8192	; 0x2000
   1888c:	str	r3, [r5, #48]	; 0x30
   18890:	ldr	r0, [sp, #8]
   18894:	bl	17988 <__assert_fail@plt+0x5de4>
   18898:	mov	r3, #0
   1889c:	str	r3, [sp, #8]
   188a0:	b	1845c <__assert_fail@plt+0x68b8>
   188a4:	ldr	r3, [sp, #40]	; 0x28
   188a8:	cmp	r3, #3
   188ac:	beq	188c4 <__assert_fail@plt+0x6d20>
   188b0:	ldr	r0, [sp, #8]
   188b4:	bl	17988 <__assert_fail@plt+0x5de4>
   188b8:	mov	r3, #0
   188bc:	str	r3, [sp, #8]
   188c0:	b	1845c <__assert_fail@plt+0x68b8>
   188c4:	ldrh	r3, [r9, #56]	; 0x38
   188c8:	cmp	r3, #4
   188cc:	cmpne	r3, #7
   188d0:	movne	r3, #6
   188d4:	strhne	r3, [r9, #56]	; 0x38
   188d8:	b	188b0 <__assert_fail@plt+0x6d0c>
   188dc:	ldr	r3, [pc, #204]	; 189b0 <__assert_fail@plt+0x6e0c>
   188e0:	str	r3, [r5, #44]	; 0x2c
   188e4:	mov	r2, r8
   188e8:	ldr	r1, [sp, #8]
   188ec:	mov	r0, r5
   188f0:	bl	1776c <__assert_fail@plt+0x5bc8>
   188f4:	str	r0, [sp, #8]
   188f8:	mov	r3, #0
   188fc:	str	r3, [r5, #44]	; 0x2c
   18900:	b	1845c <__assert_fail@plt+0x68b8>
   18904:	mov	r3, #24576	; 0x6000
   18908:	str	r3, [r4, #80]	; 0x50
   1890c:	mov	r2, #1
   18910:	mov	r3, #0
   18914:	b	185b0 <__assert_fail@plt+0x6a0c>
   18918:	mov	r3, #24576	; 0x6000
   1891c:	str	r3, [r4, #80]	; 0x50
   18920:	mov	r2, #2
   18924:	mov	r3, #0
   18928:	b	185b0 <__assert_fail@plt+0x6a0c>
   1892c:	mov	r3, #8192	; 0x2000
   18930:	str	r3, [r4, #80]	; 0x50
   18934:	mov	r2, #2
   18938:	mov	r3, #0
   1893c:	b	185b0 <__assert_fail@plt+0x6a0c>
   18940:	mov	r3, #11
   18944:	strh	r3, [r4, #56]	; 0x38
   18948:	ldrb	r3, [r7, #18]
   1894c:	sub	r3, r3, #1
   18950:	cmp	r3, #11
   18954:	ldrls	pc, [pc, r3, lsl #2]
   18958:	b	1875c <__assert_fail@plt+0x6bb8>
   1895c:	andeq	r8, r1, ip, lsr #14
   18960:	andeq	r8, r1, ip, lsr #18
   18964:	andeq	r8, r1, ip, asr r7
   18968:	muleq	r1, r4, r5
   1896c:	andeq	r8, r1, ip, asr r7
   18970:	andeq	r8, r1, r8, lsl r9
   18974:	andeq	r8, r1, ip, asr r7
   18978:	andeq	r8, r1, r4, asr #14
   1897c:	andeq	r8, r1, ip, asr r7
   18980:	andeq	r8, r1, r8, lsr r7
   18984:	andeq	r8, r1, ip, asr r7
   18988:	andeq	r8, r1, r0, asr r7
   1898c:	andeq	r8, r1, r0, lsr #13
   18990:	andeq	r6, r0, r9, ror #18
   18994:			; <UNDEFINED> instruction: 0xff534d42
   18998:	andeq	r9, r0, r0, lsr #31
   1899c:	movtpl	r4, #24911	; 0x614f
   189a0:	andeq	r0, r0, r6, lsl #8
   189a4:	andeq	r2, r0, r0, lsl r7
   189a8:			; <UNDEFINED> instruction: 0x01021994
   189ac:	andeq	r0, r3, r4, lsr #14
   189b0:	andeq	r7, r1, ip, ror #10
   189b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   189b8:	sub	sp, sp, #20
   189bc:	bic	r3, r1, #4080	; 0xff0
   189c0:	bics	r3, r3, #15
   189c4:	bne	18ae4 <__assert_fail@plt+0x6f40>
   189c8:	mov	r7, r0
   189cc:	mov	r9, r1
   189d0:	mov	fp, r2
   189d4:	and	r3, r1, #516	; 0x204
   189d8:	cmp	r3, #516	; 0x204
   189dc:	beq	18af8 <__assert_fail@plt+0x6f54>
   189e0:	tst	r1, #18
   189e4:	beq	18b0c <__assert_fail@plt+0x6f68>
   189e8:	mov	r1, #96	; 0x60
   189ec:	mov	r0, #1
   189f0:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   189f4:	subs	r6, r0, #0
   189f8:	beq	18d28 <__assert_fail@plt+0x7184>
   189fc:	str	fp, [r6, #44]	; 0x2c
   18a00:	tst	r9, #2
   18a04:	streq	r9, [r6, #48]	; 0x30
   18a08:	bicne	r3, r9, #512	; 0x200
   18a0c:	orrne	r3, r3, #4
   18a10:	strne	r3, [r6, #48]	; 0x30
   18a14:	mvn	r3, #99	; 0x63
   18a18:	str	r3, [r6, #32]
   18a1c:	ldr	r0, [r7]
   18a20:	cmp	r0, #0
   18a24:	beq	18b20 <__assert_fail@plt+0x6f7c>
   18a28:	mov	r5, r7
   18a2c:	mov	r4, #0
   18a30:	bl	11988 <strlen@plt>
   18a34:	cmp	r4, r0
   18a38:	movcc	r4, r0
   18a3c:	ldr	r0, [r5, #4]!
   18a40:	cmp	r0, #0
   18a44:	bne	18a30 <__assert_fail@plt+0x6e8c>
   18a48:	add	r1, r4, #1
   18a4c:	cmp	r1, #4096	; 0x1000
   18a50:	movcc	r1, #4096	; 0x1000
   18a54:	mov	r0, r6
   18a58:	bl	175a4 <__assert_fail@plt+0x5a00>
   18a5c:	subs	sl, r0, #0
   18a60:	beq	18d1c <__assert_fail@plt+0x7178>
   18a64:	ldr	r3, [r7]
   18a68:	cmp	r3, #0
   18a6c:	beq	18d34 <__assert_fail@plt+0x7190>
   18a70:	mov	r2, #0
   18a74:	ldr	r1, [pc, #716]	; 18d48 <__assert_fail@plt+0x71a4>
   18a78:	mov	r0, r6
   18a7c:	bl	17840 <__assert_fail@plt+0x5c9c>
   18a80:	subs	r3, r0, #0
   18a84:	mov	r2, r3
   18a88:	str	r3, [sp, #8]
   18a8c:	beq	18d14 <__assert_fail@plt+0x7170>
   18a90:	mvn	r3, #0
   18a94:	str	r3, [r2, #48]	; 0x30
   18a98:	cmp	fp, #0
   18a9c:	beq	18aac <__assert_fail@plt+0x6f08>
   18aa0:	ldr	sl, [r6, #48]	; 0x30
   18aa4:	lsr	sl, sl, #10
   18aa8:	and	sl, sl, #1
   18aac:	ldr	r4, [r7]
   18ab0:	cmp	r4, #0
   18ab4:	beq	18cc4 <__assert_fail@plt+0x7120>
   18ab8:	mov	r3, #0
   18abc:	mov	r5, r3
   18ac0:	str	r3, [sp, #12]
   18ac4:	mov	r8, r3
   18ac8:	lsr	r9, r9, #11
   18acc:	eor	r9, r9, #1
   18ad0:	and	r3, r9, #1
   18ad4:	mov	r9, r5
   18ad8:	str	r6, [sp, #4]
   18adc:	mov	r6, r3
   18ae0:	b	18b98 <__assert_fail@plt+0x6ff4>
   18ae4:	bl	119b8 <__errno_location@plt>
   18ae8:	mov	r3, #22
   18aec:	str	r3, [r0]
   18af0:	mov	r6, #0
   18af4:	b	18d28 <__assert_fail@plt+0x7184>
   18af8:	bl	119b8 <__errno_location@plt>
   18afc:	mov	r3, #22
   18b00:	str	r3, [r0]
   18b04:	mov	r6, #0
   18b08:	b	18d28 <__assert_fail@plt+0x7184>
   18b0c:	bl	119b8 <__errno_location@plt>
   18b10:	mov	r3, #22
   18b14:	str	r3, [r0]
   18b18:	mov	r6, #0
   18b1c:	b	18d28 <__assert_fail@plt+0x7184>
   18b20:	mov	r4, #0
   18b24:	b	18a48 <__assert_fail@plt+0x6ea4>
   18b28:	mov	r1, r4
   18b2c:	ldr	r0, [sp, #4]
   18b30:	bl	17840 <__assert_fail@plt+0x5c9c>
   18b34:	subs	r4, r0, #0
   18b38:	beq	18d00 <__assert_fail@plt+0x715c>
   18b3c:	str	r9, [r4, #48]	; 0x30
   18b40:	ldr	r3, [sp, #8]
   18b44:	str	r3, [r4, #4]
   18b48:	add	r3, r4, #168	; 0xa8
   18b4c:	str	r3, [r4, #24]
   18b50:	cmp	r5, #0
   18b54:	moveq	r3, #0
   18b58:	andne	r3, sl, #1
   18b5c:	cmp	r3, #0
   18b60:	beq	18c00 <__assert_fail@plt+0x705c>
   18b64:	mov	r3, #11
   18b68:	strh	r3, [r4, #56]	; 0x38
   18b6c:	mov	r2, #2
   18b70:	mov	r3, #0
   18b74:	strd	r2, [r4, #112]	; 0x70
   18b78:	cmp	fp, #0
   18b7c:	beq	18c18 <__assert_fail@plt+0x7074>
   18b80:	str	r5, [r4, #8]
   18b84:	mov	r5, r4
   18b88:	add	r8, r8, #1
   18b8c:	ldr	r4, [r7, #4]!
   18b90:	cmp	r4, #0
   18b94:	beq	18c38 <__assert_fail@plt+0x7094>
   18b98:	mov	r0, r4
   18b9c:	bl	11988 <strlen@plt>
   18ba0:	mov	r2, r0
   18ba4:	cmp	r0, #2
   18ba8:	movls	r3, #0
   18bac:	andhi	r3, r6, #1
   18bb0:	cmp	r3, #0
   18bb4:	beq	18b28 <__assert_fail@plt+0x6f84>
   18bb8:	add	r3, r4, r0
   18bbc:	ldrb	r3, [r3, #-1]
   18bc0:	cmp	r3, #47	; 0x2f
   18bc4:	bne	18b28 <__assert_fail@plt+0x6f84>
   18bc8:	cmp	r0, #1
   18bcc:	bls	18b28 <__assert_fail@plt+0x6f84>
   18bd0:	sub	r1, r0, #2
   18bd4:	add	r3, r4, r1
   18bd8:	ldrb	r1, [r4, r1]
   18bdc:	cmp	r1, #47	; 0x2f
   18be0:	bne	18b28 <__assert_fail@plt+0x6f84>
   18be4:	sub	r2, r2, #1
   18be8:	cmp	r2, #1
   18bec:	beq	18b28 <__assert_fail@plt+0x6f84>
   18bf0:	ldrb	r1, [r3, #-1]!
   18bf4:	cmp	r1, #47	; 0x2f
   18bf8:	beq	18be4 <__assert_fail@plt+0x7040>
   18bfc:	b	18b28 <__assert_fail@plt+0x6f84>
   18c00:	mov	r2, r9
   18c04:	mov	r1, r4
   18c08:	ldr	r0, [sp, #4]
   18c0c:	bl	17614 <__assert_fail@plt+0x5a70>
   18c10:	strh	r0, [r4, #56]	; 0x38
   18c14:	b	18b78 <__assert_fail@plt+0x6fd4>
   18c18:	str	r9, [r4, #8]
   18c1c:	cmp	r5, #0
   18c20:	ldrne	r3, [sp, #12]
   18c24:	strne	r4, [r3, #8]
   18c28:	strne	r4, [sp, #12]
   18c2c:	streq	r4, [sp, #12]
   18c30:	moveq	r5, r4
   18c34:	b	18b88 <__assert_fail@plt+0x6fe4>
   18c38:	ldr	r6, [sp, #4]
   18c3c:	cmp	fp, #0
   18c40:	cmpne	r8, #1
   18c44:	bhi	18cac <__assert_fail@plt+0x7108>
   18c48:	mov	r2, #0
   18c4c:	ldr	r1, [pc, #244]	; 18d48 <__assert_fail@plt+0x71a4>
   18c50:	mov	r0, r6
   18c54:	bl	17840 <__assert_fail@plt+0x5c9c>
   18c58:	str	r0, [r6]
   18c5c:	cmp	r0, #0
   18c60:	beq	18d04 <__assert_fail@plt+0x7160>
   18c64:	str	r5, [r0, #8]
   18c68:	ldr	r3, [r6]
   18c6c:	mov	r2, #9
   18c70:	strh	r2, [r3, #56]	; 0x38
   18c74:	ldr	r3, [r6]
   18c78:	mov	r2, #1
   18c7c:	str	r2, [r3, #48]	; 0x30
   18c80:	mov	r0, r6
   18c84:	bl	178b4 <__assert_fail@plt+0x5d10>
   18c88:	cmp	r0, #0
   18c8c:	beq	18d04 <__assert_fail@plt+0x7160>
   18c90:	ldr	r3, [r6, #48]	; 0x30
   18c94:	tst	r3, #516	; 0x204
   18c98:	beq	18cdc <__assert_fail@plt+0x7138>
   18c9c:	mvn	r1, #0
   18ca0:	add	r0, r6, #60	; 0x3c
   18ca4:	bl	1b0ec <__assert_fail@plt+0x9548>
   18ca8:	b	18d28 <__assert_fail@plt+0x7184>
   18cac:	mov	r2, r8
   18cb0:	mov	r1, r5
   18cb4:	mov	r0, r6
   18cb8:	bl	1776c <__assert_fail@plt+0x5bc8>
   18cbc:	mov	r5, r0
   18cc0:	b	18c48 <__assert_fail@plt+0x70a4>
   18cc4:	mov	r5, #0
   18cc8:	b	18c48 <__assert_fail@plt+0x70a4>
   18ccc:	mov	r3, #0
   18cd0:	str	r3, [sp, #8]
   18cd4:	mov	r5, r3
   18cd8:	b	18c48 <__assert_fail@plt+0x70a4>
   18cdc:	ldr	r1, [pc, #104]	; 18d4c <__assert_fail@plt+0x71a8>
   18ce0:	mov	r0, r6
   18ce4:	bl	17938 <__assert_fail@plt+0x5d94>
   18ce8:	str	r0, [r6, #28]
   18cec:	cmp	r0, #0
   18cf0:	ldrlt	r3, [r6, #48]	; 0x30
   18cf4:	orrlt	r3, r3, #4
   18cf8:	strlt	r3, [r6, #48]	; 0x30
   18cfc:	b	18c9c <__assert_fail@plt+0x70f8>
   18d00:	ldr	r6, [sp, #4]
   18d04:	mov	r0, r5
   18d08:	bl	17988 <__assert_fail@plt+0x5de4>
   18d0c:	ldr	r0, [sp, #8]
   18d10:	bl	17204 <__assert_fail@plt+0x5660>
   18d14:	ldr	r0, [r6, #24]
   18d18:	bl	17204 <__assert_fail@plt+0x5660>
   18d1c:	mov	r0, r6
   18d20:	bl	17204 <__assert_fail@plt+0x5660>
   18d24:	mov	r6, #0
   18d28:	mov	r0, r6
   18d2c:	add	sp, sp, #20
   18d30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d34:	cmp	fp, #0
   18d38:	beq	18ccc <__assert_fail@plt+0x7128>
   18d3c:	mov	r3, #0
   18d40:	str	r3, [sp, #8]
   18d44:	b	18aa0 <__assert_fail@plt+0x6efc>
   18d48:	andeq	r0, r3, ip, lsl #15
   18d4c:	ldrdeq	pc, [r2], -ip
   18d50:	push	{r4, r5, r6, lr}
   18d54:	mov	r5, r0
   18d58:	ldr	r0, [r0]
   18d5c:	cmp	r0, #0
   18d60:	beq	18d98 <__assert_fail@plt+0x71f4>
   18d64:	ldr	r3, [r0, #48]	; 0x30
   18d68:	cmp	r3, #0
   18d6c:	blt	18dfc <__assert_fail@plt+0x7258>
   18d70:	ldr	r4, [r0, #8]
   18d74:	cmp	r4, #0
   18d78:	ldreq	r4, [r0, #4]
   18d7c:	bl	17204 <__assert_fail@plt+0x5660>
   18d80:	mov	r0, r4
   18d84:	ldr	r3, [r4, #48]	; 0x30
   18d88:	cmp	r3, #0
   18d8c:	bge	18d70 <__assert_fail@plt+0x71cc>
   18d90:	mov	r0, r4
   18d94:	bl	17204 <__assert_fail@plt+0x5660>
   18d98:	ldr	r0, [r5, #4]
   18d9c:	cmp	r0, #0
   18da0:	beq	18da8 <__assert_fail@plt+0x7204>
   18da4:	bl	17988 <__assert_fail@plt+0x5de4>
   18da8:	ldr	r0, [r5, #8]
   18dac:	bl	17204 <__assert_fail@plt+0x5660>
   18db0:	ldr	r0, [r5, #24]
   18db4:	bl	17204 <__assert_fail@plt+0x5660>
   18db8:	ldr	r3, [r5, #48]	; 0x30
   18dbc:	tst	r3, #512	; 0x200
   18dc0:	beq	18e04 <__assert_fail@plt+0x7260>
   18dc4:	ldr	r0, [r5, #32]
   18dc8:	cmp	r0, #0
   18dcc:	blt	18e0c <__assert_fail@plt+0x7268>
   18dd0:	bl	11b80 <close@plt>
   18dd4:	cmp	r0, #0
   18dd8:	beq	18e0c <__assert_fail@plt+0x7268>
   18ddc:	bl	119b8 <__errno_location@plt>
   18de0:	ldr	r4, [r0]
   18de4:	add	r0, r5, #60	; 0x3c
   18de8:	bl	17a04 <__assert_fail@plt+0x5e60>
   18dec:	ldr	r0, [r5, #52]	; 0x34
   18df0:	cmp	r0, #0
   18df4:	bne	18e24 <__assert_fail@plt+0x7280>
   18df8:	b	18e28 <__assert_fail@plt+0x7284>
   18dfc:	mov	r4, r0
   18e00:	b	18d90 <__assert_fail@plt+0x71ec>
   18e04:	tst	r3, #4
   18e08:	beq	18e48 <__assert_fail@plt+0x72a4>
   18e0c:	add	r0, r5, #60	; 0x3c
   18e10:	bl	17a04 <__assert_fail@plt+0x5e60>
   18e14:	ldr	r0, [r5, #52]	; 0x34
   18e18:	cmp	r0, #0
   18e1c:	movne	r4, #0
   18e20:	beq	18e9c <__assert_fail@plt+0x72f8>
   18e24:	bl	1a138 <__assert_fail@plt+0x8594>
   18e28:	mov	r0, r5
   18e2c:	bl	179c8 <__assert_fail@plt+0x5e24>
   18e30:	mov	r0, r5
   18e34:	bl	17204 <__assert_fail@plt+0x5660>
   18e38:	cmp	r4, #0
   18e3c:	bne	18e8c <__assert_fail@plt+0x72e8>
   18e40:	mov	r0, r4
   18e44:	pop	{r4, r5, r6, pc}
   18e48:	ldr	r0, [r5, #28]
   18e4c:	bl	11ae4 <fchdir@plt>
   18e50:	subs	r4, r0, #0
   18e54:	beq	18e60 <__assert_fail@plt+0x72bc>
   18e58:	bl	119b8 <__errno_location@plt>
   18e5c:	ldr	r4, [r0]
   18e60:	ldr	r0, [r5, #28]
   18e64:	bl	11b80 <close@plt>
   18e68:	clz	r3, r4
   18e6c:	lsr	r3, r3, #5
   18e70:	cmp	r0, #0
   18e74:	moveq	r3, #0
   18e78:	cmp	r3, #0
   18e7c:	beq	18de4 <__assert_fail@plt+0x7240>
   18e80:	bl	119b8 <__errno_location@plt>
   18e84:	ldr	r4, [r0]
   18e88:	b	18de4 <__assert_fail@plt+0x7240>
   18e8c:	bl	119b8 <__errno_location@plt>
   18e90:	str	r4, [r0]
   18e94:	mvn	r4, #0
   18e98:	b	18e40 <__assert_fail@plt+0x729c>
   18e9c:	mov	r0, r5
   18ea0:	bl	179c8 <__assert_fail@plt+0x5e24>
   18ea4:	mov	r0, r5
   18ea8:	bl	17204 <__assert_fail@plt+0x5660>
   18eac:	mov	r4, #0
   18eb0:	b	18e40 <__assert_fail@plt+0x729c>
   18eb4:	push	{r4, r5, r6, r7, r8, lr}
   18eb8:	ldr	r5, [r0]
   18ebc:	cmp	r5, #0
   18ec0:	beq	19504 <__assert_fail@plt+0x7960>
   18ec4:	ldr	r3, [r0, #48]	; 0x30
   18ec8:	tst	r3, #8192	; 0x2000
   18ecc:	bne	1950c <__assert_fail@plt+0x7968>
   18ed0:	mov	r8, r0
   18ed4:	ldrh	r3, [r5, #60]	; 0x3c
   18ed8:	mov	r2, #3
   18edc:	strh	r2, [r5, #60]	; 0x3c
   18ee0:	cmp	r3, #1
   18ee4:	beq	18f64 <__assert_fail@plt+0x73c0>
   18ee8:	cmp	r3, #2
   18eec:	beq	18f7c <__assert_fail@plt+0x73d8>
   18ef0:	ldrh	r2, [r5, #56]	; 0x38
   18ef4:	cmp	r2, #1
   18ef8:	bne	19170 <__assert_fail@plt+0x75cc>
   18efc:	cmp	r3, #4
   18f00:	beq	18f24 <__assert_fail@plt+0x7380>
   18f04:	ldr	r1, [r8, #48]	; 0x30
   18f08:	tst	r1, #64	; 0x40
   18f0c:	beq	1901c <__assert_fail@plt+0x7478>
   18f10:	ldrd	r6, [r5, #64]	; 0x40
   18f14:	ldrd	r2, [r8, #16]
   18f18:	cmp	r7, r3
   18f1c:	cmpeq	r6, r2
   18f20:	beq	1901c <__assert_fail@plt+0x7478>
   18f24:	ldrh	r3, [r5, #58]	; 0x3a
   18f28:	tst	r3, #2
   18f2c:	bne	19010 <__assert_fail@plt+0x746c>
   18f30:	ldr	r0, [r8, #4]
   18f34:	cmp	r0, #0
   18f38:	beq	18f48 <__assert_fail@plt+0x73a4>
   18f3c:	bl	17988 <__assert_fail@plt+0x5de4>
   18f40:	mov	r3, #0
   18f44:	str	r3, [r8, #4]
   18f48:	mov	r3, #6
   18f4c:	strh	r3, [r5, #56]	; 0x38
   18f50:	mov	r1, r5
   18f54:	mov	r0, r8
   18f58:	bl	17ed8 <__assert_fail@plt+0x6334>
   18f5c:	mov	r4, r5
   18f60:	b	1924c <__assert_fail@plt+0x76a8>
   18f64:	mov	r2, #0
   18f68:	mov	r1, r5
   18f6c:	bl	17614 <__assert_fail@plt+0x5a70>
   18f70:	strh	r0, [r5, #56]	; 0x38
   18f74:	mov	r4, r5
   18f78:	b	1924c <__assert_fail@plt+0x76a8>
   18f7c:	ldrh	r2, [r5, #56]	; 0x38
   18f80:	sub	r3, r2, #12
   18f84:	uxth	r3, r3
   18f88:	cmp	r3, #1
   18f8c:	bls	18f9c <__assert_fail@plt+0x73f8>
   18f90:	cmp	r2, #1
   18f94:	bne	19170 <__assert_fail@plt+0x75cc>
   18f98:	b	18f04 <__assert_fail@plt+0x7360>
   18f9c:	mov	r2, #1
   18fa0:	mov	r1, r5
   18fa4:	bl	17614 <__assert_fail@plt+0x5a70>
   18fa8:	strh	r0, [r5, #56]	; 0x38
   18fac:	cmp	r0, #1
   18fb0:	movne	r4, r5
   18fb4:	bne	1934c <__assert_fail@plt+0x77a8>
   18fb8:	ldr	r3, [r8, #48]	; 0x30
   18fbc:	tst	r3, #4
   18fc0:	movne	r4, r5
   18fc4:	bne	1934c <__assert_fail@plt+0x77a8>
   18fc8:	ldr	r1, [pc, #1356]	; 1951c <__assert_fail@plt+0x7978>
   18fcc:	mov	r0, r8
   18fd0:	bl	17938 <__assert_fail@plt+0x5d94>
   18fd4:	str	r0, [r5, #36]	; 0x24
   18fd8:	cmp	r0, #0
   18fdc:	blt	18ff4 <__assert_fail@plt+0x7450>
   18fe0:	ldrh	r3, [r5, #58]	; 0x3a
   18fe4:	orr	r3, r3, #2
   18fe8:	strh	r3, [r5, #58]	; 0x3a
   18fec:	mov	r4, r5
   18ff0:	b	1934c <__assert_fail@plt+0x77a8>
   18ff4:	bl	119b8 <__errno_location@plt>
   18ff8:	ldr	r3, [r0]
   18ffc:	str	r3, [r5, #32]
   19000:	mov	r3, #7
   19004:	strh	r3, [r5, #56]	; 0x38
   19008:	mov	r4, r5
   1900c:	b	1934c <__assert_fail@plt+0x77a8>
   19010:	ldr	r0, [r5, #36]	; 0x24
   19014:	bl	11b80 <close@plt>
   19018:	b	18f30 <__assert_fail@plt+0x738c>
   1901c:	ldr	r0, [r8, #4]
   19020:	cmp	r0, #0
   19024:	beq	19070 <__assert_fail@plt+0x74cc>
   19028:	tst	r1, #4096	; 0x1000
   1902c:	bne	1905c <__assert_fail@plt+0x74b8>
   19030:	ldr	r3, [r5, #24]
   19034:	mvn	r2, #0
   19038:	mov	r1, r5
   1903c:	mov	r0, r8
   19040:	bl	17cf0 <__assert_fail@plt+0x614c>
   19044:	cmp	r0, #0
   19048:	bne	190c4 <__assert_fail@plt+0x7520>
   1904c:	ldr	r4, [r8, #4]
   19050:	mov	r3, #0
   19054:	str	r3, [r8, #4]
   19058:	b	1930c <__assert_fail@plt+0x7768>
   1905c:	bic	r1, r1, #4096	; 0x1000
   19060:	str	r1, [r8, #48]	; 0x30
   19064:	bl	17988 <__assert_fail@plt+0x5de4>
   19068:	mov	r3, #0
   1906c:	str	r3, [r8, #4]
   19070:	mov	r1, #3
   19074:	mov	r0, r8
   19078:	bl	17f9c <__assert_fail@plt+0x63f8>
   1907c:	str	r0, [r8, #4]
   19080:	cmp	r0, #0
   19084:	bne	1904c <__assert_fail@plt+0x74a8>
   19088:	ldr	r3, [r8, #48]	; 0x30
   1908c:	tst	r3, #8192	; 0x2000
   19090:	bne	19514 <__assert_fail@plt+0x7970>
   19094:	ldr	r3, [r5, #32]
   19098:	cmp	r3, #0
   1909c:	beq	190b0 <__assert_fail@plt+0x750c>
   190a0:	ldrh	r3, [r5, #56]	; 0x38
   190a4:	cmp	r3, #4
   190a8:	movne	r3, #7
   190ac:	strhne	r3, [r5, #56]	; 0x38
   190b0:	mov	r1, r5
   190b4:	mov	r0, r8
   190b8:	bl	17ed8 <__assert_fail@plt+0x6334>
   190bc:	mov	r4, r5
   190c0:	b	1924c <__assert_fail@plt+0x76a8>
   190c4:	bl	119b8 <__errno_location@plt>
   190c8:	ldr	r3, [r0]
   190cc:	str	r3, [r5, #32]
   190d0:	ldrh	r3, [r5, #58]	; 0x3a
   190d4:	orr	r3, r3, #1
   190d8:	strh	r3, [r5, #58]	; 0x3a
   190dc:	ldr	r3, [r8, #4]
   190e0:	cmp	r3, #0
   190e4:	beq	1904c <__assert_fail@plt+0x74a8>
   190e8:	ldr	r2, [r3, #4]
   190ec:	ldr	r2, [r2, #24]
   190f0:	str	r2, [r3, #24]
   190f4:	ldr	r3, [r3, #8]
   190f8:	cmp	r3, #0
   190fc:	bne	190e8 <__assert_fail@plt+0x7544>
   19100:	b	1904c <__assert_fail@plt+0x74a8>
   19104:	str	r3, [r8]
   19108:	ldr	r2, [r8, #24]
   1910c:	ldr	r3, [r3, #40]	; 0x28
   19110:	mov	r1, #0
   19114:	strb	r1, [r2, r3]
   19118:	mov	r1, #3
   1911c:	mov	r0, r8
   19120:	bl	17f9c <__assert_fail@plt+0x63f8>
   19124:	subs	r4, r0, #0
   19128:	beq	19138 <__assert_fail@plt+0x7594>
   1912c:	mov	r0, r5
   19130:	bl	17204 <__assert_fail@plt+0x5660>
   19134:	b	1930c <__assert_fail@plt+0x7768>
   19138:	ldr	r3, [r8, #48]	; 0x30
   1913c:	tst	r3, #8192	; 0x2000
   19140:	beq	1918c <__assert_fail@plt+0x75e8>
   19144:	b	1924c <__assert_fail@plt+0x76a8>
   19148:	str	r4, [r8]
   1914c:	mov	r0, r5
   19150:	bl	17204 <__assert_fail@plt+0x5660>
   19154:	ldr	r3, [r4, #48]	; 0x30
   19158:	cmp	r3, #0
   1915c:	beq	19254 <__assert_fail@plt+0x76b0>
   19160:	ldrh	r3, [r4, #60]	; 0x3c
   19164:	mov	r5, r4
   19168:	cmp	r3, #4
   1916c:	bne	19304 <__assert_fail@plt+0x7760>
   19170:	ldr	r4, [r5, #8]
   19174:	cmp	r4, #0
   19178:	bne	19148 <__assert_fail@plt+0x75a4>
   1917c:	ldr	r3, [r5, #4]
   19180:	ldr	r2, [r3, #12]
   19184:	cmp	r2, #0
   19188:	bne	19104 <__assert_fail@plt+0x7560>
   1918c:	ldr	r4, [r5, #4]
   19190:	str	r4, [r8]
   19194:	mov	r0, r5
   19198:	bl	17204 <__assert_fail@plt+0x5660>
   1919c:	ldr	r3, [r4, #48]	; 0x30
   191a0:	cmn	r3, #1
   191a4:	beq	1944c <__assert_fail@plt+0x78a8>
   191a8:	ldrh	r3, [r4, #56]	; 0x38
   191ac:	cmp	r3, #11
   191b0:	beq	19468 <__assert_fail@plt+0x78c4>
   191b4:	ldr	r2, [r8, #24]
   191b8:	ldr	r3, [r4, #40]	; 0x28
   191bc:	mov	r1, #0
   191c0:	strb	r1, [r2, r3]
   191c4:	ldr	r3, [r4, #48]	; 0x30
   191c8:	cmp	r3, r1
   191cc:	beq	1946c <__assert_fail@plt+0x78c8>
   191d0:	ldrh	r3, [r4, #58]	; 0x3a
   191d4:	tst	r3, #2
   191d8:	beq	194c4 <__assert_fail@plt+0x7920>
   191dc:	ldr	r3, [r8, #48]	; 0x30
   191e0:	tst	r3, #4
   191e4:	bne	19200 <__assert_fail@plt+0x765c>
   191e8:	tst	r3, #512	; 0x200
   191ec:	beq	19498 <__assert_fail@plt+0x78f4>
   191f0:	mov	r2, #1
   191f4:	ldr	r1, [r4, #36]	; 0x24
   191f8:	mov	r0, r8
   191fc:	bl	17c20 <__assert_fail@plt+0x607c>
   19200:	ldr	r0, [r4, #36]	; 0x24
   19204:	bl	11b80 <close@plt>
   19208:	ldrh	r3, [r4, #56]	; 0x38
   1920c:	cmp	r3, #2
   19210:	beq	1923c <__assert_fail@plt+0x7698>
   19214:	ldr	r3, [r4, #32]
   19218:	cmp	r3, #0
   1921c:	movne	r3, #7
   19220:	strhne	r3, [r4, #56]	; 0x38
   19224:	bne	1923c <__assert_fail@plt+0x7698>
   19228:	mov	r3, #6
   1922c:	strh	r3, [r4, #56]	; 0x38
   19230:	mov	r1, r4
   19234:	mov	r0, r8
   19238:	bl	17ed8 <__assert_fail@plt+0x6334>
   1923c:	ldr	r3, [r8, #48]	; 0x30
   19240:	and	r3, r3, #8192	; 0x2000
   19244:	cmp	r3, #0
   19248:	movne	r4, #0
   1924c:	mov	r0, r4
   19250:	pop	{r4, r5, r6, r7, r8, pc}
   19254:	mov	r0, r8
   19258:	bl	17ca0 <__assert_fail@plt+0x60fc>
   1925c:	cmp	r0, #0
   19260:	bne	192e0 <__assert_fail@plt+0x773c>
   19264:	mov	r0, r8
   19268:	bl	179c8 <__assert_fail@plt+0x5e24>
   1926c:	ldr	r2, [r4, #52]	; 0x34
   19270:	str	r2, [r4, #40]	; 0x28
   19274:	add	r6, r4, #168	; 0xa8
   19278:	add	r2, r2, #1
   1927c:	mov	r1, r6
   19280:	ldr	r0, [r8, #24]
   19284:	bl	11748 <memmove@plt>
   19288:	mov	r1, #47	; 0x2f
   1928c:	mov	r0, r6
   19290:	bl	11a78 <strrchr@plt>
   19294:	cmp	r0, #0
   19298:	beq	192c8 <__assert_fail@plt+0x7724>
   1929c:	cmp	r6, r0
   192a0:	beq	192f4 <__assert_fail@plt+0x7750>
   192a4:	add	r5, r0, #1
   192a8:	mov	r0, r5
   192ac:	bl	11988 <strlen@plt>
   192b0:	mov	r7, r0
   192b4:	add	r2, r0, #1
   192b8:	mov	r1, r5
   192bc:	mov	r0, r6
   192c0:	bl	11748 <memmove@plt>
   192c4:	str	r7, [r4, #52]	; 0x34
   192c8:	ldr	r3, [r8, #24]
   192cc:	str	r3, [r4, #28]
   192d0:	str	r3, [r4, #24]
   192d4:	mov	r0, r8
   192d8:	bl	178b4 <__assert_fail@plt+0x5d10>
   192dc:	b	1934c <__assert_fail@plt+0x77a8>
   192e0:	ldr	r3, [r8, #48]	; 0x30
   192e4:	orr	r3, r3, #8192	; 0x2000
   192e8:	str	r3, [r8, #48]	; 0x30
   192ec:	mov	r4, #0
   192f0:	b	1924c <__assert_fail@plt+0x76a8>
   192f4:	ldrb	r3, [r4, #169]	; 0xa9
   192f8:	cmp	r3, #0
   192fc:	bne	192a4 <__assert_fail@plt+0x7700>
   19300:	b	192c8 <__assert_fail@plt+0x7724>
   19304:	cmp	r3, #2
   19308:	beq	193a0 <__assert_fail@plt+0x77fc>
   1930c:	ldr	r2, [r8, #24]
   19310:	ldr	r0, [r4, #4]
   19314:	ldr	r1, [r0, #40]	; 0x28
   19318:	sub	r3, r1, #1
   1931c:	ldr	r0, [r0, #28]
   19320:	ldrb	r0, [r0, r3]
   19324:	cmp	r0, #47	; 0x2f
   19328:	movne	r3, r1
   1932c:	add	r0, r2, r3
   19330:	mov	r1, #47	; 0x2f
   19334:	strb	r1, [r2, r3]
   19338:	ldr	r2, [r4, #52]	; 0x34
   1933c:	add	r2, r2, #1
   19340:	add	r1, r4, #168	; 0xa8
   19344:	add	r0, r0, #1
   19348:	bl	11748 <memmove@plt>
   1934c:	str	r4, [r8]
   19350:	ldrh	r3, [r4, #56]	; 0x38
   19354:	cmp	r3, #11
   19358:	beq	19414 <__assert_fail@plt+0x7870>
   1935c:	ldrh	r3, [r4, #56]	; 0x38
   19360:	cmp	r3, #1
   19364:	bne	1924c <__assert_fail@plt+0x76a8>
   19368:	ldr	r3, [r4, #48]	; 0x30
   1936c:	cmp	r3, #0
   19370:	ldrdeq	r2, [r4, #64]	; 0x40
   19374:	strdeq	r2, [r8, #16]
   19378:	mov	r1, r4
   1937c:	mov	r0, r8
   19380:	bl	17b54 <__assert_fail@plt+0x5fb0>
   19384:	cmp	r0, #0
   19388:	bne	1924c <__assert_fail@plt+0x76a8>
   1938c:	bl	119b8 <__errno_location@plt>
   19390:	mov	r3, #12
   19394:	str	r3, [r0]
   19398:	mov	r4, #0
   1939c:	b	1924c <__assert_fail@plt+0x76a8>
   193a0:	mov	r2, #1
   193a4:	mov	r1, r4
   193a8:	mov	r0, r8
   193ac:	bl	17614 <__assert_fail@plt+0x5a70>
   193b0:	strh	r0, [r4, #56]	; 0x38
   193b4:	cmp	r0, #1
   193b8:	beq	193c8 <__assert_fail@plt+0x7824>
   193bc:	mov	r3, #3
   193c0:	strh	r3, [r4, #60]	; 0x3c
   193c4:	b	1930c <__assert_fail@plt+0x7768>
   193c8:	ldr	r3, [r8, #48]	; 0x30
   193cc:	tst	r3, #4
   193d0:	bne	193bc <__assert_fail@plt+0x7818>
   193d4:	ldr	r1, [pc, #320]	; 1951c <__assert_fail@plt+0x7978>
   193d8:	mov	r0, r8
   193dc:	bl	17938 <__assert_fail@plt+0x5d94>
   193e0:	str	r0, [r4, #36]	; 0x24
   193e4:	cmp	r0, #0
   193e8:	bge	19404 <__assert_fail@plt+0x7860>
   193ec:	bl	119b8 <__errno_location@plt>
   193f0:	ldr	r3, [r0]
   193f4:	str	r3, [r4, #32]
   193f8:	mov	r3, #7
   193fc:	strh	r3, [r4, #56]	; 0x38
   19400:	b	193bc <__assert_fail@plt+0x7818>
   19404:	ldrh	r3, [r4, #58]	; 0x3a
   19408:	orr	r3, r3, #2
   1940c:	strh	r3, [r4, #58]	; 0x3a
   19410:	b	193bc <__assert_fail@plt+0x7818>
   19414:	ldrd	r2, [r4, #112]	; 0x70
   19418:	cmp	r3, #0
   1941c:	cmpeq	r2, #2
   19420:	beq	19434 <__assert_fail@plt+0x7890>
   19424:	cmp	r3, #0
   19428:	cmpeq	r2, #1
   1942c:	beq	1924c <__assert_fail@plt+0x76a8>
   19430:	bl	11b68 <abort@plt>
   19434:	mov	r2, #0
   19438:	mov	r1, r4
   1943c:	mov	r0, r8
   19440:	bl	17614 <__assert_fail@plt+0x5a70>
   19444:	strh	r0, [r4, #56]	; 0x38
   19448:	b	1935c <__assert_fail@plt+0x77b8>
   1944c:	mov	r0, r4
   19450:	bl	17204 <__assert_fail@plt+0x5660>
   19454:	bl	119b8 <__errno_location@plt>
   19458:	mov	r4, #0
   1945c:	str	r4, [r0]
   19460:	str	r4, [r8]
   19464:	b	1924c <__assert_fail@plt+0x76a8>
   19468:	bl	11b68 <abort@plt>
   1946c:	mov	r0, r8
   19470:	bl	17ca0 <__assert_fail@plt+0x60fc>
   19474:	cmp	r0, #0
   19478:	beq	19208 <__assert_fail@plt+0x7664>
   1947c:	bl	119b8 <__errno_location@plt>
   19480:	ldr	r3, [r0]
   19484:	str	r3, [r4, #32]
   19488:	ldr	r3, [r8, #48]	; 0x30
   1948c:	orr	r3, r3, #8192	; 0x2000
   19490:	str	r3, [r8, #48]	; 0x30
   19494:	b	19208 <__assert_fail@plt+0x7664>
   19498:	ldr	r0, [r4, #36]	; 0x24
   1949c:	bl	11ae4 <fchdir@plt>
   194a0:	cmp	r0, #0
   194a4:	beq	19200 <__assert_fail@plt+0x765c>
   194a8:	bl	119b8 <__errno_location@plt>
   194ac:	ldr	r3, [r0]
   194b0:	str	r3, [r4, #32]
   194b4:	ldr	r3, [r8, #48]	; 0x30
   194b8:	orr	r3, r3, #8192	; 0x2000
   194bc:	str	r3, [r8, #48]	; 0x30
   194c0:	b	19200 <__assert_fail@plt+0x765c>
   194c4:	tst	r3, #1
   194c8:	bne	19208 <__assert_fail@plt+0x7664>
   194cc:	ldr	r3, [pc, #76]	; 19520 <__assert_fail@plt+0x797c>
   194d0:	mvn	r2, #0
   194d4:	ldr	r1, [r4, #4]
   194d8:	mov	r0, r8
   194dc:	bl	17cf0 <__assert_fail@plt+0x614c>
   194e0:	cmp	r0, #0
   194e4:	beq	19208 <__assert_fail@plt+0x7664>
   194e8:	bl	119b8 <__errno_location@plt>
   194ec:	ldr	r3, [r0]
   194f0:	str	r3, [r4, #32]
   194f4:	ldr	r3, [r8, #48]	; 0x30
   194f8:	orr	r3, r3, #8192	; 0x2000
   194fc:	str	r3, [r8, #48]	; 0x30
   19500:	b	19208 <__assert_fail@plt+0x7664>
   19504:	mov	r4, #0
   19508:	b	1924c <__assert_fail@plt+0x76a8>
   1950c:	mov	r4, #0
   19510:	b	1924c <__assert_fail@plt+0x76a8>
   19514:	mov	r4, #0
   19518:	b	1924c <__assert_fail@plt+0x76a8>
   1951c:	ldrdeq	pc, [r2], -ip
   19520:	andeq	r0, r3, r4, lsr #14
   19524:	cmp	r2, #4
   19528:	bhi	19538 <__assert_fail@plt+0x7994>
   1952c:	strh	r2, [r1, #60]	; 0x3c
   19530:	mov	r0, #0
   19534:	bx	lr
   19538:	push	{r4, lr}
   1953c:	bl	119b8 <__errno_location@plt>
   19540:	mov	r3, #22
   19544:	str	r3, [r0]
   19548:	mov	r0, #1
   1954c:	pop	{r4, pc}
   19550:	push	{r4, r5, r6, r7, r8, lr}
   19554:	bics	r3, r1, #4096	; 0x1000
   19558:	bne	195fc <__assert_fail@plt+0x7a58>
   1955c:	mov	r4, r0
   19560:	mov	r6, r1
   19564:	ldr	r5, [r0]
   19568:	bl	119b8 <__errno_location@plt>
   1956c:	mov	r7, r0
   19570:	mov	r3, #0
   19574:	str	r3, [r0]
   19578:	ldr	r3, [r4, #48]	; 0x30
   1957c:	tst	r3, #8192	; 0x2000
   19580:	bne	196a0 <__assert_fail@plt+0x7afc>
   19584:	ldrh	r3, [r5, #56]	; 0x38
   19588:	cmp	r3, #9
   1958c:	beq	19610 <__assert_fail@plt+0x7a6c>
   19590:	cmp	r3, #1
   19594:	bne	196a8 <__assert_fail@plt+0x7b04>
   19598:	ldr	r0, [r4, #4]
   1959c:	cmp	r0, #0
   195a0:	beq	195a8 <__assert_fail@plt+0x7a04>
   195a4:	bl	17988 <__assert_fail@plt+0x5de4>
   195a8:	cmp	r6, #4096	; 0x1000
   195ac:	ldreq	r3, [r4, #48]	; 0x30
   195b0:	orreq	r3, r3, #4096	; 0x1000
   195b4:	streq	r3, [r4, #48]	; 0x30
   195b8:	moveq	r6, #2
   195bc:	movne	r6, #1
   195c0:	ldr	r3, [r5, #48]	; 0x30
   195c4:	cmp	r3, #0
   195c8:	bne	195e8 <__assert_fail@plt+0x7a44>
   195cc:	ldr	r3, [r5, #24]
   195d0:	ldrb	r3, [r3]
   195d4:	cmp	r3, #47	; 0x2f
   195d8:	beq	195e8 <__assert_fail@plt+0x7a44>
   195dc:	ldr	r3, [r4, #48]	; 0x30
   195e0:	tst	r3, #4
   195e4:	beq	19618 <__assert_fail@plt+0x7a74>
   195e8:	mov	r1, r6
   195ec:	mov	r0, r4
   195f0:	bl	17f9c <__assert_fail@plt+0x63f8>
   195f4:	str	r0, [r4, #4]
   195f8:	pop	{r4, r5, r6, r7, r8, pc}
   195fc:	bl	119b8 <__errno_location@plt>
   19600:	mov	r3, #22
   19604:	str	r3, [r0]
   19608:	mov	r0, #0
   1960c:	pop	{r4, r5, r6, r7, r8, pc}
   19610:	ldr	r0, [r5, #8]
   19614:	pop	{r4, r5, r6, r7, r8, pc}
   19618:	ldr	r1, [pc, #144]	; 196b0 <__assert_fail@plt+0x7b0c>
   1961c:	mov	r0, r4
   19620:	bl	17938 <__assert_fail@plt+0x5d94>
   19624:	subs	r5, r0, #0
   19628:	blt	19660 <__assert_fail@plt+0x7abc>
   1962c:	mov	r1, r6
   19630:	mov	r0, r4
   19634:	bl	17f9c <__assert_fail@plt+0x63f8>
   19638:	str	r0, [r4, #4]
   1963c:	ldr	r3, [r4, #48]	; 0x30
   19640:	tst	r3, #512	; 0x200
   19644:	beq	1966c <__assert_fail@plt+0x7ac8>
   19648:	mov	r2, #1
   1964c:	mov	r1, r5
   19650:	mov	r0, r4
   19654:	bl	17c20 <__assert_fail@plt+0x607c>
   19658:	ldr	r0, [r4, #4]
   1965c:	pop	{r4, r5, r6, r7, r8, pc}
   19660:	mov	r0, #0
   19664:	str	r0, [r4, #4]
   19668:	pop	{r4, r5, r6, r7, r8, pc}
   1966c:	mov	r0, r5
   19670:	bl	11ae4 <fchdir@plt>
   19674:	cmp	r0, #0
   19678:	bne	19688 <__assert_fail@plt+0x7ae4>
   1967c:	mov	r0, r5
   19680:	bl	11b80 <close@plt>
   19684:	b	19658 <__assert_fail@plt+0x7ab4>
   19688:	ldr	r4, [r7]
   1968c:	mov	r0, r5
   19690:	bl	11b80 <close@plt>
   19694:	str	r4, [r7]
   19698:	mov	r0, #0
   1969c:	pop	{r4, r5, r6, r7, r8, pc}
   196a0:	mov	r0, #0
   196a4:	pop	{r4, r5, r6, r7, r8, pc}
   196a8:	mov	r0, #0
   196ac:	pop	{r4, r5, r6, r7, r8, pc}
   196b0:	ldrdeq	pc, [r2], -ip
   196b4:	andeq	r0, r0, r0
   196b8:	push	{r4, lr}
   196bc:	ror	r0, r0, #3
   196c0:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   196c4:	mov	r0, r1
   196c8:	pop	{r4, pc}
   196cc:	cmp	r1, r0
   196d0:	movne	r0, #0
   196d4:	moveq	r0, #1
   196d8:	bx	lr
   196dc:	ldr	r3, [r0, #20]
   196e0:	ldr	r2, [pc, #176]	; 19798 <__assert_fail@plt+0x7bf4>
   196e4:	cmp	r3, r2
   196e8:	beq	19780 <__assert_fail@plt+0x7bdc>
   196ec:	vldr	s15, [r3, #8]
   196f0:	vldr	s14, [pc, #144]	; 19788 <__assert_fail@plt+0x7be4>
   196f4:	vcmpe.f32	s15, s14
   196f8:	vmrs	APSR_nzcv, fpscr
   196fc:	ble	1975c <__assert_fail@plt+0x7bb8>
   19700:	vldr	s14, [pc, #132]	; 1978c <__assert_fail@plt+0x7be8>
   19704:	vcmpe.f32	s15, s14
   19708:	vmrs	APSR_nzcv, fpscr
   1970c:	bpl	1975c <__assert_fail@plt+0x7bb8>
   19710:	vldr	s13, [r3, #12]
   19714:	vldr	s14, [pc, #116]	; 19790 <__assert_fail@plt+0x7bec>
   19718:	vcmpe.f32	s13, s14
   1971c:	vmrs	APSR_nzcv, fpscr
   19720:	ble	1975c <__assert_fail@plt+0x7bb8>
   19724:	vldr	s14, [r3]
   19728:	vcmpe.f32	s14, #0.0
   1972c:	vmrs	APSR_nzcv, fpscr
   19730:	blt	1975c <__assert_fail@plt+0x7bb8>
   19734:	vldr	s13, [pc, #76]	; 19788 <__assert_fail@plt+0x7be4>
   19738:	vadd.f32	s14, s14, s13
   1973c:	vldr	s13, [r3, #4]
   19740:	vcmpe.f32	s14, s13
   19744:	vmrs	APSR_nzcv, fpscr
   19748:	bpl	1975c <__assert_fail@plt+0x7bb8>
   1974c:	vldr	s12, [pc, #64]	; 19794 <__assert_fail@plt+0x7bf0>
   19750:	vcmpe.f32	s13, s12
   19754:	vmrs	APSR_nzcv, fpscr
   19758:	bls	1976c <__assert_fail@plt+0x7bc8>
   1975c:	ldr	r3, [pc, #52]	; 19798 <__assert_fail@plt+0x7bf4>
   19760:	str	r3, [r0, #20]
   19764:	mov	r0, #0
   19768:	bx	lr
   1976c:	vcmpe.f32	s15, s14
   19770:	vmrs	APSR_nzcv, fpscr
   19774:	ble	1975c <__assert_fail@plt+0x7bb8>
   19778:	mov	r0, #1
   1977c:	bx	lr
   19780:	mov	r0, #1
   19784:	bx	lr
   19788:	stclcc	12, cr12, [ip, #820]	; 0x334
   1978c:	svccc	0x00666666
   19790:	svccc	0x008ccccd
   19794:	svccc	0x00800000
   19798:	andeq	r0, r3, r8, lsr #14
   1979c:	push	{r4, lr}
   197a0:	mov	r4, r0
   197a4:	mov	r0, r1
   197a8:	ldr	r3, [r4, #24]
   197ac:	ldr	r1, [r4, #8]
   197b0:	blx	r3
   197b4:	ldr	r3, [r4, #8]
   197b8:	cmp	r0, r3
   197bc:	bcs	197cc <__assert_fail@plt+0x7c28>
   197c0:	ldr	r3, [r4]
   197c4:	add	r0, r3, r0, lsl #3
   197c8:	pop	{r4, pc}
   197cc:	bl	11b68 <abort@plt>
   197d0:	push	{r4, r5, r6, r7, r8, lr}
   197d4:	ldrb	r3, [r1, #16]
   197d8:	cmp	r3, #0
   197dc:	bne	1980c <__assert_fail@plt+0x7c68>
   197e0:	vmov	s15, r0
   197e4:	vcvt.f32.u32	s13, s15
   197e8:	vldr	s14, [r1, #8]
   197ec:	vdiv.f32	s15, s13, s14
   197f0:	vldr	s14, [pc, #204]	; 198c4 <__assert_fail@plt+0x7d20>
   197f4:	vcmpe.f32	s15, s14
   197f8:	vmrs	APSR_nzcv, fpscr
   197fc:	movge	r7, #0
   19800:	bge	19844 <__assert_fail@plt+0x7ca0>
   19804:	vcvt.u32.f32	s15, s15
   19808:	vmov	r0, s15
   1980c:	cmp	r0, #10
   19810:	movcc	r0, #10
   19814:	orr	r7, r0, #1
   19818:	cmn	r7, #1
   1981c:	ldrne	r8, [pc, #164]	; 198c8 <__assert_fail@plt+0x7d24>
   19820:	bne	19870 <__assert_fail@plt+0x7ccc>
   19824:	lsr	r3, r7, #30
   19828:	lsl	r2, r7, #2
   1982c:	adds	r3, r3, #0
   19830:	movne	r3, #1
   19834:	cmp	r2, #0
   19838:	movlt	r3, #1
   1983c:	cmp	r3, #0
   19840:	movne	r7, #0
   19844:	mov	r0, r7
   19848:	pop	{r4, r5, r6, r7, r8, pc}
   1984c:	mov	r4, #3
   19850:	mov	r1, r4
   19854:	mov	r0, r7
   19858:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   1985c:	cmp	r1, #0
   19860:	bne	19824 <__assert_fail@plt+0x7c80>
   19864:	add	r7, r7, #2
   19868:	cmn	r7, #1
   1986c:	beq	19824 <__assert_fail@plt+0x7c80>
   19870:	cmp	r7, #9
   19874:	bls	1984c <__assert_fail@plt+0x7ca8>
   19878:	umull	r2, r3, r8, r7
   1987c:	lsr	r3, r3, #1
   19880:	add	r3, r3, r3, lsl #1
   19884:	cmp	r7, r3
   19888:	beq	19864 <__assert_fail@plt+0x7cc0>
   1988c:	mov	r6, #16
   19890:	mov	r5, #9
   19894:	mov	r4, #3
   19898:	add	r5, r5, r6
   1989c:	add	r4, r4, #2
   198a0:	cmp	r5, r7
   198a4:	bcs	19850 <__assert_fail@plt+0x7cac>
   198a8:	add	r6, r6, #8
   198ac:	mov	r1, r4
   198b0:	mov	r0, r7
   198b4:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   198b8:	cmp	r1, #0
   198bc:	bne	19898 <__assert_fail@plt+0x7cf4>
   198c0:	b	19864 <__assert_fail@plt+0x7cc0>
   198c4:	svcmi	0x00800000
   198c8:	bge	feac437c <optarg@@GLIBC_2.4+0xfea8213c>
   198cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   198d0:	ldr	r7, [r1]
   198d4:	ldr	r3, [r1, #4]
   198d8:	cmp	r7, r3
   198dc:	bcs	19a10 <__assert_fail@plt+0x7e6c>
   198e0:	mov	fp, r2
   198e4:	mov	sl, r1
   198e8:	mov	r6, r0
   198ec:	add	r7, r7, #8
   198f0:	mov	r9, #0
   198f4:	b	1995c <__assert_fail@plt+0x7db8>
   198f8:	str	r5, [r0]
   198fc:	ldr	r2, [r6, #12]
   19900:	add	r2, r2, #1
   19904:	str	r2, [r6, #12]
   19908:	str	r9, [r4]
   1990c:	ldr	r2, [r6, #36]	; 0x24
   19910:	str	r2, [r4, #4]
   19914:	str	r4, [r6, #36]	; 0x24
   19918:	b	199a4 <__assert_fail@plt+0x7e00>
   1991c:	mov	r0, #8
   19920:	bl	2d404 <__assert_fail@plt+0x1b860>
   19924:	cmp	r0, #0
   19928:	beq	19a18 <__assert_fail@plt+0x7e74>
   1992c:	str	r4, [r0]
   19930:	ldr	r3, [r5, #4]
   19934:	str	r3, [r0, #4]
   19938:	str	r0, [r5, #4]
   1993c:	str	r9, [r8, #-8]
   19940:	ldr	r3, [sl, #12]
   19944:	sub	r3, r3, #1
   19948:	str	r3, [sl, #12]
   1994c:	add	r7, r7, #8
   19950:	ldr	r3, [sl, #4]
   19954:	cmp	r3, r8
   19958:	bls	19a08 <__assert_fail@plt+0x7e64>
   1995c:	mov	r8, r7
   19960:	ldr	r3, [r7, #-8]
   19964:	cmp	r3, #0
   19968:	beq	1994c <__assert_fail@plt+0x7da8>
   1996c:	ldr	r4, [r7, #-4]
   19970:	cmp	r4, #0
   19974:	beq	199b0 <__assert_fail@plt+0x7e0c>
   19978:	ldr	r5, [r4]
   1997c:	mov	r1, r5
   19980:	mov	r0, r6
   19984:	bl	1979c <__assert_fail@plt+0x7bf8>
   19988:	ldr	r3, [r4, #4]
   1998c:	ldr	r2, [r0]
   19990:	cmp	r2, #0
   19994:	beq	198f8 <__assert_fail@plt+0x7d54>
   19998:	ldr	r2, [r0, #4]
   1999c:	str	r2, [r4, #4]
   199a0:	str	r4, [r0, #4]
   199a4:	mov	r4, r3
   199a8:	cmp	r3, #0
   199ac:	bne	19978 <__assert_fail@plt+0x7dd4>
   199b0:	ldr	r4, [r8, #-8]
   199b4:	str	r9, [r8, #-4]
   199b8:	cmp	fp, #0
   199bc:	bne	1994c <__assert_fail@plt+0x7da8>
   199c0:	mov	r1, r4
   199c4:	mov	r0, r6
   199c8:	bl	1979c <__assert_fail@plt+0x7bf8>
   199cc:	mov	r5, r0
   199d0:	ldr	r3, [r0]
   199d4:	cmp	r3, #0
   199d8:	beq	199f4 <__assert_fail@plt+0x7e50>
   199dc:	ldr	r0, [r6, #36]	; 0x24
   199e0:	cmp	r0, #0
   199e4:	beq	1991c <__assert_fail@plt+0x7d78>
   199e8:	ldr	r3, [r0, #4]
   199ec:	str	r3, [r6, #36]	; 0x24
   199f0:	b	1992c <__assert_fail@plt+0x7d88>
   199f4:	str	r4, [r0]
   199f8:	ldr	r3, [r6, #12]
   199fc:	add	r3, r3, #1
   19a00:	str	r3, [r6, #12]
   19a04:	b	1993c <__assert_fail@plt+0x7d98>
   19a08:	mov	r0, #1
   19a0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a10:	mov	r0, #1
   19a14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a18:	mov	r0, fp
   19a1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19a20:	push	{r4, r5, r6, r7, r8, lr}
   19a24:	mov	r6, r0
   19a28:	mov	r5, r1
   19a2c:	mov	r8, r2
   19a30:	mov	r7, r3
   19a34:	bl	1979c <__assert_fail@plt+0x7bf8>
   19a38:	str	r0, [r8]
   19a3c:	ldr	r3, [r0]
   19a40:	cmp	r3, #0
   19a44:	beq	19b1c <__assert_fail@plt+0x7f78>
   19a48:	mov	r4, r0
   19a4c:	cmp	r5, r3
   19a50:	beq	19ae4 <__assert_fail@plt+0x7f40>
   19a54:	ldr	r2, [r6, #28]
   19a58:	mov	r1, r3
   19a5c:	mov	r0, r5
   19a60:	blx	r2
   19a64:	cmp	r0, #0
   19a68:	bne	19ae4 <__assert_fail@plt+0x7f40>
   19a6c:	ldr	r3, [r4, #4]
   19a70:	cmp	r3, #0
   19a74:	beq	19b24 <__assert_fail@plt+0x7f80>
   19a78:	ldr	r1, [r3]
   19a7c:	cmp	r5, r1
   19a80:	beq	19ab4 <__assert_fail@plt+0x7f10>
   19a84:	ldr	r3, [r6, #28]
   19a88:	mov	r0, r5
   19a8c:	blx	r3
   19a90:	cmp	r0, #0
   19a94:	bne	19ab4 <__assert_fail@plt+0x7f10>
   19a98:	ldr	r4, [r4, #4]
   19a9c:	ldr	r3, [r4, #4]
   19aa0:	cmp	r3, #0
   19aa4:	beq	19b1c <__assert_fail@plt+0x7f78>
   19aa8:	ldr	r1, [r3]
   19aac:	cmp	r5, r1
   19ab0:	bne	19a84 <__assert_fail@plt+0x7ee0>
   19ab4:	ldr	r2, [r4, #4]
   19ab8:	ldr	r3, [r2]
   19abc:	cmp	r7, #0
   19ac0:	beq	19b1c <__assert_fail@plt+0x7f78>
   19ac4:	ldr	r1, [r2, #4]
   19ac8:	str	r1, [r4, #4]
   19acc:	mov	r1, #0
   19ad0:	str	r1, [r2]
   19ad4:	ldr	r1, [r6, #36]	; 0x24
   19ad8:	str	r1, [r2, #4]
   19adc:	str	r2, [r6, #36]	; 0x24
   19ae0:	b	19b1c <__assert_fail@plt+0x7f78>
   19ae4:	ldr	r3, [r4]
   19ae8:	cmp	r7, #0
   19aec:	beq	19b1c <__assert_fail@plt+0x7f78>
   19af0:	ldr	r2, [r4, #4]
   19af4:	cmp	r2, #0
   19af8:	ldmne	r2, {r0, r1}
   19afc:	stmne	r4, {r0, r1}
   19b00:	movne	r1, #0
   19b04:	strne	r1, [r2]
   19b08:	ldrne	r1, [r6, #36]	; 0x24
   19b0c:	strne	r1, [r2, #4]
   19b10:	strne	r2, [r6, #36]	; 0x24
   19b14:	moveq	r2, #0
   19b18:	streq	r2, [r4]
   19b1c:	mov	r0, r3
   19b20:	pop	{r4, r5, r6, r7, r8, pc}
   19b24:	mov	r3, #0
   19b28:	b	19b1c <__assert_fail@plt+0x7f78>
   19b2c:	ldr	r0, [r0, #8]
   19b30:	bx	lr
   19b34:	ldr	r0, [r0, #12]
   19b38:	bx	lr
   19b3c:	ldr	r0, [r0, #16]
   19b40:	bx	lr
   19b44:	ldr	r1, [r0]
   19b48:	ldr	ip, [r0, #4]
   19b4c:	cmp	r1, ip
   19b50:	bcs	19ba8 <__assert_fail@plt+0x8004>
   19b54:	mov	r0, #0
   19b58:	b	19b74 <__assert_fail@plt+0x7fd0>
   19b5c:	mov	r2, #1
   19b60:	cmp	r0, r2
   19b64:	movcc	r0, r2
   19b68:	add	r1, r1, #8
   19b6c:	cmp	r1, ip
   19b70:	bcs	19ba4 <__assert_fail@plt+0x8000>
   19b74:	ldr	r3, [r1]
   19b78:	cmp	r3, #0
   19b7c:	beq	19b68 <__assert_fail@plt+0x7fc4>
   19b80:	ldr	r3, [r1, #4]
   19b84:	cmp	r3, #0
   19b88:	beq	19b5c <__assert_fail@plt+0x7fb8>
   19b8c:	mov	r2, #1
   19b90:	add	r2, r2, #1
   19b94:	ldr	r3, [r3, #4]
   19b98:	cmp	r3, #0
   19b9c:	bne	19b90 <__assert_fail@plt+0x7fec>
   19ba0:	b	19b60 <__assert_fail@plt+0x7fbc>
   19ba4:	bx	lr
   19ba8:	mov	r0, #0
   19bac:	bx	lr
   19bb0:	push	{lr}		; (str lr, [sp, #-4]!)
   19bb4:	ldr	r1, [r0]
   19bb8:	ldr	lr, [r0, #4]
   19bbc:	cmp	r1, lr
   19bc0:	bcs	19c10 <__assert_fail@plt+0x806c>
   19bc4:	mov	r2, #0
   19bc8:	mov	ip, r2
   19bcc:	b	19bdc <__assert_fail@plt+0x8038>
   19bd0:	add	r1, r1, #8
   19bd4:	cmp	r1, lr
   19bd8:	bcs	19c18 <__assert_fail@plt+0x8074>
   19bdc:	ldr	r3, [r1]
   19be0:	cmp	r3, #0
   19be4:	beq	19bd0 <__assert_fail@plt+0x802c>
   19be8:	add	ip, ip, #1
   19bec:	add	r2, r2, #1
   19bf0:	ldr	r3, [r1, #4]
   19bf4:	cmp	r3, #0
   19bf8:	beq	19bd0 <__assert_fail@plt+0x802c>
   19bfc:	add	r2, r2, #1
   19c00:	ldr	r3, [r3, #4]
   19c04:	cmp	r3, #0
   19c08:	bne	19bfc <__assert_fail@plt+0x8058>
   19c0c:	b	19bd0 <__assert_fail@plt+0x802c>
   19c10:	mov	r2, #0
   19c14:	mov	ip, r2
   19c18:	ldr	r3, [r0, #12]
   19c1c:	cmp	r3, ip
   19c20:	beq	19c2c <__assert_fail@plt+0x8088>
   19c24:	mov	r0, #0
   19c28:	pop	{pc}		; (ldr pc, [sp], #4)
   19c2c:	ldr	r0, [r0, #16]
   19c30:	cmp	r0, r2
   19c34:	movne	r0, #0
   19c38:	moveq	r0, #1
   19c3c:	pop	{pc}		; (ldr pc, [sp], #4)
   19c40:	push	{r4, r5, r6, r7, r8, lr}
   19c44:	sub	sp, sp, #8
   19c48:	mov	r6, r0
   19c4c:	mov	r4, r1
   19c50:	ldr	r5, [r0, #8]
   19c54:	ldr	r7, [r0, #12]
   19c58:	bl	19b44 <__assert_fail@plt+0x7fa0>
   19c5c:	mov	r8, r0
   19c60:	ldr	r3, [r6, #16]
   19c64:	ldr	r2, [pc, #116]	; 19ce0 <__assert_fail@plt+0x813c>
   19c68:	mov	r1, #1
   19c6c:	mov	r0, r4
   19c70:	bl	11a18 <__fprintf_chk@plt>
   19c74:	mov	r3, r5
   19c78:	ldr	r2, [pc, #100]	; 19ce4 <__assert_fail@plt+0x8140>
   19c7c:	mov	r1, #1
   19c80:	mov	r0, r4
   19c84:	bl	11a18 <__fprintf_chk@plt>
   19c88:	vmov	s15, r7
   19c8c:	vcvt.f64.u32	d6, s15
   19c90:	vldr	d7, [pc, #64]	; 19cd8 <__assert_fail@plt+0x8134>
   19c94:	vmul.f64	d6, d6, d7
   19c98:	vmov	s15, r5
   19c9c:	vcvt.f64.u32	d7, s15
   19ca0:	vdiv.f64	d5, d6, d7
   19ca4:	vstr	d5, [sp]
   19ca8:	mov	r3, r7
   19cac:	ldr	r2, [pc, #52]	; 19ce8 <__assert_fail@plt+0x8144>
   19cb0:	mov	r1, #1
   19cb4:	mov	r0, r4
   19cb8:	bl	11a18 <__fprintf_chk@plt>
   19cbc:	mov	r3, r8
   19cc0:	ldr	r2, [pc, #36]	; 19cec <__assert_fail@plt+0x8148>
   19cc4:	mov	r1, #1
   19cc8:	mov	r0, r4
   19ccc:	bl	11a18 <__fprintf_chk@plt>
   19cd0:	add	sp, sp, #8
   19cd4:	pop	{r4, r5, r6, r7, r8, pc}
   19cd8:	andeq	r0, r0, r0
   19cdc:	subsmi	r0, r9, r0
   19ce0:	andeq	r0, r3, ip, lsr r7
   19ce4:	andeq	r0, r3, r4, asr r7
   19ce8:	andeq	r0, r3, ip, ror #14
   19cec:	muleq	r3, r0, r7
   19cf0:	push	{r4, r5, r6, lr}
   19cf4:	mov	r6, r0
   19cf8:	mov	r5, r1
   19cfc:	bl	1979c <__assert_fail@plt+0x7bf8>
   19d00:	ldr	r1, [r0]
   19d04:	cmp	r1, #0
   19d08:	beq	19d5c <__assert_fail@plt+0x81b8>
   19d0c:	mov	r4, r0
   19d10:	cmp	r0, #0
   19d14:	beq	19d64 <__assert_fail@plt+0x81c0>
   19d18:	cmp	r5, r1
   19d1c:	beq	19d4c <__assert_fail@plt+0x81a8>
   19d20:	ldr	r3, [r6, #28]
   19d24:	mov	r0, r5
   19d28:	blx	r3
   19d2c:	cmp	r0, #0
   19d30:	bne	19d4c <__assert_fail@plt+0x81a8>
   19d34:	ldr	r4, [r4, #4]
   19d38:	cmp	r4, #0
   19d3c:	beq	19d54 <__assert_fail@plt+0x81b0>
   19d40:	ldr	r1, [r4]
   19d44:	cmp	r5, r1
   19d48:	bne	19d20 <__assert_fail@plt+0x817c>
   19d4c:	ldr	r0, [r4]
   19d50:	pop	{r4, r5, r6, pc}
   19d54:	mov	r0, #0
   19d58:	pop	{r4, r5, r6, pc}
   19d5c:	mov	r0, #0
   19d60:	pop	{r4, r5, r6, pc}
   19d64:	mov	r0, #0
   19d68:	pop	{r4, r5, r6, pc}
   19d6c:	ldr	r3, [r0, #16]
   19d70:	cmp	r3, #0
   19d74:	beq	19db8 <__assert_fail@plt+0x8214>
   19d78:	ldr	r3, [r0]
   19d7c:	ldr	r2, [r0, #4]
   19d80:	cmp	r3, r2
   19d84:	bcs	19db0 <__assert_fail@plt+0x820c>
   19d88:	ldr	r0, [r3]
   19d8c:	cmp	r0, #0
   19d90:	bne	19dac <__assert_fail@plt+0x8208>
   19d94:	add	r3, r3, #8
   19d98:	cmp	r3, r2
   19d9c:	bcs	19db0 <__assert_fail@plt+0x820c>
   19da0:	ldr	r0, [r3]
   19da4:	cmp	r0, #0
   19da8:	beq	19d94 <__assert_fail@plt+0x81f0>
   19dac:	bx	lr
   19db0:	push	{r4, lr}
   19db4:	bl	11b68 <abort@plt>
   19db8:	mov	r0, #0
   19dbc:	b	19dac <__assert_fail@plt+0x8208>
   19dc0:	push	{r4, r5, r6, lr}
   19dc4:	mov	r5, r0
   19dc8:	mov	r4, r1
   19dcc:	bl	1979c <__assert_fail@plt+0x7bf8>
   19dd0:	mov	r2, r0
   19dd4:	mov	r3, r0
   19dd8:	ldr	r1, [r3]
   19ddc:	cmp	r4, r1
   19de0:	beq	19df4 <__assert_fail@plt+0x8250>
   19de4:	ldr	r3, [r3, #4]
   19de8:	cmp	r3, #0
   19dec:	bne	19dd8 <__assert_fail@plt+0x8234>
   19df0:	b	19e00 <__assert_fail@plt+0x825c>
   19df4:	ldr	r3, [r3, #4]
   19df8:	cmp	r3, #0
   19dfc:	bne	19e20 <__assert_fail@plt+0x827c>
   19e00:	ldr	r3, [r5, #4]
   19e04:	add	r2, r2, #8
   19e08:	cmp	r2, r3
   19e0c:	bcs	19e28 <__assert_fail@plt+0x8284>
   19e10:	ldr	r0, [r2]
   19e14:	cmp	r0, #0
   19e18:	beq	19e04 <__assert_fail@plt+0x8260>
   19e1c:	pop	{r4, r5, r6, pc}
   19e20:	ldr	r0, [r3]
   19e24:	pop	{r4, r5, r6, pc}
   19e28:	mov	r0, #0
   19e2c:	pop	{r4, r5, r6, pc}
   19e30:	push	{r4, r5, lr}
   19e34:	ldr	r4, [r0]
   19e38:	ldr	r3, [r0, #4]
   19e3c:	cmp	r4, r3
   19e40:	bcs	19eac <__assert_fail@plt+0x8308>
   19e44:	mov	r5, r0
   19e48:	mov	r0, #0
   19e4c:	b	19e60 <__assert_fail@plt+0x82bc>
   19e50:	add	r4, r4, #8
   19e54:	ldr	r3, [r5, #4]
   19e58:	cmp	r3, r4
   19e5c:	bls	19ea8 <__assert_fail@plt+0x8304>
   19e60:	ldr	r3, [r4]
   19e64:	cmp	r3, #0
   19e68:	beq	19e50 <__assert_fail@plt+0x82ac>
   19e6c:	cmp	r4, #0
   19e70:	beq	19e50 <__assert_fail@plt+0x82ac>
   19e74:	cmp	r2, r0
   19e78:	popls	{r4, r5, pc}
   19e7c:	add	ip, r1, r0, lsl #2
   19e80:	mov	r3, r4
   19e84:	add	r0, r0, #1
   19e88:	ldr	lr, [r3]
   19e8c:	str	lr, [ip], #4
   19e90:	ldr	r3, [r3, #4]
   19e94:	cmp	r3, #0
   19e98:	beq	19e50 <__assert_fail@plt+0x82ac>
   19e9c:	cmp	r2, r0
   19ea0:	bne	19e84 <__assert_fail@plt+0x82e0>
   19ea4:	pop	{r4, r5, pc}
   19ea8:	pop	{r4, r5, pc}
   19eac:	mov	r0, #0
   19eb0:	pop	{r4, r5, pc}
   19eb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19eb8:	ldr	r8, [r0]
   19ebc:	ldr	r3, [r0, #4]
   19ec0:	cmp	r8, r3
   19ec4:	bcs	19f2c <__assert_fail@plt+0x8388>
   19ec8:	mov	r7, r2
   19ecc:	mov	r6, r1
   19ed0:	mov	r9, r0
   19ed4:	mov	r5, #0
   19ed8:	b	19eec <__assert_fail@plt+0x8348>
   19edc:	add	r8, r8, #8
   19ee0:	ldr	r3, [r9, #4]
   19ee4:	cmp	r3, r8
   19ee8:	bls	19f30 <__assert_fail@plt+0x838c>
   19eec:	ldr	r3, [r8]
   19ef0:	cmp	r3, #0
   19ef4:	beq	19edc <__assert_fail@plt+0x8338>
   19ef8:	cmp	r8, #0
   19efc:	beq	19edc <__assert_fail@plt+0x8338>
   19f00:	mov	r4, r8
   19f04:	mov	r1, r7
   19f08:	ldr	r0, [r4]
   19f0c:	blx	r6
   19f10:	cmp	r0, #0
   19f14:	beq	19f30 <__assert_fail@plt+0x838c>
   19f18:	add	r5, r5, #1
   19f1c:	ldr	r4, [r4, #4]
   19f20:	cmp	r4, #0
   19f24:	bne	19f04 <__assert_fail@plt+0x8360>
   19f28:	b	19edc <__assert_fail@plt+0x8338>
   19f2c:	mov	r5, #0
   19f30:	mov	r0, r5
   19f34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   19f38:	ldrb	r3, [r0]
   19f3c:	cmp	r3, #0
   19f40:	beq	19f78 <__assert_fail@plt+0x83d4>
   19f44:	push	{r4, r5, r6, lr}
   19f48:	mov	r4, r0
   19f4c:	mov	r5, r1
   19f50:	mov	r1, #0
   19f54:	rsb	r0, r1, r1, lsl #5
   19f58:	mov	r1, r5
   19f5c:	add	r0, r0, r3
   19f60:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   19f64:	ldrb	r3, [r4, #1]!
   19f68:	cmp	r3, #0
   19f6c:	bne	19f54 <__assert_fail@plt+0x83b0>
   19f70:	mov	r0, r1
   19f74:	pop	{r4, r5, r6, pc}
   19f78:	mov	r1, #0
   19f7c:	mov	r0, r1
   19f80:	bx	lr
   19f84:	push	{lr}		; (str lr, [sp, #-4]!)
   19f88:	mov	ip, r0
   19f8c:	ldr	lr, [pc, #16]	; 19fa4 <__assert_fail@plt+0x8400>
   19f90:	ldm	lr!, {r0, r1, r2, r3}
   19f94:	stmia	ip!, {r0, r1, r2, r3}
   19f98:	ldr	r3, [lr]
   19f9c:	str	r3, [ip]
   19fa0:	pop	{pc}		; (ldr pc, [sp], #4)
   19fa4:	andeq	r0, r3, r8, lsr #14
   19fa8:	push	{r4, r5, r6, r7, r8, lr}
   19fac:	mov	r8, r0
   19fb0:	mov	r5, r1
   19fb4:	subs	r7, r2, #0
   19fb8:	ldr	r2, [pc, #180]	; 1a074 <__assert_fail@plt+0x84d0>
   19fbc:	cmp	r7, #0
   19fc0:	moveq	r7, r2
   19fc4:	subs	r6, r3, #0
   19fc8:	ldr	r3, [pc, #168]	; 1a078 <__assert_fail@plt+0x84d4>
   19fcc:	cmp	r6, #0
   19fd0:	moveq	r6, r3
   19fd4:	mov	r0, #40	; 0x28
   19fd8:	bl	2d404 <__assert_fail@plt+0x1b860>
   19fdc:	subs	r4, r0, #0
   19fe0:	beq	1a05c <__assert_fail@plt+0x84b8>
   19fe4:	ldr	r3, [pc, #144]	; 1a07c <__assert_fail@plt+0x84d8>
   19fe8:	cmp	r5, #0
   19fec:	moveq	r5, r3
   19ff0:	str	r5, [r4, #20]
   19ff4:	mov	r0, r4
   19ff8:	bl	196dc <__assert_fail@plt+0x7b38>
   19ffc:	cmp	r0, #0
   1a000:	beq	1a064 <__assert_fail@plt+0x84c0>
   1a004:	mov	r1, r5
   1a008:	mov	r0, r8
   1a00c:	bl	197d0 <__assert_fail@plt+0x7c2c>
   1a010:	str	r0, [r4, #8]
   1a014:	cmp	r0, #0
   1a018:	beq	1a064 <__assert_fail@plt+0x84c0>
   1a01c:	mov	r1, #8
   1a020:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   1a024:	str	r0, [r4]
   1a028:	cmp	r0, #0
   1a02c:	beq	1a064 <__assert_fail@plt+0x84c0>
   1a030:	ldr	r3, [r4, #8]
   1a034:	add	r0, r0, r3, lsl #3
   1a038:	str	r0, [r4, #4]
   1a03c:	mov	r3, #0
   1a040:	str	r3, [r4, #12]
   1a044:	str	r3, [r4, #16]
   1a048:	str	r7, [r4, #24]
   1a04c:	str	r6, [r4, #28]
   1a050:	ldr	r2, [sp, #24]
   1a054:	str	r2, [r4, #32]
   1a058:	str	r3, [r4, #36]	; 0x24
   1a05c:	mov	r0, r4
   1a060:	pop	{r4, r5, r6, r7, r8, pc}
   1a064:	mov	r0, r4
   1a068:	bl	17204 <__assert_fail@plt+0x5660>
   1a06c:	mov	r4, #0
   1a070:	b	1a05c <__assert_fail@plt+0x84b8>
   1a074:			; <UNDEFINED> instruction: 0x000196b8
   1a078:	andeq	r9, r1, ip, asr #13
   1a07c:	andeq	r0, r3, r8, lsr #14
   1a080:	push	{r4, r5, r6, r7, r8, lr}
   1a084:	mov	r5, r0
   1a088:	ldr	r7, [r0]
   1a08c:	ldr	r3, [r0, #4]
   1a090:	cmp	r7, r3
   1a094:	bcs	1a128 <__assert_fail@plt+0x8584>
   1a098:	add	r7, r7, #8
   1a09c:	mov	r6, #0
   1a0a0:	b	1a108 <__assert_fail@plt+0x8564>
   1a0a4:	str	r6, [r4]
   1a0a8:	ldr	r3, [r4, #4]
   1a0ac:	ldr	r2, [r5, #36]	; 0x24
   1a0b0:	str	r2, [r4, #4]
   1a0b4:	str	r4, [r5, #36]	; 0x24
   1a0b8:	mov	r4, r3
   1a0bc:	cmp	r3, #0
   1a0c0:	beq	1a0dc <__assert_fail@plt+0x8538>
   1a0c4:	ldr	r3, [r5, #32]
   1a0c8:	cmp	r3, #0
   1a0cc:	beq	1a0a4 <__assert_fail@plt+0x8500>
   1a0d0:	ldr	r0, [r4]
   1a0d4:	blx	r3
   1a0d8:	b	1a0a4 <__assert_fail@plt+0x8500>
   1a0dc:	ldr	r3, [r5, #32]
   1a0e0:	cmp	r3, #0
   1a0e4:	beq	1a0f0 <__assert_fail@plt+0x854c>
   1a0e8:	ldr	r0, [r8, #-8]
   1a0ec:	blx	r3
   1a0f0:	str	r6, [r8, #-8]
   1a0f4:	str	r6, [r8, #-4]
   1a0f8:	add	r7, r7, #8
   1a0fc:	ldr	r3, [r5, #4]
   1a100:	cmp	r3, r8
   1a104:	bls	1a128 <__assert_fail@plt+0x8584>
   1a108:	mov	r8, r7
   1a10c:	ldr	r3, [r7, #-8]
   1a110:	cmp	r3, #0
   1a114:	beq	1a0f8 <__assert_fail@plt+0x8554>
   1a118:	ldr	r4, [r7, #-4]
   1a11c:	cmp	r4, #0
   1a120:	bne	1a0c4 <__assert_fail@plt+0x8520>
   1a124:	b	1a0dc <__assert_fail@plt+0x8538>
   1a128:	mov	r3, #0
   1a12c:	str	r3, [r5, #12]
   1a130:	str	r3, [r5, #16]
   1a134:	pop	{r4, r5, r6, r7, r8, pc}
   1a138:	push	{r4, r5, r6, lr}
   1a13c:	mov	r5, r0
   1a140:	ldr	r3, [r0, #32]
   1a144:	cmp	r3, #0
   1a148:	beq	1a1b0 <__assert_fail@plt+0x860c>
   1a14c:	ldr	r3, [r0, #16]
   1a150:	cmp	r3, #0
   1a154:	beq	1a1b0 <__assert_fail@plt+0x860c>
   1a158:	ldr	r6, [r0]
   1a15c:	ldr	r3, [r0, #4]
   1a160:	cmp	r6, r3
   1a164:	bcc	1a17c <__assert_fail@plt+0x85d8>
   1a168:	b	1a1f0 <__assert_fail@plt+0x864c>
   1a16c:	add	r6, r6, #8
   1a170:	ldr	r3, [r5, #4]
   1a174:	cmp	r3, r6
   1a178:	bls	1a1b0 <__assert_fail@plt+0x860c>
   1a17c:	ldr	r3, [r6]
   1a180:	cmp	r3, #0
   1a184:	beq	1a16c <__assert_fail@plt+0x85c8>
   1a188:	cmp	r6, #0
   1a18c:	beq	1a16c <__assert_fail@plt+0x85c8>
   1a190:	mov	r4, r6
   1a194:	ldr	r3, [r5, #32]
   1a198:	ldr	r0, [r4]
   1a19c:	blx	r3
   1a1a0:	ldr	r4, [r4, #4]
   1a1a4:	cmp	r4, #0
   1a1a8:	bne	1a194 <__assert_fail@plt+0x85f0>
   1a1ac:	b	1a16c <__assert_fail@plt+0x85c8>
   1a1b0:	ldr	r6, [r5]
   1a1b4:	ldr	r3, [r5, #4]
   1a1b8:	cmp	r6, r3
   1a1bc:	bcs	1a1f0 <__assert_fail@plt+0x864c>
   1a1c0:	ldr	r0, [r6, #4]
   1a1c4:	cmp	r0, #0
   1a1c8:	beq	1a1e0 <__assert_fail@plt+0x863c>
   1a1cc:	ldr	r4, [r0, #4]
   1a1d0:	bl	17204 <__assert_fail@plt+0x5660>
   1a1d4:	mov	r0, r4
   1a1d8:	cmp	r4, #0
   1a1dc:	bne	1a1cc <__assert_fail@plt+0x8628>
   1a1e0:	add	r6, r6, #8
   1a1e4:	ldr	r3, [r5, #4]
   1a1e8:	cmp	r3, r6
   1a1ec:	bhi	1a1c0 <__assert_fail@plt+0x861c>
   1a1f0:	ldr	r0, [r5, #36]	; 0x24
   1a1f4:	cmp	r0, #0
   1a1f8:	beq	1a210 <__assert_fail@plt+0x866c>
   1a1fc:	ldr	r4, [r0, #4]
   1a200:	bl	17204 <__assert_fail@plt+0x5660>
   1a204:	mov	r0, r4
   1a208:	cmp	r4, #0
   1a20c:	bne	1a1fc <__assert_fail@plt+0x8658>
   1a210:	ldr	r0, [r5]
   1a214:	bl	17204 <__assert_fail@plt+0x5660>
   1a218:	mov	r0, r5
   1a21c:	bl	17204 <__assert_fail@plt+0x5660>
   1a220:	pop	{r4, r5, r6, pc}
   1a224:	push	{r4, r5, lr}
   1a228:	sub	sp, sp, #44	; 0x2c
   1a22c:	mov	r4, r0
   1a230:	mov	r0, r1
   1a234:	ldr	r1, [r4, #20]
   1a238:	bl	197d0 <__assert_fail@plt+0x7c2c>
   1a23c:	subs	r5, r0, #0
   1a240:	beq	1a338 <__assert_fail@plt+0x8794>
   1a244:	ldr	r3, [r4, #8]
   1a248:	cmp	r5, r3
   1a24c:	beq	1a348 <__assert_fail@plt+0x87a4>
   1a250:	mov	r1, #8
   1a254:	mov	r0, r5
   1a258:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   1a25c:	str	r0, [sp]
   1a260:	cmp	r0, #0
   1a264:	beq	1a350 <__assert_fail@plt+0x87ac>
   1a268:	str	r5, [sp, #8]
   1a26c:	add	r0, r0, r5, lsl #3
   1a270:	str	r0, [sp, #4]
   1a274:	mov	r2, #0
   1a278:	str	r2, [sp, #12]
   1a27c:	str	r2, [sp, #16]
   1a280:	ldr	r3, [r4, #20]
   1a284:	str	r3, [sp, #20]
   1a288:	ldr	r3, [r4, #24]
   1a28c:	str	r3, [sp, #24]
   1a290:	ldr	r3, [r4, #28]
   1a294:	str	r3, [sp, #28]
   1a298:	ldr	r3, [r4, #32]
   1a29c:	str	r3, [sp, #32]
   1a2a0:	ldr	r3, [r4, #36]	; 0x24
   1a2a4:	str	r3, [sp, #36]	; 0x24
   1a2a8:	mov	r1, r4
   1a2ac:	mov	r0, sp
   1a2b0:	bl	198cc <__assert_fail@plt+0x7d28>
   1a2b4:	subs	r5, r0, #0
   1a2b8:	bne	1a300 <__assert_fail@plt+0x875c>
   1a2bc:	ldr	r3, [sp, #36]	; 0x24
   1a2c0:	str	r3, [r4, #36]	; 0x24
   1a2c4:	mov	r2, #1
   1a2c8:	mov	r1, sp
   1a2cc:	mov	r0, r4
   1a2d0:	bl	198cc <__assert_fail@plt+0x7d28>
   1a2d4:	cmp	r0, #0
   1a2d8:	beq	1a334 <__assert_fail@plt+0x8790>
   1a2dc:	mov	r2, #0
   1a2e0:	mov	r1, sp
   1a2e4:	mov	r0, r4
   1a2e8:	bl	198cc <__assert_fail@plt+0x7d28>
   1a2ec:	cmp	r0, #0
   1a2f0:	beq	1a334 <__assert_fail@plt+0x8790>
   1a2f4:	ldr	r0, [sp]
   1a2f8:	bl	17204 <__assert_fail@plt+0x5660>
   1a2fc:	b	1a33c <__assert_fail@plt+0x8798>
   1a300:	ldr	r0, [r4]
   1a304:	bl	17204 <__assert_fail@plt+0x5660>
   1a308:	ldr	r3, [sp]
   1a30c:	str	r3, [r4]
   1a310:	ldr	r3, [sp, #4]
   1a314:	str	r3, [r4, #4]
   1a318:	ldr	r3, [sp, #8]
   1a31c:	str	r3, [r4, #8]
   1a320:	ldr	r3, [sp, #12]
   1a324:	str	r3, [r4, #12]
   1a328:	ldr	r3, [sp, #36]	; 0x24
   1a32c:	str	r3, [r4, #36]	; 0x24
   1a330:	b	1a33c <__assert_fail@plt+0x8798>
   1a334:	bl	11b68 <abort@plt>
   1a338:	mov	r5, #0
   1a33c:	mov	r0, r5
   1a340:	add	sp, sp, #44	; 0x2c
   1a344:	pop	{r4, r5, pc}
   1a348:	mov	r5, #1
   1a34c:	b	1a33c <__assert_fail@plt+0x8798>
   1a350:	mov	r5, #0
   1a354:	b	1a33c <__assert_fail@plt+0x8798>
   1a358:	push	{r4, r5, r6, lr}
   1a35c:	sub	sp, sp, #8
   1a360:	subs	r6, r1, #0
   1a364:	beq	1a3a0 <__assert_fail@plt+0x87fc>
   1a368:	mov	r4, r0
   1a36c:	mov	r5, r2
   1a370:	mov	r3, #0
   1a374:	add	r2, sp, #4
   1a378:	mov	r1, r6
   1a37c:	bl	19a20 <__assert_fail@plt+0x7e7c>
   1a380:	cmp	r0, #0
   1a384:	beq	1a3a4 <__assert_fail@plt+0x8800>
   1a388:	cmp	r5, #0
   1a38c:	moveq	r0, #0
   1a390:	strne	r0, [r5]
   1a394:	movne	r0, #0
   1a398:	add	sp, sp, #8
   1a39c:	pop	{r4, r5, r6, pc}
   1a3a0:	bl	11b68 <abort@plt>
   1a3a4:	vldr	s15, [r4, #12]
   1a3a8:	vcvt.f32.u32	s14, s15
   1a3ac:	ldr	r3, [r4, #20]
   1a3b0:	vldr	s15, [r4, #8]
   1a3b4:	vcvt.f32.u32	s15, s15
   1a3b8:	vldr	s13, [r3, #8]
   1a3bc:	vmul.f32	s15, s15, s13
   1a3c0:	vcmpe.f32	s14, s15
   1a3c4:	vmrs	APSR_nzcv, fpscr
   1a3c8:	bgt	1a418 <__assert_fail@plt+0x8874>
   1a3cc:	ldr	r3, [sp, #4]
   1a3d0:	ldr	r2, [r3]
   1a3d4:	cmp	r2, #0
   1a3d8:	beq	1a4bc <__assert_fail@plt+0x8918>
   1a3dc:	ldr	r0, [r4, #36]	; 0x24
   1a3e0:	cmp	r0, #0
   1a3e4:	beq	1a4a4 <__assert_fail@plt+0x8900>
   1a3e8:	ldr	r3, [r0, #4]
   1a3ec:	str	r3, [r4, #36]	; 0x24
   1a3f0:	str	r6, [r0]
   1a3f4:	ldr	r3, [sp, #4]
   1a3f8:	ldr	r2, [r3, #4]
   1a3fc:	str	r2, [r0, #4]
   1a400:	str	r0, [r3, #4]
   1a404:	ldr	r3, [r4, #16]
   1a408:	add	r3, r3, #1
   1a40c:	str	r3, [r4, #16]
   1a410:	mov	r0, #1
   1a414:	b	1a398 <__assert_fail@plt+0x87f4>
   1a418:	mov	r0, r4
   1a41c:	bl	196dc <__assert_fail@plt+0x7b38>
   1a420:	ldr	r3, [r4, #20]
   1a424:	vldr	s13, [r3, #8]
   1a428:	vldr	s15, [r4, #8]
   1a42c:	vcvt.f32.u32	s15, s15
   1a430:	vldr	s14, [r4, #12]
   1a434:	vcvt.f32.u32	s14, s14
   1a438:	vmul.f32	s12, s13, s15
   1a43c:	vcmpe.f32	s14, s12
   1a440:	vmrs	APSR_nzcv, fpscr
   1a444:	ble	1a3cc <__assert_fail@plt+0x8828>
   1a448:	ldrb	r2, [r3, #16]
   1a44c:	cmp	r2, #0
   1a450:	vldr	s14, [r3, #12]
   1a454:	vmul.f32	s15, s15, s14
   1a458:	vmuleq.f32	s15, s15, s13
   1a45c:	vldr	s14, [pc, #140]	; 1a4f0 <__assert_fail@plt+0x894c>
   1a460:	vcmpe.f32	s15, s14
   1a464:	vmrs	APSR_nzcv, fpscr
   1a468:	bge	1a4e0 <__assert_fail@plt+0x893c>
   1a46c:	vcvt.u32.f32	s15, s15
   1a470:	vmov	r1, s15
   1a474:	mov	r0, r4
   1a478:	bl	1a224 <__assert_fail@plt+0x8680>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a4e8 <__assert_fail@plt+0x8944>
   1a484:	mov	r3, #0
   1a488:	add	r2, sp, #4
   1a48c:	mov	r1, r6
   1a490:	mov	r0, r4
   1a494:	bl	19a20 <__assert_fail@plt+0x7e7c>
   1a498:	cmp	r0, #0
   1a49c:	beq	1a3cc <__assert_fail@plt+0x8828>
   1a4a0:	bl	11b68 <abort@plt>
   1a4a4:	mov	r0, #8
   1a4a8:	bl	2d404 <__assert_fail@plt+0x1b860>
   1a4ac:	cmp	r0, #0
   1a4b0:	bne	1a3f0 <__assert_fail@plt+0x884c>
   1a4b4:	mvn	r0, #0
   1a4b8:	b	1a398 <__assert_fail@plt+0x87f4>
   1a4bc:	str	r6, [r3]
   1a4c0:	ldr	r3, [r4, #16]
   1a4c4:	add	r3, r3, #1
   1a4c8:	str	r3, [r4, #16]
   1a4cc:	ldr	r3, [r4, #12]
   1a4d0:	add	r3, r3, #1
   1a4d4:	str	r3, [r4, #12]
   1a4d8:	mov	r0, #1
   1a4dc:	b	1a398 <__assert_fail@plt+0x87f4>
   1a4e0:	mvn	r0, #0
   1a4e4:	b	1a398 <__assert_fail@plt+0x87f4>
   1a4e8:	mvn	r0, #0
   1a4ec:	b	1a398 <__assert_fail@plt+0x87f4>
   1a4f0:	svcmi	0x00800000
   1a4f4:	push	{r4, lr}
   1a4f8:	sub	sp, sp, #8
   1a4fc:	mov	r4, r1
   1a500:	add	r2, sp, #4
   1a504:	bl	1a358 <__assert_fail@plt+0x87b4>
   1a508:	cmn	r0, #1
   1a50c:	beq	1a524 <__assert_fail@plt+0x8980>
   1a510:	cmp	r0, #0
   1a514:	movne	r0, r4
   1a518:	ldreq	r0, [sp, #4]
   1a51c:	add	sp, sp, #8
   1a520:	pop	{r4, pc}
   1a524:	mov	r0, #0
   1a528:	b	1a51c <__assert_fail@plt+0x8978>
   1a52c:	push	{r4, r5, r6, lr}
   1a530:	sub	sp, sp, #8
   1a534:	mov	r4, r0
   1a538:	mov	r3, #1
   1a53c:	add	r2, sp, #4
   1a540:	bl	19a20 <__assert_fail@plt+0x7e7c>
   1a544:	subs	r5, r0, #0
   1a548:	beq	1a568 <__assert_fail@plt+0x89c4>
   1a54c:	ldr	r3, [r4, #16]
   1a550:	sub	r3, r3, #1
   1a554:	str	r3, [r4, #16]
   1a558:	ldr	r3, [sp, #4]
   1a55c:	ldr	r3, [r3]
   1a560:	cmp	r3, #0
   1a564:	beq	1a574 <__assert_fail@plt+0x89d0>
   1a568:	mov	r0, r5
   1a56c:	add	sp, sp, #8
   1a570:	pop	{r4, r5, r6, pc}
   1a574:	ldr	r3, [r4, #12]
   1a578:	sub	r3, r3, #1
   1a57c:	str	r3, [r4, #12]
   1a580:	vmov	s15, r3
   1a584:	vcvt.f32.u32	s15, s15
   1a588:	ldr	r3, [r4, #20]
   1a58c:	vldr	s14, [r4, #8]
   1a590:	vcvt.f32.u32	s14, s14
   1a594:	vldr	s13, [r3]
   1a598:	vmul.f32	s14, s14, s13
   1a59c:	vcmpe.f32	s15, s14
   1a5a0:	vmrs	APSR_nzcv, fpscr
   1a5a4:	bpl	1a568 <__assert_fail@plt+0x89c4>
   1a5a8:	mov	r0, r4
   1a5ac:	bl	196dc <__assert_fail@plt+0x7b38>
   1a5b0:	ldr	r3, [r4, #20]
   1a5b4:	vldr	s15, [r4, #8]
   1a5b8:	vcvt.f32.u32	s15, s15
   1a5bc:	vldr	s14, [r4, #12]
   1a5c0:	vcvt.f32.u32	s13, s14
   1a5c4:	vldr	s14, [r3]
   1a5c8:	vmul.f32	s14, s15, s14
   1a5cc:	vcmpe.f32	s13, s14
   1a5d0:	vmrs	APSR_nzcv, fpscr
   1a5d4:	bpl	1a568 <__assert_fail@plt+0x89c4>
   1a5d8:	ldrb	r2, [r3, #16]
   1a5dc:	cmp	r2, #0
   1a5e0:	vldr	s14, [r3, #4]
   1a5e4:	vmuleq.f32	s15, s15, s14
   1a5e8:	vldreq	s14, [r3, #8]
   1a5ec:	vmul.f32	s15, s15, s14
   1a5f0:	vcvt.u32.f32	s15, s15
   1a5f4:	vmov	r1, s15
   1a5f8:	mov	r0, r4
   1a5fc:	bl	1a224 <__assert_fail@plt+0x8680>
   1a600:	cmp	r0, #0
   1a604:	bne	1a568 <__assert_fail@plt+0x89c4>
   1a608:	ldr	r0, [r4, #36]	; 0x24
   1a60c:	cmp	r0, #0
   1a610:	beq	1a628 <__assert_fail@plt+0x8a84>
   1a614:	ldr	r6, [r0, #4]
   1a618:	bl	17204 <__assert_fail@plt+0x5660>
   1a61c:	mov	r0, r6
   1a620:	cmp	r6, #0
   1a624:	bne	1a614 <__assert_fail@plt+0x8a70>
   1a628:	mov	r3, #0
   1a62c:	str	r3, [r4, #36]	; 0x24
   1a630:	b	1a568 <__assert_fail@plt+0x89c4>
   1a634:	push	{r4, lr}
   1a638:	bl	1a52c <__assert_fail@plt+0x8988>
   1a63c:	pop	{r4, pc}
   1a640:	push	{r4, r6, r7, lr}
   1a644:	vpush	{d8}
   1a648:	vmov.f64	d8, d0
   1a64c:	cmp	r0, #1
   1a650:	beq	1a6b8 <__assert_fail@plt+0x8b14>
   1a654:	mov	r4, r0
   1a658:	vldr	d7, [pc, #104]	; 1a6c8 <__assert_fail@plt+0x8b24>
   1a65c:	vcmpe.f64	d0, d7
   1a660:	vmrs	APSR_nzcv, fpscr
   1a664:	bpl	1a6b8 <__assert_fail@plt+0x8b14>
   1a668:	vmov	r0, r1, d0
   1a66c:	bl	2ec20 <__assert_fail@plt+0x1d07c>
   1a670:	mov	r6, r0
   1a674:	mov	r7, r1
   1a678:	cmp	r4, #0
   1a67c:	movne	r0, #0
   1a680:	bne	1a6a0 <__assert_fail@plt+0x8afc>
   1a684:	mov	r0, r6
   1a688:	bl	2ea88 <__assert_fail@plt+0x1cee4>
   1a68c:	vmov	d7, r0, r1
   1a690:	vcmp.f64	d7, d8
   1a694:	vmrs	APSR_nzcv, fpscr
   1a698:	movne	r0, #1
   1a69c:	moveq	r0, #0
   1a6a0:	adds	r2, r6, r0
   1a6a4:	adc	r3, r7, r0, asr #31
   1a6a8:	mov	r0, r2
   1a6ac:	mov	r1, r3
   1a6b0:	bl	2ea88 <__assert_fail@plt+0x1cee4>
   1a6b4:	vmov	d8, r0, r1
   1a6b8:	vmov.f64	d0, d8
   1a6bc:	vpop	{d8}
   1a6c0:	pop	{r4, r6, r7, pc}
   1a6c4:	nop			; (mov r0, r0)
   1a6c8:	andeq	r0, r0, r0
   1a6cc:	mvnsmi	r0, #0
   1a6d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a6d4:	vpush	{d8-d9}
   1a6d8:	sub	sp, sp, #124	; 0x7c
   1a6dc:	strd	r0, [sp, #32]
   1a6e0:	mov	r7, r2
   1a6e4:	str	r2, [sp, #24]
   1a6e8:	mov	r8, r3
   1a6ec:	and	r3, r3, #3
   1a6f0:	str	r3, [sp, #28]
   1a6f4:	and	r3, r8, #32
   1a6f8:	str	r3, [sp, #40]	; 0x28
   1a6fc:	cmp	r3, #0
   1a700:	movne	r3, #1024	; 0x400
   1a704:	moveq	r3, #1000	; 0x3e8
   1a708:	str	r3, [sp, #44]	; 0x2c
   1a70c:	bl	11aa8 <localeconv@plt>
   1a710:	mov	r5, r0
   1a714:	ldr	r6, [r0]
   1a718:	mov	r0, r6
   1a71c:	bl	11988 <strlen@plt>
   1a720:	mov	r4, r0
   1a724:	sub	r3, r0, #1
   1a728:	ldr	r2, [pc, #1112]	; 1ab88 <__assert_fail@plt+0x8fe4>
   1a72c:	cmp	r3, #15
   1a730:	movhi	r6, r2
   1a734:	str	r6, [sp, #64]	; 0x40
   1a738:	cmp	r3, #15
   1a73c:	movhi	r4, #1
   1a740:	ldr	r9, [r5, #8]
   1a744:	ldr	r5, [r5, #4]
   1a748:	mov	r0, r5
   1a74c:	bl	11988 <strlen@plt>
   1a750:	ldr	r3, [pc, #1076]	; 1ab8c <__assert_fail@plt+0x8fe8>
   1a754:	cmp	r0, #16
   1a758:	movhi	r5, r3
   1a75c:	str	r5, [sp, #12]
   1a760:	add	sl, r7, #644	; 0x284
   1a764:	add	sl, sl, #3
   1a768:	ldrd	r2, [sp, #184]	; 0xb8
   1a76c:	ldrd	r6, [sp, #176]	; 0xb0
   1a770:	cmp	r3, r7
   1a774:	cmpeq	r2, r6
   1a778:	bhi	1a8fc <__assert_fail@plt+0x8d58>
   1a77c:	mov	r0, r6
   1a780:	mov	r1, r7
   1a784:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a788:	orrs	r3, r2, r3
   1a78c:	bne	1a7d4 <__assert_fail@plt+0x8c30>
   1a790:	ldrd	r2, [sp, #184]	; 0xb8
   1a794:	ldrd	r0, [sp, #176]	; 0xb0
   1a798:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a79c:	mov	r2, r0
   1a7a0:	mov	r3, r1
   1a7a4:	ldrd	r6, [sp, #32]
   1a7a8:	mul	r0, r2, r7
   1a7ac:	mla	ip, r6, r3, r0
   1a7b0:	umull	r0, r1, r2, r6
   1a7b4:	strd	r0, [sp, #16]
   1a7b8:	add	r1, ip, r1
   1a7bc:	str	r1, [sp, #20]
   1a7c0:	ldrd	r0, [sp, #16]
   1a7c4:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a7c8:	cmp	r7, r1
   1a7cc:	cmpeq	r6, r0
   1a7d0:	beq	1aa74 <__assert_fail@plt+0x8ed0>
   1a7d4:	ldrd	r0, [sp, #176]	; 0xb0
   1a7d8:	bl	2ea88 <__assert_fail@plt+0x1cee4>
   1a7dc:	vmov	d9, r0, r1
   1a7e0:	ldrd	r0, [sp, #184]	; 0xb8
   1a7e4:	bl	2ea88 <__assert_fail@plt+0x1cee4>
   1a7e8:	vmov	d7, r0, r1
   1a7ec:	vdiv.f64	d8, d9, d7
   1a7f0:	ldrd	r0, [sp, #32]
   1a7f4:	bl	2ea88 <__assert_fail@plt+0x1cee4>
   1a7f8:	vmov	d7, r0, r1
   1a7fc:	vmul.f64	d0, d8, d7
   1a800:	tst	r8, #16
   1a804:	beq	1a9cc <__assert_fail@plt+0x8e28>
   1a808:	vldr	d7, [pc, #872]	; 1ab78 <__assert_fail@plt+0x8fd4>
   1a80c:	mov	r7, #0
   1a810:	vldr	s13, [sp, #44]	; 0x2c
   1a814:	vcvt.f64.u32	d6, s13
   1a818:	vmul.f64	d7, d7, d6
   1a81c:	add	r7, r7, #1
   1a820:	vmul.f64	d5, d6, d7
   1a824:	vcmpe.f64	d0, d5
   1a828:	vmrs	APSR_nzcv, fpscr
   1a82c:	movge	r3, #1
   1a830:	movlt	r3, #0
   1a834:	cmp	r7, #7
   1a838:	movgt	r3, #0
   1a83c:	andle	r3, r3, #1
   1a840:	cmp	r3, #0
   1a844:	bne	1a818 <__assert_fail@plt+0x8c74>
   1a848:	vdiv.f64	d8, d0, d7
   1a84c:	vmov.f64	d0, d8
   1a850:	ldr	r0, [sp, #28]
   1a854:	bl	1a640 <__assert_fail@plt+0x8a9c>
   1a858:	vstr	d0, [sp]
   1a85c:	ldr	r3, [pc, #812]	; 1ab90 <__assert_fail@plt+0x8fec>
   1a860:	mvn	r2, #0
   1a864:	mov	r1, #1
   1a868:	ldr	r6, [sp, #24]
   1a86c:	mov	r0, r6
   1a870:	bl	119d0 <__sprintf_chk@plt>
   1a874:	mov	r0, r6
   1a878:	bl	11988 <strlen@plt>
   1a87c:	mov	r5, r0
   1a880:	add	r4, r4, #1
   1a884:	ldr	r3, [sp, #40]	; 0x28
   1a888:	cmp	r3, #0
   1a88c:	movne	r3, #1
   1a890:	moveq	r3, #2
   1a894:	add	r3, r3, r4
   1a898:	cmp	r0, r3
   1a89c:	bhi	1a8b8 <__assert_fail@plt+0x8d14>
   1a8a0:	tst	r8, #8
   1a8a4:	beq	1aa04 <__assert_fail@plt+0x8e60>
   1a8a8:	add	r3, r6, r0
   1a8ac:	ldrb	r3, [r3, #-1]
   1a8b0:	cmp	r3, #48	; 0x30
   1a8b4:	bne	1aa04 <__assert_fail@plt+0x8e60>
   1a8b8:	vldr	d9, [pc, #704]	; 1ab80 <__assert_fail@plt+0x8fdc>
   1a8bc:	vmul.f64	d0, d8, d9
   1a8c0:	ldr	r0, [sp, #28]
   1a8c4:	bl	1a640 <__assert_fail@plt+0x8a9c>
   1a8c8:	vdiv.f64	d0, d0, d9
   1a8cc:	vstr	d0, [sp]
   1a8d0:	ldr	r3, [pc, #700]	; 1ab94 <__assert_fail@plt+0x8ff0>
   1a8d4:	mvn	r2, #0
   1a8d8:	mov	r1, #1
   1a8dc:	ldr	r4, [sp, #24]
   1a8e0:	mov	r0, r4
   1a8e4:	bl	119d0 <__sprintf_chk@plt>
   1a8e8:	mov	r0, r4
   1a8ec:	bl	11988 <strlen@plt>
   1a8f0:	mov	r5, r0
   1a8f4:	mov	r4, #0
   1a8f8:	b	1aa04 <__assert_fail@plt+0x8e60>
   1a8fc:	ldrd	r2, [sp, #176]	; 0xb0
   1a900:	orrs	r3, r2, r3
   1a904:	beq	1a7d4 <__assert_fail@plt+0x8c30>
   1a908:	ldrd	r2, [sp, #176]	; 0xb0
   1a90c:	ldrd	r0, [sp, #184]	; 0xb8
   1a910:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a914:	orrs	r3, r2, r3
   1a918:	bne	1a7d4 <__assert_fail@plt+0x8c30>
   1a91c:	ldrd	r2, [sp, #176]	; 0xb0
   1a920:	ldrd	r0, [sp, #184]	; 0xb8
   1a924:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a928:	strd	r0, [sp, #48]	; 0x30
   1a92c:	mov	r2, r0
   1a930:	mov	r3, r1
   1a934:	ldrd	r0, [sp, #32]
   1a938:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a93c:	mov	r1, #10
   1a940:	umull	r6, r7, r2, r1
   1a944:	mla	r7, r1, r3, r7
   1a948:	ldrd	r2, [sp, #48]	; 0x30
   1a94c:	mov	r0, r6
   1a950:	mov	r1, r7
   1a954:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a958:	lsls	r0, r2, #1
   1a95c:	adc	r1, r3, r3
   1a960:	strd	r0, [sp, #56]	; 0x38
   1a964:	ldrd	r2, [sp, #48]	; 0x30
   1a968:	ldrd	r0, [sp, #32]
   1a96c:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a970:	strd	r0, [sp, #16]
   1a974:	ldrd	r2, [sp, #48]	; 0x30
   1a978:	mov	r0, r6
   1a97c:	mov	r1, r7
   1a980:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1a984:	mov	r6, r0
   1a988:	ldrd	r2, [sp, #48]	; 0x30
   1a98c:	ldrd	r0, [sp, #56]	; 0x38
   1a990:	cmp	r3, r1
   1a994:	cmpeq	r2, r0
   1a998:	bls	1a9b0 <__assert_fail@plt+0x8e0c>
   1a99c:	mov	r3, r0
   1a9a0:	orrs	r3, r3, r1
   1a9a4:	movne	fp, #1
   1a9a8:	moveq	fp, #0
   1a9ac:	b	1aa7c <__assert_fail@plt+0x8ed8>
   1a9b0:	ldrd	r2, [sp, #48]	; 0x30
   1a9b4:	ldrd	r0, [sp, #56]	; 0x38
   1a9b8:	cmp	r3, r1
   1a9bc:	cmpeq	r2, r0
   1a9c0:	movcc	fp, #3
   1a9c4:	movcs	fp, #2
   1a9c8:	b	1aa7c <__assert_fail@plt+0x8ed8>
   1a9cc:	ldr	r0, [sp, #28]
   1a9d0:	bl	1a640 <__assert_fail@plt+0x8a9c>
   1a9d4:	vstr	d0, [sp]
   1a9d8:	ldr	r3, [pc, #436]	; 1ab94 <__assert_fail@plt+0x8ff0>
   1a9dc:	mvn	r2, #0
   1a9e0:	mov	r1, #1
   1a9e4:	ldr	r4, [sp, #24]
   1a9e8:	mov	r0, r4
   1a9ec:	bl	119d0 <__sprintf_chk@plt>
   1a9f0:	mov	r0, r4
   1a9f4:	bl	11988 <strlen@plt>
   1a9f8:	mov	r5, r0
   1a9fc:	mov	r4, #0
   1aa00:	mvn	r7, #0
   1aa04:	sub	r6, sl, r5
   1aa08:	mov	r2, r5
   1aa0c:	ldr	r1, [sp, #24]
   1aa10:	mov	r0, r6
   1aa14:	bl	11748 <memmove@plt>
   1aa18:	sub	r5, r5, r4
   1aa1c:	add	r5, r6, r5
   1aa20:	tst	r8, #4
   1aa24:	bne	1adfc <__assert_fail@plt+0x9258>
   1aa28:	tst	r8, #128	; 0x80
   1aa2c:	beq	1af28 <__assert_fail@plt+0x9384>
   1aa30:	cmp	r7, #0
   1aa34:	blt	1ae8c <__assert_fail@plt+0x92e8>
   1aa38:	and	r3, r8, #256	; 0x100
   1aa3c:	orrs	r2, r7, r3
   1aa40:	beq	1aa5c <__assert_fail@plt+0x8eb8>
   1aa44:	tst	r8, #64	; 0x40
   1aa48:	beq	1aa5c <__assert_fail@plt+0x8eb8>
   1aa4c:	ldr	r1, [sp, #24]
   1aa50:	add	sl, r1, #648	; 0x288
   1aa54:	mov	r2, #32
   1aa58:	strb	r2, [r1, #647]	; 0x287
   1aa5c:	cmp	r7, #0
   1aa60:	bne	1aee0 <__assert_fail@plt+0x933c>
   1aa64:	cmp	r3, #0
   1aa68:	beq	1af28 <__assert_fail@plt+0x9384>
   1aa6c:	mov	r2, sl
   1aa70:	b	1af1c <__assert_fail@plt+0x9378>
   1aa74:	mov	fp, #0
   1aa78:	mov	r6, fp
   1aa7c:	ands	r3, r8, #16
   1aa80:	str	r3, [sp, #48]	; 0x30
   1aa84:	streq	sl, [sp, #32]
   1aa88:	mvneq	r7, #0
   1aa8c:	beq	1ac40 <__assert_fail@plt+0x909c>
   1aa90:	ldr	ip, [sp, #44]	; 0x2c
   1aa94:	mov	r3, #0
   1aa98:	ldrd	r0, [sp, #16]
   1aa9c:	cmp	r1, r3
   1aaa0:	cmpeq	r0, ip
   1aaa4:	strcc	sl, [sp, #32]
   1aaa8:	movcc	r7, #0
   1aaac:	bcc	1ac40 <__assert_fail@plt+0x909c>
   1aab0:	mov	r7, #0
   1aab4:	str	sl, [sp, #32]
   1aab8:	mov	sl, ip
   1aabc:	str	r9, [sp, #56]	; 0x38
   1aac0:	str	r8, [sp, #68]	; 0x44
   1aac4:	mov	r8, ip
   1aac8:	mov	r9, r3
   1aacc:	b	1ab0c <__assert_fail@plt+0x8f68>
   1aad0:	add	fp, fp, r5
   1aad4:	cmp	sl, fp
   1aad8:	movcc	fp, #3
   1aadc:	movcs	fp, #2
   1aae0:	add	r7, r7, #1
   1aae4:	ldrd	r2, [sp, #16]
   1aae8:	cmp	r9, r3
   1aaec:	cmpeq	r8, r2
   1aaf0:	movls	r3, #1
   1aaf4:	movhi	r3, #0
   1aaf8:	cmp	r7, #7
   1aafc:	movgt	r3, #0
   1ab00:	andle	r3, r3, #1
   1ab04:	cmp	r3, #0
   1ab08:	beq	1ab9c <__assert_fail@plt+0x8ff8>
   1ab0c:	mov	r2, r8
   1ab10:	mov	r3, r9
   1ab14:	ldrd	r0, [sp, #16]
   1ab18:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1ab1c:	add	r2, r2, r2, lsl #2
   1ab20:	add	r6, r6, r2, lsl #1
   1ab24:	mov	r1, sl
   1ab28:	mov	r0, r6
   1ab2c:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   1ab30:	asr	r5, fp, #1
   1ab34:	add	r5, r5, r1, lsl #1
   1ab38:	mov	r2, r8
   1ab3c:	mov	r3, r9
   1ab40:	ldrd	r0, [sp, #16]
   1ab44:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1ab48:	strd	r0, [sp, #16]
   1ab4c:	mov	r1, sl
   1ab50:	mov	r0, r6
   1ab54:	bl	2e2f8 <__assert_fail@plt+0x1c754>
   1ab58:	mov	r6, r0
   1ab5c:	cmp	sl, r5
   1ab60:	bls	1aad0 <__assert_fail@plt+0x8f2c>
   1ab64:	cmn	fp, r5
   1ab68:	movne	fp, #1
   1ab6c:	moveq	fp, #0
   1ab70:	b	1aae0 <__assert_fail@plt+0x8f3c>
   1ab74:	nop			; (mov r0, r0)
   1ab78:	andeq	r0, r0, r0
   1ab7c:	svccc	0x00f00000	; IMB
   1ab80:	andeq	r0, r0, r0
   1ab84:	eormi	r0, r4, r0
   1ab88:	ldrdeq	pc, [r2], -ip
   1ab8c:	andeq	r0, r3, ip, lsl #15
   1ab90:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1ab94:	andeq	r0, r3, r8, asr #15
   1ab98:	andeq	r0, r3, r8, lsr #15
   1ab9c:	ldr	sl, [sp, #32]
   1aba0:	ldr	r9, [sp, #56]	; 0x38
   1aba4:	ldr	r8, [sp, #68]	; 0x44
   1aba8:	ldrd	r2, [sp, #16]
   1abac:	cmp	r3, #0
   1abb0:	cmpeq	r2, #9
   1abb4:	strhi	sl, [sp, #32]
   1abb8:	bhi	1ac40 <__assert_fail@plt+0x909c>
   1abbc:	ldr	r3, [sp, #28]
   1abc0:	cmp	r3, #1
   1abc4:	beq	1ace8 <__assert_fail@plt+0x9144>
   1abc8:	ldr	r3, [sp, #28]
   1abcc:	clz	r3, r3
   1abd0:	lsr	r3, r3, #5
   1abd4:	cmp	fp, #0
   1abd8:	moveq	r3, #0
   1abdc:	cmp	r3, #0
   1abe0:	beq	1abf4 <__assert_fail@plt+0x9050>
   1abe4:	add	r6, r6, #1
   1abe8:	cmp	r6, #10
   1abec:	movne	fp, #0
   1abf0:	beq	1ad00 <__assert_fail@plt+0x915c>
   1abf4:	cmp	r6, #0
   1abf8:	bne	1ac0c <__assert_fail@plt+0x9068>
   1abfc:	ands	r6, r8, #8
   1ac00:	strne	sl, [sp, #32]
   1ac04:	movne	r6, #0
   1ac08:	bne	1ac40 <__assert_fail@plt+0x909c>
   1ac0c:	ldr	r3, [sp, #24]
   1ac10:	add	r5, r3, #644	; 0x284
   1ac14:	add	r5, r5, #2
   1ac18:	add	r6, r6, #48	; 0x30
   1ac1c:	strb	r6, [r3, #646]	; 0x286
   1ac20:	sub	r3, r5, r4
   1ac24:	str	r3, [sp, #32]
   1ac28:	mov	r2, r4
   1ac2c:	ldr	r1, [sp, #64]	; 0x40
   1ac30:	mov	r0, r3
   1ac34:	bl	11784 <memcpy@plt>
   1ac38:	mov	r6, #0
   1ac3c:	mov	fp, r6
   1ac40:	ldr	r3, [sp, #28]
   1ac44:	cmp	r3, #1
   1ac48:	beq	1ad30 <__assert_fail@plt+0x918c>
   1ac4c:	ldr	r3, [sp, #28]
   1ac50:	cmp	r3, #0
   1ac54:	movne	fp, #0
   1ac58:	bne	1ac6c <__assert_fail@plt+0x90c8>
   1ac5c:	add	fp, r6, fp
   1ac60:	cmp	fp, #0
   1ac64:	movle	fp, #0
   1ac68:	movgt	fp, #1
   1ac6c:	cmp	fp, #0
   1ac70:	beq	1ad8c <__assert_fail@plt+0x91e8>
   1ac74:	ldrd	r2, [sp, #16]
   1ac78:	adds	r2, r2, #1
   1ac7c:	adc	r3, r3, #0
   1ac80:	mov	r0, r2
   1ac84:	mov	r1, r3
   1ac88:	strd	r0, [sp, #16]
   1ac8c:	ldr	r3, [sp, #48]	; 0x30
   1ac90:	cmp	r3, #0
   1ac94:	beq	1ad8c <__assert_fail@plt+0x91e8>
   1ac98:	ldr	r2, [sp, #44]	; 0x2c
   1ac9c:	mov	r3, #0
   1aca0:	cmp	r3, r1
   1aca4:	cmpeq	r2, r0
   1aca8:	moveq	r3, #1
   1acac:	movne	r3, #0
   1acb0:	cmp	r7, #7
   1acb4:	movgt	r3, #0
   1acb8:	andle	r3, r3, #1
   1acbc:	cmp	r3, #0
   1acc0:	beq	1ad8c <__assert_fail@plt+0x91e8>
   1acc4:	add	r7, r7, #1
   1acc8:	tst	r8, #8
   1accc:	beq	1ad60 <__assert_fail@plt+0x91bc>
   1acd0:	ldr	r2, [sp, #32]
   1acd4:	sub	r6, r2, #1
   1acd8:	mov	r3, #49	; 0x31
   1acdc:	strb	r3, [r2, #-1]
   1ace0:	mov	r5, r2
   1ace4:	b	1aa20 <__assert_fail@plt+0x8e7c>
   1ace8:	and	r3, r6, #1
   1acec:	add	r3, r3, fp
   1acf0:	cmp	r3, #2
   1acf4:	movle	r3, #0
   1acf8:	movgt	r3, #1
   1acfc:	b	1abdc <__assert_fail@plt+0x9038>
   1ad00:	ldrd	r2, [sp, #16]
   1ad04:	adds	r2, r2, #1
   1ad08:	adc	r3, r3, #0
   1ad0c:	strd	r2, [sp, #16]
   1ad10:	cmp	r3, #0
   1ad14:	cmpeq	r2, #9
   1ad18:	strhi	sl, [sp, #32]
   1ad1c:	movhi	fp, #0
   1ad20:	movhi	r6, fp
   1ad24:	bhi	1ac40 <__assert_fail@plt+0x909c>
   1ad28:	mov	fp, #0
   1ad2c:	b	1abfc <__assert_fail@plt+0x9058>
   1ad30:	ldrd	r2, [sp, #16]
   1ad34:	and	r2, r2, #1
   1ad38:	mov	r3, #0
   1ad3c:	adds	r2, r2, fp
   1ad40:	adc	r3, r3, fp, asr #31
   1ad44:	orr	r2, r2, r3
   1ad48:	cmp	r2, #0
   1ad4c:	addne	r6, r6, #1
   1ad50:	cmp	r6, #5
   1ad54:	movle	fp, #0
   1ad58:	movgt	fp, #1
   1ad5c:	b	1ac6c <__assert_fail@plt+0x90c8>
   1ad60:	mov	r3, #48	; 0x30
   1ad64:	ldr	r2, [sp, #32]
   1ad68:	strb	r3, [r2, #-1]
   1ad6c:	mvn	r3, r4
   1ad70:	add	r3, r2, r3
   1ad74:	str	r3, [sp, #32]
   1ad78:	mov	r2, r4
   1ad7c:	ldr	r1, [sp, #64]	; 0x40
   1ad80:	mov	r0, r3
   1ad84:	bl	11784 <memcpy@plt>
   1ad88:	b	1acd0 <__assert_fail@plt+0x912c>
   1ad8c:	ldr	r6, [sp, #32]
   1ad90:	mov	r4, #10
   1ad94:	mov	r5, #0
   1ad98:	mov	fp, r6
   1ad9c:	str	r8, [sp, #28]
   1ada0:	mov	r8, r7
   1ada4:	ldrd	r6, [sp, #16]
   1ada8:	mov	r2, r4
   1adac:	mov	r3, r5
   1adb0:	mov	r0, r6
   1adb4:	mov	r1, r7
   1adb8:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1adbc:	add	r2, r2, #48	; 0x30
   1adc0:	strb	r2, [fp, #-1]!
   1adc4:	mov	r2, r4
   1adc8:	mov	r3, r5
   1adcc:	mov	r0, r6
   1add0:	mov	r1, r7
   1add4:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   1add8:	mov	r6, r0
   1addc:	mov	r7, r1
   1ade0:	orrs	r3, r6, r7
   1ade4:	bne	1ada8 <__assert_fail@plt+0x9204>
   1ade8:	mov	r7, r8
   1adec:	mov	r6, fp
   1adf0:	ldr	r8, [sp, #28]
   1adf4:	ldr	r5, [sp, #32]
   1adf8:	b	1aa20 <__assert_fail@plt+0x8e7c>
   1adfc:	sub	r4, r5, r6
   1ae00:	ldr	r0, [sp, #12]
   1ae04:	bl	11988 <strlen@plt>
   1ae08:	mov	fp, r0
   1ae0c:	mov	r3, #41	; 0x29
   1ae10:	mov	r2, r4
   1ae14:	mov	r1, r6
   1ae18:	add	r0, sp, #76	; 0x4c
   1ae1c:	bl	1185c <__memcpy_chk@plt>
   1ae20:	mov	r6, r5
   1ae24:	mvn	r5, #0
   1ae28:	b	1ae6c <__assert_fail@plt+0x92c8>
   1ae2c:	cmp	r5, r4
   1ae30:	movcs	r5, r4
   1ae34:	sub	r6, r6, r5
   1ae38:	sub	r4, r4, r5
   1ae3c:	mov	r2, r5
   1ae40:	add	r3, sp, #76	; 0x4c
   1ae44:	add	r1, r3, r4
   1ae48:	mov	r0, r6
   1ae4c:	bl	11784 <memcpy@plt>
   1ae50:	cmp	r4, #0
   1ae54:	beq	1aa28 <__assert_fail@plt+0x8e84>
   1ae58:	sub	r6, r6, fp
   1ae5c:	mov	r2, fp
   1ae60:	ldr	r1, [sp, #12]
   1ae64:	mov	r0, r6
   1ae68:	bl	11784 <memcpy@plt>
   1ae6c:	ldrb	r3, [r9]
   1ae70:	cmp	r3, #0
   1ae74:	beq	1ae2c <__assert_fail@plt+0x9288>
   1ae78:	cmp	r3, #255	; 0xff
   1ae7c:	movne	r5, r3
   1ae80:	moveq	r5, r4
   1ae84:	add	r9, r9, #1
   1ae88:	b	1ae2c <__assert_fail@plt+0x9288>
   1ae8c:	ldrd	r2, [sp, #184]	; 0xb8
   1ae90:	cmp	r3, #0
   1ae94:	cmpeq	r2, #1
   1ae98:	bls	1af48 <__assert_fail@plt+0x93a4>
   1ae9c:	mov	r7, #1
   1aea0:	mov	r2, #1
   1aea4:	mov	r3, #0
   1aea8:	ldr	r1, [sp, #44]	; 0x2c
   1aeac:	ldrd	r4, [sp, #184]	; 0xb8
   1aeb0:	mul	r0, r1, r3
   1aeb4:	umull	r2, r3, r2, r1
   1aeb8:	add	r3, r0, r3
   1aebc:	cmp	r5, r3
   1aec0:	cmpeq	r4, r2
   1aec4:	bls	1aa38 <__assert_fail@plt+0x8e94>
   1aec8:	add	r7, r7, #1
   1aecc:	cmp	r7, #8
   1aed0:	bne	1aeb0 <__assert_fail@plt+0x930c>
   1aed4:	and	r3, r8, #256	; 0x100
   1aed8:	tst	r8, #64	; 0x40
   1aedc:	bne	1aa4c <__assert_fail@plt+0x8ea8>
   1aee0:	add	r2, sl, #1
   1aee4:	ldr	r1, [sp, #40]	; 0x28
   1aee8:	cmp	r1, #0
   1aeec:	cmpeq	r7, #1
   1aef0:	ldrne	r1, [pc, #-864]	; 1ab98 <__assert_fail@plt+0x8ff4>
   1aef4:	ldrbne	r1, [r1, r7]
   1aef8:	moveq	r1, #107	; 0x6b
   1aefc:	strb	r1, [sl]
   1af00:	cmp	r3, #0
   1af04:	beq	1af40 <__assert_fail@plt+0x939c>
   1af08:	ldr	r3, [sp, #40]	; 0x28
   1af0c:	cmp	r3, #0
   1af10:	addne	r2, sl, #2
   1af14:	movne	r3, #105	; 0x69
   1af18:	strbne	r3, [sl, #1]
   1af1c:	add	sl, r2, #1
   1af20:	mov	r3, #66	; 0x42
   1af24:	strb	r3, [r2]
   1af28:	mov	r3, #0
   1af2c:	strb	r3, [sl]
   1af30:	mov	r0, r6
   1af34:	add	sp, sp, #124	; 0x7c
   1af38:	vpop	{d8-d9}
   1af3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af40:	mov	sl, r2
   1af44:	b	1af28 <__assert_fail@plt+0x9384>
   1af48:	ands	r3, r8, #256	; 0x100
   1af4c:	movne	r7, #0
   1af50:	bne	1aa44 <__assert_fail@plt+0x8ea0>
   1af54:	b	1aa64 <__assert_fail@plt+0x8ec0>
   1af58:	push	{r4, r5, r6, r7, lr}
   1af5c:	sub	sp, sp, #20
   1af60:	mov	r7, r1
   1af64:	mov	r6, r2
   1af68:	subs	r4, r0, #0
   1af6c:	beq	1afdc <__assert_fail@plt+0x9438>
   1af70:	ldrb	r3, [r4]
   1af74:	cmp	r3, #39	; 0x27
   1af78:	addeq	r4, r4, #1
   1af7c:	moveq	r5, #4
   1af80:	movne	r5, #0
   1af84:	ldr	r1, [pc, #332]	; 1b0d8 <__assert_fail@plt+0x9534>
   1af88:	mov	r3, #4
   1af8c:	add	r2, r1, #12
   1af90:	add	r1, r1, #20
   1af94:	mov	r0, r4
   1af98:	bl	13df0 <__assert_fail@plt+0x224c>
   1af9c:	cmp	r0, #0
   1afa0:	blt	1b020 <__assert_fail@plt+0x947c>
   1afa4:	ldr	r3, [pc, #300]	; 1b0d8 <__assert_fail@plt+0x9534>
   1afa8:	add	r0, r3, r0, lsl #2
   1afac:	ldr	r3, [r0, #12]
   1afb0:	orr	r5, r5, r3
   1afb4:	mov	r2, #1
   1afb8:	mov	r3, #0
   1afbc:	strd	r2, [r6]
   1afc0:	str	r5, [r7]
   1afc4:	mov	r0, #0
   1afc8:	ldrd	r2, [r6]
   1afcc:	orrs	r3, r2, r3
   1afd0:	beq	1b0b4 <__assert_fail@plt+0x9510>
   1afd4:	add	sp, sp, #20
   1afd8:	pop	{r4, r5, r6, r7, pc}
   1afdc:	ldr	r0, [pc, #248]	; 1b0dc <__assert_fail@plt+0x9538>
   1afe0:	bl	118ec <getenv@plt>
   1afe4:	subs	r4, r0, #0
   1afe8:	bne	1af70 <__assert_fail@plt+0x93cc>
   1afec:	ldr	r0, [pc, #236]	; 1b0e0 <__assert_fail@plt+0x953c>
   1aff0:	bl	118ec <getenv@plt>
   1aff4:	subs	r4, r0, #0
   1aff8:	bne	1af70 <__assert_fail@plt+0x93cc>
   1affc:	ldr	r0, [pc, #224]	; 1b0e4 <__assert_fail@plt+0x9540>
   1b000:	bl	118ec <getenv@plt>
   1b004:	cmp	r0, #0
   1b008:	moveq	r2, #1024	; 0x400
   1b00c:	movne	r2, #512	; 0x200
   1b010:	mov	r3, #0
   1b014:	strd	r2, [r6]
   1b018:	mov	r5, #0
   1b01c:	b	1afc0 <__assert_fail@plt+0x941c>
   1b020:	ldr	r3, [pc, #192]	; 1b0e8 <__assert_fail@plt+0x9544>
   1b024:	str	r3, [sp]
   1b028:	mov	r3, r6
   1b02c:	mov	r2, #0
   1b030:	add	r1, sp, #12
   1b034:	mov	r0, r4
   1b038:	bl	2cf34 <__assert_fail@plt+0x1b390>
   1b03c:	cmp	r0, #0
   1b040:	movne	r3, #0
   1b044:	strne	r3, [r7]
   1b048:	bne	1afc8 <__assert_fail@plt+0x9424>
   1b04c:	ldrb	r3, [r4]
   1b050:	sub	r3, r3, #48	; 0x30
   1b054:	uxtb	r3, r3
   1b058:	cmp	r3, #9
   1b05c:	bls	1afc0 <__assert_fail@plt+0x941c>
   1b060:	ldr	r2, [sp, #12]
   1b064:	cmp	r4, r2
   1b068:	beq	1b088 <__assert_fail@plt+0x94e4>
   1b06c:	ldrb	r3, [r4, #1]!
   1b070:	sub	r3, r3, #48	; 0x30
   1b074:	uxtb	r3, r3
   1b078:	cmp	r3, #9
   1b07c:	bls	1afc0 <__assert_fail@plt+0x941c>
   1b080:	cmp	r4, r2
   1b084:	bne	1b06c <__assert_fail@plt+0x94c8>
   1b088:	ldrb	r3, [r2, #-1]
   1b08c:	cmp	r3, #66	; 0x42
   1b090:	orrne	r5, r5, #128	; 0x80
   1b094:	beq	1b0a0 <__assert_fail@plt+0x94fc>
   1b098:	orr	r5, r5, #32
   1b09c:	b	1afc0 <__assert_fail@plt+0x941c>
   1b0a0:	orr	r5, r5, #384	; 0x180
   1b0a4:	ldrb	r3, [r2, #-2]
   1b0a8:	cmp	r3, #105	; 0x69
   1b0ac:	bne	1afc0 <__assert_fail@plt+0x941c>
   1b0b0:	b	1b098 <__assert_fail@plt+0x94f4>
   1b0b4:	ldr	r0, [pc, #40]	; 1b0e4 <__assert_fail@plt+0x9540>
   1b0b8:	bl	118ec <getenv@plt>
   1b0bc:	cmp	r0, #0
   1b0c0:	moveq	r2, #1024	; 0x400
   1b0c4:	movne	r2, #512	; 0x200
   1b0c8:	mov	r3, #0
   1b0cc:	strd	r2, [r6]
   1b0d0:	mov	r0, #4
   1b0d4:	b	1afd4 <__assert_fail@plt+0x9430>
   1b0d8:	andeq	r0, r3, r8, lsr #15
   1b0dc:	ldrdeq	r0, [r3], -r8
   1b0e0:	andeq	r0, r3, r4, ror #15
   1b0e4:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1b0e8:	andeq	r0, r3, r0, lsl #16
   1b0ec:	mov	r3, #1
   1b0f0:	strb	r3, [r0, #28]
   1b0f4:	mov	r3, #0
   1b0f8:	str	r3, [r0, #20]
   1b0fc:	str	r3, [r0, #24]
   1b100:	str	r1, [r0]
   1b104:	str	r1, [r0, #4]
   1b108:	str	r1, [r0, #8]
   1b10c:	str	r1, [r0, #12]
   1b110:	str	r1, [r0, #16]
   1b114:	bx	lr
   1b118:	ldrb	r0, [r0, #28]
   1b11c:	bx	lr
   1b120:	mov	r2, r0
   1b124:	ldrb	ip, [r0, #28]
   1b128:	eor	ip, ip, #1
   1b12c:	ldr	r3, [r0, #20]
   1b130:	add	r3, ip, r3
   1b134:	and	r3, r3, #3
   1b138:	ldr	r0, [r0, r3, lsl #2]
   1b13c:	str	r1, [r2, r3, lsl #2]
   1b140:	str	r3, [r2, #20]
   1b144:	ldr	r1, [r2, #24]
   1b148:	cmp	r3, r1
   1b14c:	addeq	r3, ip, r3
   1b150:	andeq	r3, r3, #3
   1b154:	streq	r3, [r2, #24]
   1b158:	mov	r3, #0
   1b15c:	strb	r3, [r2, #28]
   1b160:	bx	lr
   1b164:	ldrb	r3, [r0, #28]
   1b168:	cmp	r3, #0
   1b16c:	bne	1b1a4 <__assert_fail@plt+0x9600>
   1b170:	mov	r2, r0
   1b174:	ldr	r3, [r0, #20]
   1b178:	ldr	r0, [r0, r3, lsl #2]
   1b17c:	ldr	r1, [r2, #16]
   1b180:	str	r1, [r2, r3, lsl #2]
   1b184:	ldr	r1, [r2, #24]
   1b188:	cmp	r3, r1
   1b18c:	moveq	r3, #1
   1b190:	strbeq	r3, [r2, #28]
   1b194:	addne	r3, r3, #3
   1b198:	andne	r3, r3, #3
   1b19c:	strne	r3, [r2, #20]
   1b1a0:	bx	lr
   1b1a4:	push	{r4, lr}
   1b1a8:	bl	11b68 <abort@plt>
   1b1ac:	push	{r4, lr}
   1b1b0:	ldr	r2, [r0]
   1b1b4:	ldr	r0, [r0, #4]
   1b1b8:	eor	r0, r0, r2
   1b1bc:	bl	2e4e4 <__assert_fail@plt+0x1c940>
   1b1c0:	mov	r0, r1
   1b1c4:	pop	{r4, pc}
   1b1c8:	push	{r4, r5}
   1b1cc:	ldrd	r4, [r0]
   1b1d0:	ldrd	r2, [r1]
   1b1d4:	cmp	r5, r3
   1b1d8:	cmpeq	r4, r2
   1b1dc:	moveq	r0, #1
   1b1e0:	movne	r0, #0
   1b1e4:	pop	{r4, r5}
   1b1e8:	bx	lr
   1b1ec:	push	{r4, r5, lr}
   1b1f0:	sub	sp, sp, #12
   1b1f4:	mov	r5, r0
   1b1f8:	mov	r0, #12
   1b1fc:	bl	2d404 <__assert_fail@plt+0x1b860>
   1b200:	subs	r4, r0, #0
   1b204:	beq	1b23c <__assert_fail@plt+0x9698>
   1b208:	ldr	r3, [pc, #72]	; 1b258 <__assert_fail@plt+0x96b4>
   1b20c:	str	r3, [sp]
   1b210:	ldr	r3, [pc, #68]	; 1b25c <__assert_fail@plt+0x96b8>
   1b214:	ldr	r2, [pc, #68]	; 1b260 <__assert_fail@plt+0x96bc>
   1b218:	mov	r1, #0
   1b21c:	ldr	r0, [pc, #64]	; 1b264 <__assert_fail@plt+0x96c0>
   1b220:	bl	19fa8 <__assert_fail@plt+0x8404>
   1b224:	str	r0, [r4]
   1b228:	cmp	r0, #0
   1b22c:	strne	r5, [r4, #4]
   1b230:	movne	r3, #0
   1b234:	strne	r3, [r4, #8]
   1b238:	beq	1b248 <__assert_fail@plt+0x96a4>
   1b23c:	mov	r0, r4
   1b240:	add	sp, sp, #12
   1b244:	pop	{r4, r5, pc}
   1b248:	mov	r0, r4
   1b24c:	bl	17204 <__assert_fail@plt+0x5660>
   1b250:	mov	r4, #0
   1b254:	b	1b23c <__assert_fail@plt+0x9698>
   1b258:	andeq	r7, r1, r4, lsl #4
   1b25c:	andeq	fp, r1, r8, asr #3
   1b260:	andeq	fp, r1, ip, lsr #3
   1b264:	strdeq	r0, [r0], -sp
   1b268:	push	{r4, lr}
   1b26c:	mov	r4, r0
   1b270:	ldr	r0, [r0]
   1b274:	bl	1a138 <__assert_fail@plt+0x8594>
   1b278:	ldr	r0, [r4, #8]
   1b27c:	bl	17204 <__assert_fail@plt+0x5660>
   1b280:	mov	r0, r4
   1b284:	bl	17204 <__assert_fail@plt+0x5660>
   1b288:	pop	{r4, pc}
   1b28c:	push	{r4, r5, r6, r7, r8, lr}
   1b290:	mov	r5, r0
   1b294:	mov	r6, r2
   1b298:	mov	r7, r3
   1b29c:	ldr	r4, [r0, #8]
   1b2a0:	cmp	r4, #0
   1b2a4:	beq	1b300 <__assert_fail@plt+0x975c>
   1b2a8:	ldrd	r2, [r4]
   1b2ac:	cmp	r3, r7
   1b2b0:	cmpeq	r2, r6
   1b2b4:	beq	1b2f8 <__assert_fail@plt+0x9754>
   1b2b8:	strd	r6, [r4]
   1b2bc:	mov	r1, r4
   1b2c0:	ldr	r0, [r5]
   1b2c4:	bl	1a4f4 <__assert_fail@plt+0x8950>
   1b2c8:	cmp	r0, #0
   1b2cc:	beq	1b320 <__assert_fail@plt+0x977c>
   1b2d0:	cmp	r4, r0
   1b2d4:	ldrne	r3, [r0, #8]
   1b2d8:	moveq	r3, #0
   1b2dc:	streq	r3, [r5, #8]
   1b2e0:	ldreq	r3, [r5, #4]
   1b2e4:	addeq	r2, r3, #1
   1b2e8:	streq	r2, [r5, #4]
   1b2ec:	str	r3, [r4, #8]
   1b2f0:	ldr	r0, [r4, #8]
   1b2f4:	pop	{r4, r5, r6, r7, r8, pc}
   1b2f8:	ldr	r0, [r4, #8]
   1b2fc:	pop	{r4, r5, r6, r7, r8, pc}
   1b300:	mov	r0, #16
   1b304:	bl	2d404 <__assert_fail@plt+0x1b860>
   1b308:	mov	r4, r0
   1b30c:	str	r0, [r5, #8]
   1b310:	cmp	r0, #0
   1b314:	bne	1b2b8 <__assert_fail@plt+0x9714>
   1b318:	mvn	r0, #0
   1b31c:	pop	{r4, r5, r6, r7, r8, pc}
   1b320:	mvn	r0, #0
   1b324:	pop	{r4, r5, r6, r7, r8, pc}
   1b328:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b32c:	mov	r4, r0
   1b330:	mov	r5, r1
   1b334:	add	r6, r2, #20
   1b338:	mov	r3, #0
   1b33c:	strb	r3, [r2, #20]
   1b340:	cmp	r0, #0
   1b344:	sbcs	r3, r1, #0
   1b348:	movlt	r8, #10
   1b34c:	movlt	r9, #0
   1b350:	blt	1b3a8 <__assert_fail@plt+0x9804>
   1b354:	mov	r8, #10
   1b358:	mov	r9, #0
   1b35c:	mov	r2, r8
   1b360:	mov	r3, r9
   1b364:	mov	r0, r4
   1b368:	mov	r1, r5
   1b36c:	bl	2eafc <__assert_fail@plt+0x1cf58>
   1b370:	add	r2, r2, #48	; 0x30
   1b374:	strb	r2, [r6, #-1]!
   1b378:	mov	r2, r8
   1b37c:	mov	r3, r9
   1b380:	mov	r0, r4
   1b384:	mov	r1, r5
   1b388:	bl	2eafc <__assert_fail@plt+0x1cf58>
   1b38c:	mov	r4, r0
   1b390:	mov	r5, r1
   1b394:	orrs	r3, r4, r5
   1b398:	bne	1b35c <__assert_fail@plt+0x97b8>
   1b39c:	mov	r0, r6
   1b3a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b3a4:	mov	r6, r7
   1b3a8:	sub	r7, r6, #1
   1b3ac:	mov	r2, r8
   1b3b0:	mov	r3, r9
   1b3b4:	mov	r0, r4
   1b3b8:	mov	r1, r5
   1b3bc:	bl	2eafc <__assert_fail@plt+0x1cf58>
   1b3c0:	rsb	r2, r2, #48	; 0x30
   1b3c4:	strb	r2, [r6, #-1]
   1b3c8:	mov	r2, r8
   1b3cc:	mov	r3, r9
   1b3d0:	mov	r0, r4
   1b3d4:	mov	r1, r5
   1b3d8:	bl	2eafc <__assert_fail@plt+0x1cf58>
   1b3dc:	mov	r4, r0
   1b3e0:	mov	r5, r1
   1b3e4:	orrs	r3, r4, r5
   1b3e8:	bne	1b3a4 <__assert_fail@plt+0x9800>
   1b3ec:	sub	r6, r6, #2
   1b3f0:	mov	r3, #45	; 0x2d
   1b3f4:	strb	r3, [r7, #-1]
   1b3f8:	b	1b39c <__assert_fail@plt+0x97f8>
   1b3fc:	push	{r4, lr}
   1b400:	mov	r4, r0
   1b404:	bl	1173c <wcwidth@plt>
   1b408:	cmp	r0, #0
   1b40c:	popge	{r4, pc}
   1b410:	mov	r0, r4
   1b414:	bl	11814 <iswcntrl@plt>
   1b418:	clz	r0, r0
   1b41c:	lsr	r0, r0, #5
   1b420:	pop	{r4, pc}
   1b424:	push	{r4, r5, r6, lr}
   1b428:	mov	r5, r0
   1b42c:	mov	r4, r1
   1b430:	mov	r3, r1
   1b434:	ldr	r1, [r3], #16
   1b438:	cmp	r1, r3
   1b43c:	strne	r1, [r0]
   1b440:	beq	1b464 <__assert_fail@plt+0x98c0>
   1b444:	ldr	r3, [r4, #4]
   1b448:	str	r3, [r5, #4]
   1b44c:	ldrb	r3, [r4, #8]
   1b450:	strb	r3, [r5, #8]
   1b454:	cmp	r3, #0
   1b458:	ldrne	r3, [r4, #12]
   1b45c:	strne	r3, [r5, #12]
   1b460:	pop	{r4, r5, r6, pc}
   1b464:	add	r6, r0, #16
   1b468:	ldr	r2, [r4, #4]
   1b46c:	mov	r0, r6
   1b470:	bl	11784 <memcpy@plt>
   1b474:	str	r6, [r5]
   1b478:	b	1b444 <__assert_fail@plt+0x98a0>
   1b47c:	lsr	r2, r0, #5
   1b480:	and	r0, r0, #31
   1b484:	ldr	r3, [pc, #12]	; 1b498 <__assert_fail@plt+0x98f4>
   1b488:	ldr	r3, [r3, r2, lsl #2]
   1b48c:	lsr	r0, r3, r0
   1b490:	and	r0, r0, #1
   1b494:	bx	lr
   1b498:	andeq	r0, r3, r4, lsl r8
   1b49c:	push	{r4, r5, r6, r7, lr}
   1b4a0:	sub	sp, sp, #12
   1b4a4:	mov	r7, r1
   1b4a8:	mov	r5, r2
   1b4ac:	subs	r6, r0, #0
   1b4b0:	addeq	r6, sp, #4
   1b4b4:	mov	r0, r6
   1b4b8:	bl	118b0 <mbrtowc@plt>
   1b4bc:	mov	r4, r0
   1b4c0:	cmp	r5, #0
   1b4c4:	cmnne	r0, #3
   1b4c8:	bhi	1b4d8 <__assert_fail@plt+0x9934>
   1b4cc:	mov	r0, r4
   1b4d0:	add	sp, sp, #12
   1b4d4:	pop	{r4, r5, r6, r7, pc}
   1b4d8:	mov	r0, #0
   1b4dc:	bl	2e15c <__assert_fail@plt+0x1c5b8>
   1b4e0:	cmp	r0, #0
   1b4e4:	ldrbeq	r3, [r7]
   1b4e8:	streq	r3, [r6]
   1b4ec:	moveq	r4, #1
   1b4f0:	b	1b4cc <__assert_fail@plt+0x9928>
   1b4f4:	cmp	r0, r1
   1b4f8:	beq	1bbe8 <__assert_fail@plt+0xa044>
   1b4fc:	push	{r4, r5, r6, r7, r8, lr}
   1b500:	sub	sp, sp, #112	; 0x70
   1b504:	mov	r6, r1
   1b508:	mov	r7, r0
   1b50c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b510:	cmp	r0, #1
   1b514:	bls	1bb78 <__assert_fail@plt+0x9fd4>
   1b518:	str	r7, [sp, #16]
   1b51c:	mov	r3, #0
   1b520:	strb	r3, [sp]
   1b524:	str	r3, [sp, #4]
   1b528:	str	r3, [sp, #8]
   1b52c:	strb	r3, [sp, #12]
   1b530:	str	r6, [sp, #72]	; 0x48
   1b534:	strb	r3, [sp, #56]	; 0x38
   1b538:	str	r3, [sp, #60]	; 0x3c
   1b53c:	str	r3, [sp, #64]	; 0x40
   1b540:	strb	r3, [sp, #68]	; 0x44
   1b544:	mov	r5, #1
   1b548:	mov	r6, r3
   1b54c:	ldr	r7, [pc, #1712]	; 1bc04 <__assert_fail@plt+0xa060>
   1b550:	b	1b894 <__assert_fail@plt+0x9cf0>
   1b554:	ldr	r1, [sp, #72]	; 0x48
   1b558:	ldr	r0, [sp, #16]
   1b55c:	bl	117c0 <memcmp@plt>
   1b560:	b	1b864 <__assert_fail@plt+0x9cc0>
   1b564:	mov	r2, r3
   1b568:	ldr	r1, [sp, #72]	; 0x48
   1b56c:	ldr	r0, [sp, #16]
   1b570:	bl	117c0 <memcmp@plt>
   1b574:	cmp	r0, #0
   1b578:	movge	r0, #1
   1b57c:	mvnlt	r0, #0
   1b580:	b	1bbfc <__assert_fail@plt+0xa058>
   1b584:	add	r0, sp, #4
   1b588:	bl	117b4 <mbsinit@plt>
   1b58c:	cmp	r0, #0
   1b590:	beq	1b61c <__assert_fail@plt+0x9a78>
   1b594:	strb	r5, [sp]
   1b598:	ldr	r4, [sp, #16]
   1b59c:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b5a0:	mov	r1, r0
   1b5a4:	mov	r0, r4
   1b5a8:	bl	2b668 <__assert_fail@plt+0x19ac4>
   1b5ac:	add	r3, sp, #4
   1b5b0:	mov	r2, r0
   1b5b4:	mov	r1, r4
   1b5b8:	add	r0, sp, #28
   1b5bc:	bl	1b49c <__assert_fail@plt+0x98f8>
   1b5c0:	str	r0, [sp, #20]
   1b5c4:	cmn	r0, #1
   1b5c8:	streq	r5, [sp, #20]
   1b5cc:	strbeq	r6, [sp, #24]
   1b5d0:	beq	1b8dc <__assert_fail@plt+0x9d38>
   1b5d4:	cmn	r0, #2
   1b5d8:	beq	1b630 <__assert_fail@plt+0x9a8c>
   1b5dc:	cmp	r0, #0
   1b5e0:	bne	1b604 <__assert_fail@plt+0x9a60>
   1b5e4:	str	r5, [sp, #20]
   1b5e8:	ldr	r3, [sp, #16]
   1b5ec:	ldrb	r3, [r3]
   1b5f0:	cmp	r3, #0
   1b5f4:	bne	1b644 <__assert_fail@plt+0x9aa0>
   1b5f8:	ldr	r3, [sp, #28]
   1b5fc:	cmp	r3, #0
   1b600:	bne	1b658 <__assert_fail@plt+0x9ab4>
   1b604:	strb	r5, [sp, #24]
   1b608:	add	r0, sp, #4
   1b60c:	bl	117b4 <mbsinit@plt>
   1b610:	cmp	r0, #0
   1b614:	strbne	r6, [sp]
   1b618:	b	1b8dc <__assert_fail@plt+0x9d38>
   1b61c:	ldr	r3, [pc, #1508]	; 1bc08 <__assert_fail@plt+0xa064>
   1b620:	mov	r2, #143	; 0x8f
   1b624:	ldr	r1, [pc, #1504]	; 1bc0c <__assert_fail@plt+0xa068>
   1b628:	ldr	r0, [pc, #1504]	; 1bc10 <__assert_fail@plt+0xa06c>
   1b62c:	bl	11ba4 <__assert_fail@plt>
   1b630:	ldr	r0, [sp, #16]
   1b634:	bl	11988 <strlen@plt>
   1b638:	str	r0, [sp, #20]
   1b63c:	strb	r6, [sp, #24]
   1b640:	b	1b8dc <__assert_fail@plt+0x9d38>
   1b644:	ldr	r3, [pc, #1468]	; 1bc08 <__assert_fail@plt+0xa064>
   1b648:	mov	r2, #171	; 0xab
   1b64c:	ldr	r1, [pc, #1464]	; 1bc0c <__assert_fail@plt+0xa068>
   1b650:	ldr	r0, [pc, #1468]	; 1bc14 <__assert_fail@plt+0xa070>
   1b654:	bl	11ba4 <__assert_fail@plt>
   1b658:	ldr	r3, [pc, #1448]	; 1bc08 <__assert_fail@plt+0xa064>
   1b65c:	mov	r2, #172	; 0xac
   1b660:	ldr	r1, [pc, #1444]	; 1bc0c <__assert_fail@plt+0xa068>
   1b664:	ldr	r0, [pc, #1452]	; 1bc18 <__assert_fail@plt+0xa074>
   1b668:	bl	11ba4 <__assert_fail@plt>
   1b66c:	ldr	r3, [sp, #28]
   1b670:	cmp	r3, #0
   1b674:	bne	1b8ec <__assert_fail@plt+0x9d48>
   1b678:	ldrb	r3, [sp, #12]
   1b67c:	cmp	r3, #0
   1b680:	bne	1b6e0 <__assert_fail@plt+0x9b3c>
   1b684:	ldrb	r3, [sp]
   1b688:	cmp	r3, #0
   1b68c:	bne	1b9b4 <__assert_fail@plt+0x9e10>
   1b690:	ldr	r1, [sp, #16]
   1b694:	ldrb	r3, [r1]
   1b698:	lsr	r0, r3, #5
   1b69c:	and	r3, r3, #31
   1b6a0:	ldr	r2, [pc, #1372]	; 1bc04 <__assert_fail@plt+0xa060>
   1b6a4:	ldr	r2, [r2, r0, lsl #2]
   1b6a8:	lsr	r3, r2, r3
   1b6ac:	tst	r3, #1
   1b6b0:	beq	1b99c <__assert_fail@plt+0x9df8>
   1b6b4:	mov	r3, #1
   1b6b8:	str	r3, [sp, #20]
   1b6bc:	ldrb	r2, [r1]
   1b6c0:	str	r2, [sp, #28]
   1b6c4:	strb	r3, [sp, #24]
   1b6c8:	mov	r3, #1
   1b6cc:	strb	r3, [sp, #12]
   1b6d0:	ldrb	r3, [sp, #24]
   1b6d4:	cmp	r3, #0
   1b6d8:	moveq	r0, #1
   1b6dc:	beq	1bbfc <__assert_fail@plt+0xa058>
   1b6e0:	ldr	r3, [sp, #28]
   1b6e4:	cmp	r3, #0
   1b6e8:	bne	1bb70 <__assert_fail@plt+0x9fcc>
   1b6ec:	ldrb	r0, [sp, #68]	; 0x44
   1b6f0:	cmp	r0, #0
   1b6f4:	bne	1bb58 <__assert_fail@plt+0x9fb4>
   1b6f8:	ldrb	r3, [sp, #56]	; 0x38
   1b6fc:	cmp	r3, #0
   1b700:	bne	1babc <__assert_fail@plt+0x9f18>
   1b704:	ldr	r1, [sp, #72]	; 0x48
   1b708:	ldrb	r3, [r1]
   1b70c:	lsr	r0, r3, #5
   1b710:	and	r3, r3, #31
   1b714:	ldr	r2, [pc, #1256]	; 1bc04 <__assert_fail@plt+0xa060>
   1b718:	ldr	r2, [r2, r0, lsl #2]
   1b71c:	lsr	r3, r2, r3
   1b720:	tst	r3, #1
   1b724:	beq	1baa4 <__assert_fail@plt+0x9f00>
   1b728:	mov	r3, #1
   1b72c:	str	r3, [sp, #76]	; 0x4c
   1b730:	ldrb	r3, [r1]
   1b734:	str	r3, [sp, #84]	; 0x54
   1b738:	ldr	r0, [sp, #84]	; 0x54
   1b73c:	adds	r0, r0, #0
   1b740:	movne	r0, #1
   1b744:	rsb	r0, r0, #0
   1b748:	b	1bbfc <__assert_fail@plt+0xa058>
   1b74c:	add	r0, sp, #60	; 0x3c
   1b750:	bl	117b4 <mbsinit@plt>
   1b754:	cmp	r0, #0
   1b758:	beq	1b7e4 <__assert_fail@plt+0x9c40>
   1b75c:	strb	r5, [sp, #56]	; 0x38
   1b760:	ldr	r4, [sp, #72]	; 0x48
   1b764:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b768:	mov	r1, r0
   1b76c:	mov	r0, r4
   1b770:	bl	2b668 <__assert_fail@plt+0x19ac4>
   1b774:	add	r3, sp, #60	; 0x3c
   1b778:	mov	r2, r0
   1b77c:	mov	r1, r4
   1b780:	add	r0, sp, #84	; 0x54
   1b784:	bl	1b49c <__assert_fail@plt+0x98f8>
   1b788:	str	r0, [sp, #76]	; 0x4c
   1b78c:	cmn	r0, #1
   1b790:	streq	r5, [sp, #76]	; 0x4c
   1b794:	strbeq	r6, [sp, #80]	; 0x50
   1b798:	beq	1b934 <__assert_fail@plt+0x9d90>
   1b79c:	cmn	r0, #2
   1b7a0:	beq	1b7f8 <__assert_fail@plt+0x9c54>
   1b7a4:	cmp	r0, #0
   1b7a8:	bne	1b7cc <__assert_fail@plt+0x9c28>
   1b7ac:	str	r5, [sp, #76]	; 0x4c
   1b7b0:	ldr	r3, [sp, #72]	; 0x48
   1b7b4:	ldrb	r3, [r3]
   1b7b8:	cmp	r3, #0
   1b7bc:	bne	1b80c <__assert_fail@plt+0x9c68>
   1b7c0:	ldr	r3, [sp, #84]	; 0x54
   1b7c4:	cmp	r3, #0
   1b7c8:	bne	1b820 <__assert_fail@plt+0x9c7c>
   1b7cc:	strb	r5, [sp, #80]	; 0x50
   1b7d0:	add	r0, sp, #60	; 0x3c
   1b7d4:	bl	117b4 <mbsinit@plt>
   1b7d8:	cmp	r0, #0
   1b7dc:	strbne	r6, [sp, #56]	; 0x38
   1b7e0:	b	1b934 <__assert_fail@plt+0x9d90>
   1b7e4:	ldr	r3, [pc, #1052]	; 1bc08 <__assert_fail@plt+0xa064>
   1b7e8:	mov	r2, #143	; 0x8f
   1b7ec:	ldr	r1, [pc, #1048]	; 1bc0c <__assert_fail@plt+0xa068>
   1b7f0:	ldr	r0, [pc, #1048]	; 1bc10 <__assert_fail@plt+0xa06c>
   1b7f4:	bl	11ba4 <__assert_fail@plt>
   1b7f8:	ldr	r0, [sp, #72]	; 0x48
   1b7fc:	bl	11988 <strlen@plt>
   1b800:	str	r0, [sp, #76]	; 0x4c
   1b804:	strb	r6, [sp, #80]	; 0x50
   1b808:	b	1b934 <__assert_fail@plt+0x9d90>
   1b80c:	ldr	r3, [pc, #1012]	; 1bc08 <__assert_fail@plt+0xa064>
   1b810:	mov	r2, #171	; 0xab
   1b814:	ldr	r1, [pc, #1008]	; 1bc0c <__assert_fail@plt+0xa068>
   1b818:	ldr	r0, [pc, #1012]	; 1bc14 <__assert_fail@plt+0xa070>
   1b81c:	bl	11ba4 <__assert_fail@plt>
   1b820:	ldr	r3, [pc, #992]	; 1bc08 <__assert_fail@plt+0xa064>
   1b824:	mov	r2, #172	; 0xac
   1b828:	ldr	r1, [pc, #988]	; 1bc0c <__assert_fail@plt+0xa068>
   1b82c:	ldr	r0, [pc, #996]	; 1bc18 <__assert_fail@plt+0xa074>
   1b830:	bl	11ba4 <__assert_fail@plt>
   1b834:	ldr	r2, [sp, #84]	; 0x54
   1b838:	cmp	r2, #0
   1b83c:	beq	1b98c <__assert_fail@plt+0x9de8>
   1b840:	ldrb	r2, [sp, #24]
   1b844:	cmp	r2, #0
   1b848:	beq	1b950 <__assert_fail@plt+0x9dac>
   1b84c:	ldr	r0, [sp, #28]
   1b850:	bl	117a8 <towlower@plt>
   1b854:	mov	r4, r0
   1b858:	ldr	r0, [sp, #84]	; 0x54
   1b85c:	bl	117a8 <towlower@plt>
   1b860:	sub	r0, r4, r0
   1b864:	cmp	r0, #0
   1b868:	bne	1bbfc <__assert_fail@plt+0xa058>
   1b86c:	ldr	r2, [sp, #20]
   1b870:	ldr	r3, [sp, #16]
   1b874:	add	r3, r3, r2
   1b878:	str	r3, [sp, #16]
   1b87c:	strb	r6, [sp, #12]
   1b880:	ldr	r2, [sp, #76]	; 0x4c
   1b884:	ldr	r3, [sp, #72]	; 0x48
   1b888:	add	r3, r3, r2
   1b88c:	str	r3, [sp, #72]	; 0x48
   1b890:	strb	r6, [sp, #68]	; 0x44
   1b894:	ldrb	r3, [sp, #12]
   1b898:	cmp	r3, #0
   1b89c:	bne	1b8e0 <__assert_fail@plt+0x9d3c>
   1b8a0:	ldrb	r3, [sp]
   1b8a4:	cmp	r3, #0
   1b8a8:	bne	1b598 <__assert_fail@plt+0x99f4>
   1b8ac:	ldr	r1, [sp, #16]
   1b8b0:	ldrb	r3, [r1]
   1b8b4:	lsr	r2, r3, #5
   1b8b8:	and	r3, r3, #31
   1b8bc:	ldr	r2, [r7, r2, lsl #2]
   1b8c0:	lsr	r3, r2, r3
   1b8c4:	tst	r3, #1
   1b8c8:	beq	1b584 <__assert_fail@plt+0x99e0>
   1b8cc:	str	r5, [sp, #20]
   1b8d0:	ldrb	r3, [r1]
   1b8d4:	str	r3, [sp, #28]
   1b8d8:	strb	r5, [sp, #24]
   1b8dc:	strb	r5, [sp, #12]
   1b8e0:	ldrb	r3, [sp, #24]
   1b8e4:	cmp	r3, #0
   1b8e8:	bne	1b66c <__assert_fail@plt+0x9ac8>
   1b8ec:	ldrb	r3, [sp, #68]	; 0x44
   1b8f0:	cmp	r3, #0
   1b8f4:	bne	1b938 <__assert_fail@plt+0x9d94>
   1b8f8:	ldrb	r3, [sp, #56]	; 0x38
   1b8fc:	cmp	r3, #0
   1b900:	bne	1b760 <__assert_fail@plt+0x9bbc>
   1b904:	ldr	r1, [sp, #72]	; 0x48
   1b908:	ldrb	r3, [r1]
   1b90c:	lsr	r2, r3, #5
   1b910:	and	r3, r3, #31
   1b914:	ldr	r2, [r7, r2, lsl #2]
   1b918:	lsr	r3, r2, r3
   1b91c:	tst	r3, #1
   1b920:	beq	1b74c <__assert_fail@plt+0x9ba8>
   1b924:	str	r5, [sp, #76]	; 0x4c
   1b928:	ldrb	r3, [r1]
   1b92c:	str	r3, [sp, #84]	; 0x54
   1b930:	strb	r5, [sp, #80]	; 0x50
   1b934:	strb	r5, [sp, #68]	; 0x44
   1b938:	ldrb	r3, [sp, #80]	; 0x50
   1b93c:	cmp	r3, #0
   1b940:	bne	1b834 <__assert_fail@plt+0x9c90>
   1b944:	ldrb	r2, [sp, #24]
   1b948:	cmp	r2, #0
   1b94c:	bne	1bbf8 <__assert_fail@plt+0xa054>
   1b950:	cmp	r3, #0
   1b954:	bne	1bbf0 <__assert_fail@plt+0xa04c>
   1b958:	ldr	r2, [sp, #20]
   1b95c:	ldr	r3, [sp, #76]	; 0x4c
   1b960:	cmp	r2, r3
   1b964:	beq	1b554 <__assert_fail@plt+0x99b0>
   1b968:	cmp	r2, r3
   1b96c:	bcs	1b564 <__assert_fail@plt+0x99c0>
   1b970:	ldr	r1, [sp, #72]	; 0x48
   1b974:	ldr	r0, [sp, #16]
   1b978:	bl	117c0 <memcmp@plt>
   1b97c:	cmp	r0, #0
   1b980:	movgt	r0, #1
   1b984:	mvnle	r0, #0
   1b988:	b	1bbfc <__assert_fail@plt+0xa058>
   1b98c:	ldrb	r3, [sp, #12]
   1b990:	cmp	r3, #0
   1b994:	bne	1b6d0 <__assert_fail@plt+0x9b2c>
   1b998:	b	1b684 <__assert_fail@plt+0x9ae0>
   1b99c:	add	r0, sp, #4
   1b9a0:	bl	117b4 <mbsinit@plt>
   1b9a4:	cmp	r0, #0
   1b9a8:	movne	r3, #1
   1b9ac:	strbne	r3, [sp]
   1b9b0:	beq	1ba3c <__assert_fail@plt+0x9e98>
   1b9b4:	ldr	r4, [sp, #16]
   1b9b8:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1b9bc:	mov	r1, r0
   1b9c0:	mov	r0, r4
   1b9c4:	bl	2b668 <__assert_fail@plt+0x19ac4>
   1b9c8:	add	r3, sp, #4
   1b9cc:	mov	r2, r0
   1b9d0:	mov	r1, r4
   1b9d4:	add	r0, sp, #28
   1b9d8:	bl	1b49c <__assert_fail@plt+0x98f8>
   1b9dc:	str	r0, [sp, #20]
   1b9e0:	cmn	r0, #1
   1b9e4:	beq	1ba50 <__assert_fail@plt+0x9eac>
   1b9e8:	cmn	r0, #2
   1b9ec:	beq	1ba64 <__assert_fail@plt+0x9ec0>
   1b9f0:	cmp	r0, #0
   1b9f4:	bne	1ba1c <__assert_fail@plt+0x9e78>
   1b9f8:	mov	r3, #1
   1b9fc:	str	r3, [sp, #20]
   1ba00:	ldr	r3, [sp, #16]
   1ba04:	ldrb	r3, [r3]
   1ba08:	cmp	r3, #0
   1ba0c:	bne	1ba7c <__assert_fail@plt+0x9ed8>
   1ba10:	ldr	r3, [sp, #28]
   1ba14:	cmp	r3, #0
   1ba18:	bne	1ba90 <__assert_fail@plt+0x9eec>
   1ba1c:	mov	r3, #1
   1ba20:	strb	r3, [sp, #24]
   1ba24:	add	r0, sp, #4
   1ba28:	bl	117b4 <mbsinit@plt>
   1ba2c:	cmp	r0, #0
   1ba30:	movne	r3, #0
   1ba34:	strbne	r3, [sp]
   1ba38:	b	1b6c8 <__assert_fail@plt+0x9b24>
   1ba3c:	ldr	r3, [pc, #452]	; 1bc08 <__assert_fail@plt+0xa064>
   1ba40:	mov	r2, #143	; 0x8f
   1ba44:	ldr	r1, [pc, #448]	; 1bc0c <__assert_fail@plt+0xa068>
   1ba48:	ldr	r0, [pc, #448]	; 1bc10 <__assert_fail@plt+0xa06c>
   1ba4c:	bl	11ba4 <__assert_fail@plt>
   1ba50:	mov	r3, #1
   1ba54:	str	r3, [sp, #20]
   1ba58:	mov	r3, #0
   1ba5c:	strb	r3, [sp, #24]
   1ba60:	b	1b6c8 <__assert_fail@plt+0x9b24>
   1ba64:	ldr	r0, [sp, #16]
   1ba68:	bl	11988 <strlen@plt>
   1ba6c:	str	r0, [sp, #20]
   1ba70:	mov	r3, #0
   1ba74:	strb	r3, [sp, #24]
   1ba78:	b	1b6c8 <__assert_fail@plt+0x9b24>
   1ba7c:	ldr	r3, [pc, #388]	; 1bc08 <__assert_fail@plt+0xa064>
   1ba80:	mov	r2, #171	; 0xab
   1ba84:	ldr	r1, [pc, #384]	; 1bc0c <__assert_fail@plt+0xa068>
   1ba88:	ldr	r0, [pc, #388]	; 1bc14 <__assert_fail@plt+0xa070>
   1ba8c:	bl	11ba4 <__assert_fail@plt>
   1ba90:	ldr	r3, [pc, #368]	; 1bc08 <__assert_fail@plt+0xa064>
   1ba94:	mov	r2, #172	; 0xac
   1ba98:	ldr	r1, [pc, #364]	; 1bc0c <__assert_fail@plt+0xa068>
   1ba9c:	ldr	r0, [pc, #372]	; 1bc18 <__assert_fail@plt+0xa074>
   1baa0:	bl	11ba4 <__assert_fail@plt>
   1baa4:	add	r0, sp, #60	; 0x3c
   1baa8:	bl	117b4 <mbsinit@plt>
   1baac:	cmp	r0, #0
   1bab0:	movne	r3, #1
   1bab4:	strbne	r3, [sp, #56]	; 0x38
   1bab8:	beq	1bb30 <__assert_fail@plt+0x9f8c>
   1babc:	ldr	r4, [sp, #72]	; 0x48
   1bac0:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1bac4:	mov	r1, r0
   1bac8:	mov	r0, r4
   1bacc:	bl	2b668 <__assert_fail@plt+0x19ac4>
   1bad0:	add	r3, sp, #60	; 0x3c
   1bad4:	mov	r2, r0
   1bad8:	mov	r1, r4
   1badc:	add	r0, sp, #84	; 0x54
   1bae0:	bl	1b49c <__assert_fail@plt+0x98f8>
   1bae4:	add	r3, r0, #2
   1bae8:	cmp	r3, #1
   1baec:	bls	1bb68 <__assert_fail@plt+0x9fc4>
   1baf0:	cmp	r0, #0
   1baf4:	bne	1b738 <__assert_fail@plt+0x9b94>
   1baf8:	mov	r3, #1
   1bafc:	str	r3, [sp, #76]	; 0x4c
   1bb00:	ldr	r3, [sp, #72]	; 0x48
   1bb04:	ldrb	r3, [r3]
   1bb08:	cmp	r3, #0
   1bb0c:	bne	1bb44 <__assert_fail@plt+0x9fa0>
   1bb10:	ldr	r3, [sp, #84]	; 0x54
   1bb14:	cmp	r3, #0
   1bb18:	beq	1b738 <__assert_fail@plt+0x9b94>
   1bb1c:	ldr	r3, [pc, #228]	; 1bc08 <__assert_fail@plt+0xa064>
   1bb20:	mov	r2, #172	; 0xac
   1bb24:	ldr	r1, [pc, #224]	; 1bc0c <__assert_fail@plt+0xa068>
   1bb28:	ldr	r0, [pc, #232]	; 1bc18 <__assert_fail@plt+0xa074>
   1bb2c:	bl	11ba4 <__assert_fail@plt>
   1bb30:	ldr	r3, [pc, #208]	; 1bc08 <__assert_fail@plt+0xa064>
   1bb34:	mov	r2, #143	; 0x8f
   1bb38:	ldr	r1, [pc, #204]	; 1bc0c <__assert_fail@plt+0xa068>
   1bb3c:	ldr	r0, [pc, #204]	; 1bc10 <__assert_fail@plt+0xa06c>
   1bb40:	bl	11ba4 <__assert_fail@plt>
   1bb44:	ldr	r3, [pc, #188]	; 1bc08 <__assert_fail@plt+0xa064>
   1bb48:	mov	r2, #171	; 0xab
   1bb4c:	ldr	r1, [pc, #184]	; 1bc0c <__assert_fail@plt+0xa068>
   1bb50:	ldr	r0, [pc, #188]	; 1bc14 <__assert_fail@plt+0xa070>
   1bb54:	bl	11ba4 <__assert_fail@plt>
   1bb58:	ldrb	r3, [sp, #80]	; 0x50
   1bb5c:	cmp	r3, #0
   1bb60:	beq	1b744 <__assert_fail@plt+0x9ba0>
   1bb64:	b	1b738 <__assert_fail@plt+0x9b94>
   1bb68:	mov	r0, #1
   1bb6c:	b	1b744 <__assert_fail@plt+0x9ba0>
   1bb70:	mov	r0, #1
   1bb74:	b	1bbfc <__assert_fail@plt+0xa058>
   1bb78:	bl	11964 <__ctype_b_loc@plt>
   1bb7c:	ldr	r8, [r0]
   1bb80:	sub	r7, r7, #1
   1bb84:	sub	r6, r6, #1
   1bb88:	b	1bb9c <__assert_fail@plt+0x9ff8>
   1bb8c:	cmp	r4, #0
   1bb90:	beq	1bbe0 <__assert_fail@plt+0xa03c>
   1bb94:	cmp	r4, r5
   1bb98:	bne	1bbe0 <__assert_fail@plt+0xa03c>
   1bb9c:	ldrb	r4, [r7, #1]!
   1bba0:	lsl	r3, r4, #1
   1bba4:	ldrh	r3, [r8, r3]
   1bba8:	tst	r3, #256	; 0x100
   1bbac:	beq	1bbbc <__assert_fail@plt+0xa018>
   1bbb0:	bl	11928 <__ctype_tolower_loc@plt>
   1bbb4:	ldr	r3, [r0]
   1bbb8:	ldrb	r4, [r3, r4, lsl #2]
   1bbbc:	ldrb	r5, [r6, #1]!
   1bbc0:	lsl	r3, r5, #1
   1bbc4:	ldrh	r3, [r8, r3]
   1bbc8:	tst	r3, #256	; 0x100
   1bbcc:	beq	1bb8c <__assert_fail@plt+0x9fe8>
   1bbd0:	bl	11928 <__ctype_tolower_loc@plt>
   1bbd4:	ldr	r3, [r0]
   1bbd8:	ldrb	r5, [r3, r5, lsl #2]
   1bbdc:	b	1bb8c <__assert_fail@plt+0x9fe8>
   1bbe0:	sub	r0, r4, r5
   1bbe4:	b	1bbfc <__assert_fail@plt+0xa058>
   1bbe8:	mov	r0, #0
   1bbec:	bx	lr
   1bbf0:	mov	r0, #1
   1bbf4:	b	1bbfc <__assert_fail@plt+0xa058>
   1bbf8:	mvn	r0, #0
   1bbfc:	add	sp, sp, #112	; 0x70
   1bc00:	pop	{r4, r5, r6, r7, r8, pc}
   1bc04:	andeq	r0, r3, r4, lsl r8
   1bc08:	andeq	r0, r3, r4, lsr r8
   1bc0c:	muleq	r3, ip, r6
   1bc10:	andeq	r0, r3, ip, lsr #13
   1bc14:	andeq	r0, r3, r4, asr #13
   1bc18:	ldrdeq	r0, [r3], -ip
   1bc1c:	andeq	r0, r0, r0
   1bc20:	push	{r4, lr}
   1bc24:	mov	r1, #32
   1bc28:	bl	11994 <strchr@plt>
   1bc2c:	cmp	r0, #0
   1bc30:	movne	r3, #0
   1bc34:	strbne	r3, [r0]
   1bc38:	pop	{r4, pc}
   1bc3c:	push	{r4, r5, r6, lr}
   1bc40:	mov	r4, r0
   1bc44:	bl	11988 <strlen@plt>
   1bc48:	adds	r0, r0, #1
   1bc4c:	popeq	{r4, r5, r6, pc}
   1bc50:	mov	r2, r4
   1bc54:	mov	r3, #0
   1bc58:	b	1bc70 <__assert_fail@plt+0xa0cc>
   1bc5c:	strb	r1, [r2]
   1bc60:	add	r3, r3, #1
   1bc64:	add	r2, r2, #1
   1bc68:	cmp	r0, r3
   1bc6c:	bls	1bce8 <__assert_fail@plt+0xa144>
   1bc70:	ldrb	r1, [r4, r3]
   1bc74:	cmp	r1, #92	; 0x5c
   1bc78:	bne	1bc5c <__assert_fail@plt+0xa0b8>
   1bc7c:	add	ip, r3, #4
   1bc80:	cmp	r0, ip
   1bc84:	bls	1bc5c <__assert_fail@plt+0xa0b8>
   1bc88:	add	ip, r4, r3
   1bc8c:	ldrb	lr, [ip, #1]
   1bc90:	sub	ip, lr, #48	; 0x30
   1bc94:	uxtb	ip, ip
   1bc98:	cmp	ip, #3
   1bc9c:	bhi	1bc5c <__assert_fail@plt+0xa0b8>
   1bca0:	add	ip, r4, r3
   1bca4:	ldrb	r5, [ip, #2]
   1bca8:	sub	ip, r5, #48	; 0x30
   1bcac:	uxtb	ip, ip
   1bcb0:	cmp	ip, #7
   1bcb4:	bhi	1bc5c <__assert_fail@plt+0xa0b8>
   1bcb8:	add	r6, r3, #3
   1bcbc:	ldrb	ip, [r4, r6]
   1bcc0:	sub	ip, ip, #48	; 0x30
   1bcc4:	uxtb	ip, ip
   1bcc8:	cmp	ip, #7
   1bccc:	bhi	1bc5c <__assert_fail@plt+0xa0b8>
   1bcd0:	add	r3, r5, lr, lsl #3
   1bcd4:	sub	r3, r3, #432	; 0x1b0
   1bcd8:	add	r3, ip, r3, lsl #3
   1bcdc:	strb	r3, [r2]
   1bce0:	mov	r3, r6
   1bce4:	b	1bc60 <__assert_fail@plt+0xa0bc>
   1bce8:	pop	{r4, r5, r6, pc}
   1bcec:	push	{r4, lr}
   1bcf0:	mov	r4, r0
   1bcf4:	ldr	r0, [r0]
   1bcf8:	bl	17204 <__assert_fail@plt+0x5660>
   1bcfc:	ldr	r0, [r4, #4]
   1bd00:	bl	17204 <__assert_fail@plt+0x5660>
   1bd04:	ldr	r0, [r4, #8]
   1bd08:	bl	17204 <__assert_fail@plt+0x5660>
   1bd0c:	ldrb	r3, [r4, #24]
   1bd10:	tst	r3, #4
   1bd14:	bne	1bd24 <__assert_fail@plt+0xa180>
   1bd18:	mov	r0, r4
   1bd1c:	bl	17204 <__assert_fail@plt+0x5660>
   1bd20:	pop	{r4, pc}
   1bd24:	ldr	r0, [r4, #12]
   1bd28:	bl	17204 <__assert_fail@plt+0x5660>
   1bd2c:	b	1bd18 <__assert_fail@plt+0xa174>
   1bd30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd34:	sub	sp, sp, #68	; 0x44
   1bd38:	ldr	r1, [pc, #1480]	; 1c308 <__assert_fail@plt+0xa764>
   1bd3c:	ldr	r0, [pc, #1480]	; 1c30c <__assert_fail@plt+0xa768>
   1bd40:	bl	11afc <fopen64@plt>
   1bd44:	subs	r8, r0, #0
   1bd48:	beq	1c2d8 <__assert_fail@plt+0xa734>
   1bd4c:	mov	r3, #0
   1bd50:	str	r3, [sp, #40]	; 0x28
   1bd54:	str	r3, [sp, #44]	; 0x2c
   1bd58:	add	r9, sp, #60	; 0x3c
   1bd5c:	ldr	sl, [pc, #1452]	; 1c310 <__assert_fail@plt+0xa76c>
   1bd60:	ldr	fp, [pc, #1452]	; 1c314 <__assert_fail@plt+0xa770>
   1bd64:	mov	r3, r8
   1bd68:	mov	r2, #10
   1bd6c:	add	r1, sp, #44	; 0x2c
   1bd70:	add	r0, sp, #40	; 0x28
   1bd74:	bl	116f4 <__getdelim@plt>
   1bd78:	cmn	r0, #1
   1bd7c:	beq	1c244 <__assert_fail@plt+0xa6a0>
   1bd80:	add	r3, sp, #56	; 0x38
   1bd84:	str	r3, [sp]
   1bd88:	add	r3, sp, #52	; 0x34
   1bd8c:	add	r2, sp, #48	; 0x30
   1bd90:	mov	r1, sl
   1bd94:	ldr	r0, [sp, #40]	; 0x28
   1bd98:	bl	11a9c <sscanf@plt>
   1bd9c:	sub	r0, r0, #2
   1bda0:	cmp	r0, #1
   1bda4:	bhi	1bd64 <__assert_fail@plt+0xa1c0>
   1bda8:	ldr	r3, [sp, #56]	; 0x38
   1bdac:	ldr	r4, [sp, #40]	; 0x28
   1bdb0:	add	r4, r4, r3
   1bdb4:	mov	r0, r4
   1bdb8:	bl	1bc20 <__assert_fail@plt+0xa07c>
   1bdbc:	cmp	r0, #0
   1bdc0:	beq	1bd64 <__assert_fail@plt+0xa1c0>
   1bdc4:	add	r5, r0, #1
   1bdc8:	mov	r0, r5
   1bdcc:	bl	1bc20 <__assert_fail@plt+0xa07c>
   1bdd0:	cmp	r0, #0
   1bdd4:	beq	1bd64 <__assert_fail@plt+0xa1c0>
   1bdd8:	mov	r1, fp
   1bddc:	add	r0, r0, #1
   1bde0:	bl	2d920 <__assert_fail@plt+0x1bd7c>
   1bde4:	cmp	r0, #0
   1bde8:	beq	1bd64 <__assert_fail@plt+0xa1c0>
   1bdec:	add	r6, r0, #3
   1bdf0:	mov	r0, r6
   1bdf4:	bl	1bc20 <__assert_fail@plt+0xa07c>
   1bdf8:	cmp	r0, #0
   1bdfc:	beq	1bd64 <__assert_fail@plt+0xa1c0>
   1be00:	add	r7, r0, #1
   1be04:	mov	r0, r7
   1be08:	bl	1bc20 <__assert_fail@plt+0xa07c>
   1be0c:	cmp	r0, #0
   1be10:	beq	1bd64 <__assert_fail@plt+0xa1c0>
   1be14:	mov	r0, r7
   1be18:	bl	1bc3c <__assert_fail@plt+0xa098>
   1be1c:	mov	r0, r5
   1be20:	bl	1bc3c <__assert_fail@plt+0xa098>
   1be24:	mov	r0, r4
   1be28:	bl	1bc3c <__assert_fail@plt+0xa098>
   1be2c:	mov	r0, r6
   1be30:	bl	1bc3c <__assert_fail@plt+0xa098>
   1be34:	mov	r0, #32
   1be38:	bl	2c12c <__assert_fail@plt+0x1a588>
   1be3c:	str	r0, [sp, #24]
   1be40:	mov	r0, r7
   1be44:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1be48:	ldr	r3, [sp, #24]
   1be4c:	str	r0, [r3]
   1be50:	mov	r0, r5
   1be54:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1be58:	ldr	r3, [sp, #24]
   1be5c:	str	r0, [r3, #4]
   1be60:	mov	r0, r4
   1be64:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1be68:	ldr	r3, [sp, #24]
   1be6c:	str	r0, [r3, #8]
   1be70:	mov	r0, r6
   1be74:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1be78:	str	r0, [sp, #28]
   1be7c:	ldr	r3, [sp, #24]
   1be80:	str	r0, [r3, #12]
   1be84:	ldrb	r3, [r3, #24]
   1be88:	orr	r3, r3, #4
   1be8c:	ldr	r2, [sp, #24]
   1be90:	strb	r3, [r2, #24]
   1be94:	ldr	r1, [sp, #52]	; 0x34
   1be98:	ldr	lr, [sp, #48]	; 0x30
   1be9c:	mov	ip, #0
   1bea0:	lsr	r3, lr, #24
   1bea4:	str	r3, [sp, #12]
   1bea8:	lsl	r3, lr, #8
   1beac:	str	r3, [sp, #8]
   1beb0:	ldr	r2, [pc, #1120]	; 1c318 <__assert_fail@plt+0xa774>
   1beb4:	mov	r3, #0
   1beb8:	ldrd	r4, [sp, #8]
   1bebc:	and	r4, r4, r2
   1bec0:	and	r5, r5, r3
   1bec4:	mov	r6, r4
   1bec8:	mov	r7, r5
   1becc:	str	lr, [sp, #36]	; 0x24
   1bed0:	str	ip, [sp, #32]
   1bed4:	mov	r4, #0
   1bed8:	ldr	r5, [pc, #1084]	; 1c31c <__assert_fail@plt+0xa778>
   1bedc:	ldrd	r2, [sp, #32]
   1bee0:	and	r2, r2, r4
   1bee4:	and	r3, r3, r5
   1bee8:	mov	r4, r2
   1beec:	mov	r5, r3
   1bef0:	orr	r2, r6, r4
   1bef4:	orr	r3, r7, r5
   1bef8:	uxtb	r4, r1
   1befc:	mov	r5, #0
   1bf00:	orr	r6, r4, r2
   1bf04:	orr	r7, r5, r3
   1bf08:	lsr	r3, r1, #20
   1bf0c:	str	r3, [sp, #20]
   1bf10:	lsl	r3, r1, #12
   1bf14:	str	r3, [sp, #16]
   1bf18:	add	r3, pc, #992	; 0x3e0
   1bf1c:	ldrd	r2, [r3]
   1bf20:	ldrd	r4, [sp, #16]
   1bf24:	and	r4, r4, r2
   1bf28:	and	r5, r5, r3
   1bf2c:	mov	r2, r4
   1bf30:	mov	r3, r5
   1bf34:	orr	r4, r6, r2
   1bf38:	orr	r5, r7, r3
   1bf3c:	mov	r2, r4
   1bf40:	mov	r3, r5
   1bf44:	ldr	r1, [sp, #24]
   1bf48:	strd	r2, [r1, #16]
   1bf4c:	ldr	r1, [pc, #972]	; 1c320 <__assert_fail@plt+0xa77c>
   1bf50:	bl	1170c <strcmp@plt>
   1bf54:	cmp	r0, #0
   1bf58:	moveq	r0, #1
   1bf5c:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bf60:	ldr	r1, [pc, #956]	; 1c324 <__assert_fail@plt+0xa780>
   1bf64:	ldr	r0, [sp, #28]
   1bf68:	bl	1170c <strcmp@plt>
   1bf6c:	cmp	r0, #0
   1bf70:	moveq	r0, #1
   1bf74:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bf78:	ldr	r1, [pc, #948]	; 1c334 <__assert_fail@plt+0xa790>
   1bf7c:	ldr	r0, [sp, #28]
   1bf80:	bl	1170c <strcmp@plt>
   1bf84:	cmp	r0, #0
   1bf88:	moveq	r0, #1
   1bf8c:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bf90:	ldr	r1, [pc, #928]	; 1c338 <__assert_fail@plt+0xa794>
   1bf94:	ldr	r0, [sp, #28]
   1bf98:	bl	1170c <strcmp@plt>
   1bf9c:	cmp	r0, #0
   1bfa0:	moveq	r0, #1
   1bfa4:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bfa8:	ldr	r1, [pc, #908]	; 1c33c <__assert_fail@plt+0xa798>
   1bfac:	ldr	r0, [sp, #28]
   1bfb0:	bl	1170c <strcmp@plt>
   1bfb4:	cmp	r0, #0
   1bfb8:	moveq	r0, #1
   1bfbc:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bfc0:	ldr	r1, [pc, #888]	; 1c340 <__assert_fail@plt+0xa79c>
   1bfc4:	ldr	r0, [sp, #28]
   1bfc8:	bl	1170c <strcmp@plt>
   1bfcc:	cmp	r0, #0
   1bfd0:	moveq	r0, #1
   1bfd4:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bfd8:	ldr	r1, [pc, #868]	; 1c344 <__assert_fail@plt+0xa7a0>
   1bfdc:	ldr	r0, [sp, #28]
   1bfe0:	bl	1170c <strcmp@plt>
   1bfe4:	cmp	r0, #0
   1bfe8:	moveq	r0, #1
   1bfec:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1bff0:	ldr	r1, [pc, #848]	; 1c348 <__assert_fail@plt+0xa7a4>
   1bff4:	ldr	r0, [sp, #28]
   1bff8:	bl	1170c <strcmp@plt>
   1bffc:	cmp	r0, #0
   1c000:	moveq	r0, #1
   1c004:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1c008:	ldr	r1, [pc, #828]	; 1c34c <__assert_fail@plt+0xa7a8>
   1c00c:	ldr	r0, [sp, #28]
   1c010:	bl	1170c <strcmp@plt>
   1c014:	cmp	r0, #0
   1c018:	moveq	r0, #1
   1c01c:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1c020:	ldr	r1, [pc, #808]	; 1c350 <__assert_fail@plt+0xa7ac>
   1c024:	ldr	r0, [sp, #28]
   1c028:	bl	1170c <strcmp@plt>
   1c02c:	cmp	r0, #0
   1c030:	moveq	r0, #1
   1c034:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1c038:	ldr	r1, [pc, #788]	; 1c354 <__assert_fail@plt+0xa7b0>
   1c03c:	ldr	r0, [sp, #28]
   1c040:	bl	1170c <strcmp@plt>
   1c044:	cmp	r0, #0
   1c048:	moveq	r0, #1
   1c04c:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1c050:	ldr	r1, [pc, #768]	; 1c358 <__assert_fail@plt+0xa7b4>
   1c054:	ldr	r0, [sp, #28]
   1c058:	bl	1170c <strcmp@plt>
   1c05c:	cmp	r0, #0
   1c060:	moveq	r0, #1
   1c064:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1c068:	ldr	r1, [pc, #748]	; 1c35c <__assert_fail@plt+0xa7b8>
   1c06c:	ldr	r0, [sp, #28]
   1c070:	bl	1170c <strcmp@plt>
   1c074:	cmp	r0, #0
   1c078:	moveq	r0, #1
   1c07c:	beq	1c094 <__assert_fail@plt+0xa4f0>
   1c080:	ldr	r1, [pc, #728]	; 1c360 <__assert_fail@plt+0xa7bc>
   1c084:	ldr	r0, [sp, #28]
   1c088:	bl	1170c <strcmp@plt>
   1c08c:	clz	r0, r0
   1c090:	lsr	r0, r0, #5
   1c094:	ldr	r3, [sp, #24]
   1c098:	ldrb	r3, [r3, #24]
   1c09c:	bic	r3, r3, #1
   1c0a0:	orr	r0, r0, r3
   1c0a4:	ldr	r3, [sp, #24]
   1c0a8:	strb	r0, [r3, #24]
   1c0ac:	ldr	r4, [r3]
   1c0b0:	mov	r1, #58	; 0x3a
   1c0b4:	mov	r0, r4
   1c0b8:	bl	11994 <strchr@plt>
   1c0bc:	cmp	r0, #0
   1c0c0:	movne	r0, #1
   1c0c4:	beq	1c0f0 <__assert_fail@plt+0xa54c>
   1c0c8:	ldr	r3, [sp, #24]
   1c0cc:	ldrb	r3, [r3, #24]
   1c0d0:	and	r0, r0, #1
   1c0d4:	bic	r3, r3, #2
   1c0d8:	orr	r3, r3, r0, lsl #1
   1c0dc:	ldr	r2, [sp, #24]
   1c0e0:	strb	r3, [r2, #24]
   1c0e4:	str	r2, [r9]
   1c0e8:	add	r9, r2, #28
   1c0ec:	b	1bd64 <__assert_fail@plt+0xa1c0>
   1c0f0:	ldrb	r3, [r4]
   1c0f4:	cmp	r3, #47	; 0x2f
   1c0f8:	beq	1c1ec <__assert_fail@plt+0xa648>
   1c0fc:	ldr	r1, [pc, #608]	; 1c364 <__assert_fail@plt+0xa7c0>
   1c100:	ldr	r0, [sp, #28]
   1c104:	bl	1170c <strcmp@plt>
   1c108:	cmp	r0, #0
   1c10c:	moveq	r0, #1
   1c110:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c114:	ldr	r1, [pc, #588]	; 1c368 <__assert_fail@plt+0xa7c4>
   1c118:	ldr	r0, [sp, #28]
   1c11c:	bl	1170c <strcmp@plt>
   1c120:	cmp	r0, #0
   1c124:	moveq	r0, #1
   1c128:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c12c:	ldr	r1, [pc, #568]	; 1c36c <__assert_fail@plt+0xa7c8>
   1c130:	ldr	r0, [sp, #28]
   1c134:	bl	1170c <strcmp@plt>
   1c138:	cmp	r0, #0
   1c13c:	moveq	r0, #1
   1c140:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c144:	ldr	r1, [pc, #548]	; 1c370 <__assert_fail@plt+0xa7cc>
   1c148:	ldr	r0, [sp, #28]
   1c14c:	bl	1170c <strcmp@plt>
   1c150:	cmp	r0, #0
   1c154:	moveq	r0, #1
   1c158:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c15c:	ldr	r1, [pc, #528]	; 1c374 <__assert_fail@plt+0xa7d0>
   1c160:	ldr	r0, [sp, #28]
   1c164:	bl	1170c <strcmp@plt>
   1c168:	cmp	r0, #0
   1c16c:	moveq	r0, #1
   1c170:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c174:	ldr	r1, [pc, #508]	; 1c378 <__assert_fail@plt+0xa7d4>
   1c178:	ldr	r0, [sp, #28]
   1c17c:	bl	1170c <strcmp@plt>
   1c180:	cmp	r0, #0
   1c184:	moveq	r0, #1
   1c188:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c18c:	ldr	r1, [pc, #488]	; 1c37c <__assert_fail@plt+0xa7d8>
   1c190:	ldr	r0, [sp, #28]
   1c194:	bl	1170c <strcmp@plt>
   1c198:	cmp	r0, #0
   1c19c:	moveq	r0, #1
   1c1a0:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c1a4:	ldr	r1, [pc, #468]	; 1c380 <__assert_fail@plt+0xa7dc>
   1c1a8:	ldr	r0, [sp, #28]
   1c1ac:	bl	1170c <strcmp@plt>
   1c1b0:	cmp	r0, #0
   1c1b4:	moveq	r0, #1
   1c1b8:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c1bc:	ldr	r1, [pc, #448]	; 1c384 <__assert_fail@plt+0xa7e0>
   1c1c0:	ldr	r0, [sp, #28]
   1c1c4:	bl	1170c <strcmp@plt>
   1c1c8:	cmp	r0, #0
   1c1cc:	moveq	r0, #1
   1c1d0:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c1d4:	mov	r1, r4
   1c1d8:	ldr	r0, [pc, #424]	; 1c388 <__assert_fail@plt+0xa7e4>
   1c1dc:	bl	1170c <strcmp@plt>
   1c1e0:	clz	r0, r0
   1c1e4:	lsr	r0, r0, #5
   1c1e8:	b	1c0c8 <__assert_fail@plt+0xa524>
   1c1ec:	ldrb	r3, [r4, #1]
   1c1f0:	cmp	r3, #47	; 0x2f
   1c1f4:	bne	1c0fc <__assert_fail@plt+0xa558>
   1c1f8:	ldr	r1, [pc, #396]	; 1c38c <__assert_fail@plt+0xa7e8>
   1c1fc:	ldr	r0, [sp, #28]
   1c200:	bl	1170c <strcmp@plt>
   1c204:	cmp	r0, #0
   1c208:	moveq	r0, #1
   1c20c:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c210:	ldr	r1, [pc, #376]	; 1c390 <__assert_fail@plt+0xa7ec>
   1c214:	ldr	r0, [sp, #28]
   1c218:	bl	1170c <strcmp@plt>
   1c21c:	cmp	r0, #0
   1c220:	moveq	r0, #1
   1c224:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c228:	ldr	r1, [pc, #356]	; 1c394 <__assert_fail@plt+0xa7f0>
   1c22c:	ldr	r0, [sp, #28]
   1c230:	bl	1170c <strcmp@plt>
   1c234:	cmp	r0, #0
   1c238:	moveq	r0, #1
   1c23c:	beq	1c0c8 <__assert_fail@plt+0xa524>
   1c240:	b	1c0fc <__assert_fail@plt+0xa558>
   1c244:	ldr	r0, [sp, #40]	; 0x28
   1c248:	bl	17204 <__assert_fail@plt+0x5660>
   1c24c:	ldr	r3, [r8]
   1c250:	tst	r3, #32
   1c254:	bne	1c27c <__assert_fail@plt+0xa6d8>
   1c258:	mov	r0, r8
   1c25c:	bl	15554 <__assert_fail@plt+0x39b0>
   1c260:	cmn	r0, #1
   1c264:	beq	1c294 <__assert_fail@plt+0xa6f0>
   1c268:	mov	r3, #0
   1c26c:	str	r3, [r9]
   1c270:	ldr	r0, [sp, #60]	; 0x3c
   1c274:	add	sp, sp, #68	; 0x44
   1c278:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c27c:	bl	119b8 <__errno_location@plt>
   1c280:	mov	r4, r0
   1c284:	ldr	r5, [r0]
   1c288:	mov	r0, r8
   1c28c:	bl	15554 <__assert_fail@plt+0x39b0>
   1c290:	str	r5, [r4]
   1c294:	bl	119b8 <__errno_location@plt>
   1c298:	mov	r5, r0
   1c29c:	ldr	r6, [r0]
   1c2a0:	mov	r3, #0
   1c2a4:	str	r3, [r9]
   1c2a8:	ldr	r0, [sp, #60]	; 0x3c
   1c2ac:	cmp	r0, r3
   1c2b0:	beq	1c2cc <__assert_fail@plt+0xa728>
   1c2b4:	ldr	r4, [r0, #28]
   1c2b8:	bl	1bcec <__assert_fail@plt+0xa148>
   1c2bc:	str	r4, [sp, #60]	; 0x3c
   1c2c0:	mov	r0, r4
   1c2c4:	cmp	r4, #0
   1c2c8:	bne	1c2b4 <__assert_fail@plt+0xa710>
   1c2cc:	str	r6, [r5]
   1c2d0:	mov	r0, #0
   1c2d4:	b	1c274 <__assert_fail@plt+0xa6d0>
   1c2d8:	ldr	r1, [pc, #72]	; 1c328 <__assert_fail@plt+0xa784>
   1c2dc:	ldr	r0, [pc, #72]	; 1c32c <__assert_fail@plt+0xa788>
   1c2e0:	bl	11b14 <setmntent@plt>
   1c2e4:	subs	r7, r0, #0
   1c2e8:	beq	1c710 <__assert_fail@plt+0xab6c>
   1c2ec:	add	r9, sp, #60	; 0x3c
   1c2f0:	ldr	sl, [pc, #56]	; 1c330 <__assert_fail@plt+0xa78c>
   1c2f4:	ldr	r8, [pc, #36]	; 1c320 <__assert_fail@plt+0xa77c>
   1c2f8:	ldr	fp, [pc, #36]	; 1c324 <__assert_fail@plt+0xa780>
   1c2fc:	b	1c3ec <__assert_fail@plt+0xa848>
   1c300:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1c304:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   1c308:	andeq	r0, r3, r4, ror #17
   1c30c:	andeq	r0, r3, r8, asr #16
   1c310:	andeq	r0, r3, r0, ror #16
   1c314:	andeq	r0, r3, r4, ror r8
   1c318:	andeq	pc, pc, r0, lsl #30
   1c31c:			; <UNDEFINED> instruction: 0xfffff000
   1c320:	andeq	r0, r3, r8, ror r8
   1c324:	andeq	r0, r3, r0, lsl #17
   1c328:	andeq	r0, r3, r8, ror #24
   1c32c:	andeq	r0, r3, r8, asr r9
   1c330:	andeq	r0, r3, r4, ror #18
   1c334:	andeq	r0, r3, r8, lsl #17
   1c338:	muleq	r3, r0, r8
   1c33c:	muleq	r3, r8, r8
   1c340:	andeq	r0, r3, r0, lsr #17
   1c344:	andeq	r0, r3, r8, lsr #17
   1c348:			; <UNDEFINED> instruction: 0x000308b4
   1c34c:			; <UNDEFINED> instruction: 0x000308bc
   1c350:	andeq	r0, r3, r8, asr #17
   1c354:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1c358:	ldrdeq	r0, [r3], -r8
   1c35c:	andeq	r0, r3, r0, ror #17
   1c360:	andeq	r0, r3, r8, ror #17
   1c364:	andeq	r0, r3, r8, lsl #18
   1c368:	andeq	r0, r3, r0, lsl r9
   1c36c:	andeq	r0, r3, r4, lsl r9
   1c370:	andeq	r0, r3, ip, lsl r9
   1c374:	andeq	r0, r3, r8, lsr #18
   1c378:	andeq	r0, r3, r0, lsr r9
   1c37c:	andeq	r0, r3, r8, lsr r9
   1c380:	andeq	r0, r3, r0, asr #18
   1c384:	andeq	r0, r3, r8, asr #18
   1c388:	andeq	r0, r3, r0, asr r9
   1c38c:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   1c390:	strdeq	r0, [r3], -r8
   1c394:	andeq	r0, r3, r0, lsl #18
   1c398:	ldrb	r3, [r4, #24]
   1c39c:	bic	r3, r3, #1
   1c3a0:	orr	r0, r0, r3
   1c3a4:	strb	r0, [r4, #24]
   1c3a8:	ldr	r6, [r4]
   1c3ac:	mov	r1, #58	; 0x3a
   1c3b0:	mov	r0, r6
   1c3b4:	bl	11994 <strchr@plt>
   1c3b8:	cmp	r0, #0
   1c3bc:	movne	r3, #1
   1c3c0:	beq	1c5a8 <__assert_fail@plt+0xaa04>
   1c3c4:	ldrb	r0, [r4, #24]
   1c3c8:	and	r3, r3, #1
   1c3cc:	bic	r0, r0, #2
   1c3d0:	orr	r0, r0, r3, lsl #1
   1c3d4:	strb	r0, [r4, #24]
   1c3d8:	mvn	r2, #0
   1c3dc:	mvn	r3, #0
   1c3e0:	strd	r2, [r4, #16]
   1c3e4:	str	r4, [r9]
   1c3e8:	add	r9, r4, #28
   1c3ec:	mov	r0, r7
   1c3f0:	bl	118c8 <getmntent@plt>
   1c3f4:	subs	r5, r0, #0
   1c3f8:	beq	1c6fc <__assert_fail@plt+0xab58>
   1c3fc:	mov	r1, sl
   1c400:	mov	r0, r5
   1c404:	bl	1188c <hasmntopt@plt>
   1c408:	mov	r6, r0
   1c40c:	mov	r0, #32
   1c410:	bl	2c12c <__assert_fail@plt+0x1a588>
   1c414:	mov	r4, r0
   1c418:	ldr	r0, [r5]
   1c41c:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1c420:	str	r0, [r4]
   1c424:	ldr	r0, [r5, #4]
   1c428:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1c42c:	str	r0, [r4, #4]
   1c430:	mov	r3, #0
   1c434:	str	r3, [r4, #8]
   1c438:	ldr	r0, [r5, #8]
   1c43c:	bl	2c6b4 <__assert_fail@plt+0x1ab10>
   1c440:	mov	r5, r0
   1c444:	str	r0, [r4, #12]
   1c448:	ldrb	r3, [r4, #24]
   1c44c:	orr	r3, r3, #4
   1c450:	strb	r3, [r4, #24]
   1c454:	mov	r1, r8
   1c458:	bl	1170c <strcmp@plt>
   1c45c:	cmp	r0, #0
   1c460:	moveq	r0, #1
   1c464:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c468:	mov	r1, fp
   1c46c:	mov	r0, r5
   1c470:	bl	1170c <strcmp@plt>
   1c474:	cmp	r0, #0
   1c478:	moveq	r0, #1
   1c47c:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c480:	ldr	r1, [pc, #-340]	; 1c334 <__assert_fail@plt+0xa790>
   1c484:	mov	r0, r5
   1c488:	bl	1170c <strcmp@plt>
   1c48c:	cmp	r0, #0
   1c490:	moveq	r0, #1
   1c494:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c498:	ldr	r1, [pc, #-360]	; 1c338 <__assert_fail@plt+0xa794>
   1c49c:	mov	r0, r5
   1c4a0:	bl	1170c <strcmp@plt>
   1c4a4:	cmp	r0, #0
   1c4a8:	moveq	r0, #1
   1c4ac:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c4b0:	ldr	r1, [pc, #-380]	; 1c33c <__assert_fail@plt+0xa798>
   1c4b4:	mov	r0, r5
   1c4b8:	bl	1170c <strcmp@plt>
   1c4bc:	cmp	r0, #0
   1c4c0:	moveq	r0, #1
   1c4c4:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c4c8:	ldr	r1, [pc, #-400]	; 1c340 <__assert_fail@plt+0xa79c>
   1c4cc:	mov	r0, r5
   1c4d0:	bl	1170c <strcmp@plt>
   1c4d4:	cmp	r0, #0
   1c4d8:	moveq	r0, #1
   1c4dc:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c4e0:	ldr	r1, [pc, #-420]	; 1c344 <__assert_fail@plt+0xa7a0>
   1c4e4:	mov	r0, r5
   1c4e8:	bl	1170c <strcmp@plt>
   1c4ec:	cmp	r0, #0
   1c4f0:	moveq	r0, #1
   1c4f4:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c4f8:	ldr	r1, [pc, #-440]	; 1c348 <__assert_fail@plt+0xa7a4>
   1c4fc:	mov	r0, r5
   1c500:	bl	1170c <strcmp@plt>
   1c504:	cmp	r0, #0
   1c508:	moveq	r0, #1
   1c50c:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c510:	ldr	r1, [pc, #-460]	; 1c34c <__assert_fail@plt+0xa7a8>
   1c514:	mov	r0, r5
   1c518:	bl	1170c <strcmp@plt>
   1c51c:	cmp	r0, #0
   1c520:	moveq	r0, #1
   1c524:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c528:	ldr	r1, [pc, #-480]	; 1c350 <__assert_fail@plt+0xa7ac>
   1c52c:	mov	r0, r5
   1c530:	bl	1170c <strcmp@plt>
   1c534:	cmp	r0, #0
   1c538:	moveq	r0, #1
   1c53c:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c540:	ldr	r1, [pc, #-500]	; 1c354 <__assert_fail@plt+0xa7b0>
   1c544:	mov	r0, r5
   1c548:	bl	1170c <strcmp@plt>
   1c54c:	cmp	r0, #0
   1c550:	moveq	r0, #1
   1c554:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c558:	ldr	r1, [pc, #-520]	; 1c358 <__assert_fail@plt+0xa7b4>
   1c55c:	mov	r0, r5
   1c560:	bl	1170c <strcmp@plt>
   1c564:	cmp	r0, #0
   1c568:	moveq	r0, #1
   1c56c:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c570:	ldr	r1, [pc, #-540]	; 1c35c <__assert_fail@plt+0xa7b8>
   1c574:	mov	r0, r5
   1c578:	bl	1170c <strcmp@plt>
   1c57c:	cmp	r0, #0
   1c580:	moveq	r0, #1
   1c584:	beq	1c398 <__assert_fail@plt+0xa7f4>
   1c588:	ldr	r1, [pc, #-560]	; 1c360 <__assert_fail@plt+0xa7bc>
   1c58c:	mov	r0, r5
   1c590:	bl	1170c <strcmp@plt>
   1c594:	cmp	r6, #0
   1c598:	cmpeq	r0, #0
   1c59c:	moveq	r0, #1
   1c5a0:	movne	r0, #0
   1c5a4:	b	1c398 <__assert_fail@plt+0xa7f4>
   1c5a8:	ldrb	r3, [r6]
   1c5ac:	cmp	r3, #47	; 0x2f
   1c5b0:	beq	1c6a4 <__assert_fail@plt+0xab00>
   1c5b4:	ldr	r1, [pc, #-600]	; 1c364 <__assert_fail@plt+0xa7c0>
   1c5b8:	mov	r0, r5
   1c5bc:	bl	1170c <strcmp@plt>
   1c5c0:	cmp	r0, #0
   1c5c4:	moveq	r3, #1
   1c5c8:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c5cc:	ldr	r1, [pc, #-620]	; 1c368 <__assert_fail@plt+0xa7c4>
   1c5d0:	mov	r0, r5
   1c5d4:	bl	1170c <strcmp@plt>
   1c5d8:	cmp	r0, #0
   1c5dc:	moveq	r3, #1
   1c5e0:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c5e4:	ldr	r1, [pc, #-640]	; 1c36c <__assert_fail@plt+0xa7c8>
   1c5e8:	mov	r0, r5
   1c5ec:	bl	1170c <strcmp@plt>
   1c5f0:	cmp	r0, #0
   1c5f4:	moveq	r3, #1
   1c5f8:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c5fc:	ldr	r1, [pc, #-660]	; 1c370 <__assert_fail@plt+0xa7cc>
   1c600:	mov	r0, r5
   1c604:	bl	1170c <strcmp@plt>
   1c608:	cmp	r0, #0
   1c60c:	moveq	r3, #1
   1c610:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c614:	ldr	r1, [pc, #-680]	; 1c374 <__assert_fail@plt+0xa7d0>
   1c618:	mov	r0, r5
   1c61c:	bl	1170c <strcmp@plt>
   1c620:	cmp	r0, #0
   1c624:	moveq	r3, #1
   1c628:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c62c:	ldr	r1, [pc, #-700]	; 1c378 <__assert_fail@plt+0xa7d4>
   1c630:	mov	r0, r5
   1c634:	bl	1170c <strcmp@plt>
   1c638:	cmp	r0, #0
   1c63c:	moveq	r3, #1
   1c640:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c644:	ldr	r1, [pc, #-720]	; 1c37c <__assert_fail@plt+0xa7d8>
   1c648:	mov	r0, r5
   1c64c:	bl	1170c <strcmp@plt>
   1c650:	cmp	r0, #0
   1c654:	moveq	r3, #1
   1c658:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c65c:	ldr	r1, [pc, #-740]	; 1c380 <__assert_fail@plt+0xa7dc>
   1c660:	mov	r0, r5
   1c664:	bl	1170c <strcmp@plt>
   1c668:	cmp	r0, #0
   1c66c:	moveq	r3, #1
   1c670:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c674:	ldr	r1, [pc, #-760]	; 1c384 <__assert_fail@plt+0xa7e0>
   1c678:	mov	r0, r5
   1c67c:	bl	1170c <strcmp@plt>
   1c680:	cmp	r0, #0
   1c684:	moveq	r3, #1
   1c688:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c68c:	mov	r1, r6
   1c690:	ldr	r0, [pc, #-784]	; 1c388 <__assert_fail@plt+0xa7e4>
   1c694:	bl	1170c <strcmp@plt>
   1c698:	clz	r3, r0
   1c69c:	lsr	r3, r3, #5
   1c6a0:	b	1c3c4 <__assert_fail@plt+0xa820>
   1c6a4:	ldrb	r3, [r6, #1]
   1c6a8:	cmp	r3, #47	; 0x2f
   1c6ac:	bne	1c5b4 <__assert_fail@plt+0xaa10>
   1c6b0:	ldr	r1, [pc, #-812]	; 1c38c <__assert_fail@plt+0xa7e8>
   1c6b4:	mov	r0, r5
   1c6b8:	bl	1170c <strcmp@plt>
   1c6bc:	cmp	r0, #0
   1c6c0:	moveq	r3, #1
   1c6c4:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c6c8:	ldr	r1, [pc, #-832]	; 1c390 <__assert_fail@plt+0xa7ec>
   1c6cc:	mov	r0, r5
   1c6d0:	bl	1170c <strcmp@plt>
   1c6d4:	cmp	r0, #0
   1c6d8:	moveq	r3, #1
   1c6dc:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c6e0:	ldr	r1, [pc, #-852]	; 1c394 <__assert_fail@plt+0xa7f0>
   1c6e4:	mov	r0, r5
   1c6e8:	bl	1170c <strcmp@plt>
   1c6ec:	cmp	r0, #0
   1c6f0:	moveq	r3, #1
   1c6f4:	beq	1c3c4 <__assert_fail@plt+0xa820>
   1c6f8:	b	1c5b4 <__assert_fail@plt+0xaa10>
   1c6fc:	mov	r0, r7
   1c700:	bl	11a48 <endmntent@plt>
   1c704:	cmp	r0, #0
   1c708:	bne	1c268 <__assert_fail@plt+0xa6c4>
   1c70c:	b	1c294 <__assert_fail@plt+0xa6f0>
   1c710:	mov	r0, #0
   1c714:	b	1c274 <__assert_fail@plt+0xa6d0>
   1c718:	push	{r2, r3}
   1c71c:	push	{lr}		; (str lr, [sp, #-4]!)
   1c720:	sub	sp, sp, #12
   1c724:	ldr	r2, [sp, #16]
   1c728:	tst	r2, #64	; 0x40
   1c72c:	addne	r3, sp, #24
   1c730:	strne	r3, [sp, #4]
   1c734:	ldrne	r3, [sp, #20]
   1c738:	moveq	r3, #0
   1c73c:	bl	119ac <openat64@plt>
   1c740:	bl	2bb68 <__assert_fail@plt+0x19fc4>
   1c744:	add	sp, sp, #12
   1c748:	pop	{lr}		; (ldr lr, [sp], #4)
   1c74c:	add	sp, sp, #8
   1c750:	bx	lr
   1c754:	push	{r4, r5, r6, r7, r8, lr}
   1c758:	mov	r6, r3
   1c75c:	orr	r2, r2, #540672	; 0x84000
   1c760:	orr	r2, r2, #2304	; 0x900
   1c764:	bl	1c718 <__assert_fail@plt+0xab74>
   1c768:	subs	r4, r0, #0
   1c76c:	blt	1c7a8 <__assert_fail@plt+0xac04>
   1c770:	mov	r0, r4
   1c774:	bl	11ac0 <fdopendir@plt>
   1c778:	subs	r5, r0, #0
   1c77c:	beq	1c78c <__assert_fail@plt+0xabe8>
   1c780:	str	r4, [r6]
   1c784:	mov	r0, r5
   1c788:	pop	{r4, r5, r6, r7, r8, pc}
   1c78c:	bl	119b8 <__errno_location@plt>
   1c790:	mov	r6, r0
   1c794:	ldr	r7, [r0]
   1c798:	mov	r0, r4
   1c79c:	bl	11b80 <close@plt>
   1c7a0:	str	r7, [r6]
   1c7a4:	b	1c784 <__assert_fail@plt+0xabe0>
   1c7a8:	mov	r5, #0
   1c7ac:	b	1c784 <__assert_fail@plt+0xabe0>
   1c7b0:	push	{r4, r5, r6, lr}
   1c7b4:	subs	r4, r0, #0
   1c7b8:	beq	1c830 <__assert_fail@plt+0xac8c>
   1c7bc:	mov	r1, #47	; 0x2f
   1c7c0:	mov	r0, r4
   1c7c4:	bl	11a78 <strrchr@plt>
   1c7c8:	cmp	r0, #0
   1c7cc:	addne	r5, r0, #1
   1c7d0:	moveq	r5, r4
   1c7d4:	sub	r3, r5, r4
   1c7d8:	cmp	r3, #6
   1c7dc:	ble	1c81c <__assert_fail@plt+0xac78>
   1c7e0:	mov	r2, #7
   1c7e4:	ldr	r1, [pc, #96]	; 1c84c <__assert_fail@plt+0xaca8>
   1c7e8:	sub	r0, r5, #7
   1c7ec:	bl	11b5c <strncmp@plt>
   1c7f0:	cmp	r0, #0
   1c7f4:	bne	1c81c <__assert_fail@plt+0xac78>
   1c7f8:	mov	r2, #3
   1c7fc:	ldr	r1, [pc, #76]	; 1c850 <__assert_fail@plt+0xacac>
   1c800:	mov	r0, r5
   1c804:	bl	11b5c <strncmp@plt>
   1c808:	cmp	r0, #0
   1c80c:	addeq	r4, r5, #3
   1c810:	ldreq	r3, [pc, #60]	; 1c854 <__assert_fail@plt+0xacb0>
   1c814:	streq	r4, [r3]
   1c818:	movne	r4, r5
   1c81c:	ldr	r3, [pc, #52]	; 1c858 <__assert_fail@plt+0xacb4>
   1c820:	str	r4, [r3]
   1c824:	ldr	r3, [pc, #48]	; 1c85c <__assert_fail@plt+0xacb8>
   1c828:	str	r4, [r3]
   1c82c:	pop	{r4, r5, r6, pc}
   1c830:	ldr	r3, [pc, #40]	; 1c860 <__assert_fail@plt+0xacbc>
   1c834:	ldr	r3, [r3]
   1c838:	mov	r2, #55	; 0x37
   1c83c:	mov	r1, #1
   1c840:	ldr	r0, [pc, #28]	; 1c864 <__assert_fail@plt+0xacc0>
   1c844:	bl	11868 <fwrite@plt>
   1c848:	bl	11b68 <abort@plt>
   1c84c:	andeq	r0, r3, r4, lsr #19
   1c850:	andeq	r0, r3, ip, lsr #19
   1c854:	andeq	r2, r4, r0, lsr #4
   1c858:	andeq	r2, r4, r8, asr #5
   1c85c:	andeq	r2, r4, r4, lsr #4
   1c860:	andeq	r2, r4, r0, lsr r2
   1c864:	andeq	r0, r3, ip, ror #18
   1c868:	push	{r4, r5, r6, lr}
   1c86c:	mov	r5, r0
   1c870:	mov	r4, r1
   1c874:	mov	r2, #48	; 0x30
   1c878:	mov	r1, #0
   1c87c:	bl	119e8 <memset@plt>
   1c880:	cmp	r4, #10
   1c884:	beq	1c894 <__assert_fail@plt+0xacf0>
   1c888:	str	r4, [r5]
   1c88c:	mov	r0, r5
   1c890:	pop	{r4, r5, r6, pc}
   1c894:	bl	11b68 <abort@plt>
   1c898:	push	{r4, r5, r6, lr}
   1c89c:	mov	r4, r0
   1c8a0:	mov	r5, r1
   1c8a4:	mov	r2, #5
   1c8a8:	mov	r1, r0
   1c8ac:	mov	r0, #0
   1c8b0:	bl	117d8 <dcgettext@plt>
   1c8b4:	cmp	r4, r0
   1c8b8:	popne	{r4, r5, r6, pc}
   1c8bc:	bl	2e1bc <__assert_fail@plt+0x1c618>
   1c8c0:	ldrb	r3, [r0]
   1c8c4:	bic	r3, r3, #32
   1c8c8:	cmp	r3, #85	; 0x55
   1c8cc:	beq	1c948 <__assert_fail@plt+0xada4>
   1c8d0:	cmp	r3, #71	; 0x47
   1c8d4:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c8d8:	ldrb	r3, [r0, #1]
   1c8dc:	bic	r3, r3, #32
   1c8e0:	cmp	r3, #66	; 0x42
   1c8e4:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c8e8:	ldrb	r3, [r0, #2]
   1c8ec:	cmp	r3, #49	; 0x31
   1c8f0:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c8f4:	ldrb	r3, [r0, #3]
   1c8f8:	cmp	r3, #56	; 0x38
   1c8fc:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c900:	ldrb	r3, [r0, #4]
   1c904:	cmp	r3, #48	; 0x30
   1c908:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c90c:	ldrb	r3, [r0, #5]
   1c910:	cmp	r3, #51	; 0x33
   1c914:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c918:	ldrb	r3, [r0, #6]
   1c91c:	cmp	r3, #48	; 0x30
   1c920:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c924:	ldrb	r3, [r0, #7]
   1c928:	cmp	r3, #0
   1c92c:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c930:	ldrb	r2, [r4]
   1c934:	ldr	r3, [pc, #124]	; 1c9b8 <__assert_fail@plt+0xae14>
   1c938:	ldr	r0, [pc, #124]	; 1c9bc <__assert_fail@plt+0xae18>
   1c93c:	cmp	r2, #96	; 0x60
   1c940:	movne	r0, r3
   1c944:	pop	{r4, r5, r6, pc}
   1c948:	ldrb	r3, [r0, #1]
   1c94c:	bic	r3, r3, #32
   1c950:	cmp	r3, #84	; 0x54
   1c954:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c958:	ldrb	r3, [r0, #2]
   1c95c:	bic	r3, r3, #32
   1c960:	cmp	r3, #70	; 0x46
   1c964:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c968:	ldrb	r3, [r0, #3]
   1c96c:	cmp	r3, #45	; 0x2d
   1c970:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c974:	ldrb	r3, [r0, #4]
   1c978:	cmp	r3, #56	; 0x38
   1c97c:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c980:	ldrb	r3, [r0, #5]
   1c984:	cmp	r3, #0
   1c988:	bne	1c9a4 <__assert_fail@plt+0xae00>
   1c98c:	ldrb	r2, [r4]
   1c990:	ldr	r3, [pc, #40]	; 1c9c0 <__assert_fail@plt+0xae1c>
   1c994:	ldr	r0, [pc, #40]	; 1c9c4 <__assert_fail@plt+0xae20>
   1c998:	cmp	r2, #96	; 0x60
   1c99c:	movne	r0, r3
   1c9a0:	pop	{r4, r5, r6, pc}
   1c9a4:	ldr	r3, [pc, #28]	; 1c9c8 <__assert_fail@plt+0xae24>
   1c9a8:	ldr	r0, [pc, #28]	; 1c9cc <__assert_fail@plt+0xae28>
   1c9ac:	cmp	r5, #9
   1c9b0:	movne	r0, r3
   1c9b4:	pop	{r4, r5, r6, pc}
   1c9b8:	andeq	r0, r3, r8, lsl #20
   1c9bc:	andeq	r0, r3, r0, lsl sl
   1c9c0:	andeq	r0, r3, r4, lsl #20
   1c9c4:	andeq	r0, r3, r4, lsl sl
   1c9c8:	andeq	r0, r3, r8, rrx
   1c9cc:	andeq	r0, r3, ip, lsl #20
   1c9d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c9d4:	sub	sp, sp, #116	; 0x74
   1c9d8:	str	r0, [sp, #36]	; 0x24
   1c9dc:	mov	sl, r1
   1c9e0:	str	r2, [sp, #52]	; 0x34
   1c9e4:	str	r3, [sp, #28]
   1c9e8:	ldr	r8, [sp, #152]	; 0x98
   1c9ec:	bl	11880 <__ctype_get_mb_cur_max@plt>
   1c9f0:	str	r0, [sp, #84]	; 0x54
   1c9f4:	ldr	r3, [sp, #156]	; 0x9c
   1c9f8:	lsr	r3, r3, #1
   1c9fc:	and	r3, r3, #1
   1ca00:	str	r3, [sp, #32]
   1ca04:	mov	r3, #1
   1ca08:	str	r3, [sp, #40]	; 0x28
   1ca0c:	mov	r3, #0
   1ca10:	str	r3, [sp, #80]	; 0x50
   1ca14:	str	r3, [sp, #44]	; 0x2c
   1ca18:	str	r3, [sp, #48]	; 0x30
   1ca1c:	str	r3, [sp, #60]	; 0x3c
   1ca20:	str	r3, [sp, #72]	; 0x48
   1ca24:	str	r3, [sp, #76]	; 0x4c
   1ca28:	mov	r7, sl
   1ca2c:	mov	sl, r8
   1ca30:	cmp	sl, #10
   1ca34:	ldrls	pc, [pc, sl, lsl #2]
   1ca38:	b	1cbf0 <__assert_fail@plt+0xb04c>
   1ca3c:	andeq	ip, r1, r0, lsr #21
   1ca40:	andeq	ip, r1, r0, ror sl
   1ca44:	andeq	ip, r1, ip, asr #23
   1ca48:	andeq	ip, r1, r8, ror #20
   1ca4c:	andeq	ip, r1, r0, lsl #23
   1ca50:			; <UNDEFINED> instruction: 0x0001cab0
   1ca54:	andeq	sp, r1, ip, lsl fp
   1ca58:	strdeq	ip, [r1], -r4
   1ca5c:	andeq	ip, r1, ip, ror #21
   1ca60:	andeq	ip, r1, ip, ror #21
   1ca64:	andeq	ip, r1, ip, ror #21
   1ca68:	mov	r3, #1
   1ca6c:	str	r3, [sp, #48]	; 0x30
   1ca70:	mov	r3, #1
   1ca74:	str	r3, [sp, #32]
   1ca78:	str	r3, [sp, #60]	; 0x3c
   1ca7c:	ldr	r3, [pc, #4068]	; 1da68 <__assert_fail@plt+0xbec4>
   1ca80:	str	r3, [sp, #72]	; 0x48
   1ca84:	mov	fp, #0
   1ca88:	mov	sl, #2
   1ca8c:	mov	r6, #0
   1ca90:	ldr	r3, [sp, #48]	; 0x30
   1ca94:	eor	r3, r3, #1
   1ca98:	str	r3, [sp, #68]	; 0x44
   1ca9c:	b	1d384 <__assert_fail@plt+0xb7e0>
   1caa0:	mov	r3, #0
   1caa4:	str	r3, [sp, #32]
   1caa8:	mov	fp, r3
   1caac:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cab0:	ldr	r3, [sp, #32]
   1cab4:	cmp	r3, #0
   1cab8:	bne	1cc0c <__assert_fail@plt+0xb068>
   1cabc:	cmp	r7, #0
   1cac0:	beq	1cc2c <__assert_fail@plt+0xb088>
   1cac4:	ldr	r3, [sp, #36]	; 0x24
   1cac8:	mov	r2, #34	; 0x22
   1cacc:	strb	r2, [r3]
   1cad0:	mov	r3, #1
   1cad4:	str	r3, [sp, #48]	; 0x30
   1cad8:	str	r3, [sp, #60]	; 0x3c
   1cadc:	ldr	r3, [pc, #3980]	; 1da70 <__assert_fail@plt+0xbecc>
   1cae0:	str	r3, [sp, #72]	; 0x48
   1cae4:	mov	fp, #1
   1cae8:	b	1ca8c <__assert_fail@plt+0xaee8>
   1caec:	cmp	sl, #10
   1caf0:	beq	1cb14 <__assert_fail@plt+0xaf70>
   1caf4:	mov	r1, sl
   1caf8:	ldr	r0, [pc, #3948]	; 1da6c <__assert_fail@plt+0xbec8>
   1cafc:	bl	1c898 <__assert_fail@plt+0xacf4>
   1cb00:	str	r0, [sp, #164]	; 0xa4
   1cb04:	mov	r1, sl
   1cb08:	ldr	r0, [pc, #3928]	; 1da68 <__assert_fail@plt+0xbec4>
   1cb0c:	bl	1c898 <__assert_fail@plt+0xacf4>
   1cb10:	str	r0, [sp, #168]	; 0xa8
   1cb14:	ldr	r3, [sp, #32]
   1cb18:	cmp	r3, #0
   1cb1c:	movne	fp, #0
   1cb20:	bne	1cb58 <__assert_fail@plt+0xafb4>
   1cb24:	ldr	r3, [sp, #164]	; 0xa4
   1cb28:	ldrb	r3, [r3]
   1cb2c:	cmp	r3, #0
   1cb30:	beq	1cb78 <__assert_fail@plt+0xafd4>
   1cb34:	ldr	r2, [sp, #164]	; 0xa4
   1cb38:	mov	fp, #0
   1cb3c:	ldr	r1, [sp, #36]	; 0x24
   1cb40:	cmp	r7, fp
   1cb44:	strbhi	r3, [r1, fp]
   1cb48:	add	fp, fp, #1
   1cb4c:	ldrb	r3, [r2, #1]!
   1cb50:	cmp	r3, #0
   1cb54:	bne	1cb40 <__assert_fail@plt+0xaf9c>
   1cb58:	ldr	r0, [sp, #168]	; 0xa8
   1cb5c:	bl	11988 <strlen@plt>
   1cb60:	str	r0, [sp, #60]	; 0x3c
   1cb64:	ldr	r3, [sp, #168]	; 0xa8
   1cb68:	str	r3, [sp, #72]	; 0x48
   1cb6c:	mov	r3, #1
   1cb70:	str	r3, [sp, #48]	; 0x30
   1cb74:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cb78:	mov	fp, #0
   1cb7c:	b	1cb58 <__assert_fail@plt+0xafb4>
   1cb80:	ldr	r3, [sp, #32]
   1cb84:	cmp	r3, #0
   1cb88:	bne	1cc48 <__assert_fail@plt+0xb0a4>
   1cb8c:	mov	r3, #1
   1cb90:	str	r3, [sp, #48]	; 0x30
   1cb94:	cmp	r7, #0
   1cb98:	beq	1cc64 <__assert_fail@plt+0xb0c0>
   1cb9c:	ldr	r3, [sp, #36]	; 0x24
   1cba0:	mov	r2, #39	; 0x27
   1cba4:	strb	r2, [r3]
   1cba8:	mov	r3, #0
   1cbac:	str	r3, [sp, #32]
   1cbb0:	mov	r3, #1
   1cbb4:	str	r3, [sp, #60]	; 0x3c
   1cbb8:	ldr	r3, [pc, #3752]	; 1da68 <__assert_fail@plt+0xbec4>
   1cbbc:	str	r3, [sp, #72]	; 0x48
   1cbc0:	mov	fp, #1
   1cbc4:	mov	sl, #2
   1cbc8:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cbcc:	ldr	r3, [sp, #32]
   1cbd0:	cmp	r3, #0
   1cbd4:	beq	1cb94 <__assert_fail@plt+0xaff0>
   1cbd8:	mov	r3, #1
   1cbdc:	str	r3, [sp, #60]	; 0x3c
   1cbe0:	ldr	r3, [pc, #3712]	; 1da68 <__assert_fail@plt+0xbec4>
   1cbe4:	str	r3, [sp, #72]	; 0x48
   1cbe8:	mov	fp, #0
   1cbec:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cbf0:	bl	11b68 <abort@plt>
   1cbf4:	mov	r3, #0
   1cbf8:	str	r3, [sp, #32]
   1cbfc:	mov	r3, #1
   1cc00:	str	r3, [sp, #48]	; 0x30
   1cc04:	mov	fp, #0
   1cc08:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cc0c:	ldr	r3, [sp, #32]
   1cc10:	str	r3, [sp, #48]	; 0x30
   1cc14:	mov	r3, #1
   1cc18:	str	r3, [sp, #60]	; 0x3c
   1cc1c:	ldr	r3, [pc, #3660]	; 1da70 <__assert_fail@plt+0xbecc>
   1cc20:	str	r3, [sp, #72]	; 0x48
   1cc24:	mov	fp, #0
   1cc28:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cc2c:	mov	r3, #1
   1cc30:	str	r3, [sp, #48]	; 0x30
   1cc34:	str	r3, [sp, #60]	; 0x3c
   1cc38:	ldr	r3, [pc, #3632]	; 1da70 <__assert_fail@plt+0xbecc>
   1cc3c:	str	r3, [sp, #72]	; 0x48
   1cc40:	mov	fp, #1
   1cc44:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cc48:	mov	r3, #1
   1cc4c:	str	r3, [sp, #60]	; 0x3c
   1cc50:	ldr	r3, [pc, #3600]	; 1da68 <__assert_fail@plt+0xbec4>
   1cc54:	str	r3, [sp, #72]	; 0x48
   1cc58:	mov	fp, #0
   1cc5c:	mov	sl, #2
   1cc60:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cc64:	mov	r3, #0
   1cc68:	str	r3, [sp, #32]
   1cc6c:	mov	r3, #1
   1cc70:	str	r3, [sp, #60]	; 0x3c
   1cc74:	ldr	r3, [pc, #3564]	; 1da68 <__assert_fail@plt+0xbec4>
   1cc78:	str	r3, [sp, #72]	; 0x48
   1cc7c:	mov	fp, #1
   1cc80:	mov	sl, #2
   1cc84:	b	1ca8c <__assert_fail@plt+0xaee8>
   1cc88:	mov	r3, #0
   1cc8c:	str	r3, [sp, #56]	; 0x38
   1cc90:	ldr	r3, [sp, #52]	; 0x34
   1cc94:	add	r2, r3, r6
   1cc98:	str	r2, [sp, #64]	; 0x40
   1cc9c:	ldrb	r4, [r3, r6]
   1cca0:	cmp	r4, #126	; 0x7e
   1cca4:	ldrls	pc, [pc, r4, lsl #2]
   1cca8:	b	1d4e4 <__assert_fail@plt+0xb940>
   1ccac:	andeq	ip, r1, r4, asr #29
   1ccb0:	andeq	sp, r1, r4, ror #9
   1ccb4:	andeq	sp, r1, r4, ror #9
   1ccb8:	andeq	sp, r1, r4, ror #9
   1ccbc:	andeq	sp, r1, r4, ror #9
   1ccc0:	andeq	sp, r1, r4, ror #9
   1ccc4:	andeq	sp, r1, r4, ror #9
   1ccc8:	andeq	sp, r1, r0, lsr #4
   1cccc:			; <UNDEFINED> instruction: 0x0001cebc
   1ccd0:	ldrdeq	sp, [r1], -r8
   1ccd4:	ldrdeq	sp, [r1], -r0
   1ccd8:	andeq	sp, r1, r0, asr #2
   1ccdc:	andeq	sp, r1, r8, lsr r1
   1cce0:			; <UNDEFINED> instruction: 0x0001ceb4
   1cce4:	andeq	sp, r1, r4, ror #9
   1cce8:	andeq	sp, r1, r4, ror #9
   1ccec:	andeq	sp, r1, r4, ror #9
   1ccf0:	andeq	sp, r1, r4, ror #9
   1ccf4:	andeq	sp, r1, r4, ror #9
   1ccf8:	andeq	sp, r1, r4, ror #9
   1ccfc:	andeq	sp, r1, r4, ror #9
   1cd00:	andeq	sp, r1, r4, ror #9
   1cd04:	andeq	sp, r1, r4, ror #9
   1cd08:	andeq	sp, r1, r4, ror #9
   1cd0c:	andeq	sp, r1, r4, ror #9
   1cd10:	andeq	sp, r1, r4, ror #9
   1cd14:	andeq	sp, r1, r4, ror #9
   1cd18:	andeq	sp, r1, r4, ror #9
   1cd1c:	andeq	sp, r1, r4, ror #9
   1cd20:	andeq	sp, r1, r4, ror #9
   1cd24:	andeq	sp, r1, r4, ror #9
   1cd28:	andeq	sp, r1, r4, ror #9
   1cd2c:	andeq	sp, r1, r4, ror r2
   1cd30:	andeq	sp, r1, r0, ror r2
   1cd34:	andeq	sp, r1, r0, ror r2
   1cd38:	andeq	sp, r1, r8, asr #4
   1cd3c:	andeq	sp, r1, r0, ror r2
   1cd40:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd44:	andeq	sp, r1, r0, ror r2
   1cd48:	andeq	sp, r1, r8, asr #8
   1cd4c:	andeq	sp, r1, r0, ror r2
   1cd50:	andeq	sp, r1, r0, ror r2
   1cd54:	andeq	sp, r1, r0, ror r2
   1cd58:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd5c:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd60:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd64:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd68:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd6c:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd70:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd74:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd78:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd7c:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd80:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd84:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd88:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd8c:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd90:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd94:			; <UNDEFINED> instruction: 0x0001d8b8
   1cd98:	andeq	sp, r1, r0, ror r2
   1cd9c:	andeq	sp, r1, r0, ror r2
   1cda0:	andeq	sp, r1, r0, ror r2
   1cda4:	andeq	sp, r1, r0, ror r2
   1cda8:	andeq	ip, r1, ip, asr #31
   1cdac:	andeq	sp, r1, r4, ror #9
   1cdb0:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdb4:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdb8:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdbc:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdc0:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdc4:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdc8:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdcc:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdd0:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdd4:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdd8:			; <UNDEFINED> instruction: 0x0001d8b8
   1cddc:			; <UNDEFINED> instruction: 0x0001d8b8
   1cde0:			; <UNDEFINED> instruction: 0x0001d8b8
   1cde4:			; <UNDEFINED> instruction: 0x0001d8b8
   1cde8:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdec:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdf0:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdf4:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdf8:			; <UNDEFINED> instruction: 0x0001d8b8
   1cdfc:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce00:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce04:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce08:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce0c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce10:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce14:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce18:	andeq	sp, r1, r0, ror r2
   1ce1c:	andeq	sp, r1, r8, asr #2
   1ce20:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce24:	andeq	sp, r1, r0, ror r2
   1ce28:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce2c:	andeq	sp, r1, r0, ror r2
   1ce30:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce34:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce38:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce3c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce40:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce44:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce48:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce4c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce50:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce54:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce58:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce5c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce60:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce64:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce68:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce6c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce70:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce74:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce78:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce7c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce80:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce84:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce88:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce8c:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce90:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce94:			; <UNDEFINED> instruction: 0x0001d8b8
   1ce98:	andeq	sp, r1, r8, lsr #4
   1ce9c:	andeq	sp, r1, r0, ror r2
   1cea0:	andeq	sp, r1, r8, lsr #4
   1cea4:	andeq	sp, r1, r8, asr #4
   1cea8:	mov	r3, #0
   1ceac:	str	r3, [sp, #56]	; 0x38
   1ceb0:	b	1cc90 <__assert_fail@plt+0xb0ec>
   1ceb4:	mov	r3, #114	; 0x72
   1ceb8:	b	1d1dc <__assert_fail@plt+0xb638>
   1cebc:	mov	r3, #98	; 0x62
   1cec0:	b	1d1f4 <__assert_fail@plt+0xb650>
   1cec4:	ldr	r3, [sp, #48]	; 0x30
   1cec8:	cmp	r3, #0
   1cecc:	beq	1cfb4 <__assert_fail@plt+0xb410>
   1ced0:	ldr	r3, [sp, #32]
   1ced4:	cmp	r3, #0
   1ced8:	bne	1da3c <__assert_fail@plt+0xbe98>
   1cedc:	ldr	r3, [sp, #44]	; 0x2c
   1cee0:	eor	r3, r3, #1
   1cee4:	cmp	sl, #2
   1cee8:	movne	r3, #0
   1ceec:	andeq	r3, r3, #1
   1cef0:	cmp	r3, #0
   1cef4:	moveq	r2, fp
   1cef8:	beq	1cf3c <__assert_fail@plt+0xb398>
   1cefc:	cmp	r7, fp
   1cf00:	ldrhi	r2, [sp, #36]	; 0x24
   1cf04:	movhi	r1, #39	; 0x27
   1cf08:	strbhi	r1, [r2, fp]
   1cf0c:	add	r2, fp, #1
   1cf10:	cmp	r7, r2
   1cf14:	ldrhi	r1, [sp, #36]	; 0x24
   1cf18:	movhi	r0, #36	; 0x24
   1cf1c:	strbhi	r0, [r1, r2]
   1cf20:	add	r2, fp, #2
   1cf24:	cmp	r7, r2
   1cf28:	ldrhi	r1, [sp, #36]	; 0x24
   1cf2c:	movhi	r0, #39	; 0x27
   1cf30:	strbhi	r0, [r1, r2]
   1cf34:	add	r2, fp, #3
   1cf38:	str	r3, [sp, #44]	; 0x2c
   1cf3c:	cmp	r7, r2
   1cf40:	ldrhi	r3, [sp, #36]	; 0x24
   1cf44:	movhi	r1, #92	; 0x5c
   1cf48:	strbhi	r1, [r3, r2]
   1cf4c:	add	fp, r2, #1
   1cf50:	cmp	r5, #0
   1cf54:	beq	1d8c0 <__assert_fail@plt+0xbd1c>
   1cf58:	add	r3, r6, #1
   1cf5c:	ldr	r1, [sp, #28]
   1cf60:	cmp	r1, r3
   1cf64:	bls	1d8d0 <__assert_fail@plt+0xbd2c>
   1cf68:	ldr	r1, [sp, #52]	; 0x34
   1cf6c:	ldrb	r3, [r1, r3]
   1cf70:	sub	r3, r3, #48	; 0x30
   1cf74:	uxtb	r3, r3
   1cf78:	cmp	r3, #9
   1cf7c:	bhi	1d8dc <__assert_fail@plt+0xbd38>
   1cf80:	cmp	r7, fp
   1cf84:	movhi	r3, #48	; 0x30
   1cf88:	ldrhi	r1, [sp, #36]	; 0x24
   1cf8c:	strbhi	r3, [r1, fp]
   1cf90:	add	r3, r2, #2
   1cf94:	cmp	r7, r3
   1cf98:	movhi	r1, #48	; 0x30
   1cf9c:	ldrhi	r0, [sp, #36]	; 0x24
   1cfa0:	strbhi	r1, [r0, r3]
   1cfa4:	add	fp, r2, #3
   1cfa8:	ldr	r8, [sp, #32]
   1cfac:	mov	r4, #48	; 0x30
   1cfb0:	b	1d28c <__assert_fail@plt+0xb6e8>
   1cfb4:	ldr	r3, [sp, #156]	; 0x9c
   1cfb8:	tst	r3, #1
   1cfbc:	bne	1d380 <__assert_fail@plt+0xb7dc>
   1cfc0:	ldr	r5, [sp, #48]	; 0x30
   1cfc4:	mov	r8, r5
   1cfc8:	b	1d28c <__assert_fail@plt+0xb6e8>
   1cfcc:	cmp	sl, #2
   1cfd0:	beq	1cfe8 <__assert_fail@plt+0xb444>
   1cfd4:	cmp	sl, #5
   1cfd8:	beq	1d000 <__assert_fail@plt+0xb45c>
   1cfdc:	mov	r8, #0
   1cfe0:	mov	r5, r8
   1cfe4:	b	1d28c <__assert_fail@plt+0xb6e8>
   1cfe8:	ldr	r3, [sp, #32]
   1cfec:	cmp	r3, #0
   1cff0:	bne	1da50 <__assert_fail@plt+0xbeac>
   1cff4:	mov	r8, r3
   1cff8:	mov	r5, r3
   1cffc:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d000:	ldr	r3, [sp, #156]	; 0x9c
   1d004:	tst	r3, #4
   1d008:	beq	1d8e8 <__assert_fail@plt+0xbd44>
   1d00c:	add	r3, r6, #2
   1d010:	ldr	r2, [sp, #28]
   1d014:	cmp	r2, r3
   1d018:	bls	1d8f4 <__assert_fail@plt+0xbd50>
   1d01c:	ldr	r2, [sp, #52]	; 0x34
   1d020:	add	r2, r2, r6
   1d024:	ldrb	r2, [r2, #1]
   1d028:	cmp	r2, #63	; 0x3f
   1d02c:	movne	r8, #0
   1d030:	movne	r5, r8
   1d034:	bne	1d28c <__assert_fail@plt+0xb6e8>
   1d038:	ldr	r2, [sp, #52]	; 0x34
   1d03c:	ldrb	r2, [r2, r3]
   1d040:	sub	r1, r2, #33	; 0x21
   1d044:	cmp	r1, #29
   1d048:	ldrls	pc, [pc, r1, lsl #2]
   1d04c:	b	1d900 <__assert_fail@plt+0xbd5c>
   1d050:	andeq	sp, r1, r8, asr #1
   1d054:	andeq	sp, r1, r0, lsl #18
   1d058:	andeq	sp, r1, r0, lsl #18
   1d05c:	andeq	sp, r1, r0, lsl #18
   1d060:	andeq	sp, r1, r0, lsl #18
   1d064:	andeq	sp, r1, r0, lsl #18
   1d068:	andeq	sp, r1, r8, asr #1
   1d06c:	andeq	sp, r1, r8, asr #1
   1d070:	andeq	sp, r1, r8, asr #1
   1d074:	andeq	sp, r1, r0, lsl #18
   1d078:	andeq	sp, r1, r0, lsl #18
   1d07c:	andeq	sp, r1, r0, lsl #18
   1d080:	andeq	sp, r1, r8, asr #1
   1d084:	andeq	sp, r1, r0, lsl #18
   1d088:	andeq	sp, r1, r8, asr #1
   1d08c:	andeq	sp, r1, r0, lsl #18
   1d090:	andeq	sp, r1, r0, lsl #18
   1d094:	andeq	sp, r1, r0, lsl #18
   1d098:	andeq	sp, r1, r0, lsl #18
   1d09c:	andeq	sp, r1, r0, lsl #18
   1d0a0:	andeq	sp, r1, r0, lsl #18
   1d0a4:	andeq	sp, r1, r0, lsl #18
   1d0a8:	andeq	sp, r1, r0, lsl #18
   1d0ac:	andeq	sp, r1, r0, lsl #18
   1d0b0:	andeq	sp, r1, r0, lsl #18
   1d0b4:	andeq	sp, r1, r0, lsl #18
   1d0b8:	andeq	sp, r1, r0, lsl #18
   1d0bc:	andeq	sp, r1, r8, asr #1
   1d0c0:	andeq	sp, r1, r8, asr #1
   1d0c4:	andeq	sp, r1, r8, asr #1
   1d0c8:	ldr	r1, [sp, #32]
   1d0cc:	cmp	r1, #0
   1d0d0:	bne	1db10 <__assert_fail@plt+0xbf6c>
   1d0d4:	cmp	r7, fp
   1d0d8:	movhi	r1, #63	; 0x3f
   1d0dc:	ldrhi	r0, [sp, #36]	; 0x24
   1d0e0:	strbhi	r1, [r0, fp]
   1d0e4:	add	r1, fp, #1
   1d0e8:	cmp	r7, r1
   1d0ec:	ldrhi	r0, [sp, #36]	; 0x24
   1d0f0:	movhi	ip, #34	; 0x22
   1d0f4:	strbhi	ip, [r0, r1]
   1d0f8:	add	r1, fp, #2
   1d0fc:	cmp	r7, r1
   1d100:	ldrhi	r0, [sp, #36]	; 0x24
   1d104:	movhi	ip, #34	; 0x22
   1d108:	strbhi	ip, [r0, r1]
   1d10c:	add	r1, fp, #3
   1d110:	cmp	r7, r1
   1d114:	movhi	r0, #63	; 0x3f
   1d118:	ldrhi	ip, [sp, #36]	; 0x24
   1d11c:	strbhi	r0, [ip, r1]
   1d120:	add	fp, fp, #4
   1d124:	ldr	r5, [sp, #32]
   1d128:	mov	r8, r5
   1d12c:	mov	r4, r2
   1d130:	mov	r6, r3
   1d134:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d138:	mov	r3, #102	; 0x66
   1d13c:	b	1d1f4 <__assert_fail@plt+0xb650>
   1d140:	mov	r3, #118	; 0x76
   1d144:	b	1d1f4 <__assert_fail@plt+0xb650>
   1d148:	cmp	sl, #2
   1d14c:	beq	1d1b8 <__assert_fail@plt+0xb614>
   1d150:	ldr	r3, [sp, #48]	; 0x30
   1d154:	ldr	r2, [sp, #32]
   1d158:	and	r3, r3, r2
   1d15c:	tst	r9, r3
   1d160:	moveq	r3, r4
   1d164:	beq	1d1f4 <__assert_fail@plt+0xb650>
   1d168:	mov	r8, #0
   1d16c:	mov	r5, r8
   1d170:	eor	r5, r5, #1
   1d174:	ldr	r3, [sp, #44]	; 0x2c
   1d178:	and	r5, r5, r3
   1d17c:	tst	r5, #255	; 0xff
   1d180:	beq	1d360 <__assert_fail@plt+0xb7bc>
   1d184:	cmp	r7, fp
   1d188:	ldrhi	r3, [sp, #36]	; 0x24
   1d18c:	movhi	r2, #39	; 0x27
   1d190:	strbhi	r2, [r3, fp]
   1d194:	add	r3, fp, #1
   1d198:	cmp	r7, r3
   1d19c:	ldrhi	r2, [sp, #36]	; 0x24
   1d1a0:	movhi	r1, #39	; 0x27
   1d1a4:	strbhi	r1, [r2, r3]
   1d1a8:	add	fp, fp, #2
   1d1ac:	mov	r3, #0
   1d1b0:	str	r3, [sp, #44]	; 0x2c
   1d1b4:	b	1d360 <__assert_fail@plt+0xb7bc>
   1d1b8:	ldr	r3, [sp, #32]
   1d1bc:	cmp	r3, #0
   1d1c0:	bne	1da5c <__assert_fail@plt+0xbeb8>
   1d1c4:	mov	r8, r3
   1d1c8:	mov	r5, r3
   1d1cc:	b	1d170 <__assert_fail@plt+0xb5cc>
   1d1d0:	mov	r3, #110	; 0x6e
   1d1d4:	b	1d1dc <__assert_fail@plt+0xb638>
   1d1d8:	mov	r3, #116	; 0x74
   1d1dc:	ldr	r2, [sp, #32]
   1d1e0:	cmp	sl, #2
   1d1e4:	movne	r2, #0
   1d1e8:	andeq	r2, r2, #1
   1d1ec:	cmp	r2, #0
   1d1f0:	bne	1d214 <__assert_fail@plt+0xb670>
   1d1f4:	ldr	r2, [sp, #48]	; 0x30
   1d1f8:	cmp	r2, #0
   1d1fc:	moveq	r8, r2
   1d200:	moveq	r5, r2
   1d204:	beq	1d28c <__assert_fail@plt+0xb6e8>
   1d208:	mov	r4, r3
   1d20c:	mov	r8, #0
   1d210:	b	1d2e4 <__assert_fail@plt+0xb740>
   1d214:	mov	r8, sl
   1d218:	mov	sl, r7
   1d21c:	b	1da88 <__assert_fail@plt+0xbee4>
   1d220:	mov	r3, #97	; 0x61
   1d224:	b	1d1f4 <__assert_fail@plt+0xb650>
   1d228:	ldr	r3, [sp, #28]
   1d22c:	cmn	r3, #1
   1d230:	beq	1d25c <__assert_fail@plt+0xb6b8>
   1d234:	ldr	r3, [sp, #28]
   1d238:	subs	r3, r3, #1
   1d23c:	movne	r3, #1
   1d240:	cmp	r3, #0
   1d244:	bne	1d90c <__assert_fail@plt+0xbd68>
   1d248:	cmp	r6, #0
   1d24c:	beq	1d274 <__assert_fail@plt+0xb6d0>
   1d250:	mov	r8, #0
   1d254:	mov	r5, r8
   1d258:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d25c:	ldr	r3, [sp, #52]	; 0x34
   1d260:	ldrb	r3, [r3, #1]
   1d264:	adds	r3, r3, #0
   1d268:	movne	r3, #1
   1d26c:	b	1d240 <__assert_fail@plt+0xb69c>
   1d270:	mov	r8, #0
   1d274:	ldr	r5, [sp, #32]
   1d278:	cmp	sl, #2
   1d27c:	movne	r5, #0
   1d280:	andeq	r5, r5, #1
   1d284:	cmp	r5, #0
   1d288:	bne	1d43c <__assert_fail@plt+0xb898>
   1d28c:	ldr	r3, [sp, #68]	; 0x44
   1d290:	cmp	sl, #2
   1d294:	orreq	r3, r3, #1
   1d298:	eor	r3, r3, #1
   1d29c:	ldr	r2, [sp, #32]
   1d2a0:	orr	r3, r2, r3
   1d2a4:	tst	r3, #255	; 0xff
   1d2a8:	beq	1d2d8 <__assert_fail@plt+0xb734>
   1d2ac:	ldr	r3, [sp, #160]	; 0xa0
   1d2b0:	cmp	r3, #0
   1d2b4:	beq	1d2d8 <__assert_fail@plt+0xb734>
   1d2b8:	lsr	r2, r4, #5
   1d2bc:	uxtb	r2, r2
   1d2c0:	and	r3, r4, #31
   1d2c4:	ldr	r1, [sp, #160]	; 0xa0
   1d2c8:	ldr	r2, [r1, r2, lsl #2]
   1d2cc:	lsr	r3, r2, r3
   1d2d0:	tst	r3, #1
   1d2d4:	bne	1d2e4 <__assert_fail@plt+0xb740>
   1d2d8:	ldr	r3, [sp, #56]	; 0x38
   1d2dc:	cmp	r3, #0
   1d2e0:	beq	1d170 <__assert_fail@plt+0xb5cc>
   1d2e4:	ldr	r3, [sp, #32]
   1d2e8:	cmp	r3, #0
   1d2ec:	bne	1daf8 <__assert_fail@plt+0xbf54>
   1d2f0:	ldr	r3, [sp, #44]	; 0x2c
   1d2f4:	eor	r3, r3, #1
   1d2f8:	cmp	sl, #2
   1d2fc:	movne	r3, #0
   1d300:	andeq	r3, r3, #1
   1d304:	cmp	r3, #0
   1d308:	beq	1d34c <__assert_fail@plt+0xb7a8>
   1d30c:	cmp	r7, fp
   1d310:	ldrhi	r2, [sp, #36]	; 0x24
   1d314:	movhi	r1, #39	; 0x27
   1d318:	strbhi	r1, [r2, fp]
   1d31c:	add	r2, fp, #1
   1d320:	cmp	r7, r2
   1d324:	ldrhi	r1, [sp, #36]	; 0x24
   1d328:	movhi	r0, #36	; 0x24
   1d32c:	strbhi	r0, [r1, r2]
   1d330:	add	r2, fp, #2
   1d334:	cmp	r7, r2
   1d338:	ldrhi	r1, [sp, #36]	; 0x24
   1d33c:	movhi	r0, #39	; 0x27
   1d340:	strbhi	r0, [r1, r2]
   1d344:	add	fp, fp, #3
   1d348:	str	r3, [sp, #44]	; 0x2c
   1d34c:	cmp	r7, fp
   1d350:	ldrhi	r3, [sp, #36]	; 0x24
   1d354:	movhi	r2, #92	; 0x5c
   1d358:	strbhi	r2, [r3, fp]
   1d35c:	add	fp, fp, #1
   1d360:	cmp	fp, r7
   1d364:	ldrcc	r3, [sp, #36]	; 0x24
   1d368:	strbcc	r4, [r3, fp]
   1d36c:	add	fp, fp, #1
   1d370:	ldr	r3, [sp, #40]	; 0x28
   1d374:	cmp	r8, #0
   1d378:	moveq	r3, #0
   1d37c:	str	r3, [sp, #40]	; 0x28
   1d380:	add	r6, r6, #1
   1d384:	ldr	r3, [sp, #28]
   1d388:	cmn	r3, #1
   1d38c:	beq	1d918 <__assert_fail@plt+0xbd74>
   1d390:	ldr	r3, [sp, #28]
   1d394:	subs	r8, r3, r6
   1d398:	movne	r8, #1
   1d39c:	cmp	r8, #0
   1d3a0:	beq	1d92c <__assert_fail@plt+0xbd88>
   1d3a4:	ldr	r5, [sp, #48]	; 0x30
   1d3a8:	cmp	sl, #2
   1d3ac:	moveq	r5, #0
   1d3b0:	andne	r5, r5, #1
   1d3b4:	ldr	r3, [sp, #60]	; 0x3c
   1d3b8:	adds	r9, r3, #0
   1d3bc:	movne	r9, #1
   1d3c0:	ands	r2, r5, r9
   1d3c4:	str	r2, [sp, #56]	; 0x38
   1d3c8:	beq	1cc90 <__assert_fail@plt+0xb0ec>
   1d3cc:	add	r4, r6, r3
   1d3d0:	ldr	r2, [sp, #28]
   1d3d4:	cmp	r3, #1
   1d3d8:	movls	r3, #0
   1d3dc:	movhi	r3, #1
   1d3e0:	cmn	r2, #1
   1d3e4:	movne	r3, #0
   1d3e8:	cmp	r3, #0
   1d3ec:	beq	1d3fc <__assert_fail@plt+0xb858>
   1d3f0:	ldr	r0, [sp, #52]	; 0x34
   1d3f4:	bl	11988 <strlen@plt>
   1d3f8:	str	r0, [sp, #28]
   1d3fc:	ldr	r3, [sp, #28]
   1d400:	cmp	r3, r4
   1d404:	bcc	1cc88 <__assert_fail@plt+0xb0e4>
   1d408:	ldr	r2, [sp, #60]	; 0x3c
   1d40c:	ldr	r1, [sp, #72]	; 0x48
   1d410:	ldr	r3, [sp, #52]	; 0x34
   1d414:	add	r0, r3, r6
   1d418:	bl	117c0 <memcmp@plt>
   1d41c:	cmp	r0, #0
   1d420:	bne	1cea8 <__assert_fail@plt+0xb304>
   1d424:	ldr	r3, [sp, #32]
   1d428:	cmp	r3, #0
   1d42c:	beq	1cc90 <__assert_fail@plt+0xb0ec>
   1d430:	mov	r8, sl
   1d434:	mov	sl, r7
   1d438:	b	1da88 <__assert_fail@plt+0xbee4>
   1d43c:	mov	r8, sl
   1d440:	mov	sl, r7
   1d444:	b	1da88 <__assert_fail@plt+0xbee4>
   1d448:	cmp	sl, #2
   1d44c:	strne	r8, [sp, #80]	; 0x50
   1d450:	movne	r5, #0
   1d454:	bne	1d28c <__assert_fail@plt+0xb6e8>
   1d458:	ldr	r3, [sp, #32]
   1d45c:	cmp	r3, #0
   1d460:	bne	1da74 <__assert_fail@plt+0xbed0>
   1d464:	ldr	r2, [sp, #76]	; 0x4c
   1d468:	adds	r3, r7, #0
   1d46c:	movne	r3, #1
   1d470:	cmp	r2, #0
   1d474:	movne	r3, #0
   1d478:	cmp	r3, #0
   1d47c:	movne	r3, #0
   1d480:	bne	1d4b0 <__assert_fail@plt+0xb90c>
   1d484:	cmp	r7, fp
   1d488:	ldrhi	r3, [sp, #36]	; 0x24
   1d48c:	movhi	r2, #39	; 0x27
   1d490:	strbhi	r2, [r3, fp]
   1d494:	add	r3, fp, #1
   1d498:	cmp	r7, r3
   1d49c:	ldrhi	r2, [sp, #36]	; 0x24
   1d4a0:	movhi	r1, #92	; 0x5c
   1d4a4:	strbhi	r1, [r2, r3]
   1d4a8:	mov	r3, r7
   1d4ac:	ldr	r7, [sp, #76]	; 0x4c
   1d4b0:	add	r2, fp, #2
   1d4b4:	cmp	r2, r3
   1d4b8:	ldrcc	r1, [sp, #36]	; 0x24
   1d4bc:	movcc	r0, #39	; 0x27
   1d4c0:	strbcc	r0, [r1, r2]
   1d4c4:	add	fp, fp, #3
   1d4c8:	ldr	r2, [sp, #32]
   1d4cc:	mov	r5, r2
   1d4d0:	str	r8, [sp, #80]	; 0x50
   1d4d4:	str	r2, [sp, #44]	; 0x2c
   1d4d8:	str	r7, [sp, #76]	; 0x4c
   1d4dc:	mov	r7, r3
   1d4e0:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d4e4:	ldr	r5, [sp, #84]	; 0x54
   1d4e8:	cmp	r5, #1
   1d4ec:	beq	1d51c <__assert_fail@plt+0xb978>
   1d4f0:	mov	r3, #0
   1d4f4:	str	r3, [sp, #104]	; 0x68
   1d4f8:	str	r3, [sp, #108]	; 0x6c
   1d4fc:	ldr	r3, [sp, #28]
   1d500:	cmn	r3, #1
   1d504:	beq	1d550 <__assert_fail@plt+0xb9ac>
   1d508:	mov	r3, #0
   1d50c:	str	r4, [sp, #88]	; 0x58
   1d510:	str	fp, [sp, #92]	; 0x5c
   1d514:	mov	fp, r3
   1d518:	b	1d678 <__assert_fail@plt+0xbad4>
   1d51c:	bl	11964 <__ctype_b_loc@plt>
   1d520:	ldr	r2, [r0]
   1d524:	lsl	r3, r4, #1
   1d528:	ldrh	r8, [r2, r3]
   1d52c:	lsr	r8, r8, #14
   1d530:	and	r8, r8, #1
   1d534:	mov	r2, r5
   1d538:	eor	r5, r8, #1
   1d53c:	ldr	r3, [sp, #48]	; 0x30
   1d540:	and	r5, r5, r3
   1d544:	ands	r5, r5, #255	; 0xff
   1d548:	beq	1d28c <__assert_fail@plt+0xb6e8>
   1d54c:	b	1d710 <__assert_fail@plt+0xbb6c>
   1d550:	ldr	r0, [sp, #52]	; 0x34
   1d554:	bl	11988 <strlen@plt>
   1d558:	str	r0, [sp, #28]
   1d55c:	b	1d508 <__assert_fail@plt+0xb964>
   1d560:	mov	r2, fp
   1d564:	mov	r1, r4
   1d568:	ldr	r4, [sp, #88]	; 0x58
   1d56c:	ldr	fp, [sp, #92]	; 0x5c
   1d570:	ldr	r0, [sp, #28]
   1d574:	cmp	r0, r5
   1d578:	bls	1d744 <__assert_fail@plt+0xbba0>
   1d57c:	ldrb	r3, [r1]
   1d580:	cmp	r3, #0
   1d584:	beq	1d74c <__assert_fail@plt+0xbba8>
   1d588:	mov	r3, r1
   1d58c:	add	r2, r2, #1
   1d590:	add	r1, r6, r2
   1d594:	cmp	r0, r1
   1d598:	bls	1d754 <__assert_fail@plt+0xbbb0>
   1d59c:	ldrb	r1, [r3, #1]!
   1d5a0:	cmp	r1, #0
   1d5a4:	bne	1d58c <__assert_fail@plt+0xb9e8>
   1d5a8:	mov	r8, #0
   1d5ac:	b	1d708 <__assert_fail@plt+0xbb64>
   1d5b0:	cmp	r4, r5
   1d5b4:	beq	1d654 <__assert_fail@plt+0xbab0>
   1d5b8:	ldrb	r3, [r4, #1]!
   1d5bc:	sub	r3, r3, #91	; 0x5b
   1d5c0:	cmp	r3, #33	; 0x21
   1d5c4:	ldrls	pc, [pc, r3, lsl #2]
   1d5c8:	b	1d5b0 <__assert_fail@plt+0xba0c>
   1d5cc:	andeq	sp, r1, r0, lsl #21
   1d5d0:	andeq	sp, r1, r0, lsl #21
   1d5d4:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5d8:	andeq	sp, r1, r0, lsl #21
   1d5dc:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5e0:	andeq	sp, r1, r0, lsl #21
   1d5e4:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5e8:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5ec:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5f0:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5f4:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5f8:			; <UNDEFINED> instruction: 0x0001d5b0
   1d5fc:			; <UNDEFINED> instruction: 0x0001d5b0
   1d600:			; <UNDEFINED> instruction: 0x0001d5b0
   1d604:			; <UNDEFINED> instruction: 0x0001d5b0
   1d608:			; <UNDEFINED> instruction: 0x0001d5b0
   1d60c:			; <UNDEFINED> instruction: 0x0001d5b0
   1d610:			; <UNDEFINED> instruction: 0x0001d5b0
   1d614:			; <UNDEFINED> instruction: 0x0001d5b0
   1d618:			; <UNDEFINED> instruction: 0x0001d5b0
   1d61c:			; <UNDEFINED> instruction: 0x0001d5b0
   1d620:			; <UNDEFINED> instruction: 0x0001d5b0
   1d624:			; <UNDEFINED> instruction: 0x0001d5b0
   1d628:			; <UNDEFINED> instruction: 0x0001d5b0
   1d62c:			; <UNDEFINED> instruction: 0x0001d5b0
   1d630:			; <UNDEFINED> instruction: 0x0001d5b0
   1d634:			; <UNDEFINED> instruction: 0x0001d5b0
   1d638:			; <UNDEFINED> instruction: 0x0001d5b0
   1d63c:			; <UNDEFINED> instruction: 0x0001d5b0
   1d640:			; <UNDEFINED> instruction: 0x0001d5b0
   1d644:			; <UNDEFINED> instruction: 0x0001d5b0
   1d648:			; <UNDEFINED> instruction: 0x0001d5b0
   1d64c:			; <UNDEFINED> instruction: 0x0001d5b0
   1d650:	andeq	sp, r1, r0, lsl #21
   1d654:	ldr	r0, [sp, #100]	; 0x64
   1d658:	bl	11838 <iswprint@plt>
   1d65c:	cmp	r0, #0
   1d660:	moveq	r8, #0
   1d664:	add	fp, fp, r9
   1d668:	add	r0, sp, #104	; 0x68
   1d66c:	bl	117b4 <mbsinit@plt>
   1d670:	cmp	r0, #0
   1d674:	bne	1d6e8 <__assert_fail@plt+0xbb44>
   1d678:	add	r5, r6, fp
   1d67c:	ldr	r3, [sp, #52]	; 0x34
   1d680:	add	r4, r3, r5
   1d684:	add	r3, sp, #104	; 0x68
   1d688:	ldr	r2, [sp, #28]
   1d68c:	sub	r2, r2, r5
   1d690:	mov	r1, r4
   1d694:	add	r0, sp, #100	; 0x64
   1d698:	bl	1b49c <__assert_fail@plt+0x98f8>
   1d69c:	subs	r9, r0, #0
   1d6a0:	beq	1d75c <__assert_fail@plt+0xbbb8>
   1d6a4:	cmn	r9, #1
   1d6a8:	beq	1d6f8 <__assert_fail@plt+0xbb54>
   1d6ac:	cmn	r9, #2
   1d6b0:	beq	1d560 <__assert_fail@plt+0xb9bc>
   1d6b4:	ldr	r3, [sp, #32]
   1d6b8:	cmp	sl, #2
   1d6bc:	movne	r3, #0
   1d6c0:	andeq	r3, r3, #1
   1d6c4:	cmp	r3, #0
   1d6c8:	beq	1d654 <__assert_fail@plt+0xbab0>
   1d6cc:	cmp	r9, #1
   1d6d0:	bls	1d654 <__assert_fail@plt+0xbab0>
   1d6d4:	sub	r3, r9, #1
   1d6d8:	add	r5, r3, r5
   1d6dc:	ldr	r3, [sp, #52]	; 0x34
   1d6e0:	add	r5, r3, r5
   1d6e4:	b	1d5b8 <__assert_fail@plt+0xba14>
   1d6e8:	ldr	r4, [sp, #88]	; 0x58
   1d6ec:	mov	r2, fp
   1d6f0:	ldr	fp, [sp, #92]	; 0x5c
   1d6f4:	b	1d708 <__assert_fail@plt+0xbb64>
   1d6f8:	ldr	r4, [sp, #88]	; 0x58
   1d6fc:	mov	r2, fp
   1d700:	ldr	fp, [sp, #92]	; 0x5c
   1d704:	mov	r8, #0
   1d708:	cmp	r2, #1
   1d70c:	bls	1d538 <__assert_fail@plt+0xb994>
   1d710:	add	r1, r6, r2
   1d714:	ldr	ip, [sp, #64]	; 0x40
   1d718:	mov	r5, #0
   1d71c:	eor	r3, r8, #1
   1d720:	ldr	r2, [sp, #48]	; 0x30
   1d724:	and	r3, r3, r2
   1d728:	uxtb	r3, r3
   1d72c:	ldr	r9, [sp, #32]
   1d730:	ldr	lr, [sp, #44]	; 0x2c
   1d734:	ldr	r2, [sp, #56]	; 0x38
   1d738:	str	r8, [sp, #56]	; 0x38
   1d73c:	ldr	r0, [sp, #36]	; 0x24
   1d740:	b	1d7dc <__assert_fail@plt+0xbc38>
   1d744:	mov	r8, #0
   1d748:	b	1d708 <__assert_fail@plt+0xbb64>
   1d74c:	mov	r8, #0
   1d750:	b	1d708 <__assert_fail@plt+0xbb64>
   1d754:	mov	r8, #0
   1d758:	b	1d708 <__assert_fail@plt+0xbb64>
   1d75c:	ldr	r4, [sp, #88]	; 0x58
   1d760:	mov	r2, fp
   1d764:	ldr	fp, [sp, #92]	; 0x5c
   1d768:	b	1d708 <__assert_fail@plt+0xbb64>
   1d76c:	cmp	r2, #0
   1d770:	beq	1d784 <__assert_fail@plt+0xbbe0>
   1d774:	cmp	r7, fp
   1d778:	movhi	r2, #92	; 0x5c
   1d77c:	strbhi	r2, [r0, fp]
   1d780:	add	fp, fp, #1
   1d784:	add	r8, r6, #1
   1d788:	cmp	r1, r8
   1d78c:	bls	1d894 <__assert_fail@plt+0xbcf0>
   1d790:	eor	r2, r5, #1
   1d794:	and	r2, r2, lr
   1d798:	ands	r2, r2, #255	; 0xff
   1d79c:	beq	1d8b0 <__assert_fail@plt+0xbd0c>
   1d7a0:	cmp	r7, fp
   1d7a4:	movhi	r2, #39	; 0x27
   1d7a8:	strbhi	r2, [r0, fp]
   1d7ac:	add	r2, fp, #1
   1d7b0:	cmp	r7, r2
   1d7b4:	movhi	lr, #39	; 0x27
   1d7b8:	strbhi	lr, [r0, r2]
   1d7bc:	add	fp, fp, #2
   1d7c0:	mov	r6, r8
   1d7c4:	mov	r2, r3
   1d7c8:	mov	lr, r3
   1d7cc:	cmp	r7, fp
   1d7d0:	strbhi	r4, [r0, fp]
   1d7d4:	add	fp, fp, #1
   1d7d8:	ldrb	r4, [ip, #1]!
   1d7dc:	cmp	r3, #0
   1d7e0:	beq	1d76c <__assert_fail@plt+0xbbc8>
   1d7e4:	cmp	r9, #0
   1d7e8:	bne	1daec <__assert_fail@plt+0xbf48>
   1d7ec:	eor	r5, lr, #1
   1d7f0:	cmp	sl, #2
   1d7f4:	movne	r5, #0
   1d7f8:	andeq	r5, r5, #1
   1d7fc:	cmp	r5, #0
   1d800:	beq	1d838 <__assert_fail@plt+0xbc94>
   1d804:	cmp	r7, fp
   1d808:	movhi	lr, #39	; 0x27
   1d80c:	strbhi	lr, [r0, fp]
   1d810:	add	lr, fp, #1
   1d814:	cmp	r7, lr
   1d818:	movhi	r8, #36	; 0x24
   1d81c:	strbhi	r8, [r0, lr]
   1d820:	add	lr, fp, #2
   1d824:	cmp	r7, lr
   1d828:	movhi	r8, #39	; 0x27
   1d82c:	strbhi	r8, [r0, lr]
   1d830:	add	fp, fp, #3
   1d834:	mov	lr, r5
   1d838:	cmp	r7, fp
   1d83c:	movhi	r5, #92	; 0x5c
   1d840:	strbhi	r5, [r0, fp]
   1d844:	add	r5, fp, #1
   1d848:	cmp	r7, r5
   1d84c:	lsrhi	r8, r4, #6
   1d850:	addhi	r8, r8, #48	; 0x30
   1d854:	strbhi	r8, [r0, r5]
   1d858:	add	r8, fp, #2
   1d85c:	cmp	r7, r8
   1d860:	lsrhi	r5, r4, #3
   1d864:	andhi	r5, r5, #7
   1d868:	addhi	r5, r5, #48	; 0x30
   1d86c:	strbhi	r5, [r0, r8]
   1d870:	add	fp, fp, #3
   1d874:	and	r4, r4, #7
   1d878:	add	r4, r4, #48	; 0x30
   1d87c:	add	r5, r6, #1
   1d880:	cmp	r1, r5
   1d884:	bls	1d8a0 <__assert_fail@plt+0xbcfc>
   1d888:	mov	r6, r5
   1d88c:	mov	r5, r3
   1d890:	b	1d7cc <__assert_fail@plt+0xbc28>
   1d894:	str	lr, [sp, #44]	; 0x2c
   1d898:	ldr	r8, [sp, #56]	; 0x38
   1d89c:	b	1d170 <__assert_fail@plt+0xb5cc>
   1d8a0:	str	lr, [sp, #44]	; 0x2c
   1d8a4:	ldr	r8, [sp, #56]	; 0x38
   1d8a8:	mov	r5, r3
   1d8ac:	b	1d170 <__assert_fail@plt+0xb5cc>
   1d8b0:	mov	r6, r8
   1d8b4:	b	1d7cc <__assert_fail@plt+0xbc28>
   1d8b8:	mov	r5, #0
   1d8bc:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d8c0:	mov	r8, r5
   1d8c4:	ldr	r5, [sp, #48]	; 0x30
   1d8c8:	mov	r4, #48	; 0x30
   1d8cc:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d8d0:	ldr	r8, [sp, #32]
   1d8d4:	mov	r4, #48	; 0x30
   1d8d8:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d8dc:	ldr	r8, [sp, #32]
   1d8e0:	mov	r4, #48	; 0x30
   1d8e4:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d8e8:	mov	r8, #0
   1d8ec:	mov	r5, r8
   1d8f0:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d8f4:	mov	r8, #0
   1d8f8:	mov	r5, r8
   1d8fc:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d900:	mov	r8, #0
   1d904:	mov	r5, r8
   1d908:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d90c:	mov	r8, #0
   1d910:	mov	r5, r8
   1d914:	b	1d28c <__assert_fail@plt+0xb6e8>
   1d918:	ldr	r3, [sp, #52]	; 0x34
   1d91c:	ldrb	r8, [r3, r6]
   1d920:	adds	r8, r8, #0
   1d924:	movne	r8, #1
   1d928:	b	1d39c <__assert_fail@plt+0xb7f8>
   1d92c:	cmp	sl, #2
   1d930:	movne	r3, #0
   1d934:	moveq	r3, #1
   1d938:	ldr	r1, [sp, #32]
   1d93c:	mov	r2, r1
   1d940:	and	r2, r2, r3
   1d944:	cmp	fp, #0
   1d948:	movne	r2, #0
   1d94c:	andeq	r2, r2, #1
   1d950:	cmp	r2, #0
   1d954:	bne	1db04 <__assert_fail@plt+0xbf60>
   1d958:	eor	r2, r1, #1
   1d95c:	and	r3, r3, r2
   1d960:	ldr	r1, [sp, #80]	; 0x50
   1d964:	tst	r1, r3
   1d968:	beq	1d9e0 <__assert_fail@plt+0xbe3c>
   1d96c:	ldr	r3, [sp, #40]	; 0x28
   1d970:	cmp	r3, #0
   1d974:	bne	1d99c <__assert_fail@plt+0xbdf8>
   1d978:	ldr	r1, [sp, #76]	; 0x4c
   1d97c:	clz	r3, r7
   1d980:	lsr	r3, r3, #5
   1d984:	cmp	r1, #0
   1d988:	moveq	r3, #0
   1d98c:	cmp	r3, #0
   1d990:	beq	1d9e0 <__assert_fail@plt+0xbe3c>
   1d994:	ldr	r7, [sp, #76]	; 0x4c
   1d998:	b	1ca30 <__assert_fail@plt+0xae8c>
   1d99c:	ldr	r3, [sp, #168]	; 0xa8
   1d9a0:	str	r3, [sp, #16]
   1d9a4:	ldr	r3, [sp, #164]	; 0xa4
   1d9a8:	str	r3, [sp, #12]
   1d9ac:	ldr	r3, [sp, #160]	; 0xa0
   1d9b0:	str	r3, [sp, #8]
   1d9b4:	ldr	r3, [sp, #156]	; 0x9c
   1d9b8:	str	r3, [sp, #4]
   1d9bc:	mov	r3, #5
   1d9c0:	str	r3, [sp]
   1d9c4:	ldr	r3, [sp, #28]
   1d9c8:	ldr	r2, [sp, #52]	; 0x34
   1d9cc:	ldr	r1, [sp, #76]	; 0x4c
   1d9d0:	ldr	r0, [sp, #36]	; 0x24
   1d9d4:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1d9d8:	mov	fp, r0
   1d9dc:	b	1dae0 <__assert_fail@plt+0xbf3c>
   1d9e0:	mov	sl, r7
   1d9e4:	ldr	r3, [sp, #72]	; 0x48
   1d9e8:	cmp	r3, #0
   1d9ec:	moveq	r2, #0
   1d9f0:	andne	r2, r2, #1
   1d9f4:	cmp	r2, #0
   1d9f8:	beq	1da28 <__assert_fail@plt+0xbe84>
   1d9fc:	mov	r2, r3
   1da00:	ldrb	r3, [r3]
   1da04:	cmp	r3, #0
   1da08:	beq	1da28 <__assert_fail@plt+0xbe84>
   1da0c:	ldr	r1, [sp, #36]	; 0x24
   1da10:	cmp	sl, fp
   1da14:	strbhi	r3, [r1, fp]
   1da18:	add	fp, fp, #1
   1da1c:	ldrb	r3, [r2, #1]!
   1da20:	cmp	r3, #0
   1da24:	bne	1da10 <__assert_fail@plt+0xbe6c>
   1da28:	cmp	sl, fp
   1da2c:	movhi	r3, #0
   1da30:	ldrhi	r2, [sp, #36]	; 0x24
   1da34:	strbhi	r3, [r2, fp]
   1da38:	b	1dae0 <__assert_fail@plt+0xbf3c>
   1da3c:	mov	r8, sl
   1da40:	mov	sl, r7
   1da44:	ldr	r3, [sp, #32]
   1da48:	str	r3, [sp, #48]	; 0x30
   1da4c:	b	1da88 <__assert_fail@plt+0xbee4>
   1da50:	mov	r8, sl
   1da54:	mov	sl, r7
   1da58:	b	1da88 <__assert_fail@plt+0xbee4>
   1da5c:	mov	r8, sl
   1da60:	mov	sl, r7
   1da64:	b	1da88 <__assert_fail@plt+0xbee4>
   1da68:	andeq	r0, r3, r8, rrx
   1da6c:	andeq	r0, r3, r8, lsl sl
   1da70:	andeq	r0, r3, ip, lsl #20
   1da74:	mov	r8, sl
   1da78:	mov	sl, r7
   1da7c:	b	1da88 <__assert_fail@plt+0xbee4>
   1da80:	mov	r8, sl
   1da84:	mov	sl, r7
   1da88:	ldr	r3, [sp, #48]	; 0x30
   1da8c:	cmp	r8, #2
   1da90:	movne	r3, #0
   1da94:	andeq	r3, r3, #1
   1da98:	cmp	r3, #0
   1da9c:	movne	r8, #4
   1daa0:	ldr	r3, [sp, #168]	; 0xa8
   1daa4:	str	r3, [sp, #16]
   1daa8:	ldr	r3, [sp, #164]	; 0xa4
   1daac:	str	r3, [sp, #12]
   1dab0:	mov	r3, #0
   1dab4:	str	r3, [sp, #8]
   1dab8:	ldr	r3, [sp, #156]	; 0x9c
   1dabc:	bic	r3, r3, #2
   1dac0:	str	r3, [sp, #4]
   1dac4:	str	r8, [sp]
   1dac8:	ldr	r3, [sp, #28]
   1dacc:	ldr	r2, [sp, #52]	; 0x34
   1dad0:	mov	r1, sl
   1dad4:	ldr	r0, [sp, #36]	; 0x24
   1dad8:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1dadc:	mov	fp, r0
   1dae0:	mov	r0, fp
   1dae4:	add	sp, sp, #116	; 0x74
   1dae8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1daec:	mov	r8, sl
   1daf0:	mov	sl, r7
   1daf4:	b	1da88 <__assert_fail@plt+0xbee4>
   1daf8:	mov	r8, sl
   1dafc:	mov	sl, r7
   1db00:	b	1da88 <__assert_fail@plt+0xbee4>
   1db04:	mov	r8, sl
   1db08:	mov	sl, r7
   1db0c:	b	1da88 <__assert_fail@plt+0xbee4>
   1db10:	mov	r8, sl
   1db14:	mov	sl, r7
   1db18:	b	1daa0 <__assert_fail@plt+0xbefc>
   1db1c:	mov	r3, #1
   1db20:	str	r3, [sp, #32]
   1db24:	str	r3, [sp, #48]	; 0x30
   1db28:	str	r3, [sp, #60]	; 0x3c
   1db2c:	ldr	r3, [pc, #-196]	; 1da70 <__assert_fail@plt+0xbecc>
   1db30:	str	r3, [sp, #72]	; 0x48
   1db34:	mov	fp, #0
   1db38:	mov	sl, #5
   1db3c:	b	1ca8c <__assert_fail@plt+0xaee8>
   1db40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db44:	sub	sp, sp, #52	; 0x34
   1db48:	mov	r5, r0
   1db4c:	str	r1, [sp, #24]
   1db50:	str	r2, [sp, #28]
   1db54:	mov	r4, r3
   1db58:	bl	119b8 <__errno_location@plt>
   1db5c:	str	r0, [sp, #32]
   1db60:	ldr	r3, [r0]
   1db64:	str	r3, [sp, #36]	; 0x24
   1db68:	ldr	r3, [pc, #396]	; 1dcfc <__assert_fail@plt+0xc158>
   1db6c:	ldr	r6, [r3]
   1db70:	cmn	r5, #-2147483647	; 0x80000001
   1db74:	movne	r3, #0
   1db78:	moveq	r3, #1
   1db7c:	orrs	r3, r3, r5, lsr #31
   1db80:	bne	1dcc0 <__assert_fail@plt+0xc11c>
   1db84:	ldr	r3, [pc, #368]	; 1dcfc <__assert_fail@plt+0xc158>
   1db88:	ldr	r2, [r3, #4]
   1db8c:	cmp	r5, r2
   1db90:	blt	1dbf8 <__assert_fail@plt+0xc054>
   1db94:	str	r2, [sp, #44]	; 0x2c
   1db98:	add	r3, r3, #8
   1db9c:	cmp	r6, r3
   1dba0:	beq	1dcc4 <__assert_fail@plt+0xc120>
   1dba4:	sub	r2, r5, r2
   1dba8:	mov	r3, #8
   1dbac:	str	r3, [sp]
   1dbb0:	mvn	r3, #-2147483648	; 0x80000000
   1dbb4:	add	r2, r2, #1
   1dbb8:	add	r1, sp, #44	; 0x2c
   1dbbc:	mov	r0, r6
   1dbc0:	bl	2c2d8 <__assert_fail@plt+0x1a734>
   1dbc4:	mov	r6, r0
   1dbc8:	ldr	r3, [pc, #300]	; 1dcfc <__assert_fail@plt+0xc158>
   1dbcc:	str	r0, [r3]
   1dbd0:	ldr	r7, [pc, #292]	; 1dcfc <__assert_fail@plt+0xc158>
   1dbd4:	ldr	r0, [r7, #4]
   1dbd8:	ldr	r2, [sp, #44]	; 0x2c
   1dbdc:	sub	r2, r2, r0
   1dbe0:	lsl	r2, r2, #3
   1dbe4:	mov	r1, #0
   1dbe8:	add	r0, r6, r0, lsl #3
   1dbec:	bl	119e8 <memset@plt>
   1dbf0:	ldr	r3, [sp, #44]	; 0x2c
   1dbf4:	str	r3, [r7, #4]
   1dbf8:	add	fp, r6, r5, lsl #3
   1dbfc:	ldr	r8, [r6, r5, lsl #3]
   1dc00:	ldr	r7, [fp, #4]
   1dc04:	ldr	r9, [r4, #4]
   1dc08:	orr	r9, r9, #1
   1dc0c:	add	sl, r4, #8
   1dc10:	ldr	r3, [r4, #44]	; 0x2c
   1dc14:	str	r3, [sp, #16]
   1dc18:	ldr	r3, [r4, #40]	; 0x28
   1dc1c:	str	r3, [sp, #12]
   1dc20:	str	sl, [sp, #8]
   1dc24:	str	r9, [sp, #4]
   1dc28:	ldr	r3, [r4]
   1dc2c:	str	r3, [sp]
   1dc30:	ldr	r3, [sp, #28]
   1dc34:	ldr	r2, [sp, #24]
   1dc38:	mov	r1, r8
   1dc3c:	mov	r0, r7
   1dc40:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1dc44:	cmp	r8, r0
   1dc48:	bhi	1dca8 <__assert_fail@plt+0xc104>
   1dc4c:	add	r8, r0, #1
   1dc50:	str	r8, [r6, r5, lsl #3]
   1dc54:	ldr	r3, [pc, #164]	; 1dd00 <__assert_fail@plt+0xc15c>
   1dc58:	cmp	r7, r3
   1dc5c:	beq	1dc68 <__assert_fail@plt+0xc0c4>
   1dc60:	mov	r0, r7
   1dc64:	bl	17204 <__assert_fail@plt+0x5660>
   1dc68:	mov	r0, r8
   1dc6c:	bl	2c154 <__assert_fail@plt+0x1a5b0>
   1dc70:	mov	r7, r0
   1dc74:	str	r0, [fp, #4]
   1dc78:	ldr	r3, [r4, #44]	; 0x2c
   1dc7c:	str	r3, [sp, #16]
   1dc80:	ldr	r3, [r4, #40]	; 0x28
   1dc84:	str	r3, [sp, #12]
   1dc88:	str	sl, [sp, #8]
   1dc8c:	str	r9, [sp, #4]
   1dc90:	ldr	r3, [r4]
   1dc94:	str	r3, [sp]
   1dc98:	ldr	r3, [sp, #28]
   1dc9c:	ldr	r2, [sp, #24]
   1dca0:	mov	r1, r8
   1dca4:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1dca8:	ldr	r3, [sp, #32]
   1dcac:	ldr	r2, [sp, #36]	; 0x24
   1dcb0:	str	r2, [r3]
   1dcb4:	mov	r0, r7
   1dcb8:	add	sp, sp, #52	; 0x34
   1dcbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dcc0:	bl	11b68 <abort@plt>
   1dcc4:	sub	r2, r5, r2
   1dcc8:	mov	r3, #8
   1dccc:	str	r3, [sp]
   1dcd0:	mvn	r3, #-2147483648	; 0x80000000
   1dcd4:	add	r2, r2, #1
   1dcd8:	add	r1, sp, #44	; 0x2c
   1dcdc:	mov	r0, #0
   1dce0:	bl	2c2d8 <__assert_fail@plt+0x1a734>
   1dce4:	mov	r6, r0
   1dce8:	ldr	r3, [pc, #12]	; 1dcfc <__assert_fail@plt+0xc158>
   1dcec:	str	r0, [r3], #8
   1dcf0:	ldm	r3, {r0, r1}
   1dcf4:	stm	r6, {r0, r1}
   1dcf8:	b	1dbd0 <__assert_fail@plt+0xc02c>
   1dcfc:	ldrdeq	r2, [r4], -ip
   1dd00:	andeq	r2, r4, ip, asr #5
   1dd04:	push	{r4, r5, r6, lr}
   1dd08:	mov	r4, r0
   1dd0c:	bl	119b8 <__errno_location@plt>
   1dd10:	mov	r5, r0
   1dd14:	ldr	r6, [r0]
   1dd18:	cmp	r4, #0
   1dd1c:	ldr	r3, [pc, #20]	; 1dd38 <__assert_fail@plt+0xc194>
   1dd20:	moveq	r4, r3
   1dd24:	mov	r1, #48	; 0x30
   1dd28:	mov	r0, r4
   1dd2c:	bl	2c640 <__assert_fail@plt+0x1aa9c>
   1dd30:	str	r6, [r5]
   1dd34:	pop	{r4, r5, r6, pc}
   1dd38:	andeq	r2, r4, ip, asr #7
   1dd3c:	subs	r3, r0, #0
   1dd40:	ldr	r2, [pc, #8]	; 1dd50 <__assert_fail@plt+0xc1ac>
   1dd44:	moveq	r3, r2
   1dd48:	ldr	r0, [r3]
   1dd4c:	bx	lr
   1dd50:	andeq	r2, r4, ip, asr #7
   1dd54:	subs	r3, r0, #0
   1dd58:	ldr	r2, [pc, #8]	; 1dd68 <__assert_fail@plt+0xc1c4>
   1dd5c:	moveq	r3, r2
   1dd60:	str	r1, [r3]
   1dd64:	bx	lr
   1dd68:	andeq	r2, r4, ip, asr #7
   1dd6c:	push	{lr}		; (str lr, [sp, #-4]!)
   1dd70:	subs	r3, r0, #0
   1dd74:	ldr	r0, [pc, #44]	; 1dda8 <__assert_fail@plt+0xc204>
   1dd78:	moveq	r3, r0
   1dd7c:	add	r3, r3, #8
   1dd80:	lsr	lr, r1, #5
   1dd84:	and	r1, r1, #31
   1dd88:	ldr	ip, [r3, lr, lsl #2]
   1dd8c:	lsr	r0, ip, r1
   1dd90:	eor	r2, r2, r0
   1dd94:	and	r2, r2, #1
   1dd98:	eor	r1, ip, r2, lsl r1
   1dd9c:	str	r1, [r3, lr, lsl #2]
   1dda0:	and	r0, r0, #1
   1dda4:	pop	{pc}		; (ldr pc, [sp], #4)
   1dda8:	andeq	r2, r4, ip, asr #7
   1ddac:	subs	r3, r0, #0
   1ddb0:	ldr	r2, [pc, #12]	; 1ddc4 <__assert_fail@plt+0xc220>
   1ddb4:	moveq	r3, r2
   1ddb8:	ldr	r0, [r3, #4]
   1ddbc:	str	r1, [r3, #4]
   1ddc0:	bx	lr
   1ddc4:	andeq	r2, r4, ip, asr #7
   1ddc8:	subs	r3, r0, #0
   1ddcc:	ldr	r0, [pc, #40]	; 1ddfc <__assert_fail@plt+0xc258>
   1ddd0:	moveq	r3, r0
   1ddd4:	mov	r0, #10
   1ddd8:	str	r0, [r3]
   1dddc:	cmp	r2, #0
   1dde0:	cmpne	r1, #0
   1dde4:	beq	1ddf4 <__assert_fail@plt+0xc250>
   1dde8:	str	r1, [r3, #40]	; 0x28
   1ddec:	str	r2, [r3, #44]	; 0x2c
   1ddf0:	bx	lr
   1ddf4:	push	{r4, lr}
   1ddf8:	bl	11b68 <abort@plt>
   1ddfc:	andeq	r2, r4, ip, asr #7
   1de00:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1de04:	sub	sp, sp, #24
   1de08:	mov	r7, r0
   1de0c:	mov	r8, r1
   1de10:	mov	r9, r2
   1de14:	mov	sl, r3
   1de18:	ldr	r4, [sp, #56]	; 0x38
   1de1c:	cmp	r4, #0
   1de20:	ldr	r3, [pc, #84]	; 1de7c <__assert_fail@plt+0xc2d8>
   1de24:	moveq	r4, r3
   1de28:	bl	119b8 <__errno_location@plt>
   1de2c:	mov	r5, r0
   1de30:	ldr	r6, [r0]
   1de34:	ldr	r3, [r4, #44]	; 0x2c
   1de38:	str	r3, [sp, #16]
   1de3c:	ldr	r3, [r4, #40]	; 0x28
   1de40:	str	r3, [sp, #12]
   1de44:	add	r3, r4, #8
   1de48:	str	r3, [sp, #8]
   1de4c:	ldr	r3, [r4, #4]
   1de50:	str	r3, [sp, #4]
   1de54:	ldr	r3, [r4]
   1de58:	str	r3, [sp]
   1de5c:	mov	r3, sl
   1de60:	mov	r2, r9
   1de64:	mov	r1, r8
   1de68:	mov	r0, r7
   1de6c:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1de70:	str	r6, [r5]
   1de74:	add	sp, sp, #24
   1de78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1de7c:	andeq	r2, r4, ip, asr #7
   1de80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de84:	sub	sp, sp, #44	; 0x2c
   1de88:	str	r0, [sp, #28]
   1de8c:	str	r1, [sp, #32]
   1de90:	mov	r6, r2
   1de94:	subs	r4, r3, #0
   1de98:	ldr	r3, [pc, #172]	; 1df4c <__assert_fail@plt+0xc3a8>
   1de9c:	moveq	r4, r3
   1dea0:	bl	119b8 <__errno_location@plt>
   1dea4:	mov	r7, r0
   1dea8:	ldr	fp, [r0]
   1deac:	ldr	r5, [r4, #4]
   1deb0:	cmp	r6, #0
   1deb4:	orreq	r5, r5, #1
   1deb8:	add	r9, r4, #8
   1debc:	ldr	r3, [r4, #44]	; 0x2c
   1dec0:	str	r3, [sp, #16]
   1dec4:	ldr	r3, [r4, #40]	; 0x28
   1dec8:	str	r3, [sp, #12]
   1decc:	str	r9, [sp, #8]
   1ded0:	str	r5, [sp, #4]
   1ded4:	ldr	r3, [r4]
   1ded8:	str	r3, [sp]
   1dedc:	ldr	r3, [sp, #32]
   1dee0:	ldr	r2, [sp, #28]
   1dee4:	mov	r1, #0
   1dee8:	mov	r0, r1
   1deec:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1def0:	mov	sl, r0
   1def4:	add	r8, r0, #1
   1def8:	mov	r0, r8
   1defc:	bl	2c154 <__assert_fail@plt+0x1a5b0>
   1df00:	str	r0, [sp, #36]	; 0x24
   1df04:	ldr	r3, [r4, #44]	; 0x2c
   1df08:	str	r3, [sp, #16]
   1df0c:	ldr	r3, [r4, #40]	; 0x28
   1df10:	str	r3, [sp, #12]
   1df14:	str	r9, [sp, #8]
   1df18:	str	r5, [sp, #4]
   1df1c:	ldr	r3, [r4]
   1df20:	str	r3, [sp]
   1df24:	ldr	r3, [sp, #32]
   1df28:	ldr	r2, [sp, #28]
   1df2c:	mov	r1, r8
   1df30:	bl	1c9d0 <__assert_fail@plt+0xae2c>
   1df34:	str	fp, [r7]
   1df38:	cmp	r6, #0
   1df3c:	strne	sl, [r6]
   1df40:	ldr	r0, [sp, #36]	; 0x24
   1df44:	add	sp, sp, #44	; 0x2c
   1df48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1df4c:	andeq	r2, r4, ip, asr #7
   1df50:	push	{r4, lr}
   1df54:	mov	r3, r2
   1df58:	mov	r2, #0
   1df5c:	bl	1de80 <__assert_fail@plt+0xc2dc>
   1df60:	pop	{r4, pc}
   1df64:	push	{r4, r5, r6, r7, r8, lr}
   1df68:	ldr	r3, [pc, #140]	; 1dffc <__assert_fail@plt+0xc458>
   1df6c:	ldr	r7, [r3]
   1df70:	ldr	r3, [r3, #4]
   1df74:	cmp	r3, #1
   1df78:	ble	1dfa4 <__assert_fail@plt+0xc400>
   1df7c:	mov	r5, r7
   1df80:	mov	r4, #1
   1df84:	ldr	r6, [pc, #112]	; 1dffc <__assert_fail@plt+0xc458>
   1df88:	ldr	r0, [r5, #12]
   1df8c:	bl	17204 <__assert_fail@plt+0x5660>
   1df90:	add	r4, r4, #1
   1df94:	add	r5, r5, #8
   1df98:	ldr	r3, [r6, #4]
   1df9c:	cmp	r3, r4
   1dfa0:	bgt	1df88 <__assert_fail@plt+0xc3e4>
   1dfa4:	ldr	r0, [r7, #4]
   1dfa8:	ldr	r3, [pc, #80]	; 1e000 <__assert_fail@plt+0xc45c>
   1dfac:	cmp	r0, r3
   1dfb0:	beq	1dfcc <__assert_fail@plt+0xc428>
   1dfb4:	bl	17204 <__assert_fail@plt+0x5660>
   1dfb8:	ldr	r3, [pc, #60]	; 1dffc <__assert_fail@plt+0xc458>
   1dfbc:	mov	r2, #256	; 0x100
   1dfc0:	str	r2, [r3, #8]
   1dfc4:	ldr	r2, [pc, #52]	; 1e000 <__assert_fail@plt+0xc45c>
   1dfc8:	str	r2, [r3, #12]
   1dfcc:	ldr	r3, [pc, #48]	; 1e004 <__assert_fail@plt+0xc460>
   1dfd0:	cmp	r7, r3
   1dfd4:	beq	1dfec <__assert_fail@plt+0xc448>
   1dfd8:	mov	r0, r7
   1dfdc:	bl	17204 <__assert_fail@plt+0x5660>
   1dfe0:	ldr	r3, [pc, #20]	; 1dffc <__assert_fail@plt+0xc458>
   1dfe4:	add	r2, r3, #8
   1dfe8:	str	r2, [r3]
   1dfec:	mov	r2, #1
   1dff0:	ldr	r3, [pc, #4]	; 1dffc <__assert_fail@plt+0xc458>
   1dff4:	str	r2, [r3, #4]
   1dff8:	pop	{r4, r5, r6, r7, r8, pc}
   1dffc:	ldrdeq	r2, [r4], -ip
   1e000:	andeq	r2, r4, ip, asr #5
   1e004:	andeq	r2, r4, r4, ror #3
   1e008:	push	{r4, lr}
   1e00c:	ldr	r3, [pc, #8]	; 1e01c <__assert_fail@plt+0xc478>
   1e010:	mvn	r2, #0
   1e014:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e018:	pop	{r4, pc}
   1e01c:	andeq	r2, r4, ip, asr #7
   1e020:	push	{r4, lr}
   1e024:	ldr	r3, [pc, #4]	; 1e030 <__assert_fail@plt+0xc48c>
   1e028:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e02c:	pop	{r4, pc}
   1e030:	andeq	r2, r4, ip, asr #7
   1e034:	push	{r4, lr}
   1e038:	mov	r1, r0
   1e03c:	mov	r0, #0
   1e040:	bl	1e008 <__assert_fail@plt+0xc464>
   1e044:	pop	{r4, pc}
   1e048:	push	{r4, lr}
   1e04c:	mov	r2, r1
   1e050:	mov	r1, r0
   1e054:	mov	r0, #0
   1e058:	bl	1e020 <__assert_fail@plt+0xc47c>
   1e05c:	pop	{r4, pc}
   1e060:	push	{r4, r5, lr}
   1e064:	sub	sp, sp, #52	; 0x34
   1e068:	mov	r4, r0
   1e06c:	mov	r5, r2
   1e070:	mov	r0, sp
   1e074:	bl	1c868 <__assert_fail@plt+0xacc4>
   1e078:	mov	r3, sp
   1e07c:	mvn	r2, #0
   1e080:	mov	r1, r5
   1e084:	mov	r0, r4
   1e088:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e08c:	add	sp, sp, #52	; 0x34
   1e090:	pop	{r4, r5, pc}
   1e094:	push	{r4, r5, r6, lr}
   1e098:	sub	sp, sp, #48	; 0x30
   1e09c:	mov	r4, r0
   1e0a0:	mov	r5, r2
   1e0a4:	mov	r6, r3
   1e0a8:	mov	r0, sp
   1e0ac:	bl	1c868 <__assert_fail@plt+0xacc4>
   1e0b0:	mov	r3, sp
   1e0b4:	mov	r2, r6
   1e0b8:	mov	r1, r5
   1e0bc:	mov	r0, r4
   1e0c0:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e0c4:	add	sp, sp, #48	; 0x30
   1e0c8:	pop	{r4, r5, r6, pc}
   1e0cc:	push	{r4, lr}
   1e0d0:	mov	r2, r1
   1e0d4:	mov	r1, r0
   1e0d8:	mov	r0, #0
   1e0dc:	bl	1e060 <__assert_fail@plt+0xc4bc>
   1e0e0:	pop	{r4, pc}
   1e0e4:	push	{r4, lr}
   1e0e8:	mov	r3, r2
   1e0ec:	mov	r2, r1
   1e0f0:	mov	r1, r0
   1e0f4:	mov	r0, #0
   1e0f8:	bl	1e094 <__assert_fail@plt+0xc4f0>
   1e0fc:	pop	{r4, pc}
   1e100:	push	{r4, r5, r6, lr}
   1e104:	sub	sp, sp, #48	; 0x30
   1e108:	mov	r4, r0
   1e10c:	mov	r5, r1
   1e110:	mov	r6, r2
   1e114:	mov	ip, sp
   1e118:	ldr	lr, [pc, #64]	; 1e160 <__assert_fail@plt+0xc5bc>
   1e11c:	ldm	lr!, {r0, r1, r2, r3}
   1e120:	stmia	ip!, {r0, r1, r2, r3}
   1e124:	ldm	lr!, {r0, r1, r2, r3}
   1e128:	stmia	ip!, {r0, r1, r2, r3}
   1e12c:	ldm	lr, {r0, r1, r2, r3}
   1e130:	stm	ip, {r0, r1, r2, r3}
   1e134:	mov	r2, #1
   1e138:	mov	r1, r6
   1e13c:	mov	r0, sp
   1e140:	bl	1dd6c <__assert_fail@plt+0xc1c8>
   1e144:	mov	r3, sp
   1e148:	mov	r2, r5
   1e14c:	mov	r1, r4
   1e150:	mov	r0, #0
   1e154:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e158:	add	sp, sp, #48	; 0x30
   1e15c:	pop	{r4, r5, r6, pc}
   1e160:	andeq	r2, r4, ip, asr #7
   1e164:	push	{r4, lr}
   1e168:	mov	r2, r1
   1e16c:	mvn	r1, #0
   1e170:	bl	1e100 <__assert_fail@plt+0xc55c>
   1e174:	pop	{r4, pc}
   1e178:	push	{r4, lr}
   1e17c:	mov	r1, #58	; 0x3a
   1e180:	bl	1e164 <__assert_fail@plt+0xc5c0>
   1e184:	pop	{r4, pc}
   1e188:	push	{r4, lr}
   1e18c:	mov	r2, #58	; 0x3a
   1e190:	bl	1e100 <__assert_fail@plt+0xc55c>
   1e194:	pop	{r4, pc}
   1e198:	push	{r4, r5, lr}
   1e19c:	sub	sp, sp, #100	; 0x64
   1e1a0:	mov	r4, r0
   1e1a4:	mov	r5, r2
   1e1a8:	mov	r0, sp
   1e1ac:	bl	1c868 <__assert_fail@plt+0xacc4>
   1e1b0:	add	lr, sp, #48	; 0x30
   1e1b4:	mov	ip, sp
   1e1b8:	ldm	ip!, {r0, r1, r2, r3}
   1e1bc:	stmia	lr!, {r0, r1, r2, r3}
   1e1c0:	ldm	ip!, {r0, r1, r2, r3}
   1e1c4:	stmia	lr!, {r0, r1, r2, r3}
   1e1c8:	ldm	ip, {r0, r1, r2, r3}
   1e1cc:	stm	lr, {r0, r1, r2, r3}
   1e1d0:	mov	r2, #1
   1e1d4:	mov	r1, #58	; 0x3a
   1e1d8:	add	r0, sp, #48	; 0x30
   1e1dc:	bl	1dd6c <__assert_fail@plt+0xc1c8>
   1e1e0:	add	r3, sp, #48	; 0x30
   1e1e4:	mvn	r2, #0
   1e1e8:	mov	r1, r5
   1e1ec:	mov	r0, r4
   1e1f0:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e1f4:	add	sp, sp, #100	; 0x64
   1e1f8:	pop	{r4, r5, pc}
   1e1fc:	push	{r4, r5, r6, r7, lr}
   1e200:	sub	sp, sp, #52	; 0x34
   1e204:	mov	r4, r0
   1e208:	mov	r6, r1
   1e20c:	mov	r7, r2
   1e210:	mov	r5, r3
   1e214:	mov	ip, sp
   1e218:	ldr	lr, [pc, #64]	; 1e260 <__assert_fail@plt+0xc6bc>
   1e21c:	ldm	lr!, {r0, r1, r2, r3}
   1e220:	stmia	ip!, {r0, r1, r2, r3}
   1e224:	ldm	lr!, {r0, r1, r2, r3}
   1e228:	stmia	ip!, {r0, r1, r2, r3}
   1e22c:	ldm	lr, {r0, r1, r2, r3}
   1e230:	stm	ip, {r0, r1, r2, r3}
   1e234:	mov	r2, r7
   1e238:	mov	r1, r6
   1e23c:	mov	r0, sp
   1e240:	bl	1ddc8 <__assert_fail@plt+0xc224>
   1e244:	mov	r3, sp
   1e248:	ldr	r2, [sp, #72]	; 0x48
   1e24c:	mov	r1, r5
   1e250:	mov	r0, r4
   1e254:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e258:	add	sp, sp, #52	; 0x34
   1e25c:	pop	{r4, r5, r6, r7, pc}
   1e260:	andeq	r2, r4, ip, asr #7
   1e264:	push	{lr}		; (str lr, [sp, #-4]!)
   1e268:	sub	sp, sp, #12
   1e26c:	mvn	ip, #0
   1e270:	str	ip, [sp]
   1e274:	bl	1e1fc <__assert_fail@plt+0xc658>
   1e278:	add	sp, sp, #12
   1e27c:	pop	{pc}		; (ldr pc, [sp], #4)
   1e280:	push	{r4, lr}
   1e284:	mov	r3, r2
   1e288:	mov	r2, r1
   1e28c:	mov	r1, r0
   1e290:	mov	r0, #0
   1e294:	bl	1e264 <__assert_fail@plt+0xc6c0>
   1e298:	pop	{r4, pc}
   1e29c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e2a0:	sub	sp, sp, #12
   1e2a4:	str	r3, [sp]
   1e2a8:	mov	r3, r2
   1e2ac:	mov	r2, r1
   1e2b0:	mov	r1, r0
   1e2b4:	mov	r0, #0
   1e2b8:	bl	1e1fc <__assert_fail@plt+0xc658>
   1e2bc:	add	sp, sp, #12
   1e2c0:	pop	{pc}		; (ldr pc, [sp], #4)
   1e2c4:	push	{r4, lr}
   1e2c8:	ldr	r3, [pc, #4]	; 1e2d4 <__assert_fail@plt+0xc730>
   1e2cc:	bl	1db40 <__assert_fail@plt+0xbf9c>
   1e2d0:	pop	{r4, pc}
   1e2d4:	andeq	r2, r4, ip, ror #3
   1e2d8:	push	{r4, lr}
   1e2dc:	mov	r2, r1
   1e2e0:	mov	r1, r0
   1e2e4:	mov	r0, #0
   1e2e8:	bl	1e2c4 <__assert_fail@plt+0xc720>
   1e2ec:	pop	{r4, pc}
   1e2f0:	push	{r4, lr}
   1e2f4:	mvn	r2, #0
   1e2f8:	bl	1e2c4 <__assert_fail@plt+0xc720>
   1e2fc:	pop	{r4, pc}
   1e300:	push	{r4, lr}
   1e304:	mov	r1, r0
   1e308:	mov	r0, #0
   1e30c:	bl	1e2f0 <__assert_fail@plt+0xc74c>
   1e310:	pop	{r4, pc}
   1e314:	ldr	r3, [r0, #80]	; 0x50
   1e318:	cmp	r3, #1
   1e31c:	beq	1e370 <__assert_fail@plt+0xc7cc>
   1e320:	add	ip, r1, #1
   1e324:	ldr	r3, [r0, #28]
   1e328:	cmp	ip, r3
   1e32c:	bge	1e378 <__assert_fail@plt+0xc7d4>
   1e330:	ldr	r0, [r0, #8]
   1e334:	add	r2, r0, ip, lsl #2
   1e338:	ldr	r0, [r0, ip, lsl #2]
   1e33c:	cmn	r0, #1
   1e340:	bne	1e380 <__assert_fail@plt+0xc7dc>
   1e344:	sub	r1, r3, r1
   1e348:	mov	r3, #2
   1e34c:	mov	r0, r3
   1e350:	cmp	r3, r1
   1e354:	beq	1e36c <__assert_fail@plt+0xc7c8>
   1e358:	add	r3, r3, #1
   1e35c:	ldr	ip, [r2, #4]!
   1e360:	cmn	ip, #1
   1e364:	beq	1e34c <__assert_fail@plt+0xc7a8>
   1e368:	bx	lr
   1e36c:	bx	lr
   1e370:	mov	r0, #1
   1e374:	bx	lr
   1e378:	mov	r0, #1
   1e37c:	bx	lr
   1e380:	mov	r0, #1
   1e384:	bx	lr
   1e388:	ldr	r3, [r0, #80]	; 0x50
   1e38c:	cmp	r3, #1
   1e390:	ldreq	r3, [r0, #4]
   1e394:	ldrbeq	r0, [r3, r1]
   1e398:	ldrne	r3, [r0, #8]
   1e39c:	ldrne	r0, [r3, r1, lsl #2]
   1e3a0:	bx	lr
   1e3a4:	ldr	ip, [r0, #36]	; 0x24
   1e3a8:	ldr	r3, [r0, #48]	; 0x30
   1e3ac:	cmp	ip, r3
   1e3b0:	movge	ip, r3
   1e3b4:	ldr	r3, [r0, #28]
   1e3b8:	cmp	ip, r3
   1e3bc:	ble	1e3ec <__assert_fail@plt+0xc848>
   1e3c0:	ldr	r2, [r0]
   1e3c4:	ldr	r1, [r0, #24]
   1e3c8:	add	r2, r2, r3
   1e3cc:	ldrb	r2, [r2, r1]
   1e3d0:	ldr	r1, [r0, #64]	; 0x40
   1e3d4:	ldrb	r1, [r1, r2]
   1e3d8:	ldr	r2, [r0, #4]
   1e3dc:	strb	r1, [r2, r3]
   1e3e0:	add	r3, r3, #1
   1e3e4:	cmp	ip, r3
   1e3e8:	bne	1e3c0 <__assert_fail@plt+0xc81c>
   1e3ec:	str	r3, [r0, #28]
   1e3f0:	str	r3, [r0, #32]
   1e3f4:	bx	lr
   1e3f8:	push	{r4, r5, lr}
   1e3fc:	mov	r4, r0
   1e400:	cmp	r1, #0
   1e404:	cmpne	r0, #0
   1e408:	moveq	r0, #1
   1e40c:	movne	r0, #0
   1e410:	beq	1e464 <__assert_fail@plt+0xc8c0>
   1e414:	mov	r5, r1
   1e418:	ldr	r2, [r4, #4]
   1e41c:	ldr	r3, [r1, #4]
   1e420:	cmp	r2, r3
   1e424:	subeq	r3, r2, #1
   1e428:	lsleq	r3, r3, #2
   1e42c:	beq	1e434 <__assert_fail@plt+0xc890>
   1e430:	pop	{r4, r5, pc}
   1e434:	subs	r2, r2, #1
   1e438:	bmi	1e45c <__assert_fail@plt+0xc8b8>
   1e43c:	ldr	ip, [r4, #8]
   1e440:	ldr	lr, [ip, r3]
   1e444:	ldr	ip, [r5, #8]
   1e448:	ldr	ip, [ip, r3]
   1e44c:	sub	r3, r3, #4
   1e450:	cmp	lr, ip
   1e454:	beq	1e434 <__assert_fail@plt+0xc890>
   1e458:	pop	{r4, r5, pc}
   1e45c:	mov	r0, #1
   1e460:	pop	{r4, r5, pc}
   1e464:	mov	r0, #0
   1e468:	pop	{r4, r5, pc}
   1e46c:	push	{r4, lr}
   1e470:	ldr	lr, [r0, #4]
   1e474:	cmp	lr, #0
   1e478:	ble	1e4fc <__assert_fail@plt+0xc958>
   1e47c:	sub	lr, lr, #1
   1e480:	mov	ip, #0
   1e484:	cmp	ip, lr
   1e488:	bcs	1e4dc <__assert_fail@plt+0xc938>
   1e48c:	add	r2, ip, lr
   1e490:	lsr	r2, r2, #1
   1e494:	ldr	r4, [r0, #8]
   1e498:	ldr	r3, [r4, r2, lsl #2]
   1e49c:	cmp	r1, r3
   1e4a0:	bgt	1e4c8 <__assert_fail@plt+0xc924>
   1e4a4:	cmp	ip, r2
   1e4a8:	bcs	1e4dc <__assert_fail@plt+0xc938>
   1e4ac:	add	r3, ip, r2
   1e4b0:	lsr	r3, r3, #1
   1e4b4:	ldr	lr, [r4, r3, lsl #2]
   1e4b8:	cmp	lr, r1
   1e4bc:	blt	1e4d0 <__assert_fail@plt+0xc92c>
   1e4c0:	mov	r2, r3
   1e4c4:	b	1e4a4 <__assert_fail@plt+0xc900>
   1e4c8:	mov	r3, r2
   1e4cc:	mov	r2, lr
   1e4d0:	add	ip, r3, #1
   1e4d4:	mov	lr, r2
   1e4d8:	b	1e484 <__assert_fail@plt+0xc8e0>
   1e4dc:	ldr	r3, [r0, #8]
   1e4e0:	ldr	r3, [r3, ip, lsl #2]
   1e4e4:	cmp	r1, r3
   1e4e8:	beq	1e4f4 <__assert_fail@plt+0xc950>
   1e4ec:	mov	r0, #0
   1e4f0:	pop	{r4, pc}
   1e4f4:	add	r0, ip, #1
   1e4f8:	pop	{r4, pc}
   1e4fc:	mov	r0, #0
   1e500:	pop	{r4, pc}
   1e504:	cmp	r1, #0
   1e508:	bxlt	lr
   1e50c:	ldr	r3, [r0, #4]
   1e510:	cmp	r1, r3
   1e514:	bxge	lr
   1e518:	sub	r3, r3, #1
   1e51c:	str	r3, [r0, #4]
   1e520:	cmp	r1, r3
   1e524:	bxge	lr
   1e528:	push	{lr}		; (str lr, [sp, #-4]!)
   1e52c:	lsl	r3, r1, #2
   1e530:	ldr	ip, [r0, #8]
   1e534:	add	r2, r3, #4
   1e538:	ldr	lr, [ip, r2]
   1e53c:	str	lr, [ip, r3]
   1e540:	add	r1, r1, #1
   1e544:	mov	r3, r2
   1e548:	ldr	r2, [r0, #4]
   1e54c:	cmp	r2, r1
   1e550:	bgt	1e530 <__assert_fail@plt+0xc98c>
   1e554:	pop	{pc}		; (ldr pc, [sp], #4)
   1e558:	ldrb	r3, [r1, #24]
   1e55c:	cmp	r3, #4
   1e560:	beq	1e574 <__assert_fail@plt+0xc9d0>
   1e564:	cmp	r3, #17
   1e568:	beq	1e5a0 <__assert_fail@plt+0xc9fc>
   1e56c:	mov	r0, #0
   1e570:	bx	lr
   1e574:	ldr	r3, [r0, #132]	; 0x84
   1e578:	cmp	r3, #0
   1e57c:	beq	1e56c <__assert_fail@plt+0xc9c8>
   1e580:	ldr	r2, [r1, #20]
   1e584:	ldr	r2, [r3, r2, lsl #2]
   1e588:	str	r2, [r1, #20]
   1e58c:	ldr	r3, [r0, #80]	; 0x50
   1e590:	mov	r1, #1
   1e594:	orr	r3, r3, r1, lsl r2
   1e598:	str	r3, [r0, #80]	; 0x50
   1e59c:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e5a0:	ldr	r3, [r1, #4]
   1e5a4:	cmp	r3, #0
   1e5a8:	beq	1e56c <__assert_fail@plt+0xc9c8>
   1e5ac:	ldrb	r2, [r3, #24]
   1e5b0:	cmp	r2, #17
   1e5b4:	bne	1e56c <__assert_fail@plt+0xc9c8>
   1e5b8:	ldr	r2, [r3, #20]
   1e5bc:	ldr	r3, [r3, #4]
   1e5c0:	str	r3, [r1, #4]
   1e5c4:	cmp	r3, #0
   1e5c8:	strne	r1, [r3]
   1e5cc:	ldr	r3, [r0, #132]	; 0x84
   1e5d0:	ldr	r1, [r1, #20]
   1e5d4:	ldr	r1, [r3, r1, lsl #2]
   1e5d8:	str	r1, [r3, r2, lsl #2]
   1e5dc:	cmp	r2, #31
   1e5e0:	ldrle	r3, [r0, #80]	; 0x50
   1e5e4:	movle	r1, #1
   1e5e8:	bicle	r2, r3, r1, lsl r2
   1e5ec:	strle	r2, [r0, #80]	; 0x50
   1e5f0:	b	1e56c <__assert_fail@plt+0xc9c8>
   1e5f4:	ldrb	r3, [r1, #24]
   1e5f8:	cmp	r3, #11
   1e5fc:	beq	1e62c <__assert_fail@plt+0xca88>
   1e600:	cmp	r3, #16
   1e604:	beq	1e63c <__assert_fail@plt+0xca98>
   1e608:	ldr	r3, [r1, #4]
   1e60c:	cmp	r3, #0
   1e610:	ldrne	r2, [r1, #16]
   1e614:	strne	r2, [r3, #16]
   1e618:	ldr	r3, [r1, #8]
   1e61c:	cmp	r3, #0
   1e620:	ldrne	r2, [r1, #16]
   1e624:	strne	r2, [r3, #16]
   1e628:	b	1e634 <__assert_fail@plt+0xca90>
   1e62c:	ldr	r3, [r1, #4]
   1e630:	str	r1, [r3, #16]
   1e634:	mov	r0, #0
   1e638:	bx	lr
   1e63c:	ldr	r3, [r1, #4]
   1e640:	ldr	r2, [r1, #8]
   1e644:	ldr	r2, [r2, #12]
   1e648:	str	r2, [r3, #16]
   1e64c:	ldr	r3, [r1, #8]
   1e650:	ldr	r2, [r1, #16]
   1e654:	str	r2, [r3, #16]
   1e658:	b	1e634 <__assert_fail@plt+0xca90>
   1e65c:	ldr	r3, [r1, #40]	; 0x28
   1e660:	ldr	ip, [r1, #56]	; 0x38
   1e664:	cmp	ip, r3
   1e668:	ble	1e6e0 <__assert_fail@plt+0xcb3c>
   1e66c:	push	{lr}		; (str lr, [sp, #-4]!)
   1e670:	ldr	ip, [r1, #4]
   1e674:	ldrb	r3, [ip, r3]
   1e678:	strb	r3, [r0]
   1e67c:	ldr	ip, [r1, #80]	; 0x50
   1e680:	cmp	ip, #1
   1e684:	ble	1e6a8 <__assert_fail@plt+0xcb04>
   1e688:	ldr	ip, [r1, #40]	; 0x28
   1e68c:	ldr	lr, [r1, #28]
   1e690:	cmp	ip, lr
   1e694:	beq	1e6a8 <__assert_fail@plt+0xcb04>
   1e698:	ldr	lr, [r1, #8]
   1e69c:	ldr	ip, [lr, ip, lsl #2]
   1e6a0:	cmn	ip, #1
   1e6a4:	beq	1e6f0 <__assert_fail@plt+0xcb4c>
   1e6a8:	cmp	r3, #92	; 0x5c
   1e6ac:	beq	1e700 <__assert_fail@plt+0xcb5c>
   1e6b0:	cmp	r3, #91	; 0x5b
   1e6b4:	beq	1e74c <__assert_fail@plt+0xcba8>
   1e6b8:	cmp	r3, #93	; 0x5d
   1e6bc:	beq	1e7d8 <__assert_fail@plt+0xcc34>
   1e6c0:	cmp	r3, #94	; 0x5e
   1e6c4:	beq	1e7e8 <__assert_fail@plt+0xcc44>
   1e6c8:	cmp	r3, #45	; 0x2d
   1e6cc:	bne	1e71c <__assert_fail@plt+0xcb78>
   1e6d0:	mov	r3, #22
   1e6d4:	strb	r3, [r0, #4]
   1e6d8:	mov	r0, #1
   1e6dc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e6e0:	mov	r3, #2
   1e6e4:	strb	r3, [r0, #4]
   1e6e8:	mov	r0, #0
   1e6ec:	bx	lr
   1e6f0:	mov	r3, #1
   1e6f4:	strb	r3, [r0, #4]
   1e6f8:	mov	r0, r3
   1e6fc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e700:	tst	r2, #1
   1e704:	beq	1e71c <__assert_fail@plt+0xcb78>
   1e708:	ldr	r3, [r1, #40]	; 0x28
   1e70c:	add	r3, r3, #1
   1e710:	ldr	r2, [r1, #48]	; 0x30
   1e714:	cmp	r3, r2
   1e718:	blt	1e72c <__assert_fail@plt+0xcb88>
   1e71c:	mov	r3, #1
   1e720:	strb	r3, [r0, #4]
   1e724:	mov	r0, r3
   1e728:	pop	{pc}		; (ldr pc, [sp], #4)
   1e72c:	str	r3, [r1, #40]	; 0x28
   1e730:	ldr	r2, [r1, #4]
   1e734:	ldrb	r3, [r2, r3]
   1e738:	strb	r3, [r0]
   1e73c:	mov	r3, #1
   1e740:	strb	r3, [r0, #4]
   1e744:	mov	r0, r3
   1e748:	pop	{pc}		; (ldr pc, [sp], #4)
   1e74c:	ldr	r3, [r1, #40]	; 0x28
   1e750:	add	lr, r3, #1
   1e754:	ldr	ip, [r1, #48]	; 0x30
   1e758:	cmp	lr, ip
   1e75c:	bge	1e7c0 <__assert_fail@plt+0xcc1c>
   1e760:	ldr	r1, [r1, #4]
   1e764:	add	r3, r1, r3
   1e768:	ldrb	r3, [r3, #1]
   1e76c:	strb	r3, [r0]
   1e770:	cmp	r3, #58	; 0x3a
   1e774:	beq	1e7a8 <__assert_fail@plt+0xcc04>
   1e778:	cmp	r3, #61	; 0x3d
   1e77c:	beq	1e798 <__assert_fail@plt+0xcbf4>
   1e780:	cmp	r3, #46	; 0x2e
   1e784:	bne	1e7c0 <__assert_fail@plt+0xcc1c>
   1e788:	mov	r3, #26
   1e78c:	strb	r3, [r0, #4]
   1e790:	mov	r0, #2
   1e794:	pop	{pc}		; (ldr pc, [sp], #4)
   1e798:	mov	r3, #28
   1e79c:	strb	r3, [r0, #4]
   1e7a0:	mov	r0, #2
   1e7a4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7a8:	tst	r2, #4
   1e7ac:	beq	1e7c0 <__assert_fail@plt+0xcc1c>
   1e7b0:	mov	r3, #30
   1e7b4:	strb	r3, [r0, #4]
   1e7b8:	mov	r0, #2
   1e7bc:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7c0:	mov	r3, #1
   1e7c4:	strb	r3, [r0, #4]
   1e7c8:	mov	r2, #91	; 0x5b
   1e7cc:	strb	r2, [r0]
   1e7d0:	mov	r0, r3
   1e7d4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7d8:	mov	r3, #21
   1e7dc:	strb	r3, [r0, #4]
   1e7e0:	mov	r0, #1
   1e7e4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7e8:	mov	r3, #25
   1e7ec:	strb	r3, [r0, #4]
   1e7f0:	mov	r0, #1
   1e7f4:	pop	{pc}		; (ldr pc, [sp], #4)
   1e7f8:	ldrb	r3, [r1, #24]
   1e7fc:	cmp	r3, #17
   1e800:	beq	1e80c <__assert_fail@plt+0xcc68>
   1e804:	mov	r0, #0
   1e808:	bx	lr
   1e80c:	ldr	r3, [r1, #20]
   1e810:	cmp	r0, r3
   1e814:	ldrbeq	r3, [r1, #26]
   1e818:	orreq	r3, r3, #8
   1e81c:	strbeq	r3, [r1, #26]
   1e820:	b	1e804 <__assert_fail@plt+0xcc60>
   1e824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e828:	sub	sp, sp, #52	; 0x34
   1e82c:	str	r0, [sp, #8]
   1e830:	str	r1, [sp, #12]
   1e834:	mov	r7, r2
   1e838:	str	r3, [sp, #40]	; 0x28
   1e83c:	ldr	r9, [r0, #84]	; 0x54
   1e840:	add	r3, r3, r3, lsl #1
   1e844:	ldr	sl, [r9, #24]
   1e848:	add	sl, sl, r3, lsl #2
   1e84c:	ldr	r3, [sl, #4]
   1e850:	cmp	r3, #0
   1e854:	ble	1ea00 <__assert_fail@plt+0xce5c>
   1e858:	ldr	r3, [sp, #88]	; 0x58
   1e85c:	add	r3, r3, r3, lsl #1
   1e860:	lsl	r3, r3, #3
   1e864:	mov	r2, #1
   1e868:	lsl	r2, r2, r7
   1e86c:	str	r2, [sp, #20]
   1e870:	mvn	r2, r2
   1e874:	str	r2, [sp, #24]
   1e878:	mov	r8, #0
   1e87c:	mov	r2, r1
   1e880:	and	r1, r1, #1
   1e884:	str	r1, [sp, #28]
   1e888:	and	r2, r2, #2
   1e88c:	str	r2, [sp, #16]
   1e890:	add	r3, r3, #24
   1e894:	str	r3, [sp, #44]	; 0x2c
   1e898:	b	1e97c <__assert_fail@plt+0xcdd8>
   1e89c:	ldr	r3, [r9, #20]
   1e8a0:	add	r3, r3, fp
   1e8a4:	ldr	r3, [r3, #8]
   1e8a8:	ldr	r3, [r3]
   1e8ac:	cmp	sl, r3
   1e8b0:	beq	1e934 <__assert_fail@plt+0xcd90>
   1e8b4:	str	r8, [sp]
   1e8b8:	mov	r2, r7
   1e8bc:	ldr	r1, [sp, #12]
   1e8c0:	ldr	r0, [sp, #8]
   1e8c4:	bl	1e824 <__assert_fail@plt+0xcc80>
   1e8c8:	cmn	r0, #1
   1e8cc:	beq	1e940 <__assert_fail@plt+0xcd9c>
   1e8d0:	cmp	r0, #0
   1e8d4:	bne	1e8e4 <__assert_fail@plt+0xcd40>
   1e8d8:	ldr	r3, [sp, #16]
   1e8dc:	cmp	r3, #0
   1e8e0:	bne	1e940 <__assert_fail@plt+0xcd9c>
   1e8e4:	cmp	r7, #31
   1e8e8:	ldrle	r3, [r6, #-8]
   1e8ec:	ldrle	r2, [sp, #24]
   1e8f0:	andle	r3, r3, r2
   1e8f4:	strle	r3, [r6, #-8]
   1e8f8:	add	r4, r4, #24
   1e8fc:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   1e900:	cmp	r3, #0
   1e904:	beq	1e948 <__assert_fail@plt+0xcda4>
   1e908:	mov	r6, r4
   1e90c:	ldr	r3, [r4, #-24]	; 0xffffffe8
   1e910:	cmp	r5, r3
   1e914:	bne	1e8f8 <__assert_fail@plt+0xcd54>
   1e918:	cmp	r7, #31
   1e91c:	bgt	1e89c <__assert_fail@plt+0xccf8>
   1e920:	ldr	r3, [r4, #-8]
   1e924:	ldr	r2, [sp, #20]
   1e928:	tst	r2, r3
   1e92c:	beq	1e8f8 <__assert_fail@plt+0xcd54>
   1e930:	b	1e89c <__assert_fail@plt+0xccf8>
   1e934:	ldr	r3, [sp, #12]
   1e938:	ands	r0, r3, #1
   1e93c:	mvnne	r0, #0
   1e940:	add	sp, sp, #52	; 0x34
   1e944:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e948:	ldr	sl, [sp, #32]
   1e94c:	ldr	r8, [sp, #36]	; 0x24
   1e950:	b	1e96c <__assert_fail@plt+0xcdc8>
   1e954:	ldr	r3, [sp, #28]
   1e958:	cmp	r3, #0
   1e95c:	beq	1e96c <__assert_fail@plt+0xcdc8>
   1e960:	ldr	r3, [r2, r5, lsl #3]
   1e964:	cmp	r3, r7
   1e968:	beq	1ea10 <__assert_fail@plt+0xce6c>
   1e96c:	add	r8, r8, #1
   1e970:	ldr	r3, [sl, #4]
   1e974:	cmp	r3, r8
   1e978:	ble	1ea00 <__assert_fail@plt+0xce5c>
   1e97c:	ldr	r3, [sl, #8]
   1e980:	ldr	r5, [r3, r8, lsl #2]
   1e984:	ldr	r2, [r9]
   1e988:	add	r3, r2, r5, lsl #3
   1e98c:	ldrb	r3, [r3, #4]
   1e990:	cmp	r3, #8
   1e994:	beq	1e954 <__assert_fail@plt+0xcdb0>
   1e998:	cmp	r3, #9
   1e99c:	beq	1e9e0 <__assert_fail@plt+0xce3c>
   1e9a0:	cmp	r3, #4
   1e9a4:	bne	1e96c <__assert_fail@plt+0xcdc8>
   1e9a8:	ldr	r3, [sp, #88]	; 0x58
   1e9ac:	cmn	r3, #1
   1e9b0:	beq	1e96c <__assert_fail@plt+0xcdc8>
   1e9b4:	add	fp, r5, r5, lsl #1
   1e9b8:	lsl	fp, fp, #2
   1e9bc:	ldr	r3, [sp, #8]
   1e9c0:	ldr	r4, [r3, #116]	; 0x74
   1e9c4:	ldr	r3, [sp, #44]	; 0x2c
   1e9c8:	add	r4, r4, r3
   1e9cc:	str	sl, [sp, #32]
   1e9d0:	str	r8, [sp, #36]	; 0x24
   1e9d4:	ldr	sl, [sp, #40]	; 0x28
   1e9d8:	ldr	r8, [sp, #88]	; 0x58
   1e9dc:	b	1e908 <__assert_fail@plt+0xcd64>
   1e9e0:	ldr	r3, [sp, #16]
   1e9e4:	cmp	r3, #0
   1e9e8:	beq	1e96c <__assert_fail@plt+0xcdc8>
   1e9ec:	ldr	r3, [r2, r5, lsl #3]
   1e9f0:	cmp	r7, r3
   1e9f4:	bne	1e96c <__assert_fail@plt+0xcdc8>
   1e9f8:	mov	r0, #0
   1e9fc:	b	1e940 <__assert_fail@plt+0xcd9c>
   1ea00:	ldr	r3, [sp, #12]
   1ea04:	lsr	r0, r3, #1
   1ea08:	and	r0, r0, #1
   1ea0c:	b	1e940 <__assert_fail@plt+0xcd9c>
   1ea10:	mvn	r0, #0
   1ea14:	b	1e940 <__assert_fail@plt+0xcd9c>
   1ea18:	push	{lr}		; (str lr, [sp, #-4]!)
   1ea1c:	sub	sp, sp, #12
   1ea20:	ldr	lr, [sp, #16]
   1ea24:	add	r1, r1, r1, lsl #1
   1ea28:	ldr	ip, [r0, #116]	; 0x74
   1ea2c:	add	r1, ip, r1, lsl #3
   1ea30:	ldr	ip, [r1, #8]
   1ea34:	cmp	ip, lr
   1ea38:	bgt	1ea88 <__assert_fail@plt+0xcee4>
   1ea3c:	ldr	r1, [r1, #12]
   1ea40:	cmp	lr, r1
   1ea44:	movgt	r1, #1
   1ea48:	bgt	1ea68 <__assert_fail@plt+0xcec4>
   1ea4c:	cmp	lr, r1
   1ea50:	moveq	r1, #2
   1ea54:	movne	r1, #0
   1ea58:	cmp	ip, lr
   1ea5c:	orreq	r1, r1, #1
   1ea60:	cmp	r1, #0
   1ea64:	bne	1ea74 <__assert_fail@plt+0xced0>
   1ea68:	mov	r0, r1
   1ea6c:	add	sp, sp, #12
   1ea70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ea74:	ldr	ip, [sp, #20]
   1ea78:	str	ip, [sp]
   1ea7c:	bl	1e824 <__assert_fail@plt+0xcc80>
   1ea80:	mov	r1, r0
   1ea84:	b	1ea68 <__assert_fail@plt+0xcec4>
   1ea88:	mvn	r1, #0
   1ea8c:	b	1ea68 <__assert_fail@plt+0xcec4>
   1ea90:	push	{r4, r5, lr}
   1ea94:	mov	r4, r0
   1ea98:	ldr	r5, [r0, #108]	; 0x6c
   1ea9c:	mov	r2, r5
   1eaa0:	mov	r0, #0
   1eaa4:	cmp	r0, r2
   1eaa8:	bge	1eb14 <__assert_fail@plt+0xcf70>
   1eaac:	add	ip, r0, r2
   1eab0:	add	ip, ip, ip, lsr #31
   1eab4:	asr	ip, ip, #1
   1eab8:	ldr	lr, [r4, #116]	; 0x74
   1eabc:	add	r3, ip, ip, lsl #1
   1eac0:	add	r3, lr, r3, lsl #3
   1eac4:	ldr	r3, [r3, #4]
   1eac8:	cmp	r1, r3
   1eacc:	bgt	1eb00 <__assert_fail@plt+0xcf5c>
   1ead0:	cmp	r0, ip
   1ead4:	bge	1eb14 <__assert_fail@plt+0xcf70>
   1ead8:	add	r3, r0, ip
   1eadc:	add	r3, r3, r3, lsr #31
   1eae0:	asr	r3, r3, #1
   1eae4:	add	r2, r3, r3, lsl #1
   1eae8:	add	r2, lr, r2, lsl #3
   1eaec:	ldr	r2, [r2, #4]
   1eaf0:	cmp	r2, r1
   1eaf4:	blt	1eb08 <__assert_fail@plt+0xcf64>
   1eaf8:	mov	ip, r3
   1eafc:	b	1ead0 <__assert_fail@plt+0xcf2c>
   1eb00:	mov	r3, ip
   1eb04:	mov	ip, r2
   1eb08:	add	r0, r3, #1
   1eb0c:	mov	r2, ip
   1eb10:	b	1eaa4 <__assert_fail@plt+0xcf00>
   1eb14:	cmp	r5, r0
   1eb18:	ble	1eb38 <__assert_fail@plt+0xcf94>
   1eb1c:	ldr	r3, [r4, #116]	; 0x74
   1eb20:	add	r2, r0, r0, lsl #1
   1eb24:	add	r3, r3, r2, lsl #3
   1eb28:	ldr	r3, [r3, #4]
   1eb2c:	cmp	r1, r3
   1eb30:	mvnne	r0, #0
   1eb34:	pop	{r4, r5, pc}
   1eb38:	mvn	r0, #0
   1eb3c:	pop	{r4, r5, pc}
   1eb40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eb44:	sub	sp, sp, #20
   1eb48:	mov	r4, r0
   1eb4c:	mov	r6, r1
   1eb50:	str	r2, [sp, #12]
   1eb54:	mov	r8, r3
   1eb58:	ldr	sl, [r0, #84]	; 0x54
   1eb5c:	mov	r1, r3
   1eb60:	bl	1ea90 <__assert_fail@plt+0xceec>
   1eb64:	mov	fp, r0
   1eb68:	ldr	r1, [sp, #60]	; 0x3c
   1eb6c:	mov	r0, r4
   1eb70:	bl	1ea90 <__assert_fail@plt+0xceec>
   1eb74:	str	r0, [sp, #8]
   1eb78:	ldr	r3, [r6, #4]
   1eb7c:	cmp	r3, #0
   1eb80:	ble	1ec14 <__assert_fail@plt+0xd070>
   1eb84:	mov	r5, #0
   1eb88:	ldr	r3, [r6, #8]
   1eb8c:	ldr	r1, [r3, r5, lsl #2]
   1eb90:	ldr	r3, [r4, #116]	; 0x74
   1eb94:	add	r2, r1, r1, lsl #1
   1eb98:	ldr	r2, [r3, r2, lsl #3]
   1eb9c:	ldr	r3, [sl]
   1eba0:	ldr	r7, [r3, r2, lsl #3]
   1eba4:	str	fp, [sp, #4]
   1eba8:	str	r8, [sp]
   1ebac:	ldr	r3, [sp, #12]
   1ebb0:	mov	r2, r7
   1ebb4:	mov	r0, r4
   1ebb8:	bl	1ea18 <__assert_fail@plt+0xce74>
   1ebbc:	mov	r9, r0
   1ebc0:	ldr	r3, [r6, #8]
   1ebc4:	ldr	r1, [r3, r5, lsl #2]
   1ebc8:	ldr	r3, [sp, #8]
   1ebcc:	str	r3, [sp, #4]
   1ebd0:	ldr	r3, [sp, #60]	; 0x3c
   1ebd4:	str	r3, [sp]
   1ebd8:	ldr	r3, [sp, #56]	; 0x38
   1ebdc:	mov	r2, r7
   1ebe0:	mov	r0, r4
   1ebe4:	bl	1ea18 <__assert_fail@plt+0xce74>
   1ebe8:	cmp	r9, r0
   1ebec:	beq	1ebfc <__assert_fail@plt+0xd058>
   1ebf0:	mov	r0, #1
   1ebf4:	add	sp, sp, #20
   1ebf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ebfc:	add	r5, r5, #1
   1ec00:	ldr	r3, [r6, #4]
   1ec04:	cmp	r3, r5
   1ec08:	bgt	1eb88 <__assert_fail@plt+0xcfe4>
   1ec0c:	mov	r0, #0
   1ec10:	b	1ebf4 <__assert_fail@plt+0xd050>
   1ec14:	mov	r0, #0
   1ec18:	b	1ebf4 <__assert_fail@plt+0xd050>
   1ec1c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ec20:	sub	sp, sp, #8
   1ec24:	mov	r5, r0
   1ec28:	mov	r4, r1
   1ec2c:	mov	r8, r2
   1ec30:	mov	r9, r3
   1ec34:	ldr	r6, [r1, #40]	; 0x28
   1ec38:	mov	r1, r6
   1ec3c:	mov	r0, r4
   1ec40:	bl	1e314 <__assert_fail@plt+0xc770>
   1ec44:	cmp	r0, #1
   1ec48:	ble	1ec80 <__assert_fail@plt+0xd0dc>
   1ec4c:	mov	r7, r0
   1ec50:	mov	r3, #1
   1ec54:	str	r3, [r5]
   1ec58:	ldr	r1, [r4, #40]	; 0x28
   1ec5c:	mov	r0, r4
   1ec60:	bl	1e388 <__assert_fail@plt+0xc7e4>
   1ec64:	str	r0, [r5, #4]
   1ec68:	ldr	r3, [r4, #40]	; 0x28
   1ec6c:	add	r7, r3, r7
   1ec70:	str	r7, [r4, #40]	; 0x28
   1ec74:	mov	r0, #0
   1ec78:	add	sp, sp, #8
   1ec7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ec80:	add	r6, r6, r9
   1ec84:	str	r6, [r4, #40]	; 0x28
   1ec88:	ldrb	r3, [r8, #4]
   1ec8c:	and	r2, r3, #251	; 0xfb
   1ec90:	cmp	r3, #28
   1ec94:	cmpne	r2, #26
   1ec98:	beq	1ecc8 <__assert_fail@plt+0xd124>
   1ec9c:	ldrb	r2, [sp, #48]	; 0x30
   1eca0:	cmp	r3, #22
   1eca4:	moveq	r3, r2
   1eca8:	orrne	r3, r2, #1
   1ecac:	cmp	r3, #0
   1ecb0:	beq	1ee70 <__assert_fail@plt+0xd2cc>
   1ecb4:	mov	r0, #0
   1ecb8:	str	r0, [r5]
   1ecbc:	ldrb	r3, [r8]
   1ecc0:	strb	r3, [r5, #4]
   1ecc4:	b	1ec78 <__assert_fail@plt+0xd0d4>
   1ecc8:	ldr	r3, [r4, #56]	; 0x38
   1eccc:	cmp	r6, r3
   1ecd0:	movge	r0, #7
   1ecd4:	bge	1ec78 <__assert_fail@plt+0xd0d4>
   1ecd8:	ldrb	r9, [r8]
   1ecdc:	mov	r6, #0
   1ece0:	b	1edc8 <__assert_fail@plt+0xd224>
   1ece4:	ldrb	r3, [r4, #75]	; 0x4b
   1ece8:	cmp	r3, #0
   1ecec:	bne	1ed08 <__assert_fail@plt+0xd164>
   1ecf0:	ldr	r2, [r4, #4]
   1ecf4:	ldr	r3, [r4, #40]	; 0x28
   1ecf8:	add	r1, r3, #1
   1ecfc:	str	r1, [r4, #40]	; 0x28
   1ed00:	ldrb	r7, [r2, r3]
   1ed04:	b	1ede8 <__assert_fail@plt+0xd244>
   1ed08:	ldrb	r3, [r4, #76]	; 0x4c
   1ed0c:	cmp	r3, #0
   1ed10:	beq	1ed94 <__assert_fail@plt+0xd1f0>
   1ed14:	ldr	sl, [r4, #40]	; 0x28
   1ed18:	ldr	r3, [r4, #28]
   1ed1c:	cmp	sl, r3
   1ed20:	beq	1ed34 <__assert_fail@plt+0xd190>
   1ed24:	ldr	r3, [r4, #8]
   1ed28:	ldr	r3, [r3, sl, lsl #2]
   1ed2c:	cmn	r3, #1
   1ed30:	beq	1ed68 <__assert_fail@plt+0xd1c4>
   1ed34:	ldr	r2, [r4, #12]
   1ed38:	ldr	r3, [r4]
   1ed3c:	ldr	r1, [r2, sl, lsl #2]
   1ed40:	ldr	r2, [r4, #24]
   1ed44:	add	r3, r3, r1
   1ed48:	ldrb	r7, [r3, r2]
   1ed4c:	bics	r3, r7, #127	; 0x7f
   1ed50:	beq	1ed7c <__assert_fail@plt+0xd1d8>
   1ed54:	ldr	r3, [r4, #4]
   1ed58:	add	r2, sl, #1
   1ed5c:	str	r2, [r4, #40]	; 0x28
   1ed60:	ldrb	r7, [r3, sl]
   1ed64:	b	1ede8 <__assert_fail@plt+0xd244>
   1ed68:	ldr	r3, [r4, #4]
   1ed6c:	add	r2, sl, #1
   1ed70:	str	r2, [r4, #40]	; 0x28
   1ed74:	ldrb	r7, [r3, sl]
   1ed78:	b	1ede8 <__assert_fail@plt+0xd244>
   1ed7c:	mov	r1, sl
   1ed80:	mov	r0, r4
   1ed84:	bl	1e314 <__assert_fail@plt+0xc770>
   1ed88:	add	r0, sl, r0
   1ed8c:	str	r0, [r4, #40]	; 0x28
   1ed90:	b	1ede8 <__assert_fail@plt+0xd244>
   1ed94:	ldr	r3, [r4]
   1ed98:	ldr	r1, [r4, #24]
   1ed9c:	ldr	r2, [r4, #40]	; 0x28
   1eda0:	add	r0, r2, #1
   1eda4:	str	r0, [r4, #40]	; 0x28
   1eda8:	add	r3, r3, r1
   1edac:	ldrb	r7, [r3, r2]
   1edb0:	b	1ede8 <__assert_fail@plt+0xd244>
   1edb4:	ldr	r3, [r5, #4]
   1edb8:	strb	r7, [r3, r6]
   1edbc:	add	r6, r6, #1
   1edc0:	cmp	r6, #32
   1edc4:	beq	1ee9c <__assert_fail@plt+0xd2f8>
   1edc8:	ldrb	r3, [r8, #4]
   1edcc:	cmp	r3, #30
   1edd0:	beq	1ece4 <__assert_fail@plt+0xd140>
   1edd4:	ldr	r2, [r4, #4]
   1edd8:	ldr	r3, [r4, #40]	; 0x28
   1eddc:	add	r1, r3, #1
   1ede0:	str	r1, [r4, #40]	; 0x28
   1ede4:	ldrb	r7, [r2, r3]
   1ede8:	ldr	r3, [r4, #40]	; 0x28
   1edec:	ldr	r2, [r4, #56]	; 0x38
   1edf0:	cmp	r2, r3
   1edf4:	ble	1ee94 <__assert_fail@plt+0xd2f0>
   1edf8:	cmp	r9, r7
   1edfc:	bne	1edb4 <__assert_fail@plt+0xd210>
   1ee00:	ldr	r2, [r4, #4]
   1ee04:	ldrb	r2, [r2, r3]
   1ee08:	cmp	r2, #93	; 0x5d
   1ee0c:	bne	1edb4 <__assert_fail@plt+0xd210>
   1ee10:	add	r3, r3, #1
   1ee14:	str	r3, [r4, #40]	; 0x28
   1ee18:	ldr	r3, [r5, #4]
   1ee1c:	mov	r2, #0
   1ee20:	strb	r2, [r3, r6]
   1ee24:	ldrb	r3, [r8, #4]
   1ee28:	cmp	r3, #28
   1ee2c:	beq	1ee50 <__assert_fail@plt+0xd2ac>
   1ee30:	cmp	r3, #30
   1ee34:	beq	1ee60 <__assert_fail@plt+0xd2bc>
   1ee38:	cmp	r3, #26
   1ee3c:	moveq	r3, #3
   1ee40:	streq	r3, [r5]
   1ee44:	moveq	r0, r2
   1ee48:	movne	r0, #0
   1ee4c:	b	1ec78 <__assert_fail@plt+0xd0d4>
   1ee50:	mov	r3, #2
   1ee54:	str	r3, [r5]
   1ee58:	mov	r0, #0
   1ee5c:	b	1ec78 <__assert_fail@plt+0xd0d4>
   1ee60:	mov	r3, #4
   1ee64:	str	r3, [r5]
   1ee68:	mov	r0, #0
   1ee6c:	b	1ec78 <__assert_fail@plt+0xd0d4>
   1ee70:	ldr	r2, [sp, #44]	; 0x2c
   1ee74:	mov	r1, r4
   1ee78:	mov	r0, sp
   1ee7c:	bl	1e65c <__assert_fail@plt+0xcab8>
   1ee80:	ldrb	r3, [sp, #4]
   1ee84:	cmp	r3, #21
   1ee88:	movne	r0, #11
   1ee8c:	bne	1ec78 <__assert_fail@plt+0xd0d4>
   1ee90:	b	1ecb4 <__assert_fail@plt+0xd110>
   1ee94:	mov	r0, #7
   1ee98:	b	1ec78 <__assert_fail@plt+0xd0d4>
   1ee9c:	mov	r0, #7
   1eea0:	b	1ec78 <__assert_fail@plt+0xd0d4>
   1eea4:	push	{r4, r5, r6, lr}
   1eea8:	mov	r4, r0
   1eeac:	mov	r6, r1
   1eeb0:	mov	r5, r2
   1eeb4:	b	1eebc <__assert_fail@plt+0xd318>
   1eeb8:	mov	r4, r3
   1eebc:	ldr	r3, [r4, #4]
   1eec0:	cmp	r3, #0
   1eec4:	bne	1eeb8 <__assert_fail@plt+0xd314>
   1eec8:	ldr	r3, [r4, #8]
   1eecc:	cmp	r3, #0
   1eed0:	bne	1eeb8 <__assert_fail@plt+0xd314>
   1eed4:	mov	r1, r4
   1eed8:	mov	r0, r5
   1eedc:	blx	r6
   1eee0:	cmp	r0, #0
   1eee4:	popne	{r4, r5, r6, pc}
   1eee8:	ldr	r2, [r4]
   1eeec:	cmp	r2, #0
   1eef0:	popeq	{r4, r5, r6, pc}
   1eef4:	ldr	r3, [r2, #8]
   1eef8:	cmp	r4, r3
   1eefc:	cmpne	r3, #0
   1ef00:	moveq	r1, #1
   1ef04:	movne	r1, #0
   1ef08:	mov	r4, r2
   1ef0c:	cmp	r1, #0
   1ef10:	bne	1eed4 <__assert_fail@plt+0xd330>
   1ef14:	b	1eeb8 <__assert_fail@plt+0xd314>
   1ef18:	push	{r4, r5, r6, r7, r8, lr}
   1ef1c:	mov	r4, r0
   1ef20:	mov	r6, r1
   1ef24:	mov	r5, r2
   1ef28:	mov	r7, #0
   1ef2c:	b	1ef34 <__assert_fail@plt+0xd390>
   1ef30:	mov	r4, r3
   1ef34:	mov	r1, r4
   1ef38:	mov	r0, r5
   1ef3c:	blx	r6
   1ef40:	cmp	r0, #0
   1ef44:	popne	{r4, r5, r6, r7, r8, pc}
   1ef48:	ldr	r3, [r4, #4]
   1ef4c:	cmp	r3, #0
   1ef50:	moveq	r2, r7
   1ef54:	bne	1ef30 <__assert_fail@plt+0xd38c>
   1ef58:	ldr	r3, [r4, #8]
   1ef5c:	cmp	r3, #0
   1ef60:	cmpne	r2, r3
   1ef64:	bne	1ef30 <__assert_fail@plt+0xd38c>
   1ef68:	ldr	r3, [r4]
   1ef6c:	mov	r2, r4
   1ef70:	cmp	r3, #0
   1ef74:	popeq	{r4, r5, r6, r7, r8, pc}
   1ef78:	mov	r4, r3
   1ef7c:	b	1ef58 <__assert_fail@plt+0xd3b4>
   1ef80:	push	{r4, r5, r6, lr}
   1ef84:	mov	r4, r0
   1ef88:	mov	r5, r1
   1ef8c:	ldr	r3, [r0, #80]	; 0x50
   1ef90:	cmp	r3, #1
   1ef94:	ble	1efdc <__assert_fail@plt+0xd438>
   1ef98:	cmn	r1, #-1073741823	; 0xc0000001
   1ef9c:	bhi	1f010 <__assert_fail@plt+0xd46c>
   1efa0:	lsl	r6, r1, #2
   1efa4:	mov	r1, r6
   1efa8:	ldr	r0, [r0, #8]
   1efac:	bl	2d434 <__assert_fail@plt+0x1b890>
   1efb0:	cmp	r0, #0
   1efb4:	beq	1f018 <__assert_fail@plt+0xd474>
   1efb8:	str	r0, [r4, #8]
   1efbc:	ldr	r0, [r4, #12]
   1efc0:	cmp	r0, #0
   1efc4:	beq	1efdc <__assert_fail@plt+0xd438>
   1efc8:	mov	r1, r6
   1efcc:	bl	2d434 <__assert_fail@plt+0x1b890>
   1efd0:	cmp	r0, #0
   1efd4:	beq	1f020 <__assert_fail@plt+0xd47c>
   1efd8:	str	r0, [r4, #12]
   1efdc:	ldrb	r3, [r4, #75]	; 0x4b
   1efe0:	cmp	r3, #0
   1efe4:	bne	1eff4 <__assert_fail@plt+0xd450>
   1efe8:	str	r5, [r4, #36]	; 0x24
   1efec:	mov	r0, #0
   1eff0:	pop	{r4, r5, r6, pc}
   1eff4:	mov	r1, r5
   1eff8:	ldr	r0, [r4, #4]
   1effc:	bl	2d434 <__assert_fail@plt+0x1b890>
   1f000:	cmp	r0, #0
   1f004:	beq	1f028 <__assert_fail@plt+0xd484>
   1f008:	str	r0, [r4, #4]
   1f00c:	b	1efe8 <__assert_fail@plt+0xd444>
   1f010:	mov	r0, #12
   1f014:	pop	{r4, r5, r6, pc}
   1f018:	mov	r0, #12
   1f01c:	pop	{r4, r5, r6, pc}
   1f020:	mov	r0, #12
   1f024:	pop	{r4, r5, r6, pc}
   1f028:	mov	r0, #12
   1f02c:	pop	{r4, r5, r6, pc}
   1f030:	push	{r4, r5, r6, lr}
   1f034:	mov	r4, r0
   1f038:	mov	r5, r1
   1f03c:	ldr	r1, [r0]
   1f040:	ldr	r3, [r0, #4]
   1f044:	cmp	r1, r3
   1f048:	beq	1f068 <__assert_fail@plt+0xd4c4>
   1f04c:	ldr	r2, [r4, #8]
   1f050:	ldr	r3, [r4, #4]
   1f054:	add	r1, r3, #1
   1f058:	str	r1, [r4, #4]
   1f05c:	str	r5, [r2, r3, lsl #2]
   1f060:	mov	r0, #1
   1f064:	pop	{r4, r5, r6, pc}
   1f068:	add	r1, r1, #1
   1f06c:	lsl	r3, r1, #1
   1f070:	str	r3, [r0]
   1f074:	lsl	r1, r1, #3
   1f078:	ldr	r0, [r0, #8]
   1f07c:	bl	2d434 <__assert_fail@plt+0x1b890>
   1f080:	cmp	r0, #0
   1f084:	strne	r0, [r4, #8]
   1f088:	bne	1f04c <__assert_fail@plt+0xd4a8>
   1f08c:	mov	r0, #0
   1f090:	pop	{r4, r5, r6, pc}
   1f094:	push	{r4, r5, r6, r7, r8, lr}
   1f098:	mov	r7, r0
   1f09c:	mov	r5, r1
   1f0a0:	mov	r4, r2
   1f0a4:	mov	r6, r3
   1f0a8:	ldr	r3, [r0, #64]	; 0x40
   1f0ac:	cmp	r3, #31
   1f0b0:	beq	1f124 <__assert_fail@plt+0xd580>
   1f0b4:	ldr	r3, [r7, #56]	; 0x38
   1f0b8:	ldr	r2, [r7, #64]	; 0x40
   1f0bc:	add	r1, r2, #1
   1f0c0:	str	r1, [r7, #64]	; 0x40
   1f0c4:	lsl	r2, r2, #5
   1f0c8:	add	ip, r2, #4
   1f0cc:	add	ip, r3, ip
   1f0d0:	add	r3, r3, r2
   1f0d4:	mov	r2, #0
   1f0d8:	str	r2, [r3, #4]
   1f0dc:	str	r5, [r3, #8]
   1f0e0:	str	r4, [r3, #12]
   1f0e4:	add	lr, r3, #24
   1f0e8:	ldm	r6, {r0, r1}
   1f0ec:	stm	lr, {r0, r1}
   1f0f0:	ldrb	r1, [r3, #30]
   1f0f4:	and	r1, r1, #243	; 0xf3
   1f0f8:	strb	r1, [r3, #30]
   1f0fc:	str	r2, [r3, #16]
   1f100:	str	r2, [r3, #20]
   1f104:	mvn	r2, #0
   1f108:	str	r2, [r3, #32]
   1f10c:	cmp	r5, #0
   1f110:	strne	ip, [r5]
   1f114:	cmp	r4, #0
   1f118:	strne	ip, [r4]
   1f11c:	mov	r0, ip
   1f120:	pop	{r4, r5, r6, r7, r8, pc}
   1f124:	mov	r0, #996	; 0x3e4
   1f128:	bl	2d404 <__assert_fail@plt+0x1b860>
   1f12c:	cmp	r0, #0
   1f130:	beq	1f14c <__assert_fail@plt+0xd5a8>
   1f134:	ldr	r3, [r7, #56]	; 0x38
   1f138:	str	r3, [r0]
   1f13c:	str	r0, [r7, #56]	; 0x38
   1f140:	mov	r3, #0
   1f144:	str	r3, [r7, #64]	; 0x40
   1f148:	b	1f0b4 <__assert_fail@plt+0xd510>
   1f14c:	mov	ip, #0
   1f150:	b	1f11c <__assert_fail@plt+0xd578>
   1f154:	push	{r4, r5, r6, r7, r8, lr}
   1f158:	sub	sp, sp, #8
   1f15c:	mov	r4, r0
   1f160:	mov	r8, r1
   1f164:	ldr	r5, [r0]
   1f168:	add	r6, sp, #4
   1f16c:	mov	r7, #0
   1f170:	add	r3, r4, #20
   1f174:	mov	r2, r7
   1f178:	mov	r1, r7
   1f17c:	mov	r0, r8
   1f180:	bl	1f094 <__assert_fail@plt+0xd4f0>
   1f184:	str	r0, [r6]
   1f188:	cmp	r0, #0
   1f18c:	beq	1f1c4 <__assert_fail@plt+0xd620>
   1f190:	str	r5, [r0]
   1f194:	ldr	r2, [r6]
   1f198:	ldrb	r3, [r2, #26]
   1f19c:	orr	r3, r3, #4
   1f1a0:	strb	r3, [r2, #26]
   1f1a4:	ldr	r5, [r6]
   1f1a8:	ldr	r3, [r4, #4]
   1f1ac:	cmp	r3, #0
   1f1b0:	beq	1f1cc <__assert_fail@plt+0xd628>
   1f1b4:	add	r6, r5, #4
   1f1b8:	mov	r4, r3
   1f1bc:	b	1f170 <__assert_fail@plt+0xd5cc>
   1f1c0:	ldr	r0, [sp, #4]
   1f1c4:	add	sp, sp, #8
   1f1c8:	pop	{r4, r5, r6, r7, r8, pc}
   1f1cc:	mov	r2, r7
   1f1d0:	ldr	r3, [r4, #8]
   1f1d4:	cmp	r3, #0
   1f1d8:	cmpne	r2, r3
   1f1dc:	bne	1f1fc <__assert_fail@plt+0xd658>
   1f1e0:	ldr	r3, [r4]
   1f1e4:	ldr	r5, [r5]
   1f1e8:	mov	r2, r4
   1f1ec:	cmp	r3, #0
   1f1f0:	beq	1f1c0 <__assert_fail@plt+0xd61c>
   1f1f4:	mov	r4, r3
   1f1f8:	b	1f1d0 <__assert_fail@plt+0xd62c>
   1f1fc:	add	r6, r5, #8
   1f200:	mov	r4, r3
   1f204:	b	1f170 <__assert_fail@plt+0xd5cc>
   1f208:	push	{lr}		; (str lr, [sp, #-4]!)
   1f20c:	sub	sp, sp, #12
   1f210:	mov	ip, #0
   1f214:	str	ip, [sp]
   1f218:	str	ip, [sp, #4]
   1f21c:	strb	r3, [sp, #4]
   1f220:	mov	r3, sp
   1f224:	bl	1f094 <__assert_fail@plt+0xd4f0>
   1f228:	add	sp, sp, #12
   1f22c:	pop	{pc}		; (ldr pc, [sp], #4)
   1f230:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f234:	ldr	r6, [r1]
   1f238:	ldr	r5, [r2, #4]
   1f23c:	ldrb	r1, [r1, #28]
   1f240:	adds	r3, r5, #0
   1f244:	movne	r3, #1
   1f248:	ands	r3, r3, r1, lsr #4
   1f24c:	beq	1f26c <__assert_fail@plt+0xd6c8>
   1f250:	ldr	r3, [r2, #20]
   1f254:	cmp	r3, #31
   1f258:	bgt	1f334 <__assert_fail@plt+0xd790>
   1f25c:	ldr	r1, [r6, #80]	; 0x50
   1f260:	lsr	r3, r1, r3
   1f264:	tst	r3, #1
   1f268:	beq	1f334 <__assert_fail@plt+0xd790>
   1f26c:	mov	r4, r2
   1f270:	mov	r9, r0
   1f274:	mov	r3, #8
   1f278:	mov	r2, #0
   1f27c:	mov	r1, r2
   1f280:	mov	r0, r6
   1f284:	bl	1f208 <__assert_fail@plt+0xd664>
   1f288:	mov	r7, r0
   1f28c:	mov	r3, #9
   1f290:	mov	r2, #0
   1f294:	mov	r1, r2
   1f298:	mov	r0, r6
   1f29c:	bl	1f208 <__assert_fail@plt+0xd664>
   1f2a0:	mov	r8, r0
   1f2a4:	cmp	r5, #0
   1f2a8:	moveq	sl, r0
   1f2ac:	beq	1f2c8 <__assert_fail@plt+0xd724>
   1f2b0:	mov	r3, #16
   1f2b4:	mov	r2, r0
   1f2b8:	mov	r1, r5
   1f2bc:	mov	r0, r6
   1f2c0:	bl	1f208 <__assert_fail@plt+0xd664>
   1f2c4:	mov	sl, r0
   1f2c8:	mov	r3, #16
   1f2cc:	mov	r2, sl
   1f2d0:	mov	r1, r7
   1f2d4:	mov	r0, r6
   1f2d8:	bl	1f208 <__assert_fail@plt+0xd664>
   1f2dc:	mov	r5, r0
   1f2e0:	cmp	sl, #0
   1f2e4:	cmpne	r0, #0
   1f2e8:	beq	1f33c <__assert_fail@plt+0xd798>
   1f2ec:	cmp	r8, #0
   1f2f0:	cmpne	r7, #0
   1f2f4:	beq	1f33c <__assert_fail@plt+0xd798>
   1f2f8:	ldr	r3, [r4, #20]
   1f2fc:	str	r3, [r8, #20]
   1f300:	str	r3, [r7, #20]
   1f304:	ldrb	r3, [r4, #26]
   1f308:	lsr	r3, r3, #3
   1f30c:	and	r3, r3, #1
   1f310:	ldrb	r2, [r8, #26]
   1f314:	and	r1, r3, #1
   1f318:	bic	r2, r2, #8
   1f31c:	orr	r2, r2, r1, lsl #3
   1f320:	strb	r2, [r8, #26]
   1f324:	ldrb	r2, [r7, #26]
   1f328:	bic	r2, r2, #8
   1f32c:	orr	r3, r2, r1, lsl #3
   1f330:	strb	r3, [r7, #26]
   1f334:	mov	r0, r5
   1f338:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f33c:	mov	r3, #12
   1f340:	str	r3, [r9]
   1f344:	mov	r5, #0
   1f348:	b	1f334 <__assert_fail@plt+0xd790>
   1f34c:	push	{r4, r5, lr}
   1f350:	sub	sp, sp, #12
   1f354:	mov	r5, r0
   1f358:	mov	r4, r1
   1f35c:	mov	r3, #0
   1f360:	str	r3, [sp, #4]
   1f364:	ldr	r2, [r1, #4]
   1f368:	cmp	r2, r3
   1f36c:	beq	1f37c <__assert_fail@plt+0xd7d8>
   1f370:	ldrb	r3, [r2, #24]
   1f374:	cmp	r3, #17
   1f378:	beq	1f3a0 <__assert_fail@plt+0xd7fc>
   1f37c:	ldr	r2, [r4, #8]
   1f380:	cmp	r2, #0
   1f384:	beq	1f394 <__assert_fail@plt+0xd7f0>
   1f388:	ldrb	r3, [r2, #24]
   1f38c:	cmp	r3, #17
   1f390:	beq	1f3bc <__assert_fail@plt+0xd818>
   1f394:	ldr	r0, [sp, #4]
   1f398:	add	sp, sp, #12
   1f39c:	pop	{r4, r5, pc}
   1f3a0:	mov	r1, r0
   1f3a4:	add	r0, sp, #4
   1f3a8:	bl	1f230 <__assert_fail@plt+0xd68c>
   1f3ac:	str	r0, [r4, #4]
   1f3b0:	cmp	r0, #0
   1f3b4:	strne	r4, [r0]
   1f3b8:	b	1f37c <__assert_fail@plt+0xd7d8>
   1f3bc:	mov	r1, r5
   1f3c0:	add	r0, sp, #4
   1f3c4:	bl	1f230 <__assert_fail@plt+0xd68c>
   1f3c8:	str	r0, [r4, #8]
   1f3cc:	cmp	r0, #0
   1f3d0:	strne	r4, [r0]
   1f3d4:	b	1f394 <__assert_fail@plt+0xd7f0>
   1f3d8:	push	{r4, r5, r6, lr}
   1f3dc:	mov	r4, r0
   1f3e0:	mov	r5, r1
   1f3e4:	mov	r3, #1
   1f3e8:	str	r3, [r0]
   1f3ec:	str	r3, [r0, #4]
   1f3f0:	mov	r0, #4
   1f3f4:	bl	2d404 <__assert_fail@plt+0x1b860>
   1f3f8:	str	r0, [r4, #8]
   1f3fc:	cmp	r0, #0
   1f400:	moveq	r3, #0
   1f404:	streq	r3, [r4, #4]
   1f408:	streq	r3, [r4]
   1f40c:	moveq	r0, #12
   1f410:	strne	r5, [r0]
   1f414:	movne	r0, #0
   1f418:	pop	{r4, r5, r6, pc}
   1f41c:	push	{r4, lr}
   1f420:	mov	r4, r0
   1f424:	str	r1, [r0]
   1f428:	mov	r3, #0
   1f42c:	str	r3, [r0, #4]
   1f430:	lsl	r0, r1, #2
   1f434:	bl	2d404 <__assert_fail@plt+0x1b860>
   1f438:	str	r0, [r4, #8]
   1f43c:	cmp	r0, #0
   1f440:	moveq	r0, #12
   1f444:	movne	r0, #0
   1f448:	pop	{r4, pc}
   1f44c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f450:	mov	r6, r0
   1f454:	mov	r5, r1
   1f458:	mov	r7, r2
   1f45c:	mov	r8, r1
   1f460:	str	r2, [r8], #16
   1f464:	ldr	r1, [r1, #8]
   1f468:	mov	r0, r8
   1f46c:	bl	1f41c <__assert_fail@plt+0xd878>
   1f470:	subs	r9, r0, #0
   1f474:	bne	1f53c <__assert_fail@plt+0xd998>
   1f478:	ldr	r3, [r5, #8]
   1f47c:	cmp	r3, #0
   1f480:	ble	1f4d0 <__assert_fail@plt+0xd92c>
   1f484:	mov	r4, #0
   1f488:	b	1f49c <__assert_fail@plt+0xd8f8>
   1f48c:	add	r4, r4, #1
   1f490:	ldr	r3, [r5, #8]
   1f494:	cmp	r3, r4
   1f498:	ble	1f4d0 <__assert_fail@plt+0xd92c>
   1f49c:	ldr	r3, [r5, #12]
   1f4a0:	ldr	r1, [r3, r4, lsl #2]
   1f4a4:	ldr	r3, [r6]
   1f4a8:	add	r3, r3, r1, lsl #3
   1f4ac:	ldrb	r3, [r3, #4]
   1f4b0:	tst	r3, #8
   1f4b4:	bne	1f48c <__assert_fail@plt+0xd8e8>
   1f4b8:	mov	r0, r8
   1f4bc:	bl	1f030 <__assert_fail@plt+0xd48c>
   1f4c0:	cmp	r0, #0
   1f4c4:	bne	1f48c <__assert_fail@plt+0xd8e8>
   1f4c8:	mov	r9, #12
   1f4cc:	b	1f50c <__assert_fail@plt+0xd968>
   1f4d0:	ldr	r4, [r6, #68]	; 0x44
   1f4d4:	and	r7, r7, r4
   1f4d8:	add	r7, r7, r7, lsl #1
   1f4dc:	lsl	r4, r7, #2
   1f4e0:	ldr	r6, [r6, #32]
   1f4e4:	add	r7, r6, r4
   1f4e8:	ldr	r3, [r6, r4]
   1f4ec:	ldr	r2, [r7, #4]
   1f4f0:	cmp	r2, r3
   1f4f4:	ble	1f514 <__assert_fail@plt+0xd970>
   1f4f8:	ldr	r2, [r7, #8]
   1f4fc:	ldr	r3, [r6, r4]
   1f500:	add	r1, r3, #1
   1f504:	str	r1, [r6, r4]
   1f508:	str	r5, [r2, r3, lsl #2]
   1f50c:	mov	r0, r9
   1f510:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f514:	add	r3, r3, #1
   1f518:	lsl	r8, r3, #1
   1f51c:	lsl	r1, r3, #3
   1f520:	ldr	r0, [r7, #8]
   1f524:	bl	2d434 <__assert_fail@plt+0x1b890>
   1f528:	cmp	r0, #0
   1f52c:	beq	1f544 <__assert_fail@plt+0xd9a0>
   1f530:	str	r0, [r7, #8]
   1f534:	str	r8, [r7, #4]
   1f538:	b	1f4f8 <__assert_fail@plt+0xd954>
   1f53c:	mov	r9, #12
   1f540:	b	1f50c <__assert_fail@plt+0xd968>
   1f544:	mov	r9, #12
   1f548:	b	1f50c <__assert_fail@plt+0xd968>
   1f54c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f550:	sub	sp, sp, #80	; 0x50
   1f554:	mov	r4, r0
   1f558:	ldr	r8, [r0, #36]	; 0x24
   1f55c:	ldr	r3, [r0, #48]	; 0x30
   1f560:	cmp	r8, r3
   1f564:	movge	r8, r3
   1f568:	ldr	sl, [r0, #28]
   1f56c:	cmp	r8, sl
   1f570:	ble	1f6d0 <__assert_fail@plt+0xdb2c>
   1f574:	add	r7, sp, #8
   1f578:	add	r6, r0, #16
   1f57c:	mov	r9, #1
   1f580:	mvn	r5, #0
   1f584:	b	1f668 <__assert_fail@plt+0xdac4>
   1f588:	ldr	r3, [r4, #80]	; 0x50
   1f58c:	cmp	r3, #0
   1f590:	cmpgt	r2, #0
   1f594:	ble	1f5e8 <__assert_fail@plt+0xda44>
   1f598:	add	r0, sp, #15
   1f59c:	mov	r3, #0
   1f5a0:	ldr	r1, [r4]
   1f5a4:	ldr	ip, [r4, #24]
   1f5a8:	add	r1, r1, sl
   1f5ac:	add	r1, r1, r3
   1f5b0:	ldrb	r1, [r1, ip]
   1f5b4:	ldr	ip, [r4, #64]	; 0x40
   1f5b8:	ldrb	ip, [ip, r1]
   1f5bc:	ldr	r1, [r4, #4]
   1f5c0:	add	r1, r1, sl
   1f5c4:	strb	ip, [r1, r3]
   1f5c8:	strb	ip, [r0, #1]!
   1f5cc:	add	r3, r3, #1
   1f5d0:	ldr	r1, [r4, #80]	; 0x50
   1f5d4:	cmp	r1, r3
   1f5d8:	cmpgt	r2, r3
   1f5dc:	bgt	1f5a0 <__assert_fail@plt+0xd9fc>
   1f5e0:	add	r1, sp, #16
   1f5e4:	b	1f690 <__assert_fail@plt+0xdaec>
   1f5e8:	add	r1, sp, #16
   1f5ec:	b	1f690 <__assert_fail@plt+0xdaec>
   1f5f0:	ldr	r3, [r4]
   1f5f4:	ldr	r2, [r4, #24]
   1f5f8:	add	r3, r3, sl
   1f5fc:	ldrb	r3, [r3, r2]
   1f600:	str	r3, [sp, #4]
   1f604:	ldr	r2, [r4, #64]	; 0x40
   1f608:	cmp	r2, #0
   1f60c:	ldrbne	r3, [r2, r3]
   1f610:	strne	r3, [sp, #4]
   1f614:	ldm	r7, {r0, r1}
   1f618:	stm	r6, {r0, r1}
   1f61c:	mov	r0, r9
   1f620:	add	r2, sl, #1
   1f624:	lsl	r3, sl, #2
   1f628:	ldr	r1, [r4, #8]
   1f62c:	ldr	ip, [sp, #4]
   1f630:	str	ip, [r1, sl, lsl #2]
   1f634:	add	sl, sl, r0
   1f638:	mov	ip, sl
   1f63c:	cmp	r2, sl
   1f640:	bge	1f6e0 <__assert_fail@plt+0xdb3c>
   1f644:	add	r3, r3, #4
   1f648:	add	r2, r2, #1
   1f64c:	ldr	r1, [r4, #8]
   1f650:	str	r5, [r1, r3]
   1f654:	add	r3, r3, #4
   1f658:	cmp	ip, r2
   1f65c:	bne	1f648 <__assert_fail@plt+0xdaa4>
   1f660:	cmp	r8, sl
   1f664:	ble	1f6d0 <__assert_fail@plt+0xdb2c>
   1f668:	sub	r2, r8, sl
   1f66c:	ldm	r6, {r0, r1}
   1f670:	stm	r7, {r0, r1}
   1f674:	ldr	r3, [r4, #64]	; 0x40
   1f678:	cmp	r3, #0
   1f67c:	bne	1f588 <__assert_fail@plt+0xd9e4>
   1f680:	ldr	r1, [r4, #24]
   1f684:	add	r3, sl, r1
   1f688:	ldr	r1, [r4]
   1f68c:	add	r1, r1, r3
   1f690:	mov	r3, r6
   1f694:	add	r0, sp, #4
   1f698:	bl	1b49c <__assert_fail@plt+0x98f8>
   1f69c:	sub	r3, r0, #1
   1f6a0:	cmn	r3, #3
   1f6a4:	bhi	1f5f0 <__assert_fail@plt+0xda4c>
   1f6a8:	cmn	r0, #2
   1f6ac:	bne	1f620 <__assert_fail@plt+0xda7c>
   1f6b0:	ldr	r2, [r4, #36]	; 0x24
   1f6b4:	ldr	r3, [r4, #48]	; 0x30
   1f6b8:	cmp	r2, r3
   1f6bc:	bge	1f5f0 <__assert_fail@plt+0xda4c>
   1f6c0:	add	r3, r4, #16
   1f6c4:	add	r2, sp, #8
   1f6c8:	ldm	r2, {r0, r1}
   1f6cc:	stm	r3, {r0, r1}
   1f6d0:	str	sl, [r4, #28]
   1f6d4:	str	sl, [r4, #32]
   1f6d8:	add	sp, sp, #80	; 0x50
   1f6dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f6e0:	mov	sl, r2
   1f6e4:	b	1f660 <__assert_fail@plt+0xdabc>
   1f6e8:	ldr	r3, [r1, #4]
   1f6ec:	cmp	r3, #0
   1f6f0:	beq	1f888 <__assert_fail@plt+0xdce4>
   1f6f4:	ldr	ip, [r2, #4]
   1f6f8:	cmp	ip, #0
   1f6fc:	beq	1f890 <__assert_fail@plt+0xdcec>
   1f700:	push	{r4, r5, r6, r7, r8, lr}
   1f704:	mov	r6, r2
   1f708:	mov	r5, r1
   1f70c:	mov	r7, r0
   1f710:	add	r3, r3, ip
   1f714:	ldr	r4, [r0]
   1f718:	ldr	r2, [r0, #4]
   1f71c:	add	r2, r3, r2
   1f720:	cmp	r2, r4
   1f724:	bgt	1f74c <__assert_fail@plt+0xdba8>
   1f728:	ldr	r3, [r7, #4]
   1f72c:	ldr	r2, [r5, #4]
   1f730:	ldr	r0, [r6, #4]
   1f734:	add	r1, r3, r2
   1f738:	add	r1, r1, r0
   1f73c:	sub	r2, r2, #1
   1f740:	sub	r0, r0, #1
   1f744:	sub	r3, r3, #1
   1f748:	b	1f7d8 <__assert_fail@plt+0xdc34>
   1f74c:	add	r4, r3, r4
   1f750:	lsl	r1, r4, #2
   1f754:	ldr	r0, [r0, #8]
   1f758:	bl	2d434 <__assert_fail@plt+0x1b890>
   1f75c:	cmp	r0, #0
   1f760:	beq	1f898 <__assert_fail@plt+0xdcf4>
   1f764:	str	r0, [r7, #8]
   1f768:	str	r4, [r7]
   1f76c:	b	1f728 <__assert_fail@plt+0xdb84>
   1f770:	cmp	r3, #0
   1f774:	blt	1f7b0 <__assert_fail@plt+0xdc0c>
   1f778:	ldr	r8, [r7, #8]
   1f77c:	add	ip, r8, r3, lsl #2
   1f780:	ldr	r4, [r8, r3, lsl #2]
   1f784:	cmp	lr, r4
   1f788:	bge	1f7a4 <__assert_fail@plt+0xdc00>
   1f78c:	sub	r3, r3, #1
   1f790:	cmn	r3, #1
   1f794:	beq	1f8a0 <__assert_fail@plt+0xdcfc>
   1f798:	ldr	r4, [ip, #-4]!
   1f79c:	cmp	lr, r4
   1f7a0:	blt	1f78c <__assert_fail@plt+0xdbe8>
   1f7a4:	ldr	ip, [r8, r3, lsl #2]
   1f7a8:	cmp	lr, ip
   1f7ac:	beq	1f7bc <__assert_fail@plt+0xdc18>
   1f7b0:	sub	r1, r1, #1
   1f7b4:	ldr	ip, [r7, #8]
   1f7b8:	str	lr, [ip, r1, lsl #2]
   1f7bc:	subs	r2, r2, #1
   1f7c0:	bmi	1f800 <__assert_fail@plt+0xdc5c>
   1f7c4:	subs	r0, r0, #1
   1f7c8:	bpl	1f7d8 <__assert_fail@plt+0xdc34>
   1f7cc:	b	1f800 <__assert_fail@plt+0xdc5c>
   1f7d0:	subs	r2, r2, #1
   1f7d4:	bmi	1f800 <__assert_fail@plt+0xdc5c>
   1f7d8:	ldr	ip, [r5, #8]
   1f7dc:	ldr	lr, [ip, r2, lsl #2]
   1f7e0:	ldr	ip, [r6, #8]
   1f7e4:	ldr	ip, [ip, r0, lsl #2]
   1f7e8:	cmp	lr, ip
   1f7ec:	beq	1f770 <__assert_fail@plt+0xdbcc>
   1f7f0:	cmp	lr, ip
   1f7f4:	bge	1f7d0 <__assert_fail@plt+0xdc2c>
   1f7f8:	subs	r0, r0, #1
   1f7fc:	bpl	1f7d8 <__assert_fail@plt+0xdc34>
   1f800:	ldr	r3, [r7, #4]
   1f804:	sub	r0, r3, #1
   1f808:	ldr	r2, [r5, #4]
   1f80c:	add	r2, r3, r2
   1f810:	ldr	ip, [r6, #4]
   1f814:	add	r2, r2, ip
   1f818:	sub	r4, r2, #1
   1f81c:	sub	r2, r2, r1
   1f820:	add	r3, r3, r2
   1f824:	str	r3, [r7, #4]
   1f828:	cmp	r0, #0
   1f82c:	cmpge	r2, #0
   1f830:	bgt	1f85c <__assert_fail@plt+0xdcb8>
   1f834:	ldr	r0, [r7, #8]
   1f838:	lsl	r2, r2, #2
   1f83c:	add	r1, r0, r1, lsl #2
   1f840:	bl	11784 <memcpy@plt>
   1f844:	mov	r0, #0
   1f848:	pop	{r4, r5, r6, r7, r8, pc}
   1f84c:	add	lr, r0, r2
   1f850:	str	ip, [r3, lr, lsl #2]
   1f854:	subs	r0, r0, #1
   1f858:	bmi	1f834 <__assert_fail@plt+0xdc90>
   1f85c:	ldr	r3, [r7, #8]
   1f860:	ldr	lr, [r3, r4, lsl #2]
   1f864:	ldr	ip, [r3, r0, lsl #2]
   1f868:	cmp	lr, ip
   1f86c:	ble	1f84c <__assert_fail@plt+0xdca8>
   1f870:	sub	r4, r4, #1
   1f874:	add	ip, r0, r2
   1f878:	str	lr, [r3, ip, lsl #2]
   1f87c:	subs	r2, r2, #1
   1f880:	bne	1f85c <__assert_fail@plt+0xdcb8>
   1f884:	b	1f834 <__assert_fail@plt+0xdc90>
   1f888:	mov	r0, #0
   1f88c:	bx	lr
   1f890:	mov	r0, #0
   1f894:	bx	lr
   1f898:	mov	r0, #12
   1f89c:	pop	{r4, r5, r6, r7, r8, pc}
   1f8a0:	mvn	r3, #0
   1f8a4:	b	1f7b0 <__assert_fail@plt+0xdc0c>
   1f8a8:	ldr	r3, [r1, #4]
   1f8ac:	str	r3, [r0, #4]
   1f8b0:	ldr	r2, [r1, #4]
   1f8b4:	cmp	r2, #0
   1f8b8:	ble	1f90c <__assert_fail@plt+0xdd68>
   1f8bc:	push	{r4, r5, r6, lr}
   1f8c0:	mov	r5, r1
   1f8c4:	mov	r4, r0
   1f8c8:	str	r3, [r0]
   1f8cc:	lsl	r0, r3, #2
   1f8d0:	bl	2d404 <__assert_fail@plt+0x1b860>
   1f8d4:	str	r0, [r4, #8]
   1f8d8:	cmp	r0, #0
   1f8dc:	beq	1f8f8 <__assert_fail@plt+0xdd54>
   1f8e0:	ldr	r2, [r5, #4]
   1f8e4:	lsl	r2, r2, #2
   1f8e8:	ldr	r1, [r5, #8]
   1f8ec:	bl	11784 <memcpy@plt>
   1f8f0:	mov	r0, #0
   1f8f4:	pop	{r4, r5, r6, pc}
   1f8f8:	mov	r3, #0
   1f8fc:	str	r3, [r4, #4]
   1f900:	str	r3, [r4]
   1f904:	mov	r0, #12
   1f908:	pop	{r4, r5, r6, pc}
   1f90c:	mov	r3, #0
   1f910:	str	r3, [r0]
   1f914:	str	r3, [r0, #4]
   1f918:	str	r3, [r0, #8]
   1f91c:	mov	r0, r3
   1f920:	bx	lr
   1f924:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f928:	mov	r8, r0
   1f92c:	mov	r5, r2
   1f930:	subs	r7, r1, #0
   1f934:	beq	1f98c <__assert_fail@plt+0xdde8>
   1f938:	ldr	r0, [r7, #4]
   1f93c:	cmp	r2, #0
   1f940:	cmpne	r0, #0
   1f944:	ble	1f984 <__assert_fail@plt+0xdde0>
   1f948:	ldr	r3, [r2, #4]
   1f94c:	cmp	r3, #0
   1f950:	ble	1f984 <__assert_fail@plt+0xdde0>
   1f954:	add	r0, r0, r3
   1f958:	str	r0, [r8]
   1f95c:	lsl	r0, r0, #2
   1f960:	bl	2d404 <__assert_fail@plt+0x1b860>
   1f964:	str	r0, [r8, #8]
   1f968:	cmp	r0, #0
   1f96c:	beq	1faa8 <__assert_fail@plt+0xdf04>
   1f970:	mov	r3, #0
   1f974:	mov	r2, #1
   1f978:	mov	r4, r3
   1f97c:	mov	r6, r3
   1f980:	b	1f9f0 <__assert_fail@plt+0xde4c>
   1f984:	cmp	r0, #0
   1f988:	bgt	1f9b0 <__assert_fail@plt+0xde0c>
   1f98c:	cmp	r5, #0
   1f990:	beq	1f9c0 <__assert_fail@plt+0xde1c>
   1f994:	ldr	r3, [r5, #4]
   1f998:	cmp	r3, #0
   1f99c:	ble	1f9c0 <__assert_fail@plt+0xde1c>
   1f9a0:	mov	r1, r5
   1f9a4:	mov	r0, r8
   1f9a8:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   1f9ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9b0:	mov	r1, r7
   1f9b4:	mov	r0, r8
   1f9b8:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   1f9bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9c0:	mov	r0, #0
   1f9c4:	str	r0, [r8]
   1f9c8:	str	r0, [r8, #4]
   1f9cc:	str	r0, [r8, #8]
   1f9d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f9d4:	cmp	r1, r0
   1f9d8:	addeq	r4, r4, #1
   1f9dc:	add	r6, r6, #1
   1f9e0:	ldr	r0, [r8, #8]
   1f9e4:	str	r1, [r0, r3]
   1f9e8:	add	r2, r2, #1
   1f9ec:	add	r3, r3, #4
   1f9f0:	sub	r0, r2, #1
   1f9f4:	mov	r9, r0
   1f9f8:	ldr	r1, [r7, #4]
   1f9fc:	cmp	r6, r1
   1fa00:	bge	1fa64 <__assert_fail@plt+0xdec0>
   1fa04:	ldr	ip, [r5, #4]
   1fa08:	cmp	r4, ip
   1fa0c:	bge	1fa38 <__assert_fail@plt+0xde94>
   1fa10:	ldr	r1, [r7, #8]
   1fa14:	ldr	r1, [r1, r6, lsl #2]
   1fa18:	ldr	r0, [r5, #8]
   1fa1c:	ldr	r0, [r0, r4, lsl #2]
   1fa20:	cmp	r1, r0
   1fa24:	ble	1f9d4 <__assert_fail@plt+0xde30>
   1fa28:	add	r4, r4, #1
   1fa2c:	ldr	r1, [r8, #8]
   1fa30:	str	r0, [r1, r3]
   1fa34:	b	1f9e8 <__assert_fail@plt+0xde44>
   1fa38:	ldr	r3, [r8, #8]
   1fa3c:	sub	r2, r1, r6
   1fa40:	ldr	r1, [r7, #8]
   1fa44:	lsl	r2, r2, #2
   1fa48:	add	r1, r1, r6, lsl #2
   1fa4c:	add	r0, r3, r0, lsl #2
   1fa50:	bl	11784 <memcpy@plt>
   1fa54:	ldr	r3, [r7, #4]
   1fa58:	sub	r6, r3, r6
   1fa5c:	add	r9, r9, r6
   1fa60:	b	1fa70 <__assert_fail@plt+0xdecc>
   1fa64:	ldr	r2, [r5, #4]
   1fa68:	cmp	r4, r2
   1fa6c:	blt	1fa7c <__assert_fail@plt+0xded8>
   1fa70:	str	r9, [r8, #4]
   1fa74:	mov	r0, #0
   1fa78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fa7c:	ldr	r3, [r8, #8]
   1fa80:	sub	r2, r2, r4
   1fa84:	ldr	r1, [r5, #8]
   1fa88:	lsl	r2, r2, #2
   1fa8c:	add	r1, r1, r4, lsl #2
   1fa90:	add	r0, r3, r0, lsl #2
   1fa94:	bl	11784 <memcpy@plt>
   1fa98:	ldr	r3, [r5, #4]
   1fa9c:	sub	r4, r3, r4
   1faa0:	add	r9, r9, r4
   1faa4:	b	1fa70 <__assert_fail@plt+0xdecc>
   1faa8:	mov	r0, #12
   1faac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fab4:	sub	sp, sp, #92	; 0x5c
   1fab8:	mov	r5, r0
   1fabc:	ldr	r4, [r0, #28]
   1fac0:	ldr	r6, [r0, #36]	; 0x24
   1fac4:	ldr	r3, [r0, #48]	; 0x30
   1fac8:	cmp	r6, r3
   1facc:	movge	r6, r3
   1fad0:	ldrb	r3, [r0, #74]	; 0x4a
   1fad4:	cmp	r3, #0
   1fad8:	bne	1fae8 <__assert_fail@plt+0xdf44>
   1fadc:	ldr	r3, [r0, #64]	; 0x40
   1fae0:	cmp	r3, #0
   1fae4:	beq	1fb08 <__assert_fail@plt+0xdf64>
   1fae8:	ldr	r7, [r5, #32]
   1faec:	cmp	r4, r6
   1faf0:	blt	1fc48 <__assert_fail@plt+0xe0a4>
   1faf4:	str	r4, [r5, #28]
   1faf8:	str	r7, [r5, #32]
   1fafc:	mov	r0, #0
   1fb00:	add	sp, sp, #92	; 0x5c
   1fb04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fb08:	ldrb	r3, [r0, #76]	; 0x4c
   1fb0c:	cmp	r3, #0
   1fb10:	bne	1fae8 <__assert_fail@plt+0xdf44>
   1fb14:	cmp	r4, r6
   1fb18:	bge	1fdd0 <__assert_fail@plt+0xe22c>
   1fb1c:	add	r3, r0, #16
   1fb20:	str	r3, [sp, #4]
   1fb24:	mvn	r7, #0
   1fb28:	b	1fbf4 <__assert_fail@plt+0xe050>
   1fb2c:	ldr	r3, [sp, #4]
   1fb30:	ldm	r3, {r0, r1}
   1fb34:	add	r2, sp, #80	; 0x50
   1fb38:	stm	r2, {r0, r1}
   1fb3c:	mov	r9, r4
   1fb40:	add	r1, r8, r4
   1fb44:	sub	r2, r6, r4
   1fb48:	add	r1, fp, r1
   1fb4c:	add	r0, sp, #12
   1fb50:	bl	1b49c <__assert_fail@plt+0x98f8>
   1fb54:	mov	r8, r0
   1fb58:	sub	r3, r0, #1
   1fb5c:	cmn	r3, #4
   1fb60:	bhi	1fd5c <__assert_fail@plt+0xe1b8>
   1fb64:	ldr	fp, [sp, #12]
   1fb68:	mov	r0, fp
   1fb6c:	bl	11b50 <towupper@plt>
   1fb70:	mov	sl, r0
   1fb74:	cmp	fp, r0
   1fb78:	beq	1fd38 <__assert_fail@plt+0xe194>
   1fb7c:	add	r2, sp, #80	; 0x50
   1fb80:	mov	r1, r0
   1fb84:	add	r0, sp, #16
   1fb88:	bl	116dc <wcrtomb@plt>
   1fb8c:	cmp	r8, r0
   1fb90:	bne	1fc44 <__assert_fail@plt+0xe0a0>
   1fb94:	ldr	r0, [r5, #4]
   1fb98:	mov	r2, r8
   1fb9c:	add	r1, sp, #16
   1fba0:	add	r0, r0, r4
   1fba4:	bl	11784 <memcpy@plt>
   1fba8:	add	r4, r4, #1
   1fbac:	lsl	r3, r9, #2
   1fbb0:	ldr	r2, [r5, #8]
   1fbb4:	str	sl, [r2, r9, lsl #2]
   1fbb8:	sub	r2, r4, #1
   1fbbc:	add	r8, r2, r8
   1fbc0:	mov	r1, r8
   1fbc4:	cmp	r4, r8
   1fbc8:	bge	1fbec <__assert_fail@plt+0xe048>
   1fbcc:	add	r3, r3, #4
   1fbd0:	add	r4, r4, #1
   1fbd4:	ldr	r2, [r5, #8]
   1fbd8:	str	r7, [r2, r3]
   1fbdc:	add	r3, r3, #4
   1fbe0:	cmp	r1, r4
   1fbe4:	bne	1fbd0 <__assert_fail@plt+0xe02c>
   1fbe8:	mov	r4, r8
   1fbec:	cmp	r6, r4
   1fbf0:	ble	1fdd0 <__assert_fail@plt+0xe22c>
   1fbf4:	ldr	fp, [r5]
   1fbf8:	ldr	r8, [r5, #24]
   1fbfc:	add	r3, fp, r8
   1fc00:	ldrb	sl, [r3, r4]
   1fc04:	bics	r3, sl, #127	; 0x7f
   1fc08:	bne	1fb2c <__assert_fail@plt+0xdf88>
   1fc0c:	ldr	r0, [sp, #4]
   1fc10:	bl	117b4 <mbsinit@plt>
   1fc14:	cmp	r0, #0
   1fc18:	beq	1fb2c <__assert_fail@plt+0xdf88>
   1fc1c:	mov	r0, sl
   1fc20:	bl	11b50 <towupper@plt>
   1fc24:	bics	r3, r0, #127	; 0x7f
   1fc28:	bne	1fb2c <__assert_fail@plt+0xdf88>
   1fc2c:	ldr	r3, [r5, #4]
   1fc30:	strb	r0, [r3, r4]
   1fc34:	ldr	r3, [r5, #8]
   1fc38:	str	r0, [r3, r4, lsl #2]
   1fc3c:	add	r4, r4, #1
   1fc40:	b	1fbec <__assert_fail@plt+0xe048>
   1fc44:	mov	r7, r4
   1fc48:	sub	r2, r6, r4
   1fc4c:	add	r3, r5, #16
   1fc50:	ldm	r3, {r0, r1}
   1fc54:	add	r3, sp, #88	; 0x58
   1fc58:	stmdb	r3, {r0, r1}
   1fc5c:	ldr	r1, [r5, #64]	; 0x40
   1fc60:	cmp	r1, #0
   1fc64:	bne	1fde0 <__assert_fail@plt+0xe23c>
   1fc68:	ldr	r3, [r5, #24]
   1fc6c:	add	r3, r7, r3
   1fc70:	ldr	r1, [r5]
   1fc74:	add	r3, r1, r3
   1fc78:	str	r3, [sp, #4]
   1fc7c:	add	r3, r5, #16
   1fc80:	ldr	r1, [sp, #4]
   1fc84:	add	r0, sp, #12
   1fc88:	bl	1b49c <__assert_fail@plt+0x98f8>
   1fc8c:	mov	r8, r0
   1fc90:	sub	fp, r0, #1
   1fc94:	cmn	fp, #4
   1fc98:	bhi	1ffd4 <__assert_fail@plt+0xe430>
   1fc9c:	ldr	sl, [sp, #12]
   1fca0:	mov	r0, sl
   1fca4:	bl	11b50 <towupper@plt>
   1fca8:	mov	r9, r0
   1fcac:	cmp	sl, r0
   1fcb0:	beq	1ff8c <__assert_fail@plt+0xe3e8>
   1fcb4:	add	r2, sp, #80	; 0x50
   1fcb8:	mov	r1, r0
   1fcbc:	add	r0, sp, #16
   1fcc0:	bl	116dc <wcrtomb@plt>
   1fcc4:	mov	sl, r0
   1fcc8:	cmp	r8, r0
   1fccc:	bne	1fe40 <__assert_fail@plt+0xe29c>
   1fcd0:	ldr	r0, [r5, #4]
   1fcd4:	mov	r2, r8
   1fcd8:	add	r1, sp, #16
   1fcdc:	add	r0, r0, r4
   1fce0:	bl	11784 <memcpy@plt>
   1fce4:	ldrb	r3, [r5, #76]	; 0x4c
   1fce8:	cmp	r3, #0
   1fcec:	bne	1ffa4 <__assert_fail@plt+0xe400>
   1fcf0:	add	r7, r7, r8
   1fcf4:	add	r2, r4, #1
   1fcf8:	lsl	r3, r4, #2
   1fcfc:	ldr	r1, [r5, #8]
   1fd00:	str	r9, [r1, r4, lsl #2]
   1fd04:	add	r4, r4, r8
   1fd08:	mov	ip, r4
   1fd0c:	cmp	r2, r4
   1fd10:	bge	20068 <__assert_fail@plt+0xe4c4>
   1fd14:	add	r3, r3, #4
   1fd18:	mvn	r0, #0
   1fd1c:	add	r2, r2, #1
   1fd20:	ldr	r1, [r5, #8]
   1fd24:	str	r0, [r1, r3]
   1fd28:	add	r3, r3, #4
   1fd2c:	cmp	ip, r2
   1fd30:	bne	1fd1c <__assert_fail@plt+0xe178>
   1fd34:	b	1faec <__assert_fail@plt+0xdf48>
   1fd38:	ldr	r0, [r5, #4]
   1fd3c:	ldr	r3, [r5, #24]
   1fd40:	add	r3, r4, r3
   1fd44:	ldr	r1, [r5]
   1fd48:	mov	r2, r8
   1fd4c:	add	r1, r1, r3
   1fd50:	add	r0, r0, r4
   1fd54:	bl	11784 <memcpy@plt>
   1fd58:	b	1fba8 <__assert_fail@plt+0xe004>
   1fd5c:	cmn	r3, #3
   1fd60:	bhi	1fd94 <__assert_fail@plt+0xe1f0>
   1fd64:	cmn	r0, #2
   1fd68:	bne	1fdc0 <__assert_fail@plt+0xe21c>
   1fd6c:	ldr	r2, [r5, #36]	; 0x24
   1fd70:	ldr	r3, [r5, #48]	; 0x30
   1fd74:	cmp	r2, r3
   1fd78:	blt	1fdc0 <__assert_fail@plt+0xe21c>
   1fd7c:	ldr	r3, [r5, #4]
   1fd80:	strb	sl, [r3, r4]
   1fd84:	add	r4, r4, #1
   1fd88:	ldr	r3, [r5, #8]
   1fd8c:	str	sl, [r3, r9, lsl #2]
   1fd90:	b	1fbec <__assert_fail@plt+0xe048>
   1fd94:	ldr	r3, [r5, #4]
   1fd98:	strb	sl, [r3, r4]
   1fd9c:	add	r4, r4, #1
   1fda0:	ldr	r3, [r5, #8]
   1fda4:	str	sl, [r3, r9, lsl #2]
   1fda8:	cmn	r0, #1
   1fdac:	addeq	r3, sp, #80	; 0x50
   1fdb0:	ldmeq	r3, {r0, r1}
   1fdb4:	ldreq	r3, [sp, #4]
   1fdb8:	stmeq	r3, {r0, r1}
   1fdbc:	b	1fbec <__assert_fail@plt+0xe048>
   1fdc0:	add	r3, r5, #16
   1fdc4:	add	r2, sp, #88	; 0x58
   1fdc8:	ldmdb	r2, {r0, r1}
   1fdcc:	stm	r3, {r0, r1}
   1fdd0:	str	r4, [r5, #28]
   1fdd4:	str	r4, [r5, #32]
   1fdd8:	mov	r0, #0
   1fddc:	b	1fb00 <__assert_fail@plt+0xdf5c>
   1fde0:	ldr	r8, [r5, #80]	; 0x50
   1fde4:	cmp	r2, #0
   1fde8:	cmpgt	r8, #0
   1fdec:	ble	1fe34 <__assert_fail@plt+0xe290>
   1fdf0:	ldr	r3, [r5, #24]
   1fdf4:	add	r3, r7, r3
   1fdf8:	sub	r3, r3, #1
   1fdfc:	ldr	r0, [r5]
   1fe00:	add	r0, r0, r3
   1fe04:	add	ip, sp, #15
   1fe08:	mov	r3, #0
   1fe0c:	ldrb	lr, [r0, #1]!
   1fe10:	ldrb	lr, [r1, lr]
   1fe14:	strb	lr, [ip, #1]!
   1fe18:	add	r3, r3, #1
   1fe1c:	cmp	r8, r3
   1fe20:	cmpgt	r2, r3
   1fe24:	bgt	1fe0c <__assert_fail@plt+0xe268>
   1fe28:	add	r3, sp, #16
   1fe2c:	str	r3, [sp, #4]
   1fe30:	b	1fc7c <__assert_fail@plt+0xe0d8>
   1fe34:	add	r3, sp, #16
   1fe38:	str	r3, [sp, #4]
   1fe3c:	b	1fc7c <__assert_fail@plt+0xe0d8>
   1fe40:	cmn	r0, #1
   1fe44:	beq	1ff74 <__assert_fail@plt+0xe3d0>
   1fe48:	mov	r6, r4
   1fe4c:	add	r3, r4, r0
   1fe50:	str	r3, [sp, #4]
   1fe54:	ldr	r0, [r5, #36]	; 0x24
   1fe58:	cmp	r3, r0
   1fe5c:	bls	1fe74 <__assert_fail@plt+0xe2d0>
   1fe60:	add	r3, r5, #16
   1fe64:	add	r2, sp, #88	; 0x58
   1fe68:	ldmdb	r2, {r0, r1}
   1fe6c:	stm	r3, {r0, r1}
   1fe70:	b	1faf4 <__assert_fail@plt+0xdf50>
   1fe74:	ldr	r3, [r5, #12]
   1fe78:	cmp	r3, #0
   1fe7c:	beq	1ff58 <__assert_fail@plt+0xe3b4>
   1fe80:	ldrb	r3, [r5, #76]	; 0x4c
   1fe84:	cmp	r3, #0
   1fe88:	bne	1feb0 <__assert_fail@plt+0xe30c>
   1fe8c:	cmp	r6, #0
   1fe90:	beq	1fea8 <__assert_fail@plt+0xe304>
   1fe94:	ldr	r2, [r5, #12]
   1fe98:	str	r3, [r2, r3, lsl #2]
   1fe9c:	add	r3, r3, #1
   1fea0:	cmp	r6, r3
   1fea4:	bne	1fe94 <__assert_fail@plt+0xe2f0>
   1fea8:	mov	r3, #1
   1feac:	strb	r3, [r5, #76]	; 0x4c
   1feb0:	ldr	r0, [r5, #4]
   1feb4:	mov	r2, sl
   1feb8:	add	r1, sp, #16
   1febc:	add	r0, r0, r6
   1fec0:	bl	11784 <memcpy@plt>
   1fec4:	lsl	r3, r6, #2
   1fec8:	ldr	r2, [r5, #8]
   1fecc:	str	r9, [r2, r6, lsl #2]
   1fed0:	ldr	r2, [r5, #12]
   1fed4:	str	r7, [r2, r6, lsl #2]
   1fed8:	cmp	sl, #1
   1fedc:	bls	1ff1c <__assert_fail@plt+0xe378>
   1fee0:	add	r3, r3, #4
   1fee4:	mov	r2, #1
   1fee8:	mvn	r0, #0
   1feec:	ldr	ip, [r5, #12]
   1fef0:	cmp	r8, r2
   1fef4:	movhi	r1, r2
   1fef8:	movls	r1, fp
   1fefc:	add	r1, r7, r1
   1ff00:	str	r1, [ip, r3]
   1ff04:	ldr	r1, [r5, #8]
   1ff08:	str	r0, [r1, r3]
   1ff0c:	add	r2, r2, #1
   1ff10:	add	r3, r3, #4
   1ff14:	cmp	r2, sl
   1ff18:	bne	1feec <__assert_fail@plt+0xe348>
   1ff1c:	sub	sl, sl, r8
   1ff20:	ldr	r6, [r5, #48]	; 0x30
   1ff24:	add	r6, sl, r6
   1ff28:	str	r6, [r5, #48]	; 0x30
   1ff2c:	ldr	r3, [r5, #52]	; 0x34
   1ff30:	cmp	r7, r3
   1ff34:	ldrlt	r3, [r5, #56]	; 0x38
   1ff38:	addlt	sl, r3, sl
   1ff3c:	strlt	sl, [r5, #56]	; 0x38
   1ff40:	ldr	r3, [r5, #36]	; 0x24
   1ff44:	cmp	r6, r3
   1ff48:	movge	r6, r3
   1ff4c:	ldr	r4, [sp, #4]
   1ff50:	add	r7, r7, r8
   1ff54:	b	1faec <__assert_fail@plt+0xdf48>
   1ff58:	lsl	r0, r0, #2
   1ff5c:	bl	2d404 <__assert_fail@plt+0x1b860>
   1ff60:	str	r0, [r5, #12]
   1ff64:	cmp	r0, #0
   1ff68:	moveq	r0, #12
   1ff6c:	bne	1fe80 <__assert_fail@plt+0xe2dc>
   1ff70:	b	1fb00 <__assert_fail@plt+0xdf5c>
   1ff74:	ldr	r0, [r5, #4]
   1ff78:	mov	r2, r8
   1ff7c:	ldr	r1, [sp, #4]
   1ff80:	add	r0, r0, r4
   1ff84:	bl	11784 <memcpy@plt>
   1ff88:	b	1fce4 <__assert_fail@plt+0xe140>
   1ff8c:	ldr	r0, [r5, #4]
   1ff90:	mov	r2, r8
   1ff94:	ldr	r1, [sp, #4]
   1ff98:	add	r0, r0, r4
   1ff9c:	bl	11784 <memcpy@plt>
   1ffa0:	b	1fce4 <__assert_fail@plt+0xe140>
   1ffa4:	cmp	r8, #0
   1ffa8:	beq	1fcf0 <__assert_fail@plt+0xe14c>
   1ffac:	lsl	r2, r4, #2
   1ffb0:	mov	r3, r7
   1ffb4:	add	r0, r8, r7
   1ffb8:	ldr	r1, [r5, #12]
   1ffbc:	str	r3, [r1, r2]
   1ffc0:	add	r2, r2, #4
   1ffc4:	add	r3, r3, #1
   1ffc8:	cmp	r3, r0
   1ffcc:	bne	1ffb8 <__assert_fail@plt+0xe414>
   1ffd0:	b	1fcf0 <__assert_fail@plt+0xe14c>
   1ffd4:	cmn	fp, #3
   1ffd8:	bhi	20008 <__assert_fail@plt+0xe464>
   1ffdc:	cmn	r0, #2
   1ffe0:	beq	1fff8 <__assert_fail@plt+0xe454>
   1ffe4:	add	r3, r5, #16
   1ffe8:	add	r2, sp, #88	; 0x58
   1ffec:	ldmdb	r2, {r0, r1}
   1fff0:	stm	r3, {r0, r1}
   1fff4:	b	1faf4 <__assert_fail@plt+0xdf50>
   1fff8:	ldr	r2, [r5, #36]	; 0x24
   1fffc:	ldr	r3, [r5, #48]	; 0x30
   20000:	cmp	r2, r3
   20004:	blt	1ffe4 <__assert_fail@plt+0xe440>
   20008:	ldr	r3, [r5]
   2000c:	ldr	r2, [r5, #24]
   20010:	add	r3, r3, r7
   20014:	ldrb	r3, [r3, r2]
   20018:	ldr	r2, [r5, #64]	; 0x40
   2001c:	cmp	r2, #0
   20020:	ldrbne	r3, [r2, r3]
   20024:	mov	r1, r4
   20028:	ldr	r2, [r5, #4]
   2002c:	strb	r3, [r2, r4]
   20030:	ldrb	r2, [r5, #76]	; 0x4c
   20034:	cmp	r2, #0
   20038:	ldrne	r2, [r5, #12]
   2003c:	strne	r7, [r2, r4, lsl #2]
   20040:	add	r7, r7, #1
   20044:	add	r4, r4, #1
   20048:	ldr	r2, [r5, #8]
   2004c:	str	r3, [r2, r1, lsl #2]
   20050:	cmn	r8, #1
   20054:	addeq	r3, r5, #16
   20058:	addeq	r2, sp, #88	; 0x58
   2005c:	ldmdbeq	r2, {r0, r1}
   20060:	stmeq	r3, {r0, r1}
   20064:	b	1faec <__assert_fail@plt+0xdf48>
   20068:	mov	r4, r2
   2006c:	b	1faec <__assert_fail@plt+0xdf48>
   20070:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20074:	mov	r6, r0
   20078:	ldr	r8, [r0, #36]	; 0x24
   2007c:	ldr	r3, [r0, #48]	; 0x30
   20080:	cmp	r8, r3
   20084:	movge	r8, r3
   20088:	ldr	r4, [r0, #28]
   2008c:	cmp	r8, r4
   20090:	ble	200ec <__assert_fail@plt+0xe548>
   20094:	ldr	r9, [pc, #92]	; 200f8 <__assert_fail@plt+0xe554>
   20098:	b	200ac <__assert_fail@plt+0xe508>
   2009c:	strb	r5, [r7]
   200a0:	add	r4, r4, #1
   200a4:	cmp	r8, r4
   200a8:	beq	200ec <__assert_fail@plt+0xe548>
   200ac:	ldr	r3, [r6]
   200b0:	ldr	r2, [r6, #24]
   200b4:	add	r3, r3, r4
   200b8:	ldrb	r5, [r3, r2]
   200bc:	ldr	r3, [r6, #64]	; 0x40
   200c0:	cmp	r3, #0
   200c4:	ldrbne	r5, [r3, r5]
   200c8:	ldr	r7, [r6, #4]
   200cc:	add	r7, r7, r4
   200d0:	add	r3, r5, #128	; 0x80
   200d4:	cmp	r3, r9
   200d8:	bhi	2009c <__assert_fail@plt+0xe4f8>
   200dc:	bl	11934 <__ctype_toupper_loc@plt>
   200e0:	ldr	r3, [r0]
   200e4:	ldr	r5, [r3, r5, lsl #2]
   200e8:	b	2009c <__assert_fail@plt+0xe4f8>
   200ec:	str	r4, [r6, #28]
   200f0:	str	r4, [r6, #32]
   200f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   200f8:	andeq	r0, r0, pc, ror r1
   200fc:	push	{r4, r5, r6, lr}
   20100:	ldr	r3, [r0, #36]	; 0x24
   20104:	cmn	r3, #-536870910	; 0xe0000002
   20108:	bhi	201c4 <__assert_fail@plt+0xe620>
   2010c:	mov	r4, r0
   20110:	lsl	r3, r3, #1
   20114:	ldr	r2, [r0, #48]	; 0x30
   20118:	cmp	r3, r2
   2011c:	movge	r3, r2
   20120:	cmp	r3, r1
   20124:	movge	r1, r3
   20128:	bl	1ef80 <__assert_fail@plt+0xd3dc>
   2012c:	subs	r5, r0, #0
   20130:	bne	20180 <__assert_fail@plt+0xe5dc>
   20134:	ldr	r0, [r4, #100]	; 0x64
   20138:	cmp	r0, #0
   2013c:	beq	2015c <__assert_fail@plt+0xe5b8>
   20140:	ldr	r1, [r4, #36]	; 0x24
   20144:	add	r1, r1, #1
   20148:	lsl	r1, r1, #2
   2014c:	bl	2d434 <__assert_fail@plt+0x1b890>
   20150:	cmp	r0, #0
   20154:	beq	201cc <__assert_fail@plt+0xe628>
   20158:	str	r0, [r4, #100]	; 0x64
   2015c:	ldrb	r3, [r4, #72]	; 0x48
   20160:	cmp	r3, #0
   20164:	beq	20194 <__assert_fail@plt+0xe5f0>
   20168:	ldr	r3, [r4, #80]	; 0x50
   2016c:	cmp	r3, #1
   20170:	ble	20188 <__assert_fail@plt+0xe5e4>
   20174:	mov	r0, r4
   20178:	bl	1fab0 <__assert_fail@plt+0xdf0c>
   2017c:	mov	r5, r0
   20180:	mov	r0, r5
   20184:	pop	{r4, r5, r6, pc}
   20188:	mov	r0, r4
   2018c:	bl	20070 <__assert_fail@plt+0xe4cc>
   20190:	b	20180 <__assert_fail@plt+0xe5dc>
   20194:	ldr	r3, [r4, #80]	; 0x50
   20198:	cmp	r3, #1
   2019c:	bgt	201b8 <__assert_fail@plt+0xe614>
   201a0:	ldr	r3, [r4, #64]	; 0x40
   201a4:	cmp	r3, #0
   201a8:	beq	20180 <__assert_fail@plt+0xe5dc>
   201ac:	mov	r0, r4
   201b0:	bl	1e3a4 <__assert_fail@plt+0xc800>
   201b4:	b	20180 <__assert_fail@plt+0xe5dc>
   201b8:	mov	r0, r4
   201bc:	bl	1f54c <__assert_fail@plt+0xd9a8>
   201c0:	b	20180 <__assert_fail@plt+0xe5dc>
   201c4:	mov	r5, #12
   201c8:	b	20180 <__assert_fail@plt+0xe5dc>
   201cc:	mov	r5, #12
   201d0:	b	20180 <__assert_fail@plt+0xe5dc>
   201d4:	ldr	r3, [r1, #40]	; 0x28
   201d8:	ldr	ip, [r1, #56]	; 0x38
   201dc:	cmp	ip, r3
   201e0:	ble	2046c <__assert_fail@plt+0xe8c8>
   201e4:	push	{r4, r5, r6, r7, r8, lr}
   201e8:	sub	sp, sp, #8
   201ec:	ldr	ip, [r1, #4]
   201f0:	ldrb	r6, [ip, r3]
   201f4:	strb	r6, [r0]
   201f8:	ldrb	r3, [r0, #6]
   201fc:	and	r3, r3, #159	; 0x9f
   20200:	strb	r3, [r0, #6]
   20204:	ldr	r3, [r1, #80]	; 0x50
   20208:	cmp	r3, #1
   2020c:	ble	20230 <__assert_fail@plt+0xe68c>
   20210:	ldr	ip, [r1, #40]	; 0x28
   20214:	ldr	lr, [r1, #28]
   20218:	cmp	ip, lr
   2021c:	beq	20230 <__assert_fail@plt+0xe68c>
   20220:	ldr	lr, [r1, #8]
   20224:	ldr	ip, [lr, ip, lsl #2]
   20228:	cmn	ip, #1
   2022c:	beq	2047c <__assert_fail@plt+0xe8d8>
   20230:	mov	r7, r2
   20234:	mov	r4, r1
   20238:	mov	r5, r0
   2023c:	cmp	r6, #92	; 0x5c
   20240:	beq	2049c <__assert_fail@plt+0xe8f8>
   20244:	mov	r3, #1
   20248:	strb	r3, [r0, #4]
   2024c:	ldr	r3, [r1, #80]	; 0x50
   20250:	cmp	r3, #1
   20254:	ble	2095c <__assert_fail@plt+0xedb8>
   20258:	ldr	r1, [r1, #40]	; 0x28
   2025c:	mov	r0, r4
   20260:	bl	1e388 <__assert_fail@plt+0xc7e4>
   20264:	mov	r8, r0
   20268:	bl	119c4 <iswalnum@plt>
   2026c:	adds	r3, r0, #0
   20270:	movne	r3, #1
   20274:	ldrb	r0, [r5, #6]
   20278:	cmp	r8, #95	; 0x5f
   2027c:	orreq	r3, r3, #1
   20280:	bic	r0, r0, #64	; 0x40
   20284:	orr	r0, r0, r3, lsl #6
   20288:	strb	r0, [r5, #6]
   2028c:	sub	r6, r6, #10
   20290:	cmp	r6, #115	; 0x73
   20294:	ldrls	pc, [pc, r6, lsl #2]
   20298:	b	20b6c <__assert_fail@plt+0xefc8>
   2029c:	muleq	r2, r0, r9
   202a0:	andeq	r0, r2, ip, ror #22
   202a4:	andeq	r0, r2, ip, ror #22
   202a8:	andeq	r0, r2, ip, ror #22
   202ac:	andeq	r0, r2, ip, ror #22
   202b0:	andeq	r0, r2, ip, ror #22
   202b4:	andeq	r0, r2, ip, ror #22
   202b8:	andeq	r0, r2, ip, ror #22
   202bc:	andeq	r0, r2, ip, ror #22
   202c0:	andeq	r0, r2, ip, ror #22
   202c4:	andeq	r0, r2, ip, ror #22
   202c8:	andeq	r0, r2, ip, ror #22
   202cc:	andeq	r0, r2, ip, ror #22
   202d0:	andeq	r0, r2, ip, ror #22
   202d4:	andeq	r0, r2, ip, ror #22
   202d8:	andeq	r0, r2, ip, ror #22
   202dc:	andeq	r0, r2, ip, ror #22
   202e0:	andeq	r0, r2, ip, ror #22
   202e4:	andeq	r0, r2, ip, ror #22
   202e8:	andeq	r0, r2, ip, ror #22
   202ec:	andeq	r0, r2, ip, ror #22
   202f0:	andeq	r0, r2, ip, ror #22
   202f4:	andeq	r0, r2, ip, ror #22
   202f8:	andeq	r0, r2, ip, ror #22
   202fc:	andeq	r0, r2, ip, ror #22
   20300:	andeq	r0, r2, ip, ror #22
   20304:	strdeq	r0, [r2], -r8
   20308:	andeq	r0, r2, ip, ror #22
   2030c:	andeq	r0, r2, ip, ror #22
   20310:	andeq	r0, r2, ip, ror #22
   20314:	andeq	r0, r2, ip, asr #20
   20318:	andeq	r0, r2, r4, ror #20
   2031c:	andeq	r0, r2, r4, asr #19
   20320:	ldrdeq	r0, [r2], -r4
   20324:	andeq	r0, r2, ip, ror #22
   20328:	andeq	r0, r2, ip, ror #22
   2032c:	andeq	r0, r2, ip, lsl #21
   20330:	andeq	r0, r2, ip, ror #22
   20334:	andeq	r0, r2, ip, ror #22
   20338:	andeq	r0, r2, ip, ror #22
   2033c:	andeq	r0, r2, ip, ror #22
   20340:	andeq	r0, r2, ip, ror #22
   20344:	andeq	r0, r2, ip, ror #22
   20348:	andeq	r0, r2, ip, ror #22
   2034c:	andeq	r0, r2, ip, ror #22
   20350:	andeq	r0, r2, ip, ror #22
   20354:	andeq	r0, r2, ip, ror #22
   20358:	andeq	r0, r2, ip, ror #22
   2035c:	andeq	r0, r2, ip, ror #22
   20360:	andeq	r0, r2, ip, ror #22
   20364:	andeq	r0, r2, ip, ror #22
   20368:	andeq	r0, r2, ip, ror #22
   2036c:	andeq	r0, r2, ip, ror #22
   20370:	strdeq	r0, [r2], -r4
   20374:	andeq	r0, r2, ip, ror #22
   20378:	andeq	r0, r2, ip, ror #22
   2037c:	andeq	r0, r2, ip, ror #22
   20380:	andeq	r0, r2, ip, ror #22
   20384:	andeq	r0, r2, ip, ror #22
   20388:	andeq	r0, r2, ip, ror #22
   2038c:	andeq	r0, r2, ip, ror #22
   20390:	andeq	r0, r2, ip, ror #22
   20394:	andeq	r0, r2, ip, ror #22
   20398:	andeq	r0, r2, ip, ror #22
   2039c:	andeq	r0, r2, ip, ror #22
   203a0:	andeq	r0, r2, ip, ror #22
   203a4:	andeq	r0, r2, ip, ror #22
   203a8:	andeq	r0, r2, ip, ror #22
   203ac:	andeq	r0, r2, ip, ror #22
   203b0:	andeq	r0, r2, ip, ror #22
   203b4:	andeq	r0, r2, ip, ror #22
   203b8:	andeq	r0, r2, ip, ror #22
   203bc:	andeq	r0, r2, ip, ror #22
   203c0:	andeq	r0, r2, ip, ror #22
   203c4:	andeq	r0, r2, ip, ror #22
   203c8:	andeq	r0, r2, ip, ror #22
   203cc:	andeq	r0, r2, ip, ror #22
   203d0:	andeq	r0, r2, ip, ror #22
   203d4:	andeq	r0, r2, ip, ror #22
   203d8:	andeq	r0, r2, ip, ror #22
   203dc:	andeq	r0, r2, ip, ror #22
   203e0:	andeq	r0, r2, ip, ror sl
   203e4:	andeq	r0, r2, ip, ror #22
   203e8:	andeq	r0, r2, ip, ror #22
   203ec:	muleq	r2, ip, sl
   203f0:	andeq	r0, r2, ip, ror #22
   203f4:	andeq	r0, r2, ip, ror #22
   203f8:	andeq	r0, r2, ip, ror #22
   203fc:	andeq	r0, r2, ip, ror #22
   20400:	andeq	r0, r2, ip, ror #22
   20404:	andeq	r0, r2, ip, ror #22
   20408:	andeq	r0, r2, ip, ror #22
   2040c:	andeq	r0, r2, ip, ror #22
   20410:	andeq	r0, r2, ip, ror #22
   20414:	andeq	r0, r2, ip, ror #22
   20418:	andeq	r0, r2, ip, ror #22
   2041c:	andeq	r0, r2, ip, ror #22
   20420:	andeq	r0, r2, ip, ror #22
   20424:	andeq	r0, r2, ip, ror #22
   20428:	andeq	r0, r2, ip, ror #22
   2042c:	andeq	r0, r2, ip, ror #22
   20430:	andeq	r0, r2, ip, ror #22
   20434:	andeq	r0, r2, ip, ror #22
   20438:	andeq	r0, r2, ip, ror #22
   2043c:	andeq	r0, r2, ip, ror #22
   20440:	andeq	r0, r2, ip, ror #22
   20444:	andeq	r0, r2, ip, ror #22
   20448:	andeq	r0, r2, ip, ror #22
   2044c:	andeq	r0, r2, ip, ror #22
   20450:	andeq	r0, r2, ip, ror #22
   20454:	andeq	r0, r2, ip, ror #22
   20458:	andeq	r0, r2, ip, ror #22
   2045c:	andeq	r0, r2, ip, ror #22
   20460:	andeq	r0, r2, r4, lsl sl
   20464:	andeq	r0, r2, r8, lsr #19
   20468:	andeq	r0, r2, r0, lsr sl
   2046c:	mov	r3, #2
   20470:	strb	r3, [r0, #4]
   20474:	mov	r0, #0
   20478:	bx	lr
   2047c:	mov	r3, #1
   20480:	strb	r3, [r0, #4]
   20484:	ldrb	r2, [r0, #6]
   20488:	orr	r2, r2, #32
   2048c:	strb	r2, [r0, #6]
   20490:	mov	r0, r3
   20494:	add	sp, sp, #8
   20498:	pop	{r4, r5, r6, r7, r8, pc}
   2049c:	ldr	r1, [r1, #40]	; 0x28
   204a0:	add	r2, r1, #1
   204a4:	ldr	r0, [r4, #48]	; 0x30
   204a8:	cmp	r2, r0
   204ac:	bge	20680 <__assert_fail@plt+0xeadc>
   204b0:	ldrb	r0, [r4, #75]	; 0x4b
   204b4:	cmp	r0, #0
   204b8:	bne	20690 <__assert_fail@plt+0xeaec>
   204bc:	ldr	r3, [r4, #4]
   204c0:	ldrb	r6, [r3, r2]
   204c4:	strb	r6, [r5]
   204c8:	mov	r3, #1
   204cc:	strb	r3, [r5, #4]
   204d0:	ldr	r3, [r4, #80]	; 0x50
   204d4:	cmp	r3, #1
   204d8:	ble	2070c <__assert_fail@plt+0xeb68>
   204dc:	ldr	r1, [r4, #40]	; 0x28
   204e0:	add	r1, r1, #1
   204e4:	mov	r0, r4
   204e8:	bl	1e388 <__assert_fail@plt+0xc7e4>
   204ec:	mov	r4, r0
   204f0:	bl	119c4 <iswalnum@plt>
   204f4:	adds	r3, r0, #0
   204f8:	movne	r3, #1
   204fc:	ldrb	r0, [r5, #6]
   20500:	cmp	r4, #95	; 0x5f
   20504:	orreq	r3, r3, #1
   20508:	bic	r0, r0, #64	; 0x40
   2050c:	orr	r0, r0, r3, lsl #6
   20510:	strb	r0, [r5, #6]
   20514:	sub	r3, r6, #39	; 0x27
   20518:	cmp	r3, #86	; 0x56
   2051c:	ldrls	pc, [pc, r3, lsl #2]
   20520:	b	20b64 <__assert_fail@plt+0xefc0>
   20524:	muleq	r2, r0, r8
   20528:			; <UNDEFINED> instruction: 0x000208b4
   2052c:	andeq	r0, r2, ip, asr #17
   20530:	andeq	r0, r2, r4, ror #22
   20534:	andeq	r0, r2, r4, ror #17
   20538:	andeq	r0, r2, r4, ror #22
   2053c:	andeq	r0, r2, r4, ror #22
   20540:	andeq	r0, r2, r4, ror #22
   20544:	andeq	r0, r2, r4, ror #22
   20548:	andeq	r0, r2, r4, ror #22
   2054c:	andeq	r0, r2, r8, asr r7
   20550:	andeq	r0, r2, r8, asr r7
   20554:	andeq	r0, r2, r8, asr r7
   20558:	andeq	r0, r2, r8, asr r7
   2055c:	andeq	r0, r2, r8, asr r7
   20560:	andeq	r0, r2, r8, asr r7
   20564:	andeq	r0, r2, r8, asr r7
   20568:	andeq	r0, r2, r8, asr r7
   2056c:	andeq	r0, r2, r8, asr r7
   20570:	andeq	r0, r2, r4, ror #22
   20574:	andeq	r0, r2, r4, ror #22
   20578:	andeq	r0, r2, ip, ror r7
   2057c:	andeq	r0, r2, r4, ror #22
   20580:	andeq	r0, r2, r0, lsr #15
   20584:	andeq	r0, r2, r4, lsl #18
   20588:	andeq	r0, r2, r4, ror #22
   2058c:	andeq	r0, r2, r4, ror #22
   20590:	andeq	r0, r2, r8, ror #15
   20594:	andeq	r0, r2, r4, ror #22
   20598:	andeq	r0, r2, r4, ror #22
   2059c:	andeq	r0, r2, r4, ror #22
   205a0:	andeq	r0, r2, r4, ror #22
   205a4:	andeq	r0, r2, r4, ror #22
   205a8:	andeq	r0, r2, r4, ror #22
   205ac:	andeq	r0, r2, r4, ror #22
   205b0:	andeq	r0, r2, r4, ror #22
   205b4:	andeq	r0, r2, r4, ror #22
   205b8:	andeq	r0, r2, r4, ror #22
   205bc:	andeq	r0, r2, r4, ror #22
   205c0:	andeq	r0, r2, r4, ror #22
   205c4:	andeq	r0, r2, r4, ror #22
   205c8:	andeq	r0, r2, r4, ror #22
   205cc:	andeq	r0, r2, r4, ror #22
   205d0:	andeq	r0, r2, r4, ror #22
   205d4:	andeq	r0, r2, r4, asr r8
   205d8:	andeq	r0, r2, r4, ror #22
   205dc:	andeq	r0, r2, r4, ror #22
   205e0:	andeq	r0, r2, r4, ror #22
   205e4:	andeq	r0, r2, r4, lsr #16
   205e8:	andeq	r0, r2, r4, ror #22
   205ec:	andeq	r0, r2, r4, ror #22
   205f0:	andeq	r0, r2, r4, ror #22
   205f4:	andeq	r0, r2, r4, ror #22
   205f8:	andeq	r0, r2, r4, ror #22
   205fc:	andeq	r0, r2, r4, ror #22
   20600:	andeq	r0, r2, r4, ror #22
   20604:	andeq	r0, r2, r4, ror #22
   20608:	andeq	r0, r2, ip, ror #16
   2060c:	andeq	r0, r2, r4, ror #22
   20610:	andeq	r0, r2, r4, asr #15
   20614:	andeq	r0, r2, r4, ror #22
   20618:	andeq	r0, r2, r4, ror #22
   2061c:	andeq	r0, r2, r4, ror #22
   20620:	andeq	r0, r2, r4, ror #22
   20624:	andeq	r0, r2, r4, ror #22
   20628:	andeq	r0, r2, r4, ror #22
   2062c:	andeq	r0, r2, r4, ror #22
   20630:	andeq	r0, r2, r4, ror #22
   20634:	andeq	r0, r2, r4, ror #22
   20638:	andeq	r0, r2, r4, ror #22
   2063c:	andeq	r0, r2, r4, ror #22
   20640:	andeq	r0, r2, r4, ror #22
   20644:	andeq	r0, r2, r4, ror #22
   20648:	andeq	r0, r2, r4, ror #22
   2064c:	andeq	r0, r2, r4, ror #22
   20650:	andeq	r0, r2, r4, ror #22
   20654:	andeq	r0, r2, ip, lsr r8
   20658:	andeq	r0, r2, r4, ror #22
   2065c:	andeq	r0, r2, r4, ror #22
   20660:	andeq	r0, r2, r4, ror #22
   20664:	andeq	r0, r2, ip, lsl #16
   20668:	andeq	r0, r2, r4, ror #22
   2066c:	andeq	r0, r2, r4, ror #22
   20670:	andeq	r0, r2, r4, ror #22
   20674:	andeq	r0, r2, r4, lsr #18
   20678:	andeq	r0, r2, r0, asr #14
   2067c:	andeq	r0, r2, r0, asr #18
   20680:	mov	r3, #36	; 0x24
   20684:	strb	r3, [r5, #4]
   20688:	mov	r0, #1
   2068c:	b	20494 <__assert_fail@plt+0xe8f0>
   20690:	cmp	r3, #1
   20694:	ble	206cc <__assert_fail@plt+0xeb28>
   20698:	ldr	r3, [r4, #8]
   2069c:	lsl	ip, r2, #2
   206a0:	ldr	r0, [r3, r2, lsl #2]
   206a4:	cmn	r0, #1
   206a8:	beq	20700 <__assert_fail@plt+0xeb5c>
   206ac:	add	r1, r1, #2
   206b0:	ldr	r0, [r4, #28]
   206b4:	cmp	r0, r1
   206b8:	beq	206cc <__assert_fail@plt+0xeb28>
   206bc:	add	r3, r3, ip
   206c0:	ldr	r3, [r3, #4]
   206c4:	cmn	r3, #1
   206c8:	beq	20700 <__assert_fail@plt+0xeb5c>
   206cc:	ldrb	r3, [r4, #76]	; 0x4c
   206d0:	cmp	r3, #0
   206d4:	beq	20b74 <__assert_fail@plt+0xefd0>
   206d8:	ldr	r1, [r4, #12]
   206dc:	ldr	r3, [r4]
   206e0:	ldr	r0, [r1, r2, lsl #2]
   206e4:	ldr	r1, [r4, #24]
   206e8:	add	r3, r3, r0
   206ec:	ldrb	r6, [r3, r1]
   206f0:	bics	r3, r6, #127	; 0x7f
   206f4:	ldrne	r3, [r4, #4]
   206f8:	ldrbne	r6, [r3, r2]
   206fc:	b	204c4 <__assert_fail@plt+0xe920>
   20700:	ldr	r3, [r4, #4]
   20704:	ldrb	r6, [r3, r2]
   20708:	b	204c4 <__assert_fail@plt+0xe920>
   2070c:	bl	11964 <__ctype_b_loc@plt>
   20710:	ldr	r2, [r0]
   20714:	lsl	r3, r6, #1
   20718:	ldrh	r3, [r2, r3]
   2071c:	lsr	r3, r3, #3
   20720:	and	r3, r3, #1
   20724:	ldrb	r2, [r5, #6]
   20728:	cmp	r6, #95	; 0x5f
   2072c:	orreq	r3, r3, #1
   20730:	bic	r2, r2, #64	; 0x40
   20734:	orr	r3, r2, r3, lsl #6
   20738:	strb	r3, [r5, #6]
   2073c:	b	20514 <__assert_fail@plt+0xe970>
   20740:	tst	r7, #33792	; 0x8400
   20744:	movne	r0, #2
   20748:	moveq	r3, #10
   2074c:	strbeq	r3, [r5, #4]
   20750:	moveq	r0, #2
   20754:	b	20494 <__assert_fail@plt+0xe8f0>
   20758:	tst	r7, #16384	; 0x4000
   2075c:	movne	r0, #2
   20760:	bne	20494 <__assert_fail@plt+0xe8f0>
   20764:	mov	r3, #4
   20768:	strb	r3, [r5, #4]
   2076c:	sub	r6, r6, #49	; 0x31
   20770:	str	r6, [r5]
   20774:	mov	r0, #2
   20778:	b	20494 <__assert_fail@plt+0xe8f0>
   2077c:	tst	r7, #524288	; 0x80000
   20780:	movne	r0, #2
   20784:	bne	20494 <__assert_fail@plt+0xe8f0>
   20788:	mov	r3, #12
   2078c:	strb	r3, [r5, #4]
   20790:	mov	r3, #6
   20794:	str	r3, [r5]
   20798:	mov	r0, #2
   2079c:	b	20494 <__assert_fail@plt+0xe8f0>
   207a0:	tst	r7, #524288	; 0x80000
   207a4:	movne	r0, #2
   207a8:	bne	20494 <__assert_fail@plt+0xe8f0>
   207ac:	mov	r3, #12
   207b0:	strb	r3, [r5, #4]
   207b4:	mov	r3, #9
   207b8:	str	r3, [r5]
   207bc:	mov	r0, #2
   207c0:	b	20494 <__assert_fail@plt+0xe8f0>
   207c4:	tst	r7, #524288	; 0x80000
   207c8:	movne	r0, #2
   207cc:	bne	20494 <__assert_fail@plt+0xe8f0>
   207d0:	mov	r3, #12
   207d4:	strb	r3, [r5, #4]
   207d8:	mov	r3, #256	; 0x100
   207dc:	str	r3, [r5]
   207e0:	mov	r0, #2
   207e4:	b	20494 <__assert_fail@plt+0xe8f0>
   207e8:	tst	r7, #524288	; 0x80000
   207ec:	movne	r0, #2
   207f0:	bne	20494 <__assert_fail@plt+0xe8f0>
   207f4:	mov	r3, #12
   207f8:	strb	r3, [r5, #4]
   207fc:	mov	r3, #512	; 0x200
   20800:	str	r3, [r5]
   20804:	mov	r0, #2
   20808:	b	20494 <__assert_fail@plt+0xe8f0>
   2080c:	tst	r7, #524288	; 0x80000
   20810:	movne	r0, #2
   20814:	moveq	r3, #32
   20818:	strbeq	r3, [r5, #4]
   2081c:	moveq	r0, #2
   20820:	b	20494 <__assert_fail@plt+0xe8f0>
   20824:	tst	r7, #524288	; 0x80000
   20828:	movne	r0, #2
   2082c:	moveq	r3, #33	; 0x21
   20830:	strbeq	r3, [r5, #4]
   20834:	moveq	r0, #2
   20838:	b	20494 <__assert_fail@plt+0xe8f0>
   2083c:	tst	r7, #524288	; 0x80000
   20840:	movne	r0, #2
   20844:	moveq	r3, #34	; 0x22
   20848:	strbeq	r3, [r5, #4]
   2084c:	moveq	r0, #2
   20850:	b	20494 <__assert_fail@plt+0xe8f0>
   20854:	tst	r7, #524288	; 0x80000
   20858:	movne	r0, #2
   2085c:	moveq	r3, #35	; 0x23
   20860:	strbeq	r3, [r5, #4]
   20864:	moveq	r0, #2
   20868:	b	20494 <__assert_fail@plt+0xe8f0>
   2086c:	tst	r7, #524288	; 0x80000
   20870:	movne	r0, #2
   20874:	bne	20494 <__assert_fail@plt+0xe8f0>
   20878:	mov	r3, #12
   2087c:	strb	r3, [r5, #4]
   20880:	mov	r3, #64	; 0x40
   20884:	str	r3, [r5]
   20888:	mov	r0, #2
   2088c:	b	20494 <__assert_fail@plt+0xe8f0>
   20890:	tst	r7, #524288	; 0x80000
   20894:	movne	r0, #2
   20898:	bne	20494 <__assert_fail@plt+0xe8f0>
   2089c:	mov	r3, #12
   208a0:	strb	r3, [r5, #4]
   208a4:	mov	r3, #128	; 0x80
   208a8:	str	r3, [r5]
   208ac:	mov	r0, #2
   208b0:	b	20494 <__assert_fail@plt+0xe8f0>
   208b4:	tst	r7, #8192	; 0x2000
   208b8:	movne	r0, #2
   208bc:	moveq	r3, #8
   208c0:	strbeq	r3, [r5, #4]
   208c4:	moveq	r0, #2
   208c8:	b	20494 <__assert_fail@plt+0xe8f0>
   208cc:	tst	r7, #8192	; 0x2000
   208d0:	movne	r0, #2
   208d4:	moveq	r3, #9
   208d8:	strbeq	r3, [r5, #4]
   208dc:	moveq	r0, #2
   208e0:	b	20494 <__assert_fail@plt+0xe8f0>
   208e4:	ldr	r3, [pc, #668]	; 20b88 <__assert_fail@plt+0xefe4>
   208e8:	and	r3, r3, r7
   208ec:	cmp	r3, #2
   208f0:	moveq	r3, #18
   208f4:	strbeq	r3, [r5, #4]
   208f8:	moveq	r0, #2
   208fc:	movne	r0, #2
   20900:	b	20494 <__assert_fail@plt+0xe8f0>
   20904:	ldr	r3, [pc, #636]	; 20b88 <__assert_fail@plt+0xefe4>
   20908:	and	r3, r3, r7
   2090c:	cmp	r3, #2
   20910:	moveq	r3, #19
   20914:	strbeq	r3, [r5, #4]
   20918:	moveq	r0, #2
   2091c:	movne	r0, #2
   20920:	b	20494 <__assert_fail@plt+0xe8f0>
   20924:	and	r7, r7, #4608	; 0x1200
   20928:	cmp	r7, #512	; 0x200
   2092c:	moveq	r3, #23
   20930:	strbeq	r3, [r5, #4]
   20934:	moveq	r0, #2
   20938:	movne	r0, #2
   2093c:	b	20494 <__assert_fail@plt+0xe8f0>
   20940:	and	r7, r7, #4608	; 0x1200
   20944:	cmp	r7, #512	; 0x200
   20948:	moveq	r3, #24
   2094c:	strbeq	r3, [r5, #4]
   20950:	moveq	r0, #2
   20954:	movne	r0, #2
   20958:	b	20494 <__assert_fail@plt+0xe8f0>
   2095c:	bl	11964 <__ctype_b_loc@plt>
   20960:	ldr	r2, [r0]
   20964:	lsl	r3, r6, #1
   20968:	ldrh	r3, [r2, r3]
   2096c:	lsr	r3, r3, #3
   20970:	and	r3, r3, #1
   20974:	ldrb	r2, [r5, #6]
   20978:	cmp	r6, #95	; 0x5f
   2097c:	orreq	r3, r3, #1
   20980:	bic	r2, r2, #64	; 0x40
   20984:	orr	r3, r2, r3, lsl #6
   20988:	strb	r3, [r5, #6]
   2098c:	b	2028c <__assert_fail@plt+0xe6e8>
   20990:	tst	r7, #2048	; 0x800
   20994:	moveq	r0, #1
   20998:	movne	r3, #10
   2099c:	strbne	r3, [r5, #4]
   209a0:	movne	r0, #1
   209a4:	b	20494 <__assert_fail@plt+0xe8f0>
   209a8:	and	r7, r7, #33792	; 0x8400
   209ac:	cmp	r7, #32768	; 0x8000
   209b0:	moveq	r3, #10
   209b4:	strbeq	r3, [r5, #4]
   209b8:	moveq	r0, #1
   209bc:	movne	r0, #1
   209c0:	b	20494 <__assert_fail@plt+0xe8f0>
   209c4:	mov	r3, #11
   209c8:	strb	r3, [r5, #4]
   209cc:	mov	r0, #1
   209d0:	b	20494 <__assert_fail@plt+0xe8f0>
   209d4:	ldr	r3, [pc, #428]	; 20b88 <__assert_fail@plt+0xefe4>
   209d8:	and	r3, r3, r7
   209dc:	cmp	r3, #0
   209e0:	movne	r0, #1
   209e4:	moveq	r3, #18
   209e8:	strbeq	r3, [r5, #4]
   209ec:	moveq	r0, #1
   209f0:	b	20494 <__assert_fail@plt+0xe8f0>
   209f4:	ldr	r3, [pc, #396]	; 20b88 <__assert_fail@plt+0xefe4>
   209f8:	and	r3, r3, r7
   209fc:	cmp	r3, #0
   20a00:	movne	r0, #1
   20a04:	moveq	r3, #19
   20a08:	strbeq	r3, [r5, #4]
   20a0c:	moveq	r0, #1
   20a10:	b	20494 <__assert_fail@plt+0xe8f0>
   20a14:	and	r7, r7, #4608	; 0x1200
   20a18:	cmp	r7, #4608	; 0x1200
   20a1c:	moveq	r3, #23
   20a20:	strbeq	r3, [r5, #4]
   20a24:	moveq	r0, #1
   20a28:	movne	r0, #1
   20a2c:	b	20494 <__assert_fail@plt+0xe8f0>
   20a30:	and	r7, r7, #4608	; 0x1200
   20a34:	cmp	r7, #4608	; 0x1200
   20a38:	moveq	r3, #24
   20a3c:	strbeq	r3, [r5, #4]
   20a40:	moveq	r0, #1
   20a44:	movne	r0, #1
   20a48:	b	20494 <__assert_fail@plt+0xe8f0>
   20a4c:	tst	r7, #8192	; 0x2000
   20a50:	moveq	r0, #1
   20a54:	movne	r3, #8
   20a58:	strbne	r3, [r5, #4]
   20a5c:	movne	r0, #1
   20a60:	b	20494 <__assert_fail@plt+0xe8f0>
   20a64:	tst	r7, #8192	; 0x2000
   20a68:	moveq	r0, #1
   20a6c:	movne	r3, #9
   20a70:	strbne	r3, [r5, #4]
   20a74:	movne	r0, #1
   20a78:	b	20494 <__assert_fail@plt+0xe8f0>
   20a7c:	mov	r3, #20
   20a80:	strb	r3, [r5, #4]
   20a84:	mov	r0, #1
   20a88:	b	20494 <__assert_fail@plt+0xe8f0>
   20a8c:	mov	r3, #5
   20a90:	strb	r3, [r5, #4]
   20a94:	mov	r0, #1
   20a98:	b	20494 <__assert_fail@plt+0xe8f0>
   20a9c:	ldr	r3, [pc, #232]	; 20b8c <__assert_fail@plt+0xefe8>
   20aa0:	and	r3, r3, r7
   20aa4:	cmp	r3, #0
   20aa8:	bne	20ae0 <__assert_fail@plt+0xef3c>
   20aac:	ldr	r3, [r4, #40]	; 0x28
   20ab0:	cmp	r3, #0
   20ab4:	beq	20ae0 <__assert_fail@plt+0xef3c>
   20ab8:	ldr	r2, [r4, #4]
   20abc:	add	r3, r2, r3
   20ac0:	ldrb	r2, [r3, #-1]
   20ac4:	lsr	r3, r7, #11
   20ac8:	eor	r3, r3, #1
   20acc:	cmp	r2, #10
   20ad0:	orrne	r3, r3, #1
   20ad4:	tst	r3, #1
   20ad8:	movne	r0, #1
   20adc:	bne	20494 <__assert_fail@plt+0xe8f0>
   20ae0:	mov	r3, #12
   20ae4:	strb	r3, [r5, #4]
   20ae8:	mov	r3, #16
   20aec:	str	r3, [r5]
   20af0:	mov	r0, #1
   20af4:	b	20494 <__assert_fail@plt+0xe8f0>
   20af8:	tst	r7, #8
   20afc:	bne	20b4c <__assert_fail@plt+0xefa8>
   20b00:	ldr	r3, [r4, #40]	; 0x28
   20b04:	add	r3, r3, #1
   20b08:	ldr	r2, [r4, #48]	; 0x30
   20b0c:	cmp	r3, r2
   20b10:	beq	20b4c <__assert_fail@plt+0xefa8>
   20b14:	str	r3, [r4, #40]	; 0x28
   20b18:	mov	r2, r7
   20b1c:	mov	r1, r4
   20b20:	mov	r0, sp
   20b24:	bl	201d4 <__assert_fail@plt+0xe630>
   20b28:	ldr	r3, [r4, #40]	; 0x28
   20b2c:	sub	r3, r3, #1
   20b30:	str	r3, [r4, #40]	; 0x28
   20b34:	ldrb	r3, [sp, #4]
   20b38:	sub	r3, r3, #9
   20b3c:	uxtb	r3, r3
   20b40:	cmp	r3, #1
   20b44:	movhi	r0, #1
   20b48:	bhi	20494 <__assert_fail@plt+0xe8f0>
   20b4c:	mov	r3, #12
   20b50:	strb	r3, [r5, #4]
   20b54:	mov	r3, #32
   20b58:	str	r3, [r5]
   20b5c:	mov	r0, #1
   20b60:	b	20494 <__assert_fail@plt+0xe8f0>
   20b64:	mov	r0, #2
   20b68:	b	20494 <__assert_fail@plt+0xe8f0>
   20b6c:	mov	r0, #1
   20b70:	b	20494 <__assert_fail@plt+0xe8f0>
   20b74:	ldr	r3, [r4]
   20b78:	ldr	r1, [r4, #24]
   20b7c:	add	r2, r3, r2
   20b80:	ldrb	r6, [r2, r1]
   20b84:	b	204c4 <__assert_fail@plt+0xe920>
   20b88:	andeq	r0, r0, r2, lsl #8
   20b8c:	addeq	r0, r0, r8
   20b90:	push	{r4, lr}
   20b94:	mov	r4, r1
   20b98:	bl	201d4 <__assert_fail@plt+0xe630>
   20b9c:	ldr	r3, [r4, #40]	; 0x28
   20ba0:	add	r0, r3, r0
   20ba4:	str	r0, [r4, #40]	; 0x28
   20ba8:	pop	{r4, pc}
   20bac:	push	{r4, r5, r6, r7, r8, lr}
   20bb0:	mov	r7, r0
   20bb4:	mov	r4, r1
   20bb8:	mov	r6, r2
   20bbc:	mvn	r5, #0
   20bc0:	mov	r2, r6
   20bc4:	mov	r1, r7
   20bc8:	mov	r0, r4
   20bcc:	bl	20b90 <__assert_fail@plt+0xefec>
   20bd0:	ldrb	r2, [r4]
   20bd4:	ldrb	r3, [r4, #4]
   20bd8:	cmp	r3, #2
   20bdc:	beq	20c44 <__assert_fail@plt+0xf0a0>
   20be0:	cmp	r3, #24
   20be4:	cmpne	r2, #44	; 0x2c
   20be8:	beq	20c48 <__assert_fail@plt+0xf0a4>
   20bec:	cmp	r3, #1
   20bf0:	mvnne	r5, #1
   20bf4:	bne	20bc0 <__assert_fail@plt+0xf01c>
   20bf8:	sub	r3, r2, #48	; 0x30
   20bfc:	uxtb	r3, r3
   20c00:	cmp	r3, #9
   20c04:	movhi	r3, #0
   20c08:	movls	r3, #1
   20c0c:	cmn	r5, #2
   20c10:	moveq	r3, #0
   20c14:	cmp	r3, #0
   20c18:	mvneq	r5, #1
   20c1c:	beq	20bc0 <__assert_fail@plt+0xf01c>
   20c20:	cmn	r5, #1
   20c24:	subeq	r5, r2, #48	; 0x30
   20c28:	beq	20bc0 <__assert_fail@plt+0xf01c>
   20c2c:	add	r5, r5, r5, lsl #2
   20c30:	add	r2, r2, r5, lsl #1
   20c34:	sub	r5, r2, #48	; 0x30
   20c38:	cmp	r5, #32768	; 0x8000
   20c3c:	movge	r5, #32768	; 0x8000
   20c40:	b	20bc0 <__assert_fail@plt+0xf01c>
   20c44:	mvn	r5, #1
   20c48:	mov	r0, r5
   20c4c:	pop	{r4, r5, r6, r7, r8, pc}
   20c50:	push	{r4, lr}
   20c54:	mov	r4, r0
   20c58:	ldr	r0, [r0]
   20c5c:	bl	17204 <__assert_fail@plt+0x5660>
   20c60:	ldr	r0, [r4, #4]
   20c64:	bl	17204 <__assert_fail@plt+0x5660>
   20c68:	ldr	r0, [r4, #8]
   20c6c:	bl	17204 <__assert_fail@plt+0x5660>
   20c70:	ldr	r0, [r4, #12]
   20c74:	bl	17204 <__assert_fail@plt+0x5660>
   20c78:	mov	r0, r4
   20c7c:	bl	17204 <__assert_fail@plt+0x5660>
   20c80:	pop	{r4, pc}
   20c84:	push	{r4, lr}
   20c88:	ldr	r2, [r0, #4]
   20c8c:	ldr	r3, [pc, #40]	; 20cbc <__assert_fail@plt+0xf118>
   20c90:	and	r3, r3, r2
   20c94:	cmp	r3, #6
   20c98:	beq	20cb0 <__assert_fail@plt+0xf10c>
   20c9c:	cmp	r3, #3
   20ca0:	popne	{r4, pc}
   20ca4:	ldr	r0, [r0]
   20ca8:	bl	17204 <__assert_fail@plt+0x5660>
   20cac:	pop	{r4, pc}
   20cb0:	ldr	r0, [r0]
   20cb4:	bl	20c50 <__assert_fail@plt+0xf0ac>
   20cb8:	pop	{r4, pc}
   20cbc:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   20cc0:	push	{r4, lr}
   20cc4:	add	r0, r1, #20
   20cc8:	bl	20c84 <__assert_fail@plt+0xf0e0>
   20ccc:	mov	r0, #0
   20cd0:	pop	{r4, pc}
   20cd4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20cd8:	sub	sp, sp, #8
   20cdc:	mov	r4, r0
   20ce0:	add	r3, sp, #8
   20ce4:	stmdb	r3, {r1, r2}
   20ce8:	ldrb	r5, [sp, #4]
   20cec:	ldr	r3, [r0, #4]
   20cf0:	ldr	r2, [r0, #8]
   20cf4:	cmp	r2, r3
   20cf8:	bcs	20dcc <__assert_fail@plt+0xf228>
   20cfc:	ldr	r2, [r4, #8]
   20d00:	ldr	r3, [r4]
   20d04:	add	r3, r3, r2, lsl #3
   20d08:	add	r2, sp, #8
   20d0c:	ldmdb	r2, {r0, r1}
   20d10:	stm	r3, {r0, r1}
   20d14:	ldr	r3, [r4, #8]
   20d18:	ldr	r2, [r4]
   20d1c:	add	r2, r2, r3, lsl #3
   20d20:	ldr	r3, [r2, #4]
   20d24:	bic	r3, r3, #261120	; 0x3fc00
   20d28:	bic	r3, r3, #768	; 0x300
   20d2c:	str	r3, [r2, #4]
   20d30:	ldr	r3, [r4, #8]
   20d34:	ldr	r2, [r4]
   20d38:	add	r2, r2, r3, lsl #3
   20d3c:	cmp	r5, #5
   20d40:	beq	20e98 <__assert_fail@plt+0xf2f4>
   20d44:	cmp	r5, #6
   20d48:	movne	r5, #0
   20d4c:	moveq	r5, #1
   20d50:	ldrb	r3, [r2, #6]
   20d54:	and	r5, r5, #1
   20d58:	bic	r3, r3, #16
   20d5c:	orr	r5, r3, r5, lsl #4
   20d60:	strb	r5, [r2, #6]
   20d64:	ldr	r2, [r4, #8]
   20d68:	ldr	r3, [r4, #12]
   20d6c:	mvn	r1, #0
   20d70:	str	r1, [r3, r2, lsl #2]
   20d74:	ldr	r3, [r4, #8]
   20d78:	add	r3, r3, r3, lsl #1
   20d7c:	lsl	r3, r3, #2
   20d80:	ldr	r0, [r4, #20]
   20d84:	add	r1, r0, r3
   20d88:	mov	r2, #0
   20d8c:	str	r2, [r0, r3]
   20d90:	str	r2, [r1, #4]
   20d94:	str	r2, [r1, #8]
   20d98:	ldr	r3, [r4, #8]
   20d9c:	add	r3, r3, r3, lsl #1
   20da0:	lsl	r3, r3, #2
   20da4:	ldr	r0, [r4, #24]
   20da8:	add	r1, r0, r3
   20dac:	str	r2, [r0, r3]
   20db0:	str	r2, [r1, #4]
   20db4:	str	r2, [r1, #8]
   20db8:	ldr	r0, [r4, #8]
   20dbc:	add	r3, r0, #1
   20dc0:	str	r3, [r4, #8]
   20dc4:	add	sp, sp, #8
   20dc8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   20dcc:	lsl	r6, r3, #1
   20dd0:	ldr	r3, [pc, #228]	; 20ebc <__assert_fail@plt+0xf318>
   20dd4:	cmp	r6, r3
   20dd8:	bhi	20eac <__assert_fail@plt+0xf308>
   20ddc:	lsl	r1, r6, #3
   20de0:	ldr	r0, [r0]
   20de4:	bl	2d434 <__assert_fail@plt+0x1b890>
   20de8:	cmp	r0, #0
   20dec:	beq	20eb4 <__assert_fail@plt+0xf310>
   20df0:	str	r0, [r4]
   20df4:	lsl	r7, r6, #2
   20df8:	mov	r1, r7
   20dfc:	ldr	r0, [r4, #12]
   20e00:	bl	2d434 <__assert_fail@plt+0x1b890>
   20e04:	mov	r9, r0
   20e08:	mov	r1, r7
   20e0c:	ldr	r0, [r4, #16]
   20e10:	bl	2d434 <__assert_fail@plt+0x1b890>
   20e14:	mov	r8, r0
   20e18:	add	r7, r6, r6, lsl #1
   20e1c:	lsl	r7, r7, #2
   20e20:	mov	r1, r7
   20e24:	ldr	r0, [r4, #20]
   20e28:	bl	2d434 <__assert_fail@plt+0x1b890>
   20e2c:	mov	sl, r0
   20e30:	mov	r1, r7
   20e34:	ldr	r0, [r4, #24]
   20e38:	bl	2d434 <__assert_fail@plt+0x1b890>
   20e3c:	mov	r7, r0
   20e40:	cmp	r8, #0
   20e44:	cmpne	r9, #0
   20e48:	beq	20e70 <__assert_fail@plt+0xf2cc>
   20e4c:	cmp	r0, #0
   20e50:	cmpne	sl, #0
   20e54:	beq	20e70 <__assert_fail@plt+0xf2cc>
   20e58:	str	r9, [r4, #12]
   20e5c:	str	r8, [r4, #16]
   20e60:	str	sl, [r4, #20]
   20e64:	str	r0, [r4, #24]
   20e68:	str	r6, [r4, #4]
   20e6c:	b	20cfc <__assert_fail@plt+0xf158>
   20e70:	mov	r0, r9
   20e74:	bl	17204 <__assert_fail@plt+0x5660>
   20e78:	mov	r0, r8
   20e7c:	bl	17204 <__assert_fail@plt+0x5660>
   20e80:	mov	r0, sl
   20e84:	bl	17204 <__assert_fail@plt+0x5660>
   20e88:	mov	r0, r7
   20e8c:	bl	17204 <__assert_fail@plt+0x5660>
   20e90:	mvn	r0, #0
   20e94:	b	20dc4 <__assert_fail@plt+0xf220>
   20e98:	ldr	r3, [r4, #92]	; 0x5c
   20e9c:	cmp	r3, #1
   20ea0:	movgt	r5, #1
   20ea4:	bgt	20d50 <__assert_fail@plt+0xf1ac>
   20ea8:	b	20d44 <__assert_fail@plt+0xf1a0>
   20eac:	mvn	r0, #0
   20eb0:	b	20dc4 <__assert_fail@plt+0xf220>
   20eb4:	mvn	r0, #0
   20eb8:	b	20dc4 <__assert_fail@plt+0xf220>
   20ebc:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   20ec0:	ldrb	r3, [r1, #24]
   20ec4:	cmp	r3, #16
   20ec8:	beq	20f08 <__assert_fail@plt+0xf364>
   20ecc:	push	{r4, r5, r6, lr}
   20ed0:	mov	r4, r1
   20ed4:	mov	r5, r0
   20ed8:	str	r1, [r4, #12]
   20edc:	add	r3, r1, #20
   20ee0:	ldm	r3, {r1, r2}
   20ee4:	bl	20cd4 <__assert_fail@plt+0xf130>
   20ee8:	str	r0, [r4, #28]
   20eec:	cmn	r0, #1
   20ef0:	beq	20f50 <__assert_fail@plt+0xf3ac>
   20ef4:	ldrb	r3, [r4, #24]
   20ef8:	cmp	r3, #12
   20efc:	beq	20f24 <__assert_fail@plt+0xf380>
   20f00:	mov	r0, #0
   20f04:	pop	{r4, r5, r6, pc}
   20f08:	ldr	r3, [r1, #4]
   20f0c:	ldr	r2, [r3, #12]
   20f10:	str	r2, [r1, #12]
   20f14:	ldr	r3, [r3, #28]
   20f18:	str	r3, [r1, #28]
   20f1c:	mov	r0, #0
   20f20:	bx	lr
   20f24:	ldr	r3, [r5]
   20f28:	ldr	r2, [r4, #20]
   20f2c:	add	r0, r3, r0, lsl #3
   20f30:	ldr	r3, [r0, #4]
   20f34:	ldr	r1, [pc, #28]	; 20f58 <__assert_fail@plt+0xf3b4>
   20f38:	and	r2, r2, r1
   20f3c:	bic	r3, r3, r1, lsl #8
   20f40:	orr	r3, r3, r2, lsl #8
   20f44:	str	r3, [r0, #4]
   20f48:	mov	r0, #0
   20f4c:	pop	{r4, r5, r6, pc}
   20f50:	mov	r0, #12
   20f54:	pop	{r4, r5, r6, pc}
   20f58:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   20f5c:	push	{r4, r5, r6, r7, r8, lr}
   20f60:	mov	r4, r0
   20f64:	mov	r5, r1
   20f68:	mov	r7, r2
   20f6c:	lsl	r6, r1, #3
   20f70:	ldr	r3, [r0]
   20f74:	add	r3, r3, r6
   20f78:	ldm	r3, {r1, r2}
   20f7c:	bl	20cd4 <__assert_fail@plt+0xf130>
   20f80:	cmn	r0, #1
   20f84:	popeq	{r4, r5, r6, r7, r8, pc}
   20f88:	lsl	r1, r0, #3
   20f8c:	ldr	r2, [r4]
   20f90:	add	r2, r2, r1
   20f94:	ldr	r3, [r2, #4]
   20f98:	ldr	ip, [pc, #96]	; 21000 <__assert_fail@plt+0xf45c>
   20f9c:	and	r7, r7, ip
   20fa0:	lsl	ip, ip, #8
   20fa4:	bic	r3, r3, ip
   20fa8:	orr	r3, r3, r7, lsl #8
   20fac:	str	r3, [r2, #4]
   20fb0:	ldr	r3, [r4]
   20fb4:	add	lr, r3, r1
   20fb8:	add	r6, r3, r6
   20fbc:	ldr	r2, [r6, #4]
   20fc0:	lsl	r6, r2, #14
   20fc4:	ldr	r3, [lr, #4]
   20fc8:	lsl	r2, r3, #14
   20fcc:	lsr	r2, r2, #22
   20fd0:	orr	r2, r2, r6, lsr #22
   20fd4:	bic	r3, r3, ip
   20fd8:	orr	r3, r3, r2, lsl #8
   20fdc:	str	r3, [lr, #4]
   20fe0:	ldr	r3, [r4]
   20fe4:	add	r1, r3, r1
   20fe8:	ldrb	r3, [r1, #6]
   20fec:	orr	r3, r3, #4
   20ff0:	strb	r3, [r1, #6]
   20ff4:	ldr	r3, [r4, #16]
   20ff8:	str	r5, [r3, r0, lsl #2]
   20ffc:	pop	{r4, r5, r6, r7, r8, pc}
   21000:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   21004:	push	{r4, lr}
   21008:	mov	r4, r0
   2100c:	ldr	r0, [r0, #24]
   21010:	bl	17204 <__assert_fail@plt+0x5660>
   21014:	ldr	r0, [r4, #36]	; 0x24
   21018:	bl	17204 <__assert_fail@plt+0x5660>
   2101c:	ldr	r3, [r4, #40]	; 0x28
   21020:	add	r2, r4, #4
   21024:	cmp	r3, r2
   21028:	beq	2103c <__assert_fail@plt+0xf498>
   2102c:	ldr	r0, [r3, #8]
   21030:	bl	17204 <__assert_fail@plt+0x5660>
   21034:	ldr	r0, [r4, #40]	; 0x28
   21038:	bl	17204 <__assert_fail@plt+0x5660>
   2103c:	ldr	r0, [r4, #12]
   21040:	bl	17204 <__assert_fail@plt+0x5660>
   21044:	ldr	r0, [r4, #48]	; 0x30
   21048:	bl	17204 <__assert_fail@plt+0x5660>
   2104c:	ldr	r0, [r4, #44]	; 0x2c
   21050:	bl	17204 <__assert_fail@plt+0x5660>
   21054:	mov	r0, r4
   21058:	bl	17204 <__assert_fail@plt+0x5660>
   2105c:	pop	{r4, pc}
   21060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21064:	sub	sp, sp, #20
   21068:	mov	ip, #0
   2106c:	str	ip, [r0]
   21070:	ldr	r5, [r2, #4]
   21074:	cmp	r5, ip
   21078:	beq	21344 <__assert_fail@plt+0xf7a0>
   2107c:	add	r8, r3, r5
   21080:	ble	2109c <__assert_fail@plt+0xf4f8>
   21084:	ldr	ip, [r2, #8]
   21088:	add	r5, ip, r5, lsl #2
   2108c:	ldr	lr, [ip], #4
   21090:	add	r8, r8, lr
   21094:	cmp	r5, ip
   21098:	bne	2108c <__assert_fail@plt+0xf4e8>
   2109c:	mov	r4, r3
   210a0:	mov	r7, r2
   210a4:	mov	r9, r1
   210a8:	str	r0, [sp, #12]
   210ac:	ldr	r3, [r1, #68]	; 0x44
   210b0:	and	r3, r3, r8
   210b4:	add	r3, r3, r3, lsl #1
   210b8:	lsl	r3, r3, #2
   210bc:	ldr	r2, [r1, #32]
   210c0:	add	r1, r2, r3
   210c4:	ldr	fp, [r2, r3]
   210c8:	cmp	fp, #0
   210cc:	ble	21124 <__assert_fail@plt+0xf580>
   210d0:	ldr	sl, [r1, #8]
   210d4:	sub	sl, sl, #4
   210d8:	mov	r5, #0
   210dc:	b	210ec <__assert_fail@plt+0xf548>
   210e0:	add	r5, r5, #1
   210e4:	cmp	r5, fp
   210e8:	beq	21124 <__assert_fail@plt+0xf580>
   210ec:	ldr	r6, [sl, #4]!
   210f0:	ldr	r3, [r6]
   210f4:	cmp	r3, r8
   210f8:	bne	210e0 <__assert_fail@plt+0xf53c>
   210fc:	ldrb	r3, [r6, #52]	; 0x34
   21100:	and	r3, r3, #15
   21104:	cmp	r4, r3
   21108:	bne	210e0 <__assert_fail@plt+0xf53c>
   2110c:	mov	r1, r7
   21110:	ldr	r0, [r6, #40]	; 0x28
   21114:	bl	1e3f8 <__assert_fail@plt+0xc854>
   21118:	cmp	r0, #0
   2111c:	beq	210e0 <__assert_fail@plt+0xf53c>
   21120:	b	2132c <__assert_fail@plt+0xf788>
   21124:	mov	r1, #1
   21128:	mov	r0, #56	; 0x38
   2112c:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   21130:	subs	r6, r0, #0
   21134:	beq	211a4 <__assert_fail@plt+0xf600>
   21138:	add	fp, r6, #4
   2113c:	mov	r1, r7
   21140:	mov	r0, fp
   21144:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   21148:	cmp	r0, #0
   2114c:	bne	2119c <__assert_fail@plt+0xf5f8>
   21150:	ldrb	r2, [r6, #52]	; 0x34
   21154:	and	r3, r4, #15
   21158:	bic	r2, r2, #15
   2115c:	orr	r3, r3, r2
   21160:	strb	r3, [r6, #52]	; 0x34
   21164:	str	fp, [r6, #40]	; 0x28
   21168:	ldr	r3, [r7, #4]
   2116c:	cmp	r3, #0
   21170:	ble	21314 <__assert_fail@plt+0xf770>
   21174:	mov	sl, #0
   21178:	mov	r5, sl
   2117c:	and	r3, r4, #4
   21180:	str	r3, [sp, #4]
   21184:	and	r3, r4, #2
   21188:	str	r3, [sp]
   2118c:	and	r3, r4, #1
   21190:	str	r8, [sp, #8]
   21194:	mov	r8, r3
   21198:	b	21260 <__assert_fail@plt+0xf6bc>
   2119c:	mov	r0, r6
   211a0:	bl	17204 <__assert_fail@plt+0x5660>
   211a4:	mov	r3, #12
   211a8:	ldr	r2, [sp, #12]
   211ac:	str	r3, [r2]
   211b0:	mov	r6, #0
   211b4:	b	2132c <__assert_fail@plt+0xf788>
   211b8:	mov	r0, #12
   211bc:	bl	2d404 <__assert_fail@plt+0x1b860>
   211c0:	cmp	r0, #0
   211c4:	beq	211f0 <__assert_fail@plt+0xf64c>
   211c8:	str	r0, [r6, #40]	; 0x28
   211cc:	mov	r1, r7
   211d0:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   211d4:	cmp	r0, #0
   211d8:	bne	211fc <__assert_fail@plt+0xf658>
   211dc:	ldrb	r3, [r6, #52]	; 0x34
   211e0:	orr	r3, r3, #128	; 0x80
   211e4:	strb	r3, [r6, #52]	; 0x34
   211e8:	mov	sl, #0
   211ec:	b	212f4 <__assert_fail@plt+0xf750>
   211f0:	mov	r0, r6
   211f4:	bl	21004 <__assert_fail@plt+0xf460>
   211f8:	b	211a4 <__assert_fail@plt+0xf600>
   211fc:	mov	r0, r6
   21200:	bl	21004 <__assert_fail@plt+0xf460>
   21204:	b	211a4 <__assert_fail@plt+0xf600>
   21208:	tst	r4, #2
   2120c:	beq	21218 <__assert_fail@plt+0xf674>
   21210:	cmp	r8, #0
   21214:	bne	21240 <__assert_fail@plt+0xf69c>
   21218:	tst	r4, #16
   2121c:	beq	2122c <__assert_fail@plt+0xf688>
   21220:	ldr	r3, [sp]
   21224:	cmp	r3, #0
   21228:	beq	21240 <__assert_fail@plt+0xf69c>
   2122c:	tst	r4, #64	; 0x40
   21230:	beq	21250 <__assert_fail@plt+0xf6ac>
   21234:	ldr	r3, [sp, #4]
   21238:	cmp	r3, #0
   2123c:	bne	21250 <__assert_fail@plt+0xf6ac>
   21240:	sub	r1, r5, sl
   21244:	mov	r0, fp
   21248:	bl	1e504 <__assert_fail@plt+0xc960>
   2124c:	add	sl, sl, #1
   21250:	add	r5, r5, #1
   21254:	ldr	r3, [r7, #4]
   21258:	cmp	r5, r3
   2125c:	bge	21310 <__assert_fail@plt+0xf76c>
   21260:	ldr	r3, [r7, #8]
   21264:	ldr	r2, [r3, r5, lsl #2]
   21268:	ldr	r3, [r9]
   2126c:	add	r3, r3, r2, lsl #3
   21270:	ldrb	r2, [r3, #4]
   21274:	ldr	r4, [r3, #4]
   21278:	lsl	r4, r4, #14
   2127c:	lsrs	r4, r4, #22
   21280:	moveq	r1, #1
   21284:	movne	r1, #0
   21288:	cmp	r2, #1
   2128c:	movne	r1, #0
   21290:	andeq	r1, r1, #1
   21294:	cmp	r1, #0
   21298:	bne	21250 <__assert_fail@plt+0xf6ac>
   2129c:	ldrb	r1, [r6, #52]	; 0x34
   212a0:	ldrb	r3, [r3, #6]
   212a4:	lsr	r3, r3, #4
   212a8:	orr	r3, r3, r1, lsr #5
   212ac:	and	r3, r3, #1
   212b0:	bic	r1, r1, #32
   212b4:	orr	r3, r1, r3, lsl #5
   212b8:	strb	r3, [r6, #52]	; 0x34
   212bc:	cmp	r2, #2
   212c0:	uxtbeq	r3, r3
   212c4:	orreq	r3, r3, #16
   212c8:	strbeq	r3, [r6, #52]	; 0x34
   212cc:	beq	212e0 <__assert_fail@plt+0xf73c>
   212d0:	cmp	r2, #4
   212d4:	ldrbeq	r3, [r6, #52]	; 0x34
   212d8:	orreq	r3, r3, #64	; 0x40
   212dc:	strbeq	r3, [r6, #52]	; 0x34
   212e0:	cmp	r4, #0
   212e4:	beq	21250 <__assert_fail@plt+0xf6ac>
   212e8:	ldr	r3, [r6, #40]	; 0x28
   212ec:	cmp	fp, r3
   212f0:	beq	211b8 <__assert_fail@plt+0xf614>
   212f4:	tst	r4, #1
   212f8:	beq	21208 <__assert_fail@plt+0xf664>
   212fc:	cmp	r8, #0
   21300:	beq	21240 <__assert_fail@plt+0xf69c>
   21304:	tst	r4, #2
   21308:	bne	21240 <__assert_fail@plt+0xf69c>
   2130c:	b	21218 <__assert_fail@plt+0xf674>
   21310:	ldr	r8, [sp, #8]
   21314:	mov	r2, r8
   21318:	mov	r1, r6
   2131c:	mov	r0, r9
   21320:	bl	1f44c <__assert_fail@plt+0xd8a8>
   21324:	cmp	r0, #0
   21328:	bne	21338 <__assert_fail@plt+0xf794>
   2132c:	mov	r0, r6
   21330:	add	sp, sp, #20
   21334:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21338:	mov	r0, r6
   2133c:	bl	21004 <__assert_fail@plt+0xf460>
   21340:	b	211a4 <__assert_fail@plt+0xf600>
   21344:	mov	r6, #0
   21348:	b	2132c <__assert_fail@plt+0xf788>
   2134c:	push	{r4, r5, r6, lr}
   21350:	ldr	r5, [r0]
   21354:	ldr	r0, [r5, #56]	; 0x38
   21358:	cmp	r0, #0
   2135c:	beq	21374 <__assert_fail@plt+0xf7d0>
   21360:	ldr	r4, [r0]
   21364:	bl	17204 <__assert_fail@plt+0x5660>
   21368:	mov	r0, r4
   2136c:	cmp	r4, #0
   21370:	bne	21360 <__assert_fail@plt+0xf7bc>
   21374:	mov	r4, #0
   21378:	str	r4, [r5, #56]	; 0x38
   2137c:	mov	r3, #31
   21380:	str	r3, [r5, #64]	; 0x40
   21384:	str	r4, [r5, #52]	; 0x34
   21388:	ldr	r0, [r5, #16]
   2138c:	bl	17204 <__assert_fail@plt+0x5660>
   21390:	str	r4, [r5, #16]
   21394:	pop	{r4, r5, r6, pc}
   21398:	push	{r4, lr}
   2139c:	mov	r4, r0
   213a0:	ldr	r0, [r0, #8]
   213a4:	bl	17204 <__assert_fail@plt+0x5660>
   213a8:	ldr	r0, [r4, #12]
   213ac:	bl	17204 <__assert_fail@plt+0x5660>
   213b0:	ldrb	r3, [r4, #75]	; 0x4b
   213b4:	cmp	r3, #0
   213b8:	popeq	{r4, pc}
   213bc:	ldr	r0, [r4, #4]
   213c0:	bl	17204 <__assert_fail@plt+0x5660>
   213c4:	pop	{r4, pc}
   213c8:	push	{r4, r5, r6, r7, r8, lr}
   213cc:	mov	r6, r0
   213d0:	ldr	r3, [r0]
   213d4:	cmp	r3, #0
   213d8:	beq	21408 <__assert_fail@plt+0xf864>
   213dc:	ldr	r3, [r0, #8]
   213e0:	cmp	r3, #0
   213e4:	beq	21408 <__assert_fail@plt+0xf864>
   213e8:	mov	r4, #0
   213ec:	ldr	r0, [r6]
   213f0:	add	r0, r0, r4, lsl #3
   213f4:	bl	20c84 <__assert_fail@plt+0xf0e0>
   213f8:	add	r4, r4, #1
   213fc:	ldr	r3, [r6, #8]
   21400:	cmp	r3, r4
   21404:	bhi	213ec <__assert_fail@plt+0xf848>
   21408:	ldr	r0, [r6, #12]
   2140c:	bl	17204 <__assert_fail@plt+0x5660>
   21410:	ldr	r3, [r6, #8]
   21414:	cmp	r3, #0
   21418:	beq	21488 <__assert_fail@plt+0xf8e4>
   2141c:	mov	r4, #0
   21420:	mov	r5, r4
   21424:	b	2143c <__assert_fail@plt+0xf898>
   21428:	add	r5, r5, #1
   2142c:	add	r4, r4, #12
   21430:	ldr	r3, [r6, #8]
   21434:	cmp	r3, r5
   21438:	bls	21488 <__assert_fail@plt+0xf8e4>
   2143c:	ldr	r3, [r6, #24]
   21440:	cmp	r3, #0
   21444:	beq	21454 <__assert_fail@plt+0xf8b0>
   21448:	add	r3, r3, r4
   2144c:	ldr	r0, [r3, #8]
   21450:	bl	17204 <__assert_fail@plt+0x5660>
   21454:	ldr	r3, [r6, #28]
   21458:	cmp	r3, #0
   2145c:	beq	2146c <__assert_fail@plt+0xf8c8>
   21460:	add	r3, r3, r4
   21464:	ldr	r0, [r3, #8]
   21468:	bl	17204 <__assert_fail@plt+0x5660>
   2146c:	ldr	r3, [r6, #20]
   21470:	cmp	r3, #0
   21474:	beq	21428 <__assert_fail@plt+0xf884>
   21478:	add	r3, r3, r4
   2147c:	ldr	r0, [r3, #8]
   21480:	bl	17204 <__assert_fail@plt+0x5660>
   21484:	b	21428 <__assert_fail@plt+0xf884>
   21488:	ldr	r0, [r6, #20]
   2148c:	bl	17204 <__assert_fail@plt+0x5660>
   21490:	ldr	r0, [r6, #24]
   21494:	bl	17204 <__assert_fail@plt+0x5660>
   21498:	ldr	r0, [r6, #28]
   2149c:	bl	17204 <__assert_fail@plt+0x5660>
   214a0:	ldr	r0, [r6]
   214a4:	bl	17204 <__assert_fail@plt+0x5660>
   214a8:	ldr	r3, [r6, #32]
   214ac:	cmp	r3, #0
   214b0:	beq	2150c <__assert_fail@plt+0xf968>
   214b4:	mov	r7, #0
   214b8:	mov	r8, r7
   214bc:	ldr	r3, [r6, #32]
   214c0:	add	r5, r3, r7
   214c4:	ldr	r3, [r3, r7]
   214c8:	cmp	r3, #0
   214cc:	ble	214f0 <__assert_fail@plt+0xf94c>
   214d0:	mov	r4, #0
   214d4:	ldr	r3, [r5, #8]
   214d8:	ldr	r0, [r3, r4, lsl #2]
   214dc:	bl	21004 <__assert_fail@plt+0xf460>
   214e0:	add	r4, r4, #1
   214e4:	ldr	r3, [r5]
   214e8:	cmp	r3, r4
   214ec:	bgt	214d4 <__assert_fail@plt+0xf930>
   214f0:	ldr	r0, [r5, #8]
   214f4:	bl	17204 <__assert_fail@plt+0x5660>
   214f8:	add	r8, r8, #1
   214fc:	add	r7, r7, #12
   21500:	ldr	r3, [r6, #68]	; 0x44
   21504:	cmp	r3, r8
   21508:	bcs	214bc <__assert_fail@plt+0xf918>
   2150c:	ldr	r0, [r6, #32]
   21510:	bl	17204 <__assert_fail@plt+0x5660>
   21514:	ldr	r0, [r6, #60]	; 0x3c
   21518:	ldr	r3, [pc, #28]	; 2153c <__assert_fail@plt+0xf998>
   2151c:	cmp	r0, r3
   21520:	beq	21528 <__assert_fail@plt+0xf984>
   21524:	bl	17204 <__assert_fail@plt+0x5660>
   21528:	ldr	r0, [r6, #132]	; 0x84
   2152c:	bl	17204 <__assert_fail@plt+0x5660>
   21530:	mov	r0, r6
   21534:	bl	17204 <__assert_fail@plt+0x5660>
   21538:	pop	{r4, r5, r6, r7, r8, pc}
   2153c:	andeq	r0, r3, r8, ror sl
   21540:	push	{r4, r5, r6, r7, r8, lr}
   21544:	mov	r8, r0
   21548:	ldr	r3, [r0, #124]	; 0x7c
   2154c:	cmp	r3, #0
   21550:	ble	215dc <__assert_fail@plt+0xfa38>
   21554:	mov	r7, #0
   21558:	b	21574 <__assert_fail@plt+0xf9d0>
   2155c:	mov	r0, r6
   21560:	bl	17204 <__assert_fail@plt+0x5660>
   21564:	add	r7, r7, #1
   21568:	ldr	r3, [r8, #124]	; 0x7c
   2156c:	cmp	r3, r7
   21570:	ble	215dc <__assert_fail@plt+0xfa38>
   21574:	ldr	r3, [r8, #132]	; 0x84
   21578:	ldr	r6, [r3, r7, lsl #2]
   2157c:	ldr	r3, [r6, #16]
   21580:	cmp	r3, #0
   21584:	ble	215b4 <__assert_fail@plt+0xfa10>
   21588:	mov	r4, #0
   2158c:	ldr	r3, [r6, #20]
   21590:	ldr	r5, [r3, r4, lsl #2]
   21594:	ldr	r0, [r5, #16]
   21598:	bl	17204 <__assert_fail@plt+0x5660>
   2159c:	mov	r0, r5
   215a0:	bl	17204 <__assert_fail@plt+0x5660>
   215a4:	add	r4, r4, #1
   215a8:	ldr	r3, [r6, #16]
   215ac:	cmp	r3, r4
   215b0:	bgt	2158c <__assert_fail@plt+0xf9e8>
   215b4:	ldr	r0, [r6, #20]
   215b8:	bl	17204 <__assert_fail@plt+0x5660>
   215bc:	ldr	r3, [r6, #8]
   215c0:	cmp	r3, #0
   215c4:	beq	2155c <__assert_fail@plt+0xf9b8>
   215c8:	ldr	r0, [r3, #8]
   215cc:	bl	17204 <__assert_fail@plt+0x5660>
   215d0:	ldr	r0, [r6, #8]
   215d4:	bl	17204 <__assert_fail@plt+0x5660>
   215d8:	b	2155c <__assert_fail@plt+0xf9b8>
   215dc:	mov	r3, #0
   215e0:	str	r3, [r8, #124]	; 0x7c
   215e4:	str	r3, [r8, #108]	; 0x6c
   215e8:	pop	{r4, r5, r6, r7, r8, pc}
   215ec:	push	{r4, r5, r6, lr}
   215f0:	mov	r4, r0
   215f4:	ldr	r0, [r0, #8]
   215f8:	add	r5, r4, #12
   215fc:	cmp	r0, r5
   21600:	beq	21608 <__assert_fail@plt+0xfa64>
   21604:	bl	17204 <__assert_fail@plt+0x5660>
   21608:	mov	r3, #0
   2160c:	str	r3, [r4]
   21610:	mov	r3, #16
   21614:	str	r3, [r4, #4]
   21618:	str	r5, [r4, #8]
   2161c:	pop	{r4, r5, r6, pc}
   21620:	push	{r4, r5, r6, lr}
   21624:	subs	r5, r0, #0
   21628:	beq	2167c <__assert_fail@plt+0xfad8>
   2162c:	ldr	r3, [r5]
   21630:	cmp	r3, #0
   21634:	ble	21674 <__assert_fail@plt+0xfad0>
   21638:	mov	r4, #0
   2163c:	mov	r6, r4
   21640:	ldr	r3, [r5, #8]
   21644:	add	r3, r3, r4
   21648:	ldr	r0, [r3, #20]
   2164c:	bl	17204 <__assert_fail@plt+0x5660>
   21650:	ldr	r3, [r5, #8]
   21654:	add	r3, r3, r4
   21658:	ldr	r0, [r3, #8]
   2165c:	bl	17204 <__assert_fail@plt+0x5660>
   21660:	add	r6, r6, #1
   21664:	add	r4, r4, #24
   21668:	ldr	r3, [r5]
   2166c:	cmp	r3, r6
   21670:	bgt	21640 <__assert_fail@plt+0xfa9c>
   21674:	ldr	r0, [r5, #8]
   21678:	bl	17204 <__assert_fail@plt+0x5660>
   2167c:	mov	r0, #0
   21680:	pop	{r4, r5, r6, pc}
   21684:	push	{r4, r5, r6, lr}
   21688:	ldr	r2, [r1, #28]
   2168c:	ldrb	r3, [r1, #24]
   21690:	sub	r3, r3, #2
   21694:	cmp	r3, #14
   21698:	ldrls	pc, [pc, r3, lsl #2]
   2169c:	b	217d8 <__assert_fail@plt+0xfc34>
   216a0:	strdeq	r1, [r2], -r0
   216a4:	ldrdeq	r1, [r2], -r8
   216a8:	muleq	r2, r8, r7
   216ac:	ldrdeq	r1, [r2], -r8
   216b0:	ldrdeq	r1, [r2], -r8
   216b4:	ldrdeq	r1, [r2], -r8
   216b8:	andeq	r1, r2, ip, ror r7
   216bc:	andeq	r1, r2, ip, ror r7
   216c0:	ldrdeq	r1, [r2], -ip
   216c4:	ldrdeq	r1, [r2], -ip
   216c8:	andeq	r1, r2, ip, ror r7
   216cc:	ldrdeq	r1, [r2], -r8
   216d0:	ldrdeq	r1, [r2], -r8
   216d4:	ldrdeq	r1, [r2], -r8
   216d8:	strdeq	r1, [r2], -r0
   216dc:	ldrb	r3, [r0, #88]	; 0x58
   216e0:	orr	r3, r3, #1
   216e4:	strb	r3, [r0, #88]	; 0x58
   216e8:	ldr	r3, [r1, #4]
   216ec:	cmp	r3, #0
   216f0:	ldrne	r3, [r3, #12]
   216f4:	ldreq	r3, [r1, #16]
   216f8:	ldr	r4, [r3, #28]
   216fc:	ldr	r3, [r1, #8]
   21700:	cmp	r3, #0
   21704:	ldrne	r3, [r3, #12]
   21708:	ldreq	r3, [r1, #16]
   2170c:	ldr	r5, [r3, #28]
   21710:	add	r2, r2, r2, lsl #1
   21714:	lsl	r2, r2, #2
   21718:	ldr	r3, [r0, #20]
   2171c:	add	r6, r3, r2
   21720:	mov	r1, #2
   21724:	str	r1, [r3, r2]
   21728:	mov	r0, #8
   2172c:	bl	2d404 <__assert_fail@plt+0x1b860>
   21730:	str	r0, [r6, #8]
   21734:	cmp	r0, #0
   21738:	beq	217f8 <__assert_fail@plt+0xfc54>
   2173c:	cmp	r4, r5
   21740:	beq	21768 <__assert_fail@plt+0xfbc4>
   21744:	mov	r3, #2
   21748:	str	r3, [r6, #4]
   2174c:	cmp	r4, r5
   21750:	strlt	r4, [r0]
   21754:	strlt	r5, [r0, #4]
   21758:	strge	r5, [r0]
   2175c:	strge	r4, [r0, #4]
   21760:	mov	r0, #0
   21764:	pop	{r4, r5, r6, pc}
   21768:	mov	r3, #1
   2176c:	str	r3, [r6, #4]
   21770:	str	r4, [r0]
   21774:	mov	r0, #0
   21778:	pop	{r4, r5, r6, pc}
   2177c:	ldr	r1, [r1, #16]
   21780:	add	r2, r2, r2, lsl #1
   21784:	ldr	r0, [r0, #20]
   21788:	ldr	r1, [r1, #28]
   2178c:	add	r0, r0, r2, lsl #2
   21790:	bl	1f3d8 <__assert_fail@plt+0xd834>
   21794:	pop	{r4, r5, r6, pc}
   21798:	ldr	r3, [r1, #16]
   2179c:	ldr	ip, [r3, #28]
   217a0:	ldr	r3, [r0, #12]
   217a4:	str	ip, [r3, r2, lsl #2]
   217a8:	ldrb	r3, [r1, #24]
   217ac:	cmp	r3, #4
   217b0:	beq	217bc <__assert_fail@plt+0xfc18>
   217b4:	mov	r0, #0
   217b8:	pop	{r4, r5, r6, pc}
   217bc:	ldr	r1, [r0, #12]
   217c0:	add	ip, r2, r2, lsl #1
   217c4:	ldr	r0, [r0, #20]
   217c8:	ldr	r1, [r1, r2, lsl #2]
   217cc:	add	r0, r0, ip, lsl #2
   217d0:	bl	1f3d8 <__assert_fail@plt+0xd834>
   217d4:	pop	{r4, r5, r6, pc}
   217d8:	ldr	r3, [r1, #16]
   217dc:	ldr	r1, [r3, #28]
   217e0:	ldr	r3, [r0, #12]
   217e4:	str	r1, [r3, r2, lsl #2]
   217e8:	mov	r0, #0
   217ec:	pop	{r4, r5, r6, pc}
   217f0:	mov	r0, #0
   217f4:	pop	{r4, r5, r6, pc}
   217f8:	mov	r0, #12
   217fc:	pop	{r4, r5, r6, pc}
   21800:	push	{r4, r5, r6, lr}
   21804:	mov	r4, r0
   21808:	mov	r5, r1
   2180c:	ldr	r1, [r0]
   21810:	cmp	r1, #0
   21814:	beq	21840 <__assert_fail@plt+0xfc9c>
   21818:	ldr	r3, [r0, #4]
   2181c:	cmp	r3, #0
   21820:	bne	21854 <__assert_fail@plt+0xfcb0>
   21824:	ldr	r3, [r0, #8]
   21828:	str	r5, [r3]
   2182c:	ldr	r3, [r0, #4]
   21830:	add	r3, r3, #1
   21834:	str	r3, [r0, #4]
   21838:	mov	r0, #1
   2183c:	pop	{r4, r5, r6, pc}
   21840:	mov	r1, r5
   21844:	bl	1f3d8 <__assert_fail@plt+0xd834>
   21848:	clz	r0, r0
   2184c:	lsr	r0, r0, #5
   21850:	pop	{r4, r5, r6, pc}
   21854:	cmp	r1, r3
   21858:	beq	218b4 <__assert_fail@plt+0xfd10>
   2185c:	ldr	r1, [r4, #8]
   21860:	ldr	r3, [r1]
   21864:	cmp	r5, r3
   21868:	bge	218d8 <__assert_fail@plt+0xfd34>
   2186c:	ldr	r3, [r4, #4]
   21870:	cmp	r3, #0
   21874:	ble	21898 <__assert_fail@plt+0xfcf4>
   21878:	lsl	r2, r3, #2
   2187c:	ldr	r1, [r4, #8]
   21880:	add	r0, r1, r2
   21884:	ldr	r0, [r0, #-4]
   21888:	str	r0, [r1, r2]
   2188c:	sub	r2, r2, #4
   21890:	subs	r3, r3, #1
   21894:	bne	2187c <__assert_fail@plt+0xfcd8>
   21898:	ldr	r2, [r4, #8]
   2189c:	str	r5, [r2, r3, lsl #2]
   218a0:	ldr	r3, [r4, #4]
   218a4:	add	r3, r3, #1
   218a8:	str	r3, [r4, #4]
   218ac:	mov	r0, #1
   218b0:	pop	{r4, r5, r6, pc}
   218b4:	lsl	r3, r1, #1
   218b8:	str	r3, [r0]
   218bc:	lsl	r1, r1, #3
   218c0:	ldr	r0, [r0, #8]
   218c4:	bl	2d434 <__assert_fail@plt+0x1b890>
   218c8:	cmp	r0, #0
   218cc:	beq	21918 <__assert_fail@plt+0xfd74>
   218d0:	str	r0, [r4, #8]
   218d4:	b	2185c <__assert_fail@plt+0xfcb8>
   218d8:	ldr	r3, [r4, #4]
   218dc:	sub	r0, r3, #-1073741823	; 0xc0000001
   218e0:	lsl	r2, r0, #2
   218e4:	ldr	r0, [r1, r0, lsl #2]
   218e8:	cmp	r5, r0
   218ec:	bge	21898 <__assert_fail@plt+0xfcf4>
   218f0:	add	r2, r2, #4
   218f4:	str	r0, [r1, r2]
   218f8:	sub	r3, r3, #1
   218fc:	ldr	r1, [r4, #8]
   21900:	add	r0, r1, r2
   21904:	ldr	r0, [r0, #-8]
   21908:	sub	r2, r2, #4
   2190c:	cmp	r5, r0
   21910:	blt	218f4 <__assert_fail@plt+0xfd50>
   21914:	b	21898 <__assert_fail@plt+0xfcf4>
   21918:	mov	r0, #0
   2191c:	pop	{r4, r5, r6, pc}
   21920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21924:	sub	sp, sp, #20
   21928:	mov	r4, r0
   2192c:	mov	r5, r1
   21930:	mov	r6, r2
   21934:	mov	r9, r3
   21938:	ldr	r7, [sp, #56]	; 0x38
   2193c:	mov	r8, #0
   21940:	b	21b14 <__assert_fail@plt+0xff70>
   21944:	lsl	fp, r5, #2
   21948:	ldr	r3, [r4, #12]
   2194c:	ldr	r5, [r3, r5, lsl #2]
   21950:	str	r6, [sp, #12]
   21954:	add	r6, r6, r6, lsl #1
   21958:	lsl	sl, r6, #2
   2195c:	ldr	r3, [r4, #20]
   21960:	add	r3, r3, sl
   21964:	str	r8, [r3, #4]
   21968:	mov	r2, r7
   2196c:	mov	r1, r5
   21970:	mov	r0, r4
   21974:	bl	20f5c <__assert_fail@plt+0xf3b8>
   21978:	mov	r6, r0
   2197c:	cmn	r0, #1
   21980:	beq	21c04 <__assert_fail@plt+0x10060>
   21984:	ldr	r3, [r4, #12]
   21988:	ldr	r2, [r3, fp]
   2198c:	ldr	r1, [sp, #12]
   21990:	str	r2, [r3, r1, lsl #2]
   21994:	ldr	r0, [r4, #20]
   21998:	mov	r1, r6
   2199c:	add	r0, r0, sl
   219a0:	bl	21800 <__assert_fail@plt+0xfc5c>
   219a4:	cmp	r0, #0
   219a8:	bne	21b14 <__assert_fail@plt+0xff70>
   219ac:	mov	r0, #12
   219b0:	b	21c30 <__assert_fail@plt+0x1008c>
   219b4:	ldr	r3, [r4, #12]
   219b8:	ldr	r2, [r3, r5, lsl #2]
   219bc:	str	r2, [r3, r6, lsl #2]
   219c0:	mov	r0, #0
   219c4:	b	21c30 <__assert_fail@plt+0x1008c>
   219c8:	ldr	r2, [r2, #8]
   219cc:	ldr	fp, [r2]
   219d0:	add	sl, r6, r6, lsl #1
   219d4:	lsl	sl, sl, #2
   219d8:	add	r3, r3, sl
   219dc:	str	r8, [r3, #4]
   219e0:	cmp	r5, r9
   219e4:	movne	r3, #0
   219e8:	moveq	r3, #1
   219ec:	cmp	r5, r6
   219f0:	moveq	r3, #0
   219f4:	cmp	r3, #0
   219f8:	bne	21a4c <__assert_fail@plt+0xfea8>
   219fc:	ldr	r3, [r4]
   21a00:	add	ip, r3, ip
   21a04:	ldr	r3, [ip, #4]
   21a08:	lsl	r3, r3, #14
   21a0c:	orr	r7, r7, r3, lsr #22
   21a10:	mov	r2, r7
   21a14:	mov	r1, fp
   21a18:	mov	r0, r4
   21a1c:	bl	20f5c <__assert_fail@plt+0xf3b8>
   21a20:	mov	r6, r0
   21a24:	cmn	r0, #1
   21a28:	beq	21c0c <__assert_fail@plt+0x10068>
   21a2c:	ldr	r0, [r4, #20]
   21a30:	mov	r1, r6
   21a34:	add	r0, r0, sl
   21a38:	bl	21800 <__assert_fail@plt+0xfc5c>
   21a3c:	cmp	r0, #0
   21a40:	beq	21a6c <__assert_fail@plt+0xfec8>
   21a44:	mov	r5, fp
   21a48:	b	21b14 <__assert_fail@plt+0xff70>
   21a4c:	ldr	r0, [r4, #20]
   21a50:	mov	r1, fp
   21a54:	add	r0, r0, sl
   21a58:	bl	21800 <__assert_fail@plt+0xfc5c>
   21a5c:	cmp	r0, #0
   21a60:	moveq	r0, #12
   21a64:	movne	r0, #0
   21a68:	b	21c30 <__assert_fail@plt+0x1008c>
   21a6c:	mov	r0, #12
   21a70:	b	21c30 <__assert_fail@plt+0x1008c>
   21a74:	sub	r1, r1, #1
   21a78:	add	r3, r3, ip
   21a7c:	add	r3, lr, r3
   21a80:	ldrb	r6, [r3, #6]
   21a84:	cmp	r1, #0
   21a88:	movle	r0, #0
   21a8c:	movgt	r0, #1
   21a90:	ands	r0, r0, r6, lsr #2
   21a94:	beq	21ba4 <__assert_fail@plt+0x10000>
   21a98:	ldr	r0, [r2, #-4]!
   21a9c:	cmp	r5, r0
   21aa0:	bne	21a74 <__assert_fail@plt+0xfed0>
   21aa4:	ldr	r0, [r3, #4]
   21aa8:	lsl	r0, r0, #14
   21aac:	cmp	r7, r0, lsr #22
   21ab0:	bne	21a74 <__assert_fail@plt+0xfed0>
   21ab4:	cmn	r1, #1
   21ab8:	beq	21ba4 <__assert_fail@plt+0x10000>
   21abc:	ldr	r0, [r4, #20]
   21ac0:	add	r0, r0, fp
   21ac4:	bl	21800 <__assert_fail@plt+0xfc5c>
   21ac8:	cmp	r0, #0
   21acc:	beq	21c24 <__assert_fail@plt+0x10080>
   21ad0:	ldr	r3, [r4, #20]
   21ad4:	add	sl, r3, sl
   21ad8:	ldr	r3, [sl, #8]
   21adc:	ldr	r5, [r3, #4]
   21ae0:	mov	r2, r7
   21ae4:	mov	r1, r5
   21ae8:	mov	r0, r4
   21aec:	bl	20f5c <__assert_fail@plt+0xf3b8>
   21af0:	mov	r6, r0
   21af4:	cmn	r0, #1
   21af8:	beq	21c2c <__assert_fail@plt+0x10088>
   21afc:	ldr	r0, [r4, #20]
   21b00:	mov	r1, r6
   21b04:	add	r0, r0, fp
   21b08:	bl	21800 <__assert_fail@plt+0xfc5c>
   21b0c:	cmp	r0, #0
   21b10:	beq	21bfc <__assert_fail@plt+0x10058>
   21b14:	lsl	ip, r5, #3
   21b18:	ldr	r3, [r4]
   21b1c:	add	r3, r3, ip
   21b20:	ldrb	r3, [r3, #4]
   21b24:	cmp	r3, #4
   21b28:	beq	21944 <__assert_fail@plt+0xfda0>
   21b2c:	ldr	r3, [r4, #20]
   21b30:	add	sl, r5, r5, lsl #1
   21b34:	lsl	sl, sl, #2
   21b38:	add	r2, r3, sl
   21b3c:	ldr	r1, [r2, #4]
   21b40:	cmp	r1, #0
   21b44:	beq	219b4 <__assert_fail@plt+0xfe10>
   21b48:	cmp	r1, #1
   21b4c:	beq	219c8 <__assert_fail@plt+0xfe24>
   21b50:	ldr	r2, [r2, #8]
   21b54:	ldr	r5, [r2]
   21b58:	add	r6, r6, r6, lsl #1
   21b5c:	lsl	fp, r6, #2
   21b60:	add	r3, r3, fp
   21b64:	str	r8, [r3, #4]
   21b68:	ldr	ip, [r4, #8]
   21b6c:	sub	r1, ip, #1
   21b70:	ldr	lr, [r4]
   21b74:	add	r3, lr, r1, lsl #3
   21b78:	ldrb	r0, [r3, #6]
   21b7c:	cmp	r1, #0
   21b80:	movle	r2, #0
   21b84:	movgt	r2, #1
   21b88:	ands	r2, r2, r0, lsr #2
   21b8c:	beq	21ba4 <__assert_fail@plt+0x10000>
   21b90:	ldr	r2, [r4, #16]
   21b94:	add	r2, r2, ip, lsl #2
   21b98:	rsb	ip, r3, ip, lsl #3
   21b9c:	sub	ip, ip, #16
   21ba0:	b	21a98 <__assert_fail@plt+0xfef4>
   21ba4:	mov	r2, r7
   21ba8:	mov	r1, r5
   21bac:	mov	r0, r4
   21bb0:	bl	20f5c <__assert_fail@plt+0xf3b8>
   21bb4:	mov	r6, r0
   21bb8:	cmn	r0, #1
   21bbc:	beq	21c14 <__assert_fail@plt+0x10070>
   21bc0:	ldr	r0, [r4, #20]
   21bc4:	mov	r1, r6
   21bc8:	add	r0, r0, fp
   21bcc:	bl	21800 <__assert_fail@plt+0xfc5c>
   21bd0:	cmp	r0, #0
   21bd4:	beq	21c1c <__assert_fail@plt+0x10078>
   21bd8:	str	r7, [sp]
   21bdc:	mov	r3, r9
   21be0:	mov	r2, r6
   21be4:	mov	r1, r5
   21be8:	mov	r0, r4
   21bec:	bl	21920 <__assert_fail@plt+0xfd7c>
   21bf0:	cmp	r0, #0
   21bf4:	beq	21ad0 <__assert_fail@plt+0xff2c>
   21bf8:	b	21c30 <__assert_fail@plt+0x1008c>
   21bfc:	mov	r0, #12
   21c00:	b	21c30 <__assert_fail@plt+0x1008c>
   21c04:	mov	r0, #12
   21c08:	b	21c30 <__assert_fail@plt+0x1008c>
   21c0c:	mov	r0, #12
   21c10:	b	21c30 <__assert_fail@plt+0x1008c>
   21c14:	mov	r0, #12
   21c18:	b	21c30 <__assert_fail@plt+0x1008c>
   21c1c:	mov	r0, #12
   21c20:	b	21c30 <__assert_fail@plt+0x1008c>
   21c24:	mov	r0, #12
   21c28:	b	21c30 <__assert_fail@plt+0x1008c>
   21c2c:	mov	r0, #12
   21c30:	add	sp, sp, #20
   21c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21c38:	push	{r4, r5, r6, r7, r8, r9, lr}
   21c3c:	sub	sp, sp, #12
   21c40:	mov	r6, r0
   21c44:	mov	r7, r1
   21c48:	mov	r4, r2
   21c4c:	mov	r9, r3
   21c50:	ldr	r8, [sp, #40]	; 0x28
   21c54:	b	21ca0 <__assert_fail@plt+0x100fc>
   21c58:	mov	r1, r4
   21c5c:	mov	r0, r7
   21c60:	bl	21800 <__assert_fail@plt+0xfc5c>
   21c64:	cmp	r0, #0
   21c68:	beq	21d30 <__assert_fail@plt+0x1018c>
   21c6c:	add	r5, r5, r5, lsl #1
   21c70:	lsl	r5, r5, #2
   21c74:	ldr	r3, [r6, #20]
   21c78:	add	r3, r3, r5
   21c7c:	ldr	r2, [r3, #4]
   21c80:	cmp	r2, #0
   21c84:	beq	21d3c <__assert_fail@plt+0x10198>
   21c88:	cmp	r2, #2
   21c8c:	beq	21d00 <__assert_fail@plt+0x1015c>
   21c90:	ldr	r3, [r6, #20]
   21c94:	add	r5, r3, r5
   21c98:	ldr	r3, [r5, #8]
   21c9c:	ldr	r4, [r3]
   21ca0:	mov	r1, r4
   21ca4:	mov	r0, r7
   21ca8:	bl	1e46c <__assert_fail@plt+0xc8c8>
   21cac:	cmp	r0, #0
   21cb0:	bne	21d28 <__assert_fail@plt+0x10184>
   21cb4:	mov	r5, r4
   21cb8:	ldr	r3, [r6]
   21cbc:	add	r2, r3, r4, lsl #3
   21cc0:	ldrb	r2, [r2, #4]
   21cc4:	cmp	r2, r8
   21cc8:	bne	21c58 <__assert_fail@plt+0x100b4>
   21ccc:	ldr	r3, [r3, r4, lsl #3]
   21cd0:	cmp	r9, r3
   21cd4:	bne	21c58 <__assert_fail@plt+0x100b4>
   21cd8:	cmp	r2, #9
   21cdc:	movne	r0, #0
   21ce0:	bne	21d34 <__assert_fail@plt+0x10190>
   21ce4:	mov	r1, r4
   21ce8:	mov	r0, r7
   21cec:	bl	21800 <__assert_fail@plt+0xfc5c>
   21cf0:	cmp	r0, #0
   21cf4:	moveq	r0, #12
   21cf8:	movne	r0, #0
   21cfc:	b	21d34 <__assert_fail@plt+0x10190>
   21d00:	ldr	r3, [r3, #8]
   21d04:	ldr	r2, [r3, #4]
   21d08:	str	r8, [sp]
   21d0c:	mov	r3, r9
   21d10:	mov	r1, r7
   21d14:	mov	r0, r6
   21d18:	bl	21c38 <__assert_fail@plt+0x10094>
   21d1c:	cmp	r0, #0
   21d20:	beq	21c90 <__assert_fail@plt+0x100ec>
   21d24:	b	21d34 <__assert_fail@plt+0x10190>
   21d28:	mov	r0, #0
   21d2c:	b	21d34 <__assert_fail@plt+0x10190>
   21d30:	mov	r0, #12
   21d34:	add	sp, sp, #12
   21d38:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21d3c:	mov	r0, #0
   21d40:	b	21d34 <__assert_fail@plt+0x10190>
   21d44:	push	{r4, r5, r6, lr}
   21d48:	subs	r6, r1, #0
   21d4c:	beq	21ecc <__assert_fail@plt+0x10328>
   21d50:	ldr	r2, [r6, #4]
   21d54:	cmp	r2, #0
   21d58:	beq	21ed4 <__assert_fail@plt+0x10330>
   21d5c:	mov	r4, r0
   21d60:	ldr	r1, [r0]
   21d64:	ldr	r3, [r0, #4]
   21d68:	add	r0, r3, r2, lsl #1
   21d6c:	cmp	r1, r0
   21d70:	blt	21dd0 <__assert_fail@plt+0x1022c>
   21d74:	cmp	r3, #0
   21d78:	beq	21e04 <__assert_fail@plt+0x10260>
   21d7c:	ldr	r2, [r6, #4]
   21d80:	add	r5, r3, r2, lsl #1
   21d84:	sub	r2, r2, #1
   21d88:	sub	r3, r3, #1
   21d8c:	cmp	r2, #0
   21d90:	cmpge	r3, #0
   21d94:	blt	21e28 <__assert_fail@plt+0x10284>
   21d98:	ldr	ip, [r4, #8]
   21d9c:	ldr	r0, [ip, r3, lsl #2]
   21da0:	ldr	r1, [r6, #8]
   21da4:	ldr	r1, [r1, r2, lsl #2]
   21da8:	cmp	r0, r1
   21dac:	subeq	r2, r2, #1
   21db0:	subeq	r3, r3, #1
   21db4:	beq	21d8c <__assert_fail@plt+0x101e8>
   21db8:	cmp	r0, r1
   21dbc:	sublt	r5, r5, #1
   21dc0:	sublt	r2, r2, #1
   21dc4:	strlt	r1, [ip, r5, lsl #2]
   21dc8:	subge	r3, r3, #1
   21dcc:	b	21d8c <__assert_fail@plt+0x101e8>
   21dd0:	add	r1, r2, r1
   21dd4:	lsl	r5, r1, #1
   21dd8:	lsl	r1, r1, #3
   21ddc:	ldr	r0, [r4, #8]
   21de0:	bl	2d434 <__assert_fail@plt+0x1b890>
   21de4:	cmp	r0, #0
   21de8:	beq	21edc <__assert_fail@plt+0x10338>
   21dec:	str	r0, [r4, #8]
   21df0:	str	r5, [r4]
   21df4:	ldr	r3, [r4, #4]
   21df8:	cmp	r3, #0
   21dfc:	bne	21d7c <__assert_fail@plt+0x101d8>
   21e00:	b	21e08 <__assert_fail@plt+0x10264>
   21e04:	ldr	r0, [r4, #8]
   21e08:	ldr	r3, [r6, #4]
   21e0c:	str	r3, [r4, #4]
   21e10:	ldr	r2, [r6, #4]
   21e14:	lsl	r2, r2, #2
   21e18:	ldr	r1, [r6, #8]
   21e1c:	bl	11784 <memcpy@plt>
   21e20:	mov	r0, #0
   21e24:	pop	{r4, r5, r6, pc}
   21e28:	cmp	r2, #0
   21e2c:	blt	21e4c <__assert_fail@plt+0x102a8>
   21e30:	add	r2, r2, #1
   21e34:	sub	r5, r5, r2
   21e38:	ldr	r0, [r4, #8]
   21e3c:	lsl	r2, r2, #2
   21e40:	ldr	r1, [r6, #8]
   21e44:	add	r0, r0, r5, lsl #2
   21e48:	bl	11784 <memcpy@plt>
   21e4c:	ldr	r3, [r4, #4]
   21e50:	ldr	r2, [r6, #4]
   21e54:	add	r2, r3, r2, lsl #1
   21e58:	sub	lr, r2, #1
   21e5c:	subs	r2, r2, r5
   21e60:	beq	21ee4 <__assert_fail@plt+0x10340>
   21e64:	sub	r1, r3, #1
   21e68:	add	r3, r3, r2
   21e6c:	str	r3, [r4, #4]
   21e70:	b	21e84 <__assert_fail@plt+0x102e0>
   21e74:	add	ip, r1, r2
   21e78:	str	r0, [r3, ip, lsl #2]
   21e7c:	subs	r1, r1, #1
   21e80:	bmi	21eb4 <__assert_fail@plt+0x10310>
   21e84:	ldr	r3, [r4, #8]
   21e88:	ldr	ip, [r3, lr, lsl #2]
   21e8c:	ldr	r0, [r3, r1, lsl #2]
   21e90:	cmp	ip, r0
   21e94:	ble	21e74 <__assert_fail@plt+0x102d0>
   21e98:	sub	lr, lr, #1
   21e9c:	add	r0, r1, r2
   21ea0:	str	ip, [r3, r0, lsl #2]
   21ea4:	subs	r2, r2, #1
   21ea8:	bne	21e84 <__assert_fail@plt+0x102e0>
   21eac:	mov	r0, #0
   21eb0:	pop	{r4, r5, r6, pc}
   21eb4:	ldr	r0, [r4, #8]
   21eb8:	lsl	r2, r2, #2
   21ebc:	add	r1, r0, r5, lsl #2
   21ec0:	bl	11784 <memcpy@plt>
   21ec4:	mov	r0, #0
   21ec8:	pop	{r4, r5, r6, pc}
   21ecc:	mov	r0, #0
   21ed0:	pop	{r4, r5, r6, pc}
   21ed4:	mov	r0, #0
   21ed8:	pop	{r4, r5, r6, pc}
   21edc:	mov	r0, #12
   21ee0:	pop	{r4, r5, r6, pc}
   21ee4:	mov	r0, #0
   21ee8:	pop	{r4, r5, r6, pc}
   21eec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21ef0:	sub	sp, sp, #44	; 0x2c
   21ef4:	mov	sl, r0
   21ef8:	mov	r5, r1
   21efc:	mov	r4, r2
   21f00:	str	r3, [sp, #12]
   21f04:	add	r8, r2, r2, lsl #1
   21f08:	lsl	r8, r8, #2
   21f0c:	ldr	r3, [r1, #20]
   21f10:	add	r3, r3, r8
   21f14:	ldr	r1, [r3, #4]
   21f18:	add	r1, r1, #1
   21f1c:	add	r0, sp, #28
   21f20:	bl	1f41c <__assert_fail@plt+0xd878>
   21f24:	subs	fp, r0, #0
   21f28:	bne	220f0 <__assert_fail@plt+0x1054c>
   21f2c:	mov	r9, r8
   21f30:	ldr	r3, [sp, #32]
   21f34:	add	r2, r3, #1
   21f38:	str	r2, [sp, #32]
   21f3c:	ldr	r2, [sp, #36]	; 0x24
   21f40:	str	r4, [r2, r3, lsl #2]
   21f44:	ldr	r3, [r5, #24]
   21f48:	add	r3, r3, r8
   21f4c:	mvn	r2, #0
   21f50:	str	r2, [r3, #4]
   21f54:	ldr	r2, [r5]
   21f58:	lsl	r6, r4, #3
   21f5c:	add	r1, r2, r6
   21f60:	ldr	r0, [r1, #4]
   21f64:	ldr	r3, [pc, #424]	; 22114 <__assert_fail@plt+0x10570>
   21f68:	and	r3, r3, r0
   21f6c:	cmp	r3, #0
   21f70:	beq	21fa0 <__assert_fail@plt+0x103fc>
   21f74:	ldr	r3, [r5, #20]
   21f78:	add	r3, r3, r8
   21f7c:	ldr	r0, [r3, #4]
   21f80:	cmp	r0, #0
   21f84:	beq	220fc <__assert_fail@plt+0x10558>
   21f88:	ldr	r3, [r3, #8]
   21f8c:	ldr	r3, [r3]
   21f90:	add	r2, r2, r3, lsl #3
   21f94:	ldrb	r3, [r2, #6]
   21f98:	tst	r3, #4
   21f9c:	beq	21fdc <__assert_fail@plt+0x10438>
   21fa0:	ldr	r3, [r5]
   21fa4:	add	r6, r3, r6
   21fa8:	ldrb	r3, [r6, #4]
   21fac:	tst	r3, #8
   21fb0:	beq	220fc <__assert_fail@plt+0x10558>
   21fb4:	ldr	r3, [r5, #20]
   21fb8:	add	r3, r3, r8
   21fbc:	ldr	r2, [r3, #4]
   21fc0:	cmp	r2, #0
   21fc4:	ble	220fc <__assert_fail@plt+0x10558>
   21fc8:	mov	r2, #0
   21fcc:	str	r2, [sp, #8]
   21fd0:	mov	r6, r2
   21fd4:	add	r7, sp, #16
   21fd8:	b	22048 <__assert_fail@plt+0x104a4>
   21fdc:	ldr	r3, [r1, #4]
   21fe0:	lsl	r3, r3, #14
   21fe4:	lsr	r3, r3, #22
   21fe8:	str	r3, [sp]
   21fec:	mov	r3, r4
   21ff0:	mov	r2, r4
   21ff4:	mov	r1, r4
   21ff8:	mov	r0, r5
   21ffc:	bl	21920 <__assert_fail@plt+0xfd7c>
   22000:	cmp	r0, #0
   22004:	beq	21fa0 <__assert_fail@plt+0x103fc>
   22008:	mov	fp, r0
   2200c:	b	220f0 <__assert_fail@plt+0x1054c>
   22010:	mov	r3, #0
   22014:	mov	r1, r5
   22018:	mov	r0, r7
   2201c:	bl	21eec <__assert_fail@plt+0x10348>
   22020:	cmp	r0, #0
   22024:	beq	22084 <__assert_fail@plt+0x104e0>
   22028:	mov	fp, r0
   2202c:	b	220f0 <__assert_fail@plt+0x1054c>
   22030:	add	r6, r6, #1
   22034:	ldr	r3, [r5, #20]
   22038:	add	r3, r3, r9
   2203c:	ldr	r2, [r3, #4]
   22040:	cmp	r2, r6
   22044:	ble	220c0 <__assert_fail@plt+0x1051c>
   22048:	ldr	r3, [r3, #8]
   2204c:	ldr	r2, [r3, r6, lsl #2]
   22050:	add	r4, r2, r2, lsl #1
   22054:	lsl	r4, r4, #2
   22058:	ldr	r3, [r5, #24]
   2205c:	add	r3, r3, r4
   22060:	ldr	r1, [r3, #4]
   22064:	cmn	r1, #1
   22068:	moveq	r3, #1
   2206c:	streq	r3, [sp, #8]
   22070:	beq	22030 <__assert_fail@plt+0x1048c>
   22074:	cmp	r1, #0
   22078:	beq	22010 <__assert_fail@plt+0x1046c>
   2207c:	ldm	r3, {r0, r1, r2}
   22080:	stm	r7, {r0, r1, r2}
   22084:	mov	r1, r7
   22088:	add	r0, sp, #28
   2208c:	bl	21d44 <__assert_fail@plt+0x101a0>
   22090:	cmp	r0, #0
   22094:	bne	22028 <__assert_fail@plt+0x10484>
   22098:	ldr	r3, [r5, #24]
   2209c:	add	r4, r3, r4
   220a0:	ldr	r3, [r4, #4]
   220a4:	cmp	r3, #0
   220a8:	bne	22030 <__assert_fail@plt+0x1048c>
   220ac:	ldr	r0, [sp, #24]
   220b0:	bl	17204 <__assert_fail@plt+0x5660>
   220b4:	mov	r3, #1
   220b8:	str	r3, [sp, #8]
   220bc:	b	22030 <__assert_fail@plt+0x1048c>
   220c0:	ldr	r3, [sp, #12]
   220c4:	eor	r3, r3, #1
   220c8:	ldr	r2, [sp, #8]
   220cc:	tst	r2, r3
   220d0:	beq	220fc <__assert_fail@plt+0x10558>
   220d4:	ldr	r3, [r5, #24]
   220d8:	add	r8, r3, r8
   220dc:	mov	r3, #0
   220e0:	str	r3, [r8, #4]
   220e4:	add	r3, sp, #40	; 0x28
   220e8:	ldmdb	r3, {r0, r1, r2}
   220ec:	stm	sl, {r0, r1, r2}
   220f0:	mov	r0, fp
   220f4:	add	sp, sp, #44	; 0x2c
   220f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   220fc:	ldr	r3, [r5, #24]
   22100:	add	r8, r3, r8
   22104:	add	r3, sp, #40	; 0x28
   22108:	ldmdb	r3, {r0, r1, r2}
   2210c:	stm	r8, {r0, r1, r2}
   22110:	b	220e4 <__assert_fail@plt+0x10540>
   22114:	andeq	pc, r3, r0, lsl #30
   22118:	push	{r4, r5, r6, lr}
   2211c:	mov	r5, r0
   22120:	cmp	r1, #0
   22124:	blt	22168 <__assert_fail@plt+0x105c4>
   22128:	ldr	r3, [r0, #48]	; 0x30
   2212c:	cmp	r1, r3
   22130:	beq	22170 <__assert_fail@plt+0x105cc>
   22134:	ldr	r3, [r0, #80]	; 0x50
   22138:	cmp	r3, #1
   2213c:	ble	221dc <__assert_fail@plt+0x10638>
   22140:	ldr	r3, [r0, #8]
   22144:	add	r3, r3, r1, lsl #2
   22148:	ldr	r4, [r3], #-4
   2214c:	cmn	r4, #1
   22150:	bne	22184 <__assert_fail@plt+0x105e0>
   22154:	sub	r1, r1, #1
   22158:	cmn	r1, #1
   2215c:	bne	22148 <__assert_fail@plt+0x105a4>
   22160:	ldr	r0, [r5, #60]	; 0x3c
   22164:	pop	{r4, r5, r6, pc}
   22168:	ldr	r0, [r0, #60]	; 0x3c
   2216c:	pop	{r4, r5, r6, pc}
   22170:	and	r2, r2, #2
   22174:	cmp	r2, #0
   22178:	movne	r0, #8
   2217c:	moveq	r0, #10
   22180:	pop	{r4, r5, r6, pc}
   22184:	ldrb	r3, [r5, #78]	; 0x4e
   22188:	cmp	r3, #0
   2218c:	bne	221a0 <__assert_fail@plt+0x105fc>
   22190:	cmp	r4, #10
   22194:	beq	221c8 <__assert_fail@plt+0x10624>
   22198:	mov	r0, #0
   2219c:	pop	{r4, r5, r6, pc}
   221a0:	mov	r0, r4
   221a4:	bl	119c4 <iswalnum@plt>
   221a8:	adds	r3, r0, #0
   221ac:	movne	r3, #1
   221b0:	cmp	r4, #95	; 0x5f
   221b4:	orreq	r3, r3, #1
   221b8:	cmp	r3, #0
   221bc:	beq	22190 <__assert_fail@plt+0x105ec>
   221c0:	mov	r0, #1
   221c4:	pop	{r4, r5, r6, pc}
   221c8:	ldrb	r0, [r5, #77]	; 0x4d
   221cc:	cmp	r0, #0
   221d0:	movne	r0, #2
   221d4:	moveq	r0, #0
   221d8:	pop	{r4, r5, r6, pc}
   221dc:	ldr	r3, [r0, #4]
   221e0:	ldrb	r2, [r3, r1]
   221e4:	asr	r0, r2, #5
   221e8:	ldr	r3, [r5, #68]	; 0x44
   221ec:	and	r1, r2, #31
   221f0:	ldr	r3, [r3, r0, lsl #2]
   221f4:	lsr	r3, r3, r1
   221f8:	tst	r3, #1
   221fc:	bne	22224 <__assert_fail@plt+0x10680>
   22200:	cmp	r2, #10
   22204:	beq	22210 <__assert_fail@plt+0x1066c>
   22208:	mov	r0, #0
   2220c:	pop	{r4, r5, r6, pc}
   22210:	ldrb	r0, [r5, #77]	; 0x4d
   22214:	cmp	r0, #0
   22218:	movne	r0, #2
   2221c:	moveq	r0, #0
   22220:	pop	{r4, r5, r6, pc}
   22224:	mov	r0, #1
   22228:	pop	{r4, r5, r6, pc}
   2222c:	push	{r4, lr}
   22230:	ldr	r3, [r0, #4]
   22234:	ldrb	ip, [r3, r2]
   22238:	ldrb	r3, [r1, #4]
   2223c:	sub	r3, r3, #1
   22240:	cmp	r3, #6
   22244:	ldrls	pc, [pc, r3, lsl #2]
   22248:	b	22368 <__assert_fail@plt+0x107c4>
   2224c:	andeq	r2, r2, r8, ror #4
   22250:	andeq	r2, r2, r8, ror #6
   22254:	andeq	r2, r2, ip, ror r2
   22258:	andeq	r2, r2, r8, ror #6
   2225c:	strdeq	r2, [r2], -r4
   22260:	andeq	r2, r2, r8, ror #6
   22264:	andeq	r2, r2, ip, ror #5
   22268:	ldrb	r3, [r1]
   2226c:	cmp	r3, ip
   22270:	beq	22298 <__assert_fail@plt+0x106f4>
   22274:	mov	r0, #0
   22278:	pop	{r4, pc}
   2227c:	lsr	lr, ip, #5
   22280:	ldr	r3, [r1]
   22284:	and	ip, ip, #31
   22288:	ldr	r3, [r3, lr, lsl #2]
   2228c:	lsr	ip, r3, ip
   22290:	tst	ip, #1
   22294:	beq	22370 <__assert_fail@plt+0x107cc>
   22298:	ldr	ip, [r1, #4]
   2229c:	ldr	r3, [pc, #260]	; 223a8 <__assert_fail@plt+0x10804>
   222a0:	and	r3, r3, ip
   222a4:	cmp	r3, #0
   222a8:	beq	22380 <__assert_fail@plt+0x107dc>
   222ac:	mov	r3, r2
   222b0:	mov	r4, r1
   222b4:	ldr	r2, [r0, #88]	; 0x58
   222b8:	mov	r1, r3
   222bc:	bl	22118 <__assert_fail@plt+0x10574>
   222c0:	ldr	r3, [r4, #4]
   222c4:	lsl	r3, r3, #14
   222c8:	lsr	r3, r3, #22
   222cc:	tst	r3, #4
   222d0:	beq	22334 <__assert_fail@plt+0x10790>
   222d4:	tst	r0, #1
   222d8:	beq	22388 <__assert_fail@plt+0x107e4>
   222dc:	tst	r3, #8
   222e0:	beq	22344 <__assert_fail@plt+0x107a0>
   222e4:	mov	r0, #0
   222e8:	pop	{r4, pc}
   222ec:	tst	ip, #128	; 0x80
   222f0:	bne	22378 <__assert_fail@plt+0x107d4>
   222f4:	cmp	ip, #10
   222f8:	beq	2231c <__assert_fail@plt+0x10778>
   222fc:	cmp	ip, #0
   22300:	bne	22298 <__assert_fail@plt+0x106f4>
   22304:	ldr	r3, [r0, #84]	; 0x54
   22308:	ldr	r3, [r3, #128]	; 0x80
   2230c:	tst	r3, #128	; 0x80
   22310:	beq	22298 <__assert_fail@plt+0x106f4>
   22314:	mov	r0, #0
   22318:	pop	{r4, pc}
   2231c:	ldr	r3, [r0, #84]	; 0x54
   22320:	ldr	r3, [r3, #128]	; 0x80
   22324:	tst	r3, #64	; 0x40
   22328:	bne	22298 <__assert_fail@plt+0x106f4>
   2232c:	mov	r0, #0
   22330:	pop	{r4, pc}
   22334:	tst	r3, #8
   22338:	beq	22344 <__assert_fail@plt+0x107a0>
   2233c:	tst	r0, #1
   22340:	bne	22390 <__assert_fail@plt+0x107ec>
   22344:	tst	r3, #32
   22348:	beq	22354 <__assert_fail@plt+0x107b0>
   2234c:	tst	r0, #2
   22350:	beq	22398 <__assert_fail@plt+0x107f4>
   22354:	tst	r3, #128	; 0x80
   22358:	beq	223a0 <__assert_fail@plt+0x107fc>
   2235c:	lsr	r0, r0, #3
   22360:	and	r0, r0, #1
   22364:	pop	{r4, pc}
   22368:	mov	r0, #0
   2236c:	pop	{r4, pc}
   22370:	mov	r0, #0
   22374:	pop	{r4, pc}
   22378:	mov	r0, #0
   2237c:	pop	{r4, pc}
   22380:	mov	r0, #1
   22384:	pop	{r4, pc}
   22388:	mov	r0, #0
   2238c:	pop	{r4, pc}
   22390:	mov	r0, #0
   22394:	pop	{r4, pc}
   22398:	mov	r0, #0
   2239c:	pop	{r4, pc}
   223a0:	mov	r0, #1
   223a4:	pop	{r4, pc}
   223a8:	andeq	pc, r3, r0, lsl #30
   223ac:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223b0:	ldr	r7, [r0, #84]	; 0x54
   223b4:	ldr	r3, [r1, #4]
   223b8:	cmp	r3, #0
   223bc:	ble	224a4 <__assert_fail@plt+0x10900>
   223c0:	mov	r9, r2
   223c4:	mov	r6, r1
   223c8:	mov	r8, r0
   223cc:	mov	r4, #0
   223d0:	b	22404 <__assert_fail@plt+0x10860>
   223d4:	lsl	sl, r1, #1
   223d8:	lsl	r1, r1, #3
   223dc:	bl	2d434 <__assert_fail@plt+0x1b890>
   223e0:	cmp	r0, #0
   223e4:	beq	224ac <__assert_fail@plt+0x10908>
   223e8:	str	r0, [r8, #132]	; 0x84
   223ec:	str	sl, [r8, #128]	; 0x80
   223f0:	b	22450 <__assert_fail@plt+0x108ac>
   223f4:	add	r4, r4, #1
   223f8:	ldr	r3, [r6, #4]
   223fc:	cmp	r3, r4
   22400:	ble	2249c <__assert_fail@plt+0x108f8>
   22404:	ldr	r3, [r6, #8]
   22408:	ldr	r5, [r3, r4, lsl #2]
   2240c:	ldr	r3, [r7]
   22410:	add	r2, r3, r5, lsl #3
   22414:	ldrb	r2, [r2, #4]
   22418:	cmp	r2, #8
   2241c:	bne	223f4 <__assert_fail@plt+0x10850>
   22420:	ldr	r3, [r3, r5, lsl #3]
   22424:	cmp	r3, #31
   22428:	bgt	223f4 <__assert_fail@plt+0x10850>
   2242c:	ldr	r2, [r7, #80]	; 0x50
   22430:	lsr	r3, r2, r3
   22434:	tst	r3, #1
   22438:	beq	223f4 <__assert_fail@plt+0x10850>
   2243c:	ldr	r0, [r8, #132]	; 0x84
   22440:	ldr	r1, [r8, #128]	; 0x80
   22444:	ldr	r3, [r8, #124]	; 0x7c
   22448:	cmp	r1, r3
   2244c:	beq	223d4 <__assert_fail@plt+0x10830>
   22450:	ldr	fp, [r8, #124]	; 0x7c
   22454:	ldr	sl, [r8, #132]	; 0x84
   22458:	mov	r1, #24
   2245c:	mov	r0, #1
   22460:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   22464:	str	r0, [sl, fp, lsl #2]
   22468:	ldr	r2, [r8, #124]	; 0x7c
   2246c:	ldr	r3, [r8, #132]	; 0x84
   22470:	ldr	r3, [r3, r2, lsl #2]
   22474:	cmp	r3, #0
   22478:	beq	224ac <__assert_fail@plt+0x10908>
   2247c:	str	r5, [r3, #4]
   22480:	ldr	r2, [r8, #132]	; 0x84
   22484:	ldr	r3, [r8, #124]	; 0x7c
   22488:	add	r1, r3, #1
   2248c:	str	r1, [r8, #124]	; 0x7c
   22490:	ldr	r3, [r2, r3, lsl #2]
   22494:	str	r9, [r3]
   22498:	b	223f4 <__assert_fail@plt+0x10850>
   2249c:	mov	r0, #0
   224a0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224a4:	mov	r0, #0
   224a8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224ac:	mov	r0, #12
   224b0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   224b4:	push	{r4, r5, r6, lr}
   224b8:	mov	r4, r0
   224bc:	mov	r5, r1
   224c0:	ldr	r6, [r0, #104]	; 0x68
   224c4:	ldr	r3, [r0, #36]	; 0x24
   224c8:	cmp	r3, r1
   224cc:	bgt	224dc <__assert_fail@plt+0x10938>
   224d0:	ldr	r2, [r0, #48]	; 0x30
   224d4:	cmp	r3, r2
   224d8:	blt	224f4 <__assert_fail@plt+0x10950>
   224dc:	ldr	r3, [r4, #28]
   224e0:	cmp	r5, r3
   224e4:	blt	22508 <__assert_fail@plt+0x10964>
   224e8:	ldr	r2, [r4, #48]	; 0x30
   224ec:	cmp	r3, r2
   224f0:	bge	22508 <__assert_fail@plt+0x10964>
   224f4:	add	r1, r5, #1
   224f8:	mov	r0, r4
   224fc:	bl	200fc <__assert_fail@plt+0xe558>
   22500:	cmp	r0, #0
   22504:	popne	{r4, r5, r6, pc}
   22508:	cmp	r6, r5
   2250c:	bge	22538 <__assert_fail@plt+0x10994>
   22510:	sub	r2, r5, r6
   22514:	add	r6, r6, #1
   22518:	ldr	r0, [r4, #100]	; 0x64
   2251c:	lsl	r2, r2, #2
   22520:	mov	r1, #0
   22524:	add	r0, r0, r6, lsl #2
   22528:	bl	119e8 <memset@plt>
   2252c:	str	r5, [r4, #104]	; 0x68
   22530:	mov	r0, #0
   22534:	pop	{r4, r5, r6, pc}
   22538:	mov	r0, #0
   2253c:	pop	{r4, r5, r6, pc}
   22540:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22544:	sub	sp, sp, #28
   22548:	mov	r7, r0
   2254c:	mov	r8, r1
   22550:	mov	r5, r2
   22554:	mov	r4, r3
   22558:	ldr	r1, [r1, #4]
   2255c:	add	r0, sp, #12
   22560:	bl	1f41c <__assert_fail@plt+0xd878>
   22564:	subs	r9, r0, #0
   22568:	bne	22660 <__assert_fail@plt+0x10abc>
   2256c:	ldr	r3, [r8, #4]
   22570:	cmp	r3, #0
   22574:	ble	22644 <__assert_fail@plt+0x10aa0>
   22578:	mov	r6, #0
   2257c:	b	225e0 <__assert_fail@plt+0x10a3c>
   22580:	add	r3, r3, #1
   22584:	cmp	fp, r3
   22588:	beq	22614 <__assert_fail@plt+0x10a70>
   2258c:	ldr	r0, [ip, #4]!
   22590:	add	lr, sl, r0, lsl #3
   22594:	ldrb	lr, [lr, #4]
   22598:	cmp	r4, lr
   2259c:	bne	22580 <__assert_fail@plt+0x109dc>
   225a0:	ldr	lr, [sl, r0, lsl #3]
   225a4:	cmp	r5, lr
   225a8:	bne	22580 <__assert_fail@plt+0x109dc>
   225ac:	cmn	r0, #1
   225b0:	beq	22614 <__assert_fail@plt+0x10a70>
   225b4:	str	r4, [sp]
   225b8:	mov	r3, r5
   225bc:	add	r1, sp, #12
   225c0:	mov	r0, r7
   225c4:	bl	21c38 <__assert_fail@plt+0x10094>
   225c8:	subs	sl, r0, #0
   225cc:	bne	22630 <__assert_fail@plt+0x10a8c>
   225d0:	add	r6, r6, #1
   225d4:	ldr	r3, [r8, #4]
   225d8:	cmp	r3, r6
   225dc:	ble	22644 <__assert_fail@plt+0x10aa0>
   225e0:	ldr	r3, [r8, #8]
   225e4:	ldr	r2, [r3, r6, lsl #2]
   225e8:	add	r3, r2, r2, lsl #1
   225ec:	ldr	r1, [r7, #24]
   225f0:	add	r1, r1, r3, lsl #2
   225f4:	ldr	fp, [r1, #4]
   225f8:	cmp	fp, #0
   225fc:	ble	22614 <__assert_fail@plt+0x10a70>
   22600:	ldr	sl, [r7]
   22604:	ldr	ip, [r1, #8]
   22608:	sub	ip, ip, #4
   2260c:	mov	r3, #0
   22610:	b	2258c <__assert_fail@plt+0x109e8>
   22614:	add	r0, sp, #12
   22618:	bl	21d44 <__assert_fail@plt+0x101a0>
   2261c:	subs	sl, r0, #0
   22620:	beq	225d0 <__assert_fail@plt+0x10a2c>
   22624:	ldr	r0, [sp, #20]
   22628:	bl	17204 <__assert_fail@plt+0x5660>
   2262c:	b	22638 <__assert_fail@plt+0x10a94>
   22630:	ldr	r0, [sp, #20]
   22634:	bl	17204 <__assert_fail@plt+0x5660>
   22638:	mov	r0, sl
   2263c:	add	sp, sp, #28
   22640:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22644:	ldr	r0, [r8, #8]
   22648:	bl	17204 <__assert_fail@plt+0x5660>
   2264c:	add	r3, sp, #24
   22650:	ldmdb	r3, {r0, r1, r2}
   22654:	stm	r8, {r0, r1, r2}
   22658:	mov	sl, r9
   2265c:	b	22638 <__assert_fail@plt+0x10a94>
   22660:	mov	sl, r9
   22664:	b	22638 <__assert_fail@plt+0x10a94>
   22668:	push	{r4, r5, r6, r7, r8, lr}
   2266c:	mov	r4, r0
   22670:	mov	r5, r1
   22674:	mov	r1, r2
   22678:	ldr	r2, [r0, #88]	; 0x58
   2267c:	bl	22118 <__assert_fail@plt+0x10574>
   22680:	ldr	lr, [r5, #8]
   22684:	cmp	lr, #0
   22688:	ble	22730 <__assert_fail@plt+0x10b8c>
   2268c:	ldr	r3, [r4, #84]	; 0x54
   22690:	ldr	r4, [r3]
   22694:	ldr	ip, [r5, #12]
   22698:	sub	ip, ip, #4
   2269c:	mov	r1, #0
   226a0:	and	r7, r0, #8
   226a4:	and	r6, r0, #2
   226a8:	and	r5, r0, #1
   226ac:	b	226ec <__assert_fail@plt+0x10b48>
   226b0:	tst	r3, #8
   226b4:	beq	226c0 <__assert_fail@plt+0x10b1c>
   226b8:	cmp	r5, #0
   226bc:	bne	226e0 <__assert_fail@plt+0x10b3c>
   226c0:	tst	r3, #32
   226c4:	beq	226d0 <__assert_fail@plt+0x10b2c>
   226c8:	cmp	r6, #0
   226cc:	beq	226e0 <__assert_fail@plt+0x10b3c>
   226d0:	tst	r3, #128	; 0x80
   226d4:	popeq	{r4, r5, r6, r7, r8, pc}
   226d8:	cmp	r7, #0
   226dc:	popne	{r4, r5, r6, r7, r8, pc}
   226e0:	add	r1, r1, #1
   226e4:	cmp	lr, r1
   226e8:	beq	22738 <__assert_fail@plt+0x10b94>
   226ec:	ldr	r0, [ip, #4]!
   226f0:	add	r2, r4, r0, lsl #3
   226f4:	ldr	r3, [r2, #4]
   226f8:	lsl	r3, r3, #14
   226fc:	lsr	r3, r3, #22
   22700:	ldrb	r2, [r2, #4]
   22704:	cmp	r2, #2
   22708:	bne	226e0 <__assert_fail@plt+0x10b3c>
   2270c:	cmp	r3, #0
   22710:	popeq	{r4, r5, r6, r7, r8, pc}
   22714:	tst	r3, #4
   22718:	beq	226b0 <__assert_fail@plt+0x10b0c>
   2271c:	cmp	r5, #0
   22720:	beq	226e0 <__assert_fail@plt+0x10b3c>
   22724:	tst	r3, #8
   22728:	bne	226e0 <__assert_fail@plt+0x10b3c>
   2272c:	b	226c0 <__assert_fail@plt+0x10b1c>
   22730:	mov	r0, #0
   22734:	pop	{r4, r5, r6, r7, r8, pc}
   22738:	mov	r0, #0
   2273c:	pop	{r4, r5, r6, r7, r8, pc}
   22740:	push	{r4, r5, r6, r7, r8, lr}
   22744:	ldr	r7, [sp, #28]
   22748:	subs	r5, r0, #0
   2274c:	beq	227ec <__assert_fail@plt+0x10c48>
   22750:	ldr	r4, [r5]
   22754:	cmp	r4, #0
   22758:	beq	227f4 <__assert_fail@plt+0x10c50>
   2275c:	mov	r0, r3
   22760:	sub	r4, r4, #1
   22764:	str	r4, [r5]
   22768:	add	r4, r4, r4, lsl #1
   2276c:	lsl	r4, r4, #3
   22770:	ldr	r3, [r5, #8]
   22774:	ldr	r3, [r3, r4]
   22778:	str	r3, [r1]
   2277c:	lsl	r6, r2, #3
   22780:	ldr	r3, [r5, #8]
   22784:	add	r3, r3, r4
   22788:	mov	r2, r6
   2278c:	ldr	r1, [r3, #8]
   22790:	bl	11784 <memcpy@plt>
   22794:	ldr	r3, [r5, #8]
   22798:	add	r3, r3, r4
   2279c:	ldr	r1, [r3, #8]
   227a0:	mov	r2, r6
   227a4:	add	r1, r1, r6
   227a8:	ldr	r0, [sp, #24]
   227ac:	bl	11784 <memcpy@plt>
   227b0:	ldr	r0, [r7, #8]
   227b4:	bl	17204 <__assert_fail@plt+0x5660>
   227b8:	ldr	r3, [r5, #8]
   227bc:	add	r3, r3, r4
   227c0:	ldr	r0, [r3, #8]
   227c4:	bl	17204 <__assert_fail@plt+0x5660>
   227c8:	ldr	r3, [r5, #8]
   227cc:	add	r3, r3, r4
   227d0:	add	r3, r3, #12
   227d4:	ldm	r3, {r0, r1, r2}
   227d8:	stm	r7, {r0, r1, r2}
   227dc:	ldr	r3, [r5, #8]
   227e0:	add	r4, r3, r4
   227e4:	ldr	r0, [r4, #4]
   227e8:	pop	{r4, r5, r6, r7, r8, pc}
   227ec:	mvn	r0, #0
   227f0:	pop	{r4, r5, r6, r7, r8, pc}
   227f4:	mvn	r0, #0
   227f8:	pop	{r4, r5, r6, r7, r8, pc}
   227fc:	push	{r4, r5, r6, r7, r8, lr}
   22800:	mov	r6, r0
   22804:	mov	r5, r1
   22808:	mov	r4, r2
   2280c:	mov	r8, r3
   22810:	ldr	r3, [sp, #28]
   22814:	tst	r3, #4194304	; 0x400000
   22818:	beq	22850 <__assert_fail@plt+0x10cac>
   2281c:	ldr	r1, [pc, #2780]	; 23300 <__assert_fail@plt+0x1175c>
   22820:	ldr	r0, [sp, #24]
   22824:	bl	1170c <strcmp@plt>
   22828:	cmp	r0, #0
   2282c:	beq	228a4 <__assert_fail@plt+0x10d00>
   22830:	ldr	r1, [pc, #2764]	; 23304 <__assert_fail@plt+0x11760>
   22834:	ldr	r0, [sp, #24]
   22838:	bl	1170c <strcmp@plt>
   2283c:	ldr	r3, [pc, #2756]	; 23308 <__assert_fail@plt+0x11764>
   22840:	ldr	r2, [sp, #24]
   22844:	cmp	r0, #0
   22848:	moveq	r2, r3
   2284c:	str	r2, [sp, #24]
   22850:	ldr	r3, [r8]
   22854:	ldr	r2, [r4, #36]	; 0x24
   22858:	cmp	r3, r2
   2285c:	beq	228b0 <__assert_fail@plt+0x10d0c>
   22860:	ldr	r8, [r4, #12]
   22864:	ldr	r7, [r4, #36]	; 0x24
   22868:	add	r3, r7, #1
   2286c:	str	r3, [r4, #36]	; 0x24
   22870:	ldr	r0, [sp, #24]
   22874:	bl	116c4 <wctype@plt>
   22878:	str	r0, [r8, r7, lsl #2]
   2287c:	ldr	r1, [pc, #2696]	; 2330c <__assert_fail@plt+0x11768>
   22880:	ldr	r0, [sp, #24]
   22884:	bl	1170c <strcmp@plt>
   22888:	subs	r4, r0, #0
   2288c:	bne	2298c <__assert_fail@plt+0x10de8>
   22890:	cmp	r6, #0
   22894:	bne	228d8 <__assert_fail@plt+0x10d34>
   22898:	bl	11964 <__ctype_b_loc@plt>
   2289c:	mov	ip, #1
   228a0:	b	2293c <__assert_fail@plt+0x10d98>
   228a4:	ldr	r3, [pc, #2652]	; 23308 <__assert_fail@plt+0x11764>
   228a8:	str	r3, [sp, #24]
   228ac:	b	22850 <__assert_fail@plt+0x10cac>
   228b0:	lsl	r3, r3, #1
   228b4:	add	r7, r3, #1
   228b8:	lsl	r1, r7, #2
   228bc:	ldr	r0, [r4, #12]
   228c0:	bl	2d434 <__assert_fail@plt+0x1b890>
   228c4:	cmp	r0, #0
   228c8:	beq	232f0 <__assert_fail@plt+0x1174c>
   228cc:	str	r0, [r4, #12]
   228d0:	str	r7, [r8]
   228d4:	b	22860 <__assert_fail@plt+0x10cbc>
   228d8:	bl	11964 <__ctype_b_loc@plt>
   228dc:	mov	r2, r6
   228e0:	mov	r3, #0
   228e4:	mov	r4, #1
   228e8:	b	228fc <__assert_fail@plt+0x10d58>
   228ec:	add	r3, r3, #2
   228f0:	add	r2, r2, #1
   228f4:	cmp	r3, #512	; 0x200
   228f8:	beq	22928 <__assert_fail@plt+0x10d84>
   228fc:	ldr	r1, [r0]
   22900:	ldrh	r1, [r1, r3]
   22904:	tst	r1, #8
   22908:	beq	228ec <__assert_fail@plt+0x10d48>
   2290c:	ldrb	r1, [r2]
   22910:	asr	lr, r1, #5
   22914:	and	r1, r1, #31
   22918:	ldr	ip, [r5, lr, lsl #2]
   2291c:	orr	r1, ip, r4, lsl r1
   22920:	str	r1, [r5, lr, lsl #2]
   22924:	b	228ec <__assert_fail@plt+0x10d48>
   22928:	mov	r0, #0
   2292c:	pop	{r4, r5, r6, r7, r8, pc}
   22930:	add	r4, r4, #1
   22934:	cmp	r4, #256	; 0x100
   22938:	beq	22984 <__assert_fail@plt+0x10de0>
   2293c:	ldr	r2, [r0]
   22940:	lsl	r3, r4, #1
   22944:	ldrh	r3, [r2, r3]
   22948:	tst	r3, #8
   2294c:	beq	22930 <__assert_fail@plt+0x10d8c>
   22950:	add	r3, r4, #31
   22954:	cmp	r4, #0
   22958:	movge	r3, r4
   2295c:	asr	r3, r3, #5
   22960:	asr	r2, r4, #31
   22964:	lsr	r1, r2, #27
   22968:	add	r2, r4, r1
   2296c:	and	r2, r2, #31
   22970:	sub	r2, r2, r1
   22974:	ldr	r1, [r5, r3, lsl #2]
   22978:	orr	r2, r1, ip, lsl r2
   2297c:	str	r2, [r5, r3, lsl #2]
   22980:	b	22930 <__assert_fail@plt+0x10d8c>
   22984:	mov	r0, #0
   22988:	pop	{r4, r5, r6, r7, r8, pc}
   2298c:	ldr	r1, [pc, #2428]	; 23310 <__assert_fail@plt+0x1176c>
   22990:	ldr	r0, [sp, #24]
   22994:	bl	1170c <strcmp@plt>
   22998:	subs	r4, r0, #0
   2299c:	bne	22a68 <__assert_fail@plt+0x10ec4>
   229a0:	cmp	r6, #0
   229a4:	bne	229b4 <__assert_fail@plt+0x10e10>
   229a8:	bl	11964 <__ctype_b_loc@plt>
   229ac:	mov	ip, #1
   229b0:	b	22a18 <__assert_fail@plt+0x10e74>
   229b4:	bl	11964 <__ctype_b_loc@plt>
   229b8:	mov	r2, r6
   229bc:	mov	r3, #0
   229c0:	mov	r4, #1
   229c4:	b	229d8 <__assert_fail@plt+0x10e34>
   229c8:	add	r3, r3, #2
   229cc:	add	r2, r2, #1
   229d0:	cmp	r3, #512	; 0x200
   229d4:	beq	22a04 <__assert_fail@plt+0x10e60>
   229d8:	ldr	r1, [r0]
   229dc:	ldrh	r1, [r1, r3]
   229e0:	tst	r1, #2
   229e4:	beq	229c8 <__assert_fail@plt+0x10e24>
   229e8:	ldrb	r1, [r2]
   229ec:	asr	lr, r1, #5
   229f0:	and	r1, r1, #31
   229f4:	ldr	ip, [r5, lr, lsl #2]
   229f8:	orr	r1, ip, r4, lsl r1
   229fc:	str	r1, [r5, lr, lsl #2]
   22a00:	b	229c8 <__assert_fail@plt+0x10e24>
   22a04:	mov	r0, #0
   22a08:	pop	{r4, r5, r6, r7, r8, pc}
   22a0c:	add	r4, r4, #1
   22a10:	cmp	r4, #256	; 0x100
   22a14:	beq	22a60 <__assert_fail@plt+0x10ebc>
   22a18:	ldr	r2, [r0]
   22a1c:	lsl	r3, r4, #1
   22a20:	ldrh	r3, [r2, r3]
   22a24:	tst	r3, #2
   22a28:	beq	22a0c <__assert_fail@plt+0x10e68>
   22a2c:	add	r3, r4, #31
   22a30:	cmp	r4, #0
   22a34:	movge	r3, r4
   22a38:	asr	r3, r3, #5
   22a3c:	asr	r2, r4, #31
   22a40:	lsr	r1, r2, #27
   22a44:	add	r2, r4, r1
   22a48:	and	r2, r2, #31
   22a4c:	sub	r2, r2, r1
   22a50:	ldr	r1, [r5, r3, lsl #2]
   22a54:	orr	r2, r1, ip, lsl r2
   22a58:	str	r2, [r5, r3, lsl #2]
   22a5c:	b	22a0c <__assert_fail@plt+0x10e68>
   22a60:	mov	r0, #0
   22a64:	pop	{r4, r5, r6, r7, r8, pc}
   22a68:	ldr	r1, [pc, #2196]	; 23304 <__assert_fail@plt+0x11760>
   22a6c:	ldr	r0, [sp, #24]
   22a70:	bl	1170c <strcmp@plt>
   22a74:	subs	r4, r0, #0
   22a78:	bne	22b44 <__assert_fail@plt+0x10fa0>
   22a7c:	cmp	r6, #0
   22a80:	bne	22a90 <__assert_fail@plt+0x10eec>
   22a84:	bl	11964 <__ctype_b_loc@plt>
   22a88:	mov	ip, #1
   22a8c:	b	22af4 <__assert_fail@plt+0x10f50>
   22a90:	bl	11964 <__ctype_b_loc@plt>
   22a94:	mov	r2, r6
   22a98:	mov	r3, #0
   22a9c:	mov	r4, #1
   22aa0:	b	22ab4 <__assert_fail@plt+0x10f10>
   22aa4:	add	r3, r3, #2
   22aa8:	add	r2, r2, #1
   22aac:	cmp	r3, #512	; 0x200
   22ab0:	beq	22ae0 <__assert_fail@plt+0x10f3c>
   22ab4:	ldr	r1, [r0]
   22ab8:	ldrh	r1, [r1, r3]
   22abc:	tst	r1, #512	; 0x200
   22ac0:	beq	22aa4 <__assert_fail@plt+0x10f00>
   22ac4:	ldrb	r1, [r2]
   22ac8:	asr	lr, r1, #5
   22acc:	and	r1, r1, #31
   22ad0:	ldr	ip, [r5, lr, lsl #2]
   22ad4:	orr	r1, ip, r4, lsl r1
   22ad8:	str	r1, [r5, lr, lsl #2]
   22adc:	b	22aa4 <__assert_fail@plt+0x10f00>
   22ae0:	mov	r0, #0
   22ae4:	pop	{r4, r5, r6, r7, r8, pc}
   22ae8:	add	r4, r4, #1
   22aec:	cmp	r4, #256	; 0x100
   22af0:	beq	22b3c <__assert_fail@plt+0x10f98>
   22af4:	ldr	r2, [r0]
   22af8:	lsl	r3, r4, #1
   22afc:	ldrh	r3, [r2, r3]
   22b00:	tst	r3, #512	; 0x200
   22b04:	beq	22ae8 <__assert_fail@plt+0x10f44>
   22b08:	add	r3, r4, #31
   22b0c:	cmp	r4, #0
   22b10:	movge	r3, r4
   22b14:	asr	r3, r3, #5
   22b18:	asr	r2, r4, #31
   22b1c:	lsr	r1, r2, #27
   22b20:	add	r2, r4, r1
   22b24:	and	r2, r2, #31
   22b28:	sub	r2, r2, r1
   22b2c:	ldr	r1, [r5, r3, lsl #2]
   22b30:	orr	r2, r1, ip, lsl r2
   22b34:	str	r2, [r5, r3, lsl #2]
   22b38:	b	22ae8 <__assert_fail@plt+0x10f44>
   22b3c:	mov	r0, #0
   22b40:	pop	{r4, r5, r6, r7, r8, pc}
   22b44:	ldr	r1, [pc, #1992]	; 23314 <__assert_fail@plt+0x11770>
   22b48:	ldr	r0, [sp, #24]
   22b4c:	bl	1170c <strcmp@plt>
   22b50:	subs	r4, r0, #0
   22b54:	bne	22c20 <__assert_fail@plt+0x1107c>
   22b58:	cmp	r6, #0
   22b5c:	bne	22b6c <__assert_fail@plt+0x10fc8>
   22b60:	bl	11964 <__ctype_b_loc@plt>
   22b64:	mov	ip, #1
   22b68:	b	22bd0 <__assert_fail@plt+0x1102c>
   22b6c:	bl	11964 <__ctype_b_loc@plt>
   22b70:	mov	r2, r6
   22b74:	mov	r3, #0
   22b78:	mov	r4, #1
   22b7c:	b	22b90 <__assert_fail@plt+0x10fec>
   22b80:	add	r3, r3, #2
   22b84:	add	r2, r2, #1
   22b88:	cmp	r3, #512	; 0x200
   22b8c:	beq	22bbc <__assert_fail@plt+0x11018>
   22b90:	ldr	r1, [r0]
   22b94:	ldrh	r1, [r1, r3]
   22b98:	tst	r1, #8192	; 0x2000
   22b9c:	beq	22b80 <__assert_fail@plt+0x10fdc>
   22ba0:	ldrb	r1, [r2]
   22ba4:	asr	lr, r1, #5
   22ba8:	and	r1, r1, #31
   22bac:	ldr	ip, [r5, lr, lsl #2]
   22bb0:	orr	r1, ip, r4, lsl r1
   22bb4:	str	r1, [r5, lr, lsl #2]
   22bb8:	b	22b80 <__assert_fail@plt+0x10fdc>
   22bbc:	mov	r0, #0
   22bc0:	pop	{r4, r5, r6, r7, r8, pc}
   22bc4:	add	r4, r4, #1
   22bc8:	cmp	r4, #256	; 0x100
   22bcc:	beq	22c18 <__assert_fail@plt+0x11074>
   22bd0:	ldr	r2, [r0]
   22bd4:	lsl	r3, r4, #1
   22bd8:	ldrh	r3, [r2, r3]
   22bdc:	tst	r3, #8192	; 0x2000
   22be0:	beq	22bc4 <__assert_fail@plt+0x11020>
   22be4:	add	r3, r4, #31
   22be8:	cmp	r4, #0
   22bec:	movge	r3, r4
   22bf0:	asr	r3, r3, #5
   22bf4:	asr	r2, r4, #31
   22bf8:	lsr	r1, r2, #27
   22bfc:	add	r2, r4, r1
   22c00:	and	r2, r2, #31
   22c04:	sub	r2, r2, r1
   22c08:	ldr	r1, [r5, r3, lsl #2]
   22c0c:	orr	r2, r1, ip, lsl r2
   22c10:	str	r2, [r5, r3, lsl #2]
   22c14:	b	22bc4 <__assert_fail@plt+0x11020>
   22c18:	mov	r0, #0
   22c1c:	pop	{r4, r5, r6, r7, r8, pc}
   22c20:	ldr	r1, [pc, #1760]	; 23308 <__assert_fail@plt+0x11764>
   22c24:	ldr	r0, [sp, #24]
   22c28:	bl	1170c <strcmp@plt>
   22c2c:	subs	r4, r0, #0
   22c30:	bne	22cfc <__assert_fail@plt+0x11158>
   22c34:	cmp	r6, #0
   22c38:	bne	22c48 <__assert_fail@plt+0x110a4>
   22c3c:	bl	11964 <__ctype_b_loc@plt>
   22c40:	mov	ip, #1
   22c44:	b	22cac <__assert_fail@plt+0x11108>
   22c48:	bl	11964 <__ctype_b_loc@plt>
   22c4c:	mov	r2, r6
   22c50:	mov	r3, #0
   22c54:	mov	r4, #1
   22c58:	b	22c6c <__assert_fail@plt+0x110c8>
   22c5c:	add	r3, r3, #2
   22c60:	add	r2, r2, #1
   22c64:	cmp	r3, #512	; 0x200
   22c68:	beq	22c98 <__assert_fail@plt+0x110f4>
   22c6c:	ldr	r1, [r0]
   22c70:	ldrh	r1, [r1, r3]
   22c74:	tst	r1, #1024	; 0x400
   22c78:	beq	22c5c <__assert_fail@plt+0x110b8>
   22c7c:	ldrb	r1, [r2]
   22c80:	asr	lr, r1, #5
   22c84:	and	r1, r1, #31
   22c88:	ldr	ip, [r5, lr, lsl #2]
   22c8c:	orr	r1, ip, r4, lsl r1
   22c90:	str	r1, [r5, lr, lsl #2]
   22c94:	b	22c5c <__assert_fail@plt+0x110b8>
   22c98:	mov	r0, #0
   22c9c:	pop	{r4, r5, r6, r7, r8, pc}
   22ca0:	add	r4, r4, #1
   22ca4:	cmp	r4, #256	; 0x100
   22ca8:	beq	22cf4 <__assert_fail@plt+0x11150>
   22cac:	ldr	r2, [r0]
   22cb0:	lsl	r3, r4, #1
   22cb4:	ldrh	r3, [r2, r3]
   22cb8:	tst	r3, #1024	; 0x400
   22cbc:	beq	22ca0 <__assert_fail@plt+0x110fc>
   22cc0:	add	r3, r4, #31
   22cc4:	cmp	r4, #0
   22cc8:	movge	r3, r4
   22ccc:	asr	r3, r3, #5
   22cd0:	asr	r2, r4, #31
   22cd4:	lsr	r1, r2, #27
   22cd8:	add	r2, r4, r1
   22cdc:	and	r2, r2, #31
   22ce0:	sub	r2, r2, r1
   22ce4:	ldr	r1, [r5, r3, lsl #2]
   22ce8:	orr	r2, r1, ip, lsl r2
   22cec:	str	r2, [r5, r3, lsl #2]
   22cf0:	b	22ca0 <__assert_fail@plt+0x110fc>
   22cf4:	mov	r0, #0
   22cf8:	pop	{r4, r5, r6, r7, r8, pc}
   22cfc:	ldr	r1, [pc, #1556]	; 23318 <__assert_fail@plt+0x11774>
   22d00:	ldr	r0, [sp, #24]
   22d04:	bl	1170c <strcmp@plt>
   22d08:	subs	r4, r0, #0
   22d0c:	bne	22dd8 <__assert_fail@plt+0x11234>
   22d10:	cmp	r6, #0
   22d14:	bne	22d24 <__assert_fail@plt+0x11180>
   22d18:	bl	11964 <__ctype_b_loc@plt>
   22d1c:	mov	ip, #1
   22d20:	b	22d88 <__assert_fail@plt+0x111e4>
   22d24:	bl	11964 <__ctype_b_loc@plt>
   22d28:	mov	r2, r6
   22d2c:	mov	r3, #0
   22d30:	mov	r4, #1
   22d34:	b	22d48 <__assert_fail@plt+0x111a4>
   22d38:	add	r3, r3, #2
   22d3c:	add	r2, r2, #1
   22d40:	cmp	r3, #512	; 0x200
   22d44:	beq	22d74 <__assert_fail@plt+0x111d0>
   22d48:	ldr	r1, [r0]
   22d4c:	ldrh	r1, [r1, r3]
   22d50:	tst	r1, #2048	; 0x800
   22d54:	beq	22d38 <__assert_fail@plt+0x11194>
   22d58:	ldrb	r1, [r2]
   22d5c:	asr	lr, r1, #5
   22d60:	and	r1, r1, #31
   22d64:	ldr	ip, [r5, lr, lsl #2]
   22d68:	orr	r1, ip, r4, lsl r1
   22d6c:	str	r1, [r5, lr, lsl #2]
   22d70:	b	22d38 <__assert_fail@plt+0x11194>
   22d74:	mov	r0, #0
   22d78:	pop	{r4, r5, r6, r7, r8, pc}
   22d7c:	add	r4, r4, #1
   22d80:	cmp	r4, #256	; 0x100
   22d84:	beq	22dd0 <__assert_fail@plt+0x1122c>
   22d88:	ldr	r2, [r0]
   22d8c:	lsl	r3, r4, #1
   22d90:	ldrh	r3, [r2, r3]
   22d94:	tst	r3, #2048	; 0x800
   22d98:	beq	22d7c <__assert_fail@plt+0x111d8>
   22d9c:	add	r3, r4, #31
   22da0:	cmp	r4, #0
   22da4:	movge	r3, r4
   22da8:	asr	r3, r3, #5
   22dac:	asr	r2, r4, #31
   22db0:	lsr	r1, r2, #27
   22db4:	add	r2, r4, r1
   22db8:	and	r2, r2, #31
   22dbc:	sub	r2, r2, r1
   22dc0:	ldr	r1, [r5, r3, lsl #2]
   22dc4:	orr	r2, r1, ip, lsl r2
   22dc8:	str	r2, [r5, r3, lsl #2]
   22dcc:	b	22d7c <__assert_fail@plt+0x111d8>
   22dd0:	mov	r0, #0
   22dd4:	pop	{r4, r5, r6, r7, r8, pc}
   22dd8:	ldr	r1, [pc, #1340]	; 2331c <__assert_fail@plt+0x11778>
   22ddc:	ldr	r0, [sp, #24]
   22de0:	bl	1170c <strcmp@plt>
   22de4:	subs	r4, r0, #0
   22de8:	bne	22eb4 <__assert_fail@plt+0x11310>
   22dec:	cmp	r6, #0
   22df0:	bne	22e00 <__assert_fail@plt+0x1125c>
   22df4:	bl	11964 <__ctype_b_loc@plt>
   22df8:	mov	ip, #1
   22dfc:	b	22e64 <__assert_fail@plt+0x112c0>
   22e00:	bl	11964 <__ctype_b_loc@plt>
   22e04:	mov	r2, r6
   22e08:	mov	r3, #0
   22e0c:	mov	r4, #1
   22e10:	b	22e24 <__assert_fail@plt+0x11280>
   22e14:	add	r3, r3, #2
   22e18:	add	r2, r2, #1
   22e1c:	cmp	r3, #512	; 0x200
   22e20:	beq	22e50 <__assert_fail@plt+0x112ac>
   22e24:	ldr	r1, [r0]
   22e28:	ldrh	r1, [r1, r3]
   22e2c:	tst	r1, #16384	; 0x4000
   22e30:	beq	22e14 <__assert_fail@plt+0x11270>
   22e34:	ldrb	r1, [r2]
   22e38:	asr	lr, r1, #5
   22e3c:	and	r1, r1, #31
   22e40:	ldr	ip, [r5, lr, lsl #2]
   22e44:	orr	r1, ip, r4, lsl r1
   22e48:	str	r1, [r5, lr, lsl #2]
   22e4c:	b	22e14 <__assert_fail@plt+0x11270>
   22e50:	mov	r0, #0
   22e54:	pop	{r4, r5, r6, r7, r8, pc}
   22e58:	add	r4, r4, #1
   22e5c:	cmp	r4, #256	; 0x100
   22e60:	beq	22eac <__assert_fail@plt+0x11308>
   22e64:	ldr	r2, [r0]
   22e68:	lsl	r3, r4, #1
   22e6c:	ldrh	r3, [r2, r3]
   22e70:	tst	r3, #16384	; 0x4000
   22e74:	beq	22e58 <__assert_fail@plt+0x112b4>
   22e78:	add	r3, r4, #31
   22e7c:	cmp	r4, #0
   22e80:	movge	r3, r4
   22e84:	asr	r3, r3, #5
   22e88:	asr	r2, r4, #31
   22e8c:	lsr	r1, r2, #27
   22e90:	add	r2, r4, r1
   22e94:	and	r2, r2, #31
   22e98:	sub	r2, r2, r1
   22e9c:	ldr	r1, [r5, r3, lsl #2]
   22ea0:	orr	r2, r1, ip, lsl r2
   22ea4:	str	r2, [r5, r3, lsl #2]
   22ea8:	b	22e58 <__assert_fail@plt+0x112b4>
   22eac:	mov	r0, #0
   22eb0:	pop	{r4, r5, r6, r7, r8, pc}
   22eb4:	ldr	r1, [pc, #1092]	; 23300 <__assert_fail@plt+0x1175c>
   22eb8:	ldr	r0, [sp, #24]
   22ebc:	bl	1170c <strcmp@plt>
   22ec0:	subs	r4, r0, #0
   22ec4:	bne	22f90 <__assert_fail@plt+0x113ec>
   22ec8:	cmp	r6, #0
   22ecc:	bne	22edc <__assert_fail@plt+0x11338>
   22ed0:	bl	11964 <__ctype_b_loc@plt>
   22ed4:	mov	ip, #1
   22ed8:	b	22f40 <__assert_fail@plt+0x1139c>
   22edc:	bl	11964 <__ctype_b_loc@plt>
   22ee0:	mov	r2, r6
   22ee4:	mov	r3, #0
   22ee8:	mov	r4, #1
   22eec:	b	22f00 <__assert_fail@plt+0x1135c>
   22ef0:	add	r3, r3, #2
   22ef4:	add	r2, r2, #1
   22ef8:	cmp	r3, #512	; 0x200
   22efc:	beq	22f2c <__assert_fail@plt+0x11388>
   22f00:	ldr	r1, [r0]
   22f04:	ldrh	r1, [r1, r3]
   22f08:	tst	r1, #256	; 0x100
   22f0c:	beq	22ef0 <__assert_fail@plt+0x1134c>
   22f10:	ldrb	r1, [r2]
   22f14:	asr	lr, r1, #5
   22f18:	and	r1, r1, #31
   22f1c:	ldr	ip, [r5, lr, lsl #2]
   22f20:	orr	r1, ip, r4, lsl r1
   22f24:	str	r1, [r5, lr, lsl #2]
   22f28:	b	22ef0 <__assert_fail@plt+0x1134c>
   22f2c:	mov	r0, #0
   22f30:	pop	{r4, r5, r6, r7, r8, pc}
   22f34:	add	r4, r4, #1
   22f38:	cmp	r4, #256	; 0x100
   22f3c:	beq	22f88 <__assert_fail@plt+0x113e4>
   22f40:	ldr	r2, [r0]
   22f44:	lsl	r3, r4, #1
   22f48:	ldrh	r3, [r2, r3]
   22f4c:	tst	r3, #256	; 0x100
   22f50:	beq	22f34 <__assert_fail@plt+0x11390>
   22f54:	add	r3, r4, #31
   22f58:	cmp	r4, #0
   22f5c:	movge	r3, r4
   22f60:	asr	r3, r3, #5
   22f64:	asr	r2, r4, #31
   22f68:	lsr	r1, r2, #27
   22f6c:	add	r2, r4, r1
   22f70:	and	r2, r2, #31
   22f74:	sub	r2, r2, r1
   22f78:	ldr	r1, [r5, r3, lsl #2]
   22f7c:	orr	r2, r1, ip, lsl r2
   22f80:	str	r2, [r5, r3, lsl #2]
   22f84:	b	22f34 <__assert_fail@plt+0x11390>
   22f88:	mov	r0, #0
   22f8c:	pop	{r4, r5, r6, r7, r8, pc}
   22f90:	ldr	r1, [pc, #904]	; 23320 <__assert_fail@plt+0x1177c>
   22f94:	ldr	r0, [sp, #24]
   22f98:	bl	1170c <strcmp@plt>
   22f9c:	subs	r4, r0, #0
   22fa0:	bne	2306c <__assert_fail@plt+0x114c8>
   22fa4:	cmp	r6, #0
   22fa8:	beq	23004 <__assert_fail@plt+0x11460>
   22fac:	bl	11964 <__ctype_b_loc@plt>
   22fb0:	mov	r2, r6
   22fb4:	mov	r3, #0
   22fb8:	mov	r4, #1
   22fbc:	b	22fd0 <__assert_fail@plt+0x1142c>
   22fc0:	add	r3, r3, #2
   22fc4:	add	r2, r2, #1
   22fc8:	cmp	r3, #512	; 0x200
   22fcc:	beq	22ffc <__assert_fail@plt+0x11458>
   22fd0:	ldr	r1, [r0]
   22fd4:	ldrh	r1, [r1, r3]
   22fd8:	tst	r1, #1
   22fdc:	beq	22fc0 <__assert_fail@plt+0x1141c>
   22fe0:	ldrb	r1, [r2]
   22fe4:	asr	lr, r1, #5
   22fe8:	and	r1, r1, #31
   22fec:	ldr	ip, [r5, lr, lsl #2]
   22ff0:	orr	r1, ip, r4, lsl r1
   22ff4:	str	r1, [r5, lr, lsl #2]
   22ff8:	b	22fc0 <__assert_fail@plt+0x1141c>
   22ffc:	mov	r0, #0
   23000:	pop	{r4, r5, r6, r7, r8, pc}
   23004:	bl	11964 <__ctype_b_loc@plt>
   23008:	mov	ip, #1
   2300c:	b	2301c <__assert_fail@plt+0x11478>
   23010:	add	r4, r4, #1
   23014:	cmp	r4, #256	; 0x100
   23018:	beq	23064 <__assert_fail@plt+0x114c0>
   2301c:	ldr	r2, [r0]
   23020:	lsl	r3, r4, #1
   23024:	ldrh	r3, [r2, r3]
   23028:	tst	r3, #1
   2302c:	beq	23010 <__assert_fail@plt+0x1146c>
   23030:	add	r3, r4, #31
   23034:	cmp	r4, #0
   23038:	movge	r3, r4
   2303c:	asr	r3, r3, #5
   23040:	asr	r2, r4, #31
   23044:	lsr	r1, r2, #27
   23048:	add	r2, r4, r1
   2304c:	and	r2, r2, #31
   23050:	sub	r2, r2, r1
   23054:	ldr	r1, [r5, r3, lsl #2]
   23058:	orr	r2, r1, ip, lsl r2
   2305c:	str	r2, [r5, r3, lsl #2]
   23060:	b	23010 <__assert_fail@plt+0x1146c>
   23064:	mov	r0, #0
   23068:	pop	{r4, r5, r6, r7, r8, pc}
   2306c:	ldr	r1, [pc, #688]	; 23324 <__assert_fail@plt+0x11780>
   23070:	ldr	r0, [sp, #24]
   23074:	bl	1170c <strcmp@plt>
   23078:	subs	r4, r0, #0
   2307c:	bne	23148 <__assert_fail@plt+0x115a4>
   23080:	cmp	r6, #0
   23084:	beq	230e0 <__assert_fail@plt+0x1153c>
   23088:	bl	11964 <__ctype_b_loc@plt>
   2308c:	mov	r2, r6
   23090:	mov	r3, #0
   23094:	mov	r4, #1
   23098:	b	230ac <__assert_fail@plt+0x11508>
   2309c:	add	r3, r3, #2
   230a0:	add	r2, r2, #1
   230a4:	cmp	r3, #512	; 0x200
   230a8:	beq	230d8 <__assert_fail@plt+0x11534>
   230ac:	ldr	r1, [r0]
   230b0:	ldrsh	r1, [r1, r3]
   230b4:	cmp	r1, #0
   230b8:	bge	2309c <__assert_fail@plt+0x114f8>
   230bc:	ldrb	r1, [r2]
   230c0:	asr	lr, r1, #5
   230c4:	and	r1, r1, #31
   230c8:	ldr	ip, [r5, lr, lsl #2]
   230cc:	orr	r1, ip, r4, lsl r1
   230d0:	str	r1, [r5, lr, lsl #2]
   230d4:	b	2309c <__assert_fail@plt+0x114f8>
   230d8:	mov	r0, #0
   230dc:	pop	{r4, r5, r6, r7, r8, pc}
   230e0:	bl	11964 <__ctype_b_loc@plt>
   230e4:	mov	ip, #1
   230e8:	b	230f8 <__assert_fail@plt+0x11554>
   230ec:	add	r4, r4, #1
   230f0:	cmp	r4, #256	; 0x100
   230f4:	beq	23140 <__assert_fail@plt+0x1159c>
   230f8:	ldr	r2, [r0]
   230fc:	lsl	r3, r4, #1
   23100:	ldrsh	r3, [r2, r3]
   23104:	cmp	r3, #0
   23108:	bge	230ec <__assert_fail@plt+0x11548>
   2310c:	add	r3, r4, #31
   23110:	cmp	r4, #0
   23114:	movge	r3, r4
   23118:	asr	r3, r3, #5
   2311c:	asr	r2, r4, #31
   23120:	lsr	r1, r2, #27
   23124:	add	r2, r4, r1
   23128:	and	r2, r2, #31
   2312c:	sub	r2, r2, r1
   23130:	ldr	r1, [r5, r3, lsl #2]
   23134:	orr	r2, r1, ip, lsl r2
   23138:	str	r2, [r5, r3, lsl #2]
   2313c:	b	230ec <__assert_fail@plt+0x11548>
   23140:	mov	r0, #0
   23144:	pop	{r4, r5, r6, r7, r8, pc}
   23148:	ldr	r1, [pc, #472]	; 23328 <__assert_fail@plt+0x11784>
   2314c:	ldr	r0, [sp, #24]
   23150:	bl	1170c <strcmp@plt>
   23154:	subs	r4, r0, #0
   23158:	bne	2321c <__assert_fail@plt+0x11678>
   2315c:	cmp	r6, #0
   23160:	beq	231b4 <__assert_fail@plt+0x11610>
   23164:	bl	11964 <__ctype_b_loc@plt>
   23168:	mov	r2, r6
   2316c:	mov	r3, #0
   23170:	mov	r4, #1
   23174:	ldr	r1, [r0]
   23178:	ldrh	r1, [r1, r3]
   2317c:	tst	r1, #4
   23180:	beq	2319c <__assert_fail@plt+0x115f8>
   23184:	ldrb	r1, [r2]
   23188:	asr	lr, r1, #5
   2318c:	and	r1, r1, #31
   23190:	ldr	ip, [r5, lr, lsl #2]
   23194:	orr	r1, ip, r4, lsl r1
   23198:	str	r1, [r5, lr, lsl #2]
   2319c:	add	r3, r3, #2
   231a0:	add	r2, r2, #1
   231a4:	cmp	r3, #512	; 0x200
   231a8:	bne	23174 <__assert_fail@plt+0x115d0>
   231ac:	mov	r0, #0
   231b0:	pop	{r4, r5, r6, r7, r8, pc}
   231b4:	bl	11964 <__ctype_b_loc@plt>
   231b8:	mov	ip, #1
   231bc:	b	231cc <__assert_fail@plt+0x11628>
   231c0:	add	r4, r4, #1
   231c4:	cmp	r4, #256	; 0x100
   231c8:	beq	23214 <__assert_fail@plt+0x11670>
   231cc:	ldr	r2, [r0]
   231d0:	lsl	r3, r4, #1
   231d4:	ldrh	r3, [r2, r3]
   231d8:	tst	r3, #4
   231dc:	beq	231c0 <__assert_fail@plt+0x1161c>
   231e0:	add	r3, r4, #31
   231e4:	cmp	r4, #0
   231e8:	movge	r3, r4
   231ec:	asr	r3, r3, #5
   231f0:	asr	r2, r4, #31
   231f4:	lsr	r1, r2, #27
   231f8:	add	r2, r4, r1
   231fc:	and	r2, r2, #31
   23200:	sub	r2, r2, r1
   23204:	ldr	r1, [r5, r3, lsl #2]
   23208:	orr	r2, r1, ip, lsl r2
   2320c:	str	r2, [r5, r3, lsl #2]
   23210:	b	231c0 <__assert_fail@plt+0x1161c>
   23214:	mov	r0, #0
   23218:	pop	{r4, r5, r6, r7, r8, pc}
   2321c:	ldr	r1, [pc, #264]	; 2332c <__assert_fail@plt+0x11788>
   23220:	ldr	r0, [sp, #24]
   23224:	bl	1170c <strcmp@plt>
   23228:	subs	r4, r0, #0
   2322c:	bne	232f8 <__assert_fail@plt+0x11754>
   23230:	cmp	r6, #0
   23234:	beq	23288 <__assert_fail@plt+0x116e4>
   23238:	bl	11964 <__ctype_b_loc@plt>
   2323c:	mov	r2, r6
   23240:	mov	r3, #0
   23244:	mov	r4, #1
   23248:	ldr	r1, [r0]
   2324c:	ldrh	r1, [r1, r3]
   23250:	tst	r1, #4096	; 0x1000
   23254:	beq	23270 <__assert_fail@plt+0x116cc>
   23258:	ldrb	r1, [r2]
   2325c:	asr	lr, r1, #5
   23260:	and	r1, r1, #31
   23264:	ldr	ip, [r5, lr, lsl #2]
   23268:	orr	r1, ip, r4, lsl r1
   2326c:	str	r1, [r5, lr, lsl #2]
   23270:	add	r3, r3, #2
   23274:	add	r2, r2, #1
   23278:	cmp	r3, #512	; 0x200
   2327c:	bne	23248 <__assert_fail@plt+0x116a4>
   23280:	mov	r0, #0
   23284:	pop	{r4, r5, r6, r7, r8, pc}
   23288:	bl	11964 <__ctype_b_loc@plt>
   2328c:	mov	ip, #1
   23290:	b	232a0 <__assert_fail@plt+0x116fc>
   23294:	add	r4, r4, #1
   23298:	cmp	r4, #256	; 0x100
   2329c:	beq	232e8 <__assert_fail@plt+0x11744>
   232a0:	ldr	r2, [r0]
   232a4:	lsl	r3, r4, #1
   232a8:	ldrh	r3, [r2, r3]
   232ac:	tst	r3, #4096	; 0x1000
   232b0:	beq	23294 <__assert_fail@plt+0x116f0>
   232b4:	add	r3, r4, #31
   232b8:	cmp	r4, #0
   232bc:	movge	r3, r4
   232c0:	asr	r3, r3, #5
   232c4:	asr	r2, r4, #31
   232c8:	lsr	r1, r2, #27
   232cc:	add	r2, r4, r1
   232d0:	and	r2, r2, #31
   232d4:	sub	r2, r2, r1
   232d8:	ldr	r1, [r5, r3, lsl #2]
   232dc:	orr	r2, r1, ip, lsl r2
   232e0:	str	r2, [r5, r3, lsl #2]
   232e4:	b	23294 <__assert_fail@plt+0x116f0>
   232e8:	mov	r0, #0
   232ec:	pop	{r4, r5, r6, r7, r8, pc}
   232f0:	mov	r0, #12
   232f4:	pop	{r4, r5, r6, r7, r8, pc}
   232f8:	mov	r0, #4
   232fc:	pop	{r4, r5, r6, r7, r8, pc}
   23300:	andeq	r0, r3, r4, ror #24
   23304:	andeq	r0, r3, ip, ror #24
   23308:	andeq	r0, r3, ip, asr ip
   2330c:	andeq	r0, r3, r4, ror ip
   23310:	andeq	r0, r3, ip, ror ip
   23314:	andeq	r0, r3, r4, lsl #25
   23318:	andeq	r0, r3, ip, lsl #25
   2331c:	muleq	r3, r4, ip
   23320:	muleq	r3, ip, ip
   23324:	andeq	r0, r3, r4, lsr #25
   23328:	andeq	r0, r3, ip, lsr #25
   2332c:			; <UNDEFINED> instruction: 0x00030cb4
   23330:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23334:	sub	sp, sp, #24
   23338:	mov	r6, r0
   2333c:	mov	r9, r1
   23340:	mov	sl, r2
   23344:	mov	r5, r3
   23348:	ldrb	r8, [sp, #56]	; 0x38
   2334c:	mov	r3, #0
   23350:	str	r3, [sp, #20]
   23354:	mov	r1, #1
   23358:	mov	r0, #32
   2335c:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   23360:	subs	r4, r0, #0
   23364:	beq	234cc <__assert_fail@plt+0x11928>
   23368:	mov	r1, #1
   2336c:	mov	r0, #40	; 0x28
   23370:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   23374:	subs	r7, r0, #0
   23378:	beq	234e0 <__assert_fail@plt+0x1193c>
   2337c:	ldrb	r2, [r7, #16]
   23380:	and	r3, r8, #1
   23384:	bic	r2, r2, #1
   23388:	orr	r3, r3, r2
   2338c:	strb	r3, [r7, #16]
   23390:	mov	r3, #0
   23394:	str	r3, [sp, #4]
   23398:	str	sl, [sp]
   2339c:	add	r3, sp, #20
   233a0:	mov	r2, r7
   233a4:	mov	r1, r4
   233a8:	mov	r0, r9
   233ac:	bl	227fc <__assert_fail@plt+0x10c58>
   233b0:	subs	r9, r0, #0
   233b4:	bne	234fc <__assert_fail@plt+0x11958>
   233b8:	ldrb	r3, [r5]
   233bc:	cmp	r3, #0
   233c0:	movne	r0, #1
   233c4:	beq	233e8 <__assert_fail@plt+0x11844>
   233c8:	lsr	r1, r3, #5
   233cc:	and	r3, r3, #31
   233d0:	ldr	r2, [r4, r1, lsl #2]
   233d4:	orr	r3, r2, r0, lsl r3
   233d8:	str	r3, [r4, r1, lsl #2]
   233dc:	ldrb	r3, [r5, #1]!
   233e0:	cmp	r3, #0
   233e4:	bne	233c8 <__assert_fail@plt+0x11824>
   233e8:	cmp	r8, #0
   233ec:	beq	2340c <__assert_fail@plt+0x11868>
   233f0:	sub	r3, r4, #4
   233f4:	add	r1, r4, #28
   233f8:	ldr	r2, [r3, #4]
   233fc:	mvn	r2, r2
   23400:	str	r2, [r3, #4]!
   23404:	cmp	r3, r1
   23408:	bne	233f8 <__assert_fail@plt+0x11854>
   2340c:	ldr	r3, [r6, #92]	; 0x5c
   23410:	cmp	r3, #1
   23414:	ble	23440 <__assert_fail@plt+0x1189c>
   23418:	sub	r3, r4, #4
   2341c:	ldr	r1, [r6, #60]	; 0x3c
   23420:	sub	r1, r1, #4
   23424:	add	ip, r4, #28
   23428:	ldr	r2, [r3, #4]
   2342c:	ldr	r0, [r1, #4]!
   23430:	and	r2, r2, r0
   23434:	str	r2, [r3, #4]!
   23438:	cmp	r3, ip
   2343c:	bne	23428 <__assert_fail@plt+0x11884>
   23440:	mov	r1, #0
   23444:	str	r1, [sp, #16]
   23448:	str	r4, [sp, #12]
   2344c:	mov	r3, #3
   23450:	strb	r3, [sp, #16]
   23454:	add	r3, sp, #12
   23458:	mov	r2, r1
   2345c:	mov	r0, r6
   23460:	bl	1f094 <__assert_fail@plt+0xd4f0>
   23464:	subs	r5, r0, #0
   23468:	beq	23528 <__assert_fail@plt+0x11984>
   2346c:	ldr	r3, [r6, #92]	; 0x5c
   23470:	cmp	r3, #1
   23474:	ble	2351c <__assert_fail@plt+0x11978>
   23478:	mov	r3, #6
   2347c:	strb	r3, [sp, #16]
   23480:	add	r3, sp, #24
   23484:	str	r7, [r3, #-12]!
   23488:	ldrb	r2, [r6, #88]	; 0x58
   2348c:	orr	r2, r2, #2
   23490:	strb	r2, [r6, #88]	; 0x58
   23494:	mov	r2, #0
   23498:	mov	r1, r2
   2349c:	mov	r0, r6
   234a0:	bl	1f094 <__assert_fail@plt+0xd4f0>
   234a4:	subs	r2, r0, #0
   234a8:	beq	23528 <__assert_fail@plt+0x11984>
   234ac:	mov	r3, #10
   234b0:	mov	r1, r5
   234b4:	mov	r0, r6
   234b8:	bl	1f208 <__assert_fail@plt+0xd664>
   234bc:	mov	r5, r0
   234c0:	mov	r0, r5
   234c4:	add	sp, sp, #24
   234c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   234cc:	mov	r3, #12
   234d0:	ldr	r2, [sp, #60]	; 0x3c
   234d4:	str	r3, [r2]
   234d8:	mov	r5, #0
   234dc:	b	234c0 <__assert_fail@plt+0x1191c>
   234e0:	mov	r0, r4
   234e4:	bl	17204 <__assert_fail@plt+0x5660>
   234e8:	mov	r3, #12
   234ec:	ldr	r2, [sp, #60]	; 0x3c
   234f0:	str	r3, [r2]
   234f4:	mov	r5, #0
   234f8:	b	234c0 <__assert_fail@plt+0x1191c>
   234fc:	mov	r0, r4
   23500:	bl	17204 <__assert_fail@plt+0x5660>
   23504:	mov	r0, r7
   23508:	bl	20c50 <__assert_fail@plt+0xf0ac>
   2350c:	ldr	r3, [sp, #60]	; 0x3c
   23510:	str	r9, [r3]
   23514:	mov	r5, #0
   23518:	b	234c0 <__assert_fail@plt+0x1191c>
   2351c:	mov	r0, r7
   23520:	bl	20c50 <__assert_fail@plt+0xf0ac>
   23524:	b	234c0 <__assert_fail@plt+0x1191c>
   23528:	mov	r0, r4
   2352c:	bl	17204 <__assert_fail@plt+0x5660>
   23530:	mov	r0, r7
   23534:	bl	20c50 <__assert_fail@plt+0xf0ac>
   23538:	mov	r3, #12
   2353c:	ldr	r2, [sp, #60]	; 0x3c
   23540:	str	r3, [r2]
   23544:	mov	r5, #0
   23548:	b	234c0 <__assert_fail@plt+0x1191c>
   2354c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   23550:	ldr	r9, [r0]
   23554:	add	ip, r9, r1, lsl #3
   23558:	ldrb	r8, [ip, #4]
   2355c:	cmp	r8, #7
   23560:	beq	235b4 <__assert_fail@plt+0x11a10>
   23564:	mov	r4, r3
   23568:	mov	r5, r2
   2356c:	mov	r7, r1
   23570:	mov	r6, r0
   23574:	mov	r1, r3
   23578:	mov	r0, r2
   2357c:	bl	1e314 <__assert_fail@plt+0xc770>
   23580:	mov	sl, r0
   23584:	cmp	r8, #5
   23588:	beq	236cc <__assert_fail@plt+0x11b28>
   2358c:	cmp	r8, #6
   23590:	movne	r8, #0
   23594:	moveq	r8, #1
   23598:	cmp	r0, #1
   2359c:	movle	r8, #0
   235a0:	cmp	r8, #0
   235a4:	moveq	sl, #0
   235a8:	bne	23714 <__assert_fail@plt+0x11b70>
   235ac:	mov	r0, sl
   235b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   235b4:	ldr	r0, [r2, #4]
   235b8:	ldrb	r1, [r0, r3]
   235bc:	cmp	r1, #193	; 0xc1
   235c0:	movls	sl, #0
   235c4:	bls	235ac <__assert_fail@plt+0x11a08>
   235c8:	ldr	ip, [r2, #48]	; 0x30
   235cc:	add	r2, r3, #2
   235d0:	cmp	r2, ip
   235d4:	movgt	sl, #0
   235d8:	bgt	235ac <__assert_fail@plt+0x11a08>
   235dc:	add	lr, r3, #1
   235e0:	add	r2, r0, lr
   235e4:	ldrb	lr, [r0, lr]
   235e8:	cmp	r1, #223	; 0xdf
   235ec:	bhi	23604 <__assert_fail@plt+0x11a60>
   235f0:	eor	lr, lr, #128	; 0x80
   235f4:	cmp	lr, #63	; 0x3f
   235f8:	movls	sl, #2
   235fc:	movhi	sl, #0
   23600:	b	235ac <__assert_fail@plt+0x11a08>
   23604:	cmp	r1, #239	; 0xef
   23608:	bhi	23668 <__assert_fail@plt+0x11ac4>
   2360c:	cmp	lr, #159	; 0x9f
   23610:	cmpls	r1, #224	; 0xe0
   23614:	movne	sl, #3
   23618:	beq	2384c <__assert_fail@plt+0x11ca8>
   2361c:	add	r1, sl, r3
   23620:	cmp	ip, r1
   23624:	blt	2385c <__assert_fail@plt+0x11cb8>
   23628:	add	r3, r0, r3
   2362c:	ldrb	r3, [r3, #1]
   23630:	eor	r3, r3, #128	; 0x80
   23634:	cmp	r3, #63	; 0x3f
   23638:	bhi	23854 <__assert_fail@plt+0x11cb0>
   2363c:	mov	r1, r2
   23640:	mov	r2, #1
   23644:	add	r2, r2, #1
   23648:	cmp	sl, r2
   2364c:	ble	235ac <__assert_fail@plt+0x11a08>
   23650:	ldrb	r3, [r1, #1]!
   23654:	eor	r3, r3, #128	; 0x80
   23658:	cmp	r3, #63	; 0x3f
   2365c:	bls	23644 <__assert_fail@plt+0x11aa0>
   23660:	mov	sl, #0
   23664:	b	235ac <__assert_fail@plt+0x11a08>
   23668:	cmp	r1, #247	; 0xf7
   2366c:	bhi	23688 <__assert_fail@plt+0x11ae4>
   23670:	cmp	lr, #143	; 0x8f
   23674:	cmpls	r1, #240	; 0xf0
   23678:	movne	sl, #4
   2367c:	bne	2361c <__assert_fail@plt+0x11a78>
   23680:	mov	sl, #0
   23684:	b	235ac <__assert_fail@plt+0x11a08>
   23688:	cmp	r1, #251	; 0xfb
   2368c:	bhi	236a8 <__assert_fail@plt+0x11b04>
   23690:	cmp	lr, #135	; 0x87
   23694:	cmpls	r1, #248	; 0xf8
   23698:	movne	sl, #5
   2369c:	bne	2361c <__assert_fail@plt+0x11a78>
   236a0:	mov	sl, #0
   236a4:	b	235ac <__assert_fail@plt+0x11a08>
   236a8:	cmp	r1, #253	; 0xfd
   236ac:	movhi	sl, #0
   236b0:	bhi	235ac <__assert_fail@plt+0x11a08>
   236b4:	cmp	lr, #131	; 0x83
   236b8:	cmpls	r1, #252	; 0xfc
   236bc:	movne	sl, #6
   236c0:	bne	2361c <__assert_fail@plt+0x11a78>
   236c4:	mov	sl, #0
   236c8:	b	235ac <__assert_fail@plt+0x11a08>
   236cc:	cmp	r0, #1
   236d0:	movle	sl, #0
   236d4:	ble	235ac <__assert_fail@plt+0x11a08>
   236d8:	ldr	r3, [r6, #128]	; 0x80
   236dc:	tst	r3, #64	; 0x40
   236e0:	bne	236f8 <__assert_fail@plt+0x11b54>
   236e4:	ldr	r2, [r5, #4]
   236e8:	ldrb	r2, [r2, r4]
   236ec:	cmp	r2, #10
   236f0:	moveq	sl, #0
   236f4:	beq	235ac <__assert_fail@plt+0x11a08>
   236f8:	tst	r3, #128	; 0x80
   236fc:	beq	235ac <__assert_fail@plt+0x11a08>
   23700:	ldr	r3, [r5, #4]
   23704:	ldrb	r3, [r3, r4]
   23708:	cmp	r3, #0
   2370c:	moveq	sl, #0
   23710:	b	235ac <__assert_fail@plt+0x11a08>
   23714:	ldr	r6, [r9, r7, lsl #3]
   23718:	ldr	r3, [r6, #32]
   2371c:	cmp	r3, #0
   23720:	bne	23760 <__assert_fail@plt+0x11bbc>
   23724:	ldr	r3, [r6, #36]	; 0x24
   23728:	cmp	r3, #0
   2372c:	bne	23760 <__assert_fail@plt+0x11bbc>
   23730:	ldr	r3, [r6, #20]
   23734:	cmp	r3, #0
   23738:	moveq	r4, #0
   2373c:	beq	23804 <__assert_fail@plt+0x11c60>
   23740:	mov	r1, r4
   23744:	mov	r0, r5
   23748:	bl	1e388 <__assert_fail@plt+0xc7e4>
   2374c:	mov	r4, r0
   23750:	ldr	r0, [r6, #20]
   23754:	cmp	r0, #0
   23758:	bgt	2377c <__assert_fail@plt+0x11bd8>
   2375c:	b	23804 <__assert_fail@plt+0x11c60>
   23760:	mov	r1, r4
   23764:	mov	r0, r5
   23768:	bl	1e388 <__assert_fail@plt+0xc7e4>
   2376c:	mov	r4, r0
   23770:	ldr	r0, [r6, #20]
   23774:	cmp	r0, #0
   23778:	ble	237cc <__assert_fail@plt+0x11c28>
   2377c:	ldr	r2, [r6]
   23780:	ldr	r3, [r2]
   23784:	cmp	r4, r3
   23788:	beq	237a8 <__assert_fail@plt+0x11c04>
   2378c:	mov	r3, #0
   23790:	add	r3, r3, #1
   23794:	cmp	r0, r3
   23798:	beq	237cc <__assert_fail@plt+0x11c28>
   2379c:	ldr	r1, [r2, #4]!
   237a0:	cmp	r4, r1
   237a4:	bne	23790 <__assert_fail@plt+0x11bec>
   237a8:	ldrb	r3, [r6, #16]
   237ac:	tst	r3, #1
   237b0:	beq	235ac <__assert_fail@plt+0x11a08>
   237b4:	cmp	sl, #0
   237b8:	movgt	sl, #0
   237bc:	bgt	235ac <__assert_fail@plt+0x11a08>
   237c0:	cmp	sl, #1
   237c4:	movlt	sl, #1
   237c8:	b	235ac <__assert_fail@plt+0x11a08>
   237cc:	ldr	r3, [r6, #36]	; 0x24
   237d0:	cmp	r3, #0
   237d4:	ble	23804 <__assert_fail@plt+0x11c60>
   237d8:	mov	r5, #0
   237dc:	ldr	r3, [r6, #12]
   237e0:	ldr	r1, [r3, r5, lsl #2]
   237e4:	mov	r0, r4
   237e8:	bl	11700 <iswctype@plt>
   237ec:	cmp	r0, #0
   237f0:	bne	237a8 <__assert_fail@plt+0x11c04>
   237f4:	add	r5, r5, #1
   237f8:	ldr	r3, [r6, #36]	; 0x24
   237fc:	cmp	r3, r5
   23800:	bgt	237dc <__assert_fail@plt+0x11c38>
   23804:	ldr	r0, [r6, #32]
   23808:	cmp	r0, #0
   2380c:	ble	23864 <__assert_fail@plt+0x11cc0>
   23810:	ldr	r2, [r6, #4]
   23814:	sub	r2, r2, #4
   23818:	mov	r3, #0
   2381c:	b	2382c <__assert_fail@plt+0x11c88>
   23820:	add	r3, r3, #1
   23824:	cmp	r0, r3
   23828:	beq	23864 <__assert_fail@plt+0x11cc0>
   2382c:	ldr	r1, [r2, #4]!
   23830:	cmp	r4, r1
   23834:	bcc	23820 <__assert_fail@plt+0x11c7c>
   23838:	ldr	r1, [r6, #8]
   2383c:	ldr	r1, [r1, r3, lsl #2]
   23840:	cmp	r4, r1
   23844:	bhi	23820 <__assert_fail@plt+0x11c7c>
   23848:	b	237a8 <__assert_fail@plt+0x11c04>
   2384c:	mov	sl, #0
   23850:	b	235ac <__assert_fail@plt+0x11a08>
   23854:	mov	sl, #0
   23858:	b	235ac <__assert_fail@plt+0x11a08>
   2385c:	mov	sl, #0
   23860:	b	235ac <__assert_fail@plt+0x11a08>
   23864:	ldrb	r3, [r6, #16]
   23868:	tst	r3, #1
   2386c:	bne	237c0 <__assert_fail@plt+0x11c1c>
   23870:	mov	sl, #0
   23874:	b	235ac <__assert_fail@plt+0x11a08>
   23878:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2387c:	sub	sp, sp, #28
   23880:	str	r3, [sp, #4]
   23884:	add	r3, r1, r1, lsl #1
   23888:	ldr	r6, [r0, #28]
   2388c:	add	r6, r6, r3, lsl #2
   23890:	mov	r3, #0
   23894:	str	r3, [sp, #12]
   23898:	str	r3, [sp, #16]
   2389c:	str	r3, [sp, #20]
   238a0:	ldr	r3, [r6, #4]
   238a4:	cmp	r3, #0
   238a8:	ble	23924 <__assert_fail@plt+0x11d80>
   238ac:	mov	r7, r0
   238b0:	mov	r8, r1
   238b4:	mov	fp, r2
   238b8:	mov	r5, #0
   238bc:	b	23990 <__assert_fail@plt+0x11dec>
   238c0:	ldr	r0, [sp, #20]
   238c4:	bl	17204 <__assert_fail@plt+0x5660>
   238c8:	b	23930 <__assert_fail@plt+0x11d8c>
   238cc:	cmp	r3, #0
   238d0:	ble	23924 <__assert_fail@plt+0x11d80>
   238d4:	mov	r4, #0
   238d8:	b	238ec <__assert_fail@plt+0x11d48>
   238dc:	add	r4, r4, #1
   238e0:	ldr	r3, [r6, #4]
   238e4:	cmp	r3, r4
   238e8:	ble	23924 <__assert_fail@plt+0x11d80>
   238ec:	ldr	r3, [r6, #8]
   238f0:	ldr	r5, [r3, r4, lsl #2]
   238f4:	mov	r1, r5
   238f8:	add	r0, sp, #12
   238fc:	bl	1e46c <__assert_fail@plt+0xc8c8>
   23900:	cmp	r0, #0
   23904:	bne	238dc <__assert_fail@plt+0x11d38>
   23908:	mov	r1, r5
   2390c:	mov	r0, fp
   23910:	bl	1e46c <__assert_fail@plt+0xc8c8>
   23914:	sub	r1, r0, #1
   23918:	mov	r0, fp
   2391c:	bl	1e504 <__assert_fail@plt+0xc960>
   23920:	b	238dc <__assert_fail@plt+0x11d38>
   23924:	ldr	r0, [sp, #20]
   23928:	bl	17204 <__assert_fail@plt+0x5660>
   2392c:	mov	r4, #0
   23930:	mov	r0, r4
   23934:	add	sp, sp, #28
   23938:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2393c:	mov	r1, r9
   23940:	mov	r0, r6
   23944:	bl	1e46c <__assert_fail@plt+0xc8c8>
   23948:	cmp	r0, #0
   2394c:	bne	23980 <__assert_fail@plt+0x11ddc>
   23950:	mov	r1, r9
   23954:	mov	r0, fp
   23958:	bl	1e46c <__assert_fail@plt+0xc8c8>
   2395c:	cmp	r0, #0
   23960:	beq	23980 <__assert_fail@plt+0x11ddc>
   23964:	ldr	r2, [r7, #28]
   23968:	add	r2, r2, r4
   2396c:	ldr	r1, [sp, #4]
   23970:	add	r0, sp, #12
   23974:	bl	1f6e8 <__assert_fail@plt+0xdb44>
   23978:	subs	r4, r0, #0
   2397c:	bne	238c0 <__assert_fail@plt+0x11d1c>
   23980:	add	r5, r5, #1
   23984:	ldr	r3, [r6, #4]
   23988:	cmp	r3, r5
   2398c:	ble	238cc <__assert_fail@plt+0x11d28>
   23990:	ldr	r3, [r6, #8]
   23994:	ldr	r4, [r3, r5, lsl #2]
   23998:	cmp	r8, r4
   2399c:	beq	23980 <__assert_fail@plt+0x11ddc>
   239a0:	ldr	r3, [r7]
   239a4:	add	r3, r3, r4, lsl #3
   239a8:	ldrb	r3, [r3, #4]
   239ac:	tst	r3, #8
   239b0:	beq	23980 <__assert_fail@plt+0x11ddc>
   239b4:	add	r4, r4, r4, lsl #1
   239b8:	lsl	r4, r4, #2
   239bc:	ldr	r3, [r7, #20]
   239c0:	add	r3, r3, r4
   239c4:	ldr	r2, [r3, #8]
   239c8:	ldr	r9, [r2]
   239cc:	ldr	r3, [r3, #4]
   239d0:	cmp	r3, #1
   239d4:	ble	2393c <__assert_fail@plt+0x11d98>
   239d8:	ldr	sl, [r2, #4]
   239dc:	mov	r1, r9
   239e0:	mov	r0, r6
   239e4:	bl	1e46c <__assert_fail@plt+0xc8c8>
   239e8:	cmp	r0, #0
   239ec:	bne	23a04 <__assert_fail@plt+0x11e60>
   239f0:	mov	r1, r9
   239f4:	mov	r0, fp
   239f8:	bl	1e46c <__assert_fail@plt+0xc8c8>
   239fc:	cmp	r0, #0
   23a00:	bne	23964 <__assert_fail@plt+0x11dc0>
   23a04:	cmp	sl, #0
   23a08:	ble	23980 <__assert_fail@plt+0x11ddc>
   23a0c:	mov	r1, sl
   23a10:	mov	r0, r6
   23a14:	bl	1e46c <__assert_fail@plt+0xc8c8>
   23a18:	cmp	r0, #0
   23a1c:	bne	23980 <__assert_fail@plt+0x11ddc>
   23a20:	mov	r1, sl
   23a24:	mov	r0, fp
   23a28:	bl	1e46c <__assert_fail@plt+0xc8c8>
   23a2c:	cmp	r0, #0
   23a30:	beq	23980 <__assert_fail@plt+0x11ddc>
   23a34:	b	23964 <__assert_fail@plt+0x11dc0>
   23a38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23a3c:	sub	sp, sp, #36	; 0x24
   23a40:	mov	r4, r0
   23a44:	mov	r6, r1
   23a48:	mov	r7, r2
   23a4c:	ldr	r5, [r0, #24]
   23a50:	cmp	r5, r1
   23a54:	suble	r5, r1, r5
   23a58:	ble	23abc <__assert_fail@plt+0x11f18>
   23a5c:	ldr	r3, [r0, #80]	; 0x50
   23a60:	cmp	r3, #1
   23a64:	movgt	r3, #0
   23a68:	strgt	r3, [r0, #16]
   23a6c:	strgt	r3, [r0, #20]
   23a70:	ldr	r3, [r0, #44]	; 0x2c
   23a74:	str	r3, [r0, #48]	; 0x30
   23a78:	ldr	r3, [r0, #52]	; 0x34
   23a7c:	str	r3, [r0, #56]	; 0x38
   23a80:	mov	r3, #0
   23a84:	str	r3, [r0, #28]
   23a88:	str	r3, [r0, #24]
   23a8c:	str	r3, [r0, #32]
   23a90:	strb	r3, [r0, #76]	; 0x4c
   23a94:	and	r3, r2, #1
   23a98:	cmp	r3, #0
   23a9c:	movne	r3, #4
   23aa0:	moveq	r3, #6
   23aa4:	str	r3, [r0, #60]	; 0x3c
   23aa8:	ldrb	r3, [r0, #75]	; 0x4b
   23aac:	cmp	r3, #0
   23ab0:	ldreq	r3, [r0]
   23ab4:	streq	r3, [r0, #4]
   23ab8:	mov	r5, r1
   23abc:	cmp	r5, #0
   23ac0:	beq	23b4c <__assert_fail@plt+0x11fa8>
   23ac4:	ldr	r3, [r4, #32]
   23ac8:	cmp	r5, r3
   23acc:	bge	23d9c <__assert_fail@plt+0x121f8>
   23ad0:	ldrb	r3, [r4, #76]	; 0x4c
   23ad4:	cmp	r3, #0
   23ad8:	bne	23b94 <__assert_fail@plt+0x11ff0>
   23adc:	mov	r2, r7
   23ae0:	sub	r1, r5, #1
   23ae4:	mov	r0, r4
   23ae8:	bl	22118 <__assert_fail@plt+0x10574>
   23aec:	str	r0, [r4, #60]	; 0x3c
   23af0:	ldr	r3, [r4, #80]	; 0x50
   23af4:	cmp	r3, #1
   23af8:	ble	23b14 <__assert_fail@plt+0x11f70>
   23afc:	ldr	r0, [r4, #8]
   23b00:	ldr	r2, [r4, #28]
   23b04:	sub	r2, r2, r5
   23b08:	lsl	r2, r2, #2
   23b0c:	add	r1, r0, r5, lsl #2
   23b10:	bl	11748 <memmove@plt>
   23b14:	ldrb	r3, [r4, #75]	; 0x4b
   23b18:	cmp	r3, #0
   23b1c:	bne	23d84 <__assert_fail@plt+0x121e0>
   23b20:	ldr	r3, [r4, #28]
   23b24:	sub	r3, r3, r5
   23b28:	str	r3, [r4, #28]
   23b2c:	ldr	r3, [r4, #32]
   23b30:	sub	r3, r3, r5
   23b34:	str	r3, [r4, #32]
   23b38:	ldrb	r3, [r4, #75]	; 0x4b
   23b3c:	cmp	r3, #0
   23b40:	ldreq	r3, [r4, #4]
   23b44:	addeq	r3, r3, r5
   23b48:	streq	r3, [r4, #4]
   23b4c:	str	r6, [r4, #24]
   23b50:	ldr	r3, [r4, #48]	; 0x30
   23b54:	sub	r3, r3, r5
   23b58:	str	r3, [r4, #48]	; 0x30
   23b5c:	ldr	r2, [r4, #56]	; 0x38
   23b60:	sub	r5, r2, r5
   23b64:	str	r5, [r4, #56]	; 0x38
   23b68:	ldr	r2, [r4, #80]	; 0x50
   23b6c:	cmp	r2, #1
   23b70:	ble	24100 <__assert_fail@plt+0x1255c>
   23b74:	ldrb	r3, [r4, #72]	; 0x48
   23b78:	cmp	r3, #0
   23b7c:	beq	240e8 <__assert_fail@plt+0x12544>
   23b80:	mov	r0, r4
   23b84:	bl	1fab0 <__assert_fail@plt+0xdf0c>
   23b88:	cmp	r0, #0
   23b8c:	beq	240f0 <__assert_fail@plt+0x1254c>
   23b90:	b	240f8 <__assert_fail@plt+0x12554>
   23b94:	ldr	sl, [r4, #28]
   23b98:	ldr	r9, [r4, #12]
   23b9c:	mov	r2, sl
   23ba0:	mov	r1, #0
   23ba4:	b	23bb4 <__assert_fail@plt+0x12010>
   23ba8:	mov	r2, r8
   23bac:	cmp	r1, r2
   23bb0:	bge	23bd8 <__assert_fail@plt+0x12034>
   23bb4:	add	r3, r1, r2
   23bb8:	add	r3, r3, r3, lsr #31
   23bbc:	asr	r8, r3, #1
   23bc0:	ldr	r3, [r9, r8, lsl #2]
   23bc4:	cmp	r5, r3
   23bc8:	blt	23ba8 <__assert_fail@plt+0x12004>
   23bcc:	ble	23be0 <__assert_fail@plt+0x1203c>
   23bd0:	add	r1, r8, #1
   23bd4:	b	23bac <__assert_fail@plt+0x12008>
   23bd8:	cmp	r5, r3
   23bdc:	addgt	r8, r8, #1
   23be0:	mov	r2, r7
   23be4:	sub	r1, r8, #1
   23be8:	mov	r0, r4
   23bec:	bl	22118 <__assert_fail@plt+0x10574>
   23bf0:	str	r0, [r4, #60]	; 0x3c
   23bf4:	cmp	r5, sl
   23bf8:	movge	r3, #0
   23bfc:	movlt	r3, #1
   23c00:	cmp	r5, r8
   23c04:	movne	r3, #0
   23c08:	cmp	r3, #0
   23c0c:	bne	23cec <__assert_fail@plt+0x12148>
   23c10:	ldr	r3, [r4, #44]	; 0x2c
   23c14:	sub	r3, r3, r6
   23c18:	add	r3, r3, r5
   23c1c:	str	r3, [r4, #48]	; 0x30
   23c20:	ldr	r3, [r4, #52]	; 0x34
   23c24:	sub	r3, r3, r6
   23c28:	add	r3, r3, r5
   23c2c:	str	r3, [r4, #56]	; 0x38
   23c30:	mov	r3, #0
   23c34:	strb	r3, [r4, #76]	; 0x4c
   23c38:	cmp	r8, r3
   23c3c:	ble	23c68 <__assert_fail@plt+0x120c4>
   23c40:	sub	r2, r8, #-1073741823	; 0xc0000001
   23c44:	add	r3, r9, r2, lsl #2
   23c48:	ldr	r2, [r9, r2, lsl #2]
   23c4c:	cmp	r5, r2
   23c50:	bne	23c68 <__assert_fail@plt+0x120c4>
   23c54:	subs	r8, r8, #1
   23c58:	beq	23c68 <__assert_fail@plt+0x120c4>
   23c5c:	ldr	r2, [r3, #-4]!
   23c60:	cmp	r5, r2
   23c64:	beq	23c54 <__assert_fail@plt+0x120b0>
   23c68:	cmp	sl, r8
   23c6c:	ble	23d70 <__assert_fail@plt+0x121cc>
   23c70:	ldr	r2, [r4, #8]
   23c74:	add	r3, r2, r8, lsl #2
   23c78:	ldr	r2, [r2, r8, lsl #2]
   23c7c:	cmn	r2, #1
   23c80:	bne	23c9c <__assert_fail@plt+0x120f8>
   23c84:	add	r8, r8, #1
   23c88:	cmp	sl, r8
   23c8c:	beq	23d78 <__assert_fail@plt+0x121d4>
   23c90:	ldr	r2, [r3, #4]!
   23c94:	cmn	r2, #1
   23c98:	beq	23c84 <__assert_fail@plt+0x120e0>
   23c9c:	ldr	r2, [r9, r8, lsl #2]
   23ca0:	sub	r2, r2, r5
   23ca4:	str	r2, [r4, #28]
   23ca8:	cmp	r2, #0
   23cac:	beq	23ce0 <__assert_fail@plt+0x1213c>
   23cb0:	ble	23cd4 <__assert_fail@plt+0x12130>
   23cb4:	mov	r3, #0
   23cb8:	mvn	r1, #0
   23cbc:	ldr	r2, [r4, #8]
   23cc0:	str	r1, [r2, r3, lsl #2]
   23cc4:	add	r3, r3, #1
   23cc8:	ldr	r2, [r4, #28]
   23ccc:	cmp	r2, r3
   23cd0:	bgt	23cbc <__assert_fail@plt+0x12118>
   23cd4:	mov	r1, #255	; 0xff
   23cd8:	ldr	r0, [r4, #4]
   23cdc:	bl	119e8 <memset@plt>
   23ce0:	ldr	r3, [r4, #28]
   23ce4:	str	r3, [r4, #32]
   23ce8:	b	23b38 <__assert_fail@plt+0x11f94>
   23cec:	ldr	r3, [r9, r8, lsl #2]
   23cf0:	cmp	r5, r3
   23cf4:	bne	23c10 <__assert_fail@plt+0x1206c>
   23cf8:	ldr	r0, [r4, #8]
   23cfc:	lsl	r7, r5, #2
   23d00:	sub	r2, sl, r5
   23d04:	lsl	r2, r2, #2
   23d08:	add	r1, r0, r7
   23d0c:	bl	11748 <memmove@plt>
   23d10:	ldr	r0, [r4, #4]
   23d14:	ldr	r2, [r4, #28]
   23d18:	sub	r2, r2, r5
   23d1c:	add	r1, r0, r5
   23d20:	bl	11748 <memmove@plt>
   23d24:	ldr	r3, [r4, #28]
   23d28:	sub	r3, r3, r5
   23d2c:	str	r3, [r4, #28]
   23d30:	ldr	r2, [r4, #32]
   23d34:	sub	r2, r2, r5
   23d38:	str	r2, [r4, #32]
   23d3c:	cmp	r3, #0
   23d40:	ble	23b38 <__assert_fail@plt+0x11f94>
   23d44:	mov	r3, #0
   23d48:	ldr	r1, [r4, #12]
   23d4c:	ldr	r2, [r1, r7]
   23d50:	sub	r2, r2, r5
   23d54:	str	r2, [r1, r3, lsl #2]
   23d58:	add	r3, r3, #1
   23d5c:	add	r7, r7, #4
   23d60:	ldr	r2, [r4, #28]
   23d64:	cmp	r2, r3
   23d68:	bgt	23d48 <__assert_fail@plt+0x121a4>
   23d6c:	b	23b38 <__assert_fail@plt+0x11f94>
   23d70:	cmp	sl, r8
   23d74:	bne	23c9c <__assert_fail@plt+0x120f8>
   23d78:	mov	r3, #0
   23d7c:	str	r3, [r4, #28]
   23d80:	b	23ce0 <__assert_fail@plt+0x1213c>
   23d84:	ldr	r0, [r4, #4]
   23d88:	ldr	r2, [r4, #28]
   23d8c:	sub	r2, r2, r5
   23d90:	add	r1, r0, r5
   23d94:	bl	11748 <memmove@plt>
   23d98:	b	23b20 <__assert_fail@plt+0x11f7c>
   23d9c:	ldr	fp, [r4, #28]
   23da0:	ldrb	r3, [r4, #76]	; 0x4c
   23da4:	cmp	r3, #0
   23da8:	bne	23eb0 <__assert_fail@plt+0x1230c>
   23dac:	mov	r3, #0
   23db0:	str	r3, [r4, #28]
   23db4:	ldr	r3, [r4, #80]	; 0x50
   23db8:	cmp	r3, #1
   23dbc:	ble	24078 <__assert_fail@plt+0x124d4>
   23dc0:	ldrb	r2, [r4, #73]	; 0x49
   23dc4:	cmp	r2, #0
   23dc8:	beq	23e8c <__assert_fail@plt+0x122e8>
   23dcc:	ldr	r0, [r4]
   23dd0:	ldr	r8, [r4, #24]
   23dd4:	add	r8, r0, r8
   23dd8:	sub	r3, r5, r3
   23ddc:	add	r3, r8, r3
   23de0:	cmp	r0, r3
   23de4:	movcc	r0, r3
   23de8:	mov	r9, r5
   23dec:	sub	r3, r5, #1
   23df0:	add	r1, r8, r3
   23df4:	cmp	r1, r0
   23df8:	bcc	23e8c <__assert_fail@plt+0x122e8>
   23dfc:	ldrb	r3, [r8, r3]
   23e00:	and	r3, r3, #192	; 0xc0
   23e04:	cmp	r3, #128	; 0x80
   23e08:	subeq	r3, r1, #1
   23e0c:	subeq	r0, r0, #1
   23e10:	bne	23e34 <__assert_fail@plt+0x12290>
   23e14:	mov	r1, r3
   23e18:	cmp	r3, r0
   23e1c:	beq	23e8c <__assert_fail@plt+0x122e8>
   23e20:	sub	r3, r3, #1
   23e24:	ldrb	r2, [r1]
   23e28:	and	r2, r2, #192	; 0xc0
   23e2c:	cmp	r2, #128	; 0x80
   23e30:	beq	23e14 <__assert_fail@plt+0x12270>
   23e34:	mov	sl, r1
   23e38:	ldr	r2, [r4, #48]	; 0x30
   23e3c:	add	r2, r8, r2
   23e40:	sub	r2, r2, r1
   23e44:	ldr	r3, [r4, #64]	; 0x40
   23e48:	cmp	r3, #0
   23e4c:	bne	23edc <__assert_fail@plt+0x12338>
   23e50:	mov	r3, #0
   23e54:	str	r3, [sp, #24]
   23e58:	str	r3, [sp, #28]
   23e5c:	add	r3, sp, #24
   23e60:	add	r0, sp, #12
   23e64:	bl	1b49c <__assert_fail@plt+0x98f8>
   23e68:	add	r8, r8, r9
   23e6c:	sub	sl, r8, sl
   23e70:	cmp	r0, sl
   23e74:	movcc	r3, #0
   23e78:	movcs	r3, #1
   23e7c:	cmn	r0, #3
   23e80:	movhi	r3, #0
   23e84:	cmp	r3, #0
   23e88:	bne	23f20 <__assert_fail@plt+0x1237c>
   23e8c:	ldr	ip, [r4, #24]
   23e90:	ldr	r3, [r4, #32]
   23e94:	add	ip, ip, r3
   23e98:	cmp	r6, ip
   23e9c:	ble	24140 <__assert_fail@plt+0x1259c>
   23ea0:	add	sl, sp, #24
   23ea4:	add	r9, r4, #16
   23ea8:	str	r5, [sp, #4]
   23eac:	b	23f50 <__assert_fail@plt+0x123ac>
   23eb0:	ldr	r3, [r4, #44]	; 0x2c
   23eb4:	sub	r3, r3, r6
   23eb8:	add	r3, r3, r5
   23ebc:	str	r3, [r4, #48]	; 0x30
   23ec0:	ldr	r3, [r4, #52]	; 0x34
   23ec4:	sub	r3, r3, r6
   23ec8:	add	r3, r3, r5
   23ecc:	str	r3, [r4, #56]	; 0x38
   23ed0:	mov	r3, #0
   23ed4:	strb	r3, [r4, #76]	; 0x4c
   23ed8:	b	23dac <__assert_fail@plt+0x12208>
   23edc:	cmp	r2, #6
   23ee0:	movlt	ip, r2
   23ee4:	movge	ip, #6
   23ee8:	cmp	ip, #1
   23eec:	addmi	r1, sp, #16
   23ef0:	bmi	23e50 <__assert_fail@plt+0x122ac>
   23ef4:	add	r0, r1, ip
   23ef8:	add	lr, sp, #32
   23efc:	add	ip, lr, ip
   23f00:	sub	ip, ip, #17
   23f04:	ldrb	lr, [r0, #-1]!
   23f08:	ldrb	lr, [r3, lr]
   23f0c:	strb	lr, [ip], #-1
   23f10:	cmp	r0, r1
   23f14:	bne	23f04 <__assert_fail@plt+0x12360>
   23f18:	add	r1, sp, #16
   23f1c:	b	23e50 <__assert_fail@plt+0x122ac>
   23f20:	mov	r3, #0
   23f24:	str	r3, [r4, #16]
   23f28:	str	r3, [r4, #20]
   23f2c:	sub	sl, r0, sl
   23f30:	str	sl, [r4, #28]
   23f34:	ldr	r8, [sp, #12]
   23f38:	cmn	r8, #1
   23f3c:	bne	23fc8 <__assert_fail@plt+0x12424>
   23f40:	b	23e8c <__assert_fail@plt+0x122e8>
   23f44:	add	ip, r8, r0
   23f48:	cmp	r6, ip
   23f4c:	ble	23fb0 <__assert_fail@plt+0x1240c>
   23f50:	ldr	r5, [r4, #44]	; 0x2c
   23f54:	sub	r5, r5, ip
   23f58:	ldm	r9, {r0, r1}
   23f5c:	stm	sl, {r0, r1}
   23f60:	mov	r8, ip
   23f64:	ldr	r1, [r4]
   23f68:	mov	r3, r9
   23f6c:	mov	r2, r5
   23f70:	add	r1, r1, ip
   23f74:	add	r0, sp, #16
   23f78:	bl	1b49c <__assert_fail@plt+0x98f8>
   23f7c:	sub	r3, r0, #1
   23f80:	cmn	r3, #4
   23f84:	ldrls	r3, [sp, #16]
   23f88:	bls	23f44 <__assert_fail@plt+0x123a0>
   23f8c:	cmp	r5, #0
   23f90:	cmpne	r0, #0
   23f94:	ldrne	r3, [r4]
   23f98:	ldrbne	r3, [r3, r8]
   23f9c:	moveq	r3, #0
   23fa0:	ldm	sl, {r0, r1}
   23fa4:	stm	r9, {r0, r1}
   23fa8:	mov	r0, #1
   23fac:	b	23f44 <__assert_fail@plt+0x123a0>
   23fb0:	ldr	r5, [sp, #4]
   23fb4:	mov	r8, r3
   23fb8:	sub	ip, ip, r6
   23fbc:	str	ip, [r4, #28]
   23fc0:	cmn	r3, #1
   23fc4:	beq	24148 <__assert_fail@plt+0x125a4>
   23fc8:	ldrb	r3, [r4, #78]	; 0x4e
   23fcc:	cmp	r3, #0
   23fd0:	bne	23ffc <__assert_fail@plt+0x12458>
   23fd4:	cmp	r8, #10
   23fd8:	movne	r3, #0
   23fdc:	beq	24024 <__assert_fail@plt+0x12480>
   23fe0:	str	r3, [r4, #60]	; 0x3c
   23fe4:	ldr	r2, [r4, #28]
   23fe8:	cmp	r2, #0
   23fec:	bne	24038 <__assert_fail@plt+0x12494>
   23ff0:	ldr	r3, [r4, #28]
   23ff4:	str	r3, [r4, #32]
   23ff8:	b	23b38 <__assert_fail@plt+0x11f94>
   23ffc:	mov	r0, r8
   24000:	bl	119c4 <iswalnum@plt>
   24004:	clz	r0, r0
   24008:	lsr	r0, r0, #5
   2400c:	cmp	r8, #95	; 0x5f
   24010:	moveq	r0, #0
   24014:	cmp	r0, #0
   24018:	moveq	r3, #1
   2401c:	bne	23fd4 <__assert_fail@plt+0x12430>
   24020:	b	23fe0 <__assert_fail@plt+0x1243c>
   24024:	ldrb	r3, [r4, #77]	; 0x4d
   24028:	cmp	r3, #0
   2402c:	movne	r3, #2
   24030:	moveq	r3, #0
   24034:	b	23fe0 <__assert_fail@plt+0x1243c>
   24038:	ble	2405c <__assert_fail@plt+0x124b8>
   2403c:	mov	r3, #0
   24040:	mvn	r1, #0
   24044:	ldr	r2, [r4, #8]
   24048:	str	r1, [r2, r3, lsl #2]
   2404c:	add	r3, r3, #1
   24050:	ldr	r2, [r4, #28]
   24054:	cmp	r2, r3
   24058:	bgt	24044 <__assert_fail@plt+0x124a0>
   2405c:	ldrb	r3, [r4, #75]	; 0x4b
   24060:	cmp	r3, #0
   24064:	beq	23ff0 <__assert_fail@plt+0x1244c>
   24068:	mov	r1, #255	; 0xff
   2406c:	ldr	r0, [r4, #4]
   24070:	bl	119e8 <memset@plt>
   24074:	b	23ff0 <__assert_fail@plt+0x1244c>
   24078:	ldr	r3, [r4]
   2407c:	ldr	r2, [r4, #24]
   24080:	add	r3, r3, r5
   24084:	add	r3, r3, r2
   24088:	ldrb	r3, [r3, #-1]
   2408c:	mov	r2, #0
   24090:	str	r2, [r4, #32]
   24094:	ldr	r2, [r4, #64]	; 0x40
   24098:	cmp	r2, #0
   2409c:	ldrbne	r3, [r2, r3]
   240a0:	lsr	r1, r3, #5
   240a4:	ldr	r0, [r4, #68]	; 0x44
   240a8:	and	r2, r3, #31
   240ac:	ldr	r1, [r0, r1, lsl #2]
   240b0:	lsr	r2, r1, r2
   240b4:	tst	r2, #1
   240b8:	movne	r3, #1
   240bc:	bne	240cc <__assert_fail@plt+0x12528>
   240c0:	cmp	r3, #10
   240c4:	movne	r3, #0
   240c8:	beq	240d4 <__assert_fail@plt+0x12530>
   240cc:	str	r3, [r4, #60]	; 0x3c
   240d0:	b	23b38 <__assert_fail@plt+0x11f94>
   240d4:	ldrb	r3, [r4, #77]	; 0x4d
   240d8:	cmp	r3, #0
   240dc:	movne	r3, #2
   240e0:	moveq	r3, #0
   240e4:	b	240cc <__assert_fail@plt+0x12528>
   240e8:	mov	r0, r4
   240ec:	bl	1f54c <__assert_fail@plt+0xd9a8>
   240f0:	mov	r0, #0
   240f4:	str	r0, [r4, #40]	; 0x28
   240f8:	add	sp, sp, #36	; 0x24
   240fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24100:	ldrb	r2, [r4, #75]	; 0x4b
   24104:	cmp	r2, #0
   24108:	streq	r3, [r4, #28]
   2410c:	beq	240f0 <__assert_fail@plt+0x1254c>
   24110:	ldrb	r3, [r4, #72]	; 0x48
   24114:	cmp	r3, #0
   24118:	bne	24134 <__assert_fail@plt+0x12590>
   2411c:	ldr	r3, [r4, #64]	; 0x40
   24120:	cmp	r3, #0
   24124:	beq	240f0 <__assert_fail@plt+0x1254c>
   24128:	mov	r0, r4
   2412c:	bl	1e3a4 <__assert_fail@plt+0xc800>
   24130:	b	240f0 <__assert_fail@plt+0x1254c>
   24134:	mov	r0, r4
   24138:	bl	20070 <__assert_fail@plt+0xe4cc>
   2413c:	b	240f0 <__assert_fail@plt+0x1254c>
   24140:	sub	ip, ip, r6
   24144:	str	ip, [r4, #28]
   24148:	mov	r2, r7
   2414c:	sub	r1, fp, #1
   24150:	mov	r0, r4
   24154:	bl	22118 <__assert_fail@plt+0x10574>
   24158:	str	r0, [r4, #60]	; 0x3c
   2415c:	b	23fe4 <__assert_fail@plt+0x12440>
   24160:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24164:	sub	sp, sp, #14464	; 0x3880
   24168:	sub	sp, sp, #52	; 0x34
   2416c:	mov	r9, r0
   24170:	mov	r4, r1
   24174:	str	r1, [sp, #4]
   24178:	mov	r1, #0
   2417c:	str	r1, [r4, #44]	; 0x2c
   24180:	str	r1, [r4, #48]	; 0x30
   24184:	mov	r2, #32
   24188:	add	r0, sp, #32
   2418c:	bl	119e8 <memset@plt>
   24190:	ldr	r3, [r4, #8]
   24194:	cmp	r3, #0
   24198:	ble	247ec <__assert_fail@plt+0x12c48>
   2419c:	mov	r8, #0
   241a0:	str	r8, [sp, #12]
   241a4:	add	r3, sp, #8320	; 0x2080
   241a8:	str	r3, [sp, #24]
   241ac:	add	r3, sp, #32
   241b0:	str	r3, [sp, #28]
   241b4:	str	r9, [sp, #20]
   241b8:	b	245f8 <__assert_fail@plt+0x12a54>
   241bc:	ldrb	r3, [r3, r2, lsl #3]
   241c0:	asr	r1, r3, #5
   241c4:	and	r3, r3, #31
   241c8:	ldr	ip, [sp, #28]
   241cc:	ldr	r2, [ip, r1, lsl #2]
   241d0:	mov	r0, #1
   241d4:	orr	r3, r2, r0, lsl r3
   241d8:	str	r3, [ip, r1, lsl #2]
   241dc:	cmp	r4, #0
   241e0:	beq	242c0 <__assert_fail@plt+0x1271c>
   241e4:	tst	r4, #32
   241e8:	bne	2437c <__assert_fail@plt+0x127d8>
   241ec:	tst	r4, #128	; 0x80
   241f0:	bne	243a8 <__assert_fail@plt+0x12804>
   241f4:	tst	r4, #4
   241f8:	beq	2425c <__assert_fail@plt+0x126b8>
   241fc:	cmp	r9, #1
   24200:	beq	243bc <__assert_fail@plt+0x12818>
   24204:	ldr	r2, [sp, #20]
   24208:	ldr	r3, [r2, #92]	; 0x5c
   2420c:	cmp	r3, #1
   24210:	ble	243e0 <__assert_fail@plt+0x1283c>
   24214:	add	r0, sp, #32
   24218:	add	r1, r2, #96	; 0x60
   2421c:	ldr	lr, [r2, #60]	; 0x3c
   24220:	sub	lr, lr, #4
   24224:	add	r5, r2, #128	; 0x80
   24228:	mov	ip, #0
   2422c:	ldr	r2, [r1], #4
   24230:	ldr	r3, [lr, #4]!
   24234:	mvn	r3, r3
   24238:	orr	r3, r3, r2
   2423c:	ldr	r2, [r0]
   24240:	and	r3, r3, r2
   24244:	str	r3, [r0], #4
   24248:	orr	ip, ip, r3
   2424c:	cmp	r1, r5
   24250:	bne	2422c <__assert_fail@plt+0x12688>
   24254:	cmp	ip, #0
   24258:	beq	245d8 <__assert_fail@plt+0x12a34>
   2425c:	tst	r4, #8
   24260:	beq	242c0 <__assert_fail@plt+0x1271c>
   24264:	cmp	r9, #1
   24268:	beq	24414 <__assert_fail@plt+0x12870>
   2426c:	ldr	r2, [sp, #20]
   24270:	ldr	r3, [r2, #92]	; 0x5c
   24274:	cmp	r3, #1
   24278:	ble	24438 <__assert_fail@plt+0x12894>
   2427c:	add	ip, sp, #32
   24280:	add	r0, r2, #96	; 0x60
   24284:	ldr	lr, [r2, #60]	; 0x3c
   24288:	sub	lr, lr, #4
   2428c:	add	r4, r2, #128	; 0x80
   24290:	mov	r1, #0
   24294:	ldr	r3, [r0], #4
   24298:	ldr	r2, [lr, #4]!
   2429c:	and	r2, r2, r3
   242a0:	ldr	r3, [ip]
   242a4:	bic	r3, r3, r2
   242a8:	str	r3, [ip], #4
   242ac:	orr	r1, r1, r3
   242b0:	cmp	r0, r4
   242b4:	bne	24294 <__assert_fail@plt+0x126f0>
   242b8:	cmp	r1, #0
   242bc:	beq	245d8 <__assert_fail@plt+0x12a34>
   242c0:	cmp	r8, #0
   242c4:	ble	245cc <__assert_fail@plt+0x12a28>
   242c8:	add	r5, sp, #124	; 0x7c
   242cc:	add	r6, sp, #8320	; 0x2080
   242d0:	mov	r7, #0
   242d4:	b	244e4 <__assert_fail@plt+0x12940>
   242d8:	ldr	ip, [r3, r2, lsl #3]
   242dc:	add	r0, sp, #32
   242e0:	sub	r1, ip, #4
   242e4:	add	ip, ip, #28
   242e8:	ldr	r3, [r0]
   242ec:	ldr	r2, [r1, #4]!
   242f0:	orr	r3, r3, r2
   242f4:	str	r3, [r0], #4
   242f8:	cmp	r1, ip
   242fc:	bne	242e8 <__assert_fail@plt+0x12744>
   24300:	b	241dc <__assert_fail@plt+0x12638>
   24304:	ldr	r2, [sp, #20]
   24308:	ldr	r3, [r2, #92]	; 0x5c
   2430c:	cmp	r3, #1
   24310:	ble	24368 <__assert_fail@plt+0x127c4>
   24314:	ldr	ip, [r2, #60]	; 0x3c
   24318:	add	r0, sp, #32
   2431c:	sub	r1, ip, #4
   24320:	add	ip, ip, #28
   24324:	ldr	r3, [r0]
   24328:	ldr	r2, [r1, #4]!
   2432c:	orr	r3, r3, r2
   24330:	str	r3, [r0], #4
   24334:	cmp	r1, ip
   24338:	bne	24324 <__assert_fail@plt+0x12780>
   2433c:	ldr	r3, [sp, #20]
   24340:	ldr	r3, [r3, #128]	; 0x80
   24344:	tst	r3, #64	; 0x40
   24348:	ldreq	r2, [sp, #32]
   2434c:	biceq	r2, r2, #1024	; 0x400
   24350:	streq	r2, [sp, #32]
   24354:	tst	r3, #128	; 0x80
   24358:	ldrne	r3, [sp, #32]
   2435c:	bicne	r3, r3, #1
   24360:	strne	r3, [sp, #32]
   24364:	b	241dc <__assert_fail@plt+0x12638>
   24368:	mov	r2, #32
   2436c:	mvn	r1, #0
   24370:	ldr	r0, [sp, #28]
   24374:	bl	119e8 <memset@plt>
   24378:	b	2433c <__assert_fail@plt+0x12798>
   2437c:	ldr	r5, [sp, #32]
   24380:	and	r5, r5, #1024	; 0x400
   24384:	mov	r2, #32
   24388:	mov	r1, #0
   2438c:	ldr	r0, [sp, #28]
   24390:	bl	119e8 <memset@plt>
   24394:	cmp	r5, #0
   24398:	beq	245d8 <__assert_fail@plt+0x12a34>
   2439c:	mov	r3, #1024	; 0x400
   243a0:	str	r3, [sp, #32]
   243a4:	b	241ec <__assert_fail@plt+0x12648>
   243a8:	mov	r2, #32
   243ac:	mov	r1, #0
   243b0:	ldr	r0, [sp, #28]
   243b4:	bl	119e8 <memset@plt>
   243b8:	b	245d8 <__assert_fail@plt+0x12a34>
   243bc:	ldr	r3, [sp, #16]
   243c0:	ldrb	r3, [r3, #6]
   243c4:	tst	r3, #64	; 0x40
   243c8:	bne	24204 <__assert_fail@plt+0x12660>
   243cc:	mov	r2, #32
   243d0:	mov	r1, #0
   243d4:	ldr	r0, [sp, #28]
   243d8:	bl	119e8 <memset@plt>
   243dc:	b	245d8 <__assert_fail@plt+0x12a34>
   243e0:	add	r1, sp, #32
   243e4:	ldr	r3, [sp, #20]
   243e8:	add	r2, r3, #96	; 0x60
   243ec:	add	r0, r3, #128	; 0x80
   243f0:	mov	ip, #0
   243f4:	ldr	r3, [r2], #4
   243f8:	ldr	lr, [r1]
   243fc:	and	r3, r3, lr
   24400:	str	r3, [r1], #4
   24404:	orr	ip, ip, r3
   24408:	cmp	r2, r0
   2440c:	bne	243f4 <__assert_fail@plt+0x12850>
   24410:	b	24254 <__assert_fail@plt+0x126b0>
   24414:	ldr	r3, [sp, #16]
   24418:	ldrb	r3, [r3, #6]
   2441c:	tst	r3, #64	; 0x40
   24420:	beq	2426c <__assert_fail@plt+0x126c8>
   24424:	mov	r2, #32
   24428:	mov	r1, #0
   2442c:	ldr	r0, [sp, #28]
   24430:	bl	119e8 <memset@plt>
   24434:	b	245d8 <__assert_fail@plt+0x12a34>
   24438:	add	r0, sp, #32
   2443c:	ldr	r3, [sp, #20]
   24440:	add	r2, r3, #96	; 0x60
   24444:	add	ip, r3, #128	; 0x80
   24448:	mov	r1, #0
   2444c:	ldr	lr, [r2], #4
   24450:	ldr	r3, [r0]
   24454:	bic	r3, r3, lr
   24458:	str	r3, [r0], #4
   2445c:	orr	r1, r1, r3
   24460:	cmp	r2, ip
   24464:	bne	2444c <__assert_fail@plt+0x128a8>
   24468:	b	242b8 <__assert_fail@plt+0x12714>
   2446c:	ldr	r3, [sp, #16]
   24470:	ldrb	r2, [r3]
   24474:	asr	r1, r2, #5
   24478:	lsl	r3, r7, #5
   2447c:	add	r3, r3, r1, lsl #2
   24480:	add	r1, sp, #14464	; 0x3880
   24484:	add	r1, r1, #48	; 0x30
   24488:	add	r3, r1, r3
   2448c:	sub	r3, r3, #14336	; 0x3800
   24490:	and	r2, r2, #31
   24494:	ldr	r3, [r3, #-48]	; 0xffffffd0
   24498:	lsr	r2, r3, r2
   2449c:	tst	r2, #1
   244a0:	beq	244d0 <__assert_fail@plt+0x1292c>
   244a4:	b	244ec <__assert_fail@plt+0x12948>
   244a8:	ldr	r3, [sp, #4]
   244ac:	ldr	r3, [r3, #12]
   244b0:	ldr	r2, [sp, #8]
   244b4:	ldr	r1, [r3, r2]
   244b8:	mov	r0, r6
   244bc:	bl	21800 <__assert_fail@plt+0xfc5c>
   244c0:	cmp	r0, #0
   244c4:	beq	24700 <__assert_fail@plt+0x12b5c>
   244c8:	cmp	r4, #0
   244cc:	beq	245d0 <__assert_fail@plt+0x12a2c>
   244d0:	add	r7, r7, #1
   244d4:	add	r5, r5, #32
   244d8:	add	r6, r6, #12
   244dc:	cmp	r7, r8
   244e0:	bge	245d0 <__assert_fail@plt+0x12a2c>
   244e4:	cmp	r9, #1
   244e8:	beq	2446c <__assert_fail@plt+0x128c8>
   244ec:	add	r0, sp, #32
   244f0:	add	r4, sp, #64	; 0x40
   244f4:	add	sl, r5, #32
   244f8:	mov	r1, r5
   244fc:	mov	lr, r0
   24500:	mov	ip, #0
   24504:	ldr	r3, [lr], #4
   24508:	ldr	r2, [r1, #4]!
   2450c:	and	r3, r3, r2
   24510:	str	r3, [r4], #4
   24514:	orr	ip, ip, r3
   24518:	cmp	r1, sl
   2451c:	bne	24504 <__assert_fail@plt+0x12960>
   24520:	cmp	ip, #0
   24524:	beq	244d0 <__assert_fail@plt+0x1292c>
   24528:	add	fp, sp, #96	; 0x60
   2452c:	mov	ip, r5
   24530:	mov	r4, #0
   24534:	mov	sl, r4
   24538:	ldr	r3, [r0]
   2453c:	ldr	r2, [ip, #4]!
   24540:	bic	lr, r2, r3
   24544:	str	lr, [fp], #4
   24548:	orr	sl, sl, lr
   2454c:	bic	r3, r3, r2
   24550:	str	r3, [r0], #4
   24554:	orr	r4, r4, r3
   24558:	cmp	ip, r1
   2455c:	bne	24538 <__assert_fail@plt+0x12994>
   24560:	cmp	sl, #0
   24564:	beq	244a8 <__assert_fail@plt+0x12904>
   24568:	add	r3, sp, #14464	; 0x3880
   2456c:	add	r3, r3, #48	; 0x30
   24570:	add	ip, r3, r8, lsl #5
   24574:	sub	ip, ip, #14336	; 0x3800
   24578:	sub	ip, ip, #48	; 0x30
   2457c:	add	lr, sp, #96	; 0x60
   24580:	ldm	lr!, {r0, r1, r2, r3}
   24584:	stmia	ip!, {r0, r1, r2, r3}
   24588:	ldm	lr, {r0, r1, r2, r3}
   2458c:	stm	ip, {r0, r1, r2, r3}
   24590:	add	ip, r5, #4
   24594:	add	lr, sp, #64	; 0x40
   24598:	ldm	lr!, {r0, r1, r2, r3}
   2459c:	stmia	ip!, {r0, r1, r2, r3}
   245a0:	ldm	lr, {r0, r1, r2, r3}
   245a4:	stm	ip, {r0, r1, r2, r3}
   245a8:	add	r0, r8, r8, lsl #1
   245ac:	mov	r1, r6
   245b0:	ldr	r3, [sp, #24]
   245b4:	add	r0, r3, r0, lsl #2
   245b8:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   245bc:	cmp	r0, #0
   245c0:	bne	24700 <__assert_fail@plt+0x12b5c>
   245c4:	add	r8, r8, #1
   245c8:	b	244a8 <__assert_fail@plt+0x12904>
   245cc:	mov	r7, #0
   245d0:	cmp	r8, r7
   245d4:	beq	24694 <__assert_fail@plt+0x12af0>
   245d8:	ldr	r3, [sp, #12]
   245dc:	add	r3, r3, #1
   245e0:	mov	r2, r3
   245e4:	str	r3, [sp, #12]
   245e8:	ldr	r3, [sp, #4]
   245ec:	ldr	r3, [r3, #8]
   245f0:	cmp	r2, r3
   245f4:	bge	24738 <__assert_fail@plt+0x12b94>
   245f8:	ldr	r2, [sp, #12]
   245fc:	lsl	r3, r2, #2
   24600:	str	r3, [sp, #8]
   24604:	ldr	r3, [sp, #4]
   24608:	ldr	r3, [r3, #12]
   2460c:	ldr	r2, [r3, r2, lsl #2]
   24610:	ldr	r3, [sp, #20]
   24614:	ldr	r3, [r3]
   24618:	add	r1, r3, r2, lsl #3
   2461c:	str	r1, [sp, #16]
   24620:	ldrb	r9, [r1, #4]
   24624:	ldr	r4, [r1, #4]
   24628:	lsl	r4, r4, #14
   2462c:	lsr	r4, r4, #22
   24630:	cmp	r9, #1
   24634:	beq	241bc <__assert_fail@plt+0x12618>
   24638:	cmp	r9, #3
   2463c:	beq	242d8 <__assert_fail@plt+0x12734>
   24640:	cmp	r9, #5
   24644:	beq	24304 <__assert_fail@plt+0x12760>
   24648:	cmp	r9, #7
   2464c:	bne	245d8 <__assert_fail@plt+0x12a34>
   24650:	mvn	r3, #0
   24654:	ldr	r2, [sp, #28]
   24658:	str	r3, [r2]
   2465c:	str	r3, [r2, #4]
   24660:	str	r3, [r2, #8]
   24664:	str	r3, [r2, #12]
   24668:	ldr	r3, [sp, #20]
   2466c:	ldr	r2, [r3, #128]	; 0x80
   24670:	tst	r2, #64	; 0x40
   24674:	ldreq	r3, [sp, #32]
   24678:	biceq	r3, r3, #1024	; 0x400
   2467c:	streq	r3, [sp, #32]
   24680:	tst	r2, #128	; 0x80
   24684:	ldrne	r3, [sp, #32]
   24688:	bicne	r3, r3, #1
   2468c:	strne	r3, [sp, #32]
   24690:	b	241dc <__assert_fail@plt+0x12638>
   24694:	add	r3, sp, #14464	; 0x3880
   24698:	add	r3, r3, #48	; 0x30
   2469c:	add	ip, r3, r8, lsl #5
   246a0:	sub	ip, ip, #14336	; 0x3800
   246a4:	sub	ip, ip, #48	; 0x30
   246a8:	add	lr, sp, #32
   246ac:	ldm	lr!, {r0, r1, r2, r3}
   246b0:	stmia	ip!, {r0, r1, r2, r3}
   246b4:	ldm	lr, {r0, r1, r2, r3}
   246b8:	stm	ip, {r0, r1, r2, r3}
   246bc:	ldr	r3, [sp, #4]
   246c0:	ldr	r3, [r3, #12]
   246c4:	add	r0, r8, r8, lsl #1
   246c8:	ldr	r2, [sp, #8]
   246cc:	ldr	r1, [r3, r2]
   246d0:	ldr	r3, [sp, #24]
   246d4:	add	r0, r3, r0, lsl #2
   246d8:	bl	1f3d8 <__assert_fail@plt+0xd834>
   246dc:	cmp	r0, #0
   246e0:	bne	246fc <__assert_fail@plt+0x12b58>
   246e4:	add	r8, r8, #1
   246e8:	mov	r2, #32
   246ec:	mov	r1, #0
   246f0:	ldr	r0, [sp, #28]
   246f4:	bl	119e8 <memset@plt>
   246f8:	b	245d8 <__assert_fail@plt+0x12a34>
   246fc:	mov	r8, r7
   24700:	cmp	r8, #0
   24704:	ble	24728 <__assert_fail@plt+0x12b84>
   24708:	add	r4, sp, #8320	; 0x2080
   2470c:	mov	r5, #0
   24710:	ldr	r0, [r4, #8]
   24714:	bl	17204 <__assert_fail@plt+0x5660>
   24718:	add	r5, r5, #1
   2471c:	add	r4, r4, #12
   24720:	cmp	r5, r8
   24724:	bne	24710 <__assert_fail@plt+0x12b6c>
   24728:	mov	r0, #0
   2472c:	add	sp, sp, #14464	; 0x3880
   24730:	add	sp, sp, #52	; 0x34
   24734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24738:	ldr	r9, [sp, #20]
   2473c:	cmp	r8, #0
   24740:	ble	247e4 <__assert_fail@plt+0x12c40>
   24744:	add	r1, r8, #1
   24748:	add	r0, sp, #11392	; 0x2c80
   2474c:	add	r0, r0, #32
   24750:	bl	1f41c <__assert_fail@plt+0xd878>
   24754:	add	r3, sp, #14464	; 0x3880
   24758:	add	r3, r3, #44	; 0x2c
   2475c:	str	r0, [r3]
   24760:	cmp	r0, #0
   24764:	bne	24860 <__assert_fail@plt+0x12cbc>
   24768:	mov	r2, #32
   2476c:	mov	r1, #0
   24770:	add	r0, sp, #11392	; 0x2c80
   24774:	bl	119e8 <memset@plt>
   24778:	add	r3, sp, #8320	; 0x2080
   2477c:	str	r3, [sp, #20]
   24780:	add	r6, sp, #124	; 0x7c
   24784:	add	r2, sp, #12416	; 0x3080
   24788:	add	r2, r2, #48	; 0x30
   2478c:	sub	fp, r2, #4
   24790:	add	r2, sp, #13440	; 0x3480
   24794:	add	r2, r2, #48	; 0x30
   24798:	sub	sl, r2, #8
   2479c:	mov	r7, r3
   247a0:	mov	r3, #0
   247a4:	str	r3, [sp, #16]
   247a8:	str	r3, [sp, #8]
   247ac:	add	r3, sp, #11392	; 0x2c80
   247b0:	add	r3, r3, #48	; 0x30
   247b4:	sub	r3, r3, #4
   247b8:	str	r3, [sp, #12]
   247bc:	add	r3, sp, #11392	; 0x2c80
   247c0:	add	r3, r3, #36	; 0x24
   247c4:	mov	r2, #0
   247c8:	str	r2, [r3]
   247cc:	mov	r5, r7
   247d0:	ldr	r3, [r7, #4]
   247d4:	cmp	r3, r2
   247d8:	ble	24898 <__assert_fail@plt+0x12cf4>
   247dc:	mov	r4, r2
   247e0:	b	2481c <__assert_fail@plt+0x12c78>
   247e4:	movne	r0, #0
   247e8:	bne	2472c <__assert_fail@plt+0x12b88>
   247ec:	mov	r1, #256	; 0x100
   247f0:	mov	r0, #4
   247f4:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   247f8:	ldr	r3, [sp, #4]
   247fc:	str	r0, [r3, #44]	; 0x2c
   24800:	adds	r0, r0, #0
   24804:	movne	r0, #1
   24808:	b	2472c <__assert_fail@plt+0x12b88>
   2480c:	add	r4, r4, #1
   24810:	ldr	r3, [r5, #4]
   24814:	cmp	r3, r4
   24818:	ble	24898 <__assert_fail@plt+0x12cf4>
   2481c:	ldr	r3, [r5, #8]
   24820:	ldr	r2, [r3, r4, lsl #2]
   24824:	ldr	r3, [r9, #12]
   24828:	ldr	r1, [r3, r2, lsl #2]
   2482c:	cmn	r1, #1
   24830:	beq	2480c <__assert_fail@plt+0x12c68>
   24834:	add	r1, r1, r1, lsl #1
   24838:	ldr	r3, [r9, #24]
   2483c:	add	r1, r3, r1, lsl #2
   24840:	add	r0, sp, #11392	; 0x2c80
   24844:	add	r0, r0, #32
   24848:	bl	21d44 <__assert_fail@plt+0x101a0>
   2484c:	add	r3, sp, #14464	; 0x3880
   24850:	add	r3, r3, #44	; 0x2c
   24854:	str	r0, [r3]
   24858:	cmp	r0, #0
   2485c:	beq	2480c <__assert_fail@plt+0x12c68>
   24860:	add	r3, sp, #11392	; 0x2c80
   24864:	add	r3, r3, #40	; 0x28
   24868:	ldr	r0, [r3]
   2486c:	bl	17204 <__assert_fail@plt+0x5660>
   24870:	add	r4, sp, #8320	; 0x2080
   24874:	mov	r5, #0
   24878:	ldr	r0, [r4, #8]
   2487c:	bl	17204 <__assert_fail@plt+0x5660>
   24880:	add	r5, r5, #1
   24884:	add	r4, r4, #12
   24888:	cmp	r5, r8
   2488c:	bne	24878 <__assert_fail@plt+0x12cd4>
   24890:	mov	r0, #0
   24894:	b	2472c <__assert_fail@plt+0x12b88>
   24898:	mov	r3, #0
   2489c:	add	r2, sp, #11392	; 0x2c80
   248a0:	add	r2, r2, #32
   248a4:	mov	r1, r9
   248a8:	add	r0, sp, #14464	; 0x3880
   248ac:	add	r0, r0, #44	; 0x2c
   248b0:	bl	21060 <__assert_fail@plt+0xf4bc>
   248b4:	mov	r4, r0
   248b8:	str	r0, [sl, #4]!
   248bc:	cmp	r0, #0
   248c0:	beq	24960 <__assert_fail@plt+0x12dbc>
   248c4:	ldrsb	r3, [r4, #52]	; 0x34
   248c8:	cmp	r3, #0
   248cc:	blt	24978 <__assert_fail@plt+0x12dd4>
   248d0:	str	r4, [fp]
   248d4:	ldr	r3, [sp, #12]
   248d8:	ldr	r2, [sp, #8]
   248dc:	str	r4, [r3, r2, lsl #2]
   248e0:	add	r4, sp, #11392	; 0x2c80
   248e4:	add	r0, r6, #32
   248e8:	mov	r1, r4
   248ec:	ldr	r3, [r1]
   248f0:	ldr	r2, [r6, #4]!
   248f4:	orr	r3, r3, r2
   248f8:	str	r3, [r1], #4
   248fc:	cmp	r0, r6
   24900:	bne	248ec <__assert_fail@plt+0x12d48>
   24904:	ldr	r3, [sp, #8]
   24908:	add	r3, r3, #1
   2490c:	str	r3, [sp, #8]
   24910:	add	r7, r7, #12
   24914:	add	fp, fp, #4
   24918:	mov	r6, r0
   2491c:	cmp	r3, r8
   24920:	bne	247bc <__assert_fail@plt+0x12c18>
   24924:	ldr	r3, [sp, #16]
   24928:	cmp	r3, #0
   2492c:	bne	24ab0 <__assert_fail@plt+0x12f0c>
   24930:	mov	r1, #256	; 0x100
   24934:	mov	r0, #4
   24938:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   2493c:	ldr	r3, [sp, #4]
   24940:	str	r0, [r3, #44]	; 0x2c
   24944:	cmp	r0, #0
   24948:	beq	24860 <__assert_fail@plt+0x12cbc>
   2494c:	mov	r2, r0
   24950:	add	r1, r9, #96	; 0x60
   24954:	add	r7, sp, #128	; 0x80
   24958:	add	sl, r0, #1024	; 0x400
   2495c:	b	24a98 <__assert_fail@plt+0x12ef4>
   24960:	add	r3, sp, #14464	; 0x3880
   24964:	add	r3, r3, #44	; 0x2c
   24968:	ldr	r3, [r3]
   2496c:	cmp	r3, #0
   24970:	beq	248c4 <__assert_fail@plt+0x12d20>
   24974:	b	24860 <__assert_fail@plt+0x12cbc>
   24978:	mov	r3, #1
   2497c:	add	r2, sp, #11392	; 0x2c80
   24980:	add	r2, r2, #32
   24984:	mov	r1, r9
   24988:	add	r0, sp, #14464	; 0x3880
   2498c:	add	r0, r0, #44	; 0x2c
   24990:	bl	21060 <__assert_fail@plt+0xf4bc>
   24994:	str	r0, [fp]
   24998:	cmp	r0, #0
   2499c:	beq	24a04 <__assert_fail@plt+0x12e60>
   249a0:	cmp	r4, r0
   249a4:	beq	249bc <__assert_fail@plt+0x12e18>
   249a8:	ldr	r3, [r9, #92]	; 0x5c
   249ac:	ldr	r2, [sp, #16]
   249b0:	cmp	r3, #1
   249b4:	movgt	r2, #1
   249b8:	str	r2, [sp, #16]
   249bc:	mov	r3, #2
   249c0:	add	r2, sp, #11392	; 0x2c80
   249c4:	add	r2, r2, #32
   249c8:	mov	r1, r9
   249cc:	add	r0, sp, #14464	; 0x3880
   249d0:	add	r0, r0, #44	; 0x2c
   249d4:	bl	21060 <__assert_fail@plt+0xf4bc>
   249d8:	ldr	r3, [sp, #12]
   249dc:	ldr	r2, [sp, #8]
   249e0:	str	r0, [r3, r2, lsl #2]
   249e4:	cmp	r0, #0
   249e8:	bne	248e0 <__assert_fail@plt+0x12d3c>
   249ec:	add	r3, sp, #14464	; 0x3880
   249f0:	add	r3, r3, #44	; 0x2c
   249f4:	ldr	r3, [r3]
   249f8:	cmp	r3, #0
   249fc:	beq	248e0 <__assert_fail@plt+0x12d3c>
   24a00:	b	24860 <__assert_fail@plt+0x12cbc>
   24a04:	add	r3, sp, #14464	; 0x3880
   24a08:	add	r3, r3, #44	; 0x2c
   24a0c:	ldr	r3, [r3]
   24a10:	cmp	r3, #0
   24a14:	beq	249a0 <__assert_fail@plt+0x12dfc>
   24a18:	b	24860 <__assert_fail@plt+0x12cbc>
   24a1c:	mov	r3, #0
   24a20:	b	24a60 <__assert_fail@plt+0x12ebc>
   24a24:	lsl	lr, lr, #1
   24a28:	add	r8, r8, #4
   24a2c:	lsrs	r6, r6, #1
   24a30:	beq	24a84 <__assert_fail@plt+0x12ee0>
   24a34:	tst	r6, #1
   24a38:	beq	24a24 <__assert_fail@plt+0x12e80>
   24a3c:	mov	r5, r7
   24a40:	ldr	r3, [r7]
   24a44:	tst	lr, r3
   24a48:	bne	24a1c <__assert_fail@plt+0x12e78>
   24a4c:	mov	r3, #0
   24a50:	add	r3, r3, #1
   24a54:	ldr	ip, [r5, r3, lsl #5]
   24a58:	tst	lr, ip
   24a5c:	beq	24a50 <__assert_fail@plt+0x12eac>
   24a60:	ldr	ip, [r1]
   24a64:	tst	lr, ip
   24a68:	add	ip, sp, #14464	; 0x3880
   24a6c:	add	ip, ip, #48	; 0x30
   24a70:	add	r3, ip, r3, lsl #2
   24a74:	ldrne	r3, [r3, #-2052]	; 0xfffff7fc
   24a78:	ldreq	r3, [r3, #-1028]	; 0xfffffbfc
   24a7c:	str	r3, [r8]
   24a80:	b	24a24 <__assert_fail@plt+0x12e80>
   24a84:	add	r2, r2, #128	; 0x80
   24a88:	add	r1, r1, #4
   24a8c:	add	r7, r7, #4
   24a90:	cmp	r2, sl
   24a94:	beq	24b14 <__assert_fail@plt+0x12f70>
   24a98:	ldr	r6, [r4], #4
   24a9c:	cmp	r6, #0
   24aa0:	beq	24a84 <__assert_fail@plt+0x12ee0>
   24aa4:	mov	r8, r2
   24aa8:	mov	lr, #1
   24aac:	b	24a34 <__assert_fail@plt+0x12e90>
   24ab0:	mov	r1, #512	; 0x200
   24ab4:	mov	r0, #4
   24ab8:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   24abc:	ldr	r3, [sp, #4]
   24ac0:	str	r0, [r3, #48]	; 0x30
   24ac4:	cmp	r0, #0
   24ac8:	beq	24860 <__assert_fail@plt+0x12cbc>
   24acc:	mov	r5, r0
   24ad0:	add	ip, sp, #128	; 0x80
   24ad4:	add	r7, r0, #1024	; 0x400
   24ad8:	ldr	r6, [r4], #4
   24adc:	cmp	r6, #0
   24ae0:	beq	24b04 <__assert_fail@plt+0x12f60>
   24ae4:	mov	r8, r5
   24ae8:	mov	r1, #1
   24aec:	tst	r6, #1
   24af0:	bne	24b3c <__assert_fail@plt+0x12f98>
   24af4:	lsl	r1, r1, #1
   24af8:	add	r8, r8, #4
   24afc:	lsrs	r6, r6, #1
   24b00:	bne	24aec <__assert_fail@plt+0x12f48>
   24b04:	add	r5, r5, #128	; 0x80
   24b08:	add	ip, ip, #4
   24b0c:	cmp	r7, r5
   24b10:	bne	24ad8 <__assert_fail@plt+0x12f34>
   24b14:	add	r3, sp, #11392	; 0x2c80
   24b18:	ldr	r3, [r3]
   24b1c:	tst	r3, #1024	; 0x400
   24b20:	beq	24bcc <__assert_fail@plt+0x13028>
   24b24:	ldr	r3, [sp, #128]	; 0x80
   24b28:	tst	r3, #1024	; 0x400
   24b2c:	bne	24ba8 <__assert_fail@plt+0x13004>
   24b30:	mov	r3, #0
   24b34:	add	r2, sp, #128	; 0x80
   24b38:	b	24b94 <__assert_fail@plt+0x12ff0>
   24b3c:	mov	lr, ip
   24b40:	ldr	r3, [ip]
   24b44:	tst	r1, r3
   24b48:	bne	24b80 <__assert_fail@plt+0x12fdc>
   24b4c:	mov	r3, #0
   24b50:	add	r3, r3, #1
   24b54:	ldr	r2, [lr, r3, lsl #5]
   24b58:	tst	r1, r2
   24b5c:	beq	24b50 <__assert_fail@plt+0x12fac>
   24b60:	add	r2, sp, #14464	; 0x3880
   24b64:	add	r2, r2, #48	; 0x30
   24b68:	add	r3, r2, r3, lsl #2
   24b6c:	ldr	r2, [r3, #-1028]	; 0xfffffbfc
   24b70:	str	r2, [r8]
   24b74:	ldr	r3, [r3, #-2052]	; 0xfffff7fc
   24b78:	str	r3, [r8, #1024]	; 0x400
   24b7c:	b	24af4 <__assert_fail@plt+0x12f50>
   24b80:	mov	r3, #0
   24b84:	b	24b60 <__assert_fail@plt+0x12fbc>
   24b88:	ldr	r1, [r2, r3, lsl #5]
   24b8c:	tst	r1, #1024	; 0x400
   24b90:	bne	24bac <__assert_fail@plt+0x13008>
   24b94:	add	r3, r3, #1
   24b98:	ldr	r1, [sp, #8]
   24b9c:	cmp	r1, r3
   24ba0:	bne	24b88 <__assert_fail@plt+0x12fe4>
   24ba4:	b	24bcc <__assert_fail@plt+0x13028>
   24ba8:	mov	r3, #0
   24bac:	add	r2, sp, #14464	; 0x3880
   24bb0:	add	r2, r2, #48	; 0x30
   24bb4:	add	r3, r2, r3, lsl #2
   24bb8:	ldr	r3, [r3, #-3076]	; 0xfffff3fc
   24bbc:	str	r3, [r0, #40]	; 0x28
   24bc0:	ldr	r2, [sp, #16]
   24bc4:	cmp	r2, #0
   24bc8:	strne	r3, [r0, #1064]	; 0x428
   24bcc:	add	r3, sp, #11392	; 0x2c80
   24bd0:	add	r3, r3, #40	; 0x28
   24bd4:	ldr	r0, [r3]
   24bd8:	bl	17204 <__assert_fail@plt+0x5660>
   24bdc:	mov	r4, #0
   24be0:	ldr	r5, [sp, #20]
   24be4:	ldr	r6, [sp, #8]
   24be8:	ldr	r0, [r5, #8]
   24bec:	bl	17204 <__assert_fail@plt+0x5660>
   24bf0:	add	r4, r4, #1
   24bf4:	add	r5, r5, #12
   24bf8:	cmp	r6, r4
   24bfc:	bne	24be8 <__assert_fail@plt+0x13044>
   24c00:	mov	r0, #1
   24c04:	b	2472c <__assert_fail@plt+0x12b88>
   24c08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c0c:	sub	sp, sp, #300	; 0x12c
   24c10:	ldr	r3, [r0]
   24c14:	str	r3, [sp, #4]
   24c18:	ldr	r3, [r3, #92]	; 0x5c
   24c1c:	cmp	r3, #1
   24c20:	ldreq	r3, [r0, #12]
   24c24:	lsreq	r3, r3, #22
   24c28:	andeq	r3, r3, #1
   24c2c:	movne	r3, #0
   24c30:	mov	sl, r3
   24c34:	ldr	r3, [r1, #8]
   24c38:	cmp	r3, #0
   24c3c:	ble	24f78 <__assert_fail@plt+0x133d4>
   24c40:	mov	r8, r2
   24c44:	str	r1, [sp, #16]
   24c48:	str	r0, [sp, #20]
   24c4c:	mov	r3, #0
   24c50:	str	r3, [sp, #8]
   24c54:	ldr	fp, [pc, #1020]	; 25058 <__assert_fail@plt+0x134b4>
   24c58:	b	24f0c <__assert_fail@plt+0x13368>
   24c5c:	ldrb	r5, [r2, r4, lsl #3]
   24c60:	strb	r3, [r8, r5]
   24c64:	cmp	sl, #0
   24c68:	beq	24c8c <__assert_fail@plt+0x130e8>
   24c6c:	add	r3, r5, #128	; 0x80
   24c70:	cmp	r3, fp
   24c74:	bhi	24c84 <__assert_fail@plt+0x130e0>
   24c78:	bl	11928 <__ctype_tolower_loc@plt>
   24c7c:	ldr	r3, [r0]
   24c80:	ldr	r5, [r3, r5, lsl #2]
   24c84:	mov	r3, #1
   24c88:	strb	r3, [r8, r5]
   24c8c:	ldr	r3, [sp, #20]
   24c90:	ldr	r3, [r3, #12]
   24c94:	tst	r3, #4194304	; 0x400000
   24c98:	beq	24eec <__assert_fail@plt+0x13348>
   24c9c:	ldr	ip, [sp, #4]
   24ca0:	ldr	r3, [ip, #92]	; 0x5c
   24ca4:	cmp	r3, #1
   24ca8:	ble	24eec <__assert_fail@plt+0x13348>
   24cac:	ldr	r3, [ip]
   24cb0:	ldrb	r3, [r3, r4, lsl #3]
   24cb4:	strb	r3, [sp, #40]	; 0x28
   24cb8:	add	r1, r4, #1
   24cbc:	ldr	r3, [ip, #8]
   24cc0:	cmp	r1, r3
   24cc4:	bcs	24d98 <__assert_fail@plt+0x131f4>
   24cc8:	ldr	r0, [sp, #12]
   24ccc:	add	r3, r0, #8
   24cd0:	ldr	r2, [ip]
   24cd4:	add	r3, r2, r3
   24cd8:	ldr	r2, [r3, #4]
   24cdc:	bic	r2, r2, #-16777216	; 0xff000000
   24ce0:	bic	r2, r2, #14614528	; 0xdf0000
   24ce4:	bic	r2, r2, #65280	; 0xff00
   24ce8:	ldr	lr, [pc, #876]	; 2505c <__assert_fail@plt+0x134b8>
   24cec:	cmp	r2, lr
   24cf0:	bne	24da0 <__assert_fail@plt+0x131fc>
   24cf4:	add	r0, r0, #16
   24cf8:	add	r4, sp, #41	; 0x29
   24cfc:	ldrb	r3, [r3]
   24d00:	strb	r3, [r4], #1
   24d04:	add	r1, r1, #1
   24d08:	ldr	r3, [ip, #8]
   24d0c:	cmp	r1, r3
   24d10:	bcs	24d3c <__assert_fail@plt+0x13198>
   24d14:	ldr	r3, [ip]
   24d18:	add	r3, r3, r0
   24d1c:	add	r0, r0, #8
   24d20:	ldr	r2, [r3, #4]
   24d24:	bic	r2, r2, #-16777216	; 0xff000000
   24d28:	bic	r2, r2, #14614528	; 0xdf0000
   24d2c:	bic	r2, r2, #65280	; 0xff00
   24d30:	ldr	lr, [pc, #804]	; 2505c <__assert_fail@plt+0x134b8>
   24d34:	cmp	r2, lr
   24d38:	beq	24cfc <__assert_fail@plt+0x13158>
   24d3c:	mov	r3, #0
   24d40:	str	r3, [sp, #32]
   24d44:	str	r3, [sp, #36]	; 0x24
   24d48:	add	r3, sp, #40	; 0x28
   24d4c:	sub	r4, r4, r3
   24d50:	add	r3, sp, #32
   24d54:	mov	r2, r4
   24d58:	add	r1, sp, #40	; 0x28
   24d5c:	add	r0, sp, #28
   24d60:	bl	1b49c <__assert_fail@plt+0x98f8>
   24d64:	cmp	r4, r0
   24d68:	bne	24eec <__assert_fail@plt+0x13348>
   24d6c:	ldr	r0, [sp, #28]
   24d70:	bl	117a8 <towlower@plt>
   24d74:	add	r2, sp, #32
   24d78:	mov	r1, r0
   24d7c:	add	r0, sp, #40	; 0x28
   24d80:	bl	116dc <wcrtomb@plt>
   24d84:	cmn	r0, #1
   24d88:	ldrbne	r3, [sp, #40]	; 0x28
   24d8c:	movne	r2, #1
   24d90:	strbne	r2, [r8, r3]
   24d94:	b	24eec <__assert_fail@plt+0x13348>
   24d98:	add	r4, sp, #41	; 0x29
   24d9c:	b	24d3c <__assert_fail@plt+0x13198>
   24da0:	add	r4, sp, #41	; 0x29
   24da4:	b	24d3c <__assert_fail@plt+0x13198>
   24da8:	mov	r3, #0
   24dac:	str	r3, [sp]
   24db0:	mov	r9, #1
   24db4:	b	24e1c <__assert_fail@plt+0x13278>
   24db8:	strb	r9, [r8, r3]
   24dbc:	add	r4, r4, #1
   24dc0:	add	r5, r5, #1
   24dc4:	add	r6, r6, #4
   24dc8:	cmp	r4, #32
   24dcc:	beq	24e08 <__assert_fail@plt+0x13264>
   24dd0:	lsr	r3, r7, r4
   24dd4:	tst	r3, #1
   24dd8:	beq	24dbc <__assert_fail@plt+0x13218>
   24ddc:	strb	r9, [r8, r5]
   24de0:	cmp	sl, #0
   24de4:	beq	24dbc <__assert_fail@plt+0x13218>
   24de8:	add	r3, r5, #128	; 0x80
   24dec:	cmp	r3, fp
   24df0:	movhi	r3, r5
   24df4:	bhi	24db8 <__assert_fail@plt+0x13214>
   24df8:	bl	11928 <__ctype_tolower_loc@plt>
   24dfc:	ldr	r3, [r0]
   24e00:	ldr	r3, [r3, r6]
   24e04:	b	24db8 <__assert_fail@plt+0x13214>
   24e08:	ldr	r3, [sp]
   24e0c:	add	r3, r3, #4
   24e10:	str	r3, [sp]
   24e14:	cmp	r3, #32
   24e18:	beq	24eec <__assert_fail@plt+0x13348>
   24e1c:	ldr	r2, [sp]
   24e20:	lsl	r5, r2, #3
   24e24:	ldr	r3, [sp, #4]
   24e28:	ldr	r3, [r3]
   24e2c:	ldr	r1, [sp, #12]
   24e30:	ldr	r3, [r3, r1]
   24e34:	ldr	r7, [r3, r2]
   24e38:	lsl	r6, r2, #5
   24e3c:	mov	r4, #0
   24e40:	b	24dd0 <__assert_fail@plt+0x1322c>
   24e44:	ldr	r5, [r2, r4, lsl #3]
   24e48:	ldr	r3, [sp, #4]
   24e4c:	ldr	r3, [r3, #92]	; 0x5c
   24e50:	cmp	r3, #1
   24e54:	ble	24e7c <__assert_fail@plt+0x132d8>
   24e58:	ldr	r3, [r5, #36]	; 0x24
   24e5c:	cmp	r3, #0
   24e60:	bne	24e9c <__assert_fail@plt+0x132f8>
   24e64:	ldrb	r3, [r5, #16]
   24e68:	tst	r3, #1
   24e6c:	bne	24e9c <__assert_fail@plt+0x132f8>
   24e70:	ldr	r3, [r5, #32]
   24e74:	cmp	r3, #0
   24e78:	bne	24e9c <__assert_fail@plt+0x132f8>
   24e7c:	ldr	r3, [r5, #20]
   24e80:	cmp	r3, #0
   24e84:	ble	24eec <__assert_fail@plt+0x13348>
   24e88:	mov	r4, #0
   24e8c:	mov	r9, r4
   24e90:	str	sl, [sp]
   24e94:	ldr	sl, [sp, #20]
   24e98:	b	24fe0 <__assert_fail@plt+0x1343c>
   24e9c:	mov	r3, #0
   24ea0:	strb	r3, [sp, #32]
   24ea4:	mov	r4, #0
   24ea8:	mov	r5, #1
   24eac:	str	r4, [sp, #40]	; 0x28
   24eb0:	str	r4, [sp, #44]	; 0x2c
   24eb4:	add	r3, sp, #40	; 0x28
   24eb8:	mov	r2, r5
   24ebc:	add	r1, sp, #32
   24ec0:	mov	r0, r4
   24ec4:	bl	1b49c <__assert_fail@plt+0x98f8>
   24ec8:	cmn	r0, #2
   24ecc:	ldrbeq	r3, [sp, #32]
   24ed0:	strbeq	r5, [r8, r3]
   24ed4:	ldrb	r3, [sp, #32]
   24ed8:	add	r3, r3, #1
   24edc:	uxtb	r3, r3
   24ee0:	strb	r3, [sp, #32]
   24ee4:	cmp	r3, #0
   24ee8:	bne	24eac <__assert_fail@plt+0x13308>
   24eec:	ldr	r3, [sp, #8]
   24ef0:	add	r3, r3, #1
   24ef4:	mov	r2, r3
   24ef8:	str	r3, [sp, #8]
   24efc:	ldr	r3, [sp, #16]
   24f00:	ldr	r3, [r3, #8]
   24f04:	cmp	r3, r2
   24f08:	ble	24f78 <__assert_fail@plt+0x133d4>
   24f0c:	ldr	r3, [sp, #16]
   24f10:	ldr	r3, [r3, #12]
   24f14:	ldr	r2, [sp, #8]
   24f18:	ldr	r4, [r3, r2, lsl #2]
   24f1c:	lsl	r3, r4, #3
   24f20:	str	r3, [sp, #12]
   24f24:	ldr	r2, [sp, #4]
   24f28:	ldr	r2, [r2]
   24f2c:	add	r3, r2, r3
   24f30:	ldrb	r3, [r3, #4]
   24f34:	mov	r5, r3
   24f38:	cmp	r3, #1
   24f3c:	beq	24c5c <__assert_fail@plt+0x130b8>
   24f40:	cmp	r3, #3
   24f44:	beq	24da8 <__assert_fail@plt+0x13204>
   24f48:	cmp	r3, #6
   24f4c:	beq	24e44 <__assert_fail@plt+0x132a0>
   24f50:	and	r2, r3, #253	; 0xfd
   24f54:	cmp	r3, #2
   24f58:	cmpne	r2, #5
   24f5c:	bne	24eec <__assert_fail@plt+0x13348>
   24f60:	mov	r2, #256	; 0x100
   24f64:	mov	r1, #1
   24f68:	mov	r0, r8
   24f6c:	bl	119e8 <memset@plt>
   24f70:	cmp	r5, #2
   24f74:	beq	25044 <__assert_fail@plt+0x134a0>
   24f78:	add	sp, sp, #300	; 0x12c
   24f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24f80:	mov	r3, #1
   24f84:	strb	r3, [r8, r6]
   24f88:	ldr	r3, [sl, #12]
   24f8c:	tst	r3, #4194304	; 0x400000
   24f90:	beq	24fd0 <__assert_fail@plt+0x1342c>
   24f94:	ldr	r3, [sp, #4]
   24f98:	ldr	r3, [r3, #92]	; 0x5c
   24f9c:	cmp	r3, #1
   24fa0:	ble	24fd0 <__assert_fail@plt+0x1342c>
   24fa4:	ldr	r3, [r5]
   24fa8:	ldr	r0, [r3, r7]
   24fac:	bl	117a8 <towlower@plt>
   24fb0:	add	r2, sp, #32
   24fb4:	mov	r1, r0
   24fb8:	add	r0, sp, #40	; 0x28
   24fbc:	bl	116dc <wcrtomb@plt>
   24fc0:	cmn	r0, #1
   24fc4:	ldrbne	r3, [sp, #40]	; 0x28
   24fc8:	movne	r2, #1
   24fcc:	strbne	r2, [r8, r3]
   24fd0:	add	r4, r4, #1
   24fd4:	ldr	r3, [r5, #20]
   24fd8:	cmp	r3, r4
   24fdc:	ble	2503c <__assert_fail@plt+0x13498>
   24fe0:	str	r9, [sp, #32]
   24fe4:	str	r9, [sp, #36]	; 0x24
   24fe8:	lsl	r7, r4, #2
   24fec:	ldr	r3, [r5]
   24ff0:	add	r2, sp, #32
   24ff4:	ldr	r1, [r3, r4, lsl #2]
   24ff8:	add	r0, sp, #40	; 0x28
   24ffc:	bl	116dc <wcrtomb@plt>
   25000:	cmn	r0, #1
   25004:	beq	24f88 <__assert_fail@plt+0x133e4>
   25008:	ldrb	r6, [sp, #40]	; 0x28
   2500c:	mov	r3, #1
   25010:	strb	r3, [r8, r6]
   25014:	ldr	r3, [sp]
   25018:	cmp	r3, #0
   2501c:	beq	24f88 <__assert_fail@plt+0x133e4>
   25020:	add	r3, r6, #128	; 0x80
   25024:	cmp	r3, fp
   25028:	bhi	24f80 <__assert_fail@plt+0x133dc>
   2502c:	bl	11928 <__ctype_tolower_loc@plt>
   25030:	ldr	r3, [r0]
   25034:	ldr	r6, [r3, r6, lsl #2]
   25038:	b	24f80 <__assert_fail@plt+0x133dc>
   2503c:	ldr	sl, [sp]
   25040:	b	24eec <__assert_fail@plt+0x13348>
   25044:	ldr	r2, [sp, #20]
   25048:	ldrb	r3, [r2, #28]
   2504c:	orr	r3, r3, #1
   25050:	strb	r3, [r2, #28]
   25054:	b	24f78 <__assert_fail@plt+0x133d4>
   25058:	andeq	r0, r0, pc, ror r1
   2505c:	eoreq	r0, r0, r1
   25060:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25064:	mov	r3, #0
   25068:	str	r3, [r0]
   2506c:	ldr	lr, [r2, #4]
   25070:	cmp	lr, r3
   25074:	beq	2525c <__assert_fail@plt+0x136b8>
   25078:	mov	r6, lr
   2507c:	ble	25098 <__assert_fail@plt+0x134f4>
   25080:	ldr	r3, [r2, #8]
   25084:	add	lr, r3, lr, lsl #2
   25088:	ldr	ip, [r3], #4
   2508c:	add	r6, r6, ip
   25090:	cmp	r3, lr
   25094:	bne	25088 <__assert_fail@plt+0x134e4>
   25098:	mov	sl, r2
   2509c:	mov	r7, r1
   250a0:	mov	r8, r0
   250a4:	ldr	r3, [r1, #68]	; 0x44
   250a8:	and	r3, r3, r6
   250ac:	add	r3, r3, r3, lsl #1
   250b0:	lsl	r3, r3, #2
   250b4:	ldr	r2, [r1, #32]
   250b8:	add	r1, r2, r3
   250bc:	ldr	fp, [r2, r3]
   250c0:	cmp	fp, #0
   250c4:	ble	2510c <__assert_fail@plt+0x13568>
   250c8:	ldr	r9, [r1, #8]
   250cc:	sub	r9, r9, #4
   250d0:	mov	r5, #0
   250d4:	b	250e4 <__assert_fail@plt+0x13540>
   250d8:	add	r5, r5, #1
   250dc:	cmp	r5, fp
   250e0:	beq	2510c <__assert_fail@plt+0x13568>
   250e4:	ldr	r4, [r9, #4]!
   250e8:	ldr	r3, [r4]
   250ec:	cmp	r6, r3
   250f0:	bne	250d8 <__assert_fail@plt+0x13534>
   250f4:	mov	r1, sl
   250f8:	add	r0, r4, #4
   250fc:	bl	1e3f8 <__assert_fail@plt+0xc854>
   25100:	cmp	r0, #0
   25104:	beq	250d8 <__assert_fail@plt+0x13534>
   25108:	b	25248 <__assert_fail@plt+0x136a4>
   2510c:	mov	r1, #1
   25110:	mov	r0, #56	; 0x38
   25114:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   25118:	subs	r4, r0, #0
   2511c:	beq	25164 <__assert_fail@plt+0x135c0>
   25120:	add	r5, r4, #4
   25124:	mov	r1, sl
   25128:	mov	r0, r5
   2512c:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   25130:	cmp	r0, #0
   25134:	bne	2515c <__assert_fail@plt+0x135b8>
   25138:	str	r5, [r4, #40]	; 0x28
   2513c:	ldr	lr, [sl, #4]
   25140:	cmp	lr, #0
   25144:	ble	25230 <__assert_fail@plt+0x1368c>
   25148:	ldr	r5, [r7]
   2514c:	ldr	ip, [sl, #8]
   25150:	add	lr, ip, lr, lsl #2
   25154:	ldr	r9, [pc, #264]	; 25264 <__assert_fail@plt+0x136c0>
   25158:	b	251c8 <__assert_fail@plt+0x13624>
   2515c:	mov	r0, r4
   25160:	bl	17204 <__assert_fail@plt+0x5660>
   25164:	mov	r3, #12
   25168:	str	r3, [r8]
   2516c:	mov	r4, #0
   25170:	b	25248 <__assert_fail@plt+0x136a4>
   25174:	ldr	r3, [r2, #4]
   25178:	tst	r3, r9
   2517c:	beq	251c0 <__assert_fail@plt+0x1361c>
   25180:	ldrb	r0, [r2, #6]
   25184:	ldrb	r3, [r4, #52]	; 0x34
   25188:	lsr	r1, r3, #5
   2518c:	orr	r1, r1, r0, lsr #4
   25190:	and	r1, r1, #1
   25194:	bic	r3, r3, #32
   25198:	orr	r3, r3, r1, lsl #5
   2519c:	strb	r3, [r4, #52]	; 0x34
   251a0:	b	25220 <__assert_fail@plt+0x1367c>
   251a4:	ldrb	r3, [r4, #52]	; 0x34
   251a8:	orr	r3, r3, #64	; 0x40
   251ac:	strb	r3, [r4, #52]	; 0x34
   251b0:	b	251c0 <__assert_fail@plt+0x1361c>
   251b4:	ldrb	r3, [r4, #52]	; 0x34
   251b8:	orr	r3, r3, #128	; 0x80
   251bc:	strb	r3, [r4, #52]	; 0x34
   251c0:	cmp	ip, lr
   251c4:	beq	25230 <__assert_fail@plt+0x1368c>
   251c8:	ldr	r2, [ip], #4
   251cc:	add	r2, r5, r2, lsl #3
   251d0:	ldrb	r0, [r2, #4]
   251d4:	cmp	r0, #1
   251d8:	beq	25174 <__assert_fail@plt+0x135d0>
   251dc:	ldrb	r1, [r4, #52]	; 0x34
   251e0:	ldrb	r3, [r2, #6]
   251e4:	lsr	r3, r3, #4
   251e8:	orr	r3, r3, r1, lsr #5
   251ec:	and	r3, r3, #1
   251f0:	bic	r1, r1, #32
   251f4:	orr	r3, r1, r3, lsl #5
   251f8:	strb	r3, [r4, #52]	; 0x34
   251fc:	cmp	r0, #2
   25200:	uxtbeq	r3, r3
   25204:	orreq	r3, r3, #16
   25208:	strbeq	r3, [r4, #52]	; 0x34
   2520c:	beq	251c0 <__assert_fail@plt+0x1361c>
   25210:	cmp	r0, #4
   25214:	beq	251a4 <__assert_fail@plt+0x13600>
   25218:	cmp	r0, #12
   2521c:	beq	251b4 <__assert_fail@plt+0x13610>
   25220:	ldr	r3, [r2, #4]
   25224:	tst	r3, r9
   25228:	beq	251c0 <__assert_fail@plt+0x1361c>
   2522c:	b	251b4 <__assert_fail@plt+0x13610>
   25230:	mov	r2, r6
   25234:	mov	r1, r4
   25238:	mov	r0, r7
   2523c:	bl	1f44c <__assert_fail@plt+0xd8a8>
   25240:	cmp	r0, #0
   25244:	bne	25250 <__assert_fail@plt+0x136ac>
   25248:	mov	r0, r4
   2524c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25250:	mov	r0, r4
   25254:	bl	21004 <__assert_fail@plt+0xf460>
   25258:	b	25164 <__assert_fail@plt+0x135c0>
   2525c:	mov	r4, #0
   25260:	b	25248 <__assert_fail@plt+0x136a4>
   25264:	andeq	pc, r3, r0, lsl #30
   25268:	push	{r4, r5, r6, r7, r8, r9, lr}
   2526c:	sub	sp, sp, #20
   25270:	subs	r8, r3, #0
   25274:	ble	25314 <__assert_fail@plt+0x13770>
   25278:	mov	r9, r0
   2527c:	mov	r4, r1
   25280:	mov	r5, r2
   25284:	mov	r6, #0
   25288:	b	252a8 <__assert_fail@plt+0x13704>
   2528c:	ldr	r3, [r5]
   25290:	str	r3, [r4]
   25294:	add	r6, r6, #1
   25298:	add	r4, r4, #4
   2529c:	add	r5, r5, #4
   252a0:	cmp	r8, r6
   252a4:	beq	2530c <__assert_fail@plt+0x13768>
   252a8:	ldr	r1, [r4]
   252ac:	cmp	r1, #0
   252b0:	beq	2528c <__assert_fail@plt+0x136e8>
   252b4:	ldr	r2, [r5]
   252b8:	cmp	r2, #0
   252bc:	beq	25294 <__assert_fail@plt+0x136f0>
   252c0:	add	r2, r2, #4
   252c4:	add	r1, r1, #4
   252c8:	mov	r0, sp
   252cc:	bl	1f924 <__assert_fail@plt+0xdd80>
   252d0:	str	r0, [sp, #12]
   252d4:	cmp	r0, #0
   252d8:	bne	25304 <__assert_fail@plt+0x13760>
   252dc:	mov	r2, sp
   252e0:	mov	r1, r9
   252e4:	add	r0, sp, #12
   252e8:	bl	25060 <__assert_fail@plt+0x134bc>
   252ec:	str	r0, [r4]
   252f0:	ldr	r0, [sp, #8]
   252f4:	bl	17204 <__assert_fail@plt+0x5660>
   252f8:	ldr	r0, [sp, #12]
   252fc:	cmp	r0, #0
   25300:	beq	25294 <__assert_fail@plt+0x136f0>
   25304:	add	sp, sp, #20
   25308:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2530c:	mov	r0, #0
   25310:	b	25304 <__assert_fail@plt+0x13760>
   25314:	mov	r0, #0
   25318:	b	25304 <__assert_fail@plt+0x13760>
   2531c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25320:	sub	sp, sp, #28
   25324:	mov	sl, r0
   25328:	mov	r7, r1
   2532c:	mov	r8, r2
   25330:	str	r3, [sp, #4]
   25334:	mov	r1, r2
   25338:	bl	1ea90 <__assert_fail@plt+0xceec>
   2533c:	cmn	r0, #1
   25340:	moveq	r0, #0
   25344:	beq	2551c <__assert_fail@plt+0x13978>
   25348:	ldr	fp, [sl, #84]	; 0x54
   2534c:	add	r0, r0, r0, lsl #1
   25350:	lsl	r0, r0, #3
   25354:	add	r3, r0, #24
   25358:	str	r3, [sp]
   2535c:	b	254bc <__assert_fail@plt+0x13918>
   25360:	ldr	r3, [fp, #20]
   25364:	add	r6, r6, r6, lsl #1
   25368:	add	r6, r3, r6, lsl #2
   2536c:	ldr	r3, [r6, #8]
   25370:	ldr	r5, [r3]
   25374:	mov	r1, r5
   25378:	mov	r0, r7
   2537c:	bl	1e46c <__assert_fail@plt+0xc8c8>
   25380:	cmp	r0, #0
   25384:	beq	2546c <__assert_fail@plt+0x138c8>
   25388:	add	r4, r4, #24
   2538c:	ldrb	r3, [r4, #-28]	; 0xffffffe4
   25390:	cmp	r3, #0
   25394:	beq	25518 <__assert_fail@plt+0x13974>
   25398:	ldr	r6, [r4, #-24]	; 0xffffffe8
   2539c:	mov	r1, r6
   253a0:	mov	r0, r7
   253a4:	bl	1e46c <__assert_fail@plt+0xc8c8>
   253a8:	cmp	r0, #0
   253ac:	beq	25388 <__assert_fail@plt+0x137e4>
   253b0:	ldr	r5, [r4, #-12]
   253b4:	add	r5, r8, r5
   253b8:	ldr	r3, [r4, #-16]
   253bc:	sub	r5, r5, r3
   253c0:	cmp	r8, r5
   253c4:	beq	25360 <__assert_fail@plt+0x137bc>
   253c8:	ldr	r3, [fp, #12]
   253cc:	ldr	r9, [r3, r6, lsl #2]
   253d0:	ldr	r3, [sl, #100]	; 0x64
   253d4:	ldr	r6, [r3, r5, lsl #2]
   253d8:	cmp	r6, #0
   253dc:	beq	254fc <__assert_fail@plt+0x13958>
   253e0:	add	r6, r6, #4
   253e4:	mov	r1, r9
   253e8:	mov	r0, r6
   253ec:	bl	1e46c <__assert_fail@plt+0xc8c8>
   253f0:	cmp	r0, #0
   253f4:	bne	25388 <__assert_fail@plt+0x137e4>
   253f8:	mov	r1, r6
   253fc:	add	r0, sp, #8
   25400:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   25404:	str	r0, [sp, #20]
   25408:	mov	r1, r9
   2540c:	add	r0, sp, #8
   25410:	bl	21800 <__assert_fail@plt+0xfc5c>
   25414:	eor	r0, r0, #1
   25418:	ldr	r3, [sp, #20]
   2541c:	cmp	r3, #0
   25420:	orrne	r0, r0, #1
   25424:	tst	r0, #255	; 0xff
   25428:	bne	254e4 <__assert_fail@plt+0x13940>
   2542c:	ldr	r6, [sl, #100]	; 0x64
   25430:	add	r2, sp, #8
   25434:	mov	r1, fp
   25438:	add	r0, sp, #20
   2543c:	bl	25060 <__assert_fail@plt+0x134bc>
   25440:	str	r0, [r6, r5, lsl #2]
   25444:	ldr	r0, [sp, #16]
   25448:	bl	17204 <__assert_fail@plt+0x5660>
   2544c:	ldr	r3, [sl, #100]	; 0x64
   25450:	ldr	r3, [r3, r5, lsl #2]
   25454:	cmp	r3, #0
   25458:	bne	25388 <__assert_fail@plt+0x137e4>
   2545c:	ldr	r0, [sp, #20]
   25460:	cmp	r0, #0
   25464:	beq	25388 <__assert_fail@plt+0x137e4>
   25468:	b	2551c <__assert_fail@plt+0x13978>
   2546c:	mov	r1, r5
   25470:	add	r0, sp, #8
   25474:	bl	1f3d8 <__assert_fail@plt+0xd834>
   25478:	str	r0, [sp, #20]
   2547c:	ldr	r3, [sp, #64]	; 0x40
   25480:	ldr	r2, [sp, #4]
   25484:	add	r1, sp, #8
   25488:	mov	r0, fp
   2548c:	bl	22540 <__assert_fail@plt+0x1099c>
   25490:	mov	r4, r0
   25494:	add	r1, sp, #8
   25498:	mov	r0, r7
   2549c:	bl	21d44 <__assert_fail@plt+0x101a0>
   254a0:	mov	r5, r0
   254a4:	ldr	r0, [sp, #16]
   254a8:	bl	17204 <__assert_fail@plt+0x5660>
   254ac:	ldr	r0, [sp, #20]
   254b0:	orr	r3, r4, r5
   254b4:	orrs	r3, r3, r0
   254b8:	bne	254cc <__assert_fail@plt+0x13928>
   254bc:	ldr	r4, [sl, #116]	; 0x74
   254c0:	ldr	r3, [sp]
   254c4:	add	r4, r4, r3
   254c8:	b	25398 <__assert_fail@plt+0x137f4>
   254cc:	cmp	r0, #0
   254d0:	bne	2551c <__assert_fail@plt+0x13978>
   254d4:	cmp	r4, #0
   254d8:	movne	r0, r4
   254dc:	moveq	r0, r5
   254e0:	b	2551c <__assert_fail@plt+0x13978>
   254e4:	ldr	r0, [sp, #16]
   254e8:	bl	17204 <__assert_fail@plt+0x5660>
   254ec:	ldr	r0, [sp, #20]
   254f0:	cmp	r0, #0
   254f4:	moveq	r0, #12
   254f8:	b	2551c <__assert_fail@plt+0x13978>
   254fc:	mov	r1, r9
   25500:	add	r0, sp, #8
   25504:	bl	1f3d8 <__assert_fail@plt+0xd834>
   25508:	str	r0, [sp, #20]
   2550c:	cmp	r0, #0
   25510:	beq	2542c <__assert_fail@plt+0x13888>
   25514:	b	2551c <__assert_fail@plt+0x13978>
   25518:	mov	r0, #0
   2551c:	add	sp, sp, #28
   25520:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25528:	sub	sp, sp, #92	; 0x5c
   2552c:	mov	sl, r0
   25530:	str	r1, [sp, #44]	; 0x2c
   25534:	mov	r7, r2
   25538:	mov	r5, r3
   2553c:	ldr	r3, [r0, #84]	; 0x54
   25540:	mov	r2, r3
   25544:	str	r3, [sp, #36]	; 0x24
   25548:	mov	r3, #0
   2554c:	str	r3, [sp, #84]	; 0x54
   25550:	ldr	r3, [r2]
   25554:	ldr	r3, [r3, r7, lsl #3]
   25558:	str	r3, [sp, #40]	; 0x28
   2555c:	ldr	r6, [r1, #4]
   25560:	ldr	r4, [r0, #120]	; 0x78
   25564:	ldr	r3, [sp, #132]	; 0x84
   25568:	add	r4, r3, r4
   2556c:	add	r4, r4, #1
   25570:	cmp	r6, r4
   25574:	blt	2568c <__assert_fail@plt+0x13ae8>
   25578:	ldr	r3, [sp, #44]	; 0x2c
   2557c:	ldr	fp, [r3]
   25580:	cmp	fp, #0
   25584:	beq	25afc <__assert_fail@plt+0x13f58>
   25588:	ldr	r2, [sl, #100]	; 0x64
   2558c:	str	r2, [sp, #48]	; 0x30
   25590:	ldr	r2, [sl, #40]	; 0x28
   25594:	str	r2, [sp, #52]	; 0x34
   25598:	ldr	r6, [r3, #8]
   2559c:	str	r6, [sl, #100]	; 0x64
   255a0:	str	fp, [sl, #40]	; 0x28
   255a4:	str	sl, [sp, #20]
   255a8:	ldr	r2, [sl, #88]	; 0x58
   255ac:	sub	r1, fp, #1
   255b0:	mov	r0, sl
   255b4:	bl	22118 <__assert_fail@plt+0x10574>
   255b8:	mov	r4, r0
   255bc:	cmp	fp, r5
   255c0:	beq	25b34 <__assert_fail@plt+0x13f90>
   255c4:	ldr	r6, [r6, fp, lsl #2]
   255c8:	cmp	r6, #0
   255cc:	beq	25ba0 <__assert_fail@plt+0x13ffc>
   255d0:	ldrb	r3, [r6, #52]	; 0x34
   255d4:	tst	r3, #64	; 0x40
   255d8:	bne	256dc <__assert_fail@plt+0x13b38>
   255dc:	mov	r3, #0
   255e0:	str	r3, [sp, #72]	; 0x48
   255e4:	str	r3, [sp, #76]	; 0x4c
   255e8:	str	r3, [sp, #80]	; 0x50
   255ec:	ldrb	r3, [r6, #52]	; 0x34
   255f0:	tst	r3, #64	; 0x40
   255f4:	beq	25650 <__assert_fail@plt+0x13aac>
   255f8:	ldr	r3, [sp, #76]	; 0x4c
   255fc:	cmp	r3, #0
   25600:	beq	2562c <__assert_fail@plt+0x13a88>
   25604:	ldr	r3, [sp, #136]	; 0x88
   25608:	str	r3, [sp]
   2560c:	ldr	r3, [sp, #40]	; 0x28
   25610:	mov	r2, fp
   25614:	add	r1, sp, #72	; 0x48
   25618:	mov	r0, sl
   2561c:	bl	2531c <__assert_fail@plt+0x13778>
   25620:	str	r0, [sp, #84]	; 0x54
   25624:	cmp	r0, #0
   25628:	bne	256f8 <__assert_fail@plt+0x13b54>
   2562c:	mov	r3, r4
   25630:	add	r2, sp, #72	; 0x48
   25634:	ldr	r1, [sp, #36]	; 0x24
   25638:	add	r0, sp, #84	; 0x54
   2563c:	bl	21060 <__assert_fail@plt+0xf4bc>
   25640:	subs	r6, r0, #0
   25644:	beq	25708 <__assert_fail@plt+0x13b64>
   25648:	ldr	r3, [sl, #100]	; 0x64
   2564c:	str	r6, [r3, fp, lsl #2]
   25650:	ldr	r3, [sp, #132]	; 0x84
   25654:	cmp	r3, fp
   25658:	ble	25acc <__assert_fail@plt+0x13f28>
   2565c:	ldr	r3, [sl, #120]	; 0x78
   25660:	cmp	r3, #0
   25664:	blt	25ad4 <__assert_fail@plt+0x13f30>
   25668:	add	r3, fp, #1
   2566c:	lsl	r3, r3, #2
   25670:	str	r3, [sp, #16]
   25674:	mov	r3, #0
   25678:	str	r3, [sp, #32]
   2567c:	mov	r9, r3
   25680:	str	fp, [sp, #12]
   25684:	mov	fp, sl
   25688:	b	2599c <__assert_fail@plt+0x13df8>
   2568c:	mvn	r3, #-2147483648	; 0x80000000
   25690:	sub	r3, r3, r6
   25694:	cmp	r4, r3
   25698:	bgt	25ae4 <__assert_fail@plt+0x13f40>
   2569c:	add	r8, r6, r4
   256a0:	cmn	r8, #-1073741823	; 0xc0000001
   256a4:	bhi	25aec <__assert_fail@plt+0x13f48>
   256a8:	lsl	r1, r8, #2
   256ac:	ldr	r9, [sp, #44]	; 0x2c
   256b0:	ldr	r0, [r9, #8]
   256b4:	bl	2d434 <__assert_fail@plt+0x1b890>
   256b8:	cmp	r0, #0
   256bc:	beq	25af4 <__assert_fail@plt+0x13f50>
   256c0:	str	r0, [r9, #8]
   256c4:	str	r8, [r9, #4]
   256c8:	lsl	r2, r4, #2
   256cc:	mov	r1, #0
   256d0:	add	r0, r0, r6, lsl #2
   256d4:	bl	119e8 <memset@plt>
   256d8:	b	25578 <__assert_fail@plt+0x139d4>
   256dc:	add	r1, r6, #4
   256e0:	add	r0, sp, #72	; 0x48
   256e4:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   256e8:	str	r0, [sp, #84]	; 0x54
   256ec:	cmp	r0, #0
   256f0:	beq	255ec <__assert_fail@plt+0x13a48>
   256f4:	b	25730 <__assert_fail@plt+0x13b8c>
   256f8:	ldr	r0, [sp, #80]	; 0x50
   256fc:	bl	17204 <__assert_fail@plt+0x5660>
   25700:	ldr	r0, [sp, #84]	; 0x54
   25704:	b	25730 <__assert_fail@plt+0x13b8c>
   25708:	ldr	r3, [sp, #84]	; 0x54
   2570c:	cmp	r3, #0
   25710:	beq	25648 <__assert_fail@plt+0x13aa4>
   25714:	ldr	r0, [sp, #80]	; 0x50
   25718:	bl	17204 <__assert_fail@plt+0x5660>
   2571c:	ldr	r0, [sp, #84]	; 0x54
   25720:	b	25730 <__assert_fail@plt+0x13b8c>
   25724:	ldr	r0, [sp, #80]	; 0x50
   25728:	bl	17204 <__assert_fail@plt+0x5660>
   2572c:	ldr	r0, [sp, #84]	; 0x54
   25730:	add	sp, sp, #92	; 0x5c
   25734:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25738:	ldr	r3, [sp, #12]
   2573c:	ldr	r2, [sp, #20]
   25740:	mov	r0, r5
   25744:	bl	2354c <__assert_fail@plt+0x119a8>
   25748:	mov	r8, r0
   2574c:	cmp	r0, #1
   25750:	ble	257e4 <__assert_fail@plt+0x13c40>
   25754:	ldr	r3, [r5, #12]
   25758:	ldr	r2, [r3, fp, lsl #2]
   2575c:	str	r2, [sp, #24]
   25760:	ldr	r3, [sp, #12]
   25764:	add	r3, r3, r0
   25768:	mov	r2, r3
   2576c:	str	r3, [sp, #28]
   25770:	ldr	r3, [sl, #100]	; 0x64
   25774:	ldr	r1, [r3, r2, lsl #2]
   25778:	str	r9, [sp, #64]	; 0x40
   2577c:	cmp	r1, #0
   25780:	beq	2579c <__assert_fail@plt+0x13bf8>
   25784:	add	r1, r1, #4
   25788:	add	r0, sp, #60	; 0x3c
   2578c:	bl	21d44 <__assert_fail@plt+0x101a0>
   25790:	str	r0, [sp, #56]	; 0x38
   25794:	cmp	r0, #0
   25798:	bne	25858 <__assert_fail@plt+0x13cb4>
   2579c:	ldr	r1, [sp, #24]
   257a0:	add	r0, sp, #60	; 0x3c
   257a4:	bl	21800 <__assert_fail@plt+0xfc5c>
   257a8:	cmp	r0, #0
   257ac:	beq	25878 <__assert_fail@plt+0x13cd4>
   257b0:	ldr	r3, [sl, #100]	; 0x64
   257b4:	str	r3, [sp, #24]
   257b8:	add	r2, sp, #60	; 0x3c
   257bc:	mov	r1, r5
   257c0:	add	r0, sp, #56	; 0x38
   257c4:	bl	25060 <__assert_fail@plt+0x134bc>
   257c8:	ldr	r1, [sp, #24]
   257cc:	ldr	r2, [sp, #28]
   257d0:	str	r0, [r1, r2, lsl #2]
   257d4:	ldr	r3, [sl, #100]	; 0x64
   257d8:	ldr	r3, [r3, r2, lsl #2]
   257dc:	cmp	r3, #0
   257e0:	beq	25884 <__assert_fail@plt+0x13ce0>
   257e4:	cmp	r8, #0
   257e8:	beq	25838 <__assert_fail@plt+0x13c94>
   257ec:	ldr	r3, [r5, #12]
   257f0:	ldr	r1, [r3, fp, lsl #2]
   257f4:	add	r0, sp, #72	; 0x48
   257f8:	bl	21800 <__assert_fail@plt+0xfc5c>
   257fc:	cmp	r0, #0
   25800:	beq	258a4 <__assert_fail@plt+0x13d00>
   25804:	add	r4, r4, #1
   25808:	ldr	r3, [r6, #20]
   2580c:	cmp	r4, r3
   25810:	bge	258c4 <__assert_fail@plt+0x13d20>
   25814:	ldr	r3, [r6, #24]
   25818:	ldr	r1, [r3, r4, lsl #2]
   2581c:	mov	fp, r1
   25820:	lsl	r7, r1, #3
   25824:	ldr	r3, [r5]
   25828:	add	r3, r3, r7
   2582c:	ldrb	r3, [r3, #6]
   25830:	tst	r3, #16
   25834:	bne	25738 <__assert_fail@plt+0x13b94>
   25838:	ldr	r1, [r5]
   2583c:	ldr	r2, [sp, #12]
   25840:	add	r1, r1, r7
   25844:	mov	r0, sl
   25848:	bl	2222c <__assert_fail@plt+0x10688>
   2584c:	cmp	r0, #0
   25850:	beq	25804 <__assert_fail@plt+0x13c60>
   25854:	b	257ec <__assert_fail@plt+0x13c48>
   25858:	mov	fp, sl
   2585c:	ldr	r0, [sp, #68]	; 0x44
   25860:	bl	17204 <__assert_fail@plt+0x5660>
   25864:	ldr	r3, [sp, #56]	; 0x38
   25868:	str	r3, [sp, #84]	; 0x54
   2586c:	cmp	r3, #0
   25870:	beq	258d4 <__assert_fail@plt+0x13d30>
   25874:	b	258b4 <__assert_fail@plt+0x13d10>
   25878:	ldr	r0, [sp, #68]	; 0x44
   2587c:	bl	17204 <__assert_fail@plt+0x5660>
   25880:	b	258ac <__assert_fail@plt+0x13d08>
   25884:	ldr	r3, [sp, #56]	; 0x38
   25888:	cmp	r3, #0
   2588c:	beq	257e4 <__assert_fail@plt+0x13c40>
   25890:	mov	fp, sl
   25894:	ldr	r0, [sp, #68]	; 0x44
   25898:	bl	17204 <__assert_fail@plt+0x5660>
   2589c:	ldr	r3, [sp, #56]	; 0x38
   258a0:	b	25868 <__assert_fail@plt+0x13cc4>
   258a4:	ldr	r0, [sp, #68]	; 0x44
   258a8:	bl	17204 <__assert_fail@plt+0x5660>
   258ac:	mov	r3, #12
   258b0:	str	r3, [sp, #84]	; 0x54
   258b4:	ldr	r0, [sp, #80]	; 0x50
   258b8:	bl	17204 <__assert_fail@plt+0x5660>
   258bc:	ldr	r0, [sp, #84]	; 0x54
   258c0:	b	25730 <__assert_fail@plt+0x13b8c>
   258c4:	mov	fp, sl
   258c8:	ldr	r0, [sp, #68]	; 0x44
   258cc:	bl	17204 <__assert_fail@plt+0x5660>
   258d0:	str	r9, [sp, #84]	; 0x54
   258d4:	ldr	r3, [sp, #12]
   258d8:	add	r4, r3, #1
   258dc:	ldr	r3, [sp, #76]	; 0x4c
   258e0:	cmp	r3, #0
   258e4:	beq	25930 <__assert_fail@plt+0x13d8c>
   258e8:	ldr	r3, [sp, #136]	; 0x88
   258ec:	ldr	r2, [sp, #40]	; 0x28
   258f0:	add	r1, sp, #72	; 0x48
   258f4:	ldr	r0, [sp, #36]	; 0x24
   258f8:	bl	22540 <__assert_fail@plt+0x1099c>
   258fc:	str	r0, [sp, #84]	; 0x54
   25900:	cmp	r0, #0
   25904:	bne	25a1c <__assert_fail@plt+0x13e78>
   25908:	ldr	r3, [sp, #136]	; 0x88
   2590c:	str	r3, [sp]
   25910:	ldr	r3, [sp, #40]	; 0x28
   25914:	mov	r2, r4
   25918:	add	r1, sp, #72	; 0x48
   2591c:	mov	r0, fp
   25920:	bl	2531c <__assert_fail@plt+0x13778>
   25924:	str	r0, [sp, #84]	; 0x54
   25928:	cmp	r0, #0
   2592c:	bne	25a2c <__assert_fail@plt+0x13e88>
   25930:	ldr	r2, [fp, #88]	; 0x58
   25934:	ldr	r1, [sp, #12]
   25938:	ldr	r0, [sp, #20]
   2593c:	bl	22118 <__assert_fail@plt+0x10574>
   25940:	mov	r3, r0
   25944:	add	r2, sp, #72	; 0x48
   25948:	ldr	r1, [sp, #36]	; 0x24
   2594c:	add	r0, sp, #84	; 0x54
   25950:	bl	21060 <__assert_fail@plt+0xf4bc>
   25954:	subs	r6, r0, #0
   25958:	beq	25a3c <__assert_fail@plt+0x13e98>
   2595c:	ldr	r3, [fp, #100]	; 0x64
   25960:	ldr	r2, [sp, #16]
   25964:	str	r6, [r3, r2]
   25968:	mov	r3, #0
   2596c:	str	r3, [sp, #32]
   25970:	ldr	r3, [sp, #132]	; 0x84
   25974:	cmp	r3, r4
   25978:	ble	25adc <__assert_fail@plt+0x13f38>
   2597c:	ldr	r3, [sp, #16]
   25980:	add	r3, r3, #4
   25984:	str	r3, [sp, #16]
   25988:	ldr	r3, [fp, #120]	; 0x78
   2598c:	ldr	r2, [sp, #32]
   25990:	cmp	r2, r3
   25994:	bgt	25a74 <__assert_fail@plt+0x13ed0>
   25998:	str	r4, [sp, #12]
   2599c:	str	r9, [sp, #76]	; 0x4c
   259a0:	ldr	r3, [fp, #100]	; 0x64
   259a4:	ldr	r2, [sp, #16]
   259a8:	ldr	r1, [r3, r2]
   259ac:	cmp	r1, #0
   259b0:	beq	25bb4 <__assert_fail@plt+0x14010>
   259b4:	add	r1, r1, #4
   259b8:	add	r0, sp, #72	; 0x48
   259bc:	bl	21d44 <__assert_fail@plt+0x101a0>
   259c0:	str	r0, [sp, #84]	; 0x54
   259c4:	cmp	r0, #0
   259c8:	bne	25724 <__assert_fail@plt+0x13b80>
   259cc:	cmp	r6, #0
   259d0:	beq	258d4 <__assert_fail@plt+0x13d30>
   259d4:	ldr	r5, [fp, #84]	; 0x54
   259d8:	str	r9, [sp, #56]	; 0x38
   259dc:	str	r9, [sp, #60]	; 0x3c
   259e0:	str	r9, [sp, #64]	; 0x40
   259e4:	str	r9, [sp, #68]	; 0x44
   259e8:	ldr	r3, [r6, #20]
   259ec:	cmp	r3, #0
   259f0:	ble	258c8 <__assert_fail@plt+0x13d24>
   259f4:	ldr	r3, [r6, #24]
   259f8:	ldr	r1, [r3]
   259fc:	lsl	r7, r1, #3
   25a00:	ldr	r3, [r5]
   25a04:	add	r3, r3, r7
   25a08:	mov	r4, #0
   25a0c:	mov	r2, fp
   25a10:	mov	fp, r1
   25a14:	mov	sl, r2
   25a18:	b	2582c <__assert_fail@plt+0x13c88>
   25a1c:	ldr	r0, [sp, #80]	; 0x50
   25a20:	bl	17204 <__assert_fail@plt+0x5660>
   25a24:	ldr	r0, [sp, #84]	; 0x54
   25a28:	b	25730 <__assert_fail@plt+0x13b8c>
   25a2c:	ldr	r0, [sp, #80]	; 0x50
   25a30:	bl	17204 <__assert_fail@plt+0x5660>
   25a34:	ldr	r0, [sp, #84]	; 0x54
   25a38:	b	25730 <__assert_fail@plt+0x13b8c>
   25a3c:	ldr	r3, [sp, #84]	; 0x54
   25a40:	cmp	r3, #0
   25a44:	bne	25a64 <__assert_fail@plt+0x13ec0>
   25a48:	ldr	r3, [fp, #100]	; 0x64
   25a4c:	ldr	r2, [sp, #16]
   25a50:	str	r9, [r3, r2]
   25a54:	ldr	r3, [sp, #32]
   25a58:	add	r3, r3, #1
   25a5c:	str	r3, [sp, #32]
   25a60:	b	25970 <__assert_fail@plt+0x13dcc>
   25a64:	ldr	r0, [sp, #80]	; 0x50
   25a68:	bl	17204 <__assert_fail@plt+0x5660>
   25a6c:	ldr	r0, [sp, #84]	; 0x54
   25a70:	b	25730 <__assert_fail@plt+0x13b8c>
   25a74:	mov	sl, fp
   25a78:	ldr	r0, [sp, #80]	; 0x50
   25a7c:	bl	17204 <__assert_fail@plt+0x5660>
   25a80:	ldr	r3, [sl, #100]	; 0x64
   25a84:	ldr	r2, [sp, #132]	; 0x84
   25a88:	ldr	r3, [r3, r2, lsl #2]
   25a8c:	cmp	r3, #0
   25a90:	beq	25b80 <__assert_fail@plt+0x13fdc>
   25a94:	ldr	r2, [sp, #44]	; 0x2c
   25a98:	str	r4, [r2]
   25a9c:	ldr	r2, [sp, #48]	; 0x30
   25aa0:	str	r2, [sl, #100]	; 0x64
   25aa4:	ldr	r2, [sp, #52]	; 0x34
   25aa8:	str	r2, [sl, #40]	; 0x28
   25aac:	adds	r0, r3, #4
   25ab0:	moveq	r0, #1
   25ab4:	beq	25730 <__assert_fail@plt+0x13b8c>
   25ab8:	ldr	r1, [sp, #128]	; 0x80
   25abc:	bl	1e46c <__assert_fail@plt+0xc8c8>
   25ac0:	clz	r0, r0
   25ac4:	lsr	r0, r0, #5
   25ac8:	b	25730 <__assert_fail@plt+0x13b8c>
   25acc:	mov	r4, fp
   25ad0:	b	25a78 <__assert_fail@plt+0x13ed4>
   25ad4:	mov	r4, fp
   25ad8:	b	25a78 <__assert_fail@plt+0x13ed4>
   25adc:	mov	sl, fp
   25ae0:	b	25a78 <__assert_fail@plt+0x13ed4>
   25ae4:	mov	r0, #12
   25ae8:	b	25730 <__assert_fail@plt+0x13b8c>
   25aec:	mov	r0, #12
   25af0:	b	25730 <__assert_fail@plt+0x13b8c>
   25af4:	mov	r0, #12
   25af8:	b	25730 <__assert_fail@plt+0x13b8c>
   25afc:	ldr	r3, [sl, #100]	; 0x64
   25b00:	str	r3, [sp, #48]	; 0x30
   25b04:	ldr	r3, [sl, #40]	; 0x28
   25b08:	str	r3, [sp, #52]	; 0x34
   25b0c:	ldr	r3, [sp, #44]	; 0x2c
   25b10:	ldr	r3, [r3, #8]
   25b14:	str	r3, [sl, #100]	; 0x64
   25b18:	str	r5, [sl, #40]	; 0x28
   25b1c:	str	sl, [sp, #20]
   25b20:	ldr	r2, [sl, #88]	; 0x58
   25b24:	sub	r1, r5, #1
   25b28:	mov	r0, sl
   25b2c:	bl	22118 <__assert_fail@plt+0x10574>
   25b30:	mov	r4, r0
   25b34:	mov	r1, r7
   25b38:	add	r0, sp, #72	; 0x48
   25b3c:	bl	1f3d8 <__assert_fail@plt+0xd834>
   25b40:	str	r0, [sp, #84]	; 0x54
   25b44:	cmp	r0, #0
   25b48:	bne	25730 <__assert_fail@plt+0x13b8c>
   25b4c:	ldr	r3, [sp, #136]	; 0x88
   25b50:	ldr	r2, [sp, #40]	; 0x28
   25b54:	add	r1, sp, #72	; 0x48
   25b58:	ldr	r0, [sp, #36]	; 0x24
   25b5c:	bl	22540 <__assert_fail@plt+0x1099c>
   25b60:	str	r0, [sp, #84]	; 0x54
   25b64:	cmp	r0, #0
   25b68:	moveq	fp, r5
   25b6c:	beq	255f8 <__assert_fail@plt+0x13a54>
   25b70:	ldr	r0, [sp, #80]	; 0x50
   25b74:	bl	17204 <__assert_fail@plt+0x5660>
   25b78:	ldr	r0, [sp, #84]	; 0x54
   25b7c:	b	25730 <__assert_fail@plt+0x13b8c>
   25b80:	ldr	r3, [sp, #44]	; 0x2c
   25b84:	str	r4, [r3]
   25b88:	ldr	r3, [sp, #48]	; 0x30
   25b8c:	str	r3, [sl, #100]	; 0x64
   25b90:	ldr	r3, [sp, #52]	; 0x34
   25b94:	str	r3, [sl, #40]	; 0x28
   25b98:	mov	r0, #1
   25b9c:	b	25730 <__assert_fail@plt+0x13b8c>
   25ba0:	mov	r3, #0
   25ba4:	str	r3, [sp, #72]	; 0x48
   25ba8:	str	r3, [sp, #76]	; 0x4c
   25bac:	str	r3, [sp, #80]	; 0x50
   25bb0:	b	25650 <__assert_fail@plt+0x13aac>
   25bb4:	cmp	r6, #0
   25bb8:	bne	259d4 <__assert_fail@plt+0x13e30>
   25bbc:	ldr	r3, [sp, #12]
   25bc0:	add	r4, r3, #1
   25bc4:	b	25930 <__assert_fail@plt+0x13d8c>
   25bc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25bcc:	sub	sp, sp, #16
   25bd0:	mov	r4, r0
   25bd4:	mov	r8, r1
   25bd8:	mov	r6, r2
   25bdc:	mov	r9, r3
   25be0:	ldr	r5, [sp, #48]	; 0x30
   25be4:	mov	r1, r2
   25be8:	ldr	r2, [r1], #8
   25bec:	mov	r3, #8
   25bf0:	str	r3, [sp, #8]
   25bf4:	str	r5, [sp, #4]
   25bf8:	str	r9, [sp]
   25bfc:	ldr	r3, [r6, #4]
   25c00:	bl	25524 <__assert_fail@plt+0x13980>
   25c04:	cmp	r0, #0
   25c08:	beq	25c14 <__assert_fail@plt+0x14070>
   25c0c:	add	sp, sp, #16
   25c10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25c14:	ldr	sl, [r8]
   25c18:	ldr	r7, [r6, #4]
   25c1c:	ldr	r1, [r4, #112]	; 0x70
   25c20:	ldr	r3, [r4, #108]	; 0x6c
   25c24:	cmp	r3, r1
   25c28:	bge	25d14 <__assert_fail@plt+0x14170>
   25c2c:	ldr	r3, [r4, #108]	; 0x6c
   25c30:	cmp	r3, #0
   25c34:	ble	25c5c <__assert_fail@plt+0x140b8>
   25c38:	add	r3, r3, r3, lsl #1
   25c3c:	lsl	r3, r3, #3
   25c40:	sub	r3, r3, #24
   25c44:	ldr	r2, [r4, #116]	; 0x74
   25c48:	add	r3, r2, r3
   25c4c:	ldr	r2, [r3, #4]
   25c50:	cmp	r5, r2
   25c54:	moveq	r2, #1
   25c58:	strbeq	r2, [r3, #20]
   25c5c:	ldr	r3, [r4, #108]	; 0x6c
   25c60:	ldr	r2, [r4, #116]	; 0x74
   25c64:	add	r3, r3, r3, lsl #1
   25c68:	str	r9, [r2, r3, lsl #3]
   25c6c:	ldr	r3, [r4, #108]	; 0x6c
   25c70:	ldr	r2, [r4, #116]	; 0x74
   25c74:	add	r3, r3, r3, lsl #1
   25c78:	add	r3, r2, r3, lsl #3
   25c7c:	str	r5, [r3, #4]
   25c80:	ldr	r3, [r4, #108]	; 0x6c
   25c84:	ldr	r2, [r4, #116]	; 0x74
   25c88:	add	r3, r3, r3, lsl #1
   25c8c:	add	r3, r2, r3, lsl #3
   25c90:	str	sl, [r3, #8]
   25c94:	ldr	r3, [r4, #108]	; 0x6c
   25c98:	ldr	r2, [r4, #116]	; 0x74
   25c9c:	add	r3, r3, r3, lsl #1
   25ca0:	add	r3, r2, r3, lsl #3
   25ca4:	str	r7, [r3, #12]
   25ca8:	ldr	r3, [r4, #108]	; 0x6c
   25cac:	ldr	r2, [r4, #116]	; 0x74
   25cb0:	add	r3, r3, r3, lsl #1
   25cb4:	add	r3, r2, r3, lsl #3
   25cb8:	cmp	sl, r7
   25cbc:	movne	r2, #0
   25cc0:	mvneq	r2, #0
   25cc4:	str	r2, [r3, #16]
   25cc8:	ldr	r2, [r4, #116]	; 0x74
   25ccc:	ldr	r3, [r4, #108]	; 0x6c
   25cd0:	add	r1, r3, #1
   25cd4:	str	r1, [r4, #108]	; 0x6c
   25cd8:	add	r3, r3, r3, lsl #1
   25cdc:	add	r3, r2, r3, lsl #3
   25ce0:	mov	r2, #0
   25ce4:	strb	r2, [r3, #20]
   25ce8:	sub	r7, r7, sl
   25cec:	ldr	r3, [r4, #120]	; 0x78
   25cf0:	cmp	r3, r7
   25cf4:	strlt	r7, [r4, #120]	; 0x78
   25cf8:	ldr	r1, [r6, #4]
   25cfc:	add	r5, r5, r1
   25d00:	ldr	r1, [r8]
   25d04:	sub	r1, r5, r1
   25d08:	mov	r0, r4
   25d0c:	bl	224b4 <__assert_fail@plt+0x10910>
   25d10:	b	25c0c <__assert_fail@plt+0x14068>
   25d14:	add	r1, r1, r1, lsl #1
   25d18:	lsl	r1, r1, #4
   25d1c:	ldr	r0, [r4, #116]	; 0x74
   25d20:	bl	2d434 <__assert_fail@plt+0x1b890>
   25d24:	cmp	r0, #0
   25d28:	beq	25d60 <__assert_fail@plt+0x141bc>
   25d2c:	str	r0, [r4, #116]	; 0x74
   25d30:	ldr	r2, [r4, #112]	; 0x70
   25d34:	add	r2, r2, r2, lsl #1
   25d38:	ldr	r3, [r4, #108]	; 0x6c
   25d3c:	add	r3, r3, r3, lsl #1
   25d40:	lsl	r2, r2, #3
   25d44:	mov	r1, #0
   25d48:	add	r0, r0, r3, lsl #3
   25d4c:	bl	119e8 <memset@plt>
   25d50:	ldr	r3, [r4, #112]	; 0x70
   25d54:	lsl	r3, r3, #1
   25d58:	str	r3, [r4, #112]	; 0x70
   25d5c:	b	25c2c <__assert_fail@plt+0x14088>
   25d60:	ldr	r0, [r4, #116]	; 0x74
   25d64:	bl	17204 <__assert_fail@plt+0x5660>
   25d68:	mov	r0, #12
   25d6c:	b	25c0c <__assert_fail@plt+0x14068>
   25d70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25d74:	sub	sp, sp, #84	; 0x54
   25d78:	ldr	r3, [r0, #84]	; 0x54
   25d7c:	str	r3, [sp, #32]
   25d80:	ldr	r3, [r0, #40]	; 0x28
   25d84:	mov	r2, r3
   25d88:	str	r3, [sp, #28]
   25d8c:	ldr	r3, [r1, #4]
   25d90:	cmp	r3, #0
   25d94:	ble	2645c <__assert_fail@plt+0x148b8>
   25d98:	mov	sl, r0
   25d9c:	lsl	r3, r2, #2
   25da0:	str	r3, [sp, #44]	; 0x2c
   25da4:	mov	r3, #0
   25da8:	str	r3, [sp, #20]
   25dac:	mov	r8, r1
   25db0:	b	263f0 <__assert_fail@plt+0x1484c>
   25db4:	tst	r3, #8
   25db8:	beq	25dc4 <__assert_fail@plt+0x14220>
   25dbc:	tst	r0, #1
   25dc0:	bne	263d4 <__assert_fail@plt+0x14830>
   25dc4:	tst	r3, #32
   25dc8:	beq	25dd4 <__assert_fail@plt+0x14230>
   25dcc:	tst	r0, #2
   25dd0:	beq	263d4 <__assert_fail@plt+0x14830>
   25dd4:	tst	r3, #128	; 0x80
   25dd8:	beq	25de4 <__assert_fail@plt+0x14240>
   25ddc:	tst	r0, #8
   25de0:	beq	263d4 <__assert_fail@plt+0x14830>
   25de4:	ldr	fp, [sl, #108]	; 0x6c
   25de8:	ldr	r1, [sp, #28]
   25dec:	mov	r0, sl
   25df0:	bl	1ea90 <__assert_fail@plt+0xceec>
   25df4:	cmn	r0, #1
   25df8:	beq	25e2c <__assert_fail@plt+0x14288>
   25dfc:	add	r0, r0, r0, lsl #1
   25e00:	lsl	r3, r0, #3
   25e04:	add	r2, r3, #24
   25e08:	ldr	r3, [sl, #116]	; 0x74
   25e0c:	add	r3, r3, r2
   25e10:	ldr	r2, [r3, #-24]	; 0xffffffe8
   25e14:	cmp	r9, r2
   25e18:	beq	2619c <__assert_fail@plt+0x145f8>
   25e1c:	add	r3, r3, #24
   25e20:	ldrb	r2, [r3, #-28]	; 0xffffffe4
   25e24:	cmp	r2, #0
   25e28:	bne	25e10 <__assert_fail@plt+0x1426c>
   25e2c:	ldr	r3, [sl, #84]	; 0x54
   25e30:	str	r3, [sp, #48]	; 0x30
   25e34:	ldr	r3, [r3]
   25e38:	ldr	r3, [r3, r9, lsl #3]
   25e3c:	str	r3, [sp, #52]	; 0x34
   25e40:	ldr	r3, [sl, #124]	; 0x7c
   25e44:	cmp	r3, #0
   25e48:	ble	2619c <__assert_fail@plt+0x145f8>
   25e4c:	ldr	r3, [sl, #4]
   25e50:	mov	r2, #0
   25e54:	str	r2, [sp, #40]	; 0x28
   25e58:	str	r9, [sp, #36]	; 0x24
   25e5c:	str	fp, [sp, #56]	; 0x38
   25e60:	str	r8, [sp, #60]	; 0x3c
   25e64:	mov	r8, r3
   25e68:	b	25f40 <__assert_fail@plt+0x1439c>
   25e6c:	mov	r2, r5
   25e70:	ldr	r3, [sp, #24]
   25e74:	add	r1, r8, r3
   25e78:	add	r0, r8, r6
   25e7c:	bl	117c0 <memcmp@plt>
   25e80:	cmp	r0, #0
   25e84:	bne	25f18 <__assert_fail@plt+0x14374>
   25e88:	add	r6, r6, r5
   25e8c:	ldr	r3, [sp, #28]
   25e90:	str	r3, [sp]
   25e94:	ldr	r3, [sp, #36]	; 0x24
   25e98:	mov	r2, r9
   25e9c:	mov	r1, r4
   25ea0:	mov	r0, sl
   25ea4:	bl	25bc8 <__assert_fail@plt+0x14024>
   25ea8:	ldr	r8, [sl, #4]
   25eac:	cmp	r0, #1
   25eb0:	bhi	261a8 <__assert_fail@plt+0x14604>
   25eb4:	add	r7, r7, #1
   25eb8:	str	fp, [sp, #24]
   25ebc:	ldr	r3, [r4, #16]
   25ec0:	cmp	r7, r3
   25ec4:	bge	25f8c <__assert_fail@plt+0x143e8>
   25ec8:	ldr	r3, [r4, #20]
   25ecc:	ldr	r9, [r3, r7, lsl #2]
   25ed0:	ldr	fp, [r9, #4]
   25ed4:	ldr	r3, [sp, #24]
   25ed8:	sub	r5, fp, r3
   25edc:	cmp	r5, #0
   25ee0:	ble	25e88 <__assert_fail@plt+0x142e4>
   25ee4:	add	r1, r6, r5
   25ee8:	ldr	r3, [sl, #28]
   25eec:	cmp	r1, r3
   25ef0:	ble	25e6c <__assert_fail@plt+0x142c8>
   25ef4:	ldr	r3, [sl, #48]	; 0x30
   25ef8:	cmp	r1, r3
   25efc:	bgt	25f18 <__assert_fail@plt+0x14374>
   25f00:	mov	r0, sl
   25f04:	bl	224b4 <__assert_fail@plt+0x10910>
   25f08:	cmp	r0, #0
   25f0c:	bne	26160 <__assert_fail@plt+0x145bc>
   25f10:	ldr	r8, [sl, #4]
   25f14:	b	25e6c <__assert_fail@plt+0x142c8>
   25f18:	ldr	r3, [r4, #16]
   25f1c:	cmp	r3, r7
   25f20:	ble	25f88 <__assert_fail@plt+0x143e4>
   25f24:	ldr	r3, [sp, #40]	; 0x28
   25f28:	add	r3, r3, #1
   25f2c:	mov	r2, r3
   25f30:	str	r3, [sp, #40]	; 0x28
   25f34:	ldr	r3, [sl, #124]	; 0x7c
   25f38:	cmp	r2, r3
   25f3c:	bge	26190 <__assert_fail@plt+0x145ec>
   25f40:	ldr	r3, [sl, #132]	; 0x84
   25f44:	ldr	r2, [sp, #40]	; 0x28
   25f48:	ldr	r4, [r3, r2, lsl #2]
   25f4c:	ldr	r2, [r4, #4]
   25f50:	ldr	r3, [sp, #48]	; 0x30
   25f54:	ldr	r3, [r3]
   25f58:	ldr	r3, [r3, r2, lsl #3]
   25f5c:	ldr	r2, [sp, #52]	; 0x34
   25f60:	cmp	r2, r3
   25f64:	bne	25f24 <__assert_fail@plt+0x14380>
   25f68:	ldr	r3, [r4]
   25f6c:	str	r3, [sp, #24]
   25f70:	ldr	r3, [r4, #16]
   25f74:	cmp	r3, #0
   25f78:	ble	25fac <__assert_fail@plt+0x14408>
   25f7c:	ldr	r6, [sp, #28]
   25f80:	mov	r7, #0
   25f84:	b	25ec8 <__assert_fail@plt+0x14324>
   25f88:	ldr	fp, [sp, #24]
   25f8c:	cmp	r7, #0
   25f90:	addgt	fp, fp, #1
   25f94:	ldr	r3, [sp, #28]
   25f98:	cmp	r3, fp
   25f9c:	blt	25f24 <__assert_fail@plt+0x14380>
   25fa0:	lsl	r9, fp, #2
   25fa4:	ldr	r7, [sp, #52]	; 0x34
   25fa8:	b	260d0 <__assert_fail@plt+0x1452c>
   25fac:	ldr	r6, [sp, #28]
   25fb0:	ldr	fp, [sp, #24]
   25fb4:	b	25f94 <__assert_fail@plt+0x143f0>
   25fb8:	ldr	r3, [sl, #48]	; 0x30
   25fbc:	cmp	r3, r6
   25fc0:	ble	25f24 <__assert_fail@plt+0x14380>
   25fc4:	add	r1, r6, #1
   25fc8:	mov	r0, sl
   25fcc:	bl	200fc <__assert_fail@plt+0xe558>
   25fd0:	cmp	r0, #0
   25fd4:	bne	26160 <__assert_fail@plt+0x145bc>
   25fd8:	ldr	r8, [sl, #4]
   25fdc:	b	260ec <__assert_fail@plt+0x14548>
   25fe0:	add	r3, r3, #1
   25fe4:	cmp	ip, r3
   25fe8:	beq	260bc <__assert_fail@plt+0x14518>
   25fec:	ldr	r5, [r2, #4]!
   25ff0:	add	r1, r0, r5, lsl #3
   25ff4:	ldrb	r1, [r1, #4]
   25ff8:	cmp	r1, #9
   25ffc:	bne	25fe0 <__assert_fail@plt+0x1443c>
   26000:	ldr	r1, [r0, r5, lsl #3]
   26004:	cmp	r7, r1
   26008:	bne	25fe0 <__assert_fail@plt+0x1443c>
   2600c:	cmn	r5, #1
   26010:	beq	260bc <__assert_fail@plt+0x14518>
   26014:	ldr	r3, [r4, #8]
   26018:	cmp	r3, #0
   2601c:	beq	2613c <__assert_fail@plt+0x14598>
   26020:	ldr	r3, [r4]
   26024:	ldr	r2, [r4, #4]
   26028:	ldr	r1, [r4, #8]
   2602c:	mov	r0, #9
   26030:	str	r0, [sp, #8]
   26034:	str	fp, [sp, #4]
   26038:	str	r5, [sp]
   2603c:	mov	r0, sl
   26040:	bl	25524 <__assert_fail@plt+0x13980>
   26044:	cmp	r0, #1
   26048:	beq	260bc <__assert_fail@plt+0x14518>
   2604c:	cmp	r0, #0
   26050:	bne	26160 <__assert_fail@plt+0x145bc>
   26054:	ldr	r3, [r4, #16]
   26058:	ldr	r2, [r4, #12]
   2605c:	cmp	r3, r2
   26060:	beq	26168 <__assert_fail@plt+0x145c4>
   26064:	mov	r1, #20
   26068:	mov	r0, #1
   2606c:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   26070:	subs	r2, r0, #0
   26074:	beq	26468 <__assert_fail@plt+0x148c4>
   26078:	ldr	r1, [r4, #16]
   2607c:	ldr	r3, [r4, #20]
   26080:	str	r2, [r3, r1, lsl #2]
   26084:	str	r5, [r2]
   26088:	str	fp, [r2, #4]
   2608c:	ldr	r3, [r4, #16]
   26090:	add	r3, r3, #1
   26094:	str	r3, [r4, #16]
   26098:	ldr	r3, [sp, #28]
   2609c:	str	r3, [sp]
   260a0:	ldr	r3, [sp, #36]	; 0x24
   260a4:	mov	r1, r4
   260a8:	mov	r0, sl
   260ac:	bl	25bc8 <__assert_fail@plt+0x14024>
   260b0:	ldr	r8, [sl, #4]
   260b4:	cmp	r0, #1
   260b8:	bhi	261f8 <__assert_fail@plt+0x14654>
   260bc:	add	fp, fp, #1
   260c0:	add	r9, r9, #4
   260c4:	ldr	r3, [sp, #28]
   260c8:	cmp	r3, fp
   260cc:	blt	25f24 <__assert_fail@plt+0x14380>
   260d0:	ldr	r3, [r4]
   260d4:	sub	r3, fp, r3
   260d8:	cmp	r3, #0
   260dc:	ble	26108 <__assert_fail@plt+0x14564>
   260e0:	ldr	r3, [sl, #28]
   260e4:	cmp	r3, r6
   260e8:	ble	25fb8 <__assert_fail@plt+0x14414>
   260ec:	add	r2, r6, #1
   260f0:	add	r3, r8, fp
   260f4:	ldrb	r1, [r8, r6]
   260f8:	ldrb	r3, [r3, #-1]
   260fc:	cmp	r1, r3
   26100:	bne	25f24 <__assert_fail@plt+0x14380>
   26104:	mov	r6, r2
   26108:	ldr	r3, [sl, #100]	; 0x64
   2610c:	ldr	r3, [r3, r9]
   26110:	cmp	r3, #0
   26114:	beq	260bc <__assert_fail@plt+0x14518>
   26118:	ldr	ip, [r3, #8]
   2611c:	cmp	ip, #0
   26120:	ble	260bc <__assert_fail@plt+0x14518>
   26124:	ldr	r2, [sp, #48]	; 0x30
   26128:	ldr	r0, [r2]
   2612c:	ldr	r2, [r3, #12]
   26130:	sub	r2, r2, #4
   26134:	mov	r3, #0
   26138:	b	25fec <__assert_fail@plt+0x14448>
   2613c:	ldr	r1, [r4]
   26140:	sub	r1, fp, r1
   26144:	add	r1, r1, #1
   26148:	mov	r0, #12
   2614c:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   26150:	str	r0, [r4, #8]
   26154:	cmp	r0, #0
   26158:	bne	26020 <__assert_fail@plt+0x1447c>
   2615c:	mov	r0, #12
   26160:	str	r0, [sp, #76]	; 0x4c
   26164:	b	26248 <__assert_fail@plt+0x146a4>
   26168:	lsl	r3, r3, #1
   2616c:	add	r8, r3, #1
   26170:	lsl	r1, r8, #2
   26174:	ldr	r0, [r4, #20]
   26178:	bl	2d434 <__assert_fail@plt+0x1b890>
   2617c:	cmp	r0, #0
   26180:	beq	26468 <__assert_fail@plt+0x148c4>
   26184:	str	r0, [r4, #20]
   26188:	str	r8, [r4, #12]
   2618c:	b	26064 <__assert_fail@plt+0x144c0>
   26190:	ldr	r9, [sp, #36]	; 0x24
   26194:	ldr	fp, [sp, #56]	; 0x38
   26198:	ldr	r8, [sp, #60]	; 0x3c
   2619c:	mov	r3, #0
   261a0:	str	r3, [sp, #76]	; 0x4c
   261a4:	b	261c0 <__assert_fail@plt+0x1461c>
   261a8:	ldr	r9, [sp, #36]	; 0x24
   261ac:	ldr	fp, [sp, #56]	; 0x38
   261b0:	ldr	r8, [sp, #60]	; 0x3c
   261b4:	str	r0, [sp, #76]	; 0x4c
   261b8:	cmp	r0, #0
   261bc:	bne	26248 <__assert_fail@plt+0x146a4>
   261c0:	lsl	r3, r9, #2
   261c4:	str	r3, [sp, #52]	; 0x34
   261c8:	ldr	r3, [sl, #108]	; 0x6c
   261cc:	cmp	fp, r3
   261d0:	bge	263d4 <__assert_fail@plt+0x14830>
   261d4:	add	r3, r9, r9, lsl #1
   261d8:	lsl	r3, r3, #2
   261dc:	str	r3, [sp, #56]	; 0x38
   261e0:	add	r4, fp, fp, lsl #1
   261e4:	lsl	r4, r4, #3
   261e8:	ldr	r6, [sp, #28]
   261ec:	str	r8, [sp, #60]	; 0x3c
   261f0:	ldr	r8, [sp, #32]
   261f4:	b	26278 <__assert_fail@plt+0x146d4>
   261f8:	ldr	r9, [sp, #36]	; 0x24
   261fc:	ldr	fp, [sp, #56]	; 0x38
   26200:	ldr	r8, [sp, #60]	; 0x3c
   26204:	b	261b4 <__assert_fail@plt+0x14610>
   26208:	ldr	r3, [sp, #40]	; 0x28
   2620c:	ldr	r2, [sp, #24]
   26210:	mov	r1, r8
   26214:	add	r0, sp, #76	; 0x4c
   26218:	bl	21060 <__assert_fail@plt+0xf4bc>
   2621c:	str	r0, [r7, r5, lsl #2]
   26220:	ldr	r3, [sl, #100]	; 0x64
   26224:	ldr	r3, [r3, r5, lsl #2]
   26228:	cmp	r3, #0
   2622c:	bne	2636c <__assert_fail@plt+0x147c8>
   26230:	ldr	r3, [sp, #76]	; 0x4c
   26234:	cmp	r3, #0
   26238:	beq	2636c <__assert_fail@plt+0x147c8>
   2623c:	b	26248 <__assert_fail@plt+0x146a4>
   26240:	ldr	r0, [sp, #72]	; 0x48
   26244:	bl	17204 <__assert_fail@plt+0x5660>
   26248:	ldr	r0, [sp, #76]	; 0x4c
   2624c:	add	sp, sp, #84	; 0x54
   26250:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26254:	ldr	r3, [sp, #76]	; 0x4c
   26258:	cmp	r3, #0
   2625c:	beq	2636c <__assert_fail@plt+0x147c8>
   26260:	b	26248 <__assert_fail@plt+0x146a4>
   26264:	add	fp, fp, #1
   26268:	add	r4, r4, #24
   2626c:	ldr	r3, [sl, #108]	; 0x6c
   26270:	cmp	r3, fp
   26274:	ble	263d0 <__assert_fail@plt+0x1482c>
   26278:	ldr	r3, [sl, #116]	; 0x74
   2627c:	add	r2, r3, r4
   26280:	ldr	r3, [r3, r4]
   26284:	cmp	r9, r3
   26288:	bne	26264 <__assert_fail@plt+0x146c0>
   2628c:	ldr	r3, [r2, #4]
   26290:	cmp	r6, r3
   26294:	bne	26264 <__assert_fail@plt+0x146c0>
   26298:	ldr	r3, [r2, #12]
   2629c:	ldr	r5, [r2, #8]
   262a0:	subs	r2, r3, r5
   262a4:	str	r2, [sp, #36]	; 0x24
   262a8:	ldreq	r2, [r8, #20]
   262ac:	ldreq	r1, [sp, #56]	; 0x38
   262b0:	addeq	r2, r2, r1
   262b4:	ldreq	r2, [r2, #8]
   262b8:	ldreq	r2, [r2]
   262bc:	ldrne	r2, [r8, #12]
   262c0:	ldrne	r1, [sp, #52]	; 0x34
   262c4:	ldrne	r2, [r2, r1]
   262c8:	add	r2, r2, r2, lsl #1
   262cc:	ldr	r1, [r8, #24]
   262d0:	add	r2, r1, r2, lsl #2
   262d4:	str	r2, [sp, #24]
   262d8:	add	r3, r6, r3
   262dc:	sub	r5, r3, r5
   262e0:	ldr	r2, [sl, #88]	; 0x58
   262e4:	sub	r1, r5, #1
   262e8:	mov	r0, sl
   262ec:	bl	22118 <__assert_fail@plt+0x10574>
   262f0:	str	r0, [sp, #40]	; 0x28
   262f4:	ldr	r7, [sl, #100]	; 0x64
   262f8:	ldr	r3, [r7, r5, lsl #2]
   262fc:	ldr	r2, [sp, #44]	; 0x2c
   26300:	ldr	r2, [r7, r2]
   26304:	cmp	r2, #0
   26308:	ldrne	r2, [r2, #8]
   2630c:	moveq	r2, #0
   26310:	str	r2, [sp, #48]	; 0x30
   26314:	cmp	r3, #0
   26318:	beq	26208 <__assert_fail@plt+0x14664>
   2631c:	ldr	r2, [sp, #24]
   26320:	ldr	r1, [r3, #40]	; 0x28
   26324:	add	r0, sp, #64	; 0x40
   26328:	bl	1f924 <__assert_fail@plt+0xdd80>
   2632c:	str	r0, [sp, #76]	; 0x4c
   26330:	cmp	r0, #0
   26334:	bne	26240 <__assert_fail@plt+0x1469c>
   26338:	ldr	r7, [sl, #100]	; 0x64
   2633c:	ldr	r3, [sp, #40]	; 0x28
   26340:	add	r2, sp, #64	; 0x40
   26344:	mov	r1, r8
   26348:	add	r0, sp, #76	; 0x4c
   2634c:	bl	21060 <__assert_fail@plt+0xf4bc>
   26350:	str	r0, [r7, r5, lsl #2]
   26354:	ldr	r0, [sp, #72]	; 0x48
   26358:	bl	17204 <__assert_fail@plt+0x5660>
   2635c:	ldr	r3, [sl, #100]	; 0x64
   26360:	ldr	r3, [r3, r5, lsl #2]
   26364:	cmp	r3, #0
   26368:	beq	26254 <__assert_fail@plt+0x146b0>
   2636c:	ldr	r3, [sp, #36]	; 0x24
   26370:	cmp	r3, #0
   26374:	bne	26264 <__assert_fail@plt+0x146c0>
   26378:	ldr	r3, [sl, #100]	; 0x64
   2637c:	ldr	r2, [sp, #44]	; 0x2c
   26380:	ldr	r3, [r3, r2]
   26384:	ldr	r3, [r3, #8]
   26388:	ldr	r2, [sp, #48]	; 0x30
   2638c:	cmp	r2, r3
   26390:	bge	26264 <__assert_fail@plt+0x146c0>
   26394:	mov	r2, r6
   26398:	ldr	r5, [sp, #24]
   2639c:	mov	r1, r5
   263a0:	mov	r0, sl
   263a4:	bl	223ac <__assert_fail@plt+0x10808>
   263a8:	str	r0, [sp, #76]	; 0x4c
   263ac:	cmp	r0, #0
   263b0:	bne	26248 <__assert_fail@plt+0x146a4>
   263b4:	mov	r1, r5
   263b8:	mov	r0, sl
   263bc:	bl	25d70 <__assert_fail@plt+0x141cc>
   263c0:	str	r0, [sp, #76]	; 0x4c
   263c4:	cmp	r0, #0
   263c8:	beq	26264 <__assert_fail@plt+0x146c0>
   263cc:	b	26248 <__assert_fail@plt+0x146a4>
   263d0:	ldr	r8, [sp, #60]	; 0x3c
   263d4:	ldr	r3, [sp, #20]
   263d8:	add	r3, r3, #1
   263dc:	mov	r2, r3
   263e0:	str	r3, [sp, #20]
   263e4:	ldr	r3, [r8, #4]
   263e8:	cmp	r3, r2
   263ec:	ble	2645c <__assert_fail@plt+0x148b8>
   263f0:	ldr	r3, [r8, #8]
   263f4:	ldr	r2, [sp, #20]
   263f8:	ldr	r9, [r3, r2, lsl #2]
   263fc:	ldr	r3, [sp, #32]
   26400:	ldr	r4, [r3]
   26404:	add	r4, r4, r9, lsl #3
   26408:	ldrb	r3, [r4, #4]
   2640c:	cmp	r3, #4
   26410:	bne	263d4 <__assert_fail@plt+0x14830>
   26414:	ldr	r3, [r4, #4]
   26418:	ldr	r2, [pc, #84]	; 26474 <__assert_fail@plt+0x148d0>
   2641c:	tst	r3, r2
   26420:	beq	25de4 <__assert_fail@plt+0x14240>
   26424:	ldr	r2, [sl, #88]	; 0x58
   26428:	ldr	r1, [sp, #28]
   2642c:	mov	r0, sl
   26430:	bl	22118 <__assert_fail@plt+0x10574>
   26434:	ldr	r3, [r4, #4]
   26438:	lsl	r3, r3, #14
   2643c:	lsr	r3, r3, #22
   26440:	tst	r3, #4
   26444:	beq	25db4 <__assert_fail@plt+0x14210>
   26448:	tst	r0, #1
   2644c:	beq	263d4 <__assert_fail@plt+0x14830>
   26450:	tst	r3, #8
   26454:	bne	263d4 <__assert_fail@plt+0x14830>
   26458:	b	25dc4 <__assert_fail@plt+0x14220>
   2645c:	mov	r3, #0
   26460:	str	r3, [sp, #76]	; 0x4c
   26464:	b	26248 <__assert_fail@plt+0x146a4>
   26468:	mov	r3, #12
   2646c:	str	r3, [sp, #76]	; 0x4c
   26470:	b	26248 <__assert_fail@plt+0x146a4>
   26474:	andeq	pc, r3, r0, lsl #30
   26478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2647c:	sub	sp, sp, #16
   26480:	mov	r8, r0
   26484:	mov	r4, r1
   26488:	mov	r5, r2
   2648c:	ldr	r7, [r1, #84]	; 0x54
   26490:	ldr	r6, [r1, #40]	; 0x28
   26494:	ldr	r3, [r1, #104]	; 0x68
   26498:	cmp	r6, r3
   2649c:	ble	264f8 <__assert_fail@plt+0x14954>
   264a0:	ldr	r3, [r1, #100]	; 0x64
   264a4:	str	r2, [r3, r6, lsl #2]
   264a8:	str	r6, [r1, #104]	; 0x68
   264ac:	ldr	r3, [r7, #76]	; 0x4c
   264b0:	cmp	r3, #0
   264b4:	cmpne	r5, #0
   264b8:	moveq	r0, r5
   264bc:	beq	264f0 <__assert_fail@plt+0x1494c>
   264c0:	add	r7, r5, #4
   264c4:	mov	r2, r6
   264c8:	mov	r1, r7
   264cc:	mov	r0, r4
   264d0:	bl	223ac <__assert_fail@plt+0x10808>
   264d4:	str	r0, [r8]
   264d8:	cmp	r0, #0
   264dc:	bne	265e0 <__assert_fail@plt+0x14a3c>
   264e0:	ldrb	r3, [r5, #52]	; 0x34
   264e4:	tst	r3, #64	; 0x40
   264e8:	moveq	r0, r5
   264ec:	bne	265bc <__assert_fail@plt+0x14a18>
   264f0:	add	sp, sp, #16
   264f4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   264f8:	ldr	r9, [r1, #100]	; 0x64
   264fc:	ldr	r3, [r9, r6, lsl #2]
   26500:	cmp	r3, #0
   26504:	streq	r2, [r9, r6, lsl #2]
   26508:	beq	264ac <__assert_fail@plt+0x14908>
   2650c:	ldr	r2, [r3, #40]	; 0x28
   26510:	cmp	r5, #0
   26514:	beq	26580 <__assert_fail@plt+0x149dc>
   26518:	ldr	r9, [r5, #40]	; 0x28
   2651c:	mov	r1, r9
   26520:	add	r0, sp, #4
   26524:	bl	1f924 <__assert_fail@plt+0xdd80>
   26528:	str	r0, [r8]
   2652c:	cmp	r0, #0
   26530:	movne	r0, #0
   26534:	bne	264f0 <__assert_fail@plt+0x1494c>
   26538:	ldr	r1, [r4, #40]	; 0x28
   2653c:	ldr	r2, [r4, #88]	; 0x58
   26540:	sub	r1, r1, #1
   26544:	mov	r0, r4
   26548:	bl	22118 <__assert_fail@plt+0x10574>
   2654c:	ldr	sl, [r4, #100]	; 0x64
   26550:	mov	r3, r0
   26554:	add	r2, sp, #4
   26558:	mov	r1, r7
   2655c:	mov	r0, r8
   26560:	bl	21060 <__assert_fail@plt+0xf4bc>
   26564:	mov	r5, r0
   26568:	str	r0, [sl, r6, lsl #2]
   2656c:	cmp	r9, #0
   26570:	beq	264ac <__assert_fail@plt+0x14908>
   26574:	ldr	r0, [sp, #12]
   26578:	bl	17204 <__assert_fail@plt+0x5660>
   2657c:	b	264ac <__assert_fail@plt+0x14908>
   26580:	add	r5, sp, #4
   26584:	ldm	r2, {r0, r1, r2}
   26588:	stm	r5, {r0, r1, r2}
   2658c:	ldr	r2, [r4, #88]	; 0x58
   26590:	sub	r1, r6, #1
   26594:	mov	r0, r4
   26598:	bl	22118 <__assert_fail@plt+0x10574>
   2659c:	mov	r3, r0
   265a0:	mov	r2, r5
   265a4:	mov	r1, r7
   265a8:	mov	r0, r8
   265ac:	bl	21060 <__assert_fail@plt+0xf4bc>
   265b0:	mov	r5, r0
   265b4:	str	r0, [r9, r6, lsl #2]
   265b8:	b	264ac <__assert_fail@plt+0x14908>
   265bc:	mov	r1, r7
   265c0:	mov	r0, r4
   265c4:	bl	25d70 <__assert_fail@plt+0x141cc>
   265c8:	str	r0, [r8]
   265cc:	cmp	r0, #0
   265d0:	bne	265e8 <__assert_fail@plt+0x14a44>
   265d4:	ldr	r3, [r4, #100]	; 0x64
   265d8:	ldr	r0, [r3, r6, lsl #2]
   265dc:	b	264f0 <__assert_fail@plt+0x1494c>
   265e0:	mov	r0, #0
   265e4:	b	264f0 <__assert_fail@plt+0x1494c>
   265e8:	mov	r0, #0
   265ec:	b	264f0 <__assert_fail@plt+0x1494c>
   265f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265f4:	sub	sp, sp, #92	; 0x5c
   265f8:	str	r0, [sp, #28]
   265fc:	mov	sl, r1
   26600:	mov	fp, r2
   26604:	mov	r5, r3
   26608:	ldr	r6, [r0, #84]	; 0x54
   2660c:	mov	r3, #0
   26610:	str	r3, [sp, #84]	; 0x54
   26614:	lsl	r3, r2, #2
   26618:	str	r3, [sp, #32]
   2661c:	ldr	r3, [r0, #100]	; 0x64
   26620:	ldr	r3, [r3, r2, lsl #2]
   26624:	cmp	r3, #0
   26628:	addne	r3, r3, #4
   2662c:	moveq	r3, #0
   26630:	str	r3, [sp, #12]
   26634:	ldr	r3, [r5, #4]
   26638:	cmp	r3, #0
   2663c:	bne	26684 <__assert_fail@plt+0x14ae0>
   26640:	ldr	r3, [r1]
   26644:	mov	r2, #0
   26648:	str	r2, [r3, fp, lsl #2]
   2664c:	ldr	r3, [sp, #12]
   26650:	cmp	r3, #0
   26654:	moveq	r4, #0
   26658:	beq	26678 <__assert_fail@plt+0x14ad4>
   2665c:	ldr	r3, [sp, #28]
   26660:	ldr	r3, [r3, #100]	; 0x64
   26664:	ldr	r3, [r3, fp, lsl #2]
   26668:	ldrb	r3, [r3, #52]	; 0x34
   2666c:	tst	r3, #64	; 0x40
   26670:	moveq	r4, #0
   26674:	bne	2692c <__assert_fail@plt+0x14d88>
   26678:	mov	r0, r4
   2667c:	add	sp, sp, #92	; 0x5c
   26680:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26684:	ldr	r3, [sp, #12]
   26688:	cmp	r3, #0
   2668c:	beq	26904 <__assert_fail@plt+0x14d60>
   26690:	add	r0, sp, #88	; 0x58
   26694:	mov	r3, #0
   26698:	str	r3, [r0, #-32]!	; 0xffffffe0
   2669c:	mov	r2, r5
   266a0:	mov	r1, r6
   266a4:	bl	25060 <__assert_fail@plt+0x134bc>
   266a8:	mov	r7, r0
   266ac:	ldr	r4, [sp, #56]	; 0x38
   266b0:	cmp	r4, #0
   266b4:	bne	26678 <__assert_fail@plt+0x14ad4>
   266b8:	ldr	r3, [r0, #28]
   266bc:	cmp	r3, #0
   266c0:	bne	26724 <__assert_fail@plt+0x14b80>
   266c4:	add	r8, r0, #28
   266c8:	ldr	r1, [r5, #4]
   266cc:	mov	r0, r8
   266d0:	bl	1f41c <__assert_fail@plt+0xd878>
   266d4:	str	r0, [sp, #56]	; 0x38
   266d8:	cmp	r0, #0
   266dc:	bne	26bec <__assert_fail@plt+0x15048>
   266e0:	ldr	r3, [r5, #4]
   266e4:	cmp	r3, #0
   266e8:	ble	26724 <__assert_fail@plt+0x14b80>
   266ec:	ldr	r3, [r5, #8]
   266f0:	ldr	r1, [r3, r4, lsl #2]
   266f4:	add	r1, r1, r1, lsl #1
   266f8:	ldr	r3, [r6, #28]
   266fc:	add	r1, r3, r1, lsl #2
   26700:	mov	r0, r8
   26704:	bl	21d44 <__assert_fail@plt+0x101a0>
   26708:	str	r0, [sp, #56]	; 0x38
   2670c:	cmp	r0, #0
   26710:	bne	26bf4 <__assert_fail@plt+0x15050>
   26714:	add	r4, r4, #1
   26718:	ldr	r3, [r5, #4]
   2671c:	cmp	r4, r3
   26720:	blt	266ec <__assert_fail@plt+0x14b48>
   26724:	add	r2, r7, #28
   26728:	ldr	r1, [sp, #12]
   2672c:	mov	r0, r5
   26730:	bl	1f6e8 <__assert_fail@plt+0xdb44>
   26734:	mov	r4, r0
   26738:	str	r0, [sp, #84]	; 0x54
   2673c:	cmp	r0, #0
   26740:	bne	26678 <__assert_fail@plt+0x14ad4>
   26744:	ldr	r3, [sl, #20]
   26748:	cmp	r3, #0
   2674c:	bne	26778 <__assert_fail@plt+0x14bd4>
   26750:	ldr	r4, [sl]
   26754:	mov	r2, r5
   26758:	mov	r1, r6
   2675c:	add	r0, sp, #84	; 0x54
   26760:	bl	25060 <__assert_fail@plt+0x134bc>
   26764:	str	r0, [r4, fp, lsl #2]
   26768:	ldr	r4, [sp, #84]	; 0x54
   2676c:	cmp	r4, #0
   26770:	beq	2665c <__assert_fail@plt+0x14ab8>
   26774:	b	26678 <__assert_fail@plt+0x14ad4>
   26778:	ldr	r3, [sp, #28]
   2677c:	ldr	r3, [r3, #116]	; 0x74
   26780:	str	r3, [sp, #20]
   26784:	ble	26bfc <__assert_fail@plt+0x15058>
   26788:	mov	r7, #0
   2678c:	b	26c48 <__assert_fail@plt+0x150a4>
   26790:	ldr	lr, [r5, #4]
   26794:	cmp	lr, #0
   26798:	ble	26c38 <__assert_fail@plt+0x15094>
   2679c:	ldr	r3, [r5, #8]
   267a0:	add	lr, r3, lr, lsl #2
   267a4:	mvn	r2, #0
   267a8:	mov	r4, r2
   267ac:	mov	r1, r2
   267b0:	b	267c8 <__assert_fail@plt+0x14c24>
   267b4:	ldr	ip, [r0, r2, lsl #3]
   267b8:	cmp	r8, ip
   267bc:	moveq	r1, r2
   267c0:	cmp	lr, r3
   267c4:	beq	267f4 <__assert_fail@plt+0x14c50>
   267c8:	ldr	r2, [r3], #4
   267cc:	add	ip, r0, r2, lsl #3
   267d0:	ldrb	ip, [ip, #4]
   267d4:	cmp	ip, #8
   267d8:	beq	267b4 <__assert_fail@plt+0x14c10>
   267dc:	cmp	ip, #9
   267e0:	bne	267c0 <__assert_fail@plt+0x14c1c>
   267e4:	ldr	ip, [r0, r2, lsl #3]
   267e8:	cmp	r8, ip
   267ec:	moveq	r4, r2
   267f0:	b	267c0 <__assert_fail@plt+0x14c1c>
   267f4:	str	r4, [sp, #16]
   267f8:	cmp	r1, #0
   267fc:	blt	26c2c <__assert_fail@plt+0x15088>
   26800:	ldr	r3, [sp, #12]
   26804:	mov	r2, r5
   26808:	mov	r0, r6
   2680c:	bl	23878 <__assert_fail@plt+0x11cd4>
   26810:	cmp	r0, #0
   26814:	bne	26ca0 <__assert_fail@plt+0x150fc>
   26818:	cmp	r4, #0
   2681c:	blt	26c38 <__assert_fail@plt+0x15094>
   26820:	ldr	r3, [r5, #4]
   26824:	cmp	r3, #0
   26828:	ble	26c38 <__assert_fail@plt+0x15094>
   2682c:	mov	r8, #0
   26830:	b	26844 <__assert_fail@plt+0x14ca0>
   26834:	add	r8, r8, #1
   26838:	ldr	r3, [r5, #4]
   2683c:	cmp	r8, r3
   26840:	bge	26c38 <__assert_fail@plt+0x15094>
   26844:	ldr	r3, [r5, #8]
   26848:	ldr	r9, [r3, r8, lsl #2]
   2684c:	add	r4, r9, r9, lsl #1
   26850:	lsl	r4, r4, #2
   26854:	ldr	r0, [r6, #28]
   26858:	ldr	r1, [sp, #16]
   2685c:	add	r0, r0, r4
   26860:	bl	1e46c <__assert_fail@plt+0xc8c8>
   26864:	cmp	r0, #0
   26868:	bne	26834 <__assert_fail@plt+0x14c90>
   2686c:	ldr	r0, [r6, #24]
   26870:	ldr	r1, [sp, #16]
   26874:	add	r0, r0, r4
   26878:	bl	1e46c <__assert_fail@plt+0xc8c8>
   2687c:	cmp	r0, #0
   26880:	bne	26834 <__assert_fail@plt+0x14c90>
   26884:	ldr	r3, [sp, #12]
   26888:	mov	r2, r5
   2688c:	mov	r1, r9
   26890:	mov	r0, r6
   26894:	bl	23878 <__assert_fail@plt+0x11cd4>
   26898:	cmp	r0, #0
   2689c:	bne	26ca8 <__assert_fail@plt+0x15104>
   268a0:	sub	r8, r8, #1
   268a4:	b	26834 <__assert_fail@plt+0x14c90>
   268a8:	add	r9, r9, #1
   268ac:	ldr	r3, [r5, #4]
   268b0:	cmp	r9, r3
   268b4:	bge	26c38 <__assert_fail@plt+0x15094>
   268b8:	ldr	r3, [r5, #8]
   268bc:	ldr	r1, [r3, r9, lsl #2]
   268c0:	ldr	r2, [r6]
   268c4:	add	r3, r2, r1, lsl #3
   268c8:	ldrb	r3, [r3, #4]
   268cc:	sub	r3, r3, #8
   268d0:	cmp	r3, #1
   268d4:	bhi	268a8 <__assert_fail@plt+0x14d04>
   268d8:	ldr	r3, [r2, r1, lsl #3]
   268dc:	cmp	r8, r3
   268e0:	bne	268a8 <__assert_fail@plt+0x14d04>
   268e4:	ldr	r3, [sp, #12]
   268e8:	mov	r2, r5
   268ec:	mov	r0, r6
   268f0:	bl	23878 <__assert_fail@plt+0x11cd4>
   268f4:	cmp	r0, #0
   268f8:	beq	268a8 <__assert_fail@plt+0x14d04>
   268fc:	mov	r4, r0
   26900:	b	26678 <__assert_fail@plt+0x14ad4>
   26904:	ldr	r4, [r1]
   26908:	mov	r2, r5
   2690c:	mov	r1, r6
   26910:	add	r0, sp, #84	; 0x54
   26914:	bl	25060 <__assert_fail@plt+0x134bc>
   26918:	str	r0, [r4, fp, lsl #2]
   2691c:	ldr	r4, [sp, #84]	; 0x54
   26920:	cmp	r4, #0
   26924:	beq	2664c <__assert_fail@plt+0x14aa8>
   26928:	b	26678 <__assert_fail@plt+0x14ad4>
   2692c:	mov	r1, fp
   26930:	ldr	r4, [sp, #28]
   26934:	mov	r0, r4
   26938:	bl	1ea90 <__assert_fail@plt+0xceec>
   2693c:	str	r0, [sp, #44]	; 0x2c
   26940:	cmn	r0, #1
   26944:	moveq	r4, #0
   26948:	beq	26678 <__assert_fail@plt+0x14ad4>
   2694c:	ldr	r9, [r4, #84]	; 0x54
   26950:	mov	r3, #0
   26954:	str	r3, [sp, #56]	; 0x38
   26958:	ldr	r1, [sp, #12]
   2695c:	ldr	r3, [r1, #4]
   26960:	cmp	r3, #0
   26964:	ble	26be4 <__assert_fail@plt+0x15040>
   26968:	add	r3, r0, r0, lsl #1
   2696c:	lsl	r3, r3, #3
   26970:	str	r3, [sp, #48]	; 0x30
   26974:	mov	r3, #0
   26978:	str	r3, [sp, #16]
   2697c:	add	r3, sl, #16
   26980:	str	r3, [sp, #40]	; 0x28
   26984:	add	r3, fp, #1
   26988:	str	r3, [sp, #52]	; 0x34
   2698c:	str	fp, [sp, #12]
   26990:	mov	fp, r1
   26994:	b	26b5c <__assert_fail@plt+0x14fb8>
   26998:	ldr	r3, [sl, #12]
   2699c:	ldr	r1, [sp, #12]
   269a0:	cmp	r1, r3
   269a4:	bne	26b80 <__assert_fail@plt+0x14fdc>
   269a8:	b	26b40 <__assert_fail@plt+0x14f9c>
   269ac:	add	ip, sp, #56	; 0x38
   269b0:	mov	lr, sl
   269b4:	ldm	lr!, {r0, r1, r2, r3}
   269b8:	stmia	ip!, {r0, r1, r2, r3}
   269bc:	ldm	lr, {r0, r1, r2}
   269c0:	stm	ip, {r0, r1, r2}
   269c4:	ldr	r1, [sp, #40]	; 0x28
   269c8:	add	r0, sp, #72	; 0x48
   269cc:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   269d0:	cmp	r0, #0
   269d4:	beq	26ad0 <__assert_fail@plt+0x14f2c>
   269d8:	mov	r4, r0
   269dc:	b	26bbc <__assert_fail@plt+0x15018>
   269e0:	ldr	r3, [sp, #56]	; 0x38
   269e4:	ldr	r2, [sp, #32]
   269e8:	str	r4, [r3, r2]
   269ec:	mov	r1, r5
   269f0:	add	r0, sp, #72	; 0x48
   269f4:	bl	1e46c <__assert_fail@plt+0xc8c8>
   269f8:	sub	r1, r0, #1
   269fc:	add	r0, sp, #72	; 0x48
   26a00:	bl	1e504 <__assert_fail@plt+0xc960>
   26a04:	ldr	r3, [sp, #28]
   26a08:	ldr	r4, [r3, #116]	; 0x74
   26a0c:	add	r4, r4, r6
   26a10:	add	r5, r5, #1
   26a14:	add	r2, r4, #24
   26a18:	add	r6, r6, #24
   26a1c:	ldrb	r3, [r4, #20]
   26a20:	cmp	r3, #0
   26a24:	beq	26b3c <__assert_fail@plt+0x14f98>
   26a28:	mov	r4, r2
   26a2c:	ldr	r3, [r4]
   26a30:	cmp	r7, r3
   26a34:	bne	26a10 <__assert_fail@plt+0x14e6c>
   26a38:	ldr	r3, [r4, #12]
   26a3c:	ldr	r2, [r4, #8]
   26a40:	sub	r3, r3, r2
   26a44:	ldr	r2, [sp, #12]
   26a48:	add	r8, r2, r3
   26a4c:	cmp	r3, #0
   26a50:	ldrne	r3, [r9, #12]
   26a54:	ldrne	r2, [sp, #20]
   26a58:	ldrne	fp, [r3, r2]
   26a5c:	ldreq	r3, [r9, #20]
   26a60:	ldreq	r2, [sp, #24]
   26a64:	addeq	r3, r3, r2
   26a68:	ldreq	r3, [r3, #8]
   26a6c:	ldreq	fp, [r3]
   26a70:	ldr	r3, [sl, #12]
   26a74:	cmp	r8, r3
   26a78:	bgt	26a10 <__assert_fail@plt+0x14e6c>
   26a7c:	ldr	r3, [sl]
   26a80:	ldr	r0, [r3, r8, lsl #2]
   26a84:	cmp	r0, #0
   26a88:	beq	26a10 <__assert_fail@plt+0x14e6c>
   26a8c:	mov	r1, fp
   26a90:	add	r0, r0, #4
   26a94:	bl	1e46c <__assert_fail@plt+0xc8c8>
   26a98:	cmp	r0, #0
   26a9c:	beq	26a10 <__assert_fail@plt+0x14e6c>
   26aa0:	str	r8, [sp, #4]
   26aa4:	str	fp, [sp]
   26aa8:	ldr	r3, [sp, #12]
   26aac:	mov	r2, r7
   26ab0:	ldr	r1, [sp, #40]	; 0x28
   26ab4:	ldr	r0, [sp, #28]
   26ab8:	bl	1eb40 <__assert_fail@plt+0xcf9c>
   26abc:	cmp	r0, #0
   26ac0:	bne	26a10 <__assert_fail@plt+0x14e6c>
   26ac4:	ldr	r3, [sp, #56]	; 0x38
   26ac8:	cmp	r3, #0
   26acc:	beq	269ac <__assert_fail@plt+0x14e08>
   26ad0:	str	r7, [sp, #64]	; 0x40
   26ad4:	ldr	r3, [sp, #12]
   26ad8:	str	r3, [sp, #68]	; 0x44
   26adc:	mov	r1, r5
   26ae0:	add	r0, sp, #72	; 0x48
   26ae4:	bl	21800 <__assert_fail@plt+0xfc5c>
   26ae8:	cmp	r0, #0
   26aec:	beq	26bd4 <__assert_fail@plt+0x15030>
   26af0:	ldr	r3, [sp, #56]	; 0x38
   26af4:	ldr	r2, [sp, #32]
   26af8:	ldr	r4, [r3, r2]
   26afc:	add	r1, sp, #56	; 0x38
   26b00:	ldr	r0, [sp, #28]
   26b04:	bl	26cb0 <__assert_fail@plt+0x1510c>
   26b08:	cmp	r0, #0
   26b0c:	bne	26bdc <__assert_fail@plt+0x15038>
   26b10:	ldr	r1, [sl, #4]
   26b14:	cmp	r1, #0
   26b18:	beq	269e0 <__assert_fail@plt+0x14e3c>
   26b1c:	ldr	r3, [sp, #52]	; 0x34
   26b20:	ldr	r2, [sp, #56]	; 0x38
   26b24:	mov	r0, r9
   26b28:	bl	25268 <__assert_fail@plt+0x136c4>
   26b2c:	cmp	r0, #0
   26b30:	beq	269e0 <__assert_fail@plt+0x14e3c>
   26b34:	mov	r4, r0
   26b38:	b	26bbc <__assert_fail@plt+0x15018>
   26b3c:	ldr	fp, [sp, #36]	; 0x24
   26b40:	ldr	r3, [sp, #16]
   26b44:	add	r3, r3, #1
   26b48:	mov	r2, r3
   26b4c:	str	r3, [sp, #16]
   26b50:	ldr	r3, [fp, #4]
   26b54:	cmp	r2, r3
   26b58:	bge	26bb8 <__assert_fail@plt+0x15014>
   26b5c:	ldr	r3, [fp, #8]
   26b60:	ldr	r2, [sp, #16]
   26b64:	ldr	r7, [r3, r2, lsl #2]
   26b68:	ldr	r3, [r9]
   26b6c:	add	r3, r3, r7, lsl #3
   26b70:	ldrb	r2, [r3, #4]
   26b74:	ldr	r3, [sl, #8]
   26b78:	cmp	r7, r3
   26b7c:	beq	26998 <__assert_fail@plt+0x14df4>
   26b80:	cmp	r2, #4
   26b84:	bne	26b40 <__assert_fail@plt+0x14f9c>
   26b88:	ldr	r3, [sp, #28]
   26b8c:	ldr	r4, [r3, #116]	; 0x74
   26b90:	ldr	r6, [sp, #48]	; 0x30
   26b94:	add	r4, r4, r6
   26b98:	add	r3, r7, r7, lsl #1
   26b9c:	lsl	r3, r3, #2
   26ba0:	str	r3, [sp, #24]
   26ba4:	lsl	r3, r7, #2
   26ba8:	str	r3, [sp, #20]
   26bac:	ldr	r5, [sp, #44]	; 0x2c
   26bb0:	str	fp, [sp, #36]	; 0x24
   26bb4:	b	26a2c <__assert_fail@plt+0x14e88>
   26bb8:	mov	r4, #0
   26bbc:	ldr	r3, [sp, #56]	; 0x38
   26bc0:	cmp	r3, #0
   26bc4:	beq	26678 <__assert_fail@plt+0x14ad4>
   26bc8:	ldr	r0, [sp, #80]	; 0x50
   26bcc:	bl	17204 <__assert_fail@plt+0x5660>
   26bd0:	b	26678 <__assert_fail@plt+0x14ad4>
   26bd4:	mov	r4, #12
   26bd8:	b	26bbc <__assert_fail@plt+0x15018>
   26bdc:	mov	r4, r0
   26be0:	b	26bbc <__assert_fail@plt+0x15018>
   26be4:	mov	r4, #0
   26be8:	b	26678 <__assert_fail@plt+0x14ad4>
   26bec:	mov	r4, #12
   26bf0:	b	26678 <__assert_fail@plt+0x14ad4>
   26bf4:	mov	r4, #12
   26bf8:	b	26678 <__assert_fail@plt+0x14ad4>
   26bfc:	add	r0, sp, #88	; 0x58
   26c00:	mov	r3, #0
   26c04:	str	r3, [r0, #-4]!
   26c08:	ldr	r4, [sl]
   26c0c:	mov	r2, r5
   26c10:	mov	r1, r6
   26c14:	bl	25060 <__assert_fail@plt+0x134bc>
   26c18:	str	r0, [r4, fp, lsl #2]
   26c1c:	ldr	r4, [sp, #84]	; 0x54
   26c20:	cmp	r4, #0
   26c24:	beq	2665c <__assert_fail@plt+0x14ab8>
   26c28:	b	26678 <__assert_fail@plt+0x14ad4>
   26c2c:	ldr	r3, [sp, #16]
   26c30:	cmp	r3, #0
   26c34:	bge	2682c <__assert_fail@plt+0x14c88>
   26c38:	add	r7, r7, #1
   26c3c:	ldr	r3, [sl, #20]
   26c40:	cmp	r7, r3
   26c44:	bge	26bfc <__assert_fail@plt+0x15058>
   26c48:	ldr	r3, [sl, #24]
   26c4c:	ldr	r3, [r3, r7, lsl #2]
   26c50:	add	r3, r3, r3, lsl #1
   26c54:	ldr	ip, [sp, #20]
   26c58:	add	r2, ip, r3, lsl #3
   26c5c:	ldr	r1, [r2, #8]
   26c60:	cmp	fp, r1
   26c64:	ble	26c38 <__assert_fail@plt+0x15094>
   26c68:	ldr	r1, [r2, #4]
   26c6c:	cmp	fp, r1
   26c70:	bgt	26c38 <__assert_fail@plt+0x15094>
   26c74:	ldr	r0, [r6]
   26c78:	ldr	r3, [ip, r3, lsl #3]
   26c7c:	ldr	r8, [r0, r3, lsl #3]
   26c80:	ldr	r3, [r2, #12]
   26c84:	cmp	fp, r3
   26c88:	beq	26790 <__assert_fail@plt+0x14bec>
   26c8c:	ldr	r3, [r5, #4]
   26c90:	cmp	r3, #0
   26c94:	movgt	r9, #0
   26c98:	bgt	268b8 <__assert_fail@plt+0x14d14>
   26c9c:	b	26c38 <__assert_fail@plt+0x15094>
   26ca0:	mov	r4, r0
   26ca4:	b	26678 <__assert_fail@plt+0x14ad4>
   26ca8:	mov	r4, r0
   26cac:	b	26678 <__assert_fail@plt+0x14ad4>
   26cb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26cb4:	sub	sp, sp, #60	; 0x3c
   26cb8:	mov	r5, r0
   26cbc:	str	r0, [sp, #12]
   26cc0:	mov	r9, r1
   26cc4:	ldr	fp, [r1, #12]
   26cc8:	lsl	r3, fp, #2
   26ccc:	str	r3, [sp, #16]
   26cd0:	ldr	r1, [r1, #8]
   26cd4:	add	r0, sp, #44	; 0x2c
   26cd8:	bl	1f3d8 <__assert_fail@plt+0xd834>
   26cdc:	subs	r4, r0, #0
   26ce0:	bne	26f74 <__assert_fail@plt+0x153d0>
   26ce4:	add	r3, sp, #44	; 0x2c
   26ce8:	mov	r2, fp
   26cec:	mov	r1, r9
   26cf0:	mov	r0, r5
   26cf4:	bl	265f0 <__assert_fail@plt+0x14a4c>
   26cf8:	subs	r3, r0, #0
   26cfc:	str	r3, [sp, #36]	; 0x24
   26d00:	bne	26f60 <__assert_fail@plt+0x153bc>
   26d04:	cmp	fp, #0
   26d08:	ldrle	r4, [sp, #36]	; 0x24
   26d0c:	ble	26f6c <__assert_fail@plt+0x153c8>
   26d10:	mov	r3, #0
   26d14:	str	r3, [sp, #32]
   26d18:	add	r3, r9, #16
   26d1c:	str	r3, [sp, #28]
   26d20:	mov	sl, fp
   26d24:	mov	fp, r9
   26d28:	b	26ec4 <__assert_fail@plt+0x15320>
   26d2c:	ldr	r2, [sp, #16]
   26d30:	mov	r1, #0
   26d34:	bl	119e8 <memset@plt>
   26d38:	ldr	r0, [sp, #52]	; 0x34
   26d3c:	bl	17204 <__assert_fail@plt+0x5660>
   26d40:	ldr	r4, [sp, #36]	; 0x24
   26d44:	b	26f74 <__assert_fail@plt+0x153d0>
   26d48:	ldr	r3, [fp, #12]
   26d4c:	str	r3, [sp, #20]
   26d50:	ldr	r2, [sp, #12]
   26d54:	ldr	r3, [r2, #84]	; 0x54
   26d58:	mov	r0, r3
   26d5c:	mov	r3, sl
   26d60:	mov	r1, r4
   26d64:	str	r0, [sp, #24]
   26d68:	bl	2354c <__assert_fail@plt+0x119a8>
   26d6c:	subs	r9, r0, #0
   26d70:	ble	26db8 <__assert_fail@plt+0x15214>
   26d74:	add	r3, sl, r9
   26d78:	ldr	r2, [sp, #20]
   26d7c:	cmp	r2, r3
   26d80:	blt	26dc0 <__assert_fail@plt+0x1521c>
   26d84:	ldr	r2, [fp]
   26d88:	ldr	r0, [r2, r3, lsl #2]
   26d8c:	cmp	r0, #0
   26d90:	beq	26e40 <__assert_fail@plt+0x1529c>
   26d94:	ldr	r3, [sp, #24]
   26d98:	ldr	r3, [r3, #12]
   26d9c:	ldr	r2, [sp, #8]
   26da0:	ldr	r1, [r3, r2, lsl #2]
   26da4:	add	r0, r0, #4
   26da8:	bl	1e46c <__assert_fail@plt+0xc8c8>
   26dac:	cmp	r0, #0
   26db0:	beq	26e40 <__assert_fail@plt+0x1529c>
   26db4:	b	26dc0 <__assert_fail@plt+0x1521c>
   26db8:	cmp	r9, #0
   26dbc:	beq	26e40 <__assert_fail@plt+0x1529c>
   26dc0:	ldr	r3, [fp, #20]
   26dc4:	cmp	r3, #0
   26dc8:	beq	26df8 <__assert_fail@plt+0x15254>
   26dcc:	ldr	r3, [r8, #12]
   26dd0:	ldr	r2, [sp, #8]
   26dd4:	ldr	r2, [r3, r2, lsl #2]
   26dd8:	str	sl, [sp, #4]
   26ddc:	str	r4, [sp]
   26de0:	add	r3, sl, r9
   26de4:	ldr	r1, [sp, #28]
   26de8:	ldr	r0, [sp, #12]
   26dec:	bl	1eb40 <__assert_fail@plt+0xcf9c>
   26df0:	cmp	r0, #0
   26df4:	bne	26e0c <__assert_fail@plt+0x15268>
   26df8:	mov	r1, r4
   26dfc:	add	r0, sp, #44	; 0x2c
   26e00:	bl	21800 <__assert_fail@plt+0xfc5c>
   26e04:	cmp	r0, #0
   26e08:	beq	26f68 <__assert_fail@plt+0x153c4>
   26e0c:	add	r5, r5, #1
   26e10:	ldr	r3, [r7, #20]
   26e14:	cmp	r5, r3
   26e18:	bge	26e94 <__assert_fail@plt+0x152f0>
   26e1c:	ldr	r3, [r7, #24]
   26e20:	ldr	r4, [r3, r5, lsl #2]
   26e24:	str	r4, [sp, #8]
   26e28:	lsl	r6, r4, #3
   26e2c:	ldr	r3, [r8]
   26e30:	add	r3, r3, r6
   26e34:	ldrb	r3, [r3, #6]
   26e38:	tst	r3, #16
   26e3c:	bne	26d48 <__assert_fail@plt+0x151a4>
   26e40:	ldr	r1, [r8]
   26e44:	mov	r2, sl
   26e48:	add	r1, r1, r6
   26e4c:	ldr	r0, [sp, #12]
   26e50:	bl	2222c <__assert_fail@plt+0x10688>
   26e54:	cmp	r0, #0
   26e58:	beq	26e0c <__assert_fail@plt+0x15268>
   26e5c:	ldr	r3, [fp]
   26e60:	ldr	r2, [sp, #16]
   26e64:	ldr	r0, [r3, r2]
   26e68:	cmp	r0, #0
   26e6c:	beq	26e0c <__assert_fail@plt+0x15268>
   26e70:	ldr	r3, [r8, #12]
   26e74:	ldr	r2, [sp, #8]
   26e78:	ldr	r1, [r3, r2, lsl #2]
   26e7c:	add	r0, r0, #4
   26e80:	bl	1e46c <__assert_fail@plt+0xc8c8>
   26e84:	cmp	r0, #0
   26e88:	beq	26e0c <__assert_fail@plt+0x15268>
   26e8c:	mov	r9, #1
   26e90:	b	26dc0 <__assert_fail@plt+0x1521c>
   26e94:	add	r3, sp, #44	; 0x2c
   26e98:	mov	r2, sl
   26e9c:	mov	r1, fp
   26ea0:	ldr	r0, [sp, #12]
   26ea4:	bl	265f0 <__assert_fail@plt+0x14a4c>
   26ea8:	cmp	r0, #0
   26eac:	bne	26f50 <__assert_fail@plt+0x153ac>
   26eb0:	ldr	r3, [sp, #16]
   26eb4:	sub	r3, r3, #4
   26eb8:	str	r3, [sp, #16]
   26ebc:	cmp	sl, #0
   26ec0:	beq	26f58 <__assert_fail@plt+0x153b4>
   26ec4:	ldr	r0, [fp]
   26ec8:	ldr	r3, [sp, #16]
   26ecc:	ldr	r3, [r0, r3]
   26ed0:	cmp	r3, #0
   26ed4:	ldreq	r3, [sp, #32]
   26ed8:	addeq	r3, r3, #1
   26edc:	movne	r3, #0
   26ee0:	str	r3, [sp, #32]
   26ee4:	ldr	r3, [sp, #12]
   26ee8:	ldr	r3, [r3, #120]	; 0x78
   26eec:	ldr	r2, [sp, #32]
   26ef0:	cmp	r2, r3
   26ef4:	bgt	26d2c <__assert_fail@plt+0x15188>
   26ef8:	mov	r3, #0
   26efc:	str	r3, [sp, #48]	; 0x30
   26f00:	sub	sl, sl, #1
   26f04:	ldr	r2, [sp, #12]
   26f08:	ldr	r3, [r2, #100]	; 0x64
   26f0c:	ldr	r1, [sp, #16]
   26f10:	add	r3, r3, r1
   26f14:	ldr	r7, [r3, #-4]
   26f18:	cmp	r7, #0
   26f1c:	beq	26e94 <__assert_fail@plt+0x152f0>
   26f20:	ldr	r8, [r2, #84]	; 0x54
   26f24:	ldr	r3, [r7, #20]
   26f28:	cmp	r3, #0
   26f2c:	ble	26e94 <__assert_fail@plt+0x152f0>
   26f30:	ldr	r3, [r7, #24]
   26f34:	ldr	r4, [r3]
   26f38:	str	r4, [sp, #8]
   26f3c:	lsl	r6, r4, #3
   26f40:	ldr	r3, [r8]
   26f44:	add	r3, r3, r6
   26f48:	mov	r5, #0
   26f4c:	b	26e34 <__assert_fail@plt+0x15290>
   26f50:	mov	r4, r0
   26f54:	b	26f6c <__assert_fail@plt+0x153c8>
   26f58:	mov	r4, r0
   26f5c:	b	26f6c <__assert_fail@plt+0x153c8>
   26f60:	ldr	r4, [sp, #36]	; 0x24
   26f64:	b	26f6c <__assert_fail@plt+0x153c8>
   26f68:	mov	r4, #12
   26f6c:	ldr	r0, [sp, #52]	; 0x34
   26f70:	bl	17204 <__assert_fail@plt+0x5660>
   26f74:	mov	r0, r4
   26f78:	add	sp, sp, #60	; 0x3c
   26f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26f80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26f84:	sub	sp, sp, #412	; 0x19c
   26f88:	mov	r6, r0
   26f8c:	str	r0, [sp, #24]
   26f90:	str	r1, [sp, #36]	; 0x24
   26f94:	str	r2, [sp, #48]	; 0x30
   26f98:	mov	r4, r3
   26f9c:	ldr	r5, [sp, #448]	; 0x1c0
   26fa0:	ldr	fp, [r0]
   26fa4:	mov	r2, #136	; 0x88
   26fa8:	mov	r1, #0
   26fac:	add	r0, sp, #268	; 0x10c
   26fb0:	bl	119e8 <memset@plt>
   26fb4:	str	fp, [sp, #352]	; 0x160
   26fb8:	ldr	r2, [r6, #16]
   26fbc:	cmp	r2, #0
   26fc0:	beq	2735c <__assert_fail@plt+0x157b8>
   26fc4:	ldrb	r3, [r6, #28]
   26fc8:	subs	r1, r4, r5
   26fcc:	movne	r1, #1
   26fd0:	ands	r1, r1, r3, lsr #3
   26fd4:	beq	27368 <__assert_fail@plt+0x157c4>
   26fd8:	and	r3, r3, #1
   26fdc:	cmp	r3, #0
   26fe0:	movne	r2, #0
   26fe4:	str	r2, [sp, #52]	; 0x34
   26fe8:	ldr	r3, [sp, #24]
   26fec:	ldr	r3, [r3, #24]
   26ff0:	ldr	r2, [sp, #456]	; 0x1c8
   26ff4:	cmp	r3, r2
   26ff8:	subcc	r2, r2, #1
   26ffc:	subcc	r3, r2, r3
   27000:	movcs	r3, #0
   27004:	str	r3, [sp, #64]	; 0x40
   27008:	ldr	r2, [sp, #24]
   2700c:	ldr	r3, [r2, #8]
   27010:	cmp	r3, #0
   27014:	beq	28564 <__assert_fail@plt+0x169c0>
   27018:	ldr	r3, [fp, #36]	; 0x24
   2701c:	cmp	r3, #0
   27020:	moveq	r3, #1
   27024:	streq	r3, [sp, #28]
   27028:	beq	285e8 <__assert_fail@plt+0x16a44>
   2702c:	ldr	r3, [fp, #40]	; 0x28
   27030:	cmp	r3, #0
   27034:	beq	28570 <__assert_fail@plt+0x169cc>
   27038:	ldr	r3, [fp, #44]	; 0x2c
   2703c:	cmp	r3, #0
   27040:	moveq	r3, #1
   27044:	streq	r3, [sp, #28]
   27048:	beq	285e8 <__assert_fail@plt+0x16a44>
   2704c:	ldr	r3, [fp, #48]	; 0x30
   27050:	cmp	r3, #0
   27054:	beq	2857c <__assert_fail@plt+0x169d8>
   27058:	ldr	r3, [fp, #36]	; 0x24
   2705c:	ldr	r3, [r3, #8]
   27060:	cmp	r3, #0
   27064:	bne	270b0 <__assert_fail@plt+0x1550c>
   27068:	ldr	r3, [fp, #40]	; 0x28
   2706c:	ldr	r3, [r3, #8]
   27070:	cmp	r3, #0
   27074:	bne	270b0 <__assert_fail@plt+0x1550c>
   27078:	ldr	r3, [fp, #44]	; 0x2c
   2707c:	ldr	r3, [r3, #8]
   27080:	cmp	r3, #0
   27084:	beq	27094 <__assert_fail@plt+0x154f0>
   27088:	ldrsb	r3, [r2, #28]
   2708c:	cmp	r3, #0
   27090:	blt	270b0 <__assert_fail@plt+0x1550c>
   27094:	cmp	r4, #0
   27098:	cmpne	r5, #0
   2709c:	movne	r3, #1
   270a0:	strne	r3, [sp, #28]
   270a4:	bne	285e8 <__assert_fail@plt+0x16a44>
   270a8:	mov	r5, #0
   270ac:	mov	r4, r5
   270b0:	ldr	r3, [sp, #456]	; 0x1c8
   270b4:	ldr	r2, [sp, #64]	; 0x40
   270b8:	subs	r3, r3, r2
   270bc:	str	r3, [sp, #60]	; 0x3c
   270c0:	movne	r3, #1
   270c4:	strne	r3, [sp, #16]
   270c8:	bne	270dc <__assert_fail@plt+0x15538>
   270cc:	ldr	r3, [fp, #76]	; 0x4c
   270d0:	adds	r3, r3, #0
   270d4:	movne	r3, #1
   270d8:	str	r3, [sp, #16]
   270dc:	ldr	r2, [sp, #24]
   270e0:	ldr	r3, [r2, #20]
   270e4:	mov	lr, r3
   270e8:	str	r3, [sp, #76]	; 0x4c
   270ec:	ldr	r3, [r2, #12]
   270f0:	lsr	r3, r3, #22
   270f4:	and	r3, r3, #1
   270f8:	ldr	r0, [fp, #92]	; 0x5c
   270fc:	ldr	r2, [fp, #8]
   27100:	add	r2, r2, #1
   27104:	cmp	r2, r0
   27108:	movlt	r2, r0
   2710c:	ldr	ip, [sp, #48]	; 0x30
   27110:	add	r1, ip, #1
   27114:	ldr	r6, [sp, #36]	; 0x24
   27118:	str	r6, [sp, #268]	; 0x10c
   2711c:	str	ip, [sp, #316]	; 0x13c
   27120:	str	ip, [sp, #312]	; 0x138
   27124:	str	lr, [sp, #332]	; 0x14c
   27128:	strb	r3, [sp, #340]	; 0x154
   2712c:	adds	r6, lr, #0
   27130:	movne	r6, #1
   27134:	orr	r3, r3, r6
   27138:	strb	r3, [sp, #343]	; 0x157
   2713c:	str	r0, [sp, #348]	; 0x15c
   27140:	ldrb	r3, [fp, #88]	; 0x58
   27144:	lsr	r0, r3, #2
   27148:	and	r0, r0, #1
   2714c:	strb	r0, [sp, #341]	; 0x155
   27150:	lsr	r3, r3, #3
   27154:	and	r3, r3, #1
   27158:	strb	r3, [sp, #342]	; 0x156
   2715c:	str	ip, [sp, #324]	; 0x144
   27160:	str	ip, [sp, #320]	; 0x140
   27164:	cmp	r2, r1
   27168:	movlt	r1, r2
   2716c:	add	r0, sp, #268	; 0x10c
   27170:	bl	1ef80 <__assert_fail@plt+0xd3dc>
   27174:	subs	r3, r0, #0
   27178:	str	r3, [sp, #28]
   2717c:	bne	285cc <__assert_fail@plt+0x16a28>
   27180:	add	r3, fp, #96	; 0x60
   27184:	str	r3, [sp, #336]	; 0x150
   27188:	ldrb	r3, [fp, #88]	; 0x58
   2718c:	lsr	r3, r3, #4
   27190:	and	r3, r3, #1
   27194:	strb	r3, [sp, #346]	; 0x15a
   27198:	ldrb	r3, [sp, #343]	; 0x157
   2719c:	cmp	r3, #0
   271a0:	beq	28588 <__assert_fail@plt+0x169e4>
   271a4:	mov	r3, #0
   271a8:	str	r3, [sp, #296]	; 0x128
   271ac:	str	r3, [sp, #300]	; 0x12c
   271b0:	ldr	r3, [sp, #452]	; 0x1c4
   271b4:	str	r3, [sp, #324]	; 0x144
   271b8:	str	r3, [sp, #320]	; 0x140
   271bc:	ldr	r3, [sp, #24]
   271c0:	ldrb	r3, [r3, #28]
   271c4:	lsr	r3, r3, #7
   271c8:	strb	r3, [sp, #345]	; 0x159
   271cc:	ldr	r7, [fp, #76]	; 0x4c
   271d0:	lsl	r7, r7, #1
   271d4:	ldr	r3, [sp, #464]	; 0x1d0
   271d8:	str	r3, [sp, #356]	; 0x164
   271dc:	mvn	r3, #0
   271e0:	str	r3, [sp, #360]	; 0x168
   271e4:	cmp	r7, #0
   271e8:	ble	27224 <__assert_fail@plt+0x15680>
   271ec:	ldr	r3, [pc, #4000]	; 28194 <__assert_fail@plt+0x165f0>
   271f0:	cmp	r7, r3
   271f4:	bhi	285a8 <__assert_fail@plt+0x16a04>
   271f8:	add	r0, r7, r7, lsl #1
   271fc:	lsl	r0, r0, #3
   27200:	bl	2d404 <__assert_fail@plt+0x1b860>
   27204:	str	r0, [sp, #384]	; 0x180
   27208:	lsl	r0, r7, #2
   2720c:	bl	2d404 <__assert_fail@plt+0x1b860>
   27210:	str	r0, [sp, #400]	; 0x190
   27214:	ldr	r3, [sp, #384]	; 0x180
   27218:	cmp	r0, #0
   2721c:	cmpne	r3, #0
   27220:	beq	285a8 <__assert_fail@plt+0x16a04>
   27224:	str	r7, [sp, #380]	; 0x17c
   27228:	mov	r3, #1
   2722c:	str	r3, [sp, #388]	; 0x184
   27230:	str	r7, [sp, #396]	; 0x18c
   27234:	ldr	r3, [sp, #60]	; 0x3c
   27238:	cmp	r3, #1
   2723c:	bls	27374 <__assert_fail@plt+0x157d0>
   27240:	ldr	r3, [sp, #304]	; 0x130
   27244:	cmn	r3, #-1073741822	; 0xc0000002
   27248:	bhi	28500 <__assert_fail@plt+0x1695c>
   2724c:	add	r3, r3, #1
   27250:	lsl	r0, r3, #2
   27254:	bl	2d404 <__assert_fail@plt+0x1b860>
   27258:	str	r0, [sp, #368]	; 0x170
   2725c:	cmp	r0, #0
   27260:	beq	2850c <__assert_fail@plt+0x16968>
   27264:	str	r4, [sp, #404]	; 0x194
   27268:	ldr	r3, [sp, #464]	; 0x1d0
   2726c:	and	r3, r3, #1
   27270:	cmp	r3, #0
   27274:	movne	r3, #4
   27278:	moveq	r3, #6
   2727c:	str	r3, [sp, #328]	; 0x148
   27280:	cmp	r4, r5
   27284:	mvngt	r3, #0
   27288:	movle	r3, #1
   2728c:	str	r3, [sp, #84]	; 0x54
   27290:	movlt	r3, r4
   27294:	movge	r3, r5
   27298:	str	r3, [sp, #56]	; 0x38
   2729c:	movge	r3, r4
   272a0:	movlt	r3, r5
   272a4:	str	r3, [sp, #44]	; 0x2c
   272a8:	ldr	r3, [fp, #92]	; 0x5c
   272ac:	str	r3, [sp, #80]	; 0x50
   272b0:	ldr	r2, [sp, #52]	; 0x34
   272b4:	cmp	r2, #0
   272b8:	moveq	r3, #8
   272bc:	beq	27304 <__assert_fail@plt+0x15760>
   272c0:	cmp	r3, #1
   272c4:	moveq	r3, #4
   272c8:	beq	272f0 <__assert_fail@plt+0x1574c>
   272cc:	ldr	r3, [sp, #24]
   272d0:	ldr	r3, [r3, #12]
   272d4:	lsr	r3, r3, #22
   272d8:	eor	r3, r3, #1
   272dc:	ldr	r2, [sp, #76]	; 0x4c
   272e0:	cmp	r2, #0
   272e4:	movne	r3, #0
   272e8:	andeq	r3, r3, #1
   272ec:	lsl	r3, r3, #2
   272f0:	cmp	r4, r5
   272f4:	movle	r2, #2
   272f8:	movgt	r2, #0
   272fc:	orr	r3, r6, r3
   27300:	orr	r3, r3, r2
   27304:	ldr	r2, [sp, #56]	; 0x38
   27308:	cmp	r4, r2
   2730c:	movge	r2, #0
   27310:	movlt	r2, #1
   27314:	ldr	r1, [sp, #44]	; 0x2c
   27318:	cmp	r4, r1
   2731c:	orrgt	r2, r2, #1
   27320:	str	r2, [sp, #68]	; 0x44
   27324:	cmp	r2, #0
   27328:	bne	28518 <__assert_fail@plt+0x16974>
   2732c:	add	r2, sp, #408	; 0x198
   27330:	cmp	r4, r5
   27334:	suble	r2, r2, #4
   27338:	movgt	r2, #0
   2733c:	str	r2, [sp, #88]	; 0x58
   27340:	adds	r2, r2, #0
   27344:	movne	r2, #1
   27348:	str	r2, [sp, #92]	; 0x5c
   2734c:	sub	r3, r3, #4
   27350:	str	r3, [sp, #72]	; 0x48
   27354:	str	fp, [sp, #40]	; 0x28
   27358:	b	288cc <__assert_fail@plt+0x16d28>
   2735c:	mov	r3, #0
   27360:	str	r3, [sp, #52]	; 0x34
   27364:	b	26fe8 <__assert_fail@plt+0x15444>
   27368:	mov	r3, #0
   2736c:	str	r3, [sp, #52]	; 0x34
   27370:	b	26fe8 <__assert_fail@plt+0x15444>
   27374:	ldrb	r3, [fp, #88]	; 0x58
   27378:	tst	r3, #2
   2737c:	beq	27264 <__assert_fail@plt+0x156c0>
   27380:	b	27240 <__assert_fail@plt+0x1569c>
   27384:	ldr	r3, [sp, #404]	; 0x194
   27388:	ldr	r2, [sp, #44]	; 0x2c
   2738c:	cmp	r2, r3
   27390:	ble	27508 <__assert_fail@plt+0x15964>
   27394:	ldr	r1, [sp, #36]	; 0x24
   27398:	add	r2, r1, r3
   2739c:	ldrb	r1, [r1, r3]
   273a0:	ldr	r0, [sp, #76]	; 0x4c
   273a4:	ldrb	r1, [r0, r1]
   273a8:	ldr	r0, [sp, #52]	; 0x34
   273ac:	ldrb	r1, [r0, r1]
   273b0:	cmp	r1, #0
   273b4:	bne	27530 <__assert_fail@plt+0x1598c>
   273b8:	ldr	ip, [sp, #52]	; 0x34
   273bc:	ldr	lr, [sp, #76]	; 0x4c
   273c0:	ldr	r0, [sp, #44]	; 0x2c
   273c4:	add	r3, r3, #1
   273c8:	cmp	r0, r3
   273cc:	beq	274b8 <__assert_fail@plt+0x15914>
   273d0:	ldrb	r1, [r2, #1]!
   273d4:	ldrb	r1, [lr, r1]
   273d8:	ldrb	r1, [ip, r1]
   273dc:	cmp	r1, #0
   273e0:	beq	273c4 <__assert_fail@plt+0x15820>
   273e4:	str	r3, [sp, #404]	; 0x194
   273e8:	b	27530 <__assert_fail@plt+0x1598c>
   273ec:	ldr	r3, [sp, #404]	; 0x194
   273f0:	ldr	r2, [sp, #44]	; 0x2c
   273f4:	cmp	r2, r3
   273f8:	ble	27508 <__assert_fail@plt+0x15964>
   273fc:	ldr	r1, [sp, #36]	; 0x24
   27400:	add	r2, r1, r3
   27404:	ldrb	r1, [r1, r3]
   27408:	ldr	r0, [sp, #52]	; 0x34
   2740c:	ldrb	r1, [r0, r1]
   27410:	cmp	r1, #0
   27414:	bne	27530 <__assert_fail@plt+0x1598c>
   27418:	ldr	ip, [sp, #52]	; 0x34
   2741c:	ldr	r0, [sp, #44]	; 0x2c
   27420:	add	r3, r3, #1
   27424:	cmp	r0, r3
   27428:	beq	27500 <__assert_fail@plt+0x1595c>
   2742c:	ldrb	r1, [r2, #1]!
   27430:	ldrb	r1, [ip, r1]
   27434:	cmp	r1, #0
   27438:	beq	27420 <__assert_fail@plt+0x1587c>
   2743c:	str	r3, [sp, #404]	; 0x194
   27440:	b	27530 <__assert_fail@plt+0x1598c>
   27444:	ldr	r3, [sp, #404]	; 0x194
   27448:	ldr	r2, [sp, #56]	; 0x38
   2744c:	cmp	r2, r3
   27450:	bgt	274b0 <__assert_fail@plt+0x1590c>
   27454:	ldr	r1, [sp, #68]	; 0x44
   27458:	ldr	ip, [sp, #52]	; 0x34
   2745c:	ldr	r0, [sp, #76]	; 0x4c
   27460:	ldr	r4, [sp, #56]	; 0x38
   27464:	ldr	r5, [sp, #36]	; 0x24
   27468:	ldr	lr, [sp, #48]	; 0x30
   2746c:	cmp	lr, r3
   27470:	ldrbgt	r2, [r5, r3]
   27474:	movle	r2, #0
   27478:	cmp	r0, #0
   2747c:	ldrbne	r2, [r0, r2]
   27480:	ldrb	r2, [ip, r2]
   27484:	cmp	r2, #0
   27488:	bne	2751c <__assert_fail@plt+0x15978>
   2748c:	sub	r3, r3, #1
   27490:	mov	r1, #1
   27494:	cmp	r4, r3
   27498:	ble	2746c <__assert_fail@plt+0x158c8>
   2749c:	ldr	fp, [sp, #40]	; 0x28
   274a0:	str	r3, [sp, #404]	; 0x194
   274a4:	mov	r3, #1
   274a8:	str	r3, [sp, #28]
   274ac:	b	285cc <__assert_fail@plt+0x16a28>
   274b0:	ldr	fp, [sp, #40]	; 0x28
   274b4:	b	274a4 <__assert_fail@plt+0x15900>
   274b8:	str	r3, [sp, #404]	; 0x194
   274bc:	ldr	r2, [sp, #48]	; 0x30
   274c0:	ldr	r3, [sp, #44]	; 0x2c
   274c4:	cmp	r2, r3
   274c8:	ldrgt	r2, [sp, #36]	; 0x24
   274cc:	ldrbgt	r3, [r2, r3]
   274d0:	movle	r3, #0
   274d4:	ldr	r2, [sp, #76]	; 0x4c
   274d8:	cmp	r2, #0
   274dc:	ldrbne	r3, [r2, r3]
   274e0:	ldr	r2, [sp, #52]	; 0x34
   274e4:	ldrb	r3, [r2, r3]
   274e8:	cmp	r3, #0
   274ec:	bne	27530 <__assert_fail@plt+0x1598c>
   274f0:	ldr	fp, [sp, #40]	; 0x28
   274f4:	mov	r3, #1
   274f8:	str	r3, [sp, #28]
   274fc:	b	285cc <__assert_fail@plt+0x16a28>
   27500:	str	r3, [sp, #404]	; 0x194
   27504:	b	274bc <__assert_fail@plt+0x15918>
   27508:	ldr	r3, [sp, #404]	; 0x194
   2750c:	ldr	r2, [sp, #44]	; 0x2c
   27510:	cmp	r2, r3
   27514:	bne	27530 <__assert_fail@plt+0x1598c>
   27518:	b	274bc <__assert_fail@plt+0x15918>
   2751c:	cmp	r1, #0
   27520:	strne	r3, [sp, #404]	; 0x194
   27524:	ldr	r2, [sp, #56]	; 0x38
   27528:	cmp	r2, r3
   2752c:	bgt	275f0 <__assert_fail@plt+0x15a4c>
   27530:	ldr	r2, [sp, #464]	; 0x1d0
   27534:	ldr	r1, [sp, #404]	; 0x194
   27538:	add	r0, sp, #268	; 0x10c
   2753c:	bl	23a38 <__assert_fail@plt+0x11e94>
   27540:	subs	r3, r0, #0
   27544:	str	r3, [sp, #28]
   27548:	bne	28540 <__assert_fail@plt+0x1699c>
   2754c:	ldr	r3, [sp, #80]	; 0x50
   27550:	cmp	r3, #1
   27554:	beq	27574 <__assert_fail@plt+0x159d0>
   27558:	ldr	r3, [sp, #296]	; 0x128
   2755c:	cmp	r3, #0
   27560:	beq	27574 <__assert_fail@plt+0x159d0>
   27564:	ldr	r3, [sp, #276]	; 0x114
   27568:	ldr	r3, [r3]
   2756c:	cmn	r3, #1
   27570:	beq	28894 <__assert_fail@plt+0x16cf0>
   27574:	mov	r3, #0
   27578:	str	r3, [sp, #388]	; 0x184
   2757c:	str	r3, [sp, #376]	; 0x178
   27580:	str	r3, [sp, #372]	; 0x174
   27584:	ldr	r4, [sp, #352]	; 0x160
   27588:	ldr	r3, [sp, #308]	; 0x134
   2758c:	str	r3, [sp, #32]
   27590:	mov	r3, #0
   27594:	str	r3, [sp, #104]	; 0x68
   27598:	ldr	r6, [r4, #36]	; 0x24
   2759c:	ldrsb	r3, [r6, #52]	; 0x34
   275a0:	cmp	r3, #0
   275a4:	blt	276a8 <__assert_fail@plt+0x15b04>
   275a8:	ldr	r3, [sp, #368]	; 0x170
   275ac:	cmp	r3, #0
   275b0:	beq	27768 <__assert_fail@plt+0x15bc4>
   275b4:	ldr	r2, [sp, #32]
   275b8:	str	r6, [r3, r2, lsl #2]
   275bc:	ldr	r3, [r4, #76]	; 0x4c
   275c0:	cmp	r3, #0
   275c4:	ldreq	fp, [sp, #92]	; 0x5c
   275c8:	bne	27718 <__assert_fail@plt+0x15b74>
   275cc:	ldrb	r3, [r6, #52]	; 0x34
   275d0:	tst	r3, #16
   275d4:	bne	27770 <__assert_fail@plt+0x15bcc>
   275d8:	mvn	sl, #0
   275dc:	mov	r3, #0
   275e0:	str	r3, [sp, #12]
   275e4:	ldr	r3, [sp, #88]	; 0x58
   275e8:	str	r3, [sp, #20]
   275ec:	b	27b0c <__assert_fail@plt+0x15f68>
   275f0:	ldr	fp, [sp, #40]	; 0x28
   275f4:	mov	r3, #1
   275f8:	str	r3, [sp, #28]
   275fc:	b	285cc <__assert_fail@plt+0x16a28>
   27600:	ldr	r5, [sp, #52]	; 0x34
   27604:	ldr	r6, [sp, #84]	; 0x54
   27608:	ldr	r7, [sp, #56]	; 0x38
   2760c:	ldr	r8, [sp, #44]	; 0x2c
   27610:	b	2765c <__assert_fail@plt+0x15ab8>
   27614:	ldr	r2, [sp, #296]	; 0x128
   27618:	cmp	r3, r2
   2761c:	ldrcc	r2, [sp, #272]	; 0x110
   27620:	ldrbcc	r3, [r2, r3]
   27624:	movcs	r3, #0
   27628:	ldrb	r3, [r5, r3]
   2762c:	cmp	r3, #0
   27630:	bne	27530 <__assert_fail@plt+0x1598c>
   27634:	add	r3, r6, r4
   27638:	str	r3, [sp, #404]	; 0x194
   2763c:	cmp	r8, r3
   27640:	movge	r2, #0
   27644:	movlt	r2, #1
   27648:	cmp	r7, r3
   2764c:	movle	r3, r2
   27650:	orrgt	r3, r2, #1
   27654:	cmp	r3, #0
   27658:	bne	27698 <__assert_fail@plt+0x15af4>
   2765c:	ldr	r4, [sp, #404]	; 0x194
   27660:	ldr	r3, [sp, #292]	; 0x124
   27664:	sub	r3, r4, r3
   27668:	ldr	r2, [sp, #300]	; 0x12c
   2766c:	cmp	r3, r2
   27670:	bcc	27614 <__assert_fail@plt+0x15a70>
   27674:	ldr	r2, [sp, #464]	; 0x1d0
   27678:	mov	r1, r4
   2767c:	add	r0, sp, #268	; 0x10c
   27680:	bl	23a38 <__assert_fail@plt+0x11e94>
   27684:	cmp	r0, #0
   27688:	bne	28534 <__assert_fail@plt+0x16990>
   2768c:	ldr	r3, [sp, #292]	; 0x124
   27690:	sub	r3, r4, r3
   27694:	b	27614 <__assert_fail@plt+0x15a70>
   27698:	ldr	fp, [sp, #40]	; 0x28
   2769c:	mov	r3, #1
   276a0:	str	r3, [sp, #28]
   276a4:	b	285cc <__assert_fail@plt+0x16a28>
   276a8:	ldr	r2, [sp, #356]	; 0x164
   276ac:	ldr	r3, [sp, #32]
   276b0:	sub	r1, r3, #1
   276b4:	add	r0, sp, #268	; 0x10c
   276b8:	bl	22118 <__assert_fail@plt+0x10574>
   276bc:	tst	r0, #1
   276c0:	ldrne	r6, [r4, #40]	; 0x28
   276c4:	bne	275a8 <__assert_fail@plt+0x15a04>
   276c8:	cmp	r0, #0
   276cc:	beq	275a8 <__assert_fail@plt+0x15a04>
   276d0:	and	r3, r0, #6
   276d4:	cmp	r3, #6
   276d8:	ldreq	r6, [r4, #48]	; 0x30
   276dc:	beq	275a8 <__assert_fail@plt+0x15a04>
   276e0:	tst	r0, #2
   276e4:	ldrne	r6, [r4, #44]	; 0x2c
   276e8:	bne	275a8 <__assert_fail@plt+0x15a04>
   276ec:	tst	r0, #4
   276f0:	beq	275a8 <__assert_fail@plt+0x15a04>
   276f4:	mov	r3, r0
   276f8:	ldr	r2, [r6, #40]	; 0x28
   276fc:	mov	r1, r4
   27700:	add	r0, sp, #104	; 0x68
   27704:	bl	21060 <__assert_fail@plt+0xf4bc>
   27708:	subs	r6, r0, #0
   2770c:	bne	275a8 <__assert_fail@plt+0x15a04>
   27710:	ldr	fp, [sp, #40]	; 0x28
   27714:	b	285c4 <__assert_fail@plt+0x16a20>
   27718:	add	r4, r6, #4
   2771c:	mov	r2, #0
   27720:	mov	r1, r4
   27724:	add	r0, sp, #268	; 0x10c
   27728:	bl	223ac <__assert_fail@plt+0x10808>
   2772c:	str	r0, [sp, #104]	; 0x68
   27730:	cmp	r0, #0
   27734:	bne	27bc8 <__assert_fail@plt+0x16024>
   27738:	ldrb	r3, [r6, #52]	; 0x34
   2773c:	tst	r3, #64	; 0x40
   27740:	ldreq	fp, [sp, #68]	; 0x44
   27744:	beq	275cc <__assert_fail@plt+0x15a28>
   27748:	mov	r1, r4
   2774c:	add	r0, sp, #268	; 0x10c
   27750:	bl	25d70 <__assert_fail@plt+0x141cc>
   27754:	str	r0, [sp, #104]	; 0x68
   27758:	cmp	r0, #0
   2775c:	bne	27bd0 <__assert_fail@plt+0x1602c>
   27760:	ldr	fp, [sp, #68]	; 0x44
   27764:	b	275cc <__assert_fail@plt+0x15a28>
   27768:	ldr	fp, [sp, #92]	; 0x5c
   2776c:	b	275cc <__assert_fail@plt+0x15a28>
   27770:	ldrsb	r3, [r6, #52]	; 0x34
   27774:	cmp	r3, #0
   27778:	blt	27798 <__assert_fail@plt+0x15bf4>
   2777c:	ldr	r3, [sp, #16]
   27780:	cmp	r3, #0
   27784:	beq	277c0 <__assert_fail@plt+0x15c1c>
   27788:	ldr	sl, [sp, #32]
   2778c:	mov	r3, #1
   27790:	str	r3, [sp, #12]
   27794:	b	275e4 <__assert_fail@plt+0x15a40>
   27798:	ldr	r2, [sp, #32]
   2779c:	mov	r1, r6
   277a0:	add	r0, sp, #268	; 0x10c
   277a4:	bl	22668 <__assert_fail@plt+0x10ac4>
   277a8:	cmp	r0, #0
   277ac:	bne	2777c <__assert_fail@plt+0x15bd8>
   277b0:	mvn	sl, #0
   277b4:	mov	r3, #0
   277b8:	str	r3, [sp, #12]
   277bc:	b	275e4 <__assert_fail@plt+0x15a40>
   277c0:	ldr	sl, [sp, #32]
   277c4:	b	286e4 <__assert_fail@plt+0x16b40>
   277c8:	ldr	r2, [sp, #316]	; 0x13c
   277cc:	cmp	r3, r2
   277d0:	bge	27b2c <__assert_fail@plt+0x15f88>
   277d4:	add	r1, r1, #2
   277d8:	add	r0, sp, #268	; 0x10c
   277dc:	bl	200fc <__assert_fail@plt+0xe558>
   277e0:	str	r0, [sp, #104]	; 0x68
   277e4:	cmp	r0, #0
   277e8:	beq	27b38 <__assert_fail@plt+0x15f94>
   277ec:	ldr	fp, [sp, #40]	; 0x28
   277f0:	b	285c4 <__assert_fail@plt+0x16a20>
   277f4:	ldr	r2, [sp, #316]	; 0x13c
   277f8:	cmp	r3, r2
   277fc:	bge	27b38 <__assert_fail@plt+0x15f94>
   27800:	b	277d4 <__assert_fail@plt+0x15c30>
   27804:	ldr	r8, [sp, #352]	; 0x160
   27808:	ldr	r3, [r6, #8]
   2780c:	cmp	r3, #0
   27810:	ble	285b4 <__assert_fail@plt+0x16a10>
   27814:	mov	r5, #0
   27818:	b	27878 <__assert_fail@plt+0x15cd4>
   2781c:	tst	r3, #8
   27820:	beq	2782c <__assert_fail@plt+0x15c88>
   27824:	tst	r0, #1
   27828:	bne	27868 <__assert_fail@plt+0x15cc4>
   2782c:	tst	r3, #32
   27830:	beq	2783c <__assert_fail@plt+0x15c98>
   27834:	tst	r0, #2
   27838:	beq	27868 <__assert_fail@plt+0x15cc4>
   2783c:	tst	r3, #128	; 0x80
   27840:	beq	2784c <__assert_fail@plt+0x15ca8>
   27844:	tst	r0, #8
   27848:	beq	27868 <__assert_fail@plt+0x15cc4>
   2784c:	ldr	r3, [sp, #308]	; 0x134
   27850:	add	r2, sp, #268	; 0x10c
   27854:	mov	r1, r7
   27858:	mov	r0, r8
   2785c:	bl	2354c <__assert_fail@plt+0x119a8>
   27860:	cmp	r0, #0
   27864:	bne	278dc <__assert_fail@plt+0x15d38>
   27868:	add	r5, r5, #1
   2786c:	ldr	r3, [r6, #8]
   27870:	cmp	r5, r3
   27874:	bge	285b4 <__assert_fail@plt+0x16a10>
   27878:	ldr	r3, [r6, #12]
   2787c:	ldr	r7, [r3, r5, lsl #2]
   27880:	ldr	r4, [r8]
   27884:	add	r4, r4, r7, lsl #3
   27888:	ldrb	r3, [r4, #6]
   2788c:	tst	r3, #16
   27890:	beq	27868 <__assert_fail@plt+0x15cc4>
   27894:	ldr	r3, [r4, #4]
   27898:	ldr	r2, [pc, #2296]	; 28198 <__assert_fail@plt+0x165f4>
   2789c:	tst	r3, r2
   278a0:	beq	2784c <__assert_fail@plt+0x15ca8>
   278a4:	ldr	r2, [sp, #356]	; 0x164
   278a8:	ldr	r1, [sp, #308]	; 0x134
   278ac:	add	r0, sp, #268	; 0x10c
   278b0:	bl	22118 <__assert_fail@plt+0x10574>
   278b4:	ldr	r3, [r4, #4]
   278b8:	lsl	r3, r3, #14
   278bc:	lsr	r3, r3, #22
   278c0:	tst	r3, #4
   278c4:	beq	2781c <__assert_fail@plt+0x15c78>
   278c8:	tst	r0, #1
   278cc:	beq	27868 <__assert_fail@plt+0x15cc4>
   278d0:	tst	r3, #8
   278d4:	bne	27868 <__assert_fail@plt+0x15cc4>
   278d8:	b	2782c <__assert_fail@plt+0x15c88>
   278dc:	ldr	r4, [sp, #308]	; 0x134
   278e0:	add	r4, r0, r4
   278e4:	ldr	r3, [sp, #388]	; 0x184
   278e8:	cmp	r3, r0
   278ec:	movge	r0, r3
   278f0:	str	r0, [sp, #388]	; 0x184
   278f4:	mov	r1, r4
   278f8:	add	r0, sp, #268	; 0x10c
   278fc:	bl	224b4 <__assert_fail@plt+0x10910>
   27900:	str	r0, [sp, #116]	; 0x74
   27904:	cmp	r0, #0
   27908:	bne	27998 <__assert_fail@plt+0x15df4>
   2790c:	ldr	r3, [r8, #12]
   27910:	ldr	r2, [r3, r7, lsl #2]
   27914:	add	r2, r2, r2, lsl #1
   27918:	ldr	r3, [r8, #24]
   2791c:	add	r2, r3, r2, lsl #2
   27920:	ldr	r7, [sp, #368]	; 0x170
   27924:	ldr	r3, [r7, r4, lsl #2]
   27928:	cmp	r3, #0
   2792c:	beq	279b0 <__assert_fail@plt+0x15e0c>
   27930:	ldr	r1, [r3, #40]	; 0x28
   27934:	add	r0, sp, #128	; 0x80
   27938:	bl	1f924 <__assert_fail@plt+0xdd80>
   2793c:	str	r0, [sp, #116]	; 0x74
   27940:	cmp	r0, #0
   27944:	bne	27998 <__assert_fail@plt+0x15df4>
   27948:	ldr	r2, [sp, #356]	; 0x164
   2794c:	sub	r1, r4, #1
   27950:	add	r0, sp, #268	; 0x10c
   27954:	bl	22118 <__assert_fail@plt+0x10574>
   27958:	ldr	r7, [sp, #368]	; 0x170
   2795c:	mov	r3, r0
   27960:	add	r2, sp, #128	; 0x80
   27964:	mov	r1, r8
   27968:	add	r0, sp, #116	; 0x74
   2796c:	bl	21060 <__assert_fail@plt+0xf4bc>
   27970:	str	r0, [r7, r4, lsl #2]
   27974:	ldr	r0, [sp, #136]	; 0x88
   27978:	bl	17204 <__assert_fail@plt+0x5660>
   2797c:	ldr	r3, [sp, #368]	; 0x170
   27980:	ldr	r3, [r3, r4, lsl #2]
   27984:	cmp	r3, #0
   27988:	bne	27868 <__assert_fail@plt+0x15cc4>
   2798c:	ldr	r0, [sp, #116]	; 0x74
   27990:	cmp	r0, #0
   27994:	beq	27868 <__assert_fail@plt+0x15cc4>
   27998:	str	r0, [sp, #104]	; 0x68
   2799c:	ldr	r3, [sp, #368]	; 0x170
   279a0:	cmp	r3, #0
   279a4:	beq	286c0 <__assert_fail@plt+0x16b1c>
   279a8:	mov	r4, #0
   279ac:	b	27b74 <__assert_fail@plt+0x15fd0>
   279b0:	ldm	r2, {r0, r1, r2}
   279b4:	add	r3, sp, #128	; 0x80
   279b8:	stm	r3, {r0, r1, r2}
   279bc:	ldr	r2, [sp, #356]	; 0x164
   279c0:	sub	r1, r4, #1
   279c4:	add	r0, sp, #268	; 0x10c
   279c8:	bl	22118 <__assert_fail@plt+0x10574>
   279cc:	mov	r3, r0
   279d0:	add	r2, sp, #128	; 0x80
   279d4:	mov	r1, r8
   279d8:	add	r0, sp, #116	; 0x74
   279dc:	bl	21060 <__assert_fail@plt+0xf4bc>
   279e0:	str	r0, [r7, r4, lsl #2]
   279e4:	b	2797c <__assert_fail@plt+0x15dd8>
   279e8:	ldr	r5, [r6, #48]	; 0x30
   279ec:	cmp	r5, #0
   279f0:	beq	27a18 <__assert_fail@plt+0x15e74>
   279f4:	ldr	r2, [sp, #356]	; 0x164
   279f8:	ldr	r1, [sp, #308]	; 0x134
   279fc:	sub	r1, r1, #1
   27a00:	add	r0, sp, #268	; 0x10c
   27a04:	bl	22118 <__assert_fail@plt+0x10574>
   27a08:	tst	r0, #1
   27a0c:	addne	r4, r4, #256	; 0x100
   27a10:	ldr	r4, [r5, r4, lsl #2]
   27a14:	b	27b68 <__assert_fail@plt+0x15fc4>
   27a18:	mov	r1, r6
   27a1c:	ldr	r0, [sp, #352]	; 0x160
   27a20:	bl	24160 <__assert_fail@plt+0x125bc>
   27a24:	cmp	r0, #0
   27a28:	bne	27b58 <__assert_fail@plt+0x15fb4>
   27a2c:	mov	r3, #12
   27a30:	str	r3, [sp, #104]	; 0x68
   27a34:	b	2799c <__assert_fail@plt+0x15df8>
   27a38:	ldr	r3, [sp, #104]	; 0x68
   27a3c:	cmp	r3, #0
   27a40:	bne	285c0 <__assert_fail@plt+0x16a1c>
   27a44:	ldr	r3, [sp, #368]	; 0x170
   27a48:	cmp	r3, #0
   27a4c:	beq	286cc <__assert_fail@plt+0x16b28>
   27a50:	ldr	r3, [sp, #16]
   27a54:	eor	r3, r3, #1
   27a58:	ldr	r2, [sp, #12]
   27a5c:	tst	r2, r3
   27a60:	bne	286cc <__assert_fail@plt+0x16b28>
   27a64:	ldr	r0, [sp, #372]	; 0x174
   27a68:	ldr	r2, [sp, #308]	; 0x134
   27a6c:	ldr	r1, [sp, #368]	; 0x170
   27a70:	add	r1, r1, r2, lsl #2
   27a74:	add	r2, r2, #1
   27a78:	cmp	r0, r2
   27a7c:	blt	286cc <__assert_fail@plt+0x16b28>
   27a80:	ldr	r3, [sp, #308]	; 0x134
   27a84:	add	r3, r3, #1
   27a88:	str	r3, [sp, #308]	; 0x134
   27a8c:	ldr	r3, [r1, #4]!
   27a90:	cmp	r3, #0
   27a94:	beq	27a74 <__assert_fail@plt+0x15ed0>
   27a98:	mov	r2, #0
   27a9c:	add	r1, sp, #268	; 0x10c
   27aa0:	add	r0, sp, #104	; 0x68
   27aa4:	bl	26478 <__assert_fail@plt+0x148d4>
   27aa8:	mov	r4, r0
   27aac:	ldr	r3, [sp, #104]	; 0x68
   27ab0:	cmp	r3, #0
   27ab4:	cmpeq	r0, #0
   27ab8:	beq	27a64 <__assert_fail@plt+0x15ec0>
   27abc:	cmp	r0, #0
   27ac0:	bne	27b90 <__assert_fail@plt+0x15fec>
   27ac4:	b	286cc <__assert_fail@plt+0x16b28>
   27ac8:	ldr	r3, [sp, #68]	; 0x44
   27acc:	cmp	r6, r4
   27ad0:	movne	fp, r3
   27ad4:	ldr	r3, [sp, #32]
   27ad8:	cmp	r6, r4
   27adc:	moveq	r3, r9
   27ae0:	str	r3, [sp, #32]
   27ae4:	b	27b98 <__assert_fail@plt+0x15ff4>
   27ae8:	ldr	sl, [sp, #308]	; 0x134
   27aec:	ldr	r3, [sp, #16]
   27af0:	cmp	r3, #0
   27af4:	beq	286e4 <__assert_fail@plt+0x16b40>
   27af8:	mov	r3, #1
   27afc:	str	r3, [sp, #12]
   27b00:	mov	r3, #0
   27b04:	str	r3, [sp, #20]
   27b08:	mov	r6, r4
   27b0c:	ldr	r1, [sp, #308]	; 0x134
   27b10:	ldr	r3, [sp, #324]	; 0x144
   27b14:	cmp	r1, r3
   27b18:	bge	286cc <__assert_fail@plt+0x16b28>
   27b1c:	add	r9, r1, #1
   27b20:	ldr	r3, [sp, #304]	; 0x130
   27b24:	cmp	r9, r3
   27b28:	bge	277c8 <__assert_fail@plt+0x15c24>
   27b2c:	ldr	r3, [sp, #296]	; 0x128
   27b30:	cmp	r9, r3
   27b34:	bge	277f4 <__assert_fail@plt+0x15c50>
   27b38:	ldrb	r3, [r6, #52]	; 0x34
   27b3c:	tst	r3, #32
   27b40:	bne	27804 <__assert_fail@plt+0x15c60>
   27b44:	ldr	r3, [sp, #308]	; 0x134
   27b48:	add	r2, r3, #1
   27b4c:	str	r2, [sp, #308]	; 0x134
   27b50:	ldr	r2, [sp, #272]	; 0x110
   27b54:	ldrb	r4, [r2, r3]
   27b58:	ldr	r3, [r6, #44]	; 0x2c
   27b5c:	cmp	r3, #0
   27b60:	beq	279e8 <__assert_fail@plt+0x15e44>
   27b64:	ldr	r4, [r3, r4, lsl #2]
   27b68:	ldr	r3, [sp, #368]	; 0x170
   27b6c:	cmp	r3, #0
   27b70:	beq	27b88 <__assert_fail@plt+0x15fe4>
   27b74:	mov	r2, r4
   27b78:	add	r1, sp, #268	; 0x10c
   27b7c:	add	r0, sp, #104	; 0x68
   27b80:	bl	26478 <__assert_fail@plt+0x148d4>
   27b84:	mov	r4, r0
   27b88:	cmp	r4, #0
   27b8c:	beq	27a38 <__assert_fail@plt+0x15e94>
   27b90:	cmp	fp, #0
   27b94:	bne	27ac8 <__assert_fail@plt+0x15f24>
   27b98:	ldrb	r3, [r4, #52]	; 0x34
   27b9c:	tst	r3, #16
   27ba0:	beq	27b08 <__assert_fail@plt+0x15f64>
   27ba4:	tst	r3, #128	; 0x80
   27ba8:	beq	27ae8 <__assert_fail@plt+0x15f44>
   27bac:	ldr	r2, [sp, #308]	; 0x134
   27bb0:	mov	r1, r4
   27bb4:	add	r0, sp, #268	; 0x10c
   27bb8:	bl	22668 <__assert_fail@plt+0x10ac4>
   27bbc:	cmp	r0, #0
   27bc0:	beq	27b08 <__assert_fail@plt+0x15f64>
   27bc4:	b	27ae8 <__assert_fail@plt+0x15f44>
   27bc8:	mov	sl, r0
   27bcc:	b	286e4 <__assert_fail@plt+0x16b40>
   27bd0:	mov	sl, r0
   27bd4:	b	286e4 <__assert_fail@plt+0x16b40>
   27bd8:	ldr	r2, [sp, #40]	; 0x28
   27bdc:	ldr	r3, [r2, #76]	; 0x4c
   27be0:	cmp	r3, #0
   27be4:	bne	28854 <__assert_fail@plt+0x16cb0>
   27be8:	mov	r9, fp
   27bec:	mov	fp, r2
   27bf0:	b	27ca0 <__assert_fail@plt+0x160fc>
   27bf4:	mov	r3, fp
   27bf8:	ldr	fp, [sp, #12]
   27bfc:	mov	r2, r6
   27c00:	mov	r1, r5
   27c04:	mov	r0, r9
   27c08:	bl	25268 <__assert_fail@plt+0x136c4>
   27c0c:	mov	r8, r0
   27c10:	mov	r0, r6
   27c14:	bl	17204 <__assert_fail@plt+0x5660>
   27c18:	cmp	r8, #0
   27c1c:	beq	27c74 <__assert_fail@plt+0x160d0>
   27c20:	mov	r6, #0
   27c24:	b	28874 <__assert_fail@plt+0x16cd0>
   27c28:	str	r5, [sp, #128]	; 0x80
   27c2c:	mov	r3, #0
   27c30:	str	r3, [sp, #132]	; 0x84
   27c34:	str	r7, [sp, #136]	; 0x88
   27c38:	str	sl, [sp, #140]	; 0x8c
   27c3c:	str	r3, [sp, #144]	; 0x90
   27c40:	str	r3, [sp, #148]	; 0x94
   27c44:	str	r3, [sp, #152]	; 0x98
   27c48:	add	r1, sp, #128	; 0x80
   27c4c:	add	r0, sp, #268	; 0x10c
   27c50:	bl	26cb0 <__assert_fail@plt+0x1510c>
   27c54:	mov	r8, r0
   27c58:	ldr	r0, [sp, #152]	; 0x98
   27c5c:	bl	17204 <__assert_fail@plt+0x5660>
   27c60:	cmp	r8, #0
   27c64:	bne	28870 <__assert_fail@plt+0x16ccc>
   27c68:	ldr	r3, [r5]
   27c6c:	cmp	r3, #0
   27c70:	beq	2891c <__assert_fail@plt+0x16d78>
   27c74:	mov	r9, fp
   27c78:	ldr	fp, [sp, #40]	; 0x28
   27c7c:	ldr	r0, [sp, #368]	; 0x170
   27c80:	bl	17204 <__assert_fail@plt+0x5660>
   27c84:	str	r5, [sp, #368]	; 0x170
   27c88:	str	r7, [sp, #364]	; 0x16c
   27c8c:	str	sl, [sp, #360]	; 0x168
   27c90:	mov	r0, #0
   27c94:	bl	17204 <__assert_fail@plt+0x5660>
   27c98:	mov	r0, #0
   27c9c:	bl	17204 <__assert_fail@plt+0x5660>
   27ca0:	ldr	r3, [sp, #60]	; 0x3c
   27ca4:	cmp	r3, #0
   27ca8:	beq	285cc <__assert_fail@plt+0x16a28>
   27cac:	cmp	r3, #1
   27cb0:	bls	28604 <__assert_fail@plt+0x16a60>
   27cb4:	ldr	r2, [sp, #460]	; 0x1cc
   27cb8:	str	r2, [sp, #36]	; 0x24
   27cbc:	sub	r4, r3, #-536870911	; 0xe0000001
   27cc0:	lsl	r4, r4, #3
   27cc4:	mov	r3, r2
   27cc8:	add	r1, r2, r4
   27ccc:	mvn	r2, #0
   27cd0:	str	r2, [r3, #12]
   27cd4:	str	r2, [r3, #8]!
   27cd8:	cmp	r3, r1
   27cdc:	bne	27cd0 <__assert_fail@plt+0x1612c>
   27ce0:	mov	r3, #0
   27ce4:	ldr	r2, [sp, #460]	; 0x1cc
   27ce8:	str	r3, [r2]
   27cec:	ldr	r3, [sp, #360]	; 0x168
   27cf0:	str	r3, [r2, #4]
   27cf4:	ldr	r3, [sp, #24]
   27cf8:	ldrb	r3, [r3, #28]
   27cfc:	eor	r3, r3, #16
   27d00:	ands	r3, r9, r3, lsr #4
   27d04:	beq	27ffc <__assert_fail@plt+0x16458>
   27d08:	ldrb	r3, [fp, #88]	; 0x58
   27d0c:	tst	r3, #1
   27d10:	beq	2861c <__assert_fail@plt+0x16a78>
   27d14:	ldr	r3, [fp, #76]	; 0x4c
   27d18:	cmp	r3, #0
   27d1c:	ble	2861c <__assert_fail@plt+0x16a78>
   27d20:	ldr	r3, [sp, #24]
   27d24:	ldr	r3, [r3]
   27d28:	str	r3, [sp, #24]
   27d2c:	mov	r3, #0
   27d30:	str	r3, [sp, #116]	; 0x74
   27d34:	mov	r2, #2
   27d38:	str	r2, [sp, #120]	; 0x78
   27d3c:	str	r3, [sp, #124]	; 0x7c
   27d40:	str	r3, [sp, #128]	; 0x80
   27d44:	mov	r3, #16
   27d48:	str	r3, [sp, #132]	; 0x84
   27d4c:	add	r3, sp, #140	; 0x8c
   27d50:	str	r3, [sp, #136]	; 0x88
   27d54:	mov	r0, #48	; 0x30
   27d58:	bl	2d404 <__assert_fail@plt+0x1b860>
   27d5c:	str	r0, [sp, #124]	; 0x7c
   27d60:	cmp	r0, #0
   27d64:	addne	r9, sp, #116	; 0x74
   27d68:	beq	286b4 <__assert_fail@plt+0x16b10>
   27d6c:	ldr	r3, [sp, #24]
   27d70:	ldr	sl, [r3, #72]	; 0x48
   27d74:	mov	r3, #0
   27d78:	str	r3, [sp, #104]	; 0x68
   27d7c:	str	r3, [sp, #108]	; 0x6c
   27d80:	str	r3, [sp, #112]	; 0x70
   27d84:	ldr	r3, [sp, #128]	; 0x80
   27d88:	ldr	r2, [sp, #60]	; 0x3c
   27d8c:	cmp	r2, r3
   27d90:	bhi	27e08 <__assert_fail@plt+0x16264>
   27d94:	ldr	r3, [sp, #60]	; 0x3c
   27d98:	str	r3, [sp, #128]	; 0x80
   27d9c:	ldr	r3, [sp, #136]	; 0x88
   27da0:	str	r3, [sp, #16]
   27da4:	add	r2, r4, #8
   27da8:	str	r2, [sp, #32]
   27dac:	ldr	r1, [sp, #460]	; 0x1cc
   27db0:	mov	r0, r3
   27db4:	bl	11784 <memcpy@plt>
   27db8:	ldr	r3, [sp, #460]	; 0x1cc
   27dbc:	ldr	r3, [r3]
   27dc0:	add	r2, sp, #408	; 0x198
   27dc4:	str	r3, [r2, #-308]!	; 0xfffffecc
   27dc8:	str	r2, [sp, #40]	; 0x28
   27dcc:	ldr	r3, [sp, #60]	; 0x3c
   27dd0:	mov	r2, r3
   27dd4:	lsl	r3, r3, #4
   27dd8:	str	r3, [sp, #44]	; 0x2c
   27ddc:	str	fp, [sp, #12]
   27de0:	mov	fp, r2
   27de4:	ldr	r4, [sp, #460]	; 0x1cc
   27de8:	b	2823c <__assert_fail@plt+0x16698>
   27dec:	ldr	fp, [sp, #40]	; 0x28
   27df0:	mov	r3, #1
   27df4:	str	r3, [sp, #28]
   27df8:	b	285cc <__assert_fail@plt+0x16a28>
   27dfc:	mov	r9, fp
   27e00:	ldr	fp, [sp, #40]	; 0x28
   27e04:	b	27ca0 <__assert_fail@plt+0x160fc>
   27e08:	mov	r3, #8
   27e0c:	add	r2, sp, #140	; 0x8c
   27e10:	ldr	r1, [sp, #60]	; 0x3c
   27e14:	add	r0, sp, #128	; 0x80
   27e18:	bl	2ddfc <__assert_fail@plt+0x1c258>
   27e1c:	cmp	r0, #0
   27e20:	bne	27d9c <__assert_fail@plt+0x161f8>
   27e24:	ldr	r0, [sp, #136]	; 0x88
   27e28:	add	r3, sp, #140	; 0x8c
   27e2c:	cmp	r0, r3
   27e30:	beq	27e38 <__assert_fail@plt+0x16294>
   27e34:	bl	17204 <__assert_fail@plt+0x5660>
   27e38:	add	r3, sp, #140	; 0x8c
   27e3c:	str	r3, [sp, #136]	; 0x88
   27e40:	mov	r3, #0
   27e44:	str	r3, [sp, #128]	; 0x80
   27e48:	mvn	r3, #0
   27e4c:	str	r3, [sp, #132]	; 0x84
   27e50:	add	r0, sp, #128	; 0x80
   27e54:	bl	215ec <__assert_fail@plt+0xfa48>
   27e58:	mov	r0, r9
   27e5c:	bl	21620 <__assert_fail@plt+0xfa7c>
   27e60:	mov	r3, #12
   27e64:	str	r3, [sp, #28]
   27e68:	b	285cc <__assert_fail@plt+0x16a28>
   27e6c:	ldr	r3, [r3, sl, lsl #3]
   27e70:	add	r3, r3, #1
   27e74:	cmp	fp, r3
   27e78:	addgt	r1, r4, r3, lsl #3
   27e7c:	strgt	r2, [r4, r3, lsl #3]
   27e80:	mvngt	r3, #0
   27e84:	strgt	r3, [r1, #4]
   27e88:	ldr	r2, [r4, #4]
   27e8c:	ldr	r3, [sp, #100]	; 0x64
   27e90:	cmp	r2, r3
   27e94:	beq	27f4c <__assert_fail@plt+0x163a8>
   27e98:	cmp	r9, #0
   27e9c:	beq	27eb4 <__assert_fail@plt+0x16310>
   27ea0:	mov	r1, sl
   27ea4:	add	r0, sp, #104	; 0x68
   27ea8:	bl	1e46c <__assert_fail@plt+0xc8c8>
   27eac:	cmp	r0, #0
   27eb0:	bne	27f6c <__assert_fail@plt+0x163c8>
   27eb4:	ldr	r5, [sp, #352]	; 0x160
   27eb8:	mov	r7, sl
   27ebc:	lsl	r8, sl, #3
   27ec0:	ldr	r3, [r5]
   27ec4:	add	r1, r3, r8
   27ec8:	ldrb	r2, [r1, #4]
   27ecc:	tst	r2, #8
   27ed0:	beq	2819c <__assert_fail@plt+0x165f8>
   27ed4:	ldr	r3, [sp, #368]	; 0x170
   27ed8:	ldr	r2, [sp, #100]	; 0x64
   27edc:	ldr	r3, [r3, r2, lsl #2]
   27ee0:	add	r3, r3, #4
   27ee4:	str	r3, [sp, #20]
   27ee8:	add	r3, sl, sl, lsl #1
   27eec:	ldr	r5, [r5, #20]
   27ef0:	add	r5, r5, r3, lsl #2
   27ef4:	mov	r1, sl
   27ef8:	add	r0, sp, #104	; 0x68
   27efc:	bl	1e46c <__assert_fail@plt+0xc8c8>
   27f00:	cmp	r0, #0
   27f04:	beq	28030 <__assert_fail@plt+0x1648c>
   27f08:	ldr	r8, [r5, #4]
   27f0c:	cmp	r8, #0
   27f10:	mvnle	sl, #0
   27f14:	ble	28658 <__assert_fail@plt+0x16ab4>
   27f18:	ldr	r7, [r5, #8]
   27f1c:	sub	r7, r7, #4
   27f20:	mvn	sl, #0
   27f24:	mov	r5, #0
   27f28:	b	2816c <__assert_fail@plt+0x165c8>
   27f2c:	str	r2, [r1, #4]
   27f30:	ldr	r2, [sp, #32]
   27f34:	mov	r1, r4
   27f38:	ldr	r0, [sp, #16]
   27f3c:	bl	11784 <memcpy@plt>
   27f40:	b	27e88 <__assert_fail@plt+0x162e4>
   27f44:	str	r2, [r1, #4]
   27f48:	b	27e88 <__assert_fail@plt+0x162e4>
   27f4c:	ldr	r3, [sp, #364]	; 0x16c
   27f50:	cmp	sl, r3
   27f54:	bne	27e98 <__assert_fail@plt+0x162f4>
   27f58:	cmp	r9, #0
   27f5c:	beq	28028 <__assert_fail@plt+0x16484>
   27f60:	ldr	r2, [sp, #36]	; 0x24
   27f64:	mov	r3, #0
   27f68:	b	27f88 <__assert_fail@plt+0x163e4>
   27f6c:	ldr	r2, [sp, #36]	; 0x24
   27f70:	mov	r3, #0
   27f74:	b	27f88 <__assert_fail@plt+0x163e4>
   27f78:	add	r3, r3, #1
   27f7c:	add	r2, r2, #8
   27f80:	cmp	fp, r3
   27f84:	beq	27fd4 <__assert_fail@plt+0x16430>
   27f88:	ldr	r1, [r4, r3, lsl #3]
   27f8c:	cmp	r1, #0
   27f90:	blt	27f78 <__assert_fail@plt+0x163d4>
   27f94:	ldr	r1, [r2, #4]
   27f98:	cmn	r1, #1
   27f9c:	bne	27f78 <__assert_fail@plt+0x163d4>
   27fa0:	add	r3, sp, #104	; 0x68
   27fa4:	str	r3, [sp, #4]
   27fa8:	ldr	r3, [sp, #16]
   27fac:	str	r3, [sp]
   27fb0:	mov	r3, r4
   27fb4:	mov	r2, fp
   27fb8:	ldr	r1, [sp, #40]	; 0x28
   27fbc:	mov	r0, r9
   27fc0:	bl	22740 <__assert_fail@plt+0x10b9c>
   27fc4:	subs	sl, r0, #0
   27fc8:	bge	27eb4 <__assert_fail@plt+0x16310>
   27fcc:	ldr	fp, [sp, #12]
   27fd0:	b	27fd8 <__assert_fail@plt+0x16434>
   27fd4:	ldr	fp, [sp, #12]
   27fd8:	ldr	r0, [sp, #112]	; 0x70
   27fdc:	bl	17204 <__assert_fail@plt+0x5660>
   27fe0:	add	r0, sp, #128	; 0x80
   27fe4:	bl	215ec <__assert_fail@plt+0xfa48>
   27fe8:	mov	r0, r9
   27fec:	bl	21620 <__assert_fail@plt+0xfa7c>
   27ff0:	cmp	r0, #0
   27ff4:	strne	r0, [sp, #28]
   27ff8:	bne	285cc <__assert_fail@plt+0x16a28>
   27ffc:	ldrb	r4, [sp, #344]	; 0x158
   28000:	ldr	r7, [sp, #296]	; 0x128
   28004:	ldr	r8, [sp, #280]	; 0x118
   28008:	ldr	r9, [sp, #300]	; 0x12c
   2800c:	ldr	ip, [sp, #404]	; 0x194
   28010:	ldr	r1, [sp, #460]	; 0x1cc
   28014:	mov	r3, r1
   28018:	add	r2, r1, #4
   2801c:	ldr	r0, [sp, #60]	; 0x3c
   28020:	add	lr, r1, r0, lsl #3
   28024:	b	2842c <__assert_fail@plt+0x16888>
   28028:	ldr	fp, [sp, #12]
   2802c:	b	27fd8 <__assert_fail@plt+0x16434>
   28030:	mov	r1, sl
   28034:	add	r0, sp, #104	; 0x68
   28038:	bl	21800 <__assert_fail@plt+0xfc5c>
   2803c:	cmp	r0, #0
   28040:	bne	27f08 <__assert_fail@plt+0x16364>
   28044:	ldr	fp, [sp, #12]
   28048:	ldr	r0, [sp, #112]	; 0x70
   2804c:	bl	17204 <__assert_fail@plt+0x5660>
   28050:	add	r0, sp, #128	; 0x80
   28054:	bl	215ec <__assert_fail@plt+0xfa48>
   28058:	mov	r0, r9
   2805c:	bl	21620 <__assert_fail@plt+0xfa7c>
   28060:	mov	r3, #12
   28064:	str	r3, [sp, #28]
   28068:	b	285cc <__assert_fail@plt+0x16a28>
   2806c:	mov	r1, sl
   28070:	add	r0, sp, #104	; 0x68
   28074:	bl	1e46c <__assert_fail@plt+0xc8c8>
   28078:	cmp	r0, #0
   2807c:	bne	283cc <__assert_fail@plt+0x16828>
   28080:	cmp	r9, #0
   28084:	beq	28234 <__assert_fail@plt+0x16690>
   28088:	ldr	r7, [sp, #100]	; 0x64
   2808c:	ldr	r5, [r9]
   28090:	add	r1, r5, #1
   28094:	str	r1, [r9]
   28098:	ldr	r3, [r9, #4]
   2809c:	cmp	r1, r3
   280a0:	bne	280cc <__assert_fail@plt+0x16528>
   280a4:	add	r1, r1, r1, lsl #1
   280a8:	lsl	r1, r1, #4
   280ac:	ldr	r0, [r9, #8]
   280b0:	bl	2d434 <__assert_fail@plt+0x1b890>
   280b4:	cmp	r0, #0
   280b8:	beq	28654 <__assert_fail@plt+0x16ab0>
   280bc:	ldr	r3, [r9, #4]
   280c0:	lsl	r3, r3, #1
   280c4:	str	r3, [r9, #4]
   280c8:	str	r0, [r9, #8]
   280cc:	add	r5, r5, r5, lsl #1
   280d0:	lsl	r8, r5, #3
   280d4:	ldr	r3, [r9, #8]
   280d8:	str	r7, [r3, r5, lsl #3]
   280dc:	ldr	r3, [r9, #8]
   280e0:	add	r3, r3, r8
   280e4:	str	r6, [r3, #4]
   280e8:	ldr	r5, [r9, #8]
   280ec:	add	r5, r5, r8
   280f0:	ldr	r0, [sp, #44]	; 0x2c
   280f4:	bl	2d404 <__assert_fail@plt+0x1b860>
   280f8:	str	r0, [r5, #8]
   280fc:	ldr	r3, [r9, #8]
   28100:	add	r3, r3, r8
   28104:	ldr	r0, [r3, #8]
   28108:	cmp	r0, #0
   2810c:	beq	28654 <__assert_fail@plt+0x16ab0>
   28110:	ldr	r5, [sp, #32]
   28114:	mov	r2, r5
   28118:	mov	r1, r4
   2811c:	bl	11784 <memcpy@plt>
   28120:	ldr	r3, [r9, #8]
   28124:	add	r3, r3, r8
   28128:	ldr	r0, [r3, #8]
   2812c:	mov	r2, r5
   28130:	ldr	r1, [sp, #16]
   28134:	add	r0, r0, r5
   28138:	bl	11784 <memcpy@plt>
   2813c:	ldr	r0, [r9, #8]
   28140:	add	r0, r0, r8
   28144:	add	r1, sp, #104	; 0x68
   28148:	add	r0, r0, #12
   2814c:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   28150:	cmp	r0, #0
   28154:	beq	28234 <__assert_fail@plt+0x16690>
   28158:	ldr	fp, [sp, #12]
   2815c:	b	28048 <__assert_fail@plt+0x164a4>
   28160:	add	r5, r5, #1
   28164:	cmp	r8, r5
   28168:	beq	28234 <__assert_fail@plt+0x16690>
   2816c:	ldr	r6, [r7, #4]!
   28170:	mov	r1, r6
   28174:	ldr	r0, [sp, #20]
   28178:	bl	1e46c <__assert_fail@plt+0xc8c8>
   2817c:	cmp	r0, #0
   28180:	beq	28160 <__assert_fail@plt+0x165bc>
   28184:	cmn	sl, #1
   28188:	bne	2806c <__assert_fail@plt+0x164c8>
   2818c:	mov	sl, r6
   28190:	b	28160 <__assert_fail@plt+0x165bc>
   28194:	beq	fead2c44 <optarg@@GLIBC_2.4+0xfea90a04>
   28198:	andeq	pc, r3, r0, lsl #30
   2819c:	ldrb	r1, [r1, #6]
   281a0:	tst	r1, #16
   281a4:	bne	282c0 <__assert_fail@plt+0x1671c>
   281a8:	cmp	r2, #4
   281ac:	bne	2833c <__assert_fail@plt+0x16798>
   281b0:	ldr	r3, [r3, r8]
   281b4:	add	r3, r3, #1
   281b8:	cmp	fp, r3
   281bc:	ble	282e8 <__assert_fail@plt+0x16744>
   281c0:	add	r2, r4, r3, lsl #3
   281c4:	ldr	r6, [r2, #4]
   281c8:	ldr	r2, [r4, r3, lsl #3]
   281cc:	sub	r6, r6, r2
   281d0:	cmp	r9, #0
   281d4:	bne	28370 <__assert_fail@plt+0x167cc>
   281d8:	cmp	r6, #0
   281dc:	beq	282f4 <__assert_fail@plt+0x16750>
   281e0:	ldr	r3, [r5, #12]
   281e4:	ldr	sl, [r3, sl, lsl #2]
   281e8:	ldr	r3, [sp, #100]	; 0x64
   281ec:	add	r6, r6, r3
   281f0:	str	r6, [sp, #100]	; 0x64
   281f4:	cmp	r9, #0
   281f8:	beq	2822c <__assert_fail@plt+0x16688>
   281fc:	ldr	r3, [sp, #360]	; 0x168
   28200:	cmp	r6, r3
   28204:	bgt	2894c <__assert_fail@plt+0x16da8>
   28208:	ldr	r3, [sp, #368]	; 0x170
   2820c:	ldr	r0, [r3, r6, lsl #2]
   28210:	cmp	r0, #0
   28214:	beq	28954 <__assert_fail@plt+0x16db0>
   28218:	mov	r1, sl
   2821c:	add	r0, r0, #4
   28220:	bl	1e46c <__assert_fail@plt+0xc8c8>
   28224:	cmp	r0, #0
   28228:	beq	2895c <__assert_fail@plt+0x16db8>
   2822c:	mov	r3, #0
   28230:	str	r3, [sp, #108]	; 0x6c
   28234:	cmp	sl, #0
   28238:	blt	28658 <__assert_fail@plt+0x16ab4>
   2823c:	ldr	r2, [sp, #100]	; 0x64
   28240:	ldr	r3, [r4, #4]
   28244:	cmp	r2, r3
   28248:	bgt	283e4 <__assert_fail@plt+0x16840>
   2824c:	lsl	r1, sl, #3
   28250:	ldr	r3, [sp, #24]
   28254:	ldr	r3, [r3]
   28258:	add	r0, r3, r1
   2825c:	ldrb	ip, [r0, #4]
   28260:	cmp	ip, #8
   28264:	beq	27e6c <__assert_fail@plt+0x162c8>
   28268:	cmp	ip, #9
   2826c:	bne	27e88 <__assert_fail@plt+0x162e4>
   28270:	ldr	r3, [r3, r1]
   28274:	add	r3, r3, #1
   28278:	cmp	fp, r3
   2827c:	ble	27e88 <__assert_fail@plt+0x162e4>
   28280:	add	r1, r4, r3, lsl #3
   28284:	ldr	ip, [r4, r3, lsl #3]
   28288:	cmp	r2, ip
   2828c:	bgt	27f2c <__assert_fail@plt+0x16388>
   28290:	ldrb	r0, [r0, #6]
   28294:	tst	r0, #8
   28298:	beq	27f44 <__assert_fail@plt+0x163a0>
   2829c:	ldr	r0, [sp, #16]
   282a0:	ldr	r3, [r0, r3, lsl #3]
   282a4:	cmn	r3, #1
   282a8:	beq	27f44 <__assert_fail@plt+0x163a0>
   282ac:	ldr	r2, [sp, #32]
   282b0:	mov	r1, r0
   282b4:	mov	r0, r4
   282b8:	bl	11784 <memcpy@plt>
   282bc:	b	27e88 <__assert_fail@plt+0x162e4>
   282c0:	ldr	r3, [sp, #100]	; 0x64
   282c4:	add	r2, sp, #268	; 0x10c
   282c8:	mov	r1, sl
   282cc:	mov	r0, r5
   282d0:	bl	2354c <__assert_fail@plt+0x119a8>
   282d4:	subs	r6, r0, #0
   282d8:	beq	2833c <__assert_fail@plt+0x16798>
   282dc:	ldr	r3, [r5, #12]
   282e0:	ldr	sl, [r3, r7, lsl #2]
   282e4:	b	281e8 <__assert_fail@plt+0x16644>
   282e8:	cmp	r9, #0
   282ec:	mvnne	sl, #0
   282f0:	bne	28234 <__assert_fail@plt+0x16690>
   282f4:	mov	r1, sl
   282f8:	add	r0, sp, #104	; 0x68
   282fc:	bl	21800 <__assert_fail@plt+0xfc5c>
   28300:	cmp	r0, #0
   28304:	beq	283dc <__assert_fail@plt+0x16838>
   28308:	ldr	r3, [r5, #20]
   2830c:	add	r2, r7, r7, lsl #1
   28310:	add	r3, r3, r2, lsl #2
   28314:	ldr	r3, [r3, #8]
   28318:	ldr	sl, [r3]
   2831c:	ldr	r3, [sp, #368]	; 0x170
   28320:	ldr	r2, [sp, #100]	; 0x64
   28324:	ldr	r0, [r3, r2, lsl #2]
   28328:	mov	r1, sl
   2832c:	add	r0, r0, #4
   28330:	bl	1e46c <__assert_fail@plt+0xc8c8>
   28334:	cmp	r0, #0
   28338:	bne	28234 <__assert_fail@plt+0x16690>
   2833c:	ldr	r1, [r5]
   28340:	ldr	r2, [sp, #100]	; 0x64
   28344:	add	r1, r1, r8
   28348:	add	r0, sp, #268	; 0x10c
   2834c:	bl	2222c <__assert_fail@plt+0x10688>
   28350:	cmp	r0, #0
   28354:	mvneq	sl, #0
   28358:	beq	28658 <__assert_fail@plt+0x16ab4>
   2835c:	ldr	r3, [r5, #12]
   28360:	ldr	sl, [r3, r7, lsl #2]
   28364:	ldr	r6, [sp, #100]	; 0x64
   28368:	add	r6, r6, #1
   2836c:	b	281f0 <__assert_fail@plt+0x1664c>
   28370:	add	r2, r4, r3, lsl #3
   28374:	ldr	r0, [r4, r3, lsl #3]
   28378:	cmn	r0, #1
   2837c:	beq	28934 <__assert_fail@plt+0x16d90>
   28380:	ldr	r3, [r2, #4]
   28384:	cmn	r3, #1
   28388:	beq	2893c <__assert_fail@plt+0x16d98>
   2838c:	cmp	r6, #0
   28390:	beq	282f4 <__assert_fail@plt+0x16750>
   28394:	ldr	ip, [sp, #272]	; 0x110
   28398:	ldr	r1, [sp, #100]	; 0x64
   2839c:	ldr	r3, [sp, #296]	; 0x128
   283a0:	sub	r3, r3, r1
   283a4:	cmp	r6, r3
   283a8:	bgt	28944 <__assert_fail@plt+0x16da0>
   283ac:	mov	r2, r6
   283b0:	add	r1, ip, r1
   283b4:	add	r0, ip, r0
   283b8:	bl	117c0 <memcmp@plt>
   283bc:	cmp	r0, #0
   283c0:	beq	282dc <__assert_fail@plt+0x16738>
   283c4:	mvn	sl, #0
   283c8:	b	28658 <__assert_fail@plt+0x16ab4>
   283cc:	mov	sl, r6
   283d0:	b	28234 <__assert_fail@plt+0x16690>
   283d4:	ldr	fp, [sp, #12]
   283d8:	b	28048 <__assert_fail@plt+0x164a4>
   283dc:	ldr	fp, [sp, #12]
   283e0:	b	28048 <__assert_fail@plt+0x164a4>
   283e4:	ldr	fp, [sp, #12]
   283e8:	ldr	r0, [sp, #112]	; 0x70
   283ec:	bl	17204 <__assert_fail@plt+0x5660>
   283f0:	add	r0, sp, #128	; 0x80
   283f4:	bl	215ec <__assert_fail@plt+0xfa48>
   283f8:	mov	r0, r9
   283fc:	bl	21620 <__assert_fail@plt+0xfa7c>
   28400:	b	27ff0 <__assert_fail@plt+0x1644c>
   28404:	ldr	r5, [r0, #-4]
   28408:	add	r5, r5, ip
   2840c:	str	r5, [r0, #-4]
   28410:	ldr	r0, [r3, #4]
   28414:	add	r0, r0, ip
   28418:	str	r0, [r3, #4]
   2841c:	add	r3, r3, #8
   28420:	add	r2, r2, #8
   28424:	cmp	r3, lr
   28428:	beq	2846c <__assert_fail@plt+0x168c8>
   2842c:	mov	r0, r2
   28430:	ldr	r5, [r2, #-4]
   28434:	cmn	r5, #1
   28438:	beq	2841c <__assert_fail@plt+0x16878>
   2843c:	cmp	r4, #0
   28440:	beq	28404 <__assert_fail@plt+0x16860>
   28444:	cmp	r5, r7
   28448:	ldrne	r5, [r8, r5, lsl #2]
   2844c:	moveq	r5, r9
   28450:	str	r5, [r2, #-4]
   28454:	ldr	r5, [r3, #4]
   28458:	cmp	r7, r5
   2845c:	ldrne	r5, [r8, r5, lsl #2]
   28460:	moveq	r5, r9
   28464:	str	r5, [r3, #4]
   28468:	b	28404 <__assert_fail@plt+0x16860>
   2846c:	ldr	r2, [sp, #64]	; 0x40
   28470:	cmp	r2, #0
   28474:	ble	2849c <__assert_fail@plt+0x168f8>
   28478:	ldr	r2, [sp, #460]	; 0x1cc
   2847c:	ldr	r0, [sp, #456]	; 0x1c8
   28480:	add	r0, r2, r0, lsl #3
   28484:	mvn	r2, #0
   28488:	str	r2, [r3]
   2848c:	str	r2, [r3, #4]
   28490:	add	r3, r3, #8
   28494:	cmp	r0, r3
   28498:	bne	28488 <__assert_fail@plt+0x168e4>
   2849c:	ldr	r3, [fp, #132]	; 0x84
   284a0:	cmp	r3, #0
   284a4:	beq	285cc <__assert_fail@plt+0x16a28>
   284a8:	ldr	r3, [sp, #60]	; 0x3c
   284ac:	sub	r0, r3, #1
   284b0:	mov	r3, #0
   284b4:	ldr	ip, [sp, #460]	; 0x1cc
   284b8:	b	284e4 <__assert_fail@plt+0x16940>
   284bc:	add	r2, r2, #1
   284c0:	ldr	r2, [ip, r2, lsl #3]
   284c4:	str	r2, [r1, #8]
   284c8:	ldr	r2, [fp, #132]	; 0x84
   284cc:	ldr	r2, [r2, r3, lsl #2]
   284d0:	add	r2, ip, r2, lsl #3
   284d4:	ldr	r2, [r2, #12]
   284d8:	str	r2, [r1, #12]
   284dc:	add	r3, r3, #1
   284e0:	add	r1, r1, #8
   284e4:	cmp	r0, r3
   284e8:	beq	285cc <__assert_fail@plt+0x16a28>
   284ec:	ldr	r2, [fp, #132]	; 0x84
   284f0:	ldr	r2, [r2, r3, lsl #2]
   284f4:	cmp	r3, r2
   284f8:	bne	284bc <__assert_fail@plt+0x16918>
   284fc:	b	284dc <__assert_fail@plt+0x16938>
   28500:	mov	r3, #12
   28504:	str	r3, [sp, #28]
   28508:	b	285cc <__assert_fail@plt+0x16a28>
   2850c:	mov	r3, #12
   28510:	str	r3, [sp, #28]
   28514:	b	285cc <__assert_fail@plt+0x16a28>
   28518:	mov	r3, #1
   2851c:	str	r3, [sp, #28]
   28520:	b	285cc <__assert_fail@plt+0x16a28>
   28524:	ldr	fp, [sp, #40]	; 0x28
   28528:	mov	r3, #12
   2852c:	str	r3, [sp, #28]
   28530:	b	285cc <__assert_fail@plt+0x16a28>
   28534:	ldr	fp, [sp, #40]	; 0x28
   28538:	str	r0, [sp, #28]
   2853c:	b	285cc <__assert_fail@plt+0x16a28>
   28540:	ldr	fp, [sp, #40]	; 0x28
   28544:	b	285cc <__assert_fail@plt+0x16a28>
   28548:	add	r0, sp, #268	; 0x10c
   2854c:	bl	21540 <__assert_fail@plt+0xf99c>
   28550:	ldr	r0, [sp, #400]	; 0x190
   28554:	bl	17204 <__assert_fail@plt+0x5660>
   28558:	ldr	r0, [sp, #384]	; 0x180
   2855c:	bl	17204 <__assert_fail@plt+0x5660>
   28560:	b	285e0 <__assert_fail@plt+0x16a3c>
   28564:	mov	r3, #1
   28568:	str	r3, [sp, #28]
   2856c:	b	285e8 <__assert_fail@plt+0x16a44>
   28570:	mov	r3, #1
   28574:	str	r3, [sp, #28]
   28578:	b	285e8 <__assert_fail@plt+0x16a44>
   2857c:	mov	r3, #1
   28580:	str	r3, [sp, #28]
   28584:	b	285e8 <__assert_fail@plt+0x16a44>
   28588:	ldr	r3, [sp, #36]	; 0x24
   2858c:	str	r3, [sp, #272]	; 0x110
   28590:	ldr	r3, [fp, #92]	; 0x5c
   28594:	ldr	r2, [sp, #48]	; 0x30
   28598:	cmp	r3, #1
   2859c:	movgt	r2, #0
   285a0:	mov	r3, r2
   285a4:	b	271a8 <__assert_fail@plt+0x15604>
   285a8:	mov	r3, #12
   285ac:	str	r3, [sp, #28]
   285b0:	b	285cc <__assert_fail@plt+0x16a28>
   285b4:	mov	r3, #0
   285b8:	str	r3, [sp, #104]	; 0x68
   285bc:	b	27b44 <__assert_fail@plt+0x15fa0>
   285c0:	ldr	fp, [sp, #40]	; 0x28
   285c4:	mov	r3, #12
   285c8:	str	r3, [sp, #28]
   285cc:	ldr	r0, [sp, #368]	; 0x170
   285d0:	bl	17204 <__assert_fail@plt+0x5660>
   285d4:	ldr	r3, [fp, #76]	; 0x4c
   285d8:	cmp	r3, #0
   285dc:	bne	28548 <__assert_fail@plt+0x169a4>
   285e0:	add	r0, sp, #268	; 0x10c
   285e4:	bl	21398 <__assert_fail@plt+0xf7f4>
   285e8:	ldr	r0, [sp, #28]
   285ec:	add	sp, sp, #412	; 0x19c
   285f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285f4:	ldr	fp, [sp, #40]	; 0x28
   285f8:	mov	r3, #12
   285fc:	str	r3, [sp, #28]
   28600:	b	285cc <__assert_fail@plt+0x16a28>
   28604:	mov	r3, #0
   28608:	ldr	r2, [sp, #460]	; 0x1cc
   2860c:	str	r3, [r2]
   28610:	ldr	r3, [sp, #360]	; 0x168
   28614:	str	r3, [r2, #4]
   28618:	b	27ffc <__assert_fail@plt+0x16458>
   2861c:	ldr	r3, [sp, #24]
   28620:	ldr	r3, [r3]
   28624:	str	r3, [sp, #24]
   28628:	mov	r9, #0
   2862c:	str	r9, [sp, #116]	; 0x74
   28630:	mov	r3, #2
   28634:	str	r3, [sp, #120]	; 0x78
   28638:	str	r9, [sp, #124]	; 0x7c
   2863c:	str	r9, [sp, #128]	; 0x80
   28640:	mov	r3, #16
   28644:	str	r3, [sp, #132]	; 0x84
   28648:	add	r3, sp, #140	; 0x8c
   2864c:	str	r3, [sp, #136]	; 0x88
   28650:	b	27d6c <__assert_fail@plt+0x161c8>
   28654:	mvn	sl, #1
   28658:	cmn	sl, #2
   2865c:	beq	283d4 <__assert_fail@plt+0x16830>
   28660:	add	r3, sp, #104	; 0x68
   28664:	str	r3, [sp, #4]
   28668:	ldr	r3, [sp, #16]
   2866c:	str	r3, [sp]
   28670:	mov	r3, r4
   28674:	mov	r2, fp
   28678:	ldr	r1, [sp, #40]	; 0x28
   2867c:	mov	r0, r9
   28680:	bl	22740 <__assert_fail@plt+0x10b9c>
   28684:	subs	sl, r0, #0
   28688:	bge	2823c <__assert_fail@plt+0x16698>
   2868c:	ldr	fp, [sp, #12]
   28690:	ldr	r0, [sp, #112]	; 0x70
   28694:	bl	17204 <__assert_fail@plt+0x5660>
   28698:	add	r0, sp, #128	; 0x80
   2869c:	bl	215ec <__assert_fail@plt+0xfa48>
   286a0:	mov	r0, r9
   286a4:	bl	21620 <__assert_fail@plt+0xfa7c>
   286a8:	mov	r3, #1
   286ac:	str	r3, [sp, #28]
   286b0:	b	285cc <__assert_fail@plt+0x16a28>
   286b4:	mov	r3, #12
   286b8:	str	r3, [sp, #28]
   286bc:	b	285cc <__assert_fail@plt+0x16a28>
   286c0:	ldr	r3, [sp, #104]	; 0x68
   286c4:	cmp	r3, #0
   286c8:	bne	2884c <__assert_fail@plt+0x16ca8>
   286cc:	ldr	r2, [sp, #20]
   286d0:	cmp	r2, #0
   286d4:	ldrne	r3, [r2]
   286d8:	ldrne	r1, [sp, #32]
   286dc:	addne	r3, r3, r1
   286e0:	strne	r3, [r2]
   286e4:	cmn	sl, #1
   286e8:	beq	2888c <__assert_fail@plt+0x16ce8>
   286ec:	cmn	sl, #2
   286f0:	beq	28524 <__assert_fail@plt+0x16980>
   286f4:	str	sl, [sp, #360]	; 0x168
   286f8:	ldr	r3, [sp, #60]	; 0x3c
   286fc:	cmp	r3, #1
   28700:	movls	fp, #0
   28704:	movhi	fp, #1
   28708:	ldr	r3, [sp, #24]
   2870c:	ldrb	r3, [r3, #28]
   28710:	eor	r3, r3, #16
   28714:	ands	r3, fp, r3, lsr #4
   28718:	beq	27bd8 <__assert_fail@plt+0x16034>
   2871c:	mov	r2, sl
   28720:	ldr	r3, [sp, #368]	; 0x170
   28724:	ldr	r1, [r3, sl, lsl #2]
   28728:	add	r0, sp, #268	; 0x10c
   2872c:	bl	22668 <__assert_fail@plt+0x10ac4>
   28730:	str	r0, [sp, #364]	; 0x16c
   28734:	ldr	r3, [sp, #40]	; 0x28
   28738:	ldrb	r3, [r3, #88]	; 0x58
   2873c:	tst	r3, #1
   28740:	bne	28754 <__assert_fail@plt+0x16bb0>
   28744:	ldr	r3, [sp, #40]	; 0x28
   28748:	ldr	r3, [r3, #76]	; 0x4c
   2874c:	cmp	r3, #0
   28750:	beq	27dfc <__assert_fail@plt+0x16258>
   28754:	ldr	r9, [sp, #352]	; 0x160
   28758:	ldr	r7, [sp, #364]	; 0x16c
   2875c:	cmn	sl, #-1073741822	; 0xc0000002
   28760:	bhi	285f4 <__assert_fail@plt+0x16a50>
   28764:	add	r4, sl, #1
   28768:	lsl	r4, r4, #2
   2876c:	mov	r0, r4
   28770:	bl	2d404 <__assert_fail@plt+0x1b860>
   28774:	subs	r5, r0, #0
   28778:	beq	288fc <__assert_fail@plt+0x16d58>
   2877c:	ldr	r3, [r9, #76]	; 0x4c
   28780:	cmp	r3, #0
   28784:	beq	27c28 <__assert_fail@plt+0x16084>
   28788:	mov	r0, r4
   2878c:	bl	2d404 <__assert_fail@plt+0x1b860>
   28790:	subs	r6, r0, #0
   28794:	beq	288fc <__assert_fail@plt+0x16d58>
   28798:	str	fp, [sp, #12]
   2879c:	add	fp, sl, #1
   287a0:	lsl	r4, fp, #2
   287a4:	mov	r2, r4
   287a8:	mov	r1, #0
   287ac:	mov	r0, r6
   287b0:	bl	119e8 <memset@plt>
   287b4:	str	r5, [sp, #128]	; 0x80
   287b8:	str	r6, [sp, #132]	; 0x84
   287bc:	str	r7, [sp, #136]	; 0x88
   287c0:	str	sl, [sp, #140]	; 0x8c
   287c4:	mov	r3, #0
   287c8:	str	r3, [sp, #144]	; 0x90
   287cc:	str	r3, [sp, #148]	; 0x94
   287d0:	str	r3, [sp, #152]	; 0x98
   287d4:	add	r1, sp, #128	; 0x80
   287d8:	add	r0, sp, #268	; 0x10c
   287dc:	bl	26cb0 <__assert_fail@plt+0x1510c>
   287e0:	mov	r8, r0
   287e4:	ldr	r0, [sp, #152]	; 0x98
   287e8:	bl	17204 <__assert_fail@plt+0x5660>
   287ec:	cmp	r8, #0
   287f0:	bne	28874 <__assert_fail@plt+0x16cd0>
   287f4:	ldr	r3, [r5]
   287f8:	cmp	r3, #0
   287fc:	bne	27bf4 <__assert_fail@plt+0x16050>
   28800:	ldr	r3, [r6]
   28804:	cmp	r3, #0
   28808:	bne	27bf4 <__assert_fail@plt+0x16050>
   2880c:	sub	r4, r4, #4
   28810:	ldr	r3, [sp, #368]	; 0x170
   28814:	add	r3, r3, r4
   28818:	subs	sl, sl, #1
   2881c:	bmi	28920 <__assert_fail@plt+0x16d7c>
   28820:	ldr	r1, [r3, #-4]!
   28824:	cmp	r1, #0
   28828:	beq	28818 <__assert_fail@plt+0x16c74>
   2882c:	ldrb	r2, [r1, #52]	; 0x34
   28830:	tst	r2, #16
   28834:	beq	28818 <__assert_fail@plt+0x16c74>
   28838:	mov	r2, sl
   2883c:	add	r0, sp, #268	; 0x10c
   28840:	bl	22668 <__assert_fail@plt+0x10ac4>
   28844:	mov	r7, r0
   28848:	b	2879c <__assert_fail@plt+0x16bf8>
   2884c:	ldr	fp, [sp, #40]	; 0x28
   28850:	b	285c4 <__assert_fail@plt+0x16a20>
   28854:	mov	r2, sl
   28858:	ldr	r3, [sp, #368]	; 0x170
   2885c:	ldr	r1, [r3, sl, lsl #2]
   28860:	add	r0, sp, #268	; 0x10c
   28864:	bl	22668 <__assert_fail@plt+0x10ac4>
   28868:	str	r0, [sp, #364]	; 0x16c
   2886c:	b	28744 <__assert_fail@plt+0x16ba0>
   28870:	mov	r6, #0
   28874:	mov	r0, r5
   28878:	bl	17204 <__assert_fail@plt+0x5660>
   2887c:	mov	r0, r6
   28880:	bl	17204 <__assert_fail@plt+0x5660>
   28884:	cmp	r8, #1
   28888:	bne	288f0 <__assert_fail@plt+0x16d4c>
   2888c:	add	r0, sp, #268	; 0x10c
   28890:	bl	21540 <__assert_fail@plt+0xf99c>
   28894:	ldr	r3, [sp, #404]	; 0x194
   28898:	ldr	r2, [sp, #84]	; 0x54
   2889c:	add	r3, r2, r3
   288a0:	str	r3, [sp, #404]	; 0x194
   288a4:	ldr	r2, [sp, #44]	; 0x2c
   288a8:	cmp	r2, r3
   288ac:	movge	r2, #0
   288b0:	movlt	r2, #1
   288b4:	ldr	r1, [sp, #56]	; 0x38
   288b8:	cmp	r1, r3
   288bc:	movle	r3, r2
   288c0:	orrgt	r3, r2, #1
   288c4:	cmp	r3, #0
   288c8:	bne	27dec <__assert_fail@plt+0x16248>
   288cc:	ldr	r3, [sp, #72]	; 0x48
   288d0:	cmp	r3, #4
   288d4:	ldrls	pc, [pc, r3, lsl #2]
   288d8:	b	27600 <__assert_fail@plt+0x15a5c>
   288dc:	andeq	r7, r2, r4, asr #8
   288e0:	andeq	r7, r2, r4, asr #8
   288e4:	andeq	r7, r2, ip, ror #7
   288e8:	andeq	r7, r2, r4, lsl #7
   288ec:	andeq	r7, r2, r0, lsr r5
   288f0:	ldr	fp, [sp, #40]	; 0x28
   288f4:	mov	r3, r8
   288f8:	b	28914 <__assert_fail@plt+0x16d70>
   288fc:	ldr	fp, [sp, #40]	; 0x28
   28900:	mov	r0, r5
   28904:	bl	17204 <__assert_fail@plt+0x5660>
   28908:	mov	r0, #0
   2890c:	bl	17204 <__assert_fail@plt+0x5660>
   28910:	mov	r3, #12
   28914:	str	r3, [sp, #28]
   28918:	b	285cc <__assert_fail@plt+0x16a28>
   2891c:	mov	r6, #0
   28920:	mov	r0, r5
   28924:	bl	17204 <__assert_fail@plt+0x5660>
   28928:	mov	r0, r6
   2892c:	bl	17204 <__assert_fail@plt+0x5660>
   28930:	b	2888c <__assert_fail@plt+0x16ce8>
   28934:	mvn	sl, #0
   28938:	b	28658 <__assert_fail@plt+0x16ab4>
   2893c:	mvn	sl, #0
   28940:	b	28658 <__assert_fail@plt+0x16ab4>
   28944:	mvn	sl, #0
   28948:	b	28658 <__assert_fail@plt+0x16ab4>
   2894c:	mvn	sl, #0
   28950:	b	28658 <__assert_fail@plt+0x16ab4>
   28954:	mvn	sl, #0
   28958:	b	28658 <__assert_fail@plt+0x16ab4>
   2895c:	mvn	sl, #0
   28960:	b	28658 <__assert_fail@plt+0x16ab4>
   28964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28968:	sub	sp, sp, #156	; 0x9c
   2896c:	mov	r9, r0
   28970:	mov	r4, r1
   28974:	mov	r8, r2
   28978:	str	r3, [sp, #24]
   2897c:	ldr	sl, [sp, #196]	; 0xc4
   28980:	ldr	r3, [r1]
   28984:	str	r3, [sp, #20]
   28988:	ldrb	r2, [r2, #4]
   2898c:	sub	r3, r2, #1
   28990:	cmp	r3, #35	; 0x23
   28994:	ldrls	pc, [pc, r3, lsl #2]
   28998:	b	297b8 <__assert_fail@plt+0x17c14>
   2899c:	andeq	r8, r2, ip, lsr #20
   289a0:	andeq	r9, r2, r4, lsl #24
   289a4:			; <UNDEFINED> instruction: 0x000297b8
   289a8:	andeq	r9, r2, ip, lsl #7
   289ac:	andeq	r9, r2, r8, asr #13
   289b0:			; <UNDEFINED> instruction: 0x000297b8
   289b4:			; <UNDEFINED> instruction: 0x000297b8
   289b8:	strdeq	r8, [r2], -r4
   289bc:	andeq	r9, r2, r0, asr #8
   289c0:	andeq	r9, r2, r4, lsl #24
   289c4:	andeq	r9, r2, ip, lsl r4
   289c8:	andeq	r9, r2, r0, ror #9
   289cc:			; <UNDEFINED> instruction: 0x000297b8
   289d0:			; <UNDEFINED> instruction: 0x000297b8
   289d4:			; <UNDEFINED> instruction: 0x000297b8
   289d8:			; <UNDEFINED> instruction: 0x000297b8
   289dc:			; <UNDEFINED> instruction: 0x000297b8
   289e0:	andeq	r9, r2, ip, lsl r4
   289e4:	andeq	r9, r2, ip, lsl r4
   289e8:	ldrdeq	r8, [r2], -r0
   289ec:			; <UNDEFINED> instruction: 0x000297b8
   289f0:			; <UNDEFINED> instruction: 0x000297b8
   289f4:	andeq	r9, r2, r4, lsl #8
   289f8:	andeq	r9, r2, r8, asr #8
   289fc:			; <UNDEFINED> instruction: 0x000297b8
   28a00:			; <UNDEFINED> instruction: 0x000297b8
   28a04:			; <UNDEFINED> instruction: 0x000297b8
   28a08:			; <UNDEFINED> instruction: 0x000297b8
   28a0c:			; <UNDEFINED> instruction: 0x000297b8
   28a10:			; <UNDEFINED> instruction: 0x000297b8
   28a14:			; <UNDEFINED> instruction: 0x000297b8
   28a18:	andeq	r9, r2, r8, lsl #14
   28a1c:	andeq	r9, r2, r8, lsl #14
   28a20:	andeq	r9, r2, r8, asr r7
   28a24:	andeq	r9, r2, r8, asr r7
   28a28:	andeq	r9, r2, r8, lsr #15
   28a2c:	mov	r3, r8
   28a30:	mov	r2, #0
   28a34:	mov	r1, r2
   28a38:	ldr	r0, [sp, #20]
   28a3c:	bl	1f094 <__assert_fail@plt+0xd4f0>
   28a40:	subs	fp, r0, #0
   28a44:	moveq	r3, #12
   28a48:	streq	r3, [sl]
   28a4c:	beq	29a3c <__assert_fail@plt+0x17e98>
   28a50:	ldr	r3, [sp, #20]
   28a54:	ldr	r3, [r3, #92]	; 0x5c
   28a58:	cmp	r3, #1
   28a5c:	movgt	r6, #0
   28a60:	movgt	r5, #16
   28a64:	ble	29474 <__assert_fail@plt+0x178d0>
   28a68:	ldr	r3, [r9, #40]	; 0x28
   28a6c:	ldr	r2, [r9, #56]	; 0x38
   28a70:	cmp	r2, r3
   28a74:	ble	29474 <__assert_fail@plt+0x178d0>
   28a78:	ldr	r2, [r9, #28]
   28a7c:	cmp	r3, r2
   28a80:	beq	29474 <__assert_fail@plt+0x178d0>
   28a84:	ldr	r2, [r9, #8]
   28a88:	ldr	r3, [r2, r3, lsl #2]
   28a8c:	cmn	r3, #1
   28a90:	bne	29474 <__assert_fail@plt+0x178d0>
   28a94:	ldr	r2, [sp, #24]
   28a98:	mov	r1, r9
   28a9c:	mov	r0, r8
   28aa0:	bl	20b90 <__assert_fail@plt+0xefec>
   28aa4:	mov	r3, r8
   28aa8:	mov	r2, r6
   28aac:	mov	r1, r6
   28ab0:	ldr	r7, [sp, #20]
   28ab4:	mov	r0, r7
   28ab8:	bl	1f094 <__assert_fail@plt+0xd4f0>
   28abc:	mov	r4, r0
   28ac0:	mov	r3, r5
   28ac4:	mov	r2, r0
   28ac8:	mov	r1, fp
   28acc:	mov	r0, r7
   28ad0:	bl	1f208 <__assert_fail@plt+0xd664>
   28ad4:	mov	fp, r0
   28ad8:	cmp	r0, #0
   28adc:	cmpne	r4, #0
   28ae0:	bne	28a68 <__assert_fail@plt+0x16ec4>
   28ae4:	mov	r3, #12
   28ae8:	str	r3, [sl]
   28aec:	mov	fp, #0
   28af0:	b	29a3c <__assert_fail@plt+0x17e98>
   28af4:	ldr	r5, [r1, #24]
   28af8:	add	r3, r5, #1
   28afc:	str	r3, [r1, #24]
   28b00:	ldr	r6, [sp, #24]
   28b04:	orr	r2, r6, #8388608	; 0x800000
   28b08:	mov	r1, r0
   28b0c:	mov	r0, r8
   28b10:	bl	20b90 <__assert_fail@plt+0xefec>
   28b14:	ldrb	r3, [r8, #4]
   28b18:	cmp	r3, #9
   28b1c:	beq	28b84 <__assert_fail@plt+0x16fe0>
   28b20:	str	sl, [sp, #4]
   28b24:	ldr	r3, [sp, #192]	; 0xc0
   28b28:	add	r3, r3, #1
   28b2c:	str	r3, [sp]
   28b30:	mov	r3, r6
   28b34:	mov	r2, r8
   28b38:	mov	r1, r4
   28b3c:	mov	r0, r9
   28b40:	bl	29e70 <__assert_fail@plt+0x182cc>
   28b44:	ldr	r3, [sl]
   28b48:	cmp	r3, #0
   28b4c:	beq	28b58 <__assert_fail@plt+0x16fb4>
   28b50:	mov	fp, #0
   28b54:	b	29a3c <__assert_fail@plt+0x17e98>
   28b58:	ldrb	r3, [r8, #4]
   28b5c:	cmp	r3, #9
   28b60:	beq	28b88 <__assert_fail@plt+0x16fe4>
   28b64:	cmp	r0, #0
   28b68:	beq	28b78 <__assert_fail@plt+0x16fd4>
   28b6c:	mov	r2, #0
   28b70:	ldr	r1, [pc, #3880]	; 29aa0 <__assert_fail@plt+0x17efc>
   28b74:	bl	1eea4 <__assert_fail@plt+0xd300>
   28b78:	mov	r3, #8
   28b7c:	str	r3, [sl]
   28b80:	b	28b50 <__assert_fail@plt+0x16fac>
   28b84:	mov	r0, #0
   28b88:	cmp	r5, #8
   28b8c:	bhi	28ba4 <__assert_fail@plt+0x17000>
   28b90:	ldr	r1, [sp, #20]
   28b94:	ldr	r3, [r1, #84]	; 0x54
   28b98:	mov	r2, #1
   28b9c:	orr	r3, r3, r2, lsl r5
   28ba0:	str	r3, [r1, #84]	; 0x54
   28ba4:	mov	r3, #17
   28ba8:	mov	r2, #0
   28bac:	mov	r1, r0
   28bb0:	ldr	r0, [sp, #20]
   28bb4:	bl	1f208 <__assert_fail@plt+0xd664>
   28bb8:	subs	fp, r0, #0
   28bbc:	moveq	r3, #12
   28bc0:	streq	r3, [sl]
   28bc4:	beq	29a3c <__assert_fail@plt+0x17e98>
   28bc8:	str	r5, [fp, #20]
   28bcc:	b	29474 <__assert_fail@plt+0x178d0>
   28bd0:	mov	r3, #0
   28bd4:	str	r3, [sp, #60]	; 0x3c
   28bd8:	mov	r1, #1
   28bdc:	mov	r0, #32
   28be0:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   28be4:	mov	r5, r0
   28be8:	mov	r1, #1
   28bec:	mov	r0, #40	; 0x28
   28bf0:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   28bf4:	mov	r7, r0
   28bf8:	cmp	r0, #0
   28bfc:	cmpne	r5, #0
   28c00:	moveq	r3, #1
   28c04:	movne	r3, #0
   28c08:	str	r3, [sp, #40]	; 0x28
   28c0c:	beq	28c7c <__assert_fail@plt+0x170d8>
   28c10:	ldr	r2, [sp, #24]
   28c14:	mov	r1, r9
   28c18:	mov	r0, r8
   28c1c:	bl	1e65c <__assert_fail@plt+0xcab8>
   28c20:	str	r0, [sp, #28]
   28c24:	ldrb	r3, [r8, #4]
   28c28:	cmp	r3, #2
   28c2c:	streq	r3, [sl]
   28c30:	beq	28dc4 <__assert_fail@plt+0x17220>
   28c34:	cmp	r3, #25
   28c38:	beq	28c98 <__assert_fail@plt+0x170f4>
   28c3c:	ldr	r3, [sp, #40]	; 0x28
   28c40:	str	r3, [sp, #44]	; 0x2c
   28c44:	ldrb	r3, [r8, #4]
   28c48:	cmp	r3, #21
   28c4c:	moveq	r3, #1
   28c50:	strbeq	r3, [r8, #4]
   28c54:	mov	fp, #0
   28c58:	mov	r3, #1
   28c5c:	str	fp, [sp, #36]	; 0x24
   28c60:	ldr	r2, [sp, #24]
   28c64:	lsr	r2, r2, #16
   28c68:	and	r2, r2, r3
   28c6c:	str	r2, [sp, #52]	; 0x34
   28c70:	str	sl, [sp, #196]	; 0xc4
   28c74:	ldr	sl, [sp, #20]
   28c78:	b	29074 <__assert_fail@plt+0x174d0>
   28c7c:	mov	r0, r5
   28c80:	bl	17204 <__assert_fail@plt+0x5660>
   28c84:	mov	r0, r7
   28c88:	bl	17204 <__assert_fail@plt+0x5660>
   28c8c:	mov	r3, #12
   28c90:	str	r3, [sl]
   28c94:	b	28dd4 <__assert_fail@plt+0x17230>
   28c98:	ldrb	r3, [r7, #16]
   28c9c:	orr	r3, r3, #1
   28ca0:	strb	r3, [r7, #16]
   28ca4:	ldr	r3, [sp, #24]
   28ca8:	tst	r3, #256	; 0x100
   28cac:	ldrne	r3, [r5]
   28cb0:	orrne	r3, r3, #1024	; 0x400
   28cb4:	strne	r3, [r5]
   28cb8:	ldr	r3, [r9, #40]	; 0x28
   28cbc:	ldr	r2, [sp, #28]
   28cc0:	add	r3, r3, r2
   28cc4:	str	r3, [r9, #40]	; 0x28
   28cc8:	ldr	r2, [sp, #24]
   28ccc:	mov	r1, r9
   28cd0:	mov	r0, r8
   28cd4:	bl	1e65c <__assert_fail@plt+0xcab8>
   28cd8:	str	r0, [sp, #28]
   28cdc:	ldrb	r3, [r8, #4]
   28ce0:	cmp	r3, #2
   28ce4:	streq	r3, [sl]
   28ce8:	beq	28dc4 <__assert_fail@plt+0x17220>
   28cec:	mov	r3, #1
   28cf0:	str	r3, [sp, #44]	; 0x2c
   28cf4:	b	28c44 <__assert_fail@plt+0x170a0>
   28cf8:	ldr	sl, [sp, #196]	; 0xc4
   28cfc:	str	r0, [sl]
   28d00:	b	28dc4 <__assert_fail@plt+0x17220>
   28d04:	ldr	sl, [sp, #196]	; 0xc4
   28d08:	mov	r3, #7
   28d0c:	str	r3, [sl]
   28d10:	b	28dc4 <__assert_fail@plt+0x17220>
   28d14:	ldr	r3, [r9, #40]	; 0x28
   28d18:	ldr	r2, [sp, #28]
   28d1c:	add	r3, r3, r2
   28d20:	str	r3, [r9, #40]	; 0x28
   28d24:	ldr	r2, [sp, #24]
   28d28:	mov	r1, r9
   28d2c:	add	r0, sp, #80	; 0x50
   28d30:	bl	1e65c <__assert_fail@plt+0xcab8>
   28d34:	mov	r3, r0
   28d38:	ldrb	r2, [sp, #84]	; 0x54
   28d3c:	cmp	r2, #2
   28d40:	beq	28de8 <__assert_fail@plt+0x17244>
   28d44:	cmp	r2, #21
   28d48:	beq	28df8 <__assert_fail@plt+0x17254>
   28d4c:	add	r2, sp, #120	; 0x78
   28d50:	str	r2, [sp, #76]	; 0x4c
   28d54:	mov	r2, #3
   28d58:	str	r2, [sp, #72]	; 0x48
   28d5c:	mov	r2, #1
   28d60:	str	r2, [sp, #8]
   28d64:	ldr	r2, [sp, #24]
   28d68:	str	r2, [sp, #4]
   28d6c:	str	sl, [sp]
   28d70:	add	r2, sp, #80	; 0x50
   28d74:	mov	r1, r9
   28d78:	add	r0, sp, #72	; 0x48
   28d7c:	bl	1ec1c <__assert_fail@plt+0xd078>
   28d80:	cmp	r0, #0
   28d84:	bne	29c14 <__assert_fail@plt+0x18070>
   28d88:	ldr	r2, [sp, #24]
   28d8c:	mov	r1, r9
   28d90:	mov	r0, r8
   28d94:	bl	1e65c <__assert_fail@plt+0xcab8>
   28d98:	str	r0, [sp, #28]
   28d9c:	ldr	r6, [sp, #64]	; 0x40
   28da0:	sub	r3, r6, #2
   28da4:	bics	r3, r3, #2
   28da8:	beq	29030 <__assert_fail@plt+0x1748c>
   28dac:	ldr	r4, [sp, #72]	; 0x48
   28db0:	cmp	r4, #2
   28db4:	bne	28e14 <__assert_fail@plt+0x17270>
   28db8:	ldr	sl, [sp, #196]	; 0xc4
   28dbc:	mov	r3, #11
   28dc0:	str	r3, [sl]
   28dc4:	mov	r0, r5
   28dc8:	bl	17204 <__assert_fail@plt+0x5660>
   28dcc:	mov	r0, r7
   28dd0:	bl	20c50 <__assert_fail@plt+0xf0ac>
   28dd4:	ldr	r3, [sl]
   28dd8:	cmp	r3, #0
   28ddc:	bne	29c0c <__assert_fail@plt+0x18068>
   28de0:	mov	fp, #0
   28de4:	b	29474 <__assert_fail@plt+0x178d0>
   28de8:	ldr	sl, [sp, #196]	; 0xc4
   28dec:	mov	r3, #7
   28df0:	str	r3, [sl]
   28df4:	b	28dc4 <__assert_fail@plt+0x17220>
   28df8:	ldr	r3, [r9, #40]	; 0x28
   28dfc:	ldr	r2, [sp, #28]
   28e00:	sub	r3, r3, r2
   28e04:	str	r3, [r9, #40]	; 0x28
   28e08:	mov	r3, #1
   28e0c:	strb	r3, [r8, #4]
   28e10:	b	290e8 <__assert_fail@plt+0x17544>
   28e14:	cmp	r4, #4
   28e18:	beq	29c20 <__assert_fail@plt+0x1807c>
   28e1c:	cmp	r6, #3
   28e20:	beq	28e4c <__assert_fail@plt+0x172a8>
   28e24:	cmp	r4, #3
   28e28:	beq	29cf8 <__assert_fail@plt+0x18154>
   28e2c:	cmp	r6, #0
   28e30:	beq	28e68 <__assert_fail@plt+0x172c4>
   28e34:	cmp	r6, #3
   28e38:	movne	r0, #0
   28e3c:	bne	28e6c <__assert_fail@plt+0x172c8>
   28e40:	ldr	r3, [sp, #68]	; 0x44
   28e44:	ldrb	r0, [r3]
   28e48:	b	28e6c <__assert_fail@plt+0x172c8>
   28e4c:	ldr	r0, [sp, #68]	; 0x44
   28e50:	bl	11988 <strlen@plt>
   28e54:	cmp	r0, #1
   28e58:	bls	29cf0 <__assert_fail@plt+0x1814c>
   28e5c:	ldr	sl, [sp, #196]	; 0xc4
   28e60:	mov	r3, #3
   28e64:	b	29038 <__assert_fail@plt+0x17494>
   28e68:	ldrb	r0, [sp, #68]	; 0x44
   28e6c:	cmp	r4, #0
   28e70:	bne	28f60 <__assert_fail@plt+0x173bc>
   28e74:	ldrb	r3, [sp, #76]	; 0x4c
   28e78:	str	r3, [sp, #32]
   28e7c:	cmp	r6, #0
   28e80:	cmpne	r6, #3
   28e84:	ldrne	r6, [sp, #68]	; 0x44
   28e88:	bne	28ea0 <__assert_fail@plt+0x172fc>
   28e8c:	ldr	r3, [sl, #92]	; 0x5c
   28e90:	cmp	r3, #1
   28e94:	ble	28f78 <__assert_fail@plt+0x173d4>
   28e98:	bl	119f4 <btowc@plt>
   28e9c:	mov	r6, r0
   28ea0:	ldr	r3, [sp, #72]	; 0x48
   28ea4:	cmp	r3, #3
   28ea8:	cmpne	r3, #0
   28eac:	bne	28f90 <__assert_fail@plt+0x173ec>
   28eb0:	ldr	r3, [sl, #92]	; 0x5c
   28eb4:	cmp	r3, #1
   28eb8:	ble	28f88 <__assert_fail@plt+0x173e4>
   28ebc:	ldr	r0, [sp, #32]
   28ec0:	bl	119f4 <btowc@plt>
   28ec4:	mov	r4, r0
   28ec8:	cmn	r6, #1
   28ecc:	cmnne	r4, #1
   28ed0:	beq	29c2c <__assert_fail@plt+0x18088>
   28ed4:	ldr	r3, [sp, #52]	; 0x34
   28ed8:	cmp	r4, r6
   28edc:	movcs	r3, #0
   28ee0:	andcc	r3, r3, #1
   28ee4:	cmp	r3, #0
   28ee8:	bne	29c38 <__assert_fail@plt+0x18094>
   28eec:	ldr	r3, [sl, #92]	; 0x5c
   28ef0:	cmp	r3, #1
   28ef4:	ble	28fc8 <__assert_fail@plt+0x17424>
   28ef8:	ldr	r3, [r7, #32]
   28efc:	cmp	r3, fp
   28f00:	bne	28fa8 <__assert_fail@plt+0x17404>
   28f04:	lsl	fp, fp, #1
   28f08:	add	fp, fp, #1
   28f0c:	lsl	r3, fp, #2
   28f10:	str	r3, [sp, #48]	; 0x30
   28f14:	mov	r1, r3
   28f18:	ldr	r0, [r7, #4]
   28f1c:	bl	2d434 <__assert_fail@plt+0x1b890>
   28f20:	str	r0, [sp, #32]
   28f24:	ldr	r1, [sp, #48]	; 0x30
   28f28:	ldr	r0, [r7, #8]
   28f2c:	bl	2d434 <__assert_fail@plt+0x1b890>
   28f30:	str	r0, [sp, #48]	; 0x30
   28f34:	ldr	r3, [sp, #32]
   28f38:	cmp	r0, #0
   28f3c:	cmpne	r3, #0
   28f40:	bne	28f98 <__assert_fail@plt+0x173f4>
   28f44:	ldr	sl, [sp, #196]	; 0xc4
   28f48:	mov	r0, r3
   28f4c:	bl	17204 <__assert_fail@plt+0x5660>
   28f50:	ldr	r0, [sp, #48]	; 0x30
   28f54:	bl	17204 <__assert_fail@plt+0x5660>
   28f58:	mov	r3, #12
   28f5c:	b	28dc0 <__assert_fail@plt+0x1721c>
   28f60:	cmp	r4, #3
   28f64:	ldreq	r3, [sp, #76]	; 0x4c
   28f68:	ldrbeq	r3, [r3]
   28f6c:	movne	r3, #0
   28f70:	str	r3, [sp, #32]
   28f74:	b	28e7c <__assert_fail@plt+0x172d8>
   28f78:	uxtb	r6, r0
   28f7c:	cmp	r4, #3
   28f80:	cmpne	r4, #0
   28f84:	bne	28f90 <__assert_fail@plt+0x173ec>
   28f88:	ldrb	r4, [sp, #32]
   28f8c:	b	28ec8 <__assert_fail@plt+0x17324>
   28f90:	ldr	r4, [sp, #76]	; 0x4c
   28f94:	b	28ec8 <__assert_fail@plt+0x17324>
   28f98:	ldr	r3, [sp, #32]
   28f9c:	str	r3, [r7, #4]
   28fa0:	ldr	r3, [sp, #48]	; 0x30
   28fa4:	str	r3, [r7, #8]
   28fa8:	ldr	r2, [r7, #32]
   28fac:	ldr	r3, [r7, #4]
   28fb0:	str	r6, [r3, r2, lsl #2]
   28fb4:	ldr	r2, [r7, #8]
   28fb8:	ldr	r3, [r7, #32]
   28fbc:	add	r1, r3, #1
   28fc0:	str	r1, [r7, #32]
   28fc4:	str	r4, [r2, r3, lsl #2]
   28fc8:	mov	r1, #0
   28fcc:	mov	ip, #1
   28fd0:	b	28fe0 <__assert_fail@plt+0x1743c>
   28fd4:	add	r1, r1, #1
   28fd8:	cmp	r1, #256	; 0x100
   28fdc:	beq	29c44 <__assert_fail@plt+0x180a0>
   28fe0:	cmp	r1, r6
   28fe4:	movcc	r3, #0
   28fe8:	movcs	r3, #1
   28fec:	cmp	r1, r4
   28ff0:	movhi	r3, #0
   28ff4:	cmp	r3, #0
   28ff8:	beq	28fd4 <__assert_fail@plt+0x17430>
   28ffc:	add	r3, r1, #31
   29000:	cmp	r1, #0
   29004:	movge	r3, r1
   29008:	asr	r3, r3, #5
   2900c:	asr	r2, r1, #31
   29010:	lsr	r0, r2, #27
   29014:	add	r2, r1, r0
   29018:	and	r2, r2, #31
   2901c:	sub	r2, r2, r0
   29020:	ldr	r0, [r5, r3, lsl #2]
   29024:	orr	r2, r0, ip, lsl r2
   29028:	str	r2, [r5, r3, lsl #2]
   2902c:	b	28fd4 <__assert_fail@plt+0x17430>
   29030:	ldr	sl, [sp, #196]	; 0xc4
   29034:	mov	r3, #11
   29038:	str	r3, [sl]
   2903c:	b	28dc4 <__assert_fail@plt+0x17220>
   29040:	ldrb	r3, [sp, #68]	; 0x44
   29044:	asr	r1, r3, #5
   29048:	and	r3, r3, #31
   2904c:	ldr	r2, [r5, r1, lsl #2]
   29050:	mov	r0, #1
   29054:	orr	r3, r2, r0, lsl r3
   29058:	str	r3, [r5, r1, lsl #2]
   2905c:	ldrb	r3, [r8, #4]
   29060:	cmp	r3, #2
   29064:	beq	29214 <__assert_fail@plt+0x17670>
   29068:	cmp	r3, #21
   2906c:	beq	29224 <__assert_fail@plt+0x17680>
   29070:	ldr	r3, [sp, #40]	; 0x28
   29074:	add	r2, sp, #88	; 0x58
   29078:	str	r2, [sp, #68]	; 0x44
   2907c:	mov	r2, #3
   29080:	str	r2, [sp, #64]	; 0x40
   29084:	str	r3, [sp, #8]
   29088:	ldr	r3, [sp, #24]
   2908c:	str	r3, [sp, #4]
   29090:	str	sl, [sp]
   29094:	ldr	r3, [sp, #28]
   29098:	mov	r2, r8
   2909c:	mov	r1, r9
   290a0:	add	r0, sp, #64	; 0x40
   290a4:	bl	1ec1c <__assert_fail@plt+0xd078>
   290a8:	cmp	r0, #0
   290ac:	bne	28cf8 <__assert_fail@plt+0x17154>
   290b0:	ldr	r2, [sp, #24]
   290b4:	mov	r1, r9
   290b8:	mov	r0, r8
   290bc:	bl	1e65c <__assert_fail@plt+0xcab8>
   290c0:	str	r0, [sp, #28]
   290c4:	ldr	r3, [sp, #64]	; 0x40
   290c8:	sub	r3, r3, #2
   290cc:	bics	r3, r3, #2
   290d0:	beq	290e8 <__assert_fail@plt+0x17544>
   290d4:	ldrb	r3, [r8, #4]
   290d8:	cmp	r3, #2
   290dc:	beq	28d04 <__assert_fail@plt+0x17160>
   290e0:	cmp	r3, #22
   290e4:	beq	28d14 <__assert_fail@plt+0x17170>
   290e8:	ldr	r3, [sp, #64]	; 0x40
   290ec:	cmp	r3, #4
   290f0:	ldrls	pc, [pc, r3, lsl #2]
   290f4:	b	29214 <__assert_fail@plt+0x17670>
   290f8:	andeq	r9, r2, r0, asr #32
   290fc:	andeq	r9, r2, ip, lsl #2
   29100:	andeq	r9, r2, r0, ror #2
   29104:	muleq	r2, ip, r1
   29108:	ldrdeq	r9, [r2], -r8
   2910c:	ldr	r3, [r7, #20]
   29110:	ldr	r2, [sp, #36]	; 0x24
   29114:	cmp	r3, r2
   29118:	beq	29138 <__assert_fail@plt+0x17594>
   2911c:	ldr	r2, [r7]
   29120:	ldr	r3, [r7, #20]
   29124:	add	r1, r3, #1
   29128:	str	r1, [r7, #20]
   2912c:	ldr	r1, [sp, #68]	; 0x44
   29130:	str	r1, [r2, r3, lsl #2]
   29134:	b	2905c <__assert_fail@plt+0x174b8>
   29138:	lsl	r3, r2, #1
   2913c:	add	r3, r3, #1
   29140:	str	r3, [sp, #36]	; 0x24
   29144:	lsl	r1, r3, #2
   29148:	ldr	r0, [r7]
   2914c:	bl	2d434 <__assert_fail@plt+0x1b890>
   29150:	cmp	r0, #0
   29154:	beq	29384 <__assert_fail@plt+0x177e0>
   29158:	str	r0, [r7]
   2915c:	b	2911c <__assert_fail@plt+0x17578>
   29160:	ldr	r4, [sp, #68]	; 0x44
   29164:	mov	r0, r4
   29168:	bl	11988 <strlen@plt>
   2916c:	cmp	r0, #1
   29170:	bne	29c54 <__assert_fail@plt+0x180b0>
   29174:	ldrb	r3, [r4]
   29178:	asr	r1, r3, #5
   2917c:	and	r3, r3, #31
   29180:	ldr	r2, [r5, r1, lsl #2]
   29184:	orr	r3, r2, r0, lsl r3
   29188:	str	r3, [r5, r1, lsl #2]
   2918c:	mov	r3, #0
   29190:	ldr	r2, [sp, #196]	; 0xc4
   29194:	str	r3, [r2]
   29198:	b	2905c <__assert_fail@plt+0x174b8>
   2919c:	ldr	r4, [sp, #68]	; 0x44
   291a0:	mov	r0, r4
   291a4:	bl	11988 <strlen@plt>
   291a8:	cmp	r0, #1
   291ac:	bne	29c64 <__assert_fail@plt+0x180c0>
   291b0:	ldrb	r3, [r4]
   291b4:	asr	r1, r3, #5
   291b8:	and	r3, r3, #31
   291bc:	ldr	r2, [r5, r1, lsl #2]
   291c0:	orr	r3, r2, r0, lsl r3
   291c4:	str	r3, [r5, r1, lsl #2]
   291c8:	mov	r3, #0
   291cc:	ldr	r2, [sp, #196]	; 0xc4
   291d0:	str	r3, [r2]
   291d4:	b	2905c <__assert_fail@plt+0x174b8>
   291d8:	ldr	r3, [sp, #24]
   291dc:	str	r3, [sp, #4]
   291e0:	ldr	r3, [sp, #68]	; 0x44
   291e4:	str	r3, [sp]
   291e8:	add	r3, sp, #60	; 0x3c
   291ec:	mov	r2, r7
   291f0:	mov	r1, r5
   291f4:	ldr	r0, [r9, #64]	; 0x40
   291f8:	bl	227fc <__assert_fail@plt+0x10c58>
   291fc:	ldr	r3, [sp, #196]	; 0xc4
   29200:	str	r0, [r3]
   29204:	cmp	r0, #0
   29208:	beq	2905c <__assert_fail@plt+0x174b8>
   2920c:	mov	sl, r3
   29210:	b	28dc4 <__assert_fail@plt+0x17220>
   29214:	ldr	sl, [sp, #196]	; 0xc4
   29218:	mov	r3, #7
   2921c:	str	r3, [sl]
   29220:	b	28dc4 <__assert_fail@plt+0x17220>
   29224:	ldr	sl, [sp, #196]	; 0xc4
   29228:	ldr	r3, [r9, #40]	; 0x28
   2922c:	ldr	r2, [sp, #28]
   29230:	add	r3, r3, r2
   29234:	str	r3, [r9, #40]	; 0x28
   29238:	ldr	r3, [sp, #44]	; 0x2c
   2923c:	cmp	r3, #0
   29240:	beq	29260 <__assert_fail@plt+0x176bc>
   29244:	sub	r3, r5, #4
   29248:	add	r1, r5, #28
   2924c:	ldr	r2, [r3, #4]
   29250:	mvn	r2, r2
   29254:	str	r2, [r3, #4]!
   29258:	cmp	r1, r3
   2925c:	bne	2924c <__assert_fail@plt+0x176a8>
   29260:	ldr	r3, [sp, #20]
   29264:	ldr	ip, [r3, #92]	; 0x5c
   29268:	cmp	ip, #1
   2926c:	ble	29298 <__assert_fail@plt+0x176f4>
   29270:	sub	r0, r5, #4
   29274:	ldr	r1, [r3, #60]	; 0x3c
   29278:	sub	r1, r1, #4
   2927c:	add	lr, r5, #28
   29280:	ldr	r3, [r0, #4]
   29284:	ldr	r2, [r1, #4]!
   29288:	and	r3, r3, r2
   2928c:	str	r3, [r0, #4]!
   29290:	cmp	r0, lr
   29294:	bne	29280 <__assert_fail@plt+0x176dc>
   29298:	ldr	r3, [r7, #20]
   2929c:	cmp	r3, #0
   292a0:	bne	292e8 <__assert_fail@plt+0x17744>
   292a4:	ldr	r3, [r7, #24]
   292a8:	cmp	r3, #0
   292ac:	bne	292e8 <__assert_fail@plt+0x17744>
   292b0:	ldr	r3, [r7, #28]
   292b4:	cmp	r3, #0
   292b8:	bne	292e8 <__assert_fail@plt+0x17744>
   292bc:	ldr	r3, [r7, #32]
   292c0:	cmp	r3, #0
   292c4:	bne	292e8 <__assert_fail@plt+0x17744>
   292c8:	cmp	ip, #1
   292cc:	ble	29350 <__assert_fail@plt+0x177ac>
   292d0:	ldr	r3, [r7, #36]	; 0x24
   292d4:	cmp	r3, #0
   292d8:	bne	292e8 <__assert_fail@plt+0x17744>
   292dc:	ldrb	r3, [r7, #16]
   292e0:	tst	r3, #1
   292e4:	beq	29350 <__assert_fail@plt+0x177ac>
   292e8:	ldr	r0, [sp, #20]
   292ec:	ldrb	r3, [r0, #88]	; 0x58
   292f0:	orr	r3, r3, #2
   292f4:	strb	r3, [r0, #88]	; 0x58
   292f8:	mov	r3, #6
   292fc:	strb	r3, [sp, #124]	; 0x7c
   29300:	add	r3, sp, #152	; 0x98
   29304:	str	r7, [r3, #-32]!	; 0xffffffe0
   29308:	mov	r2, #0
   2930c:	mov	r1, r2
   29310:	bl	1f094 <__assert_fail@plt+0xd4f0>
   29314:	subs	fp, r0, #0
   29318:	beq	29cb4 <__assert_fail@plt+0x18110>
   2931c:	ldr	r3, [r5]
   29320:	cmp	r3, #0
   29324:	bne	29c74 <__assert_fail@plt+0x180d0>
   29328:	mov	r3, r5
   2932c:	add	r2, r5, #28
   29330:	ldr	r1, [r3, #4]!
   29334:	cmp	r1, #0
   29338:	bne	29c74 <__assert_fail@plt+0x180d0>
   2933c:	cmp	r3, r2
   29340:	bne	29330 <__assert_fail@plt+0x1778c>
   29344:	mov	r0, r5
   29348:	bl	17204 <__assert_fail@plt+0x5660>
   2934c:	b	29474 <__assert_fail@plt+0x178d0>
   29350:	mov	r0, r7
   29354:	bl	20c50 <__assert_fail@plt+0xf0ac>
   29358:	mov	r3, #3
   2935c:	strb	r3, [sp, #124]	; 0x7c
   29360:	add	r3, sp, #152	; 0x98
   29364:	str	r5, [r3, #-32]!	; 0xffffffe0
   29368:	mov	r2, #0
   2936c:	mov	r1, r2
   29370:	ldr	r0, [sp, #20]
   29374:	bl	1f094 <__assert_fail@plt+0xd4f0>
   29378:	subs	fp, r0, #0
   2937c:	bne	29474 <__assert_fail@plt+0x178d0>
   29380:	b	29cb4 <__assert_fail@plt+0x18110>
   29384:	ldr	sl, [sp, #196]	; 0xc4
   29388:	b	29cb4 <__assert_fail@plt+0x18110>
   2938c:	ldr	r2, [r8]
   29390:	mov	r3, #1
   29394:	lsl	r3, r3, r2
   29398:	ldr	r2, [sp, #20]
   2939c:	ldr	r2, [r2, #84]	; 0x54
   293a0:	tst	r3, r2
   293a4:	moveq	r3, #6
   293a8:	streq	r3, [sl]
   293ac:	moveq	fp, #0
   293b0:	beq	29a3c <__assert_fail@plt+0x17e98>
   293b4:	ldr	r0, [sp, #20]
   293b8:	ldr	r2, [r0, #80]	; 0x50
   293bc:	orr	r3, r2, r3
   293c0:	str	r3, [r0, #80]	; 0x50
   293c4:	mov	r3, r8
   293c8:	mov	r2, #0
   293cc:	mov	r1, r2
   293d0:	bl	1f094 <__assert_fail@plt+0xd4f0>
   293d4:	subs	fp, r0, #0
   293d8:	moveq	r3, #12
   293dc:	streq	r3, [sl]
   293e0:	beq	29a3c <__assert_fail@plt+0x17e98>
   293e4:	ldr	r2, [sp, #20]
   293e8:	ldr	r3, [r2, #76]	; 0x4c
   293ec:	add	r3, r3, #1
   293f0:	str	r3, [r2, #76]	; 0x4c
   293f4:	ldrb	r3, [r2, #88]	; 0x58
   293f8:	orr	r3, r3, #2
   293fc:	strb	r3, [r2, #88]	; 0x58
   29400:	b	29474 <__assert_fail@plt+0x178d0>
   29404:	ldr	r3, [sp, #24]
   29408:	tst	r3, #16777216	; 0x1000000
   2940c:	movne	r3, #13
   29410:	strne	r3, [sl]
   29414:	movne	fp, #0
   29418:	bne	29a3c <__assert_fail@plt+0x17e98>
   2941c:	ldr	r3, [sp, #24]
   29420:	tst	r3, #32
   29424:	movne	r3, #13
   29428:	strne	r3, [sl]
   2942c:	movne	fp, #0
   29430:	bne	29a3c <__assert_fail@plt+0x17e98>
   29434:	ldr	r3, [sp, #24]
   29438:	tst	r3, #16
   2943c:	bne	29488 <__assert_fail@plt+0x178e4>
   29440:	cmp	r2, #9
   29444:	beq	294c4 <__assert_fail@plt+0x17920>
   29448:	mov	r3, #1
   2944c:	strb	r3, [r8, #4]
   29450:	mov	r3, r8
   29454:	mov	r2, #0
   29458:	mov	r1, r2
   2945c:	ldr	r0, [sp, #20]
   29460:	bl	1f094 <__assert_fail@plt+0xd4f0>
   29464:	subs	fp, r0, #0
   29468:	moveq	r3, #12
   2946c:	streq	r3, [sl]
   29470:	beq	29a3c <__assert_fail@plt+0x17e98>
   29474:	ldr	r2, [sp, #24]
   29478:	mov	r1, r9
   2947c:	mov	r0, r8
   29480:	bl	20b90 <__assert_fail@plt+0xefec>
   29484:	b	29acc <__assert_fail@plt+0x17f28>
   29488:	mov	r5, r3
   2948c:	mov	r2, r3
   29490:	mov	r1, r9
   29494:	mov	r0, r8
   29498:	bl	20b90 <__assert_fail@plt+0xefec>
   2949c:	str	sl, [sp, #4]
   294a0:	ldr	r3, [sp, #192]	; 0xc0
   294a4:	str	r3, [sp]
   294a8:	mov	r3, r5
   294ac:	mov	r2, r8
   294b0:	mov	r1, r4
   294b4:	mov	r0, r9
   294b8:	bl	28964 <__assert_fail@plt+0x16dc0>
   294bc:	mov	fp, r0
   294c0:	b	29a3c <__assert_fail@plt+0x17e98>
   294c4:	ldr	r3, [sp, #24]
   294c8:	tst	r3, #131072	; 0x20000
   294cc:	moveq	r3, #16
   294d0:	streq	r3, [sl]
   294d4:	moveq	fp, #0
   294d8:	bne	29448 <__assert_fail@plt+0x178a4>
   294dc:	b	29a3c <__assert_fail@plt+0x17e98>
   294e0:	ldr	r2, [r8]
   294e4:	ldr	r3, [pc, #1464]	; 29aa4 <__assert_fail@plt+0x17f00>
   294e8:	and	r3, r3, r2
   294ec:	cmp	r3, #0
   294f0:	beq	29504 <__assert_fail@plt+0x17960>
   294f4:	ldr	r3, [sp, #20]
   294f8:	ldrb	r3, [r3, #88]	; 0x58
   294fc:	tst	r3, #16
   29500:	beq	295b8 <__assert_fail@plt+0x17a14>
   29504:	ldr	r3, [r8]
   29508:	sub	r2, r3, #256	; 0x100
   2950c:	bics	r2, r2, #256	; 0x100
   29510:	bne	296a0 <__assert_fail@plt+0x17afc>
   29514:	cmp	r3, #256	; 0x100
   29518:	beq	29674 <__assert_fail@plt+0x17ad0>
   2951c:	mov	r3, #5
   29520:	str	r3, [r8]
   29524:	mov	r3, r8
   29528:	mov	r2, #0
   2952c:	mov	r1, r2
   29530:	ldr	r0, [sp, #20]
   29534:	bl	1f094 <__assert_fail@plt+0xd4f0>
   29538:	mov	r4, r0
   2953c:	mov	r3, #10
   29540:	str	r3, [r8]
   29544:	mov	r3, r8
   29548:	mov	r2, #0
   2954c:	mov	r1, r2
   29550:	ldr	r6, [sp, #20]
   29554:	mov	r0, r6
   29558:	bl	1f094 <__assert_fail@plt+0xd4f0>
   2955c:	mov	r5, r0
   29560:	mov	r3, #10
   29564:	mov	r2, r0
   29568:	mov	r1, r4
   2956c:	mov	r0, r6
   29570:	bl	1f208 <__assert_fail@plt+0xd664>
   29574:	cmp	r5, #0
   29578:	cmpne	r4, #0
   2957c:	moveq	r4, #1
   29580:	movne	r4, #0
   29584:	mov	fp, r0
   29588:	cmp	r0, #0
   2958c:	orreq	r4, r4, #1
   29590:	cmp	r4, #0
   29594:	movne	r3, #12
   29598:	strne	r3, [sl]
   2959c:	movne	fp, #0
   295a0:	bne	29a3c <__assert_fail@plt+0x17e98>
   295a4:	ldr	r2, [sp, #24]
   295a8:	mov	r1, r9
   295ac:	mov	r0, r8
   295b0:	bl	20b90 <__assert_fail@plt+0xefec>
   295b4:	b	29a3c <__assert_fail@plt+0x17e98>
   295b8:	ldr	r1, [sp, #20]
   295bc:	ldrb	r3, [r1, #88]	; 0x58
   295c0:	orr	r3, r3, #16
   295c4:	strb	r3, [r1, #88]	; 0x58
   295c8:	tst	r3, #8
   295cc:	bne	29cc0 <__assert_fail@plt+0x1811c>
   295d0:	mov	r3, #0
   295d4:	str	r3, [r1, #96]	; 0x60
   295d8:	ldr	r3, [pc, #1224]	; 29aa8 <__assert_fail@plt+0x17f04>
   295dc:	str	r3, [r1, #100]	; 0x64
   295e0:	mvn	r3, #2013265921	; 0x78000001
   295e4:	str	r3, [r1, #104]	; 0x68
   295e8:	mvn	r3, #-134217727	; 0xf8000001
   295ec:	str	r3, [r1, #108]	; 0x6c
   295f0:	ldrb	r3, [r1, #88]	; 0x58
   295f4:	tst	r3, #4
   295f8:	beq	29ce4 <__assert_fail@plt+0x18140>
   295fc:	add	r3, r1, #112	; 0x70
   29600:	mov	r2, #0
   29604:	str	r2, [r1, #112]	; 0x70
   29608:	str	r2, [r3, #4]
   2960c:	str	r2, [r3, #8]
   29610:	str	r2, [r3, #12]
   29614:	b	29504 <__assert_fail@plt+0x17960>
   29618:	add	r4, r4, #32
   2961c:	add	r5, r5, #1
   29620:	add	r7, r7, #64	; 0x40
   29624:	add	lr, lr, #4
   29628:	cmp	r5, #7
   2962c:	bgt	29504 <__assert_fail@plt+0x17960>
   29630:	mov	ip, r7
   29634:	mov	r1, #0
   29638:	ldr	r3, [r0]
   2963c:	ldrh	r3, [r3, ip]
   29640:	lsr	r3, r3, #3
   29644:	add	r2, r4, r1
   29648:	cmp	r2, #95	; 0x5f
   2964c:	orreq	r3, r3, #1
   29650:	tst	r3, #1
   29654:	ldrne	r3, [lr]
   29658:	orrne	r3, r3, r6, lsl r1
   2965c:	strne	r3, [lr]
   29660:	add	r1, r1, #1
   29664:	add	ip, ip, #2
   29668:	cmp	r1, #32
   2966c:	bne	29638 <__assert_fail@plt+0x17a94>
   29670:	b	29618 <__assert_fail@plt+0x17a74>
   29674:	mov	r3, #6
   29678:	str	r3, [r8]
   2967c:	mov	r3, r8
   29680:	mov	r2, #0
   29684:	mov	r1, r2
   29688:	ldr	r0, [sp, #20]
   2968c:	bl	1f094 <__assert_fail@plt+0xd4f0>
   29690:	mov	r4, r0
   29694:	mov	r3, #9
   29698:	str	r3, [r8]
   2969c:	b	29544 <__assert_fail@plt+0x179a0>
   296a0:	mov	r3, r8
   296a4:	mov	r2, #0
   296a8:	mov	r1, r2
   296ac:	ldr	r0, [sp, #20]
   296b0:	bl	1f094 <__assert_fail@plt+0xd4f0>
   296b4:	subs	fp, r0, #0
   296b8:	moveq	r3, #12
   296bc:	streq	r3, [sl]
   296c0:	bne	295a4 <__assert_fail@plt+0x17a00>
   296c4:	b	29a3c <__assert_fail@plt+0x17e98>
   296c8:	mov	r3, r8
   296cc:	mov	r2, #0
   296d0:	mov	r1, r2
   296d4:	ldr	r0, [sp, #20]
   296d8:	bl	1f094 <__assert_fail@plt+0xd4f0>
   296dc:	subs	fp, r0, #0
   296e0:	moveq	r3, #12
   296e4:	streq	r3, [sl]
   296e8:	beq	29a3c <__assert_fail@plt+0x17e98>
   296ec:	ldr	r2, [sp, #20]
   296f0:	ldr	r3, [r2, #92]	; 0x5c
   296f4:	cmp	r3, #1
   296f8:	ldrbgt	r3, [r2, #88]	; 0x58
   296fc:	orrgt	r3, r3, #2
   29700:	strbgt	r3, [r2, #88]	; 0x58
   29704:	b	29474 <__assert_fail@plt+0x178d0>
   29708:	str	sl, [sp, #4]
   2970c:	cmp	r2, #33	; 0x21
   29710:	movne	r2, #0
   29714:	moveq	r2, #1
   29718:	str	r2, [sp]
   2971c:	ldr	r3, [pc, #904]	; 29aac <__assert_fail@plt+0x17f08>
   29720:	ldr	r2, [pc, #904]	; 29ab0 <__assert_fail@plt+0x17f0c>
   29724:	ldr	r1, [r0, #64]	; 0x40
   29728:	ldr	r0, [sp, #20]
   2972c:	bl	23330 <__assert_fail@plt+0x1178c>
   29730:	ldr	r2, [sl]
   29734:	mov	fp, r0
   29738:	adds	r3, r2, #0
   2973c:	movne	r3, #1
   29740:	cmp	r0, #0
   29744:	movne	r3, #0
   29748:	cmp	r3, #0
   2974c:	beq	29474 <__assert_fail@plt+0x178d0>
   29750:	mov	fp, #0
   29754:	b	29a3c <__assert_fail@plt+0x17e98>
   29758:	str	sl, [sp, #4]
   2975c:	cmp	r2, #35	; 0x23
   29760:	movne	r2, #0
   29764:	moveq	r2, #1
   29768:	str	r2, [sp]
   2976c:	ldr	r3, [pc, #832]	; 29ab4 <__assert_fail@plt+0x17f10>
   29770:	ldr	r2, [pc, #832]	; 29ab8 <__assert_fail@plt+0x17f14>
   29774:	ldr	r1, [r0, #64]	; 0x40
   29778:	ldr	r0, [sp, #20]
   2977c:	bl	23330 <__assert_fail@plt+0x1178c>
   29780:	ldr	r2, [sl]
   29784:	mov	fp, r0
   29788:	adds	r3, r2, #0
   2978c:	movne	r3, #1
   29790:	cmp	r0, #0
   29794:	movne	r3, #0
   29798:	cmp	r3, #0
   2979c:	beq	29474 <__assert_fail@plt+0x178d0>
   297a0:	mov	fp, #0
   297a4:	b	29a3c <__assert_fail@plt+0x17e98>
   297a8:	mov	r3, #5
   297ac:	str	r3, [sl]
   297b0:	mov	fp, #0
   297b4:	b	29a3c <__assert_fail@plt+0x17e98>
   297b8:	ldr	r2, [sp, #24]
   297bc:	mov	r1, r8
   297c0:	mov	r0, r9
   297c4:	bl	20bac <__assert_fail@plt+0xf008>
   297c8:	mov	r7, r0
   297cc:	cmn	r0, #1
   297d0:	beq	2981c <__assert_fail@plt+0x17c78>
   297d4:	cmn	r0, #2
   297d8:	beq	297f4 <__assert_fail@plt+0x17c50>
   297dc:	ldrb	r3, [r8, #4]
   297e0:	cmp	r3, #24
   297e4:	beq	298f8 <__assert_fail@plt+0x17d54>
   297e8:	cmp	r3, #1
   297ec:	moveq	r5, r0
   297f0:	beq	29838 <__assert_fail@plt+0x17c94>
   297f4:	ldr	r3, [sp, #24]
   297f8:	tst	r3, #2097152	; 0x200000
   297fc:	bne	29850 <__assert_fail@plt+0x17cac>
   29800:	ldrb	r3, [r8, #4]
   29804:	cmp	r3, #2
   29808:	bne	298e8 <__assert_fail@plt+0x17d44>
   2980c:	mov	r3, #9
   29810:	str	r3, [sl]
   29814:	mov	r6, #0
   29818:	b	299dc <__assert_fail@plt+0x17e38>
   2981c:	ldrb	r3, [r8, #4]
   29820:	cmp	r3, #1
   29824:	bne	29870 <__assert_fail@plt+0x17ccc>
   29828:	ldrb	r3, [r8]
   2982c:	cmp	r3, #44	; 0x2c
   29830:	moveq	r5, #0
   29834:	bne	29870 <__assert_fail@plt+0x17ccc>
   29838:	ldrb	r3, [r8]
   2983c:	cmp	r3, #44	; 0x2c
   29840:	beq	29880 <__assert_fail@plt+0x17cdc>
   29844:	ldr	r3, [sp, #24]
   29848:	tst	r3, #2097152	; 0x200000
   2984c:	beq	298e8 <__assert_fail@plt+0x17d44>
   29850:	str	r4, [r9, #40]	; 0x28
   29854:	add	r3, sp, #120	; 0x78
   29858:	ldm	r3, {r0, r1}
   2985c:	stm	r8, {r0, r1}
   29860:	mov	r3, #1
   29864:	strb	r3, [r8, #4]
   29868:	mov	r6, fp
   2986c:	b	299dc <__assert_fail@plt+0x17e38>
   29870:	mov	r3, #10
   29874:	str	r3, [sl]
   29878:	mov	r6, #0
   2987c:	b	299dc <__assert_fail@plt+0x17e38>
   29880:	ldr	r2, [sp, #24]
   29884:	mov	r1, r8
   29888:	mov	r0, r9
   2988c:	bl	20bac <__assert_fail@plt+0xf008>
   29890:	mov	r7, r0
   29894:	cmn	r5, #2
   29898:	cmnne	r0, #2
   2989c:	beq	297f4 <__assert_fail@plt+0x17c50>
   298a0:	cmn	r0, #1
   298a4:	cmpne	r5, r0
   298a8:	bgt	29900 <__assert_fail@plt+0x17d5c>
   298ac:	ldrb	r3, [r8, #4]
   298b0:	cmp	r3, #24
   298b4:	bne	29900 <__assert_fail@plt+0x17d5c>
   298b8:	cmn	r7, #1
   298bc:	beq	29910 <__assert_fail@plt+0x17d6c>
   298c0:	ldr	r3, [pc, #500]	; 29abc <__assert_fail@plt+0x17f18>
   298c4:	cmp	r7, r3
   298c8:	movle	r3, #0
   298cc:	movgt	r3, #1
   298d0:	cmp	r3, #0
   298d4:	movne	r3, #15
   298d8:	strne	r3, [sl]
   298dc:	movne	r6, #0
   298e0:	beq	29928 <__assert_fail@plt+0x17d84>
   298e4:	b	299dc <__assert_fail@plt+0x17e38>
   298e8:	mov	r3, #10
   298ec:	str	r3, [sl]
   298f0:	mov	r6, #0
   298f4:	b	299dc <__assert_fail@plt+0x17e38>
   298f8:	mov	r5, r0
   298fc:	b	298ac <__assert_fail@plt+0x17d08>
   29900:	mov	r3, #10
   29904:	str	r3, [sl]
   29908:	mov	r6, #0
   2990c:	b	299dc <__assert_fail@plt+0x17e38>
   29910:	ldr	r3, [pc, #420]	; 29abc <__assert_fail@plt+0x17f18>
   29914:	cmp	r5, r3
   29918:	movle	r3, #0
   2991c:	movgt	r3, #1
   29920:	b	298d0 <__assert_fail@plt+0x17d2c>
   29924:	mov	r7, #1
   29928:	ldr	r2, [sp, #24]
   2992c:	mov	r1, r9
   29930:	mov	r0, r8
   29934:	bl	20b90 <__assert_fail@plt+0xefec>
   29938:	cmp	fp, #0
   2993c:	beq	29a68 <__assert_fail@plt+0x17ec4>
   29940:	orrs	r3, r5, r7
   29944:	bne	29b30 <__assert_fail@plt+0x17f8c>
   29948:	mov	r2, #0
   2994c:	ldr	r1, [pc, #332]	; 29aa0 <__assert_fail@plt+0x17efc>
   29950:	mov	r0, fp
   29954:	bl	1eea4 <__assert_fail@plt+0xd300>
   29958:	mov	r6, #0
   2995c:	b	299dc <__assert_fail@plt+0x17e38>
   29960:	cmp	r5, #1
   29964:	ble	29a48 <__assert_fail@plt+0x17ea4>
   29968:	str	fp, [sp, #28]
   2996c:	mov	r4, fp
   29970:	mov	r6, #2
   29974:	ldr	r1, [sp, #20]
   29978:	mov	r0, r4
   2997c:	bl	1f154 <__assert_fail@plt+0xd5b0>
   29980:	mov	r4, r0
   29984:	mov	r3, #16
   29988:	mov	r2, r0
   2998c:	ldr	r1, [sp, #28]
   29990:	ldr	r0, [sp, #20]
   29994:	bl	1f208 <__assert_fail@plt+0xd664>
   29998:	str	r0, [sp, #28]
   2999c:	cmp	r0, #0
   299a0:	cmpne	r4, #0
   299a4:	beq	299d0 <__assert_fail@plt+0x17e2c>
   299a8:	add	r6, r6, #1
   299ac:	cmp	r5, r6
   299b0:	bge	29974 <__assert_fail@plt+0x17dd0>
   299b4:	cmp	r5, r7
   299b8:	beq	29a70 <__assert_fail@plt+0x17ecc>
   299bc:	ldr	r1, [sp, #20]
   299c0:	mov	r0, r4
   299c4:	bl	1f154 <__assert_fail@plt+0xd5b0>
   299c8:	subs	r4, r0, #0
   299cc:	bne	29b44 <__assert_fail@plt+0x17fa0>
   299d0:	mov	r3, #12
   299d4:	str	r3, [sl]
   299d8:	mov	r6, #0
   299dc:	ldr	r2, [sl]
   299e0:	adds	r3, r2, #0
   299e4:	movne	r3, #1
   299e8:	cmp	r6, #0
   299ec:	movne	r3, #0
   299f0:	cmp	r3, #0
   299f4:	bne	29a80 <__assert_fail@plt+0x17edc>
   299f8:	ldr	r3, [sp, #24]
   299fc:	tst	r3, #16777216	; 0x1000000
   29a00:	beq	29ac8 <__assert_fail@plt+0x17f24>
   29a04:	ldrb	r3, [r8, #4]
   29a08:	mov	fp, r6
   29a0c:	cmp	r3, #23
   29a10:	cmpne	r3, #11
   29a14:	bne	29acc <__assert_fail@plt+0x17f28>
   29a18:	cmp	r6, #0
   29a1c:	beq	29a30 <__assert_fail@plt+0x17e8c>
   29a20:	mov	r2, #0
   29a24:	ldr	r1, [pc, #116]	; 29aa0 <__assert_fail@plt+0x17efc>
   29a28:	mov	r0, r6
   29a2c:	bl	1eea4 <__assert_fail@plt+0xd300>
   29a30:	mov	r3, #13
   29a34:	str	r3, [sl]
   29a38:	mov	fp, #0
   29a3c:	mov	r0, fp
   29a40:	add	sp, sp, #156	; 0x9c
   29a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29a48:	str	fp, [sp, #28]
   29a4c:	mov	r4, fp
   29a50:	b	299b4 <__assert_fail@plt+0x17e10>
   29a54:	ldr	r2, [r4, #20]
   29a58:	ldr	r1, [pc, #96]	; 29ac0 <__assert_fail@plt+0x17f1c>
   29a5c:	mov	r0, r4
   29a60:	bl	1eea4 <__assert_fail@plt+0xd300>
   29a64:	b	29b50 <__assert_fail@plt+0x17fac>
   29a68:	mov	r6, fp
   29a6c:	b	299dc <__assert_fail@plt+0x17e38>
   29a70:	ldr	r6, [sp, #28]
   29a74:	b	299dc <__assert_fail@plt+0x17e38>
   29a78:	mov	r6, fp
   29a7c:	b	299dc <__assert_fail@plt+0x17e38>
   29a80:	cmp	fp, #0
   29a84:	beq	29a3c <__assert_fail@plt+0x17e98>
   29a88:	mov	r2, #0
   29a8c:	ldr	r1, [pc, #12]	; 29aa0 <__assert_fail@plt+0x17efc>
   29a90:	mov	r0, fp
   29a94:	bl	1eea4 <__assert_fail@plt+0xd300>
   29a98:	mov	fp, #0
   29a9c:	b	29a3c <__assert_fail@plt+0x17e98>
   29aa0:	andeq	r0, r2, r0, asr #25
   29aa4:	andeq	r0, r0, pc, lsl #6
   29aa8:	mvnseq	r0, #0
   29aac:			; <UNDEFINED> instruction: 0x00030cbc
   29ab0:	andeq	r0, r3, r4, ror ip
   29ab4:	andeq	r0, r3, ip, lsl #15
   29ab8:	andeq	r0, r3, r4, lsl #25
   29abc:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   29ac0:	strdeq	lr, [r1], -r8
   29ac4:	addeq	r0, ip, r0, lsl #16
   29ac8:	mov	fp, r6
   29acc:	ldrb	r3, [r8, #4]
   29ad0:	cmp	r3, #23
   29ad4:	bhi	29a3c <__assert_fail@plt+0x17e98>
   29ad8:	cmp	r3, #18
   29adc:	movne	r5, #0
   29ae0:	moveq	r5, #1
   29ae4:	ldr	r2, [pc, #-40]	; 29ac4 <__assert_fail@plt+0x17f20>
   29ae8:	lsr	r2, r2, r3
   29aec:	tst	r2, #1
   29af0:	beq	29a3c <__assert_fail@plt+0x17e98>
   29af4:	ldr	r4, [r9, #40]	; 0x28
   29af8:	ldm	r8, {r0, r1}
   29afc:	add	r2, sp, #120	; 0x78
   29b00:	stm	r2, {r0, r1}
   29b04:	cmp	r3, #23
   29b08:	beq	297b8 <__assert_fail@plt+0x17c14>
   29b0c:	cmp	r3, #19
   29b10:	beq	29924 <__assert_fail@plt+0x17d80>
   29b14:	ldr	r2, [sp, #24]
   29b18:	mov	r1, r9
   29b1c:	mov	r0, r8
   29b20:	bl	20b90 <__assert_fail@plt+0xefec>
   29b24:	cmp	fp, #0
   29b28:	beq	29a78 <__assert_fail@plt+0x17ed4>
   29b2c:	mvn	r7, #0
   29b30:	cmp	r5, #0
   29b34:	movle	r4, fp
   29b38:	movle	r3, #0
   29b3c:	strle	r3, [sp, #28]
   29b40:	bgt	29960 <__assert_fail@plt+0x17dbc>
   29b44:	ldrb	r3, [r4, #24]
   29b48:	cmp	r3, #17
   29b4c:	beq	29a54 <__assert_fail@plt+0x17eb0>
   29b50:	cmn	r7, #1
   29b54:	moveq	r3, #11
   29b58:	movne	r3, #10
   29b5c:	mov	r2, #0
   29b60:	mov	r1, r4
   29b64:	ldr	r0, [sp, #20]
   29b68:	bl	1f208 <__assert_fail@plt+0xd664>
   29b6c:	subs	r6, r0, #0
   29b70:	beq	299d0 <__assert_fail@plt+0x17e2c>
   29b74:	add	r5, r5, #2
   29b78:	cmp	r7, r5
   29b7c:	blt	29bdc <__assert_fail@plt+0x18038>
   29b80:	ldr	r1, [sp, #20]
   29b84:	mov	r0, r4
   29b88:	bl	1f154 <__assert_fail@plt+0xd5b0>
   29b8c:	mov	r4, r0
   29b90:	mov	r3, #16
   29b94:	mov	r2, r0
   29b98:	mov	r1, r6
   29b9c:	ldr	r6, [sp, #20]
   29ba0:	mov	r0, r6
   29ba4:	bl	1f208 <__assert_fail@plt+0xd664>
   29ba8:	mov	r1, r0
   29bac:	cmp	r0, #0
   29bb0:	cmpne	r4, #0
   29bb4:	beq	299d0 <__assert_fail@plt+0x17e2c>
   29bb8:	mov	r3, #10
   29bbc:	mov	r2, #0
   29bc0:	mov	r0, r6
   29bc4:	bl	1f208 <__assert_fail@plt+0xd664>
   29bc8:	subs	r6, r0, #0
   29bcc:	beq	299d0 <__assert_fail@plt+0x17e2c>
   29bd0:	add	r5, r5, #1
   29bd4:	cmp	r7, r5
   29bd8:	bge	29b80 <__assert_fail@plt+0x17fdc>
   29bdc:	ldr	r3, [sp, #28]
   29be0:	cmp	r3, #0
   29be4:	beq	299f8 <__assert_fail@plt+0x17e54>
   29be8:	mov	r3, #16
   29bec:	mov	r2, r6
   29bf0:	ldr	r1, [sp, #28]
   29bf4:	ldr	r0, [sp, #20]
   29bf8:	bl	1f208 <__assert_fail@plt+0xd664>
   29bfc:	mov	r6, r0
   29c00:	b	299dc <__assert_fail@plt+0x17e38>
   29c04:	mov	fp, #0
   29c08:	b	29a3c <__assert_fail@plt+0x17e98>
   29c0c:	mov	fp, #0
   29c10:	b	29a3c <__assert_fail@plt+0x17e98>
   29c14:	ldr	sl, [sp, #196]	; 0xc4
   29c18:	str	r0, [sl]
   29c1c:	b	28dc4 <__assert_fail@plt+0x17220>
   29c20:	ldr	sl, [sp, #196]	; 0xc4
   29c24:	mov	r3, #11
   29c28:	b	28dc0 <__assert_fail@plt+0x1721c>
   29c2c:	ldr	sl, [sp, #196]	; 0xc4
   29c30:	mov	r3, #3
   29c34:	b	28dc0 <__assert_fail@plt+0x1721c>
   29c38:	ldr	sl, [sp, #196]	; 0xc4
   29c3c:	mov	r3, #11
   29c40:	b	28dc0 <__assert_fail@plt+0x1721c>
   29c44:	mov	r3, #0
   29c48:	ldr	r2, [sp, #196]	; 0xc4
   29c4c:	str	r3, [r2]
   29c50:	b	2905c <__assert_fail@plt+0x174b8>
   29c54:	ldr	sl, [sp, #196]	; 0xc4
   29c58:	mov	r3, #3
   29c5c:	str	r3, [sl]
   29c60:	b	28dc4 <__assert_fail@plt+0x17220>
   29c64:	ldr	sl, [sp, #196]	; 0xc4
   29c68:	mov	r3, #3
   29c6c:	str	r3, [sl]
   29c70:	b	28dc4 <__assert_fail@plt+0x17220>
   29c74:	mov	r3, #3
   29c78:	strb	r3, [sp, #124]	; 0x7c
   29c7c:	add	r3, sp, #152	; 0x98
   29c80:	str	r5, [r3, #-32]!	; 0xffffffe0
   29c84:	mov	r2, #0
   29c88:	mov	r1, r2
   29c8c:	ldr	r0, [sp, #20]
   29c90:	bl	1f094 <__assert_fail@plt+0xd4f0>
   29c94:	subs	r1, r0, #0
   29c98:	beq	29cb4 <__assert_fail@plt+0x18110>
   29c9c:	mov	r3, #10
   29ca0:	mov	r2, fp
   29ca4:	ldr	r0, [sp, #20]
   29ca8:	bl	1f208 <__assert_fail@plt+0xd664>
   29cac:	subs	fp, r0, #0
   29cb0:	bne	29474 <__assert_fail@plt+0x178d0>
   29cb4:	mov	r3, #12
   29cb8:	str	r3, [sl]
   29cbc:	b	28dc4 <__assert_fail@plt+0x17220>
   29cc0:	mov	r4, #0
   29cc4:	mov	r5, r4
   29cc8:	bl	11964 <__ctype_b_loc@plt>
   29ccc:	lsl	r7, r4, #1
   29cd0:	add	lr, r5, #24
   29cd4:	ldr	r3, [sp, #20]
   29cd8:	add	lr, r3, lr, lsl #2
   29cdc:	mov	r6, #1
   29ce0:	b	29630 <__assert_fail@plt+0x17a8c>
   29ce4:	mov	r4, #128	; 0x80
   29ce8:	mov	r5, #4
   29cec:	b	29cc8 <__assert_fail@plt+0x18124>
   29cf0:	cmp	r4, #3
   29cf4:	bne	28e40 <__assert_fail@plt+0x1729c>
   29cf8:	ldr	r0, [sp, #76]	; 0x4c
   29cfc:	bl	11988 <strlen@plt>
   29d00:	cmp	r0, #1
   29d04:	bls	28e2c <__assert_fail@plt+0x17288>
   29d08:	ldr	sl, [sp, #196]	; 0xc4
   29d0c:	mov	r3, #3
   29d10:	b	29038 <__assert_fail@plt+0x17494>
   29d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29d18:	sub	sp, sp, #20
   29d1c:	mov	fp, r0
   29d20:	mov	r9, r1
   29d24:	mov	r7, r2
   29d28:	mov	sl, r3
   29d2c:	ldr	r8, [sp, #56]	; 0x38
   29d30:	ldr	r6, [sp, #60]	; 0x3c
   29d34:	ldr	ip, [r1]
   29d38:	str	ip, [sp, #12]
   29d3c:	str	r6, [sp, #4]
   29d40:	str	r8, [sp]
   29d44:	bl	28964 <__assert_fail@plt+0x16dc0>
   29d48:	ldr	r3, [r6]
   29d4c:	mov	r4, r0
   29d50:	adds	r2, r3, #0
   29d54:	movne	r2, #1
   29d58:	cmp	r0, #0
   29d5c:	movne	r2, #0
   29d60:	cmp	r2, #0
   29d64:	beq	29db8 <__assert_fail@plt+0x18214>
   29d68:	mov	r4, #0
   29d6c:	b	29d8c <__assert_fail@plt+0x181e8>
   29d70:	cmp	r4, #0
   29d74:	beq	29d8c <__assert_fail@plt+0x181e8>
   29d78:	mov	r2, #0
   29d7c:	ldr	r1, [pc, #232]	; 29e6c <__assert_fail@plt+0x182c8>
   29d80:	mov	r0, r4
   29d84:	bl	1eea4 <__assert_fail@plt+0xd300>
   29d88:	mov	r4, #0
   29d8c:	mov	r0, r4
   29d90:	add	sp, sp, #20
   29d94:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29d98:	mov	r3, #16
   29d9c:	mov	r2, r5
   29da0:	mov	r1, r4
   29da4:	ldr	r0, [sp, #12]
   29da8:	bl	1f208 <__assert_fail@plt+0xd664>
   29dac:	cmp	r0, #0
   29db0:	beq	29e34 <__assert_fail@plt+0x18290>
   29db4:	mov	r4, r0
   29db8:	ldrb	r3, [r7, #4]
   29dbc:	and	r2, r3, #247	; 0xf7
   29dc0:	cmp	r2, #2
   29dc4:	beq	29d8c <__assert_fail@plt+0x181e8>
   29dc8:	subs	r3, r3, #9
   29dcc:	movne	r3, #1
   29dd0:	cmp	r8, #0
   29dd4:	orreq	r3, r3, #1
   29dd8:	cmp	r3, #0
   29ddc:	beq	29d8c <__assert_fail@plt+0x181e8>
   29de0:	str	r6, [sp, #4]
   29de4:	str	r8, [sp]
   29de8:	mov	r3, sl
   29dec:	mov	r2, r7
   29df0:	mov	r1, r9
   29df4:	mov	r0, fp
   29df8:	bl	28964 <__assert_fail@plt+0x16dc0>
   29dfc:	ldr	r3, [r6]
   29e00:	mov	r5, r0
   29e04:	adds	r2, r3, #0
   29e08:	movne	r2, #1
   29e0c:	cmp	r0, #0
   29e10:	movne	r2, #0
   29e14:	cmp	r2, #0
   29e18:	bne	29d70 <__assert_fail@plt+0x181cc>
   29e1c:	cmp	r4, #0
   29e20:	cmpne	r5, #0
   29e24:	bne	29d98 <__assert_fail@plt+0x181f4>
   29e28:	cmp	r4, #0
   29e2c:	moveq	r4, r5
   29e30:	b	29db8 <__assert_fail@plt+0x18214>
   29e34:	mov	fp, r0
   29e38:	ldr	r7, [pc, #44]	; 29e6c <__assert_fail@plt+0x182c8>
   29e3c:	mov	r2, #0
   29e40:	mov	r1, r7
   29e44:	mov	r0, r5
   29e48:	bl	1eea4 <__assert_fail@plt+0xd300>
   29e4c:	mov	r2, #0
   29e50:	mov	r1, r7
   29e54:	mov	r0, r4
   29e58:	bl	1eea4 <__assert_fail@plt+0xd300>
   29e5c:	mov	r3, #12
   29e60:	str	r3, [r6]
   29e64:	mov	r4, fp
   29e68:	b	29d8c <__assert_fail@plt+0x181e8>
   29e6c:	andeq	r0, r2, r0, asr #25
   29e70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e74:	sub	sp, sp, #28
   29e78:	str	r0, [sp, #12]
   29e7c:	str	r1, [sp, #16]
   29e80:	mov	r4, r2
   29e84:	mov	r6, r3
   29e88:	str	r3, [sp, #20]
   29e8c:	ldr	r9, [sp, #64]	; 0x40
   29e90:	ldr	r8, [sp, #68]	; 0x44
   29e94:	ldr	r5, [r1]
   29e98:	ldr	fp, [r5, #84]	; 0x54
   29e9c:	str	r8, [sp, #4]
   29ea0:	str	r9, [sp]
   29ea4:	bl	29d14 <__assert_fail@plt+0x18170>
   29ea8:	ldr	r3, [r8]
   29eac:	mov	r7, r0
   29eb0:	adds	r2, r3, #0
   29eb4:	movne	r2, #1
   29eb8:	cmp	r0, #0
   29ebc:	movne	r2, #0
   29ec0:	cmp	r2, #0
   29ec4:	bne	29fc0 <__assert_fail@plt+0x1841c>
   29ec8:	orr	sl, r6, #8388608	; 0x800000
   29ecc:	b	29f38 <__assert_fail@plt+0x18394>
   29ed0:	ldr	r6, [r5, #84]	; 0x54
   29ed4:	str	fp, [r5, #84]	; 0x54
   29ed8:	str	r8, [sp, #4]
   29edc:	str	r9, [sp]
   29ee0:	ldr	r3, [sp, #20]
   29ee4:	mov	r2, r4
   29ee8:	ldr	r1, [sp, #16]
   29eec:	ldr	r0, [sp, #12]
   29ef0:	bl	29d14 <__assert_fail@plt+0x18170>
   29ef4:	ldr	r3, [r8]
   29ef8:	mov	r2, r0
   29efc:	adds	r1, r3, #0
   29f00:	movne	r1, #1
   29f04:	cmp	r0, #0
   29f08:	movne	r1, #0
   29f0c:	cmp	r1, #0
   29f10:	bne	29f84 <__assert_fail@plt+0x183e0>
   29f14:	ldr	r3, [r5, #84]	; 0x54
   29f18:	orr	r6, r3, r6
   29f1c:	str	r6, [r5, #84]	; 0x54
   29f20:	mov	r3, #10
   29f24:	mov	r1, r7
   29f28:	mov	r0, r5
   29f2c:	bl	1f208 <__assert_fail@plt+0xd664>
   29f30:	subs	r7, r0, #0
   29f34:	beq	29fac <__assert_fail@plt+0x18408>
   29f38:	ldrb	r3, [r4, #4]
   29f3c:	cmp	r3, #10
   29f40:	bne	29fb4 <__assert_fail@plt+0x18410>
   29f44:	mov	r2, sl
   29f48:	ldr	r1, [sp, #12]
   29f4c:	mov	r0, r4
   29f50:	bl	20b90 <__assert_fail@plt+0xefec>
   29f54:	ldrb	r2, [r4, #4]
   29f58:	and	r3, r2, #247	; 0xf7
   29f5c:	cmp	r3, #2
   29f60:	beq	29fa4 <__assert_fail@plt+0x18400>
   29f64:	clz	r3, r9
   29f68:	lsr	r3, r3, #5
   29f6c:	cmp	r2, #9
   29f70:	orrne	r3, r3, #1
   29f74:	cmp	r3, #0
   29f78:	bne	29ed0 <__assert_fail@plt+0x1832c>
   29f7c:	mov	r2, #0
   29f80:	b	29f20 <__assert_fail@plt+0x1837c>
   29f84:	cmp	r7, #0
   29f88:	beq	29fb4 <__assert_fail@plt+0x18410>
   29f8c:	mov	r2, #0
   29f90:	ldr	r1, [pc, #48]	; 29fc8 <__assert_fail@plt+0x18424>
   29f94:	mov	r0, r7
   29f98:	bl	1eea4 <__assert_fail@plt+0xd300>
   29f9c:	mov	r7, #0
   29fa0:	b	29fb4 <__assert_fail@plt+0x18410>
   29fa4:	mov	r2, #0
   29fa8:	b	29f20 <__assert_fail@plt+0x1837c>
   29fac:	mov	r3, #12
   29fb0:	str	r3, [r8]
   29fb4:	mov	r0, r7
   29fb8:	add	sp, sp, #28
   29fbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29fc0:	mov	r7, #0
   29fc4:	b	29fb4 <__assert_fail@plt+0x18410>
   29fc8:	andeq	r0, r2, r0, asr #25
   29fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29fd0:	sub	sp, sp, #124	; 0x7c
   29fd4:	mov	sl, r0
   29fd8:	str	r1, [sp, #12]
   29fdc:	mov	r9, r2
   29fe0:	mov	fp, r3
   29fe4:	mov	r2, #0
   29fe8:	str	r2, [sp, #116]	; 0x74
   29fec:	ldrb	r3, [r0, #28]
   29ff0:	str	fp, [r0, #12]
   29ff4:	str	r2, [r0, #8]
   29ff8:	str	r2, [r0, #24]
   29ffc:	and	r3, r3, #144	; 0x90
   2a000:	strb	r3, [r0, #28]
   2a004:	ldr	r6, [r0]
   2a008:	ldr	r3, [r0, #4]
   2a00c:	cmp	r3, #159	; 0x9f
   2a010:	bls	2a26c <__assert_fail@plt+0x186c8>
   2a014:	mov	r2, #160	; 0xa0
   2a018:	str	r2, [sl, #8]
   2a01c:	mov	r1, #0
   2a020:	mov	r0, r6
   2a024:	bl	119e8 <memset@plt>
   2a028:	mov	r3, #31
   2a02c:	str	r3, [r6, #64]	; 0x40
   2a030:	ldr	r3, [pc, #3044]	; 2ac1c <__assert_fail@plt+0x19078>
   2a034:	cmp	r9, r3
   2a038:	bhi	2ab54 <__assert_fail@plt+0x18fb0>
   2a03c:	add	r0, r9, #1
   2a040:	str	r0, [r6, #4]
   2a044:	lsl	r0, r0, #3
   2a048:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a04c:	str	r0, [r6]
   2a050:	cmp	r9, #0
   2a054:	beq	2a290 <__assert_fail@plt+0x186ec>
   2a058:	mov	r4, #1
   2a05c:	lsl	r4, r4, #1
   2a060:	cmp	r9, r4
   2a064:	bcs	2a05c <__assert_fail@plt+0x184b8>
   2a068:	mov	r1, r4
   2a06c:	mov	r0, #12
   2a070:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   2a074:	str	r0, [r6, #32]
   2a078:	sub	r4, r4, #1
   2a07c:	str	r4, [r6, #68]	; 0x44
   2a080:	bl	11880 <__ctype_get_mb_cur_max@plt>
   2a084:	str	r0, [r6, #92]	; 0x5c
   2a088:	mov	r0, #14
   2a08c:	bl	11a84 <nl_langinfo@plt>
   2a090:	ldrb	r3, [r0]
   2a094:	and	r3, r3, #223	; 0xdf
   2a098:	cmp	r3, #85	; 0x55
   2a09c:	bne	2a0ec <__assert_fail@plt+0x18548>
   2a0a0:	ldrb	r3, [r0, #1]
   2a0a4:	and	r3, r3, #223	; 0xdf
   2a0a8:	cmp	r3, #84	; 0x54
   2a0ac:	bne	2a0ec <__assert_fail@plt+0x18548>
   2a0b0:	ldrb	r3, [r0, #2]
   2a0b4:	and	r3, r3, #223	; 0xdf
   2a0b8:	cmp	r3, #70	; 0x46
   2a0bc:	bne	2a0ec <__assert_fail@plt+0x18548>
   2a0c0:	ldrb	r3, [r0, #3]
   2a0c4:	cmp	r3, #45	; 0x2d
   2a0c8:	moveq	r3, #4
   2a0cc:	movne	r3, #3
   2a0d0:	ldr	r1, [pc, #2888]	; 2ac20 <__assert_fail@plt+0x1907c>
   2a0d4:	add	r0, r0, r3
   2a0d8:	bl	1170c <strcmp@plt>
   2a0dc:	cmp	r0, #0
   2a0e0:	ldrbeq	r3, [r6, #88]	; 0x58
   2a0e4:	orreq	r3, r3, #4
   2a0e8:	strbeq	r3, [r6, #88]	; 0x58
   2a0ec:	ldrb	r3, [r6, #88]	; 0x58
   2a0f0:	bic	r3, r3, #8
   2a0f4:	strb	r3, [r6, #88]	; 0x58
   2a0f8:	ldr	r3, [r6, #92]	; 0x5c
   2a0fc:	cmp	r3, #1
   2a100:	ble	2a118 <__assert_fail@plt+0x18574>
   2a104:	ldrb	r3, [r6, #88]	; 0x58
   2a108:	tst	r3, #4
   2a10c:	beq	2a298 <__assert_fail@plt+0x186f4>
   2a110:	ldr	r3, [pc, #2828]	; 2ac24 <__assert_fail@plt+0x19080>
   2a114:	str	r3, [r6, #60]	; 0x3c
   2a118:	ldr	r3, [r6]
   2a11c:	cmp	r3, #0
   2a120:	beq	2ab54 <__assert_fail@plt+0x18fb0>
   2a124:	ldr	r3, [r6, #32]
   2a128:	cmp	r3, #0
   2a12c:	beq	2ab54 <__assert_fail@plt+0x18fb0>
   2a130:	mov	r3, #0
   2a134:	str	r3, [sp, #116]	; 0x74
   2a138:	mov	r3, #1
   2a13c:	ldr	r2, [pc, #2788]	; 2ac28 <__assert_fail@plt+0x19084>
   2a140:	cmp	r2, #0
   2a144:	moveq	r3, #0
   2a148:	mov	r2, #1
   2a14c:	ldr	r1, [pc, #2776]	; 2ac2c <__assert_fail@plt+0x19088>
   2a150:	cmp	r1, #0
   2a154:	moveq	r2, #0
   2a158:	orr	r3, r3, r2
   2a15c:	tst	r3, #255	; 0xff
   2a160:	bne	2a31c <__assert_fail@plt+0x18778>
   2a164:	mov	r7, r9
   2a168:	ldr	r5, [sl, #20]
   2a16c:	ands	r8, fp, #4194304	; 0x400000
   2a170:	movne	r4, #1
   2a174:	moveq	r4, #0
   2a178:	mov	r2, #84	; 0x54
   2a17c:	mov	r1, #0
   2a180:	add	r0, sp, #32
   2a184:	bl	119e8 <memset@plt>
   2a188:	ldr	r3, [sp, #12]
   2a18c:	str	r3, [sp, #32]
   2a190:	str	r9, [sp, #80]	; 0x50
   2a194:	str	r9, [sp, #76]	; 0x4c
   2a198:	str	r5, [sp, #96]	; 0x60
   2a19c:	strb	r4, [sp, #104]	; 0x68
   2a1a0:	cmp	r5, #0
   2a1a4:	orrne	r4, r4, #1
   2a1a8:	strb	r4, [sp, #107]	; 0x6b
   2a1ac:	ldr	r3, [r6, #92]	; 0x5c
   2a1b0:	str	r3, [sp, #112]	; 0x70
   2a1b4:	ldrb	r3, [r6, #88]	; 0x58
   2a1b8:	lsr	r2, r3, #2
   2a1bc:	and	r2, r2, #1
   2a1c0:	strb	r2, [sp, #105]	; 0x69
   2a1c4:	lsr	r3, r3, #3
   2a1c8:	and	r3, r3, #1
   2a1cc:	strb	r3, [sp, #106]	; 0x6a
   2a1d0:	str	r9, [sp, #88]	; 0x58
   2a1d4:	str	r9, [sp, #84]	; 0x54
   2a1d8:	cmp	r9, #0
   2a1dc:	ble	2a1f4 <__assert_fail@plt+0x18650>
   2a1e0:	add	r1, r9, #1
   2a1e4:	add	r0, sp, #32
   2a1e8:	bl	1ef80 <__assert_fail@plt+0xd3dc>
   2a1ec:	cmp	r0, #0
   2a1f0:	bne	2a264 <__assert_fail@plt+0x186c0>
   2a1f4:	ldrb	r3, [sp, #107]	; 0x6b
   2a1f8:	cmp	r3, #0
   2a1fc:	ldrne	r3, [sp, #36]	; 0x24
   2a200:	ldreq	r3, [sp, #12]
   2a204:	str	r3, [sp, #36]	; 0x24
   2a208:	cmp	r8, #0
   2a20c:	beq	2a354 <__assert_fail@plt+0x187b0>
   2a210:	ldr	r3, [r6, #92]	; 0x5c
   2a214:	cmp	r3, #1
   2a218:	ble	2a348 <__assert_fail@plt+0x187a4>
   2a21c:	add	r0, sp, #32
   2a220:	bl	1fab0 <__assert_fail@plt+0xdf0c>
   2a224:	cmp	r0, #0
   2a228:	bne	2a264 <__assert_fail@plt+0x186c0>
   2a22c:	ldr	r3, [sp, #64]	; 0x40
   2a230:	cmp	r7, r3
   2a234:	ble	2a37c <__assert_fail@plt+0x187d8>
   2a238:	ldr	r1, [sp, #68]	; 0x44
   2a23c:	ldr	r2, [r6, #92]	; 0x5c
   2a240:	ldr	r3, [sp, #60]	; 0x3c
   2a244:	add	r3, r3, r2
   2a248:	cmp	r1, r3
   2a24c:	bgt	2a37c <__assert_fail@plt+0x187d8>
   2a250:	lsl	r1, r1, #1
   2a254:	add	r0, sp, #32
   2a258:	bl	1ef80 <__assert_fail@plt+0xd3dc>
   2a25c:	cmp	r0, #0
   2a260:	beq	2a21c <__assert_fail@plt+0x18678>
   2a264:	str	r0, [sp, #116]	; 0x74
   2a268:	b	2abbc <__assert_fail@plt+0x19018>
   2a26c:	mov	r1, #160	; 0xa0
   2a270:	mov	r0, r6
   2a274:	bl	2d434 <__assert_fail@plt+0x1b890>
   2a278:	subs	r6, r0, #0
   2a27c:	beq	2ab4c <__assert_fail@plt+0x18fa8>
   2a280:	mov	r3, #160	; 0xa0
   2a284:	str	r3, [sl, #4]
   2a288:	str	r6, [sl]
   2a28c:	b	2a014 <__assert_fail@plt+0x18470>
   2a290:	mov	r4, #1
   2a294:	b	2a068 <__assert_fail@plt+0x184c4>
   2a298:	mov	r1, #1
   2a29c:	mov	r0, #32
   2a2a0:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   2a2a4:	str	r0, [r6, #60]	; 0x3c
   2a2a8:	cmp	r0, #0
   2a2ac:	beq	2ab54 <__assert_fail@plt+0x18fb0>
   2a2b0:	mov	r7, #0
   2a2b4:	mov	r8, #1
   2a2b8:	b	2a310 <__assert_fail@plt+0x1876c>
   2a2bc:	add	r5, r5, #1
   2a2c0:	add	r4, r4, #1
   2a2c4:	cmp	r5, #32
   2a2c8:	beq	2a304 <__assert_fail@plt+0x18760>
   2a2cc:	mov	r0, r4
   2a2d0:	bl	119f4 <btowc@plt>
   2a2d4:	cmn	r0, #1
   2a2d8:	ldrne	r2, [r6, #60]	; 0x3c
   2a2dc:	ldrne	r3, [r2, r7]
   2a2e0:	orrne	r3, r3, r8, lsl r5
   2a2e4:	strne	r3, [r2, r7]
   2a2e8:	bics	r3, r4, #127	; 0x7f
   2a2ec:	bne	2a2bc <__assert_fail@plt+0x18718>
   2a2f0:	cmp	r0, r4
   2a2f4:	ldrbne	r3, [r6, #88]	; 0x58
   2a2f8:	orrne	r3, r3, #8
   2a2fc:	strbne	r3, [r6, #88]	; 0x58
   2a300:	b	2a2bc <__assert_fail@plt+0x18718>
   2a304:	add	r7, r7, #4
   2a308:	cmp	r7, #32
   2a30c:	beq	2a118 <__assert_fail@plt+0x18574>
   2a310:	lsl	r4, r7, #3
   2a314:	mov	r5, #0
   2a318:	b	2a2cc <__assert_fail@plt+0x18728>
   2a31c:	mov	r1, #0
   2a320:	add	r0, r6, #136	; 0x88
   2a324:	bl	11790 <pthread_mutex_init@plt>
   2a328:	cmp	r0, #0
   2a32c:	movne	r3, #12
   2a330:	strne	r3, [sp, #116]	; 0x74
   2a334:	bne	2ab5c <__assert_fail@plt+0x18fb8>
   2a338:	ldr	r3, [sp, #116]	; 0x74
   2a33c:	cmp	r3, #0
   2a340:	beq	2a164 <__assert_fail@plt+0x185c0>
   2a344:	b	2ab5c <__assert_fail@plt+0x18fb8>
   2a348:	add	r0, sp, #32
   2a34c:	bl	20070 <__assert_fail@plt+0xe4cc>
   2a350:	b	2a37c <__assert_fail@plt+0x187d8>
   2a354:	ldr	r3, [r6, #92]	; 0x5c
   2a358:	cmp	r3, #1
   2a35c:	bgt	2a374 <__assert_fail@plt+0x187d0>
   2a360:	cmp	r4, #0
   2a364:	beq	2a5d4 <__assert_fail@plt+0x18a30>
   2a368:	add	r0, sp, #32
   2a36c:	bl	1e3a4 <__assert_fail@plt+0xc800>
   2a370:	b	2a37c <__assert_fail@plt+0x187d8>
   2a374:	add	r0, sp, #32
   2a378:	bl	1f54c <__assert_fail@plt+0xd9a8>
   2a37c:	mov	r4, #0
   2a380:	str	r4, [sp, #116]	; 0x74
   2a384:	str	r4, [sl, #24]
   2a388:	ldr	r5, [sl]
   2a38c:	str	fp, [r5, #128]	; 0x80
   2a390:	orr	r2, fp, #8388608	; 0x800000
   2a394:	add	r1, sp, #32
   2a398:	add	r0, sp, #20
   2a39c:	bl	20b90 <__assert_fail@plt+0xefec>
   2a3a0:	add	r3, sp, #116	; 0x74
   2a3a4:	str	r3, [sp, #4]
   2a3a8:	str	r4, [sp]
   2a3ac:	mov	r3, fp
   2a3b0:	add	r2, sp, #20
   2a3b4:	mov	r1, sl
   2a3b8:	add	r0, sp, #32
   2a3bc:	bl	29e70 <__assert_fail@plt+0x182cc>
   2a3c0:	mov	r7, r0
   2a3c4:	ldr	r3, [sp, #116]	; 0x74
   2a3c8:	subs	r2, r3, r4
   2a3cc:	movne	r2, #1
   2a3d0:	cmp	r0, r4
   2a3d4:	movne	r2, #0
   2a3d8:	cmp	r2, r4
   2a3dc:	bne	2ab78 <__assert_fail@plt+0x18fd4>
   2a3e0:	mov	r3, #2
   2a3e4:	mov	r2, #0
   2a3e8:	mov	r1, r2
   2a3ec:	mov	r0, r5
   2a3f0:	bl	1f208 <__assert_fail@plt+0xd664>
   2a3f4:	mov	r4, r0
   2a3f8:	cmp	r7, #0
   2a3fc:	beq	2a414 <__assert_fail@plt+0x18870>
   2a400:	mov	r3, #16
   2a404:	mov	r2, r4
   2a408:	mov	r1, r7
   2a40c:	mov	r0, r5
   2a410:	bl	1f208 <__assert_fail@plt+0xd664>
   2a414:	cmp	r0, #0
   2a418:	cmpne	r4, #0
   2a41c:	moveq	r3, #12
   2a420:	streq	r3, [sp, #116]	; 0x74
   2a424:	beq	2ab78 <__assert_fail@plt+0x18fd4>
   2a428:	str	r0, [r6, #52]	; 0x34
   2a42c:	cmp	r0, #0
   2a430:	beq	2abbc <__assert_fail@plt+0x19018>
   2a434:	ldr	r4, [sl]
   2a438:	ldr	r0, [r4, #4]
   2a43c:	lsl	r0, r0, #2
   2a440:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a444:	str	r0, [r4, #12]
   2a448:	ldr	r0, [r4, #4]
   2a44c:	lsl	r0, r0, #2
   2a450:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a454:	str	r0, [r4, #16]
   2a458:	ldr	r0, [r4, #4]
   2a45c:	add	r0, r0, r0, lsl #1
   2a460:	lsl	r0, r0, #2
   2a464:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a468:	str	r0, [r4, #20]
   2a46c:	ldr	r0, [r4, #4]
   2a470:	add	r0, r0, r0, lsl #1
   2a474:	lsl	r0, r0, #2
   2a478:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a47c:	str	r0, [r4, #24]
   2a480:	ldr	r3, [r4, #12]
   2a484:	cmp	r3, #0
   2a488:	beq	2ab84 <__assert_fail@plt+0x18fe0>
   2a48c:	ldr	r3, [r4, #16]
   2a490:	cmp	r3, #0
   2a494:	beq	2abb4 <__assert_fail@plt+0x19010>
   2a498:	ldr	fp, [r4, #20]
   2a49c:	cmp	r0, #0
   2a4a0:	cmpne	fp, #0
   2a4a4:	moveq	fp, #1
   2a4a8:	movne	fp, #0
   2a4ac:	beq	2ab8c <__assert_fail@plt+0x18fe8>
   2a4b0:	ldr	r0, [sl, #24]
   2a4b4:	lsl	r0, r0, #2
   2a4b8:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a4bc:	str	r0, [r4, #132]	; 0x84
   2a4c0:	cmp	r0, #0
   2a4c4:	beq	2a534 <__assert_fail@plt+0x18990>
   2a4c8:	ldr	r3, [sl, #24]
   2a4cc:	cmp	r3, #0
   2a4d0:	beq	2a4f0 <__assert_fail@plt+0x1894c>
   2a4d4:	mov	r3, #0
   2a4d8:	ldr	r2, [r4, #132]	; 0x84
   2a4dc:	str	r3, [r2, r3, lsl #2]
   2a4e0:	add	r3, r3, #1
   2a4e4:	ldr	r2, [sl, #24]
   2a4e8:	cmp	r3, r2
   2a4ec:	bcc	2a4d8 <__assert_fail@plt+0x18934>
   2a4f0:	mov	r2, r4
   2a4f4:	ldr	r1, [pc, #1844]	; 2ac30 <__assert_fail@plt+0x1908c>
   2a4f8:	ldr	r0, [r4, #52]	; 0x34
   2a4fc:	bl	1ef18 <__assert_fail@plt+0xd374>
   2a500:	ldr	r1, [sl, #24]
   2a504:	cmp	r1, #0
   2a508:	beq	2a5e8 <__assert_fail@plt+0x18a44>
   2a50c:	ldr	r0, [r4, #132]	; 0x84
   2a510:	ldr	r3, [r0]
   2a514:	cmp	r3, #0
   2a518:	bne	2a534 <__assert_fail@plt+0x18990>
   2a51c:	add	r3, r3, #1
   2a520:	cmp	r1, r3
   2a524:	bls	2a5e4 <__assert_fail@plt+0x18a40>
   2a528:	ldr	r2, [r0, r3, lsl #2]
   2a52c:	cmp	r2, r3
   2a530:	beq	2a51c <__assert_fail@plt+0x18978>
   2a534:	mov	r2, sl
   2a538:	ldr	r1, [pc, #1780]	; 2ac34 <__assert_fail@plt+0x19090>
   2a53c:	ldr	r0, [r4, #52]	; 0x34
   2a540:	bl	1eea4 <__assert_fail@plt+0xd300>
   2a544:	cmp	r0, #0
   2a548:	bne	2aba0 <__assert_fail@plt+0x18ffc>
   2a54c:	mov	r2, r4
   2a550:	ldr	r1, [pc, #1760]	; 2ac38 <__assert_fail@plt+0x19094>
   2a554:	ldr	r0, [r4, #52]	; 0x34
   2a558:	bl	1eea4 <__assert_fail@plt+0xd300>
   2a55c:	cmp	r0, #0
   2a560:	bne	2aba0 <__assert_fail@plt+0x18ffc>
   2a564:	mov	r2, r4
   2a568:	ldr	r1, [pc, #1740]	; 2ac3c <__assert_fail@plt+0x19098>
   2a56c:	ldr	r0, [r4, #52]	; 0x34
   2a570:	bl	1ef18 <__assert_fail@plt+0xd374>
   2a574:	mov	r2, r4
   2a578:	ldr	r1, [pc, #1728]	; 2ac40 <__assert_fail@plt+0x1909c>
   2a57c:	ldr	r0, [r4, #52]	; 0x34
   2a580:	bl	1ef18 <__assert_fail@plt+0xd374>
   2a584:	cmp	r0, #0
   2a588:	bne	2aba0 <__assert_fail@plt+0x18ffc>
   2a58c:	mov	r5, fp
   2a590:	mov	r7, #0
   2a594:	add	r9, r7, r7, lsl #1
   2a598:	lsl	r9, r9, #2
   2a59c:	ldr	r3, [r4, #24]
   2a5a0:	add	r3, r3, r9
   2a5a4:	ldr	r3, [r3, #4]
   2a5a8:	cmp	r3, #0
   2a5ac:	beq	2a5fc <__assert_fail@plt+0x18a58>
   2a5b0:	add	r7, r7, #1
   2a5b4:	ldr	r3, [r4, #8]
   2a5b8:	cmp	r3, r7
   2a5bc:	bne	2a594 <__assert_fail@plt+0x189f0>
   2a5c0:	cmp	r5, #0
   2a5c4:	beq	2a63c <__assert_fail@plt+0x18a98>
   2a5c8:	mov	r5, fp
   2a5cc:	mov	r7, #0
   2a5d0:	b	2a594 <__assert_fail@plt+0x189f0>
   2a5d4:	ldr	r3, [sp, #68]	; 0x44
   2a5d8:	str	r3, [sp, #60]	; 0x3c
   2a5dc:	str	r3, [sp, #64]	; 0x40
   2a5e0:	b	2a37c <__assert_fail@plt+0x187d8>
   2a5e4:	bne	2a534 <__assert_fail@plt+0x18990>
   2a5e8:	ldr	r0, [r4, #132]	; 0x84
   2a5ec:	bl	17204 <__assert_fail@plt+0x5660>
   2a5f0:	mov	r3, #0
   2a5f4:	str	r3, [r4, #132]	; 0x84
   2a5f8:	b	2a534 <__assert_fail@plt+0x18990>
   2a5fc:	mov	r3, #1
   2a600:	mov	r2, r7
   2a604:	mov	r1, r4
   2a608:	add	r0, sp, #20
   2a60c:	bl	21eec <__assert_fail@plt+0x10348>
   2a610:	cmp	r0, #0
   2a614:	bne	2abb8 <__assert_fail@plt+0x19014>
   2a618:	ldr	r3, [r4, #24]
   2a61c:	add	r9, r3, r9
   2a620:	ldr	r3, [r9, #4]
   2a624:	cmp	r3, #0
   2a628:	bne	2a5b0 <__assert_fail@plt+0x18a0c>
   2a62c:	ldr	r0, [sp, #28]
   2a630:	bl	17204 <__assert_fail@plt+0x5660>
   2a634:	mov	r5, #1
   2a638:	b	2a5b0 <__assert_fail@plt+0x18a0c>
   2a63c:	ldrb	r3, [sl, #28]
   2a640:	tst	r3, #16
   2a644:	beq	2a7b0 <__assert_fail@plt+0x18c0c>
   2a648:	ldr	r3, [r4, #76]	; 0x4c
   2a64c:	cmp	r3, #0
   2a650:	beq	2a734 <__assert_fail@plt+0x18b90>
   2a654:	ldr	r0, [r4, #8]
   2a658:	add	r0, r0, r0, lsl #1
   2a65c:	lsl	r0, r0, #2
   2a660:	bl	2d404 <__assert_fail@plt+0x1b860>
   2a664:	str	r0, [r4, #28]
   2a668:	cmp	r0, #0
   2a66c:	beq	2ab94 <__assert_fail@plt+0x18ff0>
   2a670:	ldr	r3, [r4, #8]
   2a674:	cmp	r3, #0
   2a678:	beq	2aba8 <__assert_fail@plt+0x19004>
   2a67c:	mov	r3, #0
   2a680:	mov	r1, r3
   2a684:	mov	r2, r3
   2a688:	ldr	ip, [r4, #28]
   2a68c:	add	r0, ip, r3
   2a690:	str	r2, [ip, r3]
   2a694:	str	r2, [r0, #4]
   2a698:	str	r2, [r0, #8]
   2a69c:	add	r1, r1, #1
   2a6a0:	ldr	r0, [r4, #8]
   2a6a4:	add	r3, r3, #12
   2a6a8:	cmp	r1, r0
   2a6ac:	bcc	2a688 <__assert_fail@plt+0x18ae4>
   2a6b0:	cmp	r0, #0
   2a6b4:	beq	2a734 <__assert_fail@plt+0x18b90>
   2a6b8:	mov	fp, #0
   2a6bc:	str	r5, [sp, #12]
   2a6c0:	mov	r5, fp
   2a6c4:	ldr	r3, [r4, #24]
   2a6c8:	add	r3, r3, fp
   2a6cc:	ldr	r9, [r3, #8]
   2a6d0:	ldr	r3, [r3, #4]
   2a6d4:	cmp	r3, #0
   2a6d8:	ble	2a71c <__assert_fail@plt+0x18b78>
   2a6dc:	sub	r9, r9, #4
   2a6e0:	mov	r7, #0
   2a6e4:	ldr	r0, [r9, #4]!
   2a6e8:	add	r0, r0, r0, lsl #1
   2a6ec:	ldr	r3, [r4, #28]
   2a6f0:	mov	r1, r5
   2a6f4:	add	r0, r3, r0, lsl #2
   2a6f8:	bl	1f030 <__assert_fail@plt+0xd48c>
   2a6fc:	cmp	r0, #0
   2a700:	beq	2ab9c <__assert_fail@plt+0x18ff8>
   2a704:	add	r7, r7, #1
   2a708:	ldr	r3, [r4, #24]
   2a70c:	add	r3, r3, fp
   2a710:	ldr	r3, [r3, #4]
   2a714:	cmp	r7, r3
   2a718:	blt	2a6e4 <__assert_fail@plt+0x18b40>
   2a71c:	add	r5, r5, #1
   2a720:	add	fp, fp, #12
   2a724:	ldr	r3, [r4, #8]
   2a728:	cmp	r5, r3
   2a72c:	bcc	2a6c4 <__assert_fail@plt+0x18b20>
   2a730:	ldr	r5, [sp, #12]
   2a734:	mov	r3, #0
   2a738:	str	r3, [sp, #116]	; 0x74
   2a73c:	ldrb	r3, [r6, #88]	; 0x58
   2a740:	clz	r8, r8
   2a744:	lsr	r8, r8, #5
   2a748:	ands	r8, r8, r3, lsr #2
   2a74c:	beq	2a75c <__assert_fail@plt+0x18bb8>
   2a750:	ldr	r3, [sl, #20]
   2a754:	cmp	r3, #0
   2a758:	beq	2a7cc <__assert_fail@plt+0x18c28>
   2a75c:	ldr	r3, [r6, #52]	; 0x34
   2a760:	ldr	r3, [r3, #12]
   2a764:	ldr	r1, [r3, #28]
   2a768:	str	r1, [r6, #72]	; 0x48
   2a76c:	add	r1, r1, r1, lsl #1
   2a770:	ldr	r3, [r6, #24]
   2a774:	add	r1, r3, r1, lsl #2
   2a778:	add	r0, sp, #20
   2a77c:	bl	1f8a8 <__assert_fail@plt+0xdd04>
   2a780:	mov	r5, r0
   2a784:	str	r0, [sp, #16]
   2a788:	cmp	r0, #0
   2a78c:	bne	2aa60 <__assert_fail@plt+0x18ebc>
   2a790:	ldr	r3, [r6, #76]	; 0x4c
   2a794:	cmp	r3, #0
   2a798:	ble	2aa1c <__assert_fail@plt+0x18e78>
   2a79c:	ldr	lr, [sp, #24]
   2a7a0:	cmp	lr, #0
   2a7a4:	ble	2aa1c <__assert_fail@plt+0x18e78>
   2a7a8:	mov	r4, #0
   2a7ac:	b	2a9c4 <__assert_fail@plt+0x18e20>
   2a7b0:	ldr	r3, [sl, #24]
   2a7b4:	cmp	r3, #0
   2a7b8:	beq	2a648 <__assert_fail@plt+0x18aa4>
   2a7bc:	ldrb	r3, [r4, #88]	; 0x58
   2a7c0:	tst	r3, #1
   2a7c4:	bne	2a654 <__assert_fail@plt+0x18ab0>
   2a7c8:	b	2a648 <__assert_fail@plt+0x18aa4>
   2a7cc:	ldr	r3, [r6, #8]
   2a7d0:	cmp	r3, #0
   2a7d4:	beq	2a94c <__assert_fail@plt+0x18da8>
   2a7d8:	ldr	ip, [r6]
   2a7dc:	mov	lr, ip
   2a7e0:	mov	r0, r3
   2a7e4:	mov	r3, r5
   2a7e8:	mov	r2, #0
   2a7ec:	b	2a804 <__assert_fail@plt+0x18c60>
   2a7f0:	mov	r3, r8
   2a7f4:	add	r2, r2, #1
   2a7f8:	add	lr, lr, #8
   2a7fc:	cmp	r2, r0
   2a800:	beq	2a8c4 <__assert_fail@plt+0x18d20>
   2a804:	ldrb	r1, [lr, #4]
   2a808:	sub	r1, r1, #1
   2a80c:	cmp	r1, #11
   2a810:	ldrls	pc, [pc, r1, lsl #2]
   2a814:	b	2a8c0 <__assert_fail@plt+0x18d1c>
   2a818:	andeq	sl, r2, r0, lsl #17
   2a81c:	strdeq	sl, [r2], -r4
   2a820:	andeq	sl, r2, r8, asr #16
   2a824:	strdeq	sl, [r2], -r4
   2a828:	strdeq	sl, [r2], -r0
   2a82c:	andeq	sl, r2, ip, asr r7
   2a830:	andeq	sl, r2, r0, asr #17
   2a834:	strdeq	sl, [r2], -r4
   2a838:	strdeq	sl, [r2], -r4
   2a83c:	strdeq	sl, [r2], -r4
   2a840:	strdeq	sl, [r2], -r4
   2a844:	muleq	r2, r0, r8
   2a848:	ldr	r1, [ip, r2, lsl #3]
   2a84c:	ldr	r4, [r1, #16]
   2a850:	cmp	r4, #0
   2a854:	bne	2a75c <__assert_fail@plt+0x18bb8>
   2a858:	ldr	r4, [r1, #20]
   2a85c:	cmp	r4, #0
   2a860:	bne	2a75c <__assert_fail@plt+0x18bb8>
   2a864:	ldr	r4, [r1, #24]
   2a868:	cmp	r4, #0
   2a86c:	bne	2a75c <__assert_fail@plt+0x18bb8>
   2a870:	ldr	r1, [r1, #28]
   2a874:	cmp	r1, #0
   2a878:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a87c:	b	2a75c <__assert_fail@plt+0x18bb8>
   2a880:	ldrb	r1, [ip, r2, lsl #3]
   2a884:	lsrs	r1, r1, #7
   2a888:	movne	r5, r8
   2a88c:	b	2a7f4 <__assert_fail@plt+0x18c50>
   2a890:	ldr	r1, [ip, r2, lsl #3]
   2a894:	cmp	r1, #32
   2a898:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a89c:	bls	2a8b4 <__assert_fail@plt+0x18d10>
   2a8a0:	cmp	r1, #64	; 0x40
   2a8a4:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a8a8:	cmp	r1, #128	; 0x80
   2a8ac:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a8b0:	b	2a75c <__assert_fail@plt+0x18bb8>
   2a8b4:	cmp	r1, #16
   2a8b8:	beq	2a7f4 <__assert_fail@plt+0x18c50>
   2a8bc:	b	2a75c <__assert_fail@plt+0x18bb8>
   2a8c0:	bl	11b68 <abort@plt>
   2a8c4:	orr	r5, r5, r3
   2a8c8:	tst	r5, #255	; 0xff
   2a8cc:	beq	2a908 <__assert_fail@plt+0x18d64>
   2a8d0:	mov	r2, #0
   2a8d4:	mov	r4, #7
   2a8d8:	lsl	ip, r2, #3
   2a8dc:	ldr	lr, [r6]
   2a8e0:	add	r1, lr, ip
   2a8e4:	ldrb	r0, [r1, #4]
   2a8e8:	cmp	r0, #1
   2a8ec:	beq	2a934 <__assert_fail@plt+0x18d90>
   2a8f0:	cmp	r0, #5
   2a8f4:	strbeq	r4, [r1, #4]
   2a8f8:	add	r2, r2, #1
   2a8fc:	ldr	r1, [r6, #8]
   2a900:	cmp	r2, r1
   2a904:	bcc	2a8d8 <__assert_fail@plt+0x18d34>
   2a908:	mov	r2, #1
   2a90c:	str	r2, [r6, #92]	; 0x5c
   2a910:	ldrb	r2, [r6, #88]	; 0x58
   2a914:	ldr	r1, [r6, #76]	; 0x4c
   2a918:	cmp	r1, #0
   2a91c:	orrgt	r3, r3, #1
   2a920:	and	r3, r3, #1
   2a924:	and	r2, r2, #249	; 0xf9
   2a928:	orr	r3, r2, r3, lsl #1
   2a92c:	strb	r3, [r6, #88]	; 0x58
   2a930:	b	2a75c <__assert_fail@plt+0x18bb8>
   2a934:	ldrsb	r0, [lr, ip]
   2a938:	cmp	r0, #0
   2a93c:	ldrblt	r0, [r1, #6]
   2a940:	biclt	r0, r0, #32
   2a944:	strblt	r0, [r1, #6]
   2a948:	b	2a8f8 <__assert_fail@plt+0x18d54>
   2a94c:	mov	r3, r5
   2a950:	b	2a908 <__assert_fail@plt+0x18d64>
   2a954:	add	r3, r3, #1
   2a958:	cmp	lr, r3
   2a95c:	beq	2a9b4 <__assert_fail@plt+0x18e10>
   2a960:	ldr	r1, [r2, #4]!
   2a964:	add	r0, ip, r1, lsl #3
   2a968:	ldrb	r0, [r0, #4]
   2a96c:	cmp	r0, #9
   2a970:	bne	2a954 <__assert_fail@plt+0x18db0>
   2a974:	ldr	r0, [ip, r1, lsl #3]
   2a978:	ldr	r1, [r7]
   2a97c:	cmp	r0, r1
   2a980:	bne	2a954 <__assert_fail@plt+0x18db0>
   2a984:	cmp	lr, r3
   2a988:	beq	2a9b4 <__assert_fail@plt+0x18e10>
   2a98c:	ldr	r3, [r6, #20]
   2a990:	add	r8, r8, r8, lsl #1
   2a994:	add	r8, r3, r8, lsl #2
   2a998:	ldr	r3, [r8, #8]
   2a99c:	ldr	r7, [r3]
   2a9a0:	mov	r1, r7
   2a9a4:	add	r0, sp, #20
   2a9a8:	bl	1e46c <__assert_fail@plt+0xc8c8>
   2a9ac:	cmp	r0, #0
   2a9b0:	beq	2a9f8 <__assert_fail@plt+0x18e54>
   2a9b4:	add	r4, r4, #1
   2a9b8:	ldr	lr, [sp, #24]
   2a9bc:	cmp	lr, r4
   2a9c0:	ble	2aa1c <__assert_fail@plt+0x18e78>
   2a9c4:	ldr	r2, [sp, #28]
   2a9c8:	ldr	ip, [r6]
   2a9cc:	ldr	r8, [r2, r4, lsl #2]
   2a9d0:	add	r7, ip, r8, lsl #3
   2a9d4:	ldrb	r3, [r7, #4]
   2a9d8:	cmp	r3, #4
   2a9dc:	bne	2a9b4 <__assert_fail@plt+0x18e10>
   2a9e0:	cmp	lr, #0
   2a9e4:	subgt	r2, r2, #4
   2a9e8:	movgt	r3, #0
   2a9ec:	bgt	2a960 <__assert_fail@plt+0x18dbc>
   2a9f0:	mov	r3, #0
   2a9f4:	b	2a984 <__assert_fail@plt+0x18de0>
   2a9f8:	add	r7, r7, r7, lsl #1
   2a9fc:	ldr	r1, [r6, #24]
   2aa00:	add	r1, r1, r7, lsl #2
   2aa04:	add	r0, sp, #20
   2aa08:	bl	21d44 <__assert_fail@plt+0x101a0>
   2aa0c:	cmp	r0, #0
   2aa10:	bne	2aaf8 <__assert_fail@plt+0x18f54>
   2aa14:	mov	r4, #0
   2aa18:	b	2a9b4 <__assert_fail@plt+0x18e10>
   2aa1c:	mov	r3, #0
   2aa20:	add	r2, sp, #20
   2aa24:	mov	r1, r6
   2aa28:	add	r0, sp, #16
   2aa2c:	bl	21060 <__assert_fail@plt+0xf4bc>
   2aa30:	str	r0, [r6, #36]	; 0x24
   2aa34:	cmp	r0, #0
   2aa38:	ldreq	r5, [sp, #16]
   2aa3c:	beq	2aa60 <__assert_fail@plt+0x18ebc>
   2aa40:	ldrsb	r3, [r0, #52]	; 0x34
   2aa44:	cmp	r3, #0
   2aa48:	strge	r0, [r6, #48]	; 0x30
   2aa4c:	strge	r0, [r6, #44]	; 0x2c
   2aa50:	strge	r0, [r6, #40]	; 0x28
   2aa54:	blt	2aa8c <__assert_fail@plt+0x18ee8>
   2aa58:	ldr	r0, [sp, #28]
   2aa5c:	bl	17204 <__assert_fail@plt+0x5660>
   2aa60:	str	r5, [sp, #116]	; 0x74
   2aa64:	mov	r0, sl
   2aa68:	bl	2134c <__assert_fail@plt+0xf7a8>
   2aa6c:	add	r0, sp, #32
   2aa70:	bl	21398 <__assert_fail@plt+0xf7f4>
   2aa74:	ldr	r3, [sp, #116]	; 0x74
   2aa78:	cmp	r3, #0
   2aa7c:	bne	2ab00 <__assert_fail@plt+0x18f5c>
   2aa80:	ldr	r0, [sp, #116]	; 0x74
   2aa84:	add	sp, sp, #124	; 0x7c
   2aa88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aa8c:	mov	r3, #1
   2aa90:	add	r2, sp, #20
   2aa94:	mov	r1, r6
   2aa98:	add	r0, sp, #16
   2aa9c:	bl	21060 <__assert_fail@plt+0xf4bc>
   2aaa0:	str	r0, [r6, #40]	; 0x28
   2aaa4:	mov	r3, #2
   2aaa8:	add	r2, sp, #20
   2aaac:	mov	r1, r6
   2aab0:	add	r0, sp, #16
   2aab4:	bl	21060 <__assert_fail@plt+0xf4bc>
   2aab8:	str	r0, [r6, #44]	; 0x2c
   2aabc:	mov	r3, #6
   2aac0:	add	r2, sp, #20
   2aac4:	mov	r1, r6
   2aac8:	add	r0, sp, #16
   2aacc:	bl	21060 <__assert_fail@plt+0xf4bc>
   2aad0:	str	r0, [r6, #48]	; 0x30
   2aad4:	ldr	r3, [r6, #40]	; 0x28
   2aad8:	cmp	r3, #0
   2aadc:	beq	2aaf0 <__assert_fail@plt+0x18f4c>
   2aae0:	ldr	r3, [r6, #44]	; 0x2c
   2aae4:	cmp	r0, #0
   2aae8:	cmpne	r3, #0
   2aaec:	bne	2aa58 <__assert_fail@plt+0x18eb4>
   2aaf0:	ldr	r5, [sp, #16]
   2aaf4:	b	2aa60 <__assert_fail@plt+0x18ebc>
   2aaf8:	mov	r5, r0
   2aafc:	b	2aa60 <__assert_fail@plt+0x18ebc>
   2ab00:	mov	r3, #1
   2ab04:	ldr	r2, [pc, #288]	; 2ac2c <__assert_fail@plt+0x19088>
   2ab08:	cmp	r2, #0
   2ab0c:	moveq	r3, #0
   2ab10:	mov	r2, #1
   2ab14:	ldr	r1, [pc, #268]	; 2ac28 <__assert_fail@plt+0x19084>
   2ab18:	cmp	r1, #0
   2ab1c:	moveq	r2, #0
   2ab20:	orr	r3, r3, r2
   2ab24:	tst	r3, #255	; 0xff
   2ab28:	beq	2ab34 <__assert_fail@plt+0x18f90>
   2ab2c:	add	r0, r6, #136	; 0x88
   2ab30:	bl	11718 <pthread_mutex_destroy@plt>
   2ab34:	mov	r0, r6
   2ab38:	bl	213c8 <__assert_fail@plt+0xf824>
   2ab3c:	mov	r3, #0
   2ab40:	str	r3, [sl]
   2ab44:	str	r3, [sl, #4]
   2ab48:	b	2aa80 <__assert_fail@plt+0x18edc>
   2ab4c:	mov	r0, #12
   2ab50:	b	2aa84 <__assert_fail@plt+0x18ee0>
   2ab54:	mov	r3, #12
   2ab58:	str	r3, [sp, #116]	; 0x74
   2ab5c:	mov	r0, r6
   2ab60:	bl	213c8 <__assert_fail@plt+0xf824>
   2ab64:	mov	r3, #0
   2ab68:	str	r3, [sl]
   2ab6c:	str	r3, [sl, #4]
   2ab70:	ldr	r0, [sp, #116]	; 0x74
   2ab74:	b	2aa84 <__assert_fail@plt+0x18ee0>
   2ab78:	mov	r3, #0
   2ab7c:	str	r3, [r6, #52]	; 0x34
   2ab80:	b	2abbc <__assert_fail@plt+0x19018>
   2ab84:	mov	r0, #12
   2ab88:	b	2aba0 <__assert_fail@plt+0x18ffc>
   2ab8c:	mov	r0, #12
   2ab90:	b	2aba0 <__assert_fail@plt+0x18ffc>
   2ab94:	mov	r0, #12
   2ab98:	b	2aba0 <__assert_fail@plt+0x18ffc>
   2ab9c:	mov	r0, #12
   2aba0:	str	r0, [sp, #116]	; 0x74
   2aba4:	b	2abbc <__assert_fail@plt+0x19018>
   2aba8:	mov	r3, #0
   2abac:	str	r3, [sp, #116]	; 0x74
   2abb0:	b	2a73c <__assert_fail@plt+0x18b98>
   2abb4:	mov	r0, #12
   2abb8:	str	r0, [sp, #116]	; 0x74
   2abbc:	mov	r0, sl
   2abc0:	bl	2134c <__assert_fail@plt+0xf7a8>
   2abc4:	add	r0, sp, #32
   2abc8:	bl	21398 <__assert_fail@plt+0xf7f4>
   2abcc:	mov	r3, #1
   2abd0:	ldr	r2, [pc, #80]	; 2ac28 <__assert_fail@plt+0x19084>
   2abd4:	cmp	r2, #0
   2abd8:	moveq	r3, #0
   2abdc:	mov	r2, #1
   2abe0:	ldr	r1, [pc, #68]	; 2ac2c <__assert_fail@plt+0x19088>
   2abe4:	cmp	r1, #0
   2abe8:	moveq	r2, #0
   2abec:	orr	r3, r3, r2
   2abf0:	tst	r3, #255	; 0xff
   2abf4:	beq	2ac00 <__assert_fail@plt+0x1905c>
   2abf8:	add	r0, r6, #136	; 0x88
   2abfc:	bl	11718 <pthread_mutex_destroy@plt>
   2ac00:	mov	r0, r6
   2ac04:	bl	213c8 <__assert_fail@plt+0xf824>
   2ac08:	mov	r3, #0
   2ac0c:	str	r3, [sl]
   2ac10:	str	r3, [sl, #4]
   2ac14:	ldr	r0, [sp, #116]	; 0x74
   2ac18:	b	2aa84 <__assert_fail@plt+0x18ee0>
   2ac1c:	beq	fead56c8 <optarg@@GLIBC_2.4+0xfea93488>
   2ac20:	andeq	r0, r3, r0, asr #25
   2ac24:	andeq	r0, r3, r8, ror sl
	...
   2ac30:	andeq	lr, r1, r8, asr r5
   2ac34:	andeq	pc, r1, ip, asr #6
   2ac38:	andeq	r0, r2, r0, asr #29
   2ac3c:	strdeq	lr, [r1], -r4
   2ac40:	andeq	r1, r2, r4, lsl #13
   2ac44:	push	{r4, lr}
   2ac48:	mov	ip, r2
   2ac4c:	ldr	r3, [pc, #96]	; 2acb4 <__assert_fail@plt+0x19110>
   2ac50:	ldr	r3, [r3]
   2ac54:	lsr	lr, r3, #21
   2ac58:	ldrb	r2, [r2, #28]
   2ac5c:	and	lr, lr, #16
   2ac60:	and	r2, r2, #239	; 0xef
   2ac64:	orr	r2, r2, lr
   2ac68:	orr	r2, r2, #128	; 0x80
   2ac6c:	strb	r2, [ip, #28]
   2ac70:	mov	r2, r1
   2ac74:	mov	r1, r0
   2ac78:	mov	r0, ip
   2ac7c:	bl	29fcc <__assert_fail@plt+0x18428>
   2ac80:	cmp	r0, #0
   2ac84:	beq	2acac <__assert_fail@plt+0x19108>
   2ac88:	ldr	r3, [pc, #40]	; 2acb8 <__assert_fail@plt+0x19114>
   2ac8c:	add	r1, r3, #32
   2ac90:	add	r3, r3, r0, lsl #2
   2ac94:	ldr	r3, [r3, #416]	; 0x1a0
   2ac98:	mov	r2, #5
   2ac9c:	add	r1, r1, r3
   2aca0:	mov	r0, #0
   2aca4:	bl	117d8 <dcgettext@plt>
   2aca8:	pop	{r4, pc}
   2acac:	mov	r0, #0
   2acb0:	pop	{r4, pc}
   2acb4:	strdeq	r2, [r4], -ip
   2acb8:	andeq	r0, r3, r8, ror sl
   2acbc:	ldr	r3, [pc, #12]	; 2acd0 <__assert_fail@plt+0x1912c>
   2acc0:	ldr	r2, [r3]
   2acc4:	str	r0, [r3]
   2acc8:	mov	r0, r2
   2accc:	bx	lr
   2acd0:	strdeq	r2, [r4], -ip
   2acd4:	push	{r4, r5, r6, lr}
   2acd8:	mov	r4, r0
   2acdc:	ldr	r5, [r0]
   2ace0:	ldr	r6, [r0, #16]
   2ace4:	mov	r2, #256	; 0x100
   2ace8:	mov	r1, #0
   2acec:	mov	r0, r6
   2acf0:	bl	119e8 <memset@plt>
   2acf4:	mov	r2, r6
   2acf8:	ldr	r1, [r5, #36]	; 0x24
   2acfc:	mov	r0, r4
   2ad00:	bl	24c08 <__assert_fail@plt+0x13064>
   2ad04:	ldr	r1, [r5, #40]	; 0x28
   2ad08:	ldr	r3, [r5, #36]	; 0x24
   2ad0c:	cmp	r3, r1
   2ad10:	beq	2ad20 <__assert_fail@plt+0x1917c>
   2ad14:	mov	r2, r6
   2ad18:	mov	r0, r4
   2ad1c:	bl	24c08 <__assert_fail@plt+0x13064>
   2ad20:	ldr	r1, [r5, #44]	; 0x2c
   2ad24:	ldr	r3, [r5, #36]	; 0x24
   2ad28:	cmp	r3, r1
   2ad2c:	beq	2ad3c <__assert_fail@plt+0x19198>
   2ad30:	mov	r2, r6
   2ad34:	mov	r0, r4
   2ad38:	bl	24c08 <__assert_fail@plt+0x13064>
   2ad3c:	ldr	r1, [r5, #48]	; 0x30
   2ad40:	ldr	r3, [r5, #36]	; 0x24
   2ad44:	cmp	r3, r1
   2ad48:	beq	2ad58 <__assert_fail@plt+0x191b4>
   2ad4c:	mov	r2, r6
   2ad50:	mov	r0, r4
   2ad54:	bl	24c08 <__assert_fail@plt+0x13064>
   2ad58:	ldrb	r3, [r4, #28]
   2ad5c:	orr	r3, r3, #8
   2ad60:	strb	r3, [r4, #28]
   2ad64:	mov	r0, #0
   2ad68:	pop	{r4, r5, r6, pc}
   2ad6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ad70:	sub	sp, sp, #44	; 0x2c
   2ad74:	ldr	ip, [sp, #80]	; 0x50
   2ad78:	ldr	r4, [sp, #88]	; 0x58
   2ad7c:	ldr	fp, [r0]
   2ad80:	add	r7, r3, ip
   2ad84:	cmp	r3, r2
   2ad88:	movle	lr, #0
   2ad8c:	movgt	lr, #1
   2ad90:	orrs	lr, lr, r3, lsr #31
   2ad94:	bne	2b0f4 <__assert_fail@plt+0x19550>
   2ad98:	cmp	r7, r2
   2ad9c:	bgt	2aeec <__assert_fail@plt+0x19348>
   2ada0:	cmp	ip, #0
   2ada4:	cmpge	r3, r7
   2ada8:	bgt	2aef4 <__assert_fail@plt+0x19350>
   2adac:	cmp	r7, #0
   2adb0:	blt	2aefc <__assert_fail@plt+0x19358>
   2adb4:	cmp	r3, r7
   2adb8:	movgt	lr, #0
   2adbc:	movle	lr, #1
   2adc0:	and	ip, lr, ip, lsr #31
   2adc4:	cmp	ip, #0
   2adc8:	movne	r7, #0
   2adcc:	mov	r8, #1
   2add0:	ldr	ip, [pc, #812]	; 2b104 <__assert_fail@plt+0x19560>
   2add4:	cmp	ip, #0
   2add8:	moveq	r8, #0
   2addc:	mov	ip, #1
   2ade0:	ldr	lr, [pc, #800]	; 2b108 <__assert_fail@plt+0x19564>
   2ade4:	cmp	lr, #0
   2ade8:	moveq	ip, #0
   2adec:	str	r3, [sp, #24]
   2adf0:	str	r2, [sp, #32]
   2adf4:	str	r1, [sp, #28]
   2adf8:	mov	r6, r0
   2adfc:	orr	r8, r8, ip
   2ae00:	ands	r8, r8, #255	; 0xff
   2ae04:	beq	2ae10 <__assert_fail@plt+0x1926c>
   2ae08:	add	r0, fp, #136	; 0x88
   2ae0c:	bl	11760 <pthread_mutex_lock@plt>
   2ae10:	ldrb	r3, [r6, #28]
   2ae14:	lsl	r2, r3, #26
   2ae18:	and	sl, r3, #64	; 0x40
   2ae1c:	cmp	sl, #0
   2ae20:	movne	sl, #2
   2ae24:	moveq	sl, #0
   2ae28:	orr	sl, sl, r2, lsr #31
   2ae2c:	ldr	r2, [sp, #24]
   2ae30:	cmp	r7, r2
   2ae34:	ble	2ae4c <__assert_fail@plt+0x192a8>
   2ae38:	ldr	r2, [r6, #16]
   2ae3c:	cmp	r2, #0
   2ae40:	beq	2ae4c <__assert_fail@plt+0x192a8>
   2ae44:	tst	r3, #8
   2ae48:	beq	2af04 <__assert_fail@plt+0x19360>
   2ae4c:	ldrb	r3, [r6, #28]
   2ae50:	tst	r3, #16
   2ae54:	bne	2af38 <__assert_fail@plt+0x19394>
   2ae58:	cmp	r4, #0
   2ae5c:	beq	2af44 <__assert_fail@plt+0x193a0>
   2ae60:	and	r3, r3, #6
   2ae64:	cmp	r3, #4
   2ae68:	beq	2af10 <__assert_fail@plt+0x1936c>
   2ae6c:	ldr	r5, [r6, #24]
   2ae70:	add	r5, r5, #1
   2ae74:	str	r5, [sp, #36]	; 0x24
   2ae78:	lsl	r0, r5, #3
   2ae7c:	bl	2d404 <__assert_fail@plt+0x1b860>
   2ae80:	subs	r9, r0, #0
   2ae84:	beq	2b0ec <__assert_fail@plt+0x19548>
   2ae88:	str	sl, [sp, #16]
   2ae8c:	str	r9, [sp, #12]
   2ae90:	str	r5, [sp, #8]
   2ae94:	ldr	r3, [sp, #84]	; 0x54
   2ae98:	str	r3, [sp, #4]
   2ae9c:	str	r7, [sp]
   2aea0:	ldr	r3, [sp, #24]
   2aea4:	ldr	r2, [sp, #32]
   2aea8:	ldr	r1, [sp, #28]
   2aeac:	mov	r0, r6
   2aeb0:	bl	26f80 <__assert_fail@plt+0x153dc>
   2aeb4:	cmp	r0, #0
   2aeb8:	beq	2af4c <__assert_fail@plt+0x193a8>
   2aebc:	cmp	r0, #1
   2aec0:	mvneq	r4, #0
   2aec4:	mvnne	r4, #1
   2aec8:	mov	r0, r9
   2aecc:	bl	17204 <__assert_fail@plt+0x5660>
   2aed0:	cmp	r8, #0
   2aed4:	beq	2aee0 <__assert_fail@plt+0x1933c>
   2aed8:	add	r0, fp, #136	; 0x88
   2aedc:	bl	11694 <pthread_mutex_unlock@plt>
   2aee0:	mov	r0, r4
   2aee4:	add	sp, sp, #44	; 0x2c
   2aee8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2aeec:	mov	r7, r2
   2aef0:	b	2adcc <__assert_fail@plt+0x19228>
   2aef4:	mov	r7, r2
   2aef8:	b	2adcc <__assert_fail@plt+0x19228>
   2aefc:	mov	r7, #0
   2af00:	b	2adcc <__assert_fail@plt+0x19228>
   2af04:	mov	r0, r6
   2af08:	bl	2acd4 <__assert_fail@plt+0x19130>
   2af0c:	b	2ae4c <__assert_fail@plt+0x192a8>
   2af10:	ldr	r3, [r4]
   2af14:	ldr	r2, [r6, #24]
   2af18:	cmp	r3, r2
   2af1c:	bhi	2ae6c <__assert_fail@plt+0x192c8>
   2af20:	cmp	r3, #0
   2af24:	movgt	r5, r3
   2af28:	movle	r5, #1
   2af2c:	cmp	r3, #0
   2af30:	movle	r4, #0
   2af34:	b	2ae74 <__assert_fail@plt+0x192d0>
   2af38:	mov	r5, #1
   2af3c:	mov	r4, #0
   2af40:	b	2ae74 <__assert_fail@plt+0x192d0>
   2af44:	mov	r5, #1
   2af48:	b	2ae74 <__assert_fail@plt+0x192d0>
   2af4c:	cmp	r4, #0
   2af50:	beq	2b008 <__assert_fail@plt+0x19464>
   2af54:	ldrb	sl, [r6, #28]
   2af58:	lsr	sl, sl, #1
   2af5c:	add	r7, r5, #1
   2af60:	ands	sl, sl, #3
   2af64:	beq	2b01c <__assert_fail@plt+0x19478>
   2af68:	cmp	sl, #1
   2af6c:	movne	sl, #2
   2af70:	beq	2b060 <__assert_fail@plt+0x194bc>
   2af74:	cmp	r5, #0
   2af78:	ble	2b0c4 <__assert_fail@plt+0x19520>
   2af7c:	mov	r2, r9
   2af80:	ldr	r3, [sp, #36]	; 0x24
   2af84:	lsl	ip, r3, #2
   2af88:	mov	r3, #0
   2af8c:	ldr	r0, [r9, r3, lsl #1]
   2af90:	ldr	r1, [r4, #4]
   2af94:	str	r0, [r1, r3]
   2af98:	ldr	r0, [r2, #4]
   2af9c:	ldr	r1, [r4, #8]
   2afa0:	str	r0, [r1, r3]
   2afa4:	add	r3, r3, #4
   2afa8:	add	r2, r2, #8
   2afac:	cmp	ip, r3
   2afb0:	bne	2af8c <__assert_fail@plt+0x193e8>
   2afb4:	ldr	r3, [r4]
   2afb8:	cmp	r3, r5
   2afbc:	bls	2afec <__assert_fail@plt+0x19448>
   2afc0:	lsl	r3, r5, #2
   2afc4:	mvn	r2, #0
   2afc8:	ldr	r1, [r4, #4]
   2afcc:	ldr	r0, [r4, #8]
   2afd0:	str	r2, [r0, r3]
   2afd4:	str	r2, [r1, r3]
   2afd8:	add	r5, r5, #1
   2afdc:	add	r3, r3, #4
   2afe0:	ldr	r1, [r4]
   2afe4:	cmp	r5, r1
   2afe8:	bcc	2afc8 <__assert_fail@plt+0x19424>
   2afec:	ldrb	r3, [r6, #28]
   2aff0:	and	sl, sl, #3
   2aff4:	bic	r3, r3, #6
   2aff8:	orr	sl, r3, sl, lsl #1
   2affc:	strb	sl, [r6, #28]
   2b000:	tst	sl, #6
   2b004:	beq	2b0fc <__assert_fail@plt+0x19558>
   2b008:	ldrb	r3, [sp, #92]	; 0x5c
   2b00c:	cmp	r3, #0
   2b010:	bne	2b0dc <__assert_fail@plt+0x19538>
   2b014:	ldr	r4, [r9]
   2b018:	b	2aec8 <__assert_fail@plt+0x19324>
   2b01c:	lsl	sl, r7, #2
   2b020:	mov	r0, sl
   2b024:	bl	2d404 <__assert_fail@plt+0x1b860>
   2b028:	str	r0, [r4, #4]
   2b02c:	cmp	r0, #0
   2b030:	beq	2b0cc <__assert_fail@plt+0x19528>
   2b034:	mov	r0, sl
   2b038:	bl	2d404 <__assert_fail@plt+0x1b860>
   2b03c:	str	r0, [r4, #8]
   2b040:	cmp	r0, #0
   2b044:	strne	r7, [r4]
   2b048:	movne	sl, #1
   2b04c:	bne	2af74 <__assert_fail@plt+0x193d0>
   2b050:	ldr	r0, [r4, #4]
   2b054:	bl	17204 <__assert_fail@plt+0x5660>
   2b058:	mov	sl, #0
   2b05c:	b	2afec <__assert_fail@plt+0x19448>
   2b060:	ldr	r3, [r4]
   2b064:	cmp	r3, r7
   2b068:	bcs	2af74 <__assert_fail@plt+0x193d0>
   2b06c:	lsl	r3, r7, #2
   2b070:	str	r3, [sp, #32]
   2b074:	mov	r1, r3
   2b078:	ldr	r0, [r4, #4]
   2b07c:	bl	2d434 <__assert_fail@plt+0x1b890>
   2b080:	subs	r2, r0, #0
   2b084:	str	r2, [sp, #28]
   2b088:	beq	2b0d4 <__assert_fail@plt+0x19530>
   2b08c:	ldr	r1, [sp, #32]
   2b090:	ldr	r0, [r4, #8]
   2b094:	bl	2d434 <__assert_fail@plt+0x1b890>
   2b098:	cmp	r0, #0
   2b09c:	beq	2b0b4 <__assert_fail@plt+0x19510>
   2b0a0:	ldr	r3, [sp, #28]
   2b0a4:	str	r3, [r4, #4]
   2b0a8:	str	r0, [r4, #8]
   2b0ac:	str	r7, [r4]
   2b0b0:	b	2af74 <__assert_fail@plt+0x193d0>
   2b0b4:	ldr	r0, [sp, #28]
   2b0b8:	bl	17204 <__assert_fail@plt+0x5660>
   2b0bc:	mov	sl, #0
   2b0c0:	b	2afec <__assert_fail@plt+0x19448>
   2b0c4:	mov	r5, #0
   2b0c8:	b	2afb4 <__assert_fail@plt+0x19410>
   2b0cc:	mov	sl, #0
   2b0d0:	b	2afec <__assert_fail@plt+0x19448>
   2b0d4:	mov	sl, #0
   2b0d8:	b	2afec <__assert_fail@plt+0x19448>
   2b0dc:	ldr	r4, [r9, #4]
   2b0e0:	ldr	r3, [sp, #24]
   2b0e4:	sub	r4, r4, r3
   2b0e8:	b	2aec8 <__assert_fail@plt+0x19324>
   2b0ec:	mvn	r4, #1
   2b0f0:	b	2aed0 <__assert_fail@plt+0x1932c>
   2b0f4:	mvn	r4, #0
   2b0f8:	b	2aee0 <__assert_fail@plt+0x1933c>
   2b0fc:	mvn	r4, #1
   2b100:	b	2aec8 <__assert_fail@plt+0x19324>
	...
   2b10c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b110:	sub	sp, sp, #20
   2b114:	mov	r5, r2
   2b118:	mov	r7, r3
   2b11c:	ldr	r4, [sp, #56]	; 0x38
   2b120:	ldr	r6, [sp, #72]	; 0x48
   2b124:	lsr	r3, r4, #31
   2b128:	orr	r3, r3, r2, lsr #31
   2b12c:	orrs	r2, r3, r6, lsr #31
   2b130:	bne	2b238 <__assert_fail@plt+0x19694>
   2b134:	mov	r8, r0
   2b138:	mov	r9, r1
   2b13c:	cmp	r4, #0
   2b140:	blt	2b1b8 <__assert_fail@plt+0x19614>
   2b144:	cmp	r3, #0
   2b148:	bne	2b1cc <__assert_fail@plt+0x19628>
   2b14c:	mvn	r3, #-2147483648	; 0x80000000
   2b150:	sub	r3, r3, r4
   2b154:	cmp	r5, r3
   2b158:	movle	r3, #0
   2b15c:	movgt	r3, #1
   2b160:	cmp	r3, #0
   2b164:	mvnne	r4, #1
   2b168:	bne	2b22c <__assert_fail@plt+0x19688>
   2b16c:	add	fp, r5, r4
   2b170:	cmp	r4, #0
   2b174:	ble	2b1e0 <__assert_fail@plt+0x1963c>
   2b178:	cmp	r5, #0
   2b17c:	ble	2b1ec <__assert_fail@plt+0x19648>
   2b180:	mov	r0, fp
   2b184:	bl	2d404 <__assert_fail@plt+0x1b860>
   2b188:	subs	sl, r0, #0
   2b18c:	beq	2b240 <__assert_fail@plt+0x1969c>
   2b190:	mov	r2, r5
   2b194:	mov	r1, r9
   2b198:	mov	r0, sl
   2b19c:	bl	11784 <memcpy@plt>
   2b1a0:	mov	r2, r4
   2b1a4:	mov	r1, r7
   2b1a8:	add	r0, sl, r5
   2b1ac:	bl	11784 <memcpy@plt>
   2b1b0:	mov	r7, sl
   2b1b4:	b	2b1f0 <__assert_fail@plt+0x1964c>
   2b1b8:	rsb	r3, r4, #-2147483648	; 0x80000000
   2b1bc:	cmp	r5, r3
   2b1c0:	movge	r3, #0
   2b1c4:	movlt	r3, #1
   2b1c8:	b	2b160 <__assert_fail@plt+0x195bc>
   2b1cc:	rsb	r3, r5, #-2147483648	; 0x80000000
   2b1d0:	cmp	r4, r3
   2b1d4:	movge	r3, #0
   2b1d8:	movlt	r3, #1
   2b1dc:	b	2b160 <__assert_fail@plt+0x195bc>
   2b1e0:	mov	r7, r9
   2b1e4:	mov	sl, #0
   2b1e8:	b	2b1f0 <__assert_fail@plt+0x1964c>
   2b1ec:	mov	sl, #0
   2b1f0:	ldrb	r3, [sp, #76]	; 0x4c
   2b1f4:	str	r3, [sp, #12]
   2b1f8:	ldr	r3, [sp, #68]	; 0x44
   2b1fc:	str	r3, [sp, #8]
   2b200:	str	r6, [sp, #4]
   2b204:	ldr	r3, [sp, #64]	; 0x40
   2b208:	str	r3, [sp]
   2b20c:	ldr	r3, [sp, #60]	; 0x3c
   2b210:	mov	r2, fp
   2b214:	mov	r1, r7
   2b218:	mov	r0, r8
   2b21c:	bl	2ad6c <__assert_fail@plt+0x191c8>
   2b220:	mov	r4, r0
   2b224:	mov	r0, sl
   2b228:	bl	17204 <__assert_fail@plt+0x5660>
   2b22c:	mov	r0, r4
   2b230:	add	sp, sp, #20
   2b234:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b238:	mvn	r4, #1
   2b23c:	b	2b22c <__assert_fail@plt+0x19688>
   2b240:	mvn	r4, #1
   2b244:	b	2b22c <__assert_fail@plt+0x19688>
   2b248:	push	{r4, r5, r6, r7, r8, lr}
   2b24c:	mov	r4, r0
   2b250:	mov	r7, r1
   2b254:	mov	r5, r2
   2b258:	and	r2, r2, #1
   2b25c:	ldr	r3, [pc, #228]	; 2b348 <__assert_fail@plt+0x197a4>
   2b260:	ldr	r6, [pc, #228]	; 2b34c <__assert_fail@plt+0x197a8>
   2b264:	cmp	r2, #0
   2b268:	moveq	r6, r3
   2b26c:	mov	r3, #0
   2b270:	str	r3, [r0]
   2b274:	str	r3, [r0, #4]
   2b278:	str	r3, [r0, #8]
   2b27c:	mov	r0, #256	; 0x100
   2b280:	bl	2d404 <__assert_fail@plt+0x1b860>
   2b284:	str	r0, [r4, #16]
   2b288:	cmp	r0, #0
   2b28c:	beq	2b340 <__assert_fail@plt+0x1979c>
   2b290:	and	r3, r5, #2
   2b294:	cmp	r3, #0
   2b298:	movne	r3, #4194304	; 0x400000
   2b29c:	moveq	r3, #0
   2b2a0:	orr	r6, r6, r3
   2b2a4:	tst	r5, #4
   2b2a8:	bicne	r6, r6, #64	; 0x40
   2b2ac:	orrne	r6, r6, #256	; 0x100
   2b2b0:	ldrbne	r3, [r4, #28]
   2b2b4:	orrne	r3, r3, #128	; 0x80
   2b2b8:	ldrbeq	r3, [r4, #28]
   2b2bc:	biceq	r3, r3, #128	; 0x80
   2b2c0:	strb	r3, [r4, #28]
   2b2c4:	lsl	r5, r5, #1
   2b2c8:	ldrb	r3, [r4, #28]
   2b2cc:	bic	r3, r3, #16
   2b2d0:	and	r5, r5, #16
   2b2d4:	orr	r5, r5, r3
   2b2d8:	strb	r5, [r4, #28]
   2b2dc:	mov	r3, #0
   2b2e0:	str	r3, [r4, #20]
   2b2e4:	mov	r0, r7
   2b2e8:	bl	11988 <strlen@plt>
   2b2ec:	mov	r3, r6
   2b2f0:	mov	r2, r0
   2b2f4:	mov	r1, r7
   2b2f8:	mov	r0, r4
   2b2fc:	bl	29fcc <__assert_fail@plt+0x18428>
   2b300:	mov	r5, r0
   2b304:	cmp	r0, #16
   2b308:	beq	2b324 <__assert_fail@plt+0x19780>
   2b30c:	cmp	r0, #0
   2b310:	bne	2b328 <__assert_fail@plt+0x19784>
   2b314:	mov	r0, r4
   2b318:	bl	2acd4 <__assert_fail@plt+0x19130>
   2b31c:	mov	r0, #0
   2b320:	pop	{r4, r5, r6, r7, r8, pc}
   2b324:	mov	r5, #8
   2b328:	ldr	r0, [r4, #16]
   2b32c:	bl	17204 <__assert_fail@plt+0x5660>
   2b330:	mov	r3, #0
   2b334:	str	r3, [r4, #16]
   2b338:	mov	r0, r5
   2b33c:	pop	{r4, r5, r6, r7, r8, pc}
   2b340:	mov	r0, #12
   2b344:	pop	{r4, r5, r6, r7, r8, pc}
   2b348:	smlabteq	r1, r6, r2, r0
   2b34c:	strdeq	fp, [r3], -ip
   2b350:	push	{r4, r5, r6, r7, r8, lr}
   2b354:	cmp	r0, #16
   2b358:	bhi	2b3c0 <__assert_fail@plt+0x1981c>
   2b35c:	mov	r6, r2
   2b360:	mov	r4, r3
   2b364:	ldr	r3, [pc, #88]	; 2b3c4 <__assert_fail@plt+0x19820>
   2b368:	add	r1, r3, #32
   2b36c:	add	r3, r3, r0, lsl #2
   2b370:	ldr	r3, [r3, #416]	; 0x1a0
   2b374:	mov	r2, #5
   2b378:	add	r1, r1, r3
   2b37c:	mov	r0, #0
   2b380:	bl	117d8 <dcgettext@plt>
   2b384:	mov	r7, r0
   2b388:	bl	11988 <strlen@plt>
   2b38c:	add	r5, r0, #1
   2b390:	cmp	r4, #0
   2b394:	beq	2b3b8 <__assert_fail@plt+0x19814>
   2b398:	cmp	r5, r4
   2b39c:	subhi	r2, r4, #1
   2b3a0:	movhi	r3, #0
   2b3a4:	strbhi	r3, [r6, r2]
   2b3a8:	movls	r2, r5
   2b3ac:	mov	r1, r7
   2b3b0:	mov	r0, r6
   2b3b4:	bl	11784 <memcpy@plt>
   2b3b8:	mov	r0, r5
   2b3bc:	pop	{r4, r5, r6, r7, r8, pc}
   2b3c0:	bl	11b68 <abort@plt>
   2b3c4:	andeq	r0, r3, r8, ror sl
   2b3c8:	push	{r4, r5, r6, lr}
   2b3cc:	mov	r4, r0
   2b3d0:	ldr	r5, [r0]
   2b3d4:	cmp	r5, #0
   2b3d8:	beq	2b418 <__assert_fail@plt+0x19874>
   2b3dc:	mov	r3, #1
   2b3e0:	ldr	r2, [pc, #88]	; 2b440 <__assert_fail@plt+0x1989c>
   2b3e4:	cmp	r2, #0
   2b3e8:	moveq	r3, #0
   2b3ec:	mov	r2, #1
   2b3f0:	ldr	r1, [pc, #76]	; 2b444 <__assert_fail@plt+0x198a0>
   2b3f4:	cmp	r1, #0
   2b3f8:	moveq	r2, #0
   2b3fc:	orr	r3, r3, r2
   2b400:	tst	r3, #255	; 0xff
   2b404:	beq	2b410 <__assert_fail@plt+0x1986c>
   2b408:	add	r0, r5, #136	; 0x88
   2b40c:	bl	11718 <pthread_mutex_destroy@plt>
   2b410:	mov	r0, r5
   2b414:	bl	213c8 <__assert_fail@plt+0xf824>
   2b418:	mov	r5, #0
   2b41c:	str	r5, [r4]
   2b420:	str	r5, [r4, #4]
   2b424:	ldr	r0, [r4, #16]
   2b428:	bl	17204 <__assert_fail@plt+0x5660>
   2b42c:	str	r5, [r4, #16]
   2b430:	ldr	r0, [r4, #20]
   2b434:	bl	17204 <__assert_fail@plt+0x5660>
   2b438:	str	r5, [r4, #20]
   2b43c:	pop	{r4, r5, r6, pc}
	...
   2b448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b44c:	sub	sp, sp, #36	; 0x24
   2b450:	ldr	r4, [sp, #72]	; 0x48
   2b454:	bics	ip, r4, #7
   2b458:	movne	r0, #2
   2b45c:	beq	2b468 <__assert_fail@plt+0x198c4>
   2b460:	add	sp, sp, #36	; 0x24
   2b464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b468:	mov	r7, r3
   2b46c:	mov	r8, r2
   2b470:	str	r1, [sp, #28]
   2b474:	mov	r5, r0
   2b478:	ands	fp, r4, #4
   2b47c:	beq	2b51c <__assert_fail@plt+0x19978>
   2b480:	ldr	fp, [r3]
   2b484:	ldr	r9, [r3, #4]
   2b488:	ldr	sl, [r5]
   2b48c:	mov	r6, #1
   2b490:	ldr	r3, [pc, #148]	; 2b52c <__assert_fail@plt+0x19988>
   2b494:	cmp	r3, #0
   2b498:	moveq	r6, #0
   2b49c:	mov	r3, #1
   2b4a0:	ldr	r2, [pc, #136]	; 2b530 <__assert_fail@plt+0x1998c>
   2b4a4:	cmp	r2, #0
   2b4a8:	moveq	r3, #0
   2b4ac:	orr	r6, r6, r3
   2b4b0:	ands	r6, r6, #255	; 0xff
   2b4b4:	beq	2b4c0 <__assert_fail@plt+0x1991c>
   2b4b8:	add	r0, sl, #136	; 0x88
   2b4bc:	bl	11760 <pthread_mutex_lock@plt>
   2b4c0:	ldrb	r3, [r5, #28]
   2b4c4:	tst	r3, #16
   2b4c8:	str	r4, [sp, #16]
   2b4cc:	movne	r3, #0
   2b4d0:	strne	r3, [sp, #12]
   2b4d4:	strne	r3, [sp, #8]
   2b4d8:	streq	r7, [sp, #12]
   2b4dc:	streq	r8, [sp, #8]
   2b4e0:	str	r9, [sp, #4]
   2b4e4:	str	r9, [sp]
   2b4e8:	mov	r3, fp
   2b4ec:	mov	r2, r9
   2b4f0:	ldr	r1, [sp, #28]
   2b4f4:	mov	r0, r5
   2b4f8:	bl	26f80 <__assert_fail@plt+0x153dc>
   2b4fc:	mov	r4, r0
   2b500:	cmp	r6, #0
   2b504:	beq	2b510 <__assert_fail@plt+0x1996c>
   2b508:	add	r0, sl, #136	; 0x88
   2b50c:	bl	11694 <pthread_mutex_unlock@plt>
   2b510:	adds	r0, r4, #0
   2b514:	movne	r0, #1
   2b518:	b	2b460 <__assert_fail@plt+0x198bc>
   2b51c:	ldr	r0, [sp, #28]
   2b520:	bl	11988 <strlen@plt>
   2b524:	mov	r9, r0
   2b528:	b	2b488 <__assert_fail@plt+0x198e4>
	...
   2b534:	push	{lr}		; (str lr, [sp, #-4]!)
   2b538:	sub	sp, sp, #20
   2b53c:	mov	ip, #1
   2b540:	str	ip, [sp, #12]
   2b544:	ldr	ip, [sp, #24]
   2b548:	str	ip, [sp, #8]
   2b54c:	str	r2, [sp, #4]
   2b550:	mov	ip, #0
   2b554:	str	ip, [sp]
   2b558:	bl	2ad6c <__assert_fail@plt+0x191c8>
   2b55c:	add	sp, sp, #20
   2b560:	pop	{pc}		; (ldr pc, [sp], #4)
   2b564:	push	{lr}		; (str lr, [sp, #-4]!)
   2b568:	sub	sp, sp, #20
   2b56c:	mov	ip, #0
   2b570:	str	ip, [sp, #12]
   2b574:	ldr	ip, [sp, #28]
   2b578:	str	ip, [sp, #8]
   2b57c:	str	r2, [sp, #4]
   2b580:	ldr	ip, [sp, #24]
   2b584:	str	ip, [sp]
   2b588:	bl	2ad6c <__assert_fail@plt+0x191c8>
   2b58c:	add	sp, sp, #20
   2b590:	pop	{pc}		; (ldr pc, [sp], #4)
   2b594:	push	{lr}		; (str lr, [sp, #-4]!)
   2b598:	sub	sp, sp, #28
   2b59c:	mov	ip, #1
   2b5a0:	str	ip, [sp, #20]
   2b5a4:	ldr	ip, [sp, #44]	; 0x2c
   2b5a8:	str	ip, [sp, #16]
   2b5ac:	ldr	ip, [sp, #40]	; 0x28
   2b5b0:	str	ip, [sp, #12]
   2b5b4:	mov	ip, #0
   2b5b8:	str	ip, [sp, #8]
   2b5bc:	ldr	ip, [sp, #36]	; 0x24
   2b5c0:	str	ip, [sp, #4]
   2b5c4:	ldr	ip, [sp, #32]
   2b5c8:	str	ip, [sp]
   2b5cc:	bl	2b10c <__assert_fail@plt+0x19568>
   2b5d0:	add	sp, sp, #28
   2b5d4:	pop	{pc}		; (ldr pc, [sp], #4)
   2b5d8:	push	{lr}		; (str lr, [sp, #-4]!)
   2b5dc:	sub	sp, sp, #28
   2b5e0:	mov	ip, #0
   2b5e4:	str	ip, [sp, #20]
   2b5e8:	ldr	ip, [sp, #48]	; 0x30
   2b5ec:	str	ip, [sp, #16]
   2b5f0:	ldr	ip, [sp, #44]	; 0x2c
   2b5f4:	str	ip, [sp, #12]
   2b5f8:	ldr	ip, [sp, #40]	; 0x28
   2b5fc:	str	ip, [sp, #8]
   2b600:	ldr	ip, [sp, #36]	; 0x24
   2b604:	str	ip, [sp, #4]
   2b608:	ldr	ip, [sp, #32]
   2b60c:	str	ip, [sp]
   2b610:	bl	2b10c <__assert_fail@plt+0x19568>
   2b614:	add	sp, sp, #28
   2b618:	pop	{pc}		; (ldr pc, [sp], #4)
   2b61c:	cmp	r2, #0
   2b620:	bne	2b644 <__assert_fail@plt+0x19aa0>
   2b624:	ldrb	r3, [r0, #28]
   2b628:	bic	r3, r3, #6
   2b62c:	strb	r3, [r0, #28]
   2b630:	mov	r3, #0
   2b634:	str	r3, [r1]
   2b638:	str	r3, [r1, #8]
   2b63c:	str	r3, [r1, #4]
   2b640:	bx	lr
   2b644:	ldrb	ip, [r0, #28]
   2b648:	bic	ip, ip, #4
   2b64c:	orr	ip, ip, #2
   2b650:	strb	ip, [r0, #28]
   2b654:	str	r2, [r1]
   2b658:	str	r3, [r1, #4]
   2b65c:	ldr	r3, [sp]
   2b660:	str	r3, [r1, #8]
   2b664:	bx	lr
   2b668:	push	{r4, r5, r6, lr}
   2b66c:	mov	r5, r0
   2b670:	mov	r4, r1
   2b674:	mov	r2, r1
   2b678:	mov	r1, #0
   2b67c:	bl	11a24 <memchr@plt>
   2b680:	cmp	r0, #0
   2b684:	subne	r0, r0, r5
   2b688:	addne	r0, r0, #1
   2b68c:	moveq	r0, r4
   2b690:	pop	{r4, r5, r6, pc}
   2b694:	push	{r4, lr}
   2b698:	subs	r1, r0, #0
   2b69c:	beq	2b6b0 <__assert_fail@plt+0x19b0c>
   2b6a0:	mov	r2, #1
   2b6a4:	ldr	r0, [pc, #16]	; 2b6bc <__assert_fail@plt+0x19b18>
   2b6a8:	bl	119a0 <setenv@plt>
   2b6ac:	pop	{r4, pc}
   2b6b0:	ldr	r0, [pc, #4]	; 2b6bc <__assert_fail@plt+0x19b18>
   2b6b4:	bl	11b44 <unsetenv@plt>
   2b6b8:	pop	{r4, pc}
   2b6bc:	andeq	r0, r3, r4, ror r0
   2b6c0:	push	{r4, r5, r6, r7, r8, lr}
   2b6c4:	subs	r6, r0, #0
   2b6c8:	beq	2b734 <__assert_fail@plt+0x19b90>
   2b6cc:	mov	r0, r6
   2b6d0:	bl	11988 <strlen@plt>
   2b6d4:	add	r7, r0, #1
   2b6d8:	cmp	r7, #58	; 0x3a
   2b6dc:	addhi	r0, r0, #2
   2b6e0:	bls	2b76c <__assert_fail@plt+0x19bc8>
   2b6e4:	add	r0, r0, #8
   2b6e8:	bic	r0, r0, #3
   2b6ec:	bl	2d404 <__assert_fail@plt+0x1b860>
   2b6f0:	subs	r4, r0, #0
   2b6f4:	beq	2b72c <__assert_fail@plt+0x19b88>
   2b6f8:	mov	r3, #0
   2b6fc:	str	r3, [r4]
   2b700:	subs	r2, r6, r3
   2b704:	movne	r2, #1
   2b708:	strb	r2, [r4, #4]
   2b70c:	strb	r3, [r4, #5]
   2b710:	add	r5, r4, #5
   2b714:	mov	r2, r7
   2b718:	mov	r1, r6
   2b71c:	mov	r0, r5
   2b720:	bl	11784 <memcpy@plt>
   2b724:	mov	r3, #0
   2b728:	strb	r3, [r5, r7]
   2b72c:	mov	r0, r4
   2b730:	pop	{r4, r5, r6, r7, r8, pc}
   2b734:	mov	r0, #64	; 0x40
   2b738:	bl	2d404 <__assert_fail@plt+0x1b860>
   2b73c:	subs	r4, r0, #0
   2b740:	beq	2b72c <__assert_fail@plt+0x19b88>
   2b744:	mov	r3, #0
   2b748:	str	r3, [r4]
   2b74c:	cmp	r6, r3
   2b750:	movne	r2, #1
   2b754:	moveq	r2, r3
   2b758:	strb	r2, [r4, #4]
   2b75c:	strb	r3, [r4, #5]
   2b760:	beq	2b72c <__assert_fail@plt+0x19b88>
   2b764:	mov	r7, r3
   2b768:	b	2b710 <__assert_fail@plt+0x19b6c>
   2b76c:	mov	r0, #59	; 0x3b
   2b770:	b	2b6e4 <__assert_fail@plt+0x19b40>
   2b774:	push	{r4, r5, r6, r7, r8, lr}
   2b778:	ldr	r6, [r1, #40]	; 0x28
   2b77c:	cmp	r6, #0
   2b780:	beq	2b87c <__assert_fail@plt+0x19cd8>
   2b784:	mov	r5, r0
   2b788:	mov	r7, r1
   2b78c:	cmp	r1, r6
   2b790:	bhi	2b7a0 <__assert_fail@plt+0x19bfc>
   2b794:	add	r3, r1, #44	; 0x2c
   2b798:	cmp	r6, r3
   2b79c:	bcc	2b884 <__assert_fail@plt+0x19ce0>
   2b7a0:	ldrb	r3, [r6]
   2b7a4:	cmp	r3, #0
   2b7a8:	addne	r4, r5, #5
   2b7ac:	bne	2b80c <__assert_fail@plt+0x19c68>
   2b7b0:	ldr	r4, [pc, #220]	; 2b894 <__assert_fail@plt+0x19cf0>
   2b7b4:	str	r4, [r7, #40]	; 0x28
   2b7b8:	mov	r0, #1
   2b7bc:	pop	{r4, r5, r6, r7, r8, pc}
   2b7c0:	mov	r0, r6
   2b7c4:	bl	2b6c0 <__assert_fail@plt+0x19b1c>
   2b7c8:	str	r0, [r5]
   2b7cc:	cmp	r0, #0
   2b7d0:	beq	2b88c <__assert_fail@plt+0x19ce8>
   2b7d4:	mov	r3, #0
   2b7d8:	strb	r3, [r0, #4]
   2b7dc:	add	r4, r0, #5
   2b7e0:	b	2b7b4 <__assert_fail@plt+0x19c10>
   2b7e4:	mov	r0, r4
   2b7e8:	bl	11988 <strlen@plt>
   2b7ec:	add	r0, r0, #1
   2b7f0:	ldrb	r3, [r4, r0]!
   2b7f4:	cmp	r3, #0
   2b7f8:	bne	2b80c <__assert_fail@plt+0x19c68>
   2b7fc:	ldr	r3, [r5]
   2b800:	cmp	r3, #0
   2b804:	addne	r4, r3, #5
   2b808:	movne	r5, r3
   2b80c:	mov	r1, r6
   2b810:	mov	r0, r4
   2b814:	bl	1170c <strcmp@plt>
   2b818:	cmp	r0, #0
   2b81c:	beq	2b7b4 <__assert_fail@plt+0x19c10>
   2b820:	ldrb	r3, [r4]
   2b824:	cmp	r3, #0
   2b828:	bne	2b7e4 <__assert_fail@plt+0x19c40>
   2b82c:	add	r3, r5, #5
   2b830:	cmp	r4, r3
   2b834:	bne	2b844 <__assert_fail@plt+0x19ca0>
   2b838:	ldrb	r3, [r5, #4]
   2b83c:	cmp	r3, #0
   2b840:	bne	2b7e4 <__assert_fail@plt+0x19c40>
   2b844:	mov	r0, r6
   2b848:	bl	11988 <strlen@plt>
   2b84c:	add	r8, r0, #1
   2b850:	add	r3, r5, #64	; 0x40
   2b854:	sub	r3, r3, r4
   2b858:	cmp	r8, r3
   2b85c:	bge	2b7c0 <__assert_fail@plt+0x19c1c>
   2b860:	mov	r2, r8
   2b864:	mov	r1, r6
   2b868:	mov	r0, r4
   2b86c:	bl	11784 <memcpy@plt>
   2b870:	mov	r3, #0
   2b874:	strb	r3, [r4, r8]
   2b878:	b	2b7b4 <__assert_fail@plt+0x19c10>
   2b87c:	mov	r0, #1
   2b880:	pop	{r4, r5, r6, r7, r8, pc}
   2b884:	mov	r0, #1
   2b888:	pop	{r4, r5, r6, r7, r8, pc}
   2b88c:	mov	r0, #0
   2b890:	pop	{r4, r5, r6, r7, r8, pc}
   2b894:	andeq	r0, r3, ip, lsl #15
   2b898:	cmp	r0, #1
   2b89c:	bxeq	lr
   2b8a0:	cmp	r0, #0
   2b8a4:	bxeq	lr
   2b8a8:	push	{r4, lr}
   2b8ac:	ldr	r4, [r0]
   2b8b0:	bl	17204 <__assert_fail@plt+0x5660>
   2b8b4:	mov	r0, r4
   2b8b8:	cmp	r4, #0
   2b8bc:	bne	2b8ac <__assert_fail@plt+0x19d08>
   2b8c0:	pop	{r4, pc}
   2b8c4:	push	{r4, r5, r6, lr}
   2b8c8:	mov	r4, r0
   2b8cc:	ldr	r0, [pc, #164]	; 2b978 <__assert_fail@plt+0x19dd4>
   2b8d0:	bl	118ec <getenv@plt>
   2b8d4:	subs	r5, r0, #0
   2b8d8:	beq	2b914 <__assert_fail@plt+0x19d70>
   2b8dc:	ldrb	r3, [r4, #4]
   2b8e0:	cmp	r3, #0
   2b8e4:	moveq	r0, #0
   2b8e8:	beq	2b900 <__assert_fail@plt+0x19d5c>
   2b8ec:	mov	r1, r5
   2b8f0:	add	r0, r4, #5
   2b8f4:	bl	1170c <strcmp@plt>
   2b8f8:	clz	r0, r0
   2b8fc:	lsr	r0, r0, #5
   2b900:	cmp	r0, #0
   2b904:	movne	r5, #1
   2b908:	beq	2b924 <__assert_fail@plt+0x19d80>
   2b90c:	mov	r0, r5
   2b910:	pop	{r4, r5, r6, pc}
   2b914:	ldrb	r0, [r4, #4]
   2b918:	clz	r0, r0
   2b91c:	lsr	r0, r0, #5
   2b920:	b	2b900 <__assert_fail@plt+0x19d5c>
   2b924:	mov	r0, r5
   2b928:	bl	2b6c0 <__assert_fail@plt+0x19b1c>
   2b92c:	subs	r5, r0, #0
   2b930:	beq	2b90c <__assert_fail@plt+0x19d68>
   2b934:	ldrb	r3, [r4, #4]
   2b938:	cmp	r3, #0
   2b93c:	addne	r0, r4, #5
   2b940:	moveq	r0, #0
   2b944:	bl	2b694 <__assert_fail@plt+0x19af0>
   2b948:	cmp	r0, #0
   2b94c:	beq	2b970 <__assert_fail@plt+0x19dcc>
   2b950:	bl	119b8 <__errno_location@plt>
   2b954:	mov	r4, r0
   2b958:	ldr	r6, [r0]
   2b95c:	mov	r0, r5
   2b960:	bl	2b898 <__assert_fail@plt+0x19cf4>
   2b964:	str	r6, [r4]
   2b968:	mov	r5, #0
   2b96c:	b	2b90c <__assert_fail@plt+0x19d68>
   2b970:	bl	11844 <tzset@plt>
   2b974:	b	2b90c <__assert_fail@plt+0x19d68>
   2b978:	andeq	r0, r3, r4, ror r0
   2b97c:	push	{r4, r5, r6, r7, r8, lr}
   2b980:	cmp	r0, #1
   2b984:	moveq	r7, #1
   2b988:	beq	2b9cc <__assert_fail@plt+0x19e28>
   2b98c:	mov	r4, r0
   2b990:	bl	119b8 <__errno_location@plt>
   2b994:	mov	r5, r0
   2b998:	ldr	r6, [r0]
   2b99c:	ldrb	r3, [r4, #4]
   2b9a0:	cmp	r3, #0
   2b9a4:	addne	r0, r4, #5
   2b9a8:	moveq	r0, #0
   2b9ac:	bl	2b694 <__assert_fail@plt+0x19af0>
   2b9b0:	cmp	r0, #0
   2b9b4:	beq	2b9d4 <__assert_fail@plt+0x19e30>
   2b9b8:	ldr	r6, [r5]
   2b9bc:	mov	r7, #0
   2b9c0:	mov	r0, r4
   2b9c4:	bl	2b898 <__assert_fail@plt+0x19cf4>
   2b9c8:	str	r6, [r5]
   2b9cc:	mov	r0, r7
   2b9d0:	pop	{r4, r5, r6, r7, r8, pc}
   2b9d4:	bl	11844 <tzset@plt>
   2b9d8:	mov	r7, #1
   2b9dc:	b	2b9c0 <__assert_fail@plt+0x19e1c>
   2b9e0:	push	{r4, r5, r6, r7, r8, lr}
   2b9e4:	mov	r6, r1
   2b9e8:	mov	r4, r2
   2b9ec:	subs	r5, r0, #0
   2b9f0:	beq	2ba48 <__assert_fail@plt+0x19ea4>
   2b9f4:	mov	r0, r5
   2b9f8:	bl	2b8c4 <__assert_fail@plt+0x19d20>
   2b9fc:	subs	r7, r0, #0
   2ba00:	beq	2ba5c <__assert_fail@plt+0x19eb8>
   2ba04:	mov	r1, r4
   2ba08:	mov	r0, r6
   2ba0c:	bl	117fc <localtime_r@plt>
   2ba10:	subs	r6, r0, #0
   2ba14:	beq	2ba64 <__assert_fail@plt+0x19ec0>
   2ba18:	mov	r1, r4
   2ba1c:	mov	r0, r5
   2ba20:	bl	2b774 <__assert_fail@plt+0x19bd0>
   2ba24:	mov	r5, r0
   2ba28:	mov	r0, r7
   2ba2c:	bl	2b97c <__assert_fail@plt+0x19dd8>
   2ba30:	and	r0, r0, r5
   2ba34:	uxtb	r0, r0
   2ba38:	cmp	r0, #0
   2ba3c:	moveq	r4, #0
   2ba40:	mov	r0, r4
   2ba44:	pop	{r4, r5, r6, r7, r8, pc}
   2ba48:	mov	r1, r2
   2ba4c:	mov	r0, r6
   2ba50:	bl	116e8 <gmtime_r@plt>
   2ba54:	mov	r4, r0
   2ba58:	b	2ba40 <__assert_fail@plt+0x19e9c>
   2ba5c:	mov	r4, #0
   2ba60:	b	2ba40 <__assert_fail@plt+0x19e9c>
   2ba64:	mov	r0, r7
   2ba68:	bl	2b97c <__assert_fail@plt+0x19dd8>
   2ba6c:	mov	r4, r6
   2ba70:	b	2ba40 <__assert_fail@plt+0x19e9c>
   2ba74:	push	{r4, r5, r6, r7, lr}
   2ba78:	sub	sp, sp, #52	; 0x34
   2ba7c:	mov	r4, r1
   2ba80:	subs	r5, r0, #0
   2ba84:	beq	2bb40 <__assert_fail@plt+0x19f9c>
   2ba88:	mov	r0, r5
   2ba8c:	bl	2b8c4 <__assert_fail@plt+0x19d20>
   2ba90:	subs	r7, r0, #0
   2ba94:	beq	2bb50 <__assert_fail@plt+0x19fac>
   2ba98:	ldr	r3, [r4]
   2ba9c:	str	r3, [sp, #4]
   2baa0:	ldr	r3, [r4, #4]
   2baa4:	str	r3, [sp, #8]
   2baa8:	ldr	r3, [r4, #8]
   2baac:	str	r3, [sp, #12]
   2bab0:	ldr	r3, [r4, #12]
   2bab4:	str	r3, [sp, #16]
   2bab8:	ldr	r3, [r4, #16]
   2babc:	str	r3, [sp, #20]
   2bac0:	ldr	r3, [r4, #20]
   2bac4:	str	r3, [sp, #24]
   2bac8:	mvn	r3, #0
   2bacc:	str	r3, [sp, #32]
   2bad0:	ldr	r3, [r4, #32]
   2bad4:	str	r3, [sp, #36]	; 0x24
   2bad8:	add	r0, sp, #4
   2badc:	bl	11724 <mktime@plt>
   2bae0:	mov	r6, r0
   2bae4:	ldr	r3, [sp, #32]
   2bae8:	cmp	r3, #0
   2baec:	blt	2bb58 <__assert_fail@plt+0x19fb4>
   2baf0:	add	r1, sp, #4
   2baf4:	mov	r0, r5
   2baf8:	bl	2b774 <__assert_fail@plt+0x19bd0>
   2bafc:	mov	r5, r0
   2bb00:	mov	r0, r7
   2bb04:	bl	2b97c <__assert_fail@plt+0x19dd8>
   2bb08:	and	r0, r0, r5
   2bb0c:	tst	r0, #255	; 0xff
   2bb10:	beq	2bb60 <__assert_fail@plt+0x19fbc>
   2bb14:	mov	ip, r4
   2bb18:	add	lr, sp, #4
   2bb1c:	ldm	lr!, {r0, r1, r2, r3}
   2bb20:	stmia	ip!, {r0, r1, r2, r3}
   2bb24:	ldm	lr!, {r0, r1, r2, r3}
   2bb28:	stmia	ip!, {r0, r1, r2, r3}
   2bb2c:	ldm	lr, {r0, r1, r2}
   2bb30:	stm	ip, {r0, r1, r2}
   2bb34:	mov	r0, r6
   2bb38:	add	sp, sp, #52	; 0x34
   2bb3c:	pop	{r4, r5, r6, r7, pc}
   2bb40:	mov	r0, r1
   2bb44:	bl	11acc <timegm@plt>
   2bb48:	mov	r6, r0
   2bb4c:	b	2bb34 <__assert_fail@plt+0x19f90>
   2bb50:	mvn	r6, #0
   2bb54:	b	2bb34 <__assert_fail@plt+0x19f90>
   2bb58:	mov	r0, r7
   2bb5c:	bl	2b97c <__assert_fail@plt+0x19dd8>
   2bb60:	mvn	r6, #0
   2bb64:	b	2bb34 <__assert_fail@plt+0x19f90>
   2bb68:	push	{r4, r5, r6, r7, r8, lr}
   2bb6c:	mov	r4, r0
   2bb70:	cmp	r0, #2
   2bb74:	bls	2bb80 <__assert_fail@plt+0x19fdc>
   2bb78:	mov	r0, r4
   2bb7c:	pop	{r4, r5, r6, r7, r8, pc}
   2bb80:	bl	2e2e4 <__assert_fail@plt+0x1c740>
   2bb84:	mov	r6, r0
   2bb88:	bl	119b8 <__errno_location@plt>
   2bb8c:	mov	r5, r0
   2bb90:	ldr	r7, [r0]
   2bb94:	mov	r0, r4
   2bb98:	bl	11b80 <close@plt>
   2bb9c:	str	r7, [r5]
   2bba0:	mov	r4, r6
   2bba4:	b	2bb78 <__assert_fail@plt+0x19fd4>
   2bba8:	push	{r4, r5, r6, lr}
   2bbac:	sub	sp, sp, #32
   2bbb0:	mov	r4, r0
   2bbb4:	ldr	r5, [sp, #48]	; 0x30
   2bbb8:	ldr	r6, [sp, #52]	; 0x34
   2bbbc:	cmp	r1, #0
   2bbc0:	beq	2bc78 <__assert_fail@plt+0x1a0d4>
   2bbc4:	str	r3, [sp, #4]
   2bbc8:	str	r2, [sp]
   2bbcc:	mov	r3, r1
   2bbd0:	ldr	r2, [pc, #940]	; 2bf84 <__assert_fail@plt+0x1a3e0>
   2bbd4:	mov	r1, #1
   2bbd8:	bl	11a18 <__fprintf_chk@plt>
   2bbdc:	mov	r2, #5
   2bbe0:	ldr	r1, [pc, #928]	; 2bf88 <__assert_fail@plt+0x1a3e4>
   2bbe4:	mov	r0, #0
   2bbe8:	bl	117d8 <dcgettext@plt>
   2bbec:	ldr	r3, [pc, #920]	; 2bf8c <__assert_fail@plt+0x1a3e8>
   2bbf0:	str	r3, [sp]
   2bbf4:	mov	r3, r0
   2bbf8:	ldr	r2, [pc, #912]	; 2bf90 <__assert_fail@plt+0x1a3ec>
   2bbfc:	mov	r1, #1
   2bc00:	mov	r0, r4
   2bc04:	bl	11a18 <__fprintf_chk@plt>
   2bc08:	mov	r1, r4
   2bc0c:	mov	r0, #10
   2bc10:	bl	117cc <fputc_unlocked@plt>
   2bc14:	mov	r2, #5
   2bc18:	ldr	r1, [pc, #884]	; 2bf94 <__assert_fail@plt+0x1a3f0>
   2bc1c:	mov	r0, #0
   2bc20:	bl	117d8 <dcgettext@plt>
   2bc24:	ldr	r3, [pc, #876]	; 2bf98 <__assert_fail@plt+0x1a3f4>
   2bc28:	mov	r2, r0
   2bc2c:	mov	r1, #1
   2bc30:	mov	r0, r4
   2bc34:	bl	11a18 <__fprintf_chk@plt>
   2bc38:	mov	r1, r4
   2bc3c:	mov	r0, #10
   2bc40:	bl	117cc <fputc_unlocked@plt>
   2bc44:	cmp	r6, #9
   2bc48:	ldrls	pc, [pc, r6, lsl #2]
   2bc4c:	b	2bf1c <__assert_fail@plt+0x1a378>
   2bc50:			; <UNDEFINED> instruction: 0x0002bcb4
   2bc54:	muleq	r2, r0, ip
   2bc58:			; <UNDEFINED> instruction: 0x0002bcbc
   2bc5c:	andeq	fp, r2, ip, ror #25
   2bc60:	andeq	fp, r2, r4, lsr #26
   2bc64:	andeq	fp, r2, r4, ror #26
   2bc68:	andeq	fp, r2, ip, lsr #27
   2bc6c:	strdeq	fp, [r2], -ip
   2bc70:	andeq	fp, r2, r4, asr lr
   2bc74:			; <UNDEFINED> instruction: 0x0002beb4
   2bc78:	str	r3, [sp]
   2bc7c:	mov	r3, r2
   2bc80:	ldr	r2, [pc, #788]	; 2bf9c <__assert_fail@plt+0x1a3f8>
   2bc84:	mov	r1, #1
   2bc88:	bl	11a18 <__fprintf_chk@plt>
   2bc8c:	b	2bbdc <__assert_fail@plt+0x1a038>
   2bc90:	mov	r2, #5
   2bc94:	ldr	r1, [pc, #772]	; 2bfa0 <__assert_fail@plt+0x1a3fc>
   2bc98:	mov	r0, #0
   2bc9c:	bl	117d8 <dcgettext@plt>
   2bca0:	ldr	r3, [r5]
   2bca4:	mov	r2, r0
   2bca8:	mov	r1, #1
   2bcac:	mov	r0, r4
   2bcb0:	bl	11a18 <__fprintf_chk@plt>
   2bcb4:	add	sp, sp, #32
   2bcb8:	pop	{r4, r5, r6, pc}
   2bcbc:	mov	r2, #5
   2bcc0:	ldr	r1, [pc, #732]	; 2bfa4 <__assert_fail@plt+0x1a400>
   2bcc4:	mov	r0, #0
   2bcc8:	bl	117d8 <dcgettext@plt>
   2bccc:	ldr	r3, [r5]
   2bcd0:	ldr	r2, [r5, #4]
   2bcd4:	str	r2, [sp]
   2bcd8:	mov	r2, r0
   2bcdc:	mov	r1, #1
   2bce0:	mov	r0, r4
   2bce4:	bl	11a18 <__fprintf_chk@plt>
   2bce8:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bcec:	mov	r2, #5
   2bcf0:	ldr	r1, [pc, #688]	; 2bfa8 <__assert_fail@plt+0x1a404>
   2bcf4:	mov	r0, #0
   2bcf8:	bl	117d8 <dcgettext@plt>
   2bcfc:	ldr	r3, [r5]
   2bd00:	ldr	r2, [r5, #8]
   2bd04:	str	r2, [sp, #4]
   2bd08:	ldr	r2, [r5, #4]
   2bd0c:	str	r2, [sp]
   2bd10:	mov	r2, r0
   2bd14:	mov	r1, #1
   2bd18:	mov	r0, r4
   2bd1c:	bl	11a18 <__fprintf_chk@plt>
   2bd20:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bd24:	mov	r2, #5
   2bd28:	ldr	r1, [pc, #636]	; 2bfac <__assert_fail@plt+0x1a408>
   2bd2c:	mov	r0, #0
   2bd30:	bl	117d8 <dcgettext@plt>
   2bd34:	ldr	r3, [r5]
   2bd38:	ldr	r2, [r5, #12]
   2bd3c:	str	r2, [sp, #8]
   2bd40:	ldr	r2, [r5, #8]
   2bd44:	str	r2, [sp, #4]
   2bd48:	ldr	r2, [r5, #4]
   2bd4c:	str	r2, [sp]
   2bd50:	mov	r2, r0
   2bd54:	mov	r1, #1
   2bd58:	mov	r0, r4
   2bd5c:	bl	11a18 <__fprintf_chk@plt>
   2bd60:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bd64:	mov	r2, #5
   2bd68:	ldr	r1, [pc, #576]	; 2bfb0 <__assert_fail@plt+0x1a40c>
   2bd6c:	mov	r0, #0
   2bd70:	bl	117d8 <dcgettext@plt>
   2bd74:	ldr	r3, [r5]
   2bd78:	ldr	r2, [r5, #16]
   2bd7c:	str	r2, [sp, #12]
   2bd80:	ldr	r2, [r5, #12]
   2bd84:	str	r2, [sp, #8]
   2bd88:	ldr	r2, [r5, #8]
   2bd8c:	str	r2, [sp, #4]
   2bd90:	ldr	r2, [r5, #4]
   2bd94:	str	r2, [sp]
   2bd98:	mov	r2, r0
   2bd9c:	mov	r1, #1
   2bda0:	mov	r0, r4
   2bda4:	bl	11a18 <__fprintf_chk@plt>
   2bda8:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bdac:	mov	r2, #5
   2bdb0:	ldr	r1, [pc, #508]	; 2bfb4 <__assert_fail@plt+0x1a410>
   2bdb4:	mov	r0, #0
   2bdb8:	bl	117d8 <dcgettext@plt>
   2bdbc:	ldr	r3, [r5]
   2bdc0:	ldr	r2, [r5, #20]
   2bdc4:	str	r2, [sp, #16]
   2bdc8:	ldr	r2, [r5, #16]
   2bdcc:	str	r2, [sp, #12]
   2bdd0:	ldr	r2, [r5, #12]
   2bdd4:	str	r2, [sp, #8]
   2bdd8:	ldr	r2, [r5, #8]
   2bddc:	str	r2, [sp, #4]
   2bde0:	ldr	r2, [r5, #4]
   2bde4:	str	r2, [sp]
   2bde8:	mov	r2, r0
   2bdec:	mov	r1, #1
   2bdf0:	mov	r0, r4
   2bdf4:	bl	11a18 <__fprintf_chk@plt>
   2bdf8:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bdfc:	mov	r2, #5
   2be00:	ldr	r1, [pc, #432]	; 2bfb8 <__assert_fail@plt+0x1a414>
   2be04:	mov	r0, #0
   2be08:	bl	117d8 <dcgettext@plt>
   2be0c:	ldr	r3, [r5]
   2be10:	ldr	r2, [r5, #24]
   2be14:	str	r2, [sp, #20]
   2be18:	ldr	r2, [r5, #20]
   2be1c:	str	r2, [sp, #16]
   2be20:	ldr	r2, [r5, #16]
   2be24:	str	r2, [sp, #12]
   2be28:	ldr	r2, [r5, #12]
   2be2c:	str	r2, [sp, #8]
   2be30:	ldr	r2, [r5, #8]
   2be34:	str	r2, [sp, #4]
   2be38:	ldr	r2, [r5, #4]
   2be3c:	str	r2, [sp]
   2be40:	mov	r2, r0
   2be44:	mov	r1, #1
   2be48:	mov	r0, r4
   2be4c:	bl	11a18 <__fprintf_chk@plt>
   2be50:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2be54:	mov	r2, #5
   2be58:	ldr	r1, [pc, #348]	; 2bfbc <__assert_fail@plt+0x1a418>
   2be5c:	mov	r0, #0
   2be60:	bl	117d8 <dcgettext@plt>
   2be64:	ldr	r3, [r5]
   2be68:	ldr	r2, [r5, #28]
   2be6c:	str	r2, [sp, #24]
   2be70:	ldr	r2, [r5, #24]
   2be74:	str	r2, [sp, #20]
   2be78:	ldr	r2, [r5, #20]
   2be7c:	str	r2, [sp, #16]
   2be80:	ldr	r2, [r5, #16]
   2be84:	str	r2, [sp, #12]
   2be88:	ldr	r2, [r5, #12]
   2be8c:	str	r2, [sp, #8]
   2be90:	ldr	r2, [r5, #8]
   2be94:	str	r2, [sp, #4]
   2be98:	ldr	r2, [r5, #4]
   2be9c:	str	r2, [sp]
   2bea0:	mov	r2, r0
   2bea4:	mov	r1, #1
   2bea8:	mov	r0, r4
   2beac:	bl	11a18 <__fprintf_chk@plt>
   2beb0:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2beb4:	mov	r2, #5
   2beb8:	ldr	r1, [pc, #256]	; 2bfc0 <__assert_fail@plt+0x1a41c>
   2bebc:	mov	r0, #0
   2bec0:	bl	117d8 <dcgettext@plt>
   2bec4:	ldr	r3, [r5]
   2bec8:	ldr	r2, [r5, #32]
   2becc:	str	r2, [sp, #28]
   2bed0:	ldr	r2, [r5, #28]
   2bed4:	str	r2, [sp, #24]
   2bed8:	ldr	r2, [r5, #24]
   2bedc:	str	r2, [sp, #20]
   2bee0:	ldr	r2, [r5, #20]
   2bee4:	str	r2, [sp, #16]
   2bee8:	ldr	r2, [r5, #16]
   2beec:	str	r2, [sp, #12]
   2bef0:	ldr	r2, [r5, #12]
   2bef4:	str	r2, [sp, #8]
   2bef8:	ldr	r2, [r5, #8]
   2befc:	str	r2, [sp, #4]
   2bf00:	ldr	r2, [r5, #4]
   2bf04:	str	r2, [sp]
   2bf08:	mov	r2, r0
   2bf0c:	mov	r1, #1
   2bf10:	mov	r0, r4
   2bf14:	bl	11a18 <__fprintf_chk@plt>
   2bf18:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bf1c:	mov	r2, #5
   2bf20:	ldr	r1, [pc, #156]	; 2bfc4 <__assert_fail@plt+0x1a420>
   2bf24:	mov	r0, #0
   2bf28:	bl	117d8 <dcgettext@plt>
   2bf2c:	ldr	r3, [r5]
   2bf30:	ldr	r2, [r5, #32]
   2bf34:	str	r2, [sp, #28]
   2bf38:	ldr	r2, [r5, #28]
   2bf3c:	str	r2, [sp, #24]
   2bf40:	ldr	r2, [r5, #24]
   2bf44:	str	r2, [sp, #20]
   2bf48:	ldr	r2, [r5, #20]
   2bf4c:	str	r2, [sp, #16]
   2bf50:	ldr	r2, [r5, #16]
   2bf54:	str	r2, [sp, #12]
   2bf58:	ldr	r2, [r5, #12]
   2bf5c:	str	r2, [sp, #8]
   2bf60:	ldr	r2, [r5, #8]
   2bf64:	str	r2, [sp, #4]
   2bf68:	ldr	r2, [r5, #4]
   2bf6c:	str	r2, [sp]
   2bf70:	mov	r2, r0
   2bf74:	mov	r1, #1
   2bf78:	mov	r0, r4
   2bf7c:	bl	11a18 <__fprintf_chk@plt>
   2bf80:	b	2bcb4 <__assert_fail@plt+0x1a110>
   2bf84:	andeq	r0, r3, r4, asr #25
   2bf88:	ldrdeq	r0, [r3], -r8
   2bf8c:	andeq	r0, r0, r6, ror #15
   2bf90:			; <UNDEFINED> instruction: 0x00030fb0
   2bf94:	ldrdeq	r0, [r3], -ip
   2bf98:	andeq	r0, r3, r8, lsl #27
   2bf9c:	ldrdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   2bfa0:	andeq	r0, r3, ip, lsr #27
   2bfa4:			; <UNDEFINED> instruction: 0x00030dbc
   2bfa8:	ldrdeq	r0, [r3], -r4
   2bfac:	strdeq	r0, [r3], -r0	; <UNPREDICTABLE>
   2bfb0:	andeq	r0, r3, r0, lsl lr
   2bfb4:	andeq	r0, r3, r4, lsr lr
   2bfb8:	andeq	r0, r3, ip, asr lr
   2bfbc:	andeq	r0, r3, r8, lsl #29
   2bfc0:			; <UNDEFINED> instruction: 0x00030eb8
   2bfc4:	andeq	r0, r3, ip, ror #29
   2bfc8:	push	{r4, r5, lr}
   2bfcc:	sub	sp, sp, #12
   2bfd0:	ldr	r5, [sp, #24]
   2bfd4:	ldr	ip, [r5]
   2bfd8:	cmp	ip, #0
   2bfdc:	beq	2c00c <__assert_fail@plt+0x1a468>
   2bfe0:	mov	lr, r5
   2bfe4:	mov	ip, #0
   2bfe8:	add	ip, ip, #1
   2bfec:	ldr	r4, [lr, #4]!
   2bff0:	cmp	r4, #0
   2bff4:	bne	2bfe8 <__assert_fail@plt+0x1a444>
   2bff8:	str	ip, [sp, #4]
   2bffc:	str	r5, [sp]
   2c000:	bl	2bba8 <__assert_fail@plt+0x1a004>
   2c004:	add	sp, sp, #12
   2c008:	pop	{r4, r5, pc}
   2c00c:	mov	ip, #0
   2c010:	b	2bff8 <__assert_fail@plt+0x1a454>
   2c014:	push	{r4, r5, lr}
   2c018:	sub	sp, sp, #52	; 0x34
   2c01c:	ldr	r4, [sp, #64]	; 0x40
   2c020:	sub	r4, r4, #4
   2c024:	add	r5, sp, #4
   2c028:	mov	ip, #0
   2c02c:	ldr	lr, [r4, #4]!
   2c030:	str	lr, [r5, #4]!
   2c034:	cmp	lr, #0
   2c038:	beq	2c048 <__assert_fail@plt+0x1a4a4>
   2c03c:	add	ip, ip, #1
   2c040:	cmp	ip, #10
   2c044:	bne	2c02c <__assert_fail@plt+0x1a488>
   2c048:	str	ip, [sp, #4]
   2c04c:	add	ip, sp, #8
   2c050:	str	ip, [sp]
   2c054:	bl	2bba8 <__assert_fail@plt+0x1a004>
   2c058:	add	sp, sp, #52	; 0x34
   2c05c:	pop	{r4, r5, pc}
   2c060:	push	{r3}		; (str r3, [sp, #-4]!)
   2c064:	push	{lr}		; (str lr, [sp, #-4]!)
   2c068:	sub	sp, sp, #16
   2c06c:	add	r3, sp, #24
   2c070:	str	r3, [sp, #12]
   2c074:	str	r3, [sp]
   2c078:	ldr	r3, [sp, #20]
   2c07c:	bl	2c014 <__assert_fail@plt+0x1a470>
   2c080:	add	sp, sp, #16
   2c084:	pop	{lr}		; (ldr lr, [sp], #4)
   2c088:	add	sp, sp, #4
   2c08c:	bx	lr
   2c090:	push	{r4, lr}
   2c094:	ldr	r3, [pc, #112]	; 2c10c <__assert_fail@plt+0x1a568>
   2c098:	ldr	r1, [r3]
   2c09c:	mov	r0, #10
   2c0a0:	bl	117cc <fputc_unlocked@plt>
   2c0a4:	mov	r2, #5
   2c0a8:	ldr	r1, [pc, #96]	; 2c110 <__assert_fail@plt+0x1a56c>
   2c0ac:	mov	r0, #0
   2c0b0:	bl	117d8 <dcgettext@plt>
   2c0b4:	ldr	r2, [pc, #88]	; 2c114 <__assert_fail@plt+0x1a570>
   2c0b8:	mov	r1, r0
   2c0bc:	mov	r0, #1
   2c0c0:	bl	11a00 <__printf_chk@plt>
   2c0c4:	mov	r2, #5
   2c0c8:	ldr	r1, [pc, #72]	; 2c118 <__assert_fail@plt+0x1a574>
   2c0cc:	mov	r0, #0
   2c0d0:	bl	117d8 <dcgettext@plt>
   2c0d4:	ldr	r3, [pc, #64]	; 2c11c <__assert_fail@plt+0x1a578>
   2c0d8:	ldr	r2, [pc, #64]	; 2c120 <__assert_fail@plt+0x1a57c>
   2c0dc:	mov	r1, r0
   2c0e0:	mov	r0, #1
   2c0e4:	bl	11a00 <__printf_chk@plt>
   2c0e8:	mov	r2, #5
   2c0ec:	ldr	r1, [pc, #48]	; 2c124 <__assert_fail@plt+0x1a580>
   2c0f0:	mov	r0, #0
   2c0f4:	bl	117d8 <dcgettext@plt>
   2c0f8:	ldr	r2, [pc, #40]	; 2c128 <__assert_fail@plt+0x1a584>
   2c0fc:	mov	r1, r0
   2c100:	mov	r0, #1
   2c104:	bl	11a00 <__printf_chk@plt>
   2c108:	pop	{r4, pc}
   2c10c:	andeq	r2, r4, ip, lsr r2
   2c110:	andeq	r0, r3, r8, lsr #30
   2c114:	andeq	r0, r3, ip, lsr pc
   2c118:	andeq	r0, r3, r4, asr pc
   2c11c:	strdeq	pc, [r2], -ip
   2c120:	andeq	pc, r2, r4, lsr #30
   2c124:	andeq	r0, r3, r8, ror #30
   2c128:	muleq	r3, r0, pc	; <UNPREDICTABLE>
   2c12c:	push	{r4, lr}
   2c130:	bl	2d404 <__assert_fail@plt+0x1b860>
   2c134:	cmp	r0, #0
   2c138:	popne	{r4, pc}
   2c13c:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c140:	push	{r4, lr}
   2c144:	bl	2d404 <__assert_fail@plt+0x1b860>
   2c148:	cmp	r0, #0
   2c14c:	popne	{r4, pc}
   2c150:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c154:	push	{r4, lr}
   2c158:	bl	2c12c <__assert_fail@plt+0x1a588>
   2c15c:	pop	{r4, pc}
   2c160:	push	{r4, r5, r6, lr}
   2c164:	mov	r5, r0
   2c168:	mov	r4, r1
   2c16c:	bl	2d434 <__assert_fail@plt+0x1b890>
   2c170:	cmp	r0, #0
   2c174:	popne	{r4, r5, r6, pc}
   2c178:	adds	r4, r4, #0
   2c17c:	movne	r4, #1
   2c180:	cmp	r5, #0
   2c184:	orreq	r4, r4, #1
   2c188:	cmp	r4, #0
   2c18c:	popeq	{r4, r5, r6, pc}
   2c190:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c194:	push	{r4, lr}
   2c198:	cmp	r1, #0
   2c19c:	orreq	r1, r1, #1
   2c1a0:	bl	2d434 <__assert_fail@plt+0x1b890>
   2c1a4:	cmp	r0, #0
   2c1a8:	popne	{r4, pc}
   2c1ac:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c1b0:	push	{r4, r5, r6, lr}
   2c1b4:	mov	r6, r0
   2c1b8:	mov	r5, r1
   2c1bc:	mov	r4, r2
   2c1c0:	bl	2e1f0 <__assert_fail@plt+0x1c64c>
   2c1c4:	cmp	r0, #0
   2c1c8:	popne	{r4, r5, r6, pc}
   2c1cc:	cmp	r6, #0
   2c1d0:	beq	2c1e0 <__assert_fail@plt+0x1a63c>
   2c1d4:	cmp	r5, #0
   2c1d8:	cmpne	r4, #0
   2c1dc:	popeq	{r4, r5, r6, pc}
   2c1e0:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c1e4:	push	{r4, lr}
   2c1e8:	bl	2c1b0 <__assert_fail@plt+0x1a60c>
   2c1ec:	pop	{r4, pc}
   2c1f0:	push	{r4, lr}
   2c1f4:	mov	ip, r1
   2c1f8:	mov	r3, r2
   2c1fc:	cmp	r2, #0
   2c200:	cmpne	r1, #0
   2c204:	moveq	r3, #1
   2c208:	moveq	ip, r3
   2c20c:	mov	r2, r3
   2c210:	mov	r1, ip
   2c214:	bl	2e1f0 <__assert_fail@plt+0x1c64c>
   2c218:	cmp	r0, #0
   2c21c:	popne	{r4, pc}
   2c220:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c224:	push	{r4, lr}
   2c228:	mov	r2, r1
   2c22c:	mov	r1, r0
   2c230:	mov	r0, #0
   2c234:	bl	2c1b0 <__assert_fail@plt+0x1a60c>
   2c238:	pop	{r4, pc}
   2c23c:	push	{r4, lr}
   2c240:	mov	r2, r1
   2c244:	mov	r1, r0
   2c248:	mov	r0, #0
   2c24c:	bl	2c1f0 <__assert_fail@plt+0x1a64c>
   2c250:	pop	{r4, pc}
   2c254:	push	{r4, r5, r6, r7, r8, lr}
   2c258:	mov	r5, r1
   2c25c:	mov	r6, r2
   2c260:	ldr	r4, [r1]
   2c264:	subs	r7, r0, #0
   2c268:	beq	2c284 <__assert_fail@plt+0x1a6e0>
   2c26c:	lsr	r2, r4, #1
   2c270:	add	r3, r2, #1
   2c274:	mvn	r3, r3
   2c278:	cmp	r4, r3
   2c27c:	bls	2c2a8 <__assert_fail@plt+0x1a704>
   2c280:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c284:	cmp	r4, #0
   2c288:	bne	2c2b0 <__assert_fail@plt+0x1a70c>
   2c28c:	mov	r1, r2
   2c290:	mov	r0, #64	; 0x40
   2c294:	bl	2e2f8 <__assert_fail@plt+0x1c754>
   2c298:	cmp	r0, #0
   2c29c:	movne	r4, r0
   2c2a0:	addeq	r4, r0, #1
   2c2a4:	b	2c2b0 <__assert_fail@plt+0x1a70c>
   2c2a8:	add	r4, r4, #1
   2c2ac:	add	r4, r4, r2
   2c2b0:	mov	r2, r6
   2c2b4:	mov	r1, r4
   2c2b8:	mov	r0, r7
   2c2bc:	bl	2c1b0 <__assert_fail@plt+0x1a60c>
   2c2c0:	str	r4, [r5]
   2c2c4:	pop	{r4, r5, r6, r7, r8, pc}
   2c2c8:	push	{r4, lr}
   2c2cc:	mov	r2, #1
   2c2d0:	bl	2c254 <__assert_fail@plt+0x1a6b0>
   2c2d4:	pop	{r4, pc}
   2c2d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c2dc:	sub	sp, sp, #12
   2c2e0:	mov	fp, r0
   2c2e4:	mov	sl, r1
   2c2e8:	mov	r9, r2
   2c2ec:	mov	r7, r3
   2c2f0:	ldr	r6, [sp, #48]	; 0x30
   2c2f4:	ldr	r5, [r1]
   2c2f8:	asrs	r4, r5, #1
   2c2fc:	bmi	2c458 <__assert_fail@plt+0x1a8b4>
   2c300:	cmp	r5, #0
   2c304:	blt	2c46c <__assert_fail@plt+0x1a8c8>
   2c308:	mvn	r3, #-2147483648	; 0x80000000
   2c30c:	sub	r3, r3, r4
   2c310:	cmp	r5, r3
   2c314:	movle	r3, #0
   2c318:	movgt	r3, #1
   2c31c:	cmp	r3, #0
   2c320:	addeq	r4, r4, r5
   2c324:	mvnne	r4, #-2147483648	; 0x80000000
   2c328:	mvn	r8, r7
   2c32c:	lsr	r8, r8, #31
   2c330:	cmp	r7, r4
   2c334:	movge	r3, #0
   2c338:	andlt	r3, r8, #1
   2c33c:	cmp	r3, #0
   2c340:	movne	r4, r7
   2c344:	cmp	r6, #0
   2c348:	blt	2c480 <__assert_fail@plt+0x1a8dc>
   2c34c:	cmp	r6, #0
   2c350:	beq	2c52c <__assert_fail@plt+0x1a988>
   2c354:	cmp	r4, #0
   2c358:	blt	2c4dc <__assert_fail@plt+0x1a938>
   2c35c:	mov	r1, r6
   2c360:	mvn	r0, #-2147483648	; 0x80000000
   2c364:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c368:	cmp	r0, r4
   2c36c:	movge	r0, #0
   2c370:	movlt	r0, #1
   2c374:	cmp	r0, #0
   2c378:	mvnne	r3, #-2147483648	; 0x80000000
   2c37c:	strne	r3, [sp, #4]
   2c380:	beq	2c514 <__assert_fail@plt+0x1a970>
   2c384:	mov	r1, r6
   2c388:	ldr	r0, [sp, #4]
   2c38c:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c390:	mov	r4, r0
   2c394:	mov	r1, r6
   2c398:	ldr	r0, [sp, #4]
   2c39c:	bl	2e724 <__assert_fail@plt+0x1cb80>
   2c3a0:	ldr	r3, [sp, #4]
   2c3a4:	sub	r1, r3, r1
   2c3a8:	cmp	fp, #0
   2c3ac:	moveq	r3, #0
   2c3b0:	streq	r3, [sl]
   2c3b4:	sub	r3, r4, r5
   2c3b8:	cmp	r3, r9
   2c3bc:	bge	2c444 <__assert_fail@plt+0x1a8a0>
   2c3c0:	cmp	r9, #0
   2c3c4:	blt	2c538 <__assert_fail@plt+0x1a994>
   2c3c8:	cmp	r5, #0
   2c3cc:	blt	2c54c <__assert_fail@plt+0x1a9a8>
   2c3d0:	mvn	r3, #-2147483648	; 0x80000000
   2c3d4:	sub	r3, r3, r9
   2c3d8:	cmp	r5, r3
   2c3dc:	movle	r3, #0
   2c3e0:	movgt	r3, #1
   2c3e4:	cmp	r3, #0
   2c3e8:	bne	2c5f4 <__assert_fail@plt+0x1aa50>
   2c3ec:	add	r5, r5, r9
   2c3f0:	mov	r4, r5
   2c3f4:	cmp	r7, r5
   2c3f8:	movge	r7, #0
   2c3fc:	andlt	r7, r8, #1
   2c400:	cmp	r7, #0
   2c404:	bne	2c5f4 <__assert_fail@plt+0x1aa50>
   2c408:	cmp	r6, #0
   2c40c:	blt	2c560 <__assert_fail@plt+0x1a9bc>
   2c410:	cmp	r6, #0
   2c414:	beq	2c440 <__assert_fail@plt+0x1a89c>
   2c418:	cmp	r5, #0
   2c41c:	blt	2c5bc <__assert_fail@plt+0x1aa18>
   2c420:	mov	r1, r6
   2c424:	mvn	r0, #-2147483648	; 0x80000000
   2c428:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c42c:	cmp	r5, r0
   2c430:	movle	r0, #0
   2c434:	movgt	r0, #1
   2c438:	cmp	r0, #0
   2c43c:	bne	2c5f4 <__assert_fail@plt+0x1aa50>
   2c440:	mul	r1, r5, r6
   2c444:	mov	r0, fp
   2c448:	bl	2c160 <__assert_fail@plt+0x1a5bc>
   2c44c:	str	r4, [sl]
   2c450:	add	sp, sp, #12
   2c454:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c458:	rsb	r3, r4, #-2147483648	; 0x80000000
   2c45c:	cmp	r5, r3
   2c460:	movge	r3, #0
   2c464:	movlt	r3, #1
   2c468:	b	2c31c <__assert_fail@plt+0x1a778>
   2c46c:	rsb	r3, r5, #-2147483648	; 0x80000000
   2c470:	cmp	r4, r3
   2c474:	movge	r3, #0
   2c478:	movlt	r3, #1
   2c47c:	b	2c31c <__assert_fail@plt+0x1a778>
   2c480:	cmp	r4, #0
   2c484:	blt	2c4ac <__assert_fail@plt+0x1a908>
   2c488:	cmn	r6, #1
   2c48c:	beq	2c4c8 <__assert_fail@plt+0x1a924>
   2c490:	mov	r1, r6
   2c494:	mov	r0, #-2147483648	; 0x80000000
   2c498:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c49c:	cmp	r0, r4
   2c4a0:	movge	r0, #0
   2c4a4:	movlt	r0, #1
   2c4a8:	b	2c374 <__assert_fail@plt+0x1a7d0>
   2c4ac:	mov	r1, r6
   2c4b0:	mvn	r0, #-2147483648	; 0x80000000
   2c4b4:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c4b8:	cmp	r0, r4
   2c4bc:	movle	r0, #0
   2c4c0:	movgt	r0, #1
   2c4c4:	b	2c374 <__assert_fail@plt+0x1a7d0>
   2c4c8:	add	r0, r4, #-2147483648	; 0x80000000
   2c4cc:	cmp	r0, #0
   2c4d0:	movle	r0, #0
   2c4d4:	movgt	r0, #1
   2c4d8:	b	2c374 <__assert_fail@plt+0x1a7d0>
   2c4dc:	cmn	r4, #1
   2c4e0:	beq	2c500 <__assert_fail@plt+0x1a95c>
   2c4e4:	mov	r1, r4
   2c4e8:	mov	r0, #-2147483648	; 0x80000000
   2c4ec:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c4f0:	cmp	r6, r0
   2c4f4:	movle	r0, #0
   2c4f8:	movgt	r0, #1
   2c4fc:	b	2c374 <__assert_fail@plt+0x1a7d0>
   2c500:	add	r0, r6, #-2147483648	; 0x80000000
   2c504:	cmp	r0, #0
   2c508:	movle	r0, #0
   2c50c:	movgt	r0, #1
   2c510:	b	2c374 <__assert_fail@plt+0x1a7d0>
   2c514:	mul	r1, r6, r4
   2c518:	cmp	r1, #63	; 0x3f
   2c51c:	movle	r3, #64	; 0x40
   2c520:	strle	r3, [sp, #4]
   2c524:	bgt	2c3a8 <__assert_fail@plt+0x1a804>
   2c528:	b	2c384 <__assert_fail@plt+0x1a7e0>
   2c52c:	mov	r3, #64	; 0x40
   2c530:	str	r3, [sp, #4]
   2c534:	b	2c384 <__assert_fail@plt+0x1a7e0>
   2c538:	rsb	r3, r9, #-2147483648	; 0x80000000
   2c53c:	cmp	r5, r3
   2c540:	movge	r3, #0
   2c544:	movlt	r3, #1
   2c548:	b	2c3e4 <__assert_fail@plt+0x1a840>
   2c54c:	rsb	r3, r5, #-2147483648	; 0x80000000
   2c550:	cmp	r9, r3
   2c554:	movge	r3, #0
   2c558:	movlt	r3, #1
   2c55c:	b	2c3e4 <__assert_fail@plt+0x1a840>
   2c560:	cmp	r5, #0
   2c564:	blt	2c58c <__assert_fail@plt+0x1a9e8>
   2c568:	cmn	r6, #1
   2c56c:	beq	2c5a8 <__assert_fail@plt+0x1aa04>
   2c570:	mov	r1, r6
   2c574:	mov	r0, #-2147483648	; 0x80000000
   2c578:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c57c:	cmp	r5, r0
   2c580:	movle	r0, #0
   2c584:	movgt	r0, #1
   2c588:	b	2c438 <__assert_fail@plt+0x1a894>
   2c58c:	mov	r1, r6
   2c590:	mvn	r0, #-2147483648	; 0x80000000
   2c594:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c598:	cmp	r5, r0
   2c59c:	movge	r0, #0
   2c5a0:	movlt	r0, #1
   2c5a4:	b	2c438 <__assert_fail@plt+0x1a894>
   2c5a8:	add	r0, r5, #-2147483648	; 0x80000000
   2c5ac:	cmp	r0, #0
   2c5b0:	movle	r0, #0
   2c5b4:	movgt	r0, #1
   2c5b8:	b	2c438 <__assert_fail@plt+0x1a894>
   2c5bc:	cmn	r5, #1
   2c5c0:	beq	2c5e0 <__assert_fail@plt+0x1aa3c>
   2c5c4:	mov	r1, r5
   2c5c8:	mov	r0, #-2147483648	; 0x80000000
   2c5cc:	bl	2e504 <__assert_fail@plt+0x1c960>
   2c5d0:	cmp	r6, r0
   2c5d4:	movle	r0, #0
   2c5d8:	movgt	r0, #1
   2c5dc:	b	2c438 <__assert_fail@plt+0x1a894>
   2c5e0:	add	r0, r6, #-2147483648	; 0x80000000
   2c5e4:	cmp	r0, #0
   2c5e8:	movle	r0, #0
   2c5ec:	movgt	r0, #1
   2c5f0:	b	2c438 <__assert_fail@plt+0x1a894>
   2c5f4:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c5f8:	push	{r4, lr}
   2c5fc:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   2c600:	cmp	r0, #0
   2c604:	popne	{r4, pc}
   2c608:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c60c:	push	{r4, lr}
   2c610:	mov	r1, #1
   2c614:	bl	2c5f8 <__assert_fail@plt+0x1aa54>
   2c618:	pop	{r4, pc}
   2c61c:	push	{r4, lr}
   2c620:	bl	2d3b4 <__assert_fail@plt+0x1b810>
   2c624:	cmp	r0, #0
   2c628:	popne	{r4, pc}
   2c62c:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c630:	push	{r4, lr}
   2c634:	mov	r1, #1
   2c638:	bl	2c61c <__assert_fail@plt+0x1aa78>
   2c63c:	pop	{r4, pc}
   2c640:	push	{r4, r5, r6, lr}
   2c644:	mov	r5, r0
   2c648:	mov	r4, r1
   2c64c:	mov	r0, r1
   2c650:	bl	2c12c <__assert_fail@plt+0x1a588>
   2c654:	mov	r2, r4
   2c658:	mov	r1, r5
   2c65c:	bl	11784 <memcpy@plt>
   2c660:	pop	{r4, r5, r6, pc}
   2c664:	push	{r4, r5, r6, lr}
   2c668:	mov	r5, r0
   2c66c:	mov	r4, r1
   2c670:	mov	r0, r1
   2c674:	bl	2c140 <__assert_fail@plt+0x1a59c>
   2c678:	mov	r2, r4
   2c67c:	mov	r1, r5
   2c680:	bl	11784 <memcpy@plt>
   2c684:	pop	{r4, r5, r6, pc}
   2c688:	push	{r4, r5, r6, lr}
   2c68c:	mov	r5, r0
   2c690:	mov	r4, r1
   2c694:	add	r0, r1, #1
   2c698:	bl	2c140 <__assert_fail@plt+0x1a59c>
   2c69c:	mov	r2, #0
   2c6a0:	strb	r2, [r0, r4]
   2c6a4:	mov	r2, r4
   2c6a8:	mov	r1, r5
   2c6ac:	bl	11784 <memcpy@plt>
   2c6b0:	pop	{r4, r5, r6, pc}
   2c6b4:	push	{r4, lr}
   2c6b8:	mov	r4, r0
   2c6bc:	bl	11988 <strlen@plt>
   2c6c0:	add	r1, r0, #1
   2c6c4:	mov	r0, r4
   2c6c8:	bl	2c640 <__assert_fail@plt+0x1aa9c>
   2c6cc:	pop	{r4, pc}
   2c6d0:	push	{r4, lr}
   2c6d4:	ldr	r3, [pc, #40]	; 2c704 <__assert_fail@plt+0x1ab60>
   2c6d8:	ldr	r4, [r3]
   2c6dc:	mov	r2, #5
   2c6e0:	ldr	r1, [pc, #32]	; 2c708 <__assert_fail@plt+0x1ab64>
   2c6e4:	mov	r0, #0
   2c6e8:	bl	117d8 <dcgettext@plt>
   2c6ec:	mov	r3, r0
   2c6f0:	ldr	r2, [pc, #20]	; 2c70c <__assert_fail@plt+0x1ab68>
   2c6f4:	mov	r1, #0
   2c6f8:	mov	r0, r4
   2c6fc:	bl	118bc <error@plt>
   2c700:	bl	11b68 <abort@plt>
   2c704:	ldrdeq	r2, [r4], -r8
   2c708:	andeq	r0, r3, r0, ror #31
   2c70c:	andeq	r0, r3, r4, lsl #13
   2c710:	push	{r4, lr}
   2c714:	orr	r1, r1, #512	; 0x200
   2c718:	bl	189b4 <__assert_fail@plt+0x6e10>
   2c71c:	cmp	r0, #0
   2c720:	popne	{r4, pc}
   2c724:	bl	119b8 <__errno_location@plt>
   2c728:	ldr	r3, [r0]
   2c72c:	cmp	r3, #22
   2c730:	beq	2c738 <__assert_fail@plt+0x1ab94>
   2c734:	bl	2c6d0 <__assert_fail@plt+0x1ab2c>
   2c738:	ldr	r3, [pc, #12]	; 2c74c <__assert_fail@plt+0x1aba8>
   2c73c:	mov	r2, #41	; 0x29
   2c740:	ldr	r1, [pc, #8]	; 2c750 <__assert_fail@plt+0x1abac>
   2c744:	ldr	r0, [pc, #8]	; 2c754 <__assert_fail@plt+0x1abb0>
   2c748:	bl	11ba4 <__assert_fail@plt>
   2c74c:	strdeq	r0, [r3], -r4
   2c750:	andeq	r1, r3, r0
   2c754:	andeq	r1, r3, ip
   2c758:	ldr	r3, [r0, #48]	; 0x30
   2c75c:	and	r3, r3, #17
   2c760:	cmp	r3, #16
   2c764:	beq	2c788 <__assert_fail@plt+0x1abe4>
   2c768:	cmp	r3, #17
   2c76c:	beq	2c778 <__assert_fail@plt+0x1abd4>
   2c770:	mov	r0, #0
   2c774:	bx	lr
   2c778:	ldr	r0, [r1, #48]	; 0x30
   2c77c:	adds	r0, r0, #0
   2c780:	movne	r0, #1
   2c784:	bx	lr
   2c788:	mov	r0, #1
   2c78c:	bx	lr
   2c790:	push	{r4, r5, r6, r7, r8, lr}
   2c794:	mov	r5, r0
   2c798:	subs	r4, r1, #0
   2c79c:	blt	2c7f8 <__assert_fail@plt+0x1ac54>
   2c7a0:	cmp	r4, #0
   2c7a4:	beq	2c86c <__assert_fail@plt+0x1acc8>
   2c7a8:	ldrd	r6, [r0]
   2c7ac:	cmp	r6, #0
   2c7b0:	sbcs	r3, r7, #0
   2c7b4:	blt	2c8b0 <__assert_fail@plt+0x1ad0c>
   2c7b8:	mov	r2, r4
   2c7bc:	asr	r3, r4, #31
   2c7c0:	mvn	r0, #0
   2c7c4:	mvn	r1, #-2147483648	; 0x80000000
   2c7c8:	bl	2eafc <__assert_fail@plt+0x1cf58>
   2c7cc:	cmp	r0, r6
   2c7d0:	sbcs	r3, r1, r7
   2c7d4:	movlt	r3, #1
   2c7d8:	movge	r3, #0
   2c7dc:	cmp	r3, #0
   2c7e0:	mvnne	r2, #0
   2c7e4:	mvnne	r3, #-2147483648	; 0x80000000
   2c7e8:	beq	2c86c <__assert_fail@plt+0x1acc8>
   2c7ec:	strd	r2, [r5]
   2c7f0:	mov	r0, #1
   2c7f4:	pop	{r4, r5, r6, r7, r8, pc}
   2c7f8:	ldrd	r6, [r0]
   2c7fc:	cmp	r6, #0
   2c800:	sbcs	r3, r7, #0
   2c804:	blt	2c838 <__assert_fail@plt+0x1ac94>
   2c808:	cmn	r4, #1
   2c80c:	beq	2c894 <__assert_fail@plt+0x1acf0>
   2c810:	mov	r2, r4
   2c814:	asr	r3, r4, #31
   2c818:	mov	r0, #0
   2c81c:	mov	r1, #-2147483648	; 0x80000000
   2c820:	bl	2eafc <__assert_fail@plt+0x1cf58>
   2c824:	cmp	r0, r6
   2c828:	sbcs	r3, r1, r7
   2c82c:	movlt	r3, #1
   2c830:	movge	r3, #0
   2c834:	b	2c7dc <__assert_fail@plt+0x1ac38>
   2c838:	mov	r2, r4
   2c83c:	asr	r3, r4, #31
   2c840:	mvn	r0, #0
   2c844:	mvn	r1, #-2147483648	; 0x80000000
   2c848:	bl	2eafc <__assert_fail@plt+0x1cf58>
   2c84c:	cmp	r6, r0
   2c850:	sbcs	r3, r7, r1
   2c854:	movlt	r3, #1
   2c858:	movge	r3, #0
   2c85c:	cmp	r3, #0
   2c860:	movne	r2, #0
   2c864:	movne	r3, #-2147483648	; 0x80000000
   2c868:	bne	2c7ec <__assert_fail@plt+0x1ac48>
   2c86c:	asr	r3, r4, #31
   2c870:	ldr	r1, [r5, #4]
   2c874:	ldr	r2, [r5]
   2c878:	mul	r3, r3, r2
   2c87c:	mla	r1, r4, r1, r3
   2c880:	umull	r2, r3, r2, r4
   2c884:	add	r3, r1, r3
   2c888:	strd	r2, [r5]
   2c88c:	mov	r0, #0
   2c890:	pop	{r4, r5, r6, r7, r8, pc}
   2c894:	adds	r6, r6, #0
   2c898:	adc	r7, r7, #-2147483648	; 0x80000000
   2c89c:	cmp	r6, #1
   2c8a0:	sbcs	r3, r7, #0
   2c8a4:	movge	r3, #1
   2c8a8:	movlt	r3, #0
   2c8ac:	b	2c7dc <__assert_fail@plt+0x1ac38>
   2c8b0:	mvn	r2, #0
   2c8b4:	mvn	r3, #0
   2c8b8:	cmp	r7, r3
   2c8bc:	cmpeq	r6, r2
   2c8c0:	beq	2c8f4 <__assert_fail@plt+0x1ad50>
   2c8c4:	mov	r2, r6
   2c8c8:	mov	r3, r7
   2c8cc:	mov	r0, #0
   2c8d0:	mov	r1, #-2147483648	; 0x80000000
   2c8d4:	bl	2eafc <__assert_fail@plt+0x1cf58>
   2c8d8:	mov	r2, r4
   2c8dc:	asr	r3, r4, #31
   2c8e0:	cmp	r0, r4
   2c8e4:	sbcs	r3, r1, r3
   2c8e8:	movlt	r3, #1
   2c8ec:	movge	r3, #0
   2c8f0:	b	2c85c <__assert_fail@plt+0x1acb8>
   2c8f4:	asr	r3, r4, #31
   2c8f8:	adds	r2, r4, #0
   2c8fc:	adc	r3, r3, #-2147483648	; 0x80000000
   2c900:	cmp	r2, #1
   2c904:	sbcs	r3, r3, #0
   2c908:	movge	r3, #1
   2c90c:	movlt	r3, #0
   2c910:	b	2c85c <__assert_fail@plt+0x1acb8>
   2c914:	push	{r4, r5, r6, r7, r8, lr}
   2c918:	subs	r4, r2, #0
   2c91c:	beq	2c94c <__assert_fail@plt+0x1ada8>
   2c920:	mov	r7, r1
   2c924:	mov	r6, r0
   2c928:	mov	r5, #0
   2c92c:	mov	r1, r7
   2c930:	mov	r0, r6
   2c934:	bl	2c790 <__assert_fail@plt+0x1abec>
   2c938:	orr	r5, r5, r0
   2c93c:	subs	r4, r4, #1
   2c940:	bne	2c92c <__assert_fail@plt+0x1ad88>
   2c944:	mov	r0, r5
   2c948:	pop	{r4, r5, r6, r7, r8, pc}
   2c94c:	mov	r5, #0
   2c950:	b	2c944 <__assert_fail@plt+0x1ada0>
   2c954:	push	{r4, r5, r6, r7, r8, lr}
   2c958:	sub	sp, sp, #16
   2c95c:	cmp	r2, #36	; 0x24
   2c960:	bhi	2c9cc <__assert_fail@plt+0x1ae28>
   2c964:	mov	r6, r0
   2c968:	mov	r4, r1
   2c96c:	mov	r5, r2
   2c970:	mov	r8, r3
   2c974:	cmp	r1, #0
   2c978:	addeq	r4, sp, #12
   2c97c:	bl	119b8 <__errno_location@plt>
   2c980:	mov	r7, r0
   2c984:	mov	r3, #0
   2c988:	str	r3, [r0]
   2c98c:	mov	r2, r5
   2c990:	mov	r1, r4
   2c994:	mov	r0, r6
   2c998:	bl	11af0 <__strtoll_internal@plt>
   2c99c:	strd	r0, [sp]
   2c9a0:	ldr	r5, [r4]
   2c9a4:	cmp	r6, r5
   2c9a8:	beq	2c9e0 <__assert_fail@plt+0x1ae3c>
   2c9ac:	ldr	r3, [r7]
   2c9b0:	cmp	r3, #0
   2c9b4:	beq	2ca28 <__assert_fail@plt+0x1ae84>
   2c9b8:	cmp	r3, #34	; 0x22
   2c9bc:	moveq	r6, #1
   2c9c0:	beq	2ca2c <__assert_fail@plt+0x1ae88>
   2c9c4:	mov	r6, #4
   2c9c8:	b	2cd80 <__assert_fail@plt+0x1b1dc>
   2c9cc:	ldr	r3, [pc, #952]	; 2cd8c <__assert_fail@plt+0x1b1e8>
   2c9d0:	mov	r2, #85	; 0x55
   2c9d4:	ldr	r1, [pc, #948]	; 2cd90 <__assert_fail@plt+0x1b1ec>
   2c9d8:	ldr	r0, [pc, #948]	; 2cd94 <__assert_fail@plt+0x1b1f0>
   2c9dc:	bl	11ba4 <__assert_fail@plt>
   2c9e0:	ldr	r3, [sp, #40]	; 0x28
   2c9e4:	cmp	r3, #0
   2c9e8:	moveq	r6, #4
   2c9ec:	beq	2cd80 <__assert_fail@plt+0x1b1dc>
   2c9f0:	ldrb	r1, [r5]
   2c9f4:	cmp	r1, #0
   2c9f8:	moveq	r6, #4
   2c9fc:	beq	2cd80 <__assert_fail@plt+0x1b1dc>
   2ca00:	mov	r0, r3
   2ca04:	bl	11994 <strchr@plt>
   2ca08:	cmp	r0, #0
   2ca0c:	moveq	r6, #4
   2ca10:	beq	2cd80 <__assert_fail@plt+0x1b1dc>
   2ca14:	mov	r2, #1
   2ca18:	mov	r3, #0
   2ca1c:	strd	r2, [sp]
   2ca20:	mov	r6, #0
   2ca24:	b	2ca38 <__assert_fail@plt+0x1ae94>
   2ca28:	mov	r6, #0
   2ca2c:	ldr	r3, [sp, #40]	; 0x28
   2ca30:	cmp	r3, #0
   2ca34:	beq	2cb28 <__assert_fail@plt+0x1af84>
   2ca38:	ldrb	r7, [r5]
   2ca3c:	cmp	r7, #0
   2ca40:	beq	2cd78 <__assert_fail@plt+0x1b1d4>
   2ca44:	mov	r1, r7
   2ca48:	ldr	r0, [sp, #40]	; 0x28
   2ca4c:	bl	11994 <strchr@plt>
   2ca50:	cmp	r0, #0
   2ca54:	beq	2cb30 <__assert_fail@plt+0x1af8c>
   2ca58:	sub	r3, r7, #69	; 0x45
   2ca5c:	cmp	r3, #47	; 0x2f
   2ca60:	ldrls	pc, [pc, r3, lsl #2]
   2ca64:	b	2cb9c <__assert_fail@plt+0x1aff8>
   2ca68:	andeq	ip, r2, r0, asr #22
   2ca6c:	muleq	r2, ip, fp
   2ca70:	andeq	ip, r2, r0, asr #22
   2ca74:	muleq	r2, ip, fp
   2ca78:	muleq	r2, ip, fp
   2ca7c:	muleq	r2, ip, fp
   2ca80:	andeq	ip, r2, r0, asr #22
   2ca84:	muleq	r2, ip, fp
   2ca88:	andeq	ip, r2, r0, asr #22
   2ca8c:	muleq	r2, ip, fp
   2ca90:	muleq	r2, ip, fp
   2ca94:	andeq	ip, r2, r0, asr #22
   2ca98:	muleq	r2, ip, fp
   2ca9c:	muleq	r2, ip, fp
   2caa0:	muleq	r2, ip, fp
   2caa4:	andeq	ip, r2, r0, asr #22
   2caa8:	muleq	r2, ip, fp
   2caac:	muleq	r2, ip, fp
   2cab0:	muleq	r2, ip, fp
   2cab4:	muleq	r2, ip, fp
   2cab8:	andeq	ip, r2, r0, asr #22
   2cabc:	andeq	ip, r2, r0, asr #22
   2cac0:	muleq	r2, ip, fp
   2cac4:	muleq	r2, ip, fp
   2cac8:	muleq	r2, ip, fp
   2cacc:	muleq	r2, ip, fp
   2cad0:	muleq	r2, ip, fp
   2cad4:	muleq	r2, ip, fp
   2cad8:	muleq	r2, ip, fp
   2cadc:	muleq	r2, ip, fp
   2cae0:	muleq	r2, ip, fp
   2cae4:	muleq	r2, ip, fp
   2cae8:	muleq	r2, ip, fp
   2caec:	muleq	r2, ip, fp
   2caf0:	andeq	ip, r2, r0, asr #22
   2caf4:	muleq	r2, ip, fp
   2caf8:	muleq	r2, ip, fp
   2cafc:	muleq	r2, ip, fp
   2cb00:	andeq	ip, r2, r0, asr #22
   2cb04:	muleq	r2, ip, fp
   2cb08:	andeq	ip, r2, r0, asr #22
   2cb0c:	muleq	r2, ip, fp
   2cb10:	muleq	r2, ip, fp
   2cb14:	muleq	r2, ip, fp
   2cb18:	muleq	r2, ip, fp
   2cb1c:	muleq	r2, ip, fp
   2cb20:	muleq	r2, ip, fp
   2cb24:	andeq	ip, r2, r0, asr #22
   2cb28:	strd	r0, [r8]
   2cb2c:	b	2cd80 <__assert_fail@plt+0x1b1dc>
   2cb30:	ldrd	r2, [sp]
   2cb34:	strd	r2, [r8]
   2cb38:	orr	r6, r6, #2
   2cb3c:	b	2cd80 <__assert_fail@plt+0x1b1dc>
   2cb40:	mov	r1, #48	; 0x30
   2cb44:	ldr	r0, [sp, #40]	; 0x28
   2cb48:	bl	11994 <strchr@plt>
   2cb4c:	cmp	r0, #0
   2cb50:	beq	2cc8c <__assert_fail@plt+0x1b0e8>
   2cb54:	ldrb	r3, [r5, #1]
   2cb58:	cmp	r3, #68	; 0x44
   2cb5c:	beq	2cb78 <__assert_fail@plt+0x1afd4>
   2cb60:	cmp	r3, #105	; 0x69
   2cb64:	beq	2cb84 <__assert_fail@plt+0x1afe0>
   2cb68:	cmp	r3, #66	; 0x42
   2cb6c:	movne	r5, #1
   2cb70:	movne	r1, #1024	; 0x400
   2cb74:	bne	2cba4 <__assert_fail@plt+0x1b000>
   2cb78:	mov	r5, #2
   2cb7c:	mov	r1, #1000	; 0x3e8
   2cb80:	b	2cba4 <__assert_fail@plt+0x1b000>
   2cb84:	ldrb	r5, [r5, #2]
   2cb88:	cmp	r5, #66	; 0x42
   2cb8c:	movne	r5, #1
   2cb90:	moveq	r5, #3
   2cb94:	mov	r1, #1024	; 0x400
   2cb98:	b	2cba4 <__assert_fail@plt+0x1b000>
   2cb9c:	mov	r5, #1
   2cba0:	mov	r1, #1024	; 0x400
   2cba4:	sub	r7, r7, #66	; 0x42
   2cba8:	cmp	r7, #53	; 0x35
   2cbac:	ldrls	pc, [pc, r7, lsl #2]
   2cbb0:	b	2cd48 <__assert_fail@plt+0x1b1a4>
   2cbb4:	andeq	ip, r2, r8, lsr #25
   2cbb8:	andeq	ip, r2, r8, asr #26
   2cbbc:	andeq	ip, r2, r8, asr #26
   2cbc0:			; <UNDEFINED> instruction: 0x0002ccb8
   2cbc4:	andeq	ip, r2, r8, asr #26
   2cbc8:	andeq	ip, r2, r8, asr #25
   2cbcc:	andeq	ip, r2, r8, asr #26
   2cbd0:	andeq	ip, r2, r8, asr #26
   2cbd4:	andeq	ip, r2, r8, asr #26
   2cbd8:	ldrdeq	ip, [r2], -r8
   2cbdc:	andeq	ip, r2, r8, asr #26
   2cbe0:	andeq	ip, r2, r8, ror #25
   2cbe4:	andeq	ip, r2, r8, asr #26
   2cbe8:	andeq	ip, r2, r8, asr #26
   2cbec:	strdeq	ip, [r2], -r8
   2cbf0:	andeq	ip, r2, r8, asr #26
   2cbf4:	andeq	ip, r2, r8, asr #26
   2cbf8:	andeq	ip, r2, r8, asr #26
   2cbfc:	andeq	ip, r2, r8, lsl #26
   2cc00:	andeq	ip, r2, r8, asr #26
   2cc04:	andeq	ip, r2, r8, asr #26
   2cc08:	andeq	ip, r2, r8, asr #26
   2cc0c:	andeq	ip, r2, r8, asr #26
   2cc10:	andeq	ip, r2, r8, lsr #26
   2cc14:	andeq	ip, r2, r8, lsr sp
   2cc18:	andeq	ip, r2, r8, asr #26
   2cc1c:	andeq	ip, r2, r8, asr #26
   2cc20:	andeq	ip, r2, r8, asr #26
   2cc24:	andeq	ip, r2, r8, asr #26
   2cc28:	andeq	ip, r2, r8, asr #26
   2cc2c:	andeq	ip, r2, r8, asr #26
   2cc30:	andeq	ip, r2, r8, asr #26
   2cc34:	muleq	r2, r8, ip
   2cc38:	andeq	ip, r2, r8, asr sp
   2cc3c:	andeq	ip, r2, r8, asr #26
   2cc40:	andeq	ip, r2, r8, asr #26
   2cc44:	andeq	ip, r2, r8, asr #26
   2cc48:	andeq	ip, r2, r8, asr #25
   2cc4c:	andeq	ip, r2, r8, asr #26
   2cc50:	andeq	ip, r2, r8, asr #26
   2cc54:	andeq	ip, r2, r8, asr #26
   2cc58:	ldrdeq	ip, [r2], -r8
   2cc5c:	andeq	ip, r2, r8, asr #26
   2cc60:	andeq	ip, r2, r8, ror #25
   2cc64:	andeq	ip, r2, r8, asr #26
   2cc68:	andeq	ip, r2, r8, asr #26
   2cc6c:	andeq	ip, r2, r8, asr #26
   2cc70:	andeq	ip, r2, r8, asr #26
   2cc74:	andeq	ip, r2, r8, asr #26
   2cc78:	andeq	ip, r2, r8, asr #26
   2cc7c:	andeq	ip, r2, r8, lsl #26
   2cc80:	andeq	ip, r2, r8, asr #26
   2cc84:	andeq	ip, r2, r8, asr #26
   2cc88:	andeq	ip, r2, r8, lsl sp
   2cc8c:	mov	r5, #1
   2cc90:	mov	r1, #1024	; 0x400
   2cc94:	b	2cba4 <__assert_fail@plt+0x1b000>
   2cc98:	mov	r1, #512	; 0x200
   2cc9c:	mov	r0, sp
   2cca0:	bl	2c790 <__assert_fail@plt+0x1abec>
   2cca4:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cca8:	mov	r1, #1024	; 0x400
   2ccac:	mov	r0, sp
   2ccb0:	bl	2c790 <__assert_fail@plt+0x1abec>
   2ccb4:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2ccb8:	mov	r2, #6
   2ccbc:	mov	r0, sp
   2ccc0:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2ccc4:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2ccc8:	mov	r2, #3
   2cccc:	mov	r0, sp
   2ccd0:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2ccd4:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2ccd8:	mov	r2, #1
   2ccdc:	mov	r0, sp
   2cce0:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2cce4:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cce8:	mov	r2, #2
   2ccec:	mov	r0, sp
   2ccf0:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2ccf4:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2ccf8:	mov	r2, #5
   2ccfc:	mov	r0, sp
   2cd00:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2cd04:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cd08:	mov	r2, #4
   2cd0c:	mov	r0, sp
   2cd10:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2cd14:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cd18:	mov	r1, #2
   2cd1c:	mov	r0, sp
   2cd20:	bl	2c790 <__assert_fail@plt+0x1abec>
   2cd24:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cd28:	mov	r2, #8
   2cd2c:	mov	r0, sp
   2cd30:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2cd34:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cd38:	mov	r2, #7
   2cd3c:	mov	r0, sp
   2cd40:	bl	2c914 <__assert_fail@plt+0x1ad70>
   2cd44:	b	2cd5c <__assert_fail@plt+0x1b1b8>
   2cd48:	ldrd	r2, [sp]
   2cd4c:	strd	r2, [r8]
   2cd50:	orr	r6, r6, #2
   2cd54:	b	2cd80 <__assert_fail@plt+0x1b1dc>
   2cd58:	mov	r0, #0
   2cd5c:	orr	r6, r6, r0
   2cd60:	ldr	r3, [r4]
   2cd64:	add	r2, r3, r5
   2cd68:	str	r2, [r4]
   2cd6c:	ldrb	r3, [r3, r5]
   2cd70:	cmp	r3, #0
   2cd74:	orrne	r6, r6, #2
   2cd78:	ldrd	r2, [sp]
   2cd7c:	strd	r2, [r8]
   2cd80:	mov	r0, r6
   2cd84:	add	sp, sp, #16
   2cd88:	pop	{r4, r5, r6, r7, r8, pc}
   2cd8c:	andeq	r1, r3, ip, lsl r0
   2cd90:	andeq	r1, r3, r8, lsr #32
   2cd94:	andeq	r1, r3, r8, lsr r0
   2cd98:	push	{lr}		; (str lr, [sp, #-4]!)
   2cd9c:	sub	sp, sp, #20
   2cda0:	ldr	ip, [pc, #144]	; 2ce38 <__assert_fail@plt+0x1b294>
   2cda4:	ldr	r5, [ip]
   2cda8:	sub	r0, r0, #1
   2cdac:	cmp	r0, #3
   2cdb0:	ldrls	pc, [pc, r0, lsl #2]
   2cdb4:	b	2cdd0 <__assert_fail@plt+0x1b22c>
   2cdb8:	ldrdeq	ip, [r2], -r4
   2cdbc:	andeq	ip, r2, r8, asr #27
   2cdc0:	andeq	ip, r2, r8, asr #27
   2cdc4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2cdc8:	ldr	r0, [pc, #108]	; 2ce3c <__assert_fail@plt+0x1b298>
   2cdcc:	b	2cde0 <__assert_fail@plt+0x1b23c>
   2cdd0:	bl	11b68 <abort@plt>
   2cdd4:	ldr	r0, [pc, #100]	; 2ce40 <__assert_fail@plt+0x1b29c>
   2cdd8:	b	2cde0 <__assert_fail@plt+0x1b23c>
   2cddc:	ldr	r0, [pc, #96]	; 2ce44 <__assert_fail@plt+0x1b2a0>
   2cde0:	cmp	r1, #0
   2cde4:	ldrlt	r4, [pc, #92]	; 2ce48 <__assert_fail@plt+0x1b2a4>
   2cde8:	sublt	r4, r4, r1
   2cdec:	strblt	r2, [sp, #12]
   2cdf0:	movlt	r3, #0
   2cdf4:	strblt	r3, [sp, #13]
   2cdf8:	addlt	r6, sp, #12
   2cdfc:	ldrge	r6, [r3, r1, lsl #4]
   2ce00:	ldrge	r4, [pc, #64]	; 2ce48 <__assert_fail@plt+0x1b2a4>
   2ce04:	mov	r2, #5
   2ce08:	mov	r1, r0
   2ce0c:	mov	r0, #0
   2ce10:	bl	117d8 <dcgettext@plt>
   2ce14:	ldr	r3, [sp, #24]
   2ce18:	str	r3, [sp, #4]
   2ce1c:	str	r6, [sp]
   2ce20:	mov	r3, r4
   2ce24:	mov	r2, r0
   2ce28:	mov	r1, #0
   2ce2c:	mov	r0, r5
   2ce30:	bl	118bc <error@plt>
   2ce34:	bl	11b68 <abort@plt>
   2ce38:	ldrdeq	r2, [r4], -r8
   2ce3c:	andeq	r1, r3, ip, ror r0
   2ce40:	andeq	r1, r3, r4, lsr #1
   2ce44:	andeq	r1, r3, r0, rrx
   2ce48:	andeq	r1, r3, r4, asr #1
   2ce4c:	push	{r4, r5, r6, lr}
   2ce50:	mov	r5, r0
   2ce54:	subs	r4, r1, #0
   2ce58:	blt	2ceac <__assert_fail@plt+0x1b308>
   2ce5c:	cmp	r4, #0
   2ce60:	moveq	r3, #0
   2ce64:	beq	2ce90 <__assert_fail@plt+0x1b2ec>
   2ce68:	mov	r2, r4
   2ce6c:	asr	r3, r4, #31
   2ce70:	mvn	r0, #0
   2ce74:	mvn	r1, #0
   2ce78:	bl	2ebd0 <__assert_fail@plt+0x1d02c>
   2ce7c:	ldrd	r2, [r5]
   2ce80:	cmp	r1, r3
   2ce84:	cmpeq	r0, r2
   2ce88:	movcc	r3, #1
   2ce8c:	movcs	r3, #0
   2ce90:	cmp	r3, #0
   2ce94:	beq	2cecc <__assert_fail@plt+0x1b328>
   2ce98:	mvn	r2, #0
   2ce9c:	mvn	r3, #0
   2cea0:	strd	r2, [r5]
   2cea4:	mov	r0, #1
   2cea8:	pop	{r4, r5, r6, pc}
   2ceac:	mov	r1, r4
   2ceb0:	mov	r0, #0
   2ceb4:	bl	2e504 <__assert_fail@plt+0x1c960>
   2ceb8:	ldrd	r2, [r5]
   2cebc:	orrs	r3, r2, r3
   2cec0:	movne	r3, #1
   2cec4:	moveq	r3, #0
   2cec8:	b	2ce90 <__assert_fail@plt+0x1b2ec>
   2cecc:	asr	r3, r4, #31
   2ced0:	ldr	r1, [r5, #4]
   2ced4:	ldr	r2, [r5]
   2ced8:	mul	r3, r3, r2
   2cedc:	mla	r1, r4, r1, r3
   2cee0:	umull	r2, r3, r2, r4
   2cee4:	add	r3, r1, r3
   2cee8:	strd	r2, [r5]
   2ceec:	mov	r0, #0
   2cef0:	pop	{r4, r5, r6, pc}
   2cef4:	push	{r4, r5, r6, r7, r8, lr}
   2cef8:	subs	r4, r2, #0
   2cefc:	beq	2cf2c <__assert_fail@plt+0x1b388>
   2cf00:	mov	r7, r1
   2cf04:	mov	r6, r0
   2cf08:	mov	r5, #0
   2cf0c:	mov	r1, r7
   2cf10:	mov	r0, r6
   2cf14:	bl	2ce4c <__assert_fail@plt+0x1b2a8>
   2cf18:	orr	r5, r5, r0
   2cf1c:	subs	r4, r4, #1
   2cf20:	bne	2cf0c <__assert_fail@plt+0x1b368>
   2cf24:	mov	r0, r5
   2cf28:	pop	{r4, r5, r6, r7, r8, pc}
   2cf2c:	mov	r5, #0
   2cf30:	b	2cf24 <__assert_fail@plt+0x1b380>
   2cf34:	push	{r4, r5, r6, r7, r8, r9, lr}
   2cf38:	sub	sp, sp, #20
   2cf3c:	cmp	r2, #36	; 0x24
   2cf40:	bhi	2cf80 <__assert_fail@plt+0x1b3dc>
   2cf44:	mov	r5, r0
   2cf48:	mov	r6, r1
   2cf4c:	mov	r7, r2
   2cf50:	mov	r9, r3
   2cf54:	cmp	r1, #0
   2cf58:	addeq	r6, sp, #12
   2cf5c:	bl	119b8 <__errno_location@plt>
   2cf60:	mov	r8, r0
   2cf64:	mov	r3, #0
   2cf68:	str	r3, [r0]
   2cf6c:	ldrb	r4, [r5]
   2cf70:	bl	11964 <__ctype_b_loc@plt>
   2cf74:	ldr	r1, [r0]
   2cf78:	mov	r2, r5
   2cf7c:	b	2cf98 <__assert_fail@plt+0x1b3f4>
   2cf80:	ldr	r3, [pc, #1056]	; 2d3a8 <__assert_fail@plt+0x1b804>
   2cf84:	mov	r2, #85	; 0x55
   2cf88:	ldr	r1, [pc, #1052]	; 2d3ac <__assert_fail@plt+0x1b808>
   2cf8c:	ldr	r0, [pc, #1052]	; 2d3b0 <__assert_fail@plt+0x1b80c>
   2cf90:	bl	11ba4 <__assert_fail@plt>
   2cf94:	ldrb	r4, [r2, #1]!
   2cf98:	lsl	r3, r4, #1
   2cf9c:	ldrh	r3, [r1, r3]
   2cfa0:	tst	r3, #8192	; 0x2000
   2cfa4:	bne	2cf94 <__assert_fail@plt+0x1b3f0>
   2cfa8:	cmp	r4, #45	; 0x2d
   2cfac:	moveq	r4, #4
   2cfb0:	bne	2cfc0 <__assert_fail@plt+0x1b41c>
   2cfb4:	mov	r0, r4
   2cfb8:	add	sp, sp, #20
   2cfbc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2cfc0:	mov	r3, #0
   2cfc4:	mov	r2, r7
   2cfc8:	mov	r1, r6
   2cfcc:	mov	r0, r5
   2cfd0:	bl	1179c <__strtoull_internal@plt>
   2cfd4:	strd	r0, [sp]
   2cfd8:	ldr	r7, [r6]
   2cfdc:	cmp	r5, r7
   2cfe0:	beq	2d004 <__assert_fail@plt+0x1b460>
   2cfe4:	ldr	r3, [r8]
   2cfe8:	cmp	r3, #0
   2cfec:	beq	2d04c <__assert_fail@plt+0x1b4a8>
   2cff0:	cmp	r3, #34	; 0x22
   2cff4:	moveq	r4, #1
   2cff8:	beq	2d050 <__assert_fail@plt+0x1b4ac>
   2cffc:	mov	r4, #4
   2d000:	b	2cfb4 <__assert_fail@plt+0x1b410>
   2d004:	ldr	r3, [sp, #48]	; 0x30
   2d008:	cmp	r3, #0
   2d00c:	moveq	r4, #4
   2d010:	beq	2cfb4 <__assert_fail@plt+0x1b410>
   2d014:	ldrb	r1, [r7]
   2d018:	cmp	r1, #0
   2d01c:	moveq	r4, #4
   2d020:	beq	2cfb4 <__assert_fail@plt+0x1b410>
   2d024:	mov	r0, r3
   2d028:	bl	11994 <strchr@plt>
   2d02c:	cmp	r0, #0
   2d030:	moveq	r4, #4
   2d034:	beq	2cfb4 <__assert_fail@plt+0x1b410>
   2d038:	mov	r2, #1
   2d03c:	mov	r3, #0
   2d040:	strd	r2, [sp]
   2d044:	mov	r4, #0
   2d048:	b	2d05c <__assert_fail@plt+0x1b4b8>
   2d04c:	mov	r4, #0
   2d050:	ldr	r3, [sp, #48]	; 0x30
   2d054:	cmp	r3, #0
   2d058:	beq	2d14c <__assert_fail@plt+0x1b5a8>
   2d05c:	ldrb	r5, [r7]
   2d060:	cmp	r5, #0
   2d064:	beq	2d2e4 <__assert_fail@plt+0x1b740>
   2d068:	mov	r1, r5
   2d06c:	ldr	r0, [sp, #48]	; 0x30
   2d070:	bl	11994 <strchr@plt>
   2d074:	cmp	r0, #0
   2d078:	beq	2d154 <__assert_fail@plt+0x1b5b0>
   2d07c:	sub	r3, r5, #69	; 0x45
   2d080:	cmp	r3, #47	; 0x2f
   2d084:	ldrls	pc, [pc, r3, lsl #2]
   2d088:	b	2d1c0 <__assert_fail@plt+0x1b61c>
   2d08c:	andeq	sp, r2, r4, ror #2
   2d090:	andeq	sp, r2, r0, asr #3
   2d094:	andeq	sp, r2, r4, ror #2
   2d098:	andeq	sp, r2, r0, asr #3
   2d09c:	andeq	sp, r2, r0, asr #3
   2d0a0:	andeq	sp, r2, r0, asr #3
   2d0a4:	andeq	sp, r2, r4, ror #2
   2d0a8:	andeq	sp, r2, r0, asr #3
   2d0ac:	andeq	sp, r2, r4, ror #2
   2d0b0:	andeq	sp, r2, r0, asr #3
   2d0b4:	andeq	sp, r2, r0, asr #3
   2d0b8:	andeq	sp, r2, r4, ror #2
   2d0bc:	andeq	sp, r2, r0, asr #3
   2d0c0:	andeq	sp, r2, r0, asr #3
   2d0c4:	andeq	sp, r2, r0, asr #3
   2d0c8:	andeq	sp, r2, r4, ror #2
   2d0cc:	andeq	sp, r2, r0, asr #3
   2d0d0:	andeq	sp, r2, r0, asr #3
   2d0d4:	andeq	sp, r2, r0, asr #3
   2d0d8:	andeq	sp, r2, r0, asr #3
   2d0dc:	andeq	sp, r2, r4, ror #2
   2d0e0:	andeq	sp, r2, r4, ror #2
   2d0e4:	andeq	sp, r2, r0, asr #3
   2d0e8:	andeq	sp, r2, r0, asr #3
   2d0ec:	andeq	sp, r2, r0, asr #3
   2d0f0:	andeq	sp, r2, r0, asr #3
   2d0f4:	andeq	sp, r2, r0, asr #3
   2d0f8:	andeq	sp, r2, r0, asr #3
   2d0fc:	andeq	sp, r2, r0, asr #3
   2d100:	andeq	sp, r2, r0, asr #3
   2d104:	andeq	sp, r2, r0, asr #3
   2d108:	andeq	sp, r2, r0, asr #3
   2d10c:	andeq	sp, r2, r0, asr #3
   2d110:	andeq	sp, r2, r0, asr #3
   2d114:	andeq	sp, r2, r4, ror #2
   2d118:	andeq	sp, r2, r0, asr #3
   2d11c:	andeq	sp, r2, r0, asr #3
   2d120:	andeq	sp, r2, r0, asr #3
   2d124:	andeq	sp, r2, r4, ror #2
   2d128:	andeq	sp, r2, r0, asr #3
   2d12c:	andeq	sp, r2, r4, ror #2
   2d130:	andeq	sp, r2, r0, asr #3
   2d134:	andeq	sp, r2, r0, asr #3
   2d138:	andeq	sp, r2, r0, asr #3
   2d13c:	andeq	sp, r2, r0, asr #3
   2d140:	andeq	sp, r2, r0, asr #3
   2d144:	andeq	sp, r2, r0, asr #3
   2d148:	andeq	sp, r2, r4, ror #2
   2d14c:	strd	r0, [r9]
   2d150:	b	2cfb4 <__assert_fail@plt+0x1b410>
   2d154:	ldrd	r2, [sp]
   2d158:	strd	r2, [r9]
   2d15c:	orr	r4, r4, #2
   2d160:	b	2cfb4 <__assert_fail@plt+0x1b410>
   2d164:	mov	r1, #48	; 0x30
   2d168:	ldr	r0, [sp, #48]	; 0x30
   2d16c:	bl	11994 <strchr@plt>
   2d170:	cmp	r0, #0
   2d174:	beq	2d2b0 <__assert_fail@plt+0x1b70c>
   2d178:	ldrb	r3, [r7, #1]
   2d17c:	cmp	r3, #68	; 0x44
   2d180:	beq	2d19c <__assert_fail@plt+0x1b5f8>
   2d184:	cmp	r3, #105	; 0x69
   2d188:	beq	2d1a8 <__assert_fail@plt+0x1b604>
   2d18c:	cmp	r3, #66	; 0x42
   2d190:	movne	r7, #1
   2d194:	movne	r1, #1024	; 0x400
   2d198:	bne	2d1c8 <__assert_fail@plt+0x1b624>
   2d19c:	mov	r7, #2
   2d1a0:	mov	r1, #1000	; 0x3e8
   2d1a4:	b	2d1c8 <__assert_fail@plt+0x1b624>
   2d1a8:	ldrb	r7, [r7, #2]
   2d1ac:	cmp	r7, #66	; 0x42
   2d1b0:	movne	r7, #1
   2d1b4:	moveq	r7, #3
   2d1b8:	mov	r1, #1024	; 0x400
   2d1bc:	b	2d1c8 <__assert_fail@plt+0x1b624>
   2d1c0:	mov	r7, #1
   2d1c4:	mov	r1, #1024	; 0x400
   2d1c8:	sub	r5, r5, #66	; 0x42
   2d1cc:	cmp	r5, #53	; 0x35
   2d1d0:	ldrls	pc, [pc, r5, lsl #2]
   2d1d4:	b	2d390 <__assert_fail@plt+0x1b7ec>
   2d1d8:	strdeq	sp, [r2], -r0
   2d1dc:	muleq	r2, r0, r3
   2d1e0:	muleq	r2, r0, r3
   2d1e4:	andeq	sp, r2, r0, lsl #6
   2d1e8:	muleq	r2, r0, r3
   2d1ec:	andeq	sp, r2, r0, lsl r3
   2d1f0:	muleq	r2, r0, r3
   2d1f4:	muleq	r2, r0, r3
   2d1f8:	muleq	r2, r0, r3
   2d1fc:	andeq	sp, r2, r0, lsr #6
   2d200:	muleq	r2, r0, r3
   2d204:	andeq	sp, r2, r0, lsr r3
   2d208:	muleq	r2, r0, r3
   2d20c:	muleq	r2, r0, r3
   2d210:	andeq	sp, r2, r0, asr #6
   2d214:	muleq	r2, r0, r3
   2d218:	muleq	r2, r0, r3
   2d21c:	muleq	r2, r0, r3
   2d220:	andeq	sp, r2, r0, asr r3
   2d224:	muleq	r2, r0, r3
   2d228:	muleq	r2, r0, r3
   2d22c:	muleq	r2, r0, r3
   2d230:	muleq	r2, r0, r3
   2d234:	andeq	sp, r2, r0, ror r3
   2d238:	andeq	sp, r2, r0, lsl #7
   2d23c:	muleq	r2, r0, r3
   2d240:	muleq	r2, r0, r3
   2d244:	muleq	r2, r0, r3
   2d248:	muleq	r2, r0, r3
   2d24c:	muleq	r2, r0, r3
   2d250:	muleq	r2, r0, r3
   2d254:	muleq	r2, r0, r3
   2d258:			; <UNDEFINED> instruction: 0x0002d2bc
   2d25c:	andeq	sp, r2, r0, lsr #7
   2d260:	muleq	r2, r0, r3
   2d264:	muleq	r2, r0, r3
   2d268:	muleq	r2, r0, r3
   2d26c:	andeq	sp, r2, r0, lsl r3
   2d270:	muleq	r2, r0, r3
   2d274:	muleq	r2, r0, r3
   2d278:	muleq	r2, r0, r3
   2d27c:	andeq	sp, r2, r0, lsr #6
   2d280:	muleq	r2, r0, r3
   2d284:	andeq	sp, r2, r0, lsr r3
   2d288:	muleq	r2, r0, r3
   2d28c:	muleq	r2, r0, r3
   2d290:	muleq	r2, r0, r3
   2d294:	muleq	r2, r0, r3
   2d298:	muleq	r2, r0, r3
   2d29c:	muleq	r2, r0, r3
   2d2a0:	andeq	sp, r2, r0, asr r3
   2d2a4:	muleq	r2, r0, r3
   2d2a8:	muleq	r2, r0, r3
   2d2ac:	andeq	sp, r2, r0, ror #6
   2d2b0:	mov	r7, #1
   2d2b4:	mov	r1, #1024	; 0x400
   2d2b8:	b	2d1c8 <__assert_fail@plt+0x1b624>
   2d2bc:	mov	r1, #512	; 0x200
   2d2c0:	mov	r0, sp
   2d2c4:	bl	2ce4c <__assert_fail@plt+0x1b2a8>
   2d2c8:	orr	r4, r4, r0
   2d2cc:	ldr	r3, [r6]
   2d2d0:	add	r2, r3, r7
   2d2d4:	str	r2, [r6]
   2d2d8:	ldrb	r3, [r3, r7]
   2d2dc:	cmp	r3, #0
   2d2e0:	orrne	r4, r4, #2
   2d2e4:	ldrd	r2, [sp]
   2d2e8:	strd	r2, [r9]
   2d2ec:	b	2cfb4 <__assert_fail@plt+0x1b410>
   2d2f0:	mov	r1, #1024	; 0x400
   2d2f4:	mov	r0, sp
   2d2f8:	bl	2ce4c <__assert_fail@plt+0x1b2a8>
   2d2fc:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d300:	mov	r2, #6
   2d304:	mov	r0, sp
   2d308:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d30c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d310:	mov	r2, #3
   2d314:	mov	r0, sp
   2d318:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d31c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d320:	mov	r2, #1
   2d324:	mov	r0, sp
   2d328:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d32c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d330:	mov	r2, #2
   2d334:	mov	r0, sp
   2d338:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d33c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d340:	mov	r2, #5
   2d344:	mov	r0, sp
   2d348:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d34c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d350:	mov	r2, #4
   2d354:	mov	r0, sp
   2d358:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d35c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d360:	mov	r1, #2
   2d364:	mov	r0, sp
   2d368:	bl	2ce4c <__assert_fail@plt+0x1b2a8>
   2d36c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d370:	mov	r2, #8
   2d374:	mov	r0, sp
   2d378:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d37c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d380:	mov	r2, #7
   2d384:	mov	r0, sp
   2d388:	bl	2cef4 <__assert_fail@plt+0x1b350>
   2d38c:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d390:	ldrd	r2, [sp]
   2d394:	strd	r2, [r9]
   2d398:	orr	r4, r4, #2
   2d39c:	b	2cfb4 <__assert_fail@plt+0x1b410>
   2d3a0:	mov	r0, #0
   2d3a4:	b	2d2c8 <__assert_fail@plt+0x1b724>
   2d3a8:	andeq	r1, r3, r8, asr #1
   2d3ac:	andeq	r1, r3, r8, lsr #32
   2d3b0:	andeq	r1, r3, r8, lsr r0
   2d3b4:	push	{r4, lr}
   2d3b8:	mov	r2, r0
   2d3bc:	mov	r3, r1
   2d3c0:	cmp	r1, #0
   2d3c4:	cmpne	r0, #0
   2d3c8:	moveq	r3, #1
   2d3cc:	moveq	r2, r3
   2d3d0:	umull	r0, r1, r2, r3
   2d3d4:	cmp	r0, #0
   2d3d8:	cmpge	r1, #0
   2d3dc:	bne	2d3f0 <__assert_fail@plt+0x1b84c>
   2d3e0:	mov	r1, r3
   2d3e4:	mov	r0, r2
   2d3e8:	bl	116ac <calloc@plt>
   2d3ec:	pop	{r4, pc}
   2d3f0:	bl	119b8 <__errno_location@plt>
   2d3f4:	mov	r3, #12
   2d3f8:	str	r3, [r0]
   2d3fc:	mov	r0, #0
   2d400:	pop	{r4, pc}
   2d404:	push	{r4, lr}
   2d408:	cmp	r0, #0
   2d40c:	moveq	r0, #1
   2d410:	cmp	r0, #0
   2d414:	blt	2d420 <__assert_fail@plt+0x1b87c>
   2d418:	bl	118f8 <malloc@plt>
   2d41c:	pop	{r4, pc}
   2d420:	bl	119b8 <__errno_location@plt>
   2d424:	mov	r3, #12
   2d428:	str	r3, [r0]
   2d42c:	mov	r0, #0
   2d430:	pop	{r4, pc}
   2d434:	push	{r4, lr}
   2d438:	cmp	r0, #0
   2d43c:	beq	2d458 <__assert_fail@plt+0x1b8b4>
   2d440:	cmp	r1, #0
   2d444:	beq	2d464 <__assert_fail@plt+0x1b8c0>
   2d448:	cmp	r1, #0
   2d44c:	blt	2d470 <__assert_fail@plt+0x1b8cc>
   2d450:	bl	117f0 <realloc@plt>
   2d454:	pop	{r4, pc}
   2d458:	mov	r0, r1
   2d45c:	bl	2d404 <__assert_fail@plt+0x1b860>
   2d460:	pop	{r4, pc}
   2d464:	bl	17204 <__assert_fail@plt+0x5660>
   2d468:	mov	r0, #0
   2d46c:	pop	{r4, pc}
   2d470:	bl	119b8 <__errno_location@plt>
   2d474:	mov	r3, #12
   2d478:	str	r3, [r0]
   2d47c:	mov	r0, #0
   2d480:	pop	{r4, pc}
   2d484:	cmp	r1, #2
   2d488:	bls	2d4a8 <__assert_fail@plt+0x1b904>
   2d48c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d490:	mov	r7, #1
   2d494:	mov	ip, r7
   2d498:	mov	lr, #0
   2d49c:	mvn	r4, #0
   2d4a0:	mov	r8, r7
   2d4a4:	b	2d4d0 <__assert_fail@plt+0x1b92c>
   2d4a8:	mov	r3, #1
   2d4ac:	str	r3, [r2]
   2d4b0:	sub	r0, r1, #1
   2d4b4:	bx	lr
   2d4b8:	cmp	r6, r5
   2d4bc:	beq	2d500 <__assert_fail@plt+0x1b95c>
   2d4c0:	mov	r4, lr
   2d4c4:	add	lr, lr, #1
   2d4c8:	mov	r7, r8
   2d4cc:	mov	ip, r8
   2d4d0:	add	r3, lr, ip
   2d4d4:	cmp	r1, r3
   2d4d8:	bls	2d514 <__assert_fail@plt+0x1b970>
   2d4dc:	ldrb	r6, [r0, r3]
   2d4e0:	add	r5, r0, r4
   2d4e4:	ldrb	r5, [r5, ip]
   2d4e8:	cmp	r6, r5
   2d4ec:	bcs	2d4b8 <__assert_fail@plt+0x1b914>
   2d4f0:	sub	r7, r3, r4
   2d4f4:	mov	lr, r3
   2d4f8:	mov	ip, #1
   2d4fc:	b	2d4d0 <__assert_fail@plt+0x1b92c>
   2d500:	cmp	ip, r7
   2d504:	addne	ip, ip, #1
   2d508:	addeq	lr, lr, r7
   2d50c:	moveq	ip, #1
   2d510:	b	2d4d0 <__assert_fail@plt+0x1b92c>
   2d514:	str	r7, [r2]
   2d518:	mov	r8, #1
   2d51c:	mov	ip, r8
   2d520:	mov	lr, #0
   2d524:	mvn	r7, #0
   2d528:	mov	r9, r8
   2d52c:	b	2d548 <__assert_fail@plt+0x1b9a4>
   2d530:	cmp	r6, r5
   2d534:	beq	2d578 <__assert_fail@plt+0x1b9d4>
   2d538:	mov	r7, lr
   2d53c:	add	lr, lr, #1
   2d540:	mov	r8, r9
   2d544:	mov	ip, r9
   2d548:	add	r3, lr, ip
   2d54c:	cmp	r1, r3
   2d550:	bls	2d58c <__assert_fail@plt+0x1b9e8>
   2d554:	ldrb	r6, [r0, r3]
   2d558:	add	r5, r0, r7
   2d55c:	ldrb	r5, [r5, ip]
   2d560:	cmp	r6, r5
   2d564:	bls	2d530 <__assert_fail@plt+0x1b98c>
   2d568:	sub	r8, r3, r7
   2d56c:	mov	lr, r3
   2d570:	mov	ip, #1
   2d574:	b	2d548 <__assert_fail@plt+0x1b9a4>
   2d578:	cmp	ip, r8
   2d57c:	addne	ip, ip, #1
   2d580:	addeq	lr, lr, r8
   2d584:	moveq	ip, #1
   2d588:	b	2d548 <__assert_fail@plt+0x1b9a4>
   2d58c:	add	r7, r7, #1
   2d590:	add	r0, r4, #1
   2d594:	cmp	r7, r0
   2d598:	strcs	r8, [r2]
   2d59c:	movcs	r0, r7
   2d5a0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d5a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d5a8:	sub	sp, sp, #1056	; 0x420
   2d5ac:	sub	sp, sp, #4
   2d5b0:	mov	r5, r0
   2d5b4:	mov	r6, r1
   2d5b8:	mov	r0, r2
   2d5bc:	str	r2, [sp]
   2d5c0:	mov	r4, r3
   2d5c4:	add	r2, sp, #1040	; 0x410
   2d5c8:	add	r2, r2, #12
   2d5cc:	mov	r1, r3
   2d5d0:	bl	2d484 <__assert_fail@plt+0x1b8e0>
   2d5d4:	mov	sl, r0
   2d5d8:	add	r3, sp, #24
   2d5dc:	add	r2, sp, #32
   2d5e0:	add	r2, r2, #1016	; 0x3f8
   2d5e4:	str	r4, [r3, #4]!
   2d5e8:	cmp	r3, r2
   2d5ec:	bne	2d5e4 <__assert_fail@plt+0x1ba40>
   2d5f0:	cmp	r4, #0
   2d5f4:	beq	2d620 <__assert_fail@plt+0x1ba7c>
   2d5f8:	ldr	r3, [sp]
   2d5fc:	sub	r1, r3, #1
   2d600:	sub	r3, r4, #1
   2d604:	ldrb	r2, [r1, #1]!
   2d608:	add	r0, sp, #1056	; 0x420
   2d60c:	add	r2, r0, r2, lsl #2
   2d610:	str	r3, [r2, #-1028]	; 0xfffffbfc
   2d614:	sub	r3, r3, #1
   2d618:	cmn	r3, #1
   2d61c:	bne	2d604 <__assert_fail@plt+0x1ba60>
   2d620:	ldr	r3, [sp, #1052]	; 0x41c
   2d624:	str	r3, [sp, #4]
   2d628:	mov	r2, sl
   2d62c:	ldr	r0, [sp]
   2d630:	add	r1, r0, r3
   2d634:	bl	117c0 <memcmp@plt>
   2d638:	cmp	r0, #0
   2d63c:	beq	2d79c <__assert_fail@plt+0x1bbf8>
   2d640:	sub	r3, r4, sl
   2d644:	cmp	r3, sl
   2d648:	movcc	r3, sl
   2d64c:	add	r3, r3, #1
   2d650:	str	r3, [sp, #4]
   2d654:	mov	r9, #0
   2d658:	sub	r7, r4, #1
   2d65c:	sub	fp, sl, #1
   2d660:	ldr	r3, [sp]
   2d664:	add	r2, r3, fp
   2d668:	str	r2, [sp, #8]
   2d66c:	add	r3, r3, sl
   2d670:	rsb	r2, sl, #1
   2d674:	str	r2, [sp, #12]
   2d678:	mov	r0, r6
   2d67c:	mov	r6, r3
   2d680:	b	2d7e0 <__assert_fail@plt+0x1bc3c>
   2d684:	cmp	fp, sl
   2d688:	movcs	r3, fp
   2d68c:	movcc	r3, sl
   2d690:	cmp	r3, r7
   2d694:	bcs	2d884 <__assert_fail@plt+0x1bce0>
   2d698:	ldr	lr, [sp]
   2d69c:	add	r1, lr, r3
   2d6a0:	add	r0, r9, r3
   2d6a4:	add	r2, r5, r0
   2d6a8:	ldrb	lr, [lr, r3]
   2d6ac:	ldrb	r0, [r5, r0]
   2d6b0:	cmp	lr, r0
   2d6b4:	bne	2d6d4 <__assert_fail@plt+0x1bb30>
   2d6b8:	add	r3, r3, #1
   2d6bc:	cmp	r3, r7
   2d6c0:	bcs	2d884 <__assert_fail@plt+0x1bce0>
   2d6c4:	ldrb	lr, [r1, #1]!
   2d6c8:	ldrb	r0, [r2, #1]!
   2d6cc:	cmp	lr, r0
   2d6d0:	beq	2d6b8 <__assert_fail@plt+0x1bb14>
   2d6d4:	ldr	r2, [sp, #20]
   2d6d8:	add	r9, r2, r9
   2d6dc:	add	r9, r3, r9
   2d6e0:	mov	fp, ip
   2d6e4:	mov	r0, r8
   2d6e8:	add	r8, r9, r4
   2d6ec:	sub	r2, r8, r0
   2d6f0:	mov	r1, #0
   2d6f4:	add	r0, r5, r0
   2d6f8:	bl	11a24 <memchr@plt>
   2d6fc:	adds	r3, r8, #0
   2d700:	movne	r3, #1
   2d704:	cmp	r0, #0
   2d708:	movne	r3, #0
   2d70c:	mov	r0, r3
   2d710:	cmp	r3, #0
   2d714:	beq	2d914 <__assert_fail@plt+0x1bd70>
   2d718:	add	r3, r5, r8
   2d71c:	ldrb	r3, [r3, #-1]
   2d720:	add	r2, sp, #1056	; 0x420
   2d724:	add	r3, r2, r3, lsl #2
   2d728:	ldr	ip, [r3, #-1028]	; 0xfffffbfc
   2d72c:	cmp	ip, #0
   2d730:	beq	2d684 <__assert_fail@plt+0x1bae0>
   2d734:	ldr	r3, [sp, #4]
   2d738:	cmp	fp, #0
   2d73c:	cmpne	r3, ip
   2d740:	ldrhi	ip, [sp, #12]
   2d744:	add	r9, r9, ip
   2d748:	mov	fp, #0
   2d74c:	b	2d6e4 <__assert_fail@plt+0x1bb40>
   2d750:	mov	r1, r3
   2d754:	sub	r3, r1, #1
   2d758:	cmp	r6, r3
   2d75c:	beq	2d770 <__assert_fail@plt+0x1bbcc>
   2d760:	ldrb	lr, [r0, #-1]!
   2d764:	ldrb	ip, [r2, #-1]!
   2d768:	cmp	lr, ip
   2d76c:	beq	2d750 <__assert_fail@plt+0x1bbac>
   2d770:	add	fp, fp, #1
   2d774:	cmp	fp, r1
   2d778:	bhi	2d794 <__assert_fail@plt+0x1bbf0>
   2d77c:	ldr	r3, [sp, #4]
   2d780:	add	r9, r9, r3
   2d784:	ldr	fp, [sp, #12]
   2d788:	b	2d6e4 <__assert_fail@plt+0x1bb40>
   2d78c:	mov	r1, sl
   2d790:	b	2d770 <__assert_fail@plt+0x1bbcc>
   2d794:	add	r0, r5, r9
   2d798:	b	2d914 <__assert_fail@plt+0x1bd70>
   2d79c:	mov	fp, #0
   2d7a0:	mov	r9, fp
   2d7a4:	sub	r7, r4, #1
   2d7a8:	sub	r3, sl, #1
   2d7ac:	str	r3, [sp, #8]
   2d7b0:	ldr	r2, [sp, #4]
   2d7b4:	sub	r2, r4, r2
   2d7b8:	str	r2, [sp, #12]
   2d7bc:	ldr	r2, [sp]
   2d7c0:	add	r3, r2, r3
   2d7c4:	str	r3, [sp, #16]
   2d7c8:	rsb	r3, sl, #1
   2d7cc:	str	r3, [sp, #20]
   2d7d0:	mov	r0, r6
   2d7d4:	b	2d6e8 <__assert_fail@plt+0x1bb44>
   2d7d8:	add	r9, r9, r3
   2d7dc:	mov	r0, r8
   2d7e0:	add	r8, r9, r4
   2d7e4:	sub	r2, r8, r0
   2d7e8:	mov	r1, #0
   2d7ec:	add	r0, r5, r0
   2d7f0:	bl	11a24 <memchr@plt>
   2d7f4:	adds	r3, r8, #0
   2d7f8:	movne	r3, #1
   2d7fc:	cmp	r0, #0
   2d800:	movne	r3, #0
   2d804:	mov	r0, r3
   2d808:	cmp	r3, #0
   2d80c:	beq	2d914 <__assert_fail@plt+0x1bd70>
   2d810:	add	r3, r5, r8
   2d814:	ldrb	r3, [r3, #-1]
   2d818:	add	r2, sp, #1056	; 0x420
   2d81c:	add	r3, r2, r3, lsl #2
   2d820:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   2d824:	cmp	r3, #0
   2d828:	bne	2d7d8 <__assert_fail@plt+0x1bc34>
   2d82c:	cmp	sl, r7
   2d830:	bcs	2d8c0 <__assert_fail@plt+0x1bd1c>
   2d834:	add	r3, r9, sl
   2d838:	add	r2, r5, r3
   2d83c:	ldrb	r1, [r6]
   2d840:	ldrb	r3, [r5, r3]
   2d844:	cmp	r1, r3
   2d848:	movne	r3, sl
   2d84c:	bne	2d874 <__assert_fail@plt+0x1bcd0>
   2d850:	mov	r1, r6
   2d854:	mov	r3, sl
   2d858:	add	r3, r3, #1
   2d85c:	cmp	r3, r7
   2d860:	bcs	2d8c0 <__assert_fail@plt+0x1bd1c>
   2d864:	ldrb	ip, [r1, #1]!
   2d868:	ldrb	r0, [r2, #1]!
   2d86c:	cmp	ip, r0
   2d870:	beq	2d858 <__assert_fail@plt+0x1bcb4>
   2d874:	ldr	r2, [sp, #12]
   2d878:	add	r9, r2, r9
   2d87c:	add	r9, r9, r3
   2d880:	b	2d7dc <__assert_fail@plt+0x1bc38>
   2d884:	ldr	r1, [sp, #8]
   2d888:	cmp	fp, sl
   2d88c:	movcs	r1, sl
   2d890:	bcs	2d770 <__assert_fail@plt+0x1bbcc>
   2d894:	ldr	r3, [sp, #8]
   2d898:	add	r3, r9, r3
   2d89c:	add	r2, r5, r3
   2d8a0:	ldr	ip, [sp, #16]
   2d8a4:	ldrb	r0, [ip]
   2d8a8:	ldrb	r3, [r5, r3]
   2d8ac:	cmp	r0, r3
   2d8b0:	bne	2d78c <__assert_fail@plt+0x1bbe8>
   2d8b4:	mov	r0, ip
   2d8b8:	sub	r6, fp, #1
   2d8bc:	b	2d754 <__assert_fail@plt+0x1bbb0>
   2d8c0:	cmn	fp, #1
   2d8c4:	beq	2d910 <__assert_fail@plt+0x1bd6c>
   2d8c8:	add	r3, r9, fp
   2d8cc:	add	r2, r5, r3
   2d8d0:	ldr	r0, [sp, #8]
   2d8d4:	ldrb	r1, [r0]
   2d8d8:	ldrb	r3, [r5, r3]
   2d8dc:	cmp	r1, r3
   2d8e0:	bne	2d904 <__assert_fail@plt+0x1bd60>
   2d8e4:	mov	r3, r0
   2d8e8:	ldr	ip, [sp]
   2d8ec:	cmp	r3, ip
   2d8f0:	beq	2d910 <__assert_fail@plt+0x1bd6c>
   2d8f4:	ldrb	r0, [r3, #-1]!
   2d8f8:	ldrb	r1, [r2, #-1]!
   2d8fc:	cmp	r0, r1
   2d900:	beq	2d8ec <__assert_fail@plt+0x1bd48>
   2d904:	ldr	r3, [sp, #4]
   2d908:	add	r9, r9, r3
   2d90c:	b	2d7dc <__assert_fail@plt+0x1bc38>
   2d910:	add	r0, r5, r9
   2d914:	add	sp, sp, #1056	; 0x420
   2d918:	add	sp, sp, #4
   2d91c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d920:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d924:	sub	sp, sp, #36	; 0x24
   2d928:	ldrb	r3, [r0]
   2d92c:	cmp	r3, #0
   2d930:	beq	2d9d4 <__assert_fail@plt+0x1be30>
   2d934:	ldrb	r2, [r1]
   2d938:	cmp	r2, #0
   2d93c:	beq	2dc94 <__assert_fail@plt+0x1c0f0>
   2d940:	mov	r4, r0
   2d944:	add	ip, r1, #1
   2d948:	mov	lr, #1
   2d94c:	mov	fp, ip
   2d950:	cmp	r3, r2
   2d954:	movne	lr, #0
   2d958:	andeq	lr, lr, #1
   2d95c:	ldrb	r3, [r4, #1]!
   2d960:	cmp	r3, #0
   2d964:	beq	2d9dc <__assert_fail@plt+0x1be38>
   2d968:	ldrb	r2, [ip], #1
   2d96c:	cmp	r2, #0
   2d970:	bne	2d94c <__assert_fail@plt+0x1bda8>
   2d974:	cmp	lr, #0
   2d978:	bne	2dc94 <__assert_fail@plt+0x1c0f0>
   2d97c:	mov	r5, r0
   2d980:	sub	r4, fp, r1
   2d984:	ldrb	r1, [r1]
   2d988:	add	r0, r0, #1
   2d98c:	bl	11994 <strchr@plt>
   2d990:	mov	r6, r0
   2d994:	cmp	r0, #0
   2d998:	cmpne	r4, #1
   2d99c:	beq	2dc94 <__assert_fail@plt+0x1c0f0>
   2d9a0:	sub	fp, fp, r4
   2d9a4:	add	r0, r5, r4
   2d9a8:	cmp	r6, r0
   2d9ac:	subls	r1, r0, r6
   2d9b0:	movhi	r1, #1
   2d9b4:	mov	r7, r1
   2d9b8:	cmp	r4, #31
   2d9bc:	bls	2d9f0 <__assert_fail@plt+0x1be4c>
   2d9c0:	mov	r3, r4
   2d9c4:	mov	r2, fp
   2d9c8:	mov	r0, r6
   2d9cc:	bl	2d5a4 <__assert_fail@plt+0x1ba00>
   2d9d0:	b	2dc94 <__assert_fail@plt+0x1c0f0>
   2d9d4:	mov	fp, r1
   2d9d8:	mov	lr, #1
   2d9dc:	ldrb	r3, [fp]
   2d9e0:	cmp	r3, #0
   2d9e4:	movne	r0, #0
   2d9e8:	beq	2d974 <__assert_fail@plt+0x1bdd0>
   2d9ec:	b	2dc94 <__assert_fail@plt+0x1c0f0>
   2d9f0:	add	r2, sp, #28
   2d9f4:	mov	r1, r4
   2d9f8:	mov	r0, fp
   2d9fc:	bl	2d484 <__assert_fail@plt+0x1b8e0>
   2da00:	mov	r8, r0
   2da04:	ldr	r3, [sp, #28]
   2da08:	str	r3, [sp, #8]
   2da0c:	mov	r2, r0
   2da10:	add	r1, fp, r3
   2da14:	mov	r0, fp
   2da18:	bl	117c0 <memcmp@plt>
   2da1c:	cmp	r0, #0
   2da20:	beq	2dab0 <__assert_fail@plt+0x1bf0c>
   2da24:	sub	r3, r4, r8
   2da28:	cmp	r3, r8
   2da2c:	movcc	r3, r8
   2da30:	add	r3, r3, #1
   2da34:	str	r3, [sp, #8]
   2da38:	mov	r5, #0
   2da3c:	sub	r3, r8, #1
   2da40:	add	r2, fp, r3
   2da44:	add	sl, fp, r8
   2da48:	rsb	r1, r8, #1
   2da4c:	str	r1, [sp, #4]
   2da50:	mov	r0, r7
   2da54:	str	fp, [sp, #12]
   2da58:	mov	fp, r3
   2da5c:	mov	r7, r2
   2da60:	b	2dc1c <__assert_fail@plt+0x1c078>
   2da64:	mov	r1, r3
   2da68:	sub	r3, r1, #1
   2da6c:	cmp	r3, r7
   2da70:	beq	2da84 <__assert_fail@plt+0x1bee0>
   2da74:	ldrb	lr, [r0, #-1]!
   2da78:	ldrb	ip, [r2, #-1]!
   2da7c:	cmp	lr, ip
   2da80:	beq	2da64 <__assert_fail@plt+0x1bec0>
   2da84:	add	r9, r9, #1
   2da88:	cmp	r9, r1
   2da8c:	bhi	2daa8 <__assert_fail@plt+0x1bf04>
   2da90:	ldr	r3, [sp, #8]
   2da94:	add	r5, r5, r3
   2da98:	ldr	r9, [sp, #16]
   2da9c:	b	2dafc <__assert_fail@plt+0x1bf58>
   2daa0:	mov	r1, r8
   2daa4:	b	2da84 <__assert_fail@plt+0x1bee0>
   2daa8:	add	r0, r6, r5
   2daac:	b	2dc94 <__assert_fail@plt+0x1c0f0>
   2dab0:	mov	r9, #0
   2dab4:	mov	r5, r9
   2dab8:	sub	r3, r8, #1
   2dabc:	str	r3, [sp, #4]
   2dac0:	ldr	r2, [sp, #8]
   2dac4:	sub	r2, r4, r2
   2dac8:	str	r2, [sp, #16]
   2dacc:	add	r3, fp, r3
   2dad0:	str	r3, [sp, #20]
   2dad4:	rsb	r3, r8, #1
   2dad8:	str	r3, [sp, #12]
   2dadc:	mov	r0, r7
   2dae0:	b	2db00 <__assert_fail@plt+0x1bf5c>
   2dae4:	mov	r0, #0
   2dae8:	b	2dc94 <__assert_fail@plt+0x1c0f0>
   2daec:	ldr	r2, [sp, #12]
   2daf0:	add	r5, r2, r5
   2daf4:	add	r5, r5, r3
   2daf8:	mov	r9, #0
   2dafc:	mov	r0, sl
   2db00:	add	sl, r4, r5
   2db04:	sub	r2, sl, r0
   2db08:	mov	r1, #0
   2db0c:	add	r0, r6, r0
   2db10:	bl	11a24 <memchr@plt>
   2db14:	adds	r3, sl, #0
   2db18:	movne	r3, #1
   2db1c:	cmp	r0, #0
   2db20:	movne	r3, #0
   2db24:	mov	r0, r3
   2db28:	cmp	r3, #0
   2db2c:	beq	2dc94 <__assert_fail@plt+0x1c0f0>
   2db30:	cmp	r8, r9
   2db34:	movcs	r3, r8
   2db38:	movcc	r3, r9
   2db3c:	cmp	r4, r3
   2db40:	bls	2db80 <__assert_fail@plt+0x1bfdc>
   2db44:	add	r1, fp, r3
   2db48:	add	r0, r3, r5
   2db4c:	add	r2, r6, r0
   2db50:	ldrb	ip, [fp, r3]
   2db54:	ldrb	r0, [r6, r0]
   2db58:	cmp	ip, r0
   2db5c:	bne	2daec <__assert_fail@plt+0x1bf48>
   2db60:	add	r3, r3, #1
   2db64:	cmp	r4, r3
   2db68:	beq	2db80 <__assert_fail@plt+0x1bfdc>
   2db6c:	ldrb	ip, [r1, #1]!
   2db70:	ldrb	r0, [r2, #1]!
   2db74:	cmp	ip, r0
   2db78:	beq	2db60 <__assert_fail@plt+0x1bfbc>
   2db7c:	b	2daec <__assert_fail@plt+0x1bf48>
   2db80:	ldr	r1, [sp, #4]
   2db84:	cmp	r8, r9
   2db88:	movls	r1, r8
   2db8c:	bls	2da84 <__assert_fail@plt+0x1bee0>
   2db90:	ldr	r3, [sp, #4]
   2db94:	add	r3, r5, r3
   2db98:	add	r2, r6, r3
   2db9c:	ldr	ip, [sp, #20]
   2dba0:	ldrb	r0, [ip]
   2dba4:	ldrb	r3, [r6, r3]
   2dba8:	cmp	r0, r3
   2dbac:	bne	2daa0 <__assert_fail@plt+0x1befc>
   2dbb0:	mov	r0, ip
   2dbb4:	sub	r7, r9, #1
   2dbb8:	b	2da68 <__assert_fail@plt+0x1bec4>
   2dbbc:	cmn	fp, #1
   2dbc0:	beq	2dc90 <__assert_fail@plt+0x1c0ec>
   2dbc4:	add	r3, r5, fp
   2dbc8:	add	r2, r6, r3
   2dbcc:	ldrb	r1, [r7]
   2dbd0:	ldrb	r3, [r6, r3]
   2dbd4:	cmp	r1, r3
   2dbd8:	bne	2dbfc <__assert_fail@plt+0x1c058>
   2dbdc:	mov	r3, r7
   2dbe0:	ldr	ip, [sp, #12]
   2dbe4:	cmp	r3, ip
   2dbe8:	beq	2dc90 <__assert_fail@plt+0x1c0ec>
   2dbec:	ldrb	r0, [r3, #-1]!
   2dbf0:	ldrb	r1, [r2, #-1]!
   2dbf4:	cmp	r0, r1
   2dbf8:	beq	2dbe4 <__assert_fail@plt+0x1c040>
   2dbfc:	ldr	r3, [sp, #8]
   2dc00:	add	r5, r5, r3
   2dc04:	b	2dc18 <__assert_fail@plt+0x1c074>
   2dc08:	mov	r3, r8
   2dc0c:	ldr	r2, [sp, #4]
   2dc10:	add	r5, r2, r5
   2dc14:	add	r5, r5, r3
   2dc18:	mov	r0, r9
   2dc1c:	add	r9, r4, r5
   2dc20:	sub	r2, r9, r0
   2dc24:	mov	r1, #0
   2dc28:	add	r0, r6, r0
   2dc2c:	bl	11a24 <memchr@plt>
   2dc30:	adds	r3, r9, #0
   2dc34:	movne	r3, #1
   2dc38:	cmp	r0, #0
   2dc3c:	movne	r3, #0
   2dc40:	cmp	r3, #0
   2dc44:	beq	2dae4 <__assert_fail@plt+0x1bf40>
   2dc48:	cmp	r4, r8
   2dc4c:	bls	2dbbc <__assert_fail@plt+0x1c018>
   2dc50:	add	r3, r8, r5
   2dc54:	add	r2, r6, r3
   2dc58:	ldrb	r1, [sl]
   2dc5c:	ldrb	r3, [r6, r3]
   2dc60:	cmp	r1, r3
   2dc64:	bne	2dc08 <__assert_fail@plt+0x1c064>
   2dc68:	mov	r1, sl
   2dc6c:	mov	r3, r8
   2dc70:	add	r3, r3, #1
   2dc74:	cmp	r4, r3
   2dc78:	beq	2dbbc <__assert_fail@plt+0x1c018>
   2dc7c:	ldrb	ip, [r1, #1]!
   2dc80:	ldrb	r0, [r2, #1]!
   2dc84:	cmp	ip, r0
   2dc88:	beq	2dc70 <__assert_fail@plt+0x1c0cc>
   2dc8c:	b	2dc0c <__assert_fail@plt+0x1c068>
   2dc90:	add	r0, r6, r5
   2dc94:	add	sp, sp, #36	; 0x24
   2dc98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dc9c:	push	{r4, r5, r6, lr}
   2dca0:	mov	r5, r0
   2dca4:	bl	118a4 <__fpending@plt>
   2dca8:	mov	r6, r0
   2dcac:	ldr	r4, [r5]
   2dcb0:	and	r4, r4, #32
   2dcb4:	mov	r0, r5
   2dcb8:	bl	15554 <__assert_fail@plt+0x39b0>
   2dcbc:	cmp	r4, #0
   2dcc0:	bne	2dce8 <__assert_fail@plt+0x1c144>
   2dcc4:	cmp	r0, #0
   2dcc8:	popeq	{r4, r5, r6, pc}
   2dccc:	cmp	r6, #0
   2dcd0:	bne	2dd04 <__assert_fail@plt+0x1c160>
   2dcd4:	bl	119b8 <__errno_location@plt>
   2dcd8:	ldr	r0, [r0]
   2dcdc:	subs	r0, r0, #9
   2dce0:	mvnne	r0, #0
   2dce4:	pop	{r4, r5, r6, pc}
   2dce8:	cmp	r0, #0
   2dcec:	bne	2dd0c <__assert_fail@plt+0x1c168>
   2dcf0:	bl	119b8 <__errno_location@plt>
   2dcf4:	mov	r3, #0
   2dcf8:	str	r3, [r0]
   2dcfc:	mvn	r0, #0
   2dd00:	pop	{r4, r5, r6, pc}
   2dd04:	mvn	r0, #0
   2dd08:	pop	{r4, r5, r6, pc}
   2dd0c:	mvn	r0, #0
   2dd10:	pop	{r4, r5, r6, pc}
   2dd14:	mov	r2, #0
   2dd18:	mov	r3, #0
   2dd1c:	strd	r2, [r0, #16]
   2dd20:	ldr	r3, [pc, #4]	; 2dd2c <__assert_fail@plt+0x1c188>
   2dd24:	str	r3, [r0, #24]
   2dd28:	bx	lr
   2dd2c:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   2dd30:	push	{r4, r5, r6, r7, r8, lr}
   2dd34:	ldr	r2, [r0, #24]
   2dd38:	ldr	r3, [pc, #172]	; 2ddec <__assert_fail@plt+0x1c248>
   2dd3c:	cmp	r2, r3
   2dd40:	bne	2dd88 <__assert_fail@plt+0x1c1e4>
   2dd44:	ldrd	r6, [r0, #16]
   2dd48:	orrs	r3, r6, r7
   2dd4c:	beq	2ddc8 <__assert_fail@plt+0x1c224>
   2dd50:	ldrd	r4, [r1, #96]	; 0x60
   2dd54:	ldrd	r2, [r0]
   2dd58:	cmp	r5, r3
   2dd5c:	cmpeq	r4, r2
   2dd60:	beq	2dd9c <__assert_fail@plt+0x1c1f8>
   2dd64:	adds	r2, r6, #1
   2dd68:	adc	r3, r7, #0
   2dd6c:	strd	r2, [r0, #16]
   2dd70:	and	r6, r6, r2
   2dd74:	and	r7, r7, r3
   2dd78:	orrs	ip, r6, r7
   2dd7c:	beq	2ddb8 <__assert_fail@plt+0x1c214>
   2dd80:	mov	r0, #0
   2dd84:	pop	{r4, r5, r6, r7, r8, pc}
   2dd88:	ldr	r3, [pc, #96]	; 2ddf0 <__assert_fail@plt+0x1c24c>
   2dd8c:	mov	r2, #60	; 0x3c
   2dd90:	ldr	r1, [pc, #92]	; 2ddf4 <__assert_fail@plt+0x1c250>
   2dd94:	ldr	r0, [pc, #92]	; 2ddf8 <__assert_fail@plt+0x1c254>
   2dd98:	bl	11ba4 <__assert_fail@plt>
   2dd9c:	ldrd	r4, [r1]
   2dda0:	ldrd	r2, [r0, #8]
   2dda4:	cmp	r5, r3
   2dda8:	cmpeq	r4, r2
   2ddac:	bne	2dd64 <__assert_fail@plt+0x1c1c0>
   2ddb0:	mov	r0, #1
   2ddb4:	pop	{r4, r5, r6, r7, r8, pc}
   2ddb8:	orrs	r3, r2, r3
   2ddbc:	bne	2ddd4 <__assert_fail@plt+0x1c230>
   2ddc0:	mov	r0, #1
   2ddc4:	pop	{r4, r5, r6, r7, r8, pc}
   2ddc8:	mov	r2, #1
   2ddcc:	mov	r3, #0
   2ddd0:	strd	r2, [r0, #16]
   2ddd4:	ldrd	r2, [r1]
   2ddd8:	strd	r2, [r0, #8]
   2dddc:	ldrd	r2, [r1, #96]	; 0x60
   2dde0:	strd	r2, [r0]
   2dde4:	mov	r0, #0
   2dde8:	pop	{r4, r5, r6, r7, r8, pc}
   2ddec:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   2ddf0:	ldrdeq	r1, [r3], -r4
   2ddf4:	andeq	r1, r3, r0, ror #1
   2ddf8:	strdeq	r1, [r3], -r4
   2ddfc:	ldr	ip, [r0, #4]
   2de00:	cmp	ip, r1
   2de04:	bcs	2de4c <__assert_fail@plt+0x1c2a8>
   2de08:	push	{r4, r5, r6, r7, r8, lr}
   2de0c:	mov	r6, r3
   2de10:	mov	r7, r2
   2de14:	mov	r5, r1
   2de18:	mov	r4, r0
   2de1c:	cmp	r3, #0
   2de20:	beq	2de58 <__assert_fail@plt+0x1c2b4>
   2de24:	mov	r1, r3
   2de28:	mvn	r0, #0
   2de2c:	bl	2e2f8 <__assert_fail@plt+0x1c754>
   2de30:	cmp	r5, r0
   2de34:	bls	2de58 <__assert_fail@plt+0x1c2b4>
   2de38:	bl	119b8 <__errno_location@plt>
   2de3c:	mov	r3, #12
   2de40:	str	r3, [r0]
   2de44:	mov	r0, #0
   2de48:	pop	{r4, r5, r6, r7, r8, pc}
   2de4c:	str	r1, [r0]
   2de50:	mov	r0, #1
   2de54:	bx	lr
   2de58:	mul	r1, r6, r5
   2de5c:	ldr	r0, [r4, #8]
   2de60:	cmp	r0, r7
   2de64:	beq	2de88 <__assert_fail@plt+0x1c2e4>
   2de68:	bl	2d434 <__assert_fail@plt+0x1b890>
   2de6c:	subs	r7, r0, #0
   2de70:	beq	2dec0 <__assert_fail@plt+0x1c31c>
   2de74:	str	r7, [r4, #8]
   2de78:	str	r5, [r4, #4]
   2de7c:	str	r5, [r4]
   2de80:	mov	r0, #1
   2de84:	pop	{r4, r5, r6, r7, r8, pc}
   2de88:	mov	r0, r1
   2de8c:	bl	2d404 <__assert_fail@plt+0x1b860>
   2de90:	subs	r7, r0, #0
   2de94:	beq	2deb8 <__assert_fail@plt+0x1c314>
   2de98:	ldr	r1, [r4, #8]
   2de9c:	cmp	r1, #0
   2dea0:	beq	2de74 <__assert_fail@plt+0x1c2d0>
   2dea4:	ldr	r2, [r4]
   2dea8:	mul	r2, r2, r6
   2deac:	mov	r0, r7
   2deb0:	bl	11784 <memcpy@plt>
   2deb4:	b	2de74 <__assert_fail@plt+0x1c2d0>
   2deb8:	mov	r0, #0
   2debc:	pop	{r4, r5, r6, r7, r8, pc}
   2dec0:	mov	r0, #0
   2dec4:	pop	{r4, r5, r6, r7, r8, pc}
   2dec8:	push	{r1, r2, r3}
   2decc:	push	{r4, r5, r6, lr}
   2ded0:	sub	sp, sp, #12
   2ded4:	mov	r5, r0
   2ded8:	ldr	r1, [sp, #28]
   2dedc:	add	r3, sp, #32
   2dee0:	str	r3, [sp, #4]
   2dee4:	cmp	r1, #0
   2dee8:	beq	2df30 <__assert_fail@plt+0x1c38c>
   2deec:	ldr	r3, [pc, #540]	; 2e110 <__assert_fail@plt+0x1c56c>
   2def0:	cmp	r1, r3
   2def4:	beq	2df60 <__assert_fail@plt+0x1c3bc>
   2def8:	cmp	r1, #11
   2defc:	beq	2e100 <__assert_fail@plt+0x1c55c>
   2df00:	bgt	2e08c <__assert_fail@plt+0x1c4e8>
   2df04:	cmp	r1, #3
   2df08:	beq	2e100 <__assert_fail@plt+0x1c55c>
   2df0c:	ble	2e04c <__assert_fail@plt+0x1c4a8>
   2df10:	cmp	r1, #8
   2df14:	beq	2e06c <__assert_fail@plt+0x1c4c8>
   2df18:	ble	2e064 <__assert_fail@plt+0x1c4c0>
   2df1c:	cmp	r1, #9
   2df20:	beq	2e100 <__assert_fail@plt+0x1c55c>
   2df24:	cmp	r1, #10
   2df28:	bne	2e0c4 <__assert_fail@plt+0x1c520>
   2df2c:	b	2e06c <__assert_fail@plt+0x1c4c8>
   2df30:	ldr	r3, [sp, #4]
   2df34:	add	r2, r3, #4
   2df38:	str	r2, [sp, #4]
   2df3c:	ldr	r2, [r3]
   2df40:	mov	r1, #0
   2df44:	bl	11a54 <fcntl64@plt>
   2df48:	mov	r4, r0
   2df4c:	mov	r0, r4
   2df50:	add	sp, sp, #12
   2df54:	pop	{r4, r5, r6, lr}
   2df58:	add	sp, sp, #12
   2df5c:	bx	lr
   2df60:	ldr	r3, [sp, #4]
   2df64:	add	r2, r3, #4
   2df68:	str	r2, [sp, #4]
   2df6c:	ldr	r6, [r3]
   2df70:	ldr	r3, [pc, #412]	; 2e114 <__assert_fail@plt+0x1c570>
   2df74:	ldr	r3, [r3]
   2df78:	cmp	r3, #0
   2df7c:	blt	2dfdc <__assert_fail@plt+0x1c438>
   2df80:	mov	r2, r6
   2df84:	ldr	r1, [pc, #388]	; 2e110 <__assert_fail@plt+0x1c56c>
   2df88:	bl	11a54 <fcntl64@plt>
   2df8c:	subs	r4, r0, #0
   2df90:	blt	2dfa4 <__assert_fail@plt+0x1c400>
   2df94:	mov	r2, #1
   2df98:	ldr	r3, [pc, #372]	; 2e114 <__assert_fail@plt+0x1c570>
   2df9c:	str	r2, [r3]
   2dfa0:	b	2df4c <__assert_fail@plt+0x1c3a8>
   2dfa4:	bl	119b8 <__errno_location@plt>
   2dfa8:	ldr	r3, [r0]
   2dfac:	cmp	r3, #22
   2dfb0:	bne	2df94 <__assert_fail@plt+0x1c3f0>
   2dfb4:	mov	r2, r6
   2dfb8:	mov	r1, #0
   2dfbc:	mov	r0, r5
   2dfc0:	bl	11a54 <fcntl64@plt>
   2dfc4:	subs	r4, r0, #0
   2dfc8:	blt	2df4c <__assert_fail@plt+0x1c3a8>
   2dfcc:	mvn	r2, #0
   2dfd0:	ldr	r3, [pc, #316]	; 2e114 <__assert_fail@plt+0x1c570>
   2dfd4:	str	r2, [r3]
   2dfd8:	b	2e000 <__assert_fail@plt+0x1c45c>
   2dfdc:	mov	r2, r6
   2dfe0:	mov	r1, #0
   2dfe4:	bl	11a54 <fcntl64@plt>
   2dfe8:	subs	r4, r0, #0
   2dfec:	blt	2df4c <__assert_fail@plt+0x1c3a8>
   2dff0:	ldr	r3, [pc, #284]	; 2e114 <__assert_fail@plt+0x1c570>
   2dff4:	ldr	r3, [r3]
   2dff8:	cmn	r3, #1
   2dffc:	bne	2df4c <__assert_fail@plt+0x1c3a8>
   2e000:	mov	r1, #1
   2e004:	mov	r0, r4
   2e008:	bl	11a54 <fcntl64@plt>
   2e00c:	subs	r2, r0, #0
   2e010:	blt	2e02c <__assert_fail@plt+0x1c488>
   2e014:	orr	r2, r2, #1
   2e018:	mov	r1, #2
   2e01c:	mov	r0, r4
   2e020:	bl	11a54 <fcntl64@plt>
   2e024:	cmn	r0, #1
   2e028:	bne	2df4c <__assert_fail@plt+0x1c3a8>
   2e02c:	bl	119b8 <__errno_location@plt>
   2e030:	mov	r5, r0
   2e034:	ldr	r6, [r0]
   2e038:	mov	r0, r4
   2e03c:	bl	11b80 <close@plt>
   2e040:	str	r6, [r5]
   2e044:	mvn	r4, #0
   2e048:	b	2df4c <__assert_fail@plt+0x1c3a8>
   2e04c:	cmp	r1, #1
   2e050:	beq	2e100 <__assert_fail@plt+0x1c55c>
   2e054:	bgt	2e06c <__assert_fail@plt+0x1c4c8>
   2e058:	cmp	r1, #0
   2e05c:	bne	2e0c4 <__assert_fail@plt+0x1c520>
   2e060:	b	2e06c <__assert_fail@plt+0x1c4c8>
   2e064:	cmp	r1, #4
   2e068:	bne	2e0c4 <__assert_fail@plt+0x1c520>
   2e06c:	ldr	r3, [sp, #4]
   2e070:	add	r2, r3, #4
   2e074:	str	r2, [sp, #4]
   2e078:	ldr	r2, [r3]
   2e07c:	mov	r0, r5
   2e080:	bl	11a54 <fcntl64@plt>
   2e084:	mov	r4, r0
   2e088:	b	2df4c <__assert_fail@plt+0x1c3a8>
   2e08c:	ldr	r3, [pc, #132]	; 2e118 <__assert_fail@plt+0x1c574>
   2e090:	cmp	r1, r3
   2e094:	bgt	2e0e4 <__assert_fail@plt+0x1c540>
   2e098:	sub	r3, r3, #1
   2e09c:	cmp	r1, r3
   2e0a0:	bge	2e06c <__assert_fail@plt+0x1c4c8>
   2e0a4:	sub	r3, r3, #5
   2e0a8:	cmp	r1, r3
   2e0ac:	beq	2e100 <__assert_fail@plt+0x1c55c>
   2e0b0:	add	r3, r3, #1
   2e0b4:	cmp	r1, r3
   2e0b8:	beq	2e06c <__assert_fail@plt+0x1c4c8>
   2e0bc:	cmp	r1, #1024	; 0x400
   2e0c0:	beq	2e06c <__assert_fail@plt+0x1c4c8>
   2e0c4:	ldr	r3, [sp, #4]
   2e0c8:	add	r2, r3, #4
   2e0cc:	str	r2, [sp, #4]
   2e0d0:	ldr	r2, [r3]
   2e0d4:	mov	r0, r5
   2e0d8:	bl	11a54 <fcntl64@plt>
   2e0dc:	mov	r4, r0
   2e0e0:	b	2df4c <__assert_fail@plt+0x1c3a8>
   2e0e4:	ldr	r3, [pc, #48]	; 2e11c <__assert_fail@plt+0x1c578>
   2e0e8:	cmp	r1, r3
   2e0ec:	beq	2e06c <__assert_fail@plt+0x1c4c8>
   2e0f0:	blt	2e100 <__assert_fail@plt+0x1c55c>
   2e0f4:	add	r3, r3, #1
   2e0f8:	cmp	r1, r3
   2e0fc:	bne	2e0c4 <__assert_fail@plt+0x1c520>
   2e100:	mov	r0, r5
   2e104:	bl	11a54 <fcntl64@plt>
   2e108:	mov	r4, r0
   2e10c:	b	2df4c <__assert_fail@plt+0x1c3a8>
   2e110:	andeq	r0, r0, r6, lsl #8
   2e114:	andeq	r2, r4, r0, lsl #8
   2e118:	andeq	r0, r0, r7, lsl #8
   2e11c:	andeq	r0, r0, r9, lsl #8
   2e120:	push	{r1, r2, r3}
   2e124:	push	{lr}		; (str lr, [sp, #-4]!)
   2e128:	sub	sp, sp, #8
   2e12c:	ldr	r1, [sp, #12]
   2e130:	tst	r1, #64	; 0x40
   2e134:	addne	r3, sp, #20
   2e138:	strne	r3, [sp, #4]
   2e13c:	ldrne	r2, [sp, #16]
   2e140:	moveq	r2, #0
   2e144:	bl	118e0 <open64@plt>
   2e148:	bl	2bb68 <__assert_fail@plt+0x19fc4>
   2e14c:	add	sp, sp, #8
   2e150:	pop	{lr}		; (ldr lr, [sp], #4)
   2e154:	add	sp, sp, #12
   2e158:	bx	lr
   2e15c:	push	{lr}		; (str lr, [sp, #-4]!)
   2e160:	sub	sp, sp, #268	; 0x10c
   2e164:	ldr	r2, [pc, #68]	; 2e1b0 <__assert_fail@plt+0x1c60c>
   2e168:	add	r1, sp, #4
   2e16c:	bl	2e23c <__assert_fail@plt+0x1c698>
   2e170:	cmp	r0, #0
   2e174:	movne	r0, #0
   2e178:	bne	2e1a8 <__assert_fail@plt+0x1c604>
   2e17c:	ldr	r1, [pc, #48]	; 2e1b4 <__assert_fail@plt+0x1c610>
   2e180:	add	r0, sp, #4
   2e184:	bl	1170c <strcmp@plt>
   2e188:	cmp	r0, #0
   2e18c:	moveq	r0, #0
   2e190:	beq	2e1a8 <__assert_fail@plt+0x1c604>
   2e194:	ldr	r1, [pc, #28]	; 2e1b8 <__assert_fail@plt+0x1c614>
   2e198:	add	r0, sp, #4
   2e19c:	bl	1170c <strcmp@plt>
   2e1a0:	adds	r0, r0, #0
   2e1a4:	movne	r0, #1
   2e1a8:	add	sp, sp, #268	; 0x10c
   2e1ac:	pop	{pc}		; (ldr pc, [sp], #4)
   2e1b0:	andeq	r0, r0, r1, lsl #2
   2e1b4:	andeq	r1, r3, ip, lsl #2
   2e1b8:	andeq	r1, r3, r0, lsl r1
   2e1bc:	push	{r4, lr}
   2e1c0:	mov	r0, #14
   2e1c4:	bl	11a84 <nl_langinfo@plt>
   2e1c8:	cmp	r0, #0
   2e1cc:	beq	2e1e4 <__assert_fail@plt+0x1c640>
   2e1d0:	ldrb	r2, [r0]
   2e1d4:	ldr	r3, [pc, #16]	; 2e1ec <__assert_fail@plt+0x1c648>
   2e1d8:	cmp	r2, #0
   2e1dc:	moveq	r0, r3
   2e1e0:	pop	{r4, pc}
   2e1e4:	ldr	r0, [pc]	; 2e1ec <__assert_fail@plt+0x1c648>
   2e1e8:	pop	{r4, pc}
   2e1ec:	andeq	r1, r3, r8, lsl r1
   2e1f0:	push	{r4, r5, r6, lr}
   2e1f4:	mov	r6, r0
   2e1f8:	mov	r5, r1
   2e1fc:	subs	r4, r2, #0
   2e200:	beq	2e22c <__assert_fail@plt+0x1c688>
   2e204:	mov	r1, r4
   2e208:	mvn	r0, #0
   2e20c:	bl	2e2f8 <__assert_fail@plt+0x1c754>
   2e210:	cmp	r0, r5
   2e214:	bcs	2e22c <__assert_fail@plt+0x1c688>
   2e218:	bl	119b8 <__errno_location@plt>
   2e21c:	mov	r3, #12
   2e220:	str	r3, [r0]
   2e224:	mov	r0, #0
   2e228:	pop	{r4, r5, r6, pc}
   2e22c:	mul	r1, r5, r4
   2e230:	mov	r0, r6
   2e234:	bl	2d434 <__assert_fail@plt+0x1b890>
   2e238:	pop	{r4, r5, r6, pc}
   2e23c:	push	{r4, r5, r6, lr}
   2e240:	mov	r6, r1
   2e244:	mov	r4, r2
   2e248:	mov	r1, #0
   2e24c:	bl	11a6c <setlocale@plt>
   2e250:	subs	r5, r0, #0
   2e254:	beq	2e278 <__assert_fail@plt+0x1c6d4>
   2e258:	mov	r0, r5
   2e25c:	bl	11988 <strlen@plt>
   2e260:	cmp	r4, r0
   2e264:	bhi	2e290 <__assert_fail@plt+0x1c6ec>
   2e268:	cmp	r4, #0
   2e26c:	bne	2e2a8 <__assert_fail@plt+0x1c704>
   2e270:	mov	r0, #34	; 0x22
   2e274:	pop	{r4, r5, r6, pc}
   2e278:	cmp	r4, #0
   2e27c:	beq	2e2cc <__assert_fail@plt+0x1c728>
   2e280:	mov	r3, #0
   2e284:	strb	r3, [r6]
   2e288:	mov	r0, #22
   2e28c:	pop	{r4, r5, r6, pc}
   2e290:	add	r2, r0, #1
   2e294:	mov	r1, r5
   2e298:	mov	r0, r6
   2e29c:	bl	11784 <memcpy@plt>
   2e2a0:	mov	r0, #0
   2e2a4:	pop	{r4, r5, r6, pc}
   2e2a8:	sub	r4, r4, #1
   2e2ac:	mov	r2, r4
   2e2b0:	mov	r1, r5
   2e2b4:	mov	r0, r6
   2e2b8:	bl	11784 <memcpy@plt>
   2e2bc:	mov	r3, #0
   2e2c0:	strb	r3, [r6, r4]
   2e2c4:	mov	r0, #34	; 0x22
   2e2c8:	pop	{r4, r5, r6, pc}
   2e2cc:	mov	r0, #22
   2e2d0:	pop	{r4, r5, r6, pc}
   2e2d4:	push	{r4, lr}
   2e2d8:	mov	r1, #0
   2e2dc:	bl	11a6c <setlocale@plt>
   2e2e0:	pop	{r4, pc}
   2e2e4:	push	{r4, lr}
   2e2e8:	mov	r2, #3
   2e2ec:	mov	r1, #0
   2e2f0:	bl	2dec8 <__assert_fail@plt+0x1c324>
   2e2f4:	pop	{r4, pc}
   2e2f8:	subs	r2, r1, #1
   2e2fc:	bxeq	lr
   2e300:	bcc	2e4d8 <__assert_fail@plt+0x1c934>
   2e304:	cmp	r0, r1
   2e308:	bls	2e4bc <__assert_fail@plt+0x1c918>
   2e30c:	tst	r1, r2
   2e310:	beq	2e4c8 <__assert_fail@plt+0x1c924>
   2e314:	clz	r3, r0
   2e318:	clz	r2, r1
   2e31c:	sub	r3, r2, r3
   2e320:	rsbs	r3, r3, #31
   2e324:	addne	r3, r3, r3, lsl #1
   2e328:	mov	r2, #0
   2e32c:	addne	pc, pc, r3, lsl #2
   2e330:	nop			; (mov r0, r0)
   2e334:	cmp	r0, r1, lsl #31
   2e338:	adc	r2, r2, r2
   2e33c:	subcs	r0, r0, r1, lsl #31
   2e340:	cmp	r0, r1, lsl #30
   2e344:	adc	r2, r2, r2
   2e348:	subcs	r0, r0, r1, lsl #30
   2e34c:	cmp	r0, r1, lsl #29
   2e350:	adc	r2, r2, r2
   2e354:	subcs	r0, r0, r1, lsl #29
   2e358:	cmp	r0, r1, lsl #28
   2e35c:	adc	r2, r2, r2
   2e360:	subcs	r0, r0, r1, lsl #28
   2e364:	cmp	r0, r1, lsl #27
   2e368:	adc	r2, r2, r2
   2e36c:	subcs	r0, r0, r1, lsl #27
   2e370:	cmp	r0, r1, lsl #26
   2e374:	adc	r2, r2, r2
   2e378:	subcs	r0, r0, r1, lsl #26
   2e37c:	cmp	r0, r1, lsl #25
   2e380:	adc	r2, r2, r2
   2e384:	subcs	r0, r0, r1, lsl #25
   2e388:	cmp	r0, r1, lsl #24
   2e38c:	adc	r2, r2, r2
   2e390:	subcs	r0, r0, r1, lsl #24
   2e394:	cmp	r0, r1, lsl #23
   2e398:	adc	r2, r2, r2
   2e39c:	subcs	r0, r0, r1, lsl #23
   2e3a0:	cmp	r0, r1, lsl #22
   2e3a4:	adc	r2, r2, r2
   2e3a8:	subcs	r0, r0, r1, lsl #22
   2e3ac:	cmp	r0, r1, lsl #21
   2e3b0:	adc	r2, r2, r2
   2e3b4:	subcs	r0, r0, r1, lsl #21
   2e3b8:	cmp	r0, r1, lsl #20
   2e3bc:	adc	r2, r2, r2
   2e3c0:	subcs	r0, r0, r1, lsl #20
   2e3c4:	cmp	r0, r1, lsl #19
   2e3c8:	adc	r2, r2, r2
   2e3cc:	subcs	r0, r0, r1, lsl #19
   2e3d0:	cmp	r0, r1, lsl #18
   2e3d4:	adc	r2, r2, r2
   2e3d8:	subcs	r0, r0, r1, lsl #18
   2e3dc:	cmp	r0, r1, lsl #17
   2e3e0:	adc	r2, r2, r2
   2e3e4:	subcs	r0, r0, r1, lsl #17
   2e3e8:	cmp	r0, r1, lsl #16
   2e3ec:	adc	r2, r2, r2
   2e3f0:	subcs	r0, r0, r1, lsl #16
   2e3f4:	cmp	r0, r1, lsl #15
   2e3f8:	adc	r2, r2, r2
   2e3fc:	subcs	r0, r0, r1, lsl #15
   2e400:	cmp	r0, r1, lsl #14
   2e404:	adc	r2, r2, r2
   2e408:	subcs	r0, r0, r1, lsl #14
   2e40c:	cmp	r0, r1, lsl #13
   2e410:	adc	r2, r2, r2
   2e414:	subcs	r0, r0, r1, lsl #13
   2e418:	cmp	r0, r1, lsl #12
   2e41c:	adc	r2, r2, r2
   2e420:	subcs	r0, r0, r1, lsl #12
   2e424:	cmp	r0, r1, lsl #11
   2e428:	adc	r2, r2, r2
   2e42c:	subcs	r0, r0, r1, lsl #11
   2e430:	cmp	r0, r1, lsl #10
   2e434:	adc	r2, r2, r2
   2e438:	subcs	r0, r0, r1, lsl #10
   2e43c:	cmp	r0, r1, lsl #9
   2e440:	adc	r2, r2, r2
   2e444:	subcs	r0, r0, r1, lsl #9
   2e448:	cmp	r0, r1, lsl #8
   2e44c:	adc	r2, r2, r2
   2e450:	subcs	r0, r0, r1, lsl #8
   2e454:	cmp	r0, r1, lsl #7
   2e458:	adc	r2, r2, r2
   2e45c:	subcs	r0, r0, r1, lsl #7
   2e460:	cmp	r0, r1, lsl #6
   2e464:	adc	r2, r2, r2
   2e468:	subcs	r0, r0, r1, lsl #6
   2e46c:	cmp	r0, r1, lsl #5
   2e470:	adc	r2, r2, r2
   2e474:	subcs	r0, r0, r1, lsl #5
   2e478:	cmp	r0, r1, lsl #4
   2e47c:	adc	r2, r2, r2
   2e480:	subcs	r0, r0, r1, lsl #4
   2e484:	cmp	r0, r1, lsl #3
   2e488:	adc	r2, r2, r2
   2e48c:	subcs	r0, r0, r1, lsl #3
   2e490:	cmp	r0, r1, lsl #2
   2e494:	adc	r2, r2, r2
   2e498:	subcs	r0, r0, r1, lsl #2
   2e49c:	cmp	r0, r1, lsl #1
   2e4a0:	adc	r2, r2, r2
   2e4a4:	subcs	r0, r0, r1, lsl #1
   2e4a8:	cmp	r0, r1
   2e4ac:	adc	r2, r2, r2
   2e4b0:	subcs	r0, r0, r1
   2e4b4:	mov	r0, r2
   2e4b8:	bx	lr
   2e4bc:	moveq	r0, #1
   2e4c0:	movne	r0, #0
   2e4c4:	bx	lr
   2e4c8:	clz	r2, r1
   2e4cc:	rsb	r2, r2, #31
   2e4d0:	lsr	r0, r0, r2
   2e4d4:	bx	lr
   2e4d8:	cmp	r0, #0
   2e4dc:	mvnne	r0, #0
   2e4e0:	b	2ec0c <__assert_fail@plt+0x1d068>
   2e4e4:	cmp	r1, #0
   2e4e8:	beq	2e4d8 <__assert_fail@plt+0x1c934>
   2e4ec:	push	{r0, r1, lr}
   2e4f0:	bl	2e2f8 <__assert_fail@plt+0x1c754>
   2e4f4:	pop	{r1, r2, lr}
   2e4f8:	mul	r3, r2, r0
   2e4fc:	sub	r1, r1, r3
   2e500:	bx	lr
   2e504:	cmp	r1, #0
   2e508:	beq	2e714 <__assert_fail@plt+0x1cb70>
   2e50c:	eor	ip, r0, r1
   2e510:	rsbmi	r1, r1, #0
   2e514:	subs	r2, r1, #1
   2e518:	beq	2e6e0 <__assert_fail@plt+0x1cb3c>
   2e51c:	movs	r3, r0
   2e520:	rsbmi	r3, r0, #0
   2e524:	cmp	r3, r1
   2e528:	bls	2e6ec <__assert_fail@plt+0x1cb48>
   2e52c:	tst	r1, r2
   2e530:	beq	2e6fc <__assert_fail@plt+0x1cb58>
   2e534:	clz	r2, r3
   2e538:	clz	r0, r1
   2e53c:	sub	r2, r0, r2
   2e540:	rsbs	r2, r2, #31
   2e544:	addne	r2, r2, r2, lsl #1
   2e548:	mov	r0, #0
   2e54c:	addne	pc, pc, r2, lsl #2
   2e550:	nop			; (mov r0, r0)
   2e554:	cmp	r3, r1, lsl #31
   2e558:	adc	r0, r0, r0
   2e55c:	subcs	r3, r3, r1, lsl #31
   2e560:	cmp	r3, r1, lsl #30
   2e564:	adc	r0, r0, r0
   2e568:	subcs	r3, r3, r1, lsl #30
   2e56c:	cmp	r3, r1, lsl #29
   2e570:	adc	r0, r0, r0
   2e574:	subcs	r3, r3, r1, lsl #29
   2e578:	cmp	r3, r1, lsl #28
   2e57c:	adc	r0, r0, r0
   2e580:	subcs	r3, r3, r1, lsl #28
   2e584:	cmp	r3, r1, lsl #27
   2e588:	adc	r0, r0, r0
   2e58c:	subcs	r3, r3, r1, lsl #27
   2e590:	cmp	r3, r1, lsl #26
   2e594:	adc	r0, r0, r0
   2e598:	subcs	r3, r3, r1, lsl #26
   2e59c:	cmp	r3, r1, lsl #25
   2e5a0:	adc	r0, r0, r0
   2e5a4:	subcs	r3, r3, r1, lsl #25
   2e5a8:	cmp	r3, r1, lsl #24
   2e5ac:	adc	r0, r0, r0
   2e5b0:	subcs	r3, r3, r1, lsl #24
   2e5b4:	cmp	r3, r1, lsl #23
   2e5b8:	adc	r0, r0, r0
   2e5bc:	subcs	r3, r3, r1, lsl #23
   2e5c0:	cmp	r3, r1, lsl #22
   2e5c4:	adc	r0, r0, r0
   2e5c8:	subcs	r3, r3, r1, lsl #22
   2e5cc:	cmp	r3, r1, lsl #21
   2e5d0:	adc	r0, r0, r0
   2e5d4:	subcs	r3, r3, r1, lsl #21
   2e5d8:	cmp	r3, r1, lsl #20
   2e5dc:	adc	r0, r0, r0
   2e5e0:	subcs	r3, r3, r1, lsl #20
   2e5e4:	cmp	r3, r1, lsl #19
   2e5e8:	adc	r0, r0, r0
   2e5ec:	subcs	r3, r3, r1, lsl #19
   2e5f0:	cmp	r3, r1, lsl #18
   2e5f4:	adc	r0, r0, r0
   2e5f8:	subcs	r3, r3, r1, lsl #18
   2e5fc:	cmp	r3, r1, lsl #17
   2e600:	adc	r0, r0, r0
   2e604:	subcs	r3, r3, r1, lsl #17
   2e608:	cmp	r3, r1, lsl #16
   2e60c:	adc	r0, r0, r0
   2e610:	subcs	r3, r3, r1, lsl #16
   2e614:	cmp	r3, r1, lsl #15
   2e618:	adc	r0, r0, r0
   2e61c:	subcs	r3, r3, r1, lsl #15
   2e620:	cmp	r3, r1, lsl #14
   2e624:	adc	r0, r0, r0
   2e628:	subcs	r3, r3, r1, lsl #14
   2e62c:	cmp	r3, r1, lsl #13
   2e630:	adc	r0, r0, r0
   2e634:	subcs	r3, r3, r1, lsl #13
   2e638:	cmp	r3, r1, lsl #12
   2e63c:	adc	r0, r0, r0
   2e640:	subcs	r3, r3, r1, lsl #12
   2e644:	cmp	r3, r1, lsl #11
   2e648:	adc	r0, r0, r0
   2e64c:	subcs	r3, r3, r1, lsl #11
   2e650:	cmp	r3, r1, lsl #10
   2e654:	adc	r0, r0, r0
   2e658:	subcs	r3, r3, r1, lsl #10
   2e65c:	cmp	r3, r1, lsl #9
   2e660:	adc	r0, r0, r0
   2e664:	subcs	r3, r3, r1, lsl #9
   2e668:	cmp	r3, r1, lsl #8
   2e66c:	adc	r0, r0, r0
   2e670:	subcs	r3, r3, r1, lsl #8
   2e674:	cmp	r3, r1, lsl #7
   2e678:	adc	r0, r0, r0
   2e67c:	subcs	r3, r3, r1, lsl #7
   2e680:	cmp	r3, r1, lsl #6
   2e684:	adc	r0, r0, r0
   2e688:	subcs	r3, r3, r1, lsl #6
   2e68c:	cmp	r3, r1, lsl #5
   2e690:	adc	r0, r0, r0
   2e694:	subcs	r3, r3, r1, lsl #5
   2e698:	cmp	r3, r1, lsl #4
   2e69c:	adc	r0, r0, r0
   2e6a0:	subcs	r3, r3, r1, lsl #4
   2e6a4:	cmp	r3, r1, lsl #3
   2e6a8:	adc	r0, r0, r0
   2e6ac:	subcs	r3, r3, r1, lsl #3
   2e6b0:	cmp	r3, r1, lsl #2
   2e6b4:	adc	r0, r0, r0
   2e6b8:	subcs	r3, r3, r1, lsl #2
   2e6bc:	cmp	r3, r1, lsl #1
   2e6c0:	adc	r0, r0, r0
   2e6c4:	subcs	r3, r3, r1, lsl #1
   2e6c8:	cmp	r3, r1
   2e6cc:	adc	r0, r0, r0
   2e6d0:	subcs	r3, r3, r1
   2e6d4:	cmp	ip, #0
   2e6d8:	rsbmi	r0, r0, #0
   2e6dc:	bx	lr
   2e6e0:	teq	ip, r0
   2e6e4:	rsbmi	r0, r0, #0
   2e6e8:	bx	lr
   2e6ec:	movcc	r0, #0
   2e6f0:	asreq	r0, ip, #31
   2e6f4:	orreq	r0, r0, #1
   2e6f8:	bx	lr
   2e6fc:	clz	r2, r1
   2e700:	rsb	r2, r2, #31
   2e704:	cmp	ip, #0
   2e708:	lsr	r0, r3, r2
   2e70c:	rsbmi	r0, r0, #0
   2e710:	bx	lr
   2e714:	cmp	r0, #0
   2e718:	mvngt	r0, #-2147483648	; 0x80000000
   2e71c:	movlt	r0, #-2147483648	; 0x80000000
   2e720:	b	2ec0c <__assert_fail@plt+0x1d068>
   2e724:	cmp	r1, #0
   2e728:	beq	2e714 <__assert_fail@plt+0x1cb70>
   2e72c:	push	{r0, r1, lr}
   2e730:	bl	2e50c <__assert_fail@plt+0x1c968>
   2e734:	pop	{r1, r2, lr}
   2e738:	mul	r3, r2, r0
   2e73c:	sub	r1, r1, r3
   2e740:	bx	lr
   2e744:	eor	r1, r1, #-2147483648	; 0x80000000
   2e748:	b	2e750 <__assert_fail@plt+0x1cbac>
   2e74c:	eor	r3, r3, #-2147483648	; 0x80000000
   2e750:	push	{r4, r5, lr}
   2e754:	lsl	r4, r1, #1
   2e758:	lsl	r5, r3, #1
   2e75c:	teq	r4, r5
   2e760:	teqeq	r0, r2
   2e764:	orrsne	ip, r4, r0
   2e768:	orrsne	ip, r5, r2
   2e76c:	mvnsne	ip, r4, asr #21
   2e770:	mvnsne	ip, r5, asr #21
   2e774:	beq	2e960 <__assert_fail@plt+0x1cdbc>
   2e778:	lsr	r4, r4, #21
   2e77c:	rsbs	r5, r4, r5, lsr #21
   2e780:	rsblt	r5, r5, #0
   2e784:	ble	2e7a4 <__assert_fail@plt+0x1cc00>
   2e788:	add	r4, r4, r5
   2e78c:	eor	r2, r0, r2
   2e790:	eor	r3, r1, r3
   2e794:	eor	r0, r2, r0
   2e798:	eor	r1, r3, r1
   2e79c:	eor	r2, r0, r2
   2e7a0:	eor	r3, r1, r3
   2e7a4:	cmp	r5, #54	; 0x36
   2e7a8:	pophi	{r4, r5, pc}
   2e7ac:	tst	r1, #-2147483648	; 0x80000000
   2e7b0:	lsl	r1, r1, #12
   2e7b4:	mov	ip, #1048576	; 0x100000
   2e7b8:	orr	r1, ip, r1, lsr #12
   2e7bc:	beq	2e7c8 <__assert_fail@plt+0x1cc24>
   2e7c0:	rsbs	r0, r0, #0
   2e7c4:	rsc	r1, r1, #0
   2e7c8:	tst	r3, #-2147483648	; 0x80000000
   2e7cc:	lsl	r3, r3, #12
   2e7d0:	orr	r3, ip, r3, lsr #12
   2e7d4:	beq	2e7e0 <__assert_fail@plt+0x1cc3c>
   2e7d8:	rsbs	r2, r2, #0
   2e7dc:	rsc	r3, r3, #0
   2e7e0:	teq	r4, r5
   2e7e4:	beq	2e948 <__assert_fail@plt+0x1cda4>
   2e7e8:	sub	r4, r4, #1
   2e7ec:	rsbs	lr, r5, #32
   2e7f0:	blt	2e80c <__assert_fail@plt+0x1cc68>
   2e7f4:	lsl	ip, r2, lr
   2e7f8:	adds	r0, r0, r2, lsr r5
   2e7fc:	adc	r1, r1, #0
   2e800:	adds	r0, r0, r3, lsl lr
   2e804:	adcs	r1, r1, r3, asr r5
   2e808:	b	2e828 <__assert_fail@plt+0x1cc84>
   2e80c:	sub	r5, r5, #32
   2e810:	add	lr, lr, #32
   2e814:	cmp	r2, #1
   2e818:	lsl	ip, r3, lr
   2e81c:	orrcs	ip, ip, #2
   2e820:	adds	r0, r0, r3, asr r5
   2e824:	adcs	r1, r1, r3, asr #31
   2e828:	and	r5, r1, #-2147483648	; 0x80000000
   2e82c:	bpl	2e83c <__assert_fail@plt+0x1cc98>
   2e830:	rsbs	ip, ip, #0
   2e834:	rscs	r0, r0, #0
   2e838:	rsc	r1, r1, #0
   2e83c:	cmp	r1, #1048576	; 0x100000
   2e840:	bcc	2e880 <__assert_fail@plt+0x1ccdc>
   2e844:	cmp	r1, #2097152	; 0x200000
   2e848:	bcc	2e868 <__assert_fail@plt+0x1ccc4>
   2e84c:	lsrs	r1, r1, #1
   2e850:	rrxs	r0, r0
   2e854:	rrx	ip, ip
   2e858:	add	r4, r4, #1
   2e85c:	lsl	r2, r4, #21
   2e860:	cmn	r2, #4194304	; 0x400000
   2e864:	bcs	2e9c0 <__assert_fail@plt+0x1ce1c>
   2e868:	cmp	ip, #-2147483648	; 0x80000000
   2e86c:	lsrseq	ip, r0, #1
   2e870:	adcs	r0, r0, #0
   2e874:	adc	r1, r1, r4, lsl #20
   2e878:	orr	r1, r1, r5
   2e87c:	pop	{r4, r5, pc}
   2e880:	lsls	ip, ip, #1
   2e884:	adcs	r0, r0, r0
   2e888:	adc	r1, r1, r1
   2e88c:	tst	r1, #1048576	; 0x100000
   2e890:	sub	r4, r4, #1
   2e894:	bne	2e868 <__assert_fail@plt+0x1ccc4>
   2e898:	teq	r1, #0
   2e89c:	moveq	r1, r0
   2e8a0:	moveq	r0, #0
   2e8a4:	clz	r3, r1
   2e8a8:	addeq	r3, r3, #32
   2e8ac:	sub	r3, r3, #11
   2e8b0:	subs	r2, r3, #32
   2e8b4:	bge	2e8d8 <__assert_fail@plt+0x1cd34>
   2e8b8:	adds	r2, r2, #12
   2e8bc:	ble	2e8d4 <__assert_fail@plt+0x1cd30>
   2e8c0:	add	ip, r2, #20
   2e8c4:	rsb	r2, r2, #12
   2e8c8:	lsl	r0, r1, ip
   2e8cc:	lsr	r1, r1, r2
   2e8d0:	b	2e8e8 <__assert_fail@plt+0x1cd44>
   2e8d4:	add	r2, r2, #20
   2e8d8:	rsble	ip, r2, #32
   2e8dc:	lsl	r1, r1, r2
   2e8e0:	orrle	r1, r1, r0, lsr ip
   2e8e4:	lslle	r0, r0, r2
   2e8e8:	subs	r4, r4, r3
   2e8ec:	addge	r1, r1, r4, lsl #20
   2e8f0:	orrge	r1, r1, r5
   2e8f4:	popge	{r4, r5, pc}
   2e8f8:	mvn	r4, r4
   2e8fc:	subs	r4, r4, #31
   2e900:	bge	2e93c <__assert_fail@plt+0x1cd98>
   2e904:	adds	r4, r4, #12
   2e908:	bgt	2e924 <__assert_fail@plt+0x1cd80>
   2e90c:	add	r4, r4, #20
   2e910:	rsb	r2, r4, #32
   2e914:	lsr	r0, r0, r4
   2e918:	orr	r0, r0, r1, lsl r2
   2e91c:	orr	r1, r5, r1, lsr r4
   2e920:	pop	{r4, r5, pc}
   2e924:	rsb	r4, r4, #12
   2e928:	rsb	r2, r4, #32
   2e92c:	lsr	r0, r0, r2
   2e930:	orr	r0, r0, r1, lsl r4
   2e934:	mov	r1, r5
   2e938:	pop	{r4, r5, pc}
   2e93c:	lsr	r0, r1, r4
   2e940:	mov	r1, r5
   2e944:	pop	{r4, r5, pc}
   2e948:	teq	r4, #0
   2e94c:	eor	r3, r3, #1048576	; 0x100000
   2e950:	eoreq	r1, r1, #1048576	; 0x100000
   2e954:	addeq	r4, r4, #1
   2e958:	subne	r5, r5, #1
   2e95c:	b	2e7e8 <__assert_fail@plt+0x1cc44>
   2e960:	mvns	ip, r4, asr #21
   2e964:	mvnsne	ip, r5, asr #21
   2e968:	beq	2e9d0 <__assert_fail@plt+0x1ce2c>
   2e96c:	teq	r4, r5
   2e970:	teqeq	r0, r2
   2e974:	beq	2e988 <__assert_fail@plt+0x1cde4>
   2e978:	orrs	ip, r4, r0
   2e97c:	moveq	r1, r3
   2e980:	moveq	r0, r2
   2e984:	pop	{r4, r5, pc}
   2e988:	teq	r1, r3
   2e98c:	movne	r1, #0
   2e990:	movne	r0, #0
   2e994:	popne	{r4, r5, pc}
   2e998:	lsrs	ip, r4, #21
   2e99c:	bne	2e9b0 <__assert_fail@plt+0x1ce0c>
   2e9a0:	lsls	r0, r0, #1
   2e9a4:	adcs	r1, r1, r1
   2e9a8:	orrcs	r1, r1, #-2147483648	; 0x80000000
   2e9ac:	pop	{r4, r5, pc}
   2e9b0:	adds	r4, r4, #4194304	; 0x400000
   2e9b4:	addcc	r1, r1, #1048576	; 0x100000
   2e9b8:	popcc	{r4, r5, pc}
   2e9bc:	and	r5, r1, #-2147483648	; 0x80000000
   2e9c0:	orr	r1, r5, #2130706432	; 0x7f000000
   2e9c4:	orr	r1, r1, #15728640	; 0xf00000
   2e9c8:	mov	r0, #0
   2e9cc:	pop	{r4, r5, pc}
   2e9d0:	mvns	ip, r4, asr #21
   2e9d4:	movne	r1, r3
   2e9d8:	movne	r0, r2
   2e9dc:	mvnseq	ip, r5, asr #21
   2e9e0:	movne	r3, r1
   2e9e4:	movne	r2, r0
   2e9e8:	orrs	r4, r0, r1, lsl #12
   2e9ec:	orrseq	r5, r2, r3, lsl #12
   2e9f0:	teqeq	r1, r3
   2e9f4:	orrne	r1, r1, #524288	; 0x80000
   2e9f8:	pop	{r4, r5, pc}
   2e9fc:	teq	r0, #0
   2ea00:	moveq	r1, #0
   2ea04:	bxeq	lr
   2ea08:	push	{r4, r5, lr}
   2ea0c:	mov	r4, #1024	; 0x400
   2ea10:	add	r4, r4, #50	; 0x32
   2ea14:	mov	r5, #0
   2ea18:	mov	r1, #0
   2ea1c:	b	2e898 <__assert_fail@plt+0x1ccf4>
   2ea20:	teq	r0, #0
   2ea24:	moveq	r1, #0
   2ea28:	bxeq	lr
   2ea2c:	push	{r4, r5, lr}
   2ea30:	mov	r4, #1024	; 0x400
   2ea34:	add	r4, r4, #50	; 0x32
   2ea38:	ands	r5, r0, #-2147483648	; 0x80000000
   2ea3c:	rsbmi	r0, r0, #0
   2ea40:	mov	r1, #0
   2ea44:	b	2e898 <__assert_fail@plt+0x1ccf4>
   2ea48:	lsls	r2, r0, #1
   2ea4c:	asr	r1, r2, #3
   2ea50:	rrx	r1, r1
   2ea54:	lsl	r0, r2, #28
   2ea58:	andsne	r3, r2, #-16777216	; 0xff000000
   2ea5c:	teqne	r3, #-16777216	; 0xff000000
   2ea60:	eorne	r1, r1, #939524096	; 0x38000000
   2ea64:	bxne	lr
   2ea68:	teq	r2, #0
   2ea6c:	teqne	r3, #-16777216	; 0xff000000
   2ea70:	bxeq	lr
   2ea74:	push	{r4, r5, lr}
   2ea78:	mov	r4, #896	; 0x380
   2ea7c:	and	r5, r1, #-2147483648	; 0x80000000
   2ea80:	bic	r1, r1, #-2147483648	; 0x80000000
   2ea84:	b	2e898 <__assert_fail@plt+0x1ccf4>
   2ea88:	orrs	r2, r0, r1
   2ea8c:	bxeq	lr
   2ea90:	push	{r4, r5, lr}
   2ea94:	mov	r5, #0
   2ea98:	b	2eab8 <__assert_fail@plt+0x1cf14>
   2ea9c:	orrs	r2, r0, r1
   2eaa0:	bxeq	lr
   2eaa4:	push	{r4, r5, lr}
   2eaa8:	ands	r5, r1, #-2147483648	; 0x80000000
   2eaac:	bpl	2eab8 <__assert_fail@plt+0x1cf14>
   2eab0:	rsbs	r0, r0, #0
   2eab4:	rsc	r1, r1, #0
   2eab8:	mov	r4, #1024	; 0x400
   2eabc:	add	r4, r4, #50	; 0x32
   2eac0:	lsrs	ip, r1, #22
   2eac4:	beq	2e83c <__assert_fail@plt+0x1cc98>
   2eac8:	mov	r2, #3
   2eacc:	lsrs	ip, ip, #3
   2ead0:	addne	r2, r2, #3
   2ead4:	lsrs	ip, ip, #3
   2ead8:	addne	r2, r2, #3
   2eadc:	add	r2, r2, ip, lsr #3
   2eae0:	rsb	r3, r2, #32
   2eae4:	lsl	ip, r0, r3
   2eae8:	lsr	r0, r0, r2
   2eaec:	orr	r0, r0, r1, lsl r3
   2eaf0:	lsr	r1, r1, r2
   2eaf4:	add	r4, r4, r2
   2eaf8:	b	2e83c <__assert_fail@plt+0x1cc98>
   2eafc:	cmp	r3, #0
   2eb00:	cmpeq	r2, #0
   2eb04:	bne	2eb28 <__assert_fail@plt+0x1cf84>
   2eb08:	cmp	r1, #0
   2eb0c:	movlt	r1, #-2147483648	; 0x80000000
   2eb10:	movlt	r0, #0
   2eb14:	blt	2eb24 <__assert_fail@plt+0x1cf80>
   2eb18:	cmpeq	r0, #0
   2eb1c:	mvnne	r1, #-2147483648	; 0x80000000
   2eb20:	mvnne	r0, #0
   2eb24:	b	2ec0c <__assert_fail@plt+0x1d068>
   2eb28:	sub	sp, sp, #8
   2eb2c:	push	{sp, lr}
   2eb30:	cmp	r1, #0
   2eb34:	blt	2eb54 <__assert_fail@plt+0x1cfb0>
   2eb38:	cmp	r3, #0
   2eb3c:	blt	2eb88 <__assert_fail@plt+0x1cfe4>
   2eb40:	bl	2ec68 <__assert_fail@plt+0x1d0c4>
   2eb44:	ldr	lr, [sp, #4]
   2eb48:	add	sp, sp, #8
   2eb4c:	pop	{r2, r3}
   2eb50:	bx	lr
   2eb54:	rsbs	r0, r0, #0
   2eb58:	sbc	r1, r1, r1, lsl #1
   2eb5c:	cmp	r3, #0
   2eb60:	blt	2ebac <__assert_fail@plt+0x1d008>
   2eb64:	bl	2ec68 <__assert_fail@plt+0x1d0c4>
   2eb68:	ldr	lr, [sp, #4]
   2eb6c:	add	sp, sp, #8
   2eb70:	pop	{r2, r3}
   2eb74:	rsbs	r0, r0, #0
   2eb78:	sbc	r1, r1, r1, lsl #1
   2eb7c:	rsbs	r2, r2, #0
   2eb80:	sbc	r3, r3, r3, lsl #1
   2eb84:	bx	lr
   2eb88:	rsbs	r2, r2, #0
   2eb8c:	sbc	r3, r3, r3, lsl #1
   2eb90:	bl	2ec68 <__assert_fail@plt+0x1d0c4>
   2eb94:	ldr	lr, [sp, #4]
   2eb98:	add	sp, sp, #8
   2eb9c:	pop	{r2, r3}
   2eba0:	rsbs	r0, r0, #0
   2eba4:	sbc	r1, r1, r1, lsl #1
   2eba8:	bx	lr
   2ebac:	rsbs	r2, r2, #0
   2ebb0:	sbc	r3, r3, r3, lsl #1
   2ebb4:	bl	2ec68 <__assert_fail@plt+0x1d0c4>
   2ebb8:	ldr	lr, [sp, #4]
   2ebbc:	add	sp, sp, #8
   2ebc0:	pop	{r2, r3}
   2ebc4:	rsbs	r2, r2, #0
   2ebc8:	sbc	r3, r3, r3, lsl #1
   2ebcc:	bx	lr
   2ebd0:	cmp	r3, #0
   2ebd4:	cmpeq	r2, #0
   2ebd8:	bne	2ebf0 <__assert_fail@plt+0x1d04c>
   2ebdc:	cmp	r1, #0
   2ebe0:	cmpeq	r0, #0
   2ebe4:	mvnne	r1, #0
   2ebe8:	mvnne	r0, #0
   2ebec:	b	2ec0c <__assert_fail@plt+0x1d068>
   2ebf0:	sub	sp, sp, #8
   2ebf4:	push	{sp, lr}
   2ebf8:	bl	2ec68 <__assert_fail@plt+0x1d0c4>
   2ebfc:	ldr	lr, [sp, #4]
   2ec00:	add	sp, sp, #8
   2ec04:	pop	{r2, r3}
   2ec08:	bx	lr
   2ec0c:	push	{r1, lr}
   2ec10:	mov	r0, #8
   2ec14:	bl	116d0 <raise@plt>
   2ec18:	pop	{r1, pc}
   2ec1c:	andeq	r0, r0, r0
   2ec20:	vmov	d7, r0, r1
   2ec24:	vldr	d6, [pc, #44]	; 2ec58 <__assert_fail@plt+0x1d0b4>
   2ec28:	vldr	d5, [pc, #48]	; 2ec60 <__assert_fail@plt+0x1d0bc>
   2ec2c:	mov	r0, #0
   2ec30:	vmul.f64	d6, d7, d6
   2ec34:	vcvt.u32.f64	s12, d6
   2ec38:	vcvt.f64.u32	d4, s12
   2ec3c:	vmov	r1, s12
   2ec40:	vmls.f64	d7, d4, d5
   2ec44:	vcvt.u32.f64	s14, d7
   2ec48:	vmov	r3, s14
   2ec4c:	orr	r0, r0, r3
   2ec50:	bx	lr
   2ec54:	nop			; (mov r0, r0)
   2ec58:	andeq	r0, r0, r0
   2ec5c:	ldclcc	0, cr0, [r0]
   2ec60:	andeq	r0, r0, r0
   2ec64:	mvnsmi	r0, r0
   2ec68:	cmp	r1, r3
   2ec6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ec70:	cmpeq	r0, r2
   2ec74:	mov	r4, r0
   2ec78:	mov	r5, r1
   2ec7c:	ldr	r9, [sp, #28]
   2ec80:	movcc	r0, #0
   2ec84:	movcc	r1, #0
   2ec88:	bcc	2ed80 <__assert_fail@plt+0x1d1dc>
   2ec8c:	cmp	r3, #0
   2ec90:	clzeq	ip, r2
   2ec94:	clzne	ip, r3
   2ec98:	addeq	ip, ip, #32
   2ec9c:	cmp	r5, #0
   2eca0:	clzeq	r1, r4
   2eca4:	addeq	r1, r1, #32
   2eca8:	clzne	r1, r5
   2ecac:	sub	ip, ip, r1
   2ecb0:	sub	lr, ip, #32
   2ecb4:	lsl	r7, r3, ip
   2ecb8:	rsb	r8, ip, #32
   2ecbc:	orr	r7, r7, r2, lsl lr
   2ecc0:	orr	r7, r7, r2, lsr r8
   2ecc4:	lsl	r6, r2, ip
   2ecc8:	cmp	r5, r7
   2eccc:	cmpeq	r4, r6
   2ecd0:	movcc	r0, #0
   2ecd4:	movcc	r1, #0
   2ecd8:	bcc	2ecf4 <__assert_fail@plt+0x1d150>
   2ecdc:	mov	r3, #1
   2ece0:	subs	r4, r4, r6
   2ece4:	lsl	r1, r3, lr
   2ece8:	lsl	r0, r3, ip
   2ecec:	orr	r1, r1, r3, lsr r8
   2ecf0:	sbc	r5, r5, r7
   2ecf4:	cmp	ip, #0
   2ecf8:	beq	2ed80 <__assert_fail@plt+0x1d1dc>
   2ecfc:	lsrs	r3, r7, #1
   2ed00:	rrx	r2, r6
   2ed04:	mov	r6, ip
   2ed08:	b	2ed2c <__assert_fail@plt+0x1d188>
   2ed0c:	subs	r4, r4, r2
   2ed10:	sbc	r5, r5, r3
   2ed14:	adds	r4, r4, r4
   2ed18:	adc	r5, r5, r5
   2ed1c:	adds	r4, r4, #1
   2ed20:	adc	r5, r5, #0
   2ed24:	subs	r6, r6, #1
   2ed28:	beq	2ed48 <__assert_fail@plt+0x1d1a4>
   2ed2c:	cmp	r5, r3
   2ed30:	cmpeq	r4, r2
   2ed34:	bcs	2ed0c <__assert_fail@plt+0x1d168>
   2ed38:	adds	r4, r4, r4
   2ed3c:	adc	r5, r5, r5
   2ed40:	subs	r6, r6, #1
   2ed44:	bne	2ed2c <__assert_fail@plt+0x1d188>
   2ed48:	lsr	r6, r4, ip
   2ed4c:	lsr	r7, r5, ip
   2ed50:	orr	r6, r6, r5, lsl r8
   2ed54:	adds	r2, r0, r4
   2ed58:	orr	r6, r6, r5, lsr lr
   2ed5c:	adc	r3, r1, r5
   2ed60:	lsl	r1, r7, ip
   2ed64:	orr	r1, r1, r6, lsl lr
   2ed68:	lsl	r0, r6, ip
   2ed6c:	orr	r1, r1, r6, lsr r8
   2ed70:	subs	r0, r2, r0
   2ed74:	mov	r4, r6
   2ed78:	mov	r5, r7
   2ed7c:	sbc	r1, r3, r1
   2ed80:	cmp	r9, #0
   2ed84:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   2ed88:	strd	r4, [r9]
   2ed8c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ed90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2ed94:	mov	r7, r0
   2ed98:	ldr	r6, [pc, #72]	; 2ede8 <__assert_fail@plt+0x1d244>
   2ed9c:	ldr	r5, [pc, #72]	; 2edec <__assert_fail@plt+0x1d248>
   2eda0:	add	r6, pc, r6
   2eda4:	add	r5, pc, r5
   2eda8:	sub	r6, r6, r5
   2edac:	mov	r8, r1
   2edb0:	mov	r9, r2
   2edb4:	bl	11674 <pthread_mutex_unlock@plt-0x20>
   2edb8:	asrs	r6, r6, #2
   2edbc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2edc0:	mov	r4, #0
   2edc4:	add	r4, r4, #1
   2edc8:	ldr	r3, [r5], #4
   2edcc:	mov	r2, r9
   2edd0:	mov	r1, r8
   2edd4:	mov	r0, r7
   2edd8:	blx	r3
   2eddc:	cmp	r6, r4
   2ede0:	bne	2edc4 <__assert_fail@plt+0x1d220>
   2ede4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2ede8:	andeq	r3, r1, r8, ror #2
   2edec:	andeq	r3, r1, r0, ror #2
   2edf0:	bx	lr
   2edf4:	ldr	r3, [pc, #12]	; 2ee08 <__assert_fail@plt+0x1d264>
   2edf8:	mov	r1, #0
   2edfc:	add	r3, pc, r3
   2ee00:	ldr	r2, [r3]
   2ee04:	b	119dc <__cxa_atexit@plt>
   2ee08:	andeq	r3, r1, r4, asr #7

Disassembly of section .fini:

0002ee0c <.fini>:
   2ee0c:	push	{r3, lr}
   2ee10:	pop	{r3, pc}
