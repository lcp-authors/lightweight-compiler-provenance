
../repos/coreutils/src/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010c20 <.init>:
   10c20:	push	{r3, lr}
   10c24:	bl	10ed4 <__assert_fail@plt+0x48>
   10c28:	pop	{r3, pc}

Disassembly of section .plt:

00010c2c <calloc@plt-0x14>:
   10c2c:	push	{lr}		; (str lr, [sp, #-4]!)
   10c30:	ldr	lr, [pc, #4]	; 10c3c <calloc@plt-0x4>
   10c34:	add	lr, pc, lr
   10c38:	ldr	pc, [lr, #8]!
   10c3c:	andeq	r5, r1, r4, asr #7

00010c40 <calloc@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #86016	; 0x15000
   10c48:	ldr	pc, [ip, #964]!	; 0x3c4

00010c4c <fputs_unlocked@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #86016	; 0x15000
   10c54:	ldr	pc, [ip, #956]!	; 0x3bc

00010c58 <strcmp@plt>:
   10c58:	add	ip, pc, #0, 12
   10c5c:	add	ip, ip, #86016	; 0x15000
   10c60:	ldr	pc, [ip, #948]!	; 0x3b4

00010c64 <fflush@plt>:
   10c64:	add	ip, pc, #0, 12
   10c68:	add	ip, ip, #86016	; 0x15000
   10c6c:	ldr	pc, [ip, #940]!	; 0x3ac

00010c70 <free@plt>:
   10c70:	add	ip, pc, #0, 12
   10c74:	add	ip, ip, #86016	; 0x15000
   10c78:	ldr	pc, [ip, #932]!	; 0x3a4

00010c7c <_exit@plt>:
   10c7c:	add	ip, pc, #0, 12
   10c80:	add	ip, ip, #86016	; 0x15000
   10c84:	ldr	pc, [ip, #924]!	; 0x39c

00010c88 <memcpy@plt>:
   10c88:	add	ip, pc, #0, 12
   10c8c:	add	ip, ip, #86016	; 0x15000
   10c90:	ldr	pc, [ip, #916]!	; 0x394

00010c94 <__strtoull_internal@plt>:
   10c94:	add	ip, pc, #0, 12
   10c98:	add	ip, ip, #86016	; 0x15000
   10c9c:	ldr	pc, [ip, #908]!	; 0x38c

00010ca0 <mbsinit@plt>:
   10ca0:	add	ip, pc, #0, 12
   10ca4:	add	ip, ip, #86016	; 0x15000
   10ca8:	ldr	pc, [ip, #900]!	; 0x384

00010cac <__sched_cpucount@plt>:
   10cac:	add	ip, pc, #0, 12
   10cb0:	add	ip, ip, #86016	; 0x15000
   10cb4:	ldr	pc, [ip, #892]!	; 0x37c

00010cb8 <memcmp@plt>:
   10cb8:	add	ip, pc, #0, 12
   10cbc:	add	ip, ip, #86016	; 0x15000
   10cc0:	ldr	pc, [ip, #884]!	; 0x374

00010cc4 <fputc_unlocked@plt>:
   10cc4:	add	ip, pc, #0, 12
   10cc8:	add	ip, ip, #86016	; 0x15000
   10ccc:	ldr	pc, [ip, #876]!	; 0x36c

00010cd0 <dcgettext@plt>:
   10cd0:	add	ip, pc, #0, 12
   10cd4:	add	ip, ip, #86016	; 0x15000
   10cd8:	ldr	pc, [ip, #868]!	; 0x364

00010cdc <sysconf@plt>:
   10cdc:	add	ip, pc, #0, 12
   10ce0:	add	ip, ip, #86016	; 0x15000
   10ce4:	ldr	pc, [ip, #860]!	; 0x35c

00010ce8 <realloc@plt>:
   10ce8:	add	ip, pc, #0, 12
   10cec:	add	ip, ip, #86016	; 0x15000
   10cf0:	ldr	pc, [ip, #852]!	; 0x354

00010cf4 <textdomain@plt>:
   10cf4:	add	ip, pc, #0, 12
   10cf8:	add	ip, ip, #86016	; 0x15000
   10cfc:	ldr	pc, [ip, #844]!	; 0x34c

00010d00 <iswprint@plt>:
   10d00:	add	ip, pc, #0, 12
   10d04:	add	ip, ip, #86016	; 0x15000
   10d08:	ldr	pc, [ip, #836]!	; 0x344

00010d0c <fwrite@plt>:
   10d0c:	add	ip, pc, #0, 12
   10d10:	add	ip, ip, #86016	; 0x15000
   10d14:	ldr	pc, [ip, #828]!	; 0x33c

00010d18 <lseek64@plt>:
   10d18:	add	ip, pc, #0, 12
   10d1c:	add	ip, ip, #86016	; 0x15000
   10d20:	ldr	pc, [ip, #820]!	; 0x334

00010d24 <__ctype_get_mb_cur_max@plt>:
   10d24:	add	ip, pc, #0, 12
   10d28:	add	ip, ip, #86016	; 0x15000
   10d2c:	ldr	pc, [ip, #812]!	; 0x32c

00010d30 <__fpending@plt>:
   10d30:	add	ip, pc, #0, 12
   10d34:	add	ip, ip, #86016	; 0x15000
   10d38:	ldr	pc, [ip, #804]!	; 0x324

00010d3c <mbrtowc@plt>:
   10d3c:	add	ip, pc, #0, 12
   10d40:	add	ip, ip, #86016	; 0x15000
   10d44:	ldr	pc, [ip, #796]!	; 0x31c

00010d48 <error@plt>:
   10d48:	add	ip, pc, #0, 12
   10d4c:	add	ip, ip, #86016	; 0x15000
   10d50:	ldr	pc, [ip, #788]!	; 0x314

00010d54 <getenv@plt>:
   10d54:	add	ip, pc, #0, 12
   10d58:	add	ip, ip, #86016	; 0x15000
   10d5c:	ldr	pc, [ip, #780]!	; 0x30c

00010d60 <malloc@plt>:
   10d60:	add	ip, pc, #0, 12
   10d64:	add	ip, ip, #86016	; 0x15000
   10d68:	ldr	pc, [ip, #772]!	; 0x304

00010d6c <__libc_start_main@plt>:
   10d6c:	add	ip, pc, #0, 12
   10d70:	add	ip, ip, #86016	; 0x15000
   10d74:	ldr	pc, [ip, #764]!	; 0x2fc

00010d78 <__freading@plt>:
   10d78:	add	ip, pc, #0, 12
   10d7c:	add	ip, ip, #86016	; 0x15000
   10d80:	ldr	pc, [ip, #756]!	; 0x2f4

00010d84 <__gmon_start__@plt>:
   10d84:	add	ip, pc, #0, 12
   10d88:	add	ip, ip, #86016	; 0x15000
   10d8c:	ldr	pc, [ip, #748]!	; 0x2ec

00010d90 <getopt_long@plt>:
   10d90:	add	ip, pc, #0, 12
   10d94:	add	ip, ip, #86016	; 0x15000
   10d98:	ldr	pc, [ip, #740]!	; 0x2e4

00010d9c <__ctype_b_loc@plt>:
   10d9c:	add	ip, pc, #0, 12
   10da0:	add	ip, ip, #86016	; 0x15000
   10da4:	ldr	pc, [ip, #732]!	; 0x2dc

00010da8 <exit@plt>:
   10da8:	add	ip, pc, #0, 12
   10dac:	add	ip, ip, #86016	; 0x15000
   10db0:	ldr	pc, [ip, #724]!	; 0x2d4

00010db4 <strtoul@plt>:
   10db4:	add	ip, pc, #0, 12
   10db8:	add	ip, ip, #86016	; 0x15000
   10dbc:	ldr	pc, [ip, #716]!	; 0x2cc

00010dc0 <strlen@plt>:
   10dc0:	add	ip, pc, #0, 12
   10dc4:	add	ip, ip, #86016	; 0x15000
   10dc8:	ldr	pc, [ip, #708]!	; 0x2c4

00010dcc <strchr@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #86016	; 0x15000
   10dd4:	ldr	pc, [ip, #700]!	; 0x2bc

00010dd8 <__errno_location@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #86016	; 0x15000
   10de0:	ldr	pc, [ip, #692]!	; 0x2b4

00010de4 <__cxa_atexit@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #86016	; 0x15000
   10dec:	ldr	pc, [ip, #684]!	; 0x2ac

00010df0 <memset@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #86016	; 0x15000
   10df8:	ldr	pc, [ip, #676]!	; 0x2a4

00010dfc <__printf_chk@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #86016	; 0x15000
   10e04:	ldr	pc, [ip, #668]!	; 0x29c

00010e08 <fileno@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #86016	; 0x15000
   10e10:	ldr	pc, [ip, #660]!	; 0x294

00010e14 <__fprintf_chk@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #86016	; 0x15000
   10e1c:	ldr	pc, [ip, #652]!	; 0x28c

00010e20 <fclose@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #86016	; 0x15000
   10e28:	ldr	pc, [ip, #644]!	; 0x284

00010e2c <fseeko64@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #86016	; 0x15000
   10e34:	ldr	pc, [ip, #636]!	; 0x27c

00010e38 <setlocale@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #86016	; 0x15000
   10e40:	ldr	pc, [ip, #628]!	; 0x274

00010e44 <strrchr@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #86016	; 0x15000
   10e4c:	ldr	pc, [ip, #620]!	; 0x26c

00010e50 <nl_langinfo@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #86016	; 0x15000
   10e58:	ldr	pc, [ip, #612]!	; 0x264

00010e5c <sched_getaffinity@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #86016	; 0x15000
   10e64:	ldr	pc, [ip, #604]!	; 0x25c

00010e68 <bindtextdomain@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #86016	; 0x15000
   10e70:	ldr	pc, [ip, #596]!	; 0x254

00010e74 <strncmp@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #86016	; 0x15000
   10e7c:	ldr	pc, [ip, #588]!	; 0x24c

00010e80 <abort@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #86016	; 0x15000
   10e88:	ldr	pc, [ip, #580]!	; 0x244

00010e8c <__assert_fail@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #86016	; 0x15000
   10e94:	ldr	pc, [ip, #572]!	; 0x23c

Disassembly of section .text:

00010e98 <.text>:
   10e98:	mov	fp, #0
   10e9c:	mov	lr, #0
   10ea0:	pop	{r1}		; (ldr r1, [sp], #4)
   10ea4:	mov	r2, sp
   10ea8:	push	{r2}		; (str r2, [sp, #-4]!)
   10eac:	push	{r0}		; (str r0, [sp, #-4]!)
   10eb0:	ldr	ip, [pc, #16]	; 10ec8 <__assert_fail@plt+0x3c>
   10eb4:	push	{ip}		; (str ip, [sp, #-4]!)
   10eb8:	ldr	r0, [pc, #12]	; 10ecc <__assert_fail@plt+0x40>
   10ebc:	ldr	r3, [pc, #12]	; 10ed0 <__assert_fail@plt+0x44>
   10ec0:	bl	10d6c <__libc_start_main@plt>
   10ec4:	bl	10e80 <abort@plt>
   10ec8:	andeq	r5, r1, r0, asr #8
   10ecc:	andeq	r1, r1, r4, lsl r3
   10ed0:	andeq	r5, r1, r0, ror #7
   10ed4:	ldr	r3, [pc, #20]	; 10ef0 <__assert_fail@plt+0x64>
   10ed8:	ldr	r2, [pc, #20]	; 10ef4 <__assert_fail@plt+0x68>
   10edc:	add	r3, pc, r3
   10ee0:	ldr	r2, [r3, r2]
   10ee4:	cmp	r2, #0
   10ee8:	bxeq	lr
   10eec:	b	10d84 <__gmon_start__@plt>
   10ef0:	andeq	r5, r1, ip, lsl r1
   10ef4:	ldrdeq	r0, [r0], -r4
   10ef8:	ldr	r0, [pc, #24]	; 10f18 <__assert_fail@plt+0x8c>
   10efc:	ldr	r3, [pc, #24]	; 10f1c <__assert_fail@plt+0x90>
   10f00:	cmp	r3, r0
   10f04:	bxeq	lr
   10f08:	ldr	r3, [pc, #16]	; 10f20 <__assert_fail@plt+0x94>
   10f0c:	cmp	r3, #0
   10f10:	bxeq	lr
   10f14:	bx	r3
   10f18:	andeq	r6, r2, r8, lsr #2
   10f1c:	andeq	r6, r2, r8, lsr #2
   10f20:	andeq	r0, r0, r0
   10f24:	ldr	r0, [pc, #36]	; 10f50 <__assert_fail@plt+0xc4>
   10f28:	ldr	r1, [pc, #36]	; 10f54 <__assert_fail@plt+0xc8>
   10f2c:	sub	r1, r1, r0
   10f30:	asr	r1, r1, #2
   10f34:	add	r1, r1, r1, lsr #31
   10f38:	asrs	r1, r1, #1
   10f3c:	bxeq	lr
   10f40:	ldr	r3, [pc, #16]	; 10f58 <__assert_fail@plt+0xcc>
   10f44:	cmp	r3, #0
   10f48:	bxeq	lr
   10f4c:	bx	r3
   10f50:	andeq	r6, r2, r8, lsr #2
   10f54:	andeq	r6, r2, r8, lsr #2
   10f58:	andeq	r0, r0, r0
   10f5c:	push	{r4, lr}
   10f60:	ldr	r4, [pc, #24]	; 10f80 <__assert_fail@plt+0xf4>
   10f64:	ldrb	r3, [r4]
   10f68:	cmp	r3, #0
   10f6c:	popne	{r4, pc}
   10f70:	bl	10ef8 <__assert_fail@plt+0x6c>
   10f74:	mov	r3, #1
   10f78:	strb	r3, [r4]
   10f7c:	pop	{r4, pc}
   10f80:	andeq	r6, r2, r4, asr #2
   10f84:	b	10f24 <__assert_fail@plt+0x98>
   10f88:	push	{lr}		; (str lr, [sp, #-4]!)
   10f8c:	sub	sp, sp, #60	; 0x3c
   10f90:	subs	r4, r0, #0
   10f94:	beq	10fdc <__assert_fail@plt+0x150>
   10f98:	movw	r3, #24888	; 0x6138
   10f9c:	movt	r3, #2
   10fa0:	ldr	r5, [r3]
   10fa4:	mov	r2, #5
   10fa8:	movw	r1, #21752	; 0x54f8
   10fac:	movt	r1, #1
   10fb0:	mov	r0, #0
   10fb4:	bl	10cd0 <dcgettext@plt>
   10fb8:	movw	r3, #24912	; 0x6150
   10fbc:	movt	r3, #2
   10fc0:	ldr	r3, [r3]
   10fc4:	mov	r2, r0
   10fc8:	mov	r1, #1
   10fcc:	mov	r0, r5
   10fd0:	bl	10e14 <__fprintf_chk@plt>
   10fd4:	mov	r0, r4
   10fd8:	bl	10da8 <exit@plt>
   10fdc:	mov	r2, #5
   10fe0:	movw	r1, #21792	; 0x5520
   10fe4:	movt	r1, #1
   10fe8:	mov	r0, #0
   10fec:	bl	10cd0 <dcgettext@plt>
   10ff0:	movw	r3, #24912	; 0x6150
   10ff4:	movt	r3, #2
   10ff8:	ldr	r2, [r3]
   10ffc:	mov	r1, r0
   11000:	mov	r0, #1
   11004:	bl	10dfc <__printf_chk@plt>
   11008:	mov	r2, #5
   1100c:	movw	r1, #21816	; 0x5538
   11010:	movt	r1, #1
   11014:	mov	r0, #0
   11018:	bl	10cd0 <dcgettext@plt>
   1101c:	movw	r5, #24892	; 0x613c
   11020:	movt	r5, #2
   11024:	ldr	r1, [r5]
   11028:	bl	10c4c <fputs_unlocked@plt>
   1102c:	mov	r2, #5
   11030:	movw	r1, #21944	; 0x55b8
   11034:	movt	r1, #1
   11038:	mov	r0, #0
   1103c:	bl	10cd0 <dcgettext@plt>
   11040:	ldr	r1, [r5]
   11044:	bl	10c4c <fputs_unlocked@plt>
   11048:	mov	r2, #5
   1104c:	movw	r1, #22064	; 0x5630
   11050:	movt	r1, #1
   11054:	mov	r0, #0
   11058:	bl	10cd0 <dcgettext@plt>
   1105c:	ldr	r1, [r5]
   11060:	bl	10c4c <fputs_unlocked@plt>
   11064:	mov	r2, #5
   11068:	movw	r1, #22112	; 0x5660
   1106c:	movt	r1, #1
   11070:	mov	r0, #0
   11074:	bl	10cd0 <dcgettext@plt>
   11078:	ldr	r1, [r5]
   1107c:	bl	10c4c <fputs_unlocked@plt>
   11080:	movw	r0, #21608	; 0x5468
   11084:	movt	r0, #1
   11088:	ldr	r1, [r0]
   1108c:	ldr	r3, [r0, #4]
   11090:	str	r1, [sp]
   11094:	str	r3, [sp, #4]
   11098:	ldrd	r2, [r0, #8]
   1109c:	strd	r2, [sp, #8]
   110a0:	ldrd	r2, [r0, #16]
   110a4:	strd	r2, [sp, #16]
   110a8:	ldrd	r2, [r0, #24]
   110ac:	strd	r2, [sp, #24]
   110b0:	ldrd	r2, [r0, #32]
   110b4:	strd	r2, [sp, #32]
   110b8:	ldrd	r2, [r0, #40]	; 0x28
   110bc:	strd	r2, [sp, #40]	; 0x28
   110c0:	ldrd	r2, [r0, #48]	; 0x30
   110c4:	strd	r2, [sp, #48]	; 0x30
   110c8:	cmp	r1, #0
   110cc:	moveq	r5, sp
   110d0:	beq	110fc <__assert_fail@plt+0x270>
   110d4:	mov	r5, sp
   110d8:	movw	r6, #21744	; 0x54f0
   110dc:	movt	r6, #1
   110e0:	mov	r0, r6
   110e4:	bl	10c58 <strcmp@plt>
   110e8:	cmp	r0, #0
   110ec:	beq	110fc <__assert_fail@plt+0x270>
   110f0:	ldr	r1, [r5, #8]!
   110f4:	cmp	r1, #0
   110f8:	bne	110e0 <__assert_fail@plt+0x254>
   110fc:	ldr	r5, [r5, #4]
   11100:	cmp	r5, #0
   11104:	beq	11260 <__assert_fail@plt+0x3d4>
   11108:	mov	r2, #5
   1110c:	movw	r1, #22168	; 0x5698
   11110:	movt	r1, #1
   11114:	mov	r0, #0
   11118:	bl	10cd0 <dcgettext@plt>
   1111c:	movw	r3, #22192	; 0x56b0
   11120:	movt	r3, #1
   11124:	movw	r2, #22232	; 0x56d8
   11128:	movt	r2, #1
   1112c:	mov	r1, r0
   11130:	mov	r0, #1
   11134:	bl	10dfc <__printf_chk@plt>
   11138:	mov	r1, #0
   1113c:	mov	r0, #5
   11140:	bl	10e38 <setlocale@plt>
   11144:	cmp	r0, #0
   11148:	beq	11164 <__assert_fail@plt+0x2d8>
   1114c:	mov	r2, #3
   11150:	movw	r1, #22248	; 0x56e8
   11154:	movt	r1, #1
   11158:	bl	10e74 <strncmp@plt>
   1115c:	cmp	r0, #0
   11160:	bne	111e0 <__assert_fail@plt+0x354>
   11164:	mov	r2, #5
   11168:	movw	r1, #22324	; 0x5734
   1116c:	movt	r1, #1
   11170:	mov	r0, #0
   11174:	bl	10cd0 <dcgettext@plt>
   11178:	movw	r6, #21744	; 0x54f0
   1117c:	movt	r6, #1
   11180:	mov	r3, r6
   11184:	movw	r2, #22192	; 0x56b0
   11188:	movt	r2, #1
   1118c:	mov	r1, r0
   11190:	mov	r0, #1
   11194:	bl	10dfc <__printf_chk@plt>
   11198:	mov	r2, #5
   1119c:	movw	r1, #22352	; 0x5750
   111a0:	movt	r1, #1
   111a4:	mov	r0, #0
   111a8:	bl	10cd0 <dcgettext@plt>
   111ac:	mov	r1, r0
   111b0:	movw	r2, #22500	; 0x57e4
   111b4:	movt	r2, #1
   111b8:	movw	r3, #22060	; 0x562c
   111bc:	movt	r3, #1
   111c0:	cmp	r5, r6
   111c4:	moveq	r3, r2
   111c8:	mov	r2, r5
   111cc:	mov	r0, #1
   111d0:	bl	10dfc <__printf_chk@plt>
   111d4:	b	10fd4 <__assert_fail@plt+0x148>
   111d8:	movw	r5, #21744	; 0x54f0
   111dc:	movt	r5, #1
   111e0:	mov	r2, #5
   111e4:	movw	r1, #22252	; 0x56ec
   111e8:	movt	r1, #1
   111ec:	mov	r0, #0
   111f0:	bl	10cd0 <dcgettext@plt>
   111f4:	movw	r3, #24892	; 0x613c
   111f8:	movt	r3, #2
   111fc:	ldr	r1, [r3]
   11200:	bl	10c4c <fputs_unlocked@plt>
   11204:	b	11164 <__assert_fail@plt+0x2d8>
   11208:	mov	r2, #5
   1120c:	movw	r1, #22324	; 0x5734
   11210:	movt	r1, #1
   11214:	mov	r0, #0
   11218:	bl	10cd0 <dcgettext@plt>
   1121c:	movw	r5, #21744	; 0x54f0
   11220:	movt	r5, #1
   11224:	mov	r3, r5
   11228:	movw	r2, #22192	; 0x56b0
   1122c:	movt	r2, #1
   11230:	mov	r1, r0
   11234:	mov	r0, #1
   11238:	bl	10dfc <__printf_chk@plt>
   1123c:	mov	r2, #5
   11240:	movw	r1, #22352	; 0x5750
   11244:	movt	r1, #1
   11248:	mov	r0, #0
   1124c:	bl	10cd0 <dcgettext@plt>
   11250:	mov	r1, r0
   11254:	movw	r3, #22500	; 0x57e4
   11258:	movt	r3, #1
   1125c:	b	111c8 <__assert_fail@plt+0x33c>
   11260:	mov	r2, #5
   11264:	movw	r1, #22168	; 0x5698
   11268:	movt	r1, #1
   1126c:	mov	r0, #0
   11270:	bl	10cd0 <dcgettext@plt>
   11274:	movw	r3, #22192	; 0x56b0
   11278:	movt	r3, #1
   1127c:	movw	r2, #22232	; 0x56d8
   11280:	movt	r2, #1
   11284:	mov	r1, r0
   11288:	mov	r0, #1
   1128c:	bl	10dfc <__printf_chk@plt>
   11290:	mov	r1, #0
   11294:	mov	r0, #5
   11298:	bl	10e38 <setlocale@plt>
   1129c:	cmp	r0, #0
   112a0:	beq	11208 <__assert_fail@plt+0x37c>
   112a4:	mov	r2, #3
   112a8:	movw	r1, #22248	; 0x56e8
   112ac:	movt	r1, #1
   112b0:	bl	10e74 <strncmp@plt>
   112b4:	cmp	r0, #0
   112b8:	bne	111d8 <__assert_fail@plt+0x34c>
   112bc:	mov	r2, #5
   112c0:	movw	r1, #22324	; 0x5734
   112c4:	movt	r1, #1
   112c8:	mov	r0, #0
   112cc:	bl	10cd0 <dcgettext@plt>
   112d0:	movw	r5, #21744	; 0x54f0
   112d4:	movt	r5, #1
   112d8:	mov	r3, r5
   112dc:	movw	r2, #22192	; 0x56b0
   112e0:	movt	r2, #1
   112e4:	mov	r1, r0
   112e8:	mov	r0, #1
   112ec:	bl	10dfc <__printf_chk@plt>
   112f0:	mov	r2, #5
   112f4:	movw	r1, #22352	; 0x5750
   112f8:	movt	r1, #1
   112fc:	mov	r0, #0
   11300:	bl	10cd0 <dcgettext@plt>
   11304:	mov	r1, r0
   11308:	movw	r3, #22500	; 0x57e4
   1130c:	movt	r3, #1
   11310:	b	111c8 <__assert_fail@plt+0x33c>
   11314:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11318:	strd	r6, [sp, #8]
   1131c:	strd	r8, [sp, #16]
   11320:	strd	sl, [sp, #24]
   11324:	str	lr, [sp, #32]
   11328:	sub	sp, sp, #28
   1132c:	mov	r7, r0
   11330:	mov	r6, r1
   11334:	ldr	r0, [r1]
   11338:	bl	1186c <__assert_fail@plt+0x9e0>
   1133c:	movw	r1, #22060	; 0x562c
   11340:	movt	r1, #1
   11344:	mov	r0, #6
   11348:	bl	10e38 <setlocale@plt>
   1134c:	movw	r4, #22236	; 0x56dc
   11350:	movt	r4, #1
   11354:	movw	r1, #22404	; 0x5784
   11358:	movt	r1, #1
   1135c:	mov	r0, r4
   11360:	bl	10e68 <bindtextdomain@plt>
   11364:	mov	r0, r4
   11368:	bl	10cf4 <textdomain@plt>
   1136c:	movw	r0, #5456	; 0x1550
   11370:	movt	r0, #1
   11374:	bl	15444 <__assert_fail@plt+0x45b8>
   11378:	mov	sl, #2
   1137c:	mov	fp, #0
   11380:	ldr	r9, [pc, #420]	; 1152c <__assert_fail@plt+0x6a0>
   11384:	movw	r4, #22060	; 0x562c
   11388:	movt	r4, #1
   1138c:	movw	r8, #24896	; 0x6140
   11390:	movt	r8, #2
   11394:	mov	r5, #0
   11398:	str	r5, [sp]
   1139c:	mov	r3, r9
   113a0:	mov	r2, r4
   113a4:	mov	r1, r6
   113a8:	mov	r0, r7
   113ac:	bl	10d90 <getopt_long@plt>
   113b0:	cmn	r0, #1
   113b4:	beq	1148c <__assert_fail@plt+0x600>
   113b8:	cmn	r0, #2
   113bc:	beq	1147c <__assert_fail@plt+0x5f0>
   113c0:	ble	1142c <__assert_fail@plt+0x5a0>
   113c4:	cmp	r0, #256	; 0x100
   113c8:	beq	11424 <__assert_fail@plt+0x598>
   113cc:	movw	r3, #257	; 0x101
   113d0:	cmp	r0, r3
   113d4:	bne	11484 <__assert_fail@plt+0x5f8>
   113d8:	ldr	r5, [r8]
   113dc:	mov	r2, #5
   113e0:	movw	r1, #22448	; 0x57b0
   113e4:	movt	r1, #1
   113e8:	mov	r0, #0
   113ec:	bl	10cd0 <dcgettext@plt>
   113f0:	mov	r3, #0
   113f4:	str	r3, [sp, #16]
   113f8:	str	r0, [sp, #12]
   113fc:	str	r4, [sp, #8]
   11400:	mvn	r2, #0
   11404:	mov	r3, #0
   11408:	strd	r2, [sp]
   1140c:	mov	r2, #0
   11410:	mov	r3, #0
   11414:	mov	r0, r5
   11418:	bl	14738 <__assert_fail@plt+0x38ac>
   1141c:	mov	fp, r0
   11420:	b	11394 <__assert_fail@plt+0x508>
   11424:	mov	sl, r5
   11428:	b	11398 <__assert_fail@plt+0x50c>
   1142c:	cmn	r0, #3
   11430:	bne	11484 <__assert_fail@plt+0x5f8>
   11434:	movw	r3, #24800	; 0x60e0
   11438:	movt	r3, #2
   1143c:	movw	r0, #24892	; 0x613c
   11440:	movt	r0, #2
   11444:	mov	r4, #0
   11448:	str	r4, [sp, #4]
   1144c:	movw	r2, #22428	; 0x579c
   11450:	movt	r2, #1
   11454:	str	r2, [sp]
   11458:	ldr	r3, [r3]
   1145c:	movw	r2, #22232	; 0x56d8
   11460:	movt	r2, #1
   11464:	movw	r1, #21744	; 0x54f0
   11468:	movt	r1, #1
   1146c:	ldr	r0, [r0]
   11470:	bl	14064 <__assert_fail@plt+0x31d8>
   11474:	mov	r0, r4
   11478:	bl	10da8 <exit@plt>
   1147c:	mov	r0, #0
   11480:	bl	10f88 <__assert_fail@plt+0xfc>
   11484:	mov	r0, #1
   11488:	bl	10f88 <__assert_fail@plt+0xfc>
   1148c:	movw	r3, #24880	; 0x6130
   11490:	movt	r3, #2
   11494:	ldr	r3, [r3]
   11498:	cmp	r3, r7
   1149c:	bne	114e4 <__assert_fail@plt+0x658>
   114a0:	mov	r0, sl
   114a4:	bl	11784 <__assert_fail@plt+0x8f8>
   114a8:	cmp	fp, r0
   114ac:	subcc	r2, r0, fp
   114b0:	movcs	r2, #1
   114b4:	movw	r1, #22484	; 0x57d4
   114b8:	movt	r1, #1
   114bc:	mov	r0, #1
   114c0:	bl	10dfc <__printf_chk@plt>
   114c4:	mov	r0, #0
   114c8:	add	sp, sp, #28
   114cc:	ldrd	r4, [sp]
   114d0:	ldrd	r6, [sp, #8]
   114d4:	ldrd	r8, [sp, #16]
   114d8:	ldrd	sl, [sp, #24]
   114dc:	add	sp, sp, #32
   114e0:	pop	{pc}		; (ldr pc, [sp], #4)
   114e4:	mov	r2, #5
   114e8:	movw	r1, #22464	; 0x57c0
   114ec:	movt	r1, #1
   114f0:	mov	r0, #0
   114f4:	bl	10cd0 <dcgettext@plt>
   114f8:	mov	r4, r0
   114fc:	movw	r3, #24880	; 0x6130
   11500:	movt	r3, #2
   11504:	ldr	r3, [r3]
   11508:	ldr	r0, [r6, r3, lsl #2]
   1150c:	bl	13b68 <__assert_fail@plt+0x2cdc>
   11510:	mov	r3, r0
   11514:	mov	r2, r4
   11518:	mov	r1, #0
   1151c:	mov	r0, r1
   11520:	bl	10d48 <error@plt>
   11524:	mov	r0, #1
   11528:	bl	10f88 <__assert_fail@plt+0xfc>
   1152c:	andeq	r5, r1, r0, lsr #9
   11530:	movw	r3, #24904	; 0x6148
   11534:	movt	r3, #2
   11538:	str	r0, [r3]
   1153c:	bx	lr
   11540:	movw	r3, #24904	; 0x6148
   11544:	movt	r3, #2
   11548:	strb	r0, [r3, #4]
   1154c:	bx	lr
   11550:	strd	r4, [sp, #-16]!
   11554:	str	r6, [sp, #8]
   11558:	str	lr, [sp, #12]
   1155c:	sub	sp, sp, #8
   11560:	movw	r3, #24892	; 0x613c
   11564:	movt	r3, #2
   11568:	ldr	r0, [r3]
   1156c:	bl	14efc <__assert_fail@plt+0x4070>
   11570:	cmp	r0, #0
   11574:	beq	1159c <__assert_fail@plt+0x710>
   11578:	movw	r3, #24904	; 0x6148
   1157c:	movt	r3, #2
   11580:	ldrb	r3, [r3, #4]
   11584:	cmp	r3, #0
   11588:	beq	115c8 <__assert_fail@plt+0x73c>
   1158c:	bl	10dd8 <__errno_location@plt>
   11590:	ldr	r3, [r0]
   11594:	cmp	r3, #32
   11598:	bne	115c8 <__assert_fail@plt+0x73c>
   1159c:	movw	r3, #24888	; 0x6138
   115a0:	movt	r3, #2
   115a4:	ldr	r0, [r3]
   115a8:	bl	14efc <__assert_fail@plt+0x4070>
   115ac:	cmp	r0, #0
   115b0:	bne	11650 <__assert_fail@plt+0x7c4>
   115b4:	add	sp, sp, #8
   115b8:	ldrd	r4, [sp]
   115bc:	ldr	r6, [sp, #8]
   115c0:	add	sp, sp, #12
   115c4:	pop	{pc}		; (ldr pc, [sp], #4)
   115c8:	mov	r2, #5
   115cc:	movw	r1, #22644	; 0x5874
   115d0:	movt	r1, #1
   115d4:	mov	r0, #0
   115d8:	bl	10cd0 <dcgettext@plt>
   115dc:	mov	r4, r0
   115e0:	movw	r3, #24904	; 0x6148
   115e4:	movt	r3, #2
   115e8:	ldr	r5, [r3]
   115ec:	cmp	r5, #0
   115f0:	beq	11630 <__assert_fail@plt+0x7a4>
   115f4:	bl	10dd8 <__errno_location@plt>
   115f8:	ldr	r6, [r0]
   115fc:	mov	r0, r5
   11600:	bl	13964 <__assert_fail@plt+0x2ad8>
   11604:	str	r4, [sp]
   11608:	mov	r3, r0
   1160c:	movw	r2, #22656	; 0x5880
   11610:	movt	r2, #1
   11614:	mov	r1, r6
   11618:	mov	r0, #0
   1161c:	bl	10d48 <error@plt>
   11620:	movw	r3, #24804	; 0x60e4
   11624:	movt	r3, #2
   11628:	ldr	r0, [r3]
   1162c:	bl	10c7c <_exit@plt>
   11630:	bl	10dd8 <__errno_location@plt>
   11634:	mov	r3, r4
   11638:	movw	r2, #22660	; 0x5884
   1163c:	movt	r2, #1
   11640:	ldr	r1, [r0]
   11644:	mov	r0, #0
   11648:	bl	10d48 <error@plt>
   1164c:	b	11620 <__assert_fail@plt+0x794>
   11650:	movw	r3, #24804	; 0x60e4
   11654:	movt	r3, #2
   11658:	ldr	r0, [r3]
   1165c:	bl	10c7c <_exit@plt>
   11660:	cmp	r0, #0
   11664:	beq	11728 <__assert_fail@plt+0x89c>
   11668:	ldrb	r3, [r0]
   1166c:	cmp	r3, #0
   11670:	beq	11730 <__assert_fail@plt+0x8a4>
   11674:	cmp	r3, #9
   11678:	bcc	116a0 <__assert_fail@plt+0x814>
   1167c:	cmp	r3, #13
   11680:	bls	1168c <__assert_fail@plt+0x800>
   11684:	cmp	r3, #32
   11688:	bne	116a0 <__assert_fail@plt+0x814>
   1168c:	ldrb	r3, [r0, #1]!
   11690:	cmp	r3, #0
   11694:	bne	11674 <__assert_fail@plt+0x7e8>
   11698:	mov	r0, #0
   1169c:	bx	lr
   116a0:	sub	r3, r3, #48	; 0x30
   116a4:	cmp	r3, #9
   116a8:	bhi	11738 <__assert_fail@plt+0x8ac>
   116ac:	push	{lr}		; (str lr, [sp, #-4]!)
   116b0:	sub	sp, sp, #12
   116b4:	mov	r3, #0
   116b8:	str	r3, [sp, #4]
   116bc:	mov	r2, #10
   116c0:	add	r1, sp, #4
   116c4:	bl	10db4 <strtoul@plt>
   116c8:	ldr	r2, [sp, #4]
   116cc:	cmp	r2, #0
   116d0:	beq	1171c <__assert_fail@plt+0x890>
   116d4:	ldrb	r3, [r2]
   116d8:	cmp	r3, #0
   116dc:	beq	11720 <__assert_fail@plt+0x894>
   116e0:	cmp	r3, #9
   116e4:	bcc	11710 <__assert_fail@plt+0x884>
   116e8:	cmp	r3, #13
   116ec:	bls	116f8 <__assert_fail@plt+0x86c>
   116f0:	cmp	r3, #32
   116f4:	bne	11710 <__assert_fail@plt+0x884>
   116f8:	add	r2, r2, #1
   116fc:	str	r2, [sp, #4]
   11700:	ldrb	r3, [r2]
   11704:	cmp	r3, #0
   11708:	bne	116e0 <__assert_fail@plt+0x854>
   1170c:	b	11720 <__assert_fail@plt+0x894>
   11710:	cmp	r3, #0
   11714:	cmpne	r3, #44	; 0x2c
   11718:	beq	11720 <__assert_fail@plt+0x894>
   1171c:	mov	r0, #0
   11720:	add	sp, sp, #12
   11724:	pop	{pc}		; (ldr pc, [sp], #4)
   11728:	mov	r0, #0
   1172c:	bx	lr
   11730:	mov	r0, #0
   11734:	bx	lr
   11738:	mov	r0, #0
   1173c:	bx	lr
   11740:	push	{lr}		; (str lr, [sp, #-4]!)
   11744:	sub	sp, sp, #132	; 0x84
   11748:	mov	r2, sp
   1174c:	mov	r1, #128	; 0x80
   11750:	mov	r0, #0
   11754:	bl	10e5c <sched_getaffinity@plt>
   11758:	cmp	r0, #0
   1175c:	beq	1176c <__assert_fail@plt+0x8e0>
   11760:	mov	r0, #0
   11764:	add	sp, sp, #132	; 0x84
   11768:	pop	{pc}		; (ldr pc, [sp], #4)
   1176c:	mov	r1, sp
   11770:	mov	r0, #128	; 0x80
   11774:	bl	10cac <__sched_cpucount@plt>
   11778:	cmp	r0, #0
   1177c:	beq	11760 <__assert_fail@plt+0x8d4>
   11780:	b	11764 <__assert_fail@plt+0x8d8>
   11784:	strd	r4, [sp, #-16]!
   11788:	str	r6, [sp, #8]
   1178c:	str	lr, [sp, #12]
   11790:	cmp	r0, #2
   11794:	beq	117e0 <__assert_fail@plt+0x954>
   11798:	cmp	r0, #1
   1179c:	beq	11844 <__assert_fail@plt+0x9b8>
   117a0:	mov	r0, #83	; 0x53
   117a4:	bl	10cdc <sysconf@plt>
   117a8:	mov	r4, r0
   117ac:	sub	r3, r0, #1
   117b0:	cmp	r3, #1
   117b4:	bls	1184c <__assert_fail@plt+0x9c0>
   117b8:	cmp	r4, #0
   117bc:	mvnle	r4, #0
   117c0:	movle	r0, #1
   117c4:	bgt	11860 <__assert_fail@plt+0x9d4>
   117c8:	cmp	r0, r4
   117cc:	movcs	r0, r4
   117d0:	ldrd	r4, [sp]
   117d4:	ldr	r6, [sp, #8]
   117d8:	add	sp, sp, #12
   117dc:	pop	{pc}		; (ldr pc, [sp], #4)
   117e0:	movw	r0, #22664	; 0x5888
   117e4:	movt	r0, #1
   117e8:	bl	10d54 <getenv@plt>
   117ec:	bl	11660 <__assert_fail@plt+0x7d4>
   117f0:	mov	r5, r0
   117f4:	movw	r0, #22680	; 0x5898
   117f8:	movt	r0, #1
   117fc:	bl	10d54 <getenv@plt>
   11800:	bl	11660 <__assert_fail@plt+0x7d4>
   11804:	subs	r4, r0, #0
   11808:	mvneq	r4, #0
   1180c:	cmp	r5, #0
   11810:	bne	11834 <__assert_fail@plt+0x9a8>
   11814:	bl	11740 <__assert_fail@plt+0x8b4>
   11818:	cmp	r0, #0
   1181c:	bne	117c8 <__assert_fail@plt+0x93c>
   11820:	mov	r0, #84	; 0x54
   11824:	bl	10cdc <sysconf@plt>
   11828:	cmp	r0, #1
   1182c:	movlt	r0, #1
   11830:	b	117c8 <__assert_fail@plt+0x93c>
   11834:	cmp	r4, r5
   11838:	movcc	r0, r4
   1183c:	movcs	r0, r5
   11840:	b	117d0 <__assert_fail@plt+0x944>
   11844:	mvn	r4, #0
   11848:	b	11814 <__assert_fail@plt+0x988>
   1184c:	bl	11740 <__assert_fail@plt+0x8b4>
   11850:	cmp	r4, r0
   11854:	bcs	11860 <__assert_fail@plt+0x9d4>
   11858:	mov	r4, r0
   1185c:	b	117b8 <__assert_fail@plt+0x92c>
   11860:	mov	r0, r4
   11864:	mvn	r4, #0
   11868:	b	117c8 <__assert_fail@plt+0x93c>
   1186c:	strd	r4, [sp, #-16]!
   11870:	str	r6, [sp, #8]
   11874:	str	lr, [sp, #12]
   11878:	subs	r4, r0, #0
   1187c:	beq	11918 <__assert_fail@plt+0xa8c>
   11880:	mov	r1, #47	; 0x2f
   11884:	mov	r0, r4
   11888:	bl	10e44 <strrchr@plt>
   1188c:	subs	r5, r0, #0
   11890:	beq	118f0 <__assert_fail@plt+0xa64>
   11894:	add	r6, r5, #1
   11898:	sub	r3, r6, r4
   1189c:	cmp	r3, #6
   118a0:	ble	118f0 <__assert_fail@plt+0xa64>
   118a4:	mov	r2, #7
   118a8:	movw	r1, #22756	; 0x58e4
   118ac:	movt	r1, #1
   118b0:	sub	r0, r5, #6
   118b4:	bl	10e74 <strncmp@plt>
   118b8:	cmp	r0, #0
   118bc:	bne	118f0 <__assert_fail@plt+0xa64>
   118c0:	mov	r2, #3
   118c4:	movw	r1, #22764	; 0x58ec
   118c8:	movt	r1, #1
   118cc:	mov	r0, r6
   118d0:	bl	10e74 <strncmp@plt>
   118d4:	cmp	r0, #0
   118d8:	movne	r4, r6
   118dc:	bne	118f0 <__assert_fail@plt+0xa64>
   118e0:	add	r4, r5, #4
   118e4:	movw	r3, #24872	; 0x6128
   118e8:	movt	r3, #2
   118ec:	str	r4, [r3]
   118f0:	movw	r3, #24912	; 0x6150
   118f4:	movt	r3, #2
   118f8:	str	r4, [r3]
   118fc:	movw	r3, #24876	; 0x612c
   11900:	movt	r3, #2
   11904:	str	r4, [r3]
   11908:	ldrd	r4, [sp]
   1190c:	ldr	r6, [sp, #8]
   11910:	add	sp, sp, #12
   11914:	pop	{pc}		; (ldr pc, [sp], #4)
   11918:	movw	r3, #24888	; 0x6138
   1191c:	movt	r3, #2
   11920:	ldr	r3, [r3]
   11924:	mov	r2, #55	; 0x37
   11928:	mov	r1, #1
   1192c:	movw	r0, #22700	; 0x58ac
   11930:	movt	r0, #1
   11934:	bl	10d0c <fwrite@plt>
   11938:	bl	10e80 <abort@plt>
   1193c:	mov	r2, #0
   11940:	mov	r3, #0
   11944:	strd	r2, [r0]
   11948:	strd	r2, [r0, #8]
   1194c:	strd	r2, [r0, #16]
   11950:	strd	r2, [r0, #24]
   11954:	strd	r2, [r0, #32]
   11958:	strd	r2, [r0, #40]	; 0x28
   1195c:	cmp	r1, #10
   11960:	beq	1196c <__assert_fail@plt+0xae0>
   11964:	str	r1, [r0]
   11968:	bx	lr
   1196c:	str	r4, [sp, #-8]!
   11970:	str	lr, [sp, #4]
   11974:	bl	10e80 <abort@plt>
   11978:	strd	r4, [sp, #-16]!
   1197c:	str	r6, [sp, #8]
   11980:	str	lr, [sp, #12]
   11984:	mov	r5, r0
   11988:	mov	r6, r1
   1198c:	mov	r2, #5
   11990:	mov	r1, r0
   11994:	mov	r0, #0
   11998:	bl	10cd0 <dcgettext@plt>
   1199c:	mov	r4, r0
   119a0:	cmp	r5, r0
   119a4:	beq	119bc <__assert_fail@plt+0xb30>
   119a8:	mov	r0, r4
   119ac:	ldrd	r4, [sp]
   119b0:	ldr	r6, [sp, #8]
   119b4:	add	sp, sp, #12
   119b8:	pop	{pc}		; (ldr pc, [sp], #4)
   119bc:	bl	151d4 <__assert_fail@plt+0x4348>
   119c0:	ldrb	r3, [r0]
   119c4:	bic	r3, r3, #32
   119c8:	cmp	r3, #85	; 0x55
   119cc:	bne	11a50 <__assert_fail@plt+0xbc4>
   119d0:	ldrb	r3, [r0, #1]
   119d4:	bic	r3, r3, #32
   119d8:	cmp	r3, #84	; 0x54
   119dc:	bne	11a14 <__assert_fail@plt+0xb88>
   119e0:	ldrb	r3, [r0, #2]
   119e4:	bic	r3, r3, #32
   119e8:	cmp	r3, #70	; 0x46
   119ec:	bne	11a14 <__assert_fail@plt+0xb88>
   119f0:	ldrb	r3, [r0, #3]
   119f4:	cmp	r3, #45	; 0x2d
   119f8:	bne	11a14 <__assert_fail@plt+0xb88>
   119fc:	ldrb	r3, [r0, #4]
   11a00:	cmp	r3, #56	; 0x38
   11a04:	bne	11a14 <__assert_fail@plt+0xb88>
   11a08:	ldrb	r3, [r0, #5]
   11a0c:	cmp	r3, #0
   11a10:	beq	11a30 <__assert_fail@plt+0xba4>
   11a14:	movw	r4, #22852	; 0x5944
   11a18:	movt	r4, #1
   11a1c:	movw	r3, #22872	; 0x5958
   11a20:	movt	r3, #1
   11a24:	cmp	r6, #9
   11a28:	movne	r4, r3
   11a2c:	b	119a8 <__assert_fail@plt+0xb1c>
   11a30:	ldrb	r2, [r4]
   11a34:	movw	r4, #22868	; 0x5954
   11a38:	movt	r4, #1
   11a3c:	movw	r3, #22856	; 0x5948
   11a40:	movt	r3, #1
   11a44:	cmp	r2, #96	; 0x60
   11a48:	movne	r4, r3
   11a4c:	b	119a8 <__assert_fail@plt+0xb1c>
   11a50:	cmp	r3, #71	; 0x47
   11a54:	bne	11a14 <__assert_fail@plt+0xb88>
   11a58:	ldrb	r3, [r0, #1]
   11a5c:	bic	r3, r3, #32
   11a60:	cmp	r3, #66	; 0x42
   11a64:	bne	11a14 <__assert_fail@plt+0xb88>
   11a68:	ldrb	r3, [r0, #2]
   11a6c:	cmp	r3, #49	; 0x31
   11a70:	bne	11a14 <__assert_fail@plt+0xb88>
   11a74:	ldrb	r3, [r0, #3]
   11a78:	cmp	r3, #56	; 0x38
   11a7c:	bne	11a14 <__assert_fail@plt+0xb88>
   11a80:	ldrb	r3, [r0, #4]
   11a84:	cmp	r3, #48	; 0x30
   11a88:	bne	11a14 <__assert_fail@plt+0xb88>
   11a8c:	ldrb	r3, [r0, #5]
   11a90:	cmp	r3, #51	; 0x33
   11a94:	bne	11a14 <__assert_fail@plt+0xb88>
   11a98:	ldrb	r3, [r0, #6]
   11a9c:	cmp	r3, #48	; 0x30
   11aa0:	bne	11a14 <__assert_fail@plt+0xb88>
   11aa4:	ldrb	r3, [r0, #7]
   11aa8:	cmp	r3, #0
   11aac:	bne	11a14 <__assert_fail@plt+0xb88>
   11ab0:	ldrb	r2, [r4]
   11ab4:	movw	r4, #22864	; 0x5950
   11ab8:	movt	r4, #1
   11abc:	movw	r3, #22860	; 0x594c
   11ac0:	movt	r3, #1
   11ac4:	cmp	r2, #96	; 0x60
   11ac8:	movne	r4, r3
   11acc:	b	119a8 <__assert_fail@plt+0xb1c>
   11ad0:	strd	r4, [sp, #-36]!	; 0xffffffdc
   11ad4:	strd	r6, [sp, #8]
   11ad8:	strd	r8, [sp, #16]
   11adc:	strd	sl, [sp, #24]
   11ae0:	str	lr, [sp, #32]
   11ae4:	sub	sp, sp, #116	; 0x74
   11ae8:	str	r0, [sp, #64]	; 0x40
   11aec:	mov	r8, r1
   11af0:	str	r2, [sp, #48]	; 0x30
   11af4:	str	r3, [sp, #24]
   11af8:	ldr	r7, [sp, #152]	; 0x98
   11afc:	bl	10d24 <__ctype_get_mb_cur_max@plt>
   11b00:	str	r0, [sp, #76]	; 0x4c
   11b04:	ldr	r3, [sp, #156]	; 0x9c
   11b08:	ubfx	r3, r3, #1, #1
   11b0c:	str	r3, [sp, #32]
   11b10:	mov	r3, #1
   11b14:	str	r3, [sp, #40]	; 0x28
   11b18:	mov	r3, #0
   11b1c:	str	r3, [sp, #68]	; 0x44
   11b20:	str	r3, [sp, #36]	; 0x24
   11b24:	str	r3, [sp, #28]
   11b28:	str	r3, [sp, #52]	; 0x34
   11b2c:	str	r3, [sp, #60]	; 0x3c
   11b30:	str	r3, [sp, #72]	; 0x48
   11b34:	movw	r3, #22876	; 0x595c
   11b38:	movt	r3, #1
   11b3c:	str	r3, [sp, #80]	; 0x50
   11b40:	mov	r9, r8
   11b44:	mov	sl, r7
   11b48:	cmp	sl, #10
   11b4c:	ldrls	pc, [pc, sl, lsl #2]
   11b50:	b	11d14 <__assert_fail@plt+0xe88>
   11b54:			; <UNDEFINED> instruction: 0x00011bb4
   11b58:	andeq	r1, r1, r8, lsl #23
   11b5c:	andeq	r1, r1, ip, ror #25
   11b60:	andeq	r1, r1, r0, lsl #23
   11b64:	andeq	r1, r1, r0, lsr #25
   11b68:	andeq	r1, r1, r4, asr #23
   11b6c:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   11b70:	andeq	r1, r1, r8, lsl sp
   11b74:	andeq	r1, r1, r0, lsl #24
   11b78:	andeq	r1, r1, r0, lsl #24
   11b7c:	andeq	r1, r1, r0, lsl #24
   11b80:	mov	r3, #1
   11b84:	str	r3, [sp, #28]
   11b88:	mov	r3, #1
   11b8c:	str	r3, [sp, #32]
   11b90:	str	r3, [sp, #52]	; 0x34
   11b94:	movw	r3, #22872	; 0x5958
   11b98:	movt	r3, #1
   11b9c:	str	r3, [sp, #60]	; 0x3c
   11ba0:	mov	fp, #0
   11ba4:	mov	sl, #2
   11ba8:	mov	r6, #0
   11bac:	ldr	r8, [sp, #64]	; 0x40
   11bb0:	b	12428 <__assert_fail@plt+0x159c>
   11bb4:	mov	fp, sl
   11bb8:	mov	r3, #0
   11bbc:	str	r3, [sp, #32]
   11bc0:	b	11ba8 <__assert_fail@plt+0xd1c>
   11bc4:	ldr	r3, [sp, #32]
   11bc8:	cmp	r3, #0
   11bcc:	bne	11d2c <__assert_fail@plt+0xea0>
   11bd0:	cmp	r9, #0
   11bd4:	beq	11d50 <__assert_fail@plt+0xec4>
   11bd8:	mov	r3, #34	; 0x22
   11bdc:	ldr	r2, [sp, #64]	; 0x40
   11be0:	strb	r3, [r2]
   11be4:	mov	fp, #1
   11be8:	str	fp, [sp, #28]
   11bec:	str	fp, [sp, #52]	; 0x34
   11bf0:	movw	r3, #22852	; 0x5944
   11bf4:	movt	r3, #1
   11bf8:	str	r3, [sp, #60]	; 0x3c
   11bfc:	b	11ba8 <__assert_fail@plt+0xd1c>
   11c00:	cmp	sl, #10
   11c04:	bne	11c38 <__assert_fail@plt+0xdac>
   11c08:	ldr	r3, [sp, #32]
   11c0c:	cmp	r3, #0
   11c10:	movne	fp, #0
   11c14:	beq	11c60 <__assert_fail@plt+0xdd4>
   11c18:	ldr	r0, [sp, #168]	; 0xa8
   11c1c:	bl	10dc0 <strlen@plt>
   11c20:	str	r0, [sp, #52]	; 0x34
   11c24:	ldr	r3, [sp, #168]	; 0xa8
   11c28:	str	r3, [sp, #60]	; 0x3c
   11c2c:	mov	r3, #1
   11c30:	str	r3, [sp, #28]
   11c34:	b	11ba8 <__assert_fail@plt+0xd1c>
   11c38:	mov	r1, sl
   11c3c:	ldr	r0, [sp, #80]	; 0x50
   11c40:	bl	11978 <__assert_fail@plt+0xaec>
   11c44:	str	r0, [sp, #164]	; 0xa4
   11c48:	mov	r1, sl
   11c4c:	movw	r0, #22872	; 0x5958
   11c50:	movt	r0, #1
   11c54:	bl	11978 <__assert_fail@plt+0xaec>
   11c58:	str	r0, [sp, #168]	; 0xa8
   11c5c:	b	11c08 <__assert_fail@plt+0xd7c>
   11c60:	ldr	r3, [sp, #164]	; 0xa4
   11c64:	ldrb	r3, [r3]
   11c68:	cmp	r3, #0
   11c6c:	beq	11c98 <__assert_fail@plt+0xe0c>
   11c70:	ldr	r2, [sp, #164]	; 0xa4
   11c74:	mov	fp, #0
   11c78:	ldr	r1, [sp, #64]	; 0x40
   11c7c:	cmp	r9, fp
   11c80:	strbhi	r3, [r1, fp]
   11c84:	add	fp, fp, #1
   11c88:	ldrb	r3, [r2, #1]!
   11c8c:	cmp	r3, #0
   11c90:	bne	11c7c <__assert_fail@plt+0xdf0>
   11c94:	b	11c18 <__assert_fail@plt+0xd8c>
   11c98:	mov	fp, #0
   11c9c:	b	11c18 <__assert_fail@plt+0xd8c>
   11ca0:	ldr	r3, [sp, #32]
   11ca4:	cmp	r3, #0
   11ca8:	bne	11b88 <__assert_fail@plt+0xcfc>
   11cac:	mov	r3, #1
   11cb0:	str	r3, [sp, #28]
   11cb4:	cmp	r9, #0
   11cb8:	beq	11d6c <__assert_fail@plt+0xee0>
   11cbc:	mov	r3, #39	; 0x27
   11cc0:	ldr	r2, [sp, #64]	; 0x40
   11cc4:	strb	r3, [r2]
   11cc8:	mov	r3, #0
   11ccc:	str	r3, [sp, #32]
   11cd0:	mov	fp, #1
   11cd4:	str	fp, [sp, #52]	; 0x34
   11cd8:	movw	r3, #22872	; 0x5958
   11cdc:	movt	r3, #1
   11ce0:	str	r3, [sp, #60]	; 0x3c
   11ce4:	mov	sl, #2
   11ce8:	b	11ba8 <__assert_fail@plt+0xd1c>
   11cec:	ldr	r3, [sp, #32]
   11cf0:	cmp	r3, #0
   11cf4:	beq	11cb4 <__assert_fail@plt+0xe28>
   11cf8:	mov	r3, #1
   11cfc:	str	r3, [sp, #52]	; 0x34
   11d00:	movw	r3, #22872	; 0x5958
   11d04:	movt	r3, #1
   11d08:	str	r3, [sp, #60]	; 0x3c
   11d0c:	mov	fp, #0
   11d10:	b	11ba8 <__assert_fail@plt+0xd1c>
   11d14:	bl	10e80 <abort@plt>
   11d18:	mov	fp, #0
   11d1c:	str	fp, [sp, #32]
   11d20:	mov	r3, #1
   11d24:	str	r3, [sp, #28]
   11d28:	b	11ba8 <__assert_fail@plt+0xd1c>
   11d2c:	ldr	r3, [sp, #32]
   11d30:	str	r3, [sp, #28]
   11d34:	mov	r3, #1
   11d38:	str	r3, [sp, #52]	; 0x34
   11d3c:	movw	r3, #22852	; 0x5944
   11d40:	movt	r3, #1
   11d44:	str	r3, [sp, #60]	; 0x3c
   11d48:	mov	fp, #0
   11d4c:	b	11ba8 <__assert_fail@plt+0xd1c>
   11d50:	mov	fp, #1
   11d54:	str	fp, [sp, #28]
   11d58:	str	fp, [sp, #52]	; 0x34
   11d5c:	movw	r3, #22852	; 0x5944
   11d60:	movt	r3, #1
   11d64:	str	r3, [sp, #60]	; 0x3c
   11d68:	b	11ba8 <__assert_fail@plt+0xd1c>
   11d6c:	mov	r3, #0
   11d70:	str	r3, [sp, #32]
   11d74:	mov	fp, #1
   11d78:	str	fp, [sp, #52]	; 0x34
   11d7c:	movw	r3, #22872	; 0x5958
   11d80:	movt	r3, #1
   11d84:	str	r3, [sp, #60]	; 0x3c
   11d88:	mov	sl, #2
   11d8c:	b	11ba8 <__assert_fail@plt+0xd1c>
   11d90:	mov	r3, r2
   11d94:	add	r4, r6, r2
   11d98:	ldr	r2, [sp, #24]
   11d9c:	cmp	r3, #1
   11da0:	movls	r3, #0
   11da4:	movhi	r3, #1
   11da8:	cmn	r2, #1
   11dac:	movne	r3, #0
   11db0:	cmp	r3, #0
   11db4:	beq	11dc4 <__assert_fail@plt+0xf38>
   11db8:	ldr	r0, [sp, #48]	; 0x30
   11dbc:	bl	10dc0 <strlen@plt>
   11dc0:	str	r0, [sp, #24]
   11dc4:	ldr	r3, [sp, #24]
   11dc8:	cmp	r4, r3
   11dcc:	bhi	12fb8 <__assert_fail@plt+0x212c>
   11dd0:	ldr	r3, [sp, #48]	; 0x30
   11dd4:	add	r4, r3, r6
   11dd8:	ldr	r2, [sp, #52]	; 0x34
   11ddc:	ldr	r1, [sp, #60]	; 0x3c
   11de0:	mov	r0, r4
   11de4:	bl	10cb8 <memcmp@plt>
   11de8:	cmp	r0, #0
   11dec:	bne	12fb8 <__assert_fail@plt+0x212c>
   11df0:	ldr	r3, [sp, #32]
   11df4:	cmp	r3, #0
   11df8:	bne	12008 <__assert_fail@plt+0x117c>
   11dfc:	ldrb	r4, [r4]
   11e00:	cmp	r4, #126	; 0x7e
   11e04:	ldrls	pc, [pc, r4, lsl #2]
   11e08:	b	128bc <__assert_fail@plt+0x1a30>
   11e0c:	andeq	r2, r1, ip, asr #32
   11e10:			; <UNDEFINED> instruction: 0x000128bc
   11e14:			; <UNDEFINED> instruction: 0x000128bc
   11e18:			; <UNDEFINED> instruction: 0x000128bc
   11e1c:			; <UNDEFINED> instruction: 0x000128bc
   11e20:			; <UNDEFINED> instruction: 0x000128bc
   11e24:			; <UNDEFINED> instruction: 0x000128bc
   11e28:	andeq	r2, r1, r4, ror #14
   11e2c:	andeq	r2, r1, r8, ror #5
   11e30:	andeq	r2, r1, ip, lsl #13
   11e34:	andeq	r2, r1, r8, lsr r7
   11e38:	andeq	r2, r1, r0, lsr #13
   11e3c:	strdeq	r2, [r1], -ip
   11e40:	andeq	r2, r1, r0, lsl r3
   11e44:			; <UNDEFINED> instruction: 0x000128bc
   11e48:			; <UNDEFINED> instruction: 0x000128bc
   11e4c:			; <UNDEFINED> instruction: 0x000128bc
   11e50:			; <UNDEFINED> instruction: 0x000128bc
   11e54:			; <UNDEFINED> instruction: 0x000128bc
   11e58:			; <UNDEFINED> instruction: 0x000128bc
   11e5c:			; <UNDEFINED> instruction: 0x000128bc
   11e60:			; <UNDEFINED> instruction: 0x000128bc
   11e64:			; <UNDEFINED> instruction: 0x000128bc
   11e68:			; <UNDEFINED> instruction: 0x000128bc
   11e6c:			; <UNDEFINED> instruction: 0x000128bc
   11e70:			; <UNDEFINED> instruction: 0x000128bc
   11e74:			; <UNDEFINED> instruction: 0x000128bc
   11e78:			; <UNDEFINED> instruction: 0x000128bc
   11e7c:			; <UNDEFINED> instruction: 0x000128bc
   11e80:			; <UNDEFINED> instruction: 0x000128bc
   11e84:			; <UNDEFINED> instruction: 0x000128bc
   11e88:			; <UNDEFINED> instruction: 0x000128bc
   11e8c:	ldrdeq	r2, [r1], -r8
   11e90:	strdeq	r2, [r1], -ip
   11e94:	strdeq	r2, [r1], -ip
   11e98:	muleq	r1, r4, r7
   11e9c:	strdeq	r2, [r1], -ip
   11ea0:	andeq	r2, r1, ip, lsl sp
   11ea4:	strdeq	r2, [r1], -ip
   11ea8:	andeq	r2, r1, ip, lsl r8
   11eac:	strdeq	r2, [r1], -ip
   11eb0:	strdeq	r2, [r1], -ip
   11eb4:	strdeq	r2, [r1], -ip
   11eb8:	andeq	r2, r1, ip, lsl sp
   11ebc:	andeq	r2, r1, ip, lsl sp
   11ec0:	andeq	r2, r1, ip, lsl sp
   11ec4:	andeq	r2, r1, ip, lsl sp
   11ec8:	andeq	r2, r1, ip, lsl sp
   11ecc:	andeq	r2, r1, ip, lsl sp
   11ed0:	andeq	r2, r1, ip, lsl sp
   11ed4:	andeq	r2, r1, ip, lsl sp
   11ed8:	andeq	r2, r1, ip, lsl sp
   11edc:	andeq	r2, r1, ip, lsl sp
   11ee0:	andeq	r2, r1, ip, lsl sp
   11ee4:	andeq	r2, r1, ip, lsl sp
   11ee8:	andeq	r2, r1, ip, lsl sp
   11eec:	andeq	r2, r1, ip, lsl sp
   11ef0:	andeq	r2, r1, ip, lsl sp
   11ef4:	andeq	r2, r1, ip, lsl sp
   11ef8:	strdeq	r2, [r1], -ip
   11efc:	strdeq	r2, [r1], -ip
   11f00:	strdeq	r2, [r1], -ip
   11f04:	strdeq	r2, [r1], -ip
   11f08:	andeq	r2, r1, ip, ror r1
   11f0c:			; <UNDEFINED> instruction: 0x000128bc
   11f10:	andeq	r2, r1, ip, lsl sp
   11f14:	andeq	r2, r1, ip, lsl sp
   11f18:	andeq	r2, r1, ip, lsl sp
   11f1c:	andeq	r2, r1, ip, lsl sp
   11f20:	andeq	r2, r1, ip, lsl sp
   11f24:	andeq	r2, r1, ip, lsl sp
   11f28:	andeq	r2, r1, ip, lsl sp
   11f2c:	andeq	r2, r1, ip, lsl sp
   11f30:	andeq	r2, r1, ip, lsl sp
   11f34:	andeq	r2, r1, ip, lsl sp
   11f38:	andeq	r2, r1, ip, lsl sp
   11f3c:	andeq	r2, r1, ip, lsl sp
   11f40:	andeq	r2, r1, ip, lsl sp
   11f44:	andeq	r2, r1, ip, lsl sp
   11f48:	andeq	r2, r1, ip, lsl sp
   11f4c:	andeq	r2, r1, ip, lsl sp
   11f50:	andeq	r2, r1, ip, lsl sp
   11f54:	andeq	r2, r1, ip, lsl sp
   11f58:	andeq	r2, r1, ip, lsl sp
   11f5c:	andeq	r2, r1, ip, lsl sp
   11f60:	andeq	r2, r1, ip, lsl sp
   11f64:	andeq	r2, r1, ip, lsl sp
   11f68:	andeq	r2, r1, ip, lsl sp
   11f6c:	andeq	r2, r1, ip, lsl sp
   11f70:	andeq	r2, r1, ip, lsl sp
   11f74:	andeq	r2, r1, ip, lsl sp
   11f78:	strdeq	r2, [r1], -ip
   11f7c:			; <UNDEFINED> instruction: 0x000126b4
   11f80:	andeq	r2, r1, ip, lsl sp
   11f84:	strdeq	r2, [r1], -ip
   11f88:	andeq	r2, r1, ip, lsl sp
   11f8c:	strdeq	r2, [r1], -ip
   11f90:	andeq	r2, r1, ip, lsl sp
   11f94:	andeq	r2, r1, ip, lsl sp
   11f98:	andeq	r2, r1, ip, lsl sp
   11f9c:	andeq	r2, r1, ip, lsl sp
   11fa0:	andeq	r2, r1, ip, lsl sp
   11fa4:	andeq	r2, r1, ip, lsl sp
   11fa8:	andeq	r2, r1, ip, lsl sp
   11fac:	andeq	r2, r1, ip, lsl sp
   11fb0:	andeq	r2, r1, ip, lsl sp
   11fb4:	andeq	r2, r1, ip, lsl sp
   11fb8:	andeq	r2, r1, ip, lsl sp
   11fbc:	andeq	r2, r1, ip, lsl sp
   11fc0:	andeq	r2, r1, ip, lsl sp
   11fc4:	andeq	r2, r1, ip, lsl sp
   11fc8:	andeq	r2, r1, ip, lsl sp
   11fcc:	andeq	r2, r1, ip, lsl sp
   11fd0:	andeq	r2, r1, ip, lsl sp
   11fd4:	andeq	r2, r1, ip, lsl sp
   11fd8:	andeq	r2, r1, ip, lsl sp
   11fdc:	andeq	r2, r1, ip, lsl sp
   11fe0:	andeq	r2, r1, ip, lsl sp
   11fe4:	andeq	r2, r1, ip, lsl sp
   11fe8:	andeq	r2, r1, ip, lsl sp
   11fec:	andeq	r2, r1, ip, lsl sp
   11ff0:	andeq	r2, r1, ip, lsl sp
   11ff4:	andeq	r2, r1, ip, lsl sp
   11ff8:	andeq	r2, r1, r4, ror r7
   11ffc:	strdeq	r2, [r1], -ip
   12000:	andeq	r2, r1, r4, ror r7
   12004:	muleq	r1, r4, r7
   12008:	mov	r8, r9
   1200c:	mov	r7, sl
   12010:	b	12f10 <__assert_fail@plt+0x2084>
   12014:	ldr	r3, [sp, #28]
   12018:	cmp	r3, #0
   1201c:	bne	1203c <__assert_fail@plt+0x11b0>
   12020:	ldr	r3, [sp, #156]	; 0x9c
   12024:	tst	r3, #1
   12028:	bne	12424 <__assert_fail@plt+0x1598>
   1202c:	ldr	r3, [sp, #28]
   12030:	str	r3, [sp, #44]	; 0x2c
   12034:	mov	r5, r3
   12038:	b	12344 <__assert_fail@plt+0x14b8>
   1203c:	ldr	r3, [sp, #32]
   12040:	cmp	r3, #0
   12044:	bne	12ec0 <__assert_fail@plt+0x2034>
   12048:	str	r3, [sp, #44]	; 0x2c
   1204c:	ldr	r3, [sp, #36]	; 0x24
   12050:	eor	r3, r3, #1
   12054:	cmp	sl, #2
   12058:	movne	r3, #0
   1205c:	andeq	r3, r3, #1
   12060:	cmp	r3, #0
   12064:	beq	120bc <__assert_fail@plt+0x1230>
   12068:	cmp	r9, fp
   1206c:	movhi	r2, #39	; 0x27
   12070:	strbhi	r2, [r8, fp]
   12074:	add	r2, fp, #1
   12078:	cmp	r9, r2
   1207c:	movhi	r1, #36	; 0x24
   12080:	strbhi	r1, [r8, r2]
   12084:	add	r2, fp, #2
   12088:	cmp	r9, r2
   1208c:	movhi	r1, #39	; 0x27
   12090:	strbhi	r1, [r8, r2]
   12094:	add	r2, fp, #3
   12098:	cmp	r9, r2
   1209c:	bls	12f7c <__assert_fail@plt+0x20f0>
   120a0:	mov	r1, #92	; 0x5c
   120a4:	strb	r1, [r8, r2]
   120a8:	add	fp, fp, #4
   120ac:	str	r3, [sp, #36]	; 0x24
   120b0:	mov	r5, #0
   120b4:	mov	r4, #48	; 0x30
   120b8:	b	12390 <__assert_fail@plt+0x1504>
   120bc:	cmp	r9, fp
   120c0:	bhi	120e8 <__assert_fail@plt+0x125c>
   120c4:	add	r1, fp, #1
   120c8:	ldr	r2, [sp, #56]	; 0x38
   120cc:	cmp	r2, #0
   120d0:	bne	12110 <__assert_fail@plt+0x1284>
   120d4:	mov	r3, r5
   120d8:	ldr	r5, [sp, #56]	; 0x38
   120dc:	mov	fp, r1
   120e0:	mov	r4, #48	; 0x30
   120e4:	b	12344 <__assert_fail@plt+0x14b8>
   120e8:	mov	r2, #92	; 0x5c
   120ec:	strb	r2, [r8, fp]
   120f0:	add	r1, fp, #1
   120f4:	ldr	r2, [sp, #56]	; 0x38
   120f8:	cmp	r2, #0
   120fc:	moveq	r3, r5
   12100:	moveq	r5, r2
   12104:	moveq	fp, r1
   12108:	moveq	r4, #48	; 0x30
   1210c:	beq	12390 <__assert_fail@plt+0x1504>
   12110:	add	r2, r6, #1
   12114:	ldr	r0, [sp, #24]
   12118:	cmp	r2, r0
   1211c:	bcs	12138 <__assert_fail@plt+0x12ac>
   12120:	ldr	r0, [sp, #48]	; 0x30
   12124:	ldrb	r2, [r0, r2]
   12128:	sub	r2, r2, #48	; 0x30
   1212c:	uxtb	r2, r2
   12130:	cmp	r2, #9
   12134:	bls	12150 <__assert_fail@plt+0x12c4>
   12138:	mov	r2, r3
   1213c:	mov	r3, r5
   12140:	mov	r5, r2
   12144:	mov	fp, r1
   12148:	mov	r4, #48	; 0x30
   1214c:	b	12368 <__assert_fail@plt+0x14dc>
   12150:	cmp	r9, r1
   12154:	movhi	r2, #48	; 0x30
   12158:	strbhi	r2, [r8, r1]
   1215c:	add	r2, fp, #2
   12160:	cmp	r9, r2
   12164:	movhi	r1, #48	; 0x30
   12168:	strbhi	r1, [r8, r2]
   1216c:	add	r1, fp, #3
   12170:	b	12138 <__assert_fail@plt+0x12ac>
   12174:	mov	r3, #0
   12178:	str	r3, [sp, #44]	; 0x2c
   1217c:	cmp	sl, #2
   12180:	beq	1219c <__assert_fail@plt+0x1310>
   12184:	cmp	sl, #5
   12188:	beq	121b4 <__assert_fail@plt+0x1328>
   1218c:	mov	r5, #0
   12190:	mov	r3, r5
   12194:	mov	r4, #63	; 0x3f
   12198:	b	12344 <__assert_fail@plt+0x14b8>
   1219c:	ldr	r3, [sp, #32]
   121a0:	cmp	r3, #0
   121a4:	bne	12ecc <__assert_fail@plt+0x2040>
   121a8:	mov	r5, r3
   121ac:	mov	r4, #63	; 0x3f
   121b0:	b	128ac <__assert_fail@plt+0x1a20>
   121b4:	ldr	r3, [sp, #156]	; 0x9c
   121b8:	tst	r3, #4
   121bc:	beq	12ce4 <__assert_fail@plt+0x1e58>
   121c0:	add	r2, r6, #2
   121c4:	ldr	r3, [sp, #24]
   121c8:	cmp	r2, r3
   121cc:	bcs	12cf4 <__assert_fail@plt+0x1e68>
   121d0:	ldr	r3, [sp, #48]	; 0x30
   121d4:	add	r3, r3, r6
   121d8:	ldrb	r4, [r3, #1]
   121dc:	cmp	r4, #63	; 0x3f
   121e0:	movne	r5, #0
   121e4:	movne	r3, r5
   121e8:	movne	r4, #63	; 0x3f
   121ec:	bne	12344 <__assert_fail@plt+0x14b8>
   121f0:	ldr	r3, [sp, #48]	; 0x30
   121f4:	ldrb	r1, [r3, r2]
   121f8:	sub	r3, r1, #33	; 0x21
   121fc:	cmp	r3, #29
   12200:	ldrls	pc, [pc, r3, lsl #2]
   12204:	b	12d04 <__assert_fail@plt+0x1e78>
   12208:	andeq	r2, r1, r0, lsl #5
   1220c:	andeq	r2, r1, r4, lsl #26
   12210:	andeq	r2, r1, r4, lsl #26
   12214:	andeq	r2, r1, r4, lsl #26
   12218:	andeq	r2, r1, r4, lsl #26
   1221c:	andeq	r2, r1, r4, lsl #26
   12220:	andeq	r2, r1, r0, lsl #5
   12224:	andeq	r2, r1, r0, lsl #5
   12228:	andeq	r2, r1, r0, lsl #5
   1222c:	andeq	r2, r1, r4, lsl #26
   12230:	andeq	r2, r1, r4, lsl #26
   12234:	andeq	r2, r1, r4, lsl #26
   12238:	andeq	r2, r1, r0, lsl #5
   1223c:	andeq	r2, r1, r4, lsl #26
   12240:	andeq	r2, r1, r0, lsl #5
   12244:	andeq	r2, r1, r4, lsl #26
   12248:	andeq	r2, r1, r4, lsl #26
   1224c:	andeq	r2, r1, r4, lsl #26
   12250:	andeq	r2, r1, r4, lsl #26
   12254:	andeq	r2, r1, r4, lsl #26
   12258:	andeq	r2, r1, r4, lsl #26
   1225c:	andeq	r2, r1, r4, lsl #26
   12260:	andeq	r2, r1, r4, lsl #26
   12264:	andeq	r2, r1, r4, lsl #26
   12268:	andeq	r2, r1, r4, lsl #26
   1226c:	andeq	r2, r1, r4, lsl #26
   12270:	andeq	r2, r1, r4, lsl #26
   12274:	andeq	r2, r1, r0, lsl #5
   12278:	andeq	r2, r1, r0, lsl #5
   1227c:	andeq	r2, r1, r0, lsl #5
   12280:	ldr	r3, [sp, #32]
   12284:	cmp	r3, #0
   12288:	bne	12f70 <__assert_fail@plt+0x20e4>
   1228c:	cmp	r9, fp
   12290:	movhi	r3, #63	; 0x3f
   12294:	strbhi	r3, [r8, fp]
   12298:	add	r3, fp, #1
   1229c:	cmp	r9, r3
   122a0:	movhi	r0, #34	; 0x22
   122a4:	strbhi	r0, [r8, r3]
   122a8:	add	r3, fp, #2
   122ac:	cmp	r9, r3
   122b0:	movhi	r0, #34	; 0x22
   122b4:	strbhi	r0, [r8, r3]
   122b8:	add	r3, fp, #3
   122bc:	cmp	r9, r3
   122c0:	movhi	r0, #63	; 0x3f
   122c4:	strbhi	r0, [r8, r3]
   122c8:	add	fp, fp, #4
   122cc:	ldr	r3, [sp, #32]
   122d0:	mov	r5, r3
   122d4:	mov	r4, r1
   122d8:	mov	r6, r2
   122dc:	b	12344 <__assert_fail@plt+0x14b8>
   122e0:	mov	r3, #0
   122e4:	str	r3, [sp, #44]	; 0x2c
   122e8:	mov	r4, #8
   122ec:	mov	r3, #98	; 0x62
   122f0:	b	12330 <__assert_fail@plt+0x14a4>
   122f4:	mov	r3, #0
   122f8:	str	r3, [sp, #44]	; 0x2c
   122fc:	mov	r4, #12
   12300:	mov	r3, #102	; 0x66
   12304:	b	12330 <__assert_fail@plt+0x14a4>
   12308:	mov	r3, #0
   1230c:	str	r3, [sp, #44]	; 0x2c
   12310:	mov	r4, #13
   12314:	mov	r3, #114	; 0x72
   12318:	ldr	r2, [sp, #32]
   1231c:	cmp	sl, #2
   12320:	movne	r2, #0
   12324:	andeq	r2, r2, #1
   12328:	cmp	r2, #0
   1232c:	bne	12750 <__assert_fail@plt+0x18c4>
   12330:	ldr	r2, [sp, #28]
   12334:	cmp	r2, #0
   12338:	bne	12d38 <__assert_fail@plt+0x1eac>
   1233c:	mov	r5, r2
   12340:	mov	r3, r2
   12344:	ldr	r2, [sp, #28]
   12348:	eor	r2, r2, #1
   1234c:	cmp	sl, #2
   12350:	orreq	r2, r2, #1
   12354:	eor	r2, r2, #1
   12358:	ldr	r1, [sp, #32]
   1235c:	orr	r2, r1, r2
   12360:	tst	r2, #255	; 0xff
   12364:	beq	12390 <__assert_fail@plt+0x1504>
   12368:	ldr	r2, [sp, #160]	; 0xa0
   1236c:	cmp	r2, #0
   12370:	beq	12390 <__assert_fail@plt+0x1504>
   12374:	ubfx	r1, r4, #5, #8
   12378:	and	r2, r4, #31
   1237c:	ldr	r0, [sp, #160]	; 0xa0
   12380:	ldr	r1, [r0, r1, lsl #2]
   12384:	lsr	r2, r1, r2
   12388:	tst	r2, #1
   1238c:	bne	1239c <__assert_fail@plt+0x1510>
   12390:	ldr	r2, [sp, #44]	; 0x2c
   12394:	cmp	r2, #0
   12398:	beq	126f0 <__assert_fail@plt+0x1864>
   1239c:	ldr	r3, [sp, #32]
   123a0:	cmp	r3, #0
   123a4:	bne	12ef0 <__assert_fail@plt+0x2064>
   123a8:	ldr	r3, [sp, #36]	; 0x24
   123ac:	eor	r3, r3, #1
   123b0:	cmp	sl, #2
   123b4:	movne	r3, #0
   123b8:	andeq	r3, r3, #1
   123bc:	cmp	r3, #0
   123c0:	beq	123f8 <__assert_fail@plt+0x156c>
   123c4:	cmp	r9, fp
   123c8:	movhi	r2, #39	; 0x27
   123cc:	strbhi	r2, [r8, fp]
   123d0:	add	r2, fp, #1
   123d4:	cmp	r9, r2
   123d8:	movhi	r1, #36	; 0x24
   123dc:	strbhi	r1, [r8, r2]
   123e0:	add	r2, fp, #2
   123e4:	cmp	r9, r2
   123e8:	movhi	r1, #39	; 0x27
   123ec:	strbhi	r1, [r8, r2]
   123f0:	add	fp, fp, #3
   123f4:	str	r3, [sp, #36]	; 0x24
   123f8:	cmp	r9, fp
   123fc:	movhi	r3, #92	; 0x5c
   12400:	strbhi	r3, [r8, fp]
   12404:	add	fp, fp, #1
   12408:	cmp	fp, r9
   1240c:	strbcc	r4, [r8, fp]
   12410:	add	fp, fp, #1
   12414:	cmp	r5, #0
   12418:	ldr	r3, [sp, #40]	; 0x28
   1241c:	moveq	r3, r5
   12420:	str	r3, [sp, #40]	; 0x28
   12424:	add	r6, r6, #1
   12428:	ldr	r3, [sp, #24]
   1242c:	cmn	r3, #1
   12430:	beq	12d60 <__assert_fail@plt+0x1ed4>
   12434:	ldr	r3, [sp, #24]
   12438:	subs	r5, r3, r6
   1243c:	movne	r5, #1
   12440:	cmp	r5, #0
   12444:	beq	12d74 <__assert_fail@plt+0x1ee8>
   12448:	ldr	r3, [sp, #28]
   1244c:	cmp	sl, #2
   12450:	moveq	r3, #0
   12454:	andne	r3, r3, #1
   12458:	str	r3, [sp, #56]	; 0x38
   1245c:	ldr	r2, [sp, #52]	; 0x34
   12460:	adds	r7, r2, #0
   12464:	movne	r7, #1
   12468:	ands	r3, r3, r7
   1246c:	str	r3, [sp, #44]	; 0x2c
   12470:	bne	11d90 <__assert_fail@plt+0xf04>
   12474:	ldr	r3, [sp, #48]	; 0x30
   12478:	ldrb	r4, [r3, r6]
   1247c:	cmp	r4, #126	; 0x7e
   12480:	ldrls	pc, [pc, r4, lsl #2]
   12484:	b	128bc <__assert_fail@plt+0x1a30>
   12488:	andeq	r2, r1, r4, lsl r0
   1248c:			; <UNDEFINED> instruction: 0x000128bc
   12490:			; <UNDEFINED> instruction: 0x000128bc
   12494:			; <UNDEFINED> instruction: 0x000128bc
   12498:			; <UNDEFINED> instruction: 0x000128bc
   1249c:			; <UNDEFINED> instruction: 0x000128bc
   124a0:			; <UNDEFINED> instruction: 0x000128bc
   124a4:	andeq	r2, r1, ip, asr r7
   124a8:	andeq	r2, r1, r8, ror #5
   124ac:	andeq	r2, r1, ip, lsl #13
   124b0:	andeq	r2, r1, r0, lsr r7
   124b4:	andeq	r2, r1, r0, lsr #13
   124b8:	strdeq	r2, [r1], -ip
   124bc:	andeq	r2, r1, r0, lsl r3
   124c0:			; <UNDEFINED> instruction: 0x000128bc
   124c4:			; <UNDEFINED> instruction: 0x000128bc
   124c8:			; <UNDEFINED> instruction: 0x000128bc
   124cc:			; <UNDEFINED> instruction: 0x000128bc
   124d0:			; <UNDEFINED> instruction: 0x000128bc
   124d4:			; <UNDEFINED> instruction: 0x000128bc
   124d8:			; <UNDEFINED> instruction: 0x000128bc
   124dc:			; <UNDEFINED> instruction: 0x000128bc
   124e0:			; <UNDEFINED> instruction: 0x000128bc
   124e4:			; <UNDEFINED> instruction: 0x000128bc
   124e8:			; <UNDEFINED> instruction: 0x000128bc
   124ec:			; <UNDEFINED> instruction: 0x000128bc
   124f0:			; <UNDEFINED> instruction: 0x000128bc
   124f4:			; <UNDEFINED> instruction: 0x000128bc
   124f8:			; <UNDEFINED> instruction: 0x000128bc
   124fc:			; <UNDEFINED> instruction: 0x000128bc
   12500:			; <UNDEFINED> instruction: 0x000128bc
   12504:			; <UNDEFINED> instruction: 0x000128bc
   12508:	ldrdeq	r2, [r1], -r8
   1250c:	ldrdeq	r2, [r1], -r4
   12510:	ldrdeq	r2, [r1], -r4
   12514:	muleq	r1, r4, r7
   12518:	ldrdeq	r2, [r1], -r4
   1251c:	ldrdeq	r2, [r1], -ip
   12520:	ldrdeq	r2, [r1], -r4
   12524:	andeq	r2, r1, ip, lsl r8
   12528:	ldrdeq	r2, [r1], -r4
   1252c:	ldrdeq	r2, [r1], -r4
   12530:	ldrdeq	r2, [r1], -r4
   12534:	ldrdeq	r2, [r1], -ip
   12538:	ldrdeq	r2, [r1], -ip
   1253c:	ldrdeq	r2, [r1], -ip
   12540:	ldrdeq	r2, [r1], -ip
   12544:	ldrdeq	r2, [r1], -ip
   12548:	ldrdeq	r2, [r1], -ip
   1254c:	ldrdeq	r2, [r1], -ip
   12550:	ldrdeq	r2, [r1], -ip
   12554:	ldrdeq	r2, [r1], -ip
   12558:	ldrdeq	r2, [r1], -ip
   1255c:	ldrdeq	r2, [r1], -ip
   12560:	ldrdeq	r2, [r1], -ip
   12564:	ldrdeq	r2, [r1], -ip
   12568:	ldrdeq	r2, [r1], -ip
   1256c:	ldrdeq	r2, [r1], -ip
   12570:	ldrdeq	r2, [r1], -ip
   12574:	ldrdeq	r2, [r1], -r4
   12578:	ldrdeq	r2, [r1], -r4
   1257c:	ldrdeq	r2, [r1], -r4
   12580:	ldrdeq	r2, [r1], -r4
   12584:	andeq	r2, r1, ip, ror r1
   12588:			; <UNDEFINED> instruction: 0x000128bc
   1258c:	ldrdeq	r2, [r1], -ip
   12590:	ldrdeq	r2, [r1], -ip
   12594:	ldrdeq	r2, [r1], -ip
   12598:	ldrdeq	r2, [r1], -ip
   1259c:	ldrdeq	r2, [r1], -ip
   125a0:	ldrdeq	r2, [r1], -ip
   125a4:	ldrdeq	r2, [r1], -ip
   125a8:	ldrdeq	r2, [r1], -ip
   125ac:	ldrdeq	r2, [r1], -ip
   125b0:	ldrdeq	r2, [r1], -ip
   125b4:	ldrdeq	r2, [r1], -ip
   125b8:	ldrdeq	r2, [r1], -ip
   125bc:	ldrdeq	r2, [r1], -ip
   125c0:	ldrdeq	r2, [r1], -ip
   125c4:	ldrdeq	r2, [r1], -ip
   125c8:	ldrdeq	r2, [r1], -ip
   125cc:	ldrdeq	r2, [r1], -ip
   125d0:	ldrdeq	r2, [r1], -ip
   125d4:	ldrdeq	r2, [r1], -ip
   125d8:	ldrdeq	r2, [r1], -ip
   125dc:	ldrdeq	r2, [r1], -ip
   125e0:	ldrdeq	r2, [r1], -ip
   125e4:	ldrdeq	r2, [r1], -ip
   125e8:	ldrdeq	r2, [r1], -ip
   125ec:	ldrdeq	r2, [r1], -ip
   125f0:	ldrdeq	r2, [r1], -ip
   125f4:	ldrdeq	r2, [r1], -r4
   125f8:			; <UNDEFINED> instruction: 0x000126b4
   125fc:	ldrdeq	r2, [r1], -ip
   12600:	ldrdeq	r2, [r1], -r4
   12604:	ldrdeq	r2, [r1], -ip
   12608:	ldrdeq	r2, [r1], -r4
   1260c:	ldrdeq	r2, [r1], -ip
   12610:	ldrdeq	r2, [r1], -ip
   12614:	ldrdeq	r2, [r1], -ip
   12618:	ldrdeq	r2, [r1], -ip
   1261c:	ldrdeq	r2, [r1], -ip
   12620:	ldrdeq	r2, [r1], -ip
   12624:	ldrdeq	r2, [r1], -ip
   12628:	ldrdeq	r2, [r1], -ip
   1262c:	ldrdeq	r2, [r1], -ip
   12630:	ldrdeq	r2, [r1], -ip
   12634:	ldrdeq	r2, [r1], -ip
   12638:	ldrdeq	r2, [r1], -ip
   1263c:	ldrdeq	r2, [r1], -ip
   12640:	ldrdeq	r2, [r1], -ip
   12644:	ldrdeq	r2, [r1], -ip
   12648:	ldrdeq	r2, [r1], -ip
   1264c:	ldrdeq	r2, [r1], -ip
   12650:	ldrdeq	r2, [r1], -ip
   12654:	ldrdeq	r2, [r1], -ip
   12658:	ldrdeq	r2, [r1], -ip
   1265c:	ldrdeq	r2, [r1], -ip
   12660:	ldrdeq	r2, [r1], -ip
   12664:	ldrdeq	r2, [r1], -ip
   12668:	ldrdeq	r2, [r1], -ip
   1266c:	ldrdeq	r2, [r1], -ip
   12670:	ldrdeq	r2, [r1], -ip
   12674:	andeq	r2, r1, r4, ror r7
   12678:	ldrdeq	r2, [r1], -r4
   1267c:	andeq	r2, r1, r4, ror r7
   12680:	muleq	r1, r4, r7
   12684:	mov	r3, #0
   12688:	str	r3, [sp, #44]	; 0x2c
   1268c:	mov	r4, #9
   12690:	mov	r3, #116	; 0x74
   12694:	b	12318 <__assert_fail@plt+0x148c>
   12698:	mov	r3, #0
   1269c:	str	r3, [sp, #44]	; 0x2c
   126a0:	mov	r4, #11
   126a4:	mov	r3, #118	; 0x76
   126a8:	b	12330 <__assert_fail@plt+0x14a4>
   126ac:	mov	r3, #0
   126b0:	str	r3, [sp, #44]	; 0x2c
   126b4:	cmp	sl, #2
   126b8:	beq	126dc <__assert_fail@plt+0x1850>
   126bc:	ldr	r3, [sp, #28]
   126c0:	ldr	r2, [sp, #32]
   126c4:	and	r3, r3, r2
   126c8:	tst	r7, r3
   126cc:	bne	12d50 <__assert_fail@plt+0x1ec4>
   126d0:	mov	r4, #92	; 0x5c
   126d4:	mov	r3, r4
   126d8:	b	12330 <__assert_fail@plt+0x14a4>
   126dc:	ldr	r3, [sp, #32]
   126e0:	cmp	r3, #0
   126e4:	bne	12ed8 <__assert_fail@plt+0x204c>
   126e8:	mov	r5, r3
   126ec:	mov	r4, #92	; 0x5c
   126f0:	eor	r3, r3, #1
   126f4:	ldr	r2, [sp, #36]	; 0x24
   126f8:	and	r3, r3, r2
   126fc:	tst	r3, #255	; 0xff
   12700:	beq	12408 <__assert_fail@plt+0x157c>
   12704:	cmp	r9, fp
   12708:	movhi	r3, #39	; 0x27
   1270c:	strbhi	r3, [r8, fp]
   12710:	add	r3, fp, #1
   12714:	cmp	r9, r3
   12718:	movhi	r2, #39	; 0x27
   1271c:	strbhi	r2, [r8, r3]
   12720:	add	fp, fp, #2
   12724:	mov	r3, #0
   12728:	str	r3, [sp, #36]	; 0x24
   1272c:	b	12408 <__assert_fail@plt+0x157c>
   12730:	mov	r3, #110	; 0x6e
   12734:	b	12318 <__assert_fail@plt+0x148c>
   12738:	mov	r3, #110	; 0x6e
   1273c:	b	12318 <__assert_fail@plt+0x148c>
   12740:	mov	r3, #0
   12744:	str	r3, [sp, #44]	; 0x2c
   12748:	mov	r3, #110	; 0x6e
   1274c:	b	12318 <__assert_fail@plt+0x148c>
   12750:	mov	r8, r9
   12754:	mov	r7, #2
   12758:	b	12ef8 <__assert_fail@plt+0x206c>
   1275c:	mov	r3, #97	; 0x61
   12760:	b	12330 <__assert_fail@plt+0x14a4>
   12764:	mov	r3, #97	; 0x61
   12768:	b	12330 <__assert_fail@plt+0x14a4>
   1276c:	mov	r3, #0
   12770:	str	r3, [sp, #44]	; 0x2c
   12774:	ldr	r3, [sp, #24]
   12778:	cmn	r3, #1
   1277c:	beq	127a8 <__assert_fail@plt+0x191c>
   12780:	ldr	r3, [sp, #24]
   12784:	subs	r3, r3, #1
   12788:	movne	r3, #1
   1278c:	cmp	r3, #0
   12790:	bne	12d10 <__assert_fail@plt+0x1e84>
   12794:	cmp	r6, #0
   12798:	beq	127d8 <__assert_fail@plt+0x194c>
   1279c:	mov	r5, #0
   127a0:	mov	r3, r5
   127a4:	b	12344 <__assert_fail@plt+0x14b8>
   127a8:	ldr	r3, [sp, #48]	; 0x30
   127ac:	ldrb	r3, [r3, #1]
   127b0:	adds	r3, r3, #0
   127b4:	movne	r3, #1
   127b8:	b	1278c <__assert_fail@plt+0x1900>
   127bc:	mov	r3, #0
   127c0:	str	r3, [sp, #44]	; 0x2c
   127c4:	b	12794 <__assert_fail@plt+0x1908>
   127c8:	mov	r3, #0
   127cc:	str	r3, [sp, #44]	; 0x2c
   127d0:	b	127d8 <__assert_fail@plt+0x194c>
   127d4:	ldr	r5, [sp, #44]	; 0x2c
   127d8:	ldr	r3, [sp, #32]
   127dc:	cmp	sl, #2
   127e0:	movne	r3, #0
   127e4:	andeq	r3, r3, #1
   127e8:	cmp	r3, #0
   127ec:	beq	12344 <__assert_fail@plt+0x14b8>
   127f0:	mov	r8, r9
   127f4:	mov	r7, #2
   127f8:	b	12ef8 <__assert_fail@plt+0x206c>
   127fc:	ldr	r5, [sp, #32]
   12800:	b	127d8 <__assert_fail@plt+0x194c>
   12804:	mov	r3, #0
   12808:	str	r3, [sp, #44]	; 0x2c
   1280c:	mov	r5, r3
   12810:	b	127d8 <__assert_fail@plt+0x194c>
   12814:	mov	r3, #0
   12818:	str	r3, [sp, #44]	; 0x2c
   1281c:	cmp	sl, #2
   12820:	strne	r5, [sp, #68]	; 0x44
   12824:	movne	r3, #0
   12828:	movne	r4, #39	; 0x27
   1282c:	bne	12344 <__assert_fail@plt+0x14b8>
   12830:	ldr	r3, [sp, #32]
   12834:	cmp	r3, #0
   12838:	bne	12ee4 <__assert_fail@plt+0x2058>
   1283c:	ldr	r3, [sp, #72]	; 0x48
   12840:	clz	r3, r3
   12844:	lsr	r3, r3, #5
   12848:	cmp	r9, #0
   1284c:	moveq	r3, #0
   12850:	cmp	r3, #0
   12854:	movne	r3, #0
   12858:	bne	12880 <__assert_fail@plt+0x19f4>
   1285c:	cmp	r9, fp
   12860:	movhi	r3, #39	; 0x27
   12864:	strbhi	r3, [r8, fp]
   12868:	add	r3, fp, #1
   1286c:	cmp	r9, r3
   12870:	movhi	r2, #92	; 0x5c
   12874:	strbhi	r2, [r8, r3]
   12878:	mov	r3, r9
   1287c:	ldr	r9, [sp, #72]	; 0x48
   12880:	add	r2, fp, #2
   12884:	cmp	r2, r3
   12888:	movcc	r1, #39	; 0x27
   1288c:	strbcc	r1, [r8, r2]
   12890:	add	fp, fp, #3
   12894:	str	r5, [sp, #68]	; 0x44
   12898:	ldr	r2, [sp, #32]
   1289c:	str	r2, [sp, #36]	; 0x24
   128a0:	str	r9, [sp, #72]	; 0x48
   128a4:	mov	r9, r3
   128a8:	mov	r4, #39	; 0x27
   128ac:	mov	r3, #0
   128b0:	b	12390 <__assert_fail@plt+0x1504>
   128b4:	mov	r3, #0
   128b8:	str	r3, [sp, #44]	; 0x2c
   128bc:	ldr	r7, [sp, #76]	; 0x4c
   128c0:	cmp	r7, #1
   128c4:	bne	128fc <__assert_fail@plt+0x1a70>
   128c8:	bl	10d9c <__ctype_b_loc@plt>
   128cc:	ldr	r2, [r0]
   128d0:	lsl	r3, r4, #1
   128d4:	ldrh	r5, [r2, r3]
   128d8:	ubfx	r5, r5, #14, #1
   128dc:	mov	ip, r7
   128e0:	eor	r3, r5, #1
   128e4:	ldr	r2, [sp, #28]
   128e8:	and	r3, r3, r2
   128ec:	ands	r3, r3, #255	; 0xff
   128f0:	beq	12344 <__assert_fail@plt+0x14b8>
   128f4:	mov	r5, #0
   128f8:	b	12b58 <__assert_fail@plt+0x1ccc>
   128fc:	mov	r2, #0
   12900:	mov	r3, #0
   12904:	strd	r2, [sp, #104]	; 0x68
   12908:	ldr	r3, [sp, #24]
   1290c:	cmn	r3, #1
   12910:	beq	12934 <__assert_fail@plt+0x1aa8>
   12914:	mov	r3, #0
   12918:	str	r4, [sp, #88]	; 0x58
   1291c:	str	fp, [sp, #92]	; 0x5c
   12920:	str	r8, [sp, #56]	; 0x38
   12924:	mov	r8, r3
   12928:	str	r9, [sp, #84]	; 0x54
   1292c:	ldr	r9, [sp, #48]	; 0x30
   12930:	b	12a80 <__assert_fail@plt+0x1bf4>
   12934:	ldr	r0, [sp, #48]	; 0x30
   12938:	bl	10dc0 <strlen@plt>
   1293c:	str	r0, [sp, #24]
   12940:	b	12914 <__assert_fail@plt+0x1a88>
   12944:	mov	r1, fp
   12948:	ldr	r4, [sp, #88]	; 0x58
   1294c:	mov	r2, r8
   12950:	mov	ip, r8
   12954:	ldr	fp, [sp, #92]	; 0x5c
   12958:	ldr	r8, [sp, #56]	; 0x38
   1295c:	ldr	r9, [sp, #84]	; 0x54
   12960:	ldr	r0, [sp, #24]
   12964:	cmp	r7, r0
   12968:	bcs	12b20 <__assert_fail@plt+0x1c94>
   1296c:	ldrb	r3, [r1]
   12970:	cmp	r3, #0
   12974:	beq	12b28 <__assert_fail@plt+0x1c9c>
   12978:	mov	r3, r1
   1297c:	add	r2, r2, #1
   12980:	add	r1, r6, r2
   12984:	cmp	r0, r1
   12988:	bls	12b30 <__assert_fail@plt+0x1ca4>
   1298c:	ldrb	r1, [r3, #1]!
   12990:	cmp	r1, #0
   12994:	bne	1297c <__assert_fail@plt+0x1af0>
   12998:	mov	ip, r2
   1299c:	mov	r5, #0
   129a0:	b	12b50 <__assert_fail@plt+0x1cc4>
   129a4:	ldr	r3, [sp, #56]	; 0x38
   129a8:	str	r3, [sp, #64]	; 0x40
   129ac:	ldr	r8, [sp, #84]	; 0x54
   129b0:	mov	r7, #2
   129b4:	b	12ef8 <__assert_fail@plt+0x206c>
   129b8:	cmp	r2, r7
   129bc:	beq	12a5c <__assert_fail@plt+0x1bd0>
   129c0:	ldrb	r3, [r2], #1
   129c4:	sub	r3, r3, #91	; 0x5b
   129c8:	cmp	r3, #33	; 0x21
   129cc:	ldrls	pc, [pc, r3, lsl #2]
   129d0:	b	129b8 <__assert_fail@plt+0x1b2c>
   129d4:	andeq	r2, r1, r4, lsr #19
   129d8:	andeq	r2, r1, r4, lsr #19
   129dc:			; <UNDEFINED> instruction: 0x000129b8
   129e0:	andeq	r2, r1, r4, lsr #19
   129e4:			; <UNDEFINED> instruction: 0x000129b8
   129e8:	andeq	r2, r1, r4, lsr #19
   129ec:			; <UNDEFINED> instruction: 0x000129b8
   129f0:			; <UNDEFINED> instruction: 0x000129b8
   129f4:			; <UNDEFINED> instruction: 0x000129b8
   129f8:			; <UNDEFINED> instruction: 0x000129b8
   129fc:			; <UNDEFINED> instruction: 0x000129b8
   12a00:			; <UNDEFINED> instruction: 0x000129b8
   12a04:			; <UNDEFINED> instruction: 0x000129b8
   12a08:			; <UNDEFINED> instruction: 0x000129b8
   12a0c:			; <UNDEFINED> instruction: 0x000129b8
   12a10:			; <UNDEFINED> instruction: 0x000129b8
   12a14:			; <UNDEFINED> instruction: 0x000129b8
   12a18:			; <UNDEFINED> instruction: 0x000129b8
   12a1c:			; <UNDEFINED> instruction: 0x000129b8
   12a20:			; <UNDEFINED> instruction: 0x000129b8
   12a24:			; <UNDEFINED> instruction: 0x000129b8
   12a28:			; <UNDEFINED> instruction: 0x000129b8
   12a2c:			; <UNDEFINED> instruction: 0x000129b8
   12a30:			; <UNDEFINED> instruction: 0x000129b8
   12a34:			; <UNDEFINED> instruction: 0x000129b8
   12a38:			; <UNDEFINED> instruction: 0x000129b8
   12a3c:			; <UNDEFINED> instruction: 0x000129b8
   12a40:			; <UNDEFINED> instruction: 0x000129b8
   12a44:			; <UNDEFINED> instruction: 0x000129b8
   12a48:			; <UNDEFINED> instruction: 0x000129b8
   12a4c:			; <UNDEFINED> instruction: 0x000129b8
   12a50:			; <UNDEFINED> instruction: 0x000129b8
   12a54:			; <UNDEFINED> instruction: 0x000129b8
   12a58:	andeq	r2, r1, r4, lsr #19
   12a5c:	ldr	r0, [sp, #100]	; 0x64
   12a60:	bl	10d00 <iswprint@plt>
   12a64:	cmp	r0, #0
   12a68:	moveq	r5, #0
   12a6c:	add	r8, r8, r4
   12a70:	add	r0, sp, #104	; 0x68
   12a74:	bl	10ca0 <mbsinit@plt>
   12a78:	cmp	r0, #0
   12a7c:	bne	12aec <__assert_fail@plt+0x1c60>
   12a80:	add	r7, r6, r8
   12a84:	add	fp, r9, r7
   12a88:	add	r3, sp, #104	; 0x68
   12a8c:	ldr	r2, [sp, #24]
   12a90:	sub	r2, r2, r7
   12a94:	mov	r1, fp
   12a98:	add	r0, sp, #100	; 0x64
   12a9c:	bl	15218 <__assert_fail@plt+0x438c>
   12aa0:	subs	r4, r0, #0
   12aa4:	beq	12b3c <__assert_fail@plt+0x1cb0>
   12aa8:	cmn	r4, #1
   12aac:	beq	12b04 <__assert_fail@plt+0x1c78>
   12ab0:	cmn	r4, #2
   12ab4:	beq	12944 <__assert_fail@plt+0x1ab8>
   12ab8:	ldr	r3, [sp, #32]
   12abc:	cmp	sl, #2
   12ac0:	movne	r3, #0
   12ac4:	andeq	r3, r3, #1
   12ac8:	cmp	r3, #0
   12acc:	beq	12a5c <__assert_fail@plt+0x1bd0>
   12ad0:	cmp	r4, #1
   12ad4:	bls	12a5c <__assert_fail@plt+0x1bd0>
   12ad8:	add	r2, r7, #1
   12adc:	add	r2, r9, r2
   12ae0:	add	r3, r9, r4
   12ae4:	add	r7, r3, r7
   12ae8:	b	129c0 <__assert_fail@plt+0x1b34>
   12aec:	ldr	r4, [sp, #88]	; 0x58
   12af0:	mov	ip, r8
   12af4:	ldr	fp, [sp, #92]	; 0x5c
   12af8:	ldr	r8, [sp, #56]	; 0x38
   12afc:	ldr	r9, [sp, #84]	; 0x54
   12b00:	b	12b50 <__assert_fail@plt+0x1cc4>
   12b04:	ldr	r4, [sp, #88]	; 0x58
   12b08:	mov	ip, r8
   12b0c:	ldr	fp, [sp, #92]	; 0x5c
   12b10:	ldr	r8, [sp, #56]	; 0x38
   12b14:	ldr	r9, [sp, #84]	; 0x54
   12b18:	mov	r5, #0
   12b1c:	b	12b50 <__assert_fail@plt+0x1cc4>
   12b20:	mov	r5, #0
   12b24:	b	12b50 <__assert_fail@plt+0x1cc4>
   12b28:	mov	r5, #0
   12b2c:	b	12b50 <__assert_fail@plt+0x1cc4>
   12b30:	mov	ip, r2
   12b34:	mov	r5, #0
   12b38:	b	12b50 <__assert_fail@plt+0x1cc4>
   12b3c:	ldr	r4, [sp, #88]	; 0x58
   12b40:	mov	ip, r8
   12b44:	ldr	fp, [sp, #92]	; 0x5c
   12b48:	ldr	r8, [sp, #56]	; 0x38
   12b4c:	ldr	r9, [sp, #84]	; 0x54
   12b50:	cmp	ip, #1
   12b54:	bls	128e0 <__assert_fail@plt+0x1a54>
   12b58:	add	lr, r6, ip
   12b5c:	ldr	r3, [sp, #48]	; 0x30
   12b60:	add	r1, r3, r6
   12b64:	mov	r3, #0
   12b68:	eor	r0, r5, #1
   12b6c:	ldr	r2, [sp, #28]
   12b70:	and	r0, r0, r2
   12b74:	uxtb	r0, r0
   12b78:	str	r0, [sp, #56]	; 0x38
   12b7c:	mov	r7, #92	; 0x5c
   12b80:	ldr	ip, [sp, #36]	; 0x24
   12b84:	str	r5, [sp, #84]	; 0x54
   12b88:	ldr	r2, [sp, #44]	; 0x2c
   12b8c:	b	12bfc <__assert_fail@plt+0x1d70>
   12b90:	cmp	r2, #0
   12b94:	beq	12ba4 <__assert_fail@plt+0x1d18>
   12b98:	cmp	r9, fp
   12b9c:	strbhi	r7, [r8, fp]
   12ba0:	add	fp, fp, #1
   12ba4:	add	r5, r6, #1
   12ba8:	cmp	r5, lr
   12bac:	bcs	12cb8 <__assert_fail@plt+0x1e2c>
   12bb0:	eor	r2, r3, #1
   12bb4:	and	r2, r2, ip
   12bb8:	ands	r2, r2, #255	; 0xff
   12bbc:	beq	12cd4 <__assert_fail@plt+0x1e48>
   12bc0:	cmp	r9, fp
   12bc4:	movhi	r2, #39	; 0x27
   12bc8:	strbhi	r2, [r8, fp]
   12bcc:	add	r2, fp, #1
   12bd0:	cmp	r9, r2
   12bd4:	movhi	ip, #39	; 0x27
   12bd8:	strbhi	ip, [r8, r2]
   12bdc:	add	fp, fp, #2
   12be0:	ldr	ip, [sp, #56]	; 0x38
   12be4:	mov	r2, ip
   12be8:	mov	r6, r5
   12bec:	cmp	r9, fp
   12bf0:	strbhi	r4, [r8, fp]
   12bf4:	add	fp, fp, #1
   12bf8:	ldrb	r4, [r1, #1]!
   12bfc:	cmp	r0, #0
   12c00:	beq	12b90 <__assert_fail@plt+0x1d04>
   12c04:	ldr	r3, [sp, #32]
   12c08:	cmp	r3, #0
   12c0c:	bne	12ea0 <__assert_fail@plt+0x2014>
   12c10:	eor	r3, ip, #1
   12c14:	cmp	sl, #2
   12c18:	movne	r3, #0
   12c1c:	andeq	r3, r3, #1
   12c20:	cmp	r3, #0
   12c24:	beq	12c5c <__assert_fail@plt+0x1dd0>
   12c28:	cmp	r9, fp
   12c2c:	movhi	ip, #39	; 0x27
   12c30:	strbhi	ip, [r8, fp]
   12c34:	add	ip, fp, #1
   12c38:	cmp	r9, ip
   12c3c:	movhi	r5, #36	; 0x24
   12c40:	strbhi	r5, [r8, ip]
   12c44:	add	ip, fp, #2
   12c48:	cmp	r9, ip
   12c4c:	movhi	r5, #39	; 0x27
   12c50:	strbhi	r5, [r8, ip]
   12c54:	add	fp, fp, #3
   12c58:	mov	ip, r3
   12c5c:	cmp	r9, fp
   12c60:	strbhi	r7, [r8, fp]
   12c64:	add	r3, fp, #1
   12c68:	cmp	r9, r3
   12c6c:	bls	12c7c <__assert_fail@plt+0x1df0>
   12c70:	lsr	r5, r4, #6
   12c74:	add	r5, r5, #48	; 0x30
   12c78:	strb	r5, [r8, r3]
   12c7c:	add	r3, fp, #2
   12c80:	cmp	r9, r3
   12c84:	bls	12c94 <__assert_fail@plt+0x1e08>
   12c88:	ubfx	r5, r4, #3, #3
   12c8c:	add	r5, r5, #48	; 0x30
   12c90:	strb	r5, [r8, r3]
   12c94:	add	fp, fp, #3
   12c98:	and	r4, r4, #7
   12c9c:	add	r4, r4, #48	; 0x30
   12ca0:	add	r5, r6, #1
   12ca4:	cmp	r5, lr
   12ca8:	bcs	12cc4 <__assert_fail@plt+0x1e38>
   12cac:	ldr	r3, [sp, #56]	; 0x38
   12cb0:	mov	r6, r5
   12cb4:	b	12bec <__assert_fail@plt+0x1d60>
   12cb8:	str	ip, [sp, #36]	; 0x24
   12cbc:	ldr	r5, [sp, #84]	; 0x54
   12cc0:	b	126f0 <__assert_fail@plt+0x1864>
   12cc4:	str	ip, [sp, #36]	; 0x24
   12cc8:	ldr	r5, [sp, #84]	; 0x54
   12ccc:	mov	r3, r0
   12cd0:	b	126f0 <__assert_fail@plt+0x1864>
   12cd4:	mov	r6, r5
   12cd8:	b	12bec <__assert_fail@plt+0x1d60>
   12cdc:	ldr	r3, [sp, #44]	; 0x2c
   12ce0:	b	12344 <__assert_fail@plt+0x14b8>
   12ce4:	mov	r5, #0
   12ce8:	mov	r3, r5
   12cec:	mov	r4, #63	; 0x3f
   12cf0:	b	12344 <__assert_fail@plt+0x14b8>
   12cf4:	mov	r5, #0
   12cf8:	mov	r3, r5
   12cfc:	mov	r4, #63	; 0x3f
   12d00:	b	12344 <__assert_fail@plt+0x14b8>
   12d04:	mov	r5, #0
   12d08:	mov	r3, r5
   12d0c:	b	12344 <__assert_fail@plt+0x14b8>
   12d10:	mov	r5, #0
   12d14:	mov	r3, r5
   12d18:	b	12344 <__assert_fail@plt+0x14b8>
   12d1c:	ldr	r5, [sp, #44]	; 0x2c
   12d20:	ldr	r3, [sp, #32]
   12d24:	b	12344 <__assert_fail@plt+0x14b8>
   12d28:	ldr	r5, [sp, #44]	; 0x2c
   12d2c:	mov	r3, #0
   12d30:	str	r3, [sp, #44]	; 0x2c
   12d34:	b	12344 <__assert_fail@plt+0x14b8>
   12d38:	mov	r4, r3
   12d3c:	mov	r5, #0
   12d40:	b	1239c <__assert_fail@plt+0x1510>
   12d44:	mov	r5, #0
   12d48:	mov	r4, #97	; 0x61
   12d4c:	b	1239c <__assert_fail@plt+0x1510>
   12d50:	mov	r5, #0
   12d54:	mov	r3, r5
   12d58:	mov	r4, #92	; 0x5c
   12d5c:	b	126f0 <__assert_fail@plt+0x1864>
   12d60:	ldr	r3, [sp, #48]	; 0x30
   12d64:	ldrb	r5, [r3, r6]
   12d68:	adds	r5, r5, #0
   12d6c:	movne	r5, #1
   12d70:	b	12440 <__assert_fail@plt+0x15b4>
   12d74:	cmp	sl, #2
   12d78:	movne	r3, #0
   12d7c:	moveq	r3, #1
   12d80:	ldr	r1, [sp, #32]
   12d84:	cmp	fp, #0
   12d88:	andeq	r2, r3, r1
   12d8c:	movne	r2, #0
   12d90:	cmp	r2, #0
   12d94:	bne	12eb4 <__assert_fail@plt+0x2028>
   12d98:	eor	r2, r1, #1
   12d9c:	uxtb	r2, r2
   12da0:	and	r3, r3, r2
   12da4:	ldr	r1, [sp, #68]	; 0x44
   12da8:	ands	r3, r1, r3
   12dac:	beq	12e40 <__assert_fail@plt+0x1fb4>
   12db0:	ldr	r2, [sp, #40]	; 0x28
   12db4:	cmp	r2, #0
   12db8:	bne	12df0 <__assert_fail@plt+0x1f64>
   12dbc:	ldr	r2, [sp, #72]	; 0x48
   12dc0:	adds	r2, r2, #0
   12dc4:	movne	r2, #1
   12dc8:	cmp	r9, #0
   12dcc:	movne	r2, #0
   12dd0:	str	r2, [sp, #68]	; 0x44
   12dd4:	mov	sl, #2
   12dd8:	ldr	r1, [sp, #40]	; 0x28
   12ddc:	str	r1, [sp, #32]
   12de0:	cmp	r2, #0
   12de4:	beq	12e34 <__assert_fail@plt+0x1fa8>
   12de8:	ldr	r9, [sp, #72]	; 0x48
   12dec:	b	11b48 <__assert_fail@plt+0xcbc>
   12df0:	ldr	r3, [sp, #168]	; 0xa8
   12df4:	str	r3, [sp, #16]
   12df8:	ldr	r3, [sp, #164]	; 0xa4
   12dfc:	str	r3, [sp, #12]
   12e00:	ldr	r3, [sp, #160]	; 0xa0
   12e04:	str	r3, [sp, #8]
   12e08:	ldr	r3, [sp, #156]	; 0x9c
   12e0c:	str	r3, [sp, #4]
   12e10:	mov	r3, #5
   12e14:	str	r3, [sp]
   12e18:	ldr	r3, [sp, #24]
   12e1c:	ldr	r2, [sp, #48]	; 0x30
   12e20:	ldr	r1, [sp, #72]	; 0x48
   12e24:	ldr	r0, [sp, #64]	; 0x40
   12e28:	bl	11ad0 <__assert_fail@plt+0xc44>
   12e2c:	mov	fp, r0
   12e30:	b	12f50 <__assert_fail@plt+0x20c4>
   12e34:	mov	r8, r9
   12e38:	mov	r2, r3
   12e3c:	b	12e44 <__assert_fail@plt+0x1fb8>
   12e40:	mov	r8, r9
   12e44:	ldr	r3, [sp, #60]	; 0x3c
   12e48:	cmp	r3, #0
   12e4c:	moveq	r2, #0
   12e50:	andne	r2, r2, #1
   12e54:	cmp	r2, #0
   12e58:	beq	12e88 <__assert_fail@plt+0x1ffc>
   12e5c:	mov	r2, r3
   12e60:	ldrb	r3, [r3]
   12e64:	cmp	r3, #0
   12e68:	beq	12e88 <__assert_fail@plt+0x1ffc>
   12e6c:	ldr	r1, [sp, #64]	; 0x40
   12e70:	cmp	r8, fp
   12e74:	strbhi	r3, [r1, fp]
   12e78:	add	fp, fp, #1
   12e7c:	ldrb	r3, [r2, #1]!
   12e80:	cmp	r3, #0
   12e84:	bne	12e70 <__assert_fail@plt+0x1fe4>
   12e88:	cmp	r8, fp
   12e8c:	bls	12f50 <__assert_fail@plt+0x20c4>
   12e90:	mov	r3, #0
   12e94:	ldr	r2, [sp, #64]	; 0x40
   12e98:	strb	r3, [r2, fp]
   12e9c:	b	12f50 <__assert_fail@plt+0x20c4>
   12ea0:	mov	r8, r9
   12ea4:	mov	r7, sl
   12ea8:	ldr	r3, [sp, #32]
   12eac:	str	r3, [sp, #28]
   12eb0:	b	12ef8 <__assert_fail@plt+0x206c>
   12eb4:	mov	r8, r9
   12eb8:	mov	r7, #2
   12ebc:	b	12ef8 <__assert_fail@plt+0x206c>
   12ec0:	mov	r8, r9
   12ec4:	mov	r7, sl
   12ec8:	b	12ef8 <__assert_fail@plt+0x206c>
   12ecc:	mov	r8, r9
   12ed0:	mov	r7, sl
   12ed4:	b	12ef8 <__assert_fail@plt+0x206c>
   12ed8:	mov	r8, r9
   12edc:	mov	r7, sl
   12ee0:	b	12ef8 <__assert_fail@plt+0x206c>
   12ee4:	mov	r8, r9
   12ee8:	mov	r7, sl
   12eec:	b	12ef8 <__assert_fail@plt+0x206c>
   12ef0:	mov	r8, r9
   12ef4:	mov	r7, sl
   12ef8:	ldr	r3, [sp, #28]
   12efc:	cmp	r7, #2
   12f00:	movne	r3, #0
   12f04:	andeq	r3, r3, #1
   12f08:	cmp	r3, #0
   12f0c:	movne	r7, #4
   12f10:	ldr	r3, [sp, #168]	; 0xa8
   12f14:	str	r3, [sp, #16]
   12f18:	ldr	r3, [sp, #164]	; 0xa4
   12f1c:	str	r3, [sp, #12]
   12f20:	mov	r3, #0
   12f24:	str	r3, [sp, #8]
   12f28:	ldr	r3, [sp, #156]	; 0x9c
   12f2c:	bic	r3, r3, #2
   12f30:	str	r3, [sp, #4]
   12f34:	str	r7, [sp]
   12f38:	ldr	r3, [sp, #24]
   12f3c:	ldr	r2, [sp, #48]	; 0x30
   12f40:	mov	r1, r8
   12f44:	ldr	r0, [sp, #64]	; 0x40
   12f48:	bl	11ad0 <__assert_fail@plt+0xc44>
   12f4c:	mov	fp, r0
   12f50:	mov	r0, fp
   12f54:	add	sp, sp, #116	; 0x74
   12f58:	ldrd	r4, [sp]
   12f5c:	ldrd	r6, [sp, #8]
   12f60:	ldrd	r8, [sp, #16]
   12f64:	ldrd	sl, [sp, #24]
   12f68:	add	sp, sp, #32
   12f6c:	pop	{pc}		; (ldr pc, [sp], #4)
   12f70:	mov	r8, r9
   12f74:	mov	r7, sl
   12f78:	b	12f10 <__assert_fail@plt+0x2084>
   12f7c:	add	fp, fp, #4
   12f80:	str	r3, [sp, #36]	; 0x24
   12f84:	mov	r5, #0
   12f88:	mov	r4, #48	; 0x30
   12f8c:	b	12344 <__assert_fail@plt+0x14b8>
   12f90:	mov	r3, #1
   12f94:	str	r3, [sp, #32]
   12f98:	str	r3, [sp, #28]
   12f9c:	str	r3, [sp, #52]	; 0x34
   12fa0:	movw	r3, #22852	; 0x5944
   12fa4:	movt	r3, #1
   12fa8:	str	r3, [sp, #60]	; 0x3c
   12fac:	mov	fp, #0
   12fb0:	mov	sl, #5
   12fb4:	b	11ba8 <__assert_fail@plt+0xd1c>
   12fb8:	ldr	r3, [sp, #48]	; 0x30
   12fbc:	ldrb	r4, [r3, r6]
   12fc0:	cmp	r4, #126	; 0x7e
   12fc4:	ldrls	pc, [pc, r4, lsl #2]
   12fc8:	b	128b4 <__assert_fail@plt+0x1a28>
   12fcc:	andeq	r2, r1, ip, lsr r0
   12fd0:			; <UNDEFINED> instruction: 0x000128b4
   12fd4:			; <UNDEFINED> instruction: 0x000128b4
   12fd8:			; <UNDEFINED> instruction: 0x000128b4
   12fdc:			; <UNDEFINED> instruction: 0x000128b4
   12fe0:			; <UNDEFINED> instruction: 0x000128b4
   12fe4:			; <UNDEFINED> instruction: 0x000128b4
   12fe8:	andeq	r2, r1, r4, asr #26
   12fec:	andeq	r2, r1, r0, ror #5
   12ff0:	andeq	r2, r1, r4, lsl #13
   12ff4:	andeq	r2, r1, r0, asr #14
   12ff8:	muleq	r1, r8, r6
   12ffc:	strdeq	r2, [r1], -r4
   13000:	andeq	r2, r1, r8, lsl #6
   13004:			; <UNDEFINED> instruction: 0x000128b4
   13008:			; <UNDEFINED> instruction: 0x000128b4
   1300c:			; <UNDEFINED> instruction: 0x000128b4
   13010:			; <UNDEFINED> instruction: 0x000128b4
   13014:			; <UNDEFINED> instruction: 0x000128b4
   13018:			; <UNDEFINED> instruction: 0x000128b4
   1301c:			; <UNDEFINED> instruction: 0x000128b4
   13020:			; <UNDEFINED> instruction: 0x000128b4
   13024:			; <UNDEFINED> instruction: 0x000128b4
   13028:			; <UNDEFINED> instruction: 0x000128b4
   1302c:			; <UNDEFINED> instruction: 0x000128b4
   13030:			; <UNDEFINED> instruction: 0x000128b4
   13034:			; <UNDEFINED> instruction: 0x000128b4
   13038:			; <UNDEFINED> instruction: 0x000128b4
   1303c:			; <UNDEFINED> instruction: 0x000128b4
   13040:			; <UNDEFINED> instruction: 0x000128b4
   13044:			; <UNDEFINED> instruction: 0x000128b4
   13048:			; <UNDEFINED> instruction: 0x000128b4
   1304c:	andeq	r2, r1, r8, asr #15
   13050:	andeq	r2, r1, r4, lsl #16
   13054:	andeq	r2, r1, r4, lsl #16
   13058:			; <UNDEFINED> instruction: 0x000127bc
   1305c:	andeq	r2, r1, r4, lsl #16
   13060:	andeq	r2, r1, r8, lsr #26
   13064:	andeq	r2, r1, r4, lsl #16
   13068:	andeq	r2, r1, r4, lsl r8
   1306c:	andeq	r2, r1, r4, lsl #16
   13070:	andeq	r2, r1, r4, lsl #16
   13074:	andeq	r2, r1, r4, lsl #16
   13078:	andeq	r2, r1, r8, lsr #26
   1307c:	andeq	r2, r1, r8, lsr #26
   13080:	andeq	r2, r1, r8, lsr #26
   13084:	andeq	r2, r1, r8, lsr #26
   13088:	andeq	r2, r1, r8, lsr #26
   1308c:	andeq	r2, r1, r8, lsr #26
   13090:	andeq	r2, r1, r8, lsr #26
   13094:	andeq	r2, r1, r8, lsr #26
   13098:	andeq	r2, r1, r8, lsr #26
   1309c:	andeq	r2, r1, r8, lsr #26
   130a0:	andeq	r2, r1, r8, lsr #26
   130a4:	andeq	r2, r1, r8, lsr #26
   130a8:	andeq	r2, r1, r8, lsr #26
   130ac:	andeq	r2, r1, r8, lsr #26
   130b0:	andeq	r2, r1, r8, lsr #26
   130b4:	andeq	r2, r1, r8, lsr #26
   130b8:	andeq	r2, r1, r4, lsl #16
   130bc:	andeq	r2, r1, r4, lsl #16
   130c0:	andeq	r2, r1, r4, lsl #16
   130c4:	andeq	r2, r1, r4, lsl #16
   130c8:	andeq	r2, r1, r4, ror r1
   130cc:			; <UNDEFINED> instruction: 0x000128b4
   130d0:	andeq	r2, r1, r8, lsr #26
   130d4:	andeq	r2, r1, r8, lsr #26
   130d8:	andeq	r2, r1, r8, lsr #26
   130dc:	andeq	r2, r1, r8, lsr #26
   130e0:	andeq	r2, r1, r8, lsr #26
   130e4:	andeq	r2, r1, r8, lsr #26
   130e8:	andeq	r2, r1, r8, lsr #26
   130ec:	andeq	r2, r1, r8, lsr #26
   130f0:	andeq	r2, r1, r8, lsr #26
   130f4:	andeq	r2, r1, r8, lsr #26
   130f8:	andeq	r2, r1, r8, lsr #26
   130fc:	andeq	r2, r1, r8, lsr #26
   13100:	andeq	r2, r1, r8, lsr #26
   13104:	andeq	r2, r1, r8, lsr #26
   13108:	andeq	r2, r1, r8, lsr #26
   1310c:	andeq	r2, r1, r8, lsr #26
   13110:	andeq	r2, r1, r8, lsr #26
   13114:	andeq	r2, r1, r8, lsr #26
   13118:	andeq	r2, r1, r8, lsr #26
   1311c:	andeq	r2, r1, r8, lsr #26
   13120:	andeq	r2, r1, r8, lsr #26
   13124:	andeq	r2, r1, r8, lsr #26
   13128:	andeq	r2, r1, r8, lsr #26
   1312c:	andeq	r2, r1, r8, lsr #26
   13130:	andeq	r2, r1, r8, lsr #26
   13134:	andeq	r2, r1, r8, lsr #26
   13138:	andeq	r2, r1, r4, lsl #16
   1313c:	andeq	r2, r1, ip, lsr #13
   13140:	andeq	r2, r1, r8, lsr #26
   13144:	andeq	r2, r1, r4, lsl #16
   13148:	andeq	r2, r1, r8, lsr #26
   1314c:	andeq	r2, r1, r4, lsl #16
   13150:	andeq	r2, r1, r8, lsr #26
   13154:	andeq	r2, r1, r8, lsr #26
   13158:	andeq	r2, r1, r8, lsr #26
   1315c:	andeq	r2, r1, r8, lsr #26
   13160:	andeq	r2, r1, r8, lsr #26
   13164:	andeq	r2, r1, r8, lsr #26
   13168:	andeq	r2, r1, r8, lsr #26
   1316c:	andeq	r2, r1, r8, lsr #26
   13170:	andeq	r2, r1, r8, lsr #26
   13174:	andeq	r2, r1, r8, lsr #26
   13178:	andeq	r2, r1, r8, lsr #26
   1317c:	andeq	r2, r1, r8, lsr #26
   13180:	andeq	r2, r1, r8, lsr #26
   13184:	andeq	r2, r1, r8, lsr #26
   13188:	andeq	r2, r1, r8, lsr #26
   1318c:	andeq	r2, r1, r8, lsr #26
   13190:	andeq	r2, r1, r8, lsr #26
   13194:	andeq	r2, r1, r8, lsr #26
   13198:	andeq	r2, r1, r8, lsr #26
   1319c:	andeq	r2, r1, r8, lsr #26
   131a0:	andeq	r2, r1, r8, lsr #26
   131a4:	andeq	r2, r1, r8, lsr #26
   131a8:	andeq	r2, r1, r8, lsr #26
   131ac:	andeq	r2, r1, r8, lsr #26
   131b0:	andeq	r2, r1, r8, lsr #26
   131b4:	andeq	r2, r1, r8, lsr #26
   131b8:	andeq	r2, r1, ip, ror #14
   131bc:	andeq	r2, r1, r4, lsl #16
   131c0:	andeq	r2, r1, ip, ror #14
   131c4:			; <UNDEFINED> instruction: 0x000127bc
   131c8:	strd	r4, [sp, #-36]!	; 0xffffffdc
   131cc:	strd	r6, [sp, #8]
   131d0:	strd	r8, [sp, #16]
   131d4:	strd	sl, [sp, #24]
   131d8:	str	lr, [sp, #32]
   131dc:	sub	sp, sp, #52	; 0x34
   131e0:	mov	r5, r0
   131e4:	str	r1, [sp, #24]
   131e8:	str	r2, [sp, #28]
   131ec:	mov	r4, r3
   131f0:	bl	10dd8 <__errno_location@plt>
   131f4:	str	r0, [sp, #32]
   131f8:	ldr	r3, [r0]
   131fc:	str	r3, [sp, #36]	; 0x24
   13200:	movw	r3, #24808	; 0x60e8
   13204:	movt	r3, #2
   13208:	ldr	r6, [r3]
   1320c:	cmn	r5, #-2147483647	; 0x80000001
   13210:	movne	r3, #0
   13214:	moveq	r3, #1
   13218:	orrs	r3, r3, r5, lsr #31
   1321c:	bne	13380 <__assert_fail@plt+0x24f4>
   13220:	movw	r3, #24808	; 0x60e8
   13224:	movt	r3, #2
   13228:	ldr	r2, [r3, #4]
   1322c:	cmp	r2, r5
   13230:	bgt	132a0 <__assert_fail@plt+0x2414>
   13234:	str	r2, [sp, #44]	; 0x2c
   13238:	add	r3, r3, #8
   1323c:	cmp	r6, r3
   13240:	beq	13384 <__assert_fail@plt+0x24f8>
   13244:	sub	r2, r5, r2
   13248:	mov	r3, #8
   1324c:	str	r3, [sp]
   13250:	mvn	r3, #-2147483648	; 0x80000000
   13254:	add	r2, r2, #1
   13258:	add	r1, sp, #44	; 0x2c
   1325c:	mov	r0, r6
   13260:	bl	14388 <__assert_fail@plt+0x34fc>
   13264:	mov	r6, r0
   13268:	movw	r3, #24808	; 0x60e8
   1326c:	movt	r3, #2
   13270:	str	r0, [r3]
   13274:	movw	r7, #24808	; 0x60e8
   13278:	movt	r7, #2
   1327c:	ldr	r0, [r7, #4]
   13280:	ldr	r2, [sp, #44]	; 0x2c
   13284:	sub	r2, r2, r0
   13288:	lsl	r2, r2, #3
   1328c:	mov	r1, #0
   13290:	add	r0, r6, r0, lsl #3
   13294:	bl	10df0 <memset@plt>
   13298:	ldr	r3, [sp, #44]	; 0x2c
   1329c:	str	r3, [r7, #4]
   132a0:	add	fp, r6, r5, lsl #3
   132a4:	ldr	r8, [r6, r5, lsl #3]
   132a8:	ldr	r7, [fp, #4]
   132ac:	ldr	r3, [r4, #4]
   132b0:	orr	r9, r3, #1
   132b4:	add	sl, r4, #8
   132b8:	ldr	r3, [r4, #44]	; 0x2c
   132bc:	str	r3, [sp, #16]
   132c0:	ldr	r3, [r4, #40]	; 0x28
   132c4:	str	r3, [sp, #12]
   132c8:	str	sl, [sp, #8]
   132cc:	str	r9, [sp, #4]
   132d0:	ldr	r3, [r4]
   132d4:	str	r3, [sp]
   132d8:	ldr	r3, [sp, #28]
   132dc:	ldr	r2, [sp, #24]
   132e0:	mov	r1, r8
   132e4:	mov	r0, r7
   132e8:	bl	11ad0 <__assert_fail@plt+0xc44>
   132ec:	cmp	r8, r0
   132f0:	bhi	13354 <__assert_fail@plt+0x24c8>
   132f4:	add	r8, r0, #1
   132f8:	str	r8, [r6, r5, lsl #3]
   132fc:	movw	r3, #24916	; 0x6154
   13300:	movt	r3, #2
   13304:	cmp	r7, r3
   13308:	beq	13314 <__assert_fail@plt+0x2488>
   1330c:	mov	r0, r7
   13310:	bl	150b4 <__assert_fail@plt+0x4228>
   13314:	mov	r0, r8
   13318:	bl	14184 <__assert_fail@plt+0x32f8>
   1331c:	mov	r7, r0
   13320:	str	r0, [fp, #4]
   13324:	ldr	r3, [r4, #44]	; 0x2c
   13328:	str	r3, [sp, #16]
   1332c:	ldr	r3, [r4, #40]	; 0x28
   13330:	str	r3, [sp, #12]
   13334:	str	sl, [sp, #8]
   13338:	str	r9, [sp, #4]
   1333c:	ldr	r3, [r4]
   13340:	str	r3, [sp]
   13344:	ldr	r3, [sp, #28]
   13348:	ldr	r2, [sp, #24]
   1334c:	mov	r1, r8
   13350:	bl	11ad0 <__assert_fail@plt+0xc44>
   13354:	ldr	r3, [sp, #32]
   13358:	ldr	r2, [sp, #36]	; 0x24
   1335c:	str	r2, [r3]
   13360:	mov	r0, r7
   13364:	add	sp, sp, #52	; 0x34
   13368:	ldrd	r4, [sp]
   1336c:	ldrd	r6, [sp, #8]
   13370:	ldrd	r8, [sp, #16]
   13374:	ldrd	sl, [sp, #24]
   13378:	add	sp, sp, #32
   1337c:	pop	{pc}		; (ldr pc, [sp], #4)
   13380:	bl	10e80 <abort@plt>
   13384:	sub	r2, r5, r2
   13388:	mov	r3, #8
   1338c:	str	r3, [sp]
   13390:	mvn	r3, #-2147483648	; 0x80000000
   13394:	add	r2, r2, #1
   13398:	add	r1, sp, #44	; 0x2c
   1339c:	mov	r0, #0
   133a0:	bl	14388 <__assert_fail@plt+0x34fc>
   133a4:	mov	r6, r0
   133a8:	movw	r3, #24808	; 0x60e8
   133ac:	movt	r3, #2
   133b0:	str	r0, [r3]
   133b4:	ldrd	r2, [r3, #8]
   133b8:	strd	r2, [r0]
   133bc:	b	13274 <__assert_fail@plt+0x23e8>
   133c0:	strd	r4, [sp, #-16]!
   133c4:	str	r6, [sp, #8]
   133c8:	str	lr, [sp, #12]
   133cc:	mov	r4, r0
   133d0:	bl	10dd8 <__errno_location@plt>
   133d4:	mov	r5, r0
   133d8:	ldr	r6, [r0]
   133dc:	cmp	r4, #0
   133e0:	ldr	r3, [pc, #32]	; 13408 <__assert_fail@plt+0x257c>
   133e4:	moveq	r4, r3
   133e8:	mov	r1, #48	; 0x30
   133ec:	mov	r0, r4
   133f0:	bl	144f8 <__assert_fail@plt+0x366c>
   133f4:	str	r6, [r5]
   133f8:	ldrd	r4, [sp]
   133fc:	ldr	r6, [sp, #8]
   13400:	add	sp, sp, #12
   13404:	pop	{pc}		; (ldr pc, [sp], #4)
   13408:	andeq	r6, r2, r4, asr r2
   1340c:	subs	r3, r0, #0
   13410:	ldr	r2, [pc, #8]	; 13420 <__assert_fail@plt+0x2594>
   13414:	moveq	r3, r2
   13418:	ldr	r0, [r3]
   1341c:	bx	lr
   13420:	andeq	r6, r2, r4, asr r2
   13424:	subs	r3, r0, #0
   13428:	ldr	r2, [pc, #8]	; 13438 <__assert_fail@plt+0x25ac>
   1342c:	moveq	r3, r2
   13430:	str	r1, [r3]
   13434:	bx	lr
   13438:	andeq	r6, r2, r4, asr r2
   1343c:	push	{lr}		; (str lr, [sp, #-4]!)
   13440:	subs	r3, r0, #0
   13444:	ldr	r0, [pc, #44]	; 13478 <__assert_fail@plt+0x25ec>
   13448:	moveq	r3, r0
   1344c:	add	r3, r3, #8
   13450:	lsr	lr, r1, #5
   13454:	and	r1, r1, #31
   13458:	ldr	ip, [r3, lr, lsl #2]
   1345c:	lsr	r0, ip, r1
   13460:	eor	r2, r2, r0
   13464:	and	r2, r2, #1
   13468:	eor	r1, ip, r2, lsl r1
   1346c:	str	r1, [r3, lr, lsl #2]
   13470:	and	r0, r0, #1
   13474:	pop	{pc}		; (ldr pc, [sp], #4)
   13478:	andeq	r6, r2, r4, asr r2
   1347c:	subs	r3, r0, #0
   13480:	ldr	r2, [pc, #12]	; 13494 <__assert_fail@plt+0x2608>
   13484:	moveq	r3, r2
   13488:	ldr	r0, [r3, #4]
   1348c:	str	r1, [r3, #4]
   13490:	bx	lr
   13494:	andeq	r6, r2, r4, asr r2
   13498:	subs	r3, r0, #0
   1349c:	ldr	r0, [pc, #44]	; 134d0 <__assert_fail@plt+0x2644>
   134a0:	moveq	r3, r0
   134a4:	mov	r0, #10
   134a8:	str	r0, [r3]
   134ac:	cmp	r2, #0
   134b0:	cmpne	r1, #0
   134b4:	beq	134c4 <__assert_fail@plt+0x2638>
   134b8:	str	r1, [r3, #40]	; 0x28
   134bc:	str	r2, [r3, #44]	; 0x2c
   134c0:	bx	lr
   134c4:	str	r4, [sp, #-8]!
   134c8:	str	lr, [sp, #4]
   134cc:	bl	10e80 <abort@plt>
   134d0:	andeq	r6, r2, r4, asr r2
   134d4:	strd	r4, [sp, #-32]!	; 0xffffffe0
   134d8:	strd	r6, [sp, #8]
   134dc:	strd	r8, [sp, #16]
   134e0:	str	sl, [sp, #24]
   134e4:	str	lr, [sp, #28]
   134e8:	sub	sp, sp, #24
   134ec:	mov	r7, r0
   134f0:	mov	r8, r1
   134f4:	mov	r9, r2
   134f8:	mov	sl, r3
   134fc:	ldr	r4, [sp, #56]	; 0x38
   13500:	cmp	r4, #0
   13504:	ldr	r3, [pc, #104]	; 13574 <__assert_fail@plt+0x26e8>
   13508:	moveq	r4, r3
   1350c:	bl	10dd8 <__errno_location@plt>
   13510:	mov	r5, r0
   13514:	ldr	r6, [r0]
   13518:	ldr	r3, [r4, #44]	; 0x2c
   1351c:	str	r3, [sp, #16]
   13520:	ldr	r3, [r4, #40]	; 0x28
   13524:	str	r3, [sp, #12]
   13528:	add	r3, r4, #8
   1352c:	str	r3, [sp, #8]
   13530:	ldr	r3, [r4, #4]
   13534:	str	r3, [sp, #4]
   13538:	ldr	r3, [r4]
   1353c:	str	r3, [sp]
   13540:	mov	r3, sl
   13544:	mov	r2, r9
   13548:	mov	r1, r8
   1354c:	mov	r0, r7
   13550:	bl	11ad0 <__assert_fail@plt+0xc44>
   13554:	str	r6, [r5]
   13558:	add	sp, sp, #24
   1355c:	ldrd	r4, [sp]
   13560:	ldrd	r6, [sp, #8]
   13564:	ldrd	r8, [sp, #16]
   13568:	ldr	sl, [sp, #24]
   1356c:	add	sp, sp, #28
   13570:	pop	{pc}		; (ldr pc, [sp], #4)
   13574:	andeq	r6, r2, r4, asr r2
   13578:	strd	r4, [sp, #-36]!	; 0xffffffdc
   1357c:	strd	r6, [sp, #8]
   13580:	strd	r8, [sp, #16]
   13584:	strd	sl, [sp, #24]
   13588:	str	lr, [sp, #32]
   1358c:	sub	sp, sp, #44	; 0x2c
   13590:	mov	r8, r0
   13594:	mov	sl, r1
   13598:	mov	r6, r2
   1359c:	subs	r4, r3, #0
   135a0:	ldr	r3, [pc, #200]	; 13670 <__assert_fail@plt+0x27e4>
   135a4:	moveq	r4, r3
   135a8:	bl	10dd8 <__errno_location@plt>
   135ac:	mov	r7, r0
   135b0:	ldr	fp, [r0]
   135b4:	ldr	r5, [r4, #4]
   135b8:	cmp	r6, #0
   135bc:	orreq	r5, r5, #1
   135c0:	add	r9, r4, #8
   135c4:	ldr	r3, [r4, #44]	; 0x2c
   135c8:	str	r3, [sp, #16]
   135cc:	ldr	r3, [r4, #40]	; 0x28
   135d0:	str	r3, [sp, #12]
   135d4:	str	r9, [sp, #8]
   135d8:	str	r5, [sp, #4]
   135dc:	ldr	r3, [r4]
   135e0:	str	r3, [sp]
   135e4:	str	sl, [sp, #36]	; 0x24
   135e8:	mov	r3, sl
   135ec:	str	r8, [sp, #32]
   135f0:	mov	r2, r8
   135f4:	mov	r1, #0
   135f8:	mov	r0, r1
   135fc:	bl	11ad0 <__assert_fail@plt+0xc44>
   13600:	mov	sl, r0
   13604:	add	r8, r0, #1
   13608:	mov	r0, r8
   1360c:	bl	14184 <__assert_fail@plt+0x32f8>
   13610:	str	r0, [sp, #28]
   13614:	ldr	r3, [r4, #44]	; 0x2c
   13618:	str	r3, [sp, #16]
   1361c:	ldr	r3, [r4, #40]	; 0x28
   13620:	str	r3, [sp, #12]
   13624:	str	r9, [sp, #8]
   13628:	str	r5, [sp, #4]
   1362c:	ldr	r3, [r4]
   13630:	str	r3, [sp]
   13634:	ldr	r3, [sp, #36]	; 0x24
   13638:	ldr	r2, [sp, #32]
   1363c:	mov	r1, r8
   13640:	bl	11ad0 <__assert_fail@plt+0xc44>
   13644:	str	fp, [r7]
   13648:	cmp	r6, #0
   1364c:	strne	sl, [r6]
   13650:	ldr	r0, [sp, #28]
   13654:	add	sp, sp, #44	; 0x2c
   13658:	ldrd	r4, [sp]
   1365c:	ldrd	r6, [sp, #8]
   13660:	ldrd	r8, [sp, #16]
   13664:	ldrd	sl, [sp, #24]
   13668:	add	sp, sp, #32
   1366c:	pop	{pc}		; (ldr pc, [sp], #4)
   13670:	andeq	r6, r2, r4, asr r2
   13674:	str	r4, [sp, #-8]!
   13678:	str	lr, [sp, #4]
   1367c:	mov	r3, r2
   13680:	mov	r2, #0
   13684:	bl	13578 <__assert_fail@plt+0x26ec>
   13688:	ldr	r4, [sp]
   1368c:	add	sp, sp, #4
   13690:	pop	{pc}		; (ldr pc, [sp], #4)
   13694:	strd	r4, [sp, #-24]!	; 0xffffffe8
   13698:	strd	r6, [sp, #8]
   1369c:	str	r8, [sp, #16]
   136a0:	str	lr, [sp, #20]
   136a4:	movw	r3, #24808	; 0x60e8
   136a8:	movt	r3, #2
   136ac:	ldr	r7, [r3]
   136b0:	ldr	r3, [r3, #4]
   136b4:	cmp	r3, #1
   136b8:	ble	136e4 <__assert_fail@plt+0x2858>
   136bc:	mov	r4, #1
   136c0:	add	r6, r7, #4
   136c4:	movw	r5, #24808	; 0x60e8
   136c8:	movt	r5, #2
   136cc:	ldr	r0, [r6, r4, lsl #3]
   136d0:	bl	150b4 <__assert_fail@plt+0x4228>
   136d4:	add	r4, r4, #1
   136d8:	ldr	r3, [r5, #4]
   136dc:	cmp	r3, r4
   136e0:	bgt	136cc <__assert_fail@plt+0x2840>
   136e4:	ldr	r0, [r7, #4]
   136e8:	movw	r3, #24916	; 0x6154
   136ec:	movt	r3, #2
   136f0:	cmp	r0, r3
   136f4:	beq	13718 <__assert_fail@plt+0x288c>
   136f8:	bl	150b4 <__assert_fail@plt+0x4228>
   136fc:	movw	r3, #24808	; 0x60e8
   13700:	movt	r3, #2
   13704:	mov	r2, #256	; 0x100
   13708:	str	r2, [r3, #8]
   1370c:	movw	r2, #24916	; 0x6154
   13710:	movt	r2, #2
   13714:	str	r2, [r3, #12]
   13718:	ldr	r3, [pc, #64]	; 13760 <__assert_fail@plt+0x28d4>
   1371c:	cmp	r7, r3
   13720:	beq	1373c <__assert_fail@plt+0x28b0>
   13724:	mov	r0, r7
   13728:	bl	150b4 <__assert_fail@plt+0x4228>
   1372c:	movw	r3, #24808	; 0x60e8
   13730:	movt	r3, #2
   13734:	add	r2, r3, #8
   13738:	str	r2, [r3]
   1373c:	movw	r3, #24808	; 0x60e8
   13740:	movt	r3, #2
   13744:	mov	r2, #1
   13748:	str	r2, [r3, #4]
   1374c:	ldrd	r4, [sp]
   13750:	ldrd	r6, [sp, #8]
   13754:	ldr	r8, [sp, #16]
   13758:	add	sp, sp, #20
   1375c:	pop	{pc}		; (ldr pc, [sp], #4)
   13760:	strdeq	r6, [r2], -r0
   13764:	str	r4, [sp, #-8]!
   13768:	str	lr, [sp, #4]
   1376c:	ldr	r3, [pc, #16]	; 13784 <__assert_fail@plt+0x28f8>
   13770:	mvn	r2, #0
   13774:	bl	131c8 <__assert_fail@plt+0x233c>
   13778:	ldr	r4, [sp]
   1377c:	add	sp, sp, #4
   13780:	pop	{pc}		; (ldr pc, [sp], #4)
   13784:	andeq	r6, r2, r4, asr r2
   13788:	str	r4, [sp, #-8]!
   1378c:	str	lr, [sp, #4]
   13790:	ldr	r3, [pc, #12]	; 137a4 <__assert_fail@plt+0x2918>
   13794:	bl	131c8 <__assert_fail@plt+0x233c>
   13798:	ldr	r4, [sp]
   1379c:	add	sp, sp, #4
   137a0:	pop	{pc}		; (ldr pc, [sp], #4)
   137a4:	andeq	r6, r2, r4, asr r2
   137a8:	str	r4, [sp, #-8]!
   137ac:	str	lr, [sp, #4]
   137b0:	mov	r1, r0
   137b4:	mov	r0, #0
   137b8:	bl	13764 <__assert_fail@plt+0x28d8>
   137bc:	ldr	r4, [sp]
   137c0:	add	sp, sp, #4
   137c4:	pop	{pc}		; (ldr pc, [sp], #4)
   137c8:	str	r4, [sp, #-8]!
   137cc:	str	lr, [sp, #4]
   137d0:	mov	r2, r1
   137d4:	mov	r1, r0
   137d8:	mov	r0, #0
   137dc:	bl	13788 <__assert_fail@plt+0x28fc>
   137e0:	ldr	r4, [sp]
   137e4:	add	sp, sp, #4
   137e8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ec:	strd	r4, [sp, #-12]!
   137f0:	str	lr, [sp, #8]
   137f4:	sub	sp, sp, #52	; 0x34
   137f8:	mov	r4, r0
   137fc:	mov	r5, r2
   13800:	mov	r0, sp
   13804:	bl	1193c <__assert_fail@plt+0xab0>
   13808:	mov	r3, sp
   1380c:	mvn	r2, #0
   13810:	mov	r1, r5
   13814:	mov	r0, r4
   13818:	bl	131c8 <__assert_fail@plt+0x233c>
   1381c:	add	sp, sp, #52	; 0x34
   13820:	ldrd	r4, [sp]
   13824:	add	sp, sp, #8
   13828:	pop	{pc}		; (ldr pc, [sp], #4)
   1382c:	strd	r4, [sp, #-16]!
   13830:	str	r6, [sp, #8]
   13834:	str	lr, [sp, #12]
   13838:	sub	sp, sp, #48	; 0x30
   1383c:	mov	r4, r0
   13840:	mov	r5, r2
   13844:	mov	r6, r3
   13848:	mov	r0, sp
   1384c:	bl	1193c <__assert_fail@plt+0xab0>
   13850:	mov	r3, sp
   13854:	mov	r2, r6
   13858:	mov	r1, r5
   1385c:	mov	r0, r4
   13860:	bl	131c8 <__assert_fail@plt+0x233c>
   13864:	add	sp, sp, #48	; 0x30
   13868:	ldrd	r4, [sp]
   1386c:	ldr	r6, [sp, #8]
   13870:	add	sp, sp, #12
   13874:	pop	{pc}		; (ldr pc, [sp], #4)
   13878:	str	r4, [sp, #-8]!
   1387c:	str	lr, [sp, #4]
   13880:	mov	r2, r1
   13884:	mov	r1, r0
   13888:	mov	r0, #0
   1388c:	bl	137ec <__assert_fail@plt+0x2960>
   13890:	ldr	r4, [sp]
   13894:	add	sp, sp, #4
   13898:	pop	{pc}		; (ldr pc, [sp], #4)
   1389c:	str	r4, [sp, #-8]!
   138a0:	str	lr, [sp, #4]
   138a4:	mov	r3, r2
   138a8:	mov	r2, r1
   138ac:	mov	r1, r0
   138b0:	mov	r0, #0
   138b4:	bl	1382c <__assert_fail@plt+0x29a0>
   138b8:	ldr	r4, [sp]
   138bc:	add	sp, sp, #4
   138c0:	pop	{pc}		; (ldr pc, [sp], #4)
   138c4:	strd	r4, [sp, #-12]!
   138c8:	str	lr, [sp, #8]
   138cc:	sub	sp, sp, #52	; 0x34
   138d0:	mov	r4, r0
   138d4:	mov	r5, r1
   138d8:	mov	r1, r2
   138dc:	ldr	r0, [pc, #92]	; 13940 <__assert_fail@plt+0x2ab4>
   138e0:	ldrd	r2, [r0]
   138e4:	strd	r2, [sp]
   138e8:	ldrd	r2, [r0, #8]
   138ec:	strd	r2, [sp, #8]
   138f0:	ldrd	r2, [r0, #16]
   138f4:	strd	r2, [sp, #16]
   138f8:	ldrd	r2, [r0, #24]
   138fc:	strd	r2, [sp, #24]
   13900:	ldrd	r2, [r0, #32]
   13904:	strd	r2, [sp, #32]
   13908:	ldrd	r2, [r0, #40]	; 0x28
   1390c:	strd	r2, [sp, #40]	; 0x28
   13910:	mov	r2, #1
   13914:	mov	r0, sp
   13918:	bl	1343c <__assert_fail@plt+0x25b0>
   1391c:	mov	r3, sp
   13920:	mov	r2, r5
   13924:	mov	r1, r4
   13928:	mov	r0, #0
   1392c:	bl	131c8 <__assert_fail@plt+0x233c>
   13930:	add	sp, sp, #52	; 0x34
   13934:	ldrd	r4, [sp]
   13938:	add	sp, sp, #8
   1393c:	pop	{pc}		; (ldr pc, [sp], #4)
   13940:	andeq	r6, r2, r4, asr r2
   13944:	str	r4, [sp, #-8]!
   13948:	str	lr, [sp, #4]
   1394c:	mov	r2, r1
   13950:	mvn	r1, #0
   13954:	bl	138c4 <__assert_fail@plt+0x2a38>
   13958:	ldr	r4, [sp]
   1395c:	add	sp, sp, #4
   13960:	pop	{pc}		; (ldr pc, [sp], #4)
   13964:	str	r4, [sp, #-8]!
   13968:	str	lr, [sp, #4]
   1396c:	mov	r1, #58	; 0x3a
   13970:	bl	13944 <__assert_fail@plt+0x2ab8>
   13974:	ldr	r4, [sp]
   13978:	add	sp, sp, #4
   1397c:	pop	{pc}		; (ldr pc, [sp], #4)
   13980:	str	r4, [sp, #-8]!
   13984:	str	lr, [sp, #4]
   13988:	mov	r2, #58	; 0x3a
   1398c:	bl	138c4 <__assert_fail@plt+0x2a38>
   13990:	ldr	r4, [sp]
   13994:	add	sp, sp, #4
   13998:	pop	{pc}		; (ldr pc, [sp], #4)
   1399c:	strd	r4, [sp, #-12]!
   139a0:	str	lr, [sp, #8]
   139a4:	sub	sp, sp, #100	; 0x64
   139a8:	mov	r4, r0
   139ac:	mov	r5, r2
   139b0:	mov	r0, sp
   139b4:	bl	1193c <__assert_fail@plt+0xab0>
   139b8:	ldrd	r2, [sp]
   139bc:	strd	r2, [sp, #48]	; 0x30
   139c0:	ldrd	r2, [sp, #8]
   139c4:	strd	r2, [sp, #56]	; 0x38
   139c8:	ldrd	r2, [sp, #16]
   139cc:	strd	r2, [sp, #64]	; 0x40
   139d0:	ldrd	r2, [sp, #24]
   139d4:	strd	r2, [sp, #72]	; 0x48
   139d8:	ldrd	r2, [sp, #32]
   139dc:	strd	r2, [sp, #80]	; 0x50
   139e0:	ldrd	r2, [sp, #40]	; 0x28
   139e4:	strd	r2, [sp, #88]	; 0x58
   139e8:	mov	r2, #1
   139ec:	mov	r1, #58	; 0x3a
   139f0:	add	r0, sp, #48	; 0x30
   139f4:	bl	1343c <__assert_fail@plt+0x25b0>
   139f8:	add	r3, sp, #48	; 0x30
   139fc:	mvn	r2, #0
   13a00:	mov	r1, r5
   13a04:	mov	r0, r4
   13a08:	bl	131c8 <__assert_fail@plt+0x233c>
   13a0c:	add	sp, sp, #100	; 0x64
   13a10:	ldrd	r4, [sp]
   13a14:	add	sp, sp, #8
   13a18:	pop	{pc}		; (ldr pc, [sp], #4)
   13a1c:	strd	r4, [sp, #-20]!	; 0xffffffec
   13a20:	strd	r6, [sp, #8]
   13a24:	str	lr, [sp, #16]
   13a28:	sub	sp, sp, #52	; 0x34
   13a2c:	mov	r4, r0
   13a30:	mov	r5, r3
   13a34:	ldr	r3, [pc, #92]	; 13a98 <__assert_fail@plt+0x2c0c>
   13a38:	ldrd	r6, [r3]
   13a3c:	strd	r6, [sp]
   13a40:	ldrd	r6, [r3, #8]
   13a44:	strd	r6, [sp, #8]
   13a48:	ldrd	r6, [r3, #16]
   13a4c:	strd	r6, [sp, #16]
   13a50:	ldrd	r6, [r3, #24]
   13a54:	strd	r6, [sp, #24]
   13a58:	ldrd	r6, [r3, #32]
   13a5c:	strd	r6, [sp, #32]
   13a60:	ldrd	r6, [r3, #40]	; 0x28
   13a64:	strd	r6, [sp, #40]	; 0x28
   13a68:	mov	r0, sp
   13a6c:	bl	13498 <__assert_fail@plt+0x260c>
   13a70:	mov	r3, sp
   13a74:	ldr	r2, [sp, #72]	; 0x48
   13a78:	mov	r1, r5
   13a7c:	mov	r0, r4
   13a80:	bl	131c8 <__assert_fail@plt+0x233c>
   13a84:	add	sp, sp, #52	; 0x34
   13a88:	ldrd	r4, [sp]
   13a8c:	ldrd	r6, [sp, #8]
   13a90:	add	sp, sp, #16
   13a94:	pop	{pc}		; (ldr pc, [sp], #4)
   13a98:	andeq	r6, r2, r4, asr r2
   13a9c:	push	{lr}		; (str lr, [sp, #-4]!)
   13aa0:	sub	sp, sp, #12
   13aa4:	mvn	ip, #0
   13aa8:	str	ip, [sp]
   13aac:	bl	13a1c <__assert_fail@plt+0x2b90>
   13ab0:	add	sp, sp, #12
   13ab4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ab8:	str	r4, [sp, #-8]!
   13abc:	str	lr, [sp, #4]
   13ac0:	mov	r3, r2
   13ac4:	mov	r2, r1
   13ac8:	mov	r1, r0
   13acc:	mov	r0, #0
   13ad0:	bl	13a9c <__assert_fail@plt+0x2c10>
   13ad4:	ldr	r4, [sp]
   13ad8:	add	sp, sp, #4
   13adc:	pop	{pc}		; (ldr pc, [sp], #4)
   13ae0:	push	{lr}		; (str lr, [sp, #-4]!)
   13ae4:	sub	sp, sp, #12
   13ae8:	str	r3, [sp]
   13aec:	mov	r3, r2
   13af0:	mov	r2, r1
   13af4:	mov	r1, r0
   13af8:	mov	r0, #0
   13afc:	bl	13a1c <__assert_fail@plt+0x2b90>
   13b00:	add	sp, sp, #12
   13b04:	pop	{pc}		; (ldr pc, [sp], #4)
   13b08:	str	r4, [sp, #-8]!
   13b0c:	str	lr, [sp, #4]
   13b10:	ldr	r3, [pc, #12]	; 13b24 <__assert_fail@plt+0x2c98>
   13b14:	bl	131c8 <__assert_fail@plt+0x233c>
   13b18:	ldr	r4, [sp]
   13b1c:	add	sp, sp, #4
   13b20:	pop	{pc}		; (ldr pc, [sp], #4)
   13b24:	strdeq	r6, [r2], -r8
   13b28:	str	r4, [sp, #-8]!
   13b2c:	str	lr, [sp, #4]
   13b30:	mov	r2, r1
   13b34:	mov	r1, r0
   13b38:	mov	r0, #0
   13b3c:	bl	13b08 <__assert_fail@plt+0x2c7c>
   13b40:	ldr	r4, [sp]
   13b44:	add	sp, sp, #4
   13b48:	pop	{pc}		; (ldr pc, [sp], #4)
   13b4c:	str	r4, [sp, #-8]!
   13b50:	str	lr, [sp, #4]
   13b54:	mvn	r2, #0
   13b58:	bl	13b08 <__assert_fail@plt+0x2c7c>
   13b5c:	ldr	r4, [sp]
   13b60:	add	sp, sp, #4
   13b64:	pop	{pc}		; (ldr pc, [sp], #4)
   13b68:	str	r4, [sp, #-8]!
   13b6c:	str	lr, [sp, #4]
   13b70:	mov	r1, r0
   13b74:	mov	r0, #0
   13b78:	bl	13b4c <__assert_fail@plt+0x2cc0>
   13b7c:	ldr	r4, [sp]
   13b80:	add	sp, sp, #4
   13b84:	pop	{pc}		; (ldr pc, [sp], #4)
   13b88:	strd	r4, [sp, #-16]!
   13b8c:	str	r6, [sp, #8]
   13b90:	str	lr, [sp, #12]
   13b94:	sub	sp, sp, #32
   13b98:	mov	r4, r0
   13b9c:	ldr	r5, [sp, #48]	; 0x30
   13ba0:	ldr	r6, [sp, #52]	; 0x34
   13ba4:	cmp	r1, #0
   13ba8:	beq	13c74 <__assert_fail@plt+0x2de8>
   13bac:	str	r3, [sp, #4]
   13bb0:	str	r2, [sp]
   13bb4:	mov	r3, r1
   13bb8:	movw	r2, #22980	; 0x59c4
   13bbc:	movt	r2, #1
   13bc0:	mov	r1, #1
   13bc4:	bl	10e14 <__fprintf_chk@plt>
   13bc8:	mov	r2, #5
   13bcc:	movw	r1, #23000	; 0x59d8
   13bd0:	movt	r1, #1
   13bd4:	mov	r0, #0
   13bd8:	bl	10cd0 <dcgettext@plt>
   13bdc:	movw	r3, #2022	; 0x7e6
   13be0:	str	r3, [sp]
   13be4:	mov	r3, r0
   13be8:	movw	r2, #23728	; 0x5cb0
   13bec:	movt	r2, #1
   13bf0:	mov	r1, #1
   13bf4:	mov	r0, r4
   13bf8:	bl	10e14 <__fprintf_chk@plt>
   13bfc:	mov	r1, r4
   13c00:	mov	r0, #10
   13c04:	bl	10cc4 <fputc_unlocked@plt>
   13c08:	mov	r2, #5
   13c0c:	movw	r1, #23004	; 0x59dc
   13c10:	movt	r1, #1
   13c14:	mov	r0, #0
   13c18:	bl	10cd0 <dcgettext@plt>
   13c1c:	movw	r3, #23176	; 0x5a88
   13c20:	movt	r3, #1
   13c24:	mov	r2, r0
   13c28:	mov	r1, #1
   13c2c:	mov	r0, r4
   13c30:	bl	10e14 <__fprintf_chk@plt>
   13c34:	mov	r1, r4
   13c38:	mov	r0, #10
   13c3c:	bl	10cc4 <fputc_unlocked@plt>
   13c40:	cmp	r6, #9
   13c44:	ldrls	pc, [pc, r6, lsl #2]
   13c48:	b	13f4c <__assert_fail@plt+0x30c0>
   13c4c:			; <UNDEFINED> instruction: 0x00013cb8
   13c50:	muleq	r1, r0, ip
   13c54:	andeq	r3, r1, ip, asr #25
   13c58:	andeq	r3, r1, r0, lsl #26
   13c5c:	andeq	r3, r1, ip, lsr sp
   13c60:	andeq	r3, r1, r0, lsl #27
   13c64:	andeq	r3, r1, ip, asr #27
   13c68:	andeq	r3, r1, r0, lsr #28
   13c6c:	andeq	r3, r1, ip, ror lr
   13c70:	andeq	r3, r1, r0, ror #29
   13c74:	str	r3, [sp]
   13c78:	mov	r3, r2
   13c7c:	movw	r2, #22992	; 0x59d0
   13c80:	movt	r2, #1
   13c84:	mov	r1, #1
   13c88:	bl	10e14 <__fprintf_chk@plt>
   13c8c:	b	13bc8 <__assert_fail@plt+0x2d3c>
   13c90:	mov	r2, #5
   13c94:	movw	r1, #23212	; 0x5aac
   13c98:	movt	r1, #1
   13c9c:	mov	r0, #0
   13ca0:	bl	10cd0 <dcgettext@plt>
   13ca4:	ldr	r3, [r5]
   13ca8:	mov	r2, r0
   13cac:	mov	r1, #1
   13cb0:	mov	r0, r4
   13cb4:	bl	10e14 <__fprintf_chk@plt>
   13cb8:	add	sp, sp, #32
   13cbc:	ldrd	r4, [sp]
   13cc0:	ldr	r6, [sp, #8]
   13cc4:	add	sp, sp, #12
   13cc8:	pop	{pc}		; (ldr pc, [sp], #4)
   13ccc:	mov	r2, #5
   13cd0:	movw	r1, #23228	; 0x5abc
   13cd4:	movt	r1, #1
   13cd8:	mov	r0, #0
   13cdc:	bl	10cd0 <dcgettext@plt>
   13ce0:	ldr	r3, [r5, #4]
   13ce4:	str	r3, [sp]
   13ce8:	ldr	r3, [r5]
   13cec:	mov	r2, r0
   13cf0:	mov	r1, #1
   13cf4:	mov	r0, r4
   13cf8:	bl	10e14 <__fprintf_chk@plt>
   13cfc:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13d00:	mov	r2, #5
   13d04:	movw	r1, #23252	; 0x5ad4
   13d08:	movt	r1, #1
   13d0c:	mov	r0, #0
   13d10:	bl	10cd0 <dcgettext@plt>
   13d14:	ldr	r3, [r5, #8]
   13d18:	str	r3, [sp, #4]
   13d1c:	ldr	r3, [r5, #4]
   13d20:	str	r3, [sp]
   13d24:	ldr	r3, [r5]
   13d28:	mov	r2, r0
   13d2c:	mov	r1, #1
   13d30:	mov	r0, r4
   13d34:	bl	10e14 <__fprintf_chk@plt>
   13d38:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13d3c:	mov	r2, #5
   13d40:	movw	r1, #23280	; 0x5af0
   13d44:	movt	r1, #1
   13d48:	mov	r0, #0
   13d4c:	bl	10cd0 <dcgettext@plt>
   13d50:	ldr	r3, [r5, #12]
   13d54:	str	r3, [sp, #8]
   13d58:	ldr	r3, [r5, #8]
   13d5c:	str	r3, [sp, #4]
   13d60:	ldr	r3, [r5, #4]
   13d64:	str	r3, [sp]
   13d68:	ldr	r3, [r5]
   13d6c:	mov	r2, r0
   13d70:	mov	r1, #1
   13d74:	mov	r0, r4
   13d78:	bl	10e14 <__fprintf_chk@plt>
   13d7c:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13d80:	mov	r2, #5
   13d84:	movw	r1, #23312	; 0x5b10
   13d88:	movt	r1, #1
   13d8c:	mov	r0, #0
   13d90:	bl	10cd0 <dcgettext@plt>
   13d94:	ldr	r3, [r5, #16]
   13d98:	str	r3, [sp, #12]
   13d9c:	ldr	r3, [r5, #12]
   13da0:	str	r3, [sp, #8]
   13da4:	ldr	r3, [r5, #8]
   13da8:	str	r3, [sp, #4]
   13dac:	ldr	r3, [r5, #4]
   13db0:	str	r3, [sp]
   13db4:	ldr	r3, [r5]
   13db8:	mov	r2, r0
   13dbc:	mov	r1, #1
   13dc0:	mov	r0, r4
   13dc4:	bl	10e14 <__fprintf_chk@plt>
   13dc8:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13dcc:	mov	r2, #5
   13dd0:	movw	r1, #23348	; 0x5b34
   13dd4:	movt	r1, #1
   13dd8:	mov	r0, #0
   13ddc:	bl	10cd0 <dcgettext@plt>
   13de0:	ldr	r3, [r5, #20]
   13de4:	str	r3, [sp, #16]
   13de8:	ldr	r3, [r5, #16]
   13dec:	str	r3, [sp, #12]
   13df0:	ldr	r3, [r5, #12]
   13df4:	str	r3, [sp, #8]
   13df8:	ldr	r3, [r5, #8]
   13dfc:	str	r3, [sp, #4]
   13e00:	ldr	r3, [r5, #4]
   13e04:	str	r3, [sp]
   13e08:	ldr	r3, [r5]
   13e0c:	mov	r2, r0
   13e10:	mov	r1, #1
   13e14:	mov	r0, r4
   13e18:	bl	10e14 <__fprintf_chk@plt>
   13e1c:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13e20:	mov	r2, #5
   13e24:	movw	r1, #23388	; 0x5b5c
   13e28:	movt	r1, #1
   13e2c:	mov	r0, #0
   13e30:	bl	10cd0 <dcgettext@plt>
   13e34:	ldr	r3, [r5, #24]
   13e38:	str	r3, [sp, #20]
   13e3c:	ldr	r3, [r5, #20]
   13e40:	str	r3, [sp, #16]
   13e44:	ldr	r3, [r5, #16]
   13e48:	str	r3, [sp, #12]
   13e4c:	ldr	r3, [r5, #12]
   13e50:	str	r3, [sp, #8]
   13e54:	ldr	r3, [r5, #8]
   13e58:	str	r3, [sp, #4]
   13e5c:	ldr	r3, [r5, #4]
   13e60:	str	r3, [sp]
   13e64:	ldr	r3, [r5]
   13e68:	mov	r2, r0
   13e6c:	mov	r1, #1
   13e70:	mov	r0, r4
   13e74:	bl	10e14 <__fprintf_chk@plt>
   13e78:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13e7c:	mov	r2, #5
   13e80:	movw	r1, #23432	; 0x5b88
   13e84:	movt	r1, #1
   13e88:	mov	r0, #0
   13e8c:	bl	10cd0 <dcgettext@plt>
   13e90:	ldr	r3, [r5, #28]
   13e94:	str	r3, [sp, #24]
   13e98:	ldr	r3, [r5, #24]
   13e9c:	str	r3, [sp, #20]
   13ea0:	ldr	r3, [r5, #20]
   13ea4:	str	r3, [sp, #16]
   13ea8:	ldr	r3, [r5, #16]
   13eac:	str	r3, [sp, #12]
   13eb0:	ldr	r3, [r5, #12]
   13eb4:	str	r3, [sp, #8]
   13eb8:	ldr	r3, [r5, #8]
   13ebc:	str	r3, [sp, #4]
   13ec0:	ldr	r3, [r5, #4]
   13ec4:	str	r3, [sp]
   13ec8:	ldr	r3, [r5]
   13ecc:	mov	r2, r0
   13ed0:	mov	r1, #1
   13ed4:	mov	r0, r4
   13ed8:	bl	10e14 <__fprintf_chk@plt>
   13edc:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13ee0:	mov	r2, #5
   13ee4:	movw	r1, #23480	; 0x5bb8
   13ee8:	movt	r1, #1
   13eec:	mov	r0, #0
   13ef0:	bl	10cd0 <dcgettext@plt>
   13ef4:	ldr	r3, [r5, #32]
   13ef8:	str	r3, [sp, #28]
   13efc:	ldr	r3, [r5, #28]
   13f00:	str	r3, [sp, #24]
   13f04:	ldr	r3, [r5, #24]
   13f08:	str	r3, [sp, #20]
   13f0c:	ldr	r3, [r5, #20]
   13f10:	str	r3, [sp, #16]
   13f14:	ldr	r3, [r5, #16]
   13f18:	str	r3, [sp, #12]
   13f1c:	ldr	r3, [r5, #12]
   13f20:	str	r3, [sp, #8]
   13f24:	ldr	r3, [r5, #8]
   13f28:	str	r3, [sp, #4]
   13f2c:	ldr	r3, [r5, #4]
   13f30:	str	r3, [sp]
   13f34:	ldr	r3, [r5]
   13f38:	mov	r2, r0
   13f3c:	mov	r1, #1
   13f40:	mov	r0, r4
   13f44:	bl	10e14 <__fprintf_chk@plt>
   13f48:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13f4c:	mov	r2, #5
   13f50:	movw	r1, #23532	; 0x5bec
   13f54:	movt	r1, #1
   13f58:	mov	r0, #0
   13f5c:	bl	10cd0 <dcgettext@plt>
   13f60:	ldr	r3, [r5, #32]
   13f64:	str	r3, [sp, #28]
   13f68:	ldr	r3, [r5, #28]
   13f6c:	str	r3, [sp, #24]
   13f70:	ldr	r3, [r5, #24]
   13f74:	str	r3, [sp, #20]
   13f78:	ldr	r3, [r5, #20]
   13f7c:	str	r3, [sp, #16]
   13f80:	ldr	r3, [r5, #16]
   13f84:	str	r3, [sp, #12]
   13f88:	ldr	r3, [r5, #12]
   13f8c:	str	r3, [sp, #8]
   13f90:	ldr	r3, [r5, #8]
   13f94:	str	r3, [sp, #4]
   13f98:	ldr	r3, [r5, #4]
   13f9c:	str	r3, [sp]
   13fa0:	ldr	r3, [r5]
   13fa4:	mov	r2, r0
   13fa8:	mov	r1, #1
   13fac:	mov	r0, r4
   13fb0:	bl	10e14 <__fprintf_chk@plt>
   13fb4:	b	13cb8 <__assert_fail@plt+0x2e2c>
   13fb8:	strd	r4, [sp, #-12]!
   13fbc:	str	lr, [sp, #8]
   13fc0:	sub	sp, sp, #12
   13fc4:	ldr	r5, [sp, #24]
   13fc8:	ldr	ip, [r5]
   13fcc:	cmp	ip, #0
   13fd0:	beq	14008 <__assert_fail@plt+0x317c>
   13fd4:	mov	lr, r5
   13fd8:	mov	ip, #0
   13fdc:	add	ip, ip, #1
   13fe0:	ldr	r4, [lr, #4]!
   13fe4:	cmp	r4, #0
   13fe8:	bne	13fdc <__assert_fail@plt+0x3150>
   13fec:	str	ip, [sp, #4]
   13ff0:	str	r5, [sp]
   13ff4:	bl	13b88 <__assert_fail@plt+0x2cfc>
   13ff8:	add	sp, sp, #12
   13ffc:	ldrd	r4, [sp]
   14000:	add	sp, sp, #8
   14004:	pop	{pc}		; (ldr pc, [sp], #4)
   14008:	mov	ip, #0
   1400c:	b	13fec <__assert_fail@plt+0x3160>
   14010:	strd	r4, [sp, #-12]!
   14014:	str	lr, [sp, #8]
   14018:	sub	sp, sp, #52	; 0x34
   1401c:	ldr	r5, [sp, #64]	; 0x40
   14020:	add	r4, sp, #8
   14024:	mov	ip, #0
   14028:	ldr	lr, [r5], #4
   1402c:	str	lr, [r4], #4
   14030:	cmp	lr, #0
   14034:	beq	14044 <__assert_fail@plt+0x31b8>
   14038:	add	ip, ip, #1
   1403c:	cmp	ip, #10
   14040:	bne	14028 <__assert_fail@plt+0x319c>
   14044:	str	ip, [sp, #4]
   14048:	add	ip, sp, #8
   1404c:	str	ip, [sp]
   14050:	bl	13b88 <__assert_fail@plt+0x2cfc>
   14054:	add	sp, sp, #52	; 0x34
   14058:	ldrd	r4, [sp]
   1405c:	add	sp, sp, #8
   14060:	pop	{pc}		; (ldr pc, [sp], #4)
   14064:	push	{r3}		; (str r3, [sp, #-4]!)
   14068:	push	{lr}		; (str lr, [sp, #-4]!)
   1406c:	sub	sp, sp, #16
   14070:	add	r3, sp, #24
   14074:	str	r3, [sp, #12]
   14078:	str	r3, [sp]
   1407c:	ldr	r3, [sp, #20]
   14080:	bl	14010 <__assert_fail@plt+0x3184>
   14084:	add	sp, sp, #16
   14088:	pop	{lr}		; (ldr lr, [sp], #4)
   1408c:	add	sp, sp, #4
   14090:	bx	lr
   14094:	str	r4, [sp, #-8]!
   14098:	str	lr, [sp, #4]
   1409c:	movw	r3, #24892	; 0x613c
   140a0:	movt	r3, #2
   140a4:	ldr	r1, [r3]
   140a8:	mov	r0, #10
   140ac:	bl	10cc4 <fputc_unlocked@plt>
   140b0:	mov	r2, #5
   140b4:	movw	r1, #23592	; 0x5c28
   140b8:	movt	r1, #1
   140bc:	mov	r0, #0
   140c0:	bl	10cd0 <dcgettext@plt>
   140c4:	movw	r2, #23612	; 0x5c3c
   140c8:	movt	r2, #1
   140cc:	mov	r1, r0
   140d0:	mov	r0, #1
   140d4:	bl	10dfc <__printf_chk@plt>
   140d8:	mov	r2, #5
   140dc:	movw	r1, #23636	; 0x5c54
   140e0:	movt	r1, #1
   140e4:	mov	r0, #0
   140e8:	bl	10cd0 <dcgettext@plt>
   140ec:	movw	r3, #22192	; 0x56b0
   140f0:	movt	r3, #1
   140f4:	movw	r2, #22232	; 0x56d8
   140f8:	movt	r2, #1
   140fc:	mov	r1, r0
   14100:	mov	r0, #1
   14104:	bl	10dfc <__printf_chk@plt>
   14108:	mov	r2, #5
   1410c:	movw	r1, #23656	; 0x5c68
   14110:	movt	r1, #1
   14114:	mov	r0, #0
   14118:	bl	10cd0 <dcgettext@plt>
   1411c:	movw	r2, #23696	; 0x5c90
   14120:	movt	r2, #1
   14124:	mov	r1, r0
   14128:	mov	r0, #1
   1412c:	bl	10dfc <__printf_chk@plt>
   14130:	ldr	r4, [sp]
   14134:	add	sp, sp, #4
   14138:	pop	{pc}		; (ldr pc, [sp], #4)
   1413c:	str	r4, [sp, #-8]!
   14140:	str	lr, [sp, #4]
   14144:	bl	14e64 <__assert_fail@plt+0x3fd8>
   14148:	cmp	r0, #0
   1414c:	beq	1415c <__assert_fail@plt+0x32d0>
   14150:	ldr	r4, [sp]
   14154:	add	sp, sp, #4
   14158:	pop	{pc}		; (ldr pc, [sp], #4)
   1415c:	bl	145d0 <__assert_fail@plt+0x3744>
   14160:	str	r4, [sp, #-8]!
   14164:	str	lr, [sp, #4]
   14168:	bl	14e64 <__assert_fail@plt+0x3fd8>
   1416c:	cmp	r0, #0
   14170:	beq	14180 <__assert_fail@plt+0x32f4>
   14174:	ldr	r4, [sp]
   14178:	add	sp, sp, #4
   1417c:	pop	{pc}		; (ldr pc, [sp], #4)
   14180:	bl	145d0 <__assert_fail@plt+0x3744>
   14184:	str	r4, [sp, #-8]!
   14188:	str	lr, [sp, #4]
   1418c:	bl	1413c <__assert_fail@plt+0x32b0>
   14190:	ldr	r4, [sp]
   14194:	add	sp, sp, #4
   14198:	pop	{pc}		; (ldr pc, [sp], #4)
   1419c:	strd	r4, [sp, #-16]!
   141a0:	str	r6, [sp, #8]
   141a4:	str	lr, [sp, #12]
   141a8:	mov	r5, r0
   141ac:	mov	r4, r1
   141b0:	bl	14ea0 <__assert_fail@plt+0x4014>
   141b4:	cmp	r0, #0
   141b8:	beq	141cc <__assert_fail@plt+0x3340>
   141bc:	ldrd	r4, [sp]
   141c0:	ldr	r6, [sp, #8]
   141c4:	add	sp, sp, #12
   141c8:	pop	{pc}		; (ldr pc, [sp], #4)
   141cc:	adds	r4, r4, #0
   141d0:	movne	r4, #1
   141d4:	cmp	r5, #0
   141d8:	moveq	r4, #1
   141dc:	cmp	r4, #0
   141e0:	beq	141bc <__assert_fail@plt+0x3330>
   141e4:	bl	145d0 <__assert_fail@plt+0x3744>
   141e8:	str	r4, [sp, #-8]!
   141ec:	str	lr, [sp, #4]
   141f0:	cmp	r1, #0
   141f4:	orreq	r1, r1, #1
   141f8:	bl	14ea0 <__assert_fail@plt+0x4014>
   141fc:	cmp	r0, #0
   14200:	beq	14210 <__assert_fail@plt+0x3384>
   14204:	ldr	r4, [sp]
   14208:	add	sp, sp, #4
   1420c:	pop	{pc}		; (ldr pc, [sp], #4)
   14210:	bl	145d0 <__assert_fail@plt+0x3744>
   14214:	strd	r4, [sp, #-16]!
   14218:	str	r6, [sp, #8]
   1421c:	str	lr, [sp, #12]
   14220:	mov	r4, r0
   14224:	mov	r6, r1
   14228:	mov	r5, r2
   1422c:	bl	15288 <__assert_fail@plt+0x43fc>
   14230:	cmp	r0, #0
   14234:	beq	14248 <__assert_fail@plt+0x33bc>
   14238:	ldrd	r4, [sp]
   1423c:	ldr	r6, [sp, #8]
   14240:	add	sp, sp, #12
   14244:	pop	{pc}		; (ldr pc, [sp], #4)
   14248:	cmp	r4, #0
   1424c:	beq	1425c <__assert_fail@plt+0x33d0>
   14250:	cmp	r6, #0
   14254:	cmpne	r5, #0
   14258:	beq	14238 <__assert_fail@plt+0x33ac>
   1425c:	bl	145d0 <__assert_fail@plt+0x3744>
   14260:	str	r4, [sp, #-8]!
   14264:	str	lr, [sp, #4]
   14268:	bl	14214 <__assert_fail@plt+0x3388>
   1426c:	ldr	r4, [sp]
   14270:	add	sp, sp, #4
   14274:	pop	{pc}		; (ldr pc, [sp], #4)
   14278:	str	r4, [sp, #-8]!
   1427c:	str	lr, [sp, #4]
   14280:	mov	ip, r1
   14284:	mov	r3, r2
   14288:	cmp	r2, #0
   1428c:	cmpne	r1, #0
   14290:	moveq	r3, #1
   14294:	moveq	ip, r3
   14298:	mov	r2, r3
   1429c:	mov	r1, ip
   142a0:	bl	15288 <__assert_fail@plt+0x43fc>
   142a4:	cmp	r0, #0
   142a8:	beq	142b8 <__assert_fail@plt+0x342c>
   142ac:	ldr	r4, [sp]
   142b0:	add	sp, sp, #4
   142b4:	pop	{pc}		; (ldr pc, [sp], #4)
   142b8:	bl	145d0 <__assert_fail@plt+0x3744>
   142bc:	str	r4, [sp, #-8]!
   142c0:	str	lr, [sp, #4]
   142c4:	mov	r2, r1
   142c8:	mov	r1, r0
   142cc:	mov	r0, #0
   142d0:	bl	14214 <__assert_fail@plt+0x3388>
   142d4:	ldr	r4, [sp]
   142d8:	add	sp, sp, #4
   142dc:	pop	{pc}		; (ldr pc, [sp], #4)
   142e0:	str	r4, [sp, #-8]!
   142e4:	str	lr, [sp, #4]
   142e8:	mov	r2, r1
   142ec:	mov	r1, r0
   142f0:	mov	r0, #0
   142f4:	bl	14278 <__assert_fail@plt+0x33ec>
   142f8:	ldr	r4, [sp]
   142fc:	add	sp, sp, #4
   14300:	pop	{pc}		; (ldr pc, [sp], #4)
   14304:	strd	r4, [sp, #-16]!
   14308:	str	r6, [sp, #8]
   1430c:	str	lr, [sp, #12]
   14310:	mov	r5, r1
   14314:	ldr	r4, [r1]
   14318:	cmp	r0, #0
   1431c:	beq	1434c <__assert_fail@plt+0x34c0>
   14320:	lsr	r3, r4, #1
   14324:	add	r3, r3, #1
   14328:	adds	r4, r4, r3
   1432c:	bcs	14368 <__assert_fail@plt+0x34dc>
   14330:	mov	r1, r4
   14334:	bl	14214 <__assert_fail@plt+0x3388>
   14338:	str	r4, [r5]
   1433c:	ldrd	r4, [sp]
   14340:	ldr	r6, [sp, #8]
   14344:	add	sp, sp, #12
   14348:	pop	{pc}		; (ldr pc, [sp], #4)
   1434c:	cmp	r4, #0
   14350:	bne	14330 <__assert_fail@plt+0x34a4>
   14354:	mov	r4, #64	; 0x40
   14358:	udiv	r4, r4, r2
   1435c:	cmp	r2, #64	; 0x40
   14360:	addhi	r4, r4, #1
   14364:	b	14330 <__assert_fail@plt+0x34a4>
   14368:	bl	145d0 <__assert_fail@plt+0x3744>
   1436c:	str	r4, [sp, #-8]!
   14370:	str	lr, [sp, #4]
   14374:	mov	r2, #1
   14378:	bl	14304 <__assert_fail@plt+0x3478>
   1437c:	ldr	r4, [sp]
   14380:	add	sp, sp, #4
   14384:	pop	{pc}		; (ldr pc, [sp], #4)
   14388:	strd	r4, [sp, #-24]!	; 0xffffffe8
   1438c:	strd	r6, [sp, #8]
   14390:	str	r8, [sp, #16]
   14394:	str	lr, [sp, #20]
   14398:	mov	r5, r1
   1439c:	ldr	lr, [sp, #24]
   143a0:	ldr	ip, [r1]
   143a4:	asr	r4, ip, #1
   143a8:	adds	r4, ip, r4
   143ac:	movvs	r1, #1
   143b0:	movvc	r1, #0
   143b4:	cmp	r1, #0
   143b8:	mvnne	r4, #-2147483648	; 0x80000000
   143bc:	mvn	r8, r3
   143c0:	lsr	r8, r8, #31
   143c4:	cmp	r3, r4
   143c8:	movge	r1, #0
   143cc:	andlt	r1, r8, #1
   143d0:	cmp	r1, #0
   143d4:	movne	r4, r3
   143d8:	smull	r6, r7, r4, lr
   143dc:	asr	r1, r6, #31
   143e0:	cmp	r1, r7
   143e4:	bne	143fc <__assert_fail@plt+0x3570>
   143e8:	mov	r1, r6
   143ec:	cmp	r6, #63	; 0x3f
   143f0:	movle	r1, #64	; 0x40
   143f4:	ble	14400 <__assert_fail@plt+0x3574>
   143f8:	b	1440c <__assert_fail@plt+0x3580>
   143fc:	mvn	r1, #-2147483648	; 0x80000000
   14400:	sdiv	r4, r1, lr
   14404:	mls	r6, lr, r4, r1
   14408:	sub	r1, r1, r6
   1440c:	cmp	r0, #0
   14410:	moveq	r6, #0
   14414:	streq	r6, [r5]
   14418:	sub	r6, r4, ip
   1441c:	cmp	r6, r2
   14420:	bge	14458 <__assert_fail@plt+0x35cc>
   14424:	adds	r2, ip, r2
   14428:	mov	r4, r2
   1442c:	bvs	14474 <__assert_fail@plt+0x35e8>
   14430:	cmp	r2, r3
   14434:	movle	r3, #0
   14438:	andgt	r3, r8, #1
   1443c:	cmp	r3, #0
   14440:	bne	14474 <__assert_fail@plt+0x35e8>
   14444:	smull	r2, r3, r2, lr
   14448:	asr	ip, r2, #31
   1444c:	mov	r1, r2
   14450:	cmp	ip, r3
   14454:	bne	14474 <__assert_fail@plt+0x35e8>
   14458:	bl	1419c <__assert_fail@plt+0x3310>
   1445c:	str	r4, [r5]
   14460:	ldrd	r4, [sp]
   14464:	ldrd	r6, [sp, #8]
   14468:	ldr	r8, [sp, #16]
   1446c:	add	sp, sp, #20
   14470:	pop	{pc}		; (ldr pc, [sp], #4)
   14474:	bl	145d0 <__assert_fail@plt+0x3744>
   14478:	str	r4, [sp, #-8]!
   1447c:	str	lr, [sp, #4]
   14480:	bl	14df0 <__assert_fail@plt+0x3f64>
   14484:	cmp	r0, #0
   14488:	beq	14498 <__assert_fail@plt+0x360c>
   1448c:	ldr	r4, [sp]
   14490:	add	sp, sp, #4
   14494:	pop	{pc}		; (ldr pc, [sp], #4)
   14498:	bl	145d0 <__assert_fail@plt+0x3744>
   1449c:	str	r4, [sp, #-8]!
   144a0:	str	lr, [sp, #4]
   144a4:	mov	r1, #1
   144a8:	bl	14478 <__assert_fail@plt+0x35ec>
   144ac:	ldr	r4, [sp]
   144b0:	add	sp, sp, #4
   144b4:	pop	{pc}		; (ldr pc, [sp], #4)
   144b8:	str	r4, [sp, #-8]!
   144bc:	str	lr, [sp, #4]
   144c0:	bl	14df0 <__assert_fail@plt+0x3f64>
   144c4:	cmp	r0, #0
   144c8:	beq	144d8 <__assert_fail@plt+0x364c>
   144cc:	ldr	r4, [sp]
   144d0:	add	sp, sp, #4
   144d4:	pop	{pc}		; (ldr pc, [sp], #4)
   144d8:	bl	145d0 <__assert_fail@plt+0x3744>
   144dc:	str	r4, [sp, #-8]!
   144e0:	str	lr, [sp, #4]
   144e4:	mov	r1, #1
   144e8:	bl	144b8 <__assert_fail@plt+0x362c>
   144ec:	ldr	r4, [sp]
   144f0:	add	sp, sp, #4
   144f4:	pop	{pc}		; (ldr pc, [sp], #4)
   144f8:	strd	r4, [sp, #-16]!
   144fc:	str	r6, [sp, #8]
   14500:	str	lr, [sp, #12]
   14504:	mov	r5, r0
   14508:	mov	r4, r1
   1450c:	mov	r0, r1
   14510:	bl	1413c <__assert_fail@plt+0x32b0>
   14514:	mov	r2, r4
   14518:	mov	r1, r5
   1451c:	bl	10c88 <memcpy@plt>
   14520:	ldrd	r4, [sp]
   14524:	ldr	r6, [sp, #8]
   14528:	add	sp, sp, #12
   1452c:	pop	{pc}		; (ldr pc, [sp], #4)
   14530:	strd	r4, [sp, #-16]!
   14534:	str	r6, [sp, #8]
   14538:	str	lr, [sp, #12]
   1453c:	mov	r5, r0
   14540:	mov	r4, r1
   14544:	mov	r0, r1
   14548:	bl	14160 <__assert_fail@plt+0x32d4>
   1454c:	mov	r2, r4
   14550:	mov	r1, r5
   14554:	bl	10c88 <memcpy@plt>
   14558:	ldrd	r4, [sp]
   1455c:	ldr	r6, [sp, #8]
   14560:	add	sp, sp, #12
   14564:	pop	{pc}		; (ldr pc, [sp], #4)
   14568:	strd	r4, [sp, #-16]!
   1456c:	str	r6, [sp, #8]
   14570:	str	lr, [sp, #12]
   14574:	mov	r5, r0
   14578:	mov	r4, r1
   1457c:	add	r0, r1, #1
   14580:	bl	14160 <__assert_fail@plt+0x32d4>
   14584:	mov	r2, #0
   14588:	strb	r2, [r0, r4]
   1458c:	mov	r2, r4
   14590:	mov	r1, r5
   14594:	bl	10c88 <memcpy@plt>
   14598:	ldrd	r4, [sp]
   1459c:	ldr	r6, [sp, #8]
   145a0:	add	sp, sp, #12
   145a4:	pop	{pc}		; (ldr pc, [sp], #4)
   145a8:	str	r4, [sp, #-8]!
   145ac:	str	lr, [sp, #4]
   145b0:	mov	r4, r0
   145b4:	bl	10dc0 <strlen@plt>
   145b8:	add	r1, r0, #1
   145bc:	mov	r0, r4
   145c0:	bl	144f8 <__assert_fail@plt+0x366c>
   145c4:	ldr	r4, [sp]
   145c8:	add	sp, sp, #4
   145cc:	pop	{pc}		; (ldr pc, [sp], #4)
   145d0:	str	r4, [sp, #-8]!
   145d4:	str	lr, [sp, #4]
   145d8:	movw	r3, #24804	; 0x60e4
   145dc:	movt	r3, #2
   145e0:	ldr	r4, [r3]
   145e4:	mov	r2, #5
   145e8:	movw	r1, #23776	; 0x5ce0
   145ec:	movt	r1, #1
   145f0:	mov	r0, #0
   145f4:	bl	10cd0 <dcgettext@plt>
   145f8:	mov	r3, r0
   145fc:	movw	r2, #22660	; 0x5884
   14600:	movt	r2, #1
   14604:	mov	r1, #0
   14608:	mov	r0, r4
   1460c:	bl	10d48 <error@plt>
   14610:	bl	10e80 <abort@plt>
   14614:	strd	r4, [sp, #-16]!
   14618:	str	r6, [sp, #8]
   1461c:	str	lr, [sp, #12]
   14620:	sub	sp, sp, #16
   14624:	mov	r6, r0
   14628:	mov	r4, r2
   1462c:	mov	r5, r3
   14630:	ldr	r3, [sp, #40]	; 0x28
   14634:	str	r3, [sp]
   14638:	add	r3, sp, #8
   1463c:	mov	r2, r1
   14640:	mov	r1, #0
   14644:	bl	148a0 <__assert_fail@plt+0x3a14>
   14648:	cmp	r0, #0
   1464c:	bne	146c4 <__assert_fail@plt+0x3838>
   14650:	ldrd	r0, [sp, #8]
   14654:	ldrd	r2, [sp, #32]
   14658:	cmp	r1, r3
   1465c:	cmpeq	r0, r2
   14660:	movhi	r3, #1
   14664:	movls	r3, #0
   14668:	cmp	r1, r5
   1466c:	cmpeq	r0, r4
   14670:	orrcc	r3, r3, #1
   14674:	cmp	r3, #0
   14678:	bne	14690 <__assert_fail@plt+0x3804>
   1467c:	add	sp, sp, #16
   14680:	ldrd	r4, [sp]
   14684:	ldr	r6, [sp, #8]
   14688:	add	sp, sp, #12
   1468c:	pop	{pc}		; (ldr pc, [sp], #4)
   14690:	mvn	r2, #-1073741824	; 0xc0000000
   14694:	mov	r3, #0
   14698:	cmp	r1, r3
   1469c:	cmpeq	r0, r2
   146a0:	bls	146b4 <__assert_fail@plt+0x3828>
   146a4:	bl	10dd8 <__errno_location@plt>
   146a8:	mov	r3, #75	; 0x4b
   146ac:	str	r3, [r0]
   146b0:	b	146d4 <__assert_fail@plt+0x3848>
   146b4:	bl	10dd8 <__errno_location@plt>
   146b8:	mov	r3, #34	; 0x22
   146bc:	str	r3, [r0]
   146c0:	b	146d4 <__assert_fail@plt+0x3848>
   146c4:	cmp	r0, #1
   146c8:	beq	14718 <__assert_fail@plt+0x388c>
   146cc:	cmp	r0, #3
   146d0:	beq	14728 <__assert_fail@plt+0x389c>
   146d4:	ldr	r3, [sp, #48]	; 0x30
   146d8:	cmp	r3, #0
   146dc:	moveq	r3, #1
   146e0:	str	r3, [sp, #48]	; 0x30
   146e4:	bl	10dd8 <__errno_location@plt>
   146e8:	ldr	r4, [r0]
   146ec:	cmp	r4, #22
   146f0:	moveq	r4, #0
   146f4:	mov	r0, r6
   146f8:	bl	13b68 <__assert_fail@plt+0x2cdc>
   146fc:	str	r0, [sp]
   14700:	ldr	r3, [sp, #44]	; 0x2c
   14704:	movw	r2, #22656	; 0x5880
   14708:	movt	r2, #1
   1470c:	mov	r1, r4
   14710:	ldr	r0, [sp, #48]	; 0x30
   14714:	bl	10d48 <error@plt>
   14718:	bl	10dd8 <__errno_location@plt>
   1471c:	mov	r3, #75	; 0x4b
   14720:	str	r3, [r0]
   14724:	b	146d4 <__assert_fail@plt+0x3848>
   14728:	bl	10dd8 <__errno_location@plt>
   1472c:	mov	r3, #0
   14730:	str	r3, [r0]
   14734:	b	146d4 <__assert_fail@plt+0x3848>
   14738:	strd	r4, [sp, #-12]!
   1473c:	str	lr, [sp, #8]
   14740:	sub	sp, sp, #28
   14744:	ldr	r1, [sp, #56]	; 0x38
   14748:	str	r1, [sp, #16]
   1474c:	ldr	r1, [sp, #52]	; 0x34
   14750:	str	r1, [sp, #12]
   14754:	ldr	r1, [sp, #48]	; 0x30
   14758:	str	r1, [sp, #8]
   1475c:	ldrd	r4, [sp, #40]	; 0x28
   14760:	strd	r4, [sp]
   14764:	mov	r1, #10
   14768:	bl	14614 <__assert_fail@plt+0x3788>
   1476c:	add	sp, sp, #28
   14770:	ldrd	r4, [sp]
   14774:	add	sp, sp, #8
   14778:	pop	{pc}		; (ldr pc, [sp], #4)
   1477c:	strd	r4, [sp, #-36]!	; 0xffffffdc
   14780:	strd	r6, [sp, #8]
   14784:	strd	r8, [sp, #16]
   14788:	strd	sl, [sp, #24]
   1478c:	str	lr, [sp, #32]
   14790:	sub	sp, sp, #12
   14794:	str	r0, [sp, #4]
   14798:	cmp	r2, #0
   1479c:	beq	14898 <__assert_fail@plt+0x3a0c>
   147a0:	sub	ip, r2, #1
   147a4:	ldrd	r2, [r0]
   147a8:	mov	r0, #0
   147ac:	mov	r8, r1
   147b0:	asr	r9, r1, #31
   147b4:	str	r1, [sp]
   147b8:	b	14808 <__assert_fail@plt+0x397c>
   147bc:	orrs	r4, r2, r3
   147c0:	movne	lr, #1
   147c4:	b	14818 <__assert_fail@plt+0x398c>
   147c8:	mov	sl, r3
   147cc:	ldr	fp, [sp]
   147d0:	umull	r6, r7, r1, r2
   147d4:	mov	r4, r7
   147d8:	mov	r5, #0
   147dc:	umlal	r4, r5, sl, fp
   147e0:	cmp	r5, #0
   147e4:	bne	1484c <__assert_fail@plt+0x39c0>
   147e8:	cmp	lr, #0
   147ec:	bne	14864 <__assert_fail@plt+0x39d8>
   147f0:	mov	r2, r6
   147f4:	mov	r3, r4
   147f8:	orr	r0, r0, lr
   147fc:	sub	ip, ip, #1
   14800:	cmn	ip, #1
   14804:	beq	14874 <__assert_fail@plt+0x39e8>
   14808:	mov	lr, #0
   1480c:	cmp	r8, #0
   14810:	sbcs	r4, r9, #0
   14814:	blt	147bc <__assert_fail@plt+0x3930>
   14818:	cmp	r9, #0
   1481c:	bne	14838 <__assert_fail@plt+0x39ac>
   14820:	cmp	r3, #0
   14824:	bne	147c8 <__assert_fail@plt+0x393c>
   14828:	umull	r2, r3, r1, r2
   1482c:	mov	r6, r2
   14830:	mov	r4, r3
   14834:	b	147e8 <__assert_fail@plt+0x395c>
   14838:	cmp	r3, #0
   1483c:	bne	1484c <__assert_fail@plt+0x39c0>
   14840:	mov	sl, r9
   14844:	mov	fp, r2
   14848:	b	147d0 <__assert_fail@plt+0x3944>
   1484c:	mul	r4, r1, r3
   14850:	mla	r4, r2, r9, r4
   14854:	umull	r6, r7, r1, r2
   14858:	add	r4, r4, r7
   1485c:	mov	lr, #1
   14860:	b	147e8 <__assert_fail@plt+0x395c>
   14864:	mvn	r2, #0
   14868:	mvn	r3, #0
   1486c:	mov	lr, #1
   14870:	b	147f8 <__assert_fail@plt+0x396c>
   14874:	ldr	r1, [sp, #4]
   14878:	strd	r2, [r1]
   1487c:	add	sp, sp, #12
   14880:	ldrd	r4, [sp]
   14884:	ldrd	r6, [sp, #8]
   14888:	ldrd	r8, [sp, #16]
   1488c:	ldrd	sl, [sp, #24]
   14890:	add	sp, sp, #32
   14894:	pop	{pc}		; (ldr pc, [sp], #4)
   14898:	mov	r0, #0
   1489c:	b	1487c <__assert_fail@plt+0x39f0>
   148a0:	strd	r4, [sp, #-28]!	; 0xffffffe4
   148a4:	strd	r6, [sp, #8]
   148a8:	strd	r8, [sp, #16]
   148ac:	str	lr, [sp, #24]
   148b0:	sub	sp, sp, #20
   148b4:	cmp	r2, #36	; 0x24
   148b8:	bhi	1490c <__assert_fail@plt+0x3a80>
   148bc:	mov	r5, r0
   148c0:	mov	r6, r1
   148c4:	mov	r7, r2
   148c8:	mov	r9, r3
   148cc:	cmp	r1, #0
   148d0:	addeq	r6, sp, #12
   148d4:	bl	10dd8 <__errno_location@plt>
   148d8:	mov	r8, r0
   148dc:	mov	r3, #0
   148e0:	str	r3, [r0]
   148e4:	ldrb	r4, [r5]
   148e8:	bl	10d9c <__ctype_b_loc@plt>
   148ec:	ldr	r1, [r0]
   148f0:	mov	r2, r5
   148f4:	lsl	r3, r4, #1
   148f8:	ldrh	r3, [r1, r3]
   148fc:	tst	r3, #8192	; 0x2000
   14900:	beq	1492c <__assert_fail@plt+0x3aa0>
   14904:	ldrb	r4, [r2, #1]!
   14908:	b	148f4 <__assert_fail@plt+0x3a68>
   1490c:	movw	r3, #23796	; 0x5cf4
   14910:	movt	r3, #1
   14914:	mov	r2, #85	; 0x55
   14918:	movw	r1, #23808	; 0x5d00
   1491c:	movt	r1, #1
   14920:	movw	r0, #23824	; 0x5d10
   14924:	movt	r0, #1
   14928:	bl	10e8c <__assert_fail@plt>
   1492c:	cmp	r4, #45	; 0x2d
   14930:	moveq	r4, #4
   14934:	beq	14ac8 <__assert_fail@plt+0x3c3c>
   14938:	mov	r3, #0
   1493c:	mov	r2, r7
   14940:	mov	r1, r6
   14944:	mov	r0, r5
   14948:	bl	10c94 <__strtoull_internal@plt>
   1494c:	strd	r0, [sp]
   14950:	ldr	r7, [r6]
   14954:	cmp	r7, r5
   14958:	beq	1497c <__assert_fail@plt+0x3af0>
   1495c:	ldr	r3, [r8]
   14960:	cmp	r3, #0
   14964:	beq	14aa0 <__assert_fail@plt+0x3c14>
   14968:	cmp	r3, #34	; 0x22
   1496c:	moveq	r4, #1
   14970:	beq	14aa4 <__assert_fail@plt+0x3c18>
   14974:	mov	r4, #4
   14978:	b	14ac8 <__assert_fail@plt+0x3c3c>
   1497c:	ldr	r3, [sp, #48]	; 0x30
   14980:	cmp	r3, #0
   14984:	beq	14de0 <__assert_fail@plt+0x3f54>
   14988:	ldrb	r1, [r5]
   1498c:	cmp	r1, #0
   14990:	moveq	r4, #4
   14994:	beq	14ac8 <__assert_fail@plt+0x3c3c>
   14998:	mov	r0, r3
   1499c:	bl	10dcc <strchr@plt>
   149a0:	cmp	r0, #0
   149a4:	beq	14de8 <__assert_fail@plt+0x3f5c>
   149a8:	mov	r2, #1
   149ac:	mov	r3, #0
   149b0:	strd	r2, [sp]
   149b4:	ldrb	r5, [r7]
   149b8:	mov	r4, #0
   149bc:	mov	r1, r5
   149c0:	ldr	r0, [sp, #48]	; 0x30
   149c4:	bl	10dcc <strchr@plt>
   149c8:	cmp	r0, #0
   149cc:	beq	14ae4 <__assert_fail@plt+0x3c58>
   149d0:	sub	r3, r5, #69	; 0x45
   149d4:	cmp	r3, #47	; 0x2f
   149d8:	ldrls	pc, [pc, r3, lsl #2]
   149dc:	b	14c30 <__assert_fail@plt+0x3da4>
   149e0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149e4:	andeq	r4, r1, r0, lsr ip
   149e8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149ec:	andeq	r4, r1, r0, lsr ip
   149f0:	andeq	r4, r1, r0, lsr ip
   149f4:	andeq	r4, r1, r0, lsr ip
   149f8:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   149fc:	andeq	r4, r1, r0, lsr ip
   14a00:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a04:	andeq	r4, r1, r0, lsr ip
   14a08:	andeq	r4, r1, r0, lsr ip
   14a0c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a10:	andeq	r4, r1, r0, lsr ip
   14a14:	andeq	r4, r1, r0, lsr ip
   14a18:	andeq	r4, r1, r0, lsr ip
   14a1c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a20:	andeq	r4, r1, r0, lsr ip
   14a24:	andeq	r4, r1, r0, lsr ip
   14a28:	andeq	r4, r1, r0, lsr ip
   14a2c:	andeq	r4, r1, r0, lsr ip
   14a30:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a34:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a38:	andeq	r4, r1, r0, lsr ip
   14a3c:	andeq	r4, r1, r0, lsr ip
   14a40:	andeq	r4, r1, r0, lsr ip
   14a44:	andeq	r4, r1, r0, lsr ip
   14a48:	andeq	r4, r1, r0, lsr ip
   14a4c:	andeq	r4, r1, r0, lsr ip
   14a50:	andeq	r4, r1, r0, lsr ip
   14a54:	andeq	r4, r1, r0, lsr ip
   14a58:	andeq	r4, r1, r0, lsr ip
   14a5c:	andeq	r4, r1, r0, lsr ip
   14a60:	andeq	r4, r1, r0, lsr ip
   14a64:	andeq	r4, r1, r0, lsr ip
   14a68:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a6c:	andeq	r4, r1, r0, lsr ip
   14a70:	andeq	r4, r1, r0, lsr ip
   14a74:	andeq	r4, r1, r0, lsr ip
   14a78:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a7c:	andeq	r4, r1, r0, lsr ip
   14a80:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14a84:	andeq	r4, r1, r0, lsr ip
   14a88:	andeq	r4, r1, r0, lsr ip
   14a8c:	andeq	r4, r1, r0, lsr ip
   14a90:	andeq	r4, r1, r0, lsr ip
   14a94:	andeq	r4, r1, r0, lsr ip
   14a98:	andeq	r4, r1, r0, lsr ip
   14a9c:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14aa0:	mov	r4, #0
   14aa4:	ldr	r3, [sp, #48]	; 0x30
   14aa8:	cmp	r3, #0
   14aac:	strdeq	r0, [r9]
   14ab0:	beq	14ac8 <__assert_fail@plt+0x3c3c>
   14ab4:	ldrb	r5, [r7]
   14ab8:	cmp	r5, #0
   14abc:	bne	149bc <__assert_fail@plt+0x3b30>
   14ac0:	ldrd	r2, [sp]
   14ac4:	strd	r2, [r9]
   14ac8:	mov	r0, r4
   14acc:	add	sp, sp, #20
   14ad0:	ldrd	r4, [sp]
   14ad4:	ldrd	r6, [sp, #8]
   14ad8:	ldrd	r8, [sp, #16]
   14adc:	add	sp, sp, #24
   14ae0:	pop	{pc}		; (ldr pc, [sp], #4)
   14ae4:	ldrd	r2, [sp]
   14ae8:	strd	r2, [r9]
   14aec:	orr	r4, r4, #2
   14af0:	b	14ac8 <__assert_fail@plt+0x3c3c>
   14af4:	mov	r1, #48	; 0x30
   14af8:	ldr	r0, [sp, #48]	; 0x30
   14afc:	bl	10dcc <strchr@plt>
   14b00:	cmp	r0, #0
   14b04:	beq	14c3c <__assert_fail@plt+0x3db0>
   14b08:	ldrb	r3, [r7, #1]
   14b0c:	cmp	r3, #68	; 0x44
   14b10:	beq	14c48 <__assert_fail@plt+0x3dbc>
   14b14:	cmp	r3, #105	; 0x69
   14b18:	beq	14c18 <__assert_fail@plt+0x3d8c>
   14b1c:	cmp	r3, #66	; 0x42
   14b20:	moveq	r7, #2
   14b24:	movne	r7, #1
   14b28:	moveq	r1, #1000	; 0x3e8
   14b2c:	movne	r1, #1024	; 0x400
   14b30:	sub	r5, r5, #66	; 0x42
   14b34:	cmp	r5, #53	; 0x35
   14b38:	ldrls	pc, [pc, r5, lsl #2]
   14b3c:	b	14dac <__assert_fail@plt+0x3f20>
   14b40:	muleq	r1, ip, ip
   14b44:	andeq	r4, r1, ip, lsr #27
   14b48:	andeq	r4, r1, ip, lsr #27
   14b4c:	andeq	r4, r1, r4, ror #25
   14b50:	andeq	r4, r1, ip, lsr #27
   14b54:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14b58:	andeq	r4, r1, ip, lsr #27
   14b5c:	andeq	r4, r1, ip, lsr #27
   14b60:	andeq	r4, r1, ip, lsr #27
   14b64:	andeq	r4, r1, r4, lsl #26
   14b68:	andeq	r4, r1, ip, lsr #27
   14b6c:	andeq	r4, r1, r4, lsl sp
   14b70:	andeq	r4, r1, ip, lsr #27
   14b74:	andeq	r4, r1, ip, lsr #27
   14b78:	andeq	r4, r1, r4, lsr #26
   14b7c:	andeq	r4, r1, ip, lsr #27
   14b80:	andeq	r4, r1, ip, lsr #27
   14b84:	andeq	r4, r1, ip, lsr #27
   14b88:	andeq	r4, r1, r4, lsr sp
   14b8c:	andeq	r4, r1, ip, lsr #27
   14b90:	andeq	r4, r1, ip, lsr #27
   14b94:	andeq	r4, r1, ip, lsr #27
   14b98:	andeq	r4, r1, ip, lsr #27
   14b9c:	andeq	r4, r1, ip, lsl #27
   14ba0:	muleq	r1, ip, sp
   14ba4:	andeq	r4, r1, ip, lsr #27
   14ba8:	andeq	r4, r1, ip, lsr #27
   14bac:	andeq	r4, r1, ip, lsr #27
   14bb0:	andeq	r4, r1, ip, lsr #27
   14bb4:	andeq	r4, r1, ip, lsr #27
   14bb8:	andeq	r4, r1, ip, lsr #27
   14bbc:	andeq	r4, r1, ip, lsr #27
   14bc0:	andeq	r4, r1, r4, asr ip
   14bc4:			; <UNDEFINED> instruction: 0x00014dbc
   14bc8:	andeq	r4, r1, ip, lsr #27
   14bcc:	andeq	r4, r1, ip, lsr #27
   14bd0:	andeq	r4, r1, ip, lsr #27
   14bd4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14bd8:	andeq	r4, r1, ip, lsr #27
   14bdc:	andeq	r4, r1, ip, lsr #27
   14be0:	andeq	r4, r1, ip, lsr #27
   14be4:	andeq	r4, r1, r4, lsl #26
   14be8:	andeq	r4, r1, ip, lsr #27
   14bec:	andeq	r4, r1, r4, lsl sp
   14bf0:	andeq	r4, r1, ip, lsr #27
   14bf4:	andeq	r4, r1, ip, lsr #27
   14bf8:	andeq	r4, r1, ip, lsr #27
   14bfc:	andeq	r4, r1, ip, lsr #27
   14c00:	andeq	r4, r1, ip, lsr #27
   14c04:	andeq	r4, r1, ip, lsr #27
   14c08:	andeq	r4, r1, r4, lsr sp
   14c0c:	andeq	r4, r1, ip, lsr #27
   14c10:	andeq	r4, r1, ip, lsr #27
   14c14:	andeq	r4, r1, r4, asr #26
   14c18:	ldrb	r3, [r7, #2]
   14c1c:	cmp	r3, #66	; 0x42
   14c20:	movne	r7, #1
   14c24:	moveq	r7, #3
   14c28:	mov	r1, #1024	; 0x400
   14c2c:	b	14b30 <__assert_fail@plt+0x3ca4>
   14c30:	mov	r7, #1
   14c34:	mov	r1, #1024	; 0x400
   14c38:	b	14b30 <__assert_fail@plt+0x3ca4>
   14c3c:	mov	r7, #1
   14c40:	mov	r1, #1024	; 0x400
   14c44:	b	14b30 <__assert_fail@plt+0x3ca4>
   14c48:	mov	r7, #2
   14c4c:	mov	r1, #1000	; 0x3e8
   14c50:	b	14b30 <__assert_fail@plt+0x3ca4>
   14c54:	ldr	r3, [sp]
   14c58:	ldr	ip, [sp, #4]
   14c5c:	lsl	r2, ip, #9
   14c60:	orr	r2, r2, r3, lsr #23
   14c64:	lsl	r3, r3, #9
   14c68:	mov	r0, #0
   14c6c:	mov	r1, r0
   14c70:	lsr	r0, ip, #23
   14c74:	orrs	r1, r0, r1
   14c78:	streq	r3, [sp]
   14c7c:	streq	r2, [sp, #4]
   14c80:	moveq	r0, #0
   14c84:	beq	14dc0 <__assert_fail@plt+0x3f34>
   14c88:	mvn	r2, #0
   14c8c:	mvn	r3, #0
   14c90:	strd	r2, [sp]
   14c94:	mov	r0, #1
   14c98:	b	14dc0 <__assert_fail@plt+0x3f34>
   14c9c:	ldr	r3, [sp]
   14ca0:	ldr	ip, [sp, #4]
   14ca4:	lsl	r2, ip, #10
   14ca8:	orr	r2, r2, r3, lsr #22
   14cac:	lsl	r3, r3, #10
   14cb0:	mov	r0, #0
   14cb4:	mov	r1, r0
   14cb8:	lsr	r0, ip, #22
   14cbc:	orrs	r1, r0, r1
   14cc0:	streq	r3, [sp]
   14cc4:	streq	r2, [sp, #4]
   14cc8:	moveq	r0, #0
   14ccc:	beq	14dc0 <__assert_fail@plt+0x3f34>
   14cd0:	mvn	r2, #0
   14cd4:	mvn	r3, #0
   14cd8:	strd	r2, [sp]
   14cdc:	mov	r0, #1
   14ce0:	b	14dc0 <__assert_fail@plt+0x3f34>
   14ce4:	mov	r2, #6
   14ce8:	mov	r0, sp
   14cec:	bl	1477c <__assert_fail@plt+0x38f0>
   14cf0:	b	14dc0 <__assert_fail@plt+0x3f34>
   14cf4:	mov	r2, #3
   14cf8:	mov	r0, sp
   14cfc:	bl	1477c <__assert_fail@plt+0x38f0>
   14d00:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d04:	mov	r2, #1
   14d08:	mov	r0, sp
   14d0c:	bl	1477c <__assert_fail@plt+0x38f0>
   14d10:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d14:	mov	r2, #2
   14d18:	mov	r0, sp
   14d1c:	bl	1477c <__assert_fail@plt+0x38f0>
   14d20:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d24:	mov	r2, #5
   14d28:	mov	r0, sp
   14d2c:	bl	1477c <__assert_fail@plt+0x38f0>
   14d30:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d34:	mov	r2, #4
   14d38:	mov	r0, sp
   14d3c:	bl	1477c <__assert_fail@plt+0x38f0>
   14d40:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d44:	ldr	r3, [sp]
   14d48:	ldr	r2, [sp, #4]
   14d4c:	adds	r3, r3, r3
   14d50:	adc	r2, r2, r2
   14d54:	mov	r1, #0
   14d58:	mov	r0, r1
   14d5c:	ldr	r1, [sp, #4]
   14d60:	lsr	r1, r1, #31
   14d64:	orrs	r1, r1, r0
   14d68:	streq	r3, [sp]
   14d6c:	streq	r2, [sp, #4]
   14d70:	moveq	r0, #0
   14d74:	beq	14dc0 <__assert_fail@plt+0x3f34>
   14d78:	mvn	r2, #0
   14d7c:	mvn	r3, #0
   14d80:	strd	r2, [sp]
   14d84:	mov	r0, #1
   14d88:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d8c:	mov	r2, #8
   14d90:	mov	r0, sp
   14d94:	bl	1477c <__assert_fail@plt+0x38f0>
   14d98:	b	14dc0 <__assert_fail@plt+0x3f34>
   14d9c:	mov	r2, #7
   14da0:	mov	r0, sp
   14da4:	bl	1477c <__assert_fail@plt+0x38f0>
   14da8:	b	14dc0 <__assert_fail@plt+0x3f34>
   14dac:	ldrd	r2, [sp]
   14db0:	strd	r2, [r9]
   14db4:	orr	r4, r4, #2
   14db8:	b	14ac8 <__assert_fail@plt+0x3c3c>
   14dbc:	mov	r0, #0
   14dc0:	orr	r4, r4, r0
   14dc4:	ldr	r3, [r6]
   14dc8:	add	r2, r3, r7
   14dcc:	str	r2, [r6]
   14dd0:	ldrb	r3, [r3, r7]
   14dd4:	cmp	r3, #0
   14dd8:	orrne	r4, r4, #2
   14ddc:	b	14ac0 <__assert_fail@plt+0x3c34>
   14de0:	mov	r4, #4
   14de4:	b	14ac8 <__assert_fail@plt+0x3c3c>
   14de8:	mov	r4, #4
   14dec:	b	14ac8 <__assert_fail@plt+0x3c3c>
   14df0:	strd	r4, [sp, #-16]!
   14df4:	str	r6, [sp, #8]
   14df8:	str	lr, [sp, #12]
   14dfc:	cmp	r1, #0
   14e00:	cmpne	r0, #0
   14e04:	beq	14e40 <__assert_fail@plt+0x3fb4>
   14e08:	mov	r2, r0
   14e0c:	mov	r3, r1
   14e10:	umull	r4, r5, r0, r1
   14e14:	adds	r1, r5, #0
   14e18:	movne	r1, #1
   14e1c:	cmp	r4, #0
   14e20:	movlt	r1, #1
   14e24:	cmp	r1, #0
   14e28:	beq	14e48 <__assert_fail@plt+0x3fbc>
   14e2c:	bl	10dd8 <__errno_location@plt>
   14e30:	mov	r3, #12
   14e34:	str	r3, [r0]
   14e38:	mov	r0, #0
   14e3c:	b	14e54 <__assert_fail@plt+0x3fc8>
   14e40:	mov	r3, #1
   14e44:	mov	r2, r3
   14e48:	mov	r1, r3
   14e4c:	mov	r0, r2
   14e50:	bl	10c40 <calloc@plt>
   14e54:	ldrd	r4, [sp]
   14e58:	ldr	r6, [sp, #8]
   14e5c:	add	sp, sp, #12
   14e60:	pop	{pc}		; (ldr pc, [sp], #4)
   14e64:	str	r4, [sp, #-8]!
   14e68:	str	lr, [sp, #4]
   14e6c:	cmp	r0, #0
   14e70:	beq	14e8c <__assert_fail@plt+0x4000>
   14e74:	bge	14e90 <__assert_fail@plt+0x4004>
   14e78:	bl	10dd8 <__errno_location@plt>
   14e7c:	mov	r3, #12
   14e80:	str	r3, [r0]
   14e84:	mov	r0, #0
   14e88:	b	14e94 <__assert_fail@plt+0x4008>
   14e8c:	mov	r0, #1
   14e90:	bl	10d60 <malloc@plt>
   14e94:	ldr	r4, [sp]
   14e98:	add	sp, sp, #4
   14e9c:	pop	{pc}		; (ldr pc, [sp], #4)
   14ea0:	str	r4, [sp, #-8]!
   14ea4:	str	lr, [sp, #4]
   14ea8:	cmp	r0, #0
   14eac:	beq	14ed0 <__assert_fail@plt+0x4044>
   14eb0:	cmp	r1, #0
   14eb4:	beq	14edc <__assert_fail@plt+0x4050>
   14eb8:	cmp	r1, #0
   14ebc:	blt	14ee8 <__assert_fail@plt+0x405c>
   14ec0:	bl	10ce8 <realloc@plt>
   14ec4:	ldr	r4, [sp]
   14ec8:	add	sp, sp, #4
   14ecc:	pop	{pc}		; (ldr pc, [sp], #4)
   14ed0:	mov	r0, r1
   14ed4:	bl	14e64 <__assert_fail@plt+0x3fd8>
   14ed8:	b	14ec4 <__assert_fail@plt+0x4038>
   14edc:	bl	150b4 <__assert_fail@plt+0x4228>
   14ee0:	mov	r0, #0
   14ee4:	b	14ec4 <__assert_fail@plt+0x4038>
   14ee8:	bl	10dd8 <__errno_location@plt>
   14eec:	mov	r3, #12
   14ef0:	str	r3, [r0]
   14ef4:	mov	r0, #0
   14ef8:	b	14ec4 <__assert_fail@plt+0x4038>
   14efc:	strd	r4, [sp, #-16]!
   14f00:	str	r6, [sp, #8]
   14f04:	str	lr, [sp, #12]
   14f08:	mov	r5, r0
   14f0c:	bl	10d30 <__fpending@plt>
   14f10:	mov	r6, r0
   14f14:	ldr	r4, [r5]
   14f18:	and	r4, r4, #32
   14f1c:	mov	r0, r5
   14f20:	bl	14f88 <__assert_fail@plt+0x40fc>
   14f24:	cmp	r4, #0
   14f28:	bne	14f5c <__assert_fail@plt+0x40d0>
   14f2c:	cmp	r0, #0
   14f30:	beq	14f4c <__assert_fail@plt+0x40c0>
   14f34:	cmp	r6, #0
   14f38:	bne	14f78 <__assert_fail@plt+0x40ec>
   14f3c:	bl	10dd8 <__errno_location@plt>
   14f40:	ldr	r0, [r0]
   14f44:	subs	r0, r0, #9
   14f48:	mvnne	r0, #0
   14f4c:	ldrd	r4, [sp]
   14f50:	ldr	r6, [sp, #8]
   14f54:	add	sp, sp, #12
   14f58:	pop	{pc}		; (ldr pc, [sp], #4)
   14f5c:	cmp	r0, #0
   14f60:	bne	14f80 <__assert_fail@plt+0x40f4>
   14f64:	bl	10dd8 <__errno_location@plt>
   14f68:	mov	r3, #0
   14f6c:	str	r3, [r0]
   14f70:	mvn	r0, #0
   14f74:	b	14f4c <__assert_fail@plt+0x40c0>
   14f78:	mvn	r0, #0
   14f7c:	b	14f4c <__assert_fail@plt+0x40c0>
   14f80:	mvn	r0, #0
   14f84:	b	14f4c <__assert_fail@plt+0x40c0>
   14f88:	strd	r4, [sp, #-16]!
   14f8c:	str	r6, [sp, #8]
   14f90:	str	lr, [sp, #12]
   14f94:	sub	sp, sp, #8
   14f98:	mov	r4, r0
   14f9c:	bl	10e08 <fileno@plt>
   14fa0:	cmp	r0, #0
   14fa4:	blt	1501c <__assert_fail@plt+0x4190>
   14fa8:	mov	r0, r4
   14fac:	bl	10d78 <__freading@plt>
   14fb0:	cmp	r0, #0
   14fb4:	beq	14fe8 <__assert_fail@plt+0x415c>
   14fb8:	mov	r0, r4
   14fbc:	bl	10e08 <fileno@plt>
   14fc0:	mov	r3, #1
   14fc4:	str	r3, [sp]
   14fc8:	mov	r2, #0
   14fcc:	mov	r3, #0
   14fd0:	bl	10d18 <lseek64@plt>
   14fd4:	mvn	r2, #0
   14fd8:	mvn	r3, #0
   14fdc:	cmp	r1, r3
   14fe0:	cmpeq	r0, r2
   14fe4:	beq	15028 <__assert_fail@plt+0x419c>
   14fe8:	mov	r0, r4
   14fec:	bl	15044 <__assert_fail@plt+0x41b8>
   14ff0:	cmp	r0, #0
   14ff4:	beq	15028 <__assert_fail@plt+0x419c>
   14ff8:	bl	10dd8 <__errno_location@plt>
   14ffc:	mov	r5, r0
   15000:	ldr	r6, [r0]
   15004:	mov	r0, r4
   15008:	bl	10e20 <fclose@plt>
   1500c:	cmp	r6, #0
   15010:	strne	r6, [r5]
   15014:	mvnne	r0, #0
   15018:	b	15030 <__assert_fail@plt+0x41a4>
   1501c:	mov	r0, r4
   15020:	bl	10e20 <fclose@plt>
   15024:	b	15030 <__assert_fail@plt+0x41a4>
   15028:	mov	r0, r4
   1502c:	bl	10e20 <fclose@plt>
   15030:	add	sp, sp, #8
   15034:	ldrd	r4, [sp]
   15038:	ldr	r6, [sp, #8]
   1503c:	add	sp, sp, #12
   15040:	pop	{pc}		; (ldr pc, [sp], #4)
   15044:	str	r4, [sp, #-8]!
   15048:	str	lr, [sp, #4]
   1504c:	sub	sp, sp, #8
   15050:	subs	r4, r0, #0
   15054:	beq	15068 <__assert_fail@plt+0x41dc>
   15058:	mov	r0, r4
   1505c:	bl	10d78 <__freading@plt>
   15060:	cmp	r0, #0
   15064:	bne	15080 <__assert_fail@plt+0x41f4>
   15068:	mov	r0, r4
   1506c:	bl	10c64 <fflush@plt>
   15070:	add	sp, sp, #8
   15074:	ldr	r4, [sp]
   15078:	add	sp, sp, #4
   1507c:	pop	{pc}		; (ldr pc, [sp], #4)
   15080:	ldr	r3, [r4]
   15084:	tst	r3, #256	; 0x100
   15088:	bne	15098 <__assert_fail@plt+0x420c>
   1508c:	mov	r0, r4
   15090:	bl	10c64 <fflush@plt>
   15094:	b	15070 <__assert_fail@plt+0x41e4>
   15098:	mov	r3, #1
   1509c:	str	r3, [sp]
   150a0:	mov	r2, #0
   150a4:	mov	r3, #0
   150a8:	mov	r0, r4
   150ac:	bl	15114 <__assert_fail@plt+0x4288>
   150b0:	b	1508c <__assert_fail@plt+0x4200>
   150b4:	strd	r4, [sp, #-12]!
   150b8:	str	lr, [sp, #8]
   150bc:	sub	sp, sp, #12
   150c0:	mov	r5, r0
   150c4:	bl	10dd8 <__errno_location@plt>
   150c8:	mov	r4, r0
   150cc:	ldr	r3, [r0]
   150d0:	str	r3, [sp]
   150d4:	str	r3, [sp, #4]
   150d8:	mov	r3, #0
   150dc:	str	r3, [r0]
   150e0:	mov	r0, r5
   150e4:	bl	10c70 <free@plt>
   150e8:	ldr	r3, [r4]
   150ec:	clz	r3, r3
   150f0:	lsr	r3, r3, #5
   150f4:	add	r2, sp, #8
   150f8:	add	r3, r2, r3, lsl #2
   150fc:	ldr	r3, [r3, #-8]
   15100:	str	r3, [r4]
   15104:	add	sp, sp, #12
   15108:	ldrd	r4, [sp]
   1510c:	add	sp, sp, #8
   15110:	pop	{pc}		; (ldr pc, [sp], #4)
   15114:	str	r4, [sp, #-16]!
   15118:	strd	r6, [sp, #4]
   1511c:	str	lr, [sp, #12]
   15120:	sub	sp, sp, #8
   15124:	mov	r4, r0
   15128:	mov	r6, r2
   1512c:	mov	r7, r3
   15130:	ldr	r2, [r0, #8]
   15134:	ldr	r3, [r0, #4]
   15138:	cmp	r2, r3
   1513c:	beq	1516c <__assert_fail@plt+0x42e0>
   15140:	ldr	r3, [sp, #24]
   15144:	str	r3, [sp]
   15148:	mov	r2, r6
   1514c:	mov	r3, r7
   15150:	mov	r0, r4
   15154:	bl	10e2c <fseeko64@plt>
   15158:	add	sp, sp, #8
   1515c:	ldr	r4, [sp]
   15160:	ldrd	r6, [sp, #4]
   15164:	add	sp, sp, #12
   15168:	pop	{pc}		; (ldr pc, [sp], #4)
   1516c:	ldr	r2, [r0, #20]
   15170:	ldr	r3, [r0, #16]
   15174:	cmp	r2, r3
   15178:	bne	15140 <__assert_fail@plt+0x42b4>
   1517c:	ldr	r3, [r0, #36]	; 0x24
   15180:	cmp	r3, #0
   15184:	bne	15140 <__assert_fail@plt+0x42b4>
   15188:	bl	10e08 <fileno@plt>
   1518c:	ldr	r3, [sp, #24]
   15190:	str	r3, [sp]
   15194:	mov	r2, r6
   15198:	mov	r3, r7
   1519c:	bl	10d18 <lseek64@plt>
   151a0:	mvn	r2, #0
   151a4:	mvn	r3, #0
   151a8:	cmp	r1, r3
   151ac:	cmpeq	r0, r2
   151b0:	beq	151cc <__assert_fail@plt+0x4340>
   151b4:	ldr	r3, [r4]
   151b8:	bic	r3, r3, #16
   151bc:	str	r3, [r4]
   151c0:	strd	r0, [r4, #80]	; 0x50
   151c4:	mov	r0, #0
   151c8:	b	15158 <__assert_fail@plt+0x42cc>
   151cc:	mvn	r0, #0
   151d0:	b	15158 <__assert_fail@plt+0x42cc>
   151d4:	str	r4, [sp, #-8]!
   151d8:	str	lr, [sp, #4]
   151dc:	mov	r0, #14
   151e0:	bl	10e50 <nl_langinfo@plt>
   151e4:	cmp	r0, #0
   151e8:	beq	1520c <__assert_fail@plt+0x4380>
   151ec:	ldrb	r2, [r0]
   151f0:	movw	r3, #23864	; 0x5d38
   151f4:	movt	r3, #1
   151f8:	cmp	r2, #0
   151fc:	moveq	r0, r3
   15200:	ldr	r4, [sp]
   15204:	add	sp, sp, #4
   15208:	pop	{pc}		; (ldr pc, [sp], #4)
   1520c:	movw	r0, #23864	; 0x5d38
   15210:	movt	r0, #1
   15214:	b	15200 <__assert_fail@plt+0x4374>
   15218:	strd	r4, [sp, #-20]!	; 0xffffffec
   1521c:	strd	r6, [sp, #8]
   15220:	str	lr, [sp, #16]
   15224:	sub	sp, sp, #12
   15228:	mov	r7, r1
   1522c:	mov	r5, r2
   15230:	subs	r6, r0, #0
   15234:	addeq	r6, sp, #4
   15238:	mov	r0, r6
   1523c:	bl	10d3c <mbrtowc@plt>
   15240:	mov	r4, r0
   15244:	cmp	r5, #0
   15248:	cmnne	r0, #3
   1524c:	bhi	15268 <__assert_fail@plt+0x43dc>
   15250:	mov	r0, r4
   15254:	add	sp, sp, #12
   15258:	ldrd	r4, [sp]
   1525c:	ldrd	r6, [sp, #8]
   15260:	add	sp, sp, #16
   15264:	pop	{pc}		; (ldr pc, [sp], #4)
   15268:	mov	r0, #0
   1526c:	bl	152c4 <__assert_fail@plt+0x4438>
   15270:	cmp	r0, #0
   15274:	bne	15250 <__assert_fail@plt+0x43c4>
   15278:	ldrb	r3, [r7]
   1527c:	str	r3, [r6]
   15280:	mov	r4, #1
   15284:	b	15250 <__assert_fail@plt+0x43c4>
   15288:	str	r4, [sp, #-8]!
   1528c:	str	lr, [sp, #4]
   15290:	umull	r2, r3, r1, r2
   15294:	cmp	r3, #0
   15298:	bne	152b0 <__assert_fail@plt+0x4424>
   1529c:	mov	r1, r2
   152a0:	bl	14ea0 <__assert_fail@plt+0x4014>
   152a4:	ldr	r4, [sp]
   152a8:	add	sp, sp, #4
   152ac:	pop	{pc}		; (ldr pc, [sp], #4)
   152b0:	bl	10dd8 <__errno_location@plt>
   152b4:	mov	r3, #12
   152b8:	str	r3, [r0]
   152bc:	mov	r0, #0
   152c0:	b	152a4 <__assert_fail@plt+0x4418>
   152c4:	push	{lr}		; (str lr, [sp, #-4]!)
   152c8:	sub	sp, sp, #268	; 0x10c
   152cc:	movw	r2, #257	; 0x101
   152d0:	add	r1, sp, #4
   152d4:	bl	15320 <__assert_fail@plt+0x4494>
   152d8:	cmp	r0, #0
   152dc:	movne	r0, #0
   152e0:	bne	15318 <__assert_fail@plt+0x448c>
   152e4:	movw	r1, #23872	; 0x5d40
   152e8:	movt	r1, #1
   152ec:	add	r0, sp, #4
   152f0:	bl	10c58 <strcmp@plt>
   152f4:	cmp	r0, #0
   152f8:	beq	15314 <__assert_fail@plt+0x4488>
   152fc:	movw	r1, #23876	; 0x5d44
   15300:	movt	r1, #1
   15304:	add	r0, sp, #4
   15308:	bl	10c58 <strcmp@plt>
   1530c:	adds	r0, r0, #0
   15310:	movne	r0, #1
   15314:	and	r0, r0, #1
   15318:	add	sp, sp, #268	; 0x10c
   1531c:	pop	{pc}		; (ldr pc, [sp], #4)
   15320:	strd	r4, [sp, #-16]!
   15324:	str	r6, [sp, #8]
   15328:	str	lr, [sp, #12]
   1532c:	mov	r6, r1
   15330:	mov	r4, r2
   15334:	mov	r1, #0
   15338:	bl	10e38 <setlocale@plt>
   1533c:	subs	r5, r0, #0
   15340:	beq	15384 <__assert_fail@plt+0x44f8>
   15344:	mov	r0, r5
   15348:	bl	10dc0 <strlen@plt>
   1534c:	cmp	r4, r0
   15350:	bhi	153a0 <__assert_fail@plt+0x4514>
   15354:	cmp	r4, #0
   15358:	moveq	r0, #34	; 0x22
   1535c:	beq	153b4 <__assert_fail@plt+0x4528>
   15360:	sub	r4, r4, #1
   15364:	mov	r2, r4
   15368:	mov	r1, r5
   1536c:	mov	r0, r6
   15370:	bl	10c88 <memcpy@plt>
   15374:	mov	r3, #0
   15378:	strb	r3, [r6, r4]
   1537c:	mov	r0, #34	; 0x22
   15380:	b	153b4 <__assert_fail@plt+0x4528>
   15384:	cmp	r4, #0
   15388:	moveq	r0, #22
   1538c:	beq	153b4 <__assert_fail@plt+0x4528>
   15390:	mov	r3, #0
   15394:	strb	r3, [r6]
   15398:	mov	r0, #22
   1539c:	b	153b4 <__assert_fail@plt+0x4528>
   153a0:	add	r2, r0, #1
   153a4:	mov	r1, r5
   153a8:	mov	r0, r6
   153ac:	bl	10c88 <memcpy@plt>
   153b0:	mov	r0, #0
   153b4:	ldrd	r4, [sp]
   153b8:	ldr	r6, [sp, #8]
   153bc:	add	sp, sp, #12
   153c0:	pop	{pc}		; (ldr pc, [sp], #4)
   153c4:	str	r4, [sp, #-8]!
   153c8:	str	lr, [sp, #4]
   153cc:	mov	r1, #0
   153d0:	bl	10e38 <setlocale@plt>
   153d4:	ldr	r4, [sp]
   153d8:	add	sp, sp, #4
   153dc:	pop	{pc}		; (ldr pc, [sp], #4)
   153e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   153e4:	mov	r7, r0
   153e8:	ldr	r6, [pc, #72]	; 15438 <__assert_fail@plt+0x45ac>
   153ec:	ldr	r5, [pc, #72]	; 1543c <__assert_fail@plt+0x45b0>
   153f0:	add	r6, pc, r6
   153f4:	add	r5, pc, r5
   153f8:	sub	r6, r6, r5
   153fc:	mov	r8, r1
   15400:	mov	r9, r2
   15404:	bl	10c20 <calloc@plt-0x20>
   15408:	asrs	r6, r6, #2
   1540c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   15410:	mov	r4, #0
   15414:	add	r4, r4, #1
   15418:	ldr	r3, [r5], #4
   1541c:	mov	r2, r9
   15420:	mov	r1, r8
   15424:	mov	r0, r7
   15428:	blx	r3
   1542c:	cmp	r6, r4
   15430:	bne	15414 <__assert_fail@plt+0x4588>
   15434:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15438:	andeq	r0, r1, ip, lsl fp
   1543c:	andeq	r0, r1, r4, lsl fp
   15440:	bx	lr
   15444:	ldr	r3, [pc, #12]	; 15458 <__assert_fail@plt+0x45cc>
   15448:	mov	r1, #0
   1544c:	add	r3, pc, r3
   15450:	ldr	r2, [r3]
   15454:	b	10de4 <__cxa_atexit@plt>
   15458:	andeq	r0, r1, r8, lsl #25

Disassembly of section .fini:

0001545c <.fini>:
   1545c:	push	{r3, lr}
   15460:	pop	{r3, pc}
