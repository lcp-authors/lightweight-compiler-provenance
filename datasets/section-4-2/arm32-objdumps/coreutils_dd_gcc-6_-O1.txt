
../repos/coreutils/src/dd:     file format elf32-littlearm


Disassembly of section .init:

0001112c <.init>:
   1112c:	push	{r3, lr}
   11130:	bl	11524 <__assert_fail@plt+0x48>
   11134:	pop	{r3, pc}

Disassembly of section .plt:

00011138 <calloc@plt-0x14>:
   11138:	push	{lr}		; (str lr, [sp, #-4]!)
   1113c:	ldr	lr, [pc, #4]	; 11148 <calloc@plt-0x4>
   11140:	add	lr, pc, lr
   11144:	ldr	pc, [lr, #8]!
   11148:			; <UNDEFINED> instruction: 0x0001ceb8

0001114c <calloc@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #28, 20	; 0x1c000
   11154:	ldr	pc, [ip, #3768]!	; 0xeb8

00011158 <fputs_unlocked@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #28, 20	; 0x1c000
   11160:	ldr	pc, [ip, #3760]!	; 0xeb0

00011164 <raise@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #28, 20	; 0x1c000
   1116c:	ldr	pc, [ip, #3752]!	; 0xea8

00011170 <fsync@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #28, 20	; 0x1c000
   11178:	ldr	pc, [ip, #3744]!	; 0xea0

0001117c <strcmp@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #28, 20	; 0x1c000
   11184:	ldr	pc, [ip, #3736]!	; 0xe98

00011188 <posix_fadvise64@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #28, 20	; 0x1c000
   11190:	ldr	pc, [ip, #3728]!	; 0xe90

00011194 <read@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #28, 20	; 0x1c000
   1119c:	ldr	pc, [ip, #3720]!	; 0xe88

000111a0 <fflush@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #28, 20	; 0x1c000
   111a8:	ldr	pc, [ip, #3712]!	; 0xe80

000111ac <sigprocmask@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #28, 20	; 0x1c000
   111b4:	ldr	pc, [ip, #3704]!	; 0xe78

000111b8 <memmove@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #28, 20	; 0x1c000
   111c0:	ldr	pc, [ip, #3696]!	; 0xe70

000111c4 <free@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #28, 20	; 0x1c000
   111cc:	ldr	pc, [ip, #3688]!	; 0xe68

000111d0 <clock_gettime@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #28, 20	; 0x1c000
   111d8:	ldr	pc, [ip, #3680]!	; 0xe60

000111dc <_exit@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #28, 20	; 0x1c000
   111e4:	ldr	pc, [ip, #3672]!	; 0xe58

000111e8 <memcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #28, 20	; 0x1c000
   111f0:	ldr	pc, [ip, #3664]!	; 0xe50

000111f4 <__strtoull_internal@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #28, 20	; 0x1c000
   111fc:	ldr	pc, [ip, #3656]!	; 0xe48

00011200 <mbsinit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #28, 20	; 0x1c000
   11208:	ldr	pc, [ip, #3648]!	; 0xe40

0001120c <ftruncate64@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #28, 20	; 0x1c000
   11214:	ldr	pc, [ip, #3640]!	; 0xe38

00011218 <memcmp@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #28, 20	; 0x1c000
   11220:	ldr	pc, [ip, #3632]!	; 0xe30

00011224 <fputc_unlocked@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #28, 20	; 0x1c000
   1122c:	ldr	pc, [ip, #3624]!	; 0xe28

00011230 <dcgettext@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #28, 20	; 0x1c000
   11238:	ldr	pc, [ip, #3616]!	; 0xe20

0001123c <dup2@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #28, 20	; 0x1c000
   11244:	ldr	pc, [ip, #3608]!	; 0xe18

00011248 <realloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #28, 20	; 0x1c000
   11250:	ldr	pc, [ip, #3600]!	; 0xe10

00011254 <sigismember@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #28, 20	; 0x1c000
   1125c:	ldr	pc, [ip, #3592]!	; 0xe08

00011260 <textdomain@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #28, 20	; 0x1c000
   11268:	ldr	pc, [ip, #3584]!	; 0xe00

0001126c <iswprint@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #28, 20	; 0x1c000
   11274:	ldr	pc, [ip, #3576]!	; 0xdf8

00011278 <__fxstat64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #28, 20	; 0x1c000
   11280:	ldr	pc, [ip, #3568]!	; 0xdf0

00011284 <sigaction@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #28, 20	; 0x1c000
   1128c:	ldr	pc, [ip, #3560]!	; 0xde8

00011290 <__memcpy_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #28, 20	; 0x1c000
   11298:	ldr	pc, [ip, #3552]!	; 0xde0

0001129c <fwrite@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #28, 20	; 0x1c000
   112a4:	ldr	pc, [ip, #3544]!	; 0xdd8

000112a8 <lseek64@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #28, 20	; 0x1c000
   112b0:	ldr	pc, [ip, #3536]!	; 0xdd0

000112b4 <__ctype_get_mb_cur_max@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #28, 20	; 0x1c000
   112bc:	ldr	pc, [ip, #3528]!	; 0xdc8

000112c0 <__fpending@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #28, 20	; 0x1c000
   112c8:	ldr	pc, [ip, #3520]!	; 0xdc0

000112cc <mbrtowc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #28, 20	; 0x1c000
   112d4:	ldr	pc, [ip, #3512]!	; 0xdb8

000112d8 <error@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #28, 20	; 0x1c000
   112e0:	ldr	pc, [ip, #3504]!	; 0xdb0

000112e4 <open64@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #28, 20	; 0x1c000
   112ec:	ldr	pc, [ip, #3496]!	; 0xda8

000112f0 <getenv@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #28, 20	; 0x1c000
   112f8:	ldr	pc, [ip, #3488]!	; 0xda0

000112fc <malloc@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #28, 20	; 0x1c000
   11304:	ldr	pc, [ip, #3480]!	; 0xd98

00011308 <error_at_line@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #28, 20	; 0x1c000
   11310:	ldr	pc, [ip, #3472]!	; 0xd90

00011314 <sigaddset@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #28, 20	; 0x1c000
   1131c:	ldr	pc, [ip, #3464]!	; 0xd88

00011320 <__libc_start_main@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #28, 20	; 0x1c000
   11328:	ldr	pc, [ip, #3456]!	; 0xd80

0001132c <__freading@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #28, 20	; 0x1c000
   11334:	ldr	pc, [ip, #3448]!	; 0xd78

00011338 <__ctype_tolower_loc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #28, 20	; 0x1c000
   11340:	ldr	pc, [ip, #3440]!	; 0xd70

00011344 <__ctype_toupper_loc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #28, 20	; 0x1c000
   1134c:	ldr	pc, [ip, #3432]!	; 0xd68

00011350 <__gmon_start__@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #28, 20	; 0x1c000
   11358:	ldr	pc, [ip, #3424]!	; 0xd60

0001135c <getopt_long@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #28, 20	; 0x1c000
   11364:	ldr	pc, [ip, #3416]!	; 0xd58

00011368 <__ctype_b_loc@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #28, 20	; 0x1c000
   11370:	ldr	pc, [ip, #3408]!	; 0xd50

00011374 <exit@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #28, 20	; 0x1c000
   1137c:	ldr	pc, [ip, #3400]!	; 0xd48

00011380 <strlen@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #28, 20	; 0x1c000
   11388:	ldr	pc, [ip, #3392]!	; 0xd40

0001138c <strchr@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #28, 20	; 0x1c000
   11394:	ldr	pc, [ip, #3384]!	; 0xd38

00011398 <getpagesize@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #28, 20	; 0x1c000
   113a0:	ldr	pc, [ip, #3376]!	; 0xd30

000113a4 <__errno_location@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #28, 20	; 0x1c000
   113ac:	ldr	pc, [ip, #3368]!	; 0xd28

000113b0 <__sprintf_chk@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #28, 20	; 0x1c000
   113b8:	ldr	pc, [ip, #3360]!	; 0xd20

000113bc <__cxa_atexit@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #28, 20	; 0x1c000
   113c4:	ldr	pc, [ip, #3352]!	; 0xd18

000113c8 <__vasprintf_chk@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #28, 20	; 0x1c000
   113d0:	ldr	pc, [ip, #3344]!	; 0xd10

000113d4 <memset@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #28, 20	; 0x1c000
   113dc:	ldr	pc, [ip, #3336]!	; 0xd08

000113e0 <__printf_chk@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #28, 20	; 0x1c000
   113e8:	ldr	pc, [ip, #3328]!	; 0xd00

000113ec <write@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #28, 20	; 0x1c000
   113f4:	ldr	pc, [ip, #3320]!	; 0xcf8

000113f8 <fileno@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #28, 20	; 0x1c000
   11400:	ldr	pc, [ip, #3312]!	; 0xcf0

00011404 <__fprintf_chk@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #28, 20	; 0x1c000
   1140c:	ldr	pc, [ip, #3304]!	; 0xce8

00011410 <fclose@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #28, 20	; 0x1c000
   11418:	ldr	pc, [ip, #3296]!	; 0xce0

0001141c <fseeko64@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #28, 20	; 0x1c000
   11424:	ldr	pc, [ip, #3288]!	; 0xcd8

00011428 <fcntl64@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #28, 20	; 0x1c000
   11430:	ldr	pc, [ip, #3280]!	; 0xcd0

00011434 <__overflow@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #28, 20	; 0x1c000
   1143c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011440 <setlocale@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #28, 20	; 0x1c000
   11448:	ldr	pc, [ip, #3264]!	; 0xcc0

0001144c <sigemptyset@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #28, 20	; 0x1c000
   11454:	ldr	pc, [ip, #3256]!	; 0xcb8

00011458 <strrchr@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #28, 20	; 0x1c000
   11460:	ldr	pc, [ip, #3248]!	; 0xcb0

00011464 <nl_langinfo@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #28, 20	; 0x1c000
   1146c:	ldr	pc, [ip, #3240]!	; 0xca8

00011470 <localeconv@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #28, 20	; 0x1c000
   11478:	ldr	pc, [ip, #3232]!	; 0xca0

0001147c <bindtextdomain@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #28, 20	; 0x1c000
   11484:	ldr	pc, [ip, #3224]!	; 0xc98

00011488 <aligned_alloc@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #28, 20	; 0x1c000
   11490:	ldr	pc, [ip, #3216]!	; 0xc90

00011494 <strncmp@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #28, 20	; 0x1c000
   1149c:	ldr	pc, [ip, #3208]!	; 0xc88

000114a0 <fdatasync@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #28, 20	; 0x1c000
   114a8:	ldr	pc, [ip, #3200]!	; 0xc80

000114ac <abort@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #28, 20	; 0x1c000
   114b4:	ldr	pc, [ip, #3192]!	; 0xc78

000114b8 <close@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #28, 20	; 0x1c000
   114c0:	ldr	pc, [ip, #3184]!	; 0xc70

000114c4 <dcngettext@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #28, 20	; 0x1c000
   114cc:	ldr	pc, [ip, #3176]!	; 0xc68

000114d0 <__snprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #28, 20	; 0x1c000
   114d8:	ldr	pc, [ip, #3168]!	; 0xc60

000114dc <__assert_fail@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #28, 20	; 0x1c000
   114e4:	ldr	pc, [ip, #3160]!	; 0xc58

Disassembly of section .text:

000114e8 <.text>:
   114e8:	mov	fp, #0
   114ec:	mov	lr, #0
   114f0:	pop	{r1}		; (ldr r1, [sp], #4)
   114f4:	mov	r2, sp
   114f8:	push	{r2}		; (str r2, [sp, #-4]!)
   114fc:	push	{r0}		; (str r0, [sp, #-4]!)
   11500:	ldr	ip, [pc, #16]	; 11518 <__assert_fail@plt+0x3c>
   11504:	push	{ip}		; (str ip, [sp, #-4]!)
   11508:	ldr	r0, [pc, #12]	; 1151c <__assert_fail@plt+0x40>
   1150c:	ldr	r3, [pc, #12]	; 11520 <__assert_fail@plt+0x44>
   11510:	bl	11320 <__libc_start_main@plt>
   11514:	bl	114ac <abort@plt>
   11518:	andeq	fp, r1, r8, asr #2
   1151c:	ldrdeq	r3, [r1], -ip
   11520:	andeq	fp, r1, r8, ror #1
   11524:	ldr	r3, [pc, #20]	; 11540 <__assert_fail@plt+0x64>
   11528:	ldr	r2, [pc, #20]	; 11544 <__assert_fail@plt+0x68>
   1152c:	add	r3, pc, r3
   11530:	ldr	r2, [r3, r2]
   11534:	cmp	r2, #0
   11538:	bxeq	lr
   1153c:	b	11350 <__gmon_start__@plt>
   11540:	andeq	ip, r1, ip, asr #21
   11544:	andeq	r0, r0, r0, asr #2
   11548:	ldr	r3, [pc, #28]	; 1156c <__assert_fail@plt+0x90>
   1154c:	ldr	r0, [pc, #28]	; 11570 <__assert_fail@plt+0x94>
   11550:	sub	r3, r3, r0
   11554:	cmp	r3, #6
   11558:	bxls	lr
   1155c:	ldr	r3, [pc, #16]	; 11574 <__assert_fail@plt+0x98>
   11560:	cmp	r3, #0
   11564:	bxeq	lr
   11568:	bx	r3
   1156c:	andeq	lr, r2, r7, asr #3
   11570:	andeq	lr, r2, r4, asr #3
   11574:	andeq	r0, r0, r0
   11578:	ldr	r1, [pc, #36]	; 115a4 <__assert_fail@plt+0xc8>
   1157c:	ldr	r0, [pc, #36]	; 115a8 <__assert_fail@plt+0xcc>
   11580:	sub	r1, r1, r0
   11584:	asr	r1, r1, #2
   11588:	add	r1, r1, r1, lsr #31
   1158c:	asrs	r1, r1, #1
   11590:	bxeq	lr
   11594:	ldr	r3, [pc, #16]	; 115ac <__assert_fail@plt+0xd0>
   11598:	cmp	r3, #0
   1159c:	bxeq	lr
   115a0:	bx	r3
   115a4:	andeq	lr, r2, r4, asr #3
   115a8:	andeq	lr, r2, r4, asr #3
   115ac:	andeq	r0, r0, r0
   115b0:	push	{r4, lr}
   115b4:	ldr	r4, [pc, #24]	; 115d4 <__assert_fail@plt+0xf8>
   115b8:	ldrb	r3, [r4]
   115bc:	cmp	r3, #0
   115c0:	popne	{r4, pc}
   115c4:	bl	11548 <__assert_fail@plt+0x6c>
   115c8:	mov	r3, #1
   115cc:	strb	r3, [r4]
   115d0:	pop	{r4, pc}
   115d4:	andeq	lr, r2, r4, ror #3
   115d8:	ldr	r0, [pc, #40]	; 11608 <__assert_fail@plt+0x12c>
   115dc:	ldr	r3, [r0]
   115e0:	cmp	r3, #0
   115e4:	bne	115ec <__assert_fail@plt+0x110>
   115e8:	b	11578 <__assert_fail@plt+0x9c>
   115ec:	ldr	r3, [pc, #24]	; 1160c <__assert_fail@plt+0x130>
   115f0:	cmp	r3, #0
   115f4:	beq	115e8 <__assert_fail@plt+0x10c>
   115f8:	push	{r4, lr}
   115fc:	blx	r3
   11600:	pop	{r4, lr}
   11604:	b	11578 <__assert_fail@plt+0x9c>
   11608:	andeq	sp, r2, r4, lsl pc
   1160c:	andeq	r0, r0, r0
   11610:	ldr	r1, [pc, #40]	; 11640 <__assert_fail@plt+0x164>
   11614:	sub	r3, r1, #1
   11618:	add	r1, r1, #255	; 0xff
   1161c:	ldrb	r2, [r3, #1]
   11620:	ldrb	r2, [r0, r2]
   11624:	strb	r2, [r3, #1]!
   11628:	cmp	r3, r1
   1162c:	bne	1161c <__assert_fail@plt+0x140>
   11630:	mov	r2, #1
   11634:	ldr	r3, [pc, #4]	; 11640 <__assert_fail@plt+0x164>
   11638:	strb	r2, [r3, #256]	; 0x100
   1163c:	bx	lr
   11640:	andeq	lr, r2, r8, ror #3
   11644:	ldr	r3, [pc, #4]	; 11650 <__assert_fail@plt+0x174>
   11648:	str	r0, [r3, #260]	; 0x104
   1164c:	bx	lr
   11650:	andeq	lr, r2, r8, ror #3
   11654:	ldr	r2, [pc, #12]	; 11668 <__assert_fail@plt+0x18c>
   11658:	ldr	r3, [r2, #264]	; 0x108
   1165c:	add	r3, r3, #1
   11660:	str	r3, [r2, #264]	; 0x108
   11664:	bx	lr
   11668:	andeq	lr, r2, r8, ror #3
   1166c:	sub	r1, r1, #1
   11670:	ldrb	r3, [r1, #1]!
   11674:	cmp	r3, #0
   11678:	beq	11690 <__assert_fail@plt+0x1b4>
   1167c:	ldrb	r2, [r0], #1
   11680:	cmp	r2, r3
   11684:	beq	11670 <__assert_fail@plt+0x194>
   11688:	mov	r0, #0
   1168c:	bx	lr
   11690:	ldrb	r0, [r0]
   11694:	cmp	r0, #61	; 0x3d
   11698:	cmpne	r0, #0
   1169c:	moveq	r0, #1
   116a0:	movne	r0, #0
   116a4:	bx	lr
   116a8:	ldr	r3, [pc, #148]	; 11744 <__assert_fail@plt+0x268>
   116ac:	ldrd	r2, [r3]
   116b0:	cmp	r2, #0
   116b4:	sbcs	ip, r3, #0
   116b8:	bxlt	lr
   116bc:	push	{r4, r5}
   116c0:	cmp	r0, #0
   116c4:	sbcs	ip, r1, #0
   116c8:	blt	1170c <__assert_fail@plt+0x230>
   116cc:	mvn	r4, #0
   116d0:	mvn	r5, #-2147483648	; 0x80000000
   116d4:	subs	r4, r4, r0
   116d8:	sbc	r5, r5, r1
   116dc:	cmp	r4, r2
   116e0:	sbcs	ip, r5, r3
   116e4:	movlt	ip, #1
   116e8:	movge	ip, #0
   116ec:	cmp	ip, #0
   116f0:	beq	11730 <__assert_fail@plt+0x254>
   116f4:	mvn	r0, #0
   116f8:	mvn	r1, #0
   116fc:	ldr	r3, [pc, #64]	; 11744 <__assert_fail@plt+0x268>
   11700:	strd	r0, [r3]
   11704:	pop	{r4, r5}
   11708:	bx	lr
   1170c:	mov	r4, #0
   11710:	mov	r5, #-2147483648	; 0x80000000
   11714:	subs	r4, r4, r0
   11718:	sbc	r5, r5, r1
   1171c:	cmp	r2, r4
   11720:	sbcs	ip, r3, r5
   11724:	movlt	ip, #1
   11728:	movge	ip, #0
   1172c:	b	116ec <__assert_fail@plt+0x210>
   11730:	adds	r2, r2, r0
   11734:	adc	r3, r3, r1
   11738:	ldr	r1, [pc, #4]	; 11744 <__assert_fail@plt+0x268>
   1173c:	strd	r2, [r1]
   11740:	b	11704 <__assert_fail@plt+0x228>
   11744:	strdeq	lr, [r2], -r8
   11748:	push	{lr}		; (str lr, [sp, #-4]!)
   1174c:	sub	sp, sp, #60	; 0x3c
   11750:	subs	r6, r0, #0
   11754:	beq	11790 <__assert_fail@plt+0x2b4>
   11758:	ldr	r3, [pc, #1148]	; 11bdc <__assert_fail@plt+0x700>
   1175c:	ldr	r4, [r3]
   11760:	mov	r2, #5
   11764:	ldr	r1, [pc, #1140]	; 11be0 <__assert_fail@plt+0x704>
   11768:	mov	r0, #0
   1176c:	bl	11230 <dcgettext@plt>
   11770:	ldr	r3, [pc, #1132]	; 11be4 <__assert_fail@plt+0x708>
   11774:	ldr	r3, [r3]
   11778:	mov	r2, r0
   1177c:	mov	r1, #1
   11780:	mov	r0, r4
   11784:	bl	11404 <__fprintf_chk@plt>
   11788:	mov	r0, r6
   1178c:	bl	11374 <exit@plt>
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #1100]	; 11be8 <__assert_fail@plt+0x70c>
   11798:	mov	r0, #0
   1179c:	bl	11230 <dcgettext@plt>
   117a0:	ldr	r3, [pc, #1084]	; 11be4 <__assert_fail@plt+0x708>
   117a4:	ldr	r2, [r3]
   117a8:	mov	r3, r2
   117ac:	mov	r1, r0
   117b0:	mov	r0, #1
   117b4:	bl	113e0 <__printf_chk@plt>
   117b8:	mov	r2, #5
   117bc:	ldr	r1, [pc, #1064]	; 11bec <__assert_fail@plt+0x710>
   117c0:	mov	r0, #0
   117c4:	bl	11230 <dcgettext@plt>
   117c8:	ldr	r4, [pc, #1056]	; 11bf0 <__assert_fail@plt+0x714>
   117cc:	ldr	r1, [r4]
   117d0:	bl	11158 <fputs_unlocked@plt>
   117d4:	mov	r2, #5
   117d8:	ldr	r1, [pc, #1044]	; 11bf4 <__assert_fail@plt+0x718>
   117dc:	mov	r0, #0
   117e0:	bl	11230 <dcgettext@plt>
   117e4:	ldr	r1, [r4]
   117e8:	bl	11158 <fputs_unlocked@plt>
   117ec:	mov	r2, #5
   117f0:	ldr	r1, [pc, #1024]	; 11bf8 <__assert_fail@plt+0x71c>
   117f4:	mov	r0, #0
   117f8:	bl	11230 <dcgettext@plt>
   117fc:	ldr	r1, [r4]
   11800:	bl	11158 <fputs_unlocked@plt>
   11804:	mov	r2, #5
   11808:	ldr	r1, [pc, #1004]	; 11bfc <__assert_fail@plt+0x720>
   1180c:	mov	r0, #0
   11810:	bl	11230 <dcgettext@plt>
   11814:	ldr	r1, [r4]
   11818:	bl	11158 <fputs_unlocked@plt>
   1181c:	mov	r2, #5
   11820:	ldr	r1, [pc, #984]	; 11c00 <__assert_fail@plt+0x724>
   11824:	mov	r0, #0
   11828:	bl	11230 <dcgettext@plt>
   1182c:	ldr	r1, [r4]
   11830:	bl	11158 <fputs_unlocked@plt>
   11834:	mov	r2, #5
   11838:	ldr	r1, [pc, #964]	; 11c04 <__assert_fail@plt+0x728>
   1183c:	mov	r0, #0
   11840:	bl	11230 <dcgettext@plt>
   11844:	ldr	r1, [r4]
   11848:	bl	11158 <fputs_unlocked@plt>
   1184c:	mov	r2, #5
   11850:	ldr	r1, [pc, #944]	; 11c08 <__assert_fail@plt+0x72c>
   11854:	mov	r0, #0
   11858:	bl	11230 <dcgettext@plt>
   1185c:	ldr	r1, [r4]
   11860:	bl	11158 <fputs_unlocked@plt>
   11864:	mov	r2, #5
   11868:	ldr	r1, [pc, #924]	; 11c0c <__assert_fail@plt+0x730>
   1186c:	mov	r0, #0
   11870:	bl	11230 <dcgettext@plt>
   11874:	ldr	r1, [r4]
   11878:	bl	11158 <fputs_unlocked@plt>
   1187c:	mov	r2, #5
   11880:	ldr	r1, [pc, #904]	; 11c10 <__assert_fail@plt+0x734>
   11884:	mov	r0, #0
   11888:	bl	11230 <dcgettext@plt>
   1188c:	ldr	r1, [r4]
   11890:	bl	11158 <fputs_unlocked@plt>
   11894:	mov	r2, #5
   11898:	ldr	r1, [pc, #884]	; 11c14 <__assert_fail@plt+0x738>
   1189c:	mov	r0, #0
   118a0:	bl	11230 <dcgettext@plt>
   118a4:	ldr	r1, [r4]
   118a8:	bl	11158 <fputs_unlocked@plt>
   118ac:	mov	r2, #5
   118b0:	ldr	r1, [pc, #864]	; 11c18 <__assert_fail@plt+0x73c>
   118b4:	mov	r0, #0
   118b8:	bl	11230 <dcgettext@plt>
   118bc:	ldr	r1, [r4]
   118c0:	bl	11158 <fputs_unlocked@plt>
   118c4:	mov	r2, #5
   118c8:	ldr	r1, [pc, #844]	; 11c1c <__assert_fail@plt+0x740>
   118cc:	mov	r0, #0
   118d0:	bl	11230 <dcgettext@plt>
   118d4:	ldr	r1, [r4]
   118d8:	bl	11158 <fputs_unlocked@plt>
   118dc:	mov	r2, #5
   118e0:	ldr	r1, [pc, #824]	; 11c20 <__assert_fail@plt+0x744>
   118e4:	mov	r0, #0
   118e8:	bl	11230 <dcgettext@plt>
   118ec:	ldr	r1, [r4]
   118f0:	bl	11158 <fputs_unlocked@plt>
   118f4:	mov	r2, #5
   118f8:	ldr	r1, [pc, #804]	; 11c24 <__assert_fail@plt+0x748>
   118fc:	mov	r0, #0
   11900:	bl	11230 <dcgettext@plt>
   11904:	ldr	r1, [r4]
   11908:	bl	11158 <fputs_unlocked@plt>
   1190c:	mov	r2, #5
   11910:	ldr	r1, [pc, #784]	; 11c28 <__assert_fail@plt+0x74c>
   11914:	mov	r0, #0
   11918:	bl	11230 <dcgettext@plt>
   1191c:	ldr	r1, [r4]
   11920:	bl	11158 <fputs_unlocked@plt>
   11924:	mov	r2, #5
   11928:	ldr	r1, [pc, #764]	; 11c2c <__assert_fail@plt+0x750>
   1192c:	mov	r0, #0
   11930:	bl	11230 <dcgettext@plt>
   11934:	ldr	r1, [r4]
   11938:	bl	11158 <fputs_unlocked@plt>
   1193c:	mov	r2, #5
   11940:	ldr	r1, [pc, #744]	; 11c30 <__assert_fail@plt+0x754>
   11944:	mov	r0, #0
   11948:	bl	11230 <dcgettext@plt>
   1194c:	ldr	r1, [r4]
   11950:	bl	11158 <fputs_unlocked@plt>
   11954:	mov	r2, #5
   11958:	ldr	r1, [pc, #724]	; 11c34 <__assert_fail@plt+0x758>
   1195c:	mov	r0, #0
   11960:	bl	11230 <dcgettext@plt>
   11964:	ldr	r1, [r4]
   11968:	bl	11158 <fputs_unlocked@plt>
   1196c:	mov	r2, #5
   11970:	ldr	r1, [pc, #704]	; 11c38 <__assert_fail@plt+0x75c>
   11974:	mov	r0, #0
   11978:	bl	11230 <dcgettext@plt>
   1197c:	ldr	r1, [r4]
   11980:	bl	11158 <fputs_unlocked@plt>
   11984:	mov	r2, #5
   11988:	ldr	r1, [pc, #684]	; 11c3c <__assert_fail@plt+0x760>
   1198c:	mov	r0, #0
   11990:	bl	11230 <dcgettext@plt>
   11994:	ldr	r2, [pc, #676]	; 11c40 <__assert_fail@plt+0x764>
   11998:	mov	r1, r0
   1199c:	mov	r0, #1
   119a0:	bl	113e0 <__printf_chk@plt>
   119a4:	mov	r2, #5
   119a8:	ldr	r1, [pc, #660]	; 11c44 <__assert_fail@plt+0x768>
   119ac:	mov	r0, #0
   119b0:	bl	11230 <dcgettext@plt>
   119b4:	ldr	r1, [r4]
   119b8:	bl	11158 <fputs_unlocked@plt>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #640]	; 11c48 <__assert_fail@plt+0x76c>
   119c4:	mov	r0, #0
   119c8:	bl	11230 <dcgettext@plt>
   119cc:	ldr	r1, [r4]
   119d0:	bl	11158 <fputs_unlocked@plt>
   119d4:	mov	ip, sp
   119d8:	ldr	lr, [pc, #620]	; 11c4c <__assert_fail@plt+0x770>
   119dc:	ldm	lr!, {r0, r1, r2, r3}
   119e0:	stmia	ip!, {r0, r1, r2, r3}
   119e4:	ldm	lr!, {r0, r1, r2, r3}
   119e8:	stmia	ip!, {r0, r1, r2, r3}
   119ec:	ldm	lr!, {r0, r1, r2, r3}
   119f0:	stmia	ip!, {r0, r1, r2, r3}
   119f4:	ldm	lr, {r0, r1}
   119f8:	stm	ip, {r0, r1}
   119fc:	ldr	r1, [sp]
   11a00:	cmp	r1, #0
   11a04:	moveq	r4, sp
   11a08:	beq	11a30 <__assert_fail@plt+0x554>
   11a0c:	mov	r4, sp
   11a10:	ldr	r5, [pc, #568]	; 11c50 <__assert_fail@plt+0x774>
   11a14:	mov	r0, r5
   11a18:	bl	1117c <strcmp@plt>
   11a1c:	cmp	r0, #0
   11a20:	beq	11a30 <__assert_fail@plt+0x554>
   11a24:	ldr	r1, [r4, #8]!
   11a28:	cmp	r1, #0
   11a2c:	bne	11a14 <__assert_fail@plt+0x538>
   11a30:	ldr	r4, [r4, #4]
   11a34:	cmp	r4, #0
   11a38:	beq	11b4c <__assert_fail@plt+0x670>
   11a3c:	mov	r2, #5
   11a40:	ldr	r1, [pc, #524]	; 11c54 <__assert_fail@plt+0x778>
   11a44:	mov	r0, #0
   11a48:	bl	11230 <dcgettext@plt>
   11a4c:	ldr	r3, [pc, #516]	; 11c58 <__assert_fail@plt+0x77c>
   11a50:	ldr	r2, [pc, #516]	; 11c5c <__assert_fail@plt+0x780>
   11a54:	mov	r1, r0
   11a58:	mov	r0, #1
   11a5c:	bl	113e0 <__printf_chk@plt>
   11a60:	mov	r1, #0
   11a64:	mov	r0, #5
   11a68:	bl	11440 <setlocale@plt>
   11a6c:	cmp	r0, #0
   11a70:	beq	11a88 <__assert_fail@plt+0x5ac>
   11a74:	mov	r2, #3
   11a78:	ldr	r1, [pc, #480]	; 11c60 <__assert_fail@plt+0x784>
   11a7c:	bl	11494 <strncmp@plt>
   11a80:	cmp	r0, #0
   11a84:	bne	11ae8 <__assert_fail@plt+0x60c>
   11a88:	mov	r2, #5
   11a8c:	ldr	r1, [pc, #464]	; 11c64 <__assert_fail@plt+0x788>
   11a90:	mov	r0, #0
   11a94:	bl	11230 <dcgettext@plt>
   11a98:	ldr	r5, [pc, #432]	; 11c50 <__assert_fail@plt+0x774>
   11a9c:	mov	r3, r5
   11aa0:	ldr	r2, [pc, #432]	; 11c58 <__assert_fail@plt+0x77c>
   11aa4:	mov	r1, r0
   11aa8:	mov	r0, #1
   11aac:	bl	113e0 <__printf_chk@plt>
   11ab0:	mov	r2, #5
   11ab4:	ldr	r1, [pc, #428]	; 11c68 <__assert_fail@plt+0x78c>
   11ab8:	mov	r0, #0
   11abc:	bl	11230 <dcgettext@plt>
   11ac0:	mov	r1, r0
   11ac4:	ldr	r2, [pc, #416]	; 11c6c <__assert_fail@plt+0x790>
   11ac8:	ldr	r3, [pc, #416]	; 11c70 <__assert_fail@plt+0x794>
   11acc:	cmp	r4, r5
   11ad0:	movne	r3, r2
   11ad4:	mov	r2, r4
   11ad8:	mov	r0, #1
   11adc:	bl	113e0 <__printf_chk@plt>
   11ae0:	b	11788 <__assert_fail@plt+0x2ac>
   11ae4:	ldr	r4, [pc, #356]	; 11c50 <__assert_fail@plt+0x774>
   11ae8:	mov	r2, #5
   11aec:	ldr	r1, [pc, #384]	; 11c74 <__assert_fail@plt+0x798>
   11af0:	mov	r0, #0
   11af4:	bl	11230 <dcgettext@plt>
   11af8:	ldr	r3, [pc, #240]	; 11bf0 <__assert_fail@plt+0x714>
   11afc:	ldr	r1, [r3]
   11b00:	bl	11158 <fputs_unlocked@plt>
   11b04:	b	11a88 <__assert_fail@plt+0x5ac>
   11b08:	mov	r2, #5
   11b0c:	ldr	r1, [pc, #336]	; 11c64 <__assert_fail@plt+0x788>
   11b10:	mov	r0, #0
   11b14:	bl	11230 <dcgettext@plt>
   11b18:	ldr	r4, [pc, #304]	; 11c50 <__assert_fail@plt+0x774>
   11b1c:	mov	r3, r4
   11b20:	ldr	r2, [pc, #304]	; 11c58 <__assert_fail@plt+0x77c>
   11b24:	mov	r1, r0
   11b28:	mov	r0, #1
   11b2c:	bl	113e0 <__printf_chk@plt>
   11b30:	mov	r2, #5
   11b34:	ldr	r1, [pc, #300]	; 11c68 <__assert_fail@plt+0x78c>
   11b38:	mov	r0, #0
   11b3c:	bl	11230 <dcgettext@plt>
   11b40:	mov	r1, r0
   11b44:	ldr	r3, [pc, #292]	; 11c70 <__assert_fail@plt+0x794>
   11b48:	b	11ad4 <__assert_fail@plt+0x5f8>
   11b4c:	mov	r2, #5
   11b50:	ldr	r1, [pc, #252]	; 11c54 <__assert_fail@plt+0x778>
   11b54:	mov	r0, #0
   11b58:	bl	11230 <dcgettext@plt>
   11b5c:	ldr	r3, [pc, #244]	; 11c58 <__assert_fail@plt+0x77c>
   11b60:	ldr	r2, [pc, #244]	; 11c5c <__assert_fail@plt+0x780>
   11b64:	mov	r1, r0
   11b68:	mov	r0, #1
   11b6c:	bl	113e0 <__printf_chk@plt>
   11b70:	mov	r1, #0
   11b74:	mov	r0, #5
   11b78:	bl	11440 <setlocale@plt>
   11b7c:	cmp	r0, #0
   11b80:	beq	11b08 <__assert_fail@plt+0x62c>
   11b84:	mov	r2, #3
   11b88:	ldr	r1, [pc, #208]	; 11c60 <__assert_fail@plt+0x784>
   11b8c:	bl	11494 <strncmp@plt>
   11b90:	cmp	r0, #0
   11b94:	bne	11ae4 <__assert_fail@plt+0x608>
   11b98:	mov	r2, #5
   11b9c:	ldr	r1, [pc, #192]	; 11c64 <__assert_fail@plt+0x788>
   11ba0:	mov	r0, #0
   11ba4:	bl	11230 <dcgettext@plt>
   11ba8:	ldr	r4, [pc, #160]	; 11c50 <__assert_fail@plt+0x774>
   11bac:	mov	r3, r4
   11bb0:	ldr	r2, [pc, #160]	; 11c58 <__assert_fail@plt+0x77c>
   11bb4:	mov	r1, r0
   11bb8:	mov	r0, #1
   11bbc:	bl	113e0 <__printf_chk@plt>
   11bc0:	mov	r2, #5
   11bc4:	ldr	r1, [pc, #156]	; 11c68 <__assert_fail@plt+0x78c>
   11bc8:	mov	r0, #0
   11bcc:	bl	11230 <dcgettext@plt>
   11bd0:	mov	r1, r0
   11bd4:	ldr	r3, [pc, #148]	; 11c70 <__assert_fail@plt+0x794>
   11bd8:	b	11ad4 <__assert_fail@plt+0x5f8>
   11bdc:	ldrdeq	lr, [r2], -r8
   11be0:	andeq	fp, r1, ip, lsr #14
   11be4:	andeq	lr, r2, ip, asr r4
   11be8:	andeq	fp, r1, r4, asr r7
   11bec:	andeq	fp, r1, r0, lsl #15
   11bf0:	ldrdeq	lr, [r2], -ip
   11bf4:	andeq	fp, r1, r0, lsr #18
   11bf8:	andeq	fp, r1, r0, asr #23
   11bfc:	andeq	fp, r1, r4, ror #25
   11c00:	andeq	fp, r1, r4, lsr #30
   11c04:	andeq	ip, r1, r4, asr #32
   11c08:	strheq	ip, [r1], -r0
   11c0c:	ldrdeq	ip, [r1], -r8
   11c10:	andeq	ip, r1, r0, lsl #2
   11c14:	andeq	ip, r1, ip, lsr #2
   11c18:	andeq	ip, r1, ip, asr r1
   11c1c:	muleq	r1, r8, r1
   11c20:			; <UNDEFINED> instruction: 0x0001c1bc
   11c24:	andeq	ip, r1, r4, ror #3
   11c28:	andeq	ip, r1, r0, lsr #4
   11c2c:	andeq	ip, r1, ip, asr r2
   11c30:	andeq	ip, r1, r0, lsl #5
   11c34:	andeq	ip, r1, r0, asr #5
   11c38:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   11c3c:	andeq	ip, r1, r8, lsr r3
   11c40:	andeq	ip, r1, r0, asr #7
   11c44:	andeq	ip, r1, r8, asr #7
   11c48:	strdeq	ip, [r1], -r8
   11c4c:	andeq	fp, r1, r0, ror r1
   11c50:	andeq	fp, r1, r8, lsr #14
   11c54:	andeq	ip, r1, r0, lsr r4
   11c58:	andeq	ip, r1, r8, asr #8
   11c5c:	andeq	ip, r1, r0, ror r4
   11c60:	andeq	ip, r1, r0, lsl #9
   11c64:	andeq	ip, r1, ip, asr #9
   11c68:	andeq	ip, r1, r8, ror #9
   11c6c:			; <UNDEFINED> instruction: 0x0001c2bc
   11c70:	andeq	ip, r1, r0, ror #23
   11c74:	andeq	ip, r1, r4, lsl #9
   11c78:	push	{r4, lr}
   11c7c:	ldr	r3, [pc, #44]	; 11cb0 <__assert_fail@plt+0x7d4>
   11c80:	ldrb	r3, [r3]
   11c84:	cmp	r3, #0
   11c88:	bne	11ca8 <__assert_fail@plt+0x7cc>
   11c8c:	ldr	r3, [pc, #32]	; 11cb4 <__assert_fail@plt+0x7d8>
   11c90:	ldr	r0, [r3]
   11c94:	bl	15e3c <__assert_fail@plt+0x4960>
   11c98:	cmp	r0, #0
   11c9c:	popeq	{r4, pc}
   11ca0:	mov	r0, #1
   11ca4:	bl	111dc <_exit@plt>
   11ca8:	bl	15ed4 <__assert_fail@plt+0x49f8>
   11cac:	pop	{r4, pc}
   11cb0:	andeq	lr, r2, r0, asr r1
   11cb4:	ldrdeq	lr, [r2], -r8
   11cb8:	push	{r4, r5, r6, lr}
   11cbc:	mov	r5, r0
   11cc0:	bl	114b8 <close@plt>
   11cc4:	cmp	r0, #0
   11cc8:	popeq	{r4, r5, r6, pc}
   11ccc:	bl	113a4 <__errno_location@plt>
   11cd0:	mov	r4, r0
   11cd4:	ldr	r3, [r4]
   11cd8:	cmp	r3, #4
   11cdc:	bne	11d04 <__assert_fail@plt+0x828>
   11ce0:	mov	r0, r5
   11ce4:	bl	114b8 <close@plt>
   11ce8:	cmp	r0, #0
   11cec:	popeq	{r4, r5, r6, pc}
   11cf0:	ldr	r3, [r4]
   11cf4:	cmp	r3, #9
   11cf8:	bne	11cd4 <__assert_fail@plt+0x7f8>
   11cfc:	mov	r0, #0
   11d00:	pop	{r4, r5, r6, pc}
   11d04:	mvn	r0, #0
   11d08:	pop	{r4, r5, r6, pc}
   11d0c:	push	{r2, r3}
   11d10:	push	{r4, r5, lr}
   11d14:	sub	sp, sp, #12
   11d18:	mov	r4, r0
   11d1c:	mov	r5, r1
   11d20:	ldr	r3, [pc, #112]	; 11d98 <__assert_fail@plt+0x8bc>
   11d24:	ldr	r3, [r3, #280]	; 0x118
   11d28:	cmp	r3, #0
   11d2c:	ble	11d64 <__assert_fail@plt+0x888>
   11d30:	ldr	r3, [pc, #100]	; 11d9c <__assert_fail@plt+0x8c0>
   11d34:	ldr	r0, [r3]
   11d38:	ldr	r3, [r0, #20]
   11d3c:	ldr	r2, [r0, #24]
   11d40:	cmp	r3, r2
   11d44:	addcc	r2, r3, #1
   11d48:	strcc	r2, [r0, #20]
   11d4c:	movcc	r2, #10
   11d50:	strbcc	r2, [r3]
   11d54:	bcs	11d8c <__assert_fail@plt+0x8b0>
   11d58:	mov	r2, #0
   11d5c:	ldr	r3, [pc, #52]	; 11d98 <__assert_fail@plt+0x8bc>
   11d60:	str	r2, [r3, #280]	; 0x118
   11d64:	add	r3, sp, #28
   11d68:	str	r3, [sp, #4]
   11d6c:	ldr	r2, [sp, #24]
   11d70:	mov	r1, r5
   11d74:	mov	r0, r4
   11d78:	bl	18d34 <__assert_fail@plt+0x7858>
   11d7c:	add	sp, sp, #12
   11d80:	pop	{r4, r5, lr}
   11d84:	add	sp, sp, #8
   11d88:	bx	lr
   11d8c:	mov	r1, #10
   11d90:	bl	11434 <__overflow@plt>
   11d94:	b	11d58 <__assert_fail@plt+0x87c>
   11d98:	andeq	lr, r2, r8, ror #3
   11d9c:	ldrdeq	lr, [r2], -r8
   11da0:	push	{r4, r5, r6, r7, r8, r9, lr}
   11da4:	sub	sp, sp, #28
   11da8:	mov	r8, r0
   11dac:	mov	r7, r1
   11db0:	add	r3, sp, #24
   11db4:	mov	r4, #0
   11db8:	mov	r5, #0
   11dbc:	strd	r4, [r3, #-8]!
   11dc0:	ldr	r2, [pc, #484]	; 11fac <__assert_fail@plt+0xad0>
   11dc4:	str	r2, [sp]
   11dc8:	mov	r2, #10
   11dcc:	add	r1, sp, #12
   11dd0:	bl	199a8 <__assert_fail@plt+0x84cc>
   11dd4:	mov	r6, r0
   11dd8:	bic	r3, r0, #1
   11ddc:	cmp	r3, #2
   11de0:	beq	11e0c <__assert_fail@plt+0x930>
   11de4:	ldrd	r4, [sp, #16]
   11de8:	cmp	r4, #0
   11dec:	sbcs	r3, r5, #0
   11df0:	blt	11f98 <__assert_fail@plt+0xabc>
   11df4:	cmp	r6, #0
   11df8:	strne	r6, [r7]
   11dfc:	mov	r0, r4
   11e00:	mov	r1, r5
   11e04:	add	sp, sp, #28
   11e08:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11e0c:	ldr	r0, [sp, #12]
   11e10:	ldrb	r3, [r0]
   11e14:	cmp	r3, #120	; 0x78
   11e18:	bne	11de4 <__assert_fail@plt+0x908>
   11e1c:	add	r1, sp, #24
   11e20:	mov	r3, #0
   11e24:	str	r3, [r1, #-16]!
   11e28:	add	r0, r0, #1
   11e2c:	bl	11da0 <__assert_fail@plt+0x8c4>
   11e30:	mov	r4, r0
   11e34:	mov	r5, r1
   11e38:	ldr	r9, [sp, #8]
   11e3c:	bics	r3, r9, #1
   11e40:	strne	r9, [r7]
   11e44:	bne	11dfc <__assert_fail@plt+0x920>
   11e48:	cmp	r0, #0
   11e4c:	sbcs	r3, r1, #0
   11e50:	blt	11ea4 <__assert_fail@plt+0x9c8>
   11e54:	orrs	r3, r4, r5
   11e58:	moveq	r3, #0
   11e5c:	beq	11e88 <__assert_fail@plt+0x9ac>
   11e60:	mov	r2, r0
   11e64:	mov	r3, r1
   11e68:	mvn	r0, #0
   11e6c:	mvn	r1, #-2147483648	; 0x80000000
   11e70:	bl	1ae54 <__assert_fail@plt+0x9978>
   11e74:	ldrd	r2, [sp, #16]
   11e78:	cmp	r1, r3
   11e7c:	cmpeq	r0, r2
   11e80:	movcc	r3, #1
   11e84:	movcs	r3, #0
   11e88:	cmp	r3, #0
   11e8c:	beq	11efc <__assert_fail@plt+0xa20>
   11e90:	mov	r3, #1
   11e94:	str	r3, [r7]
   11e98:	mvn	r4, #0
   11e9c:	mvn	r5, #-2147483648	; 0x80000000
   11ea0:	b	11dfc <__assert_fail@plt+0x920>
   11ea4:	mvn	r2, #0
   11ea8:	mvn	r3, #0
   11eac:	cmp	r1, r3
   11eb0:	cmpeq	r0, r2
   11eb4:	beq	11ee4 <__assert_fail@plt+0xa08>
   11eb8:	mov	r2, r0
   11ebc:	mov	r3, r1
   11ec0:	mov	r0, #0
   11ec4:	mov	r1, #-2147483648	; 0x80000000
   11ec8:	bl	1ae54 <__assert_fail@plt+0x9978>
   11ecc:	ldrd	r2, [sp, #16]
   11ed0:	cmp	r1, r3
   11ed4:	cmpeq	r0, r2
   11ed8:	movcc	r3, #1
   11edc:	movcs	r3, #0
   11ee0:	b	11e88 <__assert_fail@plt+0x9ac>
   11ee4:	ldrd	r2, [sp, #16]
   11ee8:	cmp	r3, #-2147483648	; 0x80000000
   11eec:	cmpeq	r2, #0
   11ef0:	movhi	r3, #1
   11ef4:	movls	r3, #0
   11ef8:	b	11e88 <__assert_fail@plt+0x9ac>
   11efc:	ldr	r2, [sp, #16]
   11f00:	ldr	r3, [sp, #20]
   11f04:	mul	r3, r4, r3
   11f08:	mla	r3, r2, r5, r3
   11f0c:	umull	r4, r5, r2, r4
   11f10:	add	r5, r3, r5
   11f14:	orrs	r3, r4, r5
   11f18:	bne	11f7c <__assert_fail@plt+0xaa0>
   11f1c:	mov	r2, #2
   11f20:	ldr	r1, [pc, #136]	; 11fb0 <__assert_fail@plt+0xad4>
   11f24:	mov	r0, r8
   11f28:	bl	11494 <strncmp@plt>
   11f2c:	cmp	r0, #0
   11f30:	bne	11dfc <__assert_fail@plt+0x920>
   11f34:	mov	r2, #5
   11f38:	ldr	r1, [pc, #116]	; 11fb4 <__assert_fail@plt+0xad8>
   11f3c:	bl	11230 <dcgettext@plt>
   11f40:	mov	r6, r0
   11f44:	ldr	r1, [pc, #100]	; 11fb0 <__assert_fail@plt+0xad4>
   11f48:	mov	r0, #0
   11f4c:	bl	18c60 <__assert_fail@plt+0x7784>
   11f50:	mov	r7, r0
   11f54:	ldr	r1, [pc, #92]	; 11fb8 <__assert_fail@plt+0xadc>
   11f58:	mov	r0, #1
   11f5c:	bl	18c60 <__assert_fail@plt+0x7784>
   11f60:	str	r0, [sp]
   11f64:	mov	r3, r7
   11f68:	mov	r2, r6
   11f6c:	mov	r1, #0
   11f70:	mov	r0, r1
   11f74:	bl	11d0c <__assert_fail@plt+0x830>
   11f78:	b	11dfc <__assert_fail@plt+0x920>
   11f7c:	orr	r6, r6, r9
   11f80:	tst	r6, #1
   11f84:	movne	r3, #1
   11f88:	strne	r3, [r7]
   11f8c:	mvnne	r4, #0
   11f90:	mvnne	r5, #-2147483648	; 0x80000000
   11f94:	b	11dfc <__assert_fail@plt+0x920>
   11f98:	orr	r6, r6, #1
   11f9c:	str	r6, [r7]
   11fa0:	mvn	r4, #0
   11fa4:	mvn	r5, #-2147483648	; 0x80000000
   11fa8:	b	11dfc <__assert_fail@plt+0x920>
   11fac:	andeq	ip, r1, ip, lsl r5
   11fb0:	andeq	ip, r1, ip, lsr #10
   11fb4:	andeq	ip, r1, r0, lsr r5
   11fb8:	andeq	ip, r1, r0, ror r5
   11fbc:	ldr	r3, [pc, #144]	; 12054 <__assert_fail@plt+0xb78>
   11fc0:	ldr	r3, [r3, #284]	; 0x11c
   11fc4:	cmp	r3, #0
   11fc8:	bxne	lr
   11fcc:	push	{r4, r5, lr}
   11fd0:	sub	sp, sp, #676	; 0x2a4
   11fd4:	ldr	r4, [pc, #120]	; 12054 <__assert_fail@plt+0xb78>
   11fd8:	ldr	r3, [r4, #288]	; 0x120
   11fdc:	lsl	r3, r3, #24
   11fe0:	ldr	r1, [r4, #292]	; 0x124
   11fe4:	add	r1, r1, r3, lsr #31
   11fe8:	ldr	r0, [r4, #296]	; 0x128
   11fec:	bl	11488 <aligned_alloc@plt>
   11ff0:	str	r0, [r4, #284]	; 0x11c
   11ff4:	cmp	r0, #0
   11ff8:	beq	12004 <__assert_fail@plt+0xb28>
   11ffc:	add	sp, sp, #676	; 0x2a4
   12000:	pop	{r4, r5, pc}
   12004:	mov	r2, #5
   12008:	ldr	r1, [pc, #72]	; 12058 <__assert_fail@plt+0xb7c>
   1200c:	bl	11230 <dcgettext@plt>
   12010:	mov	r5, r0
   12014:	ldr	r4, [r4, #292]	; 0x124
   12018:	mov	r2, #1
   1201c:	mov	r3, #0
   12020:	strd	r2, [sp, #8]
   12024:	strd	r2, [sp]
   12028:	ldr	r3, [pc, #44]	; 1205c <__assert_fail@plt+0xb80>
   1202c:	add	r2, sp, #20
   12030:	mov	r0, r4
   12034:	asr	r1, r4, #31
   12038:	bl	16578 <__assert_fail@plt+0x509c>
   1203c:	str	r0, [sp]
   12040:	mov	r3, r4
   12044:	mov	r2, r5
   12048:	mov	r1, #0
   1204c:	mov	r0, #1
   12050:	bl	11d0c <__assert_fail@plt+0x830>
   12054:	andeq	lr, r2, r8, ror #3
   12058:	andeq	ip, r1, r4, ror r5
   1205c:	strdeq	r0, [r0], -r1
   12060:	ldr	r3, [pc, #168]	; 12110 <__assert_fail@plt+0xc34>
   12064:	ldr	r3, [r3, #300]	; 0x12c
   12068:	cmp	r3, #0
   1206c:	bxne	lr
   12070:	push	{r4, r5, lr}
   12074:	sub	sp, sp, #676	; 0x2a4
   12078:	ldr	r3, [pc, #144]	; 12110 <__assert_fail@plt+0xc34>
   1207c:	ldr	r3, [r3, #288]	; 0x120
   12080:	tst	r3, #2048	; 0x800
   12084:	beq	120fc <__assert_fail@plt+0xc20>
   12088:	ldr	r4, [pc, #128]	; 12110 <__assert_fail@plt+0xc34>
   1208c:	ldr	r1, [r4, #304]	; 0x130
   12090:	ldr	r0, [r4, #296]	; 0x128
   12094:	bl	11488 <aligned_alloc@plt>
   12098:	str	r0, [r4, #300]	; 0x12c
   1209c:	cmp	r0, #0
   120a0:	beq	120ac <__assert_fail@plt+0xbd0>
   120a4:	add	sp, sp, #676	; 0x2a4
   120a8:	pop	{r4, r5, pc}
   120ac:	mov	r2, #5
   120b0:	ldr	r1, [pc, #92]	; 12114 <__assert_fail@plt+0xc38>
   120b4:	bl	11230 <dcgettext@plt>
   120b8:	mov	r5, r0
   120bc:	ldr	r4, [r4, #304]	; 0x130
   120c0:	mov	r2, #1
   120c4:	mov	r3, #0
   120c8:	strd	r2, [sp, #8]
   120cc:	strd	r2, [sp]
   120d0:	ldr	r3, [pc, #64]	; 12118 <__assert_fail@plt+0xc3c>
   120d4:	add	r2, sp, #20
   120d8:	mov	r0, r4
   120dc:	asr	r1, r4, #31
   120e0:	bl	16578 <__assert_fail@plt+0x509c>
   120e4:	str	r0, [sp]
   120e8:	mov	r3, r4
   120ec:	mov	r2, r5
   120f0:	mov	r1, #0
   120f4:	mov	r0, #1
   120f8:	bl	11d0c <__assert_fail@plt+0x830>
   120fc:	bl	11fbc <__assert_fail@plt+0xae0>
   12100:	ldr	r3, [pc, #8]	; 12110 <__assert_fail@plt+0xc34>
   12104:	ldr	r2, [r3, #284]	; 0x11c
   12108:	str	r2, [r3, #300]	; 0x12c
   1210c:	b	120a4 <__assert_fail@plt+0xbc8>
   12110:	andeq	lr, r2, r8, ror #3
   12114:	andeq	ip, r1, ip, lsr #11
   12118:	strdeq	r0, [r0], -r1
   1211c:	push	{r4, r5, r6, r7, r8, r9, lr}
   12120:	sub	sp, sp, #12
   12124:	mov	r4, r0
   12128:	mov	r8, r1
   1212c:	mov	r7, r2
   12130:	mov	r9, r3
   12134:	mov	r6, #0
   12138:	mov	r5, #44	; 0x2c
   1213c:	b	1220c <__assert_fail@plt+0xd30>
   12140:	cmp	r0, #0
   12144:	beq	12194 <__assert_fail@plt+0xcb8>
   12148:	sub	r5, r0, r4
   1214c:	mov	r2, #5
   12150:	mov	r1, r9
   12154:	mov	r0, #0
   12158:	bl	11230 <dcgettext@plt>
   1215c:	mov	r6, r0
   12160:	mov	r3, r5
   12164:	mov	r2, r4
   12168:	mov	r1, #8
   1216c:	mov	r0, #0
   12170:	bl	18a04 <__assert_fail@plt+0x7528>
   12174:	str	r0, [sp]
   12178:	mov	r3, r6
   1217c:	ldr	r2, [pc, #168]	; 1222c <__assert_fail@plt+0xd50>
   12180:	mov	r1, #0
   12184:	mov	r0, r1
   12188:	bl	11d0c <__assert_fail@plt+0x830>
   1218c:	mov	r0, #1
   12190:	bl	11748 <__assert_fail@plt+0x26c>
   12194:	mov	r0, r4
   12198:	bl	11380 <strlen@plt>
   1219c:	mov	r5, r0
   121a0:	b	1214c <__assert_fail@plt+0xc70>
   121a4:	ldrb	r3, [r1]
   121a8:	cmp	r3, #44	; 0x2c
   121ac:	cmpne	r3, #0
   121b0:	bne	121c0 <__assert_fail@plt+0xce4>
   121b4:	ldr	r3, [lr, #13]
   121b8:	cmp	r3, #0
   121bc:	bne	121f4 <__assert_fail@plt+0xd18>
   121c0:	add	lr, lr, #16
   121c4:	ldrb	r3, [lr, #-15]
   121c8:	cmp	r3, #0
   121cc:	beq	12140 <__assert_fail@plt+0xc64>
   121d0:	mov	r2, lr
   121d4:	mov	r1, r4
   121d8:	ldrb	r3, [r2, #1]!
   121dc:	cmp	r3, #0
   121e0:	beq	121a4 <__assert_fail@plt+0xcc8>
   121e4:	ldrb	ip, [r1], #1
   121e8:	cmp	ip, r3
   121ec:	beq	121d8 <__assert_fail@plt+0xcfc>
   121f0:	b	121c0 <__assert_fail@plt+0xce4>
   121f4:	cmp	r7, #0
   121f8:	orreq	r3, r3, r6
   121fc:	cmp	r0, #0
   12200:	beq	12220 <__assert_fail@plt+0xd44>
   12204:	add	r4, r0, #1
   12208:	mov	r6, r3
   1220c:	mov	r1, r5
   12210:	mov	r0, r4
   12214:	bl	1138c <strchr@plt>
   12218:	sub	lr, r8, #1
   1221c:	b	121d0 <__assert_fail@plt+0xcf4>
   12220:	mov	r0, r3
   12224:	add	sp, sp, #12
   12228:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1222c:	andeq	ip, r1, r8, ror #11
   12230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12234:	sub	sp, sp, #20
   12238:	mov	r4, r2
   1223c:	mov	r5, r3
   12240:	subs	r9, r0, #0
   12244:	ldr	ip, [pc, #792]	; 12564 <__assert_fail@plt+0x1088>
   12248:	ldrbeq	r8, [ip, #328]	; 0x148
   1224c:	addeq	ip, ip, #320	; 0x140
   12250:	ldrbne	r8, [ip, #329]	; 0x149
   12254:	addne	ip, ip, #312	; 0x138
   12258:	orrs	r3, r4, r5
   1225c:	beq	12354 <__assert_fail@plt+0xe78>
   12260:	cmp	r2, #0
   12264:	sbcs	r3, r5, #0
   12268:	blt	12308 <__assert_fail@plt+0xe2c>
   1226c:	ldrd	r2, [ip]
   12270:	cmp	r2, #0
   12274:	sbcs	r1, r3, #0
   12278:	blt	12330 <__assert_fail@plt+0xe54>
   1227c:	mvn	r0, #0
   12280:	mvn	r1, #-2147483648	; 0x80000000
   12284:	subs	r0, r0, r4
   12288:	sbc	r1, r1, r5
   1228c:	cmp	r0, r2
   12290:	sbcs	r3, r1, r3
   12294:	movlt	r3, #1
   12298:	movge	r3, #0
   1229c:	cmp	r3, #0
   122a0:	bne	124f8 <__assert_fail@plt+0x101c>
   122a4:	ldrd	r6, [ip]
   122a8:	adds	r6, r6, r4
   122ac:	adc	r7, r7, r5
   122b0:	asr	sl, r7, #31
   122b4:	asr	fp, sl, #31
   122b8:	eor	r2, r6, sl
   122bc:	eor	r3, r7, fp
   122c0:	subs	r2, r2, sl
   122c4:	sbc	r3, r3, fp
   122c8:	ldr	r0, [pc, #664]	; 12568 <__assert_fail@plt+0x108c>
   122cc:	mov	r1, #0
   122d0:	and	r2, r2, r0
   122d4:	and	r3, r3, r1
   122d8:	eor	r2, r2, sl
   122dc:	eor	r3, r3, fp
   122e0:	subs	r2, r2, sl
   122e4:	sbc	r3, r3, fp
   122e8:	mov	r0, r2
   122ec:	mov	r1, r3
   122f0:	strd	r2, [ip]
   122f4:	cmp	r2, r6
   122f8:	sbcs	r3, r3, r7
   122fc:	movge	r0, #1
   12300:	bge	12488 <__assert_fail@plt+0xfac>
   12304:	b	12518 <__assert_fail@plt+0x103c>
   12308:	mov	r0, #0
   1230c:	mov	r1, #-2147483648	; 0x80000000
   12310:	subs	r0, r0, r2
   12314:	sbc	r1, r1, r5
   12318:	ldrd	r2, [ip]
   1231c:	cmp	r2, r0
   12320:	sbcs	r3, r3, r1
   12324:	movlt	r3, #1
   12328:	movge	r3, #0
   1232c:	b	1229c <__assert_fail@plt+0xdc0>
   12330:	mov	r0, #0
   12334:	mov	r1, #-2147483648	; 0x80000000
   12338:	subs	r2, r0, r2
   1233c:	sbc	r3, r1, r3
   12340:	cmp	r4, r2
   12344:	sbcs	r3, r5, r3
   12348:	movlt	r3, #1
   1234c:	movge	r3, #0
   12350:	b	1229c <__assert_fail@plt+0xdc0>
   12354:	ldrd	r6, [ip]
   12358:	orr	r2, r2, r6
   1235c:	orr	r3, r5, r7
   12360:	orrs	r3, r2, r3
   12364:	moveq	r3, r8
   12368:	orrne	r3, r8, #1
   1236c:	cmp	r3, #0
   12370:	moveq	r0, #1
   12374:	beq	12488 <__assert_fail@plt+0xfac>
   12378:	cmp	r9, #0
   1237c:	bne	123c4 <__assert_fail@plt+0xee8>
   12380:	mov	sl, r4
   12384:	mov	fp, r5
   12388:	ldr	r3, [pc, #468]	; 12564 <__assert_fail@plt+0x1088>
   1238c:	ldrb	r3, [r3, #330]	; 0x14a
   12390:	cmp	r3, #0
   12394:	beq	123b0 <__assert_fail@plt+0xed4>
   12398:	ldr	r3, [pc, #460]	; 1256c <__assert_fail@plt+0x1090>
   1239c:	ldrd	r2, [r3]
   123a0:	b	12420 <__assert_fail@plt+0xf44>
   123a4:	ldr	r3, [pc, #452]	; 12570 <__assert_fail@plt+0x1094>
   123a8:	ldrd	sl, [r3, #-8]
   123ac:	b	123d0 <__assert_fail@plt+0xef4>
   123b0:	bl	113a4 <__errno_location@plt>
   123b4:	mov	r3, #29
   123b8:	str	r3, [r0]
   123bc:	mvn	r0, #0
   123c0:	b	12480 <__assert_fail@plt+0xfa4>
   123c4:	mov	sl, r4
   123c8:	mov	fp, r5
   123cc:	mov	ip, #0
   123d0:	ldr	r3, [pc, #412]	; 12574 <__assert_fail@plt+0x1098>
   123d4:	ldrd	r2, [r3, #8]
   123d8:	mvn	r0, #0
   123dc:	mvn	r1, #0
   123e0:	cmp	r3, r1
   123e4:	cmpeq	r2, r0
   123e8:	beq	12418 <__assert_fail@plt+0xf3c>
   123ec:	cmp	r2, #0
   123f0:	sbcs	r1, r3, #0
   123f4:	blt	12490 <__assert_fail@plt+0xfb4>
   123f8:	cmp	ip, #0
   123fc:	beq	12418 <__assert_fail@plt+0xf3c>
   12400:	adds	r0, r6, sl
   12404:	adc	r1, r7, fp
   12408:	adds	r2, r2, r0
   1240c:	adc	r3, r3, r1
   12410:	ldr	r1, [pc, #348]	; 12574 <__assert_fail@plt+0x1098>
   12414:	strd	r2, [r1, #8]
   12418:	ldr	r3, [pc, #340]	; 12574 <__assert_fail@plt+0x1098>
   1241c:	ldrd	r2, [r3, #8]
   12420:	cmp	r2, #0
   12424:	sbcs	r1, r3, #0
   12428:	blt	124b4 <__assert_fail@plt+0xfd8>
   1242c:	orrs	r1, r4, r5
   12430:	movne	r8, #0
   12434:	andeq	r8, r8, #1
   12438:	orrs	r1, r6, r7
   1243c:	moveq	r8, #0
   12440:	andne	r8, r8, #1
   12444:	cmp	r8, #0
   12448:	bne	124bc <__assert_fail@plt+0xfe0>
   1244c:	subs	r2, r2, r6
   12450:	sbc	r3, r3, r7
   12454:	subs	sl, r2, sl
   12458:	sbc	fp, r3, fp
   1245c:	orrs	r3, r6, r7
   12460:	beq	124cc <__assert_fail@plt+0xff0>
   12464:	mov	r3, #4
   12468:	str	r3, [sp, #8]
   1246c:	strd	r6, [sp]
   12470:	mov	r2, sl
   12474:	mov	r3, fp
   12478:	mov	r0, r9
   1247c:	bl	11188 <posix_fadvise64@plt>
   12480:	adds	r0, r0, #1
   12484:	movne	r0, #1
   12488:	add	sp, sp, #20
   1248c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12490:	mov	r3, #1
   12494:	str	r3, [sp]
   12498:	mov	r2, #0
   1249c:	mov	r3, #0
   124a0:	mov	r0, r9
   124a4:	bl	112a8 <lseek64@plt>
   124a8:	ldr	r3, [pc, #196]	; 12574 <__assert_fail@plt+0x1098>
   124ac:	strd	r0, [r3, #8]
   124b0:	b	12418 <__assert_fail@plt+0xf3c>
   124b4:	mvn	r0, #0
   124b8:	b	12480 <__assert_fail@plt+0xfa4>
   124bc:	subs	r2, r2, r6
   124c0:	sbc	r3, r3, r7
   124c4:	mov	sl, r2
   124c8:	mov	fp, r3
   124cc:	ldr	r3, [pc, #144]	; 12564 <__assert_fail@plt+0x1088>
   124d0:	ldr	r2, [r3, #296]	; 0x128
   124d4:	asr	r3, r2, #31
   124d8:	mov	r0, sl
   124dc:	mov	r1, fp
   124e0:	bl	1ae54 <__assert_fail@plt+0x9978>
   124e4:	subs	sl, sl, r2
   124e8:	sbc	fp, fp, r3
   124ec:	mov	r6, #0
   124f0:	mov	r7, #0
   124f4:	b	12464 <__assert_fail@plt+0xf88>
   124f8:	ldr	r2, [pc, #104]	; 12568 <__assert_fail@plt+0x108c>
   124fc:	mov	r3, #0
   12500:	str	r2, [ip]
   12504:	str	r3, [ip, #4]
   12508:	mov	r0, r2
   1250c:	mov	r1, r3
   12510:	mvn	r6, #0
   12514:	mvn	r7, #-2147483648	; 0x80000000
   12518:	subs	r6, r6, r0
   1251c:	sbc	r7, r7, r1
   12520:	orrs	r3, r6, r7
   12524:	moveq	r0, #1
   12528:	beq	12488 <__assert_fail@plt+0xfac>
   1252c:	orr	r2, r4, r6
   12530:	orr	r3, r5, r7
   12534:	orrs	r3, r2, r3
   12538:	moveq	ip, r8
   1253c:	orrne	ip, r8, #1
   12540:	cmp	ip, #0
   12544:	beq	1255c <__assert_fail@plt+0x1080>
   12548:	cmp	r9, #0
   1254c:	bne	123a4 <__assert_fail@plt+0xec8>
   12550:	ldr	r3, [pc, #24]	; 12570 <__assert_fail@plt+0x1094>
   12554:	ldrd	sl, [r3]
   12558:	b	12388 <__assert_fail@plt+0xeac>
   1255c:	mov	r0, #1
   12560:	b	12488 <__assert_fail@plt+0xfac>
   12564:	andeq	lr, r2, r8, ror #3
   12568:	strdeq	pc, [r1], -pc	; <UNPREDICTABLE>
   1256c:	strdeq	lr, [r2], -r8
   12570:	andeq	lr, r2, r8, lsr #6
   12574:	andeq	lr, r2, r0, asr r1
   12578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1257c:	vpush	{d8}
   12580:	sub	sp, sp, #2016	; 0x7e0
   12584:	sub	sp, sp, #12
   12588:	mov	r8, r0
   1258c:	mov	r9, r1
   12590:	orrs	r3, r8, r9
   12594:	beq	126a8 <__assert_fail@plt+0x11cc>
   12598:	strd	r8, [sp, #24]
   1259c:	ldr	r4, [pc, #908]	; 12930 <__assert_fail@plt+0x1454>
   125a0:	add	sl, r4, #336	; 0x150
   125a4:	mov	r6, #1
   125a8:	mov	r7, #0
   125ac:	strd	r6, [sp, #8]
   125b0:	strd	r6, [sp]
   125b4:	ldr	r3, [pc, #888]	; 12934 <__assert_fail@plt+0x1458>
   125b8:	add	r2, sp, #60	; 0x3c
   125bc:	ldrd	r0, [sl]
   125c0:	bl	16578 <__assert_fail@plt+0x509c>
   125c4:	mov	r5, r0
   125c8:	add	r2, sp, #712	; 0x2c8
   125cc:	ldrd	r0, [sl]
   125d0:	strd	r6, [sp, #8]
   125d4:	strd	r6, [sp]
   125d8:	ldr	r3, [pc, #856]	; 12938 <__assert_fail@plt+0x145c>
   125dc:	add	r2, r2, #2
   125e0:	bl	16578 <__assert_fail@plt+0x509c>
   125e4:	mov	r6, r0
   125e8:	add	r4, r4, #352	; 0x160
   125ec:	ldrd	sl, [r4, #-8]
   125f0:	ldrd	r2, [sp, #24]
   125f4:	cmp	sl, r2
   125f8:	sbcs	r1, fp, r3
   125fc:	bge	126b4 <__assert_fail@plt+0x11d8>
   12600:	subs	r2, r2, sl
   12604:	sbc	r3, r3, fp
   12608:	mov	sl, r2
   1260c:	mov	fp, r3
   12610:	mov	r0, r2
   12614:	mov	r1, r3
   12618:	bl	1adf4 <__assert_fail@plt+0x9918>
   1261c:	vldr	d7, [pc, #756]	; 12918 <__assert_fail@plt+0x143c>
   12620:	vmov	d6, r0, r1
   12624:	vdiv.f64	d8, d6, d7
   12628:	sub	r3, r4, #16
   1262c:	ldrd	r0, [r3]
   12630:	strd	sl, [sp, #8]
   12634:	add	r3, pc, #740	; 0x2e4
   12638:	ldrd	r2, [r3]
   1263c:	strd	r2, [sp]
   12640:	ldr	r3, [pc, #748]	; 12934 <__assert_fail@plt+0x1458>
   12644:	add	r2, sp, #1360	; 0x550
   12648:	add	r2, r2, #8
   1264c:	bl	16578 <__assert_fail@plt+0x509c>
   12650:	mov	r4, r0
   12654:	bl	11380 <strlen@plt>
   12658:	ldr	r3, [pc, #732]	; 1293c <__assert_fail@plt+0x1460>
   1265c:	add	r2, r4, r0
   12660:	ldrh	r1, [r3]
   12664:	ldrb	r3, [r3, #2]
   12668:	strh	r1, [r4, r0]
   1266c:	strb	r3, [r2, #2]
   12670:	orrs	r3, r8, r9
   12674:	beq	12704 <__assert_fail@plt+0x1228>
   12678:	ldr	r3, [pc, #704]	; 12940 <__assert_fail@plt+0x1464>
   1267c:	ldr	r0, [r3]
   12680:	ldr	r3, [r0, #20]
   12684:	ldr	r2, [r0, #24]
   12688:	cmp	r3, r2
   1268c:	addcc	r2, r3, #1
   12690:	strcc	r2, [r0, #20]
   12694:	movcc	r2, #13
   12698:	strbcc	r2, [r3]
   1269c:	bcs	126f8 <__assert_fail@plt+0x121c>
   126a0:	ldr	r3, [pc, #668]	; 12944 <__assert_fail@plt+0x1468>
   126a4:	b	12708 <__assert_fail@plt+0x122c>
   126a8:	bl	16438 <__assert_fail@plt+0x4f5c>
   126ac:	strd	r0, [sp, #24]
   126b0:	b	1259c <__assert_fail@plt+0x10c0>
   126b4:	mov	r2, #5
   126b8:	ldr	r1, [pc, #648]	; 12948 <__assert_fail@plt+0x146c>
   126bc:	mov	r0, #0
   126c0:	bl	11230 <dcgettext@plt>
   126c4:	ldr	r1, [pc, #640]	; 1294c <__assert_fail@plt+0x1470>
   126c8:	str	r0, [sp, #4]
   126cc:	ldr	r3, [pc, #636]	; 12950 <__assert_fail@plt+0x1474>
   126d0:	str	r3, [sp]
   126d4:	mov	r3, r1
   126d8:	mov	r2, #1
   126dc:	add	r0, sp, #1360	; 0x550
   126e0:	add	r0, r0, #8
   126e4:	bl	114d0 <__snprintf_chk@plt>
   126e8:	add	r4, sp, #1360	; 0x550
   126ec:	add	r4, r4, #8
   126f0:	vldr	d8, [pc, #560]	; 12928 <__assert_fail@plt+0x144c>
   126f4:	b	12670 <__assert_fail@plt+0x1194>
   126f8:	mov	r1, #13
   126fc:	bl	11434 <__overflow@plt>
   12700:	b	126a0 <__assert_fail@plt+0x11c4>
   12704:	ldr	r3, [pc, #584]	; 12954 <__assert_fail@plt+0x1478>
   12708:	vstr	d8, [sp, #8]
   1270c:	str	r3, [sp]
   12710:	mov	r3, #24
   12714:	mov	r2, #1
   12718:	mov	r1, r3
   1271c:	add	r0, sp, #36	; 0x24
   12720:	bl	114d0 <__snprintf_chk@plt>
   12724:	mov	r0, r5
   12728:	bl	11380 <strlen@plt>
   1272c:	add	r0, r5, r0
   12730:	ldrb	r3, [r0, #-2]
   12734:	cmp	r3, #32
   12738:	bne	1280c <__assert_fail@plt+0x1330>
   1273c:	ldr	r3, [pc, #508]	; 12940 <__assert_fail@plt+0x1464>
   12740:	ldr	r7, [r3]
   12744:	ldr	r3, [pc, #484]	; 12930 <__assert_fail@plt+0x1454>
   12748:	ldr	r5, [r3, #336]	; 0x150
   1274c:	ldr	r6, [r3, #340]	; 0x154
   12750:	mov	r0, r5
   12754:	mov	r1, r6
   12758:	mvn	r2, #0
   1275c:	mov	r3, #0
   12760:	cmp	r6, r3
   12764:	cmpeq	r5, r2
   12768:	movls	r3, r5
   1276c:	bls	12784 <__assert_fail@plt+0x12a8>
   12770:	ldr	r2, [pc, #480]	; 12958 <__assert_fail@plt+0x147c>
   12774:	mov	r3, #0
   12778:	bl	1af28 <__assert_fail@plt+0x9a4c>
   1277c:	add	r3, r2, #999424	; 0xf4000
   12780:	add	r3, r3, #576	; 0x240
   12784:	mov	r2, #5
   12788:	str	r2, [sp]
   1278c:	ldr	r2, [pc, #456]	; 1295c <__assert_fail@plt+0x1480>
   12790:	ldr	r1, [pc, #456]	; 12960 <__assert_fail@plt+0x1484>
   12794:	mov	r0, #0
   12798:	bl	114c4 <dcngettext@plt>
   1279c:	str	r4, [sp, #12]
   127a0:	add	r3, sp, #36	; 0x24
   127a4:	str	r3, [sp, #8]
   127a8:	str	r5, [sp]
   127ac:	str	r6, [sp, #4]
   127b0:	mov	r2, r0
   127b4:	mov	r1, #1
   127b8:	mov	r0, r7
   127bc:	bl	11404 <__fprintf_chk@plt>
   127c0:	mov	r4, r0
   127c4:	orrs	r3, r8, r9
   127c8:	beq	128e4 <__assert_fail@plt+0x1408>
   127cc:	cmp	r4, #0
   127d0:	blt	127e4 <__assert_fail@plt+0x1308>
   127d4:	ldr	r3, [pc, #340]	; 12930 <__assert_fail@plt+0x1454>
   127d8:	ldr	r3, [r3, #280]	; 0x118
   127dc:	cmp	r4, r3
   127e0:	blt	128c0 <__assert_fail@plt+0x13e4>
   127e4:	ldr	r3, [pc, #324]	; 12930 <__assert_fail@plt+0x1454>
   127e8:	str	r4, [r3, #280]	; 0x118
   127ec:	ldr	r3, [pc, #368]	; 12964 <__assert_fail@plt+0x1488>
   127f0:	ldrd	r0, [r3]
   127f4:	ldr	r3, [pc, #364]	; 12968 <__assert_fail@plt+0x148c>
   127f8:	strd	r0, [r3, #16]
   127fc:	add	sp, sp, #2016	; 0x7e0
   12800:	add	sp, sp, #12
   12804:	vpop	{d8}
   12808:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1280c:	mov	r0, r6
   12810:	bl	11380 <strlen@plt>
   12814:	add	r0, r6, r0
   12818:	ldrb	r3, [r0, #-2]
   1281c:	cmp	r3, #32
   12820:	bne	12870 <__assert_fail@plt+0x1394>
   12824:	ldr	r3, [pc, #276]	; 12940 <__assert_fail@plt+0x1464>
   12828:	ldr	r6, [r3]
   1282c:	mov	r2, #5
   12830:	ldr	r1, [pc, #308]	; 1296c <__assert_fail@plt+0x1490>
   12834:	mov	r0, #0
   12838:	bl	11230 <dcgettext@plt>
   1283c:	str	r4, [sp, #16]
   12840:	add	r3, sp, #36	; 0x24
   12844:	str	r3, [sp, #12]
   12848:	str	r5, [sp, #8]
   1284c:	ldr	r3, [pc, #272]	; 12964 <__assert_fail@plt+0x1488>
   12850:	ldrd	r2, [r3]
   12854:	strd	r2, [sp]
   12858:	mov	r2, r0
   1285c:	mov	r1, #1
   12860:	mov	r0, r6
   12864:	bl	11404 <__fprintf_chk@plt>
   12868:	mov	r4, r0
   1286c:	b	127c4 <__assert_fail@plt+0x12e8>
   12870:	ldr	r3, [pc, #200]	; 12940 <__assert_fail@plt+0x1464>
   12874:	ldr	r7, [r3]
   12878:	mov	r2, #5
   1287c:	ldr	r1, [pc, #236]	; 12970 <__assert_fail@plt+0x1494>
   12880:	mov	r0, #0
   12884:	bl	11230 <dcgettext@plt>
   12888:	str	r4, [sp, #20]
   1288c:	add	r3, sp, #36	; 0x24
   12890:	str	r3, [sp, #16]
   12894:	str	r6, [sp, #12]
   12898:	str	r5, [sp, #8]
   1289c:	ldr	r3, [pc, #192]	; 12964 <__assert_fail@plt+0x1488>
   128a0:	ldrd	r2, [r3]
   128a4:	strd	r2, [sp]
   128a8:	mov	r2, r0
   128ac:	mov	r1, #1
   128b0:	mov	r0, r7
   128b4:	bl	11404 <__fprintf_chk@plt>
   128b8:	mov	r4, r0
   128bc:	b	127c4 <__assert_fail@plt+0x12e8>
   128c0:	ldr	r2, [pc, #120]	; 12940 <__assert_fail@plt+0x1464>
   128c4:	ldr	r0, [r2]
   128c8:	ldr	r2, [pc, #164]	; 12974 <__assert_fail@plt+0x1498>
   128cc:	str	r2, [sp]
   128d0:	sub	r3, r3, r4
   128d4:	ldr	r2, [pc, #156]	; 12978 <__assert_fail@plt+0x149c>
   128d8:	mov	r1, #1
   128dc:	bl	11404 <__fprintf_chk@plt>
   128e0:	b	127e4 <__assert_fail@plt+0x1308>
   128e4:	ldr	r3, [pc, #84]	; 12940 <__assert_fail@plt+0x1464>
   128e8:	ldr	r0, [r3]
   128ec:	ldr	r3, [r0, #20]
   128f0:	ldr	r2, [r0, #24]
   128f4:	cmp	r3, r2
   128f8:	addcc	r2, r3, #1
   128fc:	strcc	r2, [r0, #20]
   12900:	movcc	r2, #10
   12904:	strbcc	r2, [r3]
   12908:	bcc	127ec <__assert_fail@plt+0x1310>
   1290c:	mov	r1, #10
   12910:	bl	11434 <__overflow@plt>
   12914:	b	127ec <__assert_fail@plt+0x1310>
   12918:	andeq	r0, r0, r0
   1291c:	bicmi	ip, sp, r5, ror #26
   12920:	blcc	fe6c5128 <opterr@@GLIBC_2.4+0xfe696f48>
	...
   12930:	andeq	lr, r2, r8, ror #3
   12934:	ldrdeq	r0, [r0], -r1
   12938:	strdeq	r0, [r0], -r1
   1293c:	andeq	ip, r1, r0, lsl r6
   12940:	ldrdeq	lr, [r2], -r8
   12944:	strdeq	ip, [r1], -r8
   12948:	andeq	ip, r1, r0, lsl #12
   1294c:	andeq	r0, r0, lr, lsl #5
   12950:	andeq	ip, r1, ip, lsl #12
   12954:	strdeq	ip, [r1], -r0
   12958:	andeq	r4, pc, r0, asr #4
   1295c:	andeq	ip, r1, r4, lsl r6
   12960:	andeq	ip, r1, r0, lsr r6
   12964:	andeq	lr, r2, r8, lsr r3
   12968:	andeq	lr, r2, r0, asr r1
   1296c:	andeq	ip, r1, ip, asr #12
   12970:	andeq	ip, r1, ip, ror #12
   12974:			; <UNDEFINED> instruction: 0x0001c2bc
   12978:	muleq	r1, r0, r6
   1297c:	ldr	r3, [pc, #336]	; 12ad4 <__assert_fail@plt+0x15f8>
   12980:	ldr	r3, [r3, #24]
   12984:	cmp	r3, #1
   12988:	bxeq	lr
   1298c:	push	{r4, r5, r6, lr}
   12990:	sub	sp, sp, #32
   12994:	ldr	r3, [pc, #316]	; 12ad8 <__assert_fail@plt+0x15fc>
   12998:	ldr	r3, [r3, #280]	; 0x118
   1299c:	cmp	r3, #0
   129a0:	ble	129d8 <__assert_fail@plt+0x14fc>
   129a4:	ldr	r3, [pc, #304]	; 12adc <__assert_fail@plt+0x1600>
   129a8:	ldr	r0, [r3]
   129ac:	ldr	r3, [r0, #20]
   129b0:	ldr	r2, [r0, #24]
   129b4:	cmp	r3, r2
   129b8:	addcc	r2, r3, #1
   129bc:	strcc	r2, [r0, #20]
   129c0:	movcc	r2, #10
   129c4:	strbcc	r2, [r3]
   129c8:	bcs	12ac8 <__assert_fail@plt+0x15ec>
   129cc:	mov	r2, #0
   129d0:	ldr	r3, [pc, #256]	; 12ad8 <__assert_fail@plt+0x15fc>
   129d4:	str	r2, [r3, #280]	; 0x118
   129d8:	ldr	r3, [pc, #252]	; 12adc <__assert_fail@plt+0x1600>
   129dc:	ldr	r6, [r3]
   129e0:	mov	r2, #5
   129e4:	ldr	r1, [pc, #244]	; 12ae0 <__assert_fail@plt+0x1604>
   129e8:	mov	r0, #0
   129ec:	bl	11230 <dcgettext@plt>
   129f0:	ldr	r3, [pc, #224]	; 12ad8 <__assert_fail@plt+0x15fc>
   129f4:	add	r2, r3, #352	; 0x160
   129f8:	ldrd	r4, [r2]
   129fc:	strd	r4, [sp, #24]
   12a00:	add	r2, r3, #368	; 0x170
   12a04:	ldrd	r4, [r2, #-8]
   12a08:	strd	r4, [sp, #16]
   12a0c:	ldrd	r4, [r2]
   12a10:	strd	r4, [sp, #8]
   12a14:	add	r4, r3, #384	; 0x180
   12a18:	ldrd	r2, [r4, #-8]
   12a1c:	strd	r2, [sp]
   12a20:	mov	r2, r0
   12a24:	mov	r1, #1
   12a28:	mov	r0, r6
   12a2c:	bl	11404 <__fprintf_chk@plt>
   12a30:	ldrd	r4, [r4]
   12a34:	orrs	r3, r4, r5
   12a38:	beq	12aa4 <__assert_fail@plt+0x15c8>
   12a3c:	ldr	r3, [pc, #152]	; 12adc <__assert_fail@plt+0x1600>
   12a40:	ldr	r6, [r3]
   12a44:	mvn	r2, #0
   12a48:	mov	r3, #0
   12a4c:	cmp	r5, r3
   12a50:	cmpeq	r4, r2
   12a54:	movls	r3, r4
   12a58:	bls	12a78 <__assert_fail@plt+0x159c>
   12a5c:	ldr	r2, [pc, #128]	; 12ae4 <__assert_fail@plt+0x1608>
   12a60:	mov	r3, #0
   12a64:	mov	r0, r4
   12a68:	mov	r1, r5
   12a6c:	bl	1af28 <__assert_fail@plt+0x9a4c>
   12a70:	add	r3, r2, #999424	; 0xf4000
   12a74:	add	r3, r3, #576	; 0x240
   12a78:	mov	r2, #5
   12a7c:	str	r2, [sp]
   12a80:	ldr	r2, [pc, #96]	; 12ae8 <__assert_fail@plt+0x160c>
   12a84:	ldr	r1, [pc, #96]	; 12aec <__assert_fail@plt+0x1610>
   12a88:	mov	r0, #0
   12a8c:	bl	114c4 <dcngettext@plt>
   12a90:	strd	r4, [sp]
   12a94:	mov	r2, r0
   12a98:	mov	r1, #1
   12a9c:	mov	r0, r6
   12aa0:	bl	11404 <__fprintf_chk@plt>
   12aa4:	ldr	r3, [pc, #40]	; 12ad4 <__assert_fail@plt+0x15f8>
   12aa8:	ldr	r3, [r3, #24]
   12aac:	cmp	r3, #2
   12ab0:	beq	12ac0 <__assert_fail@plt+0x15e4>
   12ab4:	mov	r0, #0
   12ab8:	mov	r1, #0
   12abc:	bl	12578 <__assert_fail@plt+0x109c>
   12ac0:	add	sp, sp, #32
   12ac4:	pop	{r4, r5, r6, pc}
   12ac8:	mov	r1, #10
   12acc:	bl	11434 <__overflow@plt>
   12ad0:	b	129cc <__assert_fail@plt+0x14f0>
   12ad4:	andeq	lr, r2, r0, asr r1
   12ad8:	andeq	lr, r2, r8, ror #3
   12adc:	ldrdeq	lr, [r2], -r8
   12ae0:	muleq	r1, r4, r6
   12ae4:	andeq	r4, pc, r0, asr #4
   12ae8:	andeq	ip, r1, r0, asr #13
   12aec:	ldrdeq	ip, [r1], -r8
   12af0:	push	{r4, r5, r6, r7, r8, lr}
   12af4:	sub	sp, sp, #128	; 0x80
   12af8:	ldr	r4, [pc, #128]	; 12b80 <__assert_fail@plt+0x16a4>
   12afc:	add	r8, r4, #392	; 0x188
   12b00:	mov	r6, #0
   12b04:	mov	r7, #2
   12b08:	b	12b4c <__assert_fail@plt+0x1670>
   12b0c:	mov	r2, sp
   12b10:	mov	r1, r8
   12b14:	mov	r0, r6
   12b18:	bl	111ac <sigprocmask@plt>
   12b1c:	ldr	r5, [r4, #260]	; 0x104
   12b20:	ldr	r3, [r4, #264]	; 0x108
   12b24:	cmp	r3, #0
   12b28:	subne	r3, r3, #1
   12b2c:	strne	r3, [r4, #264]	; 0x108
   12b30:	mov	r2, r6
   12b34:	mov	r1, sp
   12b38:	mov	r0, r7
   12b3c:	bl	111ac <sigprocmask@plt>
   12b40:	cmp	r5, #0
   12b44:	bne	12b6c <__assert_fail@plt+0x1690>
   12b48:	bl	1297c <__assert_fail@plt+0x14a0>
   12b4c:	ldr	r3, [r4, #260]	; 0x104
   12b50:	cmp	r3, #0
   12b54:	bne	12b0c <__assert_fail@plt+0x1630>
   12b58:	ldr	r3, [r4, #264]	; 0x108
   12b5c:	cmp	r3, #0
   12b60:	bne	12b0c <__assert_fail@plt+0x1630>
   12b64:	add	sp, sp, #128	; 0x80
   12b68:	pop	{r4, r5, r6, r7, r8, pc}
   12b6c:	bl	13048 <__assert_fail@plt+0x1b6c>
   12b70:	bl	1297c <__assert_fail@plt+0x14a0>
   12b74:	mov	r0, r5
   12b78:	bl	11164 <raise@plt>
   12b7c:	b	12b4c <__assert_fail@plt+0x1670>
   12b80:	andeq	lr, r2, r8, ror #3
   12b84:	push	{r4, r5, r6, r7, lr}
   12b88:	sub	sp, sp, #12
   12b8c:	mov	r7, r0
   12b90:	mov	r6, r1
   12b94:	mov	r5, r2
   12b98:	b	12bbc <__assert_fail@plt+0x16e0>
   12b9c:	bl	113a4 <__errno_location@plt>
   12ba0:	ldr	r3, [r0]
   12ba4:	cmp	r3, #22
   12ba8:	beq	12be8 <__assert_fail@plt+0x170c>
   12bac:	bl	113a4 <__errno_location@plt>
   12bb0:	ldr	r3, [r0]
   12bb4:	cmp	r3, #4
   12bb8:	bne	12bfc <__assert_fail@plt+0x1720>
   12bbc:	bl	12af0 <__assert_fail@plt+0x1614>
   12bc0:	mov	r2, r5
   12bc4:	mov	r1, r6
   12bc8:	mov	r0, r7
   12bcc:	bl	11194 <read@plt>
   12bd0:	mov	r4, r0
   12bd4:	cmn	r0, #1
   12bd8:	beq	12b9c <__assert_fail@plt+0x16c0>
   12bdc:	cmp	r0, #0
   12be0:	blt	12bac <__assert_fail@plt+0x16d0>
   12be4:	b	12bfc <__assert_fail@plt+0x1720>
   12be8:	ldr	r3, [pc, #264]	; 12cf8 <__assert_fail@plt+0x181c>
   12bec:	ldr	r3, [r3, #520]	; 0x208
   12bf0:	cmp	r5, r3
   12bf4:	cmpgt	r3, #0
   12bf8:	bgt	12cd0 <__assert_fail@plt+0x17f4>
   12bfc:	cmp	r4, #0
   12c00:	movle	r6, #0
   12c04:	movgt	r6, #1
   12c08:	cmp	r5, r4
   12c0c:	cmpgt	r4, #0
   12c10:	bgt	12cf0 <__assert_fail@plt+0x1814>
   12c14:	cmp	r6, #0
   12c18:	beq	12cbc <__assert_fail@plt+0x17e0>
   12c1c:	ldr	r3, [pc, #212]	; 12cf8 <__assert_fail@plt+0x181c>
   12c20:	ldrb	r3, [r3, #528]	; 0x210
   12c24:	cmp	r3, #0
   12c28:	beq	12cbc <__assert_fail@plt+0x17e0>
   12c2c:	ldr	r3, [pc, #196]	; 12cf8 <__assert_fail@plt+0x181c>
   12c30:	ldr	r6, [r3, #520]	; 0x208
   12c34:	cmp	r6, #0
   12c38:	cmpgt	r5, r6
   12c3c:	ble	12cbc <__assert_fail@plt+0x17e0>
   12c40:	ldr	r3, [pc, #180]	; 12cfc <__assert_fail@plt+0x1820>
   12c44:	ldr	r3, [r3, #24]
   12c48:	cmp	r3, #1
   12c4c:	beq	12cb0 <__assert_fail@plt+0x17d4>
   12c50:	mov	r0, r6
   12c54:	asr	r1, r6, #31
   12c58:	mvn	r2, #0
   12c5c:	mov	r3, #0
   12c60:	cmp	r1, r3
   12c64:	cmpeq	r6, r2
   12c68:	movls	r3, r6
   12c6c:	bls	12c84 <__assert_fail@plt+0x17a8>
   12c70:	ldr	r2, [pc, #136]	; 12d00 <__assert_fail@plt+0x1824>
   12c74:	mov	r3, #0
   12c78:	bl	1af28 <__assert_fail@plt+0x9a4c>
   12c7c:	add	r3, r2, #999424	; 0xf4000
   12c80:	add	r3, r3, #576	; 0x240
   12c84:	mov	r2, #5
   12c88:	str	r2, [sp]
   12c8c:	ldr	r2, [pc, #112]	; 12d04 <__assert_fail@plt+0x1828>
   12c90:	ldr	r1, [pc, #112]	; 12d08 <__assert_fail@plt+0x182c>
   12c94:	mov	r0, #0
   12c98:	bl	114c4 <dcngettext@plt>
   12c9c:	mov	r3, r6
   12ca0:	mov	r2, r0
   12ca4:	mov	r1, #0
   12ca8:	mov	r0, r1
   12cac:	bl	11d0c <__assert_fail@plt+0x830>
   12cb0:	mov	r2, #0
   12cb4:	ldr	r3, [pc, #60]	; 12cf8 <__assert_fail@plt+0x181c>
   12cb8:	strb	r2, [r3, #528]	; 0x210
   12cbc:	ldr	r3, [pc, #52]	; 12cf8 <__assert_fail@plt+0x181c>
   12cc0:	str	r4, [r3, #520]	; 0x208
   12cc4:	mov	r0, r4
   12cc8:	add	sp, sp, #12
   12ccc:	pop	{r4, r5, r6, r7, pc}
   12cd0:	ldr	r3, [pc, #32]	; 12cf8 <__assert_fail@plt+0x181c>
   12cd4:	ldr	r3, [r3, #524]	; 0x20c
   12cd8:	tst	r3, #65536	; 0x10000
   12cdc:	beq	12bfc <__assert_fail@plt+0x1720>
   12ce0:	mov	r6, #0
   12ce4:	str	r6, [r0]
   12ce8:	mov	r4, r6
   12cec:	b	12c14 <__assert_fail@plt+0x1738>
   12cf0:	bl	12af0 <__assert_fail@plt+0x1614>
   12cf4:	b	12c14 <__assert_fail@plt+0x1738>
   12cf8:	andeq	lr, r2, r8, ror #3
   12cfc:	andeq	lr, r2, r0, asr r1
   12d00:	andeq	r4, pc, r0, asr #4
   12d04:	strdeq	ip, [r1], -r0
   12d08:	andeq	ip, r1, ip, lsr #14
   12d0c:	push	{r4, r5, r6, r7, r8, lr}
   12d10:	subs	r4, r2, #0
   12d14:	ble	12d5c <__assert_fail@plt+0x1880>
   12d18:	mov	r7, r0
   12d1c:	mov	r5, r1
   12d20:	mov	r6, #0
   12d24:	mov	r2, r4
   12d28:	mov	r1, r5
   12d2c:	mov	r0, r7
   12d30:	bl	12b84 <__assert_fail@plt+0x16a8>
   12d34:	cmp	r0, #0
   12d38:	poplt	{r4, r5, r6, r7, r8, pc}
   12d3c:	beq	12d64 <__assert_fail@plt+0x1888>
   12d40:	add	r6, r6, r0
   12d44:	add	r5, r5, r0
   12d48:	sub	r4, r4, r0
   12d4c:	cmp	r4, #0
   12d50:	bgt	12d24 <__assert_fail@plt+0x1848>
   12d54:	mov	r0, r6
   12d58:	pop	{r4, r5, r6, r7, r8, pc}
   12d5c:	mov	r0, #0
   12d60:	pop	{r4, r5, r6, r7, r8, pc}
   12d64:	mov	r0, r6
   12d68:	pop	{r4, r5, r6, r7, r8, pc}
   12d6c:	push	{r4, r5, r6, r7, r8, lr}
   12d70:	mov	r8, r0
   12d74:	mov	r7, r1
   12d78:	mov	r6, r2
   12d7c:	mov	r5, r3
   12d80:	bl	12af0 <__assert_fail@plt+0x1614>
   12d84:	mov	r3, r5
   12d88:	mov	r2, r6
   12d8c:	mov	r1, r7
   12d90:	mov	r0, r8
   12d94:	bl	162c8 <__assert_fail@plt+0x4dec>
   12d98:	subs	r4, r0, #0
   12d9c:	bge	12db0 <__assert_fail@plt+0x18d4>
   12da0:	bl	113a4 <__errno_location@plt>
   12da4:	ldr	r3, [r0]
   12da8:	cmp	r3, #4
   12dac:	beq	12d80 <__assert_fail@plt+0x18a4>
   12db0:	mov	r0, r4
   12db4:	pop	{r4, r5, r6, r7, r8, pc}
   12db8:	push	{r4, r5, r6, r7, r8, lr}
   12dbc:	mov	r7, r0
   12dc0:	mov	r6, r1
   12dc4:	mov	r5, #3
   12dc8:	bl	12af0 <__assert_fail@plt+0x1614>
   12dcc:	mov	r2, r6
   12dd0:	mov	r1, r7
   12dd4:	mov	r0, r5
   12dd8:	bl	11278 <__fxstat64@plt>
   12ddc:	subs	r4, r0, #0
   12de0:	bge	12df4 <__assert_fail@plt+0x1918>
   12de4:	bl	113a4 <__errno_location@plt>
   12de8:	ldr	r3, [r0]
   12dec:	cmp	r3, #4
   12df0:	beq	12dc8 <__assert_fail@plt+0x18ec>
   12df4:	mov	r0, r4
   12df8:	pop	{r4, r5, r6, r7, r8, pc}
   12dfc:	push	{r4, r5, r6, r7, lr}
   12e00:	sub	sp, sp, #108	; 0x6c
   12e04:	bics	r5, r1, #33024	; 0x8100
   12e08:	bne	12e14 <__assert_fail@plt+0x1938>
   12e0c:	add	sp, sp, #108	; 0x6c
   12e10:	pop	{r4, r5, r6, r7, pc}
   12e14:	mov	r6, r2
   12e18:	mov	r4, r0
   12e1c:	mov	r1, #3
   12e20:	bl	16070 <__assert_fail@plt+0x4b94>
   12e24:	subs	r7, r0, #0
   12e28:	blt	12e58 <__assert_fail@plt+0x197c>
   12e2c:	orr	r5, r5, r7
   12e30:	cmp	r7, r5
   12e34:	beq	12e0c <__assert_fail@plt+0x1930>
   12e38:	tst	r5, #16384	; 0x4000
   12e3c:	bne	12e94 <__assert_fail@plt+0x19b8>
   12e40:	mov	r2, r5
   12e44:	mov	r1, #4
   12e48:	mov	r0, r4
   12e4c:	bl	16070 <__assert_fail@plt+0x4b94>
   12e50:	cmn	r0, #1
   12e54:	bne	12e0c <__assert_fail@plt+0x1930>
   12e58:	bl	113a4 <__errno_location@plt>
   12e5c:	ldr	r4, [r0]
   12e60:	mov	r2, #5
   12e64:	ldr	r1, [pc, #144]	; 12efc <__assert_fail@plt+0x1a20>
   12e68:	mov	r0, #0
   12e6c:	bl	11230 <dcgettext@plt>
   12e70:	mov	r5, r0
   12e74:	mov	r1, r6
   12e78:	mov	r0, #4
   12e7c:	bl	18a3c <__assert_fail@plt+0x7560>
   12e80:	mov	r3, r0
   12e84:	mov	r2, r5
   12e88:	mov	r1, r4
   12e8c:	mov	r0, #1
   12e90:	bl	11d0c <__assert_fail@plt+0x830>
   12e94:	mov	r1, sp
   12e98:	mov	r0, r4
   12e9c:	bl	12db8 <__assert_fail@plt+0x18dc>
   12ea0:	cmp	r0, #0
   12ea4:	bne	12ec4 <__assert_fail@plt+0x19e8>
   12ea8:	ldr	r3, [sp, #16]
   12eac:	and	r3, r3, #61440	; 0xf000
   12eb0:	cmp	r3, #16384	; 0x4000
   12eb4:	beq	12ed4 <__assert_fail@plt+0x19f8>
   12eb8:	bl	113a4 <__errno_location@plt>
   12ebc:	mov	r3, #20
   12ec0:	str	r3, [r0]
   12ec4:	mov	r3, #0
   12ec8:	cmp	r3, #0
   12ecc:	bne	12e0c <__assert_fail@plt+0x1930>
   12ed0:	b	12e58 <__assert_fail@plt+0x197c>
   12ed4:	bic	r2, r5, #16384	; 0x4000
   12ed8:	cmp	r7, r2
   12edc:	beq	12e0c <__assert_fail@plt+0x1930>
   12ee0:	mov	r1, #4
   12ee4:	mov	r0, r4
   12ee8:	bl	16070 <__assert_fail@plt+0x4b94>
   12eec:	cmn	r0, #1
   12ef0:	beq	12e58 <__assert_fail@plt+0x197c>
   12ef4:	mov	r3, #1
   12ef8:	b	12ec8 <__assert_fail@plt+0x19ec>
   12efc:	andeq	ip, r1, r8, ror #14
   12f00:	push	{r4, r5, r6, lr}
   12f04:	ldr	r3, [pc, #304]	; 1303c <__assert_fail@plt+0x1b60>
   12f08:	ldr	r5, [r3, #288]	; 0x120
   12f0c:	bic	r2, r5, #49152	; 0xc000
   12f10:	str	r2, [r3, #288]	; 0x120
   12f14:	ands	r4, r5, #16384	; 0x4000
   12f18:	bne	12f2c <__assert_fail@plt+0x1a50>
   12f1c:	tst	r5, #32768	; 0x8000
   12f20:	bne	12fc0 <__assert_fail@plt+0x1ae4>
   12f24:	mov	r0, r4
   12f28:	pop	{r4, r5, r6, pc}
   12f2c:	mov	r6, #1
   12f30:	bl	12af0 <__assert_fail@plt+0x1614>
   12f34:	mov	r0, r6
   12f38:	bl	114a0 <fdatasync@plt>
   12f3c:	subs	r4, r0, #0
   12f40:	bge	12f74 <__assert_fail@plt+0x1a98>
   12f44:	bl	113a4 <__errno_location@plt>
   12f48:	ldr	r3, [r0]
   12f4c:	cmp	r3, #4
   12f50:	beq	12f30 <__assert_fail@plt+0x1a54>
   12f54:	bl	113a4 <__errno_location@plt>
   12f58:	ldr	r4, [r0]
   12f5c:	sub	r3, r4, #22
   12f60:	bics	r3, r3, #16
   12f64:	moveq	r4, #0
   12f68:	bne	12f80 <__assert_fail@plt+0x1aa4>
   12f6c:	orr	r5, r5, #32768	; 0x8000
   12f70:	b	12f1c <__assert_fail@plt+0x1a40>
   12f74:	cmp	r4, #0
   12f78:	beq	12f1c <__assert_fail@plt+0x1a40>
   12f7c:	b	12f54 <__assert_fail@plt+0x1a78>
   12f80:	mov	r2, #5
   12f84:	ldr	r1, [pc, #180]	; 13040 <__assert_fail@plt+0x1b64>
   12f88:	mov	r0, #0
   12f8c:	bl	11230 <dcgettext@plt>
   12f90:	mov	r6, r0
   12f94:	ldr	r3, [pc, #160]	; 1303c <__assert_fail@plt+0x1b60>
   12f98:	ldr	r1, [r3, #532]	; 0x214
   12f9c:	mov	r0, #4
   12fa0:	bl	18a3c <__assert_fail@plt+0x7560>
   12fa4:	mov	r3, r0
   12fa8:	mov	r2, r6
   12fac:	mov	r1, r4
   12fb0:	mov	r0, #0
   12fb4:	bl	11d0c <__assert_fail@plt+0x830>
   12fb8:	mov	r4, #1
   12fbc:	b	12f6c <__assert_fail@plt+0x1a90>
   12fc0:	mov	r5, #1
   12fc4:	bl	12af0 <__assert_fail@plt+0x1614>
   12fc8:	mov	r0, r5
   12fcc:	bl	11170 <fsync@plt>
   12fd0:	cmp	r0, #0
   12fd4:	bge	13030 <__assert_fail@plt+0x1b54>
   12fd8:	bl	113a4 <__errno_location@plt>
   12fdc:	ldr	r3, [r0]
   12fe0:	cmp	r3, #4
   12fe4:	beq	12fc4 <__assert_fail@plt+0x1ae8>
   12fe8:	bl	113a4 <__errno_location@plt>
   12fec:	ldr	r4, [r0]
   12ff0:	mov	r2, #5
   12ff4:	ldr	r1, [pc, #72]	; 13044 <__assert_fail@plt+0x1b68>
   12ff8:	mov	r0, #0
   12ffc:	bl	11230 <dcgettext@plt>
   13000:	mov	r5, r0
   13004:	ldr	r3, [pc, #48]	; 1303c <__assert_fail@plt+0x1b60>
   13008:	ldr	r1, [r3, #532]	; 0x214
   1300c:	mov	r0, #4
   13010:	bl	18a3c <__assert_fail@plt+0x7560>
   13014:	mov	r3, r0
   13018:	mov	r2, r5
   1301c:	mov	r1, r4
   13020:	mov	r0, #0
   13024:	bl	11d0c <__assert_fail@plt+0x830>
   13028:	mov	r4, #1
   1302c:	b	12f24 <__assert_fail@plt+0x1a48>
   13030:	cmp	r0, #0
   13034:	beq	12f24 <__assert_fail@plt+0x1a48>
   13038:	b	12fe8 <__assert_fail@plt+0x1b0c>
   1303c:	andeq	lr, r2, r8, ror #3
   13040:	andeq	ip, r1, r0, lsl #15
   13044:	muleq	r1, r8, r7
   13048:	push	{r4, r5, r6, lr}
   1304c:	ldr	r3, [pc, #184]	; 1310c <__assert_fail@plt+0x1c30>
   13050:	ldr	r3, [r3, #260]	; 0x104
   13054:	cmp	r3, #0
   13058:	bne	13068 <__assert_fail@plt+0x1b8c>
   1305c:	bl	12f00 <__assert_fail@plt+0x1a24>
   13060:	cmp	r0, #0
   13064:	bne	130c8 <__assert_fail@plt+0x1bec>
   13068:	mov	r0, #0
   1306c:	bl	11cb8 <__assert_fail@plt+0x7dc>
   13070:	cmp	r0, #0
   13074:	bne	130cc <__assert_fail@plt+0x1bf0>
   13078:	mov	r0, #1
   1307c:	bl	11cb8 <__assert_fail@plt+0x7dc>
   13080:	cmp	r0, #0
   13084:	popeq	{r4, r5, r6, pc}
   13088:	bl	113a4 <__errno_location@plt>
   1308c:	ldr	r4, [r0]
   13090:	mov	r2, #5
   13094:	ldr	r1, [pc, #116]	; 13110 <__assert_fail@plt+0x1c34>
   13098:	mov	r0, #0
   1309c:	bl	11230 <dcgettext@plt>
   130a0:	mov	r5, r0
   130a4:	ldr	r3, [pc, #96]	; 1310c <__assert_fail@plt+0x1c30>
   130a8:	ldr	r1, [r3, #532]	; 0x214
   130ac:	mov	r0, #4
   130b0:	bl	18a3c <__assert_fail@plt+0x7560>
   130b4:	mov	r3, r0
   130b8:	mov	r2, r5
   130bc:	mov	r1, r4
   130c0:	mov	r0, #1
   130c4:	bl	11d0c <__assert_fail@plt+0x830>
   130c8:	bl	11374 <exit@plt>
   130cc:	bl	113a4 <__errno_location@plt>
   130d0:	ldr	r4, [r0]
   130d4:	mov	r2, #5
   130d8:	ldr	r1, [pc, #52]	; 13114 <__assert_fail@plt+0x1c38>
   130dc:	mov	r0, #0
   130e0:	bl	11230 <dcgettext@plt>
   130e4:	mov	r5, r0
   130e8:	ldr	r3, [pc, #28]	; 1310c <__assert_fail@plt+0x1c30>
   130ec:	ldr	r1, [r3, #536]	; 0x218
   130f0:	mov	r0, #4
   130f4:	bl	18a3c <__assert_fail@plt+0x7560>
   130f8:	mov	r3, r0
   130fc:	mov	r2, r5
   13100:	mov	r1, r4
   13104:	mov	r0, #1
   13108:	bl	11d0c <__assert_fail@plt+0x830>
   1310c:	andeq	lr, r2, r8, ror #3
   13110:	andeq	ip, r1, r4, asr #15
   13114:	andeq	ip, r1, ip, lsr #15
   13118:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1311c:	sub	sp, sp, #20
   13120:	mov	sl, r0
   13124:	mov	r8, r1
   13128:	mov	r5, r2
   1312c:	ldr	r3, [pc, #504]	; 1332c <__assert_fail@plt+0x1e50>
   13130:	ldr	r3, [r3, #540]	; 0x21c
   13134:	tst	r3, #65536	; 0x10000
   13138:	beq	1314c <__assert_fail@plt+0x1c70>
   1313c:	ldr	r3, [pc, #488]	; 1332c <__assert_fail@plt+0x1e50>
   13140:	ldr	r3, [r3, #304]	; 0x130
   13144:	cmp	r3, r2
   13148:	bgt	13174 <__assert_fail@plt+0x1c98>
   1314c:	cmp	r5, #0
   13150:	ble	13324 <__assert_fail@plt+0x1e48>
   13154:	mov	r4, #0
   13158:	ldr	r6, [pc, #460]	; 1332c <__assert_fail@plt+0x1e50>
   1315c:	mov	r9, r4
   13160:	mov	r2, r5
   13164:	asr	r3, r5, #31
   13168:	strd	r2, [sp, #8]
   1316c:	mov	fp, #1
   13170:	b	13240 <__assert_fail@plt+0x1d64>
   13174:	mov	r1, #3
   13178:	mov	r0, #1
   1317c:	bl	16070 <__assert_fail@plt+0x4b94>
   13180:	bic	r2, r0, #65536	; 0x10000
   13184:	mov	r1, #4
   13188:	mov	r0, #1
   1318c:	bl	16070 <__assert_fail@plt+0x4b94>
   13190:	cmp	r0, #0
   13194:	beq	131ec <__assert_fail@plt+0x1d10>
   13198:	ldr	r3, [pc, #400]	; 13330 <__assert_fail@plt+0x1e54>
   1319c:	ldr	r3, [r3, #24]
   131a0:	cmp	r3, #1
   131a4:	beq	131ec <__assert_fail@plt+0x1d10>
   131a8:	bl	113a4 <__errno_location@plt>
   131ac:	ldr	r4, [r0]
   131b0:	mov	r2, #5
   131b4:	ldr	r1, [pc, #376]	; 13334 <__assert_fail@plt+0x1e58>
   131b8:	mov	r0, #0
   131bc:	bl	11230 <dcgettext@plt>
   131c0:	mov	r6, r0
   131c4:	ldr	r3, [pc, #352]	; 1332c <__assert_fail@plt+0x1e50>
   131c8:	ldr	r2, [r3, #532]	; 0x214
   131cc:	mov	r1, #3
   131d0:	mov	r0, #0
   131d4:	bl	18b08 <__assert_fail@plt+0x762c>
   131d8:	mov	r3, r0
   131dc:	mov	r2, r6
   131e0:	mov	r1, r4
   131e4:	mov	r0, #0
   131e8:	bl	11d0c <__assert_fail@plt+0x830>
   131ec:	ldr	r4, [pc, #312]	; 1332c <__assert_fail@plt+0x1e50>
   131f0:	mov	r0, #1
   131f4:	strb	r0, [r4, #329]	; 0x149
   131f8:	mov	r2, #0
   131fc:	mov	r3, #0
   13200:	bl	12230 <__assert_fail@plt+0xd54>
   13204:	ldr	r3, [r4, #288]	; 0x120
   13208:	orr	r3, r3, #32768	; 0x8000
   1320c:	str	r3, [r4, #288]	; 0x120
   13210:	b	1314c <__assert_fail@plt+0x1c70>
   13214:	sub	r2, r5, r4
   13218:	add	r1, r8, r4
   1321c:	mov	r0, sl
   13220:	bl	113ec <write@plt>
   13224:	cmp	r0, #0
   13228:	blt	132c8 <__assert_fail@plt+0x1dec>
   1322c:	cmp	r0, #0
   13230:	beq	132dc <__assert_fail@plt+0x1e00>
   13234:	add	r4, r4, r0
   13238:	cmp	r5, r4
   1323c:	ble	132e8 <__assert_fail@plt+0x1e0c>
   13240:	bl	12af0 <__assert_fail@plt+0x1614>
   13244:	strb	r9, [r6, #544]	; 0x220
   13248:	ldr	r7, [r6, #288]	; 0x120
   1324c:	tst	r7, #65536	; 0x10000
   13250:	beq	13214 <__assert_fail@plt+0x1d38>
   13254:	mov	r2, r5
   13258:	cmp	r5, #0
   1325c:	beq	13294 <__assert_fail@plt+0x1db8>
   13260:	mov	r3, r8
   13264:	ldrb	r1, [r3], #1
   13268:	cmp	r1, #0
   1326c:	bne	13214 <__assert_fail@plt+0x1d38>
   13270:	mov	r1, r3
   13274:	subs	r2, r2, #1
   13278:	beq	13294 <__assert_fail@plt+0x1db8>
   1327c:	tst	r2, #15
   13280:	bne	13264 <__assert_fail@plt+0x1d88>
   13284:	mov	r0, r8
   13288:	bl	11218 <memcmp@plt>
   1328c:	cmp	r0, #0
   13290:	bne	13214 <__assert_fail@plt+0x1d38>
   13294:	str	fp, [sp]
   13298:	ldrd	r2, [sp, #8]
   1329c:	mov	r0, sl
   132a0:	bl	112a8 <lseek64@plt>
   132a4:	cmp	r0, #0
   132a8:	sbcs	r3, r1, #0
   132ac:	biclt	r7, r7, #65536	; 0x10000
   132b0:	strlt	r7, [r6, #288]	; 0x120
   132b4:	blt	13214 <__assert_fail@plt+0x1d38>
   132b8:	strb	fp, [r6, #544]	; 0x220
   132bc:	cmp	r5, #0
   132c0:	movge	r0, r5
   132c4:	bge	13234 <__assert_fail@plt+0x1d58>
   132c8:	bl	113a4 <__errno_location@plt>
   132cc:	ldr	r3, [r0]
   132d0:	cmp	r3, #4
   132d4:	beq	13238 <__assert_fail@plt+0x1d5c>
   132d8:	b	132e8 <__assert_fail@plt+0x1e0c>
   132dc:	bl	113a4 <__errno_location@plt>
   132e0:	mov	r3, #28
   132e4:	str	r3, [r0]
   132e8:	ldr	r3, [pc, #60]	; 1332c <__assert_fail@plt+0x1e50>
   132ec:	ldrb	r3, [r3, #545]	; 0x221
   132f0:	cmp	r4, #0
   132f4:	moveq	r3, #0
   132f8:	andne	r3, r3, #1
   132fc:	cmp	r3, #0
   13300:	bne	13310 <__assert_fail@plt+0x1e34>
   13304:	mov	r0, r4
   13308:	add	sp, sp, #20
   1330c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13310:	mov	r2, r4
   13314:	asr	r3, r4, #31
   13318:	mov	r0, sl
   1331c:	bl	12230 <__assert_fail@plt+0xd54>
   13320:	b	13304 <__assert_fail@plt+0x1e28>
   13324:	mov	r4, #0
   13328:	b	13304 <__assert_fail@plt+0x1e28>
   1332c:	andeq	lr, r2, r8, ror #3
   13330:	andeq	lr, r2, r0, asr r1
   13334:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   13338:	push	{r4, lr}
   1333c:	bl	12af0 <__assert_fail@plt+0x1614>
   13340:	bl	13048 <__assert_fail@plt+0x1b6c>
   13344:	bl	1297c <__assert_fail@plt+0x14a0>
   13348:	pop	{r4, pc}
   1334c:	push	{r4, r5, r6, lr}
   13350:	ldr	r4, [pc, #188]	; 13414 <__assert_fail@plt+0x1f38>
   13354:	ldr	r2, [r4, #304]	; 0x130
   13358:	ldr	r1, [r4, #300]	; 0x12c
   1335c:	mov	r0, #1
   13360:	bl	13118 <__assert_fail@plt+0x1c3c>
   13364:	add	r1, r4, #336	; 0x150
   13368:	ldrd	r2, [r1]
   1336c:	adds	r2, r2, r0
   13370:	adc	r3, r3, r0, asr #31
   13374:	strd	r2, [r1]
   13378:	ldr	r3, [r4, #304]	; 0x130
   1337c:	cmp	r0, r3
   13380:	bne	133a8 <__assert_fail@plt+0x1ecc>
   13384:	ldr	r1, [pc, #136]	; 13414 <__assert_fail@plt+0x1f38>
   13388:	add	r0, r1, #368	; 0x170
   1338c:	ldrd	r2, [r0, #-8]
   13390:	adds	r2, r2, #1
   13394:	adc	r3, r3, #0
   13398:	strd	r2, [r0, #-8]
   1339c:	mov	r3, #0
   133a0:	str	r3, [r1, #548]	; 0x224
   133a4:	pop	{r4, r5, r6, pc}
   133a8:	mov	r5, r0
   133ac:	bl	113a4 <__errno_location@plt>
   133b0:	ldr	r4, [r0]
   133b4:	mov	r2, #5
   133b8:	ldr	r1, [pc, #88]	; 13418 <__assert_fail@plt+0x1f3c>
   133bc:	mov	r0, #0
   133c0:	bl	11230 <dcgettext@plt>
   133c4:	mov	r6, r0
   133c8:	ldr	r3, [pc, #68]	; 13414 <__assert_fail@plt+0x1f38>
   133cc:	ldr	r1, [r3, #532]	; 0x214
   133d0:	mov	r0, #4
   133d4:	bl	18a3c <__assert_fail@plt+0x7560>
   133d8:	mov	r3, r0
   133dc:	mov	r2, r6
   133e0:	mov	r1, r4
   133e4:	mov	r0, #0
   133e8:	bl	11d0c <__assert_fail@plt+0x830>
   133ec:	cmp	r5, #0
   133f0:	beq	13408 <__assert_fail@plt+0x1f2c>
   133f4:	ldr	r1, [pc, #32]	; 1341c <__assert_fail@plt+0x1f40>
   133f8:	ldrd	r2, [r1]
   133fc:	adds	r2, r2, #1
   13400:	adc	r3, r3, #0
   13404:	strd	r2, [r1]
   13408:	bl	13338 <__assert_fail@plt+0x1e5c>
   1340c:	mov	r0, #1
   13410:	bl	11374 <exit@plt>
   13414:	andeq	lr, r2, r8, ror #3
   13418:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1341c:	andeq	lr, r2, r8, asr #6
   13420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13424:	subs	r6, r1, #0
   13428:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1342c:	sub	r8, r0, #1
   13430:	ldr	r7, [pc, #216]	; 13510 <__assert_fail@plt+0x2034>
   13434:	ldr	r4, [pc, #216]	; 13514 <__assert_fail@plt+0x2038>
   13438:	add	r9, r4, #384	; 0x180
   1343c:	mov	sl, #0
   13440:	b	134bc <__assert_fail@plt+0x1fe0>
   13444:	ldr	r5, [r4, #552]	; 0x228
   13448:	ldr	r3, [r4, #556]	; 0x22c
   1344c:	cmp	r5, r3
   13450:	blt	1346c <__assert_fail@plt+0x1f90>
   13454:	str	sl, [r4, #552]	; 0x228
   13458:	b	134b4 <__assert_fail@plt+0x1fd8>
   1345c:	add	r5, r5, #1
   13460:	ldr	r3, [r4, #556]	; 0x22c
   13464:	cmp	r3, r5
   13468:	ble	13454 <__assert_fail@plt+0x1f78>
   1346c:	ldr	r1, [r4, #300]	; 0x12c
   13470:	ldr	r2, [r4, #548]	; 0x224
   13474:	add	r3, r2, #1
   13478:	str	r3, [r4, #548]	; 0x224
   1347c:	ldrb	r0, [r7, #29]
   13480:	strb	r0, [r1, r2]
   13484:	ldr	r2, [r4, #304]	; 0x130
   13488:	cmp	r3, r2
   1348c:	blt	1345c <__assert_fail@plt+0x1f80>
   13490:	bl	1334c <__assert_fail@plt+0x1e70>
   13494:	b	1345c <__assert_fail@plt+0x1f80>
   13498:	ldrd	r2, [r9]
   1349c:	adds	r2, r2, #1
   134a0:	adc	r3, r3, #0
   134a4:	strd	r2, [r9]
   134a8:	ldr	r3, [r4, #552]	; 0x228
   134ac:	add	r3, r3, #1
   134b0:	str	r3, [r4, #552]	; 0x228
   134b4:	subs	r6, r6, #1
   134b8:	beq	1350c <__assert_fail@plt+0x2030>
   134bc:	ldrb	r3, [r8, #1]!
   134c0:	ldrb	r2, [r7, #28]
   134c4:	cmp	r2, r3
   134c8:	beq	13444 <__assert_fail@plt+0x1f68>
   134cc:	ldr	r1, [r4, #552]	; 0x228
   134d0:	ldr	r2, [r4, #556]	; 0x22c
   134d4:	cmp	r1, r2
   134d8:	beq	13498 <__assert_fail@plt+0x1fbc>
   134dc:	cmp	r1, r2
   134e0:	bge	134a8 <__assert_fail@plt+0x1fcc>
   134e4:	ldr	r0, [r4, #300]	; 0x12c
   134e8:	ldr	r1, [r4, #548]	; 0x224
   134ec:	add	r2, r1, #1
   134f0:	str	r2, [r4, #548]	; 0x224
   134f4:	strb	r3, [r0, r1]
   134f8:	ldr	r3, [r4, #304]	; 0x130
   134fc:	cmp	r2, r3
   13500:	blt	134a8 <__assert_fail@plt+0x1fcc>
   13504:	bl	1334c <__assert_fail@plt+0x1e70>
   13508:	b	134a8 <__assert_fail@plt+0x1fcc>
   1350c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13510:	andeq	lr, r2, r0, asr r1
   13514:	andeq	lr, r2, r8, ror #3
   13518:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1351c:	subs	r9, r1, #0
   13520:	pople	{r4, r5, r6, r7, r8, r9, sl, pc}
   13524:	mov	r8, r0
   13528:	mov	r5, #0
   1352c:	ldr	r4, [pc, #252]	; 13630 <__assert_fail@plt+0x2154>
   13530:	ldr	r6, [pc, #252]	; 13634 <__assert_fail@plt+0x2158>
   13534:	mov	sl, r5
   13538:	b	13580 <__assert_fail@plt+0x20a4>
   1353c:	ldrb	r3, [r6, #29]
   13540:	cmp	r3, r7
   13544:	beq	135d4 <__assert_fail@plt+0x20f8>
   13548:	ldr	r3, [r4, #560]	; 0x230
   1354c:	cmp	r3, #0
   13550:	bne	135f8 <__assert_fail@plt+0x211c>
   13554:	ldr	r1, [r4, #300]	; 0x12c
   13558:	ldr	r2, [r4, #548]	; 0x224
   1355c:	add	r3, r2, #1
   13560:	str	r3, [r4, #548]	; 0x224
   13564:	strb	r7, [r1, r2]
   13568:	ldr	r2, [r4, #304]	; 0x130
   1356c:	cmp	r3, r2
   13570:	bge	13624 <__assert_fail@plt+0x2148>
   13574:	add	r5, r5, #1
   13578:	cmp	r9, r5
   1357c:	ble	1362c <__assert_fail@plt+0x2150>
   13580:	ldrb	r7, [r8, r5]
   13584:	ldr	r3, [r4, #552]	; 0x228
   13588:	add	r2, r3, #1
   1358c:	str	r2, [r4, #552]	; 0x228
   13590:	ldr	r2, [r4, #556]	; 0x22c
   13594:	cmp	r3, r2
   13598:	blt	1353c <__assert_fail@plt+0x2060>
   1359c:	str	sl, [r4, #560]	; 0x230
   135a0:	str	sl, [r4, #552]	; 0x228
   135a4:	sub	r5, r5, #1
   135a8:	ldr	r1, [r4, #300]	; 0x12c
   135ac:	ldr	r2, [r4, #548]	; 0x224
   135b0:	add	r3, r2, #1
   135b4:	str	r3, [r4, #548]	; 0x224
   135b8:	ldrb	r0, [r6, #28]
   135bc:	strb	r0, [r1, r2]
   135c0:	ldr	r2, [r4, #304]	; 0x130
   135c4:	cmp	r3, r2
   135c8:	blt	13574 <__assert_fail@plt+0x2098>
   135cc:	bl	1334c <__assert_fail@plt+0x1e70>
   135d0:	b	13574 <__assert_fail@plt+0x2098>
   135d4:	ldr	r3, [r4, #560]	; 0x230
   135d8:	add	r3, r3, #1
   135dc:	str	r3, [r4, #560]	; 0x230
   135e0:	b	13574 <__assert_fail@plt+0x2098>
   135e4:	ldr	r3, [r4, #560]	; 0x230
   135e8:	sub	r3, r3, #1
   135ec:	str	r3, [r4, #560]	; 0x230
   135f0:	cmp	r3, #0
   135f4:	beq	13554 <__assert_fail@plt+0x2078>
   135f8:	ldr	r1, [r4, #300]	; 0x12c
   135fc:	ldr	r2, [r4, #548]	; 0x224
   13600:	add	r3, r2, #1
   13604:	str	r3, [r4, #548]	; 0x224
   13608:	ldrb	r0, [r6, #29]
   1360c:	strb	r0, [r1, r2]
   13610:	ldr	r2, [r4, #304]	; 0x130
   13614:	cmp	r3, r2
   13618:	blt	135e4 <__assert_fail@plt+0x2108>
   1361c:	bl	1334c <__assert_fail@plt+0x1e70>
   13620:	b	135e4 <__assert_fail@plt+0x2108>
   13624:	bl	1334c <__assert_fail@plt+0x1e70>
   13628:	b	13574 <__assert_fail@plt+0x2098>
   1362c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13630:	andeq	lr, r2, r8, ror #3
   13634:	andeq	lr, r2, r0, asr r1
   13638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1363c:	sub	sp, sp, #140	; 0x8c
   13640:	mov	r6, r0
   13644:	str	r1, [sp, #28]
   13648:	mov	r4, r2
   1364c:	mov	r5, r3
   13650:	ldr	r9, [sp, #176]	; 0xb0
   13654:	ldr	r7, [sp, #180]	; 0xb4
   13658:	bl	113a4 <__errno_location@plt>
   1365c:	mov	sl, r0
   13660:	mov	r3, #0
   13664:	str	r3, [r0]
   13668:	cmp	r9, r3
   1366c:	blt	13724 <__assert_fail@plt+0x2248>
   13670:	cmp	r9, #0
   13674:	beq	13ac8 <__assert_fail@plt+0x25ec>
   13678:	cmp	r4, #0
   1367c:	sbcs	r3, r5, #0
   13680:	blt	137a4 <__assert_fail@plt+0x22c8>
   13684:	mov	r2, r9
   13688:	asr	r3, r9, #31
   1368c:	mvn	r0, #0
   13690:	mvn	r1, #-2147483648	; 0x80000000
   13694:	bl	1ae54 <__assert_fail@plt+0x9978>
   13698:	cmp	r0, r4
   1369c:	sbcs	r3, r1, r5
   136a0:	movlt	r3, #1
   136a4:	movge	r3, #0
   136a8:	cmp	r3, #0
   136ac:	bne	13b24 <__assert_fail@plt+0x2648>
   136b0:	asr	r3, r9, #31
   136b4:	mul	r1, r9, r5
   136b8:	mla	r1, r4, r3, r1
   136bc:	umull	r2, r3, r9, r4
   136c0:	strd	r2, [sp, #8]
   136c4:	add	r3, r1, r3
   136c8:	str	r3, [sp, #12]
   136cc:	ldrd	r2, [sp, #8]
   136d0:	strd	r2, [sp, #16]
   136d4:	ldr	ip, [r7]
   136d8:	cmp	ip, #0
   136dc:	blt	13804 <__assert_fail@plt+0x2328>
   136e0:	ldrd	r2, [sp, #8]
   136e4:	cmp	r2, #0
   136e8:	sbcs	r3, r3, #0
   136ec:	bge	13af8 <__assert_fail@plt+0x261c>
   136f0:	mov	r0, #0
   136f4:	mov	r1, #-2147483648	; 0x80000000
   136f8:	ldrd	r2, [sp, #16]
   136fc:	subs	r2, r0, r2
   13700:	sbc	r3, r1, r3
   13704:	mov	r0, r2
   13708:	mov	r1, r3
   1370c:	asr	r3, ip, #31
   13710:	cmp	ip, r0
   13714:	sbcs	r3, r3, r1
   13718:	movlt	r1, #1
   1371c:	movge	r1, #0
   13720:	b	13b1c <__assert_fail@plt+0x2640>
   13724:	cmp	r4, #0
   13728:	sbcs	r3, r5, #0
   1372c:	blt	13760 <__assert_fail@plt+0x2284>
   13730:	cmn	r9, #1
   13734:	beq	13788 <__assert_fail@plt+0x22ac>
   13738:	mov	r2, r9
   1373c:	asr	r3, r9, #31
   13740:	mov	r0, #0
   13744:	mov	r1, #-2147483648	; 0x80000000
   13748:	bl	1ae54 <__assert_fail@plt+0x9978>
   1374c:	cmp	r0, r4
   13750:	sbcs	r3, r1, r5
   13754:	movlt	r3, #1
   13758:	movge	r3, #0
   1375c:	b	136a8 <__assert_fail@plt+0x21cc>
   13760:	mov	r2, r9
   13764:	asr	r3, r9, #31
   13768:	mvn	r0, #0
   1376c:	mvn	r1, #-2147483648	; 0x80000000
   13770:	bl	1ae54 <__assert_fail@plt+0x9978>
   13774:	cmp	r4, r0
   13778:	sbcs	r3, r5, r1
   1377c:	movlt	r3, #1
   13780:	movge	r3, #0
   13784:	b	136a8 <__assert_fail@plt+0x21cc>
   13788:	adds	r2, r4, #0
   1378c:	adc	r3, r5, #-2147483648	; 0x80000000
   13790:	cmp	r2, #1
   13794:	sbcs	r3, r3, #0
   13798:	movge	r3, #1
   1379c:	movlt	r3, #0
   137a0:	b	136a8 <__assert_fail@plt+0x21cc>
   137a4:	mvn	r2, #0
   137a8:	mvn	r3, #0
   137ac:	cmp	r5, r3
   137b0:	cmpeq	r4, r2
   137b4:	beq	137e4 <__assert_fail@plt+0x2308>
   137b8:	mov	r2, r4
   137bc:	mov	r3, r5
   137c0:	mov	r0, #0
   137c4:	mov	r1, #-2147483648	; 0x80000000
   137c8:	bl	1ae54 <__assert_fail@plt+0x9978>
   137cc:	asr	r3, r9, #31
   137d0:	cmp	r0, r9
   137d4:	sbcs	r3, r1, r3
   137d8:	movlt	r3, #1
   137dc:	movge	r3, #0
   137e0:	b	136a8 <__assert_fail@plt+0x21cc>
   137e4:	asr	r3, r9, #31
   137e8:	adds	r2, r9, #0
   137ec:	adc	r3, r3, #-2147483648	; 0x80000000
   137f0:	cmp	r2, #1
   137f4:	sbcs	r3, r3, #0
   137f8:	movge	r3, #1
   137fc:	movlt	r3, #0
   13800:	b	136a8 <__assert_fail@plt+0x21cc>
   13804:	mov	r0, #0
   13808:	mov	r1, #-2147483648	; 0x80000000
   1380c:	subs	r0, r0, ip
   13810:	sbc	r1, r1, ip, asr #31
   13814:	ldrd	r2, [sp, #16]
   13818:	cmp	r2, r0
   1381c:	sbcs	r3, r3, r1
   13820:	movlt	r1, #1
   13824:	movge	r1, #0
   13828:	b	13b1c <__assert_fail@plt+0x2640>
   1382c:	ldrd	r2, [sp, #8]
   13830:	adds	r2, r2, ip
   13834:	adc	r3, r3, ip, asr #31
   13838:	mov	r0, r2
   1383c:	mov	r1, r3
   13840:	strd	r0, [sp, #8]
   13844:	mov	r3, #1
   13848:	str	r3, [sp]
   1384c:	mov	r3, r1
   13850:	mov	r0, r6
   13854:	bl	112a8 <lseek64@plt>
   13858:	cmp	r0, #0
   1385c:	sbcs	r3, r1, #0
   13860:	blt	13960 <__assert_fail@plt+0x2484>
   13864:	cmp	r6, #0
   13868:	beq	13880 <__assert_fail@plt+0x23a4>
   1386c:	mov	r3, #0
   13870:	str	r3, [r7]
   13874:	mov	r4, #0
   13878:	mov	r5, #0
   1387c:	b	13ab8 <__assert_fail@plt+0x25dc>
   13880:	add	r1, sp, #32
   13884:	mov	r0, #0
   13888:	bl	12db8 <__assert_fail@plt+0x18dc>
   1388c:	cmp	r0, #0
   13890:	bne	1391c <__assert_fail@plt+0x2440>
   13894:	ldr	r3, [sp, #48]	; 0x30
   13898:	and	r3, r3, #53248	; 0xd000
   1389c:	cmp	r3, #32768	; 0x8000
   138a0:	movne	r4, #0
   138a4:	movne	r5, #0
   138a8:	bne	13910 <__assert_fail@plt+0x2434>
   138ac:	ldr	r3, [pc, #784]	; 13bc4 <__assert_fail@plt+0x26e8>
   138b0:	ldrd	r6, [r3]
   138b4:	cmp	r6, #0
   138b8:	sbcs	r3, r7, #0
   138bc:	blt	13954 <__assert_fail@plt+0x2478>
   138c0:	ldrd	r0, [sp, #80]	; 0x50
   138c4:	subs	r6, r0, r6
   138c8:	sbc	r7, r1, r7
   138cc:	ldrd	r4, [sp, #8]
   138d0:	mov	r3, r5
   138d4:	cmp	r6, r4
   138d8:	sbcs	r3, r7, r3
   138dc:	movge	r4, #0
   138e0:	movge	r5, #0
   138e4:	bge	13910 <__assert_fail@plt+0x2434>
   138e8:	mov	r2, r9
   138ec:	asr	r3, r9, #31
   138f0:	subs	r4, r4, r0
   138f4:	sbc	r5, r5, r1
   138f8:	mov	r0, r4
   138fc:	mov	r1, r5
   13900:	bl	1ae54 <__assert_fail@plt+0x9978>
   13904:	mov	r4, r0
   13908:	mov	r5, r1
   1390c:	strd	r6, [sp, #8]
   13910:	ldrd	r0, [sp, #8]
   13914:	bl	116a8 <__assert_fail@plt+0x1cc>
   13918:	b	13ab8 <__assert_fail@plt+0x25dc>
   1391c:	ldr	r4, [sl]
   13920:	mov	r2, #5
   13924:	ldr	r1, [pc, #668]	; 13bc8 <__assert_fail@plt+0x26ec>
   13928:	mov	r0, #0
   1392c:	bl	11230 <dcgettext@plt>
   13930:	mov	r5, r0
   13934:	ldr	r1, [sp, #28]
   13938:	mov	r0, #4
   1393c:	bl	18a3c <__assert_fail@plt+0x7560>
   13940:	mov	r3, r0
   13944:	mov	r2, r5
   13948:	mov	r1, r4
   1394c:	mov	r0, #1
   13950:	bl	11d0c <__assert_fail@plt+0x830>
   13954:	mov	r4, #0
   13958:	mov	r5, #0
   1395c:	b	13910 <__assert_fail@plt+0x2434>
   13960:	ldr	r3, [sl]
   13964:	str	r3, [sp, #8]
   13968:	mov	r3, #2
   1396c:	str	r3, [sp]
   13970:	mov	r2, #0
   13974:	mov	r3, #0
   13978:	mov	r0, r6
   1397c:	bl	112a8 <lseek64@plt>
   13980:	cmp	r0, #0
   13984:	sbcs	r3, r1, #0
   13988:	blt	13b50 <__assert_fail@plt+0x2674>
   1398c:	ldr	r2, [sp, #8]
   13990:	mov	r3, r2
   13994:	cmp	r2, #0
   13998:	moveq	r3, #75	; 0x4b
   1399c:	str	r3, [sp, #8]
   139a0:	cmp	r6, #0
   139a4:	mov	r2, #5
   139a8:	ldreq	r1, [pc, #540]	; 13bcc <__assert_fail@plt+0x26f0>
   139ac:	ldrne	r1, [pc, #540]	; 13bd0 <__assert_fail@plt+0x26f4>
   139b0:	mov	r0, #0
   139b4:	bl	11230 <dcgettext@plt>
   139b8:	mov	r4, r0
   139bc:	ldr	r2, [sp, #28]
   139c0:	mov	r1, #3
   139c4:	mov	r0, #0
   139c8:	bl	18b08 <__assert_fail@plt+0x762c>
   139cc:	mov	r3, r0
   139d0:	mov	r2, r4
   139d4:	ldr	r1, [sp, #8]
   139d8:	mov	r0, #0
   139dc:	bl	11d0c <__assert_fail@plt+0x830>
   139e0:	bl	13338 <__assert_fail@plt+0x1e5c>
   139e4:	mov	r0, #1
   139e8:	bl	11374 <exit@plt>
   139ec:	mov	r3, #75	; 0x4b
   139f0:	str	r3, [sp, #8]
   139f4:	b	139a0 <__assert_fail@plt+0x24c4>
   139f8:	bl	12060 <__assert_fail@plt+0xb84>
   139fc:	ldr	r3, [pc, #464]	; 13bd4 <__assert_fail@plt+0x26f8>
   13a00:	ldr	r8, [r3, #300]	; 0x12c
   13a04:	b	13b64 <__assert_fail@plt+0x2688>
   13a08:	cmp	r6, #0
   13a0c:	bne	13a60 <__assert_fail@plt+0x2584>
   13a10:	ldr	r4, [sl]
   13a14:	mov	r2, #5
   13a18:	ldr	r1, [pc, #440]	; 13bd8 <__assert_fail@plt+0x26fc>
   13a1c:	mov	r0, #0
   13a20:	bl	11230 <dcgettext@plt>
   13a24:	mov	r5, r0
   13a28:	ldr	r1, [sp, #28]
   13a2c:	mov	r0, #4
   13a30:	bl	18a3c <__assert_fail@plt+0x7560>
   13a34:	mov	r3, r0
   13a38:	mov	r2, r5
   13a3c:	mov	r1, r4
   13a40:	mov	r0, #0
   13a44:	bl	11d0c <__assert_fail@plt+0x830>
   13a48:	ldr	r3, [pc, #388]	; 13bd4 <__assert_fail@plt+0x26f8>
   13a4c:	ldr	r3, [r3, #288]	; 0x120
   13a50:	tst	r3, #256	; 0x100
   13a54:	beq	13a98 <__assert_fail@plt+0x25bc>
   13a58:	bl	1297c <__assert_fail@plt+0x14a0>
   13a5c:	b	13a98 <__assert_fail@plt+0x25bc>
   13a60:	mov	r2, #5
   13a64:	ldr	r1, [pc, #356]	; 13bd0 <__assert_fail@plt+0x26f4>
   13a68:	mov	r0, #0
   13a6c:	bl	11230 <dcgettext@plt>
   13a70:	mov	r4, r0
   13a74:	ldr	r2, [sp, #28]
   13a78:	mov	r1, #3
   13a7c:	mov	r0, #0
   13a80:	bl	18b08 <__assert_fail@plt+0x762c>
   13a84:	mov	r3, r0
   13a88:	mov	r2, r4
   13a8c:	ldr	r1, [sp, #8]
   13a90:	mov	r0, #0
   13a94:	bl	11d0c <__assert_fail@plt+0x830>
   13a98:	bl	13338 <__assert_fail@plt+0x1e5c>
   13a9c:	mov	r0, #1
   13aa0:	bl	11374 <exit@plt>
   13aa4:	asr	r1, r0, #31
   13aa8:	bl	116a8 <__assert_fail@plt+0x1cc>
   13aac:	b	13b9c <__assert_fail@plt+0x26c0>
   13ab0:	mov	r3, #0
   13ab4:	str	r3, [r7]
   13ab8:	mov	r0, r4
   13abc:	mov	r1, r5
   13ac0:	add	sp, sp, #140	; 0x8c
   13ac4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ac8:	asr	r3, r9, #31
   13acc:	mul	r1, r4, r3
   13ad0:	mla	r1, r9, r5, r1
   13ad4:	umull	r2, r3, r4, r9
   13ad8:	strd	r2, [sp, #8]
   13adc:	add	r3, r1, r3
   13ae0:	str	r3, [sp, #12]
   13ae4:	ldrd	r2, [sp, #8]
   13ae8:	strd	r2, [sp, #16]
   13aec:	ldr	ip, [r7]
   13af0:	cmp	ip, #0
   13af4:	blt	13804 <__assert_fail@plt+0x2328>
   13af8:	mvn	r0, #0
   13afc:	mvn	r1, #-2147483648	; 0x80000000
   13b00:	subs	r0, r0, ip
   13b04:	sbc	r1, r1, ip, asr #31
   13b08:	ldrd	r2, [sp, #16]
   13b0c:	cmp	r0, r2
   13b10:	sbcs	r3, r1, r3
   13b14:	movlt	r1, #1
   13b18:	movge	r1, #0
   13b1c:	cmp	r1, #0
   13b20:	beq	1382c <__assert_fail@plt+0x2350>
   13b24:	mov	r3, #2
   13b28:	str	r3, [sp]
   13b2c:	mov	r2, #0
   13b30:	mov	r3, #0
   13b34:	mov	r0, r6
   13b38:	bl	112a8 <lseek64@plt>
   13b3c:	cmp	r0, #0
   13b40:	sbcs	r3, r1, #0
   13b44:	bge	139ec <__assert_fail@plt+0x2510>
   13b48:	mov	r3, #0
   13b4c:	str	r3, [sp, #8]
   13b50:	cmp	r6, #0
   13b54:	bne	139f8 <__assert_fail@plt+0x251c>
   13b58:	bl	11fbc <__assert_fail@plt+0xae0>
   13b5c:	ldr	r3, [pc, #112]	; 13bd4 <__assert_fail@plt+0x26f8>
   13b60:	ldr	r8, [r3, #284]	; 0x11c
   13b64:	ldr	fp, [pc, #104]	; 13bd4 <__assert_fail@plt+0x26f8>
   13b68:	ldr	r3, [fp, #564]	; 0x234
   13b6c:	orrs	r2, r4, r5
   13b70:	ldreq	r2, [r7]
   13b74:	movne	r2, r9
   13b78:	mov	r1, r8
   13b7c:	mov	r0, r6
   13b80:	blx	r3
   13b84:	cmp	r0, #0
   13b88:	blt	13a08 <__assert_fail@plt+0x252c>
   13b8c:	cmp	r0, #0
   13b90:	beq	13ab8 <__assert_fail@plt+0x25dc>
   13b94:	cmp	r6, #0
   13b98:	beq	13aa4 <__assert_fail@plt+0x25c8>
   13b9c:	orrs	r3, r4, r5
   13ba0:	beq	13ab0 <__assert_fail@plt+0x25d4>
   13ba4:	subs	r4, r4, #1
   13ba8:	sbc	r5, r5, #0
   13bac:	orrs	r3, r4, r5
   13bb0:	bne	13b68 <__assert_fail@plt+0x268c>
   13bb4:	ldr	r3, [r7]
   13bb8:	cmp	r3, #0
   13bbc:	bne	13b68 <__assert_fail@plt+0x268c>
   13bc0:	b	13ab8 <__assert_fail@plt+0x25dc>
   13bc4:	strdeq	lr, [r2], -r8
   13bc8:	andeq	ip, r1, ip, lsl #16
   13bcc:	andeq	ip, r1, ip, lsl r8
   13bd0:	andeq	ip, r1, ip, lsr #16
   13bd4:	andeq	lr, r2, r8, ror #3
   13bd8:	andeq	ip, r1, ip, lsr r8
   13bdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be0:	sub	sp, sp, #236	; 0xec
   13be4:	mov	r9, r0
   13be8:	mov	sl, r1
   13bec:	ldr	r0, [pc, #3596]	; 14a00 <__assert_fail@plt+0x3524>
   13bf0:	bl	112f0 <getenv@plt>
   13bf4:	mov	r4, r0
   13bf8:	ldr	r0, [pc, #3588]	; 14a04 <__assert_fail@plt+0x3528>
   13bfc:	bl	1144c <sigemptyset@plt>
   13c00:	cmp	r4, #0
   13c04:	beq	13d78 <__assert_fail@plt+0x289c>
   13c08:	add	r2, sp, #88	; 0x58
   13c0c:	mov	r1, #0
   13c10:	mov	r0, #2
   13c14:	bl	11284 <sigaction@plt>
   13c18:	ldr	r3, [sp, #88]	; 0x58
   13c1c:	cmp	r3, #1
   13c20:	beq	13c30 <__assert_fail@plt+0x2754>
   13c24:	mov	r1, #2
   13c28:	ldr	r0, [pc, #3540]	; 14a04 <__assert_fail@plt+0x3528>
   13c2c:	bl	11314 <sigaddset@plt>
   13c30:	ldr	r4, [pc, #3532]	; 14a04 <__assert_fail@plt+0x3528>
   13c34:	mov	r2, #128	; 0x80
   13c38:	mov	r1, r4
   13c3c:	add	r0, sp, #92	; 0x5c
   13c40:	bl	111e8 <memcpy@plt>
   13c44:	mov	r1, #10
   13c48:	mov	r0, r4
   13c4c:	bl	11254 <sigismember@plt>
   13c50:	cmp	r0, #0
   13c54:	bne	13d88 <__assert_fail@plt+0x28ac>
   13c58:	mov	r1, #2
   13c5c:	ldr	r0, [pc, #3488]	; 14a04 <__assert_fail@plt+0x3528>
   13c60:	bl	11254 <sigismember@plt>
   13c64:	cmp	r0, #0
   13c68:	bne	13da8 <__assert_fail@plt+0x28cc>
   13c6c:	ldr	r0, [sl]
   13c70:	bl	17120 <__assert_fail@plt+0x5c44>
   13c74:	ldr	r1, [pc, #3468]	; 14a08 <__assert_fail@plt+0x352c>
   13c78:	mov	r0, #6
   13c7c:	bl	11440 <setlocale@plt>
   13c80:	ldr	r6, [pc, #3460]	; 14a0c <__assert_fail@plt+0x3530>
   13c84:	ldr	r1, [pc, #3460]	; 14a10 <__assert_fail@plt+0x3534>
   13c88:	mov	r0, r6
   13c8c:	bl	1147c <bindtextdomain@plt>
   13c90:	mov	r0, r6
   13c94:	bl	11260 <textdomain@plt>
   13c98:	ldr	r0, [pc, #3444]	; 14a14 <__assert_fail@plt+0x3538>
   13c9c:	bl	1b14c <__assert_fail@plt+0x9c70>
   13ca0:	bl	11398 <getpagesize@plt>
   13ca4:	ldr	r4, [pc, #3652]	; 14af0 <__assert_fail@plt+0x3614>
   13ca8:	str	r0, [r4, #296]	; 0x128
   13cac:	mov	r5, #0
   13cb0:	str	r5, [sp, #24]
   13cb4:	ldr	r3, [pc, #3420]	; 14a18 <__assert_fail@plt+0x353c>
   13cb8:	str	r3, [sp, #20]
   13cbc:	ldr	r3, [pc, #3416]	; 14a1c <__assert_fail@plt+0x3540>
   13cc0:	str	r3, [sp, #16]
   13cc4:	ldr	r3, [pc, #3412]	; 14a20 <__assert_fail@plt+0x3544>
   13cc8:	str	r3, [sp, #12]
   13ccc:	ldr	r3, [pc, #3408]	; 14a24 <__assert_fail@plt+0x3548>
   13cd0:	str	r3, [sp, #8]
   13cd4:	mov	r3, #1
   13cd8:	str	r3, [sp, #4]
   13cdc:	ldr	r3, [pc, #3396]	; 14a28 <__assert_fail@plt+0x354c>
   13ce0:	ldr	r3, [r3]
   13ce4:	str	r3, [sp]
   13ce8:	mov	r3, r6
   13cec:	ldr	r2, [pc, #3384]	; 14a2c <__assert_fail@plt+0x3550>
   13cf0:	mov	r1, sl
   13cf4:	mov	r0, r9
   13cf8:	bl	17050 <__assert_fail@plt+0x5b74>
   13cfc:	ldr	r3, [pc, #3372]	; 14a30 <__assert_fail@plt+0x3554>
   13d00:	strb	r5, [r3]
   13d04:	sub	r4, r4, #1
   13d08:	mov	r2, r4
   13d0c:	mov	r3, r5
   13d10:	strb	r3, [r2, #1]!
   13d14:	add	r3, r3, #1
   13d18:	cmp	r3, #256	; 0x100
   13d1c:	bne	13d10 <__assert_fail@plt+0x2834>
   13d20:	mov	r3, #0
   13d24:	str	r3, [sp, #84]	; 0x54
   13d28:	ldr	r3, [pc, #3332]	; 14a34 <__assert_fail@plt+0x3558>
   13d2c:	ldr	r7, [r3]
   13d30:	cmp	r9, r7
   13d34:	ble	141b8 <__assert_fail@plt+0x2cdc>
   13d38:	add	sl, sl, r7, lsl #2
   13d3c:	mov	r2, #0
   13d40:	mov	r3, #0
   13d44:	strd	r2, [sp, #56]	; 0x38
   13d48:	mvn	r0, #0
   13d4c:	mvn	r1, #-2147483648	; 0x80000000
   13d50:	strd	r0, [sp, #64]	; 0x40
   13d54:	strd	r2, [sp, #40]	; 0x28
   13d58:	ldr	fp, [pc, #3472]	; 14af0 <__assert_fail@plt+0x3614>
   13d5c:	add	r3, fp, #304	; 0x130
   13d60:	str	r3, [sp, #76]	; 0x4c
   13d64:	ldr	r8, [pc, #3276]	; 14a38 <__assert_fail@plt+0x355c>
   13d68:	add	r3, r8, #632	; 0x278
   13d6c:	str	r3, [sp, #48]	; 0x30
   13d70:	str	r4, [sp, #72]	; 0x48
   13d74:	b	13e30 <__assert_fail@plt+0x2954>
   13d78:	mov	r1, #10
   13d7c:	ldr	r0, [pc, #3200]	; 14a04 <__assert_fail@plt+0x3528>
   13d80:	bl	11314 <sigaddset@plt>
   13d84:	b	13c08 <__assert_fail@plt+0x272c>
   13d88:	ldr	r3, [pc, #3244]	; 14a3c <__assert_fail@plt+0x3560>
   13d8c:	str	r3, [sp, #88]	; 0x58
   13d90:	mov	r2, #0
   13d94:	str	r2, [sp, #220]	; 0xdc
   13d98:	add	r1, sp, #88	; 0x58
   13d9c:	mov	r0, #10
   13da0:	bl	11284 <sigaction@plt>
   13da4:	b	13c58 <__assert_fail@plt+0x277c>
   13da8:	ldr	r3, [pc, #3216]	; 14a40 <__assert_fail@plt+0x3564>
   13dac:	str	r3, [sp, #88]	; 0x58
   13db0:	mov	r3, #-1073741824	; 0xc0000000
   13db4:	str	r3, [sp, #220]	; 0xdc
   13db8:	mov	r2, #0
   13dbc:	add	r1, sp, #88	; 0x58
   13dc0:	mov	r0, #2
   13dc4:	bl	11284 <sigaction@plt>
   13dc8:	b	13c6c <__assert_fail@plt+0x2790>
   13dcc:	mov	r2, #5
   13dd0:	ldr	r1, [pc, #3180]	; 14a44 <__assert_fail@plt+0x3568>
   13dd4:	mov	r0, #0
   13dd8:	bl	11230 <dcgettext@plt>
   13ddc:	mov	r4, r0
   13de0:	mov	r0, r5
   13de4:	bl	18c70 <__assert_fail@plt+0x7794>
   13de8:	mov	r3, r0
   13dec:	mov	r2, r4
   13df0:	mov	r1, #0
   13df4:	mov	r0, r1
   13df8:	bl	11d0c <__assert_fail@plt+0x830>
   13dfc:	mov	r0, #1
   13e00:	bl	11748 <__assert_fail@plt+0x26c>
   13e04:	ldr	r3, [pc, #3132]	; 14a48 <__assert_fail@plt+0x356c>
   13e08:	mov	r2, #0
   13e0c:	add	r1, r8, #56	; 0x38
   13e10:	mov	r0, r6
   13e14:	bl	1211c <__assert_fail@plt+0xc40>
   13e18:	ldr	r3, [fp, #288]	; 0x120
   13e1c:	orr	r0, r3, r0
   13e20:	str	r0, [fp, #288]	; 0x120
   13e24:	add	r7, r7, #1
   13e28:	cmp	r9, r7
   13e2c:	beq	140e0 <__assert_fail@plt+0x2c04>
   13e30:	ldr	r5, [sl], #4
   13e34:	mov	r1, #61	; 0x3d
   13e38:	mov	r0, r5
   13e3c:	bl	1138c <strchr@plt>
   13e40:	cmp	r0, #0
   13e44:	beq	13dcc <__assert_fail@plt+0x28f0>
   13e48:	add	r6, r0, #1
   13e4c:	ldr	r1, [pc, #3064]	; 14a4c <__assert_fail@plt+0x3570>
   13e50:	mov	r0, r5
   13e54:	bl	1166c <__assert_fail@plt+0x190>
   13e58:	cmp	r0, #0
   13e5c:	strne	r6, [fp, #536]	; 0x218
   13e60:	bne	13e24 <__assert_fail@plt+0x2948>
   13e64:	ldr	r1, [pc, #3044]	; 14a50 <__assert_fail@plt+0x3574>
   13e68:	mov	r0, r5
   13e6c:	bl	1166c <__assert_fail@plt+0x190>
   13e70:	cmp	r0, #0
   13e74:	strne	r6, [fp, #532]	; 0x214
   13e78:	bne	13e24 <__assert_fail@plt+0x2948>
   13e7c:	ldr	r1, [pc, #3024]	; 14a54 <__assert_fail@plt+0x3578>
   13e80:	mov	r0, r5
   13e84:	bl	1166c <__assert_fail@plt+0x190>
   13e88:	cmp	r0, #0
   13e8c:	bne	13e04 <__assert_fail@plt+0x2928>
   13e90:	ldr	r1, [pc, #3008]	; 14a58 <__assert_fail@plt+0x357c>
   13e94:	mov	r0, r5
   13e98:	bl	1166c <__assert_fail@plt+0x190>
   13e9c:	cmp	r0, #0
   13ea0:	bne	13eec <__assert_fail@plt+0x2a10>
   13ea4:	ldr	r1, [pc, #2992]	; 14a5c <__assert_fail@plt+0x3580>
   13ea8:	mov	r0, r5
   13eac:	bl	1166c <__assert_fail@plt+0x190>
   13eb0:	cmp	r0, #0
   13eb4:	bne	13f10 <__assert_fail@plt+0x2a34>
   13eb8:	ldr	r1, [pc, #2976]	; 14a60 <__assert_fail@plt+0x3584>
   13ebc:	mov	r0, r5
   13ec0:	bl	1166c <__assert_fail@plt+0x190>
   13ec4:	cmp	r0, #0
   13ec8:	beq	13f34 <__assert_fail@plt+0x2a58>
   13ecc:	ldr	r3, [pc, #2960]	; 14a64 <__assert_fail@plt+0x3588>
   13ed0:	mov	r2, #1
   13ed4:	ldr	r1, [sp, #48]	; 0x30
   13ed8:	mov	r0, r6
   13edc:	bl	1211c <__assert_fail@plt+0xc40>
   13ee0:	ldr	r3, [pc, #2888]	; 14a30 <__assert_fail@plt+0x3554>
   13ee4:	str	r0, [r3, #24]
   13ee8:	b	13e24 <__assert_fail@plt+0x2948>
   13eec:	ldr	r3, [pc, #2932]	; 14a68 <__assert_fail@plt+0x358c>
   13ef0:	mov	r2, #0
   13ef4:	add	r1, r8, #328	; 0x148
   13ef8:	mov	r0, r6
   13efc:	bl	1211c <__assert_fail@plt+0xc40>
   13f00:	ldr	r3, [fp, #524]	; 0x20c
   13f04:	orr	r0, r3, r0
   13f08:	str	r0, [fp, #524]	; 0x20c
   13f0c:	b	13e24 <__assert_fail@plt+0x2948>
   13f10:	ldr	r3, [pc, #2900]	; 14a6c <__assert_fail@plt+0x3590>
   13f14:	mov	r2, #0
   13f18:	add	r1, r8, #328	; 0x148
   13f1c:	mov	r0, r6
   13f20:	bl	1211c <__assert_fail@plt+0xc40>
   13f24:	ldr	r3, [fp, #540]	; 0x21c
   13f28:	orr	r3, r3, r0
   13f2c:	str	r3, [fp, #540]	; 0x21c
   13f30:	b	13e24 <__assert_fail@plt+0x2948>
   13f34:	add	r1, sp, #232	; 0xe8
   13f38:	mov	r3, #0
   13f3c:	str	r3, [r1, #-144]!	; 0xffffff70
   13f40:	mov	r0, r6
   13f44:	bl	11da0 <__assert_fail@plt+0x8c4>
   13f48:	strd	r0, [sp, #32]
   13f4c:	ldr	r1, [pc, #2844]	; 14a70 <__assert_fail@plt+0x3594>
   13f50:	mov	r0, r5
   13f54:	bl	1166c <__assert_fail@plt+0x190>
   13f58:	cmp	r0, #0
   13f5c:	bne	14014 <__assert_fail@plt+0x2b38>
   13f60:	ldr	r1, [pc, #2828]	; 14a74 <__assert_fail@plt+0x3598>
   13f64:	mov	r0, r5
   13f68:	bl	1166c <__assert_fail@plt+0x190>
   13f6c:	cmp	r0, #0
   13f70:	bne	1407c <__assert_fail@plt+0x2ba0>
   13f74:	ldr	r1, [pc, #2812]	; 14a78 <__assert_fail@plt+0x359c>
   13f78:	mov	r0, r5
   13f7c:	bl	1166c <__assert_fail@plt+0x190>
   13f80:	cmp	r0, #0
   13f84:	bne	1408c <__assert_fail@plt+0x2bb0>
   13f88:	ldr	r1, [pc, #2796]	; 14a7c <__assert_fail@plt+0x35a0>
   13f8c:	mov	r0, r5
   13f90:	bl	1166c <__assert_fail@plt+0x190>
   13f94:	cmp	r0, #0
   13f98:	bne	1409c <__assert_fail@plt+0x2bc0>
   13f9c:	ldr	r1, [pc, #2780]	; 14a80 <__assert_fail@plt+0x35a4>
   13fa0:	mov	r0, r5
   13fa4:	bl	1166c <__assert_fail@plt+0x190>
   13fa8:	cmp	r0, #0
   13fac:	bne	15d78 <__assert_fail@plt+0x489c>
   13fb0:	ldr	r1, [pc, #2764]	; 14a84 <__assert_fail@plt+0x35a8>
   13fb4:	mov	r0, r5
   13fb8:	bl	1166c <__assert_fail@plt+0x190>
   13fbc:	cmp	r0, #0
   13fc0:	bne	15da0 <__assert_fail@plt+0x48c4>
   13fc4:	ldr	r1, [pc, #2748]	; 14a88 <__assert_fail@plt+0x35ac>
   13fc8:	mov	r0, r5
   13fcc:	bl	1166c <__assert_fail@plt+0x190>
   13fd0:	cmp	r0, #0
   13fd4:	ldrdne	r2, [sp, #32]
   13fd8:	strdne	r2, [sp, #64]	; 0x40
   13fdc:	bne	15d80 <__assert_fail@plt+0x48a4>
   13fe0:	mov	r2, #5
   13fe4:	ldr	r1, [pc, #2648]	; 14a44 <__assert_fail@plt+0x3568>
   13fe8:	bl	11230 <dcgettext@plt>
   13fec:	mov	r4, r0
   13ff0:	mov	r0, r5
   13ff4:	bl	18c70 <__assert_fail@plt+0x7794>
   13ff8:	mov	r3, r0
   13ffc:	mov	r2, r4
   14000:	mov	r1, #0
   14004:	mov	r0, r1
   14008:	bl	11d0c <__assert_fail@plt+0x830>
   1400c:	mov	r0, #1
   14010:	bl	11748 <__assert_fail@plt+0x26c>
   14014:	add	r3, fp, #292	; 0x124
   14018:	mvn	r0, #-2147483647	; 0x80000001
   1401c:	mov	r1, #0
   14020:	ldrd	r4, [sp, #32]
   14024:	cmp	r4, #1
   14028:	sbcs	r2, r5, #0
   1402c:	bge	140ac <__assert_fail@plt+0x2bd0>
   14030:	mov	r3, #4
   14034:	str	r3, [sp, #88]	; 0x58
   14038:	ldr	r2, [sp, #88]	; 0x58
   1403c:	cmp	r2, #1
   14040:	moveq	r4, #75	; 0x4b
   14044:	movne	r4, #0
   14048:	mov	r2, #5
   1404c:	ldr	r1, [pc, #2616]	; 14a8c <__assert_fail@plt+0x35b0>
   14050:	mov	r0, #0
   14054:	bl	11230 <dcgettext@plt>
   14058:	mov	r5, r0
   1405c:	mov	r0, r6
   14060:	bl	18c70 <__assert_fail@plt+0x7794>
   14064:	str	r0, [sp]
   14068:	mov	r3, r5
   1406c:	ldr	r2, [pc, #2588]	; 14a90 <__assert_fail@plt+0x35b4>
   14070:	mov	r1, r4
   14074:	mov	r0, #1
   14078:	bl	11d0c <__assert_fail@plt+0x830>
   1407c:	ldr	r3, [sp, #76]	; 0x4c
   14080:	mvn	r0, #-2147483647	; 0x80000001
   14084:	mov	r1, #0
   14088:	b	14020 <__assert_fail@plt+0x2b44>
   1408c:	add	r3, sp, #84	; 0x54
   14090:	mvn	r0, #-2147483647	; 0x80000001
   14094:	mov	r1, #0
   14098:	b	14020 <__assert_fail@plt+0x2b44>
   1409c:	add	r3, fp, #556	; 0x22c
   140a0:	mvn	r0, #-2147483648	; 0x80000000
   140a4:	mov	r1, #0
   140a8:	b	14020 <__assert_fail@plt+0x2b44>
   140ac:	ldrd	r4, [sp, #32]
   140b0:	cmp	r0, r4
   140b4:	sbcs	r2, r1, r5
   140b8:	movlt	r3, #1
   140bc:	strlt	r3, [sp, #88]	; 0x58
   140c0:	blt	14038 <__assert_fail@plt+0x2b5c>
   140c4:	ldr	r2, [sp, #88]	; 0x58
   140c8:	cmp	r2, #0
   140cc:	bne	1403c <__assert_fail@plt+0x2b60>
   140d0:	cmp	r3, #0
   140d4:	ldrne	r2, [sp, #32]
   140d8:	strne	r2, [r3]
   140dc:	b	13e24 <__assert_fail@plt+0x2948>
   140e0:	ldr	r4, [sp, #72]	; 0x48
   140e4:	ldr	r3, [sp, #84]	; 0x54
   140e8:	cmp	r3, #0
   140ec:	beq	141d4 <__assert_fail@plt+0x2cf8>
   140f0:	ldr	r2, [pc, #2552]	; 14af0 <__assert_fail@plt+0x3614>
   140f4:	str	r3, [r2, #304]	; 0x130
   140f8:	str	r3, [r2, #292]	; 0x124
   140fc:	ldr	r3, [pc, #2540]	; 14af0 <__assert_fail@plt+0x3614>
   14100:	ldr	r3, [r3, #556]	; 0x22c
   14104:	cmp	r3, #0
   14108:	ldreq	r2, [pc, #2528]	; 14af0 <__assert_fail@plt+0x3614>
   1410c:	ldreq	r3, [r2, #288]	; 0x120
   14110:	biceq	r3, r3, #24
   14114:	streq	r3, [r2, #288]	; 0x120
   14118:	ldr	r3, [pc, #2512]	; 14af0 <__assert_fail@plt+0x3614>
   1411c:	ldr	r3, [r3, #524]	; 0x20c
   14120:	ldr	r2, [pc, #2412]	; 14a94 <__assert_fail@plt+0x35b8>
   14124:	and	r2, r2, r3
   14128:	cmp	r2, #0
   1412c:	orrne	r3, r3, #1048576	; 0x100000
   14130:	orrne	r3, r3, #4096	; 0x1000
   14134:	ldrne	r2, [pc, #2484]	; 14af0 <__assert_fail@plt+0x3614>
   14138:	strne	r3, [r2, #524]	; 0x20c
   1413c:	ldr	r3, [pc, #2476]	; 14af0 <__assert_fail@plt+0x3614>
   14140:	ldr	r6, [r3, #540]	; 0x21c
   14144:	tst	r6, #1
   14148:	bne	14214 <__assert_fail@plt+0x2d38>
   1414c:	ldr	r3, [pc, #2460]	; 14af0 <__assert_fail@plt+0x3614>
   14150:	ldr	r5, [r3, #524]	; 0x20c
   14154:	tst	r5, #16
   14158:	bne	14250 <__assert_fail@plt+0x2d74>
   1415c:	tst	r6, #12
   14160:	bne	1428c <__assert_fail@plt+0x2db0>
   14164:	ldrd	r0, [sp, #40]	; 0x28
   14168:	mov	r3, r0
   1416c:	orrs	r3, r3, r1
   14170:	movne	r3, #1
   14174:	moveq	r3, #0
   14178:	ands	r3, r3, r5, lsr #3
   1417c:	beq	142d4 <__assert_fail@plt+0x2df8>
   14180:	ldr	r7, [pc, #2408]	; 14af0 <__assert_fail@plt+0x3614>
   14184:	ldr	r8, [r7, #292]	; 0x124
   14188:	asr	r9, r8, #31
   1418c:	add	sl, r7, #576	; 0x240
   14190:	mov	r2, r8
   14194:	mov	r3, r9
   14198:	bl	1ae54 <__assert_fail@plt+0x9978>
   1419c:	strd	r0, [sl, #-8]
   141a0:	mov	r2, r8
   141a4:	mov	r3, r9
   141a8:	ldrd	r0, [sp, #40]	; 0x28
   141ac:	bl	1ae54 <__assert_fail@plt+0x9978>
   141b0:	str	r2, [r7, #576]	; 0x240
   141b4:	b	142ec <__assert_fail@plt+0x2e10>
   141b8:	mvn	r2, #0
   141bc:	mvn	r3, #-2147483648	; 0x80000000
   141c0:	strd	r2, [sp, #64]	; 0x40
   141c4:	mov	r2, #0
   141c8:	mov	r3, #0
   141cc:	strd	r2, [sp, #40]	; 0x28
   141d0:	strd	r2, [sp, #56]	; 0x38
   141d4:	ldr	r3, [pc, #2324]	; 14af0 <__assert_fail@plt+0x3614>
   141d8:	ldr	r2, [r3, #288]	; 0x120
   141dc:	orr	r2, r2, #2048	; 0x800
   141e0:	str	r2, [r3, #288]	; 0x120
   141e4:	ldr	r3, [r3, #292]	; 0x124
   141e8:	cmp	r3, #0
   141ec:	moveq	r2, #512	; 0x200
   141f0:	ldreq	r3, [pc, #2296]	; 14af0 <__assert_fail@plt+0x3614>
   141f4:	streq	r2, [r3, #292]	; 0x124
   141f8:	ldr	r3, [pc, #2288]	; 14af0 <__assert_fail@plt+0x3614>
   141fc:	ldr	r3, [r3, #304]	; 0x130
   14200:	cmp	r3, #0
   14204:	moveq	r2, #512	; 0x200
   14208:	ldreq	r3, [pc, #2272]	; 14af0 <__assert_fail@plt+0x3614>
   1420c:	streq	r2, [r3, #304]	; 0x130
   14210:	b	140fc <__assert_fail@plt+0x2c20>
   14214:	mov	r2, #5
   14218:	ldr	r1, [pc, #2124]	; 14a6c <__assert_fail@plt+0x3590>
   1421c:	mov	r0, #0
   14220:	bl	11230 <dcgettext@plt>
   14224:	mov	r4, r0
   14228:	ldr	r0, [pc, #2152]	; 14a98 <__assert_fail@plt+0x35bc>
   1422c:	bl	18c70 <__assert_fail@plt+0x7794>
   14230:	str	r0, [sp]
   14234:	mov	r3, r4
   14238:	ldr	r2, [pc, #2128]	; 14a90 <__assert_fail@plt+0x35b4>
   1423c:	mov	r1, #0
   14240:	mov	r0, r1
   14244:	bl	11d0c <__assert_fail@plt+0x830>
   14248:	mov	r0, #1
   1424c:	bl	11748 <__assert_fail@plt+0x26c>
   14250:	mov	r2, #5
   14254:	ldr	r1, [pc, #2060]	; 14a68 <__assert_fail@plt+0x358c>
   14258:	mov	r0, #0
   1425c:	bl	11230 <dcgettext@plt>
   14260:	mov	r4, r0
   14264:	ldr	r0, [pc, #2096]	; 14a9c <__assert_fail@plt+0x35c0>
   14268:	bl	18c70 <__assert_fail@plt+0x7794>
   1426c:	str	r0, [sp]
   14270:	mov	r3, r4
   14274:	ldr	r2, [pc, #2068]	; 14a90 <__assert_fail@plt+0x35b4>
   14278:	mov	r1, #0
   1427c:	mov	r0, r1
   14280:	bl	11d0c <__assert_fail@plt+0x830>
   14284:	mov	r0, #1
   14288:	bl	11748 <__assert_fail@plt+0x26c>
   1428c:	mov	r2, #5
   14290:	ldr	r1, [pc, #2004]	; 14a6c <__assert_fail@plt+0x3590>
   14294:	mov	r0, #0
   14298:	bl	11230 <dcgettext@plt>
   1429c:	mov	r4, r0
   142a0:	tst	r6, #4
   142a4:	ldr	r3, [pc, #2036]	; 14aa0 <__assert_fail@plt+0x35c4>
   142a8:	ldr	r0, [pc, #2036]	; 14aa4 <__assert_fail@plt+0x35c8>
   142ac:	moveq	r0, r3
   142b0:	bl	18c70 <__assert_fail@plt+0x7794>
   142b4:	str	r0, [sp]
   142b8:	mov	r3, r4
   142bc:	ldr	r2, [pc, #1996]	; 14a90 <__assert_fail@plt+0x35b4>
   142c0:	mov	r1, #0
   142c4:	mov	r0, r1
   142c8:	bl	11d0c <__assert_fail@plt+0x830>
   142cc:	mov	r0, #1
   142d0:	bl	11748 <__assert_fail@plt+0x26c>
   142d4:	ldrd	r0, [sp, #40]	; 0x28
   142d8:	mov	r2, r0
   142dc:	mov	r3, r1
   142e0:	orrs	r3, r2, r3
   142e4:	ldrne	r3, [pc, #1980]	; 14aa8 <__assert_fail@plt+0x35cc>
   142e8:	strdne	r0, [r3, #-8]
   142ec:	mvn	r2, #0
   142f0:	mvn	r3, #-2147483648	; 0x80000000
   142f4:	ldrd	sl, [sp, #64]	; 0x40
   142f8:	mov	r0, sl
   142fc:	mov	r1, fp
   14300:	cmp	fp, r3
   14304:	cmpeq	sl, r2
   14308:	movne	r3, #1
   1430c:	moveq	r3, #0
   14310:	ands	r3, r3, r5, lsr #2
   14314:	beq	14354 <__assert_fail@plt+0x2e78>
   14318:	ldr	r7, [pc, #2000]	; 14af0 <__assert_fail@plt+0x3614>
   1431c:	ldr	r8, [r7, #292]	; 0x124
   14320:	asr	r9, r8, #31
   14324:	mov	r2, r8
   14328:	mov	r3, r9
   1432c:	bl	1ae54 <__assert_fail@plt+0x9978>
   14330:	ldr	r3, [pc, #1784]	; 14a30 <__assert_fail@plt+0x3554>
   14334:	strd	r0, [r3, #32]
   14338:	mov	r2, r8
   1433c:	mov	r3, r9
   14340:	mov	r0, sl
   14344:	mov	r1, fp
   14348:	bl	1ae54 <__assert_fail@plt+0x9978>
   1434c:	str	r2, [r7, #580]	; 0x244
   14350:	b	14370 <__assert_fail@plt+0x2e94>
   14354:	mvn	r2, #0
   14358:	mvn	r3, #-2147483648	; 0x80000000
   1435c:	ldrd	r0, [sp, #64]	; 0x40
   14360:	cmp	r1, r3
   14364:	cmpeq	r0, r2
   14368:	ldrne	r3, [pc, #1728]	; 14a30 <__assert_fail@plt+0x3554>
   1436c:	strdne	r0, [r3, #32]
   14370:	ldrd	sl, [sp, #56]	; 0x38
   14374:	mov	r3, sl
   14378:	orrs	r3, r3, fp
   1437c:	movne	r3, #1
   14380:	moveq	r3, #0
   14384:	ands	r3, r3, r6, lsr #4
   14388:	beq	143d0 <__assert_fail@plt+0x2ef4>
   1438c:	ldr	r7, [pc, #1884]	; 14af0 <__assert_fail@plt+0x3614>
   14390:	ldr	r8, [r7, #304]	; 0x130
   14394:	asr	r9, r8, #31
   14398:	add	r7, r7, #592	; 0x250
   1439c:	mov	r2, r8
   143a0:	mov	r3, r9
   143a4:	mov	r0, sl
   143a8:	mov	r1, fp
   143ac:	bl	1ae54 <__assert_fail@plt+0x9978>
   143b0:	strd	r0, [r7, #-8]
   143b4:	mov	r2, r8
   143b8:	mov	r3, r9
   143bc:	mov	r0, sl
   143c0:	mov	r1, fp
   143c4:	bl	1ae54 <__assert_fail@plt+0x9978>
   143c8:	strd	r2, [r7]
   143cc:	b	143e8 <__assert_fail@plt+0x2f0c>
   143d0:	ldrd	r0, [sp, #56]	; 0x38
   143d4:	mov	r2, r0
   143d8:	mov	r3, r1
   143dc:	orrs	r3, r2, r3
   143e0:	ldrne	r3, [pc, #1796]	; 14aec <__assert_fail@plt+0x3610>
   143e4:	strdne	r0, [r3, #-8]
   143e8:	ldr	r3, [pc, #1792]	; 14af0 <__assert_fail@plt+0x3614>
   143ec:	ldr	r7, [r3, #288]	; 0x120
   143f0:	tst	r7, #2048	; 0x800
   143f4:	bne	14454 <__assert_fail@plt+0x2f78>
   143f8:	tst	r5, #1
   143fc:	bne	15e28 <__assert_fail@plt+0x494c>
   14400:	add	r3, r3, #576	; 0x240
   14404:	ldrd	r2, [r3, #-8]
   14408:	orrs	r3, r2, r3
   1440c:	bne	15dac <__assert_fail@plt+0x48d0>
   14410:	ldr	r3, [pc, #1560]	; 14a30 <__assert_fail@plt+0x3554>
   14414:	ldrd	r2, [r3, #32]
   14418:	subs	r2, r2, #1
   1441c:	sbc	r3, r3, #0
   14420:	mvn	r0, #2
   14424:	mvn	r1, #-2147483648	; 0x80000000
   14428:	cmp	r3, r1
   1442c:	cmpeq	r2, r0
   14430:	bls	15dac <__assert_fail@plt+0x48d0>
   14434:	orr	r3, r6, r5
   14438:	tst	r3, #65536	; 0x10000
   1443c:	bne	15dac <__assert_fail@plt+0x48d0>
   14440:	mov	r2, #0
   14444:	ldr	r3, [pc, #1700]	; 14af0 <__assert_fail@plt+0x3614>
   14448:	strb	r2, [r3, #528]	; 0x210
   1444c:	ldr	r2, [pc, #1624]	; 14aac <__assert_fail@plt+0x35d0>
   14450:	b	14470 <__assert_fail@plt+0x2f94>
   14454:	mov	r2, #0
   14458:	ldr	r3, [pc, #1680]	; 14af0 <__assert_fail@plt+0x3614>
   1445c:	strb	r2, [r3, #528]	; 0x210
   14460:	tst	r5, #1
   14464:	ldr	r3, [pc, #1600]	; 14aac <__assert_fail@plt+0x35d0>
   14468:	ldr	r2, [pc, #1600]	; 14ab0 <__assert_fail@plt+0x35d4>
   1446c:	moveq	r2, r3
   14470:	ldr	r3, [pc, #1656]	; 14af0 <__assert_fail@plt+0x3614>
   14474:	str	r2, [r3, #564]	; 0x234
   14478:	bic	r2, r5, #1
   1447c:	str	r2, [r3, #524]	; 0x20c
   14480:	and	r3, r7, #7
   14484:	sub	r2, r3, #1
   14488:	tst	r2, r3
   1448c:	bne	14740 <__assert_fail@plt+0x3264>
   14490:	and	r3, r7, #24
   14494:	sub	r2, r3, #1
   14498:	tst	r2, r3
   1449c:	bne	14760 <__assert_fail@plt+0x3284>
   144a0:	and	r3, r7, #96	; 0x60
   144a4:	sub	r2, r3, #1
   144a8:	tst	r2, r3
   144ac:	bne	14780 <__assert_fail@plt+0x32a4>
   144b0:	and	r3, r7, #12288	; 0x3000
   144b4:	sub	r2, r3, #1
   144b8:	tst	r2, r3
   144bc:	bne	147a0 <__assert_fail@plt+0x32c4>
   144c0:	ldr	r3, [pc, #1516]	; 14ab4 <__assert_fail@plt+0x35d8>
   144c4:	and	r3, r3, r5
   144c8:	sub	r2, r3, #1
   144cc:	tst	r2, r3
   144d0:	bne	147c0 <__assert_fail@plt+0x32e4>
   144d4:	ldr	r3, [pc, #1496]	; 14ab4 <__assert_fail@plt+0x35d8>
   144d8:	and	r3, r3, r6
   144dc:	sub	r2, r3, #1
   144e0:	ands	r3, r2, r3
   144e4:	str	r3, [sp, #40]	; 0x28
   144e8:	bne	147c0 <__assert_fail@plt+0x32e4>
   144ec:	tst	r5, #2
   144f0:	beq	14530 <__assert_fail@plt+0x3054>
   144f4:	mov	r2, #1
   144f8:	ldr	r3, [pc, #1520]	; 14af0 <__assert_fail@plt+0x3614>
   144fc:	strb	r2, [r3, #600]	; 0x258
   14500:	ldr	r3, [pc, #1320]	; 14a30 <__assert_fail@plt+0x3554>
   14504:	ldrd	r2, [r3, #32]
   14508:	orrs	r3, r2, r3
   1450c:	ldreq	r3, [pc, #1500]	; 14af0 <__assert_fail@plt+0x3614>
   14510:	ldreq	r3, [r3, #580]	; 0x244
   14514:	clzeq	r3, r3
   14518:	lsreq	r3, r3, #5
   1451c:	movne	r3, #0
   14520:	ldr	r2, [pc, #1480]	; 14af0 <__assert_fail@plt+0x3614>
   14524:	strb	r3, [r2, #328]	; 0x148
   14528:	bic	r5, r5, #3
   1452c:	str	r5, [r2, #524]	; 0x20c
   14530:	tst	r6, #2
   14534:	beq	14574 <__assert_fail@plt+0x3098>
   14538:	mov	r2, #1
   1453c:	ldr	r3, [pc, #1452]	; 14af0 <__assert_fail@plt+0x3614>
   14540:	strb	r2, [r3, #545]	; 0x221
   14544:	ldr	r3, [pc, #1252]	; 14a30 <__assert_fail@plt+0x3554>
   14548:	ldrd	r2, [r3, #32]
   1454c:	orrs	r3, r2, r3
   14550:	ldreq	r3, [pc, #1432]	; 14af0 <__assert_fail@plt+0x3614>
   14554:	ldreq	r3, [r3, #580]	; 0x244
   14558:	clzeq	r3, r3
   1455c:	lsreq	r3, r3, #5
   14560:	movne	r3, #0
   14564:	ldr	r2, [pc, #1412]	; 14af0 <__assert_fail@plt+0x3614>
   14568:	strb	r3, [r2, #329]	; 0x149
   1456c:	bic	r6, r6, #2
   14570:	str	r6, [r2, #540]	; 0x21c
   14574:	tst	r7, #1
   14578:	bne	147e0 <__assert_fail@plt+0x3304>
   1457c:	tst	r7, #64	; 0x40
   14580:	beq	147ec <__assert_fail@plt+0x3310>
   14584:	bl	11344 <__ctype_toupper_loc@plt>
   14588:	ldr	r1, [pc, #1320]	; 14ab8 <__assert_fail@plt+0x35dc>
   1458c:	ldrb	r2, [r4, #1]
   14590:	ldr	r3, [r0]
   14594:	ldrb	r3, [r3, r2, lsl #2]
   14598:	strb	r3, [r4, #1]!
   1459c:	cmp	r4, r1
   145a0:	bne	1458c <__assert_fail@plt+0x30b0>
   145a4:	mov	r2, #1
   145a8:	ldr	r3, [pc, #1344]	; 14af0 <__assert_fail@plt+0x3614>
   145ac:	strb	r2, [r3, #256]	; 0x100
   145b0:	tst	r7, #2
   145b4:	bne	14824 <__assert_fail@plt+0x3348>
   145b8:	tst	r7, #4
   145bc:	bne	14844 <__assert_fail@plt+0x3368>
   145c0:	ldr	r3, [pc, #1320]	; 14af0 <__assert_fail@plt+0x3614>
   145c4:	ldr	r1, [r3, #536]	; 0x218
   145c8:	cmp	r1, #0
   145cc:	beq	14864 <__assert_fail@plt+0x3388>
   145d0:	mov	r3, #0
   145d4:	ldr	r2, [pc, #1300]	; 14af0 <__assert_fail@plt+0x3614>
   145d8:	ldr	r2, [r2, #524]	; 0x20c
   145dc:	mov	r0, r3
   145e0:	bl	12d6c <__assert_fail@plt+0x1890>
   145e4:	cmp	r0, #0
   145e8:	blt	14890 <__assert_fail@plt+0x33b4>
   145ec:	mov	r3, #1
   145f0:	str	r3, [sp]
   145f4:	mov	r2, #0
   145f8:	mov	r3, #0
   145fc:	mov	r0, #0
   14600:	bl	112a8 <lseek64@plt>
   14604:	ldr	r3, [pc, #1252]	; 14af0 <__assert_fail@plt+0x3614>
   14608:	mvn	r2, r1
   1460c:	lsr	r2, r2, #31
   14610:	strb	r2, [r3, #330]	; 0x14a
   14614:	add	ip, r3, #272	; 0x110
   14618:	mov	r2, r0
   1461c:	mov	r3, r1
   14620:	cmp	r0, #0
   14624:	sbcs	r1, r3, #0
   14628:	movlt	r2, #0
   1462c:	movlt	r3, #0
   14630:	strd	r2, [ip]
   14634:	bl	113a4 <__errno_location@plt>
   14638:	mov	fp, r0
   1463c:	ldr	r3, [pc, #1196]	; 14af0 <__assert_fail@plt+0x3614>
   14640:	ldr	r2, [r0]
   14644:	str	r2, [r3, #604]	; 0x25c
   14648:	ldr	sl, [r3, #532]	; 0x214
   1464c:	cmp	sl, #0
   14650:	beq	148d0 <__assert_fail@plt+0x33f4>
   14654:	ldr	r3, [pc, #1172]	; 14af0 <__assert_fail@plt+0x3614>
   14658:	ldr	r9, [r3, #288]	; 0x120
   1465c:	tst	r9, #4096	; 0x1000
   14660:	ldr	r1, [sp, #40]	; 0x28
   14664:	movne	r3, r1
   14668:	moveq	r3, #64	; 0x40
   1466c:	ldr	r2, [pc, #1148]	; 14af0 <__assert_fail@plt+0x3614>
   14670:	ldr	r8, [r2, #540]	; 0x21c
   14674:	orr	r3, r3, r8
   14678:	ands	r8, r9, #8192	; 0x2000
   1467c:	movne	r8, #128	; 0x80
   14680:	orr	r8, r8, r3
   14684:	add	r3, r2, #592	; 0x250
   14688:	ldrd	r6, [r3, #-8]
   1468c:	orrs	r3, r6, r7
   14690:	bne	148fc <__assert_fail@plt+0x3420>
   14694:	tst	r9, #512	; 0x200
   14698:	movne	r3, r1
   1469c:	moveq	r3, #512	; 0x200
   146a0:	orr	r8, r8, r3
   146a4:	ldr	r4, [r2, #304]	; 0x130
   146a8:	cmp	r4, #0
   146ac:	blt	14994 <__assert_fail@plt+0x34b8>
   146b0:	cmp	r4, #0
   146b4:	bne	14af4 <__assert_fail@plt+0x3618>
   146b8:	asr	r1, r4, #31
   146bc:	mul	r3, r4, r7
   146c0:	mla	r3, r6, r1, r3
   146c4:	umull	r4, r5, r4, r6
   146c8:	add	r5, r3, r5
   146cc:	strd	r4, [sp, #32]
   146d0:	cmp	r4, #0
   146d4:	sbcs	r3, r5, #0
   146d8:	blt	14c58 <__assert_fail@plt+0x377c>
   146dc:	ldr	r3, [pc, #1032]	; 14aec <__assert_fail@plt+0x3610>
   146e0:	ldrd	r2, [r3]
   146e4:	strd	r2, [sp, #48]	; 0x30
   146e8:	cmp	r2, #0
   146ec:	sbcs	r3, r3, #0
   146f0:	blt	14c9c <__assert_fail@plt+0x37c0>
   146f4:	mvn	r2, #0
   146f8:	mvn	r3, #-2147483648	; 0x80000000
   146fc:	ldrd	r0, [sp, #32]
   14700:	subs	r0, r2, r0
   14704:	sbc	r1, r3, r1
   14708:	mov	r2, r0
   1470c:	mov	r3, r1
   14710:	ldrd	r0, [sp, #48]	; 0x30
   14714:	cmp	r2, r0
   14718:	sbcs	r3, r3, r1
   1471c:	movlt	r3, #1
   14720:	movge	r3, #0
   14724:	cmp	r3, #0
   14728:	beq	14cd0 <__assert_fail@plt+0x37f4>
   1472c:	ldr	r3, [pc, #952]	; 14aec <__assert_fail@plt+0x3610>
   14730:	ldrd	r2, [r3]
   14734:	adds	r4, r4, r2
   14738:	adc	r5, r5, r3
   1473c:	b	14b34 <__assert_fail@plt+0x3658>
   14740:	mov	r2, #5
   14744:	ldr	r1, [pc, #880]	; 14abc <__assert_fail@plt+0x35e0>
   14748:	mov	r0, #0
   1474c:	bl	11230 <dcgettext@plt>
   14750:	mov	r2, r0
   14754:	mov	r1, #0
   14758:	mov	r0, #1
   1475c:	bl	11d0c <__assert_fail@plt+0x830>
   14760:	mov	r2, #5
   14764:	ldr	r1, [pc, #852]	; 14ac0 <__assert_fail@plt+0x35e4>
   14768:	mov	r0, #0
   1476c:	bl	11230 <dcgettext@plt>
   14770:	mov	r2, r0
   14774:	mov	r1, #0
   14778:	mov	r0, #1
   1477c:	bl	11d0c <__assert_fail@plt+0x830>
   14780:	mov	r2, #5
   14784:	ldr	r1, [pc, #824]	; 14ac4 <__assert_fail@plt+0x35e8>
   14788:	mov	r0, #0
   1478c:	bl	11230 <dcgettext@plt>
   14790:	mov	r2, r0
   14794:	mov	r1, #0
   14798:	mov	r0, #1
   1479c:	bl	11d0c <__assert_fail@plt+0x830>
   147a0:	mov	r2, #5
   147a4:	ldr	r1, [pc, #796]	; 14ac8 <__assert_fail@plt+0x35ec>
   147a8:	mov	r0, #0
   147ac:	bl	11230 <dcgettext@plt>
   147b0:	mov	r2, r0
   147b4:	mov	r1, #0
   147b8:	mov	r0, #1
   147bc:	bl	11d0c <__assert_fail@plt+0x830>
   147c0:	mov	r2, #5
   147c4:	ldr	r1, [pc, #768]	; 14acc <__assert_fail@plt+0x35f0>
   147c8:	mov	r0, #0
   147cc:	bl	11230 <dcgettext@plt>
   147d0:	mov	r2, r0
   147d4:	mov	r1, #0
   147d8:	mov	r0, #1
   147dc:	bl	11d0c <__assert_fail@plt+0x830>
   147e0:	ldr	r0, [pc, #744]	; 14ad0 <__assert_fail@plt+0x35f4>
   147e4:	bl	11610 <__assert_fail@plt+0x134>
   147e8:	b	1457c <__assert_fail@plt+0x30a0>
   147ec:	tst	r7, #32
   147f0:	beq	145b0 <__assert_fail@plt+0x30d4>
   147f4:	bl	11338 <__ctype_tolower_loc@plt>
   147f8:	ldr	r1, [pc, #696]	; 14ab8 <__assert_fail@plt+0x35dc>
   147fc:	ldrb	r2, [r4, #1]
   14800:	ldr	r3, [r0]
   14804:	ldrb	r3, [r3, r2, lsl #2]
   14808:	strb	r3, [r4, #1]!
   1480c:	cmp	r4, r1
   14810:	bne	147fc <__assert_fail@plt+0x3320>
   14814:	mov	r2, #1
   14818:	ldr	r3, [pc, #720]	; 14af0 <__assert_fail@plt+0x3614>
   1481c:	strb	r2, [r3, #256]	; 0x100
   14820:	b	145b0 <__assert_fail@plt+0x30d4>
   14824:	ldr	r0, [pc, #680]	; 14ad4 <__assert_fail@plt+0x35f8>
   14828:	bl	11610 <__assert_fail@plt+0x134>
   1482c:	ldr	r3, [pc, #508]	; 14a30 <__assert_fail@plt+0x3554>
   14830:	mov	r2, #37	; 0x25
   14834:	strb	r2, [r3, #28]
   14838:	mov	r2, #64	; 0x40
   1483c:	strb	r2, [r3, #29]
   14840:	b	145c0 <__assert_fail@plt+0x30e4>
   14844:	ldr	r0, [pc, #652]	; 14ad8 <__assert_fail@plt+0x35fc>
   14848:	bl	11610 <__assert_fail@plt+0x134>
   1484c:	ldr	r3, [pc, #476]	; 14a30 <__assert_fail@plt+0x3554>
   14850:	mov	r2, #37	; 0x25
   14854:	strb	r2, [r3, #28]
   14858:	mov	r2, #64	; 0x40
   1485c:	strb	r2, [r3, #29]
   14860:	b	145c0 <__assert_fail@plt+0x30e4>
   14864:	mov	r2, #5
   14868:	ldr	r1, [pc, #620]	; 14adc <__assert_fail@plt+0x3600>
   1486c:	mov	r0, #0
   14870:	bl	11230 <dcgettext@plt>
   14874:	mov	r2, r0
   14878:	ldr	r3, [pc, #624]	; 14af0 <__assert_fail@plt+0x3614>
   1487c:	str	r0, [r3, #536]	; 0x218
   14880:	ldr	r1, [r3, #524]	; 0x20c
   14884:	mov	r0, #0
   14888:	bl	12dfc <__assert_fail@plt+0x1920>
   1488c:	b	145ec <__assert_fail@plt+0x3110>
   14890:	bl	113a4 <__errno_location@plt>
   14894:	ldr	r4, [r0]
   14898:	mov	r2, #5
   1489c:	ldr	r1, [pc, #572]	; 14ae0 <__assert_fail@plt+0x3604>
   148a0:	mov	r0, #0
   148a4:	bl	11230 <dcgettext@plt>
   148a8:	mov	r5, r0
   148ac:	ldr	r3, [pc, #572]	; 14af0 <__assert_fail@plt+0x3614>
   148b0:	ldr	r1, [r3, #536]	; 0x218
   148b4:	mov	r0, #4
   148b8:	bl	18a3c <__assert_fail@plt+0x7560>
   148bc:	mov	r3, r0
   148c0:	mov	r2, r5
   148c4:	mov	r1, r4
   148c8:	mov	r0, #1
   148cc:	bl	11d0c <__assert_fail@plt+0x830>
   148d0:	mov	r2, #5
   148d4:	ldr	r1, [pc, #520]	; 14ae4 <__assert_fail@plt+0x3608>
   148d8:	mov	r0, #0
   148dc:	bl	11230 <dcgettext@plt>
   148e0:	mov	r2, r0
   148e4:	ldr	r3, [pc, #516]	; 14af0 <__assert_fail@plt+0x3614>
   148e8:	str	r0, [r3, #532]	; 0x214
   148ec:	ldr	r1, [r3, #540]	; 0x21c
   148f0:	mov	r0, #1
   148f4:	bl	12dfc <__assert_fail@plt+0x1920>
   148f8:	b	14ba0 <__assert_fail@plt+0x36c4>
   148fc:	ldr	r3, [pc, #492]	; 14af0 <__assert_fail@plt+0x3614>
   14900:	ldr	r4, [r3, #304]	; 0x130
   14904:	cmp	r4, #0
   14908:	blt	14960 <__assert_fail@plt+0x3484>
   1490c:	cmp	r4, #0
   14910:	beq	14c84 <__assert_fail@plt+0x37a8>
   14914:	cmp	r6, #0
   14918:	sbcs	r3, r7, #0
   1491c:	bge	14af4 <__assert_fail@plt+0x3618>
   14920:	mvn	r2, #0
   14924:	mvn	r3, #0
   14928:	cmp	r7, r3
   1492c:	cmpeq	r6, r2
   14930:	beq	149e0 <__assert_fail@plt+0x3504>
   14934:	mov	r2, r6
   14938:	mov	r3, r7
   1493c:	mov	r0, #0
   14940:	mov	r1, #-2147483648	; 0x80000000
   14944:	bl	1ae54 <__assert_fail@plt+0x9978>
   14948:	asr	r3, r4, #31
   1494c:	cmp	r0, r4
   14950:	sbcs	r3, r1, r3
   14954:	movlt	r3, #1
   14958:	movge	r3, #0
   1495c:	b	14b18 <__assert_fail@plt+0x363c>
   14960:	cmp	r6, #0
   14964:	sbcs	r3, r7, #0
   14968:	bge	14994 <__assert_fail@plt+0x34b8>
   1496c:	mov	r2, r4
   14970:	asr	r3, r4, #31
   14974:	mvn	r0, #0
   14978:	mvn	r1, #-2147483648	; 0x80000000
   1497c:	bl	1ae54 <__assert_fail@plt+0x9978>
   14980:	cmp	r6, r0
   14984:	sbcs	r3, r7, r1
   14988:	movlt	r3, #1
   1498c:	movge	r3, #0
   14990:	b	14b18 <__assert_fail@plt+0x363c>
   14994:	cmn	r4, #1
   14998:	beq	149c4 <__assert_fail@plt+0x34e8>
   1499c:	mov	r2, r4
   149a0:	asr	r3, r4, #31
   149a4:	mov	r0, #0
   149a8:	mov	r1, #-2147483648	; 0x80000000
   149ac:	bl	1ae54 <__assert_fail@plt+0x9978>
   149b0:	cmp	r0, r6
   149b4:	sbcs	r3, r1, r7
   149b8:	movlt	r3, #1
   149bc:	movge	r3, #0
   149c0:	b	14b18 <__assert_fail@plt+0x363c>
   149c4:	adds	r2, r6, #0
   149c8:	adc	r3, r7, #-2147483648	; 0x80000000
   149cc:	cmp	r2, #1
   149d0:	sbcs	r3, r3, #0
   149d4:	movge	r3, #1
   149d8:	movlt	r3, #0
   149dc:	b	14b18 <__assert_fail@plt+0x363c>
   149e0:	asr	r3, r4, #31
   149e4:	adds	r2, r4, #0
   149e8:	adc	r3, r3, #-2147483648	; 0x80000000
   149ec:	cmp	r2, #1
   149f0:	sbcs	r3, r3, #0
   149f4:	movge	r3, #1
   149f8:	movlt	r3, #0
   149fc:	b	14b18 <__assert_fail@plt+0x363c>
   14a00:	andeq	ip, r1, r8, ror #16
   14a04:	andeq	lr, r2, r0, ror r3
   14a08:			; <UNDEFINED> instruction: 0x0001c2bc
   14a0c:	andeq	ip, r1, r4, ror r4
   14a10:	andeq	ip, r1, r8, ror r8
   14a14:	andeq	r1, r1, r8, ror ip
   14a18:	muleq	r1, r0, r8
   14a1c:	muleq	r1, ip, r8
   14a20:	andeq	ip, r1, ip, lsr #17
   14a24:	andeq	r1, r1, r8, asr #14
   14a28:	andeq	lr, r2, r8, ror r1
   14a2c:	andeq	fp, r1, r8, lsr #14
   14a30:	andeq	lr, r2, r0, asr r1
   14a34:	ldrdeq	lr, [r2], -r0
   14a38:	andeq	fp, r1, r0, ror r1
   14a3c:	andeq	r1, r1, r4, asr r6
   14a40:	andeq	r1, r1, r4, asr #12
   14a44:			; <UNDEFINED> instruction: 0x0001c8b8
   14a48:	andeq	ip, r1, r0, ror #17
   14a4c:	ldrdeq	ip, [r1], -r0
   14a50:	ldrdeq	ip, [r1], -r4
   14a54:	ldrdeq	ip, [r1], -r8
   14a58:	strdeq	ip, [r1], -r4
   14a5c:	andeq	ip, r1, r0, lsl r9
   14a60:	andeq	ip, r1, ip, lsr #18
   14a64:	andeq	ip, r1, r4, lsr r9
   14a68:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14a6c:	andeq	ip, r1, r8, lsl r9
   14a70:	andeq	ip, r1, ip, asr #18
   14a74:	andeq	ip, r1, r0, asr r9
   14a78:	andeq	ip, r1, r4, asr r9
   14a7c:	andeq	ip, r1, r8, asr r9
   14a80:	andeq	ip, r1, ip, asr r9
   14a84:	andeq	ip, r1, r4, ror #18
   14a88:	andeq	ip, r1, ip, ror #18
   14a8c:	andeq	ip, r1, r4, ror r9
   14a90:	andeq	ip, r1, r8, ror #11
   14a94:	andseq	r1, r0, r0
   14a98:	andeq	ip, r1, ip, asr r7
   14a9c:	andeq	ip, r1, r4, lsl #19
   14aa0:	andeq	ip, r1, ip, asr r8
   14aa4:	andeq	ip, r1, r0, asr r8
   14aa8:	andeq	lr, r2, r8, lsr #8
   14aac:	andeq	r2, r1, r4, lsl #23
   14ab0:	andeq	r2, r1, ip, lsl #26
   14ab4:	andeq	r0, r1, r2
   14ab8:	andeq	lr, r2, r7, ror #5
   14abc:	muleq	r1, r0, r9
   14ac0:	andeq	ip, r1, r0, asr #19
   14ac4:	andeq	ip, r1, r4, ror #19
   14ac8:	andeq	ip, r1, r4, lsl #20
   14acc:	andeq	ip, r1, r4, lsr #20
   14ad0:	andeq	fp, r1, r8, lsr #8
   14ad4:	andeq	fp, r1, r8, lsr #10
   14ad8:	andeq	fp, r1, r8, lsr #12
   14adc:	andeq	ip, r1, r8, asr #20
   14ae0:	andeq	ip, r1, r8, asr sl
   14ae4:	andeq	ip, r1, ip, ror #20
   14ae8:			; <UNDEFINED> instruction: 0x000001b6
   14aec:	andeq	lr, r2, r8, lsr r4
   14af0:	andeq	lr, r2, r8, ror #3
   14af4:	mov	r2, r4
   14af8:	asr	r3, r4, #31
   14afc:	mvn	r0, #0
   14b00:	mvn	r1, #-2147483648	; 0x80000000
   14b04:	bl	1ae54 <__assert_fail@plt+0x9978>
   14b08:	cmp	r0, r6
   14b0c:	sbcs	r3, r1, r7
   14b10:	movlt	r3, #1
   14b14:	movge	r3, #0
   14b18:	cmp	r3, #0
   14b1c:	beq	146b8 <__assert_fail@plt+0x31dc>
   14b20:	asr	r1, r4, #31
   14b24:	mul	r3, r4, r7
   14b28:	mla	r3, r6, r1, r3
   14b2c:	umull	r4, r5, r4, r6
   14b30:	add	r5, r3, r5
   14b34:	tst	r9, #512	; 0x200
   14b38:	beq	14ce4 <__assert_fail@plt+0x3808>
   14b3c:	orrs	r3, r6, r7
   14b40:	beq	14b60 <__assert_fail@plt+0x3684>
   14b44:	ldr	r3, [pc, #-100]	; 14ae8 <__assert_fail@plt+0x360c>
   14b48:	orr	r2, r8, #2
   14b4c:	mov	r1, sl
   14b50:	mov	r0, #1
   14b54:	bl	12d6c <__assert_fail@plt+0x1890>
   14b58:	cmp	r0, #0
   14b5c:	bge	14b80 <__assert_fail@plt+0x36a4>
   14b60:	ldr	r3, [pc, #-128]	; 14ae8 <__assert_fail@plt+0x360c>
   14b64:	orr	r2, r8, #1
   14b68:	ldr	r1, [pc, #-128]	; 14af0 <__assert_fail@plt+0x3614>
   14b6c:	ldr	r1, [r1, #532]	; 0x214
   14b70:	mov	r0, #1
   14b74:	bl	12d6c <__assert_fail@plt+0x1890>
   14b78:	cmp	r0, #0
   14b7c:	blt	14d14 <__assert_fail@plt+0x3838>
   14b80:	ldr	r3, [pc, #-156]	; 14aec <__assert_fail@plt+0x3610>
   14b84:	ldrd	r2, [r3, #-8]
   14b88:	orrs	r3, r2, r3
   14b8c:	beq	14ba0 <__assert_fail@plt+0x36c4>
   14b90:	ldr	r3, [pc, #-168]	; 14af0 <__assert_fail@plt+0x3614>
   14b94:	ldr	r3, [r3, #288]	; 0x120
   14b98:	tst	r3, #512	; 0x200
   14b9c:	beq	14d50 <__assert_fail@plt+0x3874>
   14ba0:	bl	16438 <__assert_fail@plt+0x4f5c>
   14ba4:	ldr	r3, [pc, #-188]	; 14af0 <__assert_fail@plt+0x3614>
   14ba8:	add	r2, r3, #352	; 0x160
   14bac:	strd	r0, [r2, #-8]
   14bb0:	add	r2, r3, #608	; 0x260
   14bb4:	add	r5, pc, #636	; 0x27c
   14bb8:	ldrd	r4, [r5]
   14bbc:	adds	r0, r0, r4
   14bc0:	adc	r1, r1, r5
   14bc4:	strd	r0, [r2]
   14bc8:	add	r3, r3, #576	; 0x240
   14bcc:	ldrd	r4, [r3, #-8]
   14bd0:	orrs	r3, r4, r5
   14bd4:	bne	14e68 <__assert_fail@plt+0x398c>
   14bd8:	sub	r3, r2, #608	; 0x260
   14bdc:	ldr	r3, [r3, #576]	; 0x240
   14be0:	cmp	r3, #0
   14be4:	beq	14f88 <__assert_fail@plt+0x3aac>
   14be8:	ldr	r3, [pc, #628]	; 14e64 <__assert_fail@plt+0x3988>
   14bec:	ldr	sl, [r3, #292]	; 0x124
   14bf0:	cmp	sl, #0
   14bf4:	blt	15004 <__assert_fail@plt+0x3b28>
   14bf8:	cmp	sl, #0
   14bfc:	bne	14e8c <__assert_fail@plt+0x39b0>
   14c00:	mul	r3, sl, r5
   14c04:	asr	r1, sl, #31
   14c08:	mla	r3, r4, r1, r3
   14c0c:	umull	r6, r7, sl, r4
   14c10:	add	r7, r3, r7
   14c14:	mov	r0, r6
   14c18:	mov	r1, r7
   14c1c:	cmp	r6, #0
   14c20:	sbcs	r3, r7, #0
   14c24:	bge	150e8 <__assert_fail@plt+0x3c0c>
   14c28:	ldr	r3, [pc, #564]	; 14e64 <__assert_fail@plt+0x3988>
   14c2c:	ldr	r0, [r3, #576]	; 0x240
   14c30:	asr	r1, r0, #31
   14c34:	mov	r2, #0
   14c38:	mov	r3, #-2147483648	; 0x80000000
   14c3c:	subs	r2, r2, r6
   14c40:	sbc	r3, r3, r7
   14c44:	cmp	r0, r2
   14c48:	sbcs	r3, r1, r3
   14c4c:	movlt	r3, #1
   14c50:	movge	r3, #0
   14c54:	b	1511c <__assert_fail@plt+0x3c40>
   14c58:	mov	r2, #0
   14c5c:	mov	r3, #-2147483648	; 0x80000000
   14c60:	subs	r2, r2, r4
   14c64:	sbc	r3, r3, r5
   14c68:	ldr	r1, [pc, #488]	; 14e58 <__assert_fail@plt+0x397c>
   14c6c:	ldrd	r0, [r1]
   14c70:	cmp	r0, r2
   14c74:	sbcs	r3, r1, r3
   14c78:	movlt	r3, #1
   14c7c:	movge	r3, #0
   14c80:	b	14724 <__assert_fail@plt+0x3248>
   14c84:	mov	r2, #0
   14c88:	mov	r3, #0
   14c8c:	strd	r2, [sp, #32]
   14c90:	mov	r4, r2
   14c94:	mov	r5, r3
   14c98:	b	146dc <__assert_fail@plt+0x3200>
   14c9c:	mov	r2, #0
   14ca0:	mov	r3, #-2147483648	; 0x80000000
   14ca4:	ldrd	r0, [sp, #48]	; 0x30
   14ca8:	subs	r0, r2, r0
   14cac:	sbc	r1, r3, r1
   14cb0:	mov	r2, r0
   14cb4:	mov	r3, r1
   14cb8:	ldrd	r0, [sp, #32]
   14cbc:	cmp	r0, r2
   14cc0:	sbcs	r3, r1, r3
   14cc4:	movlt	r3, #1
   14cc8:	movge	r3, #0
   14ccc:	b	14724 <__assert_fail@plt+0x3248>
   14cd0:	ldr	r3, [pc, #384]	; 14e58 <__assert_fail@plt+0x397c>
   14cd4:	ldrd	r2, [r3]
   14cd8:	adds	r4, r4, r2
   14cdc:	adc	r5, r5, r3
   14ce0:	b	14b3c <__assert_fail@plt+0x3660>
   14ce4:	mov	r2, #5
   14ce8:	ldr	r1, [pc, #336]	; 14e40 <__assert_fail@plt+0x3964>
   14cec:	mov	r0, #0
   14cf0:	bl	11230 <dcgettext@plt>
   14cf4:	ldr	r3, [pc, #360]	; 14e64 <__assert_fail@plt+0x3988>
   14cf8:	ldr	r3, [r3, #304]	; 0x130
   14cfc:	str	r3, [sp, #8]
   14d00:	strd	r6, [sp]
   14d04:	mov	r2, r0
   14d08:	mov	r1, #0
   14d0c:	mov	r0, #1
   14d10:	bl	11d0c <__assert_fail@plt+0x830>
   14d14:	ldr	r4, [fp]
   14d18:	mov	r2, #5
   14d1c:	ldr	r1, [pc, #288]	; 14e44 <__assert_fail@plt+0x3968>
   14d20:	mov	r0, #0
   14d24:	bl	11230 <dcgettext@plt>
   14d28:	mov	r5, r0
   14d2c:	ldr	r3, [pc, #304]	; 14e64 <__assert_fail@plt+0x3988>
   14d30:	ldr	r1, [r3, #532]	; 0x214
   14d34:	mov	r0, #4
   14d38:	bl	18a3c <__assert_fail@plt+0x7560>
   14d3c:	mov	r3, r0
   14d40:	mov	r2, r5
   14d44:	mov	r1, r4
   14d48:	mov	r0, #1
   14d4c:	bl	11d0c <__assert_fail@plt+0x830>
   14d50:	mov	r6, #1
   14d54:	bl	12af0 <__assert_fail@plt+0x1614>
   14d58:	mov	r2, r4
   14d5c:	mov	r3, r5
   14d60:	mov	r0, r6
   14d64:	bl	1120c <ftruncate64@plt>
   14d68:	cmp	r0, #0
   14d6c:	bge	14dd4 <__assert_fail@plt+0x38f8>
   14d70:	ldr	r3, [fp]
   14d74:	cmp	r3, #4
   14d78:	beq	14d54 <__assert_fail@plt+0x3878>
   14d7c:	ldr	r6, [fp]
   14d80:	add	r1, sp, #88	; 0x58
   14d84:	mov	r0, #1
   14d88:	bl	12db8 <__assert_fail@plt+0x18dc>
   14d8c:	cmp	r0, #0
   14d90:	beq	14de0 <__assert_fail@plt+0x3904>
   14d94:	ldr	r4, [fp]
   14d98:	mov	r2, #5
   14d9c:	ldr	r1, [pc, #164]	; 14e48 <__assert_fail@plt+0x396c>
   14da0:	mov	r0, #0
   14da4:	bl	11230 <dcgettext@plt>
   14da8:	mov	r5, r0
   14dac:	ldr	r3, [pc, #176]	; 14e64 <__assert_fail@plt+0x3988>
   14db0:	ldr	r1, [r3, #532]	; 0x214
   14db4:	mov	r0, #4
   14db8:	bl	18a3c <__assert_fail@plt+0x7560>
   14dbc:	mov	r3, r0
   14dc0:	mov	r2, r5
   14dc4:	mov	r1, r4
   14dc8:	mov	r0, #0
   14dcc:	bl	11d0c <__assert_fail@plt+0x830>
   14dd0:	b	14ba0 <__assert_fail@plt+0x36c4>
   14dd4:	cmp	r0, #0
   14dd8:	beq	14ba0 <__assert_fail@plt+0x36c4>
   14ddc:	b	14d7c <__assert_fail@plt+0x38a0>
   14de0:	ldr	r3, [sp, #104]	; 0x68
   14de4:	and	r3, r3, #61440	; 0xf000
   14de8:	sub	r3, r3, #16384	; 0x4000
   14dec:	bics	r3, r3, #16384	; 0x4000
   14df0:	bne	14ba0 <__assert_fail@plt+0x36c4>
   14df4:	mov	r2, #5
   14df8:	ldr	r1, [pc, #76]	; 14e4c <__assert_fail@plt+0x3970>
   14dfc:	mov	r0, #0
   14e00:	bl	11230 <dcgettext@plt>
   14e04:	mov	r7, r0
   14e08:	ldr	r3, [pc, #84]	; 14e64 <__assert_fail@plt+0x3988>
   14e0c:	ldr	r1, [r3, #532]	; 0x214
   14e10:	mov	r0, #4
   14e14:	bl	18a3c <__assert_fail@plt+0x7560>
   14e18:	str	r0, [sp, #8]
   14e1c:	strd	r4, [sp]
   14e20:	mov	r2, r7
   14e24:	mov	r1, r6
   14e28:	mov	r0, #0
   14e2c:	bl	11d0c <__assert_fail@plt+0x830>
   14e30:	b	14ba0 <__assert_fail@plt+0x36c4>
   14e34:	nop			; (mov r0, r0)
   14e38:	blcc	fe6c7640 <opterr@@GLIBC_2.4+0xfe699460>
   14e3c:	andeq	r0, r0, r0
   14e40:	andeq	ip, r1, ip, ror sl
   14e44:	andeq	ip, r1, r8, asr sl
   14e48:	andeq	ip, r1, ip, lsl #16
   14e4c:	andeq	ip, r1, ip, asr #21
   14e50:	strdeq	lr, [r2], -r8
   14e54:	andeq	ip, r1, r0, lsl #22
   14e58:	andeq	lr, r2, r8, lsr r4
   14e5c:	andeq	lr, r2, r0, asr r1
   14e60:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   14e64:	andeq	lr, r2, r8, ror #3
   14e68:	ldr	r3, [pc, #-12]	; 14e64 <__assert_fail@plt+0x3988>
   14e6c:	ldr	sl, [r3, #292]	; 0x124
   14e70:	cmp	sl, #0
   14e74:	blt	14ff8 <__assert_fail@plt+0x3b1c>
   14e78:	cmp	sl, #0
   14e7c:	beq	150d8 <__assert_fail@plt+0x3bfc>
   14e80:	cmp	r4, #0
   14e84:	sbcs	r3, r5, #0
   14e88:	blt	15078 <__assert_fail@plt+0x3b9c>
   14e8c:	mov	r2, sl
   14e90:	asr	r3, sl, #31
   14e94:	mvn	r0, #0
   14e98:	mvn	r1, #-2147483648	; 0x80000000
   14e9c:	bl	1ae54 <__assert_fail@plt+0x9978>
   14ea0:	cmp	r0, r4
   14ea4:	sbcs	r3, r1, r5
   14ea8:	movlt	r3, #1
   14eac:	movge	r3, #0
   14eb0:	cmp	r3, #0
   14eb4:	beq	14c00 <__assert_fail@plt+0x3724>
   14eb8:	mul	r3, sl, r5
   14ebc:	asr	r1, sl, #31
   14ec0:	mla	r3, r4, r1, r3
   14ec4:	umull	r6, r7, sl, r4
   14ec8:	add	r7, r3, r7
   14ecc:	mov	r3, #1
   14ed0:	str	r3, [sp, #32]
   14ed4:	ldr	r1, [pc, #-120]	; 14e64 <__assert_fail@plt+0x3988>
   14ed8:	add	r3, r1, #272	; 0x110
   14edc:	ldrd	r8, [r3]
   14ee0:	add	r3, r1, #576	; 0x240
   14ee4:	str	r3, [sp, #4]
   14ee8:	str	sl, [sp]
   14eec:	mov	r2, r4
   14ef0:	mov	r3, r5
   14ef4:	ldr	r1, [r1, #536]	; 0x218
   14ef8:	mov	r0, #0
   14efc:	bl	13638 <__assert_fail@plt+0x215c>
   14f00:	orrs	r3, r0, r1
   14f04:	bne	14f3c <__assert_fail@plt+0x3a60>
   14f08:	ldr	r3, [pc, #-192]	; 14e50 <__assert_fail@plt+0x3974>
   14f0c:	ldrd	r2, [r3]
   14f10:	cmp	r2, #0
   14f14:	sbcs	r1, r3, #0
   14f18:	blt	14f88 <__assert_fail@plt+0x3aac>
   14f1c:	ldr	r1, [sp, #32]
   14f20:	tst	r1, #1
   14f24:	bne	14f3c <__assert_fail@plt+0x3a60>
   14f28:	subs	r2, r2, r8
   14f2c:	sbc	r3, r3, r9
   14f30:	cmp	r3, r7
   14f34:	cmpeq	r2, r6
   14f38:	beq	14f88 <__assert_fail@plt+0x3aac>
   14f3c:	ldr	r3, [pc, #-232]	; 14e5c <__assert_fail@plt+0x3980>
   14f40:	ldr	r3, [r3, #24]
   14f44:	cmp	r3, #1
   14f48:	beq	14f88 <__assert_fail@plt+0x3aac>
   14f4c:	mov	r2, #5
   14f50:	ldr	r1, [pc, #-260]	; 14e54 <__assert_fail@plt+0x3978>
   14f54:	mov	r0, #0
   14f58:	bl	11230 <dcgettext@plt>
   14f5c:	mov	r4, r0
   14f60:	ldr	r3, [pc, #-260]	; 14e64 <__assert_fail@plt+0x3988>
   14f64:	ldr	r2, [r3, #536]	; 0x218
   14f68:	mov	r1, #3
   14f6c:	mov	r0, #0
   14f70:	bl	18b08 <__assert_fail@plt+0x762c>
   14f74:	mov	r3, r0
   14f78:	mov	r2, r4
   14f7c:	mov	r1, #0
   14f80:	mov	r0, r1
   14f84:	bl	11d0c <__assert_fail@plt+0x830>
   14f88:	ldr	r3, [pc, #-312]	; 14e58 <__assert_fail@plt+0x397c>
   14f8c:	ldrd	r2, [r3, #-8]
   14f90:	orrs	r1, r2, r3
   14f94:	bne	14fa8 <__assert_fail@plt+0x3acc>
   14f98:	ldr	r1, [pc, #-328]	; 14e58 <__assert_fail@plt+0x397c>
   14f9c:	ldrd	r0, [r1]
   14fa0:	orrs	r1, r0, r1
   14fa4:	beq	151a0 <__assert_fail@plt+0x3cc4>
   14fa8:	ldr	r1, [pc, #-332]	; 14e64 <__assert_fail@plt+0x3988>
   14fac:	ldr	ip, [r1, #592]	; 0x250
   14fb0:	add	r0, sp, #232	; 0xe8
   14fb4:	str	ip, [r0, #-144]!	; 0xffffff70
   14fb8:	str	r0, [sp, #4]
   14fbc:	ldr	r0, [r1, #304]	; 0x130
   14fc0:	str	r0, [sp]
   14fc4:	ldr	r1, [r1, #532]	; 0x214
   14fc8:	mov	r0, #1
   14fcc:	bl	13638 <__assert_fail@plt+0x215c>
   14fd0:	mov	r4, r0
   14fd4:	mov	r5, r1
   14fd8:	orrs	r3, r4, r5
   14fdc:	bne	15dc0 <__assert_fail@plt+0x48e4>
   14fe0:	ldr	r2, [sp, #88]	; 0x58
   14fe4:	cmp	r2, #0
   14fe8:	beq	151a0 <__assert_fail@plt+0x3cc4>
   14fec:	ldr	r3, [pc, #-400]	; 14e64 <__assert_fail@plt+0x3988>
   14ff0:	ldr	r0, [r3, #300]	; 0x12c
   14ff4:	b	15dcc <__assert_fail@plt+0x48f0>
   14ff8:	cmp	r4, #0
   14ffc:	sbcs	r3, r5, #0
   15000:	blt	15034 <__assert_fail@plt+0x3b58>
   15004:	cmn	sl, #1
   15008:	beq	1505c <__assert_fail@plt+0x3b80>
   1500c:	mov	r2, sl
   15010:	asr	r3, sl, #31
   15014:	mov	r0, #0
   15018:	mov	r1, #-2147483648	; 0x80000000
   1501c:	bl	1ae54 <__assert_fail@plt+0x9978>
   15020:	cmp	r0, r4
   15024:	sbcs	r3, r1, r5
   15028:	movlt	r3, #1
   1502c:	movge	r3, #0
   15030:	b	14eb0 <__assert_fail@plt+0x39d4>
   15034:	mov	r2, sl
   15038:	asr	r3, sl, #31
   1503c:	mvn	r0, #0
   15040:	mvn	r1, #-2147483648	; 0x80000000
   15044:	bl	1ae54 <__assert_fail@plt+0x9978>
   15048:	cmp	r4, r0
   1504c:	sbcs	r3, r5, r1
   15050:	movlt	r3, #1
   15054:	movge	r3, #0
   15058:	b	14eb0 <__assert_fail@plt+0x39d4>
   1505c:	adds	r2, r4, #0
   15060:	adc	r3, r5, #-2147483648	; 0x80000000
   15064:	cmp	r2, #1
   15068:	sbcs	r3, r3, #0
   1506c:	movge	r3, #1
   15070:	movlt	r3, #0
   15074:	b	14eb0 <__assert_fail@plt+0x39d4>
   15078:	mvn	r2, #0
   1507c:	mvn	r3, #0
   15080:	cmp	r5, r3
   15084:	cmpeq	r4, r2
   15088:	beq	150b8 <__assert_fail@plt+0x3bdc>
   1508c:	mov	r2, r4
   15090:	mov	r3, r5
   15094:	mov	r0, #0
   15098:	mov	r1, #-2147483648	; 0x80000000
   1509c:	bl	1ae54 <__assert_fail@plt+0x9978>
   150a0:	asr	r3, sl, #31
   150a4:	cmp	r0, sl
   150a8:	sbcs	r3, r1, r3
   150ac:	movlt	r3, #1
   150b0:	movge	r3, #0
   150b4:	b	14eb0 <__assert_fail@plt+0x39d4>
   150b8:	asr	r3, sl, #31
   150bc:	adds	r2, sl, #0
   150c0:	adc	r3, r3, #-2147483648	; 0x80000000
   150c4:	cmp	r2, #1
   150c8:	sbcs	r3, r3, #0
   150cc:	movge	r3, #1
   150d0:	movlt	r3, #0
   150d4:	b	14eb0 <__assert_fail@plt+0x39d4>
   150d8:	mov	r0, #0
   150dc:	mov	r1, #0
   150e0:	mov	r6, r0
   150e4:	mov	r7, r1
   150e8:	ldr	r3, [pc, #-652]	; 14e64 <__assert_fail@plt+0x3988>
   150ec:	ldr	r2, [r3, #576]	; 0x240
   150f0:	cmp	r2, #0
   150f4:	blt	15140 <__assert_fail@plt+0x3c64>
   150f8:	mvn	r8, #0
   150fc:	mvn	r9, #-2147483648	; 0x80000000
   15100:	subs	r0, r8, r0
   15104:	sbc	r1, r9, r1
   15108:	asr	r3, r2, #31
   1510c:	cmp	r0, r2
   15110:	sbcs	r3, r1, r3
   15114:	movlt	r3, #1
   15118:	movge	r3, #0
   1511c:	cmp	r3, #0
   15120:	beq	15164 <__assert_fail@plt+0x3c88>
   15124:	ldr	r3, [pc, #-712]	; 14e64 <__assert_fail@plt+0x3988>
   15128:	ldr	r3, [r3, #576]	; 0x240
   1512c:	adds	r6, r6, r3
   15130:	adc	r7, r7, r3, asr #31
   15134:	mov	r3, #1
   15138:	str	r3, [sp, #32]
   1513c:	b	14ed4 <__assert_fail@plt+0x39f8>
   15140:	mov	r8, #0
   15144:	mov	r9, #-2147483648	; 0x80000000
   15148:	subs	r8, r8, r2
   1514c:	sbc	r9, r9, r2, asr #31
   15150:	cmp	r0, r8
   15154:	sbcs	r3, r1, r9
   15158:	movlt	r3, #1
   1515c:	movge	r3, #0
   15160:	b	1511c <__assert_fail@plt+0x3c40>
   15164:	ldr	r3, [pc, #-776]	; 14e64 <__assert_fail@plt+0x3988>
   15168:	ldr	r3, [r3, #576]	; 0x240
   1516c:	adds	r6, r6, r3
   15170:	adc	r7, r7, r3, asr #31
   15174:	ldr	r3, [sp, #40]	; 0x28
   15178:	str	r3, [sp, #32]
   1517c:	b	14ed4 <__assert_fail@plt+0x39f8>
   15180:	ldr	r4, [sp, #88]	; 0x58
   15184:	mov	r2, r4
   15188:	ldr	r3, [pc, #-812]	; 14e64 <__assert_fail@plt+0x3988>
   1518c:	ldr	r1, [r3, #300]	; 0x12c
   15190:	mov	r0, #1
   15194:	bl	13118 <__assert_fail@plt+0x1c3c>
   15198:	cmp	r4, r0
   1519c:	bne	151f8 <__assert_fail@plt+0x3d1c>
   151a0:	ldr	r3, [pc, #-844]	; 14e5c <__assert_fail@plt+0x3980>
   151a4:	ldrd	r2, [r3, #32]
   151a8:	orrs	r3, r2, r3
   151ac:	bne	151c8 <__assert_fail@plt+0x3cec>
   151b0:	ldr	r3, [pc, #-852]	; 14e64 <__assert_fail@plt+0x3988>
   151b4:	ldr	r3, [r3, #580]	; 0x244
   151b8:	cmp	r3, #0
   151bc:	ldreq	r3, [sp, #40]	; 0x28
   151c0:	streq	r3, [sp, #48]	; 0x30
   151c4:	beq	1585c <__assert_fail@plt+0x4380>
   151c8:	bl	11fbc <__assert_fail@plt+0xae0>
   151cc:	bl	12060 <__assert_fail@plt+0xb84>
   151d0:	ldr	r3, [sp, #40]	; 0x28
   151d4:	str	r3, [sp, #48]	; 0x30
   151d8:	str	r3, [sp, #32]
   151dc:	mvn	r3, #0
   151e0:	str	r3, [sp, #56]	; 0x38
   151e4:	ldr	r5, [pc, #-912]	; 14e5c <__assert_fail@plt+0x3980>
   151e8:	ldr	r4, [pc, #-908]	; 14e64 <__assert_fail@plt+0x3988>
   151ec:	add	r3, r4, #336	; 0x150
   151f0:	str	r3, [sp, #64]	; 0x40
   151f4:	b	156cc <__assert_fail@plt+0x41f0>
   151f8:	ldr	r4, [fp]
   151fc:	mov	r2, #5
   15200:	ldr	r1, [pc, #-936]	; 14e60 <__assert_fail@plt+0x3984>
   15204:	mov	r0, #0
   15208:	bl	11230 <dcgettext@plt>
   1520c:	mov	r5, r0
   15210:	ldr	r3, [pc, #-948]	; 14e64 <__assert_fail@plt+0x3988>
   15214:	ldr	r1, [r3, #532]	; 0x214
   15218:	mov	r0, #4
   1521c:	bl	18a3c <__assert_fail@plt+0x7560>
   15220:	mov	r3, r0
   15224:	mov	r2, r5
   15228:	mov	r1, r4
   1522c:	mov	r0, #0
   15230:	bl	11d0c <__assert_fail@plt+0x830>
   15234:	bl	13338 <__assert_fail@plt+0x1e5c>
   15238:	mov	r0, #1
   1523c:	bl	11374 <exit@plt>
   15240:	bl	16438 <__assert_fail@plt+0x4f5c>
   15244:	add	r3, r4, #608	; 0x260
   15248:	ldrd	r2, [r3]
   1524c:	cmp	r0, r2
   15250:	sbcs	r3, r1, r3
   15254:	blt	156d8 <__assert_fail@plt+0x41fc>
   15258:	bl	12578 <__assert_fail@plt+0x109c>
   1525c:	add	r1, r4, #608	; 0x260
   15260:	ldrd	r2, [r1]
   15264:	add	r7, pc, #852	; 0x354
   15268:	ldrd	r6, [r7]
   1526c:	adds	r6, r6, r2
   15270:	adc	r7, r7, r3
   15274:	mov	r2, r6
   15278:	mov	r3, r7
   1527c:	strd	r2, [r1]
   15280:	b	156d8 <__assert_fail@plt+0x41fc>
   15284:	ands	r1, r1, #24
   15288:	ldr	r2, [r4, #292]	; 0x124
   1528c:	movne	r1, #32
   15290:	ldr	r0, [r4, #284]	; 0x11c
   15294:	bl	113d4 <memset@plt>
   15298:	b	15724 <__assert_fail@plt+0x4248>
   1529c:	mov	r2, r8
   152a0:	mov	r3, r7
   152a4:	mov	r0, #0
   152a8:	bl	12230 <__assert_fail@plt+0xd54>
   152ac:	b	15768 <__assert_fail@plt+0x428c>
   152b0:	cmp	r0, #0
   152b4:	beq	153c8 <__assert_fail@plt+0x3eec>
   152b8:	ldr	r3, [r4, #288]	; 0x120
   152bc:	tst	r3, #256	; 0x100
   152c0:	beq	152d0 <__assert_fail@plt+0x3df4>
   152c4:	ldr	r3, [r5, #24]
   152c8:	cmp	r3, #1
   152cc:	beq	15314 <__assert_fail@plt+0x3e38>
   152d0:	ldr	r6, [fp]
   152d4:	mov	r2, #5
   152d8:	ldr	r1, [pc, #744]	; 155c8 <__assert_fail@plt+0x40ec>
   152dc:	mov	r0, #0
   152e0:	bl	11230 <dcgettext@plt>
   152e4:	mov	r7, r0
   152e8:	ldr	r1, [r4, #536]	; 0x218
   152ec:	mov	r0, #4
   152f0:	bl	18a3c <__assert_fail@plt+0x7560>
   152f4:	mov	r3, r0
   152f8:	mov	r2, r7
   152fc:	mov	r1, r6
   15300:	mov	r0, #0
   15304:	bl	11d0c <__assert_fail@plt+0x830>
   15308:	ldr	r3, [r4, #288]	; 0x120
   1530c:	tst	r3, #256	; 0x100
   15310:	beq	159b8 <__assert_fail@plt+0x44dc>
   15314:	bl	1297c <__assert_fail@plt+0x14a0>
   15318:	ldr	r6, [r4, #292]	; 0x124
   1531c:	ldr	r3, [sp, #32]
   15320:	sub	r6, r6, r3
   15324:	asr	r7, r6, #31
   15328:	mov	r2, r6
   1532c:	mov	r3, r7
   15330:	mov	r0, #0
   15334:	bl	12230 <__assert_fail@plt+0xd54>
   15338:	ldrb	r3, [r4, #330]	; 0x14a
   1533c:	cmp	r3, #0
   15340:	bne	15498 <__assert_fail@plt+0x3fbc>
   15344:	ldr	r3, [r4, #604]	; 0x25c
   15348:	cmp	r3, #29
   1534c:	strne	r3, [fp]
   15350:	beq	153a8 <__assert_fail@plt+0x3ecc>
   15354:	ldr	r6, [fp]
   15358:	mov	r2, #5
   1535c:	ldr	r1, [pc, #616]	; 155cc <__assert_fail@plt+0x40f0>
   15360:	mov	r0, #0
   15364:	bl	11230 <dcgettext@plt>
   15368:	mov	r7, r0
   1536c:	ldr	r2, [r4, #536]	; 0x218
   15370:	mov	r1, #3
   15374:	mov	r0, #0
   15378:	bl	18b08 <__assert_fail@plt+0x762c>
   1537c:	mov	r3, r0
   15380:	mov	r2, r7
   15384:	mov	r1, r6
   15388:	mov	r0, #0
   1538c:	bl	11d0c <__assert_fail@plt+0x830>
   15390:	mov	r3, #0
   15394:	strb	r3, [r4, #330]	; 0x14a
   15398:	mov	r3, #29
   1539c:	str	r3, [r4, #604]	; 0x25c
   153a0:	mov	r3, #1
   153a4:	str	r3, [sp, #48]	; 0x30
   153a8:	ldr	r2, [r4, #288]	; 0x120
   153ac:	ldr	r3, [sp, #32]
   153b0:	clz	r3, r3
   153b4:	lsr	r3, r3, #5
   153b8:	ands	r3, r3, r2, lsr #10
   153bc:	beq	156cc <__assert_fail@plt+0x41f0>
   153c0:	ldr	r8, [sp, #40]	; 0x28
   153c4:	b	15768 <__assert_fail@plt+0x428c>
   153c8:	ldr	r3, [pc, #552]	; 155f8 <__assert_fail@plt+0x411c>
   153cc:	ldrb	r2, [r3, #328]	; 0x148
   153d0:	ldrb	r1, [r3, #600]	; 0x258
   153d4:	orr	r2, r2, r1
   153d8:	strb	r2, [r3, #328]	; 0x148
   153dc:	ldrb	r2, [r3, #329]	; 0x149
   153e0:	ldrb	r3, [r3, #545]	; 0x221
   153e4:	cmp	r3, #0
   153e8:	ldrne	r3, [pc, #520]	; 155f8 <__assert_fail@plt+0x411c>
   153ec:	ldrne	r3, [r3, #288]	; 0x120
   153f0:	lsrne	r3, r3, #9
   153f4:	eorne	r3, r3, #1
   153f8:	andne	r3, r3, #1
   153fc:	orrs	r3, r3, r2
   15400:	movne	r2, #1
   15404:	moveq	r2, #0
   15408:	ldr	r3, [pc, #488]	; 155f8 <__assert_fail@plt+0x411c>
   1540c:	strb	r2, [r3, #329]	; 0x149
   15410:	ldr	r3, [sp, #56]	; 0x38
   15414:	cmp	r3, #0
   15418:	blt	15460 <__assert_fail@plt+0x3f84>
   1541c:	uxtb	r3, r3
   15420:	strb	r3, [sp, #88]	; 0x58
   15424:	ldr	r2, [pc, #460]	; 155f8 <__assert_fail@plt+0x411c>
   15428:	ldr	r2, [r2, #288]	; 0x120
   1542c:	tst	r2, #8
   15430:	bne	159c4 <__assert_fail@plt+0x44e8>
   15434:	tst	r2, #16
   15438:	bne	159d4 <__assert_fail@plt+0x44f8>
   1543c:	ldr	r2, [pc, #436]	; 155f8 <__assert_fail@plt+0x411c>
   15440:	ldr	ip, [r2, #300]	; 0x12c
   15444:	ldr	r0, [r2, #548]	; 0x224
   15448:	add	r1, r0, #1
   1544c:	str	r1, [r2, #548]	; 0x224
   15450:	strb	r3, [ip, r0]
   15454:	ldr	r3, [r2, #304]	; 0x130
   15458:	cmp	r1, r3
   1545c:	bge	159e4 <__assert_fail@plt+0x4508>
   15460:	ldr	r3, [pc, #400]	; 155f8 <__assert_fail@plt+0x411c>
   15464:	ldr	r3, [r3, #288]	; 0x120
   15468:	tst	r3, #8
   1546c:	beq	15a28 <__assert_fail@plt+0x454c>
   15470:	ldr	r3, [pc, #384]	; 155f8 <__assert_fail@plt+0x411c>
   15474:	ldr	r5, [r3, #552]	; 0x228
   15478:	cmp	r5, #0
   1547c:	ble	15a28 <__assert_fail@plt+0x454c>
   15480:	ldr	r3, [r3, #556]	; 0x22c
   15484:	cmp	r3, r5
   15488:	ble	15ab0 <__assert_fail@plt+0x45d4>
   1548c:	ldr	r4, [pc, #356]	; 155f8 <__assert_fail@plt+0x411c>
   15490:	ldr	r6, [pc, #328]	; 155e0 <__assert_fail@plt+0x4104>
   15494:	b	159fc <__assert_fail@plt+0x4520>
   15498:	mov	r0, r6
   1549c:	mov	r1, r7
   154a0:	bl	116a8 <__assert_fail@plt+0x1cc>
   154a4:	add	r3, r4, #272	; 0x110
   154a8:	ldrd	r8, [r3]
   154ac:	cmp	r8, #0
   154b0:	sbcs	r3, r9, #0
   154b4:	blt	15588 <__assert_fail@plt+0x40ac>
   154b8:	mov	r3, #1
   154bc:	str	r3, [sp]
   154c0:	mov	r2, #0
   154c4:	mov	r3, #0
   154c8:	mov	r0, #0
   154cc:	bl	112a8 <lseek64@plt>
   154d0:	cmp	r0, #0
   154d4:	sbcs	r3, r1, #0
   154d8:	blt	15354 <__assert_fail@plt+0x3e78>
   154dc:	cmp	r9, r1
   154e0:	cmpeq	r8, r0
   154e4:	beq	153a8 <__assert_fail@plt+0x3ecc>
   154e8:	subs	r8, r8, r0
   154ec:	sbc	r9, r9, r1
   154f0:	cmp	r6, r8
   154f4:	sbcs	r3, r7, r9
   154f8:	movlt	r3, #1
   154fc:	movge	r3, #0
   15500:	orrs	r3, r3, r9, lsr #31
   15504:	beq	15534 <__assert_fail@plt+0x4058>
   15508:	ldr	r3, [r5, #24]
   1550c:	cmp	r3, #1
   15510:	beq	15534 <__assert_fail@plt+0x4058>
   15514:	mov	r2, #5
   15518:	ldr	r1, [pc, #176]	; 155d0 <__assert_fail@plt+0x40f4>
   1551c:	mov	r0, #0
   15520:	bl	11230 <dcgettext@plt>
   15524:	mov	r2, r0
   15528:	mov	r1, #0
   1552c:	mov	r0, r1
   15530:	bl	11d0c <__assert_fail@plt+0x830>
   15534:	mov	r3, #1
   15538:	str	r3, [sp]
   1553c:	mov	r2, r8
   15540:	mov	r3, r9
   15544:	mov	r0, #0
   15548:	bl	112a8 <lseek64@plt>
   1554c:	cmp	r0, #0
   15550:	sbcs	r3, r1, #0
   15554:	bge	153a8 <__assert_fail@plt+0x3ecc>
   15558:	ldr	r3, [fp]
   1555c:	cmp	r3, #0
   15560:	bne	15354 <__assert_fail@plt+0x3e78>
   15564:	mov	r2, #5
   15568:	ldr	r1, [pc, #100]	; 155d4 <__assert_fail@plt+0x40f8>
   1556c:	mov	r0, #0
   15570:	bl	11230 <dcgettext@plt>
   15574:	mov	r2, r0
   15578:	mov	r1, #0
   1557c:	mov	r0, r1
   15580:	bl	11d0c <__assert_fail@plt+0x830>
   15584:	b	15354 <__assert_fail@plt+0x3e78>
   15588:	mov	r2, #5
   1558c:	ldr	r1, [pc, #68]	; 155d8 <__assert_fail@plt+0x40fc>
   15590:	mov	r0, #0
   15594:	bl	11230 <dcgettext@plt>
   15598:	mov	r6, r0
   1559c:	ldr	r1, [r4, #536]	; 0x218
   155a0:	mov	r0, #4
   155a4:	bl	18a3c <__assert_fail@plt+0x7560>
   155a8:	mov	r3, r0
   155ac:	mov	r2, r6
   155b0:	mov	r1, #0
   155b4:	mov	r0, r1
   155b8:	bl	11d0c <__assert_fail@plt+0x830>
   155bc:	b	15390 <__assert_fail@plt+0x3eb4>
   155c0:	blcc	fe6c7dc8 <opterr@@GLIBC_2.4+0xfe699be8>
   155c4:	andeq	r0, r0, r0
   155c8:	andeq	ip, r1, ip, lsr r8
   155cc:	andeq	ip, r1, ip, lsr #16
   155d0:	andeq	ip, r1, ip, asr #22
   155d4:	andeq	ip, r1, ip, ror fp
   155d8:	andeq	ip, r1, r4, lsr #22
   155dc:	andeq	lr, r2, r8, lsr r3
   155e0:	andeq	lr, r2, r0, asr r1
   155e4:	andeq	ip, r1, r4, lsr #23
   155e8:	andeq	ip, r1, ip, asr #21
   155ec:	andeq	ip, r1, ip, lsl #16
   155f0:			; <UNDEFINED> instruction: 0x0001cbb8
   155f4:	andeq	r2, r1, r4, lsl #23
   155f8:	andeq	lr, r2, r8, ror #3
   155fc:	andeq	r2, r1, ip, lsl #26
   15600:	add	r1, r4, #384	; 0x180
   15604:	ldrd	r2, [r1, #-8]
   15608:	adds	r2, r2, #1
   1560c:	adc	r3, r3, #0
   15610:	strd	r2, [r1, #-8]
   15614:	ldr	r3, [sp, #40]	; 0x28
   15618:	str	r3, [sp, #32]
   1561c:	ldr	r0, [r4, #284]	; 0x11c
   15620:	ldr	r3, [r4, #300]	; 0x12c
   15624:	cmp	r0, r3
   15628:	beq	157c8 <__assert_fail@plt+0x42ec>
   1562c:	ldrb	r3, [r4, #256]	; 0x100
   15630:	cmp	r3, #0
   15634:	bne	15928 <__assert_fail@plt+0x444c>
   15638:	ldr	r2, [r4, #288]	; 0x120
   1563c:	lsr	r3, r2, #7
   15640:	eor	r3, r3, #1
   15644:	cmp	r8, #0
   15648:	orreq	r3, r3, #1
   1564c:	tst	r3, #1
   15650:	bne	156b4 <__assert_fail@plt+0x41d8>
   15654:	ldr	r3, [sp, #56]	; 0x38
   15658:	mvn	r1, r3
   1565c:	lsr	r1, r1, #31
   15660:	and	r3, r8, #1
   15664:	cmp	r1, r3
   15668:	subne	r8, r8, #1
   1566c:	ldrbne	ip, [r0, r8]
   15670:	mvneq	ip, #0
   15674:	cmp	r8, #1
   15678:	ble	15698 <__assert_fail@plt+0x41bc>
   1567c:	mov	r3, r8
   15680:	add	r1, r0, r3
   15684:	ldrb	r1, [r1, #-2]
   15688:	strb	r1, [r0, r3]
   1568c:	sub	r3, r3, #2
   15690:	cmp	r3, #1
   15694:	bgt	15680 <__assert_fail@plt+0x41a4>
   15698:	ldr	r3, [sp, #56]	; 0x38
   1569c:	cmp	r3, #0
   156a0:	addlt	r0, r0, #1
   156a4:	ldrbge	r3, [sp, #56]	; 0x38
   156a8:	strbge	r3, [r0, #1]
   156ac:	addge	r8, r8, #1
   156b0:	str	ip, [sp, #56]	; 0x38
   156b4:	tst	r2, #8
   156b8:	bne	15950 <__assert_fail@plt+0x4474>
   156bc:	tst	r2, #16
   156c0:	beq	1595c <__assert_fail@plt+0x4480>
   156c4:	mov	r1, r8
   156c8:	bl	13518 <__assert_fail@plt+0x203c>
   156cc:	ldr	r3, [r5, #24]
   156d0:	cmp	r3, #4
   156d4:	beq	15240 <__assert_fail@plt+0x3d64>
   156d8:	add	r2, r4, #368	; 0x170
   156dc:	add	r3, r4, #384	; 0x180
   156e0:	ldrd	r6, [r2]
   156e4:	ldrd	r2, [r3, #-8]
   156e8:	adds	r6, r6, r2
   156ec:	adc	r7, r7, r3
   156f0:	ldr	sl, [r4, #580]	; 0x244
   156f4:	ldrd	r8, [r5, #32]
   156f8:	adds	r1, sl, #0
   156fc:	movne	r1, #1
   15700:	adds	r2, r8, r1
   15704:	adc	r3, r9, #0
   15708:	cmp	r6, r2
   1570c:	sbcs	r3, r7, r3
   15710:	bge	15410 <__assert_fail@plt+0x3f34>
   15714:	ldr	r1, [r4, #288]	; 0x120
   15718:	and	r3, r1, #1280	; 0x500
   1571c:	cmp	r3, #1280	; 0x500
   15720:	beq	15284 <__assert_fail@plt+0x3da8>
   15724:	cmp	r6, r8
   15728:	sbcs	r3, r7, r9
   1572c:	ldr	r3, [r4, #564]	; 0x234
   15730:	movge	r2, sl
   15734:	ldrlt	r2, [r4, #292]	; 0x124
   15738:	ldr	r1, [r4, #284]	; 0x11c
   1573c:	mov	r0, #0
   15740:	blx	r3
   15744:	mov	r8, r0
   15748:	cmp	r0, #0
   1574c:	ble	152b0 <__assert_fail@plt+0x3dd4>
   15750:	asr	r7, r0, #31
   15754:	mov	r1, r7
   15758:	bl	116a8 <__assert_fail@plt+0x1cc>
   1575c:	ldrb	r3, [r4, #600]	; 0x258
   15760:	cmp	r3, #0
   15764:	bne	1529c <__assert_fail@plt+0x3dc0>
   15768:	ldr	r2, [r4, #292]	; 0x124
   1576c:	cmp	r8, r2
   15770:	bge	15600 <__assert_fail@plt+0x4124>
   15774:	add	r3, r4, #368	; 0x170
   15778:	ldrd	r0, [r3]
   1577c:	adds	r0, r0, #1
   15780:	adc	r1, r1, #0
   15784:	strd	r0, [r3]
   15788:	ldr	r3, [r4, #288]	; 0x120
   1578c:	tst	r3, #1024	; 0x400
   15790:	streq	r8, [sp, #32]
   15794:	beq	1561c <__assert_fail@plt+0x4140>
   15798:	tst	r3, #256	; 0x100
   1579c:	bne	157bc <__assert_fail@plt+0x42e0>
   157a0:	ldr	r0, [r4, #284]	; 0x11c
   157a4:	ands	r3, r3, #24
   157a8:	sub	r2, r2, r8
   157ac:	moveq	r1, r3
   157b0:	movne	r1, #32
   157b4:	add	r0, r0, r8
   157b8:	bl	113d4 <memset@plt>
   157bc:	str	r8, [sp, #32]
   157c0:	ldr	r8, [r4, #292]	; 0x124
   157c4:	b	1561c <__assert_fail@plt+0x4140>
   157c8:	mov	r2, r8
   157cc:	mov	r1, r0
   157d0:	mov	r0, #1
   157d4:	bl	13118 <__assert_fail@plt+0x1c3c>
   157d8:	ldr	r1, [sp, #64]	; 0x40
   157dc:	ldrd	r2, [r1]
   157e0:	adds	r2, r2, r0
   157e4:	adc	r3, r3, r0, asr #31
   157e8:	strd	r2, [r1]
   157ec:	cmp	r0, r8
   157f0:	bne	15818 <__assert_fail@plt+0x433c>
   157f4:	ldr	r3, [r4, #292]	; 0x124
   157f8:	cmp	r3, r8
   157fc:	beq	15910 <__assert_fail@plt+0x4434>
   15800:	add	r1, r4, #352	; 0x160
   15804:	ldrd	r2, [r1]
   15808:	adds	r2, r2, #1
   1580c:	adc	r3, r3, #0
   15810:	strd	r2, [r1]
   15814:	b	156cc <__assert_fail@plt+0x41f0>
   15818:	ldr	r4, [fp]
   1581c:	mov	r2, #5
   15820:	ldr	r1, [pc, #-580]	; 155e4 <__assert_fail@plt+0x4108>
   15824:	mov	r0, #0
   15828:	bl	11230 <dcgettext@plt>
   1582c:	mov	r5, r0
   15830:	ldr	r3, [pc, #-576]	; 155f8 <__assert_fail@plt+0x411c>
   15834:	ldr	r1, [r3, #532]	; 0x214
   15838:	mov	r0, #4
   1583c:	bl	18a3c <__assert_fail@plt+0x7560>
   15840:	mov	r3, r0
   15844:	mov	r2, r5
   15848:	mov	r1, r4
   1584c:	mov	r0, #0
   15850:	bl	11d0c <__assert_fail@plt+0x830>
   15854:	mov	r3, #1
   15858:	str	r3, [sp, #48]	; 0x30
   1585c:	bl	12f00 <__assert_fail@plt+0x1a24>
   15860:	ldr	r3, [sp, #48]	; 0x30
   15864:	cmp	r0, #0
   15868:	movne	r3, r0
   1586c:	str	r3, [sp, #48]	; 0x30
   15870:	ldr	r3, [pc, #-664]	; 155e0 <__assert_fail@plt+0x4104>
   15874:	ldrd	r2, [r3, #32]
   15878:	orrs	r3, r2, r3
   1587c:	bne	15d0c <__assert_fail@plt+0x4830>
   15880:	ldr	r3, [pc, #-656]	; 155f8 <__assert_fail@plt+0x411c>
   15884:	ldr	r3, [r3, #580]	; 0x244
   15888:	cmp	r3, #0
   1588c:	bne	15d0c <__assert_fail@plt+0x4830>
   15890:	ldr	r3, [pc, #-672]	; 155f8 <__assert_fail@plt+0x411c>
   15894:	ldrb	r3, [r3, #600]	; 0x258
   15898:	cmp	r3, #0
   1589c:	bne	15cac <__assert_fail@plt+0x47d0>
   158a0:	ldr	r3, [pc, #-688]	; 155f8 <__assert_fail@plt+0x411c>
   158a4:	ldrb	r3, [r3, #545]	; 0x221
   158a8:	cmp	r3, #0
   158ac:	beq	15d6c <__assert_fail@plt+0x4890>
   158b0:	mov	r2, #0
   158b4:	mov	r3, #0
   158b8:	mov	r0, #1
   158bc:	bl	12230 <__assert_fail@plt+0xd54>
   158c0:	cmp	r0, #0
   158c4:	bne	15d6c <__assert_fail@plt+0x4890>
   158c8:	ldr	r4, [fp]
   158cc:	mov	r2, #5
   158d0:	ldr	r1, [pc, #-744]	; 155f0 <__assert_fail@plt+0x4114>
   158d4:	bl	11230 <dcgettext@plt>
   158d8:	mov	r5, r0
   158dc:	ldr	r3, [pc, #-748]	; 155f8 <__assert_fail@plt+0x411c>
   158e0:	ldr	r2, [r3, #532]	; 0x214
   158e4:	mov	r1, #3
   158e8:	mov	r0, #0
   158ec:	bl	18b08 <__assert_fail@plt+0x762c>
   158f0:	mov	r3, r0
   158f4:	mov	r2, r5
   158f8:	mov	r1, r4
   158fc:	mov	r0, #0
   15900:	bl	11d0c <__assert_fail@plt+0x830>
   15904:	mov	r3, #1
   15908:	str	r3, [sp, #48]	; 0x30
   1590c:	b	15d6c <__assert_fail@plt+0x4890>
   15910:	add	r1, r4, #368	; 0x170
   15914:	ldrd	r2, [r1, #-8]
   15918:	adds	r2, r2, #1
   1591c:	adc	r3, r3, #0
   15920:	strd	r2, [r1, #-8]
   15924:	b	156cc <__assert_fail@plt+0x41f0>
   15928:	cmp	r8, #0
   1592c:	beq	15e20 <__assert_fail@plt+0x4944>
   15930:	add	r1, r0, r8
   15934:	mov	r3, r0
   15938:	ldrb	r2, [r3]
   1593c:	ldrb	r2, [r4, r2]
   15940:	strb	r2, [r3], #1
   15944:	cmp	r3, r1
   15948:	bne	15938 <__assert_fail@plt+0x445c>
   1594c:	b	15638 <__assert_fail@plt+0x415c>
   15950:	mov	r1, r8
   15954:	bl	13420 <__assert_fail@plt+0x1f44>
   15958:	b	156cc <__assert_fail@plt+0x41f0>
   1595c:	mov	r9, r0
   15960:	b	1596c <__assert_fail@plt+0x4490>
   15964:	cmp	r8, #0
   15968:	beq	156cc <__assert_fail@plt+0x41f0>
   1596c:	ldr	r7, [r4, #548]	; 0x224
   15970:	ldr	r6, [r4, #304]	; 0x130
   15974:	sub	r6, r6, r7
   15978:	cmp	r6, r8
   1597c:	movge	r6, r8
   15980:	ldr	r0, [r4, #300]	; 0x12c
   15984:	mov	r2, r6
   15988:	mov	r1, r9
   1598c:	add	r0, r0, r7
   15990:	bl	111e8 <memcpy@plt>
   15994:	sub	r8, r8, r6
   15998:	add	r9, r9, r6
   1599c:	add	r6, r7, r6
   159a0:	str	r6, [r4, #548]	; 0x224
   159a4:	ldr	r3, [r4, #304]	; 0x130
   159a8:	cmp	r6, r3
   159ac:	blt	15964 <__assert_fail@plt+0x4488>
   159b0:	bl	1334c <__assert_fail@plt+0x1e70>
   159b4:	b	15964 <__assert_fail@plt+0x4488>
   159b8:	mov	r3, #1
   159bc:	str	r3, [sp, #48]	; 0x30
   159c0:	b	15410 <__assert_fail@plt+0x3f34>
   159c4:	mov	r1, #1
   159c8:	add	r0, sp, #88	; 0x58
   159cc:	bl	13420 <__assert_fail@plt+0x1f44>
   159d0:	b	15460 <__assert_fail@plt+0x3f84>
   159d4:	mov	r1, #1
   159d8:	add	r0, sp, #88	; 0x58
   159dc:	bl	13518 <__assert_fail@plt+0x203c>
   159e0:	b	15460 <__assert_fail@plt+0x3f84>
   159e4:	bl	1334c <__assert_fail@plt+0x1e70>
   159e8:	b	15460 <__assert_fail@plt+0x3f84>
   159ec:	add	r5, r5, #1
   159f0:	ldr	r3, [r4, #556]	; 0x22c
   159f4:	cmp	r5, r3
   159f8:	bge	15a28 <__assert_fail@plt+0x454c>
   159fc:	ldr	r1, [r4, #300]	; 0x12c
   15a00:	ldr	r2, [r4, #548]	; 0x224
   15a04:	add	r3, r2, #1
   15a08:	str	r3, [r4, #548]	; 0x224
   15a0c:	ldrb	r0, [r6, #29]
   15a10:	strb	r0, [r1, r2]
   15a14:	ldr	r2, [r4, #304]	; 0x130
   15a18:	cmp	r3, r2
   15a1c:	blt	159ec <__assert_fail@plt+0x4510>
   15a20:	bl	1334c <__assert_fail@plt+0x1e70>
   15a24:	b	159ec <__assert_fail@plt+0x4510>
   15a28:	ldr	r3, [pc, #-1080]	; 155f8 <__assert_fail@plt+0x411c>
   15a2c:	ldr	r3, [r3, #552]	; 0x228
   15a30:	cmp	r3, #0
   15a34:	bne	15ab0 <__assert_fail@plt+0x45d4>
   15a38:	ldr	r3, [pc, #-1096]	; 155f8 <__assert_fail@plt+0x411c>
   15a3c:	ldr	r2, [r3, #548]	; 0x224
   15a40:	cmp	r2, #0
   15a44:	bne	15af4 <__assert_fail@plt+0x4618>
   15a48:	ldr	r3, [pc, #-1112]	; 155f8 <__assert_fail@plt+0x411c>
   15a4c:	ldrb	r3, [r3, #544]	; 0x220
   15a50:	cmp	r3, #0
   15a54:	bne	15b8c <__assert_fail@plt+0x46b0>
   15a58:	ldr	r3, [pc, #-1128]	; 155f8 <__assert_fail@plt+0x411c>
   15a5c:	ldr	r3, [r3, #288]	; 0x120
   15a60:	tst	r3, #49152	; 0xc000
   15a64:	beq	1585c <__assert_fail@plt+0x4380>
   15a68:	ldr	r3, [pc, #-1168]	; 155e0 <__assert_fail@plt+0x4104>
   15a6c:	ldr	r3, [r3, #24]
   15a70:	cmp	r3, #4
   15a74:	bne	1585c <__assert_fail@plt+0x4380>
   15a78:	ldr	r3, [pc, #-1184]	; 155e0 <__assert_fail@plt+0x4104>
   15a7c:	ldrd	r2, [r3, #16]
   15a80:	cmp	r2, #0
   15a84:	sbcs	r1, r3, #0
   15a88:	blt	1585c <__assert_fail@plt+0x4380>
   15a8c:	ldr	r1, [pc, #-1208]	; 155dc <__assert_fail@plt+0x4100>
   15a90:	ldrd	r0, [r1]
   15a94:	cmp	r2, r0
   15a98:	sbcs	r3, r3, r1
   15a9c:	bge	1585c <__assert_fail@plt+0x4380>
   15aa0:	mov	r0, #0
   15aa4:	mov	r1, #0
   15aa8:	bl	12578 <__assert_fail@plt+0x109c>
   15aac:	b	1585c <__assert_fail@plt+0x4380>
   15ab0:	ldr	r3, [pc, #-1216]	; 155f8 <__assert_fail@plt+0x411c>
   15ab4:	ldr	r3, [r3, #288]	; 0x120
   15ab8:	tst	r3, #16
   15abc:	beq	15a38 <__assert_fail@plt+0x455c>
   15ac0:	ldr	r3, [pc, #-1232]	; 155f8 <__assert_fail@plt+0x411c>
   15ac4:	ldr	r0, [r3, #300]	; 0x12c
   15ac8:	ldr	r1, [r3, #548]	; 0x224
   15acc:	add	r2, r1, #1
   15ad0:	str	r2, [r3, #548]	; 0x224
   15ad4:	ldr	ip, [pc, #-1276]	; 155e0 <__assert_fail@plt+0x4104>
   15ad8:	ldrb	ip, [ip, #28]
   15adc:	strb	ip, [r0, r1]
   15ae0:	ldr	r3, [r3, #304]	; 0x130
   15ae4:	cmp	r2, r3
   15ae8:	blt	15a38 <__assert_fail@plt+0x455c>
   15aec:	bl	1334c <__assert_fail@plt+0x1e70>
   15af0:	b	15a38 <__assert_fail@plt+0x455c>
   15af4:	mov	r4, r3
   15af8:	ldr	r1, [r3, #300]	; 0x12c
   15afc:	mov	r0, #1
   15b00:	bl	13118 <__assert_fail@plt+0x1c3c>
   15b04:	add	r4, r4, #336	; 0x150
   15b08:	ldrd	r2, [r4]
   15b0c:	adds	r2, r2, r0
   15b10:	adc	r3, r3, r0, asr #31
   15b14:	strd	r2, [r4]
   15b18:	cmp	r0, #0
   15b1c:	beq	15b34 <__assert_fail@plt+0x4658>
   15b20:	add	r1, r4, #16
   15b24:	ldrd	r2, [r1]
   15b28:	adds	r2, r2, #1
   15b2c:	adc	r3, r3, #0
   15b30:	strd	r2, [r1]
   15b34:	ldr	r3, [pc, #-1348]	; 155f8 <__assert_fail@plt+0x411c>
   15b38:	ldr	r3, [r3, #548]	; 0x224
   15b3c:	cmp	r0, r3
   15b40:	beq	15a48 <__assert_fail@plt+0x456c>
   15b44:	ldr	r4, [fp]
   15b48:	mov	r2, #5
   15b4c:	ldr	r1, [pc, #-1392]	; 155e4 <__assert_fail@plt+0x4108>
   15b50:	mov	r0, #0
   15b54:	bl	11230 <dcgettext@plt>
   15b58:	mov	r5, r0
   15b5c:	ldr	r3, [pc, #-1388]	; 155f8 <__assert_fail@plt+0x411c>
   15b60:	ldr	r1, [r3, #532]	; 0x214
   15b64:	mov	r0, #4
   15b68:	bl	18a3c <__assert_fail@plt+0x7560>
   15b6c:	mov	r3, r0
   15b70:	mov	r2, r5
   15b74:	mov	r1, r4
   15b78:	mov	r0, #0
   15b7c:	bl	11d0c <__assert_fail@plt+0x830>
   15b80:	mov	r3, #1
   15b84:	str	r3, [sp, #48]	; 0x30
   15b88:	b	1585c <__assert_fail@plt+0x4380>
   15b8c:	add	r1, sp, #88	; 0x58
   15b90:	mov	r0, #1
   15b94:	bl	12db8 <__assert_fail@plt+0x18dc>
   15b98:	cmp	r0, #0
   15b9c:	bne	15c58 <__assert_fail@plt+0x477c>
   15ba0:	ldr	r3, [sp, #104]	; 0x68
   15ba4:	and	r3, r3, #61440	; 0xf000
   15ba8:	cmp	r3, #32768	; 0x8000
   15bac:	bne	15a58 <__assert_fail@plt+0x457c>
   15bb0:	mov	r0, #1
   15bb4:	str	r0, [sp]
   15bb8:	mov	r2, #0
   15bbc:	mov	r3, #0
   15bc0:	bl	112a8 <lseek64@plt>
   15bc4:	mov	r4, r0
   15bc8:	mov	r5, r1
   15bcc:	cmp	r0, #0
   15bd0:	sbcs	r3, r1, #0
   15bd4:	blt	15a58 <__assert_fail@plt+0x457c>
   15bd8:	ldrd	r2, [sp, #136]	; 0x88
   15bdc:	cmp	r2, r0
   15be0:	sbcs	r3, r3, r1
   15be4:	bge	15a58 <__assert_fail@plt+0x457c>
   15be8:	mov	r6, #1
   15bec:	bl	12af0 <__assert_fail@plt+0x1614>
   15bf0:	mov	r2, r4
   15bf4:	mov	r3, r5
   15bf8:	mov	r0, r6
   15bfc:	bl	1120c <ftruncate64@plt>
   15c00:	cmp	r0, #0
   15c04:	bge	15ca0 <__assert_fail@plt+0x47c4>
   15c08:	ldr	r3, [fp]
   15c0c:	cmp	r3, #4
   15c10:	beq	15bec <__assert_fail@plt+0x4710>
   15c14:	ldr	r6, [fp]
   15c18:	mov	r2, #5
   15c1c:	ldr	r1, [pc, #-1596]	; 155e8 <__assert_fail@plt+0x410c>
   15c20:	mov	r0, #0
   15c24:	bl	11230 <dcgettext@plt>
   15c28:	mov	r7, r0
   15c2c:	ldr	r3, [pc, #-1596]	; 155f8 <__assert_fail@plt+0x411c>
   15c30:	ldr	r1, [r3, #532]	; 0x214
   15c34:	mov	r0, #4
   15c38:	bl	18a3c <__assert_fail@plt+0x7560>
   15c3c:	str	r0, [sp, #8]
   15c40:	strd	r4, [sp]
   15c44:	mov	r2, r7
   15c48:	mov	r1, r6
   15c4c:	mov	r0, #0
   15c50:	bl	11d0c <__assert_fail@plt+0x830>
   15c54:	b	15c94 <__assert_fail@plt+0x47b8>
   15c58:	ldr	r4, [fp]
   15c5c:	mov	r2, #5
   15c60:	ldr	r1, [pc, #-1660]	; 155ec <__assert_fail@plt+0x4110>
   15c64:	mov	r0, #0
   15c68:	bl	11230 <dcgettext@plt>
   15c6c:	mov	r5, r0
   15c70:	ldr	r3, [pc, #-1664]	; 155f8 <__assert_fail@plt+0x411c>
   15c74:	ldr	r1, [r3, #532]	; 0x214
   15c78:	mov	r0, #4
   15c7c:	bl	18a3c <__assert_fail@plt+0x7560>
   15c80:	mov	r3, r0
   15c84:	mov	r2, r5
   15c88:	mov	r1, r4
   15c8c:	mov	r0, #0
   15c90:	bl	11d0c <__assert_fail@plt+0x830>
   15c94:	mov	r3, #1
   15c98:	str	r3, [sp, #48]	; 0x30
   15c9c:	b	1585c <__assert_fail@plt+0x4380>
   15ca0:	cmp	r0, #0
   15ca4:	beq	15a58 <__assert_fail@plt+0x457c>
   15ca8:	b	15c14 <__assert_fail@plt+0x4738>
   15cac:	mov	r2, #0
   15cb0:	mov	r3, #0
   15cb4:	mov	r0, #0
   15cb8:	bl	12230 <__assert_fail@plt+0xd54>
   15cbc:	cmp	r0, #0
   15cc0:	bne	158a0 <__assert_fail@plt+0x43c4>
   15cc4:	ldr	r4, [fp]
   15cc8:	mov	r2, #5
   15ccc:	ldr	r1, [pc, #-1764]	; 155f0 <__assert_fail@plt+0x4114>
   15cd0:	bl	11230 <dcgettext@plt>
   15cd4:	mov	r5, r0
   15cd8:	ldr	r3, [pc, #-1768]	; 155f8 <__assert_fail@plt+0x411c>
   15cdc:	ldr	r2, [r3, #536]	; 0x218
   15ce0:	mov	r1, #3
   15ce4:	mov	r0, #0
   15ce8:	bl	18b08 <__assert_fail@plt+0x762c>
   15cec:	mov	r3, r0
   15cf0:	mov	r2, r5
   15cf4:	mov	r1, r4
   15cf8:	mov	r0, #0
   15cfc:	bl	11d0c <__assert_fail@plt+0x830>
   15d00:	mov	r3, #1
   15d04:	str	r3, [sp, #48]	; 0x30
   15d08:	b	158a0 <__assert_fail@plt+0x43c4>
   15d0c:	ldr	r3, [pc, #-1820]	; 155f8 <__assert_fail@plt+0x411c>
   15d10:	ldrb	r3, [r3, #600]	; 0x258
   15d14:	cmp	r3, #0
   15d18:	bne	15d2c <__assert_fail@plt+0x4850>
   15d1c:	ldr	r3, [pc, #-1836]	; 155f8 <__assert_fail@plt+0x411c>
   15d20:	ldrb	r3, [r3, #328]	; 0x148
   15d24:	cmp	r3, #0
   15d28:	beq	15d3c <__assert_fail@plt+0x4860>
   15d2c:	mov	r2, #0
   15d30:	mov	r3, #0
   15d34:	mov	r0, #0
   15d38:	bl	12230 <__assert_fail@plt+0xd54>
   15d3c:	ldr	r3, [pc, #-1868]	; 155f8 <__assert_fail@plt+0x411c>
   15d40:	ldrb	r3, [r3, #545]	; 0x221
   15d44:	cmp	r3, #0
   15d48:	bne	15d5c <__assert_fail@plt+0x4880>
   15d4c:	ldr	r3, [pc, #-1884]	; 155f8 <__assert_fail@plt+0x411c>
   15d50:	ldrb	r3, [r3, #329]	; 0x149
   15d54:	cmp	r3, #0
   15d58:	beq	15d6c <__assert_fail@plt+0x4890>
   15d5c:	mov	r2, #0
   15d60:	mov	r3, #0
   15d64:	mov	r0, #1
   15d68:	bl	12230 <__assert_fail@plt+0xd54>
   15d6c:	bl	13338 <__assert_fail@plt+0x1e5c>
   15d70:	ldr	r0, [sp, #48]	; 0x30
   15d74:	bl	11374 <exit@plt>
   15d78:	ldrd	r2, [sp, #32]
   15d7c:	strd	r2, [sp, #40]	; 0x28
   15d80:	ldrd	r2, [sp, #32]
   15d84:	cmp	r2, #0
   15d88:	sbcs	r3, r3, #0
   15d8c:	blt	14030 <__assert_fail@plt+0x2b54>
   15d90:	ldr	r2, [sp, #88]	; 0x58
   15d94:	cmp	r2, #0
   15d98:	beq	13e24 <__assert_fail@plt+0x2948>
   15d9c:	b	1403c <__assert_fail@plt+0x2b60>
   15da0:	ldrd	r2, [sp, #32]
   15da4:	strd	r2, [sp, #56]	; 0x38
   15da8:	b	15d80 <__assert_fail@plt+0x48a4>
   15dac:	mov	r2, #1
   15db0:	ldr	r3, [pc, #-1984]	; 155f8 <__assert_fail@plt+0x411c>
   15db4:	strb	r2, [r3, #528]	; 0x210
   15db8:	ldr	r2, [pc, #-1996]	; 155f4 <__assert_fail@plt+0x4118>
   15dbc:	b	14470 <__assert_fail@plt+0x2f94>
   15dc0:	ldr	r3, [pc, #-2000]	; 155f8 <__assert_fail@plt+0x411c>
   15dc4:	ldr	r0, [r3, #300]	; 0x12c
   15dc8:	ldr	r2, [r3, #304]	; 0x130
   15dcc:	mov	r1, #0
   15dd0:	bl	113d4 <memset@plt>
   15dd4:	ldr	r7, [pc, #-2020]	; 155f8 <__assert_fail@plt+0x411c>
   15dd8:	mov	r8, #1
   15ddc:	orrs	r3, r4, r5
   15de0:	beq	15180 <__assert_fail@plt+0x3ca4>
   15de4:	ldr	r6, [r7, #304]	; 0x130
   15de8:	mov	r2, r6
   15dec:	ldr	r1, [r7, #300]	; 0x12c
   15df0:	mov	r0, r8
   15df4:	bl	13118 <__assert_fail@plt+0x1c3c>
   15df8:	cmp	r6, r0
   15dfc:	bne	151f8 <__assert_fail@plt+0x3d1c>
   15e00:	subs	r4, r4, #1
   15e04:	sbc	r5, r5, #0
   15e08:	orrs	r3, r4, r5
   15e0c:	bne	15ddc <__assert_fail@plt+0x4900>
   15e10:	ldr	r3, [sp, #88]	; 0x58
   15e14:	cmp	r3, #0
   15e18:	bne	15ddc <__assert_fail@plt+0x4900>
   15e1c:	b	151a0 <__assert_fail@plt+0x3cc4>
   15e20:	ldr	r2, [r4, #288]	; 0x120
   15e24:	b	156b4 <__assert_fail@plt+0x41d8>
   15e28:	mov	r2, #0
   15e2c:	ldr	r3, [pc, #-2108]	; 155f8 <__assert_fail@plt+0x411c>
   15e30:	strb	r2, [r3, #528]	; 0x210
   15e34:	ldr	r2, [pc, #-2112]	; 155fc <__assert_fail@plt+0x4120>
   15e38:	b	14470 <__assert_fail@plt+0x2f94>
   15e3c:	push	{r4, r5, r6, lr}
   15e40:	mov	r5, r0
   15e44:	bl	112c0 <__fpending@plt>
   15e48:	mov	r6, r0
   15e4c:	ldr	r4, [r5]
   15e50:	and	r4, r4, #32
   15e54:	mov	r0, r5
   15e58:	bl	15fc8 <__assert_fail@plt+0x4aec>
   15e5c:	cmp	r4, #0
   15e60:	bne	15e88 <__assert_fail@plt+0x49ac>
   15e64:	cmp	r0, #0
   15e68:	popeq	{r4, r5, r6, pc}
   15e6c:	cmp	r6, #0
   15e70:	bne	15ea4 <__assert_fail@plt+0x49c8>
   15e74:	bl	113a4 <__errno_location@plt>
   15e78:	ldr	r0, [r0]
   15e7c:	subs	r0, r0, #9
   15e80:	mvnne	r0, #0
   15e84:	pop	{r4, r5, r6, pc}
   15e88:	cmp	r0, #0
   15e8c:	bne	15eac <__assert_fail@plt+0x49d0>
   15e90:	bl	113a4 <__errno_location@plt>
   15e94:	mov	r3, #0
   15e98:	str	r3, [r0]
   15e9c:	mvn	r0, #0
   15ea0:	pop	{r4, r5, r6, pc}
   15ea4:	mvn	r0, #0
   15ea8:	pop	{r4, r5, r6, pc}
   15eac:	mvn	r0, #0
   15eb0:	pop	{r4, r5, r6, pc}
   15eb4:	ldr	r3, [pc, #4]	; 15ec0 <__assert_fail@plt+0x49e4>
   15eb8:	str	r0, [r3]
   15ebc:	bx	lr
   15ec0:	andeq	lr, r2, r0, asr r4
   15ec4:	ldr	r3, [pc, #4]	; 15ed0 <__assert_fail@plt+0x49f4>
   15ec8:	strb	r0, [r3, #4]
   15ecc:	bx	lr
   15ed0:	andeq	lr, r2, r0, asr r4
   15ed4:	push	{r4, r5, r6, lr}
   15ed8:	sub	sp, sp, #8
   15edc:	ldr	r3, [pc, #200]	; 15fac <__assert_fail@plt+0x4ad0>
   15ee0:	ldr	r0, [r3]
   15ee4:	bl	15e3c <__assert_fail@plt+0x4960>
   15ee8:	cmp	r0, #0
   15eec:	beq	15f10 <__assert_fail@plt+0x4a34>
   15ef0:	ldr	r3, [pc, #184]	; 15fb0 <__assert_fail@plt+0x4ad4>
   15ef4:	ldrb	r3, [r3, #4]
   15ef8:	cmp	r3, #0
   15efc:	beq	15f2c <__assert_fail@plt+0x4a50>
   15f00:	bl	113a4 <__errno_location@plt>
   15f04:	ldr	r3, [r0]
   15f08:	cmp	r3, #32
   15f0c:	bne	15f2c <__assert_fail@plt+0x4a50>
   15f10:	ldr	r3, [pc, #156]	; 15fb4 <__assert_fail@plt+0x4ad8>
   15f14:	ldr	r0, [r3]
   15f18:	bl	15e3c <__assert_fail@plt+0x4960>
   15f1c:	cmp	r0, #0
   15f20:	bne	15fa0 <__assert_fail@plt+0x4ac4>
   15f24:	add	sp, sp, #8
   15f28:	pop	{r4, r5, r6, pc}
   15f2c:	mov	r2, #5
   15f30:	ldr	r1, [pc, #128]	; 15fb8 <__assert_fail@plt+0x4adc>
   15f34:	mov	r0, #0
   15f38:	bl	11230 <dcgettext@plt>
   15f3c:	mov	r4, r0
   15f40:	ldr	r3, [pc, #104]	; 15fb0 <__assert_fail@plt+0x4ad4>
   15f44:	ldr	r5, [r3]
   15f48:	cmp	r5, #0
   15f4c:	beq	15f84 <__assert_fail@plt+0x4aa8>
   15f50:	bl	113a4 <__errno_location@plt>
   15f54:	ldr	r6, [r0]
   15f58:	mov	r0, r5
   15f5c:	bl	18ae8 <__assert_fail@plt+0x760c>
   15f60:	str	r4, [sp]
   15f64:	mov	r3, r0
   15f68:	ldr	r2, [pc, #76]	; 15fbc <__assert_fail@plt+0x4ae0>
   15f6c:	mov	r1, r6
   15f70:	mov	r0, #0
   15f74:	bl	112d8 <error@plt>
   15f78:	ldr	r3, [pc, #64]	; 15fc0 <__assert_fail@plt+0x4ae4>
   15f7c:	ldr	r0, [r3]
   15f80:	bl	111dc <_exit@plt>
   15f84:	bl	113a4 <__errno_location@plt>
   15f88:	mov	r3, r4
   15f8c:	ldr	r2, [pc, #48]	; 15fc4 <__assert_fail@plt+0x4ae8>
   15f90:	ldr	r1, [r0]
   15f94:	mov	r0, #0
   15f98:	bl	112d8 <error@plt>
   15f9c:	b	15f78 <__assert_fail@plt+0x4a9c>
   15fa0:	ldr	r3, [pc, #24]	; 15fc0 <__assert_fail@plt+0x4ae4>
   15fa4:	ldr	r0, [r3]
   15fa8:	bl	111dc <_exit@plt>
   15fac:	ldrdeq	lr, [r2], -ip
   15fb0:	andeq	lr, r2, r0, asr r4
   15fb4:	ldrdeq	lr, [r2], -r8
   15fb8:	andeq	ip, r1, r4, asr ip
   15fbc:	andeq	ip, r1, r8, ror #11
   15fc0:	andeq	lr, r2, ip, ror r1
   15fc4:	andeq	ip, r1, ip, lsl #13
   15fc8:	push	{r4, r5, r6, lr}
   15fcc:	sub	sp, sp, #8
   15fd0:	mov	r4, r0
   15fd4:	bl	113f8 <fileno@plt>
   15fd8:	cmp	r0, #0
   15fdc:	blt	16054 <__assert_fail@plt+0x4b78>
   15fe0:	mov	r0, r4
   15fe4:	bl	1132c <__freading@plt>
   15fe8:	cmp	r0, #0
   15fec:	beq	16020 <__assert_fail@plt+0x4b44>
   15ff0:	mov	r0, r4
   15ff4:	bl	113f8 <fileno@plt>
   15ff8:	mov	r3, #1
   15ffc:	str	r3, [sp]
   16000:	mov	r2, #0
   16004:	mov	r3, #0
   16008:	bl	112a8 <lseek64@plt>
   1600c:	mvn	r2, #0
   16010:	mvn	r3, #0
   16014:	cmp	r1, r3
   16018:	cmpeq	r0, r2
   1601c:	beq	16060 <__assert_fail@plt+0x4b84>
   16020:	mov	r0, r4
   16024:	bl	1632c <__assert_fail@plt+0x4e50>
   16028:	cmp	r0, #0
   1602c:	beq	16060 <__assert_fail@plt+0x4b84>
   16030:	bl	113a4 <__errno_location@plt>
   16034:	mov	r5, r0
   16038:	ldr	r6, [r0]
   1603c:	mov	r0, r4
   16040:	bl	11410 <fclose@plt>
   16044:	cmp	r6, #0
   16048:	strne	r6, [r5]
   1604c:	mvnne	r0, #0
   16050:	b	16068 <__assert_fail@plt+0x4b8c>
   16054:	mov	r0, r4
   16058:	bl	11410 <fclose@plt>
   1605c:	b	16068 <__assert_fail@plt+0x4b8c>
   16060:	mov	r0, r4
   16064:	bl	11410 <fclose@plt>
   16068:	add	sp, sp, #8
   1606c:	pop	{r4, r5, r6, pc}
   16070:	push	{r1, r2, r3}
   16074:	push	{r4, r5, r6, lr}
   16078:	sub	sp, sp, #12
   1607c:	mov	r5, r0
   16080:	ldr	r1, [sp, #28]
   16084:	add	r3, sp, #32
   16088:	str	r3, [sp, #4]
   1608c:	cmp	r1, #0
   16090:	beq	160d8 <__assert_fail@plt+0x4bfc>
   16094:	ldr	r3, [pc, #540]	; 162b8 <__assert_fail@plt+0x4ddc>
   16098:	cmp	r1, r3
   1609c:	beq	16108 <__assert_fail@plt+0x4c2c>
   160a0:	cmp	r1, #11
   160a4:	beq	162a8 <__assert_fail@plt+0x4dcc>
   160a8:	bgt	16234 <__assert_fail@plt+0x4d58>
   160ac:	cmp	r1, #3
   160b0:	beq	162a8 <__assert_fail@plt+0x4dcc>
   160b4:	ble	161f4 <__assert_fail@plt+0x4d18>
   160b8:	cmp	r1, #8
   160bc:	beq	16214 <__assert_fail@plt+0x4d38>
   160c0:	ble	1620c <__assert_fail@plt+0x4d30>
   160c4:	cmp	r1, #9
   160c8:	beq	162a8 <__assert_fail@plt+0x4dcc>
   160cc:	cmp	r1, #10
   160d0:	bne	1626c <__assert_fail@plt+0x4d90>
   160d4:	b	16214 <__assert_fail@plt+0x4d38>
   160d8:	ldr	r3, [sp, #4]
   160dc:	add	r2, r3, #4
   160e0:	str	r2, [sp, #4]
   160e4:	ldr	r2, [r3]
   160e8:	mov	r1, #0
   160ec:	bl	11428 <fcntl64@plt>
   160f0:	mov	r4, r0
   160f4:	mov	r0, r4
   160f8:	add	sp, sp, #12
   160fc:	pop	{r4, r5, r6, lr}
   16100:	add	sp, sp, #12
   16104:	bx	lr
   16108:	ldr	r3, [sp, #4]
   1610c:	add	r2, r3, #4
   16110:	str	r2, [sp, #4]
   16114:	ldr	r6, [r3]
   16118:	ldr	r3, [pc, #412]	; 162bc <__assert_fail@plt+0x4de0>
   1611c:	ldr	r3, [r3]
   16120:	cmp	r3, #0
   16124:	blt	16184 <__assert_fail@plt+0x4ca8>
   16128:	mov	r2, r6
   1612c:	ldr	r1, [pc, #388]	; 162b8 <__assert_fail@plt+0x4ddc>
   16130:	bl	11428 <fcntl64@plt>
   16134:	subs	r4, r0, #0
   16138:	blt	1614c <__assert_fail@plt+0x4c70>
   1613c:	mov	r2, #1
   16140:	ldr	r3, [pc, #372]	; 162bc <__assert_fail@plt+0x4de0>
   16144:	str	r2, [r3]
   16148:	b	160f4 <__assert_fail@plt+0x4c18>
   1614c:	bl	113a4 <__errno_location@plt>
   16150:	ldr	r3, [r0]
   16154:	cmp	r3, #22
   16158:	bne	1613c <__assert_fail@plt+0x4c60>
   1615c:	mov	r2, r6
   16160:	mov	r1, #0
   16164:	mov	r0, r5
   16168:	bl	11428 <fcntl64@plt>
   1616c:	subs	r4, r0, #0
   16170:	blt	160f4 <__assert_fail@plt+0x4c18>
   16174:	mvn	r2, #0
   16178:	ldr	r3, [pc, #316]	; 162bc <__assert_fail@plt+0x4de0>
   1617c:	str	r2, [r3]
   16180:	b	161a8 <__assert_fail@plt+0x4ccc>
   16184:	mov	r2, r6
   16188:	mov	r1, #0
   1618c:	bl	11428 <fcntl64@plt>
   16190:	subs	r4, r0, #0
   16194:	blt	160f4 <__assert_fail@plt+0x4c18>
   16198:	ldr	r3, [pc, #284]	; 162bc <__assert_fail@plt+0x4de0>
   1619c:	ldr	r3, [r3]
   161a0:	cmn	r3, #1
   161a4:	bne	160f4 <__assert_fail@plt+0x4c18>
   161a8:	mov	r1, #1
   161ac:	mov	r0, r4
   161b0:	bl	11428 <fcntl64@plt>
   161b4:	subs	r2, r0, #0
   161b8:	blt	161d4 <__assert_fail@plt+0x4cf8>
   161bc:	orr	r2, r2, #1
   161c0:	mov	r1, #2
   161c4:	mov	r0, r4
   161c8:	bl	11428 <fcntl64@plt>
   161cc:	cmn	r0, #1
   161d0:	bne	160f4 <__assert_fail@plt+0x4c18>
   161d4:	bl	113a4 <__errno_location@plt>
   161d8:	mov	r5, r0
   161dc:	ldr	r6, [r0]
   161e0:	mov	r0, r4
   161e4:	bl	114b8 <close@plt>
   161e8:	str	r6, [r5]
   161ec:	mvn	r4, #0
   161f0:	b	160f4 <__assert_fail@plt+0x4c18>
   161f4:	cmp	r1, #1
   161f8:	beq	162a8 <__assert_fail@plt+0x4dcc>
   161fc:	bgt	16214 <__assert_fail@plt+0x4d38>
   16200:	cmp	r1, #0
   16204:	bne	1626c <__assert_fail@plt+0x4d90>
   16208:	b	16214 <__assert_fail@plt+0x4d38>
   1620c:	cmp	r1, #4
   16210:	bne	1626c <__assert_fail@plt+0x4d90>
   16214:	ldr	r3, [sp, #4]
   16218:	add	r2, r3, #4
   1621c:	str	r2, [sp, #4]
   16220:	ldr	r2, [r3]
   16224:	mov	r0, r5
   16228:	bl	11428 <fcntl64@plt>
   1622c:	mov	r4, r0
   16230:	b	160f4 <__assert_fail@plt+0x4c18>
   16234:	ldr	r3, [pc, #132]	; 162c0 <__assert_fail@plt+0x4de4>
   16238:	cmp	r1, r3
   1623c:	bgt	1628c <__assert_fail@plt+0x4db0>
   16240:	sub	r3, r3, #1
   16244:	cmp	r1, r3
   16248:	bge	16214 <__assert_fail@plt+0x4d38>
   1624c:	sub	r3, r3, #5
   16250:	cmp	r1, r3
   16254:	beq	162a8 <__assert_fail@plt+0x4dcc>
   16258:	add	r3, r3, #1
   1625c:	cmp	r1, r3
   16260:	beq	16214 <__assert_fail@plt+0x4d38>
   16264:	cmp	r1, #1024	; 0x400
   16268:	beq	16214 <__assert_fail@plt+0x4d38>
   1626c:	ldr	r3, [sp, #4]
   16270:	add	r2, r3, #4
   16274:	str	r2, [sp, #4]
   16278:	ldr	r2, [r3]
   1627c:	mov	r0, r5
   16280:	bl	11428 <fcntl64@plt>
   16284:	mov	r4, r0
   16288:	b	160f4 <__assert_fail@plt+0x4c18>
   1628c:	ldr	r3, [pc, #48]	; 162c4 <__assert_fail@plt+0x4de8>
   16290:	cmp	r1, r3
   16294:	beq	16214 <__assert_fail@plt+0x4d38>
   16298:	blt	162a8 <__assert_fail@plt+0x4dcc>
   1629c:	add	r3, r3, #1
   162a0:	cmp	r1, r3
   162a4:	bne	1626c <__assert_fail@plt+0x4d90>
   162a8:	mov	r0, r5
   162ac:	bl	11428 <fcntl64@plt>
   162b0:	mov	r4, r0
   162b4:	b	160f4 <__assert_fail@plt+0x4c18>
   162b8:	andeq	r0, r0, r6, lsl #8
   162bc:	andeq	lr, r2, r8, asr r4
   162c0:	andeq	r0, r0, r7, lsl #8
   162c4:	andeq	r0, r0, r9, lsl #8
   162c8:	push	{r4, r5, r6, r7, r8, lr}
   162cc:	mov	r5, r0
   162d0:	mov	r0, r1
   162d4:	mov	r1, r2
   162d8:	mov	r2, r3
   162dc:	bl	112e4 <open64@plt>
   162e0:	mov	r4, r0
   162e4:	cmp	r5, r0
   162e8:	movne	r3, #0
   162ec:	moveq	r3, #1
   162f0:	orrs	r3, r3, r0, lsr #31
   162f4:	beq	16300 <__assert_fail@plt+0x4e24>
   162f8:	mov	r0, r4
   162fc:	pop	{r4, r5, r6, r7, r8, pc}
   16300:	mov	r1, r5
   16304:	bl	1123c <dup2@plt>
   16308:	mov	r6, r0
   1630c:	bl	113a4 <__errno_location@plt>
   16310:	mov	r5, r0
   16314:	ldr	r7, [r0]
   16318:	mov	r0, r4
   1631c:	bl	114b8 <close@plt>
   16320:	str	r7, [r5]
   16324:	mov	r4, r6
   16328:	b	162f8 <__assert_fail@plt+0x4e1c>
   1632c:	push	{r4, lr}
   16330:	sub	sp, sp, #8
   16334:	subs	r4, r0, #0
   16338:	beq	1634c <__assert_fail@plt+0x4e70>
   1633c:	mov	r0, r4
   16340:	bl	1132c <__freading@plt>
   16344:	cmp	r0, #0
   16348:	bne	1635c <__assert_fail@plt+0x4e80>
   1634c:	mov	r0, r4
   16350:	bl	111a0 <fflush@plt>
   16354:	add	sp, sp, #8
   16358:	pop	{r4, pc}
   1635c:	ldr	r3, [r4]
   16360:	tst	r3, #256	; 0x100
   16364:	bne	16374 <__assert_fail@plt+0x4e98>
   16368:	mov	r0, r4
   1636c:	bl	111a0 <fflush@plt>
   16370:	b	16354 <__assert_fail@plt+0x4e78>
   16374:	mov	r3, #1
   16378:	str	r3, [sp]
   1637c:	mov	r2, #0
   16380:	mov	r3, #0
   16384:	mov	r0, r4
   16388:	bl	16390 <__assert_fail@plt+0x4eb4>
   1638c:	b	16368 <__assert_fail@plt+0x4e8c>
   16390:	push	{r4, r5, r6, r7, lr}
   16394:	sub	sp, sp, #12
   16398:	mov	r4, r0
   1639c:	mov	r6, r2
   163a0:	mov	r7, r3
   163a4:	ldr	r5, [sp, #32]
   163a8:	ldr	r2, [r0, #8]
   163ac:	ldr	r3, [r0, #4]
   163b0:	cmp	r2, r3
   163b4:	beq	163d4 <__assert_fail@plt+0x4ef8>
   163b8:	str	r5, [sp]
   163bc:	mov	r2, r6
   163c0:	mov	r3, r7
   163c4:	mov	r0, r4
   163c8:	bl	1141c <fseeko64@plt>
   163cc:	add	sp, sp, #12
   163d0:	pop	{r4, r5, r6, r7, pc}
   163d4:	ldr	r2, [r0, #20]
   163d8:	ldr	r3, [r0, #16]
   163dc:	cmp	r2, r3
   163e0:	bne	163b8 <__assert_fail@plt+0x4edc>
   163e4:	ldr	r3, [r0, #36]	; 0x24
   163e8:	cmp	r3, #0
   163ec:	bne	163b8 <__assert_fail@plt+0x4edc>
   163f0:	bl	113f8 <fileno@plt>
   163f4:	str	r5, [sp]
   163f8:	mov	r2, r6
   163fc:	mov	r3, r7
   16400:	bl	112a8 <lseek64@plt>
   16404:	mvn	r2, #0
   16408:	mvn	r3, #0
   1640c:	cmp	r1, r3
   16410:	cmpeq	r0, r2
   16414:	beq	16430 <__assert_fail@plt+0x4f54>
   16418:	ldr	r3, [r4]
   1641c:	bic	r3, r3, #16
   16420:	str	r3, [r4]
   16424:	strd	r0, [r4, #80]	; 0x50
   16428:	mov	r0, #0
   1642c:	b	163cc <__assert_fail@plt+0x4ef0>
   16430:	mvn	r0, #0
   16434:	b	163cc <__assert_fail@plt+0x4ef0>
   16438:	push	{r4, r5, lr}
   1643c:	sub	sp, sp, #12
   16440:	mov	r1, sp
   16444:	mov	r0, #1
   16448:	bl	111d0 <clock_gettime@plt>
   1644c:	cmp	r0, #0
   16450:	bne	1647c <__assert_fail@plt+0x4fa0>
   16454:	ldr	r0, [sp]
   16458:	asr	r5, r0, #31
   1645c:	ldr	r3, [pc, #68]	; 164a8 <__assert_fail@plt+0x4fcc>
   16460:	umull	r0, r1, r0, r3
   16464:	mla	r1, r3, r5, r1
   16468:	ldr	r3, [sp, #4]
   1646c:	adds	r0, r0, r3
   16470:	adc	r1, r1, r3, asr #31
   16474:	add	sp, sp, #12
   16478:	pop	{r4, r5, pc}
   1647c:	mov	r0, sp
   16480:	bl	164ac <__assert_fail@plt+0x4fd0>
   16484:	ldr	r0, [sp]
   16488:	asr	r5, r0, #31
   1648c:	ldr	r3, [pc, #20]	; 164a8 <__assert_fail@plt+0x4fcc>
   16490:	umull	r0, r1, r0, r3
   16494:	mla	r1, r3, r5, r1
   16498:	ldr	r3, [sp, #4]
   1649c:	adds	r0, r0, r3
   164a0:	adc	r1, r1, r3, asr #31
   164a4:	b	16474 <__assert_fail@plt+0x4f98>
   164a8:	blcc	fe6c8cb0 <opterr@@GLIBC_2.4+0xfe69aad0>
   164ac:	push	{r4, lr}
   164b0:	mov	r1, r0
   164b4:	mov	r0, #0
   164b8:	bl	111d0 <clock_gettime@plt>
   164bc:	pop	{r4, pc}
   164c0:	push	{r4, r5, lr}
   164c4:	sub	sp, sp, #12
   164c8:	mov	r4, r0
   164cc:	mov	r0, sp
   164d0:	bl	164ac <__assert_fail@plt+0x4fd0>
   164d4:	ldm	sp, {r0, r1}
   164d8:	stm	r4, {r0, r1}
   164dc:	mov	r0, r4
   164e0:	add	sp, sp, #12
   164e4:	pop	{r4, r5, pc}
   164e8:	push	{r4, r6, r7, lr}
   164ec:	vpush	{d8}
   164f0:	vmov.f64	d8, d0
   164f4:	cmp	r0, #1
   164f8:	beq	16560 <__assert_fail@plt+0x5084>
   164fc:	mov	r4, r0
   16500:	vldr	d7, [pc, #104]	; 16570 <__assert_fail@plt+0x5094>
   16504:	vcmpe.f64	d0, d7
   16508:	vmrs	APSR_nzcv, fpscr
   1650c:	bpl	16560 <__assert_fail@plt+0x5084>
   16510:	vmov	r0, r1, d0
   16514:	bl	1af78 <__assert_fail@plt+0x9a9c>
   16518:	mov	r6, r0
   1651c:	mov	r7, r1
   16520:	cmp	r4, #0
   16524:	movne	r0, #0
   16528:	bne	16548 <__assert_fail@plt+0x506c>
   1652c:	mov	r0, r6
   16530:	bl	1ade0 <__assert_fail@plt+0x9904>
   16534:	vmov	d7, r0, r1
   16538:	vcmp.f64	d7, d8
   1653c:	vmrs	APSR_nzcv, fpscr
   16540:	movne	r0, #1
   16544:	moveq	r0, #0
   16548:	adds	r2, r6, r0
   1654c:	adc	r3, r7, r0, asr #31
   16550:	mov	r0, r2
   16554:	mov	r1, r3
   16558:	bl	1ade0 <__assert_fail@plt+0x9904>
   1655c:	vmov	d8, r0, r1
   16560:	vmov.f64	d0, d8
   16564:	vpop	{d8}
   16568:	pop	{r4, r6, r7, pc}
   1656c:	nop			; (mov r0, r0)
   16570:	andeq	r0, r0, r0
   16574:	mvnsmi	r0, #0
   16578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1657c:	vpush	{d8-d9}
   16580:	sub	sp, sp, #124	; 0x7c
   16584:	strd	r0, [sp, #32]
   16588:	mov	r7, r2
   1658c:	str	r2, [sp, #24]
   16590:	mov	r8, r3
   16594:	and	r3, r3, #3
   16598:	str	r3, [sp, #28]
   1659c:	and	r3, r8, #32
   165a0:	str	r3, [sp, #40]	; 0x28
   165a4:	cmp	r3, #0
   165a8:	movne	r3, #1024	; 0x400
   165ac:	moveq	r3, #1000	; 0x3e8
   165b0:	str	r3, [sp, #44]	; 0x2c
   165b4:	bl	11470 <localeconv@plt>
   165b8:	mov	r5, r0
   165bc:	ldr	r6, [r0]
   165c0:	mov	r0, r6
   165c4:	bl	11380 <strlen@plt>
   165c8:	mov	r4, r0
   165cc:	sub	r3, r0, #1
   165d0:	ldr	r2, [pc, #1112]	; 16a30 <__assert_fail@plt+0x5554>
   165d4:	cmp	r3, #15
   165d8:	movhi	r6, r2
   165dc:	str	r6, [sp, #64]	; 0x40
   165e0:	cmp	r3, #15
   165e4:	movhi	r4, #1
   165e8:	ldr	r9, [r5, #8]
   165ec:	ldr	r5, [r5, #4]
   165f0:	mov	r0, r5
   165f4:	bl	11380 <strlen@plt>
   165f8:	ldr	r3, [pc, #1076]	; 16a34 <__assert_fail@plt+0x5558>
   165fc:	cmp	r0, #16
   16600:	movhi	r5, r3
   16604:	str	r5, [sp, #12]
   16608:	add	sl, r7, #644	; 0x284
   1660c:	add	sl, sl, #3
   16610:	ldrd	r2, [sp, #184]	; 0xb8
   16614:	ldrd	r6, [sp, #176]	; 0xb0
   16618:	cmp	r3, r7
   1661c:	cmpeq	r2, r6
   16620:	bhi	167a4 <__assert_fail@plt+0x52c8>
   16624:	mov	r0, r6
   16628:	mov	r1, r7
   1662c:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16630:	orrs	r3, r2, r3
   16634:	bne	1667c <__assert_fail@plt+0x51a0>
   16638:	ldrd	r2, [sp, #184]	; 0xb8
   1663c:	ldrd	r0, [sp, #176]	; 0xb0
   16640:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16644:	mov	r2, r0
   16648:	mov	r3, r1
   1664c:	ldrd	r6, [sp, #32]
   16650:	mul	r0, r2, r7
   16654:	mla	ip, r6, r3, r0
   16658:	umull	r0, r1, r2, r6
   1665c:	strd	r0, [sp, #16]
   16660:	add	r1, ip, r1
   16664:	str	r1, [sp, #20]
   16668:	ldrd	r0, [sp, #16]
   1666c:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16670:	cmp	r7, r1
   16674:	cmpeq	r6, r0
   16678:	beq	1691c <__assert_fail@plt+0x5440>
   1667c:	ldrd	r0, [sp, #176]	; 0xb0
   16680:	bl	1ade0 <__assert_fail@plt+0x9904>
   16684:	vmov	d9, r0, r1
   16688:	ldrd	r0, [sp, #184]	; 0xb8
   1668c:	bl	1ade0 <__assert_fail@plt+0x9904>
   16690:	vmov	d7, r0, r1
   16694:	vdiv.f64	d8, d9, d7
   16698:	ldrd	r0, [sp, #32]
   1669c:	bl	1ade0 <__assert_fail@plt+0x9904>
   166a0:	vmov	d7, r0, r1
   166a4:	vmul.f64	d0, d8, d7
   166a8:	tst	r8, #16
   166ac:	beq	16874 <__assert_fail@plt+0x5398>
   166b0:	vldr	d7, [pc, #872]	; 16a20 <__assert_fail@plt+0x5544>
   166b4:	mov	r7, #0
   166b8:	vldr	s13, [sp, #44]	; 0x2c
   166bc:	vcvt.f64.u32	d6, s13
   166c0:	vmul.f64	d7, d7, d6
   166c4:	add	r7, r7, #1
   166c8:	vmul.f64	d5, d6, d7
   166cc:	vcmpe.f64	d0, d5
   166d0:	vmrs	APSR_nzcv, fpscr
   166d4:	movge	r3, #1
   166d8:	movlt	r3, #0
   166dc:	cmp	r7, #7
   166e0:	movgt	r3, #0
   166e4:	andle	r3, r3, #1
   166e8:	cmp	r3, #0
   166ec:	bne	166c0 <__assert_fail@plt+0x51e4>
   166f0:	vdiv.f64	d8, d0, d7
   166f4:	vmov.f64	d0, d8
   166f8:	ldr	r0, [sp, #28]
   166fc:	bl	164e8 <__assert_fail@plt+0x500c>
   16700:	vstr	d0, [sp]
   16704:	ldr	r3, [pc, #812]	; 16a38 <__assert_fail@plt+0x555c>
   16708:	mvn	r2, #0
   1670c:	mov	r1, #1
   16710:	ldr	r6, [sp, #24]
   16714:	mov	r0, r6
   16718:	bl	113b0 <__sprintf_chk@plt>
   1671c:	mov	r0, r6
   16720:	bl	11380 <strlen@plt>
   16724:	mov	r5, r0
   16728:	add	r4, r4, #1
   1672c:	ldr	r3, [sp, #40]	; 0x28
   16730:	cmp	r3, #0
   16734:	movne	r3, #1
   16738:	moveq	r3, #2
   1673c:	add	r3, r3, r4
   16740:	cmp	r0, r3
   16744:	bhi	16760 <__assert_fail@plt+0x5284>
   16748:	tst	r8, #8
   1674c:	beq	168ac <__assert_fail@plt+0x53d0>
   16750:	add	r3, r6, r0
   16754:	ldrb	r3, [r3, #-1]
   16758:	cmp	r3, #48	; 0x30
   1675c:	bne	168ac <__assert_fail@plt+0x53d0>
   16760:	vldr	d9, [pc, #704]	; 16a28 <__assert_fail@plt+0x554c>
   16764:	vmul.f64	d0, d8, d9
   16768:	ldr	r0, [sp, #28]
   1676c:	bl	164e8 <__assert_fail@plt+0x500c>
   16770:	vdiv.f64	d0, d0, d9
   16774:	vstr	d0, [sp]
   16778:	ldr	r3, [pc, #700]	; 16a3c <__assert_fail@plt+0x5560>
   1677c:	mvn	r2, #0
   16780:	mov	r1, #1
   16784:	ldr	r4, [sp, #24]
   16788:	mov	r0, r4
   1678c:	bl	113b0 <__sprintf_chk@plt>
   16790:	mov	r0, r4
   16794:	bl	11380 <strlen@plt>
   16798:	mov	r5, r0
   1679c:	mov	r4, #0
   167a0:	b	168ac <__assert_fail@plt+0x53d0>
   167a4:	ldrd	r2, [sp, #176]	; 0xb0
   167a8:	orrs	r3, r2, r3
   167ac:	beq	1667c <__assert_fail@plt+0x51a0>
   167b0:	ldrd	r2, [sp, #176]	; 0xb0
   167b4:	ldrd	r0, [sp, #184]	; 0xb8
   167b8:	bl	1af28 <__assert_fail@plt+0x9a4c>
   167bc:	orrs	r3, r2, r3
   167c0:	bne	1667c <__assert_fail@plt+0x51a0>
   167c4:	ldrd	r2, [sp, #176]	; 0xb0
   167c8:	ldrd	r0, [sp, #184]	; 0xb8
   167cc:	bl	1af28 <__assert_fail@plt+0x9a4c>
   167d0:	strd	r0, [sp, #48]	; 0x30
   167d4:	mov	r2, r0
   167d8:	mov	r3, r1
   167dc:	ldrd	r0, [sp, #32]
   167e0:	bl	1af28 <__assert_fail@plt+0x9a4c>
   167e4:	mov	r1, #10
   167e8:	umull	r6, r7, r2, r1
   167ec:	mla	r7, r1, r3, r7
   167f0:	ldrd	r2, [sp, #48]	; 0x30
   167f4:	mov	r0, r6
   167f8:	mov	r1, r7
   167fc:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16800:	lsls	r0, r2, #1
   16804:	adc	r1, r3, r3
   16808:	strd	r0, [sp, #56]	; 0x38
   1680c:	ldrd	r2, [sp, #48]	; 0x30
   16810:	ldrd	r0, [sp, #32]
   16814:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16818:	strd	r0, [sp, #16]
   1681c:	ldrd	r2, [sp, #48]	; 0x30
   16820:	mov	r0, r6
   16824:	mov	r1, r7
   16828:	bl	1af28 <__assert_fail@plt+0x9a4c>
   1682c:	mov	r6, r0
   16830:	ldrd	r2, [sp, #48]	; 0x30
   16834:	ldrd	r0, [sp, #56]	; 0x38
   16838:	cmp	r3, r1
   1683c:	cmpeq	r2, r0
   16840:	bls	16858 <__assert_fail@plt+0x537c>
   16844:	mov	r3, r0
   16848:	orrs	r3, r3, r1
   1684c:	movne	fp, #1
   16850:	moveq	fp, #0
   16854:	b	16924 <__assert_fail@plt+0x5448>
   16858:	ldrd	r2, [sp, #48]	; 0x30
   1685c:	ldrd	r0, [sp, #56]	; 0x38
   16860:	cmp	r3, r1
   16864:	cmpeq	r2, r0
   16868:	movcc	fp, #3
   1686c:	movcs	fp, #2
   16870:	b	16924 <__assert_fail@plt+0x5448>
   16874:	ldr	r0, [sp, #28]
   16878:	bl	164e8 <__assert_fail@plt+0x500c>
   1687c:	vstr	d0, [sp]
   16880:	ldr	r3, [pc, #436]	; 16a3c <__assert_fail@plt+0x5560>
   16884:	mvn	r2, #0
   16888:	mov	r1, #1
   1688c:	ldr	r4, [sp, #24]
   16890:	mov	r0, r4
   16894:	bl	113b0 <__sprintf_chk@plt>
   16898:	mov	r0, r4
   1689c:	bl	11380 <strlen@plt>
   168a0:	mov	r5, r0
   168a4:	mov	r4, #0
   168a8:	mvn	r7, #0
   168ac:	sub	r6, sl, r5
   168b0:	mov	r2, r5
   168b4:	ldr	r1, [sp, #24]
   168b8:	mov	r0, r6
   168bc:	bl	111b8 <memmove@plt>
   168c0:	sub	r5, r5, r4
   168c4:	add	r5, r6, r5
   168c8:	tst	r8, #4
   168cc:	bne	16ca4 <__assert_fail@plt+0x57c8>
   168d0:	tst	r8, #128	; 0x80
   168d4:	beq	16dd0 <__assert_fail@plt+0x58f4>
   168d8:	cmp	r7, #0
   168dc:	blt	16d34 <__assert_fail@plt+0x5858>
   168e0:	and	r3, r8, #256	; 0x100
   168e4:	orrs	r2, r7, r3
   168e8:	beq	16904 <__assert_fail@plt+0x5428>
   168ec:	tst	r8, #64	; 0x40
   168f0:	beq	16904 <__assert_fail@plt+0x5428>
   168f4:	ldr	r1, [sp, #24]
   168f8:	add	sl, r1, #648	; 0x288
   168fc:	mov	r2, #32
   16900:	strb	r2, [r1, #647]	; 0x287
   16904:	cmp	r7, #0
   16908:	bne	16d88 <__assert_fail@plt+0x58ac>
   1690c:	cmp	r3, #0
   16910:	beq	16dd0 <__assert_fail@plt+0x58f4>
   16914:	mov	r2, sl
   16918:	b	16dc4 <__assert_fail@plt+0x58e8>
   1691c:	mov	fp, #0
   16920:	mov	r6, fp
   16924:	ands	r3, r8, #16
   16928:	str	r3, [sp, #48]	; 0x30
   1692c:	streq	sl, [sp, #32]
   16930:	mvneq	r7, #0
   16934:	beq	16ae8 <__assert_fail@plt+0x560c>
   16938:	ldr	ip, [sp, #44]	; 0x2c
   1693c:	mov	r3, #0
   16940:	ldrd	r0, [sp, #16]
   16944:	cmp	r1, r3
   16948:	cmpeq	r0, ip
   1694c:	strcc	sl, [sp, #32]
   16950:	movcc	r7, #0
   16954:	bcc	16ae8 <__assert_fail@plt+0x560c>
   16958:	mov	r7, #0
   1695c:	str	sl, [sp, #32]
   16960:	mov	sl, ip
   16964:	str	r9, [sp, #56]	; 0x38
   16968:	str	r8, [sp, #68]	; 0x44
   1696c:	mov	r8, ip
   16970:	mov	r9, r3
   16974:	b	169b4 <__assert_fail@plt+0x54d8>
   16978:	add	fp, fp, r5
   1697c:	cmp	sl, fp
   16980:	movcc	fp, #3
   16984:	movcs	fp, #2
   16988:	add	r7, r7, #1
   1698c:	ldrd	r2, [sp, #16]
   16990:	cmp	r9, r3
   16994:	cmpeq	r8, r2
   16998:	movls	r3, #1
   1699c:	movhi	r3, #0
   169a0:	cmp	r7, #7
   169a4:	movgt	r3, #0
   169a8:	andle	r3, r3, #1
   169ac:	cmp	r3, #0
   169b0:	beq	16a44 <__assert_fail@plt+0x5568>
   169b4:	mov	r2, r8
   169b8:	mov	r3, r9
   169bc:	ldrd	r0, [sp, #16]
   169c0:	bl	1af28 <__assert_fail@plt+0x9a4c>
   169c4:	add	r2, r2, r2, lsl #2
   169c8:	add	r6, r6, r2, lsl #1
   169cc:	mov	r1, sl
   169d0:	mov	r0, r6
   169d4:	bl	1a83c <__assert_fail@plt+0x9360>
   169d8:	asr	r5, fp, #1
   169dc:	add	r5, r5, r1, lsl #1
   169e0:	mov	r2, r8
   169e4:	mov	r3, r9
   169e8:	ldrd	r0, [sp, #16]
   169ec:	bl	1af28 <__assert_fail@plt+0x9a4c>
   169f0:	strd	r0, [sp, #16]
   169f4:	mov	r1, sl
   169f8:	mov	r0, r6
   169fc:	bl	1a650 <__assert_fail@plt+0x9174>
   16a00:	mov	r6, r0
   16a04:	cmp	sl, r5
   16a08:	bls	16978 <__assert_fail@plt+0x549c>
   16a0c:	cmn	fp, r5
   16a10:	movne	fp, #1
   16a14:	moveq	fp, #0
   16a18:	b	16988 <__assert_fail@plt+0x54ac>
   16a1c:	nop			; (mov r0, r0)
   16a20:	andeq	r0, r0, r0
   16a24:	svccc	0x00f00000	; IMB
   16a28:	andeq	r0, r0, r0
   16a2c:	eormi	r0, r4, r0
   16a30:	andeq	ip, r1, r0, lsl #25
   16a34:			; <UNDEFINED> instruction: 0x0001c2bc
   16a38:	andeq	ip, r1, ip, lsl #25
   16a3c:	andeq	ip, r1, r4, lsl #25
   16a40:	andeq	ip, r1, r0, ror #24
   16a44:	ldr	sl, [sp, #32]
   16a48:	ldr	r9, [sp, #56]	; 0x38
   16a4c:	ldr	r8, [sp, #68]	; 0x44
   16a50:	ldrd	r2, [sp, #16]
   16a54:	cmp	r3, #0
   16a58:	cmpeq	r2, #9
   16a5c:	strhi	sl, [sp, #32]
   16a60:	bhi	16ae8 <__assert_fail@plt+0x560c>
   16a64:	ldr	r3, [sp, #28]
   16a68:	cmp	r3, #1
   16a6c:	beq	16b90 <__assert_fail@plt+0x56b4>
   16a70:	ldr	r3, [sp, #28]
   16a74:	clz	r3, r3
   16a78:	lsr	r3, r3, #5
   16a7c:	cmp	fp, #0
   16a80:	moveq	r3, #0
   16a84:	cmp	r3, #0
   16a88:	beq	16a9c <__assert_fail@plt+0x55c0>
   16a8c:	add	r6, r6, #1
   16a90:	cmp	r6, #10
   16a94:	movne	fp, #0
   16a98:	beq	16ba8 <__assert_fail@plt+0x56cc>
   16a9c:	cmp	r6, #0
   16aa0:	bne	16ab4 <__assert_fail@plt+0x55d8>
   16aa4:	ands	r6, r8, #8
   16aa8:	strne	sl, [sp, #32]
   16aac:	movne	r6, #0
   16ab0:	bne	16ae8 <__assert_fail@plt+0x560c>
   16ab4:	ldr	r3, [sp, #24]
   16ab8:	add	r5, r3, #644	; 0x284
   16abc:	add	r5, r5, #2
   16ac0:	add	r6, r6, #48	; 0x30
   16ac4:	strb	r6, [r3, #646]	; 0x286
   16ac8:	sub	r3, r5, r4
   16acc:	str	r3, [sp, #32]
   16ad0:	mov	r2, r4
   16ad4:	ldr	r1, [sp, #64]	; 0x40
   16ad8:	mov	r0, r3
   16adc:	bl	111e8 <memcpy@plt>
   16ae0:	mov	r6, #0
   16ae4:	mov	fp, r6
   16ae8:	ldr	r3, [sp, #28]
   16aec:	cmp	r3, #1
   16af0:	beq	16bd8 <__assert_fail@plt+0x56fc>
   16af4:	ldr	r3, [sp, #28]
   16af8:	cmp	r3, #0
   16afc:	movne	fp, #0
   16b00:	bne	16b14 <__assert_fail@plt+0x5638>
   16b04:	add	fp, r6, fp
   16b08:	cmp	fp, #0
   16b0c:	movle	fp, #0
   16b10:	movgt	fp, #1
   16b14:	cmp	fp, #0
   16b18:	beq	16c34 <__assert_fail@plt+0x5758>
   16b1c:	ldrd	r2, [sp, #16]
   16b20:	adds	r2, r2, #1
   16b24:	adc	r3, r3, #0
   16b28:	mov	r0, r2
   16b2c:	mov	r1, r3
   16b30:	strd	r0, [sp, #16]
   16b34:	ldr	r3, [sp, #48]	; 0x30
   16b38:	cmp	r3, #0
   16b3c:	beq	16c34 <__assert_fail@plt+0x5758>
   16b40:	ldr	r2, [sp, #44]	; 0x2c
   16b44:	mov	r3, #0
   16b48:	cmp	r3, r1
   16b4c:	cmpeq	r2, r0
   16b50:	moveq	r3, #1
   16b54:	movne	r3, #0
   16b58:	cmp	r7, #7
   16b5c:	movgt	r3, #0
   16b60:	andle	r3, r3, #1
   16b64:	cmp	r3, #0
   16b68:	beq	16c34 <__assert_fail@plt+0x5758>
   16b6c:	add	r7, r7, #1
   16b70:	tst	r8, #8
   16b74:	beq	16c08 <__assert_fail@plt+0x572c>
   16b78:	ldr	r2, [sp, #32]
   16b7c:	sub	r6, r2, #1
   16b80:	mov	r3, #49	; 0x31
   16b84:	strb	r3, [r2, #-1]
   16b88:	mov	r5, r2
   16b8c:	b	168c8 <__assert_fail@plt+0x53ec>
   16b90:	and	r3, r6, #1
   16b94:	add	r3, r3, fp
   16b98:	cmp	r3, #2
   16b9c:	movle	r3, #0
   16ba0:	movgt	r3, #1
   16ba4:	b	16a84 <__assert_fail@plt+0x55a8>
   16ba8:	ldrd	r2, [sp, #16]
   16bac:	adds	r2, r2, #1
   16bb0:	adc	r3, r3, #0
   16bb4:	strd	r2, [sp, #16]
   16bb8:	cmp	r3, #0
   16bbc:	cmpeq	r2, #9
   16bc0:	strhi	sl, [sp, #32]
   16bc4:	movhi	fp, #0
   16bc8:	movhi	r6, fp
   16bcc:	bhi	16ae8 <__assert_fail@plt+0x560c>
   16bd0:	mov	fp, #0
   16bd4:	b	16aa4 <__assert_fail@plt+0x55c8>
   16bd8:	ldrd	r2, [sp, #16]
   16bdc:	and	r2, r2, #1
   16be0:	mov	r3, #0
   16be4:	adds	r2, r2, fp
   16be8:	adc	r3, r3, fp, asr #31
   16bec:	orr	r2, r2, r3
   16bf0:	cmp	r2, #0
   16bf4:	addne	r6, r6, #1
   16bf8:	cmp	r6, #5
   16bfc:	movle	fp, #0
   16c00:	movgt	fp, #1
   16c04:	b	16b14 <__assert_fail@plt+0x5638>
   16c08:	mov	r3, #48	; 0x30
   16c0c:	ldr	r2, [sp, #32]
   16c10:	strb	r3, [r2, #-1]
   16c14:	mvn	r3, r4
   16c18:	add	r3, r2, r3
   16c1c:	str	r3, [sp, #32]
   16c20:	mov	r2, r4
   16c24:	ldr	r1, [sp, #64]	; 0x40
   16c28:	mov	r0, r3
   16c2c:	bl	111e8 <memcpy@plt>
   16c30:	b	16b78 <__assert_fail@plt+0x569c>
   16c34:	ldr	r6, [sp, #32]
   16c38:	mov	r4, #10
   16c3c:	mov	r5, #0
   16c40:	mov	fp, r6
   16c44:	str	r8, [sp, #28]
   16c48:	mov	r8, r7
   16c4c:	ldrd	r6, [sp, #16]
   16c50:	mov	r2, r4
   16c54:	mov	r3, r5
   16c58:	mov	r0, r6
   16c5c:	mov	r1, r7
   16c60:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16c64:	add	r2, r2, #48	; 0x30
   16c68:	strb	r2, [fp, #-1]!
   16c6c:	mov	r2, r4
   16c70:	mov	r3, r5
   16c74:	mov	r0, r6
   16c78:	mov	r1, r7
   16c7c:	bl	1af28 <__assert_fail@plt+0x9a4c>
   16c80:	mov	r6, r0
   16c84:	mov	r7, r1
   16c88:	orrs	r3, r6, r7
   16c8c:	bne	16c50 <__assert_fail@plt+0x5774>
   16c90:	mov	r7, r8
   16c94:	mov	r6, fp
   16c98:	ldr	r8, [sp, #28]
   16c9c:	ldr	r5, [sp, #32]
   16ca0:	b	168c8 <__assert_fail@plt+0x53ec>
   16ca4:	sub	r4, r5, r6
   16ca8:	ldr	r0, [sp, #12]
   16cac:	bl	11380 <strlen@plt>
   16cb0:	mov	fp, r0
   16cb4:	mov	r3, #41	; 0x29
   16cb8:	mov	r2, r4
   16cbc:	mov	r1, r6
   16cc0:	add	r0, sp, #76	; 0x4c
   16cc4:	bl	11290 <__memcpy_chk@plt>
   16cc8:	mov	r6, r5
   16ccc:	mvn	r5, #0
   16cd0:	b	16d14 <__assert_fail@plt+0x5838>
   16cd4:	cmp	r5, r4
   16cd8:	movcs	r5, r4
   16cdc:	sub	r6, r6, r5
   16ce0:	sub	r4, r4, r5
   16ce4:	mov	r2, r5
   16ce8:	add	r3, sp, #76	; 0x4c
   16cec:	add	r1, r3, r4
   16cf0:	mov	r0, r6
   16cf4:	bl	111e8 <memcpy@plt>
   16cf8:	cmp	r4, #0
   16cfc:	beq	168d0 <__assert_fail@plt+0x53f4>
   16d00:	sub	r6, r6, fp
   16d04:	mov	r2, fp
   16d08:	ldr	r1, [sp, #12]
   16d0c:	mov	r0, r6
   16d10:	bl	111e8 <memcpy@plt>
   16d14:	ldrb	r3, [r9]
   16d18:	cmp	r3, #0
   16d1c:	beq	16cd4 <__assert_fail@plt+0x57f8>
   16d20:	cmp	r3, #255	; 0xff
   16d24:	movne	r5, r3
   16d28:	moveq	r5, r4
   16d2c:	add	r9, r9, #1
   16d30:	b	16cd4 <__assert_fail@plt+0x57f8>
   16d34:	ldrd	r2, [sp, #184]	; 0xb8
   16d38:	cmp	r3, #0
   16d3c:	cmpeq	r2, #1
   16d40:	bls	16df0 <__assert_fail@plt+0x5914>
   16d44:	mov	r7, #1
   16d48:	mov	r2, #1
   16d4c:	mov	r3, #0
   16d50:	ldr	r1, [sp, #44]	; 0x2c
   16d54:	ldrd	r4, [sp, #184]	; 0xb8
   16d58:	mul	r0, r1, r3
   16d5c:	umull	r2, r3, r2, r1
   16d60:	add	r3, r0, r3
   16d64:	cmp	r5, r3
   16d68:	cmpeq	r4, r2
   16d6c:	bls	168e0 <__assert_fail@plt+0x5404>
   16d70:	add	r7, r7, #1
   16d74:	cmp	r7, #8
   16d78:	bne	16d58 <__assert_fail@plt+0x587c>
   16d7c:	and	r3, r8, #256	; 0x100
   16d80:	tst	r8, #64	; 0x40
   16d84:	bne	168f4 <__assert_fail@plt+0x5418>
   16d88:	add	r2, sl, #1
   16d8c:	ldr	r1, [sp, #40]	; 0x28
   16d90:	cmp	r1, #0
   16d94:	cmpeq	r7, #1
   16d98:	ldrne	r1, [pc, #-864]	; 16a40 <__assert_fail@plt+0x5564>
   16d9c:	ldrbne	r1, [r1, r7]
   16da0:	moveq	r1, #107	; 0x6b
   16da4:	strb	r1, [sl]
   16da8:	cmp	r3, #0
   16dac:	beq	16de8 <__assert_fail@plt+0x590c>
   16db0:	ldr	r3, [sp, #40]	; 0x28
   16db4:	cmp	r3, #0
   16db8:	addne	r2, sl, #2
   16dbc:	movne	r3, #105	; 0x69
   16dc0:	strbne	r3, [sl, #1]
   16dc4:	add	sl, r2, #1
   16dc8:	mov	r3, #66	; 0x42
   16dcc:	strb	r3, [r2]
   16dd0:	mov	r3, #0
   16dd4:	strb	r3, [sl]
   16dd8:	mov	r0, r6
   16ddc:	add	sp, sp, #124	; 0x7c
   16de0:	vpop	{d8-d9}
   16de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16de8:	mov	sl, r2
   16dec:	b	16dd0 <__assert_fail@plt+0x58f4>
   16df0:	ands	r3, r8, #256	; 0x100
   16df4:	movne	r7, #0
   16df8:	bne	168ec <__assert_fail@plt+0x5410>
   16dfc:	b	1690c <__assert_fail@plt+0x5430>
   16e00:	push	{r4, r5, r6, r7, lr}
   16e04:	sub	sp, sp, #20
   16e08:	mov	r7, r1
   16e0c:	mov	r6, r2
   16e10:	subs	r4, r0, #0
   16e14:	beq	16e84 <__assert_fail@plt+0x59a8>
   16e18:	ldrb	r3, [r4]
   16e1c:	cmp	r3, #39	; 0x27
   16e20:	addeq	r4, r4, #1
   16e24:	moveq	r5, #4
   16e28:	movne	r5, #0
   16e2c:	ldr	r1, [pc, #332]	; 16f80 <__assert_fail@plt+0x5aa4>
   16e30:	mov	r3, #4
   16e34:	add	r2, r1, #12
   16e38:	add	r1, r1, #20
   16e3c:	mov	r0, r4
   16e40:	bl	1a098 <__assert_fail@plt+0x8bbc>
   16e44:	cmp	r0, #0
   16e48:	blt	16ec8 <__assert_fail@plt+0x59ec>
   16e4c:	ldr	r3, [pc, #300]	; 16f80 <__assert_fail@plt+0x5aa4>
   16e50:	add	r0, r3, r0, lsl #2
   16e54:	ldr	r3, [r0, #12]
   16e58:	orr	r5, r5, r3
   16e5c:	mov	r2, #1
   16e60:	mov	r3, #0
   16e64:	strd	r2, [r6]
   16e68:	str	r5, [r7]
   16e6c:	mov	r0, #0
   16e70:	ldrd	r2, [r6]
   16e74:	orrs	r3, r2, r3
   16e78:	beq	16f5c <__assert_fail@plt+0x5a80>
   16e7c:	add	sp, sp, #20
   16e80:	pop	{r4, r5, r6, r7, pc}
   16e84:	ldr	r0, [pc, #248]	; 16f84 <__assert_fail@plt+0x5aa8>
   16e88:	bl	112f0 <getenv@plt>
   16e8c:	subs	r4, r0, #0
   16e90:	bne	16e18 <__assert_fail@plt+0x593c>
   16e94:	ldr	r0, [pc, #236]	; 16f88 <__assert_fail@plt+0x5aac>
   16e98:	bl	112f0 <getenv@plt>
   16e9c:	subs	r4, r0, #0
   16ea0:	bne	16e18 <__assert_fail@plt+0x593c>
   16ea4:	ldr	r0, [pc, #224]	; 16f8c <__assert_fail@plt+0x5ab0>
   16ea8:	bl	112f0 <getenv@plt>
   16eac:	cmp	r0, #0
   16eb0:	moveq	r2, #1024	; 0x400
   16eb4:	movne	r2, #512	; 0x200
   16eb8:	mov	r3, #0
   16ebc:	strd	r2, [r6]
   16ec0:	mov	r5, #0
   16ec4:	b	16e68 <__assert_fail@plt+0x598c>
   16ec8:	ldr	r3, [pc, #192]	; 16f90 <__assert_fail@plt+0x5ab4>
   16ecc:	str	r3, [sp]
   16ed0:	mov	r3, r6
   16ed4:	mov	r2, #0
   16ed8:	add	r1, sp, #12
   16edc:	mov	r0, r4
   16ee0:	bl	199a8 <__assert_fail@plt+0x84cc>
   16ee4:	cmp	r0, #0
   16ee8:	movne	r3, #0
   16eec:	strne	r3, [r7]
   16ef0:	bne	16e70 <__assert_fail@plt+0x5994>
   16ef4:	ldrb	r3, [r4]
   16ef8:	sub	r3, r3, #48	; 0x30
   16efc:	uxtb	r3, r3
   16f00:	cmp	r3, #9
   16f04:	bls	16e68 <__assert_fail@plt+0x598c>
   16f08:	ldr	r2, [sp, #12]
   16f0c:	cmp	r4, r2
   16f10:	beq	16f30 <__assert_fail@plt+0x5a54>
   16f14:	ldrb	r3, [r4, #1]!
   16f18:	sub	r3, r3, #48	; 0x30
   16f1c:	uxtb	r3, r3
   16f20:	cmp	r3, #9
   16f24:	bls	16e68 <__assert_fail@plt+0x598c>
   16f28:	cmp	r4, r2
   16f2c:	bne	16f14 <__assert_fail@plt+0x5a38>
   16f30:	ldrb	r3, [r2, #-1]
   16f34:	cmp	r3, #66	; 0x42
   16f38:	orrne	r5, r5, #128	; 0x80
   16f3c:	beq	16f48 <__assert_fail@plt+0x5a6c>
   16f40:	orr	r5, r5, #32
   16f44:	b	16e68 <__assert_fail@plt+0x598c>
   16f48:	orr	r5, r5, #384	; 0x180
   16f4c:	ldrb	r3, [r2, #-2]
   16f50:	cmp	r3, #105	; 0x69
   16f54:	bne	16e68 <__assert_fail@plt+0x598c>
   16f58:	b	16f40 <__assert_fail@plt+0x5a64>
   16f5c:	ldr	r0, [pc, #40]	; 16f8c <__assert_fail@plt+0x5ab0>
   16f60:	bl	112f0 <getenv@plt>
   16f64:	cmp	r0, #0
   16f68:	moveq	r2, #1024	; 0x400
   16f6c:	movne	r2, #512	; 0x200
   16f70:	mov	r3, #0
   16f74:	strd	r2, [r6]
   16f78:	mov	r0, #4
   16f7c:	b	16e7c <__assert_fail@plt+0x59a0>
   16f80:	andeq	ip, r1, r0, ror #24
   16f84:	muleq	r1, r4, ip
   16f88:	andeq	ip, r1, r0, lsr #25
   16f8c:	andeq	ip, r1, r8, ror #16
   16f90:	andeq	ip, r1, ip, lsr #25
   16f94:	push	{r4, r5, r6, lr}
   16f98:	sub	sp, sp, #16
   16f9c:	ldr	ip, [pc, #152]	; 1703c <__assert_fail@plt+0x5b60>
   16fa0:	ldr	r4, [ip]
   16fa4:	mov	lr, #0
   16fa8:	str	lr, [ip]
   16fac:	cmp	r0, #2
   16fb0:	beq	16fd0 <__assert_fail@plt+0x5af4>
   16fb4:	ldr	r3, [pc, #128]	; 1703c <__assert_fail@plt+0x5b60>
   16fb8:	str	r4, [r3]
   16fbc:	mov	r2, #0
   16fc0:	ldr	r3, [pc, #120]	; 17040 <__assert_fail@plt+0x5b64>
   16fc4:	str	r2, [r3]
   16fc8:	add	sp, sp, #16
   16fcc:	pop	{r4, r5, r6, pc}
   16fd0:	mov	r6, r3
   16fd4:	mov	r5, r2
   16fd8:	str	lr, [sp]
   16fdc:	ldr	r3, [pc, #96]	; 17044 <__assert_fail@plt+0x5b68>
   16fe0:	ldr	r2, [pc, #96]	; 17048 <__assert_fail@plt+0x5b6c>
   16fe4:	bl	1135c <getopt_long@plt>
   16fe8:	cmn	r0, #1
   16fec:	beq	16fb4 <__assert_fail@plt+0x5ad8>
   16ff0:	cmp	r0, #104	; 0x68
   16ff4:	beq	1702c <__assert_fail@plt+0x5b50>
   16ff8:	cmp	r0, #118	; 0x76
   16ffc:	bne	16fb4 <__assert_fail@plt+0x5ad8>
   17000:	add	r3, sp, #40	; 0x28
   17004:	str	r3, [sp, #12]
   17008:	ldr	r2, [pc, #60]	; 1704c <__assert_fail@plt+0x5b70>
   1700c:	ldr	r0, [r2]
   17010:	str	r3, [sp]
   17014:	ldr	r3, [sp, #32]
   17018:	mov	r2, r6
   1701c:	mov	r1, r5
   17020:	bl	191c4 <__assert_fail@plt+0x7ce8>
   17024:	mov	r0, #0
   17028:	bl	11374 <exit@plt>
   1702c:	mov	r0, #0
   17030:	ldr	r3, [sp, #36]	; 0x24
   17034:	blx	r3
   17038:	b	16fb4 <__assert_fail@plt+0x5ad8>
   1703c:	andeq	lr, r2, r0, ror #3
   17040:	ldrdeq	lr, [r2], -r0
   17044:	ldrdeq	ip, [r1], -r4
   17048:	andeq	ip, r1, r4, lsl #26
   1704c:	ldrdeq	lr, [r2], -ip
   17050:	push	{r4, r5, r6, lr}
   17054:	sub	sp, sp, #16
   17058:	mov	r5, r2
   1705c:	mov	r6, r3
   17060:	ldr	r3, [pc, #160]	; 17108 <__assert_fail@plt+0x5c2c>
   17064:	ldr	r4, [r3]
   17068:	mov	r2, #1
   1706c:	str	r2, [r3]
   17070:	mov	r3, #0
   17074:	str	r3, [sp]
   17078:	ldr	r3, [pc, #140]	; 1710c <__assert_fail@plt+0x5c30>
   1707c:	ldr	ip, [pc, #140]	; 17110 <__assert_fail@plt+0x5c34>
   17080:	ldr	r2, [pc, #140]	; 17114 <__assert_fail@plt+0x5c38>
   17084:	ldrb	lr, [sp, #36]	; 0x24
   17088:	cmp	lr, #0
   1708c:	moveq	r2, ip
   17090:	bl	1135c <getopt_long@plt>
   17094:	cmn	r0, #1
   17098:	beq	170cc <__assert_fail@plt+0x5bf0>
   1709c:	cmp	r0, #104	; 0x68
   170a0:	beq	170c0 <__assert_fail@plt+0x5be4>
   170a4:	cmp	r0, #118	; 0x76
   170a8:	beq	170dc <__assert_fail@plt+0x5c00>
   170ac:	ldr	r3, [pc, #100]	; 17118 <__assert_fail@plt+0x5c3c>
   170b0:	ldr	r0, [r3]
   170b4:	ldr	r3, [sp, #40]	; 0x28
   170b8:	blx	r3
   170bc:	b	170cc <__assert_fail@plt+0x5bf0>
   170c0:	mov	r0, #0
   170c4:	ldr	r3, [sp, #40]	; 0x28
   170c8:	blx	r3
   170cc:	ldr	r3, [pc, #52]	; 17108 <__assert_fail@plt+0x5c2c>
   170d0:	str	r4, [r3]
   170d4:	add	sp, sp, #16
   170d8:	pop	{r4, r5, r6, pc}
   170dc:	add	r3, sp, #44	; 0x2c
   170e0:	str	r3, [sp, #12]
   170e4:	ldr	r2, [pc, #48]	; 1711c <__assert_fail@plt+0x5c40>
   170e8:	ldr	r0, [r2]
   170ec:	str	r3, [sp]
   170f0:	ldr	r3, [sp, #32]
   170f4:	mov	r2, r6
   170f8:	mov	r1, r5
   170fc:	bl	191c4 <__assert_fail@plt+0x7ce8>
   17100:	mov	r0, #0
   17104:	bl	11374 <exit@plt>
   17108:	andeq	lr, r2, r0, ror #3
   1710c:	ldrdeq	ip, [r1], -r4
   17110:	andeq	ip, r1, r4, lsl #26
   17114:			; <UNDEFINED> instruction: 0x0001c2bc
   17118:	andeq	lr, r2, ip, ror r1
   1711c:	ldrdeq	lr, [r2], -ip
   17120:	push	{r4, r5, r6, lr}
   17124:	subs	r4, r0, #0
   17128:	beq	171a0 <__assert_fail@plt+0x5cc4>
   1712c:	mov	r1, #47	; 0x2f
   17130:	mov	r0, r4
   17134:	bl	11458 <strrchr@plt>
   17138:	cmp	r0, #0
   1713c:	addne	r5, r0, #1
   17140:	moveq	r5, r4
   17144:	sub	r3, r5, r4
   17148:	cmp	r3, #6
   1714c:	ble	1718c <__assert_fail@plt+0x5cb0>
   17150:	mov	r2, #7
   17154:	ldr	r1, [pc, #96]	; 171bc <__assert_fail@plt+0x5ce0>
   17158:	sub	r0, r5, #7
   1715c:	bl	11494 <strncmp@plt>
   17160:	cmp	r0, #0
   17164:	bne	1718c <__assert_fail@plt+0x5cb0>
   17168:	mov	r2, #3
   1716c:	ldr	r1, [pc, #76]	; 171c0 <__assert_fail@plt+0x5ce4>
   17170:	mov	r0, r5
   17174:	bl	11494 <strncmp@plt>
   17178:	cmp	r0, #0
   1717c:	addeq	r4, r5, #3
   17180:	ldreq	r3, [pc, #60]	; 171c4 <__assert_fail@plt+0x5ce8>
   17184:	streq	r4, [r3]
   17188:	movne	r4, r5
   1718c:	ldr	r3, [pc, #52]	; 171c8 <__assert_fail@plt+0x5cec>
   17190:	str	r4, [r3]
   17194:	ldr	r3, [pc, #48]	; 171cc <__assert_fail@plt+0x5cf0>
   17198:	str	r4, [r3]
   1719c:	pop	{r4, r5, r6, pc}
   171a0:	ldr	r3, [pc, #40]	; 171d0 <__assert_fail@plt+0x5cf4>
   171a4:	ldr	r3, [r3]
   171a8:	mov	r2, #55	; 0x37
   171ac:	mov	r1, #1
   171b0:	ldr	r0, [pc, #28]	; 171d4 <__assert_fail@plt+0x5cf8>
   171b4:	bl	1129c <fwrite@plt>
   171b8:	bl	114ac <abort@plt>
   171bc:	andeq	ip, r1, r0, asr sp
   171c0:	andeq	ip, r1, r8, asr sp
   171c4:	andeq	lr, r2, r8, asr #3
   171c8:	andeq	lr, r2, ip, asr r4
   171cc:	andeq	lr, r2, ip, asr #3
   171d0:	ldrdeq	lr, [r2], -r8
   171d4:	andeq	ip, r1, r8, lsl sp
   171d8:	push	{r4, r5, r6, lr}
   171dc:	mov	r5, r0
   171e0:	mov	r4, r1
   171e4:	mov	r2, #48	; 0x30
   171e8:	mov	r1, #0
   171ec:	bl	113d4 <memset@plt>
   171f0:	cmp	r4, #10
   171f4:	beq	17204 <__assert_fail@plt+0x5d28>
   171f8:	str	r4, [r5]
   171fc:	mov	r0, r5
   17200:	pop	{r4, r5, r6, pc}
   17204:	bl	114ac <abort@plt>
   17208:	push	{r4, r5, r6, lr}
   1720c:	mov	r4, r0
   17210:	mov	r5, r1
   17214:	mov	r2, #5
   17218:	mov	r1, r0
   1721c:	mov	r0, #0
   17220:	bl	11230 <dcgettext@plt>
   17224:	cmp	r4, r0
   17228:	popne	{r4, r5, r6, pc}
   1722c:	bl	1a470 <__assert_fail@plt+0x8f94>
   17230:	ldrb	r3, [r0]
   17234:	bic	r3, r3, #32
   17238:	cmp	r3, #85	; 0x55
   1723c:	beq	172b8 <__assert_fail@plt+0x5ddc>
   17240:	cmp	r3, #71	; 0x47
   17244:	bne	17314 <__assert_fail@plt+0x5e38>
   17248:	ldrb	r3, [r0, #1]
   1724c:	bic	r3, r3, #32
   17250:	cmp	r3, #66	; 0x42
   17254:	bne	17314 <__assert_fail@plt+0x5e38>
   17258:	ldrb	r3, [r0, #2]
   1725c:	cmp	r3, #49	; 0x31
   17260:	bne	17314 <__assert_fail@plt+0x5e38>
   17264:	ldrb	r3, [r0, #3]
   17268:	cmp	r3, #56	; 0x38
   1726c:	bne	17314 <__assert_fail@plt+0x5e38>
   17270:	ldrb	r3, [r0, #4]
   17274:	cmp	r3, #48	; 0x30
   17278:	bne	17314 <__assert_fail@plt+0x5e38>
   1727c:	ldrb	r3, [r0, #5]
   17280:	cmp	r3, #51	; 0x33
   17284:	bne	17314 <__assert_fail@plt+0x5e38>
   17288:	ldrb	r3, [r0, #6]
   1728c:	cmp	r3, #48	; 0x30
   17290:	bne	17314 <__assert_fail@plt+0x5e38>
   17294:	ldrb	r3, [r0, #7]
   17298:	cmp	r3, #0
   1729c:	bne	17314 <__assert_fail@plt+0x5e38>
   172a0:	ldrb	r2, [r4]
   172a4:	ldr	r3, [pc, #124]	; 17328 <__assert_fail@plt+0x5e4c>
   172a8:	ldr	r0, [pc, #124]	; 1732c <__assert_fail@plt+0x5e50>
   172ac:	cmp	r2, #96	; 0x60
   172b0:	movne	r0, r3
   172b4:	pop	{r4, r5, r6, pc}
   172b8:	ldrb	r3, [r0, #1]
   172bc:	bic	r3, r3, #32
   172c0:	cmp	r3, #84	; 0x54
   172c4:	bne	17314 <__assert_fail@plt+0x5e38>
   172c8:	ldrb	r3, [r0, #2]
   172cc:	bic	r3, r3, #32
   172d0:	cmp	r3, #70	; 0x46
   172d4:	bne	17314 <__assert_fail@plt+0x5e38>
   172d8:	ldrb	r3, [r0, #3]
   172dc:	cmp	r3, #45	; 0x2d
   172e0:	bne	17314 <__assert_fail@plt+0x5e38>
   172e4:	ldrb	r3, [r0, #4]
   172e8:	cmp	r3, #56	; 0x38
   172ec:	bne	17314 <__assert_fail@plt+0x5e38>
   172f0:	ldrb	r3, [r0, #5]
   172f4:	cmp	r3, #0
   172f8:	bne	17314 <__assert_fail@plt+0x5e38>
   172fc:	ldrb	r2, [r4]
   17300:	ldr	r3, [pc, #40]	; 17330 <__assert_fail@plt+0x5e54>
   17304:	ldr	r0, [pc, #40]	; 17334 <__assert_fail@plt+0x5e58>
   17308:	cmp	r2, #96	; 0x60
   1730c:	movne	r0, r3
   17310:	pop	{r4, r5, r6, pc}
   17314:	ldr	r3, [pc, #28]	; 17338 <__assert_fail@plt+0x5e5c>
   17318:	ldr	r0, [pc, #28]	; 1733c <__assert_fail@plt+0x5e60>
   1731c:	cmp	r5, #9
   17320:	movne	r0, r3
   17324:	pop	{r4, r5, r6, pc}
   17328:			; <UNDEFINED> instruction: 0x0001cdb4
   1732c:	andeq	ip, r1, r0, asr #27
   17330:			; <UNDEFINED> instruction: 0x0001cdb0
   17334:	andeq	ip, r1, r4, asr #27
   17338:			; <UNDEFINED> instruction: 0x0001cdb8
   1733c:			; <UNDEFINED> instruction: 0x0001cdbc
   17340:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17344:	sub	sp, sp, #116	; 0x74
   17348:	str	r0, [sp, #36]	; 0x24
   1734c:	mov	sl, r1
   17350:	str	r2, [sp, #52]	; 0x34
   17354:	str	r3, [sp, #28]
   17358:	ldr	r8, [sp, #152]	; 0x98
   1735c:	bl	112b4 <__ctype_get_mb_cur_max@plt>
   17360:	str	r0, [sp, #84]	; 0x54
   17364:	ldr	r3, [sp, #156]	; 0x9c
   17368:	lsr	r3, r3, #1
   1736c:	and	r3, r3, #1
   17370:	str	r3, [sp, #32]
   17374:	mov	r3, #1
   17378:	str	r3, [sp, #40]	; 0x28
   1737c:	mov	r3, #0
   17380:	str	r3, [sp, #80]	; 0x50
   17384:	str	r3, [sp, #44]	; 0x2c
   17388:	str	r3, [sp, #48]	; 0x30
   1738c:	str	r3, [sp, #60]	; 0x3c
   17390:	str	r3, [sp, #72]	; 0x48
   17394:	str	r3, [sp, #76]	; 0x4c
   17398:	mov	r7, sl
   1739c:	mov	sl, r8
   173a0:	cmp	sl, #10
   173a4:	ldrls	pc, [pc, sl, lsl #2]
   173a8:	b	17560 <__assert_fail@plt+0x6084>
   173ac:	andeq	r7, r1, r0, lsl r4
   173b0:	andeq	r7, r1, r0, ror #7
   173b4:	andeq	r7, r1, ip, lsr r5
   173b8:	ldrdeq	r7, [r1], -r8
   173bc:	strdeq	r7, [r1], -r0
   173c0:	andeq	r7, r1, r0, lsr #8
   173c4:	andeq	r8, r1, ip, lsl #9
   173c8:	andeq	r7, r1, r4, ror #10
   173cc:	andeq	r7, r1, ip, asr r4
   173d0:	andeq	r7, r1, ip, asr r4
   173d4:	andeq	r7, r1, ip, asr r4
   173d8:	mov	r3, #1
   173dc:	str	r3, [sp, #48]	; 0x30
   173e0:	mov	r3, #1
   173e4:	str	r3, [sp, #32]
   173e8:	str	r3, [sp, #60]	; 0x3c
   173ec:	ldr	r3, [pc, #4068]	; 183d8 <__assert_fail@plt+0x6efc>
   173f0:	str	r3, [sp, #72]	; 0x48
   173f4:	mov	fp, #0
   173f8:	mov	sl, #2
   173fc:	mov	r6, #0
   17400:	ldr	r3, [sp, #48]	; 0x30
   17404:	eor	r3, r3, #1
   17408:	str	r3, [sp, #68]	; 0x44
   1740c:	b	17cf4 <__assert_fail@plt+0x6818>
   17410:	mov	r3, #0
   17414:	str	r3, [sp, #32]
   17418:	mov	fp, r3
   1741c:	b	173fc <__assert_fail@plt+0x5f20>
   17420:	ldr	r3, [sp, #32]
   17424:	cmp	r3, #0
   17428:	bne	1757c <__assert_fail@plt+0x60a0>
   1742c:	cmp	r7, #0
   17430:	beq	1759c <__assert_fail@plt+0x60c0>
   17434:	ldr	r3, [sp, #36]	; 0x24
   17438:	mov	r2, #34	; 0x22
   1743c:	strb	r2, [r3]
   17440:	mov	r3, #1
   17444:	str	r3, [sp, #48]	; 0x30
   17448:	str	r3, [sp, #60]	; 0x3c
   1744c:	ldr	r3, [pc, #3980]	; 183e0 <__assert_fail@plt+0x6f04>
   17450:	str	r3, [sp, #72]	; 0x48
   17454:	mov	fp, #1
   17458:	b	173fc <__assert_fail@plt+0x5f20>
   1745c:	cmp	sl, #10
   17460:	beq	17484 <__assert_fail@plt+0x5fa8>
   17464:	mov	r1, sl
   17468:	ldr	r0, [pc, #3948]	; 183dc <__assert_fail@plt+0x6f00>
   1746c:	bl	17208 <__assert_fail@plt+0x5d2c>
   17470:	str	r0, [sp, #164]	; 0xa4
   17474:	mov	r1, sl
   17478:	ldr	r0, [pc, #3928]	; 183d8 <__assert_fail@plt+0x6efc>
   1747c:	bl	17208 <__assert_fail@plt+0x5d2c>
   17480:	str	r0, [sp, #168]	; 0xa8
   17484:	ldr	r3, [sp, #32]
   17488:	cmp	r3, #0
   1748c:	movne	fp, #0
   17490:	bne	174c8 <__assert_fail@plt+0x5fec>
   17494:	ldr	r3, [sp, #164]	; 0xa4
   17498:	ldrb	r3, [r3]
   1749c:	cmp	r3, #0
   174a0:	beq	174e8 <__assert_fail@plt+0x600c>
   174a4:	ldr	r2, [sp, #164]	; 0xa4
   174a8:	mov	fp, #0
   174ac:	ldr	r1, [sp, #36]	; 0x24
   174b0:	cmp	r7, fp
   174b4:	strbhi	r3, [r1, fp]
   174b8:	add	fp, fp, #1
   174bc:	ldrb	r3, [r2, #1]!
   174c0:	cmp	r3, #0
   174c4:	bne	174b0 <__assert_fail@plt+0x5fd4>
   174c8:	ldr	r0, [sp, #168]	; 0xa8
   174cc:	bl	11380 <strlen@plt>
   174d0:	str	r0, [sp, #60]	; 0x3c
   174d4:	ldr	r3, [sp, #168]	; 0xa8
   174d8:	str	r3, [sp, #72]	; 0x48
   174dc:	mov	r3, #1
   174e0:	str	r3, [sp, #48]	; 0x30
   174e4:	b	173fc <__assert_fail@plt+0x5f20>
   174e8:	mov	fp, #0
   174ec:	b	174c8 <__assert_fail@plt+0x5fec>
   174f0:	ldr	r3, [sp, #32]
   174f4:	cmp	r3, #0
   174f8:	bne	175b8 <__assert_fail@plt+0x60dc>
   174fc:	mov	r3, #1
   17500:	str	r3, [sp, #48]	; 0x30
   17504:	cmp	r7, #0
   17508:	beq	175d4 <__assert_fail@plt+0x60f8>
   1750c:	ldr	r3, [sp, #36]	; 0x24
   17510:	mov	r2, #39	; 0x27
   17514:	strb	r2, [r3]
   17518:	mov	r3, #0
   1751c:	str	r3, [sp, #32]
   17520:	mov	r3, #1
   17524:	str	r3, [sp, #60]	; 0x3c
   17528:	ldr	r3, [pc, #3752]	; 183d8 <__assert_fail@plt+0x6efc>
   1752c:	str	r3, [sp, #72]	; 0x48
   17530:	mov	fp, #1
   17534:	mov	sl, #2
   17538:	b	173fc <__assert_fail@plt+0x5f20>
   1753c:	ldr	r3, [sp, #32]
   17540:	cmp	r3, #0
   17544:	beq	17504 <__assert_fail@plt+0x6028>
   17548:	mov	r3, #1
   1754c:	str	r3, [sp, #60]	; 0x3c
   17550:	ldr	r3, [pc, #3712]	; 183d8 <__assert_fail@plt+0x6efc>
   17554:	str	r3, [sp, #72]	; 0x48
   17558:	mov	fp, #0
   1755c:	b	173fc <__assert_fail@plt+0x5f20>
   17560:	bl	114ac <abort@plt>
   17564:	mov	r3, #0
   17568:	str	r3, [sp, #32]
   1756c:	mov	r3, #1
   17570:	str	r3, [sp, #48]	; 0x30
   17574:	mov	fp, #0
   17578:	b	173fc <__assert_fail@plt+0x5f20>
   1757c:	ldr	r3, [sp, #32]
   17580:	str	r3, [sp, #48]	; 0x30
   17584:	mov	r3, #1
   17588:	str	r3, [sp, #60]	; 0x3c
   1758c:	ldr	r3, [pc, #3660]	; 183e0 <__assert_fail@plt+0x6f04>
   17590:	str	r3, [sp, #72]	; 0x48
   17594:	mov	fp, #0
   17598:	b	173fc <__assert_fail@plt+0x5f20>
   1759c:	mov	r3, #1
   175a0:	str	r3, [sp, #48]	; 0x30
   175a4:	str	r3, [sp, #60]	; 0x3c
   175a8:	ldr	r3, [pc, #3632]	; 183e0 <__assert_fail@plt+0x6f04>
   175ac:	str	r3, [sp, #72]	; 0x48
   175b0:	mov	fp, #1
   175b4:	b	173fc <__assert_fail@plt+0x5f20>
   175b8:	mov	r3, #1
   175bc:	str	r3, [sp, #60]	; 0x3c
   175c0:	ldr	r3, [pc, #3600]	; 183d8 <__assert_fail@plt+0x6efc>
   175c4:	str	r3, [sp, #72]	; 0x48
   175c8:	mov	fp, #0
   175cc:	mov	sl, #2
   175d0:	b	173fc <__assert_fail@plt+0x5f20>
   175d4:	mov	r3, #0
   175d8:	str	r3, [sp, #32]
   175dc:	mov	r3, #1
   175e0:	str	r3, [sp, #60]	; 0x3c
   175e4:	ldr	r3, [pc, #3564]	; 183d8 <__assert_fail@plt+0x6efc>
   175e8:	str	r3, [sp, #72]	; 0x48
   175ec:	mov	fp, #1
   175f0:	mov	sl, #2
   175f4:	b	173fc <__assert_fail@plt+0x5f20>
   175f8:	mov	r3, #0
   175fc:	str	r3, [sp, #56]	; 0x38
   17600:	ldr	r3, [sp, #52]	; 0x34
   17604:	add	r2, r3, r6
   17608:	str	r2, [sp, #64]	; 0x40
   1760c:	ldrb	r4, [r3, r6]
   17610:	cmp	r4, #126	; 0x7e
   17614:	ldrls	pc, [pc, r4, lsl #2]
   17618:	b	17e54 <__assert_fail@plt+0x6978>
   1761c:	andeq	r7, r1, r4, lsr r8
   17620:	andeq	r7, r1, r4, asr lr
   17624:	andeq	r7, r1, r4, asr lr
   17628:	andeq	r7, r1, r4, asr lr
   1762c:	andeq	r7, r1, r4, asr lr
   17630:	andeq	r7, r1, r4, asr lr
   17634:	andeq	r7, r1, r4, asr lr
   17638:	muleq	r1, r0, fp
   1763c:	andeq	r7, r1, ip, lsr #16
   17640:	andeq	r7, r1, r8, asr #22
   17644:	andeq	r7, r1, r0, asr #22
   17648:			; <UNDEFINED> instruction: 0x00017ab0
   1764c:	andeq	r7, r1, r8, lsr #21
   17650:	andeq	r7, r1, r4, lsr #16
   17654:	andeq	r7, r1, r4, asr lr
   17658:	andeq	r7, r1, r4, asr lr
   1765c:	andeq	r7, r1, r4, asr lr
   17660:	andeq	r7, r1, r4, asr lr
   17664:	andeq	r7, r1, r4, asr lr
   17668:	andeq	r7, r1, r4, asr lr
   1766c:	andeq	r7, r1, r4, asr lr
   17670:	andeq	r7, r1, r4, asr lr
   17674:	andeq	r7, r1, r4, asr lr
   17678:	andeq	r7, r1, r4, asr lr
   1767c:	andeq	r7, r1, r4, asr lr
   17680:	andeq	r7, r1, r4, asr lr
   17684:	andeq	r7, r1, r4, asr lr
   17688:	andeq	r7, r1, r4, asr lr
   1768c:	andeq	r7, r1, r4, asr lr
   17690:	andeq	r7, r1, r4, asr lr
   17694:	andeq	r7, r1, r4, asr lr
   17698:	andeq	r7, r1, r4, asr lr
   1769c:	andeq	r7, r1, r4, ror #23
   176a0:	andeq	r7, r1, r0, ror #23
   176a4:	andeq	r7, r1, r0, ror #23
   176a8:			; <UNDEFINED> instruction: 0x00017bb8
   176ac:	andeq	r7, r1, r0, ror #23
   176b0:	andeq	r8, r1, r8, lsr #4
   176b4:	andeq	r7, r1, r0, ror #23
   176b8:			; <UNDEFINED> instruction: 0x00017db8
   176bc:	andeq	r7, r1, r0, ror #23
   176c0:	andeq	r7, r1, r0, ror #23
   176c4:	andeq	r7, r1, r0, ror #23
   176c8:	andeq	r8, r1, r8, lsr #4
   176cc:	andeq	r8, r1, r8, lsr #4
   176d0:	andeq	r8, r1, r8, lsr #4
   176d4:	andeq	r8, r1, r8, lsr #4
   176d8:	andeq	r8, r1, r8, lsr #4
   176dc:	andeq	r8, r1, r8, lsr #4
   176e0:	andeq	r8, r1, r8, lsr #4
   176e4:	andeq	r8, r1, r8, lsr #4
   176e8:	andeq	r8, r1, r8, lsr #4
   176ec:	andeq	r8, r1, r8, lsr #4
   176f0:	andeq	r8, r1, r8, lsr #4
   176f4:	andeq	r8, r1, r8, lsr #4
   176f8:	andeq	r8, r1, r8, lsr #4
   176fc:	andeq	r8, r1, r8, lsr #4
   17700:	andeq	r8, r1, r8, lsr #4
   17704:	andeq	r8, r1, r8, lsr #4
   17708:	andeq	r7, r1, r0, ror #23
   1770c:	andeq	r7, r1, r0, ror #23
   17710:	andeq	r7, r1, r0, ror #23
   17714:	andeq	r7, r1, r0, ror #23
   17718:	andeq	r7, r1, ip, lsr r9
   1771c:	andeq	r7, r1, r4, asr lr
   17720:	andeq	r8, r1, r8, lsr #4
   17724:	andeq	r8, r1, r8, lsr #4
   17728:	andeq	r8, r1, r8, lsr #4
   1772c:	andeq	r8, r1, r8, lsr #4
   17730:	andeq	r8, r1, r8, lsr #4
   17734:	andeq	r8, r1, r8, lsr #4
   17738:	andeq	r8, r1, r8, lsr #4
   1773c:	andeq	r8, r1, r8, lsr #4
   17740:	andeq	r8, r1, r8, lsr #4
   17744:	andeq	r8, r1, r8, lsr #4
   17748:	andeq	r8, r1, r8, lsr #4
   1774c:	andeq	r8, r1, r8, lsr #4
   17750:	andeq	r8, r1, r8, lsr #4
   17754:	andeq	r8, r1, r8, lsr #4
   17758:	andeq	r8, r1, r8, lsr #4
   1775c:	andeq	r8, r1, r8, lsr #4
   17760:	andeq	r8, r1, r8, lsr #4
   17764:	andeq	r8, r1, r8, lsr #4
   17768:	andeq	r8, r1, r8, lsr #4
   1776c:	andeq	r8, r1, r8, lsr #4
   17770:	andeq	r8, r1, r8, lsr #4
   17774:	andeq	r8, r1, r8, lsr #4
   17778:	andeq	r8, r1, r8, lsr #4
   1777c:	andeq	r8, r1, r8, lsr #4
   17780:	andeq	r8, r1, r8, lsr #4
   17784:	andeq	r8, r1, r8, lsr #4
   17788:	andeq	r7, r1, r0, ror #23
   1778c:			; <UNDEFINED> instruction: 0x00017ab8
   17790:	andeq	r8, r1, r8, lsr #4
   17794:	andeq	r7, r1, r0, ror #23
   17798:	andeq	r8, r1, r8, lsr #4
   1779c:	andeq	r7, r1, r0, ror #23
   177a0:	andeq	r8, r1, r8, lsr #4
   177a4:	andeq	r8, r1, r8, lsr #4
   177a8:	andeq	r8, r1, r8, lsr #4
   177ac:	andeq	r8, r1, r8, lsr #4
   177b0:	andeq	r8, r1, r8, lsr #4
   177b4:	andeq	r8, r1, r8, lsr #4
   177b8:	andeq	r8, r1, r8, lsr #4
   177bc:	andeq	r8, r1, r8, lsr #4
   177c0:	andeq	r8, r1, r8, lsr #4
   177c4:	andeq	r8, r1, r8, lsr #4
   177c8:	andeq	r8, r1, r8, lsr #4
   177cc:	andeq	r8, r1, r8, lsr #4
   177d0:	andeq	r8, r1, r8, lsr #4
   177d4:	andeq	r8, r1, r8, lsr #4
   177d8:	andeq	r8, r1, r8, lsr #4
   177dc:	andeq	r8, r1, r8, lsr #4
   177e0:	andeq	r8, r1, r8, lsr #4
   177e4:	andeq	r8, r1, r8, lsr #4
   177e8:	andeq	r8, r1, r8, lsr #4
   177ec:	andeq	r8, r1, r8, lsr #4
   177f0:	andeq	r8, r1, r8, lsr #4
   177f4:	andeq	r8, r1, r8, lsr #4
   177f8:	andeq	r8, r1, r8, lsr #4
   177fc:	andeq	r8, r1, r8, lsr #4
   17800:	andeq	r8, r1, r8, lsr #4
   17804:	andeq	r8, r1, r8, lsr #4
   17808:	muleq	r1, r8, fp
   1780c:	andeq	r7, r1, r0, ror #23
   17810:	muleq	r1, r8, fp
   17814:			; <UNDEFINED> instruction: 0x00017bb8
   17818:	mov	r3, #0
   1781c:	str	r3, [sp, #56]	; 0x38
   17820:	b	17600 <__assert_fail@plt+0x6124>
   17824:	mov	r3, #114	; 0x72
   17828:	b	17b4c <__assert_fail@plt+0x6670>
   1782c:	mov	r3, #98	; 0x62
   17830:	b	17b64 <__assert_fail@plt+0x6688>
   17834:	ldr	r3, [sp, #48]	; 0x30
   17838:	cmp	r3, #0
   1783c:	beq	17924 <__assert_fail@plt+0x6448>
   17840:	ldr	r3, [sp, #32]
   17844:	cmp	r3, #0
   17848:	bne	183ac <__assert_fail@plt+0x6ed0>
   1784c:	ldr	r3, [sp, #44]	; 0x2c
   17850:	eor	r3, r3, #1
   17854:	cmp	sl, #2
   17858:	movne	r3, #0
   1785c:	andeq	r3, r3, #1
   17860:	cmp	r3, #0
   17864:	moveq	r2, fp
   17868:	beq	178ac <__assert_fail@plt+0x63d0>
   1786c:	cmp	r7, fp
   17870:	ldrhi	r2, [sp, #36]	; 0x24
   17874:	movhi	r1, #39	; 0x27
   17878:	strbhi	r1, [r2, fp]
   1787c:	add	r2, fp, #1
   17880:	cmp	r7, r2
   17884:	ldrhi	r1, [sp, #36]	; 0x24
   17888:	movhi	r0, #36	; 0x24
   1788c:	strbhi	r0, [r1, r2]
   17890:	add	r2, fp, #2
   17894:	cmp	r7, r2
   17898:	ldrhi	r1, [sp, #36]	; 0x24
   1789c:	movhi	r0, #39	; 0x27
   178a0:	strbhi	r0, [r1, r2]
   178a4:	add	r2, fp, #3
   178a8:	str	r3, [sp, #44]	; 0x2c
   178ac:	cmp	r7, r2
   178b0:	ldrhi	r3, [sp, #36]	; 0x24
   178b4:	movhi	r1, #92	; 0x5c
   178b8:	strbhi	r1, [r3, r2]
   178bc:	add	fp, r2, #1
   178c0:	cmp	r5, #0
   178c4:	beq	18230 <__assert_fail@plt+0x6d54>
   178c8:	add	r3, r6, #1
   178cc:	ldr	r1, [sp, #28]
   178d0:	cmp	r1, r3
   178d4:	bls	18240 <__assert_fail@plt+0x6d64>
   178d8:	ldr	r1, [sp, #52]	; 0x34
   178dc:	ldrb	r3, [r1, r3]
   178e0:	sub	r3, r3, #48	; 0x30
   178e4:	uxtb	r3, r3
   178e8:	cmp	r3, #9
   178ec:	bhi	1824c <__assert_fail@plt+0x6d70>
   178f0:	cmp	r7, fp
   178f4:	movhi	r3, #48	; 0x30
   178f8:	ldrhi	r1, [sp, #36]	; 0x24
   178fc:	strbhi	r3, [r1, fp]
   17900:	add	r3, r2, #2
   17904:	cmp	r7, r3
   17908:	movhi	r1, #48	; 0x30
   1790c:	ldrhi	r0, [sp, #36]	; 0x24
   17910:	strbhi	r1, [r0, r3]
   17914:	add	fp, r2, #3
   17918:	ldr	r8, [sp, #32]
   1791c:	mov	r4, #48	; 0x30
   17920:	b	17bfc <__assert_fail@plt+0x6720>
   17924:	ldr	r3, [sp, #156]	; 0x9c
   17928:	tst	r3, #1
   1792c:	bne	17cf0 <__assert_fail@plt+0x6814>
   17930:	ldr	r5, [sp, #48]	; 0x30
   17934:	mov	r8, r5
   17938:	b	17bfc <__assert_fail@plt+0x6720>
   1793c:	cmp	sl, #2
   17940:	beq	17958 <__assert_fail@plt+0x647c>
   17944:	cmp	sl, #5
   17948:	beq	17970 <__assert_fail@plt+0x6494>
   1794c:	mov	r8, #0
   17950:	mov	r5, r8
   17954:	b	17bfc <__assert_fail@plt+0x6720>
   17958:	ldr	r3, [sp, #32]
   1795c:	cmp	r3, #0
   17960:	bne	183c0 <__assert_fail@plt+0x6ee4>
   17964:	mov	r8, r3
   17968:	mov	r5, r3
   1796c:	b	17bfc <__assert_fail@plt+0x6720>
   17970:	ldr	r3, [sp, #156]	; 0x9c
   17974:	tst	r3, #4
   17978:	beq	18258 <__assert_fail@plt+0x6d7c>
   1797c:	add	r3, r6, #2
   17980:	ldr	r2, [sp, #28]
   17984:	cmp	r2, r3
   17988:	bls	18264 <__assert_fail@plt+0x6d88>
   1798c:	ldr	r2, [sp, #52]	; 0x34
   17990:	add	r2, r2, r6
   17994:	ldrb	r2, [r2, #1]
   17998:	cmp	r2, #63	; 0x3f
   1799c:	movne	r8, #0
   179a0:	movne	r5, r8
   179a4:	bne	17bfc <__assert_fail@plt+0x6720>
   179a8:	ldr	r2, [sp, #52]	; 0x34
   179ac:	ldrb	r2, [r2, r3]
   179b0:	sub	r1, r2, #33	; 0x21
   179b4:	cmp	r1, #29
   179b8:	ldrls	pc, [pc, r1, lsl #2]
   179bc:	b	18270 <__assert_fail@plt+0x6d94>
   179c0:	andeq	r7, r1, r8, lsr sl
   179c4:	andeq	r8, r1, r0, ror r2
   179c8:	andeq	r8, r1, r0, ror r2
   179cc:	andeq	r8, r1, r0, ror r2
   179d0:	andeq	r8, r1, r0, ror r2
   179d4:	andeq	r8, r1, r0, ror r2
   179d8:	andeq	r7, r1, r8, lsr sl
   179dc:	andeq	r7, r1, r8, lsr sl
   179e0:	andeq	r7, r1, r8, lsr sl
   179e4:	andeq	r8, r1, r0, ror r2
   179e8:	andeq	r8, r1, r0, ror r2
   179ec:	andeq	r8, r1, r0, ror r2
   179f0:	andeq	r7, r1, r8, lsr sl
   179f4:	andeq	r8, r1, r0, ror r2
   179f8:	andeq	r7, r1, r8, lsr sl
   179fc:	andeq	r8, r1, r0, ror r2
   17a00:	andeq	r8, r1, r0, ror r2
   17a04:	andeq	r8, r1, r0, ror r2
   17a08:	andeq	r8, r1, r0, ror r2
   17a0c:	andeq	r8, r1, r0, ror r2
   17a10:	andeq	r8, r1, r0, ror r2
   17a14:	andeq	r8, r1, r0, ror r2
   17a18:	andeq	r8, r1, r0, ror r2
   17a1c:	andeq	r8, r1, r0, ror r2
   17a20:	andeq	r8, r1, r0, ror r2
   17a24:	andeq	r8, r1, r0, ror r2
   17a28:	andeq	r8, r1, r0, ror r2
   17a2c:	andeq	r7, r1, r8, lsr sl
   17a30:	andeq	r7, r1, r8, lsr sl
   17a34:	andeq	r7, r1, r8, lsr sl
   17a38:	ldr	r1, [sp, #32]
   17a3c:	cmp	r1, #0
   17a40:	bne	18480 <__assert_fail@plt+0x6fa4>
   17a44:	cmp	r7, fp
   17a48:	movhi	r1, #63	; 0x3f
   17a4c:	ldrhi	r0, [sp, #36]	; 0x24
   17a50:	strbhi	r1, [r0, fp]
   17a54:	add	r1, fp, #1
   17a58:	cmp	r7, r1
   17a5c:	ldrhi	r0, [sp, #36]	; 0x24
   17a60:	movhi	ip, #34	; 0x22
   17a64:	strbhi	ip, [r0, r1]
   17a68:	add	r1, fp, #2
   17a6c:	cmp	r7, r1
   17a70:	ldrhi	r0, [sp, #36]	; 0x24
   17a74:	movhi	ip, #34	; 0x22
   17a78:	strbhi	ip, [r0, r1]
   17a7c:	add	r1, fp, #3
   17a80:	cmp	r7, r1
   17a84:	movhi	r0, #63	; 0x3f
   17a88:	ldrhi	ip, [sp, #36]	; 0x24
   17a8c:	strbhi	r0, [ip, r1]
   17a90:	add	fp, fp, #4
   17a94:	ldr	r5, [sp, #32]
   17a98:	mov	r8, r5
   17a9c:	mov	r4, r2
   17aa0:	mov	r6, r3
   17aa4:	b	17bfc <__assert_fail@plt+0x6720>
   17aa8:	mov	r3, #102	; 0x66
   17aac:	b	17b64 <__assert_fail@plt+0x6688>
   17ab0:	mov	r3, #118	; 0x76
   17ab4:	b	17b64 <__assert_fail@plt+0x6688>
   17ab8:	cmp	sl, #2
   17abc:	beq	17b28 <__assert_fail@plt+0x664c>
   17ac0:	ldr	r3, [sp, #48]	; 0x30
   17ac4:	ldr	r2, [sp, #32]
   17ac8:	and	r3, r3, r2
   17acc:	tst	r9, r3
   17ad0:	moveq	r3, r4
   17ad4:	beq	17b64 <__assert_fail@plt+0x6688>
   17ad8:	mov	r8, #0
   17adc:	mov	r5, r8
   17ae0:	eor	r5, r5, #1
   17ae4:	ldr	r3, [sp, #44]	; 0x2c
   17ae8:	and	r5, r5, r3
   17aec:	tst	r5, #255	; 0xff
   17af0:	beq	17cd0 <__assert_fail@plt+0x67f4>
   17af4:	cmp	r7, fp
   17af8:	ldrhi	r3, [sp, #36]	; 0x24
   17afc:	movhi	r2, #39	; 0x27
   17b00:	strbhi	r2, [r3, fp]
   17b04:	add	r3, fp, #1
   17b08:	cmp	r7, r3
   17b0c:	ldrhi	r2, [sp, #36]	; 0x24
   17b10:	movhi	r1, #39	; 0x27
   17b14:	strbhi	r1, [r2, r3]
   17b18:	add	fp, fp, #2
   17b1c:	mov	r3, #0
   17b20:	str	r3, [sp, #44]	; 0x2c
   17b24:	b	17cd0 <__assert_fail@plt+0x67f4>
   17b28:	ldr	r3, [sp, #32]
   17b2c:	cmp	r3, #0
   17b30:	bne	183cc <__assert_fail@plt+0x6ef0>
   17b34:	mov	r8, r3
   17b38:	mov	r5, r3
   17b3c:	b	17ae0 <__assert_fail@plt+0x6604>
   17b40:	mov	r3, #110	; 0x6e
   17b44:	b	17b4c <__assert_fail@plt+0x6670>
   17b48:	mov	r3, #116	; 0x74
   17b4c:	ldr	r2, [sp, #32]
   17b50:	cmp	sl, #2
   17b54:	movne	r2, #0
   17b58:	andeq	r2, r2, #1
   17b5c:	cmp	r2, #0
   17b60:	bne	17b84 <__assert_fail@plt+0x66a8>
   17b64:	ldr	r2, [sp, #48]	; 0x30
   17b68:	cmp	r2, #0
   17b6c:	moveq	r8, r2
   17b70:	moveq	r5, r2
   17b74:	beq	17bfc <__assert_fail@plt+0x6720>
   17b78:	mov	r4, r3
   17b7c:	mov	r8, #0
   17b80:	b	17c54 <__assert_fail@plt+0x6778>
   17b84:	mov	r8, sl
   17b88:	mov	sl, r7
   17b8c:	b	183f8 <__assert_fail@plt+0x6f1c>
   17b90:	mov	r3, #97	; 0x61
   17b94:	b	17b64 <__assert_fail@plt+0x6688>
   17b98:	ldr	r3, [sp, #28]
   17b9c:	cmn	r3, #1
   17ba0:	beq	17bcc <__assert_fail@plt+0x66f0>
   17ba4:	ldr	r3, [sp, #28]
   17ba8:	subs	r3, r3, #1
   17bac:	movne	r3, #1
   17bb0:	cmp	r3, #0
   17bb4:	bne	1827c <__assert_fail@plt+0x6da0>
   17bb8:	cmp	r6, #0
   17bbc:	beq	17be4 <__assert_fail@plt+0x6708>
   17bc0:	mov	r8, #0
   17bc4:	mov	r5, r8
   17bc8:	b	17bfc <__assert_fail@plt+0x6720>
   17bcc:	ldr	r3, [sp, #52]	; 0x34
   17bd0:	ldrb	r3, [r3, #1]
   17bd4:	adds	r3, r3, #0
   17bd8:	movne	r3, #1
   17bdc:	b	17bb0 <__assert_fail@plt+0x66d4>
   17be0:	mov	r8, #0
   17be4:	ldr	r5, [sp, #32]
   17be8:	cmp	sl, #2
   17bec:	movne	r5, #0
   17bf0:	andeq	r5, r5, #1
   17bf4:	cmp	r5, #0
   17bf8:	bne	17dac <__assert_fail@plt+0x68d0>
   17bfc:	ldr	r3, [sp, #68]	; 0x44
   17c00:	cmp	sl, #2
   17c04:	orreq	r3, r3, #1
   17c08:	eor	r3, r3, #1
   17c0c:	ldr	r2, [sp, #32]
   17c10:	orr	r3, r2, r3
   17c14:	tst	r3, #255	; 0xff
   17c18:	beq	17c48 <__assert_fail@plt+0x676c>
   17c1c:	ldr	r3, [sp, #160]	; 0xa0
   17c20:	cmp	r3, #0
   17c24:	beq	17c48 <__assert_fail@plt+0x676c>
   17c28:	lsr	r2, r4, #5
   17c2c:	uxtb	r2, r2
   17c30:	and	r3, r4, #31
   17c34:	ldr	r1, [sp, #160]	; 0xa0
   17c38:	ldr	r2, [r1, r2, lsl #2]
   17c3c:	lsr	r3, r2, r3
   17c40:	tst	r3, #1
   17c44:	bne	17c54 <__assert_fail@plt+0x6778>
   17c48:	ldr	r3, [sp, #56]	; 0x38
   17c4c:	cmp	r3, #0
   17c50:	beq	17ae0 <__assert_fail@plt+0x6604>
   17c54:	ldr	r3, [sp, #32]
   17c58:	cmp	r3, #0
   17c5c:	bne	18468 <__assert_fail@plt+0x6f8c>
   17c60:	ldr	r3, [sp, #44]	; 0x2c
   17c64:	eor	r3, r3, #1
   17c68:	cmp	sl, #2
   17c6c:	movne	r3, #0
   17c70:	andeq	r3, r3, #1
   17c74:	cmp	r3, #0
   17c78:	beq	17cbc <__assert_fail@plt+0x67e0>
   17c7c:	cmp	r7, fp
   17c80:	ldrhi	r2, [sp, #36]	; 0x24
   17c84:	movhi	r1, #39	; 0x27
   17c88:	strbhi	r1, [r2, fp]
   17c8c:	add	r2, fp, #1
   17c90:	cmp	r7, r2
   17c94:	ldrhi	r1, [sp, #36]	; 0x24
   17c98:	movhi	r0, #36	; 0x24
   17c9c:	strbhi	r0, [r1, r2]
   17ca0:	add	r2, fp, #2
   17ca4:	cmp	r7, r2
   17ca8:	ldrhi	r1, [sp, #36]	; 0x24
   17cac:	movhi	r0, #39	; 0x27
   17cb0:	strbhi	r0, [r1, r2]
   17cb4:	add	fp, fp, #3
   17cb8:	str	r3, [sp, #44]	; 0x2c
   17cbc:	cmp	r7, fp
   17cc0:	ldrhi	r3, [sp, #36]	; 0x24
   17cc4:	movhi	r2, #92	; 0x5c
   17cc8:	strbhi	r2, [r3, fp]
   17ccc:	add	fp, fp, #1
   17cd0:	cmp	fp, r7
   17cd4:	ldrcc	r3, [sp, #36]	; 0x24
   17cd8:	strbcc	r4, [r3, fp]
   17cdc:	add	fp, fp, #1
   17ce0:	ldr	r3, [sp, #40]	; 0x28
   17ce4:	cmp	r8, #0
   17ce8:	moveq	r3, #0
   17cec:	str	r3, [sp, #40]	; 0x28
   17cf0:	add	r6, r6, #1
   17cf4:	ldr	r3, [sp, #28]
   17cf8:	cmn	r3, #1
   17cfc:	beq	18288 <__assert_fail@plt+0x6dac>
   17d00:	ldr	r3, [sp, #28]
   17d04:	subs	r8, r3, r6
   17d08:	movne	r8, #1
   17d0c:	cmp	r8, #0
   17d10:	beq	1829c <__assert_fail@plt+0x6dc0>
   17d14:	ldr	r5, [sp, #48]	; 0x30
   17d18:	cmp	sl, #2
   17d1c:	moveq	r5, #0
   17d20:	andne	r5, r5, #1
   17d24:	ldr	r3, [sp, #60]	; 0x3c
   17d28:	adds	r9, r3, #0
   17d2c:	movne	r9, #1
   17d30:	ands	r2, r5, r9
   17d34:	str	r2, [sp, #56]	; 0x38
   17d38:	beq	17600 <__assert_fail@plt+0x6124>
   17d3c:	add	r4, r6, r3
   17d40:	ldr	r2, [sp, #28]
   17d44:	cmp	r3, #1
   17d48:	movls	r3, #0
   17d4c:	movhi	r3, #1
   17d50:	cmn	r2, #1
   17d54:	movne	r3, #0
   17d58:	cmp	r3, #0
   17d5c:	beq	17d6c <__assert_fail@plt+0x6890>
   17d60:	ldr	r0, [sp, #52]	; 0x34
   17d64:	bl	11380 <strlen@plt>
   17d68:	str	r0, [sp, #28]
   17d6c:	ldr	r3, [sp, #28]
   17d70:	cmp	r3, r4
   17d74:	bcc	175f8 <__assert_fail@plt+0x611c>
   17d78:	ldr	r2, [sp, #60]	; 0x3c
   17d7c:	ldr	r1, [sp, #72]	; 0x48
   17d80:	ldr	r3, [sp, #52]	; 0x34
   17d84:	add	r0, r3, r6
   17d88:	bl	11218 <memcmp@plt>
   17d8c:	cmp	r0, #0
   17d90:	bne	17818 <__assert_fail@plt+0x633c>
   17d94:	ldr	r3, [sp, #32]
   17d98:	cmp	r3, #0
   17d9c:	beq	17600 <__assert_fail@plt+0x6124>
   17da0:	mov	r8, sl
   17da4:	mov	sl, r7
   17da8:	b	183f8 <__assert_fail@plt+0x6f1c>
   17dac:	mov	r8, sl
   17db0:	mov	sl, r7
   17db4:	b	183f8 <__assert_fail@plt+0x6f1c>
   17db8:	cmp	sl, #2
   17dbc:	strne	r8, [sp, #80]	; 0x50
   17dc0:	movne	r5, #0
   17dc4:	bne	17bfc <__assert_fail@plt+0x6720>
   17dc8:	ldr	r3, [sp, #32]
   17dcc:	cmp	r3, #0
   17dd0:	bne	183e4 <__assert_fail@plt+0x6f08>
   17dd4:	ldr	r2, [sp, #76]	; 0x4c
   17dd8:	adds	r3, r7, #0
   17ddc:	movne	r3, #1
   17de0:	cmp	r2, #0
   17de4:	movne	r3, #0
   17de8:	cmp	r3, #0
   17dec:	movne	r3, #0
   17df0:	bne	17e20 <__assert_fail@plt+0x6944>
   17df4:	cmp	r7, fp
   17df8:	ldrhi	r3, [sp, #36]	; 0x24
   17dfc:	movhi	r2, #39	; 0x27
   17e00:	strbhi	r2, [r3, fp]
   17e04:	add	r3, fp, #1
   17e08:	cmp	r7, r3
   17e0c:	ldrhi	r2, [sp, #36]	; 0x24
   17e10:	movhi	r1, #92	; 0x5c
   17e14:	strbhi	r1, [r2, r3]
   17e18:	mov	r3, r7
   17e1c:	ldr	r7, [sp, #76]	; 0x4c
   17e20:	add	r2, fp, #2
   17e24:	cmp	r2, r3
   17e28:	ldrcc	r1, [sp, #36]	; 0x24
   17e2c:	movcc	r0, #39	; 0x27
   17e30:	strbcc	r0, [r1, r2]
   17e34:	add	fp, fp, #3
   17e38:	ldr	r2, [sp, #32]
   17e3c:	mov	r5, r2
   17e40:	str	r8, [sp, #80]	; 0x50
   17e44:	str	r2, [sp, #44]	; 0x2c
   17e48:	str	r7, [sp, #76]	; 0x4c
   17e4c:	mov	r7, r3
   17e50:	b	17bfc <__assert_fail@plt+0x6720>
   17e54:	ldr	r5, [sp, #84]	; 0x54
   17e58:	cmp	r5, #1
   17e5c:	beq	17e8c <__assert_fail@plt+0x69b0>
   17e60:	mov	r3, #0
   17e64:	str	r3, [sp, #104]	; 0x68
   17e68:	str	r3, [sp, #108]	; 0x6c
   17e6c:	ldr	r3, [sp, #28]
   17e70:	cmn	r3, #1
   17e74:	beq	17ec0 <__assert_fail@plt+0x69e4>
   17e78:	mov	r3, #0
   17e7c:	str	r4, [sp, #88]	; 0x58
   17e80:	str	fp, [sp, #92]	; 0x5c
   17e84:	mov	fp, r3
   17e88:	b	17fe8 <__assert_fail@plt+0x6b0c>
   17e8c:	bl	11368 <__ctype_b_loc@plt>
   17e90:	ldr	r2, [r0]
   17e94:	lsl	r3, r4, #1
   17e98:	ldrh	r8, [r2, r3]
   17e9c:	lsr	r8, r8, #14
   17ea0:	and	r8, r8, #1
   17ea4:	mov	r2, r5
   17ea8:	eor	r5, r8, #1
   17eac:	ldr	r3, [sp, #48]	; 0x30
   17eb0:	and	r5, r5, r3
   17eb4:	ands	r5, r5, #255	; 0xff
   17eb8:	beq	17bfc <__assert_fail@plt+0x6720>
   17ebc:	b	18080 <__assert_fail@plt+0x6ba4>
   17ec0:	ldr	r0, [sp, #52]	; 0x34
   17ec4:	bl	11380 <strlen@plt>
   17ec8:	str	r0, [sp, #28]
   17ecc:	b	17e78 <__assert_fail@plt+0x699c>
   17ed0:	mov	r2, fp
   17ed4:	mov	r1, r4
   17ed8:	ldr	r4, [sp, #88]	; 0x58
   17edc:	ldr	fp, [sp, #92]	; 0x5c
   17ee0:	ldr	r0, [sp, #28]
   17ee4:	cmp	r0, r5
   17ee8:	bls	180b4 <__assert_fail@plt+0x6bd8>
   17eec:	ldrb	r3, [r1]
   17ef0:	cmp	r3, #0
   17ef4:	beq	180bc <__assert_fail@plt+0x6be0>
   17ef8:	mov	r3, r1
   17efc:	add	r2, r2, #1
   17f00:	add	r1, r6, r2
   17f04:	cmp	r0, r1
   17f08:	bls	180c4 <__assert_fail@plt+0x6be8>
   17f0c:	ldrb	r1, [r3, #1]!
   17f10:	cmp	r1, #0
   17f14:	bne	17efc <__assert_fail@plt+0x6a20>
   17f18:	mov	r8, #0
   17f1c:	b	18078 <__assert_fail@plt+0x6b9c>
   17f20:	cmp	r4, r5
   17f24:	beq	17fc4 <__assert_fail@plt+0x6ae8>
   17f28:	ldrb	r3, [r4, #1]!
   17f2c:	sub	r3, r3, #91	; 0x5b
   17f30:	cmp	r3, #33	; 0x21
   17f34:	ldrls	pc, [pc, r3, lsl #2]
   17f38:	b	17f20 <__assert_fail@plt+0x6a44>
   17f3c:	strdeq	r8, [r1], -r0
   17f40:	strdeq	r8, [r1], -r0
   17f44:	andeq	r7, r1, r0, lsr #30
   17f48:	strdeq	r8, [r1], -r0
   17f4c:	andeq	r7, r1, r0, lsr #30
   17f50:	strdeq	r8, [r1], -r0
   17f54:	andeq	r7, r1, r0, lsr #30
   17f58:	andeq	r7, r1, r0, lsr #30
   17f5c:	andeq	r7, r1, r0, lsr #30
   17f60:	andeq	r7, r1, r0, lsr #30
   17f64:	andeq	r7, r1, r0, lsr #30
   17f68:	andeq	r7, r1, r0, lsr #30
   17f6c:	andeq	r7, r1, r0, lsr #30
   17f70:	andeq	r7, r1, r0, lsr #30
   17f74:	andeq	r7, r1, r0, lsr #30
   17f78:	andeq	r7, r1, r0, lsr #30
   17f7c:	andeq	r7, r1, r0, lsr #30
   17f80:	andeq	r7, r1, r0, lsr #30
   17f84:	andeq	r7, r1, r0, lsr #30
   17f88:	andeq	r7, r1, r0, lsr #30
   17f8c:	andeq	r7, r1, r0, lsr #30
   17f90:	andeq	r7, r1, r0, lsr #30
   17f94:	andeq	r7, r1, r0, lsr #30
   17f98:	andeq	r7, r1, r0, lsr #30
   17f9c:	andeq	r7, r1, r0, lsr #30
   17fa0:	andeq	r7, r1, r0, lsr #30
   17fa4:	andeq	r7, r1, r0, lsr #30
   17fa8:	andeq	r7, r1, r0, lsr #30
   17fac:	andeq	r7, r1, r0, lsr #30
   17fb0:	andeq	r7, r1, r0, lsr #30
   17fb4:	andeq	r7, r1, r0, lsr #30
   17fb8:	andeq	r7, r1, r0, lsr #30
   17fbc:	andeq	r7, r1, r0, lsr #30
   17fc0:	strdeq	r8, [r1], -r0
   17fc4:	ldr	r0, [sp, #100]	; 0x64
   17fc8:	bl	1126c <iswprint@plt>
   17fcc:	cmp	r0, #0
   17fd0:	moveq	r8, #0
   17fd4:	add	fp, fp, r9
   17fd8:	add	r0, sp, #104	; 0x68
   17fdc:	bl	11200 <mbsinit@plt>
   17fe0:	cmp	r0, #0
   17fe4:	bne	18058 <__assert_fail@plt+0x6b7c>
   17fe8:	add	r5, r6, fp
   17fec:	ldr	r3, [sp, #52]	; 0x34
   17ff0:	add	r4, r3, r5
   17ff4:	add	r3, sp, #104	; 0x68
   17ff8:	ldr	r2, [sp, #28]
   17ffc:	sub	r2, r2, r5
   18000:	mov	r1, r4
   18004:	add	r0, sp, #100	; 0x64
   18008:	bl	1a4a4 <__assert_fail@plt+0x8fc8>
   1800c:	subs	r9, r0, #0
   18010:	beq	180cc <__assert_fail@plt+0x6bf0>
   18014:	cmn	r9, #1
   18018:	beq	18068 <__assert_fail@plt+0x6b8c>
   1801c:	cmn	r9, #2
   18020:	beq	17ed0 <__assert_fail@plt+0x69f4>
   18024:	ldr	r3, [sp, #32]
   18028:	cmp	sl, #2
   1802c:	movne	r3, #0
   18030:	andeq	r3, r3, #1
   18034:	cmp	r3, #0
   18038:	beq	17fc4 <__assert_fail@plt+0x6ae8>
   1803c:	cmp	r9, #1
   18040:	bls	17fc4 <__assert_fail@plt+0x6ae8>
   18044:	sub	r3, r9, #1
   18048:	add	r5, r3, r5
   1804c:	ldr	r3, [sp, #52]	; 0x34
   18050:	add	r5, r3, r5
   18054:	b	17f28 <__assert_fail@plt+0x6a4c>
   18058:	ldr	r4, [sp, #88]	; 0x58
   1805c:	mov	r2, fp
   18060:	ldr	fp, [sp, #92]	; 0x5c
   18064:	b	18078 <__assert_fail@plt+0x6b9c>
   18068:	ldr	r4, [sp, #88]	; 0x58
   1806c:	mov	r2, fp
   18070:	ldr	fp, [sp, #92]	; 0x5c
   18074:	mov	r8, #0
   18078:	cmp	r2, #1
   1807c:	bls	17ea8 <__assert_fail@plt+0x69cc>
   18080:	add	r1, r6, r2
   18084:	ldr	ip, [sp, #64]	; 0x40
   18088:	mov	r5, #0
   1808c:	eor	r3, r8, #1
   18090:	ldr	r2, [sp, #48]	; 0x30
   18094:	and	r3, r3, r2
   18098:	uxtb	r3, r3
   1809c:	ldr	r9, [sp, #32]
   180a0:	ldr	lr, [sp, #44]	; 0x2c
   180a4:	ldr	r2, [sp, #56]	; 0x38
   180a8:	str	r8, [sp, #56]	; 0x38
   180ac:	ldr	r0, [sp, #36]	; 0x24
   180b0:	b	1814c <__assert_fail@plt+0x6c70>
   180b4:	mov	r8, #0
   180b8:	b	18078 <__assert_fail@plt+0x6b9c>
   180bc:	mov	r8, #0
   180c0:	b	18078 <__assert_fail@plt+0x6b9c>
   180c4:	mov	r8, #0
   180c8:	b	18078 <__assert_fail@plt+0x6b9c>
   180cc:	ldr	r4, [sp, #88]	; 0x58
   180d0:	mov	r2, fp
   180d4:	ldr	fp, [sp, #92]	; 0x5c
   180d8:	b	18078 <__assert_fail@plt+0x6b9c>
   180dc:	cmp	r2, #0
   180e0:	beq	180f4 <__assert_fail@plt+0x6c18>
   180e4:	cmp	r7, fp
   180e8:	movhi	r2, #92	; 0x5c
   180ec:	strbhi	r2, [r0, fp]
   180f0:	add	fp, fp, #1
   180f4:	add	r8, r6, #1
   180f8:	cmp	r1, r8
   180fc:	bls	18204 <__assert_fail@plt+0x6d28>
   18100:	eor	r2, r5, #1
   18104:	and	r2, r2, lr
   18108:	ands	r2, r2, #255	; 0xff
   1810c:	beq	18220 <__assert_fail@plt+0x6d44>
   18110:	cmp	r7, fp
   18114:	movhi	r2, #39	; 0x27
   18118:	strbhi	r2, [r0, fp]
   1811c:	add	r2, fp, #1
   18120:	cmp	r7, r2
   18124:	movhi	lr, #39	; 0x27
   18128:	strbhi	lr, [r0, r2]
   1812c:	add	fp, fp, #2
   18130:	mov	r6, r8
   18134:	mov	r2, r3
   18138:	mov	lr, r3
   1813c:	cmp	r7, fp
   18140:	strbhi	r4, [r0, fp]
   18144:	add	fp, fp, #1
   18148:	ldrb	r4, [ip, #1]!
   1814c:	cmp	r3, #0
   18150:	beq	180dc <__assert_fail@plt+0x6c00>
   18154:	cmp	r9, #0
   18158:	bne	1845c <__assert_fail@plt+0x6f80>
   1815c:	eor	r5, lr, #1
   18160:	cmp	sl, #2
   18164:	movne	r5, #0
   18168:	andeq	r5, r5, #1
   1816c:	cmp	r5, #0
   18170:	beq	181a8 <__assert_fail@plt+0x6ccc>
   18174:	cmp	r7, fp
   18178:	movhi	lr, #39	; 0x27
   1817c:	strbhi	lr, [r0, fp]
   18180:	add	lr, fp, #1
   18184:	cmp	r7, lr
   18188:	movhi	r8, #36	; 0x24
   1818c:	strbhi	r8, [r0, lr]
   18190:	add	lr, fp, #2
   18194:	cmp	r7, lr
   18198:	movhi	r8, #39	; 0x27
   1819c:	strbhi	r8, [r0, lr]
   181a0:	add	fp, fp, #3
   181a4:	mov	lr, r5
   181a8:	cmp	r7, fp
   181ac:	movhi	r5, #92	; 0x5c
   181b0:	strbhi	r5, [r0, fp]
   181b4:	add	r5, fp, #1
   181b8:	cmp	r7, r5
   181bc:	lsrhi	r8, r4, #6
   181c0:	addhi	r8, r8, #48	; 0x30
   181c4:	strbhi	r8, [r0, r5]
   181c8:	add	r8, fp, #2
   181cc:	cmp	r7, r8
   181d0:	lsrhi	r5, r4, #3
   181d4:	andhi	r5, r5, #7
   181d8:	addhi	r5, r5, #48	; 0x30
   181dc:	strbhi	r5, [r0, r8]
   181e0:	add	fp, fp, #3
   181e4:	and	r4, r4, #7
   181e8:	add	r4, r4, #48	; 0x30
   181ec:	add	r5, r6, #1
   181f0:	cmp	r1, r5
   181f4:	bls	18210 <__assert_fail@plt+0x6d34>
   181f8:	mov	r6, r5
   181fc:	mov	r5, r3
   18200:	b	1813c <__assert_fail@plt+0x6c60>
   18204:	str	lr, [sp, #44]	; 0x2c
   18208:	ldr	r8, [sp, #56]	; 0x38
   1820c:	b	17ae0 <__assert_fail@plt+0x6604>
   18210:	str	lr, [sp, #44]	; 0x2c
   18214:	ldr	r8, [sp, #56]	; 0x38
   18218:	mov	r5, r3
   1821c:	b	17ae0 <__assert_fail@plt+0x6604>
   18220:	mov	r6, r8
   18224:	b	1813c <__assert_fail@plt+0x6c60>
   18228:	mov	r5, #0
   1822c:	b	17bfc <__assert_fail@plt+0x6720>
   18230:	mov	r8, r5
   18234:	ldr	r5, [sp, #48]	; 0x30
   18238:	mov	r4, #48	; 0x30
   1823c:	b	17bfc <__assert_fail@plt+0x6720>
   18240:	ldr	r8, [sp, #32]
   18244:	mov	r4, #48	; 0x30
   18248:	b	17bfc <__assert_fail@plt+0x6720>
   1824c:	ldr	r8, [sp, #32]
   18250:	mov	r4, #48	; 0x30
   18254:	b	17bfc <__assert_fail@plt+0x6720>
   18258:	mov	r8, #0
   1825c:	mov	r5, r8
   18260:	b	17bfc <__assert_fail@plt+0x6720>
   18264:	mov	r8, #0
   18268:	mov	r5, r8
   1826c:	b	17bfc <__assert_fail@plt+0x6720>
   18270:	mov	r8, #0
   18274:	mov	r5, r8
   18278:	b	17bfc <__assert_fail@plt+0x6720>
   1827c:	mov	r8, #0
   18280:	mov	r5, r8
   18284:	b	17bfc <__assert_fail@plt+0x6720>
   18288:	ldr	r3, [sp, #52]	; 0x34
   1828c:	ldrb	r8, [r3, r6]
   18290:	adds	r8, r8, #0
   18294:	movne	r8, #1
   18298:	b	17d0c <__assert_fail@plt+0x6830>
   1829c:	cmp	sl, #2
   182a0:	movne	r3, #0
   182a4:	moveq	r3, #1
   182a8:	ldr	r1, [sp, #32]
   182ac:	mov	r2, r1
   182b0:	and	r2, r2, r3
   182b4:	cmp	fp, #0
   182b8:	movne	r2, #0
   182bc:	andeq	r2, r2, #1
   182c0:	cmp	r2, #0
   182c4:	bne	18474 <__assert_fail@plt+0x6f98>
   182c8:	eor	r2, r1, #1
   182cc:	and	r3, r3, r2
   182d0:	ldr	r1, [sp, #80]	; 0x50
   182d4:	tst	r1, r3
   182d8:	beq	18350 <__assert_fail@plt+0x6e74>
   182dc:	ldr	r3, [sp, #40]	; 0x28
   182e0:	cmp	r3, #0
   182e4:	bne	1830c <__assert_fail@plt+0x6e30>
   182e8:	ldr	r1, [sp, #76]	; 0x4c
   182ec:	clz	r3, r7
   182f0:	lsr	r3, r3, #5
   182f4:	cmp	r1, #0
   182f8:	moveq	r3, #0
   182fc:	cmp	r3, #0
   18300:	beq	18350 <__assert_fail@plt+0x6e74>
   18304:	ldr	r7, [sp, #76]	; 0x4c
   18308:	b	173a0 <__assert_fail@plt+0x5ec4>
   1830c:	ldr	r3, [sp, #168]	; 0xa8
   18310:	str	r3, [sp, #16]
   18314:	ldr	r3, [sp, #164]	; 0xa4
   18318:	str	r3, [sp, #12]
   1831c:	ldr	r3, [sp, #160]	; 0xa0
   18320:	str	r3, [sp, #8]
   18324:	ldr	r3, [sp, #156]	; 0x9c
   18328:	str	r3, [sp, #4]
   1832c:	mov	r3, #5
   18330:	str	r3, [sp]
   18334:	ldr	r3, [sp, #28]
   18338:	ldr	r2, [sp, #52]	; 0x34
   1833c:	ldr	r1, [sp, #76]	; 0x4c
   18340:	ldr	r0, [sp, #36]	; 0x24
   18344:	bl	17340 <__assert_fail@plt+0x5e64>
   18348:	mov	fp, r0
   1834c:	b	18450 <__assert_fail@plt+0x6f74>
   18350:	mov	sl, r7
   18354:	ldr	r3, [sp, #72]	; 0x48
   18358:	cmp	r3, #0
   1835c:	moveq	r2, #0
   18360:	andne	r2, r2, #1
   18364:	cmp	r2, #0
   18368:	beq	18398 <__assert_fail@plt+0x6ebc>
   1836c:	mov	r2, r3
   18370:	ldrb	r3, [r3]
   18374:	cmp	r3, #0
   18378:	beq	18398 <__assert_fail@plt+0x6ebc>
   1837c:	ldr	r1, [sp, #36]	; 0x24
   18380:	cmp	sl, fp
   18384:	strbhi	r3, [r1, fp]
   18388:	add	fp, fp, #1
   1838c:	ldrb	r3, [r2, #1]!
   18390:	cmp	r3, #0
   18394:	bne	18380 <__assert_fail@plt+0x6ea4>
   18398:	cmp	sl, fp
   1839c:	movhi	r3, #0
   183a0:	ldrhi	r2, [sp, #36]	; 0x24
   183a4:	strbhi	r3, [r2, fp]
   183a8:	b	18450 <__assert_fail@plt+0x6f74>
   183ac:	mov	r8, sl
   183b0:	mov	sl, r7
   183b4:	ldr	r3, [sp, #32]
   183b8:	str	r3, [sp, #48]	; 0x30
   183bc:	b	183f8 <__assert_fail@plt+0x6f1c>
   183c0:	mov	r8, sl
   183c4:	mov	sl, r7
   183c8:	b	183f8 <__assert_fail@plt+0x6f1c>
   183cc:	mov	r8, sl
   183d0:	mov	sl, r7
   183d4:	b	183f8 <__assert_fail@plt+0x6f1c>
   183d8:			; <UNDEFINED> instruction: 0x0001cdb8
   183dc:	andeq	ip, r1, r8, asr #27
   183e0:			; <UNDEFINED> instruction: 0x0001cdbc
   183e4:	mov	r8, sl
   183e8:	mov	sl, r7
   183ec:	b	183f8 <__assert_fail@plt+0x6f1c>
   183f0:	mov	r8, sl
   183f4:	mov	sl, r7
   183f8:	ldr	r3, [sp, #48]	; 0x30
   183fc:	cmp	r8, #2
   18400:	movne	r3, #0
   18404:	andeq	r3, r3, #1
   18408:	cmp	r3, #0
   1840c:	movne	r8, #4
   18410:	ldr	r3, [sp, #168]	; 0xa8
   18414:	str	r3, [sp, #16]
   18418:	ldr	r3, [sp, #164]	; 0xa4
   1841c:	str	r3, [sp, #12]
   18420:	mov	r3, #0
   18424:	str	r3, [sp, #8]
   18428:	ldr	r3, [sp, #156]	; 0x9c
   1842c:	bic	r3, r3, #2
   18430:	str	r3, [sp, #4]
   18434:	str	r8, [sp]
   18438:	ldr	r3, [sp, #28]
   1843c:	ldr	r2, [sp, #52]	; 0x34
   18440:	mov	r1, sl
   18444:	ldr	r0, [sp, #36]	; 0x24
   18448:	bl	17340 <__assert_fail@plt+0x5e64>
   1844c:	mov	fp, r0
   18450:	mov	r0, fp
   18454:	add	sp, sp, #116	; 0x74
   18458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1845c:	mov	r8, sl
   18460:	mov	sl, r7
   18464:	b	183f8 <__assert_fail@plt+0x6f1c>
   18468:	mov	r8, sl
   1846c:	mov	sl, r7
   18470:	b	183f8 <__assert_fail@plt+0x6f1c>
   18474:	mov	r8, sl
   18478:	mov	sl, r7
   1847c:	b	183f8 <__assert_fail@plt+0x6f1c>
   18480:	mov	r8, sl
   18484:	mov	sl, r7
   18488:	b	18410 <__assert_fail@plt+0x6f34>
   1848c:	mov	r3, #1
   18490:	str	r3, [sp, #32]
   18494:	str	r3, [sp, #48]	; 0x30
   18498:	str	r3, [sp, #60]	; 0x3c
   1849c:	ldr	r3, [pc, #-196]	; 183e0 <__assert_fail@plt+0x6f04>
   184a0:	str	r3, [sp, #72]	; 0x48
   184a4:	mov	fp, #0
   184a8:	mov	sl, #5
   184ac:	b	173fc <__assert_fail@plt+0x5f20>
   184b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184b4:	sub	sp, sp, #52	; 0x34
   184b8:	mov	r5, r0
   184bc:	str	r1, [sp, #24]
   184c0:	str	r2, [sp, #28]
   184c4:	mov	r4, r3
   184c8:	bl	113a4 <__errno_location@plt>
   184cc:	str	r0, [sp, #32]
   184d0:	ldr	r3, [r0]
   184d4:	str	r3, [sp, #36]	; 0x24
   184d8:	ldr	r3, [pc, #396]	; 1866c <__assert_fail@plt+0x7190>
   184dc:	ldr	r6, [r3]
   184e0:	cmn	r5, #-2147483647	; 0x80000001
   184e4:	movne	r3, #0
   184e8:	moveq	r3, #1
   184ec:	orrs	r3, r3, r5, lsr #31
   184f0:	bne	18630 <__assert_fail@plt+0x7154>
   184f4:	ldr	r3, [pc, #368]	; 1866c <__assert_fail@plt+0x7190>
   184f8:	ldr	r2, [r3, #4]
   184fc:	cmp	r5, r2
   18500:	blt	18568 <__assert_fail@plt+0x708c>
   18504:	str	r2, [sp, #44]	; 0x2c
   18508:	add	r3, r3, #8
   1850c:	cmp	r6, r3
   18510:	beq	18634 <__assert_fail@plt+0x7158>
   18514:	sub	r2, r5, r2
   18518:	mov	r3, #8
   1851c:	str	r3, [sp]
   18520:	mvn	r3, #-2147483648	; 0x80000000
   18524:	add	r2, r2, #1
   18528:	add	r1, sp, #44	; 0x2c
   1852c:	mov	r0, r6
   18530:	bl	19488 <__assert_fail@plt+0x7fac>
   18534:	mov	r6, r0
   18538:	ldr	r3, [pc, #300]	; 1866c <__assert_fail@plt+0x7190>
   1853c:	str	r0, [r3]
   18540:	ldr	r7, [pc, #292]	; 1866c <__assert_fail@plt+0x7190>
   18544:	ldr	r0, [r7, #4]
   18548:	ldr	r2, [sp, #44]	; 0x2c
   1854c:	sub	r2, r2, r0
   18550:	lsl	r2, r2, #3
   18554:	mov	r1, #0
   18558:	add	r0, r6, r0, lsl #3
   1855c:	bl	113d4 <memset@plt>
   18560:	ldr	r3, [sp, #44]	; 0x2c
   18564:	str	r3, [r7, #4]
   18568:	add	fp, r6, r5, lsl #3
   1856c:	ldr	r8, [r6, r5, lsl #3]
   18570:	ldr	r7, [fp, #4]
   18574:	ldr	r9, [r4, #4]
   18578:	orr	r9, r9, #1
   1857c:	add	sl, r4, #8
   18580:	ldr	r3, [r4, #44]	; 0x2c
   18584:	str	r3, [sp, #16]
   18588:	ldr	r3, [r4, #40]	; 0x28
   1858c:	str	r3, [sp, #12]
   18590:	str	sl, [sp, #8]
   18594:	str	r9, [sp, #4]
   18598:	ldr	r3, [r4]
   1859c:	str	r3, [sp]
   185a0:	ldr	r3, [sp, #28]
   185a4:	ldr	r2, [sp, #24]
   185a8:	mov	r1, r8
   185ac:	mov	r0, r7
   185b0:	bl	17340 <__assert_fail@plt+0x5e64>
   185b4:	cmp	r8, r0
   185b8:	bhi	18618 <__assert_fail@plt+0x713c>
   185bc:	add	r8, r0, #1
   185c0:	str	r8, [r6, r5, lsl #3]
   185c4:	ldr	r3, [pc, #164]	; 18670 <__assert_fail@plt+0x7194>
   185c8:	cmp	r7, r3
   185cc:	beq	185d8 <__assert_fail@plt+0x70fc>
   185d0:	mov	r0, r7
   185d4:	bl	1a418 <__assert_fail@plt+0x8f3c>
   185d8:	mov	r0, r8
   185dc:	bl	19304 <__assert_fail@plt+0x7e28>
   185e0:	mov	r7, r0
   185e4:	str	r0, [fp, #4]
   185e8:	ldr	r3, [r4, #44]	; 0x2c
   185ec:	str	r3, [sp, #16]
   185f0:	ldr	r3, [r4, #40]	; 0x28
   185f4:	str	r3, [sp, #12]
   185f8:	str	sl, [sp, #8]
   185fc:	str	r9, [sp, #4]
   18600:	ldr	r3, [r4]
   18604:	str	r3, [sp]
   18608:	ldr	r3, [sp, #28]
   1860c:	ldr	r2, [sp, #24]
   18610:	mov	r1, r8
   18614:	bl	17340 <__assert_fail@plt+0x5e64>
   18618:	ldr	r3, [sp, #32]
   1861c:	ldr	r2, [sp, #36]	; 0x24
   18620:	str	r2, [r3]
   18624:	mov	r0, r7
   18628:	add	sp, sp, #52	; 0x34
   1862c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18630:	bl	114ac <abort@plt>
   18634:	sub	r2, r5, r2
   18638:	mov	r3, #8
   1863c:	str	r3, [sp]
   18640:	mvn	r3, #-2147483648	; 0x80000000
   18644:	add	r2, r2, #1
   18648:	add	r1, sp, #44	; 0x2c
   1864c:	mov	r0, #0
   18650:	bl	19488 <__assert_fail@plt+0x7fac>
   18654:	mov	r6, r0
   18658:	ldr	r3, [pc, #12]	; 1866c <__assert_fail@plt+0x7190>
   1865c:	str	r0, [r3], #8
   18660:	ldm	r3, {r0, r1}
   18664:	stm	r6, {r0, r1}
   18668:	b	18540 <__assert_fail@plt+0x7064>
   1866c:	andeq	lr, r2, r0, lsl #3
   18670:	andeq	lr, r2, r0, ror #8
   18674:	push	{r4, r5, r6, lr}
   18678:	mov	r4, r0
   1867c:	bl	113a4 <__errno_location@plt>
   18680:	mov	r5, r0
   18684:	ldr	r6, [r0]
   18688:	cmp	r4, #0
   1868c:	ldr	r3, [pc, #20]	; 186a8 <__assert_fail@plt+0x71cc>
   18690:	moveq	r4, r3
   18694:	mov	r1, #48	; 0x30
   18698:	mov	r0, r4
   1869c:	bl	197f0 <__assert_fail@plt+0x8314>
   186a0:	str	r6, [r5]
   186a4:	pop	{r4, r5, r6, pc}
   186a8:	andeq	lr, r2, r0, ror #10
   186ac:	subs	r3, r0, #0
   186b0:	ldr	r2, [pc, #8]	; 186c0 <__assert_fail@plt+0x71e4>
   186b4:	moveq	r3, r2
   186b8:	ldr	r0, [r3]
   186bc:	bx	lr
   186c0:	andeq	lr, r2, r0, ror #10
   186c4:	subs	r3, r0, #0
   186c8:	ldr	r2, [pc, #8]	; 186d8 <__assert_fail@plt+0x71fc>
   186cc:	moveq	r3, r2
   186d0:	str	r1, [r3]
   186d4:	bx	lr
   186d8:	andeq	lr, r2, r0, ror #10
   186dc:	push	{lr}		; (str lr, [sp, #-4]!)
   186e0:	subs	r3, r0, #0
   186e4:	ldr	r0, [pc, #44]	; 18718 <__assert_fail@plt+0x723c>
   186e8:	moveq	r3, r0
   186ec:	add	r3, r3, #8
   186f0:	lsr	lr, r1, #5
   186f4:	and	r1, r1, #31
   186f8:	ldr	ip, [r3, lr, lsl #2]
   186fc:	lsr	r0, ip, r1
   18700:	eor	r2, r2, r0
   18704:	and	r2, r2, #1
   18708:	eor	r1, ip, r2, lsl r1
   1870c:	str	r1, [r3, lr, lsl #2]
   18710:	and	r0, r0, #1
   18714:	pop	{pc}		; (ldr pc, [sp], #4)
   18718:	andeq	lr, r2, r0, ror #10
   1871c:	subs	r3, r0, #0
   18720:	ldr	r2, [pc, #12]	; 18734 <__assert_fail@plt+0x7258>
   18724:	moveq	r3, r2
   18728:	ldr	r0, [r3, #4]
   1872c:	str	r1, [r3, #4]
   18730:	bx	lr
   18734:	andeq	lr, r2, r0, ror #10
   18738:	subs	r3, r0, #0
   1873c:	ldr	r0, [pc, #40]	; 1876c <__assert_fail@plt+0x7290>
   18740:	moveq	r3, r0
   18744:	mov	r0, #10
   18748:	str	r0, [r3]
   1874c:	cmp	r2, #0
   18750:	cmpne	r1, #0
   18754:	beq	18764 <__assert_fail@plt+0x7288>
   18758:	str	r1, [r3, #40]	; 0x28
   1875c:	str	r2, [r3, #44]	; 0x2c
   18760:	bx	lr
   18764:	push	{r4, lr}
   18768:	bl	114ac <abort@plt>
   1876c:	andeq	lr, r2, r0, ror #10
   18770:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   18774:	sub	sp, sp, #24
   18778:	mov	r7, r0
   1877c:	mov	r8, r1
   18780:	mov	r9, r2
   18784:	mov	sl, r3
   18788:	ldr	r4, [sp, #56]	; 0x38
   1878c:	cmp	r4, #0
   18790:	ldr	r3, [pc, #84]	; 187ec <__assert_fail@plt+0x7310>
   18794:	moveq	r4, r3
   18798:	bl	113a4 <__errno_location@plt>
   1879c:	mov	r5, r0
   187a0:	ldr	r6, [r0]
   187a4:	ldr	r3, [r4, #44]	; 0x2c
   187a8:	str	r3, [sp, #16]
   187ac:	ldr	r3, [r4, #40]	; 0x28
   187b0:	str	r3, [sp, #12]
   187b4:	add	r3, r4, #8
   187b8:	str	r3, [sp, #8]
   187bc:	ldr	r3, [r4, #4]
   187c0:	str	r3, [sp, #4]
   187c4:	ldr	r3, [r4]
   187c8:	str	r3, [sp]
   187cc:	mov	r3, sl
   187d0:	mov	r2, r9
   187d4:	mov	r1, r8
   187d8:	mov	r0, r7
   187dc:	bl	17340 <__assert_fail@plt+0x5e64>
   187e0:	str	r6, [r5]
   187e4:	add	sp, sp, #24
   187e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   187ec:	andeq	lr, r2, r0, ror #10
   187f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f4:	sub	sp, sp, #44	; 0x2c
   187f8:	str	r0, [sp, #28]
   187fc:	str	r1, [sp, #32]
   18800:	mov	r6, r2
   18804:	subs	r4, r3, #0
   18808:	ldr	r3, [pc, #172]	; 188bc <__assert_fail@plt+0x73e0>
   1880c:	moveq	r4, r3
   18810:	bl	113a4 <__errno_location@plt>
   18814:	mov	r7, r0
   18818:	ldr	fp, [r0]
   1881c:	ldr	r5, [r4, #4]
   18820:	cmp	r6, #0
   18824:	orreq	r5, r5, #1
   18828:	add	r9, r4, #8
   1882c:	ldr	r3, [r4, #44]	; 0x2c
   18830:	str	r3, [sp, #16]
   18834:	ldr	r3, [r4, #40]	; 0x28
   18838:	str	r3, [sp, #12]
   1883c:	str	r9, [sp, #8]
   18840:	str	r5, [sp, #4]
   18844:	ldr	r3, [r4]
   18848:	str	r3, [sp]
   1884c:	ldr	r3, [sp, #32]
   18850:	ldr	r2, [sp, #28]
   18854:	mov	r1, #0
   18858:	mov	r0, r1
   1885c:	bl	17340 <__assert_fail@plt+0x5e64>
   18860:	mov	sl, r0
   18864:	add	r8, r0, #1
   18868:	mov	r0, r8
   1886c:	bl	19304 <__assert_fail@plt+0x7e28>
   18870:	str	r0, [sp, #36]	; 0x24
   18874:	ldr	r3, [r4, #44]	; 0x2c
   18878:	str	r3, [sp, #16]
   1887c:	ldr	r3, [r4, #40]	; 0x28
   18880:	str	r3, [sp, #12]
   18884:	str	r9, [sp, #8]
   18888:	str	r5, [sp, #4]
   1888c:	ldr	r3, [r4]
   18890:	str	r3, [sp]
   18894:	ldr	r3, [sp, #32]
   18898:	ldr	r2, [sp, #28]
   1889c:	mov	r1, r8
   188a0:	bl	17340 <__assert_fail@plt+0x5e64>
   188a4:	str	fp, [r7]
   188a8:	cmp	r6, #0
   188ac:	strne	sl, [r6]
   188b0:	ldr	r0, [sp, #36]	; 0x24
   188b4:	add	sp, sp, #44	; 0x2c
   188b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188bc:	andeq	lr, r2, r0, ror #10
   188c0:	push	{r4, lr}
   188c4:	mov	r3, r2
   188c8:	mov	r2, #0
   188cc:	bl	187f0 <__assert_fail@plt+0x7314>
   188d0:	pop	{r4, pc}
   188d4:	push	{r4, r5, r6, r7, r8, lr}
   188d8:	ldr	r3, [pc, #140]	; 1896c <__assert_fail@plt+0x7490>
   188dc:	ldr	r7, [r3]
   188e0:	ldr	r3, [r3, #4]
   188e4:	cmp	r3, #1
   188e8:	ble	18914 <__assert_fail@plt+0x7438>
   188ec:	mov	r5, r7
   188f0:	mov	r4, #1
   188f4:	ldr	r6, [pc, #112]	; 1896c <__assert_fail@plt+0x7490>
   188f8:	ldr	r0, [r5, #12]
   188fc:	bl	1a418 <__assert_fail@plt+0x8f3c>
   18900:	add	r4, r4, #1
   18904:	add	r5, r5, #8
   18908:	ldr	r3, [r6, #4]
   1890c:	cmp	r3, r4
   18910:	bgt	188f8 <__assert_fail@plt+0x741c>
   18914:	ldr	r0, [r7, #4]
   18918:	ldr	r3, [pc, #80]	; 18970 <__assert_fail@plt+0x7494>
   1891c:	cmp	r0, r3
   18920:	beq	1893c <__assert_fail@plt+0x7460>
   18924:	bl	1a418 <__assert_fail@plt+0x8f3c>
   18928:	ldr	r3, [pc, #60]	; 1896c <__assert_fail@plt+0x7490>
   1892c:	mov	r2, #256	; 0x100
   18930:	str	r2, [r3, #8]
   18934:	ldr	r2, [pc, #52]	; 18970 <__assert_fail@plt+0x7494>
   18938:	str	r2, [r3, #12]
   1893c:	ldr	r3, [pc, #48]	; 18974 <__assert_fail@plt+0x7498>
   18940:	cmp	r7, r3
   18944:	beq	1895c <__assert_fail@plt+0x7480>
   18948:	mov	r0, r7
   1894c:	bl	1a418 <__assert_fail@plt+0x8f3c>
   18950:	ldr	r3, [pc, #20]	; 1896c <__assert_fail@plt+0x7490>
   18954:	add	r2, r3, #8
   18958:	str	r2, [r3]
   1895c:	mov	r2, #1
   18960:	ldr	r3, [pc, #4]	; 1896c <__assert_fail@plt+0x7490>
   18964:	str	r2, [r3, #4]
   18968:	pop	{r4, r5, r6, r7, r8, pc}
   1896c:	andeq	lr, r2, r0, lsl #3
   18970:	andeq	lr, r2, r0, ror #8
   18974:	andeq	lr, r2, r8, lsl #3
   18978:	push	{r4, lr}
   1897c:	ldr	r3, [pc, #8]	; 1898c <__assert_fail@plt+0x74b0>
   18980:	mvn	r2, #0
   18984:	bl	184b0 <__assert_fail@plt+0x6fd4>
   18988:	pop	{r4, pc}
   1898c:	andeq	lr, r2, r0, ror #10
   18990:	push	{r4, lr}
   18994:	ldr	r3, [pc, #4]	; 189a0 <__assert_fail@plt+0x74c4>
   18998:	bl	184b0 <__assert_fail@plt+0x6fd4>
   1899c:	pop	{r4, pc}
   189a0:	andeq	lr, r2, r0, ror #10
   189a4:	push	{r4, lr}
   189a8:	mov	r1, r0
   189ac:	mov	r0, #0
   189b0:	bl	18978 <__assert_fail@plt+0x749c>
   189b4:	pop	{r4, pc}
   189b8:	push	{r4, lr}
   189bc:	mov	r2, r1
   189c0:	mov	r1, r0
   189c4:	mov	r0, #0
   189c8:	bl	18990 <__assert_fail@plt+0x74b4>
   189cc:	pop	{r4, pc}
   189d0:	push	{r4, r5, lr}
   189d4:	sub	sp, sp, #52	; 0x34
   189d8:	mov	r4, r0
   189dc:	mov	r5, r2
   189e0:	mov	r0, sp
   189e4:	bl	171d8 <__assert_fail@plt+0x5cfc>
   189e8:	mov	r3, sp
   189ec:	mvn	r2, #0
   189f0:	mov	r1, r5
   189f4:	mov	r0, r4
   189f8:	bl	184b0 <__assert_fail@plt+0x6fd4>
   189fc:	add	sp, sp, #52	; 0x34
   18a00:	pop	{r4, r5, pc}
   18a04:	push	{r4, r5, r6, lr}
   18a08:	sub	sp, sp, #48	; 0x30
   18a0c:	mov	r4, r0
   18a10:	mov	r5, r2
   18a14:	mov	r6, r3
   18a18:	mov	r0, sp
   18a1c:	bl	171d8 <__assert_fail@plt+0x5cfc>
   18a20:	mov	r3, sp
   18a24:	mov	r2, r6
   18a28:	mov	r1, r5
   18a2c:	mov	r0, r4
   18a30:	bl	184b0 <__assert_fail@plt+0x6fd4>
   18a34:	add	sp, sp, #48	; 0x30
   18a38:	pop	{r4, r5, r6, pc}
   18a3c:	push	{r4, lr}
   18a40:	mov	r2, r1
   18a44:	mov	r1, r0
   18a48:	mov	r0, #0
   18a4c:	bl	189d0 <__assert_fail@plt+0x74f4>
   18a50:	pop	{r4, pc}
   18a54:	push	{r4, lr}
   18a58:	mov	r3, r2
   18a5c:	mov	r2, r1
   18a60:	mov	r1, r0
   18a64:	mov	r0, #0
   18a68:	bl	18a04 <__assert_fail@plt+0x7528>
   18a6c:	pop	{r4, pc}
   18a70:	push	{r4, r5, r6, lr}
   18a74:	sub	sp, sp, #48	; 0x30
   18a78:	mov	r4, r0
   18a7c:	mov	r5, r1
   18a80:	mov	r6, r2
   18a84:	mov	ip, sp
   18a88:	ldr	lr, [pc, #64]	; 18ad0 <__assert_fail@plt+0x75f4>
   18a8c:	ldm	lr!, {r0, r1, r2, r3}
   18a90:	stmia	ip!, {r0, r1, r2, r3}
   18a94:	ldm	lr!, {r0, r1, r2, r3}
   18a98:	stmia	ip!, {r0, r1, r2, r3}
   18a9c:	ldm	lr, {r0, r1, r2, r3}
   18aa0:	stm	ip, {r0, r1, r2, r3}
   18aa4:	mov	r2, #1
   18aa8:	mov	r1, r6
   18aac:	mov	r0, sp
   18ab0:	bl	186dc <__assert_fail@plt+0x7200>
   18ab4:	mov	r3, sp
   18ab8:	mov	r2, r5
   18abc:	mov	r1, r4
   18ac0:	mov	r0, #0
   18ac4:	bl	184b0 <__assert_fail@plt+0x6fd4>
   18ac8:	add	sp, sp, #48	; 0x30
   18acc:	pop	{r4, r5, r6, pc}
   18ad0:	andeq	lr, r2, r0, ror #10
   18ad4:	push	{r4, lr}
   18ad8:	mov	r2, r1
   18adc:	mvn	r1, #0
   18ae0:	bl	18a70 <__assert_fail@plt+0x7594>
   18ae4:	pop	{r4, pc}
   18ae8:	push	{r4, lr}
   18aec:	mov	r1, #58	; 0x3a
   18af0:	bl	18ad4 <__assert_fail@plt+0x75f8>
   18af4:	pop	{r4, pc}
   18af8:	push	{r4, lr}
   18afc:	mov	r2, #58	; 0x3a
   18b00:	bl	18a70 <__assert_fail@plt+0x7594>
   18b04:	pop	{r4, pc}
   18b08:	push	{r4, r5, lr}
   18b0c:	sub	sp, sp, #100	; 0x64
   18b10:	mov	r4, r0
   18b14:	mov	r5, r2
   18b18:	mov	r0, sp
   18b1c:	bl	171d8 <__assert_fail@plt+0x5cfc>
   18b20:	add	lr, sp, #48	; 0x30
   18b24:	mov	ip, sp
   18b28:	ldm	ip!, {r0, r1, r2, r3}
   18b2c:	stmia	lr!, {r0, r1, r2, r3}
   18b30:	ldm	ip!, {r0, r1, r2, r3}
   18b34:	stmia	lr!, {r0, r1, r2, r3}
   18b38:	ldm	ip, {r0, r1, r2, r3}
   18b3c:	stm	lr, {r0, r1, r2, r3}
   18b40:	mov	r2, #1
   18b44:	mov	r1, #58	; 0x3a
   18b48:	add	r0, sp, #48	; 0x30
   18b4c:	bl	186dc <__assert_fail@plt+0x7200>
   18b50:	add	r3, sp, #48	; 0x30
   18b54:	mvn	r2, #0
   18b58:	mov	r1, r5
   18b5c:	mov	r0, r4
   18b60:	bl	184b0 <__assert_fail@plt+0x6fd4>
   18b64:	add	sp, sp, #100	; 0x64
   18b68:	pop	{r4, r5, pc}
   18b6c:	push	{r4, r5, r6, r7, lr}
   18b70:	sub	sp, sp, #52	; 0x34
   18b74:	mov	r4, r0
   18b78:	mov	r6, r1
   18b7c:	mov	r7, r2
   18b80:	mov	r5, r3
   18b84:	mov	ip, sp
   18b88:	ldr	lr, [pc, #64]	; 18bd0 <__assert_fail@plt+0x76f4>
   18b8c:	ldm	lr!, {r0, r1, r2, r3}
   18b90:	stmia	ip!, {r0, r1, r2, r3}
   18b94:	ldm	lr!, {r0, r1, r2, r3}
   18b98:	stmia	ip!, {r0, r1, r2, r3}
   18b9c:	ldm	lr, {r0, r1, r2, r3}
   18ba0:	stm	ip, {r0, r1, r2, r3}
   18ba4:	mov	r2, r7
   18ba8:	mov	r1, r6
   18bac:	mov	r0, sp
   18bb0:	bl	18738 <__assert_fail@plt+0x725c>
   18bb4:	mov	r3, sp
   18bb8:	ldr	r2, [sp, #72]	; 0x48
   18bbc:	mov	r1, r5
   18bc0:	mov	r0, r4
   18bc4:	bl	184b0 <__assert_fail@plt+0x6fd4>
   18bc8:	add	sp, sp, #52	; 0x34
   18bcc:	pop	{r4, r5, r6, r7, pc}
   18bd0:	andeq	lr, r2, r0, ror #10
   18bd4:	push	{lr}		; (str lr, [sp, #-4]!)
   18bd8:	sub	sp, sp, #12
   18bdc:	mvn	ip, #0
   18be0:	str	ip, [sp]
   18be4:	bl	18b6c <__assert_fail@plt+0x7690>
   18be8:	add	sp, sp, #12
   18bec:	pop	{pc}		; (ldr pc, [sp], #4)
   18bf0:	push	{r4, lr}
   18bf4:	mov	r3, r2
   18bf8:	mov	r2, r1
   18bfc:	mov	r1, r0
   18c00:	mov	r0, #0
   18c04:	bl	18bd4 <__assert_fail@plt+0x76f8>
   18c08:	pop	{r4, pc}
   18c0c:	push	{lr}		; (str lr, [sp, #-4]!)
   18c10:	sub	sp, sp, #12
   18c14:	str	r3, [sp]
   18c18:	mov	r3, r2
   18c1c:	mov	r2, r1
   18c20:	mov	r1, r0
   18c24:	mov	r0, #0
   18c28:	bl	18b6c <__assert_fail@plt+0x7690>
   18c2c:	add	sp, sp, #12
   18c30:	pop	{pc}		; (ldr pc, [sp], #4)
   18c34:	push	{r4, lr}
   18c38:	ldr	r3, [pc, #4]	; 18c44 <__assert_fail@plt+0x7768>
   18c3c:	bl	184b0 <__assert_fail@plt+0x6fd4>
   18c40:	pop	{r4, pc}
   18c44:	muleq	r2, r0, r1
   18c48:	push	{r4, lr}
   18c4c:	mov	r2, r1
   18c50:	mov	r1, r0
   18c54:	mov	r0, #0
   18c58:	bl	18c34 <__assert_fail@plt+0x7758>
   18c5c:	pop	{r4, pc}
   18c60:	push	{r4, lr}
   18c64:	mvn	r2, #0
   18c68:	bl	18c34 <__assert_fail@plt+0x7758>
   18c6c:	pop	{r4, pc}
   18c70:	push	{r4, lr}
   18c74:	mov	r1, r0
   18c78:	mov	r0, #0
   18c7c:	bl	18c60 <__assert_fail@plt+0x7784>
   18c80:	pop	{r4, pc}
   18c84:	push	{r4, r5, r6, r7, r8, lr}
   18c88:	sub	sp, sp, #8
   18c8c:	mov	r6, r0
   18c90:	mov	r7, r1
   18c94:	mov	r5, r2
   18c98:	mov	r8, r3
   18c9c:	ldr	r1, [sp, #36]	; 0x24
   18ca0:	ldr	r0, [sp, #32]
   18ca4:	bl	19f10 <__assert_fail@plt+0x8a34>
   18ca8:	subs	r4, r0, #0
   18cac:	beq	18d00 <__assert_fail@plt+0x7824>
   18cb0:	cmp	r5, #0
   18cb4:	beq	18ce8 <__assert_fail@plt+0x780c>
   18cb8:	str	r4, [sp, #4]
   18cbc:	ldr	r3, [pc, #104]	; 18d2c <__assert_fail@plt+0x7850>
   18cc0:	str	r3, [sp]
   18cc4:	mov	r3, r8
   18cc8:	mov	r2, r5
   18ccc:	mov	r1, r7
   18cd0:	mov	r0, r6
   18cd4:	bl	11308 <error_at_line@plt>
   18cd8:	mov	r0, r4
   18cdc:	bl	1a418 <__assert_fail@plt+0x8f3c>
   18ce0:	add	sp, sp, #8
   18ce4:	pop	{r4, r5, r6, r7, r8, pc}
   18ce8:	mov	r3, r4
   18cec:	ldr	r2, [pc, #56]	; 18d2c <__assert_fail@plt+0x7850>
   18cf0:	mov	r1, r7
   18cf4:	mov	r0, r6
   18cf8:	bl	112d8 <error@plt>
   18cfc:	b	18cd8 <__assert_fail@plt+0x77fc>
   18d00:	bl	113a4 <__errno_location@plt>
   18d04:	ldr	r4, [r0]
   18d08:	mov	r2, #5
   18d0c:	ldr	r1, [pc, #28]	; 18d30 <__assert_fail@plt+0x7854>
   18d10:	mov	r0, #0
   18d14:	bl	11230 <dcgettext@plt>
   18d18:	mov	r2, r0
   18d1c:	mov	r1, r4
   18d20:	mov	r0, #0
   18d24:	bl	112d8 <error@plt>
   18d28:	bl	114ac <abort@plt>
   18d2c:	andeq	ip, r1, ip, lsl #13
   18d30:	andeq	ip, r1, r0, lsr lr
   18d34:	push	{lr}		; (str lr, [sp, #-4]!)
   18d38:	sub	sp, sp, #12
   18d3c:	str	r3, [sp, #4]
   18d40:	str	r2, [sp]
   18d44:	mov	r3, #0
   18d48:	mov	r2, r3
   18d4c:	bl	18c84 <__assert_fail@plt+0x77a8>
   18d50:	add	sp, sp, #12
   18d54:	pop	{pc}		; (ldr pc, [sp], #4)
   18d58:	push	{r4, r5, r6, lr}
   18d5c:	sub	sp, sp, #32
   18d60:	mov	r4, r0
   18d64:	ldr	r5, [sp, #48]	; 0x30
   18d68:	ldr	r6, [sp, #52]	; 0x34
   18d6c:	cmp	r1, #0
   18d70:	beq	18e28 <__assert_fail@plt+0x794c>
   18d74:	str	r3, [sp, #4]
   18d78:	str	r2, [sp]
   18d7c:	mov	r3, r1
   18d80:	ldr	r2, [pc, #940]	; 19134 <__assert_fail@plt+0x7c58>
   18d84:	mov	r1, #1
   18d88:	bl	11404 <__fprintf_chk@plt>
   18d8c:	mov	r2, #5
   18d90:	ldr	r1, [pc, #928]	; 19138 <__assert_fail@plt+0x7c5c>
   18d94:	mov	r0, #0
   18d98:	bl	11230 <dcgettext@plt>
   18d9c:	ldr	r3, [pc, #920]	; 1913c <__assert_fail@plt+0x7c60>
   18da0:	str	r3, [sp]
   18da4:	mov	r3, r0
   18da8:	ldr	r2, [pc, #912]	; 19140 <__assert_fail@plt+0x7c64>
   18dac:	mov	r1, #1
   18db0:	mov	r0, r4
   18db4:	bl	11404 <__fprintf_chk@plt>
   18db8:	mov	r1, r4
   18dbc:	mov	r0, #10
   18dc0:	bl	11224 <fputc_unlocked@plt>
   18dc4:	mov	r2, #5
   18dc8:	ldr	r1, [pc, #884]	; 19144 <__assert_fail@plt+0x7c68>
   18dcc:	mov	r0, #0
   18dd0:	bl	11230 <dcgettext@plt>
   18dd4:	ldr	r3, [pc, #876]	; 19148 <__assert_fail@plt+0x7c6c>
   18dd8:	mov	r2, r0
   18ddc:	mov	r1, #1
   18de0:	mov	r0, r4
   18de4:	bl	11404 <__fprintf_chk@plt>
   18de8:	mov	r1, r4
   18dec:	mov	r0, #10
   18df0:	bl	11224 <fputc_unlocked@plt>
   18df4:	cmp	r6, #9
   18df8:	ldrls	pc, [pc, r6, lsl #2]
   18dfc:	b	190cc <__assert_fail@plt+0x7bf0>
   18e00:	andeq	r8, r1, r4, ror #28
   18e04:	andeq	r8, r1, r0, asr #28
   18e08:	andeq	r8, r1, ip, ror #28
   18e0c:	muleq	r1, ip, lr
   18e10:	ldrdeq	r8, [r1], -r4
   18e14:	andeq	r8, r1, r4, lsl pc
   18e18:	andeq	r8, r1, ip, asr pc
   18e1c:	andeq	r8, r1, ip, lsr #31
   18e20:	andeq	r9, r1, r4
   18e24:	andeq	r9, r1, r4, rrx
   18e28:	str	r3, [sp]
   18e2c:	mov	r3, r2
   18e30:	ldr	r2, [pc, #788]	; 1914c <__assert_fail@plt+0x7c70>
   18e34:	mov	r1, #1
   18e38:	bl	11404 <__fprintf_chk@plt>
   18e3c:	b	18d8c <__assert_fail@plt+0x78b0>
   18e40:	mov	r2, #5
   18e44:	ldr	r1, [pc, #772]	; 19150 <__assert_fail@plt+0x7c74>
   18e48:	mov	r0, #0
   18e4c:	bl	11230 <dcgettext@plt>
   18e50:	ldr	r3, [r5]
   18e54:	mov	r2, r0
   18e58:	mov	r1, #1
   18e5c:	mov	r0, r4
   18e60:	bl	11404 <__fprintf_chk@plt>
   18e64:	add	sp, sp, #32
   18e68:	pop	{r4, r5, r6, pc}
   18e6c:	mov	r2, #5
   18e70:	ldr	r1, [pc, #732]	; 19154 <__assert_fail@plt+0x7c78>
   18e74:	mov	r0, #0
   18e78:	bl	11230 <dcgettext@plt>
   18e7c:	ldr	r3, [r5]
   18e80:	ldr	r2, [r5, #4]
   18e84:	str	r2, [sp]
   18e88:	mov	r2, r0
   18e8c:	mov	r1, #1
   18e90:	mov	r0, r4
   18e94:	bl	11404 <__fprintf_chk@plt>
   18e98:	b	18e64 <__assert_fail@plt+0x7988>
   18e9c:	mov	r2, #5
   18ea0:	ldr	r1, [pc, #688]	; 19158 <__assert_fail@plt+0x7c7c>
   18ea4:	mov	r0, #0
   18ea8:	bl	11230 <dcgettext@plt>
   18eac:	ldr	r3, [r5]
   18eb0:	ldr	r2, [r5, #8]
   18eb4:	str	r2, [sp, #4]
   18eb8:	ldr	r2, [r5, #4]
   18ebc:	str	r2, [sp]
   18ec0:	mov	r2, r0
   18ec4:	mov	r1, #1
   18ec8:	mov	r0, r4
   18ecc:	bl	11404 <__fprintf_chk@plt>
   18ed0:	b	18e64 <__assert_fail@plt+0x7988>
   18ed4:	mov	r2, #5
   18ed8:	ldr	r1, [pc, #636]	; 1915c <__assert_fail@plt+0x7c80>
   18edc:	mov	r0, #0
   18ee0:	bl	11230 <dcgettext@plt>
   18ee4:	ldr	r3, [r5]
   18ee8:	ldr	r2, [r5, #12]
   18eec:	str	r2, [sp, #8]
   18ef0:	ldr	r2, [r5, #8]
   18ef4:	str	r2, [sp, #4]
   18ef8:	ldr	r2, [r5, #4]
   18efc:	str	r2, [sp]
   18f00:	mov	r2, r0
   18f04:	mov	r1, #1
   18f08:	mov	r0, r4
   18f0c:	bl	11404 <__fprintf_chk@plt>
   18f10:	b	18e64 <__assert_fail@plt+0x7988>
   18f14:	mov	r2, #5
   18f18:	ldr	r1, [pc, #576]	; 19160 <__assert_fail@plt+0x7c84>
   18f1c:	mov	r0, #0
   18f20:	bl	11230 <dcgettext@plt>
   18f24:	ldr	r3, [r5]
   18f28:	ldr	r2, [r5, #16]
   18f2c:	str	r2, [sp, #12]
   18f30:	ldr	r2, [r5, #12]
   18f34:	str	r2, [sp, #8]
   18f38:	ldr	r2, [r5, #8]
   18f3c:	str	r2, [sp, #4]
   18f40:	ldr	r2, [r5, #4]
   18f44:	str	r2, [sp]
   18f48:	mov	r2, r0
   18f4c:	mov	r1, #1
   18f50:	mov	r0, r4
   18f54:	bl	11404 <__fprintf_chk@plt>
   18f58:	b	18e64 <__assert_fail@plt+0x7988>
   18f5c:	mov	r2, #5
   18f60:	ldr	r1, [pc, #508]	; 19164 <__assert_fail@plt+0x7c88>
   18f64:	mov	r0, #0
   18f68:	bl	11230 <dcgettext@plt>
   18f6c:	ldr	r3, [r5]
   18f70:	ldr	r2, [r5, #20]
   18f74:	str	r2, [sp, #16]
   18f78:	ldr	r2, [r5, #16]
   18f7c:	str	r2, [sp, #12]
   18f80:	ldr	r2, [r5, #12]
   18f84:	str	r2, [sp, #8]
   18f88:	ldr	r2, [r5, #8]
   18f8c:	str	r2, [sp, #4]
   18f90:	ldr	r2, [r5, #4]
   18f94:	str	r2, [sp]
   18f98:	mov	r2, r0
   18f9c:	mov	r1, #1
   18fa0:	mov	r0, r4
   18fa4:	bl	11404 <__fprintf_chk@plt>
   18fa8:	b	18e64 <__assert_fail@plt+0x7988>
   18fac:	mov	r2, #5
   18fb0:	ldr	r1, [pc, #432]	; 19168 <__assert_fail@plt+0x7c8c>
   18fb4:	mov	r0, #0
   18fb8:	bl	11230 <dcgettext@plt>
   18fbc:	ldr	r3, [r5]
   18fc0:	ldr	r2, [r5, #24]
   18fc4:	str	r2, [sp, #20]
   18fc8:	ldr	r2, [r5, #20]
   18fcc:	str	r2, [sp, #16]
   18fd0:	ldr	r2, [r5, #16]
   18fd4:	str	r2, [sp, #12]
   18fd8:	ldr	r2, [r5, #12]
   18fdc:	str	r2, [sp, #8]
   18fe0:	ldr	r2, [r5, #8]
   18fe4:	str	r2, [sp, #4]
   18fe8:	ldr	r2, [r5, #4]
   18fec:	str	r2, [sp]
   18ff0:	mov	r2, r0
   18ff4:	mov	r1, #1
   18ff8:	mov	r0, r4
   18ffc:	bl	11404 <__fprintf_chk@plt>
   19000:	b	18e64 <__assert_fail@plt+0x7988>
   19004:	mov	r2, #5
   19008:	ldr	r1, [pc, #348]	; 1916c <__assert_fail@plt+0x7c90>
   1900c:	mov	r0, #0
   19010:	bl	11230 <dcgettext@plt>
   19014:	ldr	r3, [r5]
   19018:	ldr	r2, [r5, #28]
   1901c:	str	r2, [sp, #24]
   19020:	ldr	r2, [r5, #24]
   19024:	str	r2, [sp, #20]
   19028:	ldr	r2, [r5, #20]
   1902c:	str	r2, [sp, #16]
   19030:	ldr	r2, [r5, #16]
   19034:	str	r2, [sp, #12]
   19038:	ldr	r2, [r5, #12]
   1903c:	str	r2, [sp, #8]
   19040:	ldr	r2, [r5, #8]
   19044:	str	r2, [sp, #4]
   19048:	ldr	r2, [r5, #4]
   1904c:	str	r2, [sp]
   19050:	mov	r2, r0
   19054:	mov	r1, #1
   19058:	mov	r0, r4
   1905c:	bl	11404 <__fprintf_chk@plt>
   19060:	b	18e64 <__assert_fail@plt+0x7988>
   19064:	mov	r2, #5
   19068:	ldr	r1, [pc, #256]	; 19170 <__assert_fail@plt+0x7c94>
   1906c:	mov	r0, #0
   19070:	bl	11230 <dcgettext@plt>
   19074:	ldr	r3, [r5]
   19078:	ldr	r2, [r5, #32]
   1907c:	str	r2, [sp, #28]
   19080:	ldr	r2, [r5, #28]
   19084:	str	r2, [sp, #24]
   19088:	ldr	r2, [r5, #24]
   1908c:	str	r2, [sp, #20]
   19090:	ldr	r2, [r5, #20]
   19094:	str	r2, [sp, #16]
   19098:	ldr	r2, [r5, #16]
   1909c:	str	r2, [sp, #12]
   190a0:	ldr	r2, [r5, #12]
   190a4:	str	r2, [sp, #8]
   190a8:	ldr	r2, [r5, #8]
   190ac:	str	r2, [sp, #4]
   190b0:	ldr	r2, [r5, #4]
   190b4:	str	r2, [sp]
   190b8:	mov	r2, r0
   190bc:	mov	r1, #1
   190c0:	mov	r0, r4
   190c4:	bl	11404 <__fprintf_chk@plt>
   190c8:	b	18e64 <__assert_fail@plt+0x7988>
   190cc:	mov	r2, #5
   190d0:	ldr	r1, [pc, #156]	; 19174 <__assert_fail@plt+0x7c98>
   190d4:	mov	r0, #0
   190d8:	bl	11230 <dcgettext@plt>
   190dc:	ldr	r3, [r5]
   190e0:	ldr	r2, [r5, #32]
   190e4:	str	r2, [sp, #28]
   190e8:	ldr	r2, [r5, #28]
   190ec:	str	r2, [sp, #24]
   190f0:	ldr	r2, [r5, #24]
   190f4:	str	r2, [sp, #20]
   190f8:	ldr	r2, [r5, #20]
   190fc:	str	r2, [sp, #16]
   19100:	ldr	r2, [r5, #16]
   19104:	str	r2, [sp, #12]
   19108:	ldr	r2, [r5, #12]
   1910c:	str	r2, [sp, #8]
   19110:	ldr	r2, [r5, #8]
   19114:	str	r2, [sp, #4]
   19118:	ldr	r2, [r5, #4]
   1911c:	str	r2, [sp]
   19120:	mov	r2, r0
   19124:	mov	r1, #1
   19128:	mov	r0, r4
   1912c:	bl	11404 <__fprintf_chk@plt>
   19130:	b	18e64 <__assert_fail@plt+0x7988>
   19134:	andeq	ip, r1, r0, asr lr
   19138:	andeq	ip, r1, r4, ror #28
   1913c:	andeq	r0, r0, r6, ror #15
   19140:	andeq	sp, r1, ip, lsr r1
   19144:	andeq	ip, r1, r8, ror #28
   19148:	andeq	ip, r1, r4, lsl pc
   1914c:	andeq	ip, r1, ip, asr lr
   19150:	andeq	ip, r1, r8, lsr pc
   19154:	andeq	ip, r1, r8, asr #30
   19158:	andeq	ip, r1, r0, ror #30
   1915c:	andeq	ip, r1, ip, ror pc
   19160:	muleq	r1, ip, pc	; <UNPREDICTABLE>
   19164:	andeq	ip, r1, r0, asr #31
   19168:	andeq	ip, r1, r8, ror #31
   1916c:	andeq	sp, r1, r4, lsl r0
   19170:	andeq	sp, r1, r4, asr #32
   19174:	andeq	sp, r1, r8, ror r0
   19178:	push	{r4, r5, lr}
   1917c:	sub	sp, sp, #12
   19180:	ldr	r5, [sp, #24]
   19184:	ldr	ip, [r5]
   19188:	cmp	ip, #0
   1918c:	beq	191bc <__assert_fail@plt+0x7ce0>
   19190:	mov	lr, r5
   19194:	mov	ip, #0
   19198:	add	ip, ip, #1
   1919c:	ldr	r4, [lr, #4]!
   191a0:	cmp	r4, #0
   191a4:	bne	19198 <__assert_fail@plt+0x7cbc>
   191a8:	str	ip, [sp, #4]
   191ac:	str	r5, [sp]
   191b0:	bl	18d58 <__assert_fail@plt+0x787c>
   191b4:	add	sp, sp, #12
   191b8:	pop	{r4, r5, pc}
   191bc:	mov	ip, #0
   191c0:	b	191a8 <__assert_fail@plt+0x7ccc>
   191c4:	push	{r4, r5, lr}
   191c8:	sub	sp, sp, #52	; 0x34
   191cc:	ldr	r4, [sp, #64]	; 0x40
   191d0:	sub	r4, r4, #4
   191d4:	add	r5, sp, #4
   191d8:	mov	ip, #0
   191dc:	ldr	lr, [r4, #4]!
   191e0:	str	lr, [r5, #4]!
   191e4:	cmp	lr, #0
   191e8:	beq	191f8 <__assert_fail@plt+0x7d1c>
   191ec:	add	ip, ip, #1
   191f0:	cmp	ip, #10
   191f4:	bne	191dc <__assert_fail@plt+0x7d00>
   191f8:	str	ip, [sp, #4]
   191fc:	add	ip, sp, #8
   19200:	str	ip, [sp]
   19204:	bl	18d58 <__assert_fail@plt+0x787c>
   19208:	add	sp, sp, #52	; 0x34
   1920c:	pop	{r4, r5, pc}
   19210:	push	{r3}		; (str r3, [sp, #-4]!)
   19214:	push	{lr}		; (str lr, [sp, #-4]!)
   19218:	sub	sp, sp, #16
   1921c:	add	r3, sp, #24
   19220:	str	r3, [sp, #12]
   19224:	str	r3, [sp]
   19228:	ldr	r3, [sp, #20]
   1922c:	bl	191c4 <__assert_fail@plt+0x7ce8>
   19230:	add	sp, sp, #16
   19234:	pop	{lr}		; (ldr lr, [sp], #4)
   19238:	add	sp, sp, #4
   1923c:	bx	lr
   19240:	push	{r4, lr}
   19244:	ldr	r3, [pc, #112]	; 192bc <__assert_fail@plt+0x7de0>
   19248:	ldr	r1, [r3]
   1924c:	mov	r0, #10
   19250:	bl	11224 <fputc_unlocked@plt>
   19254:	mov	r2, #5
   19258:	ldr	r1, [pc, #96]	; 192c0 <__assert_fail@plt+0x7de4>
   1925c:	mov	r0, #0
   19260:	bl	11230 <dcgettext@plt>
   19264:	ldr	r2, [pc, #88]	; 192c4 <__assert_fail@plt+0x7de8>
   19268:	mov	r1, r0
   1926c:	mov	r0, #1
   19270:	bl	113e0 <__printf_chk@plt>
   19274:	mov	r2, #5
   19278:	ldr	r1, [pc, #72]	; 192c8 <__assert_fail@plt+0x7dec>
   1927c:	mov	r0, #0
   19280:	bl	11230 <dcgettext@plt>
   19284:	ldr	r3, [pc, #64]	; 192cc <__assert_fail@plt+0x7df0>
   19288:	ldr	r2, [pc, #64]	; 192d0 <__assert_fail@plt+0x7df4>
   1928c:	mov	r1, r0
   19290:	mov	r0, #1
   19294:	bl	113e0 <__printf_chk@plt>
   19298:	mov	r2, #5
   1929c:	ldr	r1, [pc, #48]	; 192d4 <__assert_fail@plt+0x7df8>
   192a0:	mov	r0, #0
   192a4:	bl	11230 <dcgettext@plt>
   192a8:	ldr	r2, [pc, #40]	; 192d8 <__assert_fail@plt+0x7dfc>
   192ac:	mov	r1, r0
   192b0:	mov	r0, #1
   192b4:	bl	113e0 <__printf_chk@plt>
   192b8:	pop	{r4, pc}
   192bc:	ldrdeq	lr, [r2], -ip
   192c0:	strheq	sp, [r1], -r4
   192c4:	andeq	sp, r1, r8, asr #1
   192c8:	andeq	sp, r1, r0, ror #1
   192cc:	andeq	ip, r1, r8, asr #8
   192d0:	andeq	ip, r1, r0, ror r4
   192d4:	strdeq	sp, [r1], -r4
   192d8:	andeq	sp, r1, ip, lsl r1
   192dc:	push	{r4, lr}
   192e0:	bl	1a008 <__assert_fail@plt+0x8b2c>
   192e4:	cmp	r0, #0
   192e8:	popne	{r4, pc}
   192ec:	bl	19880 <__assert_fail@plt+0x83a4>
   192f0:	push	{r4, lr}
   192f4:	bl	1a008 <__assert_fail@plt+0x8b2c>
   192f8:	cmp	r0, #0
   192fc:	popne	{r4, pc}
   19300:	bl	19880 <__assert_fail@plt+0x83a4>
   19304:	push	{r4, lr}
   19308:	bl	192dc <__assert_fail@plt+0x7e00>
   1930c:	pop	{r4, pc}
   19310:	push	{r4, r5, r6, lr}
   19314:	mov	r5, r0
   19318:	mov	r4, r1
   1931c:	bl	1a038 <__assert_fail@plt+0x8b5c>
   19320:	cmp	r0, #0
   19324:	popne	{r4, r5, r6, pc}
   19328:	adds	r4, r4, #0
   1932c:	movne	r4, #1
   19330:	cmp	r5, #0
   19334:	orreq	r4, r4, #1
   19338:	cmp	r4, #0
   1933c:	popeq	{r4, r5, r6, pc}
   19340:	bl	19880 <__assert_fail@plt+0x83a4>
   19344:	push	{r4, lr}
   19348:	cmp	r1, #0
   1934c:	orreq	r1, r1, #1
   19350:	bl	1a038 <__assert_fail@plt+0x8b5c>
   19354:	cmp	r0, #0
   19358:	popne	{r4, pc}
   1935c:	bl	19880 <__assert_fail@plt+0x83a4>
   19360:	push	{r4, r5, r6, lr}
   19364:	mov	r6, r0
   19368:	mov	r5, r1
   1936c:	mov	r4, r2
   19370:	bl	1a4fc <__assert_fail@plt+0x9020>
   19374:	cmp	r0, #0
   19378:	popne	{r4, r5, r6, pc}
   1937c:	cmp	r6, #0
   19380:	beq	19390 <__assert_fail@plt+0x7eb4>
   19384:	cmp	r5, #0
   19388:	cmpne	r4, #0
   1938c:	popeq	{r4, r5, r6, pc}
   19390:	bl	19880 <__assert_fail@plt+0x83a4>
   19394:	push	{r4, lr}
   19398:	bl	19360 <__assert_fail@plt+0x7e84>
   1939c:	pop	{r4, pc}
   193a0:	push	{r4, lr}
   193a4:	mov	ip, r1
   193a8:	mov	r3, r2
   193ac:	cmp	r2, #0
   193b0:	cmpne	r1, #0
   193b4:	moveq	r3, #1
   193b8:	moveq	ip, r3
   193bc:	mov	r2, r3
   193c0:	mov	r1, ip
   193c4:	bl	1a4fc <__assert_fail@plt+0x9020>
   193c8:	cmp	r0, #0
   193cc:	popne	{r4, pc}
   193d0:	bl	19880 <__assert_fail@plt+0x83a4>
   193d4:	push	{r4, lr}
   193d8:	mov	r2, r1
   193dc:	mov	r1, r0
   193e0:	mov	r0, #0
   193e4:	bl	19360 <__assert_fail@plt+0x7e84>
   193e8:	pop	{r4, pc}
   193ec:	push	{r4, lr}
   193f0:	mov	r2, r1
   193f4:	mov	r1, r0
   193f8:	mov	r0, #0
   193fc:	bl	193a0 <__assert_fail@plt+0x7ec4>
   19400:	pop	{r4, pc}
   19404:	push	{r4, r5, r6, r7, r8, lr}
   19408:	mov	r5, r1
   1940c:	mov	r6, r2
   19410:	ldr	r4, [r1]
   19414:	subs	r7, r0, #0
   19418:	beq	19434 <__assert_fail@plt+0x7f58>
   1941c:	lsr	r2, r4, #1
   19420:	add	r3, r2, #1
   19424:	mvn	r3, r3
   19428:	cmp	r4, r3
   1942c:	bls	19458 <__assert_fail@plt+0x7f7c>
   19430:	bl	19880 <__assert_fail@plt+0x83a4>
   19434:	cmp	r4, #0
   19438:	bne	19460 <__assert_fail@plt+0x7f84>
   1943c:	mov	r1, r2
   19440:	mov	r0, #64	; 0x40
   19444:	bl	1a650 <__assert_fail@plt+0x9174>
   19448:	cmp	r0, #0
   1944c:	movne	r4, r0
   19450:	addeq	r4, r0, #1
   19454:	b	19460 <__assert_fail@plt+0x7f84>
   19458:	add	r4, r4, #1
   1945c:	add	r4, r4, r2
   19460:	mov	r2, r6
   19464:	mov	r1, r4
   19468:	mov	r0, r7
   1946c:	bl	19360 <__assert_fail@plt+0x7e84>
   19470:	str	r4, [r5]
   19474:	pop	{r4, r5, r6, r7, r8, pc}
   19478:	push	{r4, lr}
   1947c:	mov	r2, #1
   19480:	bl	19404 <__assert_fail@plt+0x7f28>
   19484:	pop	{r4, pc}
   19488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1948c:	sub	sp, sp, #12
   19490:	mov	fp, r0
   19494:	mov	sl, r1
   19498:	mov	r9, r2
   1949c:	mov	r7, r3
   194a0:	ldr	r6, [sp, #48]	; 0x30
   194a4:	ldr	r5, [r1]
   194a8:	asrs	r4, r5, #1
   194ac:	bmi	19608 <__assert_fail@plt+0x812c>
   194b0:	cmp	r5, #0
   194b4:	blt	1961c <__assert_fail@plt+0x8140>
   194b8:	mvn	r3, #-2147483648	; 0x80000000
   194bc:	sub	r3, r3, r4
   194c0:	cmp	r5, r3
   194c4:	movle	r3, #0
   194c8:	movgt	r3, #1
   194cc:	cmp	r3, #0
   194d0:	addeq	r4, r4, r5
   194d4:	mvnne	r4, #-2147483648	; 0x80000000
   194d8:	mvn	r8, r7
   194dc:	lsr	r8, r8, #31
   194e0:	cmp	r7, r4
   194e4:	movge	r3, #0
   194e8:	andlt	r3, r8, #1
   194ec:	cmp	r3, #0
   194f0:	movne	r4, r7
   194f4:	cmp	r6, #0
   194f8:	blt	19630 <__assert_fail@plt+0x8154>
   194fc:	cmp	r6, #0
   19500:	beq	196dc <__assert_fail@plt+0x8200>
   19504:	cmp	r4, #0
   19508:	blt	1968c <__assert_fail@plt+0x81b0>
   1950c:	mov	r1, r6
   19510:	mvn	r0, #-2147483648	; 0x80000000
   19514:	bl	1a85c <__assert_fail@plt+0x9380>
   19518:	cmp	r0, r4
   1951c:	movge	r0, #0
   19520:	movlt	r0, #1
   19524:	cmp	r0, #0
   19528:	mvnne	r3, #-2147483648	; 0x80000000
   1952c:	strne	r3, [sp, #4]
   19530:	beq	196c4 <__assert_fail@plt+0x81e8>
   19534:	mov	r1, r6
   19538:	ldr	r0, [sp, #4]
   1953c:	bl	1a85c <__assert_fail@plt+0x9380>
   19540:	mov	r4, r0
   19544:	mov	r1, r6
   19548:	ldr	r0, [sp, #4]
   1954c:	bl	1aa7c <__assert_fail@plt+0x95a0>
   19550:	ldr	r3, [sp, #4]
   19554:	sub	r1, r3, r1
   19558:	cmp	fp, #0
   1955c:	moveq	r3, #0
   19560:	streq	r3, [sl]
   19564:	sub	r3, r4, r5
   19568:	cmp	r3, r9
   1956c:	bge	195f4 <__assert_fail@plt+0x8118>
   19570:	cmp	r9, #0
   19574:	blt	196e8 <__assert_fail@plt+0x820c>
   19578:	cmp	r5, #0
   1957c:	blt	196fc <__assert_fail@plt+0x8220>
   19580:	mvn	r3, #-2147483648	; 0x80000000
   19584:	sub	r3, r3, r9
   19588:	cmp	r5, r3
   1958c:	movle	r3, #0
   19590:	movgt	r3, #1
   19594:	cmp	r3, #0
   19598:	bne	197a4 <__assert_fail@plt+0x82c8>
   1959c:	add	r5, r5, r9
   195a0:	mov	r4, r5
   195a4:	cmp	r7, r5
   195a8:	movge	r7, #0
   195ac:	andlt	r7, r8, #1
   195b0:	cmp	r7, #0
   195b4:	bne	197a4 <__assert_fail@plt+0x82c8>
   195b8:	cmp	r6, #0
   195bc:	blt	19710 <__assert_fail@plt+0x8234>
   195c0:	cmp	r6, #0
   195c4:	beq	195f0 <__assert_fail@plt+0x8114>
   195c8:	cmp	r5, #0
   195cc:	blt	1976c <__assert_fail@plt+0x8290>
   195d0:	mov	r1, r6
   195d4:	mvn	r0, #-2147483648	; 0x80000000
   195d8:	bl	1a85c <__assert_fail@plt+0x9380>
   195dc:	cmp	r5, r0
   195e0:	movle	r0, #0
   195e4:	movgt	r0, #1
   195e8:	cmp	r0, #0
   195ec:	bne	197a4 <__assert_fail@plt+0x82c8>
   195f0:	mul	r1, r5, r6
   195f4:	mov	r0, fp
   195f8:	bl	19310 <__assert_fail@plt+0x7e34>
   195fc:	str	r4, [sl]
   19600:	add	sp, sp, #12
   19604:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19608:	rsb	r3, r4, #-2147483648	; 0x80000000
   1960c:	cmp	r5, r3
   19610:	movge	r3, #0
   19614:	movlt	r3, #1
   19618:	b	194cc <__assert_fail@plt+0x7ff0>
   1961c:	rsb	r3, r5, #-2147483648	; 0x80000000
   19620:	cmp	r4, r3
   19624:	movge	r3, #0
   19628:	movlt	r3, #1
   1962c:	b	194cc <__assert_fail@plt+0x7ff0>
   19630:	cmp	r4, #0
   19634:	blt	1965c <__assert_fail@plt+0x8180>
   19638:	cmn	r6, #1
   1963c:	beq	19678 <__assert_fail@plt+0x819c>
   19640:	mov	r1, r6
   19644:	mov	r0, #-2147483648	; 0x80000000
   19648:	bl	1a85c <__assert_fail@plt+0x9380>
   1964c:	cmp	r0, r4
   19650:	movge	r0, #0
   19654:	movlt	r0, #1
   19658:	b	19524 <__assert_fail@plt+0x8048>
   1965c:	mov	r1, r6
   19660:	mvn	r0, #-2147483648	; 0x80000000
   19664:	bl	1a85c <__assert_fail@plt+0x9380>
   19668:	cmp	r0, r4
   1966c:	movle	r0, #0
   19670:	movgt	r0, #1
   19674:	b	19524 <__assert_fail@plt+0x8048>
   19678:	add	r0, r4, #-2147483648	; 0x80000000
   1967c:	cmp	r0, #0
   19680:	movle	r0, #0
   19684:	movgt	r0, #1
   19688:	b	19524 <__assert_fail@plt+0x8048>
   1968c:	cmn	r4, #1
   19690:	beq	196b0 <__assert_fail@plt+0x81d4>
   19694:	mov	r1, r4
   19698:	mov	r0, #-2147483648	; 0x80000000
   1969c:	bl	1a85c <__assert_fail@plt+0x9380>
   196a0:	cmp	r6, r0
   196a4:	movle	r0, #0
   196a8:	movgt	r0, #1
   196ac:	b	19524 <__assert_fail@plt+0x8048>
   196b0:	add	r0, r6, #-2147483648	; 0x80000000
   196b4:	cmp	r0, #0
   196b8:	movle	r0, #0
   196bc:	movgt	r0, #1
   196c0:	b	19524 <__assert_fail@plt+0x8048>
   196c4:	mul	r1, r6, r4
   196c8:	cmp	r1, #63	; 0x3f
   196cc:	movle	r3, #64	; 0x40
   196d0:	strle	r3, [sp, #4]
   196d4:	bgt	19558 <__assert_fail@plt+0x807c>
   196d8:	b	19534 <__assert_fail@plt+0x8058>
   196dc:	mov	r3, #64	; 0x40
   196e0:	str	r3, [sp, #4]
   196e4:	b	19534 <__assert_fail@plt+0x8058>
   196e8:	rsb	r3, r9, #-2147483648	; 0x80000000
   196ec:	cmp	r5, r3
   196f0:	movge	r3, #0
   196f4:	movlt	r3, #1
   196f8:	b	19594 <__assert_fail@plt+0x80b8>
   196fc:	rsb	r3, r5, #-2147483648	; 0x80000000
   19700:	cmp	r9, r3
   19704:	movge	r3, #0
   19708:	movlt	r3, #1
   1970c:	b	19594 <__assert_fail@plt+0x80b8>
   19710:	cmp	r5, #0
   19714:	blt	1973c <__assert_fail@plt+0x8260>
   19718:	cmn	r6, #1
   1971c:	beq	19758 <__assert_fail@plt+0x827c>
   19720:	mov	r1, r6
   19724:	mov	r0, #-2147483648	; 0x80000000
   19728:	bl	1a85c <__assert_fail@plt+0x9380>
   1972c:	cmp	r5, r0
   19730:	movle	r0, #0
   19734:	movgt	r0, #1
   19738:	b	195e8 <__assert_fail@plt+0x810c>
   1973c:	mov	r1, r6
   19740:	mvn	r0, #-2147483648	; 0x80000000
   19744:	bl	1a85c <__assert_fail@plt+0x9380>
   19748:	cmp	r5, r0
   1974c:	movge	r0, #0
   19750:	movlt	r0, #1
   19754:	b	195e8 <__assert_fail@plt+0x810c>
   19758:	add	r0, r5, #-2147483648	; 0x80000000
   1975c:	cmp	r0, #0
   19760:	movle	r0, #0
   19764:	movgt	r0, #1
   19768:	b	195e8 <__assert_fail@plt+0x810c>
   1976c:	cmn	r5, #1
   19770:	beq	19790 <__assert_fail@plt+0x82b4>
   19774:	mov	r1, r5
   19778:	mov	r0, #-2147483648	; 0x80000000
   1977c:	bl	1a85c <__assert_fail@plt+0x9380>
   19780:	cmp	r6, r0
   19784:	movle	r0, #0
   19788:	movgt	r0, #1
   1978c:	b	195e8 <__assert_fail@plt+0x810c>
   19790:	add	r0, r6, #-2147483648	; 0x80000000
   19794:	cmp	r0, #0
   19798:	movle	r0, #0
   1979c:	movgt	r0, #1
   197a0:	b	195e8 <__assert_fail@plt+0x810c>
   197a4:	bl	19880 <__assert_fail@plt+0x83a4>
   197a8:	push	{r4, lr}
   197ac:	bl	19fb8 <__assert_fail@plt+0x8adc>
   197b0:	cmp	r0, #0
   197b4:	popne	{r4, pc}
   197b8:	bl	19880 <__assert_fail@plt+0x83a4>
   197bc:	push	{r4, lr}
   197c0:	mov	r1, #1
   197c4:	bl	197a8 <__assert_fail@plt+0x82cc>
   197c8:	pop	{r4, pc}
   197cc:	push	{r4, lr}
   197d0:	bl	19fb8 <__assert_fail@plt+0x8adc>
   197d4:	cmp	r0, #0
   197d8:	popne	{r4, pc}
   197dc:	bl	19880 <__assert_fail@plt+0x83a4>
   197e0:	push	{r4, lr}
   197e4:	mov	r1, #1
   197e8:	bl	197cc <__assert_fail@plt+0x82f0>
   197ec:	pop	{r4, pc}
   197f0:	push	{r4, r5, r6, lr}
   197f4:	mov	r5, r0
   197f8:	mov	r4, r1
   197fc:	mov	r0, r1
   19800:	bl	192dc <__assert_fail@plt+0x7e00>
   19804:	mov	r2, r4
   19808:	mov	r1, r5
   1980c:	bl	111e8 <memcpy@plt>
   19810:	pop	{r4, r5, r6, pc}
   19814:	push	{r4, r5, r6, lr}
   19818:	mov	r5, r0
   1981c:	mov	r4, r1
   19820:	mov	r0, r1
   19824:	bl	192f0 <__assert_fail@plt+0x7e14>
   19828:	mov	r2, r4
   1982c:	mov	r1, r5
   19830:	bl	111e8 <memcpy@plt>
   19834:	pop	{r4, r5, r6, pc}
   19838:	push	{r4, r5, r6, lr}
   1983c:	mov	r5, r0
   19840:	mov	r4, r1
   19844:	add	r0, r1, #1
   19848:	bl	192f0 <__assert_fail@plt+0x7e14>
   1984c:	mov	r2, #0
   19850:	strb	r2, [r0, r4]
   19854:	mov	r2, r4
   19858:	mov	r1, r5
   1985c:	bl	111e8 <memcpy@plt>
   19860:	pop	{r4, r5, r6, pc}
   19864:	push	{r4, lr}
   19868:	mov	r4, r0
   1986c:	bl	11380 <strlen@plt>
   19870:	add	r1, r0, #1
   19874:	mov	r0, r4
   19878:	bl	197f0 <__assert_fail@plt+0x8314>
   1987c:	pop	{r4, pc}
   19880:	push	{r4, lr}
   19884:	ldr	r3, [pc, #40]	; 198b4 <__assert_fail@plt+0x83d8>
   19888:	ldr	r4, [r3]
   1988c:	mov	r2, #5
   19890:	ldr	r1, [pc, #32]	; 198b8 <__assert_fail@plt+0x83dc>
   19894:	mov	r0, #0
   19898:	bl	11230 <dcgettext@plt>
   1989c:	mov	r3, r0
   198a0:	ldr	r2, [pc, #20]	; 198bc <__assert_fail@plt+0x83e0>
   198a4:	mov	r1, #0
   198a8:	mov	r0, r4
   198ac:	bl	112d8 <error@plt>
   198b0:	bl	114ac <abort@plt>
   198b4:	andeq	lr, r2, ip, ror r1
   198b8:	andeq	sp, r1, ip, ror #2
   198bc:	andeq	ip, r1, ip, lsl #13
   198c0:	push	{r4, r5, r6, lr}
   198c4:	mov	r5, r0
   198c8:	subs	r4, r1, #0
   198cc:	blt	19920 <__assert_fail@plt+0x8444>
   198d0:	cmp	r4, #0
   198d4:	moveq	r3, #0
   198d8:	beq	19904 <__assert_fail@plt+0x8428>
   198dc:	mov	r2, r4
   198e0:	asr	r3, r4, #31
   198e4:	mvn	r0, #0
   198e8:	mvn	r1, #0
   198ec:	bl	1af28 <__assert_fail@plt+0x9a4c>
   198f0:	ldrd	r2, [r5]
   198f4:	cmp	r1, r3
   198f8:	cmpeq	r0, r2
   198fc:	movcc	r3, #1
   19900:	movcs	r3, #0
   19904:	cmp	r3, #0
   19908:	beq	19940 <__assert_fail@plt+0x8464>
   1990c:	mvn	r2, #0
   19910:	mvn	r3, #0
   19914:	strd	r2, [r5]
   19918:	mov	r0, #1
   1991c:	pop	{r4, r5, r6, pc}
   19920:	mov	r1, r4
   19924:	mov	r0, #0
   19928:	bl	1a85c <__assert_fail@plt+0x9380>
   1992c:	ldrd	r2, [r5]
   19930:	orrs	r3, r2, r3
   19934:	movne	r3, #1
   19938:	moveq	r3, #0
   1993c:	b	19904 <__assert_fail@plt+0x8428>
   19940:	asr	r3, r4, #31
   19944:	ldr	r1, [r5, #4]
   19948:	ldr	r2, [r5]
   1994c:	mul	r3, r3, r2
   19950:	mla	r1, r4, r1, r3
   19954:	umull	r2, r3, r2, r4
   19958:	add	r3, r1, r3
   1995c:	strd	r2, [r5]
   19960:	mov	r0, #0
   19964:	pop	{r4, r5, r6, pc}
   19968:	push	{r4, r5, r6, r7, r8, lr}
   1996c:	subs	r4, r2, #0
   19970:	beq	199a0 <__assert_fail@plt+0x84c4>
   19974:	mov	r7, r1
   19978:	mov	r6, r0
   1997c:	mov	r5, #0
   19980:	mov	r1, r7
   19984:	mov	r0, r6
   19988:	bl	198c0 <__assert_fail@plt+0x83e4>
   1998c:	orr	r5, r5, r0
   19990:	subs	r4, r4, #1
   19994:	bne	19980 <__assert_fail@plt+0x84a4>
   19998:	mov	r0, r5
   1999c:	pop	{r4, r5, r6, r7, r8, pc}
   199a0:	mov	r5, #0
   199a4:	b	19998 <__assert_fail@plt+0x84bc>
   199a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   199ac:	sub	sp, sp, #20
   199b0:	cmp	r2, #36	; 0x24
   199b4:	bhi	199f4 <__assert_fail@plt+0x8518>
   199b8:	mov	r5, r0
   199bc:	mov	r6, r1
   199c0:	mov	r7, r2
   199c4:	mov	r9, r3
   199c8:	cmp	r1, #0
   199cc:	addeq	r6, sp, #12
   199d0:	bl	113a4 <__errno_location@plt>
   199d4:	mov	r8, r0
   199d8:	mov	r3, #0
   199dc:	str	r3, [r0]
   199e0:	ldrb	r4, [r5]
   199e4:	bl	11368 <__ctype_b_loc@plt>
   199e8:	ldr	r1, [r0]
   199ec:	mov	r2, r5
   199f0:	b	19a0c <__assert_fail@plt+0x8530>
   199f4:	ldr	r3, [pc, #1056]	; 19e1c <__assert_fail@plt+0x8940>
   199f8:	mov	r2, #85	; 0x55
   199fc:	ldr	r1, [pc, #1052]	; 19e20 <__assert_fail@plt+0x8944>
   19a00:	ldr	r0, [pc, #1052]	; 19e24 <__assert_fail@plt+0x8948>
   19a04:	bl	114dc <__assert_fail@plt>
   19a08:	ldrb	r4, [r2, #1]!
   19a0c:	lsl	r3, r4, #1
   19a10:	ldrh	r3, [r1, r3]
   19a14:	tst	r3, #8192	; 0x2000
   19a18:	bne	19a08 <__assert_fail@plt+0x852c>
   19a1c:	cmp	r4, #45	; 0x2d
   19a20:	moveq	r4, #4
   19a24:	bne	19a34 <__assert_fail@plt+0x8558>
   19a28:	mov	r0, r4
   19a2c:	add	sp, sp, #20
   19a30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19a34:	mov	r3, #0
   19a38:	mov	r2, r7
   19a3c:	mov	r1, r6
   19a40:	mov	r0, r5
   19a44:	bl	111f4 <__strtoull_internal@plt>
   19a48:	strd	r0, [sp]
   19a4c:	ldr	r7, [r6]
   19a50:	cmp	r5, r7
   19a54:	beq	19a78 <__assert_fail@plt+0x859c>
   19a58:	ldr	r3, [r8]
   19a5c:	cmp	r3, #0
   19a60:	beq	19ac0 <__assert_fail@plt+0x85e4>
   19a64:	cmp	r3, #34	; 0x22
   19a68:	moveq	r4, #1
   19a6c:	beq	19ac4 <__assert_fail@plt+0x85e8>
   19a70:	mov	r4, #4
   19a74:	b	19a28 <__assert_fail@plt+0x854c>
   19a78:	ldr	r3, [sp, #48]	; 0x30
   19a7c:	cmp	r3, #0
   19a80:	moveq	r4, #4
   19a84:	beq	19a28 <__assert_fail@plt+0x854c>
   19a88:	ldrb	r1, [r7]
   19a8c:	cmp	r1, #0
   19a90:	moveq	r4, #4
   19a94:	beq	19a28 <__assert_fail@plt+0x854c>
   19a98:	mov	r0, r3
   19a9c:	bl	1138c <strchr@plt>
   19aa0:	cmp	r0, #0
   19aa4:	moveq	r4, #4
   19aa8:	beq	19a28 <__assert_fail@plt+0x854c>
   19aac:	mov	r2, #1
   19ab0:	mov	r3, #0
   19ab4:	strd	r2, [sp]
   19ab8:	mov	r4, #0
   19abc:	b	19ad0 <__assert_fail@plt+0x85f4>
   19ac0:	mov	r4, #0
   19ac4:	ldr	r3, [sp, #48]	; 0x30
   19ac8:	cmp	r3, #0
   19acc:	beq	19bc0 <__assert_fail@plt+0x86e4>
   19ad0:	ldrb	r5, [r7]
   19ad4:	cmp	r5, #0
   19ad8:	beq	19d58 <__assert_fail@plt+0x887c>
   19adc:	mov	r1, r5
   19ae0:	ldr	r0, [sp, #48]	; 0x30
   19ae4:	bl	1138c <strchr@plt>
   19ae8:	cmp	r0, #0
   19aec:	beq	19bc8 <__assert_fail@plt+0x86ec>
   19af0:	sub	r3, r5, #69	; 0x45
   19af4:	cmp	r3, #47	; 0x2f
   19af8:	ldrls	pc, [pc, r3, lsl #2]
   19afc:	b	19c34 <__assert_fail@plt+0x8758>
   19b00:	ldrdeq	r9, [r1], -r8
   19b04:	andeq	r9, r1, r4, lsr ip
   19b08:	ldrdeq	r9, [r1], -r8
   19b0c:	andeq	r9, r1, r4, lsr ip
   19b10:	andeq	r9, r1, r4, lsr ip
   19b14:	andeq	r9, r1, r4, lsr ip
   19b18:	ldrdeq	r9, [r1], -r8
   19b1c:	andeq	r9, r1, r4, lsr ip
   19b20:	ldrdeq	r9, [r1], -r8
   19b24:	andeq	r9, r1, r4, lsr ip
   19b28:	andeq	r9, r1, r4, lsr ip
   19b2c:	ldrdeq	r9, [r1], -r8
   19b30:	andeq	r9, r1, r4, lsr ip
   19b34:	andeq	r9, r1, r4, lsr ip
   19b38:	andeq	r9, r1, r4, lsr ip
   19b3c:	ldrdeq	r9, [r1], -r8
   19b40:	andeq	r9, r1, r4, lsr ip
   19b44:	andeq	r9, r1, r4, lsr ip
   19b48:	andeq	r9, r1, r4, lsr ip
   19b4c:	andeq	r9, r1, r4, lsr ip
   19b50:	ldrdeq	r9, [r1], -r8
   19b54:	ldrdeq	r9, [r1], -r8
   19b58:	andeq	r9, r1, r4, lsr ip
   19b5c:	andeq	r9, r1, r4, lsr ip
   19b60:	andeq	r9, r1, r4, lsr ip
   19b64:	andeq	r9, r1, r4, lsr ip
   19b68:	andeq	r9, r1, r4, lsr ip
   19b6c:	andeq	r9, r1, r4, lsr ip
   19b70:	andeq	r9, r1, r4, lsr ip
   19b74:	andeq	r9, r1, r4, lsr ip
   19b78:	andeq	r9, r1, r4, lsr ip
   19b7c:	andeq	r9, r1, r4, lsr ip
   19b80:	andeq	r9, r1, r4, lsr ip
   19b84:	andeq	r9, r1, r4, lsr ip
   19b88:	ldrdeq	r9, [r1], -r8
   19b8c:	andeq	r9, r1, r4, lsr ip
   19b90:	andeq	r9, r1, r4, lsr ip
   19b94:	andeq	r9, r1, r4, lsr ip
   19b98:	ldrdeq	r9, [r1], -r8
   19b9c:	andeq	r9, r1, r4, lsr ip
   19ba0:	ldrdeq	r9, [r1], -r8
   19ba4:	andeq	r9, r1, r4, lsr ip
   19ba8:	andeq	r9, r1, r4, lsr ip
   19bac:	andeq	r9, r1, r4, lsr ip
   19bb0:	andeq	r9, r1, r4, lsr ip
   19bb4:	andeq	r9, r1, r4, lsr ip
   19bb8:	andeq	r9, r1, r4, lsr ip
   19bbc:	ldrdeq	r9, [r1], -r8
   19bc0:	strd	r0, [r9]
   19bc4:	b	19a28 <__assert_fail@plt+0x854c>
   19bc8:	ldrd	r2, [sp]
   19bcc:	strd	r2, [r9]
   19bd0:	orr	r4, r4, #2
   19bd4:	b	19a28 <__assert_fail@plt+0x854c>
   19bd8:	mov	r1, #48	; 0x30
   19bdc:	ldr	r0, [sp, #48]	; 0x30
   19be0:	bl	1138c <strchr@plt>
   19be4:	cmp	r0, #0
   19be8:	beq	19d24 <__assert_fail@plt+0x8848>
   19bec:	ldrb	r3, [r7, #1]
   19bf0:	cmp	r3, #68	; 0x44
   19bf4:	beq	19c10 <__assert_fail@plt+0x8734>
   19bf8:	cmp	r3, #105	; 0x69
   19bfc:	beq	19c1c <__assert_fail@plt+0x8740>
   19c00:	cmp	r3, #66	; 0x42
   19c04:	movne	r7, #1
   19c08:	movne	r1, #1024	; 0x400
   19c0c:	bne	19c3c <__assert_fail@plt+0x8760>
   19c10:	mov	r7, #2
   19c14:	mov	r1, #1000	; 0x3e8
   19c18:	b	19c3c <__assert_fail@plt+0x8760>
   19c1c:	ldrb	r7, [r7, #2]
   19c20:	cmp	r7, #66	; 0x42
   19c24:	movne	r7, #1
   19c28:	moveq	r7, #3
   19c2c:	mov	r1, #1024	; 0x400
   19c30:	b	19c3c <__assert_fail@plt+0x8760>
   19c34:	mov	r7, #1
   19c38:	mov	r1, #1024	; 0x400
   19c3c:	sub	r5, r5, #66	; 0x42
   19c40:	cmp	r5, #53	; 0x35
   19c44:	ldrls	pc, [pc, r5, lsl #2]
   19c48:	b	19e04 <__assert_fail@plt+0x8928>
   19c4c:	andeq	r9, r1, r4, ror #26
   19c50:	andeq	r9, r1, r4, lsl #28
   19c54:	andeq	r9, r1, r4, lsl #28
   19c58:	andeq	r9, r1, r4, ror sp
   19c5c:	andeq	r9, r1, r4, lsl #28
   19c60:	andeq	r9, r1, r4, lsl #27
   19c64:	andeq	r9, r1, r4, lsl #28
   19c68:	andeq	r9, r1, r4, lsl #28
   19c6c:	andeq	r9, r1, r4, lsl #28
   19c70:	muleq	r1, r4, sp
   19c74:	andeq	r9, r1, r4, lsl #28
   19c78:	andeq	r9, r1, r4, lsr #27
   19c7c:	andeq	r9, r1, r4, lsl #28
   19c80:	andeq	r9, r1, r4, lsl #28
   19c84:			; <UNDEFINED> instruction: 0x00019db4
   19c88:	andeq	r9, r1, r4, lsl #28
   19c8c:	andeq	r9, r1, r4, lsl #28
   19c90:	andeq	r9, r1, r4, lsl #28
   19c94:	andeq	r9, r1, r4, asr #27
   19c98:	andeq	r9, r1, r4, lsl #28
   19c9c:	andeq	r9, r1, r4, lsl #28
   19ca0:	andeq	r9, r1, r4, lsl #28
   19ca4:	andeq	r9, r1, r4, lsl #28
   19ca8:	andeq	r9, r1, r4, ror #27
   19cac:	strdeq	r9, [r1], -r4
   19cb0:	andeq	r9, r1, r4, lsl #28
   19cb4:	andeq	r9, r1, r4, lsl #28
   19cb8:	andeq	r9, r1, r4, lsl #28
   19cbc:	andeq	r9, r1, r4, lsl #28
   19cc0:	andeq	r9, r1, r4, lsl #28
   19cc4:	andeq	r9, r1, r4, lsl #28
   19cc8:	andeq	r9, r1, r4, lsl #28
   19ccc:	andeq	r9, r1, r0, lsr sp
   19cd0:	andeq	r9, r1, r4, lsl lr
   19cd4:	andeq	r9, r1, r4, lsl #28
   19cd8:	andeq	r9, r1, r4, lsl #28
   19cdc:	andeq	r9, r1, r4, lsl #28
   19ce0:	andeq	r9, r1, r4, lsl #27
   19ce4:	andeq	r9, r1, r4, lsl #28
   19ce8:	andeq	r9, r1, r4, lsl #28
   19cec:	andeq	r9, r1, r4, lsl #28
   19cf0:	muleq	r1, r4, sp
   19cf4:	andeq	r9, r1, r4, lsl #28
   19cf8:	andeq	r9, r1, r4, lsr #27
   19cfc:	andeq	r9, r1, r4, lsl #28
   19d00:	andeq	r9, r1, r4, lsl #28
   19d04:	andeq	r9, r1, r4, lsl #28
   19d08:	andeq	r9, r1, r4, lsl #28
   19d0c:	andeq	r9, r1, r4, lsl #28
   19d10:	andeq	r9, r1, r4, lsl #28
   19d14:	andeq	r9, r1, r4, asr #27
   19d18:	andeq	r9, r1, r4, lsl #28
   19d1c:	andeq	r9, r1, r4, lsl #28
   19d20:	ldrdeq	r9, [r1], -r4
   19d24:	mov	r7, #1
   19d28:	mov	r1, #1024	; 0x400
   19d2c:	b	19c3c <__assert_fail@plt+0x8760>
   19d30:	mov	r1, #512	; 0x200
   19d34:	mov	r0, sp
   19d38:	bl	198c0 <__assert_fail@plt+0x83e4>
   19d3c:	orr	r4, r4, r0
   19d40:	ldr	r3, [r6]
   19d44:	add	r2, r3, r7
   19d48:	str	r2, [r6]
   19d4c:	ldrb	r3, [r3, r7]
   19d50:	cmp	r3, #0
   19d54:	orrne	r4, r4, #2
   19d58:	ldrd	r2, [sp]
   19d5c:	strd	r2, [r9]
   19d60:	b	19a28 <__assert_fail@plt+0x854c>
   19d64:	mov	r1, #1024	; 0x400
   19d68:	mov	r0, sp
   19d6c:	bl	198c0 <__assert_fail@plt+0x83e4>
   19d70:	b	19d3c <__assert_fail@plt+0x8860>
   19d74:	mov	r2, #6
   19d78:	mov	r0, sp
   19d7c:	bl	19968 <__assert_fail@plt+0x848c>
   19d80:	b	19d3c <__assert_fail@plt+0x8860>
   19d84:	mov	r2, #3
   19d88:	mov	r0, sp
   19d8c:	bl	19968 <__assert_fail@plt+0x848c>
   19d90:	b	19d3c <__assert_fail@plt+0x8860>
   19d94:	mov	r2, #1
   19d98:	mov	r0, sp
   19d9c:	bl	19968 <__assert_fail@plt+0x848c>
   19da0:	b	19d3c <__assert_fail@plt+0x8860>
   19da4:	mov	r2, #2
   19da8:	mov	r0, sp
   19dac:	bl	19968 <__assert_fail@plt+0x848c>
   19db0:	b	19d3c <__assert_fail@plt+0x8860>
   19db4:	mov	r2, #5
   19db8:	mov	r0, sp
   19dbc:	bl	19968 <__assert_fail@plt+0x848c>
   19dc0:	b	19d3c <__assert_fail@plt+0x8860>
   19dc4:	mov	r2, #4
   19dc8:	mov	r0, sp
   19dcc:	bl	19968 <__assert_fail@plt+0x848c>
   19dd0:	b	19d3c <__assert_fail@plt+0x8860>
   19dd4:	mov	r1, #2
   19dd8:	mov	r0, sp
   19ddc:	bl	198c0 <__assert_fail@plt+0x83e4>
   19de0:	b	19d3c <__assert_fail@plt+0x8860>
   19de4:	mov	r2, #8
   19de8:	mov	r0, sp
   19dec:	bl	19968 <__assert_fail@plt+0x848c>
   19df0:	b	19d3c <__assert_fail@plt+0x8860>
   19df4:	mov	r2, #7
   19df8:	mov	r0, sp
   19dfc:	bl	19968 <__assert_fail@plt+0x848c>
   19e00:	b	19d3c <__assert_fail@plt+0x8860>
   19e04:	ldrd	r2, [sp]
   19e08:	strd	r2, [r9]
   19e0c:	orr	r4, r4, #2
   19e10:	b	19a28 <__assert_fail@plt+0x854c>
   19e14:	mov	r0, #0
   19e18:	b	19d3c <__assert_fail@plt+0x8860>
   19e1c:	andeq	sp, r1, r0, lsl #3
   19e20:	andeq	sp, r1, ip, lsl #3
   19e24:	muleq	r1, ip, r1
   19e28:	push	{r4, r5, r6, r7, r8, r9, lr}
   19e2c:	sub	sp, sp, #12
   19e30:	str	r1, [sp, #4]
   19e34:	subs	r6, r0, #0
   19e38:	beq	19efc <__assert_fail@plt+0x8a20>
   19e3c:	mov	r8, r1
   19e40:	ldr	r3, [sp, #4]
   19e44:	add	r2, r3, #4
   19e48:	str	r2, [sp, #4]
   19e4c:	ldr	r0, [r3]
   19e50:	bl	11380 <strlen@plt>
   19e54:	mov	r5, r0
   19e58:	mov	r4, r6
   19e5c:	b	19e84 <__assert_fail@plt+0x89a8>
   19e60:	ldr	r3, [sp, #4]
   19e64:	add	r2, r3, #4
   19e68:	str	r2, [sp, #4]
   19e6c:	ldr	r0, [r3]
   19e70:	bl	11380 <strlen@plt>
   19e74:	add	r0, r0, r5
   19e78:	cmp	r0, r5
   19e7c:	movcs	r5, r0
   19e80:	mvncc	r5, #0
   19e84:	subs	r4, r4, #1
   19e88:	bne	19e60 <__assert_fail@plt+0x8984>
   19e8c:	cmp	r5, #0
   19e90:	blt	19ee8 <__assert_fail@plt+0x8a0c>
   19e94:	add	r0, r5, #1
   19e98:	bl	192dc <__assert_fail@plt+0x7e00>
   19e9c:	mov	r9, r0
   19ea0:	sub	r8, r8, #4
   19ea4:	mov	r4, r0
   19ea8:	ldr	r7, [r8, #4]!
   19eac:	mov	r0, r7
   19eb0:	bl	11380 <strlen@plt>
   19eb4:	mov	r5, r0
   19eb8:	mov	r2, r0
   19ebc:	mov	r1, r7
   19ec0:	mov	r0, r4
   19ec4:	bl	111e8 <memcpy@plt>
   19ec8:	add	r4, r4, r5
   19ecc:	subs	r6, r6, #1
   19ed0:	bne	19ea8 <__assert_fail@plt+0x89cc>
   19ed4:	mov	r3, #0
   19ed8:	strb	r3, [r4]
   19edc:	mov	r0, r9
   19ee0:	add	sp, sp, #12
   19ee4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19ee8:	bl	113a4 <__errno_location@plt>
   19eec:	mov	r3, #75	; 0x4b
   19ef0:	str	r3, [r0]
   19ef4:	mov	r9, #0
   19ef8:	b	19edc <__assert_fail@plt+0x8a00>
   19efc:	mov	r0, #1
   19f00:	bl	192dc <__assert_fail@plt+0x7e00>
   19f04:	mov	r4, r0
   19f08:	mov	r9, r0
   19f0c:	b	19ed4 <__assert_fail@plt+0x89f8>
   19f10:	push	{r4, lr}
   19f14:	sub	sp, sp, #8
   19f18:	ldrb	r2, [r0]
   19f1c:	cmp	r2, #0
   19f20:	beq	19f90 <__assert_fail@plt+0x8ab4>
   19f24:	cmp	r2, #37	; 0x25
   19f28:	bne	19f68 <__assert_fail@plt+0x8a8c>
   19f2c:	ldrb	r3, [r0, #1]
   19f30:	cmp	r3, #115	; 0x73
   19f34:	bne	19f68 <__assert_fail@plt+0x8a8c>
   19f38:	mov	ip, r0
   19f3c:	mov	r4, #0
   19f40:	add	r4, r4, #1
   19f44:	ldrb	lr, [ip, #2]
   19f48:	cmp	lr, #0
   19f4c:	beq	19f94 <__assert_fail@plt+0x8ab8>
   19f50:	cmp	lr, #37	; 0x25
   19f54:	bne	19f68 <__assert_fail@plt+0x8a8c>
   19f58:	add	ip, ip, #2
   19f5c:	ldrb	lr, [ip, #1]
   19f60:	cmp	lr, #115	; 0x73
   19f64:	beq	19f40 <__assert_fail@plt+0x8a64>
   19f68:	mov	r3, r1
   19f6c:	mov	r2, r0
   19f70:	mov	r1, #1
   19f74:	add	r0, sp, #4
   19f78:	bl	113c8 <__vasprintf_chk@plt>
   19f7c:	cmp	r0, #0
   19f80:	ldrge	r0, [sp, #4]
   19f84:	blt	19fa0 <__assert_fail@plt+0x8ac4>
   19f88:	add	sp, sp, #8
   19f8c:	pop	{r4, pc}
   19f90:	mov	r4, #0
   19f94:	mov	r0, r4
   19f98:	bl	19e28 <__assert_fail@plt+0x894c>
   19f9c:	b	19f88 <__assert_fail@plt+0x8aac>
   19fa0:	bl	113a4 <__errno_location@plt>
   19fa4:	ldr	r3, [r0]
   19fa8:	cmp	r3, #12
   19fac:	movne	r0, #0
   19fb0:	bne	19f88 <__assert_fail@plt+0x8aac>
   19fb4:	bl	19880 <__assert_fail@plt+0x83a4>
   19fb8:	push	{r4, lr}
   19fbc:	mov	r2, r0
   19fc0:	mov	r3, r1
   19fc4:	cmp	r1, #0
   19fc8:	cmpne	r0, #0
   19fcc:	moveq	r3, #1
   19fd0:	moveq	r2, r3
   19fd4:	umull	r0, r1, r2, r3
   19fd8:	cmp	r0, #0
   19fdc:	cmpge	r1, #0
   19fe0:	bne	19ff4 <__assert_fail@plt+0x8b18>
   19fe4:	mov	r1, r3
   19fe8:	mov	r0, r2
   19fec:	bl	1114c <calloc@plt>
   19ff0:	pop	{r4, pc}
   19ff4:	bl	113a4 <__errno_location@plt>
   19ff8:	mov	r3, #12
   19ffc:	str	r3, [r0]
   1a000:	mov	r0, #0
   1a004:	pop	{r4, pc}
   1a008:	push	{r4, lr}
   1a00c:	cmp	r0, #0
   1a010:	moveq	r0, #1
   1a014:	cmp	r0, #0
   1a018:	blt	1a024 <__assert_fail@plt+0x8b48>
   1a01c:	bl	112fc <malloc@plt>
   1a020:	pop	{r4, pc}
   1a024:	bl	113a4 <__errno_location@plt>
   1a028:	mov	r3, #12
   1a02c:	str	r3, [r0]
   1a030:	mov	r0, #0
   1a034:	pop	{r4, pc}
   1a038:	push	{r4, lr}
   1a03c:	cmp	r0, #0
   1a040:	beq	1a05c <__assert_fail@plt+0x8b80>
   1a044:	cmp	r1, #0
   1a048:	beq	1a068 <__assert_fail@plt+0x8b8c>
   1a04c:	cmp	r1, #0
   1a050:	blt	1a074 <__assert_fail@plt+0x8b98>
   1a054:	bl	11248 <realloc@plt>
   1a058:	pop	{r4, pc}
   1a05c:	mov	r0, r1
   1a060:	bl	1a008 <__assert_fail@plt+0x8b2c>
   1a064:	pop	{r4, pc}
   1a068:	bl	1a418 <__assert_fail@plt+0x8f3c>
   1a06c:	mov	r0, #0
   1a070:	pop	{r4, pc}
   1a074:	bl	113a4 <__errno_location@plt>
   1a078:	mov	r3, #12
   1a07c:	str	r3, [r0]
   1a080:	mov	r0, #0
   1a084:	pop	{r4, pc}
   1a088:	push	{r4, lr}
   1a08c:	mov	r0, #1
   1a090:	bl	11748 <__assert_fail@plt+0x26c>
   1a094:	pop	{r4, pc}
   1a098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a09c:	sub	sp, sp, #12
   1a0a0:	str	r0, [sp, #4]
   1a0a4:	mov	r6, r1
   1a0a8:	mov	fp, r2
   1a0ac:	mov	r8, r3
   1a0b0:	bl	11380 <strlen@plt>
   1a0b4:	str	r0, [sp]
   1a0b8:	ldr	r4, [r6]
   1a0bc:	cmp	r4, #0
   1a0c0:	beq	1a168 <__assert_fail@plt+0x8c8c>
   1a0c4:	mov	r5, fp
   1a0c8:	mov	sl, #0
   1a0cc:	mvn	r9, #0
   1a0d0:	mov	r7, sl
   1a0d4:	b	1a0f4 <__assert_fail@plt+0x8c18>
   1a0d8:	mov	r9, r7
   1a0dc:	b	1a15c <__assert_fail@plt+0x8c80>
   1a0e0:	add	r7, r7, #1
   1a0e4:	ldr	r4, [r6, #4]!
   1a0e8:	add	r5, r5, r8
   1a0ec:	cmp	r4, #0
   1a0f0:	beq	1a154 <__assert_fail@plt+0x8c78>
   1a0f4:	ldr	r2, [sp]
   1a0f8:	ldr	r1, [sp, #4]
   1a0fc:	mov	r0, r4
   1a100:	bl	11494 <strncmp@plt>
   1a104:	cmp	r0, #0
   1a108:	bne	1a0e0 <__assert_fail@plt+0x8c04>
   1a10c:	mov	r0, r4
   1a110:	bl	11380 <strlen@plt>
   1a114:	ldr	r3, [sp]
   1a118:	cmp	r3, r0
   1a11c:	beq	1a0d8 <__assert_fail@plt+0x8bfc>
   1a120:	cmn	r9, #1
   1a124:	moveq	r9, r7
   1a128:	beq	1a0e0 <__assert_fail@plt+0x8c04>
   1a12c:	cmp	fp, #0
   1a130:	moveq	sl, #1
   1a134:	beq	1a0e0 <__assert_fail@plt+0x8c04>
   1a138:	mov	r2, r8
   1a13c:	mov	r1, r5
   1a140:	mla	r0, r8, r9, fp
   1a144:	bl	11218 <memcmp@plt>
   1a148:	cmp	r0, #0
   1a14c:	movne	sl, #1
   1a150:	b	1a0e0 <__assert_fail@plt+0x8c04>
   1a154:	cmp	sl, #0
   1a158:	mvnne	r9, #1
   1a15c:	mov	r0, r9
   1a160:	add	sp, sp, #12
   1a164:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a168:	mvn	r9, #0
   1a16c:	b	1a15c <__assert_fail@plt+0x8c80>
   1a170:	push	{r4, r5, r6, lr}
   1a174:	mov	r6, r0
   1a178:	ldr	r0, [r1]
   1a17c:	cmp	r0, #0
   1a180:	beq	1a1bc <__assert_fail@plt+0x8ce0>
   1a184:	mov	r4, r1
   1a188:	mov	r5, #0
   1a18c:	mov	r1, r6
   1a190:	bl	1117c <strcmp@plt>
   1a194:	cmp	r0, #0
   1a198:	beq	1a1b4 <__assert_fail@plt+0x8cd8>
   1a19c:	add	r5, r5, #1
   1a1a0:	ldr	r0, [r4, #4]!
   1a1a4:	cmp	r0, #0
   1a1a8:	bne	1a18c <__assert_fail@plt+0x8cb0>
   1a1ac:	mvn	r0, #0
   1a1b0:	pop	{r4, r5, r6, pc}
   1a1b4:	mov	r0, r5
   1a1b8:	pop	{r4, r5, r6, pc}
   1a1bc:	mvn	r0, #0
   1a1c0:	pop	{r4, r5, r6, pc}
   1a1c4:	push	{r4, r5, r6, lr}
   1a1c8:	sub	sp, sp, #8
   1a1cc:	mov	r5, r0
   1a1d0:	mov	r4, r1
   1a1d4:	cmn	r2, #1
   1a1d8:	mov	r2, #5
   1a1dc:	ldreq	r1, [pc, #76]	; 1a230 <__assert_fail@plt+0x8d54>
   1a1e0:	ldrne	r1, [pc, #76]	; 1a234 <__assert_fail@plt+0x8d58>
   1a1e4:	mov	r0, #0
   1a1e8:	bl	11230 <dcgettext@plt>
   1a1ec:	mov	r6, r0
   1a1f0:	mov	r2, r4
   1a1f4:	mov	r1, #8
   1a1f8:	mov	r0, #0
   1a1fc:	bl	189d0 <__assert_fail@plt+0x74f4>
   1a200:	mov	r4, r0
   1a204:	mov	r1, r5
   1a208:	mov	r0, #1
   1a20c:	bl	18c60 <__assert_fail@plt+0x7784>
   1a210:	str	r0, [sp]
   1a214:	mov	r3, r4
   1a218:	mov	r2, r6
   1a21c:	mov	r1, #0
   1a220:	mov	r0, r1
   1a224:	bl	112d8 <error@plt>
   1a228:	add	sp, sp, #8
   1a22c:	pop	{r4, r5, r6, pc}
   1a230:	andeq	sp, r1, r4, asr #3
   1a234:	andeq	sp, r1, r0, ror #3
   1a238:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a23c:	mov	r7, r0
   1a240:	mov	r4, r1
   1a244:	mov	r8, r2
   1a248:	mov	r2, #5
   1a24c:	ldr	r1, [pc, #224]	; 1a334 <__assert_fail@plt+0x8e58>
   1a250:	mov	r0, #0
   1a254:	bl	11230 <dcgettext@plt>
   1a258:	ldr	r3, [pc, #216]	; 1a338 <__assert_fail@plt+0x8e5c>
   1a25c:	ldr	r1, [r3]
   1a260:	bl	11158 <fputs_unlocked@plt>
   1a264:	ldr	r5, [r7]
   1a268:	cmp	r5, #0
   1a26c:	beq	1a2fc <__assert_fail@plt+0x8e20>
   1a270:	mov	r9, #0
   1a274:	mov	r6, r9
   1a278:	ldr	sl, [pc, #184]	; 1a338 <__assert_fail@plt+0x8e5c>
   1a27c:	b	1a2b8 <__assert_fail@plt+0x8ddc>
   1a280:	ldr	r9, [sl]
   1a284:	mov	r0, r5
   1a288:	bl	18c70 <__assert_fail@plt+0x7794>
   1a28c:	mov	r3, r0
   1a290:	ldr	r2, [pc, #164]	; 1a33c <__assert_fail@plt+0x8e60>
   1a294:	mov	r1, #1
   1a298:	mov	r0, r9
   1a29c:	bl	11404 <__fprintf_chk@plt>
   1a2a0:	mov	r9, r4
   1a2a4:	add	r6, r6, #1
   1a2a8:	ldr	r5, [r7, #4]!
   1a2ac:	add	r4, r4, r8
   1a2b0:	cmp	r5, #0
   1a2b4:	beq	1a2fc <__assert_fail@plt+0x8e20>
   1a2b8:	cmp	r6, #0
   1a2bc:	beq	1a280 <__assert_fail@plt+0x8da4>
   1a2c0:	mov	r2, r8
   1a2c4:	mov	r1, r4
   1a2c8:	mov	r0, r9
   1a2cc:	bl	11218 <memcmp@plt>
   1a2d0:	cmp	r0, #0
   1a2d4:	bne	1a280 <__assert_fail@plt+0x8da4>
   1a2d8:	ldr	fp, [sl]
   1a2dc:	mov	r0, r5
   1a2e0:	bl	18c70 <__assert_fail@plt+0x7794>
   1a2e4:	mov	r3, r0
   1a2e8:	ldr	r2, [pc, #80]	; 1a340 <__assert_fail@plt+0x8e64>
   1a2ec:	mov	r1, #1
   1a2f0:	mov	r0, fp
   1a2f4:	bl	11404 <__fprintf_chk@plt>
   1a2f8:	b	1a2a4 <__assert_fail@plt+0x8dc8>
   1a2fc:	ldr	r3, [pc, #52]	; 1a338 <__assert_fail@plt+0x8e5c>
   1a300:	ldr	r0, [r3]
   1a304:	ldr	r3, [r0, #20]
   1a308:	ldr	r2, [r0, #24]
   1a30c:	cmp	r3, r2
   1a310:	bcs	1a328 <__assert_fail@plt+0x8e4c>
   1a314:	add	r2, r3, #1
   1a318:	str	r2, [r0, #20]
   1a31c:	mov	r2, #10
   1a320:	strb	r2, [r3]
   1a324:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a328:	mov	r1, #10
   1a32c:	bl	11434 <__overflow@plt>
   1a330:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a334:	andeq	sp, r1, r0, lsl #4
   1a338:	ldrdeq	lr, [r2], -r8
   1a33c:	andeq	sp, r1, r8, lsl r2
   1a340:	andeq	ip, r1, r4, asr #12
   1a344:	push	{r4, r5, r6, r7, r8, lr}
   1a348:	mov	r7, r0
   1a34c:	mov	r5, r1
   1a350:	mov	r4, r2
   1a354:	mov	r6, r3
   1a358:	ldrb	r3, [sp, #32]
   1a35c:	cmp	r3, #0
   1a360:	beq	1a3b0 <__assert_fail@plt+0x8ed4>
   1a364:	ldr	r3, [sp, #24]
   1a368:	mov	r2, r6
   1a36c:	mov	r1, r4
   1a370:	mov	r0, r5
   1a374:	bl	1a098 <__assert_fail@plt+0x8bbc>
   1a378:	cmp	r0, #0
   1a37c:	popge	{r4, r5, r6, r7, r8, pc}
   1a380:	mov	r2, r0
   1a384:	mov	r1, r5
   1a388:	mov	r0, r7
   1a38c:	bl	1a1c4 <__assert_fail@plt+0x8ce8>
   1a390:	ldr	r2, [sp, #24]
   1a394:	mov	r1, r6
   1a398:	mov	r0, r4
   1a39c:	bl	1a238 <__assert_fail@plt+0x8d5c>
   1a3a0:	ldr	r3, [sp, #28]
   1a3a4:	blx	r3
   1a3a8:	mvn	r0, #0
   1a3ac:	pop	{r4, r5, r6, r7, r8, pc}
   1a3b0:	mov	r1, r2
   1a3b4:	mov	r0, r5
   1a3b8:	bl	1a170 <__assert_fail@plt+0x8c94>
   1a3bc:	b	1a378 <__assert_fail@plt+0x8e9c>
   1a3c0:	push	{r4, r5, r6, r7, r8, lr}
   1a3c4:	ldr	r6, [r1]
   1a3c8:	cmp	r6, #0
   1a3cc:	beq	1a410 <__assert_fail@plt+0x8f34>
   1a3d0:	mov	r7, r3
   1a3d4:	mov	r8, r0
   1a3d8:	mov	r4, r2
   1a3dc:	mov	r5, r1
   1a3e0:	mov	r2, r7
   1a3e4:	mov	r1, r4
   1a3e8:	mov	r0, r8
   1a3ec:	bl	11218 <memcmp@plt>
   1a3f0:	cmp	r0, #0
   1a3f4:	beq	1a408 <__assert_fail@plt+0x8f2c>
   1a3f8:	ldr	r6, [r5, #4]!
   1a3fc:	add	r4, r4, r7
   1a400:	cmp	r6, #0
   1a404:	bne	1a3e0 <__assert_fail@plt+0x8f04>
   1a408:	mov	r0, r6
   1a40c:	pop	{r4, r5, r6, r7, r8, pc}
   1a410:	mov	r6, #0
   1a414:	b	1a408 <__assert_fail@plt+0x8f2c>
   1a418:	push	{r4, r5, lr}
   1a41c:	sub	sp, sp, #12
   1a420:	mov	r5, r0
   1a424:	bl	113a4 <__errno_location@plt>
   1a428:	mov	r4, r0
   1a42c:	ldr	r3, [r0]
   1a430:	str	r3, [sp]
   1a434:	str	r3, [sp, #4]
   1a438:	mov	r3, #0
   1a43c:	str	r3, [r0]
   1a440:	mov	r0, r5
   1a444:	bl	111c4 <free@plt>
   1a448:	ldr	r3, [r4]
   1a44c:	cmp	r3, #0
   1a450:	moveq	r3, #4
   1a454:	movne	r3, #0
   1a458:	add	r2, sp, #8
   1a45c:	add	r3, r2, r3
   1a460:	ldr	r3, [r3, #-8]
   1a464:	str	r3, [r4]
   1a468:	add	sp, sp, #12
   1a46c:	pop	{r4, r5, pc}
   1a470:	push	{r4, lr}
   1a474:	mov	r0, #14
   1a478:	bl	11464 <nl_langinfo@plt>
   1a47c:	cmp	r0, #0
   1a480:	beq	1a498 <__assert_fail@plt+0x8fbc>
   1a484:	ldrb	r2, [r0]
   1a488:	ldr	r3, [pc, #16]	; 1a4a0 <__assert_fail@plt+0x8fc4>
   1a48c:	cmp	r2, #0
   1a490:	moveq	r0, r3
   1a494:	pop	{r4, pc}
   1a498:	ldr	r0, [pc]	; 1a4a0 <__assert_fail@plt+0x8fc4>
   1a49c:	pop	{r4, pc}
   1a4a0:	andeq	sp, r1, r0, lsr #4
   1a4a4:	push	{r4, r5, r6, r7, lr}
   1a4a8:	sub	sp, sp, #12
   1a4ac:	mov	r7, r1
   1a4b0:	mov	r5, r2
   1a4b4:	subs	r6, r0, #0
   1a4b8:	addeq	r6, sp, #4
   1a4bc:	mov	r0, r6
   1a4c0:	bl	112cc <mbrtowc@plt>
   1a4c4:	mov	r4, r0
   1a4c8:	cmp	r5, #0
   1a4cc:	cmnne	r0, #3
   1a4d0:	bhi	1a4e0 <__assert_fail@plt+0x9004>
   1a4d4:	mov	r0, r4
   1a4d8:	add	sp, sp, #12
   1a4dc:	pop	{r4, r5, r6, r7, pc}
   1a4e0:	mov	r0, #0
   1a4e4:	bl	1a548 <__assert_fail@plt+0x906c>
   1a4e8:	cmp	r0, #0
   1a4ec:	ldrbeq	r3, [r7]
   1a4f0:	streq	r3, [r6]
   1a4f4:	moveq	r4, #1
   1a4f8:	b	1a4d4 <__assert_fail@plt+0x8ff8>
   1a4fc:	push	{r4, r5, r6, lr}
   1a500:	mov	r6, r0
   1a504:	mov	r5, r1
   1a508:	subs	r4, r2, #0
   1a50c:	beq	1a538 <__assert_fail@plt+0x905c>
   1a510:	mov	r1, r4
   1a514:	mvn	r0, #0
   1a518:	bl	1a650 <__assert_fail@plt+0x9174>
   1a51c:	cmp	r0, r5
   1a520:	bcs	1a538 <__assert_fail@plt+0x905c>
   1a524:	bl	113a4 <__errno_location@plt>
   1a528:	mov	r3, #12
   1a52c:	str	r3, [r0]
   1a530:	mov	r0, #0
   1a534:	pop	{r4, r5, r6, pc}
   1a538:	mul	r1, r5, r4
   1a53c:	mov	r0, r6
   1a540:	bl	1a038 <__assert_fail@plt+0x8b5c>
   1a544:	pop	{r4, r5, r6, pc}
   1a548:	push	{lr}		; (str lr, [sp, #-4]!)
   1a54c:	sub	sp, sp, #268	; 0x10c
   1a550:	ldr	r2, [pc, #68]	; 1a59c <__assert_fail@plt+0x90c0>
   1a554:	add	r1, sp, #4
   1a558:	bl	1a5a8 <__assert_fail@plt+0x90cc>
   1a55c:	cmp	r0, #0
   1a560:	movne	r0, #0
   1a564:	bne	1a594 <__assert_fail@plt+0x90b8>
   1a568:	ldr	r1, [pc, #48]	; 1a5a0 <__assert_fail@plt+0x90c4>
   1a56c:	add	r0, sp, #4
   1a570:	bl	1117c <strcmp@plt>
   1a574:	cmp	r0, #0
   1a578:	moveq	r0, #0
   1a57c:	beq	1a594 <__assert_fail@plt+0x90b8>
   1a580:	ldr	r1, [pc, #28]	; 1a5a4 <__assert_fail@plt+0x90c8>
   1a584:	add	r0, sp, #4
   1a588:	bl	1117c <strcmp@plt>
   1a58c:	adds	r0, r0, #0
   1a590:	movne	r0, #1
   1a594:	add	sp, sp, #268	; 0x10c
   1a598:	pop	{pc}		; (ldr pc, [sp], #4)
   1a59c:	andeq	r0, r0, r1, lsl #2
   1a5a0:	andeq	sp, r1, r8, lsr #4
   1a5a4:	andeq	sp, r1, ip, lsr #4
   1a5a8:	push	{r4, r5, r6, lr}
   1a5ac:	mov	r6, r1
   1a5b0:	mov	r4, r2
   1a5b4:	mov	r1, #0
   1a5b8:	bl	11440 <setlocale@plt>
   1a5bc:	subs	r5, r0, #0
   1a5c0:	beq	1a5e4 <__assert_fail@plt+0x9108>
   1a5c4:	mov	r0, r5
   1a5c8:	bl	11380 <strlen@plt>
   1a5cc:	cmp	r4, r0
   1a5d0:	bhi	1a5fc <__assert_fail@plt+0x9120>
   1a5d4:	cmp	r4, #0
   1a5d8:	bne	1a614 <__assert_fail@plt+0x9138>
   1a5dc:	mov	r0, #34	; 0x22
   1a5e0:	pop	{r4, r5, r6, pc}
   1a5e4:	cmp	r4, #0
   1a5e8:	beq	1a638 <__assert_fail@plt+0x915c>
   1a5ec:	mov	r3, #0
   1a5f0:	strb	r3, [r6]
   1a5f4:	mov	r0, #22
   1a5f8:	pop	{r4, r5, r6, pc}
   1a5fc:	add	r2, r0, #1
   1a600:	mov	r1, r5
   1a604:	mov	r0, r6
   1a608:	bl	111e8 <memcpy@plt>
   1a60c:	mov	r0, #0
   1a610:	pop	{r4, r5, r6, pc}
   1a614:	sub	r4, r4, #1
   1a618:	mov	r2, r4
   1a61c:	mov	r1, r5
   1a620:	mov	r0, r6
   1a624:	bl	111e8 <memcpy@plt>
   1a628:	mov	r3, #0
   1a62c:	strb	r3, [r6, r4]
   1a630:	mov	r0, #34	; 0x22
   1a634:	pop	{r4, r5, r6, pc}
   1a638:	mov	r0, #22
   1a63c:	pop	{r4, r5, r6, pc}
   1a640:	push	{r4, lr}
   1a644:	mov	r1, #0
   1a648:	bl	11440 <setlocale@plt>
   1a64c:	pop	{r4, pc}
   1a650:	subs	r2, r1, #1
   1a654:	bxeq	lr
   1a658:	bcc	1a830 <__assert_fail@plt+0x9354>
   1a65c:	cmp	r0, r1
   1a660:	bls	1a814 <__assert_fail@plt+0x9338>
   1a664:	tst	r1, r2
   1a668:	beq	1a820 <__assert_fail@plt+0x9344>
   1a66c:	clz	r3, r0
   1a670:	clz	r2, r1
   1a674:	sub	r3, r2, r3
   1a678:	rsbs	r3, r3, #31
   1a67c:	addne	r3, r3, r3, lsl #1
   1a680:	mov	r2, #0
   1a684:	addne	pc, pc, r3, lsl #2
   1a688:	nop			; (mov r0, r0)
   1a68c:	cmp	r0, r1, lsl #31
   1a690:	adc	r2, r2, r2
   1a694:	subcs	r0, r0, r1, lsl #31
   1a698:	cmp	r0, r1, lsl #30
   1a69c:	adc	r2, r2, r2
   1a6a0:	subcs	r0, r0, r1, lsl #30
   1a6a4:	cmp	r0, r1, lsl #29
   1a6a8:	adc	r2, r2, r2
   1a6ac:	subcs	r0, r0, r1, lsl #29
   1a6b0:	cmp	r0, r1, lsl #28
   1a6b4:	adc	r2, r2, r2
   1a6b8:	subcs	r0, r0, r1, lsl #28
   1a6bc:	cmp	r0, r1, lsl #27
   1a6c0:	adc	r2, r2, r2
   1a6c4:	subcs	r0, r0, r1, lsl #27
   1a6c8:	cmp	r0, r1, lsl #26
   1a6cc:	adc	r2, r2, r2
   1a6d0:	subcs	r0, r0, r1, lsl #26
   1a6d4:	cmp	r0, r1, lsl #25
   1a6d8:	adc	r2, r2, r2
   1a6dc:	subcs	r0, r0, r1, lsl #25
   1a6e0:	cmp	r0, r1, lsl #24
   1a6e4:	adc	r2, r2, r2
   1a6e8:	subcs	r0, r0, r1, lsl #24
   1a6ec:	cmp	r0, r1, lsl #23
   1a6f0:	adc	r2, r2, r2
   1a6f4:	subcs	r0, r0, r1, lsl #23
   1a6f8:	cmp	r0, r1, lsl #22
   1a6fc:	adc	r2, r2, r2
   1a700:	subcs	r0, r0, r1, lsl #22
   1a704:	cmp	r0, r1, lsl #21
   1a708:	adc	r2, r2, r2
   1a70c:	subcs	r0, r0, r1, lsl #21
   1a710:	cmp	r0, r1, lsl #20
   1a714:	adc	r2, r2, r2
   1a718:	subcs	r0, r0, r1, lsl #20
   1a71c:	cmp	r0, r1, lsl #19
   1a720:	adc	r2, r2, r2
   1a724:	subcs	r0, r0, r1, lsl #19
   1a728:	cmp	r0, r1, lsl #18
   1a72c:	adc	r2, r2, r2
   1a730:	subcs	r0, r0, r1, lsl #18
   1a734:	cmp	r0, r1, lsl #17
   1a738:	adc	r2, r2, r2
   1a73c:	subcs	r0, r0, r1, lsl #17
   1a740:	cmp	r0, r1, lsl #16
   1a744:	adc	r2, r2, r2
   1a748:	subcs	r0, r0, r1, lsl #16
   1a74c:	cmp	r0, r1, lsl #15
   1a750:	adc	r2, r2, r2
   1a754:	subcs	r0, r0, r1, lsl #15
   1a758:	cmp	r0, r1, lsl #14
   1a75c:	adc	r2, r2, r2
   1a760:	subcs	r0, r0, r1, lsl #14
   1a764:	cmp	r0, r1, lsl #13
   1a768:	adc	r2, r2, r2
   1a76c:	subcs	r0, r0, r1, lsl #13
   1a770:	cmp	r0, r1, lsl #12
   1a774:	adc	r2, r2, r2
   1a778:	subcs	r0, r0, r1, lsl #12
   1a77c:	cmp	r0, r1, lsl #11
   1a780:	adc	r2, r2, r2
   1a784:	subcs	r0, r0, r1, lsl #11
   1a788:	cmp	r0, r1, lsl #10
   1a78c:	adc	r2, r2, r2
   1a790:	subcs	r0, r0, r1, lsl #10
   1a794:	cmp	r0, r1, lsl #9
   1a798:	adc	r2, r2, r2
   1a79c:	subcs	r0, r0, r1, lsl #9
   1a7a0:	cmp	r0, r1, lsl #8
   1a7a4:	adc	r2, r2, r2
   1a7a8:	subcs	r0, r0, r1, lsl #8
   1a7ac:	cmp	r0, r1, lsl #7
   1a7b0:	adc	r2, r2, r2
   1a7b4:	subcs	r0, r0, r1, lsl #7
   1a7b8:	cmp	r0, r1, lsl #6
   1a7bc:	adc	r2, r2, r2
   1a7c0:	subcs	r0, r0, r1, lsl #6
   1a7c4:	cmp	r0, r1, lsl #5
   1a7c8:	adc	r2, r2, r2
   1a7cc:	subcs	r0, r0, r1, lsl #5
   1a7d0:	cmp	r0, r1, lsl #4
   1a7d4:	adc	r2, r2, r2
   1a7d8:	subcs	r0, r0, r1, lsl #4
   1a7dc:	cmp	r0, r1, lsl #3
   1a7e0:	adc	r2, r2, r2
   1a7e4:	subcs	r0, r0, r1, lsl #3
   1a7e8:	cmp	r0, r1, lsl #2
   1a7ec:	adc	r2, r2, r2
   1a7f0:	subcs	r0, r0, r1, lsl #2
   1a7f4:	cmp	r0, r1, lsl #1
   1a7f8:	adc	r2, r2, r2
   1a7fc:	subcs	r0, r0, r1, lsl #1
   1a800:	cmp	r0, r1
   1a804:	adc	r2, r2, r2
   1a808:	subcs	r0, r0, r1
   1a80c:	mov	r0, r2
   1a810:	bx	lr
   1a814:	moveq	r0, #1
   1a818:	movne	r0, #0
   1a81c:	bx	lr
   1a820:	clz	r2, r1
   1a824:	rsb	r2, r2, #31
   1a828:	lsr	r0, r0, r2
   1a82c:	bx	lr
   1a830:	cmp	r0, #0
   1a834:	mvnne	r0, #0
   1a838:	b	1af64 <__assert_fail@plt+0x9a88>
   1a83c:	cmp	r1, #0
   1a840:	beq	1a830 <__assert_fail@plt+0x9354>
   1a844:	push	{r0, r1, lr}
   1a848:	bl	1a650 <__assert_fail@plt+0x9174>
   1a84c:	pop	{r1, r2, lr}
   1a850:	mul	r3, r2, r0
   1a854:	sub	r1, r1, r3
   1a858:	bx	lr
   1a85c:	cmp	r1, #0
   1a860:	beq	1aa6c <__assert_fail@plt+0x9590>
   1a864:	eor	ip, r0, r1
   1a868:	rsbmi	r1, r1, #0
   1a86c:	subs	r2, r1, #1
   1a870:	beq	1aa38 <__assert_fail@plt+0x955c>
   1a874:	movs	r3, r0
   1a878:	rsbmi	r3, r0, #0
   1a87c:	cmp	r3, r1
   1a880:	bls	1aa44 <__assert_fail@plt+0x9568>
   1a884:	tst	r1, r2
   1a888:	beq	1aa54 <__assert_fail@plt+0x9578>
   1a88c:	clz	r2, r3
   1a890:	clz	r0, r1
   1a894:	sub	r2, r0, r2
   1a898:	rsbs	r2, r2, #31
   1a89c:	addne	r2, r2, r2, lsl #1
   1a8a0:	mov	r0, #0
   1a8a4:	addne	pc, pc, r2, lsl #2
   1a8a8:	nop			; (mov r0, r0)
   1a8ac:	cmp	r3, r1, lsl #31
   1a8b0:	adc	r0, r0, r0
   1a8b4:	subcs	r3, r3, r1, lsl #31
   1a8b8:	cmp	r3, r1, lsl #30
   1a8bc:	adc	r0, r0, r0
   1a8c0:	subcs	r3, r3, r1, lsl #30
   1a8c4:	cmp	r3, r1, lsl #29
   1a8c8:	adc	r0, r0, r0
   1a8cc:	subcs	r3, r3, r1, lsl #29
   1a8d0:	cmp	r3, r1, lsl #28
   1a8d4:	adc	r0, r0, r0
   1a8d8:	subcs	r3, r3, r1, lsl #28
   1a8dc:	cmp	r3, r1, lsl #27
   1a8e0:	adc	r0, r0, r0
   1a8e4:	subcs	r3, r3, r1, lsl #27
   1a8e8:	cmp	r3, r1, lsl #26
   1a8ec:	adc	r0, r0, r0
   1a8f0:	subcs	r3, r3, r1, lsl #26
   1a8f4:	cmp	r3, r1, lsl #25
   1a8f8:	adc	r0, r0, r0
   1a8fc:	subcs	r3, r3, r1, lsl #25
   1a900:	cmp	r3, r1, lsl #24
   1a904:	adc	r0, r0, r0
   1a908:	subcs	r3, r3, r1, lsl #24
   1a90c:	cmp	r3, r1, lsl #23
   1a910:	adc	r0, r0, r0
   1a914:	subcs	r3, r3, r1, lsl #23
   1a918:	cmp	r3, r1, lsl #22
   1a91c:	adc	r0, r0, r0
   1a920:	subcs	r3, r3, r1, lsl #22
   1a924:	cmp	r3, r1, lsl #21
   1a928:	adc	r0, r0, r0
   1a92c:	subcs	r3, r3, r1, lsl #21
   1a930:	cmp	r3, r1, lsl #20
   1a934:	adc	r0, r0, r0
   1a938:	subcs	r3, r3, r1, lsl #20
   1a93c:	cmp	r3, r1, lsl #19
   1a940:	adc	r0, r0, r0
   1a944:	subcs	r3, r3, r1, lsl #19
   1a948:	cmp	r3, r1, lsl #18
   1a94c:	adc	r0, r0, r0
   1a950:	subcs	r3, r3, r1, lsl #18
   1a954:	cmp	r3, r1, lsl #17
   1a958:	adc	r0, r0, r0
   1a95c:	subcs	r3, r3, r1, lsl #17
   1a960:	cmp	r3, r1, lsl #16
   1a964:	adc	r0, r0, r0
   1a968:	subcs	r3, r3, r1, lsl #16
   1a96c:	cmp	r3, r1, lsl #15
   1a970:	adc	r0, r0, r0
   1a974:	subcs	r3, r3, r1, lsl #15
   1a978:	cmp	r3, r1, lsl #14
   1a97c:	adc	r0, r0, r0
   1a980:	subcs	r3, r3, r1, lsl #14
   1a984:	cmp	r3, r1, lsl #13
   1a988:	adc	r0, r0, r0
   1a98c:	subcs	r3, r3, r1, lsl #13
   1a990:	cmp	r3, r1, lsl #12
   1a994:	adc	r0, r0, r0
   1a998:	subcs	r3, r3, r1, lsl #12
   1a99c:	cmp	r3, r1, lsl #11
   1a9a0:	adc	r0, r0, r0
   1a9a4:	subcs	r3, r3, r1, lsl #11
   1a9a8:	cmp	r3, r1, lsl #10
   1a9ac:	adc	r0, r0, r0
   1a9b0:	subcs	r3, r3, r1, lsl #10
   1a9b4:	cmp	r3, r1, lsl #9
   1a9b8:	adc	r0, r0, r0
   1a9bc:	subcs	r3, r3, r1, lsl #9
   1a9c0:	cmp	r3, r1, lsl #8
   1a9c4:	adc	r0, r0, r0
   1a9c8:	subcs	r3, r3, r1, lsl #8
   1a9cc:	cmp	r3, r1, lsl #7
   1a9d0:	adc	r0, r0, r0
   1a9d4:	subcs	r3, r3, r1, lsl #7
   1a9d8:	cmp	r3, r1, lsl #6
   1a9dc:	adc	r0, r0, r0
   1a9e0:	subcs	r3, r3, r1, lsl #6
   1a9e4:	cmp	r3, r1, lsl #5
   1a9e8:	adc	r0, r0, r0
   1a9ec:	subcs	r3, r3, r1, lsl #5
   1a9f0:	cmp	r3, r1, lsl #4
   1a9f4:	adc	r0, r0, r0
   1a9f8:	subcs	r3, r3, r1, lsl #4
   1a9fc:	cmp	r3, r1, lsl #3
   1aa00:	adc	r0, r0, r0
   1aa04:	subcs	r3, r3, r1, lsl #3
   1aa08:	cmp	r3, r1, lsl #2
   1aa0c:	adc	r0, r0, r0
   1aa10:	subcs	r3, r3, r1, lsl #2
   1aa14:	cmp	r3, r1, lsl #1
   1aa18:	adc	r0, r0, r0
   1aa1c:	subcs	r3, r3, r1, lsl #1
   1aa20:	cmp	r3, r1
   1aa24:	adc	r0, r0, r0
   1aa28:	subcs	r3, r3, r1
   1aa2c:	cmp	ip, #0
   1aa30:	rsbmi	r0, r0, #0
   1aa34:	bx	lr
   1aa38:	teq	ip, r0
   1aa3c:	rsbmi	r0, r0, #0
   1aa40:	bx	lr
   1aa44:	movcc	r0, #0
   1aa48:	asreq	r0, ip, #31
   1aa4c:	orreq	r0, r0, #1
   1aa50:	bx	lr
   1aa54:	clz	r2, r1
   1aa58:	rsb	r2, r2, #31
   1aa5c:	cmp	ip, #0
   1aa60:	lsr	r0, r3, r2
   1aa64:	rsbmi	r0, r0, #0
   1aa68:	bx	lr
   1aa6c:	cmp	r0, #0
   1aa70:	mvngt	r0, #-2147483648	; 0x80000000
   1aa74:	movlt	r0, #-2147483648	; 0x80000000
   1aa78:	b	1af64 <__assert_fail@plt+0x9a88>
   1aa7c:	cmp	r1, #0
   1aa80:	beq	1aa6c <__assert_fail@plt+0x9590>
   1aa84:	push	{r0, r1, lr}
   1aa88:	bl	1a864 <__assert_fail@plt+0x9388>
   1aa8c:	pop	{r1, r2, lr}
   1aa90:	mul	r3, r2, r0
   1aa94:	sub	r1, r1, r3
   1aa98:	bx	lr
   1aa9c:	eor	r1, r1, #-2147483648	; 0x80000000
   1aaa0:	b	1aaa8 <__assert_fail@plt+0x95cc>
   1aaa4:	eor	r3, r3, #-2147483648	; 0x80000000
   1aaa8:	push	{r4, r5, lr}
   1aaac:	lsl	r4, r1, #1
   1aab0:	lsl	r5, r3, #1
   1aab4:	teq	r4, r5
   1aab8:	teqeq	r0, r2
   1aabc:	orrsne	ip, r4, r0
   1aac0:	orrsne	ip, r5, r2
   1aac4:	mvnsne	ip, r4, asr #21
   1aac8:	mvnsne	ip, r5, asr #21
   1aacc:	beq	1acb8 <__assert_fail@plt+0x97dc>
   1aad0:	lsr	r4, r4, #21
   1aad4:	rsbs	r5, r4, r5, lsr #21
   1aad8:	rsblt	r5, r5, #0
   1aadc:	ble	1aafc <__assert_fail@plt+0x9620>
   1aae0:	add	r4, r4, r5
   1aae4:	eor	r2, r0, r2
   1aae8:	eor	r3, r1, r3
   1aaec:	eor	r0, r2, r0
   1aaf0:	eor	r1, r3, r1
   1aaf4:	eor	r2, r0, r2
   1aaf8:	eor	r3, r1, r3
   1aafc:	cmp	r5, #54	; 0x36
   1ab00:	pophi	{r4, r5, pc}
   1ab04:	tst	r1, #-2147483648	; 0x80000000
   1ab08:	lsl	r1, r1, #12
   1ab0c:	mov	ip, #1048576	; 0x100000
   1ab10:	orr	r1, ip, r1, lsr #12
   1ab14:	beq	1ab20 <__assert_fail@plt+0x9644>
   1ab18:	rsbs	r0, r0, #0
   1ab1c:	rsc	r1, r1, #0
   1ab20:	tst	r3, #-2147483648	; 0x80000000
   1ab24:	lsl	r3, r3, #12
   1ab28:	orr	r3, ip, r3, lsr #12
   1ab2c:	beq	1ab38 <__assert_fail@plt+0x965c>
   1ab30:	rsbs	r2, r2, #0
   1ab34:	rsc	r3, r3, #0
   1ab38:	teq	r4, r5
   1ab3c:	beq	1aca0 <__assert_fail@plt+0x97c4>
   1ab40:	sub	r4, r4, #1
   1ab44:	rsbs	lr, r5, #32
   1ab48:	blt	1ab64 <__assert_fail@plt+0x9688>
   1ab4c:	lsl	ip, r2, lr
   1ab50:	adds	r0, r0, r2, lsr r5
   1ab54:	adc	r1, r1, #0
   1ab58:	adds	r0, r0, r3, lsl lr
   1ab5c:	adcs	r1, r1, r3, asr r5
   1ab60:	b	1ab80 <__assert_fail@plt+0x96a4>
   1ab64:	sub	r5, r5, #32
   1ab68:	add	lr, lr, #32
   1ab6c:	cmp	r2, #1
   1ab70:	lsl	ip, r3, lr
   1ab74:	orrcs	ip, ip, #2
   1ab78:	adds	r0, r0, r3, asr r5
   1ab7c:	adcs	r1, r1, r3, asr #31
   1ab80:	and	r5, r1, #-2147483648	; 0x80000000
   1ab84:	bpl	1ab94 <__assert_fail@plt+0x96b8>
   1ab88:	rsbs	ip, ip, #0
   1ab8c:	rscs	r0, r0, #0
   1ab90:	rsc	r1, r1, #0
   1ab94:	cmp	r1, #1048576	; 0x100000
   1ab98:	bcc	1abd8 <__assert_fail@plt+0x96fc>
   1ab9c:	cmp	r1, #2097152	; 0x200000
   1aba0:	bcc	1abc0 <__assert_fail@plt+0x96e4>
   1aba4:	lsrs	r1, r1, #1
   1aba8:	rrxs	r0, r0
   1abac:	rrx	ip, ip
   1abb0:	add	r4, r4, #1
   1abb4:	lsl	r2, r4, #21
   1abb8:	cmn	r2, #4194304	; 0x400000
   1abbc:	bcs	1ad18 <__assert_fail@plt+0x983c>
   1abc0:	cmp	ip, #-2147483648	; 0x80000000
   1abc4:	lsrseq	ip, r0, #1
   1abc8:	adcs	r0, r0, #0
   1abcc:	adc	r1, r1, r4, lsl #20
   1abd0:	orr	r1, r1, r5
   1abd4:	pop	{r4, r5, pc}
   1abd8:	lsls	ip, ip, #1
   1abdc:	adcs	r0, r0, r0
   1abe0:	adc	r1, r1, r1
   1abe4:	tst	r1, #1048576	; 0x100000
   1abe8:	sub	r4, r4, #1
   1abec:	bne	1abc0 <__assert_fail@plt+0x96e4>
   1abf0:	teq	r1, #0
   1abf4:	moveq	r1, r0
   1abf8:	moveq	r0, #0
   1abfc:	clz	r3, r1
   1ac00:	addeq	r3, r3, #32
   1ac04:	sub	r3, r3, #11
   1ac08:	subs	r2, r3, #32
   1ac0c:	bge	1ac30 <__assert_fail@plt+0x9754>
   1ac10:	adds	r2, r2, #12
   1ac14:	ble	1ac2c <__assert_fail@plt+0x9750>
   1ac18:	add	ip, r2, #20
   1ac1c:	rsb	r2, r2, #12
   1ac20:	lsl	r0, r1, ip
   1ac24:	lsr	r1, r1, r2
   1ac28:	b	1ac40 <__assert_fail@plt+0x9764>
   1ac2c:	add	r2, r2, #20
   1ac30:	rsble	ip, r2, #32
   1ac34:	lsl	r1, r1, r2
   1ac38:	orrle	r1, r1, r0, lsr ip
   1ac3c:	lslle	r0, r0, r2
   1ac40:	subs	r4, r4, r3
   1ac44:	addge	r1, r1, r4, lsl #20
   1ac48:	orrge	r1, r1, r5
   1ac4c:	popge	{r4, r5, pc}
   1ac50:	mvn	r4, r4
   1ac54:	subs	r4, r4, #31
   1ac58:	bge	1ac94 <__assert_fail@plt+0x97b8>
   1ac5c:	adds	r4, r4, #12
   1ac60:	bgt	1ac7c <__assert_fail@plt+0x97a0>
   1ac64:	add	r4, r4, #20
   1ac68:	rsb	r2, r4, #32
   1ac6c:	lsr	r0, r0, r4
   1ac70:	orr	r0, r0, r1, lsl r2
   1ac74:	orr	r1, r5, r1, lsr r4
   1ac78:	pop	{r4, r5, pc}
   1ac7c:	rsb	r4, r4, #12
   1ac80:	rsb	r2, r4, #32
   1ac84:	lsr	r0, r0, r2
   1ac88:	orr	r0, r0, r1, lsl r4
   1ac8c:	mov	r1, r5
   1ac90:	pop	{r4, r5, pc}
   1ac94:	lsr	r0, r1, r4
   1ac98:	mov	r1, r5
   1ac9c:	pop	{r4, r5, pc}
   1aca0:	teq	r4, #0
   1aca4:	eor	r3, r3, #1048576	; 0x100000
   1aca8:	eoreq	r1, r1, #1048576	; 0x100000
   1acac:	addeq	r4, r4, #1
   1acb0:	subne	r5, r5, #1
   1acb4:	b	1ab40 <__assert_fail@plt+0x9664>
   1acb8:	mvns	ip, r4, asr #21
   1acbc:	mvnsne	ip, r5, asr #21
   1acc0:	beq	1ad28 <__assert_fail@plt+0x984c>
   1acc4:	teq	r4, r5
   1acc8:	teqeq	r0, r2
   1accc:	beq	1ace0 <__assert_fail@plt+0x9804>
   1acd0:	orrs	ip, r4, r0
   1acd4:	moveq	r1, r3
   1acd8:	moveq	r0, r2
   1acdc:	pop	{r4, r5, pc}
   1ace0:	teq	r1, r3
   1ace4:	movne	r1, #0
   1ace8:	movne	r0, #0
   1acec:	popne	{r4, r5, pc}
   1acf0:	lsrs	ip, r4, #21
   1acf4:	bne	1ad08 <__assert_fail@plt+0x982c>
   1acf8:	lsls	r0, r0, #1
   1acfc:	adcs	r1, r1, r1
   1ad00:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1ad04:	pop	{r4, r5, pc}
   1ad08:	adds	r4, r4, #4194304	; 0x400000
   1ad0c:	addcc	r1, r1, #1048576	; 0x100000
   1ad10:	popcc	{r4, r5, pc}
   1ad14:	and	r5, r1, #-2147483648	; 0x80000000
   1ad18:	orr	r1, r5, #2130706432	; 0x7f000000
   1ad1c:	orr	r1, r1, #15728640	; 0xf00000
   1ad20:	mov	r0, #0
   1ad24:	pop	{r4, r5, pc}
   1ad28:	mvns	ip, r4, asr #21
   1ad2c:	movne	r1, r3
   1ad30:	movne	r0, r2
   1ad34:	mvnseq	ip, r5, asr #21
   1ad38:	movne	r3, r1
   1ad3c:	movne	r2, r0
   1ad40:	orrs	r4, r0, r1, lsl #12
   1ad44:	orrseq	r5, r2, r3, lsl #12
   1ad48:	teqeq	r1, r3
   1ad4c:	orrne	r1, r1, #524288	; 0x80000
   1ad50:	pop	{r4, r5, pc}
   1ad54:	teq	r0, #0
   1ad58:	moveq	r1, #0
   1ad5c:	bxeq	lr
   1ad60:	push	{r4, r5, lr}
   1ad64:	mov	r4, #1024	; 0x400
   1ad68:	add	r4, r4, #50	; 0x32
   1ad6c:	mov	r5, #0
   1ad70:	mov	r1, #0
   1ad74:	b	1abf0 <__assert_fail@plt+0x9714>
   1ad78:	teq	r0, #0
   1ad7c:	moveq	r1, #0
   1ad80:	bxeq	lr
   1ad84:	push	{r4, r5, lr}
   1ad88:	mov	r4, #1024	; 0x400
   1ad8c:	add	r4, r4, #50	; 0x32
   1ad90:	ands	r5, r0, #-2147483648	; 0x80000000
   1ad94:	rsbmi	r0, r0, #0
   1ad98:	mov	r1, #0
   1ad9c:	b	1abf0 <__assert_fail@plt+0x9714>
   1ada0:	lsls	r2, r0, #1
   1ada4:	asr	r1, r2, #3
   1ada8:	rrx	r1, r1
   1adac:	lsl	r0, r2, #28
   1adb0:	andsne	r3, r2, #-16777216	; 0xff000000
   1adb4:	teqne	r3, #-16777216	; 0xff000000
   1adb8:	eorne	r1, r1, #939524096	; 0x38000000
   1adbc:	bxne	lr
   1adc0:	teq	r2, #0
   1adc4:	teqne	r3, #-16777216	; 0xff000000
   1adc8:	bxeq	lr
   1adcc:	push	{r4, r5, lr}
   1add0:	mov	r4, #896	; 0x380
   1add4:	and	r5, r1, #-2147483648	; 0x80000000
   1add8:	bic	r1, r1, #-2147483648	; 0x80000000
   1addc:	b	1abf0 <__assert_fail@plt+0x9714>
   1ade0:	orrs	r2, r0, r1
   1ade4:	bxeq	lr
   1ade8:	push	{r4, r5, lr}
   1adec:	mov	r5, #0
   1adf0:	b	1ae10 <__assert_fail@plt+0x9934>
   1adf4:	orrs	r2, r0, r1
   1adf8:	bxeq	lr
   1adfc:	push	{r4, r5, lr}
   1ae00:	ands	r5, r1, #-2147483648	; 0x80000000
   1ae04:	bpl	1ae10 <__assert_fail@plt+0x9934>
   1ae08:	rsbs	r0, r0, #0
   1ae0c:	rsc	r1, r1, #0
   1ae10:	mov	r4, #1024	; 0x400
   1ae14:	add	r4, r4, #50	; 0x32
   1ae18:	lsrs	ip, r1, #22
   1ae1c:	beq	1ab94 <__assert_fail@plt+0x96b8>
   1ae20:	mov	r2, #3
   1ae24:	lsrs	ip, ip, #3
   1ae28:	addne	r2, r2, #3
   1ae2c:	lsrs	ip, ip, #3
   1ae30:	addne	r2, r2, #3
   1ae34:	add	r2, r2, ip, lsr #3
   1ae38:	rsb	r3, r2, #32
   1ae3c:	lsl	ip, r0, r3
   1ae40:	lsr	r0, r0, r2
   1ae44:	orr	r0, r0, r1, lsl r3
   1ae48:	lsr	r1, r1, r2
   1ae4c:	add	r4, r4, r2
   1ae50:	b	1ab94 <__assert_fail@plt+0x96b8>
   1ae54:	cmp	r3, #0
   1ae58:	cmpeq	r2, #0
   1ae5c:	bne	1ae80 <__assert_fail@plt+0x99a4>
   1ae60:	cmp	r1, #0
   1ae64:	movlt	r1, #-2147483648	; 0x80000000
   1ae68:	movlt	r0, #0
   1ae6c:	blt	1ae7c <__assert_fail@plt+0x99a0>
   1ae70:	cmpeq	r0, #0
   1ae74:	mvnne	r1, #-2147483648	; 0x80000000
   1ae78:	mvnne	r0, #0
   1ae7c:	b	1af64 <__assert_fail@plt+0x9a88>
   1ae80:	sub	sp, sp, #8
   1ae84:	push	{sp, lr}
   1ae88:	cmp	r1, #0
   1ae8c:	blt	1aeac <__assert_fail@plt+0x99d0>
   1ae90:	cmp	r3, #0
   1ae94:	blt	1aee0 <__assert_fail@plt+0x9a04>
   1ae98:	bl	1afc0 <__assert_fail@plt+0x9ae4>
   1ae9c:	ldr	lr, [sp, #4]
   1aea0:	add	sp, sp, #8
   1aea4:	pop	{r2, r3}
   1aea8:	bx	lr
   1aeac:	rsbs	r0, r0, #0
   1aeb0:	sbc	r1, r1, r1, lsl #1
   1aeb4:	cmp	r3, #0
   1aeb8:	blt	1af04 <__assert_fail@plt+0x9a28>
   1aebc:	bl	1afc0 <__assert_fail@plt+0x9ae4>
   1aec0:	ldr	lr, [sp, #4]
   1aec4:	add	sp, sp, #8
   1aec8:	pop	{r2, r3}
   1aecc:	rsbs	r0, r0, #0
   1aed0:	sbc	r1, r1, r1, lsl #1
   1aed4:	rsbs	r2, r2, #0
   1aed8:	sbc	r3, r3, r3, lsl #1
   1aedc:	bx	lr
   1aee0:	rsbs	r2, r2, #0
   1aee4:	sbc	r3, r3, r3, lsl #1
   1aee8:	bl	1afc0 <__assert_fail@plt+0x9ae4>
   1aeec:	ldr	lr, [sp, #4]
   1aef0:	add	sp, sp, #8
   1aef4:	pop	{r2, r3}
   1aef8:	rsbs	r0, r0, #0
   1aefc:	sbc	r1, r1, r1, lsl #1
   1af00:	bx	lr
   1af04:	rsbs	r2, r2, #0
   1af08:	sbc	r3, r3, r3, lsl #1
   1af0c:	bl	1afc0 <__assert_fail@plt+0x9ae4>
   1af10:	ldr	lr, [sp, #4]
   1af14:	add	sp, sp, #8
   1af18:	pop	{r2, r3}
   1af1c:	rsbs	r2, r2, #0
   1af20:	sbc	r3, r3, r3, lsl #1
   1af24:	bx	lr
   1af28:	cmp	r3, #0
   1af2c:	cmpeq	r2, #0
   1af30:	bne	1af48 <__assert_fail@plt+0x9a6c>
   1af34:	cmp	r1, #0
   1af38:	cmpeq	r0, #0
   1af3c:	mvnne	r1, #0
   1af40:	mvnne	r0, #0
   1af44:	b	1af64 <__assert_fail@plt+0x9a88>
   1af48:	sub	sp, sp, #8
   1af4c:	push	{sp, lr}
   1af50:	bl	1afc0 <__assert_fail@plt+0x9ae4>
   1af54:	ldr	lr, [sp, #4]
   1af58:	add	sp, sp, #8
   1af5c:	pop	{r2, r3}
   1af60:	bx	lr
   1af64:	push	{r1, lr}
   1af68:	mov	r0, #8
   1af6c:	bl	11164 <raise@plt>
   1af70:	pop	{r1, pc}
   1af74:	andeq	r0, r0, r0
   1af78:	vmov	d7, r0, r1
   1af7c:	vldr	d6, [pc, #44]	; 1afb0 <__assert_fail@plt+0x9ad4>
   1af80:	vldr	d5, [pc, #48]	; 1afb8 <__assert_fail@plt+0x9adc>
   1af84:	mov	r0, #0
   1af88:	vmul.f64	d6, d7, d6
   1af8c:	vcvt.u32.f64	s12, d6
   1af90:	vcvt.f64.u32	d4, s12
   1af94:	vmov	r1, s12
   1af98:	vmls.f64	d7, d4, d5
   1af9c:	vcvt.u32.f64	s14, d7
   1afa0:	vmov	r3, s14
   1afa4:	orr	r0, r0, r3
   1afa8:	bx	lr
   1afac:	nop			; (mov r0, r0)
   1afb0:	andeq	r0, r0, r0
   1afb4:	ldclcc	0, cr0, [r0]
   1afb8:	andeq	r0, r0, r0
   1afbc:	mvnsmi	r0, r0
   1afc0:	cmp	r1, r3
   1afc4:	push	{r4, r5, r6, r7, r8, r9, lr}
   1afc8:	cmpeq	r0, r2
   1afcc:	mov	r4, r0
   1afd0:	mov	r5, r1
   1afd4:	ldr	r9, [sp, #28]
   1afd8:	movcc	r0, #0
   1afdc:	movcc	r1, #0
   1afe0:	bcc	1b0d8 <__assert_fail@plt+0x9bfc>
   1afe4:	cmp	r3, #0
   1afe8:	clzeq	ip, r2
   1afec:	clzne	ip, r3
   1aff0:	addeq	ip, ip, #32
   1aff4:	cmp	r5, #0
   1aff8:	clzeq	r1, r4
   1affc:	addeq	r1, r1, #32
   1b000:	clzne	r1, r5
   1b004:	sub	ip, ip, r1
   1b008:	sub	lr, ip, #32
   1b00c:	lsl	r7, r3, ip
   1b010:	rsb	r8, ip, #32
   1b014:	orr	r7, r7, r2, lsl lr
   1b018:	orr	r7, r7, r2, lsr r8
   1b01c:	lsl	r6, r2, ip
   1b020:	cmp	r5, r7
   1b024:	cmpeq	r4, r6
   1b028:	movcc	r0, #0
   1b02c:	movcc	r1, #0
   1b030:	bcc	1b04c <__assert_fail@plt+0x9b70>
   1b034:	mov	r3, #1
   1b038:	subs	r4, r4, r6
   1b03c:	lsl	r1, r3, lr
   1b040:	lsl	r0, r3, ip
   1b044:	orr	r1, r1, r3, lsr r8
   1b048:	sbc	r5, r5, r7
   1b04c:	cmp	ip, #0
   1b050:	beq	1b0d8 <__assert_fail@plt+0x9bfc>
   1b054:	lsrs	r3, r7, #1
   1b058:	rrx	r2, r6
   1b05c:	mov	r6, ip
   1b060:	b	1b084 <__assert_fail@plt+0x9ba8>
   1b064:	subs	r4, r4, r2
   1b068:	sbc	r5, r5, r3
   1b06c:	adds	r4, r4, r4
   1b070:	adc	r5, r5, r5
   1b074:	adds	r4, r4, #1
   1b078:	adc	r5, r5, #0
   1b07c:	subs	r6, r6, #1
   1b080:	beq	1b0a0 <__assert_fail@plt+0x9bc4>
   1b084:	cmp	r5, r3
   1b088:	cmpeq	r4, r2
   1b08c:	bcs	1b064 <__assert_fail@plt+0x9b88>
   1b090:	adds	r4, r4, r4
   1b094:	adc	r5, r5, r5
   1b098:	subs	r6, r6, #1
   1b09c:	bne	1b084 <__assert_fail@plt+0x9ba8>
   1b0a0:	lsr	r6, r4, ip
   1b0a4:	lsr	r7, r5, ip
   1b0a8:	orr	r6, r6, r5, lsl r8
   1b0ac:	adds	r2, r0, r4
   1b0b0:	orr	r6, r6, r5, lsr lr
   1b0b4:	adc	r3, r1, r5
   1b0b8:	lsl	r1, r7, ip
   1b0bc:	orr	r1, r1, r6, lsl lr
   1b0c0:	lsl	r0, r6, ip
   1b0c4:	orr	r1, r1, r6, lsr r8
   1b0c8:	subs	r0, r2, r0
   1b0cc:	mov	r4, r6
   1b0d0:	mov	r5, r7
   1b0d4:	sbc	r1, r3, r1
   1b0d8:	cmp	r9, #0
   1b0dc:	popeq	{r4, r5, r6, r7, r8, r9, pc}
   1b0e0:	strd	r4, [r9]
   1b0e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b0e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b0ec:	mov	r7, r0
   1b0f0:	ldr	r6, [pc, #72]	; 1b140 <__assert_fail@plt+0x9c64>
   1b0f4:	ldr	r5, [pc, #72]	; 1b144 <__assert_fail@plt+0x9c68>
   1b0f8:	add	r6, pc, r6
   1b0fc:	add	r5, pc, r5
   1b100:	sub	r6, r6, r5
   1b104:	mov	r8, r1
   1b108:	mov	r9, r2
   1b10c:	bl	1112c <calloc@plt-0x20>
   1b110:	asrs	r6, r6, #2
   1b114:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b118:	mov	r4, #0
   1b11c:	add	r4, r4, #1
   1b120:	ldr	r3, [r5], #4
   1b124:	mov	r2, r9
   1b128:	mov	r1, r8
   1b12c:	mov	r0, r7
   1b130:	blx	r3
   1b134:	cmp	r6, r4
   1b138:	bne	1b11c <__assert_fail@plt+0x9c40>
   1b13c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b140:	andeq	r2, r1, r0, lsl lr
   1b144:	andeq	r2, r1, r8, lsl #28
   1b148:	bx	lr
   1b14c:	ldr	r3, [pc, #12]	; 1b160 <__assert_fail@plt+0x9c84>
   1b150:	mov	r1, #0
   1b154:	add	r3, pc, r3
   1b158:	ldr	r2, [r3]
   1b15c:	b	113bc <__cxa_atexit@plt>
   1b160:	strdeq	r2, [r1], -r0

Disassembly of section .fini:

0001b164 <.fini>:
   1b164:	push	{r3, lr}
   1b168:	pop	{r3, pc}
